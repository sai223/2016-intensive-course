
back.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c88  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00002c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000120  20000070  00002cf8  00020070  2**2
                  ALLOC
  3 .stack        00002000  20000190  00002e18  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002bd36  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000334e  00000000  00000000  0004be27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000575d  00000000  00000000  0004f175  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005e0  00000000  00000000  000548d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000630  00000000  00000000  00054eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a13b  00000000  00000000  000554e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000da6c  00000000  00000000  0006f61d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00085875  00000000  00000000  0007d089  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001478  00000000  00000000  00102900  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002190 	.word	0x20002190
       4:	00001cb9 	.word	0x00001cb9
       8:	00001cb5 	.word	0x00001cb5
       c:	00001cb5 	.word	0x00001cb5
	...
      2c:	00001cb5 	.word	0x00001cb5
	...
      38:	00001cb5 	.word	0x00001cb5
      3c:	00001cb5 	.word	0x00001cb5
      40:	00001cb5 	.word	0x00001cb5
      44:	00001cb5 	.word	0x00001cb5
      48:	00001cb5 	.word	0x00001cb5
      4c:	00001cb5 	.word	0x00001cb5
      50:	00001cb5 	.word	0x00001cb5
      54:	00001cb5 	.word	0x00001cb5
      58:	00001cb5 	.word	0x00001cb5
      5c:	00001cb5 	.word	0x00001cb5
      60:	00001cb5 	.word	0x00001cb5
      64:	00001581 	.word	0x00001581
      68:	00001591 	.word	0x00001591
      6c:	000015a1 	.word	0x000015a1
      70:	000015b1 	.word	0x000015b1
      74:	000015c1 	.word	0x000015c1
      78:	000015d1 	.word	0x000015d1
      7c:	00000ef5 	.word	0x00000ef5
      80:	00000f05 	.word	0x00000f05
      84:	00000f15 	.word	0x00000f15
      88:	00001cb5 	.word	0x00001cb5
      8c:	00001cb5 	.word	0x00001cb5
      90:	00001cb5 	.word	0x00001cb5
	...
      9c:	00001cb5 	.word	0x00001cb5
      a0:	00001cb5 	.word	0x00001cb5
      a4:	00000000 	.word	0x00000000
      a8:	00001cb5 	.word	0x00001cb5
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00002c88 	.word	0x00002c88

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00002c88 	.word	0x00002c88
     10c:	00002c88 	.word	0x00002c88
     110:	00000000 	.word	0x00000000

00000114 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	465f      	mov	r7, fp
     118:	4656      	mov	r6, sl
     11a:	464d      	mov	r5, r9
     11c:	4644      	mov	r4, r8
     11e:	b4f0      	push	{r4, r5, r6, r7}
     120:	b087      	sub	sp, #28
     122:	4680      	mov	r8, r0
     124:	9104      	str	r1, [sp, #16]
     126:	0016      	movs	r6, r2
     128:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     12a:	2200      	movs	r2, #0
     12c:	2300      	movs	r3, #0
     12e:	2100      	movs	r1, #0
     130:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     132:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     134:	2001      	movs	r0, #1
     136:	0021      	movs	r1, r4
     138:	9600      	str	r6, [sp, #0]
     13a:	9701      	str	r7, [sp, #4]
     13c:	465c      	mov	r4, fp
     13e:	9403      	str	r4, [sp, #12]
     140:	4644      	mov	r4, r8
     142:	9405      	str	r4, [sp, #20]
     144:	2420      	movs	r4, #32
     146:	4264      	negs	r4, r4
     148:	190c      	adds	r4, r1, r4
     14a:	d403      	bmi.n	154 <long_division+0x40>
     14c:	0005      	movs	r5, r0
     14e:	40a5      	lsls	r5, r4
     150:	46a8      	mov	r8, r5
     152:	e004      	b.n	15e <long_division+0x4a>
     154:	2420      	movs	r4, #32
     156:	1a64      	subs	r4, r4, r1
     158:	0005      	movs	r5, r0
     15a:	40e5      	lsrs	r5, r4
     15c:	46a8      	mov	r8, r5
     15e:	0004      	movs	r4, r0
     160:	408c      	lsls	r4, r1
     162:	46a1      	mov	r9, r4

		r = r << 1;
     164:	0014      	movs	r4, r2
     166:	001d      	movs	r5, r3
     168:	18a4      	adds	r4, r4, r2
     16a:	415d      	adcs	r5, r3
     16c:	0022      	movs	r2, r4
     16e:	002b      	movs	r3, r5

		if (n & bit_shift) {
     170:	9e05      	ldr	r6, [sp, #20]
     172:	464f      	mov	r7, r9
     174:	403e      	ands	r6, r7
     176:	46b2      	mov	sl, r6
     178:	9e04      	ldr	r6, [sp, #16]
     17a:	4647      	mov	r7, r8
     17c:	403e      	ands	r6, r7
     17e:	46b4      	mov	ip, r6
     180:	4656      	mov	r6, sl
     182:	4667      	mov	r7, ip
     184:	433e      	orrs	r6, r7
     186:	d003      	beq.n	190 <long_division+0x7c>
			r |= 0x01;
     188:	0006      	movs	r6, r0
     18a:	4326      	orrs	r6, r4
     18c:	0032      	movs	r2, r6
     18e:	002b      	movs	r3, r5
		}

		if (r >= d) {
     190:	9c00      	ldr	r4, [sp, #0]
     192:	9d01      	ldr	r5, [sp, #4]
     194:	429d      	cmp	r5, r3
     196:	d80e      	bhi.n	1b6 <long_division+0xa2>
     198:	d101      	bne.n	19e <long_division+0x8a>
     19a:	4294      	cmp	r4, r2
     19c:	d80b      	bhi.n	1b6 <long_division+0xa2>
			r = r - d;
     19e:	9c00      	ldr	r4, [sp, #0]
     1a0:	9d01      	ldr	r5, [sp, #4]
     1a2:	1b12      	subs	r2, r2, r4
     1a4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     1a6:	465c      	mov	r4, fp
     1a8:	464d      	mov	r5, r9
     1aa:	432c      	orrs	r4, r5
     1ac:	46a3      	mov	fp, r4
     1ae:	9c03      	ldr	r4, [sp, #12]
     1b0:	4645      	mov	r5, r8
     1b2:	432c      	orrs	r4, r5
     1b4:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     1b6:	3901      	subs	r1, #1
     1b8:	d2c4      	bcs.n	144 <long_division+0x30>
     1ba:	9b03      	ldr	r3, [sp, #12]
			q |= bit_shift;
		}
	}

	return q;
}
     1bc:	4658      	mov	r0, fp
     1be:	0019      	movs	r1, r3
     1c0:	b007      	add	sp, #28
     1c2:	bc3c      	pop	{r2, r3, r4, r5}
     1c4:	4690      	mov	r8, r2
     1c6:	4699      	mov	r9, r3
     1c8:	46a2      	mov	sl, r4
     1ca:	46ab      	mov	fp, r5
     1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1ce:	46c0      	nop			; (mov r8, r8)

000001d0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     1d0:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     1d2:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1d4:	2340      	movs	r3, #64	; 0x40
     1d6:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     1d8:	4281      	cmp	r1, r0
     1da:	d201      	bcs.n	1e0 <_sercom_get_sync_baud_val+0x10>
     1dc:	e00a      	b.n	1f4 <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
     1de:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     1e0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     1e2:	1c63      	adds	r3, r4, #1
     1e4:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     1e6:	4288      	cmp	r0, r1
     1e8:	d9f9      	bls.n	1de <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1ea:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     1ec:	2cff      	cmp	r4, #255	; 0xff
     1ee:	d801      	bhi.n	1f4 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     1f0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     1f2:	2300      	movs	r3, #0
	}
}
     1f4:	0018      	movs	r0, r3
     1f6:	bd10      	pop	{r4, pc}

000001f8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	b083      	sub	sp, #12
     1fc:	000f      	movs	r7, r1
     1fe:	0016      	movs	r6, r2
     200:	aa08      	add	r2, sp, #32
     202:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     204:	0004      	movs	r4, r0
     206:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     208:	2240      	movs	r2, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     20a:	42bc      	cmp	r4, r7
     20c:	d836      	bhi.n	27c <_sercom_get_async_baud_val+0x84>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     20e:	2b00      	cmp	r3, #0
     210:	d112      	bne.n	238 <_sercom_get_async_baud_val+0x40>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
     212:	0002      	movs	r2, r0
     214:	0008      	movs	r0, r1
     216:	2100      	movs	r1, #0
     218:	4c1a      	ldr	r4, [pc, #104]	; (284 <_sercom_get_async_baud_val+0x8c>)
     21a:	47a0      	blx	r4
     21c:	0001      	movs	r1, r0
     21e:	003a      	movs	r2, r7
     220:	2300      	movs	r3, #0
     222:	2000      	movs	r0, #0
     224:	4c18      	ldr	r4, [pc, #96]	; (288 <_sercom_get_async_baud_val+0x90>)
     226:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
     228:	2200      	movs	r2, #0
     22a:	2301      	movs	r3, #1
     22c:	1a12      	subs	r2, r2, r0
     22e:	418b      	sbcs	r3, r1
     230:	0c12      	lsrs	r2, r2, #16
     232:	041b      	lsls	r3, r3, #16
     234:	431a      	orrs	r2, r3
     236:	e01f      	b.n	278 <_sercom_get_async_baud_val+0x80>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     238:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     23a:	2b01      	cmp	r3, #1
     23c:	d11c      	bne.n	278 <_sercom_get_async_baud_val+0x80>
		temp1 = ((uint64_t)baudrate * sample_num);
     23e:	000a      	movs	r2, r1
     240:	2300      	movs	r3, #0
     242:	2100      	movs	r1, #0
     244:	4c0f      	ldr	r4, [pc, #60]	; (284 <_sercom_get_async_baud_val+0x8c>)
     246:	47a0      	blx	r4
     248:	0002      	movs	r2, r0
     24a:	000b      	movs	r3, r1
     24c:	9200      	str	r2, [sp, #0]
     24e:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     250:	0038      	movs	r0, r7
     252:	2100      	movs	r1, #0
     254:	4c0c      	ldr	r4, [pc, #48]	; (288 <_sercom_get_async_baud_val+0x90>)
     256:	47a0      	blx	r4
     258:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     25a:	2240      	movs	r2, #64	; 0x40
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		temp1 = ((uint64_t)baudrate * sample_num);
		baud_int = long_division( peripheral_clock, temp1);
		if(baud_int > BAUD_INT_MAX) {
     25c:	2380      	movs	r3, #128	; 0x80
     25e:	019b      	lsls	r3, r3, #6
     260:	4298      	cmp	r0, r3
     262:	d80b      	bhi.n	27c <_sercom_get_async_baud_val+0x84>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     264:	0f79      	lsrs	r1, r7, #29
     266:	00f8      	lsls	r0, r7, #3
     268:	9a00      	ldr	r2, [sp, #0]
     26a:	9b01      	ldr	r3, [sp, #4]
     26c:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
		baud_calculated = baud_int | (baud_fp << 13);
     26e:	00ea      	lsls	r2, r5, #3
     270:	1a82      	subs	r2, r0, r2
     272:	b2d2      	uxtb	r2, r2
     274:	0352      	lsls	r2, r2, #13
     276:	432a      	orrs	r2, r5
	}

	*baudval = baud_calculated;
     278:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     27a:	2200      	movs	r2, #0
}
     27c:	0010      	movs	r0, r2
     27e:	b003      	add	sp, #12
     280:	bdf0      	pop	{r4, r5, r6, r7, pc}
     282:	46c0      	nop			; (mov r8, r8)
     284:	00001fb5 	.word	0x00001fb5
     288:	00000115 	.word	0x00000115

0000028c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     28c:	b510      	push	{r4, lr}
     28e:	b082      	sub	sp, #8
     290:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     292:	4b0e      	ldr	r3, [pc, #56]	; (2cc <sercom_set_gclk_generator+0x40>)
     294:	781b      	ldrb	r3, [r3, #0]
     296:	2b00      	cmp	r3, #0
     298:	d001      	beq.n	29e <sercom_set_gclk_generator+0x12>
     29a:	2900      	cmp	r1, #0
     29c:	d00d      	beq.n	2ba <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     29e:	a901      	add	r1, sp, #4
     2a0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     2a2:	2013      	movs	r0, #19
     2a4:	4b0a      	ldr	r3, [pc, #40]	; (2d0 <sercom_set_gclk_generator+0x44>)
     2a6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     2a8:	2013      	movs	r0, #19
     2aa:	4b0a      	ldr	r3, [pc, #40]	; (2d4 <sercom_set_gclk_generator+0x48>)
     2ac:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     2ae:	4b07      	ldr	r3, [pc, #28]	; (2cc <sercom_set_gclk_generator+0x40>)
     2b0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     2b2:	2201      	movs	r2, #1
     2b4:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     2b6:	2000      	movs	r0, #0
     2b8:	e006      	b.n	2c8 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     2ba:	4b04      	ldr	r3, [pc, #16]	; (2cc <sercom_set_gclk_generator+0x40>)
     2bc:	785b      	ldrb	r3, [r3, #1]
     2be:	4283      	cmp	r3, r0
     2c0:	d001      	beq.n	2c6 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     2c2:	201d      	movs	r0, #29
     2c4:	e000      	b.n	2c8 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     2c6:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     2c8:	b002      	add	sp, #8
     2ca:	bd10      	pop	{r4, pc}
     2cc:	2000008c 	.word	0x2000008c
     2d0:	00001b5d 	.word	0x00001b5d
     2d4:	00001ad1 	.word	0x00001ad1

000002d8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     2d8:	4b44      	ldr	r3, [pc, #272]	; (3ec <_sercom_get_default_pad+0x114>)
     2da:	4298      	cmp	r0, r3
     2dc:	d033      	beq.n	346 <_sercom_get_default_pad+0x6e>
     2de:	d806      	bhi.n	2ee <_sercom_get_default_pad+0x16>
     2e0:	4b43      	ldr	r3, [pc, #268]	; (3f0 <_sercom_get_default_pad+0x118>)
     2e2:	4298      	cmp	r0, r3
     2e4:	d00d      	beq.n	302 <_sercom_get_default_pad+0x2a>
     2e6:	4b43      	ldr	r3, [pc, #268]	; (3f4 <_sercom_get_default_pad+0x11c>)
     2e8:	4298      	cmp	r0, r3
     2ea:	d01b      	beq.n	324 <_sercom_get_default_pad+0x4c>
     2ec:	e06f      	b.n	3ce <_sercom_get_default_pad+0xf6>
     2ee:	4b42      	ldr	r3, [pc, #264]	; (3f8 <_sercom_get_default_pad+0x120>)
     2f0:	4298      	cmp	r0, r3
     2f2:	d04a      	beq.n	38a <_sercom_get_default_pad+0xb2>
     2f4:	4b41      	ldr	r3, [pc, #260]	; (3fc <_sercom_get_default_pad+0x124>)
     2f6:	4298      	cmp	r0, r3
     2f8:	d058      	beq.n	3ac <_sercom_get_default_pad+0xd4>
     2fa:	4b41      	ldr	r3, [pc, #260]	; (400 <_sercom_get_default_pad+0x128>)
     2fc:	4298      	cmp	r0, r3
     2fe:	d166      	bne.n	3ce <_sercom_get_default_pad+0xf6>
     300:	e032      	b.n	368 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     302:	2901      	cmp	r1, #1
     304:	d006      	beq.n	314 <_sercom_get_default_pad+0x3c>
     306:	2900      	cmp	r1, #0
     308:	d063      	beq.n	3d2 <_sercom_get_default_pad+0xfa>
     30a:	2902      	cmp	r1, #2
     30c:	d006      	beq.n	31c <_sercom_get_default_pad+0x44>
     30e:	2903      	cmp	r1, #3
     310:	d006      	beq.n	320 <_sercom_get_default_pad+0x48>
     312:	e001      	b.n	318 <_sercom_get_default_pad+0x40>
     314:	483b      	ldr	r0, [pc, #236]	; (404 <_sercom_get_default_pad+0x12c>)
     316:	e067      	b.n	3e8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     318:	2000      	movs	r0, #0
     31a:	e065      	b.n	3e8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     31c:	483a      	ldr	r0, [pc, #232]	; (408 <_sercom_get_default_pad+0x130>)
     31e:	e063      	b.n	3e8 <_sercom_get_default_pad+0x110>
     320:	483a      	ldr	r0, [pc, #232]	; (40c <_sercom_get_default_pad+0x134>)
     322:	e061      	b.n	3e8 <_sercom_get_default_pad+0x110>
     324:	2901      	cmp	r1, #1
     326:	d006      	beq.n	336 <_sercom_get_default_pad+0x5e>
     328:	2900      	cmp	r1, #0
     32a:	d054      	beq.n	3d6 <_sercom_get_default_pad+0xfe>
     32c:	2902      	cmp	r1, #2
     32e:	d006      	beq.n	33e <_sercom_get_default_pad+0x66>
     330:	2903      	cmp	r1, #3
     332:	d006      	beq.n	342 <_sercom_get_default_pad+0x6a>
     334:	e001      	b.n	33a <_sercom_get_default_pad+0x62>
     336:	4836      	ldr	r0, [pc, #216]	; (410 <_sercom_get_default_pad+0x138>)
     338:	e056      	b.n	3e8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     33a:	2000      	movs	r0, #0
     33c:	e054      	b.n	3e8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     33e:	4835      	ldr	r0, [pc, #212]	; (414 <_sercom_get_default_pad+0x13c>)
     340:	e052      	b.n	3e8 <_sercom_get_default_pad+0x110>
     342:	4835      	ldr	r0, [pc, #212]	; (418 <_sercom_get_default_pad+0x140>)
     344:	e050      	b.n	3e8 <_sercom_get_default_pad+0x110>
     346:	2901      	cmp	r1, #1
     348:	d006      	beq.n	358 <_sercom_get_default_pad+0x80>
     34a:	2900      	cmp	r1, #0
     34c:	d045      	beq.n	3da <_sercom_get_default_pad+0x102>
     34e:	2902      	cmp	r1, #2
     350:	d006      	beq.n	360 <_sercom_get_default_pad+0x88>
     352:	2903      	cmp	r1, #3
     354:	d006      	beq.n	364 <_sercom_get_default_pad+0x8c>
     356:	e001      	b.n	35c <_sercom_get_default_pad+0x84>
     358:	4830      	ldr	r0, [pc, #192]	; (41c <_sercom_get_default_pad+0x144>)
     35a:	e045      	b.n	3e8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     35c:	2000      	movs	r0, #0
     35e:	e043      	b.n	3e8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     360:	482f      	ldr	r0, [pc, #188]	; (420 <_sercom_get_default_pad+0x148>)
     362:	e041      	b.n	3e8 <_sercom_get_default_pad+0x110>
     364:	482f      	ldr	r0, [pc, #188]	; (424 <_sercom_get_default_pad+0x14c>)
     366:	e03f      	b.n	3e8 <_sercom_get_default_pad+0x110>
     368:	2901      	cmp	r1, #1
     36a:	d006      	beq.n	37a <_sercom_get_default_pad+0xa2>
     36c:	2900      	cmp	r1, #0
     36e:	d036      	beq.n	3de <_sercom_get_default_pad+0x106>
     370:	2902      	cmp	r1, #2
     372:	d006      	beq.n	382 <_sercom_get_default_pad+0xaa>
     374:	2903      	cmp	r1, #3
     376:	d006      	beq.n	386 <_sercom_get_default_pad+0xae>
     378:	e001      	b.n	37e <_sercom_get_default_pad+0xa6>
     37a:	482b      	ldr	r0, [pc, #172]	; (428 <_sercom_get_default_pad+0x150>)
     37c:	e034      	b.n	3e8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     37e:	2000      	movs	r0, #0
     380:	e032      	b.n	3e8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     382:	482a      	ldr	r0, [pc, #168]	; (42c <_sercom_get_default_pad+0x154>)
     384:	e030      	b.n	3e8 <_sercom_get_default_pad+0x110>
     386:	482a      	ldr	r0, [pc, #168]	; (430 <_sercom_get_default_pad+0x158>)
     388:	e02e      	b.n	3e8 <_sercom_get_default_pad+0x110>
     38a:	2901      	cmp	r1, #1
     38c:	d006      	beq.n	39c <_sercom_get_default_pad+0xc4>
     38e:	2900      	cmp	r1, #0
     390:	d027      	beq.n	3e2 <_sercom_get_default_pad+0x10a>
     392:	2902      	cmp	r1, #2
     394:	d006      	beq.n	3a4 <_sercom_get_default_pad+0xcc>
     396:	2903      	cmp	r1, #3
     398:	d006      	beq.n	3a8 <_sercom_get_default_pad+0xd0>
     39a:	e001      	b.n	3a0 <_sercom_get_default_pad+0xc8>
     39c:	4825      	ldr	r0, [pc, #148]	; (434 <_sercom_get_default_pad+0x15c>)
     39e:	e023      	b.n	3e8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3a0:	2000      	movs	r0, #0
     3a2:	e021      	b.n	3e8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3a4:	4824      	ldr	r0, [pc, #144]	; (438 <_sercom_get_default_pad+0x160>)
     3a6:	e01f      	b.n	3e8 <_sercom_get_default_pad+0x110>
     3a8:	4824      	ldr	r0, [pc, #144]	; (43c <_sercom_get_default_pad+0x164>)
     3aa:	e01d      	b.n	3e8 <_sercom_get_default_pad+0x110>
     3ac:	2901      	cmp	r1, #1
     3ae:	d006      	beq.n	3be <_sercom_get_default_pad+0xe6>
     3b0:	2900      	cmp	r1, #0
     3b2:	d018      	beq.n	3e6 <_sercom_get_default_pad+0x10e>
     3b4:	2902      	cmp	r1, #2
     3b6:	d006      	beq.n	3c6 <_sercom_get_default_pad+0xee>
     3b8:	2903      	cmp	r1, #3
     3ba:	d006      	beq.n	3ca <_sercom_get_default_pad+0xf2>
     3bc:	e001      	b.n	3c2 <_sercom_get_default_pad+0xea>
     3be:	4820      	ldr	r0, [pc, #128]	; (440 <_sercom_get_default_pad+0x168>)
     3c0:	e012      	b.n	3e8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3c2:	2000      	movs	r0, #0
     3c4:	e010      	b.n	3e8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3c6:	481f      	ldr	r0, [pc, #124]	; (444 <_sercom_get_default_pad+0x16c>)
     3c8:	e00e      	b.n	3e8 <_sercom_get_default_pad+0x110>
     3ca:	481f      	ldr	r0, [pc, #124]	; (448 <_sercom_get_default_pad+0x170>)
     3cc:	e00c      	b.n	3e8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3ce:	2000      	movs	r0, #0
     3d0:	e00a      	b.n	3e8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3d2:	481e      	ldr	r0, [pc, #120]	; (44c <_sercom_get_default_pad+0x174>)
     3d4:	e008      	b.n	3e8 <_sercom_get_default_pad+0x110>
     3d6:	2003      	movs	r0, #3
     3d8:	e006      	b.n	3e8 <_sercom_get_default_pad+0x110>
     3da:	481d      	ldr	r0, [pc, #116]	; (450 <_sercom_get_default_pad+0x178>)
     3dc:	e004      	b.n	3e8 <_sercom_get_default_pad+0x110>
     3de:	481d      	ldr	r0, [pc, #116]	; (454 <_sercom_get_default_pad+0x17c>)
     3e0:	e002      	b.n	3e8 <_sercom_get_default_pad+0x110>
     3e2:	481d      	ldr	r0, [pc, #116]	; (458 <_sercom_get_default_pad+0x180>)
     3e4:	e000      	b.n	3e8 <_sercom_get_default_pad+0x110>
     3e6:	481d      	ldr	r0, [pc, #116]	; (45c <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     3e8:	4770      	bx	lr
     3ea:	46c0      	nop			; (mov r8, r8)
     3ec:	42001000 	.word	0x42001000
     3f0:	42000800 	.word	0x42000800
     3f4:	42000c00 	.word	0x42000c00
     3f8:	42001800 	.word	0x42001800
     3fc:	42001c00 	.word	0x42001c00
     400:	42001400 	.word	0x42001400
     404:	00050003 	.word	0x00050003
     408:	00060003 	.word	0x00060003
     40c:	00070003 	.word	0x00070003
     410:	00010003 	.word	0x00010003
     414:	001e0003 	.word	0x001e0003
     418:	001f0003 	.word	0x001f0003
     41c:	000d0002 	.word	0x000d0002
     420:	000e0002 	.word	0x000e0002
     424:	000f0002 	.word	0x000f0002
     428:	00110003 	.word	0x00110003
     42c:	00120003 	.word	0x00120003
     430:	00130003 	.word	0x00130003
     434:	003f0005 	.word	0x003f0005
     438:	003e0005 	.word	0x003e0005
     43c:	00520005 	.word	0x00520005
     440:	00170003 	.word	0x00170003
     444:	00180003 	.word	0x00180003
     448:	00190003 	.word	0x00190003
     44c:	00040003 	.word	0x00040003
     450:	000c0002 	.word	0x000c0002
     454:	00100003 	.word	0x00100003
     458:	00530005 	.word	0x00530005
     45c:	00160003 	.word	0x00160003

00000460 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     460:	b530      	push	{r4, r5, lr}
     462:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     464:	4b0c      	ldr	r3, [pc, #48]	; (498 <_sercom_get_sercom_inst_index+0x38>)
     466:	466a      	mov	r2, sp
     468:	cb32      	ldmia	r3!, {r1, r4, r5}
     46a:	c232      	stmia	r2!, {r1, r4, r5}
     46c:	cb32      	ldmia	r3!, {r1, r4, r5}
     46e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     470:	9b00      	ldr	r3, [sp, #0]
     472:	4283      	cmp	r3, r0
     474:	d006      	beq.n	484 <_sercom_get_sercom_inst_index+0x24>
     476:	2301      	movs	r3, #1
     478:	009a      	lsls	r2, r3, #2
     47a:	4669      	mov	r1, sp
     47c:	5852      	ldr	r2, [r2, r1]
     47e:	4282      	cmp	r2, r0
     480:	d103      	bne.n	48a <_sercom_get_sercom_inst_index+0x2a>
     482:	e000      	b.n	486 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     484:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     486:	b2d8      	uxtb	r0, r3
     488:	e003      	b.n	492 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     48a:	3301      	adds	r3, #1
     48c:	2b06      	cmp	r3, #6
     48e:	d1f3      	bne.n	478 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     490:	2000      	movs	r0, #0
}
     492:	b007      	add	sp, #28
     494:	bd30      	pop	{r4, r5, pc}
     496:	46c0      	nop			; (mov r8, r8)
     498:	00002b28 	.word	0x00002b28

0000049c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     49c:	b5f0      	push	{r4, r5, r6, r7, lr}
     49e:	4647      	mov	r7, r8
     4a0:	b480      	push	{r7}
     4a2:	000c      	movs	r4, r1
     4a4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     4a6:	2800      	cmp	r0, #0
     4a8:	d10d      	bne.n	4c6 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
     4aa:	2a00      	cmp	r2, #0
     4ac:	dd0e      	ble.n	4cc <_read+0x30>
     4ae:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     4b0:	4e08      	ldr	r6, [pc, #32]	; (4d4 <_read+0x38>)
     4b2:	4d09      	ldr	r5, [pc, #36]	; (4d8 <_read+0x3c>)
     4b4:	6830      	ldr	r0, [r6, #0]
     4b6:	0021      	movs	r1, r4
     4b8:	682b      	ldr	r3, [r5, #0]
     4ba:	4798      	blx	r3
		ptr++;
     4bc:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     4be:	42a7      	cmp	r7, r4
     4c0:	d1f8      	bne.n	4b4 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     4c2:	4640      	mov	r0, r8
     4c4:	e003      	b.n	4ce <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     4c6:	2001      	movs	r0, #1
     4c8:	4240      	negs	r0, r0
     4ca:	e000      	b.n	4ce <_read+0x32>
	}

	for (; len > 0; --len) {
     4cc:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
     4ce:	bc04      	pop	{r2}
     4d0:	4690      	mov	r8, r2
     4d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4d4:	200000dc 	.word	0x200000dc
     4d8:	200000d4 	.word	0x200000d4

000004dc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4de:	4647      	mov	r7, r8
     4e0:	b480      	push	{r7}
     4e2:	000e      	movs	r6, r1
     4e4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     4e6:	3801      	subs	r0, #1
     4e8:	2802      	cmp	r0, #2
     4ea:	d811      	bhi.n	510 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
     4ec:	2a00      	cmp	r2, #0
     4ee:	d012      	beq.n	516 <_write+0x3a>
     4f0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     4f2:	4b0c      	ldr	r3, [pc, #48]	; (524 <_write+0x48>)
     4f4:	4698      	mov	r8, r3
     4f6:	4f0c      	ldr	r7, [pc, #48]	; (528 <_write+0x4c>)
     4f8:	4643      	mov	r3, r8
     4fa:	6818      	ldr	r0, [r3, #0]
     4fc:	5d31      	ldrb	r1, [r6, r4]
     4fe:	683b      	ldr	r3, [r7, #0]
     500:	4798      	blx	r3
     502:	2800      	cmp	r0, #0
     504:	db09      	blt.n	51a <_write+0x3e>
			return -1;
		}
		++nChars;
     506:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     508:	42a5      	cmp	r5, r4
     50a:	d1f5      	bne.n	4f8 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
     50c:	0020      	movs	r0, r4
     50e:	e006      	b.n	51e <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     510:	2001      	movs	r0, #1
     512:	4240      	negs	r0, r0
     514:	e003      	b.n	51e <_write+0x42>
	}

	for (; len != 0; --len) {
     516:	2000      	movs	r0, #0
     518:	e001      	b.n	51e <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     51a:	2001      	movs	r0, #1
     51c:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
     51e:	bc04      	pop	{r2}
     520:	4690      	mov	r8, r2
     522:	bdf0      	pop	{r4, r5, r6, r7, pc}
     524:	200000dc 	.word	0x200000dc
     528:	200000d8 	.word	0x200000d8

0000052c <artist_motor_configure>:
 *  Author: credt
 */ 
#include "Motor.h"

void artist_motor_configure(struct artist_motor_module * motor_instance, uint8_t pwm_pin, uint8_t pwm_mux, 
					uint8_t pwm_channel, uint8_t pwm_output) {
     52c:	b510      	push	{r4, lr}
     52e:	ac02      	add	r4, sp, #8
     530:	7824      	ldrb	r4, [r4, #0]
	 motor_instance->pwm_pin_num	= pwm_pin;
     532:	7001      	strb	r1, [r0, #0]
	 motor_instance->pwm_mux_num	= pwm_mux;
     534:	7042      	strb	r2, [r0, #1]
	 motor_instance->pwm_val		= CONF_ARTIST_MOTOR_PWM_STOP; 
     536:	2200      	movs	r2, #0
     538:	8042      	strh	r2, [r0, #2]
	 motor_instance->pwm_channel	= pwm_channel; 
     53a:	7103      	strb	r3, [r0, #4]
	 motor_instance->pwm_output		= pwm_output; 
     53c:	7144      	strb	r4, [r0, #5]
 }
     53e:	bd10      	pop	{r4, pc}

00000540 <artist_motor_stop>:
		artist_motor_stop(motor_left_side);
		artist_motor_stop(motor_right_side);
	}
}

void artist_motor_stop(struct artist_motor_module * motor_instance) {
     540:	b510      	push	{r4, lr}
	motor_instance->pwm_val = CONF_ARTIST_MOTOR_PWM_STOP; 
     542:	2300      	movs	r3, #0
     544:	8043      	strh	r3, [r0, #2]
	tcc_set_compare_value(&(artist_back.tcc_instance), motor_instance->pwm_channel, CONF_ARTIST_MOTOR_PWM_STOP);
     546:	7901      	ldrb	r1, [r0, #4]
     548:	2200      	movs	r2, #0
     54a:	4802      	ldr	r0, [pc, #8]	; (554 <artist_motor_stop+0x14>)
     54c:	4b02      	ldr	r3, [pc, #8]	; (558 <artist_motor_stop+0x18>)
     54e:	4798      	blx	r3
}
     550:	bd10      	pop	{r4, pc}
     552:	46c0      	nop			; (mov r8, r8)
     554:	200000e0 	.word	0x200000e0
     558:	00000e8d 	.word	0x00000e8d

0000055c <artist_motor_forward>:
void artist_motor_forward(struct artist_motor_module * motor_instance){
     55c:	b510      	push	{r4, lr}
	motor_instance->pwm_val = CONF_ARTIST_MOTOR_PWM_FORWORD;
     55e:	4a03      	ldr	r2, [pc, #12]	; (56c <artist_motor_forward+0x10>)
     560:	8042      	strh	r2, [r0, #2]
	tcc_set_compare_value(&(artist_back.tcc_instance), motor_instance->pwm_channel, CONF_ARTIST_MOTOR_PWM_FORWORD);
     562:	7901      	ldrb	r1, [r0, #4]
     564:	4802      	ldr	r0, [pc, #8]	; (570 <artist_motor_forward+0x14>)
     566:	4b03      	ldr	r3, [pc, #12]	; (574 <artist_motor_forward+0x18>)
     568:	4798      	blx	r3
}
     56a:	bd10      	pop	{r4, pc}
     56c:	00002fff 	.word	0x00002fff
     570:	200000e0 	.word	0x200000e0
     574:	00000e8d 	.word	0x00000e8d

00000578 <artist_motor_backward>:
void artist_motor_backward(struct artist_motor_module * motor_instance){
     578:	b510      	push	{r4, lr}
	motor_instance->pwm_val = CONF_ARTIST_MOTOR_PWM_FORWORD;
     57a:	4b04      	ldr	r3, [pc, #16]	; (58c <artist_motor_backward+0x14>)
     57c:	8043      	strh	r3, [r0, #2]
	tcc_set_compare_value(&(artist_back.tcc_instance), motor_instance->pwm_channel, CONF_ARTIST_MOTOR_PWM_BACKWORD);
     57e:	7901      	ldrb	r1, [r0, #4]
     580:	4a03      	ldr	r2, [pc, #12]	; (590 <artist_motor_backward+0x18>)
     582:	4804      	ldr	r0, [pc, #16]	; (594 <artist_motor_backward+0x1c>)
     584:	4b04      	ldr	r3, [pc, #16]	; (598 <artist_motor_backward+0x20>)
     586:	4798      	blx	r3
     588:	bd10      	pop	{r4, pc}
     58a:	46c0      	nop			; (mov r8, r8)
     58c:	00002fff 	.word	0x00002fff
     590:	00000fff 	.word	0x00000fff
     594:	200000e0 	.word	0x200000e0
     598:	00000e8d 	.word	0x00000e8d

0000059c <artist_move_motor>:
	 motor_instance->pwm_output		= pwm_output; 
 }

void artist_move_motor(struct artist_motor_module * motor_left_side,
					struct artist_motor_module * motor_right_side,
					enum DIRECTION_STATUS move_direction) {
     59c:	b570      	push	{r4, r5, r6, lr}
     59e:	000c      	movs	r4, r1
	if(move_direction == STRAIGHT){
     5a0:	2a00      	cmp	r2, #0
     5a2:	d105      	bne.n	5b0 <artist_move_motor+0x14>
		artist_motor_forward(motor_left_side);
     5a4:	4b11      	ldr	r3, [pc, #68]	; (5ec <artist_move_motor+0x50>)
     5a6:	4798      	blx	r3
		artist_motor_backward(motor_right_side);
     5a8:	0020      	movs	r0, r4
     5aa:	4b11      	ldr	r3, [pc, #68]	; (5f0 <artist_move_motor+0x54>)
     5ac:	4798      	blx	r3
     5ae:	e01b      	b.n	5e8 <artist_move_motor+0x4c>
	}
	else if(move_direction == LEFT){
     5b0:	2a01      	cmp	r2, #1
     5b2:	d104      	bne.n	5be <artist_move_motor+0x22>
		artist_motor_forward(motor_left_side);
     5b4:	4d0d      	ldr	r5, [pc, #52]	; (5ec <artist_move_motor+0x50>)
     5b6:	47a8      	blx	r5
		artist_motor_forward(motor_right_side);
     5b8:	0020      	movs	r0, r4
     5ba:	47a8      	blx	r5
     5bc:	e014      	b.n	5e8 <artist_move_motor+0x4c>
	}
	else if(move_direction == RIGHT){
     5be:	2a02      	cmp	r2, #2
     5c0:	d104      	bne.n	5cc <artist_move_motor+0x30>
		artist_motor_backward(motor_left_side);
     5c2:	4d0b      	ldr	r5, [pc, #44]	; (5f0 <artist_move_motor+0x54>)
     5c4:	47a8      	blx	r5
		artist_motor_backward(motor_right_side);
     5c6:	0020      	movs	r0, r4
     5c8:	47a8      	blx	r5
     5ca:	e00d      	b.n	5e8 <artist_move_motor+0x4c>
	}
	else if(move_direction == BACK){
     5cc:	2a04      	cmp	r2, #4
     5ce:	d105      	bne.n	5dc <artist_move_motor+0x40>
		artist_motor_backward(motor_left_side);
     5d0:	4b07      	ldr	r3, [pc, #28]	; (5f0 <artist_move_motor+0x54>)
     5d2:	4798      	blx	r3
		artist_motor_forward(motor_right_side);
     5d4:	0020      	movs	r0, r4
     5d6:	4b05      	ldr	r3, [pc, #20]	; (5ec <artist_move_motor+0x50>)
     5d8:	4798      	blx	r3
     5da:	e005      	b.n	5e8 <artist_move_motor+0x4c>
	}
	else if(move_direction == STOP){
     5dc:	2a03      	cmp	r2, #3
     5de:	d103      	bne.n	5e8 <artist_move_motor+0x4c>
		artist_motor_stop(motor_left_side);
     5e0:	4d04      	ldr	r5, [pc, #16]	; (5f4 <artist_move_motor+0x58>)
     5e2:	47a8      	blx	r5
		artist_motor_stop(motor_right_side);
     5e4:	0020      	movs	r0, r4
     5e6:	47a8      	blx	r5
	}
}
     5e8:	bd70      	pop	{r4, r5, r6, pc}
     5ea:	46c0      	nop			; (mov r8, r8)
     5ec:	0000055d 	.word	0x0000055d
     5f0:	00000579 	.word	0x00000579
     5f4:	00000541 	.word	0x00000541

000005f8 <usart_write_callback>:
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
}
void usart_write_callback(struct usart_module *const usart_module)
{
	//port_pin_toggle_output_level(LED_0_PIN);
}
     5f8:	4770      	bx	lr
     5fa:	46c0      	nop			; (mov r8, r8)

000005fc <usart_read_callback>:
#include "TheArtist.h" 
#include "Motor.h"


void usart_read_callback(struct usart_module * const usart_instance)
{
     5fc:	b510      	push	{r4, lr}
     5fe:	0004      	movs	r4, r0
	//port_pin_toggle_output_level(LED_0_PIN);
	switch  (rx_buffer[0])	{
     600:	4b1a      	ldr	r3, [pc, #104]	; (66c <usart_read_callback+0x70>)
     602:	781b      	ldrb	r3, [r3, #0]
     604:	2b6d      	cmp	r3, #109	; 0x6d
     606:	d12b      	bne.n	660 <usart_read_callback+0x64>
		case 'm' : 
		switch (rx_buffer[1]){
     608:	4b18      	ldr	r3, [pc, #96]	; (66c <usart_read_callback+0x70>)
     60a:	785b      	ldrb	r3, [r3, #1]
     60c:	b2db      	uxtb	r3, r3
     60e:	2b64      	cmp	r3, #100	; 0x64
     610:	d015      	beq.n	63e <usart_read_callback+0x42>
     612:	d804      	bhi.n	61e <usart_read_callback+0x22>
     614:	2b20      	cmp	r3, #32
     616:	d01e      	beq.n	656 <usart_read_callback+0x5a>
     618:	2b61      	cmp	r3, #97	; 0x61
     61a:	d00a      	beq.n	632 <usart_read_callback+0x36>
     61c:	e020      	b.n	660 <usart_read_callback+0x64>
     61e:	2b73      	cmp	r3, #115	; 0x73
     620:	d013      	beq.n	64a <usart_read_callback+0x4e>
     622:	2b77      	cmp	r3, #119	; 0x77
     624:	d11c      	bne.n	660 <usart_read_callback+0x64>
			case 'w' :
			artist_move_motor(&(artist_back.motor_left_side), &(artist_back.motor_right_side), STRAIGHT);
     626:	4912      	ldr	r1, [pc, #72]	; (670 <usart_read_callback+0x74>)
     628:	1f88      	subs	r0, r1, #6
     62a:	2200      	movs	r2, #0
     62c:	4b11      	ldr	r3, [pc, #68]	; (674 <usart_read_callback+0x78>)
     62e:	4798      	blx	r3
			break;
     630:	e016      	b.n	660 <usart_read_callback+0x64>
			case 'a' :
			artist_move_motor(&(artist_back.motor_left_side), &(artist_back.motor_right_side), LEFT);
     632:	490f      	ldr	r1, [pc, #60]	; (670 <usart_read_callback+0x74>)
     634:	1f88      	subs	r0, r1, #6
     636:	2201      	movs	r2, #1
     638:	4b0e      	ldr	r3, [pc, #56]	; (674 <usart_read_callback+0x78>)
     63a:	4798      	blx	r3
			break;
     63c:	e010      	b.n	660 <usart_read_callback+0x64>
			case 'd' :
			artist_move_motor(&(artist_back.motor_left_side), &(artist_back.motor_right_side), RIGHT);
     63e:	490c      	ldr	r1, [pc, #48]	; (670 <usart_read_callback+0x74>)
     640:	1f88      	subs	r0, r1, #6
     642:	2202      	movs	r2, #2
     644:	4b0b      	ldr	r3, [pc, #44]	; (674 <usart_read_callback+0x78>)
     646:	4798      	blx	r3
			break;
     648:	e00a      	b.n	660 <usart_read_callback+0x64>
			case 's' :
			artist_move_motor(&(artist_back.motor_left_side), &(artist_back.motor_right_side), BACK);
     64a:	4909      	ldr	r1, [pc, #36]	; (670 <usart_read_callback+0x74>)
     64c:	1f88      	subs	r0, r1, #6
     64e:	2204      	movs	r2, #4
     650:	4b08      	ldr	r3, [pc, #32]	; (674 <usart_read_callback+0x78>)
     652:	4798      	blx	r3
			break;
     654:	e004      	b.n	660 <usart_read_callback+0x64>
			case ' ' :
			artist_move_motor(&(artist_back.motor_left_side), &(artist_back.motor_right_side), STOP);
     656:	4906      	ldr	r1, [pc, #24]	; (670 <usart_read_callback+0x74>)
     658:	1f88      	subs	r0, r1, #6
     65a:	2203      	movs	r2, #3
     65c:	4b05      	ldr	r3, [pc, #20]	; (674 <usart_read_callback+0x78>)
     65e:	4798      	blx	r3
			break;
		}
	}
	usart_read_buffer_job( usart_instance,
     660:	2205      	movs	r2, #5
     662:	4902      	ldr	r1, [pc, #8]	; (66c <usart_read_callback+0x70>)
     664:	0020      	movs	r0, r4
     666:	4b04      	ldr	r3, [pc, #16]	; (678 <usart_read_callback+0x7c>)
     668:	4798      	blx	r3
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
}
     66a:	bd10      	pop	{r4, pc}
     66c:	20000160 	.word	0x20000160
     670:	2000015a 	.word	0x2000015a
     674:	0000059d 	.word	0x0000059d
     678:	00001369 	.word	0x00001369

0000067c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     67c:	b570      	push	{r4, r5, r6, lr}
     67e:	b082      	sub	sp, #8
     680:	0005      	movs	r5, r0
     682:	000e      	movs	r6, r1
	uint16_t temp = 0;
     684:	2200      	movs	r2, #0
     686:	466b      	mov	r3, sp
     688:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     68a:	4c06      	ldr	r4, [pc, #24]	; (6a4 <usart_serial_getchar+0x28>)
     68c:	466b      	mov	r3, sp
     68e:	1d99      	adds	r1, r3, #6
     690:	0028      	movs	r0, r5
     692:	47a0      	blx	r4
     694:	2800      	cmp	r0, #0
     696:	d1f9      	bne.n	68c <usart_serial_getchar+0x10>

	*c = temp;
     698:	466b      	mov	r3, sp
     69a:	3306      	adds	r3, #6
     69c:	881b      	ldrh	r3, [r3, #0]
     69e:	7033      	strb	r3, [r6, #0]
}
     6a0:	b002      	add	sp, #8
     6a2:	bd70      	pop	{r4, r5, r6, pc}
     6a4:	00001291 	.word	0x00001291

000006a8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     6a8:	b570      	push	{r4, r5, r6, lr}
     6aa:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     6ac:	b28c      	uxth	r4, r1
     6ae:	4e03      	ldr	r6, [pc, #12]	; (6bc <usart_serial_putchar+0x14>)
     6b0:	0021      	movs	r1, r4
     6b2:	0028      	movs	r0, r5
     6b4:	47b0      	blx	r6
     6b6:	2800      	cmp	r0, #0
     6b8:	d1fa      	bne.n	6b0 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
     6ba:	bd70      	pop	{r4, r5, r6, pc}
     6bc:	00001265 	.word	0x00001265

000006c0 <configure_usart_callbacks>:
	//port_pin_toggle_output_level(LED_0_PIN);
}


void configure_usart_callbacks(struct usart_module * usart_instance)
{
     6c0:	b570      	push	{r4, r5, r6, lr}
     6c2:	0004      	movs	r4, r0
	//! [setup_register_callbacks]
	usart_register_callback(usart_instance,
     6c4:	2200      	movs	r2, #0
     6c6:	4906      	ldr	r1, [pc, #24]	; (6e0 <configure_usart_callbacks+0x20>)
     6c8:	4d06      	ldr	r5, [pc, #24]	; (6e4 <configure_usart_callbacks+0x24>)
     6ca:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	
	usart_register_callback(usart_instance,
     6cc:	2201      	movs	r2, #1
     6ce:	4906      	ldr	r1, [pc, #24]	; (6e8 <configure_usart_callbacks+0x28>)
     6d0:	0020      	movs	r0, r4
     6d2:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     6d4:	2231      	movs	r2, #49	; 0x31
     6d6:	5ca1      	ldrb	r1, [r4, r2]
     6d8:	2303      	movs	r3, #3
     6da:	430b      	orrs	r3, r1
     6dc:	54a3      	strb	r3, [r4, r2]

	//! [setup_enable_callbacks]
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
	//! [setup_enable_callbacks]
}
     6de:	bd70      	pop	{r4, r5, r6, pc}
     6e0:	000005f9 	.word	0x000005f9
     6e4:	00001351 	.word	0x00001351
     6e8:	000005fd 	.word	0x000005fd

000006ec <artist_usart_configure>:

void artist_usart_configure(struct usart_module * usart_instance) {
     6ec:	b570      	push	{r4, r5, r6, lr}
     6ee:	b090      	sub	sp, #64	; 0x40
     6f0:	0004      	movs	r4, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     6f2:	2380      	movs	r3, #128	; 0x80
     6f4:	05db      	lsls	r3, r3, #23
     6f6:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     6f8:	2300      	movs	r3, #0
     6fa:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     6fc:	22ff      	movs	r2, #255	; 0xff
     6fe:	4669      	mov	r1, sp
     700:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     702:	2200      	movs	r2, #0
     704:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     706:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
     708:	2196      	movs	r1, #150	; 0x96
     70a:	0189      	lsls	r1, r1, #6
     70c:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
     70e:	2101      	movs	r1, #1
     710:	2024      	movs	r0, #36	; 0x24
     712:	466d      	mov	r5, sp
     714:	5429      	strb	r1, [r5, r0]
	config->transmitter_enable = true;
     716:	3001      	adds	r0, #1
     718:	5429      	strb	r1, [r5, r0]
	config->clock_polarity_inverted = false;
     71a:	3125      	adds	r1, #37	; 0x25
     71c:	546b      	strb	r3, [r5, r1]
	config->use_external_clock = false;
     71e:	3101      	adds	r1, #1
     720:	546b      	strb	r3, [r5, r1]
	config->ext_clock_freq   = 0;
     722:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     724:	3105      	adds	r1, #5
     726:	546b      	strb	r3, [r5, r1]
	config->generator_source = GCLK_GENERATOR_0;
     728:	3101      	adds	r1, #1
     72a:	546b      	strb	r3, [r5, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     72c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     72e:	822b      	strh	r3, [r5, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     730:	76eb      	strb	r3, [r5, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     732:	762a      	strb	r2, [r5, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     734:	772a      	strb	r2, [r5, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     736:	766a      	strb	r2, [r5, #25]
	config->receive_pulse_length                    = 19;
     738:	2313      	movs	r3, #19
     73a:	76ab      	strb	r3, [r5, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     73c:	776a      	strb	r2, [r5, #29]
	struct usart_config config;
	usart_get_config_defaults(&config);
	config.baudrate = CONF_ARTIST_BAUDRATE;
	config.mux_setting	= EDBG_CDC_SERCOM_MUX_SETTING;
     73e:	2380      	movs	r3, #128	; 0x80
     740:	035b      	lsls	r3, r3, #13
     742:	9303      	str	r3, [sp, #12]
	config.pinmux_pad0	= EDBG_CDC_SERCOM_PINMUX_PAD0;
     744:	4b1e      	ldr	r3, [pc, #120]	; (7c0 <artist_usart_configure+0xd4>)
     746:	930c      	str	r3, [sp, #48]	; 0x30
	config.pinmux_pad1	= EDBG_CDC_SERCOM_PINMUX_PAD1;
     748:	4b1e      	ldr	r3, [pc, #120]	; (7c4 <artist_usart_configure+0xd8>)
     74a:	930d      	str	r3, [sp, #52]	; 0x34
	config.pinmux_pad2	= EDBG_CDC_SERCOM_PINMUX_PAD2;
     74c:	2301      	movs	r3, #1
     74e:	425b      	negs	r3, r3
     750:	930e      	str	r3, [sp, #56]	; 0x38
	config.pinmux_pad3	= EDBG_CDC_SERCOM_PINMUX_PAD3;
     752:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(usart_instance, EDBG_CDC_MODULE, &config) != STATUS_OK);
     754:	4e1c      	ldr	r6, [pc, #112]	; (7c8 <artist_usart_configure+0xdc>)
     756:	4d1d      	ldr	r5, [pc, #116]	; (7cc <artist_usart_configure+0xe0>)
     758:	466a      	mov	r2, sp
     75a:	0031      	movs	r1, r6
     75c:	0020      	movs	r0, r4
     75e:	47a8      	blx	r5
     760:	2800      	cmp	r0, #0
     762:	d1f9      	bne.n	758 <artist_usart_configure+0x6c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     764:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     766:	0028      	movs	r0, r5
     768:	4b19      	ldr	r3, [pc, #100]	; (7d0 <artist_usart_configure+0xe4>)
     76a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     76c:	231f      	movs	r3, #31
     76e:	4018      	ands	r0, r3
     770:	3b1e      	subs	r3, #30
     772:	4083      	lsls	r3, r0
     774:	4a17      	ldr	r2, [pc, #92]	; (7d4 <artist_usart_configure+0xe8>)
     776:	6013      	str	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     778:	6822      	ldr	r2, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     77a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     77c:	2b00      	cmp	r3, #0
     77e:	d1fc      	bne.n	77a <artist_usart_configure+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     780:	682a      	ldr	r2, [r5, #0]
     782:	3302      	adds	r3, #2
     784:	4313      	orrs	r3, r2
     786:	602b      	str	r3, [r5, #0]
	
	usart_enable(usart_instance);
	configure_usart_callbacks(usart_instance);
     788:	0020      	movs	r0, r4
     78a:	4b13      	ldr	r3, [pc, #76]	; (7d8 <artist_usart_configure+0xec>)
     78c:	4798      	blx	r3
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     78e:	4b13      	ldr	r3, [pc, #76]	; (7dc <artist_usart_configure+0xf0>)
     790:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     792:	4a13      	ldr	r2, [pc, #76]	; (7e0 <artist_usart_configure+0xf4>)
     794:	4b13      	ldr	r3, [pc, #76]	; (7e4 <artist_usart_configure+0xf8>)
     796:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     798:	4a13      	ldr	r2, [pc, #76]	; (7e8 <artist_usart_configure+0xfc>)
     79a:	4b14      	ldr	r3, [pc, #80]	; (7ec <artist_usart_configure+0x100>)
     79c:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
     79e:	466a      	mov	r2, sp
     7a0:	4909      	ldr	r1, [pc, #36]	; (7c8 <artist_usart_configure+0xdc>)
     7a2:	0020      	movs	r0, r4
     7a4:	4b09      	ldr	r3, [pc, #36]	; (7cc <artist_usart_configure+0xe0>)
     7a6:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     7a8:	4d11      	ldr	r5, [pc, #68]	; (7f0 <artist_usart_configure+0x104>)
     7aa:	682b      	ldr	r3, [r5, #0]
     7ac:	6898      	ldr	r0, [r3, #8]
     7ae:	2100      	movs	r1, #0
     7b0:	4c10      	ldr	r4, [pc, #64]	; (7f4 <artist_usart_configure+0x108>)
     7b2:	47a0      	blx	r4
	setbuf(stdin, NULL);
     7b4:	682b      	ldr	r3, [r5, #0]
     7b6:	6858      	ldr	r0, [r3, #4]
     7b8:	2100      	movs	r1, #0
     7ba:	47a0      	blx	r4
	
	stdio_serial_init(usart_instance, EDBG_CDC_MODULE, &config);
}
     7bc:	b010      	add	sp, #64	; 0x40
     7be:	bd70      	pop	{r4, r5, r6, pc}
     7c0:	00040003 	.word	0x00040003
     7c4:	00050003 	.word	0x00050003
     7c8:	42000800 	.word	0x42000800
     7cc:	00000f25 	.word	0x00000f25
     7d0:	00001555 	.word	0x00001555
     7d4:	e000e100 	.word	0xe000e100
     7d8:	000006c1 	.word	0x000006c1
     7dc:	200000dc 	.word	0x200000dc
     7e0:	000006a9 	.word	0x000006a9
     7e4:	200000d8 	.word	0x200000d8
     7e8:	0000067d 	.word	0x0000067d
     7ec:	200000d4 	.word	0x200000d4
     7f0:	2000006c 	.word	0x2000006c
     7f4:	00002155 	.word	0x00002155

000007f8 <artist_motor_pwm_configure>:


void artist_motor_pwm_configure(struct Artist_Back * const artist){
     7f8:	b570      	push	{r4, r5, r6, lr}
     7fa:	b0aa      	sub	sp, #168	; 0xa8
     7fc:	0005      	movs	r5, r0
	
	struct tcc_config config; 
	tcc_get_config_defaults(&config, TCC0);
     7fe:	4e27      	ldr	r6, [pc, #156]	; (89c <artist_motor_pwm_configure+0xa4>)
     800:	ac01      	add	r4, sp, #4
     802:	0031      	movs	r1, r6
     804:	0020      	movs	r0, r4
     806:	4b26      	ldr	r3, [pc, #152]	; (8a0 <artist_motor_pwm_configure+0xa8>)
     808:	4798      	blx	r3

	config.counter.clock_source											= GCLK_GENERATOR_0;
     80a:	2300      	movs	r3, #0
     80c:	72a3      	strb	r3, [r4, #10]
	config.counter.period												= 0xFFFF; //CLOCK 's period. when up is occur. it's about 65535
     80e:	4b25      	ldr	r3, [pc, #148]	; (8a4 <artist_motor_pwm_configure+0xac>)
     810:	6063      	str	r3, [r4, #4]
	config.counter.clock_prescaler										= 1; // this time we do not divide
     812:	2201      	movs	r2, #1
     814:	72e2      	strb	r2, [r4, #11]
	config.compare.wave_generation										= TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM; // compare
     816:	2302      	movs	r3, #2
     818:	7623      	strb	r3, [r4, #24]
	
	
	config.compare.match[artist->motor_left_side.pwm_channel]				= artist->motor_left_side.pwm_val;
     81a:	3376      	adds	r3, #118	; 0x76
     81c:	5ceb      	ldrb	r3, [r5, r3]
     81e:	3306      	adds	r3, #6
     820:	009b      	lsls	r3, r3, #2
     822:	18e3      	adds	r3, r4, r3
     824:	2176      	movs	r1, #118	; 0x76
     826:	5a69      	ldrh	r1, [r5, r1]
     828:	6059      	str	r1, [r3, #4]
	config.pins.enable_wave_out_pin[artist->motor_left_side.pwm_output]	= true;
     82a:	2379      	movs	r3, #121	; 0x79
     82c:	5ceb      	ldrb	r3, [r5, r3]
     82e:	18e1      	adds	r1, r4, r3
     830:	3198      	adds	r1, #152	; 0x98
     832:	700a      	strb	r2, [r1, #0]
	config.pins.wave_out_pin[artist->motor_left_side.pwm_output]			= artist->motor_left_side.pwm_pin_num;
     834:	0019      	movs	r1, r3
     836:	3116      	adds	r1, #22
     838:	0089      	lsls	r1, r1, #2
     83a:	2074      	movs	r0, #116	; 0x74
     83c:	5c28      	ldrb	r0, [r5, r0]
     83e:	5108      	str	r0, [r1, r4]
	config.pins.wave_out_pin_mux[artist->motor_left_side.pwm_output]		= artist->motor_left_side.pwm_mux_num; 
     840:	331e      	adds	r3, #30
     842:	009b      	lsls	r3, r3, #2
     844:	2175      	movs	r1, #117	; 0x75
     846:	5c69      	ldrb	r1, [r5, r1]
     848:	5119      	str	r1, [r3, r4]
	
	config.compare.match[artist->motor_right_side.pwm_channel]				= artist->motor_right_side.pwm_val;
     84a:	237e      	movs	r3, #126	; 0x7e
     84c:	5ceb      	ldrb	r3, [r5, r3]
     84e:	3306      	adds	r3, #6
     850:	009b      	lsls	r3, r3, #2
     852:	18e3      	adds	r3, r4, r3
     854:	217c      	movs	r1, #124	; 0x7c
     856:	5a69      	ldrh	r1, [r5, r1]
     858:	6059      	str	r1, [r3, #4]
	config.pins.enable_wave_out_pin[artist->motor_right_side.pwm_output]		= true;
     85a:	237f      	movs	r3, #127	; 0x7f
     85c:	5ceb      	ldrb	r3, [r5, r3]
     85e:	18e1      	adds	r1, r4, r3
     860:	3198      	adds	r1, #152	; 0x98
     862:	700a      	strb	r2, [r1, #0]
	config.pins.wave_out_pin[artist->motor_right_side.pwm_output]			= artist->motor_right_side.pwm_pin_num;
     864:	001a      	movs	r2, r3
     866:	3216      	adds	r2, #22
     868:	0092      	lsls	r2, r2, #2
     86a:	217a      	movs	r1, #122	; 0x7a
     86c:	5c69      	ldrb	r1, [r5, r1]
     86e:	5111      	str	r1, [r2, r4]
	config.pins.wave_out_pin_mux[artist->motor_right_side.pwm_output]		= artist->motor_right_side.pwm_mux_num; 
     870:	331e      	adds	r3, #30
     872:	009b      	lsls	r3, r3, #2
     874:	227b      	movs	r2, #123	; 0x7b
     876:	5caa      	ldrb	r2, [r5, r2]
     878:	511a      	str	r2, [r3, r4]

	tcc_init(&(artist->tcc_instance), TCC0, &config);
     87a:	0022      	movs	r2, r4
     87c:	0031      	movs	r1, r6
     87e:	0028      	movs	r0, r5
     880:	4b09      	ldr	r3, [pc, #36]	; (8a8 <artist_motor_pwm_configure+0xb0>)
     882:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     884:	682a      	ldr	r2, [r5, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     886:	2102      	movs	r1, #2
     888:	6893      	ldr	r3, [r2, #8]
     88a:	4219      	tst	r1, r3
     88c:	d1fc      	bne.n	888 <artist_motor_pwm_configure+0x90>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     88e:	6811      	ldr	r1, [r2, #0]
     890:	2302      	movs	r3, #2
     892:	430b      	orrs	r3, r1
     894:	6013      	str	r3, [r2, #0]
	tcc_enable(&(artist->tcc_instance));
     896:	b02a      	add	sp, #168	; 0xa8
     898:	bd70      	pop	{r4, r5, r6, pc}
     89a:	46c0      	nop			; (mov r8, r8)
     89c:	42002000 	.word	0x42002000
     8a0:	00000951 	.word	0x00000951
     8a4:	0000ffff 	.word	0x0000ffff
     8a8:	00000a9d 	.word	0x00000a9d

000008ac <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
     8ac:	4b08      	ldr	r3, [pc, #32]	; (8d0 <_tcc_get_inst_index+0x24>)
     8ae:	4298      	cmp	r0, r3
     8b0:	d00a      	beq.n	8c8 <_tcc_get_inst_index+0x1c>
     8b2:	4b08      	ldr	r3, [pc, #32]	; (8d4 <_tcc_get_inst_index+0x28>)
     8b4:	4298      	cmp	r0, r3
     8b6:	d005      	beq.n	8c4 <_tcc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     8b8:	2300      	movs	r3, #0
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
     8ba:	4a07      	ldr	r2, [pc, #28]	; (8d8 <_tcc_get_inst_index+0x2c>)
     8bc:	4290      	cmp	r0, r2
     8be:	d105      	bne.n	8cc <_tcc_get_inst_index+0x20>
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
     8c0:	3302      	adds	r3, #2
     8c2:	e002      	b.n	8ca <_tcc_get_inst_index+0x1e>
     8c4:	2301      	movs	r3, #1
     8c6:	e000      	b.n	8ca <_tcc_get_inst_index+0x1e>
     8c8:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
			return i;
     8ca:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     8cc:	0018      	movs	r0, r3
     8ce:	4770      	bx	lr
     8d0:	42002000 	.word	0x42002000
     8d4:	42002400 	.word	0x42002400
     8d8:	42002800 	.word	0x42002800

000008dc <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
     8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8de:	000f      	movs	r7, r1
     8e0:	0015      	movs	r5, r2
     8e2:	001e      	movs	r6, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     8e4:	6804      	ldr	r4, [r0, #0]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
     8e6:	0020      	movs	r0, r4
     8e8:	4b16      	ldr	r3, [pc, #88]	; (944 <_tcc_set_compare_value+0x68>)
     8ea:	4798      	blx	r3

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
     8ec:	4b16      	ldr	r3, [pc, #88]	; (948 <_tcc_set_compare_value+0x6c>)
     8ee:	5c1a      	ldrb	r2, [r3, r0]
		return STATUS_ERR_INVALID_ARG;
     8f0:	2317      	movs	r3, #23
	Tcc *const tcc_module = module_inst->hw;
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
     8f2:	42ba      	cmp	r2, r7
     8f4:	d923      	bls.n	93e <_tcc_set_compare_value+0x62>
		return STATUS_ERR_INVALID_ARG;
	}

	uint32_t max_count = _tcc_maxs[module_index];
     8f6:	0080      	lsls	r0, r0, #2

	/* Check compare value */
	if (compare > max_count) {
     8f8:	4b14      	ldr	r3, [pc, #80]	; (94c <_tcc_set_compare_value+0x70>)
     8fa:	58c2      	ldr	r2, [r0, r3]
		return STATUS_ERR_INVALID_ARG;
     8fc:	2317      	movs	r3, #23
	}

	uint32_t max_count = _tcc_maxs[module_index];

	/* Check compare value */
	if (compare > max_count) {
     8fe:	42aa      	cmp	r2, r5
     900:	d31d      	bcc.n	93e <_tcc_set_compare_value+0x62>
		return STATUS_ERR_INVALID_ARG;
	}

	if (double_buffering_enabled) {
     902:	2e00      	cmp	r6, #0
     904:	d010      	beq.n	928 <_tcc_set_compare_value+0x4c>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22) || (SAMR30)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->STATUS.reg  &
     906:	2280      	movs	r2, #128	; 0x80
     908:	0252      	lsls	r2, r2, #9
     90a:	40ba      	lsls	r2, r7
     90c:	6b23      	ldr	r3, [r4, #48]	; 0x30
     90e:	421a      	tst	r2, r3
     910:	d1fc      	bne.n	90c <_tcc_set_compare_value+0x30>
				(TCC_STATUS_CCBV0 << channel_index)) {
			/* Valid check */
		}
		while(tcc_module->SYNCBUSY.reg  &
     912:	2280      	movs	r2, #128	; 0x80
     914:	0312      	lsls	r2, r2, #12
     916:	40ba      	lsls	r2, r7
     918:	68a3      	ldr	r3, [r4, #8]
     91a:	421a      	tst	r2, r3
     91c:	d1fc      	bne.n	918 <_tcc_set_compare_value+0x3c>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
     91e:	371c      	adds	r7, #28
     920:	00bf      	lsls	r7, r7, #2
     922:	513d      	str	r5, [r7, r4]
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
     924:	2300      	movs	r3, #0
     926:	e00a      	b.n	93e <_tcc_set_compare_value+0x62>
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
#endif
	} else {
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
     928:	2280      	movs	r2, #128	; 0x80
     92a:	0052      	lsls	r2, r2, #1
     92c:	40ba      	lsls	r2, r7
     92e:	68a3      	ldr	r3, [r4, #8]
     930:	421a      	tst	r2, r3
     932:	d1fc      	bne.n	92e <_tcc_set_compare_value+0x52>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
     934:	3710      	adds	r7, #16
     936:	00bf      	lsls	r7, r7, #2
     938:	19e4      	adds	r4, r4, r7
     93a:	6065      	str	r5, [r4, #4]
	}
	return STATUS_OK;
     93c:	2300      	movs	r3, #0
}
     93e:	0018      	movs	r0, r3
     940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     942:	46c0      	nop			; (mov r8, r8)
     944:	000008ad 	.word	0x000008ad
     948:	00002b5c 	.word	0x00002b5c
     94c:	00002b50 	.word	0x00002b50

00000950 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
     950:	b510      	push	{r4, lr}
     952:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     954:	0008      	movs	r0, r1
     956:	4b4f      	ldr	r3, [pc, #316]	; (a94 <tcc_get_config_defaults+0x144>)
     958:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
     95a:	2300      	movs	r3, #0
     95c:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
     95e:	0080      	lsls	r0, r0, #2
     960:	4a4d      	ldr	r2, [pc, #308]	; (a98 <tcc_get_config_defaults+0x148>)
     962:	5882      	ldr	r2, [r0, r2]
     964:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
     966:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
     968:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
     96a:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     96c:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
     96e:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     970:	61e3      	str	r3, [r4, #28]
     972:	6223      	str	r3, [r4, #32]
     974:	6263      	str	r3, [r4, #36]	; 0x24
     976:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     978:	7523      	strb	r3, [r4, #20]
     97a:	7563      	strb	r3, [r4, #21]
     97c:	75a3      	strb	r3, [r4, #22]
     97e:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     980:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     982:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     984:	7423      	strb	r3, [r4, #16]
     986:	7463      	strb	r3, [r4, #17]
     988:	74a3      	strb	r3, [r4, #18]
     98a:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     98c:	222c      	movs	r2, #44	; 0x2c
     98e:	54a3      	strb	r3, [r4, r2]
     990:	3201      	adds	r2, #1
     992:	54a3      	strb	r3, [r4, r2]
     994:	3201      	adds	r2, #1
     996:	54a3      	strb	r3, [r4, r2]
     998:	3201      	adds	r2, #1
     99a:	54a3      	strb	r3, [r4, r2]
     99c:	3201      	adds	r2, #1
     99e:	54a3      	strb	r3, [r4, r2]
     9a0:	3201      	adds	r2, #1
     9a2:	54a3      	strb	r3, [r4, r2]
     9a4:	3201      	adds	r2, #1
     9a6:	54a3      	strb	r3, [r4, r2]
     9a8:	3201      	adds	r2, #1
     9aa:	54a3      	strb	r3, [r4, r2]
     9ac:	3201      	adds	r2, #1
     9ae:	54a3      	strb	r3, [r4, r2]
     9b0:	3201      	adds	r2, #1
     9b2:	54a3      	strb	r3, [r4, r2]
     9b4:	3201      	adds	r2, #1
     9b6:	54a3      	strb	r3, [r4, r2]
     9b8:	3201      	adds	r2, #1
     9ba:	54a3      	strb	r3, [r4, r2]
     9bc:	3201      	adds	r2, #1
     9be:	54a3      	strb	r3, [r4, r2]
     9c0:	3201      	adds	r2, #1
     9c2:	54a3      	strb	r3, [r4, r2]
     9c4:	3201      	adds	r2, #1
     9c6:	54a3      	strb	r3, [r4, r2]
     9c8:	3201      	adds	r2, #1
     9ca:	54a3      	strb	r3, [r4, r2]
     9cc:	3201      	adds	r2, #1
     9ce:	54a3      	strb	r3, [r4, r2]
     9d0:	3201      	adds	r2, #1
     9d2:	54a3      	strb	r3, [r4, r2]
     9d4:	3201      	adds	r2, #1
     9d6:	54a3      	strb	r3, [r4, r2]
     9d8:	3201      	adds	r2, #1
     9da:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     9dc:	3201      	adds	r2, #1
     9de:	54a3      	strb	r3, [r4, r2]
     9e0:	3201      	adds	r2, #1
     9e2:	54a3      	strb	r3, [r4, r2]
     9e4:	3201      	adds	r2, #1
     9e6:	54a3      	strb	r3, [r4, r2]
     9e8:	3201      	adds	r2, #1
     9ea:	54a3      	strb	r3, [r4, r2]
     9ec:	3201      	adds	r2, #1
     9ee:	54a3      	strb	r3, [r4, r2]
     9f0:	3201      	adds	r2, #1
     9f2:	54a3      	strb	r3, [r4, r2]
     9f4:	3201      	adds	r2, #1
     9f6:	54a3      	strb	r3, [r4, r2]
     9f8:	3201      	adds	r2, #1
     9fa:	54a3      	strb	r3, [r4, r2]
     9fc:	3201      	adds	r2, #1
     9fe:	54a3      	strb	r3, [r4, r2]
     a00:	3201      	adds	r2, #1
     a02:	54a3      	strb	r3, [r4, r2]
     a04:	3201      	adds	r2, #1
     a06:	54a3      	strb	r3, [r4, r2]
     a08:	3201      	adds	r2, #1
     a0a:	54a3      	strb	r3, [r4, r2]
     a0c:	3201      	adds	r2, #1
     a0e:	54a3      	strb	r3, [r4, r2]
     a10:	3201      	adds	r2, #1
     a12:	54a3      	strb	r3, [r4, r2]
     a14:	3201      	adds	r2, #1
     a16:	54a3      	strb	r3, [r4, r2]
     a18:	3201      	adds	r2, #1
     a1a:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     a1c:	3201      	adds	r2, #1
     a1e:	54a3      	strb	r3, [r4, r2]
     a20:	3201      	adds	r2, #1
     a22:	54a3      	strb	r3, [r4, r2]
     a24:	3201      	adds	r2, #1
     a26:	54a3      	strb	r3, [r4, r2]
     a28:	3201      	adds	r2, #1
     a2a:	54a3      	strb	r3, [r4, r2]
     a2c:	3201      	adds	r2, #1
     a2e:	54a3      	strb	r3, [r4, r2]
     a30:	3201      	adds	r2, #1
     a32:	54a3      	strb	r3, [r4, r2]
     a34:	3201      	adds	r2, #1
     a36:	54a3      	strb	r3, [r4, r2]
     a38:	3201      	adds	r2, #1
     a3a:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     a3c:	3241      	adds	r2, #65	; 0x41
     a3e:	54a3      	strb	r3, [r4, r2]
     a40:	65a3      	str	r3, [r4, #88]	; 0x58
     a42:	67a3      	str	r3, [r4, #120]	; 0x78
     a44:	3201      	adds	r2, #1
     a46:	54a3      	strb	r3, [r4, r2]
     a48:	65e3      	str	r3, [r4, #92]	; 0x5c
     a4a:	67e3      	str	r3, [r4, #124]	; 0x7c
     a4c:	3201      	adds	r2, #1
     a4e:	54a3      	strb	r3, [r4, r2]
     a50:	6623      	str	r3, [r4, #96]	; 0x60
     a52:	3a1a      	subs	r2, #26
     a54:	50a3      	str	r3, [r4, r2]
     a56:	321b      	adds	r2, #27
     a58:	54a3      	strb	r3, [r4, r2]
     a5a:	6663      	str	r3, [r4, #100]	; 0x64
     a5c:	3a17      	subs	r2, #23
     a5e:	50a3      	str	r3, [r4, r2]
     a60:	3218      	adds	r2, #24
     a62:	54a3      	strb	r3, [r4, r2]
     a64:	66a3      	str	r3, [r4, #104]	; 0x68
     a66:	3a14      	subs	r2, #20
     a68:	50a3      	str	r3, [r4, r2]
     a6a:	3215      	adds	r2, #21
     a6c:	54a3      	strb	r3, [r4, r2]
     a6e:	66e3      	str	r3, [r4, #108]	; 0x6c
     a70:	3a11      	subs	r2, #17
     a72:	50a3      	str	r3, [r4, r2]
     a74:	3212      	adds	r2, #18
     a76:	54a3      	strb	r3, [r4, r2]
     a78:	6723      	str	r3, [r4, #112]	; 0x70
     a7a:	3a0e      	subs	r2, #14
     a7c:	50a3      	str	r3, [r4, r2]
     a7e:	320f      	adds	r2, #15
     a80:	54a3      	strb	r3, [r4, r2]
     a82:	6763      	str	r3, [r4, #116]	; 0x74
     a84:	3a0b      	subs	r2, #11
     a86:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
     a88:	2101      	movs	r1, #1
     a8a:	320c      	adds	r2, #12
     a8c:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
     a8e:	3201      	adds	r2, #1
     a90:	54a3      	strb	r3, [r4, r2]
}
     a92:	bd10      	pop	{r4, pc}
     a94:	000008ad 	.word	0x000008ad
     a98:	00002b50 	.word	0x00002b50

00000a9c <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
     a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a9e:	465f      	mov	r7, fp
     aa0:	4656      	mov	r6, sl
     aa2:	464d      	mov	r5, r9
     aa4:	4644      	mov	r4, r8
     aa6:	b4f0      	push	{r4, r5, r6, r7}
     aa8:	b08f      	sub	sp, #60	; 0x3c
     aaa:	9001      	str	r0, [sp, #4]
     aac:	000c      	movs	r4, r1
     aae:	0016      	movs	r6, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     ab0:	0008      	movs	r0, r1
     ab2:	4b83      	ldr	r3, [pc, #524]	; (cc0 <tcc_init+0x224>)
     ab4:	4798      	blx	r3
     ab6:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     ab8:	0001      	movs	r1, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     aba:	4882      	ldr	r0, [pc, #520]	; (cc4 <tcc_init+0x228>)
     abc:	6a07      	ldr	r7, [r0, #32]
     abe:	009d      	lsls	r5, r3, #2
     ac0:	4a81      	ldr	r2, [pc, #516]	; (cc8 <tcc_init+0x22c>)
     ac2:	58aa      	ldr	r2, [r5, r2]
     ac4:	433a      	orrs	r2, r7
     ac6:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     ac8:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     aca:	201c      	movs	r0, #28
	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     acc:	0792      	lsls	r2, r2, #30
     ace:	d500      	bpl.n	ad2 <tcc_init+0x36>
     ad0:	e1c5      	b.n	e5e <tcc_init+0x3c2>
		return STATUS_ERR_DENIED;
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     ad2:	6822      	ldr	r2, [r4, #0]
     ad4:	381b      	subs	r0, #27
     ad6:	4002      	ands	r2, r0
		return STATUS_ERR_DENIED;
     ad8:	301b      	adds	r0, #27
	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     ada:	2a00      	cmp	r2, #0
     adc:	d000      	beq.n	ae0 <tcc_init+0x44>
     ade:	e1be      	b.n	e5e <tcc_init+0x3c2>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
     ae0:	4f7a      	ldr	r7, [pc, #488]	; (ccc <tcc_init+0x230>)
     ae2:	59ef      	ldr	r7, [r5, r7]

	/* Check all counter values */
	if ((config->counter.count > count_max)
		|| (config->counter.period > count_max)
		) {
		return STATUS_ERR_INVALID_ARG;
     ae4:	2017      	movs	r0, #23

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];

	/* Check all counter values */
	if ((config->counter.count > count_max)
     ae6:	6835      	ldr	r5, [r6, #0]
     ae8:	42af      	cmp	r7, r5
     aea:	d200      	bcs.n	aee <tcc_init+0x52>
     aec:	e1b7      	b.n	e5e <tcc_init+0x3c2>
		|| (config->counter.period > count_max)
     aee:	6875      	ldr	r5, [r6, #4]
     af0:	42af      	cmp	r7, r5
     af2:	d200      	bcs.n	af6 <tcc_init+0x5a>
     af4:	e1b3      	b.n	e5e <tcc_init+0x3c2>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if ((config->compare.match[i] > count_max)
     af6:	69f0      	ldr	r0, [r6, #28]
     af8:	4287      	cmp	r7, r0
     afa:	d200      	bcs.n	afe <tcc_init+0x62>
     afc:	e19a      	b.n	e34 <tcc_init+0x398>
     afe:	6a30      	ldr	r0, [r6, #32]
     b00:	4287      	cmp	r7, r0
     b02:	d200      	bcs.n	b06 <tcc_init+0x6a>
     b04:	e198      	b.n	e38 <tcc_init+0x39c>
     b06:	6a70      	ldr	r0, [r6, #36]	; 0x24
     b08:	4287      	cmp	r7, r0
     b0a:	d200      	bcs.n	b0e <tcc_init+0x72>
     b0c:	e196      	b.n	e3c <tcc_init+0x3a0>
     b0e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
     b10:	4287      	cmp	r7, r0
     b12:	d200      	bcs.n	b16 <tcc_init+0x7a>
     b14:	e194      	b.n	e40 <tcc_init+0x3a4>
     b16:	2098      	movs	r0, #152	; 0x98
     b18:	4684      	mov	ip, r0
     b1a:	44b4      	add	ip, r6
     b1c:	4660      	mov	r0, ip
     b1e:	9006      	str	r0, [sp, #24]
     b20:	2700      	movs	r7, #0
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
     b22:	7805      	ldrb	r5, [r0, #0]
     b24:	2d00      	cmp	r5, #0
     b26:	d004      	beq.n	b32 <tcc_init+0x96>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
     b28:	4d69      	ldr	r5, [pc, #420]	; (cd0 <tcc_init+0x234>)
     b2a:	5c6d      	ldrb	r5, [r5, r1]
     b2c:	42bd      	cmp	r5, r7
     b2e:	dc00      	bgt.n	b32 <tcc_init+0x96>
     b30:	e188      	b.n	e44 <tcc_init+0x3a8>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     b32:	3701      	adds	r7, #1
     b34:	3001      	adds	r0, #1
     b36:	2f08      	cmp	r7, #8
     b38:	d1f3      	bne.n	b22 <tcc_init+0x86>
     b3a:	2000      	movs	r0, #0
     b3c:	9002      	str	r0, [sp, #8]

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     b3e:	2580      	movs	r5, #128	; 0x80
     b40:	046d      	lsls	r5, r5, #17
     b42:	46ac      	mov	ip, r5
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if (config->capture.channel_function[i] ==
     b44:	1835      	adds	r5, r6, r0
     b46:	7c2d      	ldrb	r5, [r5, #16]
     b48:	2d01      	cmp	r5, #1
     b4a:	d109      	bne.n	b60 <tcc_init+0xc4>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
     b4c:	4d61      	ldr	r5, [pc, #388]	; (cd4 <tcc_init+0x238>)
     b4e:	5c6d      	ldrb	r5, [r5, r1]
     b50:	4285      	cmp	r5, r0
     b52:	da00      	bge.n	b56 <tcc_init+0xba>
     b54:	e178      	b.n	e48 <tcc_init+0x3ac>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     b56:	4665      	mov	r5, ip
     b58:	4085      	lsls	r5, r0
     b5a:	9f02      	ldr	r7, [sp, #8]
     b5c:	432f      	orrs	r7, r5
     b5e:	9702      	str	r7, [sp, #8]
		uint32_t *value_buffer)
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     b60:	3001      	adds	r0, #1
     b62:	2804      	cmp	r0, #4
     b64:	d1ee      	bne.n	b44 <tcc_init+0xa8>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
		}
	}

	if (config->run_in_standby) {
     b66:	21a1      	movs	r1, #161	; 0xa1
     b68:	5c71      	ldrb	r1, [r6, r1]
     b6a:	2900      	cmp	r1, #0
     b6c:	d004      	beq.n	b78 <tcc_init+0xdc>
		ctrla |= TCC_CTRLA_RUNSTDBY;
     b6e:	2180      	movs	r1, #128	; 0x80
     b70:	0109      	lsls	r1, r1, #4
     b72:	9802      	ldr	r0, [sp, #8]
     b74:	4308      	orrs	r0, r1
     b76:	9002      	str	r0, [sp, #8]
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
	uint8_t ctrlb = 0;

	if (config->counter.oneshot) {
     b78:	7a31      	ldrb	r1, [r6, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
     b7a:	1e48      	subs	r0, r1, #1
     b7c:	4181      	sbcs	r1, r0
     b7e:	0089      	lsls	r1, r1, #2
     b80:	9105      	str	r1, [sp, #20]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
     b82:	7a71      	ldrb	r1, [r6, #9]
     b84:	2901      	cmp	r1, #1
     b86:	d102      	bne.n	b8e <tcc_init+0xf2>
		ctrlb |= TCC_CTRLBSET_DIR;
     b88:	9805      	ldr	r0, [sp, #20]
     b8a:	4308      	orrs	r0, r1
     b8c:	9005      	str	r0, [sp, #20]
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
     b8e:	4951      	ldr	r1, [pc, #324]	; (cd4 <tcc_init+0x238>)
     b90:	5cc9      	ldrb	r1, [r1, r3]
     b92:	0008      	movs	r0, r1
     b94:	9104      	str	r1, [sp, #16]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
		cfg = (struct tcc_recoverable_fault_config *)
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
     b96:	2135      	movs	r1, #53	; 0x35
     b98:	5c77      	ldrb	r7, [r6, r1]
     b9a:	4287      	cmp	r7, r0
     b9c:	d300      	bcc.n	ba0 <tcc_init+0x104>
     b9e:	e15d      	b.n	e5c <tcc_init+0x3c0>
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
     ba0:	212c      	movs	r1, #44	; 0x2c
     ba2:	5c71      	ldrb	r1, [r6, r1]
     ba4:	290f      	cmp	r1, #15
     ba6:	d900      	bls.n	baa <tcc_init+0x10e>
     ba8:	e158      	b.n	e5c <tcc_init+0x3c0>
	}

	if (config->run_in_standby) {
		ctrla |= TCC_CTRLA_RUNSTDBY;
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     baa:	7b30      	ldrb	r0, [r6, #12]
     bac:	9008      	str	r0, [sp, #32]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     bae:	7af0      	ldrb	r0, [r6, #11]
     bb0:	9009      	str	r0, [sp, #36]	; 0x24
     bb2:	0030      	movs	r0, r6
     bb4:	302d      	adds	r0, #45	; 0x2d
     bb6:	2500      	movs	r5, #0
     bb8:	4690      	mov	r8, r2
     bba:	46a1      	mov	r9, r4
     bbc:	002c      	movs	r4, r5
     bbe:	46b3      	mov	fp, r6
     bc0:	0006      	movs	r6, r0
     bc2:	9307      	str	r3, [sp, #28]
     bc4:	e00a      	b.n	bdc <tcc_init+0x140>
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
		cfg = (struct tcc_recoverable_fault_config *)
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
     bc6:	7c9f      	ldrb	r7, [r3, #18]
     bc8:	9a04      	ldr	r2, [sp, #16]
     bca:	42ba      	cmp	r2, r7
     bcc:	d800      	bhi.n	bd0 <tcc_init+0x134>
     bce:	e145      	b.n	e5c <tcc_init+0x3c0>
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
     bd0:	7a59      	ldrb	r1, [r3, #9]
     bd2:	360a      	adds	r6, #10
     bd4:	3404      	adds	r4, #4
     bd6:	290f      	cmp	r1, #15
     bd8:	d900      	bls.n	bdc <tcc_init+0x140>
     bda:	e13f      	b.n	e5c <tcc_init+0x3c0>
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     bdc:	0609      	lsls	r1, r1, #24
     bde:	23f0      	movs	r3, #240	; 0xf0
     be0:	051b      	lsls	r3, r3, #20
     be2:	4019      	ands	r1, r3
     be4:	0033      	movs	r3, r6
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     be6:	7835      	ldrb	r5, [r6, #0]
     be8:	042d      	lsls	r5, r5, #16
     bea:	22ff      	movs	r2, #255	; 0xff
     bec:	0412      	lsls	r2, r2, #16
     bee:	4015      	ands	r5, r2
     bf0:	46aa      	mov	sl, r5
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     bf2:	7872      	ldrb	r2, [r6, #1]
     bf4:	2080      	movs	r0, #128	; 0x80
     bf6:	9003      	str	r0, [sp, #12]
     bf8:	2a00      	cmp	r2, #0
     bfa:	d101      	bne.n	c00 <tcc_init+0x164>
     bfc:	4642      	mov	r2, r8
     bfe:	9203      	str	r2, [sp, #12]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     c00:	789a      	ldrb	r2, [r3, #2]
     c02:	2008      	movs	r0, #8
     c04:	2a00      	cmp	r2, #0
     c06:	d100      	bne.n	c0a <tcc_init+0x16e>
     c08:	4640      	mov	r0, r8
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     c0a:	78da      	ldrb	r2, [r3, #3]
     c0c:	4694      	mov	ip, r2
     c0e:	2210      	movs	r2, #16
     c10:	4665      	mov	r5, ip
     c12:	2d00      	cmp	r5, #0
     c14:	d100      	bne.n	c18 <tcc_init+0x17c>
     c16:	4642      	mov	r2, r8
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
     c18:	02bf      	lsls	r7, r7, #10
     c1a:	25c0      	movs	r5, #192	; 0xc0
     c1c:	012d      	lsls	r5, r5, #4
     c1e:	402f      	ands	r7, r5
     c20:	4339      	orrs	r1, r7
     c22:	791f      	ldrb	r7, [r3, #4]
     c24:	2503      	movs	r5, #3
     c26:	402f      	ands	r7, r5
     c28:	4339      	orrs	r1, r7
     c2a:	4655      	mov	r5, sl
     c2c:	430d      	orrs	r5, r1
     c2e:	795f      	ldrb	r7, [r3, #5]
     c30:	017f      	lsls	r7, r7, #5
     c32:	2160      	movs	r1, #96	; 0x60
     c34:	400f      	ands	r7, r1
     c36:	433d      	orrs	r5, r7
     c38:	7999      	ldrb	r1, [r3, #6]
     c3a:	0209      	lsls	r1, r1, #8
     c3c:	27c0      	movs	r7, #192	; 0xc0
     c3e:	00bf      	lsls	r7, r7, #2
     c40:	4039      	ands	r1, r7
     c42:	430d      	orrs	r5, r1
     c44:	79d9      	ldrb	r1, [r3, #7]
     c46:	0309      	lsls	r1, r1, #12
     c48:	27e0      	movs	r7, #224	; 0xe0
     c4a:	01ff      	lsls	r7, r7, #7
     c4c:	4039      	ands	r1, r7
     c4e:	430d      	orrs	r5, r1
     c50:	9903      	ldr	r1, [sp, #12]
     c52:	430d      	orrs	r5, r1
     c54:	4328      	orrs	r0, r5
     c56:	4302      	orrs	r2, r0
     c58:	a90c      	add	r1, sp, #48	; 0x30
     c5a:	5062      	str	r2, [r4, r1]
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     c5c:	2c04      	cmp	r4, #4
     c5e:	d1b2      	bne.n	bc6 <tcc_init+0x12a>
     c60:	464c      	mov	r4, r9
     c62:	465e      	mov	r6, fp
     c64:	9b07      	ldr	r3, [sp, #28]
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
     c66:	4a1a      	ldr	r2, [pc, #104]	; (cd0 <tcc_init+0x234>)
     c68:	5cd2      	ldrb	r2, [r2, r3]
     c6a:	4691      	mov	r9, r2
     c6c:	4659      	mov	r1, fp
     c6e:	3150      	adds	r1, #80	; 0x50
     c70:	4658      	mov	r0, fp
     c72:	3041      	adds	r0, #65	; 0x41
	uint32_t drvctrl;

	drvctrl = 0;
     c74:	2700      	movs	r7, #0

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     c76:	2200      	movs	r2, #0
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     c78:	2501      	movs	r5, #1
     c7a:	46aa      	mov	sl, r5
			if (i >= ow_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     c7c:	2502      	movs	r5, #2
     c7e:	35ff      	adds	r5, #255	; 0xff
     c80:	46ab      	mov	fp, r5
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
			if (i >= ow_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     c82:	2580      	movs	r5, #128	; 0x80
     c84:	026d      	lsls	r5, r5, #9
     c86:	46a8      	mov	r8, r5
     c88:	46a4      	mov	ip, r4
     c8a:	001c      	movs	r4, r3
     c8c:	464b      	mov	r3, r9
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
     c8e:	780d      	ldrb	r5, [r1, #0]
     c90:	2d00      	cmp	r5, #0
     c92:	d009      	beq.n	ca8 <tcc_init+0x20c>
			if (i >= ow_num) {
     c94:	4293      	cmp	r3, r2
     c96:	d800      	bhi.n	c9a <tcc_init+0x1fe>
     c98:	e0d8      	b.n	e4c <tcc_init+0x3b0>
				return STATUS_ERR_INVALID_ARG;
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     c9a:	4645      	mov	r5, r8
     c9c:	4095      	lsls	r5, r2
     c9e:	432f      	orrs	r7, r5
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
     ca0:	7805      	ldrb	r5, [r0, #0]
     ca2:	2d00      	cmp	r5, #0
     ca4:	d106      	bne.n	cb4 <tcc_init+0x218>
     ca6:	e01a      	b.n	cde <tcc_init+0x242>
     ca8:	7805      	ldrb	r5, [r0, #0]
     caa:	2d00      	cmp	r5, #0
     cac:	d017      	beq.n	cde <tcc_init+0x242>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
     cae:	4293      	cmp	r3, r2
     cb0:	d800      	bhi.n	cb4 <tcc_init+0x218>
     cb2:	e0cd      	b.n	e50 <tcc_init+0x3b4>
				return STATUS_ERR_INVALID_ARG;
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
     cb4:	2d02      	cmp	r5, #2
     cb6:	d10f      	bne.n	cd8 <tcc_init+0x23c>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     cb8:	465d      	mov	r5, fp
     cba:	4095      	lsls	r5, r2
     cbc:	432f      	orrs	r7, r5
     cbe:	e00e      	b.n	cde <tcc_init+0x242>
     cc0:	000008ad 	.word	0x000008ad
     cc4:	40000400 	.word	0x40000400
     cc8:	00002b44 	.word	0x00002b44
     ccc:	00002b50 	.word	0x00002b50
     cd0:	00002b60 	.word	0x00002b60
     cd4:	00002b5c 	.word	0x00002b5c
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     cd8:	4655      	mov	r5, sl
     cda:	4095      	lsls	r5, r2
     cdc:	432f      	orrs	r7, r5
	uint8_t ow_num = _tcc_ow_nums[module_index];
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     cde:	3201      	adds	r2, #1
     ce0:	3101      	adds	r1, #1
     ce2:	3002      	adds	r0, #2
     ce4:	2a08      	cmp	r2, #8
     ce6:	d1d2      	bne.n	c8e <tcc_init+0x1f2>
     ce8:	4699      	mov	r9, r3
     cea:	0023      	movs	r3, r4
     cec:	4664      	mov	r4, ip
	uint8_t cc_num = _tcc_cc_nums[module_index];
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     cee:	7e72      	ldrb	r2, [r6, #25]
     cf0:	0112      	lsls	r2, r2, #4
     cf2:	2130      	movs	r1, #48	; 0x30
     cf4:	400a      	ands	r2, r1
     cf6:	7e31      	ldrb	r1, [r6, #24]
     cf8:	2007      	movs	r0, #7
     cfa:	4001      	ands	r1, r0
     cfc:	430a      	orrs	r2, r1
     cfe:	4692      	mov	sl, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     d00:	2200      	movs	r2, #0
		if (wav_cfg->wave_polarity[n]) {
			if (n >= cc_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			wave |= (TCC_WAVE_POL0 << n);
     d02:	2080      	movs	r0, #128	; 0x80
     d04:	0240      	lsls	r0, r0, #9
     d06:	4655      	mov	r5, sl

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
		if (wav_cfg->wave_polarity[n]) {
     d08:	18b1      	adds	r1, r6, r2
     d0a:	7d09      	ldrb	r1, [r1, #20]
     d0c:	2900      	cmp	r1, #0
     d0e:	d006      	beq.n	d1e <tcc_init+0x282>
			if (n >= cc_num) {
     d10:	9904      	ldr	r1, [sp, #16]
     d12:	4291      	cmp	r1, r2
     d14:	dc00      	bgt.n	d18 <tcc_init+0x27c>
     d16:	e09d      	b.n	e54 <tcc_init+0x3b8>
				return STATUS_ERR_INVALID_ARG;
			}
			wave |= (TCC_WAVE_POL0 << n);
     d18:	0001      	movs	r1, r0
     d1a:	4091      	lsls	r1, r2
     d1c:	430d      	orrs	r5, r1
	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     d1e:	3201      	adds	r2, #1
     d20:	2a04      	cmp	r2, #4
     d22:	d1f1      	bne.n	d08 <tcc_init+0x26c>
     d24:	46aa      	mov	sl, r5
     d26:	9801      	ldr	r0, [sp, #4]
     d28:	0002      	movs	r2, r0
     d2a:	3204      	adds	r2, #4
     d2c:	3034      	adds	r0, #52	; 0x34

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		module_inst->callback[i] = NULL;
     d2e:	2100      	movs	r1, #0
     d30:	c202      	stmia	r2!, {r1}
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     d32:	4282      	cmp	r2, r0
     d34:	d1fc      	bne.n	d30 <tcc_init+0x294>
		module_inst->callback[i] = NULL;
	}
	module_inst->register_callback_mask = 0;
     d36:	2200      	movs	r2, #0
     d38:	9801      	ldr	r0, [sp, #4]
     d3a:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
     d3c:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
     d3e:	0099      	lsls	r1, r3, #2
     d40:	4a4a      	ldr	r2, [pc, #296]	; (e6c <tcc_init+0x3d0>)
     d42:	5088      	str	r0, [r1, r2]
#endif

	module_inst->hw = hw;
     d44:	6004      	str	r4, [r0, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     d46:	22a0      	movs	r2, #160	; 0xa0
     d48:	5cb1      	ldrb	r1, [r6, r2]
     d4a:	3a64      	subs	r2, #100	; 0x64
     d4c:	5481      	strb	r1, [r0, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->counter.clock_source;
     d4e:	a90b      	add	r1, sp, #44	; 0x2c
     d50:	7ab2      	ldrb	r2, [r6, #10]
     d52:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
     d54:	4a46      	ldr	r2, [pc, #280]	; (e70 <tcc_init+0x3d4>)
     d56:	5cd5      	ldrb	r5, [r2, r3]
     d58:	0028      	movs	r0, r5
     d5a:	4b46      	ldr	r3, [pc, #280]	; (e74 <tcc_init+0x3d8>)
     d5c:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
     d5e:	0028      	movs	r0, r5
     d60:	4b45      	ldr	r3, [pc, #276]	; (e78 <tcc_init+0x3dc>)
     d62:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     d64:	464b      	mov	r3, r9
     d66:	2b00      	cmp	r3, #0
     d68:	dd22      	ble.n	db0 <tcc_init+0x314>
     d6a:	0035      	movs	r5, r6
     d6c:	3558      	adds	r5, #88	; 0x58
     d6e:	3398      	adds	r3, #152	; 0x98
     d70:	4698      	mov	r8, r3
     d72:	44b0      	add	r8, r6
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     d74:	2301      	movs	r3, #1
     d76:	4699      	mov	r9, r3
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
     d78:	46b3      	mov	fp, r6
     d7a:	4646      	mov	r6, r8
     d7c:	46a0      	mov	r8, r4
     d7e:	9c06      	ldr	r4, [sp, #24]
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
     d80:	7823      	ldrb	r3, [r4, #0]
     d82:	2b00      	cmp	r3, #0
     d84:	d00e      	beq.n	da4 <tcc_init+0x308>
     d86:	ab0a      	add	r3, sp, #40	; 0x28
     d88:	464a      	mov	r2, r9
     d8a:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     d8c:	2300      	movs	r3, #0
     d8e:	aa0a      	add	r2, sp, #40	; 0x28
     d90:	70d3      	strb	r3, [r2, #3]
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
     d92:	6a2b      	ldr	r3, [r5, #32]
     d94:	7013      	strb	r3, [r2, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     d96:	0013      	movs	r3, r2
     d98:	464a      	mov	r2, r9
     d9a:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
     d9c:	7828      	ldrb	r0, [r5, #0]
     d9e:	0019      	movs	r1, r3
     da0:	4b36      	ldr	r3, [pc, #216]	; (e7c <tcc_init+0x3e0>)
     da2:	4798      	blx	r3
     da4:	3401      	adds	r4, #1
     da6:	3504      	adds	r5, #4
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     da8:	42b4      	cmp	r4, r6
     daa:	d1e9      	bne.n	d80 <tcc_init+0x2e4>
     dac:	4644      	mov	r4, r8
     dae:	465e      	mov	r6, fp

	if (config->run_in_standby) {
		ctrla |= TCC_CTRLA_RUNSTDBY;
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     db0:	9b08      	ldr	r3, [sp, #32]
     db2:	031a      	lsls	r2, r3, #12
     db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
     db6:	021b      	lsls	r3, r3, #8
     db8:	4313      	orrs	r3, r2
     dba:	9a02      	ldr	r2, [sp, #8]
     dbc:	4313      	orrs	r3, r2
				config->pins.wave_out_pin[i], &pin_config);
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
     dbe:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     dc0:	2204      	movs	r2, #4
     dc2:	68a3      	ldr	r3, [r4, #8]
     dc4:	421a      	tst	r2, r3
     dc6:	d1fc      	bne.n	dc2 <tcc_init+0x326>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
     dc8:	23ff      	movs	r3, #255	; 0xff
     dca:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     dcc:	2204      	movs	r2, #4
     dce:	68a3      	ldr	r3, [r4, #8]
     dd0:	421a      	tst	r2, r3
     dd2:	d1fc      	bne.n	dce <tcc_init+0x332>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
     dd4:	466b      	mov	r3, sp
     dd6:	7d1b      	ldrb	r3, [r3, #20]
     dd8:	7163      	strb	r3, [r4, #5]

	hw->FCTRLA.reg = faults[0];
     dda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     ddc:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
     dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     de0:	6123      	str	r3, [r4, #16]

	hw->DRVCTRL.reg = drvctrl;
     de2:	61a7      	str	r7, [r4, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
     de4:	4a26      	ldr	r2, [pc, #152]	; (e80 <tcc_init+0x3e4>)
     de6:	68a3      	ldr	r3, [r4, #8]
     de8:	4213      	tst	r3, r2
     dea:	d1fc      	bne.n	de6 <tcc_init+0x34a>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
     dec:	4653      	mov	r3, sl
     dee:	63e3      	str	r3, [r4, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
     df0:	2210      	movs	r2, #16
     df2:	68a3      	ldr	r3, [r4, #8]
     df4:	421a      	tst	r2, r3
     df6:	d1fc      	bne.n	df2 <tcc_init+0x356>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
     df8:	6833      	ldr	r3, [r6, #0]
     dfa:	6363      	str	r3, [r4, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
     dfc:	4a21      	ldr	r2, [pc, #132]	; (e84 <tcc_init+0x3e8>)
     dfe:	68a3      	ldr	r3, [r4, #8]
     e00:	4213      	tst	r3, r2
     e02:	d1fc      	bne.n	dfe <tcc_init+0x362>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
     e04:	6873      	ldr	r3, [r6, #4]
     e06:	6423      	str	r3, [r4, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     e08:	9804      	ldr	r0, [sp, #16]
     e0a:	2800      	cmp	r0, #0
     e0c:	dd24      	ble.n	e58 <tcc_init+0x3bc>
     e0e:	361c      	adds	r6, #28
     e10:	2100      	movs	r1, #0
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
     e12:	4d1d      	ldr	r5, [pc, #116]	; (e88 <tcc_init+0x3ec>)
     e14:	002a      	movs	r2, r5
     e16:	408a      	lsls	r2, r1
     e18:	68a3      	ldr	r3, [r4, #8]
     e1a:	421a      	tst	r2, r3
     e1c:	d1fc      	bne.n	e18 <tcc_init+0x37c>
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
     e1e:	ce04      	ldmia	r6!, {r2}
     e20:	000b      	movs	r3, r1
     e22:	3310      	adds	r3, #16
     e24:	009b      	lsls	r3, r3, #2
     e26:	18e3      	adds	r3, r4, r3
     e28:	605a      	str	r2, [r3, #4]
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     e2a:	3101      	adds	r1, #1
     e2c:	4288      	cmp	r0, r1
     e2e:	dcf1      	bgt.n	e14 <tcc_init+0x378>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
     e30:	2000      	movs	r0, #0
     e32:	e014      	b.n	e5e <tcc_init+0x3c2>

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if ((config->compare.match[i] > count_max)
			) {
			return STATUS_ERR_INVALID_ARG;
     e34:	2017      	movs	r0, #23
     e36:	e012      	b.n	e5e <tcc_init+0x3c2>
     e38:	2017      	movs	r0, #23
     e3a:	e010      	b.n	e5e <tcc_init+0x3c2>
     e3c:	2017      	movs	r0, #23
     e3e:	e00e      	b.n	e5e <tcc_init+0x3c2>
     e40:	2017      	movs	r0, #23
     e42:	e00c      	b.n	e5e <tcc_init+0x3c2>
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
			return STATUS_ERR_INVALID_ARG;
     e44:	2017      	movs	r0, #23
     e46:	e00a      	b.n	e5e <tcc_init+0x3c2>
		if (config->capture.channel_function[i] ==
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
     e48:	2017      	movs	r0, #23
     e4a:	e008      	b.n	e5e <tcc_init+0x3c2>

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
			if (i >= ow_num) {
     e4c:	2017      	movs	r0, #23
     e4e:	e006      	b.n	e5e <tcc_init+0x3c2>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
     e50:	2017      	movs	r0, #23
     e52:	e004      	b.n	e5e <tcc_init+0x3c2>
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
		if (wav_cfg->wave_polarity[n]) {
			if (n >= cc_num) {
				return STATUS_ERR_INVALID_ARG;
     e54:	2017      	movs	r0, #23
     e56:	e002      	b.n	e5e <tcc_init+0x3c2>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
     e58:	2000      	movs	r0, #0
     e5a:	e000      	b.n	e5e <tcc_init+0x3c2>
		if (config->capture.channel_function[i] ==
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
     e5c:	2017      	movs	r0, #23
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
     e5e:	b00f      	add	sp, #60	; 0x3c
     e60:	bc3c      	pop	{r2, r3, r4, r5}
     e62:	4690      	mov	r8, r2
     e64:	4699      	mov	r9, r3
     e66:	46a2      	mov	sl, r4
     e68:	46ab      	mov	fp, r5
     e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e6c:	20000168 	.word	0x20000168
     e70:	00002b40 	.word	0x00002b40
     e74:	00001b5d 	.word	0x00001b5d
     e78:	00001ad1 	.word	0x00001ad1
     e7c:	00001c55 	.word	0x00001c55
     e80:	00020040 	.word	0x00020040
     e84:	00040080 	.word	0x00040080
     e88:	00080100 	.word	0x00080100

00000e8c <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
     e8c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
     e8e:	233c      	movs	r3, #60	; 0x3c
     e90:	5cc3      	ldrb	r3, [r0, r3]
     e92:	4c01      	ldr	r4, [pc, #4]	; (e98 <tcc_set_compare_value+0xc>)
     e94:	47a0      	blx	r4
			module_inst->double_buffering_enabled);
}
     e96:	bd10      	pop	{r4, pc}
     e98:	000008dd 	.word	0x000008dd

00000e9c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e9e:	464f      	mov	r7, r9
     ea0:	4646      	mov	r6, r8
     ea2:	b4c0      	push	{r6, r7}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     ea4:	0080      	lsls	r0, r0, #2
     ea6:	4b11      	ldr	r3, [pc, #68]	; (eec <_tcc_interrupt_handler+0x50>)
     ea8:	58c3      	ldr	r3, [r0, r3]
     eaa:	4699      	mov	r9, r3
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     eac:	681b      	ldr	r3, [r3, #0]
     eae:	6adf      	ldr	r7, [r3, #44]	; 0x2c
     eb0:	464b      	mov	r3, r9
     eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     eb4:	401f      	ands	r7, r3
     eb6:	464b      	mov	r3, r9
     eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     eba:	401f      	ands	r7, r3
     ebc:	4d0c      	ldr	r5, [pc, #48]	; (ef0 <_tcc_interrupt_handler+0x54>)
     ebe:	464b      	mov	r3, r9
     ec0:	1d1c      	adds	r4, r3, #4
     ec2:	2334      	movs	r3, #52	; 0x34
     ec4:	444b      	add	r3, r9
     ec6:	4698      	mov	r8, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     ec8:	682e      	ldr	r6, [r5, #0]
     eca:	423e      	tst	r6, r7
     ecc:	d005      	beq.n	eda <_tcc_interrupt_handler+0x3e>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     ece:	4648      	mov	r0, r9
     ed0:	6823      	ldr	r3, [r4, #0]
     ed2:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     ed4:	464b      	mov	r3, r9
     ed6:	681b      	ldr	r3, [r3, #0]
     ed8:	62de      	str	r6, [r3, #44]	; 0x2c
     eda:	3504      	adds	r5, #4
     edc:	3404      	adds	r4, #4
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     ede:	4544      	cmp	r4, r8
     ee0:	d1f2      	bne.n	ec8 <_tcc_interrupt_handler+0x2c>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
     ee2:	bc0c      	pop	{r2, r3}
     ee4:	4690      	mov	r8, r2
     ee6:	4699      	mov	r9, r3
     ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     eea:	46c0      	nop			; (mov r8, r8)
     eec:	20000168 	.word	0x20000168
     ef0:	00002b64 	.word	0x00002b64

00000ef4 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     ef4:	b510      	push	{r4, lr}
     ef6:	2000      	movs	r0, #0
     ef8:	4b01      	ldr	r3, [pc, #4]	; (f00 <TCC0_Handler+0xc>)
     efa:	4798      	blx	r3
     efc:	bd10      	pop	{r4, pc}
     efe:	46c0      	nop			; (mov r8, r8)
     f00:	00000e9d 	.word	0x00000e9d

00000f04 <TCC1_Handler>:
     f04:	b510      	push	{r4, lr}
     f06:	2001      	movs	r0, #1
     f08:	4b01      	ldr	r3, [pc, #4]	; (f10 <TCC1_Handler+0xc>)
     f0a:	4798      	blx	r3
     f0c:	bd10      	pop	{r4, pc}
     f0e:	46c0      	nop			; (mov r8, r8)
     f10:	00000e9d 	.word	0x00000e9d

00000f14 <TCC2_Handler>:
     f14:	b510      	push	{r4, lr}
     f16:	2002      	movs	r0, #2
     f18:	4b01      	ldr	r3, [pc, #4]	; (f20 <TCC2_Handler+0xc>)
     f1a:	4798      	blx	r3
     f1c:	bd10      	pop	{r4, pc}
     f1e:	46c0      	nop			; (mov r8, r8)
     f20:	00000e9d 	.word	0x00000e9d

00000f24 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     f24:	b5f0      	push	{r4, r5, r6, r7, lr}
     f26:	465f      	mov	r7, fp
     f28:	4656      	mov	r6, sl
     f2a:	464d      	mov	r5, r9
     f2c:	4644      	mov	r4, r8
     f2e:	b4f0      	push	{r4, r5, r6, r7}
     f30:	b091      	sub	sp, #68	; 0x44
     f32:	0005      	movs	r5, r0
     f34:	000c      	movs	r4, r1
     f36:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     f38:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f3a:	0008      	movs	r0, r1
     f3c:	4bbb      	ldr	r3, [pc, #748]	; (122c <usart_init+0x308>)
     f3e:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     f40:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     f42:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     f44:	07d2      	lsls	r2, r2, #31
     f46:	d500      	bpl.n	f4a <usart_init+0x26>
     f48:	e167      	b.n	121a <usart_init+0x2f6>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     f4a:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     f4c:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     f4e:	0792      	lsls	r2, r2, #30
     f50:	d500      	bpl.n	f54 <usart_init+0x30>
     f52:	e162      	b.n	121a <usart_init+0x2f6>
     f54:	49b6      	ldr	r1, [pc, #728]	; (1230 <usart_init+0x30c>)
     f56:	6a0a      	ldr	r2, [r1, #32]
     f58:	1c87      	adds	r7, r0, #2
     f5a:	3b1b      	subs	r3, #27
     f5c:	40bb      	lsls	r3, r7
     f5e:	4313      	orrs	r3, r2
     f60:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     f62:	a90f      	add	r1, sp, #60	; 0x3c
     f64:	272d      	movs	r7, #45	; 0x2d
     f66:	5df3      	ldrb	r3, [r6, r7]
     f68:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     f6a:	3014      	adds	r0, #20
     f6c:	b2c3      	uxtb	r3, r0
     f6e:	9302      	str	r3, [sp, #8]
     f70:	0018      	movs	r0, r3
     f72:	4bb0      	ldr	r3, [pc, #704]	; (1234 <usart_init+0x310>)
     f74:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     f76:	9802      	ldr	r0, [sp, #8]
     f78:	4baf      	ldr	r3, [pc, #700]	; (1238 <usart_init+0x314>)
     f7a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     f7c:	5df0      	ldrb	r0, [r6, r7]
     f7e:	2100      	movs	r1, #0
     f80:	4bae      	ldr	r3, [pc, #696]	; (123c <usart_init+0x318>)
     f82:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     f84:	7af3      	ldrb	r3, [r6, #11]
     f86:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     f88:	2324      	movs	r3, #36	; 0x24
     f8a:	5cf3      	ldrb	r3, [r6, r3]
     f8c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     f8e:	2325      	movs	r3, #37	; 0x25
     f90:	5cf3      	ldrb	r3, [r6, r3]
     f92:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     f94:	7ef3      	ldrb	r3, [r6, #27]
     f96:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     f98:	7f33      	ldrb	r3, [r6, #28]
     f9a:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     f9c:	682b      	ldr	r3, [r5, #0]
     f9e:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     fa0:	0018      	movs	r0, r3
     fa2:	4ba2      	ldr	r3, [pc, #648]	; (122c <usart_init+0x308>)
     fa4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     fa6:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     fa8:	2200      	movs	r2, #0
     faa:	230e      	movs	r3, #14
     fac:	a906      	add	r1, sp, #24
     fae:	468c      	mov	ip, r1
     fb0:	4463      	add	r3, ip
     fb2:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     fb4:	8a32      	ldrh	r2, [r6, #16]
     fb6:	9202      	str	r2, [sp, #8]
     fb8:	2380      	movs	r3, #128	; 0x80
     fba:	01db      	lsls	r3, r3, #7
     fbc:	429a      	cmp	r2, r3
     fbe:	d01a      	beq.n	ff6 <usart_init+0xd2>
     fc0:	d804      	bhi.n	fcc <usart_init+0xa8>
     fc2:	2380      	movs	r3, #128	; 0x80
     fc4:	019b      	lsls	r3, r3, #6
     fc6:	429a      	cmp	r2, r3
     fc8:	d00b      	beq.n	fe2 <usart_init+0xbe>
     fca:	e107      	b.n	11dc <usart_init+0x2b8>
     fcc:	23c0      	movs	r3, #192	; 0xc0
     fce:	01db      	lsls	r3, r3, #7
     fd0:	9a02      	ldr	r2, [sp, #8]
     fd2:	429a      	cmp	r2, r3
     fd4:	d00a      	beq.n	fec <usart_init+0xc8>
     fd6:	2380      	movs	r3, #128	; 0x80
     fd8:	021b      	lsls	r3, r3, #8
     fda:	429a      	cmp	r2, r3
     fdc:	d100      	bne.n	fe0 <usart_init+0xbc>
     fde:	e102      	b.n	11e6 <usart_init+0x2c2>
     fe0:	e0fc      	b.n	11dc <usart_init+0x2b8>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     fe2:	2310      	movs	r3, #16
     fe4:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     fe6:	3b0f      	subs	r3, #15
     fe8:	9307      	str	r3, [sp, #28]
     fea:	e100      	b.n	11ee <usart_init+0x2ca>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     fec:	2308      	movs	r3, #8
     fee:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     ff0:	3b07      	subs	r3, #7
     ff2:	9307      	str	r3, [sp, #28]
     ff4:	e0fb      	b.n	11ee <usart_init+0x2ca>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     ff6:	6833      	ldr	r3, [r6, #0]
     ff8:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
     ffa:	68f3      	ldr	r3, [r6, #12]
     ffc:	9303      	str	r3, [sp, #12]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     ffe:	6973      	ldr	r3, [r6, #20]
    1000:	4698      	mov	r8, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1002:	7e33      	ldrb	r3, [r6, #24]
    1004:	469b      	mov	fp, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1006:	2326      	movs	r3, #38	; 0x26
    1008:	5cf3      	ldrb	r3, [r6, r3]
    100a:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    100c:	6873      	ldr	r3, [r6, #4]
    100e:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1010:	2b00      	cmp	r3, #0
    1012:	d015      	beq.n	1040 <usart_init+0x11c>
    1014:	2380      	movs	r3, #128	; 0x80
    1016:	055b      	lsls	r3, r3, #21
    1018:	459a      	cmp	sl, r3
    101a:	d136      	bne.n	108a <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    101c:	2327      	movs	r3, #39	; 0x27
    101e:	5cf3      	ldrb	r3, [r6, r3]
    1020:	2b00      	cmp	r3, #0
    1022:	d136      	bne.n	1092 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1024:	6a33      	ldr	r3, [r6, #32]
    1026:	001f      	movs	r7, r3
    1028:	b2c0      	uxtb	r0, r0
    102a:	4b85      	ldr	r3, [pc, #532]	; (1240 <usart_init+0x31c>)
    102c:	4798      	blx	r3
    102e:	0001      	movs	r1, r0
    1030:	220e      	movs	r2, #14
    1032:	ab06      	add	r3, sp, #24
    1034:	469c      	mov	ip, r3
    1036:	4462      	add	r2, ip
    1038:	0038      	movs	r0, r7
    103a:	4b82      	ldr	r3, [pc, #520]	; (1244 <usart_init+0x320>)
    103c:	4798      	blx	r3
    103e:	e025      	b.n	108c <usart_init+0x168>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1040:	2308      	movs	r3, #8
    1042:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1044:	2300      	movs	r3, #0
    1046:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    1048:	2327      	movs	r3, #39	; 0x27
    104a:	5cf3      	ldrb	r3, [r6, r3]
    104c:	2b00      	cmp	r3, #0
    104e:	d00b      	beq.n	1068 <usart_init+0x144>
				status_code =
    1050:	9b06      	ldr	r3, [sp, #24]
    1052:	9300      	str	r3, [sp, #0]
    1054:	9b07      	ldr	r3, [sp, #28]
    1056:	220e      	movs	r2, #14
    1058:	a906      	add	r1, sp, #24
    105a:	468c      	mov	ip, r1
    105c:	4462      	add	r2, ip
    105e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1060:	6a30      	ldr	r0, [r6, #32]
    1062:	4f79      	ldr	r7, [pc, #484]	; (1248 <usart_init+0x324>)
    1064:	47b8      	blx	r7
    1066:	e011      	b.n	108c <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1068:	6a33      	ldr	r3, [r6, #32]
    106a:	001f      	movs	r7, r3
    106c:	b2c0      	uxtb	r0, r0
    106e:	4b74      	ldr	r3, [pc, #464]	; (1240 <usart_init+0x31c>)
    1070:	4798      	blx	r3
    1072:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    1074:	9b06      	ldr	r3, [sp, #24]
    1076:	9300      	str	r3, [sp, #0]
    1078:	9b07      	ldr	r3, [sp, #28]
    107a:	220e      	movs	r2, #14
    107c:	a806      	add	r0, sp, #24
    107e:	4684      	mov	ip, r0
    1080:	4462      	add	r2, ip
    1082:	0038      	movs	r0, r7
    1084:	4f70      	ldr	r7, [pc, #448]	; (1248 <usart_init+0x324>)
    1086:	47b8      	blx	r7
    1088:	e000      	b.n	108c <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    108a:	2000      	movs	r0, #0
    108c:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    108e:	d000      	beq.n	1092 <usart_init+0x16e>
    1090:	e0c3      	b.n	121a <usart_init+0x2f6>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1092:	7e73      	ldrb	r3, [r6, #25]
    1094:	2b00      	cmp	r3, #0
    1096:	d002      	beq.n	109e <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1098:	7eb3      	ldrb	r3, [r6, #26]
    109a:	464a      	mov	r2, r9
    109c:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    109e:	682a      	ldr	r2, [r5, #0]
    10a0:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    10a2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    10a4:	2b00      	cmp	r3, #0
    10a6:	d1fc      	bne.n	10a2 <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    10a8:	330e      	adds	r3, #14
    10aa:	aa06      	add	r2, sp, #24
    10ac:	4694      	mov	ip, r2
    10ae:	4463      	add	r3, ip
    10b0:	881b      	ldrh	r3, [r3, #0]
    10b2:	464a      	mov	r2, r9
    10b4:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    10b6:	9b04      	ldr	r3, [sp, #16]
    10b8:	9a03      	ldr	r2, [sp, #12]
    10ba:	4313      	orrs	r3, r2
    10bc:	4642      	mov	r2, r8
    10be:	4313      	orrs	r3, r2
    10c0:	4652      	mov	r2, sl
    10c2:	4313      	orrs	r3, r2
    10c4:	433b      	orrs	r3, r7
    10c6:	465a      	mov	r2, fp
    10c8:	0212      	lsls	r2, r2, #8
    10ca:	4313      	orrs	r3, r2
    10cc:	9a05      	ldr	r2, [sp, #20]
    10ce:	0757      	lsls	r7, r2, #29
    10d0:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    10d2:	2327      	movs	r3, #39	; 0x27
    10d4:	5cf3      	ldrb	r3, [r6, r3]
    10d6:	2b00      	cmp	r3, #0
    10d8:	d101      	bne.n	10de <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    10da:	3304      	adds	r3, #4
    10dc:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    10de:	7e71      	ldrb	r1, [r6, #25]
    10e0:	0289      	lsls	r1, r1, #10
    10e2:	7f33      	ldrb	r3, [r6, #28]
    10e4:	025b      	lsls	r3, r3, #9
    10e6:	4319      	orrs	r1, r3
    10e8:	7f73      	ldrb	r3, [r6, #29]
    10ea:	021b      	lsls	r3, r3, #8
    10ec:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    10ee:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    10f0:	5cf3      	ldrb	r3, [r6, r3]
    10f2:	045b      	lsls	r3, r3, #17
    10f4:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    10f6:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    10f8:	5cf0      	ldrb	r0, [r6, r3]
    10fa:	0400      	lsls	r0, r0, #16
    10fc:	000a      	movs	r2, r1
    10fe:	4302      	orrs	r2, r0
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
	ctrlb |= (uint32_t)config->character_size;
    1100:	7ab1      	ldrb	r1, [r6, #10]
    1102:	7af3      	ldrb	r3, [r6, #11]
    1104:	4319      	orrs	r1, r3
    1106:	4311      	orrs	r1, r2
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1108:	8933      	ldrh	r3, [r6, #8]
    110a:	2bff      	cmp	r3, #255	; 0xff
    110c:	d004      	beq.n	1118 <usart_init+0x1f4>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    110e:	2280      	movs	r2, #128	; 0x80
    1110:	0452      	lsls	r2, r2, #17
    1112:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1114:	4319      	orrs	r1, r3
    1116:	e005      	b.n	1124 <usart_init+0x200>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1118:	7ef3      	ldrb	r3, [r6, #27]
    111a:	2b00      	cmp	r3, #0
    111c:	d002      	beq.n	1124 <usart_init+0x200>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    111e:	2380      	movs	r3, #128	; 0x80
    1120:	04db      	lsls	r3, r3, #19
    1122:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1124:	232c      	movs	r3, #44	; 0x2c
    1126:	5cf3      	ldrb	r3, [r6, r3]
    1128:	2b00      	cmp	r3, #0
    112a:	d103      	bne.n	1134 <usart_init+0x210>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    112c:	4b47      	ldr	r3, [pc, #284]	; (124c <usart_init+0x328>)
    112e:	789b      	ldrb	r3, [r3, #2]
    1130:	079b      	lsls	r3, r3, #30
    1132:	d501      	bpl.n	1138 <usart_init+0x214>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1134:	2380      	movs	r3, #128	; 0x80
    1136:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1138:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    113a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    113c:	2b00      	cmp	r3, #0
    113e:	d1fc      	bne.n	113a <usart_init+0x216>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1140:	464b      	mov	r3, r9
    1142:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1144:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1146:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1148:	2b00      	cmp	r3, #0
    114a:	d1fc      	bne.n	1146 <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    114c:	464b      	mov	r3, r9
    114e:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1150:	ab0e      	add	r3, sp, #56	; 0x38
    1152:	2280      	movs	r2, #128	; 0x80
    1154:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1156:	2200      	movs	r2, #0
    1158:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    115a:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    115c:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    115e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1160:	930a      	str	r3, [sp, #40]	; 0x28
    1162:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1164:	930b      	str	r3, [sp, #44]	; 0x2c
    1166:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1168:	930c      	str	r3, [sp, #48]	; 0x30
    116a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    116c:	9302      	str	r3, [sp, #8]
    116e:	930d      	str	r3, [sp, #52]	; 0x34
    1170:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1172:	ae0e      	add	r6, sp, #56	; 0x38
    1174:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1176:	00bb      	lsls	r3, r7, #2
    1178:	aa0a      	add	r2, sp, #40	; 0x28
    117a:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    117c:	2800      	cmp	r0, #0
    117e:	d102      	bne.n	1186 <usart_init+0x262>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1180:	0020      	movs	r0, r4
    1182:	4b33      	ldr	r3, [pc, #204]	; (1250 <usart_init+0x32c>)
    1184:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1186:	1c43      	adds	r3, r0, #1
    1188:	d005      	beq.n	1196 <usart_init+0x272>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    118a:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    118c:	0c00      	lsrs	r0, r0, #16
    118e:	b2c0      	uxtb	r0, r0
    1190:	0031      	movs	r1, r6
    1192:	4b30      	ldr	r3, [pc, #192]	; (1254 <usart_init+0x330>)
    1194:	4798      	blx	r3
    1196:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1198:	2f04      	cmp	r7, #4
    119a:	d1eb      	bne.n	1174 <usart_init+0x250>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    119c:	2300      	movs	r3, #0
    119e:	60eb      	str	r3, [r5, #12]
    11a0:	612b      	str	r3, [r5, #16]
    11a2:	616b      	str	r3, [r5, #20]
    11a4:	61ab      	str	r3, [r5, #24]
    11a6:	61eb      	str	r3, [r5, #28]
    11a8:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    11aa:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    11ac:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    11ae:	2200      	movs	r2, #0
    11b0:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    11b2:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    11b4:	3330      	adds	r3, #48	; 0x30
    11b6:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    11b8:	3301      	adds	r3, #1
    11ba:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    11bc:	3301      	adds	r3, #1
    11be:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    11c0:	3301      	adds	r3, #1
    11c2:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    11c4:	6828      	ldr	r0, [r5, #0]
    11c6:	4b19      	ldr	r3, [pc, #100]	; (122c <usart_init+0x308>)
    11c8:	4798      	blx	r3
    11ca:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    11cc:	4922      	ldr	r1, [pc, #136]	; (1258 <usart_init+0x334>)
    11ce:	4b23      	ldr	r3, [pc, #140]	; (125c <usart_init+0x338>)
    11d0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    11d2:	00a4      	lsls	r4, r4, #2
    11d4:	4b22      	ldr	r3, [pc, #136]	; (1260 <usart_init+0x33c>)
    11d6:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    11d8:	2300      	movs	r3, #0
    11da:	e01e      	b.n	121a <usart_init+0x2f6>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    11dc:	2310      	movs	r3, #16
    11de:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    11e0:	2300      	movs	r3, #0
    11e2:	9307      	str	r3, [sp, #28]
    11e4:	e003      	b.n	11ee <usart_init+0x2ca>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    11e6:	2303      	movs	r3, #3
    11e8:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    11ea:	2300      	movs	r3, #0
    11ec:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    11ee:	6833      	ldr	r3, [r6, #0]
    11f0:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    11f2:	68f3      	ldr	r3, [r6, #12]
    11f4:	9303      	str	r3, [sp, #12]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    11f6:	6973      	ldr	r3, [r6, #20]
    11f8:	4698      	mov	r8, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    11fa:	7e33      	ldrb	r3, [r6, #24]
    11fc:	469b      	mov	fp, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    11fe:	2326      	movs	r3, #38	; 0x26
    1200:	5cf3      	ldrb	r3, [r6, r3]
    1202:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1204:	6873      	ldr	r3, [r6, #4]
    1206:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1208:	2b00      	cmp	r3, #0
    120a:	d100      	bne.n	120e <usart_init+0x2ea>
    120c:	e71c      	b.n	1048 <usart_init+0x124>
    120e:	2380      	movs	r3, #128	; 0x80
    1210:	055b      	lsls	r3, r3, #21
    1212:	459a      	cmp	sl, r3
    1214:	d100      	bne.n	1218 <usart_init+0x2f4>
    1216:	e701      	b.n	101c <usart_init+0xf8>
    1218:	e73b      	b.n	1092 <usart_init+0x16e>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    121a:	0018      	movs	r0, r3
    121c:	b011      	add	sp, #68	; 0x44
    121e:	bc3c      	pop	{r2, r3, r4, r5}
    1220:	4690      	mov	r8, r2
    1222:	4699      	mov	r9, r3
    1224:	46a2      	mov	sl, r4
    1226:	46ab      	mov	fp, r5
    1228:	bdf0      	pop	{r4, r5, r6, r7, pc}
    122a:	46c0      	nop			; (mov r8, r8)
    122c:	00000461 	.word	0x00000461
    1230:	40000400 	.word	0x40000400
    1234:	00001b5d 	.word	0x00001b5d
    1238:	00001ad1 	.word	0x00001ad1
    123c:	0000028d 	.word	0x0000028d
    1240:	00001b79 	.word	0x00001b79
    1244:	000001d1 	.word	0x000001d1
    1248:	000001f9 	.word	0x000001f9
    124c:	41002000 	.word	0x41002000
    1250:	000002d9 	.word	0x000002d9
    1254:	00001c55 	.word	0x00001c55
    1258:	00001389 	.word	0x00001389
    125c:	00001519 	.word	0x00001519
    1260:	20000174 	.word	0x20000174

00001264 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1264:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1266:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1268:	2a00      	cmp	r2, #0
    126a:	d00e      	beq.n	128a <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    126c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    126e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1270:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1272:	2a00      	cmp	r2, #0
    1274:	d109      	bne.n	128a <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1276:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1278:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    127a:	2a00      	cmp	r2, #0
    127c:	d1fc      	bne.n	1278 <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    127e:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1280:	2102      	movs	r1, #2
    1282:	7e1a      	ldrb	r2, [r3, #24]
    1284:	420a      	tst	r2, r1
    1286:	d0fc      	beq.n	1282 <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1288:	2300      	movs	r3, #0
}
    128a:	0018      	movs	r0, r3
    128c:	4770      	bx	lr
    128e:	46c0      	nop			; (mov r8, r8)

00001290 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1290:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1292:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1294:	2a00      	cmp	r2, #0
    1296:	d030      	beq.n	12fa <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1298:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    129a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    129c:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    129e:	2a00      	cmp	r2, #0
    12a0:	d12b      	bne.n	12fa <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    12a2:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    12a4:	7e10      	ldrb	r0, [r2, #24]
    12a6:	0740      	lsls	r0, r0, #29
    12a8:	d527      	bpl.n	12fa <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    12aa:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    12ac:	2b00      	cmp	r3, #0
    12ae:	d1fc      	bne.n	12aa <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    12b0:	8b53      	ldrh	r3, [r2, #26]
    12b2:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    12b4:	0698      	lsls	r0, r3, #26
    12b6:	d01d      	beq.n	12f4 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    12b8:	0798      	lsls	r0, r3, #30
    12ba:	d503      	bpl.n	12c4 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    12bc:	2302      	movs	r3, #2
    12be:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
    12c0:	3318      	adds	r3, #24
    12c2:	e01a      	b.n	12fa <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    12c4:	0758      	lsls	r0, r3, #29
    12c6:	d503      	bpl.n	12d0 <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    12c8:	2304      	movs	r3, #4
    12ca:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
    12cc:	331a      	adds	r3, #26
    12ce:	e014      	b.n	12fa <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    12d0:	07d8      	lsls	r0, r3, #31
    12d2:	d503      	bpl.n	12dc <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    12d4:	2301      	movs	r3, #1
    12d6:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
    12d8:	3312      	adds	r3, #18
    12da:	e00e      	b.n	12fa <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    12dc:	06d8      	lsls	r0, r3, #27
    12de:	d503      	bpl.n	12e8 <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    12e0:	2310      	movs	r3, #16
    12e2:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
    12e4:	3332      	adds	r3, #50	; 0x32
    12e6:	e008      	b.n	12fa <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    12e8:	069b      	lsls	r3, r3, #26
    12ea:	d503      	bpl.n	12f4 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    12ec:	2320      	movs	r3, #32
    12ee:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
    12f0:	3321      	adds	r3, #33	; 0x21
    12f2:	e002      	b.n	12fa <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    12f4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    12f6:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    12f8:	2300      	movs	r3, #0
}
    12fa:	0018      	movs	r0, r3
    12fc:	4770      	bx	lr
    12fe:	46c0      	nop			; (mov r8, r8)

00001300 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1302:	0004      	movs	r4, r0
    1304:	000d      	movs	r5, r1
    1306:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1308:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    130a:	4b0f      	ldr	r3, [pc, #60]	; (1348 <_usart_read_buffer+0x48>)
    130c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    130e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1310:	b29b      	uxth	r3, r3
    1312:	2b00      	cmp	r3, #0
    1314:	d003      	beq.n	131e <_usart_read_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1316:	4b0d      	ldr	r3, [pc, #52]	; (134c <_usart_read_buffer+0x4c>)
    1318:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    131a:	2005      	movs	r0, #5
    131c:	e013      	b.n	1346 <_usart_read_buffer+0x46>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    131e:	85a6      	strh	r6, [r4, #44]	; 0x2c
    1320:	4b0a      	ldr	r3, [pc, #40]	; (134c <_usart_read_buffer+0x4c>)
    1322:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->rx_buffer_ptr              = rx_data;
    1324:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    1326:	2205      	movs	r2, #5
    1328:	2332      	movs	r3, #50	; 0x32
    132a:	54e2      	strb	r2, [r4, r3]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    132c:	3b2e      	subs	r3, #46	; 0x2e
    132e:	75bb      	strb	r3, [r7, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    1330:	7a23      	ldrb	r3, [r4, #8]
    1332:	2b00      	cmp	r3, #0
    1334:	d001      	beq.n	133a <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    1336:	2320      	movs	r3, #32
    1338:	75bb      	strb	r3, [r7, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    133a:	7a63      	ldrb	r3, [r4, #9]
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
    133c:	2000      	movs	r0, #0
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    133e:	2b00      	cmp	r3, #0
    1340:	d001      	beq.n	1346 <_usart_read_buffer+0x46>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    1342:	2308      	movs	r3, #8
    1344:	75bb      	strb	r3, [r7, #22]
	}
#endif

	return STATUS_OK;
}
    1346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1348:	0000164d 	.word	0x0000164d
    134c:	0000168d 	.word	0x0000168d

00001350 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1350:	1c93      	adds	r3, r2, #2
    1352:	009b      	lsls	r3, r3, #2
    1354:	18c3      	adds	r3, r0, r3
    1356:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    1358:	2130      	movs	r1, #48	; 0x30
    135a:	2301      	movs	r3, #1
    135c:	4093      	lsls	r3, r2
    135e:	5c42      	ldrb	r2, [r0, r1]
    1360:	4313      	orrs	r3, r2
    1362:	5443      	strb	r3, [r0, r1]
}
    1364:	4770      	bx	lr
    1366:	46c0      	nop			; (mov r8, r8)

00001368 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1368:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    136a:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    136c:	2a00      	cmp	r2, #0
    136e:	d006      	beq.n	137e <usart_read_buffer_job+0x16>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1370:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    1372:	3305      	adds	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1374:	2c00      	cmp	r4, #0
    1376:	d002      	beq.n	137e <usart_read_buffer_job+0x16>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    1378:	4b02      	ldr	r3, [pc, #8]	; (1384 <usart_read_buffer_job+0x1c>)
    137a:	4798      	blx	r3
    137c:	0003      	movs	r3, r0
}
    137e:	0018      	movs	r0, r3
    1380:	bd10      	pop	{r4, pc}
    1382:	46c0      	nop			; (mov r8, r8)
    1384:	00001301 	.word	0x00001301

00001388 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    138a:	0080      	lsls	r0, r0, #2
    138c:	4b60      	ldr	r3, [pc, #384]	; (1510 <_usart_interrupt_handler+0x188>)
    138e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1390:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1392:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1394:	2b00      	cmp	r3, #0
    1396:	d1fc      	bne.n	1392 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1398:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    139a:	7da6      	ldrb	r6, [r4, #22]
    139c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    139e:	2330      	movs	r3, #48	; 0x30
    13a0:	5ceb      	ldrb	r3, [r5, r3]
    13a2:	2231      	movs	r2, #49	; 0x31
    13a4:	5caf      	ldrb	r7, [r5, r2]
    13a6:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    13a8:	07f3      	lsls	r3, r6, #31
    13aa:	d522      	bpl.n	13f2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    13ac:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    13ae:	b29b      	uxth	r3, r3
    13b0:	2b00      	cmp	r3, #0
    13b2:	d01c      	beq.n	13ee <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    13b4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    13b6:	7813      	ldrb	r3, [r2, #0]
    13b8:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    13ba:	1c51      	adds	r1, r2, #1
    13bc:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    13be:	7969      	ldrb	r1, [r5, #5]
    13c0:	2901      	cmp	r1, #1
    13c2:	d001      	beq.n	13c8 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    13c4:	b29b      	uxth	r3, r3
    13c6:	e004      	b.n	13d2 <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    13c8:	7851      	ldrb	r1, [r2, #1]
    13ca:	0209      	lsls	r1, r1, #8
    13cc:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    13ce:	3202      	adds	r2, #2
    13d0:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    13d2:	05db      	lsls	r3, r3, #23
    13d4:	0ddb      	lsrs	r3, r3, #23
    13d6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    13d8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    13da:	3b01      	subs	r3, #1
    13dc:	b29b      	uxth	r3, r3
    13de:	85eb      	strh	r3, [r5, #46]	; 0x2e
    13e0:	2b00      	cmp	r3, #0
    13e2:	d106      	bne.n	13f2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    13e4:	3301      	adds	r3, #1
    13e6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    13e8:	3301      	adds	r3, #1
    13ea:	75a3      	strb	r3, [r4, #22]
    13ec:	e001      	b.n	13f2 <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    13ee:	2301      	movs	r3, #1
    13f0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    13f2:	07b3      	lsls	r3, r6, #30
    13f4:	d509      	bpl.n	140a <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    13f6:	2302      	movs	r3, #2
    13f8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    13fa:	2200      	movs	r2, #0
    13fc:	3331      	adds	r3, #49	; 0x31
    13fe:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1400:	07fb      	lsls	r3, r7, #31
    1402:	d502      	bpl.n	140a <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1404:	0028      	movs	r0, r5
    1406:	68eb      	ldr	r3, [r5, #12]
    1408:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    140a:	0773      	lsls	r3, r6, #29
    140c:	d560      	bpl.n	14d0 <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
    140e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1410:	b29b      	uxth	r3, r3
    1412:	2b00      	cmp	r3, #0
    1414:	d05a      	beq.n	14cc <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1416:	8b63      	ldrh	r3, [r4, #26]
    1418:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    141a:	071a      	lsls	r2, r3, #28
    141c:	d402      	bmi.n	1424 <_usart_interrupt_handler+0x9c>
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    141e:	223f      	movs	r2, #63	; 0x3f
    1420:	4013      	ands	r3, r2
    1422:	e001      	b.n	1428 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1424:	2237      	movs	r2, #55	; 0x37
    1426:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1428:	2b00      	cmp	r3, #0
    142a:	d02d      	beq.n	1488 <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    142c:	079a      	lsls	r2, r3, #30
    142e:	d505      	bpl.n	143c <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1430:	221a      	movs	r2, #26
    1432:	2332      	movs	r3, #50	; 0x32
    1434:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1436:	3b30      	subs	r3, #48	; 0x30
    1438:	8363      	strh	r3, [r4, #26]
    143a:	e01f      	b.n	147c <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    143c:	075a      	lsls	r2, r3, #29
    143e:	d505      	bpl.n	144c <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1440:	221e      	movs	r2, #30
    1442:	2332      	movs	r3, #50	; 0x32
    1444:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1446:	3b2e      	subs	r3, #46	; 0x2e
    1448:	8363      	strh	r3, [r4, #26]
    144a:	e017      	b.n	147c <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    144c:	07da      	lsls	r2, r3, #31
    144e:	d505      	bpl.n	145c <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1450:	2213      	movs	r2, #19
    1452:	2332      	movs	r3, #50	; 0x32
    1454:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1456:	3b31      	subs	r3, #49	; 0x31
    1458:	8363      	strh	r3, [r4, #26]
    145a:	e00f      	b.n	147c <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    145c:	06da      	lsls	r2, r3, #27
    145e:	d505      	bpl.n	146c <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1460:	2242      	movs	r2, #66	; 0x42
    1462:	2332      	movs	r3, #50	; 0x32
    1464:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1466:	3b22      	subs	r3, #34	; 0x22
    1468:	8363      	strh	r3, [r4, #26]
    146a:	e007      	b.n	147c <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    146c:	2220      	movs	r2, #32
    146e:	421a      	tst	r2, r3
    1470:	d004      	beq.n	147c <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1472:	3221      	adds	r2, #33	; 0x21
    1474:	2332      	movs	r3, #50	; 0x32
    1476:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1478:	3b12      	subs	r3, #18
    147a:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    147c:	077b      	lsls	r3, r7, #29
    147e:	d527      	bpl.n	14d0 <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1480:	0028      	movs	r0, r5
    1482:	696b      	ldr	r3, [r5, #20]
    1484:	4798      	blx	r3
    1486:	e023      	b.n	14d0 <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1488:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    148a:	05db      	lsls	r3, r3, #23
    148c:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    148e:	b2da      	uxtb	r2, r3
    1490:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1492:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1494:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1496:	1c51      	adds	r1, r2, #1
    1498:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    149a:	7969      	ldrb	r1, [r5, #5]
    149c:	2901      	cmp	r1, #1
    149e:	d104      	bne.n	14aa <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    14a0:	0a1b      	lsrs	r3, r3, #8
    14a2:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    14a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    14a6:	3301      	adds	r3, #1
    14a8:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    14aa:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    14ac:	3b01      	subs	r3, #1
    14ae:	b29b      	uxth	r3, r3
    14b0:	85ab      	strh	r3, [r5, #44]	; 0x2c
    14b2:	2b00      	cmp	r3, #0
    14b4:	d10c      	bne.n	14d0 <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    14b6:	3304      	adds	r3, #4
    14b8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    14ba:	2200      	movs	r2, #0
    14bc:	332e      	adds	r3, #46	; 0x2e
    14be:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    14c0:	07bb      	lsls	r3, r7, #30
    14c2:	d505      	bpl.n	14d0 <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    14c4:	0028      	movs	r0, r5
    14c6:	692b      	ldr	r3, [r5, #16]
    14c8:	4798      	blx	r3
    14ca:	e001      	b.n	14d0 <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    14cc:	2304      	movs	r3, #4
    14ce:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    14d0:	06f3      	lsls	r3, r6, #27
    14d2:	d507      	bpl.n	14e4 <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    14d4:	2310      	movs	r3, #16
    14d6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    14d8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    14da:	06fb      	lsls	r3, r7, #27
    14dc:	d502      	bpl.n	14e4 <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    14de:	0028      	movs	r0, r5
    14e0:	69eb      	ldr	r3, [r5, #28]
    14e2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    14e4:	06b3      	lsls	r3, r6, #26
    14e6:	d507      	bpl.n	14f8 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    14e8:	2320      	movs	r3, #32
    14ea:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    14ec:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    14ee:	073b      	lsls	r3, r7, #28
    14f0:	d502      	bpl.n	14f8 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    14f2:	0028      	movs	r0, r5
    14f4:	69ab      	ldr	r3, [r5, #24]
    14f6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    14f8:	0733      	lsls	r3, r6, #28
    14fa:	d507      	bpl.n	150c <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    14fc:	2308      	movs	r3, #8
    14fe:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1500:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1502:	06bb      	lsls	r3, r7, #26
    1504:	d502      	bpl.n	150c <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1506:	6a2b      	ldr	r3, [r5, #32]
    1508:	0028      	movs	r0, r5
    150a:	4798      	blx	r3
		}
	}
#endif
}
    150c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    150e:	46c0      	nop			; (mov r8, r8)
    1510:	20000174 	.word	0x20000174

00001514 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1514:	4770      	bx	lr
    1516:	46c0      	nop			; (mov r8, r8)

00001518 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1518:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    151a:	4b0a      	ldr	r3, [pc, #40]	; (1544 <_sercom_set_handler+0x2c>)
    151c:	781b      	ldrb	r3, [r3, #0]
    151e:	2b00      	cmp	r3, #0
    1520:	d10c      	bne.n	153c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1522:	4f09      	ldr	r7, [pc, #36]	; (1548 <_sercom_set_handler+0x30>)
    1524:	4e09      	ldr	r6, [pc, #36]	; (154c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1526:	4d0a      	ldr	r5, [pc, #40]	; (1550 <_sercom_set_handler+0x38>)
    1528:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    152a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    152c:	195a      	adds	r2, r3, r5
    152e:	6014      	str	r4, [r2, #0]
    1530:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1532:	2b18      	cmp	r3, #24
    1534:	d1f9      	bne.n	152a <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    1536:	2201      	movs	r2, #1
    1538:	4b02      	ldr	r3, [pc, #8]	; (1544 <_sercom_set_handler+0x2c>)
    153a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    153c:	0080      	lsls	r0, r0, #2
    153e:	4b02      	ldr	r3, [pc, #8]	; (1548 <_sercom_set_handler+0x30>)
    1540:	50c1      	str	r1, [r0, r3]
}
    1542:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1544:	2000008e 	.word	0x2000008e
    1548:	20000090 	.word	0x20000090
    154c:	00001515 	.word	0x00001515
    1550:	20000174 	.word	0x20000174

00001554 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1554:	b510      	push	{r4, lr}
    1556:	b082      	sub	sp, #8
    1558:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    155a:	2206      	movs	r2, #6
    155c:	4905      	ldr	r1, [pc, #20]	; (1574 <_sercom_get_interrupt_vector+0x20>)
    155e:	4668      	mov	r0, sp
    1560:	4b05      	ldr	r3, [pc, #20]	; (1578 <_sercom_get_interrupt_vector+0x24>)
    1562:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1564:	0020      	movs	r0, r4
    1566:	4b05      	ldr	r3, [pc, #20]	; (157c <_sercom_get_interrupt_vector+0x28>)
    1568:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    156a:	466b      	mov	r3, sp
    156c:	5618      	ldrsb	r0, [r3, r0]
}
    156e:	b002      	add	sp, #8
    1570:	bd10      	pop	{r4, pc}
    1572:	46c0      	nop			; (mov r8, r8)
    1574:	00002b94 	.word	0x00002b94
    1578:	00002059 	.word	0x00002059
    157c:	00000461 	.word	0x00000461

00001580 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1580:	b510      	push	{r4, lr}
    1582:	4b02      	ldr	r3, [pc, #8]	; (158c <SERCOM0_Handler+0xc>)
    1584:	681b      	ldr	r3, [r3, #0]
    1586:	2000      	movs	r0, #0
    1588:	4798      	blx	r3
    158a:	bd10      	pop	{r4, pc}
    158c:	20000090 	.word	0x20000090

00001590 <SERCOM1_Handler>:
    1590:	b510      	push	{r4, lr}
    1592:	4b02      	ldr	r3, [pc, #8]	; (159c <SERCOM1_Handler+0xc>)
    1594:	685b      	ldr	r3, [r3, #4]
    1596:	2001      	movs	r0, #1
    1598:	4798      	blx	r3
    159a:	bd10      	pop	{r4, pc}
    159c:	20000090 	.word	0x20000090

000015a0 <SERCOM2_Handler>:
    15a0:	b510      	push	{r4, lr}
    15a2:	4b02      	ldr	r3, [pc, #8]	; (15ac <SERCOM2_Handler+0xc>)
    15a4:	689b      	ldr	r3, [r3, #8]
    15a6:	2002      	movs	r0, #2
    15a8:	4798      	blx	r3
    15aa:	bd10      	pop	{r4, pc}
    15ac:	20000090 	.word	0x20000090

000015b0 <SERCOM3_Handler>:
    15b0:	b510      	push	{r4, lr}
    15b2:	4b02      	ldr	r3, [pc, #8]	; (15bc <SERCOM3_Handler+0xc>)
    15b4:	68db      	ldr	r3, [r3, #12]
    15b6:	2003      	movs	r0, #3
    15b8:	4798      	blx	r3
    15ba:	bd10      	pop	{r4, pc}
    15bc:	20000090 	.word	0x20000090

000015c0 <SERCOM4_Handler>:
    15c0:	b510      	push	{r4, lr}
    15c2:	4b02      	ldr	r3, [pc, #8]	; (15cc <SERCOM4_Handler+0xc>)
    15c4:	691b      	ldr	r3, [r3, #16]
    15c6:	2004      	movs	r0, #4
    15c8:	4798      	blx	r3
    15ca:	bd10      	pop	{r4, pc}
    15cc:	20000090 	.word	0x20000090

000015d0 <SERCOM5_Handler>:
    15d0:	b510      	push	{r4, lr}
    15d2:	4b02      	ldr	r3, [pc, #8]	; (15dc <SERCOM5_Handler+0xc>)
    15d4:	695b      	ldr	r3, [r3, #20]
    15d6:	2005      	movs	r0, #5
    15d8:	4798      	blx	r3
    15da:	bd10      	pop	{r4, pc}
    15dc:	20000090 	.word	0x20000090

000015e0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    15e0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    15e2:	2000      	movs	r0, #0
    15e4:	4b08      	ldr	r3, [pc, #32]	; (1608 <delay_init+0x28>)
    15e6:	4798      	blx	r3
    15e8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    15ea:	4c08      	ldr	r4, [pc, #32]	; (160c <delay_init+0x2c>)
    15ec:	21fa      	movs	r1, #250	; 0xfa
    15ee:	0089      	lsls	r1, r1, #2
    15f0:	47a0      	blx	r4
    15f2:	4b07      	ldr	r3, [pc, #28]	; (1610 <delay_init+0x30>)
    15f4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    15f6:	4907      	ldr	r1, [pc, #28]	; (1614 <delay_init+0x34>)
    15f8:	0028      	movs	r0, r5
    15fa:	47a0      	blx	r4
    15fc:	4b06      	ldr	r3, [pc, #24]	; (1618 <delay_init+0x38>)
    15fe:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1600:	2205      	movs	r2, #5
    1602:	4b06      	ldr	r3, [pc, #24]	; (161c <delay_init+0x3c>)
    1604:	601a      	str	r2, [r3, #0]
}
    1606:	bd70      	pop	{r4, r5, r6, pc}
    1608:	00001a45 	.word	0x00001a45
    160c:	00001e9d 	.word	0x00001e9d
    1610:	20000004 	.word	0x20000004
    1614:	000f4240 	.word	0x000f4240
    1618:	20000000 	.word	0x20000000
    161c:	e000e010 	.word	0xe000e010

00001620 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1620:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1622:	4b08      	ldr	r3, [pc, #32]	; (1644 <delay_cycles_ms+0x24>)
    1624:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1626:	4a08      	ldr	r2, [pc, #32]	; (1648 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1628:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    162a:	2180      	movs	r1, #128	; 0x80
    162c:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
    162e:	e006      	b.n	163e <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    1630:	2c00      	cmp	r4, #0
    1632:	d004      	beq.n	163e <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
    1634:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1636:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1638:	6813      	ldr	r3, [r2, #0]
    163a:	420b      	tst	r3, r1
    163c:	d0fc      	beq.n	1638 <delay_cycles_ms+0x18>
    163e:	3801      	subs	r0, #1
    1640:	d2f6      	bcs.n	1630 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
    1642:	bd30      	pop	{r4, r5, pc}
    1644:	20000004 	.word	0x20000004
    1648:	e000e010 	.word	0xe000e010

0000164c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    164c:	4b0c      	ldr	r3, [pc, #48]	; (1680 <cpu_irq_enter_critical+0x34>)
    164e:	681b      	ldr	r3, [r3, #0]
    1650:	2b00      	cmp	r3, #0
    1652:	d110      	bne.n	1676 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1654:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1658:	2b00      	cmp	r3, #0
    165a:	d109      	bne.n	1670 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    165c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    165e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1662:	2200      	movs	r2, #0
    1664:	4b07      	ldr	r3, [pc, #28]	; (1684 <cpu_irq_enter_critical+0x38>)
    1666:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1668:	3201      	adds	r2, #1
    166a:	4b07      	ldr	r3, [pc, #28]	; (1688 <cpu_irq_enter_critical+0x3c>)
    166c:	701a      	strb	r2, [r3, #0]
    166e:	e002      	b.n	1676 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1670:	2200      	movs	r2, #0
    1672:	4b05      	ldr	r3, [pc, #20]	; (1688 <cpu_irq_enter_critical+0x3c>)
    1674:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1676:	4a02      	ldr	r2, [pc, #8]	; (1680 <cpu_irq_enter_critical+0x34>)
    1678:	6813      	ldr	r3, [r2, #0]
    167a:	3301      	adds	r3, #1
    167c:	6013      	str	r3, [r2, #0]
}
    167e:	4770      	bx	lr
    1680:	200000a8 	.word	0x200000a8
    1684:	20000008 	.word	0x20000008
    1688:	200000ac 	.word	0x200000ac

0000168c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    168c:	4b08      	ldr	r3, [pc, #32]	; (16b0 <cpu_irq_leave_critical+0x24>)
    168e:	681a      	ldr	r2, [r3, #0]
    1690:	3a01      	subs	r2, #1
    1692:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1694:	681b      	ldr	r3, [r3, #0]
    1696:	2b00      	cmp	r3, #0
    1698:	d109      	bne.n	16ae <cpu_irq_leave_critical+0x22>
    169a:	4b06      	ldr	r3, [pc, #24]	; (16b4 <cpu_irq_leave_critical+0x28>)
    169c:	781b      	ldrb	r3, [r3, #0]
    169e:	2b00      	cmp	r3, #0
    16a0:	d005      	beq.n	16ae <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    16a2:	2201      	movs	r2, #1
    16a4:	4b04      	ldr	r3, [pc, #16]	; (16b8 <cpu_irq_leave_critical+0x2c>)
    16a6:	701a      	strb	r2, [r3, #0]
    16a8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    16ac:	b662      	cpsie	i
	}
}
    16ae:	4770      	bx	lr
    16b0:	200000a8 	.word	0x200000a8
    16b4:	200000ac 	.word	0x200000ac
    16b8:	20000008 	.word	0x20000008

000016bc <system_board_init>:




void system_board_init(void)
{
    16bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16be:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    16c0:	ac01      	add	r4, sp, #4
    16c2:	2501      	movs	r5, #1
    16c4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    16c6:	2700      	movs	r7, #0
    16c8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    16ca:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    16cc:	0021      	movs	r1, r4
    16ce:	2013      	movs	r0, #19
    16d0:	4e06      	ldr	r6, [pc, #24]	; (16ec <system_board_init+0x30>)
    16d2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    16d4:	2280      	movs	r2, #128	; 0x80
    16d6:	0312      	lsls	r2, r2, #12
    16d8:	4b05      	ldr	r3, [pc, #20]	; (16f0 <system_board_init+0x34>)
    16da:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    16dc:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    16de:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    16e0:	0021      	movs	r1, r4
    16e2:	201c      	movs	r0, #28
    16e4:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
    16e6:	b003      	add	sp, #12
    16e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16ea:	46c0      	nop			; (mov r8, r8)
    16ec:	000016f5 	.word	0x000016f5
    16f0:	41004400 	.word	0x41004400

000016f4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    16f4:	b500      	push	{lr}
    16f6:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    16f8:	ab01      	add	r3, sp, #4
    16fa:	2280      	movs	r2, #128	; 0x80
    16fc:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    16fe:	780a      	ldrb	r2, [r1, #0]
    1700:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1702:	784a      	ldrb	r2, [r1, #1]
    1704:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1706:	788a      	ldrb	r2, [r1, #2]
    1708:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    170a:	0019      	movs	r1, r3
    170c:	4b01      	ldr	r3, [pc, #4]	; (1714 <port_pin_set_config+0x20>)
    170e:	4798      	blx	r3
}
    1710:	b003      	add	sp, #12
    1712:	bd00      	pop	{pc}
    1714:	00001c55 	.word	0x00001c55

00001718 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1718:	b510      	push	{r4, lr}
	switch (clock_source) {
    171a:	2808      	cmp	r0, #8
    171c:	d803      	bhi.n	1726 <system_clock_source_get_hz+0xe>
    171e:	0080      	lsls	r0, r0, #2
    1720:	4b1b      	ldr	r3, [pc, #108]	; (1790 <system_clock_source_get_hz+0x78>)
    1722:	581b      	ldr	r3, [r3, r0]
    1724:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1726:	2000      	movs	r0, #0
    1728:	e030      	b.n	178c <system_clock_source_get_hz+0x74>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    172a:	4b1a      	ldr	r3, [pc, #104]	; (1794 <system_clock_source_get_hz+0x7c>)
    172c:	6918      	ldr	r0, [r3, #16]
    172e:	e02d      	b.n	178c <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1730:	4b19      	ldr	r3, [pc, #100]	; (1798 <system_clock_source_get_hz+0x80>)
    1732:	6a1b      	ldr	r3, [r3, #32]
    1734:	059b      	lsls	r3, r3, #22
    1736:	0f9b      	lsrs	r3, r3, #30
    1738:	4818      	ldr	r0, [pc, #96]	; (179c <system_clock_source_get_hz+0x84>)
    173a:	40d8      	lsrs	r0, r3
    173c:	e026      	b.n	178c <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    173e:	4b15      	ldr	r3, [pc, #84]	; (1794 <system_clock_source_get_hz+0x7c>)
    1740:	6958      	ldr	r0, [r3, #20]
    1742:	e023      	b.n	178c <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1744:	4b13      	ldr	r3, [pc, #76]	; (1794 <system_clock_source_get_hz+0x7c>)
    1746:	681b      	ldr	r3, [r3, #0]
    1748:	2002      	movs	r0, #2
    174a:	4018      	ands	r0, r3
    174c:	d01e      	beq.n	178c <system_clock_source_get_hz+0x74>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    174e:	4912      	ldr	r1, [pc, #72]	; (1798 <system_clock_source_get_hz+0x80>)
    1750:	2210      	movs	r2, #16
    1752:	68cb      	ldr	r3, [r1, #12]
    1754:	421a      	tst	r2, r3
    1756:	d0fc      	beq.n	1752 <system_clock_source_get_hz+0x3a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1758:	4b0e      	ldr	r3, [pc, #56]	; (1794 <system_clock_source_get_hz+0x7c>)
    175a:	681b      	ldr	r3, [r3, #0]
    175c:	075b      	lsls	r3, r3, #29
    175e:	d514      	bpl.n	178a <system_clock_source_get_hz+0x72>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1760:	2000      	movs	r0, #0
    1762:	4b0f      	ldr	r3, [pc, #60]	; (17a0 <system_clock_source_get_hz+0x88>)
    1764:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1766:	4b0b      	ldr	r3, [pc, #44]	; (1794 <system_clock_source_get_hz+0x7c>)
    1768:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    176a:	041b      	lsls	r3, r3, #16
    176c:	0c1b      	lsrs	r3, r3, #16
    176e:	4358      	muls	r0, r3
    1770:	e00c      	b.n	178c <system_clock_source_get_hz+0x74>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1772:	2350      	movs	r3, #80	; 0x50
    1774:	4a08      	ldr	r2, [pc, #32]	; (1798 <system_clock_source_get_hz+0x80>)
    1776:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1778:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    177a:	075b      	lsls	r3, r3, #29
    177c:	d506      	bpl.n	178c <system_clock_source_get_hz+0x74>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    177e:	4b05      	ldr	r3, [pc, #20]	; (1794 <system_clock_source_get_hz+0x7c>)
    1780:	68d8      	ldr	r0, [r3, #12]
    1782:	e003      	b.n	178c <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1784:	2080      	movs	r0, #128	; 0x80
    1786:	0200      	lsls	r0, r0, #8
    1788:	e000      	b.n	178c <system_clock_source_get_hz+0x74>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    178a:	4806      	ldr	r0, [pc, #24]	; (17a4 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    178c:	bd10      	pop	{r4, pc}
    178e:	46c0      	nop			; (mov r8, r8)
    1790:	00002b9c 	.word	0x00002b9c
    1794:	200000b0 	.word	0x200000b0
    1798:	40000800 	.word	0x40000800
    179c:	007a1200 	.word	0x007a1200
    17a0:	00001b79 	.word	0x00001b79
    17a4:	02dc6c00 	.word	0x02dc6c00

000017a8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    17a8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    17aa:	4c0c      	ldr	r4, [pc, #48]	; (17dc <system_clock_source_osc8m_set_config+0x34>)
    17ac:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    17ae:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    17b0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    17b2:	7842      	ldrb	r2, [r0, #1]
    17b4:	2001      	movs	r0, #1
    17b6:	4002      	ands	r2, r0
    17b8:	0192      	lsls	r2, r2, #6
    17ba:	2640      	movs	r6, #64	; 0x40
    17bc:	43b3      	bics	r3, r6
    17be:	4313      	orrs	r3, r2
    17c0:	0002      	movs	r2, r0
    17c2:	402a      	ands	r2, r5
    17c4:	01d2      	lsls	r2, r2, #7
    17c6:	307f      	adds	r0, #127	; 0x7f
    17c8:	4383      	bics	r3, r0
    17ca:	4313      	orrs	r3, r2
    17cc:	2203      	movs	r2, #3
    17ce:	400a      	ands	r2, r1
    17d0:	0212      	lsls	r2, r2, #8
    17d2:	4903      	ldr	r1, [pc, #12]	; (17e0 <system_clock_source_osc8m_set_config+0x38>)
    17d4:	400b      	ands	r3, r1
    17d6:	4313      	orrs	r3, r2
    17d8:	6223      	str	r3, [r4, #32]
}
    17da:	bd70      	pop	{r4, r5, r6, pc}
    17dc:	40000800 	.word	0x40000800
    17e0:	fffffcff 	.word	0xfffffcff

000017e4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    17e4:	2808      	cmp	r0, #8
    17e6:	d803      	bhi.n	17f0 <system_clock_source_enable+0xc>
    17e8:	0080      	lsls	r0, r0, #2
    17ea:	4b25      	ldr	r3, [pc, #148]	; (1880 <system_clock_source_enable+0x9c>)
    17ec:	581b      	ldr	r3, [r3, r0]
    17ee:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    17f0:	2017      	movs	r0, #23
    17f2:	e044      	b.n	187e <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    17f4:	4a23      	ldr	r2, [pc, #140]	; (1884 <system_clock_source_enable+0xa0>)
    17f6:	6a11      	ldr	r1, [r2, #32]
    17f8:	2302      	movs	r3, #2
    17fa:	430b      	orrs	r3, r1
    17fc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    17fe:	2000      	movs	r0, #0
    1800:	e03d      	b.n	187e <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1802:	4a20      	ldr	r2, [pc, #128]	; (1884 <system_clock_source_enable+0xa0>)
    1804:	6991      	ldr	r1, [r2, #24]
    1806:	2302      	movs	r3, #2
    1808:	430b      	orrs	r3, r1
    180a:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    180c:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    180e:	e036      	b.n	187e <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1810:	4a1c      	ldr	r2, [pc, #112]	; (1884 <system_clock_source_enable+0xa0>)
    1812:	8a11      	ldrh	r1, [r2, #16]
    1814:	2302      	movs	r3, #2
    1816:	430b      	orrs	r3, r1
    1818:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    181a:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    181c:	e02f      	b.n	187e <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    181e:	4a19      	ldr	r2, [pc, #100]	; (1884 <system_clock_source_enable+0xa0>)
    1820:	8a91      	ldrh	r1, [r2, #20]
    1822:	2302      	movs	r3, #2
    1824:	430b      	orrs	r3, r1
    1826:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1828:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    182a:	e028      	b.n	187e <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    182c:	4916      	ldr	r1, [pc, #88]	; (1888 <system_clock_source_enable+0xa4>)
    182e:	680b      	ldr	r3, [r1, #0]
    1830:	2202      	movs	r2, #2
    1832:	4313      	orrs	r3, r2
    1834:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1836:	4b13      	ldr	r3, [pc, #76]	; (1884 <system_clock_source_enable+0xa0>)
    1838:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    183a:	0019      	movs	r1, r3
    183c:	320e      	adds	r2, #14
    183e:	68cb      	ldr	r3, [r1, #12]
    1840:	421a      	tst	r2, r3
    1842:	d0fc      	beq.n	183e <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1844:	4a10      	ldr	r2, [pc, #64]	; (1888 <system_clock_source_enable+0xa4>)
    1846:	6891      	ldr	r1, [r2, #8]
    1848:	4b0e      	ldr	r3, [pc, #56]	; (1884 <system_clock_source_enable+0xa0>)
    184a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    184c:	6852      	ldr	r2, [r2, #4]
    184e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1850:	2200      	movs	r2, #0
    1852:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1854:	0019      	movs	r1, r3
    1856:	3210      	adds	r2, #16
    1858:	68cb      	ldr	r3, [r1, #12]
    185a:	421a      	tst	r2, r3
    185c:	d0fc      	beq.n	1858 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    185e:	4b0a      	ldr	r3, [pc, #40]	; (1888 <system_clock_source_enable+0xa4>)
    1860:	681b      	ldr	r3, [r3, #0]
    1862:	b29b      	uxth	r3, r3
    1864:	4a07      	ldr	r2, [pc, #28]	; (1884 <system_clock_source_enable+0xa0>)
    1866:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1868:	2000      	movs	r0, #0
    186a:	e008      	b.n	187e <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    186c:	4905      	ldr	r1, [pc, #20]	; (1884 <system_clock_source_enable+0xa0>)
    186e:	2244      	movs	r2, #68	; 0x44
    1870:	5c88      	ldrb	r0, [r1, r2]
    1872:	2302      	movs	r3, #2
    1874:	4303      	orrs	r3, r0
    1876:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1878:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    187a:	e000      	b.n	187e <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    187c:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    187e:	4770      	bx	lr
    1880:	00002bc0 	.word	0x00002bc0
    1884:	40000800 	.word	0x40000800
    1888:	200000b0 	.word	0x200000b0

0000188c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    188c:	b530      	push	{r4, r5, lr}
    188e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1890:	22c2      	movs	r2, #194	; 0xc2
    1892:	00d2      	lsls	r2, r2, #3
    1894:	4b1a      	ldr	r3, [pc, #104]	; (1900 <system_clock_init+0x74>)
    1896:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1898:	4a1a      	ldr	r2, [pc, #104]	; (1904 <system_clock_init+0x78>)
    189a:	6853      	ldr	r3, [r2, #4]
    189c:	211e      	movs	r1, #30
    189e:	438b      	bics	r3, r1
    18a0:	6053      	str	r3, [r2, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    18a2:	2301      	movs	r3, #1
    18a4:	466a      	mov	r2, sp
    18a6:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    18a8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    18aa:	4d17      	ldr	r5, [pc, #92]	; (1908 <system_clock_init+0x7c>)
    18ac:	b2e0      	uxtb	r0, r4
    18ae:	4669      	mov	r1, sp
    18b0:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    18b2:	3401      	adds	r4, #1
    18b4:	2c25      	cmp	r4, #37	; 0x25
    18b6:	d1f9      	bne.n	18ac <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    18b8:	a803      	add	r0, sp, #12
    18ba:	2400      	movs	r4, #0
    18bc:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    18be:	2501      	movs	r5, #1
    18c0:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    18c2:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    18c4:	4b11      	ldr	r3, [pc, #68]	; (190c <system_clock_init+0x80>)
    18c6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    18c8:	2006      	movs	r0, #6
    18ca:	4b11      	ldr	r3, [pc, #68]	; (1910 <system_clock_init+0x84>)
    18cc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    18ce:	4b11      	ldr	r3, [pc, #68]	; (1914 <system_clock_init+0x88>)
    18d0:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    18d2:	4b11      	ldr	r3, [pc, #68]	; (1918 <system_clock_init+0x8c>)
    18d4:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    18d6:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    18d8:	729c      	strb	r4, [r3, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    18da:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    18dc:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    18de:	466b      	mov	r3, sp
    18e0:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    18e2:	2306      	movs	r3, #6
    18e4:	466a      	mov	r2, sp
    18e6:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    18e8:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    18ea:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    18ec:	4669      	mov	r1, sp
    18ee:	2000      	movs	r0, #0
    18f0:	4b0a      	ldr	r3, [pc, #40]	; (191c <system_clock_init+0x90>)
    18f2:	4798      	blx	r3
    18f4:	2000      	movs	r0, #0
    18f6:	4b0a      	ldr	r3, [pc, #40]	; (1920 <system_clock_init+0x94>)
    18f8:	4798      	blx	r3
#endif
}
    18fa:	b005      	add	sp, #20
    18fc:	bd30      	pop	{r4, r5, pc}
    18fe:	46c0      	nop			; (mov r8, r8)
    1900:	40000800 	.word	0x40000800
    1904:	41004000 	.word	0x41004000
    1908:	00001b5d 	.word	0x00001b5d
    190c:	000017a9 	.word	0x000017a9
    1910:	000017e5 	.word	0x000017e5
    1914:	00001925 	.word	0x00001925
    1918:	40000400 	.word	0x40000400
    191c:	00001949 	.word	0x00001949
    1920:	00001a01 	.word	0x00001a01

00001924 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1924:	4a06      	ldr	r2, [pc, #24]	; (1940 <system_gclk_init+0x1c>)
    1926:	6991      	ldr	r1, [r2, #24]
    1928:	2308      	movs	r3, #8
    192a:	430b      	orrs	r3, r1
    192c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    192e:	2201      	movs	r2, #1
    1930:	4b04      	ldr	r3, [pc, #16]	; (1944 <system_gclk_init+0x20>)
    1932:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1934:	0019      	movs	r1, r3
    1936:	780b      	ldrb	r3, [r1, #0]
    1938:	4213      	tst	r3, r2
    193a:	d1fc      	bne.n	1936 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    193c:	4770      	bx	lr
    193e:	46c0      	nop			; (mov r8, r8)
    1940:	40000400 	.word	0x40000400
    1944:	40000c00 	.word	0x40000c00

00001948 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1948:	b570      	push	{r4, r5, r6, lr}
    194a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    194c:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    194e:	780c      	ldrb	r4, [r1, #0]
    1950:	0224      	lsls	r4, r4, #8
    1952:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1954:	784b      	ldrb	r3, [r1, #1]
    1956:	2b00      	cmp	r3, #0
    1958:	d002      	beq.n	1960 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    195a:	2380      	movs	r3, #128	; 0x80
    195c:	02db      	lsls	r3, r3, #11
    195e:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1960:	7a4b      	ldrb	r3, [r1, #9]
    1962:	2b00      	cmp	r3, #0
    1964:	d002      	beq.n	196c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1966:	2380      	movs	r3, #128	; 0x80
    1968:	031b      	lsls	r3, r3, #12
    196a:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    196c:	6848      	ldr	r0, [r1, #4]
    196e:	2801      	cmp	r0, #1
    1970:	d918      	bls.n	19a4 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1972:	1e43      	subs	r3, r0, #1
    1974:	4218      	tst	r0, r3
    1976:	d110      	bne.n	199a <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1978:	2802      	cmp	r0, #2
    197a:	d906      	bls.n	198a <system_gclk_gen_set_config+0x42>
    197c:	2302      	movs	r3, #2
    197e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1980:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1982:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1984:	4298      	cmp	r0, r3
    1986:	d8fb      	bhi.n	1980 <system_gclk_gen_set_config+0x38>
    1988:	e000      	b.n	198c <system_gclk_gen_set_config+0x44>
    198a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    198c:	0212      	lsls	r2, r2, #8
    198e:	4332      	orrs	r2, r6
    1990:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1992:	2380      	movs	r3, #128	; 0x80
    1994:	035b      	lsls	r3, r3, #13
    1996:	431c      	orrs	r4, r3
    1998:	e004      	b.n	19a4 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    199a:	0205      	lsls	r5, r0, #8
    199c:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    199e:	2380      	movs	r3, #128	; 0x80
    19a0:	029b      	lsls	r3, r3, #10
    19a2:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    19a4:	7a0b      	ldrb	r3, [r1, #8]
    19a6:	2b00      	cmp	r3, #0
    19a8:	d002      	beq.n	19b0 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    19aa:	2380      	movs	r3, #128	; 0x80
    19ac:	039b      	lsls	r3, r3, #14
    19ae:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19b0:	4a0f      	ldr	r2, [pc, #60]	; (19f0 <system_gclk_gen_set_config+0xa8>)
    19b2:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    19b4:	b25b      	sxtb	r3, r3
    19b6:	2b00      	cmp	r3, #0
    19b8:	dbfb      	blt.n	19b2 <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    19ba:	4b0e      	ldr	r3, [pc, #56]	; (19f4 <system_gclk_gen_set_config+0xac>)
    19bc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    19be:	4b0e      	ldr	r3, [pc, #56]	; (19f8 <system_gclk_gen_set_config+0xb0>)
    19c0:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19c2:	4a0b      	ldr	r2, [pc, #44]	; (19f0 <system_gclk_gen_set_config+0xa8>)
    19c4:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    19c6:	b25b      	sxtb	r3, r3
    19c8:	2b00      	cmp	r3, #0
    19ca:	dbfb      	blt.n	19c4 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    19cc:	4b08      	ldr	r3, [pc, #32]	; (19f0 <system_gclk_gen_set_config+0xa8>)
    19ce:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19d0:	001a      	movs	r2, r3
    19d2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    19d4:	b25b      	sxtb	r3, r3
    19d6:	2b00      	cmp	r3, #0
    19d8:	dbfb      	blt.n	19d2 <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    19da:	4a05      	ldr	r2, [pc, #20]	; (19f0 <system_gclk_gen_set_config+0xa8>)
    19dc:	6851      	ldr	r1, [r2, #4]
    19de:	2380      	movs	r3, #128	; 0x80
    19e0:	025b      	lsls	r3, r3, #9
    19e2:	400b      	ands	r3, r1
    19e4:	431c      	orrs	r4, r3
    19e6:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    19e8:	4b04      	ldr	r3, [pc, #16]	; (19fc <system_gclk_gen_set_config+0xb4>)
    19ea:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    19ec:	bd70      	pop	{r4, r5, r6, pc}
    19ee:	46c0      	nop			; (mov r8, r8)
    19f0:	40000c00 	.word	0x40000c00
    19f4:	0000164d 	.word	0x0000164d
    19f8:	40000c08 	.word	0x40000c08
    19fc:	0000168d 	.word	0x0000168d

00001a00 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1a00:	b510      	push	{r4, lr}
    1a02:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a04:	4a0b      	ldr	r2, [pc, #44]	; (1a34 <system_gclk_gen_enable+0x34>)
    1a06:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1a08:	b25b      	sxtb	r3, r3
    1a0a:	2b00      	cmp	r3, #0
    1a0c:	dbfb      	blt.n	1a06 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1a0e:	4b0a      	ldr	r3, [pc, #40]	; (1a38 <system_gclk_gen_enable+0x38>)
    1a10:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1a12:	4b0a      	ldr	r3, [pc, #40]	; (1a3c <system_gclk_gen_enable+0x3c>)
    1a14:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a16:	4a07      	ldr	r2, [pc, #28]	; (1a34 <system_gclk_gen_enable+0x34>)
    1a18:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1a1a:	b25b      	sxtb	r3, r3
    1a1c:	2b00      	cmp	r3, #0
    1a1e:	dbfb      	blt.n	1a18 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1a20:	4a04      	ldr	r2, [pc, #16]	; (1a34 <system_gclk_gen_enable+0x34>)
    1a22:	6853      	ldr	r3, [r2, #4]
    1a24:	2180      	movs	r1, #128	; 0x80
    1a26:	0249      	lsls	r1, r1, #9
    1a28:	430b      	orrs	r3, r1
    1a2a:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1a2c:	4b04      	ldr	r3, [pc, #16]	; (1a40 <system_gclk_gen_enable+0x40>)
    1a2e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a30:	bd10      	pop	{r4, pc}
    1a32:	46c0      	nop			; (mov r8, r8)
    1a34:	40000c00 	.word	0x40000c00
    1a38:	0000164d 	.word	0x0000164d
    1a3c:	40000c04 	.word	0x40000c04
    1a40:	0000168d 	.word	0x0000168d

00001a44 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1a44:	b570      	push	{r4, r5, r6, lr}
    1a46:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a48:	4a1a      	ldr	r2, [pc, #104]	; (1ab4 <system_gclk_gen_get_hz+0x70>)
    1a4a:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1a4c:	b25b      	sxtb	r3, r3
    1a4e:	2b00      	cmp	r3, #0
    1a50:	dbfb      	blt.n	1a4a <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1a52:	4b19      	ldr	r3, [pc, #100]	; (1ab8 <system_gclk_gen_get_hz+0x74>)
    1a54:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1a56:	4b19      	ldr	r3, [pc, #100]	; (1abc <system_gclk_gen_get_hz+0x78>)
    1a58:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a5a:	4a16      	ldr	r2, [pc, #88]	; (1ab4 <system_gclk_gen_get_hz+0x70>)
    1a5c:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1a5e:	b25b      	sxtb	r3, r3
    1a60:	2b00      	cmp	r3, #0
    1a62:	dbfb      	blt.n	1a5c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1a64:	4e13      	ldr	r6, [pc, #76]	; (1ab4 <system_gclk_gen_get_hz+0x70>)
    1a66:	6870      	ldr	r0, [r6, #4]
    1a68:	04c0      	lsls	r0, r0, #19
    1a6a:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1a6c:	4b14      	ldr	r3, [pc, #80]	; (1ac0 <system_gclk_gen_get_hz+0x7c>)
    1a6e:	4798      	blx	r3
    1a70:	0005      	movs	r5, r0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1a72:	4b12      	ldr	r3, [pc, #72]	; (1abc <system_gclk_gen_get_hz+0x78>)
    1a74:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1a76:	6876      	ldr	r6, [r6, #4]
    1a78:	02f6      	lsls	r6, r6, #11
    1a7a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1a7c:	4b11      	ldr	r3, [pc, #68]	; (1ac4 <system_gclk_gen_get_hz+0x80>)
    1a7e:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a80:	4a0c      	ldr	r2, [pc, #48]	; (1ab4 <system_gclk_gen_get_hz+0x70>)
    1a82:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    1a84:	b25b      	sxtb	r3, r3
    1a86:	2b00      	cmp	r3, #0
    1a88:	dbfb      	blt.n	1a82 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1a8a:	4b0a      	ldr	r3, [pc, #40]	; (1ab4 <system_gclk_gen_get_hz+0x70>)
    1a8c:	689c      	ldr	r4, [r3, #8]
    1a8e:	0224      	lsls	r4, r4, #8
    1a90:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1a92:	4b0d      	ldr	r3, [pc, #52]	; (1ac8 <system_gclk_gen_get_hz+0x84>)
    1a94:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1a96:	2e00      	cmp	r6, #0
    1a98:	d107      	bne.n	1aaa <system_gclk_gen_get_hz+0x66>
    1a9a:	2c01      	cmp	r4, #1
    1a9c:	d907      	bls.n	1aae <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1a9e:	0021      	movs	r1, r4
    1aa0:	0028      	movs	r0, r5
    1aa2:	4b0a      	ldr	r3, [pc, #40]	; (1acc <system_gclk_gen_get_hz+0x88>)
    1aa4:	4798      	blx	r3
    1aa6:	0005      	movs	r5, r0
    1aa8:	e001      	b.n	1aae <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1aaa:	3401      	adds	r4, #1
    1aac:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1aae:	0028      	movs	r0, r5
    1ab0:	bd70      	pop	{r4, r5, r6, pc}
    1ab2:	46c0      	nop			; (mov r8, r8)
    1ab4:	40000c00 	.word	0x40000c00
    1ab8:	0000164d 	.word	0x0000164d
    1abc:	40000c04 	.word	0x40000c04
    1ac0:	00001719 	.word	0x00001719
    1ac4:	40000c08 	.word	0x40000c08
    1ac8:	0000168d 	.word	0x0000168d
    1acc:	00001e9d 	.word	0x00001e9d

00001ad0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1ad0:	b510      	push	{r4, lr}
    1ad2:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1ad4:	4b06      	ldr	r3, [pc, #24]	; (1af0 <system_gclk_chan_enable+0x20>)
    1ad6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1ad8:	4b06      	ldr	r3, [pc, #24]	; (1af4 <system_gclk_chan_enable+0x24>)
    1ada:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1adc:	4a06      	ldr	r2, [pc, #24]	; (1af8 <system_gclk_chan_enable+0x28>)
    1ade:	8851      	ldrh	r1, [r2, #2]
    1ae0:	2380      	movs	r3, #128	; 0x80
    1ae2:	01db      	lsls	r3, r3, #7
    1ae4:	430b      	orrs	r3, r1
    1ae6:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1ae8:	4b04      	ldr	r3, [pc, #16]	; (1afc <system_gclk_chan_enable+0x2c>)
    1aea:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1aec:	bd10      	pop	{r4, pc}
    1aee:	46c0      	nop			; (mov r8, r8)
    1af0:	0000164d 	.word	0x0000164d
    1af4:	40000c02 	.word	0x40000c02
    1af8:	40000c00 	.word	0x40000c00
    1afc:	0000168d 	.word	0x0000168d

00001b00 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1b00:	b510      	push	{r4, lr}
    1b02:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1b04:	4b0f      	ldr	r3, [pc, #60]	; (1b44 <system_gclk_chan_disable+0x44>)
    1b06:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1b08:	4b0f      	ldr	r3, [pc, #60]	; (1b48 <system_gclk_chan_disable+0x48>)
    1b0a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1b0c:	4b0f      	ldr	r3, [pc, #60]	; (1b4c <system_gclk_chan_disable+0x4c>)
    1b0e:	885a      	ldrh	r2, [r3, #2]
    1b10:	0512      	lsls	r2, r2, #20
    1b12:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1b14:	8859      	ldrh	r1, [r3, #2]
    1b16:	4a0e      	ldr	r2, [pc, #56]	; (1b50 <system_gclk_chan_disable+0x50>)
    1b18:	400a      	ands	r2, r1
    1b1a:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1b1c:	8859      	ldrh	r1, [r3, #2]
    1b1e:	4a0d      	ldr	r2, [pc, #52]	; (1b54 <system_gclk_chan_disable+0x54>)
    1b20:	400a      	ands	r2, r1
    1b22:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1b24:	0019      	movs	r1, r3
    1b26:	2280      	movs	r2, #128	; 0x80
    1b28:	01d2      	lsls	r2, r2, #7
    1b2a:	884b      	ldrh	r3, [r1, #2]
    1b2c:	4213      	tst	r3, r2
    1b2e:	d1fc      	bne.n	1b2a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1b30:	4906      	ldr	r1, [pc, #24]	; (1b4c <system_gclk_chan_disable+0x4c>)
    1b32:	884c      	ldrh	r4, [r1, #2]
    1b34:	0202      	lsls	r2, r0, #8
    1b36:	4b06      	ldr	r3, [pc, #24]	; (1b50 <system_gclk_chan_disable+0x50>)
    1b38:	4023      	ands	r3, r4
    1b3a:	4313      	orrs	r3, r2
    1b3c:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1b3e:	4b06      	ldr	r3, [pc, #24]	; (1b58 <system_gclk_chan_disable+0x58>)
    1b40:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b42:	bd10      	pop	{r4, pc}
    1b44:	0000164d 	.word	0x0000164d
    1b48:	40000c02 	.word	0x40000c02
    1b4c:	40000c00 	.word	0x40000c00
    1b50:	fffff0ff 	.word	0xfffff0ff
    1b54:	ffffbfff 	.word	0xffffbfff
    1b58:	0000168d 	.word	0x0000168d

00001b5c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1b5c:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1b5e:	780c      	ldrb	r4, [r1, #0]
    1b60:	0224      	lsls	r4, r4, #8
    1b62:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1b64:	4b02      	ldr	r3, [pc, #8]	; (1b70 <system_gclk_chan_set_config+0x14>)
    1b66:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1b68:	b2a4      	uxth	r4, r4
    1b6a:	4b02      	ldr	r3, [pc, #8]	; (1b74 <system_gclk_chan_set_config+0x18>)
    1b6c:	805c      	strh	r4, [r3, #2]
}
    1b6e:	bd10      	pop	{r4, pc}
    1b70:	00001b01 	.word	0x00001b01
    1b74:	40000c00 	.word	0x40000c00

00001b78 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1b78:	b510      	push	{r4, lr}
    1b7a:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1b7c:	4b06      	ldr	r3, [pc, #24]	; (1b98 <system_gclk_chan_get_hz+0x20>)
    1b7e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1b80:	4b06      	ldr	r3, [pc, #24]	; (1b9c <system_gclk_chan_get_hz+0x24>)
    1b82:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1b84:	4b06      	ldr	r3, [pc, #24]	; (1ba0 <system_gclk_chan_get_hz+0x28>)
    1b86:	885c      	ldrh	r4, [r3, #2]
    1b88:	0524      	lsls	r4, r4, #20
    1b8a:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1b8c:	4b05      	ldr	r3, [pc, #20]	; (1ba4 <system_gclk_chan_get_hz+0x2c>)
    1b8e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1b90:	0020      	movs	r0, r4
    1b92:	4b05      	ldr	r3, [pc, #20]	; (1ba8 <system_gclk_chan_get_hz+0x30>)
    1b94:	4798      	blx	r3
}
    1b96:	bd10      	pop	{r4, pc}
    1b98:	0000164d 	.word	0x0000164d
    1b9c:	40000c02 	.word	0x40000c02
    1ba0:	40000c00 	.word	0x40000c00
    1ba4:	0000168d 	.word	0x0000168d
    1ba8:	00001a45 	.word	0x00001a45

00001bac <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1bac:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1bae:	78d3      	ldrb	r3, [r2, #3]
    1bb0:	2b00      	cmp	r3, #0
    1bb2:	d11e      	bne.n	1bf2 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1bb4:	7813      	ldrb	r3, [r2, #0]
    1bb6:	2b80      	cmp	r3, #128	; 0x80
    1bb8:	d004      	beq.n	1bc4 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1bba:	061b      	lsls	r3, r3, #24
    1bbc:	2480      	movs	r4, #128	; 0x80
    1bbe:	0264      	lsls	r4, r4, #9
    1bc0:	4323      	orrs	r3, r4
    1bc2:	e000      	b.n	1bc6 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1bc4:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1bc6:	7854      	ldrb	r4, [r2, #1]
    1bc8:	2502      	movs	r5, #2
    1bca:	43ac      	bics	r4, r5
    1bcc:	d10a      	bne.n	1be4 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1bce:	7894      	ldrb	r4, [r2, #2]
    1bd0:	2c00      	cmp	r4, #0
    1bd2:	d103      	bne.n	1bdc <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1bd4:	2480      	movs	r4, #128	; 0x80
    1bd6:	02a4      	lsls	r4, r4, #10
    1bd8:	4323      	orrs	r3, r4
    1bda:	e002      	b.n	1be2 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1bdc:	24c0      	movs	r4, #192	; 0xc0
    1bde:	02e4      	lsls	r4, r4, #11
    1be0:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1be2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1be4:	7854      	ldrb	r4, [r2, #1]
    1be6:	3c01      	subs	r4, #1
    1be8:	2c01      	cmp	r4, #1
    1bea:	d812      	bhi.n	1c12 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1bec:	4c18      	ldr	r4, [pc, #96]	; (1c50 <_system_pinmux_config+0xa4>)
    1bee:	4023      	ands	r3, r4
    1bf0:	e00f      	b.n	1c12 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1bf2:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1bf4:	040b      	lsls	r3, r1, #16
    1bf6:	0c1b      	lsrs	r3, r3, #16
    1bf8:	24a0      	movs	r4, #160	; 0xa0
    1bfa:	05e4      	lsls	r4, r4, #23
    1bfc:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1bfe:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1c00:	0c0b      	lsrs	r3, r1, #16
    1c02:	24d0      	movs	r4, #208	; 0xd0
    1c04:	0624      	lsls	r4, r4, #24
    1c06:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1c08:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1c0a:	78d3      	ldrb	r3, [r2, #3]
    1c0c:	2b00      	cmp	r3, #0
    1c0e:	d018      	beq.n	1c42 <_system_pinmux_config+0x96>
    1c10:	e01c      	b.n	1c4c <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1c12:	040c      	lsls	r4, r1, #16
    1c14:	0c24      	lsrs	r4, r4, #16
    1c16:	25a0      	movs	r5, #160	; 0xa0
    1c18:	05ed      	lsls	r5, r5, #23
    1c1a:	432c      	orrs	r4, r5
    1c1c:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1c1e:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1c20:	0c0c      	lsrs	r4, r1, #16
    1c22:	25d0      	movs	r5, #208	; 0xd0
    1c24:	062d      	lsls	r5, r5, #24
    1c26:	432c      	orrs	r4, r5
    1c28:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1c2a:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1c2c:	78d4      	ldrb	r4, [r2, #3]
    1c2e:	2c00      	cmp	r4, #0
    1c30:	d10c      	bne.n	1c4c <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1c32:	035b      	lsls	r3, r3, #13
    1c34:	d505      	bpl.n	1c42 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1c36:	7893      	ldrb	r3, [r2, #2]
    1c38:	2b01      	cmp	r3, #1
    1c3a:	d101      	bne.n	1c40 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    1c3c:	6181      	str	r1, [r0, #24]
    1c3e:	e000      	b.n	1c42 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    1c40:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1c42:	7853      	ldrb	r3, [r2, #1]
    1c44:	3b01      	subs	r3, #1
    1c46:	2b01      	cmp	r3, #1
    1c48:	d800      	bhi.n	1c4c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1c4a:	6081      	str	r1, [r0, #8]
		}
	}
}
    1c4c:	bd30      	pop	{r4, r5, pc}
    1c4e:	46c0      	nop			; (mov r8, r8)
    1c50:	fffbffff 	.word	0xfffbffff

00001c54 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1c54:	b510      	push	{r4, lr}
    1c56:	0003      	movs	r3, r0
    1c58:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1c5a:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1c5c:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1c5e:	2900      	cmp	r1, #0
    1c60:	d104      	bne.n	1c6c <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    1c62:	0958      	lsrs	r0, r3, #5
    1c64:	01c0      	lsls	r0, r0, #7
    1c66:	4905      	ldr	r1, [pc, #20]	; (1c7c <system_pinmux_pin_set_config+0x28>)
    1c68:	468c      	mov	ip, r1
    1c6a:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    1c6c:	211f      	movs	r1, #31
    1c6e:	400b      	ands	r3, r1
    1c70:	391e      	subs	r1, #30
    1c72:	4099      	lsls	r1, r3
    1c74:	4b02      	ldr	r3, [pc, #8]	; (1c80 <system_pinmux_pin_set_config+0x2c>)
    1c76:	4798      	blx	r3
}
    1c78:	bd10      	pop	{r4, pc}
    1c7a:	46c0      	nop			; (mov r8, r8)
    1c7c:	41004400 	.word	0x41004400
    1c80:	00001bad 	.word	0x00001bad

00001c84 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1c84:	4770      	bx	lr
    1c86:	46c0      	nop			; (mov r8, r8)

00001c88 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1c88:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1c8a:	4b05      	ldr	r3, [pc, #20]	; (1ca0 <system_init+0x18>)
    1c8c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1c8e:	4b05      	ldr	r3, [pc, #20]	; (1ca4 <system_init+0x1c>)
    1c90:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1c92:	4b05      	ldr	r3, [pc, #20]	; (1ca8 <system_init+0x20>)
    1c94:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1c96:	4b05      	ldr	r3, [pc, #20]	; (1cac <system_init+0x24>)
    1c98:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1c9a:	4b05      	ldr	r3, [pc, #20]	; (1cb0 <system_init+0x28>)
    1c9c:	4798      	blx	r3
}
    1c9e:	bd10      	pop	{r4, pc}
    1ca0:	0000188d 	.word	0x0000188d
    1ca4:	000016bd 	.word	0x000016bd
    1ca8:	00001c85 	.word	0x00001c85
    1cac:	00001c85 	.word	0x00001c85
    1cb0:	00001c85 	.word	0x00001c85

00001cb4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1cb4:	e7fe      	b.n	1cb4 <Dummy_Handler>
    1cb6:	46c0      	nop			; (mov r8, r8)

00001cb8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1cb8:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1cba:	4b2e      	ldr	r3, [pc, #184]	; (1d74 <Reset_Handler+0xbc>)
    1cbc:	4a2e      	ldr	r2, [pc, #184]	; (1d78 <Reset_Handler+0xc0>)
    1cbe:	429a      	cmp	r2, r3
    1cc0:	d003      	beq.n	1cca <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1cc2:	4b2e      	ldr	r3, [pc, #184]	; (1d7c <Reset_Handler+0xc4>)
    1cc4:	4a2b      	ldr	r2, [pc, #172]	; (1d74 <Reset_Handler+0xbc>)
    1cc6:	429a      	cmp	r2, r3
    1cc8:	d304      	bcc.n	1cd4 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1cca:	4b2d      	ldr	r3, [pc, #180]	; (1d80 <Reset_Handler+0xc8>)
    1ccc:	4a2d      	ldr	r2, [pc, #180]	; (1d84 <Reset_Handler+0xcc>)
    1cce:	429a      	cmp	r2, r3
    1cd0:	d310      	bcc.n	1cf4 <Reset_Handler+0x3c>
    1cd2:	e01e      	b.n	1d12 <Reset_Handler+0x5a>
    1cd4:	4a2c      	ldr	r2, [pc, #176]	; (1d88 <Reset_Handler+0xd0>)
    1cd6:	4b29      	ldr	r3, [pc, #164]	; (1d7c <Reset_Handler+0xc4>)
    1cd8:	3303      	adds	r3, #3
    1cda:	1a9b      	subs	r3, r3, r2
    1cdc:	089b      	lsrs	r3, r3, #2
    1cde:	3301      	adds	r3, #1
    1ce0:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1ce2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1ce4:	4823      	ldr	r0, [pc, #140]	; (1d74 <Reset_Handler+0xbc>)
    1ce6:	4924      	ldr	r1, [pc, #144]	; (1d78 <Reset_Handler+0xc0>)
    1ce8:	588c      	ldr	r4, [r1, r2]
    1cea:	5084      	str	r4, [r0, r2]
    1cec:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1cee:	429a      	cmp	r2, r3
    1cf0:	d1fa      	bne.n	1ce8 <Reset_Handler+0x30>
    1cf2:	e7ea      	b.n	1cca <Reset_Handler+0x12>
    1cf4:	4a25      	ldr	r2, [pc, #148]	; (1d8c <Reset_Handler+0xd4>)
    1cf6:	4b22      	ldr	r3, [pc, #136]	; (1d80 <Reset_Handler+0xc8>)
    1cf8:	3303      	adds	r3, #3
    1cfa:	1a9b      	subs	r3, r3, r2
    1cfc:	089b      	lsrs	r3, r3, #2
    1cfe:	3301      	adds	r3, #1
    1d00:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1d02:	2200      	movs	r2, #0
                *pDest++ = 0;
    1d04:	481f      	ldr	r0, [pc, #124]	; (1d84 <Reset_Handler+0xcc>)
    1d06:	2100      	movs	r1, #0
    1d08:	1814      	adds	r4, r2, r0
    1d0a:	6021      	str	r1, [r4, #0]
    1d0c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1d0e:	429a      	cmp	r2, r3
    1d10:	d1fa      	bne.n	1d08 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1d12:	4a1f      	ldr	r2, [pc, #124]	; (1d90 <Reset_Handler+0xd8>)
    1d14:	21ff      	movs	r1, #255	; 0xff
    1d16:	4b1f      	ldr	r3, [pc, #124]	; (1d94 <Reset_Handler+0xdc>)
    1d18:	438b      	bics	r3, r1
    1d1a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1d1c:	39fd      	subs	r1, #253	; 0xfd
    1d1e:	2390      	movs	r3, #144	; 0x90
    1d20:	005b      	lsls	r3, r3, #1
    1d22:	4a1d      	ldr	r2, [pc, #116]	; (1d98 <Reset_Handler+0xe0>)
    1d24:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1d26:	481d      	ldr	r0, [pc, #116]	; (1d9c <Reset_Handler+0xe4>)
    1d28:	78c3      	ldrb	r3, [r0, #3]
    1d2a:	2403      	movs	r4, #3
    1d2c:	43a3      	bics	r3, r4
    1d2e:	2202      	movs	r2, #2
    1d30:	4313      	orrs	r3, r2
    1d32:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1d34:	78c3      	ldrb	r3, [r0, #3]
    1d36:	260c      	movs	r6, #12
    1d38:	43b3      	bics	r3, r6
    1d3a:	2108      	movs	r1, #8
    1d3c:	430b      	orrs	r3, r1
    1d3e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    1d40:	4b17      	ldr	r3, [pc, #92]	; (1da0 <Reset_Handler+0xe8>)
    1d42:	7b98      	ldrb	r0, [r3, #14]
    1d44:	2530      	movs	r5, #48	; 0x30
    1d46:	43a8      	bics	r0, r5
    1d48:	0005      	movs	r5, r0
    1d4a:	2020      	movs	r0, #32
    1d4c:	4328      	orrs	r0, r5
    1d4e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1d50:	7b98      	ldrb	r0, [r3, #14]
    1d52:	43b0      	bics	r0, r6
    1d54:	4301      	orrs	r1, r0
    1d56:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1d58:	7b99      	ldrb	r1, [r3, #14]
    1d5a:	43a1      	bics	r1, r4
    1d5c:	430a      	orrs	r2, r1
    1d5e:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1d60:	4a10      	ldr	r2, [pc, #64]	; (1da4 <Reset_Handler+0xec>)
    1d62:	6851      	ldr	r1, [r2, #4]
    1d64:	2380      	movs	r3, #128	; 0x80
    1d66:	430b      	orrs	r3, r1
    1d68:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    1d6a:	4b0f      	ldr	r3, [pc, #60]	; (1da8 <Reset_Handler+0xf0>)
    1d6c:	4798      	blx	r3

        /* Branch to main function */
        main();
    1d6e:	4b0f      	ldr	r3, [pc, #60]	; (1dac <Reset_Handler+0xf4>)
    1d70:	4798      	blx	r3
    1d72:	e7fe      	b.n	1d72 <Reset_Handler+0xba>
    1d74:	20000000 	.word	0x20000000
    1d78:	00002c88 	.word	0x00002c88
    1d7c:	20000070 	.word	0x20000070
    1d80:	20000190 	.word	0x20000190
    1d84:	20000070 	.word	0x20000070
    1d88:	20000004 	.word	0x20000004
    1d8c:	20000074 	.word	0x20000074
    1d90:	e000ed00 	.word	0xe000ed00
    1d94:	00000000 	.word	0x00000000
    1d98:	41007000 	.word	0x41007000
    1d9c:	41005000 	.word	0x41005000
    1da0:	41004800 	.word	0x41004800
    1da4:	41004000 	.word	0x41004000
    1da8:	0000200d 	.word	0x0000200d
    1dac:	00001e89 	.word	0x00001e89

00001db0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1db0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1db2:	4a06      	ldr	r2, [pc, #24]	; (1dcc <_sbrk+0x1c>)
    1db4:	6812      	ldr	r2, [r2, #0]
    1db6:	2a00      	cmp	r2, #0
    1db8:	d102      	bne.n	1dc0 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    1dba:	4905      	ldr	r1, [pc, #20]	; (1dd0 <_sbrk+0x20>)
    1dbc:	4a03      	ldr	r2, [pc, #12]	; (1dcc <_sbrk+0x1c>)
    1dbe:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    1dc0:	4a02      	ldr	r2, [pc, #8]	; (1dcc <_sbrk+0x1c>)
    1dc2:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1dc4:	18c3      	adds	r3, r0, r3
    1dc6:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1dc8:	4770      	bx	lr
    1dca:	46c0      	nop			; (mov r8, r8)
    1dcc:	200000c8 	.word	0x200000c8
    1dd0:	20002190 	.word	0x20002190

00001dd4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1dd4:	2001      	movs	r0, #1
    1dd6:	4240      	negs	r0, r0
    1dd8:	4770      	bx	lr
    1dda:	46c0      	nop			; (mov r8, r8)

00001ddc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1ddc:	2380      	movs	r3, #128	; 0x80
    1dde:	019b      	lsls	r3, r3, #6
    1de0:	604b      	str	r3, [r1, #4]

	return 0;
}
    1de2:	2000      	movs	r0, #0
    1de4:	4770      	bx	lr
    1de6:	46c0      	nop			; (mov r8, r8)

00001de8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1de8:	2001      	movs	r0, #1
    1dea:	4770      	bx	lr

00001dec <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1dec:	2000      	movs	r0, #0
    1dee:	4770      	bx	lr

00001df0 <setup>:
#include <asf.h>
#include "TheArtist.h"

void setup() {
    1df0:	b530      	push	{r4, r5, lr}
    1df2:	b083      	sub	sp, #12
	// [SYSTEM INITIALIZE]
	system_init();
    1df4:	4b15      	ldr	r3, [pc, #84]	; (1e4c <setup+0x5c>)
    1df6:	4798      	blx	r3
	delay_init(); 
    1df8:	4b15      	ldr	r3, [pc, #84]	; (1e50 <setup+0x60>)
    1dfa:	4798      	blx	r3
	artist_usart_configure(&(artist_back.usart_instance));
    1dfc:	4c15      	ldr	r4, [pc, #84]	; (1e54 <setup+0x64>)
    1dfe:	0020      	movs	r0, r4
    1e00:	4b15      	ldr	r3, [pc, #84]	; (1e58 <setup+0x68>)
    1e02:	4798      	blx	r3
	artist_motor_configure(&(artist_back.motor_left_side),
    1e04:	0020      	movs	r0, r4
    1e06:	3034      	adds	r0, #52	; 0x34
    1e08:	2302      	movs	r3, #2
    1e0a:	9300      	str	r3, [sp, #0]
    1e0c:	2205      	movs	r2, #5
    1e0e:	2112      	movs	r1, #18
    1e10:	4d12      	ldr	r5, [pc, #72]	; (1e5c <setup+0x6c>)
    1e12:	47a8      	blx	r5
				CONF_ARTIST_MOTOR_1_PWM_PIN, CONF_ARTIST_MOTOR_1_PWM_MUX,
				CONF_ARTIST_MOTOR_1_PWM_CHANNEL, CONF_ARTIST_MOTOR_1_PWM_OUTPUT);
	artist_motor_configure(&(artist_back.motor_right_side),
    1e14:	0020      	movs	r0, r4
    1e16:	303a      	adds	r0, #58	; 0x3a
    1e18:	2303      	movs	r3, #3
    1e1a:	9300      	str	r3, [sp, #0]
    1e1c:	2205      	movs	r2, #5
    1e1e:	2113      	movs	r1, #19
    1e20:	47a8      	blx	r5
				CONF_ARTIST_MOTOR_2_PWM_PIN, CONF_ARTIST_MOTOR_2_PWM_MUX ,
				CONF_ARTIST_MOTOR_2_PWM_CHANNEL, CONF_ARTIST_MOTOR_2_PWM_OUTPUT); 
	artist_motor_pwm_configure(&artist_back);
    1e22:	0020      	movs	r0, r4
    1e24:	3840      	subs	r0, #64	; 0x40
    1e26:	4b0e      	ldr	r3, [pc, #56]	; (1e60 <setup+0x70>)
    1e28:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    1e2a:	2201      	movs	r2, #1
    1e2c:	4b0d      	ldr	r3, [pc, #52]	; (1e64 <setup+0x74>)
    1e2e:	701a      	strb	r2, [r3, #0]
    1e30:	f3bf 8f5f 	dmb	sy
    1e34:	b662      	cpsie	i
	system_interrupt_enable_global(); 
	
	// [SYSTEM INITIALIZE] 

	// [listen on RX buffer]
	usart_read_buffer_job(&(artist_back.usart_instance),
    1e36:	3204      	adds	r2, #4
    1e38:	490b      	ldr	r1, [pc, #44]	; (1e68 <setup+0x78>)
    1e3a:	0020      	movs	r0, r4
    1e3c:	4b0b      	ldr	r3, [pc, #44]	; (1e6c <setup+0x7c>)
    1e3e:	4798      	blx	r3
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
	// ! [listen on RX buffer]
	
	printf("back node setup complete\n"); 
    1e40:	480b      	ldr	r0, [pc, #44]	; (1e70 <setup+0x80>)
    1e42:	4b0c      	ldr	r3, [pc, #48]	; (1e74 <setup+0x84>)
    1e44:	4798      	blx	r3
}
    1e46:	b003      	add	sp, #12
    1e48:	bd30      	pop	{r4, r5, pc}
    1e4a:	46c0      	nop			; (mov r8, r8)
    1e4c:	00001c89 	.word	0x00001c89
    1e50:	000015e1 	.word	0x000015e1
    1e54:	20000120 	.word	0x20000120
    1e58:	000006ed 	.word	0x000006ed
    1e5c:	0000052d 	.word	0x0000052d
    1e60:	000007f9 	.word	0x000007f9
    1e64:	20000008 	.word	0x20000008
    1e68:	20000160 	.word	0x20000160
    1e6c:	00001369 	.word	0x00001369
    1e70:	00002be4 	.word	0x00002be4
    1e74:	00002141 	.word	0x00002141

00001e78 <loop>:

void loop() {
    1e78:	b510      	push	{r4, lr}
	delay_ms(100); 
    1e7a:	2064      	movs	r0, #100	; 0x64
    1e7c:	4b01      	ldr	r3, [pc, #4]	; (1e84 <loop+0xc>)
    1e7e:	4798      	blx	r3
}
    1e80:	bd10      	pop	{r4, pc}
    1e82:	46c0      	nop			; (mov r8, r8)
    1e84:	00001621 	.word	0x00001621

00001e88 <main>:

int main (void)
{
    1e88:	b510      	push	{r4, lr}
	setup (); 
    1e8a:	4b02      	ldr	r3, [pc, #8]	; (1e94 <main+0xc>)
    1e8c:	4798      	blx	r3

	while(true)	loop();	
    1e8e:	4c02      	ldr	r4, [pc, #8]	; (1e98 <main+0x10>)
    1e90:	47a0      	blx	r4
    1e92:	e7fd      	b.n	1e90 <main+0x8>
    1e94:	00001df1 	.word	0x00001df1
    1e98:	00001e79 	.word	0x00001e79

00001e9c <__aeabi_uidiv>:
    1e9c:	2200      	movs	r2, #0
    1e9e:	0843      	lsrs	r3, r0, #1
    1ea0:	428b      	cmp	r3, r1
    1ea2:	d374      	bcc.n	1f8e <__aeabi_uidiv+0xf2>
    1ea4:	0903      	lsrs	r3, r0, #4
    1ea6:	428b      	cmp	r3, r1
    1ea8:	d35f      	bcc.n	1f6a <__aeabi_uidiv+0xce>
    1eaa:	0a03      	lsrs	r3, r0, #8
    1eac:	428b      	cmp	r3, r1
    1eae:	d344      	bcc.n	1f3a <__aeabi_uidiv+0x9e>
    1eb0:	0b03      	lsrs	r3, r0, #12
    1eb2:	428b      	cmp	r3, r1
    1eb4:	d328      	bcc.n	1f08 <__aeabi_uidiv+0x6c>
    1eb6:	0c03      	lsrs	r3, r0, #16
    1eb8:	428b      	cmp	r3, r1
    1eba:	d30d      	bcc.n	1ed8 <__aeabi_uidiv+0x3c>
    1ebc:	22ff      	movs	r2, #255	; 0xff
    1ebe:	0209      	lsls	r1, r1, #8
    1ec0:	ba12      	rev	r2, r2
    1ec2:	0c03      	lsrs	r3, r0, #16
    1ec4:	428b      	cmp	r3, r1
    1ec6:	d302      	bcc.n	1ece <__aeabi_uidiv+0x32>
    1ec8:	1212      	asrs	r2, r2, #8
    1eca:	0209      	lsls	r1, r1, #8
    1ecc:	d065      	beq.n	1f9a <__aeabi_uidiv+0xfe>
    1ece:	0b03      	lsrs	r3, r0, #12
    1ed0:	428b      	cmp	r3, r1
    1ed2:	d319      	bcc.n	1f08 <__aeabi_uidiv+0x6c>
    1ed4:	e000      	b.n	1ed8 <__aeabi_uidiv+0x3c>
    1ed6:	0a09      	lsrs	r1, r1, #8
    1ed8:	0bc3      	lsrs	r3, r0, #15
    1eda:	428b      	cmp	r3, r1
    1edc:	d301      	bcc.n	1ee2 <__aeabi_uidiv+0x46>
    1ede:	03cb      	lsls	r3, r1, #15
    1ee0:	1ac0      	subs	r0, r0, r3
    1ee2:	4152      	adcs	r2, r2
    1ee4:	0b83      	lsrs	r3, r0, #14
    1ee6:	428b      	cmp	r3, r1
    1ee8:	d301      	bcc.n	1eee <__aeabi_uidiv+0x52>
    1eea:	038b      	lsls	r3, r1, #14
    1eec:	1ac0      	subs	r0, r0, r3
    1eee:	4152      	adcs	r2, r2
    1ef0:	0b43      	lsrs	r3, r0, #13
    1ef2:	428b      	cmp	r3, r1
    1ef4:	d301      	bcc.n	1efa <__aeabi_uidiv+0x5e>
    1ef6:	034b      	lsls	r3, r1, #13
    1ef8:	1ac0      	subs	r0, r0, r3
    1efa:	4152      	adcs	r2, r2
    1efc:	0b03      	lsrs	r3, r0, #12
    1efe:	428b      	cmp	r3, r1
    1f00:	d301      	bcc.n	1f06 <__aeabi_uidiv+0x6a>
    1f02:	030b      	lsls	r3, r1, #12
    1f04:	1ac0      	subs	r0, r0, r3
    1f06:	4152      	adcs	r2, r2
    1f08:	0ac3      	lsrs	r3, r0, #11
    1f0a:	428b      	cmp	r3, r1
    1f0c:	d301      	bcc.n	1f12 <__aeabi_uidiv+0x76>
    1f0e:	02cb      	lsls	r3, r1, #11
    1f10:	1ac0      	subs	r0, r0, r3
    1f12:	4152      	adcs	r2, r2
    1f14:	0a83      	lsrs	r3, r0, #10
    1f16:	428b      	cmp	r3, r1
    1f18:	d301      	bcc.n	1f1e <__aeabi_uidiv+0x82>
    1f1a:	028b      	lsls	r3, r1, #10
    1f1c:	1ac0      	subs	r0, r0, r3
    1f1e:	4152      	adcs	r2, r2
    1f20:	0a43      	lsrs	r3, r0, #9
    1f22:	428b      	cmp	r3, r1
    1f24:	d301      	bcc.n	1f2a <__aeabi_uidiv+0x8e>
    1f26:	024b      	lsls	r3, r1, #9
    1f28:	1ac0      	subs	r0, r0, r3
    1f2a:	4152      	adcs	r2, r2
    1f2c:	0a03      	lsrs	r3, r0, #8
    1f2e:	428b      	cmp	r3, r1
    1f30:	d301      	bcc.n	1f36 <__aeabi_uidiv+0x9a>
    1f32:	020b      	lsls	r3, r1, #8
    1f34:	1ac0      	subs	r0, r0, r3
    1f36:	4152      	adcs	r2, r2
    1f38:	d2cd      	bcs.n	1ed6 <__aeabi_uidiv+0x3a>
    1f3a:	09c3      	lsrs	r3, r0, #7
    1f3c:	428b      	cmp	r3, r1
    1f3e:	d301      	bcc.n	1f44 <__aeabi_uidiv+0xa8>
    1f40:	01cb      	lsls	r3, r1, #7
    1f42:	1ac0      	subs	r0, r0, r3
    1f44:	4152      	adcs	r2, r2
    1f46:	0983      	lsrs	r3, r0, #6
    1f48:	428b      	cmp	r3, r1
    1f4a:	d301      	bcc.n	1f50 <__aeabi_uidiv+0xb4>
    1f4c:	018b      	lsls	r3, r1, #6
    1f4e:	1ac0      	subs	r0, r0, r3
    1f50:	4152      	adcs	r2, r2
    1f52:	0943      	lsrs	r3, r0, #5
    1f54:	428b      	cmp	r3, r1
    1f56:	d301      	bcc.n	1f5c <__aeabi_uidiv+0xc0>
    1f58:	014b      	lsls	r3, r1, #5
    1f5a:	1ac0      	subs	r0, r0, r3
    1f5c:	4152      	adcs	r2, r2
    1f5e:	0903      	lsrs	r3, r0, #4
    1f60:	428b      	cmp	r3, r1
    1f62:	d301      	bcc.n	1f68 <__aeabi_uidiv+0xcc>
    1f64:	010b      	lsls	r3, r1, #4
    1f66:	1ac0      	subs	r0, r0, r3
    1f68:	4152      	adcs	r2, r2
    1f6a:	08c3      	lsrs	r3, r0, #3
    1f6c:	428b      	cmp	r3, r1
    1f6e:	d301      	bcc.n	1f74 <__aeabi_uidiv+0xd8>
    1f70:	00cb      	lsls	r3, r1, #3
    1f72:	1ac0      	subs	r0, r0, r3
    1f74:	4152      	adcs	r2, r2
    1f76:	0883      	lsrs	r3, r0, #2
    1f78:	428b      	cmp	r3, r1
    1f7a:	d301      	bcc.n	1f80 <__aeabi_uidiv+0xe4>
    1f7c:	008b      	lsls	r3, r1, #2
    1f7e:	1ac0      	subs	r0, r0, r3
    1f80:	4152      	adcs	r2, r2
    1f82:	0843      	lsrs	r3, r0, #1
    1f84:	428b      	cmp	r3, r1
    1f86:	d301      	bcc.n	1f8c <__aeabi_uidiv+0xf0>
    1f88:	004b      	lsls	r3, r1, #1
    1f8a:	1ac0      	subs	r0, r0, r3
    1f8c:	4152      	adcs	r2, r2
    1f8e:	1a41      	subs	r1, r0, r1
    1f90:	d200      	bcs.n	1f94 <__aeabi_uidiv+0xf8>
    1f92:	4601      	mov	r1, r0
    1f94:	4152      	adcs	r2, r2
    1f96:	4610      	mov	r0, r2
    1f98:	4770      	bx	lr
    1f9a:	e7ff      	b.n	1f9c <__aeabi_uidiv+0x100>
    1f9c:	b501      	push	{r0, lr}
    1f9e:	2000      	movs	r0, #0
    1fa0:	f000 f806 	bl	1fb0 <__aeabi_idiv0>
    1fa4:	bd02      	pop	{r1, pc}
    1fa6:	46c0      	nop			; (mov r8, r8)

00001fa8 <__aeabi_uidivmod>:
    1fa8:	2900      	cmp	r1, #0
    1faa:	d0f7      	beq.n	1f9c <__aeabi_uidiv+0x100>
    1fac:	e776      	b.n	1e9c <__aeabi_uidiv>
    1fae:	4770      	bx	lr

00001fb0 <__aeabi_idiv0>:
    1fb0:	4770      	bx	lr
    1fb2:	46c0      	nop			; (mov r8, r8)

00001fb4 <__aeabi_lmul>:
    1fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fb6:	464f      	mov	r7, r9
    1fb8:	4646      	mov	r6, r8
    1fba:	b4c0      	push	{r6, r7}
    1fbc:	0416      	lsls	r6, r2, #16
    1fbe:	0c36      	lsrs	r6, r6, #16
    1fc0:	4699      	mov	r9, r3
    1fc2:	0033      	movs	r3, r6
    1fc4:	0405      	lsls	r5, r0, #16
    1fc6:	0c2c      	lsrs	r4, r5, #16
    1fc8:	0c07      	lsrs	r7, r0, #16
    1fca:	0c15      	lsrs	r5, r2, #16
    1fcc:	4363      	muls	r3, r4
    1fce:	437e      	muls	r6, r7
    1fd0:	436f      	muls	r7, r5
    1fd2:	4365      	muls	r5, r4
    1fd4:	0c1c      	lsrs	r4, r3, #16
    1fd6:	19ad      	adds	r5, r5, r6
    1fd8:	1964      	adds	r4, r4, r5
    1fda:	469c      	mov	ip, r3
    1fdc:	42a6      	cmp	r6, r4
    1fde:	d903      	bls.n	1fe8 <__aeabi_lmul+0x34>
    1fe0:	2380      	movs	r3, #128	; 0x80
    1fe2:	025b      	lsls	r3, r3, #9
    1fe4:	4698      	mov	r8, r3
    1fe6:	4447      	add	r7, r8
    1fe8:	4663      	mov	r3, ip
    1fea:	0c25      	lsrs	r5, r4, #16
    1fec:	19ef      	adds	r7, r5, r7
    1fee:	041d      	lsls	r5, r3, #16
    1ff0:	464b      	mov	r3, r9
    1ff2:	434a      	muls	r2, r1
    1ff4:	4343      	muls	r3, r0
    1ff6:	0c2d      	lsrs	r5, r5, #16
    1ff8:	0424      	lsls	r4, r4, #16
    1ffa:	1964      	adds	r4, r4, r5
    1ffc:	1899      	adds	r1, r3, r2
    1ffe:	19c9      	adds	r1, r1, r7
    2000:	0020      	movs	r0, r4
    2002:	bc0c      	pop	{r2, r3}
    2004:	4690      	mov	r8, r2
    2006:	4699      	mov	r9, r3
    2008:	bdf0      	pop	{r4, r5, r6, r7, pc}
    200a:	46c0      	nop			; (mov r8, r8)

0000200c <__libc_init_array>:
    200c:	4b0e      	ldr	r3, [pc, #56]	; (2048 <__libc_init_array+0x3c>)
    200e:	b570      	push	{r4, r5, r6, lr}
    2010:	2500      	movs	r5, #0
    2012:	001e      	movs	r6, r3
    2014:	4c0d      	ldr	r4, [pc, #52]	; (204c <__libc_init_array+0x40>)
    2016:	1ae4      	subs	r4, r4, r3
    2018:	10a4      	asrs	r4, r4, #2
    201a:	42a5      	cmp	r5, r4
    201c:	d004      	beq.n	2028 <__libc_init_array+0x1c>
    201e:	00ab      	lsls	r3, r5, #2
    2020:	58f3      	ldr	r3, [r6, r3]
    2022:	4798      	blx	r3
    2024:	3501      	adds	r5, #1
    2026:	e7f8      	b.n	201a <__libc_init_array+0xe>
    2028:	f000 fe1e 	bl	2c68 <_init>
    202c:	4b08      	ldr	r3, [pc, #32]	; (2050 <__libc_init_array+0x44>)
    202e:	2500      	movs	r5, #0
    2030:	001e      	movs	r6, r3
    2032:	4c08      	ldr	r4, [pc, #32]	; (2054 <__libc_init_array+0x48>)
    2034:	1ae4      	subs	r4, r4, r3
    2036:	10a4      	asrs	r4, r4, #2
    2038:	42a5      	cmp	r5, r4
    203a:	d004      	beq.n	2046 <__libc_init_array+0x3a>
    203c:	00ab      	lsls	r3, r5, #2
    203e:	58f3      	ldr	r3, [r6, r3]
    2040:	4798      	blx	r3
    2042:	3501      	adds	r5, #1
    2044:	e7f8      	b.n	2038 <__libc_init_array+0x2c>
    2046:	bd70      	pop	{r4, r5, r6, pc}
    2048:	00002c74 	.word	0x00002c74
    204c:	00002c74 	.word	0x00002c74
    2050:	00002c74 	.word	0x00002c74
    2054:	00002c78 	.word	0x00002c78

00002058 <memcpy>:
    2058:	2300      	movs	r3, #0
    205a:	b510      	push	{r4, lr}
    205c:	429a      	cmp	r2, r3
    205e:	d003      	beq.n	2068 <memcpy+0x10>
    2060:	5ccc      	ldrb	r4, [r1, r3]
    2062:	54c4      	strb	r4, [r0, r3]
    2064:	3301      	adds	r3, #1
    2066:	e7f9      	b.n	205c <memcpy+0x4>
    2068:	bd10      	pop	{r4, pc}

0000206a <memset>:
    206a:	0003      	movs	r3, r0
    206c:	1882      	adds	r2, r0, r2
    206e:	4293      	cmp	r3, r2
    2070:	d002      	beq.n	2078 <memset+0xe>
    2072:	7019      	strb	r1, [r3, #0]
    2074:	3301      	adds	r3, #1
    2076:	e7fa      	b.n	206e <memset+0x4>
    2078:	4770      	bx	lr
	...

0000207c <_puts_r>:
    207c:	b570      	push	{r4, r5, r6, lr}
    207e:	0005      	movs	r5, r0
    2080:	000e      	movs	r6, r1
    2082:	2800      	cmp	r0, #0
    2084:	d004      	beq.n	2090 <_puts_r+0x14>
    2086:	6983      	ldr	r3, [r0, #24]
    2088:	2b00      	cmp	r3, #0
    208a:	d101      	bne.n	2090 <_puts_r+0x14>
    208c:	f000 fade 	bl	264c <__sinit>
    2090:	69ab      	ldr	r3, [r5, #24]
    2092:	68ac      	ldr	r4, [r5, #8]
    2094:	2b00      	cmp	r3, #0
    2096:	d102      	bne.n	209e <_puts_r+0x22>
    2098:	0028      	movs	r0, r5
    209a:	f000 fad7 	bl	264c <__sinit>
    209e:	4b25      	ldr	r3, [pc, #148]	; (2134 <_puts_r+0xb8>)
    20a0:	429c      	cmp	r4, r3
    20a2:	d101      	bne.n	20a8 <_puts_r+0x2c>
    20a4:	686c      	ldr	r4, [r5, #4]
    20a6:	e008      	b.n	20ba <_puts_r+0x3e>
    20a8:	4b23      	ldr	r3, [pc, #140]	; (2138 <_puts_r+0xbc>)
    20aa:	429c      	cmp	r4, r3
    20ac:	d101      	bne.n	20b2 <_puts_r+0x36>
    20ae:	68ac      	ldr	r4, [r5, #8]
    20b0:	e003      	b.n	20ba <_puts_r+0x3e>
    20b2:	4b22      	ldr	r3, [pc, #136]	; (213c <_puts_r+0xc0>)
    20b4:	429c      	cmp	r4, r3
    20b6:	d100      	bne.n	20ba <_puts_r+0x3e>
    20b8:	68ec      	ldr	r4, [r5, #12]
    20ba:	89a3      	ldrh	r3, [r4, #12]
    20bc:	071b      	lsls	r3, r3, #28
    20be:	d502      	bpl.n	20c6 <_puts_r+0x4a>
    20c0:	6923      	ldr	r3, [r4, #16]
    20c2:	2b00      	cmp	r3, #0
    20c4:	d111      	bne.n	20ea <_puts_r+0x6e>
    20c6:	0021      	movs	r1, r4
    20c8:	0028      	movs	r0, r5
    20ca:	f000 f955 	bl	2378 <__swsetup_r>
    20ce:	2800      	cmp	r0, #0
    20d0:	d00b      	beq.n	20ea <_puts_r+0x6e>
    20d2:	2001      	movs	r0, #1
    20d4:	4240      	negs	r0, r0
    20d6:	e02b      	b.n	2130 <_puts_r+0xb4>
    20d8:	3b01      	subs	r3, #1
    20da:	3601      	adds	r6, #1
    20dc:	60a3      	str	r3, [r4, #8]
    20de:	2b00      	cmp	r3, #0
    20e0:	db08      	blt.n	20f4 <_puts_r+0x78>
    20e2:	6823      	ldr	r3, [r4, #0]
    20e4:	1c5a      	adds	r2, r3, #1
    20e6:	6022      	str	r2, [r4, #0]
    20e8:	7019      	strb	r1, [r3, #0]
    20ea:	7831      	ldrb	r1, [r6, #0]
    20ec:	68a3      	ldr	r3, [r4, #8]
    20ee:	2900      	cmp	r1, #0
    20f0:	d1f2      	bne.n	20d8 <_puts_r+0x5c>
    20f2:	e00b      	b.n	210c <_puts_r+0x90>
    20f4:	69a2      	ldr	r2, [r4, #24]
    20f6:	4293      	cmp	r3, r2
    20f8:	db01      	blt.n	20fe <_puts_r+0x82>
    20fa:	290a      	cmp	r1, #10
    20fc:	d1f1      	bne.n	20e2 <_puts_r+0x66>
    20fe:	0022      	movs	r2, r4
    2100:	0028      	movs	r0, r5
    2102:	f000 f8e1 	bl	22c8 <__swbuf_r>
    2106:	1c43      	adds	r3, r0, #1
    2108:	d1ef      	bne.n	20ea <_puts_r+0x6e>
    210a:	e7e2      	b.n	20d2 <_puts_r+0x56>
    210c:	3b01      	subs	r3, #1
    210e:	60a3      	str	r3, [r4, #8]
    2110:	2b00      	cmp	r3, #0
    2112:	da08      	bge.n	2126 <_puts_r+0xaa>
    2114:	0022      	movs	r2, r4
    2116:	310a      	adds	r1, #10
    2118:	0028      	movs	r0, r5
    211a:	f000 f8d5 	bl	22c8 <__swbuf_r>
    211e:	1c43      	adds	r3, r0, #1
    2120:	d0d7      	beq.n	20d2 <_puts_r+0x56>
    2122:	200a      	movs	r0, #10
    2124:	e004      	b.n	2130 <_puts_r+0xb4>
    2126:	200a      	movs	r0, #10
    2128:	6823      	ldr	r3, [r4, #0]
    212a:	1c5a      	adds	r2, r3, #1
    212c:	6022      	str	r2, [r4, #0]
    212e:	7018      	strb	r0, [r3, #0]
    2130:	bd70      	pop	{r4, r5, r6, pc}
    2132:	46c0      	nop			; (mov r8, r8)
    2134:	00002c08 	.word	0x00002c08
    2138:	00002c28 	.word	0x00002c28
    213c:	00002c48 	.word	0x00002c48

00002140 <puts>:
    2140:	b510      	push	{r4, lr}
    2142:	4b03      	ldr	r3, [pc, #12]	; (2150 <puts+0x10>)
    2144:	0001      	movs	r1, r0
    2146:	6818      	ldr	r0, [r3, #0]
    2148:	f7ff ff98 	bl	207c <_puts_r>
    214c:	bd10      	pop	{r4, pc}
    214e:	46c0      	nop			; (mov r8, r8)
    2150:	2000006c 	.word	0x2000006c

00002154 <setbuf>:
    2154:	424a      	negs	r2, r1
    2156:	414a      	adcs	r2, r1
    2158:	2380      	movs	r3, #128	; 0x80
    215a:	b510      	push	{r4, lr}
    215c:	0052      	lsls	r2, r2, #1
    215e:	00db      	lsls	r3, r3, #3
    2160:	f000 f802 	bl	2168 <setvbuf>
    2164:	bd10      	pop	{r4, pc}
	...

00002168 <setvbuf>:
    2168:	b5f0      	push	{r4, r5, r6, r7, lr}
    216a:	001d      	movs	r5, r3
    216c:	4b51      	ldr	r3, [pc, #324]	; (22b4 <setvbuf+0x14c>)
    216e:	b085      	sub	sp, #20
    2170:	681e      	ldr	r6, [r3, #0]
    2172:	0004      	movs	r4, r0
    2174:	000f      	movs	r7, r1
    2176:	9200      	str	r2, [sp, #0]
    2178:	2e00      	cmp	r6, #0
    217a:	d005      	beq.n	2188 <setvbuf+0x20>
    217c:	69b3      	ldr	r3, [r6, #24]
    217e:	2b00      	cmp	r3, #0
    2180:	d102      	bne.n	2188 <setvbuf+0x20>
    2182:	0030      	movs	r0, r6
    2184:	f000 fa62 	bl	264c <__sinit>
    2188:	4b4b      	ldr	r3, [pc, #300]	; (22b8 <setvbuf+0x150>)
    218a:	429c      	cmp	r4, r3
    218c:	d101      	bne.n	2192 <setvbuf+0x2a>
    218e:	6874      	ldr	r4, [r6, #4]
    2190:	e008      	b.n	21a4 <setvbuf+0x3c>
    2192:	4b4a      	ldr	r3, [pc, #296]	; (22bc <setvbuf+0x154>)
    2194:	429c      	cmp	r4, r3
    2196:	d101      	bne.n	219c <setvbuf+0x34>
    2198:	68b4      	ldr	r4, [r6, #8]
    219a:	e003      	b.n	21a4 <setvbuf+0x3c>
    219c:	4b48      	ldr	r3, [pc, #288]	; (22c0 <setvbuf+0x158>)
    219e:	429c      	cmp	r4, r3
    21a0:	d100      	bne.n	21a4 <setvbuf+0x3c>
    21a2:	68f4      	ldr	r4, [r6, #12]
    21a4:	9b00      	ldr	r3, [sp, #0]
    21a6:	2b02      	cmp	r3, #2
    21a8:	d005      	beq.n	21b6 <setvbuf+0x4e>
    21aa:	2b01      	cmp	r3, #1
    21ac:	d900      	bls.n	21b0 <setvbuf+0x48>
    21ae:	e07c      	b.n	22aa <setvbuf+0x142>
    21b0:	2d00      	cmp	r5, #0
    21b2:	da00      	bge.n	21b6 <setvbuf+0x4e>
    21b4:	e079      	b.n	22aa <setvbuf+0x142>
    21b6:	0021      	movs	r1, r4
    21b8:	0030      	movs	r0, r6
    21ba:	f000 f9d9 	bl	2570 <_fflush_r>
    21be:	6b61      	ldr	r1, [r4, #52]	; 0x34
    21c0:	2900      	cmp	r1, #0
    21c2:	d008      	beq.n	21d6 <setvbuf+0x6e>
    21c4:	0023      	movs	r3, r4
    21c6:	3344      	adds	r3, #68	; 0x44
    21c8:	4299      	cmp	r1, r3
    21ca:	d002      	beq.n	21d2 <setvbuf+0x6a>
    21cc:	0030      	movs	r0, r6
    21ce:	f000 fb3f 	bl	2850 <_free_r>
    21d2:	2300      	movs	r3, #0
    21d4:	6363      	str	r3, [r4, #52]	; 0x34
    21d6:	2300      	movs	r3, #0
    21d8:	61a3      	str	r3, [r4, #24]
    21da:	6063      	str	r3, [r4, #4]
    21dc:	89a3      	ldrh	r3, [r4, #12]
    21de:	061b      	lsls	r3, r3, #24
    21e0:	d503      	bpl.n	21ea <setvbuf+0x82>
    21e2:	6921      	ldr	r1, [r4, #16]
    21e4:	0030      	movs	r0, r6
    21e6:	f000 fb33 	bl	2850 <_free_r>
    21ea:	89a2      	ldrh	r2, [r4, #12]
    21ec:	4b35      	ldr	r3, [pc, #212]	; (22c4 <setvbuf+0x15c>)
    21ee:	4013      	ands	r3, r2
    21f0:	81a3      	strh	r3, [r4, #12]
    21f2:	9b00      	ldr	r3, [sp, #0]
    21f4:	2b02      	cmp	r3, #2
    21f6:	d021      	beq.n	223c <setvbuf+0xd4>
    21f8:	ab03      	add	r3, sp, #12
    21fa:	aa02      	add	r2, sp, #8
    21fc:	0021      	movs	r1, r4
    21fe:	0030      	movs	r0, r6
    2200:	f000 fab8 	bl	2774 <__swhatbuf_r>
    2204:	89a3      	ldrh	r3, [r4, #12]
    2206:	4318      	orrs	r0, r3
    2208:	81a0      	strh	r0, [r4, #12]
    220a:	2d00      	cmp	r5, #0
    220c:	d101      	bne.n	2212 <setvbuf+0xaa>
    220e:	9d02      	ldr	r5, [sp, #8]
    2210:	e001      	b.n	2216 <setvbuf+0xae>
    2212:	2f00      	cmp	r7, #0
    2214:	d125      	bne.n	2262 <setvbuf+0xfa>
    2216:	0028      	movs	r0, r5
    2218:	f000 fb10 	bl	283c <malloc>
    221c:	9501      	str	r5, [sp, #4]
    221e:	1e07      	subs	r7, r0, #0
    2220:	d11a      	bne.n	2258 <setvbuf+0xf0>
    2222:	9b02      	ldr	r3, [sp, #8]
    2224:	9301      	str	r3, [sp, #4]
    2226:	42ab      	cmp	r3, r5
    2228:	d102      	bne.n	2230 <setvbuf+0xc8>
    222a:	2001      	movs	r0, #1
    222c:	4240      	negs	r0, r0
    222e:	e006      	b.n	223e <setvbuf+0xd6>
    2230:	9801      	ldr	r0, [sp, #4]
    2232:	f000 fb03 	bl	283c <malloc>
    2236:	1e07      	subs	r7, r0, #0
    2238:	d10e      	bne.n	2258 <setvbuf+0xf0>
    223a:	e7f6      	b.n	222a <setvbuf+0xc2>
    223c:	2000      	movs	r0, #0
    223e:	2202      	movs	r2, #2
    2240:	89a3      	ldrh	r3, [r4, #12]
    2242:	4313      	orrs	r3, r2
    2244:	81a3      	strh	r3, [r4, #12]
    2246:	2300      	movs	r3, #0
    2248:	60a3      	str	r3, [r4, #8]
    224a:	0023      	movs	r3, r4
    224c:	3347      	adds	r3, #71	; 0x47
    224e:	6023      	str	r3, [r4, #0]
    2250:	6123      	str	r3, [r4, #16]
    2252:	2301      	movs	r3, #1
    2254:	6163      	str	r3, [r4, #20]
    2256:	e02a      	b.n	22ae <setvbuf+0x146>
    2258:	2280      	movs	r2, #128	; 0x80
    225a:	89a3      	ldrh	r3, [r4, #12]
    225c:	9d01      	ldr	r5, [sp, #4]
    225e:	4313      	orrs	r3, r2
    2260:	81a3      	strh	r3, [r4, #12]
    2262:	69b3      	ldr	r3, [r6, #24]
    2264:	2b00      	cmp	r3, #0
    2266:	d102      	bne.n	226e <setvbuf+0x106>
    2268:	0030      	movs	r0, r6
    226a:	f000 f9ef 	bl	264c <__sinit>
    226e:	9b00      	ldr	r3, [sp, #0]
    2270:	2b01      	cmp	r3, #1
    2272:	d103      	bne.n	227c <setvbuf+0x114>
    2274:	89a3      	ldrh	r3, [r4, #12]
    2276:	9a00      	ldr	r2, [sp, #0]
    2278:	431a      	orrs	r2, r3
    227a:	81a2      	strh	r2, [r4, #12]
    227c:	2308      	movs	r3, #8
    227e:	89a2      	ldrh	r2, [r4, #12]
    2280:	6027      	str	r7, [r4, #0]
    2282:	4013      	ands	r3, r2
    2284:	6127      	str	r7, [r4, #16]
    2286:	6165      	str	r5, [r4, #20]
    2288:	1e18      	subs	r0, r3, #0
    228a:	d00c      	beq.n	22a6 <setvbuf+0x13e>
    228c:	2301      	movs	r3, #1
    228e:	401a      	ands	r2, r3
    2290:	2300      	movs	r3, #0
    2292:	1e10      	subs	r0, r2, #0
    2294:	4298      	cmp	r0, r3
    2296:	d004      	beq.n	22a2 <setvbuf+0x13a>
    2298:	426d      	negs	r5, r5
    229a:	60a3      	str	r3, [r4, #8]
    229c:	61a5      	str	r5, [r4, #24]
    229e:	0018      	movs	r0, r3
    22a0:	e005      	b.n	22ae <setvbuf+0x146>
    22a2:	60a5      	str	r5, [r4, #8]
    22a4:	e003      	b.n	22ae <setvbuf+0x146>
    22a6:	60a3      	str	r3, [r4, #8]
    22a8:	e001      	b.n	22ae <setvbuf+0x146>
    22aa:	2001      	movs	r0, #1
    22ac:	4240      	negs	r0, r0
    22ae:	b005      	add	sp, #20
    22b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22b2:	46c0      	nop			; (mov r8, r8)
    22b4:	2000006c 	.word	0x2000006c
    22b8:	00002c08 	.word	0x00002c08
    22bc:	00002c28 	.word	0x00002c28
    22c0:	00002c48 	.word	0x00002c48
    22c4:	fffff35c 	.word	0xfffff35c

000022c8 <__swbuf_r>:
    22c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22ca:	0005      	movs	r5, r0
    22cc:	000f      	movs	r7, r1
    22ce:	0014      	movs	r4, r2
    22d0:	2800      	cmp	r0, #0
    22d2:	d004      	beq.n	22de <__swbuf_r+0x16>
    22d4:	6983      	ldr	r3, [r0, #24]
    22d6:	2b00      	cmp	r3, #0
    22d8:	d101      	bne.n	22de <__swbuf_r+0x16>
    22da:	f000 f9b7 	bl	264c <__sinit>
    22de:	4b23      	ldr	r3, [pc, #140]	; (236c <__swbuf_r+0xa4>)
    22e0:	429c      	cmp	r4, r3
    22e2:	d101      	bne.n	22e8 <__swbuf_r+0x20>
    22e4:	686c      	ldr	r4, [r5, #4]
    22e6:	e008      	b.n	22fa <__swbuf_r+0x32>
    22e8:	4b21      	ldr	r3, [pc, #132]	; (2370 <__swbuf_r+0xa8>)
    22ea:	429c      	cmp	r4, r3
    22ec:	d101      	bne.n	22f2 <__swbuf_r+0x2a>
    22ee:	68ac      	ldr	r4, [r5, #8]
    22f0:	e003      	b.n	22fa <__swbuf_r+0x32>
    22f2:	4b20      	ldr	r3, [pc, #128]	; (2374 <__swbuf_r+0xac>)
    22f4:	429c      	cmp	r4, r3
    22f6:	d100      	bne.n	22fa <__swbuf_r+0x32>
    22f8:	68ec      	ldr	r4, [r5, #12]
    22fa:	69a3      	ldr	r3, [r4, #24]
    22fc:	60a3      	str	r3, [r4, #8]
    22fe:	89a3      	ldrh	r3, [r4, #12]
    2300:	071b      	lsls	r3, r3, #28
    2302:	d50a      	bpl.n	231a <__swbuf_r+0x52>
    2304:	6923      	ldr	r3, [r4, #16]
    2306:	2b00      	cmp	r3, #0
    2308:	d007      	beq.n	231a <__swbuf_r+0x52>
    230a:	6823      	ldr	r3, [r4, #0]
    230c:	6922      	ldr	r2, [r4, #16]
    230e:	b2fe      	uxtb	r6, r7
    2310:	1a98      	subs	r0, r3, r2
    2312:	6963      	ldr	r3, [r4, #20]
    2314:	4298      	cmp	r0, r3
    2316:	db0f      	blt.n	2338 <__swbuf_r+0x70>
    2318:	e008      	b.n	232c <__swbuf_r+0x64>
    231a:	0021      	movs	r1, r4
    231c:	0028      	movs	r0, r5
    231e:	f000 f82b 	bl	2378 <__swsetup_r>
    2322:	2800      	cmp	r0, #0
    2324:	d0f1      	beq.n	230a <__swbuf_r+0x42>
    2326:	2001      	movs	r0, #1
    2328:	4240      	negs	r0, r0
    232a:	e01d      	b.n	2368 <__swbuf_r+0xa0>
    232c:	0021      	movs	r1, r4
    232e:	0028      	movs	r0, r5
    2330:	f000 f91e 	bl	2570 <_fflush_r>
    2334:	2800      	cmp	r0, #0
    2336:	d1f6      	bne.n	2326 <__swbuf_r+0x5e>
    2338:	68a3      	ldr	r3, [r4, #8]
    233a:	3001      	adds	r0, #1
    233c:	3b01      	subs	r3, #1
    233e:	60a3      	str	r3, [r4, #8]
    2340:	6823      	ldr	r3, [r4, #0]
    2342:	1c5a      	adds	r2, r3, #1
    2344:	6022      	str	r2, [r4, #0]
    2346:	701f      	strb	r7, [r3, #0]
    2348:	6963      	ldr	r3, [r4, #20]
    234a:	4298      	cmp	r0, r3
    234c:	d005      	beq.n	235a <__swbuf_r+0x92>
    234e:	89a3      	ldrh	r3, [r4, #12]
    2350:	0030      	movs	r0, r6
    2352:	07db      	lsls	r3, r3, #31
    2354:	d508      	bpl.n	2368 <__swbuf_r+0xa0>
    2356:	2e0a      	cmp	r6, #10
    2358:	d106      	bne.n	2368 <__swbuf_r+0xa0>
    235a:	0021      	movs	r1, r4
    235c:	0028      	movs	r0, r5
    235e:	f000 f907 	bl	2570 <_fflush_r>
    2362:	2800      	cmp	r0, #0
    2364:	d1df      	bne.n	2326 <__swbuf_r+0x5e>
    2366:	0030      	movs	r0, r6
    2368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    236a:	46c0      	nop			; (mov r8, r8)
    236c:	00002c08 	.word	0x00002c08
    2370:	00002c28 	.word	0x00002c28
    2374:	00002c48 	.word	0x00002c48

00002378 <__swsetup_r>:
    2378:	4b36      	ldr	r3, [pc, #216]	; (2454 <__swsetup_r+0xdc>)
    237a:	b570      	push	{r4, r5, r6, lr}
    237c:	681d      	ldr	r5, [r3, #0]
    237e:	0006      	movs	r6, r0
    2380:	000c      	movs	r4, r1
    2382:	2d00      	cmp	r5, #0
    2384:	d005      	beq.n	2392 <__swsetup_r+0x1a>
    2386:	69ab      	ldr	r3, [r5, #24]
    2388:	2b00      	cmp	r3, #0
    238a:	d102      	bne.n	2392 <__swsetup_r+0x1a>
    238c:	0028      	movs	r0, r5
    238e:	f000 f95d 	bl	264c <__sinit>
    2392:	4b31      	ldr	r3, [pc, #196]	; (2458 <__swsetup_r+0xe0>)
    2394:	429c      	cmp	r4, r3
    2396:	d101      	bne.n	239c <__swsetup_r+0x24>
    2398:	686c      	ldr	r4, [r5, #4]
    239a:	e008      	b.n	23ae <__swsetup_r+0x36>
    239c:	4b2f      	ldr	r3, [pc, #188]	; (245c <__swsetup_r+0xe4>)
    239e:	429c      	cmp	r4, r3
    23a0:	d101      	bne.n	23a6 <__swsetup_r+0x2e>
    23a2:	68ac      	ldr	r4, [r5, #8]
    23a4:	e003      	b.n	23ae <__swsetup_r+0x36>
    23a6:	4b2e      	ldr	r3, [pc, #184]	; (2460 <__swsetup_r+0xe8>)
    23a8:	429c      	cmp	r4, r3
    23aa:	d100      	bne.n	23ae <__swsetup_r+0x36>
    23ac:	68ec      	ldr	r4, [r5, #12]
    23ae:	220c      	movs	r2, #12
    23b0:	5ea3      	ldrsh	r3, [r4, r2]
    23b2:	b29a      	uxth	r2, r3
    23b4:	0711      	lsls	r1, r2, #28
    23b6:	d423      	bmi.n	2400 <__swsetup_r+0x88>
    23b8:	06d1      	lsls	r1, r2, #27
    23ba:	d407      	bmi.n	23cc <__swsetup_r+0x54>
    23bc:	2209      	movs	r2, #9
    23be:	2001      	movs	r0, #1
    23c0:	6032      	str	r2, [r6, #0]
    23c2:	3237      	adds	r2, #55	; 0x37
    23c4:	4313      	orrs	r3, r2
    23c6:	81a3      	strh	r3, [r4, #12]
    23c8:	4240      	negs	r0, r0
    23ca:	e042      	b.n	2452 <__swsetup_r+0xda>
    23cc:	0753      	lsls	r3, r2, #29
    23ce:	d513      	bpl.n	23f8 <__swsetup_r+0x80>
    23d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    23d2:	2900      	cmp	r1, #0
    23d4:	d008      	beq.n	23e8 <__swsetup_r+0x70>
    23d6:	0023      	movs	r3, r4
    23d8:	3344      	adds	r3, #68	; 0x44
    23da:	4299      	cmp	r1, r3
    23dc:	d002      	beq.n	23e4 <__swsetup_r+0x6c>
    23de:	0030      	movs	r0, r6
    23e0:	f000 fa36 	bl	2850 <_free_r>
    23e4:	2300      	movs	r3, #0
    23e6:	6363      	str	r3, [r4, #52]	; 0x34
    23e8:	2224      	movs	r2, #36	; 0x24
    23ea:	89a3      	ldrh	r3, [r4, #12]
    23ec:	4393      	bics	r3, r2
    23ee:	81a3      	strh	r3, [r4, #12]
    23f0:	2300      	movs	r3, #0
    23f2:	6063      	str	r3, [r4, #4]
    23f4:	6923      	ldr	r3, [r4, #16]
    23f6:	6023      	str	r3, [r4, #0]
    23f8:	2208      	movs	r2, #8
    23fa:	89a3      	ldrh	r3, [r4, #12]
    23fc:	4313      	orrs	r3, r2
    23fe:	81a3      	strh	r3, [r4, #12]
    2400:	6923      	ldr	r3, [r4, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d10b      	bne.n	241e <__swsetup_r+0xa6>
    2406:	23a0      	movs	r3, #160	; 0xa0
    2408:	89a2      	ldrh	r2, [r4, #12]
    240a:	009b      	lsls	r3, r3, #2
    240c:	4013      	ands	r3, r2
    240e:	2280      	movs	r2, #128	; 0x80
    2410:	0092      	lsls	r2, r2, #2
    2412:	4293      	cmp	r3, r2
    2414:	d003      	beq.n	241e <__swsetup_r+0xa6>
    2416:	0021      	movs	r1, r4
    2418:	0030      	movs	r0, r6
    241a:	f000 f9d1 	bl	27c0 <__smakebuf_r>
    241e:	2301      	movs	r3, #1
    2420:	89a2      	ldrh	r2, [r4, #12]
    2422:	4013      	ands	r3, r2
    2424:	d005      	beq.n	2432 <__swsetup_r+0xba>
    2426:	2300      	movs	r3, #0
    2428:	60a3      	str	r3, [r4, #8]
    242a:	6963      	ldr	r3, [r4, #20]
    242c:	425b      	negs	r3, r3
    242e:	61a3      	str	r3, [r4, #24]
    2430:	e003      	b.n	243a <__swsetup_r+0xc2>
    2432:	0792      	lsls	r2, r2, #30
    2434:	d400      	bmi.n	2438 <__swsetup_r+0xc0>
    2436:	6963      	ldr	r3, [r4, #20]
    2438:	60a3      	str	r3, [r4, #8]
    243a:	2000      	movs	r0, #0
    243c:	6923      	ldr	r3, [r4, #16]
    243e:	4283      	cmp	r3, r0
    2440:	d107      	bne.n	2452 <__swsetup_r+0xda>
    2442:	220c      	movs	r2, #12
    2444:	5ea3      	ldrsh	r3, [r4, r2]
    2446:	061a      	lsls	r2, r3, #24
    2448:	d503      	bpl.n	2452 <__swsetup_r+0xda>
    244a:	2240      	movs	r2, #64	; 0x40
    244c:	4313      	orrs	r3, r2
    244e:	81a3      	strh	r3, [r4, #12]
    2450:	3801      	subs	r0, #1
    2452:	bd70      	pop	{r4, r5, r6, pc}
    2454:	2000006c 	.word	0x2000006c
    2458:	00002c08 	.word	0x00002c08
    245c:	00002c28 	.word	0x00002c28
    2460:	00002c48 	.word	0x00002c48

00002464 <__sflush_r>:
    2464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2466:	898a      	ldrh	r2, [r1, #12]
    2468:	0005      	movs	r5, r0
    246a:	000c      	movs	r4, r1
    246c:	0713      	lsls	r3, r2, #28
    246e:	d45a      	bmi.n	2526 <__sflush_r+0xc2>
    2470:	684b      	ldr	r3, [r1, #4]
    2472:	2b00      	cmp	r3, #0
    2474:	dc02      	bgt.n	247c <__sflush_r+0x18>
    2476:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2478:	2b00      	cmp	r3, #0
    247a:	dd19      	ble.n	24b0 <__sflush_r+0x4c>
    247c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    247e:	2f00      	cmp	r7, #0
    2480:	d016      	beq.n	24b0 <__sflush_r+0x4c>
    2482:	2300      	movs	r3, #0
    2484:	682e      	ldr	r6, [r5, #0]
    2486:	602b      	str	r3, [r5, #0]
    2488:	2380      	movs	r3, #128	; 0x80
    248a:	015b      	lsls	r3, r3, #5
    248c:	401a      	ands	r2, r3
    248e:	d001      	beq.n	2494 <__sflush_r+0x30>
    2490:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2492:	e014      	b.n	24be <__sflush_r+0x5a>
    2494:	2301      	movs	r3, #1
    2496:	6a21      	ldr	r1, [r4, #32]
    2498:	0028      	movs	r0, r5
    249a:	47b8      	blx	r7
    249c:	1c43      	adds	r3, r0, #1
    249e:	d10e      	bne.n	24be <__sflush_r+0x5a>
    24a0:	682b      	ldr	r3, [r5, #0]
    24a2:	2b00      	cmp	r3, #0
    24a4:	d00b      	beq.n	24be <__sflush_r+0x5a>
    24a6:	2b1d      	cmp	r3, #29
    24a8:	d001      	beq.n	24ae <__sflush_r+0x4a>
    24aa:	2b16      	cmp	r3, #22
    24ac:	d102      	bne.n	24b4 <__sflush_r+0x50>
    24ae:	602e      	str	r6, [r5, #0]
    24b0:	2000      	movs	r0, #0
    24b2:	e05a      	b.n	256a <__sflush_r+0x106>
    24b4:	2240      	movs	r2, #64	; 0x40
    24b6:	89a3      	ldrh	r3, [r4, #12]
    24b8:	4313      	orrs	r3, r2
    24ba:	81a3      	strh	r3, [r4, #12]
    24bc:	e055      	b.n	256a <__sflush_r+0x106>
    24be:	89a3      	ldrh	r3, [r4, #12]
    24c0:	075b      	lsls	r3, r3, #29
    24c2:	d506      	bpl.n	24d2 <__sflush_r+0x6e>
    24c4:	6863      	ldr	r3, [r4, #4]
    24c6:	1ac0      	subs	r0, r0, r3
    24c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    24ca:	2b00      	cmp	r3, #0
    24cc:	d001      	beq.n	24d2 <__sflush_r+0x6e>
    24ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
    24d0:	1ac0      	subs	r0, r0, r3
    24d2:	2300      	movs	r3, #0
    24d4:	0002      	movs	r2, r0
    24d6:	6a21      	ldr	r1, [r4, #32]
    24d8:	0028      	movs	r0, r5
    24da:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    24dc:	47b8      	blx	r7
    24de:	89a3      	ldrh	r3, [r4, #12]
    24e0:	1c42      	adds	r2, r0, #1
    24e2:	d106      	bne.n	24f2 <__sflush_r+0x8e>
    24e4:	6829      	ldr	r1, [r5, #0]
    24e6:	291d      	cmp	r1, #29
    24e8:	d83a      	bhi.n	2560 <__sflush_r+0xfc>
    24ea:	4a20      	ldr	r2, [pc, #128]	; (256c <__sflush_r+0x108>)
    24ec:	40ca      	lsrs	r2, r1
    24ee:	07d2      	lsls	r2, r2, #31
    24f0:	d536      	bpl.n	2560 <__sflush_r+0xfc>
    24f2:	2200      	movs	r2, #0
    24f4:	6062      	str	r2, [r4, #4]
    24f6:	6922      	ldr	r2, [r4, #16]
    24f8:	6022      	str	r2, [r4, #0]
    24fa:	04db      	lsls	r3, r3, #19
    24fc:	d505      	bpl.n	250a <__sflush_r+0xa6>
    24fe:	1c43      	adds	r3, r0, #1
    2500:	d102      	bne.n	2508 <__sflush_r+0xa4>
    2502:	682b      	ldr	r3, [r5, #0]
    2504:	2b00      	cmp	r3, #0
    2506:	d100      	bne.n	250a <__sflush_r+0xa6>
    2508:	6560      	str	r0, [r4, #84]	; 0x54
    250a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    250c:	602e      	str	r6, [r5, #0]
    250e:	2900      	cmp	r1, #0
    2510:	d0ce      	beq.n	24b0 <__sflush_r+0x4c>
    2512:	0023      	movs	r3, r4
    2514:	3344      	adds	r3, #68	; 0x44
    2516:	4299      	cmp	r1, r3
    2518:	d002      	beq.n	2520 <__sflush_r+0xbc>
    251a:	0028      	movs	r0, r5
    251c:	f000 f998 	bl	2850 <_free_r>
    2520:	2000      	movs	r0, #0
    2522:	6360      	str	r0, [r4, #52]	; 0x34
    2524:	e021      	b.n	256a <__sflush_r+0x106>
    2526:	690f      	ldr	r7, [r1, #16]
    2528:	2f00      	cmp	r7, #0
    252a:	d0c1      	beq.n	24b0 <__sflush_r+0x4c>
    252c:	680b      	ldr	r3, [r1, #0]
    252e:	600f      	str	r7, [r1, #0]
    2530:	1bdb      	subs	r3, r3, r7
    2532:	9301      	str	r3, [sp, #4]
    2534:	2300      	movs	r3, #0
    2536:	0792      	lsls	r2, r2, #30
    2538:	d100      	bne.n	253c <__sflush_r+0xd8>
    253a:	694b      	ldr	r3, [r1, #20]
    253c:	60a3      	str	r3, [r4, #8]
    253e:	e003      	b.n	2548 <__sflush_r+0xe4>
    2540:	9b01      	ldr	r3, [sp, #4]
    2542:	183f      	adds	r7, r7, r0
    2544:	1a1b      	subs	r3, r3, r0
    2546:	9301      	str	r3, [sp, #4]
    2548:	9b01      	ldr	r3, [sp, #4]
    254a:	2b00      	cmp	r3, #0
    254c:	ddb0      	ble.n	24b0 <__sflush_r+0x4c>
    254e:	9b01      	ldr	r3, [sp, #4]
    2550:	003a      	movs	r2, r7
    2552:	6a21      	ldr	r1, [r4, #32]
    2554:	0028      	movs	r0, r5
    2556:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2558:	47b0      	blx	r6
    255a:	2800      	cmp	r0, #0
    255c:	dcf0      	bgt.n	2540 <__sflush_r+0xdc>
    255e:	89a3      	ldrh	r3, [r4, #12]
    2560:	2240      	movs	r2, #64	; 0x40
    2562:	2001      	movs	r0, #1
    2564:	4313      	orrs	r3, r2
    2566:	81a3      	strh	r3, [r4, #12]
    2568:	4240      	negs	r0, r0
    256a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    256c:	20400001 	.word	0x20400001

00002570 <_fflush_r>:
    2570:	690b      	ldr	r3, [r1, #16]
    2572:	b570      	push	{r4, r5, r6, lr}
    2574:	0005      	movs	r5, r0
    2576:	000c      	movs	r4, r1
    2578:	2b00      	cmp	r3, #0
    257a:	d101      	bne.n	2580 <_fflush_r+0x10>
    257c:	2000      	movs	r0, #0
    257e:	e01c      	b.n	25ba <_fflush_r+0x4a>
    2580:	2800      	cmp	r0, #0
    2582:	d004      	beq.n	258e <_fflush_r+0x1e>
    2584:	6983      	ldr	r3, [r0, #24]
    2586:	2b00      	cmp	r3, #0
    2588:	d101      	bne.n	258e <_fflush_r+0x1e>
    258a:	f000 f85f 	bl	264c <__sinit>
    258e:	4b0b      	ldr	r3, [pc, #44]	; (25bc <_fflush_r+0x4c>)
    2590:	429c      	cmp	r4, r3
    2592:	d101      	bne.n	2598 <_fflush_r+0x28>
    2594:	686c      	ldr	r4, [r5, #4]
    2596:	e008      	b.n	25aa <_fflush_r+0x3a>
    2598:	4b09      	ldr	r3, [pc, #36]	; (25c0 <_fflush_r+0x50>)
    259a:	429c      	cmp	r4, r3
    259c:	d101      	bne.n	25a2 <_fflush_r+0x32>
    259e:	68ac      	ldr	r4, [r5, #8]
    25a0:	e003      	b.n	25aa <_fflush_r+0x3a>
    25a2:	4b08      	ldr	r3, [pc, #32]	; (25c4 <_fflush_r+0x54>)
    25a4:	429c      	cmp	r4, r3
    25a6:	d100      	bne.n	25aa <_fflush_r+0x3a>
    25a8:	68ec      	ldr	r4, [r5, #12]
    25aa:	220c      	movs	r2, #12
    25ac:	5ea3      	ldrsh	r3, [r4, r2]
    25ae:	2b00      	cmp	r3, #0
    25b0:	d0e4      	beq.n	257c <_fflush_r+0xc>
    25b2:	0021      	movs	r1, r4
    25b4:	0028      	movs	r0, r5
    25b6:	f7ff ff55 	bl	2464 <__sflush_r>
    25ba:	bd70      	pop	{r4, r5, r6, pc}
    25bc:	00002c08 	.word	0x00002c08
    25c0:	00002c28 	.word	0x00002c28
    25c4:	00002c48 	.word	0x00002c48

000025c8 <_cleanup_r>:
    25c8:	b510      	push	{r4, lr}
    25ca:	4902      	ldr	r1, [pc, #8]	; (25d4 <_cleanup_r+0xc>)
    25cc:	f000 f8b0 	bl	2730 <_fwalk_reent>
    25d0:	bd10      	pop	{r4, pc}
    25d2:	46c0      	nop			; (mov r8, r8)
    25d4:	00002571 	.word	0x00002571

000025d8 <std.isra.0>:
    25d8:	2300      	movs	r3, #0
    25da:	b510      	push	{r4, lr}
    25dc:	0004      	movs	r4, r0
    25de:	6003      	str	r3, [r0, #0]
    25e0:	6043      	str	r3, [r0, #4]
    25e2:	6083      	str	r3, [r0, #8]
    25e4:	8181      	strh	r1, [r0, #12]
    25e6:	6643      	str	r3, [r0, #100]	; 0x64
    25e8:	81c2      	strh	r2, [r0, #14]
    25ea:	6103      	str	r3, [r0, #16]
    25ec:	6143      	str	r3, [r0, #20]
    25ee:	6183      	str	r3, [r0, #24]
    25f0:	0019      	movs	r1, r3
    25f2:	2208      	movs	r2, #8
    25f4:	305c      	adds	r0, #92	; 0x5c
    25f6:	f7ff fd38 	bl	206a <memset>
    25fa:	4b05      	ldr	r3, [pc, #20]	; (2610 <std.isra.0+0x38>)
    25fc:	6224      	str	r4, [r4, #32]
    25fe:	6263      	str	r3, [r4, #36]	; 0x24
    2600:	4b04      	ldr	r3, [pc, #16]	; (2614 <std.isra.0+0x3c>)
    2602:	62a3      	str	r3, [r4, #40]	; 0x28
    2604:	4b04      	ldr	r3, [pc, #16]	; (2618 <std.isra.0+0x40>)
    2606:	62e3      	str	r3, [r4, #44]	; 0x2c
    2608:	4b04      	ldr	r3, [pc, #16]	; (261c <std.isra.0+0x44>)
    260a:	6323      	str	r3, [r4, #48]	; 0x30
    260c:	bd10      	pop	{r4, pc}
    260e:	46c0      	nop			; (mov r8, r8)
    2610:	000029ad 	.word	0x000029ad
    2614:	000029d5 	.word	0x000029d5
    2618:	00002a0d 	.word	0x00002a0d
    261c:	00002a39 	.word	0x00002a39

00002620 <__sfmoreglue>:
    2620:	b570      	push	{r4, r5, r6, lr}
    2622:	2568      	movs	r5, #104	; 0x68
    2624:	1e4b      	subs	r3, r1, #1
    2626:	435d      	muls	r5, r3
    2628:	000e      	movs	r6, r1
    262a:	0029      	movs	r1, r5
    262c:	3174      	adds	r1, #116	; 0x74
    262e:	f000 f955 	bl	28dc <_malloc_r>
    2632:	1e04      	subs	r4, r0, #0
    2634:	d008      	beq.n	2648 <__sfmoreglue+0x28>
    2636:	2100      	movs	r1, #0
    2638:	002a      	movs	r2, r5
    263a:	6001      	str	r1, [r0, #0]
    263c:	6046      	str	r6, [r0, #4]
    263e:	300c      	adds	r0, #12
    2640:	60a0      	str	r0, [r4, #8]
    2642:	3268      	adds	r2, #104	; 0x68
    2644:	f7ff fd11 	bl	206a <memset>
    2648:	0020      	movs	r0, r4
    264a:	bd70      	pop	{r4, r5, r6, pc}

0000264c <__sinit>:
    264c:	6983      	ldr	r3, [r0, #24]
    264e:	b513      	push	{r0, r1, r4, lr}
    2650:	0004      	movs	r4, r0
    2652:	2b00      	cmp	r3, #0
    2654:	d128      	bne.n	26a8 <__sinit+0x5c>
    2656:	6483      	str	r3, [r0, #72]	; 0x48
    2658:	64c3      	str	r3, [r0, #76]	; 0x4c
    265a:	6503      	str	r3, [r0, #80]	; 0x50
    265c:	4b13      	ldr	r3, [pc, #76]	; (26ac <__sinit+0x60>)
    265e:	4a14      	ldr	r2, [pc, #80]	; (26b0 <__sinit+0x64>)
    2660:	681b      	ldr	r3, [r3, #0]
    2662:	6282      	str	r2, [r0, #40]	; 0x28
    2664:	9301      	str	r3, [sp, #4]
    2666:	4298      	cmp	r0, r3
    2668:	d101      	bne.n	266e <__sinit+0x22>
    266a:	2301      	movs	r3, #1
    266c:	6183      	str	r3, [r0, #24]
    266e:	0020      	movs	r0, r4
    2670:	f000 f820 	bl	26b4 <__sfp>
    2674:	6060      	str	r0, [r4, #4]
    2676:	0020      	movs	r0, r4
    2678:	f000 f81c 	bl	26b4 <__sfp>
    267c:	60a0      	str	r0, [r4, #8]
    267e:	0020      	movs	r0, r4
    2680:	f000 f818 	bl	26b4 <__sfp>
    2684:	2200      	movs	r2, #0
    2686:	60e0      	str	r0, [r4, #12]
    2688:	2104      	movs	r1, #4
    268a:	6860      	ldr	r0, [r4, #4]
    268c:	f7ff ffa4 	bl	25d8 <std.isra.0>
    2690:	2201      	movs	r2, #1
    2692:	2109      	movs	r1, #9
    2694:	68a0      	ldr	r0, [r4, #8]
    2696:	f7ff ff9f 	bl	25d8 <std.isra.0>
    269a:	2202      	movs	r2, #2
    269c:	2112      	movs	r1, #18
    269e:	68e0      	ldr	r0, [r4, #12]
    26a0:	f7ff ff9a 	bl	25d8 <std.isra.0>
    26a4:	2301      	movs	r3, #1
    26a6:	61a3      	str	r3, [r4, #24]
    26a8:	bd13      	pop	{r0, r1, r4, pc}
    26aa:	46c0      	nop			; (mov r8, r8)
    26ac:	00002c04 	.word	0x00002c04
    26b0:	000025c9 	.word	0x000025c9

000026b4 <__sfp>:
    26b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26b6:	4b1d      	ldr	r3, [pc, #116]	; (272c <__sfp+0x78>)
    26b8:	0006      	movs	r6, r0
    26ba:	681d      	ldr	r5, [r3, #0]
    26bc:	69ab      	ldr	r3, [r5, #24]
    26be:	2b00      	cmp	r3, #0
    26c0:	d102      	bne.n	26c8 <__sfp+0x14>
    26c2:	0028      	movs	r0, r5
    26c4:	f7ff ffc2 	bl	264c <__sinit>
    26c8:	3548      	adds	r5, #72	; 0x48
    26ca:	68ac      	ldr	r4, [r5, #8]
    26cc:	686b      	ldr	r3, [r5, #4]
    26ce:	3b01      	subs	r3, #1
    26d0:	d405      	bmi.n	26de <__sfp+0x2a>
    26d2:	220c      	movs	r2, #12
    26d4:	5ea7      	ldrsh	r7, [r4, r2]
    26d6:	2f00      	cmp	r7, #0
    26d8:	d010      	beq.n	26fc <__sfp+0x48>
    26da:	3468      	adds	r4, #104	; 0x68
    26dc:	e7f7      	b.n	26ce <__sfp+0x1a>
    26de:	682b      	ldr	r3, [r5, #0]
    26e0:	2b00      	cmp	r3, #0
    26e2:	d001      	beq.n	26e8 <__sfp+0x34>
    26e4:	682d      	ldr	r5, [r5, #0]
    26e6:	e7f0      	b.n	26ca <__sfp+0x16>
    26e8:	2104      	movs	r1, #4
    26ea:	0030      	movs	r0, r6
    26ec:	f7ff ff98 	bl	2620 <__sfmoreglue>
    26f0:	6028      	str	r0, [r5, #0]
    26f2:	2800      	cmp	r0, #0
    26f4:	d1f6      	bne.n	26e4 <__sfp+0x30>
    26f6:	230c      	movs	r3, #12
    26f8:	6033      	str	r3, [r6, #0]
    26fa:	e016      	b.n	272a <__sfp+0x76>
    26fc:	2301      	movs	r3, #1
    26fe:	0020      	movs	r0, r4
    2700:	425b      	negs	r3, r3
    2702:	81e3      	strh	r3, [r4, #14]
    2704:	3302      	adds	r3, #2
    2706:	81a3      	strh	r3, [r4, #12]
    2708:	6667      	str	r7, [r4, #100]	; 0x64
    270a:	6027      	str	r7, [r4, #0]
    270c:	60a7      	str	r7, [r4, #8]
    270e:	6067      	str	r7, [r4, #4]
    2710:	6127      	str	r7, [r4, #16]
    2712:	6167      	str	r7, [r4, #20]
    2714:	61a7      	str	r7, [r4, #24]
    2716:	305c      	adds	r0, #92	; 0x5c
    2718:	2208      	movs	r2, #8
    271a:	0039      	movs	r1, r7
    271c:	f7ff fca5 	bl	206a <memset>
    2720:	0020      	movs	r0, r4
    2722:	6367      	str	r7, [r4, #52]	; 0x34
    2724:	63a7      	str	r7, [r4, #56]	; 0x38
    2726:	64a7      	str	r7, [r4, #72]	; 0x48
    2728:	64e7      	str	r7, [r4, #76]	; 0x4c
    272a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    272c:	00002c04 	.word	0x00002c04

00002730 <_fwalk_reent>:
    2730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2732:	0004      	movs	r4, r0
    2734:	0007      	movs	r7, r0
    2736:	2600      	movs	r6, #0
    2738:	9101      	str	r1, [sp, #4]
    273a:	3448      	adds	r4, #72	; 0x48
    273c:	2c00      	cmp	r4, #0
    273e:	d016      	beq.n	276e <_fwalk_reent+0x3e>
    2740:	6863      	ldr	r3, [r4, #4]
    2742:	68a5      	ldr	r5, [r4, #8]
    2744:	9300      	str	r3, [sp, #0]
    2746:	9b00      	ldr	r3, [sp, #0]
    2748:	3b01      	subs	r3, #1
    274a:	9300      	str	r3, [sp, #0]
    274c:	d40d      	bmi.n	276a <_fwalk_reent+0x3a>
    274e:	89ab      	ldrh	r3, [r5, #12]
    2750:	2b01      	cmp	r3, #1
    2752:	d908      	bls.n	2766 <_fwalk_reent+0x36>
    2754:	220e      	movs	r2, #14
    2756:	5eab      	ldrsh	r3, [r5, r2]
    2758:	3301      	adds	r3, #1
    275a:	d004      	beq.n	2766 <_fwalk_reent+0x36>
    275c:	0029      	movs	r1, r5
    275e:	0038      	movs	r0, r7
    2760:	9b01      	ldr	r3, [sp, #4]
    2762:	4798      	blx	r3
    2764:	4306      	orrs	r6, r0
    2766:	3568      	adds	r5, #104	; 0x68
    2768:	e7ed      	b.n	2746 <_fwalk_reent+0x16>
    276a:	6824      	ldr	r4, [r4, #0]
    276c:	e7e6      	b.n	273c <_fwalk_reent+0xc>
    276e:	0030      	movs	r0, r6
    2770:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00002774 <__swhatbuf_r>:
    2774:	b570      	push	{r4, r5, r6, lr}
    2776:	000e      	movs	r6, r1
    2778:	001d      	movs	r5, r3
    277a:	230e      	movs	r3, #14
    277c:	5ec9      	ldrsh	r1, [r1, r3]
    277e:	b090      	sub	sp, #64	; 0x40
    2780:	0014      	movs	r4, r2
    2782:	2900      	cmp	r1, #0
    2784:	da06      	bge.n	2794 <__swhatbuf_r+0x20>
    2786:	2300      	movs	r3, #0
    2788:	602b      	str	r3, [r5, #0]
    278a:	89b3      	ldrh	r3, [r6, #12]
    278c:	061b      	lsls	r3, r3, #24
    278e:	d50f      	bpl.n	27b0 <__swhatbuf_r+0x3c>
    2790:	2340      	movs	r3, #64	; 0x40
    2792:	e00f      	b.n	27b4 <__swhatbuf_r+0x40>
    2794:	aa01      	add	r2, sp, #4
    2796:	f000 f97b 	bl	2a90 <_fstat_r>
    279a:	2800      	cmp	r0, #0
    279c:	dbf3      	blt.n	2786 <__swhatbuf_r+0x12>
    279e:	23f0      	movs	r3, #240	; 0xf0
    27a0:	9a02      	ldr	r2, [sp, #8]
    27a2:	021b      	lsls	r3, r3, #8
    27a4:	4013      	ands	r3, r2
    27a6:	4a05      	ldr	r2, [pc, #20]	; (27bc <__swhatbuf_r+0x48>)
    27a8:	189b      	adds	r3, r3, r2
    27aa:	425a      	negs	r2, r3
    27ac:	4153      	adcs	r3, r2
    27ae:	602b      	str	r3, [r5, #0]
    27b0:	2380      	movs	r3, #128	; 0x80
    27b2:	00db      	lsls	r3, r3, #3
    27b4:	2000      	movs	r0, #0
    27b6:	6023      	str	r3, [r4, #0]
    27b8:	b010      	add	sp, #64	; 0x40
    27ba:	bd70      	pop	{r4, r5, r6, pc}
    27bc:	ffffe000 	.word	0xffffe000

000027c0 <__smakebuf_r>:
    27c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    27c2:	2602      	movs	r6, #2
    27c4:	898b      	ldrh	r3, [r1, #12]
    27c6:	0005      	movs	r5, r0
    27c8:	000c      	movs	r4, r1
    27ca:	4233      	tst	r3, r6
    27cc:	d110      	bne.n	27f0 <__smakebuf_r+0x30>
    27ce:	ab01      	add	r3, sp, #4
    27d0:	466a      	mov	r2, sp
    27d2:	f7ff ffcf 	bl	2774 <__swhatbuf_r>
    27d6:	9900      	ldr	r1, [sp, #0]
    27d8:	0007      	movs	r7, r0
    27da:	0028      	movs	r0, r5
    27dc:	f000 f87e 	bl	28dc <_malloc_r>
    27e0:	2800      	cmp	r0, #0
    27e2:	d10c      	bne.n	27fe <__smakebuf_r+0x3e>
    27e4:	220c      	movs	r2, #12
    27e6:	5ea3      	ldrsh	r3, [r4, r2]
    27e8:	059a      	lsls	r2, r3, #22
    27ea:	d423      	bmi.n	2834 <__smakebuf_r+0x74>
    27ec:	4333      	orrs	r3, r6
    27ee:	81a3      	strh	r3, [r4, #12]
    27f0:	0023      	movs	r3, r4
    27f2:	3347      	adds	r3, #71	; 0x47
    27f4:	6023      	str	r3, [r4, #0]
    27f6:	6123      	str	r3, [r4, #16]
    27f8:	2301      	movs	r3, #1
    27fa:	6163      	str	r3, [r4, #20]
    27fc:	e01a      	b.n	2834 <__smakebuf_r+0x74>
    27fe:	2280      	movs	r2, #128	; 0x80
    2800:	4b0d      	ldr	r3, [pc, #52]	; (2838 <__smakebuf_r+0x78>)
    2802:	62ab      	str	r3, [r5, #40]	; 0x28
    2804:	89a3      	ldrh	r3, [r4, #12]
    2806:	6020      	str	r0, [r4, #0]
    2808:	4313      	orrs	r3, r2
    280a:	81a3      	strh	r3, [r4, #12]
    280c:	9b00      	ldr	r3, [sp, #0]
    280e:	6120      	str	r0, [r4, #16]
    2810:	6163      	str	r3, [r4, #20]
    2812:	9b01      	ldr	r3, [sp, #4]
    2814:	2b00      	cmp	r3, #0
    2816:	d00a      	beq.n	282e <__smakebuf_r+0x6e>
    2818:	230e      	movs	r3, #14
    281a:	5ee1      	ldrsh	r1, [r4, r3]
    281c:	0028      	movs	r0, r5
    281e:	f000 f949 	bl	2ab4 <_isatty_r>
    2822:	2800      	cmp	r0, #0
    2824:	d003      	beq.n	282e <__smakebuf_r+0x6e>
    2826:	2201      	movs	r2, #1
    2828:	89a3      	ldrh	r3, [r4, #12]
    282a:	4313      	orrs	r3, r2
    282c:	81a3      	strh	r3, [r4, #12]
    282e:	89a3      	ldrh	r3, [r4, #12]
    2830:	431f      	orrs	r7, r3
    2832:	81a7      	strh	r7, [r4, #12]
    2834:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2836:	46c0      	nop			; (mov r8, r8)
    2838:	000025c9 	.word	0x000025c9

0000283c <malloc>:
    283c:	b510      	push	{r4, lr}
    283e:	4b03      	ldr	r3, [pc, #12]	; (284c <malloc+0x10>)
    2840:	0001      	movs	r1, r0
    2842:	6818      	ldr	r0, [r3, #0]
    2844:	f000 f84a 	bl	28dc <_malloc_r>
    2848:	bd10      	pop	{r4, pc}
    284a:	46c0      	nop			; (mov r8, r8)
    284c:	2000006c 	.word	0x2000006c

00002850 <_free_r>:
    2850:	b530      	push	{r4, r5, lr}
    2852:	2900      	cmp	r1, #0
    2854:	d03e      	beq.n	28d4 <_free_r+0x84>
    2856:	3904      	subs	r1, #4
    2858:	680b      	ldr	r3, [r1, #0]
    285a:	2b00      	cmp	r3, #0
    285c:	da00      	bge.n	2860 <_free_r+0x10>
    285e:	18c9      	adds	r1, r1, r3
    2860:	4a1d      	ldr	r2, [pc, #116]	; (28d8 <_free_r+0x88>)
    2862:	6813      	ldr	r3, [r2, #0]
    2864:	0014      	movs	r4, r2
    2866:	2b00      	cmp	r3, #0
    2868:	d102      	bne.n	2870 <_free_r+0x20>
    286a:	604b      	str	r3, [r1, #4]
    286c:	6011      	str	r1, [r2, #0]
    286e:	e031      	b.n	28d4 <_free_r+0x84>
    2870:	428b      	cmp	r3, r1
    2872:	d90d      	bls.n	2890 <_free_r+0x40>
    2874:	680a      	ldr	r2, [r1, #0]
    2876:	1888      	adds	r0, r1, r2
    2878:	4283      	cmp	r3, r0
    287a:	d103      	bne.n	2884 <_free_r+0x34>
    287c:	6818      	ldr	r0, [r3, #0]
    287e:	685b      	ldr	r3, [r3, #4]
    2880:	1882      	adds	r2, r0, r2
    2882:	600a      	str	r2, [r1, #0]
    2884:	604b      	str	r3, [r1, #4]
    2886:	6021      	str	r1, [r4, #0]
    2888:	e024      	b.n	28d4 <_free_r+0x84>
    288a:	428a      	cmp	r2, r1
    288c:	d803      	bhi.n	2896 <_free_r+0x46>
    288e:	0013      	movs	r3, r2
    2890:	685a      	ldr	r2, [r3, #4]
    2892:	2a00      	cmp	r2, #0
    2894:	d1f9      	bne.n	288a <_free_r+0x3a>
    2896:	681d      	ldr	r5, [r3, #0]
    2898:	195c      	adds	r4, r3, r5
    289a:	428c      	cmp	r4, r1
    289c:	d10b      	bne.n	28b6 <_free_r+0x66>
    289e:	6809      	ldr	r1, [r1, #0]
    28a0:	1869      	adds	r1, r5, r1
    28a2:	1858      	adds	r0, r3, r1
    28a4:	6019      	str	r1, [r3, #0]
    28a6:	4282      	cmp	r2, r0
    28a8:	d114      	bne.n	28d4 <_free_r+0x84>
    28aa:	6810      	ldr	r0, [r2, #0]
    28ac:	6852      	ldr	r2, [r2, #4]
    28ae:	1841      	adds	r1, r0, r1
    28b0:	6019      	str	r1, [r3, #0]
    28b2:	605a      	str	r2, [r3, #4]
    28b4:	e00e      	b.n	28d4 <_free_r+0x84>
    28b6:	428c      	cmp	r4, r1
    28b8:	d902      	bls.n	28c0 <_free_r+0x70>
    28ba:	230c      	movs	r3, #12
    28bc:	6003      	str	r3, [r0, #0]
    28be:	e009      	b.n	28d4 <_free_r+0x84>
    28c0:	6808      	ldr	r0, [r1, #0]
    28c2:	180c      	adds	r4, r1, r0
    28c4:	42a2      	cmp	r2, r4
    28c6:	d103      	bne.n	28d0 <_free_r+0x80>
    28c8:	6814      	ldr	r4, [r2, #0]
    28ca:	6852      	ldr	r2, [r2, #4]
    28cc:	1820      	adds	r0, r4, r0
    28ce:	6008      	str	r0, [r1, #0]
    28d0:	604a      	str	r2, [r1, #4]
    28d2:	6059      	str	r1, [r3, #4]
    28d4:	bd30      	pop	{r4, r5, pc}
    28d6:	46c0      	nop			; (mov r8, r8)
    28d8:	200000d0 	.word	0x200000d0

000028dc <_malloc_r>:
    28dc:	2303      	movs	r3, #3
    28de:	b570      	push	{r4, r5, r6, lr}
    28e0:	1ccd      	adds	r5, r1, #3
    28e2:	439d      	bics	r5, r3
    28e4:	3508      	adds	r5, #8
    28e6:	0006      	movs	r6, r0
    28e8:	2d0c      	cmp	r5, #12
    28ea:	d201      	bcs.n	28f0 <_malloc_r+0x14>
    28ec:	250c      	movs	r5, #12
    28ee:	e005      	b.n	28fc <_malloc_r+0x20>
    28f0:	2d00      	cmp	r5, #0
    28f2:	da03      	bge.n	28fc <_malloc_r+0x20>
    28f4:	230c      	movs	r3, #12
    28f6:	2000      	movs	r0, #0
    28f8:	6033      	str	r3, [r6, #0]
    28fa:	e040      	b.n	297e <_malloc_r+0xa2>
    28fc:	42a9      	cmp	r1, r5
    28fe:	d8f9      	bhi.n	28f4 <_malloc_r+0x18>
    2900:	4b1f      	ldr	r3, [pc, #124]	; (2980 <_malloc_r+0xa4>)
    2902:	681c      	ldr	r4, [r3, #0]
    2904:	001a      	movs	r2, r3
    2906:	0021      	movs	r1, r4
    2908:	2900      	cmp	r1, #0
    290a:	d013      	beq.n	2934 <_malloc_r+0x58>
    290c:	680b      	ldr	r3, [r1, #0]
    290e:	1b5b      	subs	r3, r3, r5
    2910:	d40d      	bmi.n	292e <_malloc_r+0x52>
    2912:	2b0b      	cmp	r3, #11
    2914:	d902      	bls.n	291c <_malloc_r+0x40>
    2916:	600b      	str	r3, [r1, #0]
    2918:	18cc      	adds	r4, r1, r3
    291a:	e01e      	b.n	295a <_malloc_r+0x7e>
    291c:	428c      	cmp	r4, r1
    291e:	d102      	bne.n	2926 <_malloc_r+0x4a>
    2920:	6863      	ldr	r3, [r4, #4]
    2922:	6013      	str	r3, [r2, #0]
    2924:	e01a      	b.n	295c <_malloc_r+0x80>
    2926:	684b      	ldr	r3, [r1, #4]
    2928:	6063      	str	r3, [r4, #4]
    292a:	000c      	movs	r4, r1
    292c:	e016      	b.n	295c <_malloc_r+0x80>
    292e:	000c      	movs	r4, r1
    2930:	6849      	ldr	r1, [r1, #4]
    2932:	e7e9      	b.n	2908 <_malloc_r+0x2c>
    2934:	4c13      	ldr	r4, [pc, #76]	; (2984 <_malloc_r+0xa8>)
    2936:	6823      	ldr	r3, [r4, #0]
    2938:	2b00      	cmp	r3, #0
    293a:	d103      	bne.n	2944 <_malloc_r+0x68>
    293c:	0030      	movs	r0, r6
    293e:	f000 f823 	bl	2988 <_sbrk_r>
    2942:	6020      	str	r0, [r4, #0]
    2944:	0029      	movs	r1, r5
    2946:	0030      	movs	r0, r6
    2948:	f000 f81e 	bl	2988 <_sbrk_r>
    294c:	1c43      	adds	r3, r0, #1
    294e:	d0d1      	beq.n	28f4 <_malloc_r+0x18>
    2950:	2303      	movs	r3, #3
    2952:	1cc4      	adds	r4, r0, #3
    2954:	439c      	bics	r4, r3
    2956:	42a0      	cmp	r0, r4
    2958:	d10a      	bne.n	2970 <_malloc_r+0x94>
    295a:	6025      	str	r5, [r4, #0]
    295c:	0020      	movs	r0, r4
    295e:	2207      	movs	r2, #7
    2960:	300b      	adds	r0, #11
    2962:	1d23      	adds	r3, r4, #4
    2964:	4390      	bics	r0, r2
    2966:	1ac3      	subs	r3, r0, r3
    2968:	d009      	beq.n	297e <_malloc_r+0xa2>
    296a:	425a      	negs	r2, r3
    296c:	50e2      	str	r2, [r4, r3]
    296e:	e006      	b.n	297e <_malloc_r+0xa2>
    2970:	1a21      	subs	r1, r4, r0
    2972:	0030      	movs	r0, r6
    2974:	f000 f808 	bl	2988 <_sbrk_r>
    2978:	1c43      	adds	r3, r0, #1
    297a:	d1ee      	bne.n	295a <_malloc_r+0x7e>
    297c:	e7ba      	b.n	28f4 <_malloc_r+0x18>
    297e:	bd70      	pop	{r4, r5, r6, pc}
    2980:	200000d0 	.word	0x200000d0
    2984:	200000cc 	.word	0x200000cc

00002988 <_sbrk_r>:
    2988:	2300      	movs	r3, #0
    298a:	b570      	push	{r4, r5, r6, lr}
    298c:	4c06      	ldr	r4, [pc, #24]	; (29a8 <_sbrk_r+0x20>)
    298e:	0005      	movs	r5, r0
    2990:	0008      	movs	r0, r1
    2992:	6023      	str	r3, [r4, #0]
    2994:	f7ff fa0c 	bl	1db0 <_sbrk>
    2998:	1c43      	adds	r3, r0, #1
    299a:	d103      	bne.n	29a4 <_sbrk_r+0x1c>
    299c:	6823      	ldr	r3, [r4, #0]
    299e:	2b00      	cmp	r3, #0
    29a0:	d000      	beq.n	29a4 <_sbrk_r+0x1c>
    29a2:	602b      	str	r3, [r5, #0]
    29a4:	bd70      	pop	{r4, r5, r6, pc}
    29a6:	46c0      	nop			; (mov r8, r8)
    29a8:	2000018c 	.word	0x2000018c

000029ac <__sread>:
    29ac:	b570      	push	{r4, r5, r6, lr}
    29ae:	000c      	movs	r4, r1
    29b0:	250e      	movs	r5, #14
    29b2:	5f49      	ldrsh	r1, [r1, r5]
    29b4:	f000 f8a4 	bl	2b00 <_read_r>
    29b8:	2800      	cmp	r0, #0
    29ba:	db03      	blt.n	29c4 <__sread+0x18>
    29bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    29be:	181b      	adds	r3, r3, r0
    29c0:	6563      	str	r3, [r4, #84]	; 0x54
    29c2:	e003      	b.n	29cc <__sread+0x20>
    29c4:	89a2      	ldrh	r2, [r4, #12]
    29c6:	4b02      	ldr	r3, [pc, #8]	; (29d0 <__sread+0x24>)
    29c8:	4013      	ands	r3, r2
    29ca:	81a3      	strh	r3, [r4, #12]
    29cc:	bd70      	pop	{r4, r5, r6, pc}
    29ce:	46c0      	nop			; (mov r8, r8)
    29d0:	ffffefff 	.word	0xffffefff

000029d4 <__swrite>:
    29d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29d6:	001f      	movs	r7, r3
    29d8:	898b      	ldrh	r3, [r1, #12]
    29da:	0005      	movs	r5, r0
    29dc:	000c      	movs	r4, r1
    29de:	0016      	movs	r6, r2
    29e0:	05db      	lsls	r3, r3, #23
    29e2:	d505      	bpl.n	29f0 <__swrite+0x1c>
    29e4:	230e      	movs	r3, #14
    29e6:	5ec9      	ldrsh	r1, [r1, r3]
    29e8:	2200      	movs	r2, #0
    29ea:	2302      	movs	r3, #2
    29ec:	f000 f874 	bl	2ad8 <_lseek_r>
    29f0:	89a2      	ldrh	r2, [r4, #12]
    29f2:	4b05      	ldr	r3, [pc, #20]	; (2a08 <__swrite+0x34>)
    29f4:	0028      	movs	r0, r5
    29f6:	4013      	ands	r3, r2
    29f8:	81a3      	strh	r3, [r4, #12]
    29fa:	0032      	movs	r2, r6
    29fc:	230e      	movs	r3, #14
    29fe:	5ee1      	ldrsh	r1, [r4, r3]
    2a00:	003b      	movs	r3, r7
    2a02:	f000 f81f 	bl	2a44 <_write_r>
    2a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a08:	ffffefff 	.word	0xffffefff

00002a0c <__sseek>:
    2a0c:	b570      	push	{r4, r5, r6, lr}
    2a0e:	000c      	movs	r4, r1
    2a10:	250e      	movs	r5, #14
    2a12:	5f49      	ldrsh	r1, [r1, r5]
    2a14:	f000 f860 	bl	2ad8 <_lseek_r>
    2a18:	89a3      	ldrh	r3, [r4, #12]
    2a1a:	1c42      	adds	r2, r0, #1
    2a1c:	d103      	bne.n	2a26 <__sseek+0x1a>
    2a1e:	4a05      	ldr	r2, [pc, #20]	; (2a34 <__sseek+0x28>)
    2a20:	4013      	ands	r3, r2
    2a22:	81a3      	strh	r3, [r4, #12]
    2a24:	e004      	b.n	2a30 <__sseek+0x24>
    2a26:	2280      	movs	r2, #128	; 0x80
    2a28:	0152      	lsls	r2, r2, #5
    2a2a:	4313      	orrs	r3, r2
    2a2c:	81a3      	strh	r3, [r4, #12]
    2a2e:	6560      	str	r0, [r4, #84]	; 0x54
    2a30:	bd70      	pop	{r4, r5, r6, pc}
    2a32:	46c0      	nop			; (mov r8, r8)
    2a34:	ffffefff 	.word	0xffffefff

00002a38 <__sclose>:
    2a38:	b510      	push	{r4, lr}
    2a3a:	230e      	movs	r3, #14
    2a3c:	5ec9      	ldrsh	r1, [r1, r3]
    2a3e:	f000 f815 	bl	2a6c <_close_r>
    2a42:	bd10      	pop	{r4, pc}

00002a44 <_write_r>:
    2a44:	b570      	push	{r4, r5, r6, lr}
    2a46:	0005      	movs	r5, r0
    2a48:	0008      	movs	r0, r1
    2a4a:	0011      	movs	r1, r2
    2a4c:	2200      	movs	r2, #0
    2a4e:	4c06      	ldr	r4, [pc, #24]	; (2a68 <_write_r+0x24>)
    2a50:	6022      	str	r2, [r4, #0]
    2a52:	001a      	movs	r2, r3
    2a54:	f7fd fd42 	bl	4dc <_write>
    2a58:	1c43      	adds	r3, r0, #1
    2a5a:	d103      	bne.n	2a64 <_write_r+0x20>
    2a5c:	6823      	ldr	r3, [r4, #0]
    2a5e:	2b00      	cmp	r3, #0
    2a60:	d000      	beq.n	2a64 <_write_r+0x20>
    2a62:	602b      	str	r3, [r5, #0]
    2a64:	bd70      	pop	{r4, r5, r6, pc}
    2a66:	46c0      	nop			; (mov r8, r8)
    2a68:	2000018c 	.word	0x2000018c

00002a6c <_close_r>:
    2a6c:	2300      	movs	r3, #0
    2a6e:	b570      	push	{r4, r5, r6, lr}
    2a70:	4c06      	ldr	r4, [pc, #24]	; (2a8c <_close_r+0x20>)
    2a72:	0005      	movs	r5, r0
    2a74:	0008      	movs	r0, r1
    2a76:	6023      	str	r3, [r4, #0]
    2a78:	f7ff f9ac 	bl	1dd4 <_close>
    2a7c:	1c43      	adds	r3, r0, #1
    2a7e:	d103      	bne.n	2a88 <_close_r+0x1c>
    2a80:	6823      	ldr	r3, [r4, #0]
    2a82:	2b00      	cmp	r3, #0
    2a84:	d000      	beq.n	2a88 <_close_r+0x1c>
    2a86:	602b      	str	r3, [r5, #0]
    2a88:	bd70      	pop	{r4, r5, r6, pc}
    2a8a:	46c0      	nop			; (mov r8, r8)
    2a8c:	2000018c 	.word	0x2000018c

00002a90 <_fstat_r>:
    2a90:	2300      	movs	r3, #0
    2a92:	b570      	push	{r4, r5, r6, lr}
    2a94:	4c06      	ldr	r4, [pc, #24]	; (2ab0 <_fstat_r+0x20>)
    2a96:	0005      	movs	r5, r0
    2a98:	0008      	movs	r0, r1
    2a9a:	0011      	movs	r1, r2
    2a9c:	6023      	str	r3, [r4, #0]
    2a9e:	f7ff f99d 	bl	1ddc <_fstat>
    2aa2:	1c43      	adds	r3, r0, #1
    2aa4:	d103      	bne.n	2aae <_fstat_r+0x1e>
    2aa6:	6823      	ldr	r3, [r4, #0]
    2aa8:	2b00      	cmp	r3, #0
    2aaa:	d000      	beq.n	2aae <_fstat_r+0x1e>
    2aac:	602b      	str	r3, [r5, #0]
    2aae:	bd70      	pop	{r4, r5, r6, pc}
    2ab0:	2000018c 	.word	0x2000018c

00002ab4 <_isatty_r>:
    2ab4:	2300      	movs	r3, #0
    2ab6:	b570      	push	{r4, r5, r6, lr}
    2ab8:	4c06      	ldr	r4, [pc, #24]	; (2ad4 <_isatty_r+0x20>)
    2aba:	0005      	movs	r5, r0
    2abc:	0008      	movs	r0, r1
    2abe:	6023      	str	r3, [r4, #0]
    2ac0:	f7ff f992 	bl	1de8 <_isatty>
    2ac4:	1c43      	adds	r3, r0, #1
    2ac6:	d103      	bne.n	2ad0 <_isatty_r+0x1c>
    2ac8:	6823      	ldr	r3, [r4, #0]
    2aca:	2b00      	cmp	r3, #0
    2acc:	d000      	beq.n	2ad0 <_isatty_r+0x1c>
    2ace:	602b      	str	r3, [r5, #0]
    2ad0:	bd70      	pop	{r4, r5, r6, pc}
    2ad2:	46c0      	nop			; (mov r8, r8)
    2ad4:	2000018c 	.word	0x2000018c

00002ad8 <_lseek_r>:
    2ad8:	b570      	push	{r4, r5, r6, lr}
    2ada:	0005      	movs	r5, r0
    2adc:	0008      	movs	r0, r1
    2ade:	0011      	movs	r1, r2
    2ae0:	2200      	movs	r2, #0
    2ae2:	4c06      	ldr	r4, [pc, #24]	; (2afc <_lseek_r+0x24>)
    2ae4:	6022      	str	r2, [r4, #0]
    2ae6:	001a      	movs	r2, r3
    2ae8:	f7ff f980 	bl	1dec <_lseek>
    2aec:	1c43      	adds	r3, r0, #1
    2aee:	d103      	bne.n	2af8 <_lseek_r+0x20>
    2af0:	6823      	ldr	r3, [r4, #0]
    2af2:	2b00      	cmp	r3, #0
    2af4:	d000      	beq.n	2af8 <_lseek_r+0x20>
    2af6:	602b      	str	r3, [r5, #0]
    2af8:	bd70      	pop	{r4, r5, r6, pc}
    2afa:	46c0      	nop			; (mov r8, r8)
    2afc:	2000018c 	.word	0x2000018c

00002b00 <_read_r>:
    2b00:	b570      	push	{r4, r5, r6, lr}
    2b02:	0005      	movs	r5, r0
    2b04:	0008      	movs	r0, r1
    2b06:	0011      	movs	r1, r2
    2b08:	2200      	movs	r2, #0
    2b0a:	4c06      	ldr	r4, [pc, #24]	; (2b24 <_read_r+0x24>)
    2b0c:	6022      	str	r2, [r4, #0]
    2b0e:	001a      	movs	r2, r3
    2b10:	f7fd fcc4 	bl	49c <_read>
    2b14:	1c43      	adds	r3, r0, #1
    2b16:	d103      	bne.n	2b20 <_read_r+0x20>
    2b18:	6823      	ldr	r3, [r4, #0]
    2b1a:	2b00      	cmp	r3, #0
    2b1c:	d000      	beq.n	2b20 <_read_r+0x20>
    2b1e:	602b      	str	r3, [r5, #0]
    2b20:	bd70      	pop	{r4, r5, r6, pc}
    2b22:	46c0      	nop			; (mov r8, r8)
    2b24:	2000018c 	.word	0x2000018c
    2b28:	42000800 	.word	0x42000800
    2b2c:	42000c00 	.word	0x42000c00
    2b30:	42001000 	.word	0x42001000
    2b34:	42001400 	.word	0x42001400
    2b38:	42001800 	.word	0x42001800
    2b3c:	42001c00 	.word	0x42001c00

00002b40 <_tcc_gclk_ids>:
    2b40:	001b1a1a                                ....

00002b44 <_tcc_apbcmasks>:
    2b44:	00000100 00000200 00000400              ............

00002b50 <_tcc_maxs>:
    2b50:	00ffffff 00ffffff 0000ffff              ............

00002b5c <_tcc_cc_nums>:
    2b5c:	00020204                                ....

00002b60 <_tcc_ow_nums>:
    2b60:	00020408                                ....

00002b64 <_tcc_intflag>:
    2b64:	00000001 00000002 00000004 00000008     ................
    2b74:	00001000 00002000 00004000 00008000     ..... ...@......
    2b84:	00010000 00020000 00040000 00080000     ................
    2b94:	0c0b0a09 00000e0d 0000172a 00001726     ........*...&...
    2ba4:	00001726 00001784 00001784 0000173e     &...........>...
    2bb4:	00001730 00001744 00001772 00001810     0...D...r.......
    2bc4:	000017f0 000017f0 0000187c 00001802     ........|.......
    2bd4:	0000181e 000017f4 0000182c 0000186c     ........,...l...
    2be4:	6b636162 646f6e20 65732065 20707574     back node setup 
    2bf4:	706d6f63 6574656c 00000000 00000043     complete....C...

00002c04 <_global_impure_ptr>:
    2c04:	2000000c                                ... 

00002c08 <__sf_fake_stdin>:
	...

00002c28 <__sf_fake_stdout>:
	...

00002c48 <__sf_fake_stderr>:
	...

00002c68 <_init>:
    2c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c6a:	46c0      	nop			; (mov r8, r8)
    2c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2c6e:	bc08      	pop	{r3}
    2c70:	469e      	mov	lr, r3
    2c72:	4770      	bx	lr

00002c74 <__init_array_start>:
    2c74:	000000dd 	.word	0x000000dd

00002c78 <_fini>:
    2c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c7a:	46c0      	nop			; (mov r8, r8)
    2c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2c7e:	bc08      	pop	{r3}
    2c80:	469e      	mov	lr, r3
    2c82:	4770      	bx	lr

00002c84 <__fini_array_start>:
    2c84:	000000b5 	.word	0x000000b5
