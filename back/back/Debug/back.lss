
back.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002978  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00002978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d4  20000070  000029e8  00020070  2**2
                  ALLOC
  3 .stack        00002004  20000144  00002abc  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   00027d46  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000039bd  00000000  00000000  00047e37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000434c  00000000  00000000  0004b7f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004e8  00000000  00000000  0004fb40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000528  00000000  00000000  00050028  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019900  00000000  00000000  00050550  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c2d3  00000000  00000000  00069e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00084117  00000000  00000000  00076123  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000012c0  00000000  00000000  000fa23c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 21 00 20 f9 14 00 00 f5 14 00 00 f5 14 00 00     H!. ............
	...
      2c:	f5 14 00 00 00 00 00 00 00 00 00 00 f5 14 00 00     ................
      3c:	f5 14 00 00 f5 14 00 00 f5 14 00 00 f5 14 00 00     ................
      4c:	f5 14 00 00 f5 14 00 00 f5 14 00 00 f5 14 00 00     ................
      5c:	f5 14 00 00 f5 14 00 00 c1 0d 00 00 d1 0d 00 00     ................
      6c:	e1 0d 00 00 f1 0d 00 00 01 0e 00 00 11 0e 00 00     ................
      7c:	25 07 00 00 35 07 00 00 45 07 00 00 f5 14 00 00     %...5...E.......
      8c:	f5 14 00 00 f5 14 00 00 00 00 00 00 00 00 00 00     ................
      9c:	f5 14 00 00 f5 14 00 00 00 00 00 00 f5 14 00 00     ................
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00002978 	.word	0x00002978

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00002978 	.word	0x00002978
     10c:	00002978 	.word	0x00002978
     110:	00000000 	.word	0x00000000

00000114 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	46de      	mov	lr, fp
     118:	4657      	mov	r7, sl
     11a:	464e      	mov	r6, r9
     11c:	4645      	mov	r5, r8
     11e:	b5e0      	push	{r5, r6, r7, lr}
     120:	b087      	sub	sp, #28
     122:	4680      	mov	r8, r0
     124:	9104      	str	r1, [sp, #16]
     126:	0016      	movs	r6, r2
     128:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     12a:	2200      	movs	r2, #0
     12c:	2300      	movs	r3, #0
     12e:	2100      	movs	r1, #0
     130:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     132:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     134:	2001      	movs	r0, #1
     136:	0021      	movs	r1, r4
     138:	9600      	str	r6, [sp, #0]
     13a:	9701      	str	r7, [sp, #4]
     13c:	465c      	mov	r4, fp
     13e:	9403      	str	r4, [sp, #12]
     140:	4644      	mov	r4, r8
     142:	9405      	str	r4, [sp, #20]
     144:	e013      	b.n	16e <long_division+0x5a>
     146:	2420      	movs	r4, #32
     148:	1a64      	subs	r4, r4, r1
     14a:	0005      	movs	r5, r0
     14c:	40e5      	lsrs	r5, r4
     14e:	46a8      	mov	r8, r5
     150:	e014      	b.n	17c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     152:	9c00      	ldr	r4, [sp, #0]
     154:	9d01      	ldr	r5, [sp, #4]
     156:	1b12      	subs	r2, r2, r4
     158:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     15a:	465c      	mov	r4, fp
     15c:	464d      	mov	r5, r9
     15e:	432c      	orrs	r4, r5
     160:	46a3      	mov	fp, r4
     162:	9c03      	ldr	r4, [sp, #12]
     164:	4645      	mov	r5, r8
     166:	432c      	orrs	r4, r5
     168:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     16a:	3901      	subs	r1, #1
     16c:	d325      	bcc.n	1ba <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     16e:	2420      	movs	r4, #32
     170:	4264      	negs	r4, r4
     172:	190c      	adds	r4, r1, r4
     174:	d4e7      	bmi.n	146 <long_division+0x32>
     176:	0005      	movs	r5, r0
     178:	40a5      	lsls	r5, r4
     17a:	46a8      	mov	r8, r5
     17c:	0004      	movs	r4, r0
     17e:	408c      	lsls	r4, r1
     180:	46a1      	mov	r9, r4
		r = r << 1;
     182:	1892      	adds	r2, r2, r2
     184:	415b      	adcs	r3, r3
     186:	0014      	movs	r4, r2
     188:	001d      	movs	r5, r3
		if (n & bit_shift) {
     18a:	9e05      	ldr	r6, [sp, #20]
     18c:	464f      	mov	r7, r9
     18e:	403e      	ands	r6, r7
     190:	46b4      	mov	ip, r6
     192:	9e04      	ldr	r6, [sp, #16]
     194:	4647      	mov	r7, r8
     196:	403e      	ands	r6, r7
     198:	46b2      	mov	sl, r6
     19a:	4666      	mov	r6, ip
     19c:	4657      	mov	r7, sl
     19e:	433e      	orrs	r6, r7
     1a0:	d003      	beq.n	1aa <long_division+0x96>
			r |= 0x01;
     1a2:	0006      	movs	r6, r0
     1a4:	4326      	orrs	r6, r4
     1a6:	0032      	movs	r2, r6
     1a8:	002b      	movs	r3, r5
		if (r >= d) {
     1aa:	9c00      	ldr	r4, [sp, #0]
     1ac:	9d01      	ldr	r5, [sp, #4]
     1ae:	429d      	cmp	r5, r3
     1b0:	d8db      	bhi.n	16a <long_division+0x56>
     1b2:	d1ce      	bne.n	152 <long_division+0x3e>
     1b4:	4294      	cmp	r4, r2
     1b6:	d8d8      	bhi.n	16a <long_division+0x56>
     1b8:	e7cb      	b.n	152 <long_division+0x3e>
     1ba:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     1bc:	4658      	mov	r0, fp
     1be:	0019      	movs	r1, r3
     1c0:	b007      	add	sp, #28
     1c2:	bc3c      	pop	{r2, r3, r4, r5}
     1c4:	4690      	mov	r8, r2
     1c6:	4699      	mov	r9, r3
     1c8:	46a2      	mov	sl, r4
     1ca:	46ab      	mov	fp, r5
     1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000001ce <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     1ce:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     1d0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1d2:	2340      	movs	r3, #64	; 0x40
     1d4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     1d6:	4281      	cmp	r1, r0
     1d8:	d202      	bcs.n	1e0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     1da:	0018      	movs	r0, r3
     1dc:	bd10      	pop	{r4, pc}
		baud_calculated++;
     1de:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     1e0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     1e2:	1c63      	adds	r3, r4, #1
     1e4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     1e6:	4288      	cmp	r0, r1
     1e8:	d9f9      	bls.n	1de <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1ea:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     1ec:	2cff      	cmp	r4, #255	; 0xff
     1ee:	d8f4      	bhi.n	1da <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     1f0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     1f2:	2300      	movs	r3, #0
     1f4:	e7f1      	b.n	1da <_sercom_get_sync_baud_val+0xc>
	...

000001f8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	b083      	sub	sp, #12
     1fc:	000f      	movs	r7, r1
     1fe:	0016      	movs	r6, r2
     200:	aa08      	add	r2, sp, #32
     202:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     204:	0004      	movs	r4, r0
     206:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     208:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     20a:	42bc      	cmp	r4, r7
     20c:	d902      	bls.n	214 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     20e:	0010      	movs	r0, r2
     210:	b003      	add	sp, #12
     212:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     214:	2b00      	cmp	r3, #0
     216:	d114      	bne.n	242 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     218:	0002      	movs	r2, r0
     21a:	0008      	movs	r0, r1
     21c:	2100      	movs	r1, #0
     21e:	4c19      	ldr	r4, [pc, #100]	; (284 <_sercom_get_async_baud_val+0x8c>)
     220:	47a0      	blx	r4
     222:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     224:	003a      	movs	r2, r7
     226:	2300      	movs	r3, #0
     228:	2000      	movs	r0, #0
     22a:	4c17      	ldr	r4, [pc, #92]	; (288 <_sercom_get_async_baud_val+0x90>)
     22c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     22e:	2200      	movs	r2, #0
     230:	2301      	movs	r3, #1
     232:	1a12      	subs	r2, r2, r0
     234:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     236:	0c12      	lsrs	r2, r2, #16
     238:	041b      	lsls	r3, r3, #16
     23a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     23c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     23e:	2200      	movs	r2, #0
     240:	e7e5      	b.n	20e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     242:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     244:	2b01      	cmp	r3, #1
     246:	d1f9      	bne.n	23c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     248:	000a      	movs	r2, r1
     24a:	2300      	movs	r3, #0
     24c:	2100      	movs	r1, #0
     24e:	4c0d      	ldr	r4, [pc, #52]	; (284 <_sercom_get_async_baud_val+0x8c>)
     250:	47a0      	blx	r4
     252:	0002      	movs	r2, r0
     254:	000b      	movs	r3, r1
     256:	9200      	str	r2, [sp, #0]
     258:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     25a:	0038      	movs	r0, r7
     25c:	2100      	movs	r1, #0
     25e:	4c0a      	ldr	r4, [pc, #40]	; (288 <_sercom_get_async_baud_val+0x90>)
     260:	47a0      	blx	r4
     262:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     264:	2380      	movs	r3, #128	; 0x80
     266:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     268:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     26a:	4298      	cmp	r0, r3
     26c:	d8cf      	bhi.n	20e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     26e:	0f79      	lsrs	r1, r7, #29
     270:	00f8      	lsls	r0, r7, #3
     272:	9a00      	ldr	r2, [sp, #0]
     274:	9b01      	ldr	r3, [sp, #4]
     276:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     278:	00ea      	lsls	r2, r5, #3
     27a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     27c:	b2d2      	uxtb	r2, r2
     27e:	0352      	lsls	r2, r2, #13
     280:	432a      	orrs	r2, r5
     282:	e7db      	b.n	23c <_sercom_get_async_baud_val+0x44>
     284:	0000179d 	.word	0x0000179d
     288:	00000115 	.word	0x00000115

0000028c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     28c:	b510      	push	{r4, lr}
     28e:	b082      	sub	sp, #8
     290:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     292:	4b0e      	ldr	r3, [pc, #56]	; (2cc <sercom_set_gclk_generator+0x40>)
     294:	781b      	ldrb	r3, [r3, #0]
     296:	2b00      	cmp	r3, #0
     298:	d007      	beq.n	2aa <sercom_set_gclk_generator+0x1e>
     29a:	2900      	cmp	r1, #0
     29c:	d105      	bne.n	2aa <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     29e:	4b0b      	ldr	r3, [pc, #44]	; (2cc <sercom_set_gclk_generator+0x40>)
     2a0:	785b      	ldrb	r3, [r3, #1]
     2a2:	4283      	cmp	r3, r0
     2a4:	d010      	beq.n	2c8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     2a6:	201d      	movs	r0, #29
     2a8:	e00c      	b.n	2c4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     2aa:	a901      	add	r1, sp, #4
     2ac:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     2ae:	2013      	movs	r0, #19
     2b0:	4b07      	ldr	r3, [pc, #28]	; (2d0 <sercom_set_gclk_generator+0x44>)
     2b2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     2b4:	2013      	movs	r0, #19
     2b6:	4b07      	ldr	r3, [pc, #28]	; (2d4 <sercom_set_gclk_generator+0x48>)
     2b8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     2ba:	4b04      	ldr	r3, [pc, #16]	; (2cc <sercom_set_gclk_generator+0x40>)
     2bc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     2be:	2201      	movs	r2, #1
     2c0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     2c2:	2000      	movs	r0, #0
}
     2c4:	b002      	add	sp, #8
     2c6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     2c8:	2000      	movs	r0, #0
     2ca:	e7fb      	b.n	2c4 <sercom_set_gclk_generator+0x38>
     2cc:	2000008c 	.word	0x2000008c
     2d0:	0000139d 	.word	0x0000139d
     2d4:	00001311 	.word	0x00001311

000002d8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     2d8:	4b40      	ldr	r3, [pc, #256]	; (3dc <_sercom_get_default_pad+0x104>)
     2da:	4298      	cmp	r0, r3
     2dc:	d031      	beq.n	342 <_sercom_get_default_pad+0x6a>
     2de:	d90a      	bls.n	2f6 <_sercom_get_default_pad+0x1e>
     2e0:	4b3f      	ldr	r3, [pc, #252]	; (3e0 <_sercom_get_default_pad+0x108>)
     2e2:	4298      	cmp	r0, r3
     2e4:	d04d      	beq.n	382 <_sercom_get_default_pad+0xaa>
     2e6:	4b3f      	ldr	r3, [pc, #252]	; (3e4 <_sercom_get_default_pad+0x10c>)
     2e8:	4298      	cmp	r0, r3
     2ea:	d05a      	beq.n	3a2 <_sercom_get_default_pad+0xca>
     2ec:	4b3e      	ldr	r3, [pc, #248]	; (3e8 <_sercom_get_default_pad+0x110>)
     2ee:	4298      	cmp	r0, r3
     2f0:	d037      	beq.n	362 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     2f2:	2000      	movs	r0, #0
}
     2f4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     2f6:	4b3d      	ldr	r3, [pc, #244]	; (3ec <_sercom_get_default_pad+0x114>)
     2f8:	4298      	cmp	r0, r3
     2fa:	d00c      	beq.n	316 <_sercom_get_default_pad+0x3e>
     2fc:	4b3c      	ldr	r3, [pc, #240]	; (3f0 <_sercom_get_default_pad+0x118>)
     2fe:	4298      	cmp	r0, r3
     300:	d1f7      	bne.n	2f2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     302:	2901      	cmp	r1, #1
     304:	d017      	beq.n	336 <_sercom_get_default_pad+0x5e>
     306:	2900      	cmp	r1, #0
     308:	d05d      	beq.n	3c6 <_sercom_get_default_pad+0xee>
     30a:	2902      	cmp	r1, #2
     30c:	d015      	beq.n	33a <_sercom_get_default_pad+0x62>
     30e:	2903      	cmp	r1, #3
     310:	d015      	beq.n	33e <_sercom_get_default_pad+0x66>
	return 0;
     312:	2000      	movs	r0, #0
     314:	e7ee      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     316:	2901      	cmp	r1, #1
     318:	d007      	beq.n	32a <_sercom_get_default_pad+0x52>
     31a:	2900      	cmp	r1, #0
     31c:	d051      	beq.n	3c2 <_sercom_get_default_pad+0xea>
     31e:	2902      	cmp	r1, #2
     320:	d005      	beq.n	32e <_sercom_get_default_pad+0x56>
     322:	2903      	cmp	r1, #3
     324:	d005      	beq.n	332 <_sercom_get_default_pad+0x5a>
	return 0;
     326:	2000      	movs	r0, #0
     328:	e7e4      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     32a:	4832      	ldr	r0, [pc, #200]	; (3f4 <_sercom_get_default_pad+0x11c>)
     32c:	e7e2      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     32e:	4832      	ldr	r0, [pc, #200]	; (3f8 <_sercom_get_default_pad+0x120>)
     330:	e7e0      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     332:	4832      	ldr	r0, [pc, #200]	; (3fc <_sercom_get_default_pad+0x124>)
     334:	e7de      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     336:	4832      	ldr	r0, [pc, #200]	; (400 <_sercom_get_default_pad+0x128>)
     338:	e7dc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     33a:	4832      	ldr	r0, [pc, #200]	; (404 <_sercom_get_default_pad+0x12c>)
     33c:	e7da      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     33e:	4832      	ldr	r0, [pc, #200]	; (408 <_sercom_get_default_pad+0x130>)
     340:	e7d8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     342:	2901      	cmp	r1, #1
     344:	d007      	beq.n	356 <_sercom_get_default_pad+0x7e>
     346:	2900      	cmp	r1, #0
     348:	d03f      	beq.n	3ca <_sercom_get_default_pad+0xf2>
     34a:	2902      	cmp	r1, #2
     34c:	d005      	beq.n	35a <_sercom_get_default_pad+0x82>
     34e:	2903      	cmp	r1, #3
     350:	d005      	beq.n	35e <_sercom_get_default_pad+0x86>
	return 0;
     352:	2000      	movs	r0, #0
     354:	e7ce      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     356:	482d      	ldr	r0, [pc, #180]	; (40c <_sercom_get_default_pad+0x134>)
     358:	e7cc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     35a:	482d      	ldr	r0, [pc, #180]	; (410 <_sercom_get_default_pad+0x138>)
     35c:	e7ca      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     35e:	482d      	ldr	r0, [pc, #180]	; (414 <_sercom_get_default_pad+0x13c>)
     360:	e7c8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     362:	2901      	cmp	r1, #1
     364:	d007      	beq.n	376 <_sercom_get_default_pad+0x9e>
     366:	2900      	cmp	r1, #0
     368:	d031      	beq.n	3ce <_sercom_get_default_pad+0xf6>
     36a:	2902      	cmp	r1, #2
     36c:	d005      	beq.n	37a <_sercom_get_default_pad+0xa2>
     36e:	2903      	cmp	r1, #3
     370:	d005      	beq.n	37e <_sercom_get_default_pad+0xa6>
	return 0;
     372:	2000      	movs	r0, #0
     374:	e7be      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     376:	4828      	ldr	r0, [pc, #160]	; (418 <_sercom_get_default_pad+0x140>)
     378:	e7bc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     37a:	4828      	ldr	r0, [pc, #160]	; (41c <_sercom_get_default_pad+0x144>)
     37c:	e7ba      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     37e:	4828      	ldr	r0, [pc, #160]	; (420 <_sercom_get_default_pad+0x148>)
     380:	e7b8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     382:	2901      	cmp	r1, #1
     384:	d007      	beq.n	396 <_sercom_get_default_pad+0xbe>
     386:	2900      	cmp	r1, #0
     388:	d023      	beq.n	3d2 <_sercom_get_default_pad+0xfa>
     38a:	2902      	cmp	r1, #2
     38c:	d005      	beq.n	39a <_sercom_get_default_pad+0xc2>
     38e:	2903      	cmp	r1, #3
     390:	d005      	beq.n	39e <_sercom_get_default_pad+0xc6>
	return 0;
     392:	2000      	movs	r0, #0
     394:	e7ae      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     396:	4823      	ldr	r0, [pc, #140]	; (424 <_sercom_get_default_pad+0x14c>)
     398:	e7ac      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     39a:	4823      	ldr	r0, [pc, #140]	; (428 <_sercom_get_default_pad+0x150>)
     39c:	e7aa      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     39e:	4823      	ldr	r0, [pc, #140]	; (42c <_sercom_get_default_pad+0x154>)
     3a0:	e7a8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3a2:	2901      	cmp	r1, #1
     3a4:	d007      	beq.n	3b6 <_sercom_get_default_pad+0xde>
     3a6:	2900      	cmp	r1, #0
     3a8:	d015      	beq.n	3d6 <_sercom_get_default_pad+0xfe>
     3aa:	2902      	cmp	r1, #2
     3ac:	d005      	beq.n	3ba <_sercom_get_default_pad+0xe2>
     3ae:	2903      	cmp	r1, #3
     3b0:	d005      	beq.n	3be <_sercom_get_default_pad+0xe6>
	return 0;
     3b2:	2000      	movs	r0, #0
     3b4:	e79e      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3b6:	481e      	ldr	r0, [pc, #120]	; (430 <_sercom_get_default_pad+0x158>)
     3b8:	e79c      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ba:	481e      	ldr	r0, [pc, #120]	; (434 <_sercom_get_default_pad+0x15c>)
     3bc:	e79a      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3be:	481e      	ldr	r0, [pc, #120]	; (438 <_sercom_get_default_pad+0x160>)
     3c0:	e798      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3c2:	481e      	ldr	r0, [pc, #120]	; (43c <_sercom_get_default_pad+0x164>)
     3c4:	e796      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3c6:	2003      	movs	r0, #3
     3c8:	e794      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ca:	481d      	ldr	r0, [pc, #116]	; (440 <_sercom_get_default_pad+0x168>)
     3cc:	e792      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ce:	481d      	ldr	r0, [pc, #116]	; (444 <_sercom_get_default_pad+0x16c>)
     3d0:	e790      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3d2:	481d      	ldr	r0, [pc, #116]	; (448 <_sercom_get_default_pad+0x170>)
     3d4:	e78e      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3d6:	481d      	ldr	r0, [pc, #116]	; (44c <_sercom_get_default_pad+0x174>)
     3d8:	e78c      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3da:	46c0      	nop			; (mov r8, r8)
     3dc:	42001000 	.word	0x42001000
     3e0:	42001800 	.word	0x42001800
     3e4:	42001c00 	.word	0x42001c00
     3e8:	42001400 	.word	0x42001400
     3ec:	42000800 	.word	0x42000800
     3f0:	42000c00 	.word	0x42000c00
     3f4:	00050003 	.word	0x00050003
     3f8:	00060003 	.word	0x00060003
     3fc:	00070003 	.word	0x00070003
     400:	00010003 	.word	0x00010003
     404:	001e0003 	.word	0x001e0003
     408:	001f0003 	.word	0x001f0003
     40c:	000d0002 	.word	0x000d0002
     410:	000e0002 	.word	0x000e0002
     414:	000f0002 	.word	0x000f0002
     418:	00110003 	.word	0x00110003
     41c:	00120003 	.word	0x00120003
     420:	00130003 	.word	0x00130003
     424:	003f0005 	.word	0x003f0005
     428:	003e0005 	.word	0x003e0005
     42c:	00520005 	.word	0x00520005
     430:	00170003 	.word	0x00170003
     434:	00180003 	.word	0x00180003
     438:	00190003 	.word	0x00190003
     43c:	00040003 	.word	0x00040003
     440:	000c0002 	.word	0x000c0002
     444:	00100003 	.word	0x00100003
     448:	00530005 	.word	0x00530005
     44c:	00160003 	.word	0x00160003

00000450 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     450:	b530      	push	{r4, r5, lr}
     452:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     454:	4b0b      	ldr	r3, [pc, #44]	; (484 <_sercom_get_sercom_inst_index+0x34>)
     456:	466a      	mov	r2, sp
     458:	cb32      	ldmia	r3!, {r1, r4, r5}
     45a:	c232      	stmia	r2!, {r1, r4, r5}
     45c:	cb32      	ldmia	r3!, {r1, r4, r5}
     45e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     460:	9b00      	ldr	r3, [sp, #0]
     462:	4283      	cmp	r3, r0
     464:	d00b      	beq.n	47e <_sercom_get_sercom_inst_index+0x2e>
     466:	2301      	movs	r3, #1
     468:	009a      	lsls	r2, r3, #2
     46a:	4669      	mov	r1, sp
     46c:	5852      	ldr	r2, [r2, r1]
     46e:	4282      	cmp	r2, r0
     470:	d006      	beq.n	480 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     472:	3301      	adds	r3, #1
     474:	2b06      	cmp	r3, #6
     476:	d1f7      	bne.n	468 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     478:	2000      	movs	r0, #0
}
     47a:	b007      	add	sp, #28
     47c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     47e:	2300      	movs	r3, #0
			return i;
     480:	b2d8      	uxtb	r0, r3
     482:	e7fa      	b.n	47a <_sercom_get_sercom_inst_index+0x2a>
     484:	00002820 	.word	0x00002820

00000488 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     488:	b5f0      	push	{r4, r5, r6, r7, lr}
     48a:	46c6      	mov	lr, r8
     48c:	b500      	push	{lr}
     48e:	000c      	movs	r4, r1
     490:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     492:	2800      	cmp	r0, #0
     494:	d10f      	bne.n	4b6 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
     496:	2a00      	cmp	r2, #0
     498:	dd11      	ble.n	4be <_read+0x36>
     49a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     49c:	4e09      	ldr	r6, [pc, #36]	; (4c4 <_read+0x3c>)
     49e:	4d0a      	ldr	r5, [pc, #40]	; (4c8 <_read+0x40>)
     4a0:	6830      	ldr	r0, [r6, #0]
     4a2:	0021      	movs	r1, r4
     4a4:	682b      	ldr	r3, [r5, #0]
     4a6:	4798      	blx	r3
		ptr++;
     4a8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
     4aa:	42bc      	cmp	r4, r7
     4ac:	d1f8      	bne.n	4a0 <_read+0x18>
		nChars++;
	}
	return nChars;
}
     4ae:	4640      	mov	r0, r8
     4b0:	bc04      	pop	{r2}
     4b2:	4690      	mov	r8, r2
     4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
     4b6:	2301      	movs	r3, #1
     4b8:	425b      	negs	r3, r3
     4ba:	4698      	mov	r8, r3
     4bc:	e7f7      	b.n	4ae <_read+0x26>
	for (; len > 0; --len) {
     4be:	4680      	mov	r8, r0
     4c0:	e7f5      	b.n	4ae <_read+0x26>
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	200000dc 	.word	0x200000dc
     4c8:	200000d4 	.word	0x200000d4

000004cc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ce:	46c6      	mov	lr, r8
     4d0:	b500      	push	{lr}
     4d2:	000e      	movs	r6, r1
     4d4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     4d6:	3801      	subs	r0, #1
     4d8:	2802      	cmp	r0, #2
     4da:	d810      	bhi.n	4fe <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     4dc:	2a00      	cmp	r2, #0
     4de:	d011      	beq.n	504 <_write+0x38>
     4e0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     4e2:	4b0c      	ldr	r3, [pc, #48]	; (514 <_write+0x48>)
     4e4:	4698      	mov	r8, r3
     4e6:	4f0c      	ldr	r7, [pc, #48]	; (518 <_write+0x4c>)
     4e8:	4643      	mov	r3, r8
     4ea:	6818      	ldr	r0, [r3, #0]
     4ec:	5d31      	ldrb	r1, [r6, r4]
     4ee:	683b      	ldr	r3, [r7, #0]
     4f0:	4798      	blx	r3
     4f2:	2800      	cmp	r0, #0
     4f4:	db08      	blt.n	508 <_write+0x3c>
			return -1;
		}
		++nChars;
     4f6:	3401      	adds	r4, #1
	for (; len != 0; --len) {
     4f8:	42a5      	cmp	r5, r4
     4fa:	d1f5      	bne.n	4e8 <_write+0x1c>
     4fc:	e006      	b.n	50c <_write+0x40>
		return -1;
     4fe:	2401      	movs	r4, #1
     500:	4264      	negs	r4, r4
     502:	e003      	b.n	50c <_write+0x40>
	for (; len != 0; --len) {
     504:	0014      	movs	r4, r2
     506:	e001      	b.n	50c <_write+0x40>
			return -1;
     508:	2401      	movs	r4, #1
     50a:	4264      	negs	r4, r4
	}
	return nChars;
}
     50c:	0020      	movs	r0, r4
     50e:	bc04      	pop	{r2}
     510:	4690      	mov	r8, r2
     512:	bdf0      	pop	{r4, r5, r6, r7, pc}
     514:	200000dc 	.word	0x200000dc
     518:	200000d8 	.word	0x200000d8

0000051c <usart_write_callback>:

}
void usart_write_callback(struct usart_module *const usart_module)
{
	//port_pin_toggle_output_level(LED_0_PIN);
}
     51c:	4770      	bx	lr
	...

00000520 <usart_read_callback>:
{
     520:	b510      	push	{r4, lr}
     522:	0004      	movs	r4, r0
	switch  (rx_buffer[0])	{
     524:	4b08      	ldr	r3, [pc, #32]	; (548 <usart_read_callback+0x28>)
     526:	781b      	ldrb	r3, [r3, #0]
     528:	2b61      	cmp	r3, #97	; 0x61
     52a:	d005      	beq.n	538 <usart_read_callback+0x18>
	usart_read_buffer_job( usart_instance,
     52c:	2205      	movs	r2, #5
     52e:	4906      	ldr	r1, [pc, #24]	; (548 <usart_read_callback+0x28>)
     530:	0020      	movs	r0, r4
     532:	4b06      	ldr	r3, [pc, #24]	; (54c <usart_read_callback+0x2c>)
     534:	4798      	blx	r3
}
     536:	bd10      	pop	{r4, pc}
		case 'a' : printf("Hello World!"); 
     538:	4805      	ldr	r0, [pc, #20]	; (550 <usart_read_callback+0x30>)
     53a:	4b06      	ldr	r3, [pc, #24]	; (554 <usart_read_callback+0x34>)
     53c:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
     53e:	2280      	movs	r2, #128	; 0x80
     540:	0312      	lsls	r2, r2, #12
     542:	4b05      	ldr	r3, [pc, #20]	; (558 <usart_read_callback+0x38>)
     544:	61da      	str	r2, [r3, #28]
     546:	e7f1      	b.n	52c <usart_read_callback+0xc>
     548:	20000114 	.word	0x20000114
     54c:	00000b9d 	.word	0x00000b9d
     550:	00002838 	.word	0x00002838
     554:	00001849 	.word	0x00001849
     558:	41004400 	.word	0x41004400

0000055c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     55c:	b570      	push	{r4, r5, r6, lr}
     55e:	b082      	sub	sp, #8
     560:	0005      	movs	r5, r0
     562:	000e      	movs	r6, r1
	uint16_t temp = 0;
     564:	2200      	movs	r2, #0
     566:	466b      	mov	r3, sp
     568:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     56a:	4c06      	ldr	r4, [pc, #24]	; (584 <usart_serial_getchar+0x28>)
     56c:	466b      	mov	r3, sp
     56e:	1d99      	adds	r1, r3, #6
     570:	0028      	movs	r0, r5
     572:	47a0      	blx	r4
     574:	2800      	cmp	r0, #0
     576:	d1f9      	bne.n	56c <usart_serial_getchar+0x10>

	*c = temp;
     578:	466b      	mov	r3, sp
     57a:	3306      	adds	r3, #6
     57c:	881b      	ldrh	r3, [r3, #0]
     57e:	7033      	strb	r3, [r6, #0]
}
     580:	b002      	add	sp, #8
     582:	bd70      	pop	{r4, r5, r6, pc}
     584:	00000ac5 	.word	0x00000ac5

00000588 <usart_serial_putchar>:
{
     588:	b570      	push	{r4, r5, r6, lr}
     58a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     58c:	b28c      	uxth	r4, r1
     58e:	4e03      	ldr	r6, [pc, #12]	; (59c <usart_serial_putchar+0x14>)
     590:	0021      	movs	r1, r4
     592:	0028      	movs	r0, r5
     594:	47b0      	blx	r6
     596:	2800      	cmp	r0, #0
     598:	d1fa      	bne.n	590 <usart_serial_putchar+0x8>
}
     59a:	bd70      	pop	{r4, r5, r6, pc}
     59c:	00000a99 	.word	0x00000a99

000005a0 <configure_usart_callbacks>:


void configure_usart_callbacks(struct usart_module * usart_instance)
{
     5a0:	b570      	push	{r4, r5, r6, lr}
     5a2:	0004      	movs	r4, r0
	//! [setup_register_callbacks]
	usart_register_callback(usart_instance,
     5a4:	2200      	movs	r2, #0
     5a6:	4906      	ldr	r1, [pc, #24]	; (5c0 <configure_usart_callbacks+0x20>)
     5a8:	4d06      	ldr	r5, [pc, #24]	; (5c4 <configure_usart_callbacks+0x24>)
     5aa:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	
	usart_register_callback(usart_instance,
     5ac:	2201      	movs	r2, #1
     5ae:	4906      	ldr	r1, [pc, #24]	; (5c8 <configure_usart_callbacks+0x28>)
     5b0:	0020      	movs	r0, r4
     5b2:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     5b4:	2231      	movs	r2, #49	; 0x31
     5b6:	5ca3      	ldrb	r3, [r4, r2]
     5b8:	2103      	movs	r1, #3
     5ba:	430b      	orrs	r3, r1
     5bc:	54a3      	strb	r3, [r4, r2]

	//! [setup_enable_callbacks]
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
	//! [setup_enable_callbacks]
}
     5be:	bd70      	pop	{r4, r5, r6, pc}
     5c0:	0000051d 	.word	0x0000051d
     5c4:	00000b85 	.word	0x00000b85
     5c8:	00000521 	.word	0x00000521

000005cc <artist_usart_configure>:

void artist_usart_configure(struct usart_module * usart_instance) {
     5cc:	b570      	push	{r4, r5, r6, lr}
     5ce:	b090      	sub	sp, #64	; 0x40
     5d0:	0004      	movs	r4, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     5d2:	2380      	movs	r3, #128	; 0x80
     5d4:	05db      	lsls	r3, r3, #23
     5d6:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     5d8:	2300      	movs	r3, #0
     5da:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     5dc:	22ff      	movs	r2, #255	; 0xff
     5de:	4669      	mov	r1, sp
     5e0:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     5e2:	2200      	movs	r2, #0
     5e4:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     5e6:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
     5e8:	2196      	movs	r1, #150	; 0x96
     5ea:	0189      	lsls	r1, r1, #6
     5ec:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
     5ee:	2101      	movs	r1, #1
     5f0:	2024      	movs	r0, #36	; 0x24
     5f2:	466d      	mov	r5, sp
     5f4:	5429      	strb	r1, [r5, r0]
	config->transmitter_enable = true;
     5f6:	3001      	adds	r0, #1
     5f8:	5429      	strb	r1, [r5, r0]
	config->clock_polarity_inverted = false;
     5fa:	3125      	adds	r1, #37	; 0x25
     5fc:	546b      	strb	r3, [r5, r1]
	config->use_external_clock = false;
     5fe:	3101      	adds	r1, #1
     600:	546b      	strb	r3, [r5, r1]
	config->ext_clock_freq   = 0;
     602:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     604:	3105      	adds	r1, #5
     606:	546b      	strb	r3, [r5, r1]
	config->generator_source = GCLK_GENERATOR_0;
     608:	3101      	adds	r1, #1
     60a:	546b      	strb	r3, [r5, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     60c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     60e:	822b      	strh	r3, [r5, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     610:	76eb      	strb	r3, [r5, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     612:	762a      	strb	r2, [r5, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     614:	772a      	strb	r2, [r5, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     616:	766a      	strb	r2, [r5, #25]
	config->receive_pulse_length                    = 19;
     618:	2313      	movs	r3, #19
     61a:	76ab      	strb	r3, [r5, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     61c:	776a      	strb	r2, [r5, #29]
	struct usart_config config;
	usart_get_config_defaults(&config);
	config.baudrate = CONF_ARTIST_BAUDRATE;
	config.mux_setting	= EDBG_CDC_SERCOM_MUX_SETTING;
     61e:	2380      	movs	r3, #128	; 0x80
     620:	035b      	lsls	r3, r3, #13
     622:	9303      	str	r3, [sp, #12]
	config.pinmux_pad0	= EDBG_CDC_SERCOM_PINMUX_PAD0;
     624:	4b1e      	ldr	r3, [pc, #120]	; (6a0 <artist_usart_configure+0xd4>)
     626:	930c      	str	r3, [sp, #48]	; 0x30
	config.pinmux_pad1	= EDBG_CDC_SERCOM_PINMUX_PAD1;
     628:	4b1e      	ldr	r3, [pc, #120]	; (6a4 <artist_usart_configure+0xd8>)
     62a:	930d      	str	r3, [sp, #52]	; 0x34
	config.pinmux_pad2	= EDBG_CDC_SERCOM_PINMUX_PAD2;
     62c:	2301      	movs	r3, #1
     62e:	425b      	negs	r3, r3
     630:	930e      	str	r3, [sp, #56]	; 0x38
	config.pinmux_pad3	= EDBG_CDC_SERCOM_PINMUX_PAD3;
     632:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(usart_instance, EDBG_CDC_MODULE, &config) != STATUS_OK);
     634:	4e1c      	ldr	r6, [pc, #112]	; (6a8 <artist_usart_configure+0xdc>)
     636:	4d1d      	ldr	r5, [pc, #116]	; (6ac <artist_usart_configure+0xe0>)
     638:	466a      	mov	r2, sp
     63a:	0031      	movs	r1, r6
     63c:	0020      	movs	r0, r4
     63e:	47a8      	blx	r5
     640:	2800      	cmp	r0, #0
     642:	d1f9      	bne.n	638 <artist_usart_configure+0x6c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     644:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     646:	0028      	movs	r0, r5
     648:	4b19      	ldr	r3, [pc, #100]	; (6b0 <artist_usart_configure+0xe4>)
     64a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     64c:	231f      	movs	r3, #31
     64e:	4018      	ands	r0, r3
     650:	3b1e      	subs	r3, #30
     652:	4083      	lsls	r3, r0
     654:	4a17      	ldr	r2, [pc, #92]	; (6b4 <artist_usart_configure+0xe8>)
     656:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     658:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     65a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     65c:	2b00      	cmp	r3, #0
     65e:	d1fc      	bne.n	65a <artist_usart_configure+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     660:	682b      	ldr	r3, [r5, #0]
     662:	2202      	movs	r2, #2
     664:	4313      	orrs	r3, r2
     666:	602b      	str	r3, [r5, #0]
	
	usart_enable(usart_instance);
	configure_usart_callbacks(usart_instance);
     668:	0020      	movs	r0, r4
     66a:	4b13      	ldr	r3, [pc, #76]	; (6b8 <artist_usart_configure+0xec>)
     66c:	4798      	blx	r3
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     66e:	4b13      	ldr	r3, [pc, #76]	; (6bc <artist_usart_configure+0xf0>)
     670:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     672:	4a13      	ldr	r2, [pc, #76]	; (6c0 <artist_usart_configure+0xf4>)
     674:	4b13      	ldr	r3, [pc, #76]	; (6c4 <artist_usart_configure+0xf8>)
     676:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     678:	4a13      	ldr	r2, [pc, #76]	; (6c8 <artist_usart_configure+0xfc>)
     67a:	4b14      	ldr	r3, [pc, #80]	; (6cc <artist_usart_configure+0x100>)
     67c:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     67e:	466a      	mov	r2, sp
     680:	4909      	ldr	r1, [pc, #36]	; (6a8 <artist_usart_configure+0xdc>)
     682:	0020      	movs	r0, r4
     684:	4b09      	ldr	r3, [pc, #36]	; (6ac <artist_usart_configure+0xe0>)
     686:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     688:	4d11      	ldr	r5, [pc, #68]	; (6d0 <artist_usart_configure+0x104>)
     68a:	682b      	ldr	r3, [r5, #0]
     68c:	6898      	ldr	r0, [r3, #8]
     68e:	2100      	movs	r1, #0
     690:	4c10      	ldr	r4, [pc, #64]	; (6d4 <artist_usart_configure+0x108>)
     692:	47a0      	blx	r4
	setbuf(stdin, NULL);
     694:	682b      	ldr	r3, [r5, #0]
     696:	6858      	ldr	r0, [r3, #4]
     698:	2100      	movs	r1, #0
     69a:	47a0      	blx	r4
	
	stdio_serial_init(usart_instance, EDBG_CDC_MODULE, &config);
}
     69c:	b010      	add	sp, #64	; 0x40
     69e:	bd70      	pop	{r4, r5, r6, pc}
     6a0:	00040003 	.word	0x00040003
     6a4:	00050003 	.word	0x00050003
     6a8:	42000800 	.word	0x42000800
     6ac:	00000755 	.word	0x00000755
     6b0:	00000d91 	.word	0x00000d91
     6b4:	e000e100 	.word	0xe000e100
     6b8:	000005a1 	.word	0x000005a1
     6bc:	200000dc 	.word	0x200000dc
     6c0:	00000589 	.word	0x00000589
     6c4:	200000d8 	.word	0x200000d8
     6c8:	0000055d 	.word	0x0000055d
     6cc:	200000d4 	.word	0x200000d4
     6d0:	2000000c 	.word	0x2000000c
     6d4:	0000187d 	.word	0x0000187d

000006d8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6da:	46c6      	mov	lr, r8
     6dc:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     6de:	0080      	lsls	r0, r0, #2
     6e0:	4b0e      	ldr	r3, [pc, #56]	; (71c <_tcc_interrupt_handler+0x44>)
     6e2:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     6e4:	683b      	ldr	r3, [r7, #0]
     6e6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     6ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     6ec:	4013      	ands	r3, r2
     6ee:	401e      	ands	r6, r3
     6f0:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     6f2:	4b0b      	ldr	r3, [pc, #44]	; (720 <_tcc_interrupt_handler+0x48>)
     6f4:	4698      	mov	r8, r3
     6f6:	e002      	b.n	6fe <_tcc_interrupt_handler+0x26>
     6f8:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     6fa:	2c30      	cmp	r4, #48	; 0x30
     6fc:	d00a      	beq.n	714 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     6fe:	4643      	mov	r3, r8
     700:	58e5      	ldr	r5, [r4, r3]
     702:	4235      	tst	r5, r6
     704:	d0f8      	beq.n	6f8 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     706:	193b      	adds	r3, r7, r4
     708:	685b      	ldr	r3, [r3, #4]
     70a:	0038      	movs	r0, r7
     70c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     70e:	683b      	ldr	r3, [r7, #0]
     710:	62dd      	str	r5, [r3, #44]	; 0x2c
     712:	e7f1      	b.n	6f8 <_tcc_interrupt_handler+0x20>
		}
	}
}
     714:	bc04      	pop	{r2}
     716:	4690      	mov	r8, r2
     718:	bdf0      	pop	{r4, r5, r6, r7, pc}
     71a:	46c0      	nop			; (mov r8, r8)
     71c:	2000011c 	.word	0x2000011c
     720:	00002848 	.word	0x00002848

00000724 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     724:	b510      	push	{r4, lr}
     726:	2000      	movs	r0, #0
     728:	4b01      	ldr	r3, [pc, #4]	; (730 <TCC0_Handler+0xc>)
     72a:	4798      	blx	r3
     72c:	bd10      	pop	{r4, pc}
     72e:	46c0      	nop			; (mov r8, r8)
     730:	000006d9 	.word	0x000006d9

00000734 <TCC1_Handler>:
     734:	b510      	push	{r4, lr}
     736:	2001      	movs	r0, #1
     738:	4b01      	ldr	r3, [pc, #4]	; (740 <TCC1_Handler+0xc>)
     73a:	4798      	blx	r3
     73c:	bd10      	pop	{r4, pc}
     73e:	46c0      	nop			; (mov r8, r8)
     740:	000006d9 	.word	0x000006d9

00000744 <TCC2_Handler>:
     744:	b510      	push	{r4, lr}
     746:	2002      	movs	r0, #2
     748:	4b01      	ldr	r3, [pc, #4]	; (750 <TCC2_Handler+0xc>)
     74a:	4798      	blx	r3
     74c:	bd10      	pop	{r4, pc}
     74e:	46c0      	nop			; (mov r8, r8)
     750:	000006d9 	.word	0x000006d9

00000754 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     754:	b5f0      	push	{r4, r5, r6, r7, lr}
     756:	46de      	mov	lr, fp
     758:	4657      	mov	r7, sl
     75a:	464e      	mov	r6, r9
     75c:	4645      	mov	r5, r8
     75e:	b5e0      	push	{r5, r6, r7, lr}
     760:	b091      	sub	sp, #68	; 0x44
     762:	0005      	movs	r5, r0
     764:	000c      	movs	r4, r1
     766:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     768:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     76a:	0008      	movs	r0, r1
     76c:	4bbc      	ldr	r3, [pc, #752]	; (a60 <usart_init+0x30c>)
     76e:	4798      	blx	r3
     770:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     772:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     774:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     776:	07db      	lsls	r3, r3, #31
     778:	d506      	bpl.n	788 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     77a:	b011      	add	sp, #68	; 0x44
     77c:	bc3c      	pop	{r2, r3, r4, r5}
     77e:	4690      	mov	r8, r2
     780:	4699      	mov	r9, r3
     782:	46a2      	mov	sl, r4
     784:	46ab      	mov	fp, r5
     786:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     788:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     78a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     78c:	079b      	lsls	r3, r3, #30
     78e:	d4f4      	bmi.n	77a <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     790:	49b4      	ldr	r1, [pc, #720]	; (a64 <usart_init+0x310>)
     792:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     794:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     796:	2301      	movs	r3, #1
     798:	40bb      	lsls	r3, r7
     79a:	4303      	orrs	r3, r0
     79c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     79e:	a90f      	add	r1, sp, #60	; 0x3c
     7a0:	272d      	movs	r7, #45	; 0x2d
     7a2:	5df3      	ldrb	r3, [r6, r7]
     7a4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     7a6:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     7a8:	b2d3      	uxtb	r3, r2
     7aa:	9302      	str	r3, [sp, #8]
     7ac:	0018      	movs	r0, r3
     7ae:	4bae      	ldr	r3, [pc, #696]	; (a68 <usart_init+0x314>)
     7b0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     7b2:	9802      	ldr	r0, [sp, #8]
     7b4:	4bad      	ldr	r3, [pc, #692]	; (a6c <usart_init+0x318>)
     7b6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     7b8:	5df0      	ldrb	r0, [r6, r7]
     7ba:	2100      	movs	r1, #0
     7bc:	4bac      	ldr	r3, [pc, #688]	; (a70 <usart_init+0x31c>)
     7be:	4798      	blx	r3
	module->character_size = config->character_size;
     7c0:	7af3      	ldrb	r3, [r6, #11]
     7c2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     7c4:	2324      	movs	r3, #36	; 0x24
     7c6:	5cf3      	ldrb	r3, [r6, r3]
     7c8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     7ca:	2325      	movs	r3, #37	; 0x25
     7cc:	5cf3      	ldrb	r3, [r6, r3]
     7ce:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     7d0:	7ef3      	ldrb	r3, [r6, #27]
     7d2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     7d4:	7f33      	ldrb	r3, [r6, #28]
     7d6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     7d8:	682b      	ldr	r3, [r5, #0]
     7da:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     7dc:	0018      	movs	r0, r3
     7de:	4ba0      	ldr	r3, [pc, #640]	; (a60 <usart_init+0x30c>)
     7e0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     7e2:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     7e4:	2200      	movs	r2, #0
     7e6:	230e      	movs	r3, #14
     7e8:	a906      	add	r1, sp, #24
     7ea:	468c      	mov	ip, r1
     7ec:	4463      	add	r3, ip
     7ee:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     7f0:	8a32      	ldrh	r2, [r6, #16]
     7f2:	9202      	str	r2, [sp, #8]
     7f4:	2380      	movs	r3, #128	; 0x80
     7f6:	01db      	lsls	r3, r3, #7
     7f8:	429a      	cmp	r2, r3
     7fa:	d100      	bne.n	7fe <usart_init+0xaa>
     7fc:	e09e      	b.n	93c <usart_init+0x1e8>
     7fe:	d90f      	bls.n	820 <usart_init+0xcc>
     800:	23c0      	movs	r3, #192	; 0xc0
     802:	01db      	lsls	r3, r3, #7
     804:	9a02      	ldr	r2, [sp, #8]
     806:	429a      	cmp	r2, r3
     808:	d100      	bne.n	80c <usart_init+0xb8>
     80a:	e092      	b.n	932 <usart_init+0x1de>
     80c:	2380      	movs	r3, #128	; 0x80
     80e:	021b      	lsls	r3, r3, #8
     810:	429a      	cmp	r2, r3
     812:	d000      	beq.n	816 <usart_init+0xc2>
     814:	e11f      	b.n	a56 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     816:	2303      	movs	r3, #3
     818:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     81a:	2300      	movs	r3, #0
     81c:	9307      	str	r3, [sp, #28]
     81e:	e008      	b.n	832 <usart_init+0xde>
	switch (config->sample_rate) {
     820:	2380      	movs	r3, #128	; 0x80
     822:	019b      	lsls	r3, r3, #6
     824:	429a      	cmp	r2, r3
     826:	d000      	beq.n	82a <usart_init+0xd6>
     828:	e115      	b.n	a56 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     82a:	2310      	movs	r3, #16
     82c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     82e:	3b0f      	subs	r3, #15
     830:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     832:	6833      	ldr	r3, [r6, #0]
     834:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     836:	68f3      	ldr	r3, [r6, #12]
     838:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     83a:	6973      	ldr	r3, [r6, #20]
     83c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     83e:	7e33      	ldrb	r3, [r6, #24]
     840:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     842:	2326      	movs	r3, #38	; 0x26
     844:	5cf3      	ldrb	r3, [r6, r3]
     846:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     848:	6873      	ldr	r3, [r6, #4]
     84a:	4699      	mov	r9, r3
	switch (transfer_mode)
     84c:	2b00      	cmp	r3, #0
     84e:	d100      	bne.n	852 <usart_init+0xfe>
     850:	e0a0      	b.n	994 <usart_init+0x240>
     852:	2380      	movs	r3, #128	; 0x80
     854:	055b      	lsls	r3, r3, #21
     856:	4599      	cmp	r9, r3
     858:	d100      	bne.n	85c <usart_init+0x108>
     85a:	e084      	b.n	966 <usart_init+0x212>
	if(config->encoding_format_enable) {
     85c:	7e73      	ldrb	r3, [r6, #25]
     85e:	2b00      	cmp	r3, #0
     860:	d002      	beq.n	868 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     862:	7eb3      	ldrb	r3, [r6, #26]
     864:	4642      	mov	r2, r8
     866:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
     868:	682a      	ldr	r2, [r5, #0]
     86a:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
     86c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     86e:	2b00      	cmp	r3, #0
     870:	d1fc      	bne.n	86c <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     872:	330e      	adds	r3, #14
     874:	aa06      	add	r2, sp, #24
     876:	4694      	mov	ip, r2
     878:	4463      	add	r3, ip
     87a:	881b      	ldrh	r3, [r3, #0]
     87c:	4642      	mov	r2, r8
     87e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     880:	9b05      	ldr	r3, [sp, #20]
     882:	9a03      	ldr	r2, [sp, #12]
     884:	4313      	orrs	r3, r2
     886:	9a04      	ldr	r2, [sp, #16]
     888:	4313      	orrs	r3, r2
     88a:	464a      	mov	r2, r9
     88c:	4313      	orrs	r3, r2
     88e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     890:	465b      	mov	r3, fp
     892:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     894:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     896:	4653      	mov	r3, sl
     898:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     89a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     89c:	2327      	movs	r3, #39	; 0x27
     89e:	5cf3      	ldrb	r3, [r6, r3]
     8a0:	2b00      	cmp	r3, #0
     8a2:	d101      	bne.n	8a8 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     8a4:	3304      	adds	r3, #4
     8a6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     8a8:	7e73      	ldrb	r3, [r6, #25]
     8aa:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     8ac:	7f32      	ldrb	r2, [r6, #28]
     8ae:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     8b0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     8b2:	7f72      	ldrb	r2, [r6, #29]
     8b4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     8b6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     8b8:	2224      	movs	r2, #36	; 0x24
     8ba:	5cb2      	ldrb	r2, [r6, r2]
     8bc:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     8be:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     8c0:	2225      	movs	r2, #37	; 0x25
     8c2:	5cb2      	ldrb	r2, [r6, r2]
     8c4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     8c6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     8c8:	7ab1      	ldrb	r1, [r6, #10]
     8ca:	7af2      	ldrb	r2, [r6, #11]
     8cc:	4311      	orrs	r1, r2
     8ce:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     8d0:	8933      	ldrh	r3, [r6, #8]
     8d2:	2bff      	cmp	r3, #255	; 0xff
     8d4:	d100      	bne.n	8d8 <usart_init+0x184>
     8d6:	e081      	b.n	9dc <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     8d8:	2280      	movs	r2, #128	; 0x80
     8da:	0452      	lsls	r2, r2, #17
     8dc:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     8de:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     8e0:	232c      	movs	r3, #44	; 0x2c
     8e2:	5cf3      	ldrb	r3, [r6, r3]
     8e4:	2b00      	cmp	r3, #0
     8e6:	d103      	bne.n	8f0 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     8e8:	4b62      	ldr	r3, [pc, #392]	; (a74 <usart_init+0x320>)
     8ea:	789b      	ldrb	r3, [r3, #2]
     8ec:	079b      	lsls	r3, r3, #30
     8ee:	d501      	bpl.n	8f4 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     8f0:	2380      	movs	r3, #128	; 0x80
     8f2:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     8f4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     8f6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     8f8:	2b00      	cmp	r3, #0
     8fa:	d1fc      	bne.n	8f6 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     8fc:	4643      	mov	r3, r8
     8fe:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     900:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     902:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     904:	2b00      	cmp	r3, #0
     906:	d1fc      	bne.n	902 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     908:	4643      	mov	r3, r8
     90a:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     90c:	ab0e      	add	r3, sp, #56	; 0x38
     90e:	2280      	movs	r2, #128	; 0x80
     910:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     912:	2200      	movs	r2, #0
     914:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     916:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     918:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     91a:	6b33      	ldr	r3, [r6, #48]	; 0x30
     91c:	930a      	str	r3, [sp, #40]	; 0x28
     91e:	6b73      	ldr	r3, [r6, #52]	; 0x34
     920:	930b      	str	r3, [sp, #44]	; 0x2c
     922:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     924:	930c      	str	r3, [sp, #48]	; 0x30
     926:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     928:	9302      	str	r3, [sp, #8]
     92a:	930d      	str	r3, [sp, #52]	; 0x34
     92c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     92e:	ae0a      	add	r6, sp, #40	; 0x28
     930:	e063      	b.n	9fa <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     932:	2308      	movs	r3, #8
     934:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     936:	3b07      	subs	r3, #7
     938:	9307      	str	r3, [sp, #28]
     93a:	e77a      	b.n	832 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     93c:	6833      	ldr	r3, [r6, #0]
     93e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     940:	68f3      	ldr	r3, [r6, #12]
     942:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     944:	6973      	ldr	r3, [r6, #20]
     946:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     948:	7e33      	ldrb	r3, [r6, #24]
     94a:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     94c:	2326      	movs	r3, #38	; 0x26
     94e:	5cf3      	ldrb	r3, [r6, r3]
     950:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     952:	6873      	ldr	r3, [r6, #4]
     954:	4699      	mov	r9, r3
	switch (transfer_mode)
     956:	2b00      	cmp	r3, #0
     958:	d018      	beq.n	98c <usart_init+0x238>
     95a:	2380      	movs	r3, #128	; 0x80
     95c:	055b      	lsls	r3, r3, #21
     95e:	4599      	cmp	r9, r3
     960:	d001      	beq.n	966 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     962:	2000      	movs	r0, #0
     964:	e025      	b.n	9b2 <usart_init+0x25e>
			if (!config->use_external_clock) {
     966:	2327      	movs	r3, #39	; 0x27
     968:	5cf3      	ldrb	r3, [r6, r3]
     96a:	2b00      	cmp	r3, #0
     96c:	d000      	beq.n	970 <usart_init+0x21c>
     96e:	e775      	b.n	85c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     970:	6a33      	ldr	r3, [r6, #32]
     972:	001f      	movs	r7, r3
     974:	b2c0      	uxtb	r0, r0
     976:	4b40      	ldr	r3, [pc, #256]	; (a78 <usart_init+0x324>)
     978:	4798      	blx	r3
     97a:	0001      	movs	r1, r0
     97c:	220e      	movs	r2, #14
     97e:	ab06      	add	r3, sp, #24
     980:	469c      	mov	ip, r3
     982:	4462      	add	r2, ip
     984:	0038      	movs	r0, r7
     986:	4b3d      	ldr	r3, [pc, #244]	; (a7c <usart_init+0x328>)
     988:	4798      	blx	r3
     98a:	e012      	b.n	9b2 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     98c:	2308      	movs	r3, #8
     98e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     990:	2300      	movs	r3, #0
     992:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     994:	2327      	movs	r3, #39	; 0x27
     996:	5cf3      	ldrb	r3, [r6, r3]
     998:	2b00      	cmp	r3, #0
     99a:	d00e      	beq.n	9ba <usart_init+0x266>
				status_code =
     99c:	9b06      	ldr	r3, [sp, #24]
     99e:	9300      	str	r3, [sp, #0]
     9a0:	9b07      	ldr	r3, [sp, #28]
     9a2:	220e      	movs	r2, #14
     9a4:	a906      	add	r1, sp, #24
     9a6:	468c      	mov	ip, r1
     9a8:	4462      	add	r2, ip
     9aa:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     9ac:	6a30      	ldr	r0, [r6, #32]
     9ae:	4f34      	ldr	r7, [pc, #208]	; (a80 <usart_init+0x32c>)
     9b0:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     9b2:	2800      	cmp	r0, #0
     9b4:	d000      	beq.n	9b8 <usart_init+0x264>
     9b6:	e6e0      	b.n	77a <usart_init+0x26>
     9b8:	e750      	b.n	85c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     9ba:	6a33      	ldr	r3, [r6, #32]
     9bc:	001f      	movs	r7, r3
     9be:	b2c0      	uxtb	r0, r0
     9c0:	4b2d      	ldr	r3, [pc, #180]	; (a78 <usart_init+0x324>)
     9c2:	4798      	blx	r3
     9c4:	0001      	movs	r1, r0
				status_code =
     9c6:	9b06      	ldr	r3, [sp, #24]
     9c8:	9300      	str	r3, [sp, #0]
     9ca:	9b07      	ldr	r3, [sp, #28]
     9cc:	220e      	movs	r2, #14
     9ce:	a806      	add	r0, sp, #24
     9d0:	4684      	mov	ip, r0
     9d2:	4462      	add	r2, ip
     9d4:	0038      	movs	r0, r7
     9d6:	4f2a      	ldr	r7, [pc, #168]	; (a80 <usart_init+0x32c>)
     9d8:	47b8      	blx	r7
     9da:	e7ea      	b.n	9b2 <usart_init+0x25e>
		if(config->lin_slave_enable) {
     9dc:	7ef3      	ldrb	r3, [r6, #27]
     9de:	2b00      	cmp	r3, #0
     9e0:	d100      	bne.n	9e4 <usart_init+0x290>
     9e2:	e77d      	b.n	8e0 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     9e4:	2380      	movs	r3, #128	; 0x80
     9e6:	04db      	lsls	r3, r3, #19
     9e8:	431f      	orrs	r7, r3
     9ea:	e779      	b.n	8e0 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     9ec:	0020      	movs	r0, r4
     9ee:	4b25      	ldr	r3, [pc, #148]	; (a84 <usart_init+0x330>)
     9f0:	4798      	blx	r3
     9f2:	e007      	b.n	a04 <usart_init+0x2b0>
     9f4:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     9f6:	2f04      	cmp	r7, #4
     9f8:	d00d      	beq.n	a16 <usart_init+0x2c2>
     9fa:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     9fc:	00bb      	lsls	r3, r7, #2
     9fe:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     a00:	2800      	cmp	r0, #0
     a02:	d0f3      	beq.n	9ec <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
     a04:	1c43      	adds	r3, r0, #1
     a06:	d0f5      	beq.n	9f4 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     a08:	a90e      	add	r1, sp, #56	; 0x38
     a0a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     a0c:	0c00      	lsrs	r0, r0, #16
     a0e:	b2c0      	uxtb	r0, r0
     a10:	4b1d      	ldr	r3, [pc, #116]	; (a88 <usart_init+0x334>)
     a12:	4798      	blx	r3
     a14:	e7ee      	b.n	9f4 <usart_init+0x2a0>
		module->callback[i]            = NULL;
     a16:	2300      	movs	r3, #0
     a18:	60eb      	str	r3, [r5, #12]
     a1a:	612b      	str	r3, [r5, #16]
     a1c:	616b      	str	r3, [r5, #20]
     a1e:	61ab      	str	r3, [r5, #24]
     a20:	61eb      	str	r3, [r5, #28]
     a22:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     a24:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     a26:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     a28:	2200      	movs	r2, #0
     a2a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     a2c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     a2e:	3330      	adds	r3, #48	; 0x30
     a30:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     a32:	3301      	adds	r3, #1
     a34:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     a36:	3301      	adds	r3, #1
     a38:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     a3a:	3301      	adds	r3, #1
     a3c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     a3e:	6828      	ldr	r0, [r5, #0]
     a40:	4b07      	ldr	r3, [pc, #28]	; (a60 <usart_init+0x30c>)
     a42:	4798      	blx	r3
     a44:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     a46:	4911      	ldr	r1, [pc, #68]	; (a8c <usart_init+0x338>)
     a48:	4b11      	ldr	r3, [pc, #68]	; (a90 <usart_init+0x33c>)
     a4a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     a4c:	00a4      	lsls	r4, r4, #2
     a4e:	4b11      	ldr	r3, [pc, #68]	; (a94 <usart_init+0x340>)
     a50:	50e5      	str	r5, [r4, r3]
	return status_code;
     a52:	2000      	movs	r0, #0
     a54:	e691      	b.n	77a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     a56:	2310      	movs	r3, #16
     a58:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     a5a:	2300      	movs	r3, #0
     a5c:	9307      	str	r3, [sp, #28]
     a5e:	e6e8      	b.n	832 <usart_init+0xde>
     a60:	00000451 	.word	0x00000451
     a64:	40000400 	.word	0x40000400
     a68:	0000139d 	.word	0x0000139d
     a6c:	00001311 	.word	0x00001311
     a70:	0000028d 	.word	0x0000028d
     a74:	41002000 	.word	0x41002000
     a78:	000013b9 	.word	0x000013b9
     a7c:	000001cf 	.word	0x000001cf
     a80:	000001f9 	.word	0x000001f9
     a84:	000002d9 	.word	0x000002d9
     a88:	00001495 	.word	0x00001495
     a8c:	00000bbd 	.word	0x00000bbd
     a90:	00000d55 	.word	0x00000d55
     a94:	20000128 	.word	0x20000128

00000a98 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     a98:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     a9a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     a9c:	2a00      	cmp	r2, #0
     a9e:	d101      	bne.n	aa4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     aa0:	0018      	movs	r0, r3
     aa2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     aa4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     aa6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     aa8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     aaa:	2a00      	cmp	r2, #0
     aac:	d1f8      	bne.n	aa0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     aae:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     ab0:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     ab2:	2a00      	cmp	r2, #0
     ab4:	d1fc      	bne.n	ab0 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     ab6:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     ab8:	2102      	movs	r1, #2
     aba:	7e1a      	ldrb	r2, [r3, #24]
     abc:	420a      	tst	r2, r1
     abe:	d0fc      	beq.n	aba <usart_write_wait+0x22>
	return STATUS_OK;
     ac0:	2300      	movs	r3, #0
     ac2:	e7ed      	b.n	aa0 <usart_write_wait+0x8>

00000ac4 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     ac4:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     ac6:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     ac8:	2a00      	cmp	r2, #0
     aca:	d101      	bne.n	ad0 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     acc:	0018      	movs	r0, r3
     ace:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     ad0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     ad2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     ad4:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     ad6:	2a00      	cmp	r2, #0
     ad8:	d1f8      	bne.n	acc <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     ada:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     adc:	7e10      	ldrb	r0, [r2, #24]
     ade:	0740      	lsls	r0, r0, #29
     ae0:	d5f4      	bpl.n	acc <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
     ae2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     ae4:	2b00      	cmp	r3, #0
     ae6:	d1fc      	bne.n	ae2 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     ae8:	8b53      	ldrh	r3, [r2, #26]
     aea:	b2db      	uxtb	r3, r3
	if (error_code) {
     aec:	0698      	lsls	r0, r3, #26
     aee:	d01d      	beq.n	b2c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     af0:	0798      	lsls	r0, r3, #30
     af2:	d503      	bpl.n	afc <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     af4:	2302      	movs	r3, #2
     af6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     af8:	3318      	adds	r3, #24
     afa:	e7e7      	b.n	acc <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     afc:	0758      	lsls	r0, r3, #29
     afe:	d503      	bpl.n	b08 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     b00:	2304      	movs	r3, #4
     b02:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     b04:	331a      	adds	r3, #26
     b06:	e7e1      	b.n	acc <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     b08:	07d8      	lsls	r0, r3, #31
     b0a:	d503      	bpl.n	b14 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     b0c:	2301      	movs	r3, #1
     b0e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     b10:	3312      	adds	r3, #18
     b12:	e7db      	b.n	acc <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     b14:	06d8      	lsls	r0, r3, #27
     b16:	d503      	bpl.n	b20 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     b18:	2310      	movs	r3, #16
     b1a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     b1c:	3332      	adds	r3, #50	; 0x32
     b1e:	e7d5      	b.n	acc <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     b20:	069b      	lsls	r3, r3, #26
     b22:	d503      	bpl.n	b2c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     b24:	2320      	movs	r3, #32
     b26:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     b28:	3321      	adds	r3, #33	; 0x21
     b2a:	e7cf      	b.n	acc <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     b2c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     b2e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     b30:	2300      	movs	r3, #0
     b32:	e7cb      	b.n	acc <usart_read_wait+0x8>

00000b34 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b36:	0004      	movs	r4, r0
     b38:	000d      	movs	r5, r1
     b3a:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b3c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
     b3e:	4b0f      	ldr	r3, [pc, #60]	; (b7c <_usart_read_buffer+0x48>)
     b40:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     b42:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     b44:	b29b      	uxth	r3, r3
     b46:	2b00      	cmp	r3, #0
     b48:	d003      	beq.n	b52 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
     b4a:	4b0d      	ldr	r3, [pc, #52]	; (b80 <_usart_read_buffer+0x4c>)
     b4c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     b4e:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
     b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
     b52:	85a6      	strh	r6, [r4, #44]	; 0x2c
     b54:	4b0a      	ldr	r3, [pc, #40]	; (b80 <_usart_read_buffer+0x4c>)
     b56:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
     b58:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
     b5a:	2205      	movs	r2, #5
     b5c:	2332      	movs	r3, #50	; 0x32
     b5e:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     b60:	3b2e      	subs	r3, #46	; 0x2e
     b62:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
     b64:	7a23      	ldrb	r3, [r4, #8]
     b66:	2b00      	cmp	r3, #0
     b68:	d001      	beq.n	b6e <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
     b6a:	2320      	movs	r3, #32
     b6c:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
     b6e:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
     b70:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
     b72:	2b00      	cmp	r3, #0
     b74:	d0ec      	beq.n	b50 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
     b76:	2308      	movs	r3, #8
     b78:	75bb      	strb	r3, [r7, #22]
     b7a:	e7e9      	b.n	b50 <_usart_read_buffer+0x1c>
     b7c:	00000e8d 	.word	0x00000e8d
     b80:	00000ecd 	.word	0x00000ecd

00000b84 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     b84:	1c93      	adds	r3, r2, #2
     b86:	009b      	lsls	r3, r3, #2
     b88:	18c3      	adds	r3, r0, r3
     b8a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     b8c:	2130      	movs	r1, #48	; 0x30
     b8e:	2301      	movs	r3, #1
     b90:	4093      	lsls	r3, r2
     b92:	001a      	movs	r2, r3
     b94:	5c43      	ldrb	r3, [r0, r1]
     b96:	4313      	orrs	r3, r2
     b98:	5443      	strb	r3, [r0, r1]
}
     b9a:	4770      	bx	lr

00000b9c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     b9c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     b9e:	2317      	movs	r3, #23
	if (length == 0) {
     ba0:	2a00      	cmp	r2, #0
     ba2:	d101      	bne.n	ba8 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
     ba4:	0018      	movs	r0, r3
     ba6:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
     ba8:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
     baa:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
     bac:	2c00      	cmp	r4, #0
     bae:	d0f9      	beq.n	ba4 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
     bb0:	4b01      	ldr	r3, [pc, #4]	; (bb8 <usart_read_buffer_job+0x1c>)
     bb2:	4798      	blx	r3
     bb4:	0003      	movs	r3, r0
     bb6:	e7f5      	b.n	ba4 <usart_read_buffer_job+0x8>
     bb8:	00000b35 	.word	0x00000b35

00000bbc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     bbe:	0080      	lsls	r0, r0, #2
     bc0:	4b62      	ldr	r3, [pc, #392]	; (d4c <_usart_interrupt_handler+0x190>)
     bc2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     bc4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     bc6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     bc8:	2b00      	cmp	r3, #0
     bca:	d1fc      	bne.n	bc6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     bcc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     bce:	7da6      	ldrb	r6, [r4, #22]
     bd0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     bd2:	2330      	movs	r3, #48	; 0x30
     bd4:	5ceb      	ldrb	r3, [r5, r3]
     bd6:	2231      	movs	r2, #49	; 0x31
     bd8:	5caf      	ldrb	r7, [r5, r2]
     bda:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     bdc:	07f3      	lsls	r3, r6, #31
     bde:	d522      	bpl.n	c26 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     be0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     be2:	b29b      	uxth	r3, r3
     be4:	2b00      	cmp	r3, #0
     be6:	d01c      	beq.n	c22 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     be8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     bea:	7813      	ldrb	r3, [r2, #0]
     bec:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     bee:	1c51      	adds	r1, r2, #1
     bf0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     bf2:	7969      	ldrb	r1, [r5, #5]
     bf4:	2901      	cmp	r1, #1
     bf6:	d00e      	beq.n	c16 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     bf8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     bfa:	05db      	lsls	r3, r3, #23
     bfc:	0ddb      	lsrs	r3, r3, #23
     bfe:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     c00:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     c02:	3b01      	subs	r3, #1
     c04:	b29b      	uxth	r3, r3
     c06:	85eb      	strh	r3, [r5, #46]	; 0x2e
     c08:	2b00      	cmp	r3, #0
     c0a:	d10c      	bne.n	c26 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     c0c:	3301      	adds	r3, #1
     c0e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     c10:	3301      	adds	r3, #1
     c12:	75a3      	strb	r3, [r4, #22]
     c14:	e007      	b.n	c26 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     c16:	7851      	ldrb	r1, [r2, #1]
     c18:	0209      	lsls	r1, r1, #8
     c1a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     c1c:	3202      	adds	r2, #2
     c1e:	62aa      	str	r2, [r5, #40]	; 0x28
     c20:	e7eb      	b.n	bfa <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     c22:	2301      	movs	r3, #1
     c24:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     c26:	07b3      	lsls	r3, r6, #30
     c28:	d506      	bpl.n	c38 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     c2a:	2302      	movs	r3, #2
     c2c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     c2e:	2200      	movs	r2, #0
     c30:	3331      	adds	r3, #49	; 0x31
     c32:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     c34:	07fb      	lsls	r3, r7, #31
     c36:	d41a      	bmi.n	c6e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     c38:	0773      	lsls	r3, r6, #29
     c3a:	d565      	bpl.n	d08 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     c3c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     c3e:	b29b      	uxth	r3, r3
     c40:	2b00      	cmp	r3, #0
     c42:	d05f      	beq.n	d04 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     c44:	8b63      	ldrh	r3, [r4, #26]
     c46:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     c48:	071a      	lsls	r2, r3, #28
     c4a:	d414      	bmi.n	c76 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     c4c:	223f      	movs	r2, #63	; 0x3f
     c4e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     c50:	2b00      	cmp	r3, #0
     c52:	d034      	beq.n	cbe <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     c54:	079a      	lsls	r2, r3, #30
     c56:	d511      	bpl.n	c7c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     c58:	221a      	movs	r2, #26
     c5a:	2332      	movs	r3, #50	; 0x32
     c5c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     c5e:	3b30      	subs	r3, #48	; 0x30
     c60:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     c62:	077b      	lsls	r3, r7, #29
     c64:	d550      	bpl.n	d08 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     c66:	0028      	movs	r0, r5
     c68:	696b      	ldr	r3, [r5, #20]
     c6a:	4798      	blx	r3
     c6c:	e04c      	b.n	d08 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     c6e:	0028      	movs	r0, r5
     c70:	68eb      	ldr	r3, [r5, #12]
     c72:	4798      	blx	r3
     c74:	e7e0      	b.n	c38 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     c76:	2237      	movs	r2, #55	; 0x37
     c78:	4013      	ands	r3, r2
     c7a:	e7e9      	b.n	c50 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     c7c:	075a      	lsls	r2, r3, #29
     c7e:	d505      	bpl.n	c8c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     c80:	221e      	movs	r2, #30
     c82:	2332      	movs	r3, #50	; 0x32
     c84:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     c86:	3b2e      	subs	r3, #46	; 0x2e
     c88:	8363      	strh	r3, [r4, #26]
     c8a:	e7ea      	b.n	c62 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     c8c:	07da      	lsls	r2, r3, #31
     c8e:	d505      	bpl.n	c9c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     c90:	2213      	movs	r2, #19
     c92:	2332      	movs	r3, #50	; 0x32
     c94:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     c96:	3b31      	subs	r3, #49	; 0x31
     c98:	8363      	strh	r3, [r4, #26]
     c9a:	e7e2      	b.n	c62 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     c9c:	06da      	lsls	r2, r3, #27
     c9e:	d505      	bpl.n	cac <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     ca0:	2242      	movs	r2, #66	; 0x42
     ca2:	2332      	movs	r3, #50	; 0x32
     ca4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     ca6:	3b22      	subs	r3, #34	; 0x22
     ca8:	8363      	strh	r3, [r4, #26]
     caa:	e7da      	b.n	c62 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     cac:	2220      	movs	r2, #32
     cae:	421a      	tst	r2, r3
     cb0:	d0d7      	beq.n	c62 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     cb2:	3221      	adds	r2, #33	; 0x21
     cb4:	2332      	movs	r3, #50	; 0x32
     cb6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     cb8:	3b12      	subs	r3, #18
     cba:	8363      	strh	r3, [r4, #26]
     cbc:	e7d1      	b.n	c62 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     cbe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     cc0:	05db      	lsls	r3, r3, #23
     cc2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     cc4:	b2da      	uxtb	r2, r3
     cc6:	6a69      	ldr	r1, [r5, #36]	; 0x24
     cc8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     cca:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     ccc:	1c51      	adds	r1, r2, #1
     cce:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     cd0:	7969      	ldrb	r1, [r5, #5]
     cd2:	2901      	cmp	r1, #1
     cd4:	d010      	beq.n	cf8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     cd6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     cd8:	3b01      	subs	r3, #1
     cda:	b29b      	uxth	r3, r3
     cdc:	85ab      	strh	r3, [r5, #44]	; 0x2c
     cde:	2b00      	cmp	r3, #0
     ce0:	d112      	bne.n	d08 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     ce2:	3304      	adds	r3, #4
     ce4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     ce6:	2200      	movs	r2, #0
     ce8:	332e      	adds	r3, #46	; 0x2e
     cea:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     cec:	07bb      	lsls	r3, r7, #30
     cee:	d50b      	bpl.n	d08 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     cf0:	0028      	movs	r0, r5
     cf2:	692b      	ldr	r3, [r5, #16]
     cf4:	4798      	blx	r3
     cf6:	e007      	b.n	d08 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     cf8:	0a1b      	lsrs	r3, r3, #8
     cfa:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     cfc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     cfe:	3301      	adds	r3, #1
     d00:	626b      	str	r3, [r5, #36]	; 0x24
     d02:	e7e8      	b.n	cd6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     d04:	2304      	movs	r3, #4
     d06:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     d08:	06f3      	lsls	r3, r6, #27
     d0a:	d504      	bpl.n	d16 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     d0c:	2310      	movs	r3, #16
     d0e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     d10:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     d12:	06fb      	lsls	r3, r7, #27
     d14:	d40e      	bmi.n	d34 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     d16:	06b3      	lsls	r3, r6, #26
     d18:	d504      	bpl.n	d24 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     d1a:	2320      	movs	r3, #32
     d1c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     d1e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     d20:	073b      	lsls	r3, r7, #28
     d22:	d40b      	bmi.n	d3c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     d24:	0733      	lsls	r3, r6, #28
     d26:	d504      	bpl.n	d32 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     d28:	2308      	movs	r3, #8
     d2a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     d2c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     d2e:	06bb      	lsls	r3, r7, #26
     d30:	d408      	bmi.n	d44 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     d34:	0028      	movs	r0, r5
     d36:	69eb      	ldr	r3, [r5, #28]
     d38:	4798      	blx	r3
     d3a:	e7ec      	b.n	d16 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     d3c:	0028      	movs	r0, r5
     d3e:	69ab      	ldr	r3, [r5, #24]
     d40:	4798      	blx	r3
     d42:	e7ef      	b.n	d24 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     d44:	6a2b      	ldr	r3, [r5, #32]
     d46:	0028      	movs	r0, r5
     d48:	4798      	blx	r3
}
     d4a:	e7f2      	b.n	d32 <_usart_interrupt_handler+0x176>
     d4c:	20000128 	.word	0x20000128

00000d50 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     d50:	4770      	bx	lr
	...

00000d54 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     d54:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     d56:	4b0a      	ldr	r3, [pc, #40]	; (d80 <_sercom_set_handler+0x2c>)
     d58:	781b      	ldrb	r3, [r3, #0]
     d5a:	2b00      	cmp	r3, #0
     d5c:	d10c      	bne.n	d78 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     d5e:	4f09      	ldr	r7, [pc, #36]	; (d84 <_sercom_set_handler+0x30>)
     d60:	4e09      	ldr	r6, [pc, #36]	; (d88 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     d62:	4d0a      	ldr	r5, [pc, #40]	; (d8c <_sercom_set_handler+0x38>)
     d64:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     d66:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     d68:	195a      	adds	r2, r3, r5
     d6a:	6014      	str	r4, [r2, #0]
     d6c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d6e:	2b18      	cmp	r3, #24
     d70:	d1f9      	bne.n	d66 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     d72:	2201      	movs	r2, #1
     d74:	4b02      	ldr	r3, [pc, #8]	; (d80 <_sercom_set_handler+0x2c>)
     d76:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     d78:	0080      	lsls	r0, r0, #2
     d7a:	4b02      	ldr	r3, [pc, #8]	; (d84 <_sercom_set_handler+0x30>)
     d7c:	50c1      	str	r1, [r0, r3]
}
     d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d80:	2000008e 	.word	0x2000008e
     d84:	20000090 	.word	0x20000090
     d88:	00000d51 	.word	0x00000d51
     d8c:	20000128 	.word	0x20000128

00000d90 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     d90:	b500      	push	{lr}
     d92:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     d94:	2309      	movs	r3, #9
     d96:	466a      	mov	r2, sp
     d98:	7013      	strb	r3, [r2, #0]
     d9a:	3301      	adds	r3, #1
     d9c:	7053      	strb	r3, [r2, #1]
     d9e:	3301      	adds	r3, #1
     da0:	7093      	strb	r3, [r2, #2]
     da2:	3301      	adds	r3, #1
     da4:	70d3      	strb	r3, [r2, #3]
     da6:	3301      	adds	r3, #1
     da8:	7113      	strb	r3, [r2, #4]
     daa:	3301      	adds	r3, #1
     dac:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     dae:	4b03      	ldr	r3, [pc, #12]	; (dbc <_sercom_get_interrupt_vector+0x2c>)
     db0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     db2:	466b      	mov	r3, sp
     db4:	5618      	ldrsb	r0, [r3, r0]
}
     db6:	b003      	add	sp, #12
     db8:	bd00      	pop	{pc}
     dba:	46c0      	nop			; (mov r8, r8)
     dbc:	00000451 	.word	0x00000451

00000dc0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     dc0:	b510      	push	{r4, lr}
     dc2:	4b02      	ldr	r3, [pc, #8]	; (dcc <SERCOM0_Handler+0xc>)
     dc4:	681b      	ldr	r3, [r3, #0]
     dc6:	2000      	movs	r0, #0
     dc8:	4798      	blx	r3
     dca:	bd10      	pop	{r4, pc}
     dcc:	20000090 	.word	0x20000090

00000dd0 <SERCOM1_Handler>:
     dd0:	b510      	push	{r4, lr}
     dd2:	4b02      	ldr	r3, [pc, #8]	; (ddc <SERCOM1_Handler+0xc>)
     dd4:	685b      	ldr	r3, [r3, #4]
     dd6:	2001      	movs	r0, #1
     dd8:	4798      	blx	r3
     dda:	bd10      	pop	{r4, pc}
     ddc:	20000090 	.word	0x20000090

00000de0 <SERCOM2_Handler>:
     de0:	b510      	push	{r4, lr}
     de2:	4b02      	ldr	r3, [pc, #8]	; (dec <SERCOM2_Handler+0xc>)
     de4:	689b      	ldr	r3, [r3, #8]
     de6:	2002      	movs	r0, #2
     de8:	4798      	blx	r3
     dea:	bd10      	pop	{r4, pc}
     dec:	20000090 	.word	0x20000090

00000df0 <SERCOM3_Handler>:
     df0:	b510      	push	{r4, lr}
     df2:	4b02      	ldr	r3, [pc, #8]	; (dfc <SERCOM3_Handler+0xc>)
     df4:	68db      	ldr	r3, [r3, #12]
     df6:	2003      	movs	r0, #3
     df8:	4798      	blx	r3
     dfa:	bd10      	pop	{r4, pc}
     dfc:	20000090 	.word	0x20000090

00000e00 <SERCOM4_Handler>:
     e00:	b510      	push	{r4, lr}
     e02:	4b02      	ldr	r3, [pc, #8]	; (e0c <SERCOM4_Handler+0xc>)
     e04:	691b      	ldr	r3, [r3, #16]
     e06:	2004      	movs	r0, #4
     e08:	4798      	blx	r3
     e0a:	bd10      	pop	{r4, pc}
     e0c:	20000090 	.word	0x20000090

00000e10 <SERCOM5_Handler>:
     e10:	b510      	push	{r4, lr}
     e12:	4b02      	ldr	r3, [pc, #8]	; (e1c <SERCOM5_Handler+0xc>)
     e14:	695b      	ldr	r3, [r3, #20]
     e16:	2005      	movs	r0, #5
     e18:	4798      	blx	r3
     e1a:	bd10      	pop	{r4, pc}
     e1c:	20000090 	.word	0x20000090

00000e20 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     e20:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     e22:	2000      	movs	r0, #0
     e24:	4b08      	ldr	r3, [pc, #32]	; (e48 <delay_init+0x28>)
     e26:	4798      	blx	r3
     e28:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     e2a:	4c08      	ldr	r4, [pc, #32]	; (e4c <delay_init+0x2c>)
     e2c:	21fa      	movs	r1, #250	; 0xfa
     e2e:	0089      	lsls	r1, r1, #2
     e30:	47a0      	blx	r4
     e32:	4b07      	ldr	r3, [pc, #28]	; (e50 <delay_init+0x30>)
     e34:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     e36:	4907      	ldr	r1, [pc, #28]	; (e54 <delay_init+0x34>)
     e38:	0028      	movs	r0, r5
     e3a:	47a0      	blx	r4
     e3c:	4b06      	ldr	r3, [pc, #24]	; (e58 <delay_init+0x38>)
     e3e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     e40:	2205      	movs	r2, #5
     e42:	4b06      	ldr	r3, [pc, #24]	; (e5c <delay_init+0x3c>)
     e44:	601a      	str	r2, [r3, #0]
}
     e46:	bd70      	pop	{r4, r5, r6, pc}
     e48:	00001285 	.word	0x00001285
     e4c:	00001685 	.word	0x00001685
     e50:	20000000 	.word	0x20000000
     e54:	000f4240 	.word	0x000f4240
     e58:	20000004 	.word	0x20000004
     e5c:	e000e010 	.word	0xe000e010

00000e60 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     e60:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     e62:	4b08      	ldr	r3, [pc, #32]	; (e84 <delay_cycles_ms+0x24>)
     e64:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     e66:	4a08      	ldr	r2, [pc, #32]	; (e88 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     e68:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     e6a:	2180      	movs	r1, #128	; 0x80
     e6c:	0249      	lsls	r1, r1, #9
	while (n--) {
     e6e:	3801      	subs	r0, #1
     e70:	d307      	bcc.n	e82 <delay_cycles_ms+0x22>
	if (n > 0) {
     e72:	2c00      	cmp	r4, #0
     e74:	d0fb      	beq.n	e6e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     e76:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     e78:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     e7a:	6813      	ldr	r3, [r2, #0]
     e7c:	420b      	tst	r3, r1
     e7e:	d0fc      	beq.n	e7a <delay_cycles_ms+0x1a>
     e80:	e7f5      	b.n	e6e <delay_cycles_ms+0xe>
	}
}
     e82:	bd30      	pop	{r4, r5, pc}
     e84:	20000000 	.word	0x20000000
     e88:	e000e010 	.word	0xe000e010

00000e8c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     e8c:	4b0c      	ldr	r3, [pc, #48]	; (ec0 <cpu_irq_enter_critical+0x34>)
     e8e:	681b      	ldr	r3, [r3, #0]
     e90:	2b00      	cmp	r3, #0
     e92:	d106      	bne.n	ea2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     e94:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     e98:	2b00      	cmp	r3, #0
     e9a:	d007      	beq.n	eac <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     e9c:	2200      	movs	r2, #0
     e9e:	4b09      	ldr	r3, [pc, #36]	; (ec4 <cpu_irq_enter_critical+0x38>)
     ea0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     ea2:	4a07      	ldr	r2, [pc, #28]	; (ec0 <cpu_irq_enter_critical+0x34>)
     ea4:	6813      	ldr	r3, [r2, #0]
     ea6:	3301      	adds	r3, #1
     ea8:	6013      	str	r3, [r2, #0]
}
     eaa:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     eac:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     eae:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     eb2:	2200      	movs	r2, #0
     eb4:	4b04      	ldr	r3, [pc, #16]	; (ec8 <cpu_irq_enter_critical+0x3c>)
     eb6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     eb8:	3201      	adds	r2, #1
     eba:	4b02      	ldr	r3, [pc, #8]	; (ec4 <cpu_irq_enter_critical+0x38>)
     ebc:	701a      	strb	r2, [r3, #0]
     ebe:	e7f0      	b.n	ea2 <cpu_irq_enter_critical+0x16>
     ec0:	200000a8 	.word	0x200000a8
     ec4:	200000ac 	.word	0x200000ac
     ec8:	20000008 	.word	0x20000008

00000ecc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     ecc:	4b08      	ldr	r3, [pc, #32]	; (ef0 <cpu_irq_leave_critical+0x24>)
     ece:	681a      	ldr	r2, [r3, #0]
     ed0:	3a01      	subs	r2, #1
     ed2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     ed4:	681b      	ldr	r3, [r3, #0]
     ed6:	2b00      	cmp	r3, #0
     ed8:	d109      	bne.n	eee <cpu_irq_leave_critical+0x22>
     eda:	4b06      	ldr	r3, [pc, #24]	; (ef4 <cpu_irq_leave_critical+0x28>)
     edc:	781b      	ldrb	r3, [r3, #0]
     ede:	2b00      	cmp	r3, #0
     ee0:	d005      	beq.n	eee <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     ee2:	2201      	movs	r2, #1
     ee4:	4b04      	ldr	r3, [pc, #16]	; (ef8 <cpu_irq_leave_critical+0x2c>)
     ee6:	701a      	strb	r2, [r3, #0]
     ee8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     eec:	b662      	cpsie	i
	}
}
     eee:	4770      	bx	lr
     ef0:	200000a8 	.word	0x200000a8
     ef4:	200000ac 	.word	0x200000ac
     ef8:	20000008 	.word	0x20000008

00000efc <system_board_init>:




void system_board_init(void)
{
     efc:	b5f0      	push	{r4, r5, r6, r7, lr}
     efe:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
     f00:	ac01      	add	r4, sp, #4
     f02:	2501      	movs	r5, #1
     f04:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     f06:	2700      	movs	r7, #0
     f08:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     f0a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     f0c:	0021      	movs	r1, r4
     f0e:	2013      	movs	r0, #19
     f10:	4e06      	ldr	r6, [pc, #24]	; (f2c <system_board_init+0x30>)
     f12:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
     f14:	2280      	movs	r2, #128	; 0x80
     f16:	0312      	lsls	r2, r2, #12
     f18:	4b05      	ldr	r3, [pc, #20]	; (f30 <system_board_init+0x34>)
     f1a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     f1c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     f1e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     f20:	0021      	movs	r1, r4
     f22:	201c      	movs	r0, #28
     f24:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
     f26:	b003      	add	sp, #12
     f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	00000f35 	.word	0x00000f35
     f30:	41004400 	.word	0x41004400

00000f34 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     f34:	b500      	push	{lr}
     f36:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f38:	ab01      	add	r3, sp, #4
     f3a:	2280      	movs	r2, #128	; 0x80
     f3c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     f3e:	780a      	ldrb	r2, [r1, #0]
     f40:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     f42:	784a      	ldrb	r2, [r1, #1]
     f44:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     f46:	788a      	ldrb	r2, [r1, #2]
     f48:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     f4a:	0019      	movs	r1, r3
     f4c:	4b01      	ldr	r3, [pc, #4]	; (f54 <port_pin_set_config+0x20>)
     f4e:	4798      	blx	r3
}
     f50:	b003      	add	sp, #12
     f52:	bd00      	pop	{pc}
     f54:	00001495 	.word	0x00001495

00000f58 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     f58:	b510      	push	{r4, lr}
	switch (clock_source) {
     f5a:	2808      	cmp	r0, #8
     f5c:	d803      	bhi.n	f66 <system_clock_source_get_hz+0xe>
     f5e:	0080      	lsls	r0, r0, #2
     f60:	4b1b      	ldr	r3, [pc, #108]	; (fd0 <system_clock_source_get_hz+0x78>)
     f62:	581b      	ldr	r3, [r3, r0]
     f64:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     f66:	2000      	movs	r0, #0
     f68:	e030      	b.n	fcc <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
     f6a:	4b1a      	ldr	r3, [pc, #104]	; (fd4 <system_clock_source_get_hz+0x7c>)
     f6c:	6918      	ldr	r0, [r3, #16]
     f6e:	e02d      	b.n	fcc <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     f70:	4b19      	ldr	r3, [pc, #100]	; (fd8 <system_clock_source_get_hz+0x80>)
     f72:	6a1b      	ldr	r3, [r3, #32]
     f74:	059b      	lsls	r3, r3, #22
     f76:	0f9b      	lsrs	r3, r3, #30
     f78:	4818      	ldr	r0, [pc, #96]	; (fdc <system_clock_source_get_hz+0x84>)
     f7a:	40d8      	lsrs	r0, r3
     f7c:	e026      	b.n	fcc <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
     f7e:	4b15      	ldr	r3, [pc, #84]	; (fd4 <system_clock_source_get_hz+0x7c>)
     f80:	6958      	ldr	r0, [r3, #20]
     f82:	e023      	b.n	fcc <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     f84:	4b13      	ldr	r3, [pc, #76]	; (fd4 <system_clock_source_get_hz+0x7c>)
     f86:	681b      	ldr	r3, [r3, #0]
			return 0;
     f88:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     f8a:	079b      	lsls	r3, r3, #30
     f8c:	d51e      	bpl.n	fcc <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f8e:	4912      	ldr	r1, [pc, #72]	; (fd8 <system_clock_source_get_hz+0x80>)
     f90:	2210      	movs	r2, #16
     f92:	68cb      	ldr	r3, [r1, #12]
     f94:	421a      	tst	r2, r3
     f96:	d0fc      	beq.n	f92 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     f98:	4b0e      	ldr	r3, [pc, #56]	; (fd4 <system_clock_source_get_hz+0x7c>)
     f9a:	681b      	ldr	r3, [r3, #0]
     f9c:	075b      	lsls	r3, r3, #29
     f9e:	d401      	bmi.n	fa4 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
     fa0:	480f      	ldr	r0, [pc, #60]	; (fe0 <system_clock_source_get_hz+0x88>)
     fa2:	e013      	b.n	fcc <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     fa4:	2000      	movs	r0, #0
     fa6:	4b0f      	ldr	r3, [pc, #60]	; (fe4 <system_clock_source_get_hz+0x8c>)
     fa8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     faa:	4b0a      	ldr	r3, [pc, #40]	; (fd4 <system_clock_source_get_hz+0x7c>)
     fac:	689b      	ldr	r3, [r3, #8]
     fae:	041b      	lsls	r3, r3, #16
     fb0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     fb2:	4358      	muls	r0, r3
     fb4:	e00a      	b.n	fcc <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     fb6:	2350      	movs	r3, #80	; 0x50
     fb8:	4a07      	ldr	r2, [pc, #28]	; (fd8 <system_clock_source_get_hz+0x80>)
     fba:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     fbc:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     fbe:	075b      	lsls	r3, r3, #29
     fc0:	d504      	bpl.n	fcc <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
     fc2:	4b04      	ldr	r3, [pc, #16]	; (fd4 <system_clock_source_get_hz+0x7c>)
     fc4:	68d8      	ldr	r0, [r3, #12]
     fc6:	e001      	b.n	fcc <system_clock_source_get_hz+0x74>
		return 32768UL;
     fc8:	2080      	movs	r0, #128	; 0x80
     fca:	0200      	lsls	r0, r0, #8
	}
}
     fcc:	bd10      	pop	{r4, pc}
     fce:	46c0      	nop			; (mov r8, r8)
     fd0:	00002878 	.word	0x00002878
     fd4:	200000b0 	.word	0x200000b0
     fd8:	40000800 	.word	0x40000800
     fdc:	007a1200 	.word	0x007a1200
     fe0:	02dc6c00 	.word	0x02dc6c00
     fe4:	000013b9 	.word	0x000013b9

00000fe8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     fe8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     fea:	490c      	ldr	r1, [pc, #48]	; (101c <system_clock_source_osc8m_set_config+0x34>)
     fec:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     fee:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     ff0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     ff2:	7840      	ldrb	r0, [r0, #1]
     ff4:	2201      	movs	r2, #1
     ff6:	4010      	ands	r0, r2
     ff8:	0180      	lsls	r0, r0, #6
     ffa:	2640      	movs	r6, #64	; 0x40
     ffc:	43b3      	bics	r3, r6
     ffe:	4303      	orrs	r3, r0
    1000:	402a      	ands	r2, r5
    1002:	01d2      	lsls	r2, r2, #7
    1004:	2080      	movs	r0, #128	; 0x80
    1006:	4383      	bics	r3, r0
    1008:	4313      	orrs	r3, r2
    100a:	2203      	movs	r2, #3
    100c:	4022      	ands	r2, r4
    100e:	0212      	lsls	r2, r2, #8
    1010:	4803      	ldr	r0, [pc, #12]	; (1020 <system_clock_source_osc8m_set_config+0x38>)
    1012:	4003      	ands	r3, r0
    1014:	4313      	orrs	r3, r2
    1016:	620b      	str	r3, [r1, #32]
}
    1018:	bd70      	pop	{r4, r5, r6, pc}
    101a:	46c0      	nop			; (mov r8, r8)
    101c:	40000800 	.word	0x40000800
    1020:	fffffcff 	.word	0xfffffcff

00001024 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1024:	2808      	cmp	r0, #8
    1026:	d803      	bhi.n	1030 <system_clock_source_enable+0xc>
    1028:	0080      	lsls	r0, r0, #2
    102a:	4b25      	ldr	r3, [pc, #148]	; (10c0 <system_clock_source_enable+0x9c>)
    102c:	581b      	ldr	r3, [r3, r0]
    102e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1030:	2017      	movs	r0, #23
    1032:	e044      	b.n	10be <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1034:	4a23      	ldr	r2, [pc, #140]	; (10c4 <system_clock_source_enable+0xa0>)
    1036:	6a13      	ldr	r3, [r2, #32]
    1038:	2102      	movs	r1, #2
    103a:	430b      	orrs	r3, r1
    103c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    103e:	2000      	movs	r0, #0
    1040:	e03d      	b.n	10be <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1042:	4a20      	ldr	r2, [pc, #128]	; (10c4 <system_clock_source_enable+0xa0>)
    1044:	6993      	ldr	r3, [r2, #24]
    1046:	2102      	movs	r1, #2
    1048:	430b      	orrs	r3, r1
    104a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    104c:	2000      	movs	r0, #0
		break;
    104e:	e036      	b.n	10be <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1050:	4a1c      	ldr	r2, [pc, #112]	; (10c4 <system_clock_source_enable+0xa0>)
    1052:	8a13      	ldrh	r3, [r2, #16]
    1054:	2102      	movs	r1, #2
    1056:	430b      	orrs	r3, r1
    1058:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    105a:	2000      	movs	r0, #0
		break;
    105c:	e02f      	b.n	10be <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    105e:	4a19      	ldr	r2, [pc, #100]	; (10c4 <system_clock_source_enable+0xa0>)
    1060:	8a93      	ldrh	r3, [r2, #20]
    1062:	2102      	movs	r1, #2
    1064:	430b      	orrs	r3, r1
    1066:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1068:	2000      	movs	r0, #0
		break;
    106a:	e028      	b.n	10be <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    106c:	4916      	ldr	r1, [pc, #88]	; (10c8 <system_clock_source_enable+0xa4>)
    106e:	680b      	ldr	r3, [r1, #0]
    1070:	2202      	movs	r2, #2
    1072:	4313      	orrs	r3, r2
    1074:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1076:	4b13      	ldr	r3, [pc, #76]	; (10c4 <system_clock_source_enable+0xa0>)
    1078:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    107a:	0019      	movs	r1, r3
    107c:	320e      	adds	r2, #14
    107e:	68cb      	ldr	r3, [r1, #12]
    1080:	421a      	tst	r2, r3
    1082:	d0fc      	beq.n	107e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1084:	4a10      	ldr	r2, [pc, #64]	; (10c8 <system_clock_source_enable+0xa4>)
    1086:	6891      	ldr	r1, [r2, #8]
    1088:	4b0e      	ldr	r3, [pc, #56]	; (10c4 <system_clock_source_enable+0xa0>)
    108a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    108c:	6852      	ldr	r2, [r2, #4]
    108e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1090:	2200      	movs	r2, #0
    1092:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1094:	0019      	movs	r1, r3
    1096:	3210      	adds	r2, #16
    1098:	68cb      	ldr	r3, [r1, #12]
    109a:	421a      	tst	r2, r3
    109c:	d0fc      	beq.n	1098 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    109e:	4b0a      	ldr	r3, [pc, #40]	; (10c8 <system_clock_source_enable+0xa4>)
    10a0:	681b      	ldr	r3, [r3, #0]
    10a2:	b29b      	uxth	r3, r3
    10a4:	4a07      	ldr	r2, [pc, #28]	; (10c4 <system_clock_source_enable+0xa0>)
    10a6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    10a8:	2000      	movs	r0, #0
    10aa:	e008      	b.n	10be <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    10ac:	4905      	ldr	r1, [pc, #20]	; (10c4 <system_clock_source_enable+0xa0>)
    10ae:	2244      	movs	r2, #68	; 0x44
    10b0:	5c8b      	ldrb	r3, [r1, r2]
    10b2:	2002      	movs	r0, #2
    10b4:	4303      	orrs	r3, r0
    10b6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    10b8:	2000      	movs	r0, #0
		break;
    10ba:	e000      	b.n	10be <system_clock_source_enable+0x9a>
		return STATUS_OK;
    10bc:	2000      	movs	r0, #0
}
    10be:	4770      	bx	lr
    10c0:	0000289c 	.word	0x0000289c
    10c4:	40000800 	.word	0x40000800
    10c8:	200000b0 	.word	0x200000b0

000010cc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    10cc:	b530      	push	{r4, r5, lr}
    10ce:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    10d0:	22c2      	movs	r2, #194	; 0xc2
    10d2:	00d2      	lsls	r2, r2, #3
    10d4:	4b1a      	ldr	r3, [pc, #104]	; (1140 <system_clock_init+0x74>)
    10d6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    10d8:	4a1a      	ldr	r2, [pc, #104]	; (1144 <system_clock_init+0x78>)
    10da:	6853      	ldr	r3, [r2, #4]
    10dc:	211e      	movs	r1, #30
    10de:	438b      	bics	r3, r1
    10e0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    10e2:	2301      	movs	r3, #1
    10e4:	466a      	mov	r2, sp
    10e6:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    10e8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    10ea:	4d17      	ldr	r5, [pc, #92]	; (1148 <system_clock_init+0x7c>)
    10ec:	b2e0      	uxtb	r0, r4
    10ee:	4669      	mov	r1, sp
    10f0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    10f2:	3401      	adds	r4, #1
    10f4:	2c25      	cmp	r4, #37	; 0x25
    10f6:	d1f9      	bne.n	10ec <system_clock_init+0x20>
	config->run_in_standby  = false;
    10f8:	a803      	add	r0, sp, #12
    10fa:	2400      	movs	r4, #0
    10fc:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    10fe:	2501      	movs	r5, #1
    1100:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1102:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1104:	4b11      	ldr	r3, [pc, #68]	; (114c <system_clock_init+0x80>)
    1106:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1108:	2006      	movs	r0, #6
    110a:	4b11      	ldr	r3, [pc, #68]	; (1150 <system_clock_init+0x84>)
    110c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    110e:	4b11      	ldr	r3, [pc, #68]	; (1154 <system_clock_init+0x88>)
    1110:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1112:	4b11      	ldr	r3, [pc, #68]	; (1158 <system_clock_init+0x8c>)
    1114:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1116:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1118:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    111a:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    111c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    111e:	466b      	mov	r3, sp
    1120:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1122:	2306      	movs	r3, #6
    1124:	466a      	mov	r2, sp
    1126:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1128:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    112a:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    112c:	4669      	mov	r1, sp
    112e:	2000      	movs	r0, #0
    1130:	4b0a      	ldr	r3, [pc, #40]	; (115c <system_clock_init+0x90>)
    1132:	4798      	blx	r3
    1134:	2000      	movs	r0, #0
    1136:	4b0a      	ldr	r3, [pc, #40]	; (1160 <system_clock_init+0x94>)
    1138:	4798      	blx	r3
#endif
}
    113a:	b005      	add	sp, #20
    113c:	bd30      	pop	{r4, r5, pc}
    113e:	46c0      	nop			; (mov r8, r8)
    1140:	40000800 	.word	0x40000800
    1144:	41004000 	.word	0x41004000
    1148:	0000139d 	.word	0x0000139d
    114c:	00000fe9 	.word	0x00000fe9
    1150:	00001025 	.word	0x00001025
    1154:	00001165 	.word	0x00001165
    1158:	40000400 	.word	0x40000400
    115c:	00001189 	.word	0x00001189
    1160:	00001241 	.word	0x00001241

00001164 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1164:	4a06      	ldr	r2, [pc, #24]	; (1180 <system_gclk_init+0x1c>)
    1166:	6993      	ldr	r3, [r2, #24]
    1168:	2108      	movs	r1, #8
    116a:	430b      	orrs	r3, r1
    116c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    116e:	2201      	movs	r2, #1
    1170:	4b04      	ldr	r3, [pc, #16]	; (1184 <system_gclk_init+0x20>)
    1172:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1174:	0019      	movs	r1, r3
    1176:	780b      	ldrb	r3, [r1, #0]
    1178:	4213      	tst	r3, r2
    117a:	d1fc      	bne.n	1176 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    117c:	4770      	bx	lr
    117e:	46c0      	nop			; (mov r8, r8)
    1180:	40000400 	.word	0x40000400
    1184:	40000c00 	.word	0x40000c00

00001188 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1188:	b570      	push	{r4, r5, r6, lr}
    118a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    118c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    118e:	780d      	ldrb	r5, [r1, #0]
    1190:	022d      	lsls	r5, r5, #8
    1192:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1194:	784b      	ldrb	r3, [r1, #1]
    1196:	2b00      	cmp	r3, #0
    1198:	d002      	beq.n	11a0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    119a:	2380      	movs	r3, #128	; 0x80
    119c:	02db      	lsls	r3, r3, #11
    119e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    11a0:	7a4b      	ldrb	r3, [r1, #9]
    11a2:	2b00      	cmp	r3, #0
    11a4:	d002      	beq.n	11ac <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    11a6:	2380      	movs	r3, #128	; 0x80
    11a8:	031b      	lsls	r3, r3, #12
    11aa:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    11ac:	6848      	ldr	r0, [r1, #4]
    11ae:	2801      	cmp	r0, #1
    11b0:	d910      	bls.n	11d4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    11b2:	1e43      	subs	r3, r0, #1
    11b4:	4218      	tst	r0, r3
    11b6:	d134      	bne.n	1222 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    11b8:	2802      	cmp	r0, #2
    11ba:	d930      	bls.n	121e <system_gclk_gen_set_config+0x96>
    11bc:	2302      	movs	r3, #2
    11be:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    11c0:	3201      	adds	r2, #1
						mask <<= 1) {
    11c2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    11c4:	4298      	cmp	r0, r3
    11c6:	d8fb      	bhi.n	11c0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    11c8:	0212      	lsls	r2, r2, #8
    11ca:	4332      	orrs	r2, r6
    11cc:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    11ce:	2380      	movs	r3, #128	; 0x80
    11d0:	035b      	lsls	r3, r3, #13
    11d2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    11d4:	7a0b      	ldrb	r3, [r1, #8]
    11d6:	2b00      	cmp	r3, #0
    11d8:	d002      	beq.n	11e0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    11da:	2380      	movs	r3, #128	; 0x80
    11dc:	039b      	lsls	r3, r3, #14
    11de:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11e0:	4a13      	ldr	r2, [pc, #76]	; (1230 <system_gclk_gen_set_config+0xa8>)
    11e2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    11e4:	b25b      	sxtb	r3, r3
    11e6:	2b00      	cmp	r3, #0
    11e8:	dbfb      	blt.n	11e2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    11ea:	4b12      	ldr	r3, [pc, #72]	; (1234 <system_gclk_gen_set_config+0xac>)
    11ec:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    11ee:	4b12      	ldr	r3, [pc, #72]	; (1238 <system_gclk_gen_set_config+0xb0>)
    11f0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11f2:	4a0f      	ldr	r2, [pc, #60]	; (1230 <system_gclk_gen_set_config+0xa8>)
    11f4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    11f6:	b25b      	sxtb	r3, r3
    11f8:	2b00      	cmp	r3, #0
    11fa:	dbfb      	blt.n	11f4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    11fc:	4b0c      	ldr	r3, [pc, #48]	; (1230 <system_gclk_gen_set_config+0xa8>)
    11fe:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1200:	001a      	movs	r2, r3
    1202:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1204:	b25b      	sxtb	r3, r3
    1206:	2b00      	cmp	r3, #0
    1208:	dbfb      	blt.n	1202 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    120a:	4a09      	ldr	r2, [pc, #36]	; (1230 <system_gclk_gen_set_config+0xa8>)
    120c:	6853      	ldr	r3, [r2, #4]
    120e:	2180      	movs	r1, #128	; 0x80
    1210:	0249      	lsls	r1, r1, #9
    1212:	400b      	ands	r3, r1
    1214:	431d      	orrs	r5, r3
    1216:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1218:	4b08      	ldr	r3, [pc, #32]	; (123c <system_gclk_gen_set_config+0xb4>)
    121a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    121c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    121e:	2200      	movs	r2, #0
    1220:	e7d2      	b.n	11c8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1222:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1224:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1226:	2380      	movs	r3, #128	; 0x80
    1228:	029b      	lsls	r3, r3, #10
    122a:	431d      	orrs	r5, r3
    122c:	e7d2      	b.n	11d4 <system_gclk_gen_set_config+0x4c>
    122e:	46c0      	nop			; (mov r8, r8)
    1230:	40000c00 	.word	0x40000c00
    1234:	00000e8d 	.word	0x00000e8d
    1238:	40000c08 	.word	0x40000c08
    123c:	00000ecd 	.word	0x00000ecd

00001240 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1240:	b510      	push	{r4, lr}
    1242:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1244:	4a0b      	ldr	r2, [pc, #44]	; (1274 <system_gclk_gen_enable+0x34>)
    1246:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1248:	b25b      	sxtb	r3, r3
    124a:	2b00      	cmp	r3, #0
    124c:	dbfb      	blt.n	1246 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    124e:	4b0a      	ldr	r3, [pc, #40]	; (1278 <system_gclk_gen_enable+0x38>)
    1250:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1252:	4b0a      	ldr	r3, [pc, #40]	; (127c <system_gclk_gen_enable+0x3c>)
    1254:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1256:	4a07      	ldr	r2, [pc, #28]	; (1274 <system_gclk_gen_enable+0x34>)
    1258:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    125a:	b25b      	sxtb	r3, r3
    125c:	2b00      	cmp	r3, #0
    125e:	dbfb      	blt.n	1258 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1260:	4a04      	ldr	r2, [pc, #16]	; (1274 <system_gclk_gen_enable+0x34>)
    1262:	6851      	ldr	r1, [r2, #4]
    1264:	2380      	movs	r3, #128	; 0x80
    1266:	025b      	lsls	r3, r3, #9
    1268:	430b      	orrs	r3, r1
    126a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    126c:	4b04      	ldr	r3, [pc, #16]	; (1280 <system_gclk_gen_enable+0x40>)
    126e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1270:	bd10      	pop	{r4, pc}
    1272:	46c0      	nop			; (mov r8, r8)
    1274:	40000c00 	.word	0x40000c00
    1278:	00000e8d 	.word	0x00000e8d
    127c:	40000c04 	.word	0x40000c04
    1280:	00000ecd 	.word	0x00000ecd

00001284 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1284:	b570      	push	{r4, r5, r6, lr}
    1286:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1288:	4a1a      	ldr	r2, [pc, #104]	; (12f4 <system_gclk_gen_get_hz+0x70>)
    128a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    128c:	b25b      	sxtb	r3, r3
    128e:	2b00      	cmp	r3, #0
    1290:	dbfb      	blt.n	128a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1292:	4b19      	ldr	r3, [pc, #100]	; (12f8 <system_gclk_gen_get_hz+0x74>)
    1294:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1296:	4b19      	ldr	r3, [pc, #100]	; (12fc <system_gclk_gen_get_hz+0x78>)
    1298:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    129a:	4a16      	ldr	r2, [pc, #88]	; (12f4 <system_gclk_gen_get_hz+0x70>)
    129c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    129e:	b25b      	sxtb	r3, r3
    12a0:	2b00      	cmp	r3, #0
    12a2:	dbfb      	blt.n	129c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    12a4:	4e13      	ldr	r6, [pc, #76]	; (12f4 <system_gclk_gen_get_hz+0x70>)
    12a6:	6870      	ldr	r0, [r6, #4]
    12a8:	04c0      	lsls	r0, r0, #19
    12aa:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    12ac:	4b14      	ldr	r3, [pc, #80]	; (1300 <system_gclk_gen_get_hz+0x7c>)
    12ae:	4798      	blx	r3
    12b0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    12b2:	4b12      	ldr	r3, [pc, #72]	; (12fc <system_gclk_gen_get_hz+0x78>)
    12b4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    12b6:	6876      	ldr	r6, [r6, #4]
    12b8:	02f6      	lsls	r6, r6, #11
    12ba:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    12bc:	4b11      	ldr	r3, [pc, #68]	; (1304 <system_gclk_gen_get_hz+0x80>)
    12be:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12c0:	4a0c      	ldr	r2, [pc, #48]	; (12f4 <system_gclk_gen_get_hz+0x70>)
    12c2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    12c4:	b25b      	sxtb	r3, r3
    12c6:	2b00      	cmp	r3, #0
    12c8:	dbfb      	blt.n	12c2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    12ca:	4b0a      	ldr	r3, [pc, #40]	; (12f4 <system_gclk_gen_get_hz+0x70>)
    12cc:	689c      	ldr	r4, [r3, #8]
    12ce:	0224      	lsls	r4, r4, #8
    12d0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    12d2:	4b0d      	ldr	r3, [pc, #52]	; (1308 <system_gclk_gen_get_hz+0x84>)
    12d4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    12d6:	2e00      	cmp	r6, #0
    12d8:	d107      	bne.n	12ea <system_gclk_gen_get_hz+0x66>
    12da:	2c01      	cmp	r4, #1
    12dc:	d907      	bls.n	12ee <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    12de:	0021      	movs	r1, r4
    12e0:	0028      	movs	r0, r5
    12e2:	4b0a      	ldr	r3, [pc, #40]	; (130c <system_gclk_gen_get_hz+0x88>)
    12e4:	4798      	blx	r3
    12e6:	0005      	movs	r5, r0
    12e8:	e001      	b.n	12ee <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    12ea:	3401      	adds	r4, #1
    12ec:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    12ee:	0028      	movs	r0, r5
    12f0:	bd70      	pop	{r4, r5, r6, pc}
    12f2:	46c0      	nop			; (mov r8, r8)
    12f4:	40000c00 	.word	0x40000c00
    12f8:	00000e8d 	.word	0x00000e8d
    12fc:	40000c04 	.word	0x40000c04
    1300:	00000f59 	.word	0x00000f59
    1304:	40000c08 	.word	0x40000c08
    1308:	00000ecd 	.word	0x00000ecd
    130c:	00001685 	.word	0x00001685

00001310 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1310:	b510      	push	{r4, lr}
    1312:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1314:	4b06      	ldr	r3, [pc, #24]	; (1330 <system_gclk_chan_enable+0x20>)
    1316:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1318:	4b06      	ldr	r3, [pc, #24]	; (1334 <system_gclk_chan_enable+0x24>)
    131a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    131c:	4a06      	ldr	r2, [pc, #24]	; (1338 <system_gclk_chan_enable+0x28>)
    131e:	8853      	ldrh	r3, [r2, #2]
    1320:	2180      	movs	r1, #128	; 0x80
    1322:	01c9      	lsls	r1, r1, #7
    1324:	430b      	orrs	r3, r1
    1326:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1328:	4b04      	ldr	r3, [pc, #16]	; (133c <system_gclk_chan_enable+0x2c>)
    132a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    132c:	bd10      	pop	{r4, pc}
    132e:	46c0      	nop			; (mov r8, r8)
    1330:	00000e8d 	.word	0x00000e8d
    1334:	40000c02 	.word	0x40000c02
    1338:	40000c00 	.word	0x40000c00
    133c:	00000ecd 	.word	0x00000ecd

00001340 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1340:	b510      	push	{r4, lr}
    1342:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1344:	4b0f      	ldr	r3, [pc, #60]	; (1384 <system_gclk_chan_disable+0x44>)
    1346:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1348:	4b0f      	ldr	r3, [pc, #60]	; (1388 <system_gclk_chan_disable+0x48>)
    134a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    134c:	4a0f      	ldr	r2, [pc, #60]	; (138c <system_gclk_chan_disable+0x4c>)
    134e:	8853      	ldrh	r3, [r2, #2]
    1350:	051b      	lsls	r3, r3, #20
    1352:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1354:	8853      	ldrh	r3, [r2, #2]
    1356:	490e      	ldr	r1, [pc, #56]	; (1390 <system_gclk_chan_disable+0x50>)
    1358:	400b      	ands	r3, r1
    135a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    135c:	8853      	ldrh	r3, [r2, #2]
    135e:	490d      	ldr	r1, [pc, #52]	; (1394 <system_gclk_chan_disable+0x54>)
    1360:	400b      	ands	r3, r1
    1362:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1364:	0011      	movs	r1, r2
    1366:	2280      	movs	r2, #128	; 0x80
    1368:	01d2      	lsls	r2, r2, #7
    136a:	884b      	ldrh	r3, [r1, #2]
    136c:	4213      	tst	r3, r2
    136e:	d1fc      	bne.n	136a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1370:	4906      	ldr	r1, [pc, #24]	; (138c <system_gclk_chan_disable+0x4c>)
    1372:	884a      	ldrh	r2, [r1, #2]
    1374:	0203      	lsls	r3, r0, #8
    1376:	4806      	ldr	r0, [pc, #24]	; (1390 <system_gclk_chan_disable+0x50>)
    1378:	4002      	ands	r2, r0
    137a:	4313      	orrs	r3, r2
    137c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    137e:	4b06      	ldr	r3, [pc, #24]	; (1398 <system_gclk_chan_disable+0x58>)
    1380:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1382:	bd10      	pop	{r4, pc}
    1384:	00000e8d 	.word	0x00000e8d
    1388:	40000c02 	.word	0x40000c02
    138c:	40000c00 	.word	0x40000c00
    1390:	fffff0ff 	.word	0xfffff0ff
    1394:	ffffbfff 	.word	0xffffbfff
    1398:	00000ecd 	.word	0x00000ecd

0000139c <system_gclk_chan_set_config>:
{
    139c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    139e:	780c      	ldrb	r4, [r1, #0]
    13a0:	0224      	lsls	r4, r4, #8
    13a2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    13a4:	4b02      	ldr	r3, [pc, #8]	; (13b0 <system_gclk_chan_set_config+0x14>)
    13a6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    13a8:	b2a4      	uxth	r4, r4
    13aa:	4b02      	ldr	r3, [pc, #8]	; (13b4 <system_gclk_chan_set_config+0x18>)
    13ac:	805c      	strh	r4, [r3, #2]
}
    13ae:	bd10      	pop	{r4, pc}
    13b0:	00001341 	.word	0x00001341
    13b4:	40000c00 	.word	0x40000c00

000013b8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    13b8:	b510      	push	{r4, lr}
    13ba:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    13bc:	4b06      	ldr	r3, [pc, #24]	; (13d8 <system_gclk_chan_get_hz+0x20>)
    13be:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    13c0:	4b06      	ldr	r3, [pc, #24]	; (13dc <system_gclk_chan_get_hz+0x24>)
    13c2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    13c4:	4b06      	ldr	r3, [pc, #24]	; (13e0 <system_gclk_chan_get_hz+0x28>)
    13c6:	885c      	ldrh	r4, [r3, #2]
    13c8:	0524      	lsls	r4, r4, #20
    13ca:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    13cc:	4b05      	ldr	r3, [pc, #20]	; (13e4 <system_gclk_chan_get_hz+0x2c>)
    13ce:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    13d0:	0020      	movs	r0, r4
    13d2:	4b05      	ldr	r3, [pc, #20]	; (13e8 <system_gclk_chan_get_hz+0x30>)
    13d4:	4798      	blx	r3
}
    13d6:	bd10      	pop	{r4, pc}
    13d8:	00000e8d 	.word	0x00000e8d
    13dc:	40000c02 	.word	0x40000c02
    13e0:	40000c00 	.word	0x40000c00
    13e4:	00000ecd 	.word	0x00000ecd
    13e8:	00001285 	.word	0x00001285

000013ec <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    13ec:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    13ee:	78d3      	ldrb	r3, [r2, #3]
    13f0:	2b00      	cmp	r3, #0
    13f2:	d135      	bne.n	1460 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    13f4:	7813      	ldrb	r3, [r2, #0]
    13f6:	2b80      	cmp	r3, #128	; 0x80
    13f8:	d029      	beq.n	144e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    13fa:	061b      	lsls	r3, r3, #24
    13fc:	2480      	movs	r4, #128	; 0x80
    13fe:	0264      	lsls	r4, r4, #9
    1400:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1402:	7854      	ldrb	r4, [r2, #1]
    1404:	2502      	movs	r5, #2
    1406:	43ac      	bics	r4, r5
    1408:	d106      	bne.n	1418 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    140a:	7894      	ldrb	r4, [r2, #2]
    140c:	2c00      	cmp	r4, #0
    140e:	d120      	bne.n	1452 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1410:	2480      	movs	r4, #128	; 0x80
    1412:	02a4      	lsls	r4, r4, #10
    1414:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1416:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1418:	7854      	ldrb	r4, [r2, #1]
    141a:	3c01      	subs	r4, #1
    141c:	2c01      	cmp	r4, #1
    141e:	d91c      	bls.n	145a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1420:	040d      	lsls	r5, r1, #16
    1422:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1424:	24a0      	movs	r4, #160	; 0xa0
    1426:	05e4      	lsls	r4, r4, #23
    1428:	432c      	orrs	r4, r5
    142a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    142c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    142e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1430:	24d0      	movs	r4, #208	; 0xd0
    1432:	0624      	lsls	r4, r4, #24
    1434:	432c      	orrs	r4, r5
    1436:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1438:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    143a:	78d4      	ldrb	r4, [r2, #3]
    143c:	2c00      	cmp	r4, #0
    143e:	d122      	bne.n	1486 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1440:	035b      	lsls	r3, r3, #13
    1442:	d51c      	bpl.n	147e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1444:	7893      	ldrb	r3, [r2, #2]
    1446:	2b01      	cmp	r3, #1
    1448:	d01e      	beq.n	1488 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    144a:	6141      	str	r1, [r0, #20]
    144c:	e017      	b.n	147e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    144e:	2300      	movs	r3, #0
    1450:	e7d7      	b.n	1402 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1452:	24c0      	movs	r4, #192	; 0xc0
    1454:	02e4      	lsls	r4, r4, #11
    1456:	4323      	orrs	r3, r4
    1458:	e7dd      	b.n	1416 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    145a:	4c0d      	ldr	r4, [pc, #52]	; (1490 <_system_pinmux_config+0xa4>)
    145c:	4023      	ands	r3, r4
    145e:	e7df      	b.n	1420 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1460:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1462:	040c      	lsls	r4, r1, #16
    1464:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1466:	23a0      	movs	r3, #160	; 0xa0
    1468:	05db      	lsls	r3, r3, #23
    146a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    146c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    146e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1470:	23d0      	movs	r3, #208	; 0xd0
    1472:	061b      	lsls	r3, r3, #24
    1474:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1476:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1478:	78d3      	ldrb	r3, [r2, #3]
    147a:	2b00      	cmp	r3, #0
    147c:	d103      	bne.n	1486 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    147e:	7853      	ldrb	r3, [r2, #1]
    1480:	3b01      	subs	r3, #1
    1482:	2b01      	cmp	r3, #1
    1484:	d902      	bls.n	148c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1486:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1488:	6181      	str	r1, [r0, #24]
    148a:	e7f8      	b.n	147e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    148c:	6081      	str	r1, [r0, #8]
}
    148e:	e7fa      	b.n	1486 <_system_pinmux_config+0x9a>
    1490:	fffbffff 	.word	0xfffbffff

00001494 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1494:	b510      	push	{r4, lr}
    1496:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1498:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    149a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    149c:	2900      	cmp	r1, #0
    149e:	d104      	bne.n	14aa <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    14a0:	0943      	lsrs	r3, r0, #5
    14a2:	01db      	lsls	r3, r3, #7
    14a4:	4905      	ldr	r1, [pc, #20]	; (14bc <system_pinmux_pin_set_config+0x28>)
    14a6:	468c      	mov	ip, r1
    14a8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    14aa:	241f      	movs	r4, #31
    14ac:	4020      	ands	r0, r4
    14ae:	2101      	movs	r1, #1
    14b0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    14b2:	0018      	movs	r0, r3
    14b4:	4b02      	ldr	r3, [pc, #8]	; (14c0 <system_pinmux_pin_set_config+0x2c>)
    14b6:	4798      	blx	r3
}
    14b8:	bd10      	pop	{r4, pc}
    14ba:	46c0      	nop			; (mov r8, r8)
    14bc:	41004400 	.word	0x41004400
    14c0:	000013ed 	.word	0x000013ed

000014c4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    14c4:	4770      	bx	lr
	...

000014c8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    14c8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    14ca:	4b05      	ldr	r3, [pc, #20]	; (14e0 <system_init+0x18>)
    14cc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    14ce:	4b05      	ldr	r3, [pc, #20]	; (14e4 <system_init+0x1c>)
    14d0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    14d2:	4b05      	ldr	r3, [pc, #20]	; (14e8 <system_init+0x20>)
    14d4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    14d6:	4b05      	ldr	r3, [pc, #20]	; (14ec <system_init+0x24>)
    14d8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    14da:	4b05      	ldr	r3, [pc, #20]	; (14f0 <system_init+0x28>)
    14dc:	4798      	blx	r3
}
    14de:	bd10      	pop	{r4, pc}
    14e0:	000010cd 	.word	0x000010cd
    14e4:	00000efd 	.word	0x00000efd
    14e8:	000014c5 	.word	0x000014c5
    14ec:	000014c5 	.word	0x000014c5
    14f0:	000014c5 	.word	0x000014c5

000014f4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    14f4:	e7fe      	b.n	14f4 <Dummy_Handler>
	...

000014f8 <Reset_Handler>:
{
    14f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    14fa:	4a2a      	ldr	r2, [pc, #168]	; (15a4 <Reset_Handler+0xac>)
    14fc:	4b2a      	ldr	r3, [pc, #168]	; (15a8 <Reset_Handler+0xb0>)
    14fe:	429a      	cmp	r2, r3
    1500:	d011      	beq.n	1526 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1502:	001a      	movs	r2, r3
    1504:	4b29      	ldr	r3, [pc, #164]	; (15ac <Reset_Handler+0xb4>)
    1506:	429a      	cmp	r2, r3
    1508:	d20d      	bcs.n	1526 <Reset_Handler+0x2e>
    150a:	4a29      	ldr	r2, [pc, #164]	; (15b0 <Reset_Handler+0xb8>)
    150c:	3303      	adds	r3, #3
    150e:	1a9b      	subs	r3, r3, r2
    1510:	089b      	lsrs	r3, r3, #2
    1512:	3301      	adds	r3, #1
    1514:	009b      	lsls	r3, r3, #2
    1516:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1518:	4823      	ldr	r0, [pc, #140]	; (15a8 <Reset_Handler+0xb0>)
    151a:	4922      	ldr	r1, [pc, #136]	; (15a4 <Reset_Handler+0xac>)
    151c:	588c      	ldr	r4, [r1, r2]
    151e:	5084      	str	r4, [r0, r2]
    1520:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1522:	429a      	cmp	r2, r3
    1524:	d1fa      	bne.n	151c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1526:	4a23      	ldr	r2, [pc, #140]	; (15b4 <Reset_Handler+0xbc>)
    1528:	4b23      	ldr	r3, [pc, #140]	; (15b8 <Reset_Handler+0xc0>)
    152a:	429a      	cmp	r2, r3
    152c:	d20a      	bcs.n	1544 <Reset_Handler+0x4c>
    152e:	43d3      	mvns	r3, r2
    1530:	4921      	ldr	r1, [pc, #132]	; (15b8 <Reset_Handler+0xc0>)
    1532:	185b      	adds	r3, r3, r1
    1534:	2103      	movs	r1, #3
    1536:	438b      	bics	r3, r1
    1538:	3304      	adds	r3, #4
    153a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    153c:	2100      	movs	r1, #0
    153e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1540:	4293      	cmp	r3, r2
    1542:	d1fc      	bne.n	153e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1544:	4a1d      	ldr	r2, [pc, #116]	; (15bc <Reset_Handler+0xc4>)
    1546:	21ff      	movs	r1, #255	; 0xff
    1548:	4b1d      	ldr	r3, [pc, #116]	; (15c0 <Reset_Handler+0xc8>)
    154a:	438b      	bics	r3, r1
    154c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    154e:	39fd      	subs	r1, #253	; 0xfd
    1550:	2390      	movs	r3, #144	; 0x90
    1552:	005b      	lsls	r3, r3, #1
    1554:	4a1b      	ldr	r2, [pc, #108]	; (15c4 <Reset_Handler+0xcc>)
    1556:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1558:	4a1b      	ldr	r2, [pc, #108]	; (15c8 <Reset_Handler+0xd0>)
    155a:	78d3      	ldrb	r3, [r2, #3]
    155c:	2503      	movs	r5, #3
    155e:	43ab      	bics	r3, r5
    1560:	2402      	movs	r4, #2
    1562:	4323      	orrs	r3, r4
    1564:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1566:	78d3      	ldrb	r3, [r2, #3]
    1568:	270c      	movs	r7, #12
    156a:	43bb      	bics	r3, r7
    156c:	2608      	movs	r6, #8
    156e:	4333      	orrs	r3, r6
    1570:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1572:	4b16      	ldr	r3, [pc, #88]	; (15cc <Reset_Handler+0xd4>)
    1574:	7b98      	ldrb	r0, [r3, #14]
    1576:	2230      	movs	r2, #48	; 0x30
    1578:	4390      	bics	r0, r2
    157a:	2220      	movs	r2, #32
    157c:	4310      	orrs	r0, r2
    157e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1580:	7b99      	ldrb	r1, [r3, #14]
    1582:	43b9      	bics	r1, r7
    1584:	4331      	orrs	r1, r6
    1586:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1588:	7b9a      	ldrb	r2, [r3, #14]
    158a:	43aa      	bics	r2, r5
    158c:	4322      	orrs	r2, r4
    158e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1590:	4a0f      	ldr	r2, [pc, #60]	; (15d0 <Reset_Handler+0xd8>)
    1592:	6853      	ldr	r3, [r2, #4]
    1594:	2180      	movs	r1, #128	; 0x80
    1596:	430b      	orrs	r3, r1
    1598:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    159a:	4b0e      	ldr	r3, [pc, #56]	; (15d4 <Reset_Handler+0xdc>)
    159c:	4798      	blx	r3
        main();
    159e:	4b0e      	ldr	r3, [pc, #56]	; (15d8 <Reset_Handler+0xe0>)
    15a0:	4798      	blx	r3
    15a2:	e7fe      	b.n	15a2 <Reset_Handler+0xaa>
    15a4:	00002978 	.word	0x00002978
    15a8:	20000000 	.word	0x20000000
    15ac:	20000070 	.word	0x20000070
    15b0:	20000004 	.word	0x20000004
    15b4:	20000070 	.word	0x20000070
    15b8:	20000144 	.word	0x20000144
    15bc:	e000ed00 	.word	0xe000ed00
    15c0:	00000000 	.word	0x00000000
    15c4:	41007000 	.word	0x41007000
    15c8:	41005000 	.word	0x41005000
    15cc:	41004800 	.word	0x41004800
    15d0:	41004000 	.word	0x41004000
    15d4:	000017f1 	.word	0x000017f1
    15d8:	00001671 	.word	0x00001671

000015dc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    15dc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    15de:	4a06      	ldr	r2, [pc, #24]	; (15f8 <_sbrk+0x1c>)
    15e0:	6812      	ldr	r2, [r2, #0]
    15e2:	2a00      	cmp	r2, #0
    15e4:	d004      	beq.n	15f0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    15e6:	4a04      	ldr	r2, [pc, #16]	; (15f8 <_sbrk+0x1c>)
    15e8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    15ea:	18c3      	adds	r3, r0, r3
    15ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    15ee:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    15f0:	4902      	ldr	r1, [pc, #8]	; (15fc <_sbrk+0x20>)
    15f2:	4a01      	ldr	r2, [pc, #4]	; (15f8 <_sbrk+0x1c>)
    15f4:	6011      	str	r1, [r2, #0]
    15f6:	e7f6      	b.n	15e6 <_sbrk+0xa>
    15f8:	200000c8 	.word	0x200000c8
    15fc:	20002148 	.word	0x20002148

00001600 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1600:	2001      	movs	r0, #1
    1602:	4240      	negs	r0, r0
    1604:	4770      	bx	lr

00001606 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1606:	2380      	movs	r3, #128	; 0x80
    1608:	019b      	lsls	r3, r3, #6
    160a:	604b      	str	r3, [r1, #4]

	return 0;
}
    160c:	2000      	movs	r0, #0
    160e:	4770      	bx	lr

00001610 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1610:	2001      	movs	r0, #1
    1612:	4770      	bx	lr

00001614 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1614:	2000      	movs	r0, #0
    1616:	4770      	bx	lr

00001618 <setup>:
#include <asf.h>
#include "TheArtist.h"

void setup() {
    1618:	b510      	push	{r4, lr}
	system_init();
    161a:	4b0a      	ldr	r3, [pc, #40]	; (1644 <setup+0x2c>)
    161c:	4798      	blx	r3
	delay_init(); 
    161e:	4b0a      	ldr	r3, [pc, #40]	; (1648 <setup+0x30>)
    1620:	4798      	blx	r3
	artist_usart_configure(&(artist.usart_instance));
    1622:	4c0a      	ldr	r4, [pc, #40]	; (164c <setup+0x34>)
    1624:	0020      	movs	r0, r4
    1626:	4b0a      	ldr	r3, [pc, #40]	; (1650 <setup+0x38>)
    1628:	4798      	blx	r3
	cpu_irq_enable();
    162a:	2201      	movs	r2, #1
    162c:	4b09      	ldr	r3, [pc, #36]	; (1654 <setup+0x3c>)
    162e:	701a      	strb	r2, [r3, #0]
    1630:	f3bf 8f5f 	dmb	sy
    1634:	b662      	cpsie	i
	
	system_interrupt_enable_global(); 
	
	
	// [listen on rx buffer]
	usart_read_buffer_job(&artist.usart_instance,
    1636:	3204      	adds	r2, #4
    1638:	4907      	ldr	r1, [pc, #28]	; (1658 <setup+0x40>)
    163a:	0020      	movs	r0, r4
    163c:	4b07      	ldr	r3, [pc, #28]	; (165c <setup+0x44>)
    163e:	4798      	blx	r3
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
	// ! [listen on rx buffer]
	
}
    1640:	bd10      	pop	{r4, pc}
    1642:	46c0      	nop			; (mov r8, r8)
    1644:	000014c9 	.word	0x000014c9
    1648:	00000e21 	.word	0x00000e21
    164c:	200000e0 	.word	0x200000e0
    1650:	000005cd 	.word	0x000005cd
    1654:	20000008 	.word	0x20000008
    1658:	20000114 	.word	0x20000114
    165c:	00000b9d 	.word	0x00000b9d

00001660 <loop>:

void loop() {
    1660:	b510      	push	{r4, lr}
	delay_ms(100); 
    1662:	2064      	movs	r0, #100	; 0x64
    1664:	4b01      	ldr	r3, [pc, #4]	; (166c <loop+0xc>)
    1666:	4798      	blx	r3
}
    1668:	bd10      	pop	{r4, pc}
    166a:	46c0      	nop			; (mov r8, r8)
    166c:	00000e61 	.word	0x00000e61

00001670 <main>:

int main (void)
{
    1670:	b510      	push	{r4, lr}
	
	setup (); 
    1672:	4b02      	ldr	r3, [pc, #8]	; (167c <main+0xc>)
    1674:	4798      	blx	r3

	while(true)	loop();	
    1676:	4c02      	ldr	r4, [pc, #8]	; (1680 <main+0x10>)
    1678:	47a0      	blx	r4
    167a:	e7fd      	b.n	1678 <main+0x8>
    167c:	00001619 	.word	0x00001619
    1680:	00001661 	.word	0x00001661

00001684 <__udivsi3>:
    1684:	2200      	movs	r2, #0
    1686:	0843      	lsrs	r3, r0, #1
    1688:	428b      	cmp	r3, r1
    168a:	d374      	bcc.n	1776 <__udivsi3+0xf2>
    168c:	0903      	lsrs	r3, r0, #4
    168e:	428b      	cmp	r3, r1
    1690:	d35f      	bcc.n	1752 <__udivsi3+0xce>
    1692:	0a03      	lsrs	r3, r0, #8
    1694:	428b      	cmp	r3, r1
    1696:	d344      	bcc.n	1722 <__udivsi3+0x9e>
    1698:	0b03      	lsrs	r3, r0, #12
    169a:	428b      	cmp	r3, r1
    169c:	d328      	bcc.n	16f0 <__udivsi3+0x6c>
    169e:	0c03      	lsrs	r3, r0, #16
    16a0:	428b      	cmp	r3, r1
    16a2:	d30d      	bcc.n	16c0 <__udivsi3+0x3c>
    16a4:	22ff      	movs	r2, #255	; 0xff
    16a6:	0209      	lsls	r1, r1, #8
    16a8:	ba12      	rev	r2, r2
    16aa:	0c03      	lsrs	r3, r0, #16
    16ac:	428b      	cmp	r3, r1
    16ae:	d302      	bcc.n	16b6 <__udivsi3+0x32>
    16b0:	1212      	asrs	r2, r2, #8
    16b2:	0209      	lsls	r1, r1, #8
    16b4:	d065      	beq.n	1782 <__udivsi3+0xfe>
    16b6:	0b03      	lsrs	r3, r0, #12
    16b8:	428b      	cmp	r3, r1
    16ba:	d319      	bcc.n	16f0 <__udivsi3+0x6c>
    16bc:	e000      	b.n	16c0 <__udivsi3+0x3c>
    16be:	0a09      	lsrs	r1, r1, #8
    16c0:	0bc3      	lsrs	r3, r0, #15
    16c2:	428b      	cmp	r3, r1
    16c4:	d301      	bcc.n	16ca <__udivsi3+0x46>
    16c6:	03cb      	lsls	r3, r1, #15
    16c8:	1ac0      	subs	r0, r0, r3
    16ca:	4152      	adcs	r2, r2
    16cc:	0b83      	lsrs	r3, r0, #14
    16ce:	428b      	cmp	r3, r1
    16d0:	d301      	bcc.n	16d6 <__udivsi3+0x52>
    16d2:	038b      	lsls	r3, r1, #14
    16d4:	1ac0      	subs	r0, r0, r3
    16d6:	4152      	adcs	r2, r2
    16d8:	0b43      	lsrs	r3, r0, #13
    16da:	428b      	cmp	r3, r1
    16dc:	d301      	bcc.n	16e2 <__udivsi3+0x5e>
    16de:	034b      	lsls	r3, r1, #13
    16e0:	1ac0      	subs	r0, r0, r3
    16e2:	4152      	adcs	r2, r2
    16e4:	0b03      	lsrs	r3, r0, #12
    16e6:	428b      	cmp	r3, r1
    16e8:	d301      	bcc.n	16ee <__udivsi3+0x6a>
    16ea:	030b      	lsls	r3, r1, #12
    16ec:	1ac0      	subs	r0, r0, r3
    16ee:	4152      	adcs	r2, r2
    16f0:	0ac3      	lsrs	r3, r0, #11
    16f2:	428b      	cmp	r3, r1
    16f4:	d301      	bcc.n	16fa <__udivsi3+0x76>
    16f6:	02cb      	lsls	r3, r1, #11
    16f8:	1ac0      	subs	r0, r0, r3
    16fa:	4152      	adcs	r2, r2
    16fc:	0a83      	lsrs	r3, r0, #10
    16fe:	428b      	cmp	r3, r1
    1700:	d301      	bcc.n	1706 <__udivsi3+0x82>
    1702:	028b      	lsls	r3, r1, #10
    1704:	1ac0      	subs	r0, r0, r3
    1706:	4152      	adcs	r2, r2
    1708:	0a43      	lsrs	r3, r0, #9
    170a:	428b      	cmp	r3, r1
    170c:	d301      	bcc.n	1712 <__udivsi3+0x8e>
    170e:	024b      	lsls	r3, r1, #9
    1710:	1ac0      	subs	r0, r0, r3
    1712:	4152      	adcs	r2, r2
    1714:	0a03      	lsrs	r3, r0, #8
    1716:	428b      	cmp	r3, r1
    1718:	d301      	bcc.n	171e <__udivsi3+0x9a>
    171a:	020b      	lsls	r3, r1, #8
    171c:	1ac0      	subs	r0, r0, r3
    171e:	4152      	adcs	r2, r2
    1720:	d2cd      	bcs.n	16be <__udivsi3+0x3a>
    1722:	09c3      	lsrs	r3, r0, #7
    1724:	428b      	cmp	r3, r1
    1726:	d301      	bcc.n	172c <__udivsi3+0xa8>
    1728:	01cb      	lsls	r3, r1, #7
    172a:	1ac0      	subs	r0, r0, r3
    172c:	4152      	adcs	r2, r2
    172e:	0983      	lsrs	r3, r0, #6
    1730:	428b      	cmp	r3, r1
    1732:	d301      	bcc.n	1738 <__udivsi3+0xb4>
    1734:	018b      	lsls	r3, r1, #6
    1736:	1ac0      	subs	r0, r0, r3
    1738:	4152      	adcs	r2, r2
    173a:	0943      	lsrs	r3, r0, #5
    173c:	428b      	cmp	r3, r1
    173e:	d301      	bcc.n	1744 <__udivsi3+0xc0>
    1740:	014b      	lsls	r3, r1, #5
    1742:	1ac0      	subs	r0, r0, r3
    1744:	4152      	adcs	r2, r2
    1746:	0903      	lsrs	r3, r0, #4
    1748:	428b      	cmp	r3, r1
    174a:	d301      	bcc.n	1750 <__udivsi3+0xcc>
    174c:	010b      	lsls	r3, r1, #4
    174e:	1ac0      	subs	r0, r0, r3
    1750:	4152      	adcs	r2, r2
    1752:	08c3      	lsrs	r3, r0, #3
    1754:	428b      	cmp	r3, r1
    1756:	d301      	bcc.n	175c <__udivsi3+0xd8>
    1758:	00cb      	lsls	r3, r1, #3
    175a:	1ac0      	subs	r0, r0, r3
    175c:	4152      	adcs	r2, r2
    175e:	0883      	lsrs	r3, r0, #2
    1760:	428b      	cmp	r3, r1
    1762:	d301      	bcc.n	1768 <__udivsi3+0xe4>
    1764:	008b      	lsls	r3, r1, #2
    1766:	1ac0      	subs	r0, r0, r3
    1768:	4152      	adcs	r2, r2
    176a:	0843      	lsrs	r3, r0, #1
    176c:	428b      	cmp	r3, r1
    176e:	d301      	bcc.n	1774 <__udivsi3+0xf0>
    1770:	004b      	lsls	r3, r1, #1
    1772:	1ac0      	subs	r0, r0, r3
    1774:	4152      	adcs	r2, r2
    1776:	1a41      	subs	r1, r0, r1
    1778:	d200      	bcs.n	177c <__udivsi3+0xf8>
    177a:	4601      	mov	r1, r0
    177c:	4152      	adcs	r2, r2
    177e:	4610      	mov	r0, r2
    1780:	4770      	bx	lr
    1782:	e7ff      	b.n	1784 <__udivsi3+0x100>
    1784:	b501      	push	{r0, lr}
    1786:	2000      	movs	r0, #0
    1788:	f000 f806 	bl	1798 <__aeabi_idiv0>
    178c:	bd02      	pop	{r1, pc}
    178e:	46c0      	nop			; (mov r8, r8)

00001790 <__aeabi_uidivmod>:
    1790:	2900      	cmp	r1, #0
    1792:	d0f7      	beq.n	1784 <__udivsi3+0x100>
    1794:	e776      	b.n	1684 <__udivsi3>
    1796:	4770      	bx	lr

00001798 <__aeabi_idiv0>:
    1798:	4770      	bx	lr
    179a:	46c0      	nop			; (mov r8, r8)

0000179c <__aeabi_lmul>:
    179c:	b5f0      	push	{r4, r5, r6, r7, lr}
    179e:	46ce      	mov	lr, r9
    17a0:	4647      	mov	r7, r8
    17a2:	0415      	lsls	r5, r2, #16
    17a4:	0c2d      	lsrs	r5, r5, #16
    17a6:	002e      	movs	r6, r5
    17a8:	b580      	push	{r7, lr}
    17aa:	0407      	lsls	r7, r0, #16
    17ac:	0c14      	lsrs	r4, r2, #16
    17ae:	0c3f      	lsrs	r7, r7, #16
    17b0:	4699      	mov	r9, r3
    17b2:	0c03      	lsrs	r3, r0, #16
    17b4:	437e      	muls	r6, r7
    17b6:	435d      	muls	r5, r3
    17b8:	4367      	muls	r7, r4
    17ba:	4363      	muls	r3, r4
    17bc:	197f      	adds	r7, r7, r5
    17be:	0c34      	lsrs	r4, r6, #16
    17c0:	19e4      	adds	r4, r4, r7
    17c2:	469c      	mov	ip, r3
    17c4:	42a5      	cmp	r5, r4
    17c6:	d903      	bls.n	17d0 <__aeabi_lmul+0x34>
    17c8:	2380      	movs	r3, #128	; 0x80
    17ca:	025b      	lsls	r3, r3, #9
    17cc:	4698      	mov	r8, r3
    17ce:	44c4      	add	ip, r8
    17d0:	464b      	mov	r3, r9
    17d2:	4351      	muls	r1, r2
    17d4:	4343      	muls	r3, r0
    17d6:	0436      	lsls	r6, r6, #16
    17d8:	0c36      	lsrs	r6, r6, #16
    17da:	0c25      	lsrs	r5, r4, #16
    17dc:	0424      	lsls	r4, r4, #16
    17de:	4465      	add	r5, ip
    17e0:	19a4      	adds	r4, r4, r6
    17e2:	1859      	adds	r1, r3, r1
    17e4:	1949      	adds	r1, r1, r5
    17e6:	0020      	movs	r0, r4
    17e8:	bc0c      	pop	{r2, r3}
    17ea:	4690      	mov	r8, r2
    17ec:	4699      	mov	r9, r3
    17ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000017f0 <__libc_init_array>:
    17f0:	b570      	push	{r4, r5, r6, lr}
    17f2:	2600      	movs	r6, #0
    17f4:	4d0c      	ldr	r5, [pc, #48]	; (1828 <__libc_init_array+0x38>)
    17f6:	4c0d      	ldr	r4, [pc, #52]	; (182c <__libc_init_array+0x3c>)
    17f8:	1b64      	subs	r4, r4, r5
    17fa:	10a4      	asrs	r4, r4, #2
    17fc:	42a6      	cmp	r6, r4
    17fe:	d109      	bne.n	1814 <__libc_init_array+0x24>
    1800:	2600      	movs	r6, #0
    1802:	f001 f8a9 	bl	2958 <_init>
    1806:	4d0a      	ldr	r5, [pc, #40]	; (1830 <__libc_init_array+0x40>)
    1808:	4c0a      	ldr	r4, [pc, #40]	; (1834 <__libc_init_array+0x44>)
    180a:	1b64      	subs	r4, r4, r5
    180c:	10a4      	asrs	r4, r4, #2
    180e:	42a6      	cmp	r6, r4
    1810:	d105      	bne.n	181e <__libc_init_array+0x2e>
    1812:	bd70      	pop	{r4, r5, r6, pc}
    1814:	00b3      	lsls	r3, r6, #2
    1816:	58eb      	ldr	r3, [r5, r3]
    1818:	4798      	blx	r3
    181a:	3601      	adds	r6, #1
    181c:	e7ee      	b.n	17fc <__libc_init_array+0xc>
    181e:	00b3      	lsls	r3, r6, #2
    1820:	58eb      	ldr	r3, [r5, r3]
    1822:	4798      	blx	r3
    1824:	3601      	adds	r6, #1
    1826:	e7f2      	b.n	180e <__libc_init_array+0x1e>
    1828:	00002964 	.word	0x00002964
    182c:	00002964 	.word	0x00002964
    1830:	00002964 	.word	0x00002964
    1834:	00002968 	.word	0x00002968

00001838 <memset>:
    1838:	0003      	movs	r3, r0
    183a:	1882      	adds	r2, r0, r2
    183c:	4293      	cmp	r3, r2
    183e:	d100      	bne.n	1842 <memset+0xa>
    1840:	4770      	bx	lr
    1842:	7019      	strb	r1, [r3, #0]
    1844:	3301      	adds	r3, #1
    1846:	e7f9      	b.n	183c <memset+0x4>

00001848 <iprintf>:
    1848:	b40f      	push	{r0, r1, r2, r3}
    184a:	4b0b      	ldr	r3, [pc, #44]	; (1878 <iprintf+0x30>)
    184c:	b513      	push	{r0, r1, r4, lr}
    184e:	681c      	ldr	r4, [r3, #0]
    1850:	2c00      	cmp	r4, #0
    1852:	d005      	beq.n	1860 <iprintf+0x18>
    1854:	69a3      	ldr	r3, [r4, #24]
    1856:	2b00      	cmp	r3, #0
    1858:	d102      	bne.n	1860 <iprintf+0x18>
    185a:	0020      	movs	r0, r4
    185c:	f000 f9bc 	bl	1bd8 <__sinit>
    1860:	ab05      	add	r3, sp, #20
    1862:	9a04      	ldr	r2, [sp, #16]
    1864:	68a1      	ldr	r1, [r4, #8]
    1866:	0020      	movs	r0, r4
    1868:	9301      	str	r3, [sp, #4]
    186a:	f000 fb8b 	bl	1f84 <_vfiprintf_r>
    186e:	bc16      	pop	{r1, r2, r4}
    1870:	bc08      	pop	{r3}
    1872:	b004      	add	sp, #16
    1874:	4718      	bx	r3
    1876:	46c0      	nop			; (mov r8, r8)
    1878:	2000000c 	.word	0x2000000c

0000187c <setbuf>:
    187c:	424a      	negs	r2, r1
    187e:	414a      	adcs	r2, r1
    1880:	2380      	movs	r3, #128	; 0x80
    1882:	b510      	push	{r4, lr}
    1884:	0052      	lsls	r2, r2, #1
    1886:	00db      	lsls	r3, r3, #3
    1888:	f000 f802 	bl	1890 <setvbuf>
    188c:	bd10      	pop	{r4, pc}
	...

00001890 <setvbuf>:
    1890:	b5f0      	push	{r4, r5, r6, r7, lr}
    1892:	001d      	movs	r5, r3
    1894:	4b4f      	ldr	r3, [pc, #316]	; (19d4 <setvbuf+0x144>)
    1896:	b085      	sub	sp, #20
    1898:	681e      	ldr	r6, [r3, #0]
    189a:	0004      	movs	r4, r0
    189c:	000f      	movs	r7, r1
    189e:	9200      	str	r2, [sp, #0]
    18a0:	2e00      	cmp	r6, #0
    18a2:	d005      	beq.n	18b0 <setvbuf+0x20>
    18a4:	69b3      	ldr	r3, [r6, #24]
    18a6:	2b00      	cmp	r3, #0
    18a8:	d102      	bne.n	18b0 <setvbuf+0x20>
    18aa:	0030      	movs	r0, r6
    18ac:	f000 f994 	bl	1bd8 <__sinit>
    18b0:	4b49      	ldr	r3, [pc, #292]	; (19d8 <setvbuf+0x148>)
    18b2:	429c      	cmp	r4, r3
    18b4:	d150      	bne.n	1958 <setvbuf+0xc8>
    18b6:	6874      	ldr	r4, [r6, #4]
    18b8:	9b00      	ldr	r3, [sp, #0]
    18ba:	2b02      	cmp	r3, #2
    18bc:	d005      	beq.n	18ca <setvbuf+0x3a>
    18be:	2b01      	cmp	r3, #1
    18c0:	d900      	bls.n	18c4 <setvbuf+0x34>
    18c2:	e084      	b.n	19ce <setvbuf+0x13e>
    18c4:	2d00      	cmp	r5, #0
    18c6:	da00      	bge.n	18ca <setvbuf+0x3a>
    18c8:	e081      	b.n	19ce <setvbuf+0x13e>
    18ca:	0021      	movs	r1, r4
    18cc:	0030      	movs	r0, r6
    18ce:	f000 f915 	bl	1afc <_fflush_r>
    18d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    18d4:	2900      	cmp	r1, #0
    18d6:	d008      	beq.n	18ea <setvbuf+0x5a>
    18d8:	0023      	movs	r3, r4
    18da:	3344      	adds	r3, #68	; 0x44
    18dc:	4299      	cmp	r1, r3
    18de:	d002      	beq.n	18e6 <setvbuf+0x56>
    18e0:	0030      	movs	r0, r6
    18e2:	f000 fa7f 	bl	1de4 <_free_r>
    18e6:	2300      	movs	r3, #0
    18e8:	6363      	str	r3, [r4, #52]	; 0x34
    18ea:	2300      	movs	r3, #0
    18ec:	61a3      	str	r3, [r4, #24]
    18ee:	6063      	str	r3, [r4, #4]
    18f0:	89a3      	ldrh	r3, [r4, #12]
    18f2:	061b      	lsls	r3, r3, #24
    18f4:	d503      	bpl.n	18fe <setvbuf+0x6e>
    18f6:	6921      	ldr	r1, [r4, #16]
    18f8:	0030      	movs	r0, r6
    18fa:	f000 fa73 	bl	1de4 <_free_r>
    18fe:	89a3      	ldrh	r3, [r4, #12]
    1900:	4a36      	ldr	r2, [pc, #216]	; (19dc <setvbuf+0x14c>)
    1902:	4013      	ands	r3, r2
    1904:	81a3      	strh	r3, [r4, #12]
    1906:	9b00      	ldr	r3, [sp, #0]
    1908:	2b02      	cmp	r3, #2
    190a:	d05a      	beq.n	19c2 <setvbuf+0x132>
    190c:	ab03      	add	r3, sp, #12
    190e:	aa02      	add	r2, sp, #8
    1910:	0021      	movs	r1, r4
    1912:	0030      	movs	r0, r6
    1914:	f000 f9f6 	bl	1d04 <__swhatbuf_r>
    1918:	89a3      	ldrh	r3, [r4, #12]
    191a:	4318      	orrs	r0, r3
    191c:	81a0      	strh	r0, [r4, #12]
    191e:	2d00      	cmp	r5, #0
    1920:	d124      	bne.n	196c <setvbuf+0xdc>
    1922:	9d02      	ldr	r5, [sp, #8]
    1924:	0028      	movs	r0, r5
    1926:	f000 fa53 	bl	1dd0 <malloc>
    192a:	9501      	str	r5, [sp, #4]
    192c:	1e07      	subs	r7, r0, #0
    192e:	d142      	bne.n	19b6 <setvbuf+0x126>
    1930:	9b02      	ldr	r3, [sp, #8]
    1932:	9301      	str	r3, [sp, #4]
    1934:	42ab      	cmp	r3, r5
    1936:	d139      	bne.n	19ac <setvbuf+0x11c>
    1938:	2001      	movs	r0, #1
    193a:	4240      	negs	r0, r0
    193c:	2302      	movs	r3, #2
    193e:	89a2      	ldrh	r2, [r4, #12]
    1940:	4313      	orrs	r3, r2
    1942:	81a3      	strh	r3, [r4, #12]
    1944:	2300      	movs	r3, #0
    1946:	60a3      	str	r3, [r4, #8]
    1948:	0023      	movs	r3, r4
    194a:	3347      	adds	r3, #71	; 0x47
    194c:	6023      	str	r3, [r4, #0]
    194e:	6123      	str	r3, [r4, #16]
    1950:	2301      	movs	r3, #1
    1952:	6163      	str	r3, [r4, #20]
    1954:	b005      	add	sp, #20
    1956:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1958:	4b21      	ldr	r3, [pc, #132]	; (19e0 <setvbuf+0x150>)
    195a:	429c      	cmp	r4, r3
    195c:	d101      	bne.n	1962 <setvbuf+0xd2>
    195e:	68b4      	ldr	r4, [r6, #8]
    1960:	e7aa      	b.n	18b8 <setvbuf+0x28>
    1962:	4b20      	ldr	r3, [pc, #128]	; (19e4 <setvbuf+0x154>)
    1964:	429c      	cmp	r4, r3
    1966:	d1a7      	bne.n	18b8 <setvbuf+0x28>
    1968:	68f4      	ldr	r4, [r6, #12]
    196a:	e7a5      	b.n	18b8 <setvbuf+0x28>
    196c:	2f00      	cmp	r7, #0
    196e:	d0d9      	beq.n	1924 <setvbuf+0x94>
    1970:	69b3      	ldr	r3, [r6, #24]
    1972:	2b00      	cmp	r3, #0
    1974:	d102      	bne.n	197c <setvbuf+0xec>
    1976:	0030      	movs	r0, r6
    1978:	f000 f92e 	bl	1bd8 <__sinit>
    197c:	9b00      	ldr	r3, [sp, #0]
    197e:	2b01      	cmp	r3, #1
    1980:	d103      	bne.n	198a <setvbuf+0xfa>
    1982:	89a3      	ldrh	r3, [r4, #12]
    1984:	9a00      	ldr	r2, [sp, #0]
    1986:	431a      	orrs	r2, r3
    1988:	81a2      	strh	r2, [r4, #12]
    198a:	2008      	movs	r0, #8
    198c:	89a3      	ldrh	r3, [r4, #12]
    198e:	6027      	str	r7, [r4, #0]
    1990:	6127      	str	r7, [r4, #16]
    1992:	6165      	str	r5, [r4, #20]
    1994:	4018      	ands	r0, r3
    1996:	d018      	beq.n	19ca <setvbuf+0x13a>
    1998:	2001      	movs	r0, #1
    199a:	4018      	ands	r0, r3
    199c:	2300      	movs	r3, #0
    199e:	4298      	cmp	r0, r3
    19a0:	d011      	beq.n	19c6 <setvbuf+0x136>
    19a2:	426d      	negs	r5, r5
    19a4:	60a3      	str	r3, [r4, #8]
    19a6:	61a5      	str	r5, [r4, #24]
    19a8:	0018      	movs	r0, r3
    19aa:	e7d3      	b.n	1954 <setvbuf+0xc4>
    19ac:	9801      	ldr	r0, [sp, #4]
    19ae:	f000 fa0f 	bl	1dd0 <malloc>
    19b2:	1e07      	subs	r7, r0, #0
    19b4:	d0c0      	beq.n	1938 <setvbuf+0xa8>
    19b6:	2380      	movs	r3, #128	; 0x80
    19b8:	89a2      	ldrh	r2, [r4, #12]
    19ba:	9d01      	ldr	r5, [sp, #4]
    19bc:	4313      	orrs	r3, r2
    19be:	81a3      	strh	r3, [r4, #12]
    19c0:	e7d6      	b.n	1970 <setvbuf+0xe0>
    19c2:	2000      	movs	r0, #0
    19c4:	e7ba      	b.n	193c <setvbuf+0xac>
    19c6:	60a5      	str	r5, [r4, #8]
    19c8:	e7c4      	b.n	1954 <setvbuf+0xc4>
    19ca:	60a0      	str	r0, [r4, #8]
    19cc:	e7c2      	b.n	1954 <setvbuf+0xc4>
    19ce:	2001      	movs	r0, #1
    19d0:	4240      	negs	r0, r0
    19d2:	e7bf      	b.n	1954 <setvbuf+0xc4>
    19d4:	2000000c 	.word	0x2000000c
    19d8:	000028e4 	.word	0x000028e4
    19dc:	fffff35c 	.word	0xfffff35c
    19e0:	00002904 	.word	0x00002904
    19e4:	000028c4 	.word	0x000028c4

000019e8 <__sflush_r>:
    19e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    19ea:	898a      	ldrh	r2, [r1, #12]
    19ec:	0005      	movs	r5, r0
    19ee:	000c      	movs	r4, r1
    19f0:	0713      	lsls	r3, r2, #28
    19f2:	d460      	bmi.n	1ab6 <__sflush_r+0xce>
    19f4:	684b      	ldr	r3, [r1, #4]
    19f6:	2b00      	cmp	r3, #0
    19f8:	dc04      	bgt.n	1a04 <__sflush_r+0x1c>
    19fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    19fc:	2b00      	cmp	r3, #0
    19fe:	dc01      	bgt.n	1a04 <__sflush_r+0x1c>
    1a00:	2000      	movs	r0, #0
    1a02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1a04:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1a06:	2f00      	cmp	r7, #0
    1a08:	d0fa      	beq.n	1a00 <__sflush_r+0x18>
    1a0a:	2300      	movs	r3, #0
    1a0c:	682e      	ldr	r6, [r5, #0]
    1a0e:	602b      	str	r3, [r5, #0]
    1a10:	2380      	movs	r3, #128	; 0x80
    1a12:	015b      	lsls	r3, r3, #5
    1a14:	401a      	ands	r2, r3
    1a16:	d034      	beq.n	1a82 <__sflush_r+0x9a>
    1a18:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1a1a:	89a3      	ldrh	r3, [r4, #12]
    1a1c:	075b      	lsls	r3, r3, #29
    1a1e:	d506      	bpl.n	1a2e <__sflush_r+0x46>
    1a20:	6863      	ldr	r3, [r4, #4]
    1a22:	1ac0      	subs	r0, r0, r3
    1a24:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1a26:	2b00      	cmp	r3, #0
    1a28:	d001      	beq.n	1a2e <__sflush_r+0x46>
    1a2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1a2c:	1ac0      	subs	r0, r0, r3
    1a2e:	0002      	movs	r2, r0
    1a30:	6a21      	ldr	r1, [r4, #32]
    1a32:	2300      	movs	r3, #0
    1a34:	0028      	movs	r0, r5
    1a36:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1a38:	47b8      	blx	r7
    1a3a:	89a1      	ldrh	r1, [r4, #12]
    1a3c:	1c43      	adds	r3, r0, #1
    1a3e:	d106      	bne.n	1a4e <__sflush_r+0x66>
    1a40:	682b      	ldr	r3, [r5, #0]
    1a42:	2b1d      	cmp	r3, #29
    1a44:	d831      	bhi.n	1aaa <__sflush_r+0xc2>
    1a46:	4a2c      	ldr	r2, [pc, #176]	; (1af8 <__sflush_r+0x110>)
    1a48:	40da      	lsrs	r2, r3
    1a4a:	07d3      	lsls	r3, r2, #31
    1a4c:	d52d      	bpl.n	1aaa <__sflush_r+0xc2>
    1a4e:	2300      	movs	r3, #0
    1a50:	6063      	str	r3, [r4, #4]
    1a52:	6923      	ldr	r3, [r4, #16]
    1a54:	6023      	str	r3, [r4, #0]
    1a56:	04cb      	lsls	r3, r1, #19
    1a58:	d505      	bpl.n	1a66 <__sflush_r+0x7e>
    1a5a:	1c43      	adds	r3, r0, #1
    1a5c:	d102      	bne.n	1a64 <__sflush_r+0x7c>
    1a5e:	682b      	ldr	r3, [r5, #0]
    1a60:	2b00      	cmp	r3, #0
    1a62:	d100      	bne.n	1a66 <__sflush_r+0x7e>
    1a64:	6560      	str	r0, [r4, #84]	; 0x54
    1a66:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1a68:	602e      	str	r6, [r5, #0]
    1a6a:	2900      	cmp	r1, #0
    1a6c:	d0c8      	beq.n	1a00 <__sflush_r+0x18>
    1a6e:	0023      	movs	r3, r4
    1a70:	3344      	adds	r3, #68	; 0x44
    1a72:	4299      	cmp	r1, r3
    1a74:	d002      	beq.n	1a7c <__sflush_r+0x94>
    1a76:	0028      	movs	r0, r5
    1a78:	f000 f9b4 	bl	1de4 <_free_r>
    1a7c:	2000      	movs	r0, #0
    1a7e:	6360      	str	r0, [r4, #52]	; 0x34
    1a80:	e7bf      	b.n	1a02 <__sflush_r+0x1a>
    1a82:	2301      	movs	r3, #1
    1a84:	6a21      	ldr	r1, [r4, #32]
    1a86:	0028      	movs	r0, r5
    1a88:	47b8      	blx	r7
    1a8a:	1c43      	adds	r3, r0, #1
    1a8c:	d1c5      	bne.n	1a1a <__sflush_r+0x32>
    1a8e:	682b      	ldr	r3, [r5, #0]
    1a90:	2b00      	cmp	r3, #0
    1a92:	d0c2      	beq.n	1a1a <__sflush_r+0x32>
    1a94:	2b1d      	cmp	r3, #29
    1a96:	d001      	beq.n	1a9c <__sflush_r+0xb4>
    1a98:	2b16      	cmp	r3, #22
    1a9a:	d101      	bne.n	1aa0 <__sflush_r+0xb8>
    1a9c:	602e      	str	r6, [r5, #0]
    1a9e:	e7af      	b.n	1a00 <__sflush_r+0x18>
    1aa0:	2340      	movs	r3, #64	; 0x40
    1aa2:	89a2      	ldrh	r2, [r4, #12]
    1aa4:	4313      	orrs	r3, r2
    1aa6:	81a3      	strh	r3, [r4, #12]
    1aa8:	e7ab      	b.n	1a02 <__sflush_r+0x1a>
    1aaa:	2340      	movs	r3, #64	; 0x40
    1aac:	430b      	orrs	r3, r1
    1aae:	2001      	movs	r0, #1
    1ab0:	81a3      	strh	r3, [r4, #12]
    1ab2:	4240      	negs	r0, r0
    1ab4:	e7a5      	b.n	1a02 <__sflush_r+0x1a>
    1ab6:	690f      	ldr	r7, [r1, #16]
    1ab8:	2f00      	cmp	r7, #0
    1aba:	d0a1      	beq.n	1a00 <__sflush_r+0x18>
    1abc:	680b      	ldr	r3, [r1, #0]
    1abe:	600f      	str	r7, [r1, #0]
    1ac0:	1bdb      	subs	r3, r3, r7
    1ac2:	9301      	str	r3, [sp, #4]
    1ac4:	2300      	movs	r3, #0
    1ac6:	0792      	lsls	r2, r2, #30
    1ac8:	d100      	bne.n	1acc <__sflush_r+0xe4>
    1aca:	694b      	ldr	r3, [r1, #20]
    1acc:	60a3      	str	r3, [r4, #8]
    1ace:	9b01      	ldr	r3, [sp, #4]
    1ad0:	2b00      	cmp	r3, #0
    1ad2:	dc00      	bgt.n	1ad6 <__sflush_r+0xee>
    1ad4:	e794      	b.n	1a00 <__sflush_r+0x18>
    1ad6:	9b01      	ldr	r3, [sp, #4]
    1ad8:	003a      	movs	r2, r7
    1ada:	6a21      	ldr	r1, [r4, #32]
    1adc:	0028      	movs	r0, r5
    1ade:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1ae0:	47b0      	blx	r6
    1ae2:	2800      	cmp	r0, #0
    1ae4:	dc03      	bgt.n	1aee <__sflush_r+0x106>
    1ae6:	2340      	movs	r3, #64	; 0x40
    1ae8:	89a2      	ldrh	r2, [r4, #12]
    1aea:	4313      	orrs	r3, r2
    1aec:	e7df      	b.n	1aae <__sflush_r+0xc6>
    1aee:	9b01      	ldr	r3, [sp, #4]
    1af0:	183f      	adds	r7, r7, r0
    1af2:	1a1b      	subs	r3, r3, r0
    1af4:	9301      	str	r3, [sp, #4]
    1af6:	e7ea      	b.n	1ace <__sflush_r+0xe6>
    1af8:	20400001 	.word	0x20400001

00001afc <_fflush_r>:
    1afc:	690b      	ldr	r3, [r1, #16]
    1afe:	b570      	push	{r4, r5, r6, lr}
    1b00:	0005      	movs	r5, r0
    1b02:	000c      	movs	r4, r1
    1b04:	2b00      	cmp	r3, #0
    1b06:	d101      	bne.n	1b0c <_fflush_r+0x10>
    1b08:	2000      	movs	r0, #0
    1b0a:	bd70      	pop	{r4, r5, r6, pc}
    1b0c:	2800      	cmp	r0, #0
    1b0e:	d004      	beq.n	1b1a <_fflush_r+0x1e>
    1b10:	6983      	ldr	r3, [r0, #24]
    1b12:	2b00      	cmp	r3, #0
    1b14:	d101      	bne.n	1b1a <_fflush_r+0x1e>
    1b16:	f000 f85f 	bl	1bd8 <__sinit>
    1b1a:	4b0b      	ldr	r3, [pc, #44]	; (1b48 <_fflush_r+0x4c>)
    1b1c:	429c      	cmp	r4, r3
    1b1e:	d109      	bne.n	1b34 <_fflush_r+0x38>
    1b20:	686c      	ldr	r4, [r5, #4]
    1b22:	220c      	movs	r2, #12
    1b24:	5ea3      	ldrsh	r3, [r4, r2]
    1b26:	2b00      	cmp	r3, #0
    1b28:	d0ee      	beq.n	1b08 <_fflush_r+0xc>
    1b2a:	0021      	movs	r1, r4
    1b2c:	0028      	movs	r0, r5
    1b2e:	f7ff ff5b 	bl	19e8 <__sflush_r>
    1b32:	e7ea      	b.n	1b0a <_fflush_r+0xe>
    1b34:	4b05      	ldr	r3, [pc, #20]	; (1b4c <_fflush_r+0x50>)
    1b36:	429c      	cmp	r4, r3
    1b38:	d101      	bne.n	1b3e <_fflush_r+0x42>
    1b3a:	68ac      	ldr	r4, [r5, #8]
    1b3c:	e7f1      	b.n	1b22 <_fflush_r+0x26>
    1b3e:	4b04      	ldr	r3, [pc, #16]	; (1b50 <_fflush_r+0x54>)
    1b40:	429c      	cmp	r4, r3
    1b42:	d1ee      	bne.n	1b22 <_fflush_r+0x26>
    1b44:	68ec      	ldr	r4, [r5, #12]
    1b46:	e7ec      	b.n	1b22 <_fflush_r+0x26>
    1b48:	000028e4 	.word	0x000028e4
    1b4c:	00002904 	.word	0x00002904
    1b50:	000028c4 	.word	0x000028c4

00001b54 <_cleanup_r>:
    1b54:	b510      	push	{r4, lr}
    1b56:	4902      	ldr	r1, [pc, #8]	; (1b60 <_cleanup_r+0xc>)
    1b58:	f000 f8b2 	bl	1cc0 <_fwalk_reent>
    1b5c:	bd10      	pop	{r4, pc}
    1b5e:	46c0      	nop			; (mov r8, r8)
    1b60:	00001afd 	.word	0x00001afd

00001b64 <std.isra.0>:
    1b64:	2300      	movs	r3, #0
    1b66:	b510      	push	{r4, lr}
    1b68:	0004      	movs	r4, r0
    1b6a:	6003      	str	r3, [r0, #0]
    1b6c:	6043      	str	r3, [r0, #4]
    1b6e:	6083      	str	r3, [r0, #8]
    1b70:	8181      	strh	r1, [r0, #12]
    1b72:	6643      	str	r3, [r0, #100]	; 0x64
    1b74:	81c2      	strh	r2, [r0, #14]
    1b76:	6103      	str	r3, [r0, #16]
    1b78:	6143      	str	r3, [r0, #20]
    1b7a:	6183      	str	r3, [r0, #24]
    1b7c:	0019      	movs	r1, r3
    1b7e:	2208      	movs	r2, #8
    1b80:	305c      	adds	r0, #92	; 0x5c
    1b82:	f7ff fe59 	bl	1838 <memset>
    1b86:	4b05      	ldr	r3, [pc, #20]	; (1b9c <std.isra.0+0x38>)
    1b88:	6224      	str	r4, [r4, #32]
    1b8a:	6263      	str	r3, [r4, #36]	; 0x24
    1b8c:	4b04      	ldr	r3, [pc, #16]	; (1ba0 <std.isra.0+0x3c>)
    1b8e:	62a3      	str	r3, [r4, #40]	; 0x28
    1b90:	4b04      	ldr	r3, [pc, #16]	; (1ba4 <std.isra.0+0x40>)
    1b92:	62e3      	str	r3, [r4, #44]	; 0x2c
    1b94:	4b04      	ldr	r3, [pc, #16]	; (1ba8 <std.isra.0+0x44>)
    1b96:	6323      	str	r3, [r4, #48]	; 0x30
    1b98:	bd10      	pop	{r4, pc}
    1b9a:	46c0      	nop			; (mov r8, r8)
    1b9c:	000024f1 	.word	0x000024f1
    1ba0:	00002519 	.word	0x00002519
    1ba4:	00002551 	.word	0x00002551
    1ba8:	0000257d 	.word	0x0000257d

00001bac <__sfmoreglue>:
    1bac:	b570      	push	{r4, r5, r6, lr}
    1bae:	2568      	movs	r5, #104	; 0x68
    1bb0:	1e4a      	subs	r2, r1, #1
    1bb2:	4355      	muls	r5, r2
    1bb4:	000e      	movs	r6, r1
    1bb6:	0029      	movs	r1, r5
    1bb8:	3174      	adds	r1, #116	; 0x74
    1bba:	f000 f95d 	bl	1e78 <_malloc_r>
    1bbe:	1e04      	subs	r4, r0, #0
    1bc0:	d008      	beq.n	1bd4 <__sfmoreglue+0x28>
    1bc2:	2100      	movs	r1, #0
    1bc4:	002a      	movs	r2, r5
    1bc6:	6001      	str	r1, [r0, #0]
    1bc8:	6046      	str	r6, [r0, #4]
    1bca:	300c      	adds	r0, #12
    1bcc:	60a0      	str	r0, [r4, #8]
    1bce:	3268      	adds	r2, #104	; 0x68
    1bd0:	f7ff fe32 	bl	1838 <memset>
    1bd4:	0020      	movs	r0, r4
    1bd6:	bd70      	pop	{r4, r5, r6, pc}

00001bd8 <__sinit>:
    1bd8:	6983      	ldr	r3, [r0, #24]
    1bda:	b513      	push	{r0, r1, r4, lr}
    1bdc:	0004      	movs	r4, r0
    1bde:	2b00      	cmp	r3, #0
    1be0:	d128      	bne.n	1c34 <__sinit+0x5c>
    1be2:	6483      	str	r3, [r0, #72]	; 0x48
    1be4:	64c3      	str	r3, [r0, #76]	; 0x4c
    1be6:	6503      	str	r3, [r0, #80]	; 0x50
    1be8:	4b13      	ldr	r3, [pc, #76]	; (1c38 <__sinit+0x60>)
    1bea:	4a14      	ldr	r2, [pc, #80]	; (1c3c <__sinit+0x64>)
    1bec:	681b      	ldr	r3, [r3, #0]
    1bee:	6282      	str	r2, [r0, #40]	; 0x28
    1bf0:	9301      	str	r3, [sp, #4]
    1bf2:	4298      	cmp	r0, r3
    1bf4:	d101      	bne.n	1bfa <__sinit+0x22>
    1bf6:	2301      	movs	r3, #1
    1bf8:	6183      	str	r3, [r0, #24]
    1bfa:	0020      	movs	r0, r4
    1bfc:	f000 f820 	bl	1c40 <__sfp>
    1c00:	6060      	str	r0, [r4, #4]
    1c02:	0020      	movs	r0, r4
    1c04:	f000 f81c 	bl	1c40 <__sfp>
    1c08:	60a0      	str	r0, [r4, #8]
    1c0a:	0020      	movs	r0, r4
    1c0c:	f000 f818 	bl	1c40 <__sfp>
    1c10:	2200      	movs	r2, #0
    1c12:	60e0      	str	r0, [r4, #12]
    1c14:	2104      	movs	r1, #4
    1c16:	6860      	ldr	r0, [r4, #4]
    1c18:	f7ff ffa4 	bl	1b64 <std.isra.0>
    1c1c:	2201      	movs	r2, #1
    1c1e:	2109      	movs	r1, #9
    1c20:	68a0      	ldr	r0, [r4, #8]
    1c22:	f7ff ff9f 	bl	1b64 <std.isra.0>
    1c26:	2202      	movs	r2, #2
    1c28:	2112      	movs	r1, #18
    1c2a:	68e0      	ldr	r0, [r4, #12]
    1c2c:	f7ff ff9a 	bl	1b64 <std.isra.0>
    1c30:	2301      	movs	r3, #1
    1c32:	61a3      	str	r3, [r4, #24]
    1c34:	bd13      	pop	{r0, r1, r4, pc}
    1c36:	46c0      	nop			; (mov r8, r8)
    1c38:	000028c0 	.word	0x000028c0
    1c3c:	00001b55 	.word	0x00001b55

00001c40 <__sfp>:
    1c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c42:	4b1e      	ldr	r3, [pc, #120]	; (1cbc <__sfp+0x7c>)
    1c44:	0007      	movs	r7, r0
    1c46:	681e      	ldr	r6, [r3, #0]
    1c48:	69b3      	ldr	r3, [r6, #24]
    1c4a:	2b00      	cmp	r3, #0
    1c4c:	d102      	bne.n	1c54 <__sfp+0x14>
    1c4e:	0030      	movs	r0, r6
    1c50:	f7ff ffc2 	bl	1bd8 <__sinit>
    1c54:	3648      	adds	r6, #72	; 0x48
    1c56:	68b4      	ldr	r4, [r6, #8]
    1c58:	6873      	ldr	r3, [r6, #4]
    1c5a:	3b01      	subs	r3, #1
    1c5c:	d504      	bpl.n	1c68 <__sfp+0x28>
    1c5e:	6833      	ldr	r3, [r6, #0]
    1c60:	2b00      	cmp	r3, #0
    1c62:	d007      	beq.n	1c74 <__sfp+0x34>
    1c64:	6836      	ldr	r6, [r6, #0]
    1c66:	e7f6      	b.n	1c56 <__sfp+0x16>
    1c68:	220c      	movs	r2, #12
    1c6a:	5ea5      	ldrsh	r5, [r4, r2]
    1c6c:	2d00      	cmp	r5, #0
    1c6e:	d00d      	beq.n	1c8c <__sfp+0x4c>
    1c70:	3468      	adds	r4, #104	; 0x68
    1c72:	e7f2      	b.n	1c5a <__sfp+0x1a>
    1c74:	2104      	movs	r1, #4
    1c76:	0038      	movs	r0, r7
    1c78:	f7ff ff98 	bl	1bac <__sfmoreglue>
    1c7c:	6030      	str	r0, [r6, #0]
    1c7e:	2800      	cmp	r0, #0
    1c80:	d1f0      	bne.n	1c64 <__sfp+0x24>
    1c82:	230c      	movs	r3, #12
    1c84:	0004      	movs	r4, r0
    1c86:	603b      	str	r3, [r7, #0]
    1c88:	0020      	movs	r0, r4
    1c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c8c:	2301      	movs	r3, #1
    1c8e:	0020      	movs	r0, r4
    1c90:	425b      	negs	r3, r3
    1c92:	81e3      	strh	r3, [r4, #14]
    1c94:	3302      	adds	r3, #2
    1c96:	81a3      	strh	r3, [r4, #12]
    1c98:	6665      	str	r5, [r4, #100]	; 0x64
    1c9a:	6025      	str	r5, [r4, #0]
    1c9c:	60a5      	str	r5, [r4, #8]
    1c9e:	6065      	str	r5, [r4, #4]
    1ca0:	6125      	str	r5, [r4, #16]
    1ca2:	6165      	str	r5, [r4, #20]
    1ca4:	61a5      	str	r5, [r4, #24]
    1ca6:	2208      	movs	r2, #8
    1ca8:	0029      	movs	r1, r5
    1caa:	305c      	adds	r0, #92	; 0x5c
    1cac:	f7ff fdc4 	bl	1838 <memset>
    1cb0:	6365      	str	r5, [r4, #52]	; 0x34
    1cb2:	63a5      	str	r5, [r4, #56]	; 0x38
    1cb4:	64a5      	str	r5, [r4, #72]	; 0x48
    1cb6:	64e5      	str	r5, [r4, #76]	; 0x4c
    1cb8:	e7e6      	b.n	1c88 <__sfp+0x48>
    1cba:	46c0      	nop			; (mov r8, r8)
    1cbc:	000028c0 	.word	0x000028c0

00001cc0 <_fwalk_reent>:
    1cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1cc2:	0004      	movs	r4, r0
    1cc4:	0007      	movs	r7, r0
    1cc6:	2600      	movs	r6, #0
    1cc8:	9101      	str	r1, [sp, #4]
    1cca:	3448      	adds	r4, #72	; 0x48
    1ccc:	2c00      	cmp	r4, #0
    1cce:	d101      	bne.n	1cd4 <_fwalk_reent+0x14>
    1cd0:	0030      	movs	r0, r6
    1cd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1cd4:	6863      	ldr	r3, [r4, #4]
    1cd6:	68a5      	ldr	r5, [r4, #8]
    1cd8:	9300      	str	r3, [sp, #0]
    1cda:	9b00      	ldr	r3, [sp, #0]
    1cdc:	3b01      	subs	r3, #1
    1cde:	9300      	str	r3, [sp, #0]
    1ce0:	d501      	bpl.n	1ce6 <_fwalk_reent+0x26>
    1ce2:	6824      	ldr	r4, [r4, #0]
    1ce4:	e7f2      	b.n	1ccc <_fwalk_reent+0xc>
    1ce6:	89ab      	ldrh	r3, [r5, #12]
    1ce8:	2b01      	cmp	r3, #1
    1cea:	d908      	bls.n	1cfe <_fwalk_reent+0x3e>
    1cec:	220e      	movs	r2, #14
    1cee:	5eab      	ldrsh	r3, [r5, r2]
    1cf0:	3301      	adds	r3, #1
    1cf2:	d004      	beq.n	1cfe <_fwalk_reent+0x3e>
    1cf4:	0029      	movs	r1, r5
    1cf6:	0038      	movs	r0, r7
    1cf8:	9b01      	ldr	r3, [sp, #4]
    1cfa:	4798      	blx	r3
    1cfc:	4306      	orrs	r6, r0
    1cfe:	3568      	adds	r5, #104	; 0x68
    1d00:	e7eb      	b.n	1cda <_fwalk_reent+0x1a>
	...

00001d04 <__swhatbuf_r>:
    1d04:	b570      	push	{r4, r5, r6, lr}
    1d06:	000e      	movs	r6, r1
    1d08:	001d      	movs	r5, r3
    1d0a:	230e      	movs	r3, #14
    1d0c:	5ec9      	ldrsh	r1, [r1, r3]
    1d0e:	b090      	sub	sp, #64	; 0x40
    1d10:	0014      	movs	r4, r2
    1d12:	2900      	cmp	r1, #0
    1d14:	da07      	bge.n	1d26 <__swhatbuf_r+0x22>
    1d16:	2300      	movs	r3, #0
    1d18:	602b      	str	r3, [r5, #0]
    1d1a:	89b3      	ldrh	r3, [r6, #12]
    1d1c:	061b      	lsls	r3, r3, #24
    1d1e:	d411      	bmi.n	1d44 <__swhatbuf_r+0x40>
    1d20:	2380      	movs	r3, #128	; 0x80
    1d22:	00db      	lsls	r3, r3, #3
    1d24:	e00f      	b.n	1d46 <__swhatbuf_r+0x42>
    1d26:	aa01      	add	r2, sp, #4
    1d28:	f000 fd20 	bl	276c <_fstat_r>
    1d2c:	2800      	cmp	r0, #0
    1d2e:	dbf2      	blt.n	1d16 <__swhatbuf_r+0x12>
    1d30:	22f0      	movs	r2, #240	; 0xf0
    1d32:	9b02      	ldr	r3, [sp, #8]
    1d34:	0212      	lsls	r2, r2, #8
    1d36:	4013      	ands	r3, r2
    1d38:	4a05      	ldr	r2, [pc, #20]	; (1d50 <__swhatbuf_r+0x4c>)
    1d3a:	189b      	adds	r3, r3, r2
    1d3c:	425a      	negs	r2, r3
    1d3e:	4153      	adcs	r3, r2
    1d40:	602b      	str	r3, [r5, #0]
    1d42:	e7ed      	b.n	1d20 <__swhatbuf_r+0x1c>
    1d44:	2340      	movs	r3, #64	; 0x40
    1d46:	2000      	movs	r0, #0
    1d48:	6023      	str	r3, [r4, #0]
    1d4a:	b010      	add	sp, #64	; 0x40
    1d4c:	bd70      	pop	{r4, r5, r6, pc}
    1d4e:	46c0      	nop			; (mov r8, r8)
    1d50:	ffffe000 	.word	0xffffe000

00001d54 <__smakebuf_r>:
    1d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1d56:	2602      	movs	r6, #2
    1d58:	898b      	ldrh	r3, [r1, #12]
    1d5a:	0005      	movs	r5, r0
    1d5c:	000c      	movs	r4, r1
    1d5e:	4233      	tst	r3, r6
    1d60:	d006      	beq.n	1d70 <__smakebuf_r+0x1c>
    1d62:	0023      	movs	r3, r4
    1d64:	3347      	adds	r3, #71	; 0x47
    1d66:	6023      	str	r3, [r4, #0]
    1d68:	6123      	str	r3, [r4, #16]
    1d6a:	2301      	movs	r3, #1
    1d6c:	6163      	str	r3, [r4, #20]
    1d6e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1d70:	ab01      	add	r3, sp, #4
    1d72:	466a      	mov	r2, sp
    1d74:	f7ff ffc6 	bl	1d04 <__swhatbuf_r>
    1d78:	9900      	ldr	r1, [sp, #0]
    1d7a:	0007      	movs	r7, r0
    1d7c:	0028      	movs	r0, r5
    1d7e:	f000 f87b 	bl	1e78 <_malloc_r>
    1d82:	2800      	cmp	r0, #0
    1d84:	d106      	bne.n	1d94 <__smakebuf_r+0x40>
    1d86:	220c      	movs	r2, #12
    1d88:	5ea3      	ldrsh	r3, [r4, r2]
    1d8a:	059a      	lsls	r2, r3, #22
    1d8c:	d4ef      	bmi.n	1d6e <__smakebuf_r+0x1a>
    1d8e:	431e      	orrs	r6, r3
    1d90:	81a6      	strh	r6, [r4, #12]
    1d92:	e7e6      	b.n	1d62 <__smakebuf_r+0xe>
    1d94:	4b0d      	ldr	r3, [pc, #52]	; (1dcc <__smakebuf_r+0x78>)
    1d96:	62ab      	str	r3, [r5, #40]	; 0x28
    1d98:	2380      	movs	r3, #128	; 0x80
    1d9a:	89a2      	ldrh	r2, [r4, #12]
    1d9c:	6020      	str	r0, [r4, #0]
    1d9e:	4313      	orrs	r3, r2
    1da0:	81a3      	strh	r3, [r4, #12]
    1da2:	9b00      	ldr	r3, [sp, #0]
    1da4:	6120      	str	r0, [r4, #16]
    1da6:	6163      	str	r3, [r4, #20]
    1da8:	9b01      	ldr	r3, [sp, #4]
    1daa:	2b00      	cmp	r3, #0
    1dac:	d00a      	beq.n	1dc4 <__smakebuf_r+0x70>
    1dae:	230e      	movs	r3, #14
    1db0:	5ee1      	ldrsh	r1, [r4, r3]
    1db2:	0028      	movs	r0, r5
    1db4:	f000 fcec 	bl	2790 <_isatty_r>
    1db8:	2800      	cmp	r0, #0
    1dba:	d003      	beq.n	1dc4 <__smakebuf_r+0x70>
    1dbc:	2301      	movs	r3, #1
    1dbe:	89a2      	ldrh	r2, [r4, #12]
    1dc0:	4313      	orrs	r3, r2
    1dc2:	81a3      	strh	r3, [r4, #12]
    1dc4:	89a0      	ldrh	r0, [r4, #12]
    1dc6:	4338      	orrs	r0, r7
    1dc8:	81a0      	strh	r0, [r4, #12]
    1dca:	e7d0      	b.n	1d6e <__smakebuf_r+0x1a>
    1dcc:	00001b55 	.word	0x00001b55

00001dd0 <malloc>:
    1dd0:	b510      	push	{r4, lr}
    1dd2:	4b03      	ldr	r3, [pc, #12]	; (1de0 <malloc+0x10>)
    1dd4:	0001      	movs	r1, r0
    1dd6:	6818      	ldr	r0, [r3, #0]
    1dd8:	f000 f84e 	bl	1e78 <_malloc_r>
    1ddc:	bd10      	pop	{r4, pc}
    1dde:	46c0      	nop			; (mov r8, r8)
    1de0:	2000000c 	.word	0x2000000c

00001de4 <_free_r>:
    1de4:	b570      	push	{r4, r5, r6, lr}
    1de6:	0005      	movs	r5, r0
    1de8:	2900      	cmp	r1, #0
    1dea:	d010      	beq.n	1e0e <_free_r+0x2a>
    1dec:	1f0c      	subs	r4, r1, #4
    1dee:	6823      	ldr	r3, [r4, #0]
    1df0:	2b00      	cmp	r3, #0
    1df2:	da00      	bge.n	1df6 <_free_r+0x12>
    1df4:	18e4      	adds	r4, r4, r3
    1df6:	0028      	movs	r0, r5
    1df8:	f000 fcfb 	bl	27f2 <__malloc_lock>
    1dfc:	4a1d      	ldr	r2, [pc, #116]	; (1e74 <_free_r+0x90>)
    1dfe:	6813      	ldr	r3, [r2, #0]
    1e00:	2b00      	cmp	r3, #0
    1e02:	d105      	bne.n	1e10 <_free_r+0x2c>
    1e04:	6063      	str	r3, [r4, #4]
    1e06:	6014      	str	r4, [r2, #0]
    1e08:	0028      	movs	r0, r5
    1e0a:	f000 fcf3 	bl	27f4 <__malloc_unlock>
    1e0e:	bd70      	pop	{r4, r5, r6, pc}
    1e10:	42a3      	cmp	r3, r4
    1e12:	d909      	bls.n	1e28 <_free_r+0x44>
    1e14:	6821      	ldr	r1, [r4, #0]
    1e16:	1860      	adds	r0, r4, r1
    1e18:	4283      	cmp	r3, r0
    1e1a:	d1f3      	bne.n	1e04 <_free_r+0x20>
    1e1c:	6818      	ldr	r0, [r3, #0]
    1e1e:	685b      	ldr	r3, [r3, #4]
    1e20:	1841      	adds	r1, r0, r1
    1e22:	6021      	str	r1, [r4, #0]
    1e24:	e7ee      	b.n	1e04 <_free_r+0x20>
    1e26:	0013      	movs	r3, r2
    1e28:	685a      	ldr	r2, [r3, #4]
    1e2a:	2a00      	cmp	r2, #0
    1e2c:	d001      	beq.n	1e32 <_free_r+0x4e>
    1e2e:	42a2      	cmp	r2, r4
    1e30:	d9f9      	bls.n	1e26 <_free_r+0x42>
    1e32:	6819      	ldr	r1, [r3, #0]
    1e34:	1858      	adds	r0, r3, r1
    1e36:	42a0      	cmp	r0, r4
    1e38:	d10b      	bne.n	1e52 <_free_r+0x6e>
    1e3a:	6820      	ldr	r0, [r4, #0]
    1e3c:	1809      	adds	r1, r1, r0
    1e3e:	1858      	adds	r0, r3, r1
    1e40:	6019      	str	r1, [r3, #0]
    1e42:	4282      	cmp	r2, r0
    1e44:	d1e0      	bne.n	1e08 <_free_r+0x24>
    1e46:	6810      	ldr	r0, [r2, #0]
    1e48:	6852      	ldr	r2, [r2, #4]
    1e4a:	1841      	adds	r1, r0, r1
    1e4c:	6019      	str	r1, [r3, #0]
    1e4e:	605a      	str	r2, [r3, #4]
    1e50:	e7da      	b.n	1e08 <_free_r+0x24>
    1e52:	42a0      	cmp	r0, r4
    1e54:	d902      	bls.n	1e5c <_free_r+0x78>
    1e56:	230c      	movs	r3, #12
    1e58:	602b      	str	r3, [r5, #0]
    1e5a:	e7d5      	b.n	1e08 <_free_r+0x24>
    1e5c:	6821      	ldr	r1, [r4, #0]
    1e5e:	1860      	adds	r0, r4, r1
    1e60:	4282      	cmp	r2, r0
    1e62:	d103      	bne.n	1e6c <_free_r+0x88>
    1e64:	6810      	ldr	r0, [r2, #0]
    1e66:	6852      	ldr	r2, [r2, #4]
    1e68:	1841      	adds	r1, r0, r1
    1e6a:	6021      	str	r1, [r4, #0]
    1e6c:	6062      	str	r2, [r4, #4]
    1e6e:	605c      	str	r4, [r3, #4]
    1e70:	e7ca      	b.n	1e08 <_free_r+0x24>
    1e72:	46c0      	nop			; (mov r8, r8)
    1e74:	200000cc 	.word	0x200000cc

00001e78 <_malloc_r>:
    1e78:	2303      	movs	r3, #3
    1e7a:	b570      	push	{r4, r5, r6, lr}
    1e7c:	1ccd      	adds	r5, r1, #3
    1e7e:	439d      	bics	r5, r3
    1e80:	3508      	adds	r5, #8
    1e82:	0006      	movs	r6, r0
    1e84:	2d0c      	cmp	r5, #12
    1e86:	d21e      	bcs.n	1ec6 <_malloc_r+0x4e>
    1e88:	250c      	movs	r5, #12
    1e8a:	42a9      	cmp	r1, r5
    1e8c:	d81d      	bhi.n	1eca <_malloc_r+0x52>
    1e8e:	0030      	movs	r0, r6
    1e90:	f000 fcaf 	bl	27f2 <__malloc_lock>
    1e94:	4a25      	ldr	r2, [pc, #148]	; (1f2c <_malloc_r+0xb4>)
    1e96:	6814      	ldr	r4, [r2, #0]
    1e98:	0021      	movs	r1, r4
    1e9a:	2900      	cmp	r1, #0
    1e9c:	d119      	bne.n	1ed2 <_malloc_r+0x5a>
    1e9e:	4c24      	ldr	r4, [pc, #144]	; (1f30 <_malloc_r+0xb8>)
    1ea0:	6823      	ldr	r3, [r4, #0]
    1ea2:	2b00      	cmp	r3, #0
    1ea4:	d103      	bne.n	1eae <_malloc_r+0x36>
    1ea6:	0030      	movs	r0, r6
    1ea8:	f000 fb10 	bl	24cc <_sbrk_r>
    1eac:	6020      	str	r0, [r4, #0]
    1eae:	0029      	movs	r1, r5
    1eb0:	0030      	movs	r0, r6
    1eb2:	f000 fb0b 	bl	24cc <_sbrk_r>
    1eb6:	1c43      	adds	r3, r0, #1
    1eb8:	d12c      	bne.n	1f14 <_malloc_r+0x9c>
    1eba:	230c      	movs	r3, #12
    1ebc:	0030      	movs	r0, r6
    1ebe:	6033      	str	r3, [r6, #0]
    1ec0:	f000 fc98 	bl	27f4 <__malloc_unlock>
    1ec4:	e003      	b.n	1ece <_malloc_r+0x56>
    1ec6:	2d00      	cmp	r5, #0
    1ec8:	dadf      	bge.n	1e8a <_malloc_r+0x12>
    1eca:	230c      	movs	r3, #12
    1ecc:	6033      	str	r3, [r6, #0]
    1ece:	2000      	movs	r0, #0
    1ed0:	bd70      	pop	{r4, r5, r6, pc}
    1ed2:	680b      	ldr	r3, [r1, #0]
    1ed4:	1b5b      	subs	r3, r3, r5
    1ed6:	d41a      	bmi.n	1f0e <_malloc_r+0x96>
    1ed8:	2b0b      	cmp	r3, #11
    1eda:	d903      	bls.n	1ee4 <_malloc_r+0x6c>
    1edc:	600b      	str	r3, [r1, #0]
    1ede:	18cc      	adds	r4, r1, r3
    1ee0:	6025      	str	r5, [r4, #0]
    1ee2:	e003      	b.n	1eec <_malloc_r+0x74>
    1ee4:	428c      	cmp	r4, r1
    1ee6:	d10e      	bne.n	1f06 <_malloc_r+0x8e>
    1ee8:	6863      	ldr	r3, [r4, #4]
    1eea:	6013      	str	r3, [r2, #0]
    1eec:	0030      	movs	r0, r6
    1eee:	f000 fc81 	bl	27f4 <__malloc_unlock>
    1ef2:	0020      	movs	r0, r4
    1ef4:	2207      	movs	r2, #7
    1ef6:	300b      	adds	r0, #11
    1ef8:	1d23      	adds	r3, r4, #4
    1efa:	4390      	bics	r0, r2
    1efc:	1ac3      	subs	r3, r0, r3
    1efe:	d0e7      	beq.n	1ed0 <_malloc_r+0x58>
    1f00:	425a      	negs	r2, r3
    1f02:	50e2      	str	r2, [r4, r3]
    1f04:	e7e4      	b.n	1ed0 <_malloc_r+0x58>
    1f06:	684b      	ldr	r3, [r1, #4]
    1f08:	6063      	str	r3, [r4, #4]
    1f0a:	000c      	movs	r4, r1
    1f0c:	e7ee      	b.n	1eec <_malloc_r+0x74>
    1f0e:	000c      	movs	r4, r1
    1f10:	6849      	ldr	r1, [r1, #4]
    1f12:	e7c2      	b.n	1e9a <_malloc_r+0x22>
    1f14:	2303      	movs	r3, #3
    1f16:	1cc4      	adds	r4, r0, #3
    1f18:	439c      	bics	r4, r3
    1f1a:	42a0      	cmp	r0, r4
    1f1c:	d0e0      	beq.n	1ee0 <_malloc_r+0x68>
    1f1e:	1a21      	subs	r1, r4, r0
    1f20:	0030      	movs	r0, r6
    1f22:	f000 fad3 	bl	24cc <_sbrk_r>
    1f26:	1c43      	adds	r3, r0, #1
    1f28:	d1da      	bne.n	1ee0 <_malloc_r+0x68>
    1f2a:	e7c6      	b.n	1eba <_malloc_r+0x42>
    1f2c:	200000cc 	.word	0x200000cc
    1f30:	200000d0 	.word	0x200000d0

00001f34 <__sfputc_r>:
    1f34:	6893      	ldr	r3, [r2, #8]
    1f36:	b510      	push	{r4, lr}
    1f38:	3b01      	subs	r3, #1
    1f3a:	6093      	str	r3, [r2, #8]
    1f3c:	2b00      	cmp	r3, #0
    1f3e:	da05      	bge.n	1f4c <__sfputc_r+0x18>
    1f40:	6994      	ldr	r4, [r2, #24]
    1f42:	42a3      	cmp	r3, r4
    1f44:	db08      	blt.n	1f58 <__sfputc_r+0x24>
    1f46:	b2cb      	uxtb	r3, r1
    1f48:	2b0a      	cmp	r3, #10
    1f4a:	d005      	beq.n	1f58 <__sfputc_r+0x24>
    1f4c:	6813      	ldr	r3, [r2, #0]
    1f4e:	1c58      	adds	r0, r3, #1
    1f50:	6010      	str	r0, [r2, #0]
    1f52:	7019      	strb	r1, [r3, #0]
    1f54:	b2c8      	uxtb	r0, r1
    1f56:	bd10      	pop	{r4, pc}
    1f58:	f000 fb16 	bl	2588 <__swbuf_r>
    1f5c:	e7fb      	b.n	1f56 <__sfputc_r+0x22>

00001f5e <__sfputs_r>:
    1f5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f60:	0006      	movs	r6, r0
    1f62:	000f      	movs	r7, r1
    1f64:	0014      	movs	r4, r2
    1f66:	18d5      	adds	r5, r2, r3
    1f68:	42ac      	cmp	r4, r5
    1f6a:	d101      	bne.n	1f70 <__sfputs_r+0x12>
    1f6c:	2000      	movs	r0, #0
    1f6e:	e007      	b.n	1f80 <__sfputs_r+0x22>
    1f70:	7821      	ldrb	r1, [r4, #0]
    1f72:	003a      	movs	r2, r7
    1f74:	0030      	movs	r0, r6
    1f76:	f7ff ffdd 	bl	1f34 <__sfputc_r>
    1f7a:	3401      	adds	r4, #1
    1f7c:	1c43      	adds	r3, r0, #1
    1f7e:	d1f3      	bne.n	1f68 <__sfputs_r+0xa>
    1f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001f84 <_vfiprintf_r>:
    1f84:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f86:	b09f      	sub	sp, #124	; 0x7c
    1f88:	0006      	movs	r6, r0
    1f8a:	000f      	movs	r7, r1
    1f8c:	0014      	movs	r4, r2
    1f8e:	9305      	str	r3, [sp, #20]
    1f90:	2800      	cmp	r0, #0
    1f92:	d004      	beq.n	1f9e <_vfiprintf_r+0x1a>
    1f94:	6983      	ldr	r3, [r0, #24]
    1f96:	2b00      	cmp	r3, #0
    1f98:	d101      	bne.n	1f9e <_vfiprintf_r+0x1a>
    1f9a:	f7ff fe1d 	bl	1bd8 <__sinit>
    1f9e:	4b7f      	ldr	r3, [pc, #508]	; (219c <STACK_SIZE+0x19c>)
    1fa0:	429f      	cmp	r7, r3
    1fa2:	d15c      	bne.n	205e <STACK_SIZE+0x5e>
    1fa4:	6877      	ldr	r7, [r6, #4]
    1fa6:	89bb      	ldrh	r3, [r7, #12]
    1fa8:	071b      	lsls	r3, r3, #28
    1faa:	d562      	bpl.n	2072 <STACK_SIZE+0x72>
    1fac:	693b      	ldr	r3, [r7, #16]
    1fae:	2b00      	cmp	r3, #0
    1fb0:	d05f      	beq.n	2072 <STACK_SIZE+0x72>
    1fb2:	2300      	movs	r3, #0
    1fb4:	ad06      	add	r5, sp, #24
    1fb6:	616b      	str	r3, [r5, #20]
    1fb8:	3320      	adds	r3, #32
    1fba:	766b      	strb	r3, [r5, #25]
    1fbc:	3310      	adds	r3, #16
    1fbe:	76ab      	strb	r3, [r5, #26]
    1fc0:	9402      	str	r4, [sp, #8]
    1fc2:	9c02      	ldr	r4, [sp, #8]
    1fc4:	7823      	ldrb	r3, [r4, #0]
    1fc6:	2b00      	cmp	r3, #0
    1fc8:	d15d      	bne.n	2086 <STACK_SIZE+0x86>
    1fca:	9b02      	ldr	r3, [sp, #8]
    1fcc:	1ae3      	subs	r3, r4, r3
    1fce:	9304      	str	r3, [sp, #16]
    1fd0:	d00d      	beq.n	1fee <_vfiprintf_r+0x6a>
    1fd2:	9b04      	ldr	r3, [sp, #16]
    1fd4:	9a02      	ldr	r2, [sp, #8]
    1fd6:	0039      	movs	r1, r7
    1fd8:	0030      	movs	r0, r6
    1fda:	f7ff ffc0 	bl	1f5e <__sfputs_r>
    1fde:	1c43      	adds	r3, r0, #1
    1fe0:	d100      	bne.n	1fe4 <_vfiprintf_r+0x60>
    1fe2:	e0cc      	b.n	217e <STACK_SIZE+0x17e>
    1fe4:	696a      	ldr	r2, [r5, #20]
    1fe6:	9b04      	ldr	r3, [sp, #16]
    1fe8:	4694      	mov	ip, r2
    1fea:	4463      	add	r3, ip
    1fec:	616b      	str	r3, [r5, #20]
    1fee:	7823      	ldrb	r3, [r4, #0]
    1ff0:	2b00      	cmp	r3, #0
    1ff2:	d100      	bne.n	1ff6 <_vfiprintf_r+0x72>
    1ff4:	e0c3      	b.n	217e <STACK_SIZE+0x17e>
    1ff6:	2201      	movs	r2, #1
    1ff8:	2300      	movs	r3, #0
    1ffa:	4252      	negs	r2, r2
    1ffc:	606a      	str	r2, [r5, #4]
    1ffe:	a902      	add	r1, sp, #8
    2000:	3254      	adds	r2, #84	; 0x54
    2002:	1852      	adds	r2, r2, r1
    2004:	3401      	adds	r4, #1
    2006:	602b      	str	r3, [r5, #0]
    2008:	60eb      	str	r3, [r5, #12]
    200a:	60ab      	str	r3, [r5, #8]
    200c:	7013      	strb	r3, [r2, #0]
    200e:	65ab      	str	r3, [r5, #88]	; 0x58
    2010:	7821      	ldrb	r1, [r4, #0]
    2012:	2205      	movs	r2, #5
    2014:	4862      	ldr	r0, [pc, #392]	; (21a0 <STACK_SIZE+0x1a0>)
    2016:	f000 fbe1 	bl	27dc <memchr>
    201a:	1c63      	adds	r3, r4, #1
    201c:	469c      	mov	ip, r3
    201e:	2800      	cmp	r0, #0
    2020:	d135      	bne.n	208e <STACK_SIZE+0x8e>
    2022:	6829      	ldr	r1, [r5, #0]
    2024:	06cb      	lsls	r3, r1, #27
    2026:	d504      	bpl.n	2032 <STACK_SIZE+0x32>
    2028:	2353      	movs	r3, #83	; 0x53
    202a:	aa02      	add	r2, sp, #8
    202c:	3020      	adds	r0, #32
    202e:	189b      	adds	r3, r3, r2
    2030:	7018      	strb	r0, [r3, #0]
    2032:	070b      	lsls	r3, r1, #28
    2034:	d504      	bpl.n	2040 <STACK_SIZE+0x40>
    2036:	2353      	movs	r3, #83	; 0x53
    2038:	202b      	movs	r0, #43	; 0x2b
    203a:	aa02      	add	r2, sp, #8
    203c:	189b      	adds	r3, r3, r2
    203e:	7018      	strb	r0, [r3, #0]
    2040:	7823      	ldrb	r3, [r4, #0]
    2042:	2b2a      	cmp	r3, #42	; 0x2a
    2044:	d02c      	beq.n	20a0 <STACK_SIZE+0xa0>
    2046:	2000      	movs	r0, #0
    2048:	210a      	movs	r1, #10
    204a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    204c:	7822      	ldrb	r2, [r4, #0]
    204e:	3a30      	subs	r2, #48	; 0x30
    2050:	2a09      	cmp	r2, #9
    2052:	d800      	bhi.n	2056 <STACK_SIZE+0x56>
    2054:	e06b      	b.n	212e <STACK_SIZE+0x12e>
    2056:	2800      	cmp	r0, #0
    2058:	d02a      	beq.n	20b0 <STACK_SIZE+0xb0>
    205a:	9309      	str	r3, [sp, #36]	; 0x24
    205c:	e028      	b.n	20b0 <STACK_SIZE+0xb0>
    205e:	4b51      	ldr	r3, [pc, #324]	; (21a4 <STACK_SIZE+0x1a4>)
    2060:	429f      	cmp	r7, r3
    2062:	d101      	bne.n	2068 <STACK_SIZE+0x68>
    2064:	68b7      	ldr	r7, [r6, #8]
    2066:	e79e      	b.n	1fa6 <_vfiprintf_r+0x22>
    2068:	4b4f      	ldr	r3, [pc, #316]	; (21a8 <STACK_SIZE+0x1a8>)
    206a:	429f      	cmp	r7, r3
    206c:	d19b      	bne.n	1fa6 <_vfiprintf_r+0x22>
    206e:	68f7      	ldr	r7, [r6, #12]
    2070:	e799      	b.n	1fa6 <_vfiprintf_r+0x22>
    2072:	0039      	movs	r1, r7
    2074:	0030      	movs	r0, r6
    2076:	f000 faf1 	bl	265c <__swsetup_r>
    207a:	2800      	cmp	r0, #0
    207c:	d099      	beq.n	1fb2 <_vfiprintf_r+0x2e>
    207e:	2001      	movs	r0, #1
    2080:	4240      	negs	r0, r0
    2082:	b01f      	add	sp, #124	; 0x7c
    2084:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2086:	2b25      	cmp	r3, #37	; 0x25
    2088:	d09f      	beq.n	1fca <_vfiprintf_r+0x46>
    208a:	3401      	adds	r4, #1
    208c:	e79a      	b.n	1fc4 <_vfiprintf_r+0x40>
    208e:	4b44      	ldr	r3, [pc, #272]	; (21a0 <STACK_SIZE+0x1a0>)
    2090:	6829      	ldr	r1, [r5, #0]
    2092:	1ac0      	subs	r0, r0, r3
    2094:	2301      	movs	r3, #1
    2096:	4083      	lsls	r3, r0
    2098:	430b      	orrs	r3, r1
    209a:	602b      	str	r3, [r5, #0]
    209c:	4664      	mov	r4, ip
    209e:	e7b7      	b.n	2010 <STACK_SIZE+0x10>
    20a0:	9b05      	ldr	r3, [sp, #20]
    20a2:	1d18      	adds	r0, r3, #4
    20a4:	681b      	ldr	r3, [r3, #0]
    20a6:	9005      	str	r0, [sp, #20]
    20a8:	2b00      	cmp	r3, #0
    20aa:	db3a      	blt.n	2122 <STACK_SIZE+0x122>
    20ac:	9309      	str	r3, [sp, #36]	; 0x24
    20ae:	4664      	mov	r4, ip
    20b0:	7823      	ldrb	r3, [r4, #0]
    20b2:	2b2e      	cmp	r3, #46	; 0x2e
    20b4:	d10b      	bne.n	20ce <STACK_SIZE+0xce>
    20b6:	7863      	ldrb	r3, [r4, #1]
    20b8:	1c62      	adds	r2, r4, #1
    20ba:	2b2a      	cmp	r3, #42	; 0x2a
    20bc:	d13f      	bne.n	213e <STACK_SIZE+0x13e>
    20be:	9b05      	ldr	r3, [sp, #20]
    20c0:	3402      	adds	r4, #2
    20c2:	1d1a      	adds	r2, r3, #4
    20c4:	681b      	ldr	r3, [r3, #0]
    20c6:	9205      	str	r2, [sp, #20]
    20c8:	2b00      	cmp	r3, #0
    20ca:	db35      	blt.n	2138 <STACK_SIZE+0x138>
    20cc:	9307      	str	r3, [sp, #28]
    20ce:	7821      	ldrb	r1, [r4, #0]
    20d0:	2203      	movs	r2, #3
    20d2:	4836      	ldr	r0, [pc, #216]	; (21ac <STACK_SIZE+0x1ac>)
    20d4:	f000 fb82 	bl	27dc <memchr>
    20d8:	2800      	cmp	r0, #0
    20da:	d007      	beq.n	20ec <STACK_SIZE+0xec>
    20dc:	4b33      	ldr	r3, [pc, #204]	; (21ac <STACK_SIZE+0x1ac>)
    20de:	682a      	ldr	r2, [r5, #0]
    20e0:	1ac0      	subs	r0, r0, r3
    20e2:	2340      	movs	r3, #64	; 0x40
    20e4:	4083      	lsls	r3, r0
    20e6:	4313      	orrs	r3, r2
    20e8:	602b      	str	r3, [r5, #0]
    20ea:	3401      	adds	r4, #1
    20ec:	7821      	ldrb	r1, [r4, #0]
    20ee:	1c63      	adds	r3, r4, #1
    20f0:	2206      	movs	r2, #6
    20f2:	482f      	ldr	r0, [pc, #188]	; (21b0 <STACK_SIZE+0x1b0>)
    20f4:	9302      	str	r3, [sp, #8]
    20f6:	7629      	strb	r1, [r5, #24]
    20f8:	f000 fb70 	bl	27dc <memchr>
    20fc:	2800      	cmp	r0, #0
    20fe:	d044      	beq.n	218a <STACK_SIZE+0x18a>
    2100:	4b2c      	ldr	r3, [pc, #176]	; (21b4 <STACK_SIZE+0x1b4>)
    2102:	2b00      	cmp	r3, #0
    2104:	d12f      	bne.n	2166 <STACK_SIZE+0x166>
    2106:	6829      	ldr	r1, [r5, #0]
    2108:	9b05      	ldr	r3, [sp, #20]
    210a:	2207      	movs	r2, #7
    210c:	05c9      	lsls	r1, r1, #23
    210e:	d528      	bpl.n	2162 <STACK_SIZE+0x162>
    2110:	189b      	adds	r3, r3, r2
    2112:	4393      	bics	r3, r2
    2114:	3308      	adds	r3, #8
    2116:	9305      	str	r3, [sp, #20]
    2118:	696b      	ldr	r3, [r5, #20]
    211a:	9a03      	ldr	r2, [sp, #12]
    211c:	189b      	adds	r3, r3, r2
    211e:	616b      	str	r3, [r5, #20]
    2120:	e74f      	b.n	1fc2 <_vfiprintf_r+0x3e>
    2122:	425b      	negs	r3, r3
    2124:	60eb      	str	r3, [r5, #12]
    2126:	2302      	movs	r3, #2
    2128:	430b      	orrs	r3, r1
    212a:	602b      	str	r3, [r5, #0]
    212c:	e7bf      	b.n	20ae <STACK_SIZE+0xae>
    212e:	434b      	muls	r3, r1
    2130:	3401      	adds	r4, #1
    2132:	189b      	adds	r3, r3, r2
    2134:	2001      	movs	r0, #1
    2136:	e789      	b.n	204c <STACK_SIZE+0x4c>
    2138:	2301      	movs	r3, #1
    213a:	425b      	negs	r3, r3
    213c:	e7c6      	b.n	20cc <STACK_SIZE+0xcc>
    213e:	2300      	movs	r3, #0
    2140:	0014      	movs	r4, r2
    2142:	200a      	movs	r0, #10
    2144:	001a      	movs	r2, r3
    2146:	606b      	str	r3, [r5, #4]
    2148:	7821      	ldrb	r1, [r4, #0]
    214a:	3930      	subs	r1, #48	; 0x30
    214c:	2909      	cmp	r1, #9
    214e:	d903      	bls.n	2158 <STACK_SIZE+0x158>
    2150:	2b00      	cmp	r3, #0
    2152:	d0bc      	beq.n	20ce <STACK_SIZE+0xce>
    2154:	9207      	str	r2, [sp, #28]
    2156:	e7ba      	b.n	20ce <STACK_SIZE+0xce>
    2158:	4342      	muls	r2, r0
    215a:	3401      	adds	r4, #1
    215c:	1852      	adds	r2, r2, r1
    215e:	2301      	movs	r3, #1
    2160:	e7f2      	b.n	2148 <STACK_SIZE+0x148>
    2162:	3307      	adds	r3, #7
    2164:	e7d5      	b.n	2112 <STACK_SIZE+0x112>
    2166:	ab05      	add	r3, sp, #20
    2168:	9300      	str	r3, [sp, #0]
    216a:	003a      	movs	r2, r7
    216c:	4b12      	ldr	r3, [pc, #72]	; (21b8 <STACK_SIZE+0x1b8>)
    216e:	0029      	movs	r1, r5
    2170:	0030      	movs	r0, r6
    2172:	e000      	b.n	2176 <STACK_SIZE+0x176>
    2174:	bf00      	nop
    2176:	9003      	str	r0, [sp, #12]
    2178:	9b03      	ldr	r3, [sp, #12]
    217a:	3301      	adds	r3, #1
    217c:	d1cc      	bne.n	2118 <STACK_SIZE+0x118>
    217e:	89bb      	ldrh	r3, [r7, #12]
    2180:	065b      	lsls	r3, r3, #25
    2182:	d500      	bpl.n	2186 <STACK_SIZE+0x186>
    2184:	e77b      	b.n	207e <STACK_SIZE+0x7e>
    2186:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2188:	e77b      	b.n	2082 <STACK_SIZE+0x82>
    218a:	ab05      	add	r3, sp, #20
    218c:	9300      	str	r3, [sp, #0]
    218e:	003a      	movs	r2, r7
    2190:	4b09      	ldr	r3, [pc, #36]	; (21b8 <STACK_SIZE+0x1b8>)
    2192:	0029      	movs	r1, r5
    2194:	0030      	movs	r0, r6
    2196:	f000 f87f 	bl	2298 <_printf_i>
    219a:	e7ec      	b.n	2176 <STACK_SIZE+0x176>
    219c:	000028e4 	.word	0x000028e4
    21a0:	00002924 	.word	0x00002924
    21a4:	00002904 	.word	0x00002904
    21a8:	000028c4 	.word	0x000028c4
    21ac:	0000292a 	.word	0x0000292a
    21b0:	0000292e 	.word	0x0000292e
    21b4:	00000000 	.word	0x00000000
    21b8:	00001f5f 	.word	0x00001f5f

000021bc <_printf_common>:
    21bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    21be:	0015      	movs	r5, r2
    21c0:	9301      	str	r3, [sp, #4]
    21c2:	688a      	ldr	r2, [r1, #8]
    21c4:	690b      	ldr	r3, [r1, #16]
    21c6:	9000      	str	r0, [sp, #0]
    21c8:	000c      	movs	r4, r1
    21ca:	4293      	cmp	r3, r2
    21cc:	da00      	bge.n	21d0 <_printf_common+0x14>
    21ce:	0013      	movs	r3, r2
    21d0:	0022      	movs	r2, r4
    21d2:	602b      	str	r3, [r5, #0]
    21d4:	3243      	adds	r2, #67	; 0x43
    21d6:	7812      	ldrb	r2, [r2, #0]
    21d8:	2a00      	cmp	r2, #0
    21da:	d001      	beq.n	21e0 <_printf_common+0x24>
    21dc:	3301      	adds	r3, #1
    21de:	602b      	str	r3, [r5, #0]
    21e0:	6823      	ldr	r3, [r4, #0]
    21e2:	069b      	lsls	r3, r3, #26
    21e4:	d502      	bpl.n	21ec <_printf_common+0x30>
    21e6:	682b      	ldr	r3, [r5, #0]
    21e8:	3302      	adds	r3, #2
    21ea:	602b      	str	r3, [r5, #0]
    21ec:	2706      	movs	r7, #6
    21ee:	6823      	ldr	r3, [r4, #0]
    21f0:	401f      	ands	r7, r3
    21f2:	d027      	beq.n	2244 <_printf_common+0x88>
    21f4:	0023      	movs	r3, r4
    21f6:	3343      	adds	r3, #67	; 0x43
    21f8:	781b      	ldrb	r3, [r3, #0]
    21fa:	1e5a      	subs	r2, r3, #1
    21fc:	4193      	sbcs	r3, r2
    21fe:	6822      	ldr	r2, [r4, #0]
    2200:	0692      	lsls	r2, r2, #26
    2202:	d430      	bmi.n	2266 <_printf_common+0xaa>
    2204:	0022      	movs	r2, r4
    2206:	9901      	ldr	r1, [sp, #4]
    2208:	3243      	adds	r2, #67	; 0x43
    220a:	9800      	ldr	r0, [sp, #0]
    220c:	9e08      	ldr	r6, [sp, #32]
    220e:	47b0      	blx	r6
    2210:	1c43      	adds	r3, r0, #1
    2212:	d025      	beq.n	2260 <_printf_common+0xa4>
    2214:	2306      	movs	r3, #6
    2216:	6820      	ldr	r0, [r4, #0]
    2218:	682a      	ldr	r2, [r5, #0]
    221a:	68e1      	ldr	r1, [r4, #12]
    221c:	4003      	ands	r3, r0
    221e:	2500      	movs	r5, #0
    2220:	2b04      	cmp	r3, #4
    2222:	d103      	bne.n	222c <_printf_common+0x70>
    2224:	1a8d      	subs	r5, r1, r2
    2226:	43eb      	mvns	r3, r5
    2228:	17db      	asrs	r3, r3, #31
    222a:	401d      	ands	r5, r3
    222c:	68a3      	ldr	r3, [r4, #8]
    222e:	6922      	ldr	r2, [r4, #16]
    2230:	4293      	cmp	r3, r2
    2232:	dd01      	ble.n	2238 <_printf_common+0x7c>
    2234:	1a9b      	subs	r3, r3, r2
    2236:	18ed      	adds	r5, r5, r3
    2238:	2700      	movs	r7, #0
    223a:	42bd      	cmp	r5, r7
    223c:	d120      	bne.n	2280 <_printf_common+0xc4>
    223e:	2000      	movs	r0, #0
    2240:	e010      	b.n	2264 <_printf_common+0xa8>
    2242:	3701      	adds	r7, #1
    2244:	68e3      	ldr	r3, [r4, #12]
    2246:	682a      	ldr	r2, [r5, #0]
    2248:	1a9b      	subs	r3, r3, r2
    224a:	429f      	cmp	r7, r3
    224c:	dad2      	bge.n	21f4 <_printf_common+0x38>
    224e:	0022      	movs	r2, r4
    2250:	2301      	movs	r3, #1
    2252:	3219      	adds	r2, #25
    2254:	9901      	ldr	r1, [sp, #4]
    2256:	9800      	ldr	r0, [sp, #0]
    2258:	9e08      	ldr	r6, [sp, #32]
    225a:	47b0      	blx	r6
    225c:	1c43      	adds	r3, r0, #1
    225e:	d1f0      	bne.n	2242 <_printf_common+0x86>
    2260:	2001      	movs	r0, #1
    2262:	4240      	negs	r0, r0
    2264:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2266:	2030      	movs	r0, #48	; 0x30
    2268:	18e1      	adds	r1, r4, r3
    226a:	3143      	adds	r1, #67	; 0x43
    226c:	7008      	strb	r0, [r1, #0]
    226e:	0021      	movs	r1, r4
    2270:	1c5a      	adds	r2, r3, #1
    2272:	3145      	adds	r1, #69	; 0x45
    2274:	7809      	ldrb	r1, [r1, #0]
    2276:	18a2      	adds	r2, r4, r2
    2278:	3243      	adds	r2, #67	; 0x43
    227a:	3302      	adds	r3, #2
    227c:	7011      	strb	r1, [r2, #0]
    227e:	e7c1      	b.n	2204 <_printf_common+0x48>
    2280:	0022      	movs	r2, r4
    2282:	2301      	movs	r3, #1
    2284:	321a      	adds	r2, #26
    2286:	9901      	ldr	r1, [sp, #4]
    2288:	9800      	ldr	r0, [sp, #0]
    228a:	9e08      	ldr	r6, [sp, #32]
    228c:	47b0      	blx	r6
    228e:	1c43      	adds	r3, r0, #1
    2290:	d0e6      	beq.n	2260 <_printf_common+0xa4>
    2292:	3701      	adds	r7, #1
    2294:	e7d1      	b.n	223a <_printf_common+0x7e>
	...

00002298 <_printf_i>:
    2298:	b5f0      	push	{r4, r5, r6, r7, lr}
    229a:	b08b      	sub	sp, #44	; 0x2c
    229c:	9206      	str	r2, [sp, #24]
    229e:	000a      	movs	r2, r1
    22a0:	3243      	adds	r2, #67	; 0x43
    22a2:	9307      	str	r3, [sp, #28]
    22a4:	9005      	str	r0, [sp, #20]
    22a6:	9204      	str	r2, [sp, #16]
    22a8:	7e0a      	ldrb	r2, [r1, #24]
    22aa:	000c      	movs	r4, r1
    22ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
    22ae:	2a6e      	cmp	r2, #110	; 0x6e
    22b0:	d100      	bne.n	22b4 <_printf_i+0x1c>
    22b2:	e08f      	b.n	23d4 <_printf_i+0x13c>
    22b4:	d817      	bhi.n	22e6 <_printf_i+0x4e>
    22b6:	2a63      	cmp	r2, #99	; 0x63
    22b8:	d02c      	beq.n	2314 <_printf_i+0x7c>
    22ba:	d808      	bhi.n	22ce <_printf_i+0x36>
    22bc:	2a00      	cmp	r2, #0
    22be:	d100      	bne.n	22c2 <_printf_i+0x2a>
    22c0:	e099      	b.n	23f6 <_printf_i+0x15e>
    22c2:	2a58      	cmp	r2, #88	; 0x58
    22c4:	d054      	beq.n	2370 <_printf_i+0xd8>
    22c6:	0026      	movs	r6, r4
    22c8:	3642      	adds	r6, #66	; 0x42
    22ca:	7032      	strb	r2, [r6, #0]
    22cc:	e029      	b.n	2322 <_printf_i+0x8a>
    22ce:	2a64      	cmp	r2, #100	; 0x64
    22d0:	d001      	beq.n	22d6 <_printf_i+0x3e>
    22d2:	2a69      	cmp	r2, #105	; 0x69
    22d4:	d1f7      	bne.n	22c6 <_printf_i+0x2e>
    22d6:	6821      	ldr	r1, [r4, #0]
    22d8:	681a      	ldr	r2, [r3, #0]
    22da:	0608      	lsls	r0, r1, #24
    22dc:	d523      	bpl.n	2326 <_printf_i+0x8e>
    22de:	1d11      	adds	r1, r2, #4
    22e0:	6019      	str	r1, [r3, #0]
    22e2:	6815      	ldr	r5, [r2, #0]
    22e4:	e025      	b.n	2332 <_printf_i+0x9a>
    22e6:	2a73      	cmp	r2, #115	; 0x73
    22e8:	d100      	bne.n	22ec <_printf_i+0x54>
    22ea:	e088      	b.n	23fe <_printf_i+0x166>
    22ec:	d808      	bhi.n	2300 <_printf_i+0x68>
    22ee:	2a6f      	cmp	r2, #111	; 0x6f
    22f0:	d029      	beq.n	2346 <_printf_i+0xae>
    22f2:	2a70      	cmp	r2, #112	; 0x70
    22f4:	d1e7      	bne.n	22c6 <_printf_i+0x2e>
    22f6:	2220      	movs	r2, #32
    22f8:	6809      	ldr	r1, [r1, #0]
    22fa:	430a      	orrs	r2, r1
    22fc:	6022      	str	r2, [r4, #0]
    22fe:	e003      	b.n	2308 <_printf_i+0x70>
    2300:	2a75      	cmp	r2, #117	; 0x75
    2302:	d020      	beq.n	2346 <_printf_i+0xae>
    2304:	2a78      	cmp	r2, #120	; 0x78
    2306:	d1de      	bne.n	22c6 <_printf_i+0x2e>
    2308:	0022      	movs	r2, r4
    230a:	2178      	movs	r1, #120	; 0x78
    230c:	3245      	adds	r2, #69	; 0x45
    230e:	7011      	strb	r1, [r2, #0]
    2310:	4a6c      	ldr	r2, [pc, #432]	; (24c4 <_printf_i+0x22c>)
    2312:	e030      	b.n	2376 <_printf_i+0xde>
    2314:	000e      	movs	r6, r1
    2316:	681a      	ldr	r2, [r3, #0]
    2318:	3642      	adds	r6, #66	; 0x42
    231a:	1d11      	adds	r1, r2, #4
    231c:	6019      	str	r1, [r3, #0]
    231e:	6813      	ldr	r3, [r2, #0]
    2320:	7033      	strb	r3, [r6, #0]
    2322:	2301      	movs	r3, #1
    2324:	e079      	b.n	241a <_printf_i+0x182>
    2326:	0649      	lsls	r1, r1, #25
    2328:	d5d9      	bpl.n	22de <_printf_i+0x46>
    232a:	1d11      	adds	r1, r2, #4
    232c:	6019      	str	r1, [r3, #0]
    232e:	2300      	movs	r3, #0
    2330:	5ed5      	ldrsh	r5, [r2, r3]
    2332:	2d00      	cmp	r5, #0
    2334:	da03      	bge.n	233e <_printf_i+0xa6>
    2336:	232d      	movs	r3, #45	; 0x2d
    2338:	9a04      	ldr	r2, [sp, #16]
    233a:	426d      	negs	r5, r5
    233c:	7013      	strb	r3, [r2, #0]
    233e:	4b62      	ldr	r3, [pc, #392]	; (24c8 <_printf_i+0x230>)
    2340:	270a      	movs	r7, #10
    2342:	9303      	str	r3, [sp, #12]
    2344:	e02f      	b.n	23a6 <_printf_i+0x10e>
    2346:	6820      	ldr	r0, [r4, #0]
    2348:	6819      	ldr	r1, [r3, #0]
    234a:	0605      	lsls	r5, r0, #24
    234c:	d503      	bpl.n	2356 <_printf_i+0xbe>
    234e:	1d08      	adds	r0, r1, #4
    2350:	6018      	str	r0, [r3, #0]
    2352:	680d      	ldr	r5, [r1, #0]
    2354:	e005      	b.n	2362 <_printf_i+0xca>
    2356:	0640      	lsls	r0, r0, #25
    2358:	d5f9      	bpl.n	234e <_printf_i+0xb6>
    235a:	680d      	ldr	r5, [r1, #0]
    235c:	1d08      	adds	r0, r1, #4
    235e:	6018      	str	r0, [r3, #0]
    2360:	b2ad      	uxth	r5, r5
    2362:	4b59      	ldr	r3, [pc, #356]	; (24c8 <_printf_i+0x230>)
    2364:	2708      	movs	r7, #8
    2366:	9303      	str	r3, [sp, #12]
    2368:	2a6f      	cmp	r2, #111	; 0x6f
    236a:	d018      	beq.n	239e <_printf_i+0x106>
    236c:	270a      	movs	r7, #10
    236e:	e016      	b.n	239e <_printf_i+0x106>
    2370:	3145      	adds	r1, #69	; 0x45
    2372:	700a      	strb	r2, [r1, #0]
    2374:	4a54      	ldr	r2, [pc, #336]	; (24c8 <_printf_i+0x230>)
    2376:	9203      	str	r2, [sp, #12]
    2378:	681a      	ldr	r2, [r3, #0]
    237a:	6821      	ldr	r1, [r4, #0]
    237c:	1d10      	adds	r0, r2, #4
    237e:	6018      	str	r0, [r3, #0]
    2380:	6815      	ldr	r5, [r2, #0]
    2382:	0608      	lsls	r0, r1, #24
    2384:	d522      	bpl.n	23cc <_printf_i+0x134>
    2386:	07cb      	lsls	r3, r1, #31
    2388:	d502      	bpl.n	2390 <_printf_i+0xf8>
    238a:	2320      	movs	r3, #32
    238c:	4319      	orrs	r1, r3
    238e:	6021      	str	r1, [r4, #0]
    2390:	2710      	movs	r7, #16
    2392:	2d00      	cmp	r5, #0
    2394:	d103      	bne.n	239e <_printf_i+0x106>
    2396:	2320      	movs	r3, #32
    2398:	6822      	ldr	r2, [r4, #0]
    239a:	439a      	bics	r2, r3
    239c:	6022      	str	r2, [r4, #0]
    239e:	0023      	movs	r3, r4
    23a0:	2200      	movs	r2, #0
    23a2:	3343      	adds	r3, #67	; 0x43
    23a4:	701a      	strb	r2, [r3, #0]
    23a6:	6863      	ldr	r3, [r4, #4]
    23a8:	60a3      	str	r3, [r4, #8]
    23aa:	2b00      	cmp	r3, #0
    23ac:	db5c      	blt.n	2468 <_printf_i+0x1d0>
    23ae:	2204      	movs	r2, #4
    23b0:	6821      	ldr	r1, [r4, #0]
    23b2:	4391      	bics	r1, r2
    23b4:	6021      	str	r1, [r4, #0]
    23b6:	2d00      	cmp	r5, #0
    23b8:	d158      	bne.n	246c <_printf_i+0x1d4>
    23ba:	9e04      	ldr	r6, [sp, #16]
    23bc:	2b00      	cmp	r3, #0
    23be:	d064      	beq.n	248a <_printf_i+0x1f2>
    23c0:	0026      	movs	r6, r4
    23c2:	9b03      	ldr	r3, [sp, #12]
    23c4:	3642      	adds	r6, #66	; 0x42
    23c6:	781b      	ldrb	r3, [r3, #0]
    23c8:	7033      	strb	r3, [r6, #0]
    23ca:	e05e      	b.n	248a <_printf_i+0x1f2>
    23cc:	0648      	lsls	r0, r1, #25
    23ce:	d5da      	bpl.n	2386 <_printf_i+0xee>
    23d0:	b2ad      	uxth	r5, r5
    23d2:	e7d8      	b.n	2386 <_printf_i+0xee>
    23d4:	6809      	ldr	r1, [r1, #0]
    23d6:	681a      	ldr	r2, [r3, #0]
    23d8:	0608      	lsls	r0, r1, #24
    23da:	d505      	bpl.n	23e8 <_printf_i+0x150>
    23dc:	1d11      	adds	r1, r2, #4
    23de:	6019      	str	r1, [r3, #0]
    23e0:	6813      	ldr	r3, [r2, #0]
    23e2:	6962      	ldr	r2, [r4, #20]
    23e4:	601a      	str	r2, [r3, #0]
    23e6:	e006      	b.n	23f6 <_printf_i+0x15e>
    23e8:	0649      	lsls	r1, r1, #25
    23ea:	d5f7      	bpl.n	23dc <_printf_i+0x144>
    23ec:	1d11      	adds	r1, r2, #4
    23ee:	6019      	str	r1, [r3, #0]
    23f0:	6813      	ldr	r3, [r2, #0]
    23f2:	8aa2      	ldrh	r2, [r4, #20]
    23f4:	801a      	strh	r2, [r3, #0]
    23f6:	2300      	movs	r3, #0
    23f8:	9e04      	ldr	r6, [sp, #16]
    23fa:	6123      	str	r3, [r4, #16]
    23fc:	e054      	b.n	24a8 <_printf_i+0x210>
    23fe:	681a      	ldr	r2, [r3, #0]
    2400:	1d11      	adds	r1, r2, #4
    2402:	6019      	str	r1, [r3, #0]
    2404:	6816      	ldr	r6, [r2, #0]
    2406:	2100      	movs	r1, #0
    2408:	6862      	ldr	r2, [r4, #4]
    240a:	0030      	movs	r0, r6
    240c:	f000 f9e6 	bl	27dc <memchr>
    2410:	2800      	cmp	r0, #0
    2412:	d001      	beq.n	2418 <_printf_i+0x180>
    2414:	1b80      	subs	r0, r0, r6
    2416:	6060      	str	r0, [r4, #4]
    2418:	6863      	ldr	r3, [r4, #4]
    241a:	6123      	str	r3, [r4, #16]
    241c:	2300      	movs	r3, #0
    241e:	9a04      	ldr	r2, [sp, #16]
    2420:	7013      	strb	r3, [r2, #0]
    2422:	e041      	b.n	24a8 <_printf_i+0x210>
    2424:	6923      	ldr	r3, [r4, #16]
    2426:	0032      	movs	r2, r6
    2428:	9906      	ldr	r1, [sp, #24]
    242a:	9805      	ldr	r0, [sp, #20]
    242c:	9d07      	ldr	r5, [sp, #28]
    242e:	47a8      	blx	r5
    2430:	1c43      	adds	r3, r0, #1
    2432:	d043      	beq.n	24bc <_printf_i+0x224>
    2434:	6823      	ldr	r3, [r4, #0]
    2436:	2500      	movs	r5, #0
    2438:	079b      	lsls	r3, r3, #30
    243a:	d40f      	bmi.n	245c <_printf_i+0x1c4>
    243c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    243e:	68e0      	ldr	r0, [r4, #12]
    2440:	4298      	cmp	r0, r3
    2442:	da3d      	bge.n	24c0 <_printf_i+0x228>
    2444:	0018      	movs	r0, r3
    2446:	e03b      	b.n	24c0 <_printf_i+0x228>
    2448:	0022      	movs	r2, r4
    244a:	2301      	movs	r3, #1
    244c:	3219      	adds	r2, #25
    244e:	9906      	ldr	r1, [sp, #24]
    2450:	9805      	ldr	r0, [sp, #20]
    2452:	9e07      	ldr	r6, [sp, #28]
    2454:	47b0      	blx	r6
    2456:	1c43      	adds	r3, r0, #1
    2458:	d030      	beq.n	24bc <_printf_i+0x224>
    245a:	3501      	adds	r5, #1
    245c:	68e3      	ldr	r3, [r4, #12]
    245e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2460:	1a9b      	subs	r3, r3, r2
    2462:	429d      	cmp	r5, r3
    2464:	dbf0      	blt.n	2448 <_printf_i+0x1b0>
    2466:	e7e9      	b.n	243c <_printf_i+0x1a4>
    2468:	2d00      	cmp	r5, #0
    246a:	d0a9      	beq.n	23c0 <_printf_i+0x128>
    246c:	9e04      	ldr	r6, [sp, #16]
    246e:	0028      	movs	r0, r5
    2470:	0039      	movs	r1, r7
    2472:	f7ff f98d 	bl	1790 <__aeabi_uidivmod>
    2476:	9b03      	ldr	r3, [sp, #12]
    2478:	3e01      	subs	r6, #1
    247a:	5c5b      	ldrb	r3, [r3, r1]
    247c:	0028      	movs	r0, r5
    247e:	7033      	strb	r3, [r6, #0]
    2480:	0039      	movs	r1, r7
    2482:	f7ff f8ff 	bl	1684 <__udivsi3>
    2486:	1e05      	subs	r5, r0, #0
    2488:	d1f1      	bne.n	246e <_printf_i+0x1d6>
    248a:	2f08      	cmp	r7, #8
    248c:	d109      	bne.n	24a2 <_printf_i+0x20a>
    248e:	6823      	ldr	r3, [r4, #0]
    2490:	07db      	lsls	r3, r3, #31
    2492:	d506      	bpl.n	24a2 <_printf_i+0x20a>
    2494:	6863      	ldr	r3, [r4, #4]
    2496:	6922      	ldr	r2, [r4, #16]
    2498:	4293      	cmp	r3, r2
    249a:	dc02      	bgt.n	24a2 <_printf_i+0x20a>
    249c:	2330      	movs	r3, #48	; 0x30
    249e:	3e01      	subs	r6, #1
    24a0:	7033      	strb	r3, [r6, #0]
    24a2:	9b04      	ldr	r3, [sp, #16]
    24a4:	1b9b      	subs	r3, r3, r6
    24a6:	6123      	str	r3, [r4, #16]
    24a8:	9b07      	ldr	r3, [sp, #28]
    24aa:	aa09      	add	r2, sp, #36	; 0x24
    24ac:	9300      	str	r3, [sp, #0]
    24ae:	0021      	movs	r1, r4
    24b0:	9b06      	ldr	r3, [sp, #24]
    24b2:	9805      	ldr	r0, [sp, #20]
    24b4:	f7ff fe82 	bl	21bc <_printf_common>
    24b8:	1c43      	adds	r3, r0, #1
    24ba:	d1b3      	bne.n	2424 <_printf_i+0x18c>
    24bc:	2001      	movs	r0, #1
    24be:	4240      	negs	r0, r0
    24c0:	b00b      	add	sp, #44	; 0x2c
    24c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24c4:	00002946 	.word	0x00002946
    24c8:	00002935 	.word	0x00002935

000024cc <_sbrk_r>:
    24cc:	2300      	movs	r3, #0
    24ce:	b570      	push	{r4, r5, r6, lr}
    24d0:	4c06      	ldr	r4, [pc, #24]	; (24ec <_sbrk_r+0x20>)
    24d2:	0005      	movs	r5, r0
    24d4:	0008      	movs	r0, r1
    24d6:	6023      	str	r3, [r4, #0]
    24d8:	f7ff f880 	bl	15dc <_sbrk>
    24dc:	1c43      	adds	r3, r0, #1
    24de:	d103      	bne.n	24e8 <_sbrk_r+0x1c>
    24e0:	6823      	ldr	r3, [r4, #0]
    24e2:	2b00      	cmp	r3, #0
    24e4:	d000      	beq.n	24e8 <_sbrk_r+0x1c>
    24e6:	602b      	str	r3, [r5, #0]
    24e8:	bd70      	pop	{r4, r5, r6, pc}
    24ea:	46c0      	nop			; (mov r8, r8)
    24ec:	20000140 	.word	0x20000140

000024f0 <__sread>:
    24f0:	b570      	push	{r4, r5, r6, lr}
    24f2:	000c      	movs	r4, r1
    24f4:	250e      	movs	r5, #14
    24f6:	5f49      	ldrsh	r1, [r1, r5]
    24f8:	f000 f97e 	bl	27f8 <_read_r>
    24fc:	2800      	cmp	r0, #0
    24fe:	db03      	blt.n	2508 <__sread+0x18>
    2500:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2502:	181b      	adds	r3, r3, r0
    2504:	6563      	str	r3, [r4, #84]	; 0x54
    2506:	bd70      	pop	{r4, r5, r6, pc}
    2508:	89a3      	ldrh	r3, [r4, #12]
    250a:	4a02      	ldr	r2, [pc, #8]	; (2514 <__sread+0x24>)
    250c:	4013      	ands	r3, r2
    250e:	81a3      	strh	r3, [r4, #12]
    2510:	e7f9      	b.n	2506 <__sread+0x16>
    2512:	46c0      	nop			; (mov r8, r8)
    2514:	ffffefff 	.word	0xffffefff

00002518 <__swrite>:
    2518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    251a:	001f      	movs	r7, r3
    251c:	898b      	ldrh	r3, [r1, #12]
    251e:	0005      	movs	r5, r0
    2520:	000c      	movs	r4, r1
    2522:	0016      	movs	r6, r2
    2524:	05db      	lsls	r3, r3, #23
    2526:	d505      	bpl.n	2534 <__swrite+0x1c>
    2528:	230e      	movs	r3, #14
    252a:	5ec9      	ldrsh	r1, [r1, r3]
    252c:	2200      	movs	r2, #0
    252e:	2302      	movs	r3, #2
    2530:	f000 f940 	bl	27b4 <_lseek_r>
    2534:	89a3      	ldrh	r3, [r4, #12]
    2536:	4a05      	ldr	r2, [pc, #20]	; (254c <__swrite+0x34>)
    2538:	0028      	movs	r0, r5
    253a:	4013      	ands	r3, r2
    253c:	81a3      	strh	r3, [r4, #12]
    253e:	0032      	movs	r2, r6
    2540:	230e      	movs	r3, #14
    2542:	5ee1      	ldrsh	r1, [r4, r3]
    2544:	003b      	movs	r3, r7
    2546:	f000 f875 	bl	2634 <_write_r>
    254a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    254c:	ffffefff 	.word	0xffffefff

00002550 <__sseek>:
    2550:	b570      	push	{r4, r5, r6, lr}
    2552:	000c      	movs	r4, r1
    2554:	250e      	movs	r5, #14
    2556:	5f49      	ldrsh	r1, [r1, r5]
    2558:	f000 f92c 	bl	27b4 <_lseek_r>
    255c:	89a3      	ldrh	r3, [r4, #12]
    255e:	1c42      	adds	r2, r0, #1
    2560:	d103      	bne.n	256a <__sseek+0x1a>
    2562:	4a05      	ldr	r2, [pc, #20]	; (2578 <__sseek+0x28>)
    2564:	4013      	ands	r3, r2
    2566:	81a3      	strh	r3, [r4, #12]
    2568:	bd70      	pop	{r4, r5, r6, pc}
    256a:	2280      	movs	r2, #128	; 0x80
    256c:	0152      	lsls	r2, r2, #5
    256e:	4313      	orrs	r3, r2
    2570:	81a3      	strh	r3, [r4, #12]
    2572:	6560      	str	r0, [r4, #84]	; 0x54
    2574:	e7f8      	b.n	2568 <__sseek+0x18>
    2576:	46c0      	nop			; (mov r8, r8)
    2578:	ffffefff 	.word	0xffffefff

0000257c <__sclose>:
    257c:	b510      	push	{r4, lr}
    257e:	230e      	movs	r3, #14
    2580:	5ec9      	ldrsh	r1, [r1, r3]
    2582:	f000 f8e1 	bl	2748 <_close_r>
    2586:	bd10      	pop	{r4, pc}

00002588 <__swbuf_r>:
    2588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    258a:	0005      	movs	r5, r0
    258c:	000e      	movs	r6, r1
    258e:	0014      	movs	r4, r2
    2590:	2800      	cmp	r0, #0
    2592:	d004      	beq.n	259e <__swbuf_r+0x16>
    2594:	6983      	ldr	r3, [r0, #24]
    2596:	2b00      	cmp	r3, #0
    2598:	d101      	bne.n	259e <__swbuf_r+0x16>
    259a:	f7ff fb1d 	bl	1bd8 <__sinit>
    259e:	4b22      	ldr	r3, [pc, #136]	; (2628 <__swbuf_r+0xa0>)
    25a0:	429c      	cmp	r4, r3
    25a2:	d12d      	bne.n	2600 <__swbuf_r+0x78>
    25a4:	686c      	ldr	r4, [r5, #4]
    25a6:	69a3      	ldr	r3, [r4, #24]
    25a8:	60a3      	str	r3, [r4, #8]
    25aa:	89a3      	ldrh	r3, [r4, #12]
    25ac:	071b      	lsls	r3, r3, #28
    25ae:	d531      	bpl.n	2614 <__swbuf_r+0x8c>
    25b0:	6923      	ldr	r3, [r4, #16]
    25b2:	2b00      	cmp	r3, #0
    25b4:	d02e      	beq.n	2614 <__swbuf_r+0x8c>
    25b6:	6823      	ldr	r3, [r4, #0]
    25b8:	6922      	ldr	r2, [r4, #16]
    25ba:	b2f7      	uxtb	r7, r6
    25bc:	1a98      	subs	r0, r3, r2
    25be:	6963      	ldr	r3, [r4, #20]
    25c0:	b2f6      	uxtb	r6, r6
    25c2:	4298      	cmp	r0, r3
    25c4:	db05      	blt.n	25d2 <__swbuf_r+0x4a>
    25c6:	0021      	movs	r1, r4
    25c8:	0028      	movs	r0, r5
    25ca:	f7ff fa97 	bl	1afc <_fflush_r>
    25ce:	2800      	cmp	r0, #0
    25d0:	d126      	bne.n	2620 <__swbuf_r+0x98>
    25d2:	68a3      	ldr	r3, [r4, #8]
    25d4:	3001      	adds	r0, #1
    25d6:	3b01      	subs	r3, #1
    25d8:	60a3      	str	r3, [r4, #8]
    25da:	6823      	ldr	r3, [r4, #0]
    25dc:	1c5a      	adds	r2, r3, #1
    25de:	6022      	str	r2, [r4, #0]
    25e0:	701f      	strb	r7, [r3, #0]
    25e2:	6963      	ldr	r3, [r4, #20]
    25e4:	4298      	cmp	r0, r3
    25e6:	d004      	beq.n	25f2 <__swbuf_r+0x6a>
    25e8:	89a3      	ldrh	r3, [r4, #12]
    25ea:	07db      	lsls	r3, r3, #31
    25ec:	d51a      	bpl.n	2624 <__swbuf_r+0x9c>
    25ee:	2e0a      	cmp	r6, #10
    25f0:	d118      	bne.n	2624 <__swbuf_r+0x9c>
    25f2:	0021      	movs	r1, r4
    25f4:	0028      	movs	r0, r5
    25f6:	f7ff fa81 	bl	1afc <_fflush_r>
    25fa:	2800      	cmp	r0, #0
    25fc:	d012      	beq.n	2624 <__swbuf_r+0x9c>
    25fe:	e00f      	b.n	2620 <__swbuf_r+0x98>
    2600:	4b0a      	ldr	r3, [pc, #40]	; (262c <__swbuf_r+0xa4>)
    2602:	429c      	cmp	r4, r3
    2604:	d101      	bne.n	260a <__swbuf_r+0x82>
    2606:	68ac      	ldr	r4, [r5, #8]
    2608:	e7cd      	b.n	25a6 <__swbuf_r+0x1e>
    260a:	4b09      	ldr	r3, [pc, #36]	; (2630 <__swbuf_r+0xa8>)
    260c:	429c      	cmp	r4, r3
    260e:	d1ca      	bne.n	25a6 <__swbuf_r+0x1e>
    2610:	68ec      	ldr	r4, [r5, #12]
    2612:	e7c8      	b.n	25a6 <__swbuf_r+0x1e>
    2614:	0021      	movs	r1, r4
    2616:	0028      	movs	r0, r5
    2618:	f000 f820 	bl	265c <__swsetup_r>
    261c:	2800      	cmp	r0, #0
    261e:	d0ca      	beq.n	25b6 <__swbuf_r+0x2e>
    2620:	2601      	movs	r6, #1
    2622:	4276      	negs	r6, r6
    2624:	0030      	movs	r0, r6
    2626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2628:	000028e4 	.word	0x000028e4
    262c:	00002904 	.word	0x00002904
    2630:	000028c4 	.word	0x000028c4

00002634 <_write_r>:
    2634:	b570      	push	{r4, r5, r6, lr}
    2636:	0005      	movs	r5, r0
    2638:	0008      	movs	r0, r1
    263a:	0011      	movs	r1, r2
    263c:	2200      	movs	r2, #0
    263e:	4c06      	ldr	r4, [pc, #24]	; (2658 <_write_r+0x24>)
    2640:	6022      	str	r2, [r4, #0]
    2642:	001a      	movs	r2, r3
    2644:	f7fd ff42 	bl	4cc <_write>
    2648:	1c43      	adds	r3, r0, #1
    264a:	d103      	bne.n	2654 <_write_r+0x20>
    264c:	6823      	ldr	r3, [r4, #0]
    264e:	2b00      	cmp	r3, #0
    2650:	d000      	beq.n	2654 <_write_r+0x20>
    2652:	602b      	str	r3, [r5, #0]
    2654:	bd70      	pop	{r4, r5, r6, pc}
    2656:	46c0      	nop			; (mov r8, r8)
    2658:	20000140 	.word	0x20000140

0000265c <__swsetup_r>:
    265c:	4b36      	ldr	r3, [pc, #216]	; (2738 <__swsetup_r+0xdc>)
    265e:	b570      	push	{r4, r5, r6, lr}
    2660:	681d      	ldr	r5, [r3, #0]
    2662:	0006      	movs	r6, r0
    2664:	000c      	movs	r4, r1
    2666:	2d00      	cmp	r5, #0
    2668:	d005      	beq.n	2676 <__swsetup_r+0x1a>
    266a:	69ab      	ldr	r3, [r5, #24]
    266c:	2b00      	cmp	r3, #0
    266e:	d102      	bne.n	2676 <__swsetup_r+0x1a>
    2670:	0028      	movs	r0, r5
    2672:	f7ff fab1 	bl	1bd8 <__sinit>
    2676:	4b31      	ldr	r3, [pc, #196]	; (273c <__swsetup_r+0xe0>)
    2678:	429c      	cmp	r4, r3
    267a:	d10f      	bne.n	269c <__swsetup_r+0x40>
    267c:	686c      	ldr	r4, [r5, #4]
    267e:	230c      	movs	r3, #12
    2680:	5ee2      	ldrsh	r2, [r4, r3]
    2682:	b293      	uxth	r3, r2
    2684:	0719      	lsls	r1, r3, #28
    2686:	d42d      	bmi.n	26e4 <__swsetup_r+0x88>
    2688:	06d9      	lsls	r1, r3, #27
    268a:	d411      	bmi.n	26b0 <__swsetup_r+0x54>
    268c:	2309      	movs	r3, #9
    268e:	2001      	movs	r0, #1
    2690:	6033      	str	r3, [r6, #0]
    2692:	3337      	adds	r3, #55	; 0x37
    2694:	4313      	orrs	r3, r2
    2696:	81a3      	strh	r3, [r4, #12]
    2698:	4240      	negs	r0, r0
    269a:	bd70      	pop	{r4, r5, r6, pc}
    269c:	4b28      	ldr	r3, [pc, #160]	; (2740 <__swsetup_r+0xe4>)
    269e:	429c      	cmp	r4, r3
    26a0:	d101      	bne.n	26a6 <__swsetup_r+0x4a>
    26a2:	68ac      	ldr	r4, [r5, #8]
    26a4:	e7eb      	b.n	267e <__swsetup_r+0x22>
    26a6:	4b27      	ldr	r3, [pc, #156]	; (2744 <__swsetup_r+0xe8>)
    26a8:	429c      	cmp	r4, r3
    26aa:	d1e8      	bne.n	267e <__swsetup_r+0x22>
    26ac:	68ec      	ldr	r4, [r5, #12]
    26ae:	e7e6      	b.n	267e <__swsetup_r+0x22>
    26b0:	075b      	lsls	r3, r3, #29
    26b2:	d513      	bpl.n	26dc <__swsetup_r+0x80>
    26b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    26b6:	2900      	cmp	r1, #0
    26b8:	d008      	beq.n	26cc <__swsetup_r+0x70>
    26ba:	0023      	movs	r3, r4
    26bc:	3344      	adds	r3, #68	; 0x44
    26be:	4299      	cmp	r1, r3
    26c0:	d002      	beq.n	26c8 <__swsetup_r+0x6c>
    26c2:	0030      	movs	r0, r6
    26c4:	f7ff fb8e 	bl	1de4 <_free_r>
    26c8:	2300      	movs	r3, #0
    26ca:	6363      	str	r3, [r4, #52]	; 0x34
    26cc:	2224      	movs	r2, #36	; 0x24
    26ce:	89a3      	ldrh	r3, [r4, #12]
    26d0:	4393      	bics	r3, r2
    26d2:	81a3      	strh	r3, [r4, #12]
    26d4:	2300      	movs	r3, #0
    26d6:	6063      	str	r3, [r4, #4]
    26d8:	6923      	ldr	r3, [r4, #16]
    26da:	6023      	str	r3, [r4, #0]
    26dc:	2308      	movs	r3, #8
    26de:	89a2      	ldrh	r2, [r4, #12]
    26e0:	4313      	orrs	r3, r2
    26e2:	81a3      	strh	r3, [r4, #12]
    26e4:	6923      	ldr	r3, [r4, #16]
    26e6:	2b00      	cmp	r3, #0
    26e8:	d10b      	bne.n	2702 <__swsetup_r+0xa6>
    26ea:	21a0      	movs	r1, #160	; 0xa0
    26ec:	2280      	movs	r2, #128	; 0x80
    26ee:	89a3      	ldrh	r3, [r4, #12]
    26f0:	0089      	lsls	r1, r1, #2
    26f2:	0092      	lsls	r2, r2, #2
    26f4:	400b      	ands	r3, r1
    26f6:	4293      	cmp	r3, r2
    26f8:	d003      	beq.n	2702 <__swsetup_r+0xa6>
    26fa:	0021      	movs	r1, r4
    26fc:	0030      	movs	r0, r6
    26fe:	f7ff fb29 	bl	1d54 <__smakebuf_r>
    2702:	2301      	movs	r3, #1
    2704:	89a2      	ldrh	r2, [r4, #12]
    2706:	4013      	ands	r3, r2
    2708:	d011      	beq.n	272e <__swsetup_r+0xd2>
    270a:	2300      	movs	r3, #0
    270c:	60a3      	str	r3, [r4, #8]
    270e:	6963      	ldr	r3, [r4, #20]
    2710:	425b      	negs	r3, r3
    2712:	61a3      	str	r3, [r4, #24]
    2714:	2000      	movs	r0, #0
    2716:	6923      	ldr	r3, [r4, #16]
    2718:	4283      	cmp	r3, r0
    271a:	d1be      	bne.n	269a <__swsetup_r+0x3e>
    271c:	230c      	movs	r3, #12
    271e:	5ee2      	ldrsh	r2, [r4, r3]
    2720:	0613      	lsls	r3, r2, #24
    2722:	d5ba      	bpl.n	269a <__swsetup_r+0x3e>
    2724:	2340      	movs	r3, #64	; 0x40
    2726:	4313      	orrs	r3, r2
    2728:	81a3      	strh	r3, [r4, #12]
    272a:	3801      	subs	r0, #1
    272c:	e7b5      	b.n	269a <__swsetup_r+0x3e>
    272e:	0792      	lsls	r2, r2, #30
    2730:	d400      	bmi.n	2734 <__swsetup_r+0xd8>
    2732:	6963      	ldr	r3, [r4, #20]
    2734:	60a3      	str	r3, [r4, #8]
    2736:	e7ed      	b.n	2714 <__swsetup_r+0xb8>
    2738:	2000000c 	.word	0x2000000c
    273c:	000028e4 	.word	0x000028e4
    2740:	00002904 	.word	0x00002904
    2744:	000028c4 	.word	0x000028c4

00002748 <_close_r>:
    2748:	2300      	movs	r3, #0
    274a:	b570      	push	{r4, r5, r6, lr}
    274c:	4c06      	ldr	r4, [pc, #24]	; (2768 <_close_r+0x20>)
    274e:	0005      	movs	r5, r0
    2750:	0008      	movs	r0, r1
    2752:	6023      	str	r3, [r4, #0]
    2754:	f7fe ff54 	bl	1600 <_close>
    2758:	1c43      	adds	r3, r0, #1
    275a:	d103      	bne.n	2764 <_close_r+0x1c>
    275c:	6823      	ldr	r3, [r4, #0]
    275e:	2b00      	cmp	r3, #0
    2760:	d000      	beq.n	2764 <_close_r+0x1c>
    2762:	602b      	str	r3, [r5, #0]
    2764:	bd70      	pop	{r4, r5, r6, pc}
    2766:	46c0      	nop			; (mov r8, r8)
    2768:	20000140 	.word	0x20000140

0000276c <_fstat_r>:
    276c:	2300      	movs	r3, #0
    276e:	b570      	push	{r4, r5, r6, lr}
    2770:	4c06      	ldr	r4, [pc, #24]	; (278c <_fstat_r+0x20>)
    2772:	0005      	movs	r5, r0
    2774:	0008      	movs	r0, r1
    2776:	0011      	movs	r1, r2
    2778:	6023      	str	r3, [r4, #0]
    277a:	f7fe ff44 	bl	1606 <_fstat>
    277e:	1c43      	adds	r3, r0, #1
    2780:	d103      	bne.n	278a <_fstat_r+0x1e>
    2782:	6823      	ldr	r3, [r4, #0]
    2784:	2b00      	cmp	r3, #0
    2786:	d000      	beq.n	278a <_fstat_r+0x1e>
    2788:	602b      	str	r3, [r5, #0]
    278a:	bd70      	pop	{r4, r5, r6, pc}
    278c:	20000140 	.word	0x20000140

00002790 <_isatty_r>:
    2790:	2300      	movs	r3, #0
    2792:	b570      	push	{r4, r5, r6, lr}
    2794:	4c06      	ldr	r4, [pc, #24]	; (27b0 <_isatty_r+0x20>)
    2796:	0005      	movs	r5, r0
    2798:	0008      	movs	r0, r1
    279a:	6023      	str	r3, [r4, #0]
    279c:	f7fe ff38 	bl	1610 <_isatty>
    27a0:	1c43      	adds	r3, r0, #1
    27a2:	d103      	bne.n	27ac <_isatty_r+0x1c>
    27a4:	6823      	ldr	r3, [r4, #0]
    27a6:	2b00      	cmp	r3, #0
    27a8:	d000      	beq.n	27ac <_isatty_r+0x1c>
    27aa:	602b      	str	r3, [r5, #0]
    27ac:	bd70      	pop	{r4, r5, r6, pc}
    27ae:	46c0      	nop			; (mov r8, r8)
    27b0:	20000140 	.word	0x20000140

000027b4 <_lseek_r>:
    27b4:	b570      	push	{r4, r5, r6, lr}
    27b6:	0005      	movs	r5, r0
    27b8:	0008      	movs	r0, r1
    27ba:	0011      	movs	r1, r2
    27bc:	2200      	movs	r2, #0
    27be:	4c06      	ldr	r4, [pc, #24]	; (27d8 <_lseek_r+0x24>)
    27c0:	6022      	str	r2, [r4, #0]
    27c2:	001a      	movs	r2, r3
    27c4:	f7fe ff26 	bl	1614 <_lseek>
    27c8:	1c43      	adds	r3, r0, #1
    27ca:	d103      	bne.n	27d4 <_lseek_r+0x20>
    27cc:	6823      	ldr	r3, [r4, #0]
    27ce:	2b00      	cmp	r3, #0
    27d0:	d000      	beq.n	27d4 <_lseek_r+0x20>
    27d2:	602b      	str	r3, [r5, #0]
    27d4:	bd70      	pop	{r4, r5, r6, pc}
    27d6:	46c0      	nop			; (mov r8, r8)
    27d8:	20000140 	.word	0x20000140

000027dc <memchr>:
    27dc:	b2c9      	uxtb	r1, r1
    27de:	1882      	adds	r2, r0, r2
    27e0:	4290      	cmp	r0, r2
    27e2:	d101      	bne.n	27e8 <memchr+0xc>
    27e4:	2000      	movs	r0, #0
    27e6:	4770      	bx	lr
    27e8:	7803      	ldrb	r3, [r0, #0]
    27ea:	428b      	cmp	r3, r1
    27ec:	d0fb      	beq.n	27e6 <memchr+0xa>
    27ee:	3001      	adds	r0, #1
    27f0:	e7f6      	b.n	27e0 <memchr+0x4>

000027f2 <__malloc_lock>:
    27f2:	4770      	bx	lr

000027f4 <__malloc_unlock>:
    27f4:	4770      	bx	lr
	...

000027f8 <_read_r>:
    27f8:	b570      	push	{r4, r5, r6, lr}
    27fa:	0005      	movs	r5, r0
    27fc:	0008      	movs	r0, r1
    27fe:	0011      	movs	r1, r2
    2800:	2200      	movs	r2, #0
    2802:	4c06      	ldr	r4, [pc, #24]	; (281c <_read_r+0x24>)
    2804:	6022      	str	r2, [r4, #0]
    2806:	001a      	movs	r2, r3
    2808:	f7fd fe3e 	bl	488 <_read>
    280c:	1c43      	adds	r3, r0, #1
    280e:	d103      	bne.n	2818 <_read_r+0x20>
    2810:	6823      	ldr	r3, [r4, #0]
    2812:	2b00      	cmp	r3, #0
    2814:	d000      	beq.n	2818 <_read_r+0x20>
    2816:	602b      	str	r3, [r5, #0]
    2818:	bd70      	pop	{r4, r5, r6, pc}
    281a:	46c0      	nop			; (mov r8, r8)
    281c:	20000140 	.word	0x20000140
    2820:	42000800 	.word	0x42000800
    2824:	42000c00 	.word	0x42000c00
    2828:	42001000 	.word	0x42001000
    282c:	42001400 	.word	0x42001400
    2830:	42001800 	.word	0x42001800
    2834:	42001c00 	.word	0x42001c00
    2838:	6c6c6548 	.word	0x6c6c6548
    283c:	6f57206f 	.word	0x6f57206f
    2840:	21646c72 	.word	0x21646c72
    2844:	00000000 	.word	0x00000000

00002848 <_tcc_intflag>:
    2848:	00000001 00000002 00000004 00000008     ................
    2858:	00001000 00002000 00004000 00008000     ..... ...@......
    2868:	00010000 00020000 00040000 00080000     ................
    2878:	00000f6a 00000f66 00000f66 00000fc8     j...f...f.......
    2888:	00000fc8 00000f7e 00000f70 00000f84     ....~...p.......
    2898:	00000fb6 00001050 00001030 00001030     ....P...0...0...
    28a8:	000010bc 00001042 0000105e 00001034     ....B...^...4...
    28b8:	0000106c 000010ac                       l.......

000028c0 <_global_impure_ptr>:
    28c0:	20000010                                ... 

000028c4 <__sf_fake_stderr>:
	...

000028e4 <__sf_fake_stdin>:
	...

00002904 <__sf_fake_stdout>:
	...
    2924:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2934:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2944:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2954:	00006665                                ef..

00002958 <_init>:
    2958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    295a:	46c0      	nop			; (mov r8, r8)
    295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    295e:	bc08      	pop	{r3}
    2960:	469e      	mov	lr, r3
    2962:	4770      	bx	lr

00002964 <__init_array_start>:
    2964:	000000dd 	.word	0x000000dd

00002968 <_fini>:
    2968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    296a:	46c0      	nop			; (mov r8, r8)
    296c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    296e:	bc08      	pop	{r3}
    2970:	469e      	mov	lr, r3
    2972:	4770      	bx	lr

00002974 <__fini_array_start>:
    2974:	000000b5 	.word	0x000000b5
