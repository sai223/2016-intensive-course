
back.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bf8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00002bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000120  20000070  00002c68  00020070  2**2
                  ALLOC
  3 .stack        00002000  20000190  00002d88  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003571e  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000040f8  00000000  00000000  0005580f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005b03  00000000  00000000  00059907  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005d8  00000000  00000000  0005f40a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000006e0  00000000  00000000  0005f9e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a675  00000000  00000000  000600c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000dec9  00000000  00000000  0007a737  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00085e06  00000000  00000000  00088600  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001458  00000000  00000000  0010e408  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 21 00 20 59 1c 00 00 55 1c 00 00 55 1c 00 00     .!. Y...U...U...
	...
      2c:	55 1c 00 00 00 00 00 00 00 00 00 00 55 1c 00 00     U...........U...
      3c:	55 1c 00 00 55 1c 00 00 55 1c 00 00 55 1c 00 00     U...U...U...U...
      4c:	55 1c 00 00 55 1c 00 00 55 1c 00 00 55 1c 00 00     U...U...U...U...
      5c:	55 1c 00 00 55 1c 00 00 21 15 00 00 31 15 00 00     U...U...!...1...
      6c:	41 15 00 00 51 15 00 00 61 15 00 00 71 15 00 00     A...Q...a...q...
      7c:	85 0e 00 00 95 0e 00 00 a5 0e 00 00 55 1c 00 00     ............U...
      8c:	55 1c 00 00 55 1c 00 00 00 00 00 00 00 00 00 00     U...U...........
      9c:	55 1c 00 00 55 1c 00 00 00 00 00 00 55 1c 00 00     U...U.......U...
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00002bf8 	.word	0x00002bf8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00002bf8 	.word	0x00002bf8
     10c:	00002bf8 	.word	0x00002bf8
     110:	00000000 	.word	0x00000000

00000114 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	46de      	mov	lr, fp
     118:	4657      	mov	r7, sl
     11a:	464e      	mov	r6, r9
     11c:	4645      	mov	r5, r8
     11e:	b5e0      	push	{r5, r6, r7, lr}
     120:	b087      	sub	sp, #28
     122:	4680      	mov	r8, r0
     124:	9104      	str	r1, [sp, #16]
     126:	0016      	movs	r6, r2
     128:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     12a:	2200      	movs	r2, #0
     12c:	2300      	movs	r3, #0
     12e:	2100      	movs	r1, #0
     130:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     132:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     134:	2001      	movs	r0, #1
     136:	0021      	movs	r1, r4
     138:	9600      	str	r6, [sp, #0]
     13a:	9701      	str	r7, [sp, #4]
     13c:	465c      	mov	r4, fp
     13e:	9403      	str	r4, [sp, #12]
     140:	4644      	mov	r4, r8
     142:	9405      	str	r4, [sp, #20]
     144:	e013      	b.n	16e <long_division+0x5a>
     146:	2420      	movs	r4, #32
     148:	1a64      	subs	r4, r4, r1
     14a:	0005      	movs	r5, r0
     14c:	40e5      	lsrs	r5, r4
     14e:	46a8      	mov	r8, r5
     150:	e014      	b.n	17c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     152:	9c00      	ldr	r4, [sp, #0]
     154:	9d01      	ldr	r5, [sp, #4]
     156:	1b12      	subs	r2, r2, r4
     158:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     15a:	465c      	mov	r4, fp
     15c:	464d      	mov	r5, r9
     15e:	432c      	orrs	r4, r5
     160:	46a3      	mov	fp, r4
     162:	9c03      	ldr	r4, [sp, #12]
     164:	4645      	mov	r5, r8
     166:	432c      	orrs	r4, r5
     168:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     16a:	3901      	subs	r1, #1
     16c:	d325      	bcc.n	1ba <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     16e:	2420      	movs	r4, #32
     170:	4264      	negs	r4, r4
     172:	190c      	adds	r4, r1, r4
     174:	d4e7      	bmi.n	146 <long_division+0x32>
     176:	0005      	movs	r5, r0
     178:	40a5      	lsls	r5, r4
     17a:	46a8      	mov	r8, r5
     17c:	0004      	movs	r4, r0
     17e:	408c      	lsls	r4, r1
     180:	46a1      	mov	r9, r4
		r = r << 1;
     182:	1892      	adds	r2, r2, r2
     184:	415b      	adcs	r3, r3
     186:	0014      	movs	r4, r2
     188:	001d      	movs	r5, r3
		if (n & bit_shift) {
     18a:	9e05      	ldr	r6, [sp, #20]
     18c:	464f      	mov	r7, r9
     18e:	403e      	ands	r6, r7
     190:	46b4      	mov	ip, r6
     192:	9e04      	ldr	r6, [sp, #16]
     194:	4647      	mov	r7, r8
     196:	403e      	ands	r6, r7
     198:	46b2      	mov	sl, r6
     19a:	4666      	mov	r6, ip
     19c:	4657      	mov	r7, sl
     19e:	433e      	orrs	r6, r7
     1a0:	d003      	beq.n	1aa <long_division+0x96>
			r |= 0x01;
     1a2:	0006      	movs	r6, r0
     1a4:	4326      	orrs	r6, r4
     1a6:	0032      	movs	r2, r6
     1a8:	002b      	movs	r3, r5
		if (r >= d) {
     1aa:	9c00      	ldr	r4, [sp, #0]
     1ac:	9d01      	ldr	r5, [sp, #4]
     1ae:	429d      	cmp	r5, r3
     1b0:	d8db      	bhi.n	16a <long_division+0x56>
     1b2:	d1ce      	bne.n	152 <long_division+0x3e>
     1b4:	4294      	cmp	r4, r2
     1b6:	d8d8      	bhi.n	16a <long_division+0x56>
     1b8:	e7cb      	b.n	152 <long_division+0x3e>
     1ba:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     1bc:	4658      	mov	r0, fp
     1be:	0019      	movs	r1, r3
     1c0:	b007      	add	sp, #28
     1c2:	bc3c      	pop	{r2, r3, r4, r5}
     1c4:	4690      	mov	r8, r2
     1c6:	4699      	mov	r9, r3
     1c8:	46a2      	mov	sl, r4
     1ca:	46ab      	mov	fp, r5
     1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000001ce <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     1ce:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     1d0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1d2:	2340      	movs	r3, #64	; 0x40
     1d4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     1d6:	4281      	cmp	r1, r0
     1d8:	d202      	bcs.n	1e0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     1da:	0018      	movs	r0, r3
     1dc:	bd10      	pop	{r4, pc}
		baud_calculated++;
     1de:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     1e0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     1e2:	1c63      	adds	r3, r4, #1
     1e4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     1e6:	4288      	cmp	r0, r1
     1e8:	d9f9      	bls.n	1de <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1ea:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     1ec:	2cff      	cmp	r4, #255	; 0xff
     1ee:	d8f4      	bhi.n	1da <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     1f0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     1f2:	2300      	movs	r3, #0
     1f4:	e7f1      	b.n	1da <_sercom_get_sync_baud_val+0xc>
	...

000001f8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	b083      	sub	sp, #12
     1fc:	000f      	movs	r7, r1
     1fe:	0016      	movs	r6, r2
     200:	aa08      	add	r2, sp, #32
     202:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     204:	0004      	movs	r4, r0
     206:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     208:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     20a:	42bc      	cmp	r4, r7
     20c:	d902      	bls.n	214 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     20e:	0010      	movs	r0, r2
     210:	b003      	add	sp, #12
     212:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     214:	2b00      	cmp	r3, #0
     216:	d114      	bne.n	242 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     218:	0002      	movs	r2, r0
     21a:	0008      	movs	r0, r1
     21c:	2100      	movs	r1, #0
     21e:	4c19      	ldr	r4, [pc, #100]	; (284 <_sercom_get_async_baud_val+0x8c>)
     220:	47a0      	blx	r4
     222:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     224:	003a      	movs	r2, r7
     226:	2300      	movs	r3, #0
     228:	2000      	movs	r0, #0
     22a:	4c17      	ldr	r4, [pc, #92]	; (288 <_sercom_get_async_baud_val+0x90>)
     22c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     22e:	2200      	movs	r2, #0
     230:	2301      	movs	r3, #1
     232:	1a12      	subs	r2, r2, r0
     234:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     236:	0c12      	lsrs	r2, r2, #16
     238:	041b      	lsls	r3, r3, #16
     23a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     23c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     23e:	2200      	movs	r2, #0
     240:	e7e5      	b.n	20e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     242:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     244:	2b01      	cmp	r3, #1
     246:	d1f9      	bne.n	23c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     248:	000a      	movs	r2, r1
     24a:	2300      	movs	r3, #0
     24c:	2100      	movs	r1, #0
     24e:	4c0d      	ldr	r4, [pc, #52]	; (284 <_sercom_get_async_baud_val+0x8c>)
     250:	47a0      	blx	r4
     252:	0002      	movs	r2, r0
     254:	000b      	movs	r3, r1
     256:	9200      	str	r2, [sp, #0]
     258:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     25a:	0038      	movs	r0, r7
     25c:	2100      	movs	r1, #0
     25e:	4c0a      	ldr	r4, [pc, #40]	; (288 <_sercom_get_async_baud_val+0x90>)
     260:	47a0      	blx	r4
     262:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     264:	2380      	movs	r3, #128	; 0x80
     266:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     268:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     26a:	4298      	cmp	r0, r3
     26c:	d8cf      	bhi.n	20e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     26e:	0f79      	lsrs	r1, r7, #29
     270:	00f8      	lsls	r0, r7, #3
     272:	9a00      	ldr	r2, [sp, #0]
     274:	9b01      	ldr	r3, [sp, #4]
     276:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     278:	00ea      	lsls	r2, r5, #3
     27a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     27c:	b2d2      	uxtb	r2, r2
     27e:	0352      	lsls	r2, r2, #13
     280:	432a      	orrs	r2, r5
     282:	e7db      	b.n	23c <_sercom_get_async_baud_val+0x44>
     284:	00001f3d 	.word	0x00001f3d
     288:	00000115 	.word	0x00000115

0000028c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     28c:	b510      	push	{r4, lr}
     28e:	b082      	sub	sp, #8
     290:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     292:	4b0e      	ldr	r3, [pc, #56]	; (2cc <sercom_set_gclk_generator+0x40>)
     294:	781b      	ldrb	r3, [r3, #0]
     296:	2b00      	cmp	r3, #0
     298:	d007      	beq.n	2aa <sercom_set_gclk_generator+0x1e>
     29a:	2900      	cmp	r1, #0
     29c:	d105      	bne.n	2aa <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     29e:	4b0b      	ldr	r3, [pc, #44]	; (2cc <sercom_set_gclk_generator+0x40>)
     2a0:	785b      	ldrb	r3, [r3, #1]
     2a2:	4283      	cmp	r3, r0
     2a4:	d010      	beq.n	2c8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     2a6:	201d      	movs	r0, #29
     2a8:	e00c      	b.n	2c4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     2aa:	a901      	add	r1, sp, #4
     2ac:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     2ae:	2013      	movs	r0, #19
     2b0:	4b07      	ldr	r3, [pc, #28]	; (2d0 <sercom_set_gclk_generator+0x44>)
     2b2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     2b4:	2013      	movs	r0, #19
     2b6:	4b07      	ldr	r3, [pc, #28]	; (2d4 <sercom_set_gclk_generator+0x48>)
     2b8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     2ba:	4b04      	ldr	r3, [pc, #16]	; (2cc <sercom_set_gclk_generator+0x40>)
     2bc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     2be:	2201      	movs	r2, #1
     2c0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     2c2:	2000      	movs	r0, #0
}
     2c4:	b002      	add	sp, #8
     2c6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     2c8:	2000      	movs	r0, #0
     2ca:	e7fb      	b.n	2c4 <sercom_set_gclk_generator+0x38>
     2cc:	2000008c 	.word	0x2000008c
     2d0:	00001afd 	.word	0x00001afd
     2d4:	00001a71 	.word	0x00001a71

000002d8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     2d8:	4b40      	ldr	r3, [pc, #256]	; (3dc <_sercom_get_default_pad+0x104>)
     2da:	4298      	cmp	r0, r3
     2dc:	d031      	beq.n	342 <_sercom_get_default_pad+0x6a>
     2de:	d90a      	bls.n	2f6 <_sercom_get_default_pad+0x1e>
     2e0:	4b3f      	ldr	r3, [pc, #252]	; (3e0 <_sercom_get_default_pad+0x108>)
     2e2:	4298      	cmp	r0, r3
     2e4:	d04d      	beq.n	382 <_sercom_get_default_pad+0xaa>
     2e6:	4b3f      	ldr	r3, [pc, #252]	; (3e4 <_sercom_get_default_pad+0x10c>)
     2e8:	4298      	cmp	r0, r3
     2ea:	d05a      	beq.n	3a2 <_sercom_get_default_pad+0xca>
     2ec:	4b3e      	ldr	r3, [pc, #248]	; (3e8 <_sercom_get_default_pad+0x110>)
     2ee:	4298      	cmp	r0, r3
     2f0:	d037      	beq.n	362 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     2f2:	2000      	movs	r0, #0
}
     2f4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     2f6:	4b3d      	ldr	r3, [pc, #244]	; (3ec <_sercom_get_default_pad+0x114>)
     2f8:	4298      	cmp	r0, r3
     2fa:	d00c      	beq.n	316 <_sercom_get_default_pad+0x3e>
     2fc:	4b3c      	ldr	r3, [pc, #240]	; (3f0 <_sercom_get_default_pad+0x118>)
     2fe:	4298      	cmp	r0, r3
     300:	d1f7      	bne.n	2f2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     302:	2901      	cmp	r1, #1
     304:	d017      	beq.n	336 <_sercom_get_default_pad+0x5e>
     306:	2900      	cmp	r1, #0
     308:	d05d      	beq.n	3c6 <_sercom_get_default_pad+0xee>
     30a:	2902      	cmp	r1, #2
     30c:	d015      	beq.n	33a <_sercom_get_default_pad+0x62>
     30e:	2903      	cmp	r1, #3
     310:	d015      	beq.n	33e <_sercom_get_default_pad+0x66>
	return 0;
     312:	2000      	movs	r0, #0
     314:	e7ee      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     316:	2901      	cmp	r1, #1
     318:	d007      	beq.n	32a <_sercom_get_default_pad+0x52>
     31a:	2900      	cmp	r1, #0
     31c:	d051      	beq.n	3c2 <_sercom_get_default_pad+0xea>
     31e:	2902      	cmp	r1, #2
     320:	d005      	beq.n	32e <_sercom_get_default_pad+0x56>
     322:	2903      	cmp	r1, #3
     324:	d005      	beq.n	332 <_sercom_get_default_pad+0x5a>
	return 0;
     326:	2000      	movs	r0, #0
     328:	e7e4      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     32a:	4832      	ldr	r0, [pc, #200]	; (3f4 <_sercom_get_default_pad+0x11c>)
     32c:	e7e2      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     32e:	4832      	ldr	r0, [pc, #200]	; (3f8 <_sercom_get_default_pad+0x120>)
     330:	e7e0      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     332:	4832      	ldr	r0, [pc, #200]	; (3fc <_sercom_get_default_pad+0x124>)
     334:	e7de      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     336:	4832      	ldr	r0, [pc, #200]	; (400 <_sercom_get_default_pad+0x128>)
     338:	e7dc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     33a:	4832      	ldr	r0, [pc, #200]	; (404 <_sercom_get_default_pad+0x12c>)
     33c:	e7da      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     33e:	4832      	ldr	r0, [pc, #200]	; (408 <_sercom_get_default_pad+0x130>)
     340:	e7d8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     342:	2901      	cmp	r1, #1
     344:	d007      	beq.n	356 <_sercom_get_default_pad+0x7e>
     346:	2900      	cmp	r1, #0
     348:	d03f      	beq.n	3ca <_sercom_get_default_pad+0xf2>
     34a:	2902      	cmp	r1, #2
     34c:	d005      	beq.n	35a <_sercom_get_default_pad+0x82>
     34e:	2903      	cmp	r1, #3
     350:	d005      	beq.n	35e <_sercom_get_default_pad+0x86>
	return 0;
     352:	2000      	movs	r0, #0
     354:	e7ce      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     356:	482d      	ldr	r0, [pc, #180]	; (40c <_sercom_get_default_pad+0x134>)
     358:	e7cc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     35a:	482d      	ldr	r0, [pc, #180]	; (410 <_sercom_get_default_pad+0x138>)
     35c:	e7ca      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     35e:	482d      	ldr	r0, [pc, #180]	; (414 <_sercom_get_default_pad+0x13c>)
     360:	e7c8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     362:	2901      	cmp	r1, #1
     364:	d007      	beq.n	376 <_sercom_get_default_pad+0x9e>
     366:	2900      	cmp	r1, #0
     368:	d031      	beq.n	3ce <_sercom_get_default_pad+0xf6>
     36a:	2902      	cmp	r1, #2
     36c:	d005      	beq.n	37a <_sercom_get_default_pad+0xa2>
     36e:	2903      	cmp	r1, #3
     370:	d005      	beq.n	37e <_sercom_get_default_pad+0xa6>
	return 0;
     372:	2000      	movs	r0, #0
     374:	e7be      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     376:	4828      	ldr	r0, [pc, #160]	; (418 <_sercom_get_default_pad+0x140>)
     378:	e7bc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     37a:	4828      	ldr	r0, [pc, #160]	; (41c <_sercom_get_default_pad+0x144>)
     37c:	e7ba      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     37e:	4828      	ldr	r0, [pc, #160]	; (420 <_sercom_get_default_pad+0x148>)
     380:	e7b8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     382:	2901      	cmp	r1, #1
     384:	d007      	beq.n	396 <_sercom_get_default_pad+0xbe>
     386:	2900      	cmp	r1, #0
     388:	d023      	beq.n	3d2 <_sercom_get_default_pad+0xfa>
     38a:	2902      	cmp	r1, #2
     38c:	d005      	beq.n	39a <_sercom_get_default_pad+0xc2>
     38e:	2903      	cmp	r1, #3
     390:	d005      	beq.n	39e <_sercom_get_default_pad+0xc6>
	return 0;
     392:	2000      	movs	r0, #0
     394:	e7ae      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     396:	4823      	ldr	r0, [pc, #140]	; (424 <_sercom_get_default_pad+0x14c>)
     398:	e7ac      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     39a:	4823      	ldr	r0, [pc, #140]	; (428 <_sercom_get_default_pad+0x150>)
     39c:	e7aa      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     39e:	4823      	ldr	r0, [pc, #140]	; (42c <_sercom_get_default_pad+0x154>)
     3a0:	e7a8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3a2:	2901      	cmp	r1, #1
     3a4:	d007      	beq.n	3b6 <_sercom_get_default_pad+0xde>
     3a6:	2900      	cmp	r1, #0
     3a8:	d015      	beq.n	3d6 <_sercom_get_default_pad+0xfe>
     3aa:	2902      	cmp	r1, #2
     3ac:	d005      	beq.n	3ba <_sercom_get_default_pad+0xe2>
     3ae:	2903      	cmp	r1, #3
     3b0:	d005      	beq.n	3be <_sercom_get_default_pad+0xe6>
	return 0;
     3b2:	2000      	movs	r0, #0
     3b4:	e79e      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3b6:	481e      	ldr	r0, [pc, #120]	; (430 <_sercom_get_default_pad+0x158>)
     3b8:	e79c      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ba:	481e      	ldr	r0, [pc, #120]	; (434 <_sercom_get_default_pad+0x15c>)
     3bc:	e79a      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3be:	481e      	ldr	r0, [pc, #120]	; (438 <_sercom_get_default_pad+0x160>)
     3c0:	e798      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3c2:	481e      	ldr	r0, [pc, #120]	; (43c <_sercom_get_default_pad+0x164>)
     3c4:	e796      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3c6:	2003      	movs	r0, #3
     3c8:	e794      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ca:	481d      	ldr	r0, [pc, #116]	; (440 <_sercom_get_default_pad+0x168>)
     3cc:	e792      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ce:	481d      	ldr	r0, [pc, #116]	; (444 <_sercom_get_default_pad+0x16c>)
     3d0:	e790      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3d2:	481d      	ldr	r0, [pc, #116]	; (448 <_sercom_get_default_pad+0x170>)
     3d4:	e78e      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3d6:	481d      	ldr	r0, [pc, #116]	; (44c <_sercom_get_default_pad+0x174>)
     3d8:	e78c      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3da:	46c0      	nop			; (mov r8, r8)
     3dc:	42001000 	.word	0x42001000
     3e0:	42001800 	.word	0x42001800
     3e4:	42001c00 	.word	0x42001c00
     3e8:	42001400 	.word	0x42001400
     3ec:	42000800 	.word	0x42000800
     3f0:	42000c00 	.word	0x42000c00
     3f4:	00050003 	.word	0x00050003
     3f8:	00060003 	.word	0x00060003
     3fc:	00070003 	.word	0x00070003
     400:	00010003 	.word	0x00010003
     404:	001e0003 	.word	0x001e0003
     408:	001f0003 	.word	0x001f0003
     40c:	000d0002 	.word	0x000d0002
     410:	000e0002 	.word	0x000e0002
     414:	000f0002 	.word	0x000f0002
     418:	00110003 	.word	0x00110003
     41c:	00120003 	.word	0x00120003
     420:	00130003 	.word	0x00130003
     424:	003f0005 	.word	0x003f0005
     428:	003e0005 	.word	0x003e0005
     42c:	00520005 	.word	0x00520005
     430:	00170003 	.word	0x00170003
     434:	00180003 	.word	0x00180003
     438:	00190003 	.word	0x00190003
     43c:	00040003 	.word	0x00040003
     440:	000c0002 	.word	0x000c0002
     444:	00100003 	.word	0x00100003
     448:	00530005 	.word	0x00530005
     44c:	00160003 	.word	0x00160003

00000450 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     450:	b530      	push	{r4, r5, lr}
     452:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     454:	4b0b      	ldr	r3, [pc, #44]	; (484 <_sercom_get_sercom_inst_index+0x34>)
     456:	466a      	mov	r2, sp
     458:	cb32      	ldmia	r3!, {r1, r4, r5}
     45a:	c232      	stmia	r2!, {r1, r4, r5}
     45c:	cb32      	ldmia	r3!, {r1, r4, r5}
     45e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     460:	9b00      	ldr	r3, [sp, #0]
     462:	4283      	cmp	r3, r0
     464:	d00b      	beq.n	47e <_sercom_get_sercom_inst_index+0x2e>
     466:	2301      	movs	r3, #1
     468:	009a      	lsls	r2, r3, #2
     46a:	4669      	mov	r1, sp
     46c:	5852      	ldr	r2, [r2, r1]
     46e:	4282      	cmp	r2, r0
     470:	d006      	beq.n	480 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     472:	3301      	adds	r3, #1
     474:	2b06      	cmp	r3, #6
     476:	d1f7      	bne.n	468 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     478:	2000      	movs	r0, #0
}
     47a:	b007      	add	sp, #28
     47c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     47e:	2300      	movs	r3, #0
			return i;
     480:	b2d8      	uxtb	r0, r3
     482:	e7fa      	b.n	47a <_sercom_get_sercom_inst_index+0x2a>
     484:	00002ab0 	.word	0x00002ab0

00000488 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     488:	b5f0      	push	{r4, r5, r6, r7, lr}
     48a:	46c6      	mov	lr, r8
     48c:	b500      	push	{lr}
     48e:	000c      	movs	r4, r1
     490:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     492:	2800      	cmp	r0, #0
     494:	d10f      	bne.n	4b6 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
     496:	2a00      	cmp	r2, #0
     498:	dd11      	ble.n	4be <_read+0x36>
     49a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     49c:	4e09      	ldr	r6, [pc, #36]	; (4c4 <_read+0x3c>)
     49e:	4d0a      	ldr	r5, [pc, #40]	; (4c8 <_read+0x40>)
     4a0:	6830      	ldr	r0, [r6, #0]
     4a2:	0021      	movs	r1, r4
     4a4:	682b      	ldr	r3, [r5, #0]
     4a6:	4798      	blx	r3
		ptr++;
     4a8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
     4aa:	42bc      	cmp	r4, r7
     4ac:	d1f8      	bne.n	4a0 <_read+0x18>
		nChars++;
	}
	return nChars;
}
     4ae:	4640      	mov	r0, r8
     4b0:	bc04      	pop	{r2}
     4b2:	4690      	mov	r8, r2
     4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
     4b6:	2301      	movs	r3, #1
     4b8:	425b      	negs	r3, r3
     4ba:	4698      	mov	r8, r3
     4bc:	e7f7      	b.n	4ae <_read+0x26>
	for (; len > 0; --len) {
     4be:	4680      	mov	r8, r0
     4c0:	e7f5      	b.n	4ae <_read+0x26>
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	200000dc 	.word	0x200000dc
     4c8:	200000d4 	.word	0x200000d4

000004cc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ce:	46c6      	mov	lr, r8
     4d0:	b500      	push	{lr}
     4d2:	000e      	movs	r6, r1
     4d4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     4d6:	3801      	subs	r0, #1
     4d8:	2802      	cmp	r0, #2
     4da:	d810      	bhi.n	4fe <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     4dc:	2a00      	cmp	r2, #0
     4de:	d011      	beq.n	504 <_write+0x38>
     4e0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     4e2:	4b0c      	ldr	r3, [pc, #48]	; (514 <_write+0x48>)
     4e4:	4698      	mov	r8, r3
     4e6:	4f0c      	ldr	r7, [pc, #48]	; (518 <_write+0x4c>)
     4e8:	4643      	mov	r3, r8
     4ea:	6818      	ldr	r0, [r3, #0]
     4ec:	5d31      	ldrb	r1, [r6, r4]
     4ee:	683b      	ldr	r3, [r7, #0]
     4f0:	4798      	blx	r3
     4f2:	2800      	cmp	r0, #0
     4f4:	db08      	blt.n	508 <_write+0x3c>
			return -1;
		}
		++nChars;
     4f6:	3401      	adds	r4, #1
	for (; len != 0; --len) {
     4f8:	42a5      	cmp	r5, r4
     4fa:	d1f5      	bne.n	4e8 <_write+0x1c>
     4fc:	e006      	b.n	50c <_write+0x40>
		return -1;
     4fe:	2401      	movs	r4, #1
     500:	4264      	negs	r4, r4
     502:	e003      	b.n	50c <_write+0x40>
	for (; len != 0; --len) {
     504:	0014      	movs	r4, r2
     506:	e001      	b.n	50c <_write+0x40>
			return -1;
     508:	2401      	movs	r4, #1
     50a:	4264      	negs	r4, r4
	}
	return nChars;
}
     50c:	0020      	movs	r0, r4
     50e:	bc04      	pop	{r2}
     510:	4690      	mov	r8, r2
     512:	bdf0      	pop	{r4, r5, r6, r7, pc}
     514:	200000dc 	.word	0x200000dc
     518:	200000d8 	.word	0x200000d8

0000051c <artist_motor_configure>:
 *  Author: credt
 */ 
#include "Motor.h"

void artist_motor_configure(struct artist_motor_module * motor_instance, uint8_t pwm_pin, uint8_t pwm_mux, 
					uint8_t pwm_channel, uint8_t pwm_output) {
     51c:	b510      	push	{r4, lr}
     51e:	ac02      	add	r4, sp, #8
     520:	7824      	ldrb	r4, [r4, #0]
	 motor_instance->pwm_pin_num	= pwm_pin;
     522:	7001      	strb	r1, [r0, #0]
	 motor_instance->pwm_mux_num	= pwm_mux;
     524:	7042      	strb	r2, [r0, #1]
	 motor_instance->pwm_val		= CONF_ARTIST_MOTOR_PWM_FORWORD; 
     526:	4a02      	ldr	r2, [pc, #8]	; (530 <artist_motor_configure+0x14>)
     528:	8042      	strh	r2, [r0, #2]
	 motor_instance->pwm_channel	= pwm_channel; 
     52a:	7103      	strb	r3, [r0, #4]
	 motor_instance->pwm_output		= pwm_output; 
     52c:	7144      	strb	r4, [r0, #5]
 }
     52e:	bd10      	pop	{r4, pc}
     530:	00002fff 	.word	0x00002fff

00000534 <artist_motor_stop>:

void artist_motor_stop(struct artist_motor_module * motor_instance) {
     534:	b510      	push	{r4, lr}
	motor_instance->pwm_val = CONF_ARTIST_MOTOR_PWM_STOP; 
     536:	2300      	movs	r3, #0
     538:	8043      	strh	r3, [r0, #2]
	tcc_set_compare_value(&(artist.tcc_instance), motor_instance->pwm_channel, CONF_ARTIST_MOTOR_PWM_STOP);
     53a:	7901      	ldrb	r1, [r0, #4]
     53c:	2200      	movs	r2, #0
     53e:	4802      	ldr	r0, [pc, #8]	; (548 <artist_motor_stop+0x14>)
     540:	4b02      	ldr	r3, [pc, #8]	; (54c <artist_motor_stop+0x18>)
     542:	4798      	blx	r3
}
     544:	bd10      	pop	{r4, pc}
     546:	46c0      	nop			; (mov r8, r8)
     548:	200000e0 	.word	0x200000e0
     54c:	00000e29 	.word	0x00000e29

00000550 <artist_motor_forward>:
void artist_motor_forward(struct artist_motor_module * motor_instance){
     550:	b510      	push	{r4, lr}
	motor_instance->pwm_val = CONF_ARTIST_MOTOR_PWM_FORWORD;
     552:	4a03      	ldr	r2, [pc, #12]	; (560 <artist_motor_forward+0x10>)
     554:	8042      	strh	r2, [r0, #2]
	tcc_set_compare_value(&(artist.tcc_instance), motor_instance->pwm_channel, CONF_ARTIST_MOTOR_PWM_FORWORD);
     556:	7901      	ldrb	r1, [r0, #4]
     558:	4802      	ldr	r0, [pc, #8]	; (564 <artist_motor_forward+0x14>)
     55a:	4b03      	ldr	r3, [pc, #12]	; (568 <artist_motor_forward+0x18>)
     55c:	4798      	blx	r3
}
     55e:	bd10      	pop	{r4, pc}
     560:	00002fff 	.word	0x00002fff
     564:	200000e0 	.word	0x200000e0
     568:	00000e29 	.word	0x00000e29

0000056c <artist_motor_backward>:
void artist_motor_backward(struct artist_motor_module * motor_instance){
     56c:	b510      	push	{r4, lr}
	motor_instance->pwm_val = CONF_ARTIST_MOTOR_PWM_FORWORD;
     56e:	4b04      	ldr	r3, [pc, #16]	; (580 <artist_motor_backward+0x14>)
     570:	8043      	strh	r3, [r0, #2]
	tcc_set_compare_value(&(artist.tcc_instance), motor_instance->pwm_channel, CONF_ARTIST_MOTOR_PWM_BACKWORD);
     572:	7901      	ldrb	r1, [r0, #4]
     574:	4a03      	ldr	r2, [pc, #12]	; (584 <artist_motor_backward+0x18>)
     576:	4804      	ldr	r0, [pc, #16]	; (588 <artist_motor_backward+0x1c>)
     578:	4b04      	ldr	r3, [pc, #16]	; (58c <artist_motor_backward+0x20>)
     57a:	4798      	blx	r3
     57c:	bd10      	pop	{r4, pc}
     57e:	46c0      	nop			; (mov r8, r8)
     580:	00002fff 	.word	0x00002fff
     584:	00000fff 	.word	0x00000fff
     588:	200000e0 	.word	0x200000e0
     58c:	00000e29 	.word	0x00000e29

00000590 <usart_write_callback>:

}
void usart_write_callback(struct usart_module *const usart_module)
{
	//port_pin_toggle_output_level(LED_0_PIN);
}
     590:	4770      	bx	lr
	...

00000594 <usart_read_callback>:
{
     594:	b570      	push	{r4, r5, r6, lr}
     596:	0004      	movs	r4, r0
	switch  (rx_buffer[0])	{
     598:	4b11      	ldr	r3, [pc, #68]	; (5e0 <usart_read_callback+0x4c>)
     59a:	781b      	ldrb	r3, [r3, #0]
     59c:	b2db      	uxtb	r3, r3
     59e:	2b62      	cmp	r3, #98	; 0x62
     5a0:	d010      	beq.n	5c4 <usart_read_callback+0x30>
     5a2:	2b63      	cmp	r3, #99	; 0x63
     5a4:	d015      	beq.n	5d2 <usart_read_callback+0x3e>
     5a6:	2b61      	cmp	r3, #97	; 0x61
     5a8:	d005      	beq.n	5b6 <usart_read_callback+0x22>
	usart_read_buffer_job( usart_instance,
     5aa:	2205      	movs	r2, #5
     5ac:	490c      	ldr	r1, [pc, #48]	; (5e0 <usart_read_callback+0x4c>)
     5ae:	0020      	movs	r0, r4
     5b0:	4b0c      	ldr	r3, [pc, #48]	; (5e4 <usart_read_callback+0x50>)
     5b2:	4798      	blx	r3
}
     5b4:	bd70      	pop	{r4, r5, r6, pc}
		artist_motor_forward(&(artist.motor_instance_1));
     5b6:	4d0c      	ldr	r5, [pc, #48]	; (5e8 <usart_read_callback+0x54>)
     5b8:	0028      	movs	r0, r5
     5ba:	4e0c      	ldr	r6, [pc, #48]	; (5ec <usart_read_callback+0x58>)
     5bc:	47b0      	blx	r6
		artist_motor_forward(&(artist.motor_insntace_2));
     5be:	1da8      	adds	r0, r5, #6
     5c0:	47b0      	blx	r6
		break; 
     5c2:	e7f2      	b.n	5aa <usart_read_callback+0x16>
		artist_motor_stop(&(artist.motor_instance_1));
     5c4:	4d08      	ldr	r5, [pc, #32]	; (5e8 <usart_read_callback+0x54>)
     5c6:	0028      	movs	r0, r5
     5c8:	4e09      	ldr	r6, [pc, #36]	; (5f0 <usart_read_callback+0x5c>)
     5ca:	47b0      	blx	r6
		artist_motor_stop(&(artist.motor_insntace_2));
     5cc:	1da8      	adds	r0, r5, #6
     5ce:	47b0      	blx	r6
		break;
     5d0:	e7eb      	b.n	5aa <usart_read_callback+0x16>
		artist_motor_backward(&(artist.motor_instance_1));
     5d2:	4d05      	ldr	r5, [pc, #20]	; (5e8 <usart_read_callback+0x54>)
     5d4:	0028      	movs	r0, r5
     5d6:	4e07      	ldr	r6, [pc, #28]	; (5f4 <usart_read_callback+0x60>)
     5d8:	47b0      	blx	r6
		artist_motor_backward(&(artist.motor_insntace_2));
     5da:	1da8      	adds	r0, r5, #6
     5dc:	47b0      	blx	r6
		break; 
     5de:	e7e4      	b.n	5aa <usart_read_callback+0x16>
     5e0:	20000160 	.word	0x20000160
     5e4:	000012fd 	.word	0x000012fd
     5e8:	20000154 	.word	0x20000154
     5ec:	00000551 	.word	0x00000551
     5f0:	00000535 	.word	0x00000535
     5f4:	0000056d 	.word	0x0000056d

000005f8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     5f8:	b570      	push	{r4, r5, r6, lr}
     5fa:	b082      	sub	sp, #8
     5fc:	0005      	movs	r5, r0
     5fe:	000e      	movs	r6, r1
	uint16_t temp = 0;
     600:	2200      	movs	r2, #0
     602:	466b      	mov	r3, sp
     604:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     606:	4c06      	ldr	r4, [pc, #24]	; (620 <usart_serial_getchar+0x28>)
     608:	466b      	mov	r3, sp
     60a:	1d99      	adds	r1, r3, #6
     60c:	0028      	movs	r0, r5
     60e:	47a0      	blx	r4
     610:	2800      	cmp	r0, #0
     612:	d1f9      	bne.n	608 <usart_serial_getchar+0x10>

	*c = temp;
     614:	466b      	mov	r3, sp
     616:	3306      	adds	r3, #6
     618:	881b      	ldrh	r3, [r3, #0]
     61a:	7033      	strb	r3, [r6, #0]
}
     61c:	b002      	add	sp, #8
     61e:	bd70      	pop	{r4, r5, r6, pc}
     620:	00001225 	.word	0x00001225

00000624 <usart_serial_putchar>:
{
     624:	b570      	push	{r4, r5, r6, lr}
     626:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     628:	b28c      	uxth	r4, r1
     62a:	4e03      	ldr	r6, [pc, #12]	; (638 <usart_serial_putchar+0x14>)
     62c:	0021      	movs	r1, r4
     62e:	0028      	movs	r0, r5
     630:	47b0      	blx	r6
     632:	2800      	cmp	r0, #0
     634:	d1fa      	bne.n	62c <usart_serial_putchar+0x8>
}
     636:	bd70      	pop	{r4, r5, r6, pc}
     638:	000011f9 	.word	0x000011f9

0000063c <configure_usart_callbacks>:


void configure_usart_callbacks(struct usart_module * usart_instance)
{
     63c:	b570      	push	{r4, r5, r6, lr}
     63e:	0004      	movs	r4, r0
	//! [setup_register_callbacks]
	usart_register_callback(usart_instance,
     640:	2200      	movs	r2, #0
     642:	4906      	ldr	r1, [pc, #24]	; (65c <configure_usart_callbacks+0x20>)
     644:	4d06      	ldr	r5, [pc, #24]	; (660 <configure_usart_callbacks+0x24>)
     646:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	
	usart_register_callback(usart_instance,
     648:	2201      	movs	r2, #1
     64a:	4906      	ldr	r1, [pc, #24]	; (664 <configure_usart_callbacks+0x28>)
     64c:	0020      	movs	r0, r4
     64e:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     650:	2231      	movs	r2, #49	; 0x31
     652:	5ca3      	ldrb	r3, [r4, r2]
     654:	2103      	movs	r1, #3
     656:	430b      	orrs	r3, r1
     658:	54a3      	strb	r3, [r4, r2]

	//! [setup_enable_callbacks]
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
	//! [setup_enable_callbacks]
}
     65a:	bd70      	pop	{r4, r5, r6, pc}
     65c:	00000591 	.word	0x00000591
     660:	000012e5 	.word	0x000012e5
     664:	00000595 	.word	0x00000595

00000668 <artist_usart_configure>:

void artist_usart_configure(struct usart_module * usart_instance) {
     668:	b570      	push	{r4, r5, r6, lr}
     66a:	b090      	sub	sp, #64	; 0x40
     66c:	0004      	movs	r4, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     66e:	2380      	movs	r3, #128	; 0x80
     670:	05db      	lsls	r3, r3, #23
     672:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     674:	2300      	movs	r3, #0
     676:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     678:	22ff      	movs	r2, #255	; 0xff
     67a:	4669      	mov	r1, sp
     67c:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     67e:	2200      	movs	r2, #0
     680:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     682:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
     684:	2196      	movs	r1, #150	; 0x96
     686:	0189      	lsls	r1, r1, #6
     688:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
     68a:	2101      	movs	r1, #1
     68c:	2024      	movs	r0, #36	; 0x24
     68e:	466d      	mov	r5, sp
     690:	5429      	strb	r1, [r5, r0]
	config->transmitter_enable = true;
     692:	3001      	adds	r0, #1
     694:	5429      	strb	r1, [r5, r0]
	config->clock_polarity_inverted = false;
     696:	3125      	adds	r1, #37	; 0x25
     698:	546b      	strb	r3, [r5, r1]
	config->use_external_clock = false;
     69a:	3101      	adds	r1, #1
     69c:	546b      	strb	r3, [r5, r1]
	config->ext_clock_freq   = 0;
     69e:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     6a0:	3105      	adds	r1, #5
     6a2:	546b      	strb	r3, [r5, r1]
	config->generator_source = GCLK_GENERATOR_0;
     6a4:	3101      	adds	r1, #1
     6a6:	546b      	strb	r3, [r5, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     6a8:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     6aa:	822b      	strh	r3, [r5, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     6ac:	76eb      	strb	r3, [r5, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     6ae:	762a      	strb	r2, [r5, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     6b0:	772a      	strb	r2, [r5, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     6b2:	766a      	strb	r2, [r5, #25]
	config->receive_pulse_length                    = 19;
     6b4:	2313      	movs	r3, #19
     6b6:	76ab      	strb	r3, [r5, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     6b8:	776a      	strb	r2, [r5, #29]
	struct usart_config config;
	usart_get_config_defaults(&config);
	config.baudrate = CONF_ARTIST_BAUDRATE;
	config.mux_setting	= EDBG_CDC_SERCOM_MUX_SETTING;
     6ba:	2380      	movs	r3, #128	; 0x80
     6bc:	035b      	lsls	r3, r3, #13
     6be:	9303      	str	r3, [sp, #12]
	config.pinmux_pad0	= EDBG_CDC_SERCOM_PINMUX_PAD0;
     6c0:	4b1e      	ldr	r3, [pc, #120]	; (73c <artist_usart_configure+0xd4>)
     6c2:	930c      	str	r3, [sp, #48]	; 0x30
	config.pinmux_pad1	= EDBG_CDC_SERCOM_PINMUX_PAD1;
     6c4:	4b1e      	ldr	r3, [pc, #120]	; (740 <artist_usart_configure+0xd8>)
     6c6:	930d      	str	r3, [sp, #52]	; 0x34
	config.pinmux_pad2	= EDBG_CDC_SERCOM_PINMUX_PAD2;
     6c8:	2301      	movs	r3, #1
     6ca:	425b      	negs	r3, r3
     6cc:	930e      	str	r3, [sp, #56]	; 0x38
	config.pinmux_pad3	= EDBG_CDC_SERCOM_PINMUX_PAD3;
     6ce:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(usart_instance, EDBG_CDC_MODULE, &config) != STATUS_OK);
     6d0:	4e1c      	ldr	r6, [pc, #112]	; (744 <artist_usart_configure+0xdc>)
     6d2:	4d1d      	ldr	r5, [pc, #116]	; (748 <artist_usart_configure+0xe0>)
     6d4:	466a      	mov	r2, sp
     6d6:	0031      	movs	r1, r6
     6d8:	0020      	movs	r0, r4
     6da:	47a8      	blx	r5
     6dc:	2800      	cmp	r0, #0
     6de:	d1f9      	bne.n	6d4 <artist_usart_configure+0x6c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     6e0:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     6e2:	0028      	movs	r0, r5
     6e4:	4b19      	ldr	r3, [pc, #100]	; (74c <artist_usart_configure+0xe4>)
     6e6:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     6e8:	231f      	movs	r3, #31
     6ea:	4018      	ands	r0, r3
     6ec:	3b1e      	subs	r3, #30
     6ee:	4083      	lsls	r3, r0
     6f0:	4a17      	ldr	r2, [pc, #92]	; (750 <artist_usart_configure+0xe8>)
     6f2:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     6f4:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     6f6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     6f8:	2b00      	cmp	r3, #0
     6fa:	d1fc      	bne.n	6f6 <artist_usart_configure+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     6fc:	682b      	ldr	r3, [r5, #0]
     6fe:	2202      	movs	r2, #2
     700:	4313      	orrs	r3, r2
     702:	602b      	str	r3, [r5, #0]
	
	usart_enable(usart_instance);
	configure_usart_callbacks(usart_instance);
     704:	0020      	movs	r0, r4
     706:	4b13      	ldr	r3, [pc, #76]	; (754 <artist_usart_configure+0xec>)
     708:	4798      	blx	r3
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     70a:	4b13      	ldr	r3, [pc, #76]	; (758 <artist_usart_configure+0xf0>)
     70c:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     70e:	4a13      	ldr	r2, [pc, #76]	; (75c <artist_usart_configure+0xf4>)
     710:	4b13      	ldr	r3, [pc, #76]	; (760 <artist_usart_configure+0xf8>)
     712:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     714:	4a13      	ldr	r2, [pc, #76]	; (764 <artist_usart_configure+0xfc>)
     716:	4b14      	ldr	r3, [pc, #80]	; (768 <artist_usart_configure+0x100>)
     718:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     71a:	466a      	mov	r2, sp
     71c:	4909      	ldr	r1, [pc, #36]	; (744 <artist_usart_configure+0xdc>)
     71e:	0020      	movs	r0, r4
     720:	4b09      	ldr	r3, [pc, #36]	; (748 <artist_usart_configure+0xe0>)
     722:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     724:	4d11      	ldr	r5, [pc, #68]	; (76c <artist_usart_configure+0x104>)
     726:	682b      	ldr	r3, [r5, #0]
     728:	6898      	ldr	r0, [r3, #8]
     72a:	2100      	movs	r1, #0
     72c:	4c10      	ldr	r4, [pc, #64]	; (770 <artist_usart_configure+0x108>)
     72e:	47a0      	blx	r4
	setbuf(stdin, NULL);
     730:	682b      	ldr	r3, [r5, #0]
     732:	6858      	ldr	r0, [r3, #4]
     734:	2100      	movs	r1, #0
     736:	47a0      	blx	r4
	
	stdio_serial_init(usart_instance, EDBG_CDC_MODULE, &config);
}
     738:	b010      	add	sp, #64	; 0x40
     73a:	bd70      	pop	{r4, r5, r6, pc}
     73c:	00040003 	.word	0x00040003
     740:	00050003 	.word	0x00050003
     744:	42000800 	.word	0x42000800
     748:	00000eb5 	.word	0x00000eb5
     74c:	000014f1 	.word	0x000014f1
     750:	e000e100 	.word	0xe000e100
     754:	0000063d 	.word	0x0000063d
     758:	200000dc 	.word	0x200000dc
     75c:	00000625 	.word	0x00000625
     760:	200000d8 	.word	0x200000d8
     764:	000005f9 	.word	0x000005f9
     768:	200000d4 	.word	0x200000d4
     76c:	2000000c 	.word	0x2000000c
     770:	000020bd 	.word	0x000020bd

00000774 <artist_motor_pwm_configure>:


void artist_motor_pwm_configure(struct Artist * const artist){
     774:	b570      	push	{r4, r5, r6, lr}
     776:	b0aa      	sub	sp, #168	; 0xa8
     778:	0005      	movs	r5, r0
	
	struct tcc_config config; 
	tcc_get_config_defaults(&config, TCC0);
     77a:	4e27      	ldr	r6, [pc, #156]	; (818 <artist_motor_pwm_configure+0xa4>)
     77c:	ac01      	add	r4, sp, #4
     77e:	0031      	movs	r1, r6
     780:	0020      	movs	r0, r4
     782:	4b26      	ldr	r3, [pc, #152]	; (81c <artist_motor_pwm_configure+0xa8>)
     784:	4798      	blx	r3

	config.counter.clock_source											= GCLK_GENERATOR_0;
     786:	2300      	movs	r3, #0
     788:	72a3      	strb	r3, [r4, #10]
	config.counter.period												= 0xFFFF; //CLOCK 's period. when up is occur. it's about 65535
     78a:	4b25      	ldr	r3, [pc, #148]	; (820 <artist_motor_pwm_configure+0xac>)
     78c:	6063      	str	r3, [r4, #4]
	config.counter.clock_prescaler										= 1; // this time we do not divide
     78e:	2201      	movs	r2, #1
     790:	72e2      	strb	r2, [r4, #11]
	config.compare.wave_generation										= TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM; // compare
     792:	2302      	movs	r3, #2
     794:	7623      	strb	r3, [r4, #24]
	
	
	config.compare.match[artist->motor_instance_1.pwm_channel]				= artist->motor_instance_1.pwm_val;
     796:	3376      	adds	r3, #118	; 0x76
     798:	5ceb      	ldrb	r3, [r5, r3]
     79a:	3306      	adds	r3, #6
     79c:	009b      	lsls	r3, r3, #2
     79e:	18e3      	adds	r3, r4, r3
     7a0:	2176      	movs	r1, #118	; 0x76
     7a2:	5a69      	ldrh	r1, [r5, r1]
     7a4:	6059      	str	r1, [r3, #4]
	config.pins.enable_wave_out_pin[artist->motor_instance_1.pwm_output]	= true;
     7a6:	2379      	movs	r3, #121	; 0x79
     7a8:	5ceb      	ldrb	r3, [r5, r3]
     7aa:	18e1      	adds	r1, r4, r3
     7ac:	3198      	adds	r1, #152	; 0x98
     7ae:	700a      	strb	r2, [r1, #0]
	config.pins.wave_out_pin[artist->motor_instance_1.pwm_output]			= artist->motor_instance_1.pwm_pin_num;
     7b0:	0019      	movs	r1, r3
     7b2:	3116      	adds	r1, #22
     7b4:	0089      	lsls	r1, r1, #2
     7b6:	2074      	movs	r0, #116	; 0x74
     7b8:	5c28      	ldrb	r0, [r5, r0]
     7ba:	5108      	str	r0, [r1, r4]
	config.pins.wave_out_pin_mux[artist->motor_instance_1.pwm_output]		= artist->motor_instance_1.pwm_mux_num; 
     7bc:	331e      	adds	r3, #30
     7be:	009b      	lsls	r3, r3, #2
     7c0:	2175      	movs	r1, #117	; 0x75
     7c2:	5c69      	ldrb	r1, [r5, r1]
     7c4:	5119      	str	r1, [r3, r4]
	
	config.compare.match[artist->motor_insntace_2.pwm_channel]				= artist->motor_insntace_2.pwm_val;
     7c6:	237e      	movs	r3, #126	; 0x7e
     7c8:	5ceb      	ldrb	r3, [r5, r3]
     7ca:	3306      	adds	r3, #6
     7cc:	009b      	lsls	r3, r3, #2
     7ce:	18e3      	adds	r3, r4, r3
     7d0:	217c      	movs	r1, #124	; 0x7c
     7d2:	5a69      	ldrh	r1, [r5, r1]
     7d4:	6059      	str	r1, [r3, #4]
	config.pins.enable_wave_out_pin[artist->motor_insntace_2.pwm_output]		= true;
     7d6:	237f      	movs	r3, #127	; 0x7f
     7d8:	5ceb      	ldrb	r3, [r5, r3]
     7da:	18e1      	adds	r1, r4, r3
     7dc:	3198      	adds	r1, #152	; 0x98
     7de:	700a      	strb	r2, [r1, #0]
	config.pins.wave_out_pin[artist->motor_insntace_2.pwm_output]			= artist->motor_insntace_2.pwm_pin_num;
     7e0:	001a      	movs	r2, r3
     7e2:	3216      	adds	r2, #22
     7e4:	0092      	lsls	r2, r2, #2
     7e6:	217a      	movs	r1, #122	; 0x7a
     7e8:	5c69      	ldrb	r1, [r5, r1]
     7ea:	5111      	str	r1, [r2, r4]
	config.pins.wave_out_pin_mux[artist->motor_insntace_2.pwm_output]		= artist->motor_insntace_2.pwm_mux_num; 
     7ec:	331e      	adds	r3, #30
     7ee:	009b      	lsls	r3, r3, #2
     7f0:	227b      	movs	r2, #123	; 0x7b
     7f2:	5caa      	ldrb	r2, [r5, r2]
     7f4:	511a      	str	r2, [r3, r4]

	tcc_init(&(artist->tcc_instance), TCC0, &config);
     7f6:	0022      	movs	r2, r4
     7f8:	0031      	movs	r1, r6
     7fa:	0028      	movs	r0, r5
     7fc:	4b09      	ldr	r3, [pc, #36]	; (824 <artist_motor_pwm_configure+0xb0>)
     7fe:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     800:	682a      	ldr	r2, [r5, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     802:	2102      	movs	r1, #2
     804:	6893      	ldr	r3, [r2, #8]
     806:	4219      	tst	r1, r3
     808:	d1fc      	bne.n	804 <artist_motor_pwm_configure+0x90>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     80a:	6813      	ldr	r3, [r2, #0]
     80c:	2102      	movs	r1, #2
     80e:	430b      	orrs	r3, r1
     810:	6013      	str	r3, [r2, #0]
	tcc_enable(&(artist->tcc_instance));
     812:	b02a      	add	sp, #168	; 0xa8
     814:	bd70      	pop	{r4, r5, r6, pc}
     816:	46c0      	nop			; (mov r8, r8)
     818:	42002000 	.word	0x42002000
     81c:	000008d1 	.word	0x000008d1
     820:	0000ffff 	.word	0x0000ffff
     824:	00000a1d 	.word	0x00000a1d

00000828 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
     828:	4b09      	ldr	r3, [pc, #36]	; (850 <_tcc_get_inst_index+0x28>)
     82a:	4298      	cmp	r0, r3
     82c:	d00c      	beq.n	848 <_tcc_get_inst_index+0x20>
     82e:	4b09      	ldr	r3, [pc, #36]	; (854 <_tcc_get_inst_index+0x2c>)
     830:	4298      	cmp	r0, r3
     832:	d007      	beq.n	844 <_tcc_get_inst_index+0x1c>
     834:	4a08      	ldr	r2, [pc, #32]	; (858 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     836:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
     838:	4290      	cmp	r0, r2
     83a:	d001      	beq.n	840 <_tcc_get_inst_index+0x18>
}
     83c:	0018      	movs	r0, r3
     83e:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
     840:	3302      	adds	r3, #2
     842:	e002      	b.n	84a <_tcc_get_inst_index+0x22>
     844:	2301      	movs	r3, #1
     846:	e000      	b.n	84a <_tcc_get_inst_index+0x22>
     848:	2300      	movs	r3, #0
			return i;
     84a:	b2db      	uxtb	r3, r3
     84c:	e7f6      	b.n	83c <_tcc_get_inst_index+0x14>
     84e:	46c0      	nop			; (mov r8, r8)
     850:	42002000 	.word	0x42002000
     854:	42002400 	.word	0x42002400
     858:	42002800 	.word	0x42002800

0000085c <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
     85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     85e:	000f      	movs	r7, r1
     860:	0015      	movs	r5, r2
     862:	001e      	movs	r6, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     864:	6804      	ldr	r4, [r0, #0]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
     866:	0020      	movs	r0, r4
     868:	4b16      	ldr	r3, [pc, #88]	; (8c4 <_tcc_set_compare_value+0x68>)
     86a:	4798      	blx	r3

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
     86c:	4b16      	ldr	r3, [pc, #88]	; (8c8 <_tcc_set_compare_value+0x6c>)
     86e:	5c1a      	ldrb	r2, [r3, r0]
		return STATUS_ERR_INVALID_ARG;
     870:	2317      	movs	r3, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
     872:	42ba      	cmp	r2, r7
     874:	d801      	bhi.n	87a <_tcc_set_compare_value+0x1e>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
     876:	0018      	movs	r0, r3
     878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t max_count = _tcc_maxs[module_index];
     87a:	0080      	lsls	r0, r0, #2
	if (compare > max_count) {
     87c:	4b13      	ldr	r3, [pc, #76]	; (8cc <_tcc_set_compare_value+0x70>)
     87e:	58c2      	ldr	r2, [r0, r3]
		return STATUS_ERR_INVALID_ARG;
     880:	2317      	movs	r3, #23
	if (compare > max_count) {
     882:	42aa      	cmp	r2, r5
     884:	d3f7      	bcc.n	876 <_tcc_set_compare_value+0x1a>
	if (double_buffering_enabled) {
     886:	2e00      	cmp	r6, #0
     888:	d010      	beq.n	8ac <_tcc_set_compare_value+0x50>
				(TCC_STATUS_CCBV0 << channel_index)) {
     88a:	2280      	movs	r2, #128	; 0x80
     88c:	0252      	lsls	r2, r2, #9
     88e:	40ba      	lsls	r2, r7
		while(tcc_module->STATUS.reg  &
     890:	6b23      	ldr	r3, [r4, #48]	; 0x30
     892:	421a      	tst	r2, r3
     894:	d1fc      	bne.n	890 <_tcc_set_compare_value+0x34>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
     896:	2280      	movs	r2, #128	; 0x80
     898:	0312      	lsls	r2, r2, #12
     89a:	40ba      	lsls	r2, r7
		while(tcc_module->SYNCBUSY.reg  &
     89c:	68a3      	ldr	r3, [r4, #8]
     89e:	421a      	tst	r2, r3
     8a0:	d1fc      	bne.n	89c <_tcc_set_compare_value+0x40>
		tcc_module->CCB[channel_index].reg = compare;
     8a2:	371c      	adds	r7, #28
     8a4:	00bf      	lsls	r7, r7, #2
     8a6:	513d      	str	r5, [r7, r4]
	return STATUS_OK;
     8a8:	2300      	movs	r3, #0
     8aa:	e7e4      	b.n	876 <_tcc_set_compare_value+0x1a>
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
     8ac:	2280      	movs	r2, #128	; 0x80
     8ae:	0052      	lsls	r2, r2, #1
     8b0:	40ba      	lsls	r2, r7
     8b2:	68a3      	ldr	r3, [r4, #8]
     8b4:	421a      	tst	r2, r3
     8b6:	d1fc      	bne.n	8b2 <_tcc_set_compare_value+0x56>
		tcc_module->CC[channel_index].reg = compare;
     8b8:	3710      	adds	r7, #16
     8ba:	00bf      	lsls	r7, r7, #2
     8bc:	19e4      	adds	r4, r4, r7
     8be:	6065      	str	r5, [r4, #4]
	return STATUS_OK;
     8c0:	2300      	movs	r3, #0
     8c2:	e7d8      	b.n	876 <_tcc_set_compare_value+0x1a>
     8c4:	00000829 	.word	0x00000829
     8c8:	00002ad4 	.word	0x00002ad4
     8cc:	00002adc 	.word	0x00002adc

000008d0 <tcc_get_config_defaults>:
{
     8d0:	b510      	push	{r4, lr}
     8d2:	0004      	movs	r4, r0
	uint8_t module_index = _tcc_get_inst_index(hw);
     8d4:	0008      	movs	r0, r1
     8d6:	4b4f      	ldr	r3, [pc, #316]	; (a14 <tcc_get_config_defaults+0x144>)
     8d8:	4798      	blx	r3
	config->counter.count                  = 0;
     8da:	2300      	movs	r3, #0
     8dc:	6023      	str	r3, [r4, #0]
	config->counter.period                 = _tcc_maxs[module_index];
     8de:	0080      	lsls	r0, r0, #2
     8e0:	4a4d      	ldr	r2, [pc, #308]	; (a18 <tcc_get_config_defaults+0x148>)
     8e2:	5882      	ldr	r2, [r0, r2]
     8e4:	6062      	str	r2, [r4, #4]
	config->counter.clock_source           = GCLK_GENERATOR_0;
     8e6:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
     8e8:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
     8ea:	7323      	strb	r3, [r4, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     8ec:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
     8ee:	7223      	strb	r3, [r4, #8]
	MREPEAT(TCC_NUM_CHANNELS,
     8f0:	61e3      	str	r3, [r4, #28]
     8f2:	6223      	str	r3, [r4, #32]
     8f4:	6263      	str	r3, [r4, #36]	; 0x24
     8f6:	62a3      	str	r3, [r4, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
     8f8:	7523      	strb	r3, [r4, #20]
     8fa:	7563      	strb	r3, [r4, #21]
     8fc:	75a3      	strb	r3, [r4, #22]
     8fe:	75e3      	strb	r3, [r4, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     900:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     902:	7663      	strb	r3, [r4, #25]
	MREPEAT(TCC_NUM_CHANNELS,
     904:	7423      	strb	r3, [r4, #16]
     906:	7463      	strb	r3, [r4, #17]
     908:	74a3      	strb	r3, [r4, #18]
     90a:	74e3      	strb	r3, [r4, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     90c:	222c      	movs	r2, #44	; 0x2c
     90e:	54a3      	strb	r3, [r4, r2]
     910:	3201      	adds	r2, #1
     912:	54a3      	strb	r3, [r4, r2]
     914:	3201      	adds	r2, #1
     916:	54a3      	strb	r3, [r4, r2]
     918:	3201      	adds	r2, #1
     91a:	54a3      	strb	r3, [r4, r2]
     91c:	3201      	adds	r2, #1
     91e:	54a3      	strb	r3, [r4, r2]
     920:	3201      	adds	r2, #1
     922:	54a3      	strb	r3, [r4, r2]
     924:	3201      	adds	r2, #1
     926:	54a3      	strb	r3, [r4, r2]
     928:	3201      	adds	r2, #1
     92a:	54a3      	strb	r3, [r4, r2]
     92c:	3201      	adds	r2, #1
     92e:	54a3      	strb	r3, [r4, r2]
     930:	3201      	adds	r2, #1
     932:	54a3      	strb	r3, [r4, r2]
     934:	3201      	adds	r2, #1
     936:	54a3      	strb	r3, [r4, r2]
     938:	3201      	adds	r2, #1
     93a:	54a3      	strb	r3, [r4, r2]
     93c:	3201      	adds	r2, #1
     93e:	54a3      	strb	r3, [r4, r2]
     940:	3201      	adds	r2, #1
     942:	54a3      	strb	r3, [r4, r2]
     944:	3201      	adds	r2, #1
     946:	54a3      	strb	r3, [r4, r2]
     948:	3201      	adds	r2, #1
     94a:	54a3      	strb	r3, [r4, r2]
     94c:	3201      	adds	r2, #1
     94e:	54a3      	strb	r3, [r4, r2]
     950:	3201      	adds	r2, #1
     952:	54a3      	strb	r3, [r4, r2]
     954:	3201      	adds	r2, #1
     956:	54a3      	strb	r3, [r4, r2]
     958:	3201      	adds	r2, #1
     95a:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     95c:	3201      	adds	r2, #1
     95e:	54a3      	strb	r3, [r4, r2]
     960:	3201      	adds	r2, #1
     962:	54a3      	strb	r3, [r4, r2]
     964:	3201      	adds	r2, #1
     966:	54a3      	strb	r3, [r4, r2]
     968:	3201      	adds	r2, #1
     96a:	54a3      	strb	r3, [r4, r2]
     96c:	3201      	adds	r2, #1
     96e:	54a3      	strb	r3, [r4, r2]
     970:	3201      	adds	r2, #1
     972:	54a3      	strb	r3, [r4, r2]
     974:	3201      	adds	r2, #1
     976:	54a3      	strb	r3, [r4, r2]
     978:	3201      	adds	r2, #1
     97a:	54a3      	strb	r3, [r4, r2]
     97c:	3201      	adds	r2, #1
     97e:	54a3      	strb	r3, [r4, r2]
     980:	3201      	adds	r2, #1
     982:	54a3      	strb	r3, [r4, r2]
     984:	3201      	adds	r2, #1
     986:	54a3      	strb	r3, [r4, r2]
     988:	3201      	adds	r2, #1
     98a:	54a3      	strb	r3, [r4, r2]
     98c:	3201      	adds	r2, #1
     98e:	54a3      	strb	r3, [r4, r2]
     990:	3201      	adds	r2, #1
     992:	54a3      	strb	r3, [r4, r2]
     994:	3201      	adds	r2, #1
     996:	54a3      	strb	r3, [r4, r2]
     998:	3201      	adds	r2, #1
     99a:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     99c:	3201      	adds	r2, #1
     99e:	54a3      	strb	r3, [r4, r2]
     9a0:	3201      	adds	r2, #1
     9a2:	54a3      	strb	r3, [r4, r2]
     9a4:	3201      	adds	r2, #1
     9a6:	54a3      	strb	r3, [r4, r2]
     9a8:	3201      	adds	r2, #1
     9aa:	54a3      	strb	r3, [r4, r2]
     9ac:	3201      	adds	r2, #1
     9ae:	54a3      	strb	r3, [r4, r2]
     9b0:	3201      	adds	r2, #1
     9b2:	54a3      	strb	r3, [r4, r2]
     9b4:	3201      	adds	r2, #1
     9b6:	54a3      	strb	r3, [r4, r2]
     9b8:	3201      	adds	r2, #1
     9ba:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     9bc:	3241      	adds	r2, #65	; 0x41
     9be:	54a3      	strb	r3, [r4, r2]
     9c0:	65a3      	str	r3, [r4, #88]	; 0x58
     9c2:	67a3      	str	r3, [r4, #120]	; 0x78
     9c4:	3201      	adds	r2, #1
     9c6:	54a3      	strb	r3, [r4, r2]
     9c8:	65e3      	str	r3, [r4, #92]	; 0x5c
     9ca:	67e3      	str	r3, [r4, #124]	; 0x7c
     9cc:	3201      	adds	r2, #1
     9ce:	54a3      	strb	r3, [r4, r2]
     9d0:	6623      	str	r3, [r4, #96]	; 0x60
     9d2:	3a1a      	subs	r2, #26
     9d4:	50a3      	str	r3, [r4, r2]
     9d6:	321b      	adds	r2, #27
     9d8:	54a3      	strb	r3, [r4, r2]
     9da:	6663      	str	r3, [r4, #100]	; 0x64
     9dc:	3a17      	subs	r2, #23
     9de:	50a3      	str	r3, [r4, r2]
     9e0:	3218      	adds	r2, #24
     9e2:	54a3      	strb	r3, [r4, r2]
     9e4:	66a3      	str	r3, [r4, #104]	; 0x68
     9e6:	3a14      	subs	r2, #20
     9e8:	50a3      	str	r3, [r4, r2]
     9ea:	3215      	adds	r2, #21
     9ec:	54a3      	strb	r3, [r4, r2]
     9ee:	66e3      	str	r3, [r4, #108]	; 0x6c
     9f0:	3a11      	subs	r2, #17
     9f2:	50a3      	str	r3, [r4, r2]
     9f4:	3212      	adds	r2, #18
     9f6:	54a3      	strb	r3, [r4, r2]
     9f8:	6723      	str	r3, [r4, #112]	; 0x70
     9fa:	3a0e      	subs	r2, #14
     9fc:	50a3      	str	r3, [r4, r2]
     9fe:	320f      	adds	r2, #15
     a00:	54a3      	strb	r3, [r4, r2]
     a02:	6763      	str	r3, [r4, #116]	; 0x74
     a04:	3a0b      	subs	r2, #11
     a06:	50a3      	str	r3, [r4, r2]
	config->double_buffering_enabled  = true;
     a08:	2101      	movs	r1, #1
     a0a:	320c      	adds	r2, #12
     a0c:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
     a0e:	3201      	adds	r2, #1
     a10:	54a3      	strb	r3, [r4, r2]
}
     a12:	bd10      	pop	{r4, pc}
     a14:	00000829 	.word	0x00000829
     a18:	00002adc 	.word	0x00002adc

00000a1c <tcc_init>:
{
     a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a1e:	46de      	mov	lr, fp
     a20:	4657      	mov	r7, sl
     a22:	464e      	mov	r6, r9
     a24:	4645      	mov	r5, r8
     a26:	b5e0      	push	{r5, r6, r7, lr}
     a28:	b091      	sub	sp, #68	; 0x44
     a2a:	9001      	str	r0, [sp, #4]
     a2c:	000c      	movs	r4, r1
     a2e:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
     a30:	0008      	movs	r0, r1
     a32:	4bc3      	ldr	r3, [pc, #780]	; (d40 <tcc_init+0x324>)
     a34:	4798      	blx	r3
     a36:	0003      	movs	r3, r0
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     a38:	0001      	movs	r1, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     a3a:	48c2      	ldr	r0, [pc, #776]	; (d44 <tcc_init+0x328>)
     a3c:	6a02      	ldr	r2, [r0, #32]
     a3e:	009e      	lsls	r6, r3, #2
     a40:	4fc1      	ldr	r7, [pc, #772]	; (d48 <tcc_init+0x32c>)
     a42:	59f7      	ldr	r7, [r6, r7]
     a44:	433a      	orrs	r2, r7
     a46:	6202      	str	r2, [r0, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     a48:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     a4a:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     a4c:	0792      	lsls	r2, r2, #30
     a4e:	d506      	bpl.n	a5e <tcc_init+0x42>
}
     a50:	b011      	add	sp, #68	; 0x44
     a52:	bc3c      	pop	{r2, r3, r4, r5}
     a54:	4690      	mov	r8, r2
     a56:	4699      	mov	r9, r3
     a58:	46a2      	mov	sl, r4
     a5a:	46ab      	mov	fp, r5
     a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     a5e:	6822      	ldr	r2, [r4, #0]
     a60:	2701      	movs	r7, #1
     a62:	4017      	ands	r7, r2
     a64:	d1f4      	bne.n	a50 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
     a66:	48b9      	ldr	r0, [pc, #740]	; (d4c <tcc_init+0x330>)
     a68:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
     a6a:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
     a6c:	682e      	ldr	r6, [r5, #0]
     a6e:	42b2      	cmp	r2, r6
     a70:	d3ee      	bcc.n	a50 <tcc_init+0x34>
		|| (config->counter.period > count_max)
     a72:	686e      	ldr	r6, [r5, #4]
     a74:	42b2      	cmp	r2, r6
     a76:	d3eb      	bcc.n	a50 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
     a78:	69e8      	ldr	r0, [r5, #28]
     a7a:	4282      	cmp	r2, r0
     a7c:	d200      	bcs.n	a80 <tcc_init+0x64>
     a7e:	e1b9      	b.n	df4 <tcc_init+0x3d8>
     a80:	6a28      	ldr	r0, [r5, #32]
     a82:	4282      	cmp	r2, r0
     a84:	d200      	bcs.n	a88 <tcc_init+0x6c>
     a86:	e1b7      	b.n	df8 <tcc_init+0x3dc>
     a88:	6a68      	ldr	r0, [r5, #36]	; 0x24
     a8a:	4282      	cmp	r2, r0
     a8c:	d200      	bcs.n	a90 <tcc_init+0x74>
     a8e:	e1b5      	b.n	dfc <tcc_init+0x3e0>
     a90:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     a92:	4282      	cmp	r2, r0
     a94:	d200      	bcs.n	a98 <tcc_init+0x7c>
     a96:	e1b3      	b.n	e00 <tcc_init+0x3e4>
     a98:	2298      	movs	r2, #152	; 0x98
     a9a:	4694      	mov	ip, r2
     a9c:	44ac      	add	ip, r5
     a9e:	4662      	mov	r2, ip
     aa0:	9208      	str	r2, [sp, #32]
     aa2:	2000      	movs	r0, #0
     aa4:	e003      	b.n	aae <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     aa6:	3001      	adds	r0, #1
     aa8:	3201      	adds	r2, #1
     aaa:	2808      	cmp	r0, #8
     aac:	d008      	beq.n	ac0 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
     aae:	7816      	ldrb	r6, [r2, #0]
     ab0:	2e00      	cmp	r6, #0
     ab2:	d0f8      	beq.n	aa6 <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
     ab4:	4ea6      	ldr	r6, [pc, #664]	; (d50 <tcc_init+0x334>)
     ab6:	5c76      	ldrb	r6, [r6, r1]
     ab8:	4286      	cmp	r6, r0
     aba:	dcf4      	bgt.n	aa6 <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
     abc:	2017      	movs	r0, #23
     abe:	e7c7      	b.n	a50 <tcc_init+0x34>
     ac0:	2200      	movs	r2, #0
     ac2:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     ac4:	2080      	movs	r0, #128	; 0x80
     ac6:	0440      	lsls	r0, r0, #17
     ac8:	4684      	mov	ip, r0
     aca:	e002      	b.n	ad2 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     acc:	3201      	adds	r2, #1
     ace:	2a04      	cmp	r2, #4
     ad0:	d00e      	beq.n	af0 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
     ad2:	18a8      	adds	r0, r5, r2
     ad4:	7c00      	ldrb	r0, [r0, #16]
     ad6:	2801      	cmp	r0, #1
     ad8:	d1f8      	bne.n	acc <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
     ada:	489e      	ldr	r0, [pc, #632]	; (d54 <tcc_init+0x338>)
     adc:	5c40      	ldrb	r0, [r0, r1]
     ade:	4290      	cmp	r0, r2
     ae0:	da00      	bge.n	ae4 <tcc_init+0xc8>
     ae2:	e18f      	b.n	e04 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     ae4:	4660      	mov	r0, ip
     ae6:	4090      	lsls	r0, r2
     ae8:	9e02      	ldr	r6, [sp, #8]
     aea:	4306      	orrs	r6, r0
     aec:	9602      	str	r6, [sp, #8]
     aee:	e7ed      	b.n	acc <tcc_init+0xb0>
	if (config->run_in_standby) {
     af0:	329d      	adds	r2, #157	; 0x9d
     af2:	5caa      	ldrb	r2, [r5, r2]
     af4:	2a00      	cmp	r2, #0
     af6:	d004      	beq.n	b02 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
     af8:	2280      	movs	r2, #128	; 0x80
     afa:	0112      	lsls	r2, r2, #4
     afc:	9902      	ldr	r1, [sp, #8]
     afe:	4311      	orrs	r1, r2
     b00:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
     b02:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
     b04:	1e51      	subs	r1, r2, #1
     b06:	418a      	sbcs	r2, r1
     b08:	0092      	lsls	r2, r2, #2
     b0a:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
     b0c:	7a6a      	ldrb	r2, [r5, #9]
     b0e:	2a01      	cmp	r2, #1
     b10:	d022      	beq.n	b58 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
     b12:	4a90      	ldr	r2, [pc, #576]	; (d54 <tcc_init+0x338>)
     b14:	5cd2      	ldrb	r2, [r2, r3]
     b16:	0011      	movs	r1, r2
     b18:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
     b1a:	2235      	movs	r2, #53	; 0x35
     b1c:	5caa      	ldrb	r2, [r5, r2]
     b1e:	428a      	cmp	r2, r1
     b20:	d300      	bcc.n	b24 <tcc_init+0x108>
     b22:	e179      	b.n	e18 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     b24:	212c      	movs	r1, #44	; 0x2c
     b26:	5c69      	ldrb	r1, [r5, r1]
     b28:	290f      	cmp	r1, #15
     b2a:	d900      	bls.n	b2e <tcc_init+0x112>
     b2c:	e174      	b.n	e18 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     b2e:	7b28      	ldrb	r0, [r5, #12]
     b30:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     b32:	7ae8      	ldrb	r0, [r5, #11]
     b34:	900b      	str	r0, [sp, #44]	; 0x2c
     b36:	202d      	movs	r0, #45	; 0x2d
     b38:	4682      	mov	sl, r0
     b3a:	44aa      	add	sl, r5
     b3c:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     b3e:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
     b40:	ae0e      	add	r6, sp, #56	; 0x38
     b42:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     b44:	26c0      	movs	r6, #192	; 0xc0
     b46:	0136      	lsls	r6, r6, #4
     b48:	46b1      	mov	r9, r6
     b4a:	4684      	mov	ip, r0
     b4c:	46a0      	mov	r8, r4
     b4e:	0028      	movs	r0, r5
     b50:	4655      	mov	r5, sl
     b52:	9309      	str	r3, [sp, #36]	; 0x24
     b54:	4682      	mov	sl, r0
     b56:	e035      	b.n	bc4 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
     b58:	9906      	ldr	r1, [sp, #24]
     b5a:	4311      	orrs	r1, r2
     b5c:	9106      	str	r1, [sp, #24]
     b5e:	e7d8      	b.n	b12 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     b60:	0292      	lsls	r2, r2, #10
     b62:	464f      	mov	r7, r9
     b64:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     b66:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
     b68:	7919      	ldrb	r1, [r3, #4]
     b6a:	468b      	mov	fp, r1
     b6c:	2103      	movs	r1, #3
     b6e:	465f      	mov	r7, fp
     b70:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     b72:	430a      	orrs	r2, r1
     b74:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
     b76:	795a      	ldrb	r2, [r3, #5]
     b78:	0152      	lsls	r2, r2, #5
     b7a:	2160      	movs	r1, #96	; 0x60
     b7c:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     b7e:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
     b80:	7999      	ldrb	r1, [r3, #6]
     b82:	0209      	lsls	r1, r1, #8
     b84:	26c0      	movs	r6, #192	; 0xc0
     b86:	00b6      	lsls	r6, r6, #2
     b88:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     b8a:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
     b8c:	79da      	ldrb	r2, [r3, #7]
     b8e:	0312      	lsls	r2, r2, #12
     b90:	21e0      	movs	r1, #224	; 0xe0
     b92:	01c9      	lsls	r1, r1, #7
     b94:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     b96:	4316      	orrs	r6, r2
     b98:	4334      	orrs	r4, r6
     b9a:	9a03      	ldr	r2, [sp, #12]
     b9c:	4314      	orrs	r4, r2
     b9e:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
     ba0:	4662      	mov	r2, ip
     ba2:	9907      	ldr	r1, [sp, #28]
     ba4:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     ba6:	2a04      	cmp	r2, #4
     ba8:	d02a      	beq.n	c00 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
     baa:	7c9a      	ldrb	r2, [r3, #18]
     bac:	9905      	ldr	r1, [sp, #20]
     bae:	4291      	cmp	r1, r2
     bb0:	d800      	bhi.n	bb4 <tcc_init+0x198>
     bb2:	e131      	b.n	e18 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     bb4:	7a59      	ldrb	r1, [r3, #9]
     bb6:	350a      	adds	r5, #10
     bb8:	2304      	movs	r3, #4
     bba:	469b      	mov	fp, r3
     bbc:	44dc      	add	ip, fp
     bbe:	290f      	cmp	r1, #15
     bc0:	d900      	bls.n	bc4 <tcc_init+0x1a8>
     bc2:	e129      	b.n	e18 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     bc4:	0609      	lsls	r1, r1, #24
     bc6:	23f0      	movs	r3, #240	; 0xf0
     bc8:	051b      	lsls	r3, r3, #20
     bca:	4019      	ands	r1, r3
     bcc:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     bce:	782e      	ldrb	r6, [r5, #0]
     bd0:	0436      	lsls	r6, r6, #16
     bd2:	20ff      	movs	r0, #255	; 0xff
     bd4:	0400      	lsls	r0, r0, #16
     bd6:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     bd8:	7868      	ldrb	r0, [r5, #1]
     bda:	2480      	movs	r4, #128	; 0x80
     bdc:	2800      	cmp	r0, #0
     bde:	d100      	bne.n	be2 <tcc_init+0x1c6>
     be0:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     be2:	7898      	ldrb	r0, [r3, #2]
     be4:	2708      	movs	r7, #8
     be6:	9703      	str	r7, [sp, #12]
     be8:	2800      	cmp	r0, #0
     bea:	d101      	bne.n	bf0 <tcc_init+0x1d4>
     bec:	9804      	ldr	r0, [sp, #16]
     bee:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     bf0:	78d8      	ldrb	r0, [r3, #3]
     bf2:	4683      	mov	fp, r0
     bf4:	2010      	movs	r0, #16
     bf6:	465f      	mov	r7, fp
     bf8:	2f00      	cmp	r7, #0
     bfa:	d1b1      	bne.n	b60 <tcc_init+0x144>
     bfc:	9804      	ldr	r0, [sp, #16]
     bfe:	e7af      	b.n	b60 <tcc_init+0x144>
     c00:	4644      	mov	r4, r8
     c02:	4655      	mov	r5, sl
     c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
     c06:	4a52      	ldr	r2, [pc, #328]	; (d50 <tcc_init+0x334>)
     c08:	5cd2      	ldrb	r2, [r2, r3]
     c0a:	4691      	mov	r9, r2
     c0c:	4651      	mov	r1, sl
     c0e:	3150      	adds	r1, #80	; 0x50
     c10:	4650      	mov	r0, sl
     c12:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
     c14:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     c16:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     c18:	2601      	movs	r6, #1
     c1a:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     c1c:	2602      	movs	r6, #2
     c1e:	36ff      	adds	r6, #255	; 0xff
     c20:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     c22:	2680      	movs	r6, #128	; 0x80
     c24:	0276      	lsls	r6, r6, #9
     c26:	46b0      	mov	r8, r6
     c28:	46a4      	mov	ip, r4
     c2a:	001c      	movs	r4, r3
     c2c:	464b      	mov	r3, r9
     c2e:	e00f      	b.n	c50 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
     c30:	7806      	ldrb	r6, [r0, #0]
     c32:	2e00      	cmp	r6, #0
     c34:	d007      	beq.n	c46 <tcc_init+0x22a>
			if (i >= ow_num) {
     c36:	4293      	cmp	r3, r2
     c38:	d800      	bhi.n	c3c <tcc_init+0x220>
     c3a:	e0e7      	b.n	e0c <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
     c3c:	2e02      	cmp	r6, #2
     c3e:	d014      	beq.n	c6a <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     c40:	4656      	mov	r6, sl
     c42:	4096      	lsls	r6, r2
     c44:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     c46:	3201      	adds	r2, #1
     c48:	3101      	adds	r1, #1
     c4a:	3002      	adds	r0, #2
     c4c:	2a08      	cmp	r2, #8
     c4e:	d010      	beq.n	c72 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
     c50:	780e      	ldrb	r6, [r1, #0]
     c52:	2e00      	cmp	r6, #0
     c54:	d0ec      	beq.n	c30 <tcc_init+0x214>
			if (i >= ow_num) {
     c56:	4293      	cmp	r3, r2
     c58:	d800      	bhi.n	c5c <tcc_init+0x240>
     c5a:	e0d5      	b.n	e08 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     c5c:	4646      	mov	r6, r8
     c5e:	4096      	lsls	r6, r2
     c60:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
     c62:	7806      	ldrb	r6, [r0, #0]
     c64:	2e00      	cmp	r6, #0
     c66:	d1e9      	bne.n	c3c <tcc_init+0x220>
     c68:	e7ed      	b.n	c46 <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     c6a:	465e      	mov	r6, fp
     c6c:	4096      	lsls	r6, r2
     c6e:	4337      	orrs	r7, r6
     c70:	e7e9      	b.n	c46 <tcc_init+0x22a>
     c72:	4699      	mov	r9, r3
     c74:	0023      	movs	r3, r4
     c76:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     c78:	7e6a      	ldrb	r2, [r5, #25]
     c7a:	0112      	lsls	r2, r2, #4
     c7c:	2130      	movs	r1, #48	; 0x30
     c7e:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
     c80:	7e28      	ldrb	r0, [r5, #24]
     c82:	2207      	movs	r2, #7
     c84:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     c86:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     c88:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
     c8a:	2080      	movs	r0, #128	; 0x80
     c8c:	0240      	lsls	r0, r0, #9
     c8e:	000e      	movs	r6, r1
     c90:	e002      	b.n	c98 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     c92:	3201      	adds	r2, #1
     c94:	2a04      	cmp	r2, #4
     c96:	d00b      	beq.n	cb0 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
     c98:	18a9      	adds	r1, r5, r2
     c9a:	7d09      	ldrb	r1, [r1, #20]
     c9c:	2900      	cmp	r1, #0
     c9e:	d0f8      	beq.n	c92 <tcc_init+0x276>
			if (n >= cc_num) {
     ca0:	9905      	ldr	r1, [sp, #20]
     ca2:	4291      	cmp	r1, r2
     ca4:	dc00      	bgt.n	ca8 <tcc_init+0x28c>
     ca6:	e0b3      	b.n	e10 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
     ca8:	0001      	movs	r1, r0
     caa:	4091      	lsls	r1, r2
     cac:	430e      	orrs	r6, r1
     cae:	e7f0      	b.n	c92 <tcc_init+0x276>
     cb0:	46b2      	mov	sl, r6
     cb2:	9801      	ldr	r0, [sp, #4]
     cb4:	0002      	movs	r2, r0
     cb6:	3204      	adds	r2, #4
     cb8:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
     cba:	2100      	movs	r1, #0
     cbc:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     cbe:	4282      	cmp	r2, r0
     cc0:	d1fc      	bne.n	cbc <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
     cc2:	2200      	movs	r2, #0
     cc4:	9801      	ldr	r0, [sp, #4]
     cc6:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
     cc8:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
     cca:	0099      	lsls	r1, r3, #2
     ccc:	4a22      	ldr	r2, [pc, #136]	; (d58 <tcc_init+0x33c>)
     cce:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
     cd0:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     cd2:	22a0      	movs	r2, #160	; 0xa0
     cd4:	5ca9      	ldrb	r1, [r5, r2]
     cd6:	3a64      	subs	r2, #100	; 0x64
     cd8:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
     cda:	a90d      	add	r1, sp, #52	; 0x34
     cdc:	7aaa      	ldrb	r2, [r5, #10]
     cde:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
     ce0:	4a1e      	ldr	r2, [pc, #120]	; (d5c <tcc_init+0x340>)
     ce2:	5cd6      	ldrb	r6, [r2, r3]
     ce4:	0030      	movs	r0, r6
     ce6:	4b1e      	ldr	r3, [pc, #120]	; (d60 <tcc_init+0x344>)
     ce8:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
     cea:	0030      	movs	r0, r6
     cec:	4b1d      	ldr	r3, [pc, #116]	; (d64 <tcc_init+0x348>)
     cee:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     cf0:	464b      	mov	r3, r9
     cf2:	2b00      	cmp	r3, #0
     cf4:	dd3c      	ble.n	d70 <tcc_init+0x354>
     cf6:	002e      	movs	r6, r5
     cf8:	3658      	adds	r6, #88	; 0x58
     cfa:	3398      	adds	r3, #152	; 0x98
     cfc:	4698      	mov	r8, r3
     cfe:	44a8      	add	r8, r5
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     d00:	2301      	movs	r3, #1
     d02:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
     d04:	46ab      	mov	fp, r5
     d06:	4645      	mov	r5, r8
     d08:	46a0      	mov	r8, r4
     d0a:	9c08      	ldr	r4, [sp, #32]
     d0c:	e003      	b.n	d16 <tcc_init+0x2fa>
     d0e:	3401      	adds	r4, #1
     d10:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     d12:	42ac      	cmp	r4, r5
     d14:	d02a      	beq.n	d6c <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
     d16:	7823      	ldrb	r3, [r4, #0]
     d18:	2b00      	cmp	r3, #0
     d1a:	d0f8      	beq.n	d0e <tcc_init+0x2f2>
     d1c:	ab0c      	add	r3, sp, #48	; 0x30
     d1e:	464a      	mov	r2, r9
     d20:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     d22:	2300      	movs	r3, #0
     d24:	aa0c      	add	r2, sp, #48	; 0x30
     d26:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
     d28:	0013      	movs	r3, r2
     d2a:	2220      	movs	r2, #32
     d2c:	18b2      	adds	r2, r6, r2
     d2e:	7812      	ldrb	r2, [r2, #0]
     d30:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     d32:	464a      	mov	r2, r9
     d34:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
     d36:	7830      	ldrb	r0, [r6, #0]
     d38:	0019      	movs	r1, r3
     d3a:	4b0b      	ldr	r3, [pc, #44]	; (d68 <tcc_init+0x34c>)
     d3c:	4798      	blx	r3
     d3e:	e7e6      	b.n	d0e <tcc_init+0x2f2>
     d40:	00000829 	.word	0x00000829
     d44:	40000400 	.word	0x40000400
     d48:	00002ac8 	.word	0x00002ac8
     d4c:	00002adc 	.word	0x00002adc
     d50:	00002ae8 	.word	0x00002ae8
     d54:	00002ad4 	.word	0x00002ad4
     d58:	20000168 	.word	0x20000168
     d5c:	00002ad8 	.word	0x00002ad8
     d60:	00001afd 	.word	0x00001afd
     d64:	00001a71 	.word	0x00001a71
     d68:	00001bf5 	.word	0x00001bf5
     d6c:	4644      	mov	r4, r8
     d6e:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     d72:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     d74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     d76:	0212      	lsls	r2, r2, #8
     d78:	4313      	orrs	r3, r2
     d7a:	9a02      	ldr	r2, [sp, #8]
     d7c:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
     d7e:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     d80:	2204      	movs	r2, #4
     d82:	68a3      	ldr	r3, [r4, #8]
     d84:	421a      	tst	r2, r3
     d86:	d1fc      	bne.n	d82 <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
     d88:	23ff      	movs	r3, #255	; 0xff
     d8a:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     d8c:	2204      	movs	r2, #4
     d8e:	68a3      	ldr	r3, [r4, #8]
     d90:	421a      	tst	r2, r3
     d92:	d1fc      	bne.n	d8e <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
     d94:	466b      	mov	r3, sp
     d96:	7e1b      	ldrb	r3, [r3, #24]
     d98:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
     d9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     d9c:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
     d9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     da0:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
     da2:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
     da4:	4a1d      	ldr	r2, [pc, #116]	; (e1c <tcc_init+0x400>)
     da6:	68a3      	ldr	r3, [r4, #8]
     da8:	4213      	tst	r3, r2
     daa:	d1fc      	bne.n	da6 <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
     dac:	4653      	mov	r3, sl
     dae:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
     db0:	2210      	movs	r2, #16
     db2:	68a3      	ldr	r3, [r4, #8]
     db4:	421a      	tst	r2, r3
     db6:	d1fc      	bne.n	db2 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
     db8:	682b      	ldr	r3, [r5, #0]
     dba:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
     dbc:	4a18      	ldr	r2, [pc, #96]	; (e20 <tcc_init+0x404>)
     dbe:	68a3      	ldr	r3, [r4, #8]
     dc0:	4213      	tst	r3, r2
     dc2:	d1fc      	bne.n	dbe <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
     dc4:	686b      	ldr	r3, [r5, #4]
     dc6:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     dc8:	9805      	ldr	r0, [sp, #20]
     dca:	2800      	cmp	r0, #0
     dcc:	dd22      	ble.n	e14 <tcc_init+0x3f8>
     dce:	351c      	adds	r5, #28
     dd0:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
     dd2:	4e14      	ldr	r6, [pc, #80]	; (e24 <tcc_init+0x408>)
     dd4:	0032      	movs	r2, r6
     dd6:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
     dd8:	68a3      	ldr	r3, [r4, #8]
     dda:	421a      	tst	r2, r3
     ddc:	d1fc      	bne.n	dd8 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
     dde:	cd04      	ldmia	r5!, {r2}
     de0:	000b      	movs	r3, r1
     de2:	3310      	adds	r3, #16
     de4:	009b      	lsls	r3, r3, #2
     de6:	18e3      	adds	r3, r4, r3
     de8:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     dea:	3101      	adds	r1, #1
     dec:	4288      	cmp	r0, r1
     dee:	dcf1      	bgt.n	dd4 <tcc_init+0x3b8>
	return STATUS_OK;
     df0:	2000      	movs	r0, #0
     df2:	e62d      	b.n	a50 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
     df4:	2017      	movs	r0, #23
     df6:	e62b      	b.n	a50 <tcc_init+0x34>
     df8:	2017      	movs	r0, #23
     dfa:	e629      	b.n	a50 <tcc_init+0x34>
     dfc:	2017      	movs	r0, #23
     dfe:	e627      	b.n	a50 <tcc_init+0x34>
     e00:	2017      	movs	r0, #23
     e02:	e625      	b.n	a50 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     e04:	2017      	movs	r0, #23
     e06:	e623      	b.n	a50 <tcc_init+0x34>
			if (i >= ow_num) {
     e08:	2017      	movs	r0, #23
     e0a:	e621      	b.n	a50 <tcc_init+0x34>
			if (i >= ow_num) {
     e0c:	2017      	movs	r0, #23
     e0e:	e61f      	b.n	a50 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     e10:	2017      	movs	r0, #23
     e12:	e61d      	b.n	a50 <tcc_init+0x34>
	return STATUS_OK;
     e14:	2000      	movs	r0, #0
     e16:	e61b      	b.n	a50 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     e18:	2017      	movs	r0, #23
     e1a:	e619      	b.n	a50 <tcc_init+0x34>
     e1c:	00020040 	.word	0x00020040
     e20:	00040080 	.word	0x00040080
     e24:	00080100 	.word	0x00080100

00000e28 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
     e28:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
     e2a:	233c      	movs	r3, #60	; 0x3c
     e2c:	5cc3      	ldrb	r3, [r0, r3]
     e2e:	4c01      	ldr	r4, [pc, #4]	; (e34 <tcc_set_compare_value+0xc>)
     e30:	47a0      	blx	r4
			module_inst->double_buffering_enabled);
}
     e32:	bd10      	pop	{r4, pc}
     e34:	0000085d 	.word	0x0000085d

00000e38 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     e38:	b5f0      	push	{r4, r5, r6, r7, lr}
     e3a:	46c6      	mov	lr, r8
     e3c:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     e3e:	0080      	lsls	r0, r0, #2
     e40:	4b0e      	ldr	r3, [pc, #56]	; (e7c <_tcc_interrupt_handler+0x44>)
     e42:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     e44:	683b      	ldr	r3, [r7, #0]
     e46:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     e4c:	4013      	ands	r3, r2
     e4e:	401e      	ands	r6, r3
     e50:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     e52:	4b0b      	ldr	r3, [pc, #44]	; (e80 <_tcc_interrupt_handler+0x48>)
     e54:	4698      	mov	r8, r3
     e56:	e002      	b.n	e5e <_tcc_interrupt_handler+0x26>
     e58:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     e5a:	2c30      	cmp	r4, #48	; 0x30
     e5c:	d00a      	beq.n	e74 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     e5e:	4643      	mov	r3, r8
     e60:	58e5      	ldr	r5, [r4, r3]
     e62:	4235      	tst	r5, r6
     e64:	d0f8      	beq.n	e58 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     e66:	193b      	adds	r3, r7, r4
     e68:	685b      	ldr	r3, [r3, #4]
     e6a:	0038      	movs	r0, r7
     e6c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     e6e:	683b      	ldr	r3, [r7, #0]
     e70:	62dd      	str	r5, [r3, #44]	; 0x2c
     e72:	e7f1      	b.n	e58 <_tcc_interrupt_handler+0x20>
		}
	}
}
     e74:	bc04      	pop	{r2}
     e76:	4690      	mov	r8, r2
     e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e7a:	46c0      	nop			; (mov r8, r8)
     e7c:	20000168 	.word	0x20000168
     e80:	00002aec 	.word	0x00002aec

00000e84 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     e84:	b510      	push	{r4, lr}
     e86:	2000      	movs	r0, #0
     e88:	4b01      	ldr	r3, [pc, #4]	; (e90 <TCC0_Handler+0xc>)
     e8a:	4798      	blx	r3
     e8c:	bd10      	pop	{r4, pc}
     e8e:	46c0      	nop			; (mov r8, r8)
     e90:	00000e39 	.word	0x00000e39

00000e94 <TCC1_Handler>:
     e94:	b510      	push	{r4, lr}
     e96:	2001      	movs	r0, #1
     e98:	4b01      	ldr	r3, [pc, #4]	; (ea0 <TCC1_Handler+0xc>)
     e9a:	4798      	blx	r3
     e9c:	bd10      	pop	{r4, pc}
     e9e:	46c0      	nop			; (mov r8, r8)
     ea0:	00000e39 	.word	0x00000e39

00000ea4 <TCC2_Handler>:
     ea4:	b510      	push	{r4, lr}
     ea6:	2002      	movs	r0, #2
     ea8:	4b01      	ldr	r3, [pc, #4]	; (eb0 <TCC2_Handler+0xc>)
     eaa:	4798      	blx	r3
     eac:	bd10      	pop	{r4, pc}
     eae:	46c0      	nop			; (mov r8, r8)
     eb0:	00000e39 	.word	0x00000e39

00000eb4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
     eb6:	46de      	mov	lr, fp
     eb8:	4657      	mov	r7, sl
     eba:	464e      	mov	r6, r9
     ebc:	4645      	mov	r5, r8
     ebe:	b5e0      	push	{r5, r6, r7, lr}
     ec0:	b091      	sub	sp, #68	; 0x44
     ec2:	0005      	movs	r5, r0
     ec4:	000c      	movs	r4, r1
     ec6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     ec8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     eca:	0008      	movs	r0, r1
     ecc:	4bbc      	ldr	r3, [pc, #752]	; (11c0 <usart_init+0x30c>)
     ece:	4798      	blx	r3
     ed0:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     ed2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     ed4:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     ed6:	07db      	lsls	r3, r3, #31
     ed8:	d506      	bpl.n	ee8 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     eda:	b011      	add	sp, #68	; 0x44
     edc:	bc3c      	pop	{r2, r3, r4, r5}
     ede:	4690      	mov	r8, r2
     ee0:	4699      	mov	r9, r3
     ee2:	46a2      	mov	sl, r4
     ee4:	46ab      	mov	fp, r5
     ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     ee8:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     eea:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     eec:	079b      	lsls	r3, r3, #30
     eee:	d4f4      	bmi.n	eda <usart_init+0x26>
     ef0:	49b4      	ldr	r1, [pc, #720]	; (11c4 <usart_init+0x310>)
     ef2:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     ef4:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     ef6:	2301      	movs	r3, #1
     ef8:	40bb      	lsls	r3, r7
     efa:	4303      	orrs	r3, r0
     efc:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     efe:	a90f      	add	r1, sp, #60	; 0x3c
     f00:	272d      	movs	r7, #45	; 0x2d
     f02:	5df3      	ldrb	r3, [r6, r7]
     f04:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f06:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     f08:	b2d3      	uxtb	r3, r2
     f0a:	9302      	str	r3, [sp, #8]
     f0c:	0018      	movs	r0, r3
     f0e:	4bae      	ldr	r3, [pc, #696]	; (11c8 <usart_init+0x314>)
     f10:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     f12:	9802      	ldr	r0, [sp, #8]
     f14:	4bad      	ldr	r3, [pc, #692]	; (11cc <usart_init+0x318>)
     f16:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     f18:	5df0      	ldrb	r0, [r6, r7]
     f1a:	2100      	movs	r1, #0
     f1c:	4bac      	ldr	r3, [pc, #688]	; (11d0 <usart_init+0x31c>)
     f1e:	4798      	blx	r3
	module->character_size = config->character_size;
     f20:	7af3      	ldrb	r3, [r6, #11]
     f22:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     f24:	2324      	movs	r3, #36	; 0x24
     f26:	5cf3      	ldrb	r3, [r6, r3]
     f28:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     f2a:	2325      	movs	r3, #37	; 0x25
     f2c:	5cf3      	ldrb	r3, [r6, r3]
     f2e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     f30:	7ef3      	ldrb	r3, [r6, #27]
     f32:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     f34:	7f33      	ldrb	r3, [r6, #28]
     f36:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     f38:	682b      	ldr	r3, [r5, #0]
     f3a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f3c:	0018      	movs	r0, r3
     f3e:	4ba0      	ldr	r3, [pc, #640]	; (11c0 <usart_init+0x30c>)
     f40:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f42:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     f44:	2200      	movs	r2, #0
     f46:	230e      	movs	r3, #14
     f48:	a906      	add	r1, sp, #24
     f4a:	468c      	mov	ip, r1
     f4c:	4463      	add	r3, ip
     f4e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     f50:	8a32      	ldrh	r2, [r6, #16]
     f52:	9202      	str	r2, [sp, #8]
     f54:	2380      	movs	r3, #128	; 0x80
     f56:	01db      	lsls	r3, r3, #7
     f58:	429a      	cmp	r2, r3
     f5a:	d100      	bne.n	f5e <usart_init+0xaa>
     f5c:	e09e      	b.n	109c <usart_init+0x1e8>
     f5e:	d90f      	bls.n	f80 <usart_init+0xcc>
     f60:	23c0      	movs	r3, #192	; 0xc0
     f62:	01db      	lsls	r3, r3, #7
     f64:	9a02      	ldr	r2, [sp, #8]
     f66:	429a      	cmp	r2, r3
     f68:	d100      	bne.n	f6c <usart_init+0xb8>
     f6a:	e092      	b.n	1092 <usart_init+0x1de>
     f6c:	2380      	movs	r3, #128	; 0x80
     f6e:	021b      	lsls	r3, r3, #8
     f70:	429a      	cmp	r2, r3
     f72:	d000      	beq.n	f76 <usart_init+0xc2>
     f74:	e11f      	b.n	11b6 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     f76:	2303      	movs	r3, #3
     f78:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f7a:	2300      	movs	r3, #0
     f7c:	9307      	str	r3, [sp, #28]
     f7e:	e008      	b.n	f92 <usart_init+0xde>
	switch (config->sample_rate) {
     f80:	2380      	movs	r3, #128	; 0x80
     f82:	019b      	lsls	r3, r3, #6
     f84:	429a      	cmp	r2, r3
     f86:	d000      	beq.n	f8a <usart_init+0xd6>
     f88:	e115      	b.n	11b6 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     f8a:	2310      	movs	r3, #16
     f8c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     f8e:	3b0f      	subs	r3, #15
     f90:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     f92:	6833      	ldr	r3, [r6, #0]
     f94:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     f96:	68f3      	ldr	r3, [r6, #12]
     f98:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     f9a:	6973      	ldr	r3, [r6, #20]
     f9c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     f9e:	7e33      	ldrb	r3, [r6, #24]
     fa0:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     fa2:	2326      	movs	r3, #38	; 0x26
     fa4:	5cf3      	ldrb	r3, [r6, r3]
     fa6:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     fa8:	6873      	ldr	r3, [r6, #4]
     faa:	4699      	mov	r9, r3
	switch (transfer_mode)
     fac:	2b00      	cmp	r3, #0
     fae:	d100      	bne.n	fb2 <usart_init+0xfe>
     fb0:	e0a0      	b.n	10f4 <usart_init+0x240>
     fb2:	2380      	movs	r3, #128	; 0x80
     fb4:	055b      	lsls	r3, r3, #21
     fb6:	4599      	cmp	r9, r3
     fb8:	d100      	bne.n	fbc <usart_init+0x108>
     fba:	e084      	b.n	10c6 <usart_init+0x212>
	if(config->encoding_format_enable) {
     fbc:	7e73      	ldrb	r3, [r6, #25]
     fbe:	2b00      	cmp	r3, #0
     fc0:	d002      	beq.n	fc8 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     fc2:	7eb3      	ldrb	r3, [r6, #26]
     fc4:	4642      	mov	r2, r8
     fc6:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
     fc8:	682a      	ldr	r2, [r5, #0]
     fca:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
     fcc:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     fce:	2b00      	cmp	r3, #0
     fd0:	d1fc      	bne.n	fcc <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     fd2:	330e      	adds	r3, #14
     fd4:	aa06      	add	r2, sp, #24
     fd6:	4694      	mov	ip, r2
     fd8:	4463      	add	r3, ip
     fda:	881b      	ldrh	r3, [r3, #0]
     fdc:	4642      	mov	r2, r8
     fde:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     fe0:	9b05      	ldr	r3, [sp, #20]
     fe2:	9a03      	ldr	r2, [sp, #12]
     fe4:	4313      	orrs	r3, r2
     fe6:	9a04      	ldr	r2, [sp, #16]
     fe8:	4313      	orrs	r3, r2
     fea:	464a      	mov	r2, r9
     fec:	4313      	orrs	r3, r2
     fee:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ff0:	465b      	mov	r3, fp
     ff2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     ff4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     ff6:	4653      	mov	r3, sl
     ff8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     ffa:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     ffc:	2327      	movs	r3, #39	; 0x27
     ffe:	5cf3      	ldrb	r3, [r6, r3]
    1000:	2b00      	cmp	r3, #0
    1002:	d101      	bne.n	1008 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1004:	3304      	adds	r3, #4
    1006:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1008:	7e73      	ldrb	r3, [r6, #25]
    100a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    100c:	7f32      	ldrb	r2, [r6, #28]
    100e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1010:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1012:	7f72      	ldrb	r2, [r6, #29]
    1014:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1016:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1018:	2224      	movs	r2, #36	; 0x24
    101a:	5cb2      	ldrb	r2, [r6, r2]
    101c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    101e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1020:	2225      	movs	r2, #37	; 0x25
    1022:	5cb2      	ldrb	r2, [r6, r2]
    1024:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1026:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1028:	7ab1      	ldrb	r1, [r6, #10]
    102a:	7af2      	ldrb	r2, [r6, #11]
    102c:	4311      	orrs	r1, r2
    102e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1030:	8933      	ldrh	r3, [r6, #8]
    1032:	2bff      	cmp	r3, #255	; 0xff
    1034:	d100      	bne.n	1038 <usart_init+0x184>
    1036:	e081      	b.n	113c <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1038:	2280      	movs	r2, #128	; 0x80
    103a:	0452      	lsls	r2, r2, #17
    103c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    103e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1040:	232c      	movs	r3, #44	; 0x2c
    1042:	5cf3      	ldrb	r3, [r6, r3]
    1044:	2b00      	cmp	r3, #0
    1046:	d103      	bne.n	1050 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1048:	4b62      	ldr	r3, [pc, #392]	; (11d4 <usart_init+0x320>)
    104a:	789b      	ldrb	r3, [r3, #2]
    104c:	079b      	lsls	r3, r3, #30
    104e:	d501      	bpl.n	1054 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1050:	2380      	movs	r3, #128	; 0x80
    1052:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1054:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1056:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1058:	2b00      	cmp	r3, #0
    105a:	d1fc      	bne.n	1056 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    105c:	4643      	mov	r3, r8
    105e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1060:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1062:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1064:	2b00      	cmp	r3, #0
    1066:	d1fc      	bne.n	1062 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    1068:	4643      	mov	r3, r8
    106a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    106c:	ab0e      	add	r3, sp, #56	; 0x38
    106e:	2280      	movs	r2, #128	; 0x80
    1070:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1072:	2200      	movs	r2, #0
    1074:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1076:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1078:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    107a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    107c:	930a      	str	r3, [sp, #40]	; 0x28
    107e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1080:	930b      	str	r3, [sp, #44]	; 0x2c
    1082:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1084:	930c      	str	r3, [sp, #48]	; 0x30
    1086:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1088:	9302      	str	r3, [sp, #8]
    108a:	930d      	str	r3, [sp, #52]	; 0x34
    108c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    108e:	ae0a      	add	r6, sp, #40	; 0x28
    1090:	e063      	b.n	115a <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1092:	2308      	movs	r3, #8
    1094:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1096:	3b07      	subs	r3, #7
    1098:	9307      	str	r3, [sp, #28]
    109a:	e77a      	b.n	f92 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    109c:	6833      	ldr	r3, [r6, #0]
    109e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    10a0:	68f3      	ldr	r3, [r6, #12]
    10a2:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    10a4:	6973      	ldr	r3, [r6, #20]
    10a6:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    10a8:	7e33      	ldrb	r3, [r6, #24]
    10aa:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    10ac:	2326      	movs	r3, #38	; 0x26
    10ae:	5cf3      	ldrb	r3, [r6, r3]
    10b0:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    10b2:	6873      	ldr	r3, [r6, #4]
    10b4:	4699      	mov	r9, r3
	switch (transfer_mode)
    10b6:	2b00      	cmp	r3, #0
    10b8:	d018      	beq.n	10ec <usart_init+0x238>
    10ba:	2380      	movs	r3, #128	; 0x80
    10bc:	055b      	lsls	r3, r3, #21
    10be:	4599      	cmp	r9, r3
    10c0:	d001      	beq.n	10c6 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    10c2:	2000      	movs	r0, #0
    10c4:	e025      	b.n	1112 <usart_init+0x25e>
			if (!config->use_external_clock) {
    10c6:	2327      	movs	r3, #39	; 0x27
    10c8:	5cf3      	ldrb	r3, [r6, r3]
    10ca:	2b00      	cmp	r3, #0
    10cc:	d000      	beq.n	10d0 <usart_init+0x21c>
    10ce:	e775      	b.n	fbc <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    10d0:	6a33      	ldr	r3, [r6, #32]
    10d2:	001f      	movs	r7, r3
    10d4:	b2c0      	uxtb	r0, r0
    10d6:	4b40      	ldr	r3, [pc, #256]	; (11d8 <usart_init+0x324>)
    10d8:	4798      	blx	r3
    10da:	0001      	movs	r1, r0
    10dc:	220e      	movs	r2, #14
    10de:	ab06      	add	r3, sp, #24
    10e0:	469c      	mov	ip, r3
    10e2:	4462      	add	r2, ip
    10e4:	0038      	movs	r0, r7
    10e6:	4b3d      	ldr	r3, [pc, #244]	; (11dc <usart_init+0x328>)
    10e8:	4798      	blx	r3
    10ea:	e012      	b.n	1112 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    10ec:	2308      	movs	r3, #8
    10ee:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    10f0:	2300      	movs	r3, #0
    10f2:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    10f4:	2327      	movs	r3, #39	; 0x27
    10f6:	5cf3      	ldrb	r3, [r6, r3]
    10f8:	2b00      	cmp	r3, #0
    10fa:	d00e      	beq.n	111a <usart_init+0x266>
				status_code =
    10fc:	9b06      	ldr	r3, [sp, #24]
    10fe:	9300      	str	r3, [sp, #0]
    1100:	9b07      	ldr	r3, [sp, #28]
    1102:	220e      	movs	r2, #14
    1104:	a906      	add	r1, sp, #24
    1106:	468c      	mov	ip, r1
    1108:	4462      	add	r2, ip
    110a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    110c:	6a30      	ldr	r0, [r6, #32]
    110e:	4f34      	ldr	r7, [pc, #208]	; (11e0 <usart_init+0x32c>)
    1110:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1112:	2800      	cmp	r0, #0
    1114:	d000      	beq.n	1118 <usart_init+0x264>
    1116:	e6e0      	b.n	eda <usart_init+0x26>
    1118:	e750      	b.n	fbc <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    111a:	6a33      	ldr	r3, [r6, #32]
    111c:	001f      	movs	r7, r3
    111e:	b2c0      	uxtb	r0, r0
    1120:	4b2d      	ldr	r3, [pc, #180]	; (11d8 <usart_init+0x324>)
    1122:	4798      	blx	r3
    1124:	0001      	movs	r1, r0
				status_code =
    1126:	9b06      	ldr	r3, [sp, #24]
    1128:	9300      	str	r3, [sp, #0]
    112a:	9b07      	ldr	r3, [sp, #28]
    112c:	220e      	movs	r2, #14
    112e:	a806      	add	r0, sp, #24
    1130:	4684      	mov	ip, r0
    1132:	4462      	add	r2, ip
    1134:	0038      	movs	r0, r7
    1136:	4f2a      	ldr	r7, [pc, #168]	; (11e0 <usart_init+0x32c>)
    1138:	47b8      	blx	r7
    113a:	e7ea      	b.n	1112 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    113c:	7ef3      	ldrb	r3, [r6, #27]
    113e:	2b00      	cmp	r3, #0
    1140:	d100      	bne.n	1144 <usart_init+0x290>
    1142:	e77d      	b.n	1040 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1144:	2380      	movs	r3, #128	; 0x80
    1146:	04db      	lsls	r3, r3, #19
    1148:	431f      	orrs	r7, r3
    114a:	e779      	b.n	1040 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    114c:	0020      	movs	r0, r4
    114e:	4b25      	ldr	r3, [pc, #148]	; (11e4 <usart_init+0x330>)
    1150:	4798      	blx	r3
    1152:	e007      	b.n	1164 <usart_init+0x2b0>
    1154:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1156:	2f04      	cmp	r7, #4
    1158:	d00d      	beq.n	1176 <usart_init+0x2c2>
    115a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    115c:	00bb      	lsls	r3, r7, #2
    115e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1160:	2800      	cmp	r0, #0
    1162:	d0f3      	beq.n	114c <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    1164:	1c43      	adds	r3, r0, #1
    1166:	d0f5      	beq.n	1154 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1168:	a90e      	add	r1, sp, #56	; 0x38
    116a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    116c:	0c00      	lsrs	r0, r0, #16
    116e:	b2c0      	uxtb	r0, r0
    1170:	4b1d      	ldr	r3, [pc, #116]	; (11e8 <usart_init+0x334>)
    1172:	4798      	blx	r3
    1174:	e7ee      	b.n	1154 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    1176:	2300      	movs	r3, #0
    1178:	60eb      	str	r3, [r5, #12]
    117a:	612b      	str	r3, [r5, #16]
    117c:	616b      	str	r3, [r5, #20]
    117e:	61ab      	str	r3, [r5, #24]
    1180:	61eb      	str	r3, [r5, #28]
    1182:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1184:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1186:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1188:	2200      	movs	r2, #0
    118a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    118c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    118e:	3330      	adds	r3, #48	; 0x30
    1190:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1192:	3301      	adds	r3, #1
    1194:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1196:	3301      	adds	r3, #1
    1198:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    119a:	3301      	adds	r3, #1
    119c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    119e:	6828      	ldr	r0, [r5, #0]
    11a0:	4b07      	ldr	r3, [pc, #28]	; (11c0 <usart_init+0x30c>)
    11a2:	4798      	blx	r3
    11a4:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    11a6:	4911      	ldr	r1, [pc, #68]	; (11ec <usart_init+0x338>)
    11a8:	4b11      	ldr	r3, [pc, #68]	; (11f0 <usart_init+0x33c>)
    11aa:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    11ac:	00a4      	lsls	r4, r4, #2
    11ae:	4b11      	ldr	r3, [pc, #68]	; (11f4 <usart_init+0x340>)
    11b0:	50e5      	str	r5, [r4, r3]
	return status_code;
    11b2:	2000      	movs	r0, #0
    11b4:	e691      	b.n	eda <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    11b6:	2310      	movs	r3, #16
    11b8:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    11ba:	2300      	movs	r3, #0
    11bc:	9307      	str	r3, [sp, #28]
    11be:	e6e8      	b.n	f92 <usart_init+0xde>
    11c0:	00000451 	.word	0x00000451
    11c4:	40000400 	.word	0x40000400
    11c8:	00001afd 	.word	0x00001afd
    11cc:	00001a71 	.word	0x00001a71
    11d0:	0000028d 	.word	0x0000028d
    11d4:	41002000 	.word	0x41002000
    11d8:	00001b19 	.word	0x00001b19
    11dc:	000001cf 	.word	0x000001cf
    11e0:	000001f9 	.word	0x000001f9
    11e4:	000002d9 	.word	0x000002d9
    11e8:	00001bf5 	.word	0x00001bf5
    11ec:	0000131d 	.word	0x0000131d
    11f0:	000014b5 	.word	0x000014b5
    11f4:	20000174 	.word	0x20000174

000011f8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    11f8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    11fa:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    11fc:	2a00      	cmp	r2, #0
    11fe:	d101      	bne.n	1204 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1200:	0018      	movs	r0, r3
    1202:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1204:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1206:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1208:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    120a:	2a00      	cmp	r2, #0
    120c:	d1f8      	bne.n	1200 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    120e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1210:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1212:	2a00      	cmp	r2, #0
    1214:	d1fc      	bne.n	1210 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    1216:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1218:	2102      	movs	r1, #2
    121a:	7e1a      	ldrb	r2, [r3, #24]
    121c:	420a      	tst	r2, r1
    121e:	d0fc      	beq.n	121a <usart_write_wait+0x22>
	return STATUS_OK;
    1220:	2300      	movs	r3, #0
    1222:	e7ed      	b.n	1200 <usart_write_wait+0x8>

00001224 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1224:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1226:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1228:	2a00      	cmp	r2, #0
    122a:	d101      	bne.n	1230 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    122c:	0018      	movs	r0, r3
    122e:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1230:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1232:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1234:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1236:	2a00      	cmp	r2, #0
    1238:	d1f8      	bne.n	122c <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    123a:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    123c:	7e10      	ldrb	r0, [r2, #24]
    123e:	0740      	lsls	r0, r0, #29
    1240:	d5f4      	bpl.n	122c <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    1242:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1244:	2b00      	cmp	r3, #0
    1246:	d1fc      	bne.n	1242 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1248:	8b53      	ldrh	r3, [r2, #26]
    124a:	b2db      	uxtb	r3, r3
	if (error_code) {
    124c:	0698      	lsls	r0, r3, #26
    124e:	d01d      	beq.n	128c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1250:	0798      	lsls	r0, r3, #30
    1252:	d503      	bpl.n	125c <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1254:	2302      	movs	r3, #2
    1256:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1258:	3318      	adds	r3, #24
    125a:	e7e7      	b.n	122c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    125c:	0758      	lsls	r0, r3, #29
    125e:	d503      	bpl.n	1268 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1260:	2304      	movs	r3, #4
    1262:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1264:	331a      	adds	r3, #26
    1266:	e7e1      	b.n	122c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1268:	07d8      	lsls	r0, r3, #31
    126a:	d503      	bpl.n	1274 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    126c:	2301      	movs	r3, #1
    126e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1270:	3312      	adds	r3, #18
    1272:	e7db      	b.n	122c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1274:	06d8      	lsls	r0, r3, #27
    1276:	d503      	bpl.n	1280 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1278:	2310      	movs	r3, #16
    127a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    127c:	3332      	adds	r3, #50	; 0x32
    127e:	e7d5      	b.n	122c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1280:	069b      	lsls	r3, r3, #26
    1282:	d503      	bpl.n	128c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1284:	2320      	movs	r3, #32
    1286:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1288:	3321      	adds	r3, #33	; 0x21
    128a:	e7cf      	b.n	122c <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    128c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    128e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1290:	2300      	movs	r3, #0
    1292:	e7cb      	b.n	122c <usart_read_wait+0x8>

00001294 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1296:	0004      	movs	r4, r0
    1298:	000d      	movs	r5, r1
    129a:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    129c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    129e:	4b0f      	ldr	r3, [pc, #60]	; (12dc <_usart_read_buffer+0x48>)
    12a0:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    12a2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    12a4:	b29b      	uxth	r3, r3
    12a6:	2b00      	cmp	r3, #0
    12a8:	d003      	beq.n	12b2 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    12aa:	4b0d      	ldr	r3, [pc, #52]	; (12e0 <_usart_read_buffer+0x4c>)
    12ac:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    12ae:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    12b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    12b2:	85a6      	strh	r6, [r4, #44]	; 0x2c
    12b4:	4b0a      	ldr	r3, [pc, #40]	; (12e0 <_usart_read_buffer+0x4c>)
    12b6:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    12b8:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    12ba:	2205      	movs	r2, #5
    12bc:	2332      	movs	r3, #50	; 0x32
    12be:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    12c0:	3b2e      	subs	r3, #46	; 0x2e
    12c2:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    12c4:	7a23      	ldrb	r3, [r4, #8]
    12c6:	2b00      	cmp	r3, #0
    12c8:	d001      	beq.n	12ce <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    12ca:	2320      	movs	r3, #32
    12cc:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    12ce:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    12d0:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    12d2:	2b00      	cmp	r3, #0
    12d4:	d0ec      	beq.n	12b0 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    12d6:	2308      	movs	r3, #8
    12d8:	75bb      	strb	r3, [r7, #22]
    12da:	e7e9      	b.n	12b0 <_usart_read_buffer+0x1c>
    12dc:	000015ed 	.word	0x000015ed
    12e0:	0000162d 	.word	0x0000162d

000012e4 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    12e4:	1c93      	adds	r3, r2, #2
    12e6:	009b      	lsls	r3, r3, #2
    12e8:	18c3      	adds	r3, r0, r3
    12ea:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    12ec:	2130      	movs	r1, #48	; 0x30
    12ee:	2301      	movs	r3, #1
    12f0:	4093      	lsls	r3, r2
    12f2:	001a      	movs	r2, r3
    12f4:	5c43      	ldrb	r3, [r0, r1]
    12f6:	4313      	orrs	r3, r2
    12f8:	5443      	strb	r3, [r0, r1]
}
    12fa:	4770      	bx	lr

000012fc <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    12fc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    12fe:	2317      	movs	r3, #23
	if (length == 0) {
    1300:	2a00      	cmp	r2, #0
    1302:	d101      	bne.n	1308 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    1304:	0018      	movs	r0, r3
    1306:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    1308:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    130a:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    130c:	2c00      	cmp	r4, #0
    130e:	d0f9      	beq.n	1304 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    1310:	4b01      	ldr	r3, [pc, #4]	; (1318 <usart_read_buffer_job+0x1c>)
    1312:	4798      	blx	r3
    1314:	0003      	movs	r3, r0
    1316:	e7f5      	b.n	1304 <usart_read_buffer_job+0x8>
    1318:	00001295 	.word	0x00001295

0000131c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    131c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    131e:	0080      	lsls	r0, r0, #2
    1320:	4b62      	ldr	r3, [pc, #392]	; (14ac <_usart_interrupt_handler+0x190>)
    1322:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1324:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1326:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1328:	2b00      	cmp	r3, #0
    132a:	d1fc      	bne.n	1326 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    132c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    132e:	7da6      	ldrb	r6, [r4, #22]
    1330:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1332:	2330      	movs	r3, #48	; 0x30
    1334:	5ceb      	ldrb	r3, [r5, r3]
    1336:	2231      	movs	r2, #49	; 0x31
    1338:	5caf      	ldrb	r7, [r5, r2]
    133a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    133c:	07f3      	lsls	r3, r6, #31
    133e:	d522      	bpl.n	1386 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1340:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1342:	b29b      	uxth	r3, r3
    1344:	2b00      	cmp	r3, #0
    1346:	d01c      	beq.n	1382 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1348:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    134a:	7813      	ldrb	r3, [r2, #0]
    134c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    134e:	1c51      	adds	r1, r2, #1
    1350:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1352:	7969      	ldrb	r1, [r5, #5]
    1354:	2901      	cmp	r1, #1
    1356:	d00e      	beq.n	1376 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1358:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    135a:	05db      	lsls	r3, r3, #23
    135c:	0ddb      	lsrs	r3, r3, #23
    135e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1360:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1362:	3b01      	subs	r3, #1
    1364:	b29b      	uxth	r3, r3
    1366:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1368:	2b00      	cmp	r3, #0
    136a:	d10c      	bne.n	1386 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    136c:	3301      	adds	r3, #1
    136e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1370:	3301      	adds	r3, #1
    1372:	75a3      	strb	r3, [r4, #22]
    1374:	e007      	b.n	1386 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1376:	7851      	ldrb	r1, [r2, #1]
    1378:	0209      	lsls	r1, r1, #8
    137a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    137c:	3202      	adds	r2, #2
    137e:	62aa      	str	r2, [r5, #40]	; 0x28
    1380:	e7eb      	b.n	135a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1382:	2301      	movs	r3, #1
    1384:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1386:	07b3      	lsls	r3, r6, #30
    1388:	d506      	bpl.n	1398 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    138a:	2302      	movs	r3, #2
    138c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    138e:	2200      	movs	r2, #0
    1390:	3331      	adds	r3, #49	; 0x31
    1392:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1394:	07fb      	lsls	r3, r7, #31
    1396:	d41a      	bmi.n	13ce <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1398:	0773      	lsls	r3, r6, #29
    139a:	d565      	bpl.n	1468 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    139c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    139e:	b29b      	uxth	r3, r3
    13a0:	2b00      	cmp	r3, #0
    13a2:	d05f      	beq.n	1464 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    13a4:	8b63      	ldrh	r3, [r4, #26]
    13a6:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    13a8:	071a      	lsls	r2, r3, #28
    13aa:	d414      	bmi.n	13d6 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    13ac:	223f      	movs	r2, #63	; 0x3f
    13ae:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    13b0:	2b00      	cmp	r3, #0
    13b2:	d034      	beq.n	141e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    13b4:	079a      	lsls	r2, r3, #30
    13b6:	d511      	bpl.n	13dc <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    13b8:	221a      	movs	r2, #26
    13ba:	2332      	movs	r3, #50	; 0x32
    13bc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    13be:	3b30      	subs	r3, #48	; 0x30
    13c0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    13c2:	077b      	lsls	r3, r7, #29
    13c4:	d550      	bpl.n	1468 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    13c6:	0028      	movs	r0, r5
    13c8:	696b      	ldr	r3, [r5, #20]
    13ca:	4798      	blx	r3
    13cc:	e04c      	b.n	1468 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    13ce:	0028      	movs	r0, r5
    13d0:	68eb      	ldr	r3, [r5, #12]
    13d2:	4798      	blx	r3
    13d4:	e7e0      	b.n	1398 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    13d6:	2237      	movs	r2, #55	; 0x37
    13d8:	4013      	ands	r3, r2
    13da:	e7e9      	b.n	13b0 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    13dc:	075a      	lsls	r2, r3, #29
    13de:	d505      	bpl.n	13ec <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    13e0:	221e      	movs	r2, #30
    13e2:	2332      	movs	r3, #50	; 0x32
    13e4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    13e6:	3b2e      	subs	r3, #46	; 0x2e
    13e8:	8363      	strh	r3, [r4, #26]
    13ea:	e7ea      	b.n	13c2 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    13ec:	07da      	lsls	r2, r3, #31
    13ee:	d505      	bpl.n	13fc <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    13f0:	2213      	movs	r2, #19
    13f2:	2332      	movs	r3, #50	; 0x32
    13f4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    13f6:	3b31      	subs	r3, #49	; 0x31
    13f8:	8363      	strh	r3, [r4, #26]
    13fa:	e7e2      	b.n	13c2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    13fc:	06da      	lsls	r2, r3, #27
    13fe:	d505      	bpl.n	140c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1400:	2242      	movs	r2, #66	; 0x42
    1402:	2332      	movs	r3, #50	; 0x32
    1404:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1406:	3b22      	subs	r3, #34	; 0x22
    1408:	8363      	strh	r3, [r4, #26]
    140a:	e7da      	b.n	13c2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    140c:	2220      	movs	r2, #32
    140e:	421a      	tst	r2, r3
    1410:	d0d7      	beq.n	13c2 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1412:	3221      	adds	r2, #33	; 0x21
    1414:	2332      	movs	r3, #50	; 0x32
    1416:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1418:	3b12      	subs	r3, #18
    141a:	8363      	strh	r3, [r4, #26]
    141c:	e7d1      	b.n	13c2 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    141e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1420:	05db      	lsls	r3, r3, #23
    1422:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1424:	b2da      	uxtb	r2, r3
    1426:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1428:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    142a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    142c:	1c51      	adds	r1, r2, #1
    142e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1430:	7969      	ldrb	r1, [r5, #5]
    1432:	2901      	cmp	r1, #1
    1434:	d010      	beq.n	1458 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1436:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1438:	3b01      	subs	r3, #1
    143a:	b29b      	uxth	r3, r3
    143c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    143e:	2b00      	cmp	r3, #0
    1440:	d112      	bne.n	1468 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1442:	3304      	adds	r3, #4
    1444:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1446:	2200      	movs	r2, #0
    1448:	332e      	adds	r3, #46	; 0x2e
    144a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    144c:	07bb      	lsls	r3, r7, #30
    144e:	d50b      	bpl.n	1468 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1450:	0028      	movs	r0, r5
    1452:	692b      	ldr	r3, [r5, #16]
    1454:	4798      	blx	r3
    1456:	e007      	b.n	1468 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1458:	0a1b      	lsrs	r3, r3, #8
    145a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    145c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    145e:	3301      	adds	r3, #1
    1460:	626b      	str	r3, [r5, #36]	; 0x24
    1462:	e7e8      	b.n	1436 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1464:	2304      	movs	r3, #4
    1466:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1468:	06f3      	lsls	r3, r6, #27
    146a:	d504      	bpl.n	1476 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    146c:	2310      	movs	r3, #16
    146e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1470:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1472:	06fb      	lsls	r3, r7, #27
    1474:	d40e      	bmi.n	1494 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1476:	06b3      	lsls	r3, r6, #26
    1478:	d504      	bpl.n	1484 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    147a:	2320      	movs	r3, #32
    147c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    147e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1480:	073b      	lsls	r3, r7, #28
    1482:	d40b      	bmi.n	149c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1484:	0733      	lsls	r3, r6, #28
    1486:	d504      	bpl.n	1492 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1488:	2308      	movs	r3, #8
    148a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    148c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    148e:	06bb      	lsls	r3, r7, #26
    1490:	d408      	bmi.n	14a4 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1494:	0028      	movs	r0, r5
    1496:	69eb      	ldr	r3, [r5, #28]
    1498:	4798      	blx	r3
    149a:	e7ec      	b.n	1476 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    149c:	0028      	movs	r0, r5
    149e:	69ab      	ldr	r3, [r5, #24]
    14a0:	4798      	blx	r3
    14a2:	e7ef      	b.n	1484 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    14a4:	6a2b      	ldr	r3, [r5, #32]
    14a6:	0028      	movs	r0, r5
    14a8:	4798      	blx	r3
}
    14aa:	e7f2      	b.n	1492 <_usart_interrupt_handler+0x176>
    14ac:	20000174 	.word	0x20000174

000014b0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    14b0:	4770      	bx	lr
	...

000014b4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    14b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    14b6:	4b0a      	ldr	r3, [pc, #40]	; (14e0 <_sercom_set_handler+0x2c>)
    14b8:	781b      	ldrb	r3, [r3, #0]
    14ba:	2b00      	cmp	r3, #0
    14bc:	d10c      	bne.n	14d8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    14be:	4f09      	ldr	r7, [pc, #36]	; (14e4 <_sercom_set_handler+0x30>)
    14c0:	4e09      	ldr	r6, [pc, #36]	; (14e8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    14c2:	4d0a      	ldr	r5, [pc, #40]	; (14ec <_sercom_set_handler+0x38>)
    14c4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    14c6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    14c8:	195a      	adds	r2, r3, r5
    14ca:	6014      	str	r4, [r2, #0]
    14cc:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    14ce:	2b18      	cmp	r3, #24
    14d0:	d1f9      	bne.n	14c6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    14d2:	2201      	movs	r2, #1
    14d4:	4b02      	ldr	r3, [pc, #8]	; (14e0 <_sercom_set_handler+0x2c>)
    14d6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    14d8:	0080      	lsls	r0, r0, #2
    14da:	4b02      	ldr	r3, [pc, #8]	; (14e4 <_sercom_set_handler+0x30>)
    14dc:	50c1      	str	r1, [r0, r3]
}
    14de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14e0:	2000008e 	.word	0x2000008e
    14e4:	20000090 	.word	0x20000090
    14e8:	000014b1 	.word	0x000014b1
    14ec:	20000174 	.word	0x20000174

000014f0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    14f0:	b500      	push	{lr}
    14f2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    14f4:	2309      	movs	r3, #9
    14f6:	466a      	mov	r2, sp
    14f8:	7013      	strb	r3, [r2, #0]
    14fa:	3301      	adds	r3, #1
    14fc:	7053      	strb	r3, [r2, #1]
    14fe:	3301      	adds	r3, #1
    1500:	7093      	strb	r3, [r2, #2]
    1502:	3301      	adds	r3, #1
    1504:	70d3      	strb	r3, [r2, #3]
    1506:	3301      	adds	r3, #1
    1508:	7113      	strb	r3, [r2, #4]
    150a:	3301      	adds	r3, #1
    150c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    150e:	4b03      	ldr	r3, [pc, #12]	; (151c <_sercom_get_interrupt_vector+0x2c>)
    1510:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1512:	466b      	mov	r3, sp
    1514:	5618      	ldrsb	r0, [r3, r0]
}
    1516:	b003      	add	sp, #12
    1518:	bd00      	pop	{pc}
    151a:	46c0      	nop			; (mov r8, r8)
    151c:	00000451 	.word	0x00000451

00001520 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1520:	b510      	push	{r4, lr}
    1522:	4b02      	ldr	r3, [pc, #8]	; (152c <SERCOM0_Handler+0xc>)
    1524:	681b      	ldr	r3, [r3, #0]
    1526:	2000      	movs	r0, #0
    1528:	4798      	blx	r3
    152a:	bd10      	pop	{r4, pc}
    152c:	20000090 	.word	0x20000090

00001530 <SERCOM1_Handler>:
    1530:	b510      	push	{r4, lr}
    1532:	4b02      	ldr	r3, [pc, #8]	; (153c <SERCOM1_Handler+0xc>)
    1534:	685b      	ldr	r3, [r3, #4]
    1536:	2001      	movs	r0, #1
    1538:	4798      	blx	r3
    153a:	bd10      	pop	{r4, pc}
    153c:	20000090 	.word	0x20000090

00001540 <SERCOM2_Handler>:
    1540:	b510      	push	{r4, lr}
    1542:	4b02      	ldr	r3, [pc, #8]	; (154c <SERCOM2_Handler+0xc>)
    1544:	689b      	ldr	r3, [r3, #8]
    1546:	2002      	movs	r0, #2
    1548:	4798      	blx	r3
    154a:	bd10      	pop	{r4, pc}
    154c:	20000090 	.word	0x20000090

00001550 <SERCOM3_Handler>:
    1550:	b510      	push	{r4, lr}
    1552:	4b02      	ldr	r3, [pc, #8]	; (155c <SERCOM3_Handler+0xc>)
    1554:	68db      	ldr	r3, [r3, #12]
    1556:	2003      	movs	r0, #3
    1558:	4798      	blx	r3
    155a:	bd10      	pop	{r4, pc}
    155c:	20000090 	.word	0x20000090

00001560 <SERCOM4_Handler>:
    1560:	b510      	push	{r4, lr}
    1562:	4b02      	ldr	r3, [pc, #8]	; (156c <SERCOM4_Handler+0xc>)
    1564:	691b      	ldr	r3, [r3, #16]
    1566:	2004      	movs	r0, #4
    1568:	4798      	blx	r3
    156a:	bd10      	pop	{r4, pc}
    156c:	20000090 	.word	0x20000090

00001570 <SERCOM5_Handler>:
    1570:	b510      	push	{r4, lr}
    1572:	4b02      	ldr	r3, [pc, #8]	; (157c <SERCOM5_Handler+0xc>)
    1574:	695b      	ldr	r3, [r3, #20]
    1576:	2005      	movs	r0, #5
    1578:	4798      	blx	r3
    157a:	bd10      	pop	{r4, pc}
    157c:	20000090 	.word	0x20000090

00001580 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1580:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1582:	2000      	movs	r0, #0
    1584:	4b08      	ldr	r3, [pc, #32]	; (15a8 <delay_init+0x28>)
    1586:	4798      	blx	r3
    1588:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    158a:	4c08      	ldr	r4, [pc, #32]	; (15ac <delay_init+0x2c>)
    158c:	21fa      	movs	r1, #250	; 0xfa
    158e:	0089      	lsls	r1, r1, #2
    1590:	47a0      	blx	r4
    1592:	4b07      	ldr	r3, [pc, #28]	; (15b0 <delay_init+0x30>)
    1594:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1596:	4907      	ldr	r1, [pc, #28]	; (15b4 <delay_init+0x34>)
    1598:	0028      	movs	r0, r5
    159a:	47a0      	blx	r4
    159c:	4b06      	ldr	r3, [pc, #24]	; (15b8 <delay_init+0x38>)
    159e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    15a0:	2205      	movs	r2, #5
    15a2:	4b06      	ldr	r3, [pc, #24]	; (15bc <delay_init+0x3c>)
    15a4:	601a      	str	r2, [r3, #0]
}
    15a6:	bd70      	pop	{r4, r5, r6, pc}
    15a8:	000019e5 	.word	0x000019e5
    15ac:	00001e25 	.word	0x00001e25
    15b0:	20000000 	.word	0x20000000
    15b4:	000f4240 	.word	0x000f4240
    15b8:	20000004 	.word	0x20000004
    15bc:	e000e010 	.word	0xe000e010

000015c0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    15c0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    15c2:	4b08      	ldr	r3, [pc, #32]	; (15e4 <delay_cycles_ms+0x24>)
    15c4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    15c6:	4a08      	ldr	r2, [pc, #32]	; (15e8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    15c8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    15ca:	2180      	movs	r1, #128	; 0x80
    15cc:	0249      	lsls	r1, r1, #9
	while (n--) {
    15ce:	3801      	subs	r0, #1
    15d0:	d307      	bcc.n	15e2 <delay_cycles_ms+0x22>
	if (n > 0) {
    15d2:	2c00      	cmp	r4, #0
    15d4:	d0fb      	beq.n	15ce <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    15d6:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    15d8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    15da:	6813      	ldr	r3, [r2, #0]
    15dc:	420b      	tst	r3, r1
    15de:	d0fc      	beq.n	15da <delay_cycles_ms+0x1a>
    15e0:	e7f5      	b.n	15ce <delay_cycles_ms+0xe>
	}
}
    15e2:	bd30      	pop	{r4, r5, pc}
    15e4:	20000000 	.word	0x20000000
    15e8:	e000e010 	.word	0xe000e010

000015ec <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    15ec:	4b0c      	ldr	r3, [pc, #48]	; (1620 <cpu_irq_enter_critical+0x34>)
    15ee:	681b      	ldr	r3, [r3, #0]
    15f0:	2b00      	cmp	r3, #0
    15f2:	d106      	bne.n	1602 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    15f4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    15f8:	2b00      	cmp	r3, #0
    15fa:	d007      	beq.n	160c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    15fc:	2200      	movs	r2, #0
    15fe:	4b09      	ldr	r3, [pc, #36]	; (1624 <cpu_irq_enter_critical+0x38>)
    1600:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1602:	4a07      	ldr	r2, [pc, #28]	; (1620 <cpu_irq_enter_critical+0x34>)
    1604:	6813      	ldr	r3, [r2, #0]
    1606:	3301      	adds	r3, #1
    1608:	6013      	str	r3, [r2, #0]
}
    160a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    160c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    160e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1612:	2200      	movs	r2, #0
    1614:	4b04      	ldr	r3, [pc, #16]	; (1628 <cpu_irq_enter_critical+0x3c>)
    1616:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1618:	3201      	adds	r2, #1
    161a:	4b02      	ldr	r3, [pc, #8]	; (1624 <cpu_irq_enter_critical+0x38>)
    161c:	701a      	strb	r2, [r3, #0]
    161e:	e7f0      	b.n	1602 <cpu_irq_enter_critical+0x16>
    1620:	200000a8 	.word	0x200000a8
    1624:	200000ac 	.word	0x200000ac
    1628:	20000008 	.word	0x20000008

0000162c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    162c:	4b08      	ldr	r3, [pc, #32]	; (1650 <cpu_irq_leave_critical+0x24>)
    162e:	681a      	ldr	r2, [r3, #0]
    1630:	3a01      	subs	r2, #1
    1632:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1634:	681b      	ldr	r3, [r3, #0]
    1636:	2b00      	cmp	r3, #0
    1638:	d109      	bne.n	164e <cpu_irq_leave_critical+0x22>
    163a:	4b06      	ldr	r3, [pc, #24]	; (1654 <cpu_irq_leave_critical+0x28>)
    163c:	781b      	ldrb	r3, [r3, #0]
    163e:	2b00      	cmp	r3, #0
    1640:	d005      	beq.n	164e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1642:	2201      	movs	r2, #1
    1644:	4b04      	ldr	r3, [pc, #16]	; (1658 <cpu_irq_leave_critical+0x2c>)
    1646:	701a      	strb	r2, [r3, #0]
    1648:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    164c:	b662      	cpsie	i
	}
}
    164e:	4770      	bx	lr
    1650:	200000a8 	.word	0x200000a8
    1654:	200000ac 	.word	0x200000ac
    1658:	20000008 	.word	0x20000008

0000165c <system_board_init>:




void system_board_init(void)
{
    165c:	b5f0      	push	{r4, r5, r6, r7, lr}
    165e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1660:	ac01      	add	r4, sp, #4
    1662:	2501      	movs	r5, #1
    1664:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1666:	2700      	movs	r7, #0
    1668:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    166a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    166c:	0021      	movs	r1, r4
    166e:	2013      	movs	r0, #19
    1670:	4e06      	ldr	r6, [pc, #24]	; (168c <system_board_init+0x30>)
    1672:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1674:	2280      	movs	r2, #128	; 0x80
    1676:	0312      	lsls	r2, r2, #12
    1678:	4b05      	ldr	r3, [pc, #20]	; (1690 <system_board_init+0x34>)
    167a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    167c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    167e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1680:	0021      	movs	r1, r4
    1682:	201c      	movs	r0, #28
    1684:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
    1686:	b003      	add	sp, #12
    1688:	bdf0      	pop	{r4, r5, r6, r7, pc}
    168a:	46c0      	nop			; (mov r8, r8)
    168c:	00001695 	.word	0x00001695
    1690:	41004400 	.word	0x41004400

00001694 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1694:	b500      	push	{lr}
    1696:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1698:	ab01      	add	r3, sp, #4
    169a:	2280      	movs	r2, #128	; 0x80
    169c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    169e:	780a      	ldrb	r2, [r1, #0]
    16a0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    16a2:	784a      	ldrb	r2, [r1, #1]
    16a4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    16a6:	788a      	ldrb	r2, [r1, #2]
    16a8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    16aa:	0019      	movs	r1, r3
    16ac:	4b01      	ldr	r3, [pc, #4]	; (16b4 <port_pin_set_config+0x20>)
    16ae:	4798      	blx	r3
}
    16b0:	b003      	add	sp, #12
    16b2:	bd00      	pop	{pc}
    16b4:	00001bf5 	.word	0x00001bf5

000016b8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    16b8:	b510      	push	{r4, lr}
	switch (clock_source) {
    16ba:	2808      	cmp	r0, #8
    16bc:	d803      	bhi.n	16c6 <system_clock_source_get_hz+0xe>
    16be:	0080      	lsls	r0, r0, #2
    16c0:	4b1b      	ldr	r3, [pc, #108]	; (1730 <system_clock_source_get_hz+0x78>)
    16c2:	581b      	ldr	r3, [r3, r0]
    16c4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    16c6:	2000      	movs	r0, #0
    16c8:	e030      	b.n	172c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    16ca:	4b1a      	ldr	r3, [pc, #104]	; (1734 <system_clock_source_get_hz+0x7c>)
    16cc:	6918      	ldr	r0, [r3, #16]
    16ce:	e02d      	b.n	172c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    16d0:	4b19      	ldr	r3, [pc, #100]	; (1738 <system_clock_source_get_hz+0x80>)
    16d2:	6a1b      	ldr	r3, [r3, #32]
    16d4:	059b      	lsls	r3, r3, #22
    16d6:	0f9b      	lsrs	r3, r3, #30
    16d8:	4818      	ldr	r0, [pc, #96]	; (173c <system_clock_source_get_hz+0x84>)
    16da:	40d8      	lsrs	r0, r3
    16dc:	e026      	b.n	172c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    16de:	4b15      	ldr	r3, [pc, #84]	; (1734 <system_clock_source_get_hz+0x7c>)
    16e0:	6958      	ldr	r0, [r3, #20]
    16e2:	e023      	b.n	172c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    16e4:	4b13      	ldr	r3, [pc, #76]	; (1734 <system_clock_source_get_hz+0x7c>)
    16e6:	681b      	ldr	r3, [r3, #0]
			return 0;
    16e8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    16ea:	079b      	lsls	r3, r3, #30
    16ec:	d51e      	bpl.n	172c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    16ee:	4912      	ldr	r1, [pc, #72]	; (1738 <system_clock_source_get_hz+0x80>)
    16f0:	2210      	movs	r2, #16
    16f2:	68cb      	ldr	r3, [r1, #12]
    16f4:	421a      	tst	r2, r3
    16f6:	d0fc      	beq.n	16f2 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    16f8:	4b0e      	ldr	r3, [pc, #56]	; (1734 <system_clock_source_get_hz+0x7c>)
    16fa:	681b      	ldr	r3, [r3, #0]
    16fc:	075b      	lsls	r3, r3, #29
    16fe:	d401      	bmi.n	1704 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1700:	480f      	ldr	r0, [pc, #60]	; (1740 <system_clock_source_get_hz+0x88>)
    1702:	e013      	b.n	172c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1704:	2000      	movs	r0, #0
    1706:	4b0f      	ldr	r3, [pc, #60]	; (1744 <system_clock_source_get_hz+0x8c>)
    1708:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    170a:	4b0a      	ldr	r3, [pc, #40]	; (1734 <system_clock_source_get_hz+0x7c>)
    170c:	689b      	ldr	r3, [r3, #8]
    170e:	041b      	lsls	r3, r3, #16
    1710:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1712:	4358      	muls	r0, r3
    1714:	e00a      	b.n	172c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1716:	2350      	movs	r3, #80	; 0x50
    1718:	4a07      	ldr	r2, [pc, #28]	; (1738 <system_clock_source_get_hz+0x80>)
    171a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    171c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    171e:	075b      	lsls	r3, r3, #29
    1720:	d504      	bpl.n	172c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1722:	4b04      	ldr	r3, [pc, #16]	; (1734 <system_clock_source_get_hz+0x7c>)
    1724:	68d8      	ldr	r0, [r3, #12]
    1726:	e001      	b.n	172c <system_clock_source_get_hz+0x74>
		return 32768UL;
    1728:	2080      	movs	r0, #128	; 0x80
    172a:	0200      	lsls	r0, r0, #8
	}
}
    172c:	bd10      	pop	{r4, pc}
    172e:	46c0      	nop			; (mov r8, r8)
    1730:	00002b1c 	.word	0x00002b1c
    1734:	200000b0 	.word	0x200000b0
    1738:	40000800 	.word	0x40000800
    173c:	007a1200 	.word	0x007a1200
    1740:	02dc6c00 	.word	0x02dc6c00
    1744:	00001b19 	.word	0x00001b19

00001748 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1748:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    174a:	490c      	ldr	r1, [pc, #48]	; (177c <system_clock_source_osc8m_set_config+0x34>)
    174c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    174e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1750:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1752:	7840      	ldrb	r0, [r0, #1]
    1754:	2201      	movs	r2, #1
    1756:	4010      	ands	r0, r2
    1758:	0180      	lsls	r0, r0, #6
    175a:	2640      	movs	r6, #64	; 0x40
    175c:	43b3      	bics	r3, r6
    175e:	4303      	orrs	r3, r0
    1760:	402a      	ands	r2, r5
    1762:	01d2      	lsls	r2, r2, #7
    1764:	2080      	movs	r0, #128	; 0x80
    1766:	4383      	bics	r3, r0
    1768:	4313      	orrs	r3, r2
    176a:	2203      	movs	r2, #3
    176c:	4022      	ands	r2, r4
    176e:	0212      	lsls	r2, r2, #8
    1770:	4803      	ldr	r0, [pc, #12]	; (1780 <system_clock_source_osc8m_set_config+0x38>)
    1772:	4003      	ands	r3, r0
    1774:	4313      	orrs	r3, r2
    1776:	620b      	str	r3, [r1, #32]
}
    1778:	bd70      	pop	{r4, r5, r6, pc}
    177a:	46c0      	nop			; (mov r8, r8)
    177c:	40000800 	.word	0x40000800
    1780:	fffffcff 	.word	0xfffffcff

00001784 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1784:	2808      	cmp	r0, #8
    1786:	d803      	bhi.n	1790 <system_clock_source_enable+0xc>
    1788:	0080      	lsls	r0, r0, #2
    178a:	4b25      	ldr	r3, [pc, #148]	; (1820 <system_clock_source_enable+0x9c>)
    178c:	581b      	ldr	r3, [r3, r0]
    178e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1790:	2017      	movs	r0, #23
    1792:	e044      	b.n	181e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1794:	4a23      	ldr	r2, [pc, #140]	; (1824 <system_clock_source_enable+0xa0>)
    1796:	6a13      	ldr	r3, [r2, #32]
    1798:	2102      	movs	r1, #2
    179a:	430b      	orrs	r3, r1
    179c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    179e:	2000      	movs	r0, #0
    17a0:	e03d      	b.n	181e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    17a2:	4a20      	ldr	r2, [pc, #128]	; (1824 <system_clock_source_enable+0xa0>)
    17a4:	6993      	ldr	r3, [r2, #24]
    17a6:	2102      	movs	r1, #2
    17a8:	430b      	orrs	r3, r1
    17aa:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    17ac:	2000      	movs	r0, #0
		break;
    17ae:	e036      	b.n	181e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    17b0:	4a1c      	ldr	r2, [pc, #112]	; (1824 <system_clock_source_enable+0xa0>)
    17b2:	8a13      	ldrh	r3, [r2, #16]
    17b4:	2102      	movs	r1, #2
    17b6:	430b      	orrs	r3, r1
    17b8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    17ba:	2000      	movs	r0, #0
		break;
    17bc:	e02f      	b.n	181e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    17be:	4a19      	ldr	r2, [pc, #100]	; (1824 <system_clock_source_enable+0xa0>)
    17c0:	8a93      	ldrh	r3, [r2, #20]
    17c2:	2102      	movs	r1, #2
    17c4:	430b      	orrs	r3, r1
    17c6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    17c8:	2000      	movs	r0, #0
		break;
    17ca:	e028      	b.n	181e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    17cc:	4916      	ldr	r1, [pc, #88]	; (1828 <system_clock_source_enable+0xa4>)
    17ce:	680b      	ldr	r3, [r1, #0]
    17d0:	2202      	movs	r2, #2
    17d2:	4313      	orrs	r3, r2
    17d4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    17d6:	4b13      	ldr	r3, [pc, #76]	; (1824 <system_clock_source_enable+0xa0>)
    17d8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    17da:	0019      	movs	r1, r3
    17dc:	320e      	adds	r2, #14
    17de:	68cb      	ldr	r3, [r1, #12]
    17e0:	421a      	tst	r2, r3
    17e2:	d0fc      	beq.n	17de <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    17e4:	4a10      	ldr	r2, [pc, #64]	; (1828 <system_clock_source_enable+0xa4>)
    17e6:	6891      	ldr	r1, [r2, #8]
    17e8:	4b0e      	ldr	r3, [pc, #56]	; (1824 <system_clock_source_enable+0xa0>)
    17ea:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    17ec:	6852      	ldr	r2, [r2, #4]
    17ee:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    17f0:	2200      	movs	r2, #0
    17f2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    17f4:	0019      	movs	r1, r3
    17f6:	3210      	adds	r2, #16
    17f8:	68cb      	ldr	r3, [r1, #12]
    17fa:	421a      	tst	r2, r3
    17fc:	d0fc      	beq.n	17f8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    17fe:	4b0a      	ldr	r3, [pc, #40]	; (1828 <system_clock_source_enable+0xa4>)
    1800:	681b      	ldr	r3, [r3, #0]
    1802:	b29b      	uxth	r3, r3
    1804:	4a07      	ldr	r2, [pc, #28]	; (1824 <system_clock_source_enable+0xa0>)
    1806:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1808:	2000      	movs	r0, #0
    180a:	e008      	b.n	181e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    180c:	4905      	ldr	r1, [pc, #20]	; (1824 <system_clock_source_enable+0xa0>)
    180e:	2244      	movs	r2, #68	; 0x44
    1810:	5c8b      	ldrb	r3, [r1, r2]
    1812:	2002      	movs	r0, #2
    1814:	4303      	orrs	r3, r0
    1816:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1818:	2000      	movs	r0, #0
		break;
    181a:	e000      	b.n	181e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    181c:	2000      	movs	r0, #0
}
    181e:	4770      	bx	lr
    1820:	00002b40 	.word	0x00002b40
    1824:	40000800 	.word	0x40000800
    1828:	200000b0 	.word	0x200000b0

0000182c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    182c:	b530      	push	{r4, r5, lr}
    182e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1830:	22c2      	movs	r2, #194	; 0xc2
    1832:	00d2      	lsls	r2, r2, #3
    1834:	4b1a      	ldr	r3, [pc, #104]	; (18a0 <system_clock_init+0x74>)
    1836:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1838:	4a1a      	ldr	r2, [pc, #104]	; (18a4 <system_clock_init+0x78>)
    183a:	6853      	ldr	r3, [r2, #4]
    183c:	211e      	movs	r1, #30
    183e:	438b      	bics	r3, r1
    1840:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1842:	2301      	movs	r3, #1
    1844:	466a      	mov	r2, sp
    1846:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1848:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    184a:	4d17      	ldr	r5, [pc, #92]	; (18a8 <system_clock_init+0x7c>)
    184c:	b2e0      	uxtb	r0, r4
    184e:	4669      	mov	r1, sp
    1850:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1852:	3401      	adds	r4, #1
    1854:	2c25      	cmp	r4, #37	; 0x25
    1856:	d1f9      	bne.n	184c <system_clock_init+0x20>
	config->run_in_standby  = false;
    1858:	a803      	add	r0, sp, #12
    185a:	2400      	movs	r4, #0
    185c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    185e:	2501      	movs	r5, #1
    1860:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1862:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1864:	4b11      	ldr	r3, [pc, #68]	; (18ac <system_clock_init+0x80>)
    1866:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1868:	2006      	movs	r0, #6
    186a:	4b11      	ldr	r3, [pc, #68]	; (18b0 <system_clock_init+0x84>)
    186c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    186e:	4b11      	ldr	r3, [pc, #68]	; (18b4 <system_clock_init+0x88>)
    1870:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1872:	4b11      	ldr	r3, [pc, #68]	; (18b8 <system_clock_init+0x8c>)
    1874:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1876:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1878:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    187a:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    187c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    187e:	466b      	mov	r3, sp
    1880:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1882:	2306      	movs	r3, #6
    1884:	466a      	mov	r2, sp
    1886:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1888:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    188a:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    188c:	4669      	mov	r1, sp
    188e:	2000      	movs	r0, #0
    1890:	4b0a      	ldr	r3, [pc, #40]	; (18bc <system_clock_init+0x90>)
    1892:	4798      	blx	r3
    1894:	2000      	movs	r0, #0
    1896:	4b0a      	ldr	r3, [pc, #40]	; (18c0 <system_clock_init+0x94>)
    1898:	4798      	blx	r3
#endif
}
    189a:	b005      	add	sp, #20
    189c:	bd30      	pop	{r4, r5, pc}
    189e:	46c0      	nop			; (mov r8, r8)
    18a0:	40000800 	.word	0x40000800
    18a4:	41004000 	.word	0x41004000
    18a8:	00001afd 	.word	0x00001afd
    18ac:	00001749 	.word	0x00001749
    18b0:	00001785 	.word	0x00001785
    18b4:	000018c5 	.word	0x000018c5
    18b8:	40000400 	.word	0x40000400
    18bc:	000018e9 	.word	0x000018e9
    18c0:	000019a1 	.word	0x000019a1

000018c4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    18c4:	4a06      	ldr	r2, [pc, #24]	; (18e0 <system_gclk_init+0x1c>)
    18c6:	6993      	ldr	r3, [r2, #24]
    18c8:	2108      	movs	r1, #8
    18ca:	430b      	orrs	r3, r1
    18cc:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    18ce:	2201      	movs	r2, #1
    18d0:	4b04      	ldr	r3, [pc, #16]	; (18e4 <system_gclk_init+0x20>)
    18d2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    18d4:	0019      	movs	r1, r3
    18d6:	780b      	ldrb	r3, [r1, #0]
    18d8:	4213      	tst	r3, r2
    18da:	d1fc      	bne.n	18d6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    18dc:	4770      	bx	lr
    18de:	46c0      	nop			; (mov r8, r8)
    18e0:	40000400 	.word	0x40000400
    18e4:	40000c00 	.word	0x40000c00

000018e8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    18e8:	b570      	push	{r4, r5, r6, lr}
    18ea:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    18ec:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    18ee:	780d      	ldrb	r5, [r1, #0]
    18f0:	022d      	lsls	r5, r5, #8
    18f2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    18f4:	784b      	ldrb	r3, [r1, #1]
    18f6:	2b00      	cmp	r3, #0
    18f8:	d002      	beq.n	1900 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    18fa:	2380      	movs	r3, #128	; 0x80
    18fc:	02db      	lsls	r3, r3, #11
    18fe:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1900:	7a4b      	ldrb	r3, [r1, #9]
    1902:	2b00      	cmp	r3, #0
    1904:	d002      	beq.n	190c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1906:	2380      	movs	r3, #128	; 0x80
    1908:	031b      	lsls	r3, r3, #12
    190a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    190c:	6848      	ldr	r0, [r1, #4]
    190e:	2801      	cmp	r0, #1
    1910:	d910      	bls.n	1934 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1912:	1e43      	subs	r3, r0, #1
    1914:	4218      	tst	r0, r3
    1916:	d134      	bne.n	1982 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1918:	2802      	cmp	r0, #2
    191a:	d930      	bls.n	197e <system_gclk_gen_set_config+0x96>
    191c:	2302      	movs	r3, #2
    191e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1920:	3201      	adds	r2, #1
						mask <<= 1) {
    1922:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1924:	4298      	cmp	r0, r3
    1926:	d8fb      	bhi.n	1920 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1928:	0212      	lsls	r2, r2, #8
    192a:	4332      	orrs	r2, r6
    192c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    192e:	2380      	movs	r3, #128	; 0x80
    1930:	035b      	lsls	r3, r3, #13
    1932:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1934:	7a0b      	ldrb	r3, [r1, #8]
    1936:	2b00      	cmp	r3, #0
    1938:	d002      	beq.n	1940 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    193a:	2380      	movs	r3, #128	; 0x80
    193c:	039b      	lsls	r3, r3, #14
    193e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1940:	4a13      	ldr	r2, [pc, #76]	; (1990 <system_gclk_gen_set_config+0xa8>)
    1942:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1944:	b25b      	sxtb	r3, r3
    1946:	2b00      	cmp	r3, #0
    1948:	dbfb      	blt.n	1942 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    194a:	4b12      	ldr	r3, [pc, #72]	; (1994 <system_gclk_gen_set_config+0xac>)
    194c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    194e:	4b12      	ldr	r3, [pc, #72]	; (1998 <system_gclk_gen_set_config+0xb0>)
    1950:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1952:	4a0f      	ldr	r2, [pc, #60]	; (1990 <system_gclk_gen_set_config+0xa8>)
    1954:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1956:	b25b      	sxtb	r3, r3
    1958:	2b00      	cmp	r3, #0
    195a:	dbfb      	blt.n	1954 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    195c:	4b0c      	ldr	r3, [pc, #48]	; (1990 <system_gclk_gen_set_config+0xa8>)
    195e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1960:	001a      	movs	r2, r3
    1962:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1964:	b25b      	sxtb	r3, r3
    1966:	2b00      	cmp	r3, #0
    1968:	dbfb      	blt.n	1962 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    196a:	4a09      	ldr	r2, [pc, #36]	; (1990 <system_gclk_gen_set_config+0xa8>)
    196c:	6853      	ldr	r3, [r2, #4]
    196e:	2180      	movs	r1, #128	; 0x80
    1970:	0249      	lsls	r1, r1, #9
    1972:	400b      	ands	r3, r1
    1974:	431d      	orrs	r5, r3
    1976:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1978:	4b08      	ldr	r3, [pc, #32]	; (199c <system_gclk_gen_set_config+0xb4>)
    197a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    197c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    197e:	2200      	movs	r2, #0
    1980:	e7d2      	b.n	1928 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1982:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1984:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1986:	2380      	movs	r3, #128	; 0x80
    1988:	029b      	lsls	r3, r3, #10
    198a:	431d      	orrs	r5, r3
    198c:	e7d2      	b.n	1934 <system_gclk_gen_set_config+0x4c>
    198e:	46c0      	nop			; (mov r8, r8)
    1990:	40000c00 	.word	0x40000c00
    1994:	000015ed 	.word	0x000015ed
    1998:	40000c08 	.word	0x40000c08
    199c:	0000162d 	.word	0x0000162d

000019a0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    19a0:	b510      	push	{r4, lr}
    19a2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19a4:	4a0b      	ldr	r2, [pc, #44]	; (19d4 <system_gclk_gen_enable+0x34>)
    19a6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    19a8:	b25b      	sxtb	r3, r3
    19aa:	2b00      	cmp	r3, #0
    19ac:	dbfb      	blt.n	19a6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    19ae:	4b0a      	ldr	r3, [pc, #40]	; (19d8 <system_gclk_gen_enable+0x38>)
    19b0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    19b2:	4b0a      	ldr	r3, [pc, #40]	; (19dc <system_gclk_gen_enable+0x3c>)
    19b4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19b6:	4a07      	ldr	r2, [pc, #28]	; (19d4 <system_gclk_gen_enable+0x34>)
    19b8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    19ba:	b25b      	sxtb	r3, r3
    19bc:	2b00      	cmp	r3, #0
    19be:	dbfb      	blt.n	19b8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    19c0:	4a04      	ldr	r2, [pc, #16]	; (19d4 <system_gclk_gen_enable+0x34>)
    19c2:	6851      	ldr	r1, [r2, #4]
    19c4:	2380      	movs	r3, #128	; 0x80
    19c6:	025b      	lsls	r3, r3, #9
    19c8:	430b      	orrs	r3, r1
    19ca:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    19cc:	4b04      	ldr	r3, [pc, #16]	; (19e0 <system_gclk_gen_enable+0x40>)
    19ce:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    19d0:	bd10      	pop	{r4, pc}
    19d2:	46c0      	nop			; (mov r8, r8)
    19d4:	40000c00 	.word	0x40000c00
    19d8:	000015ed 	.word	0x000015ed
    19dc:	40000c04 	.word	0x40000c04
    19e0:	0000162d 	.word	0x0000162d

000019e4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    19e4:	b570      	push	{r4, r5, r6, lr}
    19e6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19e8:	4a1a      	ldr	r2, [pc, #104]	; (1a54 <system_gclk_gen_get_hz+0x70>)
    19ea:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    19ec:	b25b      	sxtb	r3, r3
    19ee:	2b00      	cmp	r3, #0
    19f0:	dbfb      	blt.n	19ea <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    19f2:	4b19      	ldr	r3, [pc, #100]	; (1a58 <system_gclk_gen_get_hz+0x74>)
    19f4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    19f6:	4b19      	ldr	r3, [pc, #100]	; (1a5c <system_gclk_gen_get_hz+0x78>)
    19f8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19fa:	4a16      	ldr	r2, [pc, #88]	; (1a54 <system_gclk_gen_get_hz+0x70>)
    19fc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    19fe:	b25b      	sxtb	r3, r3
    1a00:	2b00      	cmp	r3, #0
    1a02:	dbfb      	blt.n	19fc <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1a04:	4e13      	ldr	r6, [pc, #76]	; (1a54 <system_gclk_gen_get_hz+0x70>)
    1a06:	6870      	ldr	r0, [r6, #4]
    1a08:	04c0      	lsls	r0, r0, #19
    1a0a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1a0c:	4b14      	ldr	r3, [pc, #80]	; (1a60 <system_gclk_gen_get_hz+0x7c>)
    1a0e:	4798      	blx	r3
    1a10:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1a12:	4b12      	ldr	r3, [pc, #72]	; (1a5c <system_gclk_gen_get_hz+0x78>)
    1a14:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1a16:	6876      	ldr	r6, [r6, #4]
    1a18:	02f6      	lsls	r6, r6, #11
    1a1a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1a1c:	4b11      	ldr	r3, [pc, #68]	; (1a64 <system_gclk_gen_get_hz+0x80>)
    1a1e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a20:	4a0c      	ldr	r2, [pc, #48]	; (1a54 <system_gclk_gen_get_hz+0x70>)
    1a22:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1a24:	b25b      	sxtb	r3, r3
    1a26:	2b00      	cmp	r3, #0
    1a28:	dbfb      	blt.n	1a22 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1a2a:	4b0a      	ldr	r3, [pc, #40]	; (1a54 <system_gclk_gen_get_hz+0x70>)
    1a2c:	689c      	ldr	r4, [r3, #8]
    1a2e:	0224      	lsls	r4, r4, #8
    1a30:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1a32:	4b0d      	ldr	r3, [pc, #52]	; (1a68 <system_gclk_gen_get_hz+0x84>)
    1a34:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1a36:	2e00      	cmp	r6, #0
    1a38:	d107      	bne.n	1a4a <system_gclk_gen_get_hz+0x66>
    1a3a:	2c01      	cmp	r4, #1
    1a3c:	d907      	bls.n	1a4e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1a3e:	0021      	movs	r1, r4
    1a40:	0028      	movs	r0, r5
    1a42:	4b0a      	ldr	r3, [pc, #40]	; (1a6c <system_gclk_gen_get_hz+0x88>)
    1a44:	4798      	blx	r3
    1a46:	0005      	movs	r5, r0
    1a48:	e001      	b.n	1a4e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1a4a:	3401      	adds	r4, #1
    1a4c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1a4e:	0028      	movs	r0, r5
    1a50:	bd70      	pop	{r4, r5, r6, pc}
    1a52:	46c0      	nop			; (mov r8, r8)
    1a54:	40000c00 	.word	0x40000c00
    1a58:	000015ed 	.word	0x000015ed
    1a5c:	40000c04 	.word	0x40000c04
    1a60:	000016b9 	.word	0x000016b9
    1a64:	40000c08 	.word	0x40000c08
    1a68:	0000162d 	.word	0x0000162d
    1a6c:	00001e25 	.word	0x00001e25

00001a70 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1a70:	b510      	push	{r4, lr}
    1a72:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a74:	4b06      	ldr	r3, [pc, #24]	; (1a90 <system_gclk_chan_enable+0x20>)
    1a76:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a78:	4b06      	ldr	r3, [pc, #24]	; (1a94 <system_gclk_chan_enable+0x24>)
    1a7a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1a7c:	4a06      	ldr	r2, [pc, #24]	; (1a98 <system_gclk_chan_enable+0x28>)
    1a7e:	8853      	ldrh	r3, [r2, #2]
    1a80:	2180      	movs	r1, #128	; 0x80
    1a82:	01c9      	lsls	r1, r1, #7
    1a84:	430b      	orrs	r3, r1
    1a86:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1a88:	4b04      	ldr	r3, [pc, #16]	; (1a9c <system_gclk_chan_enable+0x2c>)
    1a8a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a8c:	bd10      	pop	{r4, pc}
    1a8e:	46c0      	nop			; (mov r8, r8)
    1a90:	000015ed 	.word	0x000015ed
    1a94:	40000c02 	.word	0x40000c02
    1a98:	40000c00 	.word	0x40000c00
    1a9c:	0000162d 	.word	0x0000162d

00001aa0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1aa0:	b510      	push	{r4, lr}
    1aa2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1aa4:	4b0f      	ldr	r3, [pc, #60]	; (1ae4 <system_gclk_chan_disable+0x44>)
    1aa6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1aa8:	4b0f      	ldr	r3, [pc, #60]	; (1ae8 <system_gclk_chan_disable+0x48>)
    1aaa:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1aac:	4a0f      	ldr	r2, [pc, #60]	; (1aec <system_gclk_chan_disable+0x4c>)
    1aae:	8853      	ldrh	r3, [r2, #2]
    1ab0:	051b      	lsls	r3, r3, #20
    1ab2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1ab4:	8853      	ldrh	r3, [r2, #2]
    1ab6:	490e      	ldr	r1, [pc, #56]	; (1af0 <system_gclk_chan_disable+0x50>)
    1ab8:	400b      	ands	r3, r1
    1aba:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1abc:	8853      	ldrh	r3, [r2, #2]
    1abe:	490d      	ldr	r1, [pc, #52]	; (1af4 <system_gclk_chan_disable+0x54>)
    1ac0:	400b      	ands	r3, r1
    1ac2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1ac4:	0011      	movs	r1, r2
    1ac6:	2280      	movs	r2, #128	; 0x80
    1ac8:	01d2      	lsls	r2, r2, #7
    1aca:	884b      	ldrh	r3, [r1, #2]
    1acc:	4213      	tst	r3, r2
    1ace:	d1fc      	bne.n	1aca <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1ad0:	4906      	ldr	r1, [pc, #24]	; (1aec <system_gclk_chan_disable+0x4c>)
    1ad2:	884a      	ldrh	r2, [r1, #2]
    1ad4:	0203      	lsls	r3, r0, #8
    1ad6:	4806      	ldr	r0, [pc, #24]	; (1af0 <system_gclk_chan_disable+0x50>)
    1ad8:	4002      	ands	r2, r0
    1ada:	4313      	orrs	r3, r2
    1adc:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1ade:	4b06      	ldr	r3, [pc, #24]	; (1af8 <system_gclk_chan_disable+0x58>)
    1ae0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1ae2:	bd10      	pop	{r4, pc}
    1ae4:	000015ed 	.word	0x000015ed
    1ae8:	40000c02 	.word	0x40000c02
    1aec:	40000c00 	.word	0x40000c00
    1af0:	fffff0ff 	.word	0xfffff0ff
    1af4:	ffffbfff 	.word	0xffffbfff
    1af8:	0000162d 	.word	0x0000162d

00001afc <system_gclk_chan_set_config>:
{
    1afc:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1afe:	780c      	ldrb	r4, [r1, #0]
    1b00:	0224      	lsls	r4, r4, #8
    1b02:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1b04:	4b02      	ldr	r3, [pc, #8]	; (1b10 <system_gclk_chan_set_config+0x14>)
    1b06:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1b08:	b2a4      	uxth	r4, r4
    1b0a:	4b02      	ldr	r3, [pc, #8]	; (1b14 <system_gclk_chan_set_config+0x18>)
    1b0c:	805c      	strh	r4, [r3, #2]
}
    1b0e:	bd10      	pop	{r4, pc}
    1b10:	00001aa1 	.word	0x00001aa1
    1b14:	40000c00 	.word	0x40000c00

00001b18 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1b18:	b510      	push	{r4, lr}
    1b1a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1b1c:	4b06      	ldr	r3, [pc, #24]	; (1b38 <system_gclk_chan_get_hz+0x20>)
    1b1e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1b20:	4b06      	ldr	r3, [pc, #24]	; (1b3c <system_gclk_chan_get_hz+0x24>)
    1b22:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1b24:	4b06      	ldr	r3, [pc, #24]	; (1b40 <system_gclk_chan_get_hz+0x28>)
    1b26:	885c      	ldrh	r4, [r3, #2]
    1b28:	0524      	lsls	r4, r4, #20
    1b2a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1b2c:	4b05      	ldr	r3, [pc, #20]	; (1b44 <system_gclk_chan_get_hz+0x2c>)
    1b2e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1b30:	0020      	movs	r0, r4
    1b32:	4b05      	ldr	r3, [pc, #20]	; (1b48 <system_gclk_chan_get_hz+0x30>)
    1b34:	4798      	blx	r3
}
    1b36:	bd10      	pop	{r4, pc}
    1b38:	000015ed 	.word	0x000015ed
    1b3c:	40000c02 	.word	0x40000c02
    1b40:	40000c00 	.word	0x40000c00
    1b44:	0000162d 	.word	0x0000162d
    1b48:	000019e5 	.word	0x000019e5

00001b4c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1b4c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1b4e:	78d3      	ldrb	r3, [r2, #3]
    1b50:	2b00      	cmp	r3, #0
    1b52:	d135      	bne.n	1bc0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1b54:	7813      	ldrb	r3, [r2, #0]
    1b56:	2b80      	cmp	r3, #128	; 0x80
    1b58:	d029      	beq.n	1bae <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1b5a:	061b      	lsls	r3, r3, #24
    1b5c:	2480      	movs	r4, #128	; 0x80
    1b5e:	0264      	lsls	r4, r4, #9
    1b60:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1b62:	7854      	ldrb	r4, [r2, #1]
    1b64:	2502      	movs	r5, #2
    1b66:	43ac      	bics	r4, r5
    1b68:	d106      	bne.n	1b78 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1b6a:	7894      	ldrb	r4, [r2, #2]
    1b6c:	2c00      	cmp	r4, #0
    1b6e:	d120      	bne.n	1bb2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1b70:	2480      	movs	r4, #128	; 0x80
    1b72:	02a4      	lsls	r4, r4, #10
    1b74:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1b76:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b78:	7854      	ldrb	r4, [r2, #1]
    1b7a:	3c01      	subs	r4, #1
    1b7c:	2c01      	cmp	r4, #1
    1b7e:	d91c      	bls.n	1bba <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1b80:	040d      	lsls	r5, r1, #16
    1b82:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1b84:	24a0      	movs	r4, #160	; 0xa0
    1b86:	05e4      	lsls	r4, r4, #23
    1b88:	432c      	orrs	r4, r5
    1b8a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b8c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1b8e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b90:	24d0      	movs	r4, #208	; 0xd0
    1b92:	0624      	lsls	r4, r4, #24
    1b94:	432c      	orrs	r4, r5
    1b96:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b98:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1b9a:	78d4      	ldrb	r4, [r2, #3]
    1b9c:	2c00      	cmp	r4, #0
    1b9e:	d122      	bne.n	1be6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1ba0:	035b      	lsls	r3, r3, #13
    1ba2:	d51c      	bpl.n	1bde <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1ba4:	7893      	ldrb	r3, [r2, #2]
    1ba6:	2b01      	cmp	r3, #1
    1ba8:	d01e      	beq.n	1be8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1baa:	6141      	str	r1, [r0, #20]
    1bac:	e017      	b.n	1bde <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1bae:	2300      	movs	r3, #0
    1bb0:	e7d7      	b.n	1b62 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1bb2:	24c0      	movs	r4, #192	; 0xc0
    1bb4:	02e4      	lsls	r4, r4, #11
    1bb6:	4323      	orrs	r3, r4
    1bb8:	e7dd      	b.n	1b76 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1bba:	4c0d      	ldr	r4, [pc, #52]	; (1bf0 <_system_pinmux_config+0xa4>)
    1bbc:	4023      	ands	r3, r4
    1bbe:	e7df      	b.n	1b80 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1bc0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1bc2:	040c      	lsls	r4, r1, #16
    1bc4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1bc6:	23a0      	movs	r3, #160	; 0xa0
    1bc8:	05db      	lsls	r3, r3, #23
    1bca:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1bcc:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1bce:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1bd0:	23d0      	movs	r3, #208	; 0xd0
    1bd2:	061b      	lsls	r3, r3, #24
    1bd4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1bd6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1bd8:	78d3      	ldrb	r3, [r2, #3]
    1bda:	2b00      	cmp	r3, #0
    1bdc:	d103      	bne.n	1be6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1bde:	7853      	ldrb	r3, [r2, #1]
    1be0:	3b01      	subs	r3, #1
    1be2:	2b01      	cmp	r3, #1
    1be4:	d902      	bls.n	1bec <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1be6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1be8:	6181      	str	r1, [r0, #24]
    1bea:	e7f8      	b.n	1bde <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1bec:	6081      	str	r1, [r0, #8]
}
    1bee:	e7fa      	b.n	1be6 <_system_pinmux_config+0x9a>
    1bf0:	fffbffff 	.word	0xfffbffff

00001bf4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1bf4:	b510      	push	{r4, lr}
    1bf6:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1bf8:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1bfa:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1bfc:	2900      	cmp	r1, #0
    1bfe:	d104      	bne.n	1c0a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1c00:	0943      	lsrs	r3, r0, #5
    1c02:	01db      	lsls	r3, r3, #7
    1c04:	4905      	ldr	r1, [pc, #20]	; (1c1c <system_pinmux_pin_set_config+0x28>)
    1c06:	468c      	mov	ip, r1
    1c08:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1c0a:	241f      	movs	r4, #31
    1c0c:	4020      	ands	r0, r4
    1c0e:	2101      	movs	r1, #1
    1c10:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1c12:	0018      	movs	r0, r3
    1c14:	4b02      	ldr	r3, [pc, #8]	; (1c20 <system_pinmux_pin_set_config+0x2c>)
    1c16:	4798      	blx	r3
}
    1c18:	bd10      	pop	{r4, pc}
    1c1a:	46c0      	nop			; (mov r8, r8)
    1c1c:	41004400 	.word	0x41004400
    1c20:	00001b4d 	.word	0x00001b4d

00001c24 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1c24:	4770      	bx	lr
	...

00001c28 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1c28:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1c2a:	4b05      	ldr	r3, [pc, #20]	; (1c40 <system_init+0x18>)
    1c2c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1c2e:	4b05      	ldr	r3, [pc, #20]	; (1c44 <system_init+0x1c>)
    1c30:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1c32:	4b05      	ldr	r3, [pc, #20]	; (1c48 <system_init+0x20>)
    1c34:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1c36:	4b05      	ldr	r3, [pc, #20]	; (1c4c <system_init+0x24>)
    1c38:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1c3a:	4b05      	ldr	r3, [pc, #20]	; (1c50 <system_init+0x28>)
    1c3c:	4798      	blx	r3
}
    1c3e:	bd10      	pop	{r4, pc}
    1c40:	0000182d 	.word	0x0000182d
    1c44:	0000165d 	.word	0x0000165d
    1c48:	00001c25 	.word	0x00001c25
    1c4c:	00001c25 	.word	0x00001c25
    1c50:	00001c25 	.word	0x00001c25

00001c54 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1c54:	e7fe      	b.n	1c54 <Dummy_Handler>
	...

00001c58 <Reset_Handler>:
{
    1c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1c5a:	4a2a      	ldr	r2, [pc, #168]	; (1d04 <Reset_Handler+0xac>)
    1c5c:	4b2a      	ldr	r3, [pc, #168]	; (1d08 <Reset_Handler+0xb0>)
    1c5e:	429a      	cmp	r2, r3
    1c60:	d011      	beq.n	1c86 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1c62:	001a      	movs	r2, r3
    1c64:	4b29      	ldr	r3, [pc, #164]	; (1d0c <Reset_Handler+0xb4>)
    1c66:	429a      	cmp	r2, r3
    1c68:	d20d      	bcs.n	1c86 <Reset_Handler+0x2e>
    1c6a:	4a29      	ldr	r2, [pc, #164]	; (1d10 <Reset_Handler+0xb8>)
    1c6c:	3303      	adds	r3, #3
    1c6e:	1a9b      	subs	r3, r3, r2
    1c70:	089b      	lsrs	r3, r3, #2
    1c72:	3301      	adds	r3, #1
    1c74:	009b      	lsls	r3, r3, #2
    1c76:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1c78:	4823      	ldr	r0, [pc, #140]	; (1d08 <Reset_Handler+0xb0>)
    1c7a:	4922      	ldr	r1, [pc, #136]	; (1d04 <Reset_Handler+0xac>)
    1c7c:	588c      	ldr	r4, [r1, r2]
    1c7e:	5084      	str	r4, [r0, r2]
    1c80:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1c82:	429a      	cmp	r2, r3
    1c84:	d1fa      	bne.n	1c7c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1c86:	4a23      	ldr	r2, [pc, #140]	; (1d14 <Reset_Handler+0xbc>)
    1c88:	4b23      	ldr	r3, [pc, #140]	; (1d18 <Reset_Handler+0xc0>)
    1c8a:	429a      	cmp	r2, r3
    1c8c:	d20a      	bcs.n	1ca4 <Reset_Handler+0x4c>
    1c8e:	43d3      	mvns	r3, r2
    1c90:	4921      	ldr	r1, [pc, #132]	; (1d18 <Reset_Handler+0xc0>)
    1c92:	185b      	adds	r3, r3, r1
    1c94:	2103      	movs	r1, #3
    1c96:	438b      	bics	r3, r1
    1c98:	3304      	adds	r3, #4
    1c9a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1c9c:	2100      	movs	r1, #0
    1c9e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1ca0:	4293      	cmp	r3, r2
    1ca2:	d1fc      	bne.n	1c9e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1ca4:	4a1d      	ldr	r2, [pc, #116]	; (1d1c <Reset_Handler+0xc4>)
    1ca6:	21ff      	movs	r1, #255	; 0xff
    1ca8:	4b1d      	ldr	r3, [pc, #116]	; (1d20 <Reset_Handler+0xc8>)
    1caa:	438b      	bics	r3, r1
    1cac:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1cae:	39fd      	subs	r1, #253	; 0xfd
    1cb0:	2390      	movs	r3, #144	; 0x90
    1cb2:	005b      	lsls	r3, r3, #1
    1cb4:	4a1b      	ldr	r2, [pc, #108]	; (1d24 <Reset_Handler+0xcc>)
    1cb6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1cb8:	4a1b      	ldr	r2, [pc, #108]	; (1d28 <Reset_Handler+0xd0>)
    1cba:	78d3      	ldrb	r3, [r2, #3]
    1cbc:	2503      	movs	r5, #3
    1cbe:	43ab      	bics	r3, r5
    1cc0:	2402      	movs	r4, #2
    1cc2:	4323      	orrs	r3, r4
    1cc4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1cc6:	78d3      	ldrb	r3, [r2, #3]
    1cc8:	270c      	movs	r7, #12
    1cca:	43bb      	bics	r3, r7
    1ccc:	2608      	movs	r6, #8
    1cce:	4333      	orrs	r3, r6
    1cd0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1cd2:	4b16      	ldr	r3, [pc, #88]	; (1d2c <Reset_Handler+0xd4>)
    1cd4:	7b98      	ldrb	r0, [r3, #14]
    1cd6:	2230      	movs	r2, #48	; 0x30
    1cd8:	4390      	bics	r0, r2
    1cda:	2220      	movs	r2, #32
    1cdc:	4310      	orrs	r0, r2
    1cde:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1ce0:	7b99      	ldrb	r1, [r3, #14]
    1ce2:	43b9      	bics	r1, r7
    1ce4:	4331      	orrs	r1, r6
    1ce6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1ce8:	7b9a      	ldrb	r2, [r3, #14]
    1cea:	43aa      	bics	r2, r5
    1cec:	4322      	orrs	r2, r4
    1cee:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1cf0:	4a0f      	ldr	r2, [pc, #60]	; (1d30 <Reset_Handler+0xd8>)
    1cf2:	6853      	ldr	r3, [r2, #4]
    1cf4:	2180      	movs	r1, #128	; 0x80
    1cf6:	430b      	orrs	r3, r1
    1cf8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1cfa:	4b0e      	ldr	r3, [pc, #56]	; (1d34 <Reset_Handler+0xdc>)
    1cfc:	4798      	blx	r3
        main();
    1cfe:	4b0e      	ldr	r3, [pc, #56]	; (1d38 <Reset_Handler+0xe0>)
    1d00:	4798      	blx	r3
    1d02:	e7fe      	b.n	1d02 <Reset_Handler+0xaa>
    1d04:	00002bf8 	.word	0x00002bf8
    1d08:	20000000 	.word	0x20000000
    1d0c:	20000070 	.word	0x20000070
    1d10:	20000004 	.word	0x20000004
    1d14:	20000070 	.word	0x20000070
    1d18:	20000190 	.word	0x20000190
    1d1c:	e000ed00 	.word	0xe000ed00
    1d20:	00000000 	.word	0x00000000
    1d24:	41007000 	.word	0x41007000
    1d28:	41005000 	.word	0x41005000
    1d2c:	41004800 	.word	0x41004800
    1d30:	41004000 	.word	0x41004000
    1d34:	00001f91 	.word	0x00001f91
    1d38:	00001e11 	.word	0x00001e11

00001d3c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1d3c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1d3e:	4a06      	ldr	r2, [pc, #24]	; (1d58 <_sbrk+0x1c>)
    1d40:	6812      	ldr	r2, [r2, #0]
    1d42:	2a00      	cmp	r2, #0
    1d44:	d004      	beq.n	1d50 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1d46:	4a04      	ldr	r2, [pc, #16]	; (1d58 <_sbrk+0x1c>)
    1d48:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1d4a:	18c3      	adds	r3, r0, r3
    1d4c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1d4e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1d50:	4902      	ldr	r1, [pc, #8]	; (1d5c <_sbrk+0x20>)
    1d52:	4a01      	ldr	r2, [pc, #4]	; (1d58 <_sbrk+0x1c>)
    1d54:	6011      	str	r1, [r2, #0]
    1d56:	e7f6      	b.n	1d46 <_sbrk+0xa>
    1d58:	200000c8 	.word	0x200000c8
    1d5c:	20002190 	.word	0x20002190

00001d60 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1d60:	2001      	movs	r0, #1
    1d62:	4240      	negs	r0, r0
    1d64:	4770      	bx	lr

00001d66 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1d66:	2380      	movs	r3, #128	; 0x80
    1d68:	019b      	lsls	r3, r3, #6
    1d6a:	604b      	str	r3, [r1, #4]

	return 0;
}
    1d6c:	2000      	movs	r0, #0
    1d6e:	4770      	bx	lr

00001d70 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1d70:	2001      	movs	r0, #1
    1d72:	4770      	bx	lr

00001d74 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1d74:	2000      	movs	r0, #0
    1d76:	4770      	bx	lr

00001d78 <setup>:
#include <asf.h>
#include "TheArtist.h"

void setup() {
    1d78:	b530      	push	{r4, r5, lr}
    1d7a:	b083      	sub	sp, #12
	
	system_init();
    1d7c:	4b15      	ldr	r3, [pc, #84]	; (1dd4 <setup+0x5c>)
    1d7e:	4798      	blx	r3
	delay_init(); 
    1d80:	4b15      	ldr	r3, [pc, #84]	; (1dd8 <setup+0x60>)
    1d82:	4798      	blx	r3
	artist_usart_configure(&(artist.usart_instance));
    1d84:	4c15      	ldr	r4, [pc, #84]	; (1ddc <setup+0x64>)
    1d86:	0020      	movs	r0, r4
    1d88:	4b15      	ldr	r3, [pc, #84]	; (1de0 <setup+0x68>)
    1d8a:	4798      	blx	r3
	artist_motor_configure(&(artist.motor_instance_1),
    1d8c:	0020      	movs	r0, r4
    1d8e:	3034      	adds	r0, #52	; 0x34
    1d90:	2302      	movs	r3, #2
    1d92:	9300      	str	r3, [sp, #0]
    1d94:	2205      	movs	r2, #5
    1d96:	2112      	movs	r1, #18
    1d98:	4d12      	ldr	r5, [pc, #72]	; (1de4 <setup+0x6c>)
    1d9a:	47a8      	blx	r5
				CONF_ARTIST_MOTOR_1_PWM_PIN, CONF_ARTIST_MOTOR_1_PWM_MUX,
				CONF_ARTIST_MOTOR_1_PWM_CHANNEL, CONF_ARTIST_MOTOR_1_PWM_OUTPUT);
	artist_motor_configure(&(artist.motor_insntace_2),
    1d9c:	0020      	movs	r0, r4
    1d9e:	303a      	adds	r0, #58	; 0x3a
    1da0:	2303      	movs	r3, #3
    1da2:	9300      	str	r3, [sp, #0]
    1da4:	2205      	movs	r2, #5
    1da6:	2113      	movs	r1, #19
    1da8:	47a8      	blx	r5
				CONF_ARTIST_MOTOR_2_PWM_PIN, CONF_ARTIST_MOTOR_2_PWM_MUX ,
				CONF_ARTIST_MOTOR_2_PWM_CHANNEL, CONF_ARTIST_MOTOR_2_PWM_OUTPUT); 
	artist_motor_pwm_configure(&artist);
    1daa:	0020      	movs	r0, r4
    1dac:	3840      	subs	r0, #64	; 0x40
    1dae:	4b0e      	ldr	r3, [pc, #56]	; (1de8 <setup+0x70>)
    1db0:	4798      	blx	r3
	cpu_irq_enable();
    1db2:	2201      	movs	r2, #1
    1db4:	4b0d      	ldr	r3, [pc, #52]	; (1dec <setup+0x74>)
    1db6:	701a      	strb	r2, [r3, #0]
    1db8:	f3bf 8f5f 	dmb	sy
    1dbc:	b662      	cpsie	i
	
	system_interrupt_enable_global(); 
	
	// [listen on RX buffer]
	usart_read_buffer_job(&(artist.usart_instance),
    1dbe:	3204      	adds	r2, #4
    1dc0:	490b      	ldr	r1, [pc, #44]	; (1df0 <setup+0x78>)
    1dc2:	0020      	movs	r0, r4
    1dc4:	4b0b      	ldr	r3, [pc, #44]	; (1df4 <setup+0x7c>)
    1dc6:	4798      	blx	r3
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
	// ! [listen on RX buffer]
	
	printf("setup complete\n"); 
    1dc8:	480b      	ldr	r0, [pc, #44]	; (1df8 <setup+0x80>)
    1dca:	4b0c      	ldr	r3, [pc, #48]	; (1dfc <setup+0x84>)
    1dcc:	4798      	blx	r3
}
    1dce:	b003      	add	sp, #12
    1dd0:	bd30      	pop	{r4, r5, pc}
    1dd2:	46c0      	nop			; (mov r8, r8)
    1dd4:	00001c29 	.word	0x00001c29
    1dd8:	00001581 	.word	0x00001581
    1ddc:	20000120 	.word	0x20000120
    1de0:	00000669 	.word	0x00000669
    1de4:	0000051d 	.word	0x0000051d
    1de8:	00000775 	.word	0x00000775
    1dec:	20000008 	.word	0x20000008
    1df0:	20000160 	.word	0x20000160
    1df4:	000012fd 	.word	0x000012fd
    1df8:	00002b64 	.word	0x00002b64
    1dfc:	000020a9 	.word	0x000020a9

00001e00 <loop>:

void loop() {
    1e00:	b510      	push	{r4, lr}
	delay_ms(100); 
    1e02:	2064      	movs	r0, #100	; 0x64
    1e04:	4b01      	ldr	r3, [pc, #4]	; (1e0c <loop+0xc>)
    1e06:	4798      	blx	r3
}
    1e08:	bd10      	pop	{r4, pc}
    1e0a:	46c0      	nop			; (mov r8, r8)
    1e0c:	000015c1 	.word	0x000015c1

00001e10 <main>:

int main (void)
{
    1e10:	b510      	push	{r4, lr}
	
	setup (); 
    1e12:	4b02      	ldr	r3, [pc, #8]	; (1e1c <main+0xc>)
    1e14:	4798      	blx	r3

	while(true)	loop();	
    1e16:	4c02      	ldr	r4, [pc, #8]	; (1e20 <main+0x10>)
    1e18:	47a0      	blx	r4
    1e1a:	e7fd      	b.n	1e18 <main+0x8>
    1e1c:	00001d79 	.word	0x00001d79
    1e20:	00001e01 	.word	0x00001e01

00001e24 <__udivsi3>:
    1e24:	2200      	movs	r2, #0
    1e26:	0843      	lsrs	r3, r0, #1
    1e28:	428b      	cmp	r3, r1
    1e2a:	d374      	bcc.n	1f16 <__udivsi3+0xf2>
    1e2c:	0903      	lsrs	r3, r0, #4
    1e2e:	428b      	cmp	r3, r1
    1e30:	d35f      	bcc.n	1ef2 <__udivsi3+0xce>
    1e32:	0a03      	lsrs	r3, r0, #8
    1e34:	428b      	cmp	r3, r1
    1e36:	d344      	bcc.n	1ec2 <__udivsi3+0x9e>
    1e38:	0b03      	lsrs	r3, r0, #12
    1e3a:	428b      	cmp	r3, r1
    1e3c:	d328      	bcc.n	1e90 <__udivsi3+0x6c>
    1e3e:	0c03      	lsrs	r3, r0, #16
    1e40:	428b      	cmp	r3, r1
    1e42:	d30d      	bcc.n	1e60 <__udivsi3+0x3c>
    1e44:	22ff      	movs	r2, #255	; 0xff
    1e46:	0209      	lsls	r1, r1, #8
    1e48:	ba12      	rev	r2, r2
    1e4a:	0c03      	lsrs	r3, r0, #16
    1e4c:	428b      	cmp	r3, r1
    1e4e:	d302      	bcc.n	1e56 <__udivsi3+0x32>
    1e50:	1212      	asrs	r2, r2, #8
    1e52:	0209      	lsls	r1, r1, #8
    1e54:	d065      	beq.n	1f22 <__udivsi3+0xfe>
    1e56:	0b03      	lsrs	r3, r0, #12
    1e58:	428b      	cmp	r3, r1
    1e5a:	d319      	bcc.n	1e90 <__udivsi3+0x6c>
    1e5c:	e000      	b.n	1e60 <__udivsi3+0x3c>
    1e5e:	0a09      	lsrs	r1, r1, #8
    1e60:	0bc3      	lsrs	r3, r0, #15
    1e62:	428b      	cmp	r3, r1
    1e64:	d301      	bcc.n	1e6a <__udivsi3+0x46>
    1e66:	03cb      	lsls	r3, r1, #15
    1e68:	1ac0      	subs	r0, r0, r3
    1e6a:	4152      	adcs	r2, r2
    1e6c:	0b83      	lsrs	r3, r0, #14
    1e6e:	428b      	cmp	r3, r1
    1e70:	d301      	bcc.n	1e76 <__udivsi3+0x52>
    1e72:	038b      	lsls	r3, r1, #14
    1e74:	1ac0      	subs	r0, r0, r3
    1e76:	4152      	adcs	r2, r2
    1e78:	0b43      	lsrs	r3, r0, #13
    1e7a:	428b      	cmp	r3, r1
    1e7c:	d301      	bcc.n	1e82 <__udivsi3+0x5e>
    1e7e:	034b      	lsls	r3, r1, #13
    1e80:	1ac0      	subs	r0, r0, r3
    1e82:	4152      	adcs	r2, r2
    1e84:	0b03      	lsrs	r3, r0, #12
    1e86:	428b      	cmp	r3, r1
    1e88:	d301      	bcc.n	1e8e <__udivsi3+0x6a>
    1e8a:	030b      	lsls	r3, r1, #12
    1e8c:	1ac0      	subs	r0, r0, r3
    1e8e:	4152      	adcs	r2, r2
    1e90:	0ac3      	lsrs	r3, r0, #11
    1e92:	428b      	cmp	r3, r1
    1e94:	d301      	bcc.n	1e9a <__udivsi3+0x76>
    1e96:	02cb      	lsls	r3, r1, #11
    1e98:	1ac0      	subs	r0, r0, r3
    1e9a:	4152      	adcs	r2, r2
    1e9c:	0a83      	lsrs	r3, r0, #10
    1e9e:	428b      	cmp	r3, r1
    1ea0:	d301      	bcc.n	1ea6 <__udivsi3+0x82>
    1ea2:	028b      	lsls	r3, r1, #10
    1ea4:	1ac0      	subs	r0, r0, r3
    1ea6:	4152      	adcs	r2, r2
    1ea8:	0a43      	lsrs	r3, r0, #9
    1eaa:	428b      	cmp	r3, r1
    1eac:	d301      	bcc.n	1eb2 <__udivsi3+0x8e>
    1eae:	024b      	lsls	r3, r1, #9
    1eb0:	1ac0      	subs	r0, r0, r3
    1eb2:	4152      	adcs	r2, r2
    1eb4:	0a03      	lsrs	r3, r0, #8
    1eb6:	428b      	cmp	r3, r1
    1eb8:	d301      	bcc.n	1ebe <__udivsi3+0x9a>
    1eba:	020b      	lsls	r3, r1, #8
    1ebc:	1ac0      	subs	r0, r0, r3
    1ebe:	4152      	adcs	r2, r2
    1ec0:	d2cd      	bcs.n	1e5e <__udivsi3+0x3a>
    1ec2:	09c3      	lsrs	r3, r0, #7
    1ec4:	428b      	cmp	r3, r1
    1ec6:	d301      	bcc.n	1ecc <__udivsi3+0xa8>
    1ec8:	01cb      	lsls	r3, r1, #7
    1eca:	1ac0      	subs	r0, r0, r3
    1ecc:	4152      	adcs	r2, r2
    1ece:	0983      	lsrs	r3, r0, #6
    1ed0:	428b      	cmp	r3, r1
    1ed2:	d301      	bcc.n	1ed8 <__udivsi3+0xb4>
    1ed4:	018b      	lsls	r3, r1, #6
    1ed6:	1ac0      	subs	r0, r0, r3
    1ed8:	4152      	adcs	r2, r2
    1eda:	0943      	lsrs	r3, r0, #5
    1edc:	428b      	cmp	r3, r1
    1ede:	d301      	bcc.n	1ee4 <__udivsi3+0xc0>
    1ee0:	014b      	lsls	r3, r1, #5
    1ee2:	1ac0      	subs	r0, r0, r3
    1ee4:	4152      	adcs	r2, r2
    1ee6:	0903      	lsrs	r3, r0, #4
    1ee8:	428b      	cmp	r3, r1
    1eea:	d301      	bcc.n	1ef0 <__udivsi3+0xcc>
    1eec:	010b      	lsls	r3, r1, #4
    1eee:	1ac0      	subs	r0, r0, r3
    1ef0:	4152      	adcs	r2, r2
    1ef2:	08c3      	lsrs	r3, r0, #3
    1ef4:	428b      	cmp	r3, r1
    1ef6:	d301      	bcc.n	1efc <__udivsi3+0xd8>
    1ef8:	00cb      	lsls	r3, r1, #3
    1efa:	1ac0      	subs	r0, r0, r3
    1efc:	4152      	adcs	r2, r2
    1efe:	0883      	lsrs	r3, r0, #2
    1f00:	428b      	cmp	r3, r1
    1f02:	d301      	bcc.n	1f08 <__udivsi3+0xe4>
    1f04:	008b      	lsls	r3, r1, #2
    1f06:	1ac0      	subs	r0, r0, r3
    1f08:	4152      	adcs	r2, r2
    1f0a:	0843      	lsrs	r3, r0, #1
    1f0c:	428b      	cmp	r3, r1
    1f0e:	d301      	bcc.n	1f14 <__udivsi3+0xf0>
    1f10:	004b      	lsls	r3, r1, #1
    1f12:	1ac0      	subs	r0, r0, r3
    1f14:	4152      	adcs	r2, r2
    1f16:	1a41      	subs	r1, r0, r1
    1f18:	d200      	bcs.n	1f1c <__udivsi3+0xf8>
    1f1a:	4601      	mov	r1, r0
    1f1c:	4152      	adcs	r2, r2
    1f1e:	4610      	mov	r0, r2
    1f20:	4770      	bx	lr
    1f22:	e7ff      	b.n	1f24 <__udivsi3+0x100>
    1f24:	b501      	push	{r0, lr}
    1f26:	2000      	movs	r0, #0
    1f28:	f000 f806 	bl	1f38 <__aeabi_idiv0>
    1f2c:	bd02      	pop	{r1, pc}
    1f2e:	46c0      	nop			; (mov r8, r8)

00001f30 <__aeabi_uidivmod>:
    1f30:	2900      	cmp	r1, #0
    1f32:	d0f7      	beq.n	1f24 <__udivsi3+0x100>
    1f34:	e776      	b.n	1e24 <__udivsi3>
    1f36:	4770      	bx	lr

00001f38 <__aeabi_idiv0>:
    1f38:	4770      	bx	lr
    1f3a:	46c0      	nop			; (mov r8, r8)

00001f3c <__aeabi_lmul>:
    1f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f3e:	46ce      	mov	lr, r9
    1f40:	4647      	mov	r7, r8
    1f42:	0415      	lsls	r5, r2, #16
    1f44:	0c2d      	lsrs	r5, r5, #16
    1f46:	002e      	movs	r6, r5
    1f48:	b580      	push	{r7, lr}
    1f4a:	0407      	lsls	r7, r0, #16
    1f4c:	0c14      	lsrs	r4, r2, #16
    1f4e:	0c3f      	lsrs	r7, r7, #16
    1f50:	4699      	mov	r9, r3
    1f52:	0c03      	lsrs	r3, r0, #16
    1f54:	437e      	muls	r6, r7
    1f56:	435d      	muls	r5, r3
    1f58:	4367      	muls	r7, r4
    1f5a:	4363      	muls	r3, r4
    1f5c:	197f      	adds	r7, r7, r5
    1f5e:	0c34      	lsrs	r4, r6, #16
    1f60:	19e4      	adds	r4, r4, r7
    1f62:	469c      	mov	ip, r3
    1f64:	42a5      	cmp	r5, r4
    1f66:	d903      	bls.n	1f70 <__aeabi_lmul+0x34>
    1f68:	2380      	movs	r3, #128	; 0x80
    1f6a:	025b      	lsls	r3, r3, #9
    1f6c:	4698      	mov	r8, r3
    1f6e:	44c4      	add	ip, r8
    1f70:	464b      	mov	r3, r9
    1f72:	4351      	muls	r1, r2
    1f74:	4343      	muls	r3, r0
    1f76:	0436      	lsls	r6, r6, #16
    1f78:	0c36      	lsrs	r6, r6, #16
    1f7a:	0c25      	lsrs	r5, r4, #16
    1f7c:	0424      	lsls	r4, r4, #16
    1f7e:	4465      	add	r5, ip
    1f80:	19a4      	adds	r4, r4, r6
    1f82:	1859      	adds	r1, r3, r1
    1f84:	1949      	adds	r1, r1, r5
    1f86:	0020      	movs	r0, r4
    1f88:	bc0c      	pop	{r2, r3}
    1f8a:	4690      	mov	r8, r2
    1f8c:	4699      	mov	r9, r3
    1f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001f90 <__libc_init_array>:
    1f90:	b570      	push	{r4, r5, r6, lr}
    1f92:	2600      	movs	r6, #0
    1f94:	4d0c      	ldr	r5, [pc, #48]	; (1fc8 <__libc_init_array+0x38>)
    1f96:	4c0d      	ldr	r4, [pc, #52]	; (1fcc <__libc_init_array+0x3c>)
    1f98:	1b64      	subs	r4, r4, r5
    1f9a:	10a4      	asrs	r4, r4, #2
    1f9c:	42a6      	cmp	r6, r4
    1f9e:	d109      	bne.n	1fb4 <__libc_init_array+0x24>
    1fa0:	2600      	movs	r6, #0
    1fa2:	f000 fe19 	bl	2bd8 <_init>
    1fa6:	4d0a      	ldr	r5, [pc, #40]	; (1fd0 <__libc_init_array+0x40>)
    1fa8:	4c0a      	ldr	r4, [pc, #40]	; (1fd4 <__libc_init_array+0x44>)
    1faa:	1b64      	subs	r4, r4, r5
    1fac:	10a4      	asrs	r4, r4, #2
    1fae:	42a6      	cmp	r6, r4
    1fb0:	d105      	bne.n	1fbe <__libc_init_array+0x2e>
    1fb2:	bd70      	pop	{r4, r5, r6, pc}
    1fb4:	00b3      	lsls	r3, r6, #2
    1fb6:	58eb      	ldr	r3, [r5, r3]
    1fb8:	4798      	blx	r3
    1fba:	3601      	adds	r6, #1
    1fbc:	e7ee      	b.n	1f9c <__libc_init_array+0xc>
    1fbe:	00b3      	lsls	r3, r6, #2
    1fc0:	58eb      	ldr	r3, [r5, r3]
    1fc2:	4798      	blx	r3
    1fc4:	3601      	adds	r6, #1
    1fc6:	e7f2      	b.n	1fae <__libc_init_array+0x1e>
    1fc8:	00002be4 	.word	0x00002be4
    1fcc:	00002be4 	.word	0x00002be4
    1fd0:	00002be4 	.word	0x00002be4
    1fd4:	00002be8 	.word	0x00002be8

00001fd8 <memset>:
    1fd8:	0003      	movs	r3, r0
    1fda:	1882      	adds	r2, r0, r2
    1fdc:	4293      	cmp	r3, r2
    1fde:	d100      	bne.n	1fe2 <memset+0xa>
    1fe0:	4770      	bx	lr
    1fe2:	7019      	strb	r1, [r3, #0]
    1fe4:	3301      	adds	r3, #1
    1fe6:	e7f9      	b.n	1fdc <memset+0x4>

00001fe8 <_puts_r>:
    1fe8:	b570      	push	{r4, r5, r6, lr}
    1fea:	0005      	movs	r5, r0
    1fec:	000e      	movs	r6, r1
    1fee:	2800      	cmp	r0, #0
    1ff0:	d004      	beq.n	1ffc <_puts_r+0x14>
    1ff2:	6983      	ldr	r3, [r0, #24]
    1ff4:	2b00      	cmp	r3, #0
    1ff6:	d101      	bne.n	1ffc <_puts_r+0x14>
    1ff8:	f000 fada 	bl	25b0 <__sinit>
    1ffc:	69ab      	ldr	r3, [r5, #24]
    1ffe:	68ac      	ldr	r4, [r5, #8]
    2000:	2b00      	cmp	r3, #0
    2002:	d102      	bne.n	200a <STACK_SIZE+0xa>
    2004:	0028      	movs	r0, r5
    2006:	f000 fad3 	bl	25b0 <__sinit>
    200a:	4b24      	ldr	r3, [pc, #144]	; (209c <STACK_SIZE+0x9c>)
    200c:	429c      	cmp	r4, r3
    200e:	d10f      	bne.n	2030 <STACK_SIZE+0x30>
    2010:	686c      	ldr	r4, [r5, #4]
    2012:	89a3      	ldrh	r3, [r4, #12]
    2014:	071b      	lsls	r3, r3, #28
    2016:	d502      	bpl.n	201e <STACK_SIZE+0x1e>
    2018:	6923      	ldr	r3, [r4, #16]
    201a:	2b00      	cmp	r3, #0
    201c:	d120      	bne.n	2060 <STACK_SIZE+0x60>
    201e:	0021      	movs	r1, r4
    2020:	0028      	movs	r0, r5
    2022:	f000 f957 	bl	22d4 <__swsetup_r>
    2026:	2800      	cmp	r0, #0
    2028:	d01a      	beq.n	2060 <STACK_SIZE+0x60>
    202a:	2001      	movs	r0, #1
    202c:	4240      	negs	r0, r0
    202e:	bd70      	pop	{r4, r5, r6, pc}
    2030:	4b1b      	ldr	r3, [pc, #108]	; (20a0 <STACK_SIZE+0xa0>)
    2032:	429c      	cmp	r4, r3
    2034:	d101      	bne.n	203a <STACK_SIZE+0x3a>
    2036:	68ac      	ldr	r4, [r5, #8]
    2038:	e7eb      	b.n	2012 <STACK_SIZE+0x12>
    203a:	4b1a      	ldr	r3, [pc, #104]	; (20a4 <STACK_SIZE+0xa4>)
    203c:	429c      	cmp	r4, r3
    203e:	d1e8      	bne.n	2012 <STACK_SIZE+0x12>
    2040:	68ec      	ldr	r4, [r5, #12]
    2042:	e7e6      	b.n	2012 <STACK_SIZE+0x12>
    2044:	3b01      	subs	r3, #1
    2046:	3601      	adds	r6, #1
    2048:	60a3      	str	r3, [r4, #8]
    204a:	2b00      	cmp	r3, #0
    204c:	da04      	bge.n	2058 <STACK_SIZE+0x58>
    204e:	69a2      	ldr	r2, [r4, #24]
    2050:	4293      	cmp	r3, r2
    2052:	db16      	blt.n	2082 <STACK_SIZE+0x82>
    2054:	290a      	cmp	r1, #10
    2056:	d014      	beq.n	2082 <STACK_SIZE+0x82>
    2058:	6823      	ldr	r3, [r4, #0]
    205a:	1c5a      	adds	r2, r3, #1
    205c:	6022      	str	r2, [r4, #0]
    205e:	7019      	strb	r1, [r3, #0]
    2060:	7831      	ldrb	r1, [r6, #0]
    2062:	68a3      	ldr	r3, [r4, #8]
    2064:	2900      	cmp	r1, #0
    2066:	d1ed      	bne.n	2044 <STACK_SIZE+0x44>
    2068:	3b01      	subs	r3, #1
    206a:	60a3      	str	r3, [r4, #8]
    206c:	2b00      	cmp	r3, #0
    206e:	da0f      	bge.n	2090 <STACK_SIZE+0x90>
    2070:	0022      	movs	r2, r4
    2072:	310a      	adds	r1, #10
    2074:	0028      	movs	r0, r5
    2076:	f000 f8d7 	bl	2228 <__swbuf_r>
    207a:	1c43      	adds	r3, r0, #1
    207c:	d0d5      	beq.n	202a <STACK_SIZE+0x2a>
    207e:	200a      	movs	r0, #10
    2080:	e7d5      	b.n	202e <STACK_SIZE+0x2e>
    2082:	0022      	movs	r2, r4
    2084:	0028      	movs	r0, r5
    2086:	f000 f8cf 	bl	2228 <__swbuf_r>
    208a:	1c43      	adds	r3, r0, #1
    208c:	d1e8      	bne.n	2060 <STACK_SIZE+0x60>
    208e:	e7cc      	b.n	202a <STACK_SIZE+0x2a>
    2090:	200a      	movs	r0, #10
    2092:	6823      	ldr	r3, [r4, #0]
    2094:	1c5a      	adds	r2, r3, #1
    2096:	6022      	str	r2, [r4, #0]
    2098:	7018      	strb	r0, [r3, #0]
    209a:	e7c8      	b.n	202e <STACK_SIZE+0x2e>
    209c:	00002b98 	.word	0x00002b98
    20a0:	00002bb8 	.word	0x00002bb8
    20a4:	00002b78 	.word	0x00002b78

000020a8 <puts>:
    20a8:	b510      	push	{r4, lr}
    20aa:	4b03      	ldr	r3, [pc, #12]	; (20b8 <puts+0x10>)
    20ac:	0001      	movs	r1, r0
    20ae:	6818      	ldr	r0, [r3, #0]
    20b0:	f7ff ff9a 	bl	1fe8 <_puts_r>
    20b4:	bd10      	pop	{r4, pc}
    20b6:	46c0      	nop			; (mov r8, r8)
    20b8:	2000000c 	.word	0x2000000c

000020bc <setbuf>:
    20bc:	424a      	negs	r2, r1
    20be:	414a      	adcs	r2, r1
    20c0:	2380      	movs	r3, #128	; 0x80
    20c2:	b510      	push	{r4, lr}
    20c4:	0052      	lsls	r2, r2, #1
    20c6:	00db      	lsls	r3, r3, #3
    20c8:	f000 f802 	bl	20d0 <setvbuf>
    20cc:	bd10      	pop	{r4, pc}
	...

000020d0 <setvbuf>:
    20d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20d2:	001d      	movs	r5, r3
    20d4:	4b4f      	ldr	r3, [pc, #316]	; (2214 <setvbuf+0x144>)
    20d6:	b085      	sub	sp, #20
    20d8:	681e      	ldr	r6, [r3, #0]
    20da:	0004      	movs	r4, r0
    20dc:	000f      	movs	r7, r1
    20de:	9200      	str	r2, [sp, #0]
    20e0:	2e00      	cmp	r6, #0
    20e2:	d005      	beq.n	20f0 <setvbuf+0x20>
    20e4:	69b3      	ldr	r3, [r6, #24]
    20e6:	2b00      	cmp	r3, #0
    20e8:	d102      	bne.n	20f0 <setvbuf+0x20>
    20ea:	0030      	movs	r0, r6
    20ec:	f000 fa60 	bl	25b0 <__sinit>
    20f0:	4b49      	ldr	r3, [pc, #292]	; (2218 <setvbuf+0x148>)
    20f2:	429c      	cmp	r4, r3
    20f4:	d150      	bne.n	2198 <setvbuf+0xc8>
    20f6:	6874      	ldr	r4, [r6, #4]
    20f8:	9b00      	ldr	r3, [sp, #0]
    20fa:	2b02      	cmp	r3, #2
    20fc:	d005      	beq.n	210a <setvbuf+0x3a>
    20fe:	2b01      	cmp	r3, #1
    2100:	d900      	bls.n	2104 <setvbuf+0x34>
    2102:	e084      	b.n	220e <setvbuf+0x13e>
    2104:	2d00      	cmp	r5, #0
    2106:	da00      	bge.n	210a <setvbuf+0x3a>
    2108:	e081      	b.n	220e <setvbuf+0x13e>
    210a:	0021      	movs	r1, r4
    210c:	0030      	movs	r0, r6
    210e:	f000 f9e1 	bl	24d4 <_fflush_r>
    2112:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2114:	2900      	cmp	r1, #0
    2116:	d008      	beq.n	212a <setvbuf+0x5a>
    2118:	0023      	movs	r3, r4
    211a:	3344      	adds	r3, #68	; 0x44
    211c:	4299      	cmp	r1, r3
    211e:	d002      	beq.n	2126 <setvbuf+0x56>
    2120:	0030      	movs	r0, r6
    2122:	f000 fb4b 	bl	27bc <_free_r>
    2126:	2300      	movs	r3, #0
    2128:	6363      	str	r3, [r4, #52]	; 0x34
    212a:	2300      	movs	r3, #0
    212c:	61a3      	str	r3, [r4, #24]
    212e:	6063      	str	r3, [r4, #4]
    2130:	89a3      	ldrh	r3, [r4, #12]
    2132:	061b      	lsls	r3, r3, #24
    2134:	d503      	bpl.n	213e <setvbuf+0x6e>
    2136:	6921      	ldr	r1, [r4, #16]
    2138:	0030      	movs	r0, r6
    213a:	f000 fb3f 	bl	27bc <_free_r>
    213e:	89a3      	ldrh	r3, [r4, #12]
    2140:	4a36      	ldr	r2, [pc, #216]	; (221c <setvbuf+0x14c>)
    2142:	4013      	ands	r3, r2
    2144:	81a3      	strh	r3, [r4, #12]
    2146:	9b00      	ldr	r3, [sp, #0]
    2148:	2b02      	cmp	r3, #2
    214a:	d05a      	beq.n	2202 <setvbuf+0x132>
    214c:	ab03      	add	r3, sp, #12
    214e:	aa02      	add	r2, sp, #8
    2150:	0021      	movs	r1, r4
    2152:	0030      	movs	r0, r6
    2154:	f000 fac2 	bl	26dc <__swhatbuf_r>
    2158:	89a3      	ldrh	r3, [r4, #12]
    215a:	4318      	orrs	r0, r3
    215c:	81a0      	strh	r0, [r4, #12]
    215e:	2d00      	cmp	r5, #0
    2160:	d124      	bne.n	21ac <setvbuf+0xdc>
    2162:	9d02      	ldr	r5, [sp, #8]
    2164:	0028      	movs	r0, r5
    2166:	f000 fb1f 	bl	27a8 <malloc>
    216a:	9501      	str	r5, [sp, #4]
    216c:	1e07      	subs	r7, r0, #0
    216e:	d142      	bne.n	21f6 <setvbuf+0x126>
    2170:	9b02      	ldr	r3, [sp, #8]
    2172:	9301      	str	r3, [sp, #4]
    2174:	42ab      	cmp	r3, r5
    2176:	d139      	bne.n	21ec <setvbuf+0x11c>
    2178:	2001      	movs	r0, #1
    217a:	4240      	negs	r0, r0
    217c:	2302      	movs	r3, #2
    217e:	89a2      	ldrh	r2, [r4, #12]
    2180:	4313      	orrs	r3, r2
    2182:	81a3      	strh	r3, [r4, #12]
    2184:	2300      	movs	r3, #0
    2186:	60a3      	str	r3, [r4, #8]
    2188:	0023      	movs	r3, r4
    218a:	3347      	adds	r3, #71	; 0x47
    218c:	6023      	str	r3, [r4, #0]
    218e:	6123      	str	r3, [r4, #16]
    2190:	2301      	movs	r3, #1
    2192:	6163      	str	r3, [r4, #20]
    2194:	b005      	add	sp, #20
    2196:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2198:	4b21      	ldr	r3, [pc, #132]	; (2220 <setvbuf+0x150>)
    219a:	429c      	cmp	r4, r3
    219c:	d101      	bne.n	21a2 <setvbuf+0xd2>
    219e:	68b4      	ldr	r4, [r6, #8]
    21a0:	e7aa      	b.n	20f8 <setvbuf+0x28>
    21a2:	4b20      	ldr	r3, [pc, #128]	; (2224 <setvbuf+0x154>)
    21a4:	429c      	cmp	r4, r3
    21a6:	d1a7      	bne.n	20f8 <setvbuf+0x28>
    21a8:	68f4      	ldr	r4, [r6, #12]
    21aa:	e7a5      	b.n	20f8 <setvbuf+0x28>
    21ac:	2f00      	cmp	r7, #0
    21ae:	d0d9      	beq.n	2164 <setvbuf+0x94>
    21b0:	69b3      	ldr	r3, [r6, #24]
    21b2:	2b00      	cmp	r3, #0
    21b4:	d102      	bne.n	21bc <setvbuf+0xec>
    21b6:	0030      	movs	r0, r6
    21b8:	f000 f9fa 	bl	25b0 <__sinit>
    21bc:	9b00      	ldr	r3, [sp, #0]
    21be:	2b01      	cmp	r3, #1
    21c0:	d103      	bne.n	21ca <setvbuf+0xfa>
    21c2:	89a3      	ldrh	r3, [r4, #12]
    21c4:	9a00      	ldr	r2, [sp, #0]
    21c6:	431a      	orrs	r2, r3
    21c8:	81a2      	strh	r2, [r4, #12]
    21ca:	2008      	movs	r0, #8
    21cc:	89a3      	ldrh	r3, [r4, #12]
    21ce:	6027      	str	r7, [r4, #0]
    21d0:	6127      	str	r7, [r4, #16]
    21d2:	6165      	str	r5, [r4, #20]
    21d4:	4018      	ands	r0, r3
    21d6:	d018      	beq.n	220a <setvbuf+0x13a>
    21d8:	2001      	movs	r0, #1
    21da:	4018      	ands	r0, r3
    21dc:	2300      	movs	r3, #0
    21de:	4298      	cmp	r0, r3
    21e0:	d011      	beq.n	2206 <setvbuf+0x136>
    21e2:	426d      	negs	r5, r5
    21e4:	60a3      	str	r3, [r4, #8]
    21e6:	61a5      	str	r5, [r4, #24]
    21e8:	0018      	movs	r0, r3
    21ea:	e7d3      	b.n	2194 <setvbuf+0xc4>
    21ec:	9801      	ldr	r0, [sp, #4]
    21ee:	f000 fadb 	bl	27a8 <malloc>
    21f2:	1e07      	subs	r7, r0, #0
    21f4:	d0c0      	beq.n	2178 <setvbuf+0xa8>
    21f6:	2380      	movs	r3, #128	; 0x80
    21f8:	89a2      	ldrh	r2, [r4, #12]
    21fa:	9d01      	ldr	r5, [sp, #4]
    21fc:	4313      	orrs	r3, r2
    21fe:	81a3      	strh	r3, [r4, #12]
    2200:	e7d6      	b.n	21b0 <setvbuf+0xe0>
    2202:	2000      	movs	r0, #0
    2204:	e7ba      	b.n	217c <setvbuf+0xac>
    2206:	60a5      	str	r5, [r4, #8]
    2208:	e7c4      	b.n	2194 <setvbuf+0xc4>
    220a:	60a0      	str	r0, [r4, #8]
    220c:	e7c2      	b.n	2194 <setvbuf+0xc4>
    220e:	2001      	movs	r0, #1
    2210:	4240      	negs	r0, r0
    2212:	e7bf      	b.n	2194 <setvbuf+0xc4>
    2214:	2000000c 	.word	0x2000000c
    2218:	00002b98 	.word	0x00002b98
    221c:	fffff35c 	.word	0xfffff35c
    2220:	00002bb8 	.word	0x00002bb8
    2224:	00002b78 	.word	0x00002b78

00002228 <__swbuf_r>:
    2228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    222a:	0005      	movs	r5, r0
    222c:	000e      	movs	r6, r1
    222e:	0014      	movs	r4, r2
    2230:	2800      	cmp	r0, #0
    2232:	d004      	beq.n	223e <__swbuf_r+0x16>
    2234:	6983      	ldr	r3, [r0, #24]
    2236:	2b00      	cmp	r3, #0
    2238:	d101      	bne.n	223e <__swbuf_r+0x16>
    223a:	f000 f9b9 	bl	25b0 <__sinit>
    223e:	4b22      	ldr	r3, [pc, #136]	; (22c8 <__swbuf_r+0xa0>)
    2240:	429c      	cmp	r4, r3
    2242:	d12d      	bne.n	22a0 <__swbuf_r+0x78>
    2244:	686c      	ldr	r4, [r5, #4]
    2246:	69a3      	ldr	r3, [r4, #24]
    2248:	60a3      	str	r3, [r4, #8]
    224a:	89a3      	ldrh	r3, [r4, #12]
    224c:	071b      	lsls	r3, r3, #28
    224e:	d531      	bpl.n	22b4 <__swbuf_r+0x8c>
    2250:	6923      	ldr	r3, [r4, #16]
    2252:	2b00      	cmp	r3, #0
    2254:	d02e      	beq.n	22b4 <__swbuf_r+0x8c>
    2256:	6823      	ldr	r3, [r4, #0]
    2258:	6922      	ldr	r2, [r4, #16]
    225a:	b2f7      	uxtb	r7, r6
    225c:	1a98      	subs	r0, r3, r2
    225e:	6963      	ldr	r3, [r4, #20]
    2260:	b2f6      	uxtb	r6, r6
    2262:	4298      	cmp	r0, r3
    2264:	db05      	blt.n	2272 <__swbuf_r+0x4a>
    2266:	0021      	movs	r1, r4
    2268:	0028      	movs	r0, r5
    226a:	f000 f933 	bl	24d4 <_fflush_r>
    226e:	2800      	cmp	r0, #0
    2270:	d126      	bne.n	22c0 <__swbuf_r+0x98>
    2272:	68a3      	ldr	r3, [r4, #8]
    2274:	3001      	adds	r0, #1
    2276:	3b01      	subs	r3, #1
    2278:	60a3      	str	r3, [r4, #8]
    227a:	6823      	ldr	r3, [r4, #0]
    227c:	1c5a      	adds	r2, r3, #1
    227e:	6022      	str	r2, [r4, #0]
    2280:	701f      	strb	r7, [r3, #0]
    2282:	6963      	ldr	r3, [r4, #20]
    2284:	4298      	cmp	r0, r3
    2286:	d004      	beq.n	2292 <__swbuf_r+0x6a>
    2288:	89a3      	ldrh	r3, [r4, #12]
    228a:	07db      	lsls	r3, r3, #31
    228c:	d51a      	bpl.n	22c4 <__swbuf_r+0x9c>
    228e:	2e0a      	cmp	r6, #10
    2290:	d118      	bne.n	22c4 <__swbuf_r+0x9c>
    2292:	0021      	movs	r1, r4
    2294:	0028      	movs	r0, r5
    2296:	f000 f91d 	bl	24d4 <_fflush_r>
    229a:	2800      	cmp	r0, #0
    229c:	d012      	beq.n	22c4 <__swbuf_r+0x9c>
    229e:	e00f      	b.n	22c0 <__swbuf_r+0x98>
    22a0:	4b0a      	ldr	r3, [pc, #40]	; (22cc <__swbuf_r+0xa4>)
    22a2:	429c      	cmp	r4, r3
    22a4:	d101      	bne.n	22aa <__swbuf_r+0x82>
    22a6:	68ac      	ldr	r4, [r5, #8]
    22a8:	e7cd      	b.n	2246 <__swbuf_r+0x1e>
    22aa:	4b09      	ldr	r3, [pc, #36]	; (22d0 <__swbuf_r+0xa8>)
    22ac:	429c      	cmp	r4, r3
    22ae:	d1ca      	bne.n	2246 <__swbuf_r+0x1e>
    22b0:	68ec      	ldr	r4, [r5, #12]
    22b2:	e7c8      	b.n	2246 <__swbuf_r+0x1e>
    22b4:	0021      	movs	r1, r4
    22b6:	0028      	movs	r0, r5
    22b8:	f000 f80c 	bl	22d4 <__swsetup_r>
    22bc:	2800      	cmp	r0, #0
    22be:	d0ca      	beq.n	2256 <__swbuf_r+0x2e>
    22c0:	2601      	movs	r6, #1
    22c2:	4276      	negs	r6, r6
    22c4:	0030      	movs	r0, r6
    22c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22c8:	00002b98 	.word	0x00002b98
    22cc:	00002bb8 	.word	0x00002bb8
    22d0:	00002b78 	.word	0x00002b78

000022d4 <__swsetup_r>:
    22d4:	4b36      	ldr	r3, [pc, #216]	; (23b0 <__swsetup_r+0xdc>)
    22d6:	b570      	push	{r4, r5, r6, lr}
    22d8:	681d      	ldr	r5, [r3, #0]
    22da:	0006      	movs	r6, r0
    22dc:	000c      	movs	r4, r1
    22de:	2d00      	cmp	r5, #0
    22e0:	d005      	beq.n	22ee <__swsetup_r+0x1a>
    22e2:	69ab      	ldr	r3, [r5, #24]
    22e4:	2b00      	cmp	r3, #0
    22e6:	d102      	bne.n	22ee <__swsetup_r+0x1a>
    22e8:	0028      	movs	r0, r5
    22ea:	f000 f961 	bl	25b0 <__sinit>
    22ee:	4b31      	ldr	r3, [pc, #196]	; (23b4 <__swsetup_r+0xe0>)
    22f0:	429c      	cmp	r4, r3
    22f2:	d10f      	bne.n	2314 <__swsetup_r+0x40>
    22f4:	686c      	ldr	r4, [r5, #4]
    22f6:	230c      	movs	r3, #12
    22f8:	5ee2      	ldrsh	r2, [r4, r3]
    22fa:	b293      	uxth	r3, r2
    22fc:	0719      	lsls	r1, r3, #28
    22fe:	d42d      	bmi.n	235c <__swsetup_r+0x88>
    2300:	06d9      	lsls	r1, r3, #27
    2302:	d411      	bmi.n	2328 <__swsetup_r+0x54>
    2304:	2309      	movs	r3, #9
    2306:	2001      	movs	r0, #1
    2308:	6033      	str	r3, [r6, #0]
    230a:	3337      	adds	r3, #55	; 0x37
    230c:	4313      	orrs	r3, r2
    230e:	81a3      	strh	r3, [r4, #12]
    2310:	4240      	negs	r0, r0
    2312:	bd70      	pop	{r4, r5, r6, pc}
    2314:	4b28      	ldr	r3, [pc, #160]	; (23b8 <__swsetup_r+0xe4>)
    2316:	429c      	cmp	r4, r3
    2318:	d101      	bne.n	231e <__swsetup_r+0x4a>
    231a:	68ac      	ldr	r4, [r5, #8]
    231c:	e7eb      	b.n	22f6 <__swsetup_r+0x22>
    231e:	4b27      	ldr	r3, [pc, #156]	; (23bc <__swsetup_r+0xe8>)
    2320:	429c      	cmp	r4, r3
    2322:	d1e8      	bne.n	22f6 <__swsetup_r+0x22>
    2324:	68ec      	ldr	r4, [r5, #12]
    2326:	e7e6      	b.n	22f6 <__swsetup_r+0x22>
    2328:	075b      	lsls	r3, r3, #29
    232a:	d513      	bpl.n	2354 <__swsetup_r+0x80>
    232c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    232e:	2900      	cmp	r1, #0
    2330:	d008      	beq.n	2344 <__swsetup_r+0x70>
    2332:	0023      	movs	r3, r4
    2334:	3344      	adds	r3, #68	; 0x44
    2336:	4299      	cmp	r1, r3
    2338:	d002      	beq.n	2340 <__swsetup_r+0x6c>
    233a:	0030      	movs	r0, r6
    233c:	f000 fa3e 	bl	27bc <_free_r>
    2340:	2300      	movs	r3, #0
    2342:	6363      	str	r3, [r4, #52]	; 0x34
    2344:	2224      	movs	r2, #36	; 0x24
    2346:	89a3      	ldrh	r3, [r4, #12]
    2348:	4393      	bics	r3, r2
    234a:	81a3      	strh	r3, [r4, #12]
    234c:	2300      	movs	r3, #0
    234e:	6063      	str	r3, [r4, #4]
    2350:	6923      	ldr	r3, [r4, #16]
    2352:	6023      	str	r3, [r4, #0]
    2354:	2308      	movs	r3, #8
    2356:	89a2      	ldrh	r2, [r4, #12]
    2358:	4313      	orrs	r3, r2
    235a:	81a3      	strh	r3, [r4, #12]
    235c:	6923      	ldr	r3, [r4, #16]
    235e:	2b00      	cmp	r3, #0
    2360:	d10b      	bne.n	237a <__swsetup_r+0xa6>
    2362:	21a0      	movs	r1, #160	; 0xa0
    2364:	2280      	movs	r2, #128	; 0x80
    2366:	89a3      	ldrh	r3, [r4, #12]
    2368:	0089      	lsls	r1, r1, #2
    236a:	0092      	lsls	r2, r2, #2
    236c:	400b      	ands	r3, r1
    236e:	4293      	cmp	r3, r2
    2370:	d003      	beq.n	237a <__swsetup_r+0xa6>
    2372:	0021      	movs	r1, r4
    2374:	0030      	movs	r0, r6
    2376:	f000 f9d9 	bl	272c <__smakebuf_r>
    237a:	2301      	movs	r3, #1
    237c:	89a2      	ldrh	r2, [r4, #12]
    237e:	4013      	ands	r3, r2
    2380:	d011      	beq.n	23a6 <__swsetup_r+0xd2>
    2382:	2300      	movs	r3, #0
    2384:	60a3      	str	r3, [r4, #8]
    2386:	6963      	ldr	r3, [r4, #20]
    2388:	425b      	negs	r3, r3
    238a:	61a3      	str	r3, [r4, #24]
    238c:	2000      	movs	r0, #0
    238e:	6923      	ldr	r3, [r4, #16]
    2390:	4283      	cmp	r3, r0
    2392:	d1be      	bne.n	2312 <__swsetup_r+0x3e>
    2394:	230c      	movs	r3, #12
    2396:	5ee2      	ldrsh	r2, [r4, r3]
    2398:	0613      	lsls	r3, r2, #24
    239a:	d5ba      	bpl.n	2312 <__swsetup_r+0x3e>
    239c:	2340      	movs	r3, #64	; 0x40
    239e:	4313      	orrs	r3, r2
    23a0:	81a3      	strh	r3, [r4, #12]
    23a2:	3801      	subs	r0, #1
    23a4:	e7b5      	b.n	2312 <__swsetup_r+0x3e>
    23a6:	0792      	lsls	r2, r2, #30
    23a8:	d400      	bmi.n	23ac <__swsetup_r+0xd8>
    23aa:	6963      	ldr	r3, [r4, #20]
    23ac:	60a3      	str	r3, [r4, #8]
    23ae:	e7ed      	b.n	238c <__swsetup_r+0xb8>
    23b0:	2000000c 	.word	0x2000000c
    23b4:	00002b98 	.word	0x00002b98
    23b8:	00002bb8 	.word	0x00002bb8
    23bc:	00002b78 	.word	0x00002b78

000023c0 <__sflush_r>:
    23c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    23c2:	898a      	ldrh	r2, [r1, #12]
    23c4:	0005      	movs	r5, r0
    23c6:	000c      	movs	r4, r1
    23c8:	0713      	lsls	r3, r2, #28
    23ca:	d460      	bmi.n	248e <__sflush_r+0xce>
    23cc:	684b      	ldr	r3, [r1, #4]
    23ce:	2b00      	cmp	r3, #0
    23d0:	dc04      	bgt.n	23dc <__sflush_r+0x1c>
    23d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    23d4:	2b00      	cmp	r3, #0
    23d6:	dc01      	bgt.n	23dc <__sflush_r+0x1c>
    23d8:	2000      	movs	r0, #0
    23da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    23dc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    23de:	2f00      	cmp	r7, #0
    23e0:	d0fa      	beq.n	23d8 <__sflush_r+0x18>
    23e2:	2300      	movs	r3, #0
    23e4:	682e      	ldr	r6, [r5, #0]
    23e6:	602b      	str	r3, [r5, #0]
    23e8:	2380      	movs	r3, #128	; 0x80
    23ea:	015b      	lsls	r3, r3, #5
    23ec:	401a      	ands	r2, r3
    23ee:	d034      	beq.n	245a <__sflush_r+0x9a>
    23f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    23f2:	89a3      	ldrh	r3, [r4, #12]
    23f4:	075b      	lsls	r3, r3, #29
    23f6:	d506      	bpl.n	2406 <__sflush_r+0x46>
    23f8:	6863      	ldr	r3, [r4, #4]
    23fa:	1ac0      	subs	r0, r0, r3
    23fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    23fe:	2b00      	cmp	r3, #0
    2400:	d001      	beq.n	2406 <__sflush_r+0x46>
    2402:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2404:	1ac0      	subs	r0, r0, r3
    2406:	0002      	movs	r2, r0
    2408:	6a21      	ldr	r1, [r4, #32]
    240a:	2300      	movs	r3, #0
    240c:	0028      	movs	r0, r5
    240e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2410:	47b8      	blx	r7
    2412:	89a1      	ldrh	r1, [r4, #12]
    2414:	1c43      	adds	r3, r0, #1
    2416:	d106      	bne.n	2426 <__sflush_r+0x66>
    2418:	682b      	ldr	r3, [r5, #0]
    241a:	2b1d      	cmp	r3, #29
    241c:	d831      	bhi.n	2482 <__sflush_r+0xc2>
    241e:	4a2c      	ldr	r2, [pc, #176]	; (24d0 <__sflush_r+0x110>)
    2420:	40da      	lsrs	r2, r3
    2422:	07d3      	lsls	r3, r2, #31
    2424:	d52d      	bpl.n	2482 <__sflush_r+0xc2>
    2426:	2300      	movs	r3, #0
    2428:	6063      	str	r3, [r4, #4]
    242a:	6923      	ldr	r3, [r4, #16]
    242c:	6023      	str	r3, [r4, #0]
    242e:	04cb      	lsls	r3, r1, #19
    2430:	d505      	bpl.n	243e <__sflush_r+0x7e>
    2432:	1c43      	adds	r3, r0, #1
    2434:	d102      	bne.n	243c <__sflush_r+0x7c>
    2436:	682b      	ldr	r3, [r5, #0]
    2438:	2b00      	cmp	r3, #0
    243a:	d100      	bne.n	243e <__sflush_r+0x7e>
    243c:	6560      	str	r0, [r4, #84]	; 0x54
    243e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2440:	602e      	str	r6, [r5, #0]
    2442:	2900      	cmp	r1, #0
    2444:	d0c8      	beq.n	23d8 <__sflush_r+0x18>
    2446:	0023      	movs	r3, r4
    2448:	3344      	adds	r3, #68	; 0x44
    244a:	4299      	cmp	r1, r3
    244c:	d002      	beq.n	2454 <__sflush_r+0x94>
    244e:	0028      	movs	r0, r5
    2450:	f000 f9b4 	bl	27bc <_free_r>
    2454:	2000      	movs	r0, #0
    2456:	6360      	str	r0, [r4, #52]	; 0x34
    2458:	e7bf      	b.n	23da <__sflush_r+0x1a>
    245a:	2301      	movs	r3, #1
    245c:	6a21      	ldr	r1, [r4, #32]
    245e:	0028      	movs	r0, r5
    2460:	47b8      	blx	r7
    2462:	1c43      	adds	r3, r0, #1
    2464:	d1c5      	bne.n	23f2 <__sflush_r+0x32>
    2466:	682b      	ldr	r3, [r5, #0]
    2468:	2b00      	cmp	r3, #0
    246a:	d0c2      	beq.n	23f2 <__sflush_r+0x32>
    246c:	2b1d      	cmp	r3, #29
    246e:	d001      	beq.n	2474 <__sflush_r+0xb4>
    2470:	2b16      	cmp	r3, #22
    2472:	d101      	bne.n	2478 <__sflush_r+0xb8>
    2474:	602e      	str	r6, [r5, #0]
    2476:	e7af      	b.n	23d8 <__sflush_r+0x18>
    2478:	2340      	movs	r3, #64	; 0x40
    247a:	89a2      	ldrh	r2, [r4, #12]
    247c:	4313      	orrs	r3, r2
    247e:	81a3      	strh	r3, [r4, #12]
    2480:	e7ab      	b.n	23da <__sflush_r+0x1a>
    2482:	2340      	movs	r3, #64	; 0x40
    2484:	430b      	orrs	r3, r1
    2486:	2001      	movs	r0, #1
    2488:	81a3      	strh	r3, [r4, #12]
    248a:	4240      	negs	r0, r0
    248c:	e7a5      	b.n	23da <__sflush_r+0x1a>
    248e:	690f      	ldr	r7, [r1, #16]
    2490:	2f00      	cmp	r7, #0
    2492:	d0a1      	beq.n	23d8 <__sflush_r+0x18>
    2494:	680b      	ldr	r3, [r1, #0]
    2496:	600f      	str	r7, [r1, #0]
    2498:	1bdb      	subs	r3, r3, r7
    249a:	9301      	str	r3, [sp, #4]
    249c:	2300      	movs	r3, #0
    249e:	0792      	lsls	r2, r2, #30
    24a0:	d100      	bne.n	24a4 <__sflush_r+0xe4>
    24a2:	694b      	ldr	r3, [r1, #20]
    24a4:	60a3      	str	r3, [r4, #8]
    24a6:	9b01      	ldr	r3, [sp, #4]
    24a8:	2b00      	cmp	r3, #0
    24aa:	dc00      	bgt.n	24ae <__sflush_r+0xee>
    24ac:	e794      	b.n	23d8 <__sflush_r+0x18>
    24ae:	9b01      	ldr	r3, [sp, #4]
    24b0:	003a      	movs	r2, r7
    24b2:	6a21      	ldr	r1, [r4, #32]
    24b4:	0028      	movs	r0, r5
    24b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    24b8:	47b0      	blx	r6
    24ba:	2800      	cmp	r0, #0
    24bc:	dc03      	bgt.n	24c6 <__sflush_r+0x106>
    24be:	2340      	movs	r3, #64	; 0x40
    24c0:	89a2      	ldrh	r2, [r4, #12]
    24c2:	4313      	orrs	r3, r2
    24c4:	e7df      	b.n	2486 <__sflush_r+0xc6>
    24c6:	9b01      	ldr	r3, [sp, #4]
    24c8:	183f      	adds	r7, r7, r0
    24ca:	1a1b      	subs	r3, r3, r0
    24cc:	9301      	str	r3, [sp, #4]
    24ce:	e7ea      	b.n	24a6 <__sflush_r+0xe6>
    24d0:	20400001 	.word	0x20400001

000024d4 <_fflush_r>:
    24d4:	690b      	ldr	r3, [r1, #16]
    24d6:	b570      	push	{r4, r5, r6, lr}
    24d8:	0005      	movs	r5, r0
    24da:	000c      	movs	r4, r1
    24dc:	2b00      	cmp	r3, #0
    24de:	d101      	bne.n	24e4 <_fflush_r+0x10>
    24e0:	2000      	movs	r0, #0
    24e2:	bd70      	pop	{r4, r5, r6, pc}
    24e4:	2800      	cmp	r0, #0
    24e6:	d004      	beq.n	24f2 <_fflush_r+0x1e>
    24e8:	6983      	ldr	r3, [r0, #24]
    24ea:	2b00      	cmp	r3, #0
    24ec:	d101      	bne.n	24f2 <_fflush_r+0x1e>
    24ee:	f000 f85f 	bl	25b0 <__sinit>
    24f2:	4b0b      	ldr	r3, [pc, #44]	; (2520 <_fflush_r+0x4c>)
    24f4:	429c      	cmp	r4, r3
    24f6:	d109      	bne.n	250c <_fflush_r+0x38>
    24f8:	686c      	ldr	r4, [r5, #4]
    24fa:	220c      	movs	r2, #12
    24fc:	5ea3      	ldrsh	r3, [r4, r2]
    24fe:	2b00      	cmp	r3, #0
    2500:	d0ee      	beq.n	24e0 <_fflush_r+0xc>
    2502:	0021      	movs	r1, r4
    2504:	0028      	movs	r0, r5
    2506:	f7ff ff5b 	bl	23c0 <__sflush_r>
    250a:	e7ea      	b.n	24e2 <_fflush_r+0xe>
    250c:	4b05      	ldr	r3, [pc, #20]	; (2524 <_fflush_r+0x50>)
    250e:	429c      	cmp	r4, r3
    2510:	d101      	bne.n	2516 <_fflush_r+0x42>
    2512:	68ac      	ldr	r4, [r5, #8]
    2514:	e7f1      	b.n	24fa <_fflush_r+0x26>
    2516:	4b04      	ldr	r3, [pc, #16]	; (2528 <_fflush_r+0x54>)
    2518:	429c      	cmp	r4, r3
    251a:	d1ee      	bne.n	24fa <_fflush_r+0x26>
    251c:	68ec      	ldr	r4, [r5, #12]
    251e:	e7ec      	b.n	24fa <_fflush_r+0x26>
    2520:	00002b98 	.word	0x00002b98
    2524:	00002bb8 	.word	0x00002bb8
    2528:	00002b78 	.word	0x00002b78

0000252c <_cleanup_r>:
    252c:	b510      	push	{r4, lr}
    252e:	4902      	ldr	r1, [pc, #8]	; (2538 <_cleanup_r+0xc>)
    2530:	f000 f8b2 	bl	2698 <_fwalk_reent>
    2534:	bd10      	pop	{r4, pc}
    2536:	46c0      	nop			; (mov r8, r8)
    2538:	000024d5 	.word	0x000024d5

0000253c <std.isra.0>:
    253c:	2300      	movs	r3, #0
    253e:	b510      	push	{r4, lr}
    2540:	0004      	movs	r4, r0
    2542:	6003      	str	r3, [r0, #0]
    2544:	6043      	str	r3, [r0, #4]
    2546:	6083      	str	r3, [r0, #8]
    2548:	8181      	strh	r1, [r0, #12]
    254a:	6643      	str	r3, [r0, #100]	; 0x64
    254c:	81c2      	strh	r2, [r0, #14]
    254e:	6103      	str	r3, [r0, #16]
    2550:	6143      	str	r3, [r0, #20]
    2552:	6183      	str	r3, [r0, #24]
    2554:	0019      	movs	r1, r3
    2556:	2208      	movs	r2, #8
    2558:	305c      	adds	r0, #92	; 0x5c
    255a:	f7ff fd3d 	bl	1fd8 <memset>
    255e:	4b05      	ldr	r3, [pc, #20]	; (2574 <std.isra.0+0x38>)
    2560:	6224      	str	r4, [r4, #32]
    2562:	6263      	str	r3, [r4, #36]	; 0x24
    2564:	4b04      	ldr	r3, [pc, #16]	; (2578 <std.isra.0+0x3c>)
    2566:	62a3      	str	r3, [r4, #40]	; 0x28
    2568:	4b04      	ldr	r3, [pc, #16]	; (257c <std.isra.0+0x40>)
    256a:	62e3      	str	r3, [r4, #44]	; 0x2c
    256c:	4b04      	ldr	r3, [pc, #16]	; (2580 <std.isra.0+0x44>)
    256e:	6323      	str	r3, [r4, #48]	; 0x30
    2570:	bd10      	pop	{r4, pc}
    2572:	46c0      	nop			; (mov r8, r8)
    2574:	00002931 	.word	0x00002931
    2578:	00002959 	.word	0x00002959
    257c:	00002991 	.word	0x00002991
    2580:	000029bd 	.word	0x000029bd

00002584 <__sfmoreglue>:
    2584:	b570      	push	{r4, r5, r6, lr}
    2586:	2568      	movs	r5, #104	; 0x68
    2588:	1e4a      	subs	r2, r1, #1
    258a:	4355      	muls	r5, r2
    258c:	000e      	movs	r6, r1
    258e:	0029      	movs	r1, r5
    2590:	3174      	adds	r1, #116	; 0x74
    2592:	f000 f95d 	bl	2850 <_malloc_r>
    2596:	1e04      	subs	r4, r0, #0
    2598:	d008      	beq.n	25ac <__sfmoreglue+0x28>
    259a:	2100      	movs	r1, #0
    259c:	002a      	movs	r2, r5
    259e:	6001      	str	r1, [r0, #0]
    25a0:	6046      	str	r6, [r0, #4]
    25a2:	300c      	adds	r0, #12
    25a4:	60a0      	str	r0, [r4, #8]
    25a6:	3268      	adds	r2, #104	; 0x68
    25a8:	f7ff fd16 	bl	1fd8 <memset>
    25ac:	0020      	movs	r0, r4
    25ae:	bd70      	pop	{r4, r5, r6, pc}

000025b0 <__sinit>:
    25b0:	6983      	ldr	r3, [r0, #24]
    25b2:	b513      	push	{r0, r1, r4, lr}
    25b4:	0004      	movs	r4, r0
    25b6:	2b00      	cmp	r3, #0
    25b8:	d128      	bne.n	260c <__sinit+0x5c>
    25ba:	6483      	str	r3, [r0, #72]	; 0x48
    25bc:	64c3      	str	r3, [r0, #76]	; 0x4c
    25be:	6503      	str	r3, [r0, #80]	; 0x50
    25c0:	4b13      	ldr	r3, [pc, #76]	; (2610 <__sinit+0x60>)
    25c2:	4a14      	ldr	r2, [pc, #80]	; (2614 <__sinit+0x64>)
    25c4:	681b      	ldr	r3, [r3, #0]
    25c6:	6282      	str	r2, [r0, #40]	; 0x28
    25c8:	9301      	str	r3, [sp, #4]
    25ca:	4298      	cmp	r0, r3
    25cc:	d101      	bne.n	25d2 <__sinit+0x22>
    25ce:	2301      	movs	r3, #1
    25d0:	6183      	str	r3, [r0, #24]
    25d2:	0020      	movs	r0, r4
    25d4:	f000 f820 	bl	2618 <__sfp>
    25d8:	6060      	str	r0, [r4, #4]
    25da:	0020      	movs	r0, r4
    25dc:	f000 f81c 	bl	2618 <__sfp>
    25e0:	60a0      	str	r0, [r4, #8]
    25e2:	0020      	movs	r0, r4
    25e4:	f000 f818 	bl	2618 <__sfp>
    25e8:	2200      	movs	r2, #0
    25ea:	60e0      	str	r0, [r4, #12]
    25ec:	2104      	movs	r1, #4
    25ee:	6860      	ldr	r0, [r4, #4]
    25f0:	f7ff ffa4 	bl	253c <std.isra.0>
    25f4:	2201      	movs	r2, #1
    25f6:	2109      	movs	r1, #9
    25f8:	68a0      	ldr	r0, [r4, #8]
    25fa:	f7ff ff9f 	bl	253c <std.isra.0>
    25fe:	2202      	movs	r2, #2
    2600:	2112      	movs	r1, #18
    2602:	68e0      	ldr	r0, [r4, #12]
    2604:	f7ff ff9a 	bl	253c <std.isra.0>
    2608:	2301      	movs	r3, #1
    260a:	61a3      	str	r3, [r4, #24]
    260c:	bd13      	pop	{r0, r1, r4, pc}
    260e:	46c0      	nop			; (mov r8, r8)
    2610:	00002b74 	.word	0x00002b74
    2614:	0000252d 	.word	0x0000252d

00002618 <__sfp>:
    2618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    261a:	4b1e      	ldr	r3, [pc, #120]	; (2694 <__sfp+0x7c>)
    261c:	0007      	movs	r7, r0
    261e:	681e      	ldr	r6, [r3, #0]
    2620:	69b3      	ldr	r3, [r6, #24]
    2622:	2b00      	cmp	r3, #0
    2624:	d102      	bne.n	262c <__sfp+0x14>
    2626:	0030      	movs	r0, r6
    2628:	f7ff ffc2 	bl	25b0 <__sinit>
    262c:	3648      	adds	r6, #72	; 0x48
    262e:	68b4      	ldr	r4, [r6, #8]
    2630:	6873      	ldr	r3, [r6, #4]
    2632:	3b01      	subs	r3, #1
    2634:	d504      	bpl.n	2640 <__sfp+0x28>
    2636:	6833      	ldr	r3, [r6, #0]
    2638:	2b00      	cmp	r3, #0
    263a:	d007      	beq.n	264c <__sfp+0x34>
    263c:	6836      	ldr	r6, [r6, #0]
    263e:	e7f6      	b.n	262e <__sfp+0x16>
    2640:	220c      	movs	r2, #12
    2642:	5ea5      	ldrsh	r5, [r4, r2]
    2644:	2d00      	cmp	r5, #0
    2646:	d00d      	beq.n	2664 <__sfp+0x4c>
    2648:	3468      	adds	r4, #104	; 0x68
    264a:	e7f2      	b.n	2632 <__sfp+0x1a>
    264c:	2104      	movs	r1, #4
    264e:	0038      	movs	r0, r7
    2650:	f7ff ff98 	bl	2584 <__sfmoreglue>
    2654:	6030      	str	r0, [r6, #0]
    2656:	2800      	cmp	r0, #0
    2658:	d1f0      	bne.n	263c <__sfp+0x24>
    265a:	230c      	movs	r3, #12
    265c:	0004      	movs	r4, r0
    265e:	603b      	str	r3, [r7, #0]
    2660:	0020      	movs	r0, r4
    2662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2664:	2301      	movs	r3, #1
    2666:	0020      	movs	r0, r4
    2668:	425b      	negs	r3, r3
    266a:	81e3      	strh	r3, [r4, #14]
    266c:	3302      	adds	r3, #2
    266e:	81a3      	strh	r3, [r4, #12]
    2670:	6665      	str	r5, [r4, #100]	; 0x64
    2672:	6025      	str	r5, [r4, #0]
    2674:	60a5      	str	r5, [r4, #8]
    2676:	6065      	str	r5, [r4, #4]
    2678:	6125      	str	r5, [r4, #16]
    267a:	6165      	str	r5, [r4, #20]
    267c:	61a5      	str	r5, [r4, #24]
    267e:	2208      	movs	r2, #8
    2680:	0029      	movs	r1, r5
    2682:	305c      	adds	r0, #92	; 0x5c
    2684:	f7ff fca8 	bl	1fd8 <memset>
    2688:	6365      	str	r5, [r4, #52]	; 0x34
    268a:	63a5      	str	r5, [r4, #56]	; 0x38
    268c:	64a5      	str	r5, [r4, #72]	; 0x48
    268e:	64e5      	str	r5, [r4, #76]	; 0x4c
    2690:	e7e6      	b.n	2660 <__sfp+0x48>
    2692:	46c0      	nop			; (mov r8, r8)
    2694:	00002b74 	.word	0x00002b74

00002698 <_fwalk_reent>:
    2698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    269a:	0004      	movs	r4, r0
    269c:	0007      	movs	r7, r0
    269e:	2600      	movs	r6, #0
    26a0:	9101      	str	r1, [sp, #4]
    26a2:	3448      	adds	r4, #72	; 0x48
    26a4:	2c00      	cmp	r4, #0
    26a6:	d101      	bne.n	26ac <_fwalk_reent+0x14>
    26a8:	0030      	movs	r0, r6
    26aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    26ac:	6863      	ldr	r3, [r4, #4]
    26ae:	68a5      	ldr	r5, [r4, #8]
    26b0:	9300      	str	r3, [sp, #0]
    26b2:	9b00      	ldr	r3, [sp, #0]
    26b4:	3b01      	subs	r3, #1
    26b6:	9300      	str	r3, [sp, #0]
    26b8:	d501      	bpl.n	26be <_fwalk_reent+0x26>
    26ba:	6824      	ldr	r4, [r4, #0]
    26bc:	e7f2      	b.n	26a4 <_fwalk_reent+0xc>
    26be:	89ab      	ldrh	r3, [r5, #12]
    26c0:	2b01      	cmp	r3, #1
    26c2:	d908      	bls.n	26d6 <_fwalk_reent+0x3e>
    26c4:	220e      	movs	r2, #14
    26c6:	5eab      	ldrsh	r3, [r5, r2]
    26c8:	3301      	adds	r3, #1
    26ca:	d004      	beq.n	26d6 <_fwalk_reent+0x3e>
    26cc:	0029      	movs	r1, r5
    26ce:	0038      	movs	r0, r7
    26d0:	9b01      	ldr	r3, [sp, #4]
    26d2:	4798      	blx	r3
    26d4:	4306      	orrs	r6, r0
    26d6:	3568      	adds	r5, #104	; 0x68
    26d8:	e7eb      	b.n	26b2 <_fwalk_reent+0x1a>
	...

000026dc <__swhatbuf_r>:
    26dc:	b570      	push	{r4, r5, r6, lr}
    26de:	000e      	movs	r6, r1
    26e0:	001d      	movs	r5, r3
    26e2:	230e      	movs	r3, #14
    26e4:	5ec9      	ldrsh	r1, [r1, r3]
    26e6:	b090      	sub	sp, #64	; 0x40
    26e8:	0014      	movs	r4, r2
    26ea:	2900      	cmp	r1, #0
    26ec:	da07      	bge.n	26fe <__swhatbuf_r+0x22>
    26ee:	2300      	movs	r3, #0
    26f0:	602b      	str	r3, [r5, #0]
    26f2:	89b3      	ldrh	r3, [r6, #12]
    26f4:	061b      	lsls	r3, r3, #24
    26f6:	d411      	bmi.n	271c <__swhatbuf_r+0x40>
    26f8:	2380      	movs	r3, #128	; 0x80
    26fa:	00db      	lsls	r3, r3, #3
    26fc:	e00f      	b.n	271e <__swhatbuf_r+0x42>
    26fe:	aa01      	add	r2, sp, #4
    2700:	f000 f988 	bl	2a14 <_fstat_r>
    2704:	2800      	cmp	r0, #0
    2706:	dbf2      	blt.n	26ee <__swhatbuf_r+0x12>
    2708:	22f0      	movs	r2, #240	; 0xf0
    270a:	9b02      	ldr	r3, [sp, #8]
    270c:	0212      	lsls	r2, r2, #8
    270e:	4013      	ands	r3, r2
    2710:	4a05      	ldr	r2, [pc, #20]	; (2728 <__swhatbuf_r+0x4c>)
    2712:	189b      	adds	r3, r3, r2
    2714:	425a      	negs	r2, r3
    2716:	4153      	adcs	r3, r2
    2718:	602b      	str	r3, [r5, #0]
    271a:	e7ed      	b.n	26f8 <__swhatbuf_r+0x1c>
    271c:	2340      	movs	r3, #64	; 0x40
    271e:	2000      	movs	r0, #0
    2720:	6023      	str	r3, [r4, #0]
    2722:	b010      	add	sp, #64	; 0x40
    2724:	bd70      	pop	{r4, r5, r6, pc}
    2726:	46c0      	nop			; (mov r8, r8)
    2728:	ffffe000 	.word	0xffffe000

0000272c <__smakebuf_r>:
    272c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    272e:	2602      	movs	r6, #2
    2730:	898b      	ldrh	r3, [r1, #12]
    2732:	0005      	movs	r5, r0
    2734:	000c      	movs	r4, r1
    2736:	4233      	tst	r3, r6
    2738:	d006      	beq.n	2748 <__smakebuf_r+0x1c>
    273a:	0023      	movs	r3, r4
    273c:	3347      	adds	r3, #71	; 0x47
    273e:	6023      	str	r3, [r4, #0]
    2740:	6123      	str	r3, [r4, #16]
    2742:	2301      	movs	r3, #1
    2744:	6163      	str	r3, [r4, #20]
    2746:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2748:	ab01      	add	r3, sp, #4
    274a:	466a      	mov	r2, sp
    274c:	f7ff ffc6 	bl	26dc <__swhatbuf_r>
    2750:	9900      	ldr	r1, [sp, #0]
    2752:	0007      	movs	r7, r0
    2754:	0028      	movs	r0, r5
    2756:	f000 f87b 	bl	2850 <_malloc_r>
    275a:	2800      	cmp	r0, #0
    275c:	d106      	bne.n	276c <__smakebuf_r+0x40>
    275e:	220c      	movs	r2, #12
    2760:	5ea3      	ldrsh	r3, [r4, r2]
    2762:	059a      	lsls	r2, r3, #22
    2764:	d4ef      	bmi.n	2746 <__smakebuf_r+0x1a>
    2766:	431e      	orrs	r6, r3
    2768:	81a6      	strh	r6, [r4, #12]
    276a:	e7e6      	b.n	273a <__smakebuf_r+0xe>
    276c:	4b0d      	ldr	r3, [pc, #52]	; (27a4 <__smakebuf_r+0x78>)
    276e:	62ab      	str	r3, [r5, #40]	; 0x28
    2770:	2380      	movs	r3, #128	; 0x80
    2772:	89a2      	ldrh	r2, [r4, #12]
    2774:	6020      	str	r0, [r4, #0]
    2776:	4313      	orrs	r3, r2
    2778:	81a3      	strh	r3, [r4, #12]
    277a:	9b00      	ldr	r3, [sp, #0]
    277c:	6120      	str	r0, [r4, #16]
    277e:	6163      	str	r3, [r4, #20]
    2780:	9b01      	ldr	r3, [sp, #4]
    2782:	2b00      	cmp	r3, #0
    2784:	d00a      	beq.n	279c <__smakebuf_r+0x70>
    2786:	230e      	movs	r3, #14
    2788:	5ee1      	ldrsh	r1, [r4, r3]
    278a:	0028      	movs	r0, r5
    278c:	f000 f954 	bl	2a38 <_isatty_r>
    2790:	2800      	cmp	r0, #0
    2792:	d003      	beq.n	279c <__smakebuf_r+0x70>
    2794:	2301      	movs	r3, #1
    2796:	89a2      	ldrh	r2, [r4, #12]
    2798:	4313      	orrs	r3, r2
    279a:	81a3      	strh	r3, [r4, #12]
    279c:	89a0      	ldrh	r0, [r4, #12]
    279e:	4338      	orrs	r0, r7
    27a0:	81a0      	strh	r0, [r4, #12]
    27a2:	e7d0      	b.n	2746 <__smakebuf_r+0x1a>
    27a4:	0000252d 	.word	0x0000252d

000027a8 <malloc>:
    27a8:	b510      	push	{r4, lr}
    27aa:	4b03      	ldr	r3, [pc, #12]	; (27b8 <malloc+0x10>)
    27ac:	0001      	movs	r1, r0
    27ae:	6818      	ldr	r0, [r3, #0]
    27b0:	f000 f84e 	bl	2850 <_malloc_r>
    27b4:	bd10      	pop	{r4, pc}
    27b6:	46c0      	nop			; (mov r8, r8)
    27b8:	2000000c 	.word	0x2000000c

000027bc <_free_r>:
    27bc:	b570      	push	{r4, r5, r6, lr}
    27be:	0005      	movs	r5, r0
    27c0:	2900      	cmp	r1, #0
    27c2:	d010      	beq.n	27e6 <_free_r+0x2a>
    27c4:	1f0c      	subs	r4, r1, #4
    27c6:	6823      	ldr	r3, [r4, #0]
    27c8:	2b00      	cmp	r3, #0
    27ca:	da00      	bge.n	27ce <_free_r+0x12>
    27cc:	18e4      	adds	r4, r4, r3
    27ce:	0028      	movs	r0, r5
    27d0:	f000 f958 	bl	2a84 <__malloc_lock>
    27d4:	4a1d      	ldr	r2, [pc, #116]	; (284c <_free_r+0x90>)
    27d6:	6813      	ldr	r3, [r2, #0]
    27d8:	2b00      	cmp	r3, #0
    27da:	d105      	bne.n	27e8 <_free_r+0x2c>
    27dc:	6063      	str	r3, [r4, #4]
    27de:	6014      	str	r4, [r2, #0]
    27e0:	0028      	movs	r0, r5
    27e2:	f000 f950 	bl	2a86 <__malloc_unlock>
    27e6:	bd70      	pop	{r4, r5, r6, pc}
    27e8:	42a3      	cmp	r3, r4
    27ea:	d909      	bls.n	2800 <_free_r+0x44>
    27ec:	6821      	ldr	r1, [r4, #0]
    27ee:	1860      	adds	r0, r4, r1
    27f0:	4283      	cmp	r3, r0
    27f2:	d1f3      	bne.n	27dc <_free_r+0x20>
    27f4:	6818      	ldr	r0, [r3, #0]
    27f6:	685b      	ldr	r3, [r3, #4]
    27f8:	1841      	adds	r1, r0, r1
    27fa:	6021      	str	r1, [r4, #0]
    27fc:	e7ee      	b.n	27dc <_free_r+0x20>
    27fe:	0013      	movs	r3, r2
    2800:	685a      	ldr	r2, [r3, #4]
    2802:	2a00      	cmp	r2, #0
    2804:	d001      	beq.n	280a <_free_r+0x4e>
    2806:	42a2      	cmp	r2, r4
    2808:	d9f9      	bls.n	27fe <_free_r+0x42>
    280a:	6819      	ldr	r1, [r3, #0]
    280c:	1858      	adds	r0, r3, r1
    280e:	42a0      	cmp	r0, r4
    2810:	d10b      	bne.n	282a <_free_r+0x6e>
    2812:	6820      	ldr	r0, [r4, #0]
    2814:	1809      	adds	r1, r1, r0
    2816:	1858      	adds	r0, r3, r1
    2818:	6019      	str	r1, [r3, #0]
    281a:	4282      	cmp	r2, r0
    281c:	d1e0      	bne.n	27e0 <_free_r+0x24>
    281e:	6810      	ldr	r0, [r2, #0]
    2820:	6852      	ldr	r2, [r2, #4]
    2822:	1841      	adds	r1, r0, r1
    2824:	6019      	str	r1, [r3, #0]
    2826:	605a      	str	r2, [r3, #4]
    2828:	e7da      	b.n	27e0 <_free_r+0x24>
    282a:	42a0      	cmp	r0, r4
    282c:	d902      	bls.n	2834 <_free_r+0x78>
    282e:	230c      	movs	r3, #12
    2830:	602b      	str	r3, [r5, #0]
    2832:	e7d5      	b.n	27e0 <_free_r+0x24>
    2834:	6821      	ldr	r1, [r4, #0]
    2836:	1860      	adds	r0, r4, r1
    2838:	4282      	cmp	r2, r0
    283a:	d103      	bne.n	2844 <_free_r+0x88>
    283c:	6810      	ldr	r0, [r2, #0]
    283e:	6852      	ldr	r2, [r2, #4]
    2840:	1841      	adds	r1, r0, r1
    2842:	6021      	str	r1, [r4, #0]
    2844:	6062      	str	r2, [r4, #4]
    2846:	605c      	str	r4, [r3, #4]
    2848:	e7ca      	b.n	27e0 <_free_r+0x24>
    284a:	46c0      	nop			; (mov r8, r8)
    284c:	200000cc 	.word	0x200000cc

00002850 <_malloc_r>:
    2850:	2303      	movs	r3, #3
    2852:	b570      	push	{r4, r5, r6, lr}
    2854:	1ccd      	adds	r5, r1, #3
    2856:	439d      	bics	r5, r3
    2858:	3508      	adds	r5, #8
    285a:	0006      	movs	r6, r0
    285c:	2d0c      	cmp	r5, #12
    285e:	d21e      	bcs.n	289e <_malloc_r+0x4e>
    2860:	250c      	movs	r5, #12
    2862:	42a9      	cmp	r1, r5
    2864:	d81d      	bhi.n	28a2 <_malloc_r+0x52>
    2866:	0030      	movs	r0, r6
    2868:	f000 f90c 	bl	2a84 <__malloc_lock>
    286c:	4a25      	ldr	r2, [pc, #148]	; (2904 <_malloc_r+0xb4>)
    286e:	6814      	ldr	r4, [r2, #0]
    2870:	0021      	movs	r1, r4
    2872:	2900      	cmp	r1, #0
    2874:	d119      	bne.n	28aa <_malloc_r+0x5a>
    2876:	4c24      	ldr	r4, [pc, #144]	; (2908 <_malloc_r+0xb8>)
    2878:	6823      	ldr	r3, [r4, #0]
    287a:	2b00      	cmp	r3, #0
    287c:	d103      	bne.n	2886 <_malloc_r+0x36>
    287e:	0030      	movs	r0, r6
    2880:	f000 f844 	bl	290c <_sbrk_r>
    2884:	6020      	str	r0, [r4, #0]
    2886:	0029      	movs	r1, r5
    2888:	0030      	movs	r0, r6
    288a:	f000 f83f 	bl	290c <_sbrk_r>
    288e:	1c43      	adds	r3, r0, #1
    2890:	d12c      	bne.n	28ec <_malloc_r+0x9c>
    2892:	230c      	movs	r3, #12
    2894:	0030      	movs	r0, r6
    2896:	6033      	str	r3, [r6, #0]
    2898:	f000 f8f5 	bl	2a86 <__malloc_unlock>
    289c:	e003      	b.n	28a6 <_malloc_r+0x56>
    289e:	2d00      	cmp	r5, #0
    28a0:	dadf      	bge.n	2862 <_malloc_r+0x12>
    28a2:	230c      	movs	r3, #12
    28a4:	6033      	str	r3, [r6, #0]
    28a6:	2000      	movs	r0, #0
    28a8:	bd70      	pop	{r4, r5, r6, pc}
    28aa:	680b      	ldr	r3, [r1, #0]
    28ac:	1b5b      	subs	r3, r3, r5
    28ae:	d41a      	bmi.n	28e6 <_malloc_r+0x96>
    28b0:	2b0b      	cmp	r3, #11
    28b2:	d903      	bls.n	28bc <_malloc_r+0x6c>
    28b4:	600b      	str	r3, [r1, #0]
    28b6:	18cc      	adds	r4, r1, r3
    28b8:	6025      	str	r5, [r4, #0]
    28ba:	e003      	b.n	28c4 <_malloc_r+0x74>
    28bc:	428c      	cmp	r4, r1
    28be:	d10e      	bne.n	28de <_malloc_r+0x8e>
    28c0:	6863      	ldr	r3, [r4, #4]
    28c2:	6013      	str	r3, [r2, #0]
    28c4:	0030      	movs	r0, r6
    28c6:	f000 f8de 	bl	2a86 <__malloc_unlock>
    28ca:	0020      	movs	r0, r4
    28cc:	2207      	movs	r2, #7
    28ce:	300b      	adds	r0, #11
    28d0:	1d23      	adds	r3, r4, #4
    28d2:	4390      	bics	r0, r2
    28d4:	1ac3      	subs	r3, r0, r3
    28d6:	d0e7      	beq.n	28a8 <_malloc_r+0x58>
    28d8:	425a      	negs	r2, r3
    28da:	50e2      	str	r2, [r4, r3]
    28dc:	e7e4      	b.n	28a8 <_malloc_r+0x58>
    28de:	684b      	ldr	r3, [r1, #4]
    28e0:	6063      	str	r3, [r4, #4]
    28e2:	000c      	movs	r4, r1
    28e4:	e7ee      	b.n	28c4 <_malloc_r+0x74>
    28e6:	000c      	movs	r4, r1
    28e8:	6849      	ldr	r1, [r1, #4]
    28ea:	e7c2      	b.n	2872 <_malloc_r+0x22>
    28ec:	2303      	movs	r3, #3
    28ee:	1cc4      	adds	r4, r0, #3
    28f0:	439c      	bics	r4, r3
    28f2:	42a0      	cmp	r0, r4
    28f4:	d0e0      	beq.n	28b8 <_malloc_r+0x68>
    28f6:	1a21      	subs	r1, r4, r0
    28f8:	0030      	movs	r0, r6
    28fa:	f000 f807 	bl	290c <_sbrk_r>
    28fe:	1c43      	adds	r3, r0, #1
    2900:	d1da      	bne.n	28b8 <_malloc_r+0x68>
    2902:	e7c6      	b.n	2892 <_malloc_r+0x42>
    2904:	200000cc 	.word	0x200000cc
    2908:	200000d0 	.word	0x200000d0

0000290c <_sbrk_r>:
    290c:	2300      	movs	r3, #0
    290e:	b570      	push	{r4, r5, r6, lr}
    2910:	4c06      	ldr	r4, [pc, #24]	; (292c <_sbrk_r+0x20>)
    2912:	0005      	movs	r5, r0
    2914:	0008      	movs	r0, r1
    2916:	6023      	str	r3, [r4, #0]
    2918:	f7ff fa10 	bl	1d3c <_sbrk>
    291c:	1c43      	adds	r3, r0, #1
    291e:	d103      	bne.n	2928 <_sbrk_r+0x1c>
    2920:	6823      	ldr	r3, [r4, #0]
    2922:	2b00      	cmp	r3, #0
    2924:	d000      	beq.n	2928 <_sbrk_r+0x1c>
    2926:	602b      	str	r3, [r5, #0]
    2928:	bd70      	pop	{r4, r5, r6, pc}
    292a:	46c0      	nop			; (mov r8, r8)
    292c:	2000018c 	.word	0x2000018c

00002930 <__sread>:
    2930:	b570      	push	{r4, r5, r6, lr}
    2932:	000c      	movs	r4, r1
    2934:	250e      	movs	r5, #14
    2936:	5f49      	ldrsh	r1, [r1, r5]
    2938:	f000 f8a6 	bl	2a88 <_read_r>
    293c:	2800      	cmp	r0, #0
    293e:	db03      	blt.n	2948 <__sread+0x18>
    2940:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2942:	181b      	adds	r3, r3, r0
    2944:	6563      	str	r3, [r4, #84]	; 0x54
    2946:	bd70      	pop	{r4, r5, r6, pc}
    2948:	89a3      	ldrh	r3, [r4, #12]
    294a:	4a02      	ldr	r2, [pc, #8]	; (2954 <__sread+0x24>)
    294c:	4013      	ands	r3, r2
    294e:	81a3      	strh	r3, [r4, #12]
    2950:	e7f9      	b.n	2946 <__sread+0x16>
    2952:	46c0      	nop			; (mov r8, r8)
    2954:	ffffefff 	.word	0xffffefff

00002958 <__swrite>:
    2958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    295a:	001f      	movs	r7, r3
    295c:	898b      	ldrh	r3, [r1, #12]
    295e:	0005      	movs	r5, r0
    2960:	000c      	movs	r4, r1
    2962:	0016      	movs	r6, r2
    2964:	05db      	lsls	r3, r3, #23
    2966:	d505      	bpl.n	2974 <__swrite+0x1c>
    2968:	230e      	movs	r3, #14
    296a:	5ec9      	ldrsh	r1, [r1, r3]
    296c:	2200      	movs	r2, #0
    296e:	2302      	movs	r3, #2
    2970:	f000 f874 	bl	2a5c <_lseek_r>
    2974:	89a3      	ldrh	r3, [r4, #12]
    2976:	4a05      	ldr	r2, [pc, #20]	; (298c <__swrite+0x34>)
    2978:	0028      	movs	r0, r5
    297a:	4013      	ands	r3, r2
    297c:	81a3      	strh	r3, [r4, #12]
    297e:	0032      	movs	r2, r6
    2980:	230e      	movs	r3, #14
    2982:	5ee1      	ldrsh	r1, [r4, r3]
    2984:	003b      	movs	r3, r7
    2986:	f000 f81f 	bl	29c8 <_write_r>
    298a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    298c:	ffffefff 	.word	0xffffefff

00002990 <__sseek>:
    2990:	b570      	push	{r4, r5, r6, lr}
    2992:	000c      	movs	r4, r1
    2994:	250e      	movs	r5, #14
    2996:	5f49      	ldrsh	r1, [r1, r5]
    2998:	f000 f860 	bl	2a5c <_lseek_r>
    299c:	89a3      	ldrh	r3, [r4, #12]
    299e:	1c42      	adds	r2, r0, #1
    29a0:	d103      	bne.n	29aa <__sseek+0x1a>
    29a2:	4a05      	ldr	r2, [pc, #20]	; (29b8 <__sseek+0x28>)
    29a4:	4013      	ands	r3, r2
    29a6:	81a3      	strh	r3, [r4, #12]
    29a8:	bd70      	pop	{r4, r5, r6, pc}
    29aa:	2280      	movs	r2, #128	; 0x80
    29ac:	0152      	lsls	r2, r2, #5
    29ae:	4313      	orrs	r3, r2
    29b0:	81a3      	strh	r3, [r4, #12]
    29b2:	6560      	str	r0, [r4, #84]	; 0x54
    29b4:	e7f8      	b.n	29a8 <__sseek+0x18>
    29b6:	46c0      	nop			; (mov r8, r8)
    29b8:	ffffefff 	.word	0xffffefff

000029bc <__sclose>:
    29bc:	b510      	push	{r4, lr}
    29be:	230e      	movs	r3, #14
    29c0:	5ec9      	ldrsh	r1, [r1, r3]
    29c2:	f000 f815 	bl	29f0 <_close_r>
    29c6:	bd10      	pop	{r4, pc}

000029c8 <_write_r>:
    29c8:	b570      	push	{r4, r5, r6, lr}
    29ca:	0005      	movs	r5, r0
    29cc:	0008      	movs	r0, r1
    29ce:	0011      	movs	r1, r2
    29d0:	2200      	movs	r2, #0
    29d2:	4c06      	ldr	r4, [pc, #24]	; (29ec <_write_r+0x24>)
    29d4:	6022      	str	r2, [r4, #0]
    29d6:	001a      	movs	r2, r3
    29d8:	f7fd fd78 	bl	4cc <_write>
    29dc:	1c43      	adds	r3, r0, #1
    29de:	d103      	bne.n	29e8 <_write_r+0x20>
    29e0:	6823      	ldr	r3, [r4, #0]
    29e2:	2b00      	cmp	r3, #0
    29e4:	d000      	beq.n	29e8 <_write_r+0x20>
    29e6:	602b      	str	r3, [r5, #0]
    29e8:	bd70      	pop	{r4, r5, r6, pc}
    29ea:	46c0      	nop			; (mov r8, r8)
    29ec:	2000018c 	.word	0x2000018c

000029f0 <_close_r>:
    29f0:	2300      	movs	r3, #0
    29f2:	b570      	push	{r4, r5, r6, lr}
    29f4:	4c06      	ldr	r4, [pc, #24]	; (2a10 <_close_r+0x20>)
    29f6:	0005      	movs	r5, r0
    29f8:	0008      	movs	r0, r1
    29fa:	6023      	str	r3, [r4, #0]
    29fc:	f7ff f9b0 	bl	1d60 <_close>
    2a00:	1c43      	adds	r3, r0, #1
    2a02:	d103      	bne.n	2a0c <_close_r+0x1c>
    2a04:	6823      	ldr	r3, [r4, #0]
    2a06:	2b00      	cmp	r3, #0
    2a08:	d000      	beq.n	2a0c <_close_r+0x1c>
    2a0a:	602b      	str	r3, [r5, #0]
    2a0c:	bd70      	pop	{r4, r5, r6, pc}
    2a0e:	46c0      	nop			; (mov r8, r8)
    2a10:	2000018c 	.word	0x2000018c

00002a14 <_fstat_r>:
    2a14:	2300      	movs	r3, #0
    2a16:	b570      	push	{r4, r5, r6, lr}
    2a18:	4c06      	ldr	r4, [pc, #24]	; (2a34 <_fstat_r+0x20>)
    2a1a:	0005      	movs	r5, r0
    2a1c:	0008      	movs	r0, r1
    2a1e:	0011      	movs	r1, r2
    2a20:	6023      	str	r3, [r4, #0]
    2a22:	f7ff f9a0 	bl	1d66 <_fstat>
    2a26:	1c43      	adds	r3, r0, #1
    2a28:	d103      	bne.n	2a32 <_fstat_r+0x1e>
    2a2a:	6823      	ldr	r3, [r4, #0]
    2a2c:	2b00      	cmp	r3, #0
    2a2e:	d000      	beq.n	2a32 <_fstat_r+0x1e>
    2a30:	602b      	str	r3, [r5, #0]
    2a32:	bd70      	pop	{r4, r5, r6, pc}
    2a34:	2000018c 	.word	0x2000018c

00002a38 <_isatty_r>:
    2a38:	2300      	movs	r3, #0
    2a3a:	b570      	push	{r4, r5, r6, lr}
    2a3c:	4c06      	ldr	r4, [pc, #24]	; (2a58 <_isatty_r+0x20>)
    2a3e:	0005      	movs	r5, r0
    2a40:	0008      	movs	r0, r1
    2a42:	6023      	str	r3, [r4, #0]
    2a44:	f7ff f994 	bl	1d70 <_isatty>
    2a48:	1c43      	adds	r3, r0, #1
    2a4a:	d103      	bne.n	2a54 <_isatty_r+0x1c>
    2a4c:	6823      	ldr	r3, [r4, #0]
    2a4e:	2b00      	cmp	r3, #0
    2a50:	d000      	beq.n	2a54 <_isatty_r+0x1c>
    2a52:	602b      	str	r3, [r5, #0]
    2a54:	bd70      	pop	{r4, r5, r6, pc}
    2a56:	46c0      	nop			; (mov r8, r8)
    2a58:	2000018c 	.word	0x2000018c

00002a5c <_lseek_r>:
    2a5c:	b570      	push	{r4, r5, r6, lr}
    2a5e:	0005      	movs	r5, r0
    2a60:	0008      	movs	r0, r1
    2a62:	0011      	movs	r1, r2
    2a64:	2200      	movs	r2, #0
    2a66:	4c06      	ldr	r4, [pc, #24]	; (2a80 <_lseek_r+0x24>)
    2a68:	6022      	str	r2, [r4, #0]
    2a6a:	001a      	movs	r2, r3
    2a6c:	f7ff f982 	bl	1d74 <_lseek>
    2a70:	1c43      	adds	r3, r0, #1
    2a72:	d103      	bne.n	2a7c <_lseek_r+0x20>
    2a74:	6823      	ldr	r3, [r4, #0]
    2a76:	2b00      	cmp	r3, #0
    2a78:	d000      	beq.n	2a7c <_lseek_r+0x20>
    2a7a:	602b      	str	r3, [r5, #0]
    2a7c:	bd70      	pop	{r4, r5, r6, pc}
    2a7e:	46c0      	nop			; (mov r8, r8)
    2a80:	2000018c 	.word	0x2000018c

00002a84 <__malloc_lock>:
    2a84:	4770      	bx	lr

00002a86 <__malloc_unlock>:
    2a86:	4770      	bx	lr

00002a88 <_read_r>:
    2a88:	b570      	push	{r4, r5, r6, lr}
    2a8a:	0005      	movs	r5, r0
    2a8c:	0008      	movs	r0, r1
    2a8e:	0011      	movs	r1, r2
    2a90:	2200      	movs	r2, #0
    2a92:	4c06      	ldr	r4, [pc, #24]	; (2aac <_read_r+0x24>)
    2a94:	6022      	str	r2, [r4, #0]
    2a96:	001a      	movs	r2, r3
    2a98:	f7fd fcf6 	bl	488 <_read>
    2a9c:	1c43      	adds	r3, r0, #1
    2a9e:	d103      	bne.n	2aa8 <_read_r+0x20>
    2aa0:	6823      	ldr	r3, [r4, #0]
    2aa2:	2b00      	cmp	r3, #0
    2aa4:	d000      	beq.n	2aa8 <_read_r+0x20>
    2aa6:	602b      	str	r3, [r5, #0]
    2aa8:	bd70      	pop	{r4, r5, r6, pc}
    2aaa:	46c0      	nop			; (mov r8, r8)
    2aac:	2000018c 	.word	0x2000018c
    2ab0:	42000800 	.word	0x42000800
    2ab4:	42000c00 	.word	0x42000c00
    2ab8:	42001000 	.word	0x42001000
    2abc:	42001400 	.word	0x42001400
    2ac0:	42001800 	.word	0x42001800
    2ac4:	42001c00 	.word	0x42001c00

00002ac8 <_tcc_apbcmasks>:
    2ac8:	00000100 00000200 00000400              ............

00002ad4 <_tcc_cc_nums>:
    2ad4:	00020204                                ....

00002ad8 <_tcc_gclk_ids>:
    2ad8:	001b1a1a                                ....

00002adc <_tcc_maxs>:
    2adc:	00ffffff 00ffffff 0000ffff              ............

00002ae8 <_tcc_ow_nums>:
    2ae8:	00020408                                ....

00002aec <_tcc_intflag>:
    2aec:	00000001 00000002 00000004 00000008     ................
    2afc:	00001000 00002000 00004000 00008000     ..... ...@......
    2b0c:	00010000 00020000 00040000 00080000     ................
    2b1c:	000016ca 000016c6 000016c6 00001728     ............(...
    2b2c:	00001728 000016de 000016d0 000016e4     (...............
    2b3c:	00001716 000017b0 00001790 00001790     ................
    2b4c:	0000181c 000017a2 000017be 00001794     ................
    2b5c:	000017cc 0000180c 75746573 6f632070     ........setup co
    2b6c:	656c706d 00006574                       mplete..

00002b74 <_global_impure_ptr>:
    2b74:	20000010                                ... 

00002b78 <__sf_fake_stderr>:
	...

00002b98 <__sf_fake_stdin>:
	...

00002bb8 <__sf_fake_stdout>:
	...

00002bd8 <_init>:
    2bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bda:	46c0      	nop			; (mov r8, r8)
    2bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2bde:	bc08      	pop	{r3}
    2be0:	469e      	mov	lr, r3
    2be2:	4770      	bx	lr

00002be4 <__init_array_start>:
    2be4:	000000dd 	.word	0x000000dd

00002be8 <_fini>:
    2be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bea:	46c0      	nop			; (mov r8, r8)
    2bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2bee:	bc08      	pop	{r3}
    2bf0:	469e      	mov	lr, r3
    2bf2:	4770      	bx	lr

00002bf4 <__fini_array_start>:
    2bf4:	000000b5 	.word	0x000000b5
