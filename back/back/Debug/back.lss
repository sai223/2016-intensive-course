
back.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fb0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00001fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cc  20000070  00002020  00020070  2**2
                  ALLOC
  3 .stack        00002004  2000013c  000020ec  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   000273be  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000391c  00000000  00000000  000474af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004257  00000000  00000000  0004adcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004d0  00000000  00000000  0004f022  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000510  00000000  00000000  0004f4f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000198f2  00000000  00000000  0004fa02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c258  00000000  00000000  000692f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00084050  00000000  00000000  0007554c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001074  00000000  00000000  000f959c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	40 21 00 20 d1 13 00 00 cd 13 00 00 cd 13 00 00     @!. ............
	...
      2c:	cd 13 00 00 00 00 00 00 00 00 00 00 cd 13 00 00     ................
      3c:	cd 13 00 00 cd 13 00 00 cd 13 00 00 cd 13 00 00     ................
      4c:	cd 13 00 00 cd 13 00 00 cd 13 00 00 cd 13 00 00     ................
      5c:	cd 13 00 00 cd 13 00 00 c5 0c 00 00 d5 0c 00 00     ................
      6c:	e5 0c 00 00 f5 0c 00 00 05 0d 00 00 15 0d 00 00     ................
      7c:	b1 06 00 00 c1 06 00 00 d1 06 00 00 cd 13 00 00     ................
      8c:	cd 13 00 00 cd 13 00 00 00 00 00 00 00 00 00 00     ................
      9c:	cd 13 00 00 cd 13 00 00 00 00 00 00 cd 13 00 00     ................
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00001fb0 	.word	0x00001fb0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00001fb0 	.word	0x00001fb0
     10c:	00001fb0 	.word	0x00001fb0
     110:	00000000 	.word	0x00000000

00000114 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	46de      	mov	lr, fp
     118:	4657      	mov	r7, sl
     11a:	464e      	mov	r6, r9
     11c:	4645      	mov	r5, r8
     11e:	b5e0      	push	{r5, r6, r7, lr}
     120:	b087      	sub	sp, #28
     122:	4680      	mov	r8, r0
     124:	9104      	str	r1, [sp, #16]
     126:	0016      	movs	r6, r2
     128:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     12a:	2200      	movs	r2, #0
     12c:	2300      	movs	r3, #0
     12e:	2100      	movs	r1, #0
     130:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     132:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     134:	2001      	movs	r0, #1
     136:	0021      	movs	r1, r4
     138:	9600      	str	r6, [sp, #0]
     13a:	9701      	str	r7, [sp, #4]
     13c:	465c      	mov	r4, fp
     13e:	9403      	str	r4, [sp, #12]
     140:	4644      	mov	r4, r8
     142:	9405      	str	r4, [sp, #20]
     144:	e013      	b.n	16e <long_division+0x5a>
     146:	2420      	movs	r4, #32
     148:	1a64      	subs	r4, r4, r1
     14a:	0005      	movs	r5, r0
     14c:	40e5      	lsrs	r5, r4
     14e:	46a8      	mov	r8, r5
     150:	e014      	b.n	17c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     152:	9c00      	ldr	r4, [sp, #0]
     154:	9d01      	ldr	r5, [sp, #4]
     156:	1b12      	subs	r2, r2, r4
     158:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     15a:	465c      	mov	r4, fp
     15c:	464d      	mov	r5, r9
     15e:	432c      	orrs	r4, r5
     160:	46a3      	mov	fp, r4
     162:	9c03      	ldr	r4, [sp, #12]
     164:	4645      	mov	r5, r8
     166:	432c      	orrs	r4, r5
     168:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     16a:	3901      	subs	r1, #1
     16c:	d325      	bcc.n	1ba <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     16e:	2420      	movs	r4, #32
     170:	4264      	negs	r4, r4
     172:	190c      	adds	r4, r1, r4
     174:	d4e7      	bmi.n	146 <long_division+0x32>
     176:	0005      	movs	r5, r0
     178:	40a5      	lsls	r5, r4
     17a:	46a8      	mov	r8, r5
     17c:	0004      	movs	r4, r0
     17e:	408c      	lsls	r4, r1
     180:	46a1      	mov	r9, r4
		r = r << 1;
     182:	1892      	adds	r2, r2, r2
     184:	415b      	adcs	r3, r3
     186:	0014      	movs	r4, r2
     188:	001d      	movs	r5, r3
		if (n & bit_shift) {
     18a:	9e05      	ldr	r6, [sp, #20]
     18c:	464f      	mov	r7, r9
     18e:	403e      	ands	r6, r7
     190:	46b4      	mov	ip, r6
     192:	9e04      	ldr	r6, [sp, #16]
     194:	4647      	mov	r7, r8
     196:	403e      	ands	r6, r7
     198:	46b2      	mov	sl, r6
     19a:	4666      	mov	r6, ip
     19c:	4657      	mov	r7, sl
     19e:	433e      	orrs	r6, r7
     1a0:	d003      	beq.n	1aa <long_division+0x96>
			r |= 0x01;
     1a2:	0006      	movs	r6, r0
     1a4:	4326      	orrs	r6, r4
     1a6:	0032      	movs	r2, r6
     1a8:	002b      	movs	r3, r5
		if (r >= d) {
     1aa:	9c00      	ldr	r4, [sp, #0]
     1ac:	9d01      	ldr	r5, [sp, #4]
     1ae:	429d      	cmp	r5, r3
     1b0:	d8db      	bhi.n	16a <long_division+0x56>
     1b2:	d1ce      	bne.n	152 <long_division+0x3e>
     1b4:	4294      	cmp	r4, r2
     1b6:	d8d8      	bhi.n	16a <long_division+0x56>
     1b8:	e7cb      	b.n	152 <long_division+0x3e>
     1ba:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     1bc:	4658      	mov	r0, fp
     1be:	0019      	movs	r1, r3
     1c0:	b007      	add	sp, #28
     1c2:	bc3c      	pop	{r2, r3, r4, r5}
     1c4:	4690      	mov	r8, r2
     1c6:	4699      	mov	r9, r3
     1c8:	46a2      	mov	sl, r4
     1ca:	46ab      	mov	fp, r5
     1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000001ce <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     1ce:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     1d0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1d2:	2340      	movs	r3, #64	; 0x40
     1d4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     1d6:	4281      	cmp	r1, r0
     1d8:	d202      	bcs.n	1e0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     1da:	0018      	movs	r0, r3
     1dc:	bd10      	pop	{r4, pc}
		baud_calculated++;
     1de:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     1e0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     1e2:	1c63      	adds	r3, r4, #1
     1e4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     1e6:	4288      	cmp	r0, r1
     1e8:	d9f9      	bls.n	1de <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1ea:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     1ec:	2cff      	cmp	r4, #255	; 0xff
     1ee:	d8f4      	bhi.n	1da <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     1f0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     1f2:	2300      	movs	r3, #0
     1f4:	e7f1      	b.n	1da <_sercom_get_sync_baud_val+0xc>
	...

000001f8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	b083      	sub	sp, #12
     1fc:	000f      	movs	r7, r1
     1fe:	0016      	movs	r6, r2
     200:	aa08      	add	r2, sp, #32
     202:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     204:	0004      	movs	r4, r0
     206:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     208:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     20a:	42bc      	cmp	r4, r7
     20c:	d902      	bls.n	214 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     20e:	0010      	movs	r0, r2
     210:	b003      	add	sp, #12
     212:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     214:	2b00      	cmp	r3, #0
     216:	d114      	bne.n	242 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     218:	0002      	movs	r2, r0
     21a:	0008      	movs	r0, r1
     21c:	2100      	movs	r1, #0
     21e:	4c19      	ldr	r4, [pc, #100]	; (284 <_sercom_get_async_baud_val+0x8c>)
     220:	47a0      	blx	r4
     222:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     224:	003a      	movs	r2, r7
     226:	2300      	movs	r3, #0
     228:	2000      	movs	r0, #0
     22a:	4c17      	ldr	r4, [pc, #92]	; (288 <_sercom_get_async_baud_val+0x90>)
     22c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     22e:	2200      	movs	r2, #0
     230:	2301      	movs	r3, #1
     232:	1a12      	subs	r2, r2, r0
     234:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     236:	0c12      	lsrs	r2, r2, #16
     238:	041b      	lsls	r3, r3, #16
     23a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     23c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     23e:	2200      	movs	r2, #0
     240:	e7e5      	b.n	20e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     242:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     244:	2b01      	cmp	r3, #1
     246:	d1f9      	bne.n	23c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     248:	000a      	movs	r2, r1
     24a:	2300      	movs	r3, #0
     24c:	2100      	movs	r1, #0
     24e:	4c0d      	ldr	r4, [pc, #52]	; (284 <_sercom_get_async_baud_val+0x8c>)
     250:	47a0      	blx	r4
     252:	0002      	movs	r2, r0
     254:	000b      	movs	r3, r1
     256:	9200      	str	r2, [sp, #0]
     258:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     25a:	0038      	movs	r0, r7
     25c:	2100      	movs	r1, #0
     25e:	4c0a      	ldr	r4, [pc, #40]	; (288 <_sercom_get_async_baud_val+0x90>)
     260:	47a0      	blx	r4
     262:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     264:	2380      	movs	r3, #128	; 0x80
     266:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     268:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     26a:	4298      	cmp	r0, r3
     26c:	d8cf      	bhi.n	20e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     26e:	0f79      	lsrs	r1, r7, #29
     270:	00f8      	lsls	r0, r7, #3
     272:	9a00      	ldr	r2, [sp, #0]
     274:	9b01      	ldr	r3, [sp, #4]
     276:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     278:	00ea      	lsls	r2, r5, #3
     27a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     27c:	b2d2      	uxtb	r2, r2
     27e:	0352      	lsls	r2, r2, #13
     280:	432a      	orrs	r2, r5
     282:	e7db      	b.n	23c <_sercom_get_async_baud_val+0x44>
     284:	00001635 	.word	0x00001635
     288:	00000115 	.word	0x00000115

0000028c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     28c:	b510      	push	{r4, lr}
     28e:	b082      	sub	sp, #8
     290:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     292:	4b0e      	ldr	r3, [pc, #56]	; (2cc <sercom_set_gclk_generator+0x40>)
     294:	781b      	ldrb	r3, [r3, #0]
     296:	2b00      	cmp	r3, #0
     298:	d007      	beq.n	2aa <sercom_set_gclk_generator+0x1e>
     29a:	2900      	cmp	r1, #0
     29c:	d105      	bne.n	2aa <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     29e:	4b0b      	ldr	r3, [pc, #44]	; (2cc <sercom_set_gclk_generator+0x40>)
     2a0:	785b      	ldrb	r3, [r3, #1]
     2a2:	4283      	cmp	r3, r0
     2a4:	d010      	beq.n	2c8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     2a6:	201d      	movs	r0, #29
     2a8:	e00c      	b.n	2c4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     2aa:	a901      	add	r1, sp, #4
     2ac:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     2ae:	2013      	movs	r0, #19
     2b0:	4b07      	ldr	r3, [pc, #28]	; (2d0 <sercom_set_gclk_generator+0x44>)
     2b2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     2b4:	2013      	movs	r0, #19
     2b6:	4b07      	ldr	r3, [pc, #28]	; (2d4 <sercom_set_gclk_generator+0x48>)
     2b8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     2ba:	4b04      	ldr	r3, [pc, #16]	; (2cc <sercom_set_gclk_generator+0x40>)
     2bc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     2be:	2201      	movs	r2, #1
     2c0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     2c2:	2000      	movs	r0, #0
}
     2c4:	b002      	add	sp, #8
     2c6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     2c8:	2000      	movs	r0, #0
     2ca:	e7fb      	b.n	2c4 <sercom_set_gclk_generator+0x38>
     2cc:	2000008c 	.word	0x2000008c
     2d0:	00001275 	.word	0x00001275
     2d4:	000011e9 	.word	0x000011e9

000002d8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     2d8:	4b40      	ldr	r3, [pc, #256]	; (3dc <_sercom_get_default_pad+0x104>)
     2da:	4298      	cmp	r0, r3
     2dc:	d031      	beq.n	342 <_sercom_get_default_pad+0x6a>
     2de:	d90a      	bls.n	2f6 <_sercom_get_default_pad+0x1e>
     2e0:	4b3f      	ldr	r3, [pc, #252]	; (3e0 <_sercom_get_default_pad+0x108>)
     2e2:	4298      	cmp	r0, r3
     2e4:	d04d      	beq.n	382 <_sercom_get_default_pad+0xaa>
     2e6:	4b3f      	ldr	r3, [pc, #252]	; (3e4 <_sercom_get_default_pad+0x10c>)
     2e8:	4298      	cmp	r0, r3
     2ea:	d05a      	beq.n	3a2 <_sercom_get_default_pad+0xca>
     2ec:	4b3e      	ldr	r3, [pc, #248]	; (3e8 <_sercom_get_default_pad+0x110>)
     2ee:	4298      	cmp	r0, r3
     2f0:	d037      	beq.n	362 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     2f2:	2000      	movs	r0, #0
}
     2f4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     2f6:	4b3d      	ldr	r3, [pc, #244]	; (3ec <_sercom_get_default_pad+0x114>)
     2f8:	4298      	cmp	r0, r3
     2fa:	d00c      	beq.n	316 <_sercom_get_default_pad+0x3e>
     2fc:	4b3c      	ldr	r3, [pc, #240]	; (3f0 <_sercom_get_default_pad+0x118>)
     2fe:	4298      	cmp	r0, r3
     300:	d1f7      	bne.n	2f2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     302:	2901      	cmp	r1, #1
     304:	d017      	beq.n	336 <_sercom_get_default_pad+0x5e>
     306:	2900      	cmp	r1, #0
     308:	d05d      	beq.n	3c6 <_sercom_get_default_pad+0xee>
     30a:	2902      	cmp	r1, #2
     30c:	d015      	beq.n	33a <_sercom_get_default_pad+0x62>
     30e:	2903      	cmp	r1, #3
     310:	d015      	beq.n	33e <_sercom_get_default_pad+0x66>
	return 0;
     312:	2000      	movs	r0, #0
     314:	e7ee      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     316:	2901      	cmp	r1, #1
     318:	d007      	beq.n	32a <_sercom_get_default_pad+0x52>
     31a:	2900      	cmp	r1, #0
     31c:	d051      	beq.n	3c2 <_sercom_get_default_pad+0xea>
     31e:	2902      	cmp	r1, #2
     320:	d005      	beq.n	32e <_sercom_get_default_pad+0x56>
     322:	2903      	cmp	r1, #3
     324:	d005      	beq.n	332 <_sercom_get_default_pad+0x5a>
	return 0;
     326:	2000      	movs	r0, #0
     328:	e7e4      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     32a:	4832      	ldr	r0, [pc, #200]	; (3f4 <_sercom_get_default_pad+0x11c>)
     32c:	e7e2      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     32e:	4832      	ldr	r0, [pc, #200]	; (3f8 <_sercom_get_default_pad+0x120>)
     330:	e7e0      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     332:	4832      	ldr	r0, [pc, #200]	; (3fc <_sercom_get_default_pad+0x124>)
     334:	e7de      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     336:	4832      	ldr	r0, [pc, #200]	; (400 <_sercom_get_default_pad+0x128>)
     338:	e7dc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     33a:	4832      	ldr	r0, [pc, #200]	; (404 <_sercom_get_default_pad+0x12c>)
     33c:	e7da      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     33e:	4832      	ldr	r0, [pc, #200]	; (408 <_sercom_get_default_pad+0x130>)
     340:	e7d8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     342:	2901      	cmp	r1, #1
     344:	d007      	beq.n	356 <_sercom_get_default_pad+0x7e>
     346:	2900      	cmp	r1, #0
     348:	d03f      	beq.n	3ca <_sercom_get_default_pad+0xf2>
     34a:	2902      	cmp	r1, #2
     34c:	d005      	beq.n	35a <_sercom_get_default_pad+0x82>
     34e:	2903      	cmp	r1, #3
     350:	d005      	beq.n	35e <_sercom_get_default_pad+0x86>
	return 0;
     352:	2000      	movs	r0, #0
     354:	e7ce      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     356:	482d      	ldr	r0, [pc, #180]	; (40c <_sercom_get_default_pad+0x134>)
     358:	e7cc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     35a:	482d      	ldr	r0, [pc, #180]	; (410 <_sercom_get_default_pad+0x138>)
     35c:	e7ca      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     35e:	482d      	ldr	r0, [pc, #180]	; (414 <_sercom_get_default_pad+0x13c>)
     360:	e7c8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     362:	2901      	cmp	r1, #1
     364:	d007      	beq.n	376 <_sercom_get_default_pad+0x9e>
     366:	2900      	cmp	r1, #0
     368:	d031      	beq.n	3ce <_sercom_get_default_pad+0xf6>
     36a:	2902      	cmp	r1, #2
     36c:	d005      	beq.n	37a <_sercom_get_default_pad+0xa2>
     36e:	2903      	cmp	r1, #3
     370:	d005      	beq.n	37e <_sercom_get_default_pad+0xa6>
	return 0;
     372:	2000      	movs	r0, #0
     374:	e7be      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     376:	4828      	ldr	r0, [pc, #160]	; (418 <_sercom_get_default_pad+0x140>)
     378:	e7bc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     37a:	4828      	ldr	r0, [pc, #160]	; (41c <_sercom_get_default_pad+0x144>)
     37c:	e7ba      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     37e:	4828      	ldr	r0, [pc, #160]	; (420 <_sercom_get_default_pad+0x148>)
     380:	e7b8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     382:	2901      	cmp	r1, #1
     384:	d007      	beq.n	396 <_sercom_get_default_pad+0xbe>
     386:	2900      	cmp	r1, #0
     388:	d023      	beq.n	3d2 <_sercom_get_default_pad+0xfa>
     38a:	2902      	cmp	r1, #2
     38c:	d005      	beq.n	39a <_sercom_get_default_pad+0xc2>
     38e:	2903      	cmp	r1, #3
     390:	d005      	beq.n	39e <_sercom_get_default_pad+0xc6>
	return 0;
     392:	2000      	movs	r0, #0
     394:	e7ae      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     396:	4823      	ldr	r0, [pc, #140]	; (424 <_sercom_get_default_pad+0x14c>)
     398:	e7ac      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     39a:	4823      	ldr	r0, [pc, #140]	; (428 <_sercom_get_default_pad+0x150>)
     39c:	e7aa      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     39e:	4823      	ldr	r0, [pc, #140]	; (42c <_sercom_get_default_pad+0x154>)
     3a0:	e7a8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3a2:	2901      	cmp	r1, #1
     3a4:	d007      	beq.n	3b6 <_sercom_get_default_pad+0xde>
     3a6:	2900      	cmp	r1, #0
     3a8:	d015      	beq.n	3d6 <_sercom_get_default_pad+0xfe>
     3aa:	2902      	cmp	r1, #2
     3ac:	d005      	beq.n	3ba <_sercom_get_default_pad+0xe2>
     3ae:	2903      	cmp	r1, #3
     3b0:	d005      	beq.n	3be <_sercom_get_default_pad+0xe6>
	return 0;
     3b2:	2000      	movs	r0, #0
     3b4:	e79e      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3b6:	481e      	ldr	r0, [pc, #120]	; (430 <_sercom_get_default_pad+0x158>)
     3b8:	e79c      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ba:	481e      	ldr	r0, [pc, #120]	; (434 <_sercom_get_default_pad+0x15c>)
     3bc:	e79a      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3be:	481e      	ldr	r0, [pc, #120]	; (438 <_sercom_get_default_pad+0x160>)
     3c0:	e798      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3c2:	481e      	ldr	r0, [pc, #120]	; (43c <_sercom_get_default_pad+0x164>)
     3c4:	e796      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3c6:	2003      	movs	r0, #3
     3c8:	e794      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ca:	481d      	ldr	r0, [pc, #116]	; (440 <_sercom_get_default_pad+0x168>)
     3cc:	e792      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ce:	481d      	ldr	r0, [pc, #116]	; (444 <_sercom_get_default_pad+0x16c>)
     3d0:	e790      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3d2:	481d      	ldr	r0, [pc, #116]	; (448 <_sercom_get_default_pad+0x170>)
     3d4:	e78e      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3d6:	481d      	ldr	r0, [pc, #116]	; (44c <_sercom_get_default_pad+0x174>)
     3d8:	e78c      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3da:	46c0      	nop			; (mov r8, r8)
     3dc:	42001000 	.word	0x42001000
     3e0:	42001800 	.word	0x42001800
     3e4:	42001c00 	.word	0x42001c00
     3e8:	42001400 	.word	0x42001400
     3ec:	42000800 	.word	0x42000800
     3f0:	42000c00 	.word	0x42000c00
     3f4:	00050003 	.word	0x00050003
     3f8:	00060003 	.word	0x00060003
     3fc:	00070003 	.word	0x00070003
     400:	00010003 	.word	0x00010003
     404:	001e0003 	.word	0x001e0003
     408:	001f0003 	.word	0x001f0003
     40c:	000d0002 	.word	0x000d0002
     410:	000e0002 	.word	0x000e0002
     414:	000f0002 	.word	0x000f0002
     418:	00110003 	.word	0x00110003
     41c:	00120003 	.word	0x00120003
     420:	00130003 	.word	0x00130003
     424:	003f0005 	.word	0x003f0005
     428:	003e0005 	.word	0x003e0005
     42c:	00520005 	.word	0x00520005
     430:	00170003 	.word	0x00170003
     434:	00180003 	.word	0x00180003
     438:	00190003 	.word	0x00190003
     43c:	00040003 	.word	0x00040003
     440:	000c0002 	.word	0x000c0002
     444:	00100003 	.word	0x00100003
     448:	00530005 	.word	0x00530005
     44c:	00160003 	.word	0x00160003

00000450 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     450:	b530      	push	{r4, r5, lr}
     452:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     454:	4b0b      	ldr	r3, [pc, #44]	; (484 <_sercom_get_sercom_inst_index+0x34>)
     456:	466a      	mov	r2, sp
     458:	cb32      	ldmia	r3!, {r1, r4, r5}
     45a:	c232      	stmia	r2!, {r1, r4, r5}
     45c:	cb32      	ldmia	r3!, {r1, r4, r5}
     45e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     460:	9b00      	ldr	r3, [sp, #0]
     462:	4283      	cmp	r3, r0
     464:	d00b      	beq.n	47e <_sercom_get_sercom_inst_index+0x2e>
     466:	2301      	movs	r3, #1
     468:	009a      	lsls	r2, r3, #2
     46a:	4669      	mov	r1, sp
     46c:	5852      	ldr	r2, [r2, r1]
     46e:	4282      	cmp	r2, r0
     470:	d006      	beq.n	480 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     472:	3301      	adds	r3, #1
     474:	2b06      	cmp	r3, #6
     476:	d1f7      	bne.n	468 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     478:	2000      	movs	r0, #0
}
     47a:	b007      	add	sp, #28
     47c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     47e:	2300      	movs	r3, #0
			return i;
     480:	b2d8      	uxtb	r0, r3
     482:	e7fa      	b.n	47a <_sercom_get_sercom_inst_index+0x2a>
     484:	00001e9c 	.word	0x00001e9c

00000488 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     488:	b5f0      	push	{r4, r5, r6, r7, lr}
     48a:	46c6      	mov	lr, r8
     48c:	b500      	push	{lr}
     48e:	000c      	movs	r4, r1
     490:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     492:	2800      	cmp	r0, #0
     494:	d10f      	bne.n	4b6 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
     496:	2a00      	cmp	r2, #0
     498:	dd11      	ble.n	4be <_read+0x36>
     49a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     49c:	4e09      	ldr	r6, [pc, #36]	; (4c4 <_read+0x3c>)
     49e:	4d0a      	ldr	r5, [pc, #40]	; (4c8 <_read+0x40>)
     4a0:	6830      	ldr	r0, [r6, #0]
     4a2:	0021      	movs	r1, r4
     4a4:	682b      	ldr	r3, [r5, #0]
     4a6:	4798      	blx	r3
		ptr++;
     4a8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
     4aa:	42bc      	cmp	r4, r7
     4ac:	d1f8      	bne.n	4a0 <_read+0x18>
		nChars++;
	}
	return nChars;
}
     4ae:	4640      	mov	r0, r8
     4b0:	bc04      	pop	{r2}
     4b2:	4690      	mov	r8, r2
     4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
     4b6:	2301      	movs	r3, #1
     4b8:	425b      	negs	r3, r3
     4ba:	4698      	mov	r8, r3
     4bc:	e7f7      	b.n	4ae <_read+0x26>
	for (; len > 0; --len) {
     4be:	4680      	mov	r8, r0
     4c0:	e7f5      	b.n	4ae <_read+0x26>
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	200000dc 	.word	0x200000dc
     4c8:	200000d4 	.word	0x200000d4

000004cc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ce:	46c6      	mov	lr, r8
     4d0:	b500      	push	{lr}
     4d2:	000e      	movs	r6, r1
     4d4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     4d6:	3801      	subs	r0, #1
     4d8:	2802      	cmp	r0, #2
     4da:	d810      	bhi.n	4fe <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     4dc:	2a00      	cmp	r2, #0
     4de:	d011      	beq.n	504 <_write+0x38>
     4e0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     4e2:	4b0c      	ldr	r3, [pc, #48]	; (514 <_write+0x48>)
     4e4:	4698      	mov	r8, r3
     4e6:	4f0c      	ldr	r7, [pc, #48]	; (518 <_write+0x4c>)
     4e8:	4643      	mov	r3, r8
     4ea:	6818      	ldr	r0, [r3, #0]
     4ec:	5d31      	ldrb	r1, [r6, r4]
     4ee:	683b      	ldr	r3, [r7, #0]
     4f0:	4798      	blx	r3
     4f2:	2800      	cmp	r0, #0
     4f4:	db08      	blt.n	508 <_write+0x3c>
			return -1;
		}
		++nChars;
     4f6:	3401      	adds	r4, #1
	for (; len != 0; --len) {
     4f8:	42a5      	cmp	r5, r4
     4fa:	d1f5      	bne.n	4e8 <_write+0x1c>
     4fc:	e006      	b.n	50c <_write+0x40>
		return -1;
     4fe:	2401      	movs	r4, #1
     500:	4264      	negs	r4, r4
     502:	e003      	b.n	50c <_write+0x40>
	for (; len != 0; --len) {
     504:	0014      	movs	r4, r2
     506:	e001      	b.n	50c <_write+0x40>
			return -1;
     508:	2401      	movs	r4, #1
     50a:	4264      	negs	r4, r4
	}
	return nChars;
}
     50c:	0020      	movs	r0, r4
     50e:	bc04      	pop	{r2}
     510:	4690      	mov	r8, r2
     512:	bdf0      	pop	{r4, r5, r6, r7, pc}
     514:	200000dc 	.word	0x200000dc
     518:	200000d8 	.word	0x200000d8

0000051c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     51c:	b570      	push	{r4, r5, r6, lr}
     51e:	b082      	sub	sp, #8
     520:	0005      	movs	r5, r0
     522:	000e      	movs	r6, r1
	uint16_t temp = 0;
     524:	2200      	movs	r2, #0
     526:	466b      	mov	r3, sp
     528:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     52a:	4c06      	ldr	r4, [pc, #24]	; (544 <usart_serial_getchar+0x28>)
     52c:	466b      	mov	r3, sp
     52e:	1d99      	adds	r1, r3, #6
     530:	0028      	movs	r0, r5
     532:	47a0      	blx	r4
     534:	2800      	cmp	r0, #0
     536:	d1f9      	bne.n	52c <usart_serial_getchar+0x10>

	*c = temp;
     538:	466b      	mov	r3, sp
     53a:	3306      	adds	r3, #6
     53c:	881b      	ldrh	r3, [r3, #0]
     53e:	7033      	strb	r3, [r6, #0]
}
     540:	b002      	add	sp, #8
     542:	bd70      	pop	{r4, r5, r6, pc}
     544:	00000a51 	.word	0x00000a51

00000548 <usart_serial_putchar>:
{
     548:	b570      	push	{r4, r5, r6, lr}
     54a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     54c:	b28c      	uxth	r4, r1
     54e:	4e03      	ldr	r6, [pc, #12]	; (55c <usart_serial_putchar+0x14>)
     550:	0021      	movs	r1, r4
     552:	0028      	movs	r0, r5
     554:	47b0      	blx	r6
     556:	2800      	cmp	r0, #0
     558:	d1fa      	bne.n	550 <usart_serial_putchar+0x8>
}
     55a:	bd70      	pop	{r4, r5, r6, pc}
     55c:	00000a25 	.word	0x00000a25

00000560 <artist_usart_configure>:
 *  Author: credt
 */ 
#include "TheArtist.h" 


void artist_usart_configure(struct usart_module * usart_instance) {
     560:	b570      	push	{r4, r5, r6, lr}
     562:	b090      	sub	sp, #64	; 0x40
     564:	0004      	movs	r4, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     566:	2380      	movs	r3, #128	; 0x80
     568:	05db      	lsls	r3, r3, #23
     56a:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     56c:	2300      	movs	r3, #0
     56e:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     570:	22ff      	movs	r2, #255	; 0xff
     572:	4669      	mov	r1, sp
     574:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     576:	2200      	movs	r2, #0
     578:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     57a:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
     57c:	2196      	movs	r1, #150	; 0x96
     57e:	0189      	lsls	r1, r1, #6
     580:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
     582:	2101      	movs	r1, #1
     584:	2024      	movs	r0, #36	; 0x24
     586:	466d      	mov	r5, sp
     588:	5429      	strb	r1, [r5, r0]
	config->transmitter_enable = true;
     58a:	3001      	adds	r0, #1
     58c:	5429      	strb	r1, [r5, r0]
	config->clock_polarity_inverted = false;
     58e:	3125      	adds	r1, #37	; 0x25
     590:	546b      	strb	r3, [r5, r1]
	config->use_external_clock = false;
     592:	3101      	adds	r1, #1
     594:	546b      	strb	r3, [r5, r1]
	config->ext_clock_freq   = 0;
     596:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     598:	3105      	adds	r1, #5
     59a:	546b      	strb	r3, [r5, r1]
	config->generator_source = GCLK_GENERATOR_0;
     59c:	3101      	adds	r1, #1
     59e:	546b      	strb	r3, [r5, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     5a0:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     5a2:	822b      	strh	r3, [r5, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     5a4:	76eb      	strb	r3, [r5, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     5a6:	762a      	strb	r2, [r5, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     5a8:	772a      	strb	r2, [r5, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     5aa:	766a      	strb	r2, [r5, #25]
	config->receive_pulse_length                    = 19;
     5ac:	2313      	movs	r3, #19
     5ae:	76ab      	strb	r3, [r5, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     5b0:	776a      	strb	r2, [r5, #29]
	struct usart_config config;
	usart_get_config_defaults(&config);
	config.baudrate = CONF_ARTIST_BAUDRATE;
	config.mux_setting	= EDBG_CDC_SERCOM_MUX_SETTING;
     5b2:	2380      	movs	r3, #128	; 0x80
     5b4:	035b      	lsls	r3, r3, #13
     5b6:	9303      	str	r3, [sp, #12]
	config.pinmux_pad0	= EDBG_CDC_SERCOM_PINMUX_PAD0;
     5b8:	4b1d      	ldr	r3, [pc, #116]	; (630 <artist_usart_configure+0xd0>)
     5ba:	930c      	str	r3, [sp, #48]	; 0x30
	config.pinmux_pad1	= EDBG_CDC_SERCOM_PINMUX_PAD1;
     5bc:	4b1d      	ldr	r3, [pc, #116]	; (634 <artist_usart_configure+0xd4>)
     5be:	930d      	str	r3, [sp, #52]	; 0x34
	config.pinmux_pad2	= EDBG_CDC_SERCOM_PINMUX_PAD2;
     5c0:	2301      	movs	r3, #1
     5c2:	425b      	negs	r3, r3
     5c4:	930e      	str	r3, [sp, #56]	; 0x38
	config.pinmux_pad3	= EDBG_CDC_SERCOM_PINMUX_PAD3;
     5c6:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(usart_instance, EDBG_CDC_MODULE, &config) != STATUS_OK);
     5c8:	4e1b      	ldr	r6, [pc, #108]	; (638 <artist_usart_configure+0xd8>)
     5ca:	4d1c      	ldr	r5, [pc, #112]	; (63c <artist_usart_configure+0xdc>)
     5cc:	466a      	mov	r2, sp
     5ce:	0031      	movs	r1, r6
     5d0:	0020      	movs	r0, r4
     5d2:	47a8      	blx	r5
     5d4:	2800      	cmp	r0, #0
     5d6:	d1f9      	bne.n	5cc <artist_usart_configure+0x6c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     5d8:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     5da:	0028      	movs	r0, r5
     5dc:	4b18      	ldr	r3, [pc, #96]	; (640 <artist_usart_configure+0xe0>)
     5de:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     5e0:	231f      	movs	r3, #31
     5e2:	4018      	ands	r0, r3
     5e4:	3b1e      	subs	r3, #30
     5e6:	4083      	lsls	r3, r0
     5e8:	4a16      	ldr	r2, [pc, #88]	; (644 <artist_usart_configure+0xe4>)
     5ea:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     5ec:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     5ee:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     5f0:	2b00      	cmp	r3, #0
     5f2:	d1fc      	bne.n	5ee <artist_usart_configure+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     5f4:	682b      	ldr	r3, [r5, #0]
     5f6:	2202      	movs	r2, #2
     5f8:	4313      	orrs	r3, r2
     5fa:	602b      	str	r3, [r5, #0]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     5fc:	4b12      	ldr	r3, [pc, #72]	; (648 <artist_usart_configure+0xe8>)
     5fe:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     600:	4a12      	ldr	r2, [pc, #72]	; (64c <artist_usart_configure+0xec>)
     602:	4b13      	ldr	r3, [pc, #76]	; (650 <artist_usart_configure+0xf0>)
     604:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     606:	4a13      	ldr	r2, [pc, #76]	; (654 <artist_usart_configure+0xf4>)
     608:	4b13      	ldr	r3, [pc, #76]	; (658 <artist_usart_configure+0xf8>)
     60a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     60c:	466a      	mov	r2, sp
     60e:	490a      	ldr	r1, [pc, #40]	; (638 <artist_usart_configure+0xd8>)
     610:	0020      	movs	r0, r4
     612:	4b0a      	ldr	r3, [pc, #40]	; (63c <artist_usart_configure+0xdc>)
     614:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     616:	4d11      	ldr	r5, [pc, #68]	; (65c <artist_usart_configure+0xfc>)
     618:	682b      	ldr	r3, [r5, #0]
     61a:	6898      	ldr	r0, [r3, #8]
     61c:	2100      	movs	r1, #0
     61e:	4c10      	ldr	r4, [pc, #64]	; (660 <artist_usart_configure+0x100>)
     620:	47a0      	blx	r4
	setbuf(stdin, NULL);
     622:	682b      	ldr	r3, [r5, #0]
     624:	6858      	ldr	r0, [r3, #4]
     626:	2100      	movs	r1, #0
     628:	47a0      	blx	r4
	
	usart_enable(usart_instance);
	
	stdio_serial_init(usart_instance, EDBG_CDC_MODULE, &config);
}
     62a:	b010      	add	sp, #64	; 0x40
     62c:	bd70      	pop	{r4, r5, r6, pc}
     62e:	46c0      	nop			; (mov r8, r8)
     630:	00040003 	.word	0x00040003
     634:	00050003 	.word	0x00050003
     638:	42000800 	.word	0x42000800
     63c:	000006e1 	.word	0x000006e1
     640:	00000c95 	.word	0x00000c95
     644:	e000e100 	.word	0xe000e100
     648:	200000dc 	.word	0x200000dc
     64c:	00000549 	.word	0x00000549
     650:	200000d8 	.word	0x200000d8
     654:	0000051d 	.word	0x0000051d
     658:	200000d4 	.word	0x200000d4
     65c:	2000000c 	.word	0x2000000c
     660:	000016e1 	.word	0x000016e1

00000664 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     664:	b5f0      	push	{r4, r5, r6, r7, lr}
     666:	46c6      	mov	lr, r8
     668:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     66a:	0080      	lsls	r0, r0, #2
     66c:	4b0e      	ldr	r3, [pc, #56]	; (6a8 <_tcc_interrupt_handler+0x44>)
     66e:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     670:	683b      	ldr	r3, [r7, #0]
     672:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     678:	4013      	ands	r3, r2
     67a:	401e      	ands	r6, r3
     67c:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     67e:	4b0b      	ldr	r3, [pc, #44]	; (6ac <_tcc_interrupt_handler+0x48>)
     680:	4698      	mov	r8, r3
     682:	e002      	b.n	68a <_tcc_interrupt_handler+0x26>
     684:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     686:	2c30      	cmp	r4, #48	; 0x30
     688:	d00a      	beq.n	6a0 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     68a:	4643      	mov	r3, r8
     68c:	58e5      	ldr	r5, [r4, r3]
     68e:	4235      	tst	r5, r6
     690:	d0f8      	beq.n	684 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     692:	193b      	adds	r3, r7, r4
     694:	685b      	ldr	r3, [r3, #4]
     696:	0038      	movs	r0, r7
     698:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     69a:	683b      	ldr	r3, [r7, #0]
     69c:	62dd      	str	r5, [r3, #44]	; 0x2c
     69e:	e7f1      	b.n	684 <_tcc_interrupt_handler+0x20>
		}
	}
}
     6a0:	bc04      	pop	{r2}
     6a2:	4690      	mov	r8, r2
     6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6a6:	46c0      	nop			; (mov r8, r8)
     6a8:	20000114 	.word	0x20000114
     6ac:	00001eb4 	.word	0x00001eb4

000006b0 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     6b0:	b510      	push	{r4, lr}
     6b2:	2000      	movs	r0, #0
     6b4:	4b01      	ldr	r3, [pc, #4]	; (6bc <TCC0_Handler+0xc>)
     6b6:	4798      	blx	r3
     6b8:	bd10      	pop	{r4, pc}
     6ba:	46c0      	nop			; (mov r8, r8)
     6bc:	00000665 	.word	0x00000665

000006c0 <TCC1_Handler>:
     6c0:	b510      	push	{r4, lr}
     6c2:	2001      	movs	r0, #1
     6c4:	4b01      	ldr	r3, [pc, #4]	; (6cc <TCC1_Handler+0xc>)
     6c6:	4798      	blx	r3
     6c8:	bd10      	pop	{r4, pc}
     6ca:	46c0      	nop			; (mov r8, r8)
     6cc:	00000665 	.word	0x00000665

000006d0 <TCC2_Handler>:
     6d0:	b510      	push	{r4, lr}
     6d2:	2002      	movs	r0, #2
     6d4:	4b01      	ldr	r3, [pc, #4]	; (6dc <TCC2_Handler+0xc>)
     6d6:	4798      	blx	r3
     6d8:	bd10      	pop	{r4, pc}
     6da:	46c0      	nop			; (mov r8, r8)
     6dc:	00000665 	.word	0x00000665

000006e0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6e2:	46de      	mov	lr, fp
     6e4:	4657      	mov	r7, sl
     6e6:	464e      	mov	r6, r9
     6e8:	4645      	mov	r5, r8
     6ea:	b5e0      	push	{r5, r6, r7, lr}
     6ec:	b091      	sub	sp, #68	; 0x44
     6ee:	0005      	movs	r5, r0
     6f0:	000c      	movs	r4, r1
     6f2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     6f4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     6f6:	0008      	movs	r0, r1
     6f8:	4bbc      	ldr	r3, [pc, #752]	; (9ec <usart_init+0x30c>)
     6fa:	4798      	blx	r3
     6fc:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     6fe:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     700:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     702:	07db      	lsls	r3, r3, #31
     704:	d506      	bpl.n	714 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     706:	b011      	add	sp, #68	; 0x44
     708:	bc3c      	pop	{r2, r3, r4, r5}
     70a:	4690      	mov	r8, r2
     70c:	4699      	mov	r9, r3
     70e:	46a2      	mov	sl, r4
     710:	46ab      	mov	fp, r5
     712:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     714:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     716:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     718:	079b      	lsls	r3, r3, #30
     71a:	d4f4      	bmi.n	706 <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     71c:	49b4      	ldr	r1, [pc, #720]	; (9f0 <usart_init+0x310>)
     71e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     720:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     722:	2301      	movs	r3, #1
     724:	40bb      	lsls	r3, r7
     726:	4303      	orrs	r3, r0
     728:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     72a:	a90f      	add	r1, sp, #60	; 0x3c
     72c:	272d      	movs	r7, #45	; 0x2d
     72e:	5df3      	ldrb	r3, [r6, r7]
     730:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     732:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     734:	b2d3      	uxtb	r3, r2
     736:	9302      	str	r3, [sp, #8]
     738:	0018      	movs	r0, r3
     73a:	4bae      	ldr	r3, [pc, #696]	; (9f4 <usart_init+0x314>)
     73c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     73e:	9802      	ldr	r0, [sp, #8]
     740:	4bad      	ldr	r3, [pc, #692]	; (9f8 <usart_init+0x318>)
     742:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     744:	5df0      	ldrb	r0, [r6, r7]
     746:	2100      	movs	r1, #0
     748:	4bac      	ldr	r3, [pc, #688]	; (9fc <usart_init+0x31c>)
     74a:	4798      	blx	r3
	module->character_size = config->character_size;
     74c:	7af3      	ldrb	r3, [r6, #11]
     74e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     750:	2324      	movs	r3, #36	; 0x24
     752:	5cf3      	ldrb	r3, [r6, r3]
     754:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     756:	2325      	movs	r3, #37	; 0x25
     758:	5cf3      	ldrb	r3, [r6, r3]
     75a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     75c:	7ef3      	ldrb	r3, [r6, #27]
     75e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     760:	7f33      	ldrb	r3, [r6, #28]
     762:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     764:	682b      	ldr	r3, [r5, #0]
     766:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     768:	0018      	movs	r0, r3
     76a:	4ba0      	ldr	r3, [pc, #640]	; (9ec <usart_init+0x30c>)
     76c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     76e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     770:	2200      	movs	r2, #0
     772:	230e      	movs	r3, #14
     774:	a906      	add	r1, sp, #24
     776:	468c      	mov	ip, r1
     778:	4463      	add	r3, ip
     77a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     77c:	8a32      	ldrh	r2, [r6, #16]
     77e:	9202      	str	r2, [sp, #8]
     780:	2380      	movs	r3, #128	; 0x80
     782:	01db      	lsls	r3, r3, #7
     784:	429a      	cmp	r2, r3
     786:	d100      	bne.n	78a <usart_init+0xaa>
     788:	e09e      	b.n	8c8 <usart_init+0x1e8>
     78a:	d90f      	bls.n	7ac <usart_init+0xcc>
     78c:	23c0      	movs	r3, #192	; 0xc0
     78e:	01db      	lsls	r3, r3, #7
     790:	9a02      	ldr	r2, [sp, #8]
     792:	429a      	cmp	r2, r3
     794:	d100      	bne.n	798 <usart_init+0xb8>
     796:	e092      	b.n	8be <usart_init+0x1de>
     798:	2380      	movs	r3, #128	; 0x80
     79a:	021b      	lsls	r3, r3, #8
     79c:	429a      	cmp	r2, r3
     79e:	d000      	beq.n	7a2 <usart_init+0xc2>
     7a0:	e11f      	b.n	9e2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     7a2:	2303      	movs	r3, #3
     7a4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     7a6:	2300      	movs	r3, #0
     7a8:	9307      	str	r3, [sp, #28]
     7aa:	e008      	b.n	7be <usart_init+0xde>
	switch (config->sample_rate) {
     7ac:	2380      	movs	r3, #128	; 0x80
     7ae:	019b      	lsls	r3, r3, #6
     7b0:	429a      	cmp	r2, r3
     7b2:	d000      	beq.n	7b6 <usart_init+0xd6>
     7b4:	e115      	b.n	9e2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     7b6:	2310      	movs	r3, #16
     7b8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     7ba:	3b0f      	subs	r3, #15
     7bc:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     7be:	6833      	ldr	r3, [r6, #0]
     7c0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     7c2:	68f3      	ldr	r3, [r6, #12]
     7c4:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     7c6:	6973      	ldr	r3, [r6, #20]
     7c8:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     7ca:	7e33      	ldrb	r3, [r6, #24]
     7cc:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     7ce:	2326      	movs	r3, #38	; 0x26
     7d0:	5cf3      	ldrb	r3, [r6, r3]
     7d2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     7d4:	6873      	ldr	r3, [r6, #4]
     7d6:	4699      	mov	r9, r3
	switch (transfer_mode)
     7d8:	2b00      	cmp	r3, #0
     7da:	d100      	bne.n	7de <usart_init+0xfe>
     7dc:	e0a0      	b.n	920 <usart_init+0x240>
     7de:	2380      	movs	r3, #128	; 0x80
     7e0:	055b      	lsls	r3, r3, #21
     7e2:	4599      	cmp	r9, r3
     7e4:	d100      	bne.n	7e8 <usart_init+0x108>
     7e6:	e084      	b.n	8f2 <usart_init+0x212>
	if(config->encoding_format_enable) {
     7e8:	7e73      	ldrb	r3, [r6, #25]
     7ea:	2b00      	cmp	r3, #0
     7ec:	d002      	beq.n	7f4 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     7ee:	7eb3      	ldrb	r3, [r6, #26]
     7f0:	4642      	mov	r2, r8
     7f2:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
     7f4:	682a      	ldr	r2, [r5, #0]
     7f6:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
     7f8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     7fa:	2b00      	cmp	r3, #0
     7fc:	d1fc      	bne.n	7f8 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     7fe:	330e      	adds	r3, #14
     800:	aa06      	add	r2, sp, #24
     802:	4694      	mov	ip, r2
     804:	4463      	add	r3, ip
     806:	881b      	ldrh	r3, [r3, #0]
     808:	4642      	mov	r2, r8
     80a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     80c:	9b05      	ldr	r3, [sp, #20]
     80e:	9a03      	ldr	r2, [sp, #12]
     810:	4313      	orrs	r3, r2
     812:	9a04      	ldr	r2, [sp, #16]
     814:	4313      	orrs	r3, r2
     816:	464a      	mov	r2, r9
     818:	4313      	orrs	r3, r2
     81a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     81c:	465b      	mov	r3, fp
     81e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     820:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     822:	4653      	mov	r3, sl
     824:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     826:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     828:	2327      	movs	r3, #39	; 0x27
     82a:	5cf3      	ldrb	r3, [r6, r3]
     82c:	2b00      	cmp	r3, #0
     82e:	d101      	bne.n	834 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     830:	3304      	adds	r3, #4
     832:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     834:	7e73      	ldrb	r3, [r6, #25]
     836:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     838:	7f32      	ldrb	r2, [r6, #28]
     83a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     83c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     83e:	7f72      	ldrb	r2, [r6, #29]
     840:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     842:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     844:	2224      	movs	r2, #36	; 0x24
     846:	5cb2      	ldrb	r2, [r6, r2]
     848:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     84a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     84c:	2225      	movs	r2, #37	; 0x25
     84e:	5cb2      	ldrb	r2, [r6, r2]
     850:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     852:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     854:	7ab1      	ldrb	r1, [r6, #10]
     856:	7af2      	ldrb	r2, [r6, #11]
     858:	4311      	orrs	r1, r2
     85a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     85c:	8933      	ldrh	r3, [r6, #8]
     85e:	2bff      	cmp	r3, #255	; 0xff
     860:	d100      	bne.n	864 <usart_init+0x184>
     862:	e081      	b.n	968 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     864:	2280      	movs	r2, #128	; 0x80
     866:	0452      	lsls	r2, r2, #17
     868:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     86a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     86c:	232c      	movs	r3, #44	; 0x2c
     86e:	5cf3      	ldrb	r3, [r6, r3]
     870:	2b00      	cmp	r3, #0
     872:	d103      	bne.n	87c <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     874:	4b62      	ldr	r3, [pc, #392]	; (a00 <usart_init+0x320>)
     876:	789b      	ldrb	r3, [r3, #2]
     878:	079b      	lsls	r3, r3, #30
     87a:	d501      	bpl.n	880 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     87c:	2380      	movs	r3, #128	; 0x80
     87e:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     880:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     882:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     884:	2b00      	cmp	r3, #0
     886:	d1fc      	bne.n	882 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     888:	4643      	mov	r3, r8
     88a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     88c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     88e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     890:	2b00      	cmp	r3, #0
     892:	d1fc      	bne.n	88e <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     894:	4643      	mov	r3, r8
     896:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     898:	ab0e      	add	r3, sp, #56	; 0x38
     89a:	2280      	movs	r2, #128	; 0x80
     89c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     89e:	2200      	movs	r2, #0
     8a0:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     8a2:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     8a4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     8a6:	6b33      	ldr	r3, [r6, #48]	; 0x30
     8a8:	930a      	str	r3, [sp, #40]	; 0x28
     8aa:	6b73      	ldr	r3, [r6, #52]	; 0x34
     8ac:	930b      	str	r3, [sp, #44]	; 0x2c
     8ae:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     8b0:	930c      	str	r3, [sp, #48]	; 0x30
     8b2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     8b4:	9302      	str	r3, [sp, #8]
     8b6:	930d      	str	r3, [sp, #52]	; 0x34
     8b8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     8ba:	ae0a      	add	r6, sp, #40	; 0x28
     8bc:	e063      	b.n	986 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     8be:	2308      	movs	r3, #8
     8c0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     8c2:	3b07      	subs	r3, #7
     8c4:	9307      	str	r3, [sp, #28]
     8c6:	e77a      	b.n	7be <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     8c8:	6833      	ldr	r3, [r6, #0]
     8ca:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     8cc:	68f3      	ldr	r3, [r6, #12]
     8ce:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     8d0:	6973      	ldr	r3, [r6, #20]
     8d2:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     8d4:	7e33      	ldrb	r3, [r6, #24]
     8d6:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     8d8:	2326      	movs	r3, #38	; 0x26
     8da:	5cf3      	ldrb	r3, [r6, r3]
     8dc:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     8de:	6873      	ldr	r3, [r6, #4]
     8e0:	4699      	mov	r9, r3
	switch (transfer_mode)
     8e2:	2b00      	cmp	r3, #0
     8e4:	d018      	beq.n	918 <usart_init+0x238>
     8e6:	2380      	movs	r3, #128	; 0x80
     8e8:	055b      	lsls	r3, r3, #21
     8ea:	4599      	cmp	r9, r3
     8ec:	d001      	beq.n	8f2 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     8ee:	2000      	movs	r0, #0
     8f0:	e025      	b.n	93e <usart_init+0x25e>
			if (!config->use_external_clock) {
     8f2:	2327      	movs	r3, #39	; 0x27
     8f4:	5cf3      	ldrb	r3, [r6, r3]
     8f6:	2b00      	cmp	r3, #0
     8f8:	d000      	beq.n	8fc <usart_init+0x21c>
     8fa:	e775      	b.n	7e8 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     8fc:	6a33      	ldr	r3, [r6, #32]
     8fe:	001f      	movs	r7, r3
     900:	b2c0      	uxtb	r0, r0
     902:	4b40      	ldr	r3, [pc, #256]	; (a04 <usart_init+0x324>)
     904:	4798      	blx	r3
     906:	0001      	movs	r1, r0
     908:	220e      	movs	r2, #14
     90a:	ab06      	add	r3, sp, #24
     90c:	469c      	mov	ip, r3
     90e:	4462      	add	r2, ip
     910:	0038      	movs	r0, r7
     912:	4b3d      	ldr	r3, [pc, #244]	; (a08 <usart_init+0x328>)
     914:	4798      	blx	r3
     916:	e012      	b.n	93e <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     918:	2308      	movs	r3, #8
     91a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     91c:	2300      	movs	r3, #0
     91e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     920:	2327      	movs	r3, #39	; 0x27
     922:	5cf3      	ldrb	r3, [r6, r3]
     924:	2b00      	cmp	r3, #0
     926:	d00e      	beq.n	946 <usart_init+0x266>
				status_code =
     928:	9b06      	ldr	r3, [sp, #24]
     92a:	9300      	str	r3, [sp, #0]
     92c:	9b07      	ldr	r3, [sp, #28]
     92e:	220e      	movs	r2, #14
     930:	a906      	add	r1, sp, #24
     932:	468c      	mov	ip, r1
     934:	4462      	add	r2, ip
     936:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     938:	6a30      	ldr	r0, [r6, #32]
     93a:	4f34      	ldr	r7, [pc, #208]	; (a0c <usart_init+0x32c>)
     93c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     93e:	2800      	cmp	r0, #0
     940:	d000      	beq.n	944 <usart_init+0x264>
     942:	e6e0      	b.n	706 <usart_init+0x26>
     944:	e750      	b.n	7e8 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     946:	6a33      	ldr	r3, [r6, #32]
     948:	001f      	movs	r7, r3
     94a:	b2c0      	uxtb	r0, r0
     94c:	4b2d      	ldr	r3, [pc, #180]	; (a04 <usart_init+0x324>)
     94e:	4798      	blx	r3
     950:	0001      	movs	r1, r0
				status_code =
     952:	9b06      	ldr	r3, [sp, #24]
     954:	9300      	str	r3, [sp, #0]
     956:	9b07      	ldr	r3, [sp, #28]
     958:	220e      	movs	r2, #14
     95a:	a806      	add	r0, sp, #24
     95c:	4684      	mov	ip, r0
     95e:	4462      	add	r2, ip
     960:	0038      	movs	r0, r7
     962:	4f2a      	ldr	r7, [pc, #168]	; (a0c <usart_init+0x32c>)
     964:	47b8      	blx	r7
     966:	e7ea      	b.n	93e <usart_init+0x25e>
		if(config->lin_slave_enable) {
     968:	7ef3      	ldrb	r3, [r6, #27]
     96a:	2b00      	cmp	r3, #0
     96c:	d100      	bne.n	970 <usart_init+0x290>
     96e:	e77d      	b.n	86c <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     970:	2380      	movs	r3, #128	; 0x80
     972:	04db      	lsls	r3, r3, #19
     974:	431f      	orrs	r7, r3
     976:	e779      	b.n	86c <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     978:	0020      	movs	r0, r4
     97a:	4b25      	ldr	r3, [pc, #148]	; (a10 <usart_init+0x330>)
     97c:	4798      	blx	r3
     97e:	e007      	b.n	990 <usart_init+0x2b0>
     980:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     982:	2f04      	cmp	r7, #4
     984:	d00d      	beq.n	9a2 <usart_init+0x2c2>
     986:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     988:	00bb      	lsls	r3, r7, #2
     98a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     98c:	2800      	cmp	r0, #0
     98e:	d0f3      	beq.n	978 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
     990:	1c43      	adds	r3, r0, #1
     992:	d0f5      	beq.n	980 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     994:	a90e      	add	r1, sp, #56	; 0x38
     996:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     998:	0c00      	lsrs	r0, r0, #16
     99a:	b2c0      	uxtb	r0, r0
     99c:	4b1d      	ldr	r3, [pc, #116]	; (a14 <usart_init+0x334>)
     99e:	4798      	blx	r3
     9a0:	e7ee      	b.n	980 <usart_init+0x2a0>
		module->callback[i]            = NULL;
     9a2:	2300      	movs	r3, #0
     9a4:	60eb      	str	r3, [r5, #12]
     9a6:	612b      	str	r3, [r5, #16]
     9a8:	616b      	str	r3, [r5, #20]
     9aa:	61ab      	str	r3, [r5, #24]
     9ac:	61eb      	str	r3, [r5, #28]
     9ae:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     9b0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     9b2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     9b4:	2200      	movs	r2, #0
     9b6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     9b8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     9ba:	3330      	adds	r3, #48	; 0x30
     9bc:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     9be:	3301      	adds	r3, #1
     9c0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     9c2:	3301      	adds	r3, #1
     9c4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     9c6:	3301      	adds	r3, #1
     9c8:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     9ca:	6828      	ldr	r0, [r5, #0]
     9cc:	4b07      	ldr	r3, [pc, #28]	; (9ec <usart_init+0x30c>)
     9ce:	4798      	blx	r3
     9d0:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     9d2:	4911      	ldr	r1, [pc, #68]	; (a18 <usart_init+0x338>)
     9d4:	4b11      	ldr	r3, [pc, #68]	; (a1c <usart_init+0x33c>)
     9d6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     9d8:	00a4      	lsls	r4, r4, #2
     9da:	4b11      	ldr	r3, [pc, #68]	; (a20 <usart_init+0x340>)
     9dc:	50e5      	str	r5, [r4, r3]
	return status_code;
     9de:	2000      	movs	r0, #0
     9e0:	e691      	b.n	706 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     9e2:	2310      	movs	r3, #16
     9e4:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     9e6:	2300      	movs	r3, #0
     9e8:	9307      	str	r3, [sp, #28]
     9ea:	e6e8      	b.n	7be <usart_init+0xde>
     9ec:	00000451 	.word	0x00000451
     9f0:	40000400 	.word	0x40000400
     9f4:	00001275 	.word	0x00001275
     9f8:	000011e9 	.word	0x000011e9
     9fc:	0000028d 	.word	0x0000028d
     a00:	41002000 	.word	0x41002000
     a04:	00001291 	.word	0x00001291
     a08:	000001cf 	.word	0x000001cf
     a0c:	000001f9 	.word	0x000001f9
     a10:	000002d9 	.word	0x000002d9
     a14:	0000136d 	.word	0x0000136d
     a18:	00000ac1 	.word	0x00000ac1
     a1c:	00000c59 	.word	0x00000c59
     a20:	20000120 	.word	0x20000120

00000a24 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     a24:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     a26:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     a28:	2a00      	cmp	r2, #0
     a2a:	d101      	bne.n	a30 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     a2c:	0018      	movs	r0, r3
     a2e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     a30:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     a32:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     a34:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     a36:	2a00      	cmp	r2, #0
     a38:	d1f8      	bne.n	a2c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     a3a:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     a3c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     a3e:	2a00      	cmp	r2, #0
     a40:	d1fc      	bne.n	a3c <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     a42:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     a44:	2102      	movs	r1, #2
     a46:	7e1a      	ldrb	r2, [r3, #24]
     a48:	420a      	tst	r2, r1
     a4a:	d0fc      	beq.n	a46 <usart_write_wait+0x22>
	return STATUS_OK;
     a4c:	2300      	movs	r3, #0
     a4e:	e7ed      	b.n	a2c <usart_write_wait+0x8>

00000a50 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     a50:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     a52:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     a54:	2a00      	cmp	r2, #0
     a56:	d101      	bne.n	a5c <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     a58:	0018      	movs	r0, r3
     a5a:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     a5c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     a5e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     a60:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     a62:	2a00      	cmp	r2, #0
     a64:	d1f8      	bne.n	a58 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     a66:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     a68:	7e10      	ldrb	r0, [r2, #24]
     a6a:	0740      	lsls	r0, r0, #29
     a6c:	d5f4      	bpl.n	a58 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
     a6e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     a70:	2b00      	cmp	r3, #0
     a72:	d1fc      	bne.n	a6e <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a74:	8b53      	ldrh	r3, [r2, #26]
     a76:	b2db      	uxtb	r3, r3
	if (error_code) {
     a78:	0698      	lsls	r0, r3, #26
     a7a:	d01d      	beq.n	ab8 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     a7c:	0798      	lsls	r0, r3, #30
     a7e:	d503      	bpl.n	a88 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     a80:	2302      	movs	r3, #2
     a82:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     a84:	3318      	adds	r3, #24
     a86:	e7e7      	b.n	a58 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     a88:	0758      	lsls	r0, r3, #29
     a8a:	d503      	bpl.n	a94 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     a8c:	2304      	movs	r3, #4
     a8e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     a90:	331a      	adds	r3, #26
     a92:	e7e1      	b.n	a58 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     a94:	07d8      	lsls	r0, r3, #31
     a96:	d503      	bpl.n	aa0 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     a98:	2301      	movs	r3, #1
     a9a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     a9c:	3312      	adds	r3, #18
     a9e:	e7db      	b.n	a58 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     aa0:	06d8      	lsls	r0, r3, #27
     aa2:	d503      	bpl.n	aac <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     aa4:	2310      	movs	r3, #16
     aa6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     aa8:	3332      	adds	r3, #50	; 0x32
     aaa:	e7d5      	b.n	a58 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     aac:	069b      	lsls	r3, r3, #26
     aae:	d503      	bpl.n	ab8 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     ab0:	2320      	movs	r3, #32
     ab2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     ab4:	3321      	adds	r3, #33	; 0x21
     ab6:	e7cf      	b.n	a58 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     ab8:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     aba:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     abc:	2300      	movs	r3, #0
     abe:	e7cb      	b.n	a58 <usart_read_wait+0x8>

00000ac0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     ac2:	0080      	lsls	r0, r0, #2
     ac4:	4b62      	ldr	r3, [pc, #392]	; (c50 <_usart_interrupt_handler+0x190>)
     ac6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     ac8:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     aca:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     acc:	2b00      	cmp	r3, #0
     ace:	d1fc      	bne.n	aca <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     ad0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     ad2:	7da6      	ldrb	r6, [r4, #22]
     ad4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     ad6:	2330      	movs	r3, #48	; 0x30
     ad8:	5ceb      	ldrb	r3, [r5, r3]
     ada:	2231      	movs	r2, #49	; 0x31
     adc:	5caf      	ldrb	r7, [r5, r2]
     ade:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     ae0:	07f3      	lsls	r3, r6, #31
     ae2:	d522      	bpl.n	b2a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     ae4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     ae6:	b29b      	uxth	r3, r3
     ae8:	2b00      	cmp	r3, #0
     aea:	d01c      	beq.n	b26 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     aec:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     aee:	7813      	ldrb	r3, [r2, #0]
     af0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     af2:	1c51      	adds	r1, r2, #1
     af4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     af6:	7969      	ldrb	r1, [r5, #5]
     af8:	2901      	cmp	r1, #1
     afa:	d00e      	beq.n	b1a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     afc:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     afe:	05db      	lsls	r3, r3, #23
     b00:	0ddb      	lsrs	r3, r3, #23
     b02:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     b04:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     b06:	3b01      	subs	r3, #1
     b08:	b29b      	uxth	r3, r3
     b0a:	85eb      	strh	r3, [r5, #46]	; 0x2e
     b0c:	2b00      	cmp	r3, #0
     b0e:	d10c      	bne.n	b2a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     b10:	3301      	adds	r3, #1
     b12:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     b14:	3301      	adds	r3, #1
     b16:	75a3      	strb	r3, [r4, #22]
     b18:	e007      	b.n	b2a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     b1a:	7851      	ldrb	r1, [r2, #1]
     b1c:	0209      	lsls	r1, r1, #8
     b1e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     b20:	3202      	adds	r2, #2
     b22:	62aa      	str	r2, [r5, #40]	; 0x28
     b24:	e7eb      	b.n	afe <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     b26:	2301      	movs	r3, #1
     b28:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     b2a:	07b3      	lsls	r3, r6, #30
     b2c:	d506      	bpl.n	b3c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     b2e:	2302      	movs	r3, #2
     b30:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     b32:	2200      	movs	r2, #0
     b34:	3331      	adds	r3, #49	; 0x31
     b36:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     b38:	07fb      	lsls	r3, r7, #31
     b3a:	d41a      	bmi.n	b72 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     b3c:	0773      	lsls	r3, r6, #29
     b3e:	d565      	bpl.n	c0c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     b40:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     b42:	b29b      	uxth	r3, r3
     b44:	2b00      	cmp	r3, #0
     b46:	d05f      	beq.n	c08 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     b48:	8b63      	ldrh	r3, [r4, #26]
     b4a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     b4c:	071a      	lsls	r2, r3, #28
     b4e:	d414      	bmi.n	b7a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     b50:	223f      	movs	r2, #63	; 0x3f
     b52:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     b54:	2b00      	cmp	r3, #0
     b56:	d034      	beq.n	bc2 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     b58:	079a      	lsls	r2, r3, #30
     b5a:	d511      	bpl.n	b80 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     b5c:	221a      	movs	r2, #26
     b5e:	2332      	movs	r3, #50	; 0x32
     b60:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     b62:	3b30      	subs	r3, #48	; 0x30
     b64:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     b66:	077b      	lsls	r3, r7, #29
     b68:	d550      	bpl.n	c0c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     b6a:	0028      	movs	r0, r5
     b6c:	696b      	ldr	r3, [r5, #20]
     b6e:	4798      	blx	r3
     b70:	e04c      	b.n	c0c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     b72:	0028      	movs	r0, r5
     b74:	68eb      	ldr	r3, [r5, #12]
     b76:	4798      	blx	r3
     b78:	e7e0      	b.n	b3c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     b7a:	2237      	movs	r2, #55	; 0x37
     b7c:	4013      	ands	r3, r2
     b7e:	e7e9      	b.n	b54 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     b80:	075a      	lsls	r2, r3, #29
     b82:	d505      	bpl.n	b90 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     b84:	221e      	movs	r2, #30
     b86:	2332      	movs	r3, #50	; 0x32
     b88:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     b8a:	3b2e      	subs	r3, #46	; 0x2e
     b8c:	8363      	strh	r3, [r4, #26]
     b8e:	e7ea      	b.n	b66 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     b90:	07da      	lsls	r2, r3, #31
     b92:	d505      	bpl.n	ba0 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     b94:	2213      	movs	r2, #19
     b96:	2332      	movs	r3, #50	; 0x32
     b98:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     b9a:	3b31      	subs	r3, #49	; 0x31
     b9c:	8363      	strh	r3, [r4, #26]
     b9e:	e7e2      	b.n	b66 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     ba0:	06da      	lsls	r2, r3, #27
     ba2:	d505      	bpl.n	bb0 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     ba4:	2242      	movs	r2, #66	; 0x42
     ba6:	2332      	movs	r3, #50	; 0x32
     ba8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     baa:	3b22      	subs	r3, #34	; 0x22
     bac:	8363      	strh	r3, [r4, #26]
     bae:	e7da      	b.n	b66 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     bb0:	2220      	movs	r2, #32
     bb2:	421a      	tst	r2, r3
     bb4:	d0d7      	beq.n	b66 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     bb6:	3221      	adds	r2, #33	; 0x21
     bb8:	2332      	movs	r3, #50	; 0x32
     bba:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     bbc:	3b12      	subs	r3, #18
     bbe:	8363      	strh	r3, [r4, #26]
     bc0:	e7d1      	b.n	b66 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     bc2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     bc4:	05db      	lsls	r3, r3, #23
     bc6:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     bc8:	b2da      	uxtb	r2, r3
     bca:	6a69      	ldr	r1, [r5, #36]	; 0x24
     bcc:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     bce:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     bd0:	1c51      	adds	r1, r2, #1
     bd2:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     bd4:	7969      	ldrb	r1, [r5, #5]
     bd6:	2901      	cmp	r1, #1
     bd8:	d010      	beq.n	bfc <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     bda:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     bdc:	3b01      	subs	r3, #1
     bde:	b29b      	uxth	r3, r3
     be0:	85ab      	strh	r3, [r5, #44]	; 0x2c
     be2:	2b00      	cmp	r3, #0
     be4:	d112      	bne.n	c0c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     be6:	3304      	adds	r3, #4
     be8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     bea:	2200      	movs	r2, #0
     bec:	332e      	adds	r3, #46	; 0x2e
     bee:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     bf0:	07bb      	lsls	r3, r7, #30
     bf2:	d50b      	bpl.n	c0c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     bf4:	0028      	movs	r0, r5
     bf6:	692b      	ldr	r3, [r5, #16]
     bf8:	4798      	blx	r3
     bfa:	e007      	b.n	c0c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     bfc:	0a1b      	lsrs	r3, r3, #8
     bfe:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     c00:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     c02:	3301      	adds	r3, #1
     c04:	626b      	str	r3, [r5, #36]	; 0x24
     c06:	e7e8      	b.n	bda <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     c08:	2304      	movs	r3, #4
     c0a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     c0c:	06f3      	lsls	r3, r6, #27
     c0e:	d504      	bpl.n	c1a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     c10:	2310      	movs	r3, #16
     c12:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     c14:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     c16:	06fb      	lsls	r3, r7, #27
     c18:	d40e      	bmi.n	c38 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     c1a:	06b3      	lsls	r3, r6, #26
     c1c:	d504      	bpl.n	c28 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     c1e:	2320      	movs	r3, #32
     c20:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     c22:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     c24:	073b      	lsls	r3, r7, #28
     c26:	d40b      	bmi.n	c40 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     c28:	0733      	lsls	r3, r6, #28
     c2a:	d504      	bpl.n	c36 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     c2c:	2308      	movs	r3, #8
     c2e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     c30:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     c32:	06bb      	lsls	r3, r7, #26
     c34:	d408      	bmi.n	c48 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     c38:	0028      	movs	r0, r5
     c3a:	69eb      	ldr	r3, [r5, #28]
     c3c:	4798      	blx	r3
     c3e:	e7ec      	b.n	c1a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     c40:	0028      	movs	r0, r5
     c42:	69ab      	ldr	r3, [r5, #24]
     c44:	4798      	blx	r3
     c46:	e7ef      	b.n	c28 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     c48:	6a2b      	ldr	r3, [r5, #32]
     c4a:	0028      	movs	r0, r5
     c4c:	4798      	blx	r3
}
     c4e:	e7f2      	b.n	c36 <_usart_interrupt_handler+0x176>
     c50:	20000120 	.word	0x20000120

00000c54 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     c54:	4770      	bx	lr
	...

00000c58 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     c58:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     c5a:	4b0a      	ldr	r3, [pc, #40]	; (c84 <_sercom_set_handler+0x2c>)
     c5c:	781b      	ldrb	r3, [r3, #0]
     c5e:	2b00      	cmp	r3, #0
     c60:	d10c      	bne.n	c7c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     c62:	4f09      	ldr	r7, [pc, #36]	; (c88 <_sercom_set_handler+0x30>)
     c64:	4e09      	ldr	r6, [pc, #36]	; (c8c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     c66:	4d0a      	ldr	r5, [pc, #40]	; (c90 <_sercom_set_handler+0x38>)
     c68:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     c6a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     c6c:	195a      	adds	r2, r3, r5
     c6e:	6014      	str	r4, [r2, #0]
     c70:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c72:	2b18      	cmp	r3, #24
     c74:	d1f9      	bne.n	c6a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     c76:	2201      	movs	r2, #1
     c78:	4b02      	ldr	r3, [pc, #8]	; (c84 <_sercom_set_handler+0x2c>)
     c7a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     c7c:	0080      	lsls	r0, r0, #2
     c7e:	4b02      	ldr	r3, [pc, #8]	; (c88 <_sercom_set_handler+0x30>)
     c80:	50c1      	str	r1, [r0, r3]
}
     c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c84:	2000008e 	.word	0x2000008e
     c88:	20000090 	.word	0x20000090
     c8c:	00000c55 	.word	0x00000c55
     c90:	20000120 	.word	0x20000120

00000c94 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     c94:	b500      	push	{lr}
     c96:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     c98:	2309      	movs	r3, #9
     c9a:	466a      	mov	r2, sp
     c9c:	7013      	strb	r3, [r2, #0]
     c9e:	3301      	adds	r3, #1
     ca0:	7053      	strb	r3, [r2, #1]
     ca2:	3301      	adds	r3, #1
     ca4:	7093      	strb	r3, [r2, #2]
     ca6:	3301      	adds	r3, #1
     ca8:	70d3      	strb	r3, [r2, #3]
     caa:	3301      	adds	r3, #1
     cac:	7113      	strb	r3, [r2, #4]
     cae:	3301      	adds	r3, #1
     cb0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     cb2:	4b03      	ldr	r3, [pc, #12]	; (cc0 <_sercom_get_interrupt_vector+0x2c>)
     cb4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     cb6:	466b      	mov	r3, sp
     cb8:	5618      	ldrsb	r0, [r3, r0]
}
     cba:	b003      	add	sp, #12
     cbc:	bd00      	pop	{pc}
     cbe:	46c0      	nop			; (mov r8, r8)
     cc0:	00000451 	.word	0x00000451

00000cc4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     cc4:	b510      	push	{r4, lr}
     cc6:	4b02      	ldr	r3, [pc, #8]	; (cd0 <SERCOM0_Handler+0xc>)
     cc8:	681b      	ldr	r3, [r3, #0]
     cca:	2000      	movs	r0, #0
     ccc:	4798      	blx	r3
     cce:	bd10      	pop	{r4, pc}
     cd0:	20000090 	.word	0x20000090

00000cd4 <SERCOM1_Handler>:
     cd4:	b510      	push	{r4, lr}
     cd6:	4b02      	ldr	r3, [pc, #8]	; (ce0 <SERCOM1_Handler+0xc>)
     cd8:	685b      	ldr	r3, [r3, #4]
     cda:	2001      	movs	r0, #1
     cdc:	4798      	blx	r3
     cde:	bd10      	pop	{r4, pc}
     ce0:	20000090 	.word	0x20000090

00000ce4 <SERCOM2_Handler>:
     ce4:	b510      	push	{r4, lr}
     ce6:	4b02      	ldr	r3, [pc, #8]	; (cf0 <SERCOM2_Handler+0xc>)
     ce8:	689b      	ldr	r3, [r3, #8]
     cea:	2002      	movs	r0, #2
     cec:	4798      	blx	r3
     cee:	bd10      	pop	{r4, pc}
     cf0:	20000090 	.word	0x20000090

00000cf4 <SERCOM3_Handler>:
     cf4:	b510      	push	{r4, lr}
     cf6:	4b02      	ldr	r3, [pc, #8]	; (d00 <SERCOM3_Handler+0xc>)
     cf8:	68db      	ldr	r3, [r3, #12]
     cfa:	2003      	movs	r0, #3
     cfc:	4798      	blx	r3
     cfe:	bd10      	pop	{r4, pc}
     d00:	20000090 	.word	0x20000090

00000d04 <SERCOM4_Handler>:
     d04:	b510      	push	{r4, lr}
     d06:	4b02      	ldr	r3, [pc, #8]	; (d10 <SERCOM4_Handler+0xc>)
     d08:	691b      	ldr	r3, [r3, #16]
     d0a:	2004      	movs	r0, #4
     d0c:	4798      	blx	r3
     d0e:	bd10      	pop	{r4, pc}
     d10:	20000090 	.word	0x20000090

00000d14 <SERCOM5_Handler>:
     d14:	b510      	push	{r4, lr}
     d16:	4b02      	ldr	r3, [pc, #8]	; (d20 <SERCOM5_Handler+0xc>)
     d18:	695b      	ldr	r3, [r3, #20]
     d1a:	2005      	movs	r0, #5
     d1c:	4798      	blx	r3
     d1e:	bd10      	pop	{r4, pc}
     d20:	20000090 	.word	0x20000090

00000d24 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     d24:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     d26:	2000      	movs	r0, #0
     d28:	4b08      	ldr	r3, [pc, #32]	; (d4c <delay_init+0x28>)
     d2a:	4798      	blx	r3
     d2c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     d2e:	4c08      	ldr	r4, [pc, #32]	; (d50 <delay_init+0x2c>)
     d30:	21fa      	movs	r1, #250	; 0xfa
     d32:	0089      	lsls	r1, r1, #2
     d34:	47a0      	blx	r4
     d36:	4b07      	ldr	r3, [pc, #28]	; (d54 <delay_init+0x30>)
     d38:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     d3a:	4907      	ldr	r1, [pc, #28]	; (d58 <delay_init+0x34>)
     d3c:	0028      	movs	r0, r5
     d3e:	47a0      	blx	r4
     d40:	4b06      	ldr	r3, [pc, #24]	; (d5c <delay_init+0x38>)
     d42:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     d44:	2205      	movs	r2, #5
     d46:	4b06      	ldr	r3, [pc, #24]	; (d60 <delay_init+0x3c>)
     d48:	601a      	str	r2, [r3, #0]
}
     d4a:	bd70      	pop	{r4, r5, r6, pc}
     d4c:	0000115d 	.word	0x0000115d
     d50:	0000151d 	.word	0x0000151d
     d54:	20000000 	.word	0x20000000
     d58:	000f4240 	.word	0x000f4240
     d5c:	20000004 	.word	0x20000004
     d60:	e000e010 	.word	0xe000e010

00000d64 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     d64:	4b0c      	ldr	r3, [pc, #48]	; (d98 <cpu_irq_enter_critical+0x34>)
     d66:	681b      	ldr	r3, [r3, #0]
     d68:	2b00      	cmp	r3, #0
     d6a:	d106      	bne.n	d7a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     d6c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     d70:	2b00      	cmp	r3, #0
     d72:	d007      	beq.n	d84 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     d74:	2200      	movs	r2, #0
     d76:	4b09      	ldr	r3, [pc, #36]	; (d9c <cpu_irq_enter_critical+0x38>)
     d78:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     d7a:	4a07      	ldr	r2, [pc, #28]	; (d98 <cpu_irq_enter_critical+0x34>)
     d7c:	6813      	ldr	r3, [r2, #0]
     d7e:	3301      	adds	r3, #1
     d80:	6013      	str	r3, [r2, #0]
}
     d82:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     d84:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     d86:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     d8a:	2200      	movs	r2, #0
     d8c:	4b04      	ldr	r3, [pc, #16]	; (da0 <cpu_irq_enter_critical+0x3c>)
     d8e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     d90:	3201      	adds	r2, #1
     d92:	4b02      	ldr	r3, [pc, #8]	; (d9c <cpu_irq_enter_critical+0x38>)
     d94:	701a      	strb	r2, [r3, #0]
     d96:	e7f0      	b.n	d7a <cpu_irq_enter_critical+0x16>
     d98:	200000a8 	.word	0x200000a8
     d9c:	200000ac 	.word	0x200000ac
     da0:	20000008 	.word	0x20000008

00000da4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     da4:	4b08      	ldr	r3, [pc, #32]	; (dc8 <cpu_irq_leave_critical+0x24>)
     da6:	681a      	ldr	r2, [r3, #0]
     da8:	3a01      	subs	r2, #1
     daa:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     dac:	681b      	ldr	r3, [r3, #0]
     dae:	2b00      	cmp	r3, #0
     db0:	d109      	bne.n	dc6 <cpu_irq_leave_critical+0x22>
     db2:	4b06      	ldr	r3, [pc, #24]	; (dcc <cpu_irq_leave_critical+0x28>)
     db4:	781b      	ldrb	r3, [r3, #0]
     db6:	2b00      	cmp	r3, #0
     db8:	d005      	beq.n	dc6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     dba:	2201      	movs	r2, #1
     dbc:	4b04      	ldr	r3, [pc, #16]	; (dd0 <cpu_irq_leave_critical+0x2c>)
     dbe:	701a      	strb	r2, [r3, #0]
     dc0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     dc4:	b662      	cpsie	i
	}
}
     dc6:	4770      	bx	lr
     dc8:	200000a8 	.word	0x200000a8
     dcc:	200000ac 	.word	0x200000ac
     dd0:	20000008 	.word	0x20000008

00000dd4 <system_board_init>:




void system_board_init(void)
{
     dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
     dd6:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     dd8:	ac01      	add	r4, sp, #4
     dda:	2501      	movs	r5, #1
     ddc:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     dde:	2700      	movs	r7, #0
     de0:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     de2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     de4:	0021      	movs	r1, r4
     de6:	2013      	movs	r0, #19
     de8:	4e06      	ldr	r6, [pc, #24]	; (e04 <system_board_init+0x30>)
     dea:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     dec:	2280      	movs	r2, #128	; 0x80
     dee:	0312      	lsls	r2, r2, #12
     df0:	4b05      	ldr	r3, [pc, #20]	; (e08 <system_board_init+0x34>)
     df2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     df4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     df6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     df8:	0021      	movs	r1, r4
     dfa:	201c      	movs	r0, #28
     dfc:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
     dfe:	b003      	add	sp, #12
     e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e02:	46c0      	nop			; (mov r8, r8)
     e04:	00000e0d 	.word	0x00000e0d
     e08:	41004400 	.word	0x41004400

00000e0c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     e0c:	b500      	push	{lr}
     e0e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e10:	ab01      	add	r3, sp, #4
     e12:	2280      	movs	r2, #128	; 0x80
     e14:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     e16:	780a      	ldrb	r2, [r1, #0]
     e18:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     e1a:	784a      	ldrb	r2, [r1, #1]
     e1c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     e1e:	788a      	ldrb	r2, [r1, #2]
     e20:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     e22:	0019      	movs	r1, r3
     e24:	4b01      	ldr	r3, [pc, #4]	; (e2c <port_pin_set_config+0x20>)
     e26:	4798      	blx	r3
}
     e28:	b003      	add	sp, #12
     e2a:	bd00      	pop	{pc}
     e2c:	0000136d 	.word	0x0000136d

00000e30 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     e30:	b510      	push	{r4, lr}
	switch (clock_source) {
     e32:	2808      	cmp	r0, #8
     e34:	d803      	bhi.n	e3e <system_clock_source_get_hz+0xe>
     e36:	0080      	lsls	r0, r0, #2
     e38:	4b1b      	ldr	r3, [pc, #108]	; (ea8 <system_clock_source_get_hz+0x78>)
     e3a:	581b      	ldr	r3, [r3, r0]
     e3c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     e3e:	2000      	movs	r0, #0
     e40:	e030      	b.n	ea4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
     e42:	4b1a      	ldr	r3, [pc, #104]	; (eac <system_clock_source_get_hz+0x7c>)
     e44:	6918      	ldr	r0, [r3, #16]
     e46:	e02d      	b.n	ea4 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     e48:	4b19      	ldr	r3, [pc, #100]	; (eb0 <system_clock_source_get_hz+0x80>)
     e4a:	6a1b      	ldr	r3, [r3, #32]
     e4c:	059b      	lsls	r3, r3, #22
     e4e:	0f9b      	lsrs	r3, r3, #30
     e50:	4818      	ldr	r0, [pc, #96]	; (eb4 <system_clock_source_get_hz+0x84>)
     e52:	40d8      	lsrs	r0, r3
     e54:	e026      	b.n	ea4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
     e56:	4b15      	ldr	r3, [pc, #84]	; (eac <system_clock_source_get_hz+0x7c>)
     e58:	6958      	ldr	r0, [r3, #20]
     e5a:	e023      	b.n	ea4 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     e5c:	4b13      	ldr	r3, [pc, #76]	; (eac <system_clock_source_get_hz+0x7c>)
     e5e:	681b      	ldr	r3, [r3, #0]
			return 0;
     e60:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     e62:	079b      	lsls	r3, r3, #30
     e64:	d51e      	bpl.n	ea4 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     e66:	4912      	ldr	r1, [pc, #72]	; (eb0 <system_clock_source_get_hz+0x80>)
     e68:	2210      	movs	r2, #16
     e6a:	68cb      	ldr	r3, [r1, #12]
     e6c:	421a      	tst	r2, r3
     e6e:	d0fc      	beq.n	e6a <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     e70:	4b0e      	ldr	r3, [pc, #56]	; (eac <system_clock_source_get_hz+0x7c>)
     e72:	681b      	ldr	r3, [r3, #0]
     e74:	075b      	lsls	r3, r3, #29
     e76:	d401      	bmi.n	e7c <system_clock_source_get_hz+0x4c>
		return 48000000UL;
     e78:	480f      	ldr	r0, [pc, #60]	; (eb8 <system_clock_source_get_hz+0x88>)
     e7a:	e013      	b.n	ea4 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     e7c:	2000      	movs	r0, #0
     e7e:	4b0f      	ldr	r3, [pc, #60]	; (ebc <system_clock_source_get_hz+0x8c>)
     e80:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     e82:	4b0a      	ldr	r3, [pc, #40]	; (eac <system_clock_source_get_hz+0x7c>)
     e84:	689b      	ldr	r3, [r3, #8]
     e86:	041b      	lsls	r3, r3, #16
     e88:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     e8a:	4358      	muls	r0, r3
     e8c:	e00a      	b.n	ea4 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     e8e:	2350      	movs	r3, #80	; 0x50
     e90:	4a07      	ldr	r2, [pc, #28]	; (eb0 <system_clock_source_get_hz+0x80>)
     e92:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     e94:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     e96:	075b      	lsls	r3, r3, #29
     e98:	d504      	bpl.n	ea4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
     e9a:	4b04      	ldr	r3, [pc, #16]	; (eac <system_clock_source_get_hz+0x7c>)
     e9c:	68d8      	ldr	r0, [r3, #12]
     e9e:	e001      	b.n	ea4 <system_clock_source_get_hz+0x74>
		return 32768UL;
     ea0:	2080      	movs	r0, #128	; 0x80
     ea2:	0200      	lsls	r0, r0, #8
	}
}
     ea4:	bd10      	pop	{r4, pc}
     ea6:	46c0      	nop			; (mov r8, r8)
     ea8:	00001ee4 	.word	0x00001ee4
     eac:	200000b0 	.word	0x200000b0
     eb0:	40000800 	.word	0x40000800
     eb4:	007a1200 	.word	0x007a1200
     eb8:	02dc6c00 	.word	0x02dc6c00
     ebc:	00001291 	.word	0x00001291

00000ec0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     ec0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     ec2:	490c      	ldr	r1, [pc, #48]	; (ef4 <system_clock_source_osc8m_set_config+0x34>)
     ec4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     ec6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     ec8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     eca:	7840      	ldrb	r0, [r0, #1]
     ecc:	2201      	movs	r2, #1
     ece:	4010      	ands	r0, r2
     ed0:	0180      	lsls	r0, r0, #6
     ed2:	2640      	movs	r6, #64	; 0x40
     ed4:	43b3      	bics	r3, r6
     ed6:	4303      	orrs	r3, r0
     ed8:	402a      	ands	r2, r5
     eda:	01d2      	lsls	r2, r2, #7
     edc:	2080      	movs	r0, #128	; 0x80
     ede:	4383      	bics	r3, r0
     ee0:	4313      	orrs	r3, r2
     ee2:	2203      	movs	r2, #3
     ee4:	4022      	ands	r2, r4
     ee6:	0212      	lsls	r2, r2, #8
     ee8:	4803      	ldr	r0, [pc, #12]	; (ef8 <system_clock_source_osc8m_set_config+0x38>)
     eea:	4003      	ands	r3, r0
     eec:	4313      	orrs	r3, r2
     eee:	620b      	str	r3, [r1, #32]
}
     ef0:	bd70      	pop	{r4, r5, r6, pc}
     ef2:	46c0      	nop			; (mov r8, r8)
     ef4:	40000800 	.word	0x40000800
     ef8:	fffffcff 	.word	0xfffffcff

00000efc <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     efc:	2808      	cmp	r0, #8
     efe:	d803      	bhi.n	f08 <system_clock_source_enable+0xc>
     f00:	0080      	lsls	r0, r0, #2
     f02:	4b25      	ldr	r3, [pc, #148]	; (f98 <system_clock_source_enable+0x9c>)
     f04:	581b      	ldr	r3, [r3, r0]
     f06:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     f08:	2017      	movs	r0, #23
     f0a:	e044      	b.n	f96 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     f0c:	4a23      	ldr	r2, [pc, #140]	; (f9c <system_clock_source_enable+0xa0>)
     f0e:	6a13      	ldr	r3, [r2, #32]
     f10:	2102      	movs	r1, #2
     f12:	430b      	orrs	r3, r1
     f14:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     f16:	2000      	movs	r0, #0
     f18:	e03d      	b.n	f96 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     f1a:	4a20      	ldr	r2, [pc, #128]	; (f9c <system_clock_source_enable+0xa0>)
     f1c:	6993      	ldr	r3, [r2, #24]
     f1e:	2102      	movs	r1, #2
     f20:	430b      	orrs	r3, r1
     f22:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     f24:	2000      	movs	r0, #0
		break;
     f26:	e036      	b.n	f96 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     f28:	4a1c      	ldr	r2, [pc, #112]	; (f9c <system_clock_source_enable+0xa0>)
     f2a:	8a13      	ldrh	r3, [r2, #16]
     f2c:	2102      	movs	r1, #2
     f2e:	430b      	orrs	r3, r1
     f30:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     f32:	2000      	movs	r0, #0
		break;
     f34:	e02f      	b.n	f96 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     f36:	4a19      	ldr	r2, [pc, #100]	; (f9c <system_clock_source_enable+0xa0>)
     f38:	8a93      	ldrh	r3, [r2, #20]
     f3a:	2102      	movs	r1, #2
     f3c:	430b      	orrs	r3, r1
     f3e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     f40:	2000      	movs	r0, #0
		break;
     f42:	e028      	b.n	f96 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     f44:	4916      	ldr	r1, [pc, #88]	; (fa0 <system_clock_source_enable+0xa4>)
     f46:	680b      	ldr	r3, [r1, #0]
     f48:	2202      	movs	r2, #2
     f4a:	4313      	orrs	r3, r2
     f4c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     f4e:	4b13      	ldr	r3, [pc, #76]	; (f9c <system_clock_source_enable+0xa0>)
     f50:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f52:	0019      	movs	r1, r3
     f54:	320e      	adds	r2, #14
     f56:	68cb      	ldr	r3, [r1, #12]
     f58:	421a      	tst	r2, r3
     f5a:	d0fc      	beq.n	f56 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     f5c:	4a10      	ldr	r2, [pc, #64]	; (fa0 <system_clock_source_enable+0xa4>)
     f5e:	6891      	ldr	r1, [r2, #8]
     f60:	4b0e      	ldr	r3, [pc, #56]	; (f9c <system_clock_source_enable+0xa0>)
     f62:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     f64:	6852      	ldr	r2, [r2, #4]
     f66:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     f68:	2200      	movs	r2, #0
     f6a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f6c:	0019      	movs	r1, r3
     f6e:	3210      	adds	r2, #16
     f70:	68cb      	ldr	r3, [r1, #12]
     f72:	421a      	tst	r2, r3
     f74:	d0fc      	beq.n	f70 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     f76:	4b0a      	ldr	r3, [pc, #40]	; (fa0 <system_clock_source_enable+0xa4>)
     f78:	681b      	ldr	r3, [r3, #0]
     f7a:	b29b      	uxth	r3, r3
     f7c:	4a07      	ldr	r2, [pc, #28]	; (f9c <system_clock_source_enable+0xa0>)
     f7e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     f80:	2000      	movs	r0, #0
     f82:	e008      	b.n	f96 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     f84:	4905      	ldr	r1, [pc, #20]	; (f9c <system_clock_source_enable+0xa0>)
     f86:	2244      	movs	r2, #68	; 0x44
     f88:	5c8b      	ldrb	r3, [r1, r2]
     f8a:	2002      	movs	r0, #2
     f8c:	4303      	orrs	r3, r0
     f8e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     f90:	2000      	movs	r0, #0
		break;
     f92:	e000      	b.n	f96 <system_clock_source_enable+0x9a>
		return STATUS_OK;
     f94:	2000      	movs	r0, #0
}
     f96:	4770      	bx	lr
     f98:	00001f08 	.word	0x00001f08
     f9c:	40000800 	.word	0x40000800
     fa0:	200000b0 	.word	0x200000b0

00000fa4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     fa4:	b530      	push	{r4, r5, lr}
     fa6:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     fa8:	22c2      	movs	r2, #194	; 0xc2
     faa:	00d2      	lsls	r2, r2, #3
     fac:	4b1a      	ldr	r3, [pc, #104]	; (1018 <system_clock_init+0x74>)
     fae:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     fb0:	4a1a      	ldr	r2, [pc, #104]	; (101c <system_clock_init+0x78>)
     fb2:	6853      	ldr	r3, [r2, #4]
     fb4:	211e      	movs	r1, #30
     fb6:	438b      	bics	r3, r1
     fb8:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     fba:	2301      	movs	r3, #1
     fbc:	466a      	mov	r2, sp
     fbe:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     fc0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     fc2:	4d17      	ldr	r5, [pc, #92]	; (1020 <system_clock_init+0x7c>)
     fc4:	b2e0      	uxtb	r0, r4
     fc6:	4669      	mov	r1, sp
     fc8:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     fca:	3401      	adds	r4, #1
     fcc:	2c25      	cmp	r4, #37	; 0x25
     fce:	d1f9      	bne.n	fc4 <system_clock_init+0x20>
	config->run_in_standby  = false;
     fd0:	a803      	add	r0, sp, #12
     fd2:	2400      	movs	r4, #0
     fd4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     fd6:	2501      	movs	r5, #1
     fd8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     fda:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     fdc:	4b11      	ldr	r3, [pc, #68]	; (1024 <system_clock_init+0x80>)
     fde:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     fe0:	2006      	movs	r0, #6
     fe2:	4b11      	ldr	r3, [pc, #68]	; (1028 <system_clock_init+0x84>)
     fe4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     fe6:	4b11      	ldr	r3, [pc, #68]	; (102c <system_clock_init+0x88>)
     fe8:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     fea:	4b11      	ldr	r3, [pc, #68]	; (1030 <system_clock_init+0x8c>)
     fec:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     fee:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     ff0:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     ff2:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     ff4:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     ff6:	466b      	mov	r3, sp
     ff8:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     ffa:	2306      	movs	r3, #6
     ffc:	466a      	mov	r2, sp
     ffe:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1000:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1002:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1004:	4669      	mov	r1, sp
    1006:	2000      	movs	r0, #0
    1008:	4b0a      	ldr	r3, [pc, #40]	; (1034 <system_clock_init+0x90>)
    100a:	4798      	blx	r3
    100c:	2000      	movs	r0, #0
    100e:	4b0a      	ldr	r3, [pc, #40]	; (1038 <system_clock_init+0x94>)
    1010:	4798      	blx	r3
#endif
}
    1012:	b005      	add	sp, #20
    1014:	bd30      	pop	{r4, r5, pc}
    1016:	46c0      	nop			; (mov r8, r8)
    1018:	40000800 	.word	0x40000800
    101c:	41004000 	.word	0x41004000
    1020:	00001275 	.word	0x00001275
    1024:	00000ec1 	.word	0x00000ec1
    1028:	00000efd 	.word	0x00000efd
    102c:	0000103d 	.word	0x0000103d
    1030:	40000400 	.word	0x40000400
    1034:	00001061 	.word	0x00001061
    1038:	00001119 	.word	0x00001119

0000103c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    103c:	4a06      	ldr	r2, [pc, #24]	; (1058 <system_gclk_init+0x1c>)
    103e:	6993      	ldr	r3, [r2, #24]
    1040:	2108      	movs	r1, #8
    1042:	430b      	orrs	r3, r1
    1044:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1046:	2201      	movs	r2, #1
    1048:	4b04      	ldr	r3, [pc, #16]	; (105c <system_gclk_init+0x20>)
    104a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    104c:	0019      	movs	r1, r3
    104e:	780b      	ldrb	r3, [r1, #0]
    1050:	4213      	tst	r3, r2
    1052:	d1fc      	bne.n	104e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1054:	4770      	bx	lr
    1056:	46c0      	nop			; (mov r8, r8)
    1058:	40000400 	.word	0x40000400
    105c:	40000c00 	.word	0x40000c00

00001060 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1060:	b570      	push	{r4, r5, r6, lr}
    1062:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1064:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1066:	780d      	ldrb	r5, [r1, #0]
    1068:	022d      	lsls	r5, r5, #8
    106a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    106c:	784b      	ldrb	r3, [r1, #1]
    106e:	2b00      	cmp	r3, #0
    1070:	d002      	beq.n	1078 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1072:	2380      	movs	r3, #128	; 0x80
    1074:	02db      	lsls	r3, r3, #11
    1076:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1078:	7a4b      	ldrb	r3, [r1, #9]
    107a:	2b00      	cmp	r3, #0
    107c:	d002      	beq.n	1084 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    107e:	2380      	movs	r3, #128	; 0x80
    1080:	031b      	lsls	r3, r3, #12
    1082:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1084:	6848      	ldr	r0, [r1, #4]
    1086:	2801      	cmp	r0, #1
    1088:	d910      	bls.n	10ac <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    108a:	1e43      	subs	r3, r0, #1
    108c:	4218      	tst	r0, r3
    108e:	d134      	bne.n	10fa <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1090:	2802      	cmp	r0, #2
    1092:	d930      	bls.n	10f6 <system_gclk_gen_set_config+0x96>
    1094:	2302      	movs	r3, #2
    1096:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1098:	3201      	adds	r2, #1
						mask <<= 1) {
    109a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    109c:	4298      	cmp	r0, r3
    109e:	d8fb      	bhi.n	1098 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    10a0:	0212      	lsls	r2, r2, #8
    10a2:	4332      	orrs	r2, r6
    10a4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    10a6:	2380      	movs	r3, #128	; 0x80
    10a8:	035b      	lsls	r3, r3, #13
    10aa:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    10ac:	7a0b      	ldrb	r3, [r1, #8]
    10ae:	2b00      	cmp	r3, #0
    10b0:	d002      	beq.n	10b8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    10b2:	2380      	movs	r3, #128	; 0x80
    10b4:	039b      	lsls	r3, r3, #14
    10b6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10b8:	4a13      	ldr	r2, [pc, #76]	; (1108 <system_gclk_gen_set_config+0xa8>)
    10ba:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    10bc:	b25b      	sxtb	r3, r3
    10be:	2b00      	cmp	r3, #0
    10c0:	dbfb      	blt.n	10ba <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    10c2:	4b12      	ldr	r3, [pc, #72]	; (110c <system_gclk_gen_set_config+0xac>)
    10c4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    10c6:	4b12      	ldr	r3, [pc, #72]	; (1110 <system_gclk_gen_set_config+0xb0>)
    10c8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10ca:	4a0f      	ldr	r2, [pc, #60]	; (1108 <system_gclk_gen_set_config+0xa8>)
    10cc:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    10ce:	b25b      	sxtb	r3, r3
    10d0:	2b00      	cmp	r3, #0
    10d2:	dbfb      	blt.n	10cc <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    10d4:	4b0c      	ldr	r3, [pc, #48]	; (1108 <system_gclk_gen_set_config+0xa8>)
    10d6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10d8:	001a      	movs	r2, r3
    10da:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    10dc:	b25b      	sxtb	r3, r3
    10de:	2b00      	cmp	r3, #0
    10e0:	dbfb      	blt.n	10da <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    10e2:	4a09      	ldr	r2, [pc, #36]	; (1108 <system_gclk_gen_set_config+0xa8>)
    10e4:	6853      	ldr	r3, [r2, #4]
    10e6:	2180      	movs	r1, #128	; 0x80
    10e8:	0249      	lsls	r1, r1, #9
    10ea:	400b      	ands	r3, r1
    10ec:	431d      	orrs	r5, r3
    10ee:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    10f0:	4b08      	ldr	r3, [pc, #32]	; (1114 <system_gclk_gen_set_config+0xb4>)
    10f2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    10f4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    10f6:	2200      	movs	r2, #0
    10f8:	e7d2      	b.n	10a0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    10fa:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    10fc:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    10fe:	2380      	movs	r3, #128	; 0x80
    1100:	029b      	lsls	r3, r3, #10
    1102:	431d      	orrs	r5, r3
    1104:	e7d2      	b.n	10ac <system_gclk_gen_set_config+0x4c>
    1106:	46c0      	nop			; (mov r8, r8)
    1108:	40000c00 	.word	0x40000c00
    110c:	00000d65 	.word	0x00000d65
    1110:	40000c08 	.word	0x40000c08
    1114:	00000da5 	.word	0x00000da5

00001118 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1118:	b510      	push	{r4, lr}
    111a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    111c:	4a0b      	ldr	r2, [pc, #44]	; (114c <system_gclk_gen_enable+0x34>)
    111e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1120:	b25b      	sxtb	r3, r3
    1122:	2b00      	cmp	r3, #0
    1124:	dbfb      	blt.n	111e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1126:	4b0a      	ldr	r3, [pc, #40]	; (1150 <system_gclk_gen_enable+0x38>)
    1128:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    112a:	4b0a      	ldr	r3, [pc, #40]	; (1154 <system_gclk_gen_enable+0x3c>)
    112c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    112e:	4a07      	ldr	r2, [pc, #28]	; (114c <system_gclk_gen_enable+0x34>)
    1130:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1132:	b25b      	sxtb	r3, r3
    1134:	2b00      	cmp	r3, #0
    1136:	dbfb      	blt.n	1130 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1138:	4a04      	ldr	r2, [pc, #16]	; (114c <system_gclk_gen_enable+0x34>)
    113a:	6851      	ldr	r1, [r2, #4]
    113c:	2380      	movs	r3, #128	; 0x80
    113e:	025b      	lsls	r3, r3, #9
    1140:	430b      	orrs	r3, r1
    1142:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1144:	4b04      	ldr	r3, [pc, #16]	; (1158 <system_gclk_gen_enable+0x40>)
    1146:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1148:	bd10      	pop	{r4, pc}
    114a:	46c0      	nop			; (mov r8, r8)
    114c:	40000c00 	.word	0x40000c00
    1150:	00000d65 	.word	0x00000d65
    1154:	40000c04 	.word	0x40000c04
    1158:	00000da5 	.word	0x00000da5

0000115c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    115c:	b570      	push	{r4, r5, r6, lr}
    115e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1160:	4a1a      	ldr	r2, [pc, #104]	; (11cc <system_gclk_gen_get_hz+0x70>)
    1162:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1164:	b25b      	sxtb	r3, r3
    1166:	2b00      	cmp	r3, #0
    1168:	dbfb      	blt.n	1162 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    116a:	4b19      	ldr	r3, [pc, #100]	; (11d0 <system_gclk_gen_get_hz+0x74>)
    116c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    116e:	4b19      	ldr	r3, [pc, #100]	; (11d4 <system_gclk_gen_get_hz+0x78>)
    1170:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1172:	4a16      	ldr	r2, [pc, #88]	; (11cc <system_gclk_gen_get_hz+0x70>)
    1174:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1176:	b25b      	sxtb	r3, r3
    1178:	2b00      	cmp	r3, #0
    117a:	dbfb      	blt.n	1174 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    117c:	4e13      	ldr	r6, [pc, #76]	; (11cc <system_gclk_gen_get_hz+0x70>)
    117e:	6870      	ldr	r0, [r6, #4]
    1180:	04c0      	lsls	r0, r0, #19
    1182:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1184:	4b14      	ldr	r3, [pc, #80]	; (11d8 <system_gclk_gen_get_hz+0x7c>)
    1186:	4798      	blx	r3
    1188:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    118a:	4b12      	ldr	r3, [pc, #72]	; (11d4 <system_gclk_gen_get_hz+0x78>)
    118c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    118e:	6876      	ldr	r6, [r6, #4]
    1190:	02f6      	lsls	r6, r6, #11
    1192:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1194:	4b11      	ldr	r3, [pc, #68]	; (11dc <system_gclk_gen_get_hz+0x80>)
    1196:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1198:	4a0c      	ldr	r2, [pc, #48]	; (11cc <system_gclk_gen_get_hz+0x70>)
    119a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    119c:	b25b      	sxtb	r3, r3
    119e:	2b00      	cmp	r3, #0
    11a0:	dbfb      	blt.n	119a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    11a2:	4b0a      	ldr	r3, [pc, #40]	; (11cc <system_gclk_gen_get_hz+0x70>)
    11a4:	689c      	ldr	r4, [r3, #8]
    11a6:	0224      	lsls	r4, r4, #8
    11a8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    11aa:	4b0d      	ldr	r3, [pc, #52]	; (11e0 <system_gclk_gen_get_hz+0x84>)
    11ac:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    11ae:	2e00      	cmp	r6, #0
    11b0:	d107      	bne.n	11c2 <system_gclk_gen_get_hz+0x66>
    11b2:	2c01      	cmp	r4, #1
    11b4:	d907      	bls.n	11c6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    11b6:	0021      	movs	r1, r4
    11b8:	0028      	movs	r0, r5
    11ba:	4b0a      	ldr	r3, [pc, #40]	; (11e4 <system_gclk_gen_get_hz+0x88>)
    11bc:	4798      	blx	r3
    11be:	0005      	movs	r5, r0
    11c0:	e001      	b.n	11c6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    11c2:	3401      	adds	r4, #1
    11c4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    11c6:	0028      	movs	r0, r5
    11c8:	bd70      	pop	{r4, r5, r6, pc}
    11ca:	46c0      	nop			; (mov r8, r8)
    11cc:	40000c00 	.word	0x40000c00
    11d0:	00000d65 	.word	0x00000d65
    11d4:	40000c04 	.word	0x40000c04
    11d8:	00000e31 	.word	0x00000e31
    11dc:	40000c08 	.word	0x40000c08
    11e0:	00000da5 	.word	0x00000da5
    11e4:	0000151d 	.word	0x0000151d

000011e8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    11e8:	b510      	push	{r4, lr}
    11ea:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    11ec:	4b06      	ldr	r3, [pc, #24]	; (1208 <system_gclk_chan_enable+0x20>)
    11ee:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    11f0:	4b06      	ldr	r3, [pc, #24]	; (120c <system_gclk_chan_enable+0x24>)
    11f2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    11f4:	4a06      	ldr	r2, [pc, #24]	; (1210 <system_gclk_chan_enable+0x28>)
    11f6:	8853      	ldrh	r3, [r2, #2]
    11f8:	2180      	movs	r1, #128	; 0x80
    11fa:	01c9      	lsls	r1, r1, #7
    11fc:	430b      	orrs	r3, r1
    11fe:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1200:	4b04      	ldr	r3, [pc, #16]	; (1214 <system_gclk_chan_enable+0x2c>)
    1202:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1204:	bd10      	pop	{r4, pc}
    1206:	46c0      	nop			; (mov r8, r8)
    1208:	00000d65 	.word	0x00000d65
    120c:	40000c02 	.word	0x40000c02
    1210:	40000c00 	.word	0x40000c00
    1214:	00000da5 	.word	0x00000da5

00001218 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1218:	b510      	push	{r4, lr}
    121a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    121c:	4b0f      	ldr	r3, [pc, #60]	; (125c <system_gclk_chan_disable+0x44>)
    121e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1220:	4b0f      	ldr	r3, [pc, #60]	; (1260 <system_gclk_chan_disable+0x48>)
    1222:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1224:	4a0f      	ldr	r2, [pc, #60]	; (1264 <system_gclk_chan_disable+0x4c>)
    1226:	8853      	ldrh	r3, [r2, #2]
    1228:	051b      	lsls	r3, r3, #20
    122a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    122c:	8853      	ldrh	r3, [r2, #2]
    122e:	490e      	ldr	r1, [pc, #56]	; (1268 <system_gclk_chan_disable+0x50>)
    1230:	400b      	ands	r3, r1
    1232:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1234:	8853      	ldrh	r3, [r2, #2]
    1236:	490d      	ldr	r1, [pc, #52]	; (126c <system_gclk_chan_disable+0x54>)
    1238:	400b      	ands	r3, r1
    123a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    123c:	0011      	movs	r1, r2
    123e:	2280      	movs	r2, #128	; 0x80
    1240:	01d2      	lsls	r2, r2, #7
    1242:	884b      	ldrh	r3, [r1, #2]
    1244:	4213      	tst	r3, r2
    1246:	d1fc      	bne.n	1242 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1248:	4906      	ldr	r1, [pc, #24]	; (1264 <system_gclk_chan_disable+0x4c>)
    124a:	884a      	ldrh	r2, [r1, #2]
    124c:	0203      	lsls	r3, r0, #8
    124e:	4806      	ldr	r0, [pc, #24]	; (1268 <system_gclk_chan_disable+0x50>)
    1250:	4002      	ands	r2, r0
    1252:	4313      	orrs	r3, r2
    1254:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1256:	4b06      	ldr	r3, [pc, #24]	; (1270 <system_gclk_chan_disable+0x58>)
    1258:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    125a:	bd10      	pop	{r4, pc}
    125c:	00000d65 	.word	0x00000d65
    1260:	40000c02 	.word	0x40000c02
    1264:	40000c00 	.word	0x40000c00
    1268:	fffff0ff 	.word	0xfffff0ff
    126c:	ffffbfff 	.word	0xffffbfff
    1270:	00000da5 	.word	0x00000da5

00001274 <system_gclk_chan_set_config>:
{
    1274:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1276:	780c      	ldrb	r4, [r1, #0]
    1278:	0224      	lsls	r4, r4, #8
    127a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    127c:	4b02      	ldr	r3, [pc, #8]	; (1288 <system_gclk_chan_set_config+0x14>)
    127e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1280:	b2a4      	uxth	r4, r4
    1282:	4b02      	ldr	r3, [pc, #8]	; (128c <system_gclk_chan_set_config+0x18>)
    1284:	805c      	strh	r4, [r3, #2]
}
    1286:	bd10      	pop	{r4, pc}
    1288:	00001219 	.word	0x00001219
    128c:	40000c00 	.word	0x40000c00

00001290 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1290:	b510      	push	{r4, lr}
    1292:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1294:	4b06      	ldr	r3, [pc, #24]	; (12b0 <system_gclk_chan_get_hz+0x20>)
    1296:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1298:	4b06      	ldr	r3, [pc, #24]	; (12b4 <system_gclk_chan_get_hz+0x24>)
    129a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    129c:	4b06      	ldr	r3, [pc, #24]	; (12b8 <system_gclk_chan_get_hz+0x28>)
    129e:	885c      	ldrh	r4, [r3, #2]
    12a0:	0524      	lsls	r4, r4, #20
    12a2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    12a4:	4b05      	ldr	r3, [pc, #20]	; (12bc <system_gclk_chan_get_hz+0x2c>)
    12a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    12a8:	0020      	movs	r0, r4
    12aa:	4b05      	ldr	r3, [pc, #20]	; (12c0 <system_gclk_chan_get_hz+0x30>)
    12ac:	4798      	blx	r3
}
    12ae:	bd10      	pop	{r4, pc}
    12b0:	00000d65 	.word	0x00000d65
    12b4:	40000c02 	.word	0x40000c02
    12b8:	40000c00 	.word	0x40000c00
    12bc:	00000da5 	.word	0x00000da5
    12c0:	0000115d 	.word	0x0000115d

000012c4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    12c4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    12c6:	78d3      	ldrb	r3, [r2, #3]
    12c8:	2b00      	cmp	r3, #0
    12ca:	d135      	bne.n	1338 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    12cc:	7813      	ldrb	r3, [r2, #0]
    12ce:	2b80      	cmp	r3, #128	; 0x80
    12d0:	d029      	beq.n	1326 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    12d2:	061b      	lsls	r3, r3, #24
    12d4:	2480      	movs	r4, #128	; 0x80
    12d6:	0264      	lsls	r4, r4, #9
    12d8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    12da:	7854      	ldrb	r4, [r2, #1]
    12dc:	2502      	movs	r5, #2
    12de:	43ac      	bics	r4, r5
    12e0:	d106      	bne.n	12f0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    12e2:	7894      	ldrb	r4, [r2, #2]
    12e4:	2c00      	cmp	r4, #0
    12e6:	d120      	bne.n	132a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    12e8:	2480      	movs	r4, #128	; 0x80
    12ea:	02a4      	lsls	r4, r4, #10
    12ec:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    12ee:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    12f0:	7854      	ldrb	r4, [r2, #1]
    12f2:	3c01      	subs	r4, #1
    12f4:	2c01      	cmp	r4, #1
    12f6:	d91c      	bls.n	1332 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    12f8:	040d      	lsls	r5, r1, #16
    12fa:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    12fc:	24a0      	movs	r4, #160	; 0xa0
    12fe:	05e4      	lsls	r4, r4, #23
    1300:	432c      	orrs	r4, r5
    1302:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1304:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1306:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1308:	24d0      	movs	r4, #208	; 0xd0
    130a:	0624      	lsls	r4, r4, #24
    130c:	432c      	orrs	r4, r5
    130e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1310:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1312:	78d4      	ldrb	r4, [r2, #3]
    1314:	2c00      	cmp	r4, #0
    1316:	d122      	bne.n	135e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1318:	035b      	lsls	r3, r3, #13
    131a:	d51c      	bpl.n	1356 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    131c:	7893      	ldrb	r3, [r2, #2]
    131e:	2b01      	cmp	r3, #1
    1320:	d01e      	beq.n	1360 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1322:	6141      	str	r1, [r0, #20]
    1324:	e017      	b.n	1356 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1326:	2300      	movs	r3, #0
    1328:	e7d7      	b.n	12da <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    132a:	24c0      	movs	r4, #192	; 0xc0
    132c:	02e4      	lsls	r4, r4, #11
    132e:	4323      	orrs	r3, r4
    1330:	e7dd      	b.n	12ee <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1332:	4c0d      	ldr	r4, [pc, #52]	; (1368 <_system_pinmux_config+0xa4>)
    1334:	4023      	ands	r3, r4
    1336:	e7df      	b.n	12f8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1338:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    133a:	040c      	lsls	r4, r1, #16
    133c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    133e:	23a0      	movs	r3, #160	; 0xa0
    1340:	05db      	lsls	r3, r3, #23
    1342:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1344:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1346:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1348:	23d0      	movs	r3, #208	; 0xd0
    134a:	061b      	lsls	r3, r3, #24
    134c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    134e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1350:	78d3      	ldrb	r3, [r2, #3]
    1352:	2b00      	cmp	r3, #0
    1354:	d103      	bne.n	135e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1356:	7853      	ldrb	r3, [r2, #1]
    1358:	3b01      	subs	r3, #1
    135a:	2b01      	cmp	r3, #1
    135c:	d902      	bls.n	1364 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    135e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1360:	6181      	str	r1, [r0, #24]
    1362:	e7f8      	b.n	1356 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1364:	6081      	str	r1, [r0, #8]
}
    1366:	e7fa      	b.n	135e <_system_pinmux_config+0x9a>
    1368:	fffbffff 	.word	0xfffbffff

0000136c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    136c:	b510      	push	{r4, lr}
    136e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1370:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1372:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1374:	2900      	cmp	r1, #0
    1376:	d104      	bne.n	1382 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1378:	0943      	lsrs	r3, r0, #5
    137a:	01db      	lsls	r3, r3, #7
    137c:	4905      	ldr	r1, [pc, #20]	; (1394 <system_pinmux_pin_set_config+0x28>)
    137e:	468c      	mov	ip, r1
    1380:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1382:	241f      	movs	r4, #31
    1384:	4020      	ands	r0, r4
    1386:	2101      	movs	r1, #1
    1388:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    138a:	0018      	movs	r0, r3
    138c:	4b02      	ldr	r3, [pc, #8]	; (1398 <system_pinmux_pin_set_config+0x2c>)
    138e:	4798      	blx	r3
}
    1390:	bd10      	pop	{r4, pc}
    1392:	46c0      	nop			; (mov r8, r8)
    1394:	41004400 	.word	0x41004400
    1398:	000012c5 	.word	0x000012c5

0000139c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    139c:	4770      	bx	lr
	...

000013a0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    13a0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    13a2:	4b05      	ldr	r3, [pc, #20]	; (13b8 <system_init+0x18>)
    13a4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    13a6:	4b05      	ldr	r3, [pc, #20]	; (13bc <system_init+0x1c>)
    13a8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    13aa:	4b05      	ldr	r3, [pc, #20]	; (13c0 <system_init+0x20>)
    13ac:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    13ae:	4b05      	ldr	r3, [pc, #20]	; (13c4 <system_init+0x24>)
    13b0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    13b2:	4b05      	ldr	r3, [pc, #20]	; (13c8 <system_init+0x28>)
    13b4:	4798      	blx	r3
}
    13b6:	bd10      	pop	{r4, pc}
    13b8:	00000fa5 	.word	0x00000fa5
    13bc:	00000dd5 	.word	0x00000dd5
    13c0:	0000139d 	.word	0x0000139d
    13c4:	0000139d 	.word	0x0000139d
    13c8:	0000139d 	.word	0x0000139d

000013cc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    13cc:	e7fe      	b.n	13cc <Dummy_Handler>
	...

000013d0 <Reset_Handler>:
{
    13d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    13d2:	4a2a      	ldr	r2, [pc, #168]	; (147c <Reset_Handler+0xac>)
    13d4:	4b2a      	ldr	r3, [pc, #168]	; (1480 <Reset_Handler+0xb0>)
    13d6:	429a      	cmp	r2, r3
    13d8:	d011      	beq.n	13fe <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    13da:	001a      	movs	r2, r3
    13dc:	4b29      	ldr	r3, [pc, #164]	; (1484 <Reset_Handler+0xb4>)
    13de:	429a      	cmp	r2, r3
    13e0:	d20d      	bcs.n	13fe <Reset_Handler+0x2e>
    13e2:	4a29      	ldr	r2, [pc, #164]	; (1488 <Reset_Handler+0xb8>)
    13e4:	3303      	adds	r3, #3
    13e6:	1a9b      	subs	r3, r3, r2
    13e8:	089b      	lsrs	r3, r3, #2
    13ea:	3301      	adds	r3, #1
    13ec:	009b      	lsls	r3, r3, #2
    13ee:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    13f0:	4823      	ldr	r0, [pc, #140]	; (1480 <Reset_Handler+0xb0>)
    13f2:	4922      	ldr	r1, [pc, #136]	; (147c <Reset_Handler+0xac>)
    13f4:	588c      	ldr	r4, [r1, r2]
    13f6:	5084      	str	r4, [r0, r2]
    13f8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    13fa:	429a      	cmp	r2, r3
    13fc:	d1fa      	bne.n	13f4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    13fe:	4a23      	ldr	r2, [pc, #140]	; (148c <Reset_Handler+0xbc>)
    1400:	4b23      	ldr	r3, [pc, #140]	; (1490 <Reset_Handler+0xc0>)
    1402:	429a      	cmp	r2, r3
    1404:	d20a      	bcs.n	141c <Reset_Handler+0x4c>
    1406:	43d3      	mvns	r3, r2
    1408:	4921      	ldr	r1, [pc, #132]	; (1490 <Reset_Handler+0xc0>)
    140a:	185b      	adds	r3, r3, r1
    140c:	2103      	movs	r1, #3
    140e:	438b      	bics	r3, r1
    1410:	3304      	adds	r3, #4
    1412:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1414:	2100      	movs	r1, #0
    1416:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1418:	4293      	cmp	r3, r2
    141a:	d1fc      	bne.n	1416 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    141c:	4a1d      	ldr	r2, [pc, #116]	; (1494 <Reset_Handler+0xc4>)
    141e:	21ff      	movs	r1, #255	; 0xff
    1420:	4b1d      	ldr	r3, [pc, #116]	; (1498 <Reset_Handler+0xc8>)
    1422:	438b      	bics	r3, r1
    1424:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1426:	39fd      	subs	r1, #253	; 0xfd
    1428:	2390      	movs	r3, #144	; 0x90
    142a:	005b      	lsls	r3, r3, #1
    142c:	4a1b      	ldr	r2, [pc, #108]	; (149c <Reset_Handler+0xcc>)
    142e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1430:	4a1b      	ldr	r2, [pc, #108]	; (14a0 <Reset_Handler+0xd0>)
    1432:	78d3      	ldrb	r3, [r2, #3]
    1434:	2503      	movs	r5, #3
    1436:	43ab      	bics	r3, r5
    1438:	2402      	movs	r4, #2
    143a:	4323      	orrs	r3, r4
    143c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    143e:	78d3      	ldrb	r3, [r2, #3]
    1440:	270c      	movs	r7, #12
    1442:	43bb      	bics	r3, r7
    1444:	2608      	movs	r6, #8
    1446:	4333      	orrs	r3, r6
    1448:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    144a:	4b16      	ldr	r3, [pc, #88]	; (14a4 <Reset_Handler+0xd4>)
    144c:	7b98      	ldrb	r0, [r3, #14]
    144e:	2230      	movs	r2, #48	; 0x30
    1450:	4390      	bics	r0, r2
    1452:	2220      	movs	r2, #32
    1454:	4310      	orrs	r0, r2
    1456:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1458:	7b99      	ldrb	r1, [r3, #14]
    145a:	43b9      	bics	r1, r7
    145c:	4331      	orrs	r1, r6
    145e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1460:	7b9a      	ldrb	r2, [r3, #14]
    1462:	43aa      	bics	r2, r5
    1464:	4322      	orrs	r2, r4
    1466:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1468:	4a0f      	ldr	r2, [pc, #60]	; (14a8 <Reset_Handler+0xd8>)
    146a:	6853      	ldr	r3, [r2, #4]
    146c:	2180      	movs	r1, #128	; 0x80
    146e:	430b      	orrs	r3, r1
    1470:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1472:	4b0e      	ldr	r3, [pc, #56]	; (14ac <Reset_Handler+0xdc>)
    1474:	4798      	blx	r3
        main();
    1476:	4b0e      	ldr	r3, [pc, #56]	; (14b0 <Reset_Handler+0xe0>)
    1478:	4798      	blx	r3
    147a:	e7fe      	b.n	147a <Reset_Handler+0xaa>
    147c:	00001fb0 	.word	0x00001fb0
    1480:	20000000 	.word	0x20000000
    1484:	20000070 	.word	0x20000070
    1488:	20000004 	.word	0x20000004
    148c:	20000070 	.word	0x20000070
    1490:	2000013c 	.word	0x2000013c
    1494:	e000ed00 	.word	0xe000ed00
    1498:	00000000 	.word	0x00000000
    149c:	41007000 	.word	0x41007000
    14a0:	41005000 	.word	0x41005000
    14a4:	41004800 	.word	0x41004800
    14a8:	41004000 	.word	0x41004000
    14ac:	00001689 	.word	0x00001689
    14b0:	00001511 	.word	0x00001511

000014b4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    14b4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    14b6:	4a06      	ldr	r2, [pc, #24]	; (14d0 <_sbrk+0x1c>)
    14b8:	6812      	ldr	r2, [r2, #0]
    14ba:	2a00      	cmp	r2, #0
    14bc:	d004      	beq.n	14c8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    14be:	4a04      	ldr	r2, [pc, #16]	; (14d0 <_sbrk+0x1c>)
    14c0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    14c2:	18c3      	adds	r3, r0, r3
    14c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    14c6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    14c8:	4902      	ldr	r1, [pc, #8]	; (14d4 <_sbrk+0x20>)
    14ca:	4a01      	ldr	r2, [pc, #4]	; (14d0 <_sbrk+0x1c>)
    14cc:	6011      	str	r1, [r2, #0]
    14ce:	e7f6      	b.n	14be <_sbrk+0xa>
    14d0:	200000c8 	.word	0x200000c8
    14d4:	20002140 	.word	0x20002140

000014d8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    14d8:	2001      	movs	r0, #1
    14da:	4240      	negs	r0, r0
    14dc:	4770      	bx	lr

000014de <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    14de:	2380      	movs	r3, #128	; 0x80
    14e0:	019b      	lsls	r3, r3, #6
    14e2:	604b      	str	r3, [r1, #4]

	return 0;
}
    14e4:	2000      	movs	r0, #0
    14e6:	4770      	bx	lr

000014e8 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    14e8:	2000      	movs	r0, #0
    14ea:	4770      	bx	lr

000014ec <setup>:
#include <asf.h>
#include "TheArtist.h"

void setup() {
    14ec:	b510      	push	{r4, lr}
	system_init();
    14ee:	4b04      	ldr	r3, [pc, #16]	; (1500 <setup+0x14>)
    14f0:	4798      	blx	r3
	delay_init(); 
    14f2:	4b04      	ldr	r3, [pc, #16]	; (1504 <setup+0x18>)
    14f4:	4798      	blx	r3
	artist_usart_configure(&(artist.usart_instance));
    14f6:	4804      	ldr	r0, [pc, #16]	; (1508 <setup+0x1c>)
    14f8:	4b04      	ldr	r3, [pc, #16]	; (150c <setup+0x20>)
    14fa:	4798      	blx	r3
	
}
    14fc:	bd10      	pop	{r4, pc}
    14fe:	46c0      	nop			; (mov r8, r8)
    1500:	000013a1 	.word	0x000013a1
    1504:	00000d25 	.word	0x00000d25
    1508:	200000e0 	.word	0x200000e0
    150c:	00000561 	.word	0x00000561

00001510 <main>:
void loop() {
	
}

int main (void)
{
    1510:	b510      	push	{r4, lr}
	
	setup (); 
    1512:	4b01      	ldr	r3, [pc, #4]	; (1518 <main+0x8>)
    1514:	4798      	blx	r3
    1516:	e7fe      	b.n	1516 <main+0x6>
    1518:	000014ed 	.word	0x000014ed

0000151c <__udivsi3>:
    151c:	2200      	movs	r2, #0
    151e:	0843      	lsrs	r3, r0, #1
    1520:	428b      	cmp	r3, r1
    1522:	d374      	bcc.n	160e <__udivsi3+0xf2>
    1524:	0903      	lsrs	r3, r0, #4
    1526:	428b      	cmp	r3, r1
    1528:	d35f      	bcc.n	15ea <__udivsi3+0xce>
    152a:	0a03      	lsrs	r3, r0, #8
    152c:	428b      	cmp	r3, r1
    152e:	d344      	bcc.n	15ba <__udivsi3+0x9e>
    1530:	0b03      	lsrs	r3, r0, #12
    1532:	428b      	cmp	r3, r1
    1534:	d328      	bcc.n	1588 <__udivsi3+0x6c>
    1536:	0c03      	lsrs	r3, r0, #16
    1538:	428b      	cmp	r3, r1
    153a:	d30d      	bcc.n	1558 <__udivsi3+0x3c>
    153c:	22ff      	movs	r2, #255	; 0xff
    153e:	0209      	lsls	r1, r1, #8
    1540:	ba12      	rev	r2, r2
    1542:	0c03      	lsrs	r3, r0, #16
    1544:	428b      	cmp	r3, r1
    1546:	d302      	bcc.n	154e <__udivsi3+0x32>
    1548:	1212      	asrs	r2, r2, #8
    154a:	0209      	lsls	r1, r1, #8
    154c:	d065      	beq.n	161a <__udivsi3+0xfe>
    154e:	0b03      	lsrs	r3, r0, #12
    1550:	428b      	cmp	r3, r1
    1552:	d319      	bcc.n	1588 <__udivsi3+0x6c>
    1554:	e000      	b.n	1558 <__udivsi3+0x3c>
    1556:	0a09      	lsrs	r1, r1, #8
    1558:	0bc3      	lsrs	r3, r0, #15
    155a:	428b      	cmp	r3, r1
    155c:	d301      	bcc.n	1562 <__udivsi3+0x46>
    155e:	03cb      	lsls	r3, r1, #15
    1560:	1ac0      	subs	r0, r0, r3
    1562:	4152      	adcs	r2, r2
    1564:	0b83      	lsrs	r3, r0, #14
    1566:	428b      	cmp	r3, r1
    1568:	d301      	bcc.n	156e <__udivsi3+0x52>
    156a:	038b      	lsls	r3, r1, #14
    156c:	1ac0      	subs	r0, r0, r3
    156e:	4152      	adcs	r2, r2
    1570:	0b43      	lsrs	r3, r0, #13
    1572:	428b      	cmp	r3, r1
    1574:	d301      	bcc.n	157a <__udivsi3+0x5e>
    1576:	034b      	lsls	r3, r1, #13
    1578:	1ac0      	subs	r0, r0, r3
    157a:	4152      	adcs	r2, r2
    157c:	0b03      	lsrs	r3, r0, #12
    157e:	428b      	cmp	r3, r1
    1580:	d301      	bcc.n	1586 <__udivsi3+0x6a>
    1582:	030b      	lsls	r3, r1, #12
    1584:	1ac0      	subs	r0, r0, r3
    1586:	4152      	adcs	r2, r2
    1588:	0ac3      	lsrs	r3, r0, #11
    158a:	428b      	cmp	r3, r1
    158c:	d301      	bcc.n	1592 <__udivsi3+0x76>
    158e:	02cb      	lsls	r3, r1, #11
    1590:	1ac0      	subs	r0, r0, r3
    1592:	4152      	adcs	r2, r2
    1594:	0a83      	lsrs	r3, r0, #10
    1596:	428b      	cmp	r3, r1
    1598:	d301      	bcc.n	159e <__udivsi3+0x82>
    159a:	028b      	lsls	r3, r1, #10
    159c:	1ac0      	subs	r0, r0, r3
    159e:	4152      	adcs	r2, r2
    15a0:	0a43      	lsrs	r3, r0, #9
    15a2:	428b      	cmp	r3, r1
    15a4:	d301      	bcc.n	15aa <__udivsi3+0x8e>
    15a6:	024b      	lsls	r3, r1, #9
    15a8:	1ac0      	subs	r0, r0, r3
    15aa:	4152      	adcs	r2, r2
    15ac:	0a03      	lsrs	r3, r0, #8
    15ae:	428b      	cmp	r3, r1
    15b0:	d301      	bcc.n	15b6 <__udivsi3+0x9a>
    15b2:	020b      	lsls	r3, r1, #8
    15b4:	1ac0      	subs	r0, r0, r3
    15b6:	4152      	adcs	r2, r2
    15b8:	d2cd      	bcs.n	1556 <__udivsi3+0x3a>
    15ba:	09c3      	lsrs	r3, r0, #7
    15bc:	428b      	cmp	r3, r1
    15be:	d301      	bcc.n	15c4 <__udivsi3+0xa8>
    15c0:	01cb      	lsls	r3, r1, #7
    15c2:	1ac0      	subs	r0, r0, r3
    15c4:	4152      	adcs	r2, r2
    15c6:	0983      	lsrs	r3, r0, #6
    15c8:	428b      	cmp	r3, r1
    15ca:	d301      	bcc.n	15d0 <__udivsi3+0xb4>
    15cc:	018b      	lsls	r3, r1, #6
    15ce:	1ac0      	subs	r0, r0, r3
    15d0:	4152      	adcs	r2, r2
    15d2:	0943      	lsrs	r3, r0, #5
    15d4:	428b      	cmp	r3, r1
    15d6:	d301      	bcc.n	15dc <__udivsi3+0xc0>
    15d8:	014b      	lsls	r3, r1, #5
    15da:	1ac0      	subs	r0, r0, r3
    15dc:	4152      	adcs	r2, r2
    15de:	0903      	lsrs	r3, r0, #4
    15e0:	428b      	cmp	r3, r1
    15e2:	d301      	bcc.n	15e8 <__udivsi3+0xcc>
    15e4:	010b      	lsls	r3, r1, #4
    15e6:	1ac0      	subs	r0, r0, r3
    15e8:	4152      	adcs	r2, r2
    15ea:	08c3      	lsrs	r3, r0, #3
    15ec:	428b      	cmp	r3, r1
    15ee:	d301      	bcc.n	15f4 <__udivsi3+0xd8>
    15f0:	00cb      	lsls	r3, r1, #3
    15f2:	1ac0      	subs	r0, r0, r3
    15f4:	4152      	adcs	r2, r2
    15f6:	0883      	lsrs	r3, r0, #2
    15f8:	428b      	cmp	r3, r1
    15fa:	d301      	bcc.n	1600 <__udivsi3+0xe4>
    15fc:	008b      	lsls	r3, r1, #2
    15fe:	1ac0      	subs	r0, r0, r3
    1600:	4152      	adcs	r2, r2
    1602:	0843      	lsrs	r3, r0, #1
    1604:	428b      	cmp	r3, r1
    1606:	d301      	bcc.n	160c <__udivsi3+0xf0>
    1608:	004b      	lsls	r3, r1, #1
    160a:	1ac0      	subs	r0, r0, r3
    160c:	4152      	adcs	r2, r2
    160e:	1a41      	subs	r1, r0, r1
    1610:	d200      	bcs.n	1614 <__udivsi3+0xf8>
    1612:	4601      	mov	r1, r0
    1614:	4152      	adcs	r2, r2
    1616:	4610      	mov	r0, r2
    1618:	4770      	bx	lr
    161a:	e7ff      	b.n	161c <__udivsi3+0x100>
    161c:	b501      	push	{r0, lr}
    161e:	2000      	movs	r0, #0
    1620:	f000 f806 	bl	1630 <__aeabi_idiv0>
    1624:	bd02      	pop	{r1, pc}
    1626:	46c0      	nop			; (mov r8, r8)

00001628 <__aeabi_uidivmod>:
    1628:	2900      	cmp	r1, #0
    162a:	d0f7      	beq.n	161c <__udivsi3+0x100>
    162c:	e776      	b.n	151c <__udivsi3>
    162e:	4770      	bx	lr

00001630 <__aeabi_idiv0>:
    1630:	4770      	bx	lr
    1632:	46c0      	nop			; (mov r8, r8)

00001634 <__aeabi_lmul>:
    1634:	b5f0      	push	{r4, r5, r6, r7, lr}
    1636:	46ce      	mov	lr, r9
    1638:	4647      	mov	r7, r8
    163a:	0415      	lsls	r5, r2, #16
    163c:	0c2d      	lsrs	r5, r5, #16
    163e:	002e      	movs	r6, r5
    1640:	b580      	push	{r7, lr}
    1642:	0407      	lsls	r7, r0, #16
    1644:	0c14      	lsrs	r4, r2, #16
    1646:	0c3f      	lsrs	r7, r7, #16
    1648:	4699      	mov	r9, r3
    164a:	0c03      	lsrs	r3, r0, #16
    164c:	437e      	muls	r6, r7
    164e:	435d      	muls	r5, r3
    1650:	4367      	muls	r7, r4
    1652:	4363      	muls	r3, r4
    1654:	197f      	adds	r7, r7, r5
    1656:	0c34      	lsrs	r4, r6, #16
    1658:	19e4      	adds	r4, r4, r7
    165a:	469c      	mov	ip, r3
    165c:	42a5      	cmp	r5, r4
    165e:	d903      	bls.n	1668 <__aeabi_lmul+0x34>
    1660:	2380      	movs	r3, #128	; 0x80
    1662:	025b      	lsls	r3, r3, #9
    1664:	4698      	mov	r8, r3
    1666:	44c4      	add	ip, r8
    1668:	464b      	mov	r3, r9
    166a:	4351      	muls	r1, r2
    166c:	4343      	muls	r3, r0
    166e:	0436      	lsls	r6, r6, #16
    1670:	0c36      	lsrs	r6, r6, #16
    1672:	0c25      	lsrs	r5, r4, #16
    1674:	0424      	lsls	r4, r4, #16
    1676:	4465      	add	r5, ip
    1678:	19a4      	adds	r4, r4, r6
    167a:	1859      	adds	r1, r3, r1
    167c:	1949      	adds	r1, r1, r5
    167e:	0020      	movs	r0, r4
    1680:	bc0c      	pop	{r2, r3}
    1682:	4690      	mov	r8, r2
    1684:	4699      	mov	r9, r3
    1686:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001688 <__libc_init_array>:
    1688:	b570      	push	{r4, r5, r6, lr}
    168a:	2600      	movs	r6, #0
    168c:	4d0c      	ldr	r5, [pc, #48]	; (16c0 <__libc_init_array+0x38>)
    168e:	4c0d      	ldr	r4, [pc, #52]	; (16c4 <__libc_init_array+0x3c>)
    1690:	1b64      	subs	r4, r4, r5
    1692:	10a4      	asrs	r4, r4, #2
    1694:	42a6      	cmp	r6, r4
    1696:	d109      	bne.n	16ac <__libc_init_array+0x24>
    1698:	2600      	movs	r6, #0
    169a:	f000 fc79 	bl	1f90 <_init>
    169e:	4d0a      	ldr	r5, [pc, #40]	; (16c8 <__libc_init_array+0x40>)
    16a0:	4c0a      	ldr	r4, [pc, #40]	; (16cc <__libc_init_array+0x44>)
    16a2:	1b64      	subs	r4, r4, r5
    16a4:	10a4      	asrs	r4, r4, #2
    16a6:	42a6      	cmp	r6, r4
    16a8:	d105      	bne.n	16b6 <__libc_init_array+0x2e>
    16aa:	bd70      	pop	{r4, r5, r6, pc}
    16ac:	00b3      	lsls	r3, r6, #2
    16ae:	58eb      	ldr	r3, [r5, r3]
    16b0:	4798      	blx	r3
    16b2:	3601      	adds	r6, #1
    16b4:	e7ee      	b.n	1694 <__libc_init_array+0xc>
    16b6:	00b3      	lsls	r3, r6, #2
    16b8:	58eb      	ldr	r3, [r5, r3]
    16ba:	4798      	blx	r3
    16bc:	3601      	adds	r6, #1
    16be:	e7f2      	b.n	16a6 <__libc_init_array+0x1e>
    16c0:	00001f9c 	.word	0x00001f9c
    16c4:	00001f9c 	.word	0x00001f9c
    16c8:	00001f9c 	.word	0x00001f9c
    16cc:	00001fa0 	.word	0x00001fa0

000016d0 <memset>:
    16d0:	0003      	movs	r3, r0
    16d2:	1882      	adds	r2, r0, r2
    16d4:	4293      	cmp	r3, r2
    16d6:	d100      	bne.n	16da <memset+0xa>
    16d8:	4770      	bx	lr
    16da:	7019      	strb	r1, [r3, #0]
    16dc:	3301      	adds	r3, #1
    16de:	e7f9      	b.n	16d4 <memset+0x4>

000016e0 <setbuf>:
    16e0:	424a      	negs	r2, r1
    16e2:	414a      	adcs	r2, r1
    16e4:	2380      	movs	r3, #128	; 0x80
    16e6:	b510      	push	{r4, lr}
    16e8:	0052      	lsls	r2, r2, #1
    16ea:	00db      	lsls	r3, r3, #3
    16ec:	f000 f802 	bl	16f4 <setvbuf>
    16f0:	bd10      	pop	{r4, pc}
	...

000016f4 <setvbuf>:
    16f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    16f6:	001d      	movs	r5, r3
    16f8:	4b4f      	ldr	r3, [pc, #316]	; (1838 <setvbuf+0x144>)
    16fa:	b085      	sub	sp, #20
    16fc:	681e      	ldr	r6, [r3, #0]
    16fe:	0004      	movs	r4, r0
    1700:	000f      	movs	r7, r1
    1702:	9200      	str	r2, [sp, #0]
    1704:	2e00      	cmp	r6, #0
    1706:	d005      	beq.n	1714 <setvbuf+0x20>
    1708:	69b3      	ldr	r3, [r6, #24]
    170a:	2b00      	cmp	r3, #0
    170c:	d102      	bne.n	1714 <setvbuf+0x20>
    170e:	0030      	movs	r0, r6
    1710:	f000 f994 	bl	1a3c <__sinit>
    1714:	4b49      	ldr	r3, [pc, #292]	; (183c <setvbuf+0x148>)
    1716:	429c      	cmp	r4, r3
    1718:	d150      	bne.n	17bc <setvbuf+0xc8>
    171a:	6874      	ldr	r4, [r6, #4]
    171c:	9b00      	ldr	r3, [sp, #0]
    171e:	2b02      	cmp	r3, #2
    1720:	d005      	beq.n	172e <setvbuf+0x3a>
    1722:	2b01      	cmp	r3, #1
    1724:	d900      	bls.n	1728 <setvbuf+0x34>
    1726:	e084      	b.n	1832 <setvbuf+0x13e>
    1728:	2d00      	cmp	r5, #0
    172a:	da00      	bge.n	172e <setvbuf+0x3a>
    172c:	e081      	b.n	1832 <setvbuf+0x13e>
    172e:	0021      	movs	r1, r4
    1730:	0030      	movs	r0, r6
    1732:	f000 f915 	bl	1960 <_fflush_r>
    1736:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1738:	2900      	cmp	r1, #0
    173a:	d008      	beq.n	174e <setvbuf+0x5a>
    173c:	0023      	movs	r3, r4
    173e:	3344      	adds	r3, #68	; 0x44
    1740:	4299      	cmp	r1, r3
    1742:	d002      	beq.n	174a <setvbuf+0x56>
    1744:	0030      	movs	r0, r6
    1746:	f000 fa41 	bl	1bcc <_free_r>
    174a:	2300      	movs	r3, #0
    174c:	6363      	str	r3, [r4, #52]	; 0x34
    174e:	2300      	movs	r3, #0
    1750:	61a3      	str	r3, [r4, #24]
    1752:	6063      	str	r3, [r4, #4]
    1754:	89a3      	ldrh	r3, [r4, #12]
    1756:	061b      	lsls	r3, r3, #24
    1758:	d503      	bpl.n	1762 <setvbuf+0x6e>
    175a:	6921      	ldr	r1, [r4, #16]
    175c:	0030      	movs	r0, r6
    175e:	f000 fa35 	bl	1bcc <_free_r>
    1762:	89a3      	ldrh	r3, [r4, #12]
    1764:	4a36      	ldr	r2, [pc, #216]	; (1840 <setvbuf+0x14c>)
    1766:	4013      	ands	r3, r2
    1768:	81a3      	strh	r3, [r4, #12]
    176a:	9b00      	ldr	r3, [sp, #0]
    176c:	2b02      	cmp	r3, #2
    176e:	d05a      	beq.n	1826 <setvbuf+0x132>
    1770:	ab03      	add	r3, sp, #12
    1772:	aa02      	add	r2, sp, #8
    1774:	0021      	movs	r1, r4
    1776:	0030      	movs	r0, r6
    1778:	f000 f9f6 	bl	1b68 <__swhatbuf_r>
    177c:	89a3      	ldrh	r3, [r4, #12]
    177e:	4318      	orrs	r0, r3
    1780:	81a0      	strh	r0, [r4, #12]
    1782:	2d00      	cmp	r5, #0
    1784:	d124      	bne.n	17d0 <setvbuf+0xdc>
    1786:	9d02      	ldr	r5, [sp, #8]
    1788:	0028      	movs	r0, r5
    178a:	f000 fa15 	bl	1bb8 <malloc>
    178e:	9501      	str	r5, [sp, #4]
    1790:	1e07      	subs	r7, r0, #0
    1792:	d142      	bne.n	181a <setvbuf+0x126>
    1794:	9b02      	ldr	r3, [sp, #8]
    1796:	9301      	str	r3, [sp, #4]
    1798:	42ab      	cmp	r3, r5
    179a:	d139      	bne.n	1810 <setvbuf+0x11c>
    179c:	2001      	movs	r0, #1
    179e:	4240      	negs	r0, r0
    17a0:	2302      	movs	r3, #2
    17a2:	89a2      	ldrh	r2, [r4, #12]
    17a4:	4313      	orrs	r3, r2
    17a6:	81a3      	strh	r3, [r4, #12]
    17a8:	2300      	movs	r3, #0
    17aa:	60a3      	str	r3, [r4, #8]
    17ac:	0023      	movs	r3, r4
    17ae:	3347      	adds	r3, #71	; 0x47
    17b0:	6023      	str	r3, [r4, #0]
    17b2:	6123      	str	r3, [r4, #16]
    17b4:	2301      	movs	r3, #1
    17b6:	6163      	str	r3, [r4, #20]
    17b8:	b005      	add	sp, #20
    17ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17bc:	4b21      	ldr	r3, [pc, #132]	; (1844 <setvbuf+0x150>)
    17be:	429c      	cmp	r4, r3
    17c0:	d101      	bne.n	17c6 <setvbuf+0xd2>
    17c2:	68b4      	ldr	r4, [r6, #8]
    17c4:	e7aa      	b.n	171c <setvbuf+0x28>
    17c6:	4b20      	ldr	r3, [pc, #128]	; (1848 <setvbuf+0x154>)
    17c8:	429c      	cmp	r4, r3
    17ca:	d1a7      	bne.n	171c <setvbuf+0x28>
    17cc:	68f4      	ldr	r4, [r6, #12]
    17ce:	e7a5      	b.n	171c <setvbuf+0x28>
    17d0:	2f00      	cmp	r7, #0
    17d2:	d0d9      	beq.n	1788 <setvbuf+0x94>
    17d4:	69b3      	ldr	r3, [r6, #24]
    17d6:	2b00      	cmp	r3, #0
    17d8:	d102      	bne.n	17e0 <setvbuf+0xec>
    17da:	0030      	movs	r0, r6
    17dc:	f000 f92e 	bl	1a3c <__sinit>
    17e0:	9b00      	ldr	r3, [sp, #0]
    17e2:	2b01      	cmp	r3, #1
    17e4:	d103      	bne.n	17ee <setvbuf+0xfa>
    17e6:	89a3      	ldrh	r3, [r4, #12]
    17e8:	9a00      	ldr	r2, [sp, #0]
    17ea:	431a      	orrs	r2, r3
    17ec:	81a2      	strh	r2, [r4, #12]
    17ee:	2008      	movs	r0, #8
    17f0:	89a3      	ldrh	r3, [r4, #12]
    17f2:	6027      	str	r7, [r4, #0]
    17f4:	6127      	str	r7, [r4, #16]
    17f6:	6165      	str	r5, [r4, #20]
    17f8:	4018      	ands	r0, r3
    17fa:	d018      	beq.n	182e <setvbuf+0x13a>
    17fc:	2001      	movs	r0, #1
    17fe:	4018      	ands	r0, r3
    1800:	2300      	movs	r3, #0
    1802:	4298      	cmp	r0, r3
    1804:	d011      	beq.n	182a <setvbuf+0x136>
    1806:	426d      	negs	r5, r5
    1808:	60a3      	str	r3, [r4, #8]
    180a:	61a5      	str	r5, [r4, #24]
    180c:	0018      	movs	r0, r3
    180e:	e7d3      	b.n	17b8 <setvbuf+0xc4>
    1810:	9801      	ldr	r0, [sp, #4]
    1812:	f000 f9d1 	bl	1bb8 <malloc>
    1816:	1e07      	subs	r7, r0, #0
    1818:	d0c0      	beq.n	179c <setvbuf+0xa8>
    181a:	2380      	movs	r3, #128	; 0x80
    181c:	89a2      	ldrh	r2, [r4, #12]
    181e:	9d01      	ldr	r5, [sp, #4]
    1820:	4313      	orrs	r3, r2
    1822:	81a3      	strh	r3, [r4, #12]
    1824:	e7d6      	b.n	17d4 <setvbuf+0xe0>
    1826:	2000      	movs	r0, #0
    1828:	e7ba      	b.n	17a0 <setvbuf+0xac>
    182a:	60a5      	str	r5, [r4, #8]
    182c:	e7c4      	b.n	17b8 <setvbuf+0xc4>
    182e:	60a0      	str	r0, [r4, #8]
    1830:	e7c2      	b.n	17b8 <setvbuf+0xc4>
    1832:	2001      	movs	r0, #1
    1834:	4240      	negs	r0, r0
    1836:	e7bf      	b.n	17b8 <setvbuf+0xc4>
    1838:	2000000c 	.word	0x2000000c
    183c:	00001f50 	.word	0x00001f50
    1840:	fffff35c 	.word	0xfffff35c
    1844:	00001f70 	.word	0x00001f70
    1848:	00001f30 	.word	0x00001f30

0000184c <__sflush_r>:
    184c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    184e:	898a      	ldrh	r2, [r1, #12]
    1850:	0005      	movs	r5, r0
    1852:	000c      	movs	r4, r1
    1854:	0713      	lsls	r3, r2, #28
    1856:	d460      	bmi.n	191a <__sflush_r+0xce>
    1858:	684b      	ldr	r3, [r1, #4]
    185a:	2b00      	cmp	r3, #0
    185c:	dc04      	bgt.n	1868 <__sflush_r+0x1c>
    185e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1860:	2b00      	cmp	r3, #0
    1862:	dc01      	bgt.n	1868 <__sflush_r+0x1c>
    1864:	2000      	movs	r0, #0
    1866:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1868:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    186a:	2f00      	cmp	r7, #0
    186c:	d0fa      	beq.n	1864 <__sflush_r+0x18>
    186e:	2300      	movs	r3, #0
    1870:	682e      	ldr	r6, [r5, #0]
    1872:	602b      	str	r3, [r5, #0]
    1874:	2380      	movs	r3, #128	; 0x80
    1876:	015b      	lsls	r3, r3, #5
    1878:	401a      	ands	r2, r3
    187a:	d034      	beq.n	18e6 <__sflush_r+0x9a>
    187c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    187e:	89a3      	ldrh	r3, [r4, #12]
    1880:	075b      	lsls	r3, r3, #29
    1882:	d506      	bpl.n	1892 <__sflush_r+0x46>
    1884:	6863      	ldr	r3, [r4, #4]
    1886:	1ac0      	subs	r0, r0, r3
    1888:	6b63      	ldr	r3, [r4, #52]	; 0x34
    188a:	2b00      	cmp	r3, #0
    188c:	d001      	beq.n	1892 <__sflush_r+0x46>
    188e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1890:	1ac0      	subs	r0, r0, r3
    1892:	0002      	movs	r2, r0
    1894:	6a21      	ldr	r1, [r4, #32]
    1896:	2300      	movs	r3, #0
    1898:	0028      	movs	r0, r5
    189a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    189c:	47b8      	blx	r7
    189e:	89a1      	ldrh	r1, [r4, #12]
    18a0:	1c43      	adds	r3, r0, #1
    18a2:	d106      	bne.n	18b2 <__sflush_r+0x66>
    18a4:	682b      	ldr	r3, [r5, #0]
    18a6:	2b1d      	cmp	r3, #29
    18a8:	d831      	bhi.n	190e <__sflush_r+0xc2>
    18aa:	4a2c      	ldr	r2, [pc, #176]	; (195c <__sflush_r+0x110>)
    18ac:	40da      	lsrs	r2, r3
    18ae:	07d3      	lsls	r3, r2, #31
    18b0:	d52d      	bpl.n	190e <__sflush_r+0xc2>
    18b2:	2300      	movs	r3, #0
    18b4:	6063      	str	r3, [r4, #4]
    18b6:	6923      	ldr	r3, [r4, #16]
    18b8:	6023      	str	r3, [r4, #0]
    18ba:	04cb      	lsls	r3, r1, #19
    18bc:	d505      	bpl.n	18ca <__sflush_r+0x7e>
    18be:	1c43      	adds	r3, r0, #1
    18c0:	d102      	bne.n	18c8 <__sflush_r+0x7c>
    18c2:	682b      	ldr	r3, [r5, #0]
    18c4:	2b00      	cmp	r3, #0
    18c6:	d100      	bne.n	18ca <__sflush_r+0x7e>
    18c8:	6560      	str	r0, [r4, #84]	; 0x54
    18ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
    18cc:	602e      	str	r6, [r5, #0]
    18ce:	2900      	cmp	r1, #0
    18d0:	d0c8      	beq.n	1864 <__sflush_r+0x18>
    18d2:	0023      	movs	r3, r4
    18d4:	3344      	adds	r3, #68	; 0x44
    18d6:	4299      	cmp	r1, r3
    18d8:	d002      	beq.n	18e0 <__sflush_r+0x94>
    18da:	0028      	movs	r0, r5
    18dc:	f000 f976 	bl	1bcc <_free_r>
    18e0:	2000      	movs	r0, #0
    18e2:	6360      	str	r0, [r4, #52]	; 0x34
    18e4:	e7bf      	b.n	1866 <__sflush_r+0x1a>
    18e6:	2301      	movs	r3, #1
    18e8:	6a21      	ldr	r1, [r4, #32]
    18ea:	0028      	movs	r0, r5
    18ec:	47b8      	blx	r7
    18ee:	1c43      	adds	r3, r0, #1
    18f0:	d1c5      	bne.n	187e <__sflush_r+0x32>
    18f2:	682b      	ldr	r3, [r5, #0]
    18f4:	2b00      	cmp	r3, #0
    18f6:	d0c2      	beq.n	187e <__sflush_r+0x32>
    18f8:	2b1d      	cmp	r3, #29
    18fa:	d001      	beq.n	1900 <__sflush_r+0xb4>
    18fc:	2b16      	cmp	r3, #22
    18fe:	d101      	bne.n	1904 <__sflush_r+0xb8>
    1900:	602e      	str	r6, [r5, #0]
    1902:	e7af      	b.n	1864 <__sflush_r+0x18>
    1904:	2340      	movs	r3, #64	; 0x40
    1906:	89a2      	ldrh	r2, [r4, #12]
    1908:	4313      	orrs	r3, r2
    190a:	81a3      	strh	r3, [r4, #12]
    190c:	e7ab      	b.n	1866 <__sflush_r+0x1a>
    190e:	2340      	movs	r3, #64	; 0x40
    1910:	430b      	orrs	r3, r1
    1912:	2001      	movs	r0, #1
    1914:	81a3      	strh	r3, [r4, #12]
    1916:	4240      	negs	r0, r0
    1918:	e7a5      	b.n	1866 <__sflush_r+0x1a>
    191a:	690f      	ldr	r7, [r1, #16]
    191c:	2f00      	cmp	r7, #0
    191e:	d0a1      	beq.n	1864 <__sflush_r+0x18>
    1920:	680b      	ldr	r3, [r1, #0]
    1922:	600f      	str	r7, [r1, #0]
    1924:	1bdb      	subs	r3, r3, r7
    1926:	9301      	str	r3, [sp, #4]
    1928:	2300      	movs	r3, #0
    192a:	0792      	lsls	r2, r2, #30
    192c:	d100      	bne.n	1930 <__sflush_r+0xe4>
    192e:	694b      	ldr	r3, [r1, #20]
    1930:	60a3      	str	r3, [r4, #8]
    1932:	9b01      	ldr	r3, [sp, #4]
    1934:	2b00      	cmp	r3, #0
    1936:	dc00      	bgt.n	193a <__sflush_r+0xee>
    1938:	e794      	b.n	1864 <__sflush_r+0x18>
    193a:	9b01      	ldr	r3, [sp, #4]
    193c:	003a      	movs	r2, r7
    193e:	6a21      	ldr	r1, [r4, #32]
    1940:	0028      	movs	r0, r5
    1942:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1944:	47b0      	blx	r6
    1946:	2800      	cmp	r0, #0
    1948:	dc03      	bgt.n	1952 <__sflush_r+0x106>
    194a:	2340      	movs	r3, #64	; 0x40
    194c:	89a2      	ldrh	r2, [r4, #12]
    194e:	4313      	orrs	r3, r2
    1950:	e7df      	b.n	1912 <__sflush_r+0xc6>
    1952:	9b01      	ldr	r3, [sp, #4]
    1954:	183f      	adds	r7, r7, r0
    1956:	1a1b      	subs	r3, r3, r0
    1958:	9301      	str	r3, [sp, #4]
    195a:	e7ea      	b.n	1932 <__sflush_r+0xe6>
    195c:	20400001 	.word	0x20400001

00001960 <_fflush_r>:
    1960:	690b      	ldr	r3, [r1, #16]
    1962:	b570      	push	{r4, r5, r6, lr}
    1964:	0005      	movs	r5, r0
    1966:	000c      	movs	r4, r1
    1968:	2b00      	cmp	r3, #0
    196a:	d101      	bne.n	1970 <_fflush_r+0x10>
    196c:	2000      	movs	r0, #0
    196e:	bd70      	pop	{r4, r5, r6, pc}
    1970:	2800      	cmp	r0, #0
    1972:	d004      	beq.n	197e <_fflush_r+0x1e>
    1974:	6983      	ldr	r3, [r0, #24]
    1976:	2b00      	cmp	r3, #0
    1978:	d101      	bne.n	197e <_fflush_r+0x1e>
    197a:	f000 f85f 	bl	1a3c <__sinit>
    197e:	4b0b      	ldr	r3, [pc, #44]	; (19ac <_fflush_r+0x4c>)
    1980:	429c      	cmp	r4, r3
    1982:	d109      	bne.n	1998 <_fflush_r+0x38>
    1984:	686c      	ldr	r4, [r5, #4]
    1986:	220c      	movs	r2, #12
    1988:	5ea3      	ldrsh	r3, [r4, r2]
    198a:	2b00      	cmp	r3, #0
    198c:	d0ee      	beq.n	196c <_fflush_r+0xc>
    198e:	0021      	movs	r1, r4
    1990:	0028      	movs	r0, r5
    1992:	f7ff ff5b 	bl	184c <__sflush_r>
    1996:	e7ea      	b.n	196e <_fflush_r+0xe>
    1998:	4b05      	ldr	r3, [pc, #20]	; (19b0 <_fflush_r+0x50>)
    199a:	429c      	cmp	r4, r3
    199c:	d101      	bne.n	19a2 <_fflush_r+0x42>
    199e:	68ac      	ldr	r4, [r5, #8]
    19a0:	e7f1      	b.n	1986 <_fflush_r+0x26>
    19a2:	4b04      	ldr	r3, [pc, #16]	; (19b4 <_fflush_r+0x54>)
    19a4:	429c      	cmp	r4, r3
    19a6:	d1ee      	bne.n	1986 <_fflush_r+0x26>
    19a8:	68ec      	ldr	r4, [r5, #12]
    19aa:	e7ec      	b.n	1986 <_fflush_r+0x26>
    19ac:	00001f50 	.word	0x00001f50
    19b0:	00001f70 	.word	0x00001f70
    19b4:	00001f30 	.word	0x00001f30

000019b8 <_cleanup_r>:
    19b8:	b510      	push	{r4, lr}
    19ba:	4902      	ldr	r1, [pc, #8]	; (19c4 <_cleanup_r+0xc>)
    19bc:	f000 f8b2 	bl	1b24 <_fwalk_reent>
    19c0:	bd10      	pop	{r4, pc}
    19c2:	46c0      	nop			; (mov r8, r8)
    19c4:	00001961 	.word	0x00001961

000019c8 <std.isra.0>:
    19c8:	2300      	movs	r3, #0
    19ca:	b510      	push	{r4, lr}
    19cc:	0004      	movs	r4, r0
    19ce:	6003      	str	r3, [r0, #0]
    19d0:	6043      	str	r3, [r0, #4]
    19d2:	6083      	str	r3, [r0, #8]
    19d4:	8181      	strh	r1, [r0, #12]
    19d6:	6643      	str	r3, [r0, #100]	; 0x64
    19d8:	81c2      	strh	r2, [r0, #14]
    19da:	6103      	str	r3, [r0, #16]
    19dc:	6143      	str	r3, [r0, #20]
    19de:	6183      	str	r3, [r0, #24]
    19e0:	0019      	movs	r1, r3
    19e2:	2208      	movs	r2, #8
    19e4:	305c      	adds	r0, #92	; 0x5c
    19e6:	f7ff fe73 	bl	16d0 <memset>
    19ea:	4b05      	ldr	r3, [pc, #20]	; (1a00 <std.isra.0+0x38>)
    19ec:	6224      	str	r4, [r4, #32]
    19ee:	6263      	str	r3, [r4, #36]	; 0x24
    19f0:	4b04      	ldr	r3, [pc, #16]	; (1a04 <std.isra.0+0x3c>)
    19f2:	62a3      	str	r3, [r4, #40]	; 0x28
    19f4:	4b04      	ldr	r3, [pc, #16]	; (1a08 <std.isra.0+0x40>)
    19f6:	62e3      	str	r3, [r4, #44]	; 0x2c
    19f8:	4b04      	ldr	r3, [pc, #16]	; (1a0c <std.isra.0+0x44>)
    19fa:	6323      	str	r3, [r4, #48]	; 0x30
    19fc:	bd10      	pop	{r4, pc}
    19fe:	46c0      	nop			; (mov r8, r8)
    1a00:	00001d41 	.word	0x00001d41
    1a04:	00001d69 	.word	0x00001d69
    1a08:	00001da1 	.word	0x00001da1
    1a0c:	00001dcd 	.word	0x00001dcd

00001a10 <__sfmoreglue>:
    1a10:	b570      	push	{r4, r5, r6, lr}
    1a12:	2568      	movs	r5, #104	; 0x68
    1a14:	1e4a      	subs	r2, r1, #1
    1a16:	4355      	muls	r5, r2
    1a18:	000e      	movs	r6, r1
    1a1a:	0029      	movs	r1, r5
    1a1c:	3174      	adds	r1, #116	; 0x74
    1a1e:	f000 f91f 	bl	1c60 <_malloc_r>
    1a22:	1e04      	subs	r4, r0, #0
    1a24:	d008      	beq.n	1a38 <__sfmoreglue+0x28>
    1a26:	2100      	movs	r1, #0
    1a28:	002a      	movs	r2, r5
    1a2a:	6001      	str	r1, [r0, #0]
    1a2c:	6046      	str	r6, [r0, #4]
    1a2e:	300c      	adds	r0, #12
    1a30:	60a0      	str	r0, [r4, #8]
    1a32:	3268      	adds	r2, #104	; 0x68
    1a34:	f7ff fe4c 	bl	16d0 <memset>
    1a38:	0020      	movs	r0, r4
    1a3a:	bd70      	pop	{r4, r5, r6, pc}

00001a3c <__sinit>:
    1a3c:	6983      	ldr	r3, [r0, #24]
    1a3e:	b513      	push	{r0, r1, r4, lr}
    1a40:	0004      	movs	r4, r0
    1a42:	2b00      	cmp	r3, #0
    1a44:	d128      	bne.n	1a98 <__sinit+0x5c>
    1a46:	6483      	str	r3, [r0, #72]	; 0x48
    1a48:	64c3      	str	r3, [r0, #76]	; 0x4c
    1a4a:	6503      	str	r3, [r0, #80]	; 0x50
    1a4c:	4b13      	ldr	r3, [pc, #76]	; (1a9c <__sinit+0x60>)
    1a4e:	4a14      	ldr	r2, [pc, #80]	; (1aa0 <__sinit+0x64>)
    1a50:	681b      	ldr	r3, [r3, #0]
    1a52:	6282      	str	r2, [r0, #40]	; 0x28
    1a54:	9301      	str	r3, [sp, #4]
    1a56:	4298      	cmp	r0, r3
    1a58:	d101      	bne.n	1a5e <__sinit+0x22>
    1a5a:	2301      	movs	r3, #1
    1a5c:	6183      	str	r3, [r0, #24]
    1a5e:	0020      	movs	r0, r4
    1a60:	f000 f820 	bl	1aa4 <__sfp>
    1a64:	6060      	str	r0, [r4, #4]
    1a66:	0020      	movs	r0, r4
    1a68:	f000 f81c 	bl	1aa4 <__sfp>
    1a6c:	60a0      	str	r0, [r4, #8]
    1a6e:	0020      	movs	r0, r4
    1a70:	f000 f818 	bl	1aa4 <__sfp>
    1a74:	2200      	movs	r2, #0
    1a76:	60e0      	str	r0, [r4, #12]
    1a78:	2104      	movs	r1, #4
    1a7a:	6860      	ldr	r0, [r4, #4]
    1a7c:	f7ff ffa4 	bl	19c8 <std.isra.0>
    1a80:	2201      	movs	r2, #1
    1a82:	2109      	movs	r1, #9
    1a84:	68a0      	ldr	r0, [r4, #8]
    1a86:	f7ff ff9f 	bl	19c8 <std.isra.0>
    1a8a:	2202      	movs	r2, #2
    1a8c:	2112      	movs	r1, #18
    1a8e:	68e0      	ldr	r0, [r4, #12]
    1a90:	f7ff ff9a 	bl	19c8 <std.isra.0>
    1a94:	2301      	movs	r3, #1
    1a96:	61a3      	str	r3, [r4, #24]
    1a98:	bd13      	pop	{r0, r1, r4, pc}
    1a9a:	46c0      	nop			; (mov r8, r8)
    1a9c:	00001f2c 	.word	0x00001f2c
    1aa0:	000019b9 	.word	0x000019b9

00001aa4 <__sfp>:
    1aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1aa6:	4b1e      	ldr	r3, [pc, #120]	; (1b20 <__sfp+0x7c>)
    1aa8:	0007      	movs	r7, r0
    1aaa:	681e      	ldr	r6, [r3, #0]
    1aac:	69b3      	ldr	r3, [r6, #24]
    1aae:	2b00      	cmp	r3, #0
    1ab0:	d102      	bne.n	1ab8 <__sfp+0x14>
    1ab2:	0030      	movs	r0, r6
    1ab4:	f7ff ffc2 	bl	1a3c <__sinit>
    1ab8:	3648      	adds	r6, #72	; 0x48
    1aba:	68b4      	ldr	r4, [r6, #8]
    1abc:	6873      	ldr	r3, [r6, #4]
    1abe:	3b01      	subs	r3, #1
    1ac0:	d504      	bpl.n	1acc <__sfp+0x28>
    1ac2:	6833      	ldr	r3, [r6, #0]
    1ac4:	2b00      	cmp	r3, #0
    1ac6:	d007      	beq.n	1ad8 <__sfp+0x34>
    1ac8:	6836      	ldr	r6, [r6, #0]
    1aca:	e7f6      	b.n	1aba <__sfp+0x16>
    1acc:	220c      	movs	r2, #12
    1ace:	5ea5      	ldrsh	r5, [r4, r2]
    1ad0:	2d00      	cmp	r5, #0
    1ad2:	d00d      	beq.n	1af0 <__sfp+0x4c>
    1ad4:	3468      	adds	r4, #104	; 0x68
    1ad6:	e7f2      	b.n	1abe <__sfp+0x1a>
    1ad8:	2104      	movs	r1, #4
    1ada:	0038      	movs	r0, r7
    1adc:	f7ff ff98 	bl	1a10 <__sfmoreglue>
    1ae0:	6030      	str	r0, [r6, #0]
    1ae2:	2800      	cmp	r0, #0
    1ae4:	d1f0      	bne.n	1ac8 <__sfp+0x24>
    1ae6:	230c      	movs	r3, #12
    1ae8:	0004      	movs	r4, r0
    1aea:	603b      	str	r3, [r7, #0]
    1aec:	0020      	movs	r0, r4
    1aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1af0:	2301      	movs	r3, #1
    1af2:	0020      	movs	r0, r4
    1af4:	425b      	negs	r3, r3
    1af6:	81e3      	strh	r3, [r4, #14]
    1af8:	3302      	adds	r3, #2
    1afa:	81a3      	strh	r3, [r4, #12]
    1afc:	6665      	str	r5, [r4, #100]	; 0x64
    1afe:	6025      	str	r5, [r4, #0]
    1b00:	60a5      	str	r5, [r4, #8]
    1b02:	6065      	str	r5, [r4, #4]
    1b04:	6125      	str	r5, [r4, #16]
    1b06:	6165      	str	r5, [r4, #20]
    1b08:	61a5      	str	r5, [r4, #24]
    1b0a:	2208      	movs	r2, #8
    1b0c:	0029      	movs	r1, r5
    1b0e:	305c      	adds	r0, #92	; 0x5c
    1b10:	f7ff fdde 	bl	16d0 <memset>
    1b14:	6365      	str	r5, [r4, #52]	; 0x34
    1b16:	63a5      	str	r5, [r4, #56]	; 0x38
    1b18:	64a5      	str	r5, [r4, #72]	; 0x48
    1b1a:	64e5      	str	r5, [r4, #76]	; 0x4c
    1b1c:	e7e6      	b.n	1aec <__sfp+0x48>
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	00001f2c 	.word	0x00001f2c

00001b24 <_fwalk_reent>:
    1b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1b26:	0004      	movs	r4, r0
    1b28:	0007      	movs	r7, r0
    1b2a:	2600      	movs	r6, #0
    1b2c:	9101      	str	r1, [sp, #4]
    1b2e:	3448      	adds	r4, #72	; 0x48
    1b30:	2c00      	cmp	r4, #0
    1b32:	d101      	bne.n	1b38 <_fwalk_reent+0x14>
    1b34:	0030      	movs	r0, r6
    1b36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1b38:	6863      	ldr	r3, [r4, #4]
    1b3a:	68a5      	ldr	r5, [r4, #8]
    1b3c:	9300      	str	r3, [sp, #0]
    1b3e:	9b00      	ldr	r3, [sp, #0]
    1b40:	3b01      	subs	r3, #1
    1b42:	9300      	str	r3, [sp, #0]
    1b44:	d501      	bpl.n	1b4a <_fwalk_reent+0x26>
    1b46:	6824      	ldr	r4, [r4, #0]
    1b48:	e7f2      	b.n	1b30 <_fwalk_reent+0xc>
    1b4a:	89ab      	ldrh	r3, [r5, #12]
    1b4c:	2b01      	cmp	r3, #1
    1b4e:	d908      	bls.n	1b62 <_fwalk_reent+0x3e>
    1b50:	220e      	movs	r2, #14
    1b52:	5eab      	ldrsh	r3, [r5, r2]
    1b54:	3301      	adds	r3, #1
    1b56:	d004      	beq.n	1b62 <_fwalk_reent+0x3e>
    1b58:	0029      	movs	r1, r5
    1b5a:	0038      	movs	r0, r7
    1b5c:	9b01      	ldr	r3, [sp, #4]
    1b5e:	4798      	blx	r3
    1b60:	4306      	orrs	r6, r0
    1b62:	3568      	adds	r5, #104	; 0x68
    1b64:	e7eb      	b.n	1b3e <_fwalk_reent+0x1a>
	...

00001b68 <__swhatbuf_r>:
    1b68:	b570      	push	{r4, r5, r6, lr}
    1b6a:	000e      	movs	r6, r1
    1b6c:	001d      	movs	r5, r3
    1b6e:	230e      	movs	r3, #14
    1b70:	5ec9      	ldrsh	r1, [r1, r3]
    1b72:	b090      	sub	sp, #64	; 0x40
    1b74:	0014      	movs	r4, r2
    1b76:	2900      	cmp	r1, #0
    1b78:	da07      	bge.n	1b8a <__swhatbuf_r+0x22>
    1b7a:	2300      	movs	r3, #0
    1b7c:	602b      	str	r3, [r5, #0]
    1b7e:	89b3      	ldrh	r3, [r6, #12]
    1b80:	061b      	lsls	r3, r3, #24
    1b82:	d411      	bmi.n	1ba8 <__swhatbuf_r+0x40>
    1b84:	2380      	movs	r3, #128	; 0x80
    1b86:	00db      	lsls	r3, r3, #3
    1b88:	e00f      	b.n	1baa <__swhatbuf_r+0x42>
    1b8a:	aa01      	add	r2, sp, #4
    1b8c:	f000 f94a 	bl	1e24 <_fstat_r>
    1b90:	2800      	cmp	r0, #0
    1b92:	dbf2      	blt.n	1b7a <__swhatbuf_r+0x12>
    1b94:	22f0      	movs	r2, #240	; 0xf0
    1b96:	9b02      	ldr	r3, [sp, #8]
    1b98:	0212      	lsls	r2, r2, #8
    1b9a:	4013      	ands	r3, r2
    1b9c:	4a05      	ldr	r2, [pc, #20]	; (1bb4 <__swhatbuf_r+0x4c>)
    1b9e:	189b      	adds	r3, r3, r2
    1ba0:	425a      	negs	r2, r3
    1ba2:	4153      	adcs	r3, r2
    1ba4:	602b      	str	r3, [r5, #0]
    1ba6:	e7ed      	b.n	1b84 <__swhatbuf_r+0x1c>
    1ba8:	2340      	movs	r3, #64	; 0x40
    1baa:	2000      	movs	r0, #0
    1bac:	6023      	str	r3, [r4, #0]
    1bae:	b010      	add	sp, #64	; 0x40
    1bb0:	bd70      	pop	{r4, r5, r6, pc}
    1bb2:	46c0      	nop			; (mov r8, r8)
    1bb4:	ffffe000 	.word	0xffffe000

00001bb8 <malloc>:
    1bb8:	b510      	push	{r4, lr}
    1bba:	4b03      	ldr	r3, [pc, #12]	; (1bc8 <malloc+0x10>)
    1bbc:	0001      	movs	r1, r0
    1bbe:	6818      	ldr	r0, [r3, #0]
    1bc0:	f000 f84e 	bl	1c60 <_malloc_r>
    1bc4:	bd10      	pop	{r4, pc}
    1bc6:	46c0      	nop			; (mov r8, r8)
    1bc8:	2000000c 	.word	0x2000000c

00001bcc <_free_r>:
    1bcc:	b570      	push	{r4, r5, r6, lr}
    1bce:	0005      	movs	r5, r0
    1bd0:	2900      	cmp	r1, #0
    1bd2:	d010      	beq.n	1bf6 <_free_r+0x2a>
    1bd4:	1f0c      	subs	r4, r1, #4
    1bd6:	6823      	ldr	r3, [r4, #0]
    1bd8:	2b00      	cmp	r3, #0
    1bda:	da00      	bge.n	1bde <_free_r+0x12>
    1bdc:	18e4      	adds	r4, r4, r3
    1bde:	0028      	movs	r0, r5
    1be0:	f000 f946 	bl	1e70 <__malloc_lock>
    1be4:	4a1d      	ldr	r2, [pc, #116]	; (1c5c <_free_r+0x90>)
    1be6:	6813      	ldr	r3, [r2, #0]
    1be8:	2b00      	cmp	r3, #0
    1bea:	d105      	bne.n	1bf8 <_free_r+0x2c>
    1bec:	6063      	str	r3, [r4, #4]
    1bee:	6014      	str	r4, [r2, #0]
    1bf0:	0028      	movs	r0, r5
    1bf2:	f000 f93e 	bl	1e72 <__malloc_unlock>
    1bf6:	bd70      	pop	{r4, r5, r6, pc}
    1bf8:	42a3      	cmp	r3, r4
    1bfa:	d909      	bls.n	1c10 <_free_r+0x44>
    1bfc:	6821      	ldr	r1, [r4, #0]
    1bfe:	1860      	adds	r0, r4, r1
    1c00:	4283      	cmp	r3, r0
    1c02:	d1f3      	bne.n	1bec <_free_r+0x20>
    1c04:	6818      	ldr	r0, [r3, #0]
    1c06:	685b      	ldr	r3, [r3, #4]
    1c08:	1841      	adds	r1, r0, r1
    1c0a:	6021      	str	r1, [r4, #0]
    1c0c:	e7ee      	b.n	1bec <_free_r+0x20>
    1c0e:	0013      	movs	r3, r2
    1c10:	685a      	ldr	r2, [r3, #4]
    1c12:	2a00      	cmp	r2, #0
    1c14:	d001      	beq.n	1c1a <_free_r+0x4e>
    1c16:	42a2      	cmp	r2, r4
    1c18:	d9f9      	bls.n	1c0e <_free_r+0x42>
    1c1a:	6819      	ldr	r1, [r3, #0]
    1c1c:	1858      	adds	r0, r3, r1
    1c1e:	42a0      	cmp	r0, r4
    1c20:	d10b      	bne.n	1c3a <_free_r+0x6e>
    1c22:	6820      	ldr	r0, [r4, #0]
    1c24:	1809      	adds	r1, r1, r0
    1c26:	1858      	adds	r0, r3, r1
    1c28:	6019      	str	r1, [r3, #0]
    1c2a:	4282      	cmp	r2, r0
    1c2c:	d1e0      	bne.n	1bf0 <_free_r+0x24>
    1c2e:	6810      	ldr	r0, [r2, #0]
    1c30:	6852      	ldr	r2, [r2, #4]
    1c32:	1841      	adds	r1, r0, r1
    1c34:	6019      	str	r1, [r3, #0]
    1c36:	605a      	str	r2, [r3, #4]
    1c38:	e7da      	b.n	1bf0 <_free_r+0x24>
    1c3a:	42a0      	cmp	r0, r4
    1c3c:	d902      	bls.n	1c44 <_free_r+0x78>
    1c3e:	230c      	movs	r3, #12
    1c40:	602b      	str	r3, [r5, #0]
    1c42:	e7d5      	b.n	1bf0 <_free_r+0x24>
    1c44:	6821      	ldr	r1, [r4, #0]
    1c46:	1860      	adds	r0, r4, r1
    1c48:	4282      	cmp	r2, r0
    1c4a:	d103      	bne.n	1c54 <_free_r+0x88>
    1c4c:	6810      	ldr	r0, [r2, #0]
    1c4e:	6852      	ldr	r2, [r2, #4]
    1c50:	1841      	adds	r1, r0, r1
    1c52:	6021      	str	r1, [r4, #0]
    1c54:	6062      	str	r2, [r4, #4]
    1c56:	605c      	str	r4, [r3, #4]
    1c58:	e7ca      	b.n	1bf0 <_free_r+0x24>
    1c5a:	46c0      	nop			; (mov r8, r8)
    1c5c:	200000cc 	.word	0x200000cc

00001c60 <_malloc_r>:
    1c60:	2303      	movs	r3, #3
    1c62:	b570      	push	{r4, r5, r6, lr}
    1c64:	1ccd      	adds	r5, r1, #3
    1c66:	439d      	bics	r5, r3
    1c68:	3508      	adds	r5, #8
    1c6a:	0006      	movs	r6, r0
    1c6c:	2d0c      	cmp	r5, #12
    1c6e:	d21e      	bcs.n	1cae <_malloc_r+0x4e>
    1c70:	250c      	movs	r5, #12
    1c72:	42a9      	cmp	r1, r5
    1c74:	d81d      	bhi.n	1cb2 <_malloc_r+0x52>
    1c76:	0030      	movs	r0, r6
    1c78:	f000 f8fa 	bl	1e70 <__malloc_lock>
    1c7c:	4a25      	ldr	r2, [pc, #148]	; (1d14 <_malloc_r+0xb4>)
    1c7e:	6814      	ldr	r4, [r2, #0]
    1c80:	0021      	movs	r1, r4
    1c82:	2900      	cmp	r1, #0
    1c84:	d119      	bne.n	1cba <_malloc_r+0x5a>
    1c86:	4c24      	ldr	r4, [pc, #144]	; (1d18 <_malloc_r+0xb8>)
    1c88:	6823      	ldr	r3, [r4, #0]
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	d103      	bne.n	1c96 <_malloc_r+0x36>
    1c8e:	0030      	movs	r0, r6
    1c90:	f000 f844 	bl	1d1c <_sbrk_r>
    1c94:	6020      	str	r0, [r4, #0]
    1c96:	0029      	movs	r1, r5
    1c98:	0030      	movs	r0, r6
    1c9a:	f000 f83f 	bl	1d1c <_sbrk_r>
    1c9e:	1c43      	adds	r3, r0, #1
    1ca0:	d12c      	bne.n	1cfc <_malloc_r+0x9c>
    1ca2:	230c      	movs	r3, #12
    1ca4:	0030      	movs	r0, r6
    1ca6:	6033      	str	r3, [r6, #0]
    1ca8:	f000 f8e3 	bl	1e72 <__malloc_unlock>
    1cac:	e003      	b.n	1cb6 <_malloc_r+0x56>
    1cae:	2d00      	cmp	r5, #0
    1cb0:	dadf      	bge.n	1c72 <_malloc_r+0x12>
    1cb2:	230c      	movs	r3, #12
    1cb4:	6033      	str	r3, [r6, #0]
    1cb6:	2000      	movs	r0, #0
    1cb8:	bd70      	pop	{r4, r5, r6, pc}
    1cba:	680b      	ldr	r3, [r1, #0]
    1cbc:	1b5b      	subs	r3, r3, r5
    1cbe:	d41a      	bmi.n	1cf6 <_malloc_r+0x96>
    1cc0:	2b0b      	cmp	r3, #11
    1cc2:	d903      	bls.n	1ccc <_malloc_r+0x6c>
    1cc4:	600b      	str	r3, [r1, #0]
    1cc6:	18cc      	adds	r4, r1, r3
    1cc8:	6025      	str	r5, [r4, #0]
    1cca:	e003      	b.n	1cd4 <_malloc_r+0x74>
    1ccc:	428c      	cmp	r4, r1
    1cce:	d10e      	bne.n	1cee <_malloc_r+0x8e>
    1cd0:	6863      	ldr	r3, [r4, #4]
    1cd2:	6013      	str	r3, [r2, #0]
    1cd4:	0030      	movs	r0, r6
    1cd6:	f000 f8cc 	bl	1e72 <__malloc_unlock>
    1cda:	0020      	movs	r0, r4
    1cdc:	2207      	movs	r2, #7
    1cde:	300b      	adds	r0, #11
    1ce0:	1d23      	adds	r3, r4, #4
    1ce2:	4390      	bics	r0, r2
    1ce4:	1ac3      	subs	r3, r0, r3
    1ce6:	d0e7      	beq.n	1cb8 <_malloc_r+0x58>
    1ce8:	425a      	negs	r2, r3
    1cea:	50e2      	str	r2, [r4, r3]
    1cec:	e7e4      	b.n	1cb8 <_malloc_r+0x58>
    1cee:	684b      	ldr	r3, [r1, #4]
    1cf0:	6063      	str	r3, [r4, #4]
    1cf2:	000c      	movs	r4, r1
    1cf4:	e7ee      	b.n	1cd4 <_malloc_r+0x74>
    1cf6:	000c      	movs	r4, r1
    1cf8:	6849      	ldr	r1, [r1, #4]
    1cfa:	e7c2      	b.n	1c82 <_malloc_r+0x22>
    1cfc:	2303      	movs	r3, #3
    1cfe:	1cc4      	adds	r4, r0, #3
    1d00:	439c      	bics	r4, r3
    1d02:	42a0      	cmp	r0, r4
    1d04:	d0e0      	beq.n	1cc8 <_malloc_r+0x68>
    1d06:	1a21      	subs	r1, r4, r0
    1d08:	0030      	movs	r0, r6
    1d0a:	f000 f807 	bl	1d1c <_sbrk_r>
    1d0e:	1c43      	adds	r3, r0, #1
    1d10:	d1da      	bne.n	1cc8 <_malloc_r+0x68>
    1d12:	e7c6      	b.n	1ca2 <_malloc_r+0x42>
    1d14:	200000cc 	.word	0x200000cc
    1d18:	200000d0 	.word	0x200000d0

00001d1c <_sbrk_r>:
    1d1c:	2300      	movs	r3, #0
    1d1e:	b570      	push	{r4, r5, r6, lr}
    1d20:	4c06      	ldr	r4, [pc, #24]	; (1d3c <_sbrk_r+0x20>)
    1d22:	0005      	movs	r5, r0
    1d24:	0008      	movs	r0, r1
    1d26:	6023      	str	r3, [r4, #0]
    1d28:	f7ff fbc4 	bl	14b4 <_sbrk>
    1d2c:	1c43      	adds	r3, r0, #1
    1d2e:	d103      	bne.n	1d38 <_sbrk_r+0x1c>
    1d30:	6823      	ldr	r3, [r4, #0]
    1d32:	2b00      	cmp	r3, #0
    1d34:	d000      	beq.n	1d38 <_sbrk_r+0x1c>
    1d36:	602b      	str	r3, [r5, #0]
    1d38:	bd70      	pop	{r4, r5, r6, pc}
    1d3a:	46c0      	nop			; (mov r8, r8)
    1d3c:	20000138 	.word	0x20000138

00001d40 <__sread>:
    1d40:	b570      	push	{r4, r5, r6, lr}
    1d42:	000c      	movs	r4, r1
    1d44:	250e      	movs	r5, #14
    1d46:	5f49      	ldrsh	r1, [r1, r5]
    1d48:	f000 f894 	bl	1e74 <_read_r>
    1d4c:	2800      	cmp	r0, #0
    1d4e:	db03      	blt.n	1d58 <__sread+0x18>
    1d50:	6d63      	ldr	r3, [r4, #84]	; 0x54
    1d52:	181b      	adds	r3, r3, r0
    1d54:	6563      	str	r3, [r4, #84]	; 0x54
    1d56:	bd70      	pop	{r4, r5, r6, pc}
    1d58:	89a3      	ldrh	r3, [r4, #12]
    1d5a:	4a02      	ldr	r2, [pc, #8]	; (1d64 <__sread+0x24>)
    1d5c:	4013      	ands	r3, r2
    1d5e:	81a3      	strh	r3, [r4, #12]
    1d60:	e7f9      	b.n	1d56 <__sread+0x16>
    1d62:	46c0      	nop			; (mov r8, r8)
    1d64:	ffffefff 	.word	0xffffefff

00001d68 <__swrite>:
    1d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d6a:	001f      	movs	r7, r3
    1d6c:	898b      	ldrh	r3, [r1, #12]
    1d6e:	0005      	movs	r5, r0
    1d70:	000c      	movs	r4, r1
    1d72:	0016      	movs	r6, r2
    1d74:	05db      	lsls	r3, r3, #23
    1d76:	d505      	bpl.n	1d84 <__swrite+0x1c>
    1d78:	230e      	movs	r3, #14
    1d7a:	5ec9      	ldrsh	r1, [r1, r3]
    1d7c:	2200      	movs	r2, #0
    1d7e:	2302      	movs	r3, #2
    1d80:	f000 f862 	bl	1e48 <_lseek_r>
    1d84:	89a3      	ldrh	r3, [r4, #12]
    1d86:	4a05      	ldr	r2, [pc, #20]	; (1d9c <__swrite+0x34>)
    1d88:	0028      	movs	r0, r5
    1d8a:	4013      	ands	r3, r2
    1d8c:	81a3      	strh	r3, [r4, #12]
    1d8e:	0032      	movs	r2, r6
    1d90:	230e      	movs	r3, #14
    1d92:	5ee1      	ldrsh	r1, [r4, r3]
    1d94:	003b      	movs	r3, r7
    1d96:	f000 f81f 	bl	1dd8 <_write_r>
    1d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d9c:	ffffefff 	.word	0xffffefff

00001da0 <__sseek>:
    1da0:	b570      	push	{r4, r5, r6, lr}
    1da2:	000c      	movs	r4, r1
    1da4:	250e      	movs	r5, #14
    1da6:	5f49      	ldrsh	r1, [r1, r5]
    1da8:	f000 f84e 	bl	1e48 <_lseek_r>
    1dac:	89a3      	ldrh	r3, [r4, #12]
    1dae:	1c42      	adds	r2, r0, #1
    1db0:	d103      	bne.n	1dba <__sseek+0x1a>
    1db2:	4a05      	ldr	r2, [pc, #20]	; (1dc8 <__sseek+0x28>)
    1db4:	4013      	ands	r3, r2
    1db6:	81a3      	strh	r3, [r4, #12]
    1db8:	bd70      	pop	{r4, r5, r6, pc}
    1dba:	2280      	movs	r2, #128	; 0x80
    1dbc:	0152      	lsls	r2, r2, #5
    1dbe:	4313      	orrs	r3, r2
    1dc0:	81a3      	strh	r3, [r4, #12]
    1dc2:	6560      	str	r0, [r4, #84]	; 0x54
    1dc4:	e7f8      	b.n	1db8 <__sseek+0x18>
    1dc6:	46c0      	nop			; (mov r8, r8)
    1dc8:	ffffefff 	.word	0xffffefff

00001dcc <__sclose>:
    1dcc:	b510      	push	{r4, lr}
    1dce:	230e      	movs	r3, #14
    1dd0:	5ec9      	ldrsh	r1, [r1, r3]
    1dd2:	f000 f815 	bl	1e00 <_close_r>
    1dd6:	bd10      	pop	{r4, pc}

00001dd8 <_write_r>:
    1dd8:	b570      	push	{r4, r5, r6, lr}
    1dda:	0005      	movs	r5, r0
    1ddc:	0008      	movs	r0, r1
    1dde:	0011      	movs	r1, r2
    1de0:	2200      	movs	r2, #0
    1de2:	4c06      	ldr	r4, [pc, #24]	; (1dfc <_write_r+0x24>)
    1de4:	6022      	str	r2, [r4, #0]
    1de6:	001a      	movs	r2, r3
    1de8:	f7fe fb70 	bl	4cc <_write>
    1dec:	1c43      	adds	r3, r0, #1
    1dee:	d103      	bne.n	1df8 <_write_r+0x20>
    1df0:	6823      	ldr	r3, [r4, #0]
    1df2:	2b00      	cmp	r3, #0
    1df4:	d000      	beq.n	1df8 <_write_r+0x20>
    1df6:	602b      	str	r3, [r5, #0]
    1df8:	bd70      	pop	{r4, r5, r6, pc}
    1dfa:	46c0      	nop			; (mov r8, r8)
    1dfc:	20000138 	.word	0x20000138

00001e00 <_close_r>:
    1e00:	2300      	movs	r3, #0
    1e02:	b570      	push	{r4, r5, r6, lr}
    1e04:	4c06      	ldr	r4, [pc, #24]	; (1e20 <_close_r+0x20>)
    1e06:	0005      	movs	r5, r0
    1e08:	0008      	movs	r0, r1
    1e0a:	6023      	str	r3, [r4, #0]
    1e0c:	f7ff fb64 	bl	14d8 <_close>
    1e10:	1c43      	adds	r3, r0, #1
    1e12:	d103      	bne.n	1e1c <_close_r+0x1c>
    1e14:	6823      	ldr	r3, [r4, #0]
    1e16:	2b00      	cmp	r3, #0
    1e18:	d000      	beq.n	1e1c <_close_r+0x1c>
    1e1a:	602b      	str	r3, [r5, #0]
    1e1c:	bd70      	pop	{r4, r5, r6, pc}
    1e1e:	46c0      	nop			; (mov r8, r8)
    1e20:	20000138 	.word	0x20000138

00001e24 <_fstat_r>:
    1e24:	2300      	movs	r3, #0
    1e26:	b570      	push	{r4, r5, r6, lr}
    1e28:	4c06      	ldr	r4, [pc, #24]	; (1e44 <_fstat_r+0x20>)
    1e2a:	0005      	movs	r5, r0
    1e2c:	0008      	movs	r0, r1
    1e2e:	0011      	movs	r1, r2
    1e30:	6023      	str	r3, [r4, #0]
    1e32:	f7ff fb54 	bl	14de <_fstat>
    1e36:	1c43      	adds	r3, r0, #1
    1e38:	d103      	bne.n	1e42 <_fstat_r+0x1e>
    1e3a:	6823      	ldr	r3, [r4, #0]
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	d000      	beq.n	1e42 <_fstat_r+0x1e>
    1e40:	602b      	str	r3, [r5, #0]
    1e42:	bd70      	pop	{r4, r5, r6, pc}
    1e44:	20000138 	.word	0x20000138

00001e48 <_lseek_r>:
    1e48:	b570      	push	{r4, r5, r6, lr}
    1e4a:	0005      	movs	r5, r0
    1e4c:	0008      	movs	r0, r1
    1e4e:	0011      	movs	r1, r2
    1e50:	2200      	movs	r2, #0
    1e52:	4c06      	ldr	r4, [pc, #24]	; (1e6c <_lseek_r+0x24>)
    1e54:	6022      	str	r2, [r4, #0]
    1e56:	001a      	movs	r2, r3
    1e58:	f7ff fb46 	bl	14e8 <_lseek>
    1e5c:	1c43      	adds	r3, r0, #1
    1e5e:	d103      	bne.n	1e68 <_lseek_r+0x20>
    1e60:	6823      	ldr	r3, [r4, #0]
    1e62:	2b00      	cmp	r3, #0
    1e64:	d000      	beq.n	1e68 <_lseek_r+0x20>
    1e66:	602b      	str	r3, [r5, #0]
    1e68:	bd70      	pop	{r4, r5, r6, pc}
    1e6a:	46c0      	nop			; (mov r8, r8)
    1e6c:	20000138 	.word	0x20000138

00001e70 <__malloc_lock>:
    1e70:	4770      	bx	lr

00001e72 <__malloc_unlock>:
    1e72:	4770      	bx	lr

00001e74 <_read_r>:
    1e74:	b570      	push	{r4, r5, r6, lr}
    1e76:	0005      	movs	r5, r0
    1e78:	0008      	movs	r0, r1
    1e7a:	0011      	movs	r1, r2
    1e7c:	2200      	movs	r2, #0
    1e7e:	4c06      	ldr	r4, [pc, #24]	; (1e98 <_read_r+0x24>)
    1e80:	6022      	str	r2, [r4, #0]
    1e82:	001a      	movs	r2, r3
    1e84:	f7fe fb00 	bl	488 <_read>
    1e88:	1c43      	adds	r3, r0, #1
    1e8a:	d103      	bne.n	1e94 <_read_r+0x20>
    1e8c:	6823      	ldr	r3, [r4, #0]
    1e8e:	2b00      	cmp	r3, #0
    1e90:	d000      	beq.n	1e94 <_read_r+0x20>
    1e92:	602b      	str	r3, [r5, #0]
    1e94:	bd70      	pop	{r4, r5, r6, pc}
    1e96:	46c0      	nop			; (mov r8, r8)
    1e98:	20000138 	.word	0x20000138
    1e9c:	42000800 	.word	0x42000800
    1ea0:	42000c00 	.word	0x42000c00
    1ea4:	42001000 	.word	0x42001000
    1ea8:	42001400 	.word	0x42001400
    1eac:	42001800 	.word	0x42001800
    1eb0:	42001c00 	.word	0x42001c00

00001eb4 <_tcc_intflag>:
    1eb4:	00000001 00000002 00000004 00000008     ................
    1ec4:	00001000 00002000 00004000 00008000     ..... ...@......
    1ed4:	00010000 00020000 00040000 00080000     ................
    1ee4:	00000e42 00000e3e 00000e3e 00000ea0     B...>...>.......
    1ef4:	00000ea0 00000e56 00000e48 00000e5c     ....V...H...\...
    1f04:	00000e8e 00000f28 00000f08 00000f08     ....(...........
    1f14:	00000f94 00000f1a 00000f36 00000f0c     ........6.......
    1f24:	00000f44 00000f84                       D.......

00001f2c <_global_impure_ptr>:
    1f2c:	20000010                                ... 

00001f30 <__sf_fake_stderr>:
	...

00001f50 <__sf_fake_stdin>:
	...

00001f70 <__sf_fake_stdout>:
	...

00001f90 <_init>:
    1f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f92:	46c0      	nop			; (mov r8, r8)
    1f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f96:	bc08      	pop	{r3}
    1f98:	469e      	mov	lr, r3
    1f9a:	4770      	bx	lr

00001f9c <__init_array_start>:
    1f9c:	000000dd 	.word	0x000000dd

00001fa0 <_fini>:
    1fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fa2:	46c0      	nop			; (mov r8, r8)
    1fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1fa6:	bc08      	pop	{r3}
    1fa8:	469e      	mov	lr, r3
    1faa:	4770      	bx	lr

00001fac <__fini_array_start>:
    1fac:	000000b5 	.word	0x000000b5
