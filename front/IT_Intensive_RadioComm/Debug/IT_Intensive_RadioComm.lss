
IT_Intensive_RadioComm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000092e8  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001dc  20000000  000092e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000008e0  200001dc  000094c4  000201dc  2**2
                  ALLOC
  3 .stack        00002004  20000abc  00009da4  000201dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  5 .comment      0000008c  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005d9b9  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000086a4  00000000  00000000  0007dc49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e8cf  00000000  00000000  000862ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c28  00000000  00000000  00094bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001410  00000000  00000000  000957e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000226ac  00000000  00000000  00096bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001ce99  00000000  00000000  000b92a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a49a  00000000  00000000  000d6139  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002e30  00000000  00000000  001605d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 2a 00 20 d1 24 00 00 cd 24 00 00 cd 24 00 00     .*. .$...$...$..
	...
      2c:	cd 24 00 00 00 00 00 00 00 00 00 00 cd 24 00 00     .$...........$..
      3c:	cd 24 00 00 cd 24 00 00 cd 24 00 00 cd 24 00 00     .$...$...$...$..
      4c:	cd 24 00 00 d5 07 00 00 cd 24 00 00 cd 24 00 00     .$.......$...$..
      5c:	cd 24 00 00 cd 24 00 00 c1 0d 00 00 d1 0d 00 00     .$...$..........
      6c:	e1 0d 00 00 f1 0d 00 00 01 0e 00 00 11 0e 00 00     ................
      7c:	8d 03 00 00 9d 03 00 00 ad 03 00 00 ad 21 00 00     .............!..
      8c:	bd 21 00 00 cd 21 00 00 00 00 00 00 00 00 00 00     .!...!..........
      9c:	cd 24 00 00 cd 24 00 00 00 00 00 00 cd 24 00 00     .$...$.......$..
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001dc 	.word	0x200001dc
      d4:	00000000 	.word	0x00000000
      d8:	000092e8 	.word	0x000092e8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001e0 	.word	0x200001e0
     108:	000092e8 	.word	0x000092e8
     10c:	000092e8 	.word	0x000092e8
     110:	00000000 	.word	0x00000000

00000114 <artist_ultrasonic_configure>:
 */
#include "TheArtist.h"
#include "UltraSonic.h"

void artist_ultrasonic_configure (struct artist_ultrasonic_module * module, uint8_t echo, uint8_t trig) {
	module->echo_pin	= echo; 
     114:	7001      	strb	r1, [r0, #0]
	module->trigger_pin = trig;  
     116:	7042      	strb	r2, [r0, #1]
	module->filter_large_change_counts = 0; 
     118:	2300      	movs	r3, #0
     11a:	7083      	strb	r3, [r0, #2]
}
     11c:	4770      	bx	lr
	...

00000120 <artist_ultrasonic_gpio_init>:

void artist_ultrasonic_gpio_init() {
     120:	b5f0      	push	{r4, r5, r6, r7, lr}
     122:	b085      	sub	sp, #20
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     124:	a903      	add	r1, sp, #12
     126:	2201      	movs	r2, #1
     128:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     12a:	2300      	movs	r3, #0
     12c:	708b      	strb	r3, [r1, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     12e:	ad02      	add	r5, sp, #8
     130:	702b      	strb	r3, [r5, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     132:	706a      	strb	r2, [r5, #1]
	config->powersave  = false;
     134:	70ab      	strb	r3, [r5, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     136:	4668      	mov	r0, sp
     138:	7003      	strb	r3, [r0, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     13a:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
     13c:	7083      	strb	r3, [r0, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     13e:	ac01      	add	r4, sp, #4
     140:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     142:	7062      	strb	r2, [r4, #1]
	config->powersave  = false;
     144:	70a3      	strb	r3, [r4, #2]
	port_get_config_defaults(&pin_config_trig);
	port_get_config_defaults(&pin_config_echo_center);
	port_get_config_defaults(&pin_config_echo_right);
	port_get_config_defaults(&pin_config_echo_left);

	pin_config_trig.direction			=	PORT_PIN_DIR_OUTPUT;
     146:	700a      	strb	r2, [r1, #0]
	
	pin_config_echo_right.direction		=	PORT_PIN_DIR_INPUT;
	pin_config_echo_right.input_pull	=	PORT_PIN_PULL_UP;
	
	
	port_pin_set_config(artist_front.us_instance_center.trigger_pin, &pin_config_trig);
     148:	4f09      	ldr	r7, [pc, #36]	; (170 <artist_ultrasonic_gpio_init+0x50>)
     14a:	3397      	adds	r3, #151	; 0x97
     14c:	5cf8      	ldrb	r0, [r7, r3]
     14e:	4e09      	ldr	r6, [pc, #36]	; (174 <artist_ultrasonic_gpio_init+0x54>)
     150:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_center.echo_pin, &pin_config_echo_center);
     152:	2396      	movs	r3, #150	; 0x96
     154:	5cf8      	ldrb	r0, [r7, r3]
     156:	0029      	movs	r1, r5
     158:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_left.echo_pin, &pin_config_echo_left);
     15a:	239c      	movs	r3, #156	; 0x9c
     15c:	5cf8      	ldrb	r0, [r7, r3]
     15e:	0021      	movs	r1, r4
     160:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_right.echo_pin, &pin_config_echo_right); 
     162:	23a2      	movs	r3, #162	; 0xa2
     164:	5cf8      	ldrb	r0, [r7, r3]
     166:	4669      	mov	r1, sp
     168:	47b0      	blx	r6
}
     16a:	b005      	add	sp, #20
     16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     16e:	46c0      	nop			; (mov r8, r8)
     170:	20000884 	.word	0x20000884
     174:	00000939 	.word	0x00000939

00000178 <artist_ultrasonic_get_value>:
	else if (FILTER_VAL < 0)	FILTER_VAL = 0;

	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
}

float artist_ultrasonic_get_value(struct artist_ultrasonic_module * const module) {
     178:	b5f0      	push	{r4, r5, r6, r7, lr}
     17a:	b083      	sub	sp, #12
     17c:	0004      	movs	r4, r0
	// TODO : use timer callback function!
	uint16_t start, end;
	port_pin_set_output_level(module->trigger_pin, false);
     17e:	7842      	ldrb	r2, [r0, #1]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     180:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     182:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     184:	2900      	cmp	r1, #0
     186:	d104      	bne.n	192 <artist_ultrasonic_get_value+0x1a>
		return &(ports[port_index]->Group[group_index]);
     188:	0953      	lsrs	r3, r2, #5
     18a:	01db      	lsls	r3, r3, #7
     18c:	4959      	ldr	r1, [pc, #356]	; (2f4 <artist_ultrasonic_get_value+0x17c>)
     18e:	468c      	mov	ip, r1
     190:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     192:	211f      	movs	r1, #31
     194:	4011      	ands	r1, r2
     196:	2201      	movs	r2, #1
     198:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     19a:	615a      	str	r2, [r3, #20]
	delay_us(50);
     19c:	2032      	movs	r0, #50	; 0x32
     19e:	4b56      	ldr	r3, [pc, #344]	; (2f8 <artist_ultrasonic_get_value+0x180>)
     1a0:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, true);
     1a2:	7862      	ldrb	r2, [r4, #1]
	if (port_index < PORT_INST_NUM) {
     1a4:	09d1      	lsrs	r1, r2, #7
		return NULL;
     1a6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     1a8:	2900      	cmp	r1, #0
     1aa:	d104      	bne.n	1b6 <artist_ultrasonic_get_value+0x3e>
		return &(ports[port_index]->Group[group_index]);
     1ac:	0953      	lsrs	r3, r2, #5
     1ae:	01db      	lsls	r3, r3, #7
     1b0:	4950      	ldr	r1, [pc, #320]	; (2f4 <artist_ultrasonic_get_value+0x17c>)
     1b2:	468c      	mov	ip, r1
     1b4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1b6:	211f      	movs	r1, #31
     1b8:	4011      	ands	r1, r2
     1ba:	2201      	movs	r2, #1
     1bc:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     1be:	619a      	str	r2, [r3, #24]
	delay_us(10);
     1c0:	200a      	movs	r0, #10
     1c2:	4b4d      	ldr	r3, [pc, #308]	; (2f8 <artist_ultrasonic_get_value+0x180>)
     1c4:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, false);
     1c6:	7862      	ldrb	r2, [r4, #1]
	if (port_index < PORT_INST_NUM) {
     1c8:	09d1      	lsrs	r1, r2, #7
		return NULL;
     1ca:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     1cc:	2900      	cmp	r1, #0
     1ce:	d104      	bne.n	1da <artist_ultrasonic_get_value+0x62>
		return &(ports[port_index]->Group[group_index]);
     1d0:	0953      	lsrs	r3, r2, #5
     1d2:	01db      	lsls	r3, r3, #7
     1d4:	4947      	ldr	r1, [pc, #284]	; (2f4 <artist_ultrasonic_get_value+0x17c>)
     1d6:	468c      	mov	ip, r1
     1d8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1da:	211f      	movs	r1, #31
     1dc:	4011      	ands	r1, r2
     1de:	2201      	movs	r2, #1
     1e0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     1e2:	615a      	str	r2, [r3, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     1e4:	4b45      	ldr	r3, [pc, #276]	; (2fc <artist_ultrasonic_get_value+0x184>)
     1e6:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     1e8:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     1ea:	b25b      	sxtb	r3, r3
     1ec:	2b00      	cmp	r3, #0
     1ee:	dbfb      	blt.n	1e8 <artist_ultrasonic_get_value+0x70>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
     1f0:	2300      	movs	r3, #0
     1f2:	7113      	strb	r3, [r2, #4]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     1f4:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     1f6:	b25b      	sxtb	r3, r3
     1f8:	2b00      	cmp	r3, #0
     1fa:	dbfb      	blt.n	1f4 <artist_ultrasonic_get_value+0x7c>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
     1fc:	2340      	movs	r3, #64	; 0x40
     1fe:	7153      	strb	r3, [r2, #5]
	tc_start_counter(&(artist_front.tc_instance)); 
	while (!(port_pin_get_input_level(module->echo_pin)));
     200:	7823      	ldrb	r3, [r4, #0]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     202:	221f      	movs	r2, #31
     204:	401a      	ands	r2, r3
     206:	2101      	movs	r1, #1
     208:	4091      	lsls	r1, r2
     20a:	09d8      	lsrs	r0, r3, #7
     20c:	2200      	movs	r2, #0
     20e:	2800      	cmp	r0, #0
     210:	d104      	bne.n	21c <artist_ultrasonic_get_value+0xa4>
     212:	095a      	lsrs	r2, r3, #5
     214:	01d2      	lsls	r2, r2, #7
     216:	4b37      	ldr	r3, [pc, #220]	; (2f4 <artist_ultrasonic_get_value+0x17c>)
     218:	469c      	mov	ip, r3
     21a:	4462      	add	r2, ip
	return (port_base->IN.reg & pin_mask);
     21c:	6a13      	ldr	r3, [r2, #32]
     21e:	420b      	tst	r3, r1
     220:	d0fc      	beq.n	21c <artist_ultrasonic_get_value+0xa4>
	start = tc_get_count_value(&(artist_front.tc_instance));
     222:	4836      	ldr	r0, [pc, #216]	; (2fc <artist_ultrasonic_get_value+0x184>)
     224:	4b36      	ldr	r3, [pc, #216]	; (300 <artist_ultrasonic_get_value+0x188>)
     226:	4798      	blx	r3
     228:	0005      	movs	r5, r0
	while ((port_pin_get_input_level(module->echo_pin)));
     22a:	7823      	ldrb	r3, [r4, #0]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     22c:	221f      	movs	r2, #31
     22e:	401a      	ands	r2, r3
     230:	2101      	movs	r1, #1
     232:	4091      	lsls	r1, r2
     234:	09d8      	lsrs	r0, r3, #7
     236:	2200      	movs	r2, #0
     238:	2800      	cmp	r0, #0
     23a:	d104      	bne.n	246 <artist_ultrasonic_get_value+0xce>
     23c:	095a      	lsrs	r2, r3, #5
     23e:	01d2      	lsls	r2, r2, #7
     240:	4b2c      	ldr	r3, [pc, #176]	; (2f4 <artist_ultrasonic_get_value+0x17c>)
     242:	469c      	mov	ip, r3
     244:	4462      	add	r2, ip
	return (port_base->IN.reg & pin_mask);
     246:	6a13      	ldr	r3, [r2, #32]
     248:	420b      	tst	r3, r1
     24a:	d1fc      	bne.n	246 <artist_ultrasonic_get_value+0xce>
	end = tc_get_count_value(&(artist_front.tc_instance));
     24c:	4e2b      	ldr	r6, [pc, #172]	; (2fc <artist_ultrasonic_get_value+0x184>)
     24e:	0030      	movs	r0, r6
     250:	4b2b      	ldr	r3, [pc, #172]	; (300 <artist_ultrasonic_get_value+0x188>)
     252:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     254:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     256:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     258:	b25b      	sxtb	r3, r3
     25a:	2b00      	cmp	r3, #0
     25c:	dbfb      	blt.n	256 <artist_ultrasonic_get_value+0xde>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
     25e:	2380      	movs	r3, #128	; 0x80
     260:	7153      	strb	r3, [r2, #5]
	tc_stop_counter(&(artist_front.tc_instance));

	float new = ((float)(end - start)) * 0.017;
     262:	0400      	lsls	r0, r0, #16
     264:	0c00      	lsrs	r0, r0, #16
     266:	042d      	lsls	r5, r5, #16
     268:	0c2d      	lsrs	r5, r5, #16
     26a:	1b40      	subs	r0, r0, r5
     26c:	4f25      	ldr	r7, [pc, #148]	; (304 <artist_ultrasonic_get_value+0x18c>)
     26e:	47b8      	blx	r7
     270:	4b25      	ldr	r3, [pc, #148]	; (308 <artist_ultrasonic_get_value+0x190>)
     272:	4798      	blx	r3
     274:	4a25      	ldr	r2, [pc, #148]	; (30c <artist_ultrasonic_get_value+0x194>)
     276:	4b26      	ldr	r3, [pc, #152]	; (310 <artist_ultrasonic_get_value+0x198>)
     278:	4d26      	ldr	r5, [pc, #152]	; (314 <artist_ultrasonic_get_value+0x19c>)
     27a:	47a8      	blx	r5
     27c:	4b26      	ldr	r3, [pc, #152]	; (318 <artist_ultrasonic_get_value+0x1a0>)
     27e:	4798      	blx	r3
     280:	1c06      	adds	r6, r0, #0
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     282:	88a0      	ldrh	r0, [r4, #4]
     284:	4b25      	ldr	r3, [pc, #148]	; (31c <artist_ultrasonic_get_value+0x1a4>)
     286:	4798      	blx	r3
     288:	9001      	str	r0, [sp, #4]
	if (new > old * module->filter_large_change_counts ||
     28a:	78a5      	ldrb	r5, [r4, #2]
     28c:	0028      	movs	r0, r5
     28e:	47b8      	blx	r7
     290:	1c07      	adds	r7, r0, #0
     292:	1c01      	adds	r1, r0, #0
     294:	9801      	ldr	r0, [sp, #4]
     296:	4b22      	ldr	r3, [pc, #136]	; (320 <artist_ultrasonic_get_value+0x1a8>)
     298:	4798      	blx	r3
     29a:	1c01      	adds	r1, r0, #0
     29c:	1c30      	adds	r0, r6, #0
     29e:	4b21      	ldr	r3, [pc, #132]	; (324 <artist_ultrasonic_get_value+0x1ac>)
     2a0:	4798      	blx	r3
     2a2:	2800      	cmp	r0, #0
     2a4:	d109      	bne.n	2ba <artist_ultrasonic_get_value+0x142>
	new < old * 1/module->filter_large_change_counts ) {
     2a6:	1c39      	adds	r1, r7, #0
     2a8:	9801      	ldr	r0, [sp, #4]
     2aa:	4b1f      	ldr	r3, [pc, #124]	; (328 <artist_ultrasonic_get_value+0x1b0>)
     2ac:	4798      	blx	r3
     2ae:	1c01      	adds	r1, r0, #0
	if (new > old * module->filter_large_change_counts ||
     2b0:	1c30      	adds	r0, r6, #0
     2b2:	4b1e      	ldr	r3, [pc, #120]	; (32c <artist_ultrasonic_get_value+0x1b4>)
     2b4:	4798      	blx	r3
     2b6:	2800      	cmp	r0, #0
     2b8:	d005      	beq.n	2c6 <artist_ultrasonic_get_value+0x14e>
		module->filter_large_change_counts ++;
     2ba:	1c6b      	adds	r3, r5, #1
     2bc:	b2db      	uxtb	r3, r3
		if (module->filter_large_change_counts > 3)		
     2be:	2b03      	cmp	r3, #3
     2c0:	d815      	bhi.n	2ee <artist_ultrasonic_get_value+0x176>
		module->filter_large_change_counts ++;
     2c2:	70a3      	strb	r3, [r4, #2]
			new = old;
     2c4:	9e01      	ldr	r6, [sp, #4]
	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
     2c6:	4f16      	ldr	r7, [pc, #88]	; (320 <artist_ultrasonic_get_value+0x1a8>)
     2c8:	4919      	ldr	r1, [pc, #100]	; (330 <artist_ultrasonic_get_value+0x1b8>)
     2ca:	1c30      	adds	r0, r6, #0
     2cc:	47b8      	blx	r7
     2ce:	1c06      	adds	r6, r0, #0
     2d0:	4918      	ldr	r1, [pc, #96]	; (334 <artist_ultrasonic_get_value+0x1bc>)
     2d2:	9801      	ldr	r0, [sp, #4]
     2d4:	47b8      	blx	r7
     2d6:	1c01      	adds	r1, r0, #0
     2d8:	1c30      	adds	r0, r6, #0
     2da:	4b17      	ldr	r3, [pc, #92]	; (338 <artist_ultrasonic_get_value+0x1c0>)
     2dc:	4798      	blx	r3
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <artist_ultrasonic_get_value+0x1c4>)
     2e0:	4798      	blx	r3
     2e2:	b280      	uxth	r0, r0
     2e4:	80a0      	strh	r0, [r4, #4]
	return module->fliter_old_val;
     2e6:	4b0d      	ldr	r3, [pc, #52]	; (31c <artist_ultrasonic_get_value+0x1a4>)
     2e8:	4798      	blx	r3
}
     2ea:	b003      	add	sp, #12
     2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			module->filter_large_change_counts = 0;
     2ee:	2300      	movs	r3, #0
     2f0:	70a3      	strb	r3, [r4, #2]
     2f2:	e7e8      	b.n	2c6 <artist_ultrasonic_get_value+0x14e>
     2f4:	41004400 	.word	0x41004400
     2f8:	0000060d 	.word	0x0000060d
     2fc:	20000884 	.word	0x20000884
     300:	00002451 	.word	0x00002451
     304:	00006f79 	.word	0x00006f79
     308:	00008bf5 	.word	0x00008bf5
     30c:	b020c49c 	.word	0xb020c49c
     310:	3f916872 	.word	0x3f916872
     314:	00007f2d 	.word	0x00007f2d
     318:	00008c99 	.word	0x00008c99
     31c:	00007019 	.word	0x00007019
     320:	000069c1 	.word	0x000069c1
     324:	00006211 	.word	0x00006211
     328:	000065e1 	.word	0x000065e1
     32c:	000061e9 	.word	0x000061e9
     330:	3f2b851e 	.word	0x3f2b851e
     334:	3ea8f5c3 	.word	0x3ea8f5c3
     338:	000062bd 	.word	0x000062bd
     33c:	0000628d 	.word	0x0000628d

00000340 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     340:	b5f0      	push	{r4, r5, r6, r7, lr}
     342:	46c6      	mov	lr, r8
     344:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     346:	0080      	lsls	r0, r0, #2
     348:	4b0e      	ldr	r3, [pc, #56]	; (384 <_tcc_interrupt_handler+0x44>)
     34a:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     34c:	683b      	ldr	r3, [r7, #0]
     34e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     354:	4013      	ands	r3, r2
     356:	401e      	ands	r6, r3
     358:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     35a:	4b0b      	ldr	r3, [pc, #44]	; (388 <_tcc_interrupt_handler+0x48>)
     35c:	4698      	mov	r8, r3
     35e:	e002      	b.n	366 <_tcc_interrupt_handler+0x26>
     360:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     362:	2c30      	cmp	r4, #48	; 0x30
     364:	d00a      	beq.n	37c <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     366:	4643      	mov	r3, r8
     368:	58e5      	ldr	r5, [r4, r3]
     36a:	4235      	tst	r5, r6
     36c:	d0f8      	beq.n	360 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     36e:	193b      	adds	r3, r7, r4
     370:	685b      	ldr	r3, [r3, #4]
     372:	0038      	movs	r0, r7
     374:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     376:	683b      	ldr	r3, [r7, #0]
     378:	62dd      	str	r5, [r3, #44]	; 0x2c
     37a:	e7f1      	b.n	360 <_tcc_interrupt_handler+0x20>
		}
	}
}
     37c:	bc04      	pop	{r2}
     37e:	4690      	mov	r8, r2
     380:	bdf0      	pop	{r4, r5, r6, r7, pc}
     382:	46c0      	nop			; (mov r8, r8)
     384:	20000934 	.word	0x20000934
     388:	00008de8 	.word	0x00008de8

0000038c <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     38c:	b510      	push	{r4, lr}
     38e:	2000      	movs	r0, #0
     390:	4b01      	ldr	r3, [pc, #4]	; (398 <TCC0_Handler+0xc>)
     392:	4798      	blx	r3
     394:	bd10      	pop	{r4, pc}
     396:	46c0      	nop			; (mov r8, r8)
     398:	00000341 	.word	0x00000341

0000039c <TCC1_Handler>:
     39c:	b510      	push	{r4, lr}
     39e:	2001      	movs	r0, #1
     3a0:	4b01      	ldr	r3, [pc, #4]	; (3a8 <TCC1_Handler+0xc>)
     3a2:	4798      	blx	r3
     3a4:	bd10      	pop	{r4, pc}
     3a6:	46c0      	nop			; (mov r8, r8)
     3a8:	00000341 	.word	0x00000341

000003ac <TCC2_Handler>:
     3ac:	b510      	push	{r4, lr}
     3ae:	2002      	movs	r0, #2
     3b0:	4b01      	ldr	r3, [pc, #4]	; (3b8 <TCC2_Handler+0xc>)
     3b2:	4798      	blx	r3
     3b4:	bd10      	pop	{r4, pc}
     3b6:	46c0      	nop			; (mov r8, r8)
     3b8:	00000341 	.word	0x00000341

000003bc <usart_write_callback>:

}
void usart_write_callback(struct usart_module *const usart_module)
{
	//port_pin_toggle_output_level(LED_0_PIN);
}
     3bc:	4770      	bx	lr
	...

000003c0 <usart_read_callback>:
{
     3c0:	b510      	push	{r4, lr}
     3c2:	0004      	movs	r4, r0
	printf("Hello world!");
     3c4:	4804      	ldr	r0, [pc, #16]	; (3d8 <usart_read_callback+0x18>)
     3c6:	4b05      	ldr	r3, [pc, #20]	; (3dc <usart_read_callback+0x1c>)
     3c8:	4798      	blx	r3
	usart_read_buffer_job( usart_instance,
     3ca:	2205      	movs	r2, #5
     3cc:	4904      	ldr	r1, [pc, #16]	; (3e0 <usart_read_callback+0x20>)
     3ce:	0020      	movs	r0, r4
     3d0:	4b04      	ldr	r3, [pc, #16]	; (3e4 <usart_read_callback+0x24>)
     3d2:	4798      	blx	r3
}
     3d4:	bd10      	pop	{r4, pc}
     3d6:	46c0      	nop			; (mov r8, r8)
     3d8:	00008e18 	.word	0x00008e18
     3dc:	00003d91 	.word	0x00003d91
     3e0:	2000092c 	.word	0x2000092c
     3e4:	000016b5 	.word	0x000016b5

000003e8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     3e8:	b570      	push	{r4, r5, r6, lr}
     3ea:	b082      	sub	sp, #8
     3ec:	0005      	movs	r5, r0
     3ee:	000e      	movs	r6, r1
	uint16_t temp = 0;
     3f0:	2200      	movs	r2, #0
     3f2:	466b      	mov	r3, sp
     3f4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     3f6:	4c06      	ldr	r4, [pc, #24]	; (410 <usart_serial_getchar+0x28>)
     3f8:	466b      	mov	r3, sp
     3fa:	1d99      	adds	r1, r3, #6
     3fc:	0028      	movs	r0, r5
     3fe:	47a0      	blx	r4
     400:	2800      	cmp	r0, #0
     402:	d1f9      	bne.n	3f8 <usart_serial_getchar+0x10>

	*c = temp;
     404:	466b      	mov	r3, sp
     406:	3306      	adds	r3, #6
     408:	881b      	ldrh	r3, [r3, #0]
     40a:	7033      	strb	r3, [r6, #0]
}
     40c:	b002      	add	sp, #8
     40e:	bd70      	pop	{r4, r5, r6, pc}
     410:	00001545 	.word	0x00001545

00000414 <usart_serial_putchar>:
{
     414:	b570      	push	{r4, r5, r6, lr}
     416:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     418:	b28c      	uxth	r4, r1
     41a:	4e03      	ldr	r6, [pc, #12]	; (428 <usart_serial_putchar+0x14>)
     41c:	0021      	movs	r1, r4
     41e:	0028      	movs	r0, r5
     420:	47b0      	blx	r6
     422:	2800      	cmp	r0, #0
     424:	d1fa      	bne.n	41c <usart_serial_putchar+0x8>
}
     426:	bd70      	pop	{r4, r5, r6, pc}
     428:	00001519 	.word	0x00001519

0000042c <artist_tc_configure>:
void artist_tc_configure() {
     42c:	b510      	push	{r4, lr}
     42e:	b08e      	sub	sp, #56	; 0x38
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     430:	aa01      	add	r2, sp, #4
     432:	2300      	movs	r3, #0
     434:	2100      	movs	r1, #0
     436:	7093      	strb	r3, [r2, #2]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     438:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     43a:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     43c:	2000      	movs	r0, #0
     43e:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     440:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     442:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     444:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     446:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     448:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     44a:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     44c:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     44e:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     450:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     452:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
     454:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     456:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     458:	8593      	strh	r3, [r2, #44]	; 0x2c
	config.clock_source = GCLK_GENERATOR_3;
     45a:	3303      	adds	r3, #3
     45c:	7013      	strb	r3, [r2, #0]
	config.clock_prescaler = TC_CLOCK_PRESCALER_DIV8;
     45e:	23c0      	movs	r3, #192	; 0xc0
     460:	009b      	lsls	r3, r3, #2
     462:	8093      	strh	r3, [r2, #4]
	config.enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = true;
     464:	2301      	movs	r3, #1
     466:	72d3      	strb	r3, [r2, #11]
	tc_init(&(artist_front.tc_instance), TC3, &config);
     468:	4c07      	ldr	r4, [pc, #28]	; (488 <artist_tc_configure+0x5c>)
     46a:	4908      	ldr	r1, [pc, #32]	; (48c <artist_tc_configure+0x60>)
     46c:	0020      	movs	r0, r4
     46e:	4b08      	ldr	r3, [pc, #32]	; (490 <artist_tc_configure+0x64>)
     470:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     472:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     474:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     476:	b25b      	sxtb	r3, r3
     478:	2b00      	cmp	r3, #0
     47a:	dbfb      	blt.n	474 <artist_tc_configure+0x48>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     47c:	8813      	ldrh	r3, [r2, #0]
     47e:	2102      	movs	r1, #2
     480:	430b      	orrs	r3, r1
     482:	8013      	strh	r3, [r2, #0]
}
     484:	b00e      	add	sp, #56	; 0x38
     486:	bd10      	pop	{r4, pc}
     488:	20000884 	.word	0x20000884
     48c:	42002c00 	.word	0x42002c00
     490:	00002215 	.word	0x00002215

00000494 <configure_usart_callbacks>:


void configure_usart_callbacks(struct usart_module * usart_instance)
{
     494:	b570      	push	{r4, r5, r6, lr}
     496:	0004      	movs	r4, r0
	//! [setup_register_callbacks]
	usart_register_callback(usart_instance,
     498:	2200      	movs	r2, #0
     49a:	4906      	ldr	r1, [pc, #24]	; (4b4 <configure_usart_callbacks+0x20>)
     49c:	4d06      	ldr	r5, [pc, #24]	; (4b8 <configure_usart_callbacks+0x24>)
     49e:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	
	usart_register_callback(usart_instance,
     4a0:	2201      	movs	r2, #1
     4a2:	4906      	ldr	r1, [pc, #24]	; (4bc <configure_usart_callbacks+0x28>)
     4a4:	0020      	movs	r0, r4
     4a6:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     4a8:	2231      	movs	r2, #49	; 0x31
     4aa:	5ca3      	ldrb	r3, [r4, r2]
     4ac:	2103      	movs	r1, #3
     4ae:	430b      	orrs	r3, r1
     4b0:	54a3      	strb	r3, [r4, r2]

	//! [setup_enable_callbacks]
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
	//! [setup_enable_callbacks]
}
     4b2:	bd70      	pop	{r4, r5, r6, pc}
     4b4:	000003bd 	.word	0x000003bd
     4b8:	0000169d 	.word	0x0000169d
     4bc:	000003c1 	.word	0x000003c1

000004c0 <artist_usart_configure>:

void artist_usart_configure(struct usart_module * usart_instance) {
     4c0:	b570      	push	{r4, r5, r6, lr}
     4c2:	b090      	sub	sp, #64	; 0x40
     4c4:	0004      	movs	r4, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     4c6:	2380      	movs	r3, #128	; 0x80
     4c8:	05db      	lsls	r3, r3, #23
     4ca:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     4cc:	2300      	movs	r3, #0
     4ce:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     4d0:	22ff      	movs	r2, #255	; 0xff
     4d2:	4669      	mov	r1, sp
     4d4:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     4d6:	2200      	movs	r2, #0
     4d8:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     4da:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
     4dc:	2196      	movs	r1, #150	; 0x96
     4de:	0189      	lsls	r1, r1, #6
     4e0:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
     4e2:	2101      	movs	r1, #1
     4e4:	2024      	movs	r0, #36	; 0x24
     4e6:	466d      	mov	r5, sp
     4e8:	5429      	strb	r1, [r5, r0]
	config->transmitter_enable = true;
     4ea:	3001      	adds	r0, #1
     4ec:	5429      	strb	r1, [r5, r0]
	config->clock_polarity_inverted = false;
     4ee:	3125      	adds	r1, #37	; 0x25
     4f0:	546b      	strb	r3, [r5, r1]
	config->use_external_clock = false;
     4f2:	3101      	adds	r1, #1
     4f4:	546b      	strb	r3, [r5, r1]
	config->ext_clock_freq   = 0;
     4f6:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     4f8:	3105      	adds	r1, #5
     4fa:	546b      	strb	r3, [r5, r1]
	config->generator_source = GCLK_GENERATOR_0;
     4fc:	3101      	adds	r1, #1
     4fe:	546b      	strb	r3, [r5, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     500:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     502:	822b      	strh	r3, [r5, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     504:	76eb      	strb	r3, [r5, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     506:	762a      	strb	r2, [r5, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     508:	772a      	strb	r2, [r5, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     50a:	766a      	strb	r2, [r5, #25]
	config->receive_pulse_length                    = 19;
     50c:	2313      	movs	r3, #19
     50e:	76ab      	strb	r3, [r5, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     510:	776a      	strb	r2, [r5, #29]
	struct usart_config config;
	usart_get_config_defaults(&config);
	config.baudrate = CONF_ARTIST_BAUDRATE;
	config.mux_setting	= EDBG_CDC_SERCOM_MUX_SETTING;
     512:	2380      	movs	r3, #128	; 0x80
     514:	035b      	lsls	r3, r3, #13
     516:	9303      	str	r3, [sp, #12]
	config.pinmux_pad0	= EDBG_CDC_SERCOM_PINMUX_PAD0;
     518:	4b1e      	ldr	r3, [pc, #120]	; (594 <artist_usart_configure+0xd4>)
     51a:	930c      	str	r3, [sp, #48]	; 0x30
	config.pinmux_pad1	= EDBG_CDC_SERCOM_PINMUX_PAD1;
     51c:	4b1e      	ldr	r3, [pc, #120]	; (598 <artist_usart_configure+0xd8>)
     51e:	930d      	str	r3, [sp, #52]	; 0x34
	config.pinmux_pad2	= EDBG_CDC_SERCOM_PINMUX_PAD2;
     520:	2301      	movs	r3, #1
     522:	425b      	negs	r3, r3
     524:	930e      	str	r3, [sp, #56]	; 0x38
	config.pinmux_pad3	= EDBG_CDC_SERCOM_PINMUX_PAD3;
     526:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(usart_instance, EDBG_CDC_MODULE, &config) != STATUS_OK);
     528:	4e1c      	ldr	r6, [pc, #112]	; (59c <artist_usart_configure+0xdc>)
     52a:	4d1d      	ldr	r5, [pc, #116]	; (5a0 <artist_usart_configure+0xe0>)
     52c:	466a      	mov	r2, sp
     52e:	0031      	movs	r1, r6
     530:	0020      	movs	r0, r4
     532:	47a8      	blx	r5
     534:	2800      	cmp	r0, #0
     536:	d1f9      	bne.n	52c <artist_usart_configure+0x6c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     538:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     53a:	0028      	movs	r0, r5
     53c:	4b19      	ldr	r3, [pc, #100]	; (5a4 <artist_usart_configure+0xe4>)
     53e:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     540:	231f      	movs	r3, #31
     542:	4018      	ands	r0, r3
     544:	3b1e      	subs	r3, #30
     546:	4083      	lsls	r3, r0
     548:	4a17      	ldr	r2, [pc, #92]	; (5a8 <artist_usart_configure+0xe8>)
     54a:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     54c:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     54e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     550:	2b00      	cmp	r3, #0
     552:	d1fc      	bne.n	54e <artist_usart_configure+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     554:	682b      	ldr	r3, [r5, #0]
     556:	2202      	movs	r2, #2
     558:	4313      	orrs	r3, r2
     55a:	602b      	str	r3, [r5, #0]
	
	
	usart_enable(usart_instance);
	configure_usart_callbacks(usart_instance);
     55c:	0020      	movs	r0, r4
     55e:	4b13      	ldr	r3, [pc, #76]	; (5ac <artist_usart_configure+0xec>)
     560:	4798      	blx	r3
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     562:	4b13      	ldr	r3, [pc, #76]	; (5b0 <artist_usart_configure+0xf0>)
     564:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     566:	4a13      	ldr	r2, [pc, #76]	; (5b4 <artist_usart_configure+0xf4>)
     568:	4b13      	ldr	r3, [pc, #76]	; (5b8 <artist_usart_configure+0xf8>)
     56a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     56c:	4a13      	ldr	r2, [pc, #76]	; (5bc <artist_usart_configure+0xfc>)
     56e:	4b14      	ldr	r3, [pc, #80]	; (5c0 <artist_usart_configure+0x100>)
     570:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     572:	466a      	mov	r2, sp
     574:	4909      	ldr	r1, [pc, #36]	; (59c <artist_usart_configure+0xdc>)
     576:	0020      	movs	r0, r4
     578:	4b09      	ldr	r3, [pc, #36]	; (5a0 <artist_usart_configure+0xe0>)
     57a:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     57c:	4d11      	ldr	r5, [pc, #68]	; (5c4 <artist_usart_configure+0x104>)
     57e:	682b      	ldr	r3, [r5, #0]
     580:	6898      	ldr	r0, [r3, #8]
     582:	2100      	movs	r1, #0
     584:	4c10      	ldr	r4, [pc, #64]	; (5c8 <artist_usart_configure+0x108>)
     586:	47a0      	blx	r4
	setbuf(stdin, NULL);
     588:	682b      	ldr	r3, [r5, #0]
     58a:	6858      	ldr	r0, [r3, #4]
     58c:	2100      	movs	r1, #0
     58e:	47a0      	blx	r4
	
	stdio_serial_init(usart_instance, EDBG_CDC_MODULE, &config);
}
     590:	b010      	add	sp, #64	; 0x40
     592:	bd70      	pop	{r4, r5, r6, pc}
     594:	00040003 	.word	0x00040003
     598:	00050003 	.word	0x00050003
     59c:	42000800 	.word	0x42000800
     5a0:	000011d9 	.word	0x000011d9
     5a4:	00000d91 	.word	0x00000d91
     5a8:	e000e100 	.word	0xe000e100
     5ac:	00000495 	.word	0x00000495
     5b0:	200009b0 	.word	0x200009b0
     5b4:	00000415 	.word	0x00000415
     5b8:	200009ac 	.word	0x200009ac
     5bc:	000003e9 	.word	0x000003e9
     5c0:	200009a8 	.word	0x200009a8
     5c4:	2000000c 	.word	0x2000000c
     5c8:	00003e99 	.word	0x00003e99

000005cc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     5cc:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     5ce:	2000      	movs	r0, #0
     5d0:	4b08      	ldr	r3, [pc, #32]	; (5f4 <delay_init+0x28>)
     5d2:	4798      	blx	r3
     5d4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     5d6:	4c08      	ldr	r4, [pc, #32]	; (5f8 <delay_init+0x2c>)
     5d8:	21fa      	movs	r1, #250	; 0xfa
     5da:	0089      	lsls	r1, r1, #2
     5dc:	47a0      	blx	r4
     5de:	4b07      	ldr	r3, [pc, #28]	; (5fc <delay_init+0x30>)
     5e0:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     5e2:	4907      	ldr	r1, [pc, #28]	; (600 <delay_init+0x34>)
     5e4:	0028      	movs	r0, r5
     5e6:	47a0      	blx	r4
     5e8:	4b06      	ldr	r3, [pc, #24]	; (604 <delay_init+0x38>)
     5ea:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     5ec:	2205      	movs	r2, #5
     5ee:	4b06      	ldr	r3, [pc, #24]	; (608 <delay_init+0x3c>)
     5f0:	601a      	str	r2, [r3, #0]
}
     5f2:	bd70      	pop	{r4, r5, r6, pc}
     5f4:	00001ea5 	.word	0x00001ea5
     5f8:	00005e5d 	.word	0x00005e5d
     5fc:	20000000 	.word	0x20000000
     600:	000f4240 	.word	0x000f4240
     604:	20000004 	.word	0x20000004
     608:	e000e010 	.word	0xe000e010

0000060c <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     60c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     60e:	4b08      	ldr	r3, [pc, #32]	; (630 <delay_cycles_us+0x24>)
     610:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     612:	4a08      	ldr	r2, [pc, #32]	; (634 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     614:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     616:	2180      	movs	r1, #128	; 0x80
     618:	0249      	lsls	r1, r1, #9
	while (n--) {
     61a:	3801      	subs	r0, #1
     61c:	d307      	bcc.n	62e <delay_cycles_us+0x22>
	if (n > 0) {
     61e:	2c00      	cmp	r4, #0
     620:	d0fb      	beq.n	61a <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     622:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     624:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     626:	6813      	ldr	r3, [r2, #0]
     628:	420b      	tst	r3, r1
     62a:	d0fc      	beq.n	626 <delay_cycles_us+0x1a>
     62c:	e7f5      	b.n	61a <delay_cycles_us+0xe>
	}
}
     62e:	bd30      	pop	{r4, r5, pc}
     630:	20000004 	.word	0x20000004
     634:	e000e010 	.word	0xe000e010

00000638 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     638:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     63a:	4b08      	ldr	r3, [pc, #32]	; (65c <delay_cycles_ms+0x24>)
     63c:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     63e:	4a08      	ldr	r2, [pc, #32]	; (660 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     640:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     642:	2180      	movs	r1, #128	; 0x80
     644:	0249      	lsls	r1, r1, #9
	while (n--) {
     646:	3801      	subs	r0, #1
     648:	d307      	bcc.n	65a <delay_cycles_ms+0x22>
	if (n > 0) {
     64a:	2c00      	cmp	r4, #0
     64c:	d0fb      	beq.n	646 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     64e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     650:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     652:	6813      	ldr	r3, [r2, #0]
     654:	420b      	tst	r3, r1
     656:	d0fc      	beq.n	652 <delay_cycles_ms+0x1a>
     658:	e7f5      	b.n	646 <delay_cycles_ms+0xe>
	}
}
     65a:	bd30      	pop	{r4, r5, pc}
     65c:	20000000 	.word	0x20000000
     660:	e000e010 	.word	0xe000e010

00000664 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     664:	4b0c      	ldr	r3, [pc, #48]	; (698 <cpu_irq_enter_critical+0x34>)
     666:	681b      	ldr	r3, [r3, #0]
     668:	2b00      	cmp	r3, #0
     66a:	d106      	bne.n	67a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     66c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     670:	2b00      	cmp	r3, #0
     672:	d007      	beq.n	684 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     674:	2200      	movs	r2, #0
     676:	4b09      	ldr	r3, [pc, #36]	; (69c <cpu_irq_enter_critical+0x38>)
     678:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     67a:	4a07      	ldr	r2, [pc, #28]	; (698 <cpu_irq_enter_critical+0x34>)
     67c:	6813      	ldr	r3, [r2, #0]
     67e:	3301      	adds	r3, #1
     680:	6013      	str	r3, [r2, #0]
}
     682:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     684:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     686:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     68a:	2200      	movs	r2, #0
     68c:	4b04      	ldr	r3, [pc, #16]	; (6a0 <cpu_irq_enter_critical+0x3c>)
     68e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     690:	3201      	adds	r2, #1
     692:	4b02      	ldr	r3, [pc, #8]	; (69c <cpu_irq_enter_critical+0x38>)
     694:	701a      	strb	r2, [r3, #0]
     696:	e7f0      	b.n	67a <cpu_irq_enter_critical+0x16>
     698:	200001f8 	.word	0x200001f8
     69c:	200001fc 	.word	0x200001fc
     6a0:	20000008 	.word	0x20000008

000006a4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     6a4:	4b08      	ldr	r3, [pc, #32]	; (6c8 <cpu_irq_leave_critical+0x24>)
     6a6:	681a      	ldr	r2, [r3, #0]
     6a8:	3a01      	subs	r2, #1
     6aa:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     6ac:	681b      	ldr	r3, [r3, #0]
     6ae:	2b00      	cmp	r3, #0
     6b0:	d109      	bne.n	6c6 <cpu_irq_leave_critical+0x22>
     6b2:	4b06      	ldr	r3, [pc, #24]	; (6cc <cpu_irq_leave_critical+0x28>)
     6b4:	781b      	ldrb	r3, [r3, #0]
     6b6:	2b00      	cmp	r3, #0
     6b8:	d005      	beq.n	6c6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     6ba:	2201      	movs	r2, #1
     6bc:	4b04      	ldr	r3, [pc, #16]	; (6d0 <cpu_irq_leave_critical+0x2c>)
     6be:	701a      	strb	r2, [r3, #0]
     6c0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     6c4:	b662      	cpsie	i
	}
}
     6c6:	4770      	bx	lr
     6c8:	200001f8 	.word	0x200001f8
     6cc:	200001fc 	.word	0x200001fc
     6d0:	20000008 	.word	0x20000008

000006d4 <system_board_init>:




void system_board_init(void)
{
     6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6d6:	46c6      	mov	lr, r8
     6d8:	b500      	push	{lr}
     6da:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
     6dc:	ac01      	add	r4, sp, #4
     6de:	2601      	movs	r6, #1
     6e0:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     6e2:	2700      	movs	r7, #0
     6e4:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     6e6:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     6e8:	0021      	movs	r1, r4
     6ea:	2013      	movs	r0, #19
     6ec:	4d27      	ldr	r5, [pc, #156]	; (78c <system_board_init+0xb8>)
     6ee:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     6f0:	4b27      	ldr	r3, [pc, #156]	; (790 <system_board_init+0xbc>)
     6f2:	4698      	mov	r8, r3
     6f4:	2380      	movs	r3, #128	; 0x80
     6f6:	031b      	lsls	r3, r3, #12
     6f8:	4642      	mov	r2, r8
     6fa:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     6fc:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     6fe:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     700:	0021      	movs	r1, r4
     702:	201c      	movs	r0, #28
     704:	47a8      	blx	r5
	config->input_pull = PORT_PIN_PULL_UP;
     706:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     708:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     70a:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     70c:	0021      	movs	r1, r4
     70e:	2052      	movs	r0, #82	; 0x52
     710:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     712:	0021      	movs	r1, r4
     714:	203e      	movs	r0, #62	; 0x3e
     716:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     718:	0021      	movs	r1, r4
     71a:	203f      	movs	r0, #63	; 0x3f
     71c:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     71e:	0021      	movs	r1, r4
     720:	202f      	movs	r0, #47	; 0x2f
     722:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     724:	0021      	movs	r1, r4
     726:	2014      	movs	r0, #20
     728:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     72a:	2280      	movs	r2, #128	; 0x80
     72c:	02d2      	lsls	r2, r2, #11
     72e:	4b19      	ldr	r3, [pc, #100]	; (794 <system_board_init+0xc0>)
     730:	619a      	str	r2, [r3, #24]
     732:	4b19      	ldr	r3, [pc, #100]	; (798 <system_board_init+0xc4>)
     734:	2280      	movs	r2, #128	; 0x80
     736:	05d2      	lsls	r2, r2, #23
     738:	619a      	str	r2, [r3, #24]
     73a:	2280      	movs	r2, #128	; 0x80
     73c:	0612      	lsls	r2, r2, #24
     73e:	619a      	str	r2, [r3, #24]
     740:	2280      	movs	r2, #128	; 0x80
     742:	0212      	lsls	r2, r2, #8
     744:	619a      	str	r2, [r3, #24]
     746:	2380      	movs	r3, #128	; 0x80
     748:	035b      	lsls	r3, r3, #13
     74a:	4642      	mov	r2, r8
     74c:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     74e:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     750:	0021      	movs	r1, r4
     752:	2053      	movs	r0, #83	; 0x53
     754:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     756:	4a11      	ldr	r2, [pc, #68]	; (79c <system_board_init+0xc8>)
     758:	6a11      	ldr	r1, [r2, #32]
     75a:	2380      	movs	r3, #128	; 0x80
     75c:	039b      	lsls	r3, r3, #14
     75e:	430b      	orrs	r3, r1
     760:	6213      	str	r3, [r2, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     762:	2204      	movs	r2, #4
     764:	4b0e      	ldr	r3, [pc, #56]	; (7a0 <system_board_init+0xcc>)
     766:	801a      	strh	r2, [r3, #0]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     768:	466b      	mov	r3, sp
     76a:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     76c:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     76e:	2305      	movs	r3, #5
     770:	466a      	mov	r2, sp
     772:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     774:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     776:	4669      	mov	r1, sp
     778:	2009      	movs	r0, #9
     77a:	4c0a      	ldr	r4, [pc, #40]	; (7a4 <system_board_init+0xd0>)
     77c:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     77e:	4669      	mov	r1, sp
     780:	200c      	movs	r0, #12
     782:	47a0      	blx	r4
#endif

}
     784:	b002      	add	sp, #8
     786:	bc04      	pop	{r2}
     788:	4690      	mov	r8, r2
     78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     78c:	00000939 	.word	0x00000939
     790:	41004400 	.word	0x41004400
     794:	41004500 	.word	0x41004500
     798:	41004480 	.word	0x41004480
     79c:	40000400 	.word	0x40000400
     7a0:	42005400 	.word	0x42005400
     7a4:	000020b5 	.word	0x000020b5

000007a8 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     7a8:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     7aa:	2a00      	cmp	r2, #0
     7ac:	d001      	beq.n	7b2 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     7ae:	0018      	movs	r0, r3
     7b0:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     7b2:	008b      	lsls	r3, r1, #2
     7b4:	4a06      	ldr	r2, [pc, #24]	; (7d0 <extint_register_callback+0x28>)
     7b6:	589b      	ldr	r3, [r3, r2]
     7b8:	2b00      	cmp	r3, #0
     7ba:	d003      	beq.n	7c4 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     7bc:	4283      	cmp	r3, r0
     7be:	d005      	beq.n	7cc <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     7c0:	231d      	movs	r3, #29
     7c2:	e7f4      	b.n	7ae <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     7c4:	0089      	lsls	r1, r1, #2
     7c6:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     7c8:	2300      	movs	r3, #0
     7ca:	e7f0      	b.n	7ae <extint_register_callback+0x6>
		return STATUS_OK;
     7cc:	2300      	movs	r3, #0
     7ce:	e7ee      	b.n	7ae <extint_register_callback+0x6>
     7d0:	20000944 	.word	0x20000944

000007d4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     7d4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     7d6:	2200      	movs	r2, #0
     7d8:	4b10      	ldr	r3, [pc, #64]	; (81c <EIC_Handler+0x48>)
     7da:	701a      	strb	r2, [r3, #0]
     7dc:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     7de:	4910      	ldr	r1, [pc, #64]	; (820 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     7e0:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     7e2:	4e10      	ldr	r6, [pc, #64]	; (824 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     7e4:	4c0d      	ldr	r4, [pc, #52]	; (81c <EIC_Handler+0x48>)
     7e6:	e00a      	b.n	7fe <EIC_Handler+0x2a>
		return eics[eic_index];
     7e8:	490d      	ldr	r1, [pc, #52]	; (820 <EIC_Handler+0x4c>)
     7ea:	e008      	b.n	7fe <EIC_Handler+0x2a>
     7ec:	7823      	ldrb	r3, [r4, #0]
     7ee:	3301      	adds	r3, #1
     7f0:	b2db      	uxtb	r3, r3
     7f2:	7023      	strb	r3, [r4, #0]
     7f4:	2b0f      	cmp	r3, #15
     7f6:	d810      	bhi.n	81a <EIC_Handler+0x46>
		return NULL;
     7f8:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     7fa:	2b1f      	cmp	r3, #31
     7fc:	d9f4      	bls.n	7e8 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     7fe:	0028      	movs	r0, r5
     800:	4018      	ands	r0, r3
     802:	2201      	movs	r2, #1
     804:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     806:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     808:	4210      	tst	r0, r2
     80a:	d0ef      	beq.n	7ec <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     80c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     80e:	009b      	lsls	r3, r3, #2
     810:	599b      	ldr	r3, [r3, r6]
     812:	2b00      	cmp	r3, #0
     814:	d0ea      	beq.n	7ec <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     816:	4798      	blx	r3
     818:	e7e8      	b.n	7ec <EIC_Handler+0x18>
			}
		}
	}
}
     81a:	bd70      	pop	{r4, r5, r6, pc}
     81c:	20000940 	.word	0x20000940
     820:	40001800 	.word	0x40001800
     824:	20000944 	.word	0x20000944

00000828 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     828:	4a04      	ldr	r2, [pc, #16]	; (83c <_extint_enable+0x14>)
     82a:	7813      	ldrb	r3, [r2, #0]
     82c:	2102      	movs	r1, #2
     82e:	430b      	orrs	r3, r1
     830:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     832:	7853      	ldrb	r3, [r2, #1]
     834:	b25b      	sxtb	r3, r3
     836:	2b00      	cmp	r3, #0
     838:	dbfb      	blt.n	832 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     83a:	4770      	bx	lr
     83c:	40001800 	.word	0x40001800

00000840 <_system_extint_init>:
{
     840:	b500      	push	{lr}
     842:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     844:	4a12      	ldr	r2, [pc, #72]	; (890 <_system_extint_init+0x50>)
     846:	6993      	ldr	r3, [r2, #24]
     848:	2140      	movs	r1, #64	; 0x40
     84a:	430b      	orrs	r3, r1
     84c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     84e:	a901      	add	r1, sp, #4
     850:	2300      	movs	r3, #0
     852:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     854:	2005      	movs	r0, #5
     856:	4b0f      	ldr	r3, [pc, #60]	; (894 <_system_extint_init+0x54>)
     858:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     85a:	2005      	movs	r0, #5
     85c:	4b0e      	ldr	r3, [pc, #56]	; (898 <_system_extint_init+0x58>)
     85e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     860:	4a0e      	ldr	r2, [pc, #56]	; (89c <_system_extint_init+0x5c>)
     862:	7813      	ldrb	r3, [r2, #0]
     864:	2101      	movs	r1, #1
     866:	430b      	orrs	r3, r1
     868:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     86a:	7853      	ldrb	r3, [r2, #1]
     86c:	b25b      	sxtb	r3, r3
     86e:	2b00      	cmp	r3, #0
     870:	dbfb      	blt.n	86a <_system_extint_init+0x2a>
     872:	4b0b      	ldr	r3, [pc, #44]	; (8a0 <_system_extint_init+0x60>)
     874:	0019      	movs	r1, r3
     876:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     878:	2200      	movs	r2, #0
     87a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     87c:	4299      	cmp	r1, r3
     87e:	d1fc      	bne.n	87a <_system_extint_init+0x3a>
     880:	2210      	movs	r2, #16
     882:	4b08      	ldr	r3, [pc, #32]	; (8a4 <_system_extint_init+0x64>)
     884:	601a      	str	r2, [r3, #0]
	_extint_enable();
     886:	4b08      	ldr	r3, [pc, #32]	; (8a8 <_system_extint_init+0x68>)
     888:	4798      	blx	r3
}
     88a:	b003      	add	sp, #12
     88c:	bd00      	pop	{pc}
     88e:	46c0      	nop			; (mov r8, r8)
     890:	40000400 	.word	0x40000400
     894:	00001fbd 	.word	0x00001fbd
     898:	00001f31 	.word	0x00001f31
     89c:	40001800 	.word	0x40001800
     8a0:	20000944 	.word	0x20000944
     8a4:	e000e100 	.word	0xe000e100
     8a8:	00000829 	.word	0x00000829

000008ac <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     8ac:	2300      	movs	r3, #0
     8ae:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     8b0:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     8b2:	2201      	movs	r2, #1
     8b4:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     8b6:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     8b8:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     8ba:	3302      	adds	r3, #2
     8bc:	72c3      	strb	r3, [r0, #11]
}
     8be:	4770      	bx	lr

000008c0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     8c2:	b083      	sub	sp, #12
     8c4:	0005      	movs	r5, r0
     8c6:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8c8:	a901      	add	r1, sp, #4
     8ca:	2300      	movs	r3, #0
     8cc:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     8ce:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     8d0:	7923      	ldrb	r3, [r4, #4]
     8d2:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     8d4:	7a23      	ldrb	r3, [r4, #8]
     8d6:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     8d8:	7820      	ldrb	r0, [r4, #0]
     8da:	4b15      	ldr	r3, [pc, #84]	; (930 <extint_chan_set_config+0x70>)
     8dc:	4798      	blx	r3
		return NULL;
     8de:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     8e0:	2d1f      	cmp	r5, #31
     8e2:	d800      	bhi.n	8e6 <extint_chan_set_config+0x26>
		return eics[eic_index];
     8e4:	4813      	ldr	r0, [pc, #76]	; (934 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     8e6:	2207      	movs	r2, #7
     8e8:	402a      	ands	r2, r5
     8ea:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     8ec:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     8ee:	7aa3      	ldrb	r3, [r4, #10]
     8f0:	2b00      	cmp	r3, #0
     8f2:	d001      	beq.n	8f8 <extint_chan_set_config+0x38>
     8f4:	2308      	movs	r3, #8
     8f6:	431f      	orrs	r7, r3
     8f8:	08eb      	lsrs	r3, r5, #3
     8fa:	009b      	lsls	r3, r3, #2
     8fc:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     8fe:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     900:	260f      	movs	r6, #15
     902:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     904:	43b1      	bics	r1, r6
			(new_config << config_pos);
     906:	4097      	lsls	r7, r2
     908:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     90a:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     90c:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     90e:	7a63      	ldrb	r3, [r4, #9]
     910:	2b00      	cmp	r3, #0
     912:	d106      	bne.n	922 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     914:	6943      	ldr	r3, [r0, #20]
     916:	2201      	movs	r2, #1
     918:	40aa      	lsls	r2, r5
     91a:	4393      	bics	r3, r2
     91c:	6143      	str	r3, [r0, #20]
	}
}
     91e:	b003      	add	sp, #12
     920:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     922:	6942      	ldr	r2, [r0, #20]
     924:	2301      	movs	r3, #1
     926:	40ab      	lsls	r3, r5
     928:	4313      	orrs	r3, r2
     92a:	6143      	str	r3, [r0, #20]
     92c:	e7f7      	b.n	91e <extint_chan_set_config+0x5e>
     92e:	46c0      	nop			; (mov r8, r8)
     930:	000020b5 	.word	0x000020b5
     934:	40001800 	.word	0x40001800

00000938 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     938:	b500      	push	{lr}
     93a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     93c:	ab01      	add	r3, sp, #4
     93e:	2280      	movs	r2, #128	; 0x80
     940:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     942:	780a      	ldrb	r2, [r1, #0]
     944:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     946:	784a      	ldrb	r2, [r1, #1]
     948:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     94a:	788a      	ldrb	r2, [r1, #2]
     94c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     94e:	0019      	movs	r1, r3
     950:	4b01      	ldr	r3, [pc, #4]	; (958 <port_pin_set_config+0x20>)
     952:	4798      	blx	r3
}
     954:	b003      	add	sp, #12
     956:	bd00      	pop	{pc}
     958:	000020b5 	.word	0x000020b5

0000095c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     95c:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     95e:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     960:	2340      	movs	r3, #64	; 0x40
     962:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     964:	4281      	cmp	r1, r0
     966:	d202      	bcs.n	96e <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     968:	0018      	movs	r0, r3
     96a:	bd10      	pop	{r4, pc}
		baud_calculated++;
     96c:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     96e:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     970:	1c63      	adds	r3, r4, #1
     972:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     974:	4288      	cmp	r0, r1
     976:	d9f9      	bls.n	96c <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     978:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     97a:	2cff      	cmp	r4, #255	; 0xff
     97c:	d8f4      	bhi.n	968 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     97e:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     980:	2300      	movs	r3, #0
     982:	e7f1      	b.n	968 <_sercom_get_sync_baud_val+0xc>

00000984 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     984:	b5f0      	push	{r4, r5, r6, r7, lr}
     986:	46de      	mov	lr, fp
     988:	4657      	mov	r7, sl
     98a:	464e      	mov	r6, r9
     98c:	4645      	mov	r5, r8
     98e:	b5e0      	push	{r5, r6, r7, lr}
     990:	b089      	sub	sp, #36	; 0x24
     992:	000c      	movs	r4, r1
     994:	9205      	str	r2, [sp, #20]
     996:	aa12      	add	r2, sp, #72	; 0x48
     998:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     99a:	0005      	movs	r5, r0
     99c:	434d      	muls	r5, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     99e:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     9a0:	42a5      	cmp	r5, r4
     9a2:	d907      	bls.n	9b4 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     9a4:	0010      	movs	r0, r2
     9a6:	b009      	add	sp, #36	; 0x24
     9a8:	bc3c      	pop	{r2, r3, r4, r5}
     9aa:	4690      	mov	r8, r2
     9ac:	4699      	mov	r9, r3
     9ae:	46a2      	mov	sl, r4
     9b0:	46ab      	mov	fp, r5
     9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     9b4:	2b00      	cmp	r3, #0
     9b6:	d155      	bne.n	a64 <_sercom_get_async_baud_val+0xe0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     9b8:	0002      	movs	r2, r0
     9ba:	0008      	movs	r0, r1
     9bc:	2100      	movs	r1, #0
     9be:	4d63      	ldr	r5, [pc, #396]	; (b4c <_sercom_get_async_baud_val+0x1c8>)
     9c0:	47a8      	blx	r5
     9c2:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     9c4:	0026      	movs	r6, r4
     9c6:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
     9c8:	2300      	movs	r3, #0
     9ca:	2400      	movs	r4, #0
     9cc:	9300      	str	r3, [sp, #0]
     9ce:	9401      	str	r4, [sp, #4]
     9d0:	2200      	movs	r2, #0
     9d2:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     9d4:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     9d6:	2120      	movs	r1, #32
     9d8:	468c      	mov	ip, r1
     9da:	391f      	subs	r1, #31
     9dc:	9602      	str	r6, [sp, #8]
     9de:	9703      	str	r7, [sp, #12]
     9e0:	e014      	b.n	a0c <_sercom_get_async_baud_val+0x88>
     9e2:	4664      	mov	r4, ip
     9e4:	1a24      	subs	r4, r4, r0
     9e6:	000d      	movs	r5, r1
     9e8:	40e5      	lsrs	r5, r4
     9ea:	46a8      	mov	r8, r5
     9ec:	e015      	b.n	a1a <_sercom_get_async_baud_val+0x96>
			r = r - d;
     9ee:	9c02      	ldr	r4, [sp, #8]
     9f0:	9d03      	ldr	r5, [sp, #12]
     9f2:	1b12      	subs	r2, r2, r4
     9f4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     9f6:	464d      	mov	r5, r9
     9f8:	9e00      	ldr	r6, [sp, #0]
     9fa:	9f01      	ldr	r7, [sp, #4]
     9fc:	4335      	orrs	r5, r6
     9fe:	003c      	movs	r4, r7
     a00:	4646      	mov	r6, r8
     a02:	4334      	orrs	r4, r6
     a04:	9500      	str	r5, [sp, #0]
     a06:	9401      	str	r4, [sp, #4]
	for (i = 63; i >= 0; i--) {
     a08:	3801      	subs	r0, #1
     a0a:	d31d      	bcc.n	a48 <_sercom_get_async_baud_val+0xc4>
		bit_shift = (uint64_t)1 << i;
     a0c:	2420      	movs	r4, #32
     a0e:	4264      	negs	r4, r4
     a10:	1904      	adds	r4, r0, r4
     a12:	d4e6      	bmi.n	9e2 <_sercom_get_async_baud_val+0x5e>
     a14:	000d      	movs	r5, r1
     a16:	40a5      	lsls	r5, r4
     a18:	46a8      	mov	r8, r5
     a1a:	000c      	movs	r4, r1
     a1c:	4084      	lsls	r4, r0
     a1e:	46a1      	mov	r9, r4
		r = r << 1;
     a20:	1892      	adds	r2, r2, r2
     a22:	415b      	adcs	r3, r3
     a24:	0014      	movs	r4, r2
     a26:	001d      	movs	r5, r3
		if (n & bit_shift) {
     a28:	4646      	mov	r6, r8
     a2a:	465f      	mov	r7, fp
     a2c:	423e      	tst	r6, r7
     a2e:	d003      	beq.n	a38 <_sercom_get_async_baud_val+0xb4>
			r |= 0x01;
     a30:	000e      	movs	r6, r1
     a32:	4326      	orrs	r6, r4
     a34:	0032      	movs	r2, r6
     a36:	002b      	movs	r3, r5
		if (r >= d) {
     a38:	9c02      	ldr	r4, [sp, #8]
     a3a:	9d03      	ldr	r5, [sp, #12]
     a3c:	429d      	cmp	r5, r3
     a3e:	d8e3      	bhi.n	a08 <_sercom_get_async_baud_val+0x84>
     a40:	d1d5      	bne.n	9ee <_sercom_get_async_baud_val+0x6a>
     a42:	4294      	cmp	r4, r2
     a44:	d8e0      	bhi.n	a08 <_sercom_get_async_baud_val+0x84>
     a46:	e7d2      	b.n	9ee <_sercom_get_async_baud_val+0x6a>
		scale = ((uint64_t)1 << SHIFT) - ratio;
     a48:	2200      	movs	r2, #0
     a4a:	2301      	movs	r3, #1
     a4c:	9800      	ldr	r0, [sp, #0]
     a4e:	9901      	ldr	r1, [sp, #4]
     a50:	1a12      	subs	r2, r2, r0
     a52:	418b      	sbcs	r3, r1
     a54:	0019      	movs	r1, r3
		baud_calculated = (65536 * scale) >> SHIFT;
     a56:	0c13      	lsrs	r3, r2, #16
     a58:	040a      	lsls	r2, r1, #16
     a5a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     a5c:	9b05      	ldr	r3, [sp, #20]
     a5e:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     a60:	2200      	movs	r2, #0
     a62:	e79f      	b.n	9a4 <_sercom_get_async_baud_val+0x20>
	uint64_t baud_calculated = 0;
     a64:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     a66:	2b01      	cmp	r3, #1
     a68:	d1f8      	bne.n	a5c <_sercom_get_async_baud_val+0xd8>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     a6a:	0f63      	lsrs	r3, r4, #29
     a6c:	9304      	str	r3, [sp, #16]
     a6e:	00e3      	lsls	r3, r4, #3
     a70:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     a72:	000a      	movs	r2, r1
     a74:	2300      	movs	r3, #0
     a76:	2100      	movs	r1, #0
     a78:	4c34      	ldr	r4, [pc, #208]	; (b4c <_sercom_get_async_baud_val+0x1c8>)
     a7a:	47a0      	blx	r4
     a7c:	0004      	movs	r4, r0
     a7e:	000d      	movs	r5, r1
     a80:	2300      	movs	r3, #0
     a82:	469c      	mov	ip, r3
     a84:	9306      	str	r3, [sp, #24]
		bit_shift = (uint64_t)1 << i;
     a86:	3320      	adds	r3, #32
     a88:	469b      	mov	fp, r3
     a8a:	2601      	movs	r6, #1
			if(baud_int < BAUD_INT_MAX) {
     a8c:	4663      	mov	r3, ip
     a8e:	9307      	str	r3, [sp, #28]
     a90:	e048      	b.n	b24 <_sercom_get_async_baud_val+0x1a0>
		bit_shift = (uint64_t)1 << i;
     a92:	4659      	mov	r1, fp
     a94:	1bc9      	subs	r1, r1, r7
     a96:	0030      	movs	r0, r6
     a98:	40c8      	lsrs	r0, r1
     a9a:	4682      	mov	sl, r0
     a9c:	e010      	b.n	ac0 <_sercom_get_async_baud_val+0x13c>
			r = r - d;
     a9e:	9800      	ldr	r0, [sp, #0]
     aa0:	9901      	ldr	r1, [sp, #4]
     aa2:	1a12      	subs	r2, r2, r0
     aa4:	418b      	sbcs	r3, r1
			q |= bit_shift;
     aa6:	9902      	ldr	r1, [sp, #8]
     aa8:	4648      	mov	r0, r9
     aaa:	4301      	orrs	r1, r0
     aac:	9102      	str	r1, [sp, #8]
	for (i = 63; i >= 0; i--) {
     aae:	3f01      	subs	r7, #1
     ab0:	d325      	bcc.n	afe <_sercom_get_async_baud_val+0x17a>
		bit_shift = (uint64_t)1 << i;
     ab2:	2120      	movs	r1, #32
     ab4:	4249      	negs	r1, r1
     ab6:	1879      	adds	r1, r7, r1
     ab8:	d4eb      	bmi.n	a92 <_sercom_get_async_baud_val+0x10e>
     aba:	0030      	movs	r0, r6
     abc:	4088      	lsls	r0, r1
     abe:	4682      	mov	sl, r0
     ac0:	0031      	movs	r1, r6
     ac2:	40b9      	lsls	r1, r7
     ac4:	4689      	mov	r9, r1
		r = r << 1;
     ac6:	1892      	adds	r2, r2, r2
     ac8:	415b      	adcs	r3, r3
     aca:	0010      	movs	r0, r2
     acc:	0019      	movs	r1, r3
		if (n & bit_shift) {
     ace:	4644      	mov	r4, r8
     ad0:	464d      	mov	r5, r9
     ad2:	402c      	ands	r4, r5
     ad4:	46a4      	mov	ip, r4
     ad6:	4654      	mov	r4, sl
     ad8:	9d04      	ldr	r5, [sp, #16]
     ada:	402c      	ands	r4, r5
     adc:	46a2      	mov	sl, r4
     ade:	4664      	mov	r4, ip
     ae0:	4655      	mov	r5, sl
     ae2:	432c      	orrs	r4, r5
     ae4:	d003      	beq.n	aee <_sercom_get_async_baud_val+0x16a>
			r |= 0x01;
     ae6:	0034      	movs	r4, r6
     ae8:	4304      	orrs	r4, r0
     aea:	0022      	movs	r2, r4
     aec:	000b      	movs	r3, r1
		if (r >= d) {
     aee:	9800      	ldr	r0, [sp, #0]
     af0:	9901      	ldr	r1, [sp, #4]
     af2:	4299      	cmp	r1, r3
     af4:	d8db      	bhi.n	aae <_sercom_get_async_baud_val+0x12a>
     af6:	d1d2      	bne.n	a9e <_sercom_get_async_baud_val+0x11a>
     af8:	4290      	cmp	r0, r2
     afa:	d8d8      	bhi.n	aae <_sercom_get_async_baud_val+0x12a>
     afc:	e7cf      	b.n	a9e <_sercom_get_async_baud_val+0x11a>
     afe:	9c00      	ldr	r4, [sp, #0]
     b00:	9d01      	ldr	r5, [sp, #4]
			baud_int -= baud_fp;
     b02:	9902      	ldr	r1, [sp, #8]
     b04:	9a07      	ldr	r2, [sp, #28]
     b06:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     b08:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     b0a:	4911      	ldr	r1, [pc, #68]	; (b50 <_sercom_get_async_baud_val+0x1cc>)
     b0c:	428b      	cmp	r3, r1
     b0e:	d914      	bls.n	b3a <_sercom_get_async_baud_val+0x1b6>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     b10:	9b06      	ldr	r3, [sp, #24]
     b12:	3301      	adds	r3, #1
     b14:	b2db      	uxtb	r3, r3
     b16:	0019      	movs	r1, r3
     b18:	9306      	str	r3, [sp, #24]
     b1a:	0013      	movs	r3, r2
     b1c:	3301      	adds	r3, #1
     b1e:	9307      	str	r3, [sp, #28]
     b20:	2908      	cmp	r1, #8
     b22:	d008      	beq.n	b36 <_sercom_get_async_baud_val+0x1b2>
	uint64_t q = 0, r = 0, bit_shift;
     b24:	2300      	movs	r3, #0
     b26:	9302      	str	r3, [sp, #8]
     b28:	2200      	movs	r2, #0
     b2a:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     b2c:	213f      	movs	r1, #63	; 0x3f
     b2e:	9400      	str	r4, [sp, #0]
     b30:	9501      	str	r5, [sp, #4]
     b32:	000f      	movs	r7, r1
     b34:	e7bd      	b.n	ab2 <_sercom_get_async_baud_val+0x12e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b36:	2240      	movs	r2, #64	; 0x40
     b38:	e734      	b.n	9a4 <_sercom_get_async_baud_val+0x20>
     b3a:	2240      	movs	r2, #64	; 0x40
		if(baud_fp == BAUD_FP_MAX) {
     b3c:	9906      	ldr	r1, [sp, #24]
     b3e:	2908      	cmp	r1, #8
     b40:	d100      	bne.n	b44 <_sercom_get_async_baud_val+0x1c0>
     b42:	e72f      	b.n	9a4 <_sercom_get_async_baud_val+0x20>
		baud_calculated = baud_int | (baud_fp << 13);
     b44:	034a      	lsls	r2, r1, #13
     b46:	431a      	orrs	r2, r3
     b48:	e788      	b.n	a5c <_sercom_get_async_baud_val+0xd8>
     b4a:	46c0      	nop			; (mov r8, r8)
     b4c:	00006239 	.word	0x00006239
     b50:	00001fff 	.word	0x00001fff

00000b54 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     b54:	b510      	push	{r4, lr}
     b56:	b082      	sub	sp, #8
     b58:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     b5a:	4b0e      	ldr	r3, [pc, #56]	; (b94 <sercom_set_gclk_generator+0x40>)
     b5c:	781b      	ldrb	r3, [r3, #0]
     b5e:	2b00      	cmp	r3, #0
     b60:	d007      	beq.n	b72 <sercom_set_gclk_generator+0x1e>
     b62:	2900      	cmp	r1, #0
     b64:	d105      	bne.n	b72 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     b66:	4b0b      	ldr	r3, [pc, #44]	; (b94 <sercom_set_gclk_generator+0x40>)
     b68:	785b      	ldrb	r3, [r3, #1]
     b6a:	4283      	cmp	r3, r0
     b6c:	d010      	beq.n	b90 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     b6e:	201d      	movs	r0, #29
     b70:	e00c      	b.n	b8c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     b72:	a901      	add	r1, sp, #4
     b74:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     b76:	2013      	movs	r0, #19
     b78:	4b07      	ldr	r3, [pc, #28]	; (b98 <sercom_set_gclk_generator+0x44>)
     b7a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     b7c:	2013      	movs	r0, #19
     b7e:	4b07      	ldr	r3, [pc, #28]	; (b9c <sercom_set_gclk_generator+0x48>)
     b80:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     b82:	4b04      	ldr	r3, [pc, #16]	; (b94 <sercom_set_gclk_generator+0x40>)
     b84:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     b86:	2201      	movs	r2, #1
     b88:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     b8a:	2000      	movs	r0, #0
}
     b8c:	b002      	add	sp, #8
     b8e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     b90:	2000      	movs	r0, #0
     b92:	e7fb      	b.n	b8c <sercom_set_gclk_generator+0x38>
     b94:	20000200 	.word	0x20000200
     b98:	00001fbd 	.word	0x00001fbd
     b9c:	00001f31 	.word	0x00001f31

00000ba0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     ba0:	4b40      	ldr	r3, [pc, #256]	; (ca4 <_sercom_get_default_pad+0x104>)
     ba2:	4298      	cmp	r0, r3
     ba4:	d031      	beq.n	c0a <_sercom_get_default_pad+0x6a>
     ba6:	d90a      	bls.n	bbe <_sercom_get_default_pad+0x1e>
     ba8:	4b3f      	ldr	r3, [pc, #252]	; (ca8 <_sercom_get_default_pad+0x108>)
     baa:	4298      	cmp	r0, r3
     bac:	d04d      	beq.n	c4a <_sercom_get_default_pad+0xaa>
     bae:	4b3f      	ldr	r3, [pc, #252]	; (cac <_sercom_get_default_pad+0x10c>)
     bb0:	4298      	cmp	r0, r3
     bb2:	d05a      	beq.n	c6a <_sercom_get_default_pad+0xca>
     bb4:	4b3e      	ldr	r3, [pc, #248]	; (cb0 <_sercom_get_default_pad+0x110>)
     bb6:	4298      	cmp	r0, r3
     bb8:	d037      	beq.n	c2a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     bba:	2000      	movs	r0, #0
}
     bbc:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     bbe:	4b3d      	ldr	r3, [pc, #244]	; (cb4 <_sercom_get_default_pad+0x114>)
     bc0:	4298      	cmp	r0, r3
     bc2:	d00c      	beq.n	bde <_sercom_get_default_pad+0x3e>
     bc4:	4b3c      	ldr	r3, [pc, #240]	; (cb8 <_sercom_get_default_pad+0x118>)
     bc6:	4298      	cmp	r0, r3
     bc8:	d1f7      	bne.n	bba <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bca:	2901      	cmp	r1, #1
     bcc:	d017      	beq.n	bfe <_sercom_get_default_pad+0x5e>
     bce:	2900      	cmp	r1, #0
     bd0:	d05d      	beq.n	c8e <_sercom_get_default_pad+0xee>
     bd2:	2902      	cmp	r1, #2
     bd4:	d015      	beq.n	c02 <_sercom_get_default_pad+0x62>
     bd6:	2903      	cmp	r1, #3
     bd8:	d015      	beq.n	c06 <_sercom_get_default_pad+0x66>
	return 0;
     bda:	2000      	movs	r0, #0
     bdc:	e7ee      	b.n	bbc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bde:	2901      	cmp	r1, #1
     be0:	d007      	beq.n	bf2 <_sercom_get_default_pad+0x52>
     be2:	2900      	cmp	r1, #0
     be4:	d051      	beq.n	c8a <_sercom_get_default_pad+0xea>
     be6:	2902      	cmp	r1, #2
     be8:	d005      	beq.n	bf6 <_sercom_get_default_pad+0x56>
     bea:	2903      	cmp	r1, #3
     bec:	d005      	beq.n	bfa <_sercom_get_default_pad+0x5a>
	return 0;
     bee:	2000      	movs	r0, #0
     bf0:	e7e4      	b.n	bbc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bf2:	4832      	ldr	r0, [pc, #200]	; (cbc <_sercom_get_default_pad+0x11c>)
     bf4:	e7e2      	b.n	bbc <_sercom_get_default_pad+0x1c>
     bf6:	4832      	ldr	r0, [pc, #200]	; (cc0 <_sercom_get_default_pad+0x120>)
     bf8:	e7e0      	b.n	bbc <_sercom_get_default_pad+0x1c>
     bfa:	4832      	ldr	r0, [pc, #200]	; (cc4 <_sercom_get_default_pad+0x124>)
     bfc:	e7de      	b.n	bbc <_sercom_get_default_pad+0x1c>
     bfe:	4832      	ldr	r0, [pc, #200]	; (cc8 <_sercom_get_default_pad+0x128>)
     c00:	e7dc      	b.n	bbc <_sercom_get_default_pad+0x1c>
     c02:	4832      	ldr	r0, [pc, #200]	; (ccc <_sercom_get_default_pad+0x12c>)
     c04:	e7da      	b.n	bbc <_sercom_get_default_pad+0x1c>
     c06:	4832      	ldr	r0, [pc, #200]	; (cd0 <_sercom_get_default_pad+0x130>)
     c08:	e7d8      	b.n	bbc <_sercom_get_default_pad+0x1c>
     c0a:	2901      	cmp	r1, #1
     c0c:	d007      	beq.n	c1e <_sercom_get_default_pad+0x7e>
     c0e:	2900      	cmp	r1, #0
     c10:	d03f      	beq.n	c92 <_sercom_get_default_pad+0xf2>
     c12:	2902      	cmp	r1, #2
     c14:	d005      	beq.n	c22 <_sercom_get_default_pad+0x82>
     c16:	2903      	cmp	r1, #3
     c18:	d005      	beq.n	c26 <_sercom_get_default_pad+0x86>
	return 0;
     c1a:	2000      	movs	r0, #0
     c1c:	e7ce      	b.n	bbc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c1e:	482d      	ldr	r0, [pc, #180]	; (cd4 <_sercom_get_default_pad+0x134>)
     c20:	e7cc      	b.n	bbc <_sercom_get_default_pad+0x1c>
     c22:	482d      	ldr	r0, [pc, #180]	; (cd8 <_sercom_get_default_pad+0x138>)
     c24:	e7ca      	b.n	bbc <_sercom_get_default_pad+0x1c>
     c26:	482d      	ldr	r0, [pc, #180]	; (cdc <_sercom_get_default_pad+0x13c>)
     c28:	e7c8      	b.n	bbc <_sercom_get_default_pad+0x1c>
     c2a:	2901      	cmp	r1, #1
     c2c:	d007      	beq.n	c3e <_sercom_get_default_pad+0x9e>
     c2e:	2900      	cmp	r1, #0
     c30:	d031      	beq.n	c96 <_sercom_get_default_pad+0xf6>
     c32:	2902      	cmp	r1, #2
     c34:	d005      	beq.n	c42 <_sercom_get_default_pad+0xa2>
     c36:	2903      	cmp	r1, #3
     c38:	d005      	beq.n	c46 <_sercom_get_default_pad+0xa6>
	return 0;
     c3a:	2000      	movs	r0, #0
     c3c:	e7be      	b.n	bbc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c3e:	4828      	ldr	r0, [pc, #160]	; (ce0 <_sercom_get_default_pad+0x140>)
     c40:	e7bc      	b.n	bbc <_sercom_get_default_pad+0x1c>
     c42:	4828      	ldr	r0, [pc, #160]	; (ce4 <_sercom_get_default_pad+0x144>)
     c44:	e7ba      	b.n	bbc <_sercom_get_default_pad+0x1c>
     c46:	4828      	ldr	r0, [pc, #160]	; (ce8 <_sercom_get_default_pad+0x148>)
     c48:	e7b8      	b.n	bbc <_sercom_get_default_pad+0x1c>
     c4a:	2901      	cmp	r1, #1
     c4c:	d007      	beq.n	c5e <_sercom_get_default_pad+0xbe>
     c4e:	2900      	cmp	r1, #0
     c50:	d023      	beq.n	c9a <_sercom_get_default_pad+0xfa>
     c52:	2902      	cmp	r1, #2
     c54:	d005      	beq.n	c62 <_sercom_get_default_pad+0xc2>
     c56:	2903      	cmp	r1, #3
     c58:	d005      	beq.n	c66 <_sercom_get_default_pad+0xc6>
	return 0;
     c5a:	2000      	movs	r0, #0
     c5c:	e7ae      	b.n	bbc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c5e:	4823      	ldr	r0, [pc, #140]	; (cec <_sercom_get_default_pad+0x14c>)
     c60:	e7ac      	b.n	bbc <_sercom_get_default_pad+0x1c>
     c62:	4823      	ldr	r0, [pc, #140]	; (cf0 <_sercom_get_default_pad+0x150>)
     c64:	e7aa      	b.n	bbc <_sercom_get_default_pad+0x1c>
     c66:	4823      	ldr	r0, [pc, #140]	; (cf4 <_sercom_get_default_pad+0x154>)
     c68:	e7a8      	b.n	bbc <_sercom_get_default_pad+0x1c>
     c6a:	2901      	cmp	r1, #1
     c6c:	d007      	beq.n	c7e <_sercom_get_default_pad+0xde>
     c6e:	2900      	cmp	r1, #0
     c70:	d015      	beq.n	c9e <_sercom_get_default_pad+0xfe>
     c72:	2902      	cmp	r1, #2
     c74:	d005      	beq.n	c82 <_sercom_get_default_pad+0xe2>
     c76:	2903      	cmp	r1, #3
     c78:	d005      	beq.n	c86 <_sercom_get_default_pad+0xe6>
	return 0;
     c7a:	2000      	movs	r0, #0
     c7c:	e79e      	b.n	bbc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c7e:	481e      	ldr	r0, [pc, #120]	; (cf8 <_sercom_get_default_pad+0x158>)
     c80:	e79c      	b.n	bbc <_sercom_get_default_pad+0x1c>
     c82:	481e      	ldr	r0, [pc, #120]	; (cfc <_sercom_get_default_pad+0x15c>)
     c84:	e79a      	b.n	bbc <_sercom_get_default_pad+0x1c>
     c86:	481e      	ldr	r0, [pc, #120]	; (d00 <_sercom_get_default_pad+0x160>)
     c88:	e798      	b.n	bbc <_sercom_get_default_pad+0x1c>
     c8a:	481e      	ldr	r0, [pc, #120]	; (d04 <_sercom_get_default_pad+0x164>)
     c8c:	e796      	b.n	bbc <_sercom_get_default_pad+0x1c>
     c8e:	2003      	movs	r0, #3
     c90:	e794      	b.n	bbc <_sercom_get_default_pad+0x1c>
     c92:	481d      	ldr	r0, [pc, #116]	; (d08 <_sercom_get_default_pad+0x168>)
     c94:	e792      	b.n	bbc <_sercom_get_default_pad+0x1c>
     c96:	481d      	ldr	r0, [pc, #116]	; (d0c <_sercom_get_default_pad+0x16c>)
     c98:	e790      	b.n	bbc <_sercom_get_default_pad+0x1c>
     c9a:	481d      	ldr	r0, [pc, #116]	; (d10 <_sercom_get_default_pad+0x170>)
     c9c:	e78e      	b.n	bbc <_sercom_get_default_pad+0x1c>
     c9e:	481d      	ldr	r0, [pc, #116]	; (d14 <_sercom_get_default_pad+0x174>)
     ca0:	e78c      	b.n	bbc <_sercom_get_default_pad+0x1c>
     ca2:	46c0      	nop			; (mov r8, r8)
     ca4:	42001000 	.word	0x42001000
     ca8:	42001800 	.word	0x42001800
     cac:	42001c00 	.word	0x42001c00
     cb0:	42001400 	.word	0x42001400
     cb4:	42000800 	.word	0x42000800
     cb8:	42000c00 	.word	0x42000c00
     cbc:	00050003 	.word	0x00050003
     cc0:	00060003 	.word	0x00060003
     cc4:	00070003 	.word	0x00070003
     cc8:	00010003 	.word	0x00010003
     ccc:	001e0003 	.word	0x001e0003
     cd0:	001f0003 	.word	0x001f0003
     cd4:	000d0002 	.word	0x000d0002
     cd8:	000e0002 	.word	0x000e0002
     cdc:	000f0002 	.word	0x000f0002
     ce0:	00110003 	.word	0x00110003
     ce4:	00120003 	.word	0x00120003
     ce8:	00130003 	.word	0x00130003
     cec:	003f0005 	.word	0x003f0005
     cf0:	003e0005 	.word	0x003e0005
     cf4:	00520005 	.word	0x00520005
     cf8:	00170003 	.word	0x00170003
     cfc:	00180003 	.word	0x00180003
     d00:	00190003 	.word	0x00190003
     d04:	00040003 	.word	0x00040003
     d08:	000c0002 	.word	0x000c0002
     d0c:	00100003 	.word	0x00100003
     d10:	00530005 	.word	0x00530005
     d14:	00160003 	.word	0x00160003

00000d18 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     d18:	b530      	push	{r4, r5, lr}
     d1a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     d1c:	4b0b      	ldr	r3, [pc, #44]	; (d4c <_sercom_get_sercom_inst_index+0x34>)
     d1e:	466a      	mov	r2, sp
     d20:	cb32      	ldmia	r3!, {r1, r4, r5}
     d22:	c232      	stmia	r2!, {r1, r4, r5}
     d24:	cb32      	ldmia	r3!, {r1, r4, r5}
     d26:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     d28:	9b00      	ldr	r3, [sp, #0]
     d2a:	4283      	cmp	r3, r0
     d2c:	d00b      	beq.n	d46 <_sercom_get_sercom_inst_index+0x2e>
     d2e:	2301      	movs	r3, #1
     d30:	009a      	lsls	r2, r3, #2
     d32:	4669      	mov	r1, sp
     d34:	5852      	ldr	r2, [r2, r1]
     d36:	4282      	cmp	r2, r0
     d38:	d006      	beq.n	d48 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d3a:	3301      	adds	r3, #1
     d3c:	2b06      	cmp	r3, #6
     d3e:	d1f7      	bne.n	d30 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     d40:	2000      	movs	r0, #0
}
     d42:	b007      	add	sp, #28
     d44:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d46:	2300      	movs	r3, #0
			return i;
     d48:	b2d8      	uxtb	r0, r3
     d4a:	e7fa      	b.n	d42 <_sercom_get_sercom_inst_index+0x2a>
     d4c:	00008e28 	.word	0x00008e28

00000d50 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     d50:	4770      	bx	lr
	...

00000d54 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     d54:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     d56:	4b0a      	ldr	r3, [pc, #40]	; (d80 <_sercom_set_handler+0x2c>)
     d58:	781b      	ldrb	r3, [r3, #0]
     d5a:	2b00      	cmp	r3, #0
     d5c:	d10c      	bne.n	d78 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     d5e:	4f09      	ldr	r7, [pc, #36]	; (d84 <_sercom_set_handler+0x30>)
     d60:	4e09      	ldr	r6, [pc, #36]	; (d88 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     d62:	4d0a      	ldr	r5, [pc, #40]	; (d8c <_sercom_set_handler+0x38>)
     d64:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     d66:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     d68:	195a      	adds	r2, r3, r5
     d6a:	6014      	str	r4, [r2, #0]
     d6c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d6e:	2b18      	cmp	r3, #24
     d70:	d1f9      	bne.n	d66 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     d72:	2201      	movs	r2, #1
     d74:	4b02      	ldr	r3, [pc, #8]	; (d80 <_sercom_set_handler+0x2c>)
     d76:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     d78:	0080      	lsls	r0, r0, #2
     d7a:	4b02      	ldr	r3, [pc, #8]	; (d84 <_sercom_set_handler+0x30>)
     d7c:	50c1      	str	r1, [r0, r3]
}
     d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d80:	20000202 	.word	0x20000202
     d84:	20000204 	.word	0x20000204
     d88:	00000d51 	.word	0x00000d51
     d8c:	20000984 	.word	0x20000984

00000d90 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     d90:	b500      	push	{lr}
     d92:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     d94:	2309      	movs	r3, #9
     d96:	466a      	mov	r2, sp
     d98:	7013      	strb	r3, [r2, #0]
     d9a:	3301      	adds	r3, #1
     d9c:	7053      	strb	r3, [r2, #1]
     d9e:	3301      	adds	r3, #1
     da0:	7093      	strb	r3, [r2, #2]
     da2:	3301      	adds	r3, #1
     da4:	70d3      	strb	r3, [r2, #3]
     da6:	3301      	adds	r3, #1
     da8:	7113      	strb	r3, [r2, #4]
     daa:	3301      	adds	r3, #1
     dac:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     dae:	4b03      	ldr	r3, [pc, #12]	; (dbc <_sercom_get_interrupt_vector+0x2c>)
     db0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     db2:	466b      	mov	r3, sp
     db4:	5618      	ldrsb	r0, [r3, r0]
}
     db6:	b003      	add	sp, #12
     db8:	bd00      	pop	{pc}
     dba:	46c0      	nop			; (mov r8, r8)
     dbc:	00000d19 	.word	0x00000d19

00000dc0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     dc0:	b510      	push	{r4, lr}
     dc2:	4b02      	ldr	r3, [pc, #8]	; (dcc <SERCOM0_Handler+0xc>)
     dc4:	681b      	ldr	r3, [r3, #0]
     dc6:	2000      	movs	r0, #0
     dc8:	4798      	blx	r3
     dca:	bd10      	pop	{r4, pc}
     dcc:	20000204 	.word	0x20000204

00000dd0 <SERCOM1_Handler>:
     dd0:	b510      	push	{r4, lr}
     dd2:	4b02      	ldr	r3, [pc, #8]	; (ddc <SERCOM1_Handler+0xc>)
     dd4:	685b      	ldr	r3, [r3, #4]
     dd6:	2001      	movs	r0, #1
     dd8:	4798      	blx	r3
     dda:	bd10      	pop	{r4, pc}
     ddc:	20000204 	.word	0x20000204

00000de0 <SERCOM2_Handler>:
     de0:	b510      	push	{r4, lr}
     de2:	4b02      	ldr	r3, [pc, #8]	; (dec <SERCOM2_Handler+0xc>)
     de4:	689b      	ldr	r3, [r3, #8]
     de6:	2002      	movs	r0, #2
     de8:	4798      	blx	r3
     dea:	bd10      	pop	{r4, pc}
     dec:	20000204 	.word	0x20000204

00000df0 <SERCOM3_Handler>:
     df0:	b510      	push	{r4, lr}
     df2:	4b02      	ldr	r3, [pc, #8]	; (dfc <SERCOM3_Handler+0xc>)
     df4:	68db      	ldr	r3, [r3, #12]
     df6:	2003      	movs	r0, #3
     df8:	4798      	blx	r3
     dfa:	bd10      	pop	{r4, pc}
     dfc:	20000204 	.word	0x20000204

00000e00 <SERCOM4_Handler>:
     e00:	b510      	push	{r4, lr}
     e02:	4b02      	ldr	r3, [pc, #8]	; (e0c <SERCOM4_Handler+0xc>)
     e04:	691b      	ldr	r3, [r3, #16]
     e06:	2004      	movs	r0, #4
     e08:	4798      	blx	r3
     e0a:	bd10      	pop	{r4, pc}
     e0c:	20000204 	.word	0x20000204

00000e10 <SERCOM5_Handler>:
     e10:	b510      	push	{r4, lr}
     e12:	4b02      	ldr	r3, [pc, #8]	; (e1c <SERCOM5_Handler+0xc>)
     e14:	695b      	ldr	r3, [r3, #20]
     e16:	2005      	movs	r0, #5
     e18:	4798      	blx	r3
     e1a:	bd10      	pop	{r4, pc}
     e1c:	20000204 	.word	0x20000204

00000e20 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     e20:	b5f0      	push	{r4, r5, r6, r7, lr}
     e22:	46d6      	mov	lr, sl
     e24:	464f      	mov	r7, r9
     e26:	b580      	push	{r7, lr}
     e28:	b08b      	sub	sp, #44	; 0x2c
     e2a:	4681      	mov	r9, r0
     e2c:	000f      	movs	r7, r1
     e2e:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     e30:	0003      	movs	r3, r0
     e32:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     e34:	680b      	ldr	r3, [r1, #0]
     e36:	079b      	lsls	r3, r3, #30
     e38:	d409      	bmi.n	e4e <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     e3a:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     e3c:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     e3e:	07db      	lsls	r3, r3, #31
     e40:	d400      	bmi.n	e44 <spi_init+0x24>
     e42:	e098      	b.n	f76 <spi_init+0x156>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     e44:	b00b      	add	sp, #44	; 0x2c
     e46:	bc0c      	pop	{r2, r3}
     e48:	4691      	mov	r9, r2
     e4a:	469a      	mov	sl, r3
     e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
     e4e:	6a93      	ldr	r3, [r2, #40]	; 0x28
     e50:	9305      	str	r3, [sp, #20]
     e52:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     e54:	9306      	str	r3, [sp, #24]
     e56:	6b13      	ldr	r3, [r2, #48]	; 0x30
     e58:	9307      	str	r3, [sp, #28]
     e5a:	6b53      	ldr	r3, [r2, #52]	; 0x34
     e5c:	9308      	str	r3, [sp, #32]
     e5e:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     e60:	ab05      	add	r3, sp, #20
     e62:	9301      	str	r3, [sp, #4]
     e64:	e00a      	b.n	e7c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     e66:	0038      	movs	r0, r7
     e68:	4b93      	ldr	r3, [pc, #588]	; (10b8 <spi_init+0x298>)
     e6a:	4798      	blx	r3
     e6c:	e00c      	b.n	e88 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     e6e:	230f      	movs	r3, #15
     e70:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
     e72:	4281      	cmp	r1, r0
     e74:	d12d      	bne.n	ed2 <spi_init+0xb2>
     e76:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     e78:	2e04      	cmp	r6, #4
     e7a:	d02f      	beq.n	edc <spi_init+0xbc>
     e7c:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
     e7e:	00b3      	lsls	r3, r6, #2
     e80:	9a01      	ldr	r2, [sp, #4]
     e82:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     e84:	2800      	cmp	r0, #0
     e86:	d0ee      	beq.n	e66 <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
     e88:	1c43      	adds	r3, r0, #1
     e8a:	d0f4      	beq.n	e76 <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
     e8c:	0401      	lsls	r1, r0, #16
     e8e:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     e90:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
     e92:	b2c3      	uxtb	r3, r0
     e94:	469c      	mov	ip, r3
		return NULL;
     e96:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     e98:	0602      	lsls	r2, r0, #24
     e9a:	d405      	bmi.n	ea8 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
     e9c:	4663      	mov	r3, ip
     e9e:	095b      	lsrs	r3, r3, #5
     ea0:	01db      	lsls	r3, r3, #7
     ea2:	4a86      	ldr	r2, [pc, #536]	; (10bc <spi_init+0x29c>)
     ea4:	4692      	mov	sl, r2
     ea6:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
     ea8:	221f      	movs	r2, #31
     eaa:	4660      	mov	r0, ip
     eac:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     eae:	1898      	adds	r0, r3, r2
     eb0:	3040      	adds	r0, #64	; 0x40
     eb2:	7800      	ldrb	r0, [r0, #0]
     eb4:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
     eb6:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     eb8:	4655      	mov	r5, sl
     eba:	07ed      	lsls	r5, r5, #31
     ebc:	d5d9      	bpl.n	e72 <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     ebe:	0852      	lsrs	r2, r2, #1
     ec0:	189b      	adds	r3, r3, r2
     ec2:	3330      	adds	r3, #48	; 0x30
     ec4:	7818      	ldrb	r0, [r3, #0]
     ec6:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
     ec8:	4663      	mov	r3, ip
     eca:	07db      	lsls	r3, r3, #31
     ecc:	d5cf      	bpl.n	e6e <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     ece:	0900      	lsrs	r0, r0, #4
     ed0:	e7cf      	b.n	e72 <spi_init+0x52>
			module->hw = NULL;
     ed2:	2300      	movs	r3, #0
     ed4:	464a      	mov	r2, r9
     ed6:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
     ed8:	201c      	movs	r0, #28
     eda:	e7b3      	b.n	e44 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     edc:	2013      	movs	r0, #19
     ede:	4b78      	ldr	r3, [pc, #480]	; (10c0 <spi_init+0x2a0>)
     ee0:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     ee2:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
     ee4:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
     ee6:	2a01      	cmp	r2, #1
     ee8:	d027      	beq.n	f3a <spi_init+0x11a>
	ctrla |= config->mux_setting;
     eea:	6863      	ldr	r3, [r4, #4]
     eec:	68a2      	ldr	r2, [r4, #8]
     eee:	4313      	orrs	r3, r2
     ef0:	68e2      	ldr	r2, [r4, #12]
     ef2:	4313      	orrs	r3, r2
     ef4:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
     ef6:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
     ef8:	7c61      	ldrb	r1, [r4, #17]
     efa:	2900      	cmp	r1, #0
     efc:	d001      	beq.n	f02 <spi_init+0xe2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     efe:	2180      	movs	r1, #128	; 0x80
     f00:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
     f02:	7ca1      	ldrb	r1, [r4, #18]
     f04:	2900      	cmp	r1, #0
     f06:	d002      	beq.n	f0e <spi_init+0xee>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     f08:	2180      	movs	r1, #128	; 0x80
     f0a:	0289      	lsls	r1, r1, #10
     f0c:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
     f0e:	7ce1      	ldrb	r1, [r4, #19]
     f10:	2900      	cmp	r1, #0
     f12:	d002      	beq.n	f1a <spi_init+0xfa>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     f14:	2180      	movs	r1, #128	; 0x80
     f16:	0089      	lsls	r1, r1, #2
     f18:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
     f1a:	7d21      	ldrb	r1, [r4, #20]
     f1c:	2900      	cmp	r1, #0
     f1e:	d002      	beq.n	f26 <spi_init+0x106>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     f20:	2180      	movs	r1, #128	; 0x80
     f22:	0189      	lsls	r1, r1, #6
     f24:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
     f26:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     f28:	2002      	movs	r0, #2
     f2a:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
     f2c:	428b      	cmp	r3, r1
     f2e:	d018      	beq.n	f62 <spi_init+0x142>
	module->hw = NULL;
     f30:	2300      	movs	r3, #0
     f32:	464a      	mov	r2, r9
     f34:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
     f36:	201c      	movs	r0, #28
     f38:	e784      	b.n	e44 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
     f3a:	aa04      	add	r2, sp, #16
     f3c:	0001      	movs	r1, r0
     f3e:	69a0      	ldr	r0, [r4, #24]
     f40:	4b60      	ldr	r3, [pc, #384]	; (10c4 <spi_init+0x2a4>)
     f42:	4798      	blx	r3
     f44:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     f46:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     f48:	2b00      	cmp	r3, #0
     f4a:	d000      	beq.n	f4e <spi_init+0x12e>
     f4c:	e77a      	b.n	e44 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     f4e:	7b3b      	ldrb	r3, [r7, #12]
     f50:	b2db      	uxtb	r3, r3
     f52:	aa04      	add	r2, sp, #16
     f54:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     f56:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     f58:	429a      	cmp	r2, r3
     f5a:	d000      	beq.n	f5e <spi_init+0x13e>
     f5c:	e772      	b.n	e44 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     f5e:	350c      	adds	r5, #12
     f60:	e7c3      	b.n	eea <spi_init+0xca>
			spi_module->CTRLB.reg == ctrlb) {
     f62:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
     f64:	4293      	cmp	r3, r2
     f66:	d1e3      	bne.n	f30 <spi_init+0x110>
		module->mode           = config->mode;
     f68:	7823      	ldrb	r3, [r4, #0]
     f6a:	464a      	mov	r2, r9
     f6c:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
     f6e:	7c23      	ldrb	r3, [r4, #16]
     f70:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
     f72:	2000      	movs	r0, #0
     f74:	e766      	b.n	e44 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f76:	0008      	movs	r0, r1
     f78:	4b53      	ldr	r3, [pc, #332]	; (10c8 <spi_init+0x2a8>)
     f7a:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     f7c:	4a53      	ldr	r2, [pc, #332]	; (10cc <spi_init+0x2ac>)
     f7e:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     f80:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     f82:	2301      	movs	r3, #1
     f84:	40ab      	lsls	r3, r5
     f86:	430b      	orrs	r3, r1
     f88:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     f8a:	a909      	add	r1, sp, #36	; 0x24
     f8c:	2624      	movs	r6, #36	; 0x24
     f8e:	5da3      	ldrb	r3, [r4, r6]
     f90:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f92:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     f94:	b2c5      	uxtb	r5, r0
     f96:	0028      	movs	r0, r5
     f98:	4b4d      	ldr	r3, [pc, #308]	; (10d0 <spi_init+0x2b0>)
     f9a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     f9c:	0028      	movs	r0, r5
     f9e:	4b4d      	ldr	r3, [pc, #308]	; (10d4 <spi_init+0x2b4>)
     fa0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     fa2:	5da0      	ldrb	r0, [r4, r6]
     fa4:	2100      	movs	r1, #0
     fa6:	4b4c      	ldr	r3, [pc, #304]	; (10d8 <spi_init+0x2b8>)
     fa8:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     faa:	7823      	ldrb	r3, [r4, #0]
     fac:	2b01      	cmp	r3, #1
     fae:	d019      	beq.n	fe4 <spi_init+0x1c4>
	SercomSpi *const spi_module = &(module->hw->SPI);
     fb0:	464b      	mov	r3, r9
     fb2:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     fb4:	ab04      	add	r3, sp, #16
     fb6:	2280      	movs	r2, #128	; 0x80
     fb8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     fba:	2200      	movs	r2, #0
     fbc:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     fbe:	2101      	movs	r1, #1
     fc0:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     fc2:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
     fc4:	7823      	ldrb	r3, [r4, #0]
     fc6:	2b00      	cmp	r3, #0
     fc8:	d101      	bne.n	fce <spi_init+0x1ae>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     fca:	ab04      	add	r3, sp, #16
     fcc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     fce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     fd0:	9305      	str	r3, [sp, #20]
     fd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     fd4:	9306      	str	r3, [sp, #24]
     fd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
     fd8:	9307      	str	r3, [sp, #28]
     fda:	6b63      	ldr	r3, [r4, #52]	; 0x34
     fdc:	9308      	str	r3, [sp, #32]
     fde:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     fe0:	ad05      	add	r5, sp, #20
     fe2:	e011      	b.n	1008 <spi_init+0x1e8>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     fe4:	683b      	ldr	r3, [r7, #0]
     fe6:	220c      	movs	r2, #12
     fe8:	4313      	orrs	r3, r2
     fea:	603b      	str	r3, [r7, #0]
     fec:	e7e0      	b.n	fb0 <spi_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     fee:	0030      	movs	r0, r6
     ff0:	4b31      	ldr	r3, [pc, #196]	; (10b8 <spi_init+0x298>)
     ff2:	4798      	blx	r3
     ff4:	e00d      	b.n	1012 <spi_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     ff6:	a904      	add	r1, sp, #16
     ff8:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     ffa:	0c00      	lsrs	r0, r0, #16
     ffc:	b2c0      	uxtb	r0, r0
     ffe:	4b37      	ldr	r3, [pc, #220]	; (10dc <spi_init+0x2bc>)
    1000:	4798      	blx	r3
    1002:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1004:	2f04      	cmp	r7, #4
    1006:	d007      	beq.n	1018 <spi_init+0x1f8>
    1008:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    100a:	00bb      	lsls	r3, r7, #2
    100c:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    100e:	2800      	cmp	r0, #0
    1010:	d0ed      	beq.n	fee <spi_init+0x1ce>
		if (current_pinmux != PINMUX_UNUSED) {
    1012:	1c43      	adds	r3, r0, #1
    1014:	d1ef      	bne.n	ff6 <spi_init+0x1d6>
    1016:	e7f4      	b.n	1002 <spi_init+0x1e2>
	module->mode             = config->mode;
    1018:	7823      	ldrb	r3, [r4, #0]
    101a:	464a      	mov	r2, r9
    101c:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    101e:	7c23      	ldrb	r3, [r4, #16]
    1020:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    1022:	7ca3      	ldrb	r3, [r4, #18]
    1024:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    1026:	7d23      	ldrb	r3, [r4, #20]
    1028:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    102a:	2200      	movs	r2, #0
    102c:	ab02      	add	r3, sp, #8
    102e:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1030:	7823      	ldrb	r3, [r4, #0]
    1032:	2b01      	cmp	r3, #1
    1034:	d028      	beq.n	1088 <spi_init+0x268>
	ctrla |= config->transfer_mode;
    1036:	6863      	ldr	r3, [r4, #4]
    1038:	68a2      	ldr	r2, [r4, #8]
    103a:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    103c:	68e2      	ldr	r2, [r4, #12]
    103e:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    1040:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    1042:	7c62      	ldrb	r2, [r4, #17]
    1044:	2a00      	cmp	r2, #0
    1046:	d103      	bne.n	1050 <spi_init+0x230>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1048:	4a25      	ldr	r2, [pc, #148]	; (10e0 <spi_init+0x2c0>)
    104a:	7892      	ldrb	r2, [r2, #2]
    104c:	0792      	lsls	r2, r2, #30
    104e:	d501      	bpl.n	1054 <spi_init+0x234>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1050:	2280      	movs	r2, #128	; 0x80
    1052:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    1054:	7ca2      	ldrb	r2, [r4, #18]
    1056:	2a00      	cmp	r2, #0
    1058:	d002      	beq.n	1060 <spi_init+0x240>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    105a:	2280      	movs	r2, #128	; 0x80
    105c:	0292      	lsls	r2, r2, #10
    105e:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    1060:	7ce2      	ldrb	r2, [r4, #19]
    1062:	2a00      	cmp	r2, #0
    1064:	d002      	beq.n	106c <spi_init+0x24c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1066:	2280      	movs	r2, #128	; 0x80
    1068:	0092      	lsls	r2, r2, #2
    106a:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    106c:	7d22      	ldrb	r2, [r4, #20]
    106e:	2a00      	cmp	r2, #0
    1070:	d002      	beq.n	1078 <spi_init+0x258>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1072:	2280      	movs	r2, #128	; 0x80
    1074:	0192      	lsls	r2, r2, #6
    1076:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    1078:	6832      	ldr	r2, [r6, #0]
    107a:	4313      	orrs	r3, r2
    107c:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    107e:	6873      	ldr	r3, [r6, #4]
    1080:	430b      	orrs	r3, r1
    1082:	6073      	str	r3, [r6, #4]
	return STATUS_OK;
    1084:	2000      	movs	r0, #0
    1086:	e6dd      	b.n	e44 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1088:	464b      	mov	r3, r9
    108a:	6818      	ldr	r0, [r3, #0]
    108c:	4b0e      	ldr	r3, [pc, #56]	; (10c8 <spi_init+0x2a8>)
    108e:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1090:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1092:	b2c0      	uxtb	r0, r0
    1094:	4b0a      	ldr	r3, [pc, #40]	; (10c0 <spi_init+0x2a0>)
    1096:	4798      	blx	r3
    1098:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    109a:	ab02      	add	r3, sp, #8
    109c:	1d9a      	adds	r2, r3, #6
    109e:	69a0      	ldr	r0, [r4, #24]
    10a0:	4b08      	ldr	r3, [pc, #32]	; (10c4 <spi_init+0x2a4>)
    10a2:	4798      	blx	r3
    10a4:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    10a6:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    10a8:	2b00      	cmp	r3, #0
    10aa:	d000      	beq.n	10ae <spi_init+0x28e>
    10ac:	e6ca      	b.n	e44 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    10ae:	ab02      	add	r3, sp, #8
    10b0:	3306      	adds	r3, #6
    10b2:	781b      	ldrb	r3, [r3, #0]
    10b4:	7333      	strb	r3, [r6, #12]
    10b6:	e7be      	b.n	1036 <spi_init+0x216>
    10b8:	00000ba1 	.word	0x00000ba1
    10bc:	41004400 	.word	0x41004400
    10c0:	00001fd9 	.word	0x00001fd9
    10c4:	0000095d 	.word	0x0000095d
    10c8:	00000d19 	.word	0x00000d19
    10cc:	40000400 	.word	0x40000400
    10d0:	00001fbd 	.word	0x00001fbd
    10d4:	00001f31 	.word	0x00001f31
    10d8:	00000b55 	.word	0x00000b55
    10dc:	000020b5 	.word	0x000020b5
    10e0:	41002000 	.word	0x41002000

000010e4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    10e4:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    10e6:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    10e8:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    10ea:	2c01      	cmp	r4, #1
    10ec:	d001      	beq.n	10f2 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    10ee:	0018      	movs	r0, r3
    10f0:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    10f2:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    10f4:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    10f6:	2c00      	cmp	r4, #0
    10f8:	d1f9      	bne.n	10ee <spi_select_slave+0xa>
		if (select) {
    10fa:	2a00      	cmp	r2, #0
    10fc:	d058      	beq.n	11b0 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    10fe:	784b      	ldrb	r3, [r1, #1]
    1100:	2b00      	cmp	r3, #0
    1102:	d044      	beq.n	118e <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1104:	6803      	ldr	r3, [r0, #0]
    1106:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    1108:	07db      	lsls	r3, r3, #31
    110a:	d410      	bmi.n	112e <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    110c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    110e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1110:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1112:	2900      	cmp	r1, #0
    1114:	d104      	bne.n	1120 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    1116:	0953      	lsrs	r3, r2, #5
    1118:	01db      	lsls	r3, r3, #7
    111a:	492e      	ldr	r1, [pc, #184]	; (11d4 <spi_select_slave+0xf0>)
    111c:	468c      	mov	ip, r1
    111e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1120:	211f      	movs	r1, #31
    1122:	4011      	ands	r1, r2
    1124:	2201      	movs	r2, #1
    1126:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1128:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    112a:	2305      	movs	r3, #5
    112c:	e7df      	b.n	10ee <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    112e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1130:	09d4      	lsrs	r4, r2, #7
		return NULL;
    1132:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1134:	2c00      	cmp	r4, #0
    1136:	d104      	bne.n	1142 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    1138:	0953      	lsrs	r3, r2, #5
    113a:	01db      	lsls	r3, r3, #7
    113c:	4c25      	ldr	r4, [pc, #148]	; (11d4 <spi_select_slave+0xf0>)
    113e:	46a4      	mov	ip, r4
    1140:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1142:	241f      	movs	r4, #31
    1144:	4014      	ands	r4, r2
    1146:	2201      	movs	r2, #1
    1148:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    114a:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    114c:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    114e:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1150:	07d2      	lsls	r2, r2, #31
    1152:	d501      	bpl.n	1158 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1154:	788a      	ldrb	r2, [r1, #2]
    1156:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    1158:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    115a:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    115c:	2a00      	cmp	r2, #0
    115e:	d1c6      	bne.n	10ee <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1160:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    1162:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1164:	7e13      	ldrb	r3, [r2, #24]
    1166:	420b      	tst	r3, r1
    1168:	d0fc      	beq.n	1164 <spi_select_slave+0x80>
    116a:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    116c:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    116e:	0749      	lsls	r1, r1, #29
    1170:	d5bd      	bpl.n	10ee <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1172:	8b53      	ldrh	r3, [r2, #26]
    1174:	075b      	lsls	r3, r3, #29
    1176:	d501      	bpl.n	117c <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1178:	2304      	movs	r3, #4
    117a:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    117c:	7983      	ldrb	r3, [r0, #6]
    117e:	2b01      	cmp	r3, #1
    1180:	d002      	beq.n	1188 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1182:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1184:	2300      	movs	r3, #0
    1186:	e7b2      	b.n	10ee <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1188:	6a93      	ldr	r3, [r2, #40]	; 0x28
    118a:	2300      	movs	r3, #0
    118c:	e7af      	b.n	10ee <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    118e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1190:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1192:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1194:	2900      	cmp	r1, #0
    1196:	d104      	bne.n	11a2 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    1198:	0953      	lsrs	r3, r2, #5
    119a:	01db      	lsls	r3, r3, #7
    119c:	490d      	ldr	r1, [pc, #52]	; (11d4 <spi_select_slave+0xf0>)
    119e:	468c      	mov	ip, r1
    11a0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    11a2:	211f      	movs	r1, #31
    11a4:	4011      	ands	r1, r2
    11a6:	2201      	movs	r2, #1
    11a8:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    11aa:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    11ac:	2300      	movs	r3, #0
    11ae:	e79e      	b.n	10ee <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    11b0:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    11b2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    11b4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    11b6:	2900      	cmp	r1, #0
    11b8:	d104      	bne.n	11c4 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    11ba:	0953      	lsrs	r3, r2, #5
    11bc:	01db      	lsls	r3, r3, #7
    11be:	4905      	ldr	r1, [pc, #20]	; (11d4 <spi_select_slave+0xf0>)
    11c0:	468c      	mov	ip, r1
    11c2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    11c4:	211f      	movs	r1, #31
    11c6:	4011      	ands	r1, r2
    11c8:	2201      	movs	r2, #1
    11ca:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    11cc:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    11ce:	2300      	movs	r3, #0
    11d0:	e78d      	b.n	10ee <spi_select_slave+0xa>
    11d2:	46c0      	nop			; (mov r8, r8)
    11d4:	41004400 	.word	0x41004400

000011d8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    11d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    11da:	46de      	mov	lr, fp
    11dc:	4657      	mov	r7, sl
    11de:	464e      	mov	r6, r9
    11e0:	4645      	mov	r5, r8
    11e2:	b5e0      	push	{r5, r6, r7, lr}
    11e4:	b091      	sub	sp, #68	; 0x44
    11e6:	0005      	movs	r5, r0
    11e8:	000c      	movs	r4, r1
    11ea:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    11ec:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    11ee:	0008      	movs	r0, r1
    11f0:	4bbb      	ldr	r3, [pc, #748]	; (14e0 <usart_init+0x308>)
    11f2:	4798      	blx	r3
    11f4:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    11f6:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    11f8:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    11fa:	07db      	lsls	r3, r3, #31
    11fc:	d506      	bpl.n	120c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    11fe:	b011      	add	sp, #68	; 0x44
    1200:	bc3c      	pop	{r2, r3, r4, r5}
    1202:	4690      	mov	r8, r2
    1204:	4699      	mov	r9, r3
    1206:	46a2      	mov	sl, r4
    1208:	46ab      	mov	fp, r5
    120a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    120c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    120e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1210:	079b      	lsls	r3, r3, #30
    1212:	d4f4      	bmi.n	11fe <usart_init+0x26>
    1214:	49b3      	ldr	r1, [pc, #716]	; (14e4 <usart_init+0x30c>)
    1216:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1218:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    121a:	2301      	movs	r3, #1
    121c:	40bb      	lsls	r3, r7
    121e:	4303      	orrs	r3, r0
    1220:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1222:	a90f      	add	r1, sp, #60	; 0x3c
    1224:	272d      	movs	r7, #45	; 0x2d
    1226:	5df3      	ldrb	r3, [r6, r7]
    1228:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    122a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    122c:	b2d3      	uxtb	r3, r2
    122e:	9302      	str	r3, [sp, #8]
    1230:	0018      	movs	r0, r3
    1232:	4bad      	ldr	r3, [pc, #692]	; (14e8 <usart_init+0x310>)
    1234:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1236:	9802      	ldr	r0, [sp, #8]
    1238:	4bac      	ldr	r3, [pc, #688]	; (14ec <usart_init+0x314>)
    123a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    123c:	5df0      	ldrb	r0, [r6, r7]
    123e:	2100      	movs	r1, #0
    1240:	4bab      	ldr	r3, [pc, #684]	; (14f0 <usart_init+0x318>)
    1242:	4798      	blx	r3
	module->character_size = config->character_size;
    1244:	7af3      	ldrb	r3, [r6, #11]
    1246:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1248:	2324      	movs	r3, #36	; 0x24
    124a:	5cf3      	ldrb	r3, [r6, r3]
    124c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    124e:	2325      	movs	r3, #37	; 0x25
    1250:	5cf3      	ldrb	r3, [r6, r3]
    1252:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1254:	7ef3      	ldrb	r3, [r6, #27]
    1256:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1258:	7f33      	ldrb	r3, [r6, #28]
    125a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    125c:	682b      	ldr	r3, [r5, #0]
    125e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1260:	0018      	movs	r0, r3
    1262:	4b9f      	ldr	r3, [pc, #636]	; (14e0 <usart_init+0x308>)
    1264:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1266:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1268:	2200      	movs	r2, #0
    126a:	230e      	movs	r3, #14
    126c:	a906      	add	r1, sp, #24
    126e:	468c      	mov	ip, r1
    1270:	4463      	add	r3, ip
    1272:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1274:	8a32      	ldrh	r2, [r6, #16]
    1276:	9202      	str	r2, [sp, #8]
    1278:	2380      	movs	r3, #128	; 0x80
    127a:	01db      	lsls	r3, r3, #7
    127c:	429a      	cmp	r2, r3
    127e:	d100      	bne.n	1282 <usart_init+0xaa>
    1280:	e09c      	b.n	13bc <usart_init+0x1e4>
    1282:	d90f      	bls.n	12a4 <usart_init+0xcc>
    1284:	23c0      	movs	r3, #192	; 0xc0
    1286:	01db      	lsls	r3, r3, #7
    1288:	9a02      	ldr	r2, [sp, #8]
    128a:	429a      	cmp	r2, r3
    128c:	d100      	bne.n	1290 <usart_init+0xb8>
    128e:	e090      	b.n	13b2 <usart_init+0x1da>
    1290:	2380      	movs	r3, #128	; 0x80
    1292:	021b      	lsls	r3, r3, #8
    1294:	429a      	cmp	r2, r3
    1296:	d000      	beq.n	129a <usart_init+0xc2>
    1298:	e11d      	b.n	14d6 <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    129a:	2303      	movs	r3, #3
    129c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    129e:	2300      	movs	r3, #0
    12a0:	9307      	str	r3, [sp, #28]
    12a2:	e008      	b.n	12b6 <usart_init+0xde>
	switch (config->sample_rate) {
    12a4:	2380      	movs	r3, #128	; 0x80
    12a6:	019b      	lsls	r3, r3, #6
    12a8:	429a      	cmp	r2, r3
    12aa:	d000      	beq.n	12ae <usart_init+0xd6>
    12ac:	e113      	b.n	14d6 <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    12ae:	2310      	movs	r3, #16
    12b0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    12b2:	3b0f      	subs	r3, #15
    12b4:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    12b6:	6833      	ldr	r3, [r6, #0]
    12b8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    12ba:	68f3      	ldr	r3, [r6, #12]
    12bc:	469b      	mov	fp, r3
		config->sample_adjustment |
    12be:	6973      	ldr	r3, [r6, #20]
    12c0:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    12c2:	7e33      	ldrb	r3, [r6, #24]
    12c4:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    12c6:	2326      	movs	r3, #38	; 0x26
    12c8:	5cf3      	ldrb	r3, [r6, r3]
    12ca:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    12cc:	6873      	ldr	r3, [r6, #4]
    12ce:	4699      	mov	r9, r3
	switch (transfer_mode)
    12d0:	2b00      	cmp	r3, #0
    12d2:	d100      	bne.n	12d6 <usart_init+0xfe>
    12d4:	e09e      	b.n	1414 <usart_init+0x23c>
    12d6:	2380      	movs	r3, #128	; 0x80
    12d8:	055b      	lsls	r3, r3, #21
    12da:	4599      	cmp	r9, r3
    12dc:	d100      	bne.n	12e0 <usart_init+0x108>
    12de:	e082      	b.n	13e6 <usart_init+0x20e>
	if(config->encoding_format_enable) {
    12e0:	7e73      	ldrb	r3, [r6, #25]
    12e2:	2b00      	cmp	r3, #0
    12e4:	d002      	beq.n	12ec <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    12e6:	7eb3      	ldrb	r3, [r6, #26]
    12e8:	4642      	mov	r2, r8
    12ea:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    12ec:	682a      	ldr	r2, [r5, #0]
    12ee:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    12f0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    12f2:	2b00      	cmp	r3, #0
    12f4:	d1fc      	bne.n	12f0 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    12f6:	330e      	adds	r3, #14
    12f8:	aa06      	add	r2, sp, #24
    12fa:	4694      	mov	ip, r2
    12fc:	4463      	add	r3, ip
    12fe:	881b      	ldrh	r3, [r3, #0]
    1300:	4642      	mov	r2, r8
    1302:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1304:	9b05      	ldr	r3, [sp, #20]
    1306:	465a      	mov	r2, fp
    1308:	4313      	orrs	r3, r2
    130a:	9a03      	ldr	r2, [sp, #12]
    130c:	4313      	orrs	r3, r2
    130e:	464a      	mov	r2, r9
    1310:	4313      	orrs	r3, r2
    1312:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1314:	9b04      	ldr	r3, [sp, #16]
    1316:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1318:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    131a:	4653      	mov	r3, sl
    131c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    131e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1320:	2327      	movs	r3, #39	; 0x27
    1322:	5cf3      	ldrb	r3, [r6, r3]
    1324:	2b00      	cmp	r3, #0
    1326:	d101      	bne.n	132c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1328:	3304      	adds	r3, #4
    132a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    132c:	7e73      	ldrb	r3, [r6, #25]
    132e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1330:	7f32      	ldrb	r2, [r6, #28]
    1332:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1334:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1336:	7f72      	ldrb	r2, [r6, #29]
    1338:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    133a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    133c:	2224      	movs	r2, #36	; 0x24
    133e:	5cb2      	ldrb	r2, [r6, r2]
    1340:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1342:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1344:	2225      	movs	r2, #37	; 0x25
    1346:	5cb2      	ldrb	r2, [r6, r2]
    1348:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    134a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    134c:	7af1      	ldrb	r1, [r6, #11]
    134e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1350:	8933      	ldrh	r3, [r6, #8]
    1352:	2bff      	cmp	r3, #255	; 0xff
    1354:	d100      	bne.n	1358 <usart_init+0x180>
    1356:	e081      	b.n	145c <usart_init+0x284>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1358:	2280      	movs	r2, #128	; 0x80
    135a:	0452      	lsls	r2, r2, #17
    135c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    135e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1360:	232c      	movs	r3, #44	; 0x2c
    1362:	5cf3      	ldrb	r3, [r6, r3]
    1364:	2b00      	cmp	r3, #0
    1366:	d103      	bne.n	1370 <usart_init+0x198>
    1368:	4b62      	ldr	r3, [pc, #392]	; (14f4 <usart_init+0x31c>)
    136a:	789b      	ldrb	r3, [r3, #2]
    136c:	079b      	lsls	r3, r3, #30
    136e:	d501      	bpl.n	1374 <usart_init+0x19c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1370:	2380      	movs	r3, #128	; 0x80
    1372:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1374:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1376:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1378:	2b00      	cmp	r3, #0
    137a:	d1fc      	bne.n	1376 <usart_init+0x19e>
	usart_hw->CTRLB.reg = ctrlb;
    137c:	4643      	mov	r3, r8
    137e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1380:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1382:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1384:	2b00      	cmp	r3, #0
    1386:	d1fc      	bne.n	1382 <usart_init+0x1aa>
	usart_hw->CTRLA.reg = ctrla;
    1388:	4643      	mov	r3, r8
    138a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    138c:	ab0e      	add	r3, sp, #56	; 0x38
    138e:	2280      	movs	r2, #128	; 0x80
    1390:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1392:	2200      	movs	r2, #0
    1394:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1396:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1398:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    139a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    139c:	930a      	str	r3, [sp, #40]	; 0x28
    139e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    13a0:	930b      	str	r3, [sp, #44]	; 0x2c
    13a2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    13a4:	930c      	str	r3, [sp, #48]	; 0x30
    13a6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    13a8:	9302      	str	r3, [sp, #8]
    13aa:	930d      	str	r3, [sp, #52]	; 0x34
    13ac:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    13ae:	ae0a      	add	r6, sp, #40	; 0x28
    13b0:	e063      	b.n	147a <usart_init+0x2a2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    13b2:	2308      	movs	r3, #8
    13b4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    13b6:	3b07      	subs	r3, #7
    13b8:	9307      	str	r3, [sp, #28]
    13ba:	e77c      	b.n	12b6 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    13bc:	6833      	ldr	r3, [r6, #0]
    13be:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    13c0:	68f3      	ldr	r3, [r6, #12]
    13c2:	469b      	mov	fp, r3
		config->sample_adjustment |
    13c4:	6973      	ldr	r3, [r6, #20]
    13c6:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    13c8:	7e33      	ldrb	r3, [r6, #24]
    13ca:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    13cc:	2326      	movs	r3, #38	; 0x26
    13ce:	5cf3      	ldrb	r3, [r6, r3]
    13d0:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    13d2:	6873      	ldr	r3, [r6, #4]
    13d4:	4699      	mov	r9, r3
	switch (transfer_mode)
    13d6:	2b00      	cmp	r3, #0
    13d8:	d018      	beq.n	140c <usart_init+0x234>
    13da:	2380      	movs	r3, #128	; 0x80
    13dc:	055b      	lsls	r3, r3, #21
    13de:	4599      	cmp	r9, r3
    13e0:	d001      	beq.n	13e6 <usart_init+0x20e>
	enum status_code status_code = STATUS_OK;
    13e2:	2000      	movs	r0, #0
    13e4:	e025      	b.n	1432 <usart_init+0x25a>
			if (!config->use_external_clock) {
    13e6:	2327      	movs	r3, #39	; 0x27
    13e8:	5cf3      	ldrb	r3, [r6, r3]
    13ea:	2b00      	cmp	r3, #0
    13ec:	d000      	beq.n	13f0 <usart_init+0x218>
    13ee:	e777      	b.n	12e0 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    13f0:	6a33      	ldr	r3, [r6, #32]
    13f2:	001f      	movs	r7, r3
    13f4:	b2c0      	uxtb	r0, r0
    13f6:	4b40      	ldr	r3, [pc, #256]	; (14f8 <usart_init+0x320>)
    13f8:	4798      	blx	r3
    13fa:	0001      	movs	r1, r0
    13fc:	220e      	movs	r2, #14
    13fe:	ab06      	add	r3, sp, #24
    1400:	469c      	mov	ip, r3
    1402:	4462      	add	r2, ip
    1404:	0038      	movs	r0, r7
    1406:	4b3d      	ldr	r3, [pc, #244]	; (14fc <usart_init+0x324>)
    1408:	4798      	blx	r3
    140a:	e012      	b.n	1432 <usart_init+0x25a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    140c:	2308      	movs	r3, #8
    140e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1410:	2300      	movs	r3, #0
    1412:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1414:	2327      	movs	r3, #39	; 0x27
    1416:	5cf3      	ldrb	r3, [r6, r3]
    1418:	2b00      	cmp	r3, #0
    141a:	d00e      	beq.n	143a <usart_init+0x262>
				status_code =
    141c:	9b06      	ldr	r3, [sp, #24]
    141e:	9300      	str	r3, [sp, #0]
    1420:	9b07      	ldr	r3, [sp, #28]
    1422:	220e      	movs	r2, #14
    1424:	a906      	add	r1, sp, #24
    1426:	468c      	mov	ip, r1
    1428:	4462      	add	r2, ip
    142a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    142c:	6a30      	ldr	r0, [r6, #32]
    142e:	4f34      	ldr	r7, [pc, #208]	; (1500 <usart_init+0x328>)
    1430:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1432:	2800      	cmp	r0, #0
    1434:	d000      	beq.n	1438 <usart_init+0x260>
    1436:	e6e2      	b.n	11fe <usart_init+0x26>
    1438:	e752      	b.n	12e0 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    143a:	6a33      	ldr	r3, [r6, #32]
    143c:	001f      	movs	r7, r3
    143e:	b2c0      	uxtb	r0, r0
    1440:	4b2d      	ldr	r3, [pc, #180]	; (14f8 <usart_init+0x320>)
    1442:	4798      	blx	r3
    1444:	0001      	movs	r1, r0
				status_code =
    1446:	9b06      	ldr	r3, [sp, #24]
    1448:	9300      	str	r3, [sp, #0]
    144a:	9b07      	ldr	r3, [sp, #28]
    144c:	220e      	movs	r2, #14
    144e:	a806      	add	r0, sp, #24
    1450:	4684      	mov	ip, r0
    1452:	4462      	add	r2, ip
    1454:	0038      	movs	r0, r7
    1456:	4f2a      	ldr	r7, [pc, #168]	; (1500 <usart_init+0x328>)
    1458:	47b8      	blx	r7
    145a:	e7ea      	b.n	1432 <usart_init+0x25a>
		if(config->lin_slave_enable) {
    145c:	7ef3      	ldrb	r3, [r6, #27]
    145e:	2b00      	cmp	r3, #0
    1460:	d100      	bne.n	1464 <usart_init+0x28c>
    1462:	e77d      	b.n	1360 <usart_init+0x188>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1464:	2380      	movs	r3, #128	; 0x80
    1466:	04db      	lsls	r3, r3, #19
    1468:	431f      	orrs	r7, r3
    146a:	e779      	b.n	1360 <usart_init+0x188>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    146c:	0020      	movs	r0, r4
    146e:	4b25      	ldr	r3, [pc, #148]	; (1504 <usart_init+0x32c>)
    1470:	4798      	blx	r3
    1472:	e007      	b.n	1484 <usart_init+0x2ac>
    1474:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1476:	2f04      	cmp	r7, #4
    1478:	d00d      	beq.n	1496 <usart_init+0x2be>
    147a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    147c:	00bb      	lsls	r3, r7, #2
    147e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1480:	2800      	cmp	r0, #0
    1482:	d0f3      	beq.n	146c <usart_init+0x294>
		if (current_pinmux != PINMUX_UNUSED) {
    1484:	1c43      	adds	r3, r0, #1
    1486:	d0f5      	beq.n	1474 <usart_init+0x29c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1488:	a90e      	add	r1, sp, #56	; 0x38
    148a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    148c:	0c00      	lsrs	r0, r0, #16
    148e:	b2c0      	uxtb	r0, r0
    1490:	4b1d      	ldr	r3, [pc, #116]	; (1508 <usart_init+0x330>)
    1492:	4798      	blx	r3
    1494:	e7ee      	b.n	1474 <usart_init+0x29c>
		module->callback[i]            = NULL;
    1496:	2300      	movs	r3, #0
    1498:	60eb      	str	r3, [r5, #12]
    149a:	612b      	str	r3, [r5, #16]
    149c:	616b      	str	r3, [r5, #20]
    149e:	61ab      	str	r3, [r5, #24]
    14a0:	61eb      	str	r3, [r5, #28]
    14a2:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    14a4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    14a6:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    14a8:	2200      	movs	r2, #0
    14aa:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    14ac:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    14ae:	3330      	adds	r3, #48	; 0x30
    14b0:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    14b2:	3301      	adds	r3, #1
    14b4:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    14b6:	3301      	adds	r3, #1
    14b8:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    14ba:	3301      	adds	r3, #1
    14bc:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    14be:	6828      	ldr	r0, [r5, #0]
    14c0:	4b07      	ldr	r3, [pc, #28]	; (14e0 <usart_init+0x308>)
    14c2:	4798      	blx	r3
    14c4:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    14c6:	4911      	ldr	r1, [pc, #68]	; (150c <usart_init+0x334>)
    14c8:	4b11      	ldr	r3, [pc, #68]	; (1510 <usart_init+0x338>)
    14ca:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    14cc:	00a4      	lsls	r4, r4, #2
    14ce:	4b11      	ldr	r3, [pc, #68]	; (1514 <usart_init+0x33c>)
    14d0:	50e5      	str	r5, [r4, r3]
	return status_code;
    14d2:	2000      	movs	r0, #0
    14d4:	e693      	b.n	11fe <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    14d6:	2310      	movs	r3, #16
    14d8:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    14da:	2300      	movs	r3, #0
    14dc:	9307      	str	r3, [sp, #28]
    14de:	e6ea      	b.n	12b6 <usart_init+0xde>
    14e0:	00000d19 	.word	0x00000d19
    14e4:	40000400 	.word	0x40000400
    14e8:	00001fbd 	.word	0x00001fbd
    14ec:	00001f31 	.word	0x00001f31
    14f0:	00000b55 	.word	0x00000b55
    14f4:	41002000 	.word	0x41002000
    14f8:	00001fd9 	.word	0x00001fd9
    14fc:	0000095d 	.word	0x0000095d
    1500:	00000985 	.word	0x00000985
    1504:	00000ba1 	.word	0x00000ba1
    1508:	000020b5 	.word	0x000020b5
    150c:	000016d5 	.word	0x000016d5
    1510:	00000d55 	.word	0x00000d55
    1514:	20000984 	.word	0x20000984

00001518 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1518:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    151a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    151c:	2a00      	cmp	r2, #0
    151e:	d101      	bne.n	1524 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1520:	0018      	movs	r0, r3
    1522:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1524:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1526:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1528:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    152a:	2a00      	cmp	r2, #0
    152c:	d1f8      	bne.n	1520 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    152e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1530:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1532:	2a00      	cmp	r2, #0
    1534:	d1fc      	bne.n	1530 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    1536:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1538:	2102      	movs	r1, #2
    153a:	7e1a      	ldrb	r2, [r3, #24]
    153c:	420a      	tst	r2, r1
    153e:	d0fc      	beq.n	153a <usart_write_wait+0x22>
	return STATUS_OK;
    1540:	2300      	movs	r3, #0
    1542:	e7ed      	b.n	1520 <usart_write_wait+0x8>

00001544 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1544:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1546:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1548:	2a00      	cmp	r2, #0
    154a:	d101      	bne.n	1550 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    154c:	0018      	movs	r0, r3
    154e:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1550:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1552:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1554:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1556:	2a00      	cmp	r2, #0
    1558:	d1f8      	bne.n	154c <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    155a:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    155c:	7e10      	ldrb	r0, [r2, #24]
    155e:	0740      	lsls	r0, r0, #29
    1560:	d5f4      	bpl.n	154c <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    1562:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1564:	2b00      	cmp	r3, #0
    1566:	d1fc      	bne.n	1562 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1568:	8b53      	ldrh	r3, [r2, #26]
    156a:	b2db      	uxtb	r3, r3
	if (error_code) {
    156c:	0698      	lsls	r0, r3, #26
    156e:	d01d      	beq.n	15ac <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1570:	0798      	lsls	r0, r3, #30
    1572:	d503      	bpl.n	157c <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1574:	2302      	movs	r3, #2
    1576:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1578:	3318      	adds	r3, #24
    157a:	e7e7      	b.n	154c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    157c:	0758      	lsls	r0, r3, #29
    157e:	d503      	bpl.n	1588 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1580:	2304      	movs	r3, #4
    1582:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1584:	331a      	adds	r3, #26
    1586:	e7e1      	b.n	154c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1588:	07d8      	lsls	r0, r3, #31
    158a:	d503      	bpl.n	1594 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    158c:	2301      	movs	r3, #1
    158e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1590:	3312      	adds	r3, #18
    1592:	e7db      	b.n	154c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1594:	06d8      	lsls	r0, r3, #27
    1596:	d503      	bpl.n	15a0 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1598:	2310      	movs	r3, #16
    159a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    159c:	3332      	adds	r3, #50	; 0x32
    159e:	e7d5      	b.n	154c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    15a0:	069b      	lsls	r3, r3, #26
    15a2:	d503      	bpl.n	15ac <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    15a4:	2320      	movs	r3, #32
    15a6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    15a8:	3321      	adds	r3, #33	; 0x21
    15aa:	e7cf      	b.n	154c <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    15ac:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    15ae:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    15b0:	2300      	movs	r3, #0
    15b2:	e7cb      	b.n	154c <usart_read_wait+0x8>

000015b4 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    15b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15b6:	46d6      	mov	lr, sl
    15b8:	b500      	push	{lr}
    15ba:	b084      	sub	sp, #16
    15bc:	0004      	movs	r4, r0
    15be:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    15c0:	2017      	movs	r0, #23
	if (length == 0) {
    15c2:	2a00      	cmp	r2, #0
    15c4:	d103      	bne.n	15ce <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    15c6:	b004      	add	sp, #16
    15c8:	bc04      	pop	{r2}
    15ca:	4692      	mov	sl, r2
    15cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    15ce:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    15d0:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    15d2:	2b00      	cmp	r3, #0
    15d4:	d0f7      	beq.n	15c6 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    15d6:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    15d8:	3a01      	subs	r2, #1
    15da:	b293      	uxth	r3, r2
    15dc:	469a      	mov	sl, r3
    15de:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    15e0:	2704      	movs	r7, #4
    15e2:	e019      	b.n	1618 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    15e4:	2300      	movs	r3, #0
    15e6:	aa02      	add	r2, sp, #8
    15e8:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    15ea:	1d91      	adds	r1, r2, #6
    15ec:	0020      	movs	r0, r4
    15ee:	4b15      	ldr	r3, [pc, #84]	; (1644 <usart_read_buffer_wait+0x90>)
    15f0:	4798      	blx	r3
		if (retval != STATUS_OK) {
    15f2:	2800      	cmp	r0, #0
    15f4:	d1e7      	bne.n	15c6 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    15f6:	1c69      	adds	r1, r5, #1
    15f8:	b289      	uxth	r1, r1
    15fa:	ab02      	add	r3, sp, #8
    15fc:	88db      	ldrh	r3, [r3, #6]
    15fe:	9a01      	ldr	r2, [sp, #4]
    1600:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1602:	7962      	ldrb	r2, [r4, #5]
    1604:	2a01      	cmp	r2, #1
    1606:	d014      	beq.n	1632 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    1608:	000d      	movs	r5, r1
	while (length--) {
    160a:	4653      	mov	r3, sl
    160c:	3b01      	subs	r3, #1
    160e:	b29b      	uxth	r3, r3
    1610:	469a      	mov	sl, r3
    1612:	4b0d      	ldr	r3, [pc, #52]	; (1648 <usart_read_buffer_wait+0x94>)
    1614:	459a      	cmp	sl, r3
    1616:	d0d6      	beq.n	15c6 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    1618:	7e33      	ldrb	r3, [r6, #24]
    161a:	423b      	tst	r3, r7
    161c:	d1e2      	bne.n	15e4 <usart_read_buffer_wait+0x30>
    161e:	4b0a      	ldr	r3, [pc, #40]	; (1648 <usart_read_buffer_wait+0x94>)
    1620:	7e32      	ldrb	r2, [r6, #24]
    1622:	423a      	tst	r2, r7
    1624:	d1de      	bne.n	15e4 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    1626:	2b01      	cmp	r3, #1
    1628:	d009      	beq.n	163e <usart_read_buffer_wait+0x8a>
    162a:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    162c:	2b00      	cmp	r3, #0
    162e:	d1f7      	bne.n	1620 <usart_read_buffer_wait+0x6c>
    1630:	e7d8      	b.n	15e4 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    1632:	3502      	adds	r5, #2
    1634:	b2ad      	uxth	r5, r5
    1636:	0a1b      	lsrs	r3, r3, #8
    1638:	9a01      	ldr	r2, [sp, #4]
    163a:	5453      	strb	r3, [r2, r1]
    163c:	e7e5      	b.n	160a <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    163e:	2012      	movs	r0, #18
    1640:	e7c1      	b.n	15c6 <usart_read_buffer_wait+0x12>
    1642:	46c0      	nop			; (mov r8, r8)
    1644:	00001545 	.word	0x00001545
    1648:	0000ffff 	.word	0x0000ffff

0000164c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    164e:	0004      	movs	r4, r0
    1650:	000d      	movs	r5, r1
    1652:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1654:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    1656:	4b0f      	ldr	r3, [pc, #60]	; (1694 <_usart_read_buffer+0x48>)
    1658:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    165a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    165c:	b29b      	uxth	r3, r3
    165e:	2b00      	cmp	r3, #0
    1660:	d003      	beq.n	166a <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    1662:	4b0d      	ldr	r3, [pc, #52]	; (1698 <_usart_read_buffer+0x4c>)
    1664:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1666:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    1668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    166a:	85a6      	strh	r6, [r4, #44]	; 0x2c
    166c:	4b0a      	ldr	r3, [pc, #40]	; (1698 <_usart_read_buffer+0x4c>)
    166e:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    1670:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    1672:	2205      	movs	r2, #5
    1674:	2332      	movs	r3, #50	; 0x32
    1676:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1678:	3b2e      	subs	r3, #46	; 0x2e
    167a:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    167c:	7a23      	ldrb	r3, [r4, #8]
    167e:	2b00      	cmp	r3, #0
    1680:	d001      	beq.n	1686 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    1682:	2320      	movs	r3, #32
    1684:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    1686:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    1688:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    168a:	2b00      	cmp	r3, #0
    168c:	d0ec      	beq.n	1668 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    168e:	2308      	movs	r3, #8
    1690:	75bb      	strb	r3, [r7, #22]
    1692:	e7e9      	b.n	1668 <_usart_read_buffer+0x1c>
    1694:	00000665 	.word	0x00000665
    1698:	000006a5 	.word	0x000006a5

0000169c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    169c:	1c93      	adds	r3, r2, #2
    169e:	009b      	lsls	r3, r3, #2
    16a0:	18c3      	adds	r3, r0, r3
    16a2:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    16a4:	2130      	movs	r1, #48	; 0x30
    16a6:	2301      	movs	r3, #1
    16a8:	4093      	lsls	r3, r2
    16aa:	001a      	movs	r2, r3
    16ac:	5c43      	ldrb	r3, [r0, r1]
    16ae:	4313      	orrs	r3, r2
    16b0:	5443      	strb	r3, [r0, r1]
}
    16b2:	4770      	bx	lr

000016b4 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    16b4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    16b6:	2317      	movs	r3, #23
	if (length == 0) {
    16b8:	2a00      	cmp	r2, #0
    16ba:	d101      	bne.n	16c0 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    16bc:	0018      	movs	r0, r3
    16be:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    16c0:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    16c2:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    16c4:	2c00      	cmp	r4, #0
    16c6:	d0f9      	beq.n	16bc <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    16c8:	4b01      	ldr	r3, [pc, #4]	; (16d0 <usart_read_buffer_job+0x1c>)
    16ca:	4798      	blx	r3
    16cc:	0003      	movs	r3, r0
    16ce:	e7f5      	b.n	16bc <usart_read_buffer_job+0x8>
    16d0:	0000164d 	.word	0x0000164d

000016d4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    16d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    16d6:	0080      	lsls	r0, r0, #2
    16d8:	4b62      	ldr	r3, [pc, #392]	; (1864 <_usart_interrupt_handler+0x190>)
    16da:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    16dc:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    16de:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    16e0:	2b00      	cmp	r3, #0
    16e2:	d1fc      	bne.n	16de <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    16e4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    16e6:	7da6      	ldrb	r6, [r4, #22]
    16e8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    16ea:	2330      	movs	r3, #48	; 0x30
    16ec:	5ceb      	ldrb	r3, [r5, r3]
    16ee:	2231      	movs	r2, #49	; 0x31
    16f0:	5caf      	ldrb	r7, [r5, r2]
    16f2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    16f4:	07f3      	lsls	r3, r6, #31
    16f6:	d522      	bpl.n	173e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    16f8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    16fa:	b29b      	uxth	r3, r3
    16fc:	2b00      	cmp	r3, #0
    16fe:	d01c      	beq.n	173a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1700:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1702:	7813      	ldrb	r3, [r2, #0]
    1704:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1706:	1c51      	adds	r1, r2, #1
    1708:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    170a:	7969      	ldrb	r1, [r5, #5]
    170c:	2901      	cmp	r1, #1
    170e:	d00e      	beq.n	172e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1710:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1712:	05db      	lsls	r3, r3, #23
    1714:	0ddb      	lsrs	r3, r3, #23
    1716:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1718:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    171a:	3b01      	subs	r3, #1
    171c:	b29b      	uxth	r3, r3
    171e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1720:	2b00      	cmp	r3, #0
    1722:	d10c      	bne.n	173e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1724:	3301      	adds	r3, #1
    1726:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1728:	3301      	adds	r3, #1
    172a:	75a3      	strb	r3, [r4, #22]
    172c:	e007      	b.n	173e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    172e:	7851      	ldrb	r1, [r2, #1]
    1730:	0209      	lsls	r1, r1, #8
    1732:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1734:	3202      	adds	r2, #2
    1736:	62aa      	str	r2, [r5, #40]	; 0x28
    1738:	e7eb      	b.n	1712 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    173a:	2301      	movs	r3, #1
    173c:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    173e:	07b3      	lsls	r3, r6, #30
    1740:	d506      	bpl.n	1750 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1742:	2302      	movs	r3, #2
    1744:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1746:	2200      	movs	r2, #0
    1748:	3331      	adds	r3, #49	; 0x31
    174a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    174c:	07fb      	lsls	r3, r7, #31
    174e:	d41a      	bmi.n	1786 <_usart_interrupt_handler+0xb2>

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1750:	0773      	lsls	r3, r6, #29
    1752:	d565      	bpl.n	1820 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1754:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1756:	b29b      	uxth	r3, r3
    1758:	2b00      	cmp	r3, #0
    175a:	d05f      	beq.n	181c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    175c:	8b63      	ldrh	r3, [r4, #26]
    175e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1760:	071a      	lsls	r2, r3, #28
    1762:	d414      	bmi.n	178e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1764:	223f      	movs	r2, #63	; 0x3f
    1766:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1768:	2b00      	cmp	r3, #0
    176a:	d034      	beq.n	17d6 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    176c:	079a      	lsls	r2, r3, #30
    176e:	d511      	bpl.n	1794 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1770:	221a      	movs	r2, #26
    1772:	2332      	movs	r3, #50	; 0x32
    1774:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1776:	3b30      	subs	r3, #48	; 0x30
    1778:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    177a:	077b      	lsls	r3, r7, #29
    177c:	d550      	bpl.n	1820 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    177e:	0028      	movs	r0, r5
    1780:	696b      	ldr	r3, [r5, #20]
    1782:	4798      	blx	r3
    1784:	e04c      	b.n	1820 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1786:	0028      	movs	r0, r5
    1788:	68eb      	ldr	r3, [r5, #12]
    178a:	4798      	blx	r3
    178c:	e7e0      	b.n	1750 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    178e:	2237      	movs	r2, #55	; 0x37
    1790:	4013      	ands	r3, r2
    1792:	e7e9      	b.n	1768 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1794:	075a      	lsls	r2, r3, #29
    1796:	d505      	bpl.n	17a4 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1798:	221e      	movs	r2, #30
    179a:	2332      	movs	r3, #50	; 0x32
    179c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    179e:	3b2e      	subs	r3, #46	; 0x2e
    17a0:	8363      	strh	r3, [r4, #26]
    17a2:	e7ea      	b.n	177a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    17a4:	07da      	lsls	r2, r3, #31
    17a6:	d505      	bpl.n	17b4 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    17a8:	2213      	movs	r2, #19
    17aa:	2332      	movs	r3, #50	; 0x32
    17ac:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    17ae:	3b31      	subs	r3, #49	; 0x31
    17b0:	8363      	strh	r3, [r4, #26]
    17b2:	e7e2      	b.n	177a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    17b4:	06da      	lsls	r2, r3, #27
    17b6:	d505      	bpl.n	17c4 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    17b8:	2242      	movs	r2, #66	; 0x42
    17ba:	2332      	movs	r3, #50	; 0x32
    17bc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    17be:	3b22      	subs	r3, #34	; 0x22
    17c0:	8363      	strh	r3, [r4, #26]
    17c2:	e7da      	b.n	177a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    17c4:	2220      	movs	r2, #32
    17c6:	421a      	tst	r2, r3
    17c8:	d0d7      	beq.n	177a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    17ca:	3221      	adds	r2, #33	; 0x21
    17cc:	2332      	movs	r3, #50	; 0x32
    17ce:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    17d0:	3b12      	subs	r3, #18
    17d2:	8363      	strh	r3, [r4, #26]
    17d4:	e7d1      	b.n	177a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    17d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    17d8:	05db      	lsls	r3, r3, #23
    17da:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    17dc:	b2da      	uxtb	r2, r3
    17de:	6a69      	ldr	r1, [r5, #36]	; 0x24
    17e0:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    17e2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    17e4:	1c51      	adds	r1, r2, #1
    17e6:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    17e8:	7969      	ldrb	r1, [r5, #5]
    17ea:	2901      	cmp	r1, #1
    17ec:	d010      	beq.n	1810 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    17ee:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    17f0:	3b01      	subs	r3, #1
    17f2:	b29b      	uxth	r3, r3
    17f4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    17f6:	2b00      	cmp	r3, #0
    17f8:	d112      	bne.n	1820 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    17fa:	3304      	adds	r3, #4
    17fc:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    17fe:	2200      	movs	r2, #0
    1800:	332e      	adds	r3, #46	; 0x2e
    1802:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1804:	07bb      	lsls	r3, r7, #30
    1806:	d50b      	bpl.n	1820 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1808:	0028      	movs	r0, r5
    180a:	692b      	ldr	r3, [r5, #16]
    180c:	4798      	blx	r3
    180e:	e007      	b.n	1820 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1810:	0a1b      	lsrs	r3, r3, #8
    1812:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1814:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1816:	3301      	adds	r3, #1
    1818:	626b      	str	r3, [r5, #36]	; 0x24
    181a:	e7e8      	b.n	17ee <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    181c:	2304      	movs	r3, #4
    181e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1820:	06f3      	lsls	r3, r6, #27
    1822:	d504      	bpl.n	182e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1824:	2310      	movs	r3, #16
    1826:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1828:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    182a:	06fb      	lsls	r3, r7, #27
    182c:	d40e      	bmi.n	184c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    182e:	06b3      	lsls	r3, r6, #26
    1830:	d504      	bpl.n	183c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1832:	2320      	movs	r3, #32
    1834:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1836:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1838:	073b      	lsls	r3, r7, #28
    183a:	d40b      	bmi.n	1854 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    183c:	0733      	lsls	r3, r6, #28
    183e:	d504      	bpl.n	184a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1840:	2308      	movs	r3, #8
    1842:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1844:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1846:	06bb      	lsls	r3, r7, #26
    1848:	d408      	bmi.n	185c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    184a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    184c:	0028      	movs	r0, r5
    184e:	69eb      	ldr	r3, [r5, #28]
    1850:	4798      	blx	r3
    1852:	e7ec      	b.n	182e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1854:	0028      	movs	r0, r5
    1856:	69ab      	ldr	r3, [r5, #24]
    1858:	4798      	blx	r3
    185a:	e7ef      	b.n	183c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    185c:	6a2b      	ldr	r3, [r5, #32]
    185e:	0028      	movs	r0, r5
    1860:	4798      	blx	r3
}
    1862:	e7f2      	b.n	184a <_usart_interrupt_handler+0x176>
    1864:	20000984 	.word	0x20000984

00001868 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1868:	b510      	push	{r4, lr}
	switch (clock_source) {
    186a:	2808      	cmp	r0, #8
    186c:	d803      	bhi.n	1876 <system_clock_source_get_hz+0xe>
    186e:	0080      	lsls	r0, r0, #2
    1870:	4b1b      	ldr	r3, [pc, #108]	; (18e0 <system_clock_source_get_hz+0x78>)
    1872:	581b      	ldr	r3, [r3, r0]
    1874:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1876:	2000      	movs	r0, #0
    1878:	e030      	b.n	18dc <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    187a:	4b1a      	ldr	r3, [pc, #104]	; (18e4 <system_clock_source_get_hz+0x7c>)
    187c:	6918      	ldr	r0, [r3, #16]
    187e:	e02d      	b.n	18dc <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1880:	4b19      	ldr	r3, [pc, #100]	; (18e8 <system_clock_source_get_hz+0x80>)
    1882:	6a1b      	ldr	r3, [r3, #32]
    1884:	059b      	lsls	r3, r3, #22
    1886:	0f9b      	lsrs	r3, r3, #30
    1888:	4818      	ldr	r0, [pc, #96]	; (18ec <system_clock_source_get_hz+0x84>)
    188a:	40d8      	lsrs	r0, r3
    188c:	e026      	b.n	18dc <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    188e:	4b15      	ldr	r3, [pc, #84]	; (18e4 <system_clock_source_get_hz+0x7c>)
    1890:	6958      	ldr	r0, [r3, #20]
    1892:	e023      	b.n	18dc <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1894:	4b13      	ldr	r3, [pc, #76]	; (18e4 <system_clock_source_get_hz+0x7c>)
    1896:	681b      	ldr	r3, [r3, #0]
			return 0;
    1898:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    189a:	079b      	lsls	r3, r3, #30
    189c:	d51e      	bpl.n	18dc <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    189e:	4912      	ldr	r1, [pc, #72]	; (18e8 <system_clock_source_get_hz+0x80>)
    18a0:	2210      	movs	r2, #16
    18a2:	68cb      	ldr	r3, [r1, #12]
    18a4:	421a      	tst	r2, r3
    18a6:	d0fc      	beq.n	18a2 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    18a8:	4b0e      	ldr	r3, [pc, #56]	; (18e4 <system_clock_source_get_hz+0x7c>)
    18aa:	681b      	ldr	r3, [r3, #0]
    18ac:	075b      	lsls	r3, r3, #29
    18ae:	d401      	bmi.n	18b4 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    18b0:	480f      	ldr	r0, [pc, #60]	; (18f0 <system_clock_source_get_hz+0x88>)
    18b2:	e013      	b.n	18dc <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    18b4:	2000      	movs	r0, #0
    18b6:	4b0f      	ldr	r3, [pc, #60]	; (18f4 <system_clock_source_get_hz+0x8c>)
    18b8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    18ba:	4b0a      	ldr	r3, [pc, #40]	; (18e4 <system_clock_source_get_hz+0x7c>)
    18bc:	689b      	ldr	r3, [r3, #8]
    18be:	041b      	lsls	r3, r3, #16
    18c0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    18c2:	4358      	muls	r0, r3
    18c4:	e00a      	b.n	18dc <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    18c6:	2350      	movs	r3, #80	; 0x50
    18c8:	4a07      	ldr	r2, [pc, #28]	; (18e8 <system_clock_source_get_hz+0x80>)
    18ca:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    18cc:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    18ce:	075b      	lsls	r3, r3, #29
    18d0:	d504      	bpl.n	18dc <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    18d2:	4b04      	ldr	r3, [pc, #16]	; (18e4 <system_clock_source_get_hz+0x7c>)
    18d4:	68d8      	ldr	r0, [r3, #12]
    18d6:	e001      	b.n	18dc <system_clock_source_get_hz+0x74>
		return 32768UL;
    18d8:	2080      	movs	r0, #128	; 0x80
    18da:	0200      	lsls	r0, r0, #8
	}
}
    18dc:	bd10      	pop	{r4, pc}
    18de:	46c0      	nop			; (mov r8, r8)
    18e0:	00008e40 	.word	0x00008e40
    18e4:	2000021c 	.word	0x2000021c
    18e8:	40000800 	.word	0x40000800
    18ec:	007a1200 	.word	0x007a1200
    18f0:	02dc6c00 	.word	0x02dc6c00
    18f4:	00001fd9 	.word	0x00001fd9

000018f8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    18f8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    18fa:	490c      	ldr	r1, [pc, #48]	; (192c <system_clock_source_osc8m_set_config+0x34>)
    18fc:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    18fe:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1900:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1902:	7840      	ldrb	r0, [r0, #1]
    1904:	2201      	movs	r2, #1
    1906:	4010      	ands	r0, r2
    1908:	0180      	lsls	r0, r0, #6
    190a:	2640      	movs	r6, #64	; 0x40
    190c:	43b3      	bics	r3, r6
    190e:	4303      	orrs	r3, r0
    1910:	402a      	ands	r2, r5
    1912:	01d2      	lsls	r2, r2, #7
    1914:	2080      	movs	r0, #128	; 0x80
    1916:	4383      	bics	r3, r0
    1918:	4313      	orrs	r3, r2
    191a:	2203      	movs	r2, #3
    191c:	4022      	ands	r2, r4
    191e:	0212      	lsls	r2, r2, #8
    1920:	4803      	ldr	r0, [pc, #12]	; (1930 <system_clock_source_osc8m_set_config+0x38>)
    1922:	4003      	ands	r3, r0
    1924:	4313      	orrs	r3, r2
    1926:	620b      	str	r3, [r1, #32]
}
    1928:	bd70      	pop	{r4, r5, r6, pc}
    192a:	46c0      	nop			; (mov r8, r8)
    192c:	40000800 	.word	0x40000800
    1930:	fffffcff 	.word	0xfffffcff

00001934 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1934:	b5f0      	push	{r4, r5, r6, r7, lr}
    1936:	46ce      	mov	lr, r9
    1938:	4647      	mov	r7, r8
    193a:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    193c:	4b19      	ldr	r3, [pc, #100]	; (19a4 <system_clock_source_osc32k_set_config+0x70>)
    193e:	4699      	mov	r9, r3
    1940:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    1942:	7841      	ldrb	r1, [r0, #1]
    1944:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1946:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1948:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    194a:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    194c:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    194e:	7880      	ldrb	r0, [r0, #2]
    1950:	2101      	movs	r1, #1
    1952:	4008      	ands	r0, r1
    1954:	0080      	lsls	r0, r0, #2
    1956:	2204      	movs	r2, #4
    1958:	4393      	bics	r3, r2
    195a:	4303      	orrs	r3, r0
    195c:	4660      	mov	r0, ip
    195e:	4008      	ands	r0, r1
    1960:	00c0      	lsls	r0, r0, #3
    1962:	3204      	adds	r2, #4
    1964:	4393      	bics	r3, r2
    1966:	4303      	orrs	r3, r0
    1968:	0038      	movs	r0, r7
    196a:	4008      	ands	r0, r1
    196c:	0180      	lsls	r0, r0, #6
    196e:	2740      	movs	r7, #64	; 0x40
    1970:	43bb      	bics	r3, r7
    1972:	4303      	orrs	r3, r0
    1974:	0030      	movs	r0, r6
    1976:	4008      	ands	r0, r1
    1978:	01c0      	lsls	r0, r0, #7
    197a:	2680      	movs	r6, #128	; 0x80
    197c:	43b3      	bics	r3, r6
    197e:	4303      	orrs	r3, r0
    1980:	2007      	movs	r0, #7
    1982:	4005      	ands	r5, r0
    1984:	022d      	lsls	r5, r5, #8
    1986:	4808      	ldr	r0, [pc, #32]	; (19a8 <system_clock_source_osc32k_set_config+0x74>)
    1988:	4003      	ands	r3, r0
    198a:	432b      	orrs	r3, r5
    198c:	4021      	ands	r1, r4
    198e:	0309      	lsls	r1, r1, #12
    1990:	4806      	ldr	r0, [pc, #24]	; (19ac <system_clock_source_osc32k_set_config+0x78>)
    1992:	4003      	ands	r3, r0
    1994:	430b      	orrs	r3, r1
    1996:	464a      	mov	r2, r9
    1998:	6193      	str	r3, [r2, #24]
}
    199a:	bc0c      	pop	{r2, r3}
    199c:	4690      	mov	r8, r2
    199e:	4699      	mov	r9, r3
    19a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19a2:	46c0      	nop			; (mov r8, r8)
    19a4:	40000800 	.word	0x40000800
    19a8:	fffff8ff 	.word	0xfffff8ff
    19ac:	ffffefff 	.word	0xffffefff

000019b0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    19b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19b2:	46de      	mov	lr, fp
    19b4:	4657      	mov	r7, sl
    19b6:	464e      	mov	r6, r9
    19b8:	4645      	mov	r5, r8
    19ba:	b5e0      	push	{r5, r6, r7, lr}
    19bc:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    19be:	4b26      	ldr	r3, [pc, #152]	; (1a58 <system_clock_source_xosc32k_set_config+0xa8>)
    19c0:	469b      	mov	fp, r3
    19c2:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    19c4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    19c6:	7800      	ldrb	r0, [r0, #0]
    19c8:	4242      	negs	r2, r0
    19ca:	4142      	adcs	r2, r0
    19cc:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    19ce:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    19d0:	78ca      	ldrb	r2, [r1, #3]
    19d2:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    19d4:	790a      	ldrb	r2, [r1, #4]
    19d6:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    19d8:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    19da:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    19dc:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    19de:	688a      	ldr	r2, [r1, #8]
    19e0:	491e      	ldr	r1, [pc, #120]	; (1a5c <system_clock_source_xosc32k_set_config+0xac>)
    19e2:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    19e4:	2101      	movs	r1, #1
    19e6:	464a      	mov	r2, r9
    19e8:	0092      	lsls	r2, r2, #2
    19ea:	4691      	mov	r9, r2
    19ec:	2204      	movs	r2, #4
    19ee:	4393      	bics	r3, r2
    19f0:	464a      	mov	r2, r9
    19f2:	4313      	orrs	r3, r2
    19f4:	4642      	mov	r2, r8
    19f6:	400a      	ands	r2, r1
    19f8:	00d2      	lsls	r2, r2, #3
    19fa:	4690      	mov	r8, r2
    19fc:	2208      	movs	r2, #8
    19fe:	4393      	bics	r3, r2
    1a00:	4642      	mov	r2, r8
    1a02:	4313      	orrs	r3, r2
    1a04:	4662      	mov	r2, ip
    1a06:	400a      	ands	r2, r1
    1a08:	0112      	lsls	r2, r2, #4
    1a0a:	4694      	mov	ip, r2
    1a0c:	2210      	movs	r2, #16
    1a0e:	4393      	bics	r3, r2
    1a10:	4662      	mov	r2, ip
    1a12:	4313      	orrs	r3, r2
    1a14:	4008      	ands	r0, r1
    1a16:	0140      	lsls	r0, r0, #5
    1a18:	2220      	movs	r2, #32
    1a1a:	4393      	bics	r3, r2
    1a1c:	4303      	orrs	r3, r0
    1a1e:	400f      	ands	r7, r1
    1a20:	01bf      	lsls	r7, r7, #6
    1a22:	2040      	movs	r0, #64	; 0x40
    1a24:	4383      	bics	r3, r0
    1a26:	433b      	orrs	r3, r7
    1a28:	400e      	ands	r6, r1
    1a2a:	01f6      	lsls	r6, r6, #7
    1a2c:	3040      	adds	r0, #64	; 0x40
    1a2e:	4383      	bics	r3, r0
    1a30:	4333      	orrs	r3, r6
    1a32:	3879      	subs	r0, #121	; 0x79
    1a34:	4005      	ands	r5, r0
    1a36:	022d      	lsls	r5, r5, #8
    1a38:	4809      	ldr	r0, [pc, #36]	; (1a60 <system_clock_source_xosc32k_set_config+0xb0>)
    1a3a:	4003      	ands	r3, r0
    1a3c:	432b      	orrs	r3, r5
    1a3e:	4021      	ands	r1, r4
    1a40:	0309      	lsls	r1, r1, #12
    1a42:	4808      	ldr	r0, [pc, #32]	; (1a64 <system_clock_source_xosc32k_set_config+0xb4>)
    1a44:	4003      	ands	r3, r0
    1a46:	430b      	orrs	r3, r1
    1a48:	465a      	mov	r2, fp
    1a4a:	8293      	strh	r3, [r2, #20]
}
    1a4c:	bc3c      	pop	{r2, r3, r4, r5}
    1a4e:	4690      	mov	r8, r2
    1a50:	4699      	mov	r9, r3
    1a52:	46a2      	mov	sl, r4
    1a54:	46ab      	mov	fp, r5
    1a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a58:	40000800 	.word	0x40000800
    1a5c:	2000021c 	.word	0x2000021c
    1a60:	fffff8ff 	.word	0xfffff8ff
    1a64:	ffffefff 	.word	0xffffefff

00001a68 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1a68:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1a6a:	7a03      	ldrb	r3, [r0, #8]
    1a6c:	069b      	lsls	r3, r3, #26
    1a6e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1a70:	8942      	ldrh	r2, [r0, #10]
    1a72:	0592      	lsls	r2, r2, #22
    1a74:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1a76:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1a78:	4918      	ldr	r1, [pc, #96]	; (1adc <system_clock_source_dfll_set_config+0x74>)
    1a7a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1a7c:	7983      	ldrb	r3, [r0, #6]
    1a7e:	79c2      	ldrb	r2, [r0, #7]
    1a80:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1a82:	8842      	ldrh	r2, [r0, #2]
    1a84:	8884      	ldrh	r4, [r0, #4]
    1a86:	4322      	orrs	r2, r4
    1a88:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1a8a:	7842      	ldrb	r2, [r0, #1]
    1a8c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1a8e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1a90:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1a92:	7803      	ldrb	r3, [r0, #0]
    1a94:	2b04      	cmp	r3, #4
    1a96:	d011      	beq.n	1abc <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1a98:	2b20      	cmp	r3, #32
    1a9a:	d10e      	bne.n	1aba <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1a9c:	7b03      	ldrb	r3, [r0, #12]
    1a9e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1aa0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1aa2:	4313      	orrs	r3, r2
    1aa4:	89c2      	ldrh	r2, [r0, #14]
    1aa6:	0412      	lsls	r2, r2, #16
    1aa8:	490d      	ldr	r1, [pc, #52]	; (1ae0 <system_clock_source_dfll_set_config+0x78>)
    1aaa:	400a      	ands	r2, r1
    1aac:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1aae:	4a0b      	ldr	r2, [pc, #44]	; (1adc <system_clock_source_dfll_set_config+0x74>)
    1ab0:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1ab2:	6811      	ldr	r1, [r2, #0]
    1ab4:	4b0b      	ldr	r3, [pc, #44]	; (1ae4 <system_clock_source_dfll_set_config+0x7c>)
    1ab6:	430b      	orrs	r3, r1
    1ab8:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1aba:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1abc:	7b03      	ldrb	r3, [r0, #12]
    1abe:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1ac0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1ac2:	4313      	orrs	r3, r2
    1ac4:	89c2      	ldrh	r2, [r0, #14]
    1ac6:	0412      	lsls	r2, r2, #16
    1ac8:	4905      	ldr	r1, [pc, #20]	; (1ae0 <system_clock_source_dfll_set_config+0x78>)
    1aca:	400a      	ands	r2, r1
    1acc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1ace:	4a03      	ldr	r2, [pc, #12]	; (1adc <system_clock_source_dfll_set_config+0x74>)
    1ad0:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1ad2:	6813      	ldr	r3, [r2, #0]
    1ad4:	2104      	movs	r1, #4
    1ad6:	430b      	orrs	r3, r1
    1ad8:	6013      	str	r3, [r2, #0]
    1ada:	e7ee      	b.n	1aba <system_clock_source_dfll_set_config+0x52>
    1adc:	2000021c 	.word	0x2000021c
    1ae0:	03ff0000 	.word	0x03ff0000
    1ae4:	00000424 	.word	0x00000424

00001ae8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1ae8:	2808      	cmp	r0, #8
    1aea:	d803      	bhi.n	1af4 <system_clock_source_enable+0xc>
    1aec:	0080      	lsls	r0, r0, #2
    1aee:	4b25      	ldr	r3, [pc, #148]	; (1b84 <system_clock_source_enable+0x9c>)
    1af0:	581b      	ldr	r3, [r3, r0]
    1af2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1af4:	2017      	movs	r0, #23
    1af6:	e044      	b.n	1b82 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1af8:	4a23      	ldr	r2, [pc, #140]	; (1b88 <system_clock_source_enable+0xa0>)
    1afa:	6a13      	ldr	r3, [r2, #32]
    1afc:	2102      	movs	r1, #2
    1afe:	430b      	orrs	r3, r1
    1b00:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1b02:	2000      	movs	r0, #0
    1b04:	e03d      	b.n	1b82 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1b06:	4a20      	ldr	r2, [pc, #128]	; (1b88 <system_clock_source_enable+0xa0>)
    1b08:	6993      	ldr	r3, [r2, #24]
    1b0a:	2102      	movs	r1, #2
    1b0c:	430b      	orrs	r3, r1
    1b0e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1b10:	2000      	movs	r0, #0
		break;
    1b12:	e036      	b.n	1b82 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1b14:	4a1c      	ldr	r2, [pc, #112]	; (1b88 <system_clock_source_enable+0xa0>)
    1b16:	8a13      	ldrh	r3, [r2, #16]
    1b18:	2102      	movs	r1, #2
    1b1a:	430b      	orrs	r3, r1
    1b1c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1b1e:	2000      	movs	r0, #0
		break;
    1b20:	e02f      	b.n	1b82 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1b22:	4a19      	ldr	r2, [pc, #100]	; (1b88 <system_clock_source_enable+0xa0>)
    1b24:	8a93      	ldrh	r3, [r2, #20]
    1b26:	2102      	movs	r1, #2
    1b28:	430b      	orrs	r3, r1
    1b2a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1b2c:	2000      	movs	r0, #0
		break;
    1b2e:	e028      	b.n	1b82 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1b30:	4916      	ldr	r1, [pc, #88]	; (1b8c <system_clock_source_enable+0xa4>)
    1b32:	680b      	ldr	r3, [r1, #0]
    1b34:	2202      	movs	r2, #2
    1b36:	4313      	orrs	r3, r2
    1b38:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1b3a:	4b13      	ldr	r3, [pc, #76]	; (1b88 <system_clock_source_enable+0xa0>)
    1b3c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1b3e:	0019      	movs	r1, r3
    1b40:	320e      	adds	r2, #14
    1b42:	68cb      	ldr	r3, [r1, #12]
    1b44:	421a      	tst	r2, r3
    1b46:	d0fc      	beq.n	1b42 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1b48:	4a10      	ldr	r2, [pc, #64]	; (1b8c <system_clock_source_enable+0xa4>)
    1b4a:	6891      	ldr	r1, [r2, #8]
    1b4c:	4b0e      	ldr	r3, [pc, #56]	; (1b88 <system_clock_source_enable+0xa0>)
    1b4e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1b50:	6852      	ldr	r2, [r2, #4]
    1b52:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1b54:	2200      	movs	r2, #0
    1b56:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1b58:	0019      	movs	r1, r3
    1b5a:	3210      	adds	r2, #16
    1b5c:	68cb      	ldr	r3, [r1, #12]
    1b5e:	421a      	tst	r2, r3
    1b60:	d0fc      	beq.n	1b5c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1b62:	4b0a      	ldr	r3, [pc, #40]	; (1b8c <system_clock_source_enable+0xa4>)
    1b64:	681b      	ldr	r3, [r3, #0]
    1b66:	b29b      	uxth	r3, r3
    1b68:	4a07      	ldr	r2, [pc, #28]	; (1b88 <system_clock_source_enable+0xa0>)
    1b6a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1b6c:	2000      	movs	r0, #0
    1b6e:	e008      	b.n	1b82 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1b70:	4905      	ldr	r1, [pc, #20]	; (1b88 <system_clock_source_enable+0xa0>)
    1b72:	2244      	movs	r2, #68	; 0x44
    1b74:	5c8b      	ldrb	r3, [r1, r2]
    1b76:	2002      	movs	r0, #2
    1b78:	4303      	orrs	r3, r0
    1b7a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1b7c:	2000      	movs	r0, #0
		break;
    1b7e:	e000      	b.n	1b82 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1b80:	2000      	movs	r0, #0
}
    1b82:	4770      	bx	lr
    1b84:	00008e64 	.word	0x00008e64
    1b88:	40000800 	.word	0x40000800
    1b8c:	2000021c 	.word	0x2000021c

00001b90 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b92:	46d6      	mov	lr, sl
    1b94:	464f      	mov	r7, r9
    1b96:	4646      	mov	r6, r8
    1b98:	b5c0      	push	{r6, r7, lr}
    1b9a:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1b9c:	22c2      	movs	r2, #194	; 0xc2
    1b9e:	00d2      	lsls	r2, r2, #3
    1ba0:	4b69      	ldr	r3, [pc, #420]	; (1d48 <system_clock_init+0x1b8>)
    1ba2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1ba4:	4a69      	ldr	r2, [pc, #420]	; (1d4c <system_clock_init+0x1bc>)
    1ba6:	6853      	ldr	r3, [r2, #4]
    1ba8:	211e      	movs	r1, #30
    1baa:	438b      	bics	r3, r1
    1bac:	391a      	subs	r1, #26
    1bae:	430b      	orrs	r3, r1
    1bb0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_5;
    1bb2:	2205      	movs	r2, #5
    1bb4:	ab01      	add	r3, sp, #4
    1bb6:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1bb8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1bba:	4d65      	ldr	r5, [pc, #404]	; (1d50 <system_clock_init+0x1c0>)
    1bbc:	b2e0      	uxtb	r0, r4
    1bbe:	a901      	add	r1, sp, #4
    1bc0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1bc2:	3401      	adds	r4, #1
    1bc4:	2c25      	cmp	r4, #37	; 0x25
    1bc6:	d1f9      	bne.n	1bbc <system_clock_init+0x2c>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1bc8:	a80c      	add	r0, sp, #48	; 0x30
    1bca:	2300      	movs	r3, #0
    1bcc:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    1bce:	2280      	movs	r2, #128	; 0x80
    1bd0:	0212      	lsls	r2, r2, #8
    1bd2:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1bd4:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1bd6:	2201      	movs	r2, #1
    1bd8:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1bda:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1bdc:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1bde:	2106      	movs	r1, #6
    1be0:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    1be2:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1be4:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1be6:	4b5b      	ldr	r3, [pc, #364]	; (1d54 <system_clock_init+0x1c4>)
    1be8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1bea:	2005      	movs	r0, #5
    1bec:	4b5a      	ldr	r3, [pc, #360]	; (1d58 <system_clock_init+0x1c8>)
    1bee:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1bf0:	4955      	ldr	r1, [pc, #340]	; (1d48 <system_clock_init+0x1b8>)
    1bf2:	2202      	movs	r2, #2
    1bf4:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1bf6:	421a      	tst	r2, r3
    1bf8:	d0fc      	beq.n	1bf4 <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1bfa:	4953      	ldr	r1, [pc, #332]	; (1d48 <system_clock_init+0x1b8>)
    1bfc:	8a8b      	ldrh	r3, [r1, #20]
    1bfe:	2280      	movs	r2, #128	; 0x80
    1c00:	4313      	orrs	r3, r2
    1c02:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    1c04:	4c55      	ldr	r4, [pc, #340]	; (1d5c <system_clock_init+0x1cc>)
	SYSCTRL->OSC32K.bit.CALIB =
    1c06:	6823      	ldr	r3, [r4, #0]
    1c08:	04db      	lsls	r3, r3, #19
    1c0a:	698a      	ldr	r2, [r1, #24]
    1c0c:	0e5b      	lsrs	r3, r3, #25
    1c0e:	041b      	lsls	r3, r3, #16
    1c10:	4853      	ldr	r0, [pc, #332]	; (1d60 <system_clock_init+0x1d0>)
    1c12:	4002      	ands	r2, r0
    1c14:	4313      	orrs	r3, r2
    1c16:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    1c18:	a80a      	add	r0, sp, #40	; 0x28
    1c1a:	2301      	movs	r3, #1
    1c1c:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    1c1e:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    1c20:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1c22:	2207      	movs	r2, #7
    1c24:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    1c26:	2500      	movs	r5, #0
    1c28:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1c2a:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1c2c:	4b4d      	ldr	r3, [pc, #308]	; (1d64 <system_clock_init+0x1d4>)
    1c2e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1c30:	2004      	movs	r0, #4
    1c32:	4b49      	ldr	r3, [pc, #292]	; (1d58 <system_clock_init+0x1c8>)
    1c34:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1c36:	ab05      	add	r3, sp, #20
    1c38:	2200      	movs	r2, #0
    1c3a:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1c3c:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1c3e:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1c40:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1c42:	213f      	movs	r1, #63	; 0x3f
    1c44:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1c46:	393b      	subs	r1, #59	; 0x3b
    1c48:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1c4a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1c4c:	6823      	ldr	r3, [r4, #0]
    1c4e:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1c50:	2b3f      	cmp	r3, #63	; 0x3f
    1c52:	d100      	bne.n	1c56 <system_clock_init+0xc6>
    1c54:	e075      	b.n	1d42 <system_clock_init+0x1b2>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1c56:	a805      	add	r0, sp, #20
    1c58:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1c5a:	23b7      	movs	r3, #183	; 0xb7
    1c5c:	00db      	lsls	r3, r3, #3
    1c5e:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1c60:	2307      	movs	r3, #7
    1c62:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1c64:	3338      	adds	r3, #56	; 0x38
    1c66:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1c68:	4b3f      	ldr	r3, [pc, #252]	; (1d68 <system_clock_init+0x1d8>)
    1c6a:	4798      	blx	r3
	config->run_in_standby  = false;
    1c6c:	a804      	add	r0, sp, #16
    1c6e:	2500      	movs	r5, #0
    1c70:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1c72:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1c74:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1c76:	4b3d      	ldr	r3, [pc, #244]	; (1d6c <system_clock_init+0x1dc>)
    1c78:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1c7a:	2006      	movs	r0, #6
    1c7c:	4b36      	ldr	r3, [pc, #216]	; (1d58 <system_clock_init+0x1c8>)
    1c7e:	4699      	mov	r9, r3
    1c80:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1c82:	4b3b      	ldr	r3, [pc, #236]	; (1d70 <system_clock_init+0x1e0>)
    1c84:	4798      	blx	r3
	config->division_factor    = 1;
    1c86:	ac01      	add	r4, sp, #4
    1c88:	2601      	movs	r6, #1
    1c8a:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1c8c:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    1c8e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1c90:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1c92:	2305      	movs	r3, #5
    1c94:	7023      	strb	r3, [r4, #0]
    1c96:	0021      	movs	r1, r4
    1c98:	2001      	movs	r0, #1
    1c9a:	4b36      	ldr	r3, [pc, #216]	; (1d74 <system_clock_init+0x1e4>)
    1c9c:	4698      	mov	r8, r3
    1c9e:	4798      	blx	r3
    1ca0:	2001      	movs	r0, #1
    1ca2:	4f35      	ldr	r7, [pc, #212]	; (1d78 <system_clock_init+0x1e8>)
    1ca4:	47b8      	blx	r7
	config->high_when_disabled = false;
    1ca6:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    1ca8:	7265      	strb	r5, [r4, #9]
    1caa:	2304      	movs	r3, #4
    1cac:	7023      	strb	r3, [r4, #0]
    1cae:	331c      	adds	r3, #28
    1cb0:	469a      	mov	sl, r3
    1cb2:	6063      	str	r3, [r4, #4]
    1cb4:	7226      	strb	r6, [r4, #8]
    1cb6:	0021      	movs	r1, r4
    1cb8:	2002      	movs	r0, #2
    1cba:	47c0      	blx	r8
    1cbc:	2002      	movs	r0, #2
    1cbe:	47b8      	blx	r7
	config->division_factor    = 1;
    1cc0:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1cc2:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1cc4:	2306      	movs	r3, #6
    1cc6:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    1cc8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1cca:	7265      	strb	r5, [r4, #9]
    1ccc:	0021      	movs	r1, r4
    1cce:	2003      	movs	r0, #3
    1cd0:	47c0      	blx	r8
    1cd2:	2003      	movs	r0, #3
    1cd4:	47b8      	blx	r7
	config->high_when_disabled = false;
    1cd6:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    1cd8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1cda:	7265      	strb	r5, [r4, #9]
    1cdc:	2303      	movs	r3, #3
    1cde:	7023      	strb	r3, [r4, #0]
    1ce0:	4653      	mov	r3, sl
    1ce2:	6063      	str	r3, [r4, #4]
    1ce4:	0021      	movs	r1, r4
    1ce6:	2004      	movs	r0, #4
    1ce8:	47c0      	blx	r8
    1cea:	2004      	movs	r0, #4
    1cec:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1cee:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1cf0:	0021      	movs	r1, r4
    1cf2:	2000      	movs	r0, #0
    1cf4:	4b16      	ldr	r3, [pc, #88]	; (1d50 <system_clock_init+0x1c0>)
    1cf6:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1cf8:	2000      	movs	r0, #0
    1cfa:	4b20      	ldr	r3, [pc, #128]	; (1d7c <system_clock_init+0x1ec>)
    1cfc:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1cfe:	2007      	movs	r0, #7
    1d00:	47c8      	blx	r9
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1d02:	4911      	ldr	r1, [pc, #68]	; (1d48 <system_clock_init+0x1b8>)
    1d04:	22d0      	movs	r2, #208	; 0xd0
    1d06:	68cb      	ldr	r3, [r1, #12]
    1d08:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1d0a:	2bd0      	cmp	r3, #208	; 0xd0
    1d0c:	d1fb      	bne.n	1d06 <system_clock_init+0x176>
	PM->CPUSEL.reg = (uint32_t)divider;
    1d0e:	4a1c      	ldr	r2, [pc, #112]	; (1d80 <system_clock_init+0x1f0>)
    1d10:	2300      	movs	r3, #0
    1d12:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1d14:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1d16:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1d18:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1d1a:	a901      	add	r1, sp, #4
    1d1c:	2201      	movs	r2, #1
    1d1e:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1d20:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1d22:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1d24:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1d26:	3307      	adds	r3, #7
    1d28:	700b      	strb	r3, [r1, #0]
    1d2a:	2000      	movs	r0, #0
    1d2c:	4b11      	ldr	r3, [pc, #68]	; (1d74 <system_clock_init+0x1e4>)
    1d2e:	4798      	blx	r3
    1d30:	2000      	movs	r0, #0
    1d32:	4b11      	ldr	r3, [pc, #68]	; (1d78 <system_clock_init+0x1e8>)
    1d34:	4798      	blx	r3
#endif
}
    1d36:	b010      	add	sp, #64	; 0x40
    1d38:	bc1c      	pop	{r2, r3, r4}
    1d3a:	4690      	mov	r8, r2
    1d3c:	4699      	mov	r9, r3
    1d3e:	46a2      	mov	sl, r4
    1d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1d42:	3b20      	subs	r3, #32
    1d44:	e787      	b.n	1c56 <system_clock_init+0xc6>
    1d46:	46c0      	nop			; (mov r8, r8)
    1d48:	40000800 	.word	0x40000800
    1d4c:	41004000 	.word	0x41004000
    1d50:	00001fbd 	.word	0x00001fbd
    1d54:	000019b1 	.word	0x000019b1
    1d58:	00001ae9 	.word	0x00001ae9
    1d5c:	00806024 	.word	0x00806024
    1d60:	ff80ffff 	.word	0xff80ffff
    1d64:	00001935 	.word	0x00001935
    1d68:	00001a69 	.word	0x00001a69
    1d6c:	000018f9 	.word	0x000018f9
    1d70:	00001d85 	.word	0x00001d85
    1d74:	00001da9 	.word	0x00001da9
    1d78:	00001e61 	.word	0x00001e61
    1d7c:	00001f31 	.word	0x00001f31
    1d80:	40000400 	.word	0x40000400

00001d84 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1d84:	4a06      	ldr	r2, [pc, #24]	; (1da0 <system_gclk_init+0x1c>)
    1d86:	6993      	ldr	r3, [r2, #24]
    1d88:	2108      	movs	r1, #8
    1d8a:	430b      	orrs	r3, r1
    1d8c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1d8e:	2201      	movs	r2, #1
    1d90:	4b04      	ldr	r3, [pc, #16]	; (1da4 <system_gclk_init+0x20>)
    1d92:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1d94:	0019      	movs	r1, r3
    1d96:	780b      	ldrb	r3, [r1, #0]
    1d98:	4213      	tst	r3, r2
    1d9a:	d1fc      	bne.n	1d96 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1d9c:	4770      	bx	lr
    1d9e:	46c0      	nop			; (mov r8, r8)
    1da0:	40000400 	.word	0x40000400
    1da4:	40000c00 	.word	0x40000c00

00001da8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1da8:	b570      	push	{r4, r5, r6, lr}
    1daa:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1dac:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1dae:	780d      	ldrb	r5, [r1, #0]
    1db0:	022d      	lsls	r5, r5, #8
    1db2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1db4:	784b      	ldrb	r3, [r1, #1]
    1db6:	2b00      	cmp	r3, #0
    1db8:	d002      	beq.n	1dc0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1dba:	2380      	movs	r3, #128	; 0x80
    1dbc:	02db      	lsls	r3, r3, #11
    1dbe:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1dc0:	7a4b      	ldrb	r3, [r1, #9]
    1dc2:	2b00      	cmp	r3, #0
    1dc4:	d002      	beq.n	1dcc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1dc6:	2380      	movs	r3, #128	; 0x80
    1dc8:	031b      	lsls	r3, r3, #12
    1dca:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1dcc:	6848      	ldr	r0, [r1, #4]
    1dce:	2801      	cmp	r0, #1
    1dd0:	d910      	bls.n	1df4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1dd2:	1e43      	subs	r3, r0, #1
    1dd4:	4218      	tst	r0, r3
    1dd6:	d134      	bne.n	1e42 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1dd8:	2802      	cmp	r0, #2
    1dda:	d930      	bls.n	1e3e <system_gclk_gen_set_config+0x96>
    1ddc:	2302      	movs	r3, #2
    1dde:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1de0:	3201      	adds	r2, #1
						mask <<= 1) {
    1de2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1de4:	4298      	cmp	r0, r3
    1de6:	d8fb      	bhi.n	1de0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1de8:	0212      	lsls	r2, r2, #8
    1dea:	4332      	orrs	r2, r6
    1dec:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1dee:	2380      	movs	r3, #128	; 0x80
    1df0:	035b      	lsls	r3, r3, #13
    1df2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1df4:	7a0b      	ldrb	r3, [r1, #8]
    1df6:	2b00      	cmp	r3, #0
    1df8:	d002      	beq.n	1e00 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1dfa:	2380      	movs	r3, #128	; 0x80
    1dfc:	039b      	lsls	r3, r3, #14
    1dfe:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e00:	4a13      	ldr	r2, [pc, #76]	; (1e50 <system_gclk_gen_set_config+0xa8>)
    1e02:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1e04:	b25b      	sxtb	r3, r3
    1e06:	2b00      	cmp	r3, #0
    1e08:	dbfb      	blt.n	1e02 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1e0a:	4b12      	ldr	r3, [pc, #72]	; (1e54 <system_gclk_gen_set_config+0xac>)
    1e0c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1e0e:	4b12      	ldr	r3, [pc, #72]	; (1e58 <system_gclk_gen_set_config+0xb0>)
    1e10:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e12:	4a0f      	ldr	r2, [pc, #60]	; (1e50 <system_gclk_gen_set_config+0xa8>)
    1e14:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1e16:	b25b      	sxtb	r3, r3
    1e18:	2b00      	cmp	r3, #0
    1e1a:	dbfb      	blt.n	1e14 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1e1c:	4b0c      	ldr	r3, [pc, #48]	; (1e50 <system_gclk_gen_set_config+0xa8>)
    1e1e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e20:	001a      	movs	r2, r3
    1e22:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1e24:	b25b      	sxtb	r3, r3
    1e26:	2b00      	cmp	r3, #0
    1e28:	dbfb      	blt.n	1e22 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1e2a:	4a09      	ldr	r2, [pc, #36]	; (1e50 <system_gclk_gen_set_config+0xa8>)
    1e2c:	6853      	ldr	r3, [r2, #4]
    1e2e:	2180      	movs	r1, #128	; 0x80
    1e30:	0249      	lsls	r1, r1, #9
    1e32:	400b      	ands	r3, r1
    1e34:	431d      	orrs	r5, r3
    1e36:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1e38:	4b08      	ldr	r3, [pc, #32]	; (1e5c <system_gclk_gen_set_config+0xb4>)
    1e3a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1e3c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1e3e:	2200      	movs	r2, #0
    1e40:	e7d2      	b.n	1de8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1e42:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1e44:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1e46:	2380      	movs	r3, #128	; 0x80
    1e48:	029b      	lsls	r3, r3, #10
    1e4a:	431d      	orrs	r5, r3
    1e4c:	e7d2      	b.n	1df4 <system_gclk_gen_set_config+0x4c>
    1e4e:	46c0      	nop			; (mov r8, r8)
    1e50:	40000c00 	.word	0x40000c00
    1e54:	00000665 	.word	0x00000665
    1e58:	40000c08 	.word	0x40000c08
    1e5c:	000006a5 	.word	0x000006a5

00001e60 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1e60:	b510      	push	{r4, lr}
    1e62:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e64:	4a0b      	ldr	r2, [pc, #44]	; (1e94 <system_gclk_gen_enable+0x34>)
    1e66:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1e68:	b25b      	sxtb	r3, r3
    1e6a:	2b00      	cmp	r3, #0
    1e6c:	dbfb      	blt.n	1e66 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1e6e:	4b0a      	ldr	r3, [pc, #40]	; (1e98 <system_gclk_gen_enable+0x38>)
    1e70:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1e72:	4b0a      	ldr	r3, [pc, #40]	; (1e9c <system_gclk_gen_enable+0x3c>)
    1e74:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e76:	4a07      	ldr	r2, [pc, #28]	; (1e94 <system_gclk_gen_enable+0x34>)
    1e78:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1e7a:	b25b      	sxtb	r3, r3
    1e7c:	2b00      	cmp	r3, #0
    1e7e:	dbfb      	blt.n	1e78 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1e80:	4a04      	ldr	r2, [pc, #16]	; (1e94 <system_gclk_gen_enable+0x34>)
    1e82:	6851      	ldr	r1, [r2, #4]
    1e84:	2380      	movs	r3, #128	; 0x80
    1e86:	025b      	lsls	r3, r3, #9
    1e88:	430b      	orrs	r3, r1
    1e8a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1e8c:	4b04      	ldr	r3, [pc, #16]	; (1ea0 <system_gclk_gen_enable+0x40>)
    1e8e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1e90:	bd10      	pop	{r4, pc}
    1e92:	46c0      	nop			; (mov r8, r8)
    1e94:	40000c00 	.word	0x40000c00
    1e98:	00000665 	.word	0x00000665
    1e9c:	40000c04 	.word	0x40000c04
    1ea0:	000006a5 	.word	0x000006a5

00001ea4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1ea4:	b570      	push	{r4, r5, r6, lr}
    1ea6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ea8:	4a1a      	ldr	r2, [pc, #104]	; (1f14 <system_gclk_gen_get_hz+0x70>)
    1eaa:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1eac:	b25b      	sxtb	r3, r3
    1eae:	2b00      	cmp	r3, #0
    1eb0:	dbfb      	blt.n	1eaa <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1eb2:	4b19      	ldr	r3, [pc, #100]	; (1f18 <system_gclk_gen_get_hz+0x74>)
    1eb4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1eb6:	4b19      	ldr	r3, [pc, #100]	; (1f1c <system_gclk_gen_get_hz+0x78>)
    1eb8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1eba:	4a16      	ldr	r2, [pc, #88]	; (1f14 <system_gclk_gen_get_hz+0x70>)
    1ebc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1ebe:	b25b      	sxtb	r3, r3
    1ec0:	2b00      	cmp	r3, #0
    1ec2:	dbfb      	blt.n	1ebc <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1ec4:	4e13      	ldr	r6, [pc, #76]	; (1f14 <system_gclk_gen_get_hz+0x70>)
    1ec6:	6870      	ldr	r0, [r6, #4]
    1ec8:	04c0      	lsls	r0, r0, #19
    1eca:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1ecc:	4b14      	ldr	r3, [pc, #80]	; (1f20 <system_gclk_gen_get_hz+0x7c>)
    1ece:	4798      	blx	r3
    1ed0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1ed2:	4b12      	ldr	r3, [pc, #72]	; (1f1c <system_gclk_gen_get_hz+0x78>)
    1ed4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1ed6:	6876      	ldr	r6, [r6, #4]
    1ed8:	02f6      	lsls	r6, r6, #11
    1eda:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1edc:	4b11      	ldr	r3, [pc, #68]	; (1f24 <system_gclk_gen_get_hz+0x80>)
    1ede:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ee0:	4a0c      	ldr	r2, [pc, #48]	; (1f14 <system_gclk_gen_get_hz+0x70>)
    1ee2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1ee4:	b25b      	sxtb	r3, r3
    1ee6:	2b00      	cmp	r3, #0
    1ee8:	dbfb      	blt.n	1ee2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1eea:	4b0a      	ldr	r3, [pc, #40]	; (1f14 <system_gclk_gen_get_hz+0x70>)
    1eec:	689c      	ldr	r4, [r3, #8]
    1eee:	0224      	lsls	r4, r4, #8
    1ef0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1ef2:	4b0d      	ldr	r3, [pc, #52]	; (1f28 <system_gclk_gen_get_hz+0x84>)
    1ef4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1ef6:	2e00      	cmp	r6, #0
    1ef8:	d107      	bne.n	1f0a <system_gclk_gen_get_hz+0x66>
    1efa:	2c01      	cmp	r4, #1
    1efc:	d907      	bls.n	1f0e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1efe:	0021      	movs	r1, r4
    1f00:	0028      	movs	r0, r5
    1f02:	4b0a      	ldr	r3, [pc, #40]	; (1f2c <system_gclk_gen_get_hz+0x88>)
    1f04:	4798      	blx	r3
    1f06:	0005      	movs	r5, r0
    1f08:	e001      	b.n	1f0e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1f0a:	3401      	adds	r4, #1
    1f0c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1f0e:	0028      	movs	r0, r5
    1f10:	bd70      	pop	{r4, r5, r6, pc}
    1f12:	46c0      	nop			; (mov r8, r8)
    1f14:	40000c00 	.word	0x40000c00
    1f18:	00000665 	.word	0x00000665
    1f1c:	40000c04 	.word	0x40000c04
    1f20:	00001869 	.word	0x00001869
    1f24:	40000c08 	.word	0x40000c08
    1f28:	000006a5 	.word	0x000006a5
    1f2c:	00005e5d 	.word	0x00005e5d

00001f30 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1f30:	b510      	push	{r4, lr}
    1f32:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1f34:	4b06      	ldr	r3, [pc, #24]	; (1f50 <system_gclk_chan_enable+0x20>)
    1f36:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1f38:	4b06      	ldr	r3, [pc, #24]	; (1f54 <system_gclk_chan_enable+0x24>)
    1f3a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1f3c:	4a06      	ldr	r2, [pc, #24]	; (1f58 <system_gclk_chan_enable+0x28>)
    1f3e:	8853      	ldrh	r3, [r2, #2]
    1f40:	2180      	movs	r1, #128	; 0x80
    1f42:	01c9      	lsls	r1, r1, #7
    1f44:	430b      	orrs	r3, r1
    1f46:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1f48:	4b04      	ldr	r3, [pc, #16]	; (1f5c <system_gclk_chan_enable+0x2c>)
    1f4a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1f4c:	bd10      	pop	{r4, pc}
    1f4e:	46c0      	nop			; (mov r8, r8)
    1f50:	00000665 	.word	0x00000665
    1f54:	40000c02 	.word	0x40000c02
    1f58:	40000c00 	.word	0x40000c00
    1f5c:	000006a5 	.word	0x000006a5

00001f60 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1f60:	b510      	push	{r4, lr}
    1f62:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1f64:	4b0f      	ldr	r3, [pc, #60]	; (1fa4 <system_gclk_chan_disable+0x44>)
    1f66:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1f68:	4b0f      	ldr	r3, [pc, #60]	; (1fa8 <system_gclk_chan_disable+0x48>)
    1f6a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1f6c:	4a0f      	ldr	r2, [pc, #60]	; (1fac <system_gclk_chan_disable+0x4c>)
    1f6e:	8853      	ldrh	r3, [r2, #2]
    1f70:	051b      	lsls	r3, r3, #20
    1f72:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1f74:	8853      	ldrh	r3, [r2, #2]
    1f76:	490e      	ldr	r1, [pc, #56]	; (1fb0 <system_gclk_chan_disable+0x50>)
    1f78:	400b      	ands	r3, r1
    1f7a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1f7c:	8853      	ldrh	r3, [r2, #2]
    1f7e:	490d      	ldr	r1, [pc, #52]	; (1fb4 <system_gclk_chan_disable+0x54>)
    1f80:	400b      	ands	r3, r1
    1f82:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1f84:	0011      	movs	r1, r2
    1f86:	2280      	movs	r2, #128	; 0x80
    1f88:	01d2      	lsls	r2, r2, #7
    1f8a:	884b      	ldrh	r3, [r1, #2]
    1f8c:	4213      	tst	r3, r2
    1f8e:	d1fc      	bne.n	1f8a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1f90:	4906      	ldr	r1, [pc, #24]	; (1fac <system_gclk_chan_disable+0x4c>)
    1f92:	884a      	ldrh	r2, [r1, #2]
    1f94:	0203      	lsls	r3, r0, #8
    1f96:	4806      	ldr	r0, [pc, #24]	; (1fb0 <system_gclk_chan_disable+0x50>)
    1f98:	4002      	ands	r2, r0
    1f9a:	4313      	orrs	r3, r2
    1f9c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1f9e:	4b06      	ldr	r3, [pc, #24]	; (1fb8 <system_gclk_chan_disable+0x58>)
    1fa0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1fa2:	bd10      	pop	{r4, pc}
    1fa4:	00000665 	.word	0x00000665
    1fa8:	40000c02 	.word	0x40000c02
    1fac:	40000c00 	.word	0x40000c00
    1fb0:	fffff0ff 	.word	0xfffff0ff
    1fb4:	ffffbfff 	.word	0xffffbfff
    1fb8:	000006a5 	.word	0x000006a5

00001fbc <system_gclk_chan_set_config>:
{
    1fbc:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1fbe:	780c      	ldrb	r4, [r1, #0]
    1fc0:	0224      	lsls	r4, r4, #8
    1fc2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1fc4:	4b02      	ldr	r3, [pc, #8]	; (1fd0 <system_gclk_chan_set_config+0x14>)
    1fc6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1fc8:	b2a4      	uxth	r4, r4
    1fca:	4b02      	ldr	r3, [pc, #8]	; (1fd4 <system_gclk_chan_set_config+0x18>)
    1fcc:	805c      	strh	r4, [r3, #2]
}
    1fce:	bd10      	pop	{r4, pc}
    1fd0:	00001f61 	.word	0x00001f61
    1fd4:	40000c00 	.word	0x40000c00

00001fd8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1fd8:	b510      	push	{r4, lr}
    1fda:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1fdc:	4b06      	ldr	r3, [pc, #24]	; (1ff8 <system_gclk_chan_get_hz+0x20>)
    1fde:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1fe0:	4b06      	ldr	r3, [pc, #24]	; (1ffc <system_gclk_chan_get_hz+0x24>)
    1fe2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1fe4:	4b06      	ldr	r3, [pc, #24]	; (2000 <STACK_SIZE>)
    1fe6:	885c      	ldrh	r4, [r3, #2]
    1fe8:	0524      	lsls	r4, r4, #20
    1fea:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1fec:	4b05      	ldr	r3, [pc, #20]	; (2004 <STACK_SIZE+0x4>)
    1fee:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1ff0:	0020      	movs	r0, r4
    1ff2:	4b05      	ldr	r3, [pc, #20]	; (2008 <STACK_SIZE+0x8>)
    1ff4:	4798      	blx	r3
}
    1ff6:	bd10      	pop	{r4, pc}
    1ff8:	00000665 	.word	0x00000665
    1ffc:	40000c02 	.word	0x40000c02
    2000:	40000c00 	.word	0x40000c00
    2004:	000006a5 	.word	0x000006a5
    2008:	00001ea5 	.word	0x00001ea5

0000200c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    200c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    200e:	78d3      	ldrb	r3, [r2, #3]
    2010:	2b00      	cmp	r3, #0
    2012:	d135      	bne.n	2080 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2014:	7813      	ldrb	r3, [r2, #0]
    2016:	2b80      	cmp	r3, #128	; 0x80
    2018:	d029      	beq.n	206e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    201a:	061b      	lsls	r3, r3, #24
    201c:	2480      	movs	r4, #128	; 0x80
    201e:	0264      	lsls	r4, r4, #9
    2020:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2022:	7854      	ldrb	r4, [r2, #1]
    2024:	2502      	movs	r5, #2
    2026:	43ac      	bics	r4, r5
    2028:	d106      	bne.n	2038 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    202a:	7894      	ldrb	r4, [r2, #2]
    202c:	2c00      	cmp	r4, #0
    202e:	d120      	bne.n	2072 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2030:	2480      	movs	r4, #128	; 0x80
    2032:	02a4      	lsls	r4, r4, #10
    2034:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2036:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2038:	7854      	ldrb	r4, [r2, #1]
    203a:	3c01      	subs	r4, #1
    203c:	2c01      	cmp	r4, #1
    203e:	d91c      	bls.n	207a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2040:	040d      	lsls	r5, r1, #16
    2042:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2044:	24a0      	movs	r4, #160	; 0xa0
    2046:	05e4      	lsls	r4, r4, #23
    2048:	432c      	orrs	r4, r5
    204a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    204c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    204e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2050:	24d0      	movs	r4, #208	; 0xd0
    2052:	0624      	lsls	r4, r4, #24
    2054:	432c      	orrs	r4, r5
    2056:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2058:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    205a:	78d4      	ldrb	r4, [r2, #3]
    205c:	2c00      	cmp	r4, #0
    205e:	d122      	bne.n	20a6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2060:	035b      	lsls	r3, r3, #13
    2062:	d51c      	bpl.n	209e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2064:	7893      	ldrb	r3, [r2, #2]
    2066:	2b01      	cmp	r3, #1
    2068:	d01e      	beq.n	20a8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    206a:	6141      	str	r1, [r0, #20]
    206c:	e017      	b.n	209e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    206e:	2300      	movs	r3, #0
    2070:	e7d7      	b.n	2022 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2072:	24c0      	movs	r4, #192	; 0xc0
    2074:	02e4      	lsls	r4, r4, #11
    2076:	4323      	orrs	r3, r4
    2078:	e7dd      	b.n	2036 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    207a:	4c0d      	ldr	r4, [pc, #52]	; (20b0 <_system_pinmux_config+0xa4>)
    207c:	4023      	ands	r3, r4
    207e:	e7df      	b.n	2040 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2080:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2082:	040c      	lsls	r4, r1, #16
    2084:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2086:	23a0      	movs	r3, #160	; 0xa0
    2088:	05db      	lsls	r3, r3, #23
    208a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    208c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    208e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2090:	23d0      	movs	r3, #208	; 0xd0
    2092:	061b      	lsls	r3, r3, #24
    2094:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2096:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2098:	78d3      	ldrb	r3, [r2, #3]
    209a:	2b00      	cmp	r3, #0
    209c:	d103      	bne.n	20a6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    209e:	7853      	ldrb	r3, [r2, #1]
    20a0:	3b01      	subs	r3, #1
    20a2:	2b01      	cmp	r3, #1
    20a4:	d902      	bls.n	20ac <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    20a6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    20a8:	6181      	str	r1, [r0, #24]
    20aa:	e7f8      	b.n	209e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    20ac:	6081      	str	r1, [r0, #8]
}
    20ae:	e7fa      	b.n	20a6 <_system_pinmux_config+0x9a>
    20b0:	fffbffff 	.word	0xfffbffff

000020b4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    20b4:	b510      	push	{r4, lr}
    20b6:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    20b8:	09c1      	lsrs	r1, r0, #7
		return NULL;
    20ba:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    20bc:	2900      	cmp	r1, #0
    20be:	d104      	bne.n	20ca <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    20c0:	0943      	lsrs	r3, r0, #5
    20c2:	01db      	lsls	r3, r3, #7
    20c4:	4905      	ldr	r1, [pc, #20]	; (20dc <system_pinmux_pin_set_config+0x28>)
    20c6:	468c      	mov	ip, r1
    20c8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    20ca:	241f      	movs	r4, #31
    20cc:	4020      	ands	r0, r4
    20ce:	2101      	movs	r1, #1
    20d0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    20d2:	0018      	movs	r0, r3
    20d4:	4b02      	ldr	r3, [pc, #8]	; (20e0 <system_pinmux_pin_set_config+0x2c>)
    20d6:	4798      	blx	r3
}
    20d8:	bd10      	pop	{r4, pc}
    20da:	46c0      	nop			; (mov r8, r8)
    20dc:	41004400 	.word	0x41004400
    20e0:	0000200d 	.word	0x0000200d

000020e4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    20e4:	4770      	bx	lr
	...

000020e8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    20e8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    20ea:	4b05      	ldr	r3, [pc, #20]	; (2100 <system_init+0x18>)
    20ec:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    20ee:	4b05      	ldr	r3, [pc, #20]	; (2104 <system_init+0x1c>)
    20f0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    20f2:	4b05      	ldr	r3, [pc, #20]	; (2108 <system_init+0x20>)
    20f4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    20f6:	4b05      	ldr	r3, [pc, #20]	; (210c <system_init+0x24>)
    20f8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    20fa:	4b05      	ldr	r3, [pc, #20]	; (2110 <system_init+0x28>)
    20fc:	4798      	blx	r3
}
    20fe:	bd10      	pop	{r4, pc}
    2100:	00001b91 	.word	0x00001b91
    2104:	000006d5 	.word	0x000006d5
    2108:	000020e5 	.word	0x000020e5
    210c:	00000841 	.word	0x00000841
    2110:	000020e5 	.word	0x000020e5

00002114 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2114:	1c93      	adds	r3, r2, #2
    2116:	009b      	lsls	r3, r3, #2
    2118:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    211a:	2a02      	cmp	r2, #2
    211c:	d009      	beq.n	2132 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    211e:	2a03      	cmp	r2, #3
    2120:	d00c      	beq.n	213c <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    2122:	2301      	movs	r3, #1
    2124:	4093      	lsls	r3, r2
    2126:	001a      	movs	r2, r3
    2128:	7e03      	ldrb	r3, [r0, #24]
    212a:	4313      	orrs	r3, r2
    212c:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    212e:	2000      	movs	r0, #0
    2130:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    2132:	7e03      	ldrb	r3, [r0, #24]
    2134:	2210      	movs	r2, #16
    2136:	4313      	orrs	r3, r2
    2138:	7603      	strb	r3, [r0, #24]
    213a:	e7f8      	b.n	212e <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    213c:	7e03      	ldrb	r3, [r0, #24]
    213e:	2220      	movs	r2, #32
    2140:	4313      	orrs	r3, r2
    2142:	7603      	strb	r3, [r0, #24]
    2144:	e7f3      	b.n	212e <tc_register_callback+0x1a>
	...

00002148 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    2148:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    214a:	0080      	lsls	r0, r0, #2
    214c:	4b16      	ldr	r3, [pc, #88]	; (21a8 <_tc_interrupt_handler+0x60>)
    214e:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2150:	6823      	ldr	r3, [r4, #0]
    2152:	7b9d      	ldrb	r5, [r3, #14]
    2154:	7e22      	ldrb	r2, [r4, #24]
    2156:	7e63      	ldrb	r3, [r4, #25]
    2158:	4013      	ands	r3, r2
    215a:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    215c:	07eb      	lsls	r3, r5, #31
    215e:	d406      	bmi.n	216e <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    2160:	07ab      	lsls	r3, r5, #30
    2162:	d40b      	bmi.n	217c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2164:	06eb      	lsls	r3, r5, #27
    2166:	d410      	bmi.n	218a <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    2168:	06ab      	lsls	r3, r5, #26
    216a:	d415      	bmi.n	2198 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    216c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    216e:	0020      	movs	r0, r4
    2170:	68a3      	ldr	r3, [r4, #8]
    2172:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2174:	2301      	movs	r3, #1
    2176:	6822      	ldr	r2, [r4, #0]
    2178:	7393      	strb	r3, [r2, #14]
    217a:	e7f1      	b.n	2160 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    217c:	0020      	movs	r0, r4
    217e:	68e3      	ldr	r3, [r4, #12]
    2180:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2182:	2302      	movs	r3, #2
    2184:	6822      	ldr	r2, [r4, #0]
    2186:	7393      	strb	r3, [r2, #14]
    2188:	e7ec      	b.n	2164 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    218a:	0020      	movs	r0, r4
    218c:	6923      	ldr	r3, [r4, #16]
    218e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    2190:	2310      	movs	r3, #16
    2192:	6822      	ldr	r2, [r4, #0]
    2194:	7393      	strb	r3, [r2, #14]
    2196:	e7e7      	b.n	2168 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    2198:	0020      	movs	r0, r4
    219a:	6963      	ldr	r3, [r4, #20]
    219c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    219e:	6823      	ldr	r3, [r4, #0]
    21a0:	2220      	movs	r2, #32
    21a2:	739a      	strb	r2, [r3, #14]
}
    21a4:	e7e2      	b.n	216c <_tc_interrupt_handler+0x24>
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	2000099c 	.word	0x2000099c

000021ac <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    21ac:	b510      	push	{r4, lr}
    21ae:	2000      	movs	r0, #0
    21b0:	4b01      	ldr	r3, [pc, #4]	; (21b8 <TC3_Handler+0xc>)
    21b2:	4798      	blx	r3
    21b4:	bd10      	pop	{r4, pc}
    21b6:	46c0      	nop			; (mov r8, r8)
    21b8:	00002149 	.word	0x00002149

000021bc <TC4_Handler>:
    21bc:	b510      	push	{r4, lr}
    21be:	2001      	movs	r0, #1
    21c0:	4b01      	ldr	r3, [pc, #4]	; (21c8 <TC4_Handler+0xc>)
    21c2:	4798      	blx	r3
    21c4:	bd10      	pop	{r4, pc}
    21c6:	46c0      	nop			; (mov r8, r8)
    21c8:	00002149 	.word	0x00002149

000021cc <TC5_Handler>:
    21cc:	b510      	push	{r4, lr}
    21ce:	2002      	movs	r0, #2
    21d0:	4b01      	ldr	r3, [pc, #4]	; (21d8 <TC5_Handler+0xc>)
    21d2:	4798      	blx	r3
    21d4:	bd10      	pop	{r4, pc}
    21d6:	46c0      	nop			; (mov r8, r8)
    21d8:	00002149 	.word	0x00002149

000021dc <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    21dc:	b530      	push	{r4, r5, lr}
    21de:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    21e0:	aa01      	add	r2, sp, #4
    21e2:	4b0b      	ldr	r3, [pc, #44]	; (2210 <_tc_get_inst_index+0x34>)
    21e4:	cb32      	ldmia	r3!, {r1, r4, r5}
    21e6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    21e8:	9b01      	ldr	r3, [sp, #4]
    21ea:	4298      	cmp	r0, r3
    21ec:	d00d      	beq.n	220a <_tc_get_inst_index+0x2e>
    21ee:	9b02      	ldr	r3, [sp, #8]
    21f0:	4298      	cmp	r0, r3
    21f2:	d008      	beq.n	2206 <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    21f4:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    21f6:	9a03      	ldr	r2, [sp, #12]
    21f8:	4282      	cmp	r2, r0
    21fa:	d002      	beq.n	2202 <_tc_get_inst_index+0x26>
}
    21fc:	0018      	movs	r0, r3
    21fe:	b005      	add	sp, #20
    2200:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2202:	3302      	adds	r3, #2
    2204:	e002      	b.n	220c <_tc_get_inst_index+0x30>
    2206:	2301      	movs	r3, #1
    2208:	e000      	b.n	220c <_tc_get_inst_index+0x30>
    220a:	2300      	movs	r3, #0
			return i;
    220c:	b2db      	uxtb	r3, r3
    220e:	e7f5      	b.n	21fc <_tc_get_inst_index+0x20>
    2210:	00008e88 	.word	0x00008e88

00002214 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    2214:	b5f0      	push	{r4, r5, r6, r7, lr}
    2216:	b087      	sub	sp, #28
    2218:	0004      	movs	r4, r0
    221a:	000d      	movs	r5, r1
    221c:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    221e:	0008      	movs	r0, r1
    2220:	4b85      	ldr	r3, [pc, #532]	; (2438 <tc_init+0x224>)
    2222:	4798      	blx	r3
    2224:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    2226:	ab05      	add	r3, sp, #20
    2228:	221b      	movs	r2, #27
    222a:	701a      	strb	r2, [r3, #0]
    222c:	3201      	adds	r2, #1
    222e:	705a      	strb	r2, [r3, #1]
    2230:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    2232:	ab03      	add	r3, sp, #12
    2234:	2280      	movs	r2, #128	; 0x80
    2236:	0112      	lsls	r2, r2, #4
    2238:	801a      	strh	r2, [r3, #0]
    223a:	2280      	movs	r2, #128	; 0x80
    223c:	0152      	lsls	r2, r2, #5
    223e:	805a      	strh	r2, [r3, #2]
    2240:	2280      	movs	r2, #128	; 0x80
    2242:	0192      	lsls	r2, r2, #6
    2244:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    2246:	2300      	movs	r3, #0
    2248:	60a3      	str	r3, [r4, #8]
    224a:	60e3      	str	r3, [r4, #12]
    224c:	6123      	str	r3, [r4, #16]
    224e:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    2250:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    2252:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    2254:	0082      	lsls	r2, r0, #2
    2256:	4b79      	ldr	r3, [pc, #484]	; (243c <tc_init+0x228>)
    2258:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    225a:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    225c:	78b3      	ldrb	r3, [r6, #2]
    225e:	2b08      	cmp	r3, #8
    2260:	d006      	beq.n	2270 <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    2262:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2264:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2266:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2268:	07db      	lsls	r3, r3, #31
    226a:	d505      	bpl.n	2278 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    226c:	b007      	add	sp, #28
    226e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    2270:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2272:	07fa      	lsls	r2, r7, #31
    2274:	d5fa      	bpl.n	226c <tc_init+0x58>
    2276:	e7f4      	b.n	2262 <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2278:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    227a:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    227c:	06db      	lsls	r3, r3, #27
    227e:	d4f5      	bmi.n	226c <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    2280:	882b      	ldrh	r3, [r5, #0]
    2282:	079b      	lsls	r3, r3, #30
    2284:	d4f2      	bmi.n	226c <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    2286:	7c33      	ldrb	r3, [r6, #16]
    2288:	2b00      	cmp	r3, #0
    228a:	d179      	bne.n	2380 <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    228c:	7f33      	ldrb	r3, [r6, #28]
    228e:	2b00      	cmp	r3, #0
    2290:	d000      	beq.n	2294 <tc_init+0x80>
    2292:	e081      	b.n	2398 <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    2294:	496a      	ldr	r1, [pc, #424]	; (2440 <tc_init+0x22c>)
    2296:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    2298:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    229a:	ab03      	add	r3, sp, #12
    229c:	5ad3      	ldrh	r3, [r2, r3]
    229e:	4303      	orrs	r3, r0
    22a0:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    22a2:	78b3      	ldrb	r3, [r6, #2]
    22a4:	2b08      	cmp	r3, #8
    22a6:	d100      	bne.n	22aa <tc_init+0x96>
    22a8:	e086      	b.n	23b8 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    22aa:	a901      	add	r1, sp, #4
    22ac:	7833      	ldrb	r3, [r6, #0]
    22ae:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    22b0:	ab05      	add	r3, sp, #20
    22b2:	5ddf      	ldrb	r7, [r3, r7]
    22b4:	0038      	movs	r0, r7
    22b6:	4b63      	ldr	r3, [pc, #396]	; (2444 <tc_init+0x230>)
    22b8:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    22ba:	0038      	movs	r0, r7
    22bc:	4b62      	ldr	r3, [pc, #392]	; (2448 <tc_init+0x234>)
    22be:	4798      	blx	r3
	ctrla_tmp =
    22c0:	8931      	ldrh	r1, [r6, #8]
    22c2:	88b3      	ldrh	r3, [r6, #4]
    22c4:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    22c6:	78b1      	ldrb	r1, [r6, #2]
    22c8:	79b2      	ldrb	r2, [r6, #6]
    22ca:	4311      	orrs	r1, r2
	ctrla_tmp =
    22cc:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    22ce:	7873      	ldrb	r3, [r6, #1]
    22d0:	2b00      	cmp	r3, #0
    22d2:	d002      	beq.n	22da <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    22d4:	2380      	movs	r3, #128	; 0x80
    22d6:	011b      	lsls	r3, r3, #4
    22d8:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    22da:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    22dc:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    22de:	b25b      	sxtb	r3, r3
    22e0:	2b00      	cmp	r3, #0
    22e2:	dbfb      	blt.n	22dc <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    22e4:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    22e6:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    22e8:	1e4b      	subs	r3, r1, #1
    22ea:	4199      	sbcs	r1, r3
    22ec:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    22ee:	7bb3      	ldrb	r3, [r6, #14]
    22f0:	2b00      	cmp	r3, #0
    22f2:	d001      	beq.n	22f8 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    22f4:	2301      	movs	r3, #1
    22f6:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    22f8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    22fa:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    22fc:	b25b      	sxtb	r3, r3
    22fe:	2b00      	cmp	r3, #0
    2300:	dbfb      	blt.n	22fa <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    2302:	23ff      	movs	r3, #255	; 0xff
    2304:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    2306:	2900      	cmp	r1, #0
    2308:	d005      	beq.n	2316 <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    230a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    230c:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    230e:	b25b      	sxtb	r3, r3
    2310:	2b00      	cmp	r3, #0
    2312:	dbfb      	blt.n	230c <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    2314:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    2316:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    2318:	7af3      	ldrb	r3, [r6, #11]
    231a:	2b00      	cmp	r3, #0
    231c:	d001      	beq.n	2322 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    231e:	2310      	movs	r3, #16
    2320:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    2322:	7b33      	ldrb	r3, [r6, #12]
    2324:	2b00      	cmp	r3, #0
    2326:	d001      	beq.n	232c <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2328:	2320      	movs	r3, #32
    232a:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    232c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    232e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2330:	b25b      	sxtb	r3, r3
    2332:	2b00      	cmp	r3, #0
    2334:	dbfb      	blt.n	232e <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    2336:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2338:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    233a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    233c:	b25b      	sxtb	r3, r3
    233e:	2b00      	cmp	r3, #0
    2340:	dbfb      	blt.n	233a <tc_init+0x126>
	switch (module_inst->counter_size) {
    2342:	7923      	ldrb	r3, [r4, #4]
    2344:	2b04      	cmp	r3, #4
    2346:	d03f      	beq.n	23c8 <tc_init+0x1b4>
    2348:	2b08      	cmp	r3, #8
    234a:	d05e      	beq.n	240a <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    234c:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    234e:	2b00      	cmp	r3, #0
    2350:	d000      	beq.n	2354 <tc_init+0x140>
    2352:	e78b      	b.n	226c <tc_init+0x58>
    2354:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2356:	b25b      	sxtb	r3, r3
    2358:	2b00      	cmp	r3, #0
    235a:	dbfb      	blt.n	2354 <tc_init+0x140>
				= config->counter_16_bit.value;
    235c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    235e:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2360:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2362:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2364:	b25b      	sxtb	r3, r3
    2366:	2b00      	cmp	r3, #0
    2368:	dbfb      	blt.n	2362 <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    236a:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    236c:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    236e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2370:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2372:	b25b      	sxtb	r3, r3
    2374:	2b00      	cmp	r3, #0
    2376:	dbfb      	blt.n	2370 <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    2378:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    237a:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    237c:	2000      	movs	r0, #0
    237e:	e775      	b.n	226c <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2380:	a902      	add	r1, sp, #8
    2382:	2301      	movs	r3, #1
    2384:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2386:	2200      	movs	r2, #0
    2388:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    238a:	7e32      	ldrb	r2, [r6, #24]
    238c:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    238e:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2390:	7d30      	ldrb	r0, [r6, #20]
    2392:	4b2e      	ldr	r3, [pc, #184]	; (244c <tc_init+0x238>)
    2394:	4798      	blx	r3
    2396:	e779      	b.n	228c <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2398:	a902      	add	r1, sp, #8
    239a:	2301      	movs	r3, #1
    239c:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    239e:	2200      	movs	r2, #0
    23a0:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    23a2:	3224      	adds	r2, #36	; 0x24
    23a4:	18b2      	adds	r2, r6, r2
    23a6:	7812      	ldrb	r2, [r2, #0]
    23a8:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    23aa:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    23ac:	331f      	adds	r3, #31
    23ae:	18f3      	adds	r3, r6, r3
    23b0:	7818      	ldrb	r0, [r3, #0]
    23b2:	4b26      	ldr	r3, [pc, #152]	; (244c <tc_init+0x238>)
    23b4:	4798      	blx	r3
    23b6:	e76d      	b.n	2294 <tc_init+0x80>
    23b8:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    23ba:	1c7a      	adds	r2, r7, #1
    23bc:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    23be:	ab03      	add	r3, sp, #12
    23c0:	5ad3      	ldrh	r3, [r2, r3]
    23c2:	4303      	orrs	r3, r0
    23c4:	620b      	str	r3, [r1, #32]
    23c6:	e770      	b.n	22aa <tc_init+0x96>
    23c8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    23ca:	b25b      	sxtb	r3, r3
    23cc:	2b00      	cmp	r3, #0
    23ce:	dbfb      	blt.n	23c8 <tc_init+0x1b4>
					config->counter_8_bit.value;
    23d0:	2328      	movs	r3, #40	; 0x28
    23d2:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    23d4:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    23d6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    23d8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    23da:	b25b      	sxtb	r3, r3
    23dc:	2b00      	cmp	r3, #0
    23de:	dbfb      	blt.n	23d8 <tc_init+0x1c4>
					config->counter_8_bit.period;
    23e0:	2329      	movs	r3, #41	; 0x29
    23e2:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    23e4:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    23e6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    23e8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    23ea:	b25b      	sxtb	r3, r3
    23ec:	2b00      	cmp	r3, #0
    23ee:	dbfb      	blt.n	23e8 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    23f0:	232a      	movs	r3, #42	; 0x2a
    23f2:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    23f4:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    23f6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    23f8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    23fa:	b25b      	sxtb	r3, r3
    23fc:	2b00      	cmp	r3, #0
    23fe:	dbfb      	blt.n	23f8 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    2400:	232b      	movs	r3, #43	; 0x2b
    2402:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    2404:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    2406:	2000      	movs	r0, #0
    2408:	e730      	b.n	226c <tc_init+0x58>
    240a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    240c:	b25b      	sxtb	r3, r3
    240e:	2b00      	cmp	r3, #0
    2410:	dbfb      	blt.n	240a <tc_init+0x1f6>
				= config->counter_32_bit.value;
    2412:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2414:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2416:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2418:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    241a:	b25b      	sxtb	r3, r3
    241c:	2b00      	cmp	r3, #0
    241e:	dbfb      	blt.n	2418 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    2420:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2422:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2424:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2426:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2428:	b25b      	sxtb	r3, r3
    242a:	2b00      	cmp	r3, #0
    242c:	dbfb      	blt.n	2426 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    242e:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    2430:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    2432:	2000      	movs	r0, #0
    2434:	e71a      	b.n	226c <tc_init+0x58>
    2436:	46c0      	nop			; (mov r8, r8)
    2438:	000021dd 	.word	0x000021dd
    243c:	2000099c 	.word	0x2000099c
    2440:	40000400 	.word	0x40000400
    2444:	00001fbd 	.word	0x00001fbd
    2448:	00001f31 	.word	0x00001f31
    244c:	000020b5 	.word	0x000020b5

00002450 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    2450:	6802      	ldr	r2, [r0, #0]
    2452:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    2454:	b25b      	sxtb	r3, r3
    2456:	2b00      	cmp	r3, #0
    2458:	dbfb      	blt.n	2452 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    245a:	7903      	ldrb	r3, [r0, #4]
    245c:	2b04      	cmp	r3, #4
    245e:	d005      	beq.n	246c <tc_get_count_value+0x1c>
    2460:	2b08      	cmp	r3, #8
    2462:	d009      	beq.n	2478 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    2464:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    2466:	2b00      	cmp	r3, #0
    2468:	d003      	beq.n	2472 <tc_get_count_value+0x22>
}
    246a:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    246c:	7c10      	ldrb	r0, [r2, #16]
    246e:	b2c0      	uxtb	r0, r0
    2470:	e7fb      	b.n	246a <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    2472:	8a10      	ldrh	r0, [r2, #16]
    2474:	b280      	uxth	r0, r0
    2476:	e7f8      	b.n	246a <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    2478:	6910      	ldr	r0, [r2, #16]
    247a:	e7f6      	b.n	246a <tc_get_count_value+0x1a>

0000247c <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    247c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    247e:	6804      	ldr	r4, [r0, #0]
    2480:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    2482:	b25b      	sxtb	r3, r3
    2484:	2b00      	cmp	r3, #0
    2486:	dbfb      	blt.n	2480 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    2488:	7903      	ldrb	r3, [r0, #4]
    248a:	2b04      	cmp	r3, #4
    248c:	d005      	beq.n	249a <tc_set_compare_value+0x1e>
    248e:	2b08      	cmp	r3, #8
    2490:	d014      	beq.n	24bc <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    2492:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    2494:	2b00      	cmp	r3, #0
    2496:	d008      	beq.n	24aa <tc_set_compare_value+0x2e>
}
    2498:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    249a:	2017      	movs	r0, #23
			if (channel_index <
    249c:	2901      	cmp	r1, #1
    249e:	d8fb      	bhi.n	2498 <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    24a0:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    24a2:	1861      	adds	r1, r4, r1
    24a4:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    24a6:	2000      	movs	r0, #0
    24a8:	e7f6      	b.n	2498 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    24aa:	2017      	movs	r0, #23
			if (channel_index <
    24ac:	2901      	cmp	r1, #1
    24ae:	d8f3      	bhi.n	2498 <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    24b0:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    24b2:	310c      	adds	r1, #12
    24b4:	0049      	lsls	r1, r1, #1
    24b6:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    24b8:	2000      	movs	r0, #0
    24ba:	e7ed      	b.n	2498 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    24bc:	2017      	movs	r0, #23
			if (channel_index <
    24be:	2901      	cmp	r1, #1
    24c0:	d8ea      	bhi.n	2498 <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    24c2:	3106      	adds	r1, #6
    24c4:	0089      	lsls	r1, r1, #2
    24c6:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    24c8:	2000      	movs	r0, #0
    24ca:	e7e5      	b.n	2498 <tc_set_compare_value+0x1c>

000024cc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    24cc:	e7fe      	b.n	24cc <Dummy_Handler>
	...

000024d0 <Reset_Handler>:
{
    24d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    24d2:	4a2a      	ldr	r2, [pc, #168]	; (257c <Reset_Handler+0xac>)
    24d4:	4b2a      	ldr	r3, [pc, #168]	; (2580 <Reset_Handler+0xb0>)
    24d6:	429a      	cmp	r2, r3
    24d8:	d011      	beq.n	24fe <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    24da:	001a      	movs	r2, r3
    24dc:	4b29      	ldr	r3, [pc, #164]	; (2584 <Reset_Handler+0xb4>)
    24de:	429a      	cmp	r2, r3
    24e0:	d20d      	bcs.n	24fe <Reset_Handler+0x2e>
    24e2:	4a29      	ldr	r2, [pc, #164]	; (2588 <Reset_Handler+0xb8>)
    24e4:	3303      	adds	r3, #3
    24e6:	1a9b      	subs	r3, r3, r2
    24e8:	089b      	lsrs	r3, r3, #2
    24ea:	3301      	adds	r3, #1
    24ec:	009b      	lsls	r3, r3, #2
    24ee:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    24f0:	4823      	ldr	r0, [pc, #140]	; (2580 <Reset_Handler+0xb0>)
    24f2:	4922      	ldr	r1, [pc, #136]	; (257c <Reset_Handler+0xac>)
    24f4:	588c      	ldr	r4, [r1, r2]
    24f6:	5084      	str	r4, [r0, r2]
    24f8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    24fa:	429a      	cmp	r2, r3
    24fc:	d1fa      	bne.n	24f4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    24fe:	4a23      	ldr	r2, [pc, #140]	; (258c <Reset_Handler+0xbc>)
    2500:	4b23      	ldr	r3, [pc, #140]	; (2590 <Reset_Handler+0xc0>)
    2502:	429a      	cmp	r2, r3
    2504:	d20a      	bcs.n	251c <Reset_Handler+0x4c>
    2506:	43d3      	mvns	r3, r2
    2508:	4921      	ldr	r1, [pc, #132]	; (2590 <Reset_Handler+0xc0>)
    250a:	185b      	adds	r3, r3, r1
    250c:	2103      	movs	r1, #3
    250e:	438b      	bics	r3, r1
    2510:	3304      	adds	r3, #4
    2512:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2514:	2100      	movs	r1, #0
    2516:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2518:	4293      	cmp	r3, r2
    251a:	d1fc      	bne.n	2516 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    251c:	4a1d      	ldr	r2, [pc, #116]	; (2594 <Reset_Handler+0xc4>)
    251e:	21ff      	movs	r1, #255	; 0xff
    2520:	4b1d      	ldr	r3, [pc, #116]	; (2598 <Reset_Handler+0xc8>)
    2522:	438b      	bics	r3, r1
    2524:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2526:	39fd      	subs	r1, #253	; 0xfd
    2528:	2390      	movs	r3, #144	; 0x90
    252a:	005b      	lsls	r3, r3, #1
    252c:	4a1b      	ldr	r2, [pc, #108]	; (259c <Reset_Handler+0xcc>)
    252e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2530:	4a1b      	ldr	r2, [pc, #108]	; (25a0 <Reset_Handler+0xd0>)
    2532:	78d3      	ldrb	r3, [r2, #3]
    2534:	2503      	movs	r5, #3
    2536:	43ab      	bics	r3, r5
    2538:	2402      	movs	r4, #2
    253a:	4323      	orrs	r3, r4
    253c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    253e:	78d3      	ldrb	r3, [r2, #3]
    2540:	270c      	movs	r7, #12
    2542:	43bb      	bics	r3, r7
    2544:	2608      	movs	r6, #8
    2546:	4333      	orrs	r3, r6
    2548:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    254a:	4b16      	ldr	r3, [pc, #88]	; (25a4 <Reset_Handler+0xd4>)
    254c:	7b98      	ldrb	r0, [r3, #14]
    254e:	2230      	movs	r2, #48	; 0x30
    2550:	4390      	bics	r0, r2
    2552:	2220      	movs	r2, #32
    2554:	4310      	orrs	r0, r2
    2556:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2558:	7b99      	ldrb	r1, [r3, #14]
    255a:	43b9      	bics	r1, r7
    255c:	4331      	orrs	r1, r6
    255e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2560:	7b9a      	ldrb	r2, [r3, #14]
    2562:	43aa      	bics	r2, r5
    2564:	4322      	orrs	r2, r4
    2566:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2568:	4a0f      	ldr	r2, [pc, #60]	; (25a8 <Reset_Handler+0xd8>)
    256a:	6853      	ldr	r3, [r2, #4]
    256c:	2180      	movs	r1, #128	; 0x80
    256e:	430b      	orrs	r3, r1
    2570:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2572:	4b0e      	ldr	r3, [pc, #56]	; (25ac <Reset_Handler+0xdc>)
    2574:	4798      	blx	r3
        main();
    2576:	4b0e      	ldr	r3, [pc, #56]	; (25b0 <Reset_Handler+0xe0>)
    2578:	4798      	blx	r3
    257a:	e7fe      	b.n	257a <Reset_Handler+0xaa>
    257c:	000092e8 	.word	0x000092e8
    2580:	20000000 	.word	0x20000000
    2584:	200001dc 	.word	0x200001dc
    2588:	20000004 	.word	0x20000004
    258c:	200001dc 	.word	0x200001dc
    2590:	20000abc 	.word	0x20000abc
    2594:	e000ed00 	.word	0xe000ed00
    2598:	00000000 	.word	0x00000000
    259c:	41007000 	.word	0x41007000
    25a0:	41005000 	.word	0x41005000
    25a4:	41004800 	.word	0x41004800
    25a8:	41004000 	.word	0x41004000
    25ac:	00003445 	.word	0x00003445
    25b0:	00003335 	.word	0x00003335

000025b4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    25b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    25b6:	46c6      	mov	lr, r8
    25b8:	b500      	push	{lr}
    25ba:	000c      	movs	r4, r1
    25bc:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    25be:	2800      	cmp	r0, #0
    25c0:	d10f      	bne.n	25e2 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    25c2:	2a00      	cmp	r2, #0
    25c4:	dd11      	ble.n	25ea <_read+0x36>
    25c6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    25c8:	4e09      	ldr	r6, [pc, #36]	; (25f0 <_read+0x3c>)
    25ca:	4d0a      	ldr	r5, [pc, #40]	; (25f4 <_read+0x40>)
    25cc:	6830      	ldr	r0, [r6, #0]
    25ce:	0021      	movs	r1, r4
    25d0:	682b      	ldr	r3, [r5, #0]
    25d2:	4798      	blx	r3
		ptr++;
    25d4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    25d6:	42bc      	cmp	r4, r7
    25d8:	d1f8      	bne.n	25cc <_read+0x18>
		nChars++;
	}
	return nChars;
}
    25da:	4640      	mov	r0, r8
    25dc:	bc04      	pop	{r2}
    25de:	4690      	mov	r8, r2
    25e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    25e2:	2301      	movs	r3, #1
    25e4:	425b      	negs	r3, r3
    25e6:	4698      	mov	r8, r3
    25e8:	e7f7      	b.n	25da <_read+0x26>
	for (; len > 0; --len) {
    25ea:	4680      	mov	r8, r0
    25ec:	e7f5      	b.n	25da <_read+0x26>
    25ee:	46c0      	nop			; (mov r8, r8)
    25f0:	200009b0 	.word	0x200009b0
    25f4:	200009a8 	.word	0x200009a8

000025f8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    25f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    25fa:	46c6      	mov	lr, r8
    25fc:	b500      	push	{lr}
    25fe:	000e      	movs	r6, r1
    2600:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2602:	3801      	subs	r0, #1
    2604:	2802      	cmp	r0, #2
    2606:	d810      	bhi.n	262a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2608:	2a00      	cmp	r2, #0
    260a:	d011      	beq.n	2630 <_write+0x38>
    260c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    260e:	4b0c      	ldr	r3, [pc, #48]	; (2640 <_write+0x48>)
    2610:	4698      	mov	r8, r3
    2612:	4f0c      	ldr	r7, [pc, #48]	; (2644 <_write+0x4c>)
    2614:	4643      	mov	r3, r8
    2616:	6818      	ldr	r0, [r3, #0]
    2618:	5d31      	ldrb	r1, [r6, r4]
    261a:	683b      	ldr	r3, [r7, #0]
    261c:	4798      	blx	r3
    261e:	2800      	cmp	r0, #0
    2620:	db08      	blt.n	2634 <_write+0x3c>
			return -1;
		}
		++nChars;
    2622:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2624:	42a5      	cmp	r5, r4
    2626:	d1f5      	bne.n	2614 <_write+0x1c>
    2628:	e006      	b.n	2638 <_write+0x40>
		return -1;
    262a:	2401      	movs	r4, #1
    262c:	4264      	negs	r4, r4
    262e:	e003      	b.n	2638 <_write+0x40>
	for (; len != 0; --len) {
    2630:	0014      	movs	r4, r2
    2632:	e001      	b.n	2638 <_write+0x40>
			return -1;
    2634:	2401      	movs	r4, #1
    2636:	4264      	negs	r4, r4
	}
	return nChars;
}
    2638:	0020      	movs	r0, r4
    263a:	bc04      	pop	{r2}
    263c:	4690      	mov	r8, r2
    263e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2640:	200009b0 	.word	0x200009b0
    2644:	200009ac 	.word	0x200009ac

00002648 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2648:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    264a:	4a06      	ldr	r2, [pc, #24]	; (2664 <_sbrk+0x1c>)
    264c:	6812      	ldr	r2, [r2, #0]
    264e:	2a00      	cmp	r2, #0
    2650:	d004      	beq.n	265c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2652:	4a04      	ldr	r2, [pc, #16]	; (2664 <_sbrk+0x1c>)
    2654:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2656:	18c3      	adds	r3, r0, r3
    2658:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    265a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    265c:	4902      	ldr	r1, [pc, #8]	; (2668 <_sbrk+0x20>)
    265e:	4a01      	ldr	r2, [pc, #4]	; (2664 <_sbrk+0x1c>)
    2660:	6011      	str	r1, [r2, #0]
    2662:	e7f6      	b.n	2652 <_sbrk+0xa>
    2664:	20000234 	.word	0x20000234
    2668:	20002ac0 	.word	0x20002ac0

0000266c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    266c:	2001      	movs	r0, #1
    266e:	4240      	negs	r0, r0
    2670:	4770      	bx	lr

00002672 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2672:	2380      	movs	r3, #128	; 0x80
    2674:	019b      	lsls	r3, r3, #6
    2676:	604b      	str	r3, [r1, #4]

	return 0;
}
    2678:	2000      	movs	r0, #0
    267a:	4770      	bx	lr

0000267c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    267c:	2001      	movs	r0, #1
    267e:	4770      	bx	lr

00002680 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2680:	2000      	movs	r0, #0
    2682:	4770      	bx	lr

00002684 <usart_serial_getchar>:
{
    2684:	b570      	push	{r4, r5, r6, lr}
    2686:	b082      	sub	sp, #8
    2688:	0005      	movs	r5, r0
    268a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    268c:	2200      	movs	r2, #0
    268e:	466b      	mov	r3, sp
    2690:	80da      	strh	r2, [r3, #6]
	while(STATUS_OK != usart_read_wait(module, &temp));
    2692:	4c06      	ldr	r4, [pc, #24]	; (26ac <usart_serial_getchar+0x28>)
    2694:	466b      	mov	r3, sp
    2696:	1d99      	adds	r1, r3, #6
    2698:	0028      	movs	r0, r5
    269a:	47a0      	blx	r4
    269c:	2800      	cmp	r0, #0
    269e:	d1f9      	bne.n	2694 <usart_serial_getchar+0x10>
	*c = temp;
    26a0:	466b      	mov	r3, sp
    26a2:	3306      	adds	r3, #6
    26a4:	881b      	ldrh	r3, [r3, #0]
    26a6:	7033      	strb	r3, [r6, #0]
}
    26a8:	b002      	add	sp, #8
    26aa:	bd70      	pop	{r4, r5, r6, pc}
    26ac:	00001545 	.word	0x00001545

000026b0 <usart_serial_putchar>:
{
    26b0:	b570      	push	{r4, r5, r6, lr}
    26b2:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    26b4:	b28c      	uxth	r4, r1
    26b6:	4e03      	ldr	r6, [pc, #12]	; (26c4 <usart_serial_putchar+0x14>)
    26b8:	0021      	movs	r1, r4
    26ba:	0028      	movs	r0, r5
    26bc:	47b0      	blx	r6
    26be:	2800      	cmp	r0, #0
    26c0:	d1fa      	bne.n	26b8 <usart_serial_putchar+0x8>
}
    26c2:	bd70      	pop	{r4, r5, r6, pc}
    26c4:	00001519 	.word	0x00001519

000026c8 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    26c8:	b510      	push	{r4, lr}
    26ca:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    26cc:	466b      	mov	r3, sp
    26ce:	1ddc      	adds	r4, r3, #7
    26d0:	2201      	movs	r2, #1
    26d2:	0021      	movs	r1, r4
    26d4:	480f      	ldr	r0, [pc, #60]	; (2714 <USART_HOST_ISR_VECT+0x4c>)
    26d6:	4b10      	ldr	r3, [pc, #64]	; (2718 <USART_HOST_ISR_VECT+0x50>)
    26d8:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    26da:	b672      	cpsid	i
    26dc:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    26e0:	2200      	movs	r2, #0
    26e2:	4b0e      	ldr	r3, [pc, #56]	; (271c <USART_HOST_ISR_VECT+0x54>)
    26e4:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    26e6:	4b0e      	ldr	r3, [pc, #56]	; (2720 <USART_HOST_ISR_VECT+0x58>)
    26e8:	781b      	ldrb	r3, [r3, #0]
    26ea:	7821      	ldrb	r1, [r4, #0]
    26ec:	4a0d      	ldr	r2, [pc, #52]	; (2724 <USART_HOST_ISR_VECT+0x5c>)
    26ee:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    26f0:	2b9b      	cmp	r3, #155	; 0x9b
    26f2:	d00a      	beq.n	270a <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    26f4:	3301      	adds	r3, #1
    26f6:	4a0a      	ldr	r2, [pc, #40]	; (2720 <USART_HOST_ISR_VECT+0x58>)
    26f8:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    26fa:	2201      	movs	r2, #1
    26fc:	4b07      	ldr	r3, [pc, #28]	; (271c <USART_HOST_ISR_VECT+0x54>)
    26fe:	701a      	strb	r2, [r3, #0]
    2700:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2704:	b662      	cpsie	i
}
    2706:	b002      	add	sp, #8
    2708:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    270a:	2200      	movs	r2, #0
    270c:	4b04      	ldr	r3, [pc, #16]	; (2720 <USART_HOST_ISR_VECT+0x58>)
    270e:	701a      	strb	r2, [r3, #0]
    2710:	e7f3      	b.n	26fa <USART_HOST_ISR_VECT+0x32>
    2712:	46c0      	nop			; (mov r8, r8)
    2714:	20000238 	.word	0x20000238
    2718:	000015b5 	.word	0x000015b5
    271c:	20000008 	.word	0x20000008
    2720:	20000308 	.word	0x20000308
    2724:	2000026c 	.word	0x2000026c

00002728 <sio2host_init>:
{
    2728:	b5f0      	push	{r4, r5, r6, r7, lr}
    272a:	b091      	sub	sp, #68	; 0x44
	config->data_order       = USART_DATAORDER_LSB;
    272c:	2380      	movs	r3, #128	; 0x80
    272e:	05db      	lsls	r3, r3, #23
    2730:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2732:	2300      	movs	r3, #0
    2734:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2736:	22ff      	movs	r2, #255	; 0xff
    2738:	4669      	mov	r1, sp
    273a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    273c:	2200      	movs	r2, #0
    273e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2740:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    2742:	2196      	movs	r1, #150	; 0x96
    2744:	0189      	lsls	r1, r1, #6
    2746:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    2748:	2401      	movs	r4, #1
    274a:	2124      	movs	r1, #36	; 0x24
    274c:	4668      	mov	r0, sp
    274e:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    2750:	3101      	adds	r1, #1
    2752:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    2754:	3101      	adds	r1, #1
    2756:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    2758:	3101      	adds	r1, #1
    275a:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    275c:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    275e:	3105      	adds	r1, #5
    2760:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    2762:	3101      	adds	r1, #1
    2764:	5443      	strb	r3, [r0, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2766:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2768:	8203      	strh	r3, [r0, #16]
	config->lin_slave_enable      = false;
    276a:	76c3      	strb	r3, [r0, #27]
	config->immediate_buffer_overflow_notification  = false;
    276c:	7602      	strb	r2, [r0, #24]
	config->start_frame_detection_enable            = false;
    276e:	7702      	strb	r2, [r0, #28]
	config->encoding_format_enable                  = false;
    2770:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    2772:	2313      	movs	r3, #19
    2774:	7683      	strb	r3, [r0, #26]
	config->collision_detection_enable              = false;
    2776:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    2778:	2380      	movs	r3, #128	; 0x80
    277a:	035b      	lsls	r3, r3, #13
    277c:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    277e:	4b2e      	ldr	r3, [pc, #184]	; (2838 <sio2host_init+0x110>)
    2780:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    2782:	4b2e      	ldr	r3, [pc, #184]	; (283c <sio2host_init+0x114>)
    2784:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    2786:	2301      	movs	r3, #1
    2788:	425b      	negs	r3, r3
    278a:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    278c:	930f      	str	r3, [sp, #60]	; 0x3c
	stdio_base = (void *)module;
    278e:	4d2c      	ldr	r5, [pc, #176]	; (2840 <sio2host_init+0x118>)
    2790:	4b2c      	ldr	r3, [pc, #176]	; (2844 <sio2host_init+0x11c>)
    2792:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2794:	4a2c      	ldr	r2, [pc, #176]	; (2848 <sio2host_init+0x120>)
    2796:	4b2d      	ldr	r3, [pc, #180]	; (284c <sio2host_init+0x124>)
    2798:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    279a:	4a2d      	ldr	r2, [pc, #180]	; (2850 <sio2host_init+0x128>)
    279c:	4b2d      	ldr	r3, [pc, #180]	; (2854 <sio2host_init+0x12c>)
    279e:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    27a0:	466a      	mov	r2, sp
    27a2:	492d      	ldr	r1, [pc, #180]	; (2858 <sio2host_init+0x130>)
    27a4:	0028      	movs	r0, r5
    27a6:	4b2d      	ldr	r3, [pc, #180]	; (285c <sio2host_init+0x134>)
    27a8:	4798      	blx	r3
	setbuf(stdout, NULL);
    27aa:	4f2d      	ldr	r7, [pc, #180]	; (2860 <sio2host_init+0x138>)
    27ac:	683b      	ldr	r3, [r7, #0]
    27ae:	6898      	ldr	r0, [r3, #8]
    27b0:	2100      	movs	r1, #0
    27b2:	4e2c      	ldr	r6, [pc, #176]	; (2864 <sio2host_init+0x13c>)
    27b4:	47b0      	blx	r6
	setbuf(stdin, NULL);
    27b6:	683b      	ldr	r3, [r7, #0]
    27b8:	6858      	ldr	r0, [r3, #4]
    27ba:	2100      	movs	r1, #0
    27bc:	47b0      	blx	r6
	SercomUsart *const usart_hw = &(module->hw->USART);
    27be:	682e      	ldr	r6, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    27c0:	0030      	movs	r0, r6
    27c2:	4b29      	ldr	r3, [pc, #164]	; (2868 <sio2host_init+0x140>)
    27c4:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    27c6:	231f      	movs	r3, #31
    27c8:	4018      	ands	r0, r3
    27ca:	4084      	lsls	r4, r0
    27cc:	4b27      	ldr	r3, [pc, #156]	; (286c <sio2host_init+0x144>)
    27ce:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    27d0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    27d2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    27d4:	2b00      	cmp	r3, #0
    27d6:	d1fc      	bne.n	27d2 <sio2host_init+0xaa>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    27d8:	6833      	ldr	r3, [r6, #0]
    27da:	2202      	movs	r2, #2
    27dc:	4313      	orrs	r3, r2
    27de:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    27e0:	4b17      	ldr	r3, [pc, #92]	; (2840 <sio2host_init+0x118>)
    27e2:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    27e4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    27e6:	2a00      	cmp	r2, #0
    27e8:	d1fc      	bne.n	27e4 <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    27ea:	6859      	ldr	r1, [r3, #4]
    27ec:	2280      	movs	r2, #128	; 0x80
    27ee:	0252      	lsls	r2, r2, #9
    27f0:	430a      	orrs	r2, r1
    27f2:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    27f4:	2101      	movs	r1, #1
    27f6:	4a12      	ldr	r2, [pc, #72]	; (2840 <sio2host_init+0x118>)
    27f8:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    27fa:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    27fc:	2a00      	cmp	r2, #0
    27fe:	d1fc      	bne.n	27fa <sio2host_init+0xd2>
	return (usart_hw->SYNCBUSY.reg);
    2800:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2802:	2a00      	cmp	r2, #0
    2804:	d1fc      	bne.n	2800 <sio2host_init+0xd8>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    2806:	6859      	ldr	r1, [r3, #4]
    2808:	2280      	movs	r2, #128	; 0x80
    280a:	0292      	lsls	r2, r2, #10
    280c:	430a      	orrs	r2, r1
    280e:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    2810:	2101      	movs	r1, #1
    2812:	4a0b      	ldr	r2, [pc, #44]	; (2840 <sio2host_init+0x118>)
    2814:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    2816:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2818:	2a00      	cmp	r2, #0
    281a:	d1fc      	bne.n	2816 <sio2host_init+0xee>
	USART_HOST_RX_ISR_ENABLE();
    281c:	4914      	ldr	r1, [pc, #80]	; (2870 <sio2host_init+0x148>)
    281e:	2000      	movs	r0, #0
    2820:	4b14      	ldr	r3, [pc, #80]	; (2874 <sio2host_init+0x14c>)
    2822:	4798      	blx	r3
    2824:	2204      	movs	r2, #4
    2826:	4b0c      	ldr	r3, [pc, #48]	; (2858 <sio2host_init+0x130>)
    2828:	759a      	strb	r2, [r3, #22]
    282a:	32fd      	adds	r2, #253	; 0xfd
    282c:	32ff      	adds	r2, #255	; 0xff
    282e:	4b0f      	ldr	r3, [pc, #60]	; (286c <sio2host_init+0x144>)
    2830:	601a      	str	r2, [r3, #0]
}
    2832:	b011      	add	sp, #68	; 0x44
    2834:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2836:	46c0      	nop			; (mov r8, r8)
    2838:	00040003 	.word	0x00040003
    283c:	00050003 	.word	0x00050003
    2840:	20000238 	.word	0x20000238
    2844:	200009b0 	.word	0x200009b0
    2848:	000026b1 	.word	0x000026b1
    284c:	200009ac 	.word	0x200009ac
    2850:	00002685 	.word	0x00002685
    2854:	200009a8 	.word	0x200009a8
    2858:	42000800 	.word	0x42000800
    285c:	000011d9 	.word	0x000011d9
    2860:	2000000c 	.word	0x2000000c
    2864:	00003e99 	.word	0x00003e99
    2868:	00000d91 	.word	0x00000d91
    286c:	e000e100 	.word	0xe000e100
    2870:	000026c9 	.word	0x000026c9
    2874:	00000d55 	.word	0x00000d55

00002878 <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    2878:	b510      	push	{r4, lr}
	nwkIb.nwkSeqNum = 0;
    287a:	4a0d      	ldr	r2, [pc, #52]	; (28b0 <NWK_Init+0x38>)
    287c:	2300      	movs	r3, #0
    287e:	7113      	strb	r3, [r2, #4]
	nwkIb.macSeqNum = 0;
    2880:	7153      	strb	r3, [r2, #5]
	nwkIb.addr = 0;
    2882:	8013      	strh	r3, [r2, #0]
	nwkIb.lock = 0;
    2884:	2158      	movs	r1, #88	; 0x58
    2886:	5253      	strh	r3, [r2, r1]
    2888:	0013      	movs	r3, r2
    288a:	3240      	adds	r2, #64	; 0x40

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    288c:	2100      	movs	r1, #0
    288e:	6099      	str	r1, [r3, #8]
    2890:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    2892:	4293      	cmp	r3, r2
    2894:	d1fb      	bne.n	288e <NWK_Init+0x16>
	}

	nwkTxInit();
    2896:	4b07      	ldr	r3, [pc, #28]	; (28b4 <NWK_Init+0x3c>)
    2898:	4798      	blx	r3
	nwkRxInit();
    289a:	4b07      	ldr	r3, [pc, #28]	; (28b8 <NWK_Init+0x40>)
    289c:	4798      	blx	r3
	nwkFrameInit();
    289e:	4b07      	ldr	r3, [pc, #28]	; (28bc <NWK_Init+0x44>)
    28a0:	4798      	blx	r3
	nwkDataReqInit();
    28a2:	4b07      	ldr	r3, [pc, #28]	; (28c0 <NWK_Init+0x48>)
    28a4:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    28a6:	4b07      	ldr	r3, [pc, #28]	; (28c4 <NWK_Init+0x4c>)
    28a8:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    28aa:	4b07      	ldr	r3, [pc, #28]	; (28c8 <NWK_Init+0x50>)
    28ac:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
    28ae:	bd10      	pop	{r4, pc}
    28b0:	200009b4 	.word	0x200009b4
    28b4:	00002b65 	.word	0x00002b65
    28b8:	00002a5d 	.word	0x00002a5d
    28bc:	000028e9 	.word	0x000028e9
    28c0:	000028dd 	.word	0x000028dd
    28c4:	00002939 	.word	0x00002939
    28c8:	00002a9d 	.word	0x00002a9d

000028cc <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    28cc:	3002      	adds	r0, #2
    28ce:	0080      	lsls	r0, r0, #2
    28d0:	4b01      	ldr	r3, [pc, #4]	; (28d8 <NWK_OpenEndpoint+0xc>)
    28d2:	50c1      	str	r1, [r0, r3]
}
    28d4:	4770      	bx	lr
    28d6:	46c0      	nop			; (mov r8, r8)
    28d8:	200009b4 	.word	0x200009b4

000028dc <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    28dc:	2200      	movs	r2, #0
    28de:	4b01      	ldr	r3, [pc, #4]	; (28e4 <nwkDataReqInit+0x8>)
    28e0:	601a      	str	r2, [r3, #0]
}
    28e2:	4770      	bx	lr
    28e4:	2000030c 	.word	0x2000030c

000028e8 <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    28e8:	4b03      	ldr	r3, [pc, #12]	; (28f8 <nwkFrameInit+0x10>)
    28ea:	2200      	movs	r2, #0
    28ec:	701a      	strb	r2, [r3, #0]
    28ee:	218d      	movs	r1, #141	; 0x8d
    28f0:	545a      	strb	r2, [r3, r1]
    28f2:	318d      	adds	r1, #141	; 0x8d
    28f4:	545a      	strb	r2, [r3, r1]
	}
}
    28f6:	4770      	bx	lr
    28f8:	20000310 	.word	0x20000310

000028fc <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    28fc:	2800      	cmp	r0, #0
    28fe:	d012      	beq.n	2926 <nwkFrameNext+0x2a>
		frame = nwkFrameFrames;
	} else {
		frame++;
    2900:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2902:	4b0c      	ldr	r3, [pc, #48]	; (2934 <nwkFrameNext+0x38>)
    2904:	33a8      	adds	r3, #168	; 0xa8
    2906:	33ff      	adds	r3, #255	; 0xff
    2908:	4298      	cmp	r0, r3
    290a:	d210      	bcs.n	292e <nwkFrameNext+0x32>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    290c:	7803      	ldrb	r3, [r0, #0]
    290e:	2b00      	cmp	r3, #0
    2910:	d10c      	bne.n	292c <nwkFrameNext+0x30>
	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2912:	4a08      	ldr	r2, [pc, #32]	; (2934 <nwkFrameNext+0x38>)
    2914:	32a8      	adds	r2, #168	; 0xa8
    2916:	32ff      	adds	r2, #255	; 0xff
    2918:	308d      	adds	r0, #141	; 0x8d
    291a:	4290      	cmp	r0, r2
    291c:	d205      	bcs.n	292a <nwkFrameNext+0x2e>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    291e:	7803      	ldrb	r3, [r0, #0]
    2920:	2b00      	cmp	r3, #0
    2922:	d0f9      	beq.n	2918 <nwkFrameNext+0x1c>
    2924:	e002      	b.n	292c <nwkFrameNext+0x30>
		frame = nwkFrameFrames;
    2926:	4803      	ldr	r0, [pc, #12]	; (2934 <nwkFrameNext+0x38>)
    2928:	e7f0      	b.n	290c <nwkFrameNext+0x10>
			return frame;
		}
	}

	return NULL;
    292a:	2000      	movs	r0, #0
}
    292c:	4770      	bx	lr
	return NULL;
    292e:	2000      	movs	r0, #0
    2930:	e7fc      	b.n	292c <nwkFrameNext+0x30>
    2932:	46c0      	nop			; (mov r8, r8)
    2934:	20000310 	.word	0x20000310

00002938 <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    2938:	b5f0      	push	{r4, r5, r6, r7, lr}
    293a:	4b09      	ldr	r3, [pc, #36]	; (2960 <nwkRouteInit+0x28>)
    293c:	3302      	adds	r3, #2
    293e:	2200      	movs	r2, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2940:	2701      	movs	r7, #1
    2942:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    2944:	4c06      	ldr	r4, [pc, #24]	; (2960 <nwkRouteInit+0x28>)
    2946:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    2948:	2500      	movs	r5, #0
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    294a:	801f      	strh	r7, [r3, #0]
		nwkRouteTable[i].fixed = 0;
    294c:	00d0      	lsls	r0, r2, #3
    294e:	5d01      	ldrb	r1, [r0, r4]
    2950:	43b1      	bics	r1, r6
    2952:	5501      	strb	r1, [r0, r4]
		nwkRouteTable[i].rank = 0;
    2954:	711d      	strb	r5, [r3, #4]
    2956:	3201      	adds	r2, #1
    2958:	3308      	adds	r3, #8
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    295a:	2a64      	cmp	r2, #100	; 0x64
    295c:	d1f5      	bne.n	294a <nwkRouteInit+0x12>
	}
}
    295e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2960:	200004b8 	.word	0x200004b8

00002964 <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    2964:	b530      	push	{r4, r5, lr}
    2966:	4a0c      	ldr	r2, [pc, #48]	; (2998 <NWK_RouteFindEntry+0x34>)
    2968:	3202      	adds	r2, #2
    296a:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    296c:	4d0a      	ldr	r5, [pc, #40]	; (2998 <NWK_RouteFindEntry+0x34>)
    296e:	e003      	b.n	2978 <NWK_RouteFindEntry+0x14>
    2970:	3301      	adds	r3, #1
    2972:	3208      	adds	r2, #8
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2974:	2b64      	cmp	r3, #100	; 0x64
    2976:	d00c      	beq.n	2992 <NWK_RouteFindEntry+0x2e>
		if (nwkRouteTable[i].dstAddr == dst &&
    2978:	8814      	ldrh	r4, [r2, #0]
    297a:	4284      	cmp	r4, r0
    297c:	d1f8      	bne.n	2970 <NWK_RouteFindEntry+0xc>
				nwkRouteTable[i].multicast == multicast) {
    297e:	00dc      	lsls	r4, r3, #3
    2980:	5d64      	ldrb	r4, [r4, r5]
    2982:	07a4      	lsls	r4, r4, #30
    2984:	0fe4      	lsrs	r4, r4, #31
		if (nwkRouteTable[i].dstAddr == dst &&
    2986:	428c      	cmp	r4, r1
    2988:	d1f2      	bne.n	2970 <NWK_RouteFindEntry+0xc>
			return &nwkRouteTable[i];
    298a:	00db      	lsls	r3, r3, #3
    298c:	4802      	ldr	r0, [pc, #8]	; (2998 <NWK_RouteFindEntry+0x34>)
    298e:	18c0      	adds	r0, r0, r3
		}
	}

	return NULL;
}
    2990:	bd30      	pop	{r4, r5, pc}
	return NULL;
    2992:	2000      	movs	r0, #0
    2994:	e7fc      	b.n	2990 <NWK_RouteFindEntry+0x2c>
    2996:	46c0      	nop			; (mov r8, r8)
    2998:	200004b8 	.word	0x200004b8

0000299c <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    299c:	7803      	ldrb	r3, [r0, #0]
    299e:	07db      	lsls	r3, r3, #31
    29a0:	d404      	bmi.n	29ac <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    29a2:	2301      	movs	r3, #1
    29a4:	425b      	negs	r3, r3
    29a6:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    29a8:	2300      	movs	r3, #0
    29aa:	7183      	strb	r3, [r0, #6]
}
    29ac:	4770      	bx	lr
	...

000029b0 <nwkRouteRemove>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    29b0:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    29b2:	4b03      	ldr	r3, [pc, #12]	; (29c0 <nwkRouteRemove+0x10>)
    29b4:	4798      	blx	r3
	if (entry) {
    29b6:	2800      	cmp	r0, #0
    29b8:	d001      	beq.n	29be <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    29ba:	4b02      	ldr	r3, [pc, #8]	; (29c4 <nwkRouteRemove+0x14>)
    29bc:	4798      	blx	r3
	}
}
    29be:	bd10      	pop	{r4, pc}
    29c0:	00002965 	.word	0x00002965
    29c4:	0000299d 	.word	0x0000299d

000029c8 <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    29c8:	b510      	push	{r4, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    29ca:	7b02      	ldrb	r2, [r0, #12]
		return false;
    29cc:	2300      	movs	r3, #0
	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    29ce:	2a06      	cmp	r2, #6
    29d0:	d001      	beq.n	29d6 <nwkRouteErrorReceived+0xe>
	}

	nwkRouteRemove(command->dstAddr, command->multicast);

	return true;
}
    29d2:	0018      	movs	r0, r3
    29d4:	bd10      	pop	{r4, pc}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    29d6:	6883      	ldr	r3, [r0, #8]
	nwkRouteRemove(command->dstAddr, command->multicast);
    29d8:	7959      	ldrb	r1, [r3, #5]
    29da:	78da      	ldrb	r2, [r3, #3]
    29dc:	7918      	ldrb	r0, [r3, #4]
    29de:	0200      	lsls	r0, r0, #8
    29e0:	4310      	orrs	r0, r2
    29e2:	4b02      	ldr	r3, [pc, #8]	; (29ec <nwkRouteErrorReceived+0x24>)
    29e4:	4798      	blx	r3
	return true;
    29e6:	2301      	movs	r3, #1
    29e8:	e7f3      	b.n	29d2 <nwkRouteErrorReceived+0xa>
    29ea:	46c0      	nop			; (mov r8, r8)
    29ec:	000029b1 	.word	0x000029b1

000029f0 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    29f0:	b510      	push	{r4, lr}
	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
		return false;
	}
#endif

	if (ind->size < 1) {
    29f2:	7b02      	ldrb	r2, [r0, #12]
		return false;
    29f4:	2300      	movs	r3, #0
	if (ind->size < 1) {
    29f6:	2a00      	cmp	r2, #0
    29f8:	d00a      	beq.n	2a10 <nwkRxSeriveDataInd+0x20>
	}

	switch (ind->data[0]) {
    29fa:	6883      	ldr	r3, [r0, #8]
    29fc:	781b      	ldrb	r3, [r3, #0]
    29fe:	2b00      	cmp	r3, #0
    2a00:	d003      	beq.n	2a0a <nwkRxSeriveDataInd+0x1a>
    2a02:	2b01      	cmp	r3, #1
    2a04:	d006      	beq.n	2a14 <nwkRxSeriveDataInd+0x24>
	case NWK_COMMAND_ROUTE_REPLY:
		return nwkRouteDiscoveryReplyReceived(ind);
#endif

	default:
		return false;
    2a06:	2300      	movs	r3, #0
    2a08:	e002      	b.n	2a10 <nwkRxSeriveDataInd+0x20>
		return nwkTxAckReceived(ind);
    2a0a:	4b04      	ldr	r3, [pc, #16]	; (2a1c <nwkRxSeriveDataInd+0x2c>)
    2a0c:	4798      	blx	r3
    2a0e:	0003      	movs	r3, r0
	}
}
    2a10:	0018      	movs	r0, r3
    2a12:	bd10      	pop	{r4, pc}
		return nwkRouteErrorReceived(ind);
    2a14:	4b02      	ldr	r3, [pc, #8]	; (2a20 <nwkRxSeriveDataInd+0x30>)
    2a16:	4798      	blx	r3
    2a18:	0003      	movs	r3, r0
    2a1a:	e7f9      	b.n	2a10 <nwkRxSeriveDataInd+0x20>
    2a1c:	00002b99 	.word	0x00002b99
    2a20:	000029c9 	.word	0x000029c9

00002a24 <nwkRxDuplicateRejectionTimerHandler>:
{
    2a24:	b570      	push	{r4, r5, r6, lr}
    2a26:	490b      	ldr	r1, [pc, #44]	; (2a54 <nwkRxDuplicateRejectionTimerHandler+0x30>)
    2a28:	1d0b      	adds	r3, r1, #4
    2a2a:	3140      	adds	r1, #64	; 0x40
	bool restart = false;
    2a2c:	2400      	movs	r4, #0
			restart = true;
    2a2e:	2501      	movs	r5, #1
    2a30:	e002      	b.n	2a38 <nwkRxDuplicateRejectionTimerHandler+0x14>
    2a32:	3306      	adds	r3, #6
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2a34:	428b      	cmp	r3, r1
    2a36:	d006      	beq.n	2a46 <nwkRxDuplicateRejectionTimerHandler+0x22>
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    2a38:	781a      	ldrb	r2, [r3, #0]
    2a3a:	2a00      	cmp	r2, #0
    2a3c:	d0f9      	beq.n	2a32 <nwkRxDuplicateRejectionTimerHandler+0xe>
			nwkRxDuplicateRejectionTable[i].ttl--;
    2a3e:	3a01      	subs	r2, #1
    2a40:	701a      	strb	r2, [r3, #0]
			restart = true;
    2a42:	002c      	movs	r4, r5
    2a44:	e7f5      	b.n	2a32 <nwkRxDuplicateRejectionTimerHandler+0xe>
	if (restart) {
    2a46:	2c00      	cmp	r4, #0
    2a48:	d100      	bne.n	2a4c <nwkRxDuplicateRejectionTimerHandler+0x28>
}
    2a4a:	bd70      	pop	{r4, r5, r6, pc}
		SYS_TimerStart(timer);
    2a4c:	4b02      	ldr	r3, [pc, #8]	; (2a58 <nwkRxDuplicateRejectionTimerHandler+0x34>)
    2a4e:	4798      	blx	r3
}
    2a50:	e7fb      	b.n	2a4a <nwkRxDuplicateRejectionTimerHandler+0x26>
    2a52:	46c0      	nop			; (mov r8, r8)
    2a54:	200007d8 	.word	0x200007d8
    2a58:	00002d31 	.word	0x00002d31

00002a5c <nwkRxInit>:
{
    2a5c:	b510      	push	{r4, lr}
    2a5e:	4a0a      	ldr	r2, [pc, #40]	; (2a88 <nwkRxInit+0x2c>)
    2a60:	1d13      	adds	r3, r2, #4
    2a62:	3240      	adds	r2, #64	; 0x40
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    2a64:	2100      	movs	r1, #0
    2a66:	7019      	strb	r1, [r3, #0]
    2a68:	3306      	adds	r3, #6
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2a6a:	4293      	cmp	r3, r2
    2a6c:	d1fb      	bne.n	2a66 <nwkRxInit+0xa>
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    2a6e:	4b07      	ldr	r3, [pc, #28]	; (2a8c <nwkRxInit+0x30>)
    2a70:	2264      	movs	r2, #100	; 0x64
    2a72:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2a74:	2200      	movs	r2, #0
    2a76:	731a      	strb	r2, [r3, #12]
		= nwkRxDuplicateRejectionTimerHandler;
    2a78:	4a05      	ldr	r2, [pc, #20]	; (2a90 <nwkRxInit+0x34>)
    2a7a:	611a      	str	r2, [r3, #16]
	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    2a7c:	4905      	ldr	r1, [pc, #20]	; (2a94 <nwkRxInit+0x38>)
    2a7e:	2000      	movs	r0, #0
    2a80:	4b05      	ldr	r3, [pc, #20]	; (2a98 <nwkRxInit+0x3c>)
    2a82:	4798      	blx	r3
}
    2a84:	bd10      	pop	{r4, pc}
    2a86:	46c0      	nop			; (mov r8, r8)
    2a88:	200007d8 	.word	0x200007d8
    2a8c:	20000814 	.word	0x20000814
    2a90:	00002a25 	.word	0x00002a25
    2a94:	000029f1 	.word	0x000029f1
    2a98:	000028cd 	.word	0x000028cd

00002a9c <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    2a9c:	2300      	movs	r3, #0
    2a9e:	4a02      	ldr	r2, [pc, #8]	; (2aa8 <nwkSecurityInit+0xc>)
    2aa0:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    2aa2:	4a02      	ldr	r2, [pc, #8]	; (2aac <nwkSecurityInit+0x10>)
    2aa4:	6013      	str	r3, [r2, #0]
}
    2aa6:	4770      	bx	lr
    2aa8:	2000082c 	.word	0x2000082c
    2aac:	20000828 	.word	0x20000828

00002ab0 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    2ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ab2:	b083      	sub	sp, #12
    2ab4:	9001      	str	r0, [sp, #4]
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2ab6:	2400      	movs	r4, #0
	NwkFrame_t *frame = NULL;
    2ab8:	2000      	movs	r0, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    2aba:	4d11      	ldr	r5, [pc, #68]	; (2b00 <nwkTxDelayTimerHandler+0x50>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2abc:	2686      	movs	r6, #134	; 0x86
    2abe:	2787      	movs	r7, #135	; 0x87
	while (NULL != (frame = nwkFrameNext(frame))) {
    2ac0:	47a8      	blx	r5
    2ac2:	2800      	cmp	r0, #0
    2ac4:	d013      	beq.n	2aee <nwkTxDelayTimerHandler+0x3e>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    2ac6:	7803      	ldrb	r3, [r0, #0]
    2ac8:	2b11      	cmp	r3, #17
    2aca:	d1f9      	bne.n	2ac0 <nwkTxDelayTimerHandler+0x10>
			if (0 == --frame->tx.timeout) {
    2acc:	5d82      	ldrb	r2, [r0, r6]
    2ace:	5dc3      	ldrb	r3, [r0, r7]
    2ad0:	021b      	lsls	r3, r3, #8
    2ad2:	4313      	orrs	r3, r2
    2ad4:	3b01      	subs	r3, #1
    2ad6:	b29b      	uxth	r3, r3
    2ad8:	5583      	strb	r3, [r0, r6]
    2ada:	0a19      	lsrs	r1, r3, #8
    2adc:	0002      	movs	r2, r0
    2ade:	3286      	adds	r2, #134	; 0x86
    2ae0:	7051      	strb	r1, [r2, #1]
			restart = true;
    2ae2:	2401      	movs	r4, #1
			if (0 == --frame->tx.timeout) {
    2ae4:	2b00      	cmp	r3, #0
    2ae6:	d1eb      	bne.n	2ac0 <nwkTxDelayTimerHandler+0x10>
				frame->state = NWK_TX_STATE_SEND;
    2ae8:	3313      	adds	r3, #19
    2aea:	7003      	strb	r3, [r0, #0]
    2aec:	e7e8      	b.n	2ac0 <nwkTxDelayTimerHandler+0x10>
			}
		}
	}

	if (restart) {
    2aee:	2c00      	cmp	r4, #0
    2af0:	d101      	bne.n	2af6 <nwkTxDelayTimerHandler+0x46>
		SYS_TimerStart(timer);
	}
}
    2af2:	b003      	add	sp, #12
    2af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SYS_TimerStart(timer);
    2af6:	9801      	ldr	r0, [sp, #4]
    2af8:	4b02      	ldr	r3, [pc, #8]	; (2b04 <nwkTxDelayTimerHandler+0x54>)
    2afa:	4798      	blx	r3
}
    2afc:	e7f9      	b.n	2af2 <nwkTxDelayTimerHandler+0x42>
    2afe:	46c0      	nop			; (mov r8, r8)
    2b00:	000028fd 	.word	0x000028fd
    2b04:	00002d31 	.word	0x00002d31

00002b08 <nwkTxAckWaitTimerHandler>:
{
    2b08:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b0a:	b083      	sub	sp, #12
    2b0c:	9001      	str	r0, [sp, #4]
	bool restart = false;
    2b0e:	2400      	movs	r4, #0
	NwkFrame_t *frame = NULL;
    2b10:	2000      	movs	r0, #0
	while (NULL != (frame = nwkFrameNext(frame))) {
    2b12:	4d12      	ldr	r5, [pc, #72]	; (2b5c <nwkTxAckWaitTimerHandler+0x54>)
			if (0 == --frame->tx.timeout) {
    2b14:	2686      	movs	r6, #134	; 0x86
    2b16:	2787      	movs	r7, #135	; 0x87
	while (NULL != (frame = nwkFrameNext(frame))) {
    2b18:	47a8      	blx	r5
    2b1a:	2800      	cmp	r0, #0
    2b1c:	d016      	beq.n	2b4c <nwkTxAckWaitTimerHandler+0x44>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    2b1e:	7803      	ldrb	r3, [r0, #0]
    2b20:	2b16      	cmp	r3, #22
    2b22:	d1f9      	bne.n	2b18 <nwkTxAckWaitTimerHandler+0x10>
			if (0 == --frame->tx.timeout) {
    2b24:	5d82      	ldrb	r2, [r0, r6]
    2b26:	5dc3      	ldrb	r3, [r0, r7]
    2b28:	021b      	lsls	r3, r3, #8
    2b2a:	4313      	orrs	r3, r2
    2b2c:	3b01      	subs	r3, #1
    2b2e:	b29b      	uxth	r3, r3
    2b30:	5583      	strb	r3, [r0, r6]
    2b32:	0a19      	lsrs	r1, r3, #8
    2b34:	0002      	movs	r2, r0
    2b36:	3286      	adds	r2, #134	; 0x86
    2b38:	7051      	strb	r1, [r2, #1]
			restart = true;
    2b3a:	2401      	movs	r4, #1
			if (0 == --frame->tx.timeout) {
    2b3c:	2b00      	cmp	r3, #0
    2b3e:	d1eb      	bne.n	2b18 <nwkTxAckWaitTimerHandler+0x10>
	frame->state = NWK_TX_STATE_CONFIRM;
    2b40:	3317      	adds	r3, #23
    2b42:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    2b44:	2210      	movs	r2, #16
    2b46:	336e      	adds	r3, #110	; 0x6e
    2b48:	54c2      	strb	r2, [r0, r3]
    2b4a:	e7e5      	b.n	2b18 <nwkTxAckWaitTimerHandler+0x10>
	if (restart) {
    2b4c:	2c00      	cmp	r4, #0
    2b4e:	d101      	bne.n	2b54 <nwkTxAckWaitTimerHandler+0x4c>
}
    2b50:	b003      	add	sp, #12
    2b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SYS_TimerStart(timer);
    2b54:	9801      	ldr	r0, [sp, #4]
    2b56:	4b02      	ldr	r3, [pc, #8]	; (2b60 <nwkTxAckWaitTimerHandler+0x58>)
    2b58:	4798      	blx	r3
}
    2b5a:	e7f9      	b.n	2b50 <nwkTxAckWaitTimerHandler+0x48>
    2b5c:	000028fd 	.word	0x000028fd
    2b60:	00002d31 	.word	0x00002d31

00002b64 <nwkTxInit>:
	nwkTxPhyActiveFrame = NULL;
    2b64:	2200      	movs	r2, #0
    2b66:	4b07      	ldr	r3, [pc, #28]	; (2b84 <nwkTxInit+0x20>)
    2b68:	601a      	str	r2, [r3, #0]
	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    2b6a:	4b07      	ldr	r3, [pc, #28]	; (2b88 <nwkTxInit+0x24>)
    2b6c:	2132      	movs	r1, #50	; 0x32
    2b6e:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2b70:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    2b72:	4906      	ldr	r1, [pc, #24]	; (2b8c <nwkTxInit+0x28>)
    2b74:	6119      	str	r1, [r3, #16]
	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    2b76:	4b06      	ldr	r3, [pc, #24]	; (2b90 <nwkTxInit+0x2c>)
    2b78:	210a      	movs	r1, #10
    2b7a:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2b7c:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    2b7e:	4a05      	ldr	r2, [pc, #20]	; (2b94 <nwkTxInit+0x30>)
    2b80:	611a      	str	r2, [r3, #16]
}
    2b82:	4770      	bx	lr
    2b84:	20000858 	.word	0x20000858
    2b88:	20000830 	.word	0x20000830
    2b8c:	00002b09 	.word	0x00002b09
    2b90:	20000844 	.word	0x20000844
    2b94:	00002ab1 	.word	0x00002ab1

00002b98 <nwkTxAckReceived>:
{
    2b98:	b570      	push	{r4, r5, r6, lr}
	if (sizeof(NwkCommandAck_t) != ind->size) {
    2b9a:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2b9c:	2300      	movs	r3, #0
	if (sizeof(NwkCommandAck_t) != ind->size) {
    2b9e:	2a03      	cmp	r2, #3
    2ba0:	d001      	beq.n	2ba6 <nwkTxAckReceived+0xe>
}
    2ba2:	0018      	movs	r0, r3
    2ba4:	bd70      	pop	{r4, r5, r6, pc}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    2ba6:	6885      	ldr	r5, [r0, #8]
    2ba8:	2000      	movs	r0, #0
	while (NULL != (frame = nwkFrameNext(frame))) {
    2baa:	4c0a      	ldr	r4, [pc, #40]	; (2bd4 <nwkTxAckReceived+0x3c>)
    2bac:	47a0      	blx	r4
    2bae:	2800      	cmp	r0, #0
    2bb0:	d00d      	beq.n	2bce <nwkTxAckReceived+0x36>
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    2bb2:	7803      	ldrb	r3, [r0, #0]
    2bb4:	2b16      	cmp	r3, #22
    2bb6:	d1f9      	bne.n	2bac <nwkTxAckReceived+0x14>
    2bb8:	7b02      	ldrb	r2, [r0, #12]
    2bba:	786b      	ldrb	r3, [r5, #1]
    2bbc:	429a      	cmp	r2, r3
    2bbe:	d1f5      	bne.n	2bac <nwkTxAckReceived+0x14>
			frame->state = NWK_TX_STATE_CONFIRM;
    2bc0:	2317      	movs	r3, #23
    2bc2:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    2bc4:	78aa      	ldrb	r2, [r5, #2]
    2bc6:	3371      	adds	r3, #113	; 0x71
    2bc8:	54c2      	strb	r2, [r0, r3]
			return true;
    2bca:	3b87      	subs	r3, #135	; 0x87
    2bcc:	e7e9      	b.n	2ba2 <nwkTxAckReceived+0xa>
	return false;
    2bce:	2300      	movs	r3, #0
    2bd0:	e7e7      	b.n	2ba2 <nwkTxAckReceived+0xa>
    2bd2:	46c0      	nop			; (mov r8, r8)
    2bd4:	000028fd 	.word	0x000028fd

00002bd8 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    2bd8:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    2bda:	4b0e      	ldr	r3, [pc, #56]	; (2c14 <PHY_Init+0x3c>)
    2bdc:	4798      	blx	r3
	PhyReset();
    2bde:	4b0e      	ldr	r3, [pc, #56]	; (2c18 <PHY_Init+0x40>)
    2be0:	4798      	blx	r3
	phyRxState = false;
    2be2:	2200      	movs	r2, #0
    2be4:	4b0d      	ldr	r3, [pc, #52]	; (2c1c <PHY_Init+0x44>)
    2be6:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    2be8:	3201      	adds	r2, #1
    2bea:	4b0d      	ldr	r3, [pc, #52]	; (2c20 <PHY_Init+0x48>)
    2bec:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2bee:	4e0d      	ldr	r6, [pc, #52]	; (2c24 <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2bf0:	4d0d      	ldr	r5, [pc, #52]	; (2c28 <PHY_Init+0x50>)
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2bf2:	241f      	movs	r4, #31
	trx_reg_write(reg, value);
    2bf4:	2108      	movs	r1, #8
    2bf6:	2002      	movs	r0, #2
    2bf8:	47b0      	blx	r6
	value = trx_reg_read(reg);
    2bfa:	2001      	movs	r0, #1
    2bfc:	47a8      	blx	r5
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2bfe:	4020      	ands	r0, r4
    2c00:	2808      	cmp	r0, #8
    2c02:	d1f7      	bne.n	2bf4 <PHY_Init+0x1c>
	trx_reg_write(reg, value);
    2c04:	212e      	movs	r1, #46	; 0x2e
    2c06:	3804      	subs	r0, #4
    2c08:	4c06      	ldr	r4, [pc, #24]	; (2c24 <PHY_Init+0x4c>)
    2c0a:	47a0      	blx	r4
    2c0c:	21a0      	movs	r1, #160	; 0xa0
    2c0e:	200c      	movs	r0, #12
    2c10:	47a0      	blx	r4
}
    2c12:	bd70      	pop	{r4, r5, r6, pc}
    2c14:	00002ef9 	.word	0x00002ef9
    2c18:	00003015 	.word	0x00003015
    2c1c:	2000085c 	.word	0x2000085c
    2c20:	2000085d 	.word	0x2000085d
    2c24:	00003141 	.word	0x00003141
    2c28:	00003045 	.word	0x00003045

00002c2c <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    2c2c:	b510      	push	{r4, lr}
	SYS_TimerInit();
    2c2e:	4b04      	ldr	r3, [pc, #16]	; (2c40 <SYS_Init+0x14>)
    2c30:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    2c32:	4b04      	ldr	r3, [pc, #16]	; (2c44 <SYS_Init+0x18>)
    2c34:	4798      	blx	r3
#endif
	PHY_Init();
    2c36:	4b04      	ldr	r3, [pc, #16]	; (2c48 <SYS_Init+0x1c>)
    2c38:	4798      	blx	r3
	NWK_Init();
    2c3a:	4b04      	ldr	r3, [pc, #16]	; (2c4c <SYS_Init+0x20>)
    2c3c:	4798      	blx	r3
}
    2c3e:	bd10      	pop	{r4, pc}
    2c40:	00002cc9 	.word	0x00002cc9
    2c44:	00002ed9 	.word	0x00002ed9
    2c48:	00002bd9 	.word	0x00002bd9
    2c4c:	00002879 	.word	0x00002879

00002c50 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    2c50:	b530      	push	{r4, r5, lr}
	if (timers) {
    2c52:	4b14      	ldr	r3, [pc, #80]	; (2ca4 <placeTimer+0x54>)
    2c54:	681d      	ldr	r5, [r3, #0]
    2c56:	2d00      	cmp	r5, #0
    2c58:	d01c      	beq.n	2c94 <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    2c5a:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    2c5c:	6869      	ldr	r1, [r5, #4]
    2c5e:	428a      	cmp	r2, r1
    2c60:	d309      	bcc.n	2c76 <placeTimer+0x26>
    2c62:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    2c64:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2c66:	6823      	ldr	r3, [r4, #0]
    2c68:	2b00      	cmp	r3, #0
    2c6a:	d008      	beq.n	2c7e <placeTimer+0x2e>
			if (timeout < t->timeout) {
    2c6c:	6859      	ldr	r1, [r3, #4]
    2c6e:	4291      	cmp	r1, r2
    2c70:	d803      	bhi.n	2c7a <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2c72:	001c      	movs	r4, r3
    2c74:	e7f6      	b.n	2c64 <placeTimer+0x14>
    2c76:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    2c78:	2400      	movs	r4, #0
				t->timeout -= timeout;
    2c7a:	1a89      	subs	r1, r1, r2
    2c7c:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    2c7e:	6042      	str	r2, [r0, #4]

		if (prev) {
    2c80:	2c00      	cmp	r4, #0
    2c82:	d003      	beq.n	2c8c <placeTimer+0x3c>
			timer->next = prev->next;
    2c84:	6823      	ldr	r3, [r4, #0]
    2c86:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    2c88:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    2c8a:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    2c8c:	6005      	str	r5, [r0, #0]
			timers = timer;
    2c8e:	4b05      	ldr	r3, [pc, #20]	; (2ca4 <placeTimer+0x54>)
    2c90:	6018      	str	r0, [r3, #0]
    2c92:	e7fa      	b.n	2c8a <placeTimer+0x3a>
		timer->next = NULL;
    2c94:	2300      	movs	r3, #0
    2c96:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    2c98:	6883      	ldr	r3, [r0, #8]
    2c9a:	6043      	str	r3, [r0, #4]
		timers = timer;
    2c9c:	4b01      	ldr	r3, [pc, #4]	; (2ca4 <placeTimer+0x54>)
    2c9e:	6018      	str	r0, [r3, #0]
}
    2ca0:	e7f3      	b.n	2c8a <placeTimer+0x3a>
    2ca2:	46c0      	nop			; (mov r8, r8)
    2ca4:	20000860 	.word	0x20000860

00002ca8 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    2ca8:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    2caa:	4a04      	ldr	r2, [pc, #16]	; (2cbc <SYS_HwExpiry_Cb+0x14>)
    2cac:	7813      	ldrb	r3, [r2, #0]
    2cae:	3301      	adds	r3, #1
    2cb0:	b2db      	uxtb	r3, r3
    2cb2:	7013      	strb	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2cb4:	4802      	ldr	r0, [pc, #8]	; (2cc0 <SYS_HwExpiry_Cb+0x18>)
    2cb6:	4b03      	ldr	r3, [pc, #12]	; (2cc4 <SYS_HwExpiry_Cb+0x1c>)
    2cb8:	4798      	blx	r3
}
    2cba:	bd10      	pop	{r4, pc}
    2cbc:	20000a10 	.word	0x20000a10
    2cc0:	00002710 	.word	0x00002710
    2cc4:	00003349 	.word	0x00003349

00002cc8 <SYS_TimerInit>:
{
    2cc8:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    2cca:	2400      	movs	r4, #0
    2ccc:	4b06      	ldr	r3, [pc, #24]	; (2ce8 <SYS_TimerInit+0x20>)
    2cce:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    2cd0:	4806      	ldr	r0, [pc, #24]	; (2cec <SYS_TimerInit+0x24>)
    2cd2:	4b07      	ldr	r3, [pc, #28]	; (2cf0 <SYS_TimerInit+0x28>)
    2cd4:	4798      	blx	r3
	common_tc_init();
    2cd6:	4b07      	ldr	r3, [pc, #28]	; (2cf4 <SYS_TimerInit+0x2c>)
    2cd8:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2cda:	4807      	ldr	r0, [pc, #28]	; (2cf8 <SYS_TimerInit+0x30>)
    2cdc:	4b07      	ldr	r3, [pc, #28]	; (2cfc <SYS_TimerInit+0x34>)
    2cde:	4798      	blx	r3
	timers = NULL;
    2ce0:	4b07      	ldr	r3, [pc, #28]	; (2d00 <SYS_TimerInit+0x38>)
    2ce2:	601c      	str	r4, [r3, #0]
}
    2ce4:	bd10      	pop	{r4, pc}
    2ce6:	46c0      	nop			; (mov r8, r8)
    2ce8:	20000a10 	.word	0x20000a10
    2cec:	00002ca9 	.word	0x00002ca9
    2cf0:	00003439 	.word	0x00003439
    2cf4:	000033b5 	.word	0x000033b5
    2cf8:	00002710 	.word	0x00002710
    2cfc:	00003349 	.word	0x00003349
    2d00:	20000860 	.word	0x20000860

00002d04 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2d04:	4b09      	ldr	r3, [pc, #36]	; (2d2c <SYS_TimerStarted+0x28>)
    2d06:	681b      	ldr	r3, [r3, #0]
    2d08:	2b00      	cmp	r3, #0
    2d0a:	d00a      	beq.n	2d22 <SYS_TimerStarted+0x1e>
		if (t == timer) {
    2d0c:	4283      	cmp	r3, r0
    2d0e:	d00a      	beq.n	2d26 <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2d10:	681b      	ldr	r3, [r3, #0]
    2d12:	2b00      	cmp	r3, #0
    2d14:	d003      	beq.n	2d1e <SYS_TimerStarted+0x1a>
		if (t == timer) {
    2d16:	4298      	cmp	r0, r3
    2d18:	d1fa      	bne.n	2d10 <SYS_TimerStarted+0xc>
			return true;
    2d1a:	2001      	movs	r0, #1
    2d1c:	e000      	b.n	2d20 <SYS_TimerStarted+0x1c>
	return false;
    2d1e:	2000      	movs	r0, #0
}
    2d20:	4770      	bx	lr
	return false;
    2d22:	2000      	movs	r0, #0
    2d24:	e7fc      	b.n	2d20 <SYS_TimerStarted+0x1c>
			return true;
    2d26:	2001      	movs	r0, #1
    2d28:	e7fa      	b.n	2d20 <SYS_TimerStarted+0x1c>
    2d2a:	46c0      	nop			; (mov r8, r8)
    2d2c:	20000860 	.word	0x20000860

00002d30 <SYS_TimerStart>:
{
    2d30:	b510      	push	{r4, lr}
    2d32:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    2d34:	4b04      	ldr	r3, [pc, #16]	; (2d48 <SYS_TimerStart+0x18>)
    2d36:	4798      	blx	r3
    2d38:	2800      	cmp	r0, #0
    2d3a:	d000      	beq.n	2d3e <SYS_TimerStart+0xe>
}
    2d3c:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    2d3e:	0020      	movs	r0, r4
    2d40:	4b02      	ldr	r3, [pc, #8]	; (2d4c <SYS_TimerStart+0x1c>)
    2d42:	4798      	blx	r3
}
    2d44:	e7fa      	b.n	2d3c <SYS_TimerStart+0xc>
    2d46:	46c0      	nop			; (mov r8, r8)
    2d48:	00002d05 	.word	0x00002d05
    2d4c:	00002c51 	.word	0x00002c51

00002d50 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    2d50:	b510      	push	{r4, lr}
	tmr_cca_callback();
    2d52:	4b01      	ldr	r3, [pc, #4]	; (2d58 <tc_cca_callback+0x8>)
    2d54:	4798      	blx	r3
}
    2d56:	bd10      	pop	{r4, pc}
    2d58:	0000341d 	.word	0x0000341d

00002d5c <tc_ovf_callback>:
{
    2d5c:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    2d5e:	4b01      	ldr	r3, [pc, #4]	; (2d64 <tc_ovf_callback+0x8>)
    2d60:	4798      	blx	r3
}
    2d62:	bd10      	pop	{r4, pc}
    2d64:	000033d5 	.word	0x000033d5

00002d68 <tmr_read_count>:
{
    2d68:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    2d6a:	4802      	ldr	r0, [pc, #8]	; (2d74 <tmr_read_count+0xc>)
    2d6c:	4b02      	ldr	r3, [pc, #8]	; (2d78 <tmr_read_count+0x10>)
    2d6e:	4798      	blx	r3
    2d70:	b280      	uxth	r0, r0
}
    2d72:	bd10      	pop	{r4, pc}
    2d74:	20000a48 	.word	0x20000a48
    2d78:	00002451 	.word	0x00002451

00002d7c <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    2d7c:	4b03      	ldr	r3, [pc, #12]	; (2d8c <tmr_disable_cc_interrupt+0x10>)
    2d7e:	2110      	movs	r1, #16
    2d80:	681a      	ldr	r2, [r3, #0]
    2d82:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    2d84:	7e5a      	ldrb	r2, [r3, #25]
    2d86:	438a      	bics	r2, r1
    2d88:	765a      	strb	r2, [r3, #25]
}
    2d8a:	4770      	bx	lr
    2d8c:	20000a48 	.word	0x20000a48

00002d90 <tmr_enable_cc_interrupt>:
{
    2d90:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2d92:	4c0a      	ldr	r4, [pc, #40]	; (2dbc <tmr_enable_cc_interrupt+0x2c>)
    2d94:	6820      	ldr	r0, [r4, #0]
    2d96:	4b0a      	ldr	r3, [pc, #40]	; (2dc0 <tmr_enable_cc_interrupt+0x30>)
    2d98:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2d9a:	4b0a      	ldr	r3, [pc, #40]	; (2dc4 <tmr_enable_cc_interrupt+0x34>)
    2d9c:	5c1b      	ldrb	r3, [r3, r0]
    2d9e:	221f      	movs	r2, #31
    2da0:	401a      	ands	r2, r3
    2da2:	2301      	movs	r3, #1
    2da4:	4093      	lsls	r3, r2
    2da6:	4a08      	ldr	r2, [pc, #32]	; (2dc8 <tmr_enable_cc_interrupt+0x38>)
    2da8:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2daa:	7e63      	ldrb	r3, [r4, #25]
    2dac:	2210      	movs	r2, #16
    2dae:	4313      	orrs	r3, r2
    2db0:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2db2:	6823      	ldr	r3, [r4, #0]
    2db4:	2210      	movs	r2, #16
    2db6:	735a      	strb	r2, [r3, #13]
}
    2db8:	bd10      	pop	{r4, pc}
    2dba:	46c0      	nop			; (mov r8, r8)
    2dbc:	20000a48 	.word	0x20000a48
    2dc0:	000021dd 	.word	0x000021dd
    2dc4:	00008e94 	.word	0x00008e94
    2dc8:	e000e100 	.word	0xe000e100

00002dcc <tmr_write_cmpreg>:
{
    2dcc:	b510      	push	{r4, lr}
    2dce:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    2dd0:	2100      	movs	r1, #0
    2dd2:	4802      	ldr	r0, [pc, #8]	; (2ddc <tmr_write_cmpreg+0x10>)
    2dd4:	4b02      	ldr	r3, [pc, #8]	; (2de0 <tmr_write_cmpreg+0x14>)
    2dd6:	4798      	blx	r3
}
    2dd8:	bd10      	pop	{r4, pc}
    2dda:	46c0      	nop			; (mov r8, r8)
    2ddc:	20000a48 	.word	0x20000a48
    2de0:	0000247d 	.word	0x0000247d

00002de4 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    2de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2de6:	46ce      	mov	lr, r9
    2de8:	4647      	mov	r7, r8
    2dea:	b580      	push	{r7, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    2dec:	4a2d      	ldr	r2, [pc, #180]	; (2ea4 <tmr_init+0xc0>)
    2dee:	2300      	movs	r3, #0
    2df0:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    2df2:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    2df4:	2100      	movs	r1, #0
    2df6:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    2df8:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2dfa:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2dfc:	7051      	strb	r1, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2dfe:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2e00:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2e02:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2e04:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    2e06:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2e08:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2e0a:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2e0c:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2e0e:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2e10:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2e12:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    2e14:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2e16:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    2e18:	3b01      	subs	r3, #1
    2e1a:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    2e1c:	4c22      	ldr	r4, [pc, #136]	; (2ea8 <tmr_init+0xc4>)
    2e1e:	4923      	ldr	r1, [pc, #140]	; (2eac <tmr_init+0xc8>)
    2e20:	0020      	movs	r0, r4
    2e22:	4b23      	ldr	r3, [pc, #140]	; (2eb0 <tmr_init+0xcc>)
    2e24:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    2e26:	2200      	movs	r2, #0
    2e28:	4922      	ldr	r1, [pc, #136]	; (2eb4 <tmr_init+0xd0>)
    2e2a:	0020      	movs	r0, r4
    2e2c:	4d22      	ldr	r5, [pc, #136]	; (2eb8 <tmr_init+0xd4>)
    2e2e:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    2e30:	2202      	movs	r2, #2
    2e32:	4922      	ldr	r1, [pc, #136]	; (2ebc <tmr_init+0xd8>)
    2e34:	0020      	movs	r0, r4
    2e36:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2e38:	6820      	ldr	r0, [r4, #0]
    2e3a:	4b21      	ldr	r3, [pc, #132]	; (2ec0 <tmr_init+0xdc>)
    2e3c:	4699      	mov	r9, r3
    2e3e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2e40:	4b20      	ldr	r3, [pc, #128]	; (2ec4 <tmr_init+0xe0>)
    2e42:	4698      	mov	r8, r3
    2e44:	5c1b      	ldrb	r3, [r3, r0]
    2e46:	261f      	movs	r6, #31
    2e48:	4033      	ands	r3, r6
    2e4a:	2501      	movs	r5, #1
    2e4c:	002a      	movs	r2, r5
    2e4e:	409a      	lsls	r2, r3
    2e50:	4f1d      	ldr	r7, [pc, #116]	; (2ec8 <tmr_init+0xe4>)
    2e52:	603a      	str	r2, [r7, #0]
		module->enable_callback_mask |= (1 << callback_type);
    2e54:	7e63      	ldrb	r3, [r4, #25]
    2e56:	2201      	movs	r2, #1
    2e58:	4313      	orrs	r3, r2
    2e5a:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    2e5c:	6823      	ldr	r3, [r4, #0]
    2e5e:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2e60:	0018      	movs	r0, r3
    2e62:	47c8      	blx	r9
    2e64:	4643      	mov	r3, r8
    2e66:	5c1b      	ldrb	r3, [r3, r0]
    2e68:	401e      	ands	r6, r3
    2e6a:	40b5      	lsls	r5, r6
    2e6c:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2e6e:	7e63      	ldrb	r3, [r4, #25]
    2e70:	2210      	movs	r2, #16
    2e72:	4313      	orrs	r3, r2
    2e74:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2e76:	6822      	ldr	r2, [r4, #0]
    2e78:	2310      	movs	r3, #16
    2e7a:	7353      	strb	r3, [r2, #13]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2e7c:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2e7e:	b25b      	sxtb	r3, r3
    2e80:	2b00      	cmp	r3, #0
    2e82:	dbfb      	blt.n	2e7c <tmr_init+0x98>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2e84:	8813      	ldrh	r3, [r2, #0]
    2e86:	2102      	movs	r1, #2
    2e88:	430b      	orrs	r3, r1
    2e8a:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    2e8c:	2000      	movs	r0, #0
    2e8e:	4b0f      	ldr	r3, [pc, #60]	; (2ecc <tmr_init+0xe8>)
    2e90:	4798      	blx	r3
    2e92:	490f      	ldr	r1, [pc, #60]	; (2ed0 <tmr_init+0xec>)
    2e94:	4b0f      	ldr	r3, [pc, #60]	; (2ed4 <tmr_init+0xf0>)
    2e96:	4798      	blx	r3
	#endif
	return timer_multiplier;
    2e98:	b2c0      	uxtb	r0, r0
}
    2e9a:	bc0c      	pop	{r2, r3}
    2e9c:	4690      	mov	r8, r2
    2e9e:	4699      	mov	r9, r3
    2ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ea2:	46c0      	nop			; (mov r8, r8)
    2ea4:	20000a14 	.word	0x20000a14
    2ea8:	20000a48 	.word	0x20000a48
    2eac:	42002c00 	.word	0x42002c00
    2eb0:	00002215 	.word	0x00002215
    2eb4:	00002d5d 	.word	0x00002d5d
    2eb8:	00002115 	.word	0x00002115
    2ebc:	00002d51 	.word	0x00002d51
    2ec0:	000021dd 	.word	0x000021dd
    2ec4:	00008e94 	.word	0x00008e94
    2ec8:	e000e100 	.word	0xe000e100
    2ecc:	00001ea5 	.word	0x00001ea5
    2ed0:	000f4240 	.word	0x000f4240
    2ed4:	00005e5d 	.word	0x00005e5d

00002ed8 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    2ed8:	4770      	bx	lr
	...

00002edc <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    2edc:	b510      	push	{r4, lr}
	eic_module->INTFLAG.reg = eic_mask;
    2ede:	2201      	movs	r2, #1
    2ee0:	4b03      	ldr	r3, [pc, #12]	; (2ef0 <AT86RFX_ISR+0x14>)
    2ee2:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    2ee4:	4b03      	ldr	r3, [pc, #12]	; (2ef4 <AT86RFX_ISR+0x18>)
    2ee6:	681b      	ldr	r3, [r3, #0]
    2ee8:	2b00      	cmp	r3, #0
    2eea:	d000      	beq.n	2eee <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    2eec:	4798      	blx	r3
	}
}
    2eee:	bd10      	pop	{r4, pc}
    2ef0:	40001800 	.word	0x40001800
    2ef4:	20000864 	.word	0x20000864

00002ef8 <trx_spi_init>:

void trx_spi_init(void)
{
    2ef8:	b530      	push	{r4, r5, lr}
    2efa:	b085      	sub	sp, #20
	config->address_enabled = false;
    2efc:	4a34      	ldr	r2, [pc, #208]	; (2fd0 <trx_spi_init+0xd8>)
    2efe:	2300      	movs	r3, #0
    2f00:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    2f02:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    2f04:	213f      	movs	r1, #63	; 0x3f
    2f06:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    2f08:	4c32      	ldr	r4, [pc, #200]	; (2fd4 <trx_spi_init+0xdc>)
    2f0a:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    2f0c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    2f0e:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    2f10:	2201      	movs	r2, #1
    2f12:	4669      	mov	r1, sp
    2f14:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    2f16:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2f18:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2f1a:	203f      	movs	r0, #63	; 0x3f
    2f1c:	4b2e      	ldr	r3, [pc, #184]	; (2fd8 <trx_spi_init+0xe0>)
    2f1e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2f20:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    2f22:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2f24:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2f26:	2900      	cmp	r1, #0
    2f28:	d104      	bne.n	2f34 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    2f2a:	0953      	lsrs	r3, r2, #5
    2f2c:	01db      	lsls	r3, r3, #7
    2f2e:	492b      	ldr	r1, [pc, #172]	; (2fdc <trx_spi_init+0xe4>)
    2f30:	468c      	mov	ip, r1
    2f32:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2f34:	211f      	movs	r1, #31
    2f36:	4011      	ands	r1, r2
    2f38:	2201      	movs	r2, #1
    2f3a:	0010      	movs	r0, r2
    2f3c:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    2f3e:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    2f40:	4c27      	ldr	r4, [pc, #156]	; (2fe0 <trx_spi_init+0xe8>)
    2f42:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2f44:	2300      	movs	r3, #0
    2f46:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2f48:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2f4a:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    2f4c:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    2f4e:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    2f50:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    2f52:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    2f54:	3223      	adds	r2, #35	; 0x23
    2f56:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2f58:	0020      	movs	r0, r4
    2f5a:	3018      	adds	r0, #24
    2f5c:	3a18      	subs	r2, #24
    2f5e:	2100      	movs	r1, #0
    2f60:	4b20      	ldr	r3, [pc, #128]	; (2fe4 <trx_spi_init+0xec>)
    2f62:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    2f64:	2380      	movs	r3, #128	; 0x80
    2f66:	025b      	lsls	r3, r3, #9
    2f68:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    2f6a:	4b1f      	ldr	r3, [pc, #124]	; (2fe8 <trx_spi_init+0xf0>)
    2f6c:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    2f6e:	4b1f      	ldr	r3, [pc, #124]	; (2fec <trx_spi_init+0xf4>)
    2f70:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    2f72:	2301      	movs	r3, #1
    2f74:	425b      	negs	r3, r3
    2f76:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    2f78:	4b1d      	ldr	r3, [pc, #116]	; (2ff0 <trx_spi_init+0xf8>)
    2f7a:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    2f7c:	4b1d      	ldr	r3, [pc, #116]	; (2ff4 <trx_spi_init+0xfc>)
    2f7e:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    2f80:	4d1d      	ldr	r5, [pc, #116]	; (2ff8 <trx_spi_init+0x100>)
    2f82:	0022      	movs	r2, r4
    2f84:	491d      	ldr	r1, [pc, #116]	; (2ffc <trx_spi_init+0x104>)
    2f86:	0028      	movs	r0, r5
    2f88:	4b1d      	ldr	r3, [pc, #116]	; (3000 <trx_spi_init+0x108>)
    2f8a:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    2f8c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2f8e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2f90:	2b00      	cmp	r3, #0
    2f92:	d1fc      	bne.n	2f8e <trx_spi_init+0x96>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2f94:	6813      	ldr	r3, [r2, #0]
    2f96:	2502      	movs	r5, #2
    2f98:	432b      	orrs	r3, r5
    2f9a:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    2f9c:	ac01      	add	r4, sp, #4
    2f9e:	0020      	movs	r0, r4
    2fa0:	4b18      	ldr	r3, [pc, #96]	; (3004 <trx_spi_init+0x10c>)
    2fa2:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    2fa4:	2320      	movs	r3, #32
    2fa6:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    2fa8:	2380      	movs	r3, #128	; 0x80
    2faa:	039b      	lsls	r3, r3, #14
    2fac:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    2fae:	7225      	strb	r5, [r4, #8]
	#if (SAML21)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    2fb0:	2301      	movs	r3, #1
    2fb2:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    2fb4:	2200      	movs	r2, #0
    2fb6:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    2fb8:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    2fba:	0021      	movs	r1, r4
    2fbc:	2000      	movs	r0, #0
    2fbe:	4b12      	ldr	r3, [pc, #72]	; (3008 <trx_spi_init+0x110>)
    2fc0:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    2fc2:	2200      	movs	r2, #0
    2fc4:	2100      	movs	r1, #0
    2fc6:	4811      	ldr	r0, [pc, #68]	; (300c <trx_spi_init+0x114>)
    2fc8:	4b11      	ldr	r3, [pc, #68]	; (3010 <trx_spi_init+0x118>)
    2fca:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    2fcc:	b005      	add	sp, #20
    2fce:	bd30      	pop	{r4, r5, pc}
    2fd0:	20000a68 	.word	0x20000a68
    2fd4:	20000a6c 	.word	0x20000a6c
    2fd8:	00000939 	.word	0x00000939
    2fdc:	41004400 	.word	0x41004400
    2fe0:	20000a70 	.word	0x20000a70
    2fe4:	0000349f 	.word	0x0000349f
    2fe8:	004c4b40 	.word	0x004c4b40
    2fec:	00530005 	.word	0x00530005
    2ff0:	003e0005 	.word	0x003e0005
    2ff4:	00520005 	.word	0x00520005
    2ff8:	20000aa8 	.word	0x20000aa8
    2ffc:	42001800 	.word	0x42001800
    3000:	00000e21 	.word	0x00000e21
    3004:	000008ad 	.word	0x000008ad
    3008:	000008c1 	.word	0x000008c1
    300c:	00002edd 	.word	0x00002edd
    3010:	000007a9 	.word	0x000007a9

00003014 <PhyReset>:

void PhyReset(void)
{
    3014:	b570      	push	{r4, r5, r6, lr}
    3016:	4c08      	ldr	r4, [pc, #32]	; (3038 <PhyReset+0x24>)
    3018:	2580      	movs	r5, #128	; 0x80
    301a:	022d      	lsls	r5, r5, #8
    301c:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    301e:	2280      	movs	r2, #128	; 0x80
    3020:	0352      	lsls	r2, r2, #13
    3022:	4b06      	ldr	r3, [pc, #24]	; (303c <PhyReset+0x28>)
    3024:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    3026:	20a5      	movs	r0, #165	; 0xa5
    3028:	0040      	lsls	r0, r0, #1
    302a:	4e05      	ldr	r6, [pc, #20]	; (3040 <PhyReset+0x2c>)
    302c:	47b0      	blx	r6
    302e:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    3030:	200a      	movs	r0, #10
    3032:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    3034:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    3036:	bd70      	pop	{r4, r5, r6, pc}
    3038:	41004480 	.word	0x41004480
    303c:	41004400 	.word	0x41004400
    3040:	0000060d 	.word	0x0000060d

00003044 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    3044:	b570      	push	{r4, r5, r6, lr}
    3046:	b082      	sub	sp, #8
    3048:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    304a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    304e:	425a      	negs	r2, r3
    3050:	4153      	adcs	r3, r2
    3052:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3054:	b672      	cpsid	i
    3056:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    305a:	2200      	movs	r2, #0
    305c:	4b33      	ldr	r3, [pc, #204]	; (312c <trx_reg_read+0xe8>)
    305e:	701a      	strb	r2, [r3, #0]
	return flags;
    3060:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3062:	4e33      	ldr	r6, [pc, #204]	; (3130 <trx_reg_read+0xec>)
    3064:	3201      	adds	r2, #1
    3066:	4933      	ldr	r1, [pc, #204]	; (3134 <trx_reg_read+0xf0>)
    3068:	0030      	movs	r0, r6
    306a:	4b33      	ldr	r3, [pc, #204]	; (3138 <trx_reg_read+0xf4>)
    306c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    306e:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3070:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3072:	7e1a      	ldrb	r2, [r3, #24]
    3074:	420a      	tst	r2, r1
    3076:	d0fc      	beq.n	3072 <trx_reg_read+0x2e>
    3078:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    307a:	07d2      	lsls	r2, r2, #31
    307c:	d502      	bpl.n	3084 <trx_reg_read+0x40>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    307e:	2280      	movs	r2, #128	; 0x80
    3080:	4315      	orrs	r5, r2
    3082:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3084:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3086:	7e1a      	ldrb	r2, [r3, #24]
    3088:	420a      	tst	r2, r1
    308a:	d0fc      	beq.n	3086 <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    308c:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    308e:	7e1a      	ldrb	r2, [r3, #24]
    3090:	420a      	tst	r2, r1
    3092:	d0fc      	beq.n	308e <trx_reg_read+0x4a>
    3094:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3096:	0752      	lsls	r2, r2, #29
    3098:	d50c      	bpl.n	30b4 <trx_reg_read+0x70>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    309a:	8b5a      	ldrh	r2, [r3, #26]
    309c:	0752      	lsls	r2, r2, #29
    309e:	d501      	bpl.n	30a4 <trx_reg_read+0x60>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    30a0:	2204      	movs	r2, #4
    30a2:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    30a4:	4a22      	ldr	r2, [pc, #136]	; (3130 <trx_reg_read+0xec>)
    30a6:	7992      	ldrb	r2, [r2, #6]
    30a8:	2a01      	cmp	r2, #1
    30aa:	d034      	beq.n	3116 <trx_reg_read+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    30ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    30ae:	b2d2      	uxtb	r2, r2
    30b0:	4922      	ldr	r1, [pc, #136]	; (313c <trx_reg_read+0xf8>)
    30b2:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    30b4:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    30b6:	7e1a      	ldrb	r2, [r3, #24]
    30b8:	420a      	tst	r2, r1
    30ba:	d0fc      	beq.n	30b6 <trx_reg_read+0x72>
    30bc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    30be:	07d2      	lsls	r2, r2, #31
    30c0:	d501      	bpl.n	30c6 <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    30c2:	2200      	movs	r2, #0
    30c4:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    30c6:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    30c8:	7e1a      	ldrb	r2, [r3, #24]
    30ca:	420a      	tst	r2, r1
    30cc:	d0fc      	beq.n	30c8 <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    30ce:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    30d0:	7e1a      	ldrb	r2, [r3, #24]
    30d2:	420a      	tst	r2, r1
    30d4:	d0fc      	beq.n	30d0 <trx_reg_read+0x8c>
    30d6:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    30d8:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    30da:	0752      	lsls	r2, r2, #29
    30dc:	d50a      	bpl.n	30f4 <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    30de:	8b5a      	ldrh	r2, [r3, #26]
    30e0:	0752      	lsls	r2, r2, #29
    30e2:	d501      	bpl.n	30e8 <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    30e4:	2204      	movs	r2, #4
    30e6:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    30e8:	4a11      	ldr	r2, [pc, #68]	; (3130 <trx_reg_read+0xec>)
    30ea:	7992      	ldrb	r2, [r2, #6]
    30ec:	2a01      	cmp	r2, #1
    30ee:	d018      	beq.n	3122 <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    30f0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    30f2:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    30f4:	2200      	movs	r2, #0
    30f6:	490f      	ldr	r1, [pc, #60]	; (3134 <trx_reg_read+0xf0>)
    30f8:	480d      	ldr	r0, [pc, #52]	; (3130 <trx_reg_read+0xec>)
    30fa:	4b0f      	ldr	r3, [pc, #60]	; (3138 <trx_reg_read+0xf4>)
    30fc:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    30fe:	23ff      	movs	r3, #255	; 0xff
    3100:	4223      	tst	r3, r4
    3102:	d005      	beq.n	3110 <trx_reg_read+0xcc>
		cpu_irq_enable();
    3104:	2201      	movs	r2, #1
    3106:	4b09      	ldr	r3, [pc, #36]	; (312c <trx_reg_read+0xe8>)
    3108:	701a      	strb	r2, [r3, #0]
    310a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    310e:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    3110:	b2e8      	uxtb	r0, r5
}
    3112:	b002      	add	sp, #8
    3114:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3116:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3118:	05d2      	lsls	r2, r2, #23
    311a:	0dd2      	lsrs	r2, r2, #23
    311c:	4907      	ldr	r1, [pc, #28]	; (313c <trx_reg_read+0xf8>)
    311e:	800a      	strh	r2, [r1, #0]
    3120:	e7c8      	b.n	30b4 <trx_reg_read+0x70>
    3122:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3124:	05ed      	lsls	r5, r5, #23
    3126:	0ded      	lsrs	r5, r5, #23
    3128:	e7e4      	b.n	30f4 <trx_reg_read+0xb0>
    312a:	46c0      	nop			; (mov r8, r8)
    312c:	20000008 	.word	0x20000008
    3130:	20000aa8 	.word	0x20000aa8
    3134:	20000a6c 	.word	0x20000a6c
    3138:	000010e5 	.word	0x000010e5
    313c:	20000a64 	.word	0x20000a64

00003140 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    3140:	b5f0      	push	{r4, r5, r6, r7, lr}
    3142:	b083      	sub	sp, #12
    3144:	0006      	movs	r6, r0
    3146:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3148:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    314c:	425a      	negs	r2, r3
    314e:	4153      	adcs	r3, r2
    3150:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3152:	b672      	cpsid	i
    3154:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3158:	2200      	movs	r2, #0
    315a:	4b34      	ldr	r3, [pc, #208]	; (322c <trx_reg_write+0xec>)
    315c:	701a      	strb	r2, [r3, #0]
	return flags;
    315e:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3160:	4f33      	ldr	r7, [pc, #204]	; (3230 <trx_reg_write+0xf0>)
    3162:	3201      	adds	r2, #1
    3164:	4933      	ldr	r1, [pc, #204]	; (3234 <trx_reg_write+0xf4>)
    3166:	0038      	movs	r0, r7
    3168:	4b33      	ldr	r3, [pc, #204]	; (3238 <trx_reg_write+0xf8>)
    316a:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    316c:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    316e:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3170:	7e1a      	ldrb	r2, [r3, #24]
    3172:	420a      	tst	r2, r1
    3174:	d0fc      	beq.n	3170 <trx_reg_write+0x30>
    3176:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3178:	07d2      	lsls	r2, r2, #31
    317a:	d502      	bpl.n	3182 <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    317c:	22c0      	movs	r2, #192	; 0xc0
    317e:	4316      	orrs	r6, r2
    3180:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3182:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3184:	7e1a      	ldrb	r2, [r3, #24]
    3186:	420a      	tst	r2, r1
    3188:	d0fc      	beq.n	3184 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    318a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    318c:	7e1a      	ldrb	r2, [r3, #24]
    318e:	420a      	tst	r2, r1
    3190:	d0fc      	beq.n	318c <trx_reg_write+0x4c>
    3192:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3194:	0752      	lsls	r2, r2, #29
    3196:	d50c      	bpl.n	31b2 <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3198:	8b5a      	ldrh	r2, [r3, #26]
    319a:	0752      	lsls	r2, r2, #29
    319c:	d501      	bpl.n	31a2 <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    319e:	2204      	movs	r2, #4
    31a0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    31a2:	4a23      	ldr	r2, [pc, #140]	; (3230 <trx_reg_write+0xf0>)
    31a4:	7992      	ldrb	r2, [r2, #6]
    31a6:	2a01      	cmp	r2, #1
    31a8:	d033      	beq.n	3212 <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    31aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    31ac:	b2d2      	uxtb	r2, r2
    31ae:	4923      	ldr	r1, [pc, #140]	; (323c <trx_reg_write+0xfc>)
    31b0:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    31b2:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    31b4:	7e1a      	ldrb	r2, [r3, #24]
    31b6:	420a      	tst	r2, r1
    31b8:	d0fc      	beq.n	31b4 <trx_reg_write+0x74>
    31ba:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    31bc:	07d2      	lsls	r2, r2, #31
    31be:	d500      	bpl.n	31c2 <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    31c0:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    31c2:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    31c4:	7e1a      	ldrb	r2, [r3, #24]
    31c6:	420a      	tst	r2, r1
    31c8:	d0fc      	beq.n	31c4 <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    31ca:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    31cc:	7e1a      	ldrb	r2, [r3, #24]
    31ce:	420a      	tst	r2, r1
    31d0:	d0fc      	beq.n	31cc <trx_reg_write+0x8c>
    31d2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    31d4:	0752      	lsls	r2, r2, #29
    31d6:	d50c      	bpl.n	31f2 <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    31d8:	8b5a      	ldrh	r2, [r3, #26]
    31da:	0752      	lsls	r2, r2, #29
    31dc:	d501      	bpl.n	31e2 <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    31de:	2204      	movs	r2, #4
    31e0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    31e2:	4a13      	ldr	r2, [pc, #76]	; (3230 <trx_reg_write+0xf0>)
    31e4:	7992      	ldrb	r2, [r2, #6]
    31e6:	2a01      	cmp	r2, #1
    31e8:	d019      	beq.n	321e <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    31ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31ec:	b2db      	uxtb	r3, r3
    31ee:	4a13      	ldr	r2, [pc, #76]	; (323c <trx_reg_write+0xfc>)
    31f0:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    31f2:	2200      	movs	r2, #0
    31f4:	490f      	ldr	r1, [pc, #60]	; (3234 <trx_reg_write+0xf4>)
    31f6:	480e      	ldr	r0, [pc, #56]	; (3230 <trx_reg_write+0xf0>)
    31f8:	4b0f      	ldr	r3, [pc, #60]	; (3238 <trx_reg_write+0xf8>)
    31fa:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    31fc:	23ff      	movs	r3, #255	; 0xff
    31fe:	422b      	tst	r3, r5
    3200:	d005      	beq.n	320e <trx_reg_write+0xce>
		cpu_irq_enable();
    3202:	2201      	movs	r2, #1
    3204:	4b09      	ldr	r3, [pc, #36]	; (322c <trx_reg_write+0xec>)
    3206:	701a      	strb	r2, [r3, #0]
    3208:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    320c:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    320e:	b003      	add	sp, #12
    3210:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3212:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3214:	05d2      	lsls	r2, r2, #23
    3216:	0dd2      	lsrs	r2, r2, #23
    3218:	4908      	ldr	r1, [pc, #32]	; (323c <trx_reg_write+0xfc>)
    321a:	800a      	strh	r2, [r1, #0]
    321c:	e7c9      	b.n	31b2 <trx_reg_write+0x72>
    321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3220:	05db      	lsls	r3, r3, #23
    3222:	0ddb      	lsrs	r3, r3, #23
    3224:	4a05      	ldr	r2, [pc, #20]	; (323c <trx_reg_write+0xfc>)
    3226:	8013      	strh	r3, [r2, #0]
    3228:	e7e3      	b.n	31f2 <trx_reg_write+0xb2>
    322a:	46c0      	nop			; (mov r8, r8)
    322c:	20000008 	.word	0x20000008
    3230:	20000aa8 	.word	0x20000aa8
    3234:	20000a6c 	.word	0x20000a6c
    3238:	000010e5 	.word	0x000010e5
    323c:	20000a64 	.word	0x20000a64

00003240 <setup>:
#include "sio2host.h"
#include "TheArtist.h"
/************************************************************************/
/*                                                                      */
/************************************************************************/
void setup(void) {
    3240:	b570      	push	{r4, r5, r6, lr}
	// [SYSTEM INITIALIZE]
	// [NOTICE!]!! sequence of this calls is important!
	irq_initialize_vectors();
	system_init();
    3242:	4b15      	ldr	r3, [pc, #84]	; (3298 <setup+0x58>)
    3244:	4798      	blx	r3
	artist_usart_configure(&(artist_front.usart_instance));
    3246:	4c15      	ldr	r4, [pc, #84]	; (329c <setup+0x5c>)
    3248:	0020      	movs	r0, r4
    324a:	4b15      	ldr	r3, [pc, #84]	; (32a0 <setup+0x60>)
    324c:	4798      	blx	r3
	artist_tc_configure();
    324e:	4b15      	ldr	r3, [pc, #84]	; (32a4 <setup+0x64>)
    3250:	4798      	blx	r3
	// [ultrasonic]
	artist_ultrasonic_configure(&(artist_front.us_instance_right),
    3252:	0020      	movs	r0, r4
    3254:	3046      	adds	r0, #70	; 0x46
    3256:	220f      	movs	r2, #15
    3258:	211c      	movs	r1, #28
    325a:	4d13      	ldr	r5, [pc, #76]	; (32a8 <setup+0x68>)
    325c:	47a8      	blx	r5
	CONF_ARTIST_RIGHT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_center),
    325e:	0020      	movs	r0, r4
    3260:	303a      	adds	r0, #58	; 0x3a
    3262:	220f      	movs	r2, #15
    3264:	210d      	movs	r1, #13
    3266:	47a8      	blx	r5
	CONF_ARTIST_CENTER_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_left),
    3268:	0020      	movs	r0, r4
    326a:	3040      	adds	r0, #64	; 0x40
    326c:	220f      	movs	r2, #15
    326e:	2117      	movs	r1, #23
    3270:	47a8      	blx	r5
	CONF_ARTIST_LEFT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_gpio_init(); 	
    3272:	4b0e      	ldr	r3, [pc, #56]	; (32ac <setup+0x6c>)
    3274:	4798      	blx	r3
	//! [ultrasonic]
	delay_init();
    3276:	4b0e      	ldr	r3, [pc, #56]	; (32b0 <setup+0x70>)
    3278:	4798      	blx	r3
	SYS_Init();
    327a:	4b0e      	ldr	r3, [pc, #56]	; (32b4 <setup+0x74>)
    327c:	4798      	blx	r3
	sio2host_init();
    327e:	4b0e      	ldr	r3, [pc, #56]	; (32b8 <setup+0x78>)
    3280:	4798      	blx	r3
	cpu_irq_enable();
    3282:	2201      	movs	r2, #1
    3284:	4b0d      	ldr	r3, [pc, #52]	; (32bc <setup+0x7c>)
    3286:	701a      	strb	r2, [r3, #0]
    3288:	f3bf 8f5f 	dmb	sy
    328c:	b662      	cpsie	i
	// ![SYSTEM INITIALIZE]
	
	printf("Front board setup complete.\n"); 
    328e:	480c      	ldr	r0, [pc, #48]	; (32c0 <setup+0x80>)
    3290:	4b0c      	ldr	r3, [pc, #48]	; (32c4 <setup+0x84>)
    3292:	4798      	blx	r3
}
    3294:	bd70      	pop	{r4, r5, r6, pc}
    3296:	46c0      	nop			; (mov r8, r8)
    3298:	000020e9 	.word	0x000020e9
    329c:	200008e0 	.word	0x200008e0
    32a0:	000004c1 	.word	0x000004c1
    32a4:	0000042d 	.word	0x0000042d
    32a8:	00000115 	.word	0x00000115
    32ac:	00000121 	.word	0x00000121
    32b0:	000005cd 	.word	0x000005cd
    32b4:	00002c2d 	.word	0x00002c2d
    32b8:	00002729 	.word	0x00002729
    32bc:	20000008 	.word	0x20000008
    32c0:	00008eac 	.word	0x00008eac
    32c4:	00003e85 	.word	0x00003e85

000032c8 <loop>:
/************************************************************************/
/*                                                                      */
/************************************************************************/
void loop( void) {
    32c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    32ca:	46ce      	mov	lr, r9
    32cc:	b500      	push	{lr}
	delay_ms(15);
    32ce:	200f      	movs	r0, #15
    32d0:	4b11      	ldr	r3, [pc, #68]	; (3318 <loop+0x50>)
    32d2:	4699      	mov	r9, r3
    32d4:	4798      	blx	r3
	printf("%5.2f\t ", artist_ultrasonic_get_value(&(artist_front.us_instance_center)));
    32d6:	4c11      	ldr	r4, [pc, #68]	; (331c <loop+0x54>)
    32d8:	0020      	movs	r0, r4
    32da:	4f11      	ldr	r7, [pc, #68]	; (3320 <loop+0x58>)
    32dc:	47b8      	blx	r7
    32de:	4e11      	ldr	r6, [pc, #68]	; (3324 <loop+0x5c>)
    32e0:	47b0      	blx	r6
    32e2:	0002      	movs	r2, r0
    32e4:	000b      	movs	r3, r1
    32e6:	4810      	ldr	r0, [pc, #64]	; (3328 <loop+0x60>)
    32e8:	4d10      	ldr	r5, [pc, #64]	; (332c <loop+0x64>)
    32ea:	47a8      	blx	r5
	
	delay_ms(15);
    32ec:	200f      	movs	r0, #15
    32ee:	47c8      	blx	r9
	printf("%5.2f\t ", artist_ultrasonic_get_value(&(artist_front.us_instance_left)));
    32f0:	1da0      	adds	r0, r4, #6
    32f2:	47b8      	blx	r7
    32f4:	47b0      	blx	r6
    32f6:	0002      	movs	r2, r0
    32f8:	000b      	movs	r3, r1
    32fa:	480b      	ldr	r0, [pc, #44]	; (3328 <loop+0x60>)
    32fc:	47a8      	blx	r5
	
	delay_ms(15);
    32fe:	200f      	movs	r0, #15
    3300:	47c8      	blx	r9
	printf("%5.2f\t \n", artist_ultrasonic_get_value(&(artist_front.us_instance_right)));
    3302:	0020      	movs	r0, r4
    3304:	300c      	adds	r0, #12
    3306:	47b8      	blx	r7
    3308:	47b0      	blx	r6
    330a:	0002      	movs	r2, r0
    330c:	000b      	movs	r3, r1
    330e:	4808      	ldr	r0, [pc, #32]	; (3330 <loop+0x68>)
    3310:	47a8      	blx	r5
	
	
}
    3312:	bc04      	pop	{r2}
    3314:	4691      	mov	r9, r2
    3316:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3318:	00000639 	.word	0x00000639
    331c:	2000091a 	.word	0x2000091a
    3320:	00000179 	.word	0x00000179
    3324:	00008bf5 	.word	0x00008bf5
    3328:	00008e98 	.word	0x00008e98
    332c:	00003d91 	.word	0x00003d91
    3330:	00008ea0 	.word	0x00008ea0

00003334 <main>:
/************************************************************************/
/*                                                                      */
/************************************************************************/
int main (void) {
    3334:	b510      	push	{r4, lr}
	setup();
    3336:	4b02      	ldr	r3, [pc, #8]	; (3340 <main+0xc>)
    3338:	4798      	blx	r3
	while(true) loop();
    333a:	4c02      	ldr	r4, [pc, #8]	; (3344 <main+0x10>)
    333c:	47a0      	blx	r4
    333e:	e7fd      	b.n	333c <main+0x8>
    3340:	00003241 	.word	0x00003241
    3344:	000032c9 	.word	0x000032c9

00003348 <common_tc_delay>:
    3348:	b510      	push	{r4, lr}
    334a:	1c04      	adds	r4, r0, #0
    334c:	4b13      	ldr	r3, [pc, #76]	; (339c <common_tc_delay+0x54>)
    334e:	4798      	blx	r3
    3350:	4b13      	ldr	r3, [pc, #76]	; (33a0 <common_tc_delay+0x58>)
    3352:	781a      	ldrb	r2, [r3, #0]
    3354:	4362      	muls	r2, r4
    3356:	1881      	adds	r1, r0, r2
    3358:	4b12      	ldr	r3, [pc, #72]	; (33a4 <common_tc_delay+0x5c>)
    335a:	6059      	str	r1, [r3, #4]
    335c:	6859      	ldr	r1, [r3, #4]
    335e:	0c09      	lsrs	r1, r1, #16
    3360:	6059      	str	r1, [r3, #4]
    3362:	685b      	ldr	r3, [r3, #4]
    3364:	2b00      	cmp	r3, #0
    3366:	d007      	beq.n	3378 <common_tc_delay+0x30>
    3368:	4b0e      	ldr	r3, [pc, #56]	; (33a4 <common_tc_delay+0x5c>)
    336a:	6859      	ldr	r1, [r3, #4]
    336c:	3201      	adds	r2, #1
    336e:	1880      	adds	r0, r0, r2
    3370:	8118      	strh	r0, [r3, #8]
    3372:	4b0d      	ldr	r3, [pc, #52]	; (33a8 <common_tc_delay+0x60>)
    3374:	4798      	blx	r3
    3376:	e004      	b.n	3382 <common_tc_delay+0x3a>
    3378:	1882      	adds	r2, r0, r2
    337a:	4b0a      	ldr	r3, [pc, #40]	; (33a4 <common_tc_delay+0x5c>)
    337c:	811a      	strh	r2, [r3, #8]
    337e:	4b0b      	ldr	r3, [pc, #44]	; (33ac <common_tc_delay+0x64>)
    3380:	4798      	blx	r3
    3382:	4b08      	ldr	r3, [pc, #32]	; (33a4 <common_tc_delay+0x5c>)
    3384:	891b      	ldrh	r3, [r3, #8]
    3386:	2b63      	cmp	r3, #99	; 0x63
    3388:	d802      	bhi.n	3390 <common_tc_delay+0x48>
    338a:	3364      	adds	r3, #100	; 0x64
    338c:	4a05      	ldr	r2, [pc, #20]	; (33a4 <common_tc_delay+0x5c>)
    338e:	8113      	strh	r3, [r2, #8]
    3390:	4b04      	ldr	r3, [pc, #16]	; (33a4 <common_tc_delay+0x5c>)
    3392:	8918      	ldrh	r0, [r3, #8]
    3394:	4b06      	ldr	r3, [pc, #24]	; (33b0 <common_tc_delay+0x68>)
    3396:	4798      	blx	r3
    3398:	bd10      	pop	{r4, pc}
    339a:	46c0      	nop			; (mov r8, r8)
    339c:	00002d69 	.word	0x00002d69
    33a0:	20000ab4 	.word	0x20000ab4
    33a4:	20000868 	.word	0x20000868
    33a8:	00002d7d 	.word	0x00002d7d
    33ac:	00002d91 	.word	0x00002d91
    33b0:	00002dcd 	.word	0x00002dcd

000033b4 <common_tc_init>:
    33b4:	b508      	push	{r3, lr}
    33b6:	2200      	movs	r2, #0
    33b8:	4b03      	ldr	r3, [pc, #12]	; (33c8 <common_tc_init+0x14>)
    33ba:	701a      	strb	r2, [r3, #0]
    33bc:	4b03      	ldr	r3, [pc, #12]	; (33cc <common_tc_init+0x18>)
    33be:	4798      	blx	r3
    33c0:	4b03      	ldr	r3, [pc, #12]	; (33d0 <common_tc_init+0x1c>)
    33c2:	7018      	strb	r0, [r3, #0]
    33c4:	bd08      	pop	{r3, pc}
    33c6:	46c0      	nop			; (mov r8, r8)
    33c8:	20000868 	.word	0x20000868
    33cc:	00002de5 	.word	0x00002de5
    33d0:	20000ab4 	.word	0x20000ab4

000033d4 <tmr_ovf_callback>:
    33d4:	b508      	push	{r3, lr}
    33d6:	4b0e      	ldr	r3, [pc, #56]	; (3410 <tmr_ovf_callback+0x3c>)
    33d8:	685b      	ldr	r3, [r3, #4]
    33da:	2b00      	cmp	r3, #0
    33dc:	d007      	beq.n	33ee <tmr_ovf_callback+0x1a>
    33de:	4a0c      	ldr	r2, [pc, #48]	; (3410 <tmr_ovf_callback+0x3c>)
    33e0:	6853      	ldr	r3, [r2, #4]
    33e2:	3b01      	subs	r3, #1
    33e4:	6053      	str	r3, [r2, #4]
    33e6:	2b00      	cmp	r3, #0
    33e8:	d101      	bne.n	33ee <tmr_ovf_callback+0x1a>
    33ea:	4b0a      	ldr	r3, [pc, #40]	; (3414 <tmr_ovf_callback+0x40>)
    33ec:	4798      	blx	r3
    33ee:	4a08      	ldr	r2, [pc, #32]	; (3410 <tmr_ovf_callback+0x3c>)
    33f0:	7813      	ldrb	r3, [r2, #0]
    33f2:	3301      	adds	r3, #1
    33f4:	b2db      	uxtb	r3, r3
    33f6:	7013      	strb	r3, [r2, #0]
    33f8:	4a07      	ldr	r2, [pc, #28]	; (3418 <tmr_ovf_callback+0x44>)
    33fa:	7812      	ldrb	r2, [r2, #0]
    33fc:	429a      	cmp	r2, r3
    33fe:	d806      	bhi.n	340e <tmr_ovf_callback+0x3a>
    3400:	4b03      	ldr	r3, [pc, #12]	; (3410 <tmr_ovf_callback+0x3c>)
    3402:	2200      	movs	r2, #0
    3404:	701a      	strb	r2, [r3, #0]
    3406:	68db      	ldr	r3, [r3, #12]
    3408:	2b00      	cmp	r3, #0
    340a:	d000      	beq.n	340e <tmr_ovf_callback+0x3a>
    340c:	4798      	blx	r3
    340e:	bd08      	pop	{r3, pc}
    3410:	20000868 	.word	0x20000868
    3414:	00002d91 	.word	0x00002d91
    3418:	20000ab4 	.word	0x20000ab4

0000341c <tmr_cca_callback>:
    341c:	b508      	push	{r3, lr}
    341e:	4b04      	ldr	r3, [pc, #16]	; (3430 <tmr_cca_callback+0x14>)
    3420:	4798      	blx	r3
    3422:	4b04      	ldr	r3, [pc, #16]	; (3434 <tmr_cca_callback+0x18>)
    3424:	691b      	ldr	r3, [r3, #16]
    3426:	2b00      	cmp	r3, #0
    3428:	d000      	beq.n	342c <tmr_cca_callback+0x10>
    342a:	4798      	blx	r3
    342c:	bd08      	pop	{r3, pc}
    342e:	46c0      	nop			; (mov r8, r8)
    3430:	00002d7d 	.word	0x00002d7d
    3434:	20000868 	.word	0x20000868

00003438 <set_common_tc_expiry_callback>:
    3438:	4b01      	ldr	r3, [pc, #4]	; (3440 <set_common_tc_expiry_callback+0x8>)
    343a:	6118      	str	r0, [r3, #16]
    343c:	4770      	bx	lr
    343e:	46c0      	nop			; (mov r8, r8)
    3440:	20000868 	.word	0x20000868

00003444 <__libc_init_array>:
    3444:	b570      	push	{r4, r5, r6, lr}
    3446:	2600      	movs	r6, #0
    3448:	4d0c      	ldr	r5, [pc, #48]	; (347c <__libc_init_array+0x38>)
    344a:	4c0d      	ldr	r4, [pc, #52]	; (3480 <__libc_init_array+0x3c>)
    344c:	1b64      	subs	r4, r4, r5
    344e:	10a4      	asrs	r4, r4, #2
    3450:	42a6      	cmp	r6, r4
    3452:	d109      	bne.n	3468 <__libc_init_array+0x24>
    3454:	2600      	movs	r6, #0
    3456:	f005 ff37 	bl	92c8 <_init>
    345a:	4d0a      	ldr	r5, [pc, #40]	; (3484 <__libc_init_array+0x40>)
    345c:	4c0a      	ldr	r4, [pc, #40]	; (3488 <__libc_init_array+0x44>)
    345e:	1b64      	subs	r4, r4, r5
    3460:	10a4      	asrs	r4, r4, #2
    3462:	42a6      	cmp	r6, r4
    3464:	d105      	bne.n	3472 <__libc_init_array+0x2e>
    3466:	bd70      	pop	{r4, r5, r6, pc}
    3468:	00b3      	lsls	r3, r6, #2
    346a:	58eb      	ldr	r3, [r5, r3]
    346c:	4798      	blx	r3
    346e:	3601      	adds	r6, #1
    3470:	e7ee      	b.n	3450 <__libc_init_array+0xc>
    3472:	00b3      	lsls	r3, r6, #2
    3474:	58eb      	ldr	r3, [r5, r3]
    3476:	4798      	blx	r3
    3478:	3601      	adds	r6, #1
    347a:	e7f2      	b.n	3462 <__libc_init_array+0x1e>
    347c:	000092d4 	.word	0x000092d4
    3480:	000092d4 	.word	0x000092d4
    3484:	000092d4 	.word	0x000092d4
    3488:	000092d8 	.word	0x000092d8

0000348c <memcpy>:
    348c:	2300      	movs	r3, #0
    348e:	b510      	push	{r4, lr}
    3490:	429a      	cmp	r2, r3
    3492:	d100      	bne.n	3496 <memcpy+0xa>
    3494:	bd10      	pop	{r4, pc}
    3496:	5ccc      	ldrb	r4, [r1, r3]
    3498:	54c4      	strb	r4, [r0, r3]
    349a:	3301      	adds	r3, #1
    349c:	e7f8      	b.n	3490 <memcpy+0x4>

0000349e <memset>:
    349e:	0003      	movs	r3, r0
    34a0:	1882      	adds	r2, r0, r2
    34a2:	4293      	cmp	r3, r2
    34a4:	d100      	bne.n	34a8 <memset+0xa>
    34a6:	4770      	bx	lr
    34a8:	7019      	strb	r1, [r3, #0]
    34aa:	3301      	adds	r3, #1
    34ac:	e7f9      	b.n	34a2 <memset+0x4>

000034ae <__cvt>:
    34ae:	b5f0      	push	{r4, r5, r6, r7, lr}
    34b0:	b08b      	sub	sp, #44	; 0x2c
    34b2:	0014      	movs	r4, r2
    34b4:	1e1d      	subs	r5, r3, #0
    34b6:	9912      	ldr	r1, [sp, #72]	; 0x48
    34b8:	da53      	bge.n	3562 <__cvt+0xb4>
    34ba:	2480      	movs	r4, #128	; 0x80
    34bc:	0624      	lsls	r4, r4, #24
    34be:	191b      	adds	r3, r3, r4
    34c0:	001d      	movs	r5, r3
    34c2:	0014      	movs	r4, r2
    34c4:	232d      	movs	r3, #45	; 0x2d
    34c6:	700b      	strb	r3, [r1, #0]
    34c8:	2320      	movs	r3, #32
    34ca:	9e14      	ldr	r6, [sp, #80]	; 0x50
    34cc:	2203      	movs	r2, #3
    34ce:	439e      	bics	r6, r3
    34d0:	2e46      	cmp	r6, #70	; 0x46
    34d2:	d007      	beq.n	34e4 <__cvt+0x36>
    34d4:	0033      	movs	r3, r6
    34d6:	3b45      	subs	r3, #69	; 0x45
    34d8:	4259      	negs	r1, r3
    34da:	414b      	adcs	r3, r1
    34dc:	9910      	ldr	r1, [sp, #64]	; 0x40
    34de:	3a01      	subs	r2, #1
    34e0:	18cb      	adds	r3, r1, r3
    34e2:	9310      	str	r3, [sp, #64]	; 0x40
    34e4:	ab09      	add	r3, sp, #36	; 0x24
    34e6:	9304      	str	r3, [sp, #16]
    34e8:	ab08      	add	r3, sp, #32
    34ea:	9303      	str	r3, [sp, #12]
    34ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    34ee:	9200      	str	r2, [sp, #0]
    34f0:	9302      	str	r3, [sp, #8]
    34f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    34f4:	0022      	movs	r2, r4
    34f6:	9301      	str	r3, [sp, #4]
    34f8:	002b      	movs	r3, r5
    34fa:	f000 fedb 	bl	42b4 <_dtoa_r>
    34fe:	0007      	movs	r7, r0
    3500:	2e47      	cmp	r6, #71	; 0x47
    3502:	d102      	bne.n	350a <__cvt+0x5c>
    3504:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3506:	07db      	lsls	r3, r3, #31
    3508:	d524      	bpl.n	3554 <__cvt+0xa6>
    350a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    350c:	18fb      	adds	r3, r7, r3
    350e:	9307      	str	r3, [sp, #28]
    3510:	2e46      	cmp	r6, #70	; 0x46
    3512:	d114      	bne.n	353e <__cvt+0x90>
    3514:	783b      	ldrb	r3, [r7, #0]
    3516:	2b30      	cmp	r3, #48	; 0x30
    3518:	d10c      	bne.n	3534 <__cvt+0x86>
    351a:	2200      	movs	r2, #0
    351c:	2300      	movs	r3, #0
    351e:	0020      	movs	r0, r4
    3520:	0029      	movs	r1, r5
    3522:	f002 fe21 	bl	6168 <__aeabi_dcmpeq>
    3526:	2800      	cmp	r0, #0
    3528:	d104      	bne.n	3534 <__cvt+0x86>
    352a:	2301      	movs	r3, #1
    352c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    352e:	1a9b      	subs	r3, r3, r2
    3530:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3532:	6013      	str	r3, [r2, #0]
    3534:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3536:	9a07      	ldr	r2, [sp, #28]
    3538:	681b      	ldr	r3, [r3, #0]
    353a:	18d3      	adds	r3, r2, r3
    353c:	9307      	str	r3, [sp, #28]
    353e:	2200      	movs	r2, #0
    3540:	2300      	movs	r3, #0
    3542:	0020      	movs	r0, r4
    3544:	0029      	movs	r1, r5
    3546:	f002 fe0f 	bl	6168 <__aeabi_dcmpeq>
    354a:	2230      	movs	r2, #48	; 0x30
    354c:	2800      	cmp	r0, #0
    354e:	d00d      	beq.n	356c <__cvt+0xbe>
    3550:	9b07      	ldr	r3, [sp, #28]
    3552:	9309      	str	r3, [sp, #36]	; 0x24
    3554:	0038      	movs	r0, r7
    3556:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3558:	9a15      	ldr	r2, [sp, #84]	; 0x54
    355a:	1bdb      	subs	r3, r3, r7
    355c:	6013      	str	r3, [r2, #0]
    355e:	b00b      	add	sp, #44	; 0x2c
    3560:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3562:	2300      	movs	r3, #0
    3564:	e7af      	b.n	34c6 <__cvt+0x18>
    3566:	1c59      	adds	r1, r3, #1
    3568:	9109      	str	r1, [sp, #36]	; 0x24
    356a:	701a      	strb	r2, [r3, #0]
    356c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    356e:	9907      	ldr	r1, [sp, #28]
    3570:	4299      	cmp	r1, r3
    3572:	d8f8      	bhi.n	3566 <__cvt+0xb8>
    3574:	e7ee      	b.n	3554 <__cvt+0xa6>

00003576 <__exponent>:
    3576:	b5f0      	push	{r4, r5, r6, r7, lr}
    3578:	232b      	movs	r3, #43	; 0x2b
    357a:	b085      	sub	sp, #20
    357c:	0007      	movs	r7, r0
    357e:	000c      	movs	r4, r1
    3580:	7002      	strb	r2, [r0, #0]
    3582:	1c86      	adds	r6, r0, #2
    3584:	2900      	cmp	r1, #0
    3586:	da01      	bge.n	358c <__exponent+0x16>
    3588:	232d      	movs	r3, #45	; 0x2d
    358a:	424c      	negs	r4, r1
    358c:	707b      	strb	r3, [r7, #1]
    358e:	2c09      	cmp	r4, #9
    3590:	dd23      	ble.n	35da <__exponent+0x64>
    3592:	ab02      	add	r3, sp, #8
    3594:	1ddd      	adds	r5, r3, #7
    3596:	1e6b      	subs	r3, r5, #1
    3598:	0020      	movs	r0, r4
    359a:	210a      	movs	r1, #10
    359c:	9301      	str	r3, [sp, #4]
    359e:	f002 fdcd 	bl	613c <__aeabi_idivmod>
    35a2:	1e6b      	subs	r3, r5, #1
    35a4:	3130      	adds	r1, #48	; 0x30
    35a6:	7019      	strb	r1, [r3, #0]
    35a8:	0020      	movs	r0, r4
    35aa:	210a      	movs	r1, #10
    35ac:	f002 fce0 	bl	5f70 <__divsi3>
    35b0:	0004      	movs	r4, r0
    35b2:	2809      	cmp	r0, #9
    35b4:	dc0a      	bgt.n	35cc <__exponent+0x56>
    35b6:	3d02      	subs	r5, #2
    35b8:	3430      	adds	r4, #48	; 0x30
    35ba:	702c      	strb	r4, [r5, #0]
    35bc:	ab02      	add	r3, sp, #8
    35be:	3307      	adds	r3, #7
    35c0:	0030      	movs	r0, r6
    35c2:	42ab      	cmp	r3, r5
    35c4:	d804      	bhi.n	35d0 <__exponent+0x5a>
    35c6:	1bc0      	subs	r0, r0, r7
    35c8:	b005      	add	sp, #20
    35ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35cc:	9d01      	ldr	r5, [sp, #4]
    35ce:	e7e2      	b.n	3596 <__exponent+0x20>
    35d0:	782b      	ldrb	r3, [r5, #0]
    35d2:	3501      	adds	r5, #1
    35d4:	7033      	strb	r3, [r6, #0]
    35d6:	3601      	adds	r6, #1
    35d8:	e7f0      	b.n	35bc <__exponent+0x46>
    35da:	2330      	movs	r3, #48	; 0x30
    35dc:	18e4      	adds	r4, r4, r3
    35de:	7033      	strb	r3, [r6, #0]
    35e0:	1cb0      	adds	r0, r6, #2
    35e2:	7074      	strb	r4, [r6, #1]
    35e4:	e7ef      	b.n	35c6 <__exponent+0x50>
	...

000035e8 <_printf_float>:
    35e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    35ea:	b095      	sub	sp, #84	; 0x54
    35ec:	000c      	movs	r4, r1
    35ee:	920a      	str	r2, [sp, #40]	; 0x28
    35f0:	930b      	str	r3, [sp, #44]	; 0x2c
    35f2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    35f4:	9009      	str	r0, [sp, #36]	; 0x24
    35f6:	f001 fdd3 	bl	51a0 <_localeconv_r>
    35fa:	6803      	ldr	r3, [r0, #0]
    35fc:	0018      	movs	r0, r3
    35fe:	930d      	str	r3, [sp, #52]	; 0x34
    3600:	f000 fd00 	bl	4004 <strlen>
    3604:	2300      	movs	r3, #0
    3606:	9312      	str	r3, [sp, #72]	; 0x48
    3608:	6823      	ldr	r3, [r4, #0]
    360a:	900e      	str	r0, [sp, #56]	; 0x38
    360c:	930c      	str	r3, [sp, #48]	; 0x30
    360e:	990c      	ldr	r1, [sp, #48]	; 0x30
    3610:	7e27      	ldrb	r7, [r4, #24]
    3612:	682b      	ldr	r3, [r5, #0]
    3614:	2207      	movs	r2, #7
    3616:	05c9      	lsls	r1, r1, #23
    3618:	d547      	bpl.n	36aa <_printf_float+0xc2>
    361a:	189b      	adds	r3, r3, r2
    361c:	4393      	bics	r3, r2
    361e:	001a      	movs	r2, r3
    3620:	3208      	adds	r2, #8
    3622:	602a      	str	r2, [r5, #0]
    3624:	681a      	ldr	r2, [r3, #0]
    3626:	685b      	ldr	r3, [r3, #4]
    3628:	64a2      	str	r2, [r4, #72]	; 0x48
    362a:	64e3      	str	r3, [r4, #76]	; 0x4c
    362c:	2201      	movs	r2, #1
    362e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    3630:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    3632:	006b      	lsls	r3, r5, #1
    3634:	085b      	lsrs	r3, r3, #1
    3636:	930f      	str	r3, [sp, #60]	; 0x3c
    3638:	4252      	negs	r2, r2
    363a:	4ba7      	ldr	r3, [pc, #668]	; (38d8 <_printf_float+0x2f0>)
    363c:	0030      	movs	r0, r6
    363e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    3640:	f005 fa0a 	bl	8a58 <__aeabi_dcmpun>
    3644:	2800      	cmp	r0, #0
    3646:	d000      	beq.n	364a <_printf_float+0x62>
    3648:	e206      	b.n	3a58 <_printf_float+0x470>
    364a:	2201      	movs	r2, #1
    364c:	4ba2      	ldr	r3, [pc, #648]	; (38d8 <_printf_float+0x2f0>)
    364e:	4252      	negs	r2, r2
    3650:	0030      	movs	r0, r6
    3652:	990f      	ldr	r1, [sp, #60]	; 0x3c
    3654:	f002 fd98 	bl	6188 <__aeabi_dcmple>
    3658:	2800      	cmp	r0, #0
    365a:	d000      	beq.n	365e <_printf_float+0x76>
    365c:	e1fc      	b.n	3a58 <_printf_float+0x470>
    365e:	2200      	movs	r2, #0
    3660:	2300      	movs	r3, #0
    3662:	0030      	movs	r0, r6
    3664:	0029      	movs	r1, r5
    3666:	f002 fd85 	bl	6174 <__aeabi_dcmplt>
    366a:	2800      	cmp	r0, #0
    366c:	d003      	beq.n	3676 <_printf_float+0x8e>
    366e:	0023      	movs	r3, r4
    3670:	222d      	movs	r2, #45	; 0x2d
    3672:	3343      	adds	r3, #67	; 0x43
    3674:	701a      	strb	r2, [r3, #0]
    3676:	4d99      	ldr	r5, [pc, #612]	; (38dc <_printf_float+0x2f4>)
    3678:	2f47      	cmp	r7, #71	; 0x47
    367a:	d800      	bhi.n	367e <_printf_float+0x96>
    367c:	4d98      	ldr	r5, [pc, #608]	; (38e0 <_printf_float+0x2f8>)
    367e:	2303      	movs	r3, #3
    3680:	2600      	movs	r6, #0
    3682:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3684:	6123      	str	r3, [r4, #16]
    3686:	3301      	adds	r3, #1
    3688:	439a      	bics	r2, r3
    368a:	6022      	str	r2, [r4, #0]
    368c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    368e:	aa13      	add	r2, sp, #76	; 0x4c
    3690:	9300      	str	r3, [sp, #0]
    3692:	0021      	movs	r1, r4
    3694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3696:	9809      	ldr	r0, [sp, #36]	; 0x24
    3698:	f000 f9f2 	bl	3a80 <_printf_common>
    369c:	1c43      	adds	r3, r0, #1
    369e:	d000      	beq.n	36a2 <_printf_float+0xba>
    36a0:	e09c      	b.n	37dc <_printf_float+0x1f4>
    36a2:	2001      	movs	r0, #1
    36a4:	4240      	negs	r0, r0
    36a6:	b015      	add	sp, #84	; 0x54
    36a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36aa:	3307      	adds	r3, #7
    36ac:	e7b6      	b.n	361c <_printf_float+0x34>
    36ae:	2380      	movs	r3, #128	; 0x80
    36b0:	6862      	ldr	r2, [r4, #4]
    36b2:	00db      	lsls	r3, r3, #3
    36b4:	1c51      	adds	r1, r2, #1
    36b6:	d145      	bne.n	3744 <_printf_float+0x15c>
    36b8:	3207      	adds	r2, #7
    36ba:	6062      	str	r2, [r4, #4]
    36bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    36be:	2100      	movs	r1, #0
    36c0:	4313      	orrs	r3, r2
    36c2:	aa12      	add	r2, sp, #72	; 0x48
    36c4:	9205      	str	r2, [sp, #20]
    36c6:	aa11      	add	r2, sp, #68	; 0x44
    36c8:	9203      	str	r2, [sp, #12]
    36ca:	2223      	movs	r2, #35	; 0x23
    36cc:	6023      	str	r3, [r4, #0]
    36ce:	9106      	str	r1, [sp, #24]
    36d0:	9301      	str	r3, [sp, #4]
    36d2:	a908      	add	r1, sp, #32
    36d4:	6863      	ldr	r3, [r4, #4]
    36d6:	1852      	adds	r2, r2, r1
    36d8:	9202      	str	r2, [sp, #8]
    36da:	9300      	str	r3, [sp, #0]
    36dc:	0032      	movs	r2, r6
    36de:	002b      	movs	r3, r5
    36e0:	9704      	str	r7, [sp, #16]
    36e2:	9809      	ldr	r0, [sp, #36]	; 0x24
    36e4:	f7ff fee3 	bl	34ae <__cvt>
    36e8:	2320      	movs	r3, #32
    36ea:	003a      	movs	r2, r7
    36ec:	0005      	movs	r5, r0
    36ee:	439a      	bics	r2, r3
    36f0:	2a47      	cmp	r2, #71	; 0x47
    36f2:	d107      	bne.n	3704 <_printf_float+0x11c>
    36f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    36f6:	1cda      	adds	r2, r3, #3
    36f8:	db02      	blt.n	3700 <_printf_float+0x118>
    36fa:	6862      	ldr	r2, [r4, #4]
    36fc:	4293      	cmp	r3, r2
    36fe:	dd5b      	ble.n	37b8 <_printf_float+0x1d0>
    3700:	3f02      	subs	r7, #2
    3702:	b2ff      	uxtb	r7, r7
    3704:	9911      	ldr	r1, [sp, #68]	; 0x44
    3706:	2f65      	cmp	r7, #101	; 0x65
    3708:	d83b      	bhi.n	3782 <_printf_float+0x19a>
    370a:	0020      	movs	r0, r4
    370c:	3901      	subs	r1, #1
    370e:	003a      	movs	r2, r7
    3710:	3050      	adds	r0, #80	; 0x50
    3712:	9111      	str	r1, [sp, #68]	; 0x44
    3714:	f7ff ff2f 	bl	3576 <__exponent>
    3718:	9a12      	ldr	r2, [sp, #72]	; 0x48
    371a:	0006      	movs	r6, r0
    371c:	1883      	adds	r3, r0, r2
    371e:	6123      	str	r3, [r4, #16]
    3720:	2a01      	cmp	r2, #1
    3722:	dc02      	bgt.n	372a <_printf_float+0x142>
    3724:	6822      	ldr	r2, [r4, #0]
    3726:	07d2      	lsls	r2, r2, #31
    3728:	d501      	bpl.n	372e <_printf_float+0x146>
    372a:	3301      	adds	r3, #1
    372c:	6123      	str	r3, [r4, #16]
    372e:	2323      	movs	r3, #35	; 0x23
    3730:	aa08      	add	r2, sp, #32
    3732:	189b      	adds	r3, r3, r2
    3734:	781b      	ldrb	r3, [r3, #0]
    3736:	2b00      	cmp	r3, #0
    3738:	d0a8      	beq.n	368c <_printf_float+0xa4>
    373a:	0023      	movs	r3, r4
    373c:	222d      	movs	r2, #45	; 0x2d
    373e:	3343      	adds	r3, #67	; 0x43
    3740:	701a      	strb	r2, [r3, #0]
    3742:	e7a3      	b.n	368c <_printf_float+0xa4>
    3744:	2f67      	cmp	r7, #103	; 0x67
    3746:	d001      	beq.n	374c <_printf_float+0x164>
    3748:	2f47      	cmp	r7, #71	; 0x47
    374a:	d1b7      	bne.n	36bc <_printf_float+0xd4>
    374c:	2a00      	cmp	r2, #0
    374e:	d016      	beq.n	377e <_printf_float+0x196>
    3750:	990c      	ldr	r1, [sp, #48]	; 0x30
    3752:	a808      	add	r0, sp, #32
    3754:	430b      	orrs	r3, r1
    3756:	2100      	movs	r1, #0
    3758:	9106      	str	r1, [sp, #24]
    375a:	a912      	add	r1, sp, #72	; 0x48
    375c:	9105      	str	r1, [sp, #20]
    375e:	a911      	add	r1, sp, #68	; 0x44
    3760:	9103      	str	r1, [sp, #12]
    3762:	2123      	movs	r1, #35	; 0x23
    3764:	1809      	adds	r1, r1, r0
    3766:	6023      	str	r3, [r4, #0]
    3768:	9301      	str	r3, [sp, #4]
    376a:	9200      	str	r2, [sp, #0]
    376c:	002b      	movs	r3, r5
    376e:	9704      	str	r7, [sp, #16]
    3770:	9102      	str	r1, [sp, #8]
    3772:	0032      	movs	r2, r6
    3774:	9809      	ldr	r0, [sp, #36]	; 0x24
    3776:	f7ff fe9a 	bl	34ae <__cvt>
    377a:	0005      	movs	r5, r0
    377c:	e7ba      	b.n	36f4 <_printf_float+0x10c>
    377e:	2201      	movs	r2, #1
    3780:	e79b      	b.n	36ba <_printf_float+0xd2>
    3782:	2f66      	cmp	r7, #102	; 0x66
    3784:	d119      	bne.n	37ba <_printf_float+0x1d2>
    3786:	6863      	ldr	r3, [r4, #4]
    3788:	2900      	cmp	r1, #0
    378a:	dd0c      	ble.n	37a6 <_printf_float+0x1be>
    378c:	6121      	str	r1, [r4, #16]
    378e:	2b00      	cmp	r3, #0
    3790:	d102      	bne.n	3798 <_printf_float+0x1b0>
    3792:	6822      	ldr	r2, [r4, #0]
    3794:	07d2      	lsls	r2, r2, #31
    3796:	d502      	bpl.n	379e <_printf_float+0x1b6>
    3798:	3301      	adds	r3, #1
    379a:	185b      	adds	r3, r3, r1
    379c:	6123      	str	r3, [r4, #16]
    379e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    37a0:	2600      	movs	r6, #0
    37a2:	65a3      	str	r3, [r4, #88]	; 0x58
    37a4:	e7c3      	b.n	372e <_printf_float+0x146>
    37a6:	2b00      	cmp	r3, #0
    37a8:	d103      	bne.n	37b2 <_printf_float+0x1ca>
    37aa:	2201      	movs	r2, #1
    37ac:	6821      	ldr	r1, [r4, #0]
    37ae:	4211      	tst	r1, r2
    37b0:	d000      	beq.n	37b4 <_printf_float+0x1cc>
    37b2:	1c9a      	adds	r2, r3, #2
    37b4:	6122      	str	r2, [r4, #16]
    37b6:	e7f2      	b.n	379e <_printf_float+0x1b6>
    37b8:	2767      	movs	r7, #103	; 0x67
    37ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    37bc:	9812      	ldr	r0, [sp, #72]	; 0x48
    37be:	4283      	cmp	r3, r0
    37c0:	db05      	blt.n	37ce <_printf_float+0x1e6>
    37c2:	6822      	ldr	r2, [r4, #0]
    37c4:	6123      	str	r3, [r4, #16]
    37c6:	07d2      	lsls	r2, r2, #31
    37c8:	d5e9      	bpl.n	379e <_printf_float+0x1b6>
    37ca:	3301      	adds	r3, #1
    37cc:	e7e6      	b.n	379c <_printf_float+0x1b4>
    37ce:	2201      	movs	r2, #1
    37d0:	2b00      	cmp	r3, #0
    37d2:	dc01      	bgt.n	37d8 <_printf_float+0x1f0>
    37d4:	1892      	adds	r2, r2, r2
    37d6:	1ad2      	subs	r2, r2, r3
    37d8:	1812      	adds	r2, r2, r0
    37da:	e7eb      	b.n	37b4 <_printf_float+0x1cc>
    37dc:	6822      	ldr	r2, [r4, #0]
    37de:	0553      	lsls	r3, r2, #21
    37e0:	d408      	bmi.n	37f4 <_printf_float+0x20c>
    37e2:	6923      	ldr	r3, [r4, #16]
    37e4:	002a      	movs	r2, r5
    37e6:	990a      	ldr	r1, [sp, #40]	; 0x28
    37e8:	9809      	ldr	r0, [sp, #36]	; 0x24
    37ea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    37ec:	47a8      	blx	r5
    37ee:	1c43      	adds	r3, r0, #1
    37f0:	d129      	bne.n	3846 <_printf_float+0x25e>
    37f2:	e756      	b.n	36a2 <_printf_float+0xba>
    37f4:	2f65      	cmp	r7, #101	; 0x65
    37f6:	d800      	bhi.n	37fa <_printf_float+0x212>
    37f8:	e0dc      	b.n	39b4 <_printf_float+0x3cc>
    37fa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    37fc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    37fe:	2200      	movs	r2, #0
    3800:	2300      	movs	r3, #0
    3802:	f002 fcb1 	bl	6168 <__aeabi_dcmpeq>
    3806:	2800      	cmp	r0, #0
    3808:	d035      	beq.n	3876 <_printf_float+0x28e>
    380a:	2301      	movs	r3, #1
    380c:	4a35      	ldr	r2, [pc, #212]	; (38e4 <_printf_float+0x2fc>)
    380e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3810:	9809      	ldr	r0, [sp, #36]	; 0x24
    3812:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3814:	47a8      	blx	r5
    3816:	1c43      	adds	r3, r0, #1
    3818:	d100      	bne.n	381c <_printf_float+0x234>
    381a:	e742      	b.n	36a2 <_printf_float+0xba>
    381c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    381e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3820:	4293      	cmp	r3, r2
    3822:	db02      	blt.n	382a <_printf_float+0x242>
    3824:	6823      	ldr	r3, [r4, #0]
    3826:	07db      	lsls	r3, r3, #31
    3828:	d50d      	bpl.n	3846 <_printf_float+0x25e>
    382a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    382c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    382e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3830:	990a      	ldr	r1, [sp, #40]	; 0x28
    3832:	9809      	ldr	r0, [sp, #36]	; 0x24
    3834:	47a8      	blx	r5
    3836:	2500      	movs	r5, #0
    3838:	1c43      	adds	r3, r0, #1
    383a:	d100      	bne.n	383e <_printf_float+0x256>
    383c:	e731      	b.n	36a2 <_printf_float+0xba>
    383e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3840:	3b01      	subs	r3, #1
    3842:	429d      	cmp	r5, r3
    3844:	db0b      	blt.n	385e <_printf_float+0x276>
    3846:	6823      	ldr	r3, [r4, #0]
    3848:	2500      	movs	r5, #0
    384a:	079b      	lsls	r3, r3, #30
    384c:	d500      	bpl.n	3850 <_printf_float+0x268>
    384e:	e0fd      	b.n	3a4c <_printf_float+0x464>
    3850:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3852:	68e0      	ldr	r0, [r4, #12]
    3854:	4298      	cmp	r0, r3
    3856:	db00      	blt.n	385a <_printf_float+0x272>
    3858:	e725      	b.n	36a6 <_printf_float+0xbe>
    385a:	0018      	movs	r0, r3
    385c:	e723      	b.n	36a6 <_printf_float+0xbe>
    385e:	0022      	movs	r2, r4
    3860:	2301      	movs	r3, #1
    3862:	321a      	adds	r2, #26
    3864:	990a      	ldr	r1, [sp, #40]	; 0x28
    3866:	9809      	ldr	r0, [sp, #36]	; 0x24
    3868:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    386a:	47b0      	blx	r6
    386c:	1c43      	adds	r3, r0, #1
    386e:	d100      	bne.n	3872 <_printf_float+0x28a>
    3870:	e717      	b.n	36a2 <_printf_float+0xba>
    3872:	3501      	adds	r5, #1
    3874:	e7e3      	b.n	383e <_printf_float+0x256>
    3876:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3878:	2b00      	cmp	r3, #0
    387a:	dc35      	bgt.n	38e8 <_printf_float+0x300>
    387c:	2301      	movs	r3, #1
    387e:	4a19      	ldr	r2, [pc, #100]	; (38e4 <_printf_float+0x2fc>)
    3880:	990a      	ldr	r1, [sp, #40]	; 0x28
    3882:	9809      	ldr	r0, [sp, #36]	; 0x24
    3884:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3886:	47b0      	blx	r6
    3888:	1c43      	adds	r3, r0, #1
    388a:	d100      	bne.n	388e <_printf_float+0x2a6>
    388c:	e709      	b.n	36a2 <_printf_float+0xba>
    388e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3890:	2b00      	cmp	r3, #0
    3892:	d105      	bne.n	38a0 <_printf_float+0x2b8>
    3894:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3896:	2b00      	cmp	r3, #0
    3898:	d102      	bne.n	38a0 <_printf_float+0x2b8>
    389a:	6823      	ldr	r3, [r4, #0]
    389c:	07db      	lsls	r3, r3, #31
    389e:	d5d2      	bpl.n	3846 <_printf_float+0x25e>
    38a0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    38a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    38a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    38a6:	990a      	ldr	r1, [sp, #40]	; 0x28
    38a8:	9809      	ldr	r0, [sp, #36]	; 0x24
    38aa:	47b0      	blx	r6
    38ac:	2600      	movs	r6, #0
    38ae:	1c43      	adds	r3, r0, #1
    38b0:	d100      	bne.n	38b4 <_printf_float+0x2cc>
    38b2:	e6f6      	b.n	36a2 <_printf_float+0xba>
    38b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    38b6:	425b      	negs	r3, r3
    38b8:	429e      	cmp	r6, r3
    38ba:	db01      	blt.n	38c0 <_printf_float+0x2d8>
    38bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    38be:	e791      	b.n	37e4 <_printf_float+0x1fc>
    38c0:	0022      	movs	r2, r4
    38c2:	2301      	movs	r3, #1
    38c4:	321a      	adds	r2, #26
    38c6:	990a      	ldr	r1, [sp, #40]	; 0x28
    38c8:	9809      	ldr	r0, [sp, #36]	; 0x24
    38ca:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    38cc:	47b8      	blx	r7
    38ce:	1c43      	adds	r3, r0, #1
    38d0:	d100      	bne.n	38d4 <_printf_float+0x2ec>
    38d2:	e6e6      	b.n	36a2 <_printf_float+0xba>
    38d4:	3601      	adds	r6, #1
    38d6:	e7ed      	b.n	38b4 <_printf_float+0x2cc>
    38d8:	7fefffff 	.word	0x7fefffff
    38dc:	00008ed0 	.word	0x00008ed0
    38e0:	00008ecc 	.word	0x00008ecc
    38e4:	00008edc 	.word	0x00008edc
    38e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
    38ea:	9e12      	ldr	r6, [sp, #72]	; 0x48
    38ec:	429e      	cmp	r6, r3
    38ee:	dd00      	ble.n	38f2 <_printf_float+0x30a>
    38f0:	001e      	movs	r6, r3
    38f2:	2e00      	cmp	r6, #0
    38f4:	dc35      	bgt.n	3962 <_printf_float+0x37a>
    38f6:	2300      	movs	r3, #0
    38f8:	930c      	str	r3, [sp, #48]	; 0x30
    38fa:	43f3      	mvns	r3, r6
    38fc:	17db      	asrs	r3, r3, #31
    38fe:	930f      	str	r3, [sp, #60]	; 0x3c
    3900:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3902:	6da7      	ldr	r7, [r4, #88]	; 0x58
    3904:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3906:	4033      	ands	r3, r6
    3908:	1afb      	subs	r3, r7, r3
    390a:	429a      	cmp	r2, r3
    390c:	db32      	blt.n	3974 <_printf_float+0x38c>
    390e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3910:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3912:	4293      	cmp	r3, r2
    3914:	db3c      	blt.n	3990 <_printf_float+0x3a8>
    3916:	6823      	ldr	r3, [r4, #0]
    3918:	07db      	lsls	r3, r3, #31
    391a:	d439      	bmi.n	3990 <_printf_float+0x3a8>
    391c:	9e12      	ldr	r6, [sp, #72]	; 0x48
    391e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3920:	1bf3      	subs	r3, r6, r7
    3922:	1ab6      	subs	r6, r6, r2
    3924:	429e      	cmp	r6, r3
    3926:	dd00      	ble.n	392a <_printf_float+0x342>
    3928:	001e      	movs	r6, r3
    392a:	2e00      	cmp	r6, #0
    392c:	dc39      	bgt.n	39a2 <_printf_float+0x3ba>
    392e:	43f7      	mvns	r7, r6
    3930:	2500      	movs	r5, #0
    3932:	17fb      	asrs	r3, r7, #31
    3934:	930c      	str	r3, [sp, #48]	; 0x30
    3936:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3938:	9b12      	ldr	r3, [sp, #72]	; 0x48
    393a:	990c      	ldr	r1, [sp, #48]	; 0x30
    393c:	1a9b      	subs	r3, r3, r2
    393e:	0032      	movs	r2, r6
    3940:	400a      	ands	r2, r1
    3942:	1a9b      	subs	r3, r3, r2
    3944:	429d      	cmp	r5, r3
    3946:	db00      	blt.n	394a <_printf_float+0x362>
    3948:	e77d      	b.n	3846 <_printf_float+0x25e>
    394a:	0022      	movs	r2, r4
    394c:	2301      	movs	r3, #1
    394e:	321a      	adds	r2, #26
    3950:	990a      	ldr	r1, [sp, #40]	; 0x28
    3952:	9809      	ldr	r0, [sp, #36]	; 0x24
    3954:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3956:	47b8      	blx	r7
    3958:	1c43      	adds	r3, r0, #1
    395a:	d100      	bne.n	395e <_printf_float+0x376>
    395c:	e6a1      	b.n	36a2 <_printf_float+0xba>
    395e:	3501      	adds	r5, #1
    3960:	e7e9      	b.n	3936 <_printf_float+0x34e>
    3962:	0033      	movs	r3, r6
    3964:	002a      	movs	r2, r5
    3966:	990a      	ldr	r1, [sp, #40]	; 0x28
    3968:	9809      	ldr	r0, [sp, #36]	; 0x24
    396a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    396c:	47b8      	blx	r7
    396e:	1c43      	adds	r3, r0, #1
    3970:	d1c1      	bne.n	38f6 <_printf_float+0x30e>
    3972:	e696      	b.n	36a2 <_printf_float+0xba>
    3974:	0022      	movs	r2, r4
    3976:	2301      	movs	r3, #1
    3978:	321a      	adds	r2, #26
    397a:	990a      	ldr	r1, [sp, #40]	; 0x28
    397c:	9809      	ldr	r0, [sp, #36]	; 0x24
    397e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3980:	47b8      	blx	r7
    3982:	1c43      	adds	r3, r0, #1
    3984:	d100      	bne.n	3988 <_printf_float+0x3a0>
    3986:	e68c      	b.n	36a2 <_printf_float+0xba>
    3988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    398a:	3301      	adds	r3, #1
    398c:	930c      	str	r3, [sp, #48]	; 0x30
    398e:	e7b7      	b.n	3900 <_printf_float+0x318>
    3990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3992:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3994:	990a      	ldr	r1, [sp, #40]	; 0x28
    3996:	9809      	ldr	r0, [sp, #36]	; 0x24
    3998:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    399a:	47b0      	blx	r6
    399c:	1c43      	adds	r3, r0, #1
    399e:	d1bd      	bne.n	391c <_printf_float+0x334>
    39a0:	e67f      	b.n	36a2 <_printf_float+0xba>
    39a2:	19ea      	adds	r2, r5, r7
    39a4:	0033      	movs	r3, r6
    39a6:	990a      	ldr	r1, [sp, #40]	; 0x28
    39a8:	9809      	ldr	r0, [sp, #36]	; 0x24
    39aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    39ac:	47a8      	blx	r5
    39ae:	1c43      	adds	r3, r0, #1
    39b0:	d1bd      	bne.n	392e <_printf_float+0x346>
    39b2:	e676      	b.n	36a2 <_printf_float+0xba>
    39b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    39b6:	2b01      	cmp	r3, #1
    39b8:	dc02      	bgt.n	39c0 <_printf_float+0x3d8>
    39ba:	2301      	movs	r3, #1
    39bc:	421a      	tst	r2, r3
    39be:	d038      	beq.n	3a32 <_printf_float+0x44a>
    39c0:	2301      	movs	r3, #1
    39c2:	002a      	movs	r2, r5
    39c4:	990a      	ldr	r1, [sp, #40]	; 0x28
    39c6:	9809      	ldr	r0, [sp, #36]	; 0x24
    39c8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    39ca:	47b8      	blx	r7
    39cc:	1c43      	adds	r3, r0, #1
    39ce:	d100      	bne.n	39d2 <_printf_float+0x3ea>
    39d0:	e667      	b.n	36a2 <_printf_float+0xba>
    39d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    39d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    39d6:	990a      	ldr	r1, [sp, #40]	; 0x28
    39d8:	9809      	ldr	r0, [sp, #36]	; 0x24
    39da:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    39dc:	47b8      	blx	r7
    39de:	1c43      	adds	r3, r0, #1
    39e0:	d100      	bne.n	39e4 <_printf_float+0x3fc>
    39e2:	e65e      	b.n	36a2 <_printf_float+0xba>
    39e4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    39e6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    39e8:	2200      	movs	r2, #0
    39ea:	2300      	movs	r3, #0
    39ec:	f002 fbbc 	bl	6168 <__aeabi_dcmpeq>
    39f0:	2800      	cmp	r0, #0
    39f2:	d008      	beq.n	3a06 <_printf_float+0x41e>
    39f4:	2500      	movs	r5, #0
    39f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    39f8:	3b01      	subs	r3, #1
    39fa:	429d      	cmp	r5, r3
    39fc:	db0d      	blt.n	3a1a <_printf_float+0x432>
    39fe:	0022      	movs	r2, r4
    3a00:	0033      	movs	r3, r6
    3a02:	3250      	adds	r2, #80	; 0x50
    3a04:	e6ef      	b.n	37e6 <_printf_float+0x1fe>
    3a06:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3a08:	1c6a      	adds	r2, r5, #1
    3a0a:	3b01      	subs	r3, #1
    3a0c:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a0e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a10:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3a12:	47a8      	blx	r5
    3a14:	1c43      	adds	r3, r0, #1
    3a16:	d1f2      	bne.n	39fe <_printf_float+0x416>
    3a18:	e643      	b.n	36a2 <_printf_float+0xba>
    3a1a:	0022      	movs	r2, r4
    3a1c:	2301      	movs	r3, #1
    3a1e:	321a      	adds	r2, #26
    3a20:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a22:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a24:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3a26:	47b8      	blx	r7
    3a28:	1c43      	adds	r3, r0, #1
    3a2a:	d100      	bne.n	3a2e <_printf_float+0x446>
    3a2c:	e639      	b.n	36a2 <_printf_float+0xba>
    3a2e:	3501      	adds	r5, #1
    3a30:	e7e1      	b.n	39f6 <_printf_float+0x40e>
    3a32:	002a      	movs	r2, r5
    3a34:	e7ea      	b.n	3a0c <_printf_float+0x424>
    3a36:	0022      	movs	r2, r4
    3a38:	2301      	movs	r3, #1
    3a3a:	3219      	adds	r2, #25
    3a3c:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a3e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a40:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3a42:	47b0      	blx	r6
    3a44:	1c43      	adds	r3, r0, #1
    3a46:	d100      	bne.n	3a4a <_printf_float+0x462>
    3a48:	e62b      	b.n	36a2 <_printf_float+0xba>
    3a4a:	3501      	adds	r5, #1
    3a4c:	68e3      	ldr	r3, [r4, #12]
    3a4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3a50:	1a9b      	subs	r3, r3, r2
    3a52:	429d      	cmp	r5, r3
    3a54:	dbef      	blt.n	3a36 <_printf_float+0x44e>
    3a56:	e6fb      	b.n	3850 <_printf_float+0x268>
    3a58:	0032      	movs	r2, r6
    3a5a:	002b      	movs	r3, r5
    3a5c:	0030      	movs	r0, r6
    3a5e:	0029      	movs	r1, r5
    3a60:	f004 fffa 	bl	8a58 <__aeabi_dcmpun>
    3a64:	2800      	cmp	r0, #0
    3a66:	d100      	bne.n	3a6a <_printf_float+0x482>
    3a68:	e621      	b.n	36ae <_printf_float+0xc6>
    3a6a:	4d03      	ldr	r5, [pc, #12]	; (3a78 <_printf_float+0x490>)
    3a6c:	2f47      	cmp	r7, #71	; 0x47
    3a6e:	d900      	bls.n	3a72 <_printf_float+0x48a>
    3a70:	e605      	b.n	367e <_printf_float+0x96>
    3a72:	4d02      	ldr	r5, [pc, #8]	; (3a7c <_printf_float+0x494>)
    3a74:	e603      	b.n	367e <_printf_float+0x96>
    3a76:	46c0      	nop			; (mov r8, r8)
    3a78:	00008ed8 	.word	0x00008ed8
    3a7c:	00008ed4 	.word	0x00008ed4

00003a80 <_printf_common>:
    3a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3a82:	0015      	movs	r5, r2
    3a84:	9301      	str	r3, [sp, #4]
    3a86:	688a      	ldr	r2, [r1, #8]
    3a88:	690b      	ldr	r3, [r1, #16]
    3a8a:	9000      	str	r0, [sp, #0]
    3a8c:	000c      	movs	r4, r1
    3a8e:	4293      	cmp	r3, r2
    3a90:	da00      	bge.n	3a94 <_printf_common+0x14>
    3a92:	0013      	movs	r3, r2
    3a94:	0022      	movs	r2, r4
    3a96:	602b      	str	r3, [r5, #0]
    3a98:	3243      	adds	r2, #67	; 0x43
    3a9a:	7812      	ldrb	r2, [r2, #0]
    3a9c:	2a00      	cmp	r2, #0
    3a9e:	d001      	beq.n	3aa4 <_printf_common+0x24>
    3aa0:	3301      	adds	r3, #1
    3aa2:	602b      	str	r3, [r5, #0]
    3aa4:	6823      	ldr	r3, [r4, #0]
    3aa6:	069b      	lsls	r3, r3, #26
    3aa8:	d502      	bpl.n	3ab0 <_printf_common+0x30>
    3aaa:	682b      	ldr	r3, [r5, #0]
    3aac:	3302      	adds	r3, #2
    3aae:	602b      	str	r3, [r5, #0]
    3ab0:	2706      	movs	r7, #6
    3ab2:	6823      	ldr	r3, [r4, #0]
    3ab4:	401f      	ands	r7, r3
    3ab6:	d027      	beq.n	3b08 <_printf_common+0x88>
    3ab8:	0023      	movs	r3, r4
    3aba:	3343      	adds	r3, #67	; 0x43
    3abc:	781b      	ldrb	r3, [r3, #0]
    3abe:	1e5a      	subs	r2, r3, #1
    3ac0:	4193      	sbcs	r3, r2
    3ac2:	6822      	ldr	r2, [r4, #0]
    3ac4:	0692      	lsls	r2, r2, #26
    3ac6:	d430      	bmi.n	3b2a <_printf_common+0xaa>
    3ac8:	0022      	movs	r2, r4
    3aca:	9901      	ldr	r1, [sp, #4]
    3acc:	3243      	adds	r2, #67	; 0x43
    3ace:	9800      	ldr	r0, [sp, #0]
    3ad0:	9e08      	ldr	r6, [sp, #32]
    3ad2:	47b0      	blx	r6
    3ad4:	1c43      	adds	r3, r0, #1
    3ad6:	d025      	beq.n	3b24 <_printf_common+0xa4>
    3ad8:	2306      	movs	r3, #6
    3ada:	6820      	ldr	r0, [r4, #0]
    3adc:	682a      	ldr	r2, [r5, #0]
    3ade:	68e1      	ldr	r1, [r4, #12]
    3ae0:	4003      	ands	r3, r0
    3ae2:	2500      	movs	r5, #0
    3ae4:	2b04      	cmp	r3, #4
    3ae6:	d103      	bne.n	3af0 <_printf_common+0x70>
    3ae8:	1a8d      	subs	r5, r1, r2
    3aea:	43eb      	mvns	r3, r5
    3aec:	17db      	asrs	r3, r3, #31
    3aee:	401d      	ands	r5, r3
    3af0:	68a3      	ldr	r3, [r4, #8]
    3af2:	6922      	ldr	r2, [r4, #16]
    3af4:	4293      	cmp	r3, r2
    3af6:	dd01      	ble.n	3afc <_printf_common+0x7c>
    3af8:	1a9b      	subs	r3, r3, r2
    3afa:	18ed      	adds	r5, r5, r3
    3afc:	2700      	movs	r7, #0
    3afe:	42bd      	cmp	r5, r7
    3b00:	d120      	bne.n	3b44 <_printf_common+0xc4>
    3b02:	2000      	movs	r0, #0
    3b04:	e010      	b.n	3b28 <_printf_common+0xa8>
    3b06:	3701      	adds	r7, #1
    3b08:	68e3      	ldr	r3, [r4, #12]
    3b0a:	682a      	ldr	r2, [r5, #0]
    3b0c:	1a9b      	subs	r3, r3, r2
    3b0e:	429f      	cmp	r7, r3
    3b10:	dad2      	bge.n	3ab8 <_printf_common+0x38>
    3b12:	0022      	movs	r2, r4
    3b14:	2301      	movs	r3, #1
    3b16:	3219      	adds	r2, #25
    3b18:	9901      	ldr	r1, [sp, #4]
    3b1a:	9800      	ldr	r0, [sp, #0]
    3b1c:	9e08      	ldr	r6, [sp, #32]
    3b1e:	47b0      	blx	r6
    3b20:	1c43      	adds	r3, r0, #1
    3b22:	d1f0      	bne.n	3b06 <_printf_common+0x86>
    3b24:	2001      	movs	r0, #1
    3b26:	4240      	negs	r0, r0
    3b28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3b2a:	2030      	movs	r0, #48	; 0x30
    3b2c:	18e1      	adds	r1, r4, r3
    3b2e:	3143      	adds	r1, #67	; 0x43
    3b30:	7008      	strb	r0, [r1, #0]
    3b32:	0021      	movs	r1, r4
    3b34:	1c5a      	adds	r2, r3, #1
    3b36:	3145      	adds	r1, #69	; 0x45
    3b38:	7809      	ldrb	r1, [r1, #0]
    3b3a:	18a2      	adds	r2, r4, r2
    3b3c:	3243      	adds	r2, #67	; 0x43
    3b3e:	3302      	adds	r3, #2
    3b40:	7011      	strb	r1, [r2, #0]
    3b42:	e7c1      	b.n	3ac8 <_printf_common+0x48>
    3b44:	0022      	movs	r2, r4
    3b46:	2301      	movs	r3, #1
    3b48:	321a      	adds	r2, #26
    3b4a:	9901      	ldr	r1, [sp, #4]
    3b4c:	9800      	ldr	r0, [sp, #0]
    3b4e:	9e08      	ldr	r6, [sp, #32]
    3b50:	47b0      	blx	r6
    3b52:	1c43      	adds	r3, r0, #1
    3b54:	d0e6      	beq.n	3b24 <_printf_common+0xa4>
    3b56:	3701      	adds	r7, #1
    3b58:	e7d1      	b.n	3afe <_printf_common+0x7e>
	...

00003b5c <_printf_i>:
    3b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b5e:	b08b      	sub	sp, #44	; 0x2c
    3b60:	9206      	str	r2, [sp, #24]
    3b62:	000a      	movs	r2, r1
    3b64:	3243      	adds	r2, #67	; 0x43
    3b66:	9307      	str	r3, [sp, #28]
    3b68:	9005      	str	r0, [sp, #20]
    3b6a:	9204      	str	r2, [sp, #16]
    3b6c:	7e0a      	ldrb	r2, [r1, #24]
    3b6e:	000c      	movs	r4, r1
    3b70:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3b72:	2a6e      	cmp	r2, #110	; 0x6e
    3b74:	d100      	bne.n	3b78 <_printf_i+0x1c>
    3b76:	e08f      	b.n	3c98 <_printf_i+0x13c>
    3b78:	d817      	bhi.n	3baa <_printf_i+0x4e>
    3b7a:	2a63      	cmp	r2, #99	; 0x63
    3b7c:	d02c      	beq.n	3bd8 <_printf_i+0x7c>
    3b7e:	d808      	bhi.n	3b92 <_printf_i+0x36>
    3b80:	2a00      	cmp	r2, #0
    3b82:	d100      	bne.n	3b86 <_printf_i+0x2a>
    3b84:	e099      	b.n	3cba <_printf_i+0x15e>
    3b86:	2a58      	cmp	r2, #88	; 0x58
    3b88:	d054      	beq.n	3c34 <_printf_i+0xd8>
    3b8a:	0026      	movs	r6, r4
    3b8c:	3642      	adds	r6, #66	; 0x42
    3b8e:	7032      	strb	r2, [r6, #0]
    3b90:	e029      	b.n	3be6 <_printf_i+0x8a>
    3b92:	2a64      	cmp	r2, #100	; 0x64
    3b94:	d001      	beq.n	3b9a <_printf_i+0x3e>
    3b96:	2a69      	cmp	r2, #105	; 0x69
    3b98:	d1f7      	bne.n	3b8a <_printf_i+0x2e>
    3b9a:	6821      	ldr	r1, [r4, #0]
    3b9c:	681a      	ldr	r2, [r3, #0]
    3b9e:	0608      	lsls	r0, r1, #24
    3ba0:	d523      	bpl.n	3bea <_printf_i+0x8e>
    3ba2:	1d11      	adds	r1, r2, #4
    3ba4:	6019      	str	r1, [r3, #0]
    3ba6:	6815      	ldr	r5, [r2, #0]
    3ba8:	e025      	b.n	3bf6 <_printf_i+0x9a>
    3baa:	2a73      	cmp	r2, #115	; 0x73
    3bac:	d100      	bne.n	3bb0 <_printf_i+0x54>
    3bae:	e088      	b.n	3cc2 <_printf_i+0x166>
    3bb0:	d808      	bhi.n	3bc4 <_printf_i+0x68>
    3bb2:	2a6f      	cmp	r2, #111	; 0x6f
    3bb4:	d029      	beq.n	3c0a <_printf_i+0xae>
    3bb6:	2a70      	cmp	r2, #112	; 0x70
    3bb8:	d1e7      	bne.n	3b8a <_printf_i+0x2e>
    3bba:	2220      	movs	r2, #32
    3bbc:	6809      	ldr	r1, [r1, #0]
    3bbe:	430a      	orrs	r2, r1
    3bc0:	6022      	str	r2, [r4, #0]
    3bc2:	e003      	b.n	3bcc <_printf_i+0x70>
    3bc4:	2a75      	cmp	r2, #117	; 0x75
    3bc6:	d020      	beq.n	3c0a <_printf_i+0xae>
    3bc8:	2a78      	cmp	r2, #120	; 0x78
    3bca:	d1de      	bne.n	3b8a <_printf_i+0x2e>
    3bcc:	0022      	movs	r2, r4
    3bce:	2178      	movs	r1, #120	; 0x78
    3bd0:	3245      	adds	r2, #69	; 0x45
    3bd2:	7011      	strb	r1, [r2, #0]
    3bd4:	4a6c      	ldr	r2, [pc, #432]	; (3d88 <_printf_i+0x22c>)
    3bd6:	e030      	b.n	3c3a <_printf_i+0xde>
    3bd8:	000e      	movs	r6, r1
    3bda:	681a      	ldr	r2, [r3, #0]
    3bdc:	3642      	adds	r6, #66	; 0x42
    3bde:	1d11      	adds	r1, r2, #4
    3be0:	6019      	str	r1, [r3, #0]
    3be2:	6813      	ldr	r3, [r2, #0]
    3be4:	7033      	strb	r3, [r6, #0]
    3be6:	2301      	movs	r3, #1
    3be8:	e079      	b.n	3cde <_printf_i+0x182>
    3bea:	0649      	lsls	r1, r1, #25
    3bec:	d5d9      	bpl.n	3ba2 <_printf_i+0x46>
    3bee:	1d11      	adds	r1, r2, #4
    3bf0:	6019      	str	r1, [r3, #0]
    3bf2:	2300      	movs	r3, #0
    3bf4:	5ed5      	ldrsh	r5, [r2, r3]
    3bf6:	2d00      	cmp	r5, #0
    3bf8:	da03      	bge.n	3c02 <_printf_i+0xa6>
    3bfa:	232d      	movs	r3, #45	; 0x2d
    3bfc:	9a04      	ldr	r2, [sp, #16]
    3bfe:	426d      	negs	r5, r5
    3c00:	7013      	strb	r3, [r2, #0]
    3c02:	4b62      	ldr	r3, [pc, #392]	; (3d8c <_printf_i+0x230>)
    3c04:	270a      	movs	r7, #10
    3c06:	9303      	str	r3, [sp, #12]
    3c08:	e02f      	b.n	3c6a <_printf_i+0x10e>
    3c0a:	6820      	ldr	r0, [r4, #0]
    3c0c:	6819      	ldr	r1, [r3, #0]
    3c0e:	0605      	lsls	r5, r0, #24
    3c10:	d503      	bpl.n	3c1a <_printf_i+0xbe>
    3c12:	1d08      	adds	r0, r1, #4
    3c14:	6018      	str	r0, [r3, #0]
    3c16:	680d      	ldr	r5, [r1, #0]
    3c18:	e005      	b.n	3c26 <_printf_i+0xca>
    3c1a:	0640      	lsls	r0, r0, #25
    3c1c:	d5f9      	bpl.n	3c12 <_printf_i+0xb6>
    3c1e:	680d      	ldr	r5, [r1, #0]
    3c20:	1d08      	adds	r0, r1, #4
    3c22:	6018      	str	r0, [r3, #0]
    3c24:	b2ad      	uxth	r5, r5
    3c26:	4b59      	ldr	r3, [pc, #356]	; (3d8c <_printf_i+0x230>)
    3c28:	2708      	movs	r7, #8
    3c2a:	9303      	str	r3, [sp, #12]
    3c2c:	2a6f      	cmp	r2, #111	; 0x6f
    3c2e:	d018      	beq.n	3c62 <_printf_i+0x106>
    3c30:	270a      	movs	r7, #10
    3c32:	e016      	b.n	3c62 <_printf_i+0x106>
    3c34:	3145      	adds	r1, #69	; 0x45
    3c36:	700a      	strb	r2, [r1, #0]
    3c38:	4a54      	ldr	r2, [pc, #336]	; (3d8c <_printf_i+0x230>)
    3c3a:	9203      	str	r2, [sp, #12]
    3c3c:	681a      	ldr	r2, [r3, #0]
    3c3e:	6821      	ldr	r1, [r4, #0]
    3c40:	1d10      	adds	r0, r2, #4
    3c42:	6018      	str	r0, [r3, #0]
    3c44:	6815      	ldr	r5, [r2, #0]
    3c46:	0608      	lsls	r0, r1, #24
    3c48:	d522      	bpl.n	3c90 <_printf_i+0x134>
    3c4a:	07cb      	lsls	r3, r1, #31
    3c4c:	d502      	bpl.n	3c54 <_printf_i+0xf8>
    3c4e:	2320      	movs	r3, #32
    3c50:	4319      	orrs	r1, r3
    3c52:	6021      	str	r1, [r4, #0]
    3c54:	2710      	movs	r7, #16
    3c56:	2d00      	cmp	r5, #0
    3c58:	d103      	bne.n	3c62 <_printf_i+0x106>
    3c5a:	2320      	movs	r3, #32
    3c5c:	6822      	ldr	r2, [r4, #0]
    3c5e:	439a      	bics	r2, r3
    3c60:	6022      	str	r2, [r4, #0]
    3c62:	0023      	movs	r3, r4
    3c64:	2200      	movs	r2, #0
    3c66:	3343      	adds	r3, #67	; 0x43
    3c68:	701a      	strb	r2, [r3, #0]
    3c6a:	6863      	ldr	r3, [r4, #4]
    3c6c:	60a3      	str	r3, [r4, #8]
    3c6e:	2b00      	cmp	r3, #0
    3c70:	db5c      	blt.n	3d2c <_printf_i+0x1d0>
    3c72:	2204      	movs	r2, #4
    3c74:	6821      	ldr	r1, [r4, #0]
    3c76:	4391      	bics	r1, r2
    3c78:	6021      	str	r1, [r4, #0]
    3c7a:	2d00      	cmp	r5, #0
    3c7c:	d158      	bne.n	3d30 <_printf_i+0x1d4>
    3c7e:	9e04      	ldr	r6, [sp, #16]
    3c80:	2b00      	cmp	r3, #0
    3c82:	d064      	beq.n	3d4e <_printf_i+0x1f2>
    3c84:	0026      	movs	r6, r4
    3c86:	9b03      	ldr	r3, [sp, #12]
    3c88:	3642      	adds	r6, #66	; 0x42
    3c8a:	781b      	ldrb	r3, [r3, #0]
    3c8c:	7033      	strb	r3, [r6, #0]
    3c8e:	e05e      	b.n	3d4e <_printf_i+0x1f2>
    3c90:	0648      	lsls	r0, r1, #25
    3c92:	d5da      	bpl.n	3c4a <_printf_i+0xee>
    3c94:	b2ad      	uxth	r5, r5
    3c96:	e7d8      	b.n	3c4a <_printf_i+0xee>
    3c98:	6809      	ldr	r1, [r1, #0]
    3c9a:	681a      	ldr	r2, [r3, #0]
    3c9c:	0608      	lsls	r0, r1, #24
    3c9e:	d505      	bpl.n	3cac <_printf_i+0x150>
    3ca0:	1d11      	adds	r1, r2, #4
    3ca2:	6019      	str	r1, [r3, #0]
    3ca4:	6813      	ldr	r3, [r2, #0]
    3ca6:	6962      	ldr	r2, [r4, #20]
    3ca8:	601a      	str	r2, [r3, #0]
    3caa:	e006      	b.n	3cba <_printf_i+0x15e>
    3cac:	0649      	lsls	r1, r1, #25
    3cae:	d5f7      	bpl.n	3ca0 <_printf_i+0x144>
    3cb0:	1d11      	adds	r1, r2, #4
    3cb2:	6019      	str	r1, [r3, #0]
    3cb4:	6813      	ldr	r3, [r2, #0]
    3cb6:	8aa2      	ldrh	r2, [r4, #20]
    3cb8:	801a      	strh	r2, [r3, #0]
    3cba:	2300      	movs	r3, #0
    3cbc:	9e04      	ldr	r6, [sp, #16]
    3cbe:	6123      	str	r3, [r4, #16]
    3cc0:	e054      	b.n	3d6c <_printf_i+0x210>
    3cc2:	681a      	ldr	r2, [r3, #0]
    3cc4:	1d11      	adds	r1, r2, #4
    3cc6:	6019      	str	r1, [r3, #0]
    3cc8:	6816      	ldr	r6, [r2, #0]
    3cca:	2100      	movs	r1, #0
    3ccc:	6862      	ldr	r2, [r4, #4]
    3cce:	0030      	movs	r0, r6
    3cd0:	f001 fae2 	bl	5298 <memchr>
    3cd4:	2800      	cmp	r0, #0
    3cd6:	d001      	beq.n	3cdc <_printf_i+0x180>
    3cd8:	1b80      	subs	r0, r0, r6
    3cda:	6060      	str	r0, [r4, #4]
    3cdc:	6863      	ldr	r3, [r4, #4]
    3cde:	6123      	str	r3, [r4, #16]
    3ce0:	2300      	movs	r3, #0
    3ce2:	9a04      	ldr	r2, [sp, #16]
    3ce4:	7013      	strb	r3, [r2, #0]
    3ce6:	e041      	b.n	3d6c <_printf_i+0x210>
    3ce8:	6923      	ldr	r3, [r4, #16]
    3cea:	0032      	movs	r2, r6
    3cec:	9906      	ldr	r1, [sp, #24]
    3cee:	9805      	ldr	r0, [sp, #20]
    3cf0:	9d07      	ldr	r5, [sp, #28]
    3cf2:	47a8      	blx	r5
    3cf4:	1c43      	adds	r3, r0, #1
    3cf6:	d043      	beq.n	3d80 <_printf_i+0x224>
    3cf8:	6823      	ldr	r3, [r4, #0]
    3cfa:	2500      	movs	r5, #0
    3cfc:	079b      	lsls	r3, r3, #30
    3cfe:	d40f      	bmi.n	3d20 <_printf_i+0x1c4>
    3d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3d02:	68e0      	ldr	r0, [r4, #12]
    3d04:	4298      	cmp	r0, r3
    3d06:	da3d      	bge.n	3d84 <_printf_i+0x228>
    3d08:	0018      	movs	r0, r3
    3d0a:	e03b      	b.n	3d84 <_printf_i+0x228>
    3d0c:	0022      	movs	r2, r4
    3d0e:	2301      	movs	r3, #1
    3d10:	3219      	adds	r2, #25
    3d12:	9906      	ldr	r1, [sp, #24]
    3d14:	9805      	ldr	r0, [sp, #20]
    3d16:	9e07      	ldr	r6, [sp, #28]
    3d18:	47b0      	blx	r6
    3d1a:	1c43      	adds	r3, r0, #1
    3d1c:	d030      	beq.n	3d80 <_printf_i+0x224>
    3d1e:	3501      	adds	r5, #1
    3d20:	68e3      	ldr	r3, [r4, #12]
    3d22:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3d24:	1a9b      	subs	r3, r3, r2
    3d26:	429d      	cmp	r5, r3
    3d28:	dbf0      	blt.n	3d0c <_printf_i+0x1b0>
    3d2a:	e7e9      	b.n	3d00 <_printf_i+0x1a4>
    3d2c:	2d00      	cmp	r5, #0
    3d2e:	d0a9      	beq.n	3c84 <_printf_i+0x128>
    3d30:	9e04      	ldr	r6, [sp, #16]
    3d32:	0028      	movs	r0, r5
    3d34:	0039      	movs	r1, r7
    3d36:	f002 f917 	bl	5f68 <__aeabi_uidivmod>
    3d3a:	9b03      	ldr	r3, [sp, #12]
    3d3c:	3e01      	subs	r6, #1
    3d3e:	5c5b      	ldrb	r3, [r3, r1]
    3d40:	0028      	movs	r0, r5
    3d42:	7033      	strb	r3, [r6, #0]
    3d44:	0039      	movs	r1, r7
    3d46:	f002 f889 	bl	5e5c <__udivsi3>
    3d4a:	1e05      	subs	r5, r0, #0
    3d4c:	d1f1      	bne.n	3d32 <_printf_i+0x1d6>
    3d4e:	2f08      	cmp	r7, #8
    3d50:	d109      	bne.n	3d66 <_printf_i+0x20a>
    3d52:	6823      	ldr	r3, [r4, #0]
    3d54:	07db      	lsls	r3, r3, #31
    3d56:	d506      	bpl.n	3d66 <_printf_i+0x20a>
    3d58:	6863      	ldr	r3, [r4, #4]
    3d5a:	6922      	ldr	r2, [r4, #16]
    3d5c:	4293      	cmp	r3, r2
    3d5e:	dc02      	bgt.n	3d66 <_printf_i+0x20a>
    3d60:	2330      	movs	r3, #48	; 0x30
    3d62:	3e01      	subs	r6, #1
    3d64:	7033      	strb	r3, [r6, #0]
    3d66:	9b04      	ldr	r3, [sp, #16]
    3d68:	1b9b      	subs	r3, r3, r6
    3d6a:	6123      	str	r3, [r4, #16]
    3d6c:	9b07      	ldr	r3, [sp, #28]
    3d6e:	aa09      	add	r2, sp, #36	; 0x24
    3d70:	9300      	str	r3, [sp, #0]
    3d72:	0021      	movs	r1, r4
    3d74:	9b06      	ldr	r3, [sp, #24]
    3d76:	9805      	ldr	r0, [sp, #20]
    3d78:	f7ff fe82 	bl	3a80 <_printf_common>
    3d7c:	1c43      	adds	r3, r0, #1
    3d7e:	d1b3      	bne.n	3ce8 <_printf_i+0x18c>
    3d80:	2001      	movs	r0, #1
    3d82:	4240      	negs	r0, r0
    3d84:	b00b      	add	sp, #44	; 0x2c
    3d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d88:	00008eef 	.word	0x00008eef
    3d8c:	00008ede 	.word	0x00008ede

00003d90 <iprintf>:
    3d90:	b40f      	push	{r0, r1, r2, r3}
    3d92:	4b0b      	ldr	r3, [pc, #44]	; (3dc0 <iprintf+0x30>)
    3d94:	b513      	push	{r0, r1, r4, lr}
    3d96:	681c      	ldr	r4, [r3, #0]
    3d98:	2c00      	cmp	r4, #0
    3d9a:	d005      	beq.n	3da8 <iprintf+0x18>
    3d9c:	69a3      	ldr	r3, [r4, #24]
    3d9e:	2b00      	cmp	r3, #0
    3da0:	d102      	bne.n	3da8 <iprintf+0x18>
    3da2:	0020      	movs	r0, r4
    3da4:	f001 f966 	bl	5074 <__sinit>
    3da8:	ab05      	add	r3, sp, #20
    3daa:	9a04      	ldr	r2, [sp, #16]
    3dac:	68a1      	ldr	r1, [r4, #8]
    3dae:	0020      	movs	r0, r4
    3db0:	9301      	str	r3, [sp, #4]
    3db2:	f001 fe3d 	bl	5a30 <_vfiprintf_r>
    3db6:	bc16      	pop	{r1, r2, r4}
    3db8:	bc08      	pop	{r3}
    3dba:	b004      	add	sp, #16
    3dbc:	4718      	bx	r3
    3dbe:	46c0      	nop			; (mov r8, r8)
    3dc0:	2000000c 	.word	0x2000000c

00003dc4 <_puts_r>:
    3dc4:	b570      	push	{r4, r5, r6, lr}
    3dc6:	0005      	movs	r5, r0
    3dc8:	000e      	movs	r6, r1
    3dca:	2800      	cmp	r0, #0
    3dcc:	d004      	beq.n	3dd8 <_puts_r+0x14>
    3dce:	6983      	ldr	r3, [r0, #24]
    3dd0:	2b00      	cmp	r3, #0
    3dd2:	d101      	bne.n	3dd8 <_puts_r+0x14>
    3dd4:	f001 f94e 	bl	5074 <__sinit>
    3dd8:	69ab      	ldr	r3, [r5, #24]
    3dda:	68ac      	ldr	r4, [r5, #8]
    3ddc:	2b00      	cmp	r3, #0
    3dde:	d102      	bne.n	3de6 <_puts_r+0x22>
    3de0:	0028      	movs	r0, r5
    3de2:	f001 f947 	bl	5074 <__sinit>
    3de6:	4b24      	ldr	r3, [pc, #144]	; (3e78 <_puts_r+0xb4>)
    3de8:	429c      	cmp	r4, r3
    3dea:	d10f      	bne.n	3e0c <_puts_r+0x48>
    3dec:	686c      	ldr	r4, [r5, #4]
    3dee:	89a3      	ldrh	r3, [r4, #12]
    3df0:	071b      	lsls	r3, r3, #28
    3df2:	d502      	bpl.n	3dfa <_puts_r+0x36>
    3df4:	6923      	ldr	r3, [r4, #16]
    3df6:	2b00      	cmp	r3, #0
    3df8:	d120      	bne.n	3e3c <_puts_r+0x78>
    3dfa:	0021      	movs	r1, r4
    3dfc:	0028      	movs	r0, r5
    3dfe:	f000 f95f 	bl	40c0 <__swsetup_r>
    3e02:	2800      	cmp	r0, #0
    3e04:	d01a      	beq.n	3e3c <_puts_r+0x78>
    3e06:	2001      	movs	r0, #1
    3e08:	4240      	negs	r0, r0
    3e0a:	bd70      	pop	{r4, r5, r6, pc}
    3e0c:	4b1b      	ldr	r3, [pc, #108]	; (3e7c <_puts_r+0xb8>)
    3e0e:	429c      	cmp	r4, r3
    3e10:	d101      	bne.n	3e16 <_puts_r+0x52>
    3e12:	68ac      	ldr	r4, [r5, #8]
    3e14:	e7eb      	b.n	3dee <_puts_r+0x2a>
    3e16:	4b1a      	ldr	r3, [pc, #104]	; (3e80 <_puts_r+0xbc>)
    3e18:	429c      	cmp	r4, r3
    3e1a:	d1e8      	bne.n	3dee <_puts_r+0x2a>
    3e1c:	68ec      	ldr	r4, [r5, #12]
    3e1e:	e7e6      	b.n	3dee <_puts_r+0x2a>
    3e20:	3b01      	subs	r3, #1
    3e22:	3601      	adds	r6, #1
    3e24:	60a3      	str	r3, [r4, #8]
    3e26:	2b00      	cmp	r3, #0
    3e28:	da04      	bge.n	3e34 <_puts_r+0x70>
    3e2a:	69a2      	ldr	r2, [r4, #24]
    3e2c:	4293      	cmp	r3, r2
    3e2e:	db16      	blt.n	3e5e <_puts_r+0x9a>
    3e30:	290a      	cmp	r1, #10
    3e32:	d014      	beq.n	3e5e <_puts_r+0x9a>
    3e34:	6823      	ldr	r3, [r4, #0]
    3e36:	1c5a      	adds	r2, r3, #1
    3e38:	6022      	str	r2, [r4, #0]
    3e3a:	7019      	strb	r1, [r3, #0]
    3e3c:	7831      	ldrb	r1, [r6, #0]
    3e3e:	68a3      	ldr	r3, [r4, #8]
    3e40:	2900      	cmp	r1, #0
    3e42:	d1ed      	bne.n	3e20 <_puts_r+0x5c>
    3e44:	3b01      	subs	r3, #1
    3e46:	60a3      	str	r3, [r4, #8]
    3e48:	2b00      	cmp	r3, #0
    3e4a:	da0f      	bge.n	3e6c <_puts_r+0xa8>
    3e4c:	0022      	movs	r2, r4
    3e4e:	310a      	adds	r1, #10
    3e50:	0028      	movs	r0, r5
    3e52:	f000 f8df 	bl	4014 <__swbuf_r>
    3e56:	1c43      	adds	r3, r0, #1
    3e58:	d0d5      	beq.n	3e06 <_puts_r+0x42>
    3e5a:	200a      	movs	r0, #10
    3e5c:	e7d5      	b.n	3e0a <_puts_r+0x46>
    3e5e:	0022      	movs	r2, r4
    3e60:	0028      	movs	r0, r5
    3e62:	f000 f8d7 	bl	4014 <__swbuf_r>
    3e66:	1c43      	adds	r3, r0, #1
    3e68:	d1e8      	bne.n	3e3c <_puts_r+0x78>
    3e6a:	e7cc      	b.n	3e06 <_puts_r+0x42>
    3e6c:	200a      	movs	r0, #10
    3e6e:	6823      	ldr	r3, [r4, #0]
    3e70:	1c5a      	adds	r2, r3, #1
    3e72:	6022      	str	r2, [r4, #0]
    3e74:	7018      	strb	r0, [r3, #0]
    3e76:	e7c8      	b.n	3e0a <_puts_r+0x46>
    3e78:	00008f30 	.word	0x00008f30
    3e7c:	00008f50 	.word	0x00008f50
    3e80:	00008f10 	.word	0x00008f10

00003e84 <puts>:
    3e84:	b510      	push	{r4, lr}
    3e86:	4b03      	ldr	r3, [pc, #12]	; (3e94 <puts+0x10>)
    3e88:	0001      	movs	r1, r0
    3e8a:	6818      	ldr	r0, [r3, #0]
    3e8c:	f7ff ff9a 	bl	3dc4 <_puts_r>
    3e90:	bd10      	pop	{r4, pc}
    3e92:	46c0      	nop			; (mov r8, r8)
    3e94:	2000000c 	.word	0x2000000c

00003e98 <setbuf>:
    3e98:	424a      	negs	r2, r1
    3e9a:	414a      	adcs	r2, r1
    3e9c:	2380      	movs	r3, #128	; 0x80
    3e9e:	b510      	push	{r4, lr}
    3ea0:	0052      	lsls	r2, r2, #1
    3ea2:	00db      	lsls	r3, r3, #3
    3ea4:	f000 f802 	bl	3eac <setvbuf>
    3ea8:	bd10      	pop	{r4, pc}
	...

00003eac <setvbuf>:
    3eac:	b5f0      	push	{r4, r5, r6, r7, lr}
    3eae:	001d      	movs	r5, r3
    3eb0:	4b4f      	ldr	r3, [pc, #316]	; (3ff0 <setvbuf+0x144>)
    3eb2:	b085      	sub	sp, #20
    3eb4:	681e      	ldr	r6, [r3, #0]
    3eb6:	0004      	movs	r4, r0
    3eb8:	000f      	movs	r7, r1
    3eba:	9200      	str	r2, [sp, #0]
    3ebc:	2e00      	cmp	r6, #0
    3ebe:	d005      	beq.n	3ecc <setvbuf+0x20>
    3ec0:	69b3      	ldr	r3, [r6, #24]
    3ec2:	2b00      	cmp	r3, #0
    3ec4:	d102      	bne.n	3ecc <setvbuf+0x20>
    3ec6:	0030      	movs	r0, r6
    3ec8:	f001 f8d4 	bl	5074 <__sinit>
    3ecc:	4b49      	ldr	r3, [pc, #292]	; (3ff4 <setvbuf+0x148>)
    3ece:	429c      	cmp	r4, r3
    3ed0:	d150      	bne.n	3f74 <setvbuf+0xc8>
    3ed2:	6874      	ldr	r4, [r6, #4]
    3ed4:	9b00      	ldr	r3, [sp, #0]
    3ed6:	2b02      	cmp	r3, #2
    3ed8:	d005      	beq.n	3ee6 <setvbuf+0x3a>
    3eda:	2b01      	cmp	r3, #1
    3edc:	d900      	bls.n	3ee0 <setvbuf+0x34>
    3ede:	e084      	b.n	3fea <setvbuf+0x13e>
    3ee0:	2d00      	cmp	r5, #0
    3ee2:	da00      	bge.n	3ee6 <setvbuf+0x3a>
    3ee4:	e081      	b.n	3fea <setvbuf+0x13e>
    3ee6:	0021      	movs	r1, r4
    3ee8:	0030      	movs	r0, r6
    3eea:	f001 f855 	bl	4f98 <_fflush_r>
    3eee:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3ef0:	2900      	cmp	r1, #0
    3ef2:	d008      	beq.n	3f06 <setvbuf+0x5a>
    3ef4:	0023      	movs	r3, r4
    3ef6:	3344      	adds	r3, #68	; 0x44
    3ef8:	4299      	cmp	r1, r3
    3efa:	d002      	beq.n	3f02 <setvbuf+0x56>
    3efc:	0030      	movs	r0, r6
    3efe:	f001 fcc7 	bl	5890 <_free_r>
    3f02:	2300      	movs	r3, #0
    3f04:	6363      	str	r3, [r4, #52]	; 0x34
    3f06:	2300      	movs	r3, #0
    3f08:	61a3      	str	r3, [r4, #24]
    3f0a:	6063      	str	r3, [r4, #4]
    3f0c:	89a3      	ldrh	r3, [r4, #12]
    3f0e:	061b      	lsls	r3, r3, #24
    3f10:	d503      	bpl.n	3f1a <setvbuf+0x6e>
    3f12:	6921      	ldr	r1, [r4, #16]
    3f14:	0030      	movs	r0, r6
    3f16:	f001 fcbb 	bl	5890 <_free_r>
    3f1a:	89a3      	ldrh	r3, [r4, #12]
    3f1c:	4a36      	ldr	r2, [pc, #216]	; (3ff8 <setvbuf+0x14c>)
    3f1e:	4013      	ands	r3, r2
    3f20:	81a3      	strh	r3, [r4, #12]
    3f22:	9b00      	ldr	r3, [sp, #0]
    3f24:	2b02      	cmp	r3, #2
    3f26:	d05a      	beq.n	3fde <setvbuf+0x132>
    3f28:	ab03      	add	r3, sp, #12
    3f2a:	aa02      	add	r2, sp, #8
    3f2c:	0021      	movs	r1, r4
    3f2e:	0030      	movs	r0, r6
    3f30:	f001 f942 	bl	51b8 <__swhatbuf_r>
    3f34:	89a3      	ldrh	r3, [r4, #12]
    3f36:	4318      	orrs	r0, r3
    3f38:	81a0      	strh	r0, [r4, #12]
    3f3a:	2d00      	cmp	r5, #0
    3f3c:	d124      	bne.n	3f88 <setvbuf+0xdc>
    3f3e:	9d02      	ldr	r5, [sp, #8]
    3f40:	0028      	movs	r0, r5
    3f42:	f001 f99f 	bl	5284 <malloc>
    3f46:	9501      	str	r5, [sp, #4]
    3f48:	1e07      	subs	r7, r0, #0
    3f4a:	d142      	bne.n	3fd2 <setvbuf+0x126>
    3f4c:	9b02      	ldr	r3, [sp, #8]
    3f4e:	9301      	str	r3, [sp, #4]
    3f50:	42ab      	cmp	r3, r5
    3f52:	d139      	bne.n	3fc8 <setvbuf+0x11c>
    3f54:	2001      	movs	r0, #1
    3f56:	4240      	negs	r0, r0
    3f58:	2302      	movs	r3, #2
    3f5a:	89a2      	ldrh	r2, [r4, #12]
    3f5c:	4313      	orrs	r3, r2
    3f5e:	81a3      	strh	r3, [r4, #12]
    3f60:	2300      	movs	r3, #0
    3f62:	60a3      	str	r3, [r4, #8]
    3f64:	0023      	movs	r3, r4
    3f66:	3347      	adds	r3, #71	; 0x47
    3f68:	6023      	str	r3, [r4, #0]
    3f6a:	6123      	str	r3, [r4, #16]
    3f6c:	2301      	movs	r3, #1
    3f6e:	6163      	str	r3, [r4, #20]
    3f70:	b005      	add	sp, #20
    3f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f74:	4b21      	ldr	r3, [pc, #132]	; (3ffc <setvbuf+0x150>)
    3f76:	429c      	cmp	r4, r3
    3f78:	d101      	bne.n	3f7e <setvbuf+0xd2>
    3f7a:	68b4      	ldr	r4, [r6, #8]
    3f7c:	e7aa      	b.n	3ed4 <setvbuf+0x28>
    3f7e:	4b20      	ldr	r3, [pc, #128]	; (4000 <setvbuf+0x154>)
    3f80:	429c      	cmp	r4, r3
    3f82:	d1a7      	bne.n	3ed4 <setvbuf+0x28>
    3f84:	68f4      	ldr	r4, [r6, #12]
    3f86:	e7a5      	b.n	3ed4 <setvbuf+0x28>
    3f88:	2f00      	cmp	r7, #0
    3f8a:	d0d9      	beq.n	3f40 <setvbuf+0x94>
    3f8c:	69b3      	ldr	r3, [r6, #24]
    3f8e:	2b00      	cmp	r3, #0
    3f90:	d102      	bne.n	3f98 <setvbuf+0xec>
    3f92:	0030      	movs	r0, r6
    3f94:	f001 f86e 	bl	5074 <__sinit>
    3f98:	9b00      	ldr	r3, [sp, #0]
    3f9a:	2b01      	cmp	r3, #1
    3f9c:	d103      	bne.n	3fa6 <setvbuf+0xfa>
    3f9e:	89a3      	ldrh	r3, [r4, #12]
    3fa0:	9a00      	ldr	r2, [sp, #0]
    3fa2:	431a      	orrs	r2, r3
    3fa4:	81a2      	strh	r2, [r4, #12]
    3fa6:	2008      	movs	r0, #8
    3fa8:	89a3      	ldrh	r3, [r4, #12]
    3faa:	6027      	str	r7, [r4, #0]
    3fac:	6127      	str	r7, [r4, #16]
    3fae:	6165      	str	r5, [r4, #20]
    3fb0:	4018      	ands	r0, r3
    3fb2:	d018      	beq.n	3fe6 <setvbuf+0x13a>
    3fb4:	2001      	movs	r0, #1
    3fb6:	4018      	ands	r0, r3
    3fb8:	2300      	movs	r3, #0
    3fba:	4298      	cmp	r0, r3
    3fbc:	d011      	beq.n	3fe2 <setvbuf+0x136>
    3fbe:	426d      	negs	r5, r5
    3fc0:	60a3      	str	r3, [r4, #8]
    3fc2:	61a5      	str	r5, [r4, #24]
    3fc4:	0018      	movs	r0, r3
    3fc6:	e7d3      	b.n	3f70 <setvbuf+0xc4>
    3fc8:	9801      	ldr	r0, [sp, #4]
    3fca:	f001 f95b 	bl	5284 <malloc>
    3fce:	1e07      	subs	r7, r0, #0
    3fd0:	d0c0      	beq.n	3f54 <setvbuf+0xa8>
    3fd2:	2380      	movs	r3, #128	; 0x80
    3fd4:	89a2      	ldrh	r2, [r4, #12]
    3fd6:	9d01      	ldr	r5, [sp, #4]
    3fd8:	4313      	orrs	r3, r2
    3fda:	81a3      	strh	r3, [r4, #12]
    3fdc:	e7d6      	b.n	3f8c <setvbuf+0xe0>
    3fde:	2000      	movs	r0, #0
    3fe0:	e7ba      	b.n	3f58 <setvbuf+0xac>
    3fe2:	60a5      	str	r5, [r4, #8]
    3fe4:	e7c4      	b.n	3f70 <setvbuf+0xc4>
    3fe6:	60a0      	str	r0, [r4, #8]
    3fe8:	e7c2      	b.n	3f70 <setvbuf+0xc4>
    3fea:	2001      	movs	r0, #1
    3fec:	4240      	negs	r0, r0
    3fee:	e7bf      	b.n	3f70 <setvbuf+0xc4>
    3ff0:	2000000c 	.word	0x2000000c
    3ff4:	00008f30 	.word	0x00008f30
    3ff8:	fffff35c 	.word	0xfffff35c
    3ffc:	00008f50 	.word	0x00008f50
    4000:	00008f10 	.word	0x00008f10

00004004 <strlen>:
    4004:	2300      	movs	r3, #0
    4006:	5cc2      	ldrb	r2, [r0, r3]
    4008:	3301      	adds	r3, #1
    400a:	2a00      	cmp	r2, #0
    400c:	d1fb      	bne.n	4006 <strlen+0x2>
    400e:	1e58      	subs	r0, r3, #1
    4010:	4770      	bx	lr
	...

00004014 <__swbuf_r>:
    4014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4016:	0005      	movs	r5, r0
    4018:	000e      	movs	r6, r1
    401a:	0014      	movs	r4, r2
    401c:	2800      	cmp	r0, #0
    401e:	d004      	beq.n	402a <__swbuf_r+0x16>
    4020:	6983      	ldr	r3, [r0, #24]
    4022:	2b00      	cmp	r3, #0
    4024:	d101      	bne.n	402a <__swbuf_r+0x16>
    4026:	f001 f825 	bl	5074 <__sinit>
    402a:	4b22      	ldr	r3, [pc, #136]	; (40b4 <__swbuf_r+0xa0>)
    402c:	429c      	cmp	r4, r3
    402e:	d12d      	bne.n	408c <__swbuf_r+0x78>
    4030:	686c      	ldr	r4, [r5, #4]
    4032:	69a3      	ldr	r3, [r4, #24]
    4034:	60a3      	str	r3, [r4, #8]
    4036:	89a3      	ldrh	r3, [r4, #12]
    4038:	071b      	lsls	r3, r3, #28
    403a:	d531      	bpl.n	40a0 <__swbuf_r+0x8c>
    403c:	6923      	ldr	r3, [r4, #16]
    403e:	2b00      	cmp	r3, #0
    4040:	d02e      	beq.n	40a0 <__swbuf_r+0x8c>
    4042:	6823      	ldr	r3, [r4, #0]
    4044:	6922      	ldr	r2, [r4, #16]
    4046:	b2f7      	uxtb	r7, r6
    4048:	1a98      	subs	r0, r3, r2
    404a:	6963      	ldr	r3, [r4, #20]
    404c:	b2f6      	uxtb	r6, r6
    404e:	4298      	cmp	r0, r3
    4050:	db05      	blt.n	405e <__swbuf_r+0x4a>
    4052:	0021      	movs	r1, r4
    4054:	0028      	movs	r0, r5
    4056:	f000 ff9f 	bl	4f98 <_fflush_r>
    405a:	2800      	cmp	r0, #0
    405c:	d126      	bne.n	40ac <__swbuf_r+0x98>
    405e:	68a3      	ldr	r3, [r4, #8]
    4060:	3001      	adds	r0, #1
    4062:	3b01      	subs	r3, #1
    4064:	60a3      	str	r3, [r4, #8]
    4066:	6823      	ldr	r3, [r4, #0]
    4068:	1c5a      	adds	r2, r3, #1
    406a:	6022      	str	r2, [r4, #0]
    406c:	701f      	strb	r7, [r3, #0]
    406e:	6963      	ldr	r3, [r4, #20]
    4070:	4298      	cmp	r0, r3
    4072:	d004      	beq.n	407e <__swbuf_r+0x6a>
    4074:	89a3      	ldrh	r3, [r4, #12]
    4076:	07db      	lsls	r3, r3, #31
    4078:	d51a      	bpl.n	40b0 <__swbuf_r+0x9c>
    407a:	2e0a      	cmp	r6, #10
    407c:	d118      	bne.n	40b0 <__swbuf_r+0x9c>
    407e:	0021      	movs	r1, r4
    4080:	0028      	movs	r0, r5
    4082:	f000 ff89 	bl	4f98 <_fflush_r>
    4086:	2800      	cmp	r0, #0
    4088:	d012      	beq.n	40b0 <__swbuf_r+0x9c>
    408a:	e00f      	b.n	40ac <__swbuf_r+0x98>
    408c:	4b0a      	ldr	r3, [pc, #40]	; (40b8 <__swbuf_r+0xa4>)
    408e:	429c      	cmp	r4, r3
    4090:	d101      	bne.n	4096 <__swbuf_r+0x82>
    4092:	68ac      	ldr	r4, [r5, #8]
    4094:	e7cd      	b.n	4032 <__swbuf_r+0x1e>
    4096:	4b09      	ldr	r3, [pc, #36]	; (40bc <__swbuf_r+0xa8>)
    4098:	429c      	cmp	r4, r3
    409a:	d1ca      	bne.n	4032 <__swbuf_r+0x1e>
    409c:	68ec      	ldr	r4, [r5, #12]
    409e:	e7c8      	b.n	4032 <__swbuf_r+0x1e>
    40a0:	0021      	movs	r1, r4
    40a2:	0028      	movs	r0, r5
    40a4:	f000 f80c 	bl	40c0 <__swsetup_r>
    40a8:	2800      	cmp	r0, #0
    40aa:	d0ca      	beq.n	4042 <__swbuf_r+0x2e>
    40ac:	2601      	movs	r6, #1
    40ae:	4276      	negs	r6, r6
    40b0:	0030      	movs	r0, r6
    40b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40b4:	00008f30 	.word	0x00008f30
    40b8:	00008f50 	.word	0x00008f50
    40bc:	00008f10 	.word	0x00008f10

000040c0 <__swsetup_r>:
    40c0:	4b36      	ldr	r3, [pc, #216]	; (419c <__swsetup_r+0xdc>)
    40c2:	b570      	push	{r4, r5, r6, lr}
    40c4:	681d      	ldr	r5, [r3, #0]
    40c6:	0006      	movs	r6, r0
    40c8:	000c      	movs	r4, r1
    40ca:	2d00      	cmp	r5, #0
    40cc:	d005      	beq.n	40da <__swsetup_r+0x1a>
    40ce:	69ab      	ldr	r3, [r5, #24]
    40d0:	2b00      	cmp	r3, #0
    40d2:	d102      	bne.n	40da <__swsetup_r+0x1a>
    40d4:	0028      	movs	r0, r5
    40d6:	f000 ffcd 	bl	5074 <__sinit>
    40da:	4b31      	ldr	r3, [pc, #196]	; (41a0 <__swsetup_r+0xe0>)
    40dc:	429c      	cmp	r4, r3
    40de:	d10f      	bne.n	4100 <__swsetup_r+0x40>
    40e0:	686c      	ldr	r4, [r5, #4]
    40e2:	230c      	movs	r3, #12
    40e4:	5ee2      	ldrsh	r2, [r4, r3]
    40e6:	b293      	uxth	r3, r2
    40e8:	0719      	lsls	r1, r3, #28
    40ea:	d42d      	bmi.n	4148 <__swsetup_r+0x88>
    40ec:	06d9      	lsls	r1, r3, #27
    40ee:	d411      	bmi.n	4114 <__swsetup_r+0x54>
    40f0:	2309      	movs	r3, #9
    40f2:	2001      	movs	r0, #1
    40f4:	6033      	str	r3, [r6, #0]
    40f6:	3337      	adds	r3, #55	; 0x37
    40f8:	4313      	orrs	r3, r2
    40fa:	81a3      	strh	r3, [r4, #12]
    40fc:	4240      	negs	r0, r0
    40fe:	bd70      	pop	{r4, r5, r6, pc}
    4100:	4b28      	ldr	r3, [pc, #160]	; (41a4 <__swsetup_r+0xe4>)
    4102:	429c      	cmp	r4, r3
    4104:	d101      	bne.n	410a <__swsetup_r+0x4a>
    4106:	68ac      	ldr	r4, [r5, #8]
    4108:	e7eb      	b.n	40e2 <__swsetup_r+0x22>
    410a:	4b27      	ldr	r3, [pc, #156]	; (41a8 <__swsetup_r+0xe8>)
    410c:	429c      	cmp	r4, r3
    410e:	d1e8      	bne.n	40e2 <__swsetup_r+0x22>
    4110:	68ec      	ldr	r4, [r5, #12]
    4112:	e7e6      	b.n	40e2 <__swsetup_r+0x22>
    4114:	075b      	lsls	r3, r3, #29
    4116:	d513      	bpl.n	4140 <__swsetup_r+0x80>
    4118:	6b61      	ldr	r1, [r4, #52]	; 0x34
    411a:	2900      	cmp	r1, #0
    411c:	d008      	beq.n	4130 <__swsetup_r+0x70>
    411e:	0023      	movs	r3, r4
    4120:	3344      	adds	r3, #68	; 0x44
    4122:	4299      	cmp	r1, r3
    4124:	d002      	beq.n	412c <__swsetup_r+0x6c>
    4126:	0030      	movs	r0, r6
    4128:	f001 fbb2 	bl	5890 <_free_r>
    412c:	2300      	movs	r3, #0
    412e:	6363      	str	r3, [r4, #52]	; 0x34
    4130:	2224      	movs	r2, #36	; 0x24
    4132:	89a3      	ldrh	r3, [r4, #12]
    4134:	4393      	bics	r3, r2
    4136:	81a3      	strh	r3, [r4, #12]
    4138:	2300      	movs	r3, #0
    413a:	6063      	str	r3, [r4, #4]
    413c:	6923      	ldr	r3, [r4, #16]
    413e:	6023      	str	r3, [r4, #0]
    4140:	2308      	movs	r3, #8
    4142:	89a2      	ldrh	r2, [r4, #12]
    4144:	4313      	orrs	r3, r2
    4146:	81a3      	strh	r3, [r4, #12]
    4148:	6923      	ldr	r3, [r4, #16]
    414a:	2b00      	cmp	r3, #0
    414c:	d10b      	bne.n	4166 <__swsetup_r+0xa6>
    414e:	21a0      	movs	r1, #160	; 0xa0
    4150:	2280      	movs	r2, #128	; 0x80
    4152:	89a3      	ldrh	r3, [r4, #12]
    4154:	0089      	lsls	r1, r1, #2
    4156:	0092      	lsls	r2, r2, #2
    4158:	400b      	ands	r3, r1
    415a:	4293      	cmp	r3, r2
    415c:	d003      	beq.n	4166 <__swsetup_r+0xa6>
    415e:	0021      	movs	r1, r4
    4160:	0030      	movs	r0, r6
    4162:	f001 f851 	bl	5208 <__smakebuf_r>
    4166:	2301      	movs	r3, #1
    4168:	89a2      	ldrh	r2, [r4, #12]
    416a:	4013      	ands	r3, r2
    416c:	d011      	beq.n	4192 <__swsetup_r+0xd2>
    416e:	2300      	movs	r3, #0
    4170:	60a3      	str	r3, [r4, #8]
    4172:	6963      	ldr	r3, [r4, #20]
    4174:	425b      	negs	r3, r3
    4176:	61a3      	str	r3, [r4, #24]
    4178:	2000      	movs	r0, #0
    417a:	6923      	ldr	r3, [r4, #16]
    417c:	4283      	cmp	r3, r0
    417e:	d1be      	bne.n	40fe <__swsetup_r+0x3e>
    4180:	230c      	movs	r3, #12
    4182:	5ee2      	ldrsh	r2, [r4, r3]
    4184:	0613      	lsls	r3, r2, #24
    4186:	d5ba      	bpl.n	40fe <__swsetup_r+0x3e>
    4188:	2340      	movs	r3, #64	; 0x40
    418a:	4313      	orrs	r3, r2
    418c:	81a3      	strh	r3, [r4, #12]
    418e:	3801      	subs	r0, #1
    4190:	e7b5      	b.n	40fe <__swsetup_r+0x3e>
    4192:	0792      	lsls	r2, r2, #30
    4194:	d400      	bmi.n	4198 <__swsetup_r+0xd8>
    4196:	6963      	ldr	r3, [r4, #20]
    4198:	60a3      	str	r3, [r4, #8]
    419a:	e7ed      	b.n	4178 <__swsetup_r+0xb8>
    419c:	2000000c 	.word	0x2000000c
    41a0:	00008f30 	.word	0x00008f30
    41a4:	00008f50 	.word	0x00008f50
    41a8:	00008f10 	.word	0x00008f10

000041ac <quorem>:
    41ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    41ae:	6903      	ldr	r3, [r0, #16]
    41b0:	690c      	ldr	r4, [r1, #16]
    41b2:	b089      	sub	sp, #36	; 0x24
    41b4:	0007      	movs	r7, r0
    41b6:	9105      	str	r1, [sp, #20]
    41b8:	2600      	movs	r6, #0
    41ba:	429c      	cmp	r4, r3
    41bc:	dc6d      	bgt.n	429a <quorem+0xee>
    41be:	000b      	movs	r3, r1
    41c0:	3c01      	subs	r4, #1
    41c2:	3314      	adds	r3, #20
    41c4:	00a5      	lsls	r5, r4, #2
    41c6:	9303      	str	r3, [sp, #12]
    41c8:	195b      	adds	r3, r3, r5
    41ca:	9304      	str	r3, [sp, #16]
    41cc:	0003      	movs	r3, r0
    41ce:	3314      	adds	r3, #20
    41d0:	9302      	str	r3, [sp, #8]
    41d2:	195d      	adds	r5, r3, r5
    41d4:	9b04      	ldr	r3, [sp, #16]
    41d6:	6828      	ldr	r0, [r5, #0]
    41d8:	681b      	ldr	r3, [r3, #0]
    41da:	1c59      	adds	r1, r3, #1
    41dc:	9301      	str	r3, [sp, #4]
    41de:	f001 fe3d 	bl	5e5c <__udivsi3>
    41e2:	9001      	str	r0, [sp, #4]
    41e4:	42b0      	cmp	r0, r6
    41e6:	d02d      	beq.n	4244 <quorem+0x98>
    41e8:	9b03      	ldr	r3, [sp, #12]
    41ea:	9802      	ldr	r0, [sp, #8]
    41ec:	469c      	mov	ip, r3
    41ee:	9606      	str	r6, [sp, #24]
    41f0:	4662      	mov	r2, ip
    41f2:	ca08      	ldmia	r2!, {r3}
    41f4:	4694      	mov	ip, r2
    41f6:	9a01      	ldr	r2, [sp, #4]
    41f8:	b299      	uxth	r1, r3
    41fa:	4351      	muls	r1, r2
    41fc:	0c1b      	lsrs	r3, r3, #16
    41fe:	4353      	muls	r3, r2
    4200:	1989      	adds	r1, r1, r6
    4202:	0c0a      	lsrs	r2, r1, #16
    4204:	189b      	adds	r3, r3, r2
    4206:	9307      	str	r3, [sp, #28]
    4208:	8802      	ldrh	r2, [r0, #0]
    420a:	0c1e      	lsrs	r6, r3, #16
    420c:	9b06      	ldr	r3, [sp, #24]
    420e:	b289      	uxth	r1, r1
    4210:	18d2      	adds	r2, r2, r3
    4212:	6803      	ldr	r3, [r0, #0]
    4214:	1a52      	subs	r2, r2, r1
    4216:	0c19      	lsrs	r1, r3, #16
    4218:	466b      	mov	r3, sp
    421a:	8b9b      	ldrh	r3, [r3, #28]
    421c:	1acb      	subs	r3, r1, r3
    421e:	1411      	asrs	r1, r2, #16
    4220:	185b      	adds	r3, r3, r1
    4222:	1419      	asrs	r1, r3, #16
    4224:	b292      	uxth	r2, r2
    4226:	041b      	lsls	r3, r3, #16
    4228:	431a      	orrs	r2, r3
    422a:	9b04      	ldr	r3, [sp, #16]
    422c:	9106      	str	r1, [sp, #24]
    422e:	c004      	stmia	r0!, {r2}
    4230:	4563      	cmp	r3, ip
    4232:	d2dd      	bcs.n	41f0 <quorem+0x44>
    4234:	682b      	ldr	r3, [r5, #0]
    4236:	2b00      	cmp	r3, #0
    4238:	d104      	bne.n	4244 <quorem+0x98>
    423a:	9b02      	ldr	r3, [sp, #8]
    423c:	3d04      	subs	r5, #4
    423e:	42ab      	cmp	r3, r5
    4240:	d32e      	bcc.n	42a0 <quorem+0xf4>
    4242:	613c      	str	r4, [r7, #16]
    4244:	9905      	ldr	r1, [sp, #20]
    4246:	0038      	movs	r0, r7
    4248:	f001 fa43 	bl	56d2 <__mcmp>
    424c:	2800      	cmp	r0, #0
    424e:	db23      	blt.n	4298 <quorem+0xec>
    4250:	2500      	movs	r5, #0
    4252:	9b01      	ldr	r3, [sp, #4]
    4254:	9802      	ldr	r0, [sp, #8]
    4256:	3301      	adds	r3, #1
    4258:	9903      	ldr	r1, [sp, #12]
    425a:	9301      	str	r3, [sp, #4]
    425c:	c908      	ldmia	r1!, {r3}
    425e:	8802      	ldrh	r2, [r0, #0]
    4260:	1955      	adds	r5, r2, r5
    4262:	b29a      	uxth	r2, r3
    4264:	1aaa      	subs	r2, r5, r2
    4266:	6805      	ldr	r5, [r0, #0]
    4268:	0c1b      	lsrs	r3, r3, #16
    426a:	0c2d      	lsrs	r5, r5, #16
    426c:	1aeb      	subs	r3, r5, r3
    426e:	1415      	asrs	r5, r2, #16
    4270:	195b      	adds	r3, r3, r5
    4272:	141d      	asrs	r5, r3, #16
    4274:	b292      	uxth	r2, r2
    4276:	041b      	lsls	r3, r3, #16
    4278:	4313      	orrs	r3, r2
    427a:	c008      	stmia	r0!, {r3}
    427c:	9b04      	ldr	r3, [sp, #16]
    427e:	428b      	cmp	r3, r1
    4280:	d2ec      	bcs.n	425c <quorem+0xb0>
    4282:	9a02      	ldr	r2, [sp, #8]
    4284:	00a3      	lsls	r3, r4, #2
    4286:	18d3      	adds	r3, r2, r3
    4288:	681a      	ldr	r2, [r3, #0]
    428a:	2a00      	cmp	r2, #0
    428c:	d104      	bne.n	4298 <quorem+0xec>
    428e:	9a02      	ldr	r2, [sp, #8]
    4290:	3b04      	subs	r3, #4
    4292:	429a      	cmp	r2, r3
    4294:	d309      	bcc.n	42aa <quorem+0xfe>
    4296:	613c      	str	r4, [r7, #16]
    4298:	9e01      	ldr	r6, [sp, #4]
    429a:	0030      	movs	r0, r6
    429c:	b009      	add	sp, #36	; 0x24
    429e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42a0:	682b      	ldr	r3, [r5, #0]
    42a2:	2b00      	cmp	r3, #0
    42a4:	d1cd      	bne.n	4242 <quorem+0x96>
    42a6:	3c01      	subs	r4, #1
    42a8:	e7c7      	b.n	423a <quorem+0x8e>
    42aa:	681a      	ldr	r2, [r3, #0]
    42ac:	2a00      	cmp	r2, #0
    42ae:	d1f2      	bne.n	4296 <quorem+0xea>
    42b0:	3c01      	subs	r4, #1
    42b2:	e7ec      	b.n	428e <quorem+0xe2>

000042b4 <_dtoa_r>:
    42b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42b6:	0016      	movs	r6, r2
    42b8:	001f      	movs	r7, r3
    42ba:	6a44      	ldr	r4, [r0, #36]	; 0x24
    42bc:	b09d      	sub	sp, #116	; 0x74
    42be:	9004      	str	r0, [sp, #16]
    42c0:	9d25      	ldr	r5, [sp, #148]	; 0x94
    42c2:	9606      	str	r6, [sp, #24]
    42c4:	9707      	str	r7, [sp, #28]
    42c6:	2c00      	cmp	r4, #0
    42c8:	d108      	bne.n	42dc <_dtoa_r+0x28>
    42ca:	2010      	movs	r0, #16
    42cc:	f000 ffda 	bl	5284 <malloc>
    42d0:	9b04      	ldr	r3, [sp, #16]
    42d2:	6258      	str	r0, [r3, #36]	; 0x24
    42d4:	6044      	str	r4, [r0, #4]
    42d6:	6084      	str	r4, [r0, #8]
    42d8:	6004      	str	r4, [r0, #0]
    42da:	60c4      	str	r4, [r0, #12]
    42dc:	9b04      	ldr	r3, [sp, #16]
    42de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    42e0:	6819      	ldr	r1, [r3, #0]
    42e2:	2900      	cmp	r1, #0
    42e4:	d00b      	beq.n	42fe <_dtoa_r+0x4a>
    42e6:	685a      	ldr	r2, [r3, #4]
    42e8:	2301      	movs	r3, #1
    42ea:	4093      	lsls	r3, r2
    42ec:	604a      	str	r2, [r1, #4]
    42ee:	608b      	str	r3, [r1, #8]
    42f0:	9804      	ldr	r0, [sp, #16]
    42f2:	f001 f814 	bl	531e <_Bfree>
    42f6:	2200      	movs	r2, #0
    42f8:	9b04      	ldr	r3, [sp, #16]
    42fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    42fc:	601a      	str	r2, [r3, #0]
    42fe:	9b07      	ldr	r3, [sp, #28]
    4300:	2b00      	cmp	r3, #0
    4302:	da1f      	bge.n	4344 <_dtoa_r+0x90>
    4304:	2301      	movs	r3, #1
    4306:	602b      	str	r3, [r5, #0]
    4308:	007b      	lsls	r3, r7, #1
    430a:	085b      	lsrs	r3, r3, #1
    430c:	9307      	str	r3, [sp, #28]
    430e:	9c07      	ldr	r4, [sp, #28]
    4310:	4bb7      	ldr	r3, [pc, #732]	; (45f0 <_dtoa_r+0x33c>)
    4312:	0022      	movs	r2, r4
    4314:	9319      	str	r3, [sp, #100]	; 0x64
    4316:	401a      	ands	r2, r3
    4318:	429a      	cmp	r2, r3
    431a:	d116      	bne.n	434a <_dtoa_r+0x96>
    431c:	4bb5      	ldr	r3, [pc, #724]	; (45f4 <_dtoa_r+0x340>)
    431e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4320:	6013      	str	r3, [r2, #0]
    4322:	9b06      	ldr	r3, [sp, #24]
    4324:	2b00      	cmp	r3, #0
    4326:	d103      	bne.n	4330 <_dtoa_r+0x7c>
    4328:	0324      	lsls	r4, r4, #12
    432a:	d101      	bne.n	4330 <_dtoa_r+0x7c>
    432c:	f000 fd91 	bl	4e52 <_dtoa_r+0xb9e>
    4330:	4bb1      	ldr	r3, [pc, #708]	; (45f8 <_dtoa_r+0x344>)
    4332:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4334:	930a      	str	r3, [sp, #40]	; 0x28
    4336:	4bb1      	ldr	r3, [pc, #708]	; (45fc <_dtoa_r+0x348>)
    4338:	2a00      	cmp	r2, #0
    433a:	d001      	beq.n	4340 <_dtoa_r+0x8c>
    433c:	f000 fd8f 	bl	4e5e <_dtoa_r+0xbaa>
    4340:	f000 fd8f 	bl	4e62 <_dtoa_r+0xbae>
    4344:	2300      	movs	r3, #0
    4346:	602b      	str	r3, [r5, #0]
    4348:	e7e1      	b.n	430e <_dtoa_r+0x5a>
    434a:	9e06      	ldr	r6, [sp, #24]
    434c:	9f07      	ldr	r7, [sp, #28]
    434e:	2200      	movs	r2, #0
    4350:	2300      	movs	r3, #0
    4352:	0030      	movs	r0, r6
    4354:	0039      	movs	r1, r7
    4356:	f001 ff07 	bl	6168 <__aeabi_dcmpeq>
    435a:	1e05      	subs	r5, r0, #0
    435c:	d00e      	beq.n	437c <_dtoa_r+0xc8>
    435e:	2301      	movs	r3, #1
    4360:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4362:	6013      	str	r3, [r2, #0]
    4364:	4ba6      	ldr	r3, [pc, #664]	; (4600 <_dtoa_r+0x34c>)
    4366:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4368:	930a      	str	r3, [sp, #40]	; 0x28
    436a:	2a00      	cmp	r2, #0
    436c:	d101      	bne.n	4372 <_dtoa_r+0xbe>
    436e:	f000 fd78 	bl	4e62 <_dtoa_r+0xbae>
    4372:	4aa4      	ldr	r2, [pc, #656]	; (4604 <_dtoa_r+0x350>)
    4374:	9926      	ldr	r1, [sp, #152]	; 0x98
    4376:	600a      	str	r2, [r1, #0]
    4378:	f000 fd73 	bl	4e62 <_dtoa_r+0xbae>
    437c:	ab1a      	add	r3, sp, #104	; 0x68
    437e:	9301      	str	r3, [sp, #4]
    4380:	ab1b      	add	r3, sp, #108	; 0x6c
    4382:	9300      	str	r3, [sp, #0]
    4384:	0032      	movs	r2, r6
    4386:	003b      	movs	r3, r7
    4388:	9804      	ldr	r0, [sp, #16]
    438a:	f001 fa1f 	bl	57cc <__d2b>
    438e:	0063      	lsls	r3, r4, #1
    4390:	9005      	str	r0, [sp, #20]
    4392:	0d5b      	lsrs	r3, r3, #21
    4394:	d100      	bne.n	4398 <_dtoa_r+0xe4>
    4396:	e07f      	b.n	4498 <_dtoa_r+0x1e4>
    4398:	033a      	lsls	r2, r7, #12
    439a:	4c9b      	ldr	r4, [pc, #620]	; (4608 <_dtoa_r+0x354>)
    439c:	0b12      	lsrs	r2, r2, #12
    439e:	4314      	orrs	r4, r2
    43a0:	0021      	movs	r1, r4
    43a2:	4a9a      	ldr	r2, [pc, #616]	; (460c <_dtoa_r+0x358>)
    43a4:	0030      	movs	r0, r6
    43a6:	9518      	str	r5, [sp, #96]	; 0x60
    43a8:	189e      	adds	r6, r3, r2
    43aa:	2200      	movs	r2, #0
    43ac:	4b98      	ldr	r3, [pc, #608]	; (4610 <_dtoa_r+0x35c>)
    43ae:	f004 f83d 	bl	842c <__aeabi_dsub>
    43b2:	4a98      	ldr	r2, [pc, #608]	; (4614 <_dtoa_r+0x360>)
    43b4:	4b98      	ldr	r3, [pc, #608]	; (4618 <_dtoa_r+0x364>)
    43b6:	f003 fdb9 	bl	7f2c <__aeabi_dmul>
    43ba:	4a98      	ldr	r2, [pc, #608]	; (461c <_dtoa_r+0x368>)
    43bc:	4b98      	ldr	r3, [pc, #608]	; (4620 <_dtoa_r+0x36c>)
    43be:	f002 fe71 	bl	70a4 <__aeabi_dadd>
    43c2:	0004      	movs	r4, r0
    43c4:	0030      	movs	r0, r6
    43c6:	000d      	movs	r5, r1
    43c8:	f004 fb9a 	bl	8b00 <__aeabi_i2d>
    43cc:	4a95      	ldr	r2, [pc, #596]	; (4624 <_dtoa_r+0x370>)
    43ce:	4b96      	ldr	r3, [pc, #600]	; (4628 <_dtoa_r+0x374>)
    43d0:	f003 fdac 	bl	7f2c <__aeabi_dmul>
    43d4:	0002      	movs	r2, r0
    43d6:	000b      	movs	r3, r1
    43d8:	0020      	movs	r0, r4
    43da:	0029      	movs	r1, r5
    43dc:	f002 fe62 	bl	70a4 <__aeabi_dadd>
    43e0:	0004      	movs	r4, r0
    43e2:	000d      	movs	r5, r1
    43e4:	f004 fb58 	bl	8a98 <__aeabi_d2iz>
    43e8:	2200      	movs	r2, #0
    43ea:	9003      	str	r0, [sp, #12]
    43ec:	2300      	movs	r3, #0
    43ee:	0020      	movs	r0, r4
    43f0:	0029      	movs	r1, r5
    43f2:	f001 febf 	bl	6174 <__aeabi_dcmplt>
    43f6:	2800      	cmp	r0, #0
    43f8:	d00e      	beq.n	4418 <_dtoa_r+0x164>
    43fa:	9803      	ldr	r0, [sp, #12]
    43fc:	f004 fb80 	bl	8b00 <__aeabi_i2d>
    4400:	000b      	movs	r3, r1
    4402:	0002      	movs	r2, r0
    4404:	0029      	movs	r1, r5
    4406:	0020      	movs	r0, r4
    4408:	f001 feae 	bl	6168 <__aeabi_dcmpeq>
    440c:	0003      	movs	r3, r0
    440e:	4258      	negs	r0, r3
    4410:	4158      	adcs	r0, r3
    4412:	9b03      	ldr	r3, [sp, #12]
    4414:	1a1b      	subs	r3, r3, r0
    4416:	9303      	str	r3, [sp, #12]
    4418:	2301      	movs	r3, #1
    441a:	9316      	str	r3, [sp, #88]	; 0x58
    441c:	9b03      	ldr	r3, [sp, #12]
    441e:	2b16      	cmp	r3, #22
    4420:	d80f      	bhi.n	4442 <_dtoa_r+0x18e>
    4422:	4982      	ldr	r1, [pc, #520]	; (462c <_dtoa_r+0x378>)
    4424:	00db      	lsls	r3, r3, #3
    4426:	18c9      	adds	r1, r1, r3
    4428:	6808      	ldr	r0, [r1, #0]
    442a:	6849      	ldr	r1, [r1, #4]
    442c:	9a06      	ldr	r2, [sp, #24]
    442e:	9b07      	ldr	r3, [sp, #28]
    4430:	f001 feb4 	bl	619c <__aeabi_dcmpgt>
    4434:	2800      	cmp	r0, #0
    4436:	d04b      	beq.n	44d0 <_dtoa_r+0x21c>
    4438:	9b03      	ldr	r3, [sp, #12]
    443a:	3b01      	subs	r3, #1
    443c:	9303      	str	r3, [sp, #12]
    443e:	2300      	movs	r3, #0
    4440:	9316      	str	r3, [sp, #88]	; 0x58
    4442:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4444:	1b9e      	subs	r6, r3, r6
    4446:	2300      	movs	r3, #0
    4448:	930b      	str	r3, [sp, #44]	; 0x2c
    444a:	0033      	movs	r3, r6
    444c:	3b01      	subs	r3, #1
    444e:	930c      	str	r3, [sp, #48]	; 0x30
    4450:	d504      	bpl.n	445c <_dtoa_r+0x1a8>
    4452:	2301      	movs	r3, #1
    4454:	1b9b      	subs	r3, r3, r6
    4456:	930b      	str	r3, [sp, #44]	; 0x2c
    4458:	2300      	movs	r3, #0
    445a:	930c      	str	r3, [sp, #48]	; 0x30
    445c:	9b03      	ldr	r3, [sp, #12]
    445e:	2b00      	cmp	r3, #0
    4460:	db38      	blt.n	44d4 <_dtoa_r+0x220>
    4462:	9a03      	ldr	r2, [sp, #12]
    4464:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4466:	4694      	mov	ip, r2
    4468:	4463      	add	r3, ip
    446a:	930c      	str	r3, [sp, #48]	; 0x30
    446c:	2300      	movs	r3, #0
    446e:	920f      	str	r2, [sp, #60]	; 0x3c
    4470:	9308      	str	r3, [sp, #32]
    4472:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4474:	2501      	movs	r5, #1
    4476:	2b09      	cmp	r3, #9
    4478:	d900      	bls.n	447c <_dtoa_r+0x1c8>
    447a:	e091      	b.n	45a0 <_dtoa_r+0x2ec>
    447c:	2b05      	cmp	r3, #5
    447e:	dd02      	ble.n	4486 <_dtoa_r+0x1d2>
    4480:	2500      	movs	r5, #0
    4482:	3b04      	subs	r3, #4
    4484:	9322      	str	r3, [sp, #136]	; 0x88
    4486:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4488:	1e98      	subs	r0, r3, #2
    448a:	2803      	cmp	r0, #3
    448c:	d900      	bls.n	4490 <_dtoa_r+0x1dc>
    448e:	e091      	b.n	45b4 <_dtoa_r+0x300>
    4490:	f001 fcda 	bl	5e48 <__gnu_thumb1_case_uqi>
    4494:	76298482 	.word	0x76298482
    4498:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    449a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    449c:	189e      	adds	r6, r3, r2
    449e:	4b64      	ldr	r3, [pc, #400]	; (4630 <_dtoa_r+0x37c>)
    44a0:	18f2      	adds	r2, r6, r3
    44a2:	2a20      	cmp	r2, #32
    44a4:	dd0f      	ble.n	44c6 <_dtoa_r+0x212>
    44a6:	4b63      	ldr	r3, [pc, #396]	; (4634 <_dtoa_r+0x380>)
    44a8:	9806      	ldr	r0, [sp, #24]
    44aa:	18f3      	adds	r3, r6, r3
    44ac:	40d8      	lsrs	r0, r3
    44ae:	2340      	movs	r3, #64	; 0x40
    44b0:	1a9b      	subs	r3, r3, r2
    44b2:	409c      	lsls	r4, r3
    44b4:	4320      	orrs	r0, r4
    44b6:	f004 fb65 	bl	8b84 <__aeabi_ui2d>
    44ba:	2301      	movs	r3, #1
    44bc:	4c5e      	ldr	r4, [pc, #376]	; (4638 <_dtoa_r+0x384>)
    44be:	3e01      	subs	r6, #1
    44c0:	1909      	adds	r1, r1, r4
    44c2:	9318      	str	r3, [sp, #96]	; 0x60
    44c4:	e771      	b.n	43aa <_dtoa_r+0xf6>
    44c6:	2320      	movs	r3, #32
    44c8:	9806      	ldr	r0, [sp, #24]
    44ca:	1a9b      	subs	r3, r3, r2
    44cc:	4098      	lsls	r0, r3
    44ce:	e7f2      	b.n	44b6 <_dtoa_r+0x202>
    44d0:	9016      	str	r0, [sp, #88]	; 0x58
    44d2:	e7b6      	b.n	4442 <_dtoa_r+0x18e>
    44d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    44d6:	9a03      	ldr	r2, [sp, #12]
    44d8:	1a9b      	subs	r3, r3, r2
    44da:	930b      	str	r3, [sp, #44]	; 0x2c
    44dc:	4253      	negs	r3, r2
    44de:	9308      	str	r3, [sp, #32]
    44e0:	2300      	movs	r3, #0
    44e2:	930f      	str	r3, [sp, #60]	; 0x3c
    44e4:	e7c5      	b.n	4472 <_dtoa_r+0x1be>
    44e6:	2301      	movs	r3, #1
    44e8:	930e      	str	r3, [sp, #56]	; 0x38
    44ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    44ec:	2b00      	cmp	r3, #0
    44ee:	dd65      	ble.n	45bc <_dtoa_r+0x308>
    44f0:	001f      	movs	r7, r3
    44f2:	930d      	str	r3, [sp, #52]	; 0x34
    44f4:	9a04      	ldr	r2, [sp, #16]
    44f6:	6a54      	ldr	r4, [r2, #36]	; 0x24
    44f8:	2200      	movs	r2, #0
    44fa:	6062      	str	r2, [r4, #4]
    44fc:	3204      	adds	r2, #4
    44fe:	0011      	movs	r1, r2
    4500:	3114      	adds	r1, #20
    4502:	4299      	cmp	r1, r3
    4504:	d95f      	bls.n	45c6 <_dtoa_r+0x312>
    4506:	6861      	ldr	r1, [r4, #4]
    4508:	9804      	ldr	r0, [sp, #16]
    450a:	f000 fed0 	bl	52ae <_Balloc>
    450e:	9b04      	ldr	r3, [sp, #16]
    4510:	6020      	str	r0, [r4, #0]
    4512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4514:	681b      	ldr	r3, [r3, #0]
    4516:	930a      	str	r3, [sp, #40]	; 0x28
    4518:	2f0e      	cmp	r7, #14
    451a:	d900      	bls.n	451e <_dtoa_r+0x26a>
    451c:	e105      	b.n	472a <_dtoa_r+0x476>
    451e:	2d00      	cmp	r5, #0
    4520:	d100      	bne.n	4524 <_dtoa_r+0x270>
    4522:	e102      	b.n	472a <_dtoa_r+0x476>
    4524:	9b06      	ldr	r3, [sp, #24]
    4526:	9c07      	ldr	r4, [sp, #28]
    4528:	9314      	str	r3, [sp, #80]	; 0x50
    452a:	9415      	str	r4, [sp, #84]	; 0x54
    452c:	9b03      	ldr	r3, [sp, #12]
    452e:	2b00      	cmp	r3, #0
    4530:	dc00      	bgt.n	4534 <_dtoa_r+0x280>
    4532:	e085      	b.n	4640 <_dtoa_r+0x38c>
    4534:	001a      	movs	r2, r3
    4536:	210f      	movs	r1, #15
    4538:	4b3c      	ldr	r3, [pc, #240]	; (462c <_dtoa_r+0x378>)
    453a:	400a      	ands	r2, r1
    453c:	00d2      	lsls	r2, r2, #3
    453e:	189b      	adds	r3, r3, r2
    4540:	685c      	ldr	r4, [r3, #4]
    4542:	681b      	ldr	r3, [r3, #0]
    4544:	9310      	str	r3, [sp, #64]	; 0x40
    4546:	9411      	str	r4, [sp, #68]	; 0x44
    4548:	9b03      	ldr	r3, [sp, #12]
    454a:	2402      	movs	r4, #2
    454c:	111d      	asrs	r5, r3, #4
    454e:	06eb      	lsls	r3, r5, #27
    4550:	d50a      	bpl.n	4568 <_dtoa_r+0x2b4>
    4552:	4b3a      	ldr	r3, [pc, #232]	; (463c <_dtoa_r+0x388>)
    4554:	400d      	ands	r5, r1
    4556:	6a1a      	ldr	r2, [r3, #32]
    4558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    455a:	9814      	ldr	r0, [sp, #80]	; 0x50
    455c:	9915      	ldr	r1, [sp, #84]	; 0x54
    455e:	f003 f8b1 	bl	76c4 <__aeabi_ddiv>
    4562:	9006      	str	r0, [sp, #24]
    4564:	9107      	str	r1, [sp, #28]
    4566:	3401      	adds	r4, #1
    4568:	4e34      	ldr	r6, [pc, #208]	; (463c <_dtoa_r+0x388>)
    456a:	2d00      	cmp	r5, #0
    456c:	d130      	bne.n	45d0 <_dtoa_r+0x31c>
    456e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4570:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4572:	9806      	ldr	r0, [sp, #24]
    4574:	9907      	ldr	r1, [sp, #28]
    4576:	f003 f8a5 	bl	76c4 <__aeabi_ddiv>
    457a:	9006      	str	r0, [sp, #24]
    457c:	9107      	str	r1, [sp, #28]
    457e:	e07a      	b.n	4676 <_dtoa_r+0x3c2>
    4580:	2301      	movs	r3, #1
    4582:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    4584:	930e      	str	r3, [sp, #56]	; 0x38
    4586:	4694      	mov	ip, r2
    4588:	9b03      	ldr	r3, [sp, #12]
    458a:	4463      	add	r3, ip
    458c:	1c5f      	adds	r7, r3, #1
    458e:	930d      	str	r3, [sp, #52]	; 0x34
    4590:	1e3b      	subs	r3, r7, #0
    4592:	dcaf      	bgt.n	44f4 <_dtoa_r+0x240>
    4594:	2301      	movs	r3, #1
    4596:	e7ad      	b.n	44f4 <_dtoa_r+0x240>
    4598:	2300      	movs	r3, #0
    459a:	e7a5      	b.n	44e8 <_dtoa_r+0x234>
    459c:	2300      	movs	r3, #0
    459e:	e7f0      	b.n	4582 <_dtoa_r+0x2ce>
    45a0:	2300      	movs	r3, #0
    45a2:	950e      	str	r5, [sp, #56]	; 0x38
    45a4:	9322      	str	r3, [sp, #136]	; 0x88
    45a6:	3b01      	subs	r3, #1
    45a8:	2200      	movs	r2, #0
    45aa:	930d      	str	r3, [sp, #52]	; 0x34
    45ac:	001f      	movs	r7, r3
    45ae:	3313      	adds	r3, #19
    45b0:	9223      	str	r2, [sp, #140]	; 0x8c
    45b2:	e79f      	b.n	44f4 <_dtoa_r+0x240>
    45b4:	2301      	movs	r3, #1
    45b6:	930e      	str	r3, [sp, #56]	; 0x38
    45b8:	3b02      	subs	r3, #2
    45ba:	e7f5      	b.n	45a8 <_dtoa_r+0x2f4>
    45bc:	2301      	movs	r3, #1
    45be:	930d      	str	r3, [sp, #52]	; 0x34
    45c0:	001f      	movs	r7, r3
    45c2:	001a      	movs	r2, r3
    45c4:	e7f4      	b.n	45b0 <_dtoa_r+0x2fc>
    45c6:	6861      	ldr	r1, [r4, #4]
    45c8:	0052      	lsls	r2, r2, #1
    45ca:	3101      	adds	r1, #1
    45cc:	6061      	str	r1, [r4, #4]
    45ce:	e796      	b.n	44fe <_dtoa_r+0x24a>
    45d0:	2301      	movs	r3, #1
    45d2:	421d      	tst	r5, r3
    45d4:	d008      	beq.n	45e8 <_dtoa_r+0x334>
    45d6:	9810      	ldr	r0, [sp, #64]	; 0x40
    45d8:	9911      	ldr	r1, [sp, #68]	; 0x44
    45da:	18e4      	adds	r4, r4, r3
    45dc:	6832      	ldr	r2, [r6, #0]
    45de:	6873      	ldr	r3, [r6, #4]
    45e0:	f003 fca4 	bl	7f2c <__aeabi_dmul>
    45e4:	9010      	str	r0, [sp, #64]	; 0x40
    45e6:	9111      	str	r1, [sp, #68]	; 0x44
    45e8:	106d      	asrs	r5, r5, #1
    45ea:	3608      	adds	r6, #8
    45ec:	e7bd      	b.n	456a <_dtoa_r+0x2b6>
    45ee:	46c0      	nop			; (mov r8, r8)
    45f0:	7ff00000 	.word	0x7ff00000
    45f4:	0000270f 	.word	0x0000270f
    45f8:	00008f09 	.word	0x00008f09
    45fc:	00008f0c 	.word	0x00008f0c
    4600:	00008edc 	.word	0x00008edc
    4604:	00008edd 	.word	0x00008edd
    4608:	3ff00000 	.word	0x3ff00000
    460c:	fffffc01 	.word	0xfffffc01
    4610:	3ff80000 	.word	0x3ff80000
    4614:	636f4361 	.word	0x636f4361
    4618:	3fd287a7 	.word	0x3fd287a7
    461c:	8b60c8b3 	.word	0x8b60c8b3
    4620:	3fc68a28 	.word	0x3fc68a28
    4624:	509f79fb 	.word	0x509f79fb
    4628:	3fd34413 	.word	0x3fd34413
    462c:	00008f98 	.word	0x00008f98
    4630:	00000432 	.word	0x00000432
    4634:	00000412 	.word	0x00000412
    4638:	fe100000 	.word	0xfe100000
    463c:	00008f70 	.word	0x00008f70
    4640:	9b03      	ldr	r3, [sp, #12]
    4642:	2402      	movs	r4, #2
    4644:	2b00      	cmp	r3, #0
    4646:	d016      	beq.n	4676 <_dtoa_r+0x3c2>
    4648:	9814      	ldr	r0, [sp, #80]	; 0x50
    464a:	9915      	ldr	r1, [sp, #84]	; 0x54
    464c:	425d      	negs	r5, r3
    464e:	230f      	movs	r3, #15
    4650:	4aca      	ldr	r2, [pc, #808]	; (497c <_dtoa_r+0x6c8>)
    4652:	402b      	ands	r3, r5
    4654:	00db      	lsls	r3, r3, #3
    4656:	18d3      	adds	r3, r2, r3
    4658:	681a      	ldr	r2, [r3, #0]
    465a:	685b      	ldr	r3, [r3, #4]
    465c:	f003 fc66 	bl	7f2c <__aeabi_dmul>
    4660:	2300      	movs	r3, #0
    4662:	9006      	str	r0, [sp, #24]
    4664:	9107      	str	r1, [sp, #28]
    4666:	4ec6      	ldr	r6, [pc, #792]	; (4980 <_dtoa_r+0x6cc>)
    4668:	112d      	asrs	r5, r5, #4
    466a:	2d00      	cmp	r5, #0
    466c:	d000      	beq.n	4670 <_dtoa_r+0x3bc>
    466e:	e08c      	b.n	478a <_dtoa_r+0x4d6>
    4670:	2b00      	cmp	r3, #0
    4672:	d000      	beq.n	4676 <_dtoa_r+0x3c2>
    4674:	e781      	b.n	457a <_dtoa_r+0x2c6>
    4676:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4678:	2b00      	cmp	r3, #0
    467a:	d100      	bne.n	467e <_dtoa_r+0x3ca>
    467c:	e091      	b.n	47a2 <_dtoa_r+0x4ee>
    467e:	9a06      	ldr	r2, [sp, #24]
    4680:	9b07      	ldr	r3, [sp, #28]
    4682:	9210      	str	r2, [sp, #64]	; 0x40
    4684:	9311      	str	r3, [sp, #68]	; 0x44
    4686:	9810      	ldr	r0, [sp, #64]	; 0x40
    4688:	9911      	ldr	r1, [sp, #68]	; 0x44
    468a:	2200      	movs	r2, #0
    468c:	4bbd      	ldr	r3, [pc, #756]	; (4984 <_dtoa_r+0x6d0>)
    468e:	f001 fd71 	bl	6174 <__aeabi_dcmplt>
    4692:	2800      	cmp	r0, #0
    4694:	d100      	bne.n	4698 <_dtoa_r+0x3e4>
    4696:	e084      	b.n	47a2 <_dtoa_r+0x4ee>
    4698:	2f00      	cmp	r7, #0
    469a:	d100      	bne.n	469e <_dtoa_r+0x3ea>
    469c:	e081      	b.n	47a2 <_dtoa_r+0x4ee>
    469e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    46a0:	2b00      	cmp	r3, #0
    46a2:	dd3e      	ble.n	4722 <_dtoa_r+0x46e>
    46a4:	9810      	ldr	r0, [sp, #64]	; 0x40
    46a6:	9911      	ldr	r1, [sp, #68]	; 0x44
    46a8:	9b03      	ldr	r3, [sp, #12]
    46aa:	2200      	movs	r2, #0
    46ac:	1e5e      	subs	r6, r3, #1
    46ae:	4bb6      	ldr	r3, [pc, #728]	; (4988 <_dtoa_r+0x6d4>)
    46b0:	f003 fc3c 	bl	7f2c <__aeabi_dmul>
    46b4:	9006      	str	r0, [sp, #24]
    46b6:	9107      	str	r1, [sp, #28]
    46b8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    46ba:	3401      	adds	r4, #1
    46bc:	0020      	movs	r0, r4
    46be:	f004 fa1f 	bl	8b00 <__aeabi_i2d>
    46c2:	9a06      	ldr	r2, [sp, #24]
    46c4:	9b07      	ldr	r3, [sp, #28]
    46c6:	f003 fc31 	bl	7f2c <__aeabi_dmul>
    46ca:	2200      	movs	r2, #0
    46cc:	4baf      	ldr	r3, [pc, #700]	; (498c <_dtoa_r+0x6d8>)
    46ce:	f002 fce9 	bl	70a4 <__aeabi_dadd>
    46d2:	9012      	str	r0, [sp, #72]	; 0x48
    46d4:	9113      	str	r1, [sp, #76]	; 0x4c
    46d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    46d8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    46da:	4aad      	ldr	r2, [pc, #692]	; (4990 <_dtoa_r+0x6dc>)
    46dc:	9310      	str	r3, [sp, #64]	; 0x40
    46de:	9411      	str	r4, [sp, #68]	; 0x44
    46e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    46e2:	189c      	adds	r4, r3, r2
    46e4:	9411      	str	r4, [sp, #68]	; 0x44
    46e6:	2d00      	cmp	r5, #0
    46e8:	d15e      	bne.n	47a8 <_dtoa_r+0x4f4>
    46ea:	9806      	ldr	r0, [sp, #24]
    46ec:	9907      	ldr	r1, [sp, #28]
    46ee:	2200      	movs	r2, #0
    46f0:	4ba8      	ldr	r3, [pc, #672]	; (4994 <_dtoa_r+0x6e0>)
    46f2:	f003 fe9b 	bl	842c <__aeabi_dsub>
    46f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    46f8:	0023      	movs	r3, r4
    46fa:	9006      	str	r0, [sp, #24]
    46fc:	9107      	str	r1, [sp, #28]
    46fe:	f001 fd4d 	bl	619c <__aeabi_dcmpgt>
    4702:	2800      	cmp	r0, #0
    4704:	d000      	beq.n	4708 <_dtoa_r+0x454>
    4706:	e301      	b.n	4d0c <_dtoa_r+0xa58>
    4708:	48a3      	ldr	r0, [pc, #652]	; (4998 <_dtoa_r+0x6e4>)
    470a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    470c:	4684      	mov	ip, r0
    470e:	4461      	add	r1, ip
    4710:	000b      	movs	r3, r1
    4712:	9806      	ldr	r0, [sp, #24]
    4714:	9907      	ldr	r1, [sp, #28]
    4716:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4718:	f001 fd2c 	bl	6174 <__aeabi_dcmplt>
    471c:	2800      	cmp	r0, #0
    471e:	d000      	beq.n	4722 <_dtoa_r+0x46e>
    4720:	e2e8      	b.n	4cf4 <_dtoa_r+0xa40>
    4722:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4724:	9c15      	ldr	r4, [sp, #84]	; 0x54
    4726:	9306      	str	r3, [sp, #24]
    4728:	9407      	str	r4, [sp, #28]
    472a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    472c:	2b00      	cmp	r3, #0
    472e:	da00      	bge.n	4732 <_dtoa_r+0x47e>
    4730:	e157      	b.n	49e2 <_dtoa_r+0x72e>
    4732:	9a03      	ldr	r2, [sp, #12]
    4734:	2a0e      	cmp	r2, #14
    4736:	dd00      	ble.n	473a <_dtoa_r+0x486>
    4738:	e153      	b.n	49e2 <_dtoa_r+0x72e>
    473a:	4b90      	ldr	r3, [pc, #576]	; (497c <_dtoa_r+0x6c8>)
    473c:	00d2      	lsls	r2, r2, #3
    473e:	189b      	adds	r3, r3, r2
    4740:	685c      	ldr	r4, [r3, #4]
    4742:	681b      	ldr	r3, [r3, #0]
    4744:	9308      	str	r3, [sp, #32]
    4746:	9409      	str	r4, [sp, #36]	; 0x24
    4748:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    474a:	2b00      	cmp	r3, #0
    474c:	db00      	blt.n	4750 <_dtoa_r+0x49c>
    474e:	e0ce      	b.n	48ee <_dtoa_r+0x63a>
    4750:	2f00      	cmp	r7, #0
    4752:	dd00      	ble.n	4756 <_dtoa_r+0x4a2>
    4754:	e0cb      	b.n	48ee <_dtoa_r+0x63a>
    4756:	d000      	beq.n	475a <_dtoa_r+0x4a6>
    4758:	e2cf      	b.n	4cfa <_dtoa_r+0xa46>
    475a:	9808      	ldr	r0, [sp, #32]
    475c:	9909      	ldr	r1, [sp, #36]	; 0x24
    475e:	2200      	movs	r2, #0
    4760:	4b8c      	ldr	r3, [pc, #560]	; (4994 <_dtoa_r+0x6e0>)
    4762:	f003 fbe3 	bl	7f2c <__aeabi_dmul>
    4766:	9a06      	ldr	r2, [sp, #24]
    4768:	9b07      	ldr	r3, [sp, #28]
    476a:	f001 fd21 	bl	61b0 <__aeabi_dcmpge>
    476e:	003e      	movs	r6, r7
    4770:	9708      	str	r7, [sp, #32]
    4772:	2800      	cmp	r0, #0
    4774:	d000      	beq.n	4778 <_dtoa_r+0x4c4>
    4776:	e2a4      	b.n	4cc2 <_dtoa_r+0xa0e>
    4778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    477a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    477c:	1c5d      	adds	r5, r3, #1
    477e:	2331      	movs	r3, #49	; 0x31
    4780:	7013      	strb	r3, [r2, #0]
    4782:	9b03      	ldr	r3, [sp, #12]
    4784:	3301      	adds	r3, #1
    4786:	9303      	str	r3, [sp, #12]
    4788:	e29f      	b.n	4cca <_dtoa_r+0xa16>
    478a:	2201      	movs	r2, #1
    478c:	4215      	tst	r5, r2
    478e:	d005      	beq.n	479c <_dtoa_r+0x4e8>
    4790:	18a4      	adds	r4, r4, r2
    4792:	6832      	ldr	r2, [r6, #0]
    4794:	6873      	ldr	r3, [r6, #4]
    4796:	f003 fbc9 	bl	7f2c <__aeabi_dmul>
    479a:	2301      	movs	r3, #1
    479c:	106d      	asrs	r5, r5, #1
    479e:	3608      	adds	r6, #8
    47a0:	e763      	b.n	466a <_dtoa_r+0x3b6>
    47a2:	9e03      	ldr	r6, [sp, #12]
    47a4:	003d      	movs	r5, r7
    47a6:	e789      	b.n	46bc <_dtoa_r+0x408>
    47a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    47aa:	1e69      	subs	r1, r5, #1
    47ac:	1952      	adds	r2, r2, r5
    47ae:	9217      	str	r2, [sp, #92]	; 0x5c
    47b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    47b2:	4b72      	ldr	r3, [pc, #456]	; (497c <_dtoa_r+0x6c8>)
    47b4:	00c9      	lsls	r1, r1, #3
    47b6:	2a00      	cmp	r2, #0
    47b8:	d04a      	beq.n	4850 <_dtoa_r+0x59c>
    47ba:	185b      	adds	r3, r3, r1
    47bc:	681a      	ldr	r2, [r3, #0]
    47be:	685b      	ldr	r3, [r3, #4]
    47c0:	2000      	movs	r0, #0
    47c2:	4976      	ldr	r1, [pc, #472]	; (499c <_dtoa_r+0x6e8>)
    47c4:	f002 ff7e 	bl	76c4 <__aeabi_ddiv>
    47c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    47ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
    47cc:	f003 fe2e 	bl	842c <__aeabi_dsub>
    47d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    47d2:	9010      	str	r0, [sp, #64]	; 0x40
    47d4:	9111      	str	r1, [sp, #68]	; 0x44
    47d6:	9312      	str	r3, [sp, #72]	; 0x48
    47d8:	9806      	ldr	r0, [sp, #24]
    47da:	9907      	ldr	r1, [sp, #28]
    47dc:	f004 f95c 	bl	8a98 <__aeabi_d2iz>
    47e0:	0004      	movs	r4, r0
    47e2:	f004 f98d 	bl	8b00 <__aeabi_i2d>
    47e6:	0002      	movs	r2, r0
    47e8:	000b      	movs	r3, r1
    47ea:	9806      	ldr	r0, [sp, #24]
    47ec:	9907      	ldr	r1, [sp, #28]
    47ee:	f003 fe1d 	bl	842c <__aeabi_dsub>
    47f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    47f4:	3430      	adds	r4, #48	; 0x30
    47f6:	1c5d      	adds	r5, r3, #1
    47f8:	701c      	strb	r4, [r3, #0]
    47fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    47fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    47fe:	9006      	str	r0, [sp, #24]
    4800:	9107      	str	r1, [sp, #28]
    4802:	f001 fcb7 	bl	6174 <__aeabi_dcmplt>
    4806:	2800      	cmp	r0, #0
    4808:	d165      	bne.n	48d6 <_dtoa_r+0x622>
    480a:	9a06      	ldr	r2, [sp, #24]
    480c:	9b07      	ldr	r3, [sp, #28]
    480e:	2000      	movs	r0, #0
    4810:	495c      	ldr	r1, [pc, #368]	; (4984 <_dtoa_r+0x6d0>)
    4812:	f003 fe0b 	bl	842c <__aeabi_dsub>
    4816:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4818:	9b11      	ldr	r3, [sp, #68]	; 0x44
    481a:	f001 fcab 	bl	6174 <__aeabi_dcmplt>
    481e:	2800      	cmp	r0, #0
    4820:	d000      	beq.n	4824 <_dtoa_r+0x570>
    4822:	e0be      	b.n	49a2 <_dtoa_r+0x6ee>
    4824:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    4826:	429d      	cmp	r5, r3
    4828:	d100      	bne.n	482c <_dtoa_r+0x578>
    482a:	e77a      	b.n	4722 <_dtoa_r+0x46e>
    482c:	9810      	ldr	r0, [sp, #64]	; 0x40
    482e:	9911      	ldr	r1, [sp, #68]	; 0x44
    4830:	2200      	movs	r2, #0
    4832:	4b55      	ldr	r3, [pc, #340]	; (4988 <_dtoa_r+0x6d4>)
    4834:	f003 fb7a 	bl	7f2c <__aeabi_dmul>
    4838:	2200      	movs	r2, #0
    483a:	9010      	str	r0, [sp, #64]	; 0x40
    483c:	9111      	str	r1, [sp, #68]	; 0x44
    483e:	9806      	ldr	r0, [sp, #24]
    4840:	9907      	ldr	r1, [sp, #28]
    4842:	4b51      	ldr	r3, [pc, #324]	; (4988 <_dtoa_r+0x6d4>)
    4844:	f003 fb72 	bl	7f2c <__aeabi_dmul>
    4848:	9512      	str	r5, [sp, #72]	; 0x48
    484a:	9006      	str	r0, [sp, #24]
    484c:	9107      	str	r1, [sp, #28]
    484e:	e7c3      	b.n	47d8 <_dtoa_r+0x524>
    4850:	1859      	adds	r1, r3, r1
    4852:	6808      	ldr	r0, [r1, #0]
    4854:	6849      	ldr	r1, [r1, #4]
    4856:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4858:	9b11      	ldr	r3, [sp, #68]	; 0x44
    485a:	f003 fb67 	bl	7f2c <__aeabi_dmul>
    485e:	9010      	str	r0, [sp, #64]	; 0x40
    4860:	9111      	str	r1, [sp, #68]	; 0x44
    4862:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4864:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    4866:	9806      	ldr	r0, [sp, #24]
    4868:	9907      	ldr	r1, [sp, #28]
    486a:	f004 f915 	bl	8a98 <__aeabi_d2iz>
    486e:	9012      	str	r0, [sp, #72]	; 0x48
    4870:	f004 f946 	bl	8b00 <__aeabi_i2d>
    4874:	0002      	movs	r2, r0
    4876:	000b      	movs	r3, r1
    4878:	9806      	ldr	r0, [sp, #24]
    487a:	9907      	ldr	r1, [sp, #28]
    487c:	f003 fdd6 	bl	842c <__aeabi_dsub>
    4880:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4882:	9006      	str	r0, [sp, #24]
    4884:	9107      	str	r1, [sp, #28]
    4886:	3330      	adds	r3, #48	; 0x30
    4888:	7023      	strb	r3, [r4, #0]
    488a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    488c:	3401      	adds	r4, #1
    488e:	2200      	movs	r2, #0
    4890:	42a3      	cmp	r3, r4
    4892:	d124      	bne.n	48de <_dtoa_r+0x62a>
    4894:	4b41      	ldr	r3, [pc, #260]	; (499c <_dtoa_r+0x6e8>)
    4896:	9810      	ldr	r0, [sp, #64]	; 0x40
    4898:	9911      	ldr	r1, [sp, #68]	; 0x44
    489a:	f002 fc03 	bl	70a4 <__aeabi_dadd>
    489e:	0002      	movs	r2, r0
    48a0:	000b      	movs	r3, r1
    48a2:	9806      	ldr	r0, [sp, #24]
    48a4:	9907      	ldr	r1, [sp, #28]
    48a6:	f001 fc79 	bl	619c <__aeabi_dcmpgt>
    48aa:	2800      	cmp	r0, #0
    48ac:	d000      	beq.n	48b0 <_dtoa_r+0x5fc>
    48ae:	e078      	b.n	49a2 <_dtoa_r+0x6ee>
    48b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    48b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    48b4:	2000      	movs	r0, #0
    48b6:	4939      	ldr	r1, [pc, #228]	; (499c <_dtoa_r+0x6e8>)
    48b8:	f003 fdb8 	bl	842c <__aeabi_dsub>
    48bc:	0002      	movs	r2, r0
    48be:	000b      	movs	r3, r1
    48c0:	9806      	ldr	r0, [sp, #24]
    48c2:	9907      	ldr	r1, [sp, #28]
    48c4:	f001 fc56 	bl	6174 <__aeabi_dcmplt>
    48c8:	2800      	cmp	r0, #0
    48ca:	d100      	bne.n	48ce <_dtoa_r+0x61a>
    48cc:	e729      	b.n	4722 <_dtoa_r+0x46e>
    48ce:	1e6b      	subs	r3, r5, #1
    48d0:	781a      	ldrb	r2, [r3, #0]
    48d2:	2a30      	cmp	r2, #48	; 0x30
    48d4:	d001      	beq.n	48da <_dtoa_r+0x626>
    48d6:	9603      	str	r6, [sp, #12]
    48d8:	e03f      	b.n	495a <_dtoa_r+0x6a6>
    48da:	001d      	movs	r5, r3
    48dc:	e7f7      	b.n	48ce <_dtoa_r+0x61a>
    48de:	9806      	ldr	r0, [sp, #24]
    48e0:	9907      	ldr	r1, [sp, #28]
    48e2:	4b29      	ldr	r3, [pc, #164]	; (4988 <_dtoa_r+0x6d4>)
    48e4:	f003 fb22 	bl	7f2c <__aeabi_dmul>
    48e8:	9006      	str	r0, [sp, #24]
    48ea:	9107      	str	r1, [sp, #28]
    48ec:	e7bb      	b.n	4866 <_dtoa_r+0x5b2>
    48ee:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    48f0:	9a08      	ldr	r2, [sp, #32]
    48f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    48f4:	9806      	ldr	r0, [sp, #24]
    48f6:	9907      	ldr	r1, [sp, #28]
    48f8:	f002 fee4 	bl	76c4 <__aeabi_ddiv>
    48fc:	f004 f8cc 	bl	8a98 <__aeabi_d2iz>
    4900:	0004      	movs	r4, r0
    4902:	f004 f8fd 	bl	8b00 <__aeabi_i2d>
    4906:	9a08      	ldr	r2, [sp, #32]
    4908:	9b09      	ldr	r3, [sp, #36]	; 0x24
    490a:	f003 fb0f 	bl	7f2c <__aeabi_dmul>
    490e:	000b      	movs	r3, r1
    4910:	0002      	movs	r2, r0
    4912:	9806      	ldr	r0, [sp, #24]
    4914:	9907      	ldr	r1, [sp, #28]
    4916:	f003 fd89 	bl	842c <__aeabi_dsub>
    491a:	0023      	movs	r3, r4
    491c:	3330      	adds	r3, #48	; 0x30
    491e:	7033      	strb	r3, [r6, #0]
    4920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4922:	1c75      	adds	r5, r6, #1
    4924:	1aeb      	subs	r3, r5, r3
    4926:	429f      	cmp	r7, r3
    4928:	d14c      	bne.n	49c4 <_dtoa_r+0x710>
    492a:	0002      	movs	r2, r0
    492c:	000b      	movs	r3, r1
    492e:	f002 fbb9 	bl	70a4 <__aeabi_dadd>
    4932:	0006      	movs	r6, r0
    4934:	000f      	movs	r7, r1
    4936:	0002      	movs	r2, r0
    4938:	000b      	movs	r3, r1
    493a:	9808      	ldr	r0, [sp, #32]
    493c:	9909      	ldr	r1, [sp, #36]	; 0x24
    493e:	f001 fc19 	bl	6174 <__aeabi_dcmplt>
    4942:	2800      	cmp	r0, #0
    4944:	d12c      	bne.n	49a0 <_dtoa_r+0x6ec>
    4946:	9808      	ldr	r0, [sp, #32]
    4948:	9909      	ldr	r1, [sp, #36]	; 0x24
    494a:	0032      	movs	r2, r6
    494c:	003b      	movs	r3, r7
    494e:	f001 fc0b 	bl	6168 <__aeabi_dcmpeq>
    4952:	2800      	cmp	r0, #0
    4954:	d001      	beq.n	495a <_dtoa_r+0x6a6>
    4956:	07e3      	lsls	r3, r4, #31
    4958:	d422      	bmi.n	49a0 <_dtoa_r+0x6ec>
    495a:	9905      	ldr	r1, [sp, #20]
    495c:	9804      	ldr	r0, [sp, #16]
    495e:	f000 fcde 	bl	531e <_Bfree>
    4962:	2300      	movs	r3, #0
    4964:	702b      	strb	r3, [r5, #0]
    4966:	9b03      	ldr	r3, [sp, #12]
    4968:	9a24      	ldr	r2, [sp, #144]	; 0x90
    496a:	3301      	adds	r3, #1
    496c:	6013      	str	r3, [r2, #0]
    496e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    4970:	2b00      	cmp	r3, #0
    4972:	d100      	bne.n	4976 <_dtoa_r+0x6c2>
    4974:	e275      	b.n	4e62 <_dtoa_r+0xbae>
    4976:	601d      	str	r5, [r3, #0]
    4978:	e273      	b.n	4e62 <_dtoa_r+0xbae>
    497a:	46c0      	nop			; (mov r8, r8)
    497c:	00008f98 	.word	0x00008f98
    4980:	00008f70 	.word	0x00008f70
    4984:	3ff00000 	.word	0x3ff00000
    4988:	40240000 	.word	0x40240000
    498c:	401c0000 	.word	0x401c0000
    4990:	fcc00000 	.word	0xfcc00000
    4994:	40140000 	.word	0x40140000
    4998:	7cc00000 	.word	0x7cc00000
    499c:	3fe00000 	.word	0x3fe00000
    49a0:	9e03      	ldr	r6, [sp, #12]
    49a2:	1e6b      	subs	r3, r5, #1
    49a4:	781a      	ldrb	r2, [r3, #0]
    49a6:	2a39      	cmp	r2, #57	; 0x39
    49a8:	d106      	bne.n	49b8 <_dtoa_r+0x704>
    49aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    49ac:	429a      	cmp	r2, r3
    49ae:	d107      	bne.n	49c0 <_dtoa_r+0x70c>
    49b0:	2330      	movs	r3, #48	; 0x30
    49b2:	7013      	strb	r3, [r2, #0]
    49b4:	0013      	movs	r3, r2
    49b6:	3601      	adds	r6, #1
    49b8:	781a      	ldrb	r2, [r3, #0]
    49ba:	3201      	adds	r2, #1
    49bc:	701a      	strb	r2, [r3, #0]
    49be:	e78a      	b.n	48d6 <_dtoa_r+0x622>
    49c0:	001d      	movs	r5, r3
    49c2:	e7ee      	b.n	49a2 <_dtoa_r+0x6ee>
    49c4:	2200      	movs	r2, #0
    49c6:	4bcf      	ldr	r3, [pc, #828]	; (4d04 <_dtoa_r+0xa50>)
    49c8:	f003 fab0 	bl	7f2c <__aeabi_dmul>
    49cc:	2200      	movs	r2, #0
    49ce:	2300      	movs	r3, #0
    49d0:	9006      	str	r0, [sp, #24]
    49d2:	9107      	str	r1, [sp, #28]
    49d4:	002e      	movs	r6, r5
    49d6:	f001 fbc7 	bl	6168 <__aeabi_dcmpeq>
    49da:	2800      	cmp	r0, #0
    49dc:	d100      	bne.n	49e0 <_dtoa_r+0x72c>
    49de:	e787      	b.n	48f0 <_dtoa_r+0x63c>
    49e0:	e7bb      	b.n	495a <_dtoa_r+0x6a6>
    49e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    49e4:	2a00      	cmp	r2, #0
    49e6:	d100      	bne.n	49ea <_dtoa_r+0x736>
    49e8:	e087      	b.n	4afa <_dtoa_r+0x846>
    49ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
    49ec:	2a01      	cmp	r2, #1
    49ee:	dc6e      	bgt.n	4ace <_dtoa_r+0x81a>
    49f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    49f2:	2a00      	cmp	r2, #0
    49f4:	d067      	beq.n	4ac6 <_dtoa_r+0x812>
    49f6:	4ac4      	ldr	r2, [pc, #784]	; (4d08 <_dtoa_r+0xa54>)
    49f8:	189b      	adds	r3, r3, r2
    49fa:	9d08      	ldr	r5, [sp, #32]
    49fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    49fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4a00:	2101      	movs	r1, #1
    4a02:	18d2      	adds	r2, r2, r3
    4a04:	920b      	str	r2, [sp, #44]	; 0x2c
    4a06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4a08:	9804      	ldr	r0, [sp, #16]
    4a0a:	18d3      	adds	r3, r2, r3
    4a0c:	930c      	str	r3, [sp, #48]	; 0x30
    4a0e:	f000 fd24 	bl	545a <__i2b>
    4a12:	0006      	movs	r6, r0
    4a14:	2c00      	cmp	r4, #0
    4a16:	dd0e      	ble.n	4a36 <_dtoa_r+0x782>
    4a18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4a1a:	2b00      	cmp	r3, #0
    4a1c:	dd0b      	ble.n	4a36 <_dtoa_r+0x782>
    4a1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4a20:	0023      	movs	r3, r4
    4a22:	4294      	cmp	r4, r2
    4a24:	dd00      	ble.n	4a28 <_dtoa_r+0x774>
    4a26:	0013      	movs	r3, r2
    4a28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4a2a:	1ae4      	subs	r4, r4, r3
    4a2c:	1ad2      	subs	r2, r2, r3
    4a2e:	920b      	str	r2, [sp, #44]	; 0x2c
    4a30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4a32:	1ad3      	subs	r3, r2, r3
    4a34:	930c      	str	r3, [sp, #48]	; 0x30
    4a36:	9b08      	ldr	r3, [sp, #32]
    4a38:	2b00      	cmp	r3, #0
    4a3a:	d01e      	beq.n	4a7a <_dtoa_r+0x7c6>
    4a3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4a3e:	2b00      	cmp	r3, #0
    4a40:	d05f      	beq.n	4b02 <_dtoa_r+0x84e>
    4a42:	2d00      	cmp	r5, #0
    4a44:	dd11      	ble.n	4a6a <_dtoa_r+0x7b6>
    4a46:	0031      	movs	r1, r6
    4a48:	002a      	movs	r2, r5
    4a4a:	9804      	ldr	r0, [sp, #16]
    4a4c:	f000 fd9e 	bl	558c <__pow5mult>
    4a50:	9a05      	ldr	r2, [sp, #20]
    4a52:	0001      	movs	r1, r0
    4a54:	0006      	movs	r6, r0
    4a56:	9804      	ldr	r0, [sp, #16]
    4a58:	f000 fd08 	bl	546c <__multiply>
    4a5c:	9905      	ldr	r1, [sp, #20]
    4a5e:	9010      	str	r0, [sp, #64]	; 0x40
    4a60:	9804      	ldr	r0, [sp, #16]
    4a62:	f000 fc5c 	bl	531e <_Bfree>
    4a66:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4a68:	9305      	str	r3, [sp, #20]
    4a6a:	9b08      	ldr	r3, [sp, #32]
    4a6c:	1b5a      	subs	r2, r3, r5
    4a6e:	d004      	beq.n	4a7a <_dtoa_r+0x7c6>
    4a70:	9905      	ldr	r1, [sp, #20]
    4a72:	9804      	ldr	r0, [sp, #16]
    4a74:	f000 fd8a 	bl	558c <__pow5mult>
    4a78:	9005      	str	r0, [sp, #20]
    4a7a:	2101      	movs	r1, #1
    4a7c:	9804      	ldr	r0, [sp, #16]
    4a7e:	f000 fcec 	bl	545a <__i2b>
    4a82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4a84:	9008      	str	r0, [sp, #32]
    4a86:	2b00      	cmp	r3, #0
    4a88:	dd3d      	ble.n	4b06 <_dtoa_r+0x852>
    4a8a:	001a      	movs	r2, r3
    4a8c:	0001      	movs	r1, r0
    4a8e:	9804      	ldr	r0, [sp, #16]
    4a90:	f000 fd7c 	bl	558c <__pow5mult>
    4a94:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4a96:	9008      	str	r0, [sp, #32]
    4a98:	2500      	movs	r5, #0
    4a9a:	2b01      	cmp	r3, #1
    4a9c:	dc3b      	bgt.n	4b16 <_dtoa_r+0x862>
    4a9e:	2500      	movs	r5, #0
    4aa0:	9b06      	ldr	r3, [sp, #24]
    4aa2:	42ab      	cmp	r3, r5
    4aa4:	d133      	bne.n	4b0e <_dtoa_r+0x85a>
    4aa6:	9b07      	ldr	r3, [sp, #28]
    4aa8:	031b      	lsls	r3, r3, #12
    4aaa:	42ab      	cmp	r3, r5
    4aac:	d12f      	bne.n	4b0e <_dtoa_r+0x85a>
    4aae:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4ab0:	9a07      	ldr	r2, [sp, #28]
    4ab2:	4213      	tst	r3, r2
    4ab4:	d02b      	beq.n	4b0e <_dtoa_r+0x85a>
    4ab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4ab8:	3501      	adds	r5, #1
    4aba:	3301      	adds	r3, #1
    4abc:	930b      	str	r3, [sp, #44]	; 0x2c
    4abe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4ac0:	3301      	adds	r3, #1
    4ac2:	930c      	str	r3, [sp, #48]	; 0x30
    4ac4:	e023      	b.n	4b0e <_dtoa_r+0x85a>
    4ac6:	2336      	movs	r3, #54	; 0x36
    4ac8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    4aca:	1a9b      	subs	r3, r3, r2
    4acc:	e795      	b.n	49fa <_dtoa_r+0x746>
    4ace:	9b08      	ldr	r3, [sp, #32]
    4ad0:	1e7d      	subs	r5, r7, #1
    4ad2:	42ab      	cmp	r3, r5
    4ad4:	db06      	blt.n	4ae4 <_dtoa_r+0x830>
    4ad6:	1b5d      	subs	r5, r3, r5
    4ad8:	2f00      	cmp	r7, #0
    4ada:	da0b      	bge.n	4af4 <_dtoa_r+0x840>
    4adc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4ade:	1bdc      	subs	r4, r3, r7
    4ae0:	2300      	movs	r3, #0
    4ae2:	e78c      	b.n	49fe <_dtoa_r+0x74a>
    4ae4:	9b08      	ldr	r3, [sp, #32]
    4ae6:	9508      	str	r5, [sp, #32]
    4ae8:	1aea      	subs	r2, r5, r3
    4aea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4aec:	2500      	movs	r5, #0
    4aee:	189b      	adds	r3, r3, r2
    4af0:	930f      	str	r3, [sp, #60]	; 0x3c
    4af2:	e7f1      	b.n	4ad8 <_dtoa_r+0x824>
    4af4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4af6:	003b      	movs	r3, r7
    4af8:	e781      	b.n	49fe <_dtoa_r+0x74a>
    4afa:	9d08      	ldr	r5, [sp, #32]
    4afc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4afe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4b00:	e788      	b.n	4a14 <_dtoa_r+0x760>
    4b02:	9a08      	ldr	r2, [sp, #32]
    4b04:	e7b4      	b.n	4a70 <_dtoa_r+0x7bc>
    4b06:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4b08:	2500      	movs	r5, #0
    4b0a:	2b01      	cmp	r3, #1
    4b0c:	ddc7      	ble.n	4a9e <_dtoa_r+0x7ea>
    4b0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4b10:	2001      	movs	r0, #1
    4b12:	2b00      	cmp	r3, #0
    4b14:	d00b      	beq.n	4b2e <_dtoa_r+0x87a>
    4b16:	9b08      	ldr	r3, [sp, #32]
    4b18:	9a08      	ldr	r2, [sp, #32]
    4b1a:	691b      	ldr	r3, [r3, #16]
    4b1c:	930f      	str	r3, [sp, #60]	; 0x3c
    4b1e:	3303      	adds	r3, #3
    4b20:	009b      	lsls	r3, r3, #2
    4b22:	18d3      	adds	r3, r2, r3
    4b24:	6858      	ldr	r0, [r3, #4]
    4b26:	f000 fc4f 	bl	53c8 <__hi0bits>
    4b2a:	2320      	movs	r3, #32
    4b2c:	1a18      	subs	r0, r3, r0
    4b2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4b30:	18c0      	adds	r0, r0, r3
    4b32:	231f      	movs	r3, #31
    4b34:	4018      	ands	r0, r3
    4b36:	d100      	bne.n	4b3a <_dtoa_r+0x886>
    4b38:	e0ab      	b.n	4c92 <_dtoa_r+0x9de>
    4b3a:	3301      	adds	r3, #1
    4b3c:	1a1b      	subs	r3, r3, r0
    4b3e:	2b04      	cmp	r3, #4
    4b40:	dc00      	bgt.n	4b44 <_dtoa_r+0x890>
    4b42:	e09b      	b.n	4c7c <_dtoa_r+0x9c8>
    4b44:	231c      	movs	r3, #28
    4b46:	1a18      	subs	r0, r3, r0
    4b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4b4a:	1824      	adds	r4, r4, r0
    4b4c:	181b      	adds	r3, r3, r0
    4b4e:	930b      	str	r3, [sp, #44]	; 0x2c
    4b50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4b52:	181b      	adds	r3, r3, r0
    4b54:	930c      	str	r3, [sp, #48]	; 0x30
    4b56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4b58:	2b00      	cmp	r3, #0
    4b5a:	dd05      	ble.n	4b68 <_dtoa_r+0x8b4>
    4b5c:	001a      	movs	r2, r3
    4b5e:	9905      	ldr	r1, [sp, #20]
    4b60:	9804      	ldr	r0, [sp, #16]
    4b62:	f000 fd65 	bl	5630 <__lshift>
    4b66:	9005      	str	r0, [sp, #20]
    4b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4b6a:	2b00      	cmp	r3, #0
    4b6c:	dd05      	ble.n	4b7a <_dtoa_r+0x8c6>
    4b6e:	001a      	movs	r2, r3
    4b70:	9908      	ldr	r1, [sp, #32]
    4b72:	9804      	ldr	r0, [sp, #16]
    4b74:	f000 fd5c 	bl	5630 <__lshift>
    4b78:	9008      	str	r0, [sp, #32]
    4b7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4b7c:	2b00      	cmp	r3, #0
    4b7e:	d100      	bne.n	4b82 <_dtoa_r+0x8ce>
    4b80:	e089      	b.n	4c96 <_dtoa_r+0x9e2>
    4b82:	9908      	ldr	r1, [sp, #32]
    4b84:	9805      	ldr	r0, [sp, #20]
    4b86:	f000 fda4 	bl	56d2 <__mcmp>
    4b8a:	2800      	cmp	r0, #0
    4b8c:	db00      	blt.n	4b90 <_dtoa_r+0x8dc>
    4b8e:	e082      	b.n	4c96 <_dtoa_r+0x9e2>
    4b90:	9b03      	ldr	r3, [sp, #12]
    4b92:	220a      	movs	r2, #10
    4b94:	3b01      	subs	r3, #1
    4b96:	9303      	str	r3, [sp, #12]
    4b98:	9905      	ldr	r1, [sp, #20]
    4b9a:	2300      	movs	r3, #0
    4b9c:	9804      	ldr	r0, [sp, #16]
    4b9e:	f000 fbd7 	bl	5350 <__multadd>
    4ba2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4ba4:	9005      	str	r0, [sp, #20]
    4ba6:	2b00      	cmp	r3, #0
    4ba8:	d100      	bne.n	4bac <_dtoa_r+0x8f8>
    4baa:	e15d      	b.n	4e68 <_dtoa_r+0xbb4>
    4bac:	2300      	movs	r3, #0
    4bae:	0031      	movs	r1, r6
    4bb0:	220a      	movs	r2, #10
    4bb2:	9804      	ldr	r0, [sp, #16]
    4bb4:	f000 fbcc 	bl	5350 <__multadd>
    4bb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4bba:	0006      	movs	r6, r0
    4bbc:	2b00      	cmp	r3, #0
    4bbe:	dc02      	bgt.n	4bc6 <_dtoa_r+0x912>
    4bc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4bc2:	2b02      	cmp	r3, #2
    4bc4:	dc6d      	bgt.n	4ca2 <_dtoa_r+0x9ee>
    4bc6:	2c00      	cmp	r4, #0
    4bc8:	dd05      	ble.n	4bd6 <_dtoa_r+0x922>
    4bca:	0031      	movs	r1, r6
    4bcc:	0022      	movs	r2, r4
    4bce:	9804      	ldr	r0, [sp, #16]
    4bd0:	f000 fd2e 	bl	5630 <__lshift>
    4bd4:	0006      	movs	r6, r0
    4bd6:	0030      	movs	r0, r6
    4bd8:	2d00      	cmp	r5, #0
    4bda:	d011      	beq.n	4c00 <_dtoa_r+0x94c>
    4bdc:	6871      	ldr	r1, [r6, #4]
    4bde:	9804      	ldr	r0, [sp, #16]
    4be0:	f000 fb65 	bl	52ae <_Balloc>
    4be4:	0031      	movs	r1, r6
    4be6:	0004      	movs	r4, r0
    4be8:	6933      	ldr	r3, [r6, #16]
    4bea:	310c      	adds	r1, #12
    4bec:	1c9a      	adds	r2, r3, #2
    4bee:	0092      	lsls	r2, r2, #2
    4bf0:	300c      	adds	r0, #12
    4bf2:	f7fe fc4b 	bl	348c <memcpy>
    4bf6:	2201      	movs	r2, #1
    4bf8:	0021      	movs	r1, r4
    4bfa:	9804      	ldr	r0, [sp, #16]
    4bfc:	f000 fd18 	bl	5630 <__lshift>
    4c00:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4c04:	3f01      	subs	r7, #1
    4c06:	930b      	str	r3, [sp, #44]	; 0x2c
    4c08:	19db      	adds	r3, r3, r7
    4c0a:	0037      	movs	r7, r6
    4c0c:	0006      	movs	r6, r0
    4c0e:	930f      	str	r3, [sp, #60]	; 0x3c
    4c10:	9908      	ldr	r1, [sp, #32]
    4c12:	9805      	ldr	r0, [sp, #20]
    4c14:	f7ff faca 	bl	41ac <quorem>
    4c18:	0039      	movs	r1, r7
    4c1a:	900d      	str	r0, [sp, #52]	; 0x34
    4c1c:	0004      	movs	r4, r0
    4c1e:	9805      	ldr	r0, [sp, #20]
    4c20:	f000 fd57 	bl	56d2 <__mcmp>
    4c24:	0032      	movs	r2, r6
    4c26:	900e      	str	r0, [sp, #56]	; 0x38
    4c28:	9908      	ldr	r1, [sp, #32]
    4c2a:	9804      	ldr	r0, [sp, #16]
    4c2c:	f000 fd6a 	bl	5704 <__mdiff>
    4c30:	2301      	movs	r3, #1
    4c32:	930c      	str	r3, [sp, #48]	; 0x30
    4c34:	68c3      	ldr	r3, [r0, #12]
    4c36:	3430      	adds	r4, #48	; 0x30
    4c38:	0005      	movs	r5, r0
    4c3a:	2b00      	cmp	r3, #0
    4c3c:	d104      	bne.n	4c48 <_dtoa_r+0x994>
    4c3e:	0001      	movs	r1, r0
    4c40:	9805      	ldr	r0, [sp, #20]
    4c42:	f000 fd46 	bl	56d2 <__mcmp>
    4c46:	900c      	str	r0, [sp, #48]	; 0x30
    4c48:	0029      	movs	r1, r5
    4c4a:	9804      	ldr	r0, [sp, #16]
    4c4c:	f000 fb67 	bl	531e <_Bfree>
    4c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4c52:	9a22      	ldr	r2, [sp, #136]	; 0x88
    4c54:	4313      	orrs	r3, r2
    4c56:	d000      	beq.n	4c5a <_dtoa_r+0x9a6>
    4c58:	e089      	b.n	4d6e <_dtoa_r+0xaba>
    4c5a:	9a06      	ldr	r2, [sp, #24]
    4c5c:	3301      	adds	r3, #1
    4c5e:	4213      	tst	r3, r2
    4c60:	d000      	beq.n	4c64 <_dtoa_r+0x9b0>
    4c62:	e084      	b.n	4d6e <_dtoa_r+0xaba>
    4c64:	2c39      	cmp	r4, #57	; 0x39
    4c66:	d100      	bne.n	4c6a <_dtoa_r+0x9b6>
    4c68:	e0a3      	b.n	4db2 <_dtoa_r+0xafe>
    4c6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4c6c:	2b00      	cmp	r3, #0
    4c6e:	dd01      	ble.n	4c74 <_dtoa_r+0x9c0>
    4c70:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    4c72:	3431      	adds	r4, #49	; 0x31
    4c74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4c76:	1c5d      	adds	r5, r3, #1
    4c78:	701c      	strb	r4, [r3, #0]
    4c7a:	e027      	b.n	4ccc <_dtoa_r+0xa18>
    4c7c:	2b04      	cmp	r3, #4
    4c7e:	d100      	bne.n	4c82 <_dtoa_r+0x9ce>
    4c80:	e769      	b.n	4b56 <_dtoa_r+0x8a2>
    4c82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4c84:	331c      	adds	r3, #28
    4c86:	18d2      	adds	r2, r2, r3
    4c88:	920b      	str	r2, [sp, #44]	; 0x2c
    4c8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4c8c:	18e4      	adds	r4, r4, r3
    4c8e:	18d3      	adds	r3, r2, r3
    4c90:	e760      	b.n	4b54 <_dtoa_r+0x8a0>
    4c92:	0003      	movs	r3, r0
    4c94:	e7f5      	b.n	4c82 <_dtoa_r+0x9ce>
    4c96:	2f00      	cmp	r7, #0
    4c98:	dc3c      	bgt.n	4d14 <_dtoa_r+0xa60>
    4c9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4c9c:	2b02      	cmp	r3, #2
    4c9e:	dd39      	ble.n	4d14 <_dtoa_r+0xa60>
    4ca0:	970d      	str	r7, [sp, #52]	; 0x34
    4ca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4ca4:	2b00      	cmp	r3, #0
    4ca6:	d10c      	bne.n	4cc2 <_dtoa_r+0xa0e>
    4ca8:	9908      	ldr	r1, [sp, #32]
    4caa:	2205      	movs	r2, #5
    4cac:	9804      	ldr	r0, [sp, #16]
    4cae:	f000 fb4f 	bl	5350 <__multadd>
    4cb2:	9008      	str	r0, [sp, #32]
    4cb4:	0001      	movs	r1, r0
    4cb6:	9805      	ldr	r0, [sp, #20]
    4cb8:	f000 fd0b 	bl	56d2 <__mcmp>
    4cbc:	2800      	cmp	r0, #0
    4cbe:	dd00      	ble.n	4cc2 <_dtoa_r+0xa0e>
    4cc0:	e55a      	b.n	4778 <_dtoa_r+0x4c4>
    4cc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    4cc4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    4cc6:	43db      	mvns	r3, r3
    4cc8:	9303      	str	r3, [sp, #12]
    4cca:	2700      	movs	r7, #0
    4ccc:	9908      	ldr	r1, [sp, #32]
    4cce:	9804      	ldr	r0, [sp, #16]
    4cd0:	f000 fb25 	bl	531e <_Bfree>
    4cd4:	2e00      	cmp	r6, #0
    4cd6:	d100      	bne.n	4cda <_dtoa_r+0xa26>
    4cd8:	e63f      	b.n	495a <_dtoa_r+0x6a6>
    4cda:	2f00      	cmp	r7, #0
    4cdc:	d005      	beq.n	4cea <_dtoa_r+0xa36>
    4cde:	42b7      	cmp	r7, r6
    4ce0:	d003      	beq.n	4cea <_dtoa_r+0xa36>
    4ce2:	0039      	movs	r1, r7
    4ce4:	9804      	ldr	r0, [sp, #16]
    4ce6:	f000 fb1a 	bl	531e <_Bfree>
    4cea:	0031      	movs	r1, r6
    4cec:	9804      	ldr	r0, [sp, #16]
    4cee:	f000 fb16 	bl	531e <_Bfree>
    4cf2:	e632      	b.n	495a <_dtoa_r+0x6a6>
    4cf4:	9508      	str	r5, [sp, #32]
    4cf6:	002e      	movs	r6, r5
    4cf8:	e7e3      	b.n	4cc2 <_dtoa_r+0xa0e>
    4cfa:	2300      	movs	r3, #0
    4cfc:	9308      	str	r3, [sp, #32]
    4cfe:	001e      	movs	r6, r3
    4d00:	e7df      	b.n	4cc2 <_dtoa_r+0xa0e>
    4d02:	46c0      	nop			; (mov r8, r8)
    4d04:	40240000 	.word	0x40240000
    4d08:	00000433 	.word	0x00000433
    4d0c:	9603      	str	r6, [sp, #12]
    4d0e:	9508      	str	r5, [sp, #32]
    4d10:	002e      	movs	r6, r5
    4d12:	e531      	b.n	4778 <_dtoa_r+0x4c4>
    4d14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4d16:	970d      	str	r7, [sp, #52]	; 0x34
    4d18:	2b00      	cmp	r3, #0
    4d1a:	d000      	beq.n	4d1e <_dtoa_r+0xa6a>
    4d1c:	e753      	b.n	4bc6 <_dtoa_r+0x912>
    4d1e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    4d20:	9908      	ldr	r1, [sp, #32]
    4d22:	9805      	ldr	r0, [sp, #20]
    4d24:	f7ff fa42 	bl	41ac <quorem>
    4d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4d2a:	3030      	adds	r0, #48	; 0x30
    4d2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4d2e:	7028      	strb	r0, [r5, #0]
    4d30:	3501      	adds	r5, #1
    4d32:	0004      	movs	r4, r0
    4d34:	1aeb      	subs	r3, r5, r3
    4d36:	429a      	cmp	r2, r3
    4d38:	dc78      	bgt.n	4e2c <_dtoa_r+0xb78>
    4d3a:	1e15      	subs	r5, r2, #0
    4d3c:	dc00      	bgt.n	4d40 <_dtoa_r+0xa8c>
    4d3e:	2501      	movs	r5, #1
    4d40:	2700      	movs	r7, #0
    4d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4d44:	195d      	adds	r5, r3, r5
    4d46:	9905      	ldr	r1, [sp, #20]
    4d48:	2201      	movs	r2, #1
    4d4a:	9804      	ldr	r0, [sp, #16]
    4d4c:	f000 fc70 	bl	5630 <__lshift>
    4d50:	9908      	ldr	r1, [sp, #32]
    4d52:	9005      	str	r0, [sp, #20]
    4d54:	f000 fcbd 	bl	56d2 <__mcmp>
    4d58:	2800      	cmp	r0, #0
    4d5a:	dc2f      	bgt.n	4dbc <_dtoa_r+0xb08>
    4d5c:	d101      	bne.n	4d62 <_dtoa_r+0xaae>
    4d5e:	07e3      	lsls	r3, r4, #31
    4d60:	d42c      	bmi.n	4dbc <_dtoa_r+0xb08>
    4d62:	1e6b      	subs	r3, r5, #1
    4d64:	781a      	ldrb	r2, [r3, #0]
    4d66:	2a30      	cmp	r2, #48	; 0x30
    4d68:	d1b0      	bne.n	4ccc <_dtoa_r+0xa18>
    4d6a:	001d      	movs	r5, r3
    4d6c:	e7f9      	b.n	4d62 <_dtoa_r+0xaae>
    4d6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4d70:	2b00      	cmp	r3, #0
    4d72:	db07      	blt.n	4d84 <_dtoa_r+0xad0>
    4d74:	001d      	movs	r5, r3
    4d76:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4d78:	431d      	orrs	r5, r3
    4d7a:	d126      	bne.n	4dca <_dtoa_r+0xb16>
    4d7c:	2301      	movs	r3, #1
    4d7e:	9a06      	ldr	r2, [sp, #24]
    4d80:	4213      	tst	r3, r2
    4d82:	d122      	bne.n	4dca <_dtoa_r+0xb16>
    4d84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4d86:	2b00      	cmp	r3, #0
    4d88:	dc00      	bgt.n	4d8c <_dtoa_r+0xad8>
    4d8a:	e773      	b.n	4c74 <_dtoa_r+0x9c0>
    4d8c:	9905      	ldr	r1, [sp, #20]
    4d8e:	2201      	movs	r2, #1
    4d90:	9804      	ldr	r0, [sp, #16]
    4d92:	f000 fc4d 	bl	5630 <__lshift>
    4d96:	9908      	ldr	r1, [sp, #32]
    4d98:	9005      	str	r0, [sp, #20]
    4d9a:	f000 fc9a 	bl	56d2 <__mcmp>
    4d9e:	2800      	cmp	r0, #0
    4da0:	dc04      	bgt.n	4dac <_dtoa_r+0xaf8>
    4da2:	d000      	beq.n	4da6 <_dtoa_r+0xaf2>
    4da4:	e766      	b.n	4c74 <_dtoa_r+0x9c0>
    4da6:	07e3      	lsls	r3, r4, #31
    4da8:	d400      	bmi.n	4dac <_dtoa_r+0xaf8>
    4daa:	e763      	b.n	4c74 <_dtoa_r+0x9c0>
    4dac:	2c39      	cmp	r4, #57	; 0x39
    4dae:	d000      	beq.n	4db2 <_dtoa_r+0xafe>
    4db0:	e75e      	b.n	4c70 <_dtoa_r+0x9bc>
    4db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4db4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4db6:	1c5d      	adds	r5, r3, #1
    4db8:	2339      	movs	r3, #57	; 0x39
    4dba:	7013      	strb	r3, [r2, #0]
    4dbc:	1e6b      	subs	r3, r5, #1
    4dbe:	781a      	ldrb	r2, [r3, #0]
    4dc0:	2a39      	cmp	r2, #57	; 0x39
    4dc2:	d03b      	beq.n	4e3c <_dtoa_r+0xb88>
    4dc4:	3201      	adds	r2, #1
    4dc6:	701a      	strb	r2, [r3, #0]
    4dc8:	e780      	b.n	4ccc <_dtoa_r+0xa18>
    4dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4dcc:	3301      	adds	r3, #1
    4dce:	930d      	str	r3, [sp, #52]	; 0x34
    4dd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4dd2:	2b00      	cmp	r3, #0
    4dd4:	dd05      	ble.n	4de2 <_dtoa_r+0xb2e>
    4dd6:	2c39      	cmp	r4, #57	; 0x39
    4dd8:	d0eb      	beq.n	4db2 <_dtoa_r+0xafe>
    4dda:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4ddc:	3401      	adds	r4, #1
    4dde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4de0:	e74a      	b.n	4c78 <_dtoa_r+0x9c4>
    4de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4de4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4de6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4de8:	701c      	strb	r4, [r3, #0]
    4dea:	4293      	cmp	r3, r2
    4dec:	d0ab      	beq.n	4d46 <_dtoa_r+0xa92>
    4dee:	2300      	movs	r3, #0
    4df0:	220a      	movs	r2, #10
    4df2:	9905      	ldr	r1, [sp, #20]
    4df4:	9804      	ldr	r0, [sp, #16]
    4df6:	f000 faab 	bl	5350 <__multadd>
    4dfa:	2300      	movs	r3, #0
    4dfc:	9005      	str	r0, [sp, #20]
    4dfe:	220a      	movs	r2, #10
    4e00:	0039      	movs	r1, r7
    4e02:	9804      	ldr	r0, [sp, #16]
    4e04:	42b7      	cmp	r7, r6
    4e06:	d106      	bne.n	4e16 <_dtoa_r+0xb62>
    4e08:	f000 faa2 	bl	5350 <__multadd>
    4e0c:	0007      	movs	r7, r0
    4e0e:	0006      	movs	r6, r0
    4e10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4e12:	930b      	str	r3, [sp, #44]	; 0x2c
    4e14:	e6fc      	b.n	4c10 <_dtoa_r+0x95c>
    4e16:	f000 fa9b 	bl	5350 <__multadd>
    4e1a:	0031      	movs	r1, r6
    4e1c:	0007      	movs	r7, r0
    4e1e:	2300      	movs	r3, #0
    4e20:	220a      	movs	r2, #10
    4e22:	9804      	ldr	r0, [sp, #16]
    4e24:	f000 fa94 	bl	5350 <__multadd>
    4e28:	0006      	movs	r6, r0
    4e2a:	e7f1      	b.n	4e10 <_dtoa_r+0xb5c>
    4e2c:	2300      	movs	r3, #0
    4e2e:	220a      	movs	r2, #10
    4e30:	9905      	ldr	r1, [sp, #20]
    4e32:	9804      	ldr	r0, [sp, #16]
    4e34:	f000 fa8c 	bl	5350 <__multadd>
    4e38:	9005      	str	r0, [sp, #20]
    4e3a:	e771      	b.n	4d20 <_dtoa_r+0xa6c>
    4e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4e3e:	429a      	cmp	r2, r3
    4e40:	d105      	bne.n	4e4e <_dtoa_r+0xb9a>
    4e42:	9b03      	ldr	r3, [sp, #12]
    4e44:	3301      	adds	r3, #1
    4e46:	9303      	str	r3, [sp, #12]
    4e48:	2331      	movs	r3, #49	; 0x31
    4e4a:	7013      	strb	r3, [r2, #0]
    4e4c:	e73e      	b.n	4ccc <_dtoa_r+0xa18>
    4e4e:	001d      	movs	r5, r3
    4e50:	e7b4      	b.n	4dbc <_dtoa_r+0xb08>
    4e52:	4b0a      	ldr	r3, [pc, #40]	; (4e7c <_dtoa_r+0xbc8>)
    4e54:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4e56:	930a      	str	r3, [sp, #40]	; 0x28
    4e58:	4b09      	ldr	r3, [pc, #36]	; (4e80 <_dtoa_r+0xbcc>)
    4e5a:	2a00      	cmp	r2, #0
    4e5c:	d001      	beq.n	4e62 <_dtoa_r+0xbae>
    4e5e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4e60:	6013      	str	r3, [r2, #0]
    4e62:	980a      	ldr	r0, [sp, #40]	; 0x28
    4e64:	b01d      	add	sp, #116	; 0x74
    4e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4e6a:	2b00      	cmp	r3, #0
    4e6c:	dd00      	ble.n	4e70 <_dtoa_r+0xbbc>
    4e6e:	e756      	b.n	4d1e <_dtoa_r+0xa6a>
    4e70:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4e72:	2b02      	cmp	r3, #2
    4e74:	dc00      	bgt.n	4e78 <_dtoa_r+0xbc4>
    4e76:	e752      	b.n	4d1e <_dtoa_r+0xa6a>
    4e78:	e713      	b.n	4ca2 <_dtoa_r+0x9ee>
    4e7a:	46c0      	nop			; (mov r8, r8)
    4e7c:	00008f00 	.word	0x00008f00
    4e80:	00008f08 	.word	0x00008f08

00004e84 <__sflush_r>:
    4e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4e86:	898a      	ldrh	r2, [r1, #12]
    4e88:	0005      	movs	r5, r0
    4e8a:	000c      	movs	r4, r1
    4e8c:	0713      	lsls	r3, r2, #28
    4e8e:	d460      	bmi.n	4f52 <__sflush_r+0xce>
    4e90:	684b      	ldr	r3, [r1, #4]
    4e92:	2b00      	cmp	r3, #0
    4e94:	dc04      	bgt.n	4ea0 <__sflush_r+0x1c>
    4e96:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4e98:	2b00      	cmp	r3, #0
    4e9a:	dc01      	bgt.n	4ea0 <__sflush_r+0x1c>
    4e9c:	2000      	movs	r0, #0
    4e9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4ea0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4ea2:	2f00      	cmp	r7, #0
    4ea4:	d0fa      	beq.n	4e9c <__sflush_r+0x18>
    4ea6:	2300      	movs	r3, #0
    4ea8:	682e      	ldr	r6, [r5, #0]
    4eaa:	602b      	str	r3, [r5, #0]
    4eac:	2380      	movs	r3, #128	; 0x80
    4eae:	015b      	lsls	r3, r3, #5
    4eb0:	401a      	ands	r2, r3
    4eb2:	d034      	beq.n	4f1e <__sflush_r+0x9a>
    4eb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4eb6:	89a3      	ldrh	r3, [r4, #12]
    4eb8:	075b      	lsls	r3, r3, #29
    4eba:	d506      	bpl.n	4eca <__sflush_r+0x46>
    4ebc:	6863      	ldr	r3, [r4, #4]
    4ebe:	1ac0      	subs	r0, r0, r3
    4ec0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4ec2:	2b00      	cmp	r3, #0
    4ec4:	d001      	beq.n	4eca <__sflush_r+0x46>
    4ec6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4ec8:	1ac0      	subs	r0, r0, r3
    4eca:	0002      	movs	r2, r0
    4ecc:	6a21      	ldr	r1, [r4, #32]
    4ece:	2300      	movs	r3, #0
    4ed0:	0028      	movs	r0, r5
    4ed2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4ed4:	47b8      	blx	r7
    4ed6:	89a1      	ldrh	r1, [r4, #12]
    4ed8:	1c43      	adds	r3, r0, #1
    4eda:	d106      	bne.n	4eea <__sflush_r+0x66>
    4edc:	682b      	ldr	r3, [r5, #0]
    4ede:	2b1d      	cmp	r3, #29
    4ee0:	d831      	bhi.n	4f46 <__sflush_r+0xc2>
    4ee2:	4a2c      	ldr	r2, [pc, #176]	; (4f94 <__sflush_r+0x110>)
    4ee4:	40da      	lsrs	r2, r3
    4ee6:	07d3      	lsls	r3, r2, #31
    4ee8:	d52d      	bpl.n	4f46 <__sflush_r+0xc2>
    4eea:	2300      	movs	r3, #0
    4eec:	6063      	str	r3, [r4, #4]
    4eee:	6923      	ldr	r3, [r4, #16]
    4ef0:	6023      	str	r3, [r4, #0]
    4ef2:	04cb      	lsls	r3, r1, #19
    4ef4:	d505      	bpl.n	4f02 <__sflush_r+0x7e>
    4ef6:	1c43      	adds	r3, r0, #1
    4ef8:	d102      	bne.n	4f00 <__sflush_r+0x7c>
    4efa:	682b      	ldr	r3, [r5, #0]
    4efc:	2b00      	cmp	r3, #0
    4efe:	d100      	bne.n	4f02 <__sflush_r+0x7e>
    4f00:	6560      	str	r0, [r4, #84]	; 0x54
    4f02:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4f04:	602e      	str	r6, [r5, #0]
    4f06:	2900      	cmp	r1, #0
    4f08:	d0c8      	beq.n	4e9c <__sflush_r+0x18>
    4f0a:	0023      	movs	r3, r4
    4f0c:	3344      	adds	r3, #68	; 0x44
    4f0e:	4299      	cmp	r1, r3
    4f10:	d002      	beq.n	4f18 <__sflush_r+0x94>
    4f12:	0028      	movs	r0, r5
    4f14:	f000 fcbc 	bl	5890 <_free_r>
    4f18:	2000      	movs	r0, #0
    4f1a:	6360      	str	r0, [r4, #52]	; 0x34
    4f1c:	e7bf      	b.n	4e9e <__sflush_r+0x1a>
    4f1e:	2301      	movs	r3, #1
    4f20:	6a21      	ldr	r1, [r4, #32]
    4f22:	0028      	movs	r0, r5
    4f24:	47b8      	blx	r7
    4f26:	1c43      	adds	r3, r0, #1
    4f28:	d1c5      	bne.n	4eb6 <__sflush_r+0x32>
    4f2a:	682b      	ldr	r3, [r5, #0]
    4f2c:	2b00      	cmp	r3, #0
    4f2e:	d0c2      	beq.n	4eb6 <__sflush_r+0x32>
    4f30:	2b1d      	cmp	r3, #29
    4f32:	d001      	beq.n	4f38 <__sflush_r+0xb4>
    4f34:	2b16      	cmp	r3, #22
    4f36:	d101      	bne.n	4f3c <__sflush_r+0xb8>
    4f38:	602e      	str	r6, [r5, #0]
    4f3a:	e7af      	b.n	4e9c <__sflush_r+0x18>
    4f3c:	2340      	movs	r3, #64	; 0x40
    4f3e:	89a2      	ldrh	r2, [r4, #12]
    4f40:	4313      	orrs	r3, r2
    4f42:	81a3      	strh	r3, [r4, #12]
    4f44:	e7ab      	b.n	4e9e <__sflush_r+0x1a>
    4f46:	2340      	movs	r3, #64	; 0x40
    4f48:	430b      	orrs	r3, r1
    4f4a:	2001      	movs	r0, #1
    4f4c:	81a3      	strh	r3, [r4, #12]
    4f4e:	4240      	negs	r0, r0
    4f50:	e7a5      	b.n	4e9e <__sflush_r+0x1a>
    4f52:	690f      	ldr	r7, [r1, #16]
    4f54:	2f00      	cmp	r7, #0
    4f56:	d0a1      	beq.n	4e9c <__sflush_r+0x18>
    4f58:	680b      	ldr	r3, [r1, #0]
    4f5a:	600f      	str	r7, [r1, #0]
    4f5c:	1bdb      	subs	r3, r3, r7
    4f5e:	9301      	str	r3, [sp, #4]
    4f60:	2300      	movs	r3, #0
    4f62:	0792      	lsls	r2, r2, #30
    4f64:	d100      	bne.n	4f68 <__sflush_r+0xe4>
    4f66:	694b      	ldr	r3, [r1, #20]
    4f68:	60a3      	str	r3, [r4, #8]
    4f6a:	9b01      	ldr	r3, [sp, #4]
    4f6c:	2b00      	cmp	r3, #0
    4f6e:	dc00      	bgt.n	4f72 <__sflush_r+0xee>
    4f70:	e794      	b.n	4e9c <__sflush_r+0x18>
    4f72:	9b01      	ldr	r3, [sp, #4]
    4f74:	003a      	movs	r2, r7
    4f76:	6a21      	ldr	r1, [r4, #32]
    4f78:	0028      	movs	r0, r5
    4f7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4f7c:	47b0      	blx	r6
    4f7e:	2800      	cmp	r0, #0
    4f80:	dc03      	bgt.n	4f8a <__sflush_r+0x106>
    4f82:	2340      	movs	r3, #64	; 0x40
    4f84:	89a2      	ldrh	r2, [r4, #12]
    4f86:	4313      	orrs	r3, r2
    4f88:	e7df      	b.n	4f4a <__sflush_r+0xc6>
    4f8a:	9b01      	ldr	r3, [sp, #4]
    4f8c:	183f      	adds	r7, r7, r0
    4f8e:	1a1b      	subs	r3, r3, r0
    4f90:	9301      	str	r3, [sp, #4]
    4f92:	e7ea      	b.n	4f6a <__sflush_r+0xe6>
    4f94:	20400001 	.word	0x20400001

00004f98 <_fflush_r>:
    4f98:	690b      	ldr	r3, [r1, #16]
    4f9a:	b570      	push	{r4, r5, r6, lr}
    4f9c:	0005      	movs	r5, r0
    4f9e:	000c      	movs	r4, r1
    4fa0:	2b00      	cmp	r3, #0
    4fa2:	d101      	bne.n	4fa8 <_fflush_r+0x10>
    4fa4:	2000      	movs	r0, #0
    4fa6:	bd70      	pop	{r4, r5, r6, pc}
    4fa8:	2800      	cmp	r0, #0
    4faa:	d004      	beq.n	4fb6 <_fflush_r+0x1e>
    4fac:	6983      	ldr	r3, [r0, #24]
    4fae:	2b00      	cmp	r3, #0
    4fb0:	d101      	bne.n	4fb6 <_fflush_r+0x1e>
    4fb2:	f000 f85f 	bl	5074 <__sinit>
    4fb6:	4b0b      	ldr	r3, [pc, #44]	; (4fe4 <_fflush_r+0x4c>)
    4fb8:	429c      	cmp	r4, r3
    4fba:	d109      	bne.n	4fd0 <_fflush_r+0x38>
    4fbc:	686c      	ldr	r4, [r5, #4]
    4fbe:	220c      	movs	r2, #12
    4fc0:	5ea3      	ldrsh	r3, [r4, r2]
    4fc2:	2b00      	cmp	r3, #0
    4fc4:	d0ee      	beq.n	4fa4 <_fflush_r+0xc>
    4fc6:	0021      	movs	r1, r4
    4fc8:	0028      	movs	r0, r5
    4fca:	f7ff ff5b 	bl	4e84 <__sflush_r>
    4fce:	e7ea      	b.n	4fa6 <_fflush_r+0xe>
    4fd0:	4b05      	ldr	r3, [pc, #20]	; (4fe8 <_fflush_r+0x50>)
    4fd2:	429c      	cmp	r4, r3
    4fd4:	d101      	bne.n	4fda <_fflush_r+0x42>
    4fd6:	68ac      	ldr	r4, [r5, #8]
    4fd8:	e7f1      	b.n	4fbe <_fflush_r+0x26>
    4fda:	4b04      	ldr	r3, [pc, #16]	; (4fec <_fflush_r+0x54>)
    4fdc:	429c      	cmp	r4, r3
    4fde:	d1ee      	bne.n	4fbe <_fflush_r+0x26>
    4fe0:	68ec      	ldr	r4, [r5, #12]
    4fe2:	e7ec      	b.n	4fbe <_fflush_r+0x26>
    4fe4:	00008f30 	.word	0x00008f30
    4fe8:	00008f50 	.word	0x00008f50
    4fec:	00008f10 	.word	0x00008f10

00004ff0 <_cleanup_r>:
    4ff0:	b510      	push	{r4, lr}
    4ff2:	4902      	ldr	r1, [pc, #8]	; (4ffc <_cleanup_r+0xc>)
    4ff4:	f000 f8b2 	bl	515c <_fwalk_reent>
    4ff8:	bd10      	pop	{r4, pc}
    4ffa:	46c0      	nop			; (mov r8, r8)
    4ffc:	00004f99 	.word	0x00004f99

00005000 <std.isra.0>:
    5000:	2300      	movs	r3, #0
    5002:	b510      	push	{r4, lr}
    5004:	0004      	movs	r4, r0
    5006:	6003      	str	r3, [r0, #0]
    5008:	6043      	str	r3, [r0, #4]
    500a:	6083      	str	r3, [r0, #8]
    500c:	8181      	strh	r1, [r0, #12]
    500e:	6643      	str	r3, [r0, #100]	; 0x64
    5010:	81c2      	strh	r2, [r0, #14]
    5012:	6103      	str	r3, [r0, #16]
    5014:	6143      	str	r3, [r0, #20]
    5016:	6183      	str	r3, [r0, #24]
    5018:	0019      	movs	r1, r3
    501a:	2208      	movs	r2, #8
    501c:	305c      	adds	r0, #92	; 0x5c
    501e:	f7fe fa3e 	bl	349e <memset>
    5022:	4b05      	ldr	r3, [pc, #20]	; (5038 <std.isra.0+0x38>)
    5024:	6224      	str	r4, [r4, #32]
    5026:	6263      	str	r3, [r4, #36]	; 0x24
    5028:	4b04      	ldr	r3, [pc, #16]	; (503c <std.isra.0+0x3c>)
    502a:	62a3      	str	r3, [r4, #40]	; 0x28
    502c:	4b04      	ldr	r3, [pc, #16]	; (5040 <std.isra.0+0x40>)
    502e:	62e3      	str	r3, [r4, #44]	; 0x2c
    5030:	4b04      	ldr	r3, [pc, #16]	; (5044 <std.isra.0+0x44>)
    5032:	6323      	str	r3, [r4, #48]	; 0x30
    5034:	bd10      	pop	{r4, pc}
    5036:	46c0      	nop			; (mov r8, r8)
    5038:	00005c8d 	.word	0x00005c8d
    503c:	00005cb5 	.word	0x00005cb5
    5040:	00005ced 	.word	0x00005ced
    5044:	00005d19 	.word	0x00005d19

00005048 <__sfmoreglue>:
    5048:	b570      	push	{r4, r5, r6, lr}
    504a:	2568      	movs	r5, #104	; 0x68
    504c:	1e4a      	subs	r2, r1, #1
    504e:	4355      	muls	r5, r2
    5050:	000e      	movs	r6, r1
    5052:	0029      	movs	r1, r5
    5054:	3174      	adds	r1, #116	; 0x74
    5056:	f000 fc65 	bl	5924 <_malloc_r>
    505a:	1e04      	subs	r4, r0, #0
    505c:	d008      	beq.n	5070 <__sfmoreglue+0x28>
    505e:	2100      	movs	r1, #0
    5060:	002a      	movs	r2, r5
    5062:	6001      	str	r1, [r0, #0]
    5064:	6046      	str	r6, [r0, #4]
    5066:	300c      	adds	r0, #12
    5068:	60a0      	str	r0, [r4, #8]
    506a:	3268      	adds	r2, #104	; 0x68
    506c:	f7fe fa17 	bl	349e <memset>
    5070:	0020      	movs	r0, r4
    5072:	bd70      	pop	{r4, r5, r6, pc}

00005074 <__sinit>:
    5074:	6983      	ldr	r3, [r0, #24]
    5076:	b513      	push	{r0, r1, r4, lr}
    5078:	0004      	movs	r4, r0
    507a:	2b00      	cmp	r3, #0
    507c:	d128      	bne.n	50d0 <__sinit+0x5c>
    507e:	6483      	str	r3, [r0, #72]	; 0x48
    5080:	64c3      	str	r3, [r0, #76]	; 0x4c
    5082:	6503      	str	r3, [r0, #80]	; 0x50
    5084:	4b13      	ldr	r3, [pc, #76]	; (50d4 <__sinit+0x60>)
    5086:	4a14      	ldr	r2, [pc, #80]	; (50d8 <__sinit+0x64>)
    5088:	681b      	ldr	r3, [r3, #0]
    508a:	6282      	str	r2, [r0, #40]	; 0x28
    508c:	9301      	str	r3, [sp, #4]
    508e:	4298      	cmp	r0, r3
    5090:	d101      	bne.n	5096 <__sinit+0x22>
    5092:	2301      	movs	r3, #1
    5094:	6183      	str	r3, [r0, #24]
    5096:	0020      	movs	r0, r4
    5098:	f000 f820 	bl	50dc <__sfp>
    509c:	6060      	str	r0, [r4, #4]
    509e:	0020      	movs	r0, r4
    50a0:	f000 f81c 	bl	50dc <__sfp>
    50a4:	60a0      	str	r0, [r4, #8]
    50a6:	0020      	movs	r0, r4
    50a8:	f000 f818 	bl	50dc <__sfp>
    50ac:	2200      	movs	r2, #0
    50ae:	60e0      	str	r0, [r4, #12]
    50b0:	2104      	movs	r1, #4
    50b2:	6860      	ldr	r0, [r4, #4]
    50b4:	f7ff ffa4 	bl	5000 <std.isra.0>
    50b8:	2201      	movs	r2, #1
    50ba:	2109      	movs	r1, #9
    50bc:	68a0      	ldr	r0, [r4, #8]
    50be:	f7ff ff9f 	bl	5000 <std.isra.0>
    50c2:	2202      	movs	r2, #2
    50c4:	2112      	movs	r1, #18
    50c6:	68e0      	ldr	r0, [r4, #12]
    50c8:	f7ff ff9a 	bl	5000 <std.isra.0>
    50cc:	2301      	movs	r3, #1
    50ce:	61a3      	str	r3, [r4, #24]
    50d0:	bd13      	pop	{r0, r1, r4, pc}
    50d2:	46c0      	nop			; (mov r8, r8)
    50d4:	00008ec8 	.word	0x00008ec8
    50d8:	00004ff1 	.word	0x00004ff1

000050dc <__sfp>:
    50dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50de:	4b1e      	ldr	r3, [pc, #120]	; (5158 <__sfp+0x7c>)
    50e0:	0007      	movs	r7, r0
    50e2:	681e      	ldr	r6, [r3, #0]
    50e4:	69b3      	ldr	r3, [r6, #24]
    50e6:	2b00      	cmp	r3, #0
    50e8:	d102      	bne.n	50f0 <__sfp+0x14>
    50ea:	0030      	movs	r0, r6
    50ec:	f7ff ffc2 	bl	5074 <__sinit>
    50f0:	3648      	adds	r6, #72	; 0x48
    50f2:	68b4      	ldr	r4, [r6, #8]
    50f4:	6873      	ldr	r3, [r6, #4]
    50f6:	3b01      	subs	r3, #1
    50f8:	d504      	bpl.n	5104 <__sfp+0x28>
    50fa:	6833      	ldr	r3, [r6, #0]
    50fc:	2b00      	cmp	r3, #0
    50fe:	d007      	beq.n	5110 <__sfp+0x34>
    5100:	6836      	ldr	r6, [r6, #0]
    5102:	e7f6      	b.n	50f2 <__sfp+0x16>
    5104:	220c      	movs	r2, #12
    5106:	5ea5      	ldrsh	r5, [r4, r2]
    5108:	2d00      	cmp	r5, #0
    510a:	d00d      	beq.n	5128 <__sfp+0x4c>
    510c:	3468      	adds	r4, #104	; 0x68
    510e:	e7f2      	b.n	50f6 <__sfp+0x1a>
    5110:	2104      	movs	r1, #4
    5112:	0038      	movs	r0, r7
    5114:	f7ff ff98 	bl	5048 <__sfmoreglue>
    5118:	6030      	str	r0, [r6, #0]
    511a:	2800      	cmp	r0, #0
    511c:	d1f0      	bne.n	5100 <__sfp+0x24>
    511e:	230c      	movs	r3, #12
    5120:	0004      	movs	r4, r0
    5122:	603b      	str	r3, [r7, #0]
    5124:	0020      	movs	r0, r4
    5126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5128:	2301      	movs	r3, #1
    512a:	0020      	movs	r0, r4
    512c:	425b      	negs	r3, r3
    512e:	81e3      	strh	r3, [r4, #14]
    5130:	3302      	adds	r3, #2
    5132:	81a3      	strh	r3, [r4, #12]
    5134:	6665      	str	r5, [r4, #100]	; 0x64
    5136:	6025      	str	r5, [r4, #0]
    5138:	60a5      	str	r5, [r4, #8]
    513a:	6065      	str	r5, [r4, #4]
    513c:	6125      	str	r5, [r4, #16]
    513e:	6165      	str	r5, [r4, #20]
    5140:	61a5      	str	r5, [r4, #24]
    5142:	2208      	movs	r2, #8
    5144:	0029      	movs	r1, r5
    5146:	305c      	adds	r0, #92	; 0x5c
    5148:	f7fe f9a9 	bl	349e <memset>
    514c:	6365      	str	r5, [r4, #52]	; 0x34
    514e:	63a5      	str	r5, [r4, #56]	; 0x38
    5150:	64a5      	str	r5, [r4, #72]	; 0x48
    5152:	64e5      	str	r5, [r4, #76]	; 0x4c
    5154:	e7e6      	b.n	5124 <__sfp+0x48>
    5156:	46c0      	nop			; (mov r8, r8)
    5158:	00008ec8 	.word	0x00008ec8

0000515c <_fwalk_reent>:
    515c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    515e:	0004      	movs	r4, r0
    5160:	0007      	movs	r7, r0
    5162:	2600      	movs	r6, #0
    5164:	9101      	str	r1, [sp, #4]
    5166:	3448      	adds	r4, #72	; 0x48
    5168:	2c00      	cmp	r4, #0
    516a:	d101      	bne.n	5170 <_fwalk_reent+0x14>
    516c:	0030      	movs	r0, r6
    516e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5170:	6863      	ldr	r3, [r4, #4]
    5172:	68a5      	ldr	r5, [r4, #8]
    5174:	9300      	str	r3, [sp, #0]
    5176:	9b00      	ldr	r3, [sp, #0]
    5178:	3b01      	subs	r3, #1
    517a:	9300      	str	r3, [sp, #0]
    517c:	d501      	bpl.n	5182 <_fwalk_reent+0x26>
    517e:	6824      	ldr	r4, [r4, #0]
    5180:	e7f2      	b.n	5168 <_fwalk_reent+0xc>
    5182:	89ab      	ldrh	r3, [r5, #12]
    5184:	2b01      	cmp	r3, #1
    5186:	d908      	bls.n	519a <_fwalk_reent+0x3e>
    5188:	220e      	movs	r2, #14
    518a:	5eab      	ldrsh	r3, [r5, r2]
    518c:	3301      	adds	r3, #1
    518e:	d004      	beq.n	519a <_fwalk_reent+0x3e>
    5190:	0029      	movs	r1, r5
    5192:	0038      	movs	r0, r7
    5194:	9b01      	ldr	r3, [sp, #4]
    5196:	4798      	blx	r3
    5198:	4306      	orrs	r6, r0
    519a:	3568      	adds	r5, #104	; 0x68
    519c:	e7eb      	b.n	5176 <_fwalk_reent+0x1a>
	...

000051a0 <_localeconv_r>:
    51a0:	4b03      	ldr	r3, [pc, #12]	; (51b0 <_localeconv_r+0x10>)
    51a2:	681b      	ldr	r3, [r3, #0]
    51a4:	6a18      	ldr	r0, [r3, #32]
    51a6:	2800      	cmp	r0, #0
    51a8:	d100      	bne.n	51ac <_localeconv_r+0xc>
    51aa:	4802      	ldr	r0, [pc, #8]	; (51b4 <_localeconv_r+0x14>)
    51ac:	30f0      	adds	r0, #240	; 0xf0
    51ae:	4770      	bx	lr
    51b0:	2000000c 	.word	0x2000000c
    51b4:	20000070 	.word	0x20000070

000051b8 <__swhatbuf_r>:
    51b8:	b570      	push	{r4, r5, r6, lr}
    51ba:	000e      	movs	r6, r1
    51bc:	001d      	movs	r5, r3
    51be:	230e      	movs	r3, #14
    51c0:	5ec9      	ldrsh	r1, [r1, r3]
    51c2:	b090      	sub	sp, #64	; 0x40
    51c4:	0014      	movs	r4, r2
    51c6:	2900      	cmp	r1, #0
    51c8:	da07      	bge.n	51da <__swhatbuf_r+0x22>
    51ca:	2300      	movs	r3, #0
    51cc:	602b      	str	r3, [r5, #0]
    51ce:	89b3      	ldrh	r3, [r6, #12]
    51d0:	061b      	lsls	r3, r3, #24
    51d2:	d411      	bmi.n	51f8 <__swhatbuf_r+0x40>
    51d4:	2380      	movs	r3, #128	; 0x80
    51d6:	00db      	lsls	r3, r3, #3
    51d8:	e00f      	b.n	51fa <__swhatbuf_r+0x42>
    51da:	aa01      	add	r2, sp, #4
    51dc:	f000 fdc8 	bl	5d70 <_fstat_r>
    51e0:	2800      	cmp	r0, #0
    51e2:	dbf2      	blt.n	51ca <__swhatbuf_r+0x12>
    51e4:	22f0      	movs	r2, #240	; 0xf0
    51e6:	9b02      	ldr	r3, [sp, #8]
    51e8:	0212      	lsls	r2, r2, #8
    51ea:	4013      	ands	r3, r2
    51ec:	4a05      	ldr	r2, [pc, #20]	; (5204 <__swhatbuf_r+0x4c>)
    51ee:	189b      	adds	r3, r3, r2
    51f0:	425a      	negs	r2, r3
    51f2:	4153      	adcs	r3, r2
    51f4:	602b      	str	r3, [r5, #0]
    51f6:	e7ed      	b.n	51d4 <__swhatbuf_r+0x1c>
    51f8:	2340      	movs	r3, #64	; 0x40
    51fa:	2000      	movs	r0, #0
    51fc:	6023      	str	r3, [r4, #0]
    51fe:	b010      	add	sp, #64	; 0x40
    5200:	bd70      	pop	{r4, r5, r6, pc}
    5202:	46c0      	nop			; (mov r8, r8)
    5204:	ffffe000 	.word	0xffffe000

00005208 <__smakebuf_r>:
    5208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    520a:	2602      	movs	r6, #2
    520c:	898b      	ldrh	r3, [r1, #12]
    520e:	0005      	movs	r5, r0
    5210:	000c      	movs	r4, r1
    5212:	4233      	tst	r3, r6
    5214:	d006      	beq.n	5224 <__smakebuf_r+0x1c>
    5216:	0023      	movs	r3, r4
    5218:	3347      	adds	r3, #71	; 0x47
    521a:	6023      	str	r3, [r4, #0]
    521c:	6123      	str	r3, [r4, #16]
    521e:	2301      	movs	r3, #1
    5220:	6163      	str	r3, [r4, #20]
    5222:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    5224:	ab01      	add	r3, sp, #4
    5226:	466a      	mov	r2, sp
    5228:	f7ff ffc6 	bl	51b8 <__swhatbuf_r>
    522c:	9900      	ldr	r1, [sp, #0]
    522e:	0007      	movs	r7, r0
    5230:	0028      	movs	r0, r5
    5232:	f000 fb77 	bl	5924 <_malloc_r>
    5236:	2800      	cmp	r0, #0
    5238:	d106      	bne.n	5248 <__smakebuf_r+0x40>
    523a:	220c      	movs	r2, #12
    523c:	5ea3      	ldrsh	r3, [r4, r2]
    523e:	059a      	lsls	r2, r3, #22
    5240:	d4ef      	bmi.n	5222 <__smakebuf_r+0x1a>
    5242:	431e      	orrs	r6, r3
    5244:	81a6      	strh	r6, [r4, #12]
    5246:	e7e6      	b.n	5216 <__smakebuf_r+0xe>
    5248:	4b0d      	ldr	r3, [pc, #52]	; (5280 <__smakebuf_r+0x78>)
    524a:	62ab      	str	r3, [r5, #40]	; 0x28
    524c:	2380      	movs	r3, #128	; 0x80
    524e:	89a2      	ldrh	r2, [r4, #12]
    5250:	6020      	str	r0, [r4, #0]
    5252:	4313      	orrs	r3, r2
    5254:	81a3      	strh	r3, [r4, #12]
    5256:	9b00      	ldr	r3, [sp, #0]
    5258:	6120      	str	r0, [r4, #16]
    525a:	6163      	str	r3, [r4, #20]
    525c:	9b01      	ldr	r3, [sp, #4]
    525e:	2b00      	cmp	r3, #0
    5260:	d00a      	beq.n	5278 <__smakebuf_r+0x70>
    5262:	230e      	movs	r3, #14
    5264:	5ee1      	ldrsh	r1, [r4, r3]
    5266:	0028      	movs	r0, r5
    5268:	f000 fd94 	bl	5d94 <_isatty_r>
    526c:	2800      	cmp	r0, #0
    526e:	d003      	beq.n	5278 <__smakebuf_r+0x70>
    5270:	2301      	movs	r3, #1
    5272:	89a2      	ldrh	r2, [r4, #12]
    5274:	4313      	orrs	r3, r2
    5276:	81a3      	strh	r3, [r4, #12]
    5278:	89a0      	ldrh	r0, [r4, #12]
    527a:	4338      	orrs	r0, r7
    527c:	81a0      	strh	r0, [r4, #12]
    527e:	e7d0      	b.n	5222 <__smakebuf_r+0x1a>
    5280:	00004ff1 	.word	0x00004ff1

00005284 <malloc>:
    5284:	b510      	push	{r4, lr}
    5286:	4b03      	ldr	r3, [pc, #12]	; (5294 <malloc+0x10>)
    5288:	0001      	movs	r1, r0
    528a:	6818      	ldr	r0, [r3, #0]
    528c:	f000 fb4a 	bl	5924 <_malloc_r>
    5290:	bd10      	pop	{r4, pc}
    5292:	46c0      	nop			; (mov r8, r8)
    5294:	2000000c 	.word	0x2000000c

00005298 <memchr>:
    5298:	b2c9      	uxtb	r1, r1
    529a:	1882      	adds	r2, r0, r2
    529c:	4290      	cmp	r0, r2
    529e:	d101      	bne.n	52a4 <memchr+0xc>
    52a0:	2000      	movs	r0, #0
    52a2:	4770      	bx	lr
    52a4:	7803      	ldrb	r3, [r0, #0]
    52a6:	428b      	cmp	r3, r1
    52a8:	d0fb      	beq.n	52a2 <memchr+0xa>
    52aa:	3001      	adds	r0, #1
    52ac:	e7f6      	b.n	529c <memchr+0x4>

000052ae <_Balloc>:
    52ae:	b570      	push	{r4, r5, r6, lr}
    52b0:	6a46      	ldr	r6, [r0, #36]	; 0x24
    52b2:	0004      	movs	r4, r0
    52b4:	000d      	movs	r5, r1
    52b6:	2e00      	cmp	r6, #0
    52b8:	d107      	bne.n	52ca <_Balloc+0x1c>
    52ba:	2010      	movs	r0, #16
    52bc:	f7ff ffe2 	bl	5284 <malloc>
    52c0:	6260      	str	r0, [r4, #36]	; 0x24
    52c2:	6046      	str	r6, [r0, #4]
    52c4:	6086      	str	r6, [r0, #8]
    52c6:	6006      	str	r6, [r0, #0]
    52c8:	60c6      	str	r6, [r0, #12]
    52ca:	6a66      	ldr	r6, [r4, #36]	; 0x24
    52cc:	68f3      	ldr	r3, [r6, #12]
    52ce:	2b00      	cmp	r3, #0
    52d0:	d013      	beq.n	52fa <_Balloc+0x4c>
    52d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    52d4:	00aa      	lsls	r2, r5, #2
    52d6:	68db      	ldr	r3, [r3, #12]
    52d8:	189b      	adds	r3, r3, r2
    52da:	6818      	ldr	r0, [r3, #0]
    52dc:	2800      	cmp	r0, #0
    52de:	d118      	bne.n	5312 <_Balloc+0x64>
    52e0:	2101      	movs	r1, #1
    52e2:	000e      	movs	r6, r1
    52e4:	40ae      	lsls	r6, r5
    52e6:	1d72      	adds	r2, r6, #5
    52e8:	0092      	lsls	r2, r2, #2
    52ea:	0020      	movs	r0, r4
    52ec:	f000 fac2 	bl	5874 <_calloc_r>
    52f0:	2800      	cmp	r0, #0
    52f2:	d00c      	beq.n	530e <_Balloc+0x60>
    52f4:	6045      	str	r5, [r0, #4]
    52f6:	6086      	str	r6, [r0, #8]
    52f8:	e00d      	b.n	5316 <_Balloc+0x68>
    52fa:	2221      	movs	r2, #33	; 0x21
    52fc:	2104      	movs	r1, #4
    52fe:	0020      	movs	r0, r4
    5300:	f000 fab8 	bl	5874 <_calloc_r>
    5304:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5306:	60f0      	str	r0, [r6, #12]
    5308:	68db      	ldr	r3, [r3, #12]
    530a:	2b00      	cmp	r3, #0
    530c:	d1e1      	bne.n	52d2 <_Balloc+0x24>
    530e:	2000      	movs	r0, #0
    5310:	bd70      	pop	{r4, r5, r6, pc}
    5312:	6802      	ldr	r2, [r0, #0]
    5314:	601a      	str	r2, [r3, #0]
    5316:	2300      	movs	r3, #0
    5318:	6103      	str	r3, [r0, #16]
    531a:	60c3      	str	r3, [r0, #12]
    531c:	e7f8      	b.n	5310 <_Balloc+0x62>

0000531e <_Bfree>:
    531e:	b570      	push	{r4, r5, r6, lr}
    5320:	6a44      	ldr	r4, [r0, #36]	; 0x24
    5322:	0006      	movs	r6, r0
    5324:	000d      	movs	r5, r1
    5326:	2c00      	cmp	r4, #0
    5328:	d107      	bne.n	533a <_Bfree+0x1c>
    532a:	2010      	movs	r0, #16
    532c:	f7ff ffaa 	bl	5284 <malloc>
    5330:	6270      	str	r0, [r6, #36]	; 0x24
    5332:	6044      	str	r4, [r0, #4]
    5334:	6084      	str	r4, [r0, #8]
    5336:	6004      	str	r4, [r0, #0]
    5338:	60c4      	str	r4, [r0, #12]
    533a:	2d00      	cmp	r5, #0
    533c:	d007      	beq.n	534e <_Bfree+0x30>
    533e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    5340:	686a      	ldr	r2, [r5, #4]
    5342:	68db      	ldr	r3, [r3, #12]
    5344:	0092      	lsls	r2, r2, #2
    5346:	189b      	adds	r3, r3, r2
    5348:	681a      	ldr	r2, [r3, #0]
    534a:	602a      	str	r2, [r5, #0]
    534c:	601d      	str	r5, [r3, #0]
    534e:	bd70      	pop	{r4, r5, r6, pc}

00005350 <__multadd>:
    5350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5352:	001e      	movs	r6, r3
    5354:	2314      	movs	r3, #20
    5356:	469c      	mov	ip, r3
    5358:	0007      	movs	r7, r0
    535a:	000c      	movs	r4, r1
    535c:	2000      	movs	r0, #0
    535e:	690d      	ldr	r5, [r1, #16]
    5360:	448c      	add	ip, r1
    5362:	4663      	mov	r3, ip
    5364:	8819      	ldrh	r1, [r3, #0]
    5366:	681b      	ldr	r3, [r3, #0]
    5368:	4351      	muls	r1, r2
    536a:	0c1b      	lsrs	r3, r3, #16
    536c:	4353      	muls	r3, r2
    536e:	1989      	adds	r1, r1, r6
    5370:	0c0e      	lsrs	r6, r1, #16
    5372:	199b      	adds	r3, r3, r6
    5374:	b289      	uxth	r1, r1
    5376:	0c1e      	lsrs	r6, r3, #16
    5378:	041b      	lsls	r3, r3, #16
    537a:	185b      	adds	r3, r3, r1
    537c:	4661      	mov	r1, ip
    537e:	3001      	adds	r0, #1
    5380:	c108      	stmia	r1!, {r3}
    5382:	468c      	mov	ip, r1
    5384:	4285      	cmp	r5, r0
    5386:	dcec      	bgt.n	5362 <__multadd+0x12>
    5388:	2e00      	cmp	r6, #0
    538a:	d01b      	beq.n	53c4 <__multadd+0x74>
    538c:	68a3      	ldr	r3, [r4, #8]
    538e:	429d      	cmp	r5, r3
    5390:	db12      	blt.n	53b8 <__multadd+0x68>
    5392:	6863      	ldr	r3, [r4, #4]
    5394:	0038      	movs	r0, r7
    5396:	1c59      	adds	r1, r3, #1
    5398:	f7ff ff89 	bl	52ae <_Balloc>
    539c:	0021      	movs	r1, r4
    539e:	6923      	ldr	r3, [r4, #16]
    53a0:	9001      	str	r0, [sp, #4]
    53a2:	1c9a      	adds	r2, r3, #2
    53a4:	0092      	lsls	r2, r2, #2
    53a6:	310c      	adds	r1, #12
    53a8:	300c      	adds	r0, #12
    53aa:	f7fe f86f 	bl	348c <memcpy>
    53ae:	0021      	movs	r1, r4
    53b0:	0038      	movs	r0, r7
    53b2:	f7ff ffb4 	bl	531e <_Bfree>
    53b6:	9c01      	ldr	r4, [sp, #4]
    53b8:	1d2b      	adds	r3, r5, #4
    53ba:	009b      	lsls	r3, r3, #2
    53bc:	18e3      	adds	r3, r4, r3
    53be:	3501      	adds	r5, #1
    53c0:	605e      	str	r6, [r3, #4]
    53c2:	6125      	str	r5, [r4, #16]
    53c4:	0020      	movs	r0, r4
    53c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000053c8 <__hi0bits>:
    53c8:	0003      	movs	r3, r0
    53ca:	0c02      	lsrs	r2, r0, #16
    53cc:	2000      	movs	r0, #0
    53ce:	4282      	cmp	r2, r0
    53d0:	d101      	bne.n	53d6 <__hi0bits+0xe>
    53d2:	041b      	lsls	r3, r3, #16
    53d4:	3010      	adds	r0, #16
    53d6:	0e1a      	lsrs	r2, r3, #24
    53d8:	d101      	bne.n	53de <__hi0bits+0x16>
    53da:	3008      	adds	r0, #8
    53dc:	021b      	lsls	r3, r3, #8
    53de:	0f1a      	lsrs	r2, r3, #28
    53e0:	d101      	bne.n	53e6 <__hi0bits+0x1e>
    53e2:	3004      	adds	r0, #4
    53e4:	011b      	lsls	r3, r3, #4
    53e6:	0f9a      	lsrs	r2, r3, #30
    53e8:	d101      	bne.n	53ee <__hi0bits+0x26>
    53ea:	3002      	adds	r0, #2
    53ec:	009b      	lsls	r3, r3, #2
    53ee:	2b00      	cmp	r3, #0
    53f0:	db03      	blt.n	53fa <__hi0bits+0x32>
    53f2:	3001      	adds	r0, #1
    53f4:	005b      	lsls	r3, r3, #1
    53f6:	d400      	bmi.n	53fa <__hi0bits+0x32>
    53f8:	2020      	movs	r0, #32
    53fa:	4770      	bx	lr

000053fc <__lo0bits>:
    53fc:	2207      	movs	r2, #7
    53fe:	6803      	ldr	r3, [r0, #0]
    5400:	b510      	push	{r4, lr}
    5402:	0001      	movs	r1, r0
    5404:	401a      	ands	r2, r3
    5406:	d00d      	beq.n	5424 <__lo0bits+0x28>
    5408:	2401      	movs	r4, #1
    540a:	2000      	movs	r0, #0
    540c:	4223      	tst	r3, r4
    540e:	d105      	bne.n	541c <__lo0bits+0x20>
    5410:	3002      	adds	r0, #2
    5412:	4203      	tst	r3, r0
    5414:	d003      	beq.n	541e <__lo0bits+0x22>
    5416:	40e3      	lsrs	r3, r4
    5418:	0020      	movs	r0, r4
    541a:	600b      	str	r3, [r1, #0]
    541c:	bd10      	pop	{r4, pc}
    541e:	089b      	lsrs	r3, r3, #2
    5420:	600b      	str	r3, [r1, #0]
    5422:	e7fb      	b.n	541c <__lo0bits+0x20>
    5424:	b29c      	uxth	r4, r3
    5426:	0010      	movs	r0, r2
    5428:	2c00      	cmp	r4, #0
    542a:	d101      	bne.n	5430 <__lo0bits+0x34>
    542c:	2010      	movs	r0, #16
    542e:	0c1b      	lsrs	r3, r3, #16
    5430:	b2da      	uxtb	r2, r3
    5432:	2a00      	cmp	r2, #0
    5434:	d101      	bne.n	543a <__lo0bits+0x3e>
    5436:	3008      	adds	r0, #8
    5438:	0a1b      	lsrs	r3, r3, #8
    543a:	071a      	lsls	r2, r3, #28
    543c:	d101      	bne.n	5442 <__lo0bits+0x46>
    543e:	3004      	adds	r0, #4
    5440:	091b      	lsrs	r3, r3, #4
    5442:	079a      	lsls	r2, r3, #30
    5444:	d101      	bne.n	544a <__lo0bits+0x4e>
    5446:	3002      	adds	r0, #2
    5448:	089b      	lsrs	r3, r3, #2
    544a:	07da      	lsls	r2, r3, #31
    544c:	d4e8      	bmi.n	5420 <__lo0bits+0x24>
    544e:	085b      	lsrs	r3, r3, #1
    5450:	d001      	beq.n	5456 <__lo0bits+0x5a>
    5452:	3001      	adds	r0, #1
    5454:	e7e4      	b.n	5420 <__lo0bits+0x24>
    5456:	2020      	movs	r0, #32
    5458:	e7e0      	b.n	541c <__lo0bits+0x20>

0000545a <__i2b>:
    545a:	b510      	push	{r4, lr}
    545c:	000c      	movs	r4, r1
    545e:	2101      	movs	r1, #1
    5460:	f7ff ff25 	bl	52ae <_Balloc>
    5464:	2301      	movs	r3, #1
    5466:	6144      	str	r4, [r0, #20]
    5468:	6103      	str	r3, [r0, #16]
    546a:	bd10      	pop	{r4, pc}

0000546c <__multiply>:
    546c:	b5f0      	push	{r4, r5, r6, r7, lr}
    546e:	690b      	ldr	r3, [r1, #16]
    5470:	0015      	movs	r5, r2
    5472:	6912      	ldr	r2, [r2, #16]
    5474:	b089      	sub	sp, #36	; 0x24
    5476:	000c      	movs	r4, r1
    5478:	4293      	cmp	r3, r2
    547a:	da01      	bge.n	5480 <__multiply+0x14>
    547c:	002c      	movs	r4, r5
    547e:	000d      	movs	r5, r1
    5480:	6927      	ldr	r7, [r4, #16]
    5482:	692e      	ldr	r6, [r5, #16]
    5484:	68a2      	ldr	r2, [r4, #8]
    5486:	19bb      	adds	r3, r7, r6
    5488:	6861      	ldr	r1, [r4, #4]
    548a:	9301      	str	r3, [sp, #4]
    548c:	4293      	cmp	r3, r2
    548e:	dd00      	ble.n	5492 <__multiply+0x26>
    5490:	3101      	adds	r1, #1
    5492:	f7ff ff0c 	bl	52ae <_Balloc>
    5496:	0003      	movs	r3, r0
    5498:	3314      	adds	r3, #20
    549a:	9300      	str	r3, [sp, #0]
    549c:	9a00      	ldr	r2, [sp, #0]
    549e:	19bb      	adds	r3, r7, r6
    54a0:	4694      	mov	ip, r2
    54a2:	009b      	lsls	r3, r3, #2
    54a4:	449c      	add	ip, r3
    54a6:	0013      	movs	r3, r2
    54a8:	2200      	movs	r2, #0
    54aa:	9004      	str	r0, [sp, #16]
    54ac:	4563      	cmp	r3, ip
    54ae:	d31c      	bcc.n	54ea <__multiply+0x7e>
    54b0:	002a      	movs	r2, r5
    54b2:	3414      	adds	r4, #20
    54b4:	00bf      	lsls	r7, r7, #2
    54b6:	19e3      	adds	r3, r4, r7
    54b8:	3214      	adds	r2, #20
    54ba:	00b6      	lsls	r6, r6, #2
    54bc:	9305      	str	r3, [sp, #20]
    54be:	1993      	adds	r3, r2, r6
    54c0:	9402      	str	r4, [sp, #8]
    54c2:	9306      	str	r3, [sp, #24]
    54c4:	9b06      	ldr	r3, [sp, #24]
    54c6:	429a      	cmp	r2, r3
    54c8:	d311      	bcc.n	54ee <__multiply+0x82>
    54ca:	9b01      	ldr	r3, [sp, #4]
    54cc:	2b00      	cmp	r3, #0
    54ce:	dd06      	ble.n	54de <__multiply+0x72>
    54d0:	2304      	movs	r3, #4
    54d2:	425b      	negs	r3, r3
    54d4:	449c      	add	ip, r3
    54d6:	4663      	mov	r3, ip
    54d8:	681b      	ldr	r3, [r3, #0]
    54da:	2b00      	cmp	r3, #0
    54dc:	d051      	beq.n	5582 <__multiply+0x116>
    54de:	9b04      	ldr	r3, [sp, #16]
    54e0:	9a01      	ldr	r2, [sp, #4]
    54e2:	0018      	movs	r0, r3
    54e4:	611a      	str	r2, [r3, #16]
    54e6:	b009      	add	sp, #36	; 0x24
    54e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54ea:	c304      	stmia	r3!, {r2}
    54ec:	e7de      	b.n	54ac <__multiply+0x40>
    54ee:	8814      	ldrh	r4, [r2, #0]
    54f0:	2c00      	cmp	r4, #0
    54f2:	d01e      	beq.n	5532 <__multiply+0xc6>
    54f4:	2600      	movs	r6, #0
    54f6:	9d00      	ldr	r5, [sp, #0]
    54f8:	9f02      	ldr	r7, [sp, #8]
    54fa:	cf01      	ldmia	r7!, {r0}
    54fc:	9507      	str	r5, [sp, #28]
    54fe:	cd08      	ldmia	r5!, {r3}
    5500:	9303      	str	r3, [sp, #12]
    5502:	b283      	uxth	r3, r0
    5504:	4363      	muls	r3, r4
    5506:	0019      	movs	r1, r3
    5508:	466b      	mov	r3, sp
    550a:	0c00      	lsrs	r0, r0, #16
    550c:	899b      	ldrh	r3, [r3, #12]
    550e:	4360      	muls	r0, r4
    5510:	18cb      	adds	r3, r1, r3
    5512:	9903      	ldr	r1, [sp, #12]
    5514:	199b      	adds	r3, r3, r6
    5516:	0c09      	lsrs	r1, r1, #16
    5518:	1841      	adds	r1, r0, r1
    551a:	0c18      	lsrs	r0, r3, #16
    551c:	1809      	adds	r1, r1, r0
    551e:	0c0e      	lsrs	r6, r1, #16
    5520:	b29b      	uxth	r3, r3
    5522:	0409      	lsls	r1, r1, #16
    5524:	430b      	orrs	r3, r1
    5526:	9907      	ldr	r1, [sp, #28]
    5528:	600b      	str	r3, [r1, #0]
    552a:	9b05      	ldr	r3, [sp, #20]
    552c:	42bb      	cmp	r3, r7
    552e:	d8e4      	bhi.n	54fa <__multiply+0x8e>
    5530:	602e      	str	r6, [r5, #0]
    5532:	6813      	ldr	r3, [r2, #0]
    5534:	0c1b      	lsrs	r3, r3, #16
    5536:	9303      	str	r3, [sp, #12]
    5538:	d01e      	beq.n	5578 <__multiply+0x10c>
    553a:	2600      	movs	r6, #0
    553c:	9b00      	ldr	r3, [sp, #0]
    553e:	9c02      	ldr	r4, [sp, #8]
    5540:	681b      	ldr	r3, [r3, #0]
    5542:	9800      	ldr	r0, [sp, #0]
    5544:	0007      	movs	r7, r0
    5546:	8821      	ldrh	r1, [r4, #0]
    5548:	9d03      	ldr	r5, [sp, #12]
    554a:	b29b      	uxth	r3, r3
    554c:	4369      	muls	r1, r5
    554e:	c820      	ldmia	r0!, {r5}
    5550:	0c2d      	lsrs	r5, r5, #16
    5552:	1949      	adds	r1, r1, r5
    5554:	198e      	adds	r6, r1, r6
    5556:	0431      	lsls	r1, r6, #16
    5558:	430b      	orrs	r3, r1
    555a:	603b      	str	r3, [r7, #0]
    555c:	cc08      	ldmia	r4!, {r3}
    555e:	9903      	ldr	r1, [sp, #12]
    5560:	0c1b      	lsrs	r3, r3, #16
    5562:	434b      	muls	r3, r1
    5564:	6879      	ldr	r1, [r7, #4]
    5566:	0c36      	lsrs	r6, r6, #16
    5568:	b289      	uxth	r1, r1
    556a:	185b      	adds	r3, r3, r1
    556c:	9905      	ldr	r1, [sp, #20]
    556e:	199b      	adds	r3, r3, r6
    5570:	0c1e      	lsrs	r6, r3, #16
    5572:	42a1      	cmp	r1, r4
    5574:	d8e6      	bhi.n	5544 <__multiply+0xd8>
    5576:	6003      	str	r3, [r0, #0]
    5578:	9b00      	ldr	r3, [sp, #0]
    557a:	3204      	adds	r2, #4
    557c:	3304      	adds	r3, #4
    557e:	9300      	str	r3, [sp, #0]
    5580:	e7a0      	b.n	54c4 <__multiply+0x58>
    5582:	9b01      	ldr	r3, [sp, #4]
    5584:	3b01      	subs	r3, #1
    5586:	9301      	str	r3, [sp, #4]
    5588:	e79f      	b.n	54ca <__multiply+0x5e>
	...

0000558c <__pow5mult>:
    558c:	2303      	movs	r3, #3
    558e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5590:	4013      	ands	r3, r2
    5592:	0005      	movs	r5, r0
    5594:	000e      	movs	r6, r1
    5596:	0014      	movs	r4, r2
    5598:	2b00      	cmp	r3, #0
    559a:	d008      	beq.n	55ae <__pow5mult+0x22>
    559c:	4922      	ldr	r1, [pc, #136]	; (5628 <__pow5mult+0x9c>)
    559e:	3b01      	subs	r3, #1
    55a0:	009a      	lsls	r2, r3, #2
    55a2:	5852      	ldr	r2, [r2, r1]
    55a4:	2300      	movs	r3, #0
    55a6:	0031      	movs	r1, r6
    55a8:	f7ff fed2 	bl	5350 <__multadd>
    55ac:	0006      	movs	r6, r0
    55ae:	10a3      	asrs	r3, r4, #2
    55b0:	9301      	str	r3, [sp, #4]
    55b2:	d036      	beq.n	5622 <__pow5mult+0x96>
    55b4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    55b6:	2c00      	cmp	r4, #0
    55b8:	d107      	bne.n	55ca <__pow5mult+0x3e>
    55ba:	2010      	movs	r0, #16
    55bc:	f7ff fe62 	bl	5284 <malloc>
    55c0:	6268      	str	r0, [r5, #36]	; 0x24
    55c2:	6044      	str	r4, [r0, #4]
    55c4:	6084      	str	r4, [r0, #8]
    55c6:	6004      	str	r4, [r0, #0]
    55c8:	60c4      	str	r4, [r0, #12]
    55ca:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    55cc:	68bc      	ldr	r4, [r7, #8]
    55ce:	2c00      	cmp	r4, #0
    55d0:	d107      	bne.n	55e2 <__pow5mult+0x56>
    55d2:	4916      	ldr	r1, [pc, #88]	; (562c <__pow5mult+0xa0>)
    55d4:	0028      	movs	r0, r5
    55d6:	f7ff ff40 	bl	545a <__i2b>
    55da:	2300      	movs	r3, #0
    55dc:	0004      	movs	r4, r0
    55de:	60b8      	str	r0, [r7, #8]
    55e0:	6003      	str	r3, [r0, #0]
    55e2:	2201      	movs	r2, #1
    55e4:	9b01      	ldr	r3, [sp, #4]
    55e6:	4213      	tst	r3, r2
    55e8:	d00a      	beq.n	5600 <__pow5mult+0x74>
    55ea:	0031      	movs	r1, r6
    55ec:	0022      	movs	r2, r4
    55ee:	0028      	movs	r0, r5
    55f0:	f7ff ff3c 	bl	546c <__multiply>
    55f4:	0007      	movs	r7, r0
    55f6:	0031      	movs	r1, r6
    55f8:	0028      	movs	r0, r5
    55fa:	f7ff fe90 	bl	531e <_Bfree>
    55fe:	003e      	movs	r6, r7
    5600:	9b01      	ldr	r3, [sp, #4]
    5602:	105b      	asrs	r3, r3, #1
    5604:	9301      	str	r3, [sp, #4]
    5606:	d00c      	beq.n	5622 <__pow5mult+0x96>
    5608:	6820      	ldr	r0, [r4, #0]
    560a:	2800      	cmp	r0, #0
    560c:	d107      	bne.n	561e <__pow5mult+0x92>
    560e:	0022      	movs	r2, r4
    5610:	0021      	movs	r1, r4
    5612:	0028      	movs	r0, r5
    5614:	f7ff ff2a 	bl	546c <__multiply>
    5618:	2300      	movs	r3, #0
    561a:	6020      	str	r0, [r4, #0]
    561c:	6003      	str	r3, [r0, #0]
    561e:	0004      	movs	r4, r0
    5620:	e7df      	b.n	55e2 <__pow5mult+0x56>
    5622:	0030      	movs	r0, r6
    5624:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5626:	46c0      	nop			; (mov r8, r8)
    5628:	00009060 	.word	0x00009060
    562c:	00000271 	.word	0x00000271

00005630 <__lshift>:
    5630:	b5f0      	push	{r4, r5, r6, r7, lr}
    5632:	000d      	movs	r5, r1
    5634:	0017      	movs	r7, r2
    5636:	692b      	ldr	r3, [r5, #16]
    5638:	1154      	asrs	r4, r2, #5
    563a:	b085      	sub	sp, #20
    563c:	18e3      	adds	r3, r4, r3
    563e:	9302      	str	r3, [sp, #8]
    5640:	3301      	adds	r3, #1
    5642:	9301      	str	r3, [sp, #4]
    5644:	6849      	ldr	r1, [r1, #4]
    5646:	68ab      	ldr	r3, [r5, #8]
    5648:	9003      	str	r0, [sp, #12]
    564a:	9a01      	ldr	r2, [sp, #4]
    564c:	4293      	cmp	r3, r2
    564e:	db34      	blt.n	56ba <__lshift+0x8a>
    5650:	9803      	ldr	r0, [sp, #12]
    5652:	f7ff fe2c 	bl	52ae <_Balloc>
    5656:	2300      	movs	r3, #0
    5658:	0002      	movs	r2, r0
    565a:	0006      	movs	r6, r0
    565c:	0019      	movs	r1, r3
    565e:	3214      	adds	r2, #20
    5660:	42a3      	cmp	r3, r4
    5662:	db2d      	blt.n	56c0 <__lshift+0x90>
    5664:	43e3      	mvns	r3, r4
    5666:	17db      	asrs	r3, r3, #31
    5668:	401c      	ands	r4, r3
    566a:	002b      	movs	r3, r5
    566c:	211f      	movs	r1, #31
    566e:	00a4      	lsls	r4, r4, #2
    5670:	1914      	adds	r4, r2, r4
    5672:	692a      	ldr	r2, [r5, #16]
    5674:	3314      	adds	r3, #20
    5676:	0092      	lsls	r2, r2, #2
    5678:	189a      	adds	r2, r3, r2
    567a:	400f      	ands	r7, r1
    567c:	d024      	beq.n	56c8 <__lshift+0x98>
    567e:	3101      	adds	r1, #1
    5680:	1bc9      	subs	r1, r1, r7
    5682:	468c      	mov	ip, r1
    5684:	2100      	movs	r1, #0
    5686:	6818      	ldr	r0, [r3, #0]
    5688:	40b8      	lsls	r0, r7
    568a:	4301      	orrs	r1, r0
    568c:	4660      	mov	r0, ip
    568e:	6021      	str	r1, [r4, #0]
    5690:	cb02      	ldmia	r3!, {r1}
    5692:	3404      	adds	r4, #4
    5694:	40c1      	lsrs	r1, r0
    5696:	429a      	cmp	r2, r3
    5698:	d8f5      	bhi.n	5686 <__lshift+0x56>
    569a:	6021      	str	r1, [r4, #0]
    569c:	2900      	cmp	r1, #0
    569e:	d002      	beq.n	56a6 <__lshift+0x76>
    56a0:	9b02      	ldr	r3, [sp, #8]
    56a2:	3302      	adds	r3, #2
    56a4:	9301      	str	r3, [sp, #4]
    56a6:	9b01      	ldr	r3, [sp, #4]
    56a8:	9803      	ldr	r0, [sp, #12]
    56aa:	3b01      	subs	r3, #1
    56ac:	6133      	str	r3, [r6, #16]
    56ae:	0029      	movs	r1, r5
    56b0:	f7ff fe35 	bl	531e <_Bfree>
    56b4:	0030      	movs	r0, r6
    56b6:	b005      	add	sp, #20
    56b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56ba:	3101      	adds	r1, #1
    56bc:	005b      	lsls	r3, r3, #1
    56be:	e7c4      	b.n	564a <__lshift+0x1a>
    56c0:	0098      	lsls	r0, r3, #2
    56c2:	5011      	str	r1, [r2, r0]
    56c4:	3301      	adds	r3, #1
    56c6:	e7cb      	b.n	5660 <__lshift+0x30>
    56c8:	cb02      	ldmia	r3!, {r1}
    56ca:	c402      	stmia	r4!, {r1}
    56cc:	429a      	cmp	r2, r3
    56ce:	d8fb      	bhi.n	56c8 <__lshift+0x98>
    56d0:	e7e9      	b.n	56a6 <__lshift+0x76>

000056d2 <__mcmp>:
    56d2:	690a      	ldr	r2, [r1, #16]
    56d4:	6903      	ldr	r3, [r0, #16]
    56d6:	b530      	push	{r4, r5, lr}
    56d8:	1a9b      	subs	r3, r3, r2
    56da:	d10e      	bne.n	56fa <__mcmp+0x28>
    56dc:	0092      	lsls	r2, r2, #2
    56de:	3014      	adds	r0, #20
    56e0:	3114      	adds	r1, #20
    56e2:	1884      	adds	r4, r0, r2
    56e4:	1889      	adds	r1, r1, r2
    56e6:	3c04      	subs	r4, #4
    56e8:	3904      	subs	r1, #4
    56ea:	6822      	ldr	r2, [r4, #0]
    56ec:	680d      	ldr	r5, [r1, #0]
    56ee:	42aa      	cmp	r2, r5
    56f0:	d005      	beq.n	56fe <__mcmp+0x2c>
    56f2:	42aa      	cmp	r2, r5
    56f4:	4192      	sbcs	r2, r2
    56f6:	2301      	movs	r3, #1
    56f8:	4313      	orrs	r3, r2
    56fa:	0018      	movs	r0, r3
    56fc:	bd30      	pop	{r4, r5, pc}
    56fe:	42a0      	cmp	r0, r4
    5700:	d3f1      	bcc.n	56e6 <__mcmp+0x14>
    5702:	e7fa      	b.n	56fa <__mcmp+0x28>

00005704 <__mdiff>:
    5704:	b5f0      	push	{r4, r5, r6, r7, lr}
    5706:	000d      	movs	r5, r1
    5708:	b085      	sub	sp, #20
    570a:	0007      	movs	r7, r0
    570c:	0011      	movs	r1, r2
    570e:	0028      	movs	r0, r5
    5710:	0014      	movs	r4, r2
    5712:	f7ff ffde 	bl	56d2 <__mcmp>
    5716:	1e06      	subs	r6, r0, #0
    5718:	d108      	bne.n	572c <__mdiff+0x28>
    571a:	0001      	movs	r1, r0
    571c:	0038      	movs	r0, r7
    571e:	f7ff fdc6 	bl	52ae <_Balloc>
    5722:	2301      	movs	r3, #1
    5724:	6146      	str	r6, [r0, #20]
    5726:	6103      	str	r3, [r0, #16]
    5728:	b005      	add	sp, #20
    572a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    572c:	2301      	movs	r3, #1
    572e:	9301      	str	r3, [sp, #4]
    5730:	2800      	cmp	r0, #0
    5732:	db04      	blt.n	573e <__mdiff+0x3a>
    5734:	0023      	movs	r3, r4
    5736:	002c      	movs	r4, r5
    5738:	001d      	movs	r5, r3
    573a:	2300      	movs	r3, #0
    573c:	9301      	str	r3, [sp, #4]
    573e:	6861      	ldr	r1, [r4, #4]
    5740:	0038      	movs	r0, r7
    5742:	f7ff fdb4 	bl	52ae <_Balloc>
    5746:	002f      	movs	r7, r5
    5748:	2200      	movs	r2, #0
    574a:	9b01      	ldr	r3, [sp, #4]
    574c:	6926      	ldr	r6, [r4, #16]
    574e:	60c3      	str	r3, [r0, #12]
    5750:	3414      	adds	r4, #20
    5752:	00b3      	lsls	r3, r6, #2
    5754:	18e3      	adds	r3, r4, r3
    5756:	9302      	str	r3, [sp, #8]
    5758:	692b      	ldr	r3, [r5, #16]
    575a:	3714      	adds	r7, #20
    575c:	009b      	lsls	r3, r3, #2
    575e:	18fb      	adds	r3, r7, r3
    5760:	9303      	str	r3, [sp, #12]
    5762:	0003      	movs	r3, r0
    5764:	4694      	mov	ip, r2
    5766:	3314      	adds	r3, #20
    5768:	cc20      	ldmia	r4!, {r5}
    576a:	cf04      	ldmia	r7!, {r2}
    576c:	9201      	str	r2, [sp, #4]
    576e:	b2aa      	uxth	r2, r5
    5770:	4494      	add	ip, r2
    5772:	466a      	mov	r2, sp
    5774:	4661      	mov	r1, ip
    5776:	8892      	ldrh	r2, [r2, #4]
    5778:	0c2d      	lsrs	r5, r5, #16
    577a:	1a8a      	subs	r2, r1, r2
    577c:	9901      	ldr	r1, [sp, #4]
    577e:	0c09      	lsrs	r1, r1, #16
    5780:	1a69      	subs	r1, r5, r1
    5782:	1415      	asrs	r5, r2, #16
    5784:	1949      	adds	r1, r1, r5
    5786:	140d      	asrs	r5, r1, #16
    5788:	b292      	uxth	r2, r2
    578a:	0409      	lsls	r1, r1, #16
    578c:	430a      	orrs	r2, r1
    578e:	601a      	str	r2, [r3, #0]
    5790:	9a03      	ldr	r2, [sp, #12]
    5792:	46ac      	mov	ip, r5
    5794:	3304      	adds	r3, #4
    5796:	42ba      	cmp	r2, r7
    5798:	d8e6      	bhi.n	5768 <__mdiff+0x64>
    579a:	9902      	ldr	r1, [sp, #8]
    579c:	001a      	movs	r2, r3
    579e:	428c      	cmp	r4, r1
    57a0:	d305      	bcc.n	57ae <__mdiff+0xaa>
    57a2:	3a04      	subs	r2, #4
    57a4:	6813      	ldr	r3, [r2, #0]
    57a6:	2b00      	cmp	r3, #0
    57a8:	d00e      	beq.n	57c8 <__mdiff+0xc4>
    57aa:	6106      	str	r6, [r0, #16]
    57ac:	e7bc      	b.n	5728 <__mdiff+0x24>
    57ae:	cc04      	ldmia	r4!, {r2}
    57b0:	b291      	uxth	r1, r2
    57b2:	4461      	add	r1, ip
    57b4:	140d      	asrs	r5, r1, #16
    57b6:	0c12      	lsrs	r2, r2, #16
    57b8:	1952      	adds	r2, r2, r5
    57ba:	1415      	asrs	r5, r2, #16
    57bc:	b289      	uxth	r1, r1
    57be:	0412      	lsls	r2, r2, #16
    57c0:	430a      	orrs	r2, r1
    57c2:	46ac      	mov	ip, r5
    57c4:	c304      	stmia	r3!, {r2}
    57c6:	e7e8      	b.n	579a <__mdiff+0x96>
    57c8:	3e01      	subs	r6, #1
    57ca:	e7ea      	b.n	57a2 <__mdiff+0x9e>

000057cc <__d2b>:
    57cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    57ce:	001d      	movs	r5, r3
    57d0:	2101      	movs	r1, #1
    57d2:	9f08      	ldr	r7, [sp, #32]
    57d4:	0014      	movs	r4, r2
    57d6:	f7ff fd6a 	bl	52ae <_Balloc>
    57da:	032b      	lsls	r3, r5, #12
    57dc:	006d      	lsls	r5, r5, #1
    57de:	0006      	movs	r6, r0
    57e0:	0b1b      	lsrs	r3, r3, #12
    57e2:	0d6d      	lsrs	r5, r5, #21
    57e4:	d124      	bne.n	5830 <__d2b+0x64>
    57e6:	9301      	str	r3, [sp, #4]
    57e8:	2c00      	cmp	r4, #0
    57ea:	d027      	beq.n	583c <__d2b+0x70>
    57ec:	4668      	mov	r0, sp
    57ee:	9400      	str	r4, [sp, #0]
    57f0:	f7ff fe04 	bl	53fc <__lo0bits>
    57f4:	9c00      	ldr	r4, [sp, #0]
    57f6:	2800      	cmp	r0, #0
    57f8:	d01e      	beq.n	5838 <__d2b+0x6c>
    57fa:	9b01      	ldr	r3, [sp, #4]
    57fc:	2120      	movs	r1, #32
    57fe:	001a      	movs	r2, r3
    5800:	1a09      	subs	r1, r1, r0
    5802:	408a      	lsls	r2, r1
    5804:	40c3      	lsrs	r3, r0
    5806:	4322      	orrs	r2, r4
    5808:	6172      	str	r2, [r6, #20]
    580a:	9301      	str	r3, [sp, #4]
    580c:	9c01      	ldr	r4, [sp, #4]
    580e:	61b4      	str	r4, [r6, #24]
    5810:	1e63      	subs	r3, r4, #1
    5812:	419c      	sbcs	r4, r3
    5814:	3401      	adds	r4, #1
    5816:	6134      	str	r4, [r6, #16]
    5818:	2d00      	cmp	r5, #0
    581a:	d018      	beq.n	584e <__d2b+0x82>
    581c:	4b12      	ldr	r3, [pc, #72]	; (5868 <__d2b+0x9c>)
    581e:	18ed      	adds	r5, r5, r3
    5820:	2335      	movs	r3, #53	; 0x35
    5822:	182d      	adds	r5, r5, r0
    5824:	603d      	str	r5, [r7, #0]
    5826:	1a18      	subs	r0, r3, r0
    5828:	9b09      	ldr	r3, [sp, #36]	; 0x24
    582a:	6018      	str	r0, [r3, #0]
    582c:	0030      	movs	r0, r6
    582e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5830:	2280      	movs	r2, #128	; 0x80
    5832:	0352      	lsls	r2, r2, #13
    5834:	4313      	orrs	r3, r2
    5836:	e7d6      	b.n	57e6 <__d2b+0x1a>
    5838:	6174      	str	r4, [r6, #20]
    583a:	e7e7      	b.n	580c <__d2b+0x40>
    583c:	a801      	add	r0, sp, #4
    583e:	f7ff fddd 	bl	53fc <__lo0bits>
    5842:	2401      	movs	r4, #1
    5844:	9b01      	ldr	r3, [sp, #4]
    5846:	6134      	str	r4, [r6, #16]
    5848:	6173      	str	r3, [r6, #20]
    584a:	3020      	adds	r0, #32
    584c:	e7e4      	b.n	5818 <__d2b+0x4c>
    584e:	4b07      	ldr	r3, [pc, #28]	; (586c <__d2b+0xa0>)
    5850:	18c0      	adds	r0, r0, r3
    5852:	4b07      	ldr	r3, [pc, #28]	; (5870 <__d2b+0xa4>)
    5854:	6038      	str	r0, [r7, #0]
    5856:	18e3      	adds	r3, r4, r3
    5858:	009b      	lsls	r3, r3, #2
    585a:	18f3      	adds	r3, r6, r3
    585c:	6958      	ldr	r0, [r3, #20]
    585e:	f7ff fdb3 	bl	53c8 <__hi0bits>
    5862:	0164      	lsls	r4, r4, #5
    5864:	1a20      	subs	r0, r4, r0
    5866:	e7df      	b.n	5828 <__d2b+0x5c>
    5868:	fffffbcd 	.word	0xfffffbcd
    586c:	fffffbce 	.word	0xfffffbce
    5870:	3fffffff 	.word	0x3fffffff

00005874 <_calloc_r>:
    5874:	434a      	muls	r2, r1
    5876:	b570      	push	{r4, r5, r6, lr}
    5878:	0011      	movs	r1, r2
    587a:	0014      	movs	r4, r2
    587c:	f000 f852 	bl	5924 <_malloc_r>
    5880:	1e05      	subs	r5, r0, #0
    5882:	d003      	beq.n	588c <_calloc_r+0x18>
    5884:	0022      	movs	r2, r4
    5886:	2100      	movs	r1, #0
    5888:	f7fd fe09 	bl	349e <memset>
    588c:	0028      	movs	r0, r5
    588e:	bd70      	pop	{r4, r5, r6, pc}

00005890 <_free_r>:
    5890:	b570      	push	{r4, r5, r6, lr}
    5892:	0005      	movs	r5, r0
    5894:	2900      	cmp	r1, #0
    5896:	d010      	beq.n	58ba <_free_r+0x2a>
    5898:	1f0c      	subs	r4, r1, #4
    589a:	6823      	ldr	r3, [r4, #0]
    589c:	2b00      	cmp	r3, #0
    589e:	da00      	bge.n	58a2 <_free_r+0x12>
    58a0:	18e4      	adds	r4, r4, r3
    58a2:	0028      	movs	r0, r5
    58a4:	f000 faae 	bl	5e04 <__malloc_lock>
    58a8:	4a1d      	ldr	r2, [pc, #116]	; (5920 <_free_r+0x90>)
    58aa:	6813      	ldr	r3, [r2, #0]
    58ac:	2b00      	cmp	r3, #0
    58ae:	d105      	bne.n	58bc <_free_r+0x2c>
    58b0:	6063      	str	r3, [r4, #4]
    58b2:	6014      	str	r4, [r2, #0]
    58b4:	0028      	movs	r0, r5
    58b6:	f000 faa6 	bl	5e06 <__malloc_unlock>
    58ba:	bd70      	pop	{r4, r5, r6, pc}
    58bc:	42a3      	cmp	r3, r4
    58be:	d909      	bls.n	58d4 <_free_r+0x44>
    58c0:	6821      	ldr	r1, [r4, #0]
    58c2:	1860      	adds	r0, r4, r1
    58c4:	4283      	cmp	r3, r0
    58c6:	d1f3      	bne.n	58b0 <_free_r+0x20>
    58c8:	6818      	ldr	r0, [r3, #0]
    58ca:	685b      	ldr	r3, [r3, #4]
    58cc:	1841      	adds	r1, r0, r1
    58ce:	6021      	str	r1, [r4, #0]
    58d0:	e7ee      	b.n	58b0 <_free_r+0x20>
    58d2:	0013      	movs	r3, r2
    58d4:	685a      	ldr	r2, [r3, #4]
    58d6:	2a00      	cmp	r2, #0
    58d8:	d001      	beq.n	58de <_free_r+0x4e>
    58da:	42a2      	cmp	r2, r4
    58dc:	d9f9      	bls.n	58d2 <_free_r+0x42>
    58de:	6819      	ldr	r1, [r3, #0]
    58e0:	1858      	adds	r0, r3, r1
    58e2:	42a0      	cmp	r0, r4
    58e4:	d10b      	bne.n	58fe <_free_r+0x6e>
    58e6:	6820      	ldr	r0, [r4, #0]
    58e8:	1809      	adds	r1, r1, r0
    58ea:	1858      	adds	r0, r3, r1
    58ec:	6019      	str	r1, [r3, #0]
    58ee:	4282      	cmp	r2, r0
    58f0:	d1e0      	bne.n	58b4 <_free_r+0x24>
    58f2:	6810      	ldr	r0, [r2, #0]
    58f4:	6852      	ldr	r2, [r2, #4]
    58f6:	1841      	adds	r1, r0, r1
    58f8:	6019      	str	r1, [r3, #0]
    58fa:	605a      	str	r2, [r3, #4]
    58fc:	e7da      	b.n	58b4 <_free_r+0x24>
    58fe:	42a0      	cmp	r0, r4
    5900:	d902      	bls.n	5908 <_free_r+0x78>
    5902:	230c      	movs	r3, #12
    5904:	602b      	str	r3, [r5, #0]
    5906:	e7d5      	b.n	58b4 <_free_r+0x24>
    5908:	6821      	ldr	r1, [r4, #0]
    590a:	1860      	adds	r0, r4, r1
    590c:	4282      	cmp	r2, r0
    590e:	d103      	bne.n	5918 <_free_r+0x88>
    5910:	6810      	ldr	r0, [r2, #0]
    5912:	6852      	ldr	r2, [r2, #4]
    5914:	1841      	adds	r1, r0, r1
    5916:	6021      	str	r1, [r4, #0]
    5918:	6062      	str	r2, [r4, #4]
    591a:	605c      	str	r4, [r3, #4]
    591c:	e7ca      	b.n	58b4 <_free_r+0x24>
    591e:	46c0      	nop			; (mov r8, r8)
    5920:	2000087c 	.word	0x2000087c

00005924 <_malloc_r>:
    5924:	2303      	movs	r3, #3
    5926:	b570      	push	{r4, r5, r6, lr}
    5928:	1ccd      	adds	r5, r1, #3
    592a:	439d      	bics	r5, r3
    592c:	3508      	adds	r5, #8
    592e:	0006      	movs	r6, r0
    5930:	2d0c      	cmp	r5, #12
    5932:	d21e      	bcs.n	5972 <_malloc_r+0x4e>
    5934:	250c      	movs	r5, #12
    5936:	42a9      	cmp	r1, r5
    5938:	d81d      	bhi.n	5976 <_malloc_r+0x52>
    593a:	0030      	movs	r0, r6
    593c:	f000 fa62 	bl	5e04 <__malloc_lock>
    5940:	4a25      	ldr	r2, [pc, #148]	; (59d8 <_malloc_r+0xb4>)
    5942:	6814      	ldr	r4, [r2, #0]
    5944:	0021      	movs	r1, r4
    5946:	2900      	cmp	r1, #0
    5948:	d119      	bne.n	597e <_malloc_r+0x5a>
    594a:	4c24      	ldr	r4, [pc, #144]	; (59dc <_malloc_r+0xb8>)
    594c:	6823      	ldr	r3, [r4, #0]
    594e:	2b00      	cmp	r3, #0
    5950:	d103      	bne.n	595a <_malloc_r+0x36>
    5952:	0030      	movs	r0, r6
    5954:	f000 f988 	bl	5c68 <_sbrk_r>
    5958:	6020      	str	r0, [r4, #0]
    595a:	0029      	movs	r1, r5
    595c:	0030      	movs	r0, r6
    595e:	f000 f983 	bl	5c68 <_sbrk_r>
    5962:	1c43      	adds	r3, r0, #1
    5964:	d12c      	bne.n	59c0 <_malloc_r+0x9c>
    5966:	230c      	movs	r3, #12
    5968:	0030      	movs	r0, r6
    596a:	6033      	str	r3, [r6, #0]
    596c:	f000 fa4b 	bl	5e06 <__malloc_unlock>
    5970:	e003      	b.n	597a <_malloc_r+0x56>
    5972:	2d00      	cmp	r5, #0
    5974:	dadf      	bge.n	5936 <_malloc_r+0x12>
    5976:	230c      	movs	r3, #12
    5978:	6033      	str	r3, [r6, #0]
    597a:	2000      	movs	r0, #0
    597c:	bd70      	pop	{r4, r5, r6, pc}
    597e:	680b      	ldr	r3, [r1, #0]
    5980:	1b5b      	subs	r3, r3, r5
    5982:	d41a      	bmi.n	59ba <_malloc_r+0x96>
    5984:	2b0b      	cmp	r3, #11
    5986:	d903      	bls.n	5990 <_malloc_r+0x6c>
    5988:	600b      	str	r3, [r1, #0]
    598a:	18cc      	adds	r4, r1, r3
    598c:	6025      	str	r5, [r4, #0]
    598e:	e003      	b.n	5998 <_malloc_r+0x74>
    5990:	428c      	cmp	r4, r1
    5992:	d10e      	bne.n	59b2 <_malloc_r+0x8e>
    5994:	6863      	ldr	r3, [r4, #4]
    5996:	6013      	str	r3, [r2, #0]
    5998:	0030      	movs	r0, r6
    599a:	f000 fa34 	bl	5e06 <__malloc_unlock>
    599e:	0020      	movs	r0, r4
    59a0:	2207      	movs	r2, #7
    59a2:	300b      	adds	r0, #11
    59a4:	1d23      	adds	r3, r4, #4
    59a6:	4390      	bics	r0, r2
    59a8:	1ac3      	subs	r3, r0, r3
    59aa:	d0e7      	beq.n	597c <_malloc_r+0x58>
    59ac:	425a      	negs	r2, r3
    59ae:	50e2      	str	r2, [r4, r3]
    59b0:	e7e4      	b.n	597c <_malloc_r+0x58>
    59b2:	684b      	ldr	r3, [r1, #4]
    59b4:	6063      	str	r3, [r4, #4]
    59b6:	000c      	movs	r4, r1
    59b8:	e7ee      	b.n	5998 <_malloc_r+0x74>
    59ba:	000c      	movs	r4, r1
    59bc:	6849      	ldr	r1, [r1, #4]
    59be:	e7c2      	b.n	5946 <_malloc_r+0x22>
    59c0:	2303      	movs	r3, #3
    59c2:	1cc4      	adds	r4, r0, #3
    59c4:	439c      	bics	r4, r3
    59c6:	42a0      	cmp	r0, r4
    59c8:	d0e0      	beq.n	598c <_malloc_r+0x68>
    59ca:	1a21      	subs	r1, r4, r0
    59cc:	0030      	movs	r0, r6
    59ce:	f000 f94b 	bl	5c68 <_sbrk_r>
    59d2:	1c43      	adds	r3, r0, #1
    59d4:	d1da      	bne.n	598c <_malloc_r+0x68>
    59d6:	e7c6      	b.n	5966 <_malloc_r+0x42>
    59d8:	2000087c 	.word	0x2000087c
    59dc:	20000880 	.word	0x20000880

000059e0 <__sfputc_r>:
    59e0:	6893      	ldr	r3, [r2, #8]
    59e2:	b510      	push	{r4, lr}
    59e4:	3b01      	subs	r3, #1
    59e6:	6093      	str	r3, [r2, #8]
    59e8:	2b00      	cmp	r3, #0
    59ea:	da05      	bge.n	59f8 <__sfputc_r+0x18>
    59ec:	6994      	ldr	r4, [r2, #24]
    59ee:	42a3      	cmp	r3, r4
    59f0:	db08      	blt.n	5a04 <__sfputc_r+0x24>
    59f2:	b2cb      	uxtb	r3, r1
    59f4:	2b0a      	cmp	r3, #10
    59f6:	d005      	beq.n	5a04 <__sfputc_r+0x24>
    59f8:	6813      	ldr	r3, [r2, #0]
    59fa:	1c58      	adds	r0, r3, #1
    59fc:	6010      	str	r0, [r2, #0]
    59fe:	7019      	strb	r1, [r3, #0]
    5a00:	b2c8      	uxtb	r0, r1
    5a02:	bd10      	pop	{r4, pc}
    5a04:	f7fe fb06 	bl	4014 <__swbuf_r>
    5a08:	e7fb      	b.n	5a02 <__sfputc_r+0x22>

00005a0a <__sfputs_r>:
    5a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a0c:	0006      	movs	r6, r0
    5a0e:	000f      	movs	r7, r1
    5a10:	0014      	movs	r4, r2
    5a12:	18d5      	adds	r5, r2, r3
    5a14:	42ac      	cmp	r4, r5
    5a16:	d101      	bne.n	5a1c <__sfputs_r+0x12>
    5a18:	2000      	movs	r0, #0
    5a1a:	e007      	b.n	5a2c <__sfputs_r+0x22>
    5a1c:	7821      	ldrb	r1, [r4, #0]
    5a1e:	003a      	movs	r2, r7
    5a20:	0030      	movs	r0, r6
    5a22:	f7ff ffdd 	bl	59e0 <__sfputc_r>
    5a26:	3401      	adds	r4, #1
    5a28:	1c43      	adds	r3, r0, #1
    5a2a:	d1f3      	bne.n	5a14 <__sfputs_r+0xa>
    5a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005a30 <_vfiprintf_r>:
    5a30:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a32:	b09f      	sub	sp, #124	; 0x7c
    5a34:	0006      	movs	r6, r0
    5a36:	000f      	movs	r7, r1
    5a38:	0014      	movs	r4, r2
    5a3a:	9305      	str	r3, [sp, #20]
    5a3c:	2800      	cmp	r0, #0
    5a3e:	d004      	beq.n	5a4a <_vfiprintf_r+0x1a>
    5a40:	6983      	ldr	r3, [r0, #24]
    5a42:	2b00      	cmp	r3, #0
    5a44:	d101      	bne.n	5a4a <_vfiprintf_r+0x1a>
    5a46:	f7ff fb15 	bl	5074 <__sinit>
    5a4a:	4b7f      	ldr	r3, [pc, #508]	; (5c48 <_vfiprintf_r+0x218>)
    5a4c:	429f      	cmp	r7, r3
    5a4e:	d15c      	bne.n	5b0a <_vfiprintf_r+0xda>
    5a50:	6877      	ldr	r7, [r6, #4]
    5a52:	89bb      	ldrh	r3, [r7, #12]
    5a54:	071b      	lsls	r3, r3, #28
    5a56:	d562      	bpl.n	5b1e <_vfiprintf_r+0xee>
    5a58:	693b      	ldr	r3, [r7, #16]
    5a5a:	2b00      	cmp	r3, #0
    5a5c:	d05f      	beq.n	5b1e <_vfiprintf_r+0xee>
    5a5e:	2300      	movs	r3, #0
    5a60:	ad06      	add	r5, sp, #24
    5a62:	616b      	str	r3, [r5, #20]
    5a64:	3320      	adds	r3, #32
    5a66:	766b      	strb	r3, [r5, #25]
    5a68:	3310      	adds	r3, #16
    5a6a:	76ab      	strb	r3, [r5, #26]
    5a6c:	9402      	str	r4, [sp, #8]
    5a6e:	9c02      	ldr	r4, [sp, #8]
    5a70:	7823      	ldrb	r3, [r4, #0]
    5a72:	2b00      	cmp	r3, #0
    5a74:	d15d      	bne.n	5b32 <_vfiprintf_r+0x102>
    5a76:	9b02      	ldr	r3, [sp, #8]
    5a78:	1ae3      	subs	r3, r4, r3
    5a7a:	9304      	str	r3, [sp, #16]
    5a7c:	d00d      	beq.n	5a9a <_vfiprintf_r+0x6a>
    5a7e:	9b04      	ldr	r3, [sp, #16]
    5a80:	9a02      	ldr	r2, [sp, #8]
    5a82:	0039      	movs	r1, r7
    5a84:	0030      	movs	r0, r6
    5a86:	f7ff ffc0 	bl	5a0a <__sfputs_r>
    5a8a:	1c43      	adds	r3, r0, #1
    5a8c:	d100      	bne.n	5a90 <_vfiprintf_r+0x60>
    5a8e:	e0cc      	b.n	5c2a <_vfiprintf_r+0x1fa>
    5a90:	696a      	ldr	r2, [r5, #20]
    5a92:	9b04      	ldr	r3, [sp, #16]
    5a94:	4694      	mov	ip, r2
    5a96:	4463      	add	r3, ip
    5a98:	616b      	str	r3, [r5, #20]
    5a9a:	7823      	ldrb	r3, [r4, #0]
    5a9c:	2b00      	cmp	r3, #0
    5a9e:	d100      	bne.n	5aa2 <_vfiprintf_r+0x72>
    5aa0:	e0c3      	b.n	5c2a <_vfiprintf_r+0x1fa>
    5aa2:	2201      	movs	r2, #1
    5aa4:	2300      	movs	r3, #0
    5aa6:	4252      	negs	r2, r2
    5aa8:	606a      	str	r2, [r5, #4]
    5aaa:	a902      	add	r1, sp, #8
    5aac:	3254      	adds	r2, #84	; 0x54
    5aae:	1852      	adds	r2, r2, r1
    5ab0:	3401      	adds	r4, #1
    5ab2:	602b      	str	r3, [r5, #0]
    5ab4:	60eb      	str	r3, [r5, #12]
    5ab6:	60ab      	str	r3, [r5, #8]
    5ab8:	7013      	strb	r3, [r2, #0]
    5aba:	65ab      	str	r3, [r5, #88]	; 0x58
    5abc:	7821      	ldrb	r1, [r4, #0]
    5abe:	2205      	movs	r2, #5
    5ac0:	4862      	ldr	r0, [pc, #392]	; (5c4c <_vfiprintf_r+0x21c>)
    5ac2:	f7ff fbe9 	bl	5298 <memchr>
    5ac6:	1c63      	adds	r3, r4, #1
    5ac8:	469c      	mov	ip, r3
    5aca:	2800      	cmp	r0, #0
    5acc:	d135      	bne.n	5b3a <_vfiprintf_r+0x10a>
    5ace:	6829      	ldr	r1, [r5, #0]
    5ad0:	06cb      	lsls	r3, r1, #27
    5ad2:	d504      	bpl.n	5ade <_vfiprintf_r+0xae>
    5ad4:	2353      	movs	r3, #83	; 0x53
    5ad6:	aa02      	add	r2, sp, #8
    5ad8:	3020      	adds	r0, #32
    5ada:	189b      	adds	r3, r3, r2
    5adc:	7018      	strb	r0, [r3, #0]
    5ade:	070b      	lsls	r3, r1, #28
    5ae0:	d504      	bpl.n	5aec <_vfiprintf_r+0xbc>
    5ae2:	2353      	movs	r3, #83	; 0x53
    5ae4:	202b      	movs	r0, #43	; 0x2b
    5ae6:	aa02      	add	r2, sp, #8
    5ae8:	189b      	adds	r3, r3, r2
    5aea:	7018      	strb	r0, [r3, #0]
    5aec:	7823      	ldrb	r3, [r4, #0]
    5aee:	2b2a      	cmp	r3, #42	; 0x2a
    5af0:	d02c      	beq.n	5b4c <_vfiprintf_r+0x11c>
    5af2:	2000      	movs	r0, #0
    5af4:	210a      	movs	r1, #10
    5af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5af8:	7822      	ldrb	r2, [r4, #0]
    5afa:	3a30      	subs	r2, #48	; 0x30
    5afc:	2a09      	cmp	r2, #9
    5afe:	d800      	bhi.n	5b02 <_vfiprintf_r+0xd2>
    5b00:	e06b      	b.n	5bda <_vfiprintf_r+0x1aa>
    5b02:	2800      	cmp	r0, #0
    5b04:	d02a      	beq.n	5b5c <_vfiprintf_r+0x12c>
    5b06:	9309      	str	r3, [sp, #36]	; 0x24
    5b08:	e028      	b.n	5b5c <_vfiprintf_r+0x12c>
    5b0a:	4b51      	ldr	r3, [pc, #324]	; (5c50 <_vfiprintf_r+0x220>)
    5b0c:	429f      	cmp	r7, r3
    5b0e:	d101      	bne.n	5b14 <_vfiprintf_r+0xe4>
    5b10:	68b7      	ldr	r7, [r6, #8]
    5b12:	e79e      	b.n	5a52 <_vfiprintf_r+0x22>
    5b14:	4b4f      	ldr	r3, [pc, #316]	; (5c54 <_vfiprintf_r+0x224>)
    5b16:	429f      	cmp	r7, r3
    5b18:	d19b      	bne.n	5a52 <_vfiprintf_r+0x22>
    5b1a:	68f7      	ldr	r7, [r6, #12]
    5b1c:	e799      	b.n	5a52 <_vfiprintf_r+0x22>
    5b1e:	0039      	movs	r1, r7
    5b20:	0030      	movs	r0, r6
    5b22:	f7fe facd 	bl	40c0 <__swsetup_r>
    5b26:	2800      	cmp	r0, #0
    5b28:	d099      	beq.n	5a5e <_vfiprintf_r+0x2e>
    5b2a:	2001      	movs	r0, #1
    5b2c:	4240      	negs	r0, r0
    5b2e:	b01f      	add	sp, #124	; 0x7c
    5b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b32:	2b25      	cmp	r3, #37	; 0x25
    5b34:	d09f      	beq.n	5a76 <_vfiprintf_r+0x46>
    5b36:	3401      	adds	r4, #1
    5b38:	e79a      	b.n	5a70 <_vfiprintf_r+0x40>
    5b3a:	4b44      	ldr	r3, [pc, #272]	; (5c4c <_vfiprintf_r+0x21c>)
    5b3c:	6829      	ldr	r1, [r5, #0]
    5b3e:	1ac0      	subs	r0, r0, r3
    5b40:	2301      	movs	r3, #1
    5b42:	4083      	lsls	r3, r0
    5b44:	430b      	orrs	r3, r1
    5b46:	602b      	str	r3, [r5, #0]
    5b48:	4664      	mov	r4, ip
    5b4a:	e7b7      	b.n	5abc <_vfiprintf_r+0x8c>
    5b4c:	9b05      	ldr	r3, [sp, #20]
    5b4e:	1d18      	adds	r0, r3, #4
    5b50:	681b      	ldr	r3, [r3, #0]
    5b52:	9005      	str	r0, [sp, #20]
    5b54:	2b00      	cmp	r3, #0
    5b56:	db3a      	blt.n	5bce <_vfiprintf_r+0x19e>
    5b58:	9309      	str	r3, [sp, #36]	; 0x24
    5b5a:	4664      	mov	r4, ip
    5b5c:	7823      	ldrb	r3, [r4, #0]
    5b5e:	2b2e      	cmp	r3, #46	; 0x2e
    5b60:	d10b      	bne.n	5b7a <_vfiprintf_r+0x14a>
    5b62:	7863      	ldrb	r3, [r4, #1]
    5b64:	1c62      	adds	r2, r4, #1
    5b66:	2b2a      	cmp	r3, #42	; 0x2a
    5b68:	d13f      	bne.n	5bea <_vfiprintf_r+0x1ba>
    5b6a:	9b05      	ldr	r3, [sp, #20]
    5b6c:	3402      	adds	r4, #2
    5b6e:	1d1a      	adds	r2, r3, #4
    5b70:	681b      	ldr	r3, [r3, #0]
    5b72:	9205      	str	r2, [sp, #20]
    5b74:	2b00      	cmp	r3, #0
    5b76:	db35      	blt.n	5be4 <_vfiprintf_r+0x1b4>
    5b78:	9307      	str	r3, [sp, #28]
    5b7a:	7821      	ldrb	r1, [r4, #0]
    5b7c:	2203      	movs	r2, #3
    5b7e:	4836      	ldr	r0, [pc, #216]	; (5c58 <_vfiprintf_r+0x228>)
    5b80:	f7ff fb8a 	bl	5298 <memchr>
    5b84:	2800      	cmp	r0, #0
    5b86:	d007      	beq.n	5b98 <_vfiprintf_r+0x168>
    5b88:	4b33      	ldr	r3, [pc, #204]	; (5c58 <_vfiprintf_r+0x228>)
    5b8a:	682a      	ldr	r2, [r5, #0]
    5b8c:	1ac0      	subs	r0, r0, r3
    5b8e:	2340      	movs	r3, #64	; 0x40
    5b90:	4083      	lsls	r3, r0
    5b92:	4313      	orrs	r3, r2
    5b94:	602b      	str	r3, [r5, #0]
    5b96:	3401      	adds	r4, #1
    5b98:	7821      	ldrb	r1, [r4, #0]
    5b9a:	1c63      	adds	r3, r4, #1
    5b9c:	2206      	movs	r2, #6
    5b9e:	482f      	ldr	r0, [pc, #188]	; (5c5c <_vfiprintf_r+0x22c>)
    5ba0:	9302      	str	r3, [sp, #8]
    5ba2:	7629      	strb	r1, [r5, #24]
    5ba4:	f7ff fb78 	bl	5298 <memchr>
    5ba8:	2800      	cmp	r0, #0
    5baa:	d044      	beq.n	5c36 <_vfiprintf_r+0x206>
    5bac:	4b2c      	ldr	r3, [pc, #176]	; (5c60 <_vfiprintf_r+0x230>)
    5bae:	2b00      	cmp	r3, #0
    5bb0:	d12f      	bne.n	5c12 <_vfiprintf_r+0x1e2>
    5bb2:	6829      	ldr	r1, [r5, #0]
    5bb4:	9b05      	ldr	r3, [sp, #20]
    5bb6:	2207      	movs	r2, #7
    5bb8:	05c9      	lsls	r1, r1, #23
    5bba:	d528      	bpl.n	5c0e <_vfiprintf_r+0x1de>
    5bbc:	189b      	adds	r3, r3, r2
    5bbe:	4393      	bics	r3, r2
    5bc0:	3308      	adds	r3, #8
    5bc2:	9305      	str	r3, [sp, #20]
    5bc4:	696b      	ldr	r3, [r5, #20]
    5bc6:	9a03      	ldr	r2, [sp, #12]
    5bc8:	189b      	adds	r3, r3, r2
    5bca:	616b      	str	r3, [r5, #20]
    5bcc:	e74f      	b.n	5a6e <_vfiprintf_r+0x3e>
    5bce:	425b      	negs	r3, r3
    5bd0:	60eb      	str	r3, [r5, #12]
    5bd2:	2302      	movs	r3, #2
    5bd4:	430b      	orrs	r3, r1
    5bd6:	602b      	str	r3, [r5, #0]
    5bd8:	e7bf      	b.n	5b5a <_vfiprintf_r+0x12a>
    5bda:	434b      	muls	r3, r1
    5bdc:	3401      	adds	r4, #1
    5bde:	189b      	adds	r3, r3, r2
    5be0:	2001      	movs	r0, #1
    5be2:	e789      	b.n	5af8 <_vfiprintf_r+0xc8>
    5be4:	2301      	movs	r3, #1
    5be6:	425b      	negs	r3, r3
    5be8:	e7c6      	b.n	5b78 <_vfiprintf_r+0x148>
    5bea:	2300      	movs	r3, #0
    5bec:	0014      	movs	r4, r2
    5bee:	200a      	movs	r0, #10
    5bf0:	001a      	movs	r2, r3
    5bf2:	606b      	str	r3, [r5, #4]
    5bf4:	7821      	ldrb	r1, [r4, #0]
    5bf6:	3930      	subs	r1, #48	; 0x30
    5bf8:	2909      	cmp	r1, #9
    5bfa:	d903      	bls.n	5c04 <_vfiprintf_r+0x1d4>
    5bfc:	2b00      	cmp	r3, #0
    5bfe:	d0bc      	beq.n	5b7a <_vfiprintf_r+0x14a>
    5c00:	9207      	str	r2, [sp, #28]
    5c02:	e7ba      	b.n	5b7a <_vfiprintf_r+0x14a>
    5c04:	4342      	muls	r2, r0
    5c06:	3401      	adds	r4, #1
    5c08:	1852      	adds	r2, r2, r1
    5c0a:	2301      	movs	r3, #1
    5c0c:	e7f2      	b.n	5bf4 <_vfiprintf_r+0x1c4>
    5c0e:	3307      	adds	r3, #7
    5c10:	e7d5      	b.n	5bbe <_vfiprintf_r+0x18e>
    5c12:	ab05      	add	r3, sp, #20
    5c14:	9300      	str	r3, [sp, #0]
    5c16:	003a      	movs	r2, r7
    5c18:	4b12      	ldr	r3, [pc, #72]	; (5c64 <_vfiprintf_r+0x234>)
    5c1a:	0029      	movs	r1, r5
    5c1c:	0030      	movs	r0, r6
    5c1e:	f7fd fce3 	bl	35e8 <_printf_float>
    5c22:	9003      	str	r0, [sp, #12]
    5c24:	9b03      	ldr	r3, [sp, #12]
    5c26:	3301      	adds	r3, #1
    5c28:	d1cc      	bne.n	5bc4 <_vfiprintf_r+0x194>
    5c2a:	89bb      	ldrh	r3, [r7, #12]
    5c2c:	065b      	lsls	r3, r3, #25
    5c2e:	d500      	bpl.n	5c32 <_vfiprintf_r+0x202>
    5c30:	e77b      	b.n	5b2a <_vfiprintf_r+0xfa>
    5c32:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5c34:	e77b      	b.n	5b2e <_vfiprintf_r+0xfe>
    5c36:	ab05      	add	r3, sp, #20
    5c38:	9300      	str	r3, [sp, #0]
    5c3a:	003a      	movs	r2, r7
    5c3c:	4b09      	ldr	r3, [pc, #36]	; (5c64 <_vfiprintf_r+0x234>)
    5c3e:	0029      	movs	r1, r5
    5c40:	0030      	movs	r0, r6
    5c42:	f7fd ff8b 	bl	3b5c <_printf_i>
    5c46:	e7ec      	b.n	5c22 <_vfiprintf_r+0x1f2>
    5c48:	00008f30 	.word	0x00008f30
    5c4c:	0000906c 	.word	0x0000906c
    5c50:	00008f50 	.word	0x00008f50
    5c54:	00008f10 	.word	0x00008f10
    5c58:	00009072 	.word	0x00009072
    5c5c:	00009076 	.word	0x00009076
    5c60:	000035e9 	.word	0x000035e9
    5c64:	00005a0b 	.word	0x00005a0b

00005c68 <_sbrk_r>:
    5c68:	2300      	movs	r3, #0
    5c6a:	b570      	push	{r4, r5, r6, lr}
    5c6c:	4c06      	ldr	r4, [pc, #24]	; (5c88 <_sbrk_r+0x20>)
    5c6e:	0005      	movs	r5, r0
    5c70:	0008      	movs	r0, r1
    5c72:	6023      	str	r3, [r4, #0]
    5c74:	f7fc fce8 	bl	2648 <_sbrk>
    5c78:	1c43      	adds	r3, r0, #1
    5c7a:	d103      	bne.n	5c84 <_sbrk_r+0x1c>
    5c7c:	6823      	ldr	r3, [r4, #0]
    5c7e:	2b00      	cmp	r3, #0
    5c80:	d000      	beq.n	5c84 <_sbrk_r+0x1c>
    5c82:	602b      	str	r3, [r5, #0]
    5c84:	bd70      	pop	{r4, r5, r6, pc}
    5c86:	46c0      	nop			; (mov r8, r8)
    5c88:	20000ab8 	.word	0x20000ab8

00005c8c <__sread>:
    5c8c:	b570      	push	{r4, r5, r6, lr}
    5c8e:	000c      	movs	r4, r1
    5c90:	250e      	movs	r5, #14
    5c92:	5f49      	ldrsh	r1, [r1, r5]
    5c94:	f000 f8b8 	bl	5e08 <_read_r>
    5c98:	2800      	cmp	r0, #0
    5c9a:	db03      	blt.n	5ca4 <__sread+0x18>
    5c9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5c9e:	181b      	adds	r3, r3, r0
    5ca0:	6563      	str	r3, [r4, #84]	; 0x54
    5ca2:	bd70      	pop	{r4, r5, r6, pc}
    5ca4:	89a3      	ldrh	r3, [r4, #12]
    5ca6:	4a02      	ldr	r2, [pc, #8]	; (5cb0 <__sread+0x24>)
    5ca8:	4013      	ands	r3, r2
    5caa:	81a3      	strh	r3, [r4, #12]
    5cac:	e7f9      	b.n	5ca2 <__sread+0x16>
    5cae:	46c0      	nop			; (mov r8, r8)
    5cb0:	ffffefff 	.word	0xffffefff

00005cb4 <__swrite>:
    5cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5cb6:	001f      	movs	r7, r3
    5cb8:	898b      	ldrh	r3, [r1, #12]
    5cba:	0005      	movs	r5, r0
    5cbc:	000c      	movs	r4, r1
    5cbe:	0016      	movs	r6, r2
    5cc0:	05db      	lsls	r3, r3, #23
    5cc2:	d505      	bpl.n	5cd0 <__swrite+0x1c>
    5cc4:	230e      	movs	r3, #14
    5cc6:	5ec9      	ldrsh	r1, [r1, r3]
    5cc8:	2200      	movs	r2, #0
    5cca:	2302      	movs	r3, #2
    5ccc:	f000 f874 	bl	5db8 <_lseek_r>
    5cd0:	89a3      	ldrh	r3, [r4, #12]
    5cd2:	4a05      	ldr	r2, [pc, #20]	; (5ce8 <__swrite+0x34>)
    5cd4:	0028      	movs	r0, r5
    5cd6:	4013      	ands	r3, r2
    5cd8:	81a3      	strh	r3, [r4, #12]
    5cda:	0032      	movs	r2, r6
    5cdc:	230e      	movs	r3, #14
    5cde:	5ee1      	ldrsh	r1, [r4, r3]
    5ce0:	003b      	movs	r3, r7
    5ce2:	f000 f81f 	bl	5d24 <_write_r>
    5ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ce8:	ffffefff 	.word	0xffffefff

00005cec <__sseek>:
    5cec:	b570      	push	{r4, r5, r6, lr}
    5cee:	000c      	movs	r4, r1
    5cf0:	250e      	movs	r5, #14
    5cf2:	5f49      	ldrsh	r1, [r1, r5]
    5cf4:	f000 f860 	bl	5db8 <_lseek_r>
    5cf8:	89a3      	ldrh	r3, [r4, #12]
    5cfa:	1c42      	adds	r2, r0, #1
    5cfc:	d103      	bne.n	5d06 <__sseek+0x1a>
    5cfe:	4a05      	ldr	r2, [pc, #20]	; (5d14 <__sseek+0x28>)
    5d00:	4013      	ands	r3, r2
    5d02:	81a3      	strh	r3, [r4, #12]
    5d04:	bd70      	pop	{r4, r5, r6, pc}
    5d06:	2280      	movs	r2, #128	; 0x80
    5d08:	0152      	lsls	r2, r2, #5
    5d0a:	4313      	orrs	r3, r2
    5d0c:	81a3      	strh	r3, [r4, #12]
    5d0e:	6560      	str	r0, [r4, #84]	; 0x54
    5d10:	e7f8      	b.n	5d04 <__sseek+0x18>
    5d12:	46c0      	nop			; (mov r8, r8)
    5d14:	ffffefff 	.word	0xffffefff

00005d18 <__sclose>:
    5d18:	b510      	push	{r4, lr}
    5d1a:	230e      	movs	r3, #14
    5d1c:	5ec9      	ldrsh	r1, [r1, r3]
    5d1e:	f000 f815 	bl	5d4c <_close_r>
    5d22:	bd10      	pop	{r4, pc}

00005d24 <_write_r>:
    5d24:	b570      	push	{r4, r5, r6, lr}
    5d26:	0005      	movs	r5, r0
    5d28:	0008      	movs	r0, r1
    5d2a:	0011      	movs	r1, r2
    5d2c:	2200      	movs	r2, #0
    5d2e:	4c06      	ldr	r4, [pc, #24]	; (5d48 <_write_r+0x24>)
    5d30:	6022      	str	r2, [r4, #0]
    5d32:	001a      	movs	r2, r3
    5d34:	f7fc fc60 	bl	25f8 <_write>
    5d38:	1c43      	adds	r3, r0, #1
    5d3a:	d103      	bne.n	5d44 <_write_r+0x20>
    5d3c:	6823      	ldr	r3, [r4, #0]
    5d3e:	2b00      	cmp	r3, #0
    5d40:	d000      	beq.n	5d44 <_write_r+0x20>
    5d42:	602b      	str	r3, [r5, #0]
    5d44:	bd70      	pop	{r4, r5, r6, pc}
    5d46:	46c0      	nop			; (mov r8, r8)
    5d48:	20000ab8 	.word	0x20000ab8

00005d4c <_close_r>:
    5d4c:	2300      	movs	r3, #0
    5d4e:	b570      	push	{r4, r5, r6, lr}
    5d50:	4c06      	ldr	r4, [pc, #24]	; (5d6c <_close_r+0x20>)
    5d52:	0005      	movs	r5, r0
    5d54:	0008      	movs	r0, r1
    5d56:	6023      	str	r3, [r4, #0]
    5d58:	f7fc fc88 	bl	266c <_close>
    5d5c:	1c43      	adds	r3, r0, #1
    5d5e:	d103      	bne.n	5d68 <_close_r+0x1c>
    5d60:	6823      	ldr	r3, [r4, #0]
    5d62:	2b00      	cmp	r3, #0
    5d64:	d000      	beq.n	5d68 <_close_r+0x1c>
    5d66:	602b      	str	r3, [r5, #0]
    5d68:	bd70      	pop	{r4, r5, r6, pc}
    5d6a:	46c0      	nop			; (mov r8, r8)
    5d6c:	20000ab8 	.word	0x20000ab8

00005d70 <_fstat_r>:
    5d70:	2300      	movs	r3, #0
    5d72:	b570      	push	{r4, r5, r6, lr}
    5d74:	4c06      	ldr	r4, [pc, #24]	; (5d90 <_fstat_r+0x20>)
    5d76:	0005      	movs	r5, r0
    5d78:	0008      	movs	r0, r1
    5d7a:	0011      	movs	r1, r2
    5d7c:	6023      	str	r3, [r4, #0]
    5d7e:	f7fc fc78 	bl	2672 <_fstat>
    5d82:	1c43      	adds	r3, r0, #1
    5d84:	d103      	bne.n	5d8e <_fstat_r+0x1e>
    5d86:	6823      	ldr	r3, [r4, #0]
    5d88:	2b00      	cmp	r3, #0
    5d8a:	d000      	beq.n	5d8e <_fstat_r+0x1e>
    5d8c:	602b      	str	r3, [r5, #0]
    5d8e:	bd70      	pop	{r4, r5, r6, pc}
    5d90:	20000ab8 	.word	0x20000ab8

00005d94 <_isatty_r>:
    5d94:	2300      	movs	r3, #0
    5d96:	b570      	push	{r4, r5, r6, lr}
    5d98:	4c06      	ldr	r4, [pc, #24]	; (5db4 <_isatty_r+0x20>)
    5d9a:	0005      	movs	r5, r0
    5d9c:	0008      	movs	r0, r1
    5d9e:	6023      	str	r3, [r4, #0]
    5da0:	f7fc fc6c 	bl	267c <_isatty>
    5da4:	1c43      	adds	r3, r0, #1
    5da6:	d103      	bne.n	5db0 <_isatty_r+0x1c>
    5da8:	6823      	ldr	r3, [r4, #0]
    5daa:	2b00      	cmp	r3, #0
    5dac:	d000      	beq.n	5db0 <_isatty_r+0x1c>
    5dae:	602b      	str	r3, [r5, #0]
    5db0:	bd70      	pop	{r4, r5, r6, pc}
    5db2:	46c0      	nop			; (mov r8, r8)
    5db4:	20000ab8 	.word	0x20000ab8

00005db8 <_lseek_r>:
    5db8:	b570      	push	{r4, r5, r6, lr}
    5dba:	0005      	movs	r5, r0
    5dbc:	0008      	movs	r0, r1
    5dbe:	0011      	movs	r1, r2
    5dc0:	2200      	movs	r2, #0
    5dc2:	4c06      	ldr	r4, [pc, #24]	; (5ddc <_lseek_r+0x24>)
    5dc4:	6022      	str	r2, [r4, #0]
    5dc6:	001a      	movs	r2, r3
    5dc8:	f7fc fc5a 	bl	2680 <_lseek>
    5dcc:	1c43      	adds	r3, r0, #1
    5dce:	d103      	bne.n	5dd8 <_lseek_r+0x20>
    5dd0:	6823      	ldr	r3, [r4, #0]
    5dd2:	2b00      	cmp	r3, #0
    5dd4:	d000      	beq.n	5dd8 <_lseek_r+0x20>
    5dd6:	602b      	str	r3, [r5, #0]
    5dd8:	bd70      	pop	{r4, r5, r6, pc}
    5dda:	46c0      	nop			; (mov r8, r8)
    5ddc:	20000ab8 	.word	0x20000ab8

00005de0 <__ascii_mbtowc>:
    5de0:	b082      	sub	sp, #8
    5de2:	2900      	cmp	r1, #0
    5de4:	d100      	bne.n	5de8 <__ascii_mbtowc+0x8>
    5de6:	a901      	add	r1, sp, #4
    5de8:	1e10      	subs	r0, r2, #0
    5dea:	d006      	beq.n	5dfa <__ascii_mbtowc+0x1a>
    5dec:	2b00      	cmp	r3, #0
    5dee:	d006      	beq.n	5dfe <__ascii_mbtowc+0x1e>
    5df0:	7813      	ldrb	r3, [r2, #0]
    5df2:	600b      	str	r3, [r1, #0]
    5df4:	7810      	ldrb	r0, [r2, #0]
    5df6:	1e43      	subs	r3, r0, #1
    5df8:	4198      	sbcs	r0, r3
    5dfa:	b002      	add	sp, #8
    5dfc:	4770      	bx	lr
    5dfe:	2002      	movs	r0, #2
    5e00:	4240      	negs	r0, r0
    5e02:	e7fa      	b.n	5dfa <__ascii_mbtowc+0x1a>

00005e04 <__malloc_lock>:
    5e04:	4770      	bx	lr

00005e06 <__malloc_unlock>:
    5e06:	4770      	bx	lr

00005e08 <_read_r>:
    5e08:	b570      	push	{r4, r5, r6, lr}
    5e0a:	0005      	movs	r5, r0
    5e0c:	0008      	movs	r0, r1
    5e0e:	0011      	movs	r1, r2
    5e10:	2200      	movs	r2, #0
    5e12:	4c06      	ldr	r4, [pc, #24]	; (5e2c <_read_r+0x24>)
    5e14:	6022      	str	r2, [r4, #0]
    5e16:	001a      	movs	r2, r3
    5e18:	f7fc fbcc 	bl	25b4 <_read>
    5e1c:	1c43      	adds	r3, r0, #1
    5e1e:	d103      	bne.n	5e28 <_read_r+0x20>
    5e20:	6823      	ldr	r3, [r4, #0]
    5e22:	2b00      	cmp	r3, #0
    5e24:	d000      	beq.n	5e28 <_read_r+0x20>
    5e26:	602b      	str	r3, [r5, #0]
    5e28:	bd70      	pop	{r4, r5, r6, pc}
    5e2a:	46c0      	nop			; (mov r8, r8)
    5e2c:	20000ab8 	.word	0x20000ab8

00005e30 <__ascii_wctomb>:
    5e30:	1e0b      	subs	r3, r1, #0
    5e32:	d004      	beq.n	5e3e <__ascii_wctomb+0xe>
    5e34:	2aff      	cmp	r2, #255	; 0xff
    5e36:	d904      	bls.n	5e42 <__ascii_wctomb+0x12>
    5e38:	238a      	movs	r3, #138	; 0x8a
    5e3a:	6003      	str	r3, [r0, #0]
    5e3c:	3b8b      	subs	r3, #139	; 0x8b
    5e3e:	0018      	movs	r0, r3
    5e40:	4770      	bx	lr
    5e42:	700a      	strb	r2, [r1, #0]
    5e44:	2301      	movs	r3, #1
    5e46:	e7fa      	b.n	5e3e <__ascii_wctomb+0xe>

00005e48 <__gnu_thumb1_case_uqi>:
    5e48:	b402      	push	{r1}
    5e4a:	4671      	mov	r1, lr
    5e4c:	0849      	lsrs	r1, r1, #1
    5e4e:	0049      	lsls	r1, r1, #1
    5e50:	5c09      	ldrb	r1, [r1, r0]
    5e52:	0049      	lsls	r1, r1, #1
    5e54:	448e      	add	lr, r1
    5e56:	bc02      	pop	{r1}
    5e58:	4770      	bx	lr
    5e5a:	46c0      	nop			; (mov r8, r8)

00005e5c <__udivsi3>:
    5e5c:	2200      	movs	r2, #0
    5e5e:	0843      	lsrs	r3, r0, #1
    5e60:	428b      	cmp	r3, r1
    5e62:	d374      	bcc.n	5f4e <__udivsi3+0xf2>
    5e64:	0903      	lsrs	r3, r0, #4
    5e66:	428b      	cmp	r3, r1
    5e68:	d35f      	bcc.n	5f2a <__udivsi3+0xce>
    5e6a:	0a03      	lsrs	r3, r0, #8
    5e6c:	428b      	cmp	r3, r1
    5e6e:	d344      	bcc.n	5efa <__udivsi3+0x9e>
    5e70:	0b03      	lsrs	r3, r0, #12
    5e72:	428b      	cmp	r3, r1
    5e74:	d328      	bcc.n	5ec8 <__udivsi3+0x6c>
    5e76:	0c03      	lsrs	r3, r0, #16
    5e78:	428b      	cmp	r3, r1
    5e7a:	d30d      	bcc.n	5e98 <__udivsi3+0x3c>
    5e7c:	22ff      	movs	r2, #255	; 0xff
    5e7e:	0209      	lsls	r1, r1, #8
    5e80:	ba12      	rev	r2, r2
    5e82:	0c03      	lsrs	r3, r0, #16
    5e84:	428b      	cmp	r3, r1
    5e86:	d302      	bcc.n	5e8e <__udivsi3+0x32>
    5e88:	1212      	asrs	r2, r2, #8
    5e8a:	0209      	lsls	r1, r1, #8
    5e8c:	d065      	beq.n	5f5a <__udivsi3+0xfe>
    5e8e:	0b03      	lsrs	r3, r0, #12
    5e90:	428b      	cmp	r3, r1
    5e92:	d319      	bcc.n	5ec8 <__udivsi3+0x6c>
    5e94:	e000      	b.n	5e98 <__udivsi3+0x3c>
    5e96:	0a09      	lsrs	r1, r1, #8
    5e98:	0bc3      	lsrs	r3, r0, #15
    5e9a:	428b      	cmp	r3, r1
    5e9c:	d301      	bcc.n	5ea2 <__udivsi3+0x46>
    5e9e:	03cb      	lsls	r3, r1, #15
    5ea0:	1ac0      	subs	r0, r0, r3
    5ea2:	4152      	adcs	r2, r2
    5ea4:	0b83      	lsrs	r3, r0, #14
    5ea6:	428b      	cmp	r3, r1
    5ea8:	d301      	bcc.n	5eae <__udivsi3+0x52>
    5eaa:	038b      	lsls	r3, r1, #14
    5eac:	1ac0      	subs	r0, r0, r3
    5eae:	4152      	adcs	r2, r2
    5eb0:	0b43      	lsrs	r3, r0, #13
    5eb2:	428b      	cmp	r3, r1
    5eb4:	d301      	bcc.n	5eba <__udivsi3+0x5e>
    5eb6:	034b      	lsls	r3, r1, #13
    5eb8:	1ac0      	subs	r0, r0, r3
    5eba:	4152      	adcs	r2, r2
    5ebc:	0b03      	lsrs	r3, r0, #12
    5ebe:	428b      	cmp	r3, r1
    5ec0:	d301      	bcc.n	5ec6 <__udivsi3+0x6a>
    5ec2:	030b      	lsls	r3, r1, #12
    5ec4:	1ac0      	subs	r0, r0, r3
    5ec6:	4152      	adcs	r2, r2
    5ec8:	0ac3      	lsrs	r3, r0, #11
    5eca:	428b      	cmp	r3, r1
    5ecc:	d301      	bcc.n	5ed2 <__udivsi3+0x76>
    5ece:	02cb      	lsls	r3, r1, #11
    5ed0:	1ac0      	subs	r0, r0, r3
    5ed2:	4152      	adcs	r2, r2
    5ed4:	0a83      	lsrs	r3, r0, #10
    5ed6:	428b      	cmp	r3, r1
    5ed8:	d301      	bcc.n	5ede <__udivsi3+0x82>
    5eda:	028b      	lsls	r3, r1, #10
    5edc:	1ac0      	subs	r0, r0, r3
    5ede:	4152      	adcs	r2, r2
    5ee0:	0a43      	lsrs	r3, r0, #9
    5ee2:	428b      	cmp	r3, r1
    5ee4:	d301      	bcc.n	5eea <__udivsi3+0x8e>
    5ee6:	024b      	lsls	r3, r1, #9
    5ee8:	1ac0      	subs	r0, r0, r3
    5eea:	4152      	adcs	r2, r2
    5eec:	0a03      	lsrs	r3, r0, #8
    5eee:	428b      	cmp	r3, r1
    5ef0:	d301      	bcc.n	5ef6 <__udivsi3+0x9a>
    5ef2:	020b      	lsls	r3, r1, #8
    5ef4:	1ac0      	subs	r0, r0, r3
    5ef6:	4152      	adcs	r2, r2
    5ef8:	d2cd      	bcs.n	5e96 <__udivsi3+0x3a>
    5efa:	09c3      	lsrs	r3, r0, #7
    5efc:	428b      	cmp	r3, r1
    5efe:	d301      	bcc.n	5f04 <__udivsi3+0xa8>
    5f00:	01cb      	lsls	r3, r1, #7
    5f02:	1ac0      	subs	r0, r0, r3
    5f04:	4152      	adcs	r2, r2
    5f06:	0983      	lsrs	r3, r0, #6
    5f08:	428b      	cmp	r3, r1
    5f0a:	d301      	bcc.n	5f10 <__udivsi3+0xb4>
    5f0c:	018b      	lsls	r3, r1, #6
    5f0e:	1ac0      	subs	r0, r0, r3
    5f10:	4152      	adcs	r2, r2
    5f12:	0943      	lsrs	r3, r0, #5
    5f14:	428b      	cmp	r3, r1
    5f16:	d301      	bcc.n	5f1c <__udivsi3+0xc0>
    5f18:	014b      	lsls	r3, r1, #5
    5f1a:	1ac0      	subs	r0, r0, r3
    5f1c:	4152      	adcs	r2, r2
    5f1e:	0903      	lsrs	r3, r0, #4
    5f20:	428b      	cmp	r3, r1
    5f22:	d301      	bcc.n	5f28 <__udivsi3+0xcc>
    5f24:	010b      	lsls	r3, r1, #4
    5f26:	1ac0      	subs	r0, r0, r3
    5f28:	4152      	adcs	r2, r2
    5f2a:	08c3      	lsrs	r3, r0, #3
    5f2c:	428b      	cmp	r3, r1
    5f2e:	d301      	bcc.n	5f34 <__udivsi3+0xd8>
    5f30:	00cb      	lsls	r3, r1, #3
    5f32:	1ac0      	subs	r0, r0, r3
    5f34:	4152      	adcs	r2, r2
    5f36:	0883      	lsrs	r3, r0, #2
    5f38:	428b      	cmp	r3, r1
    5f3a:	d301      	bcc.n	5f40 <__udivsi3+0xe4>
    5f3c:	008b      	lsls	r3, r1, #2
    5f3e:	1ac0      	subs	r0, r0, r3
    5f40:	4152      	adcs	r2, r2
    5f42:	0843      	lsrs	r3, r0, #1
    5f44:	428b      	cmp	r3, r1
    5f46:	d301      	bcc.n	5f4c <__udivsi3+0xf0>
    5f48:	004b      	lsls	r3, r1, #1
    5f4a:	1ac0      	subs	r0, r0, r3
    5f4c:	4152      	adcs	r2, r2
    5f4e:	1a41      	subs	r1, r0, r1
    5f50:	d200      	bcs.n	5f54 <__udivsi3+0xf8>
    5f52:	4601      	mov	r1, r0
    5f54:	4152      	adcs	r2, r2
    5f56:	4610      	mov	r0, r2
    5f58:	4770      	bx	lr
    5f5a:	e7ff      	b.n	5f5c <__udivsi3+0x100>
    5f5c:	b501      	push	{r0, lr}
    5f5e:	2000      	movs	r0, #0
    5f60:	f000 f8f0 	bl	6144 <__aeabi_idiv0>
    5f64:	bd02      	pop	{r1, pc}
    5f66:	46c0      	nop			; (mov r8, r8)

00005f68 <__aeabi_uidivmod>:
    5f68:	2900      	cmp	r1, #0
    5f6a:	d0f7      	beq.n	5f5c <__udivsi3+0x100>
    5f6c:	e776      	b.n	5e5c <__udivsi3>
    5f6e:	4770      	bx	lr

00005f70 <__divsi3>:
    5f70:	4603      	mov	r3, r0
    5f72:	430b      	orrs	r3, r1
    5f74:	d47f      	bmi.n	6076 <__divsi3+0x106>
    5f76:	2200      	movs	r2, #0
    5f78:	0843      	lsrs	r3, r0, #1
    5f7a:	428b      	cmp	r3, r1
    5f7c:	d374      	bcc.n	6068 <__divsi3+0xf8>
    5f7e:	0903      	lsrs	r3, r0, #4
    5f80:	428b      	cmp	r3, r1
    5f82:	d35f      	bcc.n	6044 <__divsi3+0xd4>
    5f84:	0a03      	lsrs	r3, r0, #8
    5f86:	428b      	cmp	r3, r1
    5f88:	d344      	bcc.n	6014 <__divsi3+0xa4>
    5f8a:	0b03      	lsrs	r3, r0, #12
    5f8c:	428b      	cmp	r3, r1
    5f8e:	d328      	bcc.n	5fe2 <__divsi3+0x72>
    5f90:	0c03      	lsrs	r3, r0, #16
    5f92:	428b      	cmp	r3, r1
    5f94:	d30d      	bcc.n	5fb2 <__divsi3+0x42>
    5f96:	22ff      	movs	r2, #255	; 0xff
    5f98:	0209      	lsls	r1, r1, #8
    5f9a:	ba12      	rev	r2, r2
    5f9c:	0c03      	lsrs	r3, r0, #16
    5f9e:	428b      	cmp	r3, r1
    5fa0:	d302      	bcc.n	5fa8 <__divsi3+0x38>
    5fa2:	1212      	asrs	r2, r2, #8
    5fa4:	0209      	lsls	r1, r1, #8
    5fa6:	d065      	beq.n	6074 <__divsi3+0x104>
    5fa8:	0b03      	lsrs	r3, r0, #12
    5faa:	428b      	cmp	r3, r1
    5fac:	d319      	bcc.n	5fe2 <__divsi3+0x72>
    5fae:	e000      	b.n	5fb2 <__divsi3+0x42>
    5fb0:	0a09      	lsrs	r1, r1, #8
    5fb2:	0bc3      	lsrs	r3, r0, #15
    5fb4:	428b      	cmp	r3, r1
    5fb6:	d301      	bcc.n	5fbc <__divsi3+0x4c>
    5fb8:	03cb      	lsls	r3, r1, #15
    5fba:	1ac0      	subs	r0, r0, r3
    5fbc:	4152      	adcs	r2, r2
    5fbe:	0b83      	lsrs	r3, r0, #14
    5fc0:	428b      	cmp	r3, r1
    5fc2:	d301      	bcc.n	5fc8 <__divsi3+0x58>
    5fc4:	038b      	lsls	r3, r1, #14
    5fc6:	1ac0      	subs	r0, r0, r3
    5fc8:	4152      	adcs	r2, r2
    5fca:	0b43      	lsrs	r3, r0, #13
    5fcc:	428b      	cmp	r3, r1
    5fce:	d301      	bcc.n	5fd4 <__divsi3+0x64>
    5fd0:	034b      	lsls	r3, r1, #13
    5fd2:	1ac0      	subs	r0, r0, r3
    5fd4:	4152      	adcs	r2, r2
    5fd6:	0b03      	lsrs	r3, r0, #12
    5fd8:	428b      	cmp	r3, r1
    5fda:	d301      	bcc.n	5fe0 <__divsi3+0x70>
    5fdc:	030b      	lsls	r3, r1, #12
    5fde:	1ac0      	subs	r0, r0, r3
    5fe0:	4152      	adcs	r2, r2
    5fe2:	0ac3      	lsrs	r3, r0, #11
    5fe4:	428b      	cmp	r3, r1
    5fe6:	d301      	bcc.n	5fec <__divsi3+0x7c>
    5fe8:	02cb      	lsls	r3, r1, #11
    5fea:	1ac0      	subs	r0, r0, r3
    5fec:	4152      	adcs	r2, r2
    5fee:	0a83      	lsrs	r3, r0, #10
    5ff0:	428b      	cmp	r3, r1
    5ff2:	d301      	bcc.n	5ff8 <__divsi3+0x88>
    5ff4:	028b      	lsls	r3, r1, #10
    5ff6:	1ac0      	subs	r0, r0, r3
    5ff8:	4152      	adcs	r2, r2
    5ffa:	0a43      	lsrs	r3, r0, #9
    5ffc:	428b      	cmp	r3, r1
    5ffe:	d301      	bcc.n	6004 <__divsi3+0x94>
    6000:	024b      	lsls	r3, r1, #9
    6002:	1ac0      	subs	r0, r0, r3
    6004:	4152      	adcs	r2, r2
    6006:	0a03      	lsrs	r3, r0, #8
    6008:	428b      	cmp	r3, r1
    600a:	d301      	bcc.n	6010 <__divsi3+0xa0>
    600c:	020b      	lsls	r3, r1, #8
    600e:	1ac0      	subs	r0, r0, r3
    6010:	4152      	adcs	r2, r2
    6012:	d2cd      	bcs.n	5fb0 <__divsi3+0x40>
    6014:	09c3      	lsrs	r3, r0, #7
    6016:	428b      	cmp	r3, r1
    6018:	d301      	bcc.n	601e <__divsi3+0xae>
    601a:	01cb      	lsls	r3, r1, #7
    601c:	1ac0      	subs	r0, r0, r3
    601e:	4152      	adcs	r2, r2
    6020:	0983      	lsrs	r3, r0, #6
    6022:	428b      	cmp	r3, r1
    6024:	d301      	bcc.n	602a <__divsi3+0xba>
    6026:	018b      	lsls	r3, r1, #6
    6028:	1ac0      	subs	r0, r0, r3
    602a:	4152      	adcs	r2, r2
    602c:	0943      	lsrs	r3, r0, #5
    602e:	428b      	cmp	r3, r1
    6030:	d301      	bcc.n	6036 <__divsi3+0xc6>
    6032:	014b      	lsls	r3, r1, #5
    6034:	1ac0      	subs	r0, r0, r3
    6036:	4152      	adcs	r2, r2
    6038:	0903      	lsrs	r3, r0, #4
    603a:	428b      	cmp	r3, r1
    603c:	d301      	bcc.n	6042 <__divsi3+0xd2>
    603e:	010b      	lsls	r3, r1, #4
    6040:	1ac0      	subs	r0, r0, r3
    6042:	4152      	adcs	r2, r2
    6044:	08c3      	lsrs	r3, r0, #3
    6046:	428b      	cmp	r3, r1
    6048:	d301      	bcc.n	604e <__divsi3+0xde>
    604a:	00cb      	lsls	r3, r1, #3
    604c:	1ac0      	subs	r0, r0, r3
    604e:	4152      	adcs	r2, r2
    6050:	0883      	lsrs	r3, r0, #2
    6052:	428b      	cmp	r3, r1
    6054:	d301      	bcc.n	605a <__divsi3+0xea>
    6056:	008b      	lsls	r3, r1, #2
    6058:	1ac0      	subs	r0, r0, r3
    605a:	4152      	adcs	r2, r2
    605c:	0843      	lsrs	r3, r0, #1
    605e:	428b      	cmp	r3, r1
    6060:	d301      	bcc.n	6066 <__divsi3+0xf6>
    6062:	004b      	lsls	r3, r1, #1
    6064:	1ac0      	subs	r0, r0, r3
    6066:	4152      	adcs	r2, r2
    6068:	1a41      	subs	r1, r0, r1
    606a:	d200      	bcs.n	606e <__divsi3+0xfe>
    606c:	4601      	mov	r1, r0
    606e:	4152      	adcs	r2, r2
    6070:	4610      	mov	r0, r2
    6072:	4770      	bx	lr
    6074:	e05d      	b.n	6132 <__divsi3+0x1c2>
    6076:	0fca      	lsrs	r2, r1, #31
    6078:	d000      	beq.n	607c <__divsi3+0x10c>
    607a:	4249      	negs	r1, r1
    607c:	1003      	asrs	r3, r0, #32
    607e:	d300      	bcc.n	6082 <__divsi3+0x112>
    6080:	4240      	negs	r0, r0
    6082:	4053      	eors	r3, r2
    6084:	2200      	movs	r2, #0
    6086:	469c      	mov	ip, r3
    6088:	0903      	lsrs	r3, r0, #4
    608a:	428b      	cmp	r3, r1
    608c:	d32d      	bcc.n	60ea <__divsi3+0x17a>
    608e:	0a03      	lsrs	r3, r0, #8
    6090:	428b      	cmp	r3, r1
    6092:	d312      	bcc.n	60ba <__divsi3+0x14a>
    6094:	22fc      	movs	r2, #252	; 0xfc
    6096:	0189      	lsls	r1, r1, #6
    6098:	ba12      	rev	r2, r2
    609a:	0a03      	lsrs	r3, r0, #8
    609c:	428b      	cmp	r3, r1
    609e:	d30c      	bcc.n	60ba <__divsi3+0x14a>
    60a0:	0189      	lsls	r1, r1, #6
    60a2:	1192      	asrs	r2, r2, #6
    60a4:	428b      	cmp	r3, r1
    60a6:	d308      	bcc.n	60ba <__divsi3+0x14a>
    60a8:	0189      	lsls	r1, r1, #6
    60aa:	1192      	asrs	r2, r2, #6
    60ac:	428b      	cmp	r3, r1
    60ae:	d304      	bcc.n	60ba <__divsi3+0x14a>
    60b0:	0189      	lsls	r1, r1, #6
    60b2:	d03a      	beq.n	612a <__divsi3+0x1ba>
    60b4:	1192      	asrs	r2, r2, #6
    60b6:	e000      	b.n	60ba <__divsi3+0x14a>
    60b8:	0989      	lsrs	r1, r1, #6
    60ba:	09c3      	lsrs	r3, r0, #7
    60bc:	428b      	cmp	r3, r1
    60be:	d301      	bcc.n	60c4 <__divsi3+0x154>
    60c0:	01cb      	lsls	r3, r1, #7
    60c2:	1ac0      	subs	r0, r0, r3
    60c4:	4152      	adcs	r2, r2
    60c6:	0983      	lsrs	r3, r0, #6
    60c8:	428b      	cmp	r3, r1
    60ca:	d301      	bcc.n	60d0 <__divsi3+0x160>
    60cc:	018b      	lsls	r3, r1, #6
    60ce:	1ac0      	subs	r0, r0, r3
    60d0:	4152      	adcs	r2, r2
    60d2:	0943      	lsrs	r3, r0, #5
    60d4:	428b      	cmp	r3, r1
    60d6:	d301      	bcc.n	60dc <__divsi3+0x16c>
    60d8:	014b      	lsls	r3, r1, #5
    60da:	1ac0      	subs	r0, r0, r3
    60dc:	4152      	adcs	r2, r2
    60de:	0903      	lsrs	r3, r0, #4
    60e0:	428b      	cmp	r3, r1
    60e2:	d301      	bcc.n	60e8 <__divsi3+0x178>
    60e4:	010b      	lsls	r3, r1, #4
    60e6:	1ac0      	subs	r0, r0, r3
    60e8:	4152      	adcs	r2, r2
    60ea:	08c3      	lsrs	r3, r0, #3
    60ec:	428b      	cmp	r3, r1
    60ee:	d301      	bcc.n	60f4 <__divsi3+0x184>
    60f0:	00cb      	lsls	r3, r1, #3
    60f2:	1ac0      	subs	r0, r0, r3
    60f4:	4152      	adcs	r2, r2
    60f6:	0883      	lsrs	r3, r0, #2
    60f8:	428b      	cmp	r3, r1
    60fa:	d301      	bcc.n	6100 <__divsi3+0x190>
    60fc:	008b      	lsls	r3, r1, #2
    60fe:	1ac0      	subs	r0, r0, r3
    6100:	4152      	adcs	r2, r2
    6102:	d2d9      	bcs.n	60b8 <__divsi3+0x148>
    6104:	0843      	lsrs	r3, r0, #1
    6106:	428b      	cmp	r3, r1
    6108:	d301      	bcc.n	610e <__divsi3+0x19e>
    610a:	004b      	lsls	r3, r1, #1
    610c:	1ac0      	subs	r0, r0, r3
    610e:	4152      	adcs	r2, r2
    6110:	1a41      	subs	r1, r0, r1
    6112:	d200      	bcs.n	6116 <__divsi3+0x1a6>
    6114:	4601      	mov	r1, r0
    6116:	4663      	mov	r3, ip
    6118:	4152      	adcs	r2, r2
    611a:	105b      	asrs	r3, r3, #1
    611c:	4610      	mov	r0, r2
    611e:	d301      	bcc.n	6124 <__divsi3+0x1b4>
    6120:	4240      	negs	r0, r0
    6122:	2b00      	cmp	r3, #0
    6124:	d500      	bpl.n	6128 <__divsi3+0x1b8>
    6126:	4249      	negs	r1, r1
    6128:	4770      	bx	lr
    612a:	4663      	mov	r3, ip
    612c:	105b      	asrs	r3, r3, #1
    612e:	d300      	bcc.n	6132 <__divsi3+0x1c2>
    6130:	4240      	negs	r0, r0
    6132:	b501      	push	{r0, lr}
    6134:	2000      	movs	r0, #0
    6136:	f000 f805 	bl	6144 <__aeabi_idiv0>
    613a:	bd02      	pop	{r1, pc}

0000613c <__aeabi_idivmod>:
    613c:	2900      	cmp	r1, #0
    613e:	d0f8      	beq.n	6132 <__divsi3+0x1c2>
    6140:	e716      	b.n	5f70 <__divsi3>
    6142:	4770      	bx	lr

00006144 <__aeabi_idiv0>:
    6144:	4770      	bx	lr
    6146:	46c0      	nop			; (mov r8, r8)

00006148 <__aeabi_cdrcmple>:
    6148:	4684      	mov	ip, r0
    614a:	1c10      	adds	r0, r2, #0
    614c:	4662      	mov	r2, ip
    614e:	468c      	mov	ip, r1
    6150:	1c19      	adds	r1, r3, #0
    6152:	4663      	mov	r3, ip
    6154:	e000      	b.n	6158 <__aeabi_cdcmpeq>
    6156:	46c0      	nop			; (mov r8, r8)

00006158 <__aeabi_cdcmpeq>:
    6158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    615a:	f001 fe85 	bl	7e68 <__ledf2>
    615e:	2800      	cmp	r0, #0
    6160:	d401      	bmi.n	6166 <__aeabi_cdcmpeq+0xe>
    6162:	2100      	movs	r1, #0
    6164:	42c8      	cmn	r0, r1
    6166:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006168 <__aeabi_dcmpeq>:
    6168:	b510      	push	{r4, lr}
    616a:	f001 fddf 	bl	7d2c <__eqdf2>
    616e:	4240      	negs	r0, r0
    6170:	3001      	adds	r0, #1
    6172:	bd10      	pop	{r4, pc}

00006174 <__aeabi_dcmplt>:
    6174:	b510      	push	{r4, lr}
    6176:	f001 fe77 	bl	7e68 <__ledf2>
    617a:	2800      	cmp	r0, #0
    617c:	db01      	blt.n	6182 <__aeabi_dcmplt+0xe>
    617e:	2000      	movs	r0, #0
    6180:	bd10      	pop	{r4, pc}
    6182:	2001      	movs	r0, #1
    6184:	bd10      	pop	{r4, pc}
    6186:	46c0      	nop			; (mov r8, r8)

00006188 <__aeabi_dcmple>:
    6188:	b510      	push	{r4, lr}
    618a:	f001 fe6d 	bl	7e68 <__ledf2>
    618e:	2800      	cmp	r0, #0
    6190:	dd01      	ble.n	6196 <__aeabi_dcmple+0xe>
    6192:	2000      	movs	r0, #0
    6194:	bd10      	pop	{r4, pc}
    6196:	2001      	movs	r0, #1
    6198:	bd10      	pop	{r4, pc}
    619a:	46c0      	nop			; (mov r8, r8)

0000619c <__aeabi_dcmpgt>:
    619c:	b510      	push	{r4, lr}
    619e:	f001 fdff 	bl	7da0 <__gedf2>
    61a2:	2800      	cmp	r0, #0
    61a4:	dc01      	bgt.n	61aa <__aeabi_dcmpgt+0xe>
    61a6:	2000      	movs	r0, #0
    61a8:	bd10      	pop	{r4, pc}
    61aa:	2001      	movs	r0, #1
    61ac:	bd10      	pop	{r4, pc}
    61ae:	46c0      	nop			; (mov r8, r8)

000061b0 <__aeabi_dcmpge>:
    61b0:	b510      	push	{r4, lr}
    61b2:	f001 fdf5 	bl	7da0 <__gedf2>
    61b6:	2800      	cmp	r0, #0
    61b8:	da01      	bge.n	61be <__aeabi_dcmpge+0xe>
    61ba:	2000      	movs	r0, #0
    61bc:	bd10      	pop	{r4, pc}
    61be:	2001      	movs	r0, #1
    61c0:	bd10      	pop	{r4, pc}
    61c2:	46c0      	nop			; (mov r8, r8)

000061c4 <__aeabi_cfrcmple>:
    61c4:	4684      	mov	ip, r0
    61c6:	1c08      	adds	r0, r1, #0
    61c8:	4661      	mov	r1, ip
    61ca:	e7ff      	b.n	61cc <__aeabi_cfcmpeq>

000061cc <__aeabi_cfcmpeq>:
    61cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    61ce:	f000 fbb5 	bl	693c <__lesf2>
    61d2:	2800      	cmp	r0, #0
    61d4:	d401      	bmi.n	61da <__aeabi_cfcmpeq+0xe>
    61d6:	2100      	movs	r1, #0
    61d8:	42c8      	cmn	r0, r1
    61da:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000061dc <__aeabi_fcmpeq>:
    61dc:	b510      	push	{r4, lr}
    61de:	f000 fb47 	bl	6870 <__eqsf2>
    61e2:	4240      	negs	r0, r0
    61e4:	3001      	adds	r0, #1
    61e6:	bd10      	pop	{r4, pc}

000061e8 <__aeabi_fcmplt>:
    61e8:	b510      	push	{r4, lr}
    61ea:	f000 fba7 	bl	693c <__lesf2>
    61ee:	2800      	cmp	r0, #0
    61f0:	db01      	blt.n	61f6 <__aeabi_fcmplt+0xe>
    61f2:	2000      	movs	r0, #0
    61f4:	bd10      	pop	{r4, pc}
    61f6:	2001      	movs	r0, #1
    61f8:	bd10      	pop	{r4, pc}
    61fa:	46c0      	nop			; (mov r8, r8)

000061fc <__aeabi_fcmple>:
    61fc:	b510      	push	{r4, lr}
    61fe:	f000 fb9d 	bl	693c <__lesf2>
    6202:	2800      	cmp	r0, #0
    6204:	dd01      	ble.n	620a <__aeabi_fcmple+0xe>
    6206:	2000      	movs	r0, #0
    6208:	bd10      	pop	{r4, pc}
    620a:	2001      	movs	r0, #1
    620c:	bd10      	pop	{r4, pc}
    620e:	46c0      	nop			; (mov r8, r8)

00006210 <__aeabi_fcmpgt>:
    6210:	b510      	push	{r4, lr}
    6212:	f000 fb53 	bl	68bc <__gesf2>
    6216:	2800      	cmp	r0, #0
    6218:	dc01      	bgt.n	621e <__aeabi_fcmpgt+0xe>
    621a:	2000      	movs	r0, #0
    621c:	bd10      	pop	{r4, pc}
    621e:	2001      	movs	r0, #1
    6220:	bd10      	pop	{r4, pc}
    6222:	46c0      	nop			; (mov r8, r8)

00006224 <__aeabi_fcmpge>:
    6224:	b510      	push	{r4, lr}
    6226:	f000 fb49 	bl	68bc <__gesf2>
    622a:	2800      	cmp	r0, #0
    622c:	da01      	bge.n	6232 <__aeabi_fcmpge+0xe>
    622e:	2000      	movs	r0, #0
    6230:	bd10      	pop	{r4, pc}
    6232:	2001      	movs	r0, #1
    6234:	bd10      	pop	{r4, pc}
    6236:	46c0      	nop			; (mov r8, r8)

00006238 <__aeabi_lmul>:
    6238:	b5f0      	push	{r4, r5, r6, r7, lr}
    623a:	46ce      	mov	lr, r9
    623c:	4647      	mov	r7, r8
    623e:	0415      	lsls	r5, r2, #16
    6240:	0c2d      	lsrs	r5, r5, #16
    6242:	002e      	movs	r6, r5
    6244:	b580      	push	{r7, lr}
    6246:	0407      	lsls	r7, r0, #16
    6248:	0c14      	lsrs	r4, r2, #16
    624a:	0c3f      	lsrs	r7, r7, #16
    624c:	4699      	mov	r9, r3
    624e:	0c03      	lsrs	r3, r0, #16
    6250:	437e      	muls	r6, r7
    6252:	435d      	muls	r5, r3
    6254:	4367      	muls	r7, r4
    6256:	4363      	muls	r3, r4
    6258:	197f      	adds	r7, r7, r5
    625a:	0c34      	lsrs	r4, r6, #16
    625c:	19e4      	adds	r4, r4, r7
    625e:	469c      	mov	ip, r3
    6260:	42a5      	cmp	r5, r4
    6262:	d903      	bls.n	626c <__aeabi_lmul+0x34>
    6264:	2380      	movs	r3, #128	; 0x80
    6266:	025b      	lsls	r3, r3, #9
    6268:	4698      	mov	r8, r3
    626a:	44c4      	add	ip, r8
    626c:	464b      	mov	r3, r9
    626e:	4351      	muls	r1, r2
    6270:	4343      	muls	r3, r0
    6272:	0436      	lsls	r6, r6, #16
    6274:	0c36      	lsrs	r6, r6, #16
    6276:	0c25      	lsrs	r5, r4, #16
    6278:	0424      	lsls	r4, r4, #16
    627a:	4465      	add	r5, ip
    627c:	19a4      	adds	r4, r4, r6
    627e:	1859      	adds	r1, r3, r1
    6280:	1949      	adds	r1, r1, r5
    6282:	0020      	movs	r0, r4
    6284:	bc0c      	pop	{r2, r3}
    6286:	4690      	mov	r8, r2
    6288:	4699      	mov	r9, r3
    628a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000628c <__aeabi_f2uiz>:
    628c:	219e      	movs	r1, #158	; 0x9e
    628e:	b510      	push	{r4, lr}
    6290:	05c9      	lsls	r1, r1, #23
    6292:	1c04      	adds	r4, r0, #0
    6294:	f7ff ffc6 	bl	6224 <__aeabi_fcmpge>
    6298:	2800      	cmp	r0, #0
    629a:	d103      	bne.n	62a4 <__aeabi_f2uiz+0x18>
    629c:	1c20      	adds	r0, r4, #0
    629e:	f000 fe4b 	bl	6f38 <__aeabi_f2iz>
    62a2:	bd10      	pop	{r4, pc}
    62a4:	219e      	movs	r1, #158	; 0x9e
    62a6:	1c20      	adds	r0, r4, #0
    62a8:	05c9      	lsls	r1, r1, #23
    62aa:	f000 fca9 	bl	6c00 <__aeabi_fsub>
    62ae:	f000 fe43 	bl	6f38 <__aeabi_f2iz>
    62b2:	2380      	movs	r3, #128	; 0x80
    62b4:	061b      	lsls	r3, r3, #24
    62b6:	469c      	mov	ip, r3
    62b8:	4460      	add	r0, ip
    62ba:	e7f2      	b.n	62a2 <__aeabi_f2uiz+0x16>

000062bc <__aeabi_fadd>:
    62bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    62be:	46c6      	mov	lr, r8
    62c0:	024e      	lsls	r6, r1, #9
    62c2:	0247      	lsls	r7, r0, #9
    62c4:	0a76      	lsrs	r6, r6, #9
    62c6:	0a7b      	lsrs	r3, r7, #9
    62c8:	0044      	lsls	r4, r0, #1
    62ca:	0fc5      	lsrs	r5, r0, #31
    62cc:	00f7      	lsls	r7, r6, #3
    62ce:	0048      	lsls	r0, r1, #1
    62d0:	4698      	mov	r8, r3
    62d2:	b500      	push	{lr}
    62d4:	0e24      	lsrs	r4, r4, #24
    62d6:	002a      	movs	r2, r5
    62d8:	00db      	lsls	r3, r3, #3
    62da:	0e00      	lsrs	r0, r0, #24
    62dc:	0fc9      	lsrs	r1, r1, #31
    62de:	46bc      	mov	ip, r7
    62e0:	428d      	cmp	r5, r1
    62e2:	d067      	beq.n	63b4 <__aeabi_fadd+0xf8>
    62e4:	1a22      	subs	r2, r4, r0
    62e6:	2a00      	cmp	r2, #0
    62e8:	dc00      	bgt.n	62ec <__aeabi_fadd+0x30>
    62ea:	e0a5      	b.n	6438 <__aeabi_fadd+0x17c>
    62ec:	2800      	cmp	r0, #0
    62ee:	d13a      	bne.n	6366 <__aeabi_fadd+0xaa>
    62f0:	2f00      	cmp	r7, #0
    62f2:	d100      	bne.n	62f6 <__aeabi_fadd+0x3a>
    62f4:	e093      	b.n	641e <__aeabi_fadd+0x162>
    62f6:	1e51      	subs	r1, r2, #1
    62f8:	2900      	cmp	r1, #0
    62fa:	d000      	beq.n	62fe <__aeabi_fadd+0x42>
    62fc:	e0bc      	b.n	6478 <__aeabi_fadd+0x1bc>
    62fe:	2401      	movs	r4, #1
    6300:	1bdb      	subs	r3, r3, r7
    6302:	015a      	lsls	r2, r3, #5
    6304:	d546      	bpl.n	6394 <__aeabi_fadd+0xd8>
    6306:	019b      	lsls	r3, r3, #6
    6308:	099e      	lsrs	r6, r3, #6
    630a:	0030      	movs	r0, r6
    630c:	f002 fd4e 	bl	8dac <__clzsi2>
    6310:	3805      	subs	r0, #5
    6312:	4086      	lsls	r6, r0
    6314:	4284      	cmp	r4, r0
    6316:	dd00      	ble.n	631a <__aeabi_fadd+0x5e>
    6318:	e09d      	b.n	6456 <__aeabi_fadd+0x19a>
    631a:	1b04      	subs	r4, r0, r4
    631c:	0032      	movs	r2, r6
    631e:	2020      	movs	r0, #32
    6320:	3401      	adds	r4, #1
    6322:	40e2      	lsrs	r2, r4
    6324:	1b04      	subs	r4, r0, r4
    6326:	40a6      	lsls	r6, r4
    6328:	0033      	movs	r3, r6
    632a:	1e5e      	subs	r6, r3, #1
    632c:	41b3      	sbcs	r3, r6
    632e:	2400      	movs	r4, #0
    6330:	4313      	orrs	r3, r2
    6332:	075a      	lsls	r2, r3, #29
    6334:	d004      	beq.n	6340 <__aeabi_fadd+0x84>
    6336:	220f      	movs	r2, #15
    6338:	401a      	ands	r2, r3
    633a:	2a04      	cmp	r2, #4
    633c:	d000      	beq.n	6340 <__aeabi_fadd+0x84>
    633e:	3304      	adds	r3, #4
    6340:	015a      	lsls	r2, r3, #5
    6342:	d529      	bpl.n	6398 <__aeabi_fadd+0xdc>
    6344:	3401      	adds	r4, #1
    6346:	2cff      	cmp	r4, #255	; 0xff
    6348:	d100      	bne.n	634c <__aeabi_fadd+0x90>
    634a:	e081      	b.n	6450 <__aeabi_fadd+0x194>
    634c:	002a      	movs	r2, r5
    634e:	019b      	lsls	r3, r3, #6
    6350:	0a5b      	lsrs	r3, r3, #9
    6352:	b2e4      	uxtb	r4, r4
    6354:	025b      	lsls	r3, r3, #9
    6356:	05e4      	lsls	r4, r4, #23
    6358:	0a58      	lsrs	r0, r3, #9
    635a:	07d2      	lsls	r2, r2, #31
    635c:	4320      	orrs	r0, r4
    635e:	4310      	orrs	r0, r2
    6360:	bc04      	pop	{r2}
    6362:	4690      	mov	r8, r2
    6364:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6366:	2cff      	cmp	r4, #255	; 0xff
    6368:	d0e3      	beq.n	6332 <__aeabi_fadd+0x76>
    636a:	2180      	movs	r1, #128	; 0x80
    636c:	0038      	movs	r0, r7
    636e:	04c9      	lsls	r1, r1, #19
    6370:	4308      	orrs	r0, r1
    6372:	4684      	mov	ip, r0
    6374:	2a1b      	cmp	r2, #27
    6376:	dd00      	ble.n	637a <__aeabi_fadd+0xbe>
    6378:	e082      	b.n	6480 <__aeabi_fadd+0x1c4>
    637a:	2020      	movs	r0, #32
    637c:	4661      	mov	r1, ip
    637e:	40d1      	lsrs	r1, r2
    6380:	1a82      	subs	r2, r0, r2
    6382:	4660      	mov	r0, ip
    6384:	4090      	lsls	r0, r2
    6386:	0002      	movs	r2, r0
    6388:	1e50      	subs	r0, r2, #1
    638a:	4182      	sbcs	r2, r0
    638c:	430a      	orrs	r2, r1
    638e:	1a9b      	subs	r3, r3, r2
    6390:	015a      	lsls	r2, r3, #5
    6392:	d4b8      	bmi.n	6306 <__aeabi_fadd+0x4a>
    6394:	075a      	lsls	r2, r3, #29
    6396:	d1ce      	bne.n	6336 <__aeabi_fadd+0x7a>
    6398:	08de      	lsrs	r6, r3, #3
    639a:	002a      	movs	r2, r5
    639c:	2cff      	cmp	r4, #255	; 0xff
    639e:	d13a      	bne.n	6416 <__aeabi_fadd+0x15a>
    63a0:	2e00      	cmp	r6, #0
    63a2:	d100      	bne.n	63a6 <__aeabi_fadd+0xea>
    63a4:	e0ae      	b.n	6504 <__aeabi_fadd+0x248>
    63a6:	2380      	movs	r3, #128	; 0x80
    63a8:	03db      	lsls	r3, r3, #15
    63aa:	4333      	orrs	r3, r6
    63ac:	025b      	lsls	r3, r3, #9
    63ae:	0a5b      	lsrs	r3, r3, #9
    63b0:	24ff      	movs	r4, #255	; 0xff
    63b2:	e7cf      	b.n	6354 <__aeabi_fadd+0x98>
    63b4:	1a21      	subs	r1, r4, r0
    63b6:	2900      	cmp	r1, #0
    63b8:	dd52      	ble.n	6460 <__aeabi_fadd+0x1a4>
    63ba:	2800      	cmp	r0, #0
    63bc:	d031      	beq.n	6422 <__aeabi_fadd+0x166>
    63be:	2cff      	cmp	r4, #255	; 0xff
    63c0:	d0b7      	beq.n	6332 <__aeabi_fadd+0x76>
    63c2:	2080      	movs	r0, #128	; 0x80
    63c4:	003e      	movs	r6, r7
    63c6:	04c0      	lsls	r0, r0, #19
    63c8:	4306      	orrs	r6, r0
    63ca:	46b4      	mov	ip, r6
    63cc:	291b      	cmp	r1, #27
    63ce:	dd00      	ble.n	63d2 <__aeabi_fadd+0x116>
    63d0:	e0aa      	b.n	6528 <__aeabi_fadd+0x26c>
    63d2:	2620      	movs	r6, #32
    63d4:	4660      	mov	r0, ip
    63d6:	40c8      	lsrs	r0, r1
    63d8:	1a71      	subs	r1, r6, r1
    63da:	4666      	mov	r6, ip
    63dc:	408e      	lsls	r6, r1
    63de:	0031      	movs	r1, r6
    63e0:	1e4e      	subs	r6, r1, #1
    63e2:	41b1      	sbcs	r1, r6
    63e4:	4301      	orrs	r1, r0
    63e6:	185b      	adds	r3, r3, r1
    63e8:	0159      	lsls	r1, r3, #5
    63ea:	d5d3      	bpl.n	6394 <__aeabi_fadd+0xd8>
    63ec:	3401      	adds	r4, #1
    63ee:	2cff      	cmp	r4, #255	; 0xff
    63f0:	d100      	bne.n	63f4 <__aeabi_fadd+0x138>
    63f2:	e087      	b.n	6504 <__aeabi_fadd+0x248>
    63f4:	2201      	movs	r2, #1
    63f6:	4978      	ldr	r1, [pc, #480]	; (65d8 <__aeabi_fadd+0x31c>)
    63f8:	401a      	ands	r2, r3
    63fa:	085b      	lsrs	r3, r3, #1
    63fc:	400b      	ands	r3, r1
    63fe:	4313      	orrs	r3, r2
    6400:	e797      	b.n	6332 <__aeabi_fadd+0x76>
    6402:	2c00      	cmp	r4, #0
    6404:	d000      	beq.n	6408 <__aeabi_fadd+0x14c>
    6406:	e0a7      	b.n	6558 <__aeabi_fadd+0x29c>
    6408:	2b00      	cmp	r3, #0
    640a:	d000      	beq.n	640e <__aeabi_fadd+0x152>
    640c:	e0b6      	b.n	657c <__aeabi_fadd+0x2c0>
    640e:	1e3b      	subs	r3, r7, #0
    6410:	d162      	bne.n	64d8 <__aeabi_fadd+0x21c>
    6412:	2600      	movs	r6, #0
    6414:	2200      	movs	r2, #0
    6416:	0273      	lsls	r3, r6, #9
    6418:	0a5b      	lsrs	r3, r3, #9
    641a:	b2e4      	uxtb	r4, r4
    641c:	e79a      	b.n	6354 <__aeabi_fadd+0x98>
    641e:	0014      	movs	r4, r2
    6420:	e787      	b.n	6332 <__aeabi_fadd+0x76>
    6422:	2f00      	cmp	r7, #0
    6424:	d04d      	beq.n	64c2 <__aeabi_fadd+0x206>
    6426:	1e48      	subs	r0, r1, #1
    6428:	2800      	cmp	r0, #0
    642a:	d157      	bne.n	64dc <__aeabi_fadd+0x220>
    642c:	4463      	add	r3, ip
    642e:	2401      	movs	r4, #1
    6430:	015a      	lsls	r2, r3, #5
    6432:	d5af      	bpl.n	6394 <__aeabi_fadd+0xd8>
    6434:	2402      	movs	r4, #2
    6436:	e7dd      	b.n	63f4 <__aeabi_fadd+0x138>
    6438:	2a00      	cmp	r2, #0
    643a:	d124      	bne.n	6486 <__aeabi_fadd+0x1ca>
    643c:	1c62      	adds	r2, r4, #1
    643e:	b2d2      	uxtb	r2, r2
    6440:	2a01      	cmp	r2, #1
    6442:	ddde      	ble.n	6402 <__aeabi_fadd+0x146>
    6444:	1bde      	subs	r6, r3, r7
    6446:	0172      	lsls	r2, r6, #5
    6448:	d535      	bpl.n	64b6 <__aeabi_fadd+0x1fa>
    644a:	1afe      	subs	r6, r7, r3
    644c:	000d      	movs	r5, r1
    644e:	e75c      	b.n	630a <__aeabi_fadd+0x4e>
    6450:	002a      	movs	r2, r5
    6452:	2300      	movs	r3, #0
    6454:	e77e      	b.n	6354 <__aeabi_fadd+0x98>
    6456:	0033      	movs	r3, r6
    6458:	4a60      	ldr	r2, [pc, #384]	; (65dc <__aeabi_fadd+0x320>)
    645a:	1a24      	subs	r4, r4, r0
    645c:	4013      	ands	r3, r2
    645e:	e768      	b.n	6332 <__aeabi_fadd+0x76>
    6460:	2900      	cmp	r1, #0
    6462:	d163      	bne.n	652c <__aeabi_fadd+0x270>
    6464:	1c61      	adds	r1, r4, #1
    6466:	b2c8      	uxtb	r0, r1
    6468:	2801      	cmp	r0, #1
    646a:	dd4e      	ble.n	650a <__aeabi_fadd+0x24e>
    646c:	29ff      	cmp	r1, #255	; 0xff
    646e:	d049      	beq.n	6504 <__aeabi_fadd+0x248>
    6470:	4463      	add	r3, ip
    6472:	085b      	lsrs	r3, r3, #1
    6474:	000c      	movs	r4, r1
    6476:	e75c      	b.n	6332 <__aeabi_fadd+0x76>
    6478:	2aff      	cmp	r2, #255	; 0xff
    647a:	d041      	beq.n	6500 <__aeabi_fadd+0x244>
    647c:	000a      	movs	r2, r1
    647e:	e779      	b.n	6374 <__aeabi_fadd+0xb8>
    6480:	2201      	movs	r2, #1
    6482:	1a9b      	subs	r3, r3, r2
    6484:	e784      	b.n	6390 <__aeabi_fadd+0xd4>
    6486:	2c00      	cmp	r4, #0
    6488:	d01d      	beq.n	64c6 <__aeabi_fadd+0x20a>
    648a:	28ff      	cmp	r0, #255	; 0xff
    648c:	d022      	beq.n	64d4 <__aeabi_fadd+0x218>
    648e:	2480      	movs	r4, #128	; 0x80
    6490:	04e4      	lsls	r4, r4, #19
    6492:	4252      	negs	r2, r2
    6494:	4323      	orrs	r3, r4
    6496:	2a1b      	cmp	r2, #27
    6498:	dd00      	ble.n	649c <__aeabi_fadd+0x1e0>
    649a:	e08a      	b.n	65b2 <__aeabi_fadd+0x2f6>
    649c:	001c      	movs	r4, r3
    649e:	2520      	movs	r5, #32
    64a0:	40d4      	lsrs	r4, r2
    64a2:	1aaa      	subs	r2, r5, r2
    64a4:	4093      	lsls	r3, r2
    64a6:	1e5a      	subs	r2, r3, #1
    64a8:	4193      	sbcs	r3, r2
    64aa:	4323      	orrs	r3, r4
    64ac:	4662      	mov	r2, ip
    64ae:	0004      	movs	r4, r0
    64b0:	1ad3      	subs	r3, r2, r3
    64b2:	000d      	movs	r5, r1
    64b4:	e725      	b.n	6302 <__aeabi_fadd+0x46>
    64b6:	2e00      	cmp	r6, #0
    64b8:	d000      	beq.n	64bc <__aeabi_fadd+0x200>
    64ba:	e726      	b.n	630a <__aeabi_fadd+0x4e>
    64bc:	2200      	movs	r2, #0
    64be:	2400      	movs	r4, #0
    64c0:	e7a9      	b.n	6416 <__aeabi_fadd+0x15a>
    64c2:	000c      	movs	r4, r1
    64c4:	e735      	b.n	6332 <__aeabi_fadd+0x76>
    64c6:	2b00      	cmp	r3, #0
    64c8:	d04d      	beq.n	6566 <__aeabi_fadd+0x2aa>
    64ca:	43d2      	mvns	r2, r2
    64cc:	2a00      	cmp	r2, #0
    64ce:	d0ed      	beq.n	64ac <__aeabi_fadd+0x1f0>
    64d0:	28ff      	cmp	r0, #255	; 0xff
    64d2:	d1e0      	bne.n	6496 <__aeabi_fadd+0x1da>
    64d4:	4663      	mov	r3, ip
    64d6:	24ff      	movs	r4, #255	; 0xff
    64d8:	000d      	movs	r5, r1
    64da:	e72a      	b.n	6332 <__aeabi_fadd+0x76>
    64dc:	29ff      	cmp	r1, #255	; 0xff
    64de:	d00f      	beq.n	6500 <__aeabi_fadd+0x244>
    64e0:	0001      	movs	r1, r0
    64e2:	e773      	b.n	63cc <__aeabi_fadd+0x110>
    64e4:	2b00      	cmp	r3, #0
    64e6:	d061      	beq.n	65ac <__aeabi_fadd+0x2f0>
    64e8:	24ff      	movs	r4, #255	; 0xff
    64ea:	2f00      	cmp	r7, #0
    64ec:	d100      	bne.n	64f0 <__aeabi_fadd+0x234>
    64ee:	e720      	b.n	6332 <__aeabi_fadd+0x76>
    64f0:	2280      	movs	r2, #128	; 0x80
    64f2:	4641      	mov	r1, r8
    64f4:	03d2      	lsls	r2, r2, #15
    64f6:	4211      	tst	r1, r2
    64f8:	d002      	beq.n	6500 <__aeabi_fadd+0x244>
    64fa:	4216      	tst	r6, r2
    64fc:	d100      	bne.n	6500 <__aeabi_fadd+0x244>
    64fe:	003b      	movs	r3, r7
    6500:	24ff      	movs	r4, #255	; 0xff
    6502:	e716      	b.n	6332 <__aeabi_fadd+0x76>
    6504:	24ff      	movs	r4, #255	; 0xff
    6506:	2300      	movs	r3, #0
    6508:	e724      	b.n	6354 <__aeabi_fadd+0x98>
    650a:	2c00      	cmp	r4, #0
    650c:	d1ea      	bne.n	64e4 <__aeabi_fadd+0x228>
    650e:	2b00      	cmp	r3, #0
    6510:	d058      	beq.n	65c4 <__aeabi_fadd+0x308>
    6512:	2f00      	cmp	r7, #0
    6514:	d100      	bne.n	6518 <__aeabi_fadd+0x25c>
    6516:	e70c      	b.n	6332 <__aeabi_fadd+0x76>
    6518:	4463      	add	r3, ip
    651a:	015a      	lsls	r2, r3, #5
    651c:	d400      	bmi.n	6520 <__aeabi_fadd+0x264>
    651e:	e739      	b.n	6394 <__aeabi_fadd+0xd8>
    6520:	4a2e      	ldr	r2, [pc, #184]	; (65dc <__aeabi_fadd+0x320>)
    6522:	000c      	movs	r4, r1
    6524:	4013      	ands	r3, r2
    6526:	e704      	b.n	6332 <__aeabi_fadd+0x76>
    6528:	2101      	movs	r1, #1
    652a:	e75c      	b.n	63e6 <__aeabi_fadd+0x12a>
    652c:	2c00      	cmp	r4, #0
    652e:	d11e      	bne.n	656e <__aeabi_fadd+0x2b2>
    6530:	2b00      	cmp	r3, #0
    6532:	d040      	beq.n	65b6 <__aeabi_fadd+0x2fa>
    6534:	43c9      	mvns	r1, r1
    6536:	2900      	cmp	r1, #0
    6538:	d00b      	beq.n	6552 <__aeabi_fadd+0x296>
    653a:	28ff      	cmp	r0, #255	; 0xff
    653c:	d036      	beq.n	65ac <__aeabi_fadd+0x2f0>
    653e:	291b      	cmp	r1, #27
    6540:	dc47      	bgt.n	65d2 <__aeabi_fadd+0x316>
    6542:	001c      	movs	r4, r3
    6544:	2620      	movs	r6, #32
    6546:	40cc      	lsrs	r4, r1
    6548:	1a71      	subs	r1, r6, r1
    654a:	408b      	lsls	r3, r1
    654c:	1e59      	subs	r1, r3, #1
    654e:	418b      	sbcs	r3, r1
    6550:	4323      	orrs	r3, r4
    6552:	4463      	add	r3, ip
    6554:	0004      	movs	r4, r0
    6556:	e747      	b.n	63e8 <__aeabi_fadd+0x12c>
    6558:	2b00      	cmp	r3, #0
    655a:	d118      	bne.n	658e <__aeabi_fadd+0x2d2>
    655c:	1e3b      	subs	r3, r7, #0
    655e:	d02d      	beq.n	65bc <__aeabi_fadd+0x300>
    6560:	000d      	movs	r5, r1
    6562:	24ff      	movs	r4, #255	; 0xff
    6564:	e6e5      	b.n	6332 <__aeabi_fadd+0x76>
    6566:	003b      	movs	r3, r7
    6568:	0004      	movs	r4, r0
    656a:	000d      	movs	r5, r1
    656c:	e6e1      	b.n	6332 <__aeabi_fadd+0x76>
    656e:	28ff      	cmp	r0, #255	; 0xff
    6570:	d01c      	beq.n	65ac <__aeabi_fadd+0x2f0>
    6572:	2480      	movs	r4, #128	; 0x80
    6574:	04e4      	lsls	r4, r4, #19
    6576:	4249      	negs	r1, r1
    6578:	4323      	orrs	r3, r4
    657a:	e7e0      	b.n	653e <__aeabi_fadd+0x282>
    657c:	2f00      	cmp	r7, #0
    657e:	d100      	bne.n	6582 <__aeabi_fadd+0x2c6>
    6580:	e6d7      	b.n	6332 <__aeabi_fadd+0x76>
    6582:	1bde      	subs	r6, r3, r7
    6584:	0172      	lsls	r2, r6, #5
    6586:	d51f      	bpl.n	65c8 <__aeabi_fadd+0x30c>
    6588:	1afb      	subs	r3, r7, r3
    658a:	000d      	movs	r5, r1
    658c:	e6d1      	b.n	6332 <__aeabi_fadd+0x76>
    658e:	24ff      	movs	r4, #255	; 0xff
    6590:	2f00      	cmp	r7, #0
    6592:	d100      	bne.n	6596 <__aeabi_fadd+0x2da>
    6594:	e6cd      	b.n	6332 <__aeabi_fadd+0x76>
    6596:	2280      	movs	r2, #128	; 0x80
    6598:	4640      	mov	r0, r8
    659a:	03d2      	lsls	r2, r2, #15
    659c:	4210      	tst	r0, r2
    659e:	d0af      	beq.n	6500 <__aeabi_fadd+0x244>
    65a0:	4216      	tst	r6, r2
    65a2:	d1ad      	bne.n	6500 <__aeabi_fadd+0x244>
    65a4:	003b      	movs	r3, r7
    65a6:	000d      	movs	r5, r1
    65a8:	24ff      	movs	r4, #255	; 0xff
    65aa:	e6c2      	b.n	6332 <__aeabi_fadd+0x76>
    65ac:	4663      	mov	r3, ip
    65ae:	24ff      	movs	r4, #255	; 0xff
    65b0:	e6bf      	b.n	6332 <__aeabi_fadd+0x76>
    65b2:	2301      	movs	r3, #1
    65b4:	e77a      	b.n	64ac <__aeabi_fadd+0x1f0>
    65b6:	003b      	movs	r3, r7
    65b8:	0004      	movs	r4, r0
    65ba:	e6ba      	b.n	6332 <__aeabi_fadd+0x76>
    65bc:	2680      	movs	r6, #128	; 0x80
    65be:	2200      	movs	r2, #0
    65c0:	03f6      	lsls	r6, r6, #15
    65c2:	e6f0      	b.n	63a6 <__aeabi_fadd+0xea>
    65c4:	003b      	movs	r3, r7
    65c6:	e6b4      	b.n	6332 <__aeabi_fadd+0x76>
    65c8:	1e33      	subs	r3, r6, #0
    65ca:	d000      	beq.n	65ce <__aeabi_fadd+0x312>
    65cc:	e6e2      	b.n	6394 <__aeabi_fadd+0xd8>
    65ce:	2200      	movs	r2, #0
    65d0:	e721      	b.n	6416 <__aeabi_fadd+0x15a>
    65d2:	2301      	movs	r3, #1
    65d4:	e7bd      	b.n	6552 <__aeabi_fadd+0x296>
    65d6:	46c0      	nop			; (mov r8, r8)
    65d8:	7dffffff 	.word	0x7dffffff
    65dc:	fbffffff 	.word	0xfbffffff

000065e0 <__aeabi_fdiv>:
    65e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    65e2:	4657      	mov	r7, sl
    65e4:	464e      	mov	r6, r9
    65e6:	46de      	mov	lr, fp
    65e8:	4645      	mov	r5, r8
    65ea:	b5e0      	push	{r5, r6, r7, lr}
    65ec:	0244      	lsls	r4, r0, #9
    65ee:	0043      	lsls	r3, r0, #1
    65f0:	0fc6      	lsrs	r6, r0, #31
    65f2:	b083      	sub	sp, #12
    65f4:	1c0f      	adds	r7, r1, #0
    65f6:	0a64      	lsrs	r4, r4, #9
    65f8:	0e1b      	lsrs	r3, r3, #24
    65fa:	46b2      	mov	sl, r6
    65fc:	d053      	beq.n	66a6 <__aeabi_fdiv+0xc6>
    65fe:	2bff      	cmp	r3, #255	; 0xff
    6600:	d027      	beq.n	6652 <__aeabi_fdiv+0x72>
    6602:	2280      	movs	r2, #128	; 0x80
    6604:	00e4      	lsls	r4, r4, #3
    6606:	04d2      	lsls	r2, r2, #19
    6608:	4314      	orrs	r4, r2
    660a:	227f      	movs	r2, #127	; 0x7f
    660c:	4252      	negs	r2, r2
    660e:	4690      	mov	r8, r2
    6610:	4498      	add	r8, r3
    6612:	2300      	movs	r3, #0
    6614:	4699      	mov	r9, r3
    6616:	469b      	mov	fp, r3
    6618:	027d      	lsls	r5, r7, #9
    661a:	0078      	lsls	r0, r7, #1
    661c:	0ffb      	lsrs	r3, r7, #31
    661e:	0a6d      	lsrs	r5, r5, #9
    6620:	0e00      	lsrs	r0, r0, #24
    6622:	9300      	str	r3, [sp, #0]
    6624:	d024      	beq.n	6670 <__aeabi_fdiv+0x90>
    6626:	28ff      	cmp	r0, #255	; 0xff
    6628:	d046      	beq.n	66b8 <__aeabi_fdiv+0xd8>
    662a:	2380      	movs	r3, #128	; 0x80
    662c:	2100      	movs	r1, #0
    662e:	00ed      	lsls	r5, r5, #3
    6630:	04db      	lsls	r3, r3, #19
    6632:	431d      	orrs	r5, r3
    6634:	387f      	subs	r0, #127	; 0x7f
    6636:	4647      	mov	r7, r8
    6638:	1a38      	subs	r0, r7, r0
    663a:	464f      	mov	r7, r9
    663c:	430f      	orrs	r7, r1
    663e:	00bf      	lsls	r7, r7, #2
    6640:	46b9      	mov	r9, r7
    6642:	0033      	movs	r3, r6
    6644:	9a00      	ldr	r2, [sp, #0]
    6646:	4f87      	ldr	r7, [pc, #540]	; (6864 <__aeabi_fdiv+0x284>)
    6648:	4053      	eors	r3, r2
    664a:	464a      	mov	r2, r9
    664c:	58ba      	ldr	r2, [r7, r2]
    664e:	9301      	str	r3, [sp, #4]
    6650:	4697      	mov	pc, r2
    6652:	2c00      	cmp	r4, #0
    6654:	d14e      	bne.n	66f4 <__aeabi_fdiv+0x114>
    6656:	2308      	movs	r3, #8
    6658:	4699      	mov	r9, r3
    665a:	33f7      	adds	r3, #247	; 0xf7
    665c:	4698      	mov	r8, r3
    665e:	3bfd      	subs	r3, #253	; 0xfd
    6660:	469b      	mov	fp, r3
    6662:	027d      	lsls	r5, r7, #9
    6664:	0078      	lsls	r0, r7, #1
    6666:	0ffb      	lsrs	r3, r7, #31
    6668:	0a6d      	lsrs	r5, r5, #9
    666a:	0e00      	lsrs	r0, r0, #24
    666c:	9300      	str	r3, [sp, #0]
    666e:	d1da      	bne.n	6626 <__aeabi_fdiv+0x46>
    6670:	2d00      	cmp	r5, #0
    6672:	d126      	bne.n	66c2 <__aeabi_fdiv+0xe2>
    6674:	2000      	movs	r0, #0
    6676:	2101      	movs	r1, #1
    6678:	0033      	movs	r3, r6
    667a:	9a00      	ldr	r2, [sp, #0]
    667c:	4f7a      	ldr	r7, [pc, #488]	; (6868 <__aeabi_fdiv+0x288>)
    667e:	4053      	eors	r3, r2
    6680:	4642      	mov	r2, r8
    6682:	1a10      	subs	r0, r2, r0
    6684:	464a      	mov	r2, r9
    6686:	430a      	orrs	r2, r1
    6688:	0092      	lsls	r2, r2, #2
    668a:	58ba      	ldr	r2, [r7, r2]
    668c:	001d      	movs	r5, r3
    668e:	4697      	mov	pc, r2
    6690:	9b00      	ldr	r3, [sp, #0]
    6692:	002c      	movs	r4, r5
    6694:	469a      	mov	sl, r3
    6696:	468b      	mov	fp, r1
    6698:	465b      	mov	r3, fp
    669a:	2b02      	cmp	r3, #2
    669c:	d131      	bne.n	6702 <__aeabi_fdiv+0x122>
    669e:	4653      	mov	r3, sl
    66a0:	21ff      	movs	r1, #255	; 0xff
    66a2:	2400      	movs	r4, #0
    66a4:	e038      	b.n	6718 <__aeabi_fdiv+0x138>
    66a6:	2c00      	cmp	r4, #0
    66a8:	d117      	bne.n	66da <__aeabi_fdiv+0xfa>
    66aa:	2304      	movs	r3, #4
    66ac:	4699      	mov	r9, r3
    66ae:	2300      	movs	r3, #0
    66b0:	4698      	mov	r8, r3
    66b2:	3301      	adds	r3, #1
    66b4:	469b      	mov	fp, r3
    66b6:	e7af      	b.n	6618 <__aeabi_fdiv+0x38>
    66b8:	20ff      	movs	r0, #255	; 0xff
    66ba:	2d00      	cmp	r5, #0
    66bc:	d10b      	bne.n	66d6 <__aeabi_fdiv+0xf6>
    66be:	2102      	movs	r1, #2
    66c0:	e7da      	b.n	6678 <__aeabi_fdiv+0x98>
    66c2:	0028      	movs	r0, r5
    66c4:	f002 fb72 	bl	8dac <__clzsi2>
    66c8:	1f43      	subs	r3, r0, #5
    66ca:	409d      	lsls	r5, r3
    66cc:	2376      	movs	r3, #118	; 0x76
    66ce:	425b      	negs	r3, r3
    66d0:	1a18      	subs	r0, r3, r0
    66d2:	2100      	movs	r1, #0
    66d4:	e7af      	b.n	6636 <__aeabi_fdiv+0x56>
    66d6:	2103      	movs	r1, #3
    66d8:	e7ad      	b.n	6636 <__aeabi_fdiv+0x56>
    66da:	0020      	movs	r0, r4
    66dc:	f002 fb66 	bl	8dac <__clzsi2>
    66e0:	1f43      	subs	r3, r0, #5
    66e2:	409c      	lsls	r4, r3
    66e4:	2376      	movs	r3, #118	; 0x76
    66e6:	425b      	negs	r3, r3
    66e8:	1a1b      	subs	r3, r3, r0
    66ea:	4698      	mov	r8, r3
    66ec:	2300      	movs	r3, #0
    66ee:	4699      	mov	r9, r3
    66f0:	469b      	mov	fp, r3
    66f2:	e791      	b.n	6618 <__aeabi_fdiv+0x38>
    66f4:	230c      	movs	r3, #12
    66f6:	4699      	mov	r9, r3
    66f8:	33f3      	adds	r3, #243	; 0xf3
    66fa:	4698      	mov	r8, r3
    66fc:	3bfc      	subs	r3, #252	; 0xfc
    66fe:	469b      	mov	fp, r3
    6700:	e78a      	b.n	6618 <__aeabi_fdiv+0x38>
    6702:	2b03      	cmp	r3, #3
    6704:	d100      	bne.n	6708 <__aeabi_fdiv+0x128>
    6706:	e0a5      	b.n	6854 <__aeabi_fdiv+0x274>
    6708:	4655      	mov	r5, sl
    670a:	2b01      	cmp	r3, #1
    670c:	d000      	beq.n	6710 <__aeabi_fdiv+0x130>
    670e:	e081      	b.n	6814 <__aeabi_fdiv+0x234>
    6710:	2301      	movs	r3, #1
    6712:	2100      	movs	r1, #0
    6714:	2400      	movs	r4, #0
    6716:	402b      	ands	r3, r5
    6718:	0264      	lsls	r4, r4, #9
    671a:	05c9      	lsls	r1, r1, #23
    671c:	0a60      	lsrs	r0, r4, #9
    671e:	07db      	lsls	r3, r3, #31
    6720:	4308      	orrs	r0, r1
    6722:	4318      	orrs	r0, r3
    6724:	b003      	add	sp, #12
    6726:	bc3c      	pop	{r2, r3, r4, r5}
    6728:	4690      	mov	r8, r2
    672a:	4699      	mov	r9, r3
    672c:	46a2      	mov	sl, r4
    672e:	46ab      	mov	fp, r5
    6730:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6732:	2480      	movs	r4, #128	; 0x80
    6734:	2300      	movs	r3, #0
    6736:	03e4      	lsls	r4, r4, #15
    6738:	21ff      	movs	r1, #255	; 0xff
    673a:	e7ed      	b.n	6718 <__aeabi_fdiv+0x138>
    673c:	21ff      	movs	r1, #255	; 0xff
    673e:	2400      	movs	r4, #0
    6740:	e7ea      	b.n	6718 <__aeabi_fdiv+0x138>
    6742:	2301      	movs	r3, #1
    6744:	1a59      	subs	r1, r3, r1
    6746:	291b      	cmp	r1, #27
    6748:	dd66      	ble.n	6818 <__aeabi_fdiv+0x238>
    674a:	9a01      	ldr	r2, [sp, #4]
    674c:	4013      	ands	r3, r2
    674e:	2100      	movs	r1, #0
    6750:	2400      	movs	r4, #0
    6752:	e7e1      	b.n	6718 <__aeabi_fdiv+0x138>
    6754:	2380      	movs	r3, #128	; 0x80
    6756:	03db      	lsls	r3, r3, #15
    6758:	421c      	tst	r4, r3
    675a:	d038      	beq.n	67ce <__aeabi_fdiv+0x1ee>
    675c:	421d      	tst	r5, r3
    675e:	d051      	beq.n	6804 <__aeabi_fdiv+0x224>
    6760:	431c      	orrs	r4, r3
    6762:	0264      	lsls	r4, r4, #9
    6764:	0a64      	lsrs	r4, r4, #9
    6766:	0033      	movs	r3, r6
    6768:	21ff      	movs	r1, #255	; 0xff
    676a:	e7d5      	b.n	6718 <__aeabi_fdiv+0x138>
    676c:	0163      	lsls	r3, r4, #5
    676e:	016c      	lsls	r4, r5, #5
    6770:	42a3      	cmp	r3, r4
    6772:	d23b      	bcs.n	67ec <__aeabi_fdiv+0x20c>
    6774:	261b      	movs	r6, #27
    6776:	2100      	movs	r1, #0
    6778:	3801      	subs	r0, #1
    677a:	2501      	movs	r5, #1
    677c:	001f      	movs	r7, r3
    677e:	0049      	lsls	r1, r1, #1
    6780:	005b      	lsls	r3, r3, #1
    6782:	2f00      	cmp	r7, #0
    6784:	db01      	blt.n	678a <__aeabi_fdiv+0x1aa>
    6786:	429c      	cmp	r4, r3
    6788:	d801      	bhi.n	678e <__aeabi_fdiv+0x1ae>
    678a:	1b1b      	subs	r3, r3, r4
    678c:	4329      	orrs	r1, r5
    678e:	3e01      	subs	r6, #1
    6790:	2e00      	cmp	r6, #0
    6792:	d1f3      	bne.n	677c <__aeabi_fdiv+0x19c>
    6794:	001c      	movs	r4, r3
    6796:	1e63      	subs	r3, r4, #1
    6798:	419c      	sbcs	r4, r3
    679a:	430c      	orrs	r4, r1
    679c:	0001      	movs	r1, r0
    679e:	317f      	adds	r1, #127	; 0x7f
    67a0:	2900      	cmp	r1, #0
    67a2:	ddce      	ble.n	6742 <__aeabi_fdiv+0x162>
    67a4:	0763      	lsls	r3, r4, #29
    67a6:	d004      	beq.n	67b2 <__aeabi_fdiv+0x1d2>
    67a8:	230f      	movs	r3, #15
    67aa:	4023      	ands	r3, r4
    67ac:	2b04      	cmp	r3, #4
    67ae:	d000      	beq.n	67b2 <__aeabi_fdiv+0x1d2>
    67b0:	3404      	adds	r4, #4
    67b2:	0123      	lsls	r3, r4, #4
    67b4:	d503      	bpl.n	67be <__aeabi_fdiv+0x1de>
    67b6:	0001      	movs	r1, r0
    67b8:	4b2c      	ldr	r3, [pc, #176]	; (686c <__aeabi_fdiv+0x28c>)
    67ba:	3180      	adds	r1, #128	; 0x80
    67bc:	401c      	ands	r4, r3
    67be:	29fe      	cmp	r1, #254	; 0xfe
    67c0:	dd0d      	ble.n	67de <__aeabi_fdiv+0x1fe>
    67c2:	2301      	movs	r3, #1
    67c4:	9a01      	ldr	r2, [sp, #4]
    67c6:	21ff      	movs	r1, #255	; 0xff
    67c8:	4013      	ands	r3, r2
    67ca:	2400      	movs	r4, #0
    67cc:	e7a4      	b.n	6718 <__aeabi_fdiv+0x138>
    67ce:	2380      	movs	r3, #128	; 0x80
    67d0:	03db      	lsls	r3, r3, #15
    67d2:	431c      	orrs	r4, r3
    67d4:	0264      	lsls	r4, r4, #9
    67d6:	0a64      	lsrs	r4, r4, #9
    67d8:	0033      	movs	r3, r6
    67da:	21ff      	movs	r1, #255	; 0xff
    67dc:	e79c      	b.n	6718 <__aeabi_fdiv+0x138>
    67de:	2301      	movs	r3, #1
    67e0:	9a01      	ldr	r2, [sp, #4]
    67e2:	01a4      	lsls	r4, r4, #6
    67e4:	0a64      	lsrs	r4, r4, #9
    67e6:	b2c9      	uxtb	r1, r1
    67e8:	4013      	ands	r3, r2
    67ea:	e795      	b.n	6718 <__aeabi_fdiv+0x138>
    67ec:	1b1b      	subs	r3, r3, r4
    67ee:	261a      	movs	r6, #26
    67f0:	2101      	movs	r1, #1
    67f2:	e7c2      	b.n	677a <__aeabi_fdiv+0x19a>
    67f4:	9b00      	ldr	r3, [sp, #0]
    67f6:	468b      	mov	fp, r1
    67f8:	469a      	mov	sl, r3
    67fa:	2400      	movs	r4, #0
    67fc:	e74c      	b.n	6698 <__aeabi_fdiv+0xb8>
    67fe:	0263      	lsls	r3, r4, #9
    6800:	d5e5      	bpl.n	67ce <__aeabi_fdiv+0x1ee>
    6802:	2500      	movs	r5, #0
    6804:	2480      	movs	r4, #128	; 0x80
    6806:	03e4      	lsls	r4, r4, #15
    6808:	432c      	orrs	r4, r5
    680a:	0264      	lsls	r4, r4, #9
    680c:	0a64      	lsrs	r4, r4, #9
    680e:	9b00      	ldr	r3, [sp, #0]
    6810:	21ff      	movs	r1, #255	; 0xff
    6812:	e781      	b.n	6718 <__aeabi_fdiv+0x138>
    6814:	9501      	str	r5, [sp, #4]
    6816:	e7c1      	b.n	679c <__aeabi_fdiv+0x1bc>
    6818:	0023      	movs	r3, r4
    681a:	2020      	movs	r0, #32
    681c:	40cb      	lsrs	r3, r1
    681e:	1a41      	subs	r1, r0, r1
    6820:	408c      	lsls	r4, r1
    6822:	1e61      	subs	r1, r4, #1
    6824:	418c      	sbcs	r4, r1
    6826:	431c      	orrs	r4, r3
    6828:	0763      	lsls	r3, r4, #29
    682a:	d004      	beq.n	6836 <__aeabi_fdiv+0x256>
    682c:	230f      	movs	r3, #15
    682e:	4023      	ands	r3, r4
    6830:	2b04      	cmp	r3, #4
    6832:	d000      	beq.n	6836 <__aeabi_fdiv+0x256>
    6834:	3404      	adds	r4, #4
    6836:	0163      	lsls	r3, r4, #5
    6838:	d505      	bpl.n	6846 <__aeabi_fdiv+0x266>
    683a:	2301      	movs	r3, #1
    683c:	9a01      	ldr	r2, [sp, #4]
    683e:	2101      	movs	r1, #1
    6840:	4013      	ands	r3, r2
    6842:	2400      	movs	r4, #0
    6844:	e768      	b.n	6718 <__aeabi_fdiv+0x138>
    6846:	2301      	movs	r3, #1
    6848:	9a01      	ldr	r2, [sp, #4]
    684a:	01a4      	lsls	r4, r4, #6
    684c:	0a64      	lsrs	r4, r4, #9
    684e:	4013      	ands	r3, r2
    6850:	2100      	movs	r1, #0
    6852:	e761      	b.n	6718 <__aeabi_fdiv+0x138>
    6854:	2380      	movs	r3, #128	; 0x80
    6856:	03db      	lsls	r3, r3, #15
    6858:	431c      	orrs	r4, r3
    685a:	0264      	lsls	r4, r4, #9
    685c:	0a64      	lsrs	r4, r4, #9
    685e:	4653      	mov	r3, sl
    6860:	21ff      	movs	r1, #255	; 0xff
    6862:	e759      	b.n	6718 <__aeabi_fdiv+0x138>
    6864:	00009188 	.word	0x00009188
    6868:	000091c8 	.word	0x000091c8
    686c:	f7ffffff 	.word	0xf7ffffff

00006870 <__eqsf2>:
    6870:	b570      	push	{r4, r5, r6, lr}
    6872:	0042      	lsls	r2, r0, #1
    6874:	0245      	lsls	r5, r0, #9
    6876:	024e      	lsls	r6, r1, #9
    6878:	004c      	lsls	r4, r1, #1
    687a:	0fc3      	lsrs	r3, r0, #31
    687c:	0a6d      	lsrs	r5, r5, #9
    687e:	0e12      	lsrs	r2, r2, #24
    6880:	0a76      	lsrs	r6, r6, #9
    6882:	0e24      	lsrs	r4, r4, #24
    6884:	0fc9      	lsrs	r1, r1, #31
    6886:	2001      	movs	r0, #1
    6888:	2aff      	cmp	r2, #255	; 0xff
    688a:	d006      	beq.n	689a <__eqsf2+0x2a>
    688c:	2cff      	cmp	r4, #255	; 0xff
    688e:	d003      	beq.n	6898 <__eqsf2+0x28>
    6890:	42a2      	cmp	r2, r4
    6892:	d101      	bne.n	6898 <__eqsf2+0x28>
    6894:	42b5      	cmp	r5, r6
    6896:	d006      	beq.n	68a6 <__eqsf2+0x36>
    6898:	bd70      	pop	{r4, r5, r6, pc}
    689a:	2d00      	cmp	r5, #0
    689c:	d1fc      	bne.n	6898 <__eqsf2+0x28>
    689e:	2cff      	cmp	r4, #255	; 0xff
    68a0:	d1fa      	bne.n	6898 <__eqsf2+0x28>
    68a2:	2e00      	cmp	r6, #0
    68a4:	d1f8      	bne.n	6898 <__eqsf2+0x28>
    68a6:	428b      	cmp	r3, r1
    68a8:	d006      	beq.n	68b8 <__eqsf2+0x48>
    68aa:	2001      	movs	r0, #1
    68ac:	2a00      	cmp	r2, #0
    68ae:	d1f3      	bne.n	6898 <__eqsf2+0x28>
    68b0:	0028      	movs	r0, r5
    68b2:	1e45      	subs	r5, r0, #1
    68b4:	41a8      	sbcs	r0, r5
    68b6:	e7ef      	b.n	6898 <__eqsf2+0x28>
    68b8:	2000      	movs	r0, #0
    68ba:	e7ed      	b.n	6898 <__eqsf2+0x28>

000068bc <__gesf2>:
    68bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    68be:	0042      	lsls	r2, r0, #1
    68c0:	0245      	lsls	r5, r0, #9
    68c2:	024c      	lsls	r4, r1, #9
    68c4:	0fc3      	lsrs	r3, r0, #31
    68c6:	0048      	lsls	r0, r1, #1
    68c8:	0a6d      	lsrs	r5, r5, #9
    68ca:	0e12      	lsrs	r2, r2, #24
    68cc:	0a64      	lsrs	r4, r4, #9
    68ce:	0e00      	lsrs	r0, r0, #24
    68d0:	0fc9      	lsrs	r1, r1, #31
    68d2:	2aff      	cmp	r2, #255	; 0xff
    68d4:	d01e      	beq.n	6914 <__gesf2+0x58>
    68d6:	28ff      	cmp	r0, #255	; 0xff
    68d8:	d021      	beq.n	691e <__gesf2+0x62>
    68da:	2a00      	cmp	r2, #0
    68dc:	d10a      	bne.n	68f4 <__gesf2+0x38>
    68de:	426e      	negs	r6, r5
    68e0:	416e      	adcs	r6, r5
    68e2:	b2f6      	uxtb	r6, r6
    68e4:	2800      	cmp	r0, #0
    68e6:	d10f      	bne.n	6908 <__gesf2+0x4c>
    68e8:	2c00      	cmp	r4, #0
    68ea:	d10d      	bne.n	6908 <__gesf2+0x4c>
    68ec:	2000      	movs	r0, #0
    68ee:	2d00      	cmp	r5, #0
    68f0:	d009      	beq.n	6906 <__gesf2+0x4a>
    68f2:	e005      	b.n	6900 <__gesf2+0x44>
    68f4:	2800      	cmp	r0, #0
    68f6:	d101      	bne.n	68fc <__gesf2+0x40>
    68f8:	2c00      	cmp	r4, #0
    68fa:	d001      	beq.n	6900 <__gesf2+0x44>
    68fc:	428b      	cmp	r3, r1
    68fe:	d011      	beq.n	6924 <__gesf2+0x68>
    6900:	2101      	movs	r1, #1
    6902:	4258      	negs	r0, r3
    6904:	4308      	orrs	r0, r1
    6906:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6908:	2e00      	cmp	r6, #0
    690a:	d0f7      	beq.n	68fc <__gesf2+0x40>
    690c:	2001      	movs	r0, #1
    690e:	3901      	subs	r1, #1
    6910:	4308      	orrs	r0, r1
    6912:	e7f8      	b.n	6906 <__gesf2+0x4a>
    6914:	2d00      	cmp	r5, #0
    6916:	d0de      	beq.n	68d6 <__gesf2+0x1a>
    6918:	2002      	movs	r0, #2
    691a:	4240      	negs	r0, r0
    691c:	e7f3      	b.n	6906 <__gesf2+0x4a>
    691e:	2c00      	cmp	r4, #0
    6920:	d0db      	beq.n	68da <__gesf2+0x1e>
    6922:	e7f9      	b.n	6918 <__gesf2+0x5c>
    6924:	4282      	cmp	r2, r0
    6926:	dceb      	bgt.n	6900 <__gesf2+0x44>
    6928:	db04      	blt.n	6934 <__gesf2+0x78>
    692a:	42a5      	cmp	r5, r4
    692c:	d8e8      	bhi.n	6900 <__gesf2+0x44>
    692e:	2000      	movs	r0, #0
    6930:	42a5      	cmp	r5, r4
    6932:	d2e8      	bcs.n	6906 <__gesf2+0x4a>
    6934:	2101      	movs	r1, #1
    6936:	1e58      	subs	r0, r3, #1
    6938:	4308      	orrs	r0, r1
    693a:	e7e4      	b.n	6906 <__gesf2+0x4a>

0000693c <__lesf2>:
    693c:	b5f0      	push	{r4, r5, r6, r7, lr}
    693e:	0042      	lsls	r2, r0, #1
    6940:	024d      	lsls	r5, r1, #9
    6942:	004c      	lsls	r4, r1, #1
    6944:	0246      	lsls	r6, r0, #9
    6946:	0a76      	lsrs	r6, r6, #9
    6948:	0e12      	lsrs	r2, r2, #24
    694a:	0fc3      	lsrs	r3, r0, #31
    694c:	0a6d      	lsrs	r5, r5, #9
    694e:	0e24      	lsrs	r4, r4, #24
    6950:	0fc9      	lsrs	r1, r1, #31
    6952:	2aff      	cmp	r2, #255	; 0xff
    6954:	d016      	beq.n	6984 <__lesf2+0x48>
    6956:	2cff      	cmp	r4, #255	; 0xff
    6958:	d018      	beq.n	698c <__lesf2+0x50>
    695a:	2a00      	cmp	r2, #0
    695c:	d10a      	bne.n	6974 <__lesf2+0x38>
    695e:	4270      	negs	r0, r6
    6960:	4170      	adcs	r0, r6
    6962:	b2c0      	uxtb	r0, r0
    6964:	2c00      	cmp	r4, #0
    6966:	d015      	beq.n	6994 <__lesf2+0x58>
    6968:	2800      	cmp	r0, #0
    696a:	d005      	beq.n	6978 <__lesf2+0x3c>
    696c:	2001      	movs	r0, #1
    696e:	3901      	subs	r1, #1
    6970:	4308      	orrs	r0, r1
    6972:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6974:	2c00      	cmp	r4, #0
    6976:	d013      	beq.n	69a0 <__lesf2+0x64>
    6978:	4299      	cmp	r1, r3
    697a:	d014      	beq.n	69a6 <__lesf2+0x6a>
    697c:	2001      	movs	r0, #1
    697e:	425b      	negs	r3, r3
    6980:	4318      	orrs	r0, r3
    6982:	e7f6      	b.n	6972 <__lesf2+0x36>
    6984:	2002      	movs	r0, #2
    6986:	2e00      	cmp	r6, #0
    6988:	d1f3      	bne.n	6972 <__lesf2+0x36>
    698a:	e7e4      	b.n	6956 <__lesf2+0x1a>
    698c:	2002      	movs	r0, #2
    698e:	2d00      	cmp	r5, #0
    6990:	d1ef      	bne.n	6972 <__lesf2+0x36>
    6992:	e7e2      	b.n	695a <__lesf2+0x1e>
    6994:	2d00      	cmp	r5, #0
    6996:	d1e7      	bne.n	6968 <__lesf2+0x2c>
    6998:	2000      	movs	r0, #0
    699a:	2e00      	cmp	r6, #0
    699c:	d0e9      	beq.n	6972 <__lesf2+0x36>
    699e:	e7ed      	b.n	697c <__lesf2+0x40>
    69a0:	2d00      	cmp	r5, #0
    69a2:	d1e9      	bne.n	6978 <__lesf2+0x3c>
    69a4:	e7ea      	b.n	697c <__lesf2+0x40>
    69a6:	42a2      	cmp	r2, r4
    69a8:	dc06      	bgt.n	69b8 <__lesf2+0x7c>
    69aa:	dbdf      	blt.n	696c <__lesf2+0x30>
    69ac:	42ae      	cmp	r6, r5
    69ae:	d803      	bhi.n	69b8 <__lesf2+0x7c>
    69b0:	2000      	movs	r0, #0
    69b2:	42ae      	cmp	r6, r5
    69b4:	d3da      	bcc.n	696c <__lesf2+0x30>
    69b6:	e7dc      	b.n	6972 <__lesf2+0x36>
    69b8:	2001      	movs	r0, #1
    69ba:	4249      	negs	r1, r1
    69bc:	4308      	orrs	r0, r1
    69be:	e7d8      	b.n	6972 <__lesf2+0x36>

000069c0 <__aeabi_fmul>:
    69c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69c2:	4657      	mov	r7, sl
    69c4:	464e      	mov	r6, r9
    69c6:	4645      	mov	r5, r8
    69c8:	46de      	mov	lr, fp
    69ca:	b5e0      	push	{r5, r6, r7, lr}
    69cc:	0247      	lsls	r7, r0, #9
    69ce:	0046      	lsls	r6, r0, #1
    69d0:	4688      	mov	r8, r1
    69d2:	0a7f      	lsrs	r7, r7, #9
    69d4:	0e36      	lsrs	r6, r6, #24
    69d6:	0fc4      	lsrs	r4, r0, #31
    69d8:	2e00      	cmp	r6, #0
    69da:	d047      	beq.n	6a6c <__aeabi_fmul+0xac>
    69dc:	2eff      	cmp	r6, #255	; 0xff
    69de:	d024      	beq.n	6a2a <__aeabi_fmul+0x6a>
    69e0:	00fb      	lsls	r3, r7, #3
    69e2:	2780      	movs	r7, #128	; 0x80
    69e4:	04ff      	lsls	r7, r7, #19
    69e6:	431f      	orrs	r7, r3
    69e8:	2300      	movs	r3, #0
    69ea:	4699      	mov	r9, r3
    69ec:	469a      	mov	sl, r3
    69ee:	3e7f      	subs	r6, #127	; 0x7f
    69f0:	4643      	mov	r3, r8
    69f2:	025d      	lsls	r5, r3, #9
    69f4:	0058      	lsls	r0, r3, #1
    69f6:	0fdb      	lsrs	r3, r3, #31
    69f8:	0a6d      	lsrs	r5, r5, #9
    69fa:	0e00      	lsrs	r0, r0, #24
    69fc:	4698      	mov	r8, r3
    69fe:	d043      	beq.n	6a88 <__aeabi_fmul+0xc8>
    6a00:	28ff      	cmp	r0, #255	; 0xff
    6a02:	d03b      	beq.n	6a7c <__aeabi_fmul+0xbc>
    6a04:	00eb      	lsls	r3, r5, #3
    6a06:	2580      	movs	r5, #128	; 0x80
    6a08:	2200      	movs	r2, #0
    6a0a:	04ed      	lsls	r5, r5, #19
    6a0c:	431d      	orrs	r5, r3
    6a0e:	387f      	subs	r0, #127	; 0x7f
    6a10:	1836      	adds	r6, r6, r0
    6a12:	1c73      	adds	r3, r6, #1
    6a14:	4641      	mov	r1, r8
    6a16:	469b      	mov	fp, r3
    6a18:	464b      	mov	r3, r9
    6a1a:	4061      	eors	r1, r4
    6a1c:	4313      	orrs	r3, r2
    6a1e:	2b0f      	cmp	r3, #15
    6a20:	d864      	bhi.n	6aec <__aeabi_fmul+0x12c>
    6a22:	4875      	ldr	r0, [pc, #468]	; (6bf8 <__aeabi_fmul+0x238>)
    6a24:	009b      	lsls	r3, r3, #2
    6a26:	58c3      	ldr	r3, [r0, r3]
    6a28:	469f      	mov	pc, r3
    6a2a:	2f00      	cmp	r7, #0
    6a2c:	d142      	bne.n	6ab4 <__aeabi_fmul+0xf4>
    6a2e:	2308      	movs	r3, #8
    6a30:	4699      	mov	r9, r3
    6a32:	3b06      	subs	r3, #6
    6a34:	26ff      	movs	r6, #255	; 0xff
    6a36:	469a      	mov	sl, r3
    6a38:	e7da      	b.n	69f0 <__aeabi_fmul+0x30>
    6a3a:	4641      	mov	r1, r8
    6a3c:	2a02      	cmp	r2, #2
    6a3e:	d028      	beq.n	6a92 <__aeabi_fmul+0xd2>
    6a40:	2a03      	cmp	r2, #3
    6a42:	d100      	bne.n	6a46 <__aeabi_fmul+0x86>
    6a44:	e0ce      	b.n	6be4 <__aeabi_fmul+0x224>
    6a46:	2a01      	cmp	r2, #1
    6a48:	d000      	beq.n	6a4c <__aeabi_fmul+0x8c>
    6a4a:	e0ac      	b.n	6ba6 <__aeabi_fmul+0x1e6>
    6a4c:	4011      	ands	r1, r2
    6a4e:	2000      	movs	r0, #0
    6a50:	2200      	movs	r2, #0
    6a52:	b2cc      	uxtb	r4, r1
    6a54:	0240      	lsls	r0, r0, #9
    6a56:	05d2      	lsls	r2, r2, #23
    6a58:	0a40      	lsrs	r0, r0, #9
    6a5a:	07e4      	lsls	r4, r4, #31
    6a5c:	4310      	orrs	r0, r2
    6a5e:	4320      	orrs	r0, r4
    6a60:	bc3c      	pop	{r2, r3, r4, r5}
    6a62:	4690      	mov	r8, r2
    6a64:	4699      	mov	r9, r3
    6a66:	46a2      	mov	sl, r4
    6a68:	46ab      	mov	fp, r5
    6a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a6c:	2f00      	cmp	r7, #0
    6a6e:	d115      	bne.n	6a9c <__aeabi_fmul+0xdc>
    6a70:	2304      	movs	r3, #4
    6a72:	4699      	mov	r9, r3
    6a74:	3b03      	subs	r3, #3
    6a76:	2600      	movs	r6, #0
    6a78:	469a      	mov	sl, r3
    6a7a:	e7b9      	b.n	69f0 <__aeabi_fmul+0x30>
    6a7c:	20ff      	movs	r0, #255	; 0xff
    6a7e:	2202      	movs	r2, #2
    6a80:	2d00      	cmp	r5, #0
    6a82:	d0c5      	beq.n	6a10 <__aeabi_fmul+0x50>
    6a84:	2203      	movs	r2, #3
    6a86:	e7c3      	b.n	6a10 <__aeabi_fmul+0x50>
    6a88:	2d00      	cmp	r5, #0
    6a8a:	d119      	bne.n	6ac0 <__aeabi_fmul+0x100>
    6a8c:	2000      	movs	r0, #0
    6a8e:	2201      	movs	r2, #1
    6a90:	e7be      	b.n	6a10 <__aeabi_fmul+0x50>
    6a92:	2401      	movs	r4, #1
    6a94:	22ff      	movs	r2, #255	; 0xff
    6a96:	400c      	ands	r4, r1
    6a98:	2000      	movs	r0, #0
    6a9a:	e7db      	b.n	6a54 <__aeabi_fmul+0x94>
    6a9c:	0038      	movs	r0, r7
    6a9e:	f002 f985 	bl	8dac <__clzsi2>
    6aa2:	2676      	movs	r6, #118	; 0x76
    6aa4:	1f43      	subs	r3, r0, #5
    6aa6:	409f      	lsls	r7, r3
    6aa8:	2300      	movs	r3, #0
    6aaa:	4276      	negs	r6, r6
    6aac:	1a36      	subs	r6, r6, r0
    6aae:	4699      	mov	r9, r3
    6ab0:	469a      	mov	sl, r3
    6ab2:	e79d      	b.n	69f0 <__aeabi_fmul+0x30>
    6ab4:	230c      	movs	r3, #12
    6ab6:	4699      	mov	r9, r3
    6ab8:	3b09      	subs	r3, #9
    6aba:	26ff      	movs	r6, #255	; 0xff
    6abc:	469a      	mov	sl, r3
    6abe:	e797      	b.n	69f0 <__aeabi_fmul+0x30>
    6ac0:	0028      	movs	r0, r5
    6ac2:	f002 f973 	bl	8dac <__clzsi2>
    6ac6:	1f43      	subs	r3, r0, #5
    6ac8:	409d      	lsls	r5, r3
    6aca:	2376      	movs	r3, #118	; 0x76
    6acc:	425b      	negs	r3, r3
    6ace:	1a18      	subs	r0, r3, r0
    6ad0:	2200      	movs	r2, #0
    6ad2:	e79d      	b.n	6a10 <__aeabi_fmul+0x50>
    6ad4:	2080      	movs	r0, #128	; 0x80
    6ad6:	2400      	movs	r4, #0
    6ad8:	03c0      	lsls	r0, r0, #15
    6ada:	22ff      	movs	r2, #255	; 0xff
    6adc:	e7ba      	b.n	6a54 <__aeabi_fmul+0x94>
    6ade:	003d      	movs	r5, r7
    6ae0:	4652      	mov	r2, sl
    6ae2:	e7ab      	b.n	6a3c <__aeabi_fmul+0x7c>
    6ae4:	003d      	movs	r5, r7
    6ae6:	0021      	movs	r1, r4
    6ae8:	4652      	mov	r2, sl
    6aea:	e7a7      	b.n	6a3c <__aeabi_fmul+0x7c>
    6aec:	0c3b      	lsrs	r3, r7, #16
    6aee:	469c      	mov	ip, r3
    6af0:	042a      	lsls	r2, r5, #16
    6af2:	0c12      	lsrs	r2, r2, #16
    6af4:	0c2b      	lsrs	r3, r5, #16
    6af6:	0014      	movs	r4, r2
    6af8:	4660      	mov	r0, ip
    6afa:	4665      	mov	r5, ip
    6afc:	043f      	lsls	r7, r7, #16
    6afe:	0c3f      	lsrs	r7, r7, #16
    6b00:	437c      	muls	r4, r7
    6b02:	4342      	muls	r2, r0
    6b04:	435d      	muls	r5, r3
    6b06:	437b      	muls	r3, r7
    6b08:	0c27      	lsrs	r7, r4, #16
    6b0a:	189b      	adds	r3, r3, r2
    6b0c:	18ff      	adds	r7, r7, r3
    6b0e:	42ba      	cmp	r2, r7
    6b10:	d903      	bls.n	6b1a <__aeabi_fmul+0x15a>
    6b12:	2380      	movs	r3, #128	; 0x80
    6b14:	025b      	lsls	r3, r3, #9
    6b16:	469c      	mov	ip, r3
    6b18:	4465      	add	r5, ip
    6b1a:	0424      	lsls	r4, r4, #16
    6b1c:	043a      	lsls	r2, r7, #16
    6b1e:	0c24      	lsrs	r4, r4, #16
    6b20:	1912      	adds	r2, r2, r4
    6b22:	0193      	lsls	r3, r2, #6
    6b24:	1e5c      	subs	r4, r3, #1
    6b26:	41a3      	sbcs	r3, r4
    6b28:	0c3f      	lsrs	r7, r7, #16
    6b2a:	0e92      	lsrs	r2, r2, #26
    6b2c:	197d      	adds	r5, r7, r5
    6b2e:	431a      	orrs	r2, r3
    6b30:	01ad      	lsls	r5, r5, #6
    6b32:	4315      	orrs	r5, r2
    6b34:	012b      	lsls	r3, r5, #4
    6b36:	d504      	bpl.n	6b42 <__aeabi_fmul+0x182>
    6b38:	2301      	movs	r3, #1
    6b3a:	465e      	mov	r6, fp
    6b3c:	086a      	lsrs	r2, r5, #1
    6b3e:	401d      	ands	r5, r3
    6b40:	4315      	orrs	r5, r2
    6b42:	0032      	movs	r2, r6
    6b44:	327f      	adds	r2, #127	; 0x7f
    6b46:	2a00      	cmp	r2, #0
    6b48:	dd25      	ble.n	6b96 <__aeabi_fmul+0x1d6>
    6b4a:	076b      	lsls	r3, r5, #29
    6b4c:	d004      	beq.n	6b58 <__aeabi_fmul+0x198>
    6b4e:	230f      	movs	r3, #15
    6b50:	402b      	ands	r3, r5
    6b52:	2b04      	cmp	r3, #4
    6b54:	d000      	beq.n	6b58 <__aeabi_fmul+0x198>
    6b56:	3504      	adds	r5, #4
    6b58:	012b      	lsls	r3, r5, #4
    6b5a:	d503      	bpl.n	6b64 <__aeabi_fmul+0x1a4>
    6b5c:	0032      	movs	r2, r6
    6b5e:	4b27      	ldr	r3, [pc, #156]	; (6bfc <__aeabi_fmul+0x23c>)
    6b60:	3280      	adds	r2, #128	; 0x80
    6b62:	401d      	ands	r5, r3
    6b64:	2afe      	cmp	r2, #254	; 0xfe
    6b66:	dc94      	bgt.n	6a92 <__aeabi_fmul+0xd2>
    6b68:	2401      	movs	r4, #1
    6b6a:	01a8      	lsls	r0, r5, #6
    6b6c:	0a40      	lsrs	r0, r0, #9
    6b6e:	b2d2      	uxtb	r2, r2
    6b70:	400c      	ands	r4, r1
    6b72:	e76f      	b.n	6a54 <__aeabi_fmul+0x94>
    6b74:	2080      	movs	r0, #128	; 0x80
    6b76:	03c0      	lsls	r0, r0, #15
    6b78:	4207      	tst	r7, r0
    6b7a:	d007      	beq.n	6b8c <__aeabi_fmul+0x1cc>
    6b7c:	4205      	tst	r5, r0
    6b7e:	d105      	bne.n	6b8c <__aeabi_fmul+0x1cc>
    6b80:	4328      	orrs	r0, r5
    6b82:	0240      	lsls	r0, r0, #9
    6b84:	0a40      	lsrs	r0, r0, #9
    6b86:	4644      	mov	r4, r8
    6b88:	22ff      	movs	r2, #255	; 0xff
    6b8a:	e763      	b.n	6a54 <__aeabi_fmul+0x94>
    6b8c:	4338      	orrs	r0, r7
    6b8e:	0240      	lsls	r0, r0, #9
    6b90:	0a40      	lsrs	r0, r0, #9
    6b92:	22ff      	movs	r2, #255	; 0xff
    6b94:	e75e      	b.n	6a54 <__aeabi_fmul+0x94>
    6b96:	2401      	movs	r4, #1
    6b98:	1aa3      	subs	r3, r4, r2
    6b9a:	2b1b      	cmp	r3, #27
    6b9c:	dd05      	ble.n	6baa <__aeabi_fmul+0x1ea>
    6b9e:	400c      	ands	r4, r1
    6ba0:	2200      	movs	r2, #0
    6ba2:	2000      	movs	r0, #0
    6ba4:	e756      	b.n	6a54 <__aeabi_fmul+0x94>
    6ba6:	465e      	mov	r6, fp
    6ba8:	e7cb      	b.n	6b42 <__aeabi_fmul+0x182>
    6baa:	002a      	movs	r2, r5
    6bac:	2020      	movs	r0, #32
    6bae:	40da      	lsrs	r2, r3
    6bb0:	1ac3      	subs	r3, r0, r3
    6bb2:	409d      	lsls	r5, r3
    6bb4:	002b      	movs	r3, r5
    6bb6:	1e5d      	subs	r5, r3, #1
    6bb8:	41ab      	sbcs	r3, r5
    6bba:	4313      	orrs	r3, r2
    6bbc:	075a      	lsls	r2, r3, #29
    6bbe:	d004      	beq.n	6bca <__aeabi_fmul+0x20a>
    6bc0:	220f      	movs	r2, #15
    6bc2:	401a      	ands	r2, r3
    6bc4:	2a04      	cmp	r2, #4
    6bc6:	d000      	beq.n	6bca <__aeabi_fmul+0x20a>
    6bc8:	3304      	adds	r3, #4
    6bca:	015a      	lsls	r2, r3, #5
    6bcc:	d504      	bpl.n	6bd8 <__aeabi_fmul+0x218>
    6bce:	2401      	movs	r4, #1
    6bd0:	2201      	movs	r2, #1
    6bd2:	400c      	ands	r4, r1
    6bd4:	2000      	movs	r0, #0
    6bd6:	e73d      	b.n	6a54 <__aeabi_fmul+0x94>
    6bd8:	2401      	movs	r4, #1
    6bda:	019b      	lsls	r3, r3, #6
    6bdc:	0a58      	lsrs	r0, r3, #9
    6bde:	400c      	ands	r4, r1
    6be0:	2200      	movs	r2, #0
    6be2:	e737      	b.n	6a54 <__aeabi_fmul+0x94>
    6be4:	2080      	movs	r0, #128	; 0x80
    6be6:	2401      	movs	r4, #1
    6be8:	03c0      	lsls	r0, r0, #15
    6bea:	4328      	orrs	r0, r5
    6bec:	0240      	lsls	r0, r0, #9
    6bee:	0a40      	lsrs	r0, r0, #9
    6bf0:	400c      	ands	r4, r1
    6bf2:	22ff      	movs	r2, #255	; 0xff
    6bf4:	e72e      	b.n	6a54 <__aeabi_fmul+0x94>
    6bf6:	46c0      	nop			; (mov r8, r8)
    6bf8:	00009208 	.word	0x00009208
    6bfc:	f7ffffff 	.word	0xf7ffffff

00006c00 <__aeabi_fsub>:
    6c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c02:	464f      	mov	r7, r9
    6c04:	46d6      	mov	lr, sl
    6c06:	4646      	mov	r6, r8
    6c08:	0044      	lsls	r4, r0, #1
    6c0a:	b5c0      	push	{r6, r7, lr}
    6c0c:	0fc2      	lsrs	r2, r0, #31
    6c0e:	0247      	lsls	r7, r0, #9
    6c10:	0248      	lsls	r0, r1, #9
    6c12:	0a40      	lsrs	r0, r0, #9
    6c14:	4684      	mov	ip, r0
    6c16:	4666      	mov	r6, ip
    6c18:	0a7b      	lsrs	r3, r7, #9
    6c1a:	0048      	lsls	r0, r1, #1
    6c1c:	0fc9      	lsrs	r1, r1, #31
    6c1e:	469a      	mov	sl, r3
    6c20:	0e24      	lsrs	r4, r4, #24
    6c22:	0015      	movs	r5, r2
    6c24:	00db      	lsls	r3, r3, #3
    6c26:	0e00      	lsrs	r0, r0, #24
    6c28:	4689      	mov	r9, r1
    6c2a:	00f6      	lsls	r6, r6, #3
    6c2c:	28ff      	cmp	r0, #255	; 0xff
    6c2e:	d100      	bne.n	6c32 <__aeabi_fsub+0x32>
    6c30:	e08f      	b.n	6d52 <__aeabi_fsub+0x152>
    6c32:	2101      	movs	r1, #1
    6c34:	464f      	mov	r7, r9
    6c36:	404f      	eors	r7, r1
    6c38:	0039      	movs	r1, r7
    6c3a:	4291      	cmp	r1, r2
    6c3c:	d066      	beq.n	6d0c <__aeabi_fsub+0x10c>
    6c3e:	1a22      	subs	r2, r4, r0
    6c40:	2a00      	cmp	r2, #0
    6c42:	dc00      	bgt.n	6c46 <__aeabi_fsub+0x46>
    6c44:	e09d      	b.n	6d82 <__aeabi_fsub+0x182>
    6c46:	2800      	cmp	r0, #0
    6c48:	d13d      	bne.n	6cc6 <__aeabi_fsub+0xc6>
    6c4a:	2e00      	cmp	r6, #0
    6c4c:	d100      	bne.n	6c50 <__aeabi_fsub+0x50>
    6c4e:	e08b      	b.n	6d68 <__aeabi_fsub+0x168>
    6c50:	1e51      	subs	r1, r2, #1
    6c52:	2900      	cmp	r1, #0
    6c54:	d000      	beq.n	6c58 <__aeabi_fsub+0x58>
    6c56:	e0b5      	b.n	6dc4 <__aeabi_fsub+0x1c4>
    6c58:	2401      	movs	r4, #1
    6c5a:	1b9b      	subs	r3, r3, r6
    6c5c:	015a      	lsls	r2, r3, #5
    6c5e:	d544      	bpl.n	6cea <__aeabi_fsub+0xea>
    6c60:	019b      	lsls	r3, r3, #6
    6c62:	099f      	lsrs	r7, r3, #6
    6c64:	0038      	movs	r0, r7
    6c66:	f002 f8a1 	bl	8dac <__clzsi2>
    6c6a:	3805      	subs	r0, #5
    6c6c:	4087      	lsls	r7, r0
    6c6e:	4284      	cmp	r4, r0
    6c70:	dd00      	ble.n	6c74 <__aeabi_fsub+0x74>
    6c72:	e096      	b.n	6da2 <__aeabi_fsub+0x1a2>
    6c74:	1b04      	subs	r4, r0, r4
    6c76:	003a      	movs	r2, r7
    6c78:	2020      	movs	r0, #32
    6c7a:	3401      	adds	r4, #1
    6c7c:	40e2      	lsrs	r2, r4
    6c7e:	1b04      	subs	r4, r0, r4
    6c80:	40a7      	lsls	r7, r4
    6c82:	003b      	movs	r3, r7
    6c84:	1e5f      	subs	r7, r3, #1
    6c86:	41bb      	sbcs	r3, r7
    6c88:	2400      	movs	r4, #0
    6c8a:	4313      	orrs	r3, r2
    6c8c:	075a      	lsls	r2, r3, #29
    6c8e:	d004      	beq.n	6c9a <__aeabi_fsub+0x9a>
    6c90:	220f      	movs	r2, #15
    6c92:	401a      	ands	r2, r3
    6c94:	2a04      	cmp	r2, #4
    6c96:	d000      	beq.n	6c9a <__aeabi_fsub+0x9a>
    6c98:	3304      	adds	r3, #4
    6c9a:	015a      	lsls	r2, r3, #5
    6c9c:	d527      	bpl.n	6cee <__aeabi_fsub+0xee>
    6c9e:	3401      	adds	r4, #1
    6ca0:	2cff      	cmp	r4, #255	; 0xff
    6ca2:	d100      	bne.n	6ca6 <__aeabi_fsub+0xa6>
    6ca4:	e079      	b.n	6d9a <__aeabi_fsub+0x19a>
    6ca6:	2201      	movs	r2, #1
    6ca8:	019b      	lsls	r3, r3, #6
    6caa:	0a5b      	lsrs	r3, r3, #9
    6cac:	b2e4      	uxtb	r4, r4
    6cae:	402a      	ands	r2, r5
    6cb0:	025b      	lsls	r3, r3, #9
    6cb2:	05e4      	lsls	r4, r4, #23
    6cb4:	0a58      	lsrs	r0, r3, #9
    6cb6:	07d2      	lsls	r2, r2, #31
    6cb8:	4320      	orrs	r0, r4
    6cba:	4310      	orrs	r0, r2
    6cbc:	bc1c      	pop	{r2, r3, r4}
    6cbe:	4690      	mov	r8, r2
    6cc0:	4699      	mov	r9, r3
    6cc2:	46a2      	mov	sl, r4
    6cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6cc6:	2cff      	cmp	r4, #255	; 0xff
    6cc8:	d0e0      	beq.n	6c8c <__aeabi_fsub+0x8c>
    6cca:	2180      	movs	r1, #128	; 0x80
    6ccc:	04c9      	lsls	r1, r1, #19
    6cce:	430e      	orrs	r6, r1
    6cd0:	2a1b      	cmp	r2, #27
    6cd2:	dc7b      	bgt.n	6dcc <__aeabi_fsub+0x1cc>
    6cd4:	0031      	movs	r1, r6
    6cd6:	2020      	movs	r0, #32
    6cd8:	40d1      	lsrs	r1, r2
    6cda:	1a82      	subs	r2, r0, r2
    6cdc:	4096      	lsls	r6, r2
    6cde:	1e72      	subs	r2, r6, #1
    6ce0:	4196      	sbcs	r6, r2
    6ce2:	430e      	orrs	r6, r1
    6ce4:	1b9b      	subs	r3, r3, r6
    6ce6:	015a      	lsls	r2, r3, #5
    6ce8:	d4ba      	bmi.n	6c60 <__aeabi_fsub+0x60>
    6cea:	075a      	lsls	r2, r3, #29
    6cec:	d1d0      	bne.n	6c90 <__aeabi_fsub+0x90>
    6cee:	2201      	movs	r2, #1
    6cf0:	08df      	lsrs	r7, r3, #3
    6cf2:	402a      	ands	r2, r5
    6cf4:	2cff      	cmp	r4, #255	; 0xff
    6cf6:	d133      	bne.n	6d60 <__aeabi_fsub+0x160>
    6cf8:	2f00      	cmp	r7, #0
    6cfa:	d100      	bne.n	6cfe <__aeabi_fsub+0xfe>
    6cfc:	e0a8      	b.n	6e50 <__aeabi_fsub+0x250>
    6cfe:	2380      	movs	r3, #128	; 0x80
    6d00:	03db      	lsls	r3, r3, #15
    6d02:	433b      	orrs	r3, r7
    6d04:	025b      	lsls	r3, r3, #9
    6d06:	0a5b      	lsrs	r3, r3, #9
    6d08:	24ff      	movs	r4, #255	; 0xff
    6d0a:	e7d1      	b.n	6cb0 <__aeabi_fsub+0xb0>
    6d0c:	1a21      	subs	r1, r4, r0
    6d0e:	2900      	cmp	r1, #0
    6d10:	dd4c      	ble.n	6dac <__aeabi_fsub+0x1ac>
    6d12:	2800      	cmp	r0, #0
    6d14:	d02a      	beq.n	6d6c <__aeabi_fsub+0x16c>
    6d16:	2cff      	cmp	r4, #255	; 0xff
    6d18:	d0b8      	beq.n	6c8c <__aeabi_fsub+0x8c>
    6d1a:	2080      	movs	r0, #128	; 0x80
    6d1c:	04c0      	lsls	r0, r0, #19
    6d1e:	4306      	orrs	r6, r0
    6d20:	291b      	cmp	r1, #27
    6d22:	dd00      	ble.n	6d26 <__aeabi_fsub+0x126>
    6d24:	e0af      	b.n	6e86 <__aeabi_fsub+0x286>
    6d26:	0030      	movs	r0, r6
    6d28:	2720      	movs	r7, #32
    6d2a:	40c8      	lsrs	r0, r1
    6d2c:	1a79      	subs	r1, r7, r1
    6d2e:	408e      	lsls	r6, r1
    6d30:	1e71      	subs	r1, r6, #1
    6d32:	418e      	sbcs	r6, r1
    6d34:	4306      	orrs	r6, r0
    6d36:	199b      	adds	r3, r3, r6
    6d38:	0159      	lsls	r1, r3, #5
    6d3a:	d5d6      	bpl.n	6cea <__aeabi_fsub+0xea>
    6d3c:	3401      	adds	r4, #1
    6d3e:	2cff      	cmp	r4, #255	; 0xff
    6d40:	d100      	bne.n	6d44 <__aeabi_fsub+0x144>
    6d42:	e085      	b.n	6e50 <__aeabi_fsub+0x250>
    6d44:	2201      	movs	r2, #1
    6d46:	497a      	ldr	r1, [pc, #488]	; (6f30 <__aeabi_fsub+0x330>)
    6d48:	401a      	ands	r2, r3
    6d4a:	085b      	lsrs	r3, r3, #1
    6d4c:	400b      	ands	r3, r1
    6d4e:	4313      	orrs	r3, r2
    6d50:	e79c      	b.n	6c8c <__aeabi_fsub+0x8c>
    6d52:	2e00      	cmp	r6, #0
    6d54:	d000      	beq.n	6d58 <__aeabi_fsub+0x158>
    6d56:	e770      	b.n	6c3a <__aeabi_fsub+0x3a>
    6d58:	e76b      	b.n	6c32 <__aeabi_fsub+0x32>
    6d5a:	1e3b      	subs	r3, r7, #0
    6d5c:	d1c5      	bne.n	6cea <__aeabi_fsub+0xea>
    6d5e:	2200      	movs	r2, #0
    6d60:	027b      	lsls	r3, r7, #9
    6d62:	0a5b      	lsrs	r3, r3, #9
    6d64:	b2e4      	uxtb	r4, r4
    6d66:	e7a3      	b.n	6cb0 <__aeabi_fsub+0xb0>
    6d68:	0014      	movs	r4, r2
    6d6a:	e78f      	b.n	6c8c <__aeabi_fsub+0x8c>
    6d6c:	2e00      	cmp	r6, #0
    6d6e:	d04d      	beq.n	6e0c <__aeabi_fsub+0x20c>
    6d70:	1e48      	subs	r0, r1, #1
    6d72:	2800      	cmp	r0, #0
    6d74:	d157      	bne.n	6e26 <__aeabi_fsub+0x226>
    6d76:	199b      	adds	r3, r3, r6
    6d78:	2401      	movs	r4, #1
    6d7a:	015a      	lsls	r2, r3, #5
    6d7c:	d5b5      	bpl.n	6cea <__aeabi_fsub+0xea>
    6d7e:	2402      	movs	r4, #2
    6d80:	e7e0      	b.n	6d44 <__aeabi_fsub+0x144>
    6d82:	2a00      	cmp	r2, #0
    6d84:	d125      	bne.n	6dd2 <__aeabi_fsub+0x1d2>
    6d86:	1c62      	adds	r2, r4, #1
    6d88:	b2d2      	uxtb	r2, r2
    6d8a:	2a01      	cmp	r2, #1
    6d8c:	dd72      	ble.n	6e74 <__aeabi_fsub+0x274>
    6d8e:	1b9f      	subs	r7, r3, r6
    6d90:	017a      	lsls	r2, r7, #5
    6d92:	d535      	bpl.n	6e00 <__aeabi_fsub+0x200>
    6d94:	1af7      	subs	r7, r6, r3
    6d96:	000d      	movs	r5, r1
    6d98:	e764      	b.n	6c64 <__aeabi_fsub+0x64>
    6d9a:	2201      	movs	r2, #1
    6d9c:	2300      	movs	r3, #0
    6d9e:	402a      	ands	r2, r5
    6da0:	e786      	b.n	6cb0 <__aeabi_fsub+0xb0>
    6da2:	003b      	movs	r3, r7
    6da4:	4a63      	ldr	r2, [pc, #396]	; (6f34 <__aeabi_fsub+0x334>)
    6da6:	1a24      	subs	r4, r4, r0
    6da8:	4013      	ands	r3, r2
    6daa:	e76f      	b.n	6c8c <__aeabi_fsub+0x8c>
    6dac:	2900      	cmp	r1, #0
    6dae:	d16c      	bne.n	6e8a <__aeabi_fsub+0x28a>
    6db0:	1c61      	adds	r1, r4, #1
    6db2:	b2c8      	uxtb	r0, r1
    6db4:	2801      	cmp	r0, #1
    6db6:	dd4e      	ble.n	6e56 <__aeabi_fsub+0x256>
    6db8:	29ff      	cmp	r1, #255	; 0xff
    6dba:	d049      	beq.n	6e50 <__aeabi_fsub+0x250>
    6dbc:	199b      	adds	r3, r3, r6
    6dbe:	085b      	lsrs	r3, r3, #1
    6dc0:	000c      	movs	r4, r1
    6dc2:	e763      	b.n	6c8c <__aeabi_fsub+0x8c>
    6dc4:	2aff      	cmp	r2, #255	; 0xff
    6dc6:	d041      	beq.n	6e4c <__aeabi_fsub+0x24c>
    6dc8:	000a      	movs	r2, r1
    6dca:	e781      	b.n	6cd0 <__aeabi_fsub+0xd0>
    6dcc:	2601      	movs	r6, #1
    6dce:	1b9b      	subs	r3, r3, r6
    6dd0:	e789      	b.n	6ce6 <__aeabi_fsub+0xe6>
    6dd2:	2c00      	cmp	r4, #0
    6dd4:	d01c      	beq.n	6e10 <__aeabi_fsub+0x210>
    6dd6:	28ff      	cmp	r0, #255	; 0xff
    6dd8:	d021      	beq.n	6e1e <__aeabi_fsub+0x21e>
    6dda:	2480      	movs	r4, #128	; 0x80
    6ddc:	04e4      	lsls	r4, r4, #19
    6dde:	4252      	negs	r2, r2
    6de0:	4323      	orrs	r3, r4
    6de2:	2a1b      	cmp	r2, #27
    6de4:	dd00      	ble.n	6de8 <__aeabi_fsub+0x1e8>
    6de6:	e096      	b.n	6f16 <__aeabi_fsub+0x316>
    6de8:	001c      	movs	r4, r3
    6dea:	2520      	movs	r5, #32
    6dec:	40d4      	lsrs	r4, r2
    6dee:	1aaa      	subs	r2, r5, r2
    6df0:	4093      	lsls	r3, r2
    6df2:	1e5a      	subs	r2, r3, #1
    6df4:	4193      	sbcs	r3, r2
    6df6:	4323      	orrs	r3, r4
    6df8:	1af3      	subs	r3, r6, r3
    6dfa:	0004      	movs	r4, r0
    6dfc:	000d      	movs	r5, r1
    6dfe:	e72d      	b.n	6c5c <__aeabi_fsub+0x5c>
    6e00:	2f00      	cmp	r7, #0
    6e02:	d000      	beq.n	6e06 <__aeabi_fsub+0x206>
    6e04:	e72e      	b.n	6c64 <__aeabi_fsub+0x64>
    6e06:	2200      	movs	r2, #0
    6e08:	2400      	movs	r4, #0
    6e0a:	e7a9      	b.n	6d60 <__aeabi_fsub+0x160>
    6e0c:	000c      	movs	r4, r1
    6e0e:	e73d      	b.n	6c8c <__aeabi_fsub+0x8c>
    6e10:	2b00      	cmp	r3, #0
    6e12:	d058      	beq.n	6ec6 <__aeabi_fsub+0x2c6>
    6e14:	43d2      	mvns	r2, r2
    6e16:	2a00      	cmp	r2, #0
    6e18:	d0ee      	beq.n	6df8 <__aeabi_fsub+0x1f8>
    6e1a:	28ff      	cmp	r0, #255	; 0xff
    6e1c:	d1e1      	bne.n	6de2 <__aeabi_fsub+0x1e2>
    6e1e:	0033      	movs	r3, r6
    6e20:	24ff      	movs	r4, #255	; 0xff
    6e22:	000d      	movs	r5, r1
    6e24:	e732      	b.n	6c8c <__aeabi_fsub+0x8c>
    6e26:	29ff      	cmp	r1, #255	; 0xff
    6e28:	d010      	beq.n	6e4c <__aeabi_fsub+0x24c>
    6e2a:	0001      	movs	r1, r0
    6e2c:	e778      	b.n	6d20 <__aeabi_fsub+0x120>
    6e2e:	2b00      	cmp	r3, #0
    6e30:	d06e      	beq.n	6f10 <__aeabi_fsub+0x310>
    6e32:	24ff      	movs	r4, #255	; 0xff
    6e34:	2e00      	cmp	r6, #0
    6e36:	d100      	bne.n	6e3a <__aeabi_fsub+0x23a>
    6e38:	e728      	b.n	6c8c <__aeabi_fsub+0x8c>
    6e3a:	2280      	movs	r2, #128	; 0x80
    6e3c:	4651      	mov	r1, sl
    6e3e:	03d2      	lsls	r2, r2, #15
    6e40:	4211      	tst	r1, r2
    6e42:	d003      	beq.n	6e4c <__aeabi_fsub+0x24c>
    6e44:	4661      	mov	r1, ip
    6e46:	4211      	tst	r1, r2
    6e48:	d100      	bne.n	6e4c <__aeabi_fsub+0x24c>
    6e4a:	0033      	movs	r3, r6
    6e4c:	24ff      	movs	r4, #255	; 0xff
    6e4e:	e71d      	b.n	6c8c <__aeabi_fsub+0x8c>
    6e50:	24ff      	movs	r4, #255	; 0xff
    6e52:	2300      	movs	r3, #0
    6e54:	e72c      	b.n	6cb0 <__aeabi_fsub+0xb0>
    6e56:	2c00      	cmp	r4, #0
    6e58:	d1e9      	bne.n	6e2e <__aeabi_fsub+0x22e>
    6e5a:	2b00      	cmp	r3, #0
    6e5c:	d063      	beq.n	6f26 <__aeabi_fsub+0x326>
    6e5e:	2e00      	cmp	r6, #0
    6e60:	d100      	bne.n	6e64 <__aeabi_fsub+0x264>
    6e62:	e713      	b.n	6c8c <__aeabi_fsub+0x8c>
    6e64:	199b      	adds	r3, r3, r6
    6e66:	015a      	lsls	r2, r3, #5
    6e68:	d400      	bmi.n	6e6c <__aeabi_fsub+0x26c>
    6e6a:	e73e      	b.n	6cea <__aeabi_fsub+0xea>
    6e6c:	4a31      	ldr	r2, [pc, #196]	; (6f34 <__aeabi_fsub+0x334>)
    6e6e:	000c      	movs	r4, r1
    6e70:	4013      	ands	r3, r2
    6e72:	e70b      	b.n	6c8c <__aeabi_fsub+0x8c>
    6e74:	2c00      	cmp	r4, #0
    6e76:	d11e      	bne.n	6eb6 <__aeabi_fsub+0x2b6>
    6e78:	2b00      	cmp	r3, #0
    6e7a:	d12f      	bne.n	6edc <__aeabi_fsub+0x2dc>
    6e7c:	2e00      	cmp	r6, #0
    6e7e:	d04f      	beq.n	6f20 <__aeabi_fsub+0x320>
    6e80:	0033      	movs	r3, r6
    6e82:	000d      	movs	r5, r1
    6e84:	e702      	b.n	6c8c <__aeabi_fsub+0x8c>
    6e86:	2601      	movs	r6, #1
    6e88:	e755      	b.n	6d36 <__aeabi_fsub+0x136>
    6e8a:	2c00      	cmp	r4, #0
    6e8c:	d11f      	bne.n	6ece <__aeabi_fsub+0x2ce>
    6e8e:	2b00      	cmp	r3, #0
    6e90:	d043      	beq.n	6f1a <__aeabi_fsub+0x31a>
    6e92:	43c9      	mvns	r1, r1
    6e94:	2900      	cmp	r1, #0
    6e96:	d00b      	beq.n	6eb0 <__aeabi_fsub+0x2b0>
    6e98:	28ff      	cmp	r0, #255	; 0xff
    6e9a:	d039      	beq.n	6f10 <__aeabi_fsub+0x310>
    6e9c:	291b      	cmp	r1, #27
    6e9e:	dc44      	bgt.n	6f2a <__aeabi_fsub+0x32a>
    6ea0:	001c      	movs	r4, r3
    6ea2:	2720      	movs	r7, #32
    6ea4:	40cc      	lsrs	r4, r1
    6ea6:	1a79      	subs	r1, r7, r1
    6ea8:	408b      	lsls	r3, r1
    6eaa:	1e59      	subs	r1, r3, #1
    6eac:	418b      	sbcs	r3, r1
    6eae:	4323      	orrs	r3, r4
    6eb0:	199b      	adds	r3, r3, r6
    6eb2:	0004      	movs	r4, r0
    6eb4:	e740      	b.n	6d38 <__aeabi_fsub+0x138>
    6eb6:	2b00      	cmp	r3, #0
    6eb8:	d11a      	bne.n	6ef0 <__aeabi_fsub+0x2f0>
    6eba:	2e00      	cmp	r6, #0
    6ebc:	d124      	bne.n	6f08 <__aeabi_fsub+0x308>
    6ebe:	2780      	movs	r7, #128	; 0x80
    6ec0:	2200      	movs	r2, #0
    6ec2:	03ff      	lsls	r7, r7, #15
    6ec4:	e71b      	b.n	6cfe <__aeabi_fsub+0xfe>
    6ec6:	0033      	movs	r3, r6
    6ec8:	0004      	movs	r4, r0
    6eca:	000d      	movs	r5, r1
    6ecc:	e6de      	b.n	6c8c <__aeabi_fsub+0x8c>
    6ece:	28ff      	cmp	r0, #255	; 0xff
    6ed0:	d01e      	beq.n	6f10 <__aeabi_fsub+0x310>
    6ed2:	2480      	movs	r4, #128	; 0x80
    6ed4:	04e4      	lsls	r4, r4, #19
    6ed6:	4249      	negs	r1, r1
    6ed8:	4323      	orrs	r3, r4
    6eda:	e7df      	b.n	6e9c <__aeabi_fsub+0x29c>
    6edc:	2e00      	cmp	r6, #0
    6ede:	d100      	bne.n	6ee2 <__aeabi_fsub+0x2e2>
    6ee0:	e6d4      	b.n	6c8c <__aeabi_fsub+0x8c>
    6ee2:	1b9f      	subs	r7, r3, r6
    6ee4:	017a      	lsls	r2, r7, #5
    6ee6:	d400      	bmi.n	6eea <__aeabi_fsub+0x2ea>
    6ee8:	e737      	b.n	6d5a <__aeabi_fsub+0x15a>
    6eea:	1af3      	subs	r3, r6, r3
    6eec:	000d      	movs	r5, r1
    6eee:	e6cd      	b.n	6c8c <__aeabi_fsub+0x8c>
    6ef0:	24ff      	movs	r4, #255	; 0xff
    6ef2:	2e00      	cmp	r6, #0
    6ef4:	d100      	bne.n	6ef8 <__aeabi_fsub+0x2f8>
    6ef6:	e6c9      	b.n	6c8c <__aeabi_fsub+0x8c>
    6ef8:	2280      	movs	r2, #128	; 0x80
    6efa:	4650      	mov	r0, sl
    6efc:	03d2      	lsls	r2, r2, #15
    6efe:	4210      	tst	r0, r2
    6f00:	d0a4      	beq.n	6e4c <__aeabi_fsub+0x24c>
    6f02:	4660      	mov	r0, ip
    6f04:	4210      	tst	r0, r2
    6f06:	d1a1      	bne.n	6e4c <__aeabi_fsub+0x24c>
    6f08:	0033      	movs	r3, r6
    6f0a:	000d      	movs	r5, r1
    6f0c:	24ff      	movs	r4, #255	; 0xff
    6f0e:	e6bd      	b.n	6c8c <__aeabi_fsub+0x8c>
    6f10:	0033      	movs	r3, r6
    6f12:	24ff      	movs	r4, #255	; 0xff
    6f14:	e6ba      	b.n	6c8c <__aeabi_fsub+0x8c>
    6f16:	2301      	movs	r3, #1
    6f18:	e76e      	b.n	6df8 <__aeabi_fsub+0x1f8>
    6f1a:	0033      	movs	r3, r6
    6f1c:	0004      	movs	r4, r0
    6f1e:	e6b5      	b.n	6c8c <__aeabi_fsub+0x8c>
    6f20:	2700      	movs	r7, #0
    6f22:	2200      	movs	r2, #0
    6f24:	e71c      	b.n	6d60 <__aeabi_fsub+0x160>
    6f26:	0033      	movs	r3, r6
    6f28:	e6b0      	b.n	6c8c <__aeabi_fsub+0x8c>
    6f2a:	2301      	movs	r3, #1
    6f2c:	e7c0      	b.n	6eb0 <__aeabi_fsub+0x2b0>
    6f2e:	46c0      	nop			; (mov r8, r8)
    6f30:	7dffffff 	.word	0x7dffffff
    6f34:	fbffffff 	.word	0xfbffffff

00006f38 <__aeabi_f2iz>:
    6f38:	0241      	lsls	r1, r0, #9
    6f3a:	0043      	lsls	r3, r0, #1
    6f3c:	0fc2      	lsrs	r2, r0, #31
    6f3e:	0a49      	lsrs	r1, r1, #9
    6f40:	0e1b      	lsrs	r3, r3, #24
    6f42:	2000      	movs	r0, #0
    6f44:	2b7e      	cmp	r3, #126	; 0x7e
    6f46:	dd0d      	ble.n	6f64 <__aeabi_f2iz+0x2c>
    6f48:	2b9d      	cmp	r3, #157	; 0x9d
    6f4a:	dc0c      	bgt.n	6f66 <__aeabi_f2iz+0x2e>
    6f4c:	2080      	movs	r0, #128	; 0x80
    6f4e:	0400      	lsls	r0, r0, #16
    6f50:	4301      	orrs	r1, r0
    6f52:	2b95      	cmp	r3, #149	; 0x95
    6f54:	dc0a      	bgt.n	6f6c <__aeabi_f2iz+0x34>
    6f56:	2096      	movs	r0, #150	; 0x96
    6f58:	1ac3      	subs	r3, r0, r3
    6f5a:	40d9      	lsrs	r1, r3
    6f5c:	4248      	negs	r0, r1
    6f5e:	2a00      	cmp	r2, #0
    6f60:	d100      	bne.n	6f64 <__aeabi_f2iz+0x2c>
    6f62:	0008      	movs	r0, r1
    6f64:	4770      	bx	lr
    6f66:	4b03      	ldr	r3, [pc, #12]	; (6f74 <__aeabi_f2iz+0x3c>)
    6f68:	18d0      	adds	r0, r2, r3
    6f6a:	e7fb      	b.n	6f64 <__aeabi_f2iz+0x2c>
    6f6c:	3b96      	subs	r3, #150	; 0x96
    6f6e:	4099      	lsls	r1, r3
    6f70:	e7f4      	b.n	6f5c <__aeabi_f2iz+0x24>
    6f72:	46c0      	nop			; (mov r8, r8)
    6f74:	7fffffff 	.word	0x7fffffff

00006f78 <__aeabi_i2f>:
    6f78:	b570      	push	{r4, r5, r6, lr}
    6f7a:	2800      	cmp	r0, #0
    6f7c:	d030      	beq.n	6fe0 <__aeabi_i2f+0x68>
    6f7e:	17c3      	asrs	r3, r0, #31
    6f80:	18c4      	adds	r4, r0, r3
    6f82:	405c      	eors	r4, r3
    6f84:	0fc5      	lsrs	r5, r0, #31
    6f86:	0020      	movs	r0, r4
    6f88:	f001 ff10 	bl	8dac <__clzsi2>
    6f8c:	239e      	movs	r3, #158	; 0x9e
    6f8e:	1a1b      	subs	r3, r3, r0
    6f90:	2b96      	cmp	r3, #150	; 0x96
    6f92:	dc0d      	bgt.n	6fb0 <__aeabi_i2f+0x38>
    6f94:	2296      	movs	r2, #150	; 0x96
    6f96:	1ad2      	subs	r2, r2, r3
    6f98:	4094      	lsls	r4, r2
    6f9a:	002a      	movs	r2, r5
    6f9c:	0264      	lsls	r4, r4, #9
    6f9e:	0a64      	lsrs	r4, r4, #9
    6fa0:	b2db      	uxtb	r3, r3
    6fa2:	0264      	lsls	r4, r4, #9
    6fa4:	05db      	lsls	r3, r3, #23
    6fa6:	0a60      	lsrs	r0, r4, #9
    6fa8:	07d2      	lsls	r2, r2, #31
    6faa:	4318      	orrs	r0, r3
    6fac:	4310      	orrs	r0, r2
    6fae:	bd70      	pop	{r4, r5, r6, pc}
    6fb0:	2b99      	cmp	r3, #153	; 0x99
    6fb2:	dc19      	bgt.n	6fe8 <__aeabi_i2f+0x70>
    6fb4:	2299      	movs	r2, #153	; 0x99
    6fb6:	1ad2      	subs	r2, r2, r3
    6fb8:	2a00      	cmp	r2, #0
    6fba:	dd29      	ble.n	7010 <__aeabi_i2f+0x98>
    6fbc:	4094      	lsls	r4, r2
    6fbe:	0022      	movs	r2, r4
    6fc0:	4c14      	ldr	r4, [pc, #80]	; (7014 <__aeabi_i2f+0x9c>)
    6fc2:	4014      	ands	r4, r2
    6fc4:	0751      	lsls	r1, r2, #29
    6fc6:	d004      	beq.n	6fd2 <__aeabi_i2f+0x5a>
    6fc8:	210f      	movs	r1, #15
    6fca:	400a      	ands	r2, r1
    6fcc:	2a04      	cmp	r2, #4
    6fce:	d000      	beq.n	6fd2 <__aeabi_i2f+0x5a>
    6fd0:	3404      	adds	r4, #4
    6fd2:	0162      	lsls	r2, r4, #5
    6fd4:	d413      	bmi.n	6ffe <__aeabi_i2f+0x86>
    6fd6:	01a4      	lsls	r4, r4, #6
    6fd8:	0a64      	lsrs	r4, r4, #9
    6fda:	b2db      	uxtb	r3, r3
    6fdc:	002a      	movs	r2, r5
    6fde:	e7e0      	b.n	6fa2 <__aeabi_i2f+0x2a>
    6fe0:	2200      	movs	r2, #0
    6fe2:	2300      	movs	r3, #0
    6fe4:	2400      	movs	r4, #0
    6fe6:	e7dc      	b.n	6fa2 <__aeabi_i2f+0x2a>
    6fe8:	2205      	movs	r2, #5
    6fea:	0021      	movs	r1, r4
    6fec:	1a12      	subs	r2, r2, r0
    6fee:	40d1      	lsrs	r1, r2
    6ff0:	22b9      	movs	r2, #185	; 0xb9
    6ff2:	1ad2      	subs	r2, r2, r3
    6ff4:	4094      	lsls	r4, r2
    6ff6:	1e62      	subs	r2, r4, #1
    6ff8:	4194      	sbcs	r4, r2
    6ffa:	430c      	orrs	r4, r1
    6ffc:	e7da      	b.n	6fb4 <__aeabi_i2f+0x3c>
    6ffe:	4b05      	ldr	r3, [pc, #20]	; (7014 <__aeabi_i2f+0x9c>)
    7000:	002a      	movs	r2, r5
    7002:	401c      	ands	r4, r3
    7004:	239f      	movs	r3, #159	; 0x9f
    7006:	01a4      	lsls	r4, r4, #6
    7008:	1a1b      	subs	r3, r3, r0
    700a:	0a64      	lsrs	r4, r4, #9
    700c:	b2db      	uxtb	r3, r3
    700e:	e7c8      	b.n	6fa2 <__aeabi_i2f+0x2a>
    7010:	0022      	movs	r2, r4
    7012:	e7d5      	b.n	6fc0 <__aeabi_i2f+0x48>
    7014:	fbffffff 	.word	0xfbffffff

00007018 <__aeabi_ui2f>:
    7018:	b510      	push	{r4, lr}
    701a:	1e04      	subs	r4, r0, #0
    701c:	d027      	beq.n	706e <__aeabi_ui2f+0x56>
    701e:	f001 fec5 	bl	8dac <__clzsi2>
    7022:	239e      	movs	r3, #158	; 0x9e
    7024:	1a1b      	subs	r3, r3, r0
    7026:	2b96      	cmp	r3, #150	; 0x96
    7028:	dc0a      	bgt.n	7040 <__aeabi_ui2f+0x28>
    702a:	2296      	movs	r2, #150	; 0x96
    702c:	1ad2      	subs	r2, r2, r3
    702e:	4094      	lsls	r4, r2
    7030:	0264      	lsls	r4, r4, #9
    7032:	0a64      	lsrs	r4, r4, #9
    7034:	b2db      	uxtb	r3, r3
    7036:	0264      	lsls	r4, r4, #9
    7038:	05db      	lsls	r3, r3, #23
    703a:	0a60      	lsrs	r0, r4, #9
    703c:	4318      	orrs	r0, r3
    703e:	bd10      	pop	{r4, pc}
    7040:	2b99      	cmp	r3, #153	; 0x99
    7042:	dc17      	bgt.n	7074 <__aeabi_ui2f+0x5c>
    7044:	2299      	movs	r2, #153	; 0x99
    7046:	1ad2      	subs	r2, r2, r3
    7048:	2a00      	cmp	r2, #0
    704a:	dd27      	ble.n	709c <__aeabi_ui2f+0x84>
    704c:	4094      	lsls	r4, r2
    704e:	0022      	movs	r2, r4
    7050:	4c13      	ldr	r4, [pc, #76]	; (70a0 <__aeabi_ui2f+0x88>)
    7052:	4014      	ands	r4, r2
    7054:	0751      	lsls	r1, r2, #29
    7056:	d004      	beq.n	7062 <__aeabi_ui2f+0x4a>
    7058:	210f      	movs	r1, #15
    705a:	400a      	ands	r2, r1
    705c:	2a04      	cmp	r2, #4
    705e:	d000      	beq.n	7062 <__aeabi_ui2f+0x4a>
    7060:	3404      	adds	r4, #4
    7062:	0162      	lsls	r2, r4, #5
    7064:	d412      	bmi.n	708c <__aeabi_ui2f+0x74>
    7066:	01a4      	lsls	r4, r4, #6
    7068:	0a64      	lsrs	r4, r4, #9
    706a:	b2db      	uxtb	r3, r3
    706c:	e7e3      	b.n	7036 <__aeabi_ui2f+0x1e>
    706e:	2300      	movs	r3, #0
    7070:	2400      	movs	r4, #0
    7072:	e7e0      	b.n	7036 <__aeabi_ui2f+0x1e>
    7074:	22b9      	movs	r2, #185	; 0xb9
    7076:	0021      	movs	r1, r4
    7078:	1ad2      	subs	r2, r2, r3
    707a:	4091      	lsls	r1, r2
    707c:	000a      	movs	r2, r1
    707e:	1e51      	subs	r1, r2, #1
    7080:	418a      	sbcs	r2, r1
    7082:	2105      	movs	r1, #5
    7084:	1a09      	subs	r1, r1, r0
    7086:	40cc      	lsrs	r4, r1
    7088:	4314      	orrs	r4, r2
    708a:	e7db      	b.n	7044 <__aeabi_ui2f+0x2c>
    708c:	4b04      	ldr	r3, [pc, #16]	; (70a0 <__aeabi_ui2f+0x88>)
    708e:	401c      	ands	r4, r3
    7090:	239f      	movs	r3, #159	; 0x9f
    7092:	01a4      	lsls	r4, r4, #6
    7094:	1a1b      	subs	r3, r3, r0
    7096:	0a64      	lsrs	r4, r4, #9
    7098:	b2db      	uxtb	r3, r3
    709a:	e7cc      	b.n	7036 <__aeabi_ui2f+0x1e>
    709c:	0022      	movs	r2, r4
    709e:	e7d7      	b.n	7050 <__aeabi_ui2f+0x38>
    70a0:	fbffffff 	.word	0xfbffffff

000070a4 <__aeabi_dadd>:
    70a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70a6:	4645      	mov	r5, r8
    70a8:	46de      	mov	lr, fp
    70aa:	4657      	mov	r7, sl
    70ac:	464e      	mov	r6, r9
    70ae:	030c      	lsls	r4, r1, #12
    70b0:	b5e0      	push	{r5, r6, r7, lr}
    70b2:	004e      	lsls	r6, r1, #1
    70b4:	0fc9      	lsrs	r1, r1, #31
    70b6:	4688      	mov	r8, r1
    70b8:	000d      	movs	r5, r1
    70ba:	0a61      	lsrs	r1, r4, #9
    70bc:	0f44      	lsrs	r4, r0, #29
    70be:	430c      	orrs	r4, r1
    70c0:	00c7      	lsls	r7, r0, #3
    70c2:	0319      	lsls	r1, r3, #12
    70c4:	0058      	lsls	r0, r3, #1
    70c6:	0fdb      	lsrs	r3, r3, #31
    70c8:	469b      	mov	fp, r3
    70ca:	0a4b      	lsrs	r3, r1, #9
    70cc:	0f51      	lsrs	r1, r2, #29
    70ce:	430b      	orrs	r3, r1
    70d0:	0d76      	lsrs	r6, r6, #21
    70d2:	0d40      	lsrs	r0, r0, #21
    70d4:	0019      	movs	r1, r3
    70d6:	00d2      	lsls	r2, r2, #3
    70d8:	45d8      	cmp	r8, fp
    70da:	d100      	bne.n	70de <__aeabi_dadd+0x3a>
    70dc:	e0ae      	b.n	723c <__aeabi_dadd+0x198>
    70de:	1a35      	subs	r5, r6, r0
    70e0:	2d00      	cmp	r5, #0
    70e2:	dc00      	bgt.n	70e6 <__aeabi_dadd+0x42>
    70e4:	e0f6      	b.n	72d4 <__aeabi_dadd+0x230>
    70e6:	2800      	cmp	r0, #0
    70e8:	d10f      	bne.n	710a <__aeabi_dadd+0x66>
    70ea:	4313      	orrs	r3, r2
    70ec:	d100      	bne.n	70f0 <__aeabi_dadd+0x4c>
    70ee:	e0db      	b.n	72a8 <__aeabi_dadd+0x204>
    70f0:	1e6b      	subs	r3, r5, #1
    70f2:	2b00      	cmp	r3, #0
    70f4:	d000      	beq.n	70f8 <__aeabi_dadd+0x54>
    70f6:	e137      	b.n	7368 <__aeabi_dadd+0x2c4>
    70f8:	1aba      	subs	r2, r7, r2
    70fa:	4297      	cmp	r7, r2
    70fc:	41bf      	sbcs	r7, r7
    70fe:	1a64      	subs	r4, r4, r1
    7100:	427f      	negs	r7, r7
    7102:	1be4      	subs	r4, r4, r7
    7104:	2601      	movs	r6, #1
    7106:	0017      	movs	r7, r2
    7108:	e024      	b.n	7154 <__aeabi_dadd+0xb0>
    710a:	4bc6      	ldr	r3, [pc, #792]	; (7424 <__aeabi_dadd+0x380>)
    710c:	429e      	cmp	r6, r3
    710e:	d04d      	beq.n	71ac <__aeabi_dadd+0x108>
    7110:	2380      	movs	r3, #128	; 0x80
    7112:	041b      	lsls	r3, r3, #16
    7114:	4319      	orrs	r1, r3
    7116:	2d38      	cmp	r5, #56	; 0x38
    7118:	dd00      	ble.n	711c <__aeabi_dadd+0x78>
    711a:	e107      	b.n	732c <__aeabi_dadd+0x288>
    711c:	2d1f      	cmp	r5, #31
    711e:	dd00      	ble.n	7122 <__aeabi_dadd+0x7e>
    7120:	e138      	b.n	7394 <__aeabi_dadd+0x2f0>
    7122:	2020      	movs	r0, #32
    7124:	1b43      	subs	r3, r0, r5
    7126:	469a      	mov	sl, r3
    7128:	000b      	movs	r3, r1
    712a:	4650      	mov	r0, sl
    712c:	4083      	lsls	r3, r0
    712e:	4699      	mov	r9, r3
    7130:	0013      	movs	r3, r2
    7132:	4648      	mov	r0, r9
    7134:	40eb      	lsrs	r3, r5
    7136:	4318      	orrs	r0, r3
    7138:	0003      	movs	r3, r0
    713a:	4650      	mov	r0, sl
    713c:	4082      	lsls	r2, r0
    713e:	1e50      	subs	r0, r2, #1
    7140:	4182      	sbcs	r2, r0
    7142:	40e9      	lsrs	r1, r5
    7144:	431a      	orrs	r2, r3
    7146:	1aba      	subs	r2, r7, r2
    7148:	1a61      	subs	r1, r4, r1
    714a:	4297      	cmp	r7, r2
    714c:	41a4      	sbcs	r4, r4
    714e:	0017      	movs	r7, r2
    7150:	4264      	negs	r4, r4
    7152:	1b0c      	subs	r4, r1, r4
    7154:	0223      	lsls	r3, r4, #8
    7156:	d562      	bpl.n	721e <__aeabi_dadd+0x17a>
    7158:	0264      	lsls	r4, r4, #9
    715a:	0a65      	lsrs	r5, r4, #9
    715c:	2d00      	cmp	r5, #0
    715e:	d100      	bne.n	7162 <__aeabi_dadd+0xbe>
    7160:	e0df      	b.n	7322 <__aeabi_dadd+0x27e>
    7162:	0028      	movs	r0, r5
    7164:	f001 fe22 	bl	8dac <__clzsi2>
    7168:	0003      	movs	r3, r0
    716a:	3b08      	subs	r3, #8
    716c:	2b1f      	cmp	r3, #31
    716e:	dd00      	ble.n	7172 <__aeabi_dadd+0xce>
    7170:	e0d2      	b.n	7318 <__aeabi_dadd+0x274>
    7172:	2220      	movs	r2, #32
    7174:	003c      	movs	r4, r7
    7176:	1ad2      	subs	r2, r2, r3
    7178:	409d      	lsls	r5, r3
    717a:	40d4      	lsrs	r4, r2
    717c:	409f      	lsls	r7, r3
    717e:	4325      	orrs	r5, r4
    7180:	429e      	cmp	r6, r3
    7182:	dd00      	ble.n	7186 <__aeabi_dadd+0xe2>
    7184:	e0c4      	b.n	7310 <__aeabi_dadd+0x26c>
    7186:	1b9e      	subs	r6, r3, r6
    7188:	1c73      	adds	r3, r6, #1
    718a:	2b1f      	cmp	r3, #31
    718c:	dd00      	ble.n	7190 <__aeabi_dadd+0xec>
    718e:	e0f1      	b.n	7374 <__aeabi_dadd+0x2d0>
    7190:	2220      	movs	r2, #32
    7192:	0038      	movs	r0, r7
    7194:	0029      	movs	r1, r5
    7196:	1ad2      	subs	r2, r2, r3
    7198:	40d8      	lsrs	r0, r3
    719a:	4091      	lsls	r1, r2
    719c:	4097      	lsls	r7, r2
    719e:	002c      	movs	r4, r5
    71a0:	4301      	orrs	r1, r0
    71a2:	1e78      	subs	r0, r7, #1
    71a4:	4187      	sbcs	r7, r0
    71a6:	40dc      	lsrs	r4, r3
    71a8:	2600      	movs	r6, #0
    71aa:	430f      	orrs	r7, r1
    71ac:	077b      	lsls	r3, r7, #29
    71ae:	d009      	beq.n	71c4 <__aeabi_dadd+0x120>
    71b0:	230f      	movs	r3, #15
    71b2:	403b      	ands	r3, r7
    71b4:	2b04      	cmp	r3, #4
    71b6:	d005      	beq.n	71c4 <__aeabi_dadd+0x120>
    71b8:	1d3b      	adds	r3, r7, #4
    71ba:	42bb      	cmp	r3, r7
    71bc:	41bf      	sbcs	r7, r7
    71be:	427f      	negs	r7, r7
    71c0:	19e4      	adds	r4, r4, r7
    71c2:	001f      	movs	r7, r3
    71c4:	0223      	lsls	r3, r4, #8
    71c6:	d52c      	bpl.n	7222 <__aeabi_dadd+0x17e>
    71c8:	4b96      	ldr	r3, [pc, #600]	; (7424 <__aeabi_dadd+0x380>)
    71ca:	3601      	adds	r6, #1
    71cc:	429e      	cmp	r6, r3
    71ce:	d100      	bne.n	71d2 <__aeabi_dadd+0x12e>
    71d0:	e09a      	b.n	7308 <__aeabi_dadd+0x264>
    71d2:	4645      	mov	r5, r8
    71d4:	4b94      	ldr	r3, [pc, #592]	; (7428 <__aeabi_dadd+0x384>)
    71d6:	08ff      	lsrs	r7, r7, #3
    71d8:	401c      	ands	r4, r3
    71da:	0760      	lsls	r0, r4, #29
    71dc:	0576      	lsls	r6, r6, #21
    71de:	0264      	lsls	r4, r4, #9
    71e0:	4307      	orrs	r7, r0
    71e2:	0b24      	lsrs	r4, r4, #12
    71e4:	0d76      	lsrs	r6, r6, #21
    71e6:	2100      	movs	r1, #0
    71e8:	0324      	lsls	r4, r4, #12
    71ea:	0b23      	lsrs	r3, r4, #12
    71ec:	0d0c      	lsrs	r4, r1, #20
    71ee:	4a8f      	ldr	r2, [pc, #572]	; (742c <__aeabi_dadd+0x388>)
    71f0:	0524      	lsls	r4, r4, #20
    71f2:	431c      	orrs	r4, r3
    71f4:	4014      	ands	r4, r2
    71f6:	0533      	lsls	r3, r6, #20
    71f8:	4323      	orrs	r3, r4
    71fa:	005b      	lsls	r3, r3, #1
    71fc:	07ed      	lsls	r5, r5, #31
    71fe:	085b      	lsrs	r3, r3, #1
    7200:	432b      	orrs	r3, r5
    7202:	0038      	movs	r0, r7
    7204:	0019      	movs	r1, r3
    7206:	bc3c      	pop	{r2, r3, r4, r5}
    7208:	4690      	mov	r8, r2
    720a:	4699      	mov	r9, r3
    720c:	46a2      	mov	sl, r4
    720e:	46ab      	mov	fp, r5
    7210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7212:	4664      	mov	r4, ip
    7214:	4304      	orrs	r4, r0
    7216:	d100      	bne.n	721a <__aeabi_dadd+0x176>
    7218:	e211      	b.n	763e <__aeabi_dadd+0x59a>
    721a:	0004      	movs	r4, r0
    721c:	4667      	mov	r7, ip
    721e:	077b      	lsls	r3, r7, #29
    7220:	d1c6      	bne.n	71b0 <__aeabi_dadd+0x10c>
    7222:	4645      	mov	r5, r8
    7224:	0760      	lsls	r0, r4, #29
    7226:	08ff      	lsrs	r7, r7, #3
    7228:	4307      	orrs	r7, r0
    722a:	08e4      	lsrs	r4, r4, #3
    722c:	4b7d      	ldr	r3, [pc, #500]	; (7424 <__aeabi_dadd+0x380>)
    722e:	429e      	cmp	r6, r3
    7230:	d030      	beq.n	7294 <__aeabi_dadd+0x1f0>
    7232:	0324      	lsls	r4, r4, #12
    7234:	0576      	lsls	r6, r6, #21
    7236:	0b24      	lsrs	r4, r4, #12
    7238:	0d76      	lsrs	r6, r6, #21
    723a:	e7d4      	b.n	71e6 <__aeabi_dadd+0x142>
    723c:	1a33      	subs	r3, r6, r0
    723e:	469a      	mov	sl, r3
    7240:	2b00      	cmp	r3, #0
    7242:	dd78      	ble.n	7336 <__aeabi_dadd+0x292>
    7244:	2800      	cmp	r0, #0
    7246:	d031      	beq.n	72ac <__aeabi_dadd+0x208>
    7248:	4876      	ldr	r0, [pc, #472]	; (7424 <__aeabi_dadd+0x380>)
    724a:	4286      	cmp	r6, r0
    724c:	d0ae      	beq.n	71ac <__aeabi_dadd+0x108>
    724e:	2080      	movs	r0, #128	; 0x80
    7250:	0400      	lsls	r0, r0, #16
    7252:	4301      	orrs	r1, r0
    7254:	4653      	mov	r3, sl
    7256:	2b38      	cmp	r3, #56	; 0x38
    7258:	dc00      	bgt.n	725c <__aeabi_dadd+0x1b8>
    725a:	e0e9      	b.n	7430 <__aeabi_dadd+0x38c>
    725c:	430a      	orrs	r2, r1
    725e:	1e51      	subs	r1, r2, #1
    7260:	418a      	sbcs	r2, r1
    7262:	2100      	movs	r1, #0
    7264:	19d2      	adds	r2, r2, r7
    7266:	42ba      	cmp	r2, r7
    7268:	41bf      	sbcs	r7, r7
    726a:	1909      	adds	r1, r1, r4
    726c:	427c      	negs	r4, r7
    726e:	0017      	movs	r7, r2
    7270:	190c      	adds	r4, r1, r4
    7272:	0223      	lsls	r3, r4, #8
    7274:	d5d3      	bpl.n	721e <__aeabi_dadd+0x17a>
    7276:	4b6b      	ldr	r3, [pc, #428]	; (7424 <__aeabi_dadd+0x380>)
    7278:	3601      	adds	r6, #1
    727a:	429e      	cmp	r6, r3
    727c:	d100      	bne.n	7280 <__aeabi_dadd+0x1dc>
    727e:	e13a      	b.n	74f6 <__aeabi_dadd+0x452>
    7280:	2001      	movs	r0, #1
    7282:	4b69      	ldr	r3, [pc, #420]	; (7428 <__aeabi_dadd+0x384>)
    7284:	401c      	ands	r4, r3
    7286:	087b      	lsrs	r3, r7, #1
    7288:	4007      	ands	r7, r0
    728a:	431f      	orrs	r7, r3
    728c:	07e0      	lsls	r0, r4, #31
    728e:	4307      	orrs	r7, r0
    7290:	0864      	lsrs	r4, r4, #1
    7292:	e78b      	b.n	71ac <__aeabi_dadd+0x108>
    7294:	0023      	movs	r3, r4
    7296:	433b      	orrs	r3, r7
    7298:	d100      	bne.n	729c <__aeabi_dadd+0x1f8>
    729a:	e1cb      	b.n	7634 <__aeabi_dadd+0x590>
    729c:	2280      	movs	r2, #128	; 0x80
    729e:	0312      	lsls	r2, r2, #12
    72a0:	4314      	orrs	r4, r2
    72a2:	0324      	lsls	r4, r4, #12
    72a4:	0b24      	lsrs	r4, r4, #12
    72a6:	e79e      	b.n	71e6 <__aeabi_dadd+0x142>
    72a8:	002e      	movs	r6, r5
    72aa:	e77f      	b.n	71ac <__aeabi_dadd+0x108>
    72ac:	0008      	movs	r0, r1
    72ae:	4310      	orrs	r0, r2
    72b0:	d100      	bne.n	72b4 <__aeabi_dadd+0x210>
    72b2:	e0b4      	b.n	741e <__aeabi_dadd+0x37a>
    72b4:	1e58      	subs	r0, r3, #1
    72b6:	2800      	cmp	r0, #0
    72b8:	d000      	beq.n	72bc <__aeabi_dadd+0x218>
    72ba:	e0de      	b.n	747a <__aeabi_dadd+0x3d6>
    72bc:	18ba      	adds	r2, r7, r2
    72be:	42ba      	cmp	r2, r7
    72c0:	419b      	sbcs	r3, r3
    72c2:	1864      	adds	r4, r4, r1
    72c4:	425b      	negs	r3, r3
    72c6:	18e4      	adds	r4, r4, r3
    72c8:	0017      	movs	r7, r2
    72ca:	2601      	movs	r6, #1
    72cc:	0223      	lsls	r3, r4, #8
    72ce:	d5a6      	bpl.n	721e <__aeabi_dadd+0x17a>
    72d0:	2602      	movs	r6, #2
    72d2:	e7d5      	b.n	7280 <__aeabi_dadd+0x1dc>
    72d4:	2d00      	cmp	r5, #0
    72d6:	d16e      	bne.n	73b6 <__aeabi_dadd+0x312>
    72d8:	1c70      	adds	r0, r6, #1
    72da:	0540      	lsls	r0, r0, #21
    72dc:	0d40      	lsrs	r0, r0, #21
    72de:	2801      	cmp	r0, #1
    72e0:	dc00      	bgt.n	72e4 <__aeabi_dadd+0x240>
    72e2:	e0f9      	b.n	74d8 <__aeabi_dadd+0x434>
    72e4:	1ab8      	subs	r0, r7, r2
    72e6:	4684      	mov	ip, r0
    72e8:	4287      	cmp	r7, r0
    72ea:	4180      	sbcs	r0, r0
    72ec:	1ae5      	subs	r5, r4, r3
    72ee:	4240      	negs	r0, r0
    72f0:	1a2d      	subs	r5, r5, r0
    72f2:	0228      	lsls	r0, r5, #8
    72f4:	d400      	bmi.n	72f8 <__aeabi_dadd+0x254>
    72f6:	e089      	b.n	740c <__aeabi_dadd+0x368>
    72f8:	1bd7      	subs	r7, r2, r7
    72fa:	42ba      	cmp	r2, r7
    72fc:	4192      	sbcs	r2, r2
    72fe:	1b1c      	subs	r4, r3, r4
    7300:	4252      	negs	r2, r2
    7302:	1aa5      	subs	r5, r4, r2
    7304:	46d8      	mov	r8, fp
    7306:	e729      	b.n	715c <__aeabi_dadd+0xb8>
    7308:	4645      	mov	r5, r8
    730a:	2400      	movs	r4, #0
    730c:	2700      	movs	r7, #0
    730e:	e76a      	b.n	71e6 <__aeabi_dadd+0x142>
    7310:	4c45      	ldr	r4, [pc, #276]	; (7428 <__aeabi_dadd+0x384>)
    7312:	1af6      	subs	r6, r6, r3
    7314:	402c      	ands	r4, r5
    7316:	e749      	b.n	71ac <__aeabi_dadd+0x108>
    7318:	003d      	movs	r5, r7
    731a:	3828      	subs	r0, #40	; 0x28
    731c:	4085      	lsls	r5, r0
    731e:	2700      	movs	r7, #0
    7320:	e72e      	b.n	7180 <__aeabi_dadd+0xdc>
    7322:	0038      	movs	r0, r7
    7324:	f001 fd42 	bl	8dac <__clzsi2>
    7328:	3020      	adds	r0, #32
    732a:	e71d      	b.n	7168 <__aeabi_dadd+0xc4>
    732c:	430a      	orrs	r2, r1
    732e:	1e51      	subs	r1, r2, #1
    7330:	418a      	sbcs	r2, r1
    7332:	2100      	movs	r1, #0
    7334:	e707      	b.n	7146 <__aeabi_dadd+0xa2>
    7336:	2b00      	cmp	r3, #0
    7338:	d000      	beq.n	733c <__aeabi_dadd+0x298>
    733a:	e0f3      	b.n	7524 <__aeabi_dadd+0x480>
    733c:	1c70      	adds	r0, r6, #1
    733e:	0543      	lsls	r3, r0, #21
    7340:	0d5b      	lsrs	r3, r3, #21
    7342:	2b01      	cmp	r3, #1
    7344:	dc00      	bgt.n	7348 <__aeabi_dadd+0x2a4>
    7346:	e0ad      	b.n	74a4 <__aeabi_dadd+0x400>
    7348:	4b36      	ldr	r3, [pc, #216]	; (7424 <__aeabi_dadd+0x380>)
    734a:	4298      	cmp	r0, r3
    734c:	d100      	bne.n	7350 <__aeabi_dadd+0x2ac>
    734e:	e0d1      	b.n	74f4 <__aeabi_dadd+0x450>
    7350:	18ba      	adds	r2, r7, r2
    7352:	42ba      	cmp	r2, r7
    7354:	41bf      	sbcs	r7, r7
    7356:	1864      	adds	r4, r4, r1
    7358:	427f      	negs	r7, r7
    735a:	19e4      	adds	r4, r4, r7
    735c:	07e7      	lsls	r7, r4, #31
    735e:	0852      	lsrs	r2, r2, #1
    7360:	4317      	orrs	r7, r2
    7362:	0864      	lsrs	r4, r4, #1
    7364:	0006      	movs	r6, r0
    7366:	e721      	b.n	71ac <__aeabi_dadd+0x108>
    7368:	482e      	ldr	r0, [pc, #184]	; (7424 <__aeabi_dadd+0x380>)
    736a:	4285      	cmp	r5, r0
    736c:	d100      	bne.n	7370 <__aeabi_dadd+0x2cc>
    736e:	e093      	b.n	7498 <__aeabi_dadd+0x3f4>
    7370:	001d      	movs	r5, r3
    7372:	e6d0      	b.n	7116 <__aeabi_dadd+0x72>
    7374:	0029      	movs	r1, r5
    7376:	3e1f      	subs	r6, #31
    7378:	40f1      	lsrs	r1, r6
    737a:	2b20      	cmp	r3, #32
    737c:	d100      	bne.n	7380 <__aeabi_dadd+0x2dc>
    737e:	e08d      	b.n	749c <__aeabi_dadd+0x3f8>
    7380:	2240      	movs	r2, #64	; 0x40
    7382:	1ad3      	subs	r3, r2, r3
    7384:	409d      	lsls	r5, r3
    7386:	432f      	orrs	r7, r5
    7388:	1e7d      	subs	r5, r7, #1
    738a:	41af      	sbcs	r7, r5
    738c:	2400      	movs	r4, #0
    738e:	430f      	orrs	r7, r1
    7390:	2600      	movs	r6, #0
    7392:	e744      	b.n	721e <__aeabi_dadd+0x17a>
    7394:	002b      	movs	r3, r5
    7396:	0008      	movs	r0, r1
    7398:	3b20      	subs	r3, #32
    739a:	40d8      	lsrs	r0, r3
    739c:	0003      	movs	r3, r0
    739e:	2d20      	cmp	r5, #32
    73a0:	d100      	bne.n	73a4 <__aeabi_dadd+0x300>
    73a2:	e07d      	b.n	74a0 <__aeabi_dadd+0x3fc>
    73a4:	2040      	movs	r0, #64	; 0x40
    73a6:	1b45      	subs	r5, r0, r5
    73a8:	40a9      	lsls	r1, r5
    73aa:	430a      	orrs	r2, r1
    73ac:	1e51      	subs	r1, r2, #1
    73ae:	418a      	sbcs	r2, r1
    73b0:	2100      	movs	r1, #0
    73b2:	431a      	orrs	r2, r3
    73b4:	e6c7      	b.n	7146 <__aeabi_dadd+0xa2>
    73b6:	2e00      	cmp	r6, #0
    73b8:	d050      	beq.n	745c <__aeabi_dadd+0x3b8>
    73ba:	4e1a      	ldr	r6, [pc, #104]	; (7424 <__aeabi_dadd+0x380>)
    73bc:	42b0      	cmp	r0, r6
    73be:	d057      	beq.n	7470 <__aeabi_dadd+0x3cc>
    73c0:	2680      	movs	r6, #128	; 0x80
    73c2:	426b      	negs	r3, r5
    73c4:	4699      	mov	r9, r3
    73c6:	0436      	lsls	r6, r6, #16
    73c8:	4334      	orrs	r4, r6
    73ca:	464b      	mov	r3, r9
    73cc:	2b38      	cmp	r3, #56	; 0x38
    73ce:	dd00      	ble.n	73d2 <__aeabi_dadd+0x32e>
    73d0:	e0d6      	b.n	7580 <__aeabi_dadd+0x4dc>
    73d2:	2b1f      	cmp	r3, #31
    73d4:	dd00      	ble.n	73d8 <__aeabi_dadd+0x334>
    73d6:	e135      	b.n	7644 <__aeabi_dadd+0x5a0>
    73d8:	2620      	movs	r6, #32
    73da:	1af5      	subs	r5, r6, r3
    73dc:	0026      	movs	r6, r4
    73de:	40ae      	lsls	r6, r5
    73e0:	46b2      	mov	sl, r6
    73e2:	003e      	movs	r6, r7
    73e4:	40de      	lsrs	r6, r3
    73e6:	46ac      	mov	ip, r5
    73e8:	0035      	movs	r5, r6
    73ea:	4656      	mov	r6, sl
    73ec:	432e      	orrs	r6, r5
    73ee:	4665      	mov	r5, ip
    73f0:	40af      	lsls	r7, r5
    73f2:	1e7d      	subs	r5, r7, #1
    73f4:	41af      	sbcs	r7, r5
    73f6:	40dc      	lsrs	r4, r3
    73f8:	4337      	orrs	r7, r6
    73fa:	1bd7      	subs	r7, r2, r7
    73fc:	42ba      	cmp	r2, r7
    73fe:	4192      	sbcs	r2, r2
    7400:	1b0c      	subs	r4, r1, r4
    7402:	4252      	negs	r2, r2
    7404:	1aa4      	subs	r4, r4, r2
    7406:	0006      	movs	r6, r0
    7408:	46d8      	mov	r8, fp
    740a:	e6a3      	b.n	7154 <__aeabi_dadd+0xb0>
    740c:	4664      	mov	r4, ip
    740e:	4667      	mov	r7, ip
    7410:	432c      	orrs	r4, r5
    7412:	d000      	beq.n	7416 <__aeabi_dadd+0x372>
    7414:	e6a2      	b.n	715c <__aeabi_dadd+0xb8>
    7416:	2500      	movs	r5, #0
    7418:	2600      	movs	r6, #0
    741a:	2700      	movs	r7, #0
    741c:	e706      	b.n	722c <__aeabi_dadd+0x188>
    741e:	001e      	movs	r6, r3
    7420:	e6c4      	b.n	71ac <__aeabi_dadd+0x108>
    7422:	46c0      	nop			; (mov r8, r8)
    7424:	000007ff 	.word	0x000007ff
    7428:	ff7fffff 	.word	0xff7fffff
    742c:	800fffff 	.word	0x800fffff
    7430:	2b1f      	cmp	r3, #31
    7432:	dc63      	bgt.n	74fc <__aeabi_dadd+0x458>
    7434:	2020      	movs	r0, #32
    7436:	1ac3      	subs	r3, r0, r3
    7438:	0008      	movs	r0, r1
    743a:	4098      	lsls	r0, r3
    743c:	469c      	mov	ip, r3
    743e:	4683      	mov	fp, r0
    7440:	4653      	mov	r3, sl
    7442:	0010      	movs	r0, r2
    7444:	40d8      	lsrs	r0, r3
    7446:	0003      	movs	r3, r0
    7448:	4658      	mov	r0, fp
    744a:	4318      	orrs	r0, r3
    744c:	4663      	mov	r3, ip
    744e:	409a      	lsls	r2, r3
    7450:	1e53      	subs	r3, r2, #1
    7452:	419a      	sbcs	r2, r3
    7454:	4653      	mov	r3, sl
    7456:	4302      	orrs	r2, r0
    7458:	40d9      	lsrs	r1, r3
    745a:	e703      	b.n	7264 <__aeabi_dadd+0x1c0>
    745c:	0026      	movs	r6, r4
    745e:	433e      	orrs	r6, r7
    7460:	d006      	beq.n	7470 <__aeabi_dadd+0x3cc>
    7462:	43eb      	mvns	r3, r5
    7464:	4699      	mov	r9, r3
    7466:	2b00      	cmp	r3, #0
    7468:	d0c7      	beq.n	73fa <__aeabi_dadd+0x356>
    746a:	4e94      	ldr	r6, [pc, #592]	; (76bc <__aeabi_dadd+0x618>)
    746c:	42b0      	cmp	r0, r6
    746e:	d1ac      	bne.n	73ca <__aeabi_dadd+0x326>
    7470:	000c      	movs	r4, r1
    7472:	0017      	movs	r7, r2
    7474:	0006      	movs	r6, r0
    7476:	46d8      	mov	r8, fp
    7478:	e698      	b.n	71ac <__aeabi_dadd+0x108>
    747a:	4b90      	ldr	r3, [pc, #576]	; (76bc <__aeabi_dadd+0x618>)
    747c:	459a      	cmp	sl, r3
    747e:	d00b      	beq.n	7498 <__aeabi_dadd+0x3f4>
    7480:	4682      	mov	sl, r0
    7482:	e6e7      	b.n	7254 <__aeabi_dadd+0x1b0>
    7484:	2800      	cmp	r0, #0
    7486:	d000      	beq.n	748a <__aeabi_dadd+0x3e6>
    7488:	e09e      	b.n	75c8 <__aeabi_dadd+0x524>
    748a:	0018      	movs	r0, r3
    748c:	4310      	orrs	r0, r2
    748e:	d100      	bne.n	7492 <__aeabi_dadd+0x3ee>
    7490:	e0e9      	b.n	7666 <__aeabi_dadd+0x5c2>
    7492:	001c      	movs	r4, r3
    7494:	0017      	movs	r7, r2
    7496:	46d8      	mov	r8, fp
    7498:	4e88      	ldr	r6, [pc, #544]	; (76bc <__aeabi_dadd+0x618>)
    749a:	e687      	b.n	71ac <__aeabi_dadd+0x108>
    749c:	2500      	movs	r5, #0
    749e:	e772      	b.n	7386 <__aeabi_dadd+0x2e2>
    74a0:	2100      	movs	r1, #0
    74a2:	e782      	b.n	73aa <__aeabi_dadd+0x306>
    74a4:	0023      	movs	r3, r4
    74a6:	433b      	orrs	r3, r7
    74a8:	2e00      	cmp	r6, #0
    74aa:	d000      	beq.n	74ae <__aeabi_dadd+0x40a>
    74ac:	e0ab      	b.n	7606 <__aeabi_dadd+0x562>
    74ae:	2b00      	cmp	r3, #0
    74b0:	d100      	bne.n	74b4 <__aeabi_dadd+0x410>
    74b2:	e0e7      	b.n	7684 <__aeabi_dadd+0x5e0>
    74b4:	000b      	movs	r3, r1
    74b6:	4313      	orrs	r3, r2
    74b8:	d100      	bne.n	74bc <__aeabi_dadd+0x418>
    74ba:	e677      	b.n	71ac <__aeabi_dadd+0x108>
    74bc:	18ba      	adds	r2, r7, r2
    74be:	42ba      	cmp	r2, r7
    74c0:	41bf      	sbcs	r7, r7
    74c2:	1864      	adds	r4, r4, r1
    74c4:	427f      	negs	r7, r7
    74c6:	19e4      	adds	r4, r4, r7
    74c8:	0223      	lsls	r3, r4, #8
    74ca:	d400      	bmi.n	74ce <__aeabi_dadd+0x42a>
    74cc:	e0f2      	b.n	76b4 <__aeabi_dadd+0x610>
    74ce:	4b7c      	ldr	r3, [pc, #496]	; (76c0 <__aeabi_dadd+0x61c>)
    74d0:	0017      	movs	r7, r2
    74d2:	401c      	ands	r4, r3
    74d4:	0006      	movs	r6, r0
    74d6:	e669      	b.n	71ac <__aeabi_dadd+0x108>
    74d8:	0020      	movs	r0, r4
    74da:	4338      	orrs	r0, r7
    74dc:	2e00      	cmp	r6, #0
    74de:	d1d1      	bne.n	7484 <__aeabi_dadd+0x3e0>
    74e0:	2800      	cmp	r0, #0
    74e2:	d15b      	bne.n	759c <__aeabi_dadd+0x4f8>
    74e4:	001c      	movs	r4, r3
    74e6:	4314      	orrs	r4, r2
    74e8:	d100      	bne.n	74ec <__aeabi_dadd+0x448>
    74ea:	e0a8      	b.n	763e <__aeabi_dadd+0x59a>
    74ec:	001c      	movs	r4, r3
    74ee:	0017      	movs	r7, r2
    74f0:	46d8      	mov	r8, fp
    74f2:	e65b      	b.n	71ac <__aeabi_dadd+0x108>
    74f4:	0006      	movs	r6, r0
    74f6:	2400      	movs	r4, #0
    74f8:	2700      	movs	r7, #0
    74fa:	e697      	b.n	722c <__aeabi_dadd+0x188>
    74fc:	4650      	mov	r0, sl
    74fe:	000b      	movs	r3, r1
    7500:	3820      	subs	r0, #32
    7502:	40c3      	lsrs	r3, r0
    7504:	4699      	mov	r9, r3
    7506:	4653      	mov	r3, sl
    7508:	2b20      	cmp	r3, #32
    750a:	d100      	bne.n	750e <__aeabi_dadd+0x46a>
    750c:	e095      	b.n	763a <__aeabi_dadd+0x596>
    750e:	2340      	movs	r3, #64	; 0x40
    7510:	4650      	mov	r0, sl
    7512:	1a1b      	subs	r3, r3, r0
    7514:	4099      	lsls	r1, r3
    7516:	430a      	orrs	r2, r1
    7518:	1e51      	subs	r1, r2, #1
    751a:	418a      	sbcs	r2, r1
    751c:	464b      	mov	r3, r9
    751e:	2100      	movs	r1, #0
    7520:	431a      	orrs	r2, r3
    7522:	e69f      	b.n	7264 <__aeabi_dadd+0x1c0>
    7524:	2e00      	cmp	r6, #0
    7526:	d130      	bne.n	758a <__aeabi_dadd+0x4e6>
    7528:	0026      	movs	r6, r4
    752a:	433e      	orrs	r6, r7
    752c:	d067      	beq.n	75fe <__aeabi_dadd+0x55a>
    752e:	43db      	mvns	r3, r3
    7530:	469a      	mov	sl, r3
    7532:	2b00      	cmp	r3, #0
    7534:	d01c      	beq.n	7570 <__aeabi_dadd+0x4cc>
    7536:	4e61      	ldr	r6, [pc, #388]	; (76bc <__aeabi_dadd+0x618>)
    7538:	42b0      	cmp	r0, r6
    753a:	d060      	beq.n	75fe <__aeabi_dadd+0x55a>
    753c:	4653      	mov	r3, sl
    753e:	2b38      	cmp	r3, #56	; 0x38
    7540:	dd00      	ble.n	7544 <__aeabi_dadd+0x4a0>
    7542:	e096      	b.n	7672 <__aeabi_dadd+0x5ce>
    7544:	2b1f      	cmp	r3, #31
    7546:	dd00      	ble.n	754a <__aeabi_dadd+0x4a6>
    7548:	e09f      	b.n	768a <__aeabi_dadd+0x5e6>
    754a:	2620      	movs	r6, #32
    754c:	1af3      	subs	r3, r6, r3
    754e:	0026      	movs	r6, r4
    7550:	409e      	lsls	r6, r3
    7552:	469c      	mov	ip, r3
    7554:	46b3      	mov	fp, r6
    7556:	4653      	mov	r3, sl
    7558:	003e      	movs	r6, r7
    755a:	40de      	lsrs	r6, r3
    755c:	0033      	movs	r3, r6
    755e:	465e      	mov	r6, fp
    7560:	431e      	orrs	r6, r3
    7562:	4663      	mov	r3, ip
    7564:	409f      	lsls	r7, r3
    7566:	1e7b      	subs	r3, r7, #1
    7568:	419f      	sbcs	r7, r3
    756a:	4653      	mov	r3, sl
    756c:	40dc      	lsrs	r4, r3
    756e:	4337      	orrs	r7, r6
    7570:	18bf      	adds	r7, r7, r2
    7572:	4297      	cmp	r7, r2
    7574:	4192      	sbcs	r2, r2
    7576:	1864      	adds	r4, r4, r1
    7578:	4252      	negs	r2, r2
    757a:	18a4      	adds	r4, r4, r2
    757c:	0006      	movs	r6, r0
    757e:	e678      	b.n	7272 <__aeabi_dadd+0x1ce>
    7580:	4327      	orrs	r7, r4
    7582:	1e7c      	subs	r4, r7, #1
    7584:	41a7      	sbcs	r7, r4
    7586:	2400      	movs	r4, #0
    7588:	e737      	b.n	73fa <__aeabi_dadd+0x356>
    758a:	4e4c      	ldr	r6, [pc, #304]	; (76bc <__aeabi_dadd+0x618>)
    758c:	42b0      	cmp	r0, r6
    758e:	d036      	beq.n	75fe <__aeabi_dadd+0x55a>
    7590:	2680      	movs	r6, #128	; 0x80
    7592:	425b      	negs	r3, r3
    7594:	0436      	lsls	r6, r6, #16
    7596:	469a      	mov	sl, r3
    7598:	4334      	orrs	r4, r6
    759a:	e7cf      	b.n	753c <__aeabi_dadd+0x498>
    759c:	0018      	movs	r0, r3
    759e:	4310      	orrs	r0, r2
    75a0:	d100      	bne.n	75a4 <__aeabi_dadd+0x500>
    75a2:	e603      	b.n	71ac <__aeabi_dadd+0x108>
    75a4:	1ab8      	subs	r0, r7, r2
    75a6:	4684      	mov	ip, r0
    75a8:	4567      	cmp	r7, ip
    75aa:	41ad      	sbcs	r5, r5
    75ac:	1ae0      	subs	r0, r4, r3
    75ae:	426d      	negs	r5, r5
    75b0:	1b40      	subs	r0, r0, r5
    75b2:	0205      	lsls	r5, r0, #8
    75b4:	d400      	bmi.n	75b8 <__aeabi_dadd+0x514>
    75b6:	e62c      	b.n	7212 <__aeabi_dadd+0x16e>
    75b8:	1bd7      	subs	r7, r2, r7
    75ba:	42ba      	cmp	r2, r7
    75bc:	4192      	sbcs	r2, r2
    75be:	1b1c      	subs	r4, r3, r4
    75c0:	4252      	negs	r2, r2
    75c2:	1aa4      	subs	r4, r4, r2
    75c4:	46d8      	mov	r8, fp
    75c6:	e5f1      	b.n	71ac <__aeabi_dadd+0x108>
    75c8:	0018      	movs	r0, r3
    75ca:	4310      	orrs	r0, r2
    75cc:	d100      	bne.n	75d0 <__aeabi_dadd+0x52c>
    75ce:	e763      	b.n	7498 <__aeabi_dadd+0x3f4>
    75d0:	08f8      	lsrs	r0, r7, #3
    75d2:	0767      	lsls	r7, r4, #29
    75d4:	4307      	orrs	r7, r0
    75d6:	2080      	movs	r0, #128	; 0x80
    75d8:	08e4      	lsrs	r4, r4, #3
    75da:	0300      	lsls	r0, r0, #12
    75dc:	4204      	tst	r4, r0
    75de:	d008      	beq.n	75f2 <__aeabi_dadd+0x54e>
    75e0:	08dd      	lsrs	r5, r3, #3
    75e2:	4205      	tst	r5, r0
    75e4:	d105      	bne.n	75f2 <__aeabi_dadd+0x54e>
    75e6:	08d2      	lsrs	r2, r2, #3
    75e8:	0759      	lsls	r1, r3, #29
    75ea:	4311      	orrs	r1, r2
    75ec:	000f      	movs	r7, r1
    75ee:	002c      	movs	r4, r5
    75f0:	46d8      	mov	r8, fp
    75f2:	0f7b      	lsrs	r3, r7, #29
    75f4:	00e4      	lsls	r4, r4, #3
    75f6:	431c      	orrs	r4, r3
    75f8:	00ff      	lsls	r7, r7, #3
    75fa:	4e30      	ldr	r6, [pc, #192]	; (76bc <__aeabi_dadd+0x618>)
    75fc:	e5d6      	b.n	71ac <__aeabi_dadd+0x108>
    75fe:	000c      	movs	r4, r1
    7600:	0017      	movs	r7, r2
    7602:	0006      	movs	r6, r0
    7604:	e5d2      	b.n	71ac <__aeabi_dadd+0x108>
    7606:	2b00      	cmp	r3, #0
    7608:	d038      	beq.n	767c <__aeabi_dadd+0x5d8>
    760a:	000b      	movs	r3, r1
    760c:	4313      	orrs	r3, r2
    760e:	d100      	bne.n	7612 <__aeabi_dadd+0x56e>
    7610:	e742      	b.n	7498 <__aeabi_dadd+0x3f4>
    7612:	08f8      	lsrs	r0, r7, #3
    7614:	0767      	lsls	r7, r4, #29
    7616:	4307      	orrs	r7, r0
    7618:	2080      	movs	r0, #128	; 0x80
    761a:	08e4      	lsrs	r4, r4, #3
    761c:	0300      	lsls	r0, r0, #12
    761e:	4204      	tst	r4, r0
    7620:	d0e7      	beq.n	75f2 <__aeabi_dadd+0x54e>
    7622:	08cb      	lsrs	r3, r1, #3
    7624:	4203      	tst	r3, r0
    7626:	d1e4      	bne.n	75f2 <__aeabi_dadd+0x54e>
    7628:	08d2      	lsrs	r2, r2, #3
    762a:	0749      	lsls	r1, r1, #29
    762c:	4311      	orrs	r1, r2
    762e:	000f      	movs	r7, r1
    7630:	001c      	movs	r4, r3
    7632:	e7de      	b.n	75f2 <__aeabi_dadd+0x54e>
    7634:	2700      	movs	r7, #0
    7636:	2400      	movs	r4, #0
    7638:	e5d5      	b.n	71e6 <__aeabi_dadd+0x142>
    763a:	2100      	movs	r1, #0
    763c:	e76b      	b.n	7516 <__aeabi_dadd+0x472>
    763e:	2500      	movs	r5, #0
    7640:	2700      	movs	r7, #0
    7642:	e5f3      	b.n	722c <__aeabi_dadd+0x188>
    7644:	464e      	mov	r6, r9
    7646:	0025      	movs	r5, r4
    7648:	3e20      	subs	r6, #32
    764a:	40f5      	lsrs	r5, r6
    764c:	464b      	mov	r3, r9
    764e:	002e      	movs	r6, r5
    7650:	2b20      	cmp	r3, #32
    7652:	d02d      	beq.n	76b0 <__aeabi_dadd+0x60c>
    7654:	2540      	movs	r5, #64	; 0x40
    7656:	1aed      	subs	r5, r5, r3
    7658:	40ac      	lsls	r4, r5
    765a:	4327      	orrs	r7, r4
    765c:	1e7c      	subs	r4, r7, #1
    765e:	41a7      	sbcs	r7, r4
    7660:	2400      	movs	r4, #0
    7662:	4337      	orrs	r7, r6
    7664:	e6c9      	b.n	73fa <__aeabi_dadd+0x356>
    7666:	2480      	movs	r4, #128	; 0x80
    7668:	2500      	movs	r5, #0
    766a:	0324      	lsls	r4, r4, #12
    766c:	4e13      	ldr	r6, [pc, #76]	; (76bc <__aeabi_dadd+0x618>)
    766e:	2700      	movs	r7, #0
    7670:	e5dc      	b.n	722c <__aeabi_dadd+0x188>
    7672:	4327      	orrs	r7, r4
    7674:	1e7c      	subs	r4, r7, #1
    7676:	41a7      	sbcs	r7, r4
    7678:	2400      	movs	r4, #0
    767a:	e779      	b.n	7570 <__aeabi_dadd+0x4cc>
    767c:	000c      	movs	r4, r1
    767e:	0017      	movs	r7, r2
    7680:	4e0e      	ldr	r6, [pc, #56]	; (76bc <__aeabi_dadd+0x618>)
    7682:	e593      	b.n	71ac <__aeabi_dadd+0x108>
    7684:	000c      	movs	r4, r1
    7686:	0017      	movs	r7, r2
    7688:	e590      	b.n	71ac <__aeabi_dadd+0x108>
    768a:	4656      	mov	r6, sl
    768c:	0023      	movs	r3, r4
    768e:	3e20      	subs	r6, #32
    7690:	40f3      	lsrs	r3, r6
    7692:	4699      	mov	r9, r3
    7694:	4653      	mov	r3, sl
    7696:	2b20      	cmp	r3, #32
    7698:	d00e      	beq.n	76b8 <__aeabi_dadd+0x614>
    769a:	2340      	movs	r3, #64	; 0x40
    769c:	4656      	mov	r6, sl
    769e:	1b9b      	subs	r3, r3, r6
    76a0:	409c      	lsls	r4, r3
    76a2:	4327      	orrs	r7, r4
    76a4:	1e7c      	subs	r4, r7, #1
    76a6:	41a7      	sbcs	r7, r4
    76a8:	464b      	mov	r3, r9
    76aa:	2400      	movs	r4, #0
    76ac:	431f      	orrs	r7, r3
    76ae:	e75f      	b.n	7570 <__aeabi_dadd+0x4cc>
    76b0:	2400      	movs	r4, #0
    76b2:	e7d2      	b.n	765a <__aeabi_dadd+0x5b6>
    76b4:	0017      	movs	r7, r2
    76b6:	e5b2      	b.n	721e <__aeabi_dadd+0x17a>
    76b8:	2400      	movs	r4, #0
    76ba:	e7f2      	b.n	76a2 <__aeabi_dadd+0x5fe>
    76bc:	000007ff 	.word	0x000007ff
    76c0:	ff7fffff 	.word	0xff7fffff

000076c4 <__aeabi_ddiv>:
    76c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    76c6:	4657      	mov	r7, sl
    76c8:	4645      	mov	r5, r8
    76ca:	46de      	mov	lr, fp
    76cc:	464e      	mov	r6, r9
    76ce:	b5e0      	push	{r5, r6, r7, lr}
    76d0:	004c      	lsls	r4, r1, #1
    76d2:	030e      	lsls	r6, r1, #12
    76d4:	b087      	sub	sp, #28
    76d6:	4683      	mov	fp, r0
    76d8:	4692      	mov	sl, r2
    76da:	001d      	movs	r5, r3
    76dc:	4680      	mov	r8, r0
    76de:	0b36      	lsrs	r6, r6, #12
    76e0:	0d64      	lsrs	r4, r4, #21
    76e2:	0fcf      	lsrs	r7, r1, #31
    76e4:	2c00      	cmp	r4, #0
    76e6:	d04f      	beq.n	7788 <__aeabi_ddiv+0xc4>
    76e8:	4b6f      	ldr	r3, [pc, #444]	; (78a8 <__aeabi_ddiv+0x1e4>)
    76ea:	429c      	cmp	r4, r3
    76ec:	d035      	beq.n	775a <__aeabi_ddiv+0x96>
    76ee:	2380      	movs	r3, #128	; 0x80
    76f0:	0f42      	lsrs	r2, r0, #29
    76f2:	041b      	lsls	r3, r3, #16
    76f4:	00f6      	lsls	r6, r6, #3
    76f6:	4313      	orrs	r3, r2
    76f8:	4333      	orrs	r3, r6
    76fa:	4699      	mov	r9, r3
    76fc:	00c3      	lsls	r3, r0, #3
    76fe:	4698      	mov	r8, r3
    7700:	4b6a      	ldr	r3, [pc, #424]	; (78ac <__aeabi_ddiv+0x1e8>)
    7702:	2600      	movs	r6, #0
    7704:	469c      	mov	ip, r3
    7706:	2300      	movs	r3, #0
    7708:	4464      	add	r4, ip
    770a:	9303      	str	r3, [sp, #12]
    770c:	032b      	lsls	r3, r5, #12
    770e:	0b1b      	lsrs	r3, r3, #12
    7710:	469b      	mov	fp, r3
    7712:	006b      	lsls	r3, r5, #1
    7714:	0fed      	lsrs	r5, r5, #31
    7716:	4650      	mov	r0, sl
    7718:	0d5b      	lsrs	r3, r3, #21
    771a:	9501      	str	r5, [sp, #4]
    771c:	d05e      	beq.n	77dc <__aeabi_ddiv+0x118>
    771e:	4a62      	ldr	r2, [pc, #392]	; (78a8 <__aeabi_ddiv+0x1e4>)
    7720:	4293      	cmp	r3, r2
    7722:	d053      	beq.n	77cc <__aeabi_ddiv+0x108>
    7724:	465a      	mov	r2, fp
    7726:	00d1      	lsls	r1, r2, #3
    7728:	2280      	movs	r2, #128	; 0x80
    772a:	0f40      	lsrs	r0, r0, #29
    772c:	0412      	lsls	r2, r2, #16
    772e:	4302      	orrs	r2, r0
    7730:	430a      	orrs	r2, r1
    7732:	4693      	mov	fp, r2
    7734:	4652      	mov	r2, sl
    7736:	00d1      	lsls	r1, r2, #3
    7738:	4a5c      	ldr	r2, [pc, #368]	; (78ac <__aeabi_ddiv+0x1e8>)
    773a:	4694      	mov	ip, r2
    773c:	2200      	movs	r2, #0
    773e:	4463      	add	r3, ip
    7740:	0038      	movs	r0, r7
    7742:	4068      	eors	r0, r5
    7744:	4684      	mov	ip, r0
    7746:	9002      	str	r0, [sp, #8]
    7748:	1ae4      	subs	r4, r4, r3
    774a:	4316      	orrs	r6, r2
    774c:	2e0f      	cmp	r6, #15
    774e:	d900      	bls.n	7752 <__aeabi_ddiv+0x8e>
    7750:	e0b4      	b.n	78bc <__aeabi_ddiv+0x1f8>
    7752:	4b57      	ldr	r3, [pc, #348]	; (78b0 <__aeabi_ddiv+0x1ec>)
    7754:	00b6      	lsls	r6, r6, #2
    7756:	599b      	ldr	r3, [r3, r6]
    7758:	469f      	mov	pc, r3
    775a:	0003      	movs	r3, r0
    775c:	4333      	orrs	r3, r6
    775e:	4699      	mov	r9, r3
    7760:	d16c      	bne.n	783c <__aeabi_ddiv+0x178>
    7762:	2300      	movs	r3, #0
    7764:	4698      	mov	r8, r3
    7766:	3302      	adds	r3, #2
    7768:	2608      	movs	r6, #8
    776a:	9303      	str	r3, [sp, #12]
    776c:	e7ce      	b.n	770c <__aeabi_ddiv+0x48>
    776e:	46cb      	mov	fp, r9
    7770:	4641      	mov	r1, r8
    7772:	9a03      	ldr	r2, [sp, #12]
    7774:	9701      	str	r7, [sp, #4]
    7776:	2a02      	cmp	r2, #2
    7778:	d165      	bne.n	7846 <__aeabi_ddiv+0x182>
    777a:	9b01      	ldr	r3, [sp, #4]
    777c:	4c4a      	ldr	r4, [pc, #296]	; (78a8 <__aeabi_ddiv+0x1e4>)
    777e:	469c      	mov	ip, r3
    7780:	2300      	movs	r3, #0
    7782:	2200      	movs	r2, #0
    7784:	4698      	mov	r8, r3
    7786:	e06b      	b.n	7860 <__aeabi_ddiv+0x19c>
    7788:	0003      	movs	r3, r0
    778a:	4333      	orrs	r3, r6
    778c:	4699      	mov	r9, r3
    778e:	d04e      	beq.n	782e <__aeabi_ddiv+0x16a>
    7790:	2e00      	cmp	r6, #0
    7792:	d100      	bne.n	7796 <__aeabi_ddiv+0xd2>
    7794:	e1bc      	b.n	7b10 <__aeabi_ddiv+0x44c>
    7796:	0030      	movs	r0, r6
    7798:	f001 fb08 	bl	8dac <__clzsi2>
    779c:	0003      	movs	r3, r0
    779e:	3b0b      	subs	r3, #11
    77a0:	2b1c      	cmp	r3, #28
    77a2:	dd00      	ble.n	77a6 <__aeabi_ddiv+0xe2>
    77a4:	e1ac      	b.n	7b00 <__aeabi_ddiv+0x43c>
    77a6:	221d      	movs	r2, #29
    77a8:	1ad3      	subs	r3, r2, r3
    77aa:	465a      	mov	r2, fp
    77ac:	0001      	movs	r1, r0
    77ae:	40da      	lsrs	r2, r3
    77b0:	3908      	subs	r1, #8
    77b2:	408e      	lsls	r6, r1
    77b4:	0013      	movs	r3, r2
    77b6:	4333      	orrs	r3, r6
    77b8:	4699      	mov	r9, r3
    77ba:	465b      	mov	r3, fp
    77bc:	408b      	lsls	r3, r1
    77be:	4698      	mov	r8, r3
    77c0:	2300      	movs	r3, #0
    77c2:	4c3c      	ldr	r4, [pc, #240]	; (78b4 <__aeabi_ddiv+0x1f0>)
    77c4:	2600      	movs	r6, #0
    77c6:	1a24      	subs	r4, r4, r0
    77c8:	9303      	str	r3, [sp, #12]
    77ca:	e79f      	b.n	770c <__aeabi_ddiv+0x48>
    77cc:	4651      	mov	r1, sl
    77ce:	465a      	mov	r2, fp
    77d0:	4311      	orrs	r1, r2
    77d2:	d129      	bne.n	7828 <__aeabi_ddiv+0x164>
    77d4:	2200      	movs	r2, #0
    77d6:	4693      	mov	fp, r2
    77d8:	3202      	adds	r2, #2
    77da:	e7b1      	b.n	7740 <__aeabi_ddiv+0x7c>
    77dc:	4659      	mov	r1, fp
    77de:	4301      	orrs	r1, r0
    77e0:	d01e      	beq.n	7820 <__aeabi_ddiv+0x15c>
    77e2:	465b      	mov	r3, fp
    77e4:	2b00      	cmp	r3, #0
    77e6:	d100      	bne.n	77ea <__aeabi_ddiv+0x126>
    77e8:	e19e      	b.n	7b28 <__aeabi_ddiv+0x464>
    77ea:	4658      	mov	r0, fp
    77ec:	f001 fade 	bl	8dac <__clzsi2>
    77f0:	0003      	movs	r3, r0
    77f2:	3b0b      	subs	r3, #11
    77f4:	2b1c      	cmp	r3, #28
    77f6:	dd00      	ble.n	77fa <__aeabi_ddiv+0x136>
    77f8:	e18f      	b.n	7b1a <__aeabi_ddiv+0x456>
    77fa:	0002      	movs	r2, r0
    77fc:	4659      	mov	r1, fp
    77fe:	3a08      	subs	r2, #8
    7800:	4091      	lsls	r1, r2
    7802:	468b      	mov	fp, r1
    7804:	211d      	movs	r1, #29
    7806:	1acb      	subs	r3, r1, r3
    7808:	4651      	mov	r1, sl
    780a:	40d9      	lsrs	r1, r3
    780c:	000b      	movs	r3, r1
    780e:	4659      	mov	r1, fp
    7810:	430b      	orrs	r3, r1
    7812:	4651      	mov	r1, sl
    7814:	469b      	mov	fp, r3
    7816:	4091      	lsls	r1, r2
    7818:	4b26      	ldr	r3, [pc, #152]	; (78b4 <__aeabi_ddiv+0x1f0>)
    781a:	2200      	movs	r2, #0
    781c:	1a1b      	subs	r3, r3, r0
    781e:	e78f      	b.n	7740 <__aeabi_ddiv+0x7c>
    7820:	2300      	movs	r3, #0
    7822:	2201      	movs	r2, #1
    7824:	469b      	mov	fp, r3
    7826:	e78b      	b.n	7740 <__aeabi_ddiv+0x7c>
    7828:	4651      	mov	r1, sl
    782a:	2203      	movs	r2, #3
    782c:	e788      	b.n	7740 <__aeabi_ddiv+0x7c>
    782e:	2300      	movs	r3, #0
    7830:	4698      	mov	r8, r3
    7832:	3301      	adds	r3, #1
    7834:	2604      	movs	r6, #4
    7836:	2400      	movs	r4, #0
    7838:	9303      	str	r3, [sp, #12]
    783a:	e767      	b.n	770c <__aeabi_ddiv+0x48>
    783c:	2303      	movs	r3, #3
    783e:	46b1      	mov	r9, r6
    7840:	9303      	str	r3, [sp, #12]
    7842:	260c      	movs	r6, #12
    7844:	e762      	b.n	770c <__aeabi_ddiv+0x48>
    7846:	2a03      	cmp	r2, #3
    7848:	d100      	bne.n	784c <__aeabi_ddiv+0x188>
    784a:	e25c      	b.n	7d06 <__aeabi_ddiv+0x642>
    784c:	9b01      	ldr	r3, [sp, #4]
    784e:	2a01      	cmp	r2, #1
    7850:	d000      	beq.n	7854 <__aeabi_ddiv+0x190>
    7852:	e1e4      	b.n	7c1e <__aeabi_ddiv+0x55a>
    7854:	4013      	ands	r3, r2
    7856:	469c      	mov	ip, r3
    7858:	2300      	movs	r3, #0
    785a:	2400      	movs	r4, #0
    785c:	2200      	movs	r2, #0
    785e:	4698      	mov	r8, r3
    7860:	2100      	movs	r1, #0
    7862:	0312      	lsls	r2, r2, #12
    7864:	0b13      	lsrs	r3, r2, #12
    7866:	0d0a      	lsrs	r2, r1, #20
    7868:	0512      	lsls	r2, r2, #20
    786a:	431a      	orrs	r2, r3
    786c:	0523      	lsls	r3, r4, #20
    786e:	4c12      	ldr	r4, [pc, #72]	; (78b8 <__aeabi_ddiv+0x1f4>)
    7870:	4640      	mov	r0, r8
    7872:	4022      	ands	r2, r4
    7874:	4313      	orrs	r3, r2
    7876:	4662      	mov	r2, ip
    7878:	005b      	lsls	r3, r3, #1
    787a:	07d2      	lsls	r2, r2, #31
    787c:	085b      	lsrs	r3, r3, #1
    787e:	4313      	orrs	r3, r2
    7880:	0019      	movs	r1, r3
    7882:	b007      	add	sp, #28
    7884:	bc3c      	pop	{r2, r3, r4, r5}
    7886:	4690      	mov	r8, r2
    7888:	4699      	mov	r9, r3
    788a:	46a2      	mov	sl, r4
    788c:	46ab      	mov	fp, r5
    788e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7890:	2300      	movs	r3, #0
    7892:	2280      	movs	r2, #128	; 0x80
    7894:	469c      	mov	ip, r3
    7896:	0312      	lsls	r2, r2, #12
    7898:	4698      	mov	r8, r3
    789a:	4c03      	ldr	r4, [pc, #12]	; (78a8 <__aeabi_ddiv+0x1e4>)
    789c:	e7e0      	b.n	7860 <__aeabi_ddiv+0x19c>
    789e:	2300      	movs	r3, #0
    78a0:	4c01      	ldr	r4, [pc, #4]	; (78a8 <__aeabi_ddiv+0x1e4>)
    78a2:	2200      	movs	r2, #0
    78a4:	4698      	mov	r8, r3
    78a6:	e7db      	b.n	7860 <__aeabi_ddiv+0x19c>
    78a8:	000007ff 	.word	0x000007ff
    78ac:	fffffc01 	.word	0xfffffc01
    78b0:	00009248 	.word	0x00009248
    78b4:	fffffc0d 	.word	0xfffffc0d
    78b8:	800fffff 	.word	0x800fffff
    78bc:	45d9      	cmp	r9, fp
    78be:	d900      	bls.n	78c2 <__aeabi_ddiv+0x1fe>
    78c0:	e139      	b.n	7b36 <__aeabi_ddiv+0x472>
    78c2:	d100      	bne.n	78c6 <__aeabi_ddiv+0x202>
    78c4:	e134      	b.n	7b30 <__aeabi_ddiv+0x46c>
    78c6:	2300      	movs	r3, #0
    78c8:	4646      	mov	r6, r8
    78ca:	464d      	mov	r5, r9
    78cc:	469a      	mov	sl, r3
    78ce:	3c01      	subs	r4, #1
    78d0:	465b      	mov	r3, fp
    78d2:	0e0a      	lsrs	r2, r1, #24
    78d4:	021b      	lsls	r3, r3, #8
    78d6:	431a      	orrs	r2, r3
    78d8:	020b      	lsls	r3, r1, #8
    78da:	0c17      	lsrs	r7, r2, #16
    78dc:	9303      	str	r3, [sp, #12]
    78de:	0413      	lsls	r3, r2, #16
    78e0:	0c1b      	lsrs	r3, r3, #16
    78e2:	0039      	movs	r1, r7
    78e4:	0028      	movs	r0, r5
    78e6:	4690      	mov	r8, r2
    78e8:	9301      	str	r3, [sp, #4]
    78ea:	f7fe fab7 	bl	5e5c <__udivsi3>
    78ee:	0002      	movs	r2, r0
    78f0:	9b01      	ldr	r3, [sp, #4]
    78f2:	4683      	mov	fp, r0
    78f4:	435a      	muls	r2, r3
    78f6:	0028      	movs	r0, r5
    78f8:	0039      	movs	r1, r7
    78fa:	4691      	mov	r9, r2
    78fc:	f7fe fb34 	bl	5f68 <__aeabi_uidivmod>
    7900:	0c35      	lsrs	r5, r6, #16
    7902:	0409      	lsls	r1, r1, #16
    7904:	430d      	orrs	r5, r1
    7906:	45a9      	cmp	r9, r5
    7908:	d90d      	bls.n	7926 <__aeabi_ddiv+0x262>
    790a:	465b      	mov	r3, fp
    790c:	4445      	add	r5, r8
    790e:	3b01      	subs	r3, #1
    7910:	45a8      	cmp	r8, r5
    7912:	d900      	bls.n	7916 <__aeabi_ddiv+0x252>
    7914:	e13a      	b.n	7b8c <__aeabi_ddiv+0x4c8>
    7916:	45a9      	cmp	r9, r5
    7918:	d800      	bhi.n	791c <__aeabi_ddiv+0x258>
    791a:	e137      	b.n	7b8c <__aeabi_ddiv+0x4c8>
    791c:	2302      	movs	r3, #2
    791e:	425b      	negs	r3, r3
    7920:	469c      	mov	ip, r3
    7922:	4445      	add	r5, r8
    7924:	44e3      	add	fp, ip
    7926:	464b      	mov	r3, r9
    7928:	1aeb      	subs	r3, r5, r3
    792a:	0039      	movs	r1, r7
    792c:	0018      	movs	r0, r3
    792e:	9304      	str	r3, [sp, #16]
    7930:	f7fe fa94 	bl	5e5c <__udivsi3>
    7934:	9b01      	ldr	r3, [sp, #4]
    7936:	0005      	movs	r5, r0
    7938:	4343      	muls	r3, r0
    793a:	0039      	movs	r1, r7
    793c:	9804      	ldr	r0, [sp, #16]
    793e:	4699      	mov	r9, r3
    7940:	f7fe fb12 	bl	5f68 <__aeabi_uidivmod>
    7944:	0433      	lsls	r3, r6, #16
    7946:	0409      	lsls	r1, r1, #16
    7948:	0c1b      	lsrs	r3, r3, #16
    794a:	430b      	orrs	r3, r1
    794c:	4599      	cmp	r9, r3
    794e:	d909      	bls.n	7964 <__aeabi_ddiv+0x2a0>
    7950:	4443      	add	r3, r8
    7952:	1e6a      	subs	r2, r5, #1
    7954:	4598      	cmp	r8, r3
    7956:	d900      	bls.n	795a <__aeabi_ddiv+0x296>
    7958:	e11a      	b.n	7b90 <__aeabi_ddiv+0x4cc>
    795a:	4599      	cmp	r9, r3
    795c:	d800      	bhi.n	7960 <__aeabi_ddiv+0x29c>
    795e:	e117      	b.n	7b90 <__aeabi_ddiv+0x4cc>
    7960:	3d02      	subs	r5, #2
    7962:	4443      	add	r3, r8
    7964:	464a      	mov	r2, r9
    7966:	1a9b      	subs	r3, r3, r2
    7968:	465a      	mov	r2, fp
    796a:	0412      	lsls	r2, r2, #16
    796c:	432a      	orrs	r2, r5
    796e:	9903      	ldr	r1, [sp, #12]
    7970:	4693      	mov	fp, r2
    7972:	0c10      	lsrs	r0, r2, #16
    7974:	0c0a      	lsrs	r2, r1, #16
    7976:	4691      	mov	r9, r2
    7978:	0409      	lsls	r1, r1, #16
    797a:	465a      	mov	r2, fp
    797c:	0c09      	lsrs	r1, r1, #16
    797e:	464e      	mov	r6, r9
    7980:	000d      	movs	r5, r1
    7982:	0412      	lsls	r2, r2, #16
    7984:	0c12      	lsrs	r2, r2, #16
    7986:	4345      	muls	r5, r0
    7988:	9105      	str	r1, [sp, #20]
    798a:	4351      	muls	r1, r2
    798c:	4372      	muls	r2, r6
    798e:	4370      	muls	r0, r6
    7990:	1952      	adds	r2, r2, r5
    7992:	0c0e      	lsrs	r6, r1, #16
    7994:	18b2      	adds	r2, r6, r2
    7996:	4295      	cmp	r5, r2
    7998:	d903      	bls.n	79a2 <__aeabi_ddiv+0x2de>
    799a:	2580      	movs	r5, #128	; 0x80
    799c:	026d      	lsls	r5, r5, #9
    799e:	46ac      	mov	ip, r5
    79a0:	4460      	add	r0, ip
    79a2:	0c15      	lsrs	r5, r2, #16
    79a4:	0409      	lsls	r1, r1, #16
    79a6:	0412      	lsls	r2, r2, #16
    79a8:	0c09      	lsrs	r1, r1, #16
    79aa:	1828      	adds	r0, r5, r0
    79ac:	1852      	adds	r2, r2, r1
    79ae:	4283      	cmp	r3, r0
    79b0:	d200      	bcs.n	79b4 <__aeabi_ddiv+0x2f0>
    79b2:	e0ce      	b.n	7b52 <__aeabi_ddiv+0x48e>
    79b4:	d100      	bne.n	79b8 <__aeabi_ddiv+0x2f4>
    79b6:	e0c8      	b.n	7b4a <__aeabi_ddiv+0x486>
    79b8:	1a1d      	subs	r5, r3, r0
    79ba:	4653      	mov	r3, sl
    79bc:	1a9e      	subs	r6, r3, r2
    79be:	45b2      	cmp	sl, r6
    79c0:	4192      	sbcs	r2, r2
    79c2:	4252      	negs	r2, r2
    79c4:	1aab      	subs	r3, r5, r2
    79c6:	469a      	mov	sl, r3
    79c8:	4598      	cmp	r8, r3
    79ca:	d100      	bne.n	79ce <__aeabi_ddiv+0x30a>
    79cc:	e117      	b.n	7bfe <__aeabi_ddiv+0x53a>
    79ce:	0039      	movs	r1, r7
    79d0:	0018      	movs	r0, r3
    79d2:	f7fe fa43 	bl	5e5c <__udivsi3>
    79d6:	9b01      	ldr	r3, [sp, #4]
    79d8:	0005      	movs	r5, r0
    79da:	4343      	muls	r3, r0
    79dc:	0039      	movs	r1, r7
    79de:	4650      	mov	r0, sl
    79e0:	9304      	str	r3, [sp, #16]
    79e2:	f7fe fac1 	bl	5f68 <__aeabi_uidivmod>
    79e6:	9804      	ldr	r0, [sp, #16]
    79e8:	040b      	lsls	r3, r1, #16
    79ea:	0c31      	lsrs	r1, r6, #16
    79ec:	4319      	orrs	r1, r3
    79ee:	4288      	cmp	r0, r1
    79f0:	d909      	bls.n	7a06 <__aeabi_ddiv+0x342>
    79f2:	4441      	add	r1, r8
    79f4:	1e6b      	subs	r3, r5, #1
    79f6:	4588      	cmp	r8, r1
    79f8:	d900      	bls.n	79fc <__aeabi_ddiv+0x338>
    79fa:	e107      	b.n	7c0c <__aeabi_ddiv+0x548>
    79fc:	4288      	cmp	r0, r1
    79fe:	d800      	bhi.n	7a02 <__aeabi_ddiv+0x33e>
    7a00:	e104      	b.n	7c0c <__aeabi_ddiv+0x548>
    7a02:	3d02      	subs	r5, #2
    7a04:	4441      	add	r1, r8
    7a06:	9b04      	ldr	r3, [sp, #16]
    7a08:	1acb      	subs	r3, r1, r3
    7a0a:	0018      	movs	r0, r3
    7a0c:	0039      	movs	r1, r7
    7a0e:	9304      	str	r3, [sp, #16]
    7a10:	f7fe fa24 	bl	5e5c <__udivsi3>
    7a14:	9b01      	ldr	r3, [sp, #4]
    7a16:	4682      	mov	sl, r0
    7a18:	4343      	muls	r3, r0
    7a1a:	0039      	movs	r1, r7
    7a1c:	9804      	ldr	r0, [sp, #16]
    7a1e:	9301      	str	r3, [sp, #4]
    7a20:	f7fe faa2 	bl	5f68 <__aeabi_uidivmod>
    7a24:	9801      	ldr	r0, [sp, #4]
    7a26:	040b      	lsls	r3, r1, #16
    7a28:	0431      	lsls	r1, r6, #16
    7a2a:	0c09      	lsrs	r1, r1, #16
    7a2c:	4319      	orrs	r1, r3
    7a2e:	4288      	cmp	r0, r1
    7a30:	d90d      	bls.n	7a4e <__aeabi_ddiv+0x38a>
    7a32:	4653      	mov	r3, sl
    7a34:	4441      	add	r1, r8
    7a36:	3b01      	subs	r3, #1
    7a38:	4588      	cmp	r8, r1
    7a3a:	d900      	bls.n	7a3e <__aeabi_ddiv+0x37a>
    7a3c:	e0e8      	b.n	7c10 <__aeabi_ddiv+0x54c>
    7a3e:	4288      	cmp	r0, r1
    7a40:	d800      	bhi.n	7a44 <__aeabi_ddiv+0x380>
    7a42:	e0e5      	b.n	7c10 <__aeabi_ddiv+0x54c>
    7a44:	2302      	movs	r3, #2
    7a46:	425b      	negs	r3, r3
    7a48:	469c      	mov	ip, r3
    7a4a:	4441      	add	r1, r8
    7a4c:	44e2      	add	sl, ip
    7a4e:	9b01      	ldr	r3, [sp, #4]
    7a50:	042d      	lsls	r5, r5, #16
    7a52:	1ace      	subs	r6, r1, r3
    7a54:	4651      	mov	r1, sl
    7a56:	4329      	orrs	r1, r5
    7a58:	9d05      	ldr	r5, [sp, #20]
    7a5a:	464f      	mov	r7, r9
    7a5c:	002a      	movs	r2, r5
    7a5e:	040b      	lsls	r3, r1, #16
    7a60:	0c08      	lsrs	r0, r1, #16
    7a62:	0c1b      	lsrs	r3, r3, #16
    7a64:	435a      	muls	r2, r3
    7a66:	4345      	muls	r5, r0
    7a68:	437b      	muls	r3, r7
    7a6a:	4378      	muls	r0, r7
    7a6c:	195b      	adds	r3, r3, r5
    7a6e:	0c17      	lsrs	r7, r2, #16
    7a70:	18fb      	adds	r3, r7, r3
    7a72:	429d      	cmp	r5, r3
    7a74:	d903      	bls.n	7a7e <__aeabi_ddiv+0x3ba>
    7a76:	2580      	movs	r5, #128	; 0x80
    7a78:	026d      	lsls	r5, r5, #9
    7a7a:	46ac      	mov	ip, r5
    7a7c:	4460      	add	r0, ip
    7a7e:	0c1d      	lsrs	r5, r3, #16
    7a80:	0412      	lsls	r2, r2, #16
    7a82:	041b      	lsls	r3, r3, #16
    7a84:	0c12      	lsrs	r2, r2, #16
    7a86:	1828      	adds	r0, r5, r0
    7a88:	189b      	adds	r3, r3, r2
    7a8a:	4286      	cmp	r6, r0
    7a8c:	d200      	bcs.n	7a90 <__aeabi_ddiv+0x3cc>
    7a8e:	e093      	b.n	7bb8 <__aeabi_ddiv+0x4f4>
    7a90:	d100      	bne.n	7a94 <__aeabi_ddiv+0x3d0>
    7a92:	e08e      	b.n	7bb2 <__aeabi_ddiv+0x4ee>
    7a94:	2301      	movs	r3, #1
    7a96:	4319      	orrs	r1, r3
    7a98:	4ba0      	ldr	r3, [pc, #640]	; (7d1c <__aeabi_ddiv+0x658>)
    7a9a:	18e3      	adds	r3, r4, r3
    7a9c:	2b00      	cmp	r3, #0
    7a9e:	dc00      	bgt.n	7aa2 <__aeabi_ddiv+0x3de>
    7aa0:	e099      	b.n	7bd6 <__aeabi_ddiv+0x512>
    7aa2:	074a      	lsls	r2, r1, #29
    7aa4:	d000      	beq.n	7aa8 <__aeabi_ddiv+0x3e4>
    7aa6:	e09e      	b.n	7be6 <__aeabi_ddiv+0x522>
    7aa8:	465a      	mov	r2, fp
    7aaa:	01d2      	lsls	r2, r2, #7
    7aac:	d506      	bpl.n	7abc <__aeabi_ddiv+0x3f8>
    7aae:	465a      	mov	r2, fp
    7ab0:	4b9b      	ldr	r3, [pc, #620]	; (7d20 <__aeabi_ddiv+0x65c>)
    7ab2:	401a      	ands	r2, r3
    7ab4:	2380      	movs	r3, #128	; 0x80
    7ab6:	4693      	mov	fp, r2
    7ab8:	00db      	lsls	r3, r3, #3
    7aba:	18e3      	adds	r3, r4, r3
    7abc:	4a99      	ldr	r2, [pc, #612]	; (7d24 <__aeabi_ddiv+0x660>)
    7abe:	4293      	cmp	r3, r2
    7ac0:	dd68      	ble.n	7b94 <__aeabi_ddiv+0x4d0>
    7ac2:	2301      	movs	r3, #1
    7ac4:	9a02      	ldr	r2, [sp, #8]
    7ac6:	4c98      	ldr	r4, [pc, #608]	; (7d28 <__aeabi_ddiv+0x664>)
    7ac8:	401a      	ands	r2, r3
    7aca:	2300      	movs	r3, #0
    7acc:	4694      	mov	ip, r2
    7ace:	4698      	mov	r8, r3
    7ad0:	2200      	movs	r2, #0
    7ad2:	e6c5      	b.n	7860 <__aeabi_ddiv+0x19c>
    7ad4:	2280      	movs	r2, #128	; 0x80
    7ad6:	464b      	mov	r3, r9
    7ad8:	0312      	lsls	r2, r2, #12
    7ada:	4213      	tst	r3, r2
    7adc:	d00a      	beq.n	7af4 <__aeabi_ddiv+0x430>
    7ade:	465b      	mov	r3, fp
    7ae0:	4213      	tst	r3, r2
    7ae2:	d106      	bne.n	7af2 <__aeabi_ddiv+0x42e>
    7ae4:	431a      	orrs	r2, r3
    7ae6:	0312      	lsls	r2, r2, #12
    7ae8:	0b12      	lsrs	r2, r2, #12
    7aea:	46ac      	mov	ip, r5
    7aec:	4688      	mov	r8, r1
    7aee:	4c8e      	ldr	r4, [pc, #568]	; (7d28 <__aeabi_ddiv+0x664>)
    7af0:	e6b6      	b.n	7860 <__aeabi_ddiv+0x19c>
    7af2:	464b      	mov	r3, r9
    7af4:	431a      	orrs	r2, r3
    7af6:	0312      	lsls	r2, r2, #12
    7af8:	0b12      	lsrs	r2, r2, #12
    7afa:	46bc      	mov	ip, r7
    7afc:	4c8a      	ldr	r4, [pc, #552]	; (7d28 <__aeabi_ddiv+0x664>)
    7afe:	e6af      	b.n	7860 <__aeabi_ddiv+0x19c>
    7b00:	0003      	movs	r3, r0
    7b02:	465a      	mov	r2, fp
    7b04:	3b28      	subs	r3, #40	; 0x28
    7b06:	409a      	lsls	r2, r3
    7b08:	2300      	movs	r3, #0
    7b0a:	4691      	mov	r9, r2
    7b0c:	4698      	mov	r8, r3
    7b0e:	e657      	b.n	77c0 <__aeabi_ddiv+0xfc>
    7b10:	4658      	mov	r0, fp
    7b12:	f001 f94b 	bl	8dac <__clzsi2>
    7b16:	3020      	adds	r0, #32
    7b18:	e640      	b.n	779c <__aeabi_ddiv+0xd8>
    7b1a:	0003      	movs	r3, r0
    7b1c:	4652      	mov	r2, sl
    7b1e:	3b28      	subs	r3, #40	; 0x28
    7b20:	409a      	lsls	r2, r3
    7b22:	2100      	movs	r1, #0
    7b24:	4693      	mov	fp, r2
    7b26:	e677      	b.n	7818 <__aeabi_ddiv+0x154>
    7b28:	f001 f940 	bl	8dac <__clzsi2>
    7b2c:	3020      	adds	r0, #32
    7b2e:	e65f      	b.n	77f0 <__aeabi_ddiv+0x12c>
    7b30:	4588      	cmp	r8, r1
    7b32:	d200      	bcs.n	7b36 <__aeabi_ddiv+0x472>
    7b34:	e6c7      	b.n	78c6 <__aeabi_ddiv+0x202>
    7b36:	464b      	mov	r3, r9
    7b38:	07de      	lsls	r6, r3, #31
    7b3a:	085d      	lsrs	r5, r3, #1
    7b3c:	4643      	mov	r3, r8
    7b3e:	085b      	lsrs	r3, r3, #1
    7b40:	431e      	orrs	r6, r3
    7b42:	4643      	mov	r3, r8
    7b44:	07db      	lsls	r3, r3, #31
    7b46:	469a      	mov	sl, r3
    7b48:	e6c2      	b.n	78d0 <__aeabi_ddiv+0x20c>
    7b4a:	2500      	movs	r5, #0
    7b4c:	4592      	cmp	sl, r2
    7b4e:	d300      	bcc.n	7b52 <__aeabi_ddiv+0x48e>
    7b50:	e733      	b.n	79ba <__aeabi_ddiv+0x2f6>
    7b52:	9e03      	ldr	r6, [sp, #12]
    7b54:	4659      	mov	r1, fp
    7b56:	46b4      	mov	ip, r6
    7b58:	44e2      	add	sl, ip
    7b5a:	45b2      	cmp	sl, r6
    7b5c:	41ad      	sbcs	r5, r5
    7b5e:	426d      	negs	r5, r5
    7b60:	4445      	add	r5, r8
    7b62:	18eb      	adds	r3, r5, r3
    7b64:	3901      	subs	r1, #1
    7b66:	4598      	cmp	r8, r3
    7b68:	d207      	bcs.n	7b7a <__aeabi_ddiv+0x4b6>
    7b6a:	4298      	cmp	r0, r3
    7b6c:	d900      	bls.n	7b70 <__aeabi_ddiv+0x4ac>
    7b6e:	e07f      	b.n	7c70 <__aeabi_ddiv+0x5ac>
    7b70:	d100      	bne.n	7b74 <__aeabi_ddiv+0x4b0>
    7b72:	e0bc      	b.n	7cee <__aeabi_ddiv+0x62a>
    7b74:	1a1d      	subs	r5, r3, r0
    7b76:	468b      	mov	fp, r1
    7b78:	e71f      	b.n	79ba <__aeabi_ddiv+0x2f6>
    7b7a:	4598      	cmp	r8, r3
    7b7c:	d1fa      	bne.n	7b74 <__aeabi_ddiv+0x4b0>
    7b7e:	9d03      	ldr	r5, [sp, #12]
    7b80:	4555      	cmp	r5, sl
    7b82:	d9f2      	bls.n	7b6a <__aeabi_ddiv+0x4a6>
    7b84:	4643      	mov	r3, r8
    7b86:	468b      	mov	fp, r1
    7b88:	1a1d      	subs	r5, r3, r0
    7b8a:	e716      	b.n	79ba <__aeabi_ddiv+0x2f6>
    7b8c:	469b      	mov	fp, r3
    7b8e:	e6ca      	b.n	7926 <__aeabi_ddiv+0x262>
    7b90:	0015      	movs	r5, r2
    7b92:	e6e7      	b.n	7964 <__aeabi_ddiv+0x2a0>
    7b94:	465a      	mov	r2, fp
    7b96:	08c9      	lsrs	r1, r1, #3
    7b98:	0752      	lsls	r2, r2, #29
    7b9a:	430a      	orrs	r2, r1
    7b9c:	055b      	lsls	r3, r3, #21
    7b9e:	4690      	mov	r8, r2
    7ba0:	0d5c      	lsrs	r4, r3, #21
    7ba2:	465a      	mov	r2, fp
    7ba4:	2301      	movs	r3, #1
    7ba6:	9902      	ldr	r1, [sp, #8]
    7ba8:	0252      	lsls	r2, r2, #9
    7baa:	4019      	ands	r1, r3
    7bac:	0b12      	lsrs	r2, r2, #12
    7bae:	468c      	mov	ip, r1
    7bb0:	e656      	b.n	7860 <__aeabi_ddiv+0x19c>
    7bb2:	2b00      	cmp	r3, #0
    7bb4:	d100      	bne.n	7bb8 <__aeabi_ddiv+0x4f4>
    7bb6:	e76f      	b.n	7a98 <__aeabi_ddiv+0x3d4>
    7bb8:	4446      	add	r6, r8
    7bba:	1e4a      	subs	r2, r1, #1
    7bbc:	45b0      	cmp	r8, r6
    7bbe:	d929      	bls.n	7c14 <__aeabi_ddiv+0x550>
    7bc0:	0011      	movs	r1, r2
    7bc2:	4286      	cmp	r6, r0
    7bc4:	d000      	beq.n	7bc8 <__aeabi_ddiv+0x504>
    7bc6:	e765      	b.n	7a94 <__aeabi_ddiv+0x3d0>
    7bc8:	9a03      	ldr	r2, [sp, #12]
    7bca:	4293      	cmp	r3, r2
    7bcc:	d000      	beq.n	7bd0 <__aeabi_ddiv+0x50c>
    7bce:	e761      	b.n	7a94 <__aeabi_ddiv+0x3d0>
    7bd0:	e762      	b.n	7a98 <__aeabi_ddiv+0x3d4>
    7bd2:	2101      	movs	r1, #1
    7bd4:	4249      	negs	r1, r1
    7bd6:	2001      	movs	r0, #1
    7bd8:	1ac2      	subs	r2, r0, r3
    7bda:	2a38      	cmp	r2, #56	; 0x38
    7bdc:	dd21      	ble.n	7c22 <__aeabi_ddiv+0x55e>
    7bde:	9b02      	ldr	r3, [sp, #8]
    7be0:	4003      	ands	r3, r0
    7be2:	469c      	mov	ip, r3
    7be4:	e638      	b.n	7858 <__aeabi_ddiv+0x194>
    7be6:	220f      	movs	r2, #15
    7be8:	400a      	ands	r2, r1
    7bea:	2a04      	cmp	r2, #4
    7bec:	d100      	bne.n	7bf0 <__aeabi_ddiv+0x52c>
    7bee:	e75b      	b.n	7aa8 <__aeabi_ddiv+0x3e4>
    7bf0:	000a      	movs	r2, r1
    7bf2:	1d11      	adds	r1, r2, #4
    7bf4:	4291      	cmp	r1, r2
    7bf6:	4192      	sbcs	r2, r2
    7bf8:	4252      	negs	r2, r2
    7bfa:	4493      	add	fp, r2
    7bfc:	e754      	b.n	7aa8 <__aeabi_ddiv+0x3e4>
    7bfe:	4b47      	ldr	r3, [pc, #284]	; (7d1c <__aeabi_ddiv+0x658>)
    7c00:	18e3      	adds	r3, r4, r3
    7c02:	2b00      	cmp	r3, #0
    7c04:	dde5      	ble.n	7bd2 <__aeabi_ddiv+0x50e>
    7c06:	2201      	movs	r2, #1
    7c08:	4252      	negs	r2, r2
    7c0a:	e7f2      	b.n	7bf2 <__aeabi_ddiv+0x52e>
    7c0c:	001d      	movs	r5, r3
    7c0e:	e6fa      	b.n	7a06 <__aeabi_ddiv+0x342>
    7c10:	469a      	mov	sl, r3
    7c12:	e71c      	b.n	7a4e <__aeabi_ddiv+0x38a>
    7c14:	42b0      	cmp	r0, r6
    7c16:	d839      	bhi.n	7c8c <__aeabi_ddiv+0x5c8>
    7c18:	d06e      	beq.n	7cf8 <__aeabi_ddiv+0x634>
    7c1a:	0011      	movs	r1, r2
    7c1c:	e73a      	b.n	7a94 <__aeabi_ddiv+0x3d0>
    7c1e:	9302      	str	r3, [sp, #8]
    7c20:	e73a      	b.n	7a98 <__aeabi_ddiv+0x3d4>
    7c22:	2a1f      	cmp	r2, #31
    7c24:	dc3c      	bgt.n	7ca0 <__aeabi_ddiv+0x5dc>
    7c26:	2320      	movs	r3, #32
    7c28:	1a9b      	subs	r3, r3, r2
    7c2a:	000c      	movs	r4, r1
    7c2c:	4658      	mov	r0, fp
    7c2e:	4099      	lsls	r1, r3
    7c30:	4098      	lsls	r0, r3
    7c32:	1e4b      	subs	r3, r1, #1
    7c34:	4199      	sbcs	r1, r3
    7c36:	465b      	mov	r3, fp
    7c38:	40d4      	lsrs	r4, r2
    7c3a:	40d3      	lsrs	r3, r2
    7c3c:	4320      	orrs	r0, r4
    7c3e:	4308      	orrs	r0, r1
    7c40:	001a      	movs	r2, r3
    7c42:	0743      	lsls	r3, r0, #29
    7c44:	d009      	beq.n	7c5a <__aeabi_ddiv+0x596>
    7c46:	230f      	movs	r3, #15
    7c48:	4003      	ands	r3, r0
    7c4a:	2b04      	cmp	r3, #4
    7c4c:	d005      	beq.n	7c5a <__aeabi_ddiv+0x596>
    7c4e:	0001      	movs	r1, r0
    7c50:	1d08      	adds	r0, r1, #4
    7c52:	4288      	cmp	r0, r1
    7c54:	419b      	sbcs	r3, r3
    7c56:	425b      	negs	r3, r3
    7c58:	18d2      	adds	r2, r2, r3
    7c5a:	0213      	lsls	r3, r2, #8
    7c5c:	d53a      	bpl.n	7cd4 <__aeabi_ddiv+0x610>
    7c5e:	2301      	movs	r3, #1
    7c60:	9a02      	ldr	r2, [sp, #8]
    7c62:	2401      	movs	r4, #1
    7c64:	401a      	ands	r2, r3
    7c66:	2300      	movs	r3, #0
    7c68:	4694      	mov	ip, r2
    7c6a:	4698      	mov	r8, r3
    7c6c:	2200      	movs	r2, #0
    7c6e:	e5f7      	b.n	7860 <__aeabi_ddiv+0x19c>
    7c70:	2102      	movs	r1, #2
    7c72:	4249      	negs	r1, r1
    7c74:	468c      	mov	ip, r1
    7c76:	9d03      	ldr	r5, [sp, #12]
    7c78:	44e3      	add	fp, ip
    7c7a:	46ac      	mov	ip, r5
    7c7c:	44e2      	add	sl, ip
    7c7e:	45aa      	cmp	sl, r5
    7c80:	41ad      	sbcs	r5, r5
    7c82:	426d      	negs	r5, r5
    7c84:	4445      	add	r5, r8
    7c86:	18ed      	adds	r5, r5, r3
    7c88:	1a2d      	subs	r5, r5, r0
    7c8a:	e696      	b.n	79ba <__aeabi_ddiv+0x2f6>
    7c8c:	1e8a      	subs	r2, r1, #2
    7c8e:	9903      	ldr	r1, [sp, #12]
    7c90:	004d      	lsls	r5, r1, #1
    7c92:	428d      	cmp	r5, r1
    7c94:	4189      	sbcs	r1, r1
    7c96:	4249      	negs	r1, r1
    7c98:	4441      	add	r1, r8
    7c9a:	1876      	adds	r6, r6, r1
    7c9c:	9503      	str	r5, [sp, #12]
    7c9e:	e78f      	b.n	7bc0 <__aeabi_ddiv+0x4fc>
    7ca0:	201f      	movs	r0, #31
    7ca2:	4240      	negs	r0, r0
    7ca4:	1ac3      	subs	r3, r0, r3
    7ca6:	4658      	mov	r0, fp
    7ca8:	40d8      	lsrs	r0, r3
    7caa:	0003      	movs	r3, r0
    7cac:	2a20      	cmp	r2, #32
    7cae:	d028      	beq.n	7d02 <__aeabi_ddiv+0x63e>
    7cb0:	2040      	movs	r0, #64	; 0x40
    7cb2:	465d      	mov	r5, fp
    7cb4:	1a82      	subs	r2, r0, r2
    7cb6:	4095      	lsls	r5, r2
    7cb8:	4329      	orrs	r1, r5
    7cba:	1e4a      	subs	r2, r1, #1
    7cbc:	4191      	sbcs	r1, r2
    7cbe:	4319      	orrs	r1, r3
    7cc0:	2307      	movs	r3, #7
    7cc2:	2200      	movs	r2, #0
    7cc4:	400b      	ands	r3, r1
    7cc6:	d009      	beq.n	7cdc <__aeabi_ddiv+0x618>
    7cc8:	230f      	movs	r3, #15
    7cca:	2200      	movs	r2, #0
    7ccc:	400b      	ands	r3, r1
    7cce:	0008      	movs	r0, r1
    7cd0:	2b04      	cmp	r3, #4
    7cd2:	d1bd      	bne.n	7c50 <__aeabi_ddiv+0x58c>
    7cd4:	0001      	movs	r1, r0
    7cd6:	0753      	lsls	r3, r2, #29
    7cd8:	0252      	lsls	r2, r2, #9
    7cda:	0b12      	lsrs	r2, r2, #12
    7cdc:	08c9      	lsrs	r1, r1, #3
    7cde:	4319      	orrs	r1, r3
    7ce0:	2301      	movs	r3, #1
    7ce2:	4688      	mov	r8, r1
    7ce4:	9902      	ldr	r1, [sp, #8]
    7ce6:	2400      	movs	r4, #0
    7ce8:	4019      	ands	r1, r3
    7cea:	468c      	mov	ip, r1
    7cec:	e5b8      	b.n	7860 <__aeabi_ddiv+0x19c>
    7cee:	4552      	cmp	r2, sl
    7cf0:	d8be      	bhi.n	7c70 <__aeabi_ddiv+0x5ac>
    7cf2:	468b      	mov	fp, r1
    7cf4:	2500      	movs	r5, #0
    7cf6:	e660      	b.n	79ba <__aeabi_ddiv+0x2f6>
    7cf8:	9d03      	ldr	r5, [sp, #12]
    7cfa:	429d      	cmp	r5, r3
    7cfc:	d3c6      	bcc.n	7c8c <__aeabi_ddiv+0x5c8>
    7cfe:	0011      	movs	r1, r2
    7d00:	e762      	b.n	7bc8 <__aeabi_ddiv+0x504>
    7d02:	2500      	movs	r5, #0
    7d04:	e7d8      	b.n	7cb8 <__aeabi_ddiv+0x5f4>
    7d06:	2280      	movs	r2, #128	; 0x80
    7d08:	465b      	mov	r3, fp
    7d0a:	0312      	lsls	r2, r2, #12
    7d0c:	431a      	orrs	r2, r3
    7d0e:	9b01      	ldr	r3, [sp, #4]
    7d10:	0312      	lsls	r2, r2, #12
    7d12:	0b12      	lsrs	r2, r2, #12
    7d14:	469c      	mov	ip, r3
    7d16:	4688      	mov	r8, r1
    7d18:	4c03      	ldr	r4, [pc, #12]	; (7d28 <__aeabi_ddiv+0x664>)
    7d1a:	e5a1      	b.n	7860 <__aeabi_ddiv+0x19c>
    7d1c:	000003ff 	.word	0x000003ff
    7d20:	feffffff 	.word	0xfeffffff
    7d24:	000007fe 	.word	0x000007fe
    7d28:	000007ff 	.word	0x000007ff

00007d2c <__eqdf2>:
    7d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d2e:	464f      	mov	r7, r9
    7d30:	4646      	mov	r6, r8
    7d32:	46d6      	mov	lr, sl
    7d34:	005c      	lsls	r4, r3, #1
    7d36:	b5c0      	push	{r6, r7, lr}
    7d38:	031f      	lsls	r7, r3, #12
    7d3a:	0fdb      	lsrs	r3, r3, #31
    7d3c:	469a      	mov	sl, r3
    7d3e:	4b17      	ldr	r3, [pc, #92]	; (7d9c <__eqdf2+0x70>)
    7d40:	030e      	lsls	r6, r1, #12
    7d42:	004d      	lsls	r5, r1, #1
    7d44:	4684      	mov	ip, r0
    7d46:	4680      	mov	r8, r0
    7d48:	0b36      	lsrs	r6, r6, #12
    7d4a:	0d6d      	lsrs	r5, r5, #21
    7d4c:	0fc9      	lsrs	r1, r1, #31
    7d4e:	4691      	mov	r9, r2
    7d50:	0b3f      	lsrs	r7, r7, #12
    7d52:	0d64      	lsrs	r4, r4, #21
    7d54:	2001      	movs	r0, #1
    7d56:	429d      	cmp	r5, r3
    7d58:	d008      	beq.n	7d6c <__eqdf2+0x40>
    7d5a:	429c      	cmp	r4, r3
    7d5c:	d001      	beq.n	7d62 <__eqdf2+0x36>
    7d5e:	42a5      	cmp	r5, r4
    7d60:	d00b      	beq.n	7d7a <__eqdf2+0x4e>
    7d62:	bc1c      	pop	{r2, r3, r4}
    7d64:	4690      	mov	r8, r2
    7d66:	4699      	mov	r9, r3
    7d68:	46a2      	mov	sl, r4
    7d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7d6c:	4663      	mov	r3, ip
    7d6e:	4333      	orrs	r3, r6
    7d70:	d1f7      	bne.n	7d62 <__eqdf2+0x36>
    7d72:	42ac      	cmp	r4, r5
    7d74:	d1f5      	bne.n	7d62 <__eqdf2+0x36>
    7d76:	433a      	orrs	r2, r7
    7d78:	d1f3      	bne.n	7d62 <__eqdf2+0x36>
    7d7a:	2001      	movs	r0, #1
    7d7c:	42be      	cmp	r6, r7
    7d7e:	d1f0      	bne.n	7d62 <__eqdf2+0x36>
    7d80:	45c8      	cmp	r8, r9
    7d82:	d1ee      	bne.n	7d62 <__eqdf2+0x36>
    7d84:	4551      	cmp	r1, sl
    7d86:	d007      	beq.n	7d98 <__eqdf2+0x6c>
    7d88:	2d00      	cmp	r5, #0
    7d8a:	d1ea      	bne.n	7d62 <__eqdf2+0x36>
    7d8c:	4663      	mov	r3, ip
    7d8e:	431e      	orrs	r6, r3
    7d90:	0030      	movs	r0, r6
    7d92:	1e46      	subs	r6, r0, #1
    7d94:	41b0      	sbcs	r0, r6
    7d96:	e7e4      	b.n	7d62 <__eqdf2+0x36>
    7d98:	2000      	movs	r0, #0
    7d9a:	e7e2      	b.n	7d62 <__eqdf2+0x36>
    7d9c:	000007ff 	.word	0x000007ff

00007da0 <__gedf2>:
    7da0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7da2:	4645      	mov	r5, r8
    7da4:	46de      	mov	lr, fp
    7da6:	4657      	mov	r7, sl
    7da8:	464e      	mov	r6, r9
    7daa:	b5e0      	push	{r5, r6, r7, lr}
    7dac:	031f      	lsls	r7, r3, #12
    7dae:	0b3d      	lsrs	r5, r7, #12
    7db0:	4f2c      	ldr	r7, [pc, #176]	; (7e64 <__gedf2+0xc4>)
    7db2:	030e      	lsls	r6, r1, #12
    7db4:	004c      	lsls	r4, r1, #1
    7db6:	46ab      	mov	fp, r5
    7db8:	005d      	lsls	r5, r3, #1
    7dba:	4684      	mov	ip, r0
    7dbc:	0b36      	lsrs	r6, r6, #12
    7dbe:	0d64      	lsrs	r4, r4, #21
    7dc0:	0fc9      	lsrs	r1, r1, #31
    7dc2:	4690      	mov	r8, r2
    7dc4:	0d6d      	lsrs	r5, r5, #21
    7dc6:	0fdb      	lsrs	r3, r3, #31
    7dc8:	42bc      	cmp	r4, r7
    7dca:	d02a      	beq.n	7e22 <__gedf2+0x82>
    7dcc:	4f25      	ldr	r7, [pc, #148]	; (7e64 <__gedf2+0xc4>)
    7dce:	42bd      	cmp	r5, r7
    7dd0:	d02d      	beq.n	7e2e <__gedf2+0x8e>
    7dd2:	2c00      	cmp	r4, #0
    7dd4:	d10f      	bne.n	7df6 <__gedf2+0x56>
    7dd6:	4330      	orrs	r0, r6
    7dd8:	0007      	movs	r7, r0
    7dda:	4681      	mov	r9, r0
    7ddc:	4278      	negs	r0, r7
    7dde:	4178      	adcs	r0, r7
    7de0:	b2c0      	uxtb	r0, r0
    7de2:	2d00      	cmp	r5, #0
    7de4:	d117      	bne.n	7e16 <__gedf2+0x76>
    7de6:	465f      	mov	r7, fp
    7de8:	433a      	orrs	r2, r7
    7dea:	d114      	bne.n	7e16 <__gedf2+0x76>
    7dec:	464b      	mov	r3, r9
    7dee:	2000      	movs	r0, #0
    7df0:	2b00      	cmp	r3, #0
    7df2:	d00a      	beq.n	7e0a <__gedf2+0x6a>
    7df4:	e006      	b.n	7e04 <__gedf2+0x64>
    7df6:	2d00      	cmp	r5, #0
    7df8:	d102      	bne.n	7e00 <__gedf2+0x60>
    7dfa:	4658      	mov	r0, fp
    7dfc:	4302      	orrs	r2, r0
    7dfe:	d001      	beq.n	7e04 <__gedf2+0x64>
    7e00:	4299      	cmp	r1, r3
    7e02:	d018      	beq.n	7e36 <__gedf2+0x96>
    7e04:	4248      	negs	r0, r1
    7e06:	2101      	movs	r1, #1
    7e08:	4308      	orrs	r0, r1
    7e0a:	bc3c      	pop	{r2, r3, r4, r5}
    7e0c:	4690      	mov	r8, r2
    7e0e:	4699      	mov	r9, r3
    7e10:	46a2      	mov	sl, r4
    7e12:	46ab      	mov	fp, r5
    7e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e16:	2800      	cmp	r0, #0
    7e18:	d0f2      	beq.n	7e00 <__gedf2+0x60>
    7e1a:	2001      	movs	r0, #1
    7e1c:	3b01      	subs	r3, #1
    7e1e:	4318      	orrs	r0, r3
    7e20:	e7f3      	b.n	7e0a <__gedf2+0x6a>
    7e22:	0037      	movs	r7, r6
    7e24:	4307      	orrs	r7, r0
    7e26:	d0d1      	beq.n	7dcc <__gedf2+0x2c>
    7e28:	2002      	movs	r0, #2
    7e2a:	4240      	negs	r0, r0
    7e2c:	e7ed      	b.n	7e0a <__gedf2+0x6a>
    7e2e:	465f      	mov	r7, fp
    7e30:	4317      	orrs	r7, r2
    7e32:	d0ce      	beq.n	7dd2 <__gedf2+0x32>
    7e34:	e7f8      	b.n	7e28 <__gedf2+0x88>
    7e36:	42ac      	cmp	r4, r5
    7e38:	dce4      	bgt.n	7e04 <__gedf2+0x64>
    7e3a:	da03      	bge.n	7e44 <__gedf2+0xa4>
    7e3c:	1e48      	subs	r0, r1, #1
    7e3e:	2101      	movs	r1, #1
    7e40:	4308      	orrs	r0, r1
    7e42:	e7e2      	b.n	7e0a <__gedf2+0x6a>
    7e44:	455e      	cmp	r6, fp
    7e46:	d8dd      	bhi.n	7e04 <__gedf2+0x64>
    7e48:	d006      	beq.n	7e58 <__gedf2+0xb8>
    7e4a:	2000      	movs	r0, #0
    7e4c:	455e      	cmp	r6, fp
    7e4e:	d2dc      	bcs.n	7e0a <__gedf2+0x6a>
    7e50:	2301      	movs	r3, #1
    7e52:	1e48      	subs	r0, r1, #1
    7e54:	4318      	orrs	r0, r3
    7e56:	e7d8      	b.n	7e0a <__gedf2+0x6a>
    7e58:	45c4      	cmp	ip, r8
    7e5a:	d8d3      	bhi.n	7e04 <__gedf2+0x64>
    7e5c:	2000      	movs	r0, #0
    7e5e:	45c4      	cmp	ip, r8
    7e60:	d3f6      	bcc.n	7e50 <__gedf2+0xb0>
    7e62:	e7d2      	b.n	7e0a <__gedf2+0x6a>
    7e64:	000007ff 	.word	0x000007ff

00007e68 <__ledf2>:
    7e68:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e6a:	464e      	mov	r6, r9
    7e6c:	4645      	mov	r5, r8
    7e6e:	46de      	mov	lr, fp
    7e70:	4657      	mov	r7, sl
    7e72:	005c      	lsls	r4, r3, #1
    7e74:	b5e0      	push	{r5, r6, r7, lr}
    7e76:	031f      	lsls	r7, r3, #12
    7e78:	0fdb      	lsrs	r3, r3, #31
    7e7a:	4699      	mov	r9, r3
    7e7c:	4b2a      	ldr	r3, [pc, #168]	; (7f28 <__ledf2+0xc0>)
    7e7e:	030e      	lsls	r6, r1, #12
    7e80:	004d      	lsls	r5, r1, #1
    7e82:	0fc9      	lsrs	r1, r1, #31
    7e84:	4684      	mov	ip, r0
    7e86:	0b36      	lsrs	r6, r6, #12
    7e88:	0d6d      	lsrs	r5, r5, #21
    7e8a:	468b      	mov	fp, r1
    7e8c:	4690      	mov	r8, r2
    7e8e:	0b3f      	lsrs	r7, r7, #12
    7e90:	0d64      	lsrs	r4, r4, #21
    7e92:	429d      	cmp	r5, r3
    7e94:	d020      	beq.n	7ed8 <__ledf2+0x70>
    7e96:	4b24      	ldr	r3, [pc, #144]	; (7f28 <__ledf2+0xc0>)
    7e98:	429c      	cmp	r4, r3
    7e9a:	d022      	beq.n	7ee2 <__ledf2+0x7a>
    7e9c:	2d00      	cmp	r5, #0
    7e9e:	d112      	bne.n	7ec6 <__ledf2+0x5e>
    7ea0:	4330      	orrs	r0, r6
    7ea2:	4243      	negs	r3, r0
    7ea4:	4143      	adcs	r3, r0
    7ea6:	b2db      	uxtb	r3, r3
    7ea8:	2c00      	cmp	r4, #0
    7eaa:	d01f      	beq.n	7eec <__ledf2+0x84>
    7eac:	2b00      	cmp	r3, #0
    7eae:	d00c      	beq.n	7eca <__ledf2+0x62>
    7eb0:	464b      	mov	r3, r9
    7eb2:	2001      	movs	r0, #1
    7eb4:	3b01      	subs	r3, #1
    7eb6:	4303      	orrs	r3, r0
    7eb8:	0018      	movs	r0, r3
    7eba:	bc3c      	pop	{r2, r3, r4, r5}
    7ebc:	4690      	mov	r8, r2
    7ebe:	4699      	mov	r9, r3
    7ec0:	46a2      	mov	sl, r4
    7ec2:	46ab      	mov	fp, r5
    7ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ec6:	2c00      	cmp	r4, #0
    7ec8:	d016      	beq.n	7ef8 <__ledf2+0x90>
    7eca:	45cb      	cmp	fp, r9
    7ecc:	d017      	beq.n	7efe <__ledf2+0x96>
    7ece:	465b      	mov	r3, fp
    7ed0:	4259      	negs	r1, r3
    7ed2:	2301      	movs	r3, #1
    7ed4:	430b      	orrs	r3, r1
    7ed6:	e7ef      	b.n	7eb8 <__ledf2+0x50>
    7ed8:	0031      	movs	r1, r6
    7eda:	2302      	movs	r3, #2
    7edc:	4301      	orrs	r1, r0
    7ede:	d1eb      	bne.n	7eb8 <__ledf2+0x50>
    7ee0:	e7d9      	b.n	7e96 <__ledf2+0x2e>
    7ee2:	0039      	movs	r1, r7
    7ee4:	2302      	movs	r3, #2
    7ee6:	4311      	orrs	r1, r2
    7ee8:	d1e6      	bne.n	7eb8 <__ledf2+0x50>
    7eea:	e7d7      	b.n	7e9c <__ledf2+0x34>
    7eec:	433a      	orrs	r2, r7
    7eee:	d1dd      	bne.n	7eac <__ledf2+0x44>
    7ef0:	2300      	movs	r3, #0
    7ef2:	2800      	cmp	r0, #0
    7ef4:	d0e0      	beq.n	7eb8 <__ledf2+0x50>
    7ef6:	e7ea      	b.n	7ece <__ledf2+0x66>
    7ef8:	433a      	orrs	r2, r7
    7efa:	d1e6      	bne.n	7eca <__ledf2+0x62>
    7efc:	e7e7      	b.n	7ece <__ledf2+0x66>
    7efe:	42a5      	cmp	r5, r4
    7f00:	dce5      	bgt.n	7ece <__ledf2+0x66>
    7f02:	db05      	blt.n	7f10 <__ledf2+0xa8>
    7f04:	42be      	cmp	r6, r7
    7f06:	d8e2      	bhi.n	7ece <__ledf2+0x66>
    7f08:	d007      	beq.n	7f1a <__ledf2+0xb2>
    7f0a:	2300      	movs	r3, #0
    7f0c:	42be      	cmp	r6, r7
    7f0e:	d2d3      	bcs.n	7eb8 <__ledf2+0x50>
    7f10:	4659      	mov	r1, fp
    7f12:	2301      	movs	r3, #1
    7f14:	3901      	subs	r1, #1
    7f16:	430b      	orrs	r3, r1
    7f18:	e7ce      	b.n	7eb8 <__ledf2+0x50>
    7f1a:	45c4      	cmp	ip, r8
    7f1c:	d8d7      	bhi.n	7ece <__ledf2+0x66>
    7f1e:	2300      	movs	r3, #0
    7f20:	45c4      	cmp	ip, r8
    7f22:	d3f5      	bcc.n	7f10 <__ledf2+0xa8>
    7f24:	e7c8      	b.n	7eb8 <__ledf2+0x50>
    7f26:	46c0      	nop			; (mov r8, r8)
    7f28:	000007ff 	.word	0x000007ff

00007f2c <__aeabi_dmul>:
    7f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f2e:	4657      	mov	r7, sl
    7f30:	4645      	mov	r5, r8
    7f32:	46de      	mov	lr, fp
    7f34:	464e      	mov	r6, r9
    7f36:	b5e0      	push	{r5, r6, r7, lr}
    7f38:	030c      	lsls	r4, r1, #12
    7f3a:	4698      	mov	r8, r3
    7f3c:	004e      	lsls	r6, r1, #1
    7f3e:	0b23      	lsrs	r3, r4, #12
    7f40:	b087      	sub	sp, #28
    7f42:	0007      	movs	r7, r0
    7f44:	4692      	mov	sl, r2
    7f46:	469b      	mov	fp, r3
    7f48:	0d76      	lsrs	r6, r6, #21
    7f4a:	0fcd      	lsrs	r5, r1, #31
    7f4c:	2e00      	cmp	r6, #0
    7f4e:	d06b      	beq.n	8028 <__aeabi_dmul+0xfc>
    7f50:	4b6d      	ldr	r3, [pc, #436]	; (8108 <__aeabi_dmul+0x1dc>)
    7f52:	429e      	cmp	r6, r3
    7f54:	d035      	beq.n	7fc2 <__aeabi_dmul+0x96>
    7f56:	2480      	movs	r4, #128	; 0x80
    7f58:	465b      	mov	r3, fp
    7f5a:	0f42      	lsrs	r2, r0, #29
    7f5c:	0424      	lsls	r4, r4, #16
    7f5e:	00db      	lsls	r3, r3, #3
    7f60:	4314      	orrs	r4, r2
    7f62:	431c      	orrs	r4, r3
    7f64:	00c3      	lsls	r3, r0, #3
    7f66:	4699      	mov	r9, r3
    7f68:	4b68      	ldr	r3, [pc, #416]	; (810c <__aeabi_dmul+0x1e0>)
    7f6a:	46a3      	mov	fp, r4
    7f6c:	469c      	mov	ip, r3
    7f6e:	2300      	movs	r3, #0
    7f70:	2700      	movs	r7, #0
    7f72:	4466      	add	r6, ip
    7f74:	9302      	str	r3, [sp, #8]
    7f76:	4643      	mov	r3, r8
    7f78:	031c      	lsls	r4, r3, #12
    7f7a:	005a      	lsls	r2, r3, #1
    7f7c:	0fdb      	lsrs	r3, r3, #31
    7f7e:	4650      	mov	r0, sl
    7f80:	0b24      	lsrs	r4, r4, #12
    7f82:	0d52      	lsrs	r2, r2, #21
    7f84:	4698      	mov	r8, r3
    7f86:	d100      	bne.n	7f8a <__aeabi_dmul+0x5e>
    7f88:	e076      	b.n	8078 <__aeabi_dmul+0x14c>
    7f8a:	4b5f      	ldr	r3, [pc, #380]	; (8108 <__aeabi_dmul+0x1dc>)
    7f8c:	429a      	cmp	r2, r3
    7f8e:	d06d      	beq.n	806c <__aeabi_dmul+0x140>
    7f90:	2380      	movs	r3, #128	; 0x80
    7f92:	0f41      	lsrs	r1, r0, #29
    7f94:	041b      	lsls	r3, r3, #16
    7f96:	430b      	orrs	r3, r1
    7f98:	495c      	ldr	r1, [pc, #368]	; (810c <__aeabi_dmul+0x1e0>)
    7f9a:	00e4      	lsls	r4, r4, #3
    7f9c:	468c      	mov	ip, r1
    7f9e:	431c      	orrs	r4, r3
    7fa0:	00c3      	lsls	r3, r0, #3
    7fa2:	2000      	movs	r0, #0
    7fa4:	4462      	add	r2, ip
    7fa6:	4641      	mov	r1, r8
    7fa8:	18b6      	adds	r6, r6, r2
    7faa:	4069      	eors	r1, r5
    7fac:	1c72      	adds	r2, r6, #1
    7fae:	9101      	str	r1, [sp, #4]
    7fb0:	4694      	mov	ip, r2
    7fb2:	4307      	orrs	r7, r0
    7fb4:	2f0f      	cmp	r7, #15
    7fb6:	d900      	bls.n	7fba <__aeabi_dmul+0x8e>
    7fb8:	e0b0      	b.n	811c <__aeabi_dmul+0x1f0>
    7fba:	4a55      	ldr	r2, [pc, #340]	; (8110 <__aeabi_dmul+0x1e4>)
    7fbc:	00bf      	lsls	r7, r7, #2
    7fbe:	59d2      	ldr	r2, [r2, r7]
    7fc0:	4697      	mov	pc, r2
    7fc2:	465b      	mov	r3, fp
    7fc4:	4303      	orrs	r3, r0
    7fc6:	4699      	mov	r9, r3
    7fc8:	d000      	beq.n	7fcc <__aeabi_dmul+0xa0>
    7fca:	e087      	b.n	80dc <__aeabi_dmul+0x1b0>
    7fcc:	2300      	movs	r3, #0
    7fce:	469b      	mov	fp, r3
    7fd0:	3302      	adds	r3, #2
    7fd2:	2708      	movs	r7, #8
    7fd4:	9302      	str	r3, [sp, #8]
    7fd6:	e7ce      	b.n	7f76 <__aeabi_dmul+0x4a>
    7fd8:	4642      	mov	r2, r8
    7fda:	9201      	str	r2, [sp, #4]
    7fdc:	2802      	cmp	r0, #2
    7fde:	d067      	beq.n	80b0 <__aeabi_dmul+0x184>
    7fe0:	2803      	cmp	r0, #3
    7fe2:	d100      	bne.n	7fe6 <__aeabi_dmul+0xba>
    7fe4:	e20e      	b.n	8404 <__aeabi_dmul+0x4d8>
    7fe6:	2801      	cmp	r0, #1
    7fe8:	d000      	beq.n	7fec <__aeabi_dmul+0xc0>
    7fea:	e162      	b.n	82b2 <__aeabi_dmul+0x386>
    7fec:	2300      	movs	r3, #0
    7fee:	2400      	movs	r4, #0
    7ff0:	2200      	movs	r2, #0
    7ff2:	4699      	mov	r9, r3
    7ff4:	9901      	ldr	r1, [sp, #4]
    7ff6:	4001      	ands	r1, r0
    7ff8:	b2cd      	uxtb	r5, r1
    7ffa:	2100      	movs	r1, #0
    7ffc:	0312      	lsls	r2, r2, #12
    7ffe:	0d0b      	lsrs	r3, r1, #20
    8000:	0b12      	lsrs	r2, r2, #12
    8002:	051b      	lsls	r3, r3, #20
    8004:	4313      	orrs	r3, r2
    8006:	4a43      	ldr	r2, [pc, #268]	; (8114 <__aeabi_dmul+0x1e8>)
    8008:	0524      	lsls	r4, r4, #20
    800a:	4013      	ands	r3, r2
    800c:	431c      	orrs	r4, r3
    800e:	0064      	lsls	r4, r4, #1
    8010:	07ed      	lsls	r5, r5, #31
    8012:	0864      	lsrs	r4, r4, #1
    8014:	432c      	orrs	r4, r5
    8016:	4648      	mov	r0, r9
    8018:	0021      	movs	r1, r4
    801a:	b007      	add	sp, #28
    801c:	bc3c      	pop	{r2, r3, r4, r5}
    801e:	4690      	mov	r8, r2
    8020:	4699      	mov	r9, r3
    8022:	46a2      	mov	sl, r4
    8024:	46ab      	mov	fp, r5
    8026:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8028:	4303      	orrs	r3, r0
    802a:	4699      	mov	r9, r3
    802c:	d04f      	beq.n	80ce <__aeabi_dmul+0x1a2>
    802e:	465b      	mov	r3, fp
    8030:	2b00      	cmp	r3, #0
    8032:	d100      	bne.n	8036 <__aeabi_dmul+0x10a>
    8034:	e189      	b.n	834a <__aeabi_dmul+0x41e>
    8036:	4658      	mov	r0, fp
    8038:	f000 feb8 	bl	8dac <__clzsi2>
    803c:	0003      	movs	r3, r0
    803e:	3b0b      	subs	r3, #11
    8040:	2b1c      	cmp	r3, #28
    8042:	dd00      	ble.n	8046 <__aeabi_dmul+0x11a>
    8044:	e17a      	b.n	833c <__aeabi_dmul+0x410>
    8046:	221d      	movs	r2, #29
    8048:	1ad3      	subs	r3, r2, r3
    804a:	003a      	movs	r2, r7
    804c:	0001      	movs	r1, r0
    804e:	465c      	mov	r4, fp
    8050:	40da      	lsrs	r2, r3
    8052:	3908      	subs	r1, #8
    8054:	408c      	lsls	r4, r1
    8056:	0013      	movs	r3, r2
    8058:	408f      	lsls	r7, r1
    805a:	4323      	orrs	r3, r4
    805c:	469b      	mov	fp, r3
    805e:	46b9      	mov	r9, r7
    8060:	2300      	movs	r3, #0
    8062:	4e2d      	ldr	r6, [pc, #180]	; (8118 <__aeabi_dmul+0x1ec>)
    8064:	2700      	movs	r7, #0
    8066:	1a36      	subs	r6, r6, r0
    8068:	9302      	str	r3, [sp, #8]
    806a:	e784      	b.n	7f76 <__aeabi_dmul+0x4a>
    806c:	4653      	mov	r3, sl
    806e:	4323      	orrs	r3, r4
    8070:	d12a      	bne.n	80c8 <__aeabi_dmul+0x19c>
    8072:	2400      	movs	r4, #0
    8074:	2002      	movs	r0, #2
    8076:	e796      	b.n	7fa6 <__aeabi_dmul+0x7a>
    8078:	4653      	mov	r3, sl
    807a:	4323      	orrs	r3, r4
    807c:	d020      	beq.n	80c0 <__aeabi_dmul+0x194>
    807e:	2c00      	cmp	r4, #0
    8080:	d100      	bne.n	8084 <__aeabi_dmul+0x158>
    8082:	e157      	b.n	8334 <__aeabi_dmul+0x408>
    8084:	0020      	movs	r0, r4
    8086:	f000 fe91 	bl	8dac <__clzsi2>
    808a:	0003      	movs	r3, r0
    808c:	3b0b      	subs	r3, #11
    808e:	2b1c      	cmp	r3, #28
    8090:	dd00      	ble.n	8094 <__aeabi_dmul+0x168>
    8092:	e149      	b.n	8328 <__aeabi_dmul+0x3fc>
    8094:	211d      	movs	r1, #29
    8096:	1acb      	subs	r3, r1, r3
    8098:	4651      	mov	r1, sl
    809a:	0002      	movs	r2, r0
    809c:	40d9      	lsrs	r1, r3
    809e:	4653      	mov	r3, sl
    80a0:	3a08      	subs	r2, #8
    80a2:	4094      	lsls	r4, r2
    80a4:	4093      	lsls	r3, r2
    80a6:	430c      	orrs	r4, r1
    80a8:	4a1b      	ldr	r2, [pc, #108]	; (8118 <__aeabi_dmul+0x1ec>)
    80aa:	1a12      	subs	r2, r2, r0
    80ac:	2000      	movs	r0, #0
    80ae:	e77a      	b.n	7fa6 <__aeabi_dmul+0x7a>
    80b0:	2501      	movs	r5, #1
    80b2:	9b01      	ldr	r3, [sp, #4]
    80b4:	4c14      	ldr	r4, [pc, #80]	; (8108 <__aeabi_dmul+0x1dc>)
    80b6:	401d      	ands	r5, r3
    80b8:	2300      	movs	r3, #0
    80ba:	2200      	movs	r2, #0
    80bc:	4699      	mov	r9, r3
    80be:	e79c      	b.n	7ffa <__aeabi_dmul+0xce>
    80c0:	2400      	movs	r4, #0
    80c2:	2200      	movs	r2, #0
    80c4:	2001      	movs	r0, #1
    80c6:	e76e      	b.n	7fa6 <__aeabi_dmul+0x7a>
    80c8:	4653      	mov	r3, sl
    80ca:	2003      	movs	r0, #3
    80cc:	e76b      	b.n	7fa6 <__aeabi_dmul+0x7a>
    80ce:	2300      	movs	r3, #0
    80d0:	469b      	mov	fp, r3
    80d2:	3301      	adds	r3, #1
    80d4:	2704      	movs	r7, #4
    80d6:	2600      	movs	r6, #0
    80d8:	9302      	str	r3, [sp, #8]
    80da:	e74c      	b.n	7f76 <__aeabi_dmul+0x4a>
    80dc:	2303      	movs	r3, #3
    80de:	4681      	mov	r9, r0
    80e0:	270c      	movs	r7, #12
    80e2:	9302      	str	r3, [sp, #8]
    80e4:	e747      	b.n	7f76 <__aeabi_dmul+0x4a>
    80e6:	2280      	movs	r2, #128	; 0x80
    80e8:	2300      	movs	r3, #0
    80ea:	2500      	movs	r5, #0
    80ec:	0312      	lsls	r2, r2, #12
    80ee:	4699      	mov	r9, r3
    80f0:	4c05      	ldr	r4, [pc, #20]	; (8108 <__aeabi_dmul+0x1dc>)
    80f2:	e782      	b.n	7ffa <__aeabi_dmul+0xce>
    80f4:	465c      	mov	r4, fp
    80f6:	464b      	mov	r3, r9
    80f8:	9802      	ldr	r0, [sp, #8]
    80fa:	e76f      	b.n	7fdc <__aeabi_dmul+0xb0>
    80fc:	465c      	mov	r4, fp
    80fe:	464b      	mov	r3, r9
    8100:	9501      	str	r5, [sp, #4]
    8102:	9802      	ldr	r0, [sp, #8]
    8104:	e76a      	b.n	7fdc <__aeabi_dmul+0xb0>
    8106:	46c0      	nop			; (mov r8, r8)
    8108:	000007ff 	.word	0x000007ff
    810c:	fffffc01 	.word	0xfffffc01
    8110:	00009288 	.word	0x00009288
    8114:	800fffff 	.word	0x800fffff
    8118:	fffffc0d 	.word	0xfffffc0d
    811c:	464a      	mov	r2, r9
    811e:	4649      	mov	r1, r9
    8120:	0c17      	lsrs	r7, r2, #16
    8122:	0c1a      	lsrs	r2, r3, #16
    8124:	041b      	lsls	r3, r3, #16
    8126:	0c1b      	lsrs	r3, r3, #16
    8128:	0408      	lsls	r0, r1, #16
    812a:	0019      	movs	r1, r3
    812c:	0c00      	lsrs	r0, r0, #16
    812e:	4341      	muls	r1, r0
    8130:	0015      	movs	r5, r2
    8132:	4688      	mov	r8, r1
    8134:	0019      	movs	r1, r3
    8136:	437d      	muls	r5, r7
    8138:	4379      	muls	r1, r7
    813a:	9503      	str	r5, [sp, #12]
    813c:	4689      	mov	r9, r1
    813e:	0029      	movs	r1, r5
    8140:	0015      	movs	r5, r2
    8142:	4345      	muls	r5, r0
    8144:	444d      	add	r5, r9
    8146:	9502      	str	r5, [sp, #8]
    8148:	4645      	mov	r5, r8
    814a:	0c2d      	lsrs	r5, r5, #16
    814c:	46aa      	mov	sl, r5
    814e:	9d02      	ldr	r5, [sp, #8]
    8150:	4455      	add	r5, sl
    8152:	45a9      	cmp	r9, r5
    8154:	d906      	bls.n	8164 <__aeabi_dmul+0x238>
    8156:	468a      	mov	sl, r1
    8158:	2180      	movs	r1, #128	; 0x80
    815a:	0249      	lsls	r1, r1, #9
    815c:	4689      	mov	r9, r1
    815e:	44ca      	add	sl, r9
    8160:	4651      	mov	r1, sl
    8162:	9103      	str	r1, [sp, #12]
    8164:	0c29      	lsrs	r1, r5, #16
    8166:	9104      	str	r1, [sp, #16]
    8168:	4641      	mov	r1, r8
    816a:	0409      	lsls	r1, r1, #16
    816c:	042d      	lsls	r5, r5, #16
    816e:	0c09      	lsrs	r1, r1, #16
    8170:	4688      	mov	r8, r1
    8172:	0029      	movs	r1, r5
    8174:	0c25      	lsrs	r5, r4, #16
    8176:	0424      	lsls	r4, r4, #16
    8178:	4441      	add	r1, r8
    817a:	0c24      	lsrs	r4, r4, #16
    817c:	9105      	str	r1, [sp, #20]
    817e:	0021      	movs	r1, r4
    8180:	4341      	muls	r1, r0
    8182:	4688      	mov	r8, r1
    8184:	0021      	movs	r1, r4
    8186:	4379      	muls	r1, r7
    8188:	468a      	mov	sl, r1
    818a:	4368      	muls	r0, r5
    818c:	4641      	mov	r1, r8
    818e:	4450      	add	r0, sl
    8190:	4681      	mov	r9, r0
    8192:	0c08      	lsrs	r0, r1, #16
    8194:	4448      	add	r0, r9
    8196:	436f      	muls	r7, r5
    8198:	4582      	cmp	sl, r0
    819a:	d903      	bls.n	81a4 <__aeabi_dmul+0x278>
    819c:	2180      	movs	r1, #128	; 0x80
    819e:	0249      	lsls	r1, r1, #9
    81a0:	4689      	mov	r9, r1
    81a2:	444f      	add	r7, r9
    81a4:	0c01      	lsrs	r1, r0, #16
    81a6:	4689      	mov	r9, r1
    81a8:	0039      	movs	r1, r7
    81aa:	4449      	add	r1, r9
    81ac:	9102      	str	r1, [sp, #8]
    81ae:	4641      	mov	r1, r8
    81b0:	040f      	lsls	r7, r1, #16
    81b2:	9904      	ldr	r1, [sp, #16]
    81b4:	0c3f      	lsrs	r7, r7, #16
    81b6:	4688      	mov	r8, r1
    81b8:	0400      	lsls	r0, r0, #16
    81ba:	19c0      	adds	r0, r0, r7
    81bc:	4480      	add	r8, r0
    81be:	4641      	mov	r1, r8
    81c0:	9104      	str	r1, [sp, #16]
    81c2:	4659      	mov	r1, fp
    81c4:	0c0f      	lsrs	r7, r1, #16
    81c6:	0409      	lsls	r1, r1, #16
    81c8:	0c09      	lsrs	r1, r1, #16
    81ca:	4688      	mov	r8, r1
    81cc:	4359      	muls	r1, r3
    81ce:	468a      	mov	sl, r1
    81d0:	0039      	movs	r1, r7
    81d2:	4351      	muls	r1, r2
    81d4:	4689      	mov	r9, r1
    81d6:	4641      	mov	r1, r8
    81d8:	434a      	muls	r2, r1
    81da:	4651      	mov	r1, sl
    81dc:	0c09      	lsrs	r1, r1, #16
    81de:	468b      	mov	fp, r1
    81e0:	437b      	muls	r3, r7
    81e2:	18d2      	adds	r2, r2, r3
    81e4:	445a      	add	r2, fp
    81e6:	4293      	cmp	r3, r2
    81e8:	d903      	bls.n	81f2 <__aeabi_dmul+0x2c6>
    81ea:	2380      	movs	r3, #128	; 0x80
    81ec:	025b      	lsls	r3, r3, #9
    81ee:	469b      	mov	fp, r3
    81f0:	44d9      	add	r9, fp
    81f2:	4651      	mov	r1, sl
    81f4:	0409      	lsls	r1, r1, #16
    81f6:	0c09      	lsrs	r1, r1, #16
    81f8:	468a      	mov	sl, r1
    81fa:	4641      	mov	r1, r8
    81fc:	4361      	muls	r1, r4
    81fe:	437c      	muls	r4, r7
    8200:	0c13      	lsrs	r3, r2, #16
    8202:	0412      	lsls	r2, r2, #16
    8204:	444b      	add	r3, r9
    8206:	4452      	add	r2, sl
    8208:	46a1      	mov	r9, r4
    820a:	468a      	mov	sl, r1
    820c:	003c      	movs	r4, r7
    820e:	4641      	mov	r1, r8
    8210:	436c      	muls	r4, r5
    8212:	434d      	muls	r5, r1
    8214:	4651      	mov	r1, sl
    8216:	444d      	add	r5, r9
    8218:	0c0f      	lsrs	r7, r1, #16
    821a:	197d      	adds	r5, r7, r5
    821c:	45a9      	cmp	r9, r5
    821e:	d903      	bls.n	8228 <__aeabi_dmul+0x2fc>
    8220:	2180      	movs	r1, #128	; 0x80
    8222:	0249      	lsls	r1, r1, #9
    8224:	4688      	mov	r8, r1
    8226:	4444      	add	r4, r8
    8228:	9f04      	ldr	r7, [sp, #16]
    822a:	9903      	ldr	r1, [sp, #12]
    822c:	46b8      	mov	r8, r7
    822e:	4441      	add	r1, r8
    8230:	468b      	mov	fp, r1
    8232:	4583      	cmp	fp, r0
    8234:	4180      	sbcs	r0, r0
    8236:	4241      	negs	r1, r0
    8238:	4688      	mov	r8, r1
    823a:	4651      	mov	r1, sl
    823c:	0408      	lsls	r0, r1, #16
    823e:	042f      	lsls	r7, r5, #16
    8240:	0c00      	lsrs	r0, r0, #16
    8242:	183f      	adds	r7, r7, r0
    8244:	4658      	mov	r0, fp
    8246:	9902      	ldr	r1, [sp, #8]
    8248:	1810      	adds	r0, r2, r0
    824a:	4689      	mov	r9, r1
    824c:	4290      	cmp	r0, r2
    824e:	4192      	sbcs	r2, r2
    8250:	444f      	add	r7, r9
    8252:	46ba      	mov	sl, r7
    8254:	4252      	negs	r2, r2
    8256:	4699      	mov	r9, r3
    8258:	4693      	mov	fp, r2
    825a:	44c2      	add	sl, r8
    825c:	44d1      	add	r9, sl
    825e:	44cb      	add	fp, r9
    8260:	428f      	cmp	r7, r1
    8262:	41bf      	sbcs	r7, r7
    8264:	45c2      	cmp	sl, r8
    8266:	4189      	sbcs	r1, r1
    8268:	4599      	cmp	r9, r3
    826a:	419b      	sbcs	r3, r3
    826c:	4593      	cmp	fp, r2
    826e:	4192      	sbcs	r2, r2
    8270:	427f      	negs	r7, r7
    8272:	4249      	negs	r1, r1
    8274:	0c2d      	lsrs	r5, r5, #16
    8276:	4252      	negs	r2, r2
    8278:	430f      	orrs	r7, r1
    827a:	425b      	negs	r3, r3
    827c:	4313      	orrs	r3, r2
    827e:	197f      	adds	r7, r7, r5
    8280:	18ff      	adds	r7, r7, r3
    8282:	465b      	mov	r3, fp
    8284:	193c      	adds	r4, r7, r4
    8286:	0ddb      	lsrs	r3, r3, #23
    8288:	9a05      	ldr	r2, [sp, #20]
    828a:	0264      	lsls	r4, r4, #9
    828c:	431c      	orrs	r4, r3
    828e:	0243      	lsls	r3, r0, #9
    8290:	4313      	orrs	r3, r2
    8292:	1e5d      	subs	r5, r3, #1
    8294:	41ab      	sbcs	r3, r5
    8296:	465a      	mov	r2, fp
    8298:	0dc0      	lsrs	r0, r0, #23
    829a:	4303      	orrs	r3, r0
    829c:	0252      	lsls	r2, r2, #9
    829e:	4313      	orrs	r3, r2
    82a0:	01e2      	lsls	r2, r4, #7
    82a2:	d556      	bpl.n	8352 <__aeabi_dmul+0x426>
    82a4:	2001      	movs	r0, #1
    82a6:	085a      	lsrs	r2, r3, #1
    82a8:	4003      	ands	r3, r0
    82aa:	4313      	orrs	r3, r2
    82ac:	07e2      	lsls	r2, r4, #31
    82ae:	4313      	orrs	r3, r2
    82b0:	0864      	lsrs	r4, r4, #1
    82b2:	485a      	ldr	r0, [pc, #360]	; (841c <__aeabi_dmul+0x4f0>)
    82b4:	4460      	add	r0, ip
    82b6:	2800      	cmp	r0, #0
    82b8:	dd4d      	ble.n	8356 <__aeabi_dmul+0x42a>
    82ba:	075a      	lsls	r2, r3, #29
    82bc:	d009      	beq.n	82d2 <__aeabi_dmul+0x3a6>
    82be:	220f      	movs	r2, #15
    82c0:	401a      	ands	r2, r3
    82c2:	2a04      	cmp	r2, #4
    82c4:	d005      	beq.n	82d2 <__aeabi_dmul+0x3a6>
    82c6:	1d1a      	adds	r2, r3, #4
    82c8:	429a      	cmp	r2, r3
    82ca:	419b      	sbcs	r3, r3
    82cc:	425b      	negs	r3, r3
    82ce:	18e4      	adds	r4, r4, r3
    82d0:	0013      	movs	r3, r2
    82d2:	01e2      	lsls	r2, r4, #7
    82d4:	d504      	bpl.n	82e0 <__aeabi_dmul+0x3b4>
    82d6:	2080      	movs	r0, #128	; 0x80
    82d8:	4a51      	ldr	r2, [pc, #324]	; (8420 <__aeabi_dmul+0x4f4>)
    82da:	00c0      	lsls	r0, r0, #3
    82dc:	4014      	ands	r4, r2
    82de:	4460      	add	r0, ip
    82e0:	4a50      	ldr	r2, [pc, #320]	; (8424 <__aeabi_dmul+0x4f8>)
    82e2:	4290      	cmp	r0, r2
    82e4:	dd00      	ble.n	82e8 <__aeabi_dmul+0x3bc>
    82e6:	e6e3      	b.n	80b0 <__aeabi_dmul+0x184>
    82e8:	2501      	movs	r5, #1
    82ea:	08db      	lsrs	r3, r3, #3
    82ec:	0762      	lsls	r2, r4, #29
    82ee:	431a      	orrs	r2, r3
    82f0:	0264      	lsls	r4, r4, #9
    82f2:	9b01      	ldr	r3, [sp, #4]
    82f4:	4691      	mov	r9, r2
    82f6:	0b22      	lsrs	r2, r4, #12
    82f8:	0544      	lsls	r4, r0, #21
    82fa:	0d64      	lsrs	r4, r4, #21
    82fc:	401d      	ands	r5, r3
    82fe:	e67c      	b.n	7ffa <__aeabi_dmul+0xce>
    8300:	2280      	movs	r2, #128	; 0x80
    8302:	4659      	mov	r1, fp
    8304:	0312      	lsls	r2, r2, #12
    8306:	4211      	tst	r1, r2
    8308:	d008      	beq.n	831c <__aeabi_dmul+0x3f0>
    830a:	4214      	tst	r4, r2
    830c:	d106      	bne.n	831c <__aeabi_dmul+0x3f0>
    830e:	4322      	orrs	r2, r4
    8310:	0312      	lsls	r2, r2, #12
    8312:	0b12      	lsrs	r2, r2, #12
    8314:	4645      	mov	r5, r8
    8316:	4699      	mov	r9, r3
    8318:	4c43      	ldr	r4, [pc, #268]	; (8428 <__aeabi_dmul+0x4fc>)
    831a:	e66e      	b.n	7ffa <__aeabi_dmul+0xce>
    831c:	465b      	mov	r3, fp
    831e:	431a      	orrs	r2, r3
    8320:	0312      	lsls	r2, r2, #12
    8322:	0b12      	lsrs	r2, r2, #12
    8324:	4c40      	ldr	r4, [pc, #256]	; (8428 <__aeabi_dmul+0x4fc>)
    8326:	e668      	b.n	7ffa <__aeabi_dmul+0xce>
    8328:	0003      	movs	r3, r0
    832a:	4654      	mov	r4, sl
    832c:	3b28      	subs	r3, #40	; 0x28
    832e:	409c      	lsls	r4, r3
    8330:	2300      	movs	r3, #0
    8332:	e6b9      	b.n	80a8 <__aeabi_dmul+0x17c>
    8334:	f000 fd3a 	bl	8dac <__clzsi2>
    8338:	3020      	adds	r0, #32
    833a:	e6a6      	b.n	808a <__aeabi_dmul+0x15e>
    833c:	0003      	movs	r3, r0
    833e:	3b28      	subs	r3, #40	; 0x28
    8340:	409f      	lsls	r7, r3
    8342:	2300      	movs	r3, #0
    8344:	46bb      	mov	fp, r7
    8346:	4699      	mov	r9, r3
    8348:	e68a      	b.n	8060 <__aeabi_dmul+0x134>
    834a:	f000 fd2f 	bl	8dac <__clzsi2>
    834e:	3020      	adds	r0, #32
    8350:	e674      	b.n	803c <__aeabi_dmul+0x110>
    8352:	46b4      	mov	ip, r6
    8354:	e7ad      	b.n	82b2 <__aeabi_dmul+0x386>
    8356:	2501      	movs	r5, #1
    8358:	1a2a      	subs	r2, r5, r0
    835a:	2a38      	cmp	r2, #56	; 0x38
    835c:	dd06      	ble.n	836c <__aeabi_dmul+0x440>
    835e:	9b01      	ldr	r3, [sp, #4]
    8360:	2400      	movs	r4, #0
    8362:	401d      	ands	r5, r3
    8364:	2300      	movs	r3, #0
    8366:	2200      	movs	r2, #0
    8368:	4699      	mov	r9, r3
    836a:	e646      	b.n	7ffa <__aeabi_dmul+0xce>
    836c:	2a1f      	cmp	r2, #31
    836e:	dc21      	bgt.n	83b4 <__aeabi_dmul+0x488>
    8370:	2520      	movs	r5, #32
    8372:	0020      	movs	r0, r4
    8374:	1aad      	subs	r5, r5, r2
    8376:	001e      	movs	r6, r3
    8378:	40ab      	lsls	r3, r5
    837a:	40a8      	lsls	r0, r5
    837c:	40d6      	lsrs	r6, r2
    837e:	1e5d      	subs	r5, r3, #1
    8380:	41ab      	sbcs	r3, r5
    8382:	4330      	orrs	r0, r6
    8384:	4318      	orrs	r0, r3
    8386:	40d4      	lsrs	r4, r2
    8388:	0743      	lsls	r3, r0, #29
    838a:	d009      	beq.n	83a0 <__aeabi_dmul+0x474>
    838c:	230f      	movs	r3, #15
    838e:	4003      	ands	r3, r0
    8390:	2b04      	cmp	r3, #4
    8392:	d005      	beq.n	83a0 <__aeabi_dmul+0x474>
    8394:	0003      	movs	r3, r0
    8396:	1d18      	adds	r0, r3, #4
    8398:	4298      	cmp	r0, r3
    839a:	419b      	sbcs	r3, r3
    839c:	425b      	negs	r3, r3
    839e:	18e4      	adds	r4, r4, r3
    83a0:	0223      	lsls	r3, r4, #8
    83a2:	d521      	bpl.n	83e8 <__aeabi_dmul+0x4bc>
    83a4:	2501      	movs	r5, #1
    83a6:	9b01      	ldr	r3, [sp, #4]
    83a8:	2401      	movs	r4, #1
    83aa:	401d      	ands	r5, r3
    83ac:	2300      	movs	r3, #0
    83ae:	2200      	movs	r2, #0
    83b0:	4699      	mov	r9, r3
    83b2:	e622      	b.n	7ffa <__aeabi_dmul+0xce>
    83b4:	251f      	movs	r5, #31
    83b6:	0021      	movs	r1, r4
    83b8:	426d      	negs	r5, r5
    83ba:	1a28      	subs	r0, r5, r0
    83bc:	40c1      	lsrs	r1, r0
    83be:	0008      	movs	r0, r1
    83c0:	2a20      	cmp	r2, #32
    83c2:	d01d      	beq.n	8400 <__aeabi_dmul+0x4d4>
    83c4:	355f      	adds	r5, #95	; 0x5f
    83c6:	1aaa      	subs	r2, r5, r2
    83c8:	4094      	lsls	r4, r2
    83ca:	4323      	orrs	r3, r4
    83cc:	1e5c      	subs	r4, r3, #1
    83ce:	41a3      	sbcs	r3, r4
    83d0:	2507      	movs	r5, #7
    83d2:	4303      	orrs	r3, r0
    83d4:	401d      	ands	r5, r3
    83d6:	2200      	movs	r2, #0
    83d8:	2d00      	cmp	r5, #0
    83da:	d009      	beq.n	83f0 <__aeabi_dmul+0x4c4>
    83dc:	220f      	movs	r2, #15
    83de:	2400      	movs	r4, #0
    83e0:	401a      	ands	r2, r3
    83e2:	0018      	movs	r0, r3
    83e4:	2a04      	cmp	r2, #4
    83e6:	d1d6      	bne.n	8396 <__aeabi_dmul+0x46a>
    83e8:	0003      	movs	r3, r0
    83ea:	0765      	lsls	r5, r4, #29
    83ec:	0264      	lsls	r4, r4, #9
    83ee:	0b22      	lsrs	r2, r4, #12
    83f0:	08db      	lsrs	r3, r3, #3
    83f2:	432b      	orrs	r3, r5
    83f4:	2501      	movs	r5, #1
    83f6:	4699      	mov	r9, r3
    83f8:	9b01      	ldr	r3, [sp, #4]
    83fa:	2400      	movs	r4, #0
    83fc:	401d      	ands	r5, r3
    83fe:	e5fc      	b.n	7ffa <__aeabi_dmul+0xce>
    8400:	2400      	movs	r4, #0
    8402:	e7e2      	b.n	83ca <__aeabi_dmul+0x49e>
    8404:	2280      	movs	r2, #128	; 0x80
    8406:	2501      	movs	r5, #1
    8408:	0312      	lsls	r2, r2, #12
    840a:	4322      	orrs	r2, r4
    840c:	9901      	ldr	r1, [sp, #4]
    840e:	0312      	lsls	r2, r2, #12
    8410:	0b12      	lsrs	r2, r2, #12
    8412:	400d      	ands	r5, r1
    8414:	4699      	mov	r9, r3
    8416:	4c04      	ldr	r4, [pc, #16]	; (8428 <__aeabi_dmul+0x4fc>)
    8418:	e5ef      	b.n	7ffa <__aeabi_dmul+0xce>
    841a:	46c0      	nop			; (mov r8, r8)
    841c:	000003ff 	.word	0x000003ff
    8420:	feffffff 	.word	0xfeffffff
    8424:	000007fe 	.word	0x000007fe
    8428:	000007ff 	.word	0x000007ff

0000842c <__aeabi_dsub>:
    842c:	b5f0      	push	{r4, r5, r6, r7, lr}
    842e:	4646      	mov	r6, r8
    8430:	46d6      	mov	lr, sl
    8432:	464f      	mov	r7, r9
    8434:	030c      	lsls	r4, r1, #12
    8436:	b5c0      	push	{r6, r7, lr}
    8438:	0fcd      	lsrs	r5, r1, #31
    843a:	004e      	lsls	r6, r1, #1
    843c:	0a61      	lsrs	r1, r4, #9
    843e:	0f44      	lsrs	r4, r0, #29
    8440:	430c      	orrs	r4, r1
    8442:	00c1      	lsls	r1, r0, #3
    8444:	0058      	lsls	r0, r3, #1
    8446:	0d40      	lsrs	r0, r0, #21
    8448:	4684      	mov	ip, r0
    844a:	468a      	mov	sl, r1
    844c:	000f      	movs	r7, r1
    844e:	0319      	lsls	r1, r3, #12
    8450:	0f50      	lsrs	r0, r2, #29
    8452:	0a49      	lsrs	r1, r1, #9
    8454:	4301      	orrs	r1, r0
    8456:	48c6      	ldr	r0, [pc, #792]	; (8770 <__aeabi_dsub+0x344>)
    8458:	0d76      	lsrs	r6, r6, #21
    845a:	46a8      	mov	r8, r5
    845c:	0fdb      	lsrs	r3, r3, #31
    845e:	00d2      	lsls	r2, r2, #3
    8460:	4584      	cmp	ip, r0
    8462:	d100      	bne.n	8466 <__aeabi_dsub+0x3a>
    8464:	e0d8      	b.n	8618 <__aeabi_dsub+0x1ec>
    8466:	2001      	movs	r0, #1
    8468:	4043      	eors	r3, r0
    846a:	42ab      	cmp	r3, r5
    846c:	d100      	bne.n	8470 <__aeabi_dsub+0x44>
    846e:	e0a6      	b.n	85be <__aeabi_dsub+0x192>
    8470:	4660      	mov	r0, ip
    8472:	1a35      	subs	r5, r6, r0
    8474:	2d00      	cmp	r5, #0
    8476:	dc00      	bgt.n	847a <__aeabi_dsub+0x4e>
    8478:	e105      	b.n	8686 <__aeabi_dsub+0x25a>
    847a:	2800      	cmp	r0, #0
    847c:	d110      	bne.n	84a0 <__aeabi_dsub+0x74>
    847e:	000b      	movs	r3, r1
    8480:	4313      	orrs	r3, r2
    8482:	d100      	bne.n	8486 <__aeabi_dsub+0x5a>
    8484:	e0d7      	b.n	8636 <__aeabi_dsub+0x20a>
    8486:	1e6b      	subs	r3, r5, #1
    8488:	2b00      	cmp	r3, #0
    848a:	d000      	beq.n	848e <__aeabi_dsub+0x62>
    848c:	e14b      	b.n	8726 <__aeabi_dsub+0x2fa>
    848e:	4653      	mov	r3, sl
    8490:	1a9f      	subs	r7, r3, r2
    8492:	45ba      	cmp	sl, r7
    8494:	4180      	sbcs	r0, r0
    8496:	1a64      	subs	r4, r4, r1
    8498:	4240      	negs	r0, r0
    849a:	1a24      	subs	r4, r4, r0
    849c:	2601      	movs	r6, #1
    849e:	e01e      	b.n	84de <__aeabi_dsub+0xb2>
    84a0:	4bb3      	ldr	r3, [pc, #716]	; (8770 <__aeabi_dsub+0x344>)
    84a2:	429e      	cmp	r6, r3
    84a4:	d048      	beq.n	8538 <__aeabi_dsub+0x10c>
    84a6:	2380      	movs	r3, #128	; 0x80
    84a8:	041b      	lsls	r3, r3, #16
    84aa:	4319      	orrs	r1, r3
    84ac:	2d38      	cmp	r5, #56	; 0x38
    84ae:	dd00      	ble.n	84b2 <__aeabi_dsub+0x86>
    84b0:	e119      	b.n	86e6 <__aeabi_dsub+0x2ba>
    84b2:	2d1f      	cmp	r5, #31
    84b4:	dd00      	ble.n	84b8 <__aeabi_dsub+0x8c>
    84b6:	e14c      	b.n	8752 <__aeabi_dsub+0x326>
    84b8:	2320      	movs	r3, #32
    84ba:	000f      	movs	r7, r1
    84bc:	1b5b      	subs	r3, r3, r5
    84be:	0010      	movs	r0, r2
    84c0:	409a      	lsls	r2, r3
    84c2:	409f      	lsls	r7, r3
    84c4:	40e8      	lsrs	r0, r5
    84c6:	1e53      	subs	r3, r2, #1
    84c8:	419a      	sbcs	r2, r3
    84ca:	40e9      	lsrs	r1, r5
    84cc:	4307      	orrs	r7, r0
    84ce:	4317      	orrs	r7, r2
    84d0:	4653      	mov	r3, sl
    84d2:	1bdf      	subs	r7, r3, r7
    84d4:	1a61      	subs	r1, r4, r1
    84d6:	45ba      	cmp	sl, r7
    84d8:	41a4      	sbcs	r4, r4
    84da:	4264      	negs	r4, r4
    84dc:	1b0c      	subs	r4, r1, r4
    84de:	0223      	lsls	r3, r4, #8
    84e0:	d400      	bmi.n	84e4 <__aeabi_dsub+0xb8>
    84e2:	e0c5      	b.n	8670 <__aeabi_dsub+0x244>
    84e4:	0264      	lsls	r4, r4, #9
    84e6:	0a65      	lsrs	r5, r4, #9
    84e8:	2d00      	cmp	r5, #0
    84ea:	d100      	bne.n	84ee <__aeabi_dsub+0xc2>
    84ec:	e0f6      	b.n	86dc <__aeabi_dsub+0x2b0>
    84ee:	0028      	movs	r0, r5
    84f0:	f000 fc5c 	bl	8dac <__clzsi2>
    84f4:	0003      	movs	r3, r0
    84f6:	3b08      	subs	r3, #8
    84f8:	2b1f      	cmp	r3, #31
    84fa:	dd00      	ble.n	84fe <__aeabi_dsub+0xd2>
    84fc:	e0e9      	b.n	86d2 <__aeabi_dsub+0x2a6>
    84fe:	2220      	movs	r2, #32
    8500:	003c      	movs	r4, r7
    8502:	1ad2      	subs	r2, r2, r3
    8504:	409d      	lsls	r5, r3
    8506:	40d4      	lsrs	r4, r2
    8508:	409f      	lsls	r7, r3
    850a:	4325      	orrs	r5, r4
    850c:	429e      	cmp	r6, r3
    850e:	dd00      	ble.n	8512 <__aeabi_dsub+0xe6>
    8510:	e0db      	b.n	86ca <__aeabi_dsub+0x29e>
    8512:	1b9e      	subs	r6, r3, r6
    8514:	1c73      	adds	r3, r6, #1
    8516:	2b1f      	cmp	r3, #31
    8518:	dd00      	ble.n	851c <__aeabi_dsub+0xf0>
    851a:	e10a      	b.n	8732 <__aeabi_dsub+0x306>
    851c:	2220      	movs	r2, #32
    851e:	0038      	movs	r0, r7
    8520:	1ad2      	subs	r2, r2, r3
    8522:	0029      	movs	r1, r5
    8524:	4097      	lsls	r7, r2
    8526:	002c      	movs	r4, r5
    8528:	4091      	lsls	r1, r2
    852a:	40d8      	lsrs	r0, r3
    852c:	1e7a      	subs	r2, r7, #1
    852e:	4197      	sbcs	r7, r2
    8530:	40dc      	lsrs	r4, r3
    8532:	2600      	movs	r6, #0
    8534:	4301      	orrs	r1, r0
    8536:	430f      	orrs	r7, r1
    8538:	077b      	lsls	r3, r7, #29
    853a:	d009      	beq.n	8550 <__aeabi_dsub+0x124>
    853c:	230f      	movs	r3, #15
    853e:	403b      	ands	r3, r7
    8540:	2b04      	cmp	r3, #4
    8542:	d005      	beq.n	8550 <__aeabi_dsub+0x124>
    8544:	1d3b      	adds	r3, r7, #4
    8546:	42bb      	cmp	r3, r7
    8548:	41bf      	sbcs	r7, r7
    854a:	427f      	negs	r7, r7
    854c:	19e4      	adds	r4, r4, r7
    854e:	001f      	movs	r7, r3
    8550:	0223      	lsls	r3, r4, #8
    8552:	d525      	bpl.n	85a0 <__aeabi_dsub+0x174>
    8554:	4b86      	ldr	r3, [pc, #536]	; (8770 <__aeabi_dsub+0x344>)
    8556:	3601      	adds	r6, #1
    8558:	429e      	cmp	r6, r3
    855a:	d100      	bne.n	855e <__aeabi_dsub+0x132>
    855c:	e0af      	b.n	86be <__aeabi_dsub+0x292>
    855e:	4b85      	ldr	r3, [pc, #532]	; (8774 <__aeabi_dsub+0x348>)
    8560:	2501      	movs	r5, #1
    8562:	401c      	ands	r4, r3
    8564:	4643      	mov	r3, r8
    8566:	0762      	lsls	r2, r4, #29
    8568:	08ff      	lsrs	r7, r7, #3
    856a:	0264      	lsls	r4, r4, #9
    856c:	0576      	lsls	r6, r6, #21
    856e:	4317      	orrs	r7, r2
    8570:	0b24      	lsrs	r4, r4, #12
    8572:	0d76      	lsrs	r6, r6, #21
    8574:	401d      	ands	r5, r3
    8576:	2100      	movs	r1, #0
    8578:	0324      	lsls	r4, r4, #12
    857a:	0b23      	lsrs	r3, r4, #12
    857c:	0d0c      	lsrs	r4, r1, #20
    857e:	4a7e      	ldr	r2, [pc, #504]	; (8778 <__aeabi_dsub+0x34c>)
    8580:	0524      	lsls	r4, r4, #20
    8582:	431c      	orrs	r4, r3
    8584:	4014      	ands	r4, r2
    8586:	0533      	lsls	r3, r6, #20
    8588:	4323      	orrs	r3, r4
    858a:	005b      	lsls	r3, r3, #1
    858c:	07ed      	lsls	r5, r5, #31
    858e:	085b      	lsrs	r3, r3, #1
    8590:	432b      	orrs	r3, r5
    8592:	0038      	movs	r0, r7
    8594:	0019      	movs	r1, r3
    8596:	bc1c      	pop	{r2, r3, r4}
    8598:	4690      	mov	r8, r2
    859a:	4699      	mov	r9, r3
    859c:	46a2      	mov	sl, r4
    859e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    85a0:	2501      	movs	r5, #1
    85a2:	4643      	mov	r3, r8
    85a4:	0762      	lsls	r2, r4, #29
    85a6:	08ff      	lsrs	r7, r7, #3
    85a8:	4317      	orrs	r7, r2
    85aa:	08e4      	lsrs	r4, r4, #3
    85ac:	401d      	ands	r5, r3
    85ae:	4b70      	ldr	r3, [pc, #448]	; (8770 <__aeabi_dsub+0x344>)
    85b0:	429e      	cmp	r6, r3
    85b2:	d036      	beq.n	8622 <__aeabi_dsub+0x1f6>
    85b4:	0324      	lsls	r4, r4, #12
    85b6:	0576      	lsls	r6, r6, #21
    85b8:	0b24      	lsrs	r4, r4, #12
    85ba:	0d76      	lsrs	r6, r6, #21
    85bc:	e7db      	b.n	8576 <__aeabi_dsub+0x14a>
    85be:	4663      	mov	r3, ip
    85c0:	1af3      	subs	r3, r6, r3
    85c2:	2b00      	cmp	r3, #0
    85c4:	dc00      	bgt.n	85c8 <__aeabi_dsub+0x19c>
    85c6:	e094      	b.n	86f2 <__aeabi_dsub+0x2c6>
    85c8:	4660      	mov	r0, ip
    85ca:	2800      	cmp	r0, #0
    85cc:	d035      	beq.n	863a <__aeabi_dsub+0x20e>
    85ce:	4868      	ldr	r0, [pc, #416]	; (8770 <__aeabi_dsub+0x344>)
    85d0:	4286      	cmp	r6, r0
    85d2:	d0b1      	beq.n	8538 <__aeabi_dsub+0x10c>
    85d4:	2780      	movs	r7, #128	; 0x80
    85d6:	043f      	lsls	r7, r7, #16
    85d8:	4339      	orrs	r1, r7
    85da:	2b38      	cmp	r3, #56	; 0x38
    85dc:	dc00      	bgt.n	85e0 <__aeabi_dsub+0x1b4>
    85de:	e0fd      	b.n	87dc <__aeabi_dsub+0x3b0>
    85e0:	430a      	orrs	r2, r1
    85e2:	0017      	movs	r7, r2
    85e4:	2100      	movs	r1, #0
    85e6:	1e7a      	subs	r2, r7, #1
    85e8:	4197      	sbcs	r7, r2
    85ea:	4457      	add	r7, sl
    85ec:	4557      	cmp	r7, sl
    85ee:	4180      	sbcs	r0, r0
    85f0:	1909      	adds	r1, r1, r4
    85f2:	4244      	negs	r4, r0
    85f4:	190c      	adds	r4, r1, r4
    85f6:	0223      	lsls	r3, r4, #8
    85f8:	d53a      	bpl.n	8670 <__aeabi_dsub+0x244>
    85fa:	4b5d      	ldr	r3, [pc, #372]	; (8770 <__aeabi_dsub+0x344>)
    85fc:	3601      	adds	r6, #1
    85fe:	429e      	cmp	r6, r3
    8600:	d100      	bne.n	8604 <__aeabi_dsub+0x1d8>
    8602:	e14b      	b.n	889c <__aeabi_dsub+0x470>
    8604:	2201      	movs	r2, #1
    8606:	4b5b      	ldr	r3, [pc, #364]	; (8774 <__aeabi_dsub+0x348>)
    8608:	401c      	ands	r4, r3
    860a:	087b      	lsrs	r3, r7, #1
    860c:	4017      	ands	r7, r2
    860e:	431f      	orrs	r7, r3
    8610:	07e2      	lsls	r2, r4, #31
    8612:	4317      	orrs	r7, r2
    8614:	0864      	lsrs	r4, r4, #1
    8616:	e78f      	b.n	8538 <__aeabi_dsub+0x10c>
    8618:	0008      	movs	r0, r1
    861a:	4310      	orrs	r0, r2
    861c:	d000      	beq.n	8620 <__aeabi_dsub+0x1f4>
    861e:	e724      	b.n	846a <__aeabi_dsub+0x3e>
    8620:	e721      	b.n	8466 <__aeabi_dsub+0x3a>
    8622:	0023      	movs	r3, r4
    8624:	433b      	orrs	r3, r7
    8626:	d100      	bne.n	862a <__aeabi_dsub+0x1fe>
    8628:	e1b9      	b.n	899e <__aeabi_dsub+0x572>
    862a:	2280      	movs	r2, #128	; 0x80
    862c:	0312      	lsls	r2, r2, #12
    862e:	4314      	orrs	r4, r2
    8630:	0324      	lsls	r4, r4, #12
    8632:	0b24      	lsrs	r4, r4, #12
    8634:	e79f      	b.n	8576 <__aeabi_dsub+0x14a>
    8636:	002e      	movs	r6, r5
    8638:	e77e      	b.n	8538 <__aeabi_dsub+0x10c>
    863a:	0008      	movs	r0, r1
    863c:	4310      	orrs	r0, r2
    863e:	d100      	bne.n	8642 <__aeabi_dsub+0x216>
    8640:	e0ca      	b.n	87d8 <__aeabi_dsub+0x3ac>
    8642:	1e58      	subs	r0, r3, #1
    8644:	4684      	mov	ip, r0
    8646:	2800      	cmp	r0, #0
    8648:	d000      	beq.n	864c <__aeabi_dsub+0x220>
    864a:	e0e7      	b.n	881c <__aeabi_dsub+0x3f0>
    864c:	4452      	add	r2, sl
    864e:	4552      	cmp	r2, sl
    8650:	4180      	sbcs	r0, r0
    8652:	1864      	adds	r4, r4, r1
    8654:	4240      	negs	r0, r0
    8656:	1824      	adds	r4, r4, r0
    8658:	0017      	movs	r7, r2
    865a:	2601      	movs	r6, #1
    865c:	0223      	lsls	r3, r4, #8
    865e:	d507      	bpl.n	8670 <__aeabi_dsub+0x244>
    8660:	2602      	movs	r6, #2
    8662:	e7cf      	b.n	8604 <__aeabi_dsub+0x1d8>
    8664:	4664      	mov	r4, ip
    8666:	432c      	orrs	r4, r5
    8668:	d100      	bne.n	866c <__aeabi_dsub+0x240>
    866a:	e1b3      	b.n	89d4 <__aeabi_dsub+0x5a8>
    866c:	002c      	movs	r4, r5
    866e:	4667      	mov	r7, ip
    8670:	077b      	lsls	r3, r7, #29
    8672:	d000      	beq.n	8676 <__aeabi_dsub+0x24a>
    8674:	e762      	b.n	853c <__aeabi_dsub+0x110>
    8676:	0763      	lsls	r3, r4, #29
    8678:	08ff      	lsrs	r7, r7, #3
    867a:	431f      	orrs	r7, r3
    867c:	2501      	movs	r5, #1
    867e:	4643      	mov	r3, r8
    8680:	08e4      	lsrs	r4, r4, #3
    8682:	401d      	ands	r5, r3
    8684:	e793      	b.n	85ae <__aeabi_dsub+0x182>
    8686:	2d00      	cmp	r5, #0
    8688:	d178      	bne.n	877c <__aeabi_dsub+0x350>
    868a:	1c75      	adds	r5, r6, #1
    868c:	056d      	lsls	r5, r5, #21
    868e:	0d6d      	lsrs	r5, r5, #21
    8690:	2d01      	cmp	r5, #1
    8692:	dc00      	bgt.n	8696 <__aeabi_dsub+0x26a>
    8694:	e0f2      	b.n	887c <__aeabi_dsub+0x450>
    8696:	4650      	mov	r0, sl
    8698:	1a80      	subs	r0, r0, r2
    869a:	4582      	cmp	sl, r0
    869c:	41bf      	sbcs	r7, r7
    869e:	1a65      	subs	r5, r4, r1
    86a0:	427f      	negs	r7, r7
    86a2:	1bed      	subs	r5, r5, r7
    86a4:	4684      	mov	ip, r0
    86a6:	0228      	lsls	r0, r5, #8
    86a8:	d400      	bmi.n	86ac <__aeabi_dsub+0x280>
    86aa:	e08c      	b.n	87c6 <__aeabi_dsub+0x39a>
    86ac:	4650      	mov	r0, sl
    86ae:	1a17      	subs	r7, r2, r0
    86b0:	42ba      	cmp	r2, r7
    86b2:	4192      	sbcs	r2, r2
    86b4:	1b0c      	subs	r4, r1, r4
    86b6:	4255      	negs	r5, r2
    86b8:	1b65      	subs	r5, r4, r5
    86ba:	4698      	mov	r8, r3
    86bc:	e714      	b.n	84e8 <__aeabi_dsub+0xbc>
    86be:	2501      	movs	r5, #1
    86c0:	4643      	mov	r3, r8
    86c2:	2400      	movs	r4, #0
    86c4:	401d      	ands	r5, r3
    86c6:	2700      	movs	r7, #0
    86c8:	e755      	b.n	8576 <__aeabi_dsub+0x14a>
    86ca:	4c2a      	ldr	r4, [pc, #168]	; (8774 <__aeabi_dsub+0x348>)
    86cc:	1af6      	subs	r6, r6, r3
    86ce:	402c      	ands	r4, r5
    86d0:	e732      	b.n	8538 <__aeabi_dsub+0x10c>
    86d2:	003d      	movs	r5, r7
    86d4:	3828      	subs	r0, #40	; 0x28
    86d6:	4085      	lsls	r5, r0
    86d8:	2700      	movs	r7, #0
    86da:	e717      	b.n	850c <__aeabi_dsub+0xe0>
    86dc:	0038      	movs	r0, r7
    86de:	f000 fb65 	bl	8dac <__clzsi2>
    86e2:	3020      	adds	r0, #32
    86e4:	e706      	b.n	84f4 <__aeabi_dsub+0xc8>
    86e6:	430a      	orrs	r2, r1
    86e8:	0017      	movs	r7, r2
    86ea:	2100      	movs	r1, #0
    86ec:	1e7a      	subs	r2, r7, #1
    86ee:	4197      	sbcs	r7, r2
    86f0:	e6ee      	b.n	84d0 <__aeabi_dsub+0xa4>
    86f2:	2b00      	cmp	r3, #0
    86f4:	d000      	beq.n	86f8 <__aeabi_dsub+0x2cc>
    86f6:	e0e5      	b.n	88c4 <__aeabi_dsub+0x498>
    86f8:	1c73      	adds	r3, r6, #1
    86fa:	469c      	mov	ip, r3
    86fc:	055b      	lsls	r3, r3, #21
    86fe:	0d5b      	lsrs	r3, r3, #21
    8700:	2b01      	cmp	r3, #1
    8702:	dc00      	bgt.n	8706 <__aeabi_dsub+0x2da>
    8704:	e09f      	b.n	8846 <__aeabi_dsub+0x41a>
    8706:	4b1a      	ldr	r3, [pc, #104]	; (8770 <__aeabi_dsub+0x344>)
    8708:	459c      	cmp	ip, r3
    870a:	d100      	bne.n	870e <__aeabi_dsub+0x2e2>
    870c:	e0c5      	b.n	889a <__aeabi_dsub+0x46e>
    870e:	4452      	add	r2, sl
    8710:	4552      	cmp	r2, sl
    8712:	4180      	sbcs	r0, r0
    8714:	1864      	adds	r4, r4, r1
    8716:	4240      	negs	r0, r0
    8718:	1824      	adds	r4, r4, r0
    871a:	07e7      	lsls	r7, r4, #31
    871c:	0852      	lsrs	r2, r2, #1
    871e:	4317      	orrs	r7, r2
    8720:	0864      	lsrs	r4, r4, #1
    8722:	4666      	mov	r6, ip
    8724:	e708      	b.n	8538 <__aeabi_dsub+0x10c>
    8726:	4812      	ldr	r0, [pc, #72]	; (8770 <__aeabi_dsub+0x344>)
    8728:	4285      	cmp	r5, r0
    872a:	d100      	bne.n	872e <__aeabi_dsub+0x302>
    872c:	e085      	b.n	883a <__aeabi_dsub+0x40e>
    872e:	001d      	movs	r5, r3
    8730:	e6bc      	b.n	84ac <__aeabi_dsub+0x80>
    8732:	0029      	movs	r1, r5
    8734:	3e1f      	subs	r6, #31
    8736:	40f1      	lsrs	r1, r6
    8738:	2b20      	cmp	r3, #32
    873a:	d100      	bne.n	873e <__aeabi_dsub+0x312>
    873c:	e07f      	b.n	883e <__aeabi_dsub+0x412>
    873e:	2240      	movs	r2, #64	; 0x40
    8740:	1ad3      	subs	r3, r2, r3
    8742:	409d      	lsls	r5, r3
    8744:	432f      	orrs	r7, r5
    8746:	1e7d      	subs	r5, r7, #1
    8748:	41af      	sbcs	r7, r5
    874a:	2400      	movs	r4, #0
    874c:	430f      	orrs	r7, r1
    874e:	2600      	movs	r6, #0
    8750:	e78e      	b.n	8670 <__aeabi_dsub+0x244>
    8752:	002b      	movs	r3, r5
    8754:	000f      	movs	r7, r1
    8756:	3b20      	subs	r3, #32
    8758:	40df      	lsrs	r7, r3
    875a:	2d20      	cmp	r5, #32
    875c:	d071      	beq.n	8842 <__aeabi_dsub+0x416>
    875e:	2340      	movs	r3, #64	; 0x40
    8760:	1b5d      	subs	r5, r3, r5
    8762:	40a9      	lsls	r1, r5
    8764:	430a      	orrs	r2, r1
    8766:	1e51      	subs	r1, r2, #1
    8768:	418a      	sbcs	r2, r1
    876a:	2100      	movs	r1, #0
    876c:	4317      	orrs	r7, r2
    876e:	e6af      	b.n	84d0 <__aeabi_dsub+0xa4>
    8770:	000007ff 	.word	0x000007ff
    8774:	ff7fffff 	.word	0xff7fffff
    8778:	800fffff 	.word	0x800fffff
    877c:	2e00      	cmp	r6, #0
    877e:	d03e      	beq.n	87fe <__aeabi_dsub+0x3d2>
    8780:	4eb3      	ldr	r6, [pc, #716]	; (8a50 <__aeabi_dsub+0x624>)
    8782:	45b4      	cmp	ip, r6
    8784:	d045      	beq.n	8812 <__aeabi_dsub+0x3e6>
    8786:	2680      	movs	r6, #128	; 0x80
    8788:	0436      	lsls	r6, r6, #16
    878a:	426d      	negs	r5, r5
    878c:	4334      	orrs	r4, r6
    878e:	2d38      	cmp	r5, #56	; 0x38
    8790:	dd00      	ble.n	8794 <__aeabi_dsub+0x368>
    8792:	e0a8      	b.n	88e6 <__aeabi_dsub+0x4ba>
    8794:	2d1f      	cmp	r5, #31
    8796:	dd00      	ble.n	879a <__aeabi_dsub+0x36e>
    8798:	e11f      	b.n	89da <__aeabi_dsub+0x5ae>
    879a:	2620      	movs	r6, #32
    879c:	0027      	movs	r7, r4
    879e:	4650      	mov	r0, sl
    87a0:	1b76      	subs	r6, r6, r5
    87a2:	40b7      	lsls	r7, r6
    87a4:	40e8      	lsrs	r0, r5
    87a6:	4307      	orrs	r7, r0
    87a8:	4650      	mov	r0, sl
    87aa:	40b0      	lsls	r0, r6
    87ac:	1e46      	subs	r6, r0, #1
    87ae:	41b0      	sbcs	r0, r6
    87b0:	40ec      	lsrs	r4, r5
    87b2:	4338      	orrs	r0, r7
    87b4:	1a17      	subs	r7, r2, r0
    87b6:	42ba      	cmp	r2, r7
    87b8:	4192      	sbcs	r2, r2
    87ba:	1b0c      	subs	r4, r1, r4
    87bc:	4252      	negs	r2, r2
    87be:	1aa4      	subs	r4, r4, r2
    87c0:	4666      	mov	r6, ip
    87c2:	4698      	mov	r8, r3
    87c4:	e68b      	b.n	84de <__aeabi_dsub+0xb2>
    87c6:	4664      	mov	r4, ip
    87c8:	4667      	mov	r7, ip
    87ca:	432c      	orrs	r4, r5
    87cc:	d000      	beq.n	87d0 <__aeabi_dsub+0x3a4>
    87ce:	e68b      	b.n	84e8 <__aeabi_dsub+0xbc>
    87d0:	2500      	movs	r5, #0
    87d2:	2600      	movs	r6, #0
    87d4:	2700      	movs	r7, #0
    87d6:	e6ea      	b.n	85ae <__aeabi_dsub+0x182>
    87d8:	001e      	movs	r6, r3
    87da:	e6ad      	b.n	8538 <__aeabi_dsub+0x10c>
    87dc:	2b1f      	cmp	r3, #31
    87de:	dc60      	bgt.n	88a2 <__aeabi_dsub+0x476>
    87e0:	2720      	movs	r7, #32
    87e2:	1af8      	subs	r0, r7, r3
    87e4:	000f      	movs	r7, r1
    87e6:	4684      	mov	ip, r0
    87e8:	4087      	lsls	r7, r0
    87ea:	0010      	movs	r0, r2
    87ec:	40d8      	lsrs	r0, r3
    87ee:	4307      	orrs	r7, r0
    87f0:	4660      	mov	r0, ip
    87f2:	4082      	lsls	r2, r0
    87f4:	1e50      	subs	r0, r2, #1
    87f6:	4182      	sbcs	r2, r0
    87f8:	40d9      	lsrs	r1, r3
    87fa:	4317      	orrs	r7, r2
    87fc:	e6f5      	b.n	85ea <__aeabi_dsub+0x1be>
    87fe:	0026      	movs	r6, r4
    8800:	4650      	mov	r0, sl
    8802:	4306      	orrs	r6, r0
    8804:	d005      	beq.n	8812 <__aeabi_dsub+0x3e6>
    8806:	43ed      	mvns	r5, r5
    8808:	2d00      	cmp	r5, #0
    880a:	d0d3      	beq.n	87b4 <__aeabi_dsub+0x388>
    880c:	4e90      	ldr	r6, [pc, #576]	; (8a50 <__aeabi_dsub+0x624>)
    880e:	45b4      	cmp	ip, r6
    8810:	d1bd      	bne.n	878e <__aeabi_dsub+0x362>
    8812:	000c      	movs	r4, r1
    8814:	0017      	movs	r7, r2
    8816:	4666      	mov	r6, ip
    8818:	4698      	mov	r8, r3
    881a:	e68d      	b.n	8538 <__aeabi_dsub+0x10c>
    881c:	488c      	ldr	r0, [pc, #560]	; (8a50 <__aeabi_dsub+0x624>)
    881e:	4283      	cmp	r3, r0
    8820:	d00b      	beq.n	883a <__aeabi_dsub+0x40e>
    8822:	4663      	mov	r3, ip
    8824:	e6d9      	b.n	85da <__aeabi_dsub+0x1ae>
    8826:	2d00      	cmp	r5, #0
    8828:	d000      	beq.n	882c <__aeabi_dsub+0x400>
    882a:	e096      	b.n	895a <__aeabi_dsub+0x52e>
    882c:	0008      	movs	r0, r1
    882e:	4310      	orrs	r0, r2
    8830:	d100      	bne.n	8834 <__aeabi_dsub+0x408>
    8832:	e0e2      	b.n	89fa <__aeabi_dsub+0x5ce>
    8834:	000c      	movs	r4, r1
    8836:	0017      	movs	r7, r2
    8838:	4698      	mov	r8, r3
    883a:	4e85      	ldr	r6, [pc, #532]	; (8a50 <__aeabi_dsub+0x624>)
    883c:	e67c      	b.n	8538 <__aeabi_dsub+0x10c>
    883e:	2500      	movs	r5, #0
    8840:	e780      	b.n	8744 <__aeabi_dsub+0x318>
    8842:	2100      	movs	r1, #0
    8844:	e78e      	b.n	8764 <__aeabi_dsub+0x338>
    8846:	0023      	movs	r3, r4
    8848:	4650      	mov	r0, sl
    884a:	4303      	orrs	r3, r0
    884c:	2e00      	cmp	r6, #0
    884e:	d000      	beq.n	8852 <__aeabi_dsub+0x426>
    8850:	e0a8      	b.n	89a4 <__aeabi_dsub+0x578>
    8852:	2b00      	cmp	r3, #0
    8854:	d100      	bne.n	8858 <__aeabi_dsub+0x42c>
    8856:	e0de      	b.n	8a16 <__aeabi_dsub+0x5ea>
    8858:	000b      	movs	r3, r1
    885a:	4313      	orrs	r3, r2
    885c:	d100      	bne.n	8860 <__aeabi_dsub+0x434>
    885e:	e66b      	b.n	8538 <__aeabi_dsub+0x10c>
    8860:	4452      	add	r2, sl
    8862:	4552      	cmp	r2, sl
    8864:	4180      	sbcs	r0, r0
    8866:	1864      	adds	r4, r4, r1
    8868:	4240      	negs	r0, r0
    886a:	1824      	adds	r4, r4, r0
    886c:	0017      	movs	r7, r2
    886e:	0223      	lsls	r3, r4, #8
    8870:	d400      	bmi.n	8874 <__aeabi_dsub+0x448>
    8872:	e6fd      	b.n	8670 <__aeabi_dsub+0x244>
    8874:	4b77      	ldr	r3, [pc, #476]	; (8a54 <__aeabi_dsub+0x628>)
    8876:	4666      	mov	r6, ip
    8878:	401c      	ands	r4, r3
    887a:	e65d      	b.n	8538 <__aeabi_dsub+0x10c>
    887c:	0025      	movs	r5, r4
    887e:	4650      	mov	r0, sl
    8880:	4305      	orrs	r5, r0
    8882:	2e00      	cmp	r6, #0
    8884:	d1cf      	bne.n	8826 <__aeabi_dsub+0x3fa>
    8886:	2d00      	cmp	r5, #0
    8888:	d14f      	bne.n	892a <__aeabi_dsub+0x4fe>
    888a:	000c      	movs	r4, r1
    888c:	4314      	orrs	r4, r2
    888e:	d100      	bne.n	8892 <__aeabi_dsub+0x466>
    8890:	e0a0      	b.n	89d4 <__aeabi_dsub+0x5a8>
    8892:	000c      	movs	r4, r1
    8894:	0017      	movs	r7, r2
    8896:	4698      	mov	r8, r3
    8898:	e64e      	b.n	8538 <__aeabi_dsub+0x10c>
    889a:	4666      	mov	r6, ip
    889c:	2400      	movs	r4, #0
    889e:	2700      	movs	r7, #0
    88a0:	e685      	b.n	85ae <__aeabi_dsub+0x182>
    88a2:	001f      	movs	r7, r3
    88a4:	0008      	movs	r0, r1
    88a6:	3f20      	subs	r7, #32
    88a8:	40f8      	lsrs	r0, r7
    88aa:	0007      	movs	r7, r0
    88ac:	2b20      	cmp	r3, #32
    88ae:	d100      	bne.n	88b2 <__aeabi_dsub+0x486>
    88b0:	e08e      	b.n	89d0 <__aeabi_dsub+0x5a4>
    88b2:	2040      	movs	r0, #64	; 0x40
    88b4:	1ac3      	subs	r3, r0, r3
    88b6:	4099      	lsls	r1, r3
    88b8:	430a      	orrs	r2, r1
    88ba:	1e51      	subs	r1, r2, #1
    88bc:	418a      	sbcs	r2, r1
    88be:	2100      	movs	r1, #0
    88c0:	4317      	orrs	r7, r2
    88c2:	e692      	b.n	85ea <__aeabi_dsub+0x1be>
    88c4:	2e00      	cmp	r6, #0
    88c6:	d114      	bne.n	88f2 <__aeabi_dsub+0x4c6>
    88c8:	0026      	movs	r6, r4
    88ca:	4650      	mov	r0, sl
    88cc:	4306      	orrs	r6, r0
    88ce:	d062      	beq.n	8996 <__aeabi_dsub+0x56a>
    88d0:	43db      	mvns	r3, r3
    88d2:	2b00      	cmp	r3, #0
    88d4:	d15c      	bne.n	8990 <__aeabi_dsub+0x564>
    88d6:	1887      	adds	r7, r0, r2
    88d8:	4297      	cmp	r7, r2
    88da:	4192      	sbcs	r2, r2
    88dc:	1864      	adds	r4, r4, r1
    88de:	4252      	negs	r2, r2
    88e0:	18a4      	adds	r4, r4, r2
    88e2:	4666      	mov	r6, ip
    88e4:	e687      	b.n	85f6 <__aeabi_dsub+0x1ca>
    88e6:	4650      	mov	r0, sl
    88e8:	4320      	orrs	r0, r4
    88ea:	1e44      	subs	r4, r0, #1
    88ec:	41a0      	sbcs	r0, r4
    88ee:	2400      	movs	r4, #0
    88f0:	e760      	b.n	87b4 <__aeabi_dsub+0x388>
    88f2:	4e57      	ldr	r6, [pc, #348]	; (8a50 <__aeabi_dsub+0x624>)
    88f4:	45b4      	cmp	ip, r6
    88f6:	d04e      	beq.n	8996 <__aeabi_dsub+0x56a>
    88f8:	2680      	movs	r6, #128	; 0x80
    88fa:	0436      	lsls	r6, r6, #16
    88fc:	425b      	negs	r3, r3
    88fe:	4334      	orrs	r4, r6
    8900:	2b38      	cmp	r3, #56	; 0x38
    8902:	dd00      	ble.n	8906 <__aeabi_dsub+0x4da>
    8904:	e07f      	b.n	8a06 <__aeabi_dsub+0x5da>
    8906:	2b1f      	cmp	r3, #31
    8908:	dd00      	ble.n	890c <__aeabi_dsub+0x4e0>
    890a:	e08b      	b.n	8a24 <__aeabi_dsub+0x5f8>
    890c:	2620      	movs	r6, #32
    890e:	0027      	movs	r7, r4
    8910:	4650      	mov	r0, sl
    8912:	1af6      	subs	r6, r6, r3
    8914:	40b7      	lsls	r7, r6
    8916:	40d8      	lsrs	r0, r3
    8918:	4307      	orrs	r7, r0
    891a:	4650      	mov	r0, sl
    891c:	40b0      	lsls	r0, r6
    891e:	1e46      	subs	r6, r0, #1
    8920:	41b0      	sbcs	r0, r6
    8922:	4307      	orrs	r7, r0
    8924:	40dc      	lsrs	r4, r3
    8926:	18bf      	adds	r7, r7, r2
    8928:	e7d6      	b.n	88d8 <__aeabi_dsub+0x4ac>
    892a:	000d      	movs	r5, r1
    892c:	4315      	orrs	r5, r2
    892e:	d100      	bne.n	8932 <__aeabi_dsub+0x506>
    8930:	e602      	b.n	8538 <__aeabi_dsub+0x10c>
    8932:	4650      	mov	r0, sl
    8934:	1a80      	subs	r0, r0, r2
    8936:	4582      	cmp	sl, r0
    8938:	41bf      	sbcs	r7, r7
    893a:	1a65      	subs	r5, r4, r1
    893c:	427f      	negs	r7, r7
    893e:	1bed      	subs	r5, r5, r7
    8940:	4684      	mov	ip, r0
    8942:	0228      	lsls	r0, r5, #8
    8944:	d400      	bmi.n	8948 <__aeabi_dsub+0x51c>
    8946:	e68d      	b.n	8664 <__aeabi_dsub+0x238>
    8948:	4650      	mov	r0, sl
    894a:	1a17      	subs	r7, r2, r0
    894c:	42ba      	cmp	r2, r7
    894e:	4192      	sbcs	r2, r2
    8950:	1b0c      	subs	r4, r1, r4
    8952:	4252      	negs	r2, r2
    8954:	1aa4      	subs	r4, r4, r2
    8956:	4698      	mov	r8, r3
    8958:	e5ee      	b.n	8538 <__aeabi_dsub+0x10c>
    895a:	000d      	movs	r5, r1
    895c:	4315      	orrs	r5, r2
    895e:	d100      	bne.n	8962 <__aeabi_dsub+0x536>
    8960:	e76b      	b.n	883a <__aeabi_dsub+0x40e>
    8962:	4650      	mov	r0, sl
    8964:	0767      	lsls	r7, r4, #29
    8966:	08c0      	lsrs	r0, r0, #3
    8968:	4307      	orrs	r7, r0
    896a:	2080      	movs	r0, #128	; 0x80
    896c:	08e4      	lsrs	r4, r4, #3
    896e:	0300      	lsls	r0, r0, #12
    8970:	4204      	tst	r4, r0
    8972:	d007      	beq.n	8984 <__aeabi_dsub+0x558>
    8974:	08cd      	lsrs	r5, r1, #3
    8976:	4205      	tst	r5, r0
    8978:	d104      	bne.n	8984 <__aeabi_dsub+0x558>
    897a:	002c      	movs	r4, r5
    897c:	4698      	mov	r8, r3
    897e:	08d7      	lsrs	r7, r2, #3
    8980:	0749      	lsls	r1, r1, #29
    8982:	430f      	orrs	r7, r1
    8984:	0f7b      	lsrs	r3, r7, #29
    8986:	00e4      	lsls	r4, r4, #3
    8988:	431c      	orrs	r4, r3
    898a:	00ff      	lsls	r7, r7, #3
    898c:	4e30      	ldr	r6, [pc, #192]	; (8a50 <__aeabi_dsub+0x624>)
    898e:	e5d3      	b.n	8538 <__aeabi_dsub+0x10c>
    8990:	4e2f      	ldr	r6, [pc, #188]	; (8a50 <__aeabi_dsub+0x624>)
    8992:	45b4      	cmp	ip, r6
    8994:	d1b4      	bne.n	8900 <__aeabi_dsub+0x4d4>
    8996:	000c      	movs	r4, r1
    8998:	0017      	movs	r7, r2
    899a:	4666      	mov	r6, ip
    899c:	e5cc      	b.n	8538 <__aeabi_dsub+0x10c>
    899e:	2700      	movs	r7, #0
    89a0:	2400      	movs	r4, #0
    89a2:	e5e8      	b.n	8576 <__aeabi_dsub+0x14a>
    89a4:	2b00      	cmp	r3, #0
    89a6:	d039      	beq.n	8a1c <__aeabi_dsub+0x5f0>
    89a8:	000b      	movs	r3, r1
    89aa:	4313      	orrs	r3, r2
    89ac:	d100      	bne.n	89b0 <__aeabi_dsub+0x584>
    89ae:	e744      	b.n	883a <__aeabi_dsub+0x40e>
    89b0:	08c0      	lsrs	r0, r0, #3
    89b2:	0767      	lsls	r7, r4, #29
    89b4:	4307      	orrs	r7, r0
    89b6:	2080      	movs	r0, #128	; 0x80
    89b8:	08e4      	lsrs	r4, r4, #3
    89ba:	0300      	lsls	r0, r0, #12
    89bc:	4204      	tst	r4, r0
    89be:	d0e1      	beq.n	8984 <__aeabi_dsub+0x558>
    89c0:	08cb      	lsrs	r3, r1, #3
    89c2:	4203      	tst	r3, r0
    89c4:	d1de      	bne.n	8984 <__aeabi_dsub+0x558>
    89c6:	08d7      	lsrs	r7, r2, #3
    89c8:	0749      	lsls	r1, r1, #29
    89ca:	430f      	orrs	r7, r1
    89cc:	001c      	movs	r4, r3
    89ce:	e7d9      	b.n	8984 <__aeabi_dsub+0x558>
    89d0:	2100      	movs	r1, #0
    89d2:	e771      	b.n	88b8 <__aeabi_dsub+0x48c>
    89d4:	2500      	movs	r5, #0
    89d6:	2700      	movs	r7, #0
    89d8:	e5e9      	b.n	85ae <__aeabi_dsub+0x182>
    89da:	002e      	movs	r6, r5
    89dc:	0027      	movs	r7, r4
    89de:	3e20      	subs	r6, #32
    89e0:	40f7      	lsrs	r7, r6
    89e2:	2d20      	cmp	r5, #32
    89e4:	d02f      	beq.n	8a46 <__aeabi_dsub+0x61a>
    89e6:	2640      	movs	r6, #64	; 0x40
    89e8:	1b75      	subs	r5, r6, r5
    89ea:	40ac      	lsls	r4, r5
    89ec:	4650      	mov	r0, sl
    89ee:	4320      	orrs	r0, r4
    89f0:	1e44      	subs	r4, r0, #1
    89f2:	41a0      	sbcs	r0, r4
    89f4:	2400      	movs	r4, #0
    89f6:	4338      	orrs	r0, r7
    89f8:	e6dc      	b.n	87b4 <__aeabi_dsub+0x388>
    89fa:	2480      	movs	r4, #128	; 0x80
    89fc:	2500      	movs	r5, #0
    89fe:	0324      	lsls	r4, r4, #12
    8a00:	4e13      	ldr	r6, [pc, #76]	; (8a50 <__aeabi_dsub+0x624>)
    8a02:	2700      	movs	r7, #0
    8a04:	e5d3      	b.n	85ae <__aeabi_dsub+0x182>
    8a06:	4650      	mov	r0, sl
    8a08:	4320      	orrs	r0, r4
    8a0a:	0007      	movs	r7, r0
    8a0c:	1e78      	subs	r0, r7, #1
    8a0e:	4187      	sbcs	r7, r0
    8a10:	2400      	movs	r4, #0
    8a12:	18bf      	adds	r7, r7, r2
    8a14:	e760      	b.n	88d8 <__aeabi_dsub+0x4ac>
    8a16:	000c      	movs	r4, r1
    8a18:	0017      	movs	r7, r2
    8a1a:	e58d      	b.n	8538 <__aeabi_dsub+0x10c>
    8a1c:	000c      	movs	r4, r1
    8a1e:	0017      	movs	r7, r2
    8a20:	4e0b      	ldr	r6, [pc, #44]	; (8a50 <__aeabi_dsub+0x624>)
    8a22:	e589      	b.n	8538 <__aeabi_dsub+0x10c>
    8a24:	001e      	movs	r6, r3
    8a26:	0027      	movs	r7, r4
    8a28:	3e20      	subs	r6, #32
    8a2a:	40f7      	lsrs	r7, r6
    8a2c:	2b20      	cmp	r3, #32
    8a2e:	d00c      	beq.n	8a4a <__aeabi_dsub+0x61e>
    8a30:	2640      	movs	r6, #64	; 0x40
    8a32:	1af3      	subs	r3, r6, r3
    8a34:	409c      	lsls	r4, r3
    8a36:	4650      	mov	r0, sl
    8a38:	4320      	orrs	r0, r4
    8a3a:	1e44      	subs	r4, r0, #1
    8a3c:	41a0      	sbcs	r0, r4
    8a3e:	4307      	orrs	r7, r0
    8a40:	2400      	movs	r4, #0
    8a42:	18bf      	adds	r7, r7, r2
    8a44:	e748      	b.n	88d8 <__aeabi_dsub+0x4ac>
    8a46:	2400      	movs	r4, #0
    8a48:	e7d0      	b.n	89ec <__aeabi_dsub+0x5c0>
    8a4a:	2400      	movs	r4, #0
    8a4c:	e7f3      	b.n	8a36 <__aeabi_dsub+0x60a>
    8a4e:	46c0      	nop			; (mov r8, r8)
    8a50:	000007ff 	.word	0x000007ff
    8a54:	ff7fffff 	.word	0xff7fffff

00008a58 <__aeabi_dcmpun>:
    8a58:	b570      	push	{r4, r5, r6, lr}
    8a5a:	4e0e      	ldr	r6, [pc, #56]	; (8a94 <__aeabi_dcmpun+0x3c>)
    8a5c:	030d      	lsls	r5, r1, #12
    8a5e:	031c      	lsls	r4, r3, #12
    8a60:	0049      	lsls	r1, r1, #1
    8a62:	005b      	lsls	r3, r3, #1
    8a64:	0b2d      	lsrs	r5, r5, #12
    8a66:	0d49      	lsrs	r1, r1, #21
    8a68:	0b24      	lsrs	r4, r4, #12
    8a6a:	0d5b      	lsrs	r3, r3, #21
    8a6c:	42b1      	cmp	r1, r6
    8a6e:	d004      	beq.n	8a7a <__aeabi_dcmpun+0x22>
    8a70:	4908      	ldr	r1, [pc, #32]	; (8a94 <__aeabi_dcmpun+0x3c>)
    8a72:	2000      	movs	r0, #0
    8a74:	428b      	cmp	r3, r1
    8a76:	d008      	beq.n	8a8a <__aeabi_dcmpun+0x32>
    8a78:	bd70      	pop	{r4, r5, r6, pc}
    8a7a:	4305      	orrs	r5, r0
    8a7c:	2001      	movs	r0, #1
    8a7e:	2d00      	cmp	r5, #0
    8a80:	d1fa      	bne.n	8a78 <__aeabi_dcmpun+0x20>
    8a82:	4904      	ldr	r1, [pc, #16]	; (8a94 <__aeabi_dcmpun+0x3c>)
    8a84:	2000      	movs	r0, #0
    8a86:	428b      	cmp	r3, r1
    8a88:	d1f6      	bne.n	8a78 <__aeabi_dcmpun+0x20>
    8a8a:	4314      	orrs	r4, r2
    8a8c:	0020      	movs	r0, r4
    8a8e:	1e44      	subs	r4, r0, #1
    8a90:	41a0      	sbcs	r0, r4
    8a92:	e7f1      	b.n	8a78 <__aeabi_dcmpun+0x20>
    8a94:	000007ff 	.word	0x000007ff

00008a98 <__aeabi_d2iz>:
    8a98:	b530      	push	{r4, r5, lr}
    8a9a:	4d13      	ldr	r5, [pc, #76]	; (8ae8 <__aeabi_d2iz+0x50>)
    8a9c:	030a      	lsls	r2, r1, #12
    8a9e:	004b      	lsls	r3, r1, #1
    8aa0:	0b12      	lsrs	r2, r2, #12
    8aa2:	0d5b      	lsrs	r3, r3, #21
    8aa4:	0fc9      	lsrs	r1, r1, #31
    8aa6:	2400      	movs	r4, #0
    8aa8:	42ab      	cmp	r3, r5
    8aaa:	dd10      	ble.n	8ace <__aeabi_d2iz+0x36>
    8aac:	4c0f      	ldr	r4, [pc, #60]	; (8aec <__aeabi_d2iz+0x54>)
    8aae:	42a3      	cmp	r3, r4
    8ab0:	dc0f      	bgt.n	8ad2 <__aeabi_d2iz+0x3a>
    8ab2:	2480      	movs	r4, #128	; 0x80
    8ab4:	4d0e      	ldr	r5, [pc, #56]	; (8af0 <__aeabi_d2iz+0x58>)
    8ab6:	0364      	lsls	r4, r4, #13
    8ab8:	4322      	orrs	r2, r4
    8aba:	1aed      	subs	r5, r5, r3
    8abc:	2d1f      	cmp	r5, #31
    8abe:	dd0b      	ble.n	8ad8 <__aeabi_d2iz+0x40>
    8ac0:	480c      	ldr	r0, [pc, #48]	; (8af4 <__aeabi_d2iz+0x5c>)
    8ac2:	1ac3      	subs	r3, r0, r3
    8ac4:	40da      	lsrs	r2, r3
    8ac6:	4254      	negs	r4, r2
    8ac8:	2900      	cmp	r1, #0
    8aca:	d100      	bne.n	8ace <__aeabi_d2iz+0x36>
    8acc:	0014      	movs	r4, r2
    8ace:	0020      	movs	r0, r4
    8ad0:	bd30      	pop	{r4, r5, pc}
    8ad2:	4b09      	ldr	r3, [pc, #36]	; (8af8 <__aeabi_d2iz+0x60>)
    8ad4:	18cc      	adds	r4, r1, r3
    8ad6:	e7fa      	b.n	8ace <__aeabi_d2iz+0x36>
    8ad8:	4c08      	ldr	r4, [pc, #32]	; (8afc <__aeabi_d2iz+0x64>)
    8ada:	40e8      	lsrs	r0, r5
    8adc:	46a4      	mov	ip, r4
    8ade:	4463      	add	r3, ip
    8ae0:	409a      	lsls	r2, r3
    8ae2:	4302      	orrs	r2, r0
    8ae4:	e7ef      	b.n	8ac6 <__aeabi_d2iz+0x2e>
    8ae6:	46c0      	nop			; (mov r8, r8)
    8ae8:	000003fe 	.word	0x000003fe
    8aec:	0000041d 	.word	0x0000041d
    8af0:	00000433 	.word	0x00000433
    8af4:	00000413 	.word	0x00000413
    8af8:	7fffffff 	.word	0x7fffffff
    8afc:	fffffbed 	.word	0xfffffbed

00008b00 <__aeabi_i2d>:
    8b00:	b570      	push	{r4, r5, r6, lr}
    8b02:	2800      	cmp	r0, #0
    8b04:	d030      	beq.n	8b68 <__aeabi_i2d+0x68>
    8b06:	17c3      	asrs	r3, r0, #31
    8b08:	18c4      	adds	r4, r0, r3
    8b0a:	405c      	eors	r4, r3
    8b0c:	0fc5      	lsrs	r5, r0, #31
    8b0e:	0020      	movs	r0, r4
    8b10:	f000 f94c 	bl	8dac <__clzsi2>
    8b14:	4b17      	ldr	r3, [pc, #92]	; (8b74 <__aeabi_i2d+0x74>)
    8b16:	4a18      	ldr	r2, [pc, #96]	; (8b78 <__aeabi_i2d+0x78>)
    8b18:	1a1b      	subs	r3, r3, r0
    8b1a:	1ad2      	subs	r2, r2, r3
    8b1c:	2a1f      	cmp	r2, #31
    8b1e:	dd18      	ble.n	8b52 <__aeabi_i2d+0x52>
    8b20:	4a16      	ldr	r2, [pc, #88]	; (8b7c <__aeabi_i2d+0x7c>)
    8b22:	1ad2      	subs	r2, r2, r3
    8b24:	4094      	lsls	r4, r2
    8b26:	2200      	movs	r2, #0
    8b28:	0324      	lsls	r4, r4, #12
    8b2a:	055b      	lsls	r3, r3, #21
    8b2c:	0b24      	lsrs	r4, r4, #12
    8b2e:	0d5b      	lsrs	r3, r3, #21
    8b30:	2100      	movs	r1, #0
    8b32:	0010      	movs	r0, r2
    8b34:	0324      	lsls	r4, r4, #12
    8b36:	0d0a      	lsrs	r2, r1, #20
    8b38:	0b24      	lsrs	r4, r4, #12
    8b3a:	0512      	lsls	r2, r2, #20
    8b3c:	4322      	orrs	r2, r4
    8b3e:	4c10      	ldr	r4, [pc, #64]	; (8b80 <__aeabi_i2d+0x80>)
    8b40:	051b      	lsls	r3, r3, #20
    8b42:	4022      	ands	r2, r4
    8b44:	4313      	orrs	r3, r2
    8b46:	005b      	lsls	r3, r3, #1
    8b48:	07ed      	lsls	r5, r5, #31
    8b4a:	085b      	lsrs	r3, r3, #1
    8b4c:	432b      	orrs	r3, r5
    8b4e:	0019      	movs	r1, r3
    8b50:	bd70      	pop	{r4, r5, r6, pc}
    8b52:	0021      	movs	r1, r4
    8b54:	4091      	lsls	r1, r2
    8b56:	000a      	movs	r2, r1
    8b58:	210b      	movs	r1, #11
    8b5a:	1a08      	subs	r0, r1, r0
    8b5c:	40c4      	lsrs	r4, r0
    8b5e:	055b      	lsls	r3, r3, #21
    8b60:	0324      	lsls	r4, r4, #12
    8b62:	0b24      	lsrs	r4, r4, #12
    8b64:	0d5b      	lsrs	r3, r3, #21
    8b66:	e7e3      	b.n	8b30 <__aeabi_i2d+0x30>
    8b68:	2500      	movs	r5, #0
    8b6a:	2300      	movs	r3, #0
    8b6c:	2400      	movs	r4, #0
    8b6e:	2200      	movs	r2, #0
    8b70:	e7de      	b.n	8b30 <__aeabi_i2d+0x30>
    8b72:	46c0      	nop			; (mov r8, r8)
    8b74:	0000041e 	.word	0x0000041e
    8b78:	00000433 	.word	0x00000433
    8b7c:	00000413 	.word	0x00000413
    8b80:	800fffff 	.word	0x800fffff

00008b84 <__aeabi_ui2d>:
    8b84:	b510      	push	{r4, lr}
    8b86:	1e04      	subs	r4, r0, #0
    8b88:	d028      	beq.n	8bdc <__aeabi_ui2d+0x58>
    8b8a:	f000 f90f 	bl	8dac <__clzsi2>
    8b8e:	4b15      	ldr	r3, [pc, #84]	; (8be4 <__aeabi_ui2d+0x60>)
    8b90:	4a15      	ldr	r2, [pc, #84]	; (8be8 <__aeabi_ui2d+0x64>)
    8b92:	1a1b      	subs	r3, r3, r0
    8b94:	1ad2      	subs	r2, r2, r3
    8b96:	2a1f      	cmp	r2, #31
    8b98:	dd15      	ble.n	8bc6 <__aeabi_ui2d+0x42>
    8b9a:	4a14      	ldr	r2, [pc, #80]	; (8bec <__aeabi_ui2d+0x68>)
    8b9c:	1ad2      	subs	r2, r2, r3
    8b9e:	4094      	lsls	r4, r2
    8ba0:	2200      	movs	r2, #0
    8ba2:	0324      	lsls	r4, r4, #12
    8ba4:	055b      	lsls	r3, r3, #21
    8ba6:	0b24      	lsrs	r4, r4, #12
    8ba8:	0d5b      	lsrs	r3, r3, #21
    8baa:	2100      	movs	r1, #0
    8bac:	0010      	movs	r0, r2
    8bae:	0324      	lsls	r4, r4, #12
    8bb0:	0d0a      	lsrs	r2, r1, #20
    8bb2:	0b24      	lsrs	r4, r4, #12
    8bb4:	0512      	lsls	r2, r2, #20
    8bb6:	4322      	orrs	r2, r4
    8bb8:	4c0d      	ldr	r4, [pc, #52]	; (8bf0 <__aeabi_ui2d+0x6c>)
    8bba:	051b      	lsls	r3, r3, #20
    8bbc:	4022      	ands	r2, r4
    8bbe:	4313      	orrs	r3, r2
    8bc0:	005b      	lsls	r3, r3, #1
    8bc2:	0859      	lsrs	r1, r3, #1
    8bc4:	bd10      	pop	{r4, pc}
    8bc6:	0021      	movs	r1, r4
    8bc8:	4091      	lsls	r1, r2
    8bca:	000a      	movs	r2, r1
    8bcc:	210b      	movs	r1, #11
    8bce:	1a08      	subs	r0, r1, r0
    8bd0:	40c4      	lsrs	r4, r0
    8bd2:	055b      	lsls	r3, r3, #21
    8bd4:	0324      	lsls	r4, r4, #12
    8bd6:	0b24      	lsrs	r4, r4, #12
    8bd8:	0d5b      	lsrs	r3, r3, #21
    8bda:	e7e6      	b.n	8baa <__aeabi_ui2d+0x26>
    8bdc:	2300      	movs	r3, #0
    8bde:	2400      	movs	r4, #0
    8be0:	2200      	movs	r2, #0
    8be2:	e7e2      	b.n	8baa <__aeabi_ui2d+0x26>
    8be4:	0000041e 	.word	0x0000041e
    8be8:	00000433 	.word	0x00000433
    8bec:	00000413 	.word	0x00000413
    8bf0:	800fffff 	.word	0x800fffff

00008bf4 <__aeabi_f2d>:
    8bf4:	0041      	lsls	r1, r0, #1
    8bf6:	0e09      	lsrs	r1, r1, #24
    8bf8:	1c4b      	adds	r3, r1, #1
    8bfa:	b570      	push	{r4, r5, r6, lr}
    8bfc:	b2db      	uxtb	r3, r3
    8bfe:	0246      	lsls	r6, r0, #9
    8c00:	0a75      	lsrs	r5, r6, #9
    8c02:	0fc4      	lsrs	r4, r0, #31
    8c04:	2b01      	cmp	r3, #1
    8c06:	dd14      	ble.n	8c32 <__aeabi_f2d+0x3e>
    8c08:	23e0      	movs	r3, #224	; 0xe0
    8c0a:	009b      	lsls	r3, r3, #2
    8c0c:	076d      	lsls	r5, r5, #29
    8c0e:	0b36      	lsrs	r6, r6, #12
    8c10:	18cb      	adds	r3, r1, r3
    8c12:	2100      	movs	r1, #0
    8c14:	0d0a      	lsrs	r2, r1, #20
    8c16:	0028      	movs	r0, r5
    8c18:	0512      	lsls	r2, r2, #20
    8c1a:	4d1c      	ldr	r5, [pc, #112]	; (8c8c <__aeabi_f2d+0x98>)
    8c1c:	4332      	orrs	r2, r6
    8c1e:	055b      	lsls	r3, r3, #21
    8c20:	402a      	ands	r2, r5
    8c22:	085b      	lsrs	r3, r3, #1
    8c24:	4313      	orrs	r3, r2
    8c26:	005b      	lsls	r3, r3, #1
    8c28:	07e4      	lsls	r4, r4, #31
    8c2a:	085b      	lsrs	r3, r3, #1
    8c2c:	4323      	orrs	r3, r4
    8c2e:	0019      	movs	r1, r3
    8c30:	bd70      	pop	{r4, r5, r6, pc}
    8c32:	2900      	cmp	r1, #0
    8c34:	d114      	bne.n	8c60 <__aeabi_f2d+0x6c>
    8c36:	2d00      	cmp	r5, #0
    8c38:	d01e      	beq.n	8c78 <__aeabi_f2d+0x84>
    8c3a:	0028      	movs	r0, r5
    8c3c:	f000 f8b6 	bl	8dac <__clzsi2>
    8c40:	280a      	cmp	r0, #10
    8c42:	dc1c      	bgt.n	8c7e <__aeabi_f2d+0x8a>
    8c44:	230b      	movs	r3, #11
    8c46:	002a      	movs	r2, r5
    8c48:	1a1b      	subs	r3, r3, r0
    8c4a:	40da      	lsrs	r2, r3
    8c4c:	0003      	movs	r3, r0
    8c4e:	3315      	adds	r3, #21
    8c50:	409d      	lsls	r5, r3
    8c52:	4b0f      	ldr	r3, [pc, #60]	; (8c90 <__aeabi_f2d+0x9c>)
    8c54:	0312      	lsls	r2, r2, #12
    8c56:	1a1b      	subs	r3, r3, r0
    8c58:	055b      	lsls	r3, r3, #21
    8c5a:	0b16      	lsrs	r6, r2, #12
    8c5c:	0d5b      	lsrs	r3, r3, #21
    8c5e:	e7d8      	b.n	8c12 <__aeabi_f2d+0x1e>
    8c60:	2d00      	cmp	r5, #0
    8c62:	d006      	beq.n	8c72 <__aeabi_f2d+0x7e>
    8c64:	0b32      	lsrs	r2, r6, #12
    8c66:	2680      	movs	r6, #128	; 0x80
    8c68:	0336      	lsls	r6, r6, #12
    8c6a:	076d      	lsls	r5, r5, #29
    8c6c:	4316      	orrs	r6, r2
    8c6e:	4b09      	ldr	r3, [pc, #36]	; (8c94 <__aeabi_f2d+0xa0>)
    8c70:	e7cf      	b.n	8c12 <__aeabi_f2d+0x1e>
    8c72:	4b08      	ldr	r3, [pc, #32]	; (8c94 <__aeabi_f2d+0xa0>)
    8c74:	2600      	movs	r6, #0
    8c76:	e7cc      	b.n	8c12 <__aeabi_f2d+0x1e>
    8c78:	2300      	movs	r3, #0
    8c7a:	2600      	movs	r6, #0
    8c7c:	e7c9      	b.n	8c12 <__aeabi_f2d+0x1e>
    8c7e:	0003      	movs	r3, r0
    8c80:	002a      	movs	r2, r5
    8c82:	3b0b      	subs	r3, #11
    8c84:	409a      	lsls	r2, r3
    8c86:	2500      	movs	r5, #0
    8c88:	e7e3      	b.n	8c52 <__aeabi_f2d+0x5e>
    8c8a:	46c0      	nop			; (mov r8, r8)
    8c8c:	800fffff 	.word	0x800fffff
    8c90:	00000389 	.word	0x00000389
    8c94:	000007ff 	.word	0x000007ff

00008c98 <__aeabi_d2f>:
    8c98:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c9a:	004c      	lsls	r4, r1, #1
    8c9c:	0d64      	lsrs	r4, r4, #21
    8c9e:	030b      	lsls	r3, r1, #12
    8ca0:	1c62      	adds	r2, r4, #1
    8ca2:	0f45      	lsrs	r5, r0, #29
    8ca4:	0a5b      	lsrs	r3, r3, #9
    8ca6:	0552      	lsls	r2, r2, #21
    8ca8:	432b      	orrs	r3, r5
    8caa:	0fc9      	lsrs	r1, r1, #31
    8cac:	00c5      	lsls	r5, r0, #3
    8cae:	0d52      	lsrs	r2, r2, #21
    8cb0:	2a01      	cmp	r2, #1
    8cb2:	dd28      	ble.n	8d06 <__aeabi_d2f+0x6e>
    8cb4:	4a3a      	ldr	r2, [pc, #232]	; (8da0 <__aeabi_d2f+0x108>)
    8cb6:	18a6      	adds	r6, r4, r2
    8cb8:	2efe      	cmp	r6, #254	; 0xfe
    8cba:	dc1b      	bgt.n	8cf4 <__aeabi_d2f+0x5c>
    8cbc:	2e00      	cmp	r6, #0
    8cbe:	dd3e      	ble.n	8d3e <__aeabi_d2f+0xa6>
    8cc0:	0180      	lsls	r0, r0, #6
    8cc2:	0002      	movs	r2, r0
    8cc4:	1e50      	subs	r0, r2, #1
    8cc6:	4182      	sbcs	r2, r0
    8cc8:	0f6d      	lsrs	r5, r5, #29
    8cca:	432a      	orrs	r2, r5
    8ccc:	00db      	lsls	r3, r3, #3
    8cce:	4313      	orrs	r3, r2
    8cd0:	075a      	lsls	r2, r3, #29
    8cd2:	d004      	beq.n	8cde <__aeabi_d2f+0x46>
    8cd4:	220f      	movs	r2, #15
    8cd6:	401a      	ands	r2, r3
    8cd8:	2a04      	cmp	r2, #4
    8cda:	d000      	beq.n	8cde <__aeabi_d2f+0x46>
    8cdc:	3304      	adds	r3, #4
    8cde:	2280      	movs	r2, #128	; 0x80
    8ce0:	04d2      	lsls	r2, r2, #19
    8ce2:	401a      	ands	r2, r3
    8ce4:	d05a      	beq.n	8d9c <__aeabi_d2f+0x104>
    8ce6:	3601      	adds	r6, #1
    8ce8:	2eff      	cmp	r6, #255	; 0xff
    8cea:	d003      	beq.n	8cf4 <__aeabi_d2f+0x5c>
    8cec:	019b      	lsls	r3, r3, #6
    8cee:	0a5b      	lsrs	r3, r3, #9
    8cf0:	b2f4      	uxtb	r4, r6
    8cf2:	e001      	b.n	8cf8 <__aeabi_d2f+0x60>
    8cf4:	24ff      	movs	r4, #255	; 0xff
    8cf6:	2300      	movs	r3, #0
    8cf8:	0258      	lsls	r0, r3, #9
    8cfa:	05e4      	lsls	r4, r4, #23
    8cfc:	0a40      	lsrs	r0, r0, #9
    8cfe:	07c9      	lsls	r1, r1, #31
    8d00:	4320      	orrs	r0, r4
    8d02:	4308      	orrs	r0, r1
    8d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d06:	2c00      	cmp	r4, #0
    8d08:	d007      	beq.n	8d1a <__aeabi_d2f+0x82>
    8d0a:	431d      	orrs	r5, r3
    8d0c:	d0f2      	beq.n	8cf4 <__aeabi_d2f+0x5c>
    8d0e:	2080      	movs	r0, #128	; 0x80
    8d10:	00db      	lsls	r3, r3, #3
    8d12:	0480      	lsls	r0, r0, #18
    8d14:	4303      	orrs	r3, r0
    8d16:	26ff      	movs	r6, #255	; 0xff
    8d18:	e7da      	b.n	8cd0 <__aeabi_d2f+0x38>
    8d1a:	432b      	orrs	r3, r5
    8d1c:	d003      	beq.n	8d26 <__aeabi_d2f+0x8e>
    8d1e:	2305      	movs	r3, #5
    8d20:	08db      	lsrs	r3, r3, #3
    8d22:	2cff      	cmp	r4, #255	; 0xff
    8d24:	d003      	beq.n	8d2e <__aeabi_d2f+0x96>
    8d26:	025b      	lsls	r3, r3, #9
    8d28:	0a5b      	lsrs	r3, r3, #9
    8d2a:	b2e4      	uxtb	r4, r4
    8d2c:	e7e4      	b.n	8cf8 <__aeabi_d2f+0x60>
    8d2e:	2b00      	cmp	r3, #0
    8d30:	d032      	beq.n	8d98 <__aeabi_d2f+0x100>
    8d32:	2080      	movs	r0, #128	; 0x80
    8d34:	03c0      	lsls	r0, r0, #15
    8d36:	4303      	orrs	r3, r0
    8d38:	025b      	lsls	r3, r3, #9
    8d3a:	0a5b      	lsrs	r3, r3, #9
    8d3c:	e7dc      	b.n	8cf8 <__aeabi_d2f+0x60>
    8d3e:	0032      	movs	r2, r6
    8d40:	3217      	adds	r2, #23
    8d42:	db14      	blt.n	8d6e <__aeabi_d2f+0xd6>
    8d44:	2280      	movs	r2, #128	; 0x80
    8d46:	271e      	movs	r7, #30
    8d48:	0412      	lsls	r2, r2, #16
    8d4a:	4313      	orrs	r3, r2
    8d4c:	1bbf      	subs	r7, r7, r6
    8d4e:	2f1f      	cmp	r7, #31
    8d50:	dc0f      	bgt.n	8d72 <__aeabi_d2f+0xda>
    8d52:	4a14      	ldr	r2, [pc, #80]	; (8da4 <__aeabi_d2f+0x10c>)
    8d54:	4694      	mov	ip, r2
    8d56:	4464      	add	r4, ip
    8d58:	002a      	movs	r2, r5
    8d5a:	40a5      	lsls	r5, r4
    8d5c:	002e      	movs	r6, r5
    8d5e:	40a3      	lsls	r3, r4
    8d60:	1e75      	subs	r5, r6, #1
    8d62:	41ae      	sbcs	r6, r5
    8d64:	40fa      	lsrs	r2, r7
    8d66:	4333      	orrs	r3, r6
    8d68:	4313      	orrs	r3, r2
    8d6a:	2600      	movs	r6, #0
    8d6c:	e7b0      	b.n	8cd0 <__aeabi_d2f+0x38>
    8d6e:	2400      	movs	r4, #0
    8d70:	e7d5      	b.n	8d1e <__aeabi_d2f+0x86>
    8d72:	2202      	movs	r2, #2
    8d74:	4252      	negs	r2, r2
    8d76:	1b96      	subs	r6, r2, r6
    8d78:	001a      	movs	r2, r3
    8d7a:	40f2      	lsrs	r2, r6
    8d7c:	2f20      	cmp	r7, #32
    8d7e:	d009      	beq.n	8d94 <__aeabi_d2f+0xfc>
    8d80:	4809      	ldr	r0, [pc, #36]	; (8da8 <__aeabi_d2f+0x110>)
    8d82:	4684      	mov	ip, r0
    8d84:	4464      	add	r4, ip
    8d86:	40a3      	lsls	r3, r4
    8d88:	432b      	orrs	r3, r5
    8d8a:	1e5d      	subs	r5, r3, #1
    8d8c:	41ab      	sbcs	r3, r5
    8d8e:	2600      	movs	r6, #0
    8d90:	4313      	orrs	r3, r2
    8d92:	e79d      	b.n	8cd0 <__aeabi_d2f+0x38>
    8d94:	2300      	movs	r3, #0
    8d96:	e7f7      	b.n	8d88 <__aeabi_d2f+0xf0>
    8d98:	2300      	movs	r3, #0
    8d9a:	e7ad      	b.n	8cf8 <__aeabi_d2f+0x60>
    8d9c:	0034      	movs	r4, r6
    8d9e:	e7bf      	b.n	8d20 <__aeabi_d2f+0x88>
    8da0:	fffffc80 	.word	0xfffffc80
    8da4:	fffffc82 	.word	0xfffffc82
    8da8:	fffffca2 	.word	0xfffffca2

00008dac <__clzsi2>:
    8dac:	211c      	movs	r1, #28
    8dae:	2301      	movs	r3, #1
    8db0:	041b      	lsls	r3, r3, #16
    8db2:	4298      	cmp	r0, r3
    8db4:	d301      	bcc.n	8dba <__clzsi2+0xe>
    8db6:	0c00      	lsrs	r0, r0, #16
    8db8:	3910      	subs	r1, #16
    8dba:	0a1b      	lsrs	r3, r3, #8
    8dbc:	4298      	cmp	r0, r3
    8dbe:	d301      	bcc.n	8dc4 <__clzsi2+0x18>
    8dc0:	0a00      	lsrs	r0, r0, #8
    8dc2:	3908      	subs	r1, #8
    8dc4:	091b      	lsrs	r3, r3, #4
    8dc6:	4298      	cmp	r0, r3
    8dc8:	d301      	bcc.n	8dce <__clzsi2+0x22>
    8dca:	0900      	lsrs	r0, r0, #4
    8dcc:	3904      	subs	r1, #4
    8dce:	a202      	add	r2, pc, #8	; (adr r2, 8dd8 <__clzsi2+0x2c>)
    8dd0:	5c10      	ldrb	r0, [r2, r0]
    8dd2:	1840      	adds	r0, r0, r1
    8dd4:	4770      	bx	lr
    8dd6:	46c0      	nop			; (mov r8, r8)
    8dd8:	02020304 	.word	0x02020304
    8ddc:	01010101 	.word	0x01010101
	...

00008de8 <_tcc_intflag>:
    8de8:	00000001 00000002 00000004 00000008     ................
    8df8:	00001000 00002000 00004000 00008000     ..... ...@......
    8e08:	00010000 00020000 00040000 00080000     ................
    8e18:	6c6c6548 6f77206f 21646c72 00000000     Hello world!....
    8e28:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    8e38:	42001800 42001c00 0000187a 00001876     ...B...Bz...v...
    8e48:	00001876 000018d8 000018d8 0000188e     v...............
    8e58:	00001880 00001894 000018c6 00001b14     ................
    8e68:	00001af4 00001af4 00001b80 00001b06     ................
    8e78:	00001b22 00001af8 00001b30 00001b70     ".......0...p...
    8e88:	42002c00 42003000 42003400              .,.B.0.B.4.B

00008e94 <tc_interrupt_vectors.11884>:
    8e94:	00141312 322e3525 00200966 322e3525     ....%5.2f. .%5.2
    8ea4:	0a200966 00000000 6e6f7246 6f622074     f. .....Front bo
    8eb4:	20647261 75746573 6f632070 656c706d     ard setup comple
    8ec4:	002e6574                                te..

00008ec8 <_global_impure_ptr>:
    8ec8:	20000010 00464e49 00666e69 004e414e     ... INF.inf.NAN.
    8ed8:	006e616e 31300030 35343332 39383736     nan.0.0123456789
    8ee8:	44434241 30004645 34333231 38373635     ABCDEF.012345678
    8ef8:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
    8f08:	4e614e00 00000000                       .NaN....

00008f10 <__sf_fake_stderr>:
	...

00008f30 <__sf_fake_stdin>:
	...

00008f50 <__sf_fake_stdout>:
	...

00008f70 <__mprec_bigtens>:
    8f70:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    8f80:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    8f90:	7f73bf3c 75154fdd                       <.s..O.u

00008f98 <__mprec_tens>:
    8f98:	00000000 3ff00000 00000000 40240000     .......?......$@
    8fa8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    8fb8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    8fc8:	00000000 412e8480 00000000 416312d0     .......A......cA
    8fd8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    8fe8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    8ff8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    9008:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    9018:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    9028:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    9038:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    9048:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    9058:	79d99db4 44ea7843                       ...yCx.D

00009060 <p05.6052>:
    9060:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    9070:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
    9080:	5849534f 00002e00                                OSIX...

00009087 <_ctype_>:
    9087:	20202000 20202020 28282020 20282828     .         ((((( 
    9097:	20202020 20202020 20202020 20202020                     
    90a7:	10108820 10101010 10101010 10101010      ...............
    90b7:	04040410 04040404 10040404 10101010     ................
    90c7:	41411010 41414141 01010101 01010101     ..AAAAAA........
    90d7:	01010101 01010101 01010101 10101010     ................
    90e7:	42421010 42424242 02020202 02020202     ..BBBBBB........
    90f7:	02020202 02020202 02020202 10101010     ................
    9107:	00000020 00000000 00000000 00000000      ...............
	...
    9187:	00676c00 00673c00 00674e00 00669000     .lg..<g..Ng...f.
    9197:	00674e00 00673200 00674e00 00669000     .Ng..2g..Ng...f.
    91a7:	00673c00 00673c00 00673200 00669000     .<g..<g..2g...f.
    91b7:	00669800 00669800 00669800 00675400     ..f...f...f..Tg.
    91c7:	00673c00 00673c00 00671000 0067f400     .<g..<g...g...g.
    91d7:	00671000 00673200 00671000 0067f400     ..g..2g...g...g.
    91e7:	00673c00 00673c00 00673200 0067f400     .<g..<g..2g...g.
    91f7:	00669800 00669800 00669800 0067fe00     ..f...f...f...g.
    9207:	006aec00 006a3c00 006a3c00 006a3a00     ..j..<j..<j..:j.
    9217:	006ade00 006ade00 006ad400 006a3a00     ..j...j...j..:j.
    9227:	006ade00 006ad400 006ade00 006a3a00     ..j...j...j..:j.
    9237:	006ae400 006ae400 006ae400 006b7400     ..j...j...j..tk.
    9247:	0078bc00 00789e00 00785800 00777600     ..x...x..Xx..vw.
    9257:	00785800 00789000 00785800 00777600     .Xx...x..Xx..vw.
    9267:	00789e00 00789e00 00789000 00777600     ..x...x...x..vw.
    9277:	00776e00 00776e00 00776e00 007ad400     .nw..nw..nw...z.
    9287:	00811c00 007fdc00 007fdc00 007fd800     ................
    9297:	0080f400 0080f400 0080e600 007fd800     ................
    92a7:	0080f400 0080e600 0080f400 007fd800     ................
    92b7:	0080fc00 0080fc00 0080fc00 00830000     ................
	...

000092c8 <_init>:
    92c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    92ca:	46c0      	nop			; (mov r8, r8)
    92cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    92ce:	bc08      	pop	{r3}
    92d0:	469e      	mov	lr, r3
    92d2:	4770      	bx	lr

000092d4 <__init_array_start>:
    92d4:	000000dd 	.word	0x000000dd

000092d8 <_fini>:
    92d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    92da:	46c0      	nop			; (mov r8, r8)
    92dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    92de:	bc08      	pop	{r3}
    92e0:	469e      	mov	lr, r3
    92e2:	4770      	bx	lr

000092e4 <__fini_array_start>:
    92e4:	000000b5 	.word	0x000000b5
