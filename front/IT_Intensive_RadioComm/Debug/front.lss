
front.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008ef8  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000a8  20000000  00008ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000858  200000a8  00008fa0  000200a8  2**2
                  ALLOC
  3 .stack        00002000  20000900  000097f8  000200a8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
  5 .comment      0000008c  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004d3bf  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006be1  00000000  00000000  0006d51b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000d13f  00000000  00000000  000740fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c20  00000000  00000000  0008123b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001180  00000000  00000000  00081e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021e00  00000000  00000000  00082fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001c598  00000000  00000000  000a4ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00089d1d  00000000  00000000  000c1373  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002cb4  00000000  00000000  0014b090  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002900 	.word	0x20002900
       4:	0000286d 	.word	0x0000286d
       8:	00002869 	.word	0x00002869
       c:	00002869 	.word	0x00002869
	...
      2c:	00002869 	.word	0x00002869
	...
      38:	00002869 	.word	0x00002869
      3c:	00002869 	.word	0x00002869
      40:	00002869 	.word	0x00002869
      44:	00002869 	.word	0x00002869
      48:	00002869 	.word	0x00002869
      4c:	00002869 	.word	0x00002869
      50:	00000b59 	.word	0x00000b59
      54:	00002869 	.word	0x00002869
      58:	00002869 	.word	0x00002869
      5c:	00002869 	.word	0x00002869
      60:	00002869 	.word	0x00002869
      64:	0000115d 	.word	0x0000115d
      68:	0000116d 	.word	0x0000116d
      6c:	0000117d 	.word	0x0000117d
      70:	0000118d 	.word	0x0000118d
      74:	0000119d 	.word	0x0000119d
      78:	000011ad 	.word	0x000011ad
      7c:	000005e1 	.word	0x000005e1
      80:	000005f1 	.word	0x000005f1
      84:	00000601 	.word	0x00000601
      88:	00002501 	.word	0x00002501
      8c:	00002511 	.word	0x00002511
      90:	00002521 	.word	0x00002521
	...
      9c:	00002869 	.word	0x00002869
      a0:	00002869 	.word	0x00002869
      a4:	00000000 	.word	0x00000000
      a8:	00002869 	.word	0x00002869
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000a8 	.word	0x200000a8
      d4:	00000000 	.word	0x00000000
      d8:	00008ef8 	.word	0x00008ef8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000ac 	.word	0x200000ac
     108:	00008ef8 	.word	0x00008ef8
     10c:	00008ef8 	.word	0x00008ef8
     110:	00000000 	.word	0x00000000

00000114 <artist_init_maze>:
*/

#include "Maze.h"

void artist_init_maze (void) {
	artist_front.maze_status = STOP;
     114:	2303      	movs	r3, #3
     116:	22d8      	movs	r2, #216	; 0xd8
     118:	4902      	ldr	r1, [pc, #8]	; (124 <artist_init_maze+0x10>)
     11a:	548b      	strb	r3, [r1, r2]
	past_distance.direction = STOP;
     11c:	4a02      	ldr	r2, [pc, #8]	; (128 <artist_init_maze+0x14>)
     11e:	7013      	strb	r3, [r2, #0]
}
     120:	4770      	bx	lr
     122:	46c0      	nop			; (mov r8, r8)
     124:	20000684 	.word	0x20000684
     128:	20000768 	.word	0x20000768

0000012c <artist_do_maze>:
	else if(artist_front.maze_status == RIGHT) printf("%s\n", "RIGH\0");
	else printf("%s\n", "BACK\0");
}
*/

void artist_do_maze (void) {
     12c:	b570      	push	{r4, r5, r6, lr}
	if(past_distance.direction == RIGHT || past_distance.direction == LEFT){
     12e:	4b67      	ldr	r3, [pc, #412]	; (2cc <artist_do_maze+0x1a0>)
     130:	781b      	ldrb	r3, [r3, #0]
     132:	3b01      	subs	r3, #1
     134:	2b01      	cmp	r3, #1
     136:	d804      	bhi.n	142 <artist_do_maze+0x16>
		artist_front.maze_status = STRAIGHT;
     138:	2100      	movs	r1, #0
     13a:	23d8      	movs	r3, #216	; 0xd8
     13c:	4a64      	ldr	r2, [pc, #400]	; (2d0 <artist_do_maze+0x1a4>)
     13e:	54d1      	strb	r1, [r2, r3]
     140:	e05e      	b.n	200 <artist_do_maze+0xd4>
	}
	else if(artist_front.center_distance < MAZE_FRONT_WALL_EXIST_DETERMINATE){
     142:	4964      	ldr	r1, [pc, #400]	; (2d4 <artist_do_maze+0x1a8>)
     144:	23cc      	movs	r3, #204	; 0xcc
     146:	4a62      	ldr	r2, [pc, #392]	; (2d0 <artist_do_maze+0x1a4>)
     148:	58d0      	ldr	r0, [r2, r3]
     14a:	4b63      	ldr	r3, [pc, #396]	; (2d8 <artist_do_maze+0x1ac>)
     14c:	4798      	blx	r3
     14e:	2800      	cmp	r0, #0
     150:	d004      	beq.n	15c <artist_do_maze+0x30>
		artist_front.maze_status = LEFT;
     152:	2101      	movs	r1, #1
     154:	23d8      	movs	r3, #216	; 0xd8
     156:	4a5e      	ldr	r2, [pc, #376]	; (2d0 <artist_do_maze+0x1a4>)
     158:	54d1      	strb	r1, [r2, r3]
     15a:	e051      	b.n	200 <artist_do_maze+0xd4>
	}
	else if(artist_front.left_distance < MAZE_LEFT_DISTANCE_LOWERBOUND
     15c:	23d0      	movs	r3, #208	; 0xd0
     15e:	4a5c      	ldr	r2, [pc, #368]	; (2d0 <artist_do_maze+0x1a4>)
     160:	58d4      	ldr	r4, [r2, r3]
     162:	495e      	ldr	r1, [pc, #376]	; (2dc <artist_do_maze+0x1b0>)
     164:	1c20      	adds	r0, r4, #0
     166:	4b5c      	ldr	r3, [pc, #368]	; (2d8 <artist_do_maze+0x1ac>)
     168:	4798      	blx	r3
     16a:	2800      	cmp	r0, #0
     16c:	d00d      	beq.n	18a <artist_do_maze+0x5e>
		&& artist_front.right_distance < MAZE_RIGHT_DISTANCE_UPPERBOUND){
     16e:	495c      	ldr	r1, [pc, #368]	; (2e0 <artist_do_maze+0x1b4>)
     170:	23d4      	movs	r3, #212	; 0xd4
     172:	4a57      	ldr	r2, [pc, #348]	; (2d0 <artist_do_maze+0x1a4>)
     174:	58d0      	ldr	r0, [r2, r3]
     176:	4b58      	ldr	r3, [pc, #352]	; (2d8 <artist_do_maze+0x1ac>)
     178:	4798      	blx	r3
     17a:	2800      	cmp	r0, #0
     17c:	d100      	bne.n	180 <artist_do_maze+0x54>
     17e:	e094      	b.n	2aa <artist_do_maze+0x17e>
		artist_front.maze_status = STRAIGHT;		
     180:	2100      	movs	r1, #0
     182:	23d8      	movs	r3, #216	; 0xd8
     184:	4a52      	ldr	r2, [pc, #328]	; (2d0 <artist_do_maze+0x1a4>)
     186:	54d1      	strb	r1, [r2, r3]
     188:	e03a      	b.n	200 <artist_do_maze+0xd4>
	}
	else if(artist_front.left_distance > MAZE_NOTHING_LOWERBOUND 
     18a:	4956      	ldr	r1, [pc, #344]	; (2e4 <artist_do_maze+0x1b8>)
     18c:	1c20      	adds	r0, r4, #0
     18e:	4b56      	ldr	r3, [pc, #344]	; (2e8 <artist_do_maze+0x1bc>)
     190:	4798      	blx	r3
     192:	2800      	cmp	r0, #0
     194:	d00c      	beq.n	1b0 <artist_do_maze+0x84>
		&& artist_front.right_distance > MAZE_NOTHING_LOWERBOUND){
     196:	4953      	ldr	r1, [pc, #332]	; (2e4 <artist_do_maze+0x1b8>)
     198:	23d4      	movs	r3, #212	; 0xd4
     19a:	4a4d      	ldr	r2, [pc, #308]	; (2d0 <artist_do_maze+0x1a4>)
     19c:	58d0      	ldr	r0, [r2, r3]
     19e:	4b52      	ldr	r3, [pc, #328]	; (2e8 <artist_do_maze+0x1bc>)
     1a0:	4798      	blx	r3
     1a2:	2800      	cmp	r0, #0
     1a4:	d004      	beq.n	1b0 <artist_do_maze+0x84>
		artist_front.maze_status = STRAIGHT;
     1a6:	2100      	movs	r1, #0
     1a8:	23d8      	movs	r3, #216	; 0xd8
     1aa:	4a49      	ldr	r2, [pc, #292]	; (2d0 <artist_do_maze+0x1a4>)
     1ac:	54d1      	strb	r1, [r2, r3]
     1ae:	e027      	b.n	200 <artist_do_maze+0xd4>
	}
	else if(artist_front.left_distance < MAZE_LEFT_DISTANCE_LOWERBOUND){
     1b0:	494a      	ldr	r1, [pc, #296]	; (2dc <artist_do_maze+0x1b0>)
     1b2:	1c20      	adds	r0, r4, #0
     1b4:	4b48      	ldr	r3, [pc, #288]	; (2d8 <artist_do_maze+0x1ac>)
     1b6:	4798      	blx	r3
     1b8:	2800      	cmp	r0, #0
     1ba:	d004      	beq.n	1c6 <artist_do_maze+0x9a>
		artist_front.maze_status = RIGHT;
     1bc:	2102      	movs	r1, #2
     1be:	23d8      	movs	r3, #216	; 0xd8
     1c0:	4a43      	ldr	r2, [pc, #268]	; (2d0 <artist_do_maze+0x1a4>)
     1c2:	54d1      	strb	r1, [r2, r3]
     1c4:	e01c      	b.n	200 <artist_do_maze+0xd4>
	}
	else if(artist_front.right_distance > MAZE_RIGHT_DISTANCE_UPPERBOUND){
     1c6:	23d4      	movs	r3, #212	; 0xd4
     1c8:	4a41      	ldr	r2, [pc, #260]	; (2d0 <artist_do_maze+0x1a4>)
     1ca:	58d4      	ldr	r4, [r2, r3]
     1cc:	4944      	ldr	r1, [pc, #272]	; (2e0 <artist_do_maze+0x1b4>)
     1ce:	1c20      	adds	r0, r4, #0
     1d0:	4b45      	ldr	r3, [pc, #276]	; (2e8 <artist_do_maze+0x1bc>)
     1d2:	4798      	blx	r3
     1d4:	2800      	cmp	r0, #0
     1d6:	d004      	beq.n	1e2 <artist_do_maze+0xb6>
		artist_front.maze_status = RIGHT;
     1d8:	2102      	movs	r1, #2
     1da:	23d8      	movs	r3, #216	; 0xd8
     1dc:	4a3c      	ldr	r2, [pc, #240]	; (2d0 <artist_do_maze+0x1a4>)
     1de:	54d1      	strb	r1, [r2, r3]
     1e0:	e00e      	b.n	200 <artist_do_maze+0xd4>
	}
	else if(artist_front.right_distance < MAZE_RIGHT_DISTANCE_LOWERBOUND){
     1e2:	4942      	ldr	r1, [pc, #264]	; (2ec <artist_do_maze+0x1c0>)
     1e4:	1c20      	adds	r0, r4, #0
     1e6:	4b3c      	ldr	r3, [pc, #240]	; (2d8 <artist_do_maze+0x1ac>)
     1e8:	4798      	blx	r3
     1ea:	2800      	cmp	r0, #0
     1ec:	d004      	beq.n	1f8 <artist_do_maze+0xcc>
		artist_front.maze_status = LEFT;
     1ee:	2101      	movs	r1, #1
     1f0:	23d8      	movs	r3, #216	; 0xd8
     1f2:	4a37      	ldr	r2, [pc, #220]	; (2d0 <artist_do_maze+0x1a4>)
     1f4:	54d1      	strb	r1, [r2, r3]
     1f6:	e003      	b.n	200 <artist_do_maze+0xd4>
	}
	else{
		artist_front.maze_status = STRAIGHT;
     1f8:	2100      	movs	r1, #0
     1fa:	23d8      	movs	r3, #216	; 0xd8
     1fc:	4a34      	ldr	r2, [pc, #208]	; (2d0 <artist_do_maze+0x1a4>)
     1fe:	54d1      	strb	r1, [r2, r3]
	}
	
	past_distance.direction = artist_front.maze_status;
     200:	4b32      	ldr	r3, [pc, #200]	; (2cc <artist_do_maze+0x1a0>)
     202:	4c33      	ldr	r4, [pc, #204]	; (2d0 <artist_do_maze+0x1a4>)
     204:	25d8      	movs	r5, #216	; 0xd8
     206:	5d62      	ldrb	r2, [r4, r5]
     208:	701a      	strb	r2, [r3, #0]
	past_distance.left_distance = artist_front.left_distance;
     20a:	22d0      	movs	r2, #208	; 0xd0
     20c:	58a2      	ldr	r2, [r4, r2]
     20e:	605a      	str	r2, [r3, #4]
	past_distance.center_distance = artist_front.center_distance;
     210:	22cc      	movs	r2, #204	; 0xcc
     212:	58a2      	ldr	r2, [r4, r2]
     214:	609a      	str	r2, [r3, #8]
	past_distance.right_distance = artist_front.right_distance;
     216:	22d4      	movs	r2, #212	; 0xd4
     218:	58a2      	ldr	r2, [r4, r2]
     21a:	60da      	str	r2, [r3, #12]
	
	artist_print_ultrasonic_value();
     21c:	4b34      	ldr	r3, [pc, #208]	; (2f0 <artist_do_maze+0x1c4>)
     21e:	4798      	blx	r3
	if(artist_front.maze_status == STRAIGHT) printf("%s\n", "STRA\0");
     220:	5d63      	ldrb	r3, [r4, r5]
     222:	2b00      	cmp	r3, #0
     224:	d103      	bne.n	22e <artist_do_maze+0x102>
     226:	4833      	ldr	r0, [pc, #204]	; (2f4 <artist_do_maze+0x1c8>)
     228:	4b33      	ldr	r3, [pc, #204]	; (2f8 <artist_do_maze+0x1cc>)
     22a:	4798      	blx	r3
     22c:	e011      	b.n	252 <artist_do_maze+0x126>
	else if(artist_front.maze_status == LEFT) printf("%s\n", "LEFT\0");
     22e:	2b01      	cmp	r3, #1
     230:	d104      	bne.n	23c <artist_do_maze+0x110>
     232:	4830      	ldr	r0, [pc, #192]	; (2f4 <artist_do_maze+0x1c8>)
     234:	3008      	adds	r0, #8
     236:	4b30      	ldr	r3, [pc, #192]	; (2f8 <artist_do_maze+0x1cc>)
     238:	4798      	blx	r3
     23a:	e00a      	b.n	252 <artist_do_maze+0x126>
	else if(artist_front.maze_status == RIGHT) printf("%s\n", "RIGH\0");
     23c:	2b02      	cmp	r3, #2
     23e:	d104      	bne.n	24a <artist_do_maze+0x11e>
     240:	482c      	ldr	r0, [pc, #176]	; (2f4 <artist_do_maze+0x1c8>)
     242:	3010      	adds	r0, #16
     244:	4b2c      	ldr	r3, [pc, #176]	; (2f8 <artist_do_maze+0x1cc>)
     246:	4798      	blx	r3
     248:	e003      	b.n	252 <artist_do_maze+0x126>
	else printf("%s\n", "BACK\0");
     24a:	482a      	ldr	r0, [pc, #168]	; (2f4 <artist_do_maze+0x1c8>)
     24c:	3018      	adds	r0, #24
     24e:	4b2a      	ldr	r3, [pc, #168]	; (2f8 <artist_do_maze+0x1cc>)
     250:	4798      	blx	r3

	switch (artist_front.maze_status){
     252:	4a1f      	ldr	r2, [pc, #124]	; (2d0 <artist_do_maze+0x1a4>)
     254:	23d8      	movs	r3, #216	; 0xd8
     256:	5cd1      	ldrb	r1, [r2, r3]
     258:	2904      	cmp	r1, #4
     25a:	d836      	bhi.n	2ca <artist_do_maze+0x19e>
     25c:	008b      	lsls	r3, r1, #2
     25e:	4a27      	ldr	r2, [pc, #156]	; (2fc <artist_do_maze+0x1d0>)
     260:	58d3      	ldr	r3, [r2, r3]
     262:	469f      	mov	pc, r3
		case STRAIGHT :
		usart_write_buffer_job(&(artist_front.usart_instance), "mw\0\0\0", MAX_RX_BUFFER_LENGTH);
     264:	2205      	movs	r2, #5
     266:	4923      	ldr	r1, [pc, #140]	; (2f4 <artist_do_maze+0x1c8>)
     268:	3120      	adds	r1, #32
     26a:	4825      	ldr	r0, [pc, #148]	; (300 <artist_do_maze+0x1d4>)
     26c:	4b25      	ldr	r3, [pc, #148]	; (304 <artist_do_maze+0x1d8>)
     26e:	4798      	blx	r3
		break;
     270:	e02b      	b.n	2ca <artist_do_maze+0x19e>
		case LEFT :
		usart_write_buffer_job(&(artist_front.usart_instance), "ma\0\0\0", MAX_RX_BUFFER_LENGTH);
     272:	2205      	movs	r2, #5
     274:	491f      	ldr	r1, [pc, #124]	; (2f4 <artist_do_maze+0x1c8>)
     276:	3128      	adds	r1, #40	; 0x28
     278:	4821      	ldr	r0, [pc, #132]	; (300 <artist_do_maze+0x1d4>)
     27a:	4b22      	ldr	r3, [pc, #136]	; (304 <artist_do_maze+0x1d8>)
     27c:	4798      	blx	r3
		break;
     27e:	e024      	b.n	2ca <artist_do_maze+0x19e>
		case RIGHT :
		usart_write_buffer_job(&(artist_front.usart_instance), "md\0\0\0", MAX_RX_BUFFER_LENGTH);
     280:	2205      	movs	r2, #5
     282:	491c      	ldr	r1, [pc, #112]	; (2f4 <artist_do_maze+0x1c8>)
     284:	3130      	adds	r1, #48	; 0x30
     286:	481e      	ldr	r0, [pc, #120]	; (300 <artist_do_maze+0x1d4>)
     288:	4b1e      	ldr	r3, [pc, #120]	; (304 <artist_do_maze+0x1d8>)
     28a:	4798      	blx	r3
		break;
     28c:	e01d      	b.n	2ca <artist_do_maze+0x19e>
		case BACK :
		usart_write_buffer_job(&(artist_front.usart_instance), "ms\0\0\0", MAX_RX_BUFFER_LENGTH);
     28e:	2205      	movs	r2, #5
     290:	4918      	ldr	r1, [pc, #96]	; (2f4 <artist_do_maze+0x1c8>)
     292:	3138      	adds	r1, #56	; 0x38
     294:	481a      	ldr	r0, [pc, #104]	; (300 <artist_do_maze+0x1d4>)
     296:	4b1b      	ldr	r3, [pc, #108]	; (304 <artist_do_maze+0x1d8>)
     298:	4798      	blx	r3
		break;
     29a:	e016      	b.n	2ca <artist_do_maze+0x19e>
		case STOP :
		usart_write_buffer_job(&(artist_front.usart_instance), "m \0\0\0", MAX_RX_BUFFER_LENGTH);
     29c:	2205      	movs	r2, #5
     29e:	4915      	ldr	r1, [pc, #84]	; (2f4 <artist_do_maze+0x1c8>)
     2a0:	3140      	adds	r1, #64	; 0x40
     2a2:	4817      	ldr	r0, [pc, #92]	; (300 <artist_do_maze+0x1d4>)
     2a4:	4b17      	ldr	r3, [pc, #92]	; (304 <artist_do_maze+0x1d8>)
     2a6:	4798      	blx	r3
		break;
	}
}
     2a8:	e00f      	b.n	2ca <artist_do_maze+0x19e>
	}
	else if(artist_front.left_distance < MAZE_LEFT_DISTANCE_LOWERBOUND
		&& artist_front.right_distance < MAZE_RIGHT_DISTANCE_UPPERBOUND){
		artist_front.maze_status = STRAIGHT;		
	}
	else if(artist_front.left_distance > MAZE_NOTHING_LOWERBOUND 
     2aa:	490e      	ldr	r1, [pc, #56]	; (2e4 <artist_do_maze+0x1b8>)
     2ac:	1c20      	adds	r0, r4, #0
     2ae:	4b0e      	ldr	r3, [pc, #56]	; (2e8 <artist_do_maze+0x1bc>)
     2b0:	4798      	blx	r3
     2b2:	2800      	cmp	r0, #0
     2b4:	d082      	beq.n	1bc <artist_do_maze+0x90>
		&& artist_front.right_distance > MAZE_NOTHING_LOWERBOUND){
     2b6:	490b      	ldr	r1, [pc, #44]	; (2e4 <artist_do_maze+0x1b8>)
     2b8:	23d4      	movs	r3, #212	; 0xd4
     2ba:	4a05      	ldr	r2, [pc, #20]	; (2d0 <artist_do_maze+0x1a4>)
     2bc:	58d0      	ldr	r0, [r2, r3]
     2be:	4b0a      	ldr	r3, [pc, #40]	; (2e8 <artist_do_maze+0x1bc>)
     2c0:	4798      	blx	r3
     2c2:	2800      	cmp	r0, #0
     2c4:	d000      	beq.n	2c8 <artist_do_maze+0x19c>
     2c6:	e76e      	b.n	1a6 <artist_do_maze+0x7a>
     2c8:	e778      	b.n	1bc <artist_do_maze+0x90>
		break;
		case STOP :
		usart_write_buffer_job(&(artist_front.usart_instance), "m \0\0\0", MAX_RX_BUFFER_LENGTH);
		break;
	}
}
     2ca:	bd70      	pop	{r4, r5, r6, pc}
     2cc:	20000768 	.word	0x20000768
     2d0:	20000684 	.word	0x20000684
     2d4:	41280000 	.word	0x41280000
     2d8:	000062c1 	.word	0x000062c1
     2dc:	40e00000 	.word	0x40e00000
     2e0:	40d00000 	.word	0x40d00000
     2e4:	41a00000 	.word	0x41a00000
     2e8:	000062e9 	.word	0x000062e9
     2ec:	40200000 	.word	0x40200000
     2f0:	00000371 	.word	0x00000371
     2f4:	00008a8c 	.word	0x00008a8c
     2f8:	00003ff9 	.word	0x00003ff9
     2fc:	00008a78 	.word	0x00008a78
     300:	200006fc 	.word	0x200006fc
     304:	000019d1 	.word	0x000019d1

00000308 <artist_ultrasonic_configure>:
 */
#include "TheArtist.h"
#include "UltraSonic.h"

void artist_ultrasonic_configure (struct artist_ultrasonic_module * module, uint8_t echo, uint8_t trig) {
	module->echo_pin	= echo; 
     308:	7001      	strb	r1, [r0, #0]
	module->trigger_pin = trig;  
     30a:	7042      	strb	r2, [r0, #1]
	module->filter_large_change_counts = 0; 
     30c:	2300      	movs	r3, #0
     30e:	7083      	strb	r3, [r0, #2]
	module->fliter_old_val = 0; 
     310:	2300      	movs	r3, #0
     312:	6043      	str	r3, [r0, #4]
}
     314:	4770      	bx	lr
     316:	46c0      	nop			; (mov r8, r8)

00000318 <artist_ultrasonic_gpio_init>:

void artist_ultrasonic_gpio_init() {
     318:	b5f0      	push	{r4, r5, r6, r7, lr}
     31a:	b085      	sub	sp, #20
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     31c:	a903      	add	r1, sp, #12
     31e:	2201      	movs	r2, #1
     320:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     322:	2300      	movs	r3, #0
     324:	708b      	strb	r3, [r1, #2]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     326:	ad02      	add	r5, sp, #8
     328:	702b      	strb	r3, [r5, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     32a:	706a      	strb	r2, [r5, #1]
	config->powersave  = false;
     32c:	70ab      	strb	r3, [r5, #2]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     32e:	4668      	mov	r0, sp
     330:	7003      	strb	r3, [r0, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     332:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
     334:	7083      	strb	r3, [r0, #2]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     336:	ac01      	add	r4, sp, #4
     338:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     33a:	7062      	strb	r2, [r4, #1]
	config->powersave  = false;
     33c:	70a3      	strb	r3, [r4, #2]
	port_get_config_defaults(&pin_config_trig);
	port_get_config_defaults(&pin_config_echo_center);
	port_get_config_defaults(&pin_config_echo_right);
	port_get_config_defaults(&pin_config_echo_left);

	pin_config_trig.direction			=	PORT_PIN_DIR_OUTPUT;
     33e:	700a      	strb	r2, [r1, #0]
	
	pin_config_echo_right.direction		=	PORT_PIN_DIR_INPUT;
	pin_config_echo_right.input_pull	=	PORT_PIN_PULL_UP;
	
	
	port_pin_set_config(artist_front.us_instance_center.trigger_pin, &pin_config_trig);
     340:	4f09      	ldr	r7, [pc, #36]	; (368 <artist_ultrasonic_gpio_init+0x50>)
     342:	33b5      	adds	r3, #181	; 0xb5
     344:	5cf8      	ldrb	r0, [r7, r3]
     346:	4e09      	ldr	r6, [pc, #36]	; (36c <artist_ultrasonic_gpio_init+0x54>)
     348:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_center.echo_pin, &pin_config_echo_center);
     34a:	23b4      	movs	r3, #180	; 0xb4
     34c:	5cf8      	ldrb	r0, [r7, r3]
     34e:	0029      	movs	r1, r5
     350:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_left.echo_pin, &pin_config_echo_left);
     352:	23bc      	movs	r3, #188	; 0xbc
     354:	5cf8      	ldrb	r0, [r7, r3]
     356:	0021      	movs	r1, r4
     358:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_right.echo_pin, &pin_config_echo_right); 
     35a:	23c4      	movs	r3, #196	; 0xc4
     35c:	5cf8      	ldrb	r0, [r7, r3]
     35e:	4669      	mov	r1, sp
     360:	47b0      	blx	r6
}
     362:	b005      	add	sp, #20
     364:	bdf0      	pop	{r4, r5, r6, r7, pc}
     366:	46c0      	nop			; (mov r8, r8)
     368:	20000684 	.word	0x20000684
     36c:	00000ccd 	.word	0x00000ccd

00000370 <artist_print_ultrasonic_value>:
	else if (FILTER_VAL < 0)	FILTER_VAL = 0;

	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
}

float artist_print_ultrasonic_value() {
     370:	b5f0      	push	{r4, r5, r6, r7, lr}
     372:	b085      	sub	sp, #20
	printf("%5.2f, %5.2f, %5.2f\n", 
				artist_front.left_distance, 
     374:	4d0b      	ldr	r5, [pc, #44]	; (3a4 <artist_print_ultrasonic_value+0x34>)

	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
}

float artist_print_ultrasonic_value() {
	printf("%5.2f, %5.2f, %5.2f\n", 
     376:	4c0c      	ldr	r4, [pc, #48]	; (3a8 <artist_print_ultrasonic_value+0x38>)
     378:	23d0      	movs	r3, #208	; 0xd0
     37a:	58e8      	ldr	r0, [r5, r3]
     37c:	47a0      	blx	r4
     37e:	0006      	movs	r6, r0
     380:	000f      	movs	r7, r1
				artist_front.left_distance, 
				artist_front.center_distance, 
				artist_front.right_distance);  
     382:	23d4      	movs	r3, #212	; 0xd4

	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
}

float artist_print_ultrasonic_value() {
	printf("%5.2f, %5.2f, %5.2f\n", 
     384:	58e8      	ldr	r0, [r5, r3]
     386:	47a0      	blx	r4
     388:	9002      	str	r0, [sp, #8]
     38a:	9103      	str	r1, [sp, #12]
				artist_front.left_distance, 
				artist_front.center_distance, 
     38c:	23cc      	movs	r3, #204	; 0xcc

	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
}

float artist_print_ultrasonic_value() {
	printf("%5.2f, %5.2f, %5.2f\n", 
     38e:	58e8      	ldr	r0, [r5, r3]
     390:	47a0      	blx	r4
     392:	9000      	str	r0, [sp, #0]
     394:	9101      	str	r1, [sp, #4]
     396:	0032      	movs	r2, r6
     398:	003b      	movs	r3, r7
     39a:	4804      	ldr	r0, [pc, #16]	; (3ac <artist_print_ultrasonic_value+0x3c>)
     39c:	4904      	ldr	r1, [pc, #16]	; (3b0 <artist_print_ultrasonic_value+0x40>)
     39e:	4788      	blx	r1
				artist_front.left_distance, 
				artist_front.center_distance, 
				artist_front.right_distance);  
}
     3a0:	b005      	add	sp, #20
     3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3a4:	20000684 	.word	0x20000684
     3a8:	0000887d 	.word	0x0000887d
     3ac:	00008ad4 	.word	0x00008ad4
     3b0:	00003f01 	.word	0x00003f01

000003b4 <artist_ultrasonic_get_value>:
float artist_ultrasonic_get_value(struct artist_ultrasonic_module * const module) {
     3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3b6:	b083      	sub	sp, #12
     3b8:	0004      	movs	r4, r0
	// TODO : use timer callback function!
	uint16_t start, end;
	uint16_t count = 0;
	
	port_pin_set_output_level(module->trigger_pin, false);
     3ba:	7843      	ldrb	r3, [r0, #1]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     3bc:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     3be:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     3c0:	2900      	cmp	r1, #0
     3c2:	d104      	bne.n	3ce <artist_ultrasonic_get_value+0x1a>
		return &(ports[port_index]->Group[group_index]);
     3c4:	095a      	lsrs	r2, r3, #5
     3c6:	01d2      	lsls	r2, r2, #7
     3c8:	495d      	ldr	r1, [pc, #372]	; (540 <artist_ultrasonic_get_value+0x18c>)
     3ca:	468c      	mov	ip, r1
     3cc:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3ce:	211f      	movs	r1, #31
     3d0:	400b      	ands	r3, r1
     3d2:	391e      	subs	r1, #30
     3d4:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     3d6:	6151      	str	r1, [r2, #20]
	delay_us(40);
     3d8:	2028      	movs	r0, #40	; 0x28
     3da:	4b5a      	ldr	r3, [pc, #360]	; (544 <artist_ultrasonic_get_value+0x190>)
     3dc:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, true);
     3de:	7863      	ldrb	r3, [r4, #1]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     3e0:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     3e2:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     3e4:	2900      	cmp	r1, #0
     3e6:	d104      	bne.n	3f2 <artist_ultrasonic_get_value+0x3e>
		return &(ports[port_index]->Group[group_index]);
     3e8:	095a      	lsrs	r2, r3, #5
     3ea:	01d2      	lsls	r2, r2, #7
     3ec:	4954      	ldr	r1, [pc, #336]	; (540 <artist_ultrasonic_get_value+0x18c>)
     3ee:	468c      	mov	ip, r1
     3f0:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3f2:	211f      	movs	r1, #31
     3f4:	400b      	ands	r3, r1
     3f6:	391e      	subs	r1, #30
     3f8:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     3fa:	6191      	str	r1, [r2, #24]
	delay_us(10);
     3fc:	200a      	movs	r0, #10
     3fe:	4b51      	ldr	r3, [pc, #324]	; (544 <artist_ultrasonic_get_value+0x190>)
     400:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, false);
     402:	7863      	ldrb	r3, [r4, #1]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     404:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     406:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     408:	2900      	cmp	r1, #0
     40a:	d104      	bne.n	416 <artist_ultrasonic_get_value+0x62>
		return &(ports[port_index]->Group[group_index]);
     40c:	095a      	lsrs	r2, r3, #5
     40e:	01d2      	lsls	r2, r2, #7
     410:	494b      	ldr	r1, [pc, #300]	; (540 <artist_ultrasonic_get_value+0x18c>)
     412:	468c      	mov	ip, r1
     414:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     416:	211f      	movs	r1, #31
     418:	400b      	ands	r3, r1
     41a:	391e      	subs	r1, #30
     41c:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     41e:	6151      	str	r1, [r2, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     420:	4b49      	ldr	r3, [pc, #292]	; (548 <artist_ultrasonic_get_value+0x194>)
     422:	681a      	ldr	r2, [r3, #0]

	while (tc_is_syncing(module_inst)) {
     424:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     426:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     428:	438b      	bics	r3, r1
     42a:	d1fc      	bne.n	426 <artist_ultrasonic_get_value+0x72>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
     42c:	7113      	strb	r3, [r2, #4]

	while (tc_is_syncing(module_inst)) {
     42e:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     430:	7bd3      	ldrb	r3, [r2, #15]
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;

	while (tc_is_syncing(module_inst)) {
     432:	438b      	bics	r3, r1
     434:	d1fc      	bne.n	430 <artist_ultrasonic_get_value+0x7c>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
     436:	3340      	adds	r3, #64	; 0x40
     438:	7153      	strb	r3, [r2, #5]
	tc_start_counter(&(artist_front.tc_instance_ultrasonic)); 
	while (!(port_pin_get_input_level(module->echo_pin))) {
     43a:	7823      	ldrb	r3, [r4, #0]
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     43c:	221f      	movs	r2, #31
     43e:	401a      	ands	r2, r3
     440:	2001      	movs	r0, #1
     442:	4090      	lsls	r0, r2
     444:	09da      	lsrs	r2, r3, #7
     446:	2100      	movs	r1, #0
     448:	2a00      	cmp	r2, #0
     44a:	d104      	bne.n	456 <artist_ultrasonic_get_value+0xa2>
     44c:	0959      	lsrs	r1, r3, #5
     44e:	01c9      	lsls	r1, r1, #7
     450:	4b3b      	ldr	r3, [pc, #236]	; (540 <artist_ultrasonic_get_value+0x18c>)
     452:	469c      	mov	ip, r3
     454:	4461      	add	r1, ip
     456:	4b3d      	ldr	r3, [pc, #244]	; (54c <artist_ultrasonic_get_value+0x198>)
     458:	e005      	b.n	466 <artist_ultrasonic_get_value+0xb2>
     45a:	3b01      	subs	r3, #1
     45c:	b29b      	uxth	r3, r3
		count ++;
		if (count > 0xFF00) return module->fliter_old_val; 
     45e:	2b00      	cmp	r3, #0
     460:	d101      	bne.n	466 <artist_ultrasonic_get_value+0xb2>
     462:	6860      	ldr	r0, [r4, #4]
     464:	e069      	b.n	53a <artist_ultrasonic_get_value+0x186>

	return (port_base->IN.reg & pin_mask);
     466:	6a0a      	ldr	r2, [r1, #32]
	delay_us(40);
	port_pin_set_output_level(module->trigger_pin, true);
	delay_us(10);
	port_pin_set_output_level(module->trigger_pin, false);
	tc_start_counter(&(artist_front.tc_instance_ultrasonic)); 
	while (!(port_pin_get_input_level(module->echo_pin))) {
     468:	4202      	tst	r2, r0
     46a:	d0f6      	beq.n	45a <artist_ultrasonic_get_value+0xa6>
		count ++;
		if (count > 0xFF00) return module->fliter_old_val; 
	}
	count =0; 
	start = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
     46c:	4836      	ldr	r0, [pc, #216]	; (548 <artist_ultrasonic_get_value+0x194>)
     46e:	4b38      	ldr	r3, [pc, #224]	; (550 <artist_ultrasonic_get_value+0x19c>)
     470:	4798      	blx	r3
     472:	0005      	movs	r5, r0
	while ((port_pin_get_input_level(module->echo_pin)))  {
     474:	7823      	ldrb	r3, [r4, #0]
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     476:	221f      	movs	r2, #31
     478:	401a      	ands	r2, r3
     47a:	2001      	movs	r0, #1
     47c:	4090      	lsls	r0, r2
     47e:	09da      	lsrs	r2, r3, #7
     480:	2100      	movs	r1, #0
     482:	2a00      	cmp	r2, #0
     484:	d104      	bne.n	490 <artist_ultrasonic_get_value+0xdc>
     486:	0959      	lsrs	r1, r3, #5
     488:	01c9      	lsls	r1, r1, #7
     48a:	4b2d      	ldr	r3, [pc, #180]	; (540 <artist_ultrasonic_get_value+0x18c>)
     48c:	469c      	mov	ip, r3
     48e:	4461      	add	r1, ip
     490:	4b2e      	ldr	r3, [pc, #184]	; (54c <artist_ultrasonic_get_value+0x198>)
     492:	e005      	b.n	4a0 <artist_ultrasonic_get_value+0xec>
     494:	3b01      	subs	r3, #1
     496:	b29b      	uxth	r3, r3
		count ++;
		if (count > 0xFF00) return module->fliter_old_val;  
     498:	2b00      	cmp	r3, #0
     49a:	d101      	bne.n	4a0 <artist_ultrasonic_get_value+0xec>
     49c:	6860      	ldr	r0, [r4, #4]
     49e:	e04c      	b.n	53a <artist_ultrasonic_get_value+0x186>

	return (port_base->IN.reg & pin_mask);
     4a0:	6a0a      	ldr	r2, [r1, #32]
		count ++;
		if (count > 0xFF00) return module->fliter_old_val; 
	}
	count =0; 
	start = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
	while ((port_pin_get_input_level(module->echo_pin)))  {
     4a2:	4202      	tst	r2, r0
     4a4:	d1f6      	bne.n	494 <artist_ultrasonic_get_value+0xe0>
		count ++;
		if (count > 0xFF00) return module->fliter_old_val;  
	}
	end = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
     4a6:	4e28      	ldr	r6, [pc, #160]	; (548 <artist_ultrasonic_get_value+0x194>)
     4a8:	0030      	movs	r0, r6
     4aa:	4b29      	ldr	r3, [pc, #164]	; (550 <artist_ultrasonic_get_value+0x19c>)
     4ac:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     4ae:	6832      	ldr	r2, [r6, #0]

	while (tc_is_syncing(module_inst)) {
     4b0:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     4b2:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     4b4:	438b      	bics	r3, r1
     4b6:	d1fc      	bne.n	4b2 <artist_ultrasonic_get_value+0xfe>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
     4b8:	3380      	adds	r3, #128	; 0x80
     4ba:	7153      	strb	r3, [r2, #5]
	tc_stop_counter(&(artist_front.tc_instance_ultrasonic));

	float new = ((float)(end - start)) * 0.017;
     4bc:	0400      	lsls	r0, r0, #16
     4be:	0c03      	lsrs	r3, r0, #16
     4c0:	042d      	lsls	r5, r5, #16
     4c2:	0c2d      	lsrs	r5, r5, #16
     4c4:	1b58      	subs	r0, r3, r5
     4c6:	4f23      	ldr	r7, [pc, #140]	; (554 <artist_ultrasonic_get_value+0x1a0>)
     4c8:	47b8      	blx	r7
     4ca:	4b23      	ldr	r3, [pc, #140]	; (558 <artist_ultrasonic_get_value+0x1a4>)
     4cc:	4798      	blx	r3
     4ce:	4a23      	ldr	r2, [pc, #140]	; (55c <artist_ultrasonic_get_value+0x1a8>)
     4d0:	4b23      	ldr	r3, [pc, #140]	; (560 <artist_ultrasonic_get_value+0x1ac>)
     4d2:	4d24      	ldr	r5, [pc, #144]	; (564 <artist_ultrasonic_get_value+0x1b0>)
     4d4:	47a8      	blx	r5
     4d6:	4b24      	ldr	r3, [pc, #144]	; (568 <artist_ultrasonic_get_value+0x1b4>)
     4d8:	4798      	blx	r3
     4da:	9001      	str	r0, [sp, #4]
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     4dc:	6865      	ldr	r5, [r4, #4]
	port_pin_set_config(artist_front.us_instance_right.echo_pin, &pin_config_echo_right); 
}
static float artist_HC_SR04_filter(struct artist_ultrasonic_module * module,
float new, float old, float FILTER_VAL ) {
	
	if (new > old * module->filter_large_change_counts ||
     4de:	78a6      	ldrb	r6, [r4, #2]
     4e0:	0030      	movs	r0, r6
     4e2:	47b8      	blx	r7
     4e4:	1c07      	adds	r7, r0, #0
     4e6:	1c01      	adds	r1, r0, #0
     4e8:	1c28      	adds	r0, r5, #0
     4ea:	4b20      	ldr	r3, [pc, #128]	; (56c <artist_ultrasonic_get_value+0x1b8>)
     4ec:	4798      	blx	r3
     4ee:	1c01      	adds	r1, r0, #0
     4f0:	9801      	ldr	r0, [sp, #4]
     4f2:	4b1f      	ldr	r3, [pc, #124]	; (570 <artist_ultrasonic_get_value+0x1bc>)
     4f4:	4798      	blx	r3
     4f6:	2800      	cmp	r0, #0
     4f8:	d109      	bne.n	50e <artist_ultrasonic_get_value+0x15a>
     4fa:	1c39      	adds	r1, r7, #0
     4fc:	1c28      	adds	r0, r5, #0
     4fe:	4b1d      	ldr	r3, [pc, #116]	; (574 <artist_ultrasonic_get_value+0x1c0>)
     500:	4798      	blx	r3
     502:	1c01      	adds	r1, r0, #0
     504:	9801      	ldr	r0, [sp, #4]
     506:	4b1c      	ldr	r3, [pc, #112]	; (578 <artist_ultrasonic_get_value+0x1c4>)
     508:	4798      	blx	r3
     50a:	2800      	cmp	r0, #0
     50c:	d008      	beq.n	520 <artist_ultrasonic_get_value+0x16c>
	new < old * 1/module->filter_large_change_counts ) {
		module->filter_large_change_counts ++;
     50e:	1c73      	adds	r3, r6, #1
     510:	b2db      	uxtb	r3, r3
		if (module->filter_large_change_counts > 3)		
     512:	2b03      	cmp	r3, #3
     514:	d802      	bhi.n	51c <artist_ultrasonic_get_value+0x168>
static float artist_HC_SR04_filter(struct artist_ultrasonic_module * module,
float new, float old, float FILTER_VAL ) {
	
	if (new > old * module->filter_large_change_counts ||
	new < old * 1/module->filter_large_change_counts ) {
		module->filter_large_change_counts ++;
     516:	70a3      	strb	r3, [r4, #2]
		if (module->filter_large_change_counts > 3)		
			module->filter_large_change_counts = 0;
		else 											
			new = old;
     518:	9501      	str	r5, [sp, #4]
     51a:	e001      	b.n	520 <artist_ultrasonic_get_value+0x16c>
	
	if (new > old * module->filter_large_change_counts ||
	new < old * 1/module->filter_large_change_counts ) {
		module->filter_large_change_counts ++;
		if (module->filter_large_change_counts > 3)		
			module->filter_large_change_counts = 0;
     51c:	2300      	movs	r3, #0
     51e:	70a3      	strb	r3, [r4, #2]
			new = old;
	}
	if (FILTER_VAL > 1)			FILTER_VAL = 1;
	else if (FILTER_VAL < 0)	FILTER_VAL = 0;

	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
     520:	4f12      	ldr	r7, [pc, #72]	; (56c <artist_ultrasonic_get_value+0x1b8>)
     522:	4916      	ldr	r1, [pc, #88]	; (57c <artist_ultrasonic_get_value+0x1c8>)
     524:	9801      	ldr	r0, [sp, #4]
     526:	47b8      	blx	r7
     528:	1c06      	adds	r6, r0, #0
     52a:	4915      	ldr	r1, [pc, #84]	; (580 <artist_ultrasonic_get_value+0x1cc>)
     52c:	1c28      	adds	r0, r5, #0
     52e:	47b8      	blx	r7
     530:	1c01      	adds	r1, r0, #0
     532:	1c30      	adds	r0, r6, #0
     534:	4b13      	ldr	r3, [pc, #76]	; (584 <artist_ultrasonic_get_value+0x1d0>)
     536:	4798      	blx	r3
	}
	end = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
	tc_stop_counter(&(artist_front.tc_instance_ultrasonic));

	float new = ((float)(end - start)) * 0.017;
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     538:	6060      	str	r0, [r4, #4]
	return module->fliter_old_val;
}
     53a:	b003      	add	sp, #12
     53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     53e:	46c0      	nop			; (mov r8, r8)
     540:	41004400 	.word	0x41004400
     544:	000009c1 	.word	0x000009c1
     548:	20000684 	.word	0x20000684
     54c:	0000ff01 	.word	0x0000ff01
     550:	000027e5 	.word	0x000027e5
     554:	00006c11 	.word	0x00006c11
     558:	0000887d 	.word	0x0000887d
     55c:	b020c49c 	.word	0xb020c49c
     560:	3f916872 	.word	0x3f916872
     564:	00007b41 	.word	0x00007b41
     568:	00008925 	.word	0x00008925
     56c:	000069e9 	.word	0x000069e9
     570:	000062e9 	.word	0x000062e9
     574:	00006655 	.word	0x00006655
     578:	000062c1 	.word	0x000062c1
     57c:	3ecccccc 	.word	0x3ecccccc
     580:	3f19999a 	.word	0x3f19999a
     584:	00006369 	.word	0x00006369

00000588 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     58a:	464f      	mov	r7, r9
     58c:	4646      	mov	r6, r8
     58e:	b4c0      	push	{r6, r7}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     590:	0080      	lsls	r0, r0, #2
     592:	4b11      	ldr	r3, [pc, #68]	; (5d8 <_tcc_interrupt_handler+0x50>)
     594:	58c3      	ldr	r3, [r0, r3]
     596:	4699      	mov	r9, r3
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     598:	681b      	ldr	r3, [r3, #0]
     59a:	6adf      	ldr	r7, [r3, #44]	; 0x2c
     59c:	464b      	mov	r3, r9
     59e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     5a0:	401f      	ands	r7, r3
     5a2:	464b      	mov	r3, r9
     5a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     5a6:	401f      	ands	r7, r3
     5a8:	4d0c      	ldr	r5, [pc, #48]	; (5dc <_tcc_interrupt_handler+0x54>)
     5aa:	464b      	mov	r3, r9
     5ac:	1d1c      	adds	r4, r3, #4
     5ae:	2334      	movs	r3, #52	; 0x34
     5b0:	444b      	add	r3, r9
     5b2:	4698      	mov	r8, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     5b4:	682e      	ldr	r6, [r5, #0]
     5b6:	423e      	tst	r6, r7
     5b8:	d005      	beq.n	5c6 <_tcc_interrupt_handler+0x3e>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     5ba:	4648      	mov	r0, r9
     5bc:	6823      	ldr	r3, [r4, #0]
     5be:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     5c0:	464b      	mov	r3, r9
     5c2:	681b      	ldr	r3, [r3, #0]
     5c4:	62de      	str	r6, [r3, #44]	; 0x2c
     5c6:	3504      	adds	r5, #4
     5c8:	3404      	adds	r4, #4
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     5ca:	4544      	cmp	r4, r8
     5cc:	d1f2      	bne.n	5b4 <_tcc_interrupt_handler+0x2c>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
     5ce:	bc0c      	pop	{r2, r3}
     5d0:	4690      	mov	r8, r2
     5d2:	4699      	mov	r9, r3
     5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     5d6:	46c0      	nop			; (mov r8, r8)
     5d8:	20000778 	.word	0x20000778
     5dc:	00008aec 	.word	0x00008aec

000005e0 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     5e0:	b510      	push	{r4, lr}
     5e2:	2000      	movs	r0, #0
     5e4:	4b01      	ldr	r3, [pc, #4]	; (5ec <TCC0_Handler+0xc>)
     5e6:	4798      	blx	r3
     5e8:	bd10      	pop	{r4, pc}
     5ea:	46c0      	nop			; (mov r8, r8)
     5ec:	00000589 	.word	0x00000589

000005f0 <TCC1_Handler>:
     5f0:	b510      	push	{r4, lr}
     5f2:	2001      	movs	r0, #1
     5f4:	4b01      	ldr	r3, [pc, #4]	; (5fc <TCC1_Handler+0xc>)
     5f6:	4798      	blx	r3
     5f8:	bd10      	pop	{r4, pc}
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	00000589 	.word	0x00000589

00000600 <TCC2_Handler>:
     600:	b510      	push	{r4, lr}
     602:	2002      	movs	r0, #2
     604:	4b01      	ldr	r3, [pc, #4]	; (60c <TCC2_Handler+0xc>)
     606:	4798      	blx	r3
     608:	bd10      	pop	{r4, pc}
     60a:	46c0      	nop			; (mov r8, r8)
     60c:	00000589 	.word	0x00000589

00000610 <usart_write_callback>:

}
void usart_write_callback(struct usart_module *const usart_module)
{
	
}
     610:	4770      	bx	lr
     612:	46c0      	nop			; (mov r8, r8)

00000614 <usart_read_callback>:
	tc_enable(&(artist_front.tc_instance_ultrasonic));
}


void usart_read_callback(struct usart_module * const usart_instance)
{
     614:	b510      	push	{r4, lr}
     616:	0004      	movs	r4, r0
	switch(rx_buffer[0]) {
     618:	4b0b      	ldr	r3, [pc, #44]	; (648 <usart_read_callback+0x34>)
     61a:	781b      	ldrb	r3, [r3, #0]
     61c:	b2db      	uxtb	r3, r3
     61e:	2b20      	cmp	r3, #32
     620:	d006      	beq.n	630 <usart_read_callback+0x1c>
     622:	2b77      	cmp	r3, #119	; 0x77
     624:	d109      	bne.n	63a <usart_read_callback+0x26>
		case 'c' : 
		break; 
		case 'w' :
		usart_write_buffer_job(usart_instance, "mw\0\0\0", MAX_RX_BUFFER_LENGTH);
     626:	2205      	movs	r2, #5
     628:	4908      	ldr	r1, [pc, #32]	; (64c <usart_read_callback+0x38>)
     62a:	4b09      	ldr	r3, [pc, #36]	; (650 <usart_read_callback+0x3c>)
     62c:	4798      	blx	r3
		break; 
     62e:	e004      	b.n	63a <usart_read_callback+0x26>
		case ' ' : 
		usart_write_buffer_job(usart_instance, "m \0\0\0", MAX_RX_BUFFER_LENGTH);
     630:	2205      	movs	r2, #5
     632:	4906      	ldr	r1, [pc, #24]	; (64c <usart_read_callback+0x38>)
     634:	3108      	adds	r1, #8
     636:	4b06      	ldr	r3, [pc, #24]	; (650 <usart_read_callback+0x3c>)
     638:	4798      	blx	r3
		break;
	}
	usart_read_buffer_job( usart_instance,
     63a:	2205      	movs	r2, #5
     63c:	4902      	ldr	r1, [pc, #8]	; (648 <usart_read_callback+0x34>)
     63e:	0020      	movs	r0, r4
     640:	4b04      	ldr	r3, [pc, #16]	; (654 <usart_read_callback+0x40>)
     642:	4798      	blx	r3
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
	

}
     644:	bd10      	pop	{r4, pc}
     646:	46c0      	nop			; (mov r8, r8)
     648:	20000760 	.word	0x20000760
     64c:	00008b1c 	.word	0x00008b1c
     650:	000019d1 	.word	0x000019d1
     654:	000019f1 	.word	0x000019f1

00000658 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     658:	b570      	push	{r4, r5, r6, lr}
     65a:	b082      	sub	sp, #8
     65c:	0005      	movs	r5, r0
     65e:	000e      	movs	r6, r1
	uint16_t temp = 0;
     660:	2200      	movs	r2, #0
     662:	466b      	mov	r3, sp
     664:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     666:	4c06      	ldr	r4, [pc, #24]	; (680 <usart_serial_getchar+0x28>)
     668:	466b      	mov	r3, sp
     66a:	1d99      	adds	r1, r3, #6
     66c:	0028      	movs	r0, r5
     66e:	47a0      	blx	r4
     670:	2800      	cmp	r0, #0
     672:	d1f9      	bne.n	668 <usart_serial_getchar+0x10>

	*c = temp;
     674:	466b      	mov	r3, sp
     676:	3306      	adds	r3, #6
     678:	881b      	ldrh	r3, [r3, #0]
     67a:	7033      	strb	r3, [r6, #0]
}
     67c:	b002      	add	sp, #8
     67e:	bd70      	pop	{r4, r5, r6, pc}
     680:	000018bd 	.word	0x000018bd

00000684 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     684:	b570      	push	{r4, r5, r6, lr}
     686:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     688:	b28c      	uxth	r4, r1
     68a:	4e03      	ldr	r6, [pc, #12]	; (698 <usart_serial_putchar+0x14>)
     68c:	0021      	movs	r1, r4
     68e:	0028      	movs	r0, r5
     690:	47b0      	blx	r6
     692:	2800      	cmp	r0, #0
     694:	d1fa      	bne.n	68c <usart_serial_putchar+0x8>

	return STATUS_OK;
}
     696:	bd70      	pop	{r4, r5, r6, pc}
     698:	00001891 	.word	0x00001891

0000069c <artist_ultrasonic_tc_configure>:
*  Author: credt
*/

#include "TheArtist.h"

void artist_ultrasonic_tc_configure() {
     69c:	b510      	push	{r4, lr}
     69e:	b08e      	sub	sp, #56	; 0x38
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     6a0:	aa01      	add	r2, sp, #4
     6a2:	2300      	movs	r3, #0
     6a4:	2100      	movs	r1, #0
     6a6:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     6a8:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     6aa:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     6ac:	2000      	movs	r0, #0
     6ae:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     6b0:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     6b2:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     6b4:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     6b6:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     6b8:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     6ba:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     6bc:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     6be:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     6c0:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     6c2:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     6c4:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     6c6:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     6c8:	8593      	strh	r3, [r2, #44]	; 0x2c
	struct tc_config config;
	
	tc_get_config_defaults(&config);
	
	config.counter_size = TC_COUNTER_SIZE_16BIT;
	config.clock_source = GCLK_GENERATOR_3;
     6ca:	3303      	adds	r3, #3
     6cc:	7013      	strb	r3, [r2, #0]
	config.clock_prescaler = TC_CLOCK_PRESCALER_DIV8;
     6ce:	23c0      	movs	r3, #192	; 0xc0
     6d0:	009b      	lsls	r3, r3, #2
     6d2:	8093      	strh	r3, [r2, #4]
	config.enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = true;
     6d4:	2301      	movs	r3, #1
     6d6:	72d3      	strb	r3, [r2, #11]
	tc_init(&(artist_front.tc_instance_ultrasonic), TC4, &config);
     6d8:	4c07      	ldr	r4, [pc, #28]	; (6f8 <artist_ultrasonic_tc_configure+0x5c>)
     6da:	4908      	ldr	r1, [pc, #32]	; (6fc <artist_ultrasonic_tc_configure+0x60>)
     6dc:	0020      	movs	r0, r4
     6de:	4b08      	ldr	r3, [pc, #32]	; (700 <artist_ultrasonic_tc_configure+0x64>)
     6e0:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     6e2:	6822      	ldr	r2, [r4, #0]

	while (tc_is_syncing(module_inst)) {
     6e4:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     6e6:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     6e8:	438b      	bics	r3, r1
     6ea:	d1fc      	bne.n	6e6 <artist_ultrasonic_tc_configure+0x4a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     6ec:	8811      	ldrh	r1, [r2, #0]
     6ee:	3302      	adds	r3, #2
     6f0:	430b      	orrs	r3, r1
     6f2:	8013      	strh	r3, [r2, #0]
	tc_enable(&(artist_front.tc_instance_ultrasonic));
}
     6f4:	b00e      	add	sp, #56	; 0x38
     6f6:	bd10      	pop	{r4, pc}
     6f8:	20000684 	.word	0x20000684
     6fc:	42003000 	.word	0x42003000
     700:	00002569 	.word	0x00002569

00000704 <configure_usart_callbacks>:
	
}


void configure_usart_callbacks(struct usart_module * usart_instance)
{
     704:	b570      	push	{r4, r5, r6, lr}
     706:	0004      	movs	r4, r0
	//! [setup_register_callbacks]
	usart_register_callback(usart_instance,
     708:	2200      	movs	r2, #0
     70a:	4906      	ldr	r1, [pc, #24]	; (724 <configure_usart_callbacks+0x20>)
     70c:	4d06      	ldr	r5, [pc, #24]	; (728 <configure_usart_callbacks+0x24>)
     70e:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	
	usart_register_callback(usart_instance,
     710:	2201      	movs	r2, #1
     712:	4906      	ldr	r1, [pc, #24]	; (72c <configure_usart_callbacks+0x28>)
     714:	0020      	movs	r0, r4
     716:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     718:	2231      	movs	r2, #49	; 0x31
     71a:	5ca1      	ldrb	r1, [r4, r2]
     71c:	2303      	movs	r3, #3
     71e:	430b      	orrs	r3, r1
     720:	54a3      	strb	r3, [r4, r2]

	//! [setup_enable_callbacks]
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
	//! [setup_enable_callbacks]
}
     722:	bd70      	pop	{r4, r5, r6, pc}
     724:	00000611 	.word	0x00000611
     728:	000019b9 	.word	0x000019b9
     72c:	00000615 	.word	0x00000615

00000730 <artist_usart_configure>:

void artist_usart_configure(struct usart_module * usart_instance) {
     730:	b570      	push	{r4, r5, r6, lr}
     732:	b090      	sub	sp, #64	; 0x40
     734:	0004      	movs	r4, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     736:	2380      	movs	r3, #128	; 0x80
     738:	05db      	lsls	r3, r3, #23
     73a:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     73c:	2300      	movs	r3, #0
     73e:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     740:	22ff      	movs	r2, #255	; 0xff
     742:	4669      	mov	r1, sp
     744:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     746:	2200      	movs	r2, #0
     748:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     74a:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
     74c:	2196      	movs	r1, #150	; 0x96
     74e:	0189      	lsls	r1, r1, #6
     750:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
     752:	2101      	movs	r1, #1
     754:	2024      	movs	r0, #36	; 0x24
     756:	466d      	mov	r5, sp
     758:	5429      	strb	r1, [r5, r0]
	config->transmitter_enable = true;
     75a:	3001      	adds	r0, #1
     75c:	5429      	strb	r1, [r5, r0]
	config->clock_polarity_inverted = false;
     75e:	3125      	adds	r1, #37	; 0x25
     760:	546b      	strb	r3, [r5, r1]
	config->use_external_clock = false;
     762:	3101      	adds	r1, #1
     764:	546b      	strb	r3, [r5, r1]
	config->ext_clock_freq   = 0;
     766:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     768:	3105      	adds	r1, #5
     76a:	546b      	strb	r3, [r5, r1]
	config->generator_source = GCLK_GENERATOR_0;
     76c:	3101      	adds	r1, #1
     76e:	546b      	strb	r3, [r5, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     770:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     772:	822b      	strh	r3, [r5, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     774:	76eb      	strb	r3, [r5, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     776:	762a      	strb	r2, [r5, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     778:	772a      	strb	r2, [r5, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     77a:	766a      	strb	r2, [r5, #25]
	config->receive_pulse_length                    = 19;
     77c:	2313      	movs	r3, #19
     77e:	76ab      	strb	r3, [r5, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     780:	776a      	strb	r2, [r5, #29]
	struct usart_config config;
	usart_get_config_defaults(&config);
	config.baudrate = CONF_ARTIST_BAUDRATE;
	config.mux_setting	= EDBG_CDC_SERCOM_MUX_SETTING;
     782:	2380      	movs	r3, #128	; 0x80
     784:	035b      	lsls	r3, r3, #13
     786:	9303      	str	r3, [sp, #12]
	config.pinmux_pad0	= EDBG_CDC_SERCOM_PINMUX_PAD0;
     788:	4b1e      	ldr	r3, [pc, #120]	; (804 <artist_usart_configure+0xd4>)
     78a:	930c      	str	r3, [sp, #48]	; 0x30
	config.pinmux_pad1	= EDBG_CDC_SERCOM_PINMUX_PAD1;
     78c:	4b1e      	ldr	r3, [pc, #120]	; (808 <artist_usart_configure+0xd8>)
     78e:	930d      	str	r3, [sp, #52]	; 0x34
	config.pinmux_pad2	= EDBG_CDC_SERCOM_PINMUX_PAD2;
     790:	2301      	movs	r3, #1
     792:	425b      	negs	r3, r3
     794:	930e      	str	r3, [sp, #56]	; 0x38
	config.pinmux_pad3	= EDBG_CDC_SERCOM_PINMUX_PAD3;
     796:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(usart_instance, EDBG_CDC_MODULE, &config) != STATUS_OK);
     798:	4e1c      	ldr	r6, [pc, #112]	; (80c <artist_usart_configure+0xdc>)
     79a:	4d1d      	ldr	r5, [pc, #116]	; (810 <artist_usart_configure+0xe0>)
     79c:	466a      	mov	r2, sp
     79e:	0031      	movs	r1, r6
     7a0:	0020      	movs	r0, r4
     7a2:	47a8      	blx	r5
     7a4:	2800      	cmp	r0, #0
     7a6:	d1f9      	bne.n	79c <artist_usart_configure+0x6c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     7a8:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     7aa:	0028      	movs	r0, r5
     7ac:	4b19      	ldr	r3, [pc, #100]	; (814 <artist_usart_configure+0xe4>)
     7ae:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     7b0:	231f      	movs	r3, #31
     7b2:	4018      	ands	r0, r3
     7b4:	3b1e      	subs	r3, #30
     7b6:	4083      	lsls	r3, r0
     7b8:	4a17      	ldr	r2, [pc, #92]	; (818 <artist_usart_configure+0xe8>)
     7ba:	6013      	str	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     7bc:	6822      	ldr	r2, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     7be:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     7c0:	2b00      	cmp	r3, #0
     7c2:	d1fc      	bne.n	7be <artist_usart_configure+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     7c4:	682a      	ldr	r2, [r5, #0]
     7c6:	3302      	adds	r3, #2
     7c8:	4313      	orrs	r3, r2
     7ca:	602b      	str	r3, [r5, #0]
	
	
	usart_enable(usart_instance);
	configure_usart_callbacks(usart_instance);
     7cc:	0020      	movs	r0, r4
     7ce:	4b13      	ldr	r3, [pc, #76]	; (81c <artist_usart_configure+0xec>)
     7d0:	4798      	blx	r3
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     7d2:	4b13      	ldr	r3, [pc, #76]	; (820 <artist_usart_configure+0xf0>)
     7d4:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     7d6:	4a13      	ldr	r2, [pc, #76]	; (824 <artist_usart_configure+0xf4>)
     7d8:	4b13      	ldr	r3, [pc, #76]	; (828 <artist_usart_configure+0xf8>)
     7da:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     7dc:	4a13      	ldr	r2, [pc, #76]	; (82c <artist_usart_configure+0xfc>)
     7de:	4b14      	ldr	r3, [pc, #80]	; (830 <artist_usart_configure+0x100>)
     7e0:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
     7e2:	466a      	mov	r2, sp
     7e4:	4909      	ldr	r1, [pc, #36]	; (80c <artist_usart_configure+0xdc>)
     7e6:	0020      	movs	r0, r4
     7e8:	4b09      	ldr	r3, [pc, #36]	; (810 <artist_usart_configure+0xe0>)
     7ea:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     7ec:	4d11      	ldr	r5, [pc, #68]	; (834 <artist_usart_configure+0x104>)
     7ee:	682b      	ldr	r3, [r5, #0]
     7f0:	6898      	ldr	r0, [r3, #8]
     7f2:	2100      	movs	r1, #0
     7f4:	4c10      	ldr	r4, [pc, #64]	; (838 <artist_usart_configure+0x108>)
     7f6:	47a0      	blx	r4
	setbuf(stdin, NULL);
     7f8:	682b      	ldr	r3, [r5, #0]
     7fa:	6858      	ldr	r0, [r3, #4]
     7fc:	2100      	movs	r1, #0
     7fe:	47a0      	blx	r4
	
	stdio_serial_init(usart_instance, EDBG_CDC_MODULE, &config);
}
     800:	b010      	add	sp, #64	; 0x40
     802:	bd70      	pop	{r4, r5, r6, pc}
     804:	00040003 	.word	0x00040003
     808:	00050003 	.word	0x00050003
     80c:	42000800 	.word	0x42000800
     810:	00001559 	.word	0x00001559
     814:	00001131 	.word	0x00001131
     818:	e000e100 	.word	0xe000e100
     81c:	00000705 	.word	0x00000705
     820:	200007f4 	.word	0x200007f4
     824:	00000685 	.word	0x00000685
     828:	200007f0 	.word	0x200007f0
     82c:	00000659 	.word	0x00000659
     830:	200007ec 	.word	0x200007ec
     834:	2000006c 	.word	0x2000006c
     838:	0000400d 	.word	0x0000400d

0000083c <artist_ultrasonic_update>:
	tcc_init(&(artist->tcc_instance), TCC0, &config);
	tcc_enable(&(artist->tcc_instance));
	*/
}

void artist_ultrasonic_update() {
     83c:	b570      	push	{r4, r5, r6, lr}
	artist_front.center_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_center));
     83e:	4e09      	ldr	r6, [pc, #36]	; (864 <artist_ultrasonic_update+0x28>)
     840:	0030      	movs	r0, r6
     842:	4d09      	ldr	r5, [pc, #36]	; (868 <artist_ultrasonic_update+0x2c>)
     844:	47a8      	blx	r5
     846:	0034      	movs	r4, r6
     848:	3cb4      	subs	r4, #180	; 0xb4
     84a:	61b0      	str	r0, [r6, #24]
	artist_front.right_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_right));
     84c:	0020      	movs	r0, r4
     84e:	30c4      	adds	r0, #196	; 0xc4
     850:	47a8      	blx	r5
     852:	23d4      	movs	r3, #212	; 0xd4
     854:	50e0      	str	r0, [r4, r3]
	artist_front.left_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_left));
     856:	0020      	movs	r0, r4
     858:	30bc      	adds	r0, #188	; 0xbc
     85a:	47a8      	blx	r5
     85c:	23d0      	movs	r3, #208	; 0xd0
     85e:	50e0      	str	r0, [r4, r3]
}
     860:	bd70      	pop	{r4, r5, r6, pc}
     862:	46c0      	nop			; (mov r8, r8)
     864:	20000738 	.word	0x20000738
     868:	000003b5 	.word	0x000003b5

0000086c <callbacks>:
	//! [setup_enable]
	tc_enable(&(artist_front.tc_instance_timer));
	//! [setup_enable]
}

void callbacks (void) {
     86c:	b510      	push	{r4, lr}
	// [ultra sonic]
	static uint16_t ultrasonic_counter		= 0;
	static uint16_t maze_counter			= 0; 
	static uint16_t pause_counter			= 0;
	ultrasonic_counter ++;
     86e:	4a0f      	ldr	r2, [pc, #60]	; (8ac <callbacks+0x40>)
     870:	8813      	ldrh	r3, [r2, #0]
     872:	3301      	adds	r3, #1
     874:	b29b      	uxth	r3, r3
     876:	8013      	strh	r3, [r2, #0]
	maze_counter ++;
     878:	490d      	ldr	r1, [pc, #52]	; (8b0 <callbacks+0x44>)
     87a:	880a      	ldrh	r2, [r1, #0]
     87c:	3201      	adds	r2, #1
     87e:	800a      	strh	r2, [r1, #0]
	pause_counter ++;
     880:	490c      	ldr	r1, [pc, #48]	; (8b4 <callbacks+0x48>)
     882:	880a      	ldrh	r2, [r1, #0]
     884:	3201      	adds	r2, #1
     886:	800a      	strh	r2, [r1, #0]

	if (ultrasonic_counter > 5) {
     888:	2b05      	cmp	r3, #5
     88a:	d904      	bls.n	896 <callbacks+0x2a>
		artist_ultrasonic_update();
     88c:	4b0a      	ldr	r3, [pc, #40]	; (8b8 <callbacks+0x4c>)
     88e:	4798      	blx	r3
		ultrasonic_counter = 0; 
     890:	2200      	movs	r2, #0
     892:	4b06      	ldr	r3, [pc, #24]	; (8ac <callbacks+0x40>)
     894:	801a      	strh	r2, [r3, #0]
	}

	if(maze_counter > 30){
     896:	4b06      	ldr	r3, [pc, #24]	; (8b0 <callbacks+0x44>)
     898:	881b      	ldrh	r3, [r3, #0]
     89a:	2b1e      	cmp	r3, #30
     89c:	d904      	bls.n	8a8 <callbacks+0x3c>
		artist_do_maze();
     89e:	4b07      	ldr	r3, [pc, #28]	; (8bc <callbacks+0x50>)
     8a0:	4798      	blx	r3
		maze_counter = 0;
     8a2:	2200      	movs	r2, #0
     8a4:	4b02      	ldr	r3, [pc, #8]	; (8b0 <callbacks+0x44>)
     8a6:	801a      	strh	r2, [r3, #0]
// 			artist_do_maze(); 
// 			maze_counter = 0;
// 		}
// 	}
	// ! [ultra sonic]
}
     8a8:	bd10      	pop	{r4, pc}
     8aa:	46c0      	nop			; (mov r8, r8)
     8ac:	200000c6 	.word	0x200000c6
     8b0:	200000c8 	.word	0x200000c8
     8b4:	200000c4 	.word	0x200000c4
     8b8:	0000083d 	.word	0x0000083d
     8bc:	0000012d 	.word	0x0000012d

000008c0 <artist_scheduler_tc_configure>:
	artist_front.center_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_center));
	artist_front.right_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_right));
	artist_front.left_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_left));
}

void artist_scheduler_tc_configure() {
     8c0:	b510      	push	{r4, lr}
     8c2:	b08e      	sub	sp, #56	; 0x38

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     8c4:	aa01      	add	r2, sp, #4
     8c6:	2300      	movs	r3, #0
     8c8:	2100      	movs	r1, #0
     8ca:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     8cc:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     8ce:	2000      	movs	r0, #0
     8d0:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     8d2:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     8d4:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     8d6:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     8d8:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     8da:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     8dc:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     8de:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     8e0:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     8e2:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     8e4:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     8e6:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     8e8:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     8ea:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     8ec:	8593      	strh	r3, [r2, #44]	; 0x2c
	//! [setup_config_defaults]
	tc_get_config_defaults(&config_tc);
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
     8ee:	3304      	adds	r3, #4
     8f0:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source = GCLK_GENERATOR_3;
     8f2:	3b01      	subs	r3, #1
     8f4:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024; //
     8f6:	23e0      	movs	r3, #224	; 0xe0
     8f8:	00db      	lsls	r3, r3, #3
     8fa:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period = 50;
     8fc:	2132      	movs	r1, #50	; 0x32
     8fe:	2329      	movs	r3, #41	; 0x29
     900:	54d1      	strb	r1, [r2, r3]
	//config_tc.counter_8_bit.compare_capture_channel[0] = 5;
	//config_tc.counter_8_bit.compare_capture_channel[1] = 54;
	//! [setup_change_config]

	//! [20 Hz setup_set_config]
	tc_init(&(artist_front.tc_instance_timer), TC5, &config_tc);
     902:	4c08      	ldr	r4, [pc, #32]	; (924 <artist_scheduler_tc_configure+0x64>)
     904:	4908      	ldr	r1, [pc, #32]	; (928 <artist_scheduler_tc_configure+0x68>)
     906:	0020      	movs	r0, r4
     908:	4b08      	ldr	r3, [pc, #32]	; (92c <artist_scheduler_tc_configure+0x6c>)
     90a:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     90c:	6822      	ldr	r2, [r4, #0]

	while (tc_is_syncing(module_inst)) {
     90e:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     910:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     912:	438b      	bics	r3, r1
     914:	d1fc      	bne.n	910 <artist_scheduler_tc_configure+0x50>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     916:	8811      	ldrh	r1, [r2, #0]
     918:	3302      	adds	r3, #2
     91a:	430b      	orrs	r3, r1
     91c:	8013      	strh	r3, [r2, #0]
	//! [setup_set_config]

	//! [setup_enable]
	tc_enable(&(artist_front.tc_instance_timer));
	//! [setup_enable]
}
     91e:	b00e      	add	sp, #56	; 0x38
     920:	bd10      	pop	{r4, pc}
     922:	46c0      	nop			; (mov r8, r8)
     924:	200006a0 	.word	0x200006a0
     928:	42003400 	.word	0x42003400
     92c:	00002569 	.word	0x00002569

00000930 <artist_configure_tc_callbacks>:
// 		}
// 	}
	// ! [ultra sonic]
}
void artist_configure_tc_callbacks(void)
{
     930:	b510      	push	{r4, lr}
	tc_register_callback(&(artist_front.tc_instance_timer), callbacks ,
     932:	4c0d      	ldr	r4, [pc, #52]	; (968 <artist_configure_tc_callbacks+0x38>)
     934:	2200      	movs	r2, #0
     936:	490d      	ldr	r1, [pc, #52]	; (96c <artist_configure_tc_callbacks+0x3c>)
     938:	0020      	movs	r0, r4
     93a:	4b0d      	ldr	r3, [pc, #52]	; (970 <artist_configure_tc_callbacks+0x40>)
     93c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     93e:	6820      	ldr	r0, [r4, #0]
     940:	3c1c      	subs	r4, #28
     942:	4b0c      	ldr	r3, [pc, #48]	; (974 <artist_configure_tc_callbacks+0x44>)
     944:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     946:	4b0c      	ldr	r3, [pc, #48]	; (978 <artist_configure_tc_callbacks+0x48>)
     948:	5c1b      	ldrb	r3, [r3, r0]
     94a:	221f      	movs	r2, #31
     94c:	4013      	ands	r3, r2
     94e:	3a1e      	subs	r2, #30
     950:	0011      	movs	r1, r2
     952:	4099      	lsls	r1, r3
     954:	4b09      	ldr	r3, [pc, #36]	; (97c <artist_configure_tc_callbacks+0x4c>)
     956:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     958:	2135      	movs	r1, #53	; 0x35
     95a:	5c60      	ldrb	r0, [r4, r1]
     95c:	2301      	movs	r3, #1
     95e:	4303      	orrs	r3, r0
     960:	5463      	strb	r3, [r4, r1]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     962:	69e3      	ldr	r3, [r4, #28]
     964:	735a      	strb	r2, [r3, #13]
	TC_CALLBACK_OVERFLOW);
	
	tc_enable_callback(&(artist_front.tc_instance_timer), TC_CALLBACK_OVERFLOW);
     966:	bd10      	pop	{r4, pc}
     968:	200006a0 	.word	0x200006a0
     96c:	0000086d 	.word	0x0000086d
     970:	00002475 	.word	0x00002475
     974:	00002531 	.word	0x00002531
     978:	00008b2c 	.word	0x00008b2c
     97c:	e000e100 	.word	0xe000e100

00000980 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     980:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     982:	2000      	movs	r0, #0
     984:	4b08      	ldr	r3, [pc, #32]	; (9a8 <delay_init+0x28>)
     986:	4798      	blx	r3
     988:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     98a:	4c08      	ldr	r4, [pc, #32]	; (9ac <delay_init+0x2c>)
     98c:	21fa      	movs	r1, #250	; 0xfa
     98e:	0089      	lsls	r1, r1, #2
     990:	47a0      	blx	r4
     992:	4b07      	ldr	r3, [pc, #28]	; (9b0 <delay_init+0x30>)
     994:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     996:	4907      	ldr	r1, [pc, #28]	; (9b4 <delay_init+0x34>)
     998:	0028      	movs	r0, r5
     99a:	47a0      	blx	r4
     99c:	4b06      	ldr	r3, [pc, #24]	; (9b8 <delay_init+0x38>)
     99e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     9a0:	2205      	movs	r2, #5
     9a2:	4b06      	ldr	r3, [pc, #24]	; (9bc <delay_init+0x3c>)
     9a4:	601a      	str	r2, [r3, #0]
}
     9a6:	bd70      	pop	{r4, r5, r6, pc}
     9a8:	00002205 	.word	0x00002205
     9ac:	00005f35 	.word	0x00005f35
     9b0:	20000004 	.word	0x20000004
     9b4:	000f4240 	.word	0x000f4240
     9b8:	20000000 	.word	0x20000000
     9bc:	e000e010 	.word	0xe000e010

000009c0 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     9c0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     9c2:	4b08      	ldr	r3, [pc, #32]	; (9e4 <delay_cycles_us+0x24>)
     9c4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     9c6:	4a08      	ldr	r2, [pc, #32]	; (9e8 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     9c8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     9ca:	2180      	movs	r1, #128	; 0x80
     9cc:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
     9ce:	e006      	b.n	9de <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     9d0:	2c00      	cmp	r4, #0
     9d2:	d004      	beq.n	9de <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
     9d4:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     9d6:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     9d8:	6813      	ldr	r3, [r2, #0]
     9da:	420b      	tst	r3, r1
     9dc:	d0fc      	beq.n	9d8 <delay_cycles_us+0x18>
     9de:	3801      	subs	r0, #1
     9e0:	d2f6      	bcs.n	9d0 <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
     9e2:	bd30      	pop	{r4, r5, pc}
     9e4:	20000000 	.word	0x20000000
     9e8:	e000e010 	.word	0xe000e010

000009ec <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     9ec:	4b0c      	ldr	r3, [pc, #48]	; (a20 <cpu_irq_enter_critical+0x34>)
     9ee:	681b      	ldr	r3, [r3, #0]
     9f0:	2b00      	cmp	r3, #0
     9f2:	d110      	bne.n	a16 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     9f4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     9f8:	2b00      	cmp	r3, #0
     9fa:	d109      	bne.n	a10 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     9fc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     9fe:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     a02:	2200      	movs	r2, #0
     a04:	4b07      	ldr	r3, [pc, #28]	; (a24 <cpu_irq_enter_critical+0x38>)
     a06:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     a08:	3201      	adds	r2, #1
     a0a:	4b07      	ldr	r3, [pc, #28]	; (a28 <cpu_irq_enter_critical+0x3c>)
     a0c:	701a      	strb	r2, [r3, #0]
     a0e:	e002      	b.n	a16 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     a10:	2200      	movs	r2, #0
     a12:	4b05      	ldr	r3, [pc, #20]	; (a28 <cpu_irq_enter_critical+0x3c>)
     a14:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     a16:	4a02      	ldr	r2, [pc, #8]	; (a20 <cpu_irq_enter_critical+0x34>)
     a18:	6813      	ldr	r3, [r2, #0]
     a1a:	3301      	adds	r3, #1
     a1c:	6013      	str	r3, [r2, #0]
}
     a1e:	4770      	bx	lr
     a20:	200000cc 	.word	0x200000cc
     a24:	20000008 	.word	0x20000008
     a28:	200000d0 	.word	0x200000d0

00000a2c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     a2c:	4b08      	ldr	r3, [pc, #32]	; (a50 <cpu_irq_leave_critical+0x24>)
     a2e:	681a      	ldr	r2, [r3, #0]
     a30:	3a01      	subs	r2, #1
     a32:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     a34:	681b      	ldr	r3, [r3, #0]
     a36:	2b00      	cmp	r3, #0
     a38:	d109      	bne.n	a4e <cpu_irq_leave_critical+0x22>
     a3a:	4b06      	ldr	r3, [pc, #24]	; (a54 <cpu_irq_leave_critical+0x28>)
     a3c:	781b      	ldrb	r3, [r3, #0]
     a3e:	2b00      	cmp	r3, #0
     a40:	d005      	beq.n	a4e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     a42:	2201      	movs	r2, #1
     a44:	4b04      	ldr	r3, [pc, #16]	; (a58 <cpu_irq_leave_critical+0x2c>)
     a46:	701a      	strb	r2, [r3, #0]
     a48:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     a4c:	b662      	cpsie	i
	}
}
     a4e:	4770      	bx	lr
     a50:	200000cc 	.word	0x200000cc
     a54:	200000d0 	.word	0x200000d0
     a58:	20000008 	.word	0x20000008

00000a5c <system_board_init>:




void system_board_init(void)
{
     a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a5e:	4647      	mov	r7, r8
     a60:	b480      	push	{r7}
     a62:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     a64:	ac01      	add	r4, sp, #4
     a66:	2601      	movs	r6, #1
     a68:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     a6a:	2700      	movs	r7, #0
     a6c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     a6e:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     a70:	0021      	movs	r1, r4
     a72:	2013      	movs	r0, #19
     a74:	4d27      	ldr	r5, [pc, #156]	; (b14 <system_board_init+0xb8>)
     a76:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     a78:	4b27      	ldr	r3, [pc, #156]	; (b18 <system_board_init+0xbc>)
     a7a:	4698      	mov	r8, r3
     a7c:	2380      	movs	r3, #128	; 0x80
     a7e:	031b      	lsls	r3, r3, #12
     a80:	4642      	mov	r2, r8
     a82:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     a84:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     a86:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     a88:	0021      	movs	r1, r4
     a8a:	201c      	movs	r0, #28
     a8c:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     a8e:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     a90:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     a92:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     a94:	0021      	movs	r1, r4
     a96:	2052      	movs	r0, #82	; 0x52
     a98:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     a9a:	0021      	movs	r1, r4
     a9c:	203e      	movs	r0, #62	; 0x3e
     a9e:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     aa0:	0021      	movs	r1, r4
     aa2:	203f      	movs	r0, #63	; 0x3f
     aa4:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     aa6:	0021      	movs	r1, r4
     aa8:	202f      	movs	r0, #47	; 0x2f
     aaa:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     aac:	0021      	movs	r1, r4
     aae:	2014      	movs	r0, #20
     ab0:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     ab2:	2280      	movs	r2, #128	; 0x80
     ab4:	02d2      	lsls	r2, r2, #11
     ab6:	4b19      	ldr	r3, [pc, #100]	; (b1c <system_board_init+0xc0>)
     ab8:	619a      	str	r2, [r3, #24]
     aba:	3b80      	subs	r3, #128	; 0x80
     abc:	2280      	movs	r2, #128	; 0x80
     abe:	05d2      	lsls	r2, r2, #23
     ac0:	619a      	str	r2, [r3, #24]
     ac2:	2280      	movs	r2, #128	; 0x80
     ac4:	0612      	lsls	r2, r2, #24
     ac6:	619a      	str	r2, [r3, #24]
     ac8:	2280      	movs	r2, #128	; 0x80
     aca:	0212      	lsls	r2, r2, #8
     acc:	619a      	str	r2, [r3, #24]
     ace:	2380      	movs	r3, #128	; 0x80
     ad0:	035b      	lsls	r3, r3, #13
     ad2:	4642      	mov	r2, r8
     ad4:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     ad6:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     ad8:	0021      	movs	r1, r4
     ada:	2053      	movs	r0, #83	; 0x53
     adc:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     ade:	4a10      	ldr	r2, [pc, #64]	; (b20 <system_board_init+0xc4>)
     ae0:	6a13      	ldr	r3, [r2, #32]
     ae2:	2180      	movs	r1, #128	; 0x80
     ae4:	0389      	lsls	r1, r1, #14
     ae6:	430b      	orrs	r3, r1
     ae8:	6213      	str	r3, [r2, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     aea:	2204      	movs	r2, #4
     aec:	4b0d      	ldr	r3, [pc, #52]	; (b24 <system_board_init+0xc8>)
     aee:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     af0:	466b      	mov	r3, sp
     af2:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     af4:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     af6:	2305      	movs	r3, #5
     af8:	466a      	mov	r2, sp
     afa:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     afc:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     afe:	4669      	mov	r1, sp
     b00:	2009      	movs	r0, #9
     b02:	4c09      	ldr	r4, [pc, #36]	; (b28 <system_board_init+0xcc>)
     b04:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     b06:	4669      	mov	r1, sp
     b08:	200c      	movs	r0, #12
     b0a:	47a0      	blx	r4
#endif

}
     b0c:	b002      	add	sp, #8
     b0e:	bc04      	pop	{r2}
     b10:	4690      	mov	r8, r2
     b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b14:	00000ccd 	.word	0x00000ccd
     b18:	41004400 	.word	0x41004400
     b1c:	41004500 	.word	0x41004500
     b20:	40000400 	.word	0x40000400
     b24:	42005400 	.word	0x42005400
     b28:	00002415 	.word	0x00002415

00000b2c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     b2c:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     b2e:	2a00      	cmp	r2, #0
     b30:	d10d      	bne.n	b4e <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     b32:	008b      	lsls	r3, r1, #2
     b34:	4a07      	ldr	r2, [pc, #28]	; (b54 <extint_register_callback+0x28>)
     b36:	589b      	ldr	r3, [r3, r2]
     b38:	2b00      	cmp	r3, #0
     b3a:	d103      	bne.n	b44 <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
     b3c:	0089      	lsls	r1, r1, #2
     b3e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     b40:	2300      	movs	r3, #0
     b42:	e004      	b.n	b4e <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
     b44:	4283      	cmp	r3, r0
     b46:	d001      	beq.n	b4c <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     b48:	231d      	movs	r3, #29
     b4a:	e000      	b.n	b4e <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
     b4c:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     b4e:	0018      	movs	r0, r3
     b50:	4770      	bx	lr
     b52:	46c0      	nop			; (mov r8, r8)
     b54:	20000788 	.word	0x20000788

00000b58 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     b58:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     b5a:	2200      	movs	r2, #0
     b5c:	4b15      	ldr	r3, [pc, #84]	; (bb4 <EIC_Handler+0x5c>)
     b5e:	701a      	strb	r2, [r3, #0]
     b60:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     b62:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     b64:	4e14      	ldr	r6, [pc, #80]	; (bb8 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     b66:	4c13      	ldr	r4, [pc, #76]	; (bb4 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     b68:	2b1f      	cmp	r3, #31
     b6a:	d919      	bls.n	ba0 <EIC_Handler+0x48>
     b6c:	e00f      	b.n	b8e <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     b6e:	2100      	movs	r1, #0
     b70:	e000      	b.n	b74 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     b72:	4912      	ldr	r1, [pc, #72]	; (bbc <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     b74:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     b76:	009b      	lsls	r3, r3, #2
     b78:	599b      	ldr	r3, [r3, r6]
     b7a:	2b00      	cmp	r3, #0
     b7c:	d000      	beq.n	b80 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     b7e:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     b80:	7823      	ldrb	r3, [r4, #0]
     b82:	3301      	adds	r3, #1
     b84:	b2db      	uxtb	r3, r3
     b86:	7023      	strb	r3, [r4, #0]
     b88:	2b0f      	cmp	r3, #15
     b8a:	d9ed      	bls.n	b68 <EIC_Handler+0x10>
     b8c:	e011      	b.n	bb2 <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     b8e:	0029      	movs	r1, r5
     b90:	4019      	ands	r1, r3
     b92:	2201      	movs	r2, #1
     b94:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     b96:	2100      	movs	r1, #0
     b98:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     b9a:	4211      	tst	r1, r2
     b9c:	d1e7      	bne.n	b6e <EIC_Handler+0x16>
     b9e:	e7ef      	b.n	b80 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     ba0:	0029      	movs	r1, r5
     ba2:	4019      	ands	r1, r3
     ba4:	2201      	movs	r2, #1
     ba6:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     ba8:	4904      	ldr	r1, [pc, #16]	; (bbc <EIC_Handler+0x64>)
     baa:	6909      	ldr	r1, [r1, #16]
     bac:	4211      	tst	r1, r2
     bae:	d1e0      	bne.n	b72 <EIC_Handler+0x1a>
     bb0:	e7e6      	b.n	b80 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     bb2:	bd70      	pop	{r4, r5, r6, pc}
     bb4:	20000784 	.word	0x20000784
     bb8:	20000788 	.word	0x20000788
     bbc:	40001800 	.word	0x40001800

00000bc0 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     bc0:	4a04      	ldr	r2, [pc, #16]	; (bd4 <_extint_enable+0x14>)
     bc2:	7811      	ldrb	r1, [r2, #0]
     bc4:	2302      	movs	r3, #2
     bc6:	430b      	orrs	r3, r1
     bc8:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     bca:	7853      	ldrb	r3, [r2, #1]
     bcc:	b25b      	sxtb	r3, r3
     bce:	2b00      	cmp	r3, #0
     bd0:	dbfb      	blt.n	bca <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     bd2:	4770      	bx	lr
     bd4:	40001800 	.word	0x40001800

00000bd8 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     bd8:	b500      	push	{lr}
     bda:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     bdc:	4a12      	ldr	r2, [pc, #72]	; (c28 <_system_extint_init+0x50>)
     bde:	6991      	ldr	r1, [r2, #24]
     be0:	2340      	movs	r3, #64	; 0x40
     be2:	430b      	orrs	r3, r1
     be4:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     be6:	a901      	add	r1, sp, #4
     be8:	2300      	movs	r3, #0
     bea:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     bec:	2005      	movs	r0, #5
     bee:	4b0f      	ldr	r3, [pc, #60]	; (c2c <_system_extint_init+0x54>)
     bf0:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     bf2:	2005      	movs	r0, #5
     bf4:	4b0e      	ldr	r3, [pc, #56]	; (c30 <_system_extint_init+0x58>)
     bf6:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     bf8:	4a0e      	ldr	r2, [pc, #56]	; (c34 <_system_extint_init+0x5c>)
     bfa:	7811      	ldrb	r1, [r2, #0]
     bfc:	2301      	movs	r3, #1
     bfe:	430b      	orrs	r3, r1
     c00:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     c02:	7853      	ldrb	r3, [r2, #1]
     c04:	b25b      	sxtb	r3, r3
     c06:	2b00      	cmp	r3, #0
     c08:	dbfb      	blt.n	c02 <_system_extint_init+0x2a>
     c0a:	4b0b      	ldr	r3, [pc, #44]	; (c38 <_system_extint_init+0x60>)
     c0c:	0019      	movs	r1, r3
     c0e:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     c10:	2200      	movs	r2, #0
     c12:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     c14:	4299      	cmp	r1, r3
     c16:	d1fc      	bne.n	c12 <_system_extint_init+0x3a>
     c18:	2210      	movs	r2, #16
     c1a:	4b08      	ldr	r3, [pc, #32]	; (c3c <_system_extint_init+0x64>)
     c1c:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     c1e:	4b08      	ldr	r3, [pc, #32]	; (c40 <_system_extint_init+0x68>)
     c20:	4798      	blx	r3
}
     c22:	b003      	add	sp, #12
     c24:	bd00      	pop	{pc}
     c26:	46c0      	nop			; (mov r8, r8)
     c28:	40000400 	.word	0x40000400
     c2c:	0000231d 	.word	0x0000231d
     c30:	00002291 	.word	0x00002291
     c34:	40001800 	.word	0x40001800
     c38:	20000788 	.word	0x20000788
     c3c:	e000e100 	.word	0xe000e100
     c40:	00000bc1 	.word	0x00000bc1

00000c44 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     c44:	2300      	movs	r3, #0
     c46:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     c48:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     c4a:	2201      	movs	r2, #1
     c4c:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     c4e:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     c50:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     c52:	3302      	adds	r3, #2
     c54:	72c3      	strb	r3, [r0, #11]
}
     c56:	4770      	bx	lr

00000c58 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     c58:	b5f0      	push	{r4, r5, r6, r7, lr}
     c5a:	b083      	sub	sp, #12
     c5c:	0005      	movs	r5, r0
     c5e:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c60:	a901      	add	r1, sp, #4
     c62:	2300      	movs	r3, #0
     c64:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     c66:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     c68:	7923      	ldrb	r3, [r4, #4]
     c6a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     c6c:	7a23      	ldrb	r3, [r4, #8]
     c6e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     c70:	7820      	ldrb	r0, [r4, #0]
     c72:	4b14      	ldr	r3, [pc, #80]	; (cc4 <extint_chan_set_config+0x6c>)
     c74:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     c76:	2000      	movs	r0, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     c78:	2d1f      	cmp	r5, #31
     c7a:	d800      	bhi.n	c7e <extint_chan_set_config+0x26>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     c7c:	4812      	ldr	r0, [pc, #72]	; (cc8 <extint_chan_set_config+0x70>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     c7e:	2107      	movs	r1, #7
     c80:	4029      	ands	r1, r5
     c82:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     c84:	7ae2      	ldrb	r2, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     c86:	7aa3      	ldrb	r3, [r4, #10]
     c88:	2b00      	cmp	r3, #0
     c8a:	d001      	beq.n	c90 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
     c8c:	2308      	movs	r3, #8
     c8e:	431a      	orrs	r2, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     c90:	08eb      	lsrs	r3, r5, #3
     c92:	009b      	lsls	r3, r3, #2
     c94:	18c3      	adds	r3, r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
     c96:	699e      	ldr	r6, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     c98:	270f      	movs	r7, #15
     c9a:	408f      	lsls	r7, r1
     c9c:	43be      	bics	r6, r7
     c9e:	408a      	lsls	r2, r1
     ca0:	4332      	orrs	r2, r6
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     ca2:	619a      	str	r2, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     ca4:	7a63      	ldrb	r3, [r4, #9]
     ca6:	2b00      	cmp	r3, #0
     ca8:	d005      	beq.n	cb6 <extint_chan_set_config+0x5e>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     caa:	6942      	ldr	r2, [r0, #20]
     cac:	2301      	movs	r3, #1
     cae:	40ab      	lsls	r3, r5
     cb0:	4313      	orrs	r3, r2
     cb2:	6143      	str	r3, [r0, #20]
     cb4:	e004      	b.n	cc0 <extint_chan_set_config+0x68>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     cb6:	6943      	ldr	r3, [r0, #20]
     cb8:	2201      	movs	r2, #1
     cba:	40aa      	lsls	r2, r5
     cbc:	4393      	bics	r3, r2
     cbe:	6143      	str	r3, [r0, #20]
	}
}
     cc0:	b003      	add	sp, #12
     cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cc4:	00002415 	.word	0x00002415
     cc8:	40001800 	.word	0x40001800

00000ccc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     ccc:	b500      	push	{lr}
     cce:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     cd0:	ab01      	add	r3, sp, #4
     cd2:	2280      	movs	r2, #128	; 0x80
     cd4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     cd6:	780a      	ldrb	r2, [r1, #0]
     cd8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     cda:	784a      	ldrb	r2, [r1, #1]
     cdc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     cde:	788a      	ldrb	r2, [r1, #2]
     ce0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     ce2:	0019      	movs	r1, r3
     ce4:	4b01      	ldr	r3, [pc, #4]	; (cec <port_pin_set_config+0x20>)
     ce6:	4798      	blx	r3
}
     ce8:	b003      	add	sp, #12
     cea:	bd00      	pop	{pc}
     cec:	00002415 	.word	0x00002415

00000cf0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     cf0:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     cf2:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     cf4:	2340      	movs	r3, #64	; 0x40
     cf6:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     cf8:	4281      	cmp	r1, r0
     cfa:	d201      	bcs.n	d00 <_sercom_get_sync_baud_val+0x10>
     cfc:	e00a      	b.n	d14 <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
     cfe:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     d00:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     d02:	1c63      	adds	r3, r4, #1
     d04:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     d06:	4288      	cmp	r0, r1
     d08:	d9f9      	bls.n	cfe <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d0a:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     d0c:	2cff      	cmp	r4, #255	; 0xff
     d0e:	d801      	bhi.n	d14 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     d10:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     d12:	2300      	movs	r3, #0
	}
}
     d14:	0018      	movs	r0, r3
     d16:	bd10      	pop	{r4, pc}

00000d18 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     d18:	b5f0      	push	{r4, r5, r6, r7, lr}
     d1a:	465f      	mov	r7, fp
     d1c:	4656      	mov	r6, sl
     d1e:	464d      	mov	r5, r9
     d20:	4644      	mov	r4, r8
     d22:	b4f0      	push	{r4, r5, r6, r7}
     d24:	b089      	sub	sp, #36	; 0x24
     d26:	000c      	movs	r4, r1
     d28:	9205      	str	r2, [sp, #20]
     d2a:	aa12      	add	r2, sp, #72	; 0x48
     d2c:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     d2e:	0002      	movs	r2, r0
     d30:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d32:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     d34:	42a2      	cmp	r2, r4
     d36:	d900      	bls.n	d3a <_sercom_get_async_baud_val+0x22>
     d38:	e0c6      	b.n	ec8 <_sercom_get_async_baud_val+0x1b0>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     d3a:	2b00      	cmp	r3, #0
     d3c:	d151      	bne.n	de2 <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     d3e:	0002      	movs	r2, r0
     d40:	0008      	movs	r0, r1
     d42:	2100      	movs	r1, #0
     d44:	4d64      	ldr	r5, [pc, #400]	; (ed8 <_sercom_get_async_baud_val+0x1c0>)
     d46:	47a8      	blx	r5
     d48:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     d4a:	0026      	movs	r6, r4
     d4c:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     d4e:	2300      	movs	r3, #0
     d50:	2400      	movs	r4, #0
     d52:	9300      	str	r3, [sp, #0]
     d54:	9401      	str	r4, [sp, #4]
     d56:	2200      	movs	r2, #0
     d58:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     d5a:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     d5c:	2120      	movs	r1, #32
     d5e:	468c      	mov	ip, r1
     d60:	391f      	subs	r1, #31
     d62:	9602      	str	r6, [sp, #8]
     d64:	9703      	str	r7, [sp, #12]
     d66:	2420      	movs	r4, #32
     d68:	4264      	negs	r4, r4
     d6a:	1904      	adds	r4, r0, r4
     d6c:	d403      	bmi.n	d76 <_sercom_get_async_baud_val+0x5e>
     d6e:	000d      	movs	r5, r1
     d70:	40a5      	lsls	r5, r4
     d72:	46a8      	mov	r8, r5
     d74:	e004      	b.n	d80 <_sercom_get_async_baud_val+0x68>
     d76:	4664      	mov	r4, ip
     d78:	1a24      	subs	r4, r4, r0
     d7a:	000d      	movs	r5, r1
     d7c:	40e5      	lsrs	r5, r4
     d7e:	46a8      	mov	r8, r5
     d80:	000c      	movs	r4, r1
     d82:	4084      	lsls	r4, r0
     d84:	46a1      	mov	r9, r4

		r = r << 1;
     d86:	0014      	movs	r4, r2
     d88:	001d      	movs	r5, r3
     d8a:	18a4      	adds	r4, r4, r2
     d8c:	415d      	adcs	r5, r3
     d8e:	0022      	movs	r2, r4
     d90:	002b      	movs	r3, r5

		if (n & bit_shift) {
     d92:	4646      	mov	r6, r8
     d94:	465f      	mov	r7, fp
     d96:	423e      	tst	r6, r7
     d98:	d003      	beq.n	da2 <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
     d9a:	000e      	movs	r6, r1
     d9c:	4326      	orrs	r6, r4
     d9e:	0032      	movs	r2, r6
     da0:	002b      	movs	r3, r5
		}

		if (r >= d) {
     da2:	9c02      	ldr	r4, [sp, #8]
     da4:	9d03      	ldr	r5, [sp, #12]
     da6:	429d      	cmp	r5, r3
     da8:	d80f      	bhi.n	dca <_sercom_get_async_baud_val+0xb2>
     daa:	d101      	bne.n	db0 <_sercom_get_async_baud_val+0x98>
     dac:	4294      	cmp	r4, r2
     dae:	d80c      	bhi.n	dca <_sercom_get_async_baud_val+0xb2>
			r = r - d;
     db0:	9c02      	ldr	r4, [sp, #8]
     db2:	9d03      	ldr	r5, [sp, #12]
     db4:	1b12      	subs	r2, r2, r4
     db6:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     db8:	464d      	mov	r5, r9
     dba:	9e00      	ldr	r6, [sp, #0]
     dbc:	9f01      	ldr	r7, [sp, #4]
     dbe:	4335      	orrs	r5, r6
     dc0:	003c      	movs	r4, r7
     dc2:	4646      	mov	r6, r8
     dc4:	4334      	orrs	r4, r6
     dc6:	9500      	str	r5, [sp, #0]
     dc8:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     dca:	3801      	subs	r0, #1
     dcc:	d2cb      	bcs.n	d66 <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
     dce:	2200      	movs	r2, #0
     dd0:	2301      	movs	r3, #1
     dd2:	9800      	ldr	r0, [sp, #0]
     dd4:	9901      	ldr	r1, [sp, #4]
     dd6:	1a12      	subs	r2, r2, r0
     dd8:	418b      	sbcs	r3, r1
     dda:	0c12      	lsrs	r2, r2, #16
     ddc:	041b      	lsls	r3, r3, #16
     dde:	431a      	orrs	r2, r3
     de0:	e06f      	b.n	ec2 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     de2:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     de4:	2b01      	cmp	r3, #1
     de6:	d16c      	bne.n	ec2 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     de8:	0f63      	lsrs	r3, r4, #29
     dea:	9304      	str	r3, [sp, #16]
     dec:	00e3      	lsls	r3, r4, #3
     dee:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     df0:	000a      	movs	r2, r1
     df2:	2300      	movs	r3, #0
     df4:	2100      	movs	r1, #0
     df6:	4c38      	ldr	r4, [pc, #224]	; (ed8 <_sercom_get_async_baud_val+0x1c0>)
     df8:	47a0      	blx	r4
     dfa:	0004      	movs	r4, r0
     dfc:	000d      	movs	r5, r1
     dfe:	2300      	movs	r3, #0
     e00:	469c      	mov	ip, r3
     e02:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     e04:	3320      	adds	r3, #32
     e06:	469b      	mov	fp, r3
     e08:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     e0a:	4663      	mov	r3, ip
     e0c:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     e0e:	2300      	movs	r3, #0
     e10:	9302      	str	r3, [sp, #8]
     e12:	2200      	movs	r2, #0
     e14:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     e16:	213f      	movs	r1, #63	; 0x3f
     e18:	9400      	str	r4, [sp, #0]
     e1a:	9501      	str	r5, [sp, #4]
     e1c:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
     e1e:	2120      	movs	r1, #32
     e20:	4249      	negs	r1, r1
     e22:	1879      	adds	r1, r7, r1
     e24:	d403      	bmi.n	e2e <_sercom_get_async_baud_val+0x116>
     e26:	0030      	movs	r0, r6
     e28:	4088      	lsls	r0, r1
     e2a:	4684      	mov	ip, r0
     e2c:	e004      	b.n	e38 <_sercom_get_async_baud_val+0x120>
     e2e:	4659      	mov	r1, fp
     e30:	1bc9      	subs	r1, r1, r7
     e32:	0030      	movs	r0, r6
     e34:	40c8      	lsrs	r0, r1
     e36:	4684      	mov	ip, r0
     e38:	0031      	movs	r1, r6
     e3a:	40b9      	lsls	r1, r7
     e3c:	4689      	mov	r9, r1

		r = r << 1;
     e3e:	0010      	movs	r0, r2
     e40:	0019      	movs	r1, r3
     e42:	1880      	adds	r0, r0, r2
     e44:	4159      	adcs	r1, r3
     e46:	0002      	movs	r2, r0
     e48:	000b      	movs	r3, r1

		if (n & bit_shift) {
     e4a:	4644      	mov	r4, r8
     e4c:	464d      	mov	r5, r9
     e4e:	402c      	ands	r4, r5
     e50:	46a2      	mov	sl, r4
     e52:	4664      	mov	r4, ip
     e54:	9d04      	ldr	r5, [sp, #16]
     e56:	402c      	ands	r4, r5
     e58:	46a4      	mov	ip, r4
     e5a:	4654      	mov	r4, sl
     e5c:	4665      	mov	r5, ip
     e5e:	432c      	orrs	r4, r5
     e60:	d003      	beq.n	e6a <_sercom_get_async_baud_val+0x152>
			r |= 0x01;
     e62:	0034      	movs	r4, r6
     e64:	4304      	orrs	r4, r0
     e66:	0022      	movs	r2, r4
     e68:	000b      	movs	r3, r1
		}

		if (r >= d) {
     e6a:	9800      	ldr	r0, [sp, #0]
     e6c:	9901      	ldr	r1, [sp, #4]
     e6e:	4299      	cmp	r1, r3
     e70:	d80a      	bhi.n	e88 <_sercom_get_async_baud_val+0x170>
     e72:	d101      	bne.n	e78 <_sercom_get_async_baud_val+0x160>
     e74:	4290      	cmp	r0, r2
     e76:	d807      	bhi.n	e88 <_sercom_get_async_baud_val+0x170>
			r = r - d;
     e78:	9800      	ldr	r0, [sp, #0]
     e7a:	9901      	ldr	r1, [sp, #4]
     e7c:	1a12      	subs	r2, r2, r0
     e7e:	418b      	sbcs	r3, r1
			q |= bit_shift;
     e80:	9902      	ldr	r1, [sp, #8]
     e82:	4648      	mov	r0, r9
     e84:	4301      	orrs	r1, r0
     e86:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     e88:	3f01      	subs	r7, #1
     e8a:	d2c8      	bcs.n	e1e <_sercom_get_async_baud_val+0x106>
     e8c:	9c00      	ldr	r4, [sp, #0]
     e8e:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     e90:	9902      	ldr	r1, [sp, #8]
     e92:	9a07      	ldr	r2, [sp, #28]
     e94:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     e96:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     e98:	4910      	ldr	r1, [pc, #64]	; (edc <_sercom_get_async_baud_val+0x1c4>)
     e9a:	428b      	cmp	r3, r1
     e9c:	d90b      	bls.n	eb6 <_sercom_get_async_baud_val+0x19e>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     e9e:	9b06      	ldr	r3, [sp, #24]
     ea0:	3301      	adds	r3, #1
     ea2:	b2db      	uxtb	r3, r3
     ea4:	0019      	movs	r1, r3
     ea6:	9306      	str	r3, [sp, #24]
     ea8:	0013      	movs	r3, r2
     eaa:	3301      	adds	r3, #1
     eac:	9307      	str	r3, [sp, #28]
     eae:	2908      	cmp	r1, #8
     eb0:	d1ad      	bne.n	e0e <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     eb2:	2540      	movs	r5, #64	; 0x40
     eb4:	e008      	b.n	ec8 <_sercom_get_async_baud_val+0x1b0>
     eb6:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     eb8:	9a06      	ldr	r2, [sp, #24]
     eba:	2a08      	cmp	r2, #8
     ebc:	d004      	beq.n	ec8 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     ebe:	0352      	lsls	r2, r2, #13
     ec0:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     ec2:	9b05      	ldr	r3, [sp, #20]
     ec4:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     ec6:	2500      	movs	r5, #0
}
     ec8:	0028      	movs	r0, r5
     eca:	b009      	add	sp, #36	; 0x24
     ecc:	bc3c      	pop	{r2, r3, r4, r5}
     ece:	4690      	mov	r8, r2
     ed0:	4699      	mov	r9, r3
     ed2:	46a2      	mov	sl, r4
     ed4:	46ab      	mov	fp, r5
     ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ed8:	00006311 	.word	0x00006311
     edc:	00001fff 	.word	0x00001fff

00000ee0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     ee0:	b510      	push	{r4, lr}
     ee2:	b082      	sub	sp, #8
     ee4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     ee6:	4b0e      	ldr	r3, [pc, #56]	; (f20 <sercom_set_gclk_generator+0x40>)
     ee8:	781b      	ldrb	r3, [r3, #0]
     eea:	2b00      	cmp	r3, #0
     eec:	d001      	beq.n	ef2 <sercom_set_gclk_generator+0x12>
     eee:	2900      	cmp	r1, #0
     ef0:	d00d      	beq.n	f0e <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     ef2:	a901      	add	r1, sp, #4
     ef4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     ef6:	2013      	movs	r0, #19
     ef8:	4b0a      	ldr	r3, [pc, #40]	; (f24 <sercom_set_gclk_generator+0x44>)
     efa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     efc:	2013      	movs	r0, #19
     efe:	4b0a      	ldr	r3, [pc, #40]	; (f28 <sercom_set_gclk_generator+0x48>)
     f00:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     f02:	4b07      	ldr	r3, [pc, #28]	; (f20 <sercom_set_gclk_generator+0x40>)
     f04:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     f06:	2201      	movs	r2, #1
     f08:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     f0a:	2000      	movs	r0, #0
     f0c:	e006      	b.n	f1c <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     f0e:	4b04      	ldr	r3, [pc, #16]	; (f20 <sercom_set_gclk_generator+0x40>)
     f10:	785b      	ldrb	r3, [r3, #1]
     f12:	4283      	cmp	r3, r0
     f14:	d001      	beq.n	f1a <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     f16:	201d      	movs	r0, #29
     f18:	e000      	b.n	f1c <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     f1a:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     f1c:	b002      	add	sp, #8
     f1e:	bd10      	pop	{r4, pc}
     f20:	200000d4 	.word	0x200000d4
     f24:	0000231d 	.word	0x0000231d
     f28:	00002291 	.word	0x00002291

00000f2c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     f2c:	4b44      	ldr	r3, [pc, #272]	; (1040 <_sercom_get_default_pad+0x114>)
     f2e:	4298      	cmp	r0, r3
     f30:	d033      	beq.n	f9a <_sercom_get_default_pad+0x6e>
     f32:	d806      	bhi.n	f42 <_sercom_get_default_pad+0x16>
     f34:	4b43      	ldr	r3, [pc, #268]	; (1044 <_sercom_get_default_pad+0x118>)
     f36:	4298      	cmp	r0, r3
     f38:	d00d      	beq.n	f56 <_sercom_get_default_pad+0x2a>
     f3a:	4b43      	ldr	r3, [pc, #268]	; (1048 <_sercom_get_default_pad+0x11c>)
     f3c:	4298      	cmp	r0, r3
     f3e:	d01b      	beq.n	f78 <_sercom_get_default_pad+0x4c>
     f40:	e06f      	b.n	1022 <_sercom_get_default_pad+0xf6>
     f42:	4b42      	ldr	r3, [pc, #264]	; (104c <_sercom_get_default_pad+0x120>)
     f44:	4298      	cmp	r0, r3
     f46:	d04a      	beq.n	fde <_sercom_get_default_pad+0xb2>
     f48:	4b41      	ldr	r3, [pc, #260]	; (1050 <_sercom_get_default_pad+0x124>)
     f4a:	4298      	cmp	r0, r3
     f4c:	d058      	beq.n	1000 <_sercom_get_default_pad+0xd4>
     f4e:	4b41      	ldr	r3, [pc, #260]	; (1054 <_sercom_get_default_pad+0x128>)
     f50:	4298      	cmp	r0, r3
     f52:	d166      	bne.n	1022 <_sercom_get_default_pad+0xf6>
     f54:	e032      	b.n	fbc <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f56:	2901      	cmp	r1, #1
     f58:	d006      	beq.n	f68 <_sercom_get_default_pad+0x3c>
     f5a:	2900      	cmp	r1, #0
     f5c:	d063      	beq.n	1026 <_sercom_get_default_pad+0xfa>
     f5e:	2902      	cmp	r1, #2
     f60:	d006      	beq.n	f70 <_sercom_get_default_pad+0x44>
     f62:	2903      	cmp	r1, #3
     f64:	d006      	beq.n	f74 <_sercom_get_default_pad+0x48>
     f66:	e001      	b.n	f6c <_sercom_get_default_pad+0x40>
     f68:	483b      	ldr	r0, [pc, #236]	; (1058 <_sercom_get_default_pad+0x12c>)
     f6a:	e067      	b.n	103c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     f6c:	2000      	movs	r0, #0
     f6e:	e065      	b.n	103c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f70:	483a      	ldr	r0, [pc, #232]	; (105c <_sercom_get_default_pad+0x130>)
     f72:	e063      	b.n	103c <_sercom_get_default_pad+0x110>
     f74:	483a      	ldr	r0, [pc, #232]	; (1060 <_sercom_get_default_pad+0x134>)
     f76:	e061      	b.n	103c <_sercom_get_default_pad+0x110>
     f78:	2901      	cmp	r1, #1
     f7a:	d006      	beq.n	f8a <_sercom_get_default_pad+0x5e>
     f7c:	2900      	cmp	r1, #0
     f7e:	d054      	beq.n	102a <_sercom_get_default_pad+0xfe>
     f80:	2902      	cmp	r1, #2
     f82:	d006      	beq.n	f92 <_sercom_get_default_pad+0x66>
     f84:	2903      	cmp	r1, #3
     f86:	d006      	beq.n	f96 <_sercom_get_default_pad+0x6a>
     f88:	e001      	b.n	f8e <_sercom_get_default_pad+0x62>
     f8a:	4836      	ldr	r0, [pc, #216]	; (1064 <_sercom_get_default_pad+0x138>)
     f8c:	e056      	b.n	103c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     f8e:	2000      	movs	r0, #0
     f90:	e054      	b.n	103c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f92:	4835      	ldr	r0, [pc, #212]	; (1068 <_sercom_get_default_pad+0x13c>)
     f94:	e052      	b.n	103c <_sercom_get_default_pad+0x110>
     f96:	4835      	ldr	r0, [pc, #212]	; (106c <_sercom_get_default_pad+0x140>)
     f98:	e050      	b.n	103c <_sercom_get_default_pad+0x110>
     f9a:	2901      	cmp	r1, #1
     f9c:	d006      	beq.n	fac <_sercom_get_default_pad+0x80>
     f9e:	2900      	cmp	r1, #0
     fa0:	d045      	beq.n	102e <_sercom_get_default_pad+0x102>
     fa2:	2902      	cmp	r1, #2
     fa4:	d006      	beq.n	fb4 <_sercom_get_default_pad+0x88>
     fa6:	2903      	cmp	r1, #3
     fa8:	d006      	beq.n	fb8 <_sercom_get_default_pad+0x8c>
     faa:	e001      	b.n	fb0 <_sercom_get_default_pad+0x84>
     fac:	4830      	ldr	r0, [pc, #192]	; (1070 <_sercom_get_default_pad+0x144>)
     fae:	e045      	b.n	103c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     fb0:	2000      	movs	r0, #0
     fb2:	e043      	b.n	103c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     fb4:	482f      	ldr	r0, [pc, #188]	; (1074 <_sercom_get_default_pad+0x148>)
     fb6:	e041      	b.n	103c <_sercom_get_default_pad+0x110>
     fb8:	482f      	ldr	r0, [pc, #188]	; (1078 <_sercom_get_default_pad+0x14c>)
     fba:	e03f      	b.n	103c <_sercom_get_default_pad+0x110>
     fbc:	2901      	cmp	r1, #1
     fbe:	d006      	beq.n	fce <_sercom_get_default_pad+0xa2>
     fc0:	2900      	cmp	r1, #0
     fc2:	d036      	beq.n	1032 <_sercom_get_default_pad+0x106>
     fc4:	2902      	cmp	r1, #2
     fc6:	d006      	beq.n	fd6 <_sercom_get_default_pad+0xaa>
     fc8:	2903      	cmp	r1, #3
     fca:	d006      	beq.n	fda <_sercom_get_default_pad+0xae>
     fcc:	e001      	b.n	fd2 <_sercom_get_default_pad+0xa6>
     fce:	482b      	ldr	r0, [pc, #172]	; (107c <_sercom_get_default_pad+0x150>)
     fd0:	e034      	b.n	103c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     fd2:	2000      	movs	r0, #0
     fd4:	e032      	b.n	103c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     fd6:	482a      	ldr	r0, [pc, #168]	; (1080 <_sercom_get_default_pad+0x154>)
     fd8:	e030      	b.n	103c <_sercom_get_default_pad+0x110>
     fda:	482a      	ldr	r0, [pc, #168]	; (1084 <_sercom_get_default_pad+0x158>)
     fdc:	e02e      	b.n	103c <_sercom_get_default_pad+0x110>
     fde:	2901      	cmp	r1, #1
     fe0:	d006      	beq.n	ff0 <_sercom_get_default_pad+0xc4>
     fe2:	2900      	cmp	r1, #0
     fe4:	d027      	beq.n	1036 <_sercom_get_default_pad+0x10a>
     fe6:	2902      	cmp	r1, #2
     fe8:	d006      	beq.n	ff8 <_sercom_get_default_pad+0xcc>
     fea:	2903      	cmp	r1, #3
     fec:	d006      	beq.n	ffc <_sercom_get_default_pad+0xd0>
     fee:	e001      	b.n	ff4 <_sercom_get_default_pad+0xc8>
     ff0:	4825      	ldr	r0, [pc, #148]	; (1088 <_sercom_get_default_pad+0x15c>)
     ff2:	e023      	b.n	103c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     ff4:	2000      	movs	r0, #0
     ff6:	e021      	b.n	103c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ff8:	4824      	ldr	r0, [pc, #144]	; (108c <_sercom_get_default_pad+0x160>)
     ffa:	e01f      	b.n	103c <_sercom_get_default_pad+0x110>
     ffc:	4824      	ldr	r0, [pc, #144]	; (1090 <_sercom_get_default_pad+0x164>)
     ffe:	e01d      	b.n	103c <_sercom_get_default_pad+0x110>
    1000:	2901      	cmp	r1, #1
    1002:	d006      	beq.n	1012 <_sercom_get_default_pad+0xe6>
    1004:	2900      	cmp	r1, #0
    1006:	d018      	beq.n	103a <_sercom_get_default_pad+0x10e>
    1008:	2902      	cmp	r1, #2
    100a:	d006      	beq.n	101a <_sercom_get_default_pad+0xee>
    100c:	2903      	cmp	r1, #3
    100e:	d006      	beq.n	101e <_sercom_get_default_pad+0xf2>
    1010:	e001      	b.n	1016 <_sercom_get_default_pad+0xea>
    1012:	4820      	ldr	r0, [pc, #128]	; (1094 <_sercom_get_default_pad+0x168>)
    1014:	e012      	b.n	103c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1016:	2000      	movs	r0, #0
    1018:	e010      	b.n	103c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    101a:	481f      	ldr	r0, [pc, #124]	; (1098 <_sercom_get_default_pad+0x16c>)
    101c:	e00e      	b.n	103c <_sercom_get_default_pad+0x110>
    101e:	481f      	ldr	r0, [pc, #124]	; (109c <_sercom_get_default_pad+0x170>)
    1020:	e00c      	b.n	103c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1022:	2000      	movs	r0, #0
    1024:	e00a      	b.n	103c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1026:	481e      	ldr	r0, [pc, #120]	; (10a0 <_sercom_get_default_pad+0x174>)
    1028:	e008      	b.n	103c <_sercom_get_default_pad+0x110>
    102a:	2003      	movs	r0, #3
    102c:	e006      	b.n	103c <_sercom_get_default_pad+0x110>
    102e:	481d      	ldr	r0, [pc, #116]	; (10a4 <_sercom_get_default_pad+0x178>)
    1030:	e004      	b.n	103c <_sercom_get_default_pad+0x110>
    1032:	481d      	ldr	r0, [pc, #116]	; (10a8 <_sercom_get_default_pad+0x17c>)
    1034:	e002      	b.n	103c <_sercom_get_default_pad+0x110>
    1036:	481d      	ldr	r0, [pc, #116]	; (10ac <_sercom_get_default_pad+0x180>)
    1038:	e000      	b.n	103c <_sercom_get_default_pad+0x110>
    103a:	481d      	ldr	r0, [pc, #116]	; (10b0 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
    103c:	4770      	bx	lr
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	42001000 	.word	0x42001000
    1044:	42000800 	.word	0x42000800
    1048:	42000c00 	.word	0x42000c00
    104c:	42001800 	.word	0x42001800
    1050:	42001c00 	.word	0x42001c00
    1054:	42001400 	.word	0x42001400
    1058:	00050003 	.word	0x00050003
    105c:	00060003 	.word	0x00060003
    1060:	00070003 	.word	0x00070003
    1064:	00010003 	.word	0x00010003
    1068:	001e0003 	.word	0x001e0003
    106c:	001f0003 	.word	0x001f0003
    1070:	000d0002 	.word	0x000d0002
    1074:	000e0002 	.word	0x000e0002
    1078:	000f0002 	.word	0x000f0002
    107c:	00110003 	.word	0x00110003
    1080:	00120003 	.word	0x00120003
    1084:	00130003 	.word	0x00130003
    1088:	003f0005 	.word	0x003f0005
    108c:	003e0005 	.word	0x003e0005
    1090:	00520005 	.word	0x00520005
    1094:	00170003 	.word	0x00170003
    1098:	00180003 	.word	0x00180003
    109c:	00190003 	.word	0x00190003
    10a0:	00040003 	.word	0x00040003
    10a4:	000c0002 	.word	0x000c0002
    10a8:	00100003 	.word	0x00100003
    10ac:	00530005 	.word	0x00530005
    10b0:	00160003 	.word	0x00160003

000010b4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    10b4:	b530      	push	{r4, r5, lr}
    10b6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    10b8:	4b0c      	ldr	r3, [pc, #48]	; (10ec <_sercom_get_sercom_inst_index+0x38>)
    10ba:	466a      	mov	r2, sp
    10bc:	cb32      	ldmia	r3!, {r1, r4, r5}
    10be:	c232      	stmia	r2!, {r1, r4, r5}
    10c0:	cb32      	ldmia	r3!, {r1, r4, r5}
    10c2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    10c4:	9b00      	ldr	r3, [sp, #0]
    10c6:	4283      	cmp	r3, r0
    10c8:	d006      	beq.n	10d8 <_sercom_get_sercom_inst_index+0x24>
    10ca:	2301      	movs	r3, #1
    10cc:	009a      	lsls	r2, r3, #2
    10ce:	4669      	mov	r1, sp
    10d0:	5852      	ldr	r2, [r2, r1]
    10d2:	4282      	cmp	r2, r0
    10d4:	d103      	bne.n	10de <_sercom_get_sercom_inst_index+0x2a>
    10d6:	e000      	b.n	10da <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10d8:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    10da:	b2d8      	uxtb	r0, r3
    10dc:	e003      	b.n	10e6 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10de:	3301      	adds	r3, #1
    10e0:	2b06      	cmp	r3, #6
    10e2:	d1f3      	bne.n	10cc <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    10e4:	2000      	movs	r0, #0
}
    10e6:	b007      	add	sp, #28
    10e8:	bd30      	pop	{r4, r5, pc}
    10ea:	46c0      	nop			; (mov r8, r8)
    10ec:	00008b30 	.word	0x00008b30

000010f0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    10f0:	4770      	bx	lr
    10f2:	46c0      	nop			; (mov r8, r8)

000010f4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    10f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    10f6:	4b0a      	ldr	r3, [pc, #40]	; (1120 <_sercom_set_handler+0x2c>)
    10f8:	781b      	ldrb	r3, [r3, #0]
    10fa:	2b00      	cmp	r3, #0
    10fc:	d10c      	bne.n	1118 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    10fe:	4f09      	ldr	r7, [pc, #36]	; (1124 <_sercom_set_handler+0x30>)
    1100:	4e09      	ldr	r6, [pc, #36]	; (1128 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1102:	4d0a      	ldr	r5, [pc, #40]	; (112c <_sercom_set_handler+0x38>)
    1104:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1106:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1108:	195a      	adds	r2, r3, r5
    110a:	6014      	str	r4, [r2, #0]
    110c:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    110e:	2b18      	cmp	r3, #24
    1110:	d1f9      	bne.n	1106 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    1112:	2201      	movs	r2, #1
    1114:	4b02      	ldr	r3, [pc, #8]	; (1120 <_sercom_set_handler+0x2c>)
    1116:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1118:	0080      	lsls	r0, r0, #2
    111a:	4b02      	ldr	r3, [pc, #8]	; (1124 <_sercom_set_handler+0x30>)
    111c:	50c1      	str	r1, [r0, r3]
}
    111e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1120:	200000d6 	.word	0x200000d6
    1124:	200000d8 	.word	0x200000d8
    1128:	000010f1 	.word	0x000010f1
    112c:	200007c8 	.word	0x200007c8

00001130 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1130:	b510      	push	{r4, lr}
    1132:	b082      	sub	sp, #8
    1134:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1136:	2206      	movs	r2, #6
    1138:	4905      	ldr	r1, [pc, #20]	; (1150 <_sercom_get_interrupt_vector+0x20>)
    113a:	4668      	mov	r0, sp
    113c:	4b05      	ldr	r3, [pc, #20]	; (1154 <_sercom_get_interrupt_vector+0x24>)
    113e:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1140:	0020      	movs	r0, r4
    1142:	4b05      	ldr	r3, [pc, #20]	; (1158 <_sercom_get_interrupt_vector+0x28>)
    1144:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1146:	466b      	mov	r3, sp
    1148:	5618      	ldrsb	r0, [r3, r0]
}
    114a:	b002      	add	sp, #8
    114c:	bd10      	pop	{r4, pc}
    114e:	46c0      	nop			; (mov r8, r8)
    1150:	00008b48 	.word	0x00008b48
    1154:	000035f1 	.word	0x000035f1
    1158:	000010b5 	.word	0x000010b5

0000115c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    115c:	b510      	push	{r4, lr}
    115e:	4b02      	ldr	r3, [pc, #8]	; (1168 <SERCOM0_Handler+0xc>)
    1160:	681b      	ldr	r3, [r3, #0]
    1162:	2000      	movs	r0, #0
    1164:	4798      	blx	r3
    1166:	bd10      	pop	{r4, pc}
    1168:	200000d8 	.word	0x200000d8

0000116c <SERCOM1_Handler>:
    116c:	b510      	push	{r4, lr}
    116e:	4b02      	ldr	r3, [pc, #8]	; (1178 <SERCOM1_Handler+0xc>)
    1170:	685b      	ldr	r3, [r3, #4]
    1172:	2001      	movs	r0, #1
    1174:	4798      	blx	r3
    1176:	bd10      	pop	{r4, pc}
    1178:	200000d8 	.word	0x200000d8

0000117c <SERCOM2_Handler>:
    117c:	b510      	push	{r4, lr}
    117e:	4b02      	ldr	r3, [pc, #8]	; (1188 <SERCOM2_Handler+0xc>)
    1180:	689b      	ldr	r3, [r3, #8]
    1182:	2002      	movs	r0, #2
    1184:	4798      	blx	r3
    1186:	bd10      	pop	{r4, pc}
    1188:	200000d8 	.word	0x200000d8

0000118c <SERCOM3_Handler>:
    118c:	b510      	push	{r4, lr}
    118e:	4b02      	ldr	r3, [pc, #8]	; (1198 <SERCOM3_Handler+0xc>)
    1190:	68db      	ldr	r3, [r3, #12]
    1192:	2003      	movs	r0, #3
    1194:	4798      	blx	r3
    1196:	bd10      	pop	{r4, pc}
    1198:	200000d8 	.word	0x200000d8

0000119c <SERCOM4_Handler>:
    119c:	b510      	push	{r4, lr}
    119e:	4b02      	ldr	r3, [pc, #8]	; (11a8 <SERCOM4_Handler+0xc>)
    11a0:	691b      	ldr	r3, [r3, #16]
    11a2:	2004      	movs	r0, #4
    11a4:	4798      	blx	r3
    11a6:	bd10      	pop	{r4, pc}
    11a8:	200000d8 	.word	0x200000d8

000011ac <SERCOM5_Handler>:
    11ac:	b510      	push	{r4, lr}
    11ae:	4b02      	ldr	r3, [pc, #8]	; (11b8 <SERCOM5_Handler+0xc>)
    11b0:	695b      	ldr	r3, [r3, #20]
    11b2:	2005      	movs	r0, #5
    11b4:	4798      	blx	r3
    11b6:	bd10      	pop	{r4, pc}
    11b8:	200000d8 	.word	0x200000d8

000011bc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    11bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    11be:	4657      	mov	r7, sl
    11c0:	464e      	mov	r6, r9
    11c2:	4645      	mov	r5, r8
    11c4:	b4e0      	push	{r5, r6, r7}
    11c6:	b08a      	sub	sp, #40	; 0x28
    11c8:	0005      	movs	r5, r0
    11ca:	000e      	movs	r6, r1
    11cc:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    11ce:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    11d0:	680b      	ldr	r3, [r1, #0]
    11d2:	079b      	lsls	r3, r3, #30
    11d4:	d400      	bmi.n	11d8 <spi_init+0x1c>
    11d6:	e08c      	b.n	12f2 <spi_init+0x136>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    11d8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    11da:	9305      	str	r3, [sp, #20]
    11dc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    11de:	9306      	str	r3, [sp, #24]
    11e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    11e2:	9307      	str	r3, [sp, #28]
    11e4:	6b53      	ldr	r3, [r2, #52]	; 0x34
    11e6:	9308      	str	r3, [sp, #32]
    11e8:	2700      	movs	r7, #0
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    11ea:	231f      	movs	r3, #31
    11ec:	4699      	mov	r9, r3
    11ee:	b2f9      	uxtb	r1, r7
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    11f0:	00bb      	lsls	r3, r7, #2
    11f2:	aa05      	add	r2, sp, #20
    11f4:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    11f6:	2800      	cmp	r0, #0
    11f8:	d102      	bne.n	1200 <spi_init+0x44>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    11fa:	0030      	movs	r0, r6
    11fc:	4b8f      	ldr	r3, [pc, #572]	; (143c <spi_init+0x280>)
    11fe:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
    1200:	1c43      	adds	r3, r0, #1
    1202:	d029      	beq.n	1258 <spi_init+0x9c>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    1204:	0402      	lsls	r2, r0, #16
    1206:	0c13      	lsrs	r3, r2, #16
    1208:	4698      	mov	r8, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    120a:	0c00      	lsrs	r0, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    120c:	b2c1      	uxtb	r1, r0
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    120e:	2300      	movs	r3, #0
    1210:	469c      	mov	ip, r3
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1212:	0603      	lsls	r3, r0, #24
    1214:	d404      	bmi.n	1220 <spi_init+0x64>
		return &(ports[port_index]->Group[group_index]);
    1216:	094b      	lsrs	r3, r1, #5
    1218:	01db      	lsls	r3, r3, #7
    121a:	4a89      	ldr	r2, [pc, #548]	; (1440 <spi_init+0x284>)
    121c:	4694      	mov	ip, r2
    121e:	449c      	add	ip, r3
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    1220:	464b      	mov	r3, r9
    1222:	400b      	ands	r3, r1

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1224:	4660      	mov	r0, ip
    1226:	18c0      	adds	r0, r0, r3
    1228:	3040      	adds	r0, #64	; 0x40
    122a:	7800      	ldrb	r0, [r0, #0]
    122c:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    122e:	2080      	movs	r0, #128	; 0x80
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1230:	4652      	mov	r2, sl
    1232:	07d2      	lsls	r2, r2, #31
    1234:	d50a      	bpl.n	124c <spi_init+0x90>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    1236:	085b      	lsrs	r3, r3, #1
    1238:	4463      	add	r3, ip
    123a:	3330      	adds	r3, #48	; 0x30
    123c:	7818      	ldrb	r0, [r3, #0]
    123e:	b2c0      	uxtb	r0, r0

	if (pin_index & 1) {
    1240:	07cb      	lsls	r3, r1, #31
    1242:	d501      	bpl.n	1248 <spi_init+0x8c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    1244:	0900      	lsrs	r0, r0, #4
    1246:	e001      	b.n	124c <spi_init+0x90>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    1248:	230f      	movs	r3, #15
    124a:	4018      	ands	r0, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    124c:	4580      	cmp	r8, r0
    124e:	d003      	beq.n	1258 <spi_init+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
    1250:	2300      	movs	r3, #0
    1252:	602b      	str	r3, [r5, #0]
			return STATUS_ERR_DENIED;
    1254:	201c      	movs	r0, #28
    1256:	e0ea      	b.n	142e <spi_init+0x272>
    1258:	3701      	adds	r7, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    125a:	2f04      	cmp	r7, #4
    125c:	d1c7      	bne.n	11ee <spi_init+0x32>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    125e:	2013      	movs	r0, #19
    1260:	4b78      	ldr	r3, [pc, #480]	; (1444 <spi_init+0x288>)
    1262:	4798      	blx	r3
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    1264:	7822      	ldrb	r2, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    1266:	2100      	movs	r1, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    1268:	2a01      	cmp	r2, #1
    126a:	d112      	bne.n	1292 <spi_init+0xd6>
		enum status_code error_code = _sercom_get_sync_baud_val(
    126c:	aa04      	add	r2, sp, #16
    126e:	0001      	movs	r1, r0
    1270:	69a0      	ldr	r0, [r4, #24]
    1272:	4b75      	ldr	r3, [pc, #468]	; (1448 <spi_init+0x28c>)
    1274:	4798      	blx	r3
    1276:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    1278:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    127a:	2b00      	cmp	r3, #0
    127c:	d000      	beq.n	1280 <spi_init+0xc4>
    127e:	e0d6      	b.n	142e <spi_init+0x272>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    1280:	7b33      	ldrb	r3, [r6, #12]
    1282:	b2db      	uxtb	r3, r3
    1284:	aa04      	add	r2, sp, #16
    1286:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    1288:	3005      	adds	r0, #5
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    128a:	429a      	cmp	r2, r3
    128c:	d000      	beq.n	1290 <spi_init+0xd4>
    128e:	e0ce      	b.n	142e <spi_init+0x272>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    1290:	210c      	movs	r1, #12

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    1292:	6863      	ldr	r3, [r4, #4]
    1294:	68a2      	ldr	r2, [r4, #8]
    1296:	4313      	orrs	r3, r2
    1298:	68e2      	ldr	r2, [r4, #12]
    129a:	4313      	orrs	r3, r2
    129c:	430b      	orrs	r3, r1

	/* Set SPI character size */
	ctrlb |= config->character_size;
    129e:	7c21      	ldrb	r1, [r4, #16]

	if (config->run_in_standby) {
    12a0:	7c62      	ldrb	r2, [r4, #17]
    12a2:	2a00      	cmp	r2, #0
    12a4:	d001      	beq.n	12aa <spi_init+0xee>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    12a6:	2280      	movs	r2, #128	; 0x80
    12a8:	4313      	orrs	r3, r2
	}

	if (config->receiver_enable) {
    12aa:	7ca2      	ldrb	r2, [r4, #18]
    12ac:	2a00      	cmp	r2, #0
    12ae:	d002      	beq.n	12b6 <spi_init+0xfa>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    12b0:	2280      	movs	r2, #128	; 0x80
    12b2:	0292      	lsls	r2, r2, #10
    12b4:	4311      	orrs	r1, r2
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    12b6:	7ce2      	ldrb	r2, [r4, #19]
    12b8:	2a00      	cmp	r2, #0
    12ba:	d002      	beq.n	12c2 <spi_init+0x106>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    12bc:	2280      	movs	r2, #128	; 0x80
    12be:	0092      	lsls	r2, r2, #2
    12c0:	4311      	orrs	r1, r2
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    12c2:	7d22      	ldrb	r2, [r4, #20]
    12c4:	2a00      	cmp	r2, #0
    12c6:	d002      	beq.n	12ce <spi_init+0x112>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    12c8:	2280      	movs	r2, #128	; 0x80
    12ca:	0192      	lsls	r2, r2, #6
    12cc:	4311      	orrs	r1, r2
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    12ce:	6830      	ldr	r0, [r6, #0]
    12d0:	2202      	movs	r2, #2
    12d2:	4313      	orrs	r3, r2
    12d4:	4283      	cmp	r3, r0
    12d6:	d108      	bne.n	12ea <spi_init+0x12e>
			spi_module->CTRLB.reg == ctrlb) {
    12d8:	6873      	ldr	r3, [r6, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    12da:	428b      	cmp	r3, r1
    12dc:	d105      	bne.n	12ea <spi_init+0x12e>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    12de:	7823      	ldrb	r3, [r4, #0]
    12e0:	716b      	strb	r3, [r5, #5]
		module->character_size = config->character_size;
    12e2:	7c23      	ldrb	r3, [r4, #16]
    12e4:	71ab      	strb	r3, [r5, #6]
		return STATUS_OK;
    12e6:	2000      	movs	r0, #0
    12e8:	e0a1      	b.n	142e <spi_init+0x272>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    12ea:	2300      	movs	r3, #0
    12ec:	602b      	str	r3, [r5, #0]

	return STATUS_ERR_DENIED;
    12ee:	201c      	movs	r0, #28
    12f0:	e09d      	b.n	142e <spi_init+0x272>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    12f2:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    12f4:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    12f6:	07db      	lsls	r3, r3, #31
    12f8:	d500      	bpl.n	12fc <spi_init+0x140>
    12fa:	e098      	b.n	142e <spi_init+0x272>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    12fc:	0008      	movs	r0, r1
    12fe:	4b53      	ldr	r3, [pc, #332]	; (144c <spi_init+0x290>)
    1300:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1302:	4953      	ldr	r1, [pc, #332]	; (1450 <spi_init+0x294>)
    1304:	6a0a      	ldr	r2, [r1, #32]
    1306:	1c87      	adds	r7, r0, #2
    1308:	2301      	movs	r3, #1
    130a:	40bb      	lsls	r3, r7
    130c:	4313      	orrs	r3, r2
    130e:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1310:	a909      	add	r1, sp, #36	; 0x24
    1312:	2724      	movs	r7, #36	; 0x24
    1314:	5de3      	ldrb	r3, [r4, r7]
    1316:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1318:	3014      	adds	r0, #20
    131a:	b2c3      	uxtb	r3, r0
    131c:	9301      	str	r3, [sp, #4]
    131e:	0018      	movs	r0, r3
    1320:	4b4c      	ldr	r3, [pc, #304]	; (1454 <spi_init+0x298>)
    1322:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1324:	9801      	ldr	r0, [sp, #4]
    1326:	4b4c      	ldr	r3, [pc, #304]	; (1458 <spi_init+0x29c>)
    1328:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    132a:	5de0      	ldrb	r0, [r4, r7]
    132c:	2100      	movs	r1, #0
    132e:	4b4b      	ldr	r3, [pc, #300]	; (145c <spi_init+0x2a0>)
    1330:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    1332:	7823      	ldrb	r3, [r4, #0]
    1334:	2b01      	cmp	r3, #1
    1336:	d103      	bne.n	1340 <spi_init+0x184>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1338:	6832      	ldr	r2, [r6, #0]
    133a:	330b      	adds	r3, #11
    133c:	4313      	orrs	r3, r2
    133e:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1340:	682e      	ldr	r6, [r5, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1342:	ab04      	add	r3, sp, #16
    1344:	2280      	movs	r2, #128	; 0x80
    1346:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1348:	2200      	movs	r2, #0
    134a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    134c:	2101      	movs	r1, #1
    134e:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    1350:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    1352:	7823      	ldrb	r3, [r4, #0]
    1354:	2b00      	cmp	r3, #0
    1356:	d101      	bne.n	135c <spi_init+0x1a0>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1358:	ab04      	add	r3, sp, #16
    135a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    135c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    135e:	9305      	str	r3, [sp, #20]
    1360:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1362:	9306      	str	r3, [sp, #24]
    1364:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1366:	9307      	str	r3, [sp, #28]
    1368:	6b63      	ldr	r3, [r4, #52]	; 0x34
    136a:	9308      	str	r3, [sp, #32]
    136c:	2700      	movs	r7, #0
    136e:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1370:	00bb      	lsls	r3, r7, #2
    1372:	aa05      	add	r2, sp, #20
    1374:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    1376:	2800      	cmp	r0, #0
    1378:	d102      	bne.n	1380 <spi_init+0x1c4>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    137a:	0030      	movs	r0, r6
    137c:	4b2f      	ldr	r3, [pc, #188]	; (143c <spi_init+0x280>)
    137e:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1380:	1c43      	adds	r3, r0, #1
    1382:	d006      	beq.n	1392 <spi_init+0x1d6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1384:	ab02      	add	r3, sp, #8
    1386:	7218      	strb	r0, [r3, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1388:	0c00      	lsrs	r0, r0, #16
    138a:	b2c0      	uxtb	r0, r0
    138c:	a904      	add	r1, sp, #16
    138e:	4b34      	ldr	r3, [pc, #208]	; (1460 <spi_init+0x2a4>)
    1390:	4798      	blx	r3
    1392:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1394:	2f04      	cmp	r7, #4
    1396:	d1ea      	bne.n	136e <spi_init+0x1b2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    1398:	7823      	ldrb	r3, [r4, #0]
    139a:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    139c:	7c23      	ldrb	r3, [r4, #16]
    139e:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    13a0:	7ca3      	ldrb	r3, [r4, #18]
    13a2:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    13a4:	7d23      	ldrb	r3, [r4, #20]
    13a6:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    13a8:	2200      	movs	r2, #0
    13aa:	ab02      	add	r3, sp, #8
    13ac:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    13ae:	7823      	ldrb	r3, [r4, #0]
    13b0:	2b01      	cmp	r3, #1
    13b2:	d114      	bne.n	13de <spi_init+0x222>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    13b4:	6828      	ldr	r0, [r5, #0]
    13b6:	4b25      	ldr	r3, [pc, #148]	; (144c <spi_init+0x290>)
    13b8:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    13ba:	3014      	adds	r0, #20
    13bc:	b2c0      	uxtb	r0, r0
    13be:	4b21      	ldr	r3, [pc, #132]	; (1444 <spi_init+0x288>)
    13c0:	4798      	blx	r3
    13c2:	0001      	movs	r1, r0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    13c4:	ab02      	add	r3, sp, #8
    13c6:	1d9a      	adds	r2, r3, #6
    13c8:	69a0      	ldr	r0, [r4, #24]
    13ca:	4b1f      	ldr	r3, [pc, #124]	; (1448 <spi_init+0x28c>)
    13cc:	4798      	blx	r3
    13ce:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    13d0:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    13d2:	2b00      	cmp	r3, #0
    13d4:	d12b      	bne.n	142e <spi_init+0x272>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    13d6:	ab02      	add	r3, sp, #8
    13d8:	3306      	adds	r3, #6
    13da:	781b      	ldrb	r3, [r3, #0]
    13dc:	7333      	strb	r3, [r6, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    13de:	6863      	ldr	r3, [r4, #4]
    13e0:	68a2      	ldr	r2, [r4, #8]
    13e2:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    13e4:	68e2      	ldr	r2, [r4, #12]
    13e6:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
    13e8:	7c22      	ldrb	r2, [r4, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    13ea:	7c61      	ldrb	r1, [r4, #17]
    13ec:	2900      	cmp	r1, #0
    13ee:	d103      	bne.n	13f8 <spi_init+0x23c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    13f0:	491c      	ldr	r1, [pc, #112]	; (1464 <spi_init+0x2a8>)
    13f2:	7889      	ldrb	r1, [r1, #2]
    13f4:	0789      	lsls	r1, r1, #30
    13f6:	d501      	bpl.n	13fc <spi_init+0x240>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    13f8:	2180      	movs	r1, #128	; 0x80
    13fa:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
    13fc:	7ca1      	ldrb	r1, [r4, #18]
    13fe:	2900      	cmp	r1, #0
    1400:	d002      	beq.n	1408 <spi_init+0x24c>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1402:	2180      	movs	r1, #128	; 0x80
    1404:	0289      	lsls	r1, r1, #10
    1406:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    1408:	7ce1      	ldrb	r1, [r4, #19]
    140a:	2900      	cmp	r1, #0
    140c:	d002      	beq.n	1414 <spi_init+0x258>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    140e:	2180      	movs	r1, #128	; 0x80
    1410:	0089      	lsls	r1, r1, #2
    1412:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    1414:	7d21      	ldrb	r1, [r4, #20]
    1416:	2900      	cmp	r1, #0
    1418:	d002      	beq.n	1420 <spi_init+0x264>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    141a:	2180      	movs	r1, #128	; 0x80
    141c:	0189      	lsls	r1, r1, #6
    141e:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    1420:	6831      	ldr	r1, [r6, #0]
    1422:	430b      	orrs	r3, r1
    1424:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    1426:	6873      	ldr	r3, [r6, #4]
    1428:	4313      	orrs	r3, r2
    142a:	6073      	str	r3, [r6, #4]

	return STATUS_OK;
    142c:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    142e:	b00a      	add	sp, #40	; 0x28
    1430:	bc1c      	pop	{r2, r3, r4}
    1432:	4690      	mov	r8, r2
    1434:	4699      	mov	r9, r3
    1436:	46a2      	mov	sl, r4
    1438:	bdf0      	pop	{r4, r5, r6, r7, pc}
    143a:	46c0      	nop			; (mov r8, r8)
    143c:	00000f2d 	.word	0x00000f2d
    1440:	41004400 	.word	0x41004400
    1444:	00002339 	.word	0x00002339
    1448:	00000cf1 	.word	0x00000cf1
    144c:	000010b5 	.word	0x000010b5
    1450:	40000400 	.word	0x40000400
    1454:	0000231d 	.word	0x0000231d
    1458:	00002291 	.word	0x00002291
    145c:	00000ee1 	.word	0x00000ee1
    1460:	00002415 	.word	0x00002415
    1464:	41002000 	.word	0x41002000

00001468 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1468:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    146a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    146c:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    146e:	2c01      	cmp	r4, #1
    1470:	d16e      	bne.n	1550 <spi_select_slave+0xe8>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    1472:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    1474:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    1476:	2c00      	cmp	r4, #0
    1478:	d16a      	bne.n	1550 <spi_select_slave+0xe8>
#  endif
	{
		if (select) {
    147a:	2a00      	cmp	r2, #0
    147c:	d058      	beq.n	1530 <spi_select_slave+0xc8>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    147e:	784b      	ldrb	r3, [r1, #1]
    1480:	2b00      	cmp	r3, #0
    1482:	d044      	beq.n	150e <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1484:	6803      	ldr	r3, [r0, #0]
    1486:	7e1b      	ldrb	r3, [r3, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    1488:	07db      	lsls	r3, r3, #31
    148a:	d410      	bmi.n	14ae <spi_select_slave+0x46>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    148c:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    148e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1490:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1492:	2900      	cmp	r1, #0
    1494:	d104      	bne.n	14a0 <spi_select_slave+0x38>
		return &(ports[port_index]->Group[group_index]);
    1496:	095a      	lsrs	r2, r3, #5
    1498:	01d2      	lsls	r2, r2, #7
    149a:	492e      	ldr	r1, [pc, #184]	; (1554 <spi_select_slave+0xec>)
    149c:	468c      	mov	ip, r1
    149e:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    14a0:	211f      	movs	r1, #31
    14a2:	400b      	ands	r3, r1
    14a4:	391e      	subs	r1, #30
    14a6:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    14a8:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
    14aa:	2305      	movs	r3, #5
    14ac:	e050      	b.n	1550 <spi_select_slave+0xe8>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    14ae:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    14b0:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    14b2:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    14b4:	2c00      	cmp	r4, #0
    14b6:	d104      	bne.n	14c2 <spi_select_slave+0x5a>
		return &(ports[port_index]->Group[group_index]);
    14b8:	095a      	lsrs	r2, r3, #5
    14ba:	01d2      	lsls	r2, r2, #7
    14bc:	4c25      	ldr	r4, [pc, #148]	; (1554 <spi_select_slave+0xec>)
    14be:	46a4      	mov	ip, r4
    14c0:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    14c2:	241f      	movs	r4, #31
    14c4:	4023      	ands	r3, r4
    14c6:	3c1e      	subs	r4, #30
    14c8:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    14ca:	6154      	str	r4, [r2, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    14cc:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    14ce:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    14d0:	07d2      	lsls	r2, r2, #31
    14d2:	d501      	bpl.n	14d8 <spi_select_slave+0x70>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    14d4:	788a      	ldrb	r2, [r1, #2]
    14d6:	629a      	str	r2, [r3, #40]	; 0x28

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    14d8:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    14da:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    14dc:	2a00      	cmp	r2, #0
    14de:	d137      	bne.n	1550 <spi_select_slave+0xe8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    14e0:	6802      	ldr	r2, [r0, #0]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    14e2:	2104      	movs	r1, #4

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    14e4:	7e13      	ldrb	r3, [r2, #24]
    14e6:	420b      	tst	r3, r1
    14e8:	d0fc      	beq.n	14e4 <spi_select_slave+0x7c>
    14ea:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    14ec:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    14ee:	0749      	lsls	r1, r1, #29
    14f0:	d52e      	bpl.n	1550 <spi_select_slave+0xe8>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    14f2:	8b53      	ldrh	r3, [r2, #26]
    14f4:	075b      	lsls	r3, r3, #29
    14f6:	d501      	bpl.n	14fc <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    14f8:	2304      	movs	r3, #4
    14fa:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    14fc:	7983      	ldrb	r3, [r0, #6]
    14fe:	2b01      	cmp	r3, #1
    1500:	d102      	bne.n	1508 <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1502:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1504:	2300      	movs	r3, #0
    1506:	e023      	b.n	1550 <spi_select_slave+0xe8>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1508:	6a93      	ldr	r3, [r2, #40]	; 0x28
    150a:	2300      	movs	r3, #0
    150c:	e020      	b.n	1550 <spi_select_slave+0xe8>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    150e:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1510:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1512:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1514:	2900      	cmp	r1, #0
    1516:	d104      	bne.n	1522 <spi_select_slave+0xba>
		return &(ports[port_index]->Group[group_index]);
    1518:	095a      	lsrs	r2, r3, #5
    151a:	01d2      	lsls	r2, r2, #7
    151c:	490d      	ldr	r1, [pc, #52]	; (1554 <spi_select_slave+0xec>)
    151e:	468c      	mov	ip, r1
    1520:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1522:	211f      	movs	r1, #31
    1524:	400b      	ands	r3, r1
    1526:	391e      	subs	r1, #30
    1528:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    152a:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    152c:	2300      	movs	r3, #0
    152e:	e00f      	b.n	1550 <spi_select_slave+0xe8>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    1530:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1532:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1534:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1536:	2900      	cmp	r1, #0
    1538:	d104      	bne.n	1544 <spi_select_slave+0xdc>
		return &(ports[port_index]->Group[group_index]);
    153a:	095a      	lsrs	r2, r3, #5
    153c:	01d2      	lsls	r2, r2, #7
    153e:	4905      	ldr	r1, [pc, #20]	; (1554 <spi_select_slave+0xec>)
    1540:	468c      	mov	ip, r1
    1542:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1544:	211f      	movs	r1, #31
    1546:	400b      	ands	r3, r1
    1548:	391e      	subs	r1, #30
    154a:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    154c:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
    154e:	2300      	movs	r3, #0
}
    1550:	0018      	movs	r0, r3
    1552:	bd10      	pop	{r4, pc}
    1554:	41004400 	.word	0x41004400

00001558 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1558:	b5f0      	push	{r4, r5, r6, r7, lr}
    155a:	465f      	mov	r7, fp
    155c:	4656      	mov	r6, sl
    155e:	464d      	mov	r5, r9
    1560:	4644      	mov	r4, r8
    1562:	b4f0      	push	{r4, r5, r6, r7}
    1564:	b091      	sub	sp, #68	; 0x44
    1566:	0005      	movs	r5, r0
    1568:	000c      	movs	r4, r1
    156a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    156c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    156e:	0008      	movs	r0, r1
    1570:	4bb9      	ldr	r3, [pc, #740]	; (1858 <usart_init+0x300>)
    1572:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1574:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1576:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1578:	07d2      	lsls	r2, r2, #31
    157a:	d500      	bpl.n	157e <usart_init+0x26>
    157c:	e164      	b.n	1848 <usart_init+0x2f0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    157e:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    1580:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1582:	0792      	lsls	r2, r2, #30
    1584:	d500      	bpl.n	1588 <usart_init+0x30>
    1586:	e15f      	b.n	1848 <usart_init+0x2f0>
    1588:	49b4      	ldr	r1, [pc, #720]	; (185c <usart_init+0x304>)
    158a:	6a0a      	ldr	r2, [r1, #32]
    158c:	1c87      	adds	r7, r0, #2
    158e:	3b1b      	subs	r3, #27
    1590:	40bb      	lsls	r3, r7
    1592:	4313      	orrs	r3, r2
    1594:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1596:	a90f      	add	r1, sp, #60	; 0x3c
    1598:	272d      	movs	r7, #45	; 0x2d
    159a:	5df3      	ldrb	r3, [r6, r7]
    159c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    159e:	3014      	adds	r0, #20
    15a0:	b2c3      	uxtb	r3, r0
    15a2:	9302      	str	r3, [sp, #8]
    15a4:	0018      	movs	r0, r3
    15a6:	4bae      	ldr	r3, [pc, #696]	; (1860 <usart_init+0x308>)
    15a8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    15aa:	9802      	ldr	r0, [sp, #8]
    15ac:	4bad      	ldr	r3, [pc, #692]	; (1864 <usart_init+0x30c>)
    15ae:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    15b0:	5df0      	ldrb	r0, [r6, r7]
    15b2:	2100      	movs	r1, #0
    15b4:	4bac      	ldr	r3, [pc, #688]	; (1868 <usart_init+0x310>)
    15b6:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    15b8:	7af3      	ldrb	r3, [r6, #11]
    15ba:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    15bc:	2324      	movs	r3, #36	; 0x24
    15be:	5cf3      	ldrb	r3, [r6, r3]
    15c0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    15c2:	2325      	movs	r3, #37	; 0x25
    15c4:	5cf3      	ldrb	r3, [r6, r3]
    15c6:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    15c8:	7ef3      	ldrb	r3, [r6, #27]
    15ca:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    15cc:	7f33      	ldrb	r3, [r6, #28]
    15ce:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    15d0:	682b      	ldr	r3, [r5, #0]
    15d2:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    15d4:	0018      	movs	r0, r3
    15d6:	4ba0      	ldr	r3, [pc, #640]	; (1858 <usart_init+0x300>)
    15d8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    15da:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    15dc:	2200      	movs	r2, #0
    15de:	230e      	movs	r3, #14
    15e0:	a906      	add	r1, sp, #24
    15e2:	468c      	mov	ip, r1
    15e4:	4463      	add	r3, ip
    15e6:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    15e8:	8a32      	ldrh	r2, [r6, #16]
    15ea:	9202      	str	r2, [sp, #8]
    15ec:	2380      	movs	r3, #128	; 0x80
    15ee:	01db      	lsls	r3, r3, #7
    15f0:	429a      	cmp	r2, r3
    15f2:	d01a      	beq.n	162a <usart_init+0xd2>
    15f4:	d804      	bhi.n	1600 <usart_init+0xa8>
    15f6:	2380      	movs	r3, #128	; 0x80
    15f8:	019b      	lsls	r3, r3, #6
    15fa:	429a      	cmp	r2, r3
    15fc:	d00b      	beq.n	1616 <usart_init+0xbe>
    15fe:	e104      	b.n	180a <usart_init+0x2b2>
    1600:	23c0      	movs	r3, #192	; 0xc0
    1602:	01db      	lsls	r3, r3, #7
    1604:	9a02      	ldr	r2, [sp, #8]
    1606:	429a      	cmp	r2, r3
    1608:	d00a      	beq.n	1620 <usart_init+0xc8>
    160a:	2380      	movs	r3, #128	; 0x80
    160c:	021b      	lsls	r3, r3, #8
    160e:	429a      	cmp	r2, r3
    1610:	d100      	bne.n	1614 <usart_init+0xbc>
    1612:	e0ff      	b.n	1814 <usart_init+0x2bc>
    1614:	e0f9      	b.n	180a <usart_init+0x2b2>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1616:	2310      	movs	r3, #16
    1618:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    161a:	3b0f      	subs	r3, #15
    161c:	9307      	str	r3, [sp, #28]
    161e:	e0fd      	b.n	181c <usart_init+0x2c4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1620:	2308      	movs	r3, #8
    1622:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1624:	3b07      	subs	r3, #7
    1626:	9307      	str	r3, [sp, #28]
    1628:	e0f8      	b.n	181c <usart_init+0x2c4>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    162a:	6833      	ldr	r3, [r6, #0]
    162c:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    162e:	68f3      	ldr	r3, [r6, #12]
    1630:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1632:	6973      	ldr	r3, [r6, #20]
    1634:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1636:	7e33      	ldrb	r3, [r6, #24]
    1638:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    163a:	2326      	movs	r3, #38	; 0x26
    163c:	5cf3      	ldrb	r3, [r6, r3]
    163e:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1640:	6873      	ldr	r3, [r6, #4]
    1642:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1644:	2b00      	cmp	r3, #0
    1646:	d015      	beq.n	1674 <usart_init+0x11c>
    1648:	2380      	movs	r3, #128	; 0x80
    164a:	055b      	lsls	r3, r3, #21
    164c:	459a      	cmp	sl, r3
    164e:	d136      	bne.n	16be <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    1650:	2327      	movs	r3, #39	; 0x27
    1652:	5cf3      	ldrb	r3, [r6, r3]
    1654:	2b00      	cmp	r3, #0
    1656:	d136      	bne.n	16c6 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1658:	6a33      	ldr	r3, [r6, #32]
    165a:	001f      	movs	r7, r3
    165c:	b2c0      	uxtb	r0, r0
    165e:	4b83      	ldr	r3, [pc, #524]	; (186c <usart_init+0x314>)
    1660:	4798      	blx	r3
    1662:	0001      	movs	r1, r0
    1664:	220e      	movs	r2, #14
    1666:	ab06      	add	r3, sp, #24
    1668:	469c      	mov	ip, r3
    166a:	4462      	add	r2, ip
    166c:	0038      	movs	r0, r7
    166e:	4b80      	ldr	r3, [pc, #512]	; (1870 <usart_init+0x318>)
    1670:	4798      	blx	r3
    1672:	e025      	b.n	16c0 <usart_init+0x168>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1674:	2308      	movs	r3, #8
    1676:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1678:	2300      	movs	r3, #0
    167a:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    167c:	2327      	movs	r3, #39	; 0x27
    167e:	5cf3      	ldrb	r3, [r6, r3]
    1680:	2b00      	cmp	r3, #0
    1682:	d00b      	beq.n	169c <usart_init+0x144>
				status_code =
    1684:	9b06      	ldr	r3, [sp, #24]
    1686:	9300      	str	r3, [sp, #0]
    1688:	9b07      	ldr	r3, [sp, #28]
    168a:	220e      	movs	r2, #14
    168c:	a906      	add	r1, sp, #24
    168e:	468c      	mov	ip, r1
    1690:	4462      	add	r2, ip
    1692:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1694:	6a30      	ldr	r0, [r6, #32]
    1696:	4f77      	ldr	r7, [pc, #476]	; (1874 <usart_init+0x31c>)
    1698:	47b8      	blx	r7
    169a:	e011      	b.n	16c0 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    169c:	6a33      	ldr	r3, [r6, #32]
    169e:	001f      	movs	r7, r3
    16a0:	b2c0      	uxtb	r0, r0
    16a2:	4b72      	ldr	r3, [pc, #456]	; (186c <usart_init+0x314>)
    16a4:	4798      	blx	r3
    16a6:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    16a8:	9b06      	ldr	r3, [sp, #24]
    16aa:	9300      	str	r3, [sp, #0]
    16ac:	9b07      	ldr	r3, [sp, #28]
    16ae:	220e      	movs	r2, #14
    16b0:	a806      	add	r0, sp, #24
    16b2:	4684      	mov	ip, r0
    16b4:	4462      	add	r2, ip
    16b6:	0038      	movs	r0, r7
    16b8:	4f6e      	ldr	r7, [pc, #440]	; (1874 <usart_init+0x31c>)
    16ba:	47b8      	blx	r7
    16bc:	e000      	b.n	16c0 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    16be:	2000      	movs	r0, #0
    16c0:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    16c2:	d000      	beq.n	16c6 <usart_init+0x16e>
    16c4:	e0c0      	b.n	1848 <usart_init+0x2f0>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    16c6:	7e73      	ldrb	r3, [r6, #25]
    16c8:	2b00      	cmp	r3, #0
    16ca:	d002      	beq.n	16d2 <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    16cc:	7eb3      	ldrb	r3, [r6, #26]
    16ce:	464a      	mov	r2, r9
    16d0:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    16d2:	682a      	ldr	r2, [r5, #0]
    16d4:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    16d6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    16d8:	2b00      	cmp	r3, #0
    16da:	d1fc      	bne.n	16d6 <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    16dc:	330e      	adds	r3, #14
    16de:	aa06      	add	r2, sp, #24
    16e0:	4694      	mov	ip, r2
    16e2:	4463      	add	r3, ip
    16e4:	881b      	ldrh	r3, [r3, #0]
    16e6:	464a      	mov	r2, r9
    16e8:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    16ea:	9b04      	ldr	r3, [sp, #16]
    16ec:	465a      	mov	r2, fp
    16ee:	4313      	orrs	r3, r2
    16f0:	9a03      	ldr	r2, [sp, #12]
    16f2:	4313      	orrs	r3, r2
    16f4:	4652      	mov	r2, sl
    16f6:	4313      	orrs	r3, r2
    16f8:	433b      	orrs	r3, r7
    16fa:	4642      	mov	r2, r8
    16fc:	0212      	lsls	r2, r2, #8
    16fe:	4313      	orrs	r3, r2
    1700:	9a05      	ldr	r2, [sp, #20]
    1702:	0757      	lsls	r7, r2, #29
    1704:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    1706:	2327      	movs	r3, #39	; 0x27
    1708:	5cf3      	ldrb	r3, [r6, r3]
    170a:	2b00      	cmp	r3, #0
    170c:	d101      	bne.n	1712 <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    170e:	3304      	adds	r3, #4
    1710:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    1712:	7e71      	ldrb	r1, [r6, #25]
    1714:	0289      	lsls	r1, r1, #10
    1716:	7f33      	ldrb	r3, [r6, #28]
    1718:	025b      	lsls	r3, r3, #9
    171a:	4319      	orrs	r1, r3
    171c:	7f73      	ldrb	r3, [r6, #29]
    171e:	021b      	lsls	r3, r3, #8
    1720:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1722:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    1724:	5cf3      	ldrb	r3, [r6, r3]
    1726:	045b      	lsls	r3, r3, #17
    1728:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    172a:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    172c:	5cf2      	ldrb	r2, [r6, r3]
    172e:	0412      	lsls	r2, r2, #16
    1730:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    1732:	7af3      	ldrb	r3, [r6, #11]
    1734:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1736:	8933      	ldrh	r3, [r6, #8]
    1738:	2bff      	cmp	r3, #255	; 0xff
    173a:	d004      	beq.n	1746 <usart_init+0x1ee>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    173c:	2280      	movs	r2, #128	; 0x80
    173e:	0452      	lsls	r2, r2, #17
    1740:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1742:	4319      	orrs	r1, r3
    1744:	e005      	b.n	1752 <usart_init+0x1fa>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1746:	7ef3      	ldrb	r3, [r6, #27]
    1748:	2b00      	cmp	r3, #0
    174a:	d002      	beq.n	1752 <usart_init+0x1fa>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    174c:	2380      	movs	r3, #128	; 0x80
    174e:	04db      	lsls	r3, r3, #19
    1750:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1752:	232c      	movs	r3, #44	; 0x2c
    1754:	5cf3      	ldrb	r3, [r6, r3]
    1756:	2b00      	cmp	r3, #0
    1758:	d103      	bne.n	1762 <usart_init+0x20a>
    175a:	4b47      	ldr	r3, [pc, #284]	; (1878 <usart_init+0x320>)
    175c:	789b      	ldrb	r3, [r3, #2]
    175e:	079b      	lsls	r3, r3, #30
    1760:	d501      	bpl.n	1766 <usart_init+0x20e>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1762:	2380      	movs	r3, #128	; 0x80
    1764:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1766:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1768:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    176a:	2b00      	cmp	r3, #0
    176c:	d1fc      	bne.n	1768 <usart_init+0x210>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    176e:	464b      	mov	r3, r9
    1770:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1772:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1774:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1776:	2b00      	cmp	r3, #0
    1778:	d1fc      	bne.n	1774 <usart_init+0x21c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    177a:	464b      	mov	r3, r9
    177c:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    177e:	ab0e      	add	r3, sp, #56	; 0x38
    1780:	2280      	movs	r2, #128	; 0x80
    1782:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1784:	2200      	movs	r2, #0
    1786:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1788:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    178a:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    178c:	6b33      	ldr	r3, [r6, #48]	; 0x30
    178e:	930a      	str	r3, [sp, #40]	; 0x28
    1790:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1792:	930b      	str	r3, [sp, #44]	; 0x2c
    1794:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1796:	930c      	str	r3, [sp, #48]	; 0x30
    1798:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    179a:	9302      	str	r3, [sp, #8]
    179c:	930d      	str	r3, [sp, #52]	; 0x34
    179e:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    17a0:	ae0e      	add	r6, sp, #56	; 0x38
    17a2:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    17a4:	00bb      	lsls	r3, r7, #2
    17a6:	aa0a      	add	r2, sp, #40	; 0x28
    17a8:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    17aa:	2800      	cmp	r0, #0
    17ac:	d102      	bne.n	17b4 <usart_init+0x25c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    17ae:	0020      	movs	r0, r4
    17b0:	4b32      	ldr	r3, [pc, #200]	; (187c <usart_init+0x324>)
    17b2:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    17b4:	1c43      	adds	r3, r0, #1
    17b6:	d005      	beq.n	17c4 <usart_init+0x26c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    17b8:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    17ba:	0c00      	lsrs	r0, r0, #16
    17bc:	b2c0      	uxtb	r0, r0
    17be:	0031      	movs	r1, r6
    17c0:	4b2f      	ldr	r3, [pc, #188]	; (1880 <usart_init+0x328>)
    17c2:	4798      	blx	r3
    17c4:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    17c6:	2f04      	cmp	r7, #4
    17c8:	d1eb      	bne.n	17a2 <usart_init+0x24a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    17ca:	2300      	movs	r3, #0
    17cc:	60eb      	str	r3, [r5, #12]
    17ce:	612b      	str	r3, [r5, #16]
    17d0:	616b      	str	r3, [r5, #20]
    17d2:	61ab      	str	r3, [r5, #24]
    17d4:	61eb      	str	r3, [r5, #28]
    17d6:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    17d8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    17da:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    17dc:	2200      	movs	r2, #0
    17de:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    17e0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    17e2:	3330      	adds	r3, #48	; 0x30
    17e4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    17e6:	3301      	adds	r3, #1
    17e8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    17ea:	3301      	adds	r3, #1
    17ec:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    17ee:	3301      	adds	r3, #1
    17f0:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    17f2:	6828      	ldr	r0, [r5, #0]
    17f4:	4b18      	ldr	r3, [pc, #96]	; (1858 <usart_init+0x300>)
    17f6:	4798      	blx	r3
    17f8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    17fa:	4922      	ldr	r1, [pc, #136]	; (1884 <usart_init+0x32c>)
    17fc:	4b22      	ldr	r3, [pc, #136]	; (1888 <usart_init+0x330>)
    17fe:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1800:	00a4      	lsls	r4, r4, #2
    1802:	4b22      	ldr	r3, [pc, #136]	; (188c <usart_init+0x334>)
    1804:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    1806:	2300      	movs	r3, #0
    1808:	e01e      	b.n	1848 <usart_init+0x2f0>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    180a:	2310      	movs	r3, #16
    180c:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    180e:	2300      	movs	r3, #0
    1810:	9307      	str	r3, [sp, #28]
    1812:	e003      	b.n	181c <usart_init+0x2c4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1814:	2303      	movs	r3, #3
    1816:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1818:	2300      	movs	r3, #0
    181a:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    181c:	6833      	ldr	r3, [r6, #0]
    181e:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    1820:	68f3      	ldr	r3, [r6, #12]
    1822:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1824:	6973      	ldr	r3, [r6, #20]
    1826:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1828:	7e33      	ldrb	r3, [r6, #24]
    182a:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    182c:	2326      	movs	r3, #38	; 0x26
    182e:	5cf3      	ldrb	r3, [r6, r3]
    1830:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1832:	6873      	ldr	r3, [r6, #4]
    1834:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1836:	2b00      	cmp	r3, #0
    1838:	d100      	bne.n	183c <usart_init+0x2e4>
    183a:	e71f      	b.n	167c <usart_init+0x124>
    183c:	2380      	movs	r3, #128	; 0x80
    183e:	055b      	lsls	r3, r3, #21
    1840:	459a      	cmp	sl, r3
    1842:	d100      	bne.n	1846 <usart_init+0x2ee>
    1844:	e704      	b.n	1650 <usart_init+0xf8>
    1846:	e73e      	b.n	16c6 <usart_init+0x16e>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1848:	0018      	movs	r0, r3
    184a:	b011      	add	sp, #68	; 0x44
    184c:	bc3c      	pop	{r2, r3, r4, r5}
    184e:	4690      	mov	r8, r2
    1850:	4699      	mov	r9, r3
    1852:	46a2      	mov	sl, r4
    1854:	46ab      	mov	fp, r5
    1856:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1858:	000010b5 	.word	0x000010b5
    185c:	40000400 	.word	0x40000400
    1860:	0000231d 	.word	0x0000231d
    1864:	00002291 	.word	0x00002291
    1868:	00000ee1 	.word	0x00000ee1
    186c:	00002339 	.word	0x00002339
    1870:	00000cf1 	.word	0x00000cf1
    1874:	00000d19 	.word	0x00000d19
    1878:	41002000 	.word	0x41002000
    187c:	00000f2d 	.word	0x00000f2d
    1880:	00002415 	.word	0x00002415
    1884:	00001a11 	.word	0x00001a11
    1888:	000010f5 	.word	0x000010f5
    188c:	200007c8 	.word	0x200007c8

00001890 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1890:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1892:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1894:	2a00      	cmp	r2, #0
    1896:	d00e      	beq.n	18b6 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1898:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    189a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    189c:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    189e:	2a00      	cmp	r2, #0
    18a0:	d109      	bne.n	18b6 <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    18a2:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    18a4:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    18a6:	2a00      	cmp	r2, #0
    18a8:	d1fc      	bne.n	18a4 <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    18aa:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    18ac:	2102      	movs	r1, #2
    18ae:	7e1a      	ldrb	r2, [r3, #24]
    18b0:	420a      	tst	r2, r1
    18b2:	d0fc      	beq.n	18ae <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    18b4:	2300      	movs	r3, #0
}
    18b6:	0018      	movs	r0, r3
    18b8:	4770      	bx	lr
    18ba:	46c0      	nop			; (mov r8, r8)

000018bc <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    18bc:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    18be:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    18c0:	2a00      	cmp	r2, #0
    18c2:	d030      	beq.n	1926 <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    18c4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    18c6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    18c8:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    18ca:	2a00      	cmp	r2, #0
    18cc:	d12b      	bne.n	1926 <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    18ce:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    18d0:	7e10      	ldrb	r0, [r2, #24]
    18d2:	0740      	lsls	r0, r0, #29
    18d4:	d527      	bpl.n	1926 <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    18d6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    18d8:	2b00      	cmp	r3, #0
    18da:	d1fc      	bne.n	18d6 <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    18dc:	8b53      	ldrh	r3, [r2, #26]
    18de:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    18e0:	0698      	lsls	r0, r3, #26
    18e2:	d01d      	beq.n	1920 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    18e4:	0798      	lsls	r0, r3, #30
    18e6:	d503      	bpl.n	18f0 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    18e8:	2302      	movs	r3, #2
    18ea:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
    18ec:	3318      	adds	r3, #24
    18ee:	e01a      	b.n	1926 <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    18f0:	0758      	lsls	r0, r3, #29
    18f2:	d503      	bpl.n	18fc <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    18f4:	2304      	movs	r3, #4
    18f6:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
    18f8:	331a      	adds	r3, #26
    18fa:	e014      	b.n	1926 <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    18fc:	07d8      	lsls	r0, r3, #31
    18fe:	d503      	bpl.n	1908 <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1900:	2301      	movs	r3, #1
    1902:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
    1904:	3312      	adds	r3, #18
    1906:	e00e      	b.n	1926 <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1908:	06d8      	lsls	r0, r3, #27
    190a:	d503      	bpl.n	1914 <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    190c:	2310      	movs	r3, #16
    190e:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
    1910:	3332      	adds	r3, #50	; 0x32
    1912:	e008      	b.n	1926 <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1914:	069b      	lsls	r3, r3, #26
    1916:	d503      	bpl.n	1920 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1918:	2320      	movs	r3, #32
    191a:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
    191c:	3321      	adds	r3, #33	; 0x21
    191e:	e002      	b.n	1926 <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1920:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1922:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    1924:	2300      	movs	r3, #0
}
    1926:	0018      	movs	r0, r3
    1928:	4770      	bx	lr
    192a:	46c0      	nop			; (mov r8, r8)

0000192c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    192c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    192e:	0006      	movs	r6, r0
    1930:	000c      	movs	r4, r1
    1932:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1934:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1936:	4b0a      	ldr	r3, [pc, #40]	; (1960 <_usart_write_buffer+0x34>)
    1938:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    193a:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    193c:	b29b      	uxth	r3, r3
    193e:	2b00      	cmp	r3, #0
    1940:	d003      	beq.n	194a <_usart_write_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1942:	4b08      	ldr	r3, [pc, #32]	; (1964 <_usart_write_buffer+0x38>)
    1944:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1946:	2005      	movs	r0, #5
    1948:	e009      	b.n	195e <_usart_write_buffer+0x32>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    194a:	85f5      	strh	r5, [r6, #46]	; 0x2e
    194c:	4b05      	ldr	r3, [pc, #20]	; (1964 <_usart_write_buffer+0x38>)
    194e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->tx_buffer_ptr              = tx_data;
    1950:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    1952:	2205      	movs	r2, #5
    1954:	2333      	movs	r3, #51	; 0x33
    1956:	54f2      	strb	r2, [r6, r3]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    1958:	3b32      	subs	r3, #50	; 0x32
    195a:	75bb      	strb	r3, [r7, #22]

	return STATUS_OK;
    195c:	2000      	movs	r0, #0
}
    195e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1960:	000009ed 	.word	0x000009ed
    1964:	00000a2d 	.word	0x00000a2d

00001968 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    196a:	0004      	movs	r4, r0
    196c:	000d      	movs	r5, r1
    196e:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1970:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1972:	4b0f      	ldr	r3, [pc, #60]	; (19b0 <_usart_read_buffer+0x48>)
    1974:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    1976:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1978:	b29b      	uxth	r3, r3
    197a:	2b00      	cmp	r3, #0
    197c:	d003      	beq.n	1986 <_usart_read_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    197e:	4b0d      	ldr	r3, [pc, #52]	; (19b4 <_usart_read_buffer+0x4c>)
    1980:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1982:	2005      	movs	r0, #5
    1984:	e013      	b.n	19ae <_usart_read_buffer+0x46>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    1986:	85a6      	strh	r6, [r4, #44]	; 0x2c
    1988:	4b0a      	ldr	r3, [pc, #40]	; (19b4 <_usart_read_buffer+0x4c>)
    198a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->rx_buffer_ptr              = rx_data;
    198c:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    198e:	2205      	movs	r2, #5
    1990:	2332      	movs	r3, #50	; 0x32
    1992:	54e2      	strb	r2, [r4, r3]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1994:	3b2e      	subs	r3, #46	; 0x2e
    1996:	75bb      	strb	r3, [r7, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    1998:	7a23      	ldrb	r3, [r4, #8]
    199a:	2b00      	cmp	r3, #0
    199c:	d001      	beq.n	19a2 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    199e:	2320      	movs	r3, #32
    19a0:	75bb      	strb	r3, [r7, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    19a2:	7a63      	ldrb	r3, [r4, #9]
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
    19a4:	2000      	movs	r0, #0
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    19a6:	2b00      	cmp	r3, #0
    19a8:	d001      	beq.n	19ae <_usart_read_buffer+0x46>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    19aa:	2308      	movs	r3, #8
    19ac:	75bb      	strb	r3, [r7, #22]
	}
#endif

	return STATUS_OK;
}
    19ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19b0:	000009ed 	.word	0x000009ed
    19b4:	00000a2d 	.word	0x00000a2d

000019b8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    19b8:	1c93      	adds	r3, r2, #2
    19ba:	009b      	lsls	r3, r3, #2
    19bc:	18c3      	adds	r3, r0, r3
    19be:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    19c0:	2130      	movs	r1, #48	; 0x30
    19c2:	2301      	movs	r3, #1
    19c4:	4093      	lsls	r3, r2
    19c6:	5c42      	ldrb	r2, [r0, r1]
    19c8:	4313      	orrs	r3, r2
    19ca:	5443      	strb	r3, [r0, r1]
}
    19cc:	4770      	bx	lr
    19ce:	46c0      	nop			; (mov r8, r8)

000019d0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    19d0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    19d2:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    19d4:	2a00      	cmp	r2, #0
    19d6:	d006      	beq.n	19e6 <usart_write_buffer_job+0x16>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    19d8:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    19da:	3305      	adds	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    19dc:	2c00      	cmp	r4, #0
    19de:	d002      	beq.n	19e6 <usart_write_buffer_job+0x16>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    19e0:	4b02      	ldr	r3, [pc, #8]	; (19ec <usart_write_buffer_job+0x1c>)
    19e2:	4798      	blx	r3
    19e4:	0003      	movs	r3, r0
}
    19e6:	0018      	movs	r0, r3
    19e8:	bd10      	pop	{r4, pc}
    19ea:	46c0      	nop			; (mov r8, r8)
    19ec:	0000192d 	.word	0x0000192d

000019f0 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    19f0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    19f2:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    19f4:	2a00      	cmp	r2, #0
    19f6:	d006      	beq.n	1a06 <usart_read_buffer_job+0x16>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    19f8:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    19fa:	3305      	adds	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    19fc:	2c00      	cmp	r4, #0
    19fe:	d002      	beq.n	1a06 <usart_read_buffer_job+0x16>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    1a00:	4b02      	ldr	r3, [pc, #8]	; (1a0c <usart_read_buffer_job+0x1c>)
    1a02:	4798      	blx	r3
    1a04:	0003      	movs	r3, r0
}
    1a06:	0018      	movs	r0, r3
    1a08:	bd10      	pop	{r4, pc}
    1a0a:	46c0      	nop			; (mov r8, r8)
    1a0c:	00001969 	.word	0x00001969

00001a10 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1a12:	0080      	lsls	r0, r0, #2
    1a14:	4b60      	ldr	r3, [pc, #384]	; (1b98 <_usart_interrupt_handler+0x188>)
    1a16:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1a18:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1a1a:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1a1c:	2b00      	cmp	r3, #0
    1a1e:	d1fc      	bne.n	1a1a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1a20:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1a22:	7da6      	ldrb	r6, [r4, #22]
    1a24:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1a26:	2330      	movs	r3, #48	; 0x30
    1a28:	5ceb      	ldrb	r3, [r5, r3]
    1a2a:	2231      	movs	r2, #49	; 0x31
    1a2c:	5caf      	ldrb	r7, [r5, r2]
    1a2e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1a30:	07f3      	lsls	r3, r6, #31
    1a32:	d522      	bpl.n	1a7a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1a34:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1a36:	b29b      	uxth	r3, r3
    1a38:	2b00      	cmp	r3, #0
    1a3a:	d01c      	beq.n	1a76 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1a3c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1a3e:	7813      	ldrb	r3, [r2, #0]
    1a40:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1a42:	1c51      	adds	r1, r2, #1
    1a44:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1a46:	7969      	ldrb	r1, [r5, #5]
    1a48:	2901      	cmp	r1, #1
    1a4a:	d001      	beq.n	1a50 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1a4c:	b29b      	uxth	r3, r3
    1a4e:	e004      	b.n	1a5a <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1a50:	7851      	ldrb	r1, [r2, #1]
    1a52:	0209      	lsls	r1, r1, #8
    1a54:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1a56:	3202      	adds	r2, #2
    1a58:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1a5a:	05db      	lsls	r3, r3, #23
    1a5c:	0ddb      	lsrs	r3, r3, #23
    1a5e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1a60:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1a62:	3b01      	subs	r3, #1
    1a64:	b29b      	uxth	r3, r3
    1a66:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1a68:	2b00      	cmp	r3, #0
    1a6a:	d106      	bne.n	1a7a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1a6c:	3301      	adds	r3, #1
    1a6e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1a70:	3301      	adds	r3, #1
    1a72:	75a3      	strb	r3, [r4, #22]
    1a74:	e001      	b.n	1a7a <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1a76:	2301      	movs	r3, #1
    1a78:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1a7a:	07b3      	lsls	r3, r6, #30
    1a7c:	d509      	bpl.n	1a92 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1a7e:	2302      	movs	r3, #2
    1a80:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1a82:	2200      	movs	r2, #0
    1a84:	3331      	adds	r3, #49	; 0x31
    1a86:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1a88:	07fb      	lsls	r3, r7, #31
    1a8a:	d502      	bpl.n	1a92 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1a8c:	0028      	movs	r0, r5
    1a8e:	68eb      	ldr	r3, [r5, #12]
    1a90:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1a92:	0773      	lsls	r3, r6, #29
    1a94:	d560      	bpl.n	1b58 <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
    1a96:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1a98:	b29b      	uxth	r3, r3
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	d05a      	beq.n	1b54 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1a9e:	8b63      	ldrh	r3, [r4, #26]
    1aa0:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1aa2:	071a      	lsls	r2, r3, #28
    1aa4:	d402      	bmi.n	1aac <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1aa6:	223f      	movs	r2, #63	; 0x3f
    1aa8:	4013      	ands	r3, r2
    1aaa:	e001      	b.n	1ab0 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1aac:	2237      	movs	r2, #55	; 0x37
    1aae:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	d02d      	beq.n	1b10 <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1ab4:	079a      	lsls	r2, r3, #30
    1ab6:	d505      	bpl.n	1ac4 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1ab8:	221a      	movs	r2, #26
    1aba:	2332      	movs	r3, #50	; 0x32
    1abc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1abe:	3b30      	subs	r3, #48	; 0x30
    1ac0:	8363      	strh	r3, [r4, #26]
    1ac2:	e01f      	b.n	1b04 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1ac4:	075a      	lsls	r2, r3, #29
    1ac6:	d505      	bpl.n	1ad4 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1ac8:	221e      	movs	r2, #30
    1aca:	2332      	movs	r3, #50	; 0x32
    1acc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1ace:	3b2e      	subs	r3, #46	; 0x2e
    1ad0:	8363      	strh	r3, [r4, #26]
    1ad2:	e017      	b.n	1b04 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1ad4:	07da      	lsls	r2, r3, #31
    1ad6:	d505      	bpl.n	1ae4 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1ad8:	2213      	movs	r2, #19
    1ada:	2332      	movs	r3, #50	; 0x32
    1adc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1ade:	3b31      	subs	r3, #49	; 0x31
    1ae0:	8363      	strh	r3, [r4, #26]
    1ae2:	e00f      	b.n	1b04 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1ae4:	06da      	lsls	r2, r3, #27
    1ae6:	d505      	bpl.n	1af4 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1ae8:	2242      	movs	r2, #66	; 0x42
    1aea:	2332      	movs	r3, #50	; 0x32
    1aec:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1aee:	3b22      	subs	r3, #34	; 0x22
    1af0:	8363      	strh	r3, [r4, #26]
    1af2:	e007      	b.n	1b04 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1af4:	2220      	movs	r2, #32
    1af6:	421a      	tst	r2, r3
    1af8:	d004      	beq.n	1b04 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1afa:	3221      	adds	r2, #33	; 0x21
    1afc:	2332      	movs	r3, #50	; 0x32
    1afe:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1b00:	3b12      	subs	r3, #18
    1b02:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1b04:	077b      	lsls	r3, r7, #29
    1b06:	d527      	bpl.n	1b58 <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1b08:	0028      	movs	r0, r5
    1b0a:	696b      	ldr	r3, [r5, #20]
    1b0c:	4798      	blx	r3
    1b0e:	e023      	b.n	1b58 <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1b10:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1b12:	05db      	lsls	r3, r3, #23
    1b14:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1b16:	b2da      	uxtb	r2, r3
    1b18:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1b1a:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1b1c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1b1e:	1c51      	adds	r1, r2, #1
    1b20:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1b22:	7969      	ldrb	r1, [r5, #5]
    1b24:	2901      	cmp	r1, #1
    1b26:	d104      	bne.n	1b32 <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1b28:	0a1b      	lsrs	r3, r3, #8
    1b2a:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1b2c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1b2e:	3301      	adds	r3, #1
    1b30:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1b32:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1b34:	3b01      	subs	r3, #1
    1b36:	b29b      	uxth	r3, r3
    1b38:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	d10c      	bne.n	1b58 <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1b3e:	3304      	adds	r3, #4
    1b40:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1b42:	2200      	movs	r2, #0
    1b44:	332e      	adds	r3, #46	; 0x2e
    1b46:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1b48:	07bb      	lsls	r3, r7, #30
    1b4a:	d505      	bpl.n	1b58 <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1b4c:	0028      	movs	r0, r5
    1b4e:	692b      	ldr	r3, [r5, #16]
    1b50:	4798      	blx	r3
    1b52:	e001      	b.n	1b58 <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1b54:	2304      	movs	r3, #4
    1b56:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1b58:	06f3      	lsls	r3, r6, #27
    1b5a:	d507      	bpl.n	1b6c <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1b5c:	2310      	movs	r3, #16
    1b5e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1b60:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1b62:	06fb      	lsls	r3, r7, #27
    1b64:	d502      	bpl.n	1b6c <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1b66:	0028      	movs	r0, r5
    1b68:	69eb      	ldr	r3, [r5, #28]
    1b6a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1b6c:	06b3      	lsls	r3, r6, #26
    1b6e:	d507      	bpl.n	1b80 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1b70:	2320      	movs	r3, #32
    1b72:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1b74:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1b76:	073b      	lsls	r3, r7, #28
    1b78:	d502      	bpl.n	1b80 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1b7a:	0028      	movs	r0, r5
    1b7c:	69ab      	ldr	r3, [r5, #24]
    1b7e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1b80:	0733      	lsls	r3, r6, #28
    1b82:	d507      	bpl.n	1b94 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1b84:	2308      	movs	r3, #8
    1b86:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1b88:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1b8a:	06bb      	lsls	r3, r7, #26
    1b8c:	d502      	bpl.n	1b94 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1b8e:	6a2b      	ldr	r3, [r5, #32]
    1b90:	0028      	movs	r0, r5
    1b92:	4798      	blx	r3
		}
	}
#endif
}
    1b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b96:	46c0      	nop			; (mov r8, r8)
    1b98:	200007c8 	.word	0x200007c8

00001b9c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1b9c:	b510      	push	{r4, lr}
	switch (clock_source) {
    1b9e:	2808      	cmp	r0, #8
    1ba0:	d803      	bhi.n	1baa <system_clock_source_get_hz+0xe>
    1ba2:	0080      	lsls	r0, r0, #2
    1ba4:	4b1b      	ldr	r3, [pc, #108]	; (1c14 <system_clock_source_get_hz+0x78>)
    1ba6:	581b      	ldr	r3, [r3, r0]
    1ba8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1baa:	2000      	movs	r0, #0
    1bac:	e030      	b.n	1c10 <system_clock_source_get_hz+0x74>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1bae:	4b1a      	ldr	r3, [pc, #104]	; (1c18 <system_clock_source_get_hz+0x7c>)
    1bb0:	6918      	ldr	r0, [r3, #16]
    1bb2:	e02d      	b.n	1c10 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1bb4:	4b19      	ldr	r3, [pc, #100]	; (1c1c <system_clock_source_get_hz+0x80>)
    1bb6:	6a1b      	ldr	r3, [r3, #32]
    1bb8:	059b      	lsls	r3, r3, #22
    1bba:	0f9b      	lsrs	r3, r3, #30
    1bbc:	4818      	ldr	r0, [pc, #96]	; (1c20 <system_clock_source_get_hz+0x84>)
    1bbe:	40d8      	lsrs	r0, r3
    1bc0:	e026      	b.n	1c10 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1bc2:	4b15      	ldr	r3, [pc, #84]	; (1c18 <system_clock_source_get_hz+0x7c>)
    1bc4:	6958      	ldr	r0, [r3, #20]
    1bc6:	e023      	b.n	1c10 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1bc8:	4b13      	ldr	r3, [pc, #76]	; (1c18 <system_clock_source_get_hz+0x7c>)
    1bca:	681b      	ldr	r3, [r3, #0]
    1bcc:	2002      	movs	r0, #2
    1bce:	4018      	ands	r0, r3
    1bd0:	d01e      	beq.n	1c10 <system_clock_source_get_hz+0x74>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1bd2:	4912      	ldr	r1, [pc, #72]	; (1c1c <system_clock_source_get_hz+0x80>)
    1bd4:	2210      	movs	r2, #16
    1bd6:	68cb      	ldr	r3, [r1, #12]
    1bd8:	421a      	tst	r2, r3
    1bda:	d0fc      	beq.n	1bd6 <system_clock_source_get_hz+0x3a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1bdc:	4b0e      	ldr	r3, [pc, #56]	; (1c18 <system_clock_source_get_hz+0x7c>)
    1bde:	681b      	ldr	r3, [r3, #0]
    1be0:	075b      	lsls	r3, r3, #29
    1be2:	d514      	bpl.n	1c0e <system_clock_source_get_hz+0x72>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1be4:	2000      	movs	r0, #0
    1be6:	4b0f      	ldr	r3, [pc, #60]	; (1c24 <system_clock_source_get_hz+0x88>)
    1be8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1bea:	4b0b      	ldr	r3, [pc, #44]	; (1c18 <system_clock_source_get_hz+0x7c>)
    1bec:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1bee:	041b      	lsls	r3, r3, #16
    1bf0:	0c1b      	lsrs	r3, r3, #16
    1bf2:	4358      	muls	r0, r3
    1bf4:	e00c      	b.n	1c10 <system_clock_source_get_hz+0x74>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1bf6:	2350      	movs	r3, #80	; 0x50
    1bf8:	4a08      	ldr	r2, [pc, #32]	; (1c1c <system_clock_source_get_hz+0x80>)
    1bfa:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1bfc:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1bfe:	075b      	lsls	r3, r3, #29
    1c00:	d506      	bpl.n	1c10 <system_clock_source_get_hz+0x74>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1c02:	4b05      	ldr	r3, [pc, #20]	; (1c18 <system_clock_source_get_hz+0x7c>)
    1c04:	68d8      	ldr	r0, [r3, #12]
    1c06:	e003      	b.n	1c10 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1c08:	2080      	movs	r0, #128	; 0x80
    1c0a:	0200      	lsls	r0, r0, #8
    1c0c:	e000      	b.n	1c10 <system_clock_source_get_hz+0x74>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1c0e:	4806      	ldr	r0, [pc, #24]	; (1c28 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    1c10:	bd10      	pop	{r4, pc}
    1c12:	46c0      	nop			; (mov r8, r8)
    1c14:	00008b50 	.word	0x00008b50
    1c18:	200000f0 	.word	0x200000f0
    1c1c:	40000800 	.word	0x40000800
    1c20:	007a1200 	.word	0x007a1200
    1c24:	00002339 	.word	0x00002339
    1c28:	02dc6c00 	.word	0x02dc6c00

00001c2c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1c2c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1c2e:	4c0c      	ldr	r4, [pc, #48]	; (1c60 <system_clock_source_osc8m_set_config+0x34>)
    1c30:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1c32:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1c34:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1c36:	7842      	ldrb	r2, [r0, #1]
    1c38:	2001      	movs	r0, #1
    1c3a:	4002      	ands	r2, r0
    1c3c:	0192      	lsls	r2, r2, #6
    1c3e:	2640      	movs	r6, #64	; 0x40
    1c40:	43b3      	bics	r3, r6
    1c42:	4313      	orrs	r3, r2
    1c44:	0002      	movs	r2, r0
    1c46:	402a      	ands	r2, r5
    1c48:	01d2      	lsls	r2, r2, #7
    1c4a:	307f      	adds	r0, #127	; 0x7f
    1c4c:	4383      	bics	r3, r0
    1c4e:	4313      	orrs	r3, r2
    1c50:	2203      	movs	r2, #3
    1c52:	400a      	ands	r2, r1
    1c54:	0212      	lsls	r2, r2, #8
    1c56:	4903      	ldr	r1, [pc, #12]	; (1c64 <system_clock_source_osc8m_set_config+0x38>)
    1c58:	400b      	ands	r3, r1
    1c5a:	4313      	orrs	r3, r2
    1c5c:	6223      	str	r3, [r4, #32]
}
    1c5e:	bd70      	pop	{r4, r5, r6, pc}
    1c60:	40000800 	.word	0x40000800
    1c64:	fffffcff 	.word	0xfffffcff

00001c68 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1c68:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c6a:	4657      	mov	r7, sl
    1c6c:	464e      	mov	r6, r9
    1c6e:	4645      	mov	r5, r8
    1c70:	b4e0      	push	{r5, r6, r7}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1c72:	4e1c      	ldr	r6, [pc, #112]	; (1ce4 <system_clock_source_osc32k_set_config+0x7c>)
    1c74:	69b3      	ldr	r3, [r6, #24]
    1c76:	469c      	mov	ip, r3

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    1c78:	7841      	ldrb	r1, [r0, #1]
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1c7a:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1c7c:	7907      	ldrb	r7, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1c7e:	78c3      	ldrb	r3, [r0, #3]
    1c80:	4699      	mov	r9, r3
	temp.bit.WRTLOCK  = config->write_once;
    1c82:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    1c84:	7883      	ldrb	r3, [r0, #2]
    1c86:	2001      	movs	r0, #1
    1c88:	4003      	ands	r3, r0
    1c8a:	009b      	lsls	r3, r3, #2
    1c8c:	469a      	mov	sl, r3
    1c8e:	2204      	movs	r2, #4
    1c90:	4690      	mov	r8, r2
    1c92:	4662      	mov	r2, ip
    1c94:	4643      	mov	r3, r8
    1c96:	439a      	bics	r2, r3
    1c98:	0013      	movs	r3, r2
    1c9a:	4652      	mov	r2, sl
    1c9c:	431a      	orrs	r2, r3
    1c9e:	0013      	movs	r3, r2
    1ca0:	4001      	ands	r1, r0
    1ca2:	00c9      	lsls	r1, r1, #3
    1ca4:	2208      	movs	r2, #8
    1ca6:	4393      	bics	r3, r2
    1ca8:	430b      	orrs	r3, r1
    1caa:	464a      	mov	r2, r9
    1cac:	4002      	ands	r2, r0
    1cae:	0192      	lsls	r2, r2, #6
    1cb0:	2140      	movs	r1, #64	; 0x40
    1cb2:	438b      	bics	r3, r1
    1cb4:	4313      	orrs	r3, r2
    1cb6:	4007      	ands	r7, r0
    1cb8:	01ff      	lsls	r7, r7, #7
    1cba:	2280      	movs	r2, #128	; 0x80
    1cbc:	4393      	bics	r3, r2
    1cbe:	433b      	orrs	r3, r7
    1cc0:	3a79      	subs	r2, #121	; 0x79
    1cc2:	4015      	ands	r5, r2
    1cc4:	022d      	lsls	r5, r5, #8
    1cc6:	4f08      	ldr	r7, [pc, #32]	; (1ce8 <system_clock_source_osc32k_set_config+0x80>)
    1cc8:	403b      	ands	r3, r7
    1cca:	432b      	orrs	r3, r5
    1ccc:	4004      	ands	r4, r0
    1cce:	0320      	lsls	r0, r4, #12
    1cd0:	4c06      	ldr	r4, [pc, #24]	; (1cec <system_clock_source_osc32k_set_config+0x84>)
    1cd2:	401c      	ands	r4, r3
    1cd4:	4304      	orrs	r4, r0
    1cd6:	61b4      	str	r4, [r6, #24]
}
    1cd8:	bc1c      	pop	{r2, r3, r4}
    1cda:	4690      	mov	r8, r2
    1cdc:	4699      	mov	r9, r3
    1cde:	46a2      	mov	sl, r4
    1ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ce2:	46c0      	nop			; (mov r8, r8)
    1ce4:	40000800 	.word	0x40000800
    1ce8:	fffff8ff 	.word	0xfffff8ff
    1cec:	ffffefff 	.word	0xffffefff

00001cf0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cf2:	465f      	mov	r7, fp
    1cf4:	4656      	mov	r6, sl
    1cf6:	464d      	mov	r5, r9
    1cf8:	4644      	mov	r4, r8
    1cfa:	b4f0      	push	{r4, r5, r6, r7}
    1cfc:	b083      	sub	sp, #12
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1cfe:	4e2e      	ldr	r6, [pc, #184]	; (1db8 <system_clock_source_xosc32k_set_config+0xc8>)
    1d00:	8ab3      	ldrh	r3, [r6, #20]
    1d02:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    1d04:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1d06:	7803      	ldrb	r3, [r0, #0]
    1d08:	425a      	negs	r2, r3
    1d0a:	415a      	adcs	r2, r3
    1d0c:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1d0e:	7883      	ldrb	r3, [r0, #2]
    1d10:	469b      	mov	fp, r3
	temp.bit.EN1K = config->enable_1khz_output;
    1d12:	78c3      	ldrb	r3, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    1d14:	7902      	ldrb	r2, [r0, #4]
    1d16:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1d18:	7b47      	ldrb	r7, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1d1a:	7b02      	ldrb	r2, [r0, #12]
    1d1c:	9201      	str	r2, [sp, #4]
	temp.bit.WRTLOCK  = config->write_once;
    1d1e:	7b84      	ldrb	r4, [r0, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1d20:	6882      	ldr	r2, [r0, #8]
    1d22:	4826      	ldr	r0, [pc, #152]	; (1dbc <system_clock_source_xosc32k_set_config+0xcc>)
    1d24:	6142      	str	r2, [r0, #20]

	SYSCTRL->XOSC32K = temp;
    1d26:	2001      	movs	r0, #1
    1d28:	464a      	mov	r2, r9
    1d2a:	0092      	lsls	r2, r2, #2
    1d2c:	4691      	mov	r9, r2
    1d2e:	2204      	movs	r2, #4
    1d30:	4692      	mov	sl, r2
    1d32:	4662      	mov	r2, ip
    1d34:	4651      	mov	r1, sl
    1d36:	438a      	bics	r2, r1
    1d38:	4694      	mov	ip, r2
    1d3a:	464a      	mov	r2, r9
    1d3c:	4661      	mov	r1, ip
    1d3e:	430a      	orrs	r2, r1
    1d40:	4694      	mov	ip, r2
    1d42:	4642      	mov	r2, r8
    1d44:	4002      	ands	r2, r0
    1d46:	00d2      	lsls	r2, r2, #3
    1d48:	4690      	mov	r8, r2
    1d4a:	2208      	movs	r2, #8
    1d4c:	4691      	mov	r9, r2
    1d4e:	4662      	mov	r2, ip
    1d50:	4649      	mov	r1, r9
    1d52:	438a      	bics	r2, r1
    1d54:	4694      	mov	ip, r2
    1d56:	4642      	mov	r2, r8
    1d58:	4661      	mov	r1, ip
    1d5a:	430a      	orrs	r2, r1
    1d5c:	4694      	mov	ip, r2
    1d5e:	4003      	ands	r3, r0
    1d60:	011b      	lsls	r3, r3, #4
    1d62:	2210      	movs	r2, #16
    1d64:	4690      	mov	r8, r2
    1d66:	4662      	mov	r2, ip
    1d68:	4641      	mov	r1, r8
    1d6a:	438a      	bics	r2, r1
    1d6c:	4313      	orrs	r3, r2
    1d6e:	4659      	mov	r1, fp
    1d70:	4001      	ands	r1, r0
    1d72:	0149      	lsls	r1, r1, #5
    1d74:	2220      	movs	r2, #32
    1d76:	4393      	bics	r3, r2
    1d78:	430b      	orrs	r3, r1
    1d7a:	9a01      	ldr	r2, [sp, #4]
    1d7c:	4002      	ands	r2, r0
    1d7e:	0192      	lsls	r2, r2, #6
    1d80:	2140      	movs	r1, #64	; 0x40
    1d82:	438b      	bics	r3, r1
    1d84:	4313      	orrs	r3, r2
    1d86:	4007      	ands	r7, r0
    1d88:	01ff      	lsls	r7, r7, #7
    1d8a:	2280      	movs	r2, #128	; 0x80
    1d8c:	4393      	bics	r3, r2
    1d8e:	433b      	orrs	r3, r7
    1d90:	3a79      	subs	r2, #121	; 0x79
    1d92:	4015      	ands	r5, r2
    1d94:	022d      	lsls	r5, r5, #8
    1d96:	4f0a      	ldr	r7, [pc, #40]	; (1dc0 <system_clock_source_xosc32k_set_config+0xd0>)
    1d98:	403b      	ands	r3, r7
    1d9a:	432b      	orrs	r3, r5
    1d9c:	4004      	ands	r4, r0
    1d9e:	0320      	lsls	r0, r4, #12
    1da0:	4c08      	ldr	r4, [pc, #32]	; (1dc4 <system_clock_source_xosc32k_set_config+0xd4>)
    1da2:	401c      	ands	r4, r3
    1da4:	4304      	orrs	r4, r0
    1da6:	82b4      	strh	r4, [r6, #20]
}
    1da8:	b003      	add	sp, #12
    1daa:	bc3c      	pop	{r2, r3, r4, r5}
    1dac:	4690      	mov	r8, r2
    1dae:	4699      	mov	r9, r3
    1db0:	46a2      	mov	sl, r4
    1db2:	46ab      	mov	fp, r5
    1db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1db6:	46c0      	nop			; (mov r8, r8)
    1db8:	40000800 	.word	0x40000800
    1dbc:	200000f0 	.word	0x200000f0
    1dc0:	fffff8ff 	.word	0xfffff8ff
    1dc4:	ffffefff 	.word	0xffffefff

00001dc8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1dc8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1dca:	7a03      	ldrb	r3, [r0, #8]
    1dcc:	069b      	lsls	r3, r3, #26
    1dce:	0c1a      	lsrs	r2, r3, #16
    1dd0:	8943      	ldrh	r3, [r0, #10]
    1dd2:	059b      	lsls	r3, r3, #22
    1dd4:	0d9b      	lsrs	r3, r3, #22
    1dd6:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    1dd8:	4c19      	ldr	r4, [pc, #100]	; (1e40 <system_clock_source_dfll_set_config+0x78>)
    1dda:	6063      	str	r3, [r4, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    1ddc:	7981      	ldrb	r1, [r0, #6]
    1dde:	79c3      	ldrb	r3, [r0, #7]
    1de0:	4319      	orrs	r1, r3
    1de2:	8843      	ldrh	r3, [r0, #2]
    1de4:	8882      	ldrh	r2, [r0, #4]
    1de6:	4313      	orrs	r3, r2
    1de8:	430b      	orrs	r3, r1
    1dea:	7842      	ldrb	r2, [r0, #1]
    1dec:	01d2      	lsls	r2, r2, #7
    1dee:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    1df0:	6023      	str	r3, [r4, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1df2:	7803      	ldrb	r3, [r0, #0]
    1df4:	2b04      	cmp	r3, #4
    1df6:	d10f      	bne.n	1e18 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1df8:	7b03      	ldrb	r3, [r0, #12]
    1dfa:	069b      	lsls	r3, r3, #26
    1dfc:	8a02      	ldrh	r2, [r0, #16]
    1dfe:	4313      	orrs	r3, r2
    1e00:	0019      	movs	r1, r3
    1e02:	89c3      	ldrh	r3, [r0, #14]
    1e04:	041b      	lsls	r3, r3, #16
    1e06:	4a0f      	ldr	r2, [pc, #60]	; (1e44 <system_clock_source_dfll_set_config+0x7c>)
    1e08:	4013      	ands	r3, r2
    1e0a:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    1e0c:	60a3      	str	r3, [r4, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    1e0e:	6821      	ldr	r1, [r4, #0]
    1e10:	2304      	movs	r3, #4
    1e12:	430b      	orrs	r3, r1
    1e14:	6023      	str	r3, [r4, #0]
    1e16:	e011      	b.n	1e3c <system_clock_source_dfll_set_config+0x74>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1e18:	2b20      	cmp	r3, #32
    1e1a:	d10f      	bne.n	1e3c <system_clock_source_dfll_set_config+0x74>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1e1c:	7b03      	ldrb	r3, [r0, #12]
    1e1e:	069b      	lsls	r3, r3, #26
    1e20:	8a02      	ldrh	r2, [r0, #16]
    1e22:	4313      	orrs	r3, r2
    1e24:	0019      	movs	r1, r3
    1e26:	89c3      	ldrh	r3, [r0, #14]
    1e28:	041b      	lsls	r3, r3, #16
    1e2a:	4a06      	ldr	r2, [pc, #24]	; (1e44 <system_clock_source_dfll_set_config+0x7c>)
    1e2c:	4013      	ands	r3, r2
    1e2e:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    1e30:	4a03      	ldr	r2, [pc, #12]	; (1e40 <system_clock_source_dfll_set_config+0x78>)
    1e32:	6093      	str	r3, [r2, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1e34:	6813      	ldr	r3, [r2, #0]
    1e36:	4904      	ldr	r1, [pc, #16]	; (1e48 <system_clock_source_dfll_set_config+0x80>)
    1e38:	430b      	orrs	r3, r1
    1e3a:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1e3c:	bd10      	pop	{r4, pc}
    1e3e:	46c0      	nop			; (mov r8, r8)
    1e40:	200000f0 	.word	0x200000f0
    1e44:	03ff0000 	.word	0x03ff0000
    1e48:	00000424 	.word	0x00000424

00001e4c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1e4c:	2808      	cmp	r0, #8
    1e4e:	d803      	bhi.n	1e58 <system_clock_source_enable+0xc>
    1e50:	0080      	lsls	r0, r0, #2
    1e52:	4b25      	ldr	r3, [pc, #148]	; (1ee8 <system_clock_source_enable+0x9c>)
    1e54:	581b      	ldr	r3, [r3, r0]
    1e56:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1e58:	2017      	movs	r0, #23
    1e5a:	e044      	b.n	1ee6 <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1e5c:	4a23      	ldr	r2, [pc, #140]	; (1eec <system_clock_source_enable+0xa0>)
    1e5e:	6a11      	ldr	r1, [r2, #32]
    1e60:	2302      	movs	r3, #2
    1e62:	430b      	orrs	r3, r1
    1e64:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1e66:	2000      	movs	r0, #0
    1e68:	e03d      	b.n	1ee6 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1e6a:	4a20      	ldr	r2, [pc, #128]	; (1eec <system_clock_source_enable+0xa0>)
    1e6c:	6991      	ldr	r1, [r2, #24]
    1e6e:	2302      	movs	r3, #2
    1e70:	430b      	orrs	r3, r1
    1e72:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1e74:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1e76:	e036      	b.n	1ee6 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1e78:	4a1c      	ldr	r2, [pc, #112]	; (1eec <system_clock_source_enable+0xa0>)
    1e7a:	8a11      	ldrh	r1, [r2, #16]
    1e7c:	2302      	movs	r3, #2
    1e7e:	430b      	orrs	r3, r1
    1e80:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1e82:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1e84:	e02f      	b.n	1ee6 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1e86:	4a19      	ldr	r2, [pc, #100]	; (1eec <system_clock_source_enable+0xa0>)
    1e88:	8a91      	ldrh	r1, [r2, #20]
    1e8a:	2302      	movs	r3, #2
    1e8c:	430b      	orrs	r3, r1
    1e8e:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1e90:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    1e92:	e028      	b.n	1ee6 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1e94:	4916      	ldr	r1, [pc, #88]	; (1ef0 <system_clock_source_enable+0xa4>)
    1e96:	680b      	ldr	r3, [r1, #0]
    1e98:	2202      	movs	r2, #2
    1e9a:	4313      	orrs	r3, r2
    1e9c:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1e9e:	4b13      	ldr	r3, [pc, #76]	; (1eec <system_clock_source_enable+0xa0>)
    1ea0:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1ea2:	0019      	movs	r1, r3
    1ea4:	320e      	adds	r2, #14
    1ea6:	68cb      	ldr	r3, [r1, #12]
    1ea8:	421a      	tst	r2, r3
    1eaa:	d0fc      	beq.n	1ea6 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1eac:	4a10      	ldr	r2, [pc, #64]	; (1ef0 <system_clock_source_enable+0xa4>)
    1eae:	6891      	ldr	r1, [r2, #8]
    1eb0:	4b0e      	ldr	r3, [pc, #56]	; (1eec <system_clock_source_enable+0xa0>)
    1eb2:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1eb4:	6852      	ldr	r2, [r2, #4]
    1eb6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1eb8:	2200      	movs	r2, #0
    1eba:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1ebc:	0019      	movs	r1, r3
    1ebe:	3210      	adds	r2, #16
    1ec0:	68cb      	ldr	r3, [r1, #12]
    1ec2:	421a      	tst	r2, r3
    1ec4:	d0fc      	beq.n	1ec0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1ec6:	4b0a      	ldr	r3, [pc, #40]	; (1ef0 <system_clock_source_enable+0xa4>)
    1ec8:	681b      	ldr	r3, [r3, #0]
    1eca:	b29b      	uxth	r3, r3
    1ecc:	4a07      	ldr	r2, [pc, #28]	; (1eec <system_clock_source_enable+0xa0>)
    1ece:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1ed0:	2000      	movs	r0, #0
    1ed2:	e008      	b.n	1ee6 <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1ed4:	4905      	ldr	r1, [pc, #20]	; (1eec <system_clock_source_enable+0xa0>)
    1ed6:	2244      	movs	r2, #68	; 0x44
    1ed8:	5c88      	ldrb	r0, [r1, r2]
    1eda:	2302      	movs	r3, #2
    1edc:	4303      	orrs	r3, r0
    1ede:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1ee0:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1ee2:	e000      	b.n	1ee6 <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1ee4:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1ee6:	4770      	bx	lr
    1ee8:	00008b74 	.word	0x00008b74
    1eec:	40000800 	.word	0x40000800
    1ef0:	200000f0 	.word	0x200000f0

00001ef4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ef6:	4657      	mov	r7, sl
    1ef8:	464e      	mov	r6, r9
    1efa:	4645      	mov	r5, r8
    1efc:	b4e0      	push	{r5, r6, r7}
    1efe:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1f00:	22c2      	movs	r2, #194	; 0xc2
    1f02:	00d2      	lsls	r2, r2, #3
    1f04:	4b68      	ldr	r3, [pc, #416]	; (20a8 <STACK_SIZE+0xa8>)
    1f06:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1f08:	4968      	ldr	r1, [pc, #416]	; (20ac <STACK_SIZE+0xac>)
    1f0a:	684b      	ldr	r3, [r1, #4]
    1f0c:	221e      	movs	r2, #30
    1f0e:	4393      	bics	r3, r2
    1f10:	3a1a      	subs	r2, #26
    1f12:	4313      	orrs	r3, r2
    1f14:	604b      	str	r3, [r1, #4]
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
#elif CONF_CLOCK_GCLK_4_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_4;
#elif CONF_CLOCK_GCLK_5_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_5;
    1f16:	3201      	adds	r2, #1
    1f18:	ab01      	add	r3, sp, #4
    1f1a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1f1c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1f1e:	4d64      	ldr	r5, [pc, #400]	; (20b0 <STACK_SIZE+0xb0>)
    1f20:	b2e0      	uxtb	r0, r4
    1f22:	a901      	add	r1, sp, #4
    1f24:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1f26:	3401      	adds	r4, #1
    1f28:	2c25      	cmp	r4, #37	; 0x25
    1f2a:	d1f9      	bne.n	1f20 <system_clock_init+0x2c>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1f2c:	a80c      	add	r0, sp, #48	; 0x30
    1f2e:	2300      	movs	r3, #0
    1f30:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
	config->frequency           = 32768UL;
    1f32:	2280      	movs	r2, #128	; 0x80
    1f34:	0212      	lsls	r2, r2, #8
    1f36:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1f38:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1f3a:	2201      	movs	r2, #1
    1f3c:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1f3e:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    1f40:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1f42:	2106      	movs	r1, #6
    1f44:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    1f46:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1f48:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1f4a:	4b5a      	ldr	r3, [pc, #360]	; (20b4 <STACK_SIZE+0xb4>)
    1f4c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1f4e:	2005      	movs	r0, #5
    1f50:	4b59      	ldr	r3, [pc, #356]	; (20b8 <STACK_SIZE+0xb8>)
    1f52:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1f54:	4954      	ldr	r1, [pc, #336]	; (20a8 <STACK_SIZE+0xa8>)
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1f56:	2202      	movs	r2, #2

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1f58:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1f5a:	421a      	tst	r2, r3
    1f5c:	d0fc      	beq.n	1f58 <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1f5e:	4952      	ldr	r1, [pc, #328]	; (20a8 <STACK_SIZE+0xa8>)
    1f60:	8a8a      	ldrh	r2, [r1, #20]
    1f62:	2380      	movs	r3, #128	; 0x80
    1f64:	4313      	orrs	r3, r2
    1f66:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    1f68:	4c54      	ldr	r4, [pc, #336]	; (20bc <STACK_SIZE+0xbc>)
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    1f6a:	6823      	ldr	r3, [r4, #0]
    1f6c:	04da      	lsls	r2, r3, #19
    1f6e:	6988      	ldr	r0, [r1, #24]
    1f70:	0e52      	lsrs	r2, r2, #25
    1f72:	0412      	lsls	r2, r2, #16
    1f74:	4b52      	ldr	r3, [pc, #328]	; (20c0 <STACK_SIZE+0xc0>)
    1f76:	4003      	ands	r3, r0
    1f78:	4313      	orrs	r3, r2
    1f7a:	618b      	str	r3, [r1, #24]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    1f7c:	a80a      	add	r0, sp, #40	; 0x28
    1f7e:	2301      	movs	r3, #1
    1f80:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    1f82:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
	config->on_demand           = true;
    1f84:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1f86:	2207      	movs	r2, #7
    1f88:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    1f8a:	2500      	movs	r5, #0
    1f8c:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1f8e:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1f90:	4b4c      	ldr	r3, [pc, #304]	; (20c4 <STACK_SIZE+0xc4>)
    1f92:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1f94:	2004      	movs	r0, #4
    1f96:	4b48      	ldr	r3, [pc, #288]	; (20b8 <STACK_SIZE+0xb8>)
    1f98:	4798      	blx	r3
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1f9a:	ab05      	add	r3, sp, #20
    1f9c:	2200      	movs	r2, #0
    1f9e:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1fa0:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1fa2:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1fa4:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
	config->fine_value      = 0xff / 4; /* Midpoint */
    1fa6:	213f      	movs	r1, #63	; 0x3f
    1fa8:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1faa:	393b      	subs	r1, #59	; 0x3b
    1fac:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1fae:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1fb0:	6823      	ldr	r3, [r4, #0]
    1fb2:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1fb4:	2b3f      	cmp	r3, #63	; 0x3f
    1fb6:	d100      	bne.n	1fba <system_clock_init+0xc6>
		coarse = 0x1f;
    1fb8:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
    1fba:	a805      	add	r0, sp, #20
    1fbc:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1fbe:	23b7      	movs	r3, #183	; 0xb7
    1fc0:	00db      	lsls	r3, r3, #3
    1fc2:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1fc4:	2307      	movs	r3, #7
    1fc6:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1fc8:	3338      	adds	r3, #56	; 0x38
    1fca:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1fcc:	4b3e      	ldr	r3, [pc, #248]	; (20c8 <STACK_SIZE+0xc8>)
    1fce:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1fd0:	a804      	add	r0, sp, #16
    1fd2:	2500      	movs	r5, #0
    1fd4:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1fd6:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1fd8:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1fda:	4b3c      	ldr	r3, [pc, #240]	; (20cc <STACK_SIZE+0xcc>)
    1fdc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1fde:	2006      	movs	r0, #6
    1fe0:	4b35      	ldr	r3, [pc, #212]	; (20b8 <STACK_SIZE+0xb8>)
    1fe2:	4699      	mov	r9, r3
    1fe4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1fe6:	4b3a      	ldr	r3, [pc, #232]	; (20d0 <STACK_SIZE+0xd0>)
    1fe8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1fea:	ac01      	add	r4, sp, #4
    1fec:	2601      	movs	r6, #1
    1fee:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1ff0:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1ff2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1ff4:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1ff6:	2305      	movs	r3, #5
    1ff8:	7023      	strb	r3, [r4, #0]
    1ffa:	0021      	movs	r1, r4
    1ffc:	2001      	movs	r0, #1
    1ffe:	4b35      	ldr	r3, [pc, #212]	; (20d4 <STACK_SIZE+0xd4>)
    2000:	4698      	mov	r8, r3
    2002:	4798      	blx	r3
    2004:	2001      	movs	r0, #1
    2006:	4f34      	ldr	r7, [pc, #208]	; (20d8 <STACK_SIZE+0xd8>)
    2008:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    200a:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    200c:	7265      	strb	r5, [r4, #9]
    200e:	2304      	movs	r3, #4
    2010:	7023      	strb	r3, [r4, #0]
    2012:	331c      	adds	r3, #28
    2014:	469a      	mov	sl, r3
    2016:	6063      	str	r3, [r4, #4]
    2018:	7226      	strb	r6, [r4, #8]
    201a:	0021      	movs	r1, r4
    201c:	2002      	movs	r0, #2
    201e:	47c0      	blx	r8
    2020:	2002      	movs	r0, #2
    2022:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2024:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    2026:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2028:	2306      	movs	r3, #6
    202a:	7023      	strb	r3, [r4, #0]
#endif
	config->run_in_standby     = false;
    202c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    202e:	7265      	strb	r5, [r4, #9]
    2030:	0021      	movs	r1, r4
    2032:	2003      	movs	r0, #3
    2034:	47c0      	blx	r8
    2036:	2003      	movs	r0, #3
    2038:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    203a:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    203c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    203e:	7265      	strb	r5, [r4, #9]
    2040:	2303      	movs	r3, #3
    2042:	7023      	strb	r3, [r4, #0]
    2044:	4653      	mov	r3, sl
    2046:	6063      	str	r3, [r4, #4]
    2048:	0021      	movs	r1, r4
    204a:	2004      	movs	r0, #4
    204c:	47c0      	blx	r8
    204e:	2004      	movs	r0, #4
    2050:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2052:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2054:	0021      	movs	r1, r4
    2056:	2000      	movs	r0, #0
    2058:	4b15      	ldr	r3, [pc, #84]	; (20b0 <STACK_SIZE+0xb0>)
    205a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    205c:	2000      	movs	r0, #0
    205e:	4b1f      	ldr	r3, [pc, #124]	; (20dc <STACK_SIZE+0xdc>)
    2060:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2062:	2007      	movs	r0, #7
    2064:	47c8      	blx	r9

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2066:	4910      	ldr	r1, [pc, #64]	; (20a8 <STACK_SIZE+0xa8>)


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2068:	22d0      	movs	r2, #208	; 0xd0

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    206a:	68cb      	ldr	r3, [r1, #12]


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    206c:	4013      	ands	r3, r2
    206e:	2bd0      	cmp	r3, #208	; 0xd0
    2070:	d1fb      	bne.n	206a <STACK_SIZE+0x6a>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    2072:	4a1b      	ldr	r2, [pc, #108]	; (20e0 <STACK_SIZE+0xe0>)
    2074:	2300      	movs	r3, #0
    2076:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    2078:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    207a:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    207c:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    207e:	a901      	add	r1, sp, #4
    2080:	2201      	movs	r2, #1
    2082:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    2084:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2086:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2088:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    208a:	3307      	adds	r3, #7
    208c:	700b      	strb	r3, [r1, #0]
    208e:	2000      	movs	r0, #0
    2090:	4b10      	ldr	r3, [pc, #64]	; (20d4 <STACK_SIZE+0xd4>)
    2092:	4798      	blx	r3
    2094:	2000      	movs	r0, #0
    2096:	4b10      	ldr	r3, [pc, #64]	; (20d8 <STACK_SIZE+0xd8>)
    2098:	4798      	blx	r3
#endif
}
    209a:	b010      	add	sp, #64	; 0x40
    209c:	bc1c      	pop	{r2, r3, r4}
    209e:	4690      	mov	r8, r2
    20a0:	4699      	mov	r9, r3
    20a2:	46a2      	mov	sl, r4
    20a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20a6:	46c0      	nop			; (mov r8, r8)
    20a8:	40000800 	.word	0x40000800
    20ac:	41004000 	.word	0x41004000
    20b0:	0000231d 	.word	0x0000231d
    20b4:	00001cf1 	.word	0x00001cf1
    20b8:	00001e4d 	.word	0x00001e4d
    20bc:	00806024 	.word	0x00806024
    20c0:	ff80ffff 	.word	0xff80ffff
    20c4:	00001c69 	.word	0x00001c69
    20c8:	00001dc9 	.word	0x00001dc9
    20cc:	00001c2d 	.word	0x00001c2d
    20d0:	000020e5 	.word	0x000020e5
    20d4:	00002109 	.word	0x00002109
    20d8:	000021c1 	.word	0x000021c1
    20dc:	00002291 	.word	0x00002291
    20e0:	40000400 	.word	0x40000400

000020e4 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    20e4:	4a06      	ldr	r2, [pc, #24]	; (2100 <system_gclk_init+0x1c>)
    20e6:	6991      	ldr	r1, [r2, #24]
    20e8:	2308      	movs	r3, #8
    20ea:	430b      	orrs	r3, r1
    20ec:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    20ee:	2201      	movs	r2, #1
    20f0:	4b04      	ldr	r3, [pc, #16]	; (2104 <system_gclk_init+0x20>)
    20f2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    20f4:	0019      	movs	r1, r3
    20f6:	780b      	ldrb	r3, [r1, #0]
    20f8:	4213      	tst	r3, r2
    20fa:	d1fc      	bne.n	20f6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    20fc:	4770      	bx	lr
    20fe:	46c0      	nop			; (mov r8, r8)
    2100:	40000400 	.word	0x40000400
    2104:	40000c00 	.word	0x40000c00

00002108 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2108:	b570      	push	{r4, r5, r6, lr}
    210a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    210c:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    210e:	780c      	ldrb	r4, [r1, #0]
    2110:	0224      	lsls	r4, r4, #8
    2112:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2114:	784b      	ldrb	r3, [r1, #1]
    2116:	2b00      	cmp	r3, #0
    2118:	d002      	beq.n	2120 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    211a:	2380      	movs	r3, #128	; 0x80
    211c:	02db      	lsls	r3, r3, #11
    211e:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2120:	7a4b      	ldrb	r3, [r1, #9]
    2122:	2b00      	cmp	r3, #0
    2124:	d002      	beq.n	212c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2126:	2380      	movs	r3, #128	; 0x80
    2128:	031b      	lsls	r3, r3, #12
    212a:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    212c:	6848      	ldr	r0, [r1, #4]
    212e:	2801      	cmp	r0, #1
    2130:	d918      	bls.n	2164 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2132:	1e43      	subs	r3, r0, #1
    2134:	4218      	tst	r0, r3
    2136:	d110      	bne.n	215a <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2138:	2802      	cmp	r0, #2
    213a:	d906      	bls.n	214a <system_gclk_gen_set_config+0x42>
    213c:	2302      	movs	r3, #2
    213e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2140:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    2142:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2144:	4298      	cmp	r0, r3
    2146:	d8fb      	bhi.n	2140 <system_gclk_gen_set_config+0x38>
    2148:	e000      	b.n	214c <system_gclk_gen_set_config+0x44>
    214a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    214c:	0212      	lsls	r2, r2, #8
    214e:	4332      	orrs	r2, r6
    2150:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2152:	2380      	movs	r3, #128	; 0x80
    2154:	035b      	lsls	r3, r3, #13
    2156:	431c      	orrs	r4, r3
    2158:	e004      	b.n	2164 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    215a:	0205      	lsls	r5, r0, #8
    215c:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    215e:	2380      	movs	r3, #128	; 0x80
    2160:	029b      	lsls	r3, r3, #10
    2162:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2164:	7a0b      	ldrb	r3, [r1, #8]
    2166:	2b00      	cmp	r3, #0
    2168:	d002      	beq.n	2170 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    216a:	2380      	movs	r3, #128	; 0x80
    216c:	039b      	lsls	r3, r3, #14
    216e:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2170:	4a0f      	ldr	r2, [pc, #60]	; (21b0 <system_gclk_gen_set_config+0xa8>)
    2172:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    2174:	b25b      	sxtb	r3, r3
    2176:	2b00      	cmp	r3, #0
    2178:	dbfb      	blt.n	2172 <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    217a:	4b0e      	ldr	r3, [pc, #56]	; (21b4 <system_gclk_gen_set_config+0xac>)
    217c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    217e:	4b0e      	ldr	r3, [pc, #56]	; (21b8 <system_gclk_gen_set_config+0xb0>)
    2180:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2182:	4a0b      	ldr	r2, [pc, #44]	; (21b0 <system_gclk_gen_set_config+0xa8>)
    2184:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2186:	b25b      	sxtb	r3, r3
    2188:	2b00      	cmp	r3, #0
    218a:	dbfb      	blt.n	2184 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    218c:	4b08      	ldr	r3, [pc, #32]	; (21b0 <system_gclk_gen_set_config+0xa8>)
    218e:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2190:	001a      	movs	r2, r3
    2192:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    2194:	b25b      	sxtb	r3, r3
    2196:	2b00      	cmp	r3, #0
    2198:	dbfb      	blt.n	2192 <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    219a:	4a05      	ldr	r2, [pc, #20]	; (21b0 <system_gclk_gen_set_config+0xa8>)
    219c:	6851      	ldr	r1, [r2, #4]
    219e:	2380      	movs	r3, #128	; 0x80
    21a0:	025b      	lsls	r3, r3, #9
    21a2:	400b      	ands	r3, r1
    21a4:	431c      	orrs	r4, r3
    21a6:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    21a8:	4b04      	ldr	r3, [pc, #16]	; (21bc <system_gclk_gen_set_config+0xb4>)
    21aa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    21ac:	bd70      	pop	{r4, r5, r6, pc}
    21ae:	46c0      	nop			; (mov r8, r8)
    21b0:	40000c00 	.word	0x40000c00
    21b4:	000009ed 	.word	0x000009ed
    21b8:	40000c08 	.word	0x40000c08
    21bc:	00000a2d 	.word	0x00000a2d

000021c0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    21c0:	b510      	push	{r4, lr}
    21c2:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    21c4:	4a0b      	ldr	r2, [pc, #44]	; (21f4 <system_gclk_gen_enable+0x34>)
    21c6:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    21c8:	b25b      	sxtb	r3, r3
    21ca:	2b00      	cmp	r3, #0
    21cc:	dbfb      	blt.n	21c6 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    21ce:	4b0a      	ldr	r3, [pc, #40]	; (21f8 <system_gclk_gen_enable+0x38>)
    21d0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    21d2:	4b0a      	ldr	r3, [pc, #40]	; (21fc <system_gclk_gen_enable+0x3c>)
    21d4:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    21d6:	4a07      	ldr	r2, [pc, #28]	; (21f4 <system_gclk_gen_enable+0x34>)
    21d8:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    21da:	b25b      	sxtb	r3, r3
    21dc:	2b00      	cmp	r3, #0
    21de:	dbfb      	blt.n	21d8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    21e0:	4a04      	ldr	r2, [pc, #16]	; (21f4 <system_gclk_gen_enable+0x34>)
    21e2:	6853      	ldr	r3, [r2, #4]
    21e4:	2180      	movs	r1, #128	; 0x80
    21e6:	0249      	lsls	r1, r1, #9
    21e8:	430b      	orrs	r3, r1
    21ea:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    21ec:	4b04      	ldr	r3, [pc, #16]	; (2200 <system_gclk_gen_enable+0x40>)
    21ee:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    21f0:	bd10      	pop	{r4, pc}
    21f2:	46c0      	nop			; (mov r8, r8)
    21f4:	40000c00 	.word	0x40000c00
    21f8:	000009ed 	.word	0x000009ed
    21fc:	40000c04 	.word	0x40000c04
    2200:	00000a2d 	.word	0x00000a2d

00002204 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2204:	b570      	push	{r4, r5, r6, lr}
    2206:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2208:	4a1a      	ldr	r2, [pc, #104]	; (2274 <system_gclk_gen_get_hz+0x70>)
    220a:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    220c:	b25b      	sxtb	r3, r3
    220e:	2b00      	cmp	r3, #0
    2210:	dbfb      	blt.n	220a <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2212:	4b19      	ldr	r3, [pc, #100]	; (2278 <system_gclk_gen_get_hz+0x74>)
    2214:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2216:	4b19      	ldr	r3, [pc, #100]	; (227c <system_gclk_gen_get_hz+0x78>)
    2218:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    221a:	4a16      	ldr	r2, [pc, #88]	; (2274 <system_gclk_gen_get_hz+0x70>)
    221c:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    221e:	b25b      	sxtb	r3, r3
    2220:	2b00      	cmp	r3, #0
    2222:	dbfb      	blt.n	221c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2224:	4e13      	ldr	r6, [pc, #76]	; (2274 <system_gclk_gen_get_hz+0x70>)
    2226:	6870      	ldr	r0, [r6, #4]
    2228:	04c0      	lsls	r0, r0, #19
    222a:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    222c:	4b14      	ldr	r3, [pc, #80]	; (2280 <system_gclk_gen_get_hz+0x7c>)
    222e:	4798      	blx	r3
    2230:	0005      	movs	r5, r0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2232:	4b12      	ldr	r3, [pc, #72]	; (227c <system_gclk_gen_get_hz+0x78>)
    2234:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2236:	6876      	ldr	r6, [r6, #4]
    2238:	02f6      	lsls	r6, r6, #11
    223a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    223c:	4b11      	ldr	r3, [pc, #68]	; (2284 <system_gclk_gen_get_hz+0x80>)
    223e:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2240:	4a0c      	ldr	r2, [pc, #48]	; (2274 <system_gclk_gen_get_hz+0x70>)
    2242:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    2244:	b25b      	sxtb	r3, r3
    2246:	2b00      	cmp	r3, #0
    2248:	dbfb      	blt.n	2242 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    224a:	4b0a      	ldr	r3, [pc, #40]	; (2274 <system_gclk_gen_get_hz+0x70>)
    224c:	689c      	ldr	r4, [r3, #8]
    224e:	0224      	lsls	r4, r4, #8
    2250:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2252:	4b0d      	ldr	r3, [pc, #52]	; (2288 <system_gclk_gen_get_hz+0x84>)
    2254:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2256:	2e00      	cmp	r6, #0
    2258:	d107      	bne.n	226a <system_gclk_gen_get_hz+0x66>
    225a:	2c01      	cmp	r4, #1
    225c:	d907      	bls.n	226e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    225e:	0021      	movs	r1, r4
    2260:	0028      	movs	r0, r5
    2262:	4b0a      	ldr	r3, [pc, #40]	; (228c <system_gclk_gen_get_hz+0x88>)
    2264:	4798      	blx	r3
    2266:	0005      	movs	r5, r0
    2268:	e001      	b.n	226e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    226a:	3401      	adds	r4, #1
    226c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    226e:	0028      	movs	r0, r5
    2270:	bd70      	pop	{r4, r5, r6, pc}
    2272:	46c0      	nop			; (mov r8, r8)
    2274:	40000c00 	.word	0x40000c00
    2278:	000009ed 	.word	0x000009ed
    227c:	40000c04 	.word	0x40000c04
    2280:	00001b9d 	.word	0x00001b9d
    2284:	40000c08 	.word	0x40000c08
    2288:	00000a2d 	.word	0x00000a2d
    228c:	00005f35 	.word	0x00005f35

00002290 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2290:	b510      	push	{r4, lr}
    2292:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2294:	4b06      	ldr	r3, [pc, #24]	; (22b0 <system_gclk_chan_enable+0x20>)
    2296:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2298:	4b06      	ldr	r3, [pc, #24]	; (22b4 <system_gclk_chan_enable+0x24>)
    229a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    229c:	4a06      	ldr	r2, [pc, #24]	; (22b8 <system_gclk_chan_enable+0x28>)
    229e:	8851      	ldrh	r1, [r2, #2]
    22a0:	2380      	movs	r3, #128	; 0x80
    22a2:	01db      	lsls	r3, r3, #7
    22a4:	430b      	orrs	r3, r1
    22a6:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    22a8:	4b04      	ldr	r3, [pc, #16]	; (22bc <system_gclk_chan_enable+0x2c>)
    22aa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    22ac:	bd10      	pop	{r4, pc}
    22ae:	46c0      	nop			; (mov r8, r8)
    22b0:	000009ed 	.word	0x000009ed
    22b4:	40000c02 	.word	0x40000c02
    22b8:	40000c00 	.word	0x40000c00
    22bc:	00000a2d 	.word	0x00000a2d

000022c0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    22c0:	b510      	push	{r4, lr}
    22c2:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    22c4:	4b0f      	ldr	r3, [pc, #60]	; (2304 <system_gclk_chan_disable+0x44>)
    22c6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    22c8:	4b0f      	ldr	r3, [pc, #60]	; (2308 <system_gclk_chan_disable+0x48>)
    22ca:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    22cc:	4b0f      	ldr	r3, [pc, #60]	; (230c <system_gclk_chan_disable+0x4c>)
    22ce:	885a      	ldrh	r2, [r3, #2]
    22d0:	0512      	lsls	r2, r2, #20
    22d2:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    22d4:	8859      	ldrh	r1, [r3, #2]
    22d6:	4a0e      	ldr	r2, [pc, #56]	; (2310 <system_gclk_chan_disable+0x50>)
    22d8:	400a      	ands	r2, r1
    22da:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    22dc:	8859      	ldrh	r1, [r3, #2]
    22de:	4a0d      	ldr	r2, [pc, #52]	; (2314 <system_gclk_chan_disable+0x54>)
    22e0:	400a      	ands	r2, r1
    22e2:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    22e4:	0019      	movs	r1, r3
    22e6:	2280      	movs	r2, #128	; 0x80
    22e8:	01d2      	lsls	r2, r2, #7
    22ea:	884b      	ldrh	r3, [r1, #2]
    22ec:	4213      	tst	r3, r2
    22ee:	d1fc      	bne.n	22ea <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    22f0:	4906      	ldr	r1, [pc, #24]	; (230c <system_gclk_chan_disable+0x4c>)
    22f2:	884c      	ldrh	r4, [r1, #2]
    22f4:	0202      	lsls	r2, r0, #8
    22f6:	4b06      	ldr	r3, [pc, #24]	; (2310 <system_gclk_chan_disable+0x50>)
    22f8:	4023      	ands	r3, r4
    22fa:	4313      	orrs	r3, r2
    22fc:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    22fe:	4b06      	ldr	r3, [pc, #24]	; (2318 <system_gclk_chan_disable+0x58>)
    2300:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2302:	bd10      	pop	{r4, pc}
    2304:	000009ed 	.word	0x000009ed
    2308:	40000c02 	.word	0x40000c02
    230c:	40000c00 	.word	0x40000c00
    2310:	fffff0ff 	.word	0xfffff0ff
    2314:	ffffbfff 	.word	0xffffbfff
    2318:	00000a2d 	.word	0x00000a2d

0000231c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    231c:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    231e:	780c      	ldrb	r4, [r1, #0]
    2320:	0224      	lsls	r4, r4, #8
    2322:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    2324:	4b02      	ldr	r3, [pc, #8]	; (2330 <system_gclk_chan_set_config+0x14>)
    2326:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2328:	b2a4      	uxth	r4, r4
    232a:	4b02      	ldr	r3, [pc, #8]	; (2334 <system_gclk_chan_set_config+0x18>)
    232c:	805c      	strh	r4, [r3, #2]
}
    232e:	bd10      	pop	{r4, pc}
    2330:	000022c1 	.word	0x000022c1
    2334:	40000c00 	.word	0x40000c00

00002338 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2338:	b510      	push	{r4, lr}
    233a:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    233c:	4b06      	ldr	r3, [pc, #24]	; (2358 <system_gclk_chan_get_hz+0x20>)
    233e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2340:	4b06      	ldr	r3, [pc, #24]	; (235c <system_gclk_chan_get_hz+0x24>)
    2342:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2344:	4b06      	ldr	r3, [pc, #24]	; (2360 <system_gclk_chan_get_hz+0x28>)
    2346:	885c      	ldrh	r4, [r3, #2]
    2348:	0524      	lsls	r4, r4, #20
    234a:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    234c:	4b05      	ldr	r3, [pc, #20]	; (2364 <system_gclk_chan_get_hz+0x2c>)
    234e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2350:	0020      	movs	r0, r4
    2352:	4b05      	ldr	r3, [pc, #20]	; (2368 <system_gclk_chan_get_hz+0x30>)
    2354:	4798      	blx	r3
}
    2356:	bd10      	pop	{r4, pc}
    2358:	000009ed 	.word	0x000009ed
    235c:	40000c02 	.word	0x40000c02
    2360:	40000c00 	.word	0x40000c00
    2364:	00000a2d 	.word	0x00000a2d
    2368:	00002205 	.word	0x00002205

0000236c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    236c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    236e:	78d3      	ldrb	r3, [r2, #3]
    2370:	2b00      	cmp	r3, #0
    2372:	d11e      	bne.n	23b2 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2374:	7813      	ldrb	r3, [r2, #0]
    2376:	2b80      	cmp	r3, #128	; 0x80
    2378:	d004      	beq.n	2384 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    237a:	061b      	lsls	r3, r3, #24
    237c:	2480      	movs	r4, #128	; 0x80
    237e:	0264      	lsls	r4, r4, #9
    2380:	4323      	orrs	r3, r4
    2382:	e000      	b.n	2386 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    2384:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2386:	7854      	ldrb	r4, [r2, #1]
    2388:	2502      	movs	r5, #2
    238a:	43ac      	bics	r4, r5
    238c:	d10a      	bne.n	23a4 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    238e:	7894      	ldrb	r4, [r2, #2]
    2390:	2c00      	cmp	r4, #0
    2392:	d103      	bne.n	239c <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    2394:	2480      	movs	r4, #128	; 0x80
    2396:	02a4      	lsls	r4, r4, #10
    2398:	4323      	orrs	r3, r4
    239a:	e002      	b.n	23a2 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    239c:	24c0      	movs	r4, #192	; 0xc0
    239e:	02e4      	lsls	r4, r4, #11
    23a0:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    23a2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    23a4:	7854      	ldrb	r4, [r2, #1]
    23a6:	3c01      	subs	r4, #1
    23a8:	2c01      	cmp	r4, #1
    23aa:	d812      	bhi.n	23d2 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    23ac:	4c18      	ldr	r4, [pc, #96]	; (2410 <_system_pinmux_config+0xa4>)
    23ae:	4023      	ands	r3, r4
    23b0:	e00f      	b.n	23d2 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    23b2:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    23b4:	040b      	lsls	r3, r1, #16
    23b6:	0c1b      	lsrs	r3, r3, #16
    23b8:	24a0      	movs	r4, #160	; 0xa0
    23ba:	05e4      	lsls	r4, r4, #23
    23bc:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    23be:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    23c0:	0c0b      	lsrs	r3, r1, #16
    23c2:	24d0      	movs	r4, #208	; 0xd0
    23c4:	0624      	lsls	r4, r4, #24
    23c6:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    23c8:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    23ca:	78d3      	ldrb	r3, [r2, #3]
    23cc:	2b00      	cmp	r3, #0
    23ce:	d018      	beq.n	2402 <_system_pinmux_config+0x96>
    23d0:	e01c      	b.n	240c <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    23d2:	040c      	lsls	r4, r1, #16
    23d4:	0c24      	lsrs	r4, r4, #16
    23d6:	25a0      	movs	r5, #160	; 0xa0
    23d8:	05ed      	lsls	r5, r5, #23
    23da:	432c      	orrs	r4, r5
    23dc:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    23de:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    23e0:	0c0c      	lsrs	r4, r1, #16
    23e2:	25d0      	movs	r5, #208	; 0xd0
    23e4:	062d      	lsls	r5, r5, #24
    23e6:	432c      	orrs	r4, r5
    23e8:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    23ea:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    23ec:	78d4      	ldrb	r4, [r2, #3]
    23ee:	2c00      	cmp	r4, #0
    23f0:	d10c      	bne.n	240c <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    23f2:	035b      	lsls	r3, r3, #13
    23f4:	d505      	bpl.n	2402 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    23f6:	7893      	ldrb	r3, [r2, #2]
    23f8:	2b01      	cmp	r3, #1
    23fa:	d101      	bne.n	2400 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    23fc:	6181      	str	r1, [r0, #24]
    23fe:	e000      	b.n	2402 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    2400:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2402:	7853      	ldrb	r3, [r2, #1]
    2404:	3b01      	subs	r3, #1
    2406:	2b01      	cmp	r3, #1
    2408:	d800      	bhi.n	240c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    240a:	6081      	str	r1, [r0, #8]
		}
	}
}
    240c:	bd30      	pop	{r4, r5, pc}
    240e:	46c0      	nop			; (mov r8, r8)
    2410:	fffbffff 	.word	0xfffbffff

00002414 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2414:	b510      	push	{r4, lr}
    2416:	0003      	movs	r3, r0
    2418:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    241a:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    241c:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    241e:	2900      	cmp	r1, #0
    2420:	d104      	bne.n	242c <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    2422:	0958      	lsrs	r0, r3, #5
    2424:	01c0      	lsls	r0, r0, #7
    2426:	4905      	ldr	r1, [pc, #20]	; (243c <system_pinmux_pin_set_config+0x28>)
    2428:	468c      	mov	ip, r1
    242a:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    242c:	211f      	movs	r1, #31
    242e:	400b      	ands	r3, r1
    2430:	391e      	subs	r1, #30
    2432:	4099      	lsls	r1, r3
    2434:	4b02      	ldr	r3, [pc, #8]	; (2440 <system_pinmux_pin_set_config+0x2c>)
    2436:	4798      	blx	r3
}
    2438:	bd10      	pop	{r4, pc}
    243a:	46c0      	nop			; (mov r8, r8)
    243c:	41004400 	.word	0x41004400
    2440:	0000236d 	.word	0x0000236d

00002444 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2444:	4770      	bx	lr
    2446:	46c0      	nop			; (mov r8, r8)

00002448 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2448:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    244a:	4b05      	ldr	r3, [pc, #20]	; (2460 <system_init+0x18>)
    244c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    244e:	4b05      	ldr	r3, [pc, #20]	; (2464 <system_init+0x1c>)
    2450:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2452:	4b05      	ldr	r3, [pc, #20]	; (2468 <system_init+0x20>)
    2454:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2456:	4b05      	ldr	r3, [pc, #20]	; (246c <system_init+0x24>)
    2458:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    245a:	4b05      	ldr	r3, [pc, #20]	; (2470 <system_init+0x28>)
    245c:	4798      	blx	r3
}
    245e:	bd10      	pop	{r4, pc}
    2460:	00001ef5 	.word	0x00001ef5
    2464:	00000a5d 	.word	0x00000a5d
    2468:	00002445 	.word	0x00002445
    246c:	00000bd9 	.word	0x00000bd9
    2470:	00002445 	.word	0x00002445

00002474 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2474:	1c93      	adds	r3, r2, #2
    2476:	009b      	lsls	r3, r3, #2
    2478:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    247a:	2a02      	cmp	r2, #2
    247c:	d104      	bne.n	2488 <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    247e:	7e02      	ldrb	r2, [r0, #24]
    2480:	2310      	movs	r3, #16
    2482:	4313      	orrs	r3, r2
    2484:	7603      	strb	r3, [r0, #24]
    2486:	e00b      	b.n	24a0 <tc_register_callback+0x2c>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    2488:	2a03      	cmp	r2, #3
    248a:	d104      	bne.n	2496 <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    248c:	7e02      	ldrb	r2, [r0, #24]
    248e:	2320      	movs	r3, #32
    2490:	4313      	orrs	r3, r2
    2492:	7603      	strb	r3, [r0, #24]
    2494:	e004      	b.n	24a0 <tc_register_callback+0x2c>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    2496:	2301      	movs	r3, #1
    2498:	4093      	lsls	r3, r2
    249a:	7e02      	ldrb	r2, [r0, #24]
    249c:	4313      	orrs	r3, r2
    249e:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    24a0:	2000      	movs	r0, #0
    24a2:	4770      	bx	lr

000024a4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    24a4:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    24a6:	0080      	lsls	r0, r0, #2
    24a8:	4b14      	ldr	r3, [pc, #80]	; (24fc <_tc_interrupt_handler+0x58>)
    24aa:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    24ac:	682b      	ldr	r3, [r5, #0]
    24ae:	7b9c      	ldrb	r4, [r3, #14]
    24b0:	7e2b      	ldrb	r3, [r5, #24]
    24b2:	401c      	ands	r4, r3
    24b4:	7e6b      	ldrb	r3, [r5, #25]
    24b6:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    24b8:	07e3      	lsls	r3, r4, #31
    24ba:	d505      	bpl.n	24c8 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    24bc:	0028      	movs	r0, r5
    24be:	68ab      	ldr	r3, [r5, #8]
    24c0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    24c2:	2301      	movs	r3, #1
    24c4:	682a      	ldr	r2, [r5, #0]
    24c6:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    24c8:	07a3      	lsls	r3, r4, #30
    24ca:	d505      	bpl.n	24d8 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    24cc:	0028      	movs	r0, r5
    24ce:	68eb      	ldr	r3, [r5, #12]
    24d0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    24d2:	2302      	movs	r3, #2
    24d4:	682a      	ldr	r2, [r5, #0]
    24d6:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    24d8:	06e3      	lsls	r3, r4, #27
    24da:	d505      	bpl.n	24e8 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    24dc:	0028      	movs	r0, r5
    24de:	692b      	ldr	r3, [r5, #16]
    24e0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    24e2:	2310      	movs	r3, #16
    24e4:	682a      	ldr	r2, [r5, #0]
    24e6:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    24e8:	06a3      	lsls	r3, r4, #26
    24ea:	d505      	bpl.n	24f8 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    24ec:	0028      	movs	r0, r5
    24ee:	696b      	ldr	r3, [r5, #20]
    24f0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    24f2:	682b      	ldr	r3, [r5, #0]
    24f4:	2220      	movs	r2, #32
    24f6:	739a      	strb	r2, [r3, #14]
	}
}
    24f8:	bd70      	pop	{r4, r5, r6, pc}
    24fa:	46c0      	nop			; (mov r8, r8)
    24fc:	200007e0 	.word	0x200007e0

00002500 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    2500:	b510      	push	{r4, lr}
    2502:	2000      	movs	r0, #0
    2504:	4b01      	ldr	r3, [pc, #4]	; (250c <TC3_Handler+0xc>)
    2506:	4798      	blx	r3
    2508:	bd10      	pop	{r4, pc}
    250a:	46c0      	nop			; (mov r8, r8)
    250c:	000024a5 	.word	0x000024a5

00002510 <TC4_Handler>:
    2510:	b510      	push	{r4, lr}
    2512:	2001      	movs	r0, #1
    2514:	4b01      	ldr	r3, [pc, #4]	; (251c <TC4_Handler+0xc>)
    2516:	4798      	blx	r3
    2518:	bd10      	pop	{r4, pc}
    251a:	46c0      	nop			; (mov r8, r8)
    251c:	000024a5 	.word	0x000024a5

00002520 <TC5_Handler>:
    2520:	b510      	push	{r4, lr}
    2522:	2002      	movs	r0, #2
    2524:	4b01      	ldr	r3, [pc, #4]	; (252c <TC5_Handler+0xc>)
    2526:	4798      	blx	r3
    2528:	bd10      	pop	{r4, pc}
    252a:	46c0      	nop			; (mov r8, r8)
    252c:	000024a5 	.word	0x000024a5

00002530 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    2530:	b530      	push	{r4, r5, lr}
    2532:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2534:	aa01      	add	r2, sp, #4
    2536:	4b0b      	ldr	r3, [pc, #44]	; (2564 <_tc_get_inst_index+0x34>)
    2538:	cb32      	ldmia	r3!, {r1, r4, r5}
    253a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    253c:	9b01      	ldr	r3, [sp, #4]
    253e:	4298      	cmp	r0, r3
    2540:	d00a      	beq.n	2558 <_tc_get_inst_index+0x28>
    2542:	9b02      	ldr	r3, [sp, #8]
    2544:	4298      	cmp	r0, r3
    2546:	d005      	beq.n	2554 <_tc_get_inst_index+0x24>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    2548:	2300      	movs	r3, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    254a:	9a03      	ldr	r2, [sp, #12]
    254c:	4282      	cmp	r2, r0
    254e:	d105      	bne.n	255c <_tc_get_inst_index+0x2c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2550:	3302      	adds	r3, #2
    2552:	e002      	b.n	255a <_tc_get_inst_index+0x2a>
    2554:	2301      	movs	r3, #1
    2556:	e000      	b.n	255a <_tc_get_inst_index+0x2a>
    2558:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
    255a:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    255c:	0018      	movs	r0, r3
    255e:	b005      	add	sp, #20
    2560:	bd30      	pop	{r4, r5, pc}
    2562:	46c0      	nop			; (mov r8, r8)
    2564:	00008b98 	.word	0x00008b98

00002568 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    2568:	b5f0      	push	{r4, r5, r6, r7, lr}
    256a:	464f      	mov	r7, r9
    256c:	4646      	mov	r6, r8
    256e:	b4c0      	push	{r6, r7}
    2570:	b087      	sub	sp, #28
    2572:	0004      	movs	r4, r0
    2574:	000e      	movs	r6, r1
    2576:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    2578:	0008      	movs	r0, r1
    257a:	4b92      	ldr	r3, [pc, #584]	; (27c4 <tc_init+0x25c>)
    257c:	4798      	blx	r3
    257e:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    2580:	4d91      	ldr	r5, [pc, #580]	; (27c8 <tc_init+0x260>)
    2582:	0029      	movs	r1, r5
    2584:	310c      	adds	r1, #12
    2586:	2203      	movs	r2, #3
    2588:	a805      	add	r0, sp, #20
    258a:	4f90      	ldr	r7, [pc, #576]	; (27cc <tc_init+0x264>)
    258c:	47b8      	blx	r7
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    258e:	0029      	movs	r1, r5
    2590:	3110      	adds	r1, #16
    2592:	2206      	movs	r2, #6
    2594:	a803      	add	r0, sp, #12
    2596:	47b8      	blx	r7
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    2598:	2300      	movs	r3, #0
    259a:	60a3      	str	r3, [r4, #8]
    259c:	60e3      	str	r3, [r4, #12]
    259e:	6123      	str	r3, [r4, #16]
    25a0:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    25a2:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    25a4:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    25a6:	464b      	mov	r3, r9
    25a8:	009a      	lsls	r2, r3, #2
    25aa:	4b89      	ldr	r3, [pc, #548]	; (27d0 <tc_init+0x268>)
    25ac:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    25ae:	6026      	str	r6, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    25b0:	4643      	mov	r3, r8
    25b2:	789b      	ldrb	r3, [r3, #2]
    25b4:	2b08      	cmp	r3, #8
    25b6:	d104      	bne.n	25c2 <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    25b8:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    25ba:	464a      	mov	r2, r9
    25bc:	07d2      	lsls	r2, r2, #31
    25be:	d400      	bmi.n	25c2 <tc_init+0x5a>
    25c0:	e0fb      	b.n	27ba <tc_init+0x252>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    25c2:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    25c4:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    25c6:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    25c8:	07db      	lsls	r3, r3, #31
    25ca:	d500      	bpl.n	25ce <tc_init+0x66>
    25cc:	e0f5      	b.n	27ba <tc_init+0x252>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    25ce:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    25d0:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    25d2:	06db      	lsls	r3, r3, #27
    25d4:	d500      	bpl.n	25d8 <tc_init+0x70>
    25d6:	e0f0      	b.n	27ba <tc_init+0x252>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    25d8:	8833      	ldrh	r3, [r6, #0]
    25da:	079b      	lsls	r3, r3, #30
    25dc:	d500      	bpl.n	25e0 <tc_init+0x78>
    25de:	e0ec      	b.n	27ba <tc_init+0x252>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    25e0:	4643      	mov	r3, r8
    25e2:	7c1b      	ldrb	r3, [r3, #16]
    25e4:	2b00      	cmp	r3, #0
    25e6:	d00c      	beq.n	2602 <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    25e8:	a902      	add	r1, sp, #8
    25ea:	2301      	movs	r3, #1
    25ec:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    25ee:	2200      	movs	r2, #0
    25f0:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    25f2:	4642      	mov	r2, r8
    25f4:	7e12      	ldrb	r2, [r2, #24]
    25f6:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    25f8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    25fa:	4643      	mov	r3, r8
    25fc:	7d18      	ldrb	r0, [r3, #20]
    25fe:	4b75      	ldr	r3, [pc, #468]	; (27d4 <tc_init+0x26c>)
    2600:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    2602:	4643      	mov	r3, r8
    2604:	7f1b      	ldrb	r3, [r3, #28]
    2606:	2b00      	cmp	r3, #0
    2608:	d00d      	beq.n	2626 <tc_init+0xbe>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    260a:	a902      	add	r1, sp, #8
    260c:	2301      	movs	r3, #1
    260e:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2610:	2200      	movs	r2, #0
    2612:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    2614:	4642      	mov	r2, r8
    2616:	6a52      	ldr	r2, [r2, #36]	; 0x24
    2618:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    261a:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    261c:	4643      	mov	r3, r8
    261e:	6a1b      	ldr	r3, [r3, #32]
    2620:	b2d8      	uxtb	r0, r3
    2622:	4b6c      	ldr	r3, [pc, #432]	; (27d4 <tc_init+0x26c>)
    2624:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2626:	496c      	ldr	r1, [pc, #432]	; (27d8 <tc_init+0x270>)
    2628:	6a0b      	ldr	r3, [r1, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    262a:	464a      	mov	r2, r9
    262c:	0052      	lsls	r2, r2, #1
    262e:	a803      	add	r0, sp, #12
    2630:	5a12      	ldrh	r2, [r2, r0]
    2632:	4313      	orrs	r3, r2
    2634:	620b      	str	r3, [r1, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    2636:	4643      	mov	r3, r8
    2638:	789b      	ldrb	r3, [r3, #2]
    263a:	2b08      	cmp	r3, #8
    263c:	d106      	bne.n	264c <tc_init+0xe4>
    263e:	6a0b      	ldr	r3, [r1, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    2640:	464a      	mov	r2, r9
    2642:	3201      	adds	r2, #1
    2644:	0052      	lsls	r2, r2, #1
    2646:	5a12      	ldrh	r2, [r2, r0]
    2648:	4313      	orrs	r3, r2
    264a:	620b      	str	r3, [r1, #32]
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    264c:	a901      	add	r1, sp, #4
    264e:	4643      	mov	r3, r8
    2650:	781b      	ldrb	r3, [r3, #0]
    2652:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    2654:	ab05      	add	r3, sp, #20
    2656:	464a      	mov	r2, r9
    2658:	5c9d      	ldrb	r5, [r3, r2]
    265a:	0028      	movs	r0, r5
    265c:	4b5f      	ldr	r3, [pc, #380]	; (27dc <tc_init+0x274>)
    265e:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    2660:	0028      	movs	r0, r5
    2662:	4b5f      	ldr	r3, [pc, #380]	; (27e0 <tc_init+0x278>)
    2664:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    2666:	4643      	mov	r3, r8
    2668:	7898      	ldrb	r0, [r3, #2]
    266a:	799b      	ldrb	r3, [r3, #6]
    266c:	0002      	movs	r2, r0
    266e:	431a      	orrs	r2, r3
    2670:	4643      	mov	r3, r8
    2672:	8918      	ldrh	r0, [r3, #8]
    2674:	889b      	ldrh	r3, [r3, #4]
    2676:	4303      	orrs	r3, r0
    2678:	431a      	orrs	r2, r3
    267a:	0010      	movs	r0, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    267c:	4643      	mov	r3, r8
    267e:	785b      	ldrb	r3, [r3, #1]
    2680:	2b00      	cmp	r3, #0
    2682:	d002      	beq.n	268a <tc_init+0x122>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    2684:	2380      	movs	r3, #128	; 0x80
    2686:	011b      	lsls	r3, r3, #4
    2688:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    268a:	6821      	ldr	r1, [r4, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    268c:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    268e:	7bcb      	ldrb	r3, [r1, #15]
    2690:	4393      	bics	r3, r2
    2692:	d1fc      	bne.n	268e <tc_init+0x126>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    2694:	8030      	strh	r0, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    2696:	4643      	mov	r3, r8
    2698:	7b58      	ldrb	r0, [r3, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    269a:	1e43      	subs	r3, r0, #1
    269c:	4198      	sbcs	r0, r3
    269e:	0080      	lsls	r0, r0, #2
	}

	if (config->count_direction) {
    26a0:	4643      	mov	r3, r8
    26a2:	7b9b      	ldrb	r3, [r3, #14]
    26a4:	2b00      	cmp	r3, #0
    26a6:	d001      	beq.n	26ac <tc_init+0x144>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    26a8:	2301      	movs	r3, #1
    26aa:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26ac:	6821      	ldr	r1, [r4, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    26ae:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26b0:	7bcb      	ldrb	r3, [r1, #15]
    26b2:	4393      	bics	r3, r2
    26b4:	d1fc      	bne.n	26b0 <tc_init+0x148>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    26b6:	33ff      	adds	r3, #255	; 0xff
    26b8:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    26ba:	2800      	cmp	r0, #0
    26bc:	d005      	beq.n	26ca <tc_init+0x162>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26be:	6821      	ldr	r1, [r4, #0]
		while (tc_is_syncing(module_inst)) {
    26c0:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26c2:	7bcb      	ldrb	r3, [r1, #15]
    26c4:	4393      	bics	r3, r2
    26c6:	d1fc      	bne.n	26c2 <tc_init+0x15a>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    26c8:	7170      	strb	r0, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    26ca:	4643      	mov	r3, r8
    26cc:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    26ce:	7adb      	ldrb	r3, [r3, #11]
    26d0:	2b00      	cmp	r3, #0
    26d2:	d001      	beq.n	26d8 <tc_init+0x170>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    26d4:	2310      	movs	r3, #16
    26d6:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    26d8:	4643      	mov	r3, r8
    26da:	7b1b      	ldrb	r3, [r3, #12]
    26dc:	2b00      	cmp	r3, #0
    26de:	d001      	beq.n	26e4 <tc_init+0x17c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    26e0:	2320      	movs	r3, #32
    26e2:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26e4:	6821      	ldr	r1, [r4, #0]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    26e6:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26e8:	7bcb      	ldrb	r3, [r1, #15]
    26ea:	4393      	bics	r3, r2
    26ec:	d1fc      	bne.n	26e8 <tc_init+0x180>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    26ee:	71b0      	strb	r0, [r6, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26f0:	6822      	ldr	r2, [r4, #0]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    26f2:	217f      	movs	r1, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26f4:	7bd3      	ldrb	r3, [r2, #15]
    26f6:	438b      	bics	r3, r1
    26f8:	d1fc      	bne.n	26f4 <tc_init+0x18c>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    26fa:	7923      	ldrb	r3, [r4, #4]
    26fc:	2b04      	cmp	r3, #4
    26fe:	d005      	beq.n	270c <tc_init+0x1a4>
    2700:	2b08      	cmp	r3, #8
    2702:	d041      	beq.n	2788 <tc_init+0x220>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    2704:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    2706:	2b00      	cmp	r3, #0
    2708:	d157      	bne.n	27ba <tc_init+0x252>
    270a:	e024      	b.n	2756 <tc_init+0x1ee>
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    270c:	217f      	movs	r1, #127	; 0x7f
    270e:	7bd3      	ldrb	r3, [r2, #15]
    2710:	438b      	bics	r3, r1
    2712:	d1fc      	bne.n	270e <tc_init+0x1a6>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    2714:	3328      	adds	r3, #40	; 0x28
    2716:	4642      	mov	r2, r8
    2718:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    271a:	7433      	strb	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    271c:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    271e:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2720:	7bcb      	ldrb	r3, [r1, #15]
    2722:	4393      	bics	r3, r2
    2724:	d1fc      	bne.n	2720 <tc_init+0x1b8>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    2726:	3329      	adds	r3, #41	; 0x29
    2728:	4642      	mov	r2, r8
    272a:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    272c:	7533      	strb	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    272e:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    2730:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2732:	7bcb      	ldrb	r3, [r1, #15]
    2734:	4393      	bics	r3, r2
    2736:	d1fc      	bne.n	2732 <tc_init+0x1ca>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    2738:	332a      	adds	r3, #42	; 0x2a
    273a:	4642      	mov	r2, r8
    273c:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    273e:	7633      	strb	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2740:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    2742:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2744:	7bcb      	ldrb	r3, [r1, #15]
    2746:	4393      	bics	r3, r2
    2748:	d1fc      	bne.n	2744 <tc_init+0x1dc>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    274a:	332b      	adds	r3, #43	; 0x2b
    274c:	4642      	mov	r2, r8
    274e:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    2750:	7673      	strb	r3, [r6, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    2752:	2000      	movs	r0, #0
    2754:	e031      	b.n	27ba <tc_init+0x252>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    2756:	217f      	movs	r1, #127	; 0x7f
    2758:	7bd3      	ldrb	r3, [r2, #15]
    275a:	438b      	bics	r3, r1
    275c:	d1fc      	bne.n	2758 <tc_init+0x1f0>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    275e:	4643      	mov	r3, r8
    2760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2762:	8233      	strh	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2764:	6821      	ldr	r1, [r4, #0]

			while (tc_is_syncing(module_inst)) {
    2766:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2768:	7bcb      	ldrb	r3, [r1, #15]
    276a:	4393      	bics	r3, r2
    276c:	d1fc      	bne.n	2768 <tc_init+0x200>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    276e:	4643      	mov	r3, r8
    2770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    2772:	8333      	strh	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2774:	6821      	ldr	r1, [r4, #0]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    2776:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2778:	7bcb      	ldrb	r3, [r1, #15]
    277a:	4393      	bics	r3, r2
    277c:	d1fc      	bne.n	2778 <tc_init+0x210>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    277e:	4643      	mov	r3, r8
    2780:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    2782:	8373      	strh	r3, [r6, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    2784:	2000      	movs	r0, #0
    2786:	e018      	b.n	27ba <tc_init+0x252>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    2788:	217f      	movs	r1, #127	; 0x7f
    278a:	7bd3      	ldrb	r3, [r2, #15]
    278c:	438b      	bics	r3, r1
    278e:	d1fc      	bne.n	278a <tc_init+0x222>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    2790:	4643      	mov	r3, r8
    2792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2794:	6133      	str	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2796:	6821      	ldr	r1, [r4, #0]

			while (tc_is_syncing(module_inst)) {
    2798:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    279a:	7bcb      	ldrb	r3, [r1, #15]
    279c:	4393      	bics	r3, r2
    279e:	d1fc      	bne.n	279a <tc_init+0x232>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    27a0:	4643      	mov	r3, r8
    27a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    27a4:	61b3      	str	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    27a6:	6821      	ldr	r1, [r4, #0]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    27a8:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    27aa:	7bcb      	ldrb	r3, [r1, #15]
    27ac:	4393      	bics	r3, r2
    27ae:	d1fc      	bne.n	27aa <tc_init+0x242>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    27b0:	4643      	mov	r3, r8
    27b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    27b4:	61f3      	str	r3, [r6, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    27b6:	2000      	movs	r0, #0
    27b8:	e7ff      	b.n	27ba <tc_init+0x252>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    27ba:	b007      	add	sp, #28
    27bc:	bc0c      	pop	{r2, r3}
    27be:	4690      	mov	r8, r2
    27c0:	4699      	mov	r9, r3
    27c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27c4:	00002531 	.word	0x00002531
    27c8:	00008b98 	.word	0x00008b98
    27cc:	000035f1 	.word	0x000035f1
    27d0:	200007e0 	.word	0x200007e0
    27d4:	00002415 	.word	0x00002415
    27d8:	40000400 	.word	0x40000400
    27dc:	0000231d 	.word	0x0000231d
    27e0:	00002291 	.word	0x00002291

000027e4 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    27e4:	6802      	ldr	r2, [r0, #0]

	while (tc_is_syncing(module_inst)) {
    27e6:	217f      	movs	r1, #127	; 0x7f
    27e8:	7bd3      	ldrb	r3, [r2, #15]
    27ea:	438b      	bics	r3, r1
    27ec:	d1fc      	bne.n	27e8 <tc_get_count_value+0x4>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    27ee:	7903      	ldrb	r3, [r0, #4]
    27f0:	2b04      	cmp	r3, #4
    27f2:	d005      	beq.n	2800 <tc_get_count_value+0x1c>
    27f4:	2b08      	cmp	r3, #8
    27f6:	d009      	beq.n	280c <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    27f8:	2000      	movs	r0, #0
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    27fa:	2b00      	cmp	r3, #0
    27fc:	d108      	bne.n	2810 <tc_get_count_value+0x2c>
    27fe:	e002      	b.n	2806 <tc_get_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    2800:	7c10      	ldrb	r0, [r2, #16]
    2802:	b2c0      	uxtb	r0, r0
    2804:	e004      	b.n	2810 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    2806:	8a10      	ldrh	r0, [r2, #16]
    2808:	b280      	uxth	r0, r0
    280a:	e001      	b.n	2810 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    280c:	6910      	ldr	r0, [r2, #16]
    280e:	e7ff      	b.n	2810 <tc_get_count_value+0x2c>
	}

	Assert(false);
	return 0;
}
    2810:	4770      	bx	lr
    2812:	46c0      	nop			; (mov r8, r8)

00002814 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    2814:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    2816:	6804      	ldr	r4, [r0, #0]

	while (tc_is_syncing(module_inst)) {
    2818:	257f      	movs	r5, #127	; 0x7f
    281a:	7be3      	ldrb	r3, [r4, #15]
    281c:	43ab      	bics	r3, r5
    281e:	d1fc      	bne.n	281a <tc_set_compare_value+0x6>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    2820:	7903      	ldrb	r3, [r0, #4]
    2822:	2b04      	cmp	r3, #4
    2824:	d005      	beq.n	2832 <tc_set_compare_value+0x1e>
    2826:	2b08      	cmp	r3, #8
    2828:	d014      	beq.n	2854 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    282a:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    282c:	2b00      	cmp	r3, #0
    282e:	d119      	bne.n	2864 <tc_set_compare_value+0x50>
    2830:	e007      	b.n	2842 <tc_set_compare_value+0x2e>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    2832:	2017      	movs	r0, #23
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    2834:	2901      	cmp	r1, #1
    2836:	d815      	bhi.n	2864 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
						(uint8_t)compare;
    2838:	b2d2      	uxtb	r2, r2
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
    283a:	1861      	adds	r1, r4, r1
    283c:	760a      	strb	r2, [r1, #24]
						(uint8_t)compare;
				return STATUS_OK;
    283e:	2000      	movs	r0, #0
    2840:	e010      	b.n	2864 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    2842:	2017      	movs	r0, #23
						(uint8_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    2844:	2901      	cmp	r1, #1
    2846:	d80d      	bhi.n	2864 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
						(uint16_t)compare;
    2848:	b292      	uxth	r2, r2
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
    284a:	310c      	adds	r1, #12
    284c:	0049      	lsls	r1, r1, #1
    284e:	530a      	strh	r2, [r1, r4]
						(uint16_t)compare;
				return STATUS_OK;
    2850:	2000      	movs	r0, #0
    2852:	e007      	b.n	2864 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    2854:	2017      	movs	r0, #23
						(uint16_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    2856:	2901      	cmp	r1, #1
    2858:	d804      	bhi.n	2864 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
    285a:	3106      	adds	r1, #6
    285c:	0089      	lsls	r1, r1, #2
    285e:	510a      	str	r2, [r1, r4]
						(uint32_t)compare;
				return STATUS_OK;
    2860:	2000      	movs	r0, #0
    2862:	e7ff      	b.n	2864 <tc_set_compare_value+0x50>
			}
	}

	return STATUS_ERR_INVALID_ARG;
}
    2864:	bd30      	pop	{r4, r5, pc}
    2866:	46c0      	nop			; (mov r8, r8)

00002868 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2868:	e7fe      	b.n	2868 <Dummy_Handler>
    286a:	46c0      	nop			; (mov r8, r8)

0000286c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    286c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    286e:	4b2e      	ldr	r3, [pc, #184]	; (2928 <Reset_Handler+0xbc>)
    2870:	4a2e      	ldr	r2, [pc, #184]	; (292c <Reset_Handler+0xc0>)
    2872:	429a      	cmp	r2, r3
    2874:	d003      	beq.n	287e <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    2876:	4b2e      	ldr	r3, [pc, #184]	; (2930 <Reset_Handler+0xc4>)
    2878:	4a2b      	ldr	r2, [pc, #172]	; (2928 <Reset_Handler+0xbc>)
    287a:	429a      	cmp	r2, r3
    287c:	d304      	bcc.n	2888 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    287e:	4b2d      	ldr	r3, [pc, #180]	; (2934 <Reset_Handler+0xc8>)
    2880:	4a2d      	ldr	r2, [pc, #180]	; (2938 <Reset_Handler+0xcc>)
    2882:	429a      	cmp	r2, r3
    2884:	d310      	bcc.n	28a8 <Reset_Handler+0x3c>
    2886:	e01e      	b.n	28c6 <Reset_Handler+0x5a>
    2888:	4a2c      	ldr	r2, [pc, #176]	; (293c <Reset_Handler+0xd0>)
    288a:	4b29      	ldr	r3, [pc, #164]	; (2930 <Reset_Handler+0xc4>)
    288c:	3303      	adds	r3, #3
    288e:	1a9b      	subs	r3, r3, r2
    2890:	089b      	lsrs	r3, r3, #2
    2892:	3301      	adds	r3, #1
    2894:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    2896:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2898:	4823      	ldr	r0, [pc, #140]	; (2928 <Reset_Handler+0xbc>)
    289a:	4924      	ldr	r1, [pc, #144]	; (292c <Reset_Handler+0xc0>)
    289c:	588c      	ldr	r4, [r1, r2]
    289e:	5084      	str	r4, [r0, r2]
    28a0:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    28a2:	429a      	cmp	r2, r3
    28a4:	d1fa      	bne.n	289c <Reset_Handler+0x30>
    28a6:	e7ea      	b.n	287e <Reset_Handler+0x12>
    28a8:	4a25      	ldr	r2, [pc, #148]	; (2940 <Reset_Handler+0xd4>)
    28aa:	4b22      	ldr	r3, [pc, #136]	; (2934 <Reset_Handler+0xc8>)
    28ac:	3303      	adds	r3, #3
    28ae:	1a9b      	subs	r3, r3, r2
    28b0:	089b      	lsrs	r3, r3, #2
    28b2:	3301      	adds	r3, #1
    28b4:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    28b6:	2200      	movs	r2, #0
                *pDest++ = 0;
    28b8:	481f      	ldr	r0, [pc, #124]	; (2938 <Reset_Handler+0xcc>)
    28ba:	2100      	movs	r1, #0
    28bc:	1814      	adds	r4, r2, r0
    28be:	6021      	str	r1, [r4, #0]
    28c0:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    28c2:	429a      	cmp	r2, r3
    28c4:	d1fa      	bne.n	28bc <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    28c6:	4a1f      	ldr	r2, [pc, #124]	; (2944 <Reset_Handler+0xd8>)
    28c8:	21ff      	movs	r1, #255	; 0xff
    28ca:	4b1f      	ldr	r3, [pc, #124]	; (2948 <Reset_Handler+0xdc>)
    28cc:	438b      	bics	r3, r1
    28ce:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    28d0:	39fd      	subs	r1, #253	; 0xfd
    28d2:	2390      	movs	r3, #144	; 0x90
    28d4:	005b      	lsls	r3, r3, #1
    28d6:	4a1d      	ldr	r2, [pc, #116]	; (294c <Reset_Handler+0xe0>)
    28d8:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    28da:	481d      	ldr	r0, [pc, #116]	; (2950 <Reset_Handler+0xe4>)
    28dc:	78c3      	ldrb	r3, [r0, #3]
    28de:	2403      	movs	r4, #3
    28e0:	43a3      	bics	r3, r4
    28e2:	2202      	movs	r2, #2
    28e4:	4313      	orrs	r3, r2
    28e6:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    28e8:	78c3      	ldrb	r3, [r0, #3]
    28ea:	260c      	movs	r6, #12
    28ec:	43b3      	bics	r3, r6
    28ee:	2108      	movs	r1, #8
    28f0:	430b      	orrs	r3, r1
    28f2:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    28f4:	4b17      	ldr	r3, [pc, #92]	; (2954 <Reset_Handler+0xe8>)
    28f6:	7b98      	ldrb	r0, [r3, #14]
    28f8:	2530      	movs	r5, #48	; 0x30
    28fa:	43a8      	bics	r0, r5
    28fc:	0005      	movs	r5, r0
    28fe:	2020      	movs	r0, #32
    2900:	4328      	orrs	r0, r5
    2902:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2904:	7b98      	ldrb	r0, [r3, #14]
    2906:	43b0      	bics	r0, r6
    2908:	4301      	orrs	r1, r0
    290a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    290c:	7b99      	ldrb	r1, [r3, #14]
    290e:	43a1      	bics	r1, r4
    2910:	430a      	orrs	r2, r1
    2912:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    2914:	4a10      	ldr	r2, [pc, #64]	; (2958 <Reset_Handler+0xec>)
    2916:	6851      	ldr	r1, [r2, #4]
    2918:	2380      	movs	r3, #128	; 0x80
    291a:	430b      	orrs	r3, r1
    291c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    291e:	4b0f      	ldr	r3, [pc, #60]	; (295c <Reset_Handler+0xf0>)
    2920:	4798      	blx	r3

        /* Branch to main function */
        main();
    2922:	4b0f      	ldr	r3, [pc, #60]	; (2960 <Reset_Handler+0xf4>)
    2924:	4798      	blx	r3
    2926:	e7fe      	b.n	2926 <Reset_Handler+0xba>
    2928:	20000000 	.word	0x20000000
    292c:	00008ef8 	.word	0x00008ef8
    2930:	200000a8 	.word	0x200000a8
    2934:	20000900 	.word	0x20000900
    2938:	200000a8 	.word	0x200000a8
    293c:	20000004 	.word	0x20000004
    2940:	200000ac 	.word	0x200000ac
    2944:	e000ed00 	.word	0xe000ed00
    2948:	00000000 	.word	0x00000000
    294c:	41007000 	.word	0x41007000
    2950:	41005000 	.word	0x41005000
    2954:	41004800 	.word	0x41004800
    2958:	41004000 	.word	0x41004000
    295c:	000035a5 	.word	0x000035a5
    2960:	0000349d 	.word	0x0000349d

00002964 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2964:	b5f0      	push	{r4, r5, r6, r7, lr}
    2966:	4647      	mov	r7, r8
    2968:	b480      	push	{r7}
    296a:	000c      	movs	r4, r1
    296c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    296e:	2800      	cmp	r0, #0
    2970:	d10d      	bne.n	298e <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
    2972:	2a00      	cmp	r2, #0
    2974:	dd0e      	ble.n	2994 <_read+0x30>
    2976:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2978:	4e08      	ldr	r6, [pc, #32]	; (299c <_read+0x38>)
    297a:	4d09      	ldr	r5, [pc, #36]	; (29a0 <_read+0x3c>)
    297c:	6830      	ldr	r0, [r6, #0]
    297e:	0021      	movs	r1, r4
    2980:	682b      	ldr	r3, [r5, #0]
    2982:	4798      	blx	r3
		ptr++;
    2984:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    2986:	42a7      	cmp	r7, r4
    2988:	d1f8      	bne.n	297c <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    298a:	4640      	mov	r0, r8
    298c:	e003      	b.n	2996 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    298e:	2001      	movs	r0, #1
    2990:	4240      	negs	r0, r0
    2992:	e000      	b.n	2996 <_read+0x32>
	}

	for (; len > 0; --len) {
    2994:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    2996:	bc04      	pop	{r2}
    2998:	4690      	mov	r8, r2
    299a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    299c:	200007f4 	.word	0x200007f4
    29a0:	200007ec 	.word	0x200007ec

000029a4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    29a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    29a6:	4647      	mov	r7, r8
    29a8:	b480      	push	{r7}
    29aa:	000e      	movs	r6, r1
    29ac:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    29ae:	3801      	subs	r0, #1
    29b0:	2802      	cmp	r0, #2
    29b2:	d811      	bhi.n	29d8 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
    29b4:	2a00      	cmp	r2, #0
    29b6:	d012      	beq.n	29de <_write+0x3a>
    29b8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    29ba:	4b0c      	ldr	r3, [pc, #48]	; (29ec <_write+0x48>)
    29bc:	4698      	mov	r8, r3
    29be:	4f0c      	ldr	r7, [pc, #48]	; (29f0 <_write+0x4c>)
    29c0:	4643      	mov	r3, r8
    29c2:	6818      	ldr	r0, [r3, #0]
    29c4:	5d31      	ldrb	r1, [r6, r4]
    29c6:	683b      	ldr	r3, [r7, #0]
    29c8:	4798      	blx	r3
    29ca:	2800      	cmp	r0, #0
    29cc:	db09      	blt.n	29e2 <_write+0x3e>
			return -1;
		}
		++nChars;
    29ce:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    29d0:	42a5      	cmp	r5, r4
    29d2:	d1f5      	bne.n	29c0 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
    29d4:	0020      	movs	r0, r4
    29d6:	e006      	b.n	29e6 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    29d8:	2001      	movs	r0, #1
    29da:	4240      	negs	r0, r0
    29dc:	e003      	b.n	29e6 <_write+0x42>
	}

	for (; len != 0; --len) {
    29de:	2000      	movs	r0, #0
    29e0:	e001      	b.n	29e6 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    29e2:	2001      	movs	r0, #1
    29e4:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    29e6:	bc04      	pop	{r2}
    29e8:	4690      	mov	r8, r2
    29ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29ec:	200007f4 	.word	0x200007f4
    29f0:	200007f0 	.word	0x200007f0

000029f4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    29f4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    29f6:	4a06      	ldr	r2, [pc, #24]	; (2a10 <_sbrk+0x1c>)
    29f8:	6812      	ldr	r2, [r2, #0]
    29fa:	2a00      	cmp	r2, #0
    29fc:	d102      	bne.n	2a04 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    29fe:	4905      	ldr	r1, [pc, #20]	; (2a14 <_sbrk+0x20>)
    2a00:	4a03      	ldr	r2, [pc, #12]	; (2a10 <_sbrk+0x1c>)
    2a02:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    2a04:	4a02      	ldr	r2, [pc, #8]	; (2a10 <_sbrk+0x1c>)
    2a06:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2a08:	18c3      	adds	r3, r0, r3
    2a0a:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2a0c:	4770      	bx	lr
    2a0e:	46c0      	nop			; (mov r8, r8)
    2a10:	20000108 	.word	0x20000108
    2a14:	20002900 	.word	0x20002900

00002a18 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2a18:	2001      	movs	r0, #1
    2a1a:	4240      	negs	r0, r0
    2a1c:	4770      	bx	lr
    2a1e:	46c0      	nop			; (mov r8, r8)

00002a20 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2a20:	2380      	movs	r3, #128	; 0x80
    2a22:	019b      	lsls	r3, r3, #6
    2a24:	604b      	str	r3, [r1, #4]

	return 0;
}
    2a26:	2000      	movs	r0, #0
    2a28:	4770      	bx	lr
    2a2a:	46c0      	nop			; (mov r8, r8)

00002a2c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2a2c:	2001      	movs	r0, #1
    2a2e:	4770      	bx	lr

00002a30 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2a30:	2000      	movs	r0, #0
    2a32:	4770      	bx	lr

00002a34 <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    2a34:	b510      	push	{r4, lr}
	nwkIb.nwkSeqNum = 0;
    2a36:	4a0d      	ldr	r2, [pc, #52]	; (2a6c <NWK_Init+0x38>)
    2a38:	2300      	movs	r3, #0
    2a3a:	7113      	strb	r3, [r2, #4]
	nwkIb.macSeqNum = 0;
    2a3c:	7153      	strb	r3, [r2, #5]
	nwkIb.addr = 0;
    2a3e:	8013      	strh	r3, [r2, #0]
	nwkIb.lock = 0;
    2a40:	2158      	movs	r1, #88	; 0x58
    2a42:	5253      	strh	r3, [r2, r1]
    2a44:	0013      	movs	r3, r2
    2a46:	3240      	adds	r2, #64	; 0x40

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    2a48:	2100      	movs	r1, #0
    2a4a:	6099      	str	r1, [r3, #8]
    2a4c:	3304      	adds	r3, #4
	nwkIb.nwkSeqNum = 0;
	nwkIb.macSeqNum = 0;
	nwkIb.addr = 0;
	nwkIb.lock = 0;

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    2a4e:	4293      	cmp	r3, r2
    2a50:	d1fb      	bne.n	2a4a <NWK_Init+0x16>
		nwkIb.endpoint[i] = NULL;
	}

	nwkTxInit();
    2a52:	4b07      	ldr	r3, [pc, #28]	; (2a70 <NWK_Init+0x3c>)
    2a54:	4798      	blx	r3
	nwkRxInit();
    2a56:	4b07      	ldr	r3, [pc, #28]	; (2a74 <NWK_Init+0x40>)
    2a58:	4798      	blx	r3
	nwkFrameInit();
    2a5a:	4b07      	ldr	r3, [pc, #28]	; (2a78 <NWK_Init+0x44>)
    2a5c:	4798      	blx	r3
	nwkDataReqInit();
    2a5e:	4b07      	ldr	r3, [pc, #28]	; (2a7c <NWK_Init+0x48>)
    2a60:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    2a62:	4b07      	ldr	r3, [pc, #28]	; (2a80 <NWK_Init+0x4c>)
    2a64:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    2a66:	4b07      	ldr	r3, [pc, #28]	; (2a84 <NWK_Init+0x50>)
    2a68:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
    2a6a:	bd10      	pop	{r4, pc}
    2a6c:	200007f8 	.word	0x200007f8
    2a70:	00002d11 	.word	0x00002d11
    2a74:	00002c0d 	.word	0x00002c0d
    2a78:	00002aa5 	.word	0x00002aa5
    2a7c:	00002a99 	.word	0x00002a99
    2a80:	00002af5 	.word	0x00002af5
    2a84:	00002c4d 	.word	0x00002c4d

00002a88 <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    2a88:	3002      	adds	r0, #2
    2a8a:	0080      	lsls	r0, r0, #2
    2a8c:	4b01      	ldr	r3, [pc, #4]	; (2a94 <NWK_OpenEndpoint+0xc>)
    2a8e:	50c1      	str	r1, [r0, r3]
}
    2a90:	4770      	bx	lr
    2a92:	46c0      	nop			; (mov r8, r8)
    2a94:	200007f8 	.word	0x200007f8

00002a98 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    2a98:	2200      	movs	r2, #0
    2a9a:	4b01      	ldr	r3, [pc, #4]	; (2aa0 <nwkDataReqInit+0x8>)
    2a9c:	601a      	str	r2, [r3, #0]
}
    2a9e:	4770      	bx	lr
    2aa0:	2000010c 	.word	0x2000010c

00002aa4 <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    2aa4:	4b03      	ldr	r3, [pc, #12]	; (2ab4 <nwkFrameInit+0x10>)
    2aa6:	2200      	movs	r2, #0
    2aa8:	701a      	strb	r2, [r3, #0]
    2aaa:	218d      	movs	r1, #141	; 0x8d
    2aac:	545a      	strb	r2, [r3, r1]
    2aae:	318d      	adds	r1, #141	; 0x8d
    2ab0:	545a      	strb	r2, [r3, r1]
	}
}
    2ab2:	4770      	bx	lr
    2ab4:	20000110 	.word	0x20000110

00002ab8 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    2ab8:	2800      	cmp	r0, #0
    2aba:	d006      	beq.n	2aca <nwkFrameNext+0x12>
		frame = nwkFrameFrames;
	} else {
		frame++;
    2abc:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2abe:	4b0c      	ldr	r3, [pc, #48]	; (2af0 <nwkFrameNext+0x38>)
    2ac0:	33a8      	adds	r3, #168	; 0xa8
    2ac2:	33ff      	adds	r3, #255	; 0xff
    2ac4:	4298      	cmp	r0, r3
    2ac6:	d301      	bcc.n	2acc <nwkFrameNext+0x14>
    2ac8:	e00f      	b.n	2aea <nwkFrameNext+0x32>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
    2aca:	4809      	ldr	r0, [pc, #36]	; (2af0 <nwkFrameNext+0x38>)
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2acc:	7803      	ldrb	r3, [r0, #0]
    2ace:	2b00      	cmp	r3, #0
    2ad0:	d10c      	bne.n	2aec <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2ad2:	4a07      	ldr	r2, [pc, #28]	; (2af0 <nwkFrameNext+0x38>)
    2ad4:	32a8      	adds	r2, #168	; 0xa8
    2ad6:	32ff      	adds	r2, #255	; 0xff
    2ad8:	e002      	b.n	2ae0 <nwkFrameNext+0x28>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2ada:	7803      	ldrb	r3, [r0, #0]
    2adc:	2b00      	cmp	r3, #0
    2ade:	d105      	bne.n	2aec <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2ae0:	308d      	adds	r0, #141	; 0x8d
    2ae2:	4290      	cmp	r0, r2
    2ae4:	d3f9      	bcc.n	2ada <nwkFrameNext+0x22>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    2ae6:	2000      	movs	r0, #0
    2ae8:	e000      	b.n	2aec <nwkFrameNext+0x34>
    2aea:	2000      	movs	r0, #0
}
    2aec:	4770      	bx	lr
    2aee:	46c0      	nop			; (mov r8, r8)
    2af0:	20000110 	.word	0x20000110

00002af4 <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    2af4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2af6:	4b09      	ldr	r3, [pc, #36]	; (2b1c <nwkRouteInit+0x28>)
    2af8:	3302      	adds	r3, #2
    2afa:	2200      	movs	r2, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2afc:	2701      	movs	r7, #1
    2afe:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    2b00:	4c06      	ldr	r4, [pc, #24]	; (2b1c <nwkRouteInit+0x28>)
    2b02:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    2b04:	2500      	movs	r5, #0
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2b06:	801f      	strh	r7, [r3, #0]
		nwkRouteTable[i].fixed = 0;
    2b08:	00d0      	lsls	r0, r2, #3
    2b0a:	5d01      	ldrb	r1, [r0, r4]
    2b0c:	43b1      	bics	r1, r6
    2b0e:	5501      	strb	r1, [r0, r4]
		nwkRouteTable[i].rank = 0;
    2b10:	711d      	strb	r5, [r3, #4]
    2b12:	3201      	adds	r2, #1
    2b14:	3308      	adds	r3, #8
/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2b16:	2a64      	cmp	r2, #100	; 0x64
    2b18:	d1f5      	bne.n	2b06 <nwkRouteInit+0x12>
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
		nwkRouteTable[i].fixed = 0;
		nwkRouteTable[i].rank = 0;
	}
}
    2b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b1c:	200002b8 	.word	0x200002b8

00002b20 <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    2b20:	b570      	push	{r4, r5, r6, lr}
    2b22:	4a0b      	ldr	r2, [pc, #44]	; (2b50 <NWK_RouteFindEntry+0x30>)
    2b24:	3202      	adds	r2, #2
    2b26:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    2b28:	4e09      	ldr	r6, [pc, #36]	; (2b50 <NWK_RouteFindEntry+0x30>)
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    2b2a:	8814      	ldrh	r4, [r2, #0]
    2b2c:	4284      	cmp	r4, r0
    2b2e:	d109      	bne.n	2b44 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
    2b30:	00dc      	lsls	r4, r3, #3
    2b32:	5da4      	ldrb	r4, [r4, r6]
    2b34:	07a4      	lsls	r4, r4, #30
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    2b36:	0fe4      	lsrs	r4, r4, #31
    2b38:	428c      	cmp	r4, r1
    2b3a:	d103      	bne.n	2b44 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
    2b3c:	00dd      	lsls	r5, r3, #3
    2b3e:	4804      	ldr	r0, [pc, #16]	; (2b50 <NWK_RouteFindEntry+0x30>)
    2b40:	1940      	adds	r0, r0, r5
    2b42:	e004      	b.n	2b4e <NWK_RouteFindEntry+0x2e>
    2b44:	3301      	adds	r3, #1
    2b46:	3208      	adds	r2, #8

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2b48:	2b64      	cmp	r3, #100	; 0x64
    2b4a:	d1ee      	bne.n	2b2a <NWK_RouteFindEntry+0xa>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
		}
	}

	return NULL;
    2b4c:	2000      	movs	r0, #0
}
    2b4e:	bd70      	pop	{r4, r5, r6, pc}
    2b50:	200002b8 	.word	0x200002b8

00002b54 <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    2b54:	7803      	ldrb	r3, [r0, #0]
    2b56:	07db      	lsls	r3, r3, #31
    2b58:	d404      	bmi.n	2b64 <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    2b5a:	2301      	movs	r3, #1
    2b5c:	425b      	negs	r3, r3
    2b5e:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    2b60:	2300      	movs	r3, #0
    2b62:	7183      	strb	r3, [r0, #6]
}
    2b64:	4770      	bx	lr
    2b66:	46c0      	nop			; (mov r8, r8)

00002b68 <nwkRouteRemove>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    2b68:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    2b6a:	4b03      	ldr	r3, [pc, #12]	; (2b78 <nwkRouteRemove+0x10>)
    2b6c:	4798      	blx	r3
	if (entry) {
    2b6e:	2800      	cmp	r0, #0
    2b70:	d001      	beq.n	2b76 <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    2b72:	4b02      	ldr	r3, [pc, #8]	; (2b7c <nwkRouteRemove+0x14>)
    2b74:	4798      	blx	r3
	}
}
    2b76:	bd10      	pop	{r4, pc}
    2b78:	00002b21 	.word	0x00002b21
    2b7c:	00002b55 	.word	0x00002b55

00002b80 <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    2b80:	b510      	push	{r4, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2b82:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2b84:	2300      	movs	r3, #0
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2b86:	2a06      	cmp	r2, #6
    2b88:	d108      	bne.n	2b9c <nwkRouteErrorReceived+0x1c>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    2b8a:	6882      	ldr	r2, [r0, #8]

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
    2b8c:	7951      	ldrb	r1, [r2, #5]
    2b8e:	78d3      	ldrb	r3, [r2, #3]
    2b90:	7910      	ldrb	r0, [r2, #4]
    2b92:	0200      	lsls	r0, r0, #8
    2b94:	4318      	orrs	r0, r3
    2b96:	4b02      	ldr	r3, [pc, #8]	; (2ba0 <nwkRouteErrorReceived+0x20>)
    2b98:	4798      	blx	r3

	return true;
    2b9a:	2301      	movs	r3, #1
}
    2b9c:	0018      	movs	r0, r3
    2b9e:	bd10      	pop	{r4, pc}
    2ba0:	00002b69 	.word	0x00002b69

00002ba4 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    2ba4:	b510      	push	{r4, lr}
	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
		return false;
	}
#endif

	if (ind->size < 1) {
    2ba6:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2ba8:	2300      	movs	r3, #0
	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
		return false;
	}
#endif

	if (ind->size < 1) {
    2baa:	2a00      	cmp	r2, #0
    2bac:	d00f      	beq.n	2bce <nwkRxSeriveDataInd+0x2a>
		return false;
	}

	switch (ind->data[0]) {
    2bae:	6883      	ldr	r3, [r0, #8]
    2bb0:	781b      	ldrb	r3, [r3, #0]
    2bb2:	2b00      	cmp	r3, #0
    2bb4:	d002      	beq.n	2bbc <nwkRxSeriveDataInd+0x18>
    2bb6:	2b01      	cmp	r3, #1
    2bb8:	d004      	beq.n	2bc4 <nwkRxSeriveDataInd+0x20>
    2bba:	e007      	b.n	2bcc <nwkRxSeriveDataInd+0x28>
	case NWK_COMMAND_ACK:
		return nwkTxAckReceived(ind);
    2bbc:	4b05      	ldr	r3, [pc, #20]	; (2bd4 <nwkRxSeriveDataInd+0x30>)
    2bbe:	4798      	blx	r3
    2bc0:	0003      	movs	r3, r0
    2bc2:	e004      	b.n	2bce <nwkRxSeriveDataInd+0x2a>

#ifdef NWK_ENABLE_ROUTING
	case NWK_COMMAND_ROUTE_ERROR:
		return nwkRouteErrorReceived(ind);
    2bc4:	4b04      	ldr	r3, [pc, #16]	; (2bd8 <nwkRxSeriveDataInd+0x34>)
    2bc6:	4798      	blx	r3
    2bc8:	0003      	movs	r3, r0
    2bca:	e000      	b.n	2bce <nwkRxSeriveDataInd+0x2a>
	case NWK_COMMAND_ROUTE_REPLY:
		return nwkRouteDiscoveryReplyReceived(ind);
#endif

	default:
		return false;
    2bcc:	2300      	movs	r3, #0
	}
}
    2bce:	0018      	movs	r0, r3
    2bd0:	bd10      	pop	{r4, pc}
    2bd2:	46c0      	nop			; (mov r8, r8)
    2bd4:	00002d45 	.word	0x00002d45
    2bd8:	00002b81 	.word	0x00002b81

00002bdc <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    2bdc:	b570      	push	{r4, r5, r6, lr}
    2bde:	4909      	ldr	r1, [pc, #36]	; (2c04 <nwkRxDuplicateRejectionTimerHandler+0x28>)
    2be0:	1d0b      	adds	r3, r1, #4
    2be2:	3140      	adds	r1, #64	; 0x40
	bool restart = false;
    2be4:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
    2be6:	2501      	movs	r5, #1
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    2be8:	781a      	ldrb	r2, [r3, #0]
    2bea:	2a00      	cmp	r2, #0
    2bec:	d002      	beq.n	2bf4 <nwkRxDuplicateRejectionTimerHandler+0x18>
			nwkRxDuplicateRejectionTable[i].ttl--;
    2bee:	3a01      	subs	r2, #1
    2bf0:	701a      	strb	r2, [r3, #0]
			restart = true;
    2bf2:	002c      	movs	r4, r5
    2bf4:	3306      	adds	r3, #6
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2bf6:	428b      	cmp	r3, r1
    2bf8:	d1f6      	bne.n	2be8 <nwkRxDuplicateRejectionTimerHandler+0xc>
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
		}
	}

	if (restart) {
    2bfa:	2c00      	cmp	r4, #0
    2bfc:	d001      	beq.n	2c02 <nwkRxDuplicateRejectionTimerHandler+0x26>
		SYS_TimerStart(timer);
    2bfe:	4b02      	ldr	r3, [pc, #8]	; (2c08 <nwkRxDuplicateRejectionTimerHandler+0x2c>)
    2c00:	4798      	blx	r3
	}
}
    2c02:	bd70      	pop	{r4, r5, r6, pc}
    2c04:	200005d8 	.word	0x200005d8
    2c08:	00002ee1 	.word	0x00002ee1

00002c0c <nwkRxInit>:

/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    2c0c:	b510      	push	{r4, lr}
    2c0e:	4a0a      	ldr	r2, [pc, #40]	; (2c38 <nwkRxInit+0x2c>)
    2c10:	1d13      	adds	r3, r2, #4
    2c12:	3240      	adds	r2, #64	; 0x40
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    2c14:	2100      	movs	r1, #0
    2c16:	7019      	strb	r1, [r3, #0]
    2c18:	3306      	adds	r3, #6
/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2c1a:	4293      	cmp	r3, r2
    2c1c:	d1fb      	bne.n	2c16 <nwkRxInit+0xa>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
	}

	nwkRxDuplicateRejectionTimer.interval
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    2c1e:	4b07      	ldr	r3, [pc, #28]	; (2c3c <nwkRxInit+0x30>)
    2c20:	2264      	movs	r2, #100	; 0x64
    2c22:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2c24:	2200      	movs	r2, #0
    2c26:	731a      	strb	r2, [r3, #12]
	nwkRxDuplicateRejectionTimer.handler
		= nwkRxDuplicateRejectionTimerHandler;
    2c28:	4a05      	ldr	r2, [pc, #20]	; (2c40 <nwkRxInit+0x34>)
    2c2a:	611a      	str	r2, [r3, #16]

	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    2c2c:	4905      	ldr	r1, [pc, #20]	; (2c44 <nwkRxInit+0x38>)
    2c2e:	2000      	movs	r0, #0
    2c30:	4b05      	ldr	r3, [pc, #20]	; (2c48 <nwkRxInit+0x3c>)
    2c32:	4798      	blx	r3
}
    2c34:	bd10      	pop	{r4, pc}
    2c36:	46c0      	nop			; (mov r8, r8)
    2c38:	200005d8 	.word	0x200005d8
    2c3c:	20000614 	.word	0x20000614
    2c40:	00002bdd 	.word	0x00002bdd
    2c44:	00002ba5 	.word	0x00002ba5
    2c48:	00002a89 	.word	0x00002a89

00002c4c <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    2c4c:	2300      	movs	r3, #0
    2c4e:	4a02      	ldr	r2, [pc, #8]	; (2c58 <nwkSecurityInit+0xc>)
    2c50:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    2c52:	4a02      	ldr	r2, [pc, #8]	; (2c5c <nwkSecurityInit+0x10>)
    2c54:	6013      	str	r3, [r2, #0]
}
    2c56:	4770      	bx	lr
    2c58:	20000628 	.word	0x20000628
    2c5c:	2000062c 	.word	0x2000062c

00002c60 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    2c60:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c62:	b083      	sub	sp, #12
    2c64:	9001      	str	r0, [sp, #4]
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2c66:	2400      	movs	r4, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    2c68:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2c6a:	4d10      	ldr	r5, [pc, #64]	; (2cac <nwkTxDelayTimerHandler+0x4c>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2c6c:	2686      	movs	r6, #134	; 0x86
    2c6e:	2787      	movs	r7, #135	; 0x87
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2c70:	e012      	b.n	2c98 <nwkTxDelayTimerHandler+0x38>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    2c72:	7803      	ldrb	r3, [r0, #0]
    2c74:	2b11      	cmp	r3, #17
    2c76:	d10f      	bne.n	2c98 <nwkTxDelayTimerHandler+0x38>
			restart = true;

			if (0 == --frame->tx.timeout) {
    2c78:	5d82      	ldrb	r2, [r0, r6]
    2c7a:	5dc3      	ldrb	r3, [r0, r7]
    2c7c:	021b      	lsls	r3, r3, #8
    2c7e:	4313      	orrs	r3, r2
    2c80:	3b01      	subs	r3, #1
    2c82:	b29b      	uxth	r3, r3
    2c84:	5583      	strb	r3, [r0, r6]
    2c86:	0a19      	lsrs	r1, r3, #8
    2c88:	0002      	movs	r2, r0
    2c8a:	3286      	adds	r2, #134	; 0x86
    2c8c:	7051      	strb	r1, [r2, #1]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;
    2c8e:	2401      	movs	r4, #1

			if (0 == --frame->tx.timeout) {
    2c90:	2b00      	cmp	r3, #0
    2c92:	d101      	bne.n	2c98 <nwkTxDelayTimerHandler+0x38>
				frame->state = NWK_TX_STATE_SEND;
    2c94:	3313      	adds	r3, #19
    2c96:	7003      	strb	r3, [r0, #0]
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2c98:	47a8      	blx	r5
    2c9a:	2800      	cmp	r0, #0
    2c9c:	d1e9      	bne.n	2c72 <nwkTxDelayTimerHandler+0x12>
				frame->state = NWK_TX_STATE_SEND;
			}
		}
	}

	if (restart) {
    2c9e:	2c00      	cmp	r4, #0
    2ca0:	d002      	beq.n	2ca8 <nwkTxDelayTimerHandler+0x48>
		SYS_TimerStart(timer);
    2ca2:	9801      	ldr	r0, [sp, #4]
    2ca4:	4b02      	ldr	r3, [pc, #8]	; (2cb0 <nwkTxDelayTimerHandler+0x50>)
    2ca6:	4798      	blx	r3
	}
}
    2ca8:	b003      	add	sp, #12
    2caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cac:	00002ab9 	.word	0x00002ab9
    2cb0:	00002ee1 	.word	0x00002ee1

00002cb4 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    2cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cb6:	b083      	sub	sp, #12
    2cb8:	9001      	str	r0, [sp, #4]
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2cba:	2400      	movs	r4, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    2cbc:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2cbe:	4d12      	ldr	r5, [pc, #72]	; (2d08 <nwkTxAckWaitTimerHandler+0x54>)
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2cc0:	2686      	movs	r6, #134	; 0x86
    2cc2:	2787      	movs	r7, #135	; 0x87
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2cc4:	e015      	b.n	2cf2 <nwkTxAckWaitTimerHandler+0x3e>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    2cc6:	7803      	ldrb	r3, [r0, #0]
    2cc8:	2b16      	cmp	r3, #22
    2cca:	d112      	bne.n	2cf2 <nwkTxAckWaitTimerHandler+0x3e>
			restart = true;

			if (0 == --frame->tx.timeout) {
    2ccc:	5d82      	ldrb	r2, [r0, r6]
    2cce:	5dc3      	ldrb	r3, [r0, r7]
    2cd0:	021b      	lsls	r3, r3, #8
    2cd2:	4313      	orrs	r3, r2
    2cd4:	3b01      	subs	r3, #1
    2cd6:	b29b      	uxth	r3, r3
    2cd8:	5583      	strb	r3, [r0, r6]
    2cda:	0a19      	lsrs	r1, r3, #8
    2cdc:	0002      	movs	r2, r0
    2cde:	3286      	adds	r2, #134	; 0x86
    2ce0:	7051      	strb	r1, [r2, #1]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;
    2ce2:	2401      	movs	r4, #1

			if (0 == --frame->tx.timeout) {
    2ce4:	2b00      	cmp	r3, #0
    2ce6:	d104      	bne.n	2cf2 <nwkTxAckWaitTimerHandler+0x3e>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    2ce8:	3317      	adds	r3, #23
    2cea:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    2cec:	2210      	movs	r2, #16
    2cee:	336e      	adds	r3, #110	; 0x6e
    2cf0:	54c2      	strb	r2, [r0, r3]
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2cf2:	47a8      	blx	r5
    2cf4:	2800      	cmp	r0, #0
    2cf6:	d1e6      	bne.n	2cc6 <nwkTxAckWaitTimerHandler+0x12>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
			}
		}
	}

	if (restart) {
    2cf8:	2c00      	cmp	r4, #0
    2cfa:	d002      	beq.n	2d02 <nwkTxAckWaitTimerHandler+0x4e>
		SYS_TimerStart(timer);
    2cfc:	9801      	ldr	r0, [sp, #4]
    2cfe:	4b03      	ldr	r3, [pc, #12]	; (2d0c <nwkTxAckWaitTimerHandler+0x58>)
    2d00:	4798      	blx	r3
	}
}
    2d02:	b003      	add	sp, #12
    2d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d06:	46c0      	nop			; (mov r8, r8)
    2d08:	00002ab9 	.word	0x00002ab9
    2d0c:	00002ee1 	.word	0x00002ee1

00002d10 <nwkTxInit>:
/*************************************************************************//**
*  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
	nwkTxPhyActiveFrame = NULL;
    2d10:	2200      	movs	r2, #0
    2d12:	4b07      	ldr	r3, [pc, #28]	; (2d30 <nwkTxInit+0x20>)
    2d14:	601a      	str	r2, [r3, #0]

	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    2d16:	4b07      	ldr	r3, [pc, #28]	; (2d34 <nwkTxInit+0x24>)
    2d18:	2132      	movs	r1, #50	; 0x32
    2d1a:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2d1c:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    2d1e:	4906      	ldr	r1, [pc, #24]	; (2d38 <nwkTxInit+0x28>)
    2d20:	6119      	str	r1, [r3, #16]

	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    2d22:	4b06      	ldr	r3, [pc, #24]	; (2d3c <nwkTxInit+0x2c>)
    2d24:	210a      	movs	r1, #10
    2d26:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2d28:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    2d2a:	4a05      	ldr	r2, [pc, #20]	; (2d40 <nwkTxInit+0x30>)
    2d2c:	611a      	str	r2, [r3, #16]
}
    2d2e:	4770      	bx	lr
    2d30:	20000644 	.word	0x20000644
    2d34:	20000630 	.word	0x20000630
    2d38:	00002cb5 	.word	0x00002cb5
    2d3c:	20000648 	.word	0x20000648
    2d40:	00002c61 	.word	0x00002c61

00002d44 <nwkTxAckReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    2d44:	b570      	push	{r4, r5, r6, lr}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    2d46:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2d48:	2300      	movs	r3, #0
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    2d4a:	2a03      	cmp	r2, #3
    2d4c:	d115      	bne.n	2d7a <nwkTxAckReceived+0x36>
    2d4e:	e00d      	b.n	2d6c <nwkTxAckReceived+0x28>
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    2d50:	7803      	ldrb	r3, [r0, #0]
    2d52:	2b16      	cmp	r3, #22
    2d54:	d10d      	bne.n	2d72 <nwkTxAckReceived+0x2e>
    2d56:	7b02      	ldrb	r2, [r0, #12]
    2d58:	786b      	ldrb	r3, [r5, #1]
    2d5a:	429a      	cmp	r2, r3
    2d5c:	d109      	bne.n	2d72 <nwkTxAckReceived+0x2e>
				frame->header.nwkSeq == command->seq) {
			frame->state = NWK_TX_STATE_CONFIRM;
    2d5e:	2317      	movs	r3, #23
    2d60:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    2d62:	78aa      	ldrb	r2, [r5, #2]
    2d64:	3371      	adds	r3, #113	; 0x71
    2d66:	54c2      	strb	r2, [r0, r3]
			return true;
    2d68:	3b87      	subs	r3, #135	; 0x87
    2d6a:	e006      	b.n	2d7a <nwkTxAckReceived+0x36>

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    2d6c:	6885      	ldr	r5, [r0, #8]
    2d6e:	2000      	movs	r0, #0

	if (sizeof(NwkCommandAck_t) != ind->size) {
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    2d70:	4c03      	ldr	r4, [pc, #12]	; (2d80 <nwkTxAckReceived+0x3c>)
    2d72:	47a0      	blx	r4
    2d74:	2800      	cmp	r0, #0
    2d76:	d1eb      	bne.n	2d50 <nwkTxAckReceived+0xc>
			frame->tx.control = command->control;
			return true;
		}
	}

	return false;
    2d78:	2300      	movs	r3, #0
}
    2d7a:	0018      	movs	r0, r3
    2d7c:	bd70      	pop	{r4, r5, r6, pc}
    2d7e:	46c0      	nop			; (mov r8, r8)
    2d80:	00002ab9 	.word	0x00002ab9

00002d84 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    2d84:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    2d86:	4b0e      	ldr	r3, [pc, #56]	; (2dc0 <PHY_Init+0x3c>)
    2d88:	4798      	blx	r3
	PhyReset();
    2d8a:	4b0e      	ldr	r3, [pc, #56]	; (2dc4 <PHY_Init+0x40>)
    2d8c:	4798      	blx	r3
	phyRxState = false;
    2d8e:	2200      	movs	r2, #0
    2d90:	4b0d      	ldr	r3, [pc, #52]	; (2dc8 <PHY_Init+0x44>)
    2d92:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    2d94:	3201      	adds	r2, #1
    2d96:	4b0d      	ldr	r3, [pc, #52]	; (2dcc <PHY_Init+0x48>)
    2d98:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2d9a:	4e0d      	ldr	r6, [pc, #52]	; (2dd0 <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2d9c:	4d0d      	ldr	r5, [pc, #52]	; (2dd4 <PHY_Init+0x50>)
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2d9e:	241f      	movs	r4, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2da0:	2108      	movs	r1, #8
    2da2:	2002      	movs	r0, #2
    2da4:	47b0      	blx	r6
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2da6:	2001      	movs	r0, #1
    2da8:	47a8      	blx	r5
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2daa:	4020      	ands	r0, r4
    2dac:	2808      	cmp	r0, #8
    2dae:	d1f7      	bne.n	2da0 <PHY_Init+0x1c>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2db0:	212e      	movs	r1, #46	; 0x2e
    2db2:	3804      	subs	r0, #4
    2db4:	4c06      	ldr	r4, [pc, #24]	; (2dd0 <PHY_Init+0x4c>)
    2db6:	47a0      	blx	r4
    2db8:	21a0      	movs	r1, #160	; 0xa0
    2dba:	200c      	movs	r0, #12
    2dbc:	47a0      	blx	r4
			(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
			(1 << IRQ_MASK_MODE));

	phyWriteRegister(TRX_CTRL_2_REG,
			(1 << RX_SAFE_MODE) | (1 << OQPSK_SCRAM_EN));
}
    2dbe:	bd70      	pop	{r4, r5, r6, pc}
    2dc0:	000030a5 	.word	0x000030a5
    2dc4:	000031c1 	.word	0x000031c1
    2dc8:	2000065d 	.word	0x2000065d
    2dcc:	2000065c 	.word	0x2000065c
    2dd0:	000032ed 	.word	0x000032ed
    2dd4:	000031f1 	.word	0x000031f1

00002dd8 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    2dd8:	b510      	push	{r4, lr}
	SYS_TimerInit();
    2dda:	4b04      	ldr	r3, [pc, #16]	; (2dec <SYS_Init+0x14>)
    2ddc:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    2dde:	4b04      	ldr	r3, [pc, #16]	; (2df0 <SYS_Init+0x18>)
    2de0:	4798      	blx	r3
#endif
	PHY_Init();
    2de2:	4b04      	ldr	r3, [pc, #16]	; (2df4 <SYS_Init+0x1c>)
    2de4:	4798      	blx	r3
	NWK_Init();
    2de6:	4b04      	ldr	r3, [pc, #16]	; (2df8 <SYS_Init+0x20>)
    2de8:	4798      	blx	r3
}
    2dea:	bd10      	pop	{r4, pc}
    2dec:	00002e79 	.word	0x00002e79
    2df0:	00003085 	.word	0x00003085
    2df4:	00002d85 	.word	0x00002d85
    2df8:	00002a35 	.word	0x00002a35

00002dfc <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    2dfc:	b530      	push	{r4, r5, lr}
	if (timers) {
    2dfe:	4b15      	ldr	r3, [pc, #84]	; (2e54 <placeTimer+0x58>)
    2e00:	681d      	ldr	r5, [r3, #0]
    2e02:	2d00      	cmp	r5, #0
    2e04:	d01e      	beq.n	2e44 <placeTimer+0x48>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    2e06:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    2e08:	6869      	ldr	r1, [r5, #4]
    2e0a:	428a      	cmp	r2, r1
    2e0c:	d305      	bcc.n	2e1a <placeTimer+0x1e>
    2e0e:	002c      	movs	r4, r5
    2e10:	e009      	b.n	2e26 <placeTimer+0x2a>
    2e12:	6859      	ldr	r1, [r3, #4]
    2e14:	4291      	cmp	r1, r2
    2e16:	d905      	bls.n	2e24 <placeTimer+0x28>
    2e18:	e001      	b.n	2e1e <placeTimer+0x22>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2e1a:	002b      	movs	r3, r5
/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
    2e1c:	2400      	movs	r4, #0
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
				t->timeout -= timeout;
    2e1e:	1a89      	subs	r1, r1, r2
    2e20:	6059      	str	r1, [r3, #4]
				break;
    2e22:	e004      	b.n	2e2e <placeTimer+0x32>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2e24:	001c      	movs	r4, r3
			if (timeout < t->timeout) {
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    2e26:	1a52      	subs	r2, r2, r1
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2e28:	6823      	ldr	r3, [r4, #0]
    2e2a:	2b00      	cmp	r3, #0
    2e2c:	d1f1      	bne.n	2e12 <placeTimer+0x16>
			}

			prev = t;
		}

		timer->timeout = timeout;
    2e2e:	6042      	str	r2, [r0, #4]

		if (prev) {
    2e30:	2c00      	cmp	r4, #0
    2e32:	d003      	beq.n	2e3c <placeTimer+0x40>
			timer->next = prev->next;
    2e34:	6823      	ldr	r3, [r4, #0]
    2e36:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    2e38:	6020      	str	r0, [r4, #0]
    2e3a:	e009      	b.n	2e50 <placeTimer+0x54>
		} else {
			timer->next = timers;
    2e3c:	6005      	str	r5, [r0, #0]
			timers = timer;
    2e3e:	4b05      	ldr	r3, [pc, #20]	; (2e54 <placeTimer+0x58>)
    2e40:	6018      	str	r0, [r3, #0]
    2e42:	e005      	b.n	2e50 <placeTimer+0x54>
		}
	} else {
		timer->next = NULL;
    2e44:	2300      	movs	r3, #0
    2e46:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    2e48:	6883      	ldr	r3, [r0, #8]
    2e4a:	6043      	str	r3, [r0, #4]
		timers = timer;
    2e4c:	4b01      	ldr	r3, [pc, #4]	; (2e54 <placeTimer+0x58>)
    2e4e:	6018      	str	r0, [r3, #0]
	}
}
    2e50:	bd30      	pop	{r4, r5, pc}
    2e52:	46c0      	nop			; (mov r8, r8)
    2e54:	20000660 	.word	0x20000660

00002e58 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    2e58:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    2e5a:	4a04      	ldr	r2, [pc, #16]	; (2e6c <SYS_HwExpiry_Cb+0x14>)
    2e5c:	7813      	ldrb	r3, [r2, #0]
    2e5e:	3301      	adds	r3, #1
    2e60:	b2db      	uxtb	r3, r3
    2e62:	7013      	strb	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2e64:	4802      	ldr	r0, [pc, #8]	; (2e70 <SYS_HwExpiry_Cb+0x18>)
    2e66:	4b03      	ldr	r3, [pc, #12]	; (2e74 <SYS_HwExpiry_Cb+0x1c>)
    2e68:	4798      	blx	r3
}
    2e6a:	bd10      	pop	{r4, pc}
    2e6c:	20000854 	.word	0x20000854
    2e70:	00002710 	.word	0x00002710
    2e74:	000034a9 	.word	0x000034a9

00002e78 <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    2e78:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    2e7a:	2400      	movs	r4, #0
    2e7c:	4b06      	ldr	r3, [pc, #24]	; (2e98 <SYS_TimerInit+0x20>)
    2e7e:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    2e80:	4806      	ldr	r0, [pc, #24]	; (2e9c <SYS_TimerInit+0x24>)
    2e82:	4b07      	ldr	r3, [pc, #28]	; (2ea0 <SYS_TimerInit+0x28>)
    2e84:	4798      	blx	r3
	common_tc_init();
    2e86:	4b07      	ldr	r3, [pc, #28]	; (2ea4 <SYS_TimerInit+0x2c>)
    2e88:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2e8a:	4807      	ldr	r0, [pc, #28]	; (2ea8 <SYS_TimerInit+0x30>)
    2e8c:	4b07      	ldr	r3, [pc, #28]	; (2eac <SYS_TimerInit+0x34>)
    2e8e:	4798      	blx	r3
	timers = NULL;
    2e90:	4b07      	ldr	r3, [pc, #28]	; (2eb0 <SYS_TimerInit+0x38>)
    2e92:	601c      	str	r4, [r3, #0]
}
    2e94:	bd10      	pop	{r4, pc}
    2e96:	46c0      	nop			; (mov r8, r8)
    2e98:	20000854 	.word	0x20000854
    2e9c:	00002e59 	.word	0x00002e59
    2ea0:	00003599 	.word	0x00003599
    2ea4:	00003515 	.word	0x00003515
    2ea8:	00002710 	.word	0x00002710
    2eac:	000034a9 	.word	0x000034a9
    2eb0:	20000660 	.word	0x20000660

00002eb4 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2eb4:	4b09      	ldr	r3, [pc, #36]	; (2edc <SYS_TimerStarted+0x28>)
    2eb6:	681b      	ldr	r3, [r3, #0]
    2eb8:	2b00      	cmp	r3, #0
    2eba:	d009      	beq.n	2ed0 <SYS_TimerStarted+0x1c>
		if (t == timer) {
    2ebc:	4283      	cmp	r3, r0
    2ebe:	d102      	bne.n	2ec6 <SYS_TimerStarted+0x12>
    2ec0:	e008      	b.n	2ed4 <SYS_TimerStarted+0x20>
    2ec2:	4298      	cmp	r0, r3
    2ec4:	d008      	beq.n	2ed8 <SYS_TimerStarted+0x24>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2ec6:	681b      	ldr	r3, [r3, #0]
    2ec8:	2b00      	cmp	r3, #0
    2eca:	d1fa      	bne.n	2ec2 <SYS_TimerStarted+0xe>
		if (t == timer) {
			return true;
		}
	}
	return false;
    2ecc:	2000      	movs	r0, #0
    2ece:	e004      	b.n	2eda <SYS_TimerStarted+0x26>
    2ed0:	2000      	movs	r0, #0
    2ed2:	e002      	b.n	2eda <SYS_TimerStarted+0x26>
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    2ed4:	2001      	movs	r0, #1
    2ed6:	e000      	b.n	2eda <SYS_TimerStarted+0x26>
    2ed8:	2001      	movs	r0, #1
		}
	}
	return false;
}
    2eda:	4770      	bx	lr
    2edc:	20000660 	.word	0x20000660

00002ee0 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    2ee0:	b510      	push	{r4, lr}
    2ee2:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    2ee4:	4b03      	ldr	r3, [pc, #12]	; (2ef4 <SYS_TimerStart+0x14>)
    2ee6:	4798      	blx	r3
    2ee8:	2800      	cmp	r0, #0
    2eea:	d102      	bne.n	2ef2 <SYS_TimerStart+0x12>
		placeTimer(timer);
    2eec:	0020      	movs	r0, r4
    2eee:	4b02      	ldr	r3, [pc, #8]	; (2ef8 <SYS_TimerStart+0x18>)
    2ef0:	4798      	blx	r3
	}
}
    2ef2:	bd10      	pop	{r4, pc}
    2ef4:	00002eb5 	.word	0x00002eb5
    2ef8:	00002dfd 	.word	0x00002dfd

00002efc <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    2efc:	b510      	push	{r4, lr}
	tmr_cca_callback();
    2efe:	4b01      	ldr	r3, [pc, #4]	; (2f04 <tc_cca_callback+0x8>)
    2f00:	4798      	blx	r3
}
    2f02:	bd10      	pop	{r4, pc}
    2f04:	0000357d 	.word	0x0000357d

00002f08 <tc_ovf_callback>:
{
	cpu_irq_restore((uint32_t)flags);
}

static void tc_ovf_callback(struct tc_module *const module_instance)
{
    2f08:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    2f0a:	4b01      	ldr	r3, [pc, #4]	; (2f10 <tc_ovf_callback+0x8>)
    2f0c:	4798      	blx	r3
}
    2f0e:	bd10      	pop	{r4, pc}
    2f10:	00003535 	.word	0x00003535

00002f14 <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
    2f14:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    2f16:	4802      	ldr	r0, [pc, #8]	; (2f20 <tmr_read_count+0xc>)
    2f18:	4b02      	ldr	r3, [pc, #8]	; (2f24 <tmr_read_count+0x10>)
    2f1a:	4798      	blx	r3
    2f1c:	b280      	uxth	r0, r0
}
    2f1e:	bd10      	pop	{r4, pc}
    2f20:	2000088c 	.word	0x2000088c
    2f24:	000027e5 	.word	0x000027e5

00002f28 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    2f28:	4b03      	ldr	r3, [pc, #12]	; (2f38 <tmr_disable_cc_interrupt+0x10>)
    2f2a:	2110      	movs	r1, #16
    2f2c:	681a      	ldr	r2, [r3, #0]
    2f2e:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    2f30:	7e5a      	ldrb	r2, [r3, #25]
    2f32:	438a      	bics	r2, r1
    2f34:	765a      	strb	r2, [r3, #25]
/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    2f36:	4770      	bx	lr
    2f38:	2000088c 	.word	0x2000088c

00002f3c <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
    2f3c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2f3e:	4c0a      	ldr	r4, [pc, #40]	; (2f68 <tmr_enable_cc_interrupt+0x2c>)
    2f40:	6820      	ldr	r0, [r4, #0]
    2f42:	4b0a      	ldr	r3, [pc, #40]	; (2f6c <tmr_enable_cc_interrupt+0x30>)
    2f44:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2f46:	4b0a      	ldr	r3, [pc, #40]	; (2f70 <tmr_enable_cc_interrupt+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2f48:	5c1b      	ldrb	r3, [r3, r0]
    2f4a:	221f      	movs	r2, #31
    2f4c:	401a      	ands	r2, r3
    2f4e:	2301      	movs	r3, #1
    2f50:	4093      	lsls	r3, r2
    2f52:	4a08      	ldr	r2, [pc, #32]	; (2f74 <tmr_enable_cc_interrupt+0x38>)
    2f54:	6013      	str	r3, [r2, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2f56:	7e62      	ldrb	r2, [r4, #25]
    2f58:	2310      	movs	r3, #16
    2f5a:	4313      	orrs	r3, r2
    2f5c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2f5e:	6823      	ldr	r3, [r4, #0]
    2f60:	2210      	movs	r2, #16
    2f62:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    2f64:	bd10      	pop	{r4, pc}
    2f66:	46c0      	nop			; (mov r8, r8)
    2f68:	2000088c 	.word	0x2000088c
    2f6c:	00002531 	.word	0x00002531
    2f70:	00008bb0 	.word	0x00008bb0
    2f74:	e000e100 	.word	0xe000e100

00002f78 <tmr_write_cmpreg>:
}

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
    2f78:	b510      	push	{r4, lr}
    2f7a:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    2f7c:	2100      	movs	r1, #0
    2f7e:	4802      	ldr	r0, [pc, #8]	; (2f88 <tmr_write_cmpreg+0x10>)
    2f80:	4b02      	ldr	r3, [pc, #8]	; (2f8c <tmr_write_cmpreg+0x14>)
    2f82:	4798      	blx	r3
			(uint32_t)compare_value);
}
    2f84:	bd10      	pop	{r4, pc}
    2f86:	46c0      	nop			; (mov r8, r8)
    2f88:	2000088c 	.word	0x2000088c
    2f8c:	00002815 	.word	0x00002815

00002f90 <tmr_init>:
}

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    2f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f92:	464f      	mov	r7, r9
    2f94:	4646      	mov	r6, r8
    2f96:	b4c0      	push	{r6, r7}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    2f98:	4a2d      	ldr	r2, [pc, #180]	; (3050 <tmr_init+0xc0>)
    2f9a:	2300      	movs	r3, #0
    2f9c:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    2f9e:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    2fa0:	2100      	movs	r1, #0
    2fa2:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    2fa4:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2fa6:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2fa8:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2faa:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2fac:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2fae:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2fb0:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    2fb2:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2fb4:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2fb6:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2fb8:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2fba:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2fbc:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2fbe:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    2fc0:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2fc2:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    2fc4:	3b01      	subs	r3, #1
    2fc6:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    2fc8:	4c22      	ldr	r4, [pc, #136]	; (3054 <tmr_init+0xc4>)
    2fca:	4923      	ldr	r1, [pc, #140]	; (3058 <tmr_init+0xc8>)
    2fcc:	0020      	movs	r0, r4
    2fce:	4b23      	ldr	r3, [pc, #140]	; (305c <tmr_init+0xcc>)
    2fd0:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    2fd2:	2200      	movs	r2, #0
    2fd4:	4922      	ldr	r1, [pc, #136]	; (3060 <tmr_init+0xd0>)
    2fd6:	0020      	movs	r0, r4
    2fd8:	4d22      	ldr	r5, [pc, #136]	; (3064 <tmr_init+0xd4>)
    2fda:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    2fdc:	2202      	movs	r2, #2
    2fde:	4922      	ldr	r1, [pc, #136]	; (3068 <tmr_init+0xd8>)
    2fe0:	0020      	movs	r0, r4
    2fe2:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2fe4:	6820      	ldr	r0, [r4, #0]
    2fe6:	4b21      	ldr	r3, [pc, #132]	; (306c <tmr_init+0xdc>)
    2fe8:	4699      	mov	r9, r3
    2fea:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2fec:	4b20      	ldr	r3, [pc, #128]	; (3070 <tmr_init+0xe0>)
    2fee:	4698      	mov	r8, r3
    2ff0:	5c1b      	ldrb	r3, [r3, r0]
    2ff2:	271f      	movs	r7, #31
    2ff4:	403b      	ands	r3, r7
    2ff6:	2501      	movs	r5, #1
    2ff8:	002a      	movs	r2, r5
    2ffa:	409a      	lsls	r2, r3
    2ffc:	4e1d      	ldr	r6, [pc, #116]	; (3074 <tmr_init+0xe4>)
    2ffe:	6032      	str	r2, [r6, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    3000:	7e62      	ldrb	r2, [r4, #25]
    3002:	2301      	movs	r3, #1
    3004:	4313      	orrs	r3, r2
    3006:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    3008:	6823      	ldr	r3, [r4, #0]
    300a:	735d      	strb	r5, [r3, #13]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    300c:	0018      	movs	r0, r3
    300e:	47c8      	blx	r9
    3010:	4643      	mov	r3, r8
    3012:	5c1b      	ldrb	r3, [r3, r0]
    3014:	403b      	ands	r3, r7
    3016:	409d      	lsls	r5, r3
    3018:	6035      	str	r5, [r6, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    301a:	7e62      	ldrb	r2, [r4, #25]
    301c:	2310      	movs	r3, #16
    301e:	4313      	orrs	r3, r2
    3020:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    3022:	6822      	ldr	r2, [r4, #0]
    3024:	2310      	movs	r3, #16
    3026:	7353      	strb	r3, [r2, #13]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3028:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    302a:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    302c:	438b      	bics	r3, r1
    302e:	d1fc      	bne.n	302a <tmr_init+0x9a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3030:	8811      	ldrh	r1, [r2, #0]
    3032:	3302      	adds	r3, #2
    3034:	430b      	orrs	r3, r1
    3036:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    3038:	2000      	movs	r0, #0
    303a:	4b0f      	ldr	r3, [pc, #60]	; (3078 <tmr_init+0xe8>)
    303c:	4798      	blx	r3
	#endif
	return timer_multiplier;
    303e:	490f      	ldr	r1, [pc, #60]	; (307c <tmr_init+0xec>)
    3040:	4b0f      	ldr	r3, [pc, #60]	; (3080 <tmr_init+0xf0>)
    3042:	4798      	blx	r3
    3044:	b2c0      	uxtb	r0, r0
}
    3046:	bc0c      	pop	{r2, r3}
    3048:	4690      	mov	r8, r2
    304a:	4699      	mov	r9, r3
    304c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    304e:	46c0      	nop			; (mov r8, r8)
    3050:	20000858 	.word	0x20000858
    3054:	2000088c 	.word	0x2000088c
    3058:	42002c00 	.word	0x42002c00
    305c:	00002569 	.word	0x00002569
    3060:	00002f09 	.word	0x00002f09
    3064:	00002475 	.word	0x00002475
    3068:	00002efd 	.word	0x00002efd
    306c:	00002531 	.word	0x00002531
    3070:	00008bb0 	.word	0x00008bb0
    3074:	e000e100 	.word	0xe000e100
    3078:	00002205 	.word	0x00002205
    307c:	000f4240 	.word	0x000f4240
    3080:	00005f35 	.word	0x00005f35

00003084 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    3084:	4770      	bx	lr
    3086:	46c0      	nop			; (mov r8, r8)

00003088 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    3088:	b510      	push	{r4, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    308a:	2201      	movs	r2, #1
    308c:	4b03      	ldr	r3, [pc, #12]	; (309c <AT86RFX_ISR+0x14>)
    308e:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    3090:	4b03      	ldr	r3, [pc, #12]	; (30a0 <AT86RFX_ISR+0x18>)
    3092:	681b      	ldr	r3, [r3, #0]
    3094:	2b00      	cmp	r3, #0
    3096:	d000      	beq.n	309a <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    3098:	4798      	blx	r3
	}
}
    309a:	bd10      	pop	{r4, pc}
    309c:	40001800 	.word	0x40001800
    30a0:	20000664 	.word	0x20000664

000030a4 <trx_spi_init>:

void trx_spi_init(void)
{
    30a4:	b530      	push	{r4, r5, lr}
    30a6:	b085      	sub	sp, #20
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    30a8:	4a34      	ldr	r2, [pc, #208]	; (317c <trx_spi_init+0xd8>)
    30aa:	2300      	movs	r3, #0
    30ac:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    30ae:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    30b0:	213f      	movs	r1, #63	; 0x3f
    30b2:	7011      	strb	r1, [r2, #0]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    30b4:	4c32      	ldr	r4, [pc, #200]	; (3180 <trx_spi_init+0xdc>)
    30b6:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    30b8:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    30ba:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    30bc:	2201      	movs	r2, #1
    30be:	4669      	mov	r1, sp
    30c0:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    30c2:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    30c4:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    30c6:	203f      	movs	r0, #63	; 0x3f
    30c8:	4b2e      	ldr	r3, [pc, #184]	; (3184 <trx_spi_init+0xe0>)
    30ca:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    30cc:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    30ce:	09da      	lsrs	r2, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    30d0:	2100      	movs	r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    30d2:	2a00      	cmp	r2, #0
    30d4:	d104      	bne.n	30e0 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    30d6:	0959      	lsrs	r1, r3, #5
    30d8:	01c9      	lsls	r1, r1, #7
    30da:	4a2b      	ldr	r2, [pc, #172]	; (3188 <trx_spi_init+0xe4>)
    30dc:	4694      	mov	ip, r2
    30de:	4461      	add	r1, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    30e0:	221f      	movs	r2, #31
    30e2:	4013      	ands	r3, r2
    30e4:	3a1e      	subs	r2, #30
    30e6:	0010      	movs	r0, r2
    30e8:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    30ea:	6188      	str	r0, [r1, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    30ec:	4c27      	ldr	r4, [pc, #156]	; (318c <trx_spi_init+0xe8>)
    30ee:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    30f0:	2300      	movs	r3, #0
    30f2:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    30f4:	60a3      	str	r3, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    30f6:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    30f8:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    30fa:	74a2      	strb	r2, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    30fc:	74e2      	strb	r2, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    30fe:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    3100:	3223      	adds	r2, #35	; 0x23
    3102:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3104:	0020      	movs	r0, r4
    3106:	3018      	adds	r0, #24
    3108:	3a18      	subs	r2, #24
    310a:	2100      	movs	r1, #0
    310c:	4b20      	ldr	r3, [pc, #128]	; (3190 <trx_spi_init+0xec>)
    310e:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    3110:	2380      	movs	r3, #128	; 0x80
    3112:	025b      	lsls	r3, r3, #9
    3114:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    3116:	4b1f      	ldr	r3, [pc, #124]	; (3194 <trx_spi_init+0xf0>)
    3118:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    311a:	4b1f      	ldr	r3, [pc, #124]	; (3198 <trx_spi_init+0xf4>)
    311c:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    311e:	2301      	movs	r3, #1
    3120:	425b      	negs	r3, r3
    3122:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    3124:	4b1d      	ldr	r3, [pc, #116]	; (319c <trx_spi_init+0xf8>)
    3126:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    3128:	4b1d      	ldr	r3, [pc, #116]	; (31a0 <trx_spi_init+0xfc>)
    312a:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    312c:	4d1d      	ldr	r5, [pc, #116]	; (31a4 <trx_spi_init+0x100>)
    312e:	0022      	movs	r2, r4
    3130:	491d      	ldr	r1, [pc, #116]	; (31a8 <trx_spi_init+0x104>)
    3132:	0028      	movs	r0, r5
    3134:	4b1d      	ldr	r3, [pc, #116]	; (31ac <trx_spi_init+0x108>)
    3136:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3138:	682a      	ldr	r2, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    313a:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    313c:	2b00      	cmp	r3, #0
    313e:	d1fc      	bne.n	313a <trx_spi_init+0x96>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3140:	6813      	ldr	r3, [r2, #0]
    3142:	2502      	movs	r5, #2
    3144:	432b      	orrs	r3, r5
    3146:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    3148:	ac01      	add	r4, sp, #4
    314a:	0020      	movs	r0, r4
    314c:	4b18      	ldr	r3, [pc, #96]	; (31b0 <trx_spi_init+0x10c>)
    314e:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    3150:	2320      	movs	r3, #32
    3152:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    3154:	2380      	movs	r3, #128	; 0x80
    3156:	039b      	lsls	r3, r3, #14
    3158:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    315a:	7225      	strb	r5, [r4, #8]
	#if (SAML21)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    315c:	2301      	movs	r3, #1
    315e:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    3160:	2200      	movs	r2, #0
    3162:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    3164:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    3166:	0021      	movs	r1, r4
    3168:	2000      	movs	r0, #0
    316a:	4b12      	ldr	r3, [pc, #72]	; (31b4 <trx_spi_init+0x110>)
    316c:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    316e:	2200      	movs	r2, #0
    3170:	2100      	movs	r1, #0
    3172:	4811      	ldr	r0, [pc, #68]	; (31b8 <trx_spi_init+0x114>)
    3174:	4b11      	ldr	r3, [pc, #68]	; (31bc <trx_spi_init+0x118>)
    3176:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    3178:	b005      	add	sp, #20
    317a:	bd30      	pop	{r4, r5, pc}
    317c:	200008ac 	.word	0x200008ac
    3180:	200008b0 	.word	0x200008b0
    3184:	00000ccd 	.word	0x00000ccd
    3188:	41004400 	.word	0x41004400
    318c:	200008b4 	.word	0x200008b4
    3190:	00003603 	.word	0x00003603
    3194:	004c4b40 	.word	0x004c4b40
    3198:	00530005 	.word	0x00530005
    319c:	003e0005 	.word	0x003e0005
    31a0:	00520005 	.word	0x00520005
    31a4:	200008ec 	.word	0x200008ec
    31a8:	42001800 	.word	0x42001800
    31ac:	000011bd 	.word	0x000011bd
    31b0:	00000c45 	.word	0x00000c45
    31b4:	00000c59 	.word	0x00000c59
    31b8:	00003089 	.word	0x00003089
    31bc:	00000b2d 	.word	0x00000b2d

000031c0 <PhyReset>:

void PhyReset(void)
{
    31c0:	b570      	push	{r4, r5, r6, lr}
    31c2:	4b09      	ldr	r3, [pc, #36]	; (31e8 <PhyReset+0x28>)
    31c4:	001c      	movs	r4, r3
    31c6:	3480      	adds	r4, #128	; 0x80
    31c8:	2580      	movs	r5, #128	; 0x80
    31ca:	022d      	lsls	r5, r5, #8
    31cc:	61a5      	str	r5, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    31ce:	2280      	movs	r2, #128	; 0x80
    31d0:	0352      	lsls	r2, r2, #13
    31d2:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    31d4:	20a5      	movs	r0, #165	; 0xa5
    31d6:	0040      	lsls	r0, r0, #1
    31d8:	4e04      	ldr	r6, [pc, #16]	; (31ec <PhyReset+0x2c>)
    31da:	47b0      	blx	r6
    31dc:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    31de:	200a      	movs	r0, #10
    31e0:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    31e2:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    31e4:	bd70      	pop	{r4, r5, r6, pc}
    31e6:	46c0      	nop			; (mov r8, r8)
    31e8:	41004400 	.word	0x41004400
    31ec:	000009c1 	.word	0x000009c1

000031f0 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    31f0:	b570      	push	{r4, r5, r6, lr}
    31f2:	b082      	sub	sp, #8
    31f4:	0005      	movs	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    31f6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    31fa:	425a      	negs	r2, r3
    31fc:	4153      	adcs	r3, r2
    31fe:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3200:	b672      	cpsid	i
    3202:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3206:	2200      	movs	r2, #0
    3208:	4b33      	ldr	r3, [pc, #204]	; (32d8 <trx_reg_read+0xe8>)
    320a:	701a      	strb	r2, [r3, #0]
	return flags;
    320c:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    320e:	4e33      	ldr	r6, [pc, #204]	; (32dc <trx_reg_read+0xec>)
    3210:	3201      	adds	r2, #1
    3212:	4933      	ldr	r1, [pc, #204]	; (32e0 <trx_reg_read+0xf0>)
    3214:	0030      	movs	r0, r6
    3216:	4b33      	ldr	r3, [pc, #204]	; (32e4 <trx_reg_read+0xf4>)
    3218:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    321a:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    321c:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    321e:	7e1a      	ldrb	r2, [r3, #24]
    3220:	420a      	tst	r2, r1
    3222:	d0fc      	beq.n	321e <trx_reg_read+0x2e>
    3224:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3226:	07d2      	lsls	r2, r2, #31
    3228:	d502      	bpl.n	3230 <trx_reg_read+0x40>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    322a:	2280      	movs	r2, #128	; 0x80
    322c:	4315      	orrs	r5, r2
    322e:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3230:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3232:	7e1a      	ldrb	r2, [r3, #24]
    3234:	420a      	tst	r2, r1
    3236:	d0fc      	beq.n	3232 <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3238:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    323a:	7e1a      	ldrb	r2, [r3, #24]
    323c:	420a      	tst	r2, r1
    323e:	d0fc      	beq.n	323a <trx_reg_read+0x4a>
    3240:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3242:	0752      	lsls	r2, r2, #29
    3244:	d512      	bpl.n	326c <trx_reg_read+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3246:	8b5a      	ldrh	r2, [r3, #26]
    3248:	0752      	lsls	r2, r2, #29
    324a:	d501      	bpl.n	3250 <trx_reg_read+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    324c:	2204      	movs	r2, #4
    324e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3250:	4a22      	ldr	r2, [pc, #136]	; (32dc <trx_reg_read+0xec>)
    3252:	7992      	ldrb	r2, [r2, #6]
    3254:	2a01      	cmp	r2, #1
    3256:	d105      	bne.n	3264 <trx_reg_read+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    325a:	05d2      	lsls	r2, r2, #23
    325c:	0dd2      	lsrs	r2, r2, #23
    325e:	4922      	ldr	r1, [pc, #136]	; (32e8 <trx_reg_read+0xf8>)
    3260:	800a      	strh	r2, [r1, #0]
    3262:	e003      	b.n	326c <trx_reg_read+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3266:	b2d2      	uxtb	r2, r2
    3268:	491f      	ldr	r1, [pc, #124]	; (32e8 <trx_reg_read+0xf8>)
    326a:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    326c:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    326e:	7e1a      	ldrb	r2, [r3, #24]
    3270:	420a      	tst	r2, r1
    3272:	d0fc      	beq.n	326e <trx_reg_read+0x7e>
    3274:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3276:	07d2      	lsls	r2, r2, #31
    3278:	d501      	bpl.n	327e <trx_reg_read+0x8e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    327a:	2200      	movs	r2, #0
    327c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    327e:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3280:	7e1a      	ldrb	r2, [r3, #24]
    3282:	420a      	tst	r2, r1
    3284:	d0fc      	beq.n	3280 <trx_reg_read+0x90>
	}
	while (!spi_is_ready_to_read(&master)) {
    3286:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3288:	7e1a      	ldrb	r2, [r3, #24]
    328a:	420a      	tst	r2, r1
    328c:	d0fc      	beq.n	3288 <trx_reg_read+0x98>
    328e:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMR21 || SAML21
	uint16_t register_value = 0;
    3290:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3292:	0752      	lsls	r2, r2, #29
    3294:	d50e      	bpl.n	32b4 <trx_reg_read+0xc4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3296:	8b5a      	ldrh	r2, [r3, #26]
    3298:	0752      	lsls	r2, r2, #29
    329a:	d501      	bpl.n	32a0 <trx_reg_read+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    329c:	2204      	movs	r2, #4
    329e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    32a0:	4a0e      	ldr	r2, [pc, #56]	; (32dc <trx_reg_read+0xec>)
    32a2:	7992      	ldrb	r2, [r2, #6]
    32a4:	2a01      	cmp	r2, #1
    32a6:	d103      	bne.n	32b0 <trx_reg_read+0xc0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    32a8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    32aa:	05ed      	lsls	r5, r5, #23
    32ac:	0ded      	lsrs	r5, r5, #23
    32ae:	e001      	b.n	32b4 <trx_reg_read+0xc4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    32b0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    32b2:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    32b4:	2200      	movs	r2, #0
    32b6:	490a      	ldr	r1, [pc, #40]	; (32e0 <trx_reg_read+0xf0>)
    32b8:	4808      	ldr	r0, [pc, #32]	; (32dc <trx_reg_read+0xec>)
    32ba:	4b0a      	ldr	r3, [pc, #40]	; (32e4 <trx_reg_read+0xf4>)
    32bc:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    32be:	23ff      	movs	r3, #255	; 0xff
    32c0:	4223      	tst	r3, r4
    32c2:	d005      	beq.n	32d0 <trx_reg_read+0xe0>
		cpu_irq_enable();
    32c4:	2201      	movs	r2, #1
    32c6:	4b04      	ldr	r3, [pc, #16]	; (32d8 <trx_reg_read+0xe8>)
    32c8:	701a      	strb	r2, [r3, #0]
    32ca:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    32ce:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    32d0:	b2e8      	uxtb	r0, r5
}
    32d2:	b002      	add	sp, #8
    32d4:	bd70      	pop	{r4, r5, r6, pc}
    32d6:	46c0      	nop			; (mov r8, r8)
    32d8:	20000008 	.word	0x20000008
    32dc:	200008ec 	.word	0x200008ec
    32e0:	200008b0 	.word	0x200008b0
    32e4:	00001469 	.word	0x00001469
    32e8:	200008a8 	.word	0x200008a8

000032ec <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    32ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    32ee:	b083      	sub	sp, #12
    32f0:	0006      	movs	r6, r0
    32f2:	000c      	movs	r4, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    32f4:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    32f8:	425a      	negs	r2, r3
    32fa:	4153      	adcs	r3, r2
    32fc:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    32fe:	b672      	cpsid	i
    3300:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3304:	2200      	movs	r2, #0
    3306:	4b34      	ldr	r3, [pc, #208]	; (33d8 <trx_reg_write+0xec>)
    3308:	701a      	strb	r2, [r3, #0]
	return flags;
    330a:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    330c:	4f33      	ldr	r7, [pc, #204]	; (33dc <trx_reg_write+0xf0>)
    330e:	3201      	adds	r2, #1
    3310:	4933      	ldr	r1, [pc, #204]	; (33e0 <trx_reg_write+0xf4>)
    3312:	0038      	movs	r0, r7
    3314:	4b33      	ldr	r3, [pc, #204]	; (33e4 <trx_reg_write+0xf8>)
    3316:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3318:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    331a:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    331c:	7e1a      	ldrb	r2, [r3, #24]
    331e:	420a      	tst	r2, r1
    3320:	d0fc      	beq.n	331c <trx_reg_write+0x30>
    3322:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3324:	07d2      	lsls	r2, r2, #31
    3326:	d502      	bpl.n	332e <trx_reg_write+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3328:	22c0      	movs	r2, #192	; 0xc0
    332a:	4316      	orrs	r6, r2
    332c:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    332e:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3330:	7e1a      	ldrb	r2, [r3, #24]
    3332:	420a      	tst	r2, r1
    3334:	d0fc      	beq.n	3330 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3336:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3338:	7e1a      	ldrb	r2, [r3, #24]
    333a:	420a      	tst	r2, r1
    333c:	d0fc      	beq.n	3338 <trx_reg_write+0x4c>
    333e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3340:	0752      	lsls	r2, r2, #29
    3342:	d512      	bpl.n	336a <trx_reg_write+0x7e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3344:	8b5a      	ldrh	r2, [r3, #26]
    3346:	0752      	lsls	r2, r2, #29
    3348:	d501      	bpl.n	334e <trx_reg_write+0x62>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    334a:	2204      	movs	r2, #4
    334c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    334e:	4a23      	ldr	r2, [pc, #140]	; (33dc <trx_reg_write+0xf0>)
    3350:	7992      	ldrb	r2, [r2, #6]
    3352:	2a01      	cmp	r2, #1
    3354:	d105      	bne.n	3362 <trx_reg_write+0x76>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3356:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3358:	05d2      	lsls	r2, r2, #23
    335a:	0dd2      	lsrs	r2, r2, #23
    335c:	4922      	ldr	r1, [pc, #136]	; (33e8 <trx_reg_write+0xfc>)
    335e:	800a      	strh	r2, [r1, #0]
    3360:	e003      	b.n	336a <trx_reg_write+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3362:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3364:	b2d2      	uxtb	r2, r2
    3366:	4920      	ldr	r1, [pc, #128]	; (33e8 <trx_reg_write+0xfc>)
    3368:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    336a:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    336c:	7e1a      	ldrb	r2, [r3, #24]
    336e:	420a      	tst	r2, r1
    3370:	d0fc      	beq.n	336c <trx_reg_write+0x80>
    3372:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3374:	07d2      	lsls	r2, r2, #31
    3376:	d500      	bpl.n	337a <trx_reg_write+0x8e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3378:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    337a:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    337c:	7e1a      	ldrb	r2, [r3, #24]
    337e:	420a      	tst	r2, r1
    3380:	d0fc      	beq.n	337c <trx_reg_write+0x90>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3382:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3384:	7e1a      	ldrb	r2, [r3, #24]
    3386:	420a      	tst	r2, r1
    3388:	d0fc      	beq.n	3384 <trx_reg_write+0x98>
    338a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    338c:	0752      	lsls	r2, r2, #29
    338e:	d512      	bpl.n	33b6 <trx_reg_write+0xca>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3390:	8b5a      	ldrh	r2, [r3, #26]
    3392:	0752      	lsls	r2, r2, #29
    3394:	d501      	bpl.n	339a <trx_reg_write+0xae>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3396:	2204      	movs	r2, #4
    3398:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    339a:	4a10      	ldr	r2, [pc, #64]	; (33dc <trx_reg_write+0xf0>)
    339c:	7992      	ldrb	r2, [r2, #6]
    339e:	2a01      	cmp	r2, #1
    33a0:	d105      	bne.n	33ae <trx_reg_write+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    33a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33a4:	05db      	lsls	r3, r3, #23
    33a6:	0ddb      	lsrs	r3, r3, #23
    33a8:	4a0f      	ldr	r2, [pc, #60]	; (33e8 <trx_reg_write+0xfc>)
    33aa:	8013      	strh	r3, [r2, #0]
    33ac:	e003      	b.n	33b6 <trx_reg_write+0xca>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    33ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33b0:	b2db      	uxtb	r3, r3
    33b2:	4a0d      	ldr	r2, [pc, #52]	; (33e8 <trx_reg_write+0xfc>)
    33b4:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    33b6:	2200      	movs	r2, #0
    33b8:	4909      	ldr	r1, [pc, #36]	; (33e0 <trx_reg_write+0xf4>)
    33ba:	4808      	ldr	r0, [pc, #32]	; (33dc <trx_reg_write+0xf0>)
    33bc:	4b09      	ldr	r3, [pc, #36]	; (33e4 <trx_reg_write+0xf8>)
    33be:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    33c0:	23ff      	movs	r3, #255	; 0xff
    33c2:	422b      	tst	r3, r5
    33c4:	d005      	beq.n	33d2 <trx_reg_write+0xe6>
		cpu_irq_enable();
    33c6:	2201      	movs	r2, #1
    33c8:	4b03      	ldr	r3, [pc, #12]	; (33d8 <trx_reg_write+0xec>)
    33ca:	701a      	strb	r2, [r3, #0]
    33cc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    33d0:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    33d2:	b003      	add	sp, #12
    33d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33d6:	46c0      	nop			; (mov r8, r8)
    33d8:	20000008 	.word	0x20000008
    33dc:	200008ec 	.word	0x200008ec
    33e0:	200008b0 	.word	0x200008b0
    33e4:	00001469 	.word	0x00001469
    33e8:	200008a8 	.word	0x200008a8

000033ec <setup>:
#include "sys.h"
#include "TheArtist.h"
/************************************************************************/
/*                                                                      */
/************************************************************************/
void setup(void) {
    33ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// [SYSTEM INITIALIZE]
	// [NOTICE!]!! sequence of this calls is important!
	irq_initialize_vectors();
	system_init();
    33ee:	4b1b      	ldr	r3, [pc, #108]	; (345c <setup+0x70>)
    33f0:	4798      	blx	r3
	delay_init();
    33f2:	4b1b      	ldr	r3, [pc, #108]	; (3460 <setup+0x74>)
    33f4:	4798      	blx	r3
	SYS_Init();	
    33f6:	4b1b      	ldr	r3, [pc, #108]	; (3464 <setup+0x78>)
    33f8:	4798      	blx	r3
	
	artist_ultrasonic_tc_configure();
    33fa:	4b1b      	ldr	r3, [pc, #108]	; (3468 <setup+0x7c>)
    33fc:	4798      	blx	r3
	artist_scheduler_tc_configure();
    33fe:	4b1b      	ldr	r3, [pc, #108]	; (346c <setup+0x80>)
    3400:	4798      	blx	r3
	artist_configure_tc_callbacks();  
    3402:	4b1b      	ldr	r3, [pc, #108]	; (3470 <setup+0x84>)
    3404:	4798      	blx	r3
	artist_init_maze(); 
    3406:	4b1b      	ldr	r3, [pc, #108]	; (3474 <setup+0x88>)
    3408:	4798      	blx	r3

	cpu_irq_enable();
    340a:	4e1b      	ldr	r6, [pc, #108]	; (3478 <setup+0x8c>)
    340c:	2701      	movs	r7, #1
    340e:	7037      	strb	r7, [r6, #0]
    3410:	f3bf 8f5f 	dmb	sy
    3414:	b662      	cpsie	i
	
	// [ultrasonic]
	artist_ultrasonic_configure(&(artist_front.us_instance_right),
    3416:	4c19      	ldr	r4, [pc, #100]	; (347c <setup+0x90>)
    3418:	220f      	movs	r2, #15
    341a:	211c      	movs	r1, #28
    341c:	0020      	movs	r0, r4
    341e:	4d18      	ldr	r5, [pc, #96]	; (3480 <setup+0x94>)
    3420:	47a8      	blx	r5
	CONF_ARTIST_RIGHT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_center),
    3422:	0020      	movs	r0, r4
    3424:	3810      	subs	r0, #16
    3426:	220f      	movs	r2, #15
    3428:	210d      	movs	r1, #13
    342a:	47a8      	blx	r5
	CONF_ARTIST_CENTER_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_left),
    342c:	0020      	movs	r0, r4
    342e:	3808      	subs	r0, #8
    3430:	220f      	movs	r2, #15
    3432:	2117      	movs	r1, #23
    3434:	47a8      	blx	r5
	CONF_ARTIST_LEFT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_gpio_init();
    3436:	4b13      	ldr	r3, [pc, #76]	; (3484 <setup+0x98>)
    3438:	4798      	blx	r3
	
	//! [ultrasonic]
	
	
	artist_usart_configure(&(artist_front.usart_instance));
    343a:	3c4c      	subs	r4, #76	; 0x4c
    343c:	0020      	movs	r0, r4
    343e:	4b12      	ldr	r3, [pc, #72]	; (3488 <setup+0x9c>)
    3440:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    3442:	7037      	strb	r7, [r6, #0]
    3444:	f3bf 8f5f 	dmb	sy
    3448:	b662      	cpsie	i
	
	system_interrupt_enable_global();

	
	usart_read_buffer_job( &(artist_front.usart_instance),
    344a:	2205      	movs	r2, #5
    344c:	490f      	ldr	r1, [pc, #60]	; (348c <setup+0xa0>)
    344e:	0020      	movs	r0, r4
    3450:	4b0f      	ldr	r3, [pc, #60]	; (3490 <setup+0xa4>)
    3452:	4798      	blx	r3
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
	
	printf("front node setup complete\n"); 
    3454:	480f      	ldr	r0, [pc, #60]	; (3494 <setup+0xa8>)
    3456:	4b10      	ldr	r3, [pc, #64]	; (3498 <setup+0xac>)
    3458:	4798      	blx	r3
	
}
    345a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    345c:	00002449 	.word	0x00002449
    3460:	00000981 	.word	0x00000981
    3464:	00002dd9 	.word	0x00002dd9
    3468:	0000069d 	.word	0x0000069d
    346c:	000008c1 	.word	0x000008c1
    3470:	00000931 	.word	0x00000931
    3474:	00000115 	.word	0x00000115
    3478:	20000008 	.word	0x20000008
    347c:	20000748 	.word	0x20000748
    3480:	00000309 	.word	0x00000309
    3484:	00000319 	.word	0x00000319
    3488:	00000731 	.word	0x00000731
    348c:	20000760 	.word	0x20000760
    3490:	000019f1 	.word	0x000019f1
    3494:	00008bb4 	.word	0x00008bb4
    3498:	00003ff9 	.word	0x00003ff9

0000349c <main>:
	
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
int main (void) {
    349c:	b510      	push	{r4, lr}
	setup();
    349e:	4b01      	ldr	r3, [pc, #4]	; (34a4 <main+0x8>)
    34a0:	4798      	blx	r3
    34a2:	e7fe      	b.n	34a2 <main+0x6>
    34a4:	000033ed 	.word	0x000033ed

000034a8 <common_tc_delay>:
    34a8:	b510      	push	{r4, lr}
    34aa:	1c04      	adds	r4, r0, #0
    34ac:	4b13      	ldr	r3, [pc, #76]	; (34fc <common_tc_delay+0x54>)
    34ae:	4798      	blx	r3
    34b0:	4b13      	ldr	r3, [pc, #76]	; (3500 <common_tc_delay+0x58>)
    34b2:	781a      	ldrb	r2, [r3, #0]
    34b4:	4362      	muls	r2, r4
    34b6:	1881      	adds	r1, r0, r2
    34b8:	4b12      	ldr	r3, [pc, #72]	; (3504 <common_tc_delay+0x5c>)
    34ba:	6059      	str	r1, [r3, #4]
    34bc:	6859      	ldr	r1, [r3, #4]
    34be:	0c09      	lsrs	r1, r1, #16
    34c0:	6059      	str	r1, [r3, #4]
    34c2:	685b      	ldr	r3, [r3, #4]
    34c4:	2b00      	cmp	r3, #0
    34c6:	d007      	beq.n	34d8 <common_tc_delay+0x30>
    34c8:	4b0e      	ldr	r3, [pc, #56]	; (3504 <common_tc_delay+0x5c>)
    34ca:	6859      	ldr	r1, [r3, #4]
    34cc:	3201      	adds	r2, #1
    34ce:	1880      	adds	r0, r0, r2
    34d0:	8118      	strh	r0, [r3, #8]
    34d2:	4b0d      	ldr	r3, [pc, #52]	; (3508 <common_tc_delay+0x60>)
    34d4:	4798      	blx	r3
    34d6:	e004      	b.n	34e2 <common_tc_delay+0x3a>
    34d8:	1882      	adds	r2, r0, r2
    34da:	4b0a      	ldr	r3, [pc, #40]	; (3504 <common_tc_delay+0x5c>)
    34dc:	811a      	strh	r2, [r3, #8]
    34de:	4b0b      	ldr	r3, [pc, #44]	; (350c <common_tc_delay+0x64>)
    34e0:	4798      	blx	r3
    34e2:	4b08      	ldr	r3, [pc, #32]	; (3504 <common_tc_delay+0x5c>)
    34e4:	891b      	ldrh	r3, [r3, #8]
    34e6:	2b63      	cmp	r3, #99	; 0x63
    34e8:	d802      	bhi.n	34f0 <common_tc_delay+0x48>
    34ea:	3364      	adds	r3, #100	; 0x64
    34ec:	4a05      	ldr	r2, [pc, #20]	; (3504 <common_tc_delay+0x5c>)
    34ee:	8113      	strh	r3, [r2, #8]
    34f0:	4b04      	ldr	r3, [pc, #16]	; (3504 <common_tc_delay+0x5c>)
    34f2:	8918      	ldrh	r0, [r3, #8]
    34f4:	4b06      	ldr	r3, [pc, #24]	; (3510 <common_tc_delay+0x68>)
    34f6:	4798      	blx	r3
    34f8:	bd10      	pop	{r4, pc}
    34fa:	46c0      	nop			; (mov r8, r8)
    34fc:	00002f15 	.word	0x00002f15
    3500:	200008f8 	.word	0x200008f8
    3504:	20000668 	.word	0x20000668
    3508:	00002f29 	.word	0x00002f29
    350c:	00002f3d 	.word	0x00002f3d
    3510:	00002f79 	.word	0x00002f79

00003514 <common_tc_init>:
    3514:	b508      	push	{r3, lr}
    3516:	2200      	movs	r2, #0
    3518:	4b03      	ldr	r3, [pc, #12]	; (3528 <common_tc_init+0x14>)
    351a:	701a      	strb	r2, [r3, #0]
    351c:	4b03      	ldr	r3, [pc, #12]	; (352c <common_tc_init+0x18>)
    351e:	4798      	blx	r3
    3520:	4b03      	ldr	r3, [pc, #12]	; (3530 <common_tc_init+0x1c>)
    3522:	7018      	strb	r0, [r3, #0]
    3524:	bd08      	pop	{r3, pc}
    3526:	46c0      	nop			; (mov r8, r8)
    3528:	20000668 	.word	0x20000668
    352c:	00002f91 	.word	0x00002f91
    3530:	200008f8 	.word	0x200008f8

00003534 <tmr_ovf_callback>:
    3534:	b508      	push	{r3, lr}
    3536:	4b0e      	ldr	r3, [pc, #56]	; (3570 <tmr_ovf_callback+0x3c>)
    3538:	685b      	ldr	r3, [r3, #4]
    353a:	2b00      	cmp	r3, #0
    353c:	d007      	beq.n	354e <tmr_ovf_callback+0x1a>
    353e:	4a0c      	ldr	r2, [pc, #48]	; (3570 <tmr_ovf_callback+0x3c>)
    3540:	6853      	ldr	r3, [r2, #4]
    3542:	3b01      	subs	r3, #1
    3544:	6053      	str	r3, [r2, #4]
    3546:	2b00      	cmp	r3, #0
    3548:	d101      	bne.n	354e <tmr_ovf_callback+0x1a>
    354a:	4b0a      	ldr	r3, [pc, #40]	; (3574 <tmr_ovf_callback+0x40>)
    354c:	4798      	blx	r3
    354e:	4a08      	ldr	r2, [pc, #32]	; (3570 <tmr_ovf_callback+0x3c>)
    3550:	7813      	ldrb	r3, [r2, #0]
    3552:	3301      	adds	r3, #1
    3554:	b2db      	uxtb	r3, r3
    3556:	7013      	strb	r3, [r2, #0]
    3558:	4a07      	ldr	r2, [pc, #28]	; (3578 <tmr_ovf_callback+0x44>)
    355a:	7812      	ldrb	r2, [r2, #0]
    355c:	429a      	cmp	r2, r3
    355e:	d806      	bhi.n	356e <tmr_ovf_callback+0x3a>
    3560:	4b03      	ldr	r3, [pc, #12]	; (3570 <tmr_ovf_callback+0x3c>)
    3562:	2200      	movs	r2, #0
    3564:	701a      	strb	r2, [r3, #0]
    3566:	68db      	ldr	r3, [r3, #12]
    3568:	2b00      	cmp	r3, #0
    356a:	d000      	beq.n	356e <tmr_ovf_callback+0x3a>
    356c:	4798      	blx	r3
    356e:	bd08      	pop	{r3, pc}
    3570:	20000668 	.word	0x20000668
    3574:	00002f3d 	.word	0x00002f3d
    3578:	200008f8 	.word	0x200008f8

0000357c <tmr_cca_callback>:
    357c:	b508      	push	{r3, lr}
    357e:	4b04      	ldr	r3, [pc, #16]	; (3590 <tmr_cca_callback+0x14>)
    3580:	4798      	blx	r3
    3582:	4b04      	ldr	r3, [pc, #16]	; (3594 <tmr_cca_callback+0x18>)
    3584:	691b      	ldr	r3, [r3, #16]
    3586:	2b00      	cmp	r3, #0
    3588:	d000      	beq.n	358c <tmr_cca_callback+0x10>
    358a:	4798      	blx	r3
    358c:	bd08      	pop	{r3, pc}
    358e:	46c0      	nop			; (mov r8, r8)
    3590:	00002f29 	.word	0x00002f29
    3594:	20000668 	.word	0x20000668

00003598 <set_common_tc_expiry_callback>:
    3598:	4b01      	ldr	r3, [pc, #4]	; (35a0 <set_common_tc_expiry_callback+0x8>)
    359a:	6118      	str	r0, [r3, #16]
    359c:	4770      	bx	lr
    359e:	46c0      	nop			; (mov r8, r8)
    35a0:	20000668 	.word	0x20000668

000035a4 <__libc_init_array>:
    35a4:	4b0e      	ldr	r3, [pc, #56]	; (35e0 <__libc_init_array+0x3c>)
    35a6:	b570      	push	{r4, r5, r6, lr}
    35a8:	2500      	movs	r5, #0
    35aa:	001e      	movs	r6, r3
    35ac:	4c0d      	ldr	r4, [pc, #52]	; (35e4 <__libc_init_array+0x40>)
    35ae:	1ae4      	subs	r4, r4, r3
    35b0:	10a4      	asrs	r4, r4, #2
    35b2:	42a5      	cmp	r5, r4
    35b4:	d004      	beq.n	35c0 <__libc_init_array+0x1c>
    35b6:	00ab      	lsls	r3, r5, #2
    35b8:	58f3      	ldr	r3, [r6, r3]
    35ba:	4798      	blx	r3
    35bc:	3501      	adds	r5, #1
    35be:	e7f8      	b.n	35b2 <__libc_init_array+0xe>
    35c0:	f005 fc8a 	bl	8ed8 <_init>
    35c4:	4b08      	ldr	r3, [pc, #32]	; (35e8 <__libc_init_array+0x44>)
    35c6:	2500      	movs	r5, #0
    35c8:	001e      	movs	r6, r3
    35ca:	4c08      	ldr	r4, [pc, #32]	; (35ec <__libc_init_array+0x48>)
    35cc:	1ae4      	subs	r4, r4, r3
    35ce:	10a4      	asrs	r4, r4, #2
    35d0:	42a5      	cmp	r5, r4
    35d2:	d004      	beq.n	35de <__libc_init_array+0x3a>
    35d4:	00ab      	lsls	r3, r5, #2
    35d6:	58f3      	ldr	r3, [r6, r3]
    35d8:	4798      	blx	r3
    35da:	3501      	adds	r5, #1
    35dc:	e7f8      	b.n	35d0 <__libc_init_array+0x2c>
    35de:	bd70      	pop	{r4, r5, r6, pc}
    35e0:	00008ee4 	.word	0x00008ee4
    35e4:	00008ee4 	.word	0x00008ee4
    35e8:	00008ee4 	.word	0x00008ee4
    35ec:	00008ee8 	.word	0x00008ee8

000035f0 <memcpy>:
    35f0:	2300      	movs	r3, #0
    35f2:	b510      	push	{r4, lr}
    35f4:	429a      	cmp	r2, r3
    35f6:	d003      	beq.n	3600 <memcpy+0x10>
    35f8:	5ccc      	ldrb	r4, [r1, r3]
    35fa:	54c4      	strb	r4, [r0, r3]
    35fc:	3301      	adds	r3, #1
    35fe:	e7f9      	b.n	35f4 <memcpy+0x4>
    3600:	bd10      	pop	{r4, pc}

00003602 <memset>:
    3602:	0003      	movs	r3, r0
    3604:	1882      	adds	r2, r0, r2
    3606:	4293      	cmp	r3, r2
    3608:	d002      	beq.n	3610 <memset+0xe>
    360a:	7019      	strb	r1, [r3, #0]
    360c:	3301      	adds	r3, #1
    360e:	e7fa      	b.n	3606 <memset+0x4>
    3610:	4770      	bx	lr

00003612 <__cvt>:
    3612:	b5f0      	push	{r4, r5, r6, r7, lr}
    3614:	b08b      	sub	sp, #44	; 0x2c
    3616:	0014      	movs	r4, r2
    3618:	1e1d      	subs	r5, r3, #0
    361a:	9912      	ldr	r1, [sp, #72]	; 0x48
    361c:	da06      	bge.n	362c <__cvt+0x1a>
    361e:	2480      	movs	r4, #128	; 0x80
    3620:	0624      	lsls	r4, r4, #24
    3622:	191b      	adds	r3, r3, r4
    3624:	001d      	movs	r5, r3
    3626:	0014      	movs	r4, r2
    3628:	232d      	movs	r3, #45	; 0x2d
    362a:	e000      	b.n	362e <__cvt+0x1c>
    362c:	2300      	movs	r3, #0
    362e:	700b      	strb	r3, [r1, #0]
    3630:	2320      	movs	r3, #32
    3632:	9e14      	ldr	r6, [sp, #80]	; 0x50
    3634:	2203      	movs	r2, #3
    3636:	439e      	bics	r6, r3
    3638:	2e46      	cmp	r6, #70	; 0x46
    363a:	d007      	beq.n	364c <__cvt+0x3a>
    363c:	0033      	movs	r3, r6
    363e:	3b45      	subs	r3, #69	; 0x45
    3640:	4259      	negs	r1, r3
    3642:	414b      	adcs	r3, r1
    3644:	9910      	ldr	r1, [sp, #64]	; 0x40
    3646:	3a01      	subs	r2, #1
    3648:	18cb      	adds	r3, r1, r3
    364a:	9310      	str	r3, [sp, #64]	; 0x40
    364c:	ab09      	add	r3, sp, #36	; 0x24
    364e:	9304      	str	r3, [sp, #16]
    3650:	ab08      	add	r3, sp, #32
    3652:	9303      	str	r3, [sp, #12]
    3654:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3656:	9200      	str	r2, [sp, #0]
    3658:	9302      	str	r3, [sp, #8]
    365a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    365c:	0022      	movs	r2, r4
    365e:	9301      	str	r3, [sp, #4]
    3660:	002b      	movs	r3, r5
    3662:	f000 fee9 	bl	4438 <_dtoa_r>
    3666:	0007      	movs	r7, r0
    3668:	2e47      	cmp	r6, #71	; 0x47
    366a:	d102      	bne.n	3672 <__cvt+0x60>
    366c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    366e:	07db      	lsls	r3, r3, #31
    3670:	d52d      	bpl.n	36ce <__cvt+0xbc>
    3672:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3674:	18fb      	adds	r3, r7, r3
    3676:	9307      	str	r3, [sp, #28]
    3678:	2e46      	cmp	r6, #70	; 0x46
    367a:	d114      	bne.n	36a6 <__cvt+0x94>
    367c:	783b      	ldrb	r3, [r7, #0]
    367e:	2b30      	cmp	r3, #48	; 0x30
    3680:	d10c      	bne.n	369c <__cvt+0x8a>
    3682:	2200      	movs	r2, #0
    3684:	2300      	movs	r3, #0
    3686:	0020      	movs	r0, r4
    3688:	0029      	movs	r1, r5
    368a:	f002 fdd9 	bl	6240 <__aeabi_dcmpeq>
    368e:	2800      	cmp	r0, #0
    3690:	d104      	bne.n	369c <__cvt+0x8a>
    3692:	2301      	movs	r3, #1
    3694:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3696:	1a9b      	subs	r3, r3, r2
    3698:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    369a:	6013      	str	r3, [r2, #0]
    369c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    369e:	9a07      	ldr	r2, [sp, #28]
    36a0:	681b      	ldr	r3, [r3, #0]
    36a2:	18d3      	adds	r3, r2, r3
    36a4:	9307      	str	r3, [sp, #28]
    36a6:	2200      	movs	r2, #0
    36a8:	2300      	movs	r3, #0
    36aa:	0020      	movs	r0, r4
    36ac:	0029      	movs	r1, r5
    36ae:	f002 fdc7 	bl	6240 <__aeabi_dcmpeq>
    36b2:	2230      	movs	r2, #48	; 0x30
    36b4:	2800      	cmp	r0, #0
    36b6:	d002      	beq.n	36be <__cvt+0xac>
    36b8:	9b07      	ldr	r3, [sp, #28]
    36ba:	9309      	str	r3, [sp, #36]	; 0x24
    36bc:	e007      	b.n	36ce <__cvt+0xbc>
    36be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    36c0:	9907      	ldr	r1, [sp, #28]
    36c2:	4299      	cmp	r1, r3
    36c4:	d903      	bls.n	36ce <__cvt+0xbc>
    36c6:	1c59      	adds	r1, r3, #1
    36c8:	9109      	str	r1, [sp, #36]	; 0x24
    36ca:	701a      	strb	r2, [r3, #0]
    36cc:	e7f7      	b.n	36be <__cvt+0xac>
    36ce:	0038      	movs	r0, r7
    36d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    36d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
    36d4:	1bdb      	subs	r3, r3, r7
    36d6:	6013      	str	r3, [r2, #0]
    36d8:	b00b      	add	sp, #44	; 0x2c
    36da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000036dc <__exponent>:
    36dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    36de:	232b      	movs	r3, #43	; 0x2b
    36e0:	0007      	movs	r7, r0
    36e2:	000c      	movs	r4, r1
    36e4:	7002      	strb	r2, [r0, #0]
    36e6:	1c86      	adds	r6, r0, #2
    36e8:	2900      	cmp	r1, #0
    36ea:	da01      	bge.n	36f0 <__exponent+0x14>
    36ec:	232d      	movs	r3, #45	; 0x2d
    36ee:	424c      	negs	r4, r1
    36f0:	707b      	strb	r3, [r7, #1]
    36f2:	2c09      	cmp	r4, #9
    36f4:	dd1c      	ble.n	3730 <__exponent+0x54>
    36f6:	466b      	mov	r3, sp
    36f8:	1ddd      	adds	r5, r3, #7
    36fa:	0020      	movs	r0, r4
    36fc:	210a      	movs	r1, #10
    36fe:	f002 fd89 	bl	6214 <__aeabi_idivmod>
    3702:	3d01      	subs	r5, #1
    3704:	3130      	adds	r1, #48	; 0x30
    3706:	7029      	strb	r1, [r5, #0]
    3708:	0020      	movs	r0, r4
    370a:	210a      	movs	r1, #10
    370c:	f002 fc9c 	bl	6048 <__aeabi_idiv>
    3710:	1e04      	subs	r4, r0, #0
    3712:	2c09      	cmp	r4, #9
    3714:	dcf1      	bgt.n	36fa <__exponent+0x1e>
    3716:	3d01      	subs	r5, #1
    3718:	3430      	adds	r4, #48	; 0x30
    371a:	702c      	strb	r4, [r5, #0]
    371c:	466b      	mov	r3, sp
    371e:	3307      	adds	r3, #7
    3720:	0030      	movs	r0, r6
    3722:	42ab      	cmp	r3, r5
    3724:	d909      	bls.n	373a <__exponent+0x5e>
    3726:	782b      	ldrb	r3, [r5, #0]
    3728:	3501      	adds	r5, #1
    372a:	7033      	strb	r3, [r6, #0]
    372c:	3601      	adds	r6, #1
    372e:	e7f5      	b.n	371c <__exponent+0x40>
    3730:	2330      	movs	r3, #48	; 0x30
    3732:	18e4      	adds	r4, r4, r3
    3734:	7033      	strb	r3, [r6, #0]
    3736:	1cb0      	adds	r0, r6, #2
    3738:	7074      	strb	r4, [r6, #1]
    373a:	1bc0      	subs	r0, r0, r7
    373c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00003740 <_printf_float>:
    3740:	b5f0      	push	{r4, r5, r6, r7, lr}
    3742:	b095      	sub	sp, #84	; 0x54
    3744:	000c      	movs	r4, r1
    3746:	920a      	str	r2, [sp, #40]	; 0x28
    3748:	930b      	str	r3, [sp, #44]	; 0x2c
    374a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    374c:	9009      	str	r0, [sp, #36]	; 0x24
    374e:	f001 fdc1 	bl	52d4 <_localeconv_r>
    3752:	6803      	ldr	r3, [r0, #0]
    3754:	0018      	movs	r0, r3
    3756:	930d      	str	r3, [sp, #52]	; 0x34
    3758:	f000 fd12 	bl	4180 <strlen>
    375c:	2300      	movs	r3, #0
    375e:	9312      	str	r3, [sp, #72]	; 0x48
    3760:	6823      	ldr	r3, [r4, #0]
    3762:	900e      	str	r0, [sp, #56]	; 0x38
    3764:	930c      	str	r3, [sp, #48]	; 0x30
    3766:	990c      	ldr	r1, [sp, #48]	; 0x30
    3768:	7e27      	ldrb	r7, [r4, #24]
    376a:	682b      	ldr	r3, [r5, #0]
    376c:	2207      	movs	r2, #7
    376e:	05c9      	lsls	r1, r1, #23
    3770:	d501      	bpl.n	3776 <_printf_float+0x36>
    3772:	189b      	adds	r3, r3, r2
    3774:	e000      	b.n	3778 <_printf_float+0x38>
    3776:	3307      	adds	r3, #7
    3778:	4393      	bics	r3, r2
    377a:	001a      	movs	r2, r3
    377c:	3208      	adds	r2, #8
    377e:	602a      	str	r2, [r5, #0]
    3780:	681a      	ldr	r2, [r3, #0]
    3782:	685b      	ldr	r3, [r3, #4]
    3784:	64a2      	str	r2, [r4, #72]	; 0x48
    3786:	64e3      	str	r3, [r4, #76]	; 0x4c
    3788:	2201      	movs	r2, #1
    378a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    378c:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    378e:	006b      	lsls	r3, r5, #1
    3790:	085b      	lsrs	r3, r3, #1
    3792:	930f      	str	r3, [sp, #60]	; 0x3c
    3794:	4252      	negs	r2, r2
    3796:	4bc0      	ldr	r3, [pc, #768]	; (3a98 <_printf_float+0x358>)
    3798:	0030      	movs	r0, r6
    379a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    379c:	f004 ff9e 	bl	86dc <__aeabi_dcmpun>
    37a0:	2800      	cmp	r0, #0
    37a2:	d119      	bne.n	37d8 <_printf_float+0x98>
    37a4:	2201      	movs	r2, #1
    37a6:	4bbc      	ldr	r3, [pc, #752]	; (3a98 <_printf_float+0x358>)
    37a8:	4252      	negs	r2, r2
    37aa:	0030      	movs	r0, r6
    37ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
    37ae:	f002 fd57 	bl	6260 <__aeabi_dcmple>
    37b2:	2800      	cmp	r0, #0
    37b4:	d110      	bne.n	37d8 <_printf_float+0x98>
    37b6:	2200      	movs	r2, #0
    37b8:	2300      	movs	r3, #0
    37ba:	0030      	movs	r0, r6
    37bc:	0029      	movs	r1, r5
    37be:	f002 fd45 	bl	624c <__aeabi_dcmplt>
    37c2:	2800      	cmp	r0, #0
    37c4:	d003      	beq.n	37ce <_printf_float+0x8e>
    37c6:	0023      	movs	r3, r4
    37c8:	222d      	movs	r2, #45	; 0x2d
    37ca:	3343      	adds	r3, #67	; 0x43
    37cc:	701a      	strb	r2, [r3, #0]
    37ce:	4db3      	ldr	r5, [pc, #716]	; (3a9c <_printf_float+0x35c>)
    37d0:	2f47      	cmp	r7, #71	; 0x47
    37d2:	d80e      	bhi.n	37f2 <_printf_float+0xb2>
    37d4:	4db2      	ldr	r5, [pc, #712]	; (3aa0 <_printf_float+0x360>)
    37d6:	e00c      	b.n	37f2 <_printf_float+0xb2>
    37d8:	0032      	movs	r2, r6
    37da:	002b      	movs	r3, r5
    37dc:	0030      	movs	r0, r6
    37de:	0029      	movs	r1, r5
    37e0:	f004 ff7c 	bl	86dc <__aeabi_dcmpun>
    37e4:	2800      	cmp	r0, #0
    37e6:	d100      	bne.n	37ea <_printf_float+0xaa>
    37e8:	e19a      	b.n	3b20 <_printf_float+0x3e0>
    37ea:	4dae      	ldr	r5, [pc, #696]	; (3aa4 <_printf_float+0x364>)
    37ec:	2f47      	cmp	r7, #71	; 0x47
    37ee:	d800      	bhi.n	37f2 <_printf_float+0xb2>
    37f0:	4dad      	ldr	r5, [pc, #692]	; (3aa8 <_printf_float+0x368>)
    37f2:	2303      	movs	r3, #3
    37f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    37f6:	6123      	str	r3, [r4, #16]
    37f8:	3301      	adds	r3, #1
    37fa:	439a      	bics	r2, r3
    37fc:	6022      	str	r2, [r4, #0]
    37fe:	2600      	movs	r6, #0
    3800:	e042      	b.n	3888 <_printf_float+0x148>
    3802:	2f67      	cmp	r7, #103	; 0x67
    3804:	d100      	bne.n	3808 <_printf_float+0xc8>
    3806:	e193      	b.n	3b30 <_printf_float+0x3f0>
    3808:	2f47      	cmp	r7, #71	; 0x47
    380a:	d100      	bne.n	380e <_printf_float+0xce>
    380c:	e190      	b.n	3b30 <_printf_float+0x3f0>
    380e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3810:	2100      	movs	r1, #0
    3812:	4313      	orrs	r3, r2
    3814:	aa12      	add	r2, sp, #72	; 0x48
    3816:	9205      	str	r2, [sp, #20]
    3818:	aa11      	add	r2, sp, #68	; 0x44
    381a:	9203      	str	r2, [sp, #12]
    381c:	2223      	movs	r2, #35	; 0x23
    381e:	6023      	str	r3, [r4, #0]
    3820:	9106      	str	r1, [sp, #24]
    3822:	9301      	str	r3, [sp, #4]
    3824:	a908      	add	r1, sp, #32
    3826:	6863      	ldr	r3, [r4, #4]
    3828:	1852      	adds	r2, r2, r1
    382a:	9202      	str	r2, [sp, #8]
    382c:	9300      	str	r3, [sp, #0]
    382e:	0032      	movs	r2, r6
    3830:	002b      	movs	r3, r5
    3832:	9704      	str	r7, [sp, #16]
    3834:	9809      	ldr	r0, [sp, #36]	; 0x24
    3836:	f7ff feec 	bl	3612 <__cvt>
    383a:	2320      	movs	r3, #32
    383c:	003a      	movs	r2, r7
    383e:	0005      	movs	r5, r0
    3840:	439a      	bics	r2, r3
    3842:	2a47      	cmp	r2, #71	; 0x47
    3844:	d100      	bne.n	3848 <_printf_float+0x108>
    3846:	e18e      	b.n	3b66 <_printf_float+0x426>
    3848:	9911      	ldr	r1, [sp, #68]	; 0x44
    384a:	2f65      	cmp	r7, #101	; 0x65
    384c:	d900      	bls.n	3850 <_printf_float+0x110>
    384e:	e196      	b.n	3b7e <_printf_float+0x43e>
    3850:	0020      	movs	r0, r4
    3852:	3901      	subs	r1, #1
    3854:	003a      	movs	r2, r7
    3856:	3050      	adds	r0, #80	; 0x50
    3858:	9111      	str	r1, [sp, #68]	; 0x44
    385a:	f7ff ff3f 	bl	36dc <__exponent>
    385e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3860:	0006      	movs	r6, r0
    3862:	1883      	adds	r3, r0, r2
    3864:	6123      	str	r3, [r4, #16]
    3866:	2a01      	cmp	r2, #1
    3868:	dd00      	ble.n	386c <_printf_float+0x12c>
    386a:	e185      	b.n	3b78 <_printf_float+0x438>
    386c:	6822      	ldr	r2, [r4, #0]
    386e:	07d2      	lsls	r2, r2, #31
    3870:	d500      	bpl.n	3874 <_printf_float+0x134>
    3872:	e181      	b.n	3b78 <_printf_float+0x438>
    3874:	2323      	movs	r3, #35	; 0x23
    3876:	aa08      	add	r2, sp, #32
    3878:	189b      	adds	r3, r3, r2
    387a:	781b      	ldrb	r3, [r3, #0]
    387c:	2b00      	cmp	r3, #0
    387e:	d003      	beq.n	3888 <_printf_float+0x148>
    3880:	0023      	movs	r3, r4
    3882:	222d      	movs	r2, #45	; 0x2d
    3884:	3343      	adds	r3, #67	; 0x43
    3886:	701a      	strb	r2, [r3, #0]
    3888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    388a:	aa13      	add	r2, sp, #76	; 0x4c
    388c:	9300      	str	r3, [sp, #0]
    388e:	0021      	movs	r1, r4
    3890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3892:	9809      	ldr	r0, [sp, #36]	; 0x24
    3894:	f000 f9a4 	bl	3be0 <_printf_common>
    3898:	1c43      	adds	r3, r0, #1
    389a:	d102      	bne.n	38a2 <_printf_float+0x162>
    389c:	2001      	movs	r0, #1
    389e:	4240      	negs	r0, r0
    38a0:	e19b      	b.n	3bda <_printf_float+0x49a>
    38a2:	6822      	ldr	r2, [r4, #0]
    38a4:	0553      	lsls	r3, r2, #21
    38a6:	d401      	bmi.n	38ac <_printf_float+0x16c>
    38a8:	6923      	ldr	r3, [r4, #16]
    38aa:	e064      	b.n	3976 <_printf_float+0x236>
    38ac:	2f65      	cmp	r7, #101	; 0x65
    38ae:	d800      	bhi.n	38b2 <_printf_float+0x172>
    38b0:	e0cc      	b.n	3a4c <_printf_float+0x30c>
    38b2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    38b4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    38b6:	2200      	movs	r2, #0
    38b8:	2300      	movs	r3, #0
    38ba:	f002 fcc1 	bl	6240 <__aeabi_dcmpeq>
    38be:	2800      	cmp	r0, #0
    38c0:	d02c      	beq.n	391c <_printf_float+0x1dc>
    38c2:	2301      	movs	r3, #1
    38c4:	4a79      	ldr	r2, [pc, #484]	; (3aac <_printf_float+0x36c>)
    38c6:	990a      	ldr	r1, [sp, #40]	; 0x28
    38c8:	9809      	ldr	r0, [sp, #36]	; 0x24
    38ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    38cc:	47a8      	blx	r5
    38ce:	1c43      	adds	r3, r0, #1
    38d0:	d0e4      	beq.n	389c <_printf_float+0x15c>
    38d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    38d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    38d6:	4293      	cmp	r3, r2
    38d8:	db08      	blt.n	38ec <_printf_float+0x1ac>
    38da:	6823      	ldr	r3, [r4, #0]
    38dc:	07db      	lsls	r3, r3, #31
    38de:	d405      	bmi.n	38ec <_printf_float+0x1ac>
    38e0:	6823      	ldr	r3, [r4, #0]
    38e2:	2500      	movs	r5, #0
    38e4:	079b      	lsls	r3, r3, #30
    38e6:	d500      	bpl.n	38ea <_printf_float+0x1aa>
    38e8:	e10f      	b.n	3b0a <_printf_float+0x3ca>
    38ea:	e113      	b.n	3b14 <_printf_float+0x3d4>
    38ec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    38ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    38f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    38f2:	990a      	ldr	r1, [sp, #40]	; 0x28
    38f4:	9809      	ldr	r0, [sp, #36]	; 0x24
    38f6:	47a8      	blx	r5
    38f8:	2500      	movs	r5, #0
    38fa:	1c43      	adds	r3, r0, #1
    38fc:	d0ce      	beq.n	389c <_printf_float+0x15c>
    38fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3900:	3b01      	subs	r3, #1
    3902:	429d      	cmp	r5, r3
    3904:	daec      	bge.n	38e0 <_printf_float+0x1a0>
    3906:	0022      	movs	r2, r4
    3908:	2301      	movs	r3, #1
    390a:	321a      	adds	r2, #26
    390c:	990a      	ldr	r1, [sp, #40]	; 0x28
    390e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3910:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3912:	47b0      	blx	r6
    3914:	1c43      	adds	r3, r0, #1
    3916:	d0c1      	beq.n	389c <_printf_float+0x15c>
    3918:	3501      	adds	r5, #1
    391a:	e7f0      	b.n	38fe <_printf_float+0x1be>
    391c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    391e:	2b00      	cmp	r3, #0
    3920:	dc2b      	bgt.n	397a <_printf_float+0x23a>
    3922:	2301      	movs	r3, #1
    3924:	4a61      	ldr	r2, [pc, #388]	; (3aac <_printf_float+0x36c>)
    3926:	990a      	ldr	r1, [sp, #40]	; 0x28
    3928:	9809      	ldr	r0, [sp, #36]	; 0x24
    392a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    392c:	47b0      	blx	r6
    392e:	1c43      	adds	r3, r0, #1
    3930:	d0b4      	beq.n	389c <_printf_float+0x15c>
    3932:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3934:	2b00      	cmp	r3, #0
    3936:	d105      	bne.n	3944 <_printf_float+0x204>
    3938:	9b12      	ldr	r3, [sp, #72]	; 0x48
    393a:	2b00      	cmp	r3, #0
    393c:	d102      	bne.n	3944 <_printf_float+0x204>
    393e:	6823      	ldr	r3, [r4, #0]
    3940:	07db      	lsls	r3, r3, #31
    3942:	d5cd      	bpl.n	38e0 <_printf_float+0x1a0>
    3944:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3948:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    394a:	990a      	ldr	r1, [sp, #40]	; 0x28
    394c:	9809      	ldr	r0, [sp, #36]	; 0x24
    394e:	47b0      	blx	r6
    3950:	2600      	movs	r6, #0
    3952:	1c43      	adds	r3, r0, #1
    3954:	d0a2      	beq.n	389c <_printf_float+0x15c>
    3956:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3958:	425b      	negs	r3, r3
    395a:	429e      	cmp	r6, r3
    395c:	da0a      	bge.n	3974 <_printf_float+0x234>
    395e:	0022      	movs	r2, r4
    3960:	2301      	movs	r3, #1
    3962:	321a      	adds	r2, #26
    3964:	990a      	ldr	r1, [sp, #40]	; 0x28
    3966:	9809      	ldr	r0, [sp, #36]	; 0x24
    3968:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    396a:	47b8      	blx	r7
    396c:	1c43      	adds	r3, r0, #1
    396e:	d095      	beq.n	389c <_printf_float+0x15c>
    3970:	3601      	adds	r6, #1
    3972:	e7f0      	b.n	3956 <_printf_float+0x216>
    3974:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3976:	002a      	movs	r2, r5
    3978:	e0ac      	b.n	3ad4 <_printf_float+0x394>
    397a:	6da3      	ldr	r3, [r4, #88]	; 0x58
    397c:	9e12      	ldr	r6, [sp, #72]	; 0x48
    397e:	429e      	cmp	r6, r3
    3980:	dd00      	ble.n	3984 <_printf_float+0x244>
    3982:	001e      	movs	r6, r3
    3984:	2e00      	cmp	r6, #0
    3986:	dc05      	bgt.n	3994 <_printf_float+0x254>
    3988:	2300      	movs	r3, #0
    398a:	930c      	str	r3, [sp, #48]	; 0x30
    398c:	43f3      	mvns	r3, r6
    398e:	17db      	asrs	r3, r3, #31
    3990:	930f      	str	r3, [sp, #60]	; 0x3c
    3992:	e015      	b.n	39c0 <_printf_float+0x280>
    3994:	0033      	movs	r3, r6
    3996:	002a      	movs	r2, r5
    3998:	990a      	ldr	r1, [sp, #40]	; 0x28
    399a:	9809      	ldr	r0, [sp, #36]	; 0x24
    399c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    399e:	47b8      	blx	r7
    39a0:	1c43      	adds	r3, r0, #1
    39a2:	d1f1      	bne.n	3988 <_printf_float+0x248>
    39a4:	e77a      	b.n	389c <_printf_float+0x15c>
    39a6:	0022      	movs	r2, r4
    39a8:	2301      	movs	r3, #1
    39aa:	321a      	adds	r2, #26
    39ac:	990a      	ldr	r1, [sp, #40]	; 0x28
    39ae:	9809      	ldr	r0, [sp, #36]	; 0x24
    39b0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    39b2:	47b8      	blx	r7
    39b4:	1c43      	adds	r3, r0, #1
    39b6:	d100      	bne.n	39ba <_printf_float+0x27a>
    39b8:	e770      	b.n	389c <_printf_float+0x15c>
    39ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    39bc:	3301      	adds	r3, #1
    39be:	930c      	str	r3, [sp, #48]	; 0x30
    39c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    39c2:	6da2      	ldr	r2, [r4, #88]	; 0x58
    39c4:	990c      	ldr	r1, [sp, #48]	; 0x30
    39c6:	4033      	ands	r3, r6
    39c8:	1ad3      	subs	r3, r2, r3
    39ca:	4299      	cmp	r1, r3
    39cc:	dbeb      	blt.n	39a6 <_printf_float+0x266>
    39ce:	18ae      	adds	r6, r5, r2
    39d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    39d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    39d4:	4293      	cmp	r3, r2
    39d6:	db0d      	blt.n	39f4 <_printf_float+0x2b4>
    39d8:	6823      	ldr	r3, [r4, #0]
    39da:	07db      	lsls	r3, r3, #31
    39dc:	d40a      	bmi.n	39f4 <_printf_float+0x2b4>
    39de:	9b12      	ldr	r3, [sp, #72]	; 0x48
    39e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    39e2:	18ed      	adds	r5, r5, r3
    39e4:	1bad      	subs	r5, r5, r6
    39e6:	1a9b      	subs	r3, r3, r2
    39e8:	429d      	cmp	r5, r3
    39ea:	dd00      	ble.n	39ee <_printf_float+0x2ae>
    39ec:	001d      	movs	r5, r3
    39ee:	2d00      	cmp	r5, #0
    39f0:	dc09      	bgt.n	3a06 <_printf_float+0x2c6>
    39f2:	e011      	b.n	3a18 <_printf_float+0x2d8>
    39f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    39f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    39f8:	990a      	ldr	r1, [sp, #40]	; 0x28
    39fa:	9809      	ldr	r0, [sp, #36]	; 0x24
    39fc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    39fe:	47b8      	blx	r7
    3a00:	1c43      	adds	r3, r0, #1
    3a02:	d1ec      	bne.n	39de <_printf_float+0x29e>
    3a04:	e74a      	b.n	389c <_printf_float+0x15c>
    3a06:	002b      	movs	r3, r5
    3a08:	0032      	movs	r2, r6
    3a0a:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a0e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3a10:	47b0      	blx	r6
    3a12:	1c43      	adds	r3, r0, #1
    3a14:	d100      	bne.n	3a18 <_printf_float+0x2d8>
    3a16:	e741      	b.n	389c <_printf_float+0x15c>
    3a18:	43ef      	mvns	r7, r5
    3a1a:	17fb      	asrs	r3, r7, #31
    3a1c:	2600      	movs	r6, #0
    3a1e:	930c      	str	r3, [sp, #48]	; 0x30
    3a20:	e00a      	b.n	3a38 <_printf_float+0x2f8>
    3a22:	0022      	movs	r2, r4
    3a24:	2301      	movs	r3, #1
    3a26:	321a      	adds	r2, #26
    3a28:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a2a:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a2c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3a2e:	47b8      	blx	r7
    3a30:	1c43      	adds	r3, r0, #1
    3a32:	d100      	bne.n	3a36 <_printf_float+0x2f6>
    3a34:	e732      	b.n	389c <_printf_float+0x15c>
    3a36:	3601      	adds	r6, #1
    3a38:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3a3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3a3c:	990c      	ldr	r1, [sp, #48]	; 0x30
    3a3e:	1a9b      	subs	r3, r3, r2
    3a40:	002a      	movs	r2, r5
    3a42:	400a      	ands	r2, r1
    3a44:	1a9b      	subs	r3, r3, r2
    3a46:	429e      	cmp	r6, r3
    3a48:	dbeb      	blt.n	3a22 <_printf_float+0x2e2>
    3a4a:	e749      	b.n	38e0 <_printf_float+0x1a0>
    3a4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3a4e:	2b01      	cmp	r3, #1
    3a50:	dc02      	bgt.n	3a58 <_printf_float+0x318>
    3a52:	2301      	movs	r3, #1
    3a54:	421a      	tst	r2, r3
    3a56:	d045      	beq.n	3ae4 <_printf_float+0x3a4>
    3a58:	2301      	movs	r3, #1
    3a5a:	002a      	movs	r2, r5
    3a5c:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a5e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a60:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3a62:	47b8      	blx	r7
    3a64:	1c43      	adds	r3, r0, #1
    3a66:	d100      	bne.n	3a6a <_printf_float+0x32a>
    3a68:	e718      	b.n	389c <_printf_float+0x15c>
    3a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3a6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3a6e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a70:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a72:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3a74:	47b8      	blx	r7
    3a76:	1c43      	adds	r3, r0, #1
    3a78:	d100      	bne.n	3a7c <_printf_float+0x33c>
    3a7a:	e70f      	b.n	389c <_printf_float+0x15c>
    3a7c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    3a7e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    3a80:	2200      	movs	r2, #0
    3a82:	2300      	movs	r3, #0
    3a84:	f002 fbdc 	bl	6240 <__aeabi_dcmpeq>
    3a88:	2800      	cmp	r0, #0
    3a8a:	d001      	beq.n	3a90 <_printf_float+0x350>
    3a8c:	2500      	movs	r5, #0
    3a8e:	e01a      	b.n	3ac6 <_printf_float+0x386>
    3a90:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3a92:	1c6a      	adds	r2, r5, #1
    3a94:	3b01      	subs	r3, #1
    3a96:	e026      	b.n	3ae6 <_printf_float+0x3a6>
    3a98:	7fefffff 	.word	0x7fefffff
    3a9c:	00008bdc 	.word	0x00008bdc
    3aa0:	00008bd8 	.word	0x00008bd8
    3aa4:	00008be4 	.word	0x00008be4
    3aa8:	00008be0 	.word	0x00008be0
    3aac:	00008be8 	.word	0x00008be8
    3ab0:	0022      	movs	r2, r4
    3ab2:	2301      	movs	r3, #1
    3ab4:	321a      	adds	r2, #26
    3ab6:	990a      	ldr	r1, [sp, #40]	; 0x28
    3ab8:	9809      	ldr	r0, [sp, #36]	; 0x24
    3aba:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3abc:	47b8      	blx	r7
    3abe:	1c43      	adds	r3, r0, #1
    3ac0:	d100      	bne.n	3ac4 <_printf_float+0x384>
    3ac2:	e6eb      	b.n	389c <_printf_float+0x15c>
    3ac4:	3501      	adds	r5, #1
    3ac6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3ac8:	3b01      	subs	r3, #1
    3aca:	429d      	cmp	r5, r3
    3acc:	dbf0      	blt.n	3ab0 <_printf_float+0x370>
    3ace:	0022      	movs	r2, r4
    3ad0:	0033      	movs	r3, r6
    3ad2:	3250      	adds	r2, #80	; 0x50
    3ad4:	990a      	ldr	r1, [sp, #40]	; 0x28
    3ad6:	9809      	ldr	r0, [sp, #36]	; 0x24
    3ad8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3ada:	47a8      	blx	r5
    3adc:	1c43      	adds	r3, r0, #1
    3ade:	d000      	beq.n	3ae2 <_printf_float+0x3a2>
    3ae0:	e6fe      	b.n	38e0 <_printf_float+0x1a0>
    3ae2:	e6db      	b.n	389c <_printf_float+0x15c>
    3ae4:	002a      	movs	r2, r5
    3ae6:	990a      	ldr	r1, [sp, #40]	; 0x28
    3ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
    3aea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3aec:	47a8      	blx	r5
    3aee:	1c43      	adds	r3, r0, #1
    3af0:	d1ed      	bne.n	3ace <_printf_float+0x38e>
    3af2:	e6d3      	b.n	389c <_printf_float+0x15c>
    3af4:	0022      	movs	r2, r4
    3af6:	2301      	movs	r3, #1
    3af8:	3219      	adds	r2, #25
    3afa:	990a      	ldr	r1, [sp, #40]	; 0x28
    3afc:	9809      	ldr	r0, [sp, #36]	; 0x24
    3afe:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3b00:	47b0      	blx	r6
    3b02:	1c43      	adds	r3, r0, #1
    3b04:	d100      	bne.n	3b08 <_printf_float+0x3c8>
    3b06:	e6c9      	b.n	389c <_printf_float+0x15c>
    3b08:	3501      	adds	r5, #1
    3b0a:	68e3      	ldr	r3, [r4, #12]
    3b0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3b0e:	1a9b      	subs	r3, r3, r2
    3b10:	429d      	cmp	r5, r3
    3b12:	dbef      	blt.n	3af4 <_printf_float+0x3b4>
    3b14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3b16:	68e0      	ldr	r0, [r4, #12]
    3b18:	4298      	cmp	r0, r3
    3b1a:	da5e      	bge.n	3bda <_printf_float+0x49a>
    3b1c:	0018      	movs	r0, r3
    3b1e:	e05c      	b.n	3bda <_printf_float+0x49a>
    3b20:	2380      	movs	r3, #128	; 0x80
    3b22:	6862      	ldr	r2, [r4, #4]
    3b24:	00db      	lsls	r3, r3, #3
    3b26:	1c51      	adds	r1, r2, #1
    3b28:	d000      	beq.n	3b2c <_printf_float+0x3ec>
    3b2a:	e66a      	b.n	3802 <_printf_float+0xc2>
    3b2c:	3207      	adds	r2, #7
    3b2e:	e002      	b.n	3b36 <_printf_float+0x3f6>
    3b30:	2a00      	cmp	r2, #0
    3b32:	d102      	bne.n	3b3a <_printf_float+0x3fa>
    3b34:	2201      	movs	r2, #1
    3b36:	6062      	str	r2, [r4, #4]
    3b38:	e669      	b.n	380e <_printf_float+0xce>
    3b3a:	990c      	ldr	r1, [sp, #48]	; 0x30
    3b3c:	a808      	add	r0, sp, #32
    3b3e:	430b      	orrs	r3, r1
    3b40:	2100      	movs	r1, #0
    3b42:	9106      	str	r1, [sp, #24]
    3b44:	a912      	add	r1, sp, #72	; 0x48
    3b46:	9105      	str	r1, [sp, #20]
    3b48:	a911      	add	r1, sp, #68	; 0x44
    3b4a:	9103      	str	r1, [sp, #12]
    3b4c:	2123      	movs	r1, #35	; 0x23
    3b4e:	1809      	adds	r1, r1, r0
    3b50:	6023      	str	r3, [r4, #0]
    3b52:	9301      	str	r3, [sp, #4]
    3b54:	9200      	str	r2, [sp, #0]
    3b56:	002b      	movs	r3, r5
    3b58:	9704      	str	r7, [sp, #16]
    3b5a:	9102      	str	r1, [sp, #8]
    3b5c:	0032      	movs	r2, r6
    3b5e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3b60:	f7ff fd57 	bl	3612 <__cvt>
    3b64:	0005      	movs	r5, r0
    3b66:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3b68:	1cda      	adds	r2, r3, #3
    3b6a:	db02      	blt.n	3b72 <_printf_float+0x432>
    3b6c:	6862      	ldr	r2, [r4, #4]
    3b6e:	4293      	cmp	r3, r2
    3b70:	dd1c      	ble.n	3bac <_printf_float+0x46c>
    3b72:	3f02      	subs	r7, #2
    3b74:	b2ff      	uxtb	r7, r7
    3b76:	e667      	b.n	3848 <_printf_float+0x108>
    3b78:	3301      	adds	r3, #1
    3b7a:	6123      	str	r3, [r4, #16]
    3b7c:	e67a      	b.n	3874 <_printf_float+0x134>
    3b7e:	2f66      	cmp	r7, #102	; 0x66
    3b80:	d115      	bne.n	3bae <_printf_float+0x46e>
    3b82:	6863      	ldr	r3, [r4, #4]
    3b84:	2900      	cmp	r1, #0
    3b86:	dd09      	ble.n	3b9c <_printf_float+0x45c>
    3b88:	6121      	str	r1, [r4, #16]
    3b8a:	2b00      	cmp	r3, #0
    3b8c:	d102      	bne.n	3b94 <_printf_float+0x454>
    3b8e:	6822      	ldr	r2, [r4, #0]
    3b90:	07d2      	lsls	r2, r2, #31
    3b92:	d51e      	bpl.n	3bd2 <_printf_float+0x492>
    3b94:	3301      	adds	r3, #1
    3b96:	1859      	adds	r1, r3, r1
    3b98:	6121      	str	r1, [r4, #16]
    3b9a:	e01a      	b.n	3bd2 <_printf_float+0x492>
    3b9c:	2b00      	cmp	r3, #0
    3b9e:	d103      	bne.n	3ba8 <_printf_float+0x468>
    3ba0:	2201      	movs	r2, #1
    3ba2:	6821      	ldr	r1, [r4, #0]
    3ba4:	4211      	tst	r1, r2
    3ba6:	d013      	beq.n	3bd0 <_printf_float+0x490>
    3ba8:	1c9a      	adds	r2, r3, #2
    3baa:	e011      	b.n	3bd0 <_printf_float+0x490>
    3bac:	2767      	movs	r7, #103	; 0x67
    3bae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3bb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3bb2:	4293      	cmp	r3, r2
    3bb4:	db06      	blt.n	3bc4 <_printf_float+0x484>
    3bb6:	6822      	ldr	r2, [r4, #0]
    3bb8:	6123      	str	r3, [r4, #16]
    3bba:	07d2      	lsls	r2, r2, #31
    3bbc:	d509      	bpl.n	3bd2 <_printf_float+0x492>
    3bbe:	3301      	adds	r3, #1
    3bc0:	6123      	str	r3, [r4, #16]
    3bc2:	e006      	b.n	3bd2 <_printf_float+0x492>
    3bc4:	2101      	movs	r1, #1
    3bc6:	2b00      	cmp	r3, #0
    3bc8:	dc01      	bgt.n	3bce <_printf_float+0x48e>
    3bca:	1849      	adds	r1, r1, r1
    3bcc:	1ac9      	subs	r1, r1, r3
    3bce:	188a      	adds	r2, r1, r2
    3bd0:	6122      	str	r2, [r4, #16]
    3bd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3bd4:	2600      	movs	r6, #0
    3bd6:	65a3      	str	r3, [r4, #88]	; 0x58
    3bd8:	e64c      	b.n	3874 <_printf_float+0x134>
    3bda:	b015      	add	sp, #84	; 0x54
    3bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bde:	46c0      	nop			; (mov r8, r8)

00003be0 <_printf_common>:
    3be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3be2:	0017      	movs	r7, r2
    3be4:	9301      	str	r3, [sp, #4]
    3be6:	688a      	ldr	r2, [r1, #8]
    3be8:	690b      	ldr	r3, [r1, #16]
    3bea:	9000      	str	r0, [sp, #0]
    3bec:	000c      	movs	r4, r1
    3bee:	4293      	cmp	r3, r2
    3bf0:	da00      	bge.n	3bf4 <_printf_common+0x14>
    3bf2:	0013      	movs	r3, r2
    3bf4:	0022      	movs	r2, r4
    3bf6:	603b      	str	r3, [r7, #0]
    3bf8:	3243      	adds	r2, #67	; 0x43
    3bfa:	7812      	ldrb	r2, [r2, #0]
    3bfc:	2a00      	cmp	r2, #0
    3bfe:	d001      	beq.n	3c04 <_printf_common+0x24>
    3c00:	3301      	adds	r3, #1
    3c02:	603b      	str	r3, [r7, #0]
    3c04:	6823      	ldr	r3, [r4, #0]
    3c06:	069b      	lsls	r3, r3, #26
    3c08:	d502      	bpl.n	3c10 <_printf_common+0x30>
    3c0a:	683b      	ldr	r3, [r7, #0]
    3c0c:	3302      	adds	r3, #2
    3c0e:	603b      	str	r3, [r7, #0]
    3c10:	2506      	movs	r5, #6
    3c12:	6823      	ldr	r3, [r4, #0]
    3c14:	401d      	ands	r5, r3
    3c16:	d01e      	beq.n	3c56 <_printf_common+0x76>
    3c18:	0023      	movs	r3, r4
    3c1a:	3343      	adds	r3, #67	; 0x43
    3c1c:	781b      	ldrb	r3, [r3, #0]
    3c1e:	1e5a      	subs	r2, r3, #1
    3c20:	4193      	sbcs	r3, r2
    3c22:	6822      	ldr	r2, [r4, #0]
    3c24:	0692      	lsls	r2, r2, #26
    3c26:	d51c      	bpl.n	3c62 <_printf_common+0x82>
    3c28:	2030      	movs	r0, #48	; 0x30
    3c2a:	18e1      	adds	r1, r4, r3
    3c2c:	3143      	adds	r1, #67	; 0x43
    3c2e:	7008      	strb	r0, [r1, #0]
    3c30:	0021      	movs	r1, r4
    3c32:	1c5a      	adds	r2, r3, #1
    3c34:	3145      	adds	r1, #69	; 0x45
    3c36:	7809      	ldrb	r1, [r1, #0]
    3c38:	18a2      	adds	r2, r4, r2
    3c3a:	3243      	adds	r2, #67	; 0x43
    3c3c:	3302      	adds	r3, #2
    3c3e:	7011      	strb	r1, [r2, #0]
    3c40:	e00f      	b.n	3c62 <_printf_common+0x82>
    3c42:	0022      	movs	r2, r4
    3c44:	2301      	movs	r3, #1
    3c46:	3219      	adds	r2, #25
    3c48:	9901      	ldr	r1, [sp, #4]
    3c4a:	9800      	ldr	r0, [sp, #0]
    3c4c:	9e08      	ldr	r6, [sp, #32]
    3c4e:	47b0      	blx	r6
    3c50:	1c43      	adds	r3, r0, #1
    3c52:	d00e      	beq.n	3c72 <_printf_common+0x92>
    3c54:	3501      	adds	r5, #1
    3c56:	68e3      	ldr	r3, [r4, #12]
    3c58:	683a      	ldr	r2, [r7, #0]
    3c5a:	1a9b      	subs	r3, r3, r2
    3c5c:	429d      	cmp	r5, r3
    3c5e:	dbf0      	blt.n	3c42 <_printf_common+0x62>
    3c60:	e7da      	b.n	3c18 <_printf_common+0x38>
    3c62:	0022      	movs	r2, r4
    3c64:	9901      	ldr	r1, [sp, #4]
    3c66:	3243      	adds	r2, #67	; 0x43
    3c68:	9800      	ldr	r0, [sp, #0]
    3c6a:	9d08      	ldr	r5, [sp, #32]
    3c6c:	47a8      	blx	r5
    3c6e:	1c43      	adds	r3, r0, #1
    3c70:	d102      	bne.n	3c78 <_printf_common+0x98>
    3c72:	2001      	movs	r0, #1
    3c74:	4240      	negs	r0, r0
    3c76:	e020      	b.n	3cba <_printf_common+0xda>
    3c78:	2306      	movs	r3, #6
    3c7a:	6820      	ldr	r0, [r4, #0]
    3c7c:	68e1      	ldr	r1, [r4, #12]
    3c7e:	683a      	ldr	r2, [r7, #0]
    3c80:	4003      	ands	r3, r0
    3c82:	2500      	movs	r5, #0
    3c84:	2b04      	cmp	r3, #4
    3c86:	d103      	bne.n	3c90 <_printf_common+0xb0>
    3c88:	1a8d      	subs	r5, r1, r2
    3c8a:	43eb      	mvns	r3, r5
    3c8c:	17db      	asrs	r3, r3, #31
    3c8e:	401d      	ands	r5, r3
    3c90:	68a3      	ldr	r3, [r4, #8]
    3c92:	6922      	ldr	r2, [r4, #16]
    3c94:	4293      	cmp	r3, r2
    3c96:	dd01      	ble.n	3c9c <_printf_common+0xbc>
    3c98:	1a9b      	subs	r3, r3, r2
    3c9a:	18ed      	adds	r5, r5, r3
    3c9c:	2700      	movs	r7, #0
    3c9e:	42bd      	cmp	r5, r7
    3ca0:	d00a      	beq.n	3cb8 <_printf_common+0xd8>
    3ca2:	0022      	movs	r2, r4
    3ca4:	2301      	movs	r3, #1
    3ca6:	321a      	adds	r2, #26
    3ca8:	9901      	ldr	r1, [sp, #4]
    3caa:	9800      	ldr	r0, [sp, #0]
    3cac:	9e08      	ldr	r6, [sp, #32]
    3cae:	47b0      	blx	r6
    3cb0:	1c43      	adds	r3, r0, #1
    3cb2:	d0de      	beq.n	3c72 <_printf_common+0x92>
    3cb4:	3701      	adds	r7, #1
    3cb6:	e7f2      	b.n	3c9e <_printf_common+0xbe>
    3cb8:	2000      	movs	r0, #0
    3cba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00003cbc <_printf_i>:
    3cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cbe:	b08b      	sub	sp, #44	; 0x2c
    3cc0:	9206      	str	r2, [sp, #24]
    3cc2:	000a      	movs	r2, r1
    3cc4:	3243      	adds	r2, #67	; 0x43
    3cc6:	9307      	str	r3, [sp, #28]
    3cc8:	9005      	str	r0, [sp, #20]
    3cca:	9204      	str	r2, [sp, #16]
    3ccc:	7e0a      	ldrb	r2, [r1, #24]
    3cce:	000c      	movs	r4, r1
    3cd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3cd2:	2a6e      	cmp	r2, #110	; 0x6e
    3cd4:	d100      	bne.n	3cd8 <_printf_i+0x1c>
    3cd6:	e0ab      	b.n	3e30 <_printf_i+0x174>
    3cd8:	d811      	bhi.n	3cfe <_printf_i+0x42>
    3cda:	2a63      	cmp	r2, #99	; 0x63
    3cdc:	d022      	beq.n	3d24 <_printf_i+0x68>
    3cde:	d809      	bhi.n	3cf4 <_printf_i+0x38>
    3ce0:	2a00      	cmp	r2, #0
    3ce2:	d100      	bne.n	3ce6 <_printf_i+0x2a>
    3ce4:	e0b5      	b.n	3e52 <_printf_i+0x196>
    3ce6:	2a58      	cmp	r2, #88	; 0x58
    3ce8:	d000      	beq.n	3cec <_printf_i+0x30>
    3cea:	e0c5      	b.n	3e78 <_printf_i+0x1bc>
    3cec:	3145      	adds	r1, #69	; 0x45
    3cee:	700a      	strb	r2, [r1, #0]
    3cf0:	4a81      	ldr	r2, [pc, #516]	; (3ef8 <_printf_i+0x23c>)
    3cf2:	e04f      	b.n	3d94 <_printf_i+0xd8>
    3cf4:	2a64      	cmp	r2, #100	; 0x64
    3cf6:	d01d      	beq.n	3d34 <_printf_i+0x78>
    3cf8:	2a69      	cmp	r2, #105	; 0x69
    3cfa:	d01b      	beq.n	3d34 <_printf_i+0x78>
    3cfc:	e0bc      	b.n	3e78 <_printf_i+0x1bc>
    3cfe:	2a73      	cmp	r2, #115	; 0x73
    3d00:	d100      	bne.n	3d04 <_printf_i+0x48>
    3d02:	e0aa      	b.n	3e5a <_printf_i+0x19e>
    3d04:	d809      	bhi.n	3d1a <_printf_i+0x5e>
    3d06:	2a6f      	cmp	r2, #111	; 0x6f
    3d08:	d029      	beq.n	3d5e <_printf_i+0xa2>
    3d0a:	2a70      	cmp	r2, #112	; 0x70
    3d0c:	d000      	beq.n	3d10 <_printf_i+0x54>
    3d0e:	e0b3      	b.n	3e78 <_printf_i+0x1bc>
    3d10:	2220      	movs	r2, #32
    3d12:	6809      	ldr	r1, [r1, #0]
    3d14:	430a      	orrs	r2, r1
    3d16:	6022      	str	r2, [r4, #0]
    3d18:	e037      	b.n	3d8a <_printf_i+0xce>
    3d1a:	2a75      	cmp	r2, #117	; 0x75
    3d1c:	d01f      	beq.n	3d5e <_printf_i+0xa2>
    3d1e:	2a78      	cmp	r2, #120	; 0x78
    3d20:	d033      	beq.n	3d8a <_printf_i+0xce>
    3d22:	e0a9      	b.n	3e78 <_printf_i+0x1bc>
    3d24:	000e      	movs	r6, r1
    3d26:	681a      	ldr	r2, [r3, #0]
    3d28:	3642      	adds	r6, #66	; 0x42
    3d2a:	1d11      	adds	r1, r2, #4
    3d2c:	6019      	str	r1, [r3, #0]
    3d2e:	6813      	ldr	r3, [r2, #0]
    3d30:	7033      	strb	r3, [r6, #0]
    3d32:	e0a4      	b.n	3e7e <_printf_i+0x1c2>
    3d34:	6821      	ldr	r1, [r4, #0]
    3d36:	681a      	ldr	r2, [r3, #0]
    3d38:	0608      	lsls	r0, r1, #24
    3d3a:	d406      	bmi.n	3d4a <_printf_i+0x8e>
    3d3c:	0649      	lsls	r1, r1, #25
    3d3e:	d504      	bpl.n	3d4a <_printf_i+0x8e>
    3d40:	1d11      	adds	r1, r2, #4
    3d42:	6019      	str	r1, [r3, #0]
    3d44:	2300      	movs	r3, #0
    3d46:	5ed5      	ldrsh	r5, [r2, r3]
    3d48:	e002      	b.n	3d50 <_printf_i+0x94>
    3d4a:	1d11      	adds	r1, r2, #4
    3d4c:	6019      	str	r1, [r3, #0]
    3d4e:	6815      	ldr	r5, [r2, #0]
    3d50:	2d00      	cmp	r5, #0
    3d52:	da3b      	bge.n	3dcc <_printf_i+0x110>
    3d54:	232d      	movs	r3, #45	; 0x2d
    3d56:	9a04      	ldr	r2, [sp, #16]
    3d58:	426d      	negs	r5, r5
    3d5a:	7013      	strb	r3, [r2, #0]
    3d5c:	e036      	b.n	3dcc <_printf_i+0x110>
    3d5e:	6821      	ldr	r1, [r4, #0]
    3d60:	681a      	ldr	r2, [r3, #0]
    3d62:	0608      	lsls	r0, r1, #24
    3d64:	d406      	bmi.n	3d74 <_printf_i+0xb8>
    3d66:	0649      	lsls	r1, r1, #25
    3d68:	d504      	bpl.n	3d74 <_printf_i+0xb8>
    3d6a:	6815      	ldr	r5, [r2, #0]
    3d6c:	1d11      	adds	r1, r2, #4
    3d6e:	6019      	str	r1, [r3, #0]
    3d70:	b2ad      	uxth	r5, r5
    3d72:	e002      	b.n	3d7a <_printf_i+0xbe>
    3d74:	1d11      	adds	r1, r2, #4
    3d76:	6019      	str	r1, [r3, #0]
    3d78:	6815      	ldr	r5, [r2, #0]
    3d7a:	4b5f      	ldr	r3, [pc, #380]	; (3ef8 <_printf_i+0x23c>)
    3d7c:	7e22      	ldrb	r2, [r4, #24]
    3d7e:	9303      	str	r3, [sp, #12]
    3d80:	2708      	movs	r7, #8
    3d82:	2a6f      	cmp	r2, #111	; 0x6f
    3d84:	d01d      	beq.n	3dc2 <_printf_i+0x106>
    3d86:	270a      	movs	r7, #10
    3d88:	e01b      	b.n	3dc2 <_printf_i+0x106>
    3d8a:	0022      	movs	r2, r4
    3d8c:	2178      	movs	r1, #120	; 0x78
    3d8e:	3245      	adds	r2, #69	; 0x45
    3d90:	7011      	strb	r1, [r2, #0]
    3d92:	4a5a      	ldr	r2, [pc, #360]	; (3efc <_printf_i+0x240>)
    3d94:	6819      	ldr	r1, [r3, #0]
    3d96:	9203      	str	r2, [sp, #12]
    3d98:	1d08      	adds	r0, r1, #4
    3d9a:	6822      	ldr	r2, [r4, #0]
    3d9c:	6018      	str	r0, [r3, #0]
    3d9e:	680d      	ldr	r5, [r1, #0]
    3da0:	0610      	lsls	r0, r2, #24
    3da2:	d402      	bmi.n	3daa <_printf_i+0xee>
    3da4:	0650      	lsls	r0, r2, #25
    3da6:	d500      	bpl.n	3daa <_printf_i+0xee>
    3da8:	b2ad      	uxth	r5, r5
    3daa:	07d3      	lsls	r3, r2, #31
    3dac:	d502      	bpl.n	3db4 <_printf_i+0xf8>
    3dae:	2320      	movs	r3, #32
    3db0:	431a      	orrs	r2, r3
    3db2:	6022      	str	r2, [r4, #0]
    3db4:	2710      	movs	r7, #16
    3db6:	2d00      	cmp	r5, #0
    3db8:	d103      	bne.n	3dc2 <_printf_i+0x106>
    3dba:	2320      	movs	r3, #32
    3dbc:	6822      	ldr	r2, [r4, #0]
    3dbe:	439a      	bics	r2, r3
    3dc0:	6022      	str	r2, [r4, #0]
    3dc2:	0023      	movs	r3, r4
    3dc4:	2200      	movs	r2, #0
    3dc6:	3343      	adds	r3, #67	; 0x43
    3dc8:	701a      	strb	r2, [r3, #0]
    3dca:	e002      	b.n	3dd2 <_printf_i+0x116>
    3dcc:	270a      	movs	r7, #10
    3dce:	4b4a      	ldr	r3, [pc, #296]	; (3ef8 <_printf_i+0x23c>)
    3dd0:	9303      	str	r3, [sp, #12]
    3dd2:	6863      	ldr	r3, [r4, #4]
    3dd4:	60a3      	str	r3, [r4, #8]
    3dd6:	2b00      	cmp	r3, #0
    3dd8:	db09      	blt.n	3dee <_printf_i+0x132>
    3dda:	2204      	movs	r2, #4
    3ddc:	6821      	ldr	r1, [r4, #0]
    3dde:	4391      	bics	r1, r2
    3de0:	6021      	str	r1, [r4, #0]
    3de2:	2d00      	cmp	r5, #0
    3de4:	d105      	bne.n	3df2 <_printf_i+0x136>
    3de6:	9e04      	ldr	r6, [sp, #16]
    3de8:	2b00      	cmp	r3, #0
    3dea:	d011      	beq.n	3e10 <_printf_i+0x154>
    3dec:	e07b      	b.n	3ee6 <_printf_i+0x22a>
    3dee:	2d00      	cmp	r5, #0
    3df0:	d079      	beq.n	3ee6 <_printf_i+0x22a>
    3df2:	9e04      	ldr	r6, [sp, #16]
    3df4:	0028      	movs	r0, r5
    3df6:	0039      	movs	r1, r7
    3df8:	f002 f922 	bl	6040 <__aeabi_uidivmod>
    3dfc:	9b03      	ldr	r3, [sp, #12]
    3dfe:	3e01      	subs	r6, #1
    3e00:	5c5b      	ldrb	r3, [r3, r1]
    3e02:	0028      	movs	r0, r5
    3e04:	7033      	strb	r3, [r6, #0]
    3e06:	0039      	movs	r1, r7
    3e08:	f002 f894 	bl	5f34 <__aeabi_uidiv>
    3e0c:	1e05      	subs	r5, r0, #0
    3e0e:	d1f1      	bne.n	3df4 <_printf_i+0x138>
    3e10:	2f08      	cmp	r7, #8
    3e12:	d109      	bne.n	3e28 <_printf_i+0x16c>
    3e14:	6823      	ldr	r3, [r4, #0]
    3e16:	07db      	lsls	r3, r3, #31
    3e18:	d506      	bpl.n	3e28 <_printf_i+0x16c>
    3e1a:	6863      	ldr	r3, [r4, #4]
    3e1c:	6922      	ldr	r2, [r4, #16]
    3e1e:	4293      	cmp	r3, r2
    3e20:	dc02      	bgt.n	3e28 <_printf_i+0x16c>
    3e22:	2330      	movs	r3, #48	; 0x30
    3e24:	3e01      	subs	r6, #1
    3e26:	7033      	strb	r3, [r6, #0]
    3e28:	9b04      	ldr	r3, [sp, #16]
    3e2a:	1b9b      	subs	r3, r3, r6
    3e2c:	6123      	str	r3, [r4, #16]
    3e2e:	e02b      	b.n	3e88 <_printf_i+0x1cc>
    3e30:	6809      	ldr	r1, [r1, #0]
    3e32:	681a      	ldr	r2, [r3, #0]
    3e34:	0608      	lsls	r0, r1, #24
    3e36:	d407      	bmi.n	3e48 <_printf_i+0x18c>
    3e38:	0649      	lsls	r1, r1, #25
    3e3a:	d505      	bpl.n	3e48 <_printf_i+0x18c>
    3e3c:	1d11      	adds	r1, r2, #4
    3e3e:	6019      	str	r1, [r3, #0]
    3e40:	6813      	ldr	r3, [r2, #0]
    3e42:	8aa2      	ldrh	r2, [r4, #20]
    3e44:	801a      	strh	r2, [r3, #0]
    3e46:	e004      	b.n	3e52 <_printf_i+0x196>
    3e48:	1d11      	adds	r1, r2, #4
    3e4a:	6019      	str	r1, [r3, #0]
    3e4c:	6813      	ldr	r3, [r2, #0]
    3e4e:	6962      	ldr	r2, [r4, #20]
    3e50:	601a      	str	r2, [r3, #0]
    3e52:	2300      	movs	r3, #0
    3e54:	9e04      	ldr	r6, [sp, #16]
    3e56:	6123      	str	r3, [r4, #16]
    3e58:	e016      	b.n	3e88 <_printf_i+0x1cc>
    3e5a:	681a      	ldr	r2, [r3, #0]
    3e5c:	1d11      	adds	r1, r2, #4
    3e5e:	6019      	str	r1, [r3, #0]
    3e60:	6816      	ldr	r6, [r2, #0]
    3e62:	2100      	movs	r1, #0
    3e64:	6862      	ldr	r2, [r4, #4]
    3e66:	0030      	movs	r0, r6
    3e68:	f001 faa6 	bl	53b8 <memchr>
    3e6c:	2800      	cmp	r0, #0
    3e6e:	d001      	beq.n	3e74 <_printf_i+0x1b8>
    3e70:	1b80      	subs	r0, r0, r6
    3e72:	6060      	str	r0, [r4, #4]
    3e74:	6863      	ldr	r3, [r4, #4]
    3e76:	e003      	b.n	3e80 <_printf_i+0x1c4>
    3e78:	0026      	movs	r6, r4
    3e7a:	3642      	adds	r6, #66	; 0x42
    3e7c:	7032      	strb	r2, [r6, #0]
    3e7e:	2301      	movs	r3, #1
    3e80:	6123      	str	r3, [r4, #16]
    3e82:	2300      	movs	r3, #0
    3e84:	9a04      	ldr	r2, [sp, #16]
    3e86:	7013      	strb	r3, [r2, #0]
    3e88:	9b07      	ldr	r3, [sp, #28]
    3e8a:	aa09      	add	r2, sp, #36	; 0x24
    3e8c:	9300      	str	r3, [sp, #0]
    3e8e:	0021      	movs	r1, r4
    3e90:	9b06      	ldr	r3, [sp, #24]
    3e92:	9805      	ldr	r0, [sp, #20]
    3e94:	f7ff fea4 	bl	3be0 <_printf_common>
    3e98:	1c43      	adds	r3, r0, #1
    3e9a:	d102      	bne.n	3ea2 <_printf_i+0x1e6>
    3e9c:	2001      	movs	r0, #1
    3e9e:	4240      	negs	r0, r0
    3ea0:	e027      	b.n	3ef2 <_printf_i+0x236>
    3ea2:	6923      	ldr	r3, [r4, #16]
    3ea4:	0032      	movs	r2, r6
    3ea6:	9906      	ldr	r1, [sp, #24]
    3ea8:	9805      	ldr	r0, [sp, #20]
    3eaa:	9d07      	ldr	r5, [sp, #28]
    3eac:	47a8      	blx	r5
    3eae:	1c43      	adds	r3, r0, #1
    3eb0:	d0f4      	beq.n	3e9c <_printf_i+0x1e0>
    3eb2:	6823      	ldr	r3, [r4, #0]
    3eb4:	2500      	movs	r5, #0
    3eb6:	079b      	lsls	r3, r3, #30
    3eb8:	d40f      	bmi.n	3eda <_printf_i+0x21e>
    3eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3ebc:	68e0      	ldr	r0, [r4, #12]
    3ebe:	4298      	cmp	r0, r3
    3ec0:	da17      	bge.n	3ef2 <_printf_i+0x236>
    3ec2:	0018      	movs	r0, r3
    3ec4:	e015      	b.n	3ef2 <_printf_i+0x236>
    3ec6:	0022      	movs	r2, r4
    3ec8:	2301      	movs	r3, #1
    3eca:	3219      	adds	r2, #25
    3ecc:	9906      	ldr	r1, [sp, #24]
    3ece:	9805      	ldr	r0, [sp, #20]
    3ed0:	9e07      	ldr	r6, [sp, #28]
    3ed2:	47b0      	blx	r6
    3ed4:	1c43      	adds	r3, r0, #1
    3ed6:	d0e1      	beq.n	3e9c <_printf_i+0x1e0>
    3ed8:	3501      	adds	r5, #1
    3eda:	68e3      	ldr	r3, [r4, #12]
    3edc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3ede:	1a9b      	subs	r3, r3, r2
    3ee0:	429d      	cmp	r5, r3
    3ee2:	dbf0      	blt.n	3ec6 <_printf_i+0x20a>
    3ee4:	e7e9      	b.n	3eba <_printf_i+0x1fe>
    3ee6:	0026      	movs	r6, r4
    3ee8:	9b03      	ldr	r3, [sp, #12]
    3eea:	3642      	adds	r6, #66	; 0x42
    3eec:	781b      	ldrb	r3, [r3, #0]
    3eee:	7033      	strb	r3, [r6, #0]
    3ef0:	e78e      	b.n	3e10 <_printf_i+0x154>
    3ef2:	b00b      	add	sp, #44	; 0x2c
    3ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ef6:	46c0      	nop			; (mov r8, r8)
    3ef8:	00008bea 	.word	0x00008bea
    3efc:	00008bfb 	.word	0x00008bfb

00003f00 <iprintf>:
    3f00:	b40f      	push	{r0, r1, r2, r3}
    3f02:	4b0b      	ldr	r3, [pc, #44]	; (3f30 <iprintf+0x30>)
    3f04:	b513      	push	{r0, r1, r4, lr}
    3f06:	681c      	ldr	r4, [r3, #0]
    3f08:	2c00      	cmp	r4, #0
    3f0a:	d005      	beq.n	3f18 <iprintf+0x18>
    3f0c:	69a3      	ldr	r3, [r4, #24]
    3f0e:	2b00      	cmp	r3, #0
    3f10:	d102      	bne.n	3f18 <iprintf+0x18>
    3f12:	0020      	movs	r0, r4
    3f14:	f001 f94a 	bl	51ac <__sinit>
    3f18:	ab05      	add	r3, sp, #20
    3f1a:	9a04      	ldr	r2, [sp, #16]
    3f1c:	68a1      	ldr	r1, [r4, #8]
    3f1e:	0020      	movs	r0, r4
    3f20:	9301      	str	r3, [sp, #4]
    3f22:	f001 fe11 	bl	5b48 <_vfiprintf_r>
    3f26:	bc16      	pop	{r1, r2, r4}
    3f28:	bc08      	pop	{r3}
    3f2a:	b004      	add	sp, #16
    3f2c:	4718      	bx	r3
    3f2e:	46c0      	nop			; (mov r8, r8)
    3f30:	2000006c 	.word	0x2000006c

00003f34 <_puts_r>:
    3f34:	b570      	push	{r4, r5, r6, lr}
    3f36:	0005      	movs	r5, r0
    3f38:	000e      	movs	r6, r1
    3f3a:	2800      	cmp	r0, #0
    3f3c:	d004      	beq.n	3f48 <_puts_r+0x14>
    3f3e:	6983      	ldr	r3, [r0, #24]
    3f40:	2b00      	cmp	r3, #0
    3f42:	d101      	bne.n	3f48 <_puts_r+0x14>
    3f44:	f001 f932 	bl	51ac <__sinit>
    3f48:	69ab      	ldr	r3, [r5, #24]
    3f4a:	68ac      	ldr	r4, [r5, #8]
    3f4c:	2b00      	cmp	r3, #0
    3f4e:	d102      	bne.n	3f56 <_puts_r+0x22>
    3f50:	0028      	movs	r0, r5
    3f52:	f001 f92b 	bl	51ac <__sinit>
    3f56:	4b25      	ldr	r3, [pc, #148]	; (3fec <_puts_r+0xb8>)
    3f58:	429c      	cmp	r4, r3
    3f5a:	d101      	bne.n	3f60 <_puts_r+0x2c>
    3f5c:	686c      	ldr	r4, [r5, #4]
    3f5e:	e008      	b.n	3f72 <_puts_r+0x3e>
    3f60:	4b23      	ldr	r3, [pc, #140]	; (3ff0 <_puts_r+0xbc>)
    3f62:	429c      	cmp	r4, r3
    3f64:	d101      	bne.n	3f6a <_puts_r+0x36>
    3f66:	68ac      	ldr	r4, [r5, #8]
    3f68:	e003      	b.n	3f72 <_puts_r+0x3e>
    3f6a:	4b22      	ldr	r3, [pc, #136]	; (3ff4 <_puts_r+0xc0>)
    3f6c:	429c      	cmp	r4, r3
    3f6e:	d100      	bne.n	3f72 <_puts_r+0x3e>
    3f70:	68ec      	ldr	r4, [r5, #12]
    3f72:	89a3      	ldrh	r3, [r4, #12]
    3f74:	071b      	lsls	r3, r3, #28
    3f76:	d502      	bpl.n	3f7e <_puts_r+0x4a>
    3f78:	6923      	ldr	r3, [r4, #16]
    3f7a:	2b00      	cmp	r3, #0
    3f7c:	d111      	bne.n	3fa2 <_puts_r+0x6e>
    3f7e:	0021      	movs	r1, r4
    3f80:	0028      	movs	r0, r5
    3f82:	f000 f95d 	bl	4240 <__swsetup_r>
    3f86:	2800      	cmp	r0, #0
    3f88:	d00b      	beq.n	3fa2 <_puts_r+0x6e>
    3f8a:	2001      	movs	r0, #1
    3f8c:	4240      	negs	r0, r0
    3f8e:	e02b      	b.n	3fe8 <_puts_r+0xb4>
    3f90:	3b01      	subs	r3, #1
    3f92:	3601      	adds	r6, #1
    3f94:	60a3      	str	r3, [r4, #8]
    3f96:	2b00      	cmp	r3, #0
    3f98:	db08      	blt.n	3fac <_puts_r+0x78>
    3f9a:	6823      	ldr	r3, [r4, #0]
    3f9c:	1c5a      	adds	r2, r3, #1
    3f9e:	6022      	str	r2, [r4, #0]
    3fa0:	7019      	strb	r1, [r3, #0]
    3fa2:	7831      	ldrb	r1, [r6, #0]
    3fa4:	68a3      	ldr	r3, [r4, #8]
    3fa6:	2900      	cmp	r1, #0
    3fa8:	d1f2      	bne.n	3f90 <_puts_r+0x5c>
    3faa:	e00b      	b.n	3fc4 <_puts_r+0x90>
    3fac:	69a2      	ldr	r2, [r4, #24]
    3fae:	4293      	cmp	r3, r2
    3fb0:	db01      	blt.n	3fb6 <_puts_r+0x82>
    3fb2:	290a      	cmp	r1, #10
    3fb4:	d1f1      	bne.n	3f9a <_puts_r+0x66>
    3fb6:	0022      	movs	r2, r4
    3fb8:	0028      	movs	r0, r5
    3fba:	f000 f8e9 	bl	4190 <__swbuf_r>
    3fbe:	1c43      	adds	r3, r0, #1
    3fc0:	d1ef      	bne.n	3fa2 <_puts_r+0x6e>
    3fc2:	e7e2      	b.n	3f8a <_puts_r+0x56>
    3fc4:	3b01      	subs	r3, #1
    3fc6:	60a3      	str	r3, [r4, #8]
    3fc8:	2b00      	cmp	r3, #0
    3fca:	da08      	bge.n	3fde <_puts_r+0xaa>
    3fcc:	0022      	movs	r2, r4
    3fce:	310a      	adds	r1, #10
    3fd0:	0028      	movs	r0, r5
    3fd2:	f000 f8dd 	bl	4190 <__swbuf_r>
    3fd6:	1c43      	adds	r3, r0, #1
    3fd8:	d0d7      	beq.n	3f8a <_puts_r+0x56>
    3fda:	200a      	movs	r0, #10
    3fdc:	e004      	b.n	3fe8 <_puts_r+0xb4>
    3fde:	200a      	movs	r0, #10
    3fe0:	6823      	ldr	r3, [r4, #0]
    3fe2:	1c5a      	adds	r2, r3, #1
    3fe4:	6022      	str	r2, [r4, #0]
    3fe6:	7018      	strb	r0, [r3, #0]
    3fe8:	bd70      	pop	{r4, r5, r6, pc}
    3fea:	46c0      	nop			; (mov r8, r8)
    3fec:	00008c1c 	.word	0x00008c1c
    3ff0:	00008c3c 	.word	0x00008c3c
    3ff4:	00008c5c 	.word	0x00008c5c

00003ff8 <puts>:
    3ff8:	b510      	push	{r4, lr}
    3ffa:	4b03      	ldr	r3, [pc, #12]	; (4008 <puts+0x10>)
    3ffc:	0001      	movs	r1, r0
    3ffe:	6818      	ldr	r0, [r3, #0]
    4000:	f7ff ff98 	bl	3f34 <_puts_r>
    4004:	bd10      	pop	{r4, pc}
    4006:	46c0      	nop			; (mov r8, r8)
    4008:	2000006c 	.word	0x2000006c

0000400c <setbuf>:
    400c:	424a      	negs	r2, r1
    400e:	414a      	adcs	r2, r1
    4010:	2380      	movs	r3, #128	; 0x80
    4012:	b510      	push	{r4, lr}
    4014:	0052      	lsls	r2, r2, #1
    4016:	00db      	lsls	r3, r3, #3
    4018:	f000 f802 	bl	4020 <setvbuf>
    401c:	bd10      	pop	{r4, pc}
	...

00004020 <setvbuf>:
    4020:	b5f0      	push	{r4, r5, r6, r7, lr}
    4022:	001d      	movs	r5, r3
    4024:	4b51      	ldr	r3, [pc, #324]	; (416c <setvbuf+0x14c>)
    4026:	b085      	sub	sp, #20
    4028:	681e      	ldr	r6, [r3, #0]
    402a:	0004      	movs	r4, r0
    402c:	000f      	movs	r7, r1
    402e:	9200      	str	r2, [sp, #0]
    4030:	2e00      	cmp	r6, #0
    4032:	d005      	beq.n	4040 <setvbuf+0x20>
    4034:	69b3      	ldr	r3, [r6, #24]
    4036:	2b00      	cmp	r3, #0
    4038:	d102      	bne.n	4040 <setvbuf+0x20>
    403a:	0030      	movs	r0, r6
    403c:	f001 f8b6 	bl	51ac <__sinit>
    4040:	4b4b      	ldr	r3, [pc, #300]	; (4170 <setvbuf+0x150>)
    4042:	429c      	cmp	r4, r3
    4044:	d101      	bne.n	404a <setvbuf+0x2a>
    4046:	6874      	ldr	r4, [r6, #4]
    4048:	e008      	b.n	405c <setvbuf+0x3c>
    404a:	4b4a      	ldr	r3, [pc, #296]	; (4174 <setvbuf+0x154>)
    404c:	429c      	cmp	r4, r3
    404e:	d101      	bne.n	4054 <setvbuf+0x34>
    4050:	68b4      	ldr	r4, [r6, #8]
    4052:	e003      	b.n	405c <setvbuf+0x3c>
    4054:	4b48      	ldr	r3, [pc, #288]	; (4178 <setvbuf+0x158>)
    4056:	429c      	cmp	r4, r3
    4058:	d100      	bne.n	405c <setvbuf+0x3c>
    405a:	68f4      	ldr	r4, [r6, #12]
    405c:	9b00      	ldr	r3, [sp, #0]
    405e:	2b02      	cmp	r3, #2
    4060:	d005      	beq.n	406e <setvbuf+0x4e>
    4062:	2b01      	cmp	r3, #1
    4064:	d900      	bls.n	4068 <setvbuf+0x48>
    4066:	e07c      	b.n	4162 <setvbuf+0x142>
    4068:	2d00      	cmp	r5, #0
    406a:	da00      	bge.n	406e <setvbuf+0x4e>
    406c:	e079      	b.n	4162 <setvbuf+0x142>
    406e:	0021      	movs	r1, r4
    4070:	0030      	movs	r0, r6
    4072:	f001 f82d 	bl	50d0 <_fflush_r>
    4076:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4078:	2900      	cmp	r1, #0
    407a:	d008      	beq.n	408e <setvbuf+0x6e>
    407c:	0023      	movs	r3, r4
    407e:	3344      	adds	r3, #68	; 0x44
    4080:	4299      	cmp	r1, r3
    4082:	d002      	beq.n	408a <setvbuf+0x6a>
    4084:	0030      	movs	r0, r6
    4086:	f001 fc9b 	bl	59c0 <_free_r>
    408a:	2300      	movs	r3, #0
    408c:	6363      	str	r3, [r4, #52]	; 0x34
    408e:	2300      	movs	r3, #0
    4090:	61a3      	str	r3, [r4, #24]
    4092:	6063      	str	r3, [r4, #4]
    4094:	89a3      	ldrh	r3, [r4, #12]
    4096:	061b      	lsls	r3, r3, #24
    4098:	d503      	bpl.n	40a2 <setvbuf+0x82>
    409a:	6921      	ldr	r1, [r4, #16]
    409c:	0030      	movs	r0, r6
    409e:	f001 fc8f 	bl	59c0 <_free_r>
    40a2:	89a2      	ldrh	r2, [r4, #12]
    40a4:	4b35      	ldr	r3, [pc, #212]	; (417c <setvbuf+0x15c>)
    40a6:	4013      	ands	r3, r2
    40a8:	81a3      	strh	r3, [r4, #12]
    40aa:	9b00      	ldr	r3, [sp, #0]
    40ac:	2b02      	cmp	r3, #2
    40ae:	d021      	beq.n	40f4 <setvbuf+0xd4>
    40b0:	ab03      	add	r3, sp, #12
    40b2:	aa02      	add	r2, sp, #8
    40b4:	0021      	movs	r1, r4
    40b6:	0030      	movs	r0, r6
    40b8:	f001 f910 	bl	52dc <__swhatbuf_r>
    40bc:	89a3      	ldrh	r3, [r4, #12]
    40be:	4318      	orrs	r0, r3
    40c0:	81a0      	strh	r0, [r4, #12]
    40c2:	2d00      	cmp	r5, #0
    40c4:	d101      	bne.n	40ca <setvbuf+0xaa>
    40c6:	9d02      	ldr	r5, [sp, #8]
    40c8:	e001      	b.n	40ce <setvbuf+0xae>
    40ca:	2f00      	cmp	r7, #0
    40cc:	d125      	bne.n	411a <setvbuf+0xfa>
    40ce:	0028      	movs	r0, r5
    40d0:	f001 f968 	bl	53a4 <malloc>
    40d4:	9501      	str	r5, [sp, #4]
    40d6:	1e07      	subs	r7, r0, #0
    40d8:	d11a      	bne.n	4110 <setvbuf+0xf0>
    40da:	9b02      	ldr	r3, [sp, #8]
    40dc:	9301      	str	r3, [sp, #4]
    40de:	42ab      	cmp	r3, r5
    40e0:	d102      	bne.n	40e8 <setvbuf+0xc8>
    40e2:	2001      	movs	r0, #1
    40e4:	4240      	negs	r0, r0
    40e6:	e006      	b.n	40f6 <setvbuf+0xd6>
    40e8:	9801      	ldr	r0, [sp, #4]
    40ea:	f001 f95b 	bl	53a4 <malloc>
    40ee:	1e07      	subs	r7, r0, #0
    40f0:	d10e      	bne.n	4110 <setvbuf+0xf0>
    40f2:	e7f6      	b.n	40e2 <setvbuf+0xc2>
    40f4:	2000      	movs	r0, #0
    40f6:	2202      	movs	r2, #2
    40f8:	89a3      	ldrh	r3, [r4, #12]
    40fa:	4313      	orrs	r3, r2
    40fc:	81a3      	strh	r3, [r4, #12]
    40fe:	2300      	movs	r3, #0
    4100:	60a3      	str	r3, [r4, #8]
    4102:	0023      	movs	r3, r4
    4104:	3347      	adds	r3, #71	; 0x47
    4106:	6023      	str	r3, [r4, #0]
    4108:	6123      	str	r3, [r4, #16]
    410a:	2301      	movs	r3, #1
    410c:	6163      	str	r3, [r4, #20]
    410e:	e02a      	b.n	4166 <setvbuf+0x146>
    4110:	2280      	movs	r2, #128	; 0x80
    4112:	89a3      	ldrh	r3, [r4, #12]
    4114:	9d01      	ldr	r5, [sp, #4]
    4116:	4313      	orrs	r3, r2
    4118:	81a3      	strh	r3, [r4, #12]
    411a:	69b3      	ldr	r3, [r6, #24]
    411c:	2b00      	cmp	r3, #0
    411e:	d102      	bne.n	4126 <setvbuf+0x106>
    4120:	0030      	movs	r0, r6
    4122:	f001 f843 	bl	51ac <__sinit>
    4126:	9b00      	ldr	r3, [sp, #0]
    4128:	2b01      	cmp	r3, #1
    412a:	d103      	bne.n	4134 <setvbuf+0x114>
    412c:	89a3      	ldrh	r3, [r4, #12]
    412e:	9a00      	ldr	r2, [sp, #0]
    4130:	431a      	orrs	r2, r3
    4132:	81a2      	strh	r2, [r4, #12]
    4134:	2308      	movs	r3, #8
    4136:	89a2      	ldrh	r2, [r4, #12]
    4138:	6027      	str	r7, [r4, #0]
    413a:	4013      	ands	r3, r2
    413c:	6127      	str	r7, [r4, #16]
    413e:	6165      	str	r5, [r4, #20]
    4140:	1e18      	subs	r0, r3, #0
    4142:	d00c      	beq.n	415e <setvbuf+0x13e>
    4144:	2301      	movs	r3, #1
    4146:	401a      	ands	r2, r3
    4148:	2300      	movs	r3, #0
    414a:	1e10      	subs	r0, r2, #0
    414c:	4298      	cmp	r0, r3
    414e:	d004      	beq.n	415a <setvbuf+0x13a>
    4150:	426d      	negs	r5, r5
    4152:	60a3      	str	r3, [r4, #8]
    4154:	61a5      	str	r5, [r4, #24]
    4156:	0018      	movs	r0, r3
    4158:	e005      	b.n	4166 <setvbuf+0x146>
    415a:	60a5      	str	r5, [r4, #8]
    415c:	e003      	b.n	4166 <setvbuf+0x146>
    415e:	60a3      	str	r3, [r4, #8]
    4160:	e001      	b.n	4166 <setvbuf+0x146>
    4162:	2001      	movs	r0, #1
    4164:	4240      	negs	r0, r0
    4166:	b005      	add	sp, #20
    4168:	bdf0      	pop	{r4, r5, r6, r7, pc}
    416a:	46c0      	nop			; (mov r8, r8)
    416c:	2000006c 	.word	0x2000006c
    4170:	00008c1c 	.word	0x00008c1c
    4174:	00008c3c 	.word	0x00008c3c
    4178:	00008c5c 	.word	0x00008c5c
    417c:	fffff35c 	.word	0xfffff35c

00004180 <strlen>:
    4180:	2300      	movs	r3, #0
    4182:	5cc2      	ldrb	r2, [r0, r3]
    4184:	3301      	adds	r3, #1
    4186:	2a00      	cmp	r2, #0
    4188:	d1fb      	bne.n	4182 <strlen+0x2>
    418a:	1e58      	subs	r0, r3, #1
    418c:	4770      	bx	lr
	...

00004190 <__swbuf_r>:
    4190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4192:	0005      	movs	r5, r0
    4194:	000f      	movs	r7, r1
    4196:	0014      	movs	r4, r2
    4198:	2800      	cmp	r0, #0
    419a:	d004      	beq.n	41a6 <__swbuf_r+0x16>
    419c:	6983      	ldr	r3, [r0, #24]
    419e:	2b00      	cmp	r3, #0
    41a0:	d101      	bne.n	41a6 <__swbuf_r+0x16>
    41a2:	f001 f803 	bl	51ac <__sinit>
    41a6:	4b23      	ldr	r3, [pc, #140]	; (4234 <__swbuf_r+0xa4>)
    41a8:	429c      	cmp	r4, r3
    41aa:	d101      	bne.n	41b0 <__swbuf_r+0x20>
    41ac:	686c      	ldr	r4, [r5, #4]
    41ae:	e008      	b.n	41c2 <__swbuf_r+0x32>
    41b0:	4b21      	ldr	r3, [pc, #132]	; (4238 <__swbuf_r+0xa8>)
    41b2:	429c      	cmp	r4, r3
    41b4:	d101      	bne.n	41ba <__swbuf_r+0x2a>
    41b6:	68ac      	ldr	r4, [r5, #8]
    41b8:	e003      	b.n	41c2 <__swbuf_r+0x32>
    41ba:	4b20      	ldr	r3, [pc, #128]	; (423c <__swbuf_r+0xac>)
    41bc:	429c      	cmp	r4, r3
    41be:	d100      	bne.n	41c2 <__swbuf_r+0x32>
    41c0:	68ec      	ldr	r4, [r5, #12]
    41c2:	69a3      	ldr	r3, [r4, #24]
    41c4:	60a3      	str	r3, [r4, #8]
    41c6:	89a3      	ldrh	r3, [r4, #12]
    41c8:	071b      	lsls	r3, r3, #28
    41ca:	d50a      	bpl.n	41e2 <__swbuf_r+0x52>
    41cc:	6923      	ldr	r3, [r4, #16]
    41ce:	2b00      	cmp	r3, #0
    41d0:	d007      	beq.n	41e2 <__swbuf_r+0x52>
    41d2:	6823      	ldr	r3, [r4, #0]
    41d4:	6922      	ldr	r2, [r4, #16]
    41d6:	b2fe      	uxtb	r6, r7
    41d8:	1a98      	subs	r0, r3, r2
    41da:	6963      	ldr	r3, [r4, #20]
    41dc:	4298      	cmp	r0, r3
    41de:	db0f      	blt.n	4200 <__swbuf_r+0x70>
    41e0:	e008      	b.n	41f4 <__swbuf_r+0x64>
    41e2:	0021      	movs	r1, r4
    41e4:	0028      	movs	r0, r5
    41e6:	f000 f82b 	bl	4240 <__swsetup_r>
    41ea:	2800      	cmp	r0, #0
    41ec:	d0f1      	beq.n	41d2 <__swbuf_r+0x42>
    41ee:	2001      	movs	r0, #1
    41f0:	4240      	negs	r0, r0
    41f2:	e01d      	b.n	4230 <__swbuf_r+0xa0>
    41f4:	0021      	movs	r1, r4
    41f6:	0028      	movs	r0, r5
    41f8:	f000 ff6a 	bl	50d0 <_fflush_r>
    41fc:	2800      	cmp	r0, #0
    41fe:	d1f6      	bne.n	41ee <__swbuf_r+0x5e>
    4200:	68a3      	ldr	r3, [r4, #8]
    4202:	3001      	adds	r0, #1
    4204:	3b01      	subs	r3, #1
    4206:	60a3      	str	r3, [r4, #8]
    4208:	6823      	ldr	r3, [r4, #0]
    420a:	1c5a      	adds	r2, r3, #1
    420c:	6022      	str	r2, [r4, #0]
    420e:	701f      	strb	r7, [r3, #0]
    4210:	6963      	ldr	r3, [r4, #20]
    4212:	4298      	cmp	r0, r3
    4214:	d005      	beq.n	4222 <__swbuf_r+0x92>
    4216:	89a3      	ldrh	r3, [r4, #12]
    4218:	0030      	movs	r0, r6
    421a:	07db      	lsls	r3, r3, #31
    421c:	d508      	bpl.n	4230 <__swbuf_r+0xa0>
    421e:	2e0a      	cmp	r6, #10
    4220:	d106      	bne.n	4230 <__swbuf_r+0xa0>
    4222:	0021      	movs	r1, r4
    4224:	0028      	movs	r0, r5
    4226:	f000 ff53 	bl	50d0 <_fflush_r>
    422a:	2800      	cmp	r0, #0
    422c:	d1df      	bne.n	41ee <__swbuf_r+0x5e>
    422e:	0030      	movs	r0, r6
    4230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4232:	46c0      	nop			; (mov r8, r8)
    4234:	00008c1c 	.word	0x00008c1c
    4238:	00008c3c 	.word	0x00008c3c
    423c:	00008c5c 	.word	0x00008c5c

00004240 <__swsetup_r>:
    4240:	4b36      	ldr	r3, [pc, #216]	; (431c <__swsetup_r+0xdc>)
    4242:	b570      	push	{r4, r5, r6, lr}
    4244:	681d      	ldr	r5, [r3, #0]
    4246:	0006      	movs	r6, r0
    4248:	000c      	movs	r4, r1
    424a:	2d00      	cmp	r5, #0
    424c:	d005      	beq.n	425a <__swsetup_r+0x1a>
    424e:	69ab      	ldr	r3, [r5, #24]
    4250:	2b00      	cmp	r3, #0
    4252:	d102      	bne.n	425a <__swsetup_r+0x1a>
    4254:	0028      	movs	r0, r5
    4256:	f000 ffa9 	bl	51ac <__sinit>
    425a:	4b31      	ldr	r3, [pc, #196]	; (4320 <__swsetup_r+0xe0>)
    425c:	429c      	cmp	r4, r3
    425e:	d101      	bne.n	4264 <__swsetup_r+0x24>
    4260:	686c      	ldr	r4, [r5, #4]
    4262:	e008      	b.n	4276 <__swsetup_r+0x36>
    4264:	4b2f      	ldr	r3, [pc, #188]	; (4324 <__swsetup_r+0xe4>)
    4266:	429c      	cmp	r4, r3
    4268:	d101      	bne.n	426e <__swsetup_r+0x2e>
    426a:	68ac      	ldr	r4, [r5, #8]
    426c:	e003      	b.n	4276 <__swsetup_r+0x36>
    426e:	4b2e      	ldr	r3, [pc, #184]	; (4328 <__swsetup_r+0xe8>)
    4270:	429c      	cmp	r4, r3
    4272:	d100      	bne.n	4276 <__swsetup_r+0x36>
    4274:	68ec      	ldr	r4, [r5, #12]
    4276:	220c      	movs	r2, #12
    4278:	5ea3      	ldrsh	r3, [r4, r2]
    427a:	b29a      	uxth	r2, r3
    427c:	0711      	lsls	r1, r2, #28
    427e:	d423      	bmi.n	42c8 <__swsetup_r+0x88>
    4280:	06d1      	lsls	r1, r2, #27
    4282:	d407      	bmi.n	4294 <__swsetup_r+0x54>
    4284:	2209      	movs	r2, #9
    4286:	2001      	movs	r0, #1
    4288:	6032      	str	r2, [r6, #0]
    428a:	3237      	adds	r2, #55	; 0x37
    428c:	4313      	orrs	r3, r2
    428e:	81a3      	strh	r3, [r4, #12]
    4290:	4240      	negs	r0, r0
    4292:	e042      	b.n	431a <__swsetup_r+0xda>
    4294:	0753      	lsls	r3, r2, #29
    4296:	d513      	bpl.n	42c0 <__swsetup_r+0x80>
    4298:	6b61      	ldr	r1, [r4, #52]	; 0x34
    429a:	2900      	cmp	r1, #0
    429c:	d008      	beq.n	42b0 <__swsetup_r+0x70>
    429e:	0023      	movs	r3, r4
    42a0:	3344      	adds	r3, #68	; 0x44
    42a2:	4299      	cmp	r1, r3
    42a4:	d002      	beq.n	42ac <__swsetup_r+0x6c>
    42a6:	0030      	movs	r0, r6
    42a8:	f001 fb8a 	bl	59c0 <_free_r>
    42ac:	2300      	movs	r3, #0
    42ae:	6363      	str	r3, [r4, #52]	; 0x34
    42b0:	2224      	movs	r2, #36	; 0x24
    42b2:	89a3      	ldrh	r3, [r4, #12]
    42b4:	4393      	bics	r3, r2
    42b6:	81a3      	strh	r3, [r4, #12]
    42b8:	2300      	movs	r3, #0
    42ba:	6063      	str	r3, [r4, #4]
    42bc:	6923      	ldr	r3, [r4, #16]
    42be:	6023      	str	r3, [r4, #0]
    42c0:	2208      	movs	r2, #8
    42c2:	89a3      	ldrh	r3, [r4, #12]
    42c4:	4313      	orrs	r3, r2
    42c6:	81a3      	strh	r3, [r4, #12]
    42c8:	6923      	ldr	r3, [r4, #16]
    42ca:	2b00      	cmp	r3, #0
    42cc:	d10b      	bne.n	42e6 <__swsetup_r+0xa6>
    42ce:	23a0      	movs	r3, #160	; 0xa0
    42d0:	89a2      	ldrh	r2, [r4, #12]
    42d2:	009b      	lsls	r3, r3, #2
    42d4:	4013      	ands	r3, r2
    42d6:	2280      	movs	r2, #128	; 0x80
    42d8:	0092      	lsls	r2, r2, #2
    42da:	4293      	cmp	r3, r2
    42dc:	d003      	beq.n	42e6 <__swsetup_r+0xa6>
    42de:	0021      	movs	r1, r4
    42e0:	0030      	movs	r0, r6
    42e2:	f001 f821 	bl	5328 <__smakebuf_r>
    42e6:	2301      	movs	r3, #1
    42e8:	89a2      	ldrh	r2, [r4, #12]
    42ea:	4013      	ands	r3, r2
    42ec:	d005      	beq.n	42fa <__swsetup_r+0xba>
    42ee:	2300      	movs	r3, #0
    42f0:	60a3      	str	r3, [r4, #8]
    42f2:	6963      	ldr	r3, [r4, #20]
    42f4:	425b      	negs	r3, r3
    42f6:	61a3      	str	r3, [r4, #24]
    42f8:	e003      	b.n	4302 <__swsetup_r+0xc2>
    42fa:	0792      	lsls	r2, r2, #30
    42fc:	d400      	bmi.n	4300 <__swsetup_r+0xc0>
    42fe:	6963      	ldr	r3, [r4, #20]
    4300:	60a3      	str	r3, [r4, #8]
    4302:	2000      	movs	r0, #0
    4304:	6923      	ldr	r3, [r4, #16]
    4306:	4283      	cmp	r3, r0
    4308:	d107      	bne.n	431a <__swsetup_r+0xda>
    430a:	220c      	movs	r2, #12
    430c:	5ea3      	ldrsh	r3, [r4, r2]
    430e:	061a      	lsls	r2, r3, #24
    4310:	d503      	bpl.n	431a <__swsetup_r+0xda>
    4312:	2240      	movs	r2, #64	; 0x40
    4314:	4313      	orrs	r3, r2
    4316:	81a3      	strh	r3, [r4, #12]
    4318:	3801      	subs	r0, #1
    431a:	bd70      	pop	{r4, r5, r6, pc}
    431c:	2000006c 	.word	0x2000006c
    4320:	00008c1c 	.word	0x00008c1c
    4324:	00008c3c 	.word	0x00008c3c
    4328:	00008c5c 	.word	0x00008c5c

0000432c <quorem>:
    432c:	b5f0      	push	{r4, r5, r6, r7, lr}
    432e:	6903      	ldr	r3, [r0, #16]
    4330:	690c      	ldr	r4, [r1, #16]
    4332:	b089      	sub	sp, #36	; 0x24
    4334:	0007      	movs	r7, r0
    4336:	9105      	str	r1, [sp, #20]
    4338:	2600      	movs	r6, #0
    433a:	429c      	cmp	r4, r3
    433c:	dc79      	bgt.n	4432 <quorem+0x106>
    433e:	000b      	movs	r3, r1
    4340:	3c01      	subs	r4, #1
    4342:	3314      	adds	r3, #20
    4344:	00a5      	lsls	r5, r4, #2
    4346:	9303      	str	r3, [sp, #12]
    4348:	195b      	adds	r3, r3, r5
    434a:	9304      	str	r3, [sp, #16]
    434c:	0003      	movs	r3, r0
    434e:	3314      	adds	r3, #20
    4350:	9302      	str	r3, [sp, #8]
    4352:	195d      	adds	r5, r3, r5
    4354:	9b04      	ldr	r3, [sp, #16]
    4356:	6828      	ldr	r0, [r5, #0]
    4358:	681b      	ldr	r3, [r3, #0]
    435a:	1c59      	adds	r1, r3, #1
    435c:	9301      	str	r3, [sp, #4]
    435e:	f001 fde9 	bl	5f34 <__aeabi_uidiv>
    4362:	9001      	str	r0, [sp, #4]
    4364:	42b0      	cmp	r0, r6
    4366:	d033      	beq.n	43d0 <quorem+0xa4>
    4368:	9b03      	ldr	r3, [sp, #12]
    436a:	9802      	ldr	r0, [sp, #8]
    436c:	469c      	mov	ip, r3
    436e:	9606      	str	r6, [sp, #24]
    4370:	4663      	mov	r3, ip
    4372:	cb04      	ldmia	r3!, {r2}
    4374:	469c      	mov	ip, r3
    4376:	9b01      	ldr	r3, [sp, #4]
    4378:	b291      	uxth	r1, r2
    437a:	4359      	muls	r1, r3
    437c:	0c12      	lsrs	r2, r2, #16
    437e:	435a      	muls	r2, r3
    4380:	1989      	adds	r1, r1, r6
    4382:	0c0b      	lsrs	r3, r1, #16
    4384:	18d3      	adds	r3, r2, r3
    4386:	9307      	str	r3, [sp, #28]
    4388:	9a06      	ldr	r2, [sp, #24]
    438a:	0c1e      	lsrs	r6, r3, #16
    438c:	8803      	ldrh	r3, [r0, #0]
    438e:	b289      	uxth	r1, r1
    4390:	189b      	adds	r3, r3, r2
    4392:	6802      	ldr	r2, [r0, #0]
    4394:	1a5b      	subs	r3, r3, r1
    4396:	0c11      	lsrs	r1, r2, #16
    4398:	466a      	mov	r2, sp
    439a:	8b92      	ldrh	r2, [r2, #28]
    439c:	1a8a      	subs	r2, r1, r2
    439e:	1419      	asrs	r1, r3, #16
    43a0:	1852      	adds	r2, r2, r1
    43a2:	1411      	asrs	r1, r2, #16
    43a4:	b29b      	uxth	r3, r3
    43a6:	0412      	lsls	r2, r2, #16
    43a8:	4313      	orrs	r3, r2
    43aa:	c008      	stmia	r0!, {r3}
    43ac:	9b04      	ldr	r3, [sp, #16]
    43ae:	9106      	str	r1, [sp, #24]
    43b0:	4563      	cmp	r3, ip
    43b2:	d2dd      	bcs.n	4370 <quorem+0x44>
    43b4:	682b      	ldr	r3, [r5, #0]
    43b6:	2b00      	cmp	r3, #0
    43b8:	d10a      	bne.n	43d0 <quorem+0xa4>
    43ba:	9b02      	ldr	r3, [sp, #8]
    43bc:	3d04      	subs	r5, #4
    43be:	42ab      	cmp	r3, r5
    43c0:	d301      	bcc.n	43c6 <quorem+0x9a>
    43c2:	613c      	str	r4, [r7, #16]
    43c4:	e004      	b.n	43d0 <quorem+0xa4>
    43c6:	682b      	ldr	r3, [r5, #0]
    43c8:	2b00      	cmp	r3, #0
    43ca:	d1fa      	bne.n	43c2 <quorem+0x96>
    43cc:	3c01      	subs	r4, #1
    43ce:	e7f4      	b.n	43ba <quorem+0x8e>
    43d0:	9905      	ldr	r1, [sp, #20]
    43d2:	0038      	movs	r0, r7
    43d4:	f001 fa0c 	bl	57f0 <__mcmp>
    43d8:	2800      	cmp	r0, #0
    43da:	db29      	blt.n	4430 <quorem+0x104>
    43dc:	2000      	movs	r0, #0
    43de:	9b01      	ldr	r3, [sp, #4]
    43e0:	9902      	ldr	r1, [sp, #8]
    43e2:	3301      	adds	r3, #1
    43e4:	9a03      	ldr	r2, [sp, #12]
    43e6:	9301      	str	r3, [sp, #4]
    43e8:	ca40      	ldmia	r2!, {r6}
    43ea:	880b      	ldrh	r3, [r1, #0]
    43ec:	1818      	adds	r0, r3, r0
    43ee:	b2b3      	uxth	r3, r6
    43f0:	1ac3      	subs	r3, r0, r3
    43f2:	6808      	ldr	r0, [r1, #0]
    43f4:	0c36      	lsrs	r6, r6, #16
    43f6:	0c00      	lsrs	r0, r0, #16
    43f8:	1b80      	subs	r0, r0, r6
    43fa:	141d      	asrs	r5, r3, #16
    43fc:	1945      	adds	r5, r0, r5
    43fe:	1428      	asrs	r0, r5, #16
    4400:	b29b      	uxth	r3, r3
    4402:	042d      	lsls	r5, r5, #16
    4404:	432b      	orrs	r3, r5
    4406:	c108      	stmia	r1!, {r3}
    4408:	9b04      	ldr	r3, [sp, #16]
    440a:	4293      	cmp	r3, r2
    440c:	d2ec      	bcs.n	43e8 <quorem+0xbc>
    440e:	9a02      	ldr	r2, [sp, #8]
    4410:	00a3      	lsls	r3, r4, #2
    4412:	18d3      	adds	r3, r2, r3
    4414:	681a      	ldr	r2, [r3, #0]
    4416:	2a00      	cmp	r2, #0
    4418:	d10a      	bne.n	4430 <quorem+0x104>
    441a:	9a02      	ldr	r2, [sp, #8]
    441c:	3b04      	subs	r3, #4
    441e:	429a      	cmp	r2, r3
    4420:	d301      	bcc.n	4426 <quorem+0xfa>
    4422:	613c      	str	r4, [r7, #16]
    4424:	e004      	b.n	4430 <quorem+0x104>
    4426:	681a      	ldr	r2, [r3, #0]
    4428:	2a00      	cmp	r2, #0
    442a:	d1fa      	bne.n	4422 <quorem+0xf6>
    442c:	3c01      	subs	r4, #1
    442e:	e7f4      	b.n	441a <quorem+0xee>
    4430:	9e01      	ldr	r6, [sp, #4]
    4432:	0030      	movs	r0, r6
    4434:	b009      	add	sp, #36	; 0x24
    4436:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004438 <_dtoa_r>:
    4438:	b5f0      	push	{r4, r5, r6, r7, lr}
    443a:	0016      	movs	r6, r2
    443c:	001f      	movs	r7, r3
    443e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    4440:	b09d      	sub	sp, #116	; 0x74
    4442:	9004      	str	r0, [sp, #16]
    4444:	9d25      	ldr	r5, [sp, #148]	; 0x94
    4446:	9606      	str	r6, [sp, #24]
    4448:	9707      	str	r7, [sp, #28]
    444a:	2c00      	cmp	r4, #0
    444c:	d108      	bne.n	4460 <_dtoa_r+0x28>
    444e:	2010      	movs	r0, #16
    4450:	f000 ffa8 	bl	53a4 <malloc>
    4454:	9b04      	ldr	r3, [sp, #16]
    4456:	6258      	str	r0, [r3, #36]	; 0x24
    4458:	6044      	str	r4, [r0, #4]
    445a:	6084      	str	r4, [r0, #8]
    445c:	6004      	str	r4, [r0, #0]
    445e:	60c4      	str	r4, [r0, #12]
    4460:	9b04      	ldr	r3, [sp, #16]
    4462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4464:	6819      	ldr	r1, [r3, #0]
    4466:	2900      	cmp	r1, #0
    4468:	d00b      	beq.n	4482 <_dtoa_r+0x4a>
    446a:	685a      	ldr	r2, [r3, #4]
    446c:	2301      	movs	r3, #1
    446e:	4093      	lsls	r3, r2
    4470:	604a      	str	r2, [r1, #4]
    4472:	608b      	str	r3, [r1, #8]
    4474:	9804      	ldr	r0, [sp, #16]
    4476:	f000 ffe2 	bl	543e <_Bfree>
    447a:	2200      	movs	r2, #0
    447c:	9b04      	ldr	r3, [sp, #16]
    447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4480:	601a      	str	r2, [r3, #0]
    4482:	9b07      	ldr	r3, [sp, #28]
    4484:	2b00      	cmp	r3, #0
    4486:	da05      	bge.n	4494 <_dtoa_r+0x5c>
    4488:	2301      	movs	r3, #1
    448a:	602b      	str	r3, [r5, #0]
    448c:	007b      	lsls	r3, r7, #1
    448e:	085b      	lsrs	r3, r3, #1
    4490:	9307      	str	r3, [sp, #28]
    4492:	e001      	b.n	4498 <_dtoa_r+0x60>
    4494:	2300      	movs	r3, #0
    4496:	602b      	str	r3, [r5, #0]
    4498:	9c07      	ldr	r4, [sp, #28]
    449a:	4bc8      	ldr	r3, [pc, #800]	; (47bc <_dtoa_r+0x384>)
    449c:	0022      	movs	r2, r4
    449e:	9319      	str	r3, [sp, #100]	; 0x64
    44a0:	401a      	ands	r2, r3
    44a2:	429a      	cmp	r2, r3
    44a4:	d119      	bne.n	44da <_dtoa_r+0xa2>
    44a6:	4bc6      	ldr	r3, [pc, #792]	; (47c0 <_dtoa_r+0x388>)
    44a8:	9a24      	ldr	r2, [sp, #144]	; 0x90
    44aa:	6013      	str	r3, [r2, #0]
    44ac:	9a06      	ldr	r2, [sp, #24]
    44ae:	4bc5      	ldr	r3, [pc, #788]	; (47c4 <_dtoa_r+0x38c>)
    44b0:	2a00      	cmp	r2, #0
    44b2:	d102      	bne.n	44ba <_dtoa_r+0x82>
    44b4:	0324      	lsls	r4, r4, #12
    44b6:	d100      	bne.n	44ba <_dtoa_r+0x82>
    44b8:	4bc3      	ldr	r3, [pc, #780]	; (47c8 <_dtoa_r+0x390>)
    44ba:	9a26      	ldr	r2, [sp, #152]	; 0x98
    44bc:	0018      	movs	r0, r3
    44be:	2a00      	cmp	r2, #0
    44c0:	d101      	bne.n	44c6 <_dtoa_r+0x8e>
    44c2:	f000 fd7d 	bl	4fc0 <_dtoa_r+0xb88>
    44c6:	78d9      	ldrb	r1, [r3, #3]
    44c8:	1cda      	adds	r2, r3, #3
    44ca:	2900      	cmp	r1, #0
    44cc:	d000      	beq.n	44d0 <_dtoa_r+0x98>
    44ce:	3205      	adds	r2, #5
    44d0:	9926      	ldr	r1, [sp, #152]	; 0x98
    44d2:	0018      	movs	r0, r3
    44d4:	600a      	str	r2, [r1, #0]
    44d6:	f000 fd73 	bl	4fc0 <_dtoa_r+0xb88>
    44da:	9e06      	ldr	r6, [sp, #24]
    44dc:	9f07      	ldr	r7, [sp, #28]
    44de:	2200      	movs	r2, #0
    44e0:	2300      	movs	r3, #0
    44e2:	0030      	movs	r0, r6
    44e4:	0039      	movs	r1, r7
    44e6:	f001 feab 	bl	6240 <__aeabi_dcmpeq>
    44ea:	1e05      	subs	r5, r0, #0
    44ec:	d00e      	beq.n	450c <_dtoa_r+0xd4>
    44ee:	2301      	movs	r3, #1
    44f0:	9a24      	ldr	r2, [sp, #144]	; 0x90
    44f2:	6013      	str	r3, [r2, #0]
    44f4:	4bb5      	ldr	r3, [pc, #724]	; (47cc <_dtoa_r+0x394>)
    44f6:	9a26      	ldr	r2, [sp, #152]	; 0x98
    44f8:	0018      	movs	r0, r3
    44fa:	2a00      	cmp	r2, #0
    44fc:	d101      	bne.n	4502 <_dtoa_r+0xca>
    44fe:	f000 fd5f 	bl	4fc0 <_dtoa_r+0xb88>
    4502:	4ab3      	ldr	r2, [pc, #716]	; (47d0 <_dtoa_r+0x398>)
    4504:	9926      	ldr	r1, [sp, #152]	; 0x98
    4506:	600a      	str	r2, [r1, #0]
    4508:	f000 fd5a 	bl	4fc0 <_dtoa_r+0xb88>
    450c:	ab1a      	add	r3, sp, #104	; 0x68
    450e:	9301      	str	r3, [sp, #4]
    4510:	ab1b      	add	r3, sp, #108	; 0x6c
    4512:	9300      	str	r3, [sp, #0]
    4514:	0032      	movs	r2, r6
    4516:	003b      	movs	r3, r7
    4518:	9804      	ldr	r0, [sp, #16]
    451a:	f001 f9ef 	bl	58fc <__d2b>
    451e:	0063      	lsls	r3, r4, #1
    4520:	9005      	str	r0, [sp, #20]
    4522:	0d5b      	lsrs	r3, r3, #21
    4524:	d009      	beq.n	453a <_dtoa_r+0x102>
    4526:	033a      	lsls	r2, r7, #12
    4528:	4caa      	ldr	r4, [pc, #680]	; (47d4 <_dtoa_r+0x39c>)
    452a:	0b12      	lsrs	r2, r2, #12
    452c:	4314      	orrs	r4, r2
    452e:	4aaa      	ldr	r2, [pc, #680]	; (47d8 <_dtoa_r+0x3a0>)
    4530:	0030      	movs	r0, r6
    4532:	0021      	movs	r1, r4
    4534:	189e      	adds	r6, r3, r2
    4536:	9517      	str	r5, [sp, #92]	; 0x5c
    4538:	e01a      	b.n	4570 <_dtoa_r+0x138>
    453a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    453c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    453e:	189e      	adds	r6, r3, r2
    4540:	4ba6      	ldr	r3, [pc, #664]	; (47dc <_dtoa_r+0x3a4>)
    4542:	18f3      	adds	r3, r6, r3
    4544:	2b20      	cmp	r3, #32
    4546:	dd08      	ble.n	455a <_dtoa_r+0x122>
    4548:	4aa5      	ldr	r2, [pc, #660]	; (47e0 <_dtoa_r+0x3a8>)
    454a:	9806      	ldr	r0, [sp, #24]
    454c:	18b2      	adds	r2, r6, r2
    454e:	40d0      	lsrs	r0, r2
    4550:	2240      	movs	r2, #64	; 0x40
    4552:	1ad3      	subs	r3, r2, r3
    4554:	409c      	lsls	r4, r3
    4556:	4320      	orrs	r0, r4
    4558:	e003      	b.n	4562 <_dtoa_r+0x12a>
    455a:	2220      	movs	r2, #32
    455c:	9806      	ldr	r0, [sp, #24]
    455e:	1ad3      	subs	r3, r2, r3
    4560:	4098      	lsls	r0, r3
    4562:	f004 f953 	bl	880c <__aeabi_ui2d>
    4566:	2301      	movs	r3, #1
    4568:	4c9e      	ldr	r4, [pc, #632]	; (47e4 <_dtoa_r+0x3ac>)
    456a:	3e01      	subs	r6, #1
    456c:	1909      	adds	r1, r1, r4
    456e:	9317      	str	r3, [sp, #92]	; 0x5c
    4570:	2200      	movs	r2, #0
    4572:	4b9d      	ldr	r3, [pc, #628]	; (47e8 <_dtoa_r+0x3b0>)
    4574:	f003 fd5e 	bl	8034 <__aeabi_dsub>
    4578:	4a9c      	ldr	r2, [pc, #624]	; (47ec <_dtoa_r+0x3b4>)
    457a:	4b9d      	ldr	r3, [pc, #628]	; (47f0 <_dtoa_r+0x3b8>)
    457c:	f003 fae0 	bl	7b40 <__aeabi_dmul>
    4580:	4a9c      	ldr	r2, [pc, #624]	; (47f4 <_dtoa_r+0x3bc>)
    4582:	4b9d      	ldr	r3, [pc, #628]	; (47f8 <_dtoa_r+0x3c0>)
    4584:	f002 fb8c 	bl	6ca0 <__aeabi_dadd>
    4588:	0004      	movs	r4, r0
    458a:	0030      	movs	r0, r6
    458c:	000d      	movs	r5, r1
    458e:	f004 f8fb 	bl	8788 <__aeabi_i2d>
    4592:	4a9a      	ldr	r2, [pc, #616]	; (47fc <_dtoa_r+0x3c4>)
    4594:	4b9a      	ldr	r3, [pc, #616]	; (4800 <_dtoa_r+0x3c8>)
    4596:	f003 fad3 	bl	7b40 <__aeabi_dmul>
    459a:	0002      	movs	r2, r0
    459c:	000b      	movs	r3, r1
    459e:	0020      	movs	r0, r4
    45a0:	0029      	movs	r1, r5
    45a2:	f002 fb7d 	bl	6ca0 <__aeabi_dadd>
    45a6:	0004      	movs	r4, r0
    45a8:	000d      	movs	r5, r1
    45aa:	f004 f8b7 	bl	871c <__aeabi_d2iz>
    45ae:	2200      	movs	r2, #0
    45b0:	9003      	str	r0, [sp, #12]
    45b2:	2300      	movs	r3, #0
    45b4:	0020      	movs	r0, r4
    45b6:	0029      	movs	r1, r5
    45b8:	f001 fe48 	bl	624c <__aeabi_dcmplt>
    45bc:	2800      	cmp	r0, #0
    45be:	d00d      	beq.n	45dc <_dtoa_r+0x1a4>
    45c0:	9803      	ldr	r0, [sp, #12]
    45c2:	f004 f8e1 	bl	8788 <__aeabi_i2d>
    45c6:	0002      	movs	r2, r0
    45c8:	000b      	movs	r3, r1
    45ca:	0020      	movs	r0, r4
    45cc:	0029      	movs	r1, r5
    45ce:	f001 fe37 	bl	6240 <__aeabi_dcmpeq>
    45d2:	4243      	negs	r3, r0
    45d4:	4143      	adcs	r3, r0
    45d6:	9a03      	ldr	r2, [sp, #12]
    45d8:	1ad3      	subs	r3, r2, r3
    45da:	9303      	str	r3, [sp, #12]
    45dc:	2301      	movs	r3, #1
    45de:	9316      	str	r3, [sp, #88]	; 0x58
    45e0:	9b03      	ldr	r3, [sp, #12]
    45e2:	2b16      	cmp	r3, #22
    45e4:	d811      	bhi.n	460a <_dtoa_r+0x1d2>
    45e6:	4987      	ldr	r1, [pc, #540]	; (4804 <_dtoa_r+0x3cc>)
    45e8:	00db      	lsls	r3, r3, #3
    45ea:	18c9      	adds	r1, r1, r3
    45ec:	6808      	ldr	r0, [r1, #0]
    45ee:	6849      	ldr	r1, [r1, #4]
    45f0:	9a06      	ldr	r2, [sp, #24]
    45f2:	9b07      	ldr	r3, [sp, #28]
    45f4:	f001 fe3e 	bl	6274 <__aeabi_dcmpgt>
    45f8:	2800      	cmp	r0, #0
    45fa:	d005      	beq.n	4608 <_dtoa_r+0x1d0>
    45fc:	9b03      	ldr	r3, [sp, #12]
    45fe:	3b01      	subs	r3, #1
    4600:	9303      	str	r3, [sp, #12]
    4602:	2300      	movs	r3, #0
    4604:	9316      	str	r3, [sp, #88]	; 0x58
    4606:	e000      	b.n	460a <_dtoa_r+0x1d2>
    4608:	9016      	str	r0, [sp, #88]	; 0x58
    460a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    460c:	1b9e      	subs	r6, r3, r6
    460e:	2300      	movs	r3, #0
    4610:	930b      	str	r3, [sp, #44]	; 0x2c
    4612:	3e01      	subs	r6, #1
    4614:	960c      	str	r6, [sp, #48]	; 0x30
    4616:	d504      	bpl.n	4622 <_dtoa_r+0x1ea>
    4618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    461a:	425b      	negs	r3, r3
    461c:	930b      	str	r3, [sp, #44]	; 0x2c
    461e:	2300      	movs	r3, #0
    4620:	930c      	str	r3, [sp, #48]	; 0x30
    4622:	9b03      	ldr	r3, [sp, #12]
    4624:	2b00      	cmp	r3, #0
    4626:	db08      	blt.n	463a <_dtoa_r+0x202>
    4628:	9a03      	ldr	r2, [sp, #12]
    462a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    462c:	4694      	mov	ip, r2
    462e:	4463      	add	r3, ip
    4630:	930c      	str	r3, [sp, #48]	; 0x30
    4632:	2300      	movs	r3, #0
    4634:	9211      	str	r2, [sp, #68]	; 0x44
    4636:	9308      	str	r3, [sp, #32]
    4638:	e007      	b.n	464a <_dtoa_r+0x212>
    463a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    463c:	9a03      	ldr	r2, [sp, #12]
    463e:	1a9b      	subs	r3, r3, r2
    4640:	930b      	str	r3, [sp, #44]	; 0x2c
    4642:	4253      	negs	r3, r2
    4644:	9308      	str	r3, [sp, #32]
    4646:	2300      	movs	r3, #0
    4648:	9311      	str	r3, [sp, #68]	; 0x44
    464a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    464c:	2501      	movs	r5, #1
    464e:	2b09      	cmp	r3, #9
    4650:	d825      	bhi.n	469e <_dtoa_r+0x266>
    4652:	2b05      	cmp	r3, #5
    4654:	dd02      	ble.n	465c <_dtoa_r+0x224>
    4656:	2500      	movs	r5, #0
    4658:	3b04      	subs	r3, #4
    465a:	9322      	str	r3, [sp, #136]	; 0x88
    465c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    465e:	1e98      	subs	r0, r3, #2
    4660:	2803      	cmp	r0, #3
    4662:	d824      	bhi.n	46ae <_dtoa_r+0x276>
    4664:	f001 fc5c 	bl	5f20 <__gnu_thumb1_case_uqi>
    4668:	04020e06 	.word	0x04020e06
    466c:	2301      	movs	r3, #1
    466e:	e002      	b.n	4676 <_dtoa_r+0x23e>
    4670:	2301      	movs	r3, #1
    4672:	e008      	b.n	4686 <_dtoa_r+0x24e>
    4674:	2300      	movs	r3, #0
    4676:	9310      	str	r3, [sp, #64]	; 0x40
    4678:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    467a:	2b00      	cmp	r3, #0
    467c:	dd20      	ble.n	46c0 <_dtoa_r+0x288>
    467e:	001f      	movs	r7, r3
    4680:	930a      	str	r3, [sp, #40]	; 0x28
    4682:	e021      	b.n	46c8 <_dtoa_r+0x290>
    4684:	2300      	movs	r3, #0
    4686:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    4688:	9310      	str	r3, [sp, #64]	; 0x40
    468a:	9b03      	ldr	r3, [sp, #12]
    468c:	189f      	adds	r7, r3, r2
    468e:	1c7b      	adds	r3, r7, #1
    4690:	930a      	str	r3, [sp, #40]	; 0x28
    4692:	2301      	movs	r3, #1
    4694:	18fa      	adds	r2, r7, r3
    4696:	2a00      	cmp	r2, #0
    4698:	dd16      	ble.n	46c8 <_dtoa_r+0x290>
    469a:	0013      	movs	r3, r2
    469c:	e014      	b.n	46c8 <_dtoa_r+0x290>
    469e:	2701      	movs	r7, #1
    46a0:	2300      	movs	r3, #0
    46a2:	427f      	negs	r7, r7
    46a4:	9322      	str	r3, [sp, #136]	; 0x88
    46a6:	9510      	str	r5, [sp, #64]	; 0x40
    46a8:	970a      	str	r7, [sp, #40]	; 0x28
    46aa:	3312      	adds	r3, #18
    46ac:	e005      	b.n	46ba <_dtoa_r+0x282>
    46ae:	2701      	movs	r7, #1
    46b0:	2301      	movs	r3, #1
    46b2:	427f      	negs	r7, r7
    46b4:	9310      	str	r3, [sp, #64]	; 0x40
    46b6:	970a      	str	r7, [sp, #40]	; 0x28
    46b8:	3311      	adds	r3, #17
    46ba:	2200      	movs	r2, #0
    46bc:	9223      	str	r2, [sp, #140]	; 0x8c
    46be:	e003      	b.n	46c8 <_dtoa_r+0x290>
    46c0:	2701      	movs	r7, #1
    46c2:	003b      	movs	r3, r7
    46c4:	970a      	str	r7, [sp, #40]	; 0x28
    46c6:	9723      	str	r7, [sp, #140]	; 0x8c
    46c8:	9a04      	ldr	r2, [sp, #16]
    46ca:	6a54      	ldr	r4, [r2, #36]	; 0x24
    46cc:	2200      	movs	r2, #0
    46ce:	6062      	str	r2, [r4, #4]
    46d0:	3204      	adds	r2, #4
    46d2:	0011      	movs	r1, r2
    46d4:	3114      	adds	r1, #20
    46d6:	4299      	cmp	r1, r3
    46d8:	d804      	bhi.n	46e4 <_dtoa_r+0x2ac>
    46da:	6861      	ldr	r1, [r4, #4]
    46dc:	0052      	lsls	r2, r2, #1
    46de:	3101      	adds	r1, #1
    46e0:	6061      	str	r1, [r4, #4]
    46e2:	e7f6      	b.n	46d2 <_dtoa_r+0x29a>
    46e4:	6861      	ldr	r1, [r4, #4]
    46e6:	9804      	ldr	r0, [sp, #16]
    46e8:	f000 fe71 	bl	53ce <_Balloc>
    46ec:	9b04      	ldr	r3, [sp, #16]
    46ee:	6020      	str	r0, [r4, #0]
    46f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    46f2:	681b      	ldr	r3, [r3, #0]
    46f4:	930d      	str	r3, [sp, #52]	; 0x34
    46f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    46f8:	2b0e      	cmp	r3, #14
    46fa:	d900      	bls.n	46fe <_dtoa_r+0x2c6>
    46fc:	e181      	b.n	4a02 <_dtoa_r+0x5ca>
    46fe:	2d00      	cmp	r5, #0
    4700:	d100      	bne.n	4704 <_dtoa_r+0x2cc>
    4702:	e17e      	b.n	4a02 <_dtoa_r+0x5ca>
    4704:	9b06      	ldr	r3, [sp, #24]
    4706:	9c07      	ldr	r4, [sp, #28]
    4708:	9314      	str	r3, [sp, #80]	; 0x50
    470a:	9415      	str	r4, [sp, #84]	; 0x54
    470c:	9b03      	ldr	r3, [sp, #12]
    470e:	2b00      	cmp	r3, #0
    4710:	dd31      	ble.n	4776 <_dtoa_r+0x33e>
    4712:	220f      	movs	r2, #15
    4714:	493b      	ldr	r1, [pc, #236]	; (4804 <_dtoa_r+0x3cc>)
    4716:	4013      	ands	r3, r2
    4718:	00db      	lsls	r3, r3, #3
    471a:	18cb      	adds	r3, r1, r3
    471c:	685c      	ldr	r4, [r3, #4]
    471e:	681b      	ldr	r3, [r3, #0]
    4720:	930e      	str	r3, [sp, #56]	; 0x38
    4722:	940f      	str	r4, [sp, #60]	; 0x3c
    4724:	9b03      	ldr	r3, [sp, #12]
    4726:	2402      	movs	r4, #2
    4728:	111d      	asrs	r5, r3, #4
    472a:	06eb      	lsls	r3, r5, #27
    472c:	d50a      	bpl.n	4744 <_dtoa_r+0x30c>
    472e:	9814      	ldr	r0, [sp, #80]	; 0x50
    4730:	9915      	ldr	r1, [sp, #84]	; 0x54
    4732:	4b35      	ldr	r3, [pc, #212]	; (4808 <_dtoa_r+0x3d0>)
    4734:	4015      	ands	r5, r2
    4736:	6a1a      	ldr	r2, [r3, #32]
    4738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    473a:	f002 fddd 	bl	72f8 <__aeabi_ddiv>
    473e:	9006      	str	r0, [sp, #24]
    4740:	9107      	str	r1, [sp, #28]
    4742:	3401      	adds	r4, #1
    4744:	4e30      	ldr	r6, [pc, #192]	; (4808 <_dtoa_r+0x3d0>)
    4746:	2d00      	cmp	r5, #0
    4748:	d00e      	beq.n	4768 <_dtoa_r+0x330>
    474a:	2301      	movs	r3, #1
    474c:	421d      	tst	r5, r3
    474e:	d008      	beq.n	4762 <_dtoa_r+0x32a>
    4750:	980e      	ldr	r0, [sp, #56]	; 0x38
    4752:	990f      	ldr	r1, [sp, #60]	; 0x3c
    4754:	18e4      	adds	r4, r4, r3
    4756:	6832      	ldr	r2, [r6, #0]
    4758:	6873      	ldr	r3, [r6, #4]
    475a:	f003 f9f1 	bl	7b40 <__aeabi_dmul>
    475e:	900e      	str	r0, [sp, #56]	; 0x38
    4760:	910f      	str	r1, [sp, #60]	; 0x3c
    4762:	106d      	asrs	r5, r5, #1
    4764:	3608      	adds	r6, #8
    4766:	e7ee      	b.n	4746 <_dtoa_r+0x30e>
    4768:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    476a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    476c:	9806      	ldr	r0, [sp, #24]
    476e:	9907      	ldr	r1, [sp, #28]
    4770:	f002 fdc2 	bl	72f8 <__aeabi_ddiv>
    4774:	e04c      	b.n	4810 <_dtoa_r+0x3d8>
    4776:	9b03      	ldr	r3, [sp, #12]
    4778:	2402      	movs	r4, #2
    477a:	425d      	negs	r5, r3
    477c:	2d00      	cmp	r5, #0
    477e:	d049      	beq.n	4814 <_dtoa_r+0x3dc>
    4780:	9814      	ldr	r0, [sp, #80]	; 0x50
    4782:	9915      	ldr	r1, [sp, #84]	; 0x54
    4784:	230f      	movs	r3, #15
    4786:	4a1f      	ldr	r2, [pc, #124]	; (4804 <_dtoa_r+0x3cc>)
    4788:	402b      	ands	r3, r5
    478a:	00db      	lsls	r3, r3, #3
    478c:	18d3      	adds	r3, r2, r3
    478e:	681a      	ldr	r2, [r3, #0]
    4790:	685b      	ldr	r3, [r3, #4]
    4792:	f003 f9d5 	bl	7b40 <__aeabi_dmul>
    4796:	2300      	movs	r3, #0
    4798:	9006      	str	r0, [sp, #24]
    479a:	9107      	str	r1, [sp, #28]
    479c:	4e1a      	ldr	r6, [pc, #104]	; (4808 <_dtoa_r+0x3d0>)
    479e:	112d      	asrs	r5, r5, #4
    47a0:	2d00      	cmp	r5, #0
    47a2:	d033      	beq.n	480c <_dtoa_r+0x3d4>
    47a4:	2201      	movs	r2, #1
    47a6:	4215      	tst	r5, r2
    47a8:	d005      	beq.n	47b6 <_dtoa_r+0x37e>
    47aa:	18a4      	adds	r4, r4, r2
    47ac:	6832      	ldr	r2, [r6, #0]
    47ae:	6873      	ldr	r3, [r6, #4]
    47b0:	f003 f9c6 	bl	7b40 <__aeabi_dmul>
    47b4:	2301      	movs	r3, #1
    47b6:	106d      	asrs	r5, r5, #1
    47b8:	3608      	adds	r6, #8
    47ba:	e7f1      	b.n	47a0 <_dtoa_r+0x368>
    47bc:	7ff00000 	.word	0x7ff00000
    47c0:	0000270f 	.word	0x0000270f
    47c4:	00008c15 	.word	0x00008c15
    47c8:	00008c0c 	.word	0x00008c0c
    47cc:	00008be8 	.word	0x00008be8
    47d0:	00008be9 	.word	0x00008be9
    47d4:	3ff00000 	.word	0x3ff00000
    47d8:	fffffc01 	.word	0xfffffc01
    47dc:	00000432 	.word	0x00000432
    47e0:	00000412 	.word	0x00000412
    47e4:	fe100000 	.word	0xfe100000
    47e8:	3ff80000 	.word	0x3ff80000
    47ec:	636f4361 	.word	0x636f4361
    47f0:	3fd287a7 	.word	0x3fd287a7
    47f4:	8b60c8b3 	.word	0x8b60c8b3
    47f8:	3fc68a28 	.word	0x3fc68a28
    47fc:	509f79fb 	.word	0x509f79fb
    4800:	3fd34413 	.word	0x3fd34413
    4804:	00008c88 	.word	0x00008c88
    4808:	00008d50 	.word	0x00008d50
    480c:	2b00      	cmp	r3, #0
    480e:	d001      	beq.n	4814 <_dtoa_r+0x3dc>
    4810:	9006      	str	r0, [sp, #24]
    4812:	9107      	str	r1, [sp, #28]
    4814:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4816:	2b00      	cmp	r3, #0
    4818:	d01d      	beq.n	4856 <_dtoa_r+0x41e>
    481a:	9d06      	ldr	r5, [sp, #24]
    481c:	9e07      	ldr	r6, [sp, #28]
    481e:	2200      	movs	r2, #0
    4820:	4bc7      	ldr	r3, [pc, #796]	; (4b40 <_dtoa_r+0x708>)
    4822:	0028      	movs	r0, r5
    4824:	0031      	movs	r1, r6
    4826:	f001 fd11 	bl	624c <__aeabi_dcmplt>
    482a:	2800      	cmp	r0, #0
    482c:	d013      	beq.n	4856 <_dtoa_r+0x41e>
    482e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4830:	2b00      	cmp	r3, #0
    4832:	d010      	beq.n	4856 <_dtoa_r+0x41e>
    4834:	2f00      	cmp	r7, #0
    4836:	dc00      	bgt.n	483a <_dtoa_r+0x402>
    4838:	e0df      	b.n	49fa <_dtoa_r+0x5c2>
    483a:	9b03      	ldr	r3, [sp, #12]
    483c:	0031      	movs	r1, r6
    483e:	3b01      	subs	r3, #1
    4840:	930e      	str	r3, [sp, #56]	; 0x38
    4842:	2200      	movs	r2, #0
    4844:	4bbf      	ldr	r3, [pc, #764]	; (4b44 <_dtoa_r+0x70c>)
    4846:	0028      	movs	r0, r5
    4848:	f003 f97a 	bl	7b40 <__aeabi_dmul>
    484c:	3401      	adds	r4, #1
    484e:	9006      	str	r0, [sp, #24]
    4850:	9107      	str	r1, [sp, #28]
    4852:	003e      	movs	r6, r7
    4854:	e002      	b.n	485c <_dtoa_r+0x424>
    4856:	9b03      	ldr	r3, [sp, #12]
    4858:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    485a:	930e      	str	r3, [sp, #56]	; 0x38
    485c:	0020      	movs	r0, r4
    485e:	f003 ff93 	bl	8788 <__aeabi_i2d>
    4862:	9a06      	ldr	r2, [sp, #24]
    4864:	9b07      	ldr	r3, [sp, #28]
    4866:	f003 f96b 	bl	7b40 <__aeabi_dmul>
    486a:	2200      	movs	r2, #0
    486c:	4bb6      	ldr	r3, [pc, #728]	; (4b48 <_dtoa_r+0x710>)
    486e:	f002 fa17 	bl	6ca0 <__aeabi_dadd>
    4872:	4ab6      	ldr	r2, [pc, #728]	; (4b4c <_dtoa_r+0x714>)
    4874:	9012      	str	r0, [sp, #72]	; 0x48
    4876:	9113      	str	r1, [sp, #76]	; 0x4c
    4878:	9c12      	ldr	r4, [sp, #72]	; 0x48
    487a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    487c:	4694      	mov	ip, r2
    487e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4880:	4463      	add	r3, ip
    4882:	9318      	str	r3, [sp, #96]	; 0x60
    4884:	001d      	movs	r5, r3
    4886:	2e00      	cmp	r6, #0
    4888:	d11c      	bne.n	48c4 <_dtoa_r+0x48c>
    488a:	9806      	ldr	r0, [sp, #24]
    488c:	9907      	ldr	r1, [sp, #28]
    488e:	2200      	movs	r2, #0
    4890:	4baf      	ldr	r3, [pc, #700]	; (4b50 <_dtoa_r+0x718>)
    4892:	f003 fbcf 	bl	8034 <__aeabi_dsub>
    4896:	0022      	movs	r2, r4
    4898:	9b18      	ldr	r3, [sp, #96]	; 0x60
    489a:	9006      	str	r0, [sp, #24]
    489c:	9107      	str	r1, [sp, #28]
    489e:	f001 fce9 	bl	6274 <__aeabi_dcmpgt>
    48a2:	2800      	cmp	r0, #0
    48a4:	d000      	beq.n	48a8 <_dtoa_r+0x470>
    48a6:	e254      	b.n	4d52 <_dtoa_r+0x91a>
    48a8:	48aa      	ldr	r0, [pc, #680]	; (4b54 <_dtoa_r+0x71c>)
    48aa:	9913      	ldr	r1, [sp, #76]	; 0x4c
    48ac:	4684      	mov	ip, r0
    48ae:	4461      	add	r1, ip
    48b0:	000b      	movs	r3, r1
    48b2:	9806      	ldr	r0, [sp, #24]
    48b4:	9907      	ldr	r1, [sp, #28]
    48b6:	0022      	movs	r2, r4
    48b8:	f001 fcc8 	bl	624c <__aeabi_dcmplt>
    48bc:	2800      	cmp	r0, #0
    48be:	d000      	beq.n	48c2 <_dtoa_r+0x48a>
    48c0:	e23d      	b.n	4d3e <_dtoa_r+0x906>
    48c2:	e09a      	b.n	49fa <_dtoa_r+0x5c2>
    48c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    48c6:	1e73      	subs	r3, r6, #1
    48c8:	49a3      	ldr	r1, [pc, #652]	; (4b58 <_dtoa_r+0x720>)
    48ca:	00db      	lsls	r3, r3, #3
    48cc:	2a00      	cmp	r2, #0
    48ce:	d049      	beq.n	4964 <_dtoa_r+0x52c>
    48d0:	18cb      	adds	r3, r1, r3
    48d2:	681a      	ldr	r2, [r3, #0]
    48d4:	685b      	ldr	r3, [r3, #4]
    48d6:	2000      	movs	r0, #0
    48d8:	49a0      	ldr	r1, [pc, #640]	; (4b5c <_dtoa_r+0x724>)
    48da:	f002 fd0d 	bl	72f8 <__aeabi_ddiv>
    48de:	002b      	movs	r3, r5
    48e0:	0022      	movs	r2, r4
    48e2:	f003 fba7 	bl	8034 <__aeabi_dsub>
    48e6:	9012      	str	r0, [sp, #72]	; 0x48
    48e8:	9113      	str	r1, [sp, #76]	; 0x4c
    48ea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    48ec:	9806      	ldr	r0, [sp, #24]
    48ee:	9907      	ldr	r1, [sp, #28]
    48f0:	f003 ff14 	bl	871c <__aeabi_d2iz>
    48f4:	0004      	movs	r4, r0
    48f6:	f003 ff47 	bl	8788 <__aeabi_i2d>
    48fa:	0002      	movs	r2, r0
    48fc:	000b      	movs	r3, r1
    48fe:	9806      	ldr	r0, [sp, #24]
    4900:	9907      	ldr	r1, [sp, #28]
    4902:	f003 fb97 	bl	8034 <__aeabi_dsub>
    4906:	3501      	adds	r5, #1
    4908:	1e6b      	subs	r3, r5, #1
    490a:	3430      	adds	r4, #48	; 0x30
    490c:	701c      	strb	r4, [r3, #0]
    490e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    4910:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4912:	9006      	str	r0, [sp, #24]
    4914:	9107      	str	r1, [sp, #28]
    4916:	f001 fc99 	bl	624c <__aeabi_dcmplt>
    491a:	2800      	cmp	r0, #0
    491c:	d000      	beq.n	4920 <_dtoa_r+0x4e8>
    491e:	e32e      	b.n	4f7e <_dtoa_r+0xb46>
    4920:	9a06      	ldr	r2, [sp, #24]
    4922:	9b07      	ldr	r3, [sp, #28]
    4924:	2000      	movs	r0, #0
    4926:	4986      	ldr	r1, [pc, #536]	; (4b40 <_dtoa_r+0x708>)
    4928:	f003 fb84 	bl	8034 <__aeabi_dsub>
    492c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    492e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4930:	f001 fc8c 	bl	624c <__aeabi_dcmplt>
    4934:	2800      	cmp	r0, #0
    4936:	d000      	beq.n	493a <_dtoa_r+0x502>
    4938:	e0c7      	b.n	4aca <_dtoa_r+0x692>
    493a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    493c:	1aeb      	subs	r3, r5, r3
    493e:	42b3      	cmp	r3, r6
    4940:	da5b      	bge.n	49fa <_dtoa_r+0x5c2>
    4942:	9812      	ldr	r0, [sp, #72]	; 0x48
    4944:	9913      	ldr	r1, [sp, #76]	; 0x4c
    4946:	2200      	movs	r2, #0
    4948:	4b7e      	ldr	r3, [pc, #504]	; (4b44 <_dtoa_r+0x70c>)
    494a:	f003 f8f9 	bl	7b40 <__aeabi_dmul>
    494e:	2200      	movs	r2, #0
    4950:	9012      	str	r0, [sp, #72]	; 0x48
    4952:	9113      	str	r1, [sp, #76]	; 0x4c
    4954:	9806      	ldr	r0, [sp, #24]
    4956:	9907      	ldr	r1, [sp, #28]
    4958:	4b7a      	ldr	r3, [pc, #488]	; (4b44 <_dtoa_r+0x70c>)
    495a:	f003 f8f1 	bl	7b40 <__aeabi_dmul>
    495e:	9006      	str	r0, [sp, #24]
    4960:	9107      	str	r1, [sp, #28]
    4962:	e7c3      	b.n	48ec <_dtoa_r+0x4b4>
    4964:	18c9      	adds	r1, r1, r3
    4966:	0022      	movs	r2, r4
    4968:	6808      	ldr	r0, [r1, #0]
    496a:	6849      	ldr	r1, [r1, #4]
    496c:	002b      	movs	r3, r5
    496e:	f003 f8e7 	bl	7b40 <__aeabi_dmul>
    4972:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    4974:	9012      	str	r0, [sp, #72]	; 0x48
    4976:	9113      	str	r1, [sp, #76]	; 0x4c
    4978:	19a5      	adds	r5, r4, r6
    497a:	9806      	ldr	r0, [sp, #24]
    497c:	9907      	ldr	r1, [sp, #28]
    497e:	f003 fecd 	bl	871c <__aeabi_d2iz>
    4982:	0006      	movs	r6, r0
    4984:	f003 ff00 	bl	8788 <__aeabi_i2d>
    4988:	0002      	movs	r2, r0
    498a:	000b      	movs	r3, r1
    498c:	9806      	ldr	r0, [sp, #24]
    498e:	9907      	ldr	r1, [sp, #28]
    4990:	f003 fb50 	bl	8034 <__aeabi_dsub>
    4994:	3630      	adds	r6, #48	; 0x30
    4996:	7026      	strb	r6, [r4, #0]
    4998:	3401      	adds	r4, #1
    499a:	9006      	str	r0, [sp, #24]
    499c:	9107      	str	r1, [sp, #28]
    499e:	2200      	movs	r2, #0
    49a0:	42a5      	cmp	r5, r4
    49a2:	d122      	bne.n	49ea <_dtoa_r+0x5b2>
    49a4:	4b6d      	ldr	r3, [pc, #436]	; (4b5c <_dtoa_r+0x724>)
    49a6:	9812      	ldr	r0, [sp, #72]	; 0x48
    49a8:	9913      	ldr	r1, [sp, #76]	; 0x4c
    49aa:	f002 f979 	bl	6ca0 <__aeabi_dadd>
    49ae:	0002      	movs	r2, r0
    49b0:	000b      	movs	r3, r1
    49b2:	9806      	ldr	r0, [sp, #24]
    49b4:	9907      	ldr	r1, [sp, #28]
    49b6:	f001 fc5d 	bl	6274 <__aeabi_dcmpgt>
    49ba:	2800      	cmp	r0, #0
    49bc:	d000      	beq.n	49c0 <_dtoa_r+0x588>
    49be:	e084      	b.n	4aca <_dtoa_r+0x692>
    49c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    49c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    49c4:	2000      	movs	r0, #0
    49c6:	4965      	ldr	r1, [pc, #404]	; (4b5c <_dtoa_r+0x724>)
    49c8:	f003 fb34 	bl	8034 <__aeabi_dsub>
    49cc:	0002      	movs	r2, r0
    49ce:	000b      	movs	r3, r1
    49d0:	9806      	ldr	r0, [sp, #24]
    49d2:	9907      	ldr	r1, [sp, #28]
    49d4:	f001 fc3a 	bl	624c <__aeabi_dcmplt>
    49d8:	2800      	cmp	r0, #0
    49da:	d00e      	beq.n	49fa <_dtoa_r+0x5c2>
    49dc:	1e6b      	subs	r3, r5, #1
    49de:	781a      	ldrb	r2, [r3, #0]
    49e0:	2a30      	cmp	r2, #48	; 0x30
    49e2:	d000      	beq.n	49e6 <_dtoa_r+0x5ae>
    49e4:	e2cb      	b.n	4f7e <_dtoa_r+0xb46>
    49e6:	001d      	movs	r5, r3
    49e8:	e7f8      	b.n	49dc <_dtoa_r+0x5a4>
    49ea:	9806      	ldr	r0, [sp, #24]
    49ec:	9907      	ldr	r1, [sp, #28]
    49ee:	4b55      	ldr	r3, [pc, #340]	; (4b44 <_dtoa_r+0x70c>)
    49f0:	f003 f8a6 	bl	7b40 <__aeabi_dmul>
    49f4:	9006      	str	r0, [sp, #24]
    49f6:	9107      	str	r1, [sp, #28]
    49f8:	e7bf      	b.n	497a <_dtoa_r+0x542>
    49fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
    49fc:	9c15      	ldr	r4, [sp, #84]	; 0x54
    49fe:	9306      	str	r3, [sp, #24]
    4a00:	9407      	str	r4, [sp, #28]
    4a02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    4a04:	2b00      	cmp	r3, #0
    4a06:	da00      	bge.n	4a0a <_dtoa_r+0x5d2>
    4a08:	e081      	b.n	4b0e <_dtoa_r+0x6d6>
    4a0a:	9a03      	ldr	r2, [sp, #12]
    4a0c:	2a0e      	cmp	r2, #14
    4a0e:	dd00      	ble.n	4a12 <_dtoa_r+0x5da>
    4a10:	e07d      	b.n	4b0e <_dtoa_r+0x6d6>
    4a12:	00d3      	lsls	r3, r2, #3
    4a14:	4a50      	ldr	r2, [pc, #320]	; (4b58 <_dtoa_r+0x720>)
    4a16:	18d3      	adds	r3, r2, r3
    4a18:	685c      	ldr	r4, [r3, #4]
    4a1a:	681b      	ldr	r3, [r3, #0]
    4a1c:	9308      	str	r3, [sp, #32]
    4a1e:	9409      	str	r4, [sp, #36]	; 0x24
    4a20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    4a22:	2b00      	cmp	r3, #0
    4a24:	da15      	bge.n	4a52 <_dtoa_r+0x61a>
    4a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4a28:	2b00      	cmp	r3, #0
    4a2a:	dc12      	bgt.n	4a52 <_dtoa_r+0x61a>
    4a2c:	d000      	beq.n	4a30 <_dtoa_r+0x5f8>
    4a2e:	e188      	b.n	4d42 <_dtoa_r+0x90a>
    4a30:	9808      	ldr	r0, [sp, #32]
    4a32:	9909      	ldr	r1, [sp, #36]	; 0x24
    4a34:	2200      	movs	r2, #0
    4a36:	4b46      	ldr	r3, [pc, #280]	; (4b50 <_dtoa_r+0x718>)
    4a38:	f003 f882 	bl	7b40 <__aeabi_dmul>
    4a3c:	9a06      	ldr	r2, [sp, #24]
    4a3e:	9b07      	ldr	r3, [sp, #28]
    4a40:	f001 fc22 	bl	6288 <__aeabi_dcmpge>
    4a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4a46:	9308      	str	r3, [sp, #32]
    4a48:	001e      	movs	r6, r3
    4a4a:	2800      	cmp	r0, #0
    4a4c:	d000      	beq.n	4a50 <_dtoa_r+0x618>
    4a4e:	e17b      	b.n	4d48 <_dtoa_r+0x910>
    4a50:	e182      	b.n	4d58 <_dtoa_r+0x920>
    4a52:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4a54:	9e06      	ldr	r6, [sp, #24]
    4a56:	9f07      	ldr	r7, [sp, #28]
    4a58:	9a08      	ldr	r2, [sp, #32]
    4a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4a5c:	0030      	movs	r0, r6
    4a5e:	0039      	movs	r1, r7
    4a60:	f002 fc4a 	bl	72f8 <__aeabi_ddiv>
    4a64:	f003 fe5a 	bl	871c <__aeabi_d2iz>
    4a68:	0004      	movs	r4, r0
    4a6a:	f003 fe8d 	bl	8788 <__aeabi_i2d>
    4a6e:	9a08      	ldr	r2, [sp, #32]
    4a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4a72:	f003 f865 	bl	7b40 <__aeabi_dmul>
    4a76:	0002      	movs	r2, r0
    4a78:	000b      	movs	r3, r1
    4a7a:	0030      	movs	r0, r6
    4a7c:	0039      	movs	r1, r7
    4a7e:	f003 fad9 	bl	8034 <__aeabi_dsub>
    4a82:	0022      	movs	r2, r4
    4a84:	3501      	adds	r5, #1
    4a86:	1e6b      	subs	r3, r5, #1
    4a88:	3230      	adds	r2, #48	; 0x30
    4a8a:	701a      	strb	r2, [r3, #0]
    4a8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4a8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4a90:	1aeb      	subs	r3, r5, r3
    4a92:	429a      	cmp	r2, r3
    4a94:	d12e      	bne.n	4af4 <_dtoa_r+0x6bc>
    4a96:	0002      	movs	r2, r0
    4a98:	000b      	movs	r3, r1
    4a9a:	f002 f901 	bl	6ca0 <__aeabi_dadd>
    4a9e:	0006      	movs	r6, r0
    4aa0:	000f      	movs	r7, r1
    4aa2:	0002      	movs	r2, r0
    4aa4:	000b      	movs	r3, r1
    4aa6:	9808      	ldr	r0, [sp, #32]
    4aa8:	9909      	ldr	r1, [sp, #36]	; 0x24
    4aaa:	f001 fbcf 	bl	624c <__aeabi_dcmplt>
    4aae:	2800      	cmp	r0, #0
    4ab0:	d10f      	bne.n	4ad2 <_dtoa_r+0x69a>
    4ab2:	9808      	ldr	r0, [sp, #32]
    4ab4:	9909      	ldr	r1, [sp, #36]	; 0x24
    4ab6:	0032      	movs	r2, r6
    4ab8:	003b      	movs	r3, r7
    4aba:	f001 fbc1 	bl	6240 <__aeabi_dcmpeq>
    4abe:	2800      	cmp	r0, #0
    4ac0:	d100      	bne.n	4ac4 <_dtoa_r+0x68c>
    4ac2:	e25e      	b.n	4f82 <_dtoa_r+0xb4a>
    4ac4:	07e3      	lsls	r3, r4, #31
    4ac6:	d404      	bmi.n	4ad2 <_dtoa_r+0x69a>
    4ac8:	e25b      	b.n	4f82 <_dtoa_r+0xb4a>
    4aca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4acc:	9303      	str	r3, [sp, #12]
    4ace:	e000      	b.n	4ad2 <_dtoa_r+0x69a>
    4ad0:	001d      	movs	r5, r3
    4ad2:	1e6b      	subs	r3, r5, #1
    4ad4:	781a      	ldrb	r2, [r3, #0]
    4ad6:	2a39      	cmp	r2, #57	; 0x39
    4ad8:	d108      	bne.n	4aec <_dtoa_r+0x6b4>
    4ada:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4adc:	429a      	cmp	r2, r3
    4ade:	d1f7      	bne.n	4ad0 <_dtoa_r+0x698>
    4ae0:	9a03      	ldr	r2, [sp, #12]
    4ae2:	990d      	ldr	r1, [sp, #52]	; 0x34
    4ae4:	3201      	adds	r2, #1
    4ae6:	9203      	str	r2, [sp, #12]
    4ae8:	2230      	movs	r2, #48	; 0x30
    4aea:	700a      	strb	r2, [r1, #0]
    4aec:	781a      	ldrb	r2, [r3, #0]
    4aee:	3201      	adds	r2, #1
    4af0:	701a      	strb	r2, [r3, #0]
    4af2:	e246      	b.n	4f82 <_dtoa_r+0xb4a>
    4af4:	2200      	movs	r2, #0
    4af6:	4b13      	ldr	r3, [pc, #76]	; (4b44 <_dtoa_r+0x70c>)
    4af8:	f003 f822 	bl	7b40 <__aeabi_dmul>
    4afc:	2200      	movs	r2, #0
    4afe:	2300      	movs	r3, #0
    4b00:	0006      	movs	r6, r0
    4b02:	000f      	movs	r7, r1
    4b04:	f001 fb9c 	bl	6240 <__aeabi_dcmpeq>
    4b08:	2800      	cmp	r0, #0
    4b0a:	d0a5      	beq.n	4a58 <_dtoa_r+0x620>
    4b0c:	e239      	b.n	4f82 <_dtoa_r+0xb4a>
    4b0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4b10:	2a00      	cmp	r2, #0
    4b12:	d044      	beq.n	4b9e <_dtoa_r+0x766>
    4b14:	9a22      	ldr	r2, [sp, #136]	; 0x88
    4b16:	2a01      	cmp	r2, #1
    4b18:	dc0b      	bgt.n	4b32 <_dtoa_r+0x6fa>
    4b1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    4b1c:	2a00      	cmp	r2, #0
    4b1e:	d002      	beq.n	4b26 <_dtoa_r+0x6ee>
    4b20:	4a0f      	ldr	r2, [pc, #60]	; (4b60 <_dtoa_r+0x728>)
    4b22:	189b      	adds	r3, r3, r2
    4b24:	e002      	b.n	4b2c <_dtoa_r+0x6f4>
    4b26:	2336      	movs	r3, #54	; 0x36
    4b28:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    4b2a:	1a9b      	subs	r3, r3, r2
    4b2c:	9d08      	ldr	r5, [sp, #32]
    4b2e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4b30:	e029      	b.n	4b86 <_dtoa_r+0x74e>
    4b32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4b34:	1e5d      	subs	r5, r3, #1
    4b36:	9b08      	ldr	r3, [sp, #32]
    4b38:	42ab      	cmp	r3, r5
    4b3a:	db13      	blt.n	4b64 <_dtoa_r+0x72c>
    4b3c:	1b5d      	subs	r5, r3, r5
    4b3e:	e018      	b.n	4b72 <_dtoa_r+0x73a>
    4b40:	3ff00000 	.word	0x3ff00000
    4b44:	40240000 	.word	0x40240000
    4b48:	401c0000 	.word	0x401c0000
    4b4c:	fcc00000 	.word	0xfcc00000
    4b50:	40140000 	.word	0x40140000
    4b54:	7cc00000 	.word	0x7cc00000
    4b58:	00008c88 	.word	0x00008c88
    4b5c:	3fe00000 	.word	0x3fe00000
    4b60:	00000433 	.word	0x00000433
    4b64:	9b08      	ldr	r3, [sp, #32]
    4b66:	9508      	str	r5, [sp, #32]
    4b68:	1aea      	subs	r2, r5, r3
    4b6a:	2500      	movs	r5, #0
    4b6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4b6e:	189b      	adds	r3, r3, r2
    4b70:	9311      	str	r3, [sp, #68]	; 0x44
    4b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4b74:	2b00      	cmp	r3, #0
    4b76:	da04      	bge.n	4b82 <_dtoa_r+0x74a>
    4b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4b7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4b7c:	1a9c      	subs	r4, r3, r2
    4b7e:	2300      	movs	r3, #0
    4b80:	e001      	b.n	4b86 <_dtoa_r+0x74e>
    4b82:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4b86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4b88:	2101      	movs	r1, #1
    4b8a:	18d2      	adds	r2, r2, r3
    4b8c:	920b      	str	r2, [sp, #44]	; 0x2c
    4b8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4b90:	9804      	ldr	r0, [sp, #16]
    4b92:	18d3      	adds	r3, r2, r3
    4b94:	930c      	str	r3, [sp, #48]	; 0x30
    4b96:	f000 fcf2 	bl	557e <__i2b>
    4b9a:	0006      	movs	r6, r0
    4b9c:	e002      	b.n	4ba4 <_dtoa_r+0x76c>
    4b9e:	9d08      	ldr	r5, [sp, #32]
    4ba0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4ba2:	9e10      	ldr	r6, [sp, #64]	; 0x40
    4ba4:	2c00      	cmp	r4, #0
    4ba6:	d00e      	beq.n	4bc6 <_dtoa_r+0x78e>
    4ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4baa:	2b00      	cmp	r3, #0
    4bac:	dd0b      	ble.n	4bc6 <_dtoa_r+0x78e>
    4bae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4bb0:	1e23      	subs	r3, r4, #0
    4bb2:	4293      	cmp	r3, r2
    4bb4:	dd00      	ble.n	4bb8 <_dtoa_r+0x780>
    4bb6:	0013      	movs	r3, r2
    4bb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4bba:	1ae4      	subs	r4, r4, r3
    4bbc:	1ad2      	subs	r2, r2, r3
    4bbe:	920b      	str	r2, [sp, #44]	; 0x2c
    4bc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4bc2:	1ad3      	subs	r3, r2, r3
    4bc4:	930c      	str	r3, [sp, #48]	; 0x30
    4bc6:	9b08      	ldr	r3, [sp, #32]
    4bc8:	2b00      	cmp	r3, #0
    4bca:	dd20      	ble.n	4c0e <_dtoa_r+0x7d6>
    4bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4bce:	2b00      	cmp	r3, #0
    4bd0:	d017      	beq.n	4c02 <_dtoa_r+0x7ca>
    4bd2:	2d00      	cmp	r5, #0
    4bd4:	d011      	beq.n	4bfa <_dtoa_r+0x7c2>
    4bd6:	0031      	movs	r1, r6
    4bd8:	002a      	movs	r2, r5
    4bda:	9804      	ldr	r0, [sp, #16]
    4bdc:	f000 fd62 	bl	56a4 <__pow5mult>
    4be0:	9a05      	ldr	r2, [sp, #20]
    4be2:	0001      	movs	r1, r0
    4be4:	0006      	movs	r6, r0
    4be6:	9804      	ldr	r0, [sp, #16]
    4be8:	f000 fcd2 	bl	5590 <__multiply>
    4bec:	9905      	ldr	r1, [sp, #20]
    4bee:	900e      	str	r0, [sp, #56]	; 0x38
    4bf0:	9804      	ldr	r0, [sp, #16]
    4bf2:	f000 fc24 	bl	543e <_Bfree>
    4bf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4bf8:	9305      	str	r3, [sp, #20]
    4bfa:	9b08      	ldr	r3, [sp, #32]
    4bfc:	1b5a      	subs	r2, r3, r5
    4bfe:	d006      	beq.n	4c0e <_dtoa_r+0x7d6>
    4c00:	e000      	b.n	4c04 <_dtoa_r+0x7cc>
    4c02:	9a08      	ldr	r2, [sp, #32]
    4c04:	9905      	ldr	r1, [sp, #20]
    4c06:	9804      	ldr	r0, [sp, #16]
    4c08:	f000 fd4c 	bl	56a4 <__pow5mult>
    4c0c:	9005      	str	r0, [sp, #20]
    4c0e:	2101      	movs	r1, #1
    4c10:	9804      	ldr	r0, [sp, #16]
    4c12:	f000 fcb4 	bl	557e <__i2b>
    4c16:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4c18:	9008      	str	r0, [sp, #32]
    4c1a:	2b00      	cmp	r3, #0
    4c1c:	d100      	bne.n	4c20 <_dtoa_r+0x7e8>
    4c1e:	e1c0      	b.n	4fa2 <_dtoa_r+0xb6a>
    4c20:	001a      	movs	r2, r3
    4c22:	0001      	movs	r1, r0
    4c24:	9804      	ldr	r0, [sp, #16]
    4c26:	f000 fd3d 	bl	56a4 <__pow5mult>
    4c2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4c2c:	9008      	str	r0, [sp, #32]
    4c2e:	2b01      	cmp	r3, #1
    4c30:	dc17      	bgt.n	4c62 <_dtoa_r+0x82a>
    4c32:	2500      	movs	r5, #0
    4c34:	9b06      	ldr	r3, [sp, #24]
    4c36:	42ab      	cmp	r3, r5
    4c38:	d10e      	bne.n	4c58 <_dtoa_r+0x820>
    4c3a:	9b07      	ldr	r3, [sp, #28]
    4c3c:	031b      	lsls	r3, r3, #12
    4c3e:	42ab      	cmp	r3, r5
    4c40:	d10a      	bne.n	4c58 <_dtoa_r+0x820>
    4c42:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4c44:	9a07      	ldr	r2, [sp, #28]
    4c46:	4213      	tst	r3, r2
    4c48:	d006      	beq.n	4c58 <_dtoa_r+0x820>
    4c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4c4c:	3501      	adds	r5, #1
    4c4e:	3301      	adds	r3, #1
    4c50:	930b      	str	r3, [sp, #44]	; 0x2c
    4c52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4c54:	3301      	adds	r3, #1
    4c56:	930c      	str	r3, [sp, #48]	; 0x30
    4c58:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4c5a:	2001      	movs	r0, #1
    4c5c:	2b00      	cmp	r3, #0
    4c5e:	d00d      	beq.n	4c7c <_dtoa_r+0x844>
    4c60:	e000      	b.n	4c64 <_dtoa_r+0x82c>
    4c62:	2500      	movs	r5, #0
    4c64:	9b08      	ldr	r3, [sp, #32]
    4c66:	9a08      	ldr	r2, [sp, #32]
    4c68:	691b      	ldr	r3, [r3, #16]
    4c6a:	930e      	str	r3, [sp, #56]	; 0x38
    4c6c:	3303      	adds	r3, #3
    4c6e:	009b      	lsls	r3, r3, #2
    4c70:	18d3      	adds	r3, r2, r3
    4c72:	6858      	ldr	r0, [r3, #4]
    4c74:	f000 fc39 	bl	54ea <__hi0bits>
    4c78:	2320      	movs	r3, #32
    4c7a:	1a18      	subs	r0, r3, r0
    4c7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4c7e:	18c0      	adds	r0, r0, r3
    4c80:	231f      	movs	r3, #31
    4c82:	4018      	ands	r0, r3
    4c84:	d009      	beq.n	4c9a <_dtoa_r+0x862>
    4c86:	3301      	adds	r3, #1
    4c88:	1a1b      	subs	r3, r3, r0
    4c8a:	2b04      	cmp	r3, #4
    4c8c:	dd02      	ble.n	4c94 <_dtoa_r+0x85c>
    4c8e:	231c      	movs	r3, #28
    4c90:	1a18      	subs	r0, r3, r0
    4c92:	e003      	b.n	4c9c <_dtoa_r+0x864>
    4c94:	2b04      	cmp	r3, #4
    4c96:	d008      	beq.n	4caa <_dtoa_r+0x872>
    4c98:	0018      	movs	r0, r3
    4c9a:	301c      	adds	r0, #28
    4c9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4c9e:	1824      	adds	r4, r4, r0
    4ca0:	181b      	adds	r3, r3, r0
    4ca2:	930b      	str	r3, [sp, #44]	; 0x2c
    4ca4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4ca6:	181b      	adds	r3, r3, r0
    4ca8:	930c      	str	r3, [sp, #48]	; 0x30
    4caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4cac:	2b00      	cmp	r3, #0
    4cae:	dd05      	ble.n	4cbc <_dtoa_r+0x884>
    4cb0:	001a      	movs	r2, r3
    4cb2:	9905      	ldr	r1, [sp, #20]
    4cb4:	9804      	ldr	r0, [sp, #16]
    4cb6:	f000 fd49 	bl	574c <__lshift>
    4cba:	9005      	str	r0, [sp, #20]
    4cbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4cbe:	2b00      	cmp	r3, #0
    4cc0:	dd05      	ble.n	4cce <_dtoa_r+0x896>
    4cc2:	001a      	movs	r2, r3
    4cc4:	9908      	ldr	r1, [sp, #32]
    4cc6:	9804      	ldr	r0, [sp, #16]
    4cc8:	f000 fd40 	bl	574c <__lshift>
    4ccc:	9008      	str	r0, [sp, #32]
    4cce:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4cd0:	2b00      	cmp	r3, #0
    4cd2:	d01d      	beq.n	4d10 <_dtoa_r+0x8d8>
    4cd4:	9908      	ldr	r1, [sp, #32]
    4cd6:	9805      	ldr	r0, [sp, #20]
    4cd8:	f000 fd8a 	bl	57f0 <__mcmp>
    4cdc:	2800      	cmp	r0, #0
    4cde:	da17      	bge.n	4d10 <_dtoa_r+0x8d8>
    4ce0:	9b03      	ldr	r3, [sp, #12]
    4ce2:	220a      	movs	r2, #10
    4ce4:	3b01      	subs	r3, #1
    4ce6:	9303      	str	r3, [sp, #12]
    4ce8:	9905      	ldr	r1, [sp, #20]
    4cea:	2300      	movs	r3, #0
    4cec:	9804      	ldr	r0, [sp, #16]
    4cee:	f000 fbbf 	bl	5470 <__multadd>
    4cf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4cf4:	9005      	str	r0, [sp, #20]
    4cf6:	2b00      	cmp	r3, #0
    4cf8:	d100      	bne.n	4cfc <_dtoa_r+0x8c4>
    4cfa:	e159      	b.n	4fb0 <_dtoa_r+0xb78>
    4cfc:	0031      	movs	r1, r6
    4cfe:	2300      	movs	r3, #0
    4d00:	220a      	movs	r2, #10
    4d02:	9804      	ldr	r0, [sp, #16]
    4d04:	f000 fbb4 	bl	5470 <__multadd>
    4d08:	0006      	movs	r6, r0
    4d0a:	2f00      	cmp	r7, #0
    4d0c:	dc37      	bgt.n	4d7e <_dtoa_r+0x946>
    4d0e:	e033      	b.n	4d78 <_dtoa_r+0x940>
    4d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4d12:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    4d14:	2b00      	cmp	r3, #0
    4d16:	dc2a      	bgt.n	4d6e <_dtoa_r+0x936>
    4d18:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4d1a:	2b02      	cmp	r3, #2
    4d1c:	dd27      	ble.n	4d6e <_dtoa_r+0x936>
    4d1e:	2f00      	cmp	r7, #0
    4d20:	d112      	bne.n	4d48 <_dtoa_r+0x910>
    4d22:	9908      	ldr	r1, [sp, #32]
    4d24:	003b      	movs	r3, r7
    4d26:	2205      	movs	r2, #5
    4d28:	9804      	ldr	r0, [sp, #16]
    4d2a:	f000 fba1 	bl	5470 <__multadd>
    4d2e:	9008      	str	r0, [sp, #32]
    4d30:	0001      	movs	r1, r0
    4d32:	9805      	ldr	r0, [sp, #20]
    4d34:	f000 fd5c 	bl	57f0 <__mcmp>
    4d38:	2800      	cmp	r0, #0
    4d3a:	dc0d      	bgt.n	4d58 <_dtoa_r+0x920>
    4d3c:	e004      	b.n	4d48 <_dtoa_r+0x910>
    4d3e:	9608      	str	r6, [sp, #32]
    4d40:	e002      	b.n	4d48 <_dtoa_r+0x910>
    4d42:	2300      	movs	r3, #0
    4d44:	001e      	movs	r6, r3
    4d46:	9308      	str	r3, [sp, #32]
    4d48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    4d4a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4d4c:	43db      	mvns	r3, r3
    4d4e:	9303      	str	r3, [sp, #12]
    4d50:	e00a      	b.n	4d68 <_dtoa_r+0x930>
    4d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4d54:	9608      	str	r6, [sp, #32]
    4d56:	9303      	str	r3, [sp, #12]
    4d58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4d5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4d5c:	1c5d      	adds	r5, r3, #1
    4d5e:	2331      	movs	r3, #49	; 0x31
    4d60:	7013      	strb	r3, [r2, #0]
    4d62:	9b03      	ldr	r3, [sp, #12]
    4d64:	3301      	adds	r3, #1
    4d66:	9303      	str	r3, [sp, #12]
    4d68:	960a      	str	r6, [sp, #40]	; 0x28
    4d6a:	2600      	movs	r6, #0
    4d6c:	e0f3      	b.n	4f56 <_dtoa_r+0xb1e>
    4d6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4d70:	2b00      	cmp	r3, #0
    4d72:	d104      	bne.n	4d7e <_dtoa_r+0x946>
    4d74:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4d76:	e0b5      	b.n	4ee4 <_dtoa_r+0xaac>
    4d78:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4d7a:	2b02      	cmp	r3, #2
    4d7c:	dccf      	bgt.n	4d1e <_dtoa_r+0x8e6>
    4d7e:	2c00      	cmp	r4, #0
    4d80:	dd05      	ble.n	4d8e <_dtoa_r+0x956>
    4d82:	0031      	movs	r1, r6
    4d84:	0022      	movs	r2, r4
    4d86:	9804      	ldr	r0, [sp, #16]
    4d88:	f000 fce0 	bl	574c <__lshift>
    4d8c:	0006      	movs	r6, r0
    4d8e:	960a      	str	r6, [sp, #40]	; 0x28
    4d90:	2d00      	cmp	r5, #0
    4d92:	d012      	beq.n	4dba <_dtoa_r+0x982>
    4d94:	6871      	ldr	r1, [r6, #4]
    4d96:	9804      	ldr	r0, [sp, #16]
    4d98:	f000 fb19 	bl	53ce <_Balloc>
    4d9c:	0031      	movs	r1, r6
    4d9e:	0004      	movs	r4, r0
    4da0:	6933      	ldr	r3, [r6, #16]
    4da2:	310c      	adds	r1, #12
    4da4:	1c9a      	adds	r2, r3, #2
    4da6:	0092      	lsls	r2, r2, #2
    4da8:	300c      	adds	r0, #12
    4daa:	f7fe fc21 	bl	35f0 <memcpy>
    4dae:	2201      	movs	r2, #1
    4db0:	0021      	movs	r1, r4
    4db2:	9804      	ldr	r0, [sp, #16]
    4db4:	f000 fcca 	bl	574c <__lshift>
    4db8:	900a      	str	r0, [sp, #40]	; 0x28
    4dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4dbc:	1e7d      	subs	r5, r7, #1
    4dbe:	930b      	str	r3, [sp, #44]	; 0x2c
    4dc0:	195b      	adds	r3, r3, r5
    4dc2:	930e      	str	r3, [sp, #56]	; 0x38
    4dc4:	9908      	ldr	r1, [sp, #32]
    4dc6:	9805      	ldr	r0, [sp, #20]
    4dc8:	f7ff fab0 	bl	432c <quorem>
    4dcc:	0031      	movs	r1, r6
    4dce:	9010      	str	r0, [sp, #64]	; 0x40
    4dd0:	0004      	movs	r4, r0
    4dd2:	9805      	ldr	r0, [sp, #20]
    4dd4:	f000 fd0c 	bl	57f0 <__mcmp>
    4dd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4dda:	0005      	movs	r5, r0
    4ddc:	9908      	ldr	r1, [sp, #32]
    4dde:	9804      	ldr	r0, [sp, #16]
    4de0:	f000 fd21 	bl	5826 <__mdiff>
    4de4:	2301      	movs	r3, #1
    4de6:	930c      	str	r3, [sp, #48]	; 0x30
    4de8:	68c3      	ldr	r3, [r0, #12]
    4dea:	3430      	adds	r4, #48	; 0x30
    4dec:	0007      	movs	r7, r0
    4dee:	2b00      	cmp	r3, #0
    4df0:	d104      	bne.n	4dfc <_dtoa_r+0x9c4>
    4df2:	0001      	movs	r1, r0
    4df4:	9805      	ldr	r0, [sp, #20]
    4df6:	f000 fcfb 	bl	57f0 <__mcmp>
    4dfa:	900c      	str	r0, [sp, #48]	; 0x30
    4dfc:	0039      	movs	r1, r7
    4dfe:	9804      	ldr	r0, [sp, #16]
    4e00:	f000 fb1d 	bl	543e <_Bfree>
    4e04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4e06:	9a22      	ldr	r2, [sp, #136]	; 0x88
    4e08:	4313      	orrs	r3, r2
    4e0a:	d108      	bne.n	4e1e <_dtoa_r+0x9e6>
    4e0c:	9a06      	ldr	r2, [sp, #24]
    4e0e:	3301      	adds	r3, #1
    4e10:	4213      	tst	r3, r2
    4e12:	d104      	bne.n	4e1e <_dtoa_r+0x9e6>
    4e14:	2c39      	cmp	r4, #57	; 0x39
    4e16:	d02a      	beq.n	4e6e <_dtoa_r+0xa36>
    4e18:	2d00      	cmp	r5, #0
    4e1a:	dc1c      	bgt.n	4e56 <_dtoa_r+0xa1e>
    4e1c:	e01d      	b.n	4e5a <_dtoa_r+0xa22>
    4e1e:	2d00      	cmp	r5, #0
    4e20:	db06      	blt.n	4e30 <_dtoa_r+0x9f8>
    4e22:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4e24:	431d      	orrs	r5, r3
    4e26:	d11b      	bne.n	4e60 <_dtoa_r+0xa28>
    4e28:	2301      	movs	r3, #1
    4e2a:	9a06      	ldr	r2, [sp, #24]
    4e2c:	4213      	tst	r3, r2
    4e2e:	d117      	bne.n	4e60 <_dtoa_r+0xa28>
    4e30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4e32:	2b00      	cmp	r3, #0
    4e34:	dd11      	ble.n	4e5a <_dtoa_r+0xa22>
    4e36:	9905      	ldr	r1, [sp, #20]
    4e38:	2201      	movs	r2, #1
    4e3a:	9804      	ldr	r0, [sp, #16]
    4e3c:	f000 fc86 	bl	574c <__lshift>
    4e40:	9908      	ldr	r1, [sp, #32]
    4e42:	9005      	str	r0, [sp, #20]
    4e44:	f000 fcd4 	bl	57f0 <__mcmp>
    4e48:	2800      	cmp	r0, #0
    4e4a:	dc02      	bgt.n	4e52 <_dtoa_r+0xa1a>
    4e4c:	d105      	bne.n	4e5a <_dtoa_r+0xa22>
    4e4e:	07e3      	lsls	r3, r4, #31
    4e50:	d503      	bpl.n	4e5a <_dtoa_r+0xa22>
    4e52:	2c39      	cmp	r4, #57	; 0x39
    4e54:	d00b      	beq.n	4e6e <_dtoa_r+0xa36>
    4e56:	9c10      	ldr	r4, [sp, #64]	; 0x40
    4e58:	3431      	adds	r4, #49	; 0x31
    4e5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4e5c:	1c5d      	adds	r5, r3, #1
    4e5e:	e00f      	b.n	4e80 <_dtoa_r+0xa48>
    4e60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4e62:	1c5f      	adds	r7, r3, #1
    4e64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4e66:	2b00      	cmp	r3, #0
    4e68:	dd0c      	ble.n	4e84 <_dtoa_r+0xa4c>
    4e6a:	2c39      	cmp	r4, #57	; 0x39
    4e6c:	d105      	bne.n	4e7a <_dtoa_r+0xa42>
    4e6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4e70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4e72:	1c5d      	adds	r5, r3, #1
    4e74:	2339      	movs	r3, #57	; 0x39
    4e76:	7013      	strb	r3, [r2, #0]
    4e78:	e057      	b.n	4f2a <_dtoa_r+0xaf2>
    4e7a:	003d      	movs	r5, r7
    4e7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4e7e:	3401      	adds	r4, #1
    4e80:	701c      	strb	r4, [r3, #0]
    4e82:	e068      	b.n	4f56 <_dtoa_r+0xb1e>
    4e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4e86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4e88:	003d      	movs	r5, r7
    4e8a:	701c      	strb	r4, [r3, #0]
    4e8c:	4293      	cmp	r3, r2
    4e8e:	d03c      	beq.n	4f0a <_dtoa_r+0xad2>
    4e90:	2300      	movs	r3, #0
    4e92:	220a      	movs	r2, #10
    4e94:	9905      	ldr	r1, [sp, #20]
    4e96:	9804      	ldr	r0, [sp, #16]
    4e98:	f000 faea 	bl	5470 <__multadd>
    4e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4e9e:	9005      	str	r0, [sp, #20]
    4ea0:	429e      	cmp	r6, r3
    4ea2:	d108      	bne.n	4eb6 <_dtoa_r+0xa7e>
    4ea4:	0031      	movs	r1, r6
    4ea6:	2300      	movs	r3, #0
    4ea8:	220a      	movs	r2, #10
    4eaa:	9804      	ldr	r0, [sp, #16]
    4eac:	f000 fae0 	bl	5470 <__multadd>
    4eb0:	0006      	movs	r6, r0
    4eb2:	900a      	str	r0, [sp, #40]	; 0x28
    4eb4:	e00d      	b.n	4ed2 <_dtoa_r+0xa9a>
    4eb6:	0031      	movs	r1, r6
    4eb8:	2300      	movs	r3, #0
    4eba:	220a      	movs	r2, #10
    4ebc:	9804      	ldr	r0, [sp, #16]
    4ebe:	f000 fad7 	bl	5470 <__multadd>
    4ec2:	2300      	movs	r3, #0
    4ec4:	0006      	movs	r6, r0
    4ec6:	220a      	movs	r2, #10
    4ec8:	990a      	ldr	r1, [sp, #40]	; 0x28
    4eca:	9804      	ldr	r0, [sp, #16]
    4ecc:	f000 fad0 	bl	5470 <__multadd>
    4ed0:	900a      	str	r0, [sp, #40]	; 0x28
    4ed2:	970b      	str	r7, [sp, #44]	; 0x2c
    4ed4:	e776      	b.n	4dc4 <_dtoa_r+0x98c>
    4ed6:	2300      	movs	r3, #0
    4ed8:	220a      	movs	r2, #10
    4eda:	9905      	ldr	r1, [sp, #20]
    4edc:	9804      	ldr	r0, [sp, #16]
    4ede:	f000 fac7 	bl	5470 <__multadd>
    4ee2:	9005      	str	r0, [sp, #20]
    4ee4:	9908      	ldr	r1, [sp, #32]
    4ee6:	9805      	ldr	r0, [sp, #20]
    4ee8:	f7ff fa20 	bl	432c <quorem>
    4eec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4eee:	3030      	adds	r0, #48	; 0x30
    4ef0:	7028      	strb	r0, [r5, #0]
    4ef2:	3501      	adds	r5, #1
    4ef4:	0004      	movs	r4, r0
    4ef6:	1aeb      	subs	r3, r5, r3
    4ef8:	42bb      	cmp	r3, r7
    4efa:	dbec      	blt.n	4ed6 <_dtoa_r+0xa9e>
    4efc:	1e3d      	subs	r5, r7, #0
    4efe:	dc00      	bgt.n	4f02 <_dtoa_r+0xaca>
    4f00:	2501      	movs	r5, #1
    4f02:	960a      	str	r6, [sp, #40]	; 0x28
    4f04:	2600      	movs	r6, #0
    4f06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4f08:	195d      	adds	r5, r3, r5
    4f0a:	9905      	ldr	r1, [sp, #20]
    4f0c:	2201      	movs	r2, #1
    4f0e:	9804      	ldr	r0, [sp, #16]
    4f10:	f000 fc1c 	bl	574c <__lshift>
    4f14:	9908      	ldr	r1, [sp, #32]
    4f16:	9005      	str	r0, [sp, #20]
    4f18:	f000 fc6a 	bl	57f0 <__mcmp>
    4f1c:	2800      	cmp	r0, #0
    4f1e:	dc04      	bgt.n	4f2a <_dtoa_r+0xaf2>
    4f20:	d113      	bne.n	4f4a <_dtoa_r+0xb12>
    4f22:	07e3      	lsls	r3, r4, #31
    4f24:	d401      	bmi.n	4f2a <_dtoa_r+0xaf2>
    4f26:	e010      	b.n	4f4a <_dtoa_r+0xb12>
    4f28:	001d      	movs	r5, r3
    4f2a:	1e6b      	subs	r3, r5, #1
    4f2c:	781a      	ldrb	r2, [r3, #0]
    4f2e:	2a39      	cmp	r2, #57	; 0x39
    4f30:	d108      	bne.n	4f44 <_dtoa_r+0xb0c>
    4f32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4f34:	429a      	cmp	r2, r3
    4f36:	d1f7      	bne.n	4f28 <_dtoa_r+0xaf0>
    4f38:	9b03      	ldr	r3, [sp, #12]
    4f3a:	3301      	adds	r3, #1
    4f3c:	9303      	str	r3, [sp, #12]
    4f3e:	2331      	movs	r3, #49	; 0x31
    4f40:	7013      	strb	r3, [r2, #0]
    4f42:	e008      	b.n	4f56 <_dtoa_r+0xb1e>
    4f44:	3201      	adds	r2, #1
    4f46:	701a      	strb	r2, [r3, #0]
    4f48:	e005      	b.n	4f56 <_dtoa_r+0xb1e>
    4f4a:	1e6b      	subs	r3, r5, #1
    4f4c:	781a      	ldrb	r2, [r3, #0]
    4f4e:	2a30      	cmp	r2, #48	; 0x30
    4f50:	d101      	bne.n	4f56 <_dtoa_r+0xb1e>
    4f52:	001d      	movs	r5, r3
    4f54:	e7f9      	b.n	4f4a <_dtoa_r+0xb12>
    4f56:	9908      	ldr	r1, [sp, #32]
    4f58:	9804      	ldr	r0, [sp, #16]
    4f5a:	f000 fa70 	bl	543e <_Bfree>
    4f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4f60:	2b00      	cmp	r3, #0
    4f62:	d00e      	beq.n	4f82 <_dtoa_r+0xb4a>
    4f64:	2e00      	cmp	r6, #0
    4f66:	d005      	beq.n	4f74 <_dtoa_r+0xb3c>
    4f68:	429e      	cmp	r6, r3
    4f6a:	d003      	beq.n	4f74 <_dtoa_r+0xb3c>
    4f6c:	0031      	movs	r1, r6
    4f6e:	9804      	ldr	r0, [sp, #16]
    4f70:	f000 fa65 	bl	543e <_Bfree>
    4f74:	990a      	ldr	r1, [sp, #40]	; 0x28
    4f76:	9804      	ldr	r0, [sp, #16]
    4f78:	f000 fa61 	bl	543e <_Bfree>
    4f7c:	e001      	b.n	4f82 <_dtoa_r+0xb4a>
    4f7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4f80:	9303      	str	r3, [sp, #12]
    4f82:	9804      	ldr	r0, [sp, #16]
    4f84:	9905      	ldr	r1, [sp, #20]
    4f86:	f000 fa5a 	bl	543e <_Bfree>
    4f8a:	2300      	movs	r3, #0
    4f8c:	702b      	strb	r3, [r5, #0]
    4f8e:	9b03      	ldr	r3, [sp, #12]
    4f90:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4f92:	3301      	adds	r3, #1
    4f94:	6013      	str	r3, [r2, #0]
    4f96:	9b26      	ldr	r3, [sp, #152]	; 0x98
    4f98:	980d      	ldr	r0, [sp, #52]	; 0x34
    4f9a:	2b00      	cmp	r3, #0
    4f9c:	d010      	beq.n	4fc0 <_dtoa_r+0xb88>
    4f9e:	601d      	str	r5, [r3, #0]
    4fa0:	e00e      	b.n	4fc0 <_dtoa_r+0xb88>
    4fa2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4fa4:	2b01      	cmp	r3, #1
    4fa6:	dc00      	bgt.n	4faa <_dtoa_r+0xb72>
    4fa8:	e643      	b.n	4c32 <_dtoa_r+0x7fa>
    4faa:	9d11      	ldr	r5, [sp, #68]	; 0x44
    4fac:	2001      	movs	r0, #1
    4fae:	e665      	b.n	4c7c <_dtoa_r+0x844>
    4fb0:	2f00      	cmp	r7, #0
    4fb2:	dd00      	ble.n	4fb6 <_dtoa_r+0xb7e>
    4fb4:	e6de      	b.n	4d74 <_dtoa_r+0x93c>
    4fb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4fb8:	2b02      	cmp	r3, #2
    4fba:	dc00      	bgt.n	4fbe <_dtoa_r+0xb86>
    4fbc:	e6da      	b.n	4d74 <_dtoa_r+0x93c>
    4fbe:	e6ae      	b.n	4d1e <_dtoa_r+0x8e6>
    4fc0:	b01d      	add	sp, #116	; 0x74
    4fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004fc4 <__sflush_r>:
    4fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4fc6:	898a      	ldrh	r2, [r1, #12]
    4fc8:	0005      	movs	r5, r0
    4fca:	000c      	movs	r4, r1
    4fcc:	0713      	lsls	r3, r2, #28
    4fce:	d45a      	bmi.n	5086 <__sflush_r+0xc2>
    4fd0:	684b      	ldr	r3, [r1, #4]
    4fd2:	2b00      	cmp	r3, #0
    4fd4:	dc02      	bgt.n	4fdc <__sflush_r+0x18>
    4fd6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4fd8:	2b00      	cmp	r3, #0
    4fda:	dd19      	ble.n	5010 <__sflush_r+0x4c>
    4fdc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4fde:	2f00      	cmp	r7, #0
    4fe0:	d016      	beq.n	5010 <__sflush_r+0x4c>
    4fe2:	2300      	movs	r3, #0
    4fe4:	682e      	ldr	r6, [r5, #0]
    4fe6:	602b      	str	r3, [r5, #0]
    4fe8:	2380      	movs	r3, #128	; 0x80
    4fea:	015b      	lsls	r3, r3, #5
    4fec:	401a      	ands	r2, r3
    4fee:	d001      	beq.n	4ff4 <__sflush_r+0x30>
    4ff0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4ff2:	e014      	b.n	501e <__sflush_r+0x5a>
    4ff4:	2301      	movs	r3, #1
    4ff6:	6a21      	ldr	r1, [r4, #32]
    4ff8:	0028      	movs	r0, r5
    4ffa:	47b8      	blx	r7
    4ffc:	1c43      	adds	r3, r0, #1
    4ffe:	d10e      	bne.n	501e <__sflush_r+0x5a>
    5000:	682b      	ldr	r3, [r5, #0]
    5002:	2b00      	cmp	r3, #0
    5004:	d00b      	beq.n	501e <__sflush_r+0x5a>
    5006:	2b1d      	cmp	r3, #29
    5008:	d001      	beq.n	500e <__sflush_r+0x4a>
    500a:	2b16      	cmp	r3, #22
    500c:	d102      	bne.n	5014 <__sflush_r+0x50>
    500e:	602e      	str	r6, [r5, #0]
    5010:	2000      	movs	r0, #0
    5012:	e05a      	b.n	50ca <__sflush_r+0x106>
    5014:	2240      	movs	r2, #64	; 0x40
    5016:	89a3      	ldrh	r3, [r4, #12]
    5018:	4313      	orrs	r3, r2
    501a:	81a3      	strh	r3, [r4, #12]
    501c:	e055      	b.n	50ca <__sflush_r+0x106>
    501e:	89a3      	ldrh	r3, [r4, #12]
    5020:	075b      	lsls	r3, r3, #29
    5022:	d506      	bpl.n	5032 <__sflush_r+0x6e>
    5024:	6863      	ldr	r3, [r4, #4]
    5026:	1ac0      	subs	r0, r0, r3
    5028:	6b63      	ldr	r3, [r4, #52]	; 0x34
    502a:	2b00      	cmp	r3, #0
    502c:	d001      	beq.n	5032 <__sflush_r+0x6e>
    502e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5030:	1ac0      	subs	r0, r0, r3
    5032:	2300      	movs	r3, #0
    5034:	0002      	movs	r2, r0
    5036:	6a21      	ldr	r1, [r4, #32]
    5038:	0028      	movs	r0, r5
    503a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    503c:	47b8      	blx	r7
    503e:	89a3      	ldrh	r3, [r4, #12]
    5040:	1c42      	adds	r2, r0, #1
    5042:	d106      	bne.n	5052 <__sflush_r+0x8e>
    5044:	6829      	ldr	r1, [r5, #0]
    5046:	291d      	cmp	r1, #29
    5048:	d83a      	bhi.n	50c0 <__sflush_r+0xfc>
    504a:	4a20      	ldr	r2, [pc, #128]	; (50cc <__sflush_r+0x108>)
    504c:	40ca      	lsrs	r2, r1
    504e:	07d2      	lsls	r2, r2, #31
    5050:	d536      	bpl.n	50c0 <__sflush_r+0xfc>
    5052:	2200      	movs	r2, #0
    5054:	6062      	str	r2, [r4, #4]
    5056:	6922      	ldr	r2, [r4, #16]
    5058:	6022      	str	r2, [r4, #0]
    505a:	04db      	lsls	r3, r3, #19
    505c:	d505      	bpl.n	506a <__sflush_r+0xa6>
    505e:	1c43      	adds	r3, r0, #1
    5060:	d102      	bne.n	5068 <__sflush_r+0xa4>
    5062:	682b      	ldr	r3, [r5, #0]
    5064:	2b00      	cmp	r3, #0
    5066:	d100      	bne.n	506a <__sflush_r+0xa6>
    5068:	6560      	str	r0, [r4, #84]	; 0x54
    506a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    506c:	602e      	str	r6, [r5, #0]
    506e:	2900      	cmp	r1, #0
    5070:	d0ce      	beq.n	5010 <__sflush_r+0x4c>
    5072:	0023      	movs	r3, r4
    5074:	3344      	adds	r3, #68	; 0x44
    5076:	4299      	cmp	r1, r3
    5078:	d002      	beq.n	5080 <__sflush_r+0xbc>
    507a:	0028      	movs	r0, r5
    507c:	f000 fca0 	bl	59c0 <_free_r>
    5080:	2000      	movs	r0, #0
    5082:	6360      	str	r0, [r4, #52]	; 0x34
    5084:	e021      	b.n	50ca <__sflush_r+0x106>
    5086:	690f      	ldr	r7, [r1, #16]
    5088:	2f00      	cmp	r7, #0
    508a:	d0c1      	beq.n	5010 <__sflush_r+0x4c>
    508c:	680b      	ldr	r3, [r1, #0]
    508e:	600f      	str	r7, [r1, #0]
    5090:	1bdb      	subs	r3, r3, r7
    5092:	9301      	str	r3, [sp, #4]
    5094:	2300      	movs	r3, #0
    5096:	0792      	lsls	r2, r2, #30
    5098:	d100      	bne.n	509c <__sflush_r+0xd8>
    509a:	694b      	ldr	r3, [r1, #20]
    509c:	60a3      	str	r3, [r4, #8]
    509e:	e003      	b.n	50a8 <__sflush_r+0xe4>
    50a0:	9b01      	ldr	r3, [sp, #4]
    50a2:	183f      	adds	r7, r7, r0
    50a4:	1a1b      	subs	r3, r3, r0
    50a6:	9301      	str	r3, [sp, #4]
    50a8:	9b01      	ldr	r3, [sp, #4]
    50aa:	2b00      	cmp	r3, #0
    50ac:	ddb0      	ble.n	5010 <__sflush_r+0x4c>
    50ae:	9b01      	ldr	r3, [sp, #4]
    50b0:	003a      	movs	r2, r7
    50b2:	6a21      	ldr	r1, [r4, #32]
    50b4:	0028      	movs	r0, r5
    50b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    50b8:	47b0      	blx	r6
    50ba:	2800      	cmp	r0, #0
    50bc:	dcf0      	bgt.n	50a0 <__sflush_r+0xdc>
    50be:	89a3      	ldrh	r3, [r4, #12]
    50c0:	2240      	movs	r2, #64	; 0x40
    50c2:	2001      	movs	r0, #1
    50c4:	4313      	orrs	r3, r2
    50c6:	81a3      	strh	r3, [r4, #12]
    50c8:	4240      	negs	r0, r0
    50ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    50cc:	20400001 	.word	0x20400001

000050d0 <_fflush_r>:
    50d0:	690b      	ldr	r3, [r1, #16]
    50d2:	b570      	push	{r4, r5, r6, lr}
    50d4:	0005      	movs	r5, r0
    50d6:	000c      	movs	r4, r1
    50d8:	2b00      	cmp	r3, #0
    50da:	d101      	bne.n	50e0 <_fflush_r+0x10>
    50dc:	2000      	movs	r0, #0
    50de:	e01c      	b.n	511a <_fflush_r+0x4a>
    50e0:	2800      	cmp	r0, #0
    50e2:	d004      	beq.n	50ee <_fflush_r+0x1e>
    50e4:	6983      	ldr	r3, [r0, #24]
    50e6:	2b00      	cmp	r3, #0
    50e8:	d101      	bne.n	50ee <_fflush_r+0x1e>
    50ea:	f000 f85f 	bl	51ac <__sinit>
    50ee:	4b0b      	ldr	r3, [pc, #44]	; (511c <_fflush_r+0x4c>)
    50f0:	429c      	cmp	r4, r3
    50f2:	d101      	bne.n	50f8 <_fflush_r+0x28>
    50f4:	686c      	ldr	r4, [r5, #4]
    50f6:	e008      	b.n	510a <_fflush_r+0x3a>
    50f8:	4b09      	ldr	r3, [pc, #36]	; (5120 <_fflush_r+0x50>)
    50fa:	429c      	cmp	r4, r3
    50fc:	d101      	bne.n	5102 <_fflush_r+0x32>
    50fe:	68ac      	ldr	r4, [r5, #8]
    5100:	e003      	b.n	510a <_fflush_r+0x3a>
    5102:	4b08      	ldr	r3, [pc, #32]	; (5124 <_fflush_r+0x54>)
    5104:	429c      	cmp	r4, r3
    5106:	d100      	bne.n	510a <_fflush_r+0x3a>
    5108:	68ec      	ldr	r4, [r5, #12]
    510a:	220c      	movs	r2, #12
    510c:	5ea3      	ldrsh	r3, [r4, r2]
    510e:	2b00      	cmp	r3, #0
    5110:	d0e4      	beq.n	50dc <_fflush_r+0xc>
    5112:	0021      	movs	r1, r4
    5114:	0028      	movs	r0, r5
    5116:	f7ff ff55 	bl	4fc4 <__sflush_r>
    511a:	bd70      	pop	{r4, r5, r6, pc}
    511c:	00008c1c 	.word	0x00008c1c
    5120:	00008c3c 	.word	0x00008c3c
    5124:	00008c5c 	.word	0x00008c5c

00005128 <_cleanup_r>:
    5128:	b510      	push	{r4, lr}
    512a:	4902      	ldr	r1, [pc, #8]	; (5134 <_cleanup_r+0xc>)
    512c:	f000 f8b0 	bl	5290 <_fwalk_reent>
    5130:	bd10      	pop	{r4, pc}
    5132:	46c0      	nop			; (mov r8, r8)
    5134:	000050d1 	.word	0x000050d1

00005138 <std.isra.0>:
    5138:	2300      	movs	r3, #0
    513a:	b510      	push	{r4, lr}
    513c:	0004      	movs	r4, r0
    513e:	6003      	str	r3, [r0, #0]
    5140:	6043      	str	r3, [r0, #4]
    5142:	6083      	str	r3, [r0, #8]
    5144:	8181      	strh	r1, [r0, #12]
    5146:	6643      	str	r3, [r0, #100]	; 0x64
    5148:	81c2      	strh	r2, [r0, #14]
    514a:	6103      	str	r3, [r0, #16]
    514c:	6143      	str	r3, [r0, #20]
    514e:	6183      	str	r3, [r0, #24]
    5150:	0019      	movs	r1, r3
    5152:	2208      	movs	r2, #8
    5154:	305c      	adds	r0, #92	; 0x5c
    5156:	f7fe fa54 	bl	3602 <memset>
    515a:	4b05      	ldr	r3, [pc, #20]	; (5170 <std.isra.0+0x38>)
    515c:	6224      	str	r4, [r4, #32]
    515e:	6263      	str	r3, [r4, #36]	; 0x24
    5160:	4b04      	ldr	r3, [pc, #16]	; (5174 <std.isra.0+0x3c>)
    5162:	62a3      	str	r3, [r4, #40]	; 0x28
    5164:	4b04      	ldr	r3, [pc, #16]	; (5178 <std.isra.0+0x40>)
    5166:	62e3      	str	r3, [r4, #44]	; 0x2c
    5168:	4b04      	ldr	r3, [pc, #16]	; (517c <std.isra.0+0x44>)
    516a:	6323      	str	r3, [r4, #48]	; 0x30
    516c:	bd10      	pop	{r4, pc}
    516e:	46c0      	nop			; (mov r8, r8)
    5170:	00005da5 	.word	0x00005da5
    5174:	00005dcd 	.word	0x00005dcd
    5178:	00005e05 	.word	0x00005e05
    517c:	00005e31 	.word	0x00005e31

00005180 <__sfmoreglue>:
    5180:	b570      	push	{r4, r5, r6, lr}
    5182:	2568      	movs	r5, #104	; 0x68
    5184:	1e4b      	subs	r3, r1, #1
    5186:	435d      	muls	r5, r3
    5188:	000e      	movs	r6, r1
    518a:	0029      	movs	r1, r5
    518c:	3174      	adds	r1, #116	; 0x74
    518e:	f000 fc5d 	bl	5a4c <_malloc_r>
    5192:	1e04      	subs	r4, r0, #0
    5194:	d008      	beq.n	51a8 <__sfmoreglue+0x28>
    5196:	2100      	movs	r1, #0
    5198:	002a      	movs	r2, r5
    519a:	6001      	str	r1, [r0, #0]
    519c:	6046      	str	r6, [r0, #4]
    519e:	300c      	adds	r0, #12
    51a0:	60a0      	str	r0, [r4, #8]
    51a2:	3268      	adds	r2, #104	; 0x68
    51a4:	f7fe fa2d 	bl	3602 <memset>
    51a8:	0020      	movs	r0, r4
    51aa:	bd70      	pop	{r4, r5, r6, pc}

000051ac <__sinit>:
    51ac:	6983      	ldr	r3, [r0, #24]
    51ae:	b513      	push	{r0, r1, r4, lr}
    51b0:	0004      	movs	r4, r0
    51b2:	2b00      	cmp	r3, #0
    51b4:	d128      	bne.n	5208 <__sinit+0x5c>
    51b6:	6483      	str	r3, [r0, #72]	; 0x48
    51b8:	64c3      	str	r3, [r0, #76]	; 0x4c
    51ba:	6503      	str	r3, [r0, #80]	; 0x50
    51bc:	4b13      	ldr	r3, [pc, #76]	; (520c <__sinit+0x60>)
    51be:	4a14      	ldr	r2, [pc, #80]	; (5210 <__sinit+0x64>)
    51c0:	681b      	ldr	r3, [r3, #0]
    51c2:	6282      	str	r2, [r0, #40]	; 0x28
    51c4:	9301      	str	r3, [sp, #4]
    51c6:	4298      	cmp	r0, r3
    51c8:	d101      	bne.n	51ce <__sinit+0x22>
    51ca:	2301      	movs	r3, #1
    51cc:	6183      	str	r3, [r0, #24]
    51ce:	0020      	movs	r0, r4
    51d0:	f000 f820 	bl	5214 <__sfp>
    51d4:	6060      	str	r0, [r4, #4]
    51d6:	0020      	movs	r0, r4
    51d8:	f000 f81c 	bl	5214 <__sfp>
    51dc:	60a0      	str	r0, [r4, #8]
    51de:	0020      	movs	r0, r4
    51e0:	f000 f818 	bl	5214 <__sfp>
    51e4:	2200      	movs	r2, #0
    51e6:	60e0      	str	r0, [r4, #12]
    51e8:	2104      	movs	r1, #4
    51ea:	6860      	ldr	r0, [r4, #4]
    51ec:	f7ff ffa4 	bl	5138 <std.isra.0>
    51f0:	2201      	movs	r2, #1
    51f2:	2109      	movs	r1, #9
    51f4:	68a0      	ldr	r0, [r4, #8]
    51f6:	f7ff ff9f 	bl	5138 <std.isra.0>
    51fa:	2202      	movs	r2, #2
    51fc:	2112      	movs	r1, #18
    51fe:	68e0      	ldr	r0, [r4, #12]
    5200:	f7ff ff9a 	bl	5138 <std.isra.0>
    5204:	2301      	movs	r3, #1
    5206:	61a3      	str	r3, [r4, #24]
    5208:	bd13      	pop	{r0, r1, r4, pc}
    520a:	46c0      	nop			; (mov r8, r8)
    520c:	00008bd4 	.word	0x00008bd4
    5210:	00005129 	.word	0x00005129

00005214 <__sfp>:
    5214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5216:	4b1d      	ldr	r3, [pc, #116]	; (528c <__sfp+0x78>)
    5218:	0006      	movs	r6, r0
    521a:	681d      	ldr	r5, [r3, #0]
    521c:	69ab      	ldr	r3, [r5, #24]
    521e:	2b00      	cmp	r3, #0
    5220:	d102      	bne.n	5228 <__sfp+0x14>
    5222:	0028      	movs	r0, r5
    5224:	f7ff ffc2 	bl	51ac <__sinit>
    5228:	3548      	adds	r5, #72	; 0x48
    522a:	68ac      	ldr	r4, [r5, #8]
    522c:	686b      	ldr	r3, [r5, #4]
    522e:	3b01      	subs	r3, #1
    5230:	d405      	bmi.n	523e <__sfp+0x2a>
    5232:	220c      	movs	r2, #12
    5234:	5ea7      	ldrsh	r7, [r4, r2]
    5236:	2f00      	cmp	r7, #0
    5238:	d010      	beq.n	525c <__sfp+0x48>
    523a:	3468      	adds	r4, #104	; 0x68
    523c:	e7f7      	b.n	522e <__sfp+0x1a>
    523e:	682b      	ldr	r3, [r5, #0]
    5240:	2b00      	cmp	r3, #0
    5242:	d001      	beq.n	5248 <__sfp+0x34>
    5244:	682d      	ldr	r5, [r5, #0]
    5246:	e7f0      	b.n	522a <__sfp+0x16>
    5248:	2104      	movs	r1, #4
    524a:	0030      	movs	r0, r6
    524c:	f7ff ff98 	bl	5180 <__sfmoreglue>
    5250:	6028      	str	r0, [r5, #0]
    5252:	2800      	cmp	r0, #0
    5254:	d1f6      	bne.n	5244 <__sfp+0x30>
    5256:	230c      	movs	r3, #12
    5258:	6033      	str	r3, [r6, #0]
    525a:	e016      	b.n	528a <__sfp+0x76>
    525c:	2301      	movs	r3, #1
    525e:	0020      	movs	r0, r4
    5260:	425b      	negs	r3, r3
    5262:	81e3      	strh	r3, [r4, #14]
    5264:	3302      	adds	r3, #2
    5266:	81a3      	strh	r3, [r4, #12]
    5268:	6667      	str	r7, [r4, #100]	; 0x64
    526a:	6027      	str	r7, [r4, #0]
    526c:	60a7      	str	r7, [r4, #8]
    526e:	6067      	str	r7, [r4, #4]
    5270:	6127      	str	r7, [r4, #16]
    5272:	6167      	str	r7, [r4, #20]
    5274:	61a7      	str	r7, [r4, #24]
    5276:	305c      	adds	r0, #92	; 0x5c
    5278:	2208      	movs	r2, #8
    527a:	0039      	movs	r1, r7
    527c:	f7fe f9c1 	bl	3602 <memset>
    5280:	0020      	movs	r0, r4
    5282:	6367      	str	r7, [r4, #52]	; 0x34
    5284:	63a7      	str	r7, [r4, #56]	; 0x38
    5286:	64a7      	str	r7, [r4, #72]	; 0x48
    5288:	64e7      	str	r7, [r4, #76]	; 0x4c
    528a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    528c:	00008bd4 	.word	0x00008bd4

00005290 <_fwalk_reent>:
    5290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5292:	0004      	movs	r4, r0
    5294:	0007      	movs	r7, r0
    5296:	2600      	movs	r6, #0
    5298:	9101      	str	r1, [sp, #4]
    529a:	3448      	adds	r4, #72	; 0x48
    529c:	2c00      	cmp	r4, #0
    529e:	d016      	beq.n	52ce <_fwalk_reent+0x3e>
    52a0:	6863      	ldr	r3, [r4, #4]
    52a2:	68a5      	ldr	r5, [r4, #8]
    52a4:	9300      	str	r3, [sp, #0]
    52a6:	9b00      	ldr	r3, [sp, #0]
    52a8:	3b01      	subs	r3, #1
    52aa:	9300      	str	r3, [sp, #0]
    52ac:	d40d      	bmi.n	52ca <_fwalk_reent+0x3a>
    52ae:	89ab      	ldrh	r3, [r5, #12]
    52b0:	2b01      	cmp	r3, #1
    52b2:	d908      	bls.n	52c6 <_fwalk_reent+0x36>
    52b4:	220e      	movs	r2, #14
    52b6:	5eab      	ldrsh	r3, [r5, r2]
    52b8:	3301      	adds	r3, #1
    52ba:	d004      	beq.n	52c6 <_fwalk_reent+0x36>
    52bc:	0029      	movs	r1, r5
    52be:	0038      	movs	r0, r7
    52c0:	9b01      	ldr	r3, [sp, #4]
    52c2:	4798      	blx	r3
    52c4:	4306      	orrs	r6, r0
    52c6:	3568      	adds	r5, #104	; 0x68
    52c8:	e7ed      	b.n	52a6 <_fwalk_reent+0x16>
    52ca:	6824      	ldr	r4, [r4, #0]
    52cc:	e7e6      	b.n	529c <_fwalk_reent+0xc>
    52ce:	0030      	movs	r0, r6
    52d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000052d4 <_localeconv_r>:
    52d4:	4800      	ldr	r0, [pc, #0]	; (52d8 <_localeconv_r+0x4>)
    52d6:	4770      	bx	lr
    52d8:	20000070 	.word	0x20000070

000052dc <__swhatbuf_r>:
    52dc:	b570      	push	{r4, r5, r6, lr}
    52de:	000e      	movs	r6, r1
    52e0:	001d      	movs	r5, r3
    52e2:	230e      	movs	r3, #14
    52e4:	5ec9      	ldrsh	r1, [r1, r3]
    52e6:	b090      	sub	sp, #64	; 0x40
    52e8:	0014      	movs	r4, r2
    52ea:	2900      	cmp	r1, #0
    52ec:	da06      	bge.n	52fc <__swhatbuf_r+0x20>
    52ee:	2300      	movs	r3, #0
    52f0:	602b      	str	r3, [r5, #0]
    52f2:	89b3      	ldrh	r3, [r6, #12]
    52f4:	061b      	lsls	r3, r3, #24
    52f6:	d50f      	bpl.n	5318 <__swhatbuf_r+0x3c>
    52f8:	2340      	movs	r3, #64	; 0x40
    52fa:	e00f      	b.n	531c <__swhatbuf_r+0x40>
    52fc:	aa01      	add	r2, sp, #4
    52fe:	f000 fdc3 	bl	5e88 <_fstat_r>
    5302:	2800      	cmp	r0, #0
    5304:	dbf3      	blt.n	52ee <__swhatbuf_r+0x12>
    5306:	23f0      	movs	r3, #240	; 0xf0
    5308:	9a02      	ldr	r2, [sp, #8]
    530a:	021b      	lsls	r3, r3, #8
    530c:	4013      	ands	r3, r2
    530e:	4a05      	ldr	r2, [pc, #20]	; (5324 <__swhatbuf_r+0x48>)
    5310:	189b      	adds	r3, r3, r2
    5312:	425a      	negs	r2, r3
    5314:	4153      	adcs	r3, r2
    5316:	602b      	str	r3, [r5, #0]
    5318:	2380      	movs	r3, #128	; 0x80
    531a:	00db      	lsls	r3, r3, #3
    531c:	2000      	movs	r0, #0
    531e:	6023      	str	r3, [r4, #0]
    5320:	b010      	add	sp, #64	; 0x40
    5322:	bd70      	pop	{r4, r5, r6, pc}
    5324:	ffffe000 	.word	0xffffe000

00005328 <__smakebuf_r>:
    5328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    532a:	2602      	movs	r6, #2
    532c:	898b      	ldrh	r3, [r1, #12]
    532e:	0005      	movs	r5, r0
    5330:	000c      	movs	r4, r1
    5332:	4233      	tst	r3, r6
    5334:	d110      	bne.n	5358 <__smakebuf_r+0x30>
    5336:	ab01      	add	r3, sp, #4
    5338:	466a      	mov	r2, sp
    533a:	f7ff ffcf 	bl	52dc <__swhatbuf_r>
    533e:	9900      	ldr	r1, [sp, #0]
    5340:	0007      	movs	r7, r0
    5342:	0028      	movs	r0, r5
    5344:	f000 fb82 	bl	5a4c <_malloc_r>
    5348:	2800      	cmp	r0, #0
    534a:	d10c      	bne.n	5366 <__smakebuf_r+0x3e>
    534c:	220c      	movs	r2, #12
    534e:	5ea3      	ldrsh	r3, [r4, r2]
    5350:	059a      	lsls	r2, r3, #22
    5352:	d423      	bmi.n	539c <__smakebuf_r+0x74>
    5354:	4333      	orrs	r3, r6
    5356:	81a3      	strh	r3, [r4, #12]
    5358:	0023      	movs	r3, r4
    535a:	3347      	adds	r3, #71	; 0x47
    535c:	6023      	str	r3, [r4, #0]
    535e:	6123      	str	r3, [r4, #16]
    5360:	2301      	movs	r3, #1
    5362:	6163      	str	r3, [r4, #20]
    5364:	e01a      	b.n	539c <__smakebuf_r+0x74>
    5366:	2280      	movs	r2, #128	; 0x80
    5368:	4b0d      	ldr	r3, [pc, #52]	; (53a0 <__smakebuf_r+0x78>)
    536a:	62ab      	str	r3, [r5, #40]	; 0x28
    536c:	89a3      	ldrh	r3, [r4, #12]
    536e:	6020      	str	r0, [r4, #0]
    5370:	4313      	orrs	r3, r2
    5372:	81a3      	strh	r3, [r4, #12]
    5374:	9b00      	ldr	r3, [sp, #0]
    5376:	6120      	str	r0, [r4, #16]
    5378:	6163      	str	r3, [r4, #20]
    537a:	9b01      	ldr	r3, [sp, #4]
    537c:	2b00      	cmp	r3, #0
    537e:	d00a      	beq.n	5396 <__smakebuf_r+0x6e>
    5380:	230e      	movs	r3, #14
    5382:	5ee1      	ldrsh	r1, [r4, r3]
    5384:	0028      	movs	r0, r5
    5386:	f000 fd91 	bl	5eac <_isatty_r>
    538a:	2800      	cmp	r0, #0
    538c:	d003      	beq.n	5396 <__smakebuf_r+0x6e>
    538e:	2201      	movs	r2, #1
    5390:	89a3      	ldrh	r3, [r4, #12]
    5392:	4313      	orrs	r3, r2
    5394:	81a3      	strh	r3, [r4, #12]
    5396:	89a3      	ldrh	r3, [r4, #12]
    5398:	431f      	orrs	r7, r3
    539a:	81a7      	strh	r7, [r4, #12]
    539c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    539e:	46c0      	nop			; (mov r8, r8)
    53a0:	00005129 	.word	0x00005129

000053a4 <malloc>:
    53a4:	b510      	push	{r4, lr}
    53a6:	4b03      	ldr	r3, [pc, #12]	; (53b4 <malloc+0x10>)
    53a8:	0001      	movs	r1, r0
    53aa:	6818      	ldr	r0, [r3, #0]
    53ac:	f000 fb4e 	bl	5a4c <_malloc_r>
    53b0:	bd10      	pop	{r4, pc}
    53b2:	46c0      	nop			; (mov r8, r8)
    53b4:	2000006c 	.word	0x2000006c

000053b8 <memchr>:
    53b8:	b2c9      	uxtb	r1, r1
    53ba:	1882      	adds	r2, r0, r2
    53bc:	4290      	cmp	r0, r2
    53be:	d004      	beq.n	53ca <memchr+0x12>
    53c0:	7803      	ldrb	r3, [r0, #0]
    53c2:	428b      	cmp	r3, r1
    53c4:	d002      	beq.n	53cc <memchr+0x14>
    53c6:	3001      	adds	r0, #1
    53c8:	e7f8      	b.n	53bc <memchr+0x4>
    53ca:	2000      	movs	r0, #0
    53cc:	4770      	bx	lr

000053ce <_Balloc>:
    53ce:	b570      	push	{r4, r5, r6, lr}
    53d0:	6a46      	ldr	r6, [r0, #36]	; 0x24
    53d2:	0004      	movs	r4, r0
    53d4:	000d      	movs	r5, r1
    53d6:	2e00      	cmp	r6, #0
    53d8:	d107      	bne.n	53ea <_Balloc+0x1c>
    53da:	2010      	movs	r0, #16
    53dc:	f7ff ffe2 	bl	53a4 <malloc>
    53e0:	6260      	str	r0, [r4, #36]	; 0x24
    53e2:	6046      	str	r6, [r0, #4]
    53e4:	6086      	str	r6, [r0, #8]
    53e6:	6006      	str	r6, [r0, #0]
    53e8:	60c6      	str	r6, [r0, #12]
    53ea:	6a66      	ldr	r6, [r4, #36]	; 0x24
    53ec:	68f3      	ldr	r3, [r6, #12]
    53ee:	2b00      	cmp	r3, #0
    53f0:	d009      	beq.n	5406 <_Balloc+0x38>
    53f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    53f4:	00aa      	lsls	r2, r5, #2
    53f6:	68db      	ldr	r3, [r3, #12]
    53f8:	189b      	adds	r3, r3, r2
    53fa:	6818      	ldr	r0, [r3, #0]
    53fc:	2800      	cmp	r0, #0
    53fe:	d00e      	beq.n	541e <_Balloc+0x50>
    5400:	6802      	ldr	r2, [r0, #0]
    5402:	601a      	str	r2, [r3, #0]
    5404:	e017      	b.n	5436 <_Balloc+0x68>
    5406:	2221      	movs	r2, #33	; 0x21
    5408:	2104      	movs	r1, #4
    540a:	0020      	movs	r0, r4
    540c:	f000 faca 	bl	59a4 <_calloc_r>
    5410:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5412:	60f0      	str	r0, [r6, #12]
    5414:	68db      	ldr	r3, [r3, #12]
    5416:	2b00      	cmp	r3, #0
    5418:	d1eb      	bne.n	53f2 <_Balloc+0x24>
    541a:	2000      	movs	r0, #0
    541c:	e00e      	b.n	543c <_Balloc+0x6e>
    541e:	2101      	movs	r1, #1
    5420:	000e      	movs	r6, r1
    5422:	40ae      	lsls	r6, r5
    5424:	1d72      	adds	r2, r6, #5
    5426:	0092      	lsls	r2, r2, #2
    5428:	0020      	movs	r0, r4
    542a:	f000 fabb 	bl	59a4 <_calloc_r>
    542e:	2800      	cmp	r0, #0
    5430:	d0f3      	beq.n	541a <_Balloc+0x4c>
    5432:	6045      	str	r5, [r0, #4]
    5434:	6086      	str	r6, [r0, #8]
    5436:	2300      	movs	r3, #0
    5438:	6103      	str	r3, [r0, #16]
    543a:	60c3      	str	r3, [r0, #12]
    543c:	bd70      	pop	{r4, r5, r6, pc}

0000543e <_Bfree>:
    543e:	b570      	push	{r4, r5, r6, lr}
    5440:	6a45      	ldr	r5, [r0, #36]	; 0x24
    5442:	0006      	movs	r6, r0
    5444:	000c      	movs	r4, r1
    5446:	2d00      	cmp	r5, #0
    5448:	d107      	bne.n	545a <_Bfree+0x1c>
    544a:	2010      	movs	r0, #16
    544c:	f7ff ffaa 	bl	53a4 <malloc>
    5450:	6270      	str	r0, [r6, #36]	; 0x24
    5452:	6045      	str	r5, [r0, #4]
    5454:	6085      	str	r5, [r0, #8]
    5456:	6005      	str	r5, [r0, #0]
    5458:	60c5      	str	r5, [r0, #12]
    545a:	2c00      	cmp	r4, #0
    545c:	d007      	beq.n	546e <_Bfree+0x30>
    545e:	6a72      	ldr	r2, [r6, #36]	; 0x24
    5460:	6863      	ldr	r3, [r4, #4]
    5462:	68d2      	ldr	r2, [r2, #12]
    5464:	009b      	lsls	r3, r3, #2
    5466:	18d3      	adds	r3, r2, r3
    5468:	681a      	ldr	r2, [r3, #0]
    546a:	6022      	str	r2, [r4, #0]
    546c:	601c      	str	r4, [r3, #0]
    546e:	bd70      	pop	{r4, r5, r6, pc}

00005470 <__multadd>:
    5470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5472:	0007      	movs	r7, r0
    5474:	0008      	movs	r0, r1
    5476:	000c      	movs	r4, r1
    5478:	690d      	ldr	r5, [r1, #16]
    547a:	001e      	movs	r6, r3
    547c:	2100      	movs	r1, #0
    547e:	9201      	str	r2, [sp, #4]
    5480:	3014      	adds	r0, #20
    5482:	9a01      	ldr	r2, [sp, #4]
    5484:	8803      	ldrh	r3, [r0, #0]
    5486:	3101      	adds	r1, #1
    5488:	4353      	muls	r3, r2
    548a:	199b      	adds	r3, r3, r6
    548c:	6806      	ldr	r6, [r0, #0]
    548e:	0c36      	lsrs	r6, r6, #16
    5490:	4356      	muls	r6, r2
    5492:	0c1a      	lsrs	r2, r3, #16
    5494:	4694      	mov	ip, r2
    5496:	44b4      	add	ip, r6
    5498:	4662      	mov	r2, ip
    549a:	0c16      	lsrs	r6, r2, #16
    549c:	0412      	lsls	r2, r2, #16
    549e:	4694      	mov	ip, r2
    54a0:	b29b      	uxth	r3, r3
    54a2:	4463      	add	r3, ip
    54a4:	c008      	stmia	r0!, {r3}
    54a6:	428d      	cmp	r5, r1
    54a8:	dceb      	bgt.n	5482 <__multadd+0x12>
    54aa:	2e00      	cmp	r6, #0
    54ac:	d01b      	beq.n	54e6 <__multadd+0x76>
    54ae:	68a3      	ldr	r3, [r4, #8]
    54b0:	429d      	cmp	r5, r3
    54b2:	db12      	blt.n	54da <__multadd+0x6a>
    54b4:	6863      	ldr	r3, [r4, #4]
    54b6:	0038      	movs	r0, r7
    54b8:	1c59      	adds	r1, r3, #1
    54ba:	f7ff ff88 	bl	53ce <_Balloc>
    54be:	0021      	movs	r1, r4
    54c0:	6923      	ldr	r3, [r4, #16]
    54c2:	9001      	str	r0, [sp, #4]
    54c4:	1c9a      	adds	r2, r3, #2
    54c6:	0092      	lsls	r2, r2, #2
    54c8:	310c      	adds	r1, #12
    54ca:	300c      	adds	r0, #12
    54cc:	f7fe f890 	bl	35f0 <memcpy>
    54d0:	0021      	movs	r1, r4
    54d2:	0038      	movs	r0, r7
    54d4:	f7ff ffb3 	bl	543e <_Bfree>
    54d8:	9c01      	ldr	r4, [sp, #4]
    54da:	1d2b      	adds	r3, r5, #4
    54dc:	009b      	lsls	r3, r3, #2
    54de:	18e3      	adds	r3, r4, r3
    54e0:	3501      	adds	r5, #1
    54e2:	605e      	str	r6, [r3, #4]
    54e4:	6125      	str	r5, [r4, #16]
    54e6:	0020      	movs	r0, r4
    54e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000054ea <__hi0bits>:
    54ea:	2200      	movs	r2, #0
    54ec:	0003      	movs	r3, r0
    54ee:	0c01      	lsrs	r1, r0, #16
    54f0:	4291      	cmp	r1, r2
    54f2:	d101      	bne.n	54f8 <__hi0bits+0xe>
    54f4:	0403      	lsls	r3, r0, #16
    54f6:	3210      	adds	r2, #16
    54f8:	0e19      	lsrs	r1, r3, #24
    54fa:	d101      	bne.n	5500 <__hi0bits+0x16>
    54fc:	3208      	adds	r2, #8
    54fe:	021b      	lsls	r3, r3, #8
    5500:	0f19      	lsrs	r1, r3, #28
    5502:	d101      	bne.n	5508 <__hi0bits+0x1e>
    5504:	3204      	adds	r2, #4
    5506:	011b      	lsls	r3, r3, #4
    5508:	0f99      	lsrs	r1, r3, #30
    550a:	d101      	bne.n	5510 <__hi0bits+0x26>
    550c:	3202      	adds	r2, #2
    550e:	009b      	lsls	r3, r3, #2
    5510:	0010      	movs	r0, r2
    5512:	2b00      	cmp	r3, #0
    5514:	db03      	blt.n	551e <__hi0bits+0x34>
    5516:	2020      	movs	r0, #32
    5518:	005b      	lsls	r3, r3, #1
    551a:	d500      	bpl.n	551e <__hi0bits+0x34>
    551c:	1c50      	adds	r0, r2, #1
    551e:	4770      	bx	lr

00005520 <__lo0bits>:
    5520:	2207      	movs	r2, #7
    5522:	6803      	ldr	r3, [r0, #0]
    5524:	b510      	push	{r4, lr}
    5526:	0001      	movs	r1, r0
    5528:	401a      	ands	r2, r3
    552a:	d00c      	beq.n	5546 <__lo0bits+0x26>
    552c:	2401      	movs	r4, #1
    552e:	2000      	movs	r0, #0
    5530:	4223      	tst	r3, r4
    5532:	d123      	bne.n	557c <__lo0bits+0x5c>
    5534:	2202      	movs	r2, #2
    5536:	4213      	tst	r3, r2
    5538:	d003      	beq.n	5542 <__lo0bits+0x22>
    553a:	40e3      	lsrs	r3, r4
    553c:	0020      	movs	r0, r4
    553e:	600b      	str	r3, [r1, #0]
    5540:	e01c      	b.n	557c <__lo0bits+0x5c>
    5542:	089b      	lsrs	r3, r3, #2
    5544:	e018      	b.n	5578 <__lo0bits+0x58>
    5546:	b298      	uxth	r0, r3
    5548:	2800      	cmp	r0, #0
    554a:	d101      	bne.n	5550 <__lo0bits+0x30>
    554c:	2210      	movs	r2, #16
    554e:	0c1b      	lsrs	r3, r3, #16
    5550:	b2d8      	uxtb	r0, r3
    5552:	2800      	cmp	r0, #0
    5554:	d101      	bne.n	555a <__lo0bits+0x3a>
    5556:	3208      	adds	r2, #8
    5558:	0a1b      	lsrs	r3, r3, #8
    555a:	0718      	lsls	r0, r3, #28
    555c:	d101      	bne.n	5562 <__lo0bits+0x42>
    555e:	3204      	adds	r2, #4
    5560:	091b      	lsrs	r3, r3, #4
    5562:	0798      	lsls	r0, r3, #30
    5564:	d101      	bne.n	556a <__lo0bits+0x4a>
    5566:	3202      	adds	r2, #2
    5568:	089b      	lsrs	r3, r3, #2
    556a:	07d8      	lsls	r0, r3, #31
    556c:	d404      	bmi.n	5578 <__lo0bits+0x58>
    556e:	085b      	lsrs	r3, r3, #1
    5570:	2020      	movs	r0, #32
    5572:	2b00      	cmp	r3, #0
    5574:	d002      	beq.n	557c <__lo0bits+0x5c>
    5576:	3201      	adds	r2, #1
    5578:	0010      	movs	r0, r2
    557a:	600b      	str	r3, [r1, #0]
    557c:	bd10      	pop	{r4, pc}

0000557e <__i2b>:
    557e:	b510      	push	{r4, lr}
    5580:	000c      	movs	r4, r1
    5582:	2101      	movs	r1, #1
    5584:	f7ff ff23 	bl	53ce <_Balloc>
    5588:	2301      	movs	r3, #1
    558a:	6144      	str	r4, [r0, #20]
    558c:	6103      	str	r3, [r0, #16]
    558e:	bd10      	pop	{r4, pc}

00005590 <__multiply>:
    5590:	b5f0      	push	{r4, r5, r6, r7, lr}
    5592:	690b      	ldr	r3, [r1, #16]
    5594:	0014      	movs	r4, r2
    5596:	6912      	ldr	r2, [r2, #16]
    5598:	b089      	sub	sp, #36	; 0x24
    559a:	000d      	movs	r5, r1
    559c:	4293      	cmp	r3, r2
    559e:	da01      	bge.n	55a4 <__multiply+0x14>
    55a0:	0025      	movs	r5, r4
    55a2:	000c      	movs	r4, r1
    55a4:	692f      	ldr	r7, [r5, #16]
    55a6:	6926      	ldr	r6, [r4, #16]
    55a8:	68aa      	ldr	r2, [r5, #8]
    55aa:	19bb      	adds	r3, r7, r6
    55ac:	6869      	ldr	r1, [r5, #4]
    55ae:	9301      	str	r3, [sp, #4]
    55b0:	4293      	cmp	r3, r2
    55b2:	dd00      	ble.n	55b6 <__multiply+0x26>
    55b4:	3101      	adds	r1, #1
    55b6:	f7ff ff0a 	bl	53ce <_Balloc>
    55ba:	0002      	movs	r2, r0
    55bc:	19bb      	adds	r3, r7, r6
    55be:	3214      	adds	r2, #20
    55c0:	009b      	lsls	r3, r3, #2
    55c2:	18d3      	adds	r3, r2, r3
    55c4:	469c      	mov	ip, r3
    55c6:	2100      	movs	r1, #0
    55c8:	0013      	movs	r3, r2
    55ca:	9002      	str	r0, [sp, #8]
    55cc:	4563      	cmp	r3, ip
    55ce:	d201      	bcs.n	55d4 <__multiply+0x44>
    55d0:	c302      	stmia	r3!, {r1}
    55d2:	e7fb      	b.n	55cc <__multiply+0x3c>
    55d4:	3514      	adds	r5, #20
    55d6:	00bf      	lsls	r7, r7, #2
    55d8:	19eb      	adds	r3, r5, r7
    55da:	3414      	adds	r4, #20
    55dc:	00b6      	lsls	r6, r6, #2
    55de:	9305      	str	r3, [sp, #20]
    55e0:	19a3      	adds	r3, r4, r6
    55e2:	9503      	str	r5, [sp, #12]
    55e4:	9307      	str	r3, [sp, #28]
    55e6:	9b07      	ldr	r3, [sp, #28]
    55e8:	429c      	cmp	r4, r3
    55ea:	d251      	bcs.n	5690 <__multiply+0x100>
    55ec:	8820      	ldrh	r0, [r4, #0]
    55ee:	2800      	cmp	r0, #0
    55f0:	d01e      	beq.n	5630 <__multiply+0xa0>
    55f2:	0015      	movs	r5, r2
    55f4:	2600      	movs	r6, #0
    55f6:	9f03      	ldr	r7, [sp, #12]
    55f8:	cf08      	ldmia	r7!, {r3}
    55fa:	9506      	str	r5, [sp, #24]
    55fc:	9304      	str	r3, [sp, #16]
    55fe:	466b      	mov	r3, sp
    5600:	8a1b      	ldrh	r3, [r3, #16]
    5602:	4343      	muls	r3, r0
    5604:	0019      	movs	r1, r3
    5606:	882b      	ldrh	r3, [r5, #0]
    5608:	18cb      	adds	r3, r1, r3
    560a:	9904      	ldr	r1, [sp, #16]
    560c:	199b      	adds	r3, r3, r6
    560e:	0c09      	lsrs	r1, r1, #16
    5610:	4341      	muls	r1, r0
    5612:	682e      	ldr	r6, [r5, #0]
    5614:	0c36      	lsrs	r6, r6, #16
    5616:	1989      	adds	r1, r1, r6
    5618:	0c1e      	lsrs	r6, r3, #16
    561a:	1989      	adds	r1, r1, r6
    561c:	0c0e      	lsrs	r6, r1, #16
    561e:	b29b      	uxth	r3, r3
    5620:	0409      	lsls	r1, r1, #16
    5622:	430b      	orrs	r3, r1
    5624:	c508      	stmia	r5!, {r3}
    5626:	9b05      	ldr	r3, [sp, #20]
    5628:	42bb      	cmp	r3, r7
    562a:	d8e5      	bhi.n	55f8 <__multiply+0x68>
    562c:	9b06      	ldr	r3, [sp, #24]
    562e:	605e      	str	r6, [r3, #4]
    5630:	6823      	ldr	r3, [r4, #0]
    5632:	0c1d      	lsrs	r5, r3, #16
    5634:	d01f      	beq.n	5676 <__multiply+0xe6>
    5636:	2100      	movs	r1, #0
    5638:	0010      	movs	r0, r2
    563a:	6813      	ldr	r3, [r2, #0]
    563c:	9f03      	ldr	r7, [sp, #12]
    563e:	9104      	str	r1, [sp, #16]
    5640:	883e      	ldrh	r6, [r7, #0]
    5642:	6801      	ldr	r1, [r0, #0]
    5644:	436e      	muls	r6, r5
    5646:	0c09      	lsrs	r1, r1, #16
    5648:	1871      	adds	r1, r6, r1
    564a:	9e04      	ldr	r6, [sp, #16]
    564c:	b29b      	uxth	r3, r3
    564e:	1989      	adds	r1, r1, r6
    5650:	040e      	lsls	r6, r1, #16
    5652:	4333      	orrs	r3, r6
    5654:	6003      	str	r3, [r0, #0]
    5656:	cf08      	ldmia	r7!, {r3}
    5658:	8886      	ldrh	r6, [r0, #4]
    565a:	0c1b      	lsrs	r3, r3, #16
    565c:	436b      	muls	r3, r5
    565e:	0c09      	lsrs	r1, r1, #16
    5660:	199b      	adds	r3, r3, r6
    5662:	185b      	adds	r3, r3, r1
    5664:	0c19      	lsrs	r1, r3, #16
    5666:	9104      	str	r1, [sp, #16]
    5668:	9905      	ldr	r1, [sp, #20]
    566a:	9006      	str	r0, [sp, #24]
    566c:	3004      	adds	r0, #4
    566e:	42b9      	cmp	r1, r7
    5670:	d8e6      	bhi.n	5640 <__multiply+0xb0>
    5672:	9906      	ldr	r1, [sp, #24]
    5674:	604b      	str	r3, [r1, #4]
    5676:	3404      	adds	r4, #4
    5678:	3204      	adds	r2, #4
    567a:	e7b4      	b.n	55e6 <__multiply+0x56>
    567c:	2304      	movs	r3, #4
    567e:	425b      	negs	r3, r3
    5680:	449c      	add	ip, r3
    5682:	4663      	mov	r3, ip
    5684:	681b      	ldr	r3, [r3, #0]
    5686:	2b00      	cmp	r3, #0
    5688:	d105      	bne.n	5696 <__multiply+0x106>
    568a:	9b01      	ldr	r3, [sp, #4]
    568c:	3b01      	subs	r3, #1
    568e:	9301      	str	r3, [sp, #4]
    5690:	9b01      	ldr	r3, [sp, #4]
    5692:	2b00      	cmp	r3, #0
    5694:	dcf2      	bgt.n	567c <__multiply+0xec>
    5696:	9b02      	ldr	r3, [sp, #8]
    5698:	9a01      	ldr	r2, [sp, #4]
    569a:	0018      	movs	r0, r3
    569c:	611a      	str	r2, [r3, #16]
    569e:	b009      	add	sp, #36	; 0x24
    56a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000056a4 <__pow5mult>:
    56a4:	2303      	movs	r3, #3
    56a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    56a8:	4013      	ands	r3, r2
    56aa:	0005      	movs	r5, r0
    56ac:	000e      	movs	r6, r1
    56ae:	0014      	movs	r4, r2
    56b0:	2b00      	cmp	r3, #0
    56b2:	d008      	beq.n	56c6 <__pow5mult+0x22>
    56b4:	4923      	ldr	r1, [pc, #140]	; (5744 <__pow5mult+0xa0>)
    56b6:	3b01      	subs	r3, #1
    56b8:	009a      	lsls	r2, r3, #2
    56ba:	5852      	ldr	r2, [r2, r1]
    56bc:	2300      	movs	r3, #0
    56be:	0031      	movs	r1, r6
    56c0:	f7ff fed6 	bl	5470 <__multadd>
    56c4:	0006      	movs	r6, r0
    56c6:	10a3      	asrs	r3, r4, #2
    56c8:	9301      	str	r3, [sp, #4]
    56ca:	d038      	beq.n	573e <__pow5mult+0x9a>
    56cc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    56ce:	2c00      	cmp	r4, #0
    56d0:	d107      	bne.n	56e2 <__pow5mult+0x3e>
    56d2:	2010      	movs	r0, #16
    56d4:	f7ff fe66 	bl	53a4 <malloc>
    56d8:	6268      	str	r0, [r5, #36]	; 0x24
    56da:	6044      	str	r4, [r0, #4]
    56dc:	6084      	str	r4, [r0, #8]
    56de:	6004      	str	r4, [r0, #0]
    56e0:	60c4      	str	r4, [r0, #12]
    56e2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    56e4:	68bc      	ldr	r4, [r7, #8]
    56e6:	2c00      	cmp	r4, #0
    56e8:	d110      	bne.n	570c <__pow5mult+0x68>
    56ea:	4917      	ldr	r1, [pc, #92]	; (5748 <__pow5mult+0xa4>)
    56ec:	0028      	movs	r0, r5
    56ee:	f7ff ff46 	bl	557e <__i2b>
    56f2:	2300      	movs	r3, #0
    56f4:	60b8      	str	r0, [r7, #8]
    56f6:	0004      	movs	r4, r0
    56f8:	6003      	str	r3, [r0, #0]
    56fa:	e007      	b.n	570c <__pow5mult+0x68>
    56fc:	9b01      	ldr	r3, [sp, #4]
    56fe:	105b      	asrs	r3, r3, #1
    5700:	9301      	str	r3, [sp, #4]
    5702:	d01c      	beq.n	573e <__pow5mult+0x9a>
    5704:	6820      	ldr	r0, [r4, #0]
    5706:	2800      	cmp	r0, #0
    5708:	d010      	beq.n	572c <__pow5mult+0x88>
    570a:	0004      	movs	r4, r0
    570c:	2201      	movs	r2, #1
    570e:	9b01      	ldr	r3, [sp, #4]
    5710:	4213      	tst	r3, r2
    5712:	d0f3      	beq.n	56fc <__pow5mult+0x58>
    5714:	0031      	movs	r1, r6
    5716:	0022      	movs	r2, r4
    5718:	0028      	movs	r0, r5
    571a:	f7ff ff39 	bl	5590 <__multiply>
    571e:	0007      	movs	r7, r0
    5720:	0031      	movs	r1, r6
    5722:	0028      	movs	r0, r5
    5724:	f7ff fe8b 	bl	543e <_Bfree>
    5728:	003e      	movs	r6, r7
    572a:	e7e7      	b.n	56fc <__pow5mult+0x58>
    572c:	0022      	movs	r2, r4
    572e:	0021      	movs	r1, r4
    5730:	0028      	movs	r0, r5
    5732:	f7ff ff2d 	bl	5590 <__multiply>
    5736:	2300      	movs	r3, #0
    5738:	6020      	str	r0, [r4, #0]
    573a:	6003      	str	r3, [r0, #0]
    573c:	e7e5      	b.n	570a <__pow5mult+0x66>
    573e:	0030      	movs	r0, r6
    5740:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5742:	46c0      	nop			; (mov r8, r8)
    5744:	00008d78 	.word	0x00008d78
    5748:	00000271 	.word	0x00000271

0000574c <__lshift>:
    574c:	b5f0      	push	{r4, r5, r6, r7, lr}
    574e:	000c      	movs	r4, r1
    5750:	0017      	movs	r7, r2
    5752:	6923      	ldr	r3, [r4, #16]
    5754:	1155      	asrs	r5, r2, #5
    5756:	b085      	sub	sp, #20
    5758:	18eb      	adds	r3, r5, r3
    575a:	9301      	str	r3, [sp, #4]
    575c:	3301      	adds	r3, #1
    575e:	9300      	str	r3, [sp, #0]
    5760:	6849      	ldr	r1, [r1, #4]
    5762:	68a3      	ldr	r3, [r4, #8]
    5764:	9002      	str	r0, [sp, #8]
    5766:	9a00      	ldr	r2, [sp, #0]
    5768:	4293      	cmp	r3, r2
    576a:	da02      	bge.n	5772 <__lshift+0x26>
    576c:	3101      	adds	r1, #1
    576e:	005b      	lsls	r3, r3, #1
    5770:	e7f9      	b.n	5766 <__lshift+0x1a>
    5772:	9802      	ldr	r0, [sp, #8]
    5774:	f7ff fe2b 	bl	53ce <_Balloc>
    5778:	2300      	movs	r3, #0
    577a:	0002      	movs	r2, r0
    577c:	0006      	movs	r6, r0
    577e:	0019      	movs	r1, r3
    5780:	3214      	adds	r2, #20
    5782:	42ab      	cmp	r3, r5
    5784:	da03      	bge.n	578e <__lshift+0x42>
    5786:	0098      	lsls	r0, r3, #2
    5788:	5011      	str	r1, [r2, r0]
    578a:	3301      	adds	r3, #1
    578c:	e7f9      	b.n	5782 <__lshift+0x36>
    578e:	43eb      	mvns	r3, r5
    5790:	17db      	asrs	r3, r3, #31
    5792:	401d      	ands	r5, r3
    5794:	0023      	movs	r3, r4
    5796:	00ad      	lsls	r5, r5, #2
    5798:	1955      	adds	r5, r2, r5
    579a:	6922      	ldr	r2, [r4, #16]
    579c:	3314      	adds	r3, #20
    579e:	0092      	lsls	r2, r2, #2
    57a0:	189a      	adds	r2, r3, r2
    57a2:	4694      	mov	ip, r2
    57a4:	221f      	movs	r2, #31
    57a6:	4017      	ands	r7, r2
    57a8:	d014      	beq.n	57d4 <__lshift+0x88>
    57aa:	3201      	adds	r2, #1
    57ac:	1bd2      	subs	r2, r2, r7
    57ae:	9203      	str	r2, [sp, #12]
    57b0:	2200      	movs	r2, #0
    57b2:	6819      	ldr	r1, [r3, #0]
    57b4:	0028      	movs	r0, r5
    57b6:	40b9      	lsls	r1, r7
    57b8:	430a      	orrs	r2, r1
    57ba:	c504      	stmia	r5!, {r2}
    57bc:	cb04      	ldmia	r3!, {r2}
    57be:	9903      	ldr	r1, [sp, #12]
    57c0:	40ca      	lsrs	r2, r1
    57c2:	459c      	cmp	ip, r3
    57c4:	d8f5      	bhi.n	57b2 <__lshift+0x66>
    57c6:	6042      	str	r2, [r0, #4]
    57c8:	2a00      	cmp	r2, #0
    57ca:	d007      	beq.n	57dc <__lshift+0x90>
    57cc:	9b01      	ldr	r3, [sp, #4]
    57ce:	3302      	adds	r3, #2
    57d0:	9300      	str	r3, [sp, #0]
    57d2:	e003      	b.n	57dc <__lshift+0x90>
    57d4:	cb04      	ldmia	r3!, {r2}
    57d6:	c504      	stmia	r5!, {r2}
    57d8:	459c      	cmp	ip, r3
    57da:	d8fb      	bhi.n	57d4 <__lshift+0x88>
    57dc:	9b00      	ldr	r3, [sp, #0]
    57de:	9802      	ldr	r0, [sp, #8]
    57e0:	3b01      	subs	r3, #1
    57e2:	6133      	str	r3, [r6, #16]
    57e4:	0021      	movs	r1, r4
    57e6:	f7ff fe2a 	bl	543e <_Bfree>
    57ea:	0030      	movs	r0, r6
    57ec:	b005      	add	sp, #20
    57ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000057f0 <__mcmp>:
    57f0:	6903      	ldr	r3, [r0, #16]
    57f2:	690a      	ldr	r2, [r1, #16]
    57f4:	b510      	push	{r4, lr}
    57f6:	1a9b      	subs	r3, r3, r2
    57f8:	0004      	movs	r4, r0
    57fa:	1e18      	subs	r0, r3, #0
    57fc:	d112      	bne.n	5824 <__mcmp+0x34>
    57fe:	0093      	lsls	r3, r2, #2
    5800:	3414      	adds	r4, #20
    5802:	3114      	adds	r1, #20
    5804:	18e2      	adds	r2, r4, r3
    5806:	18c9      	adds	r1, r1, r3
    5808:	3a04      	subs	r2, #4
    580a:	3904      	subs	r1, #4
    580c:	6813      	ldr	r3, [r2, #0]
    580e:	6808      	ldr	r0, [r1, #0]
    5810:	4283      	cmp	r3, r0
    5812:	d004      	beq.n	581e <__mcmp+0x2e>
    5814:	4283      	cmp	r3, r0
    5816:	419b      	sbcs	r3, r3
    5818:	2001      	movs	r0, #1
    581a:	4318      	orrs	r0, r3
    581c:	e002      	b.n	5824 <__mcmp+0x34>
    581e:	4294      	cmp	r4, r2
    5820:	d3f2      	bcc.n	5808 <__mcmp+0x18>
    5822:	2000      	movs	r0, #0
    5824:	bd10      	pop	{r4, pc}

00005826 <__mdiff>:
    5826:	b5f0      	push	{r4, r5, r6, r7, lr}
    5828:	000c      	movs	r4, r1
    582a:	b085      	sub	sp, #20
    582c:	0007      	movs	r7, r0
    582e:	0011      	movs	r1, r2
    5830:	0020      	movs	r0, r4
    5832:	0015      	movs	r5, r2
    5834:	f7ff ffdc 	bl	57f0 <__mcmp>
    5838:	1e06      	subs	r6, r0, #0
    583a:	d107      	bne.n	584c <__mdiff+0x26>
    583c:	0001      	movs	r1, r0
    583e:	0038      	movs	r0, r7
    5840:	f7ff fdc5 	bl	53ce <_Balloc>
    5844:	2301      	movs	r3, #1
    5846:	6146      	str	r6, [r0, #20]
    5848:	6103      	str	r3, [r0, #16]
    584a:	e055      	b.n	58f8 <__mdiff+0xd2>
    584c:	2300      	movs	r3, #0
    584e:	9301      	str	r3, [sp, #4]
    5850:	4298      	cmp	r0, r3
    5852:	da04      	bge.n	585e <__mdiff+0x38>
    5854:	0023      	movs	r3, r4
    5856:	002c      	movs	r4, r5
    5858:	001d      	movs	r5, r3
    585a:	2301      	movs	r3, #1
    585c:	9301      	str	r3, [sp, #4]
    585e:	6861      	ldr	r1, [r4, #4]
    5860:	0038      	movs	r0, r7
    5862:	f7ff fdb4 	bl	53ce <_Balloc>
    5866:	9b01      	ldr	r3, [sp, #4]
    5868:	6926      	ldr	r6, [r4, #16]
    586a:	002f      	movs	r7, r5
    586c:	60c3      	str	r3, [r0, #12]
    586e:	3414      	adds	r4, #20
    5870:	00b3      	lsls	r3, r6, #2
    5872:	18e3      	adds	r3, r4, r3
    5874:	0002      	movs	r2, r0
    5876:	9302      	str	r3, [sp, #8]
    5878:	692b      	ldr	r3, [r5, #16]
    587a:	2500      	movs	r5, #0
    587c:	3714      	adds	r7, #20
    587e:	009b      	lsls	r3, r3, #2
    5880:	18fb      	adds	r3, r7, r3
    5882:	9303      	str	r3, [sp, #12]
    5884:	3214      	adds	r2, #20
    5886:	cc08      	ldmia	r4!, {r3}
    5888:	4669      	mov	r1, sp
    588a:	469c      	mov	ip, r3
    588c:	cf08      	ldmia	r7!, {r3}
    588e:	3204      	adds	r2, #4
    5890:	9300      	str	r3, [sp, #0]
    5892:	4663      	mov	r3, ip
    5894:	808b      	strh	r3, [r1, #4]
    5896:	888b      	ldrh	r3, [r1, #4]
    5898:	195d      	adds	r5, r3, r5
    589a:	9b00      	ldr	r3, [sp, #0]
    589c:	b29b      	uxth	r3, r3
    589e:	1aeb      	subs	r3, r5, r3
    58a0:	4665      	mov	r5, ip
    58a2:	9301      	str	r3, [sp, #4]
    58a4:	9b00      	ldr	r3, [sp, #0]
    58a6:	0c2d      	lsrs	r5, r5, #16
    58a8:	0c19      	lsrs	r1, r3, #16
    58aa:	9b01      	ldr	r3, [sp, #4]
    58ac:	1a69      	subs	r1, r5, r1
    58ae:	141d      	asrs	r5, r3, #16
    58b0:	1f13      	subs	r3, r2, #4
    58b2:	469c      	mov	ip, r3
    58b4:	466b      	mov	r3, sp
    58b6:	1949      	adds	r1, r1, r5
    58b8:	889b      	ldrh	r3, [r3, #4]
    58ba:	140d      	asrs	r5, r1, #16
    58bc:	0409      	lsls	r1, r1, #16
    58be:	430b      	orrs	r3, r1
    58c0:	4661      	mov	r1, ip
    58c2:	600b      	str	r3, [r1, #0]
    58c4:	9b03      	ldr	r3, [sp, #12]
    58c6:	42bb      	cmp	r3, r7
    58c8:	d8dd      	bhi.n	5886 <__mdiff+0x60>
    58ca:	9902      	ldr	r1, [sp, #8]
    58cc:	0013      	movs	r3, r2
    58ce:	428c      	cmp	r4, r1
    58d0:	d20b      	bcs.n	58ea <__mdiff+0xc4>
    58d2:	cc02      	ldmia	r4!, {r1}
    58d4:	b28b      	uxth	r3, r1
    58d6:	195b      	adds	r3, r3, r5
    58d8:	141d      	asrs	r5, r3, #16
    58da:	0c09      	lsrs	r1, r1, #16
    58dc:	1949      	adds	r1, r1, r5
    58de:	140d      	asrs	r5, r1, #16
    58e0:	b29b      	uxth	r3, r3
    58e2:	0409      	lsls	r1, r1, #16
    58e4:	430b      	orrs	r3, r1
    58e6:	c208      	stmia	r2!, {r3}
    58e8:	e7ef      	b.n	58ca <__mdiff+0xa4>
    58ea:	3b04      	subs	r3, #4
    58ec:	681a      	ldr	r2, [r3, #0]
    58ee:	2a00      	cmp	r2, #0
    58f0:	d101      	bne.n	58f6 <__mdiff+0xd0>
    58f2:	3e01      	subs	r6, #1
    58f4:	e7f9      	b.n	58ea <__mdiff+0xc4>
    58f6:	6106      	str	r6, [r0, #16]
    58f8:	b005      	add	sp, #20
    58fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000058fc <__d2b>:
    58fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    58fe:	001d      	movs	r5, r3
    5900:	2101      	movs	r1, #1
    5902:	9f08      	ldr	r7, [sp, #32]
    5904:	0014      	movs	r4, r2
    5906:	f7ff fd62 	bl	53ce <_Balloc>
    590a:	032b      	lsls	r3, r5, #12
    590c:	006d      	lsls	r5, r5, #1
    590e:	0006      	movs	r6, r0
    5910:	0b1b      	lsrs	r3, r3, #12
    5912:	0d6d      	lsrs	r5, r5, #21
    5914:	d002      	beq.n	591c <__d2b+0x20>
    5916:	2280      	movs	r2, #128	; 0x80
    5918:	0352      	lsls	r2, r2, #13
    591a:	4313      	orrs	r3, r2
    591c:	9301      	str	r3, [sp, #4]
    591e:	2c00      	cmp	r4, #0
    5920:	d018      	beq.n	5954 <__d2b+0x58>
    5922:	4668      	mov	r0, sp
    5924:	9400      	str	r4, [sp, #0]
    5926:	f7ff fdfb 	bl	5520 <__lo0bits>
    592a:	9c00      	ldr	r4, [sp, #0]
    592c:	2800      	cmp	r0, #0
    592e:	d009      	beq.n	5944 <__d2b+0x48>
    5930:	9b01      	ldr	r3, [sp, #4]
    5932:	2120      	movs	r1, #32
    5934:	001a      	movs	r2, r3
    5936:	1a09      	subs	r1, r1, r0
    5938:	408a      	lsls	r2, r1
    593a:	40c3      	lsrs	r3, r0
    593c:	4322      	orrs	r2, r4
    593e:	6172      	str	r2, [r6, #20]
    5940:	9301      	str	r3, [sp, #4]
    5942:	e000      	b.n	5946 <__d2b+0x4a>
    5944:	6174      	str	r4, [r6, #20]
    5946:	9c01      	ldr	r4, [sp, #4]
    5948:	61b4      	str	r4, [r6, #24]
    594a:	1e63      	subs	r3, r4, #1
    594c:	419c      	sbcs	r4, r3
    594e:	3401      	adds	r4, #1
    5950:	6134      	str	r4, [r6, #16]
    5952:	e007      	b.n	5964 <__d2b+0x68>
    5954:	a801      	add	r0, sp, #4
    5956:	f7ff fde3 	bl	5520 <__lo0bits>
    595a:	2401      	movs	r4, #1
    595c:	9b01      	ldr	r3, [sp, #4]
    595e:	6134      	str	r4, [r6, #16]
    5960:	6173      	str	r3, [r6, #20]
    5962:	3020      	adds	r0, #32
    5964:	2d00      	cmp	r5, #0
    5966:	d006      	beq.n	5976 <__d2b+0x7a>
    5968:	4b0b      	ldr	r3, [pc, #44]	; (5998 <__d2b+0x9c>)
    596a:	18ed      	adds	r5, r5, r3
    596c:	2335      	movs	r3, #53	; 0x35
    596e:	182d      	adds	r5, r5, r0
    5970:	603d      	str	r5, [r7, #0]
    5972:	1a18      	subs	r0, r3, r0
    5974:	e00b      	b.n	598e <__d2b+0x92>
    5976:	4b09      	ldr	r3, [pc, #36]	; (599c <__d2b+0xa0>)
    5978:	18c0      	adds	r0, r0, r3
    597a:	4b09      	ldr	r3, [pc, #36]	; (59a0 <__d2b+0xa4>)
    597c:	6038      	str	r0, [r7, #0]
    597e:	18e3      	adds	r3, r4, r3
    5980:	009b      	lsls	r3, r3, #2
    5982:	18f3      	adds	r3, r6, r3
    5984:	6958      	ldr	r0, [r3, #20]
    5986:	f7ff fdb0 	bl	54ea <__hi0bits>
    598a:	0164      	lsls	r4, r4, #5
    598c:	1a20      	subs	r0, r4, r0
    598e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5990:	6018      	str	r0, [r3, #0]
    5992:	0030      	movs	r0, r6
    5994:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5996:	46c0      	nop			; (mov r8, r8)
    5998:	fffffbcd 	.word	0xfffffbcd
    599c:	fffffbce 	.word	0xfffffbce
    59a0:	3fffffff 	.word	0x3fffffff

000059a4 <_calloc_r>:
    59a4:	434a      	muls	r2, r1
    59a6:	b570      	push	{r4, r5, r6, lr}
    59a8:	0011      	movs	r1, r2
    59aa:	0014      	movs	r4, r2
    59ac:	f000 f84e 	bl	5a4c <_malloc_r>
    59b0:	1e05      	subs	r5, r0, #0
    59b2:	d003      	beq.n	59bc <_calloc_r+0x18>
    59b4:	0022      	movs	r2, r4
    59b6:	2100      	movs	r1, #0
    59b8:	f7fd fe23 	bl	3602 <memset>
    59bc:	0028      	movs	r0, r5
    59be:	bd70      	pop	{r4, r5, r6, pc}

000059c0 <_free_r>:
    59c0:	b530      	push	{r4, r5, lr}
    59c2:	2900      	cmp	r1, #0
    59c4:	d03e      	beq.n	5a44 <_free_r+0x84>
    59c6:	3904      	subs	r1, #4
    59c8:	680b      	ldr	r3, [r1, #0]
    59ca:	2b00      	cmp	r3, #0
    59cc:	da00      	bge.n	59d0 <_free_r+0x10>
    59ce:	18c9      	adds	r1, r1, r3
    59d0:	4a1d      	ldr	r2, [pc, #116]	; (5a48 <_free_r+0x88>)
    59d2:	6813      	ldr	r3, [r2, #0]
    59d4:	0014      	movs	r4, r2
    59d6:	2b00      	cmp	r3, #0
    59d8:	d102      	bne.n	59e0 <_free_r+0x20>
    59da:	604b      	str	r3, [r1, #4]
    59dc:	6011      	str	r1, [r2, #0]
    59de:	e031      	b.n	5a44 <_free_r+0x84>
    59e0:	428b      	cmp	r3, r1
    59e2:	d90d      	bls.n	5a00 <_free_r+0x40>
    59e4:	680a      	ldr	r2, [r1, #0]
    59e6:	1888      	adds	r0, r1, r2
    59e8:	4283      	cmp	r3, r0
    59ea:	d103      	bne.n	59f4 <_free_r+0x34>
    59ec:	6818      	ldr	r0, [r3, #0]
    59ee:	685b      	ldr	r3, [r3, #4]
    59f0:	1882      	adds	r2, r0, r2
    59f2:	600a      	str	r2, [r1, #0]
    59f4:	604b      	str	r3, [r1, #4]
    59f6:	6021      	str	r1, [r4, #0]
    59f8:	e024      	b.n	5a44 <_free_r+0x84>
    59fa:	428a      	cmp	r2, r1
    59fc:	d803      	bhi.n	5a06 <_free_r+0x46>
    59fe:	0013      	movs	r3, r2
    5a00:	685a      	ldr	r2, [r3, #4]
    5a02:	2a00      	cmp	r2, #0
    5a04:	d1f9      	bne.n	59fa <_free_r+0x3a>
    5a06:	681d      	ldr	r5, [r3, #0]
    5a08:	195c      	adds	r4, r3, r5
    5a0a:	428c      	cmp	r4, r1
    5a0c:	d10b      	bne.n	5a26 <_free_r+0x66>
    5a0e:	6809      	ldr	r1, [r1, #0]
    5a10:	1869      	adds	r1, r5, r1
    5a12:	1858      	adds	r0, r3, r1
    5a14:	6019      	str	r1, [r3, #0]
    5a16:	4282      	cmp	r2, r0
    5a18:	d114      	bne.n	5a44 <_free_r+0x84>
    5a1a:	6810      	ldr	r0, [r2, #0]
    5a1c:	6852      	ldr	r2, [r2, #4]
    5a1e:	1841      	adds	r1, r0, r1
    5a20:	6019      	str	r1, [r3, #0]
    5a22:	605a      	str	r2, [r3, #4]
    5a24:	e00e      	b.n	5a44 <_free_r+0x84>
    5a26:	428c      	cmp	r4, r1
    5a28:	d902      	bls.n	5a30 <_free_r+0x70>
    5a2a:	230c      	movs	r3, #12
    5a2c:	6003      	str	r3, [r0, #0]
    5a2e:	e009      	b.n	5a44 <_free_r+0x84>
    5a30:	6808      	ldr	r0, [r1, #0]
    5a32:	180c      	adds	r4, r1, r0
    5a34:	42a2      	cmp	r2, r4
    5a36:	d103      	bne.n	5a40 <_free_r+0x80>
    5a38:	6814      	ldr	r4, [r2, #0]
    5a3a:	6852      	ldr	r2, [r2, #4]
    5a3c:	1820      	adds	r0, r4, r0
    5a3e:	6008      	str	r0, [r1, #0]
    5a40:	604a      	str	r2, [r1, #4]
    5a42:	6059      	str	r1, [r3, #4]
    5a44:	bd30      	pop	{r4, r5, pc}
    5a46:	46c0      	nop			; (mov r8, r8)
    5a48:	20000680 	.word	0x20000680

00005a4c <_malloc_r>:
    5a4c:	2303      	movs	r3, #3
    5a4e:	b570      	push	{r4, r5, r6, lr}
    5a50:	1ccd      	adds	r5, r1, #3
    5a52:	439d      	bics	r5, r3
    5a54:	3508      	adds	r5, #8
    5a56:	0006      	movs	r6, r0
    5a58:	2d0c      	cmp	r5, #12
    5a5a:	d201      	bcs.n	5a60 <_malloc_r+0x14>
    5a5c:	250c      	movs	r5, #12
    5a5e:	e005      	b.n	5a6c <_malloc_r+0x20>
    5a60:	2d00      	cmp	r5, #0
    5a62:	da03      	bge.n	5a6c <_malloc_r+0x20>
    5a64:	230c      	movs	r3, #12
    5a66:	2000      	movs	r0, #0
    5a68:	6033      	str	r3, [r6, #0]
    5a6a:	e040      	b.n	5aee <_malloc_r+0xa2>
    5a6c:	42a9      	cmp	r1, r5
    5a6e:	d8f9      	bhi.n	5a64 <_malloc_r+0x18>
    5a70:	4b1f      	ldr	r3, [pc, #124]	; (5af0 <_malloc_r+0xa4>)
    5a72:	681c      	ldr	r4, [r3, #0]
    5a74:	001a      	movs	r2, r3
    5a76:	0021      	movs	r1, r4
    5a78:	2900      	cmp	r1, #0
    5a7a:	d013      	beq.n	5aa4 <_malloc_r+0x58>
    5a7c:	680b      	ldr	r3, [r1, #0]
    5a7e:	1b5b      	subs	r3, r3, r5
    5a80:	d40d      	bmi.n	5a9e <_malloc_r+0x52>
    5a82:	2b0b      	cmp	r3, #11
    5a84:	d902      	bls.n	5a8c <_malloc_r+0x40>
    5a86:	600b      	str	r3, [r1, #0]
    5a88:	18cc      	adds	r4, r1, r3
    5a8a:	e01e      	b.n	5aca <_malloc_r+0x7e>
    5a8c:	428c      	cmp	r4, r1
    5a8e:	d102      	bne.n	5a96 <_malloc_r+0x4a>
    5a90:	6863      	ldr	r3, [r4, #4]
    5a92:	6013      	str	r3, [r2, #0]
    5a94:	e01a      	b.n	5acc <_malloc_r+0x80>
    5a96:	684b      	ldr	r3, [r1, #4]
    5a98:	6063      	str	r3, [r4, #4]
    5a9a:	000c      	movs	r4, r1
    5a9c:	e016      	b.n	5acc <_malloc_r+0x80>
    5a9e:	000c      	movs	r4, r1
    5aa0:	6849      	ldr	r1, [r1, #4]
    5aa2:	e7e9      	b.n	5a78 <_malloc_r+0x2c>
    5aa4:	4c13      	ldr	r4, [pc, #76]	; (5af4 <_malloc_r+0xa8>)
    5aa6:	6823      	ldr	r3, [r4, #0]
    5aa8:	2b00      	cmp	r3, #0
    5aaa:	d103      	bne.n	5ab4 <_malloc_r+0x68>
    5aac:	0030      	movs	r0, r6
    5aae:	f000 f967 	bl	5d80 <_sbrk_r>
    5ab2:	6020      	str	r0, [r4, #0]
    5ab4:	0029      	movs	r1, r5
    5ab6:	0030      	movs	r0, r6
    5ab8:	f000 f962 	bl	5d80 <_sbrk_r>
    5abc:	1c43      	adds	r3, r0, #1
    5abe:	d0d1      	beq.n	5a64 <_malloc_r+0x18>
    5ac0:	2303      	movs	r3, #3
    5ac2:	1cc4      	adds	r4, r0, #3
    5ac4:	439c      	bics	r4, r3
    5ac6:	42a0      	cmp	r0, r4
    5ac8:	d10a      	bne.n	5ae0 <_malloc_r+0x94>
    5aca:	6025      	str	r5, [r4, #0]
    5acc:	0020      	movs	r0, r4
    5ace:	2207      	movs	r2, #7
    5ad0:	300b      	adds	r0, #11
    5ad2:	1d23      	adds	r3, r4, #4
    5ad4:	4390      	bics	r0, r2
    5ad6:	1ac3      	subs	r3, r0, r3
    5ad8:	d009      	beq.n	5aee <_malloc_r+0xa2>
    5ada:	425a      	negs	r2, r3
    5adc:	50e2      	str	r2, [r4, r3]
    5ade:	e006      	b.n	5aee <_malloc_r+0xa2>
    5ae0:	1a21      	subs	r1, r4, r0
    5ae2:	0030      	movs	r0, r6
    5ae4:	f000 f94c 	bl	5d80 <_sbrk_r>
    5ae8:	1c43      	adds	r3, r0, #1
    5aea:	d1ee      	bne.n	5aca <_malloc_r+0x7e>
    5aec:	e7ba      	b.n	5a64 <_malloc_r+0x18>
    5aee:	bd70      	pop	{r4, r5, r6, pc}
    5af0:	20000680 	.word	0x20000680
    5af4:	2000067c 	.word	0x2000067c

00005af8 <__sfputc_r>:
    5af8:	6893      	ldr	r3, [r2, #8]
    5afa:	b510      	push	{r4, lr}
    5afc:	3b01      	subs	r3, #1
    5afe:	6093      	str	r3, [r2, #8]
    5b00:	2b00      	cmp	r3, #0
    5b02:	da05      	bge.n	5b10 <__sfputc_r+0x18>
    5b04:	6994      	ldr	r4, [r2, #24]
    5b06:	42a3      	cmp	r3, r4
    5b08:	db08      	blt.n	5b1c <__sfputc_r+0x24>
    5b0a:	b2cb      	uxtb	r3, r1
    5b0c:	2b0a      	cmp	r3, #10
    5b0e:	d005      	beq.n	5b1c <__sfputc_r+0x24>
    5b10:	6813      	ldr	r3, [r2, #0]
    5b12:	1c58      	adds	r0, r3, #1
    5b14:	6010      	str	r0, [r2, #0]
    5b16:	7019      	strb	r1, [r3, #0]
    5b18:	b2c8      	uxtb	r0, r1
    5b1a:	e001      	b.n	5b20 <__sfputc_r+0x28>
    5b1c:	f7fe fb38 	bl	4190 <__swbuf_r>
    5b20:	bd10      	pop	{r4, pc}

00005b22 <__sfputs_r>:
    5b22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b24:	0006      	movs	r6, r0
    5b26:	000f      	movs	r7, r1
    5b28:	0014      	movs	r4, r2
    5b2a:	18d5      	adds	r5, r2, r3
    5b2c:	42ac      	cmp	r4, r5
    5b2e:	d008      	beq.n	5b42 <__sfputs_r+0x20>
    5b30:	7821      	ldrb	r1, [r4, #0]
    5b32:	003a      	movs	r2, r7
    5b34:	0030      	movs	r0, r6
    5b36:	f7ff ffdf 	bl	5af8 <__sfputc_r>
    5b3a:	3401      	adds	r4, #1
    5b3c:	1c43      	adds	r3, r0, #1
    5b3e:	d1f5      	bne.n	5b2c <__sfputs_r+0xa>
    5b40:	e000      	b.n	5b44 <__sfputs_r+0x22>
    5b42:	2000      	movs	r0, #0
    5b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005b48 <_vfiprintf_r>:
    5b48:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b4a:	b09f      	sub	sp, #124	; 0x7c
    5b4c:	0006      	movs	r6, r0
    5b4e:	000f      	movs	r7, r1
    5b50:	9202      	str	r2, [sp, #8]
    5b52:	9305      	str	r3, [sp, #20]
    5b54:	2800      	cmp	r0, #0
    5b56:	d004      	beq.n	5b62 <_vfiprintf_r+0x1a>
    5b58:	6983      	ldr	r3, [r0, #24]
    5b5a:	2b00      	cmp	r3, #0
    5b5c:	d101      	bne.n	5b62 <_vfiprintf_r+0x1a>
    5b5e:	f7ff fb25 	bl	51ac <__sinit>
    5b62:	4b7f      	ldr	r3, [pc, #508]	; (5d60 <_vfiprintf_r+0x218>)
    5b64:	429f      	cmp	r7, r3
    5b66:	d101      	bne.n	5b6c <_vfiprintf_r+0x24>
    5b68:	6877      	ldr	r7, [r6, #4]
    5b6a:	e008      	b.n	5b7e <_vfiprintf_r+0x36>
    5b6c:	4b7d      	ldr	r3, [pc, #500]	; (5d64 <_vfiprintf_r+0x21c>)
    5b6e:	429f      	cmp	r7, r3
    5b70:	d101      	bne.n	5b76 <_vfiprintf_r+0x2e>
    5b72:	68b7      	ldr	r7, [r6, #8]
    5b74:	e003      	b.n	5b7e <_vfiprintf_r+0x36>
    5b76:	4b7c      	ldr	r3, [pc, #496]	; (5d68 <_vfiprintf_r+0x220>)
    5b78:	429f      	cmp	r7, r3
    5b7a:	d100      	bne.n	5b7e <_vfiprintf_r+0x36>
    5b7c:	68f7      	ldr	r7, [r6, #12]
    5b7e:	89bb      	ldrh	r3, [r7, #12]
    5b80:	071b      	lsls	r3, r3, #28
    5b82:	d50a      	bpl.n	5b9a <_vfiprintf_r+0x52>
    5b84:	693b      	ldr	r3, [r7, #16]
    5b86:	2b00      	cmp	r3, #0
    5b88:	d007      	beq.n	5b9a <_vfiprintf_r+0x52>
    5b8a:	2300      	movs	r3, #0
    5b8c:	ad06      	add	r5, sp, #24
    5b8e:	616b      	str	r3, [r5, #20]
    5b90:	3320      	adds	r3, #32
    5b92:	766b      	strb	r3, [r5, #25]
    5b94:	3310      	adds	r3, #16
    5b96:	76ab      	strb	r3, [r5, #26]
    5b98:	e03d      	b.n	5c16 <_vfiprintf_r+0xce>
    5b9a:	0039      	movs	r1, r7
    5b9c:	0030      	movs	r0, r6
    5b9e:	f7fe fb4f 	bl	4240 <__swsetup_r>
    5ba2:	2800      	cmp	r0, #0
    5ba4:	d0f1      	beq.n	5b8a <_vfiprintf_r+0x42>
    5ba6:	2001      	movs	r0, #1
    5ba8:	4240      	negs	r0, r0
    5baa:	e0d6      	b.n	5d5a <_vfiprintf_r+0x212>
    5bac:	9a05      	ldr	r2, [sp, #20]
    5bae:	1d11      	adds	r1, r2, #4
    5bb0:	6812      	ldr	r2, [r2, #0]
    5bb2:	9105      	str	r1, [sp, #20]
    5bb4:	2a00      	cmp	r2, #0
    5bb6:	da00      	bge.n	5bba <_vfiprintf_r+0x72>
    5bb8:	e07f      	b.n	5cba <_vfiprintf_r+0x172>
    5bba:	9209      	str	r2, [sp, #36]	; 0x24
    5bbc:	3401      	adds	r4, #1
    5bbe:	7823      	ldrb	r3, [r4, #0]
    5bc0:	2b2e      	cmp	r3, #46	; 0x2e
    5bc2:	d100      	bne.n	5bc6 <_vfiprintf_r+0x7e>
    5bc4:	e08d      	b.n	5ce2 <_vfiprintf_r+0x19a>
    5bc6:	7821      	ldrb	r1, [r4, #0]
    5bc8:	2203      	movs	r2, #3
    5bca:	4868      	ldr	r0, [pc, #416]	; (5d6c <_vfiprintf_r+0x224>)
    5bcc:	f7ff fbf4 	bl	53b8 <memchr>
    5bd0:	2800      	cmp	r0, #0
    5bd2:	d007      	beq.n	5be4 <_vfiprintf_r+0x9c>
    5bd4:	4b65      	ldr	r3, [pc, #404]	; (5d6c <_vfiprintf_r+0x224>)
    5bd6:	682a      	ldr	r2, [r5, #0]
    5bd8:	1ac0      	subs	r0, r0, r3
    5bda:	2340      	movs	r3, #64	; 0x40
    5bdc:	4083      	lsls	r3, r0
    5bde:	4313      	orrs	r3, r2
    5be0:	602b      	str	r3, [r5, #0]
    5be2:	3401      	adds	r4, #1
    5be4:	7821      	ldrb	r1, [r4, #0]
    5be6:	1c63      	adds	r3, r4, #1
    5be8:	2206      	movs	r2, #6
    5bea:	4861      	ldr	r0, [pc, #388]	; (5d70 <_vfiprintf_r+0x228>)
    5bec:	9302      	str	r3, [sp, #8]
    5bee:	7629      	strb	r1, [r5, #24]
    5bf0:	f7ff fbe2 	bl	53b8 <memchr>
    5bf4:	2800      	cmp	r0, #0
    5bf6:	d100      	bne.n	5bfa <_vfiprintf_r+0xb2>
    5bf8:	e09d      	b.n	5d36 <_vfiprintf_r+0x1ee>
    5bfa:	4b5e      	ldr	r3, [pc, #376]	; (5d74 <_vfiprintf_r+0x22c>)
    5bfc:	2b00      	cmp	r3, #0
    5bfe:	d000      	beq.n	5c02 <_vfiprintf_r+0xba>
    5c00:	e090      	b.n	5d24 <_vfiprintf_r+0x1dc>
    5c02:	2207      	movs	r2, #7
    5c04:	9b05      	ldr	r3, [sp, #20]
    5c06:	3307      	adds	r3, #7
    5c08:	4393      	bics	r3, r2
    5c0a:	3308      	adds	r3, #8
    5c0c:	9305      	str	r3, [sp, #20]
    5c0e:	696b      	ldr	r3, [r5, #20]
    5c10:	9a03      	ldr	r2, [sp, #12]
    5c12:	189b      	adds	r3, r3, r2
    5c14:	616b      	str	r3, [r5, #20]
    5c16:	9c02      	ldr	r4, [sp, #8]
    5c18:	7823      	ldrb	r3, [r4, #0]
    5c1a:	2b00      	cmp	r3, #0
    5c1c:	d104      	bne.n	5c28 <_vfiprintf_r+0xe0>
    5c1e:	9b02      	ldr	r3, [sp, #8]
    5c20:	1ae3      	subs	r3, r4, r3
    5c22:	9304      	str	r3, [sp, #16]
    5c24:	d012      	beq.n	5c4c <_vfiprintf_r+0x104>
    5c26:	e003      	b.n	5c30 <_vfiprintf_r+0xe8>
    5c28:	2b25      	cmp	r3, #37	; 0x25
    5c2a:	d0f8      	beq.n	5c1e <_vfiprintf_r+0xd6>
    5c2c:	3401      	adds	r4, #1
    5c2e:	e7f3      	b.n	5c18 <_vfiprintf_r+0xd0>
    5c30:	9b04      	ldr	r3, [sp, #16]
    5c32:	9a02      	ldr	r2, [sp, #8]
    5c34:	0039      	movs	r1, r7
    5c36:	0030      	movs	r0, r6
    5c38:	f7ff ff73 	bl	5b22 <__sfputs_r>
    5c3c:	1c43      	adds	r3, r0, #1
    5c3e:	d100      	bne.n	5c42 <_vfiprintf_r+0xfa>
    5c40:	e086      	b.n	5d50 <_vfiprintf_r+0x208>
    5c42:	696a      	ldr	r2, [r5, #20]
    5c44:	9b04      	ldr	r3, [sp, #16]
    5c46:	4694      	mov	ip, r2
    5c48:	4463      	add	r3, ip
    5c4a:	616b      	str	r3, [r5, #20]
    5c4c:	7823      	ldrb	r3, [r4, #0]
    5c4e:	2b00      	cmp	r3, #0
    5c50:	d07e      	beq.n	5d50 <_vfiprintf_r+0x208>
    5c52:	2201      	movs	r2, #1
    5c54:	2300      	movs	r3, #0
    5c56:	4252      	negs	r2, r2
    5c58:	606a      	str	r2, [r5, #4]
    5c5a:	a902      	add	r1, sp, #8
    5c5c:	3254      	adds	r2, #84	; 0x54
    5c5e:	1852      	adds	r2, r2, r1
    5c60:	3401      	adds	r4, #1
    5c62:	602b      	str	r3, [r5, #0]
    5c64:	60eb      	str	r3, [r5, #12]
    5c66:	60ab      	str	r3, [r5, #8]
    5c68:	7013      	strb	r3, [r2, #0]
    5c6a:	65ab      	str	r3, [r5, #88]	; 0x58
    5c6c:	7821      	ldrb	r1, [r4, #0]
    5c6e:	2205      	movs	r2, #5
    5c70:	4841      	ldr	r0, [pc, #260]	; (5d78 <_vfiprintf_r+0x230>)
    5c72:	f7ff fba1 	bl	53b8 <memchr>
    5c76:	2800      	cmp	r0, #0
    5c78:	d008      	beq.n	5c8c <_vfiprintf_r+0x144>
    5c7a:	4b3f      	ldr	r3, [pc, #252]	; (5d78 <_vfiprintf_r+0x230>)
    5c7c:	682a      	ldr	r2, [r5, #0]
    5c7e:	1ac0      	subs	r0, r0, r3
    5c80:	2301      	movs	r3, #1
    5c82:	4083      	lsls	r3, r0
    5c84:	4313      	orrs	r3, r2
    5c86:	602b      	str	r3, [r5, #0]
    5c88:	3401      	adds	r4, #1
    5c8a:	e7ef      	b.n	5c6c <_vfiprintf_r+0x124>
    5c8c:	682b      	ldr	r3, [r5, #0]
    5c8e:	06da      	lsls	r2, r3, #27
    5c90:	d504      	bpl.n	5c9c <_vfiprintf_r+0x154>
    5c92:	2253      	movs	r2, #83	; 0x53
    5c94:	2120      	movs	r1, #32
    5c96:	a802      	add	r0, sp, #8
    5c98:	1812      	adds	r2, r2, r0
    5c9a:	7011      	strb	r1, [r2, #0]
    5c9c:	071a      	lsls	r2, r3, #28
    5c9e:	d504      	bpl.n	5caa <_vfiprintf_r+0x162>
    5ca0:	2253      	movs	r2, #83	; 0x53
    5ca2:	212b      	movs	r1, #43	; 0x2b
    5ca4:	a802      	add	r0, sp, #8
    5ca6:	1812      	adds	r2, r2, r0
    5ca8:	7011      	strb	r1, [r2, #0]
    5caa:	7822      	ldrb	r2, [r4, #0]
    5cac:	2a2a      	cmp	r2, #42	; 0x2a
    5cae:	d100      	bne.n	5cb2 <_vfiprintf_r+0x16a>
    5cb0:	e77c      	b.n	5bac <_vfiprintf_r+0x64>
    5cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5cb4:	2000      	movs	r0, #0
    5cb6:	210a      	movs	r1, #10
    5cb8:	e005      	b.n	5cc6 <_vfiprintf_r+0x17e>
    5cba:	4252      	negs	r2, r2
    5cbc:	60ea      	str	r2, [r5, #12]
    5cbe:	2202      	movs	r2, #2
    5cc0:	4313      	orrs	r3, r2
    5cc2:	602b      	str	r3, [r5, #0]
    5cc4:	e77a      	b.n	5bbc <_vfiprintf_r+0x74>
    5cc6:	7822      	ldrb	r2, [r4, #0]
    5cc8:	3a30      	subs	r2, #48	; 0x30
    5cca:	2a09      	cmp	r2, #9
    5ccc:	d804      	bhi.n	5cd8 <_vfiprintf_r+0x190>
    5cce:	434b      	muls	r3, r1
    5cd0:	3401      	adds	r4, #1
    5cd2:	189b      	adds	r3, r3, r2
    5cd4:	2001      	movs	r0, #1
    5cd6:	e7f6      	b.n	5cc6 <_vfiprintf_r+0x17e>
    5cd8:	2800      	cmp	r0, #0
    5cda:	d100      	bne.n	5cde <_vfiprintf_r+0x196>
    5cdc:	e76f      	b.n	5bbe <_vfiprintf_r+0x76>
    5cde:	9309      	str	r3, [sp, #36]	; 0x24
    5ce0:	e76d      	b.n	5bbe <_vfiprintf_r+0x76>
    5ce2:	7863      	ldrb	r3, [r4, #1]
    5ce4:	2b2a      	cmp	r3, #42	; 0x2a
    5ce6:	d10a      	bne.n	5cfe <_vfiprintf_r+0x1b6>
    5ce8:	9b05      	ldr	r3, [sp, #20]
    5cea:	3402      	adds	r4, #2
    5cec:	1d1a      	adds	r2, r3, #4
    5cee:	681b      	ldr	r3, [r3, #0]
    5cf0:	9205      	str	r2, [sp, #20]
    5cf2:	2b00      	cmp	r3, #0
    5cf4:	da01      	bge.n	5cfa <_vfiprintf_r+0x1b2>
    5cf6:	2301      	movs	r3, #1
    5cf8:	425b      	negs	r3, r3
    5cfa:	9307      	str	r3, [sp, #28]
    5cfc:	e763      	b.n	5bc6 <_vfiprintf_r+0x7e>
    5cfe:	2300      	movs	r3, #0
    5d00:	200a      	movs	r0, #10
    5d02:	001a      	movs	r2, r3
    5d04:	3401      	adds	r4, #1
    5d06:	606b      	str	r3, [r5, #4]
    5d08:	7821      	ldrb	r1, [r4, #0]
    5d0a:	3930      	subs	r1, #48	; 0x30
    5d0c:	2909      	cmp	r1, #9
    5d0e:	d804      	bhi.n	5d1a <_vfiprintf_r+0x1d2>
    5d10:	4342      	muls	r2, r0
    5d12:	3401      	adds	r4, #1
    5d14:	1852      	adds	r2, r2, r1
    5d16:	2301      	movs	r3, #1
    5d18:	e7f6      	b.n	5d08 <_vfiprintf_r+0x1c0>
    5d1a:	2b00      	cmp	r3, #0
    5d1c:	d100      	bne.n	5d20 <_vfiprintf_r+0x1d8>
    5d1e:	e752      	b.n	5bc6 <_vfiprintf_r+0x7e>
    5d20:	9207      	str	r2, [sp, #28]
    5d22:	e750      	b.n	5bc6 <_vfiprintf_r+0x7e>
    5d24:	ab05      	add	r3, sp, #20
    5d26:	9300      	str	r3, [sp, #0]
    5d28:	003a      	movs	r2, r7
    5d2a:	4b14      	ldr	r3, [pc, #80]	; (5d7c <_vfiprintf_r+0x234>)
    5d2c:	0029      	movs	r1, r5
    5d2e:	0030      	movs	r0, r6
    5d30:	f7fd fd06 	bl	3740 <_printf_float>
    5d34:	e007      	b.n	5d46 <_vfiprintf_r+0x1fe>
    5d36:	ab05      	add	r3, sp, #20
    5d38:	9300      	str	r3, [sp, #0]
    5d3a:	003a      	movs	r2, r7
    5d3c:	4b0f      	ldr	r3, [pc, #60]	; (5d7c <_vfiprintf_r+0x234>)
    5d3e:	0029      	movs	r1, r5
    5d40:	0030      	movs	r0, r6
    5d42:	f7fd ffbb 	bl	3cbc <_printf_i>
    5d46:	9003      	str	r0, [sp, #12]
    5d48:	9b03      	ldr	r3, [sp, #12]
    5d4a:	3301      	adds	r3, #1
    5d4c:	d000      	beq.n	5d50 <_vfiprintf_r+0x208>
    5d4e:	e75e      	b.n	5c0e <_vfiprintf_r+0xc6>
    5d50:	89bb      	ldrh	r3, [r7, #12]
    5d52:	065b      	lsls	r3, r3, #25
    5d54:	d500      	bpl.n	5d58 <_vfiprintf_r+0x210>
    5d56:	e726      	b.n	5ba6 <_vfiprintf_r+0x5e>
    5d58:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5d5a:	b01f      	add	sp, #124	; 0x7c
    5d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d5e:	46c0      	nop			; (mov r8, r8)
    5d60:	00008c1c 	.word	0x00008c1c
    5d64:	00008c3c 	.word	0x00008c3c
    5d68:	00008c5c 	.word	0x00008c5c
    5d6c:	00008d8a 	.word	0x00008d8a
    5d70:	00008d8e 	.word	0x00008d8e
    5d74:	00003741 	.word	0x00003741
    5d78:	00008d84 	.word	0x00008d84
    5d7c:	00005b23 	.word	0x00005b23

00005d80 <_sbrk_r>:
    5d80:	2300      	movs	r3, #0
    5d82:	b570      	push	{r4, r5, r6, lr}
    5d84:	4c06      	ldr	r4, [pc, #24]	; (5da0 <_sbrk_r+0x20>)
    5d86:	0005      	movs	r5, r0
    5d88:	0008      	movs	r0, r1
    5d8a:	6023      	str	r3, [r4, #0]
    5d8c:	f7fc fe32 	bl	29f4 <_sbrk>
    5d90:	1c43      	adds	r3, r0, #1
    5d92:	d103      	bne.n	5d9c <_sbrk_r+0x1c>
    5d94:	6823      	ldr	r3, [r4, #0]
    5d96:	2b00      	cmp	r3, #0
    5d98:	d000      	beq.n	5d9c <_sbrk_r+0x1c>
    5d9a:	602b      	str	r3, [r5, #0]
    5d9c:	bd70      	pop	{r4, r5, r6, pc}
    5d9e:	46c0      	nop			; (mov r8, r8)
    5da0:	200008fc 	.word	0x200008fc

00005da4 <__sread>:
    5da4:	b570      	push	{r4, r5, r6, lr}
    5da6:	000c      	movs	r4, r1
    5da8:	250e      	movs	r5, #14
    5daa:	5f49      	ldrsh	r1, [r1, r5]
    5dac:	f000 f8a4 	bl	5ef8 <_read_r>
    5db0:	2800      	cmp	r0, #0
    5db2:	db03      	blt.n	5dbc <__sread+0x18>
    5db4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5db6:	181b      	adds	r3, r3, r0
    5db8:	6563      	str	r3, [r4, #84]	; 0x54
    5dba:	e003      	b.n	5dc4 <__sread+0x20>
    5dbc:	89a2      	ldrh	r2, [r4, #12]
    5dbe:	4b02      	ldr	r3, [pc, #8]	; (5dc8 <__sread+0x24>)
    5dc0:	4013      	ands	r3, r2
    5dc2:	81a3      	strh	r3, [r4, #12]
    5dc4:	bd70      	pop	{r4, r5, r6, pc}
    5dc6:	46c0      	nop			; (mov r8, r8)
    5dc8:	ffffefff 	.word	0xffffefff

00005dcc <__swrite>:
    5dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5dce:	001f      	movs	r7, r3
    5dd0:	898b      	ldrh	r3, [r1, #12]
    5dd2:	0005      	movs	r5, r0
    5dd4:	000c      	movs	r4, r1
    5dd6:	0016      	movs	r6, r2
    5dd8:	05db      	lsls	r3, r3, #23
    5dda:	d505      	bpl.n	5de8 <__swrite+0x1c>
    5ddc:	230e      	movs	r3, #14
    5dde:	5ec9      	ldrsh	r1, [r1, r3]
    5de0:	2200      	movs	r2, #0
    5de2:	2302      	movs	r3, #2
    5de4:	f000 f874 	bl	5ed0 <_lseek_r>
    5de8:	89a2      	ldrh	r2, [r4, #12]
    5dea:	4b05      	ldr	r3, [pc, #20]	; (5e00 <__swrite+0x34>)
    5dec:	0028      	movs	r0, r5
    5dee:	4013      	ands	r3, r2
    5df0:	81a3      	strh	r3, [r4, #12]
    5df2:	0032      	movs	r2, r6
    5df4:	230e      	movs	r3, #14
    5df6:	5ee1      	ldrsh	r1, [r4, r3]
    5df8:	003b      	movs	r3, r7
    5dfa:	f000 f81f 	bl	5e3c <_write_r>
    5dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e00:	ffffefff 	.word	0xffffefff

00005e04 <__sseek>:
    5e04:	b570      	push	{r4, r5, r6, lr}
    5e06:	000c      	movs	r4, r1
    5e08:	250e      	movs	r5, #14
    5e0a:	5f49      	ldrsh	r1, [r1, r5]
    5e0c:	f000 f860 	bl	5ed0 <_lseek_r>
    5e10:	89a3      	ldrh	r3, [r4, #12]
    5e12:	1c42      	adds	r2, r0, #1
    5e14:	d103      	bne.n	5e1e <__sseek+0x1a>
    5e16:	4a05      	ldr	r2, [pc, #20]	; (5e2c <__sseek+0x28>)
    5e18:	4013      	ands	r3, r2
    5e1a:	81a3      	strh	r3, [r4, #12]
    5e1c:	e004      	b.n	5e28 <__sseek+0x24>
    5e1e:	2280      	movs	r2, #128	; 0x80
    5e20:	0152      	lsls	r2, r2, #5
    5e22:	4313      	orrs	r3, r2
    5e24:	81a3      	strh	r3, [r4, #12]
    5e26:	6560      	str	r0, [r4, #84]	; 0x54
    5e28:	bd70      	pop	{r4, r5, r6, pc}
    5e2a:	46c0      	nop			; (mov r8, r8)
    5e2c:	ffffefff 	.word	0xffffefff

00005e30 <__sclose>:
    5e30:	b510      	push	{r4, lr}
    5e32:	230e      	movs	r3, #14
    5e34:	5ec9      	ldrsh	r1, [r1, r3]
    5e36:	f000 f815 	bl	5e64 <_close_r>
    5e3a:	bd10      	pop	{r4, pc}

00005e3c <_write_r>:
    5e3c:	b570      	push	{r4, r5, r6, lr}
    5e3e:	0005      	movs	r5, r0
    5e40:	0008      	movs	r0, r1
    5e42:	0011      	movs	r1, r2
    5e44:	2200      	movs	r2, #0
    5e46:	4c06      	ldr	r4, [pc, #24]	; (5e60 <_write_r+0x24>)
    5e48:	6022      	str	r2, [r4, #0]
    5e4a:	001a      	movs	r2, r3
    5e4c:	f7fc fdaa 	bl	29a4 <_write>
    5e50:	1c43      	adds	r3, r0, #1
    5e52:	d103      	bne.n	5e5c <_write_r+0x20>
    5e54:	6823      	ldr	r3, [r4, #0]
    5e56:	2b00      	cmp	r3, #0
    5e58:	d000      	beq.n	5e5c <_write_r+0x20>
    5e5a:	602b      	str	r3, [r5, #0]
    5e5c:	bd70      	pop	{r4, r5, r6, pc}
    5e5e:	46c0      	nop			; (mov r8, r8)
    5e60:	200008fc 	.word	0x200008fc

00005e64 <_close_r>:
    5e64:	2300      	movs	r3, #0
    5e66:	b570      	push	{r4, r5, r6, lr}
    5e68:	4c06      	ldr	r4, [pc, #24]	; (5e84 <_close_r+0x20>)
    5e6a:	0005      	movs	r5, r0
    5e6c:	0008      	movs	r0, r1
    5e6e:	6023      	str	r3, [r4, #0]
    5e70:	f7fc fdd2 	bl	2a18 <_close>
    5e74:	1c43      	adds	r3, r0, #1
    5e76:	d103      	bne.n	5e80 <_close_r+0x1c>
    5e78:	6823      	ldr	r3, [r4, #0]
    5e7a:	2b00      	cmp	r3, #0
    5e7c:	d000      	beq.n	5e80 <_close_r+0x1c>
    5e7e:	602b      	str	r3, [r5, #0]
    5e80:	bd70      	pop	{r4, r5, r6, pc}
    5e82:	46c0      	nop			; (mov r8, r8)
    5e84:	200008fc 	.word	0x200008fc

00005e88 <_fstat_r>:
    5e88:	2300      	movs	r3, #0
    5e8a:	b570      	push	{r4, r5, r6, lr}
    5e8c:	4c06      	ldr	r4, [pc, #24]	; (5ea8 <_fstat_r+0x20>)
    5e8e:	0005      	movs	r5, r0
    5e90:	0008      	movs	r0, r1
    5e92:	0011      	movs	r1, r2
    5e94:	6023      	str	r3, [r4, #0]
    5e96:	f7fc fdc3 	bl	2a20 <_fstat>
    5e9a:	1c43      	adds	r3, r0, #1
    5e9c:	d103      	bne.n	5ea6 <_fstat_r+0x1e>
    5e9e:	6823      	ldr	r3, [r4, #0]
    5ea0:	2b00      	cmp	r3, #0
    5ea2:	d000      	beq.n	5ea6 <_fstat_r+0x1e>
    5ea4:	602b      	str	r3, [r5, #0]
    5ea6:	bd70      	pop	{r4, r5, r6, pc}
    5ea8:	200008fc 	.word	0x200008fc

00005eac <_isatty_r>:
    5eac:	2300      	movs	r3, #0
    5eae:	b570      	push	{r4, r5, r6, lr}
    5eb0:	4c06      	ldr	r4, [pc, #24]	; (5ecc <_isatty_r+0x20>)
    5eb2:	0005      	movs	r5, r0
    5eb4:	0008      	movs	r0, r1
    5eb6:	6023      	str	r3, [r4, #0]
    5eb8:	f7fc fdb8 	bl	2a2c <_isatty>
    5ebc:	1c43      	adds	r3, r0, #1
    5ebe:	d103      	bne.n	5ec8 <_isatty_r+0x1c>
    5ec0:	6823      	ldr	r3, [r4, #0]
    5ec2:	2b00      	cmp	r3, #0
    5ec4:	d000      	beq.n	5ec8 <_isatty_r+0x1c>
    5ec6:	602b      	str	r3, [r5, #0]
    5ec8:	bd70      	pop	{r4, r5, r6, pc}
    5eca:	46c0      	nop			; (mov r8, r8)
    5ecc:	200008fc 	.word	0x200008fc

00005ed0 <_lseek_r>:
    5ed0:	b570      	push	{r4, r5, r6, lr}
    5ed2:	0005      	movs	r5, r0
    5ed4:	0008      	movs	r0, r1
    5ed6:	0011      	movs	r1, r2
    5ed8:	2200      	movs	r2, #0
    5eda:	4c06      	ldr	r4, [pc, #24]	; (5ef4 <_lseek_r+0x24>)
    5edc:	6022      	str	r2, [r4, #0]
    5ede:	001a      	movs	r2, r3
    5ee0:	f7fc fda6 	bl	2a30 <_lseek>
    5ee4:	1c43      	adds	r3, r0, #1
    5ee6:	d103      	bne.n	5ef0 <_lseek_r+0x20>
    5ee8:	6823      	ldr	r3, [r4, #0]
    5eea:	2b00      	cmp	r3, #0
    5eec:	d000      	beq.n	5ef0 <_lseek_r+0x20>
    5eee:	602b      	str	r3, [r5, #0]
    5ef0:	bd70      	pop	{r4, r5, r6, pc}
    5ef2:	46c0      	nop			; (mov r8, r8)
    5ef4:	200008fc 	.word	0x200008fc

00005ef8 <_read_r>:
    5ef8:	b570      	push	{r4, r5, r6, lr}
    5efa:	0005      	movs	r5, r0
    5efc:	0008      	movs	r0, r1
    5efe:	0011      	movs	r1, r2
    5f00:	2200      	movs	r2, #0
    5f02:	4c06      	ldr	r4, [pc, #24]	; (5f1c <_read_r+0x24>)
    5f04:	6022      	str	r2, [r4, #0]
    5f06:	001a      	movs	r2, r3
    5f08:	f7fc fd2c 	bl	2964 <_read>
    5f0c:	1c43      	adds	r3, r0, #1
    5f0e:	d103      	bne.n	5f18 <_read_r+0x20>
    5f10:	6823      	ldr	r3, [r4, #0]
    5f12:	2b00      	cmp	r3, #0
    5f14:	d000      	beq.n	5f18 <_read_r+0x20>
    5f16:	602b      	str	r3, [r5, #0]
    5f18:	bd70      	pop	{r4, r5, r6, pc}
    5f1a:	46c0      	nop			; (mov r8, r8)
    5f1c:	200008fc 	.word	0x200008fc

00005f20 <__gnu_thumb1_case_uqi>:
    5f20:	b402      	push	{r1}
    5f22:	4671      	mov	r1, lr
    5f24:	0849      	lsrs	r1, r1, #1
    5f26:	0049      	lsls	r1, r1, #1
    5f28:	5c09      	ldrb	r1, [r1, r0]
    5f2a:	0049      	lsls	r1, r1, #1
    5f2c:	448e      	add	lr, r1
    5f2e:	bc02      	pop	{r1}
    5f30:	4770      	bx	lr
    5f32:	46c0      	nop			; (mov r8, r8)

00005f34 <__aeabi_uidiv>:
    5f34:	2200      	movs	r2, #0
    5f36:	0843      	lsrs	r3, r0, #1
    5f38:	428b      	cmp	r3, r1
    5f3a:	d374      	bcc.n	6026 <__aeabi_uidiv+0xf2>
    5f3c:	0903      	lsrs	r3, r0, #4
    5f3e:	428b      	cmp	r3, r1
    5f40:	d35f      	bcc.n	6002 <__aeabi_uidiv+0xce>
    5f42:	0a03      	lsrs	r3, r0, #8
    5f44:	428b      	cmp	r3, r1
    5f46:	d344      	bcc.n	5fd2 <__aeabi_uidiv+0x9e>
    5f48:	0b03      	lsrs	r3, r0, #12
    5f4a:	428b      	cmp	r3, r1
    5f4c:	d328      	bcc.n	5fa0 <__aeabi_uidiv+0x6c>
    5f4e:	0c03      	lsrs	r3, r0, #16
    5f50:	428b      	cmp	r3, r1
    5f52:	d30d      	bcc.n	5f70 <__aeabi_uidiv+0x3c>
    5f54:	22ff      	movs	r2, #255	; 0xff
    5f56:	0209      	lsls	r1, r1, #8
    5f58:	ba12      	rev	r2, r2
    5f5a:	0c03      	lsrs	r3, r0, #16
    5f5c:	428b      	cmp	r3, r1
    5f5e:	d302      	bcc.n	5f66 <__aeabi_uidiv+0x32>
    5f60:	1212      	asrs	r2, r2, #8
    5f62:	0209      	lsls	r1, r1, #8
    5f64:	d065      	beq.n	6032 <__aeabi_uidiv+0xfe>
    5f66:	0b03      	lsrs	r3, r0, #12
    5f68:	428b      	cmp	r3, r1
    5f6a:	d319      	bcc.n	5fa0 <__aeabi_uidiv+0x6c>
    5f6c:	e000      	b.n	5f70 <__aeabi_uidiv+0x3c>
    5f6e:	0a09      	lsrs	r1, r1, #8
    5f70:	0bc3      	lsrs	r3, r0, #15
    5f72:	428b      	cmp	r3, r1
    5f74:	d301      	bcc.n	5f7a <__aeabi_uidiv+0x46>
    5f76:	03cb      	lsls	r3, r1, #15
    5f78:	1ac0      	subs	r0, r0, r3
    5f7a:	4152      	adcs	r2, r2
    5f7c:	0b83      	lsrs	r3, r0, #14
    5f7e:	428b      	cmp	r3, r1
    5f80:	d301      	bcc.n	5f86 <__aeabi_uidiv+0x52>
    5f82:	038b      	lsls	r3, r1, #14
    5f84:	1ac0      	subs	r0, r0, r3
    5f86:	4152      	adcs	r2, r2
    5f88:	0b43      	lsrs	r3, r0, #13
    5f8a:	428b      	cmp	r3, r1
    5f8c:	d301      	bcc.n	5f92 <__aeabi_uidiv+0x5e>
    5f8e:	034b      	lsls	r3, r1, #13
    5f90:	1ac0      	subs	r0, r0, r3
    5f92:	4152      	adcs	r2, r2
    5f94:	0b03      	lsrs	r3, r0, #12
    5f96:	428b      	cmp	r3, r1
    5f98:	d301      	bcc.n	5f9e <__aeabi_uidiv+0x6a>
    5f9a:	030b      	lsls	r3, r1, #12
    5f9c:	1ac0      	subs	r0, r0, r3
    5f9e:	4152      	adcs	r2, r2
    5fa0:	0ac3      	lsrs	r3, r0, #11
    5fa2:	428b      	cmp	r3, r1
    5fa4:	d301      	bcc.n	5faa <__aeabi_uidiv+0x76>
    5fa6:	02cb      	lsls	r3, r1, #11
    5fa8:	1ac0      	subs	r0, r0, r3
    5faa:	4152      	adcs	r2, r2
    5fac:	0a83      	lsrs	r3, r0, #10
    5fae:	428b      	cmp	r3, r1
    5fb0:	d301      	bcc.n	5fb6 <__aeabi_uidiv+0x82>
    5fb2:	028b      	lsls	r3, r1, #10
    5fb4:	1ac0      	subs	r0, r0, r3
    5fb6:	4152      	adcs	r2, r2
    5fb8:	0a43      	lsrs	r3, r0, #9
    5fba:	428b      	cmp	r3, r1
    5fbc:	d301      	bcc.n	5fc2 <__aeabi_uidiv+0x8e>
    5fbe:	024b      	lsls	r3, r1, #9
    5fc0:	1ac0      	subs	r0, r0, r3
    5fc2:	4152      	adcs	r2, r2
    5fc4:	0a03      	lsrs	r3, r0, #8
    5fc6:	428b      	cmp	r3, r1
    5fc8:	d301      	bcc.n	5fce <__aeabi_uidiv+0x9a>
    5fca:	020b      	lsls	r3, r1, #8
    5fcc:	1ac0      	subs	r0, r0, r3
    5fce:	4152      	adcs	r2, r2
    5fd0:	d2cd      	bcs.n	5f6e <__aeabi_uidiv+0x3a>
    5fd2:	09c3      	lsrs	r3, r0, #7
    5fd4:	428b      	cmp	r3, r1
    5fd6:	d301      	bcc.n	5fdc <__aeabi_uidiv+0xa8>
    5fd8:	01cb      	lsls	r3, r1, #7
    5fda:	1ac0      	subs	r0, r0, r3
    5fdc:	4152      	adcs	r2, r2
    5fde:	0983      	lsrs	r3, r0, #6
    5fe0:	428b      	cmp	r3, r1
    5fe2:	d301      	bcc.n	5fe8 <__aeabi_uidiv+0xb4>
    5fe4:	018b      	lsls	r3, r1, #6
    5fe6:	1ac0      	subs	r0, r0, r3
    5fe8:	4152      	adcs	r2, r2
    5fea:	0943      	lsrs	r3, r0, #5
    5fec:	428b      	cmp	r3, r1
    5fee:	d301      	bcc.n	5ff4 <__aeabi_uidiv+0xc0>
    5ff0:	014b      	lsls	r3, r1, #5
    5ff2:	1ac0      	subs	r0, r0, r3
    5ff4:	4152      	adcs	r2, r2
    5ff6:	0903      	lsrs	r3, r0, #4
    5ff8:	428b      	cmp	r3, r1
    5ffa:	d301      	bcc.n	6000 <__aeabi_uidiv+0xcc>
    5ffc:	010b      	lsls	r3, r1, #4
    5ffe:	1ac0      	subs	r0, r0, r3
    6000:	4152      	adcs	r2, r2
    6002:	08c3      	lsrs	r3, r0, #3
    6004:	428b      	cmp	r3, r1
    6006:	d301      	bcc.n	600c <__aeabi_uidiv+0xd8>
    6008:	00cb      	lsls	r3, r1, #3
    600a:	1ac0      	subs	r0, r0, r3
    600c:	4152      	adcs	r2, r2
    600e:	0883      	lsrs	r3, r0, #2
    6010:	428b      	cmp	r3, r1
    6012:	d301      	bcc.n	6018 <__aeabi_uidiv+0xe4>
    6014:	008b      	lsls	r3, r1, #2
    6016:	1ac0      	subs	r0, r0, r3
    6018:	4152      	adcs	r2, r2
    601a:	0843      	lsrs	r3, r0, #1
    601c:	428b      	cmp	r3, r1
    601e:	d301      	bcc.n	6024 <__aeabi_uidiv+0xf0>
    6020:	004b      	lsls	r3, r1, #1
    6022:	1ac0      	subs	r0, r0, r3
    6024:	4152      	adcs	r2, r2
    6026:	1a41      	subs	r1, r0, r1
    6028:	d200      	bcs.n	602c <__aeabi_uidiv+0xf8>
    602a:	4601      	mov	r1, r0
    602c:	4152      	adcs	r2, r2
    602e:	4610      	mov	r0, r2
    6030:	4770      	bx	lr
    6032:	e7ff      	b.n	6034 <__aeabi_uidiv+0x100>
    6034:	b501      	push	{r0, lr}
    6036:	2000      	movs	r0, #0
    6038:	f000 f8f0 	bl	621c <__aeabi_idiv0>
    603c:	bd02      	pop	{r1, pc}
    603e:	46c0      	nop			; (mov r8, r8)

00006040 <__aeabi_uidivmod>:
    6040:	2900      	cmp	r1, #0
    6042:	d0f7      	beq.n	6034 <__aeabi_uidiv+0x100>
    6044:	e776      	b.n	5f34 <__aeabi_uidiv>
    6046:	4770      	bx	lr

00006048 <__aeabi_idiv>:
    6048:	4603      	mov	r3, r0
    604a:	430b      	orrs	r3, r1
    604c:	d47f      	bmi.n	614e <__aeabi_idiv+0x106>
    604e:	2200      	movs	r2, #0
    6050:	0843      	lsrs	r3, r0, #1
    6052:	428b      	cmp	r3, r1
    6054:	d374      	bcc.n	6140 <__aeabi_idiv+0xf8>
    6056:	0903      	lsrs	r3, r0, #4
    6058:	428b      	cmp	r3, r1
    605a:	d35f      	bcc.n	611c <__aeabi_idiv+0xd4>
    605c:	0a03      	lsrs	r3, r0, #8
    605e:	428b      	cmp	r3, r1
    6060:	d344      	bcc.n	60ec <__aeabi_idiv+0xa4>
    6062:	0b03      	lsrs	r3, r0, #12
    6064:	428b      	cmp	r3, r1
    6066:	d328      	bcc.n	60ba <__aeabi_idiv+0x72>
    6068:	0c03      	lsrs	r3, r0, #16
    606a:	428b      	cmp	r3, r1
    606c:	d30d      	bcc.n	608a <__aeabi_idiv+0x42>
    606e:	22ff      	movs	r2, #255	; 0xff
    6070:	0209      	lsls	r1, r1, #8
    6072:	ba12      	rev	r2, r2
    6074:	0c03      	lsrs	r3, r0, #16
    6076:	428b      	cmp	r3, r1
    6078:	d302      	bcc.n	6080 <__aeabi_idiv+0x38>
    607a:	1212      	asrs	r2, r2, #8
    607c:	0209      	lsls	r1, r1, #8
    607e:	d065      	beq.n	614c <__aeabi_idiv+0x104>
    6080:	0b03      	lsrs	r3, r0, #12
    6082:	428b      	cmp	r3, r1
    6084:	d319      	bcc.n	60ba <__aeabi_idiv+0x72>
    6086:	e000      	b.n	608a <__aeabi_idiv+0x42>
    6088:	0a09      	lsrs	r1, r1, #8
    608a:	0bc3      	lsrs	r3, r0, #15
    608c:	428b      	cmp	r3, r1
    608e:	d301      	bcc.n	6094 <__aeabi_idiv+0x4c>
    6090:	03cb      	lsls	r3, r1, #15
    6092:	1ac0      	subs	r0, r0, r3
    6094:	4152      	adcs	r2, r2
    6096:	0b83      	lsrs	r3, r0, #14
    6098:	428b      	cmp	r3, r1
    609a:	d301      	bcc.n	60a0 <__aeabi_idiv+0x58>
    609c:	038b      	lsls	r3, r1, #14
    609e:	1ac0      	subs	r0, r0, r3
    60a0:	4152      	adcs	r2, r2
    60a2:	0b43      	lsrs	r3, r0, #13
    60a4:	428b      	cmp	r3, r1
    60a6:	d301      	bcc.n	60ac <__aeabi_idiv+0x64>
    60a8:	034b      	lsls	r3, r1, #13
    60aa:	1ac0      	subs	r0, r0, r3
    60ac:	4152      	adcs	r2, r2
    60ae:	0b03      	lsrs	r3, r0, #12
    60b0:	428b      	cmp	r3, r1
    60b2:	d301      	bcc.n	60b8 <__aeabi_idiv+0x70>
    60b4:	030b      	lsls	r3, r1, #12
    60b6:	1ac0      	subs	r0, r0, r3
    60b8:	4152      	adcs	r2, r2
    60ba:	0ac3      	lsrs	r3, r0, #11
    60bc:	428b      	cmp	r3, r1
    60be:	d301      	bcc.n	60c4 <__aeabi_idiv+0x7c>
    60c0:	02cb      	lsls	r3, r1, #11
    60c2:	1ac0      	subs	r0, r0, r3
    60c4:	4152      	adcs	r2, r2
    60c6:	0a83      	lsrs	r3, r0, #10
    60c8:	428b      	cmp	r3, r1
    60ca:	d301      	bcc.n	60d0 <__aeabi_idiv+0x88>
    60cc:	028b      	lsls	r3, r1, #10
    60ce:	1ac0      	subs	r0, r0, r3
    60d0:	4152      	adcs	r2, r2
    60d2:	0a43      	lsrs	r3, r0, #9
    60d4:	428b      	cmp	r3, r1
    60d6:	d301      	bcc.n	60dc <__aeabi_idiv+0x94>
    60d8:	024b      	lsls	r3, r1, #9
    60da:	1ac0      	subs	r0, r0, r3
    60dc:	4152      	adcs	r2, r2
    60de:	0a03      	lsrs	r3, r0, #8
    60e0:	428b      	cmp	r3, r1
    60e2:	d301      	bcc.n	60e8 <__aeabi_idiv+0xa0>
    60e4:	020b      	lsls	r3, r1, #8
    60e6:	1ac0      	subs	r0, r0, r3
    60e8:	4152      	adcs	r2, r2
    60ea:	d2cd      	bcs.n	6088 <__aeabi_idiv+0x40>
    60ec:	09c3      	lsrs	r3, r0, #7
    60ee:	428b      	cmp	r3, r1
    60f0:	d301      	bcc.n	60f6 <__aeabi_idiv+0xae>
    60f2:	01cb      	lsls	r3, r1, #7
    60f4:	1ac0      	subs	r0, r0, r3
    60f6:	4152      	adcs	r2, r2
    60f8:	0983      	lsrs	r3, r0, #6
    60fa:	428b      	cmp	r3, r1
    60fc:	d301      	bcc.n	6102 <__aeabi_idiv+0xba>
    60fe:	018b      	lsls	r3, r1, #6
    6100:	1ac0      	subs	r0, r0, r3
    6102:	4152      	adcs	r2, r2
    6104:	0943      	lsrs	r3, r0, #5
    6106:	428b      	cmp	r3, r1
    6108:	d301      	bcc.n	610e <__aeabi_idiv+0xc6>
    610a:	014b      	lsls	r3, r1, #5
    610c:	1ac0      	subs	r0, r0, r3
    610e:	4152      	adcs	r2, r2
    6110:	0903      	lsrs	r3, r0, #4
    6112:	428b      	cmp	r3, r1
    6114:	d301      	bcc.n	611a <__aeabi_idiv+0xd2>
    6116:	010b      	lsls	r3, r1, #4
    6118:	1ac0      	subs	r0, r0, r3
    611a:	4152      	adcs	r2, r2
    611c:	08c3      	lsrs	r3, r0, #3
    611e:	428b      	cmp	r3, r1
    6120:	d301      	bcc.n	6126 <__aeabi_idiv+0xde>
    6122:	00cb      	lsls	r3, r1, #3
    6124:	1ac0      	subs	r0, r0, r3
    6126:	4152      	adcs	r2, r2
    6128:	0883      	lsrs	r3, r0, #2
    612a:	428b      	cmp	r3, r1
    612c:	d301      	bcc.n	6132 <__aeabi_idiv+0xea>
    612e:	008b      	lsls	r3, r1, #2
    6130:	1ac0      	subs	r0, r0, r3
    6132:	4152      	adcs	r2, r2
    6134:	0843      	lsrs	r3, r0, #1
    6136:	428b      	cmp	r3, r1
    6138:	d301      	bcc.n	613e <__aeabi_idiv+0xf6>
    613a:	004b      	lsls	r3, r1, #1
    613c:	1ac0      	subs	r0, r0, r3
    613e:	4152      	adcs	r2, r2
    6140:	1a41      	subs	r1, r0, r1
    6142:	d200      	bcs.n	6146 <__aeabi_idiv+0xfe>
    6144:	4601      	mov	r1, r0
    6146:	4152      	adcs	r2, r2
    6148:	4610      	mov	r0, r2
    614a:	4770      	bx	lr
    614c:	e05d      	b.n	620a <__aeabi_idiv+0x1c2>
    614e:	0fca      	lsrs	r2, r1, #31
    6150:	d000      	beq.n	6154 <__aeabi_idiv+0x10c>
    6152:	4249      	negs	r1, r1
    6154:	1003      	asrs	r3, r0, #32
    6156:	d300      	bcc.n	615a <__aeabi_idiv+0x112>
    6158:	4240      	negs	r0, r0
    615a:	4053      	eors	r3, r2
    615c:	2200      	movs	r2, #0
    615e:	469c      	mov	ip, r3
    6160:	0903      	lsrs	r3, r0, #4
    6162:	428b      	cmp	r3, r1
    6164:	d32d      	bcc.n	61c2 <__aeabi_idiv+0x17a>
    6166:	0a03      	lsrs	r3, r0, #8
    6168:	428b      	cmp	r3, r1
    616a:	d312      	bcc.n	6192 <__aeabi_idiv+0x14a>
    616c:	22fc      	movs	r2, #252	; 0xfc
    616e:	0189      	lsls	r1, r1, #6
    6170:	ba12      	rev	r2, r2
    6172:	0a03      	lsrs	r3, r0, #8
    6174:	428b      	cmp	r3, r1
    6176:	d30c      	bcc.n	6192 <__aeabi_idiv+0x14a>
    6178:	0189      	lsls	r1, r1, #6
    617a:	1192      	asrs	r2, r2, #6
    617c:	428b      	cmp	r3, r1
    617e:	d308      	bcc.n	6192 <__aeabi_idiv+0x14a>
    6180:	0189      	lsls	r1, r1, #6
    6182:	1192      	asrs	r2, r2, #6
    6184:	428b      	cmp	r3, r1
    6186:	d304      	bcc.n	6192 <__aeabi_idiv+0x14a>
    6188:	0189      	lsls	r1, r1, #6
    618a:	d03a      	beq.n	6202 <__aeabi_idiv+0x1ba>
    618c:	1192      	asrs	r2, r2, #6
    618e:	e000      	b.n	6192 <__aeabi_idiv+0x14a>
    6190:	0989      	lsrs	r1, r1, #6
    6192:	09c3      	lsrs	r3, r0, #7
    6194:	428b      	cmp	r3, r1
    6196:	d301      	bcc.n	619c <__aeabi_idiv+0x154>
    6198:	01cb      	lsls	r3, r1, #7
    619a:	1ac0      	subs	r0, r0, r3
    619c:	4152      	adcs	r2, r2
    619e:	0983      	lsrs	r3, r0, #6
    61a0:	428b      	cmp	r3, r1
    61a2:	d301      	bcc.n	61a8 <__aeabi_idiv+0x160>
    61a4:	018b      	lsls	r3, r1, #6
    61a6:	1ac0      	subs	r0, r0, r3
    61a8:	4152      	adcs	r2, r2
    61aa:	0943      	lsrs	r3, r0, #5
    61ac:	428b      	cmp	r3, r1
    61ae:	d301      	bcc.n	61b4 <__aeabi_idiv+0x16c>
    61b0:	014b      	lsls	r3, r1, #5
    61b2:	1ac0      	subs	r0, r0, r3
    61b4:	4152      	adcs	r2, r2
    61b6:	0903      	lsrs	r3, r0, #4
    61b8:	428b      	cmp	r3, r1
    61ba:	d301      	bcc.n	61c0 <__aeabi_idiv+0x178>
    61bc:	010b      	lsls	r3, r1, #4
    61be:	1ac0      	subs	r0, r0, r3
    61c0:	4152      	adcs	r2, r2
    61c2:	08c3      	lsrs	r3, r0, #3
    61c4:	428b      	cmp	r3, r1
    61c6:	d301      	bcc.n	61cc <__aeabi_idiv+0x184>
    61c8:	00cb      	lsls	r3, r1, #3
    61ca:	1ac0      	subs	r0, r0, r3
    61cc:	4152      	adcs	r2, r2
    61ce:	0883      	lsrs	r3, r0, #2
    61d0:	428b      	cmp	r3, r1
    61d2:	d301      	bcc.n	61d8 <__aeabi_idiv+0x190>
    61d4:	008b      	lsls	r3, r1, #2
    61d6:	1ac0      	subs	r0, r0, r3
    61d8:	4152      	adcs	r2, r2
    61da:	d2d9      	bcs.n	6190 <__aeabi_idiv+0x148>
    61dc:	0843      	lsrs	r3, r0, #1
    61de:	428b      	cmp	r3, r1
    61e0:	d301      	bcc.n	61e6 <__aeabi_idiv+0x19e>
    61e2:	004b      	lsls	r3, r1, #1
    61e4:	1ac0      	subs	r0, r0, r3
    61e6:	4152      	adcs	r2, r2
    61e8:	1a41      	subs	r1, r0, r1
    61ea:	d200      	bcs.n	61ee <__aeabi_idiv+0x1a6>
    61ec:	4601      	mov	r1, r0
    61ee:	4663      	mov	r3, ip
    61f0:	4152      	adcs	r2, r2
    61f2:	105b      	asrs	r3, r3, #1
    61f4:	4610      	mov	r0, r2
    61f6:	d301      	bcc.n	61fc <__aeabi_idiv+0x1b4>
    61f8:	4240      	negs	r0, r0
    61fa:	2b00      	cmp	r3, #0
    61fc:	d500      	bpl.n	6200 <__aeabi_idiv+0x1b8>
    61fe:	4249      	negs	r1, r1
    6200:	4770      	bx	lr
    6202:	4663      	mov	r3, ip
    6204:	105b      	asrs	r3, r3, #1
    6206:	d300      	bcc.n	620a <__aeabi_idiv+0x1c2>
    6208:	4240      	negs	r0, r0
    620a:	b501      	push	{r0, lr}
    620c:	2000      	movs	r0, #0
    620e:	f000 f805 	bl	621c <__aeabi_idiv0>
    6212:	bd02      	pop	{r1, pc}

00006214 <__aeabi_idivmod>:
    6214:	2900      	cmp	r1, #0
    6216:	d0f8      	beq.n	620a <__aeabi_idiv+0x1c2>
    6218:	e716      	b.n	6048 <__aeabi_idiv>
    621a:	4770      	bx	lr

0000621c <__aeabi_idiv0>:
    621c:	4770      	bx	lr
    621e:	46c0      	nop			; (mov r8, r8)

00006220 <__aeabi_cdrcmple>:
    6220:	4684      	mov	ip, r0
    6222:	1c10      	adds	r0, r2, #0
    6224:	4662      	mov	r2, ip
    6226:	468c      	mov	ip, r1
    6228:	1c19      	adds	r1, r3, #0
    622a:	4663      	mov	r3, ip
    622c:	e000      	b.n	6230 <__aeabi_cdcmpeq>
    622e:	46c0      	nop			; (mov r8, r8)

00006230 <__aeabi_cdcmpeq>:
    6230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6232:	f001 fc1b 	bl	7a6c <__ledf2>
    6236:	2800      	cmp	r0, #0
    6238:	d401      	bmi.n	623e <__aeabi_cdcmpeq+0xe>
    623a:	2100      	movs	r1, #0
    623c:	42c8      	cmn	r0, r1
    623e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006240 <__aeabi_dcmpeq>:
    6240:	b510      	push	{r4, lr}
    6242:	f001 fb6f 	bl	7924 <__eqdf2>
    6246:	4240      	negs	r0, r0
    6248:	3001      	adds	r0, #1
    624a:	bd10      	pop	{r4, pc}

0000624c <__aeabi_dcmplt>:
    624c:	b510      	push	{r4, lr}
    624e:	f001 fc0d 	bl	7a6c <__ledf2>
    6252:	2800      	cmp	r0, #0
    6254:	db01      	blt.n	625a <__aeabi_dcmplt+0xe>
    6256:	2000      	movs	r0, #0
    6258:	bd10      	pop	{r4, pc}
    625a:	2001      	movs	r0, #1
    625c:	bd10      	pop	{r4, pc}
    625e:	46c0      	nop			; (mov r8, r8)

00006260 <__aeabi_dcmple>:
    6260:	b510      	push	{r4, lr}
    6262:	f001 fc03 	bl	7a6c <__ledf2>
    6266:	2800      	cmp	r0, #0
    6268:	dd01      	ble.n	626e <__aeabi_dcmple+0xe>
    626a:	2000      	movs	r0, #0
    626c:	bd10      	pop	{r4, pc}
    626e:	2001      	movs	r0, #1
    6270:	bd10      	pop	{r4, pc}
    6272:	46c0      	nop			; (mov r8, r8)

00006274 <__aeabi_dcmpgt>:
    6274:	b510      	push	{r4, lr}
    6276:	f001 fb95 	bl	79a4 <__gedf2>
    627a:	2800      	cmp	r0, #0
    627c:	dc01      	bgt.n	6282 <__aeabi_dcmpgt+0xe>
    627e:	2000      	movs	r0, #0
    6280:	bd10      	pop	{r4, pc}
    6282:	2001      	movs	r0, #1
    6284:	bd10      	pop	{r4, pc}
    6286:	46c0      	nop			; (mov r8, r8)

00006288 <__aeabi_dcmpge>:
    6288:	b510      	push	{r4, lr}
    628a:	f001 fb8b 	bl	79a4 <__gedf2>
    628e:	2800      	cmp	r0, #0
    6290:	da01      	bge.n	6296 <__aeabi_dcmpge+0xe>
    6292:	2000      	movs	r0, #0
    6294:	bd10      	pop	{r4, pc}
    6296:	2001      	movs	r0, #1
    6298:	bd10      	pop	{r4, pc}
    629a:	46c0      	nop			; (mov r8, r8)

0000629c <__aeabi_cfrcmple>:
    629c:	4684      	mov	ip, r0
    629e:	1c08      	adds	r0, r1, #0
    62a0:	4661      	mov	r1, ip
    62a2:	e7ff      	b.n	62a4 <__aeabi_cfcmpeq>

000062a4 <__aeabi_cfcmpeq>:
    62a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    62a6:	f000 fb5b 	bl	6960 <__lesf2>
    62aa:	2800      	cmp	r0, #0
    62ac:	d401      	bmi.n	62b2 <__aeabi_cfcmpeq+0xe>
    62ae:	2100      	movs	r1, #0
    62b0:	42c8      	cmn	r0, r1
    62b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000062b4 <__aeabi_fcmpeq>:
    62b4:	b510      	push	{r4, lr}
    62b6:	f000 fae7 	bl	6888 <__eqsf2>
    62ba:	4240      	negs	r0, r0
    62bc:	3001      	adds	r0, #1
    62be:	bd10      	pop	{r4, pc}

000062c0 <__aeabi_fcmplt>:
    62c0:	b510      	push	{r4, lr}
    62c2:	f000 fb4d 	bl	6960 <__lesf2>
    62c6:	2800      	cmp	r0, #0
    62c8:	db01      	blt.n	62ce <__aeabi_fcmplt+0xe>
    62ca:	2000      	movs	r0, #0
    62cc:	bd10      	pop	{r4, pc}
    62ce:	2001      	movs	r0, #1
    62d0:	bd10      	pop	{r4, pc}
    62d2:	46c0      	nop			; (mov r8, r8)

000062d4 <__aeabi_fcmple>:
    62d4:	b510      	push	{r4, lr}
    62d6:	f000 fb43 	bl	6960 <__lesf2>
    62da:	2800      	cmp	r0, #0
    62dc:	dd01      	ble.n	62e2 <__aeabi_fcmple+0xe>
    62de:	2000      	movs	r0, #0
    62e0:	bd10      	pop	{r4, pc}
    62e2:	2001      	movs	r0, #1
    62e4:	bd10      	pop	{r4, pc}
    62e6:	46c0      	nop			; (mov r8, r8)

000062e8 <__aeabi_fcmpgt>:
    62e8:	b510      	push	{r4, lr}
    62ea:	f000 faf5 	bl	68d8 <__gesf2>
    62ee:	2800      	cmp	r0, #0
    62f0:	dc01      	bgt.n	62f6 <__aeabi_fcmpgt+0xe>
    62f2:	2000      	movs	r0, #0
    62f4:	bd10      	pop	{r4, pc}
    62f6:	2001      	movs	r0, #1
    62f8:	bd10      	pop	{r4, pc}
    62fa:	46c0      	nop			; (mov r8, r8)

000062fc <__aeabi_fcmpge>:
    62fc:	b510      	push	{r4, lr}
    62fe:	f000 faeb 	bl	68d8 <__gesf2>
    6302:	2800      	cmp	r0, #0
    6304:	da01      	bge.n	630a <__aeabi_fcmpge+0xe>
    6306:	2000      	movs	r0, #0
    6308:	bd10      	pop	{r4, pc}
    630a:	2001      	movs	r0, #1
    630c:	bd10      	pop	{r4, pc}
    630e:	46c0      	nop			; (mov r8, r8)

00006310 <__aeabi_lmul>:
    6310:	b5f0      	push	{r4, r5, r6, r7, lr}
    6312:	464f      	mov	r7, r9
    6314:	4646      	mov	r6, r8
    6316:	b4c0      	push	{r6, r7}
    6318:	0416      	lsls	r6, r2, #16
    631a:	0c36      	lsrs	r6, r6, #16
    631c:	4699      	mov	r9, r3
    631e:	0033      	movs	r3, r6
    6320:	0405      	lsls	r5, r0, #16
    6322:	0c2c      	lsrs	r4, r5, #16
    6324:	0c07      	lsrs	r7, r0, #16
    6326:	0c15      	lsrs	r5, r2, #16
    6328:	4363      	muls	r3, r4
    632a:	437e      	muls	r6, r7
    632c:	436f      	muls	r7, r5
    632e:	4365      	muls	r5, r4
    6330:	0c1c      	lsrs	r4, r3, #16
    6332:	19ad      	adds	r5, r5, r6
    6334:	1964      	adds	r4, r4, r5
    6336:	469c      	mov	ip, r3
    6338:	42a6      	cmp	r6, r4
    633a:	d903      	bls.n	6344 <__aeabi_lmul+0x34>
    633c:	2380      	movs	r3, #128	; 0x80
    633e:	025b      	lsls	r3, r3, #9
    6340:	4698      	mov	r8, r3
    6342:	4447      	add	r7, r8
    6344:	4663      	mov	r3, ip
    6346:	0c25      	lsrs	r5, r4, #16
    6348:	19ef      	adds	r7, r5, r7
    634a:	041d      	lsls	r5, r3, #16
    634c:	464b      	mov	r3, r9
    634e:	434a      	muls	r2, r1
    6350:	4343      	muls	r3, r0
    6352:	0c2d      	lsrs	r5, r5, #16
    6354:	0424      	lsls	r4, r4, #16
    6356:	1964      	adds	r4, r4, r5
    6358:	1899      	adds	r1, r3, r2
    635a:	19c9      	adds	r1, r1, r7
    635c:	0020      	movs	r0, r4
    635e:	bc0c      	pop	{r2, r3}
    6360:	4690      	mov	r8, r2
    6362:	4699      	mov	r9, r3
    6364:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6366:	46c0      	nop			; (mov r8, r8)

00006368 <__aeabi_fadd>:
    6368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    636a:	024a      	lsls	r2, r1, #9
    636c:	0243      	lsls	r3, r0, #9
    636e:	0044      	lsls	r4, r0, #1
    6370:	004e      	lsls	r6, r1, #1
    6372:	0fc5      	lsrs	r5, r0, #31
    6374:	0e24      	lsrs	r4, r4, #24
    6376:	0028      	movs	r0, r5
    6378:	099b      	lsrs	r3, r3, #6
    637a:	0e36      	lsrs	r6, r6, #24
    637c:	0fc9      	lsrs	r1, r1, #31
    637e:	0992      	lsrs	r2, r2, #6
    6380:	428d      	cmp	r5, r1
    6382:	d059      	beq.n	6438 <__aeabi_fadd+0xd0>
    6384:	1ba0      	subs	r0, r4, r6
    6386:	2800      	cmp	r0, #0
    6388:	dc00      	bgt.n	638c <__aeabi_fadd+0x24>
    638a:	e08d      	b.n	64a8 <__aeabi_fadd+0x140>
    638c:	2e00      	cmp	r6, #0
    638e:	d11a      	bne.n	63c6 <__aeabi_fadd+0x5e>
    6390:	2a00      	cmp	r2, #0
    6392:	d000      	beq.n	6396 <__aeabi_fadd+0x2e>
    6394:	e079      	b.n	648a <__aeabi_fadd+0x122>
    6396:	075a      	lsls	r2, r3, #29
    6398:	d004      	beq.n	63a4 <__aeabi_fadd+0x3c>
    639a:	220f      	movs	r2, #15
    639c:	401a      	ands	r2, r3
    639e:	2a04      	cmp	r2, #4
    63a0:	d000      	beq.n	63a4 <__aeabi_fadd+0x3c>
    63a2:	3304      	adds	r3, #4
    63a4:	015a      	lsls	r2, r3, #5
    63a6:	d538      	bpl.n	641a <__aeabi_fadd+0xb2>
    63a8:	3401      	adds	r4, #1
    63aa:	2cff      	cmp	r4, #255	; 0xff
    63ac:	d100      	bne.n	63b0 <__aeabi_fadd+0x48>
    63ae:	e089      	b.n	64c4 <__aeabi_fadd+0x15c>
    63b0:	0028      	movs	r0, r5
    63b2:	019b      	lsls	r3, r3, #6
    63b4:	0a5b      	lsrs	r3, r3, #9
    63b6:	b2e4      	uxtb	r4, r4
    63b8:	025b      	lsls	r3, r3, #9
    63ba:	05e4      	lsls	r4, r4, #23
    63bc:	0a5b      	lsrs	r3, r3, #9
    63be:	4323      	orrs	r3, r4
    63c0:	07c0      	lsls	r0, r0, #31
    63c2:	4318      	orrs	r0, r3
    63c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    63c6:	2cff      	cmp	r4, #255	; 0xff
    63c8:	d0e5      	beq.n	6396 <__aeabi_fadd+0x2e>
    63ca:	2180      	movs	r1, #128	; 0x80
    63cc:	04c9      	lsls	r1, r1, #19
    63ce:	430a      	orrs	r2, r1
    63d0:	281b      	cmp	r0, #27
    63d2:	dd00      	ble.n	63d6 <__aeabi_fadd+0x6e>
    63d4:	e089      	b.n	64ea <__aeabi_fadd+0x182>
    63d6:	0016      	movs	r6, r2
    63d8:	2120      	movs	r1, #32
    63da:	40c6      	lsrs	r6, r0
    63dc:	1a08      	subs	r0, r1, r0
    63de:	4082      	lsls	r2, r0
    63e0:	1e51      	subs	r1, r2, #1
    63e2:	418a      	sbcs	r2, r1
    63e4:	4332      	orrs	r2, r6
    63e6:	1a9b      	subs	r3, r3, r2
    63e8:	015a      	lsls	r2, r3, #5
    63ea:	d514      	bpl.n	6416 <__aeabi_fadd+0xae>
    63ec:	019b      	lsls	r3, r3, #6
    63ee:	099e      	lsrs	r6, r3, #6
    63f0:	0030      	movs	r0, r6
    63f2:	f002 fb23 	bl	8a3c <__clzsi2>
    63f6:	3805      	subs	r0, #5
    63f8:	4086      	lsls	r6, r0
    63fa:	4284      	cmp	r4, r0
    63fc:	dc65      	bgt.n	64ca <__aeabi_fadd+0x162>
    63fe:	1b04      	subs	r4, r0, r4
    6400:	0033      	movs	r3, r6
    6402:	2020      	movs	r0, #32
    6404:	3401      	adds	r4, #1
    6406:	40e3      	lsrs	r3, r4
    6408:	1b04      	subs	r4, r0, r4
    640a:	40a6      	lsls	r6, r4
    640c:	1e72      	subs	r2, r6, #1
    640e:	4196      	sbcs	r6, r2
    6410:	2400      	movs	r4, #0
    6412:	4333      	orrs	r3, r6
    6414:	e7bf      	b.n	6396 <__aeabi_fadd+0x2e>
    6416:	075a      	lsls	r2, r3, #29
    6418:	d1bf      	bne.n	639a <__aeabi_fadd+0x32>
    641a:	08df      	lsrs	r7, r3, #3
    641c:	0028      	movs	r0, r5
    641e:	2cff      	cmp	r4, #255	; 0xff
    6420:	d12f      	bne.n	6482 <__aeabi_fadd+0x11a>
    6422:	2f00      	cmp	r7, #0
    6424:	d100      	bne.n	6428 <__aeabi_fadd+0xc0>
    6426:	e087      	b.n	6538 <__aeabi_fadd+0x1d0>
    6428:	2280      	movs	r2, #128	; 0x80
    642a:	03d2      	lsls	r2, r2, #15
    642c:	0013      	movs	r3, r2
    642e:	433b      	orrs	r3, r7
    6430:	025b      	lsls	r3, r3, #9
    6432:	0a5b      	lsrs	r3, r3, #9
    6434:	24ff      	movs	r4, #255	; 0xff
    6436:	e7bf      	b.n	63b8 <__aeabi_fadd+0x50>
    6438:	1ba1      	subs	r1, r4, r6
    643a:	2900      	cmp	r1, #0
    643c:	dd49      	ble.n	64d2 <__aeabi_fadd+0x16a>
    643e:	2e00      	cmp	r6, #0
    6440:	d029      	beq.n	6496 <__aeabi_fadd+0x12e>
    6442:	2cff      	cmp	r4, #255	; 0xff
    6444:	d0a7      	beq.n	6396 <__aeabi_fadd+0x2e>
    6446:	2680      	movs	r6, #128	; 0x80
    6448:	04f6      	lsls	r6, r6, #19
    644a:	4332      	orrs	r2, r6
    644c:	291b      	cmp	r1, #27
    644e:	dd00      	ble.n	6452 <__aeabi_fadd+0xea>
    6450:	e08d      	b.n	656e <__aeabi_fadd+0x206>
    6452:	0017      	movs	r7, r2
    6454:	2620      	movs	r6, #32
    6456:	40cf      	lsrs	r7, r1
    6458:	1a71      	subs	r1, r6, r1
    645a:	408a      	lsls	r2, r1
    645c:	1e51      	subs	r1, r2, #1
    645e:	418a      	sbcs	r2, r1
    6460:	433a      	orrs	r2, r7
    6462:	189b      	adds	r3, r3, r2
    6464:	015a      	lsls	r2, r3, #5
    6466:	d5d6      	bpl.n	6416 <__aeabi_fadd+0xae>
    6468:	3401      	adds	r4, #1
    646a:	2cff      	cmp	r4, #255	; 0xff
    646c:	d064      	beq.n	6538 <__aeabi_fadd+0x1d0>
    646e:	2201      	movs	r2, #1
    6470:	4976      	ldr	r1, [pc, #472]	; (664c <__aeabi_fadd+0x2e4>)
    6472:	401a      	ands	r2, r3
    6474:	085b      	lsrs	r3, r3, #1
    6476:	400b      	ands	r3, r1
    6478:	4313      	orrs	r3, r2
    647a:	e78c      	b.n	6396 <__aeabi_fadd+0x2e>
    647c:	1e03      	subs	r3, r0, #0
    647e:	d1ca      	bne.n	6416 <__aeabi_fadd+0xae>
    6480:	2000      	movs	r0, #0
    6482:	027b      	lsls	r3, r7, #9
    6484:	0a5b      	lsrs	r3, r3, #9
    6486:	b2e4      	uxtb	r4, r4
    6488:	e796      	b.n	63b8 <__aeabi_fadd+0x50>
    648a:	3801      	subs	r0, #1
    648c:	2800      	cmp	r0, #0
    648e:	d0aa      	beq.n	63e6 <__aeabi_fadd+0x7e>
    6490:	2cff      	cmp	r4, #255	; 0xff
    6492:	d19d      	bne.n	63d0 <__aeabi_fadd+0x68>
    6494:	e77f      	b.n	6396 <__aeabi_fadd+0x2e>
    6496:	2a00      	cmp	r2, #0
    6498:	d100      	bne.n	649c <__aeabi_fadd+0x134>
    649a:	e77c      	b.n	6396 <__aeabi_fadd+0x2e>
    649c:	3901      	subs	r1, #1
    649e:	2900      	cmp	r1, #0
    64a0:	d0df      	beq.n	6462 <__aeabi_fadd+0xfa>
    64a2:	2cff      	cmp	r4, #255	; 0xff
    64a4:	d1d2      	bne.n	644c <__aeabi_fadd+0xe4>
    64a6:	e776      	b.n	6396 <__aeabi_fadd+0x2e>
    64a8:	2800      	cmp	r0, #0
    64aa:	d120      	bne.n	64ee <__aeabi_fadd+0x186>
    64ac:	1c60      	adds	r0, r4, #1
    64ae:	b2c0      	uxtb	r0, r0
    64b0:	2801      	cmp	r0, #1
    64b2:	dd53      	ble.n	655c <__aeabi_fadd+0x1f4>
    64b4:	2780      	movs	r7, #128	; 0x80
    64b6:	1a9e      	subs	r6, r3, r2
    64b8:	04ff      	lsls	r7, r7, #19
    64ba:	4037      	ands	r7, r6
    64bc:	d02f      	beq.n	651e <__aeabi_fadd+0x1b6>
    64be:	1ad6      	subs	r6, r2, r3
    64c0:	000d      	movs	r5, r1
    64c2:	e795      	b.n	63f0 <__aeabi_fadd+0x88>
    64c4:	0028      	movs	r0, r5
    64c6:	2300      	movs	r3, #0
    64c8:	e776      	b.n	63b8 <__aeabi_fadd+0x50>
    64ca:	4b61      	ldr	r3, [pc, #388]	; (6650 <__aeabi_fadd+0x2e8>)
    64cc:	1a24      	subs	r4, r4, r0
    64ce:	4033      	ands	r3, r6
    64d0:	e761      	b.n	6396 <__aeabi_fadd+0x2e>
    64d2:	2900      	cmp	r1, #0
    64d4:	d14d      	bne.n	6572 <__aeabi_fadd+0x20a>
    64d6:	1c61      	adds	r1, r4, #1
    64d8:	b2ce      	uxtb	r6, r1
    64da:	2e01      	cmp	r6, #1
    64dc:	dd2f      	ble.n	653e <__aeabi_fadd+0x1d6>
    64de:	29ff      	cmp	r1, #255	; 0xff
    64e0:	d02a      	beq.n	6538 <__aeabi_fadd+0x1d0>
    64e2:	189b      	adds	r3, r3, r2
    64e4:	085b      	lsrs	r3, r3, #1
    64e6:	000c      	movs	r4, r1
    64e8:	e755      	b.n	6396 <__aeabi_fadd+0x2e>
    64ea:	2201      	movs	r2, #1
    64ec:	e77b      	b.n	63e6 <__aeabi_fadd+0x7e>
    64ee:	2c00      	cmp	r4, #0
    64f0:	d11b      	bne.n	652a <__aeabi_fadd+0x1c2>
    64f2:	2b00      	cmp	r3, #0
    64f4:	d05b      	beq.n	65ae <__aeabi_fadd+0x246>
    64f6:	43c0      	mvns	r0, r0
    64f8:	2800      	cmp	r0, #0
    64fa:	d00c      	beq.n	6516 <__aeabi_fadd+0x1ae>
    64fc:	2eff      	cmp	r6, #255	; 0xff
    64fe:	d07e      	beq.n	65fe <__aeabi_fadd+0x296>
    6500:	281b      	cmp	r0, #27
    6502:	dd00      	ble.n	6506 <__aeabi_fadd+0x19e>
    6504:	e092      	b.n	662c <__aeabi_fadd+0x2c4>
    6506:	001d      	movs	r5, r3
    6508:	2420      	movs	r4, #32
    650a:	40c5      	lsrs	r5, r0
    650c:	1a20      	subs	r0, r4, r0
    650e:	4083      	lsls	r3, r0
    6510:	1e58      	subs	r0, r3, #1
    6512:	4183      	sbcs	r3, r0
    6514:	432b      	orrs	r3, r5
    6516:	1ad3      	subs	r3, r2, r3
    6518:	0034      	movs	r4, r6
    651a:	000d      	movs	r5, r1
    651c:	e764      	b.n	63e8 <__aeabi_fadd+0x80>
    651e:	2e00      	cmp	r6, #0
    6520:	d000      	beq.n	6524 <__aeabi_fadd+0x1bc>
    6522:	e765      	b.n	63f0 <__aeabi_fadd+0x88>
    6524:	2000      	movs	r0, #0
    6526:	2400      	movs	r4, #0
    6528:	e7ab      	b.n	6482 <__aeabi_fadd+0x11a>
    652a:	2eff      	cmp	r6, #255	; 0xff
    652c:	d067      	beq.n	65fe <__aeabi_fadd+0x296>
    652e:	2480      	movs	r4, #128	; 0x80
    6530:	04e4      	lsls	r4, r4, #19
    6532:	4240      	negs	r0, r0
    6534:	4323      	orrs	r3, r4
    6536:	e7e3      	b.n	6500 <__aeabi_fadd+0x198>
    6538:	24ff      	movs	r4, #255	; 0xff
    653a:	2300      	movs	r3, #0
    653c:	e73c      	b.n	63b8 <__aeabi_fadd+0x50>
    653e:	2c00      	cmp	r4, #0
    6540:	d161      	bne.n	6606 <__aeabi_fadd+0x29e>
    6542:	2b00      	cmp	r3, #0
    6544:	d07e      	beq.n	6644 <__aeabi_fadd+0x2dc>
    6546:	2a00      	cmp	r2, #0
    6548:	d100      	bne.n	654c <__aeabi_fadd+0x1e4>
    654a:	e724      	b.n	6396 <__aeabi_fadd+0x2e>
    654c:	189b      	adds	r3, r3, r2
    654e:	015a      	lsls	r2, r3, #5
    6550:	d400      	bmi.n	6554 <__aeabi_fadd+0x1ec>
    6552:	e760      	b.n	6416 <__aeabi_fadd+0xae>
    6554:	4a3e      	ldr	r2, [pc, #248]	; (6650 <__aeabi_fadd+0x2e8>)
    6556:	000c      	movs	r4, r1
    6558:	4013      	ands	r3, r2
    655a:	e71c      	b.n	6396 <__aeabi_fadd+0x2e>
    655c:	2c00      	cmp	r4, #0
    655e:	d11e      	bne.n	659e <__aeabi_fadd+0x236>
    6560:	2b00      	cmp	r3, #0
    6562:	d12f      	bne.n	65c4 <__aeabi_fadd+0x25c>
    6564:	2a00      	cmp	r2, #0
    6566:	d066      	beq.n	6636 <__aeabi_fadd+0x2ce>
    6568:	0013      	movs	r3, r2
    656a:	000d      	movs	r5, r1
    656c:	e713      	b.n	6396 <__aeabi_fadd+0x2e>
    656e:	2201      	movs	r2, #1
    6570:	e777      	b.n	6462 <__aeabi_fadd+0xfa>
    6572:	2c00      	cmp	r4, #0
    6574:	d11f      	bne.n	65b6 <__aeabi_fadd+0x24e>
    6576:	2b00      	cmp	r3, #0
    6578:	d05a      	beq.n	6630 <__aeabi_fadd+0x2c8>
    657a:	43c9      	mvns	r1, r1
    657c:	2900      	cmp	r1, #0
    657e:	d00b      	beq.n	6598 <__aeabi_fadd+0x230>
    6580:	2eff      	cmp	r6, #255	; 0xff
    6582:	d050      	beq.n	6626 <__aeabi_fadd+0x2be>
    6584:	291b      	cmp	r1, #27
    6586:	dc5f      	bgt.n	6648 <__aeabi_fadd+0x2e0>
    6588:	001f      	movs	r7, r3
    658a:	2420      	movs	r4, #32
    658c:	40cf      	lsrs	r7, r1
    658e:	1a61      	subs	r1, r4, r1
    6590:	408b      	lsls	r3, r1
    6592:	1e59      	subs	r1, r3, #1
    6594:	418b      	sbcs	r3, r1
    6596:	433b      	orrs	r3, r7
    6598:	189b      	adds	r3, r3, r2
    659a:	0034      	movs	r4, r6
    659c:	e762      	b.n	6464 <__aeabi_fadd+0xfc>
    659e:	2b00      	cmp	r3, #0
    65a0:	d11c      	bne.n	65dc <__aeabi_fadd+0x274>
    65a2:	2a00      	cmp	r2, #0
    65a4:	d04a      	beq.n	663c <__aeabi_fadd+0x2d4>
    65a6:	0013      	movs	r3, r2
    65a8:	000d      	movs	r5, r1
    65aa:	24ff      	movs	r4, #255	; 0xff
    65ac:	e6f3      	b.n	6396 <__aeabi_fadd+0x2e>
    65ae:	0013      	movs	r3, r2
    65b0:	0034      	movs	r4, r6
    65b2:	000d      	movs	r5, r1
    65b4:	e6ef      	b.n	6396 <__aeabi_fadd+0x2e>
    65b6:	2eff      	cmp	r6, #255	; 0xff
    65b8:	d035      	beq.n	6626 <__aeabi_fadd+0x2be>
    65ba:	2480      	movs	r4, #128	; 0x80
    65bc:	04e4      	lsls	r4, r4, #19
    65be:	4249      	negs	r1, r1
    65c0:	4323      	orrs	r3, r4
    65c2:	e7df      	b.n	6584 <__aeabi_fadd+0x21c>
    65c4:	2a00      	cmp	r2, #0
    65c6:	d100      	bne.n	65ca <__aeabi_fadd+0x262>
    65c8:	e6e5      	b.n	6396 <__aeabi_fadd+0x2e>
    65ca:	2780      	movs	r7, #128	; 0x80
    65cc:	1a98      	subs	r0, r3, r2
    65ce:	04ff      	lsls	r7, r7, #19
    65d0:	4007      	ands	r7, r0
    65d2:	d100      	bne.n	65d6 <__aeabi_fadd+0x26e>
    65d4:	e752      	b.n	647c <__aeabi_fadd+0x114>
    65d6:	1ad3      	subs	r3, r2, r3
    65d8:	000d      	movs	r5, r1
    65da:	e6dc      	b.n	6396 <__aeabi_fadd+0x2e>
    65dc:	24ff      	movs	r4, #255	; 0xff
    65de:	2a00      	cmp	r2, #0
    65e0:	d100      	bne.n	65e4 <__aeabi_fadd+0x27c>
    65e2:	e6d8      	b.n	6396 <__aeabi_fadd+0x2e>
    65e4:	2080      	movs	r0, #128	; 0x80
    65e6:	08db      	lsrs	r3, r3, #3
    65e8:	03c0      	lsls	r0, r0, #15
    65ea:	4203      	tst	r3, r0
    65ec:	d004      	beq.n	65f8 <__aeabi_fadd+0x290>
    65ee:	08d2      	lsrs	r2, r2, #3
    65f0:	4202      	tst	r2, r0
    65f2:	d101      	bne.n	65f8 <__aeabi_fadd+0x290>
    65f4:	0013      	movs	r3, r2
    65f6:	000d      	movs	r5, r1
    65f8:	00db      	lsls	r3, r3, #3
    65fa:	24ff      	movs	r4, #255	; 0xff
    65fc:	e6cb      	b.n	6396 <__aeabi_fadd+0x2e>
    65fe:	0013      	movs	r3, r2
    6600:	24ff      	movs	r4, #255	; 0xff
    6602:	000d      	movs	r5, r1
    6604:	e6c7      	b.n	6396 <__aeabi_fadd+0x2e>
    6606:	2b00      	cmp	r3, #0
    6608:	d00d      	beq.n	6626 <__aeabi_fadd+0x2be>
    660a:	24ff      	movs	r4, #255	; 0xff
    660c:	2a00      	cmp	r2, #0
    660e:	d100      	bne.n	6612 <__aeabi_fadd+0x2aa>
    6610:	e6c1      	b.n	6396 <__aeabi_fadd+0x2e>
    6612:	2180      	movs	r1, #128	; 0x80
    6614:	08db      	lsrs	r3, r3, #3
    6616:	03c9      	lsls	r1, r1, #15
    6618:	420b      	tst	r3, r1
    661a:	d0ed      	beq.n	65f8 <__aeabi_fadd+0x290>
    661c:	08d2      	lsrs	r2, r2, #3
    661e:	420a      	tst	r2, r1
    6620:	d1ea      	bne.n	65f8 <__aeabi_fadd+0x290>
    6622:	0013      	movs	r3, r2
    6624:	e7e8      	b.n	65f8 <__aeabi_fadd+0x290>
    6626:	0013      	movs	r3, r2
    6628:	24ff      	movs	r4, #255	; 0xff
    662a:	e6b4      	b.n	6396 <__aeabi_fadd+0x2e>
    662c:	2301      	movs	r3, #1
    662e:	e772      	b.n	6516 <__aeabi_fadd+0x1ae>
    6630:	0013      	movs	r3, r2
    6632:	0034      	movs	r4, r6
    6634:	e6af      	b.n	6396 <__aeabi_fadd+0x2e>
    6636:	2700      	movs	r7, #0
    6638:	2000      	movs	r0, #0
    663a:	e722      	b.n	6482 <__aeabi_fadd+0x11a>
    663c:	2780      	movs	r7, #128	; 0x80
    663e:	2000      	movs	r0, #0
    6640:	03ff      	lsls	r7, r7, #15
    6642:	e6f1      	b.n	6428 <__aeabi_fadd+0xc0>
    6644:	0013      	movs	r3, r2
    6646:	e6a6      	b.n	6396 <__aeabi_fadd+0x2e>
    6648:	2301      	movs	r3, #1
    664a:	e7a5      	b.n	6598 <__aeabi_fadd+0x230>
    664c:	7dffffff 	.word	0x7dffffff
    6650:	fbffffff 	.word	0xfbffffff

00006654 <__aeabi_fdiv>:
    6654:	b5f0      	push	{r4, r5, r6, r7, lr}
    6656:	4656      	mov	r6, sl
    6658:	4644      	mov	r4, r8
    665a:	465f      	mov	r7, fp
    665c:	464d      	mov	r5, r9
    665e:	b4f0      	push	{r4, r5, r6, r7}
    6660:	0244      	lsls	r4, r0, #9
    6662:	0046      	lsls	r6, r0, #1
    6664:	0fc7      	lsrs	r7, r0, #31
    6666:	b083      	sub	sp, #12
    6668:	4688      	mov	r8, r1
    666a:	0a65      	lsrs	r5, r4, #9
    666c:	0e36      	lsrs	r6, r6, #24
    666e:	46ba      	mov	sl, r7
    6670:	d03d      	beq.n	66ee <__aeabi_fdiv+0x9a>
    6672:	2eff      	cmp	r6, #255	; 0xff
    6674:	d022      	beq.n	66bc <__aeabi_fdiv+0x68>
    6676:	2300      	movs	r3, #0
    6678:	00ec      	lsls	r4, r5, #3
    667a:	2580      	movs	r5, #128	; 0x80
    667c:	4699      	mov	r9, r3
    667e:	469b      	mov	fp, r3
    6680:	04ed      	lsls	r5, r5, #19
    6682:	4325      	orrs	r5, r4
    6684:	3e7f      	subs	r6, #127	; 0x7f
    6686:	4643      	mov	r3, r8
    6688:	025c      	lsls	r4, r3, #9
    668a:	0058      	lsls	r0, r3, #1
    668c:	0fdb      	lsrs	r3, r3, #31
    668e:	0a64      	lsrs	r4, r4, #9
    6690:	0e00      	lsrs	r0, r0, #24
    6692:	4698      	mov	r8, r3
    6694:	d036      	beq.n	6704 <__aeabi_fdiv+0xb0>
    6696:	28ff      	cmp	r0, #255	; 0xff
    6698:	d030      	beq.n	66fc <__aeabi_fdiv+0xa8>
    669a:	2380      	movs	r3, #128	; 0x80
    669c:	2100      	movs	r1, #0
    669e:	00e4      	lsls	r4, r4, #3
    66a0:	04db      	lsls	r3, r3, #19
    66a2:	431c      	orrs	r4, r3
    66a4:	387f      	subs	r0, #127	; 0x7f
    66a6:	1a30      	subs	r0, r6, r0
    66a8:	9001      	str	r0, [sp, #4]
    66aa:	4648      	mov	r0, r9
    66ac:	4642      	mov	r2, r8
    66ae:	4308      	orrs	r0, r1
    66b0:	4e72      	ldr	r6, [pc, #456]	; (687c <__aeabi_fdiv+0x228>)
    66b2:	0080      	lsls	r0, r0, #2
    66b4:	5830      	ldr	r0, [r6, r0]
    66b6:	407a      	eors	r2, r7
    66b8:	0013      	movs	r3, r2
    66ba:	4687      	mov	pc, r0
    66bc:	2d00      	cmp	r5, #0
    66be:	d144      	bne.n	674a <__aeabi_fdiv+0xf6>
    66c0:	2308      	movs	r3, #8
    66c2:	4699      	mov	r9, r3
    66c4:	3b06      	subs	r3, #6
    66c6:	469b      	mov	fp, r3
    66c8:	e7dd      	b.n	6686 <__aeabi_fdiv+0x32>
    66ca:	2201      	movs	r2, #1
    66cc:	20ff      	movs	r0, #255	; 0xff
    66ce:	2400      	movs	r4, #0
    66d0:	401a      	ands	r2, r3
    66d2:	0264      	lsls	r4, r4, #9
    66d4:	05c3      	lsls	r3, r0, #23
    66d6:	0a64      	lsrs	r4, r4, #9
    66d8:	07d2      	lsls	r2, r2, #31
    66da:	431c      	orrs	r4, r3
    66dc:	4314      	orrs	r4, r2
    66de:	0020      	movs	r0, r4
    66e0:	b003      	add	sp, #12
    66e2:	bc3c      	pop	{r2, r3, r4, r5}
    66e4:	4690      	mov	r8, r2
    66e6:	4699      	mov	r9, r3
    66e8:	46a2      	mov	sl, r4
    66ea:	46ab      	mov	fp, r5
    66ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    66ee:	2d00      	cmp	r5, #0
    66f0:	d120      	bne.n	6734 <__aeabi_fdiv+0xe0>
    66f2:	2304      	movs	r3, #4
    66f4:	4699      	mov	r9, r3
    66f6:	3b03      	subs	r3, #3
    66f8:	469b      	mov	fp, r3
    66fa:	e7c4      	b.n	6686 <__aeabi_fdiv+0x32>
    66fc:	2c00      	cmp	r4, #0
    66fe:	d117      	bne.n	6730 <__aeabi_fdiv+0xdc>
    6700:	2102      	movs	r1, #2
    6702:	e002      	b.n	670a <__aeabi_fdiv+0xb6>
    6704:	2c00      	cmp	r4, #0
    6706:	d10a      	bne.n	671e <__aeabi_fdiv+0xca>
    6708:	2101      	movs	r1, #1
    670a:	1a32      	subs	r2, r6, r0
    670c:	9201      	str	r2, [sp, #4]
    670e:	464a      	mov	r2, r9
    6710:	4643      	mov	r3, r8
    6712:	430a      	orrs	r2, r1
    6714:	485a      	ldr	r0, [pc, #360]	; (6880 <__aeabi_fdiv+0x22c>)
    6716:	0092      	lsls	r2, r2, #2
    6718:	5882      	ldr	r2, [r0, r2]
    671a:	407b      	eors	r3, r7
    671c:	4697      	mov	pc, r2
    671e:	0020      	movs	r0, r4
    6720:	f002 f98c 	bl	8a3c <__clzsi2>
    6724:	1f43      	subs	r3, r0, #5
    6726:	3076      	adds	r0, #118	; 0x76
    6728:	409c      	lsls	r4, r3
    672a:	4240      	negs	r0, r0
    672c:	2100      	movs	r1, #0
    672e:	e7ba      	b.n	66a6 <__aeabi_fdiv+0x52>
    6730:	2103      	movs	r1, #3
    6732:	e7b8      	b.n	66a6 <__aeabi_fdiv+0x52>
    6734:	0028      	movs	r0, r5
    6736:	f002 f981 	bl	8a3c <__clzsi2>
    673a:	1f43      	subs	r3, r0, #5
    673c:	409d      	lsls	r5, r3
    673e:	2300      	movs	r3, #0
    6740:	3076      	adds	r0, #118	; 0x76
    6742:	4246      	negs	r6, r0
    6744:	4699      	mov	r9, r3
    6746:	469b      	mov	fp, r3
    6748:	e79d      	b.n	6686 <__aeabi_fdiv+0x32>
    674a:	230c      	movs	r3, #12
    674c:	4699      	mov	r9, r3
    674e:	3b09      	subs	r3, #9
    6750:	469b      	mov	fp, r3
    6752:	e798      	b.n	6686 <__aeabi_fdiv+0x32>
    6754:	2480      	movs	r4, #128	; 0x80
    6756:	2200      	movs	r2, #0
    6758:	03e4      	lsls	r4, r4, #15
    675a:	20ff      	movs	r0, #255	; 0xff
    675c:	e7b9      	b.n	66d2 <__aeabi_fdiv+0x7e>
    675e:	2400      	movs	r4, #0
    6760:	46c2      	mov	sl, r8
    6762:	468b      	mov	fp, r1
    6764:	465a      	mov	r2, fp
    6766:	4653      	mov	r3, sl
    6768:	2a02      	cmp	r2, #2
    676a:	d0ae      	beq.n	66ca <__aeabi_fdiv+0x76>
    676c:	2a03      	cmp	r2, #3
    676e:	d07d      	beq.n	686c <__aeabi_fdiv+0x218>
    6770:	2a01      	cmp	r2, #1
    6772:	d131      	bne.n	67d8 <__aeabi_fdiv+0x184>
    6774:	2201      	movs	r2, #1
    6776:	2000      	movs	r0, #0
    6778:	401a      	ands	r2, r3
    677a:	2400      	movs	r4, #0
    677c:	e7a9      	b.n	66d2 <__aeabi_fdiv+0x7e>
    677e:	2201      	movs	r2, #1
    6780:	1a10      	subs	r0, r2, r0
    6782:	281b      	cmp	r0, #27
    6784:	dd56      	ble.n	6834 <__aeabi_fdiv+0x1e0>
    6786:	401a      	ands	r2, r3
    6788:	2000      	movs	r0, #0
    678a:	2400      	movs	r4, #0
    678c:	e7a1      	b.n	66d2 <__aeabi_fdiv+0x7e>
    678e:	2380      	movs	r3, #128	; 0x80
    6790:	03db      	lsls	r3, r3, #15
    6792:	421d      	tst	r5, r3
    6794:	d14b      	bne.n	682e <__aeabi_fdiv+0x1da>
    6796:	2380      	movs	r3, #128	; 0x80
    6798:	03db      	lsls	r3, r3, #15
    679a:	432b      	orrs	r3, r5
    679c:	025c      	lsls	r4, r3, #9
    679e:	0a64      	lsrs	r4, r4, #9
    67a0:	003a      	movs	r2, r7
    67a2:	20ff      	movs	r0, #255	; 0xff
    67a4:	e795      	b.n	66d2 <__aeabi_fdiv+0x7e>
    67a6:	016d      	lsls	r5, r5, #5
    67a8:	0160      	lsls	r0, r4, #5
    67aa:	4285      	cmp	r5, r0
    67ac:	d230      	bcs.n	6810 <__aeabi_fdiv+0x1bc>
    67ae:	9a01      	ldr	r2, [sp, #4]
    67b0:	2400      	movs	r4, #0
    67b2:	3a01      	subs	r2, #1
    67b4:	9201      	str	r2, [sp, #4]
    67b6:	221b      	movs	r2, #27
    67b8:	2701      	movs	r7, #1
    67ba:	0029      	movs	r1, r5
    67bc:	0064      	lsls	r4, r4, #1
    67be:	006d      	lsls	r5, r5, #1
    67c0:	2900      	cmp	r1, #0
    67c2:	db01      	blt.n	67c8 <__aeabi_fdiv+0x174>
    67c4:	42a8      	cmp	r0, r5
    67c6:	d801      	bhi.n	67cc <__aeabi_fdiv+0x178>
    67c8:	1a2d      	subs	r5, r5, r0
    67ca:	433c      	orrs	r4, r7
    67cc:	3a01      	subs	r2, #1
    67ce:	2a00      	cmp	r2, #0
    67d0:	d1f3      	bne.n	67ba <__aeabi_fdiv+0x166>
    67d2:	1e6a      	subs	r2, r5, #1
    67d4:	4195      	sbcs	r5, r2
    67d6:	432c      	orrs	r4, r5
    67d8:	9801      	ldr	r0, [sp, #4]
    67da:	307f      	adds	r0, #127	; 0x7f
    67dc:	2800      	cmp	r0, #0
    67de:	ddce      	ble.n	677e <__aeabi_fdiv+0x12a>
    67e0:	0762      	lsls	r2, r4, #29
    67e2:	d004      	beq.n	67ee <__aeabi_fdiv+0x19a>
    67e4:	220f      	movs	r2, #15
    67e6:	4022      	ands	r2, r4
    67e8:	2a04      	cmp	r2, #4
    67ea:	d000      	beq.n	67ee <__aeabi_fdiv+0x19a>
    67ec:	3404      	adds	r4, #4
    67ee:	0122      	lsls	r2, r4, #4
    67f0:	d503      	bpl.n	67fa <__aeabi_fdiv+0x1a6>
    67f2:	4a24      	ldr	r2, [pc, #144]	; (6884 <__aeabi_fdiv+0x230>)
    67f4:	9801      	ldr	r0, [sp, #4]
    67f6:	4014      	ands	r4, r2
    67f8:	3080      	adds	r0, #128	; 0x80
    67fa:	28fe      	cmp	r0, #254	; 0xfe
    67fc:	dd00      	ble.n	6800 <__aeabi_fdiv+0x1ac>
    67fe:	e764      	b.n	66ca <__aeabi_fdiv+0x76>
    6800:	2201      	movs	r2, #1
    6802:	01a4      	lsls	r4, r4, #6
    6804:	0a64      	lsrs	r4, r4, #9
    6806:	b2c0      	uxtb	r0, r0
    6808:	401a      	ands	r2, r3
    680a:	e762      	b.n	66d2 <__aeabi_fdiv+0x7e>
    680c:	002c      	movs	r4, r5
    680e:	e7a9      	b.n	6764 <__aeabi_fdiv+0x110>
    6810:	1a2d      	subs	r5, r5, r0
    6812:	221a      	movs	r2, #26
    6814:	2401      	movs	r4, #1
    6816:	e7cf      	b.n	67b8 <__aeabi_fdiv+0x164>
    6818:	026b      	lsls	r3, r5, #9
    681a:	d5bc      	bpl.n	6796 <__aeabi_fdiv+0x142>
    681c:	2400      	movs	r4, #0
    681e:	2380      	movs	r3, #128	; 0x80
    6820:	03db      	lsls	r3, r3, #15
    6822:	431c      	orrs	r4, r3
    6824:	0264      	lsls	r4, r4, #9
    6826:	0a64      	lsrs	r4, r4, #9
    6828:	4642      	mov	r2, r8
    682a:	20ff      	movs	r0, #255	; 0xff
    682c:	e751      	b.n	66d2 <__aeabi_fdiv+0x7e>
    682e:	421c      	tst	r4, r3
    6830:	d1b3      	bne.n	679a <__aeabi_fdiv+0x146>
    6832:	e7f4      	b.n	681e <__aeabi_fdiv+0x1ca>
    6834:	0021      	movs	r1, r4
    6836:	2220      	movs	r2, #32
    6838:	40c1      	lsrs	r1, r0
    683a:	1a10      	subs	r0, r2, r0
    683c:	4084      	lsls	r4, r0
    683e:	1e62      	subs	r2, r4, #1
    6840:	4194      	sbcs	r4, r2
    6842:	430c      	orrs	r4, r1
    6844:	0762      	lsls	r2, r4, #29
    6846:	d004      	beq.n	6852 <__aeabi_fdiv+0x1fe>
    6848:	220f      	movs	r2, #15
    684a:	4022      	ands	r2, r4
    684c:	2a04      	cmp	r2, #4
    684e:	d000      	beq.n	6852 <__aeabi_fdiv+0x1fe>
    6850:	3404      	adds	r4, #4
    6852:	0162      	lsls	r2, r4, #5
    6854:	d504      	bpl.n	6860 <__aeabi_fdiv+0x20c>
    6856:	2201      	movs	r2, #1
    6858:	2001      	movs	r0, #1
    685a:	401a      	ands	r2, r3
    685c:	2400      	movs	r4, #0
    685e:	e738      	b.n	66d2 <__aeabi_fdiv+0x7e>
    6860:	2201      	movs	r2, #1
    6862:	01a4      	lsls	r4, r4, #6
    6864:	0a64      	lsrs	r4, r4, #9
    6866:	401a      	ands	r2, r3
    6868:	2000      	movs	r0, #0
    686a:	e732      	b.n	66d2 <__aeabi_fdiv+0x7e>
    686c:	2380      	movs	r3, #128	; 0x80
    686e:	03db      	lsls	r3, r3, #15
    6870:	431c      	orrs	r4, r3
    6872:	0264      	lsls	r4, r4, #9
    6874:	0a64      	lsrs	r4, r4, #9
    6876:	4652      	mov	r2, sl
    6878:	20ff      	movs	r0, #255	; 0xff
    687a:	e72a      	b.n	66d2 <__aeabi_fdiv+0x7e>
    687c:	00008d98 	.word	0x00008d98
    6880:	00008dd8 	.word	0x00008dd8
    6884:	f7ffffff 	.word	0xf7ffffff

00006888 <__eqsf2>:
    6888:	0243      	lsls	r3, r0, #9
    688a:	b570      	push	{r4, r5, r6, lr}
    688c:	0042      	lsls	r2, r0, #1
    688e:	004c      	lsls	r4, r1, #1
    6890:	0a5d      	lsrs	r5, r3, #9
    6892:	0fc3      	lsrs	r3, r0, #31
    6894:	0248      	lsls	r0, r1, #9
    6896:	0e12      	lsrs	r2, r2, #24
    6898:	0a46      	lsrs	r6, r0, #9
    689a:	0e24      	lsrs	r4, r4, #24
    689c:	0fc9      	lsrs	r1, r1, #31
    689e:	2aff      	cmp	r2, #255	; 0xff
    68a0:	d00f      	beq.n	68c2 <__eqsf2+0x3a>
    68a2:	2cff      	cmp	r4, #255	; 0xff
    68a4:	d011      	beq.n	68ca <__eqsf2+0x42>
    68a6:	2001      	movs	r0, #1
    68a8:	42a2      	cmp	r2, r4
    68aa:	d000      	beq.n	68ae <__eqsf2+0x26>
    68ac:	bd70      	pop	{r4, r5, r6, pc}
    68ae:	42b5      	cmp	r5, r6
    68b0:	d1fc      	bne.n	68ac <__eqsf2+0x24>
    68b2:	428b      	cmp	r3, r1
    68b4:	d00d      	beq.n	68d2 <__eqsf2+0x4a>
    68b6:	2a00      	cmp	r2, #0
    68b8:	d1f8      	bne.n	68ac <__eqsf2+0x24>
    68ba:	0028      	movs	r0, r5
    68bc:	1e43      	subs	r3, r0, #1
    68be:	4198      	sbcs	r0, r3
    68c0:	e7f4      	b.n	68ac <__eqsf2+0x24>
    68c2:	2001      	movs	r0, #1
    68c4:	2d00      	cmp	r5, #0
    68c6:	d1f1      	bne.n	68ac <__eqsf2+0x24>
    68c8:	e7eb      	b.n	68a2 <__eqsf2+0x1a>
    68ca:	2001      	movs	r0, #1
    68cc:	2e00      	cmp	r6, #0
    68ce:	d1ed      	bne.n	68ac <__eqsf2+0x24>
    68d0:	e7e9      	b.n	68a6 <__eqsf2+0x1e>
    68d2:	2000      	movs	r0, #0
    68d4:	e7ea      	b.n	68ac <__eqsf2+0x24>
    68d6:	46c0      	nop			; (mov r8, r8)

000068d8 <__gesf2>:
    68d8:	0243      	lsls	r3, r0, #9
    68da:	b5f0      	push	{r4, r5, r6, r7, lr}
    68dc:	0042      	lsls	r2, r0, #1
    68de:	0a5d      	lsrs	r5, r3, #9
    68e0:	0fc3      	lsrs	r3, r0, #31
    68e2:	0248      	lsls	r0, r1, #9
    68e4:	0a44      	lsrs	r4, r0, #9
    68e6:	0048      	lsls	r0, r1, #1
    68e8:	0e12      	lsrs	r2, r2, #24
    68ea:	0e00      	lsrs	r0, r0, #24
    68ec:	0fc9      	lsrs	r1, r1, #31
    68ee:	2aff      	cmp	r2, #255	; 0xff
    68f0:	d01f      	beq.n	6932 <__gesf2+0x5a>
    68f2:	28ff      	cmp	r0, #255	; 0xff
    68f4:	d022      	beq.n	693c <__gesf2+0x64>
    68f6:	2a00      	cmp	r2, #0
    68f8:	d109      	bne.n	690e <__gesf2+0x36>
    68fa:	426e      	negs	r6, r5
    68fc:	416e      	adcs	r6, r5
    68fe:	2800      	cmp	r0, #0
    6900:	d10f      	bne.n	6922 <__gesf2+0x4a>
    6902:	2c00      	cmp	r4, #0
    6904:	d10d      	bne.n	6922 <__gesf2+0x4a>
    6906:	2000      	movs	r0, #0
    6908:	2d00      	cmp	r5, #0
    690a:	d009      	beq.n	6920 <__gesf2+0x48>
    690c:	e005      	b.n	691a <__gesf2+0x42>
    690e:	2800      	cmp	r0, #0
    6910:	d101      	bne.n	6916 <__gesf2+0x3e>
    6912:	2c00      	cmp	r4, #0
    6914:	d001      	beq.n	691a <__gesf2+0x42>
    6916:	428b      	cmp	r3, r1
    6918:	d013      	beq.n	6942 <__gesf2+0x6a>
    691a:	4258      	negs	r0, r3
    691c:	2301      	movs	r3, #1
    691e:	4318      	orrs	r0, r3
    6920:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6922:	2e00      	cmp	r6, #0
    6924:	d0f7      	beq.n	6916 <__gesf2+0x3e>
    6926:	4248      	negs	r0, r1
    6928:	4141      	adcs	r1, r0
    692a:	2001      	movs	r0, #1
    692c:	4249      	negs	r1, r1
    692e:	4308      	orrs	r0, r1
    6930:	e7f6      	b.n	6920 <__gesf2+0x48>
    6932:	2d00      	cmp	r5, #0
    6934:	d0dd      	beq.n	68f2 <__gesf2+0x1a>
    6936:	2002      	movs	r0, #2
    6938:	4240      	negs	r0, r0
    693a:	e7f1      	b.n	6920 <__gesf2+0x48>
    693c:	2c00      	cmp	r4, #0
    693e:	d0da      	beq.n	68f6 <__gesf2+0x1e>
    6940:	e7f9      	b.n	6936 <__gesf2+0x5e>
    6942:	4282      	cmp	r2, r0
    6944:	dce9      	bgt.n	691a <__gesf2+0x42>
    6946:	db04      	blt.n	6952 <__gesf2+0x7a>
    6948:	42a5      	cmp	r5, r4
    694a:	d8e6      	bhi.n	691a <__gesf2+0x42>
    694c:	2000      	movs	r0, #0
    694e:	42a5      	cmp	r5, r4
    6950:	d2e6      	bcs.n	6920 <__gesf2+0x48>
    6952:	4258      	negs	r0, r3
    6954:	4143      	adcs	r3, r0
    6956:	2001      	movs	r0, #1
    6958:	425b      	negs	r3, r3
    695a:	4318      	orrs	r0, r3
    695c:	e7e0      	b.n	6920 <__gesf2+0x48>
    695e:	46c0      	nop			; (mov r8, r8)

00006960 <__lesf2>:
    6960:	0243      	lsls	r3, r0, #9
    6962:	b5f0      	push	{r4, r5, r6, r7, lr}
    6964:	0042      	lsls	r2, r0, #1
    6966:	004c      	lsls	r4, r1, #1
    6968:	0a5e      	lsrs	r6, r3, #9
    696a:	0fc3      	lsrs	r3, r0, #31
    696c:	0248      	lsls	r0, r1, #9
    696e:	0e12      	lsrs	r2, r2, #24
    6970:	0a45      	lsrs	r5, r0, #9
    6972:	0e24      	lsrs	r4, r4, #24
    6974:	0fc9      	lsrs	r1, r1, #31
    6976:	2aff      	cmp	r2, #255	; 0xff
    6978:	d017      	beq.n	69aa <__lesf2+0x4a>
    697a:	2cff      	cmp	r4, #255	; 0xff
    697c:	d019      	beq.n	69b2 <__lesf2+0x52>
    697e:	2a00      	cmp	r2, #0
    6980:	d10b      	bne.n	699a <__lesf2+0x3a>
    6982:	4270      	negs	r0, r6
    6984:	4170      	adcs	r0, r6
    6986:	2c00      	cmp	r4, #0
    6988:	d017      	beq.n	69ba <__lesf2+0x5a>
    698a:	2800      	cmp	r0, #0
    698c:	d007      	beq.n	699e <__lesf2+0x3e>
    698e:	4248      	negs	r0, r1
    6990:	4141      	adcs	r1, r0
    6992:	2001      	movs	r0, #1
    6994:	4249      	negs	r1, r1
    6996:	4308      	orrs	r0, r1
    6998:	bdf0      	pop	{r4, r5, r6, r7, pc}
    699a:	2c00      	cmp	r4, #0
    699c:	d013      	beq.n	69c6 <__lesf2+0x66>
    699e:	428b      	cmp	r3, r1
    69a0:	d014      	beq.n	69cc <__lesf2+0x6c>
    69a2:	4258      	negs	r0, r3
    69a4:	2301      	movs	r3, #1
    69a6:	4318      	orrs	r0, r3
    69a8:	e7f6      	b.n	6998 <__lesf2+0x38>
    69aa:	2002      	movs	r0, #2
    69ac:	2e00      	cmp	r6, #0
    69ae:	d1f3      	bne.n	6998 <__lesf2+0x38>
    69b0:	e7e3      	b.n	697a <__lesf2+0x1a>
    69b2:	2002      	movs	r0, #2
    69b4:	2d00      	cmp	r5, #0
    69b6:	d1ef      	bne.n	6998 <__lesf2+0x38>
    69b8:	e7e1      	b.n	697e <__lesf2+0x1e>
    69ba:	2d00      	cmp	r5, #0
    69bc:	d1e5      	bne.n	698a <__lesf2+0x2a>
    69be:	2000      	movs	r0, #0
    69c0:	2e00      	cmp	r6, #0
    69c2:	d0e9      	beq.n	6998 <__lesf2+0x38>
    69c4:	e7ed      	b.n	69a2 <__lesf2+0x42>
    69c6:	2d00      	cmp	r5, #0
    69c8:	d1e9      	bne.n	699e <__lesf2+0x3e>
    69ca:	e7ea      	b.n	69a2 <__lesf2+0x42>
    69cc:	42a2      	cmp	r2, r4
    69ce:	dce8      	bgt.n	69a2 <__lesf2+0x42>
    69d0:	db04      	blt.n	69dc <__lesf2+0x7c>
    69d2:	42ae      	cmp	r6, r5
    69d4:	d8e5      	bhi.n	69a2 <__lesf2+0x42>
    69d6:	2000      	movs	r0, #0
    69d8:	42ae      	cmp	r6, r5
    69da:	d2dd      	bcs.n	6998 <__lesf2+0x38>
    69dc:	4258      	negs	r0, r3
    69de:	4143      	adcs	r3, r0
    69e0:	2001      	movs	r0, #1
    69e2:	425b      	negs	r3, r3
    69e4:	4318      	orrs	r0, r3
    69e6:	e7d7      	b.n	6998 <__lesf2+0x38>

000069e8 <__aeabi_fmul>:
    69e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    69ea:	4657      	mov	r7, sl
    69ec:	464e      	mov	r6, r9
    69ee:	4645      	mov	r5, r8
    69f0:	0043      	lsls	r3, r0, #1
    69f2:	b4e0      	push	{r5, r6, r7}
    69f4:	0246      	lsls	r6, r0, #9
    69f6:	4688      	mov	r8, r1
    69f8:	0a76      	lsrs	r6, r6, #9
    69fa:	0e1f      	lsrs	r7, r3, #24
    69fc:	0fc4      	lsrs	r4, r0, #31
    69fe:	2f00      	cmp	r7, #0
    6a00:	d047      	beq.n	6a92 <__aeabi_fmul+0xaa>
    6a02:	2fff      	cmp	r7, #255	; 0xff
    6a04:	d025      	beq.n	6a52 <__aeabi_fmul+0x6a>
    6a06:	2300      	movs	r3, #0
    6a08:	2580      	movs	r5, #128	; 0x80
    6a0a:	469a      	mov	sl, r3
    6a0c:	4699      	mov	r9, r3
    6a0e:	00f6      	lsls	r6, r6, #3
    6a10:	04ed      	lsls	r5, r5, #19
    6a12:	432e      	orrs	r6, r5
    6a14:	3f7f      	subs	r7, #127	; 0x7f
    6a16:	4643      	mov	r3, r8
    6a18:	4642      	mov	r2, r8
    6a1a:	025d      	lsls	r5, r3, #9
    6a1c:	0fd2      	lsrs	r2, r2, #31
    6a1e:	005b      	lsls	r3, r3, #1
    6a20:	0a6d      	lsrs	r5, r5, #9
    6a22:	0e1b      	lsrs	r3, r3, #24
    6a24:	4690      	mov	r8, r2
    6a26:	d040      	beq.n	6aaa <__aeabi_fmul+0xc2>
    6a28:	2bff      	cmp	r3, #255	; 0xff
    6a2a:	d039      	beq.n	6aa0 <__aeabi_fmul+0xb8>
    6a2c:	2280      	movs	r2, #128	; 0x80
    6a2e:	2000      	movs	r0, #0
    6a30:	00ed      	lsls	r5, r5, #3
    6a32:	04d2      	lsls	r2, r2, #19
    6a34:	4315      	orrs	r5, r2
    6a36:	3b7f      	subs	r3, #127	; 0x7f
    6a38:	18fb      	adds	r3, r7, r3
    6a3a:	4642      	mov	r2, r8
    6a3c:	4657      	mov	r7, sl
    6a3e:	1c59      	adds	r1, r3, #1
    6a40:	4062      	eors	r2, r4
    6a42:	468c      	mov	ip, r1
    6a44:	4307      	orrs	r7, r0
    6a46:	2f0f      	cmp	r7, #15
    6a48:	d85c      	bhi.n	6b04 <__aeabi_fmul+0x11c>
    6a4a:	496f      	ldr	r1, [pc, #444]	; (6c08 <__aeabi_fmul+0x220>)
    6a4c:	00bf      	lsls	r7, r7, #2
    6a4e:	59c9      	ldr	r1, [r1, r7]
    6a50:	468f      	mov	pc, r1
    6a52:	2e00      	cmp	r6, #0
    6a54:	d145      	bne.n	6ae2 <__aeabi_fmul+0xfa>
    6a56:	2308      	movs	r3, #8
    6a58:	469a      	mov	sl, r3
    6a5a:	3b06      	subs	r3, #6
    6a5c:	4699      	mov	r9, r3
    6a5e:	e7da      	b.n	6a16 <__aeabi_fmul+0x2e>
    6a60:	4642      	mov	r2, r8
    6a62:	2802      	cmp	r0, #2
    6a64:	d02d      	beq.n	6ac2 <__aeabi_fmul+0xda>
    6a66:	2803      	cmp	r0, #3
    6a68:	d100      	bne.n	6a6c <__aeabi_fmul+0x84>
    6a6a:	e0c3      	b.n	6bf4 <__aeabi_fmul+0x20c>
    6a6c:	2801      	cmp	r0, #1
    6a6e:	d000      	beq.n	6a72 <__aeabi_fmul+0x8a>
    6a70:	e0a2      	b.n	6bb8 <__aeabi_fmul+0x1d0>
    6a72:	2500      	movs	r5, #0
    6a74:	2600      	movs	r6, #0
    6a76:	4002      	ands	r2, r0
    6a78:	b2d4      	uxtb	r4, r2
    6a7a:	0276      	lsls	r6, r6, #9
    6a7c:	05ed      	lsls	r5, r5, #23
    6a7e:	0a76      	lsrs	r6, r6, #9
    6a80:	432e      	orrs	r6, r5
    6a82:	07e4      	lsls	r4, r4, #31
    6a84:	4326      	orrs	r6, r4
    6a86:	0030      	movs	r0, r6
    6a88:	bc1c      	pop	{r2, r3, r4}
    6a8a:	4690      	mov	r8, r2
    6a8c:	4699      	mov	r9, r3
    6a8e:	46a2      	mov	sl, r4
    6a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a92:	2e00      	cmp	r6, #0
    6a94:	d11a      	bne.n	6acc <__aeabi_fmul+0xe4>
    6a96:	2304      	movs	r3, #4
    6a98:	469a      	mov	sl, r3
    6a9a:	3b03      	subs	r3, #3
    6a9c:	4699      	mov	r9, r3
    6a9e:	e7ba      	b.n	6a16 <__aeabi_fmul+0x2e>
    6aa0:	002a      	movs	r2, r5
    6aa2:	1e51      	subs	r1, r2, #1
    6aa4:	418a      	sbcs	r2, r1
    6aa6:	1c90      	adds	r0, r2, #2
    6aa8:	e7c6      	b.n	6a38 <__aeabi_fmul+0x50>
    6aaa:	2001      	movs	r0, #1
    6aac:	2d00      	cmp	r5, #0
    6aae:	d0c3      	beq.n	6a38 <__aeabi_fmul+0x50>
    6ab0:	0028      	movs	r0, r5
    6ab2:	f001 ffc3 	bl	8a3c <__clzsi2>
    6ab6:	1f43      	subs	r3, r0, #5
    6ab8:	3076      	adds	r0, #118	; 0x76
    6aba:	409d      	lsls	r5, r3
    6abc:	4243      	negs	r3, r0
    6abe:	2000      	movs	r0, #0
    6ac0:	e7ba      	b.n	6a38 <__aeabi_fmul+0x50>
    6ac2:	2401      	movs	r4, #1
    6ac4:	25ff      	movs	r5, #255	; 0xff
    6ac6:	4014      	ands	r4, r2
    6ac8:	2600      	movs	r6, #0
    6aca:	e7d6      	b.n	6a7a <__aeabi_fmul+0x92>
    6acc:	0030      	movs	r0, r6
    6ace:	f001 ffb5 	bl	8a3c <__clzsi2>
    6ad2:	1f43      	subs	r3, r0, #5
    6ad4:	409e      	lsls	r6, r3
    6ad6:	2300      	movs	r3, #0
    6ad8:	3076      	adds	r0, #118	; 0x76
    6ada:	4247      	negs	r7, r0
    6adc:	469a      	mov	sl, r3
    6ade:	4699      	mov	r9, r3
    6ae0:	e799      	b.n	6a16 <__aeabi_fmul+0x2e>
    6ae2:	230c      	movs	r3, #12
    6ae4:	469a      	mov	sl, r3
    6ae6:	3b09      	subs	r3, #9
    6ae8:	4699      	mov	r9, r3
    6aea:	e794      	b.n	6a16 <__aeabi_fmul+0x2e>
    6aec:	2680      	movs	r6, #128	; 0x80
    6aee:	2400      	movs	r4, #0
    6af0:	03f6      	lsls	r6, r6, #15
    6af2:	25ff      	movs	r5, #255	; 0xff
    6af4:	e7c1      	b.n	6a7a <__aeabi_fmul+0x92>
    6af6:	0035      	movs	r5, r6
    6af8:	4648      	mov	r0, r9
    6afa:	e7b2      	b.n	6a62 <__aeabi_fmul+0x7a>
    6afc:	0035      	movs	r5, r6
    6afe:	0022      	movs	r2, r4
    6b00:	4648      	mov	r0, r9
    6b02:	e7ae      	b.n	6a62 <__aeabi_fmul+0x7a>
    6b04:	0429      	lsls	r1, r5, #16
    6b06:	0c09      	lsrs	r1, r1, #16
    6b08:	0008      	movs	r0, r1
    6b0a:	0c37      	lsrs	r7, r6, #16
    6b0c:	0436      	lsls	r6, r6, #16
    6b0e:	0c36      	lsrs	r6, r6, #16
    6b10:	0c2c      	lsrs	r4, r5, #16
    6b12:	4379      	muls	r1, r7
    6b14:	4370      	muls	r0, r6
    6b16:	4367      	muls	r7, r4
    6b18:	4374      	muls	r4, r6
    6b1a:	0c06      	lsrs	r6, r0, #16
    6b1c:	1864      	adds	r4, r4, r1
    6b1e:	1936      	adds	r6, r6, r4
    6b20:	42b1      	cmp	r1, r6
    6b22:	d903      	bls.n	6b2c <__aeabi_fmul+0x144>
    6b24:	2180      	movs	r1, #128	; 0x80
    6b26:	0249      	lsls	r1, r1, #9
    6b28:	4688      	mov	r8, r1
    6b2a:	4447      	add	r7, r8
    6b2c:	0400      	lsls	r0, r0, #16
    6b2e:	0c00      	lsrs	r0, r0, #16
    6b30:	0431      	lsls	r1, r6, #16
    6b32:	1809      	adds	r1, r1, r0
    6b34:	018d      	lsls	r5, r1, #6
    6b36:	1e68      	subs	r0, r5, #1
    6b38:	4185      	sbcs	r5, r0
    6b3a:	0e89      	lsrs	r1, r1, #26
    6b3c:	4329      	orrs	r1, r5
    6b3e:	0c35      	lsrs	r5, r6, #16
    6b40:	19ed      	adds	r5, r5, r7
    6b42:	01ad      	lsls	r5, r5, #6
    6b44:	430d      	orrs	r5, r1
    6b46:	0129      	lsls	r1, r5, #4
    6b48:	d504      	bpl.n	6b54 <__aeabi_fmul+0x16c>
    6b4a:	2301      	movs	r3, #1
    6b4c:	0869      	lsrs	r1, r5, #1
    6b4e:	401d      	ands	r5, r3
    6b50:	4663      	mov	r3, ip
    6b52:	430d      	orrs	r5, r1
    6b54:	0019      	movs	r1, r3
    6b56:	317f      	adds	r1, #127	; 0x7f
    6b58:	2900      	cmp	r1, #0
    6b5a:	dd25      	ble.n	6ba8 <__aeabi_fmul+0x1c0>
    6b5c:	0768      	lsls	r0, r5, #29
    6b5e:	d004      	beq.n	6b6a <__aeabi_fmul+0x182>
    6b60:	200f      	movs	r0, #15
    6b62:	4028      	ands	r0, r5
    6b64:	2804      	cmp	r0, #4
    6b66:	d000      	beq.n	6b6a <__aeabi_fmul+0x182>
    6b68:	3504      	adds	r5, #4
    6b6a:	0128      	lsls	r0, r5, #4
    6b6c:	d503      	bpl.n	6b76 <__aeabi_fmul+0x18e>
    6b6e:	4927      	ldr	r1, [pc, #156]	; (6c0c <__aeabi_fmul+0x224>)
    6b70:	3380      	adds	r3, #128	; 0x80
    6b72:	400d      	ands	r5, r1
    6b74:	0019      	movs	r1, r3
    6b76:	29fe      	cmp	r1, #254	; 0xfe
    6b78:	dca3      	bgt.n	6ac2 <__aeabi_fmul+0xda>
    6b7a:	2401      	movs	r4, #1
    6b7c:	01ad      	lsls	r5, r5, #6
    6b7e:	0a6e      	lsrs	r6, r5, #9
    6b80:	4014      	ands	r4, r2
    6b82:	b2cd      	uxtb	r5, r1
    6b84:	e779      	b.n	6a7a <__aeabi_fmul+0x92>
    6b86:	2080      	movs	r0, #128	; 0x80
    6b88:	03c0      	lsls	r0, r0, #15
    6b8a:	4206      	tst	r6, r0
    6b8c:	d007      	beq.n	6b9e <__aeabi_fmul+0x1b6>
    6b8e:	4205      	tst	r5, r0
    6b90:	d105      	bne.n	6b9e <__aeabi_fmul+0x1b6>
    6b92:	4328      	orrs	r0, r5
    6b94:	0246      	lsls	r6, r0, #9
    6b96:	0a76      	lsrs	r6, r6, #9
    6b98:	4644      	mov	r4, r8
    6b9a:	25ff      	movs	r5, #255	; 0xff
    6b9c:	e76d      	b.n	6a7a <__aeabi_fmul+0x92>
    6b9e:	4306      	orrs	r6, r0
    6ba0:	0276      	lsls	r6, r6, #9
    6ba2:	0a76      	lsrs	r6, r6, #9
    6ba4:	25ff      	movs	r5, #255	; 0xff
    6ba6:	e768      	b.n	6a7a <__aeabi_fmul+0x92>
    6ba8:	2401      	movs	r4, #1
    6baa:	1a61      	subs	r1, r4, r1
    6bac:	291b      	cmp	r1, #27
    6bae:	dd05      	ble.n	6bbc <__aeabi_fmul+0x1d4>
    6bb0:	4014      	ands	r4, r2
    6bb2:	2500      	movs	r5, #0
    6bb4:	2600      	movs	r6, #0
    6bb6:	e760      	b.n	6a7a <__aeabi_fmul+0x92>
    6bb8:	4663      	mov	r3, ip
    6bba:	e7cb      	b.n	6b54 <__aeabi_fmul+0x16c>
    6bbc:	002e      	movs	r6, r5
    6bbe:	2320      	movs	r3, #32
    6bc0:	40ce      	lsrs	r6, r1
    6bc2:	1a59      	subs	r1, r3, r1
    6bc4:	408d      	lsls	r5, r1
    6bc6:	1e6b      	subs	r3, r5, #1
    6bc8:	419d      	sbcs	r5, r3
    6bca:	432e      	orrs	r6, r5
    6bcc:	0773      	lsls	r3, r6, #29
    6bce:	d004      	beq.n	6bda <__aeabi_fmul+0x1f2>
    6bd0:	230f      	movs	r3, #15
    6bd2:	4033      	ands	r3, r6
    6bd4:	2b04      	cmp	r3, #4
    6bd6:	d000      	beq.n	6bda <__aeabi_fmul+0x1f2>
    6bd8:	3604      	adds	r6, #4
    6bda:	0173      	lsls	r3, r6, #5
    6bdc:	d504      	bpl.n	6be8 <__aeabi_fmul+0x200>
    6bde:	2401      	movs	r4, #1
    6be0:	2501      	movs	r5, #1
    6be2:	4014      	ands	r4, r2
    6be4:	2600      	movs	r6, #0
    6be6:	e748      	b.n	6a7a <__aeabi_fmul+0x92>
    6be8:	2401      	movs	r4, #1
    6bea:	01b6      	lsls	r6, r6, #6
    6bec:	0a76      	lsrs	r6, r6, #9
    6bee:	4014      	ands	r4, r2
    6bf0:	2500      	movs	r5, #0
    6bf2:	e742      	b.n	6a7a <__aeabi_fmul+0x92>
    6bf4:	2680      	movs	r6, #128	; 0x80
    6bf6:	2401      	movs	r4, #1
    6bf8:	03f6      	lsls	r6, r6, #15
    6bfa:	432e      	orrs	r6, r5
    6bfc:	0276      	lsls	r6, r6, #9
    6bfe:	0a76      	lsrs	r6, r6, #9
    6c00:	4014      	ands	r4, r2
    6c02:	25ff      	movs	r5, #255	; 0xff
    6c04:	e739      	b.n	6a7a <__aeabi_fmul+0x92>
    6c06:	46c0      	nop			; (mov r8, r8)
    6c08:	00008e18 	.word	0x00008e18
    6c0c:	f7ffffff 	.word	0xf7ffffff

00006c10 <__aeabi_i2f>:
    6c10:	b570      	push	{r4, r5, r6, lr}
    6c12:	2800      	cmp	r0, #0
    6c14:	d030      	beq.n	6c78 <__aeabi_i2f+0x68>
    6c16:	17c3      	asrs	r3, r0, #31
    6c18:	18c5      	adds	r5, r0, r3
    6c1a:	405d      	eors	r5, r3
    6c1c:	0fc4      	lsrs	r4, r0, #31
    6c1e:	0028      	movs	r0, r5
    6c20:	f001 ff0c 	bl	8a3c <__clzsi2>
    6c24:	239e      	movs	r3, #158	; 0x9e
    6c26:	1a1b      	subs	r3, r3, r0
    6c28:	2b96      	cmp	r3, #150	; 0x96
    6c2a:	dc0d      	bgt.n	6c48 <__aeabi_i2f+0x38>
    6c2c:	2296      	movs	r2, #150	; 0x96
    6c2e:	1ad2      	subs	r2, r2, r3
    6c30:	4095      	lsls	r5, r2
    6c32:	026a      	lsls	r2, r5, #9
    6c34:	0a52      	lsrs	r2, r2, #9
    6c36:	b2d8      	uxtb	r0, r3
    6c38:	0252      	lsls	r2, r2, #9
    6c3a:	05c0      	lsls	r0, r0, #23
    6c3c:	0a52      	lsrs	r2, r2, #9
    6c3e:	07e4      	lsls	r4, r4, #31
    6c40:	4302      	orrs	r2, r0
    6c42:	4322      	orrs	r2, r4
    6c44:	0010      	movs	r0, r2
    6c46:	bd70      	pop	{r4, r5, r6, pc}
    6c48:	2b99      	cmp	r3, #153	; 0x99
    6c4a:	dc19      	bgt.n	6c80 <__aeabi_i2f+0x70>
    6c4c:	2299      	movs	r2, #153	; 0x99
    6c4e:	1ad2      	subs	r2, r2, r3
    6c50:	4095      	lsls	r5, r2
    6c52:	4a12      	ldr	r2, [pc, #72]	; (6c9c <__aeabi_i2f+0x8c>)
    6c54:	402a      	ands	r2, r5
    6c56:	0769      	lsls	r1, r5, #29
    6c58:	d004      	beq.n	6c64 <__aeabi_i2f+0x54>
    6c5a:	210f      	movs	r1, #15
    6c5c:	400d      	ands	r5, r1
    6c5e:	2d04      	cmp	r5, #4
    6c60:	d000      	beq.n	6c64 <__aeabi_i2f+0x54>
    6c62:	3204      	adds	r2, #4
    6c64:	0151      	lsls	r1, r2, #5
    6c66:	d503      	bpl.n	6c70 <__aeabi_i2f+0x60>
    6c68:	4b0c      	ldr	r3, [pc, #48]	; (6c9c <__aeabi_i2f+0x8c>)
    6c6a:	401a      	ands	r2, r3
    6c6c:	239f      	movs	r3, #159	; 0x9f
    6c6e:	1a1b      	subs	r3, r3, r0
    6c70:	0192      	lsls	r2, r2, #6
    6c72:	0a52      	lsrs	r2, r2, #9
    6c74:	b2d8      	uxtb	r0, r3
    6c76:	e7df      	b.n	6c38 <__aeabi_i2f+0x28>
    6c78:	2400      	movs	r4, #0
    6c7a:	2000      	movs	r0, #0
    6c7c:	2200      	movs	r2, #0
    6c7e:	e7db      	b.n	6c38 <__aeabi_i2f+0x28>
    6c80:	2205      	movs	r2, #5
    6c82:	002e      	movs	r6, r5
    6c84:	1a12      	subs	r2, r2, r0
    6c86:	21b9      	movs	r1, #185	; 0xb9
    6c88:	40d6      	lsrs	r6, r2
    6c8a:	002a      	movs	r2, r5
    6c8c:	1ac9      	subs	r1, r1, r3
    6c8e:	408a      	lsls	r2, r1
    6c90:	1e55      	subs	r5, r2, #1
    6c92:	41aa      	sbcs	r2, r5
    6c94:	0035      	movs	r5, r6
    6c96:	4315      	orrs	r5, r2
    6c98:	e7db      	b.n	6c52 <__aeabi_i2f+0x42>
    6c9a:	46c0      	nop			; (mov r8, r8)
    6c9c:	fbffffff 	.word	0xfbffffff

00006ca0 <__aeabi_dadd>:
    6ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ca2:	4656      	mov	r6, sl
    6ca4:	465f      	mov	r7, fp
    6ca6:	464d      	mov	r5, r9
    6ca8:	4644      	mov	r4, r8
    6caa:	b4f0      	push	{r4, r5, r6, r7}
    6cac:	000f      	movs	r7, r1
    6cae:	0ffd      	lsrs	r5, r7, #31
    6cb0:	46aa      	mov	sl, r5
    6cb2:	0309      	lsls	r1, r1, #12
    6cb4:	007c      	lsls	r4, r7, #1
    6cb6:	002e      	movs	r6, r5
    6cb8:	005f      	lsls	r7, r3, #1
    6cba:	0f45      	lsrs	r5, r0, #29
    6cbc:	0a49      	lsrs	r1, r1, #9
    6cbe:	0d7f      	lsrs	r7, r7, #21
    6cc0:	4329      	orrs	r1, r5
    6cc2:	00c5      	lsls	r5, r0, #3
    6cc4:	0318      	lsls	r0, r3, #12
    6cc6:	46bc      	mov	ip, r7
    6cc8:	0a40      	lsrs	r0, r0, #9
    6cca:	0f57      	lsrs	r7, r2, #29
    6ccc:	0d64      	lsrs	r4, r4, #21
    6cce:	0fdb      	lsrs	r3, r3, #31
    6cd0:	4338      	orrs	r0, r7
    6cd2:	00d2      	lsls	r2, r2, #3
    6cd4:	459a      	cmp	sl, r3
    6cd6:	d100      	bne.n	6cda <__aeabi_dadd+0x3a>
    6cd8:	e0aa      	b.n	6e30 <__aeabi_dadd+0x190>
    6cda:	4666      	mov	r6, ip
    6cdc:	1ba6      	subs	r6, r4, r6
    6cde:	2e00      	cmp	r6, #0
    6ce0:	dc00      	bgt.n	6ce4 <__aeabi_dadd+0x44>
    6ce2:	e0ff      	b.n	6ee4 <__aeabi_dadd+0x244>
    6ce4:	4663      	mov	r3, ip
    6ce6:	2b00      	cmp	r3, #0
    6ce8:	d139      	bne.n	6d5e <__aeabi_dadd+0xbe>
    6cea:	0003      	movs	r3, r0
    6cec:	4313      	orrs	r3, r2
    6cee:	d000      	beq.n	6cf2 <__aeabi_dadd+0x52>
    6cf0:	e0d9      	b.n	6ea6 <__aeabi_dadd+0x206>
    6cf2:	076b      	lsls	r3, r5, #29
    6cf4:	d009      	beq.n	6d0a <__aeabi_dadd+0x6a>
    6cf6:	230f      	movs	r3, #15
    6cf8:	402b      	ands	r3, r5
    6cfa:	2b04      	cmp	r3, #4
    6cfc:	d005      	beq.n	6d0a <__aeabi_dadd+0x6a>
    6cfe:	1d2b      	adds	r3, r5, #4
    6d00:	42ab      	cmp	r3, r5
    6d02:	41ad      	sbcs	r5, r5
    6d04:	426d      	negs	r5, r5
    6d06:	1949      	adds	r1, r1, r5
    6d08:	001d      	movs	r5, r3
    6d0a:	020b      	lsls	r3, r1, #8
    6d0c:	d400      	bmi.n	6d10 <__aeabi_dadd+0x70>
    6d0e:	e082      	b.n	6e16 <__aeabi_dadd+0x176>
    6d10:	4bca      	ldr	r3, [pc, #808]	; (703c <__aeabi_dadd+0x39c>)
    6d12:	3401      	adds	r4, #1
    6d14:	429c      	cmp	r4, r3
    6d16:	d100      	bne.n	6d1a <__aeabi_dadd+0x7a>
    6d18:	e0fe      	b.n	6f18 <__aeabi_dadd+0x278>
    6d1a:	000a      	movs	r2, r1
    6d1c:	4656      	mov	r6, sl
    6d1e:	4bc8      	ldr	r3, [pc, #800]	; (7040 <__aeabi_dadd+0x3a0>)
    6d20:	08ed      	lsrs	r5, r5, #3
    6d22:	401a      	ands	r2, r3
    6d24:	0750      	lsls	r0, r2, #29
    6d26:	0564      	lsls	r4, r4, #21
    6d28:	0252      	lsls	r2, r2, #9
    6d2a:	4305      	orrs	r5, r0
    6d2c:	0b12      	lsrs	r2, r2, #12
    6d2e:	0d64      	lsrs	r4, r4, #21
    6d30:	2100      	movs	r1, #0
    6d32:	0312      	lsls	r2, r2, #12
    6d34:	0d0b      	lsrs	r3, r1, #20
    6d36:	051b      	lsls	r3, r3, #20
    6d38:	0564      	lsls	r4, r4, #21
    6d3a:	0b12      	lsrs	r2, r2, #12
    6d3c:	431a      	orrs	r2, r3
    6d3e:	0863      	lsrs	r3, r4, #1
    6d40:	4cc0      	ldr	r4, [pc, #768]	; (7044 <__aeabi_dadd+0x3a4>)
    6d42:	07f6      	lsls	r6, r6, #31
    6d44:	4014      	ands	r4, r2
    6d46:	431c      	orrs	r4, r3
    6d48:	0064      	lsls	r4, r4, #1
    6d4a:	0864      	lsrs	r4, r4, #1
    6d4c:	4334      	orrs	r4, r6
    6d4e:	0028      	movs	r0, r5
    6d50:	0021      	movs	r1, r4
    6d52:	bc3c      	pop	{r2, r3, r4, r5}
    6d54:	4690      	mov	r8, r2
    6d56:	4699      	mov	r9, r3
    6d58:	46a2      	mov	sl, r4
    6d5a:	46ab      	mov	fp, r5
    6d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6d5e:	4bb7      	ldr	r3, [pc, #732]	; (703c <__aeabi_dadd+0x39c>)
    6d60:	429c      	cmp	r4, r3
    6d62:	d0c6      	beq.n	6cf2 <__aeabi_dadd+0x52>
    6d64:	2380      	movs	r3, #128	; 0x80
    6d66:	041b      	lsls	r3, r3, #16
    6d68:	4318      	orrs	r0, r3
    6d6a:	2e38      	cmp	r6, #56	; 0x38
    6d6c:	dd00      	ble.n	6d70 <__aeabi_dadd+0xd0>
    6d6e:	e0eb      	b.n	6f48 <__aeabi_dadd+0x2a8>
    6d70:	2e1f      	cmp	r6, #31
    6d72:	dd00      	ble.n	6d76 <__aeabi_dadd+0xd6>
    6d74:	e11e      	b.n	6fb4 <__aeabi_dadd+0x314>
    6d76:	2320      	movs	r3, #32
    6d78:	1b9b      	subs	r3, r3, r6
    6d7a:	469c      	mov	ip, r3
    6d7c:	0003      	movs	r3, r0
    6d7e:	4667      	mov	r7, ip
    6d80:	40bb      	lsls	r3, r7
    6d82:	4698      	mov	r8, r3
    6d84:	0013      	movs	r3, r2
    6d86:	4647      	mov	r7, r8
    6d88:	40f3      	lsrs	r3, r6
    6d8a:	433b      	orrs	r3, r7
    6d8c:	4667      	mov	r7, ip
    6d8e:	40ba      	lsls	r2, r7
    6d90:	1e57      	subs	r7, r2, #1
    6d92:	41ba      	sbcs	r2, r7
    6d94:	4313      	orrs	r3, r2
    6d96:	0002      	movs	r2, r0
    6d98:	40f2      	lsrs	r2, r6
    6d9a:	1aeb      	subs	r3, r5, r3
    6d9c:	429d      	cmp	r5, r3
    6d9e:	41b6      	sbcs	r6, r6
    6da0:	001d      	movs	r5, r3
    6da2:	1a8a      	subs	r2, r1, r2
    6da4:	4276      	negs	r6, r6
    6da6:	1b91      	subs	r1, r2, r6
    6da8:	020b      	lsls	r3, r1, #8
    6daa:	d531      	bpl.n	6e10 <__aeabi_dadd+0x170>
    6dac:	024a      	lsls	r2, r1, #9
    6dae:	0a56      	lsrs	r6, r2, #9
    6db0:	2e00      	cmp	r6, #0
    6db2:	d100      	bne.n	6db6 <__aeabi_dadd+0x116>
    6db4:	e0b4      	b.n	6f20 <__aeabi_dadd+0x280>
    6db6:	0030      	movs	r0, r6
    6db8:	f001 fe40 	bl	8a3c <__clzsi2>
    6dbc:	0003      	movs	r3, r0
    6dbe:	3b08      	subs	r3, #8
    6dc0:	2b1f      	cmp	r3, #31
    6dc2:	dd00      	ble.n	6dc6 <__aeabi_dadd+0x126>
    6dc4:	e0b5      	b.n	6f32 <__aeabi_dadd+0x292>
    6dc6:	2220      	movs	r2, #32
    6dc8:	0029      	movs	r1, r5
    6dca:	1ad2      	subs	r2, r2, r3
    6dcc:	40d1      	lsrs	r1, r2
    6dce:	409e      	lsls	r6, r3
    6dd0:	000a      	movs	r2, r1
    6dd2:	409d      	lsls	r5, r3
    6dd4:	4332      	orrs	r2, r6
    6dd6:	429c      	cmp	r4, r3
    6dd8:	dd00      	ble.n	6ddc <__aeabi_dadd+0x13c>
    6dda:	e0b1      	b.n	6f40 <__aeabi_dadd+0x2a0>
    6ddc:	1b1c      	subs	r4, r3, r4
    6dde:	1c63      	adds	r3, r4, #1
    6de0:	2b1f      	cmp	r3, #31
    6de2:	dd00      	ble.n	6de6 <__aeabi_dadd+0x146>
    6de4:	e0d5      	b.n	6f92 <__aeabi_dadd+0x2f2>
    6de6:	2120      	movs	r1, #32
    6de8:	0014      	movs	r4, r2
    6dea:	0028      	movs	r0, r5
    6dec:	1ac9      	subs	r1, r1, r3
    6dee:	408c      	lsls	r4, r1
    6df0:	40d8      	lsrs	r0, r3
    6df2:	408d      	lsls	r5, r1
    6df4:	4304      	orrs	r4, r0
    6df6:	40da      	lsrs	r2, r3
    6df8:	1e68      	subs	r0, r5, #1
    6dfa:	4185      	sbcs	r5, r0
    6dfc:	0011      	movs	r1, r2
    6dfe:	4325      	orrs	r5, r4
    6e00:	2400      	movs	r4, #0
    6e02:	e776      	b.n	6cf2 <__aeabi_dadd+0x52>
    6e04:	4641      	mov	r1, r8
    6e06:	4331      	orrs	r1, r6
    6e08:	d100      	bne.n	6e0c <__aeabi_dadd+0x16c>
    6e0a:	e234      	b.n	7276 <__aeabi_dadd+0x5d6>
    6e0c:	0031      	movs	r1, r6
    6e0e:	4645      	mov	r5, r8
    6e10:	076b      	lsls	r3, r5, #29
    6e12:	d000      	beq.n	6e16 <__aeabi_dadd+0x176>
    6e14:	e76f      	b.n	6cf6 <__aeabi_dadd+0x56>
    6e16:	4656      	mov	r6, sl
    6e18:	0748      	lsls	r0, r1, #29
    6e1a:	08ed      	lsrs	r5, r5, #3
    6e1c:	08c9      	lsrs	r1, r1, #3
    6e1e:	4305      	orrs	r5, r0
    6e20:	4b86      	ldr	r3, [pc, #536]	; (703c <__aeabi_dadd+0x39c>)
    6e22:	429c      	cmp	r4, r3
    6e24:	d035      	beq.n	6e92 <__aeabi_dadd+0x1f2>
    6e26:	030a      	lsls	r2, r1, #12
    6e28:	0564      	lsls	r4, r4, #21
    6e2a:	0b12      	lsrs	r2, r2, #12
    6e2c:	0d64      	lsrs	r4, r4, #21
    6e2e:	e77f      	b.n	6d30 <__aeabi_dadd+0x90>
    6e30:	4663      	mov	r3, ip
    6e32:	1ae3      	subs	r3, r4, r3
    6e34:	469b      	mov	fp, r3
    6e36:	2b00      	cmp	r3, #0
    6e38:	dc00      	bgt.n	6e3c <__aeabi_dadd+0x19c>
    6e3a:	e08b      	b.n	6f54 <__aeabi_dadd+0x2b4>
    6e3c:	4667      	mov	r7, ip
    6e3e:	2f00      	cmp	r7, #0
    6e40:	d03c      	beq.n	6ebc <__aeabi_dadd+0x21c>
    6e42:	4f7e      	ldr	r7, [pc, #504]	; (703c <__aeabi_dadd+0x39c>)
    6e44:	42bc      	cmp	r4, r7
    6e46:	d100      	bne.n	6e4a <__aeabi_dadd+0x1aa>
    6e48:	e753      	b.n	6cf2 <__aeabi_dadd+0x52>
    6e4a:	2780      	movs	r7, #128	; 0x80
    6e4c:	043f      	lsls	r7, r7, #16
    6e4e:	4338      	orrs	r0, r7
    6e50:	465b      	mov	r3, fp
    6e52:	2b38      	cmp	r3, #56	; 0x38
    6e54:	dc00      	bgt.n	6e58 <__aeabi_dadd+0x1b8>
    6e56:	e0f7      	b.n	7048 <__aeabi_dadd+0x3a8>
    6e58:	4302      	orrs	r2, r0
    6e5a:	1e50      	subs	r0, r2, #1
    6e5c:	4182      	sbcs	r2, r0
    6e5e:	2000      	movs	r0, #0
    6e60:	b2d2      	uxtb	r2, r2
    6e62:	1953      	adds	r3, r2, r5
    6e64:	1842      	adds	r2, r0, r1
    6e66:	42ab      	cmp	r3, r5
    6e68:	4189      	sbcs	r1, r1
    6e6a:	001d      	movs	r5, r3
    6e6c:	4249      	negs	r1, r1
    6e6e:	1889      	adds	r1, r1, r2
    6e70:	020b      	lsls	r3, r1, #8
    6e72:	d5cd      	bpl.n	6e10 <__aeabi_dadd+0x170>
    6e74:	4b71      	ldr	r3, [pc, #452]	; (703c <__aeabi_dadd+0x39c>)
    6e76:	3401      	adds	r4, #1
    6e78:	429c      	cmp	r4, r3
    6e7a:	d100      	bne.n	6e7e <__aeabi_dadd+0x1de>
    6e7c:	e13d      	b.n	70fa <__aeabi_dadd+0x45a>
    6e7e:	2001      	movs	r0, #1
    6e80:	4a6f      	ldr	r2, [pc, #444]	; (7040 <__aeabi_dadd+0x3a0>)
    6e82:	086b      	lsrs	r3, r5, #1
    6e84:	400a      	ands	r2, r1
    6e86:	4028      	ands	r0, r5
    6e88:	4318      	orrs	r0, r3
    6e8a:	07d5      	lsls	r5, r2, #31
    6e8c:	4305      	orrs	r5, r0
    6e8e:	0851      	lsrs	r1, r2, #1
    6e90:	e72f      	b.n	6cf2 <__aeabi_dadd+0x52>
    6e92:	002b      	movs	r3, r5
    6e94:	430b      	orrs	r3, r1
    6e96:	d100      	bne.n	6e9a <__aeabi_dadd+0x1fa>
    6e98:	e1cb      	b.n	7232 <__aeabi_dadd+0x592>
    6e9a:	2380      	movs	r3, #128	; 0x80
    6e9c:	031b      	lsls	r3, r3, #12
    6e9e:	430b      	orrs	r3, r1
    6ea0:	031a      	lsls	r2, r3, #12
    6ea2:	0b12      	lsrs	r2, r2, #12
    6ea4:	e744      	b.n	6d30 <__aeabi_dadd+0x90>
    6ea6:	3e01      	subs	r6, #1
    6ea8:	2e00      	cmp	r6, #0
    6eaa:	d16d      	bne.n	6f88 <__aeabi_dadd+0x2e8>
    6eac:	1aae      	subs	r6, r5, r2
    6eae:	42b5      	cmp	r5, r6
    6eb0:	419b      	sbcs	r3, r3
    6eb2:	1a09      	subs	r1, r1, r0
    6eb4:	425b      	negs	r3, r3
    6eb6:	1ac9      	subs	r1, r1, r3
    6eb8:	0035      	movs	r5, r6
    6eba:	e775      	b.n	6da8 <__aeabi_dadd+0x108>
    6ebc:	0007      	movs	r7, r0
    6ebe:	4317      	orrs	r7, r2
    6ec0:	d100      	bne.n	6ec4 <__aeabi_dadd+0x224>
    6ec2:	e716      	b.n	6cf2 <__aeabi_dadd+0x52>
    6ec4:	2301      	movs	r3, #1
    6ec6:	425b      	negs	r3, r3
    6ec8:	469c      	mov	ip, r3
    6eca:	44e3      	add	fp, ip
    6ecc:	465b      	mov	r3, fp
    6ece:	2b00      	cmp	r3, #0
    6ed0:	d000      	beq.n	6ed4 <__aeabi_dadd+0x234>
    6ed2:	e0e0      	b.n	7096 <__aeabi_dadd+0x3f6>
    6ed4:	18aa      	adds	r2, r5, r2
    6ed6:	42aa      	cmp	r2, r5
    6ed8:	419b      	sbcs	r3, r3
    6eda:	1809      	adds	r1, r1, r0
    6edc:	425b      	negs	r3, r3
    6ede:	1859      	adds	r1, r3, r1
    6ee0:	0015      	movs	r5, r2
    6ee2:	e7c5      	b.n	6e70 <__aeabi_dadd+0x1d0>
    6ee4:	2e00      	cmp	r6, #0
    6ee6:	d175      	bne.n	6fd4 <__aeabi_dadd+0x334>
    6ee8:	1c66      	adds	r6, r4, #1
    6eea:	0576      	lsls	r6, r6, #21
    6eec:	0d76      	lsrs	r6, r6, #21
    6eee:	2e01      	cmp	r6, #1
    6ef0:	dc00      	bgt.n	6ef4 <__aeabi_dadd+0x254>
    6ef2:	e0f3      	b.n	70dc <__aeabi_dadd+0x43c>
    6ef4:	1aae      	subs	r6, r5, r2
    6ef6:	46b0      	mov	r8, r6
    6ef8:	4545      	cmp	r5, r8
    6efa:	41bf      	sbcs	r7, r7
    6efc:	1a0e      	subs	r6, r1, r0
    6efe:	427f      	negs	r7, r7
    6f00:	1bf6      	subs	r6, r6, r7
    6f02:	0237      	lsls	r7, r6, #8
    6f04:	d400      	bmi.n	6f08 <__aeabi_dadd+0x268>
    6f06:	e08f      	b.n	7028 <__aeabi_dadd+0x388>
    6f08:	1b55      	subs	r5, r2, r5
    6f0a:	42aa      	cmp	r2, r5
    6f0c:	41b6      	sbcs	r6, r6
    6f0e:	1a41      	subs	r1, r0, r1
    6f10:	4276      	negs	r6, r6
    6f12:	1b8e      	subs	r6, r1, r6
    6f14:	469a      	mov	sl, r3
    6f16:	e74b      	b.n	6db0 <__aeabi_dadd+0x110>
    6f18:	4656      	mov	r6, sl
    6f1a:	2200      	movs	r2, #0
    6f1c:	2500      	movs	r5, #0
    6f1e:	e707      	b.n	6d30 <__aeabi_dadd+0x90>
    6f20:	0028      	movs	r0, r5
    6f22:	f001 fd8b 	bl	8a3c <__clzsi2>
    6f26:	3020      	adds	r0, #32
    6f28:	0003      	movs	r3, r0
    6f2a:	3b08      	subs	r3, #8
    6f2c:	2b1f      	cmp	r3, #31
    6f2e:	dc00      	bgt.n	6f32 <__aeabi_dadd+0x292>
    6f30:	e749      	b.n	6dc6 <__aeabi_dadd+0x126>
    6f32:	002a      	movs	r2, r5
    6f34:	3828      	subs	r0, #40	; 0x28
    6f36:	4082      	lsls	r2, r0
    6f38:	2500      	movs	r5, #0
    6f3a:	429c      	cmp	r4, r3
    6f3c:	dc00      	bgt.n	6f40 <__aeabi_dadd+0x2a0>
    6f3e:	e74d      	b.n	6ddc <__aeabi_dadd+0x13c>
    6f40:	493f      	ldr	r1, [pc, #252]	; (7040 <__aeabi_dadd+0x3a0>)
    6f42:	1ae4      	subs	r4, r4, r3
    6f44:	4011      	ands	r1, r2
    6f46:	e6d4      	b.n	6cf2 <__aeabi_dadd+0x52>
    6f48:	4302      	orrs	r2, r0
    6f4a:	1e50      	subs	r0, r2, #1
    6f4c:	4182      	sbcs	r2, r0
    6f4e:	b2d3      	uxtb	r3, r2
    6f50:	2200      	movs	r2, #0
    6f52:	e722      	b.n	6d9a <__aeabi_dadd+0xfa>
    6f54:	2b00      	cmp	r3, #0
    6f56:	d000      	beq.n	6f5a <__aeabi_dadd+0x2ba>
    6f58:	e0f3      	b.n	7142 <__aeabi_dadd+0x4a2>
    6f5a:	1c63      	adds	r3, r4, #1
    6f5c:	469c      	mov	ip, r3
    6f5e:	055b      	lsls	r3, r3, #21
    6f60:	0d5b      	lsrs	r3, r3, #21
    6f62:	2b01      	cmp	r3, #1
    6f64:	dc00      	bgt.n	6f68 <__aeabi_dadd+0x2c8>
    6f66:	e09f      	b.n	70a8 <__aeabi_dadd+0x408>
    6f68:	4b34      	ldr	r3, [pc, #208]	; (703c <__aeabi_dadd+0x39c>)
    6f6a:	459c      	cmp	ip, r3
    6f6c:	d100      	bne.n	6f70 <__aeabi_dadd+0x2d0>
    6f6e:	e0c3      	b.n	70f8 <__aeabi_dadd+0x458>
    6f70:	18aa      	adds	r2, r5, r2
    6f72:	1809      	adds	r1, r1, r0
    6f74:	42aa      	cmp	r2, r5
    6f76:	4180      	sbcs	r0, r0
    6f78:	4240      	negs	r0, r0
    6f7a:	1841      	adds	r1, r0, r1
    6f7c:	07cd      	lsls	r5, r1, #31
    6f7e:	0852      	lsrs	r2, r2, #1
    6f80:	4315      	orrs	r5, r2
    6f82:	0849      	lsrs	r1, r1, #1
    6f84:	4664      	mov	r4, ip
    6f86:	e6b4      	b.n	6cf2 <__aeabi_dadd+0x52>
    6f88:	4b2c      	ldr	r3, [pc, #176]	; (703c <__aeabi_dadd+0x39c>)
    6f8a:	429c      	cmp	r4, r3
    6f8c:	d000      	beq.n	6f90 <__aeabi_dadd+0x2f0>
    6f8e:	e6ec      	b.n	6d6a <__aeabi_dadd+0xca>
    6f90:	e6af      	b.n	6cf2 <__aeabi_dadd+0x52>
    6f92:	0011      	movs	r1, r2
    6f94:	3c1f      	subs	r4, #31
    6f96:	40e1      	lsrs	r1, r4
    6f98:	000c      	movs	r4, r1
    6f9a:	2b20      	cmp	r3, #32
    6f9c:	d100      	bne.n	6fa0 <__aeabi_dadd+0x300>
    6f9e:	e07f      	b.n	70a0 <__aeabi_dadd+0x400>
    6fa0:	2140      	movs	r1, #64	; 0x40
    6fa2:	1acb      	subs	r3, r1, r3
    6fa4:	409a      	lsls	r2, r3
    6fa6:	4315      	orrs	r5, r2
    6fa8:	1e6a      	subs	r2, r5, #1
    6faa:	4195      	sbcs	r5, r2
    6fac:	2100      	movs	r1, #0
    6fae:	4325      	orrs	r5, r4
    6fb0:	2400      	movs	r4, #0
    6fb2:	e72d      	b.n	6e10 <__aeabi_dadd+0x170>
    6fb4:	0033      	movs	r3, r6
    6fb6:	0007      	movs	r7, r0
    6fb8:	3b20      	subs	r3, #32
    6fba:	40df      	lsrs	r7, r3
    6fbc:	003b      	movs	r3, r7
    6fbe:	2e20      	cmp	r6, #32
    6fc0:	d070      	beq.n	70a4 <__aeabi_dadd+0x404>
    6fc2:	2740      	movs	r7, #64	; 0x40
    6fc4:	1bbe      	subs	r6, r7, r6
    6fc6:	40b0      	lsls	r0, r6
    6fc8:	4302      	orrs	r2, r0
    6fca:	1e50      	subs	r0, r2, #1
    6fcc:	4182      	sbcs	r2, r0
    6fce:	4313      	orrs	r3, r2
    6fd0:	2200      	movs	r2, #0
    6fd2:	e6e2      	b.n	6d9a <__aeabi_dadd+0xfa>
    6fd4:	2c00      	cmp	r4, #0
    6fd6:	d04f      	beq.n	7078 <__aeabi_dadd+0x3d8>
    6fd8:	4c18      	ldr	r4, [pc, #96]	; (703c <__aeabi_dadd+0x39c>)
    6fda:	45a4      	cmp	ip, r4
    6fdc:	d100      	bne.n	6fe0 <__aeabi_dadd+0x340>
    6fde:	e0ab      	b.n	7138 <__aeabi_dadd+0x498>
    6fe0:	2480      	movs	r4, #128	; 0x80
    6fe2:	0424      	lsls	r4, r4, #16
    6fe4:	4276      	negs	r6, r6
    6fe6:	4321      	orrs	r1, r4
    6fe8:	2e38      	cmp	r6, #56	; 0x38
    6fea:	dd00      	ble.n	6fee <__aeabi_dadd+0x34e>
    6fec:	e0df      	b.n	71ae <__aeabi_dadd+0x50e>
    6fee:	2e1f      	cmp	r6, #31
    6ff0:	dd00      	ble.n	6ff4 <__aeabi_dadd+0x354>
    6ff2:	e143      	b.n	727c <__aeabi_dadd+0x5dc>
    6ff4:	2720      	movs	r7, #32
    6ff6:	1bbc      	subs	r4, r7, r6
    6ff8:	46a1      	mov	r9, r4
    6ffa:	000c      	movs	r4, r1
    6ffc:	464f      	mov	r7, r9
    6ffe:	40bc      	lsls	r4, r7
    7000:	46a0      	mov	r8, r4
    7002:	002c      	movs	r4, r5
    7004:	4647      	mov	r7, r8
    7006:	40f4      	lsrs	r4, r6
    7008:	433c      	orrs	r4, r7
    700a:	464f      	mov	r7, r9
    700c:	40bd      	lsls	r5, r7
    700e:	1e6f      	subs	r7, r5, #1
    7010:	41bd      	sbcs	r5, r7
    7012:	40f1      	lsrs	r1, r6
    7014:	432c      	orrs	r4, r5
    7016:	1b15      	subs	r5, r2, r4
    7018:	42aa      	cmp	r2, r5
    701a:	4192      	sbcs	r2, r2
    701c:	1a41      	subs	r1, r0, r1
    701e:	4252      	negs	r2, r2
    7020:	1a89      	subs	r1, r1, r2
    7022:	4664      	mov	r4, ip
    7024:	469a      	mov	sl, r3
    7026:	e6bf      	b.n	6da8 <__aeabi_dadd+0x108>
    7028:	4641      	mov	r1, r8
    702a:	4645      	mov	r5, r8
    702c:	4331      	orrs	r1, r6
    702e:	d000      	beq.n	7032 <__aeabi_dadd+0x392>
    7030:	e6be      	b.n	6db0 <__aeabi_dadd+0x110>
    7032:	2600      	movs	r6, #0
    7034:	2400      	movs	r4, #0
    7036:	2500      	movs	r5, #0
    7038:	e6f2      	b.n	6e20 <__aeabi_dadd+0x180>
    703a:	46c0      	nop			; (mov r8, r8)
    703c:	000007ff 	.word	0x000007ff
    7040:	ff7fffff 	.word	0xff7fffff
    7044:	800fffff 	.word	0x800fffff
    7048:	2b1f      	cmp	r3, #31
    704a:	dc59      	bgt.n	7100 <__aeabi_dadd+0x460>
    704c:	2720      	movs	r7, #32
    704e:	1aff      	subs	r7, r7, r3
    7050:	46bc      	mov	ip, r7
    7052:	0007      	movs	r7, r0
    7054:	4663      	mov	r3, ip
    7056:	409f      	lsls	r7, r3
    7058:	465b      	mov	r3, fp
    705a:	46b9      	mov	r9, r7
    705c:	0017      	movs	r7, r2
    705e:	40df      	lsrs	r7, r3
    7060:	46b8      	mov	r8, r7
    7062:	464f      	mov	r7, r9
    7064:	4643      	mov	r3, r8
    7066:	431f      	orrs	r7, r3
    7068:	4663      	mov	r3, ip
    706a:	409a      	lsls	r2, r3
    706c:	1e53      	subs	r3, r2, #1
    706e:	419a      	sbcs	r2, r3
    7070:	465b      	mov	r3, fp
    7072:	433a      	orrs	r2, r7
    7074:	40d8      	lsrs	r0, r3
    7076:	e6f4      	b.n	6e62 <__aeabi_dadd+0x1c2>
    7078:	000c      	movs	r4, r1
    707a:	432c      	orrs	r4, r5
    707c:	d05c      	beq.n	7138 <__aeabi_dadd+0x498>
    707e:	43f6      	mvns	r6, r6
    7080:	2e00      	cmp	r6, #0
    7082:	d155      	bne.n	7130 <__aeabi_dadd+0x490>
    7084:	1b55      	subs	r5, r2, r5
    7086:	42aa      	cmp	r2, r5
    7088:	41a4      	sbcs	r4, r4
    708a:	1a41      	subs	r1, r0, r1
    708c:	4264      	negs	r4, r4
    708e:	1b09      	subs	r1, r1, r4
    7090:	469a      	mov	sl, r3
    7092:	4664      	mov	r4, ip
    7094:	e688      	b.n	6da8 <__aeabi_dadd+0x108>
    7096:	4f96      	ldr	r7, [pc, #600]	; (72f0 <__aeabi_dadd+0x650>)
    7098:	42bc      	cmp	r4, r7
    709a:	d000      	beq.n	709e <__aeabi_dadd+0x3fe>
    709c:	e6d8      	b.n	6e50 <__aeabi_dadd+0x1b0>
    709e:	e628      	b.n	6cf2 <__aeabi_dadd+0x52>
    70a0:	2200      	movs	r2, #0
    70a2:	e780      	b.n	6fa6 <__aeabi_dadd+0x306>
    70a4:	2000      	movs	r0, #0
    70a6:	e78f      	b.n	6fc8 <__aeabi_dadd+0x328>
    70a8:	000b      	movs	r3, r1
    70aa:	432b      	orrs	r3, r5
    70ac:	2c00      	cmp	r4, #0
    70ae:	d000      	beq.n	70b2 <__aeabi_dadd+0x412>
    70b0:	e0c2      	b.n	7238 <__aeabi_dadd+0x598>
    70b2:	2b00      	cmp	r3, #0
    70b4:	d100      	bne.n	70b8 <__aeabi_dadd+0x418>
    70b6:	e101      	b.n	72bc <__aeabi_dadd+0x61c>
    70b8:	0003      	movs	r3, r0
    70ba:	4313      	orrs	r3, r2
    70bc:	d100      	bne.n	70c0 <__aeabi_dadd+0x420>
    70be:	e618      	b.n	6cf2 <__aeabi_dadd+0x52>
    70c0:	18ab      	adds	r3, r5, r2
    70c2:	42ab      	cmp	r3, r5
    70c4:	41b6      	sbcs	r6, r6
    70c6:	1809      	adds	r1, r1, r0
    70c8:	4276      	negs	r6, r6
    70ca:	1871      	adds	r1, r6, r1
    70cc:	020a      	lsls	r2, r1, #8
    70ce:	d400      	bmi.n	70d2 <__aeabi_dadd+0x432>
    70d0:	e109      	b.n	72e6 <__aeabi_dadd+0x646>
    70d2:	4a88      	ldr	r2, [pc, #544]	; (72f4 <__aeabi_dadd+0x654>)
    70d4:	001d      	movs	r5, r3
    70d6:	4011      	ands	r1, r2
    70d8:	4664      	mov	r4, ip
    70da:	e60a      	b.n	6cf2 <__aeabi_dadd+0x52>
    70dc:	2c00      	cmp	r4, #0
    70de:	d15b      	bne.n	7198 <__aeabi_dadd+0x4f8>
    70e0:	000e      	movs	r6, r1
    70e2:	432e      	orrs	r6, r5
    70e4:	d000      	beq.n	70e8 <__aeabi_dadd+0x448>
    70e6:	e08a      	b.n	71fe <__aeabi_dadd+0x55e>
    70e8:	0001      	movs	r1, r0
    70ea:	4311      	orrs	r1, r2
    70ec:	d100      	bne.n	70f0 <__aeabi_dadd+0x450>
    70ee:	e0c2      	b.n	7276 <__aeabi_dadd+0x5d6>
    70f0:	0001      	movs	r1, r0
    70f2:	0015      	movs	r5, r2
    70f4:	469a      	mov	sl, r3
    70f6:	e5fc      	b.n	6cf2 <__aeabi_dadd+0x52>
    70f8:	4664      	mov	r4, ip
    70fa:	2100      	movs	r1, #0
    70fc:	2500      	movs	r5, #0
    70fe:	e68f      	b.n	6e20 <__aeabi_dadd+0x180>
    7100:	2320      	movs	r3, #32
    7102:	425b      	negs	r3, r3
    7104:	469c      	mov	ip, r3
    7106:	44dc      	add	ip, fp
    7108:	4663      	mov	r3, ip
    710a:	0007      	movs	r7, r0
    710c:	40df      	lsrs	r7, r3
    710e:	465b      	mov	r3, fp
    7110:	46bc      	mov	ip, r7
    7112:	2b20      	cmp	r3, #32
    7114:	d100      	bne.n	7118 <__aeabi_dadd+0x478>
    7116:	e0ac      	b.n	7272 <__aeabi_dadd+0x5d2>
    7118:	2340      	movs	r3, #64	; 0x40
    711a:	465f      	mov	r7, fp
    711c:	1bdb      	subs	r3, r3, r7
    711e:	4098      	lsls	r0, r3
    7120:	4302      	orrs	r2, r0
    7122:	1e50      	subs	r0, r2, #1
    7124:	4182      	sbcs	r2, r0
    7126:	4663      	mov	r3, ip
    7128:	4313      	orrs	r3, r2
    712a:	001a      	movs	r2, r3
    712c:	2000      	movs	r0, #0
    712e:	e698      	b.n	6e62 <__aeabi_dadd+0x1c2>
    7130:	4c6f      	ldr	r4, [pc, #444]	; (72f0 <__aeabi_dadd+0x650>)
    7132:	45a4      	cmp	ip, r4
    7134:	d000      	beq.n	7138 <__aeabi_dadd+0x498>
    7136:	e757      	b.n	6fe8 <__aeabi_dadd+0x348>
    7138:	0001      	movs	r1, r0
    713a:	0015      	movs	r5, r2
    713c:	4664      	mov	r4, ip
    713e:	469a      	mov	sl, r3
    7140:	e5d7      	b.n	6cf2 <__aeabi_dadd+0x52>
    7142:	2c00      	cmp	r4, #0
    7144:	d139      	bne.n	71ba <__aeabi_dadd+0x51a>
    7146:	000c      	movs	r4, r1
    7148:	432c      	orrs	r4, r5
    714a:	d06e      	beq.n	722a <__aeabi_dadd+0x58a>
    714c:	43db      	mvns	r3, r3
    714e:	2b00      	cmp	r3, #0
    7150:	d01a      	beq.n	7188 <__aeabi_dadd+0x4e8>
    7152:	4c67      	ldr	r4, [pc, #412]	; (72f0 <__aeabi_dadd+0x650>)
    7154:	45a4      	cmp	ip, r4
    7156:	d068      	beq.n	722a <__aeabi_dadd+0x58a>
    7158:	2b38      	cmp	r3, #56	; 0x38
    715a:	dd00      	ble.n	715e <__aeabi_dadd+0x4be>
    715c:	e0a4      	b.n	72a8 <__aeabi_dadd+0x608>
    715e:	2b1f      	cmp	r3, #31
    7160:	dd00      	ble.n	7164 <__aeabi_dadd+0x4c4>
    7162:	e0ae      	b.n	72c2 <__aeabi_dadd+0x622>
    7164:	2420      	movs	r4, #32
    7166:	000f      	movs	r7, r1
    7168:	1ae4      	subs	r4, r4, r3
    716a:	40a7      	lsls	r7, r4
    716c:	46b9      	mov	r9, r7
    716e:	002f      	movs	r7, r5
    7170:	40df      	lsrs	r7, r3
    7172:	46b8      	mov	r8, r7
    7174:	46a3      	mov	fp, r4
    7176:	464f      	mov	r7, r9
    7178:	4644      	mov	r4, r8
    717a:	4327      	orrs	r7, r4
    717c:	465c      	mov	r4, fp
    717e:	40a5      	lsls	r5, r4
    7180:	1e6c      	subs	r4, r5, #1
    7182:	41a5      	sbcs	r5, r4
    7184:	40d9      	lsrs	r1, r3
    7186:	433d      	orrs	r5, r7
    7188:	18ad      	adds	r5, r5, r2
    718a:	4295      	cmp	r5, r2
    718c:	419b      	sbcs	r3, r3
    718e:	1809      	adds	r1, r1, r0
    7190:	425b      	negs	r3, r3
    7192:	1859      	adds	r1, r3, r1
    7194:	4664      	mov	r4, ip
    7196:	e66b      	b.n	6e70 <__aeabi_dadd+0x1d0>
    7198:	000c      	movs	r4, r1
    719a:	432c      	orrs	r4, r5
    719c:	d115      	bne.n	71ca <__aeabi_dadd+0x52a>
    719e:	0001      	movs	r1, r0
    71a0:	4311      	orrs	r1, r2
    71a2:	d07b      	beq.n	729c <__aeabi_dadd+0x5fc>
    71a4:	0001      	movs	r1, r0
    71a6:	0015      	movs	r5, r2
    71a8:	469a      	mov	sl, r3
    71aa:	4c51      	ldr	r4, [pc, #324]	; (72f0 <__aeabi_dadd+0x650>)
    71ac:	e5a1      	b.n	6cf2 <__aeabi_dadd+0x52>
    71ae:	430d      	orrs	r5, r1
    71b0:	1e69      	subs	r1, r5, #1
    71b2:	418d      	sbcs	r5, r1
    71b4:	2100      	movs	r1, #0
    71b6:	b2ec      	uxtb	r4, r5
    71b8:	e72d      	b.n	7016 <__aeabi_dadd+0x376>
    71ba:	4c4d      	ldr	r4, [pc, #308]	; (72f0 <__aeabi_dadd+0x650>)
    71bc:	45a4      	cmp	ip, r4
    71be:	d034      	beq.n	722a <__aeabi_dadd+0x58a>
    71c0:	2480      	movs	r4, #128	; 0x80
    71c2:	0424      	lsls	r4, r4, #16
    71c4:	425b      	negs	r3, r3
    71c6:	4321      	orrs	r1, r4
    71c8:	e7c6      	b.n	7158 <__aeabi_dadd+0x4b8>
    71ca:	0004      	movs	r4, r0
    71cc:	4314      	orrs	r4, r2
    71ce:	d04e      	beq.n	726e <__aeabi_dadd+0x5ce>
    71d0:	08ed      	lsrs	r5, r5, #3
    71d2:	074c      	lsls	r4, r1, #29
    71d4:	432c      	orrs	r4, r5
    71d6:	2580      	movs	r5, #128	; 0x80
    71d8:	08c9      	lsrs	r1, r1, #3
    71da:	032d      	lsls	r5, r5, #12
    71dc:	4229      	tst	r1, r5
    71de:	d008      	beq.n	71f2 <__aeabi_dadd+0x552>
    71e0:	08c6      	lsrs	r6, r0, #3
    71e2:	422e      	tst	r6, r5
    71e4:	d105      	bne.n	71f2 <__aeabi_dadd+0x552>
    71e6:	08d2      	lsrs	r2, r2, #3
    71e8:	0741      	lsls	r1, r0, #29
    71ea:	4311      	orrs	r1, r2
    71ec:	000c      	movs	r4, r1
    71ee:	469a      	mov	sl, r3
    71f0:	0031      	movs	r1, r6
    71f2:	0f62      	lsrs	r2, r4, #29
    71f4:	00c9      	lsls	r1, r1, #3
    71f6:	00e5      	lsls	r5, r4, #3
    71f8:	4311      	orrs	r1, r2
    71fa:	4c3d      	ldr	r4, [pc, #244]	; (72f0 <__aeabi_dadd+0x650>)
    71fc:	e579      	b.n	6cf2 <__aeabi_dadd+0x52>
    71fe:	0006      	movs	r6, r0
    7200:	4316      	orrs	r6, r2
    7202:	d100      	bne.n	7206 <__aeabi_dadd+0x566>
    7204:	e575      	b.n	6cf2 <__aeabi_dadd+0x52>
    7206:	1aae      	subs	r6, r5, r2
    7208:	46b0      	mov	r8, r6
    720a:	4545      	cmp	r5, r8
    720c:	41bf      	sbcs	r7, r7
    720e:	1a0e      	subs	r6, r1, r0
    7210:	427f      	negs	r7, r7
    7212:	1bf6      	subs	r6, r6, r7
    7214:	0237      	lsls	r7, r6, #8
    7216:	d400      	bmi.n	721a <__aeabi_dadd+0x57a>
    7218:	e5f4      	b.n	6e04 <__aeabi_dadd+0x164>
    721a:	1b55      	subs	r5, r2, r5
    721c:	42aa      	cmp	r2, r5
    721e:	41b6      	sbcs	r6, r6
    7220:	1a41      	subs	r1, r0, r1
    7222:	4276      	negs	r6, r6
    7224:	1b89      	subs	r1, r1, r6
    7226:	469a      	mov	sl, r3
    7228:	e563      	b.n	6cf2 <__aeabi_dadd+0x52>
    722a:	0001      	movs	r1, r0
    722c:	0015      	movs	r5, r2
    722e:	4664      	mov	r4, ip
    7230:	e55f      	b.n	6cf2 <__aeabi_dadd+0x52>
    7232:	2200      	movs	r2, #0
    7234:	2500      	movs	r5, #0
    7236:	e57b      	b.n	6d30 <__aeabi_dadd+0x90>
    7238:	2b00      	cmp	r3, #0
    723a:	d03b      	beq.n	72b4 <__aeabi_dadd+0x614>
    723c:	0003      	movs	r3, r0
    723e:	4313      	orrs	r3, r2
    7240:	d015      	beq.n	726e <__aeabi_dadd+0x5ce>
    7242:	08ed      	lsrs	r5, r5, #3
    7244:	074b      	lsls	r3, r1, #29
    7246:	432b      	orrs	r3, r5
    7248:	2580      	movs	r5, #128	; 0x80
    724a:	08c9      	lsrs	r1, r1, #3
    724c:	032d      	lsls	r5, r5, #12
    724e:	4229      	tst	r1, r5
    7250:	d007      	beq.n	7262 <__aeabi_dadd+0x5c2>
    7252:	08c4      	lsrs	r4, r0, #3
    7254:	422c      	tst	r4, r5
    7256:	d104      	bne.n	7262 <__aeabi_dadd+0x5c2>
    7258:	0741      	lsls	r1, r0, #29
    725a:	000b      	movs	r3, r1
    725c:	0021      	movs	r1, r4
    725e:	08d2      	lsrs	r2, r2, #3
    7260:	4313      	orrs	r3, r2
    7262:	00c9      	lsls	r1, r1, #3
    7264:	0f5a      	lsrs	r2, r3, #29
    7266:	4311      	orrs	r1, r2
    7268:	00dd      	lsls	r5, r3, #3
    726a:	4c21      	ldr	r4, [pc, #132]	; (72f0 <__aeabi_dadd+0x650>)
    726c:	e541      	b.n	6cf2 <__aeabi_dadd+0x52>
    726e:	4c20      	ldr	r4, [pc, #128]	; (72f0 <__aeabi_dadd+0x650>)
    7270:	e53f      	b.n	6cf2 <__aeabi_dadd+0x52>
    7272:	2000      	movs	r0, #0
    7274:	e754      	b.n	7120 <__aeabi_dadd+0x480>
    7276:	2600      	movs	r6, #0
    7278:	2500      	movs	r5, #0
    727a:	e5d1      	b.n	6e20 <__aeabi_dadd+0x180>
    727c:	0034      	movs	r4, r6
    727e:	000f      	movs	r7, r1
    7280:	3c20      	subs	r4, #32
    7282:	40e7      	lsrs	r7, r4
    7284:	003c      	movs	r4, r7
    7286:	2e20      	cmp	r6, #32
    7288:	d02b      	beq.n	72e2 <__aeabi_dadd+0x642>
    728a:	2740      	movs	r7, #64	; 0x40
    728c:	1bbe      	subs	r6, r7, r6
    728e:	40b1      	lsls	r1, r6
    7290:	430d      	orrs	r5, r1
    7292:	1e69      	subs	r1, r5, #1
    7294:	418d      	sbcs	r5, r1
    7296:	2100      	movs	r1, #0
    7298:	432c      	orrs	r4, r5
    729a:	e6bc      	b.n	7016 <__aeabi_dadd+0x376>
    729c:	2180      	movs	r1, #128	; 0x80
    729e:	2600      	movs	r6, #0
    72a0:	0309      	lsls	r1, r1, #12
    72a2:	4c13      	ldr	r4, [pc, #76]	; (72f0 <__aeabi_dadd+0x650>)
    72a4:	2500      	movs	r5, #0
    72a6:	e5bb      	b.n	6e20 <__aeabi_dadd+0x180>
    72a8:	430d      	orrs	r5, r1
    72aa:	1e69      	subs	r1, r5, #1
    72ac:	418d      	sbcs	r5, r1
    72ae:	2100      	movs	r1, #0
    72b0:	b2ed      	uxtb	r5, r5
    72b2:	e769      	b.n	7188 <__aeabi_dadd+0x4e8>
    72b4:	0001      	movs	r1, r0
    72b6:	0015      	movs	r5, r2
    72b8:	4c0d      	ldr	r4, [pc, #52]	; (72f0 <__aeabi_dadd+0x650>)
    72ba:	e51a      	b.n	6cf2 <__aeabi_dadd+0x52>
    72bc:	0001      	movs	r1, r0
    72be:	0015      	movs	r5, r2
    72c0:	e517      	b.n	6cf2 <__aeabi_dadd+0x52>
    72c2:	001c      	movs	r4, r3
    72c4:	000f      	movs	r7, r1
    72c6:	3c20      	subs	r4, #32
    72c8:	40e7      	lsrs	r7, r4
    72ca:	003c      	movs	r4, r7
    72cc:	2b20      	cmp	r3, #32
    72ce:	d00c      	beq.n	72ea <__aeabi_dadd+0x64a>
    72d0:	2740      	movs	r7, #64	; 0x40
    72d2:	1afb      	subs	r3, r7, r3
    72d4:	4099      	lsls	r1, r3
    72d6:	430d      	orrs	r5, r1
    72d8:	1e69      	subs	r1, r5, #1
    72da:	418d      	sbcs	r5, r1
    72dc:	2100      	movs	r1, #0
    72de:	4325      	orrs	r5, r4
    72e0:	e752      	b.n	7188 <__aeabi_dadd+0x4e8>
    72e2:	2100      	movs	r1, #0
    72e4:	e7d4      	b.n	7290 <__aeabi_dadd+0x5f0>
    72e6:	001d      	movs	r5, r3
    72e8:	e592      	b.n	6e10 <__aeabi_dadd+0x170>
    72ea:	2100      	movs	r1, #0
    72ec:	e7f3      	b.n	72d6 <__aeabi_dadd+0x636>
    72ee:	46c0      	nop			; (mov r8, r8)
    72f0:	000007ff 	.word	0x000007ff
    72f4:	ff7fffff 	.word	0xff7fffff

000072f8 <__aeabi_ddiv>:
    72f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    72fa:	4656      	mov	r6, sl
    72fc:	464d      	mov	r5, r9
    72fe:	4644      	mov	r4, r8
    7300:	465f      	mov	r7, fp
    7302:	b4f0      	push	{r4, r5, r6, r7}
    7304:	001d      	movs	r5, r3
    7306:	030e      	lsls	r6, r1, #12
    7308:	004c      	lsls	r4, r1, #1
    730a:	0fcb      	lsrs	r3, r1, #31
    730c:	b087      	sub	sp, #28
    730e:	0007      	movs	r7, r0
    7310:	4692      	mov	sl, r2
    7312:	4681      	mov	r9, r0
    7314:	0b36      	lsrs	r6, r6, #12
    7316:	0d64      	lsrs	r4, r4, #21
    7318:	4698      	mov	r8, r3
    731a:	d06a      	beq.n	73f2 <__aeabi_ddiv+0xfa>
    731c:	4b6d      	ldr	r3, [pc, #436]	; (74d4 <__aeabi_ddiv+0x1dc>)
    731e:	429c      	cmp	r4, r3
    7320:	d035      	beq.n	738e <__aeabi_ddiv+0x96>
    7322:	2280      	movs	r2, #128	; 0x80
    7324:	0f43      	lsrs	r3, r0, #29
    7326:	0412      	lsls	r2, r2, #16
    7328:	4313      	orrs	r3, r2
    732a:	00f6      	lsls	r6, r6, #3
    732c:	431e      	orrs	r6, r3
    732e:	00c3      	lsls	r3, r0, #3
    7330:	4699      	mov	r9, r3
    7332:	4b69      	ldr	r3, [pc, #420]	; (74d8 <__aeabi_ddiv+0x1e0>)
    7334:	2700      	movs	r7, #0
    7336:	469c      	mov	ip, r3
    7338:	2300      	movs	r3, #0
    733a:	4464      	add	r4, ip
    733c:	9302      	str	r3, [sp, #8]
    733e:	032b      	lsls	r3, r5, #12
    7340:	0068      	lsls	r0, r5, #1
    7342:	0b1b      	lsrs	r3, r3, #12
    7344:	0fed      	lsrs	r5, r5, #31
    7346:	4651      	mov	r1, sl
    7348:	469b      	mov	fp, r3
    734a:	0d40      	lsrs	r0, r0, #21
    734c:	9500      	str	r5, [sp, #0]
    734e:	d100      	bne.n	7352 <__aeabi_ddiv+0x5a>
    7350:	e078      	b.n	7444 <__aeabi_ddiv+0x14c>
    7352:	4b60      	ldr	r3, [pc, #384]	; (74d4 <__aeabi_ddiv+0x1dc>)
    7354:	4298      	cmp	r0, r3
    7356:	d06c      	beq.n	7432 <__aeabi_ddiv+0x13a>
    7358:	465b      	mov	r3, fp
    735a:	00da      	lsls	r2, r3, #3
    735c:	0f4b      	lsrs	r3, r1, #29
    735e:	2180      	movs	r1, #128	; 0x80
    7360:	0409      	lsls	r1, r1, #16
    7362:	430b      	orrs	r3, r1
    7364:	4313      	orrs	r3, r2
    7366:	469b      	mov	fp, r3
    7368:	4653      	mov	r3, sl
    736a:	00d9      	lsls	r1, r3, #3
    736c:	4b5a      	ldr	r3, [pc, #360]	; (74d8 <__aeabi_ddiv+0x1e0>)
    736e:	469c      	mov	ip, r3
    7370:	2300      	movs	r3, #0
    7372:	4460      	add	r0, ip
    7374:	4642      	mov	r2, r8
    7376:	1a20      	subs	r0, r4, r0
    7378:	406a      	eors	r2, r5
    737a:	4692      	mov	sl, r2
    737c:	9001      	str	r0, [sp, #4]
    737e:	431f      	orrs	r7, r3
    7380:	2f0f      	cmp	r7, #15
    7382:	d900      	bls.n	7386 <__aeabi_ddiv+0x8e>
    7384:	e0b0      	b.n	74e8 <__aeabi_ddiv+0x1f0>
    7386:	4855      	ldr	r0, [pc, #340]	; (74dc <__aeabi_ddiv+0x1e4>)
    7388:	00bf      	lsls	r7, r7, #2
    738a:	59c0      	ldr	r0, [r0, r7]
    738c:	4687      	mov	pc, r0
    738e:	4337      	orrs	r7, r6
    7390:	d000      	beq.n	7394 <__aeabi_ddiv+0x9c>
    7392:	e088      	b.n	74a6 <__aeabi_ddiv+0x1ae>
    7394:	2300      	movs	r3, #0
    7396:	4699      	mov	r9, r3
    7398:	3302      	adds	r3, #2
    739a:	2708      	movs	r7, #8
    739c:	2600      	movs	r6, #0
    739e:	9302      	str	r3, [sp, #8]
    73a0:	e7cd      	b.n	733e <__aeabi_ddiv+0x46>
    73a2:	4643      	mov	r3, r8
    73a4:	46b3      	mov	fp, r6
    73a6:	4649      	mov	r1, r9
    73a8:	9300      	str	r3, [sp, #0]
    73aa:	9b02      	ldr	r3, [sp, #8]
    73ac:	9a00      	ldr	r2, [sp, #0]
    73ae:	4692      	mov	sl, r2
    73b0:	2b02      	cmp	r3, #2
    73b2:	d000      	beq.n	73b6 <__aeabi_ddiv+0xbe>
    73b4:	e1bf      	b.n	7736 <__aeabi_ddiv+0x43e>
    73b6:	2100      	movs	r1, #0
    73b8:	4653      	mov	r3, sl
    73ba:	2201      	movs	r2, #1
    73bc:	2600      	movs	r6, #0
    73be:	4689      	mov	r9, r1
    73c0:	401a      	ands	r2, r3
    73c2:	4b44      	ldr	r3, [pc, #272]	; (74d4 <__aeabi_ddiv+0x1dc>)
    73c4:	2100      	movs	r1, #0
    73c6:	0336      	lsls	r6, r6, #12
    73c8:	0d0c      	lsrs	r4, r1, #20
    73ca:	0524      	lsls	r4, r4, #20
    73cc:	0b36      	lsrs	r6, r6, #12
    73ce:	4326      	orrs	r6, r4
    73d0:	4c43      	ldr	r4, [pc, #268]	; (74e0 <__aeabi_ddiv+0x1e8>)
    73d2:	051b      	lsls	r3, r3, #20
    73d4:	4026      	ands	r6, r4
    73d6:	431e      	orrs	r6, r3
    73d8:	0076      	lsls	r6, r6, #1
    73da:	07d2      	lsls	r2, r2, #31
    73dc:	0876      	lsrs	r6, r6, #1
    73de:	4316      	orrs	r6, r2
    73e0:	4648      	mov	r0, r9
    73e2:	0031      	movs	r1, r6
    73e4:	b007      	add	sp, #28
    73e6:	bc3c      	pop	{r2, r3, r4, r5}
    73e8:	4690      	mov	r8, r2
    73ea:	4699      	mov	r9, r3
    73ec:	46a2      	mov	sl, r4
    73ee:	46ab      	mov	fp, r5
    73f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    73f2:	0033      	movs	r3, r6
    73f4:	4303      	orrs	r3, r0
    73f6:	d04f      	beq.n	7498 <__aeabi_ddiv+0x1a0>
    73f8:	2e00      	cmp	r6, #0
    73fa:	d100      	bne.n	73fe <__aeabi_ddiv+0x106>
    73fc:	e1bc      	b.n	7778 <__aeabi_ddiv+0x480>
    73fe:	0030      	movs	r0, r6
    7400:	f001 fb1c 	bl	8a3c <__clzsi2>
    7404:	0003      	movs	r3, r0
    7406:	3b0b      	subs	r3, #11
    7408:	2b1c      	cmp	r3, #28
    740a:	dd00      	ble.n	740e <__aeabi_ddiv+0x116>
    740c:	e1ad      	b.n	776a <__aeabi_ddiv+0x472>
    740e:	221d      	movs	r2, #29
    7410:	0001      	movs	r1, r0
    7412:	1ad3      	subs	r3, r2, r3
    7414:	3908      	subs	r1, #8
    7416:	003a      	movs	r2, r7
    7418:	408f      	lsls	r7, r1
    741a:	408e      	lsls	r6, r1
    741c:	40da      	lsrs	r2, r3
    741e:	46b9      	mov	r9, r7
    7420:	4316      	orrs	r6, r2
    7422:	4b30      	ldr	r3, [pc, #192]	; (74e4 <__aeabi_ddiv+0x1ec>)
    7424:	2700      	movs	r7, #0
    7426:	469c      	mov	ip, r3
    7428:	2300      	movs	r3, #0
    742a:	4460      	add	r0, ip
    742c:	4244      	negs	r4, r0
    742e:	9302      	str	r3, [sp, #8]
    7430:	e785      	b.n	733e <__aeabi_ddiv+0x46>
    7432:	4653      	mov	r3, sl
    7434:	465a      	mov	r2, fp
    7436:	4313      	orrs	r3, r2
    7438:	d12c      	bne.n	7494 <__aeabi_ddiv+0x19c>
    743a:	2300      	movs	r3, #0
    743c:	2100      	movs	r1, #0
    743e:	469b      	mov	fp, r3
    7440:	3302      	adds	r3, #2
    7442:	e797      	b.n	7374 <__aeabi_ddiv+0x7c>
    7444:	430b      	orrs	r3, r1
    7446:	d020      	beq.n	748a <__aeabi_ddiv+0x192>
    7448:	465b      	mov	r3, fp
    744a:	2b00      	cmp	r3, #0
    744c:	d100      	bne.n	7450 <__aeabi_ddiv+0x158>
    744e:	e19e      	b.n	778e <__aeabi_ddiv+0x496>
    7450:	4658      	mov	r0, fp
    7452:	f001 faf3 	bl	8a3c <__clzsi2>
    7456:	0003      	movs	r3, r0
    7458:	3b0b      	subs	r3, #11
    745a:	2b1c      	cmp	r3, #28
    745c:	dd00      	ble.n	7460 <__aeabi_ddiv+0x168>
    745e:	e18f      	b.n	7780 <__aeabi_ddiv+0x488>
    7460:	0002      	movs	r2, r0
    7462:	4659      	mov	r1, fp
    7464:	3a08      	subs	r2, #8
    7466:	4091      	lsls	r1, r2
    7468:	468b      	mov	fp, r1
    746a:	211d      	movs	r1, #29
    746c:	1acb      	subs	r3, r1, r3
    746e:	4651      	mov	r1, sl
    7470:	40d9      	lsrs	r1, r3
    7472:	000b      	movs	r3, r1
    7474:	4659      	mov	r1, fp
    7476:	430b      	orrs	r3, r1
    7478:	4651      	mov	r1, sl
    747a:	469b      	mov	fp, r3
    747c:	4091      	lsls	r1, r2
    747e:	4b19      	ldr	r3, [pc, #100]	; (74e4 <__aeabi_ddiv+0x1ec>)
    7480:	469c      	mov	ip, r3
    7482:	4460      	add	r0, ip
    7484:	4240      	negs	r0, r0
    7486:	2300      	movs	r3, #0
    7488:	e774      	b.n	7374 <__aeabi_ddiv+0x7c>
    748a:	2300      	movs	r3, #0
    748c:	2100      	movs	r1, #0
    748e:	469b      	mov	fp, r3
    7490:	3301      	adds	r3, #1
    7492:	e76f      	b.n	7374 <__aeabi_ddiv+0x7c>
    7494:	2303      	movs	r3, #3
    7496:	e76d      	b.n	7374 <__aeabi_ddiv+0x7c>
    7498:	2300      	movs	r3, #0
    749a:	4699      	mov	r9, r3
    749c:	3301      	adds	r3, #1
    749e:	2704      	movs	r7, #4
    74a0:	2600      	movs	r6, #0
    74a2:	9302      	str	r3, [sp, #8]
    74a4:	e74b      	b.n	733e <__aeabi_ddiv+0x46>
    74a6:	2303      	movs	r3, #3
    74a8:	270c      	movs	r7, #12
    74aa:	9302      	str	r3, [sp, #8]
    74ac:	e747      	b.n	733e <__aeabi_ddiv+0x46>
    74ae:	2201      	movs	r2, #1
    74b0:	1ad5      	subs	r5, r2, r3
    74b2:	2d38      	cmp	r5, #56	; 0x38
    74b4:	dc00      	bgt.n	74b8 <__aeabi_ddiv+0x1c0>
    74b6:	e1b0      	b.n	781a <__aeabi_ddiv+0x522>
    74b8:	4653      	mov	r3, sl
    74ba:	401a      	ands	r2, r3
    74bc:	2100      	movs	r1, #0
    74be:	2300      	movs	r3, #0
    74c0:	2600      	movs	r6, #0
    74c2:	4689      	mov	r9, r1
    74c4:	e77e      	b.n	73c4 <__aeabi_ddiv+0xcc>
    74c6:	2300      	movs	r3, #0
    74c8:	2680      	movs	r6, #128	; 0x80
    74ca:	4699      	mov	r9, r3
    74cc:	2200      	movs	r2, #0
    74ce:	0336      	lsls	r6, r6, #12
    74d0:	4b00      	ldr	r3, [pc, #0]	; (74d4 <__aeabi_ddiv+0x1dc>)
    74d2:	e777      	b.n	73c4 <__aeabi_ddiv+0xcc>
    74d4:	000007ff 	.word	0x000007ff
    74d8:	fffffc01 	.word	0xfffffc01
    74dc:	00008e58 	.word	0x00008e58
    74e0:	800fffff 	.word	0x800fffff
    74e4:	000003f3 	.word	0x000003f3
    74e8:	455e      	cmp	r6, fp
    74ea:	d900      	bls.n	74ee <__aeabi_ddiv+0x1f6>
    74ec:	e172      	b.n	77d4 <__aeabi_ddiv+0x4dc>
    74ee:	d100      	bne.n	74f2 <__aeabi_ddiv+0x1fa>
    74f0:	e16d      	b.n	77ce <__aeabi_ddiv+0x4d6>
    74f2:	9b01      	ldr	r3, [sp, #4]
    74f4:	464d      	mov	r5, r9
    74f6:	3b01      	subs	r3, #1
    74f8:	9301      	str	r3, [sp, #4]
    74fa:	2300      	movs	r3, #0
    74fc:	0034      	movs	r4, r6
    74fe:	9302      	str	r3, [sp, #8]
    7500:	465b      	mov	r3, fp
    7502:	021e      	lsls	r6, r3, #8
    7504:	0e0b      	lsrs	r3, r1, #24
    7506:	431e      	orrs	r6, r3
    7508:	020b      	lsls	r3, r1, #8
    750a:	9303      	str	r3, [sp, #12]
    750c:	0c33      	lsrs	r3, r6, #16
    750e:	4699      	mov	r9, r3
    7510:	0433      	lsls	r3, r6, #16
    7512:	0c1b      	lsrs	r3, r3, #16
    7514:	4649      	mov	r1, r9
    7516:	0020      	movs	r0, r4
    7518:	9300      	str	r3, [sp, #0]
    751a:	f7fe fd0b 	bl	5f34 <__aeabi_uidiv>
    751e:	9b00      	ldr	r3, [sp, #0]
    7520:	0037      	movs	r7, r6
    7522:	4343      	muls	r3, r0
    7524:	0006      	movs	r6, r0
    7526:	4649      	mov	r1, r9
    7528:	0020      	movs	r0, r4
    752a:	4698      	mov	r8, r3
    752c:	f7fe fd88 	bl	6040 <__aeabi_uidivmod>
    7530:	0c2c      	lsrs	r4, r5, #16
    7532:	0409      	lsls	r1, r1, #16
    7534:	430c      	orrs	r4, r1
    7536:	45a0      	cmp	r8, r4
    7538:	d909      	bls.n	754e <__aeabi_ddiv+0x256>
    753a:	19e4      	adds	r4, r4, r7
    753c:	1e73      	subs	r3, r6, #1
    753e:	42a7      	cmp	r7, r4
    7540:	d900      	bls.n	7544 <__aeabi_ddiv+0x24c>
    7542:	e15c      	b.n	77fe <__aeabi_ddiv+0x506>
    7544:	45a0      	cmp	r8, r4
    7546:	d800      	bhi.n	754a <__aeabi_ddiv+0x252>
    7548:	e159      	b.n	77fe <__aeabi_ddiv+0x506>
    754a:	3e02      	subs	r6, #2
    754c:	19e4      	adds	r4, r4, r7
    754e:	4643      	mov	r3, r8
    7550:	1ae4      	subs	r4, r4, r3
    7552:	4649      	mov	r1, r9
    7554:	0020      	movs	r0, r4
    7556:	f7fe fced 	bl	5f34 <__aeabi_uidiv>
    755a:	0003      	movs	r3, r0
    755c:	9a00      	ldr	r2, [sp, #0]
    755e:	4680      	mov	r8, r0
    7560:	4353      	muls	r3, r2
    7562:	4649      	mov	r1, r9
    7564:	0020      	movs	r0, r4
    7566:	469b      	mov	fp, r3
    7568:	f7fe fd6a 	bl	6040 <__aeabi_uidivmod>
    756c:	042a      	lsls	r2, r5, #16
    756e:	0409      	lsls	r1, r1, #16
    7570:	0c12      	lsrs	r2, r2, #16
    7572:	430a      	orrs	r2, r1
    7574:	4593      	cmp	fp, r2
    7576:	d90d      	bls.n	7594 <__aeabi_ddiv+0x29c>
    7578:	4643      	mov	r3, r8
    757a:	19d2      	adds	r2, r2, r7
    757c:	3b01      	subs	r3, #1
    757e:	4297      	cmp	r7, r2
    7580:	d900      	bls.n	7584 <__aeabi_ddiv+0x28c>
    7582:	e13a      	b.n	77fa <__aeabi_ddiv+0x502>
    7584:	4593      	cmp	fp, r2
    7586:	d800      	bhi.n	758a <__aeabi_ddiv+0x292>
    7588:	e137      	b.n	77fa <__aeabi_ddiv+0x502>
    758a:	2302      	movs	r3, #2
    758c:	425b      	negs	r3, r3
    758e:	469c      	mov	ip, r3
    7590:	19d2      	adds	r2, r2, r7
    7592:	44e0      	add	r8, ip
    7594:	465b      	mov	r3, fp
    7596:	1ad2      	subs	r2, r2, r3
    7598:	4643      	mov	r3, r8
    759a:	0436      	lsls	r6, r6, #16
    759c:	4333      	orrs	r3, r6
    759e:	469b      	mov	fp, r3
    75a0:	9903      	ldr	r1, [sp, #12]
    75a2:	0c18      	lsrs	r0, r3, #16
    75a4:	0c0b      	lsrs	r3, r1, #16
    75a6:	001d      	movs	r5, r3
    75a8:	9305      	str	r3, [sp, #20]
    75aa:	0409      	lsls	r1, r1, #16
    75ac:	465b      	mov	r3, fp
    75ae:	0c09      	lsrs	r1, r1, #16
    75b0:	000c      	movs	r4, r1
    75b2:	041b      	lsls	r3, r3, #16
    75b4:	0c1b      	lsrs	r3, r3, #16
    75b6:	4344      	muls	r4, r0
    75b8:	9104      	str	r1, [sp, #16]
    75ba:	4359      	muls	r1, r3
    75bc:	436b      	muls	r3, r5
    75be:	4368      	muls	r0, r5
    75c0:	191b      	adds	r3, r3, r4
    75c2:	0c0d      	lsrs	r5, r1, #16
    75c4:	18eb      	adds	r3, r5, r3
    75c6:	429c      	cmp	r4, r3
    75c8:	d903      	bls.n	75d2 <__aeabi_ddiv+0x2da>
    75ca:	2480      	movs	r4, #128	; 0x80
    75cc:	0264      	lsls	r4, r4, #9
    75ce:	46a4      	mov	ip, r4
    75d0:	4460      	add	r0, ip
    75d2:	0c1c      	lsrs	r4, r3, #16
    75d4:	0409      	lsls	r1, r1, #16
    75d6:	041b      	lsls	r3, r3, #16
    75d8:	0c09      	lsrs	r1, r1, #16
    75da:	1820      	adds	r0, r4, r0
    75dc:	185d      	adds	r5, r3, r1
    75de:	4282      	cmp	r2, r0
    75e0:	d200      	bcs.n	75e4 <__aeabi_ddiv+0x2ec>
    75e2:	e0de      	b.n	77a2 <__aeabi_ddiv+0x4aa>
    75e4:	d100      	bne.n	75e8 <__aeabi_ddiv+0x2f0>
    75e6:	e0d7      	b.n	7798 <__aeabi_ddiv+0x4a0>
    75e8:	1a16      	subs	r6, r2, r0
    75ea:	9b02      	ldr	r3, [sp, #8]
    75ec:	469c      	mov	ip, r3
    75ee:	1b5d      	subs	r5, r3, r5
    75f0:	45ac      	cmp	ip, r5
    75f2:	419b      	sbcs	r3, r3
    75f4:	425b      	negs	r3, r3
    75f6:	1af6      	subs	r6, r6, r3
    75f8:	42b7      	cmp	r7, r6
    75fa:	d100      	bne.n	75fe <__aeabi_ddiv+0x306>
    75fc:	e106      	b.n	780c <__aeabi_ddiv+0x514>
    75fe:	4649      	mov	r1, r9
    7600:	0030      	movs	r0, r6
    7602:	f7fe fc97 	bl	5f34 <__aeabi_uidiv>
    7606:	9b00      	ldr	r3, [sp, #0]
    7608:	0004      	movs	r4, r0
    760a:	4343      	muls	r3, r0
    760c:	4649      	mov	r1, r9
    760e:	0030      	movs	r0, r6
    7610:	4698      	mov	r8, r3
    7612:	f7fe fd15 	bl	6040 <__aeabi_uidivmod>
    7616:	0c2e      	lsrs	r6, r5, #16
    7618:	0409      	lsls	r1, r1, #16
    761a:	430e      	orrs	r6, r1
    761c:	45b0      	cmp	r8, r6
    761e:	d909      	bls.n	7634 <__aeabi_ddiv+0x33c>
    7620:	19f6      	adds	r6, r6, r7
    7622:	1e63      	subs	r3, r4, #1
    7624:	42b7      	cmp	r7, r6
    7626:	d900      	bls.n	762a <__aeabi_ddiv+0x332>
    7628:	e0f3      	b.n	7812 <__aeabi_ddiv+0x51a>
    762a:	45b0      	cmp	r8, r6
    762c:	d800      	bhi.n	7630 <__aeabi_ddiv+0x338>
    762e:	e0f0      	b.n	7812 <__aeabi_ddiv+0x51a>
    7630:	3c02      	subs	r4, #2
    7632:	19f6      	adds	r6, r6, r7
    7634:	4643      	mov	r3, r8
    7636:	1af3      	subs	r3, r6, r3
    7638:	4649      	mov	r1, r9
    763a:	0018      	movs	r0, r3
    763c:	9302      	str	r3, [sp, #8]
    763e:	f7fe fc79 	bl	5f34 <__aeabi_uidiv>
    7642:	9b00      	ldr	r3, [sp, #0]
    7644:	0006      	movs	r6, r0
    7646:	4343      	muls	r3, r0
    7648:	4649      	mov	r1, r9
    764a:	9802      	ldr	r0, [sp, #8]
    764c:	4698      	mov	r8, r3
    764e:	f7fe fcf7 	bl	6040 <__aeabi_uidivmod>
    7652:	042d      	lsls	r5, r5, #16
    7654:	0409      	lsls	r1, r1, #16
    7656:	0c2d      	lsrs	r5, r5, #16
    7658:	430d      	orrs	r5, r1
    765a:	45a8      	cmp	r8, r5
    765c:	d909      	bls.n	7672 <__aeabi_ddiv+0x37a>
    765e:	19ed      	adds	r5, r5, r7
    7660:	1e73      	subs	r3, r6, #1
    7662:	42af      	cmp	r7, r5
    7664:	d900      	bls.n	7668 <__aeabi_ddiv+0x370>
    7666:	e0d6      	b.n	7816 <__aeabi_ddiv+0x51e>
    7668:	45a8      	cmp	r8, r5
    766a:	d800      	bhi.n	766e <__aeabi_ddiv+0x376>
    766c:	e0d3      	b.n	7816 <__aeabi_ddiv+0x51e>
    766e:	3e02      	subs	r6, #2
    7670:	19ed      	adds	r5, r5, r7
    7672:	0424      	lsls	r4, r4, #16
    7674:	0021      	movs	r1, r4
    7676:	4643      	mov	r3, r8
    7678:	4331      	orrs	r1, r6
    767a:	9e04      	ldr	r6, [sp, #16]
    767c:	9a05      	ldr	r2, [sp, #20]
    767e:	0030      	movs	r0, r6
    7680:	1aed      	subs	r5, r5, r3
    7682:	040b      	lsls	r3, r1, #16
    7684:	0c0c      	lsrs	r4, r1, #16
    7686:	0c1b      	lsrs	r3, r3, #16
    7688:	4358      	muls	r0, r3
    768a:	4366      	muls	r6, r4
    768c:	4353      	muls	r3, r2
    768e:	4354      	muls	r4, r2
    7690:	199a      	adds	r2, r3, r6
    7692:	0c03      	lsrs	r3, r0, #16
    7694:	189b      	adds	r3, r3, r2
    7696:	429e      	cmp	r6, r3
    7698:	d903      	bls.n	76a2 <__aeabi_ddiv+0x3aa>
    769a:	2280      	movs	r2, #128	; 0x80
    769c:	0252      	lsls	r2, r2, #9
    769e:	4694      	mov	ip, r2
    76a0:	4464      	add	r4, ip
    76a2:	0c1a      	lsrs	r2, r3, #16
    76a4:	0400      	lsls	r0, r0, #16
    76a6:	041b      	lsls	r3, r3, #16
    76a8:	0c00      	lsrs	r0, r0, #16
    76aa:	1914      	adds	r4, r2, r4
    76ac:	181b      	adds	r3, r3, r0
    76ae:	42a5      	cmp	r5, r4
    76b0:	d350      	bcc.n	7754 <__aeabi_ddiv+0x45c>
    76b2:	d04d      	beq.n	7750 <__aeabi_ddiv+0x458>
    76b4:	2301      	movs	r3, #1
    76b6:	4319      	orrs	r1, r3
    76b8:	4a96      	ldr	r2, [pc, #600]	; (7914 <__aeabi_ddiv+0x61c>)
    76ba:	9b01      	ldr	r3, [sp, #4]
    76bc:	4694      	mov	ip, r2
    76be:	4463      	add	r3, ip
    76c0:	2b00      	cmp	r3, #0
    76c2:	dc00      	bgt.n	76c6 <__aeabi_ddiv+0x3ce>
    76c4:	e6f3      	b.n	74ae <__aeabi_ddiv+0x1b6>
    76c6:	074a      	lsls	r2, r1, #29
    76c8:	d009      	beq.n	76de <__aeabi_ddiv+0x3e6>
    76ca:	220f      	movs	r2, #15
    76cc:	400a      	ands	r2, r1
    76ce:	2a04      	cmp	r2, #4
    76d0:	d005      	beq.n	76de <__aeabi_ddiv+0x3e6>
    76d2:	1d0a      	adds	r2, r1, #4
    76d4:	428a      	cmp	r2, r1
    76d6:	4189      	sbcs	r1, r1
    76d8:	4249      	negs	r1, r1
    76da:	448b      	add	fp, r1
    76dc:	0011      	movs	r1, r2
    76de:	465a      	mov	r2, fp
    76e0:	01d2      	lsls	r2, r2, #7
    76e2:	d508      	bpl.n	76f6 <__aeabi_ddiv+0x3fe>
    76e4:	465a      	mov	r2, fp
    76e6:	4b8c      	ldr	r3, [pc, #560]	; (7918 <__aeabi_ddiv+0x620>)
    76e8:	401a      	ands	r2, r3
    76ea:	4693      	mov	fp, r2
    76ec:	2280      	movs	r2, #128	; 0x80
    76ee:	00d2      	lsls	r2, r2, #3
    76f0:	4694      	mov	ip, r2
    76f2:	9b01      	ldr	r3, [sp, #4]
    76f4:	4463      	add	r3, ip
    76f6:	4a89      	ldr	r2, [pc, #548]	; (791c <__aeabi_ddiv+0x624>)
    76f8:	4293      	cmp	r3, r2
    76fa:	dd00      	ble.n	76fe <__aeabi_ddiv+0x406>
    76fc:	e65b      	b.n	73b6 <__aeabi_ddiv+0xbe>
    76fe:	465a      	mov	r2, fp
    7700:	08c9      	lsrs	r1, r1, #3
    7702:	0750      	lsls	r0, r2, #29
    7704:	4308      	orrs	r0, r1
    7706:	0256      	lsls	r6, r2, #9
    7708:	4651      	mov	r1, sl
    770a:	2201      	movs	r2, #1
    770c:	055b      	lsls	r3, r3, #21
    770e:	4681      	mov	r9, r0
    7710:	0b36      	lsrs	r6, r6, #12
    7712:	0d5b      	lsrs	r3, r3, #21
    7714:	400a      	ands	r2, r1
    7716:	e655      	b.n	73c4 <__aeabi_ddiv+0xcc>
    7718:	2380      	movs	r3, #128	; 0x80
    771a:	031b      	lsls	r3, r3, #12
    771c:	421e      	tst	r6, r3
    771e:	d011      	beq.n	7744 <__aeabi_ddiv+0x44c>
    7720:	465a      	mov	r2, fp
    7722:	421a      	tst	r2, r3
    7724:	d10e      	bne.n	7744 <__aeabi_ddiv+0x44c>
    7726:	465e      	mov	r6, fp
    7728:	431e      	orrs	r6, r3
    772a:	0336      	lsls	r6, r6, #12
    772c:	0b36      	lsrs	r6, r6, #12
    772e:	002a      	movs	r2, r5
    7730:	4689      	mov	r9, r1
    7732:	4b7b      	ldr	r3, [pc, #492]	; (7920 <__aeabi_ddiv+0x628>)
    7734:	e646      	b.n	73c4 <__aeabi_ddiv+0xcc>
    7736:	2b03      	cmp	r3, #3
    7738:	d100      	bne.n	773c <__aeabi_ddiv+0x444>
    773a:	e0e1      	b.n	7900 <__aeabi_ddiv+0x608>
    773c:	2b01      	cmp	r3, #1
    773e:	d1bb      	bne.n	76b8 <__aeabi_ddiv+0x3c0>
    7740:	401a      	ands	r2, r3
    7742:	e6bb      	b.n	74bc <__aeabi_ddiv+0x1c4>
    7744:	431e      	orrs	r6, r3
    7746:	0336      	lsls	r6, r6, #12
    7748:	0b36      	lsrs	r6, r6, #12
    774a:	4642      	mov	r2, r8
    774c:	4b74      	ldr	r3, [pc, #464]	; (7920 <__aeabi_ddiv+0x628>)
    774e:	e639      	b.n	73c4 <__aeabi_ddiv+0xcc>
    7750:	2b00      	cmp	r3, #0
    7752:	d0b1      	beq.n	76b8 <__aeabi_ddiv+0x3c0>
    7754:	197d      	adds	r5, r7, r5
    7756:	1e4a      	subs	r2, r1, #1
    7758:	42af      	cmp	r7, r5
    775a:	d952      	bls.n	7802 <__aeabi_ddiv+0x50a>
    775c:	0011      	movs	r1, r2
    775e:	42a5      	cmp	r5, r4
    7760:	d1a8      	bne.n	76b4 <__aeabi_ddiv+0x3bc>
    7762:	9a03      	ldr	r2, [sp, #12]
    7764:	429a      	cmp	r2, r3
    7766:	d1a5      	bne.n	76b4 <__aeabi_ddiv+0x3bc>
    7768:	e7a6      	b.n	76b8 <__aeabi_ddiv+0x3c0>
    776a:	0003      	movs	r3, r0
    776c:	003e      	movs	r6, r7
    776e:	3b28      	subs	r3, #40	; 0x28
    7770:	409e      	lsls	r6, r3
    7772:	2300      	movs	r3, #0
    7774:	4699      	mov	r9, r3
    7776:	e654      	b.n	7422 <__aeabi_ddiv+0x12a>
    7778:	f001 f960 	bl	8a3c <__clzsi2>
    777c:	3020      	adds	r0, #32
    777e:	e641      	b.n	7404 <__aeabi_ddiv+0x10c>
    7780:	0003      	movs	r3, r0
    7782:	4652      	mov	r2, sl
    7784:	3b28      	subs	r3, #40	; 0x28
    7786:	409a      	lsls	r2, r3
    7788:	2100      	movs	r1, #0
    778a:	4693      	mov	fp, r2
    778c:	e677      	b.n	747e <__aeabi_ddiv+0x186>
    778e:	4650      	mov	r0, sl
    7790:	f001 f954 	bl	8a3c <__clzsi2>
    7794:	3020      	adds	r0, #32
    7796:	e65e      	b.n	7456 <__aeabi_ddiv+0x15e>
    7798:	9b02      	ldr	r3, [sp, #8]
    779a:	2600      	movs	r6, #0
    779c:	42ab      	cmp	r3, r5
    779e:	d300      	bcc.n	77a2 <__aeabi_ddiv+0x4aa>
    77a0:	e723      	b.n	75ea <__aeabi_ddiv+0x2f2>
    77a2:	9e03      	ldr	r6, [sp, #12]
    77a4:	9902      	ldr	r1, [sp, #8]
    77a6:	46b4      	mov	ip, r6
    77a8:	4461      	add	r1, ip
    77aa:	4688      	mov	r8, r1
    77ac:	45b0      	cmp	r8, r6
    77ae:	41b6      	sbcs	r6, r6
    77b0:	465b      	mov	r3, fp
    77b2:	4276      	negs	r6, r6
    77b4:	19f6      	adds	r6, r6, r7
    77b6:	18b2      	adds	r2, r6, r2
    77b8:	3b01      	subs	r3, #1
    77ba:	9102      	str	r1, [sp, #8]
    77bc:	4297      	cmp	r7, r2
    77be:	d213      	bcs.n	77e8 <__aeabi_ddiv+0x4f0>
    77c0:	4290      	cmp	r0, r2
    77c2:	d84f      	bhi.n	7864 <__aeabi_ddiv+0x56c>
    77c4:	d100      	bne.n	77c8 <__aeabi_ddiv+0x4d0>
    77c6:	e08e      	b.n	78e6 <__aeabi_ddiv+0x5ee>
    77c8:	1a16      	subs	r6, r2, r0
    77ca:	469b      	mov	fp, r3
    77cc:	e70d      	b.n	75ea <__aeabi_ddiv+0x2f2>
    77ce:	4589      	cmp	r9, r1
    77d0:	d200      	bcs.n	77d4 <__aeabi_ddiv+0x4dc>
    77d2:	e68e      	b.n	74f2 <__aeabi_ddiv+0x1fa>
    77d4:	0874      	lsrs	r4, r6, #1
    77d6:	464b      	mov	r3, r9
    77d8:	07f6      	lsls	r6, r6, #31
    77da:	0035      	movs	r5, r6
    77dc:	085b      	lsrs	r3, r3, #1
    77de:	431d      	orrs	r5, r3
    77e0:	464b      	mov	r3, r9
    77e2:	07db      	lsls	r3, r3, #31
    77e4:	9302      	str	r3, [sp, #8]
    77e6:	e68b      	b.n	7500 <__aeabi_ddiv+0x208>
    77e8:	4297      	cmp	r7, r2
    77ea:	d1ed      	bne.n	77c8 <__aeabi_ddiv+0x4d0>
    77ec:	9903      	ldr	r1, [sp, #12]
    77ee:	9c02      	ldr	r4, [sp, #8]
    77f0:	42a1      	cmp	r1, r4
    77f2:	d9e5      	bls.n	77c0 <__aeabi_ddiv+0x4c8>
    77f4:	1a3e      	subs	r6, r7, r0
    77f6:	469b      	mov	fp, r3
    77f8:	e6f7      	b.n	75ea <__aeabi_ddiv+0x2f2>
    77fa:	4698      	mov	r8, r3
    77fc:	e6ca      	b.n	7594 <__aeabi_ddiv+0x29c>
    77fe:	001e      	movs	r6, r3
    7800:	e6a5      	b.n	754e <__aeabi_ddiv+0x256>
    7802:	42ac      	cmp	r4, r5
    7804:	d83e      	bhi.n	7884 <__aeabi_ddiv+0x58c>
    7806:	d074      	beq.n	78f2 <__aeabi_ddiv+0x5fa>
    7808:	0011      	movs	r1, r2
    780a:	e753      	b.n	76b4 <__aeabi_ddiv+0x3bc>
    780c:	2101      	movs	r1, #1
    780e:	4249      	negs	r1, r1
    7810:	e752      	b.n	76b8 <__aeabi_ddiv+0x3c0>
    7812:	001c      	movs	r4, r3
    7814:	e70e      	b.n	7634 <__aeabi_ddiv+0x33c>
    7816:	001e      	movs	r6, r3
    7818:	e72b      	b.n	7672 <__aeabi_ddiv+0x37a>
    781a:	2d1f      	cmp	r5, #31
    781c:	dc3c      	bgt.n	7898 <__aeabi_ddiv+0x5a0>
    781e:	2320      	movs	r3, #32
    7820:	000a      	movs	r2, r1
    7822:	4658      	mov	r0, fp
    7824:	1b5b      	subs	r3, r3, r5
    7826:	4098      	lsls	r0, r3
    7828:	40ea      	lsrs	r2, r5
    782a:	4099      	lsls	r1, r3
    782c:	4302      	orrs	r2, r0
    782e:	1e48      	subs	r0, r1, #1
    7830:	4181      	sbcs	r1, r0
    7832:	465e      	mov	r6, fp
    7834:	4311      	orrs	r1, r2
    7836:	40ee      	lsrs	r6, r5
    7838:	074b      	lsls	r3, r1, #29
    783a:	d009      	beq.n	7850 <__aeabi_ddiv+0x558>
    783c:	230f      	movs	r3, #15
    783e:	400b      	ands	r3, r1
    7840:	2b04      	cmp	r3, #4
    7842:	d005      	beq.n	7850 <__aeabi_ddiv+0x558>
    7844:	000b      	movs	r3, r1
    7846:	1d19      	adds	r1, r3, #4
    7848:	4299      	cmp	r1, r3
    784a:	419b      	sbcs	r3, r3
    784c:	425b      	negs	r3, r3
    784e:	18f6      	adds	r6, r6, r3
    7850:	0233      	lsls	r3, r6, #8
    7852:	d53c      	bpl.n	78ce <__aeabi_ddiv+0x5d6>
    7854:	4653      	mov	r3, sl
    7856:	2201      	movs	r2, #1
    7858:	2100      	movs	r1, #0
    785a:	401a      	ands	r2, r3
    785c:	2600      	movs	r6, #0
    785e:	2301      	movs	r3, #1
    7860:	4689      	mov	r9, r1
    7862:	e5af      	b.n	73c4 <__aeabi_ddiv+0xcc>
    7864:	2302      	movs	r3, #2
    7866:	425b      	negs	r3, r3
    7868:	469c      	mov	ip, r3
    786a:	9c03      	ldr	r4, [sp, #12]
    786c:	44e3      	add	fp, ip
    786e:	46a4      	mov	ip, r4
    7870:	9b02      	ldr	r3, [sp, #8]
    7872:	4463      	add	r3, ip
    7874:	4698      	mov	r8, r3
    7876:	45a0      	cmp	r8, r4
    7878:	41b6      	sbcs	r6, r6
    787a:	4276      	negs	r6, r6
    787c:	19f6      	adds	r6, r6, r7
    787e:	9302      	str	r3, [sp, #8]
    7880:	18b2      	adds	r2, r6, r2
    7882:	e6b1      	b.n	75e8 <__aeabi_ddiv+0x2f0>
    7884:	9803      	ldr	r0, [sp, #12]
    7886:	1e8a      	subs	r2, r1, #2
    7888:	0041      	lsls	r1, r0, #1
    788a:	4281      	cmp	r1, r0
    788c:	41b6      	sbcs	r6, r6
    788e:	4276      	negs	r6, r6
    7890:	19f6      	adds	r6, r6, r7
    7892:	19ad      	adds	r5, r5, r6
    7894:	9103      	str	r1, [sp, #12]
    7896:	e761      	b.n	775c <__aeabi_ddiv+0x464>
    7898:	221f      	movs	r2, #31
    789a:	4252      	negs	r2, r2
    789c:	1ad3      	subs	r3, r2, r3
    789e:	465a      	mov	r2, fp
    78a0:	40da      	lsrs	r2, r3
    78a2:	0013      	movs	r3, r2
    78a4:	2d20      	cmp	r5, #32
    78a6:	d029      	beq.n	78fc <__aeabi_ddiv+0x604>
    78a8:	2240      	movs	r2, #64	; 0x40
    78aa:	4658      	mov	r0, fp
    78ac:	1b55      	subs	r5, r2, r5
    78ae:	40a8      	lsls	r0, r5
    78b0:	4301      	orrs	r1, r0
    78b2:	1e48      	subs	r0, r1, #1
    78b4:	4181      	sbcs	r1, r0
    78b6:	2007      	movs	r0, #7
    78b8:	430b      	orrs	r3, r1
    78ba:	4018      	ands	r0, r3
    78bc:	2600      	movs	r6, #0
    78be:	2800      	cmp	r0, #0
    78c0:	d009      	beq.n	78d6 <__aeabi_ddiv+0x5de>
    78c2:	220f      	movs	r2, #15
    78c4:	2600      	movs	r6, #0
    78c6:	401a      	ands	r2, r3
    78c8:	0019      	movs	r1, r3
    78ca:	2a04      	cmp	r2, #4
    78cc:	d1bb      	bne.n	7846 <__aeabi_ddiv+0x54e>
    78ce:	000b      	movs	r3, r1
    78d0:	0770      	lsls	r0, r6, #29
    78d2:	0276      	lsls	r6, r6, #9
    78d4:	0b36      	lsrs	r6, r6, #12
    78d6:	08db      	lsrs	r3, r3, #3
    78d8:	4303      	orrs	r3, r0
    78da:	4699      	mov	r9, r3
    78dc:	2201      	movs	r2, #1
    78de:	4653      	mov	r3, sl
    78e0:	401a      	ands	r2, r3
    78e2:	2300      	movs	r3, #0
    78e4:	e56e      	b.n	73c4 <__aeabi_ddiv+0xcc>
    78e6:	9902      	ldr	r1, [sp, #8]
    78e8:	428d      	cmp	r5, r1
    78ea:	d8bb      	bhi.n	7864 <__aeabi_ddiv+0x56c>
    78ec:	469b      	mov	fp, r3
    78ee:	2600      	movs	r6, #0
    78f0:	e67b      	b.n	75ea <__aeabi_ddiv+0x2f2>
    78f2:	9803      	ldr	r0, [sp, #12]
    78f4:	4298      	cmp	r0, r3
    78f6:	d3c5      	bcc.n	7884 <__aeabi_ddiv+0x58c>
    78f8:	0011      	movs	r1, r2
    78fa:	e732      	b.n	7762 <__aeabi_ddiv+0x46a>
    78fc:	2000      	movs	r0, #0
    78fe:	e7d7      	b.n	78b0 <__aeabi_ddiv+0x5b8>
    7900:	2680      	movs	r6, #128	; 0x80
    7902:	465b      	mov	r3, fp
    7904:	0336      	lsls	r6, r6, #12
    7906:	431e      	orrs	r6, r3
    7908:	0336      	lsls	r6, r6, #12
    790a:	0b36      	lsrs	r6, r6, #12
    790c:	9a00      	ldr	r2, [sp, #0]
    790e:	4689      	mov	r9, r1
    7910:	4b03      	ldr	r3, [pc, #12]	; (7920 <__aeabi_ddiv+0x628>)
    7912:	e557      	b.n	73c4 <__aeabi_ddiv+0xcc>
    7914:	000003ff 	.word	0x000003ff
    7918:	feffffff 	.word	0xfeffffff
    791c:	000007fe 	.word	0x000007fe
    7920:	000007ff 	.word	0x000007ff

00007924 <__eqdf2>:
    7924:	b5f0      	push	{r4, r5, r6, r7, lr}
    7926:	465f      	mov	r7, fp
    7928:	4656      	mov	r6, sl
    792a:	464d      	mov	r5, r9
    792c:	4644      	mov	r4, r8
    792e:	b4f0      	push	{r4, r5, r6, r7}
    7930:	031f      	lsls	r7, r3, #12
    7932:	005c      	lsls	r4, r3, #1
    7934:	0fdb      	lsrs	r3, r3, #31
    7936:	469a      	mov	sl, r3
    7938:	4b19      	ldr	r3, [pc, #100]	; (79a0 <__eqdf2+0x7c>)
    793a:	030e      	lsls	r6, r1, #12
    793c:	004d      	lsls	r5, r1, #1
    793e:	0fc9      	lsrs	r1, r1, #31
    7940:	4680      	mov	r8, r0
    7942:	0b36      	lsrs	r6, r6, #12
    7944:	0d6d      	lsrs	r5, r5, #21
    7946:	468b      	mov	fp, r1
    7948:	4691      	mov	r9, r2
    794a:	0b3f      	lsrs	r7, r7, #12
    794c:	0d64      	lsrs	r4, r4, #21
    794e:	429d      	cmp	r5, r3
    7950:	d019      	beq.n	7986 <__eqdf2+0x62>
    7952:	4b13      	ldr	r3, [pc, #76]	; (79a0 <__eqdf2+0x7c>)
    7954:	429c      	cmp	r4, r3
    7956:	d01b      	beq.n	7990 <__eqdf2+0x6c>
    7958:	2301      	movs	r3, #1
    795a:	42a5      	cmp	r5, r4
    795c:	d006      	beq.n	796c <__eqdf2+0x48>
    795e:	0018      	movs	r0, r3
    7960:	bc3c      	pop	{r2, r3, r4, r5}
    7962:	4690      	mov	r8, r2
    7964:	4699      	mov	r9, r3
    7966:	46a2      	mov	sl, r4
    7968:	46ab      	mov	fp, r5
    796a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    796c:	42be      	cmp	r6, r7
    796e:	d1f6      	bne.n	795e <__eqdf2+0x3a>
    7970:	45c8      	cmp	r8, r9
    7972:	d1f4      	bne.n	795e <__eqdf2+0x3a>
    7974:	45d3      	cmp	fp, sl
    7976:	d010      	beq.n	799a <__eqdf2+0x76>
    7978:	2d00      	cmp	r5, #0
    797a:	d1f0      	bne.n	795e <__eqdf2+0x3a>
    797c:	4330      	orrs	r0, r6
    797e:	0003      	movs	r3, r0
    7980:	1e5a      	subs	r2, r3, #1
    7982:	4193      	sbcs	r3, r2
    7984:	e7eb      	b.n	795e <__eqdf2+0x3a>
    7986:	0031      	movs	r1, r6
    7988:	2301      	movs	r3, #1
    798a:	4301      	orrs	r1, r0
    798c:	d1e7      	bne.n	795e <__eqdf2+0x3a>
    798e:	e7e0      	b.n	7952 <__eqdf2+0x2e>
    7990:	433a      	orrs	r2, r7
    7992:	2301      	movs	r3, #1
    7994:	2a00      	cmp	r2, #0
    7996:	d1e2      	bne.n	795e <__eqdf2+0x3a>
    7998:	e7de      	b.n	7958 <__eqdf2+0x34>
    799a:	2300      	movs	r3, #0
    799c:	e7df      	b.n	795e <__eqdf2+0x3a>
    799e:	46c0      	nop			; (mov r8, r8)
    79a0:	000007ff 	.word	0x000007ff

000079a4 <__gedf2>:
    79a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    79a6:	465f      	mov	r7, fp
    79a8:	4644      	mov	r4, r8
    79aa:	4656      	mov	r6, sl
    79ac:	464d      	mov	r5, r9
    79ae:	b4f0      	push	{r4, r5, r6, r7}
    79b0:	031f      	lsls	r7, r3, #12
    79b2:	0b3c      	lsrs	r4, r7, #12
    79b4:	4f2c      	ldr	r7, [pc, #176]	; (7a68 <__gedf2+0xc4>)
    79b6:	030e      	lsls	r6, r1, #12
    79b8:	004d      	lsls	r5, r1, #1
    79ba:	46a3      	mov	fp, r4
    79bc:	005c      	lsls	r4, r3, #1
    79be:	4684      	mov	ip, r0
    79c0:	0b36      	lsrs	r6, r6, #12
    79c2:	0d6d      	lsrs	r5, r5, #21
    79c4:	0fc9      	lsrs	r1, r1, #31
    79c6:	4690      	mov	r8, r2
    79c8:	0d64      	lsrs	r4, r4, #21
    79ca:	0fdb      	lsrs	r3, r3, #31
    79cc:	42bd      	cmp	r5, r7
    79ce:	d02b      	beq.n	7a28 <__gedf2+0x84>
    79d0:	4f25      	ldr	r7, [pc, #148]	; (7a68 <__gedf2+0xc4>)
    79d2:	42bc      	cmp	r4, r7
    79d4:	d02e      	beq.n	7a34 <__gedf2+0x90>
    79d6:	2d00      	cmp	r5, #0
    79d8:	d10e      	bne.n	79f8 <__gedf2+0x54>
    79da:	4330      	orrs	r0, r6
    79dc:	0007      	movs	r7, r0
    79de:	4681      	mov	r9, r0
    79e0:	4278      	negs	r0, r7
    79e2:	4178      	adcs	r0, r7
    79e4:	2c00      	cmp	r4, #0
    79e6:	d117      	bne.n	7a18 <__gedf2+0x74>
    79e8:	465f      	mov	r7, fp
    79ea:	433a      	orrs	r2, r7
    79ec:	d114      	bne.n	7a18 <__gedf2+0x74>
    79ee:	464b      	mov	r3, r9
    79f0:	2000      	movs	r0, #0
    79f2:	2b00      	cmp	r3, #0
    79f4:	d00a      	beq.n	7a0c <__gedf2+0x68>
    79f6:	e006      	b.n	7a06 <__gedf2+0x62>
    79f8:	2c00      	cmp	r4, #0
    79fa:	d102      	bne.n	7a02 <__gedf2+0x5e>
    79fc:	4658      	mov	r0, fp
    79fe:	4302      	orrs	r2, r0
    7a00:	d001      	beq.n	7a06 <__gedf2+0x62>
    7a02:	4299      	cmp	r1, r3
    7a04:	d01a      	beq.n	7a3c <__gedf2+0x98>
    7a06:	2301      	movs	r3, #1
    7a08:	4248      	negs	r0, r1
    7a0a:	4318      	orrs	r0, r3
    7a0c:	bc3c      	pop	{r2, r3, r4, r5}
    7a0e:	4690      	mov	r8, r2
    7a10:	4699      	mov	r9, r3
    7a12:	46a2      	mov	sl, r4
    7a14:	46ab      	mov	fp, r5
    7a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a18:	2800      	cmp	r0, #0
    7a1a:	d0f2      	beq.n	7a02 <__gedf2+0x5e>
    7a1c:	4258      	negs	r0, r3
    7a1e:	4158      	adcs	r0, r3
    7a20:	2201      	movs	r2, #1
    7a22:	4240      	negs	r0, r0
    7a24:	4310      	orrs	r0, r2
    7a26:	e7f1      	b.n	7a0c <__gedf2+0x68>
    7a28:	0037      	movs	r7, r6
    7a2a:	4307      	orrs	r7, r0
    7a2c:	d0d0      	beq.n	79d0 <__gedf2+0x2c>
    7a2e:	2002      	movs	r0, #2
    7a30:	4240      	negs	r0, r0
    7a32:	e7eb      	b.n	7a0c <__gedf2+0x68>
    7a34:	465f      	mov	r7, fp
    7a36:	4317      	orrs	r7, r2
    7a38:	d0cd      	beq.n	79d6 <__gedf2+0x32>
    7a3a:	e7f8      	b.n	7a2e <__gedf2+0x8a>
    7a3c:	42a5      	cmp	r5, r4
    7a3e:	dce2      	bgt.n	7a06 <__gedf2+0x62>
    7a40:	db05      	blt.n	7a4e <__gedf2+0xaa>
    7a42:	455e      	cmp	r6, fp
    7a44:	d8df      	bhi.n	7a06 <__gedf2+0x62>
    7a46:	d008      	beq.n	7a5a <__gedf2+0xb6>
    7a48:	2000      	movs	r0, #0
    7a4a:	455e      	cmp	r6, fp
    7a4c:	d2de      	bcs.n	7a0c <__gedf2+0x68>
    7a4e:	4248      	negs	r0, r1
    7a50:	4148      	adcs	r0, r1
    7a52:	2301      	movs	r3, #1
    7a54:	4240      	negs	r0, r0
    7a56:	4318      	orrs	r0, r3
    7a58:	e7d8      	b.n	7a0c <__gedf2+0x68>
    7a5a:	45c4      	cmp	ip, r8
    7a5c:	d8d3      	bhi.n	7a06 <__gedf2+0x62>
    7a5e:	2000      	movs	r0, #0
    7a60:	45c4      	cmp	ip, r8
    7a62:	d3f4      	bcc.n	7a4e <__gedf2+0xaa>
    7a64:	e7d2      	b.n	7a0c <__gedf2+0x68>
    7a66:	46c0      	nop			; (mov r8, r8)
    7a68:	000007ff 	.word	0x000007ff

00007a6c <__ledf2>:
    7a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a6e:	465f      	mov	r7, fp
    7a70:	464d      	mov	r5, r9
    7a72:	4644      	mov	r4, r8
    7a74:	4656      	mov	r6, sl
    7a76:	b4f0      	push	{r4, r5, r6, r7}
    7a78:	031c      	lsls	r4, r3, #12
    7a7a:	0b24      	lsrs	r4, r4, #12
    7a7c:	46a4      	mov	ip, r4
    7a7e:	4c2f      	ldr	r4, [pc, #188]	; (7b3c <__ledf2+0xd0>)
    7a80:	030f      	lsls	r7, r1, #12
    7a82:	004d      	lsls	r5, r1, #1
    7a84:	005e      	lsls	r6, r3, #1
    7a86:	0fc9      	lsrs	r1, r1, #31
    7a88:	4680      	mov	r8, r0
    7a8a:	0b3f      	lsrs	r7, r7, #12
    7a8c:	0d6d      	lsrs	r5, r5, #21
    7a8e:	468b      	mov	fp, r1
    7a90:	4691      	mov	r9, r2
    7a92:	0d76      	lsrs	r6, r6, #21
    7a94:	0fdb      	lsrs	r3, r3, #31
    7a96:	42a5      	cmp	r5, r4
    7a98:	d020      	beq.n	7adc <__ledf2+0x70>
    7a9a:	4c28      	ldr	r4, [pc, #160]	; (7b3c <__ledf2+0xd0>)
    7a9c:	42a6      	cmp	r6, r4
    7a9e:	d022      	beq.n	7ae6 <__ledf2+0x7a>
    7aa0:	2d00      	cmp	r5, #0
    7aa2:	d112      	bne.n	7aca <__ledf2+0x5e>
    7aa4:	4338      	orrs	r0, r7
    7aa6:	4244      	negs	r4, r0
    7aa8:	4144      	adcs	r4, r0
    7aaa:	2e00      	cmp	r6, #0
    7aac:	d020      	beq.n	7af0 <__ledf2+0x84>
    7aae:	2c00      	cmp	r4, #0
    7ab0:	d00d      	beq.n	7ace <__ledf2+0x62>
    7ab2:	425c      	negs	r4, r3
    7ab4:	4163      	adcs	r3, r4
    7ab6:	2401      	movs	r4, #1
    7ab8:	425b      	negs	r3, r3
    7aba:	431c      	orrs	r4, r3
    7abc:	0020      	movs	r0, r4
    7abe:	bc3c      	pop	{r2, r3, r4, r5}
    7ac0:	4690      	mov	r8, r2
    7ac2:	4699      	mov	r9, r3
    7ac4:	46a2      	mov	sl, r4
    7ac6:	46ab      	mov	fp, r5
    7ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7aca:	2e00      	cmp	r6, #0
    7acc:	d017      	beq.n	7afe <__ledf2+0x92>
    7ace:	455b      	cmp	r3, fp
    7ad0:	d019      	beq.n	7b06 <__ledf2+0x9a>
    7ad2:	465b      	mov	r3, fp
    7ad4:	425c      	negs	r4, r3
    7ad6:	2301      	movs	r3, #1
    7ad8:	431c      	orrs	r4, r3
    7ada:	e7ef      	b.n	7abc <__ledf2+0x50>
    7adc:	0039      	movs	r1, r7
    7ade:	2402      	movs	r4, #2
    7ae0:	4301      	orrs	r1, r0
    7ae2:	d1eb      	bne.n	7abc <__ledf2+0x50>
    7ae4:	e7d9      	b.n	7a9a <__ledf2+0x2e>
    7ae6:	4661      	mov	r1, ip
    7ae8:	2402      	movs	r4, #2
    7aea:	4311      	orrs	r1, r2
    7aec:	d1e6      	bne.n	7abc <__ledf2+0x50>
    7aee:	e7d7      	b.n	7aa0 <__ledf2+0x34>
    7af0:	4661      	mov	r1, ip
    7af2:	430a      	orrs	r2, r1
    7af4:	d1db      	bne.n	7aae <__ledf2+0x42>
    7af6:	2400      	movs	r4, #0
    7af8:	2800      	cmp	r0, #0
    7afa:	d0df      	beq.n	7abc <__ledf2+0x50>
    7afc:	e7e9      	b.n	7ad2 <__ledf2+0x66>
    7afe:	4661      	mov	r1, ip
    7b00:	430a      	orrs	r2, r1
    7b02:	d1e4      	bne.n	7ace <__ledf2+0x62>
    7b04:	e7e5      	b.n	7ad2 <__ledf2+0x66>
    7b06:	42b5      	cmp	r5, r6
    7b08:	dd03      	ble.n	7b12 <__ledf2+0xa6>
    7b0a:	2201      	movs	r2, #1
    7b0c:	425c      	negs	r4, r3
    7b0e:	4314      	orrs	r4, r2
    7b10:	e7d4      	b.n	7abc <__ledf2+0x50>
    7b12:	42b5      	cmp	r5, r6
    7b14:	dbcd      	blt.n	7ab2 <__ledf2+0x46>
    7b16:	4567      	cmp	r7, ip
    7b18:	d8db      	bhi.n	7ad2 <__ledf2+0x66>
    7b1a:	d009      	beq.n	7b30 <__ledf2+0xc4>
    7b1c:	2400      	movs	r4, #0
    7b1e:	4567      	cmp	r7, ip
    7b20:	d2cc      	bcs.n	7abc <__ledf2+0x50>
    7b22:	4659      	mov	r1, fp
    7b24:	424c      	negs	r4, r1
    7b26:	4161      	adcs	r1, r4
    7b28:	2401      	movs	r4, #1
    7b2a:	4249      	negs	r1, r1
    7b2c:	430c      	orrs	r4, r1
    7b2e:	e7c5      	b.n	7abc <__ledf2+0x50>
    7b30:	45c8      	cmp	r8, r9
    7b32:	d8ce      	bhi.n	7ad2 <__ledf2+0x66>
    7b34:	2400      	movs	r4, #0
    7b36:	45c8      	cmp	r8, r9
    7b38:	d3f3      	bcc.n	7b22 <__ledf2+0xb6>
    7b3a:	e7bf      	b.n	7abc <__ledf2+0x50>
    7b3c:	000007ff 	.word	0x000007ff

00007b40 <__aeabi_dmul>:
    7b40:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b42:	465f      	mov	r7, fp
    7b44:	4656      	mov	r6, sl
    7b46:	464d      	mov	r5, r9
    7b48:	4644      	mov	r4, r8
    7b4a:	b4f0      	push	{r4, r5, r6, r7}
    7b4c:	030d      	lsls	r5, r1, #12
    7b4e:	4699      	mov	r9, r3
    7b50:	004e      	lsls	r6, r1, #1
    7b52:	0b2b      	lsrs	r3, r5, #12
    7b54:	b087      	sub	sp, #28
    7b56:	0007      	movs	r7, r0
    7b58:	4692      	mov	sl, r2
    7b5a:	4680      	mov	r8, r0
    7b5c:	469b      	mov	fp, r3
    7b5e:	0d76      	lsrs	r6, r6, #21
    7b60:	0fcc      	lsrs	r4, r1, #31
    7b62:	2e00      	cmp	r6, #0
    7b64:	d069      	beq.n	7c3a <__aeabi_dmul+0xfa>
    7b66:	4b6d      	ldr	r3, [pc, #436]	; (7d1c <__aeabi_dmul+0x1dc>)
    7b68:	429e      	cmp	r6, r3
    7b6a:	d035      	beq.n	7bd8 <__aeabi_dmul+0x98>
    7b6c:	465b      	mov	r3, fp
    7b6e:	2280      	movs	r2, #128	; 0x80
    7b70:	00dd      	lsls	r5, r3, #3
    7b72:	0412      	lsls	r2, r2, #16
    7b74:	0f43      	lsrs	r3, r0, #29
    7b76:	4313      	orrs	r3, r2
    7b78:	432b      	orrs	r3, r5
    7b7a:	469b      	mov	fp, r3
    7b7c:	00c3      	lsls	r3, r0, #3
    7b7e:	4698      	mov	r8, r3
    7b80:	4b67      	ldr	r3, [pc, #412]	; (7d20 <__aeabi_dmul+0x1e0>)
    7b82:	2700      	movs	r7, #0
    7b84:	469c      	mov	ip, r3
    7b86:	2300      	movs	r3, #0
    7b88:	4466      	add	r6, ip
    7b8a:	9301      	str	r3, [sp, #4]
    7b8c:	464a      	mov	r2, r9
    7b8e:	0315      	lsls	r5, r2, #12
    7b90:	0050      	lsls	r0, r2, #1
    7b92:	0fd2      	lsrs	r2, r2, #31
    7b94:	4653      	mov	r3, sl
    7b96:	0b2d      	lsrs	r5, r5, #12
    7b98:	0d40      	lsrs	r0, r0, #21
    7b9a:	4691      	mov	r9, r2
    7b9c:	d100      	bne.n	7ba0 <__aeabi_dmul+0x60>
    7b9e:	e076      	b.n	7c8e <__aeabi_dmul+0x14e>
    7ba0:	4a5e      	ldr	r2, [pc, #376]	; (7d1c <__aeabi_dmul+0x1dc>)
    7ba2:	4290      	cmp	r0, r2
    7ba4:	d06c      	beq.n	7c80 <__aeabi_dmul+0x140>
    7ba6:	2280      	movs	r2, #128	; 0x80
    7ba8:	0f5b      	lsrs	r3, r3, #29
    7baa:	0412      	lsls	r2, r2, #16
    7bac:	4313      	orrs	r3, r2
    7bae:	4a5c      	ldr	r2, [pc, #368]	; (7d20 <__aeabi_dmul+0x1e0>)
    7bb0:	00ed      	lsls	r5, r5, #3
    7bb2:	4694      	mov	ip, r2
    7bb4:	431d      	orrs	r5, r3
    7bb6:	4653      	mov	r3, sl
    7bb8:	2200      	movs	r2, #0
    7bba:	00db      	lsls	r3, r3, #3
    7bbc:	4460      	add	r0, ip
    7bbe:	4649      	mov	r1, r9
    7bc0:	1836      	adds	r6, r6, r0
    7bc2:	1c70      	adds	r0, r6, #1
    7bc4:	4061      	eors	r1, r4
    7bc6:	9002      	str	r0, [sp, #8]
    7bc8:	4317      	orrs	r7, r2
    7bca:	2f0f      	cmp	r7, #15
    7bcc:	d900      	bls.n	7bd0 <__aeabi_dmul+0x90>
    7bce:	e0af      	b.n	7d30 <__aeabi_dmul+0x1f0>
    7bd0:	4854      	ldr	r0, [pc, #336]	; (7d24 <__aeabi_dmul+0x1e4>)
    7bd2:	00bf      	lsls	r7, r7, #2
    7bd4:	59c7      	ldr	r7, [r0, r7]
    7bd6:	46bf      	mov	pc, r7
    7bd8:	465b      	mov	r3, fp
    7bda:	431f      	orrs	r7, r3
    7bdc:	d000      	beq.n	7be0 <__aeabi_dmul+0xa0>
    7bde:	e088      	b.n	7cf2 <__aeabi_dmul+0x1b2>
    7be0:	2300      	movs	r3, #0
    7be2:	469b      	mov	fp, r3
    7be4:	4698      	mov	r8, r3
    7be6:	3302      	adds	r3, #2
    7be8:	2708      	movs	r7, #8
    7bea:	9301      	str	r3, [sp, #4]
    7bec:	e7ce      	b.n	7b8c <__aeabi_dmul+0x4c>
    7bee:	4649      	mov	r1, r9
    7bf0:	2a02      	cmp	r2, #2
    7bf2:	d06a      	beq.n	7cca <__aeabi_dmul+0x18a>
    7bf4:	2a03      	cmp	r2, #3
    7bf6:	d100      	bne.n	7bfa <__aeabi_dmul+0xba>
    7bf8:	e209      	b.n	800e <__aeabi_dmul+0x4ce>
    7bfa:	2a01      	cmp	r2, #1
    7bfc:	d000      	beq.n	7c00 <__aeabi_dmul+0xc0>
    7bfe:	e1bb      	b.n	7f78 <__aeabi_dmul+0x438>
    7c00:	4011      	ands	r1, r2
    7c02:	2200      	movs	r2, #0
    7c04:	2300      	movs	r3, #0
    7c06:	2500      	movs	r5, #0
    7c08:	4690      	mov	r8, r2
    7c0a:	b2cc      	uxtb	r4, r1
    7c0c:	2100      	movs	r1, #0
    7c0e:	032d      	lsls	r5, r5, #12
    7c10:	0d0a      	lsrs	r2, r1, #20
    7c12:	0512      	lsls	r2, r2, #20
    7c14:	0b2d      	lsrs	r5, r5, #12
    7c16:	4315      	orrs	r5, r2
    7c18:	4a43      	ldr	r2, [pc, #268]	; (7d28 <__aeabi_dmul+0x1e8>)
    7c1a:	051b      	lsls	r3, r3, #20
    7c1c:	4015      	ands	r5, r2
    7c1e:	431d      	orrs	r5, r3
    7c20:	006d      	lsls	r5, r5, #1
    7c22:	07e4      	lsls	r4, r4, #31
    7c24:	086d      	lsrs	r5, r5, #1
    7c26:	4325      	orrs	r5, r4
    7c28:	4640      	mov	r0, r8
    7c2a:	0029      	movs	r1, r5
    7c2c:	b007      	add	sp, #28
    7c2e:	bc3c      	pop	{r2, r3, r4, r5}
    7c30:	4690      	mov	r8, r2
    7c32:	4699      	mov	r9, r3
    7c34:	46a2      	mov	sl, r4
    7c36:	46ab      	mov	fp, r5
    7c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c3a:	4303      	orrs	r3, r0
    7c3c:	d052      	beq.n	7ce4 <__aeabi_dmul+0x1a4>
    7c3e:	465b      	mov	r3, fp
    7c40:	2b00      	cmp	r3, #0
    7c42:	d100      	bne.n	7c46 <__aeabi_dmul+0x106>
    7c44:	e18a      	b.n	7f5c <__aeabi_dmul+0x41c>
    7c46:	4658      	mov	r0, fp
    7c48:	f000 fef8 	bl	8a3c <__clzsi2>
    7c4c:	0003      	movs	r3, r0
    7c4e:	3b0b      	subs	r3, #11
    7c50:	2b1c      	cmp	r3, #28
    7c52:	dd00      	ble.n	7c56 <__aeabi_dmul+0x116>
    7c54:	e17b      	b.n	7f4e <__aeabi_dmul+0x40e>
    7c56:	221d      	movs	r2, #29
    7c58:	1ad3      	subs	r3, r2, r3
    7c5a:	003a      	movs	r2, r7
    7c5c:	0001      	movs	r1, r0
    7c5e:	465d      	mov	r5, fp
    7c60:	40da      	lsrs	r2, r3
    7c62:	3908      	subs	r1, #8
    7c64:	408d      	lsls	r5, r1
    7c66:	0013      	movs	r3, r2
    7c68:	408f      	lsls	r7, r1
    7c6a:	432b      	orrs	r3, r5
    7c6c:	469b      	mov	fp, r3
    7c6e:	46b8      	mov	r8, r7
    7c70:	4b2e      	ldr	r3, [pc, #184]	; (7d2c <__aeabi_dmul+0x1ec>)
    7c72:	2700      	movs	r7, #0
    7c74:	469c      	mov	ip, r3
    7c76:	2300      	movs	r3, #0
    7c78:	4460      	add	r0, ip
    7c7a:	4246      	negs	r6, r0
    7c7c:	9301      	str	r3, [sp, #4]
    7c7e:	e785      	b.n	7b8c <__aeabi_dmul+0x4c>
    7c80:	4652      	mov	r2, sl
    7c82:	432a      	orrs	r2, r5
    7c84:	d12c      	bne.n	7ce0 <__aeabi_dmul+0x1a0>
    7c86:	2500      	movs	r5, #0
    7c88:	2300      	movs	r3, #0
    7c8a:	2202      	movs	r2, #2
    7c8c:	e797      	b.n	7bbe <__aeabi_dmul+0x7e>
    7c8e:	4652      	mov	r2, sl
    7c90:	432a      	orrs	r2, r5
    7c92:	d021      	beq.n	7cd8 <__aeabi_dmul+0x198>
    7c94:	2d00      	cmp	r5, #0
    7c96:	d100      	bne.n	7c9a <__aeabi_dmul+0x15a>
    7c98:	e154      	b.n	7f44 <__aeabi_dmul+0x404>
    7c9a:	0028      	movs	r0, r5
    7c9c:	f000 fece 	bl	8a3c <__clzsi2>
    7ca0:	0003      	movs	r3, r0
    7ca2:	3b0b      	subs	r3, #11
    7ca4:	2b1c      	cmp	r3, #28
    7ca6:	dd00      	ble.n	7caa <__aeabi_dmul+0x16a>
    7ca8:	e146      	b.n	7f38 <__aeabi_dmul+0x3f8>
    7caa:	211d      	movs	r1, #29
    7cac:	1acb      	subs	r3, r1, r3
    7cae:	4651      	mov	r1, sl
    7cb0:	0002      	movs	r2, r0
    7cb2:	40d9      	lsrs	r1, r3
    7cb4:	4653      	mov	r3, sl
    7cb6:	3a08      	subs	r2, #8
    7cb8:	4095      	lsls	r5, r2
    7cba:	4093      	lsls	r3, r2
    7cbc:	430d      	orrs	r5, r1
    7cbe:	4a1b      	ldr	r2, [pc, #108]	; (7d2c <__aeabi_dmul+0x1ec>)
    7cc0:	4694      	mov	ip, r2
    7cc2:	4460      	add	r0, ip
    7cc4:	4240      	negs	r0, r0
    7cc6:	2200      	movs	r2, #0
    7cc8:	e779      	b.n	7bbe <__aeabi_dmul+0x7e>
    7cca:	2401      	movs	r4, #1
    7ccc:	2200      	movs	r2, #0
    7cce:	400c      	ands	r4, r1
    7cd0:	4b12      	ldr	r3, [pc, #72]	; (7d1c <__aeabi_dmul+0x1dc>)
    7cd2:	2500      	movs	r5, #0
    7cd4:	4690      	mov	r8, r2
    7cd6:	e799      	b.n	7c0c <__aeabi_dmul+0xcc>
    7cd8:	2500      	movs	r5, #0
    7cda:	2300      	movs	r3, #0
    7cdc:	2201      	movs	r2, #1
    7cde:	e76e      	b.n	7bbe <__aeabi_dmul+0x7e>
    7ce0:	2203      	movs	r2, #3
    7ce2:	e76c      	b.n	7bbe <__aeabi_dmul+0x7e>
    7ce4:	2300      	movs	r3, #0
    7ce6:	469b      	mov	fp, r3
    7ce8:	4698      	mov	r8, r3
    7cea:	3301      	adds	r3, #1
    7cec:	2704      	movs	r7, #4
    7cee:	9301      	str	r3, [sp, #4]
    7cf0:	e74c      	b.n	7b8c <__aeabi_dmul+0x4c>
    7cf2:	2303      	movs	r3, #3
    7cf4:	270c      	movs	r7, #12
    7cf6:	9301      	str	r3, [sp, #4]
    7cf8:	e748      	b.n	7b8c <__aeabi_dmul+0x4c>
    7cfa:	2300      	movs	r3, #0
    7cfc:	2580      	movs	r5, #128	; 0x80
    7cfe:	4698      	mov	r8, r3
    7d00:	2400      	movs	r4, #0
    7d02:	032d      	lsls	r5, r5, #12
    7d04:	4b05      	ldr	r3, [pc, #20]	; (7d1c <__aeabi_dmul+0x1dc>)
    7d06:	e781      	b.n	7c0c <__aeabi_dmul+0xcc>
    7d08:	465d      	mov	r5, fp
    7d0a:	4643      	mov	r3, r8
    7d0c:	9a01      	ldr	r2, [sp, #4]
    7d0e:	e76f      	b.n	7bf0 <__aeabi_dmul+0xb0>
    7d10:	465d      	mov	r5, fp
    7d12:	4643      	mov	r3, r8
    7d14:	0021      	movs	r1, r4
    7d16:	9a01      	ldr	r2, [sp, #4]
    7d18:	e76a      	b.n	7bf0 <__aeabi_dmul+0xb0>
    7d1a:	46c0      	nop			; (mov r8, r8)
    7d1c:	000007ff 	.word	0x000007ff
    7d20:	fffffc01 	.word	0xfffffc01
    7d24:	00008e98 	.word	0x00008e98
    7d28:	800fffff 	.word	0x800fffff
    7d2c:	000003f3 	.word	0x000003f3
    7d30:	4642      	mov	r2, r8
    7d32:	0c12      	lsrs	r2, r2, #16
    7d34:	4691      	mov	r9, r2
    7d36:	0c1a      	lsrs	r2, r3, #16
    7d38:	4694      	mov	ip, r2
    7d3a:	4642      	mov	r2, r8
    7d3c:	0417      	lsls	r7, r2, #16
    7d3e:	464a      	mov	r2, r9
    7d40:	041b      	lsls	r3, r3, #16
    7d42:	0c1b      	lsrs	r3, r3, #16
    7d44:	435a      	muls	r2, r3
    7d46:	4660      	mov	r0, ip
    7d48:	4690      	mov	r8, r2
    7d4a:	464a      	mov	r2, r9
    7d4c:	4342      	muls	r2, r0
    7d4e:	0010      	movs	r0, r2
    7d50:	9203      	str	r2, [sp, #12]
    7d52:	4662      	mov	r2, ip
    7d54:	001c      	movs	r4, r3
    7d56:	0c3f      	lsrs	r7, r7, #16
    7d58:	437a      	muls	r2, r7
    7d5a:	437c      	muls	r4, r7
    7d5c:	4442      	add	r2, r8
    7d5e:	9201      	str	r2, [sp, #4]
    7d60:	0c22      	lsrs	r2, r4, #16
    7d62:	4692      	mov	sl, r2
    7d64:	9a01      	ldr	r2, [sp, #4]
    7d66:	4452      	add	r2, sl
    7d68:	4590      	cmp	r8, r2
    7d6a:	d906      	bls.n	7d7a <__aeabi_dmul+0x23a>
    7d6c:	4682      	mov	sl, r0
    7d6e:	2080      	movs	r0, #128	; 0x80
    7d70:	0240      	lsls	r0, r0, #9
    7d72:	4680      	mov	r8, r0
    7d74:	44c2      	add	sl, r8
    7d76:	4650      	mov	r0, sl
    7d78:	9003      	str	r0, [sp, #12]
    7d7a:	0c10      	lsrs	r0, r2, #16
    7d7c:	9004      	str	r0, [sp, #16]
    7d7e:	4648      	mov	r0, r9
    7d80:	0424      	lsls	r4, r4, #16
    7d82:	0c24      	lsrs	r4, r4, #16
    7d84:	0412      	lsls	r2, r2, #16
    7d86:	1912      	adds	r2, r2, r4
    7d88:	9205      	str	r2, [sp, #20]
    7d8a:	0c2a      	lsrs	r2, r5, #16
    7d8c:	042d      	lsls	r5, r5, #16
    7d8e:	0c2d      	lsrs	r5, r5, #16
    7d90:	4368      	muls	r0, r5
    7d92:	002c      	movs	r4, r5
    7d94:	4682      	mov	sl, r0
    7d96:	4648      	mov	r0, r9
    7d98:	437c      	muls	r4, r7
    7d9a:	4350      	muls	r0, r2
    7d9c:	4681      	mov	r9, r0
    7d9e:	0c20      	lsrs	r0, r4, #16
    7da0:	4680      	mov	r8, r0
    7da2:	4357      	muls	r7, r2
    7da4:	4457      	add	r7, sl
    7da6:	4447      	add	r7, r8
    7da8:	45ba      	cmp	sl, r7
    7daa:	d903      	bls.n	7db4 <__aeabi_dmul+0x274>
    7dac:	2080      	movs	r0, #128	; 0x80
    7dae:	0240      	lsls	r0, r0, #9
    7db0:	4680      	mov	r8, r0
    7db2:	44c1      	add	r9, r8
    7db4:	0c38      	lsrs	r0, r7, #16
    7db6:	043f      	lsls	r7, r7, #16
    7db8:	46b8      	mov	r8, r7
    7dba:	4448      	add	r0, r9
    7dbc:	0424      	lsls	r4, r4, #16
    7dbe:	0c24      	lsrs	r4, r4, #16
    7dc0:	9001      	str	r0, [sp, #4]
    7dc2:	9804      	ldr	r0, [sp, #16]
    7dc4:	44a0      	add	r8, r4
    7dc6:	4440      	add	r0, r8
    7dc8:	9004      	str	r0, [sp, #16]
    7dca:	4658      	mov	r0, fp
    7dcc:	0c00      	lsrs	r0, r0, #16
    7dce:	4681      	mov	r9, r0
    7dd0:	4658      	mov	r0, fp
    7dd2:	0404      	lsls	r4, r0, #16
    7dd4:	0c20      	lsrs	r0, r4, #16
    7dd6:	4682      	mov	sl, r0
    7dd8:	0007      	movs	r7, r0
    7dda:	4648      	mov	r0, r9
    7ddc:	435f      	muls	r7, r3
    7dde:	464c      	mov	r4, r9
    7de0:	4343      	muls	r3, r0
    7de2:	4660      	mov	r0, ip
    7de4:	4360      	muls	r0, r4
    7de6:	4664      	mov	r4, ip
    7de8:	4683      	mov	fp, r0
    7dea:	4650      	mov	r0, sl
    7dec:	4344      	muls	r4, r0
    7dee:	0c38      	lsrs	r0, r7, #16
    7df0:	4684      	mov	ip, r0
    7df2:	18e4      	adds	r4, r4, r3
    7df4:	4464      	add	r4, ip
    7df6:	42a3      	cmp	r3, r4
    7df8:	d903      	bls.n	7e02 <__aeabi_dmul+0x2c2>
    7dfa:	2380      	movs	r3, #128	; 0x80
    7dfc:	025b      	lsls	r3, r3, #9
    7dfe:	469c      	mov	ip, r3
    7e00:	44e3      	add	fp, ip
    7e02:	4648      	mov	r0, r9
    7e04:	043f      	lsls	r7, r7, #16
    7e06:	0c23      	lsrs	r3, r4, #16
    7e08:	0c3f      	lsrs	r7, r7, #16
    7e0a:	0424      	lsls	r4, r4, #16
    7e0c:	19e4      	adds	r4, r4, r7
    7e0e:	4657      	mov	r7, sl
    7e10:	4368      	muls	r0, r5
    7e12:	436f      	muls	r7, r5
    7e14:	4684      	mov	ip, r0
    7e16:	464d      	mov	r5, r9
    7e18:	4650      	mov	r0, sl
    7e1a:	4355      	muls	r5, r2
    7e1c:	4342      	muls	r2, r0
    7e1e:	0c38      	lsrs	r0, r7, #16
    7e20:	4681      	mov	r9, r0
    7e22:	4462      	add	r2, ip
    7e24:	444a      	add	r2, r9
    7e26:	445b      	add	r3, fp
    7e28:	4594      	cmp	ip, r2
    7e2a:	d903      	bls.n	7e34 <__aeabi_dmul+0x2f4>
    7e2c:	2080      	movs	r0, #128	; 0x80
    7e2e:	0240      	lsls	r0, r0, #9
    7e30:	4684      	mov	ip, r0
    7e32:	4465      	add	r5, ip
    7e34:	9803      	ldr	r0, [sp, #12]
    7e36:	043f      	lsls	r7, r7, #16
    7e38:	4683      	mov	fp, r0
    7e3a:	9804      	ldr	r0, [sp, #16]
    7e3c:	0c3f      	lsrs	r7, r7, #16
    7e3e:	4684      	mov	ip, r0
    7e40:	44e3      	add	fp, ip
    7e42:	45c3      	cmp	fp, r8
    7e44:	4180      	sbcs	r0, r0
    7e46:	4240      	negs	r0, r0
    7e48:	4682      	mov	sl, r0
    7e4a:	0410      	lsls	r0, r2, #16
    7e4c:	4684      	mov	ip, r0
    7e4e:	9801      	ldr	r0, [sp, #4]
    7e50:	4467      	add	r7, ip
    7e52:	4684      	mov	ip, r0
    7e54:	4467      	add	r7, ip
    7e56:	44a3      	add	fp, r4
    7e58:	46bc      	mov	ip, r7
    7e5a:	45a3      	cmp	fp, r4
    7e5c:	41a4      	sbcs	r4, r4
    7e5e:	4699      	mov	r9, r3
    7e60:	44d4      	add	ip, sl
    7e62:	4264      	negs	r4, r4
    7e64:	4287      	cmp	r7, r0
    7e66:	41bf      	sbcs	r7, r7
    7e68:	45d4      	cmp	ip, sl
    7e6a:	4180      	sbcs	r0, r0
    7e6c:	44e1      	add	r9, ip
    7e6e:	46a0      	mov	r8, r4
    7e70:	4599      	cmp	r9, r3
    7e72:	419b      	sbcs	r3, r3
    7e74:	427f      	negs	r7, r7
    7e76:	4240      	negs	r0, r0
    7e78:	44c8      	add	r8, r9
    7e7a:	4307      	orrs	r7, r0
    7e7c:	0c12      	lsrs	r2, r2, #16
    7e7e:	18ba      	adds	r2, r7, r2
    7e80:	45a0      	cmp	r8, r4
    7e82:	41a4      	sbcs	r4, r4
    7e84:	425f      	negs	r7, r3
    7e86:	003b      	movs	r3, r7
    7e88:	4264      	negs	r4, r4
    7e8a:	4323      	orrs	r3, r4
    7e8c:	18d7      	adds	r7, r2, r3
    7e8e:	4643      	mov	r3, r8
    7e90:	197d      	adds	r5, r7, r5
    7e92:	0ddb      	lsrs	r3, r3, #23
    7e94:	026d      	lsls	r5, r5, #9
    7e96:	431d      	orrs	r5, r3
    7e98:	465b      	mov	r3, fp
    7e9a:	025a      	lsls	r2, r3, #9
    7e9c:	9b05      	ldr	r3, [sp, #20]
    7e9e:	431a      	orrs	r2, r3
    7ea0:	1e53      	subs	r3, r2, #1
    7ea2:	419a      	sbcs	r2, r3
    7ea4:	465b      	mov	r3, fp
    7ea6:	0ddb      	lsrs	r3, r3, #23
    7ea8:	431a      	orrs	r2, r3
    7eaa:	4643      	mov	r3, r8
    7eac:	025b      	lsls	r3, r3, #9
    7eae:	4313      	orrs	r3, r2
    7eb0:	01ea      	lsls	r2, r5, #7
    7eb2:	d507      	bpl.n	7ec4 <__aeabi_dmul+0x384>
    7eb4:	2201      	movs	r2, #1
    7eb6:	085c      	lsrs	r4, r3, #1
    7eb8:	4013      	ands	r3, r2
    7eba:	4323      	orrs	r3, r4
    7ebc:	07ea      	lsls	r2, r5, #31
    7ebe:	9e02      	ldr	r6, [sp, #8]
    7ec0:	4313      	orrs	r3, r2
    7ec2:	086d      	lsrs	r5, r5, #1
    7ec4:	4a57      	ldr	r2, [pc, #348]	; (8024 <__aeabi_dmul+0x4e4>)
    7ec6:	18b2      	adds	r2, r6, r2
    7ec8:	2a00      	cmp	r2, #0
    7eca:	dd4b      	ble.n	7f64 <__aeabi_dmul+0x424>
    7ecc:	0758      	lsls	r0, r3, #29
    7ece:	d009      	beq.n	7ee4 <__aeabi_dmul+0x3a4>
    7ed0:	200f      	movs	r0, #15
    7ed2:	4018      	ands	r0, r3
    7ed4:	2804      	cmp	r0, #4
    7ed6:	d005      	beq.n	7ee4 <__aeabi_dmul+0x3a4>
    7ed8:	1d18      	adds	r0, r3, #4
    7eda:	4298      	cmp	r0, r3
    7edc:	419b      	sbcs	r3, r3
    7ede:	425b      	negs	r3, r3
    7ee0:	18ed      	adds	r5, r5, r3
    7ee2:	0003      	movs	r3, r0
    7ee4:	01e8      	lsls	r0, r5, #7
    7ee6:	d504      	bpl.n	7ef2 <__aeabi_dmul+0x3b2>
    7ee8:	4a4f      	ldr	r2, [pc, #316]	; (8028 <__aeabi_dmul+0x4e8>)
    7eea:	4015      	ands	r5, r2
    7eec:	2280      	movs	r2, #128	; 0x80
    7eee:	00d2      	lsls	r2, r2, #3
    7ef0:	18b2      	adds	r2, r6, r2
    7ef2:	484e      	ldr	r0, [pc, #312]	; (802c <__aeabi_dmul+0x4ec>)
    7ef4:	4282      	cmp	r2, r0
    7ef6:	dd00      	ble.n	7efa <__aeabi_dmul+0x3ba>
    7ef8:	e6e7      	b.n	7cca <__aeabi_dmul+0x18a>
    7efa:	2401      	movs	r4, #1
    7efc:	08db      	lsrs	r3, r3, #3
    7efe:	0768      	lsls	r0, r5, #29
    7f00:	4318      	orrs	r0, r3
    7f02:	026d      	lsls	r5, r5, #9
    7f04:	0553      	lsls	r3, r2, #21
    7f06:	4680      	mov	r8, r0
    7f08:	0b2d      	lsrs	r5, r5, #12
    7f0a:	0d5b      	lsrs	r3, r3, #21
    7f0c:	400c      	ands	r4, r1
    7f0e:	e67d      	b.n	7c0c <__aeabi_dmul+0xcc>
    7f10:	2280      	movs	r2, #128	; 0x80
    7f12:	4659      	mov	r1, fp
    7f14:	0312      	lsls	r2, r2, #12
    7f16:	4211      	tst	r1, r2
    7f18:	d008      	beq.n	7f2c <__aeabi_dmul+0x3ec>
    7f1a:	4215      	tst	r5, r2
    7f1c:	d106      	bne.n	7f2c <__aeabi_dmul+0x3ec>
    7f1e:	4315      	orrs	r5, r2
    7f20:	032d      	lsls	r5, r5, #12
    7f22:	4698      	mov	r8, r3
    7f24:	0b2d      	lsrs	r5, r5, #12
    7f26:	464c      	mov	r4, r9
    7f28:	4b41      	ldr	r3, [pc, #260]	; (8030 <__aeabi_dmul+0x4f0>)
    7f2a:	e66f      	b.n	7c0c <__aeabi_dmul+0xcc>
    7f2c:	465d      	mov	r5, fp
    7f2e:	4315      	orrs	r5, r2
    7f30:	032d      	lsls	r5, r5, #12
    7f32:	0b2d      	lsrs	r5, r5, #12
    7f34:	4b3e      	ldr	r3, [pc, #248]	; (8030 <__aeabi_dmul+0x4f0>)
    7f36:	e669      	b.n	7c0c <__aeabi_dmul+0xcc>
    7f38:	0003      	movs	r3, r0
    7f3a:	4655      	mov	r5, sl
    7f3c:	3b28      	subs	r3, #40	; 0x28
    7f3e:	409d      	lsls	r5, r3
    7f40:	2300      	movs	r3, #0
    7f42:	e6bc      	b.n	7cbe <__aeabi_dmul+0x17e>
    7f44:	4650      	mov	r0, sl
    7f46:	f000 fd79 	bl	8a3c <__clzsi2>
    7f4a:	3020      	adds	r0, #32
    7f4c:	e6a8      	b.n	7ca0 <__aeabi_dmul+0x160>
    7f4e:	0003      	movs	r3, r0
    7f50:	3b28      	subs	r3, #40	; 0x28
    7f52:	409f      	lsls	r7, r3
    7f54:	2300      	movs	r3, #0
    7f56:	46bb      	mov	fp, r7
    7f58:	4698      	mov	r8, r3
    7f5a:	e689      	b.n	7c70 <__aeabi_dmul+0x130>
    7f5c:	f000 fd6e 	bl	8a3c <__clzsi2>
    7f60:	3020      	adds	r0, #32
    7f62:	e673      	b.n	7c4c <__aeabi_dmul+0x10c>
    7f64:	2401      	movs	r4, #1
    7f66:	1aa6      	subs	r6, r4, r2
    7f68:	2e38      	cmp	r6, #56	; 0x38
    7f6a:	dd07      	ble.n	7f7c <__aeabi_dmul+0x43c>
    7f6c:	2200      	movs	r2, #0
    7f6e:	400c      	ands	r4, r1
    7f70:	2300      	movs	r3, #0
    7f72:	2500      	movs	r5, #0
    7f74:	4690      	mov	r8, r2
    7f76:	e649      	b.n	7c0c <__aeabi_dmul+0xcc>
    7f78:	9e02      	ldr	r6, [sp, #8]
    7f7a:	e7a3      	b.n	7ec4 <__aeabi_dmul+0x384>
    7f7c:	2e1f      	cmp	r6, #31
    7f7e:	dc20      	bgt.n	7fc2 <__aeabi_dmul+0x482>
    7f80:	2220      	movs	r2, #32
    7f82:	002c      	movs	r4, r5
    7f84:	0018      	movs	r0, r3
    7f86:	1b92      	subs	r2, r2, r6
    7f88:	40f0      	lsrs	r0, r6
    7f8a:	4094      	lsls	r4, r2
    7f8c:	4093      	lsls	r3, r2
    7f8e:	4304      	orrs	r4, r0
    7f90:	1e58      	subs	r0, r3, #1
    7f92:	4183      	sbcs	r3, r0
    7f94:	431c      	orrs	r4, r3
    7f96:	40f5      	lsrs	r5, r6
    7f98:	0763      	lsls	r3, r4, #29
    7f9a:	d009      	beq.n	7fb0 <__aeabi_dmul+0x470>
    7f9c:	230f      	movs	r3, #15
    7f9e:	4023      	ands	r3, r4
    7fa0:	2b04      	cmp	r3, #4
    7fa2:	d005      	beq.n	7fb0 <__aeabi_dmul+0x470>
    7fa4:	0023      	movs	r3, r4
    7fa6:	1d1c      	adds	r4, r3, #4
    7fa8:	429c      	cmp	r4, r3
    7faa:	4192      	sbcs	r2, r2
    7fac:	4252      	negs	r2, r2
    7fae:	18ad      	adds	r5, r5, r2
    7fb0:	022b      	lsls	r3, r5, #8
    7fb2:	d51f      	bpl.n	7ff4 <__aeabi_dmul+0x4b4>
    7fb4:	2401      	movs	r4, #1
    7fb6:	2200      	movs	r2, #0
    7fb8:	400c      	ands	r4, r1
    7fba:	2301      	movs	r3, #1
    7fbc:	2500      	movs	r5, #0
    7fbe:	4690      	mov	r8, r2
    7fc0:	e624      	b.n	7c0c <__aeabi_dmul+0xcc>
    7fc2:	201f      	movs	r0, #31
    7fc4:	002c      	movs	r4, r5
    7fc6:	4240      	negs	r0, r0
    7fc8:	1a82      	subs	r2, r0, r2
    7fca:	40d4      	lsrs	r4, r2
    7fcc:	2e20      	cmp	r6, #32
    7fce:	d01c      	beq.n	800a <__aeabi_dmul+0x4ca>
    7fd0:	2240      	movs	r2, #64	; 0x40
    7fd2:	1b96      	subs	r6, r2, r6
    7fd4:	40b5      	lsls	r5, r6
    7fd6:	432b      	orrs	r3, r5
    7fd8:	1e58      	subs	r0, r3, #1
    7fda:	4183      	sbcs	r3, r0
    7fdc:	2007      	movs	r0, #7
    7fde:	4323      	orrs	r3, r4
    7fe0:	4018      	ands	r0, r3
    7fe2:	2500      	movs	r5, #0
    7fe4:	2800      	cmp	r0, #0
    7fe6:	d009      	beq.n	7ffc <__aeabi_dmul+0x4bc>
    7fe8:	220f      	movs	r2, #15
    7fea:	2500      	movs	r5, #0
    7fec:	401a      	ands	r2, r3
    7fee:	001c      	movs	r4, r3
    7ff0:	2a04      	cmp	r2, #4
    7ff2:	d1d8      	bne.n	7fa6 <__aeabi_dmul+0x466>
    7ff4:	0023      	movs	r3, r4
    7ff6:	0768      	lsls	r0, r5, #29
    7ff8:	026d      	lsls	r5, r5, #9
    7ffa:	0b2d      	lsrs	r5, r5, #12
    7ffc:	2401      	movs	r4, #1
    7ffe:	08db      	lsrs	r3, r3, #3
    8000:	4303      	orrs	r3, r0
    8002:	4698      	mov	r8, r3
    8004:	400c      	ands	r4, r1
    8006:	2300      	movs	r3, #0
    8008:	e600      	b.n	7c0c <__aeabi_dmul+0xcc>
    800a:	2500      	movs	r5, #0
    800c:	e7e3      	b.n	7fd6 <__aeabi_dmul+0x496>
    800e:	2280      	movs	r2, #128	; 0x80
    8010:	2401      	movs	r4, #1
    8012:	0312      	lsls	r2, r2, #12
    8014:	4315      	orrs	r5, r2
    8016:	032d      	lsls	r5, r5, #12
    8018:	4698      	mov	r8, r3
    801a:	0b2d      	lsrs	r5, r5, #12
    801c:	400c      	ands	r4, r1
    801e:	4b04      	ldr	r3, [pc, #16]	; (8030 <__aeabi_dmul+0x4f0>)
    8020:	e5f4      	b.n	7c0c <__aeabi_dmul+0xcc>
    8022:	46c0      	nop			; (mov r8, r8)
    8024:	000003ff 	.word	0x000003ff
    8028:	feffffff 	.word	0xfeffffff
    802c:	000007fe 	.word	0x000007fe
    8030:	000007ff 	.word	0x000007ff

00008034 <__aeabi_dsub>:
    8034:	b5f0      	push	{r4, r5, r6, r7, lr}
    8036:	4657      	mov	r7, sl
    8038:	464e      	mov	r6, r9
    803a:	4645      	mov	r5, r8
    803c:	b4e0      	push	{r5, r6, r7}
    803e:	000e      	movs	r6, r1
    8040:	0011      	movs	r1, r2
    8042:	0ff2      	lsrs	r2, r6, #31
    8044:	4692      	mov	sl, r2
    8046:	00c5      	lsls	r5, r0, #3
    8048:	0f42      	lsrs	r2, r0, #29
    804a:	0318      	lsls	r0, r3, #12
    804c:	0337      	lsls	r7, r6, #12
    804e:	0074      	lsls	r4, r6, #1
    8050:	0a40      	lsrs	r0, r0, #9
    8052:	0f4e      	lsrs	r6, r1, #29
    8054:	0a7f      	lsrs	r7, r7, #9
    8056:	4330      	orrs	r0, r6
    8058:	4ecf      	ldr	r6, [pc, #828]	; (8398 <__aeabi_dsub+0x364>)
    805a:	4317      	orrs	r7, r2
    805c:	005a      	lsls	r2, r3, #1
    805e:	0d64      	lsrs	r4, r4, #21
    8060:	0d52      	lsrs	r2, r2, #21
    8062:	0fdb      	lsrs	r3, r3, #31
    8064:	00c9      	lsls	r1, r1, #3
    8066:	42b2      	cmp	r2, r6
    8068:	d100      	bne.n	806c <__aeabi_dsub+0x38>
    806a:	e0e5      	b.n	8238 <__aeabi_dsub+0x204>
    806c:	2601      	movs	r6, #1
    806e:	4073      	eors	r3, r6
    8070:	1aa6      	subs	r6, r4, r2
    8072:	46b4      	mov	ip, r6
    8074:	4553      	cmp	r3, sl
    8076:	d100      	bne.n	807a <__aeabi_dsub+0x46>
    8078:	e0af      	b.n	81da <__aeabi_dsub+0x1a6>
    807a:	2e00      	cmp	r6, #0
    807c:	dc00      	bgt.n	8080 <__aeabi_dsub+0x4c>
    807e:	e10d      	b.n	829c <__aeabi_dsub+0x268>
    8080:	2a00      	cmp	r2, #0
    8082:	d13a      	bne.n	80fa <__aeabi_dsub+0xc6>
    8084:	0003      	movs	r3, r0
    8086:	430b      	orrs	r3, r1
    8088:	d000      	beq.n	808c <__aeabi_dsub+0x58>
    808a:	e0e4      	b.n	8256 <__aeabi_dsub+0x222>
    808c:	076b      	lsls	r3, r5, #29
    808e:	d009      	beq.n	80a4 <__aeabi_dsub+0x70>
    8090:	230f      	movs	r3, #15
    8092:	402b      	ands	r3, r5
    8094:	2b04      	cmp	r3, #4
    8096:	d005      	beq.n	80a4 <__aeabi_dsub+0x70>
    8098:	1d2b      	adds	r3, r5, #4
    809a:	42ab      	cmp	r3, r5
    809c:	41ad      	sbcs	r5, r5
    809e:	426d      	negs	r5, r5
    80a0:	197f      	adds	r7, r7, r5
    80a2:	001d      	movs	r5, r3
    80a4:	023b      	lsls	r3, r7, #8
    80a6:	d400      	bmi.n	80aa <__aeabi_dsub+0x76>
    80a8:	e088      	b.n	81bc <__aeabi_dsub+0x188>
    80aa:	4bbb      	ldr	r3, [pc, #748]	; (8398 <__aeabi_dsub+0x364>)
    80ac:	3401      	adds	r4, #1
    80ae:	429c      	cmp	r4, r3
    80b0:	d100      	bne.n	80b4 <__aeabi_dsub+0x80>
    80b2:	e110      	b.n	82d6 <__aeabi_dsub+0x2a2>
    80b4:	003a      	movs	r2, r7
    80b6:	4bb9      	ldr	r3, [pc, #740]	; (839c <__aeabi_dsub+0x368>)
    80b8:	4651      	mov	r1, sl
    80ba:	401a      	ands	r2, r3
    80bc:	2301      	movs	r3, #1
    80be:	0750      	lsls	r0, r2, #29
    80c0:	08ed      	lsrs	r5, r5, #3
    80c2:	0252      	lsls	r2, r2, #9
    80c4:	0564      	lsls	r4, r4, #21
    80c6:	4305      	orrs	r5, r0
    80c8:	0b12      	lsrs	r2, r2, #12
    80ca:	0d64      	lsrs	r4, r4, #21
    80cc:	400b      	ands	r3, r1
    80ce:	2100      	movs	r1, #0
    80d0:	0028      	movs	r0, r5
    80d2:	0312      	lsls	r2, r2, #12
    80d4:	0d0d      	lsrs	r5, r1, #20
    80d6:	0b12      	lsrs	r2, r2, #12
    80d8:	0564      	lsls	r4, r4, #21
    80da:	052d      	lsls	r5, r5, #20
    80dc:	4315      	orrs	r5, r2
    80de:	0862      	lsrs	r2, r4, #1
    80e0:	4caf      	ldr	r4, [pc, #700]	; (83a0 <__aeabi_dsub+0x36c>)
    80e2:	07db      	lsls	r3, r3, #31
    80e4:	402c      	ands	r4, r5
    80e6:	4314      	orrs	r4, r2
    80e8:	0064      	lsls	r4, r4, #1
    80ea:	0864      	lsrs	r4, r4, #1
    80ec:	431c      	orrs	r4, r3
    80ee:	0021      	movs	r1, r4
    80f0:	bc1c      	pop	{r2, r3, r4}
    80f2:	4690      	mov	r8, r2
    80f4:	4699      	mov	r9, r3
    80f6:	46a2      	mov	sl, r4
    80f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80fa:	4ba7      	ldr	r3, [pc, #668]	; (8398 <__aeabi_dsub+0x364>)
    80fc:	429c      	cmp	r4, r3
    80fe:	d0c5      	beq.n	808c <__aeabi_dsub+0x58>
    8100:	2380      	movs	r3, #128	; 0x80
    8102:	041b      	lsls	r3, r3, #16
    8104:	4318      	orrs	r0, r3
    8106:	4663      	mov	r3, ip
    8108:	2b38      	cmp	r3, #56	; 0x38
    810a:	dd00      	ble.n	810e <__aeabi_dsub+0xda>
    810c:	e0fd      	b.n	830a <__aeabi_dsub+0x2d6>
    810e:	2b1f      	cmp	r3, #31
    8110:	dd00      	ble.n	8114 <__aeabi_dsub+0xe0>
    8112:	e130      	b.n	8376 <__aeabi_dsub+0x342>
    8114:	4662      	mov	r2, ip
    8116:	2320      	movs	r3, #32
    8118:	1a9b      	subs	r3, r3, r2
    811a:	0002      	movs	r2, r0
    811c:	409a      	lsls	r2, r3
    811e:	4666      	mov	r6, ip
    8120:	4690      	mov	r8, r2
    8122:	000a      	movs	r2, r1
    8124:	4099      	lsls	r1, r3
    8126:	40f2      	lsrs	r2, r6
    8128:	4646      	mov	r6, r8
    812a:	1e4b      	subs	r3, r1, #1
    812c:	4199      	sbcs	r1, r3
    812e:	4332      	orrs	r2, r6
    8130:	4311      	orrs	r1, r2
    8132:	4663      	mov	r3, ip
    8134:	0002      	movs	r2, r0
    8136:	40da      	lsrs	r2, r3
    8138:	1a69      	subs	r1, r5, r1
    813a:	428d      	cmp	r5, r1
    813c:	419b      	sbcs	r3, r3
    813e:	000d      	movs	r5, r1
    8140:	1aba      	subs	r2, r7, r2
    8142:	425b      	negs	r3, r3
    8144:	1ad7      	subs	r7, r2, r3
    8146:	023b      	lsls	r3, r7, #8
    8148:	d535      	bpl.n	81b6 <__aeabi_dsub+0x182>
    814a:	027a      	lsls	r2, r7, #9
    814c:	0a53      	lsrs	r3, r2, #9
    814e:	4698      	mov	r8, r3
    8150:	4643      	mov	r3, r8
    8152:	2b00      	cmp	r3, #0
    8154:	d100      	bne.n	8158 <__aeabi_dsub+0x124>
    8156:	e0c4      	b.n	82e2 <__aeabi_dsub+0x2ae>
    8158:	4640      	mov	r0, r8
    815a:	f000 fc6f 	bl	8a3c <__clzsi2>
    815e:	0003      	movs	r3, r0
    8160:	3b08      	subs	r3, #8
    8162:	2b1f      	cmp	r3, #31
    8164:	dd00      	ble.n	8168 <__aeabi_dsub+0x134>
    8166:	e0c5      	b.n	82f4 <__aeabi_dsub+0x2c0>
    8168:	2220      	movs	r2, #32
    816a:	0029      	movs	r1, r5
    816c:	1ad2      	subs	r2, r2, r3
    816e:	4647      	mov	r7, r8
    8170:	40d1      	lsrs	r1, r2
    8172:	409f      	lsls	r7, r3
    8174:	000a      	movs	r2, r1
    8176:	409d      	lsls	r5, r3
    8178:	433a      	orrs	r2, r7
    817a:	429c      	cmp	r4, r3
    817c:	dd00      	ble.n	8180 <__aeabi_dsub+0x14c>
    817e:	e0c0      	b.n	8302 <__aeabi_dsub+0x2ce>
    8180:	1b1c      	subs	r4, r3, r4
    8182:	1c63      	adds	r3, r4, #1
    8184:	2b1f      	cmp	r3, #31
    8186:	dd00      	ble.n	818a <__aeabi_dsub+0x156>
    8188:	e0e4      	b.n	8354 <__aeabi_dsub+0x320>
    818a:	2120      	movs	r1, #32
    818c:	0014      	movs	r4, r2
    818e:	0028      	movs	r0, r5
    8190:	1ac9      	subs	r1, r1, r3
    8192:	40d8      	lsrs	r0, r3
    8194:	408c      	lsls	r4, r1
    8196:	408d      	lsls	r5, r1
    8198:	4304      	orrs	r4, r0
    819a:	40da      	lsrs	r2, r3
    819c:	1e68      	subs	r0, r5, #1
    819e:	4185      	sbcs	r5, r0
    81a0:	0017      	movs	r7, r2
    81a2:	4325      	orrs	r5, r4
    81a4:	2400      	movs	r4, #0
    81a6:	e771      	b.n	808c <__aeabi_dsub+0x58>
    81a8:	4642      	mov	r2, r8
    81aa:	4663      	mov	r3, ip
    81ac:	431a      	orrs	r2, r3
    81ae:	d100      	bne.n	81b2 <__aeabi_dsub+0x17e>
    81b0:	e24c      	b.n	864c <__aeabi_dsub+0x618>
    81b2:	4667      	mov	r7, ip
    81b4:	4645      	mov	r5, r8
    81b6:	076b      	lsls	r3, r5, #29
    81b8:	d000      	beq.n	81bc <__aeabi_dsub+0x188>
    81ba:	e769      	b.n	8090 <__aeabi_dsub+0x5c>
    81bc:	2301      	movs	r3, #1
    81be:	4651      	mov	r1, sl
    81c0:	0778      	lsls	r0, r7, #29
    81c2:	08ed      	lsrs	r5, r5, #3
    81c4:	08fa      	lsrs	r2, r7, #3
    81c6:	400b      	ands	r3, r1
    81c8:	4305      	orrs	r5, r0
    81ca:	4973      	ldr	r1, [pc, #460]	; (8398 <__aeabi_dsub+0x364>)
    81cc:	428c      	cmp	r4, r1
    81ce:	d038      	beq.n	8242 <__aeabi_dsub+0x20e>
    81d0:	0312      	lsls	r2, r2, #12
    81d2:	0564      	lsls	r4, r4, #21
    81d4:	0b12      	lsrs	r2, r2, #12
    81d6:	0d64      	lsrs	r4, r4, #21
    81d8:	e779      	b.n	80ce <__aeabi_dsub+0x9a>
    81da:	2e00      	cmp	r6, #0
    81dc:	dc00      	bgt.n	81e0 <__aeabi_dsub+0x1ac>
    81de:	e09a      	b.n	8316 <__aeabi_dsub+0x2e2>
    81e0:	2a00      	cmp	r2, #0
    81e2:	d047      	beq.n	8274 <__aeabi_dsub+0x240>
    81e4:	4a6c      	ldr	r2, [pc, #432]	; (8398 <__aeabi_dsub+0x364>)
    81e6:	4294      	cmp	r4, r2
    81e8:	d100      	bne.n	81ec <__aeabi_dsub+0x1b8>
    81ea:	e74f      	b.n	808c <__aeabi_dsub+0x58>
    81ec:	2280      	movs	r2, #128	; 0x80
    81ee:	0412      	lsls	r2, r2, #16
    81f0:	4310      	orrs	r0, r2
    81f2:	4662      	mov	r2, ip
    81f4:	2a38      	cmp	r2, #56	; 0x38
    81f6:	dc00      	bgt.n	81fa <__aeabi_dsub+0x1c6>
    81f8:	e108      	b.n	840c <__aeabi_dsub+0x3d8>
    81fa:	4301      	orrs	r1, r0
    81fc:	1e48      	subs	r0, r1, #1
    81fe:	4181      	sbcs	r1, r0
    8200:	2200      	movs	r2, #0
    8202:	b2c9      	uxtb	r1, r1
    8204:	1949      	adds	r1, r1, r5
    8206:	19d2      	adds	r2, r2, r7
    8208:	42a9      	cmp	r1, r5
    820a:	41bf      	sbcs	r7, r7
    820c:	000d      	movs	r5, r1
    820e:	427f      	negs	r7, r7
    8210:	18bf      	adds	r7, r7, r2
    8212:	023a      	lsls	r2, r7, #8
    8214:	d400      	bmi.n	8218 <__aeabi_dsub+0x1e4>
    8216:	e142      	b.n	849e <__aeabi_dsub+0x46a>
    8218:	4a5f      	ldr	r2, [pc, #380]	; (8398 <__aeabi_dsub+0x364>)
    821a:	3401      	adds	r4, #1
    821c:	4294      	cmp	r4, r2
    821e:	d100      	bne.n	8222 <__aeabi_dsub+0x1ee>
    8220:	e14e      	b.n	84c0 <__aeabi_dsub+0x48c>
    8222:	2001      	movs	r0, #1
    8224:	4a5d      	ldr	r2, [pc, #372]	; (839c <__aeabi_dsub+0x368>)
    8226:	0869      	lsrs	r1, r5, #1
    8228:	403a      	ands	r2, r7
    822a:	4028      	ands	r0, r5
    822c:	4308      	orrs	r0, r1
    822e:	07d5      	lsls	r5, r2, #31
    8230:	4305      	orrs	r5, r0
    8232:	0857      	lsrs	r7, r2, #1
    8234:	469a      	mov	sl, r3
    8236:	e729      	b.n	808c <__aeabi_dsub+0x58>
    8238:	0006      	movs	r6, r0
    823a:	430e      	orrs	r6, r1
    823c:	d000      	beq.n	8240 <__aeabi_dsub+0x20c>
    823e:	e717      	b.n	8070 <__aeabi_dsub+0x3c>
    8240:	e714      	b.n	806c <__aeabi_dsub+0x38>
    8242:	0029      	movs	r1, r5
    8244:	4311      	orrs	r1, r2
    8246:	d100      	bne.n	824a <__aeabi_dsub+0x216>
    8248:	e1f9      	b.n	863e <__aeabi_dsub+0x60a>
    824a:	2180      	movs	r1, #128	; 0x80
    824c:	0309      	lsls	r1, r1, #12
    824e:	430a      	orrs	r2, r1
    8250:	0312      	lsls	r2, r2, #12
    8252:	0b12      	lsrs	r2, r2, #12
    8254:	e73b      	b.n	80ce <__aeabi_dsub+0x9a>
    8256:	2301      	movs	r3, #1
    8258:	425b      	negs	r3, r3
    825a:	4698      	mov	r8, r3
    825c:	44c4      	add	ip, r8
    825e:	4663      	mov	r3, ip
    8260:	2b00      	cmp	r3, #0
    8262:	d172      	bne.n	834a <__aeabi_dsub+0x316>
    8264:	1a69      	subs	r1, r5, r1
    8266:	428d      	cmp	r5, r1
    8268:	419b      	sbcs	r3, r3
    826a:	1a3f      	subs	r7, r7, r0
    826c:	425b      	negs	r3, r3
    826e:	1aff      	subs	r7, r7, r3
    8270:	000d      	movs	r5, r1
    8272:	e768      	b.n	8146 <__aeabi_dsub+0x112>
    8274:	0002      	movs	r2, r0
    8276:	430a      	orrs	r2, r1
    8278:	d100      	bne.n	827c <__aeabi_dsub+0x248>
    827a:	e707      	b.n	808c <__aeabi_dsub+0x58>
    827c:	2201      	movs	r2, #1
    827e:	4252      	negs	r2, r2
    8280:	4690      	mov	r8, r2
    8282:	44c4      	add	ip, r8
    8284:	4662      	mov	r2, ip
    8286:	2a00      	cmp	r2, #0
    8288:	d000      	beq.n	828c <__aeabi_dsub+0x258>
    828a:	e0e6      	b.n	845a <__aeabi_dsub+0x426>
    828c:	1869      	adds	r1, r5, r1
    828e:	42a9      	cmp	r1, r5
    8290:	41b6      	sbcs	r6, r6
    8292:	183f      	adds	r7, r7, r0
    8294:	4276      	negs	r6, r6
    8296:	19f7      	adds	r7, r6, r7
    8298:	000d      	movs	r5, r1
    829a:	e7ba      	b.n	8212 <__aeabi_dsub+0x1de>
    829c:	2e00      	cmp	r6, #0
    829e:	d000      	beq.n	82a2 <__aeabi_dsub+0x26e>
    82a0:	e080      	b.n	83a4 <__aeabi_dsub+0x370>
    82a2:	1c62      	adds	r2, r4, #1
    82a4:	0552      	lsls	r2, r2, #21
    82a6:	0d52      	lsrs	r2, r2, #21
    82a8:	2a01      	cmp	r2, #1
    82aa:	dc00      	bgt.n	82ae <__aeabi_dsub+0x27a>
    82ac:	e0f9      	b.n	84a2 <__aeabi_dsub+0x46e>
    82ae:	1a6a      	subs	r2, r5, r1
    82b0:	4691      	mov	r9, r2
    82b2:	454d      	cmp	r5, r9
    82b4:	41b6      	sbcs	r6, r6
    82b6:	1a3a      	subs	r2, r7, r0
    82b8:	4276      	negs	r6, r6
    82ba:	1b92      	subs	r2, r2, r6
    82bc:	4690      	mov	r8, r2
    82be:	0212      	lsls	r2, r2, #8
    82c0:	d400      	bmi.n	82c4 <__aeabi_dsub+0x290>
    82c2:	e099      	b.n	83f8 <__aeabi_dsub+0x3c4>
    82c4:	1b4d      	subs	r5, r1, r5
    82c6:	42a9      	cmp	r1, r5
    82c8:	4189      	sbcs	r1, r1
    82ca:	1bc7      	subs	r7, r0, r7
    82cc:	4249      	negs	r1, r1
    82ce:	1a7a      	subs	r2, r7, r1
    82d0:	4690      	mov	r8, r2
    82d2:	469a      	mov	sl, r3
    82d4:	e73c      	b.n	8150 <__aeabi_dsub+0x11c>
    82d6:	4652      	mov	r2, sl
    82d8:	2301      	movs	r3, #1
    82da:	2500      	movs	r5, #0
    82dc:	4013      	ands	r3, r2
    82de:	2200      	movs	r2, #0
    82e0:	e6f5      	b.n	80ce <__aeabi_dsub+0x9a>
    82e2:	0028      	movs	r0, r5
    82e4:	f000 fbaa 	bl	8a3c <__clzsi2>
    82e8:	3020      	adds	r0, #32
    82ea:	0003      	movs	r3, r0
    82ec:	3b08      	subs	r3, #8
    82ee:	2b1f      	cmp	r3, #31
    82f0:	dc00      	bgt.n	82f4 <__aeabi_dsub+0x2c0>
    82f2:	e739      	b.n	8168 <__aeabi_dsub+0x134>
    82f4:	002a      	movs	r2, r5
    82f6:	3828      	subs	r0, #40	; 0x28
    82f8:	4082      	lsls	r2, r0
    82fa:	2500      	movs	r5, #0
    82fc:	429c      	cmp	r4, r3
    82fe:	dc00      	bgt.n	8302 <__aeabi_dsub+0x2ce>
    8300:	e73e      	b.n	8180 <__aeabi_dsub+0x14c>
    8302:	4f26      	ldr	r7, [pc, #152]	; (839c <__aeabi_dsub+0x368>)
    8304:	1ae4      	subs	r4, r4, r3
    8306:	4017      	ands	r7, r2
    8308:	e6c0      	b.n	808c <__aeabi_dsub+0x58>
    830a:	4301      	orrs	r1, r0
    830c:	1e48      	subs	r0, r1, #1
    830e:	4181      	sbcs	r1, r0
    8310:	2200      	movs	r2, #0
    8312:	b2c9      	uxtb	r1, r1
    8314:	e710      	b.n	8138 <__aeabi_dsub+0x104>
    8316:	2e00      	cmp	r6, #0
    8318:	d000      	beq.n	831c <__aeabi_dsub+0x2e8>
    831a:	e0f1      	b.n	8500 <__aeabi_dsub+0x4cc>
    831c:	1c62      	adds	r2, r4, #1
    831e:	4694      	mov	ip, r2
    8320:	0552      	lsls	r2, r2, #21
    8322:	0d52      	lsrs	r2, r2, #21
    8324:	2a01      	cmp	r2, #1
    8326:	dc00      	bgt.n	832a <__aeabi_dsub+0x2f6>
    8328:	e0a0      	b.n	846c <__aeabi_dsub+0x438>
    832a:	4a1b      	ldr	r2, [pc, #108]	; (8398 <__aeabi_dsub+0x364>)
    832c:	4594      	cmp	ip, r2
    832e:	d100      	bne.n	8332 <__aeabi_dsub+0x2fe>
    8330:	e0c5      	b.n	84be <__aeabi_dsub+0x48a>
    8332:	1869      	adds	r1, r5, r1
    8334:	42a9      	cmp	r1, r5
    8336:	4192      	sbcs	r2, r2
    8338:	183f      	adds	r7, r7, r0
    833a:	4252      	negs	r2, r2
    833c:	19d2      	adds	r2, r2, r7
    833e:	0849      	lsrs	r1, r1, #1
    8340:	07d5      	lsls	r5, r2, #31
    8342:	430d      	orrs	r5, r1
    8344:	0857      	lsrs	r7, r2, #1
    8346:	4664      	mov	r4, ip
    8348:	e6a0      	b.n	808c <__aeabi_dsub+0x58>
    834a:	4b13      	ldr	r3, [pc, #76]	; (8398 <__aeabi_dsub+0x364>)
    834c:	429c      	cmp	r4, r3
    834e:	d000      	beq.n	8352 <__aeabi_dsub+0x31e>
    8350:	e6d9      	b.n	8106 <__aeabi_dsub+0xd2>
    8352:	e69b      	b.n	808c <__aeabi_dsub+0x58>
    8354:	0011      	movs	r1, r2
    8356:	3c1f      	subs	r4, #31
    8358:	40e1      	lsrs	r1, r4
    835a:	000c      	movs	r4, r1
    835c:	2b20      	cmp	r3, #32
    835e:	d100      	bne.n	8362 <__aeabi_dsub+0x32e>
    8360:	e080      	b.n	8464 <__aeabi_dsub+0x430>
    8362:	2140      	movs	r1, #64	; 0x40
    8364:	1acb      	subs	r3, r1, r3
    8366:	409a      	lsls	r2, r3
    8368:	4315      	orrs	r5, r2
    836a:	1e6a      	subs	r2, r5, #1
    836c:	4195      	sbcs	r5, r2
    836e:	2700      	movs	r7, #0
    8370:	4325      	orrs	r5, r4
    8372:	2400      	movs	r4, #0
    8374:	e71f      	b.n	81b6 <__aeabi_dsub+0x182>
    8376:	4663      	mov	r3, ip
    8378:	0002      	movs	r2, r0
    837a:	3b20      	subs	r3, #32
    837c:	40da      	lsrs	r2, r3
    837e:	4663      	mov	r3, ip
    8380:	2b20      	cmp	r3, #32
    8382:	d071      	beq.n	8468 <__aeabi_dsub+0x434>
    8384:	2340      	movs	r3, #64	; 0x40
    8386:	4666      	mov	r6, ip
    8388:	1b9b      	subs	r3, r3, r6
    838a:	4098      	lsls	r0, r3
    838c:	4301      	orrs	r1, r0
    838e:	1e48      	subs	r0, r1, #1
    8390:	4181      	sbcs	r1, r0
    8392:	4311      	orrs	r1, r2
    8394:	2200      	movs	r2, #0
    8396:	e6cf      	b.n	8138 <__aeabi_dsub+0x104>
    8398:	000007ff 	.word	0x000007ff
    839c:	ff7fffff 	.word	0xff7fffff
    83a0:	800fffff 	.word	0x800fffff
    83a4:	2c00      	cmp	r4, #0
    83a6:	d048      	beq.n	843a <__aeabi_dsub+0x406>
    83a8:	4cca      	ldr	r4, [pc, #808]	; (86d4 <__aeabi_dsub+0x6a0>)
    83aa:	42a2      	cmp	r2, r4
    83ac:	d100      	bne.n	83b0 <__aeabi_dsub+0x37c>
    83ae:	e0a2      	b.n	84f6 <__aeabi_dsub+0x4c2>
    83b0:	4274      	negs	r4, r6
    83b2:	46a1      	mov	r9, r4
    83b4:	2480      	movs	r4, #128	; 0x80
    83b6:	0424      	lsls	r4, r4, #16
    83b8:	4327      	orrs	r7, r4
    83ba:	464c      	mov	r4, r9
    83bc:	2c38      	cmp	r4, #56	; 0x38
    83be:	dd00      	ble.n	83c2 <__aeabi_dsub+0x38e>
    83c0:	e0db      	b.n	857a <__aeabi_dsub+0x546>
    83c2:	2c1f      	cmp	r4, #31
    83c4:	dd00      	ble.n	83c8 <__aeabi_dsub+0x394>
    83c6:	e144      	b.n	8652 <__aeabi_dsub+0x61e>
    83c8:	464e      	mov	r6, r9
    83ca:	2420      	movs	r4, #32
    83cc:	1ba4      	subs	r4, r4, r6
    83ce:	003e      	movs	r6, r7
    83d0:	40a6      	lsls	r6, r4
    83d2:	46a2      	mov	sl, r4
    83d4:	46b0      	mov	r8, r6
    83d6:	464c      	mov	r4, r9
    83d8:	002e      	movs	r6, r5
    83da:	40e6      	lsrs	r6, r4
    83dc:	46b4      	mov	ip, r6
    83de:	4646      	mov	r6, r8
    83e0:	4664      	mov	r4, ip
    83e2:	4326      	orrs	r6, r4
    83e4:	4654      	mov	r4, sl
    83e6:	40a5      	lsls	r5, r4
    83e8:	1e6c      	subs	r4, r5, #1
    83ea:	41a5      	sbcs	r5, r4
    83ec:	0034      	movs	r4, r6
    83ee:	432c      	orrs	r4, r5
    83f0:	464d      	mov	r5, r9
    83f2:	40ef      	lsrs	r7, r5
    83f4:	1b0d      	subs	r5, r1, r4
    83f6:	e028      	b.n	844a <__aeabi_dsub+0x416>
    83f8:	464a      	mov	r2, r9
    83fa:	4643      	mov	r3, r8
    83fc:	464d      	mov	r5, r9
    83fe:	431a      	orrs	r2, r3
    8400:	d000      	beq.n	8404 <__aeabi_dsub+0x3d0>
    8402:	e6a5      	b.n	8150 <__aeabi_dsub+0x11c>
    8404:	2300      	movs	r3, #0
    8406:	2400      	movs	r4, #0
    8408:	2500      	movs	r5, #0
    840a:	e6de      	b.n	81ca <__aeabi_dsub+0x196>
    840c:	2a1f      	cmp	r2, #31
    840e:	dc5a      	bgt.n	84c6 <__aeabi_dsub+0x492>
    8410:	4666      	mov	r6, ip
    8412:	2220      	movs	r2, #32
    8414:	1b92      	subs	r2, r2, r6
    8416:	0006      	movs	r6, r0
    8418:	4096      	lsls	r6, r2
    841a:	4691      	mov	r9, r2
    841c:	46b0      	mov	r8, r6
    841e:	4662      	mov	r2, ip
    8420:	000e      	movs	r6, r1
    8422:	40d6      	lsrs	r6, r2
    8424:	4642      	mov	r2, r8
    8426:	4316      	orrs	r6, r2
    8428:	464a      	mov	r2, r9
    842a:	4091      	lsls	r1, r2
    842c:	1e4a      	subs	r2, r1, #1
    842e:	4191      	sbcs	r1, r2
    8430:	0002      	movs	r2, r0
    8432:	4660      	mov	r0, ip
    8434:	4331      	orrs	r1, r6
    8436:	40c2      	lsrs	r2, r0
    8438:	e6e4      	b.n	8204 <__aeabi_dsub+0x1d0>
    843a:	003c      	movs	r4, r7
    843c:	432c      	orrs	r4, r5
    843e:	d05a      	beq.n	84f6 <__aeabi_dsub+0x4c2>
    8440:	43f4      	mvns	r4, r6
    8442:	46a1      	mov	r9, r4
    8444:	2c00      	cmp	r4, #0
    8446:	d152      	bne.n	84ee <__aeabi_dsub+0x4ba>
    8448:	1b4d      	subs	r5, r1, r5
    844a:	42a9      	cmp	r1, r5
    844c:	4189      	sbcs	r1, r1
    844e:	1bc7      	subs	r7, r0, r7
    8450:	4249      	negs	r1, r1
    8452:	1a7f      	subs	r7, r7, r1
    8454:	0014      	movs	r4, r2
    8456:	469a      	mov	sl, r3
    8458:	e675      	b.n	8146 <__aeabi_dsub+0x112>
    845a:	4a9e      	ldr	r2, [pc, #632]	; (86d4 <__aeabi_dsub+0x6a0>)
    845c:	4294      	cmp	r4, r2
    845e:	d000      	beq.n	8462 <__aeabi_dsub+0x42e>
    8460:	e6c7      	b.n	81f2 <__aeabi_dsub+0x1be>
    8462:	e613      	b.n	808c <__aeabi_dsub+0x58>
    8464:	2200      	movs	r2, #0
    8466:	e77f      	b.n	8368 <__aeabi_dsub+0x334>
    8468:	2000      	movs	r0, #0
    846a:	e78f      	b.n	838c <__aeabi_dsub+0x358>
    846c:	2c00      	cmp	r4, #0
    846e:	d000      	beq.n	8472 <__aeabi_dsub+0x43e>
    8470:	e0c8      	b.n	8604 <__aeabi_dsub+0x5d0>
    8472:	003b      	movs	r3, r7
    8474:	432b      	orrs	r3, r5
    8476:	d100      	bne.n	847a <__aeabi_dsub+0x446>
    8478:	e10f      	b.n	869a <__aeabi_dsub+0x666>
    847a:	0003      	movs	r3, r0
    847c:	430b      	orrs	r3, r1
    847e:	d100      	bne.n	8482 <__aeabi_dsub+0x44e>
    8480:	e604      	b.n	808c <__aeabi_dsub+0x58>
    8482:	1869      	adds	r1, r5, r1
    8484:	42a9      	cmp	r1, r5
    8486:	419b      	sbcs	r3, r3
    8488:	183f      	adds	r7, r7, r0
    848a:	425b      	negs	r3, r3
    848c:	19df      	adds	r7, r3, r7
    848e:	023b      	lsls	r3, r7, #8
    8490:	d400      	bmi.n	8494 <__aeabi_dsub+0x460>
    8492:	e11a      	b.n	86ca <__aeabi_dsub+0x696>
    8494:	4b90      	ldr	r3, [pc, #576]	; (86d8 <__aeabi_dsub+0x6a4>)
    8496:	000d      	movs	r5, r1
    8498:	401f      	ands	r7, r3
    849a:	4664      	mov	r4, ip
    849c:	e5f6      	b.n	808c <__aeabi_dsub+0x58>
    849e:	469a      	mov	sl, r3
    84a0:	e689      	b.n	81b6 <__aeabi_dsub+0x182>
    84a2:	003a      	movs	r2, r7
    84a4:	432a      	orrs	r2, r5
    84a6:	2c00      	cmp	r4, #0
    84a8:	d15c      	bne.n	8564 <__aeabi_dsub+0x530>
    84aa:	2a00      	cmp	r2, #0
    84ac:	d175      	bne.n	859a <__aeabi_dsub+0x566>
    84ae:	0002      	movs	r2, r0
    84b0:	430a      	orrs	r2, r1
    84b2:	d100      	bne.n	84b6 <__aeabi_dsub+0x482>
    84b4:	e0ca      	b.n	864c <__aeabi_dsub+0x618>
    84b6:	0007      	movs	r7, r0
    84b8:	000d      	movs	r5, r1
    84ba:	469a      	mov	sl, r3
    84bc:	e5e6      	b.n	808c <__aeabi_dsub+0x58>
    84be:	4664      	mov	r4, ip
    84c0:	2200      	movs	r2, #0
    84c2:	2500      	movs	r5, #0
    84c4:	e681      	b.n	81ca <__aeabi_dsub+0x196>
    84c6:	4662      	mov	r2, ip
    84c8:	0006      	movs	r6, r0
    84ca:	3a20      	subs	r2, #32
    84cc:	40d6      	lsrs	r6, r2
    84ce:	4662      	mov	r2, ip
    84d0:	46b0      	mov	r8, r6
    84d2:	2a20      	cmp	r2, #32
    84d4:	d100      	bne.n	84d8 <__aeabi_dsub+0x4a4>
    84d6:	e0b7      	b.n	8648 <__aeabi_dsub+0x614>
    84d8:	2240      	movs	r2, #64	; 0x40
    84da:	4666      	mov	r6, ip
    84dc:	1b92      	subs	r2, r2, r6
    84de:	4090      	lsls	r0, r2
    84e0:	4301      	orrs	r1, r0
    84e2:	4642      	mov	r2, r8
    84e4:	1e48      	subs	r0, r1, #1
    84e6:	4181      	sbcs	r1, r0
    84e8:	4311      	orrs	r1, r2
    84ea:	2200      	movs	r2, #0
    84ec:	e68a      	b.n	8204 <__aeabi_dsub+0x1d0>
    84ee:	4c79      	ldr	r4, [pc, #484]	; (86d4 <__aeabi_dsub+0x6a0>)
    84f0:	42a2      	cmp	r2, r4
    84f2:	d000      	beq.n	84f6 <__aeabi_dsub+0x4c2>
    84f4:	e761      	b.n	83ba <__aeabi_dsub+0x386>
    84f6:	0007      	movs	r7, r0
    84f8:	000d      	movs	r5, r1
    84fa:	0014      	movs	r4, r2
    84fc:	469a      	mov	sl, r3
    84fe:	e5c5      	b.n	808c <__aeabi_dsub+0x58>
    8500:	2c00      	cmp	r4, #0
    8502:	d141      	bne.n	8588 <__aeabi_dsub+0x554>
    8504:	003c      	movs	r4, r7
    8506:	432c      	orrs	r4, r5
    8508:	d078      	beq.n	85fc <__aeabi_dsub+0x5c8>
    850a:	43f4      	mvns	r4, r6
    850c:	46a1      	mov	r9, r4
    850e:	2c00      	cmp	r4, #0
    8510:	d020      	beq.n	8554 <__aeabi_dsub+0x520>
    8512:	4c70      	ldr	r4, [pc, #448]	; (86d4 <__aeabi_dsub+0x6a0>)
    8514:	42a2      	cmp	r2, r4
    8516:	d071      	beq.n	85fc <__aeabi_dsub+0x5c8>
    8518:	464c      	mov	r4, r9
    851a:	2c38      	cmp	r4, #56	; 0x38
    851c:	dd00      	ble.n	8520 <__aeabi_dsub+0x4ec>
    851e:	e0b2      	b.n	8686 <__aeabi_dsub+0x652>
    8520:	2c1f      	cmp	r4, #31
    8522:	dd00      	ble.n	8526 <__aeabi_dsub+0x4f2>
    8524:	e0bc      	b.n	86a0 <__aeabi_dsub+0x66c>
    8526:	2620      	movs	r6, #32
    8528:	1b34      	subs	r4, r6, r4
    852a:	46a2      	mov	sl, r4
    852c:	003c      	movs	r4, r7
    852e:	4656      	mov	r6, sl
    8530:	40b4      	lsls	r4, r6
    8532:	464e      	mov	r6, r9
    8534:	46a0      	mov	r8, r4
    8536:	002c      	movs	r4, r5
    8538:	40f4      	lsrs	r4, r6
    853a:	46a4      	mov	ip, r4
    853c:	4644      	mov	r4, r8
    853e:	4666      	mov	r6, ip
    8540:	4334      	orrs	r4, r6
    8542:	46a4      	mov	ip, r4
    8544:	4654      	mov	r4, sl
    8546:	40a5      	lsls	r5, r4
    8548:	4664      	mov	r4, ip
    854a:	1e6e      	subs	r6, r5, #1
    854c:	41b5      	sbcs	r5, r6
    854e:	4325      	orrs	r5, r4
    8550:	464c      	mov	r4, r9
    8552:	40e7      	lsrs	r7, r4
    8554:	186d      	adds	r5, r5, r1
    8556:	428d      	cmp	r5, r1
    8558:	4189      	sbcs	r1, r1
    855a:	183f      	adds	r7, r7, r0
    855c:	4249      	negs	r1, r1
    855e:	19cf      	adds	r7, r1, r7
    8560:	0014      	movs	r4, r2
    8562:	e656      	b.n	8212 <__aeabi_dsub+0x1de>
    8564:	2a00      	cmp	r2, #0
    8566:	d12f      	bne.n	85c8 <__aeabi_dsub+0x594>
    8568:	0002      	movs	r2, r0
    856a:	430a      	orrs	r2, r1
    856c:	d100      	bne.n	8570 <__aeabi_dsub+0x53c>
    856e:	e084      	b.n	867a <__aeabi_dsub+0x646>
    8570:	0007      	movs	r7, r0
    8572:	000d      	movs	r5, r1
    8574:	469a      	mov	sl, r3
    8576:	4c57      	ldr	r4, [pc, #348]	; (86d4 <__aeabi_dsub+0x6a0>)
    8578:	e588      	b.n	808c <__aeabi_dsub+0x58>
    857a:	433d      	orrs	r5, r7
    857c:	1e6f      	subs	r7, r5, #1
    857e:	41bd      	sbcs	r5, r7
    8580:	b2ec      	uxtb	r4, r5
    8582:	2700      	movs	r7, #0
    8584:	1b0d      	subs	r5, r1, r4
    8586:	e760      	b.n	844a <__aeabi_dsub+0x416>
    8588:	4c52      	ldr	r4, [pc, #328]	; (86d4 <__aeabi_dsub+0x6a0>)
    858a:	42a2      	cmp	r2, r4
    858c:	d036      	beq.n	85fc <__aeabi_dsub+0x5c8>
    858e:	4274      	negs	r4, r6
    8590:	2680      	movs	r6, #128	; 0x80
    8592:	0436      	lsls	r6, r6, #16
    8594:	46a1      	mov	r9, r4
    8596:	4337      	orrs	r7, r6
    8598:	e7be      	b.n	8518 <__aeabi_dsub+0x4e4>
    859a:	0002      	movs	r2, r0
    859c:	430a      	orrs	r2, r1
    859e:	d100      	bne.n	85a2 <__aeabi_dsub+0x56e>
    85a0:	e574      	b.n	808c <__aeabi_dsub+0x58>
    85a2:	1a6a      	subs	r2, r5, r1
    85a4:	4690      	mov	r8, r2
    85a6:	4545      	cmp	r5, r8
    85a8:	41b6      	sbcs	r6, r6
    85aa:	1a3a      	subs	r2, r7, r0
    85ac:	4276      	negs	r6, r6
    85ae:	1b92      	subs	r2, r2, r6
    85b0:	4694      	mov	ip, r2
    85b2:	0212      	lsls	r2, r2, #8
    85b4:	d400      	bmi.n	85b8 <__aeabi_dsub+0x584>
    85b6:	e5f7      	b.n	81a8 <__aeabi_dsub+0x174>
    85b8:	1b4d      	subs	r5, r1, r5
    85ba:	42a9      	cmp	r1, r5
    85bc:	4189      	sbcs	r1, r1
    85be:	1bc7      	subs	r7, r0, r7
    85c0:	4249      	negs	r1, r1
    85c2:	1a7f      	subs	r7, r7, r1
    85c4:	469a      	mov	sl, r3
    85c6:	e561      	b.n	808c <__aeabi_dsub+0x58>
    85c8:	0002      	movs	r2, r0
    85ca:	430a      	orrs	r2, r1
    85cc:	d03a      	beq.n	8644 <__aeabi_dsub+0x610>
    85ce:	08ed      	lsrs	r5, r5, #3
    85d0:	077c      	lsls	r4, r7, #29
    85d2:	432c      	orrs	r4, r5
    85d4:	2580      	movs	r5, #128	; 0x80
    85d6:	08fa      	lsrs	r2, r7, #3
    85d8:	032d      	lsls	r5, r5, #12
    85da:	422a      	tst	r2, r5
    85dc:	d008      	beq.n	85f0 <__aeabi_dsub+0x5bc>
    85de:	08c7      	lsrs	r7, r0, #3
    85e0:	422f      	tst	r7, r5
    85e2:	d105      	bne.n	85f0 <__aeabi_dsub+0x5bc>
    85e4:	0745      	lsls	r5, r0, #29
    85e6:	002c      	movs	r4, r5
    85e8:	003a      	movs	r2, r7
    85ea:	469a      	mov	sl, r3
    85ec:	08c9      	lsrs	r1, r1, #3
    85ee:	430c      	orrs	r4, r1
    85f0:	0f67      	lsrs	r7, r4, #29
    85f2:	00d2      	lsls	r2, r2, #3
    85f4:	00e5      	lsls	r5, r4, #3
    85f6:	4317      	orrs	r7, r2
    85f8:	4c36      	ldr	r4, [pc, #216]	; (86d4 <__aeabi_dsub+0x6a0>)
    85fa:	e547      	b.n	808c <__aeabi_dsub+0x58>
    85fc:	0007      	movs	r7, r0
    85fe:	000d      	movs	r5, r1
    8600:	0014      	movs	r4, r2
    8602:	e543      	b.n	808c <__aeabi_dsub+0x58>
    8604:	003a      	movs	r2, r7
    8606:	432a      	orrs	r2, r5
    8608:	d043      	beq.n	8692 <__aeabi_dsub+0x65e>
    860a:	0002      	movs	r2, r0
    860c:	430a      	orrs	r2, r1
    860e:	d019      	beq.n	8644 <__aeabi_dsub+0x610>
    8610:	08ed      	lsrs	r5, r5, #3
    8612:	077c      	lsls	r4, r7, #29
    8614:	432c      	orrs	r4, r5
    8616:	2580      	movs	r5, #128	; 0x80
    8618:	08fa      	lsrs	r2, r7, #3
    861a:	032d      	lsls	r5, r5, #12
    861c:	422a      	tst	r2, r5
    861e:	d007      	beq.n	8630 <__aeabi_dsub+0x5fc>
    8620:	08c6      	lsrs	r6, r0, #3
    8622:	422e      	tst	r6, r5
    8624:	d104      	bne.n	8630 <__aeabi_dsub+0x5fc>
    8626:	0747      	lsls	r7, r0, #29
    8628:	003c      	movs	r4, r7
    862a:	0032      	movs	r2, r6
    862c:	08c9      	lsrs	r1, r1, #3
    862e:	430c      	orrs	r4, r1
    8630:	00d7      	lsls	r7, r2, #3
    8632:	0f62      	lsrs	r2, r4, #29
    8634:	00e5      	lsls	r5, r4, #3
    8636:	4317      	orrs	r7, r2
    8638:	469a      	mov	sl, r3
    863a:	4c26      	ldr	r4, [pc, #152]	; (86d4 <__aeabi_dsub+0x6a0>)
    863c:	e526      	b.n	808c <__aeabi_dsub+0x58>
    863e:	2200      	movs	r2, #0
    8640:	2500      	movs	r5, #0
    8642:	e544      	b.n	80ce <__aeabi_dsub+0x9a>
    8644:	4c23      	ldr	r4, [pc, #140]	; (86d4 <__aeabi_dsub+0x6a0>)
    8646:	e521      	b.n	808c <__aeabi_dsub+0x58>
    8648:	2000      	movs	r0, #0
    864a:	e749      	b.n	84e0 <__aeabi_dsub+0x4ac>
    864c:	2300      	movs	r3, #0
    864e:	2500      	movs	r5, #0
    8650:	e5bb      	b.n	81ca <__aeabi_dsub+0x196>
    8652:	464c      	mov	r4, r9
    8654:	003e      	movs	r6, r7
    8656:	3c20      	subs	r4, #32
    8658:	40e6      	lsrs	r6, r4
    865a:	464c      	mov	r4, r9
    865c:	46b4      	mov	ip, r6
    865e:	2c20      	cmp	r4, #32
    8660:	d031      	beq.n	86c6 <__aeabi_dsub+0x692>
    8662:	2440      	movs	r4, #64	; 0x40
    8664:	464e      	mov	r6, r9
    8666:	1ba6      	subs	r6, r4, r6
    8668:	40b7      	lsls	r7, r6
    866a:	433d      	orrs	r5, r7
    866c:	1e6c      	subs	r4, r5, #1
    866e:	41a5      	sbcs	r5, r4
    8670:	4664      	mov	r4, ip
    8672:	432c      	orrs	r4, r5
    8674:	2700      	movs	r7, #0
    8676:	1b0d      	subs	r5, r1, r4
    8678:	e6e7      	b.n	844a <__aeabi_dsub+0x416>
    867a:	2280      	movs	r2, #128	; 0x80
    867c:	2300      	movs	r3, #0
    867e:	0312      	lsls	r2, r2, #12
    8680:	4c14      	ldr	r4, [pc, #80]	; (86d4 <__aeabi_dsub+0x6a0>)
    8682:	2500      	movs	r5, #0
    8684:	e5a1      	b.n	81ca <__aeabi_dsub+0x196>
    8686:	433d      	orrs	r5, r7
    8688:	1e6f      	subs	r7, r5, #1
    868a:	41bd      	sbcs	r5, r7
    868c:	2700      	movs	r7, #0
    868e:	b2ed      	uxtb	r5, r5
    8690:	e760      	b.n	8554 <__aeabi_dsub+0x520>
    8692:	0007      	movs	r7, r0
    8694:	000d      	movs	r5, r1
    8696:	4c0f      	ldr	r4, [pc, #60]	; (86d4 <__aeabi_dsub+0x6a0>)
    8698:	e4f8      	b.n	808c <__aeabi_dsub+0x58>
    869a:	0007      	movs	r7, r0
    869c:	000d      	movs	r5, r1
    869e:	e4f5      	b.n	808c <__aeabi_dsub+0x58>
    86a0:	464e      	mov	r6, r9
    86a2:	003c      	movs	r4, r7
    86a4:	3e20      	subs	r6, #32
    86a6:	40f4      	lsrs	r4, r6
    86a8:	46a0      	mov	r8, r4
    86aa:	464c      	mov	r4, r9
    86ac:	2c20      	cmp	r4, #32
    86ae:	d00e      	beq.n	86ce <__aeabi_dsub+0x69a>
    86b0:	2440      	movs	r4, #64	; 0x40
    86b2:	464e      	mov	r6, r9
    86b4:	1ba4      	subs	r4, r4, r6
    86b6:	40a7      	lsls	r7, r4
    86b8:	433d      	orrs	r5, r7
    86ba:	1e6f      	subs	r7, r5, #1
    86bc:	41bd      	sbcs	r5, r7
    86be:	4644      	mov	r4, r8
    86c0:	2700      	movs	r7, #0
    86c2:	4325      	orrs	r5, r4
    86c4:	e746      	b.n	8554 <__aeabi_dsub+0x520>
    86c6:	2700      	movs	r7, #0
    86c8:	e7cf      	b.n	866a <__aeabi_dsub+0x636>
    86ca:	000d      	movs	r5, r1
    86cc:	e573      	b.n	81b6 <__aeabi_dsub+0x182>
    86ce:	2700      	movs	r7, #0
    86d0:	e7f2      	b.n	86b8 <__aeabi_dsub+0x684>
    86d2:	46c0      	nop			; (mov r8, r8)
    86d4:	000007ff 	.word	0x000007ff
    86d8:	ff7fffff 	.word	0xff7fffff

000086dc <__aeabi_dcmpun>:
    86dc:	b570      	push	{r4, r5, r6, lr}
    86de:	4e0e      	ldr	r6, [pc, #56]	; (8718 <__aeabi_dcmpun+0x3c>)
    86e0:	030c      	lsls	r4, r1, #12
    86e2:	031d      	lsls	r5, r3, #12
    86e4:	0049      	lsls	r1, r1, #1
    86e6:	005b      	lsls	r3, r3, #1
    86e8:	0b24      	lsrs	r4, r4, #12
    86ea:	0d49      	lsrs	r1, r1, #21
    86ec:	0b2d      	lsrs	r5, r5, #12
    86ee:	0d5b      	lsrs	r3, r3, #21
    86f0:	42b1      	cmp	r1, r6
    86f2:	d004      	beq.n	86fe <__aeabi_dcmpun+0x22>
    86f4:	4908      	ldr	r1, [pc, #32]	; (8718 <__aeabi_dcmpun+0x3c>)
    86f6:	2000      	movs	r0, #0
    86f8:	428b      	cmp	r3, r1
    86fa:	d008      	beq.n	870e <__aeabi_dcmpun+0x32>
    86fc:	bd70      	pop	{r4, r5, r6, pc}
    86fe:	4304      	orrs	r4, r0
    8700:	2001      	movs	r0, #1
    8702:	2c00      	cmp	r4, #0
    8704:	d1fa      	bne.n	86fc <__aeabi_dcmpun+0x20>
    8706:	4904      	ldr	r1, [pc, #16]	; (8718 <__aeabi_dcmpun+0x3c>)
    8708:	2000      	movs	r0, #0
    870a:	428b      	cmp	r3, r1
    870c:	d1f6      	bne.n	86fc <__aeabi_dcmpun+0x20>
    870e:	4315      	orrs	r5, r2
    8710:	0028      	movs	r0, r5
    8712:	1e45      	subs	r5, r0, #1
    8714:	41a8      	sbcs	r0, r5
    8716:	e7f1      	b.n	86fc <__aeabi_dcmpun+0x20>
    8718:	000007ff 	.word	0x000007ff

0000871c <__aeabi_d2iz>:
    871c:	030b      	lsls	r3, r1, #12
    871e:	b530      	push	{r4, r5, lr}
    8720:	4d13      	ldr	r5, [pc, #76]	; (8770 <__aeabi_d2iz+0x54>)
    8722:	0b1a      	lsrs	r2, r3, #12
    8724:	004b      	lsls	r3, r1, #1
    8726:	0d5b      	lsrs	r3, r3, #21
    8728:	0fc9      	lsrs	r1, r1, #31
    872a:	2400      	movs	r4, #0
    872c:	42ab      	cmp	r3, r5
    872e:	dd11      	ble.n	8754 <__aeabi_d2iz+0x38>
    8730:	4c10      	ldr	r4, [pc, #64]	; (8774 <__aeabi_d2iz+0x58>)
    8732:	42a3      	cmp	r3, r4
    8734:	dc10      	bgt.n	8758 <__aeabi_d2iz+0x3c>
    8736:	2480      	movs	r4, #128	; 0x80
    8738:	0364      	lsls	r4, r4, #13
    873a:	4322      	orrs	r2, r4
    873c:	4c0e      	ldr	r4, [pc, #56]	; (8778 <__aeabi_d2iz+0x5c>)
    873e:	1ae4      	subs	r4, r4, r3
    8740:	2c1f      	cmp	r4, #31
    8742:	dd0c      	ble.n	875e <__aeabi_d2iz+0x42>
    8744:	480d      	ldr	r0, [pc, #52]	; (877c <__aeabi_d2iz+0x60>)
    8746:	1ac3      	subs	r3, r0, r3
    8748:	40da      	lsrs	r2, r3
    874a:	0013      	movs	r3, r2
    874c:	425c      	negs	r4, r3
    874e:	2900      	cmp	r1, #0
    8750:	d100      	bne.n	8754 <__aeabi_d2iz+0x38>
    8752:	001c      	movs	r4, r3
    8754:	0020      	movs	r0, r4
    8756:	bd30      	pop	{r4, r5, pc}
    8758:	4b09      	ldr	r3, [pc, #36]	; (8780 <__aeabi_d2iz+0x64>)
    875a:	18cc      	adds	r4, r1, r3
    875c:	e7fa      	b.n	8754 <__aeabi_d2iz+0x38>
    875e:	40e0      	lsrs	r0, r4
    8760:	4c08      	ldr	r4, [pc, #32]	; (8784 <__aeabi_d2iz+0x68>)
    8762:	46a4      	mov	ip, r4
    8764:	4463      	add	r3, ip
    8766:	409a      	lsls	r2, r3
    8768:	0013      	movs	r3, r2
    876a:	4303      	orrs	r3, r0
    876c:	e7ee      	b.n	874c <__aeabi_d2iz+0x30>
    876e:	46c0      	nop			; (mov r8, r8)
    8770:	000003fe 	.word	0x000003fe
    8774:	0000041d 	.word	0x0000041d
    8778:	00000433 	.word	0x00000433
    877c:	00000413 	.word	0x00000413
    8780:	7fffffff 	.word	0x7fffffff
    8784:	fffffbed 	.word	0xfffffbed

00008788 <__aeabi_i2d>:
    8788:	b570      	push	{r4, r5, r6, lr}
    878a:	2800      	cmp	r0, #0
    878c:	d030      	beq.n	87f0 <__aeabi_i2d+0x68>
    878e:	17c3      	asrs	r3, r0, #31
    8790:	18c4      	adds	r4, r0, r3
    8792:	405c      	eors	r4, r3
    8794:	0fc5      	lsrs	r5, r0, #31
    8796:	0020      	movs	r0, r4
    8798:	f000 f950 	bl	8a3c <__clzsi2>
    879c:	4b17      	ldr	r3, [pc, #92]	; (87fc <__aeabi_i2d+0x74>)
    879e:	4a18      	ldr	r2, [pc, #96]	; (8800 <__aeabi_i2d+0x78>)
    87a0:	1a1b      	subs	r3, r3, r0
    87a2:	1ad2      	subs	r2, r2, r3
    87a4:	2a1f      	cmp	r2, #31
    87a6:	dd18      	ble.n	87da <__aeabi_i2d+0x52>
    87a8:	4a16      	ldr	r2, [pc, #88]	; (8804 <__aeabi_i2d+0x7c>)
    87aa:	1ad2      	subs	r2, r2, r3
    87ac:	4094      	lsls	r4, r2
    87ae:	2200      	movs	r2, #0
    87b0:	0324      	lsls	r4, r4, #12
    87b2:	055b      	lsls	r3, r3, #21
    87b4:	0b24      	lsrs	r4, r4, #12
    87b6:	0d5b      	lsrs	r3, r3, #21
    87b8:	2100      	movs	r1, #0
    87ba:	0010      	movs	r0, r2
    87bc:	0324      	lsls	r4, r4, #12
    87be:	0d0a      	lsrs	r2, r1, #20
    87c0:	0512      	lsls	r2, r2, #20
    87c2:	0b24      	lsrs	r4, r4, #12
    87c4:	4314      	orrs	r4, r2
    87c6:	4a10      	ldr	r2, [pc, #64]	; (8808 <__aeabi_i2d+0x80>)
    87c8:	051b      	lsls	r3, r3, #20
    87ca:	4014      	ands	r4, r2
    87cc:	431c      	orrs	r4, r3
    87ce:	0064      	lsls	r4, r4, #1
    87d0:	07ed      	lsls	r5, r5, #31
    87d2:	0864      	lsrs	r4, r4, #1
    87d4:	432c      	orrs	r4, r5
    87d6:	0021      	movs	r1, r4
    87d8:	bd70      	pop	{r4, r5, r6, pc}
    87da:	0021      	movs	r1, r4
    87dc:	4091      	lsls	r1, r2
    87de:	000a      	movs	r2, r1
    87e0:	210b      	movs	r1, #11
    87e2:	1a08      	subs	r0, r1, r0
    87e4:	40c4      	lsrs	r4, r0
    87e6:	055b      	lsls	r3, r3, #21
    87e8:	0324      	lsls	r4, r4, #12
    87ea:	0b24      	lsrs	r4, r4, #12
    87ec:	0d5b      	lsrs	r3, r3, #21
    87ee:	e7e3      	b.n	87b8 <__aeabi_i2d+0x30>
    87f0:	2500      	movs	r5, #0
    87f2:	2300      	movs	r3, #0
    87f4:	2400      	movs	r4, #0
    87f6:	2200      	movs	r2, #0
    87f8:	e7de      	b.n	87b8 <__aeabi_i2d+0x30>
    87fa:	46c0      	nop			; (mov r8, r8)
    87fc:	0000041e 	.word	0x0000041e
    8800:	00000433 	.word	0x00000433
    8804:	00000413 	.word	0x00000413
    8808:	800fffff 	.word	0x800fffff

0000880c <__aeabi_ui2d>:
    880c:	b570      	push	{r4, r5, r6, lr}
    880e:	1e05      	subs	r5, r0, #0
    8810:	d028      	beq.n	8864 <__aeabi_ui2d+0x58>
    8812:	f000 f913 	bl	8a3c <__clzsi2>
    8816:	4b15      	ldr	r3, [pc, #84]	; (886c <__aeabi_ui2d+0x60>)
    8818:	4a15      	ldr	r2, [pc, #84]	; (8870 <__aeabi_ui2d+0x64>)
    881a:	1a1b      	subs	r3, r3, r0
    881c:	1ad2      	subs	r2, r2, r3
    881e:	2a1f      	cmp	r2, #31
    8820:	dd16      	ble.n	8850 <__aeabi_ui2d+0x44>
    8822:	002c      	movs	r4, r5
    8824:	4a13      	ldr	r2, [pc, #76]	; (8874 <__aeabi_ui2d+0x68>)
    8826:	2500      	movs	r5, #0
    8828:	1ad2      	subs	r2, r2, r3
    882a:	4094      	lsls	r4, r2
    882c:	055a      	lsls	r2, r3, #21
    882e:	0324      	lsls	r4, r4, #12
    8830:	0b24      	lsrs	r4, r4, #12
    8832:	0d52      	lsrs	r2, r2, #21
    8834:	2100      	movs	r1, #0
    8836:	0324      	lsls	r4, r4, #12
    8838:	0d0b      	lsrs	r3, r1, #20
    883a:	0b24      	lsrs	r4, r4, #12
    883c:	051b      	lsls	r3, r3, #20
    883e:	4323      	orrs	r3, r4
    8840:	4c0d      	ldr	r4, [pc, #52]	; (8878 <__aeabi_ui2d+0x6c>)
    8842:	0512      	lsls	r2, r2, #20
    8844:	4023      	ands	r3, r4
    8846:	4313      	orrs	r3, r2
    8848:	005b      	lsls	r3, r3, #1
    884a:	0028      	movs	r0, r5
    884c:	0859      	lsrs	r1, r3, #1
    884e:	bd70      	pop	{r4, r5, r6, pc}
    8850:	210b      	movs	r1, #11
    8852:	002c      	movs	r4, r5
    8854:	1a08      	subs	r0, r1, r0
    8856:	40c4      	lsrs	r4, r0
    8858:	4095      	lsls	r5, r2
    885a:	0324      	lsls	r4, r4, #12
    885c:	055a      	lsls	r2, r3, #21
    885e:	0b24      	lsrs	r4, r4, #12
    8860:	0d52      	lsrs	r2, r2, #21
    8862:	e7e7      	b.n	8834 <__aeabi_ui2d+0x28>
    8864:	2200      	movs	r2, #0
    8866:	2400      	movs	r4, #0
    8868:	e7e4      	b.n	8834 <__aeabi_ui2d+0x28>
    886a:	46c0      	nop			; (mov r8, r8)
    886c:	0000041e 	.word	0x0000041e
    8870:	00000433 	.word	0x00000433
    8874:	00000413 	.word	0x00000413
    8878:	800fffff 	.word	0x800fffff

0000887c <__aeabi_f2d>:
    887c:	0042      	lsls	r2, r0, #1
    887e:	0e12      	lsrs	r2, r2, #24
    8880:	1c51      	adds	r1, r2, #1
    8882:	0243      	lsls	r3, r0, #9
    8884:	b2c9      	uxtb	r1, r1
    8886:	b570      	push	{r4, r5, r6, lr}
    8888:	0a5d      	lsrs	r5, r3, #9
    888a:	0fc4      	lsrs	r4, r0, #31
    888c:	2901      	cmp	r1, #1
    888e:	dd15      	ble.n	88bc <__aeabi_f2d+0x40>
    8890:	21e0      	movs	r1, #224	; 0xe0
    8892:	0089      	lsls	r1, r1, #2
    8894:	468c      	mov	ip, r1
    8896:	076d      	lsls	r5, r5, #29
    8898:	0b1b      	lsrs	r3, r3, #12
    889a:	4462      	add	r2, ip
    889c:	2100      	movs	r1, #0
    889e:	0028      	movs	r0, r5
    88a0:	0d0d      	lsrs	r5, r1, #20
    88a2:	052d      	lsls	r5, r5, #20
    88a4:	432b      	orrs	r3, r5
    88a6:	4d1c      	ldr	r5, [pc, #112]	; (8918 <__aeabi_f2d+0x9c>)
    88a8:	0552      	lsls	r2, r2, #21
    88aa:	402b      	ands	r3, r5
    88ac:	0852      	lsrs	r2, r2, #1
    88ae:	4313      	orrs	r3, r2
    88b0:	005b      	lsls	r3, r3, #1
    88b2:	07e4      	lsls	r4, r4, #31
    88b4:	085b      	lsrs	r3, r3, #1
    88b6:	4323      	orrs	r3, r4
    88b8:	0019      	movs	r1, r3
    88ba:	bd70      	pop	{r4, r5, r6, pc}
    88bc:	2a00      	cmp	r2, #0
    88be:	d115      	bne.n	88ec <__aeabi_f2d+0x70>
    88c0:	2d00      	cmp	r5, #0
    88c2:	d01f      	beq.n	8904 <__aeabi_f2d+0x88>
    88c4:	0028      	movs	r0, r5
    88c6:	f000 f8b9 	bl	8a3c <__clzsi2>
    88ca:	280a      	cmp	r0, #10
    88cc:	dc1d      	bgt.n	890a <__aeabi_f2d+0x8e>
    88ce:	230b      	movs	r3, #11
    88d0:	002a      	movs	r2, r5
    88d2:	1a1b      	subs	r3, r3, r0
    88d4:	40da      	lsrs	r2, r3
    88d6:	0013      	movs	r3, r2
    88d8:	0002      	movs	r2, r0
    88da:	3215      	adds	r2, #21
    88dc:	4095      	lsls	r5, r2
    88de:	4a0f      	ldr	r2, [pc, #60]	; (891c <__aeabi_f2d+0xa0>)
    88e0:	031b      	lsls	r3, r3, #12
    88e2:	1a12      	subs	r2, r2, r0
    88e4:	0552      	lsls	r2, r2, #21
    88e6:	0b1b      	lsrs	r3, r3, #12
    88e8:	0d52      	lsrs	r2, r2, #21
    88ea:	e7d7      	b.n	889c <__aeabi_f2d+0x20>
    88ec:	2d00      	cmp	r5, #0
    88ee:	d006      	beq.n	88fe <__aeabi_f2d+0x82>
    88f0:	2280      	movs	r2, #128	; 0x80
    88f2:	0b1b      	lsrs	r3, r3, #12
    88f4:	0312      	lsls	r2, r2, #12
    88f6:	4313      	orrs	r3, r2
    88f8:	076d      	lsls	r5, r5, #29
    88fa:	4a09      	ldr	r2, [pc, #36]	; (8920 <__aeabi_f2d+0xa4>)
    88fc:	e7ce      	b.n	889c <__aeabi_f2d+0x20>
    88fe:	4a08      	ldr	r2, [pc, #32]	; (8920 <__aeabi_f2d+0xa4>)
    8900:	2300      	movs	r3, #0
    8902:	e7cb      	b.n	889c <__aeabi_f2d+0x20>
    8904:	2200      	movs	r2, #0
    8906:	2300      	movs	r3, #0
    8908:	e7c8      	b.n	889c <__aeabi_f2d+0x20>
    890a:	0003      	movs	r3, r0
    890c:	3b0b      	subs	r3, #11
    890e:	409d      	lsls	r5, r3
    8910:	002b      	movs	r3, r5
    8912:	2500      	movs	r5, #0
    8914:	e7e3      	b.n	88de <__aeabi_f2d+0x62>
    8916:	46c0      	nop			; (mov r8, r8)
    8918:	800fffff 	.word	0x800fffff
    891c:	00000389 	.word	0x00000389
    8920:	000007ff 	.word	0x000007ff

00008924 <__aeabi_d2f>:
    8924:	004b      	lsls	r3, r1, #1
    8926:	b570      	push	{r4, r5, r6, lr}
    8928:	0d5e      	lsrs	r6, r3, #21
    892a:	030c      	lsls	r4, r1, #12
    892c:	1c75      	adds	r5, r6, #1
    892e:	0a64      	lsrs	r4, r4, #9
    8930:	0f42      	lsrs	r2, r0, #29
    8932:	056d      	lsls	r5, r5, #21
    8934:	4322      	orrs	r2, r4
    8936:	0fc9      	lsrs	r1, r1, #31
    8938:	00c4      	lsls	r4, r0, #3
    893a:	0d6d      	lsrs	r5, r5, #21
    893c:	2d01      	cmp	r5, #1
    893e:	dd2a      	ble.n	8996 <__aeabi_d2f+0x72>
    8940:	4b3b      	ldr	r3, [pc, #236]	; (8a30 <__aeabi_d2f+0x10c>)
    8942:	18f3      	adds	r3, r6, r3
    8944:	2bfe      	cmp	r3, #254	; 0xfe
    8946:	dc1a      	bgt.n	897e <__aeabi_d2f+0x5a>
    8948:	2b00      	cmp	r3, #0
    894a:	dd42      	ble.n	89d2 <__aeabi_d2f+0xae>
    894c:	0180      	lsls	r0, r0, #6
    894e:	1e45      	subs	r5, r0, #1
    8950:	41a8      	sbcs	r0, r5
    8952:	00d2      	lsls	r2, r2, #3
    8954:	4310      	orrs	r0, r2
    8956:	0f62      	lsrs	r2, r4, #29
    8958:	4302      	orrs	r2, r0
    895a:	0750      	lsls	r0, r2, #29
    895c:	d004      	beq.n	8968 <__aeabi_d2f+0x44>
    895e:	200f      	movs	r0, #15
    8960:	4010      	ands	r0, r2
    8962:	2804      	cmp	r0, #4
    8964:	d000      	beq.n	8968 <__aeabi_d2f+0x44>
    8966:	3204      	adds	r2, #4
    8968:	2080      	movs	r0, #128	; 0x80
    896a:	04c0      	lsls	r0, r0, #19
    896c:	4010      	ands	r0, r2
    896e:	d021      	beq.n	89b4 <__aeabi_d2f+0x90>
    8970:	3301      	adds	r3, #1
    8972:	2bff      	cmp	r3, #255	; 0xff
    8974:	d003      	beq.n	897e <__aeabi_d2f+0x5a>
    8976:	0192      	lsls	r2, r2, #6
    8978:	0a52      	lsrs	r2, r2, #9
    897a:	b2db      	uxtb	r3, r3
    897c:	e001      	b.n	8982 <__aeabi_d2f+0x5e>
    897e:	23ff      	movs	r3, #255	; 0xff
    8980:	2200      	movs	r2, #0
    8982:	0252      	lsls	r2, r2, #9
    8984:	0a52      	lsrs	r2, r2, #9
    8986:	05db      	lsls	r3, r3, #23
    8988:	4313      	orrs	r3, r2
    898a:	005b      	lsls	r3, r3, #1
    898c:	07c9      	lsls	r1, r1, #31
    898e:	085b      	lsrs	r3, r3, #1
    8990:	430b      	orrs	r3, r1
    8992:	0018      	movs	r0, r3
    8994:	bd70      	pop	{r4, r5, r6, pc}
    8996:	2e00      	cmp	r6, #0
    8998:	d007      	beq.n	89aa <__aeabi_d2f+0x86>
    899a:	4314      	orrs	r4, r2
    899c:	d0ef      	beq.n	897e <__aeabi_d2f+0x5a>
    899e:	2080      	movs	r0, #128	; 0x80
    89a0:	00d2      	lsls	r2, r2, #3
    89a2:	0480      	lsls	r0, r0, #18
    89a4:	4302      	orrs	r2, r0
    89a6:	23ff      	movs	r3, #255	; 0xff
    89a8:	e7d7      	b.n	895a <__aeabi_d2f+0x36>
    89aa:	4322      	orrs	r2, r4
    89ac:	2300      	movs	r3, #0
    89ae:	2a00      	cmp	r2, #0
    89b0:	d003      	beq.n	89ba <__aeabi_d2f+0x96>
    89b2:	2205      	movs	r2, #5
    89b4:	08d2      	lsrs	r2, r2, #3
    89b6:	2bff      	cmp	r3, #255	; 0xff
    89b8:	d003      	beq.n	89c2 <__aeabi_d2f+0x9e>
    89ba:	0252      	lsls	r2, r2, #9
    89bc:	0a52      	lsrs	r2, r2, #9
    89be:	b2db      	uxtb	r3, r3
    89c0:	e7df      	b.n	8982 <__aeabi_d2f+0x5e>
    89c2:	2a00      	cmp	r2, #0
    89c4:	d032      	beq.n	8a2c <__aeabi_d2f+0x108>
    89c6:	2080      	movs	r0, #128	; 0x80
    89c8:	03c0      	lsls	r0, r0, #15
    89ca:	4302      	orrs	r2, r0
    89cc:	0252      	lsls	r2, r2, #9
    89ce:	0a52      	lsrs	r2, r2, #9
    89d0:	e7d7      	b.n	8982 <__aeabi_d2f+0x5e>
    89d2:	0018      	movs	r0, r3
    89d4:	3017      	adds	r0, #23
    89d6:	db14      	blt.n	8a02 <__aeabi_d2f+0xde>
    89d8:	2080      	movs	r0, #128	; 0x80
    89da:	0400      	lsls	r0, r0, #16
    89dc:	4302      	orrs	r2, r0
    89de:	201e      	movs	r0, #30
    89e0:	1ac0      	subs	r0, r0, r3
    89e2:	281f      	cmp	r0, #31
    89e4:	dc0f      	bgt.n	8a06 <__aeabi_d2f+0xe2>
    89e6:	0025      	movs	r5, r4
    89e8:	4b12      	ldr	r3, [pc, #72]	; (8a34 <__aeabi_d2f+0x110>)
    89ea:	18f3      	adds	r3, r6, r3
    89ec:	409d      	lsls	r5, r3
    89ee:	1e6e      	subs	r6, r5, #1
    89f0:	41b5      	sbcs	r5, r6
    89f2:	409a      	lsls	r2, r3
    89f4:	002b      	movs	r3, r5
    89f6:	4313      	orrs	r3, r2
    89f8:	0022      	movs	r2, r4
    89fa:	40c2      	lsrs	r2, r0
    89fc:	431a      	orrs	r2, r3
    89fe:	2300      	movs	r3, #0
    8a00:	e7ab      	b.n	895a <__aeabi_d2f+0x36>
    8a02:	2300      	movs	r3, #0
    8a04:	e7d5      	b.n	89b2 <__aeabi_d2f+0x8e>
    8a06:	2502      	movs	r5, #2
    8a08:	426d      	negs	r5, r5
    8a0a:	1aeb      	subs	r3, r5, r3
    8a0c:	0015      	movs	r5, r2
    8a0e:	40dd      	lsrs	r5, r3
    8a10:	2820      	cmp	r0, #32
    8a12:	d009      	beq.n	8a28 <__aeabi_d2f+0x104>
    8a14:	4b08      	ldr	r3, [pc, #32]	; (8a38 <__aeabi_d2f+0x114>)
    8a16:	18f3      	adds	r3, r6, r3
    8a18:	409a      	lsls	r2, r3
    8a1a:	4314      	orrs	r4, r2
    8a1c:	1e62      	subs	r2, r4, #1
    8a1e:	4194      	sbcs	r4, r2
    8a20:	0022      	movs	r2, r4
    8a22:	2300      	movs	r3, #0
    8a24:	432a      	orrs	r2, r5
    8a26:	e798      	b.n	895a <__aeabi_d2f+0x36>
    8a28:	2200      	movs	r2, #0
    8a2a:	e7f6      	b.n	8a1a <__aeabi_d2f+0xf6>
    8a2c:	2200      	movs	r2, #0
    8a2e:	e7a8      	b.n	8982 <__aeabi_d2f+0x5e>
    8a30:	fffffc80 	.word	0xfffffc80
    8a34:	fffffc82 	.word	0xfffffc82
    8a38:	fffffca2 	.word	0xfffffca2

00008a3c <__clzsi2>:
    8a3c:	211c      	movs	r1, #28
    8a3e:	2301      	movs	r3, #1
    8a40:	041b      	lsls	r3, r3, #16
    8a42:	4298      	cmp	r0, r3
    8a44:	d301      	bcc.n	8a4a <__clzsi2+0xe>
    8a46:	0c00      	lsrs	r0, r0, #16
    8a48:	3910      	subs	r1, #16
    8a4a:	0a1b      	lsrs	r3, r3, #8
    8a4c:	4298      	cmp	r0, r3
    8a4e:	d301      	bcc.n	8a54 <__clzsi2+0x18>
    8a50:	0a00      	lsrs	r0, r0, #8
    8a52:	3908      	subs	r1, #8
    8a54:	091b      	lsrs	r3, r3, #4
    8a56:	4298      	cmp	r0, r3
    8a58:	d301      	bcc.n	8a5e <__clzsi2+0x22>
    8a5a:	0900      	lsrs	r0, r0, #4
    8a5c:	3904      	subs	r1, #4
    8a5e:	a202      	add	r2, pc, #8	; (adr r2, 8a68 <__clzsi2+0x2c>)
    8a60:	5c10      	ldrb	r0, [r2, r0]
    8a62:	1840      	adds	r0, r0, r1
    8a64:	4770      	bx	lr
    8a66:	46c0      	nop			; (mov r8, r8)
    8a68:	02020304 	.word	0x02020304
    8a6c:	01010101 	.word	0x01010101
	...
    8a78:	00000264 	.word	0x00000264
    8a7c:	00000272 	.word	0x00000272
    8a80:	00000280 	.word	0x00000280
    8a84:	0000029c 	.word	0x0000029c
    8a88:	0000028e 	.word	0x0000028e
    8a8c:	41525453 	.word	0x41525453
    8a90:	00000000 	.word	0x00000000
    8a94:	5446454c 	.word	0x5446454c
    8a98:	00000000 	.word	0x00000000
    8a9c:	48474952 	.word	0x48474952
    8aa0:	00000000 	.word	0x00000000
    8aa4:	4b434142 	.word	0x4b434142
    8aa8:	00000000 	.word	0x00000000
    8aac:	0000776d 	.word	0x0000776d
    8ab0:	00000000 	.word	0x00000000
    8ab4:	0000616d 	.word	0x0000616d
    8ab8:	00000000 	.word	0x00000000
    8abc:	0000646d 	.word	0x0000646d
    8ac0:	00000000 	.word	0x00000000
    8ac4:	0000736d 	.word	0x0000736d
    8ac8:	00000000 	.word	0x00000000
    8acc:	0000206d 	.word	0x0000206d
    8ad0:	00000000 	.word	0x00000000
    8ad4:	322e3525 	.word	0x322e3525
    8ad8:	25202c66 	.word	0x25202c66
    8adc:	66322e35 	.word	0x66322e35
    8ae0:	3525202c 	.word	0x3525202c
    8ae4:	0a66322e 	.word	0x0a66322e
    8ae8:	00000000 	.word	0x00000000

00008aec <_tcc_intflag>:
    8aec:	00000001 00000002 00000004 00000008     ................
    8afc:	00001000 00002000 00004000 00008000     ..... ...@......
    8b0c:	00010000 00020000 00040000 00080000     ................
    8b1c:	0000776d 00000000 0000206d 00000000     mw......m ......

00008b2c <tc_interrupt_vectors.12761>:
    8b2c:	00141312 42000800 42000c00 42001000     .......B...B...B
    8b3c:	42001400 42001800 42001c00 0c0b0a09     ...B...B...B....
    8b4c:	00000e0d 00001bae 00001baa 00001baa     ................
    8b5c:	00001c08 00001c08 00001bc2 00001bb4     ................
    8b6c:	00001bc8 00001bf6 00001e78 00001e58     ........x...X...
    8b7c:	00001e58 00001ee4 00001e6a 00001e86     X.......j.......
    8b8c:	00001e5c 00001e94 00001ed4 42002c00     \............,.B
    8b9c:	42003000 42003400 001c1c1b 10000800     .0.B.4.B........
    8bac:	00002000                                . ..

00008bb0 <tc_interrupt_vectors.11902>:
    8bb0:	00141312 6e6f7266 6f6e2074 73206564     ....front node s
    8bc0:	70757465 6d6f6320 74656c70 00000065     etup complete...
    8bd0:	00000043                                C...

00008bd4 <_global_impure_ptr>:
    8bd4:	2000000c 00464e49 00666e69 004e414e     ... INF.inf.NAN.
    8be4:	006e616e 31300030 35343332 39383736     nan.0.0123456789
    8bf4:	44434241 30004645 34333231 38373635     ABCDEF.012345678
    8c04:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
    8c14:	4e614e00 00000000                       .NaN....

00008c1c <__sf_fake_stdin>:
	...

00008c3c <__sf_fake_stdout>:
	...

00008c5c <__sf_fake_stderr>:
	...
    8c7c:	49534f50 002e0058 00000000              POSIX.......

00008c88 <__mprec_tens>:
    8c88:	00000000 3ff00000 00000000 40240000     .......?......$@
    8c98:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    8ca8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    8cb8:	00000000 412e8480 00000000 416312d0     .......A......cA
    8cc8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    8cd8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    8ce8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    8cf8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    8d08:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    8d18:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    8d28:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    8d38:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    8d48:	79d99db4 44ea7843                       ...yCx.D

00008d50 <__mprec_bigtens>:
    8d50:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    8d60:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    8d70:	7f73bf3c 75154fdd                       <.s..O.u

00008d78 <p05.5385>:
    8d78:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    8d88:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....
    8d98:	000067a6 000066ca 00006788 00006760     .g...f...g..`g..
    8da8:	00006788 00006754 00006788 00006760     .g..Tg...g..`g..
    8db8:	000066ca 000066ca 00006754 00006760     .f...f..Tg..`g..
    8dc8:	0000680c 0000680c 0000680c 0000678e     .h...h...h...g..
    8dd8:	000066ca 000066ca 00006774 0000675e     .f...f..tg..^g..
    8de8:	00006774 00006754 00006774 0000675e     tg..Tg..tg..^g..
    8df8:	000066ca 000066ca 00006754 0000675e     .f...f..Tg..^g..
    8e08:	0000680c 0000680c 0000680c 00006818     .h...h...h...h..
    8e18:	00006b04 00006a62 00006a62 00006a60     .k..bj..bj..`j..
    8e28:	00006af6 00006af6 00006aec 00006a60     .j...j...j..`j..
    8e38:	00006af6 00006aec 00006af6 00006a60     .j...j...j..`j..
    8e48:	00006afc 00006afc 00006afc 00006b86     .j...j...j...k..
    8e58:	000074e8 000073b6 000074bc 000073ac     .t...s...t...s..
    8e68:	000074bc 000074c6 000074bc 000073ac     .t...t...t...s..
    8e78:	000073b6 000073b6 000074c6 000073ac     .s...s...t...s..
    8e88:	000073a2 000073a2 000073a2 00007718     .s...s...s...w..
    8e98:	00007d30 00007bf0 00007bf0 00007bee     0}...{...{...{..
    8ea8:	00007d08 00007d08 00007cfa 00007bee     .}...}...|...{..
    8eb8:	00007d08 00007cfa 00007d08 00007bee     .}...|...}...{..
    8ec8:	00007d10 00007d10 00007d10 00007f10     .}...}...}......

00008ed8 <_init>:
    8ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8eda:	46c0      	nop			; (mov r8, r8)
    8edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8ede:	bc08      	pop	{r3}
    8ee0:	469e      	mov	lr, r3
    8ee2:	4770      	bx	lr

00008ee4 <__init_array_start>:
    8ee4:	000000dd 	.word	0x000000dd

00008ee8 <_fini>:
    8ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8eea:	46c0      	nop			; (mov r8, r8)
    8eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8eee:	bc08      	pop	{r3}
    8ef0:	469e      	mov	lr, r3
    8ef2:	4770      	bx	lr

00008ef4 <__fini_array_start>:
    8ef4:	000000b5 	.word	0x000000b5
