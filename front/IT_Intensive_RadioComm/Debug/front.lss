
front.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008f18  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000a8  20000000  00008f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000854  200000a8  00008fc0  000200a8  2**2
                  ALLOC
  3 .stack        00002004  200008fc  00009814  000200a8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
  5 .comment      0000008c  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004d391  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006be1  00000000  00000000  0006d4ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000d13f  00000000  00000000  000740ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c20  00000000  00000000  0008120d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001180  00000000  00000000  00081e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021dfa  00000000  00000000  00082fad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001c5a8  00000000  00000000  000a4da7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00089d03  00000000  00000000  000c134f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002cb0  00000000  00000000  0014b054  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002900 	.word	0x20002900
       4:	00002889 	.word	0x00002889
       8:	00002885 	.word	0x00002885
       c:	00002885 	.word	0x00002885
	...
      2c:	00002885 	.word	0x00002885
	...
      38:	00002885 	.word	0x00002885
      3c:	00002885 	.word	0x00002885
      40:	00002885 	.word	0x00002885
      44:	00002885 	.word	0x00002885
      48:	00002885 	.word	0x00002885
      4c:	00002885 	.word	0x00002885
      50:	00000b75 	.word	0x00000b75
      54:	00002885 	.word	0x00002885
      58:	00002885 	.word	0x00002885
      5c:	00002885 	.word	0x00002885
      60:	00002885 	.word	0x00002885
      64:	00001179 	.word	0x00001179
      68:	00001189 	.word	0x00001189
      6c:	00001199 	.word	0x00001199
      70:	000011a9 	.word	0x000011a9
      74:	000011b9 	.word	0x000011b9
      78:	000011c9 	.word	0x000011c9
      7c:	000005b5 	.word	0x000005b5
      80:	000005c5 	.word	0x000005c5
      84:	000005d5 	.word	0x000005d5
      88:	0000251d 	.word	0x0000251d
      8c:	0000252d 	.word	0x0000252d
      90:	0000253d 	.word	0x0000253d
	...
      9c:	00002885 	.word	0x00002885
      a0:	00002885 	.word	0x00002885
      a4:	00000000 	.word	0x00000000
      a8:	00002885 	.word	0x00002885
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000a8 	.word	0x200000a8
      d4:	00000000 	.word	0x00000000
      d8:	00008f18 	.word	0x00008f18

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000ac 	.word	0x200000ac
     108:	00008f18 	.word	0x00008f18
     10c:	00008f18 	.word	0x00008f18
     110:	00000000 	.word	0x00000000

00000114 <artist_init_maze>:
*/

#include "Maze.h"

void artist_init_maze (void) {
	artist_front.maze_status = STOP;
     114:	2103      	movs	r1, #3
     116:	23d8      	movs	r3, #216	; 0xd8
     118:	4a01      	ldr	r2, [pc, #4]	; (120 <artist_init_maze+0xc>)
     11a:	54d1      	strb	r1, [r2, r3]
}
     11c:	4770      	bx	lr
     11e:	46c0      	nop			; (mov r8, r8)
     120:	20000684 	.word	0x20000684

00000124 <artist_do_maze>:
	else if(artist_front.maze_status == RIGHT) printf("%s\n", "RIGH\0");
	else printf("%s\n", "BACK\0");
}
*/

void artist_do_maze (void) {
     124:	b510      	push	{r4, lr}
	if(artist_front.maze_status == RIGHT && past_distance.right_distance + 2 < artist_front.right_distance){
     126:	23d8      	movs	r3, #216	; 0xd8
     128:	4a56      	ldr	r2, [pc, #344]	; (284 <artist_do_maze+0x160>)
     12a:	5cd3      	ldrb	r3, [r2, r3]
     12c:	2b02      	cmp	r3, #2
     12e:	d111      	bne.n	154 <artist_do_maze+0x30>
     130:	2180      	movs	r1, #128	; 0x80
     132:	05c9      	lsls	r1, r1, #23
     134:	4b54      	ldr	r3, [pc, #336]	; (288 <artist_do_maze+0x164>)
     136:	6898      	ldr	r0, [r3, #8]
     138:	4b54      	ldr	r3, [pc, #336]	; (28c <artist_do_maze+0x168>)
     13a:	4798      	blx	r3
     13c:	23d4      	movs	r3, #212	; 0xd4
     13e:	4a51      	ldr	r2, [pc, #324]	; (284 <artist_do_maze+0x160>)
     140:	58d1      	ldr	r1, [r2, r3]
     142:	4b53      	ldr	r3, [pc, #332]	; (290 <artist_do_maze+0x16c>)
     144:	4798      	blx	r3
     146:	2800      	cmp	r0, #0
     148:	d006      	beq.n	158 <artist_do_maze+0x34>
		artist_front.maze_status = LEFT;
     14a:	2101      	movs	r1, #1
     14c:	23d8      	movs	r3, #216	; 0xd8
     14e:	4a4d      	ldr	r2, [pc, #308]	; (284 <artist_do_maze+0x160>)
     150:	54d1      	strb	r1, [r2, r3]
     152:	e044      	b.n	1de <artist_do_maze+0xba>
	}
	else if(artist_front.maze_status != STOP && artist_front.right_distance < past_distance.right_distance && MAZE_RIGHT_DISTANCE_LOWERBOUND < artist_front.right_distance && artist_front.right_distance < MAZE_RIGHT_DISTANCE_UPPERBOUND){
     154:	2b03      	cmp	r3, #3
     156:	d016      	beq.n	186 <artist_do_maze+0x62>
     158:	23d4      	movs	r3, #212	; 0xd4
     15a:	4a4a      	ldr	r2, [pc, #296]	; (284 <artist_do_maze+0x160>)
     15c:	58d4      	ldr	r4, [r2, r3]
     15e:	4b4a      	ldr	r3, [pc, #296]	; (288 <artist_do_maze+0x164>)
     160:	6899      	ldr	r1, [r3, #8]
     162:	1c20      	adds	r0, r4, #0
     164:	4b4a      	ldr	r3, [pc, #296]	; (290 <artist_do_maze+0x16c>)
     166:	4798      	blx	r3
     168:	2800      	cmp	r0, #0
     16a:	d00c      	beq.n	186 <artist_do_maze+0x62>
     16c:	4949      	ldr	r1, [pc, #292]	; (294 <artist_do_maze+0x170>)
     16e:	1c20      	adds	r0, r4, #0
     170:	4b49      	ldr	r3, [pc, #292]	; (298 <artist_do_maze+0x174>)
     172:	4798      	blx	r3
     174:	2800      	cmp	r0, #0
     176:	d006      	beq.n	186 <artist_do_maze+0x62>
     178:	2182      	movs	r1, #130	; 0x82
     17a:	05c9      	lsls	r1, r1, #23
     17c:	1c20      	adds	r0, r4, #0
     17e:	4b44      	ldr	r3, [pc, #272]	; (290 <artist_do_maze+0x16c>)
     180:	4798      	blx	r3
     182:	2800      	cmp	r0, #0
     184:	d12b      	bne.n	1de <artist_do_maze+0xba>
		artist_front.maze_status = artist_front.maze_status;
	}
	else if(artist_front.right_distance > MAZE_RIGHT_DISTANCE_UPPERBOUND){
     186:	23d4      	movs	r3, #212	; 0xd4
     188:	4a3e      	ldr	r2, [pc, #248]	; (284 <artist_do_maze+0x160>)
     18a:	58d4      	ldr	r4, [r2, r3]
     18c:	2182      	movs	r1, #130	; 0x82
     18e:	05c9      	lsls	r1, r1, #23
     190:	1c20      	adds	r0, r4, #0
     192:	4b41      	ldr	r3, [pc, #260]	; (298 <artist_do_maze+0x174>)
     194:	4798      	blx	r3
     196:	2800      	cmp	r0, #0
     198:	d004      	beq.n	1a4 <artist_do_maze+0x80>
		artist_front.maze_status = RIGHT;
     19a:	2102      	movs	r1, #2
     19c:	23d8      	movs	r3, #216	; 0xd8
     19e:	4a39      	ldr	r2, [pc, #228]	; (284 <artist_do_maze+0x160>)
     1a0:	54d1      	strb	r1, [r2, r3]
     1a2:	e01c      	b.n	1de <artist_do_maze+0xba>
	}
	else if(artist_front.center_distance <= MAZE_FRONT_WALL_EXIST_DETERMINATE){
     1a4:	2182      	movs	r1, #130	; 0x82
     1a6:	05c9      	lsls	r1, r1, #23
     1a8:	23cc      	movs	r3, #204	; 0xcc
     1aa:	4a36      	ldr	r2, [pc, #216]	; (284 <artist_do_maze+0x160>)
     1ac:	58d0      	ldr	r0, [r2, r3]
     1ae:	4b3b      	ldr	r3, [pc, #236]	; (29c <artist_do_maze+0x178>)
     1b0:	4798      	blx	r3
     1b2:	2800      	cmp	r0, #0
     1b4:	d004      	beq.n	1c0 <artist_do_maze+0x9c>
		artist_front.maze_status = LEFT;
     1b6:	2101      	movs	r1, #1
     1b8:	23d8      	movs	r3, #216	; 0xd8
     1ba:	4a32      	ldr	r2, [pc, #200]	; (284 <artist_do_maze+0x160>)
     1bc:	54d1      	strb	r1, [r2, r3]
     1be:	e00e      	b.n	1de <artist_do_maze+0xba>
	}
	else if(artist_front.right_distance < MAZE_RIGHT_DISTANCE_LOWERBOUND){
     1c0:	4934      	ldr	r1, [pc, #208]	; (294 <artist_do_maze+0x170>)
     1c2:	1c20      	adds	r0, r4, #0
     1c4:	4b32      	ldr	r3, [pc, #200]	; (290 <artist_do_maze+0x16c>)
     1c6:	4798      	blx	r3
     1c8:	2800      	cmp	r0, #0
     1ca:	d004      	beq.n	1d6 <artist_do_maze+0xb2>
		artist_front.maze_status = LEFT;
     1cc:	2101      	movs	r1, #1
     1ce:	23d8      	movs	r3, #216	; 0xd8
     1d0:	4a2c      	ldr	r2, [pc, #176]	; (284 <artist_do_maze+0x160>)
     1d2:	54d1      	strb	r1, [r2, r3]
     1d4:	e003      	b.n	1de <artist_do_maze+0xba>
	}
	else{
		artist_front.maze_status = STRAIGHT;
     1d6:	2100      	movs	r1, #0
     1d8:	23d8      	movs	r3, #216	; 0xd8
     1da:	4a2a      	ldr	r2, [pc, #168]	; (284 <artist_do_maze+0x160>)
     1dc:	54d1      	strb	r1, [r2, r3]
	}
	
	past_distance.left_distance = artist_front.left_distance;
     1de:	4b2a      	ldr	r3, [pc, #168]	; (288 <artist_do_maze+0x164>)
     1e0:	4c28      	ldr	r4, [pc, #160]	; (284 <artist_do_maze+0x160>)
     1e2:	22d0      	movs	r2, #208	; 0xd0
     1e4:	58a2      	ldr	r2, [r4, r2]
     1e6:	601a      	str	r2, [r3, #0]
	past_distance.center_distance = artist_front.center_distance;
     1e8:	22cc      	movs	r2, #204	; 0xcc
     1ea:	58a2      	ldr	r2, [r4, r2]
     1ec:	605a      	str	r2, [r3, #4]
	past_distance.right_distance = artist_front.right_distance;
     1ee:	22d4      	movs	r2, #212	; 0xd4
     1f0:	58a2      	ldr	r2, [r4, r2]
     1f2:	609a      	str	r2, [r3, #8]
	
	artist_print_ultrasonic_value();
     1f4:	4b2a      	ldr	r3, [pc, #168]	; (2a0 <artist_do_maze+0x17c>)
     1f6:	4798      	blx	r3
	if(artist_front.maze_status == STRAIGHT) printf("%s\n", "STRA\0");
     1f8:	23d8      	movs	r3, #216	; 0xd8
     1fa:	5ce3      	ldrb	r3, [r4, r3]
     1fc:	2b00      	cmp	r3, #0
     1fe:	d103      	bne.n	208 <artist_do_maze+0xe4>
     200:	4828      	ldr	r0, [pc, #160]	; (2a4 <artist_do_maze+0x180>)
     202:	4b29      	ldr	r3, [pc, #164]	; (2a8 <artist_do_maze+0x184>)
     204:	4798      	blx	r3
     206:	e011      	b.n	22c <artist_do_maze+0x108>
	else if(artist_front.maze_status == LEFT) printf("%s\n", "LEFT\0");
     208:	2b01      	cmp	r3, #1
     20a:	d104      	bne.n	216 <artist_do_maze+0xf2>
     20c:	4825      	ldr	r0, [pc, #148]	; (2a4 <artist_do_maze+0x180>)
     20e:	3008      	adds	r0, #8
     210:	4b25      	ldr	r3, [pc, #148]	; (2a8 <artist_do_maze+0x184>)
     212:	4798      	blx	r3
     214:	e00a      	b.n	22c <artist_do_maze+0x108>
	else if(artist_front.maze_status == RIGHT) printf("%s\n", "RIGH\0");
     216:	2b02      	cmp	r3, #2
     218:	d104      	bne.n	224 <artist_do_maze+0x100>
     21a:	4822      	ldr	r0, [pc, #136]	; (2a4 <artist_do_maze+0x180>)
     21c:	3010      	adds	r0, #16
     21e:	4b22      	ldr	r3, [pc, #136]	; (2a8 <artist_do_maze+0x184>)
     220:	4798      	blx	r3
     222:	e003      	b.n	22c <artist_do_maze+0x108>
	else printf("%s\n", "BACK\0");
     224:	481f      	ldr	r0, [pc, #124]	; (2a4 <artist_do_maze+0x180>)
     226:	3018      	adds	r0, #24
     228:	4b1f      	ldr	r3, [pc, #124]	; (2a8 <artist_do_maze+0x184>)
     22a:	4798      	blx	r3

	switch (artist_front.maze_status){
     22c:	4a15      	ldr	r2, [pc, #84]	; (284 <artist_do_maze+0x160>)
     22e:	23d8      	movs	r3, #216	; 0xd8
     230:	5cd1      	ldrb	r1, [r2, r3]
     232:	2904      	cmp	r1, #4
     234:	d825      	bhi.n	282 <artist_do_maze+0x15e>
     236:	008b      	lsls	r3, r1, #2
     238:	4a1c      	ldr	r2, [pc, #112]	; (2ac <artist_do_maze+0x188>)
     23a:	58d3      	ldr	r3, [r2, r3]
     23c:	469f      	mov	pc, r3
		case STRAIGHT :
		usart_write_buffer_job(&(artist_front.usart_instance), "mw\0\0\0", MAX_RX_BUFFER_LENGTH);
     23e:	2205      	movs	r2, #5
     240:	4918      	ldr	r1, [pc, #96]	; (2a4 <artist_do_maze+0x180>)
     242:	3120      	adds	r1, #32
     244:	481a      	ldr	r0, [pc, #104]	; (2b0 <artist_do_maze+0x18c>)
     246:	4b1b      	ldr	r3, [pc, #108]	; (2b4 <artist_do_maze+0x190>)
     248:	4798      	blx	r3
		break;
     24a:	e01a      	b.n	282 <artist_do_maze+0x15e>
		case LEFT :
		usart_write_buffer_job(&(artist_front.usart_instance), "ma\0\0\0", MAX_RX_BUFFER_LENGTH);
     24c:	2205      	movs	r2, #5
     24e:	4915      	ldr	r1, [pc, #84]	; (2a4 <artist_do_maze+0x180>)
     250:	3128      	adds	r1, #40	; 0x28
     252:	4817      	ldr	r0, [pc, #92]	; (2b0 <artist_do_maze+0x18c>)
     254:	4b17      	ldr	r3, [pc, #92]	; (2b4 <artist_do_maze+0x190>)
     256:	4798      	blx	r3
		break;
     258:	e013      	b.n	282 <artist_do_maze+0x15e>
		case RIGHT :
		usart_write_buffer_job(&(artist_front.usart_instance), "md\0\0\0", MAX_RX_BUFFER_LENGTH);
     25a:	2205      	movs	r2, #5
     25c:	4911      	ldr	r1, [pc, #68]	; (2a4 <artist_do_maze+0x180>)
     25e:	3130      	adds	r1, #48	; 0x30
     260:	4813      	ldr	r0, [pc, #76]	; (2b0 <artist_do_maze+0x18c>)
     262:	4b14      	ldr	r3, [pc, #80]	; (2b4 <artist_do_maze+0x190>)
     264:	4798      	blx	r3
		break;
     266:	e00c      	b.n	282 <artist_do_maze+0x15e>
		case BACK :
		usart_write_buffer_job(&(artist_front.usart_instance), "ms\0\0\0", MAX_RX_BUFFER_LENGTH);
     268:	2205      	movs	r2, #5
     26a:	490e      	ldr	r1, [pc, #56]	; (2a4 <artist_do_maze+0x180>)
     26c:	3138      	adds	r1, #56	; 0x38
     26e:	4810      	ldr	r0, [pc, #64]	; (2b0 <artist_do_maze+0x18c>)
     270:	4b10      	ldr	r3, [pc, #64]	; (2b4 <artist_do_maze+0x190>)
     272:	4798      	blx	r3
		break;
     274:	e005      	b.n	282 <artist_do_maze+0x15e>
		case STOP :
		usart_write_buffer_job(&(artist_front.usart_instance), "m \0\0\0", MAX_RX_BUFFER_LENGTH);
     276:	2205      	movs	r2, #5
     278:	490a      	ldr	r1, [pc, #40]	; (2a4 <artist_do_maze+0x180>)
     27a:	3140      	adds	r1, #64	; 0x40
     27c:	480c      	ldr	r0, [pc, #48]	; (2b0 <artist_do_maze+0x18c>)
     27e:	4b0d      	ldr	r3, [pc, #52]	; (2b4 <artist_do_maze+0x190>)
     280:	4798      	blx	r3
		break;
	}
}
     282:	bd10      	pop	{r4, pc}
     284:	20000684 	.word	0x20000684
     288:	20000768 	.word	0x20000768
     28c:	00006385 	.word	0x00006385
     290:	000062dd 	.word	0x000062dd
     294:	40900000 	.word	0x40900000
     298:	00006305 	.word	0x00006305
     29c:	000062f1 	.word	0x000062f1
     2a0:	00000345 	.word	0x00000345
     2a4:	00008aa8 	.word	0x00008aa8
     2a8:	00004015 	.word	0x00004015
     2ac:	00008a94 	.word	0x00008a94
     2b0:	200006fc 	.word	0x200006fc
     2b4:	000019ed 	.word	0x000019ed

000002b8 <artist_pause_maze>:

void artist_pause_maze(void){
     2b8:	b510      	push	{r4, lr}
	artist_front.maze_status = STOP;
     2ba:	4805      	ldr	r0, [pc, #20]	; (2d0 <artist_pause_maze+0x18>)
     2bc:	2203      	movs	r2, #3
     2be:	23d8      	movs	r3, #216	; 0xd8
     2c0:	54c2      	strb	r2, [r0, r3]
	usart_write_buffer_job(&(artist_front.usart_instance), "m \0\0\0", MAX_RX_BUFFER_LENGTH);
     2c2:	3078      	adds	r0, #120	; 0x78
     2c4:	3202      	adds	r2, #2
     2c6:	4903      	ldr	r1, [pc, #12]	; (2d4 <artist_pause_maze+0x1c>)
     2c8:	3140      	adds	r1, #64	; 0x40
     2ca:	4b03      	ldr	r3, [pc, #12]	; (2d8 <artist_pause_maze+0x20>)
     2cc:	4798      	blx	r3
     2ce:	bd10      	pop	{r4, pc}
     2d0:	20000684 	.word	0x20000684
     2d4:	00008aa8 	.word	0x00008aa8
     2d8:	000019ed 	.word	0x000019ed

000002dc <artist_ultrasonic_configure>:
 */
#include "TheArtist.h"
#include "UltraSonic.h"

void artist_ultrasonic_configure (struct artist_ultrasonic_module * module, uint8_t echo, uint8_t trig) {
	module->echo_pin	= echo; 
     2dc:	7001      	strb	r1, [r0, #0]
	module->trigger_pin = trig;  
     2de:	7042      	strb	r2, [r0, #1]
	module->filter_large_change_counts = 0; 
     2e0:	2300      	movs	r3, #0
     2e2:	7083      	strb	r3, [r0, #2]
	module->fliter_old_val = 0; 
     2e4:	2300      	movs	r3, #0
     2e6:	6043      	str	r3, [r0, #4]
}
     2e8:	4770      	bx	lr
     2ea:	46c0      	nop			; (mov r8, r8)

000002ec <artist_ultrasonic_gpio_init>:

void artist_ultrasonic_gpio_init() {
     2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ee:	b085      	sub	sp, #20
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     2f0:	a903      	add	r1, sp, #12
     2f2:	2201      	movs	r2, #1
     2f4:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     2f6:	2300      	movs	r3, #0
     2f8:	708b      	strb	r3, [r1, #2]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     2fa:	ad02      	add	r5, sp, #8
     2fc:	702b      	strb	r3, [r5, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     2fe:	706a      	strb	r2, [r5, #1]
	config->powersave  = false;
     300:	70ab      	strb	r3, [r5, #2]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     302:	4668      	mov	r0, sp
     304:	7003      	strb	r3, [r0, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     306:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
     308:	7083      	strb	r3, [r0, #2]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     30a:	ac01      	add	r4, sp, #4
     30c:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     30e:	7062      	strb	r2, [r4, #1]
	config->powersave  = false;
     310:	70a3      	strb	r3, [r4, #2]
	port_get_config_defaults(&pin_config_trig);
	port_get_config_defaults(&pin_config_echo_center);
	port_get_config_defaults(&pin_config_echo_right);
	port_get_config_defaults(&pin_config_echo_left);

	pin_config_trig.direction			=	PORT_PIN_DIR_OUTPUT;
     312:	700a      	strb	r2, [r1, #0]
	
	pin_config_echo_right.direction		=	PORT_PIN_DIR_INPUT;
	pin_config_echo_right.input_pull	=	PORT_PIN_PULL_UP;
	
	
	port_pin_set_config(artist_front.us_instance_center.trigger_pin, &pin_config_trig);
     314:	4f09      	ldr	r7, [pc, #36]	; (33c <artist_ultrasonic_gpio_init+0x50>)
     316:	33b5      	adds	r3, #181	; 0xb5
     318:	5cf8      	ldrb	r0, [r7, r3]
     31a:	4e09      	ldr	r6, [pc, #36]	; (340 <artist_ultrasonic_gpio_init+0x54>)
     31c:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_center.echo_pin, &pin_config_echo_center);
     31e:	23b4      	movs	r3, #180	; 0xb4
     320:	5cf8      	ldrb	r0, [r7, r3]
     322:	0029      	movs	r1, r5
     324:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_left.echo_pin, &pin_config_echo_left);
     326:	23bc      	movs	r3, #188	; 0xbc
     328:	5cf8      	ldrb	r0, [r7, r3]
     32a:	0021      	movs	r1, r4
     32c:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_right.echo_pin, &pin_config_echo_right); 
     32e:	23c4      	movs	r3, #196	; 0xc4
     330:	5cf8      	ldrb	r0, [r7, r3]
     332:	4669      	mov	r1, sp
     334:	47b0      	blx	r6
}
     336:	b005      	add	sp, #20
     338:	bdf0      	pop	{r4, r5, r6, r7, pc}
     33a:	46c0      	nop			; (mov r8, r8)
     33c:	20000684 	.word	0x20000684
     340:	00000ce9 	.word	0x00000ce9

00000344 <artist_print_ultrasonic_value>:
	else if (FILTER_VAL < 0)	FILTER_VAL = 0;

	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
}

float artist_print_ultrasonic_value() {
     344:	b5f0      	push	{r4, r5, r6, r7, lr}
     346:	b085      	sub	sp, #20
	printf("%5.2f, %5.2f, %5.2f\n", 
				artist_front.left_distance, 
     348:	4d0b      	ldr	r5, [pc, #44]	; (378 <artist_print_ultrasonic_value+0x34>)

	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
}

float artist_print_ultrasonic_value() {
	printf("%5.2f, %5.2f, %5.2f\n", 
     34a:	4c0c      	ldr	r4, [pc, #48]	; (37c <artist_print_ultrasonic_value+0x38>)
     34c:	23d0      	movs	r3, #208	; 0xd0
     34e:	58e8      	ldr	r0, [r5, r3]
     350:	47a0      	blx	r4
     352:	0006      	movs	r6, r0
     354:	000f      	movs	r7, r1
				artist_front.left_distance, 
				artist_front.center_distance, 
				artist_front.right_distance);  
     356:	23d4      	movs	r3, #212	; 0xd4

	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
}

float artist_print_ultrasonic_value() {
	printf("%5.2f, %5.2f, %5.2f\n", 
     358:	58e8      	ldr	r0, [r5, r3]
     35a:	47a0      	blx	r4
     35c:	9002      	str	r0, [sp, #8]
     35e:	9103      	str	r1, [sp, #12]
				artist_front.left_distance, 
				artist_front.center_distance, 
     360:	23cc      	movs	r3, #204	; 0xcc

	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
}

float artist_print_ultrasonic_value() {
	printf("%5.2f, %5.2f, %5.2f\n", 
     362:	58e8      	ldr	r0, [r5, r3]
     364:	47a0      	blx	r4
     366:	9000      	str	r0, [sp, #0]
     368:	9101      	str	r1, [sp, #4]
     36a:	0032      	movs	r2, r6
     36c:	003b      	movs	r3, r7
     36e:	4804      	ldr	r0, [pc, #16]	; (380 <artist_print_ultrasonic_value+0x3c>)
     370:	4904      	ldr	r1, [pc, #16]	; (384 <artist_print_ultrasonic_value+0x40>)
     372:	4788      	blx	r1
				artist_front.left_distance, 
				artist_front.center_distance, 
				artist_front.right_distance);  
}
     374:	b005      	add	sp, #20
     376:	bdf0      	pop	{r4, r5, r6, r7, pc}
     378:	20000684 	.word	0x20000684
     37c:	00008899 	.word	0x00008899
     380:	00008af0 	.word	0x00008af0
     384:	00003f1d 	.word	0x00003f1d

00000388 <artist_ultrasonic_get_value>:
float artist_ultrasonic_get_value(struct artist_ultrasonic_module * const module) {
     388:	b5f0      	push	{r4, r5, r6, r7, lr}
     38a:	b083      	sub	sp, #12
     38c:	0004      	movs	r4, r0
	// TODO : use timer callback function!
	uint16_t start, end;
	uint16_t count = 0;
	
	port_pin_set_output_level(module->trigger_pin, false);
     38e:	7843      	ldrb	r3, [r0, #1]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     390:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     392:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     394:	2900      	cmp	r1, #0
     396:	d104      	bne.n	3a2 <artist_ultrasonic_get_value+0x1a>
		return &(ports[port_index]->Group[group_index]);
     398:	095a      	lsrs	r2, r3, #5
     39a:	01d2      	lsls	r2, r2, #7
     39c:	495d      	ldr	r1, [pc, #372]	; (514 <artist_ultrasonic_get_value+0x18c>)
     39e:	468c      	mov	ip, r1
     3a0:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3a2:	211f      	movs	r1, #31
     3a4:	400b      	ands	r3, r1
     3a6:	391e      	subs	r1, #30
     3a8:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     3aa:	6151      	str	r1, [r2, #20]
	delay_us(40);
     3ac:	2028      	movs	r0, #40	; 0x28
     3ae:	4b5a      	ldr	r3, [pc, #360]	; (518 <artist_ultrasonic_get_value+0x190>)
     3b0:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, true);
     3b2:	7863      	ldrb	r3, [r4, #1]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     3b4:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     3b6:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     3b8:	2900      	cmp	r1, #0
     3ba:	d104      	bne.n	3c6 <artist_ultrasonic_get_value+0x3e>
		return &(ports[port_index]->Group[group_index]);
     3bc:	095a      	lsrs	r2, r3, #5
     3be:	01d2      	lsls	r2, r2, #7
     3c0:	4954      	ldr	r1, [pc, #336]	; (514 <artist_ultrasonic_get_value+0x18c>)
     3c2:	468c      	mov	ip, r1
     3c4:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3c6:	211f      	movs	r1, #31
     3c8:	400b      	ands	r3, r1
     3ca:	391e      	subs	r1, #30
     3cc:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     3ce:	6191      	str	r1, [r2, #24]
	delay_us(10);
     3d0:	200a      	movs	r0, #10
     3d2:	4b51      	ldr	r3, [pc, #324]	; (518 <artist_ultrasonic_get_value+0x190>)
     3d4:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, false);
     3d6:	7863      	ldrb	r3, [r4, #1]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     3d8:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     3da:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     3dc:	2900      	cmp	r1, #0
     3de:	d104      	bne.n	3ea <artist_ultrasonic_get_value+0x62>
		return &(ports[port_index]->Group[group_index]);
     3e0:	095a      	lsrs	r2, r3, #5
     3e2:	01d2      	lsls	r2, r2, #7
     3e4:	494b      	ldr	r1, [pc, #300]	; (514 <artist_ultrasonic_get_value+0x18c>)
     3e6:	468c      	mov	ip, r1
     3e8:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3ea:	211f      	movs	r1, #31
     3ec:	400b      	ands	r3, r1
     3ee:	391e      	subs	r1, #30
     3f0:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     3f2:	6151      	str	r1, [r2, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     3f4:	4b49      	ldr	r3, [pc, #292]	; (51c <artist_ultrasonic_get_value+0x194>)
     3f6:	681a      	ldr	r2, [r3, #0]

	while (tc_is_syncing(module_inst)) {
     3f8:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     3fa:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     3fc:	438b      	bics	r3, r1
     3fe:	d1fc      	bne.n	3fa <artist_ultrasonic_get_value+0x72>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
     400:	7113      	strb	r3, [r2, #4]

	while (tc_is_syncing(module_inst)) {
     402:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     404:	7bd3      	ldrb	r3, [r2, #15]
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;

	while (tc_is_syncing(module_inst)) {
     406:	438b      	bics	r3, r1
     408:	d1fc      	bne.n	404 <artist_ultrasonic_get_value+0x7c>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
     40a:	3340      	adds	r3, #64	; 0x40
     40c:	7153      	strb	r3, [r2, #5]
	tc_start_counter(&(artist_front.tc_instance_ultrasonic)); 
	while (!(port_pin_get_input_level(module->echo_pin))) {
     40e:	7823      	ldrb	r3, [r4, #0]
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     410:	221f      	movs	r2, #31
     412:	401a      	ands	r2, r3
     414:	2001      	movs	r0, #1
     416:	4090      	lsls	r0, r2
     418:	09da      	lsrs	r2, r3, #7
     41a:	2100      	movs	r1, #0
     41c:	2a00      	cmp	r2, #0
     41e:	d104      	bne.n	42a <artist_ultrasonic_get_value+0xa2>
     420:	0959      	lsrs	r1, r3, #5
     422:	01c9      	lsls	r1, r1, #7
     424:	4b3b      	ldr	r3, [pc, #236]	; (514 <artist_ultrasonic_get_value+0x18c>)
     426:	469c      	mov	ip, r3
     428:	4461      	add	r1, ip
     42a:	4b3d      	ldr	r3, [pc, #244]	; (520 <artist_ultrasonic_get_value+0x198>)
     42c:	e005      	b.n	43a <artist_ultrasonic_get_value+0xb2>
     42e:	3b01      	subs	r3, #1
     430:	b29b      	uxth	r3, r3
		count ++;
		if (count > 0xFF00) return module->fliter_old_val; 
     432:	2b00      	cmp	r3, #0
     434:	d101      	bne.n	43a <artist_ultrasonic_get_value+0xb2>
     436:	6860      	ldr	r0, [r4, #4]
     438:	e069      	b.n	50e <artist_ultrasonic_get_value+0x186>

	return (port_base->IN.reg & pin_mask);
     43a:	6a0a      	ldr	r2, [r1, #32]
	delay_us(40);
	port_pin_set_output_level(module->trigger_pin, true);
	delay_us(10);
	port_pin_set_output_level(module->trigger_pin, false);
	tc_start_counter(&(artist_front.tc_instance_ultrasonic)); 
	while (!(port_pin_get_input_level(module->echo_pin))) {
     43c:	4202      	tst	r2, r0
     43e:	d0f6      	beq.n	42e <artist_ultrasonic_get_value+0xa6>
		count ++;
		if (count > 0xFF00) return module->fliter_old_val; 
	}
	count =0; 
	start = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
     440:	4836      	ldr	r0, [pc, #216]	; (51c <artist_ultrasonic_get_value+0x194>)
     442:	4b38      	ldr	r3, [pc, #224]	; (524 <artist_ultrasonic_get_value+0x19c>)
     444:	4798      	blx	r3
     446:	0005      	movs	r5, r0
	while ((port_pin_get_input_level(module->echo_pin)))  {
     448:	7823      	ldrb	r3, [r4, #0]
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     44a:	221f      	movs	r2, #31
     44c:	401a      	ands	r2, r3
     44e:	2001      	movs	r0, #1
     450:	4090      	lsls	r0, r2
     452:	09da      	lsrs	r2, r3, #7
     454:	2100      	movs	r1, #0
     456:	2a00      	cmp	r2, #0
     458:	d104      	bne.n	464 <artist_ultrasonic_get_value+0xdc>
     45a:	0959      	lsrs	r1, r3, #5
     45c:	01c9      	lsls	r1, r1, #7
     45e:	4b2d      	ldr	r3, [pc, #180]	; (514 <artist_ultrasonic_get_value+0x18c>)
     460:	469c      	mov	ip, r3
     462:	4461      	add	r1, ip
     464:	4b2e      	ldr	r3, [pc, #184]	; (520 <artist_ultrasonic_get_value+0x198>)
     466:	e005      	b.n	474 <artist_ultrasonic_get_value+0xec>
     468:	3b01      	subs	r3, #1
     46a:	b29b      	uxth	r3, r3
		count ++;
		if (count > 0xFF00) return module->fliter_old_val;  
     46c:	2b00      	cmp	r3, #0
     46e:	d101      	bne.n	474 <artist_ultrasonic_get_value+0xec>
     470:	6860      	ldr	r0, [r4, #4]
     472:	e04c      	b.n	50e <artist_ultrasonic_get_value+0x186>

	return (port_base->IN.reg & pin_mask);
     474:	6a0a      	ldr	r2, [r1, #32]
		count ++;
		if (count > 0xFF00) return module->fliter_old_val; 
	}
	count =0; 
	start = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
	while ((port_pin_get_input_level(module->echo_pin)))  {
     476:	4202      	tst	r2, r0
     478:	d1f6      	bne.n	468 <artist_ultrasonic_get_value+0xe0>
		count ++;
		if (count > 0xFF00) return module->fliter_old_val;  
	}
	end = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
     47a:	4e28      	ldr	r6, [pc, #160]	; (51c <artist_ultrasonic_get_value+0x194>)
     47c:	0030      	movs	r0, r6
     47e:	4b29      	ldr	r3, [pc, #164]	; (524 <artist_ultrasonic_get_value+0x19c>)
     480:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     482:	6832      	ldr	r2, [r6, #0]

	while (tc_is_syncing(module_inst)) {
     484:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     486:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     488:	438b      	bics	r3, r1
     48a:	d1fc      	bne.n	486 <artist_ultrasonic_get_value+0xfe>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
     48c:	3380      	adds	r3, #128	; 0x80
     48e:	7153      	strb	r3, [r2, #5]
	tc_stop_counter(&(artist_front.tc_instance_ultrasonic));

	float new = ((float)(end - start)) * 0.017;
     490:	0400      	lsls	r0, r0, #16
     492:	0c03      	lsrs	r3, r0, #16
     494:	042d      	lsls	r5, r5, #16
     496:	0c2d      	lsrs	r5, r5, #16
     498:	1b58      	subs	r0, r3, r5
     49a:	4f23      	ldr	r7, [pc, #140]	; (528 <artist_ultrasonic_get_value+0x1a0>)
     49c:	47b8      	blx	r7
     49e:	4b23      	ldr	r3, [pc, #140]	; (52c <artist_ultrasonic_get_value+0x1a4>)
     4a0:	4798      	blx	r3
     4a2:	4a23      	ldr	r2, [pc, #140]	; (530 <artist_ultrasonic_get_value+0x1a8>)
     4a4:	4b23      	ldr	r3, [pc, #140]	; (534 <artist_ultrasonic_get_value+0x1ac>)
     4a6:	4d24      	ldr	r5, [pc, #144]	; (538 <artist_ultrasonic_get_value+0x1b0>)
     4a8:	47a8      	blx	r5
     4aa:	4b24      	ldr	r3, [pc, #144]	; (53c <artist_ultrasonic_get_value+0x1b4>)
     4ac:	4798      	blx	r3
     4ae:	9001      	str	r0, [sp, #4]
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     4b0:	6865      	ldr	r5, [r4, #4]
	port_pin_set_config(artist_front.us_instance_right.echo_pin, &pin_config_echo_right); 
}
static float artist_HC_SR04_filter(struct artist_ultrasonic_module * module,
float new, float old, float FILTER_VAL ) {
	
	if (new > old * module->filter_large_change_counts ||
     4b2:	78a6      	ldrb	r6, [r4, #2]
     4b4:	0030      	movs	r0, r6
     4b6:	47b8      	blx	r7
     4b8:	1c07      	adds	r7, r0, #0
     4ba:	1c01      	adds	r1, r0, #0
     4bc:	1c28      	adds	r0, r5, #0
     4be:	4b20      	ldr	r3, [pc, #128]	; (540 <artist_ultrasonic_get_value+0x1b8>)
     4c0:	4798      	blx	r3
     4c2:	1c01      	adds	r1, r0, #0
     4c4:	9801      	ldr	r0, [sp, #4]
     4c6:	4b1f      	ldr	r3, [pc, #124]	; (544 <artist_ultrasonic_get_value+0x1bc>)
     4c8:	4798      	blx	r3
     4ca:	2800      	cmp	r0, #0
     4cc:	d109      	bne.n	4e2 <artist_ultrasonic_get_value+0x15a>
     4ce:	1c39      	adds	r1, r7, #0
     4d0:	1c28      	adds	r0, r5, #0
     4d2:	4b1d      	ldr	r3, [pc, #116]	; (548 <artist_ultrasonic_get_value+0x1c0>)
     4d4:	4798      	blx	r3
     4d6:	1c01      	adds	r1, r0, #0
     4d8:	9801      	ldr	r0, [sp, #4]
     4da:	4b1c      	ldr	r3, [pc, #112]	; (54c <artist_ultrasonic_get_value+0x1c4>)
     4dc:	4798      	blx	r3
     4de:	2800      	cmp	r0, #0
     4e0:	d008      	beq.n	4f4 <artist_ultrasonic_get_value+0x16c>
	new < old * 1/module->filter_large_change_counts ) {
		module->filter_large_change_counts ++;
     4e2:	1c73      	adds	r3, r6, #1
     4e4:	b2db      	uxtb	r3, r3
		if (module->filter_large_change_counts > 3)		
     4e6:	2b03      	cmp	r3, #3
     4e8:	d802      	bhi.n	4f0 <artist_ultrasonic_get_value+0x168>
static float artist_HC_SR04_filter(struct artist_ultrasonic_module * module,
float new, float old, float FILTER_VAL ) {
	
	if (new > old * module->filter_large_change_counts ||
	new < old * 1/module->filter_large_change_counts ) {
		module->filter_large_change_counts ++;
     4ea:	70a3      	strb	r3, [r4, #2]
		if (module->filter_large_change_counts > 3)		
			module->filter_large_change_counts = 0;
		else 											
			new = old;
     4ec:	9501      	str	r5, [sp, #4]
     4ee:	e001      	b.n	4f4 <artist_ultrasonic_get_value+0x16c>
	
	if (new > old * module->filter_large_change_counts ||
	new < old * 1/module->filter_large_change_counts ) {
		module->filter_large_change_counts ++;
		if (module->filter_large_change_counts > 3)		
			module->filter_large_change_counts = 0;
     4f0:	2300      	movs	r3, #0
     4f2:	70a3      	strb	r3, [r4, #2]
			new = old;
	}
	if (FILTER_VAL > 1)			FILTER_VAL = 1;
	else if (FILTER_VAL < 0)	FILTER_VAL = 0;

	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
     4f4:	4f12      	ldr	r7, [pc, #72]	; (540 <artist_ultrasonic_get_value+0x1b8>)
     4f6:	4916      	ldr	r1, [pc, #88]	; (550 <artist_ultrasonic_get_value+0x1c8>)
     4f8:	9801      	ldr	r0, [sp, #4]
     4fa:	47b8      	blx	r7
     4fc:	1c06      	adds	r6, r0, #0
     4fe:	4915      	ldr	r1, [pc, #84]	; (554 <artist_ultrasonic_get_value+0x1cc>)
     500:	1c28      	adds	r0, r5, #0
     502:	47b8      	blx	r7
     504:	1c01      	adds	r1, r0, #0
     506:	1c30      	adds	r0, r6, #0
     508:	4b13      	ldr	r3, [pc, #76]	; (558 <artist_ultrasonic_get_value+0x1d0>)
     50a:	4798      	blx	r3
	}
	end = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
	tc_stop_counter(&(artist_front.tc_instance_ultrasonic));

	float new = ((float)(end - start)) * 0.017;
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     50c:	6060      	str	r0, [r4, #4]
	return module->fliter_old_val;
}
     50e:	b003      	add	sp, #12
     510:	bdf0      	pop	{r4, r5, r6, r7, pc}
     512:	46c0      	nop			; (mov r8, r8)
     514:	41004400 	.word	0x41004400
     518:	000009dd 	.word	0x000009dd
     51c:	20000684 	.word	0x20000684
     520:	0000ff01 	.word	0x0000ff01
     524:	00002801 	.word	0x00002801
     528:	00006c2d 	.word	0x00006c2d
     52c:	00008899 	.word	0x00008899
     530:	b020c49c 	.word	0xb020c49c
     534:	3f916872 	.word	0x3f916872
     538:	00007b5d 	.word	0x00007b5d
     53c:	00008941 	.word	0x00008941
     540:	00006a05 	.word	0x00006a05
     544:	00006305 	.word	0x00006305
     548:	00006671 	.word	0x00006671
     54c:	000062dd 	.word	0x000062dd
     550:	3ecccccc 	.word	0x3ecccccc
     554:	3f19999a 	.word	0x3f19999a
     558:	00006385 	.word	0x00006385

0000055c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     55e:	464f      	mov	r7, r9
     560:	4646      	mov	r6, r8
     562:	b4c0      	push	{r6, r7}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     564:	0080      	lsls	r0, r0, #2
     566:	4b11      	ldr	r3, [pc, #68]	; (5ac <_tcc_interrupt_handler+0x50>)
     568:	58c3      	ldr	r3, [r0, r3]
     56a:	4699      	mov	r9, r3
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     56c:	681b      	ldr	r3, [r3, #0]
     56e:	6adf      	ldr	r7, [r3, #44]	; 0x2c
     570:	464b      	mov	r3, r9
     572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     574:	401f      	ands	r7, r3
     576:	464b      	mov	r3, r9
     578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     57a:	401f      	ands	r7, r3
     57c:	4d0c      	ldr	r5, [pc, #48]	; (5b0 <_tcc_interrupt_handler+0x54>)
     57e:	464b      	mov	r3, r9
     580:	1d1c      	adds	r4, r3, #4
     582:	2334      	movs	r3, #52	; 0x34
     584:	444b      	add	r3, r9
     586:	4698      	mov	r8, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     588:	682e      	ldr	r6, [r5, #0]
     58a:	423e      	tst	r6, r7
     58c:	d005      	beq.n	59a <_tcc_interrupt_handler+0x3e>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     58e:	4648      	mov	r0, r9
     590:	6823      	ldr	r3, [r4, #0]
     592:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     594:	464b      	mov	r3, r9
     596:	681b      	ldr	r3, [r3, #0]
     598:	62de      	str	r6, [r3, #44]	; 0x2c
     59a:	3504      	adds	r5, #4
     59c:	3404      	adds	r4, #4
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     59e:	4544      	cmp	r4, r8
     5a0:	d1f2      	bne.n	588 <_tcc_interrupt_handler+0x2c>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
     5a2:	bc0c      	pop	{r2, r3}
     5a4:	4690      	mov	r8, r2
     5a6:	4699      	mov	r9, r3
     5a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     5aa:	46c0      	nop			; (mov r8, r8)
     5ac:	20000774 	.word	0x20000774
     5b0:	00008b08 	.word	0x00008b08

000005b4 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     5b4:	b510      	push	{r4, lr}
     5b6:	2000      	movs	r0, #0
     5b8:	4b01      	ldr	r3, [pc, #4]	; (5c0 <TCC0_Handler+0xc>)
     5ba:	4798      	blx	r3
     5bc:	bd10      	pop	{r4, pc}
     5be:	46c0      	nop			; (mov r8, r8)
     5c0:	0000055d 	.word	0x0000055d

000005c4 <TCC1_Handler>:
     5c4:	b510      	push	{r4, lr}
     5c6:	2001      	movs	r0, #1
     5c8:	4b01      	ldr	r3, [pc, #4]	; (5d0 <TCC1_Handler+0xc>)
     5ca:	4798      	blx	r3
     5cc:	bd10      	pop	{r4, pc}
     5ce:	46c0      	nop			; (mov r8, r8)
     5d0:	0000055d 	.word	0x0000055d

000005d4 <TCC2_Handler>:
     5d4:	b510      	push	{r4, lr}
     5d6:	2002      	movs	r0, #2
     5d8:	4b01      	ldr	r3, [pc, #4]	; (5e0 <TCC2_Handler+0xc>)
     5da:	4798      	blx	r3
     5dc:	bd10      	pop	{r4, pc}
     5de:	46c0      	nop			; (mov r8, r8)
     5e0:	0000055d 	.word	0x0000055d

000005e4 <usart_write_callback>:

}
void usart_write_callback(struct usart_module *const usart_module)
{
	
}
     5e4:	4770      	bx	lr
     5e6:	46c0      	nop			; (mov r8, r8)

000005e8 <usart_read_callback>:
	tc_enable(&(artist_front.tc_instance_ultrasonic));
}


void usart_read_callback(struct usart_module * const usart_instance)
{
     5e8:	b510      	push	{r4, lr}
     5ea:	0004      	movs	r4, r0
	switch(rx_buffer[0]) {
     5ec:	4b0b      	ldr	r3, [pc, #44]	; (61c <usart_read_callback+0x34>)
     5ee:	781b      	ldrb	r3, [r3, #0]
     5f0:	b2db      	uxtb	r3, r3
     5f2:	2b20      	cmp	r3, #32
     5f4:	d006      	beq.n	604 <usart_read_callback+0x1c>
     5f6:	2b77      	cmp	r3, #119	; 0x77
     5f8:	d109      	bne.n	60e <usart_read_callback+0x26>
		case 'c' : 
		break; 
		case 'w' :
		usart_write_buffer_job(usart_instance, "mw\0\0\0", MAX_RX_BUFFER_LENGTH);
     5fa:	2205      	movs	r2, #5
     5fc:	4908      	ldr	r1, [pc, #32]	; (620 <usart_read_callback+0x38>)
     5fe:	4b09      	ldr	r3, [pc, #36]	; (624 <usart_read_callback+0x3c>)
     600:	4798      	blx	r3
		break; 
     602:	e004      	b.n	60e <usart_read_callback+0x26>
		case ' ' : 
		usart_write_buffer_job(usart_instance, "m \0\0\0", MAX_RX_BUFFER_LENGTH);
     604:	2205      	movs	r2, #5
     606:	4906      	ldr	r1, [pc, #24]	; (620 <usart_read_callback+0x38>)
     608:	3108      	adds	r1, #8
     60a:	4b06      	ldr	r3, [pc, #24]	; (624 <usart_read_callback+0x3c>)
     60c:	4798      	blx	r3
		break;
	}
	usart_read_buffer_job( usart_instance,
     60e:	2205      	movs	r2, #5
     610:	4902      	ldr	r1, [pc, #8]	; (61c <usart_read_callback+0x34>)
     612:	0020      	movs	r0, r4
     614:	4b04      	ldr	r3, [pc, #16]	; (628 <usart_read_callback+0x40>)
     616:	4798      	blx	r3
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
	

}
     618:	bd10      	pop	{r4, pc}
     61a:	46c0      	nop			; (mov r8, r8)
     61c:	20000760 	.word	0x20000760
     620:	00008b38 	.word	0x00008b38
     624:	000019ed 	.word	0x000019ed
     628:	00001a0d 	.word	0x00001a0d

0000062c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     62c:	b570      	push	{r4, r5, r6, lr}
     62e:	b082      	sub	sp, #8
     630:	0005      	movs	r5, r0
     632:	000e      	movs	r6, r1
	uint16_t temp = 0;
     634:	2200      	movs	r2, #0
     636:	466b      	mov	r3, sp
     638:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     63a:	4c06      	ldr	r4, [pc, #24]	; (654 <usart_serial_getchar+0x28>)
     63c:	466b      	mov	r3, sp
     63e:	1d99      	adds	r1, r3, #6
     640:	0028      	movs	r0, r5
     642:	47a0      	blx	r4
     644:	2800      	cmp	r0, #0
     646:	d1f9      	bne.n	63c <usart_serial_getchar+0x10>

	*c = temp;
     648:	466b      	mov	r3, sp
     64a:	3306      	adds	r3, #6
     64c:	881b      	ldrh	r3, [r3, #0]
     64e:	7033      	strb	r3, [r6, #0]
}
     650:	b002      	add	sp, #8
     652:	bd70      	pop	{r4, r5, r6, pc}
     654:	000018d9 	.word	0x000018d9

00000658 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     658:	b570      	push	{r4, r5, r6, lr}
     65a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     65c:	b28c      	uxth	r4, r1
     65e:	4e03      	ldr	r6, [pc, #12]	; (66c <usart_serial_putchar+0x14>)
     660:	0021      	movs	r1, r4
     662:	0028      	movs	r0, r5
     664:	47b0      	blx	r6
     666:	2800      	cmp	r0, #0
     668:	d1fa      	bne.n	660 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
     66a:	bd70      	pop	{r4, r5, r6, pc}
     66c:	000018ad 	.word	0x000018ad

00000670 <artist_ultrasonic_tc_configure>:
*  Author: credt
*/

#include "TheArtist.h"

void artist_ultrasonic_tc_configure() {
     670:	b510      	push	{r4, lr}
     672:	b08e      	sub	sp, #56	; 0x38
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     674:	aa01      	add	r2, sp, #4
     676:	2300      	movs	r3, #0
     678:	2100      	movs	r1, #0
     67a:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     67c:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     67e:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     680:	2000      	movs	r0, #0
     682:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     684:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     686:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     688:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     68a:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     68c:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     68e:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     690:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     692:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     694:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     696:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     698:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     69a:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     69c:	8593      	strh	r3, [r2, #44]	; 0x2c
	struct tc_config config;
	
	tc_get_config_defaults(&config);
	
	config.counter_size = TC_COUNTER_SIZE_16BIT;
	config.clock_source = GCLK_GENERATOR_3;
     69e:	3303      	adds	r3, #3
     6a0:	7013      	strb	r3, [r2, #0]
	config.clock_prescaler = TC_CLOCK_PRESCALER_DIV8;
     6a2:	23c0      	movs	r3, #192	; 0xc0
     6a4:	009b      	lsls	r3, r3, #2
     6a6:	8093      	strh	r3, [r2, #4]
	config.enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = true;
     6a8:	2301      	movs	r3, #1
     6aa:	72d3      	strb	r3, [r2, #11]
	tc_init(&(artist_front.tc_instance_ultrasonic), TC4, &config);
     6ac:	4c07      	ldr	r4, [pc, #28]	; (6cc <artist_ultrasonic_tc_configure+0x5c>)
     6ae:	4908      	ldr	r1, [pc, #32]	; (6d0 <artist_ultrasonic_tc_configure+0x60>)
     6b0:	0020      	movs	r0, r4
     6b2:	4b08      	ldr	r3, [pc, #32]	; (6d4 <artist_ultrasonic_tc_configure+0x64>)
     6b4:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     6b6:	6822      	ldr	r2, [r4, #0]

	while (tc_is_syncing(module_inst)) {
     6b8:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     6ba:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     6bc:	438b      	bics	r3, r1
     6be:	d1fc      	bne.n	6ba <artist_ultrasonic_tc_configure+0x4a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     6c0:	8811      	ldrh	r1, [r2, #0]
     6c2:	3302      	adds	r3, #2
     6c4:	430b      	orrs	r3, r1
     6c6:	8013      	strh	r3, [r2, #0]
	tc_enable(&(artist_front.tc_instance_ultrasonic));
}
     6c8:	b00e      	add	sp, #56	; 0x38
     6ca:	bd10      	pop	{r4, pc}
     6cc:	20000684 	.word	0x20000684
     6d0:	42003000 	.word	0x42003000
     6d4:	00002585 	.word	0x00002585

000006d8 <configure_usart_callbacks>:
	
}


void configure_usart_callbacks(struct usart_module * usart_instance)
{
     6d8:	b570      	push	{r4, r5, r6, lr}
     6da:	0004      	movs	r4, r0
	//! [setup_register_callbacks]
	usart_register_callback(usart_instance,
     6dc:	2200      	movs	r2, #0
     6de:	4906      	ldr	r1, [pc, #24]	; (6f8 <configure_usart_callbacks+0x20>)
     6e0:	4d06      	ldr	r5, [pc, #24]	; (6fc <configure_usart_callbacks+0x24>)
     6e2:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	
	usart_register_callback(usart_instance,
     6e4:	2201      	movs	r2, #1
     6e6:	4906      	ldr	r1, [pc, #24]	; (700 <configure_usart_callbacks+0x28>)
     6e8:	0020      	movs	r0, r4
     6ea:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     6ec:	2231      	movs	r2, #49	; 0x31
     6ee:	5ca1      	ldrb	r1, [r4, r2]
     6f0:	2303      	movs	r3, #3
     6f2:	430b      	orrs	r3, r1
     6f4:	54a3      	strb	r3, [r4, r2]

	//! [setup_enable_callbacks]
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
	//! [setup_enable_callbacks]
}
     6f6:	bd70      	pop	{r4, r5, r6, pc}
     6f8:	000005e5 	.word	0x000005e5
     6fc:	000019d5 	.word	0x000019d5
     700:	000005e9 	.word	0x000005e9

00000704 <artist_usart_configure>:

void artist_usart_configure(struct usart_module * usart_instance) {
     704:	b570      	push	{r4, r5, r6, lr}
     706:	b090      	sub	sp, #64	; 0x40
     708:	0004      	movs	r4, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     70a:	2380      	movs	r3, #128	; 0x80
     70c:	05db      	lsls	r3, r3, #23
     70e:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     710:	2300      	movs	r3, #0
     712:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     714:	22ff      	movs	r2, #255	; 0xff
     716:	4669      	mov	r1, sp
     718:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     71a:	2200      	movs	r2, #0
     71c:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     71e:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
     720:	2196      	movs	r1, #150	; 0x96
     722:	0189      	lsls	r1, r1, #6
     724:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
     726:	2101      	movs	r1, #1
     728:	2024      	movs	r0, #36	; 0x24
     72a:	466d      	mov	r5, sp
     72c:	5429      	strb	r1, [r5, r0]
	config->transmitter_enable = true;
     72e:	3001      	adds	r0, #1
     730:	5429      	strb	r1, [r5, r0]
	config->clock_polarity_inverted = false;
     732:	3125      	adds	r1, #37	; 0x25
     734:	546b      	strb	r3, [r5, r1]
	config->use_external_clock = false;
     736:	3101      	adds	r1, #1
     738:	546b      	strb	r3, [r5, r1]
	config->ext_clock_freq   = 0;
     73a:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     73c:	3105      	adds	r1, #5
     73e:	546b      	strb	r3, [r5, r1]
	config->generator_source = GCLK_GENERATOR_0;
     740:	3101      	adds	r1, #1
     742:	546b      	strb	r3, [r5, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     744:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     746:	822b      	strh	r3, [r5, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     748:	76eb      	strb	r3, [r5, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     74a:	762a      	strb	r2, [r5, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     74c:	772a      	strb	r2, [r5, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     74e:	766a      	strb	r2, [r5, #25]
	config->receive_pulse_length                    = 19;
     750:	2313      	movs	r3, #19
     752:	76ab      	strb	r3, [r5, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     754:	776a      	strb	r2, [r5, #29]
	struct usart_config config;
	usart_get_config_defaults(&config);
	config.baudrate = CONF_ARTIST_BAUDRATE;
	config.mux_setting	= EDBG_CDC_SERCOM_MUX_SETTING;
     756:	2380      	movs	r3, #128	; 0x80
     758:	035b      	lsls	r3, r3, #13
     75a:	9303      	str	r3, [sp, #12]
	config.pinmux_pad0	= EDBG_CDC_SERCOM_PINMUX_PAD0;
     75c:	4b1e      	ldr	r3, [pc, #120]	; (7d8 <artist_usart_configure+0xd4>)
     75e:	930c      	str	r3, [sp, #48]	; 0x30
	config.pinmux_pad1	= EDBG_CDC_SERCOM_PINMUX_PAD1;
     760:	4b1e      	ldr	r3, [pc, #120]	; (7dc <artist_usart_configure+0xd8>)
     762:	930d      	str	r3, [sp, #52]	; 0x34
	config.pinmux_pad2	= EDBG_CDC_SERCOM_PINMUX_PAD2;
     764:	2301      	movs	r3, #1
     766:	425b      	negs	r3, r3
     768:	930e      	str	r3, [sp, #56]	; 0x38
	config.pinmux_pad3	= EDBG_CDC_SERCOM_PINMUX_PAD3;
     76a:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(usart_instance, EDBG_CDC_MODULE, &config) != STATUS_OK);
     76c:	4e1c      	ldr	r6, [pc, #112]	; (7e0 <artist_usart_configure+0xdc>)
     76e:	4d1d      	ldr	r5, [pc, #116]	; (7e4 <artist_usart_configure+0xe0>)
     770:	466a      	mov	r2, sp
     772:	0031      	movs	r1, r6
     774:	0020      	movs	r0, r4
     776:	47a8      	blx	r5
     778:	2800      	cmp	r0, #0
     77a:	d1f9      	bne.n	770 <artist_usart_configure+0x6c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     77c:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     77e:	0028      	movs	r0, r5
     780:	4b19      	ldr	r3, [pc, #100]	; (7e8 <artist_usart_configure+0xe4>)
     782:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     784:	231f      	movs	r3, #31
     786:	4018      	ands	r0, r3
     788:	3b1e      	subs	r3, #30
     78a:	4083      	lsls	r3, r0
     78c:	4a17      	ldr	r2, [pc, #92]	; (7ec <artist_usart_configure+0xe8>)
     78e:	6013      	str	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     790:	6822      	ldr	r2, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     792:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     794:	2b00      	cmp	r3, #0
     796:	d1fc      	bne.n	792 <artist_usart_configure+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     798:	682a      	ldr	r2, [r5, #0]
     79a:	3302      	adds	r3, #2
     79c:	4313      	orrs	r3, r2
     79e:	602b      	str	r3, [r5, #0]
	
	
	usart_enable(usart_instance);
	configure_usart_callbacks(usart_instance);
     7a0:	0020      	movs	r0, r4
     7a2:	4b13      	ldr	r3, [pc, #76]	; (7f0 <artist_usart_configure+0xec>)
     7a4:	4798      	blx	r3
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     7a6:	4b13      	ldr	r3, [pc, #76]	; (7f4 <artist_usart_configure+0xf0>)
     7a8:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     7aa:	4a13      	ldr	r2, [pc, #76]	; (7f8 <artist_usart_configure+0xf4>)
     7ac:	4b13      	ldr	r3, [pc, #76]	; (7fc <artist_usart_configure+0xf8>)
     7ae:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     7b0:	4a13      	ldr	r2, [pc, #76]	; (800 <artist_usart_configure+0xfc>)
     7b2:	4b14      	ldr	r3, [pc, #80]	; (804 <artist_usart_configure+0x100>)
     7b4:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
     7b6:	466a      	mov	r2, sp
     7b8:	4909      	ldr	r1, [pc, #36]	; (7e0 <artist_usart_configure+0xdc>)
     7ba:	0020      	movs	r0, r4
     7bc:	4b09      	ldr	r3, [pc, #36]	; (7e4 <artist_usart_configure+0xe0>)
     7be:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     7c0:	4d11      	ldr	r5, [pc, #68]	; (808 <artist_usart_configure+0x104>)
     7c2:	682b      	ldr	r3, [r5, #0]
     7c4:	6898      	ldr	r0, [r3, #8]
     7c6:	2100      	movs	r1, #0
     7c8:	4c10      	ldr	r4, [pc, #64]	; (80c <artist_usart_configure+0x108>)
     7ca:	47a0      	blx	r4
	setbuf(stdin, NULL);
     7cc:	682b      	ldr	r3, [r5, #0]
     7ce:	6858      	ldr	r0, [r3, #4]
     7d0:	2100      	movs	r1, #0
     7d2:	47a0      	blx	r4
	
	stdio_serial_init(usart_instance, EDBG_CDC_MODULE, &config);
}
     7d4:	b010      	add	sp, #64	; 0x40
     7d6:	bd70      	pop	{r4, r5, r6, pc}
     7d8:	00040003 	.word	0x00040003
     7dc:	00050003 	.word	0x00050003
     7e0:	42000800 	.word	0x42000800
     7e4:	00001575 	.word	0x00001575
     7e8:	0000114d 	.word	0x0000114d
     7ec:	e000e100 	.word	0xe000e100
     7f0:	000006d9 	.word	0x000006d9
     7f4:	200007f0 	.word	0x200007f0
     7f8:	00000659 	.word	0x00000659
     7fc:	200007ec 	.word	0x200007ec
     800:	0000062d 	.word	0x0000062d
     804:	200007e8 	.word	0x200007e8
     808:	2000006c 	.word	0x2000006c
     80c:	00004029 	.word	0x00004029

00000810 <artist_ultrasonic_update>:
	tcc_init(&(artist->tcc_instance), TCC0, &config);
	tcc_enable(&(artist->tcc_instance));
	*/
}

void artist_ultrasonic_update() {
     810:	b570      	push	{r4, r5, r6, lr}
	artist_front.center_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_center));
     812:	4e09      	ldr	r6, [pc, #36]	; (838 <artist_ultrasonic_update+0x28>)
     814:	0030      	movs	r0, r6
     816:	4d09      	ldr	r5, [pc, #36]	; (83c <artist_ultrasonic_update+0x2c>)
     818:	47a8      	blx	r5
     81a:	0034      	movs	r4, r6
     81c:	3cb4      	subs	r4, #180	; 0xb4
     81e:	61b0      	str	r0, [r6, #24]
	artist_front.right_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_right));
     820:	0020      	movs	r0, r4
     822:	30c4      	adds	r0, #196	; 0xc4
     824:	47a8      	blx	r5
     826:	23d4      	movs	r3, #212	; 0xd4
     828:	50e0      	str	r0, [r4, r3]
	artist_front.left_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_left));
     82a:	0020      	movs	r0, r4
     82c:	30bc      	adds	r0, #188	; 0xbc
     82e:	47a8      	blx	r5
     830:	23d0      	movs	r3, #208	; 0xd0
     832:	50e0      	str	r0, [r4, r3]
}
     834:	bd70      	pop	{r4, r5, r6, pc}
     836:	46c0      	nop			; (mov r8, r8)
     838:	20000738 	.word	0x20000738
     83c:	00000389 	.word	0x00000389

00000840 <callbacks>:
	//! [setup_enable]
	tc_enable(&(artist_front.tc_instance_timer));
	//! [setup_enable]
}

void callbacks (void) {
     840:	b510      	push	{r4, lr}
	// [ultra sonic]
	static uint16_t ultrasonic_counter		= 0;
	static uint16_t maze_counter			= 0; 
	static uint16_t pause_counter			= 0;
	ultrasonic_counter ++;
     842:	4a1d      	ldr	r2, [pc, #116]	; (8b8 <callbacks+0x78>)
     844:	8813      	ldrh	r3, [r2, #0]
     846:	3301      	adds	r3, #1
     848:	b29b      	uxth	r3, r3
     84a:	8013      	strh	r3, [r2, #0]
	maze_counter ++;
     84c:	491b      	ldr	r1, [pc, #108]	; (8bc <callbacks+0x7c>)
     84e:	880a      	ldrh	r2, [r1, #0]
     850:	3201      	adds	r2, #1
     852:	800a      	strh	r2, [r1, #0]
	pause_counter ++;
     854:	491a      	ldr	r1, [pc, #104]	; (8c0 <callbacks+0x80>)
     856:	880a      	ldrh	r2, [r1, #0]
     858:	3201      	adds	r2, #1
     85a:	800a      	strh	r2, [r1, #0]

	if (ultrasonic_counter > 5) {
     85c:	2b05      	cmp	r3, #5
     85e:	d904      	bls.n	86a <callbacks+0x2a>
		artist_ultrasonic_update();
     860:	4b18      	ldr	r3, [pc, #96]	; (8c4 <callbacks+0x84>)
     862:	4798      	blx	r3
		ultrasonic_counter = 0; 
     864:	2200      	movs	r2, #0
     866:	4b14      	ldr	r3, [pc, #80]	; (8b8 <callbacks+0x78>)
     868:	801a      	strh	r2, [r3, #0]

// 	if(maze_counter > 30){
// 		artist_do_maze();
// 		maze_counter = 0;
// 	}
	if(maze_counter > 15){
     86a:	4b14      	ldr	r3, [pc, #80]	; (8bc <callbacks+0x7c>)
     86c:	881b      	ldrh	r3, [r3, #0]
     86e:	2b0f      	cmp	r3, #15
     870:	d90d      	bls.n	88e <callbacks+0x4e>
		if(artist_front.maze_status != STOP){
     872:	23d8      	movs	r3, #216	; 0xd8
     874:	4a14      	ldr	r2, [pc, #80]	; (8c8 <callbacks+0x88>)
     876:	5cd3      	ldrb	r3, [r2, r3]
     878:	2b03      	cmp	r3, #3
     87a:	d017      	beq.n	8ac <callbacks+0x6c>
			printf("STOP\n");
     87c:	4813      	ldr	r0, [pc, #76]	; (8cc <callbacks+0x8c>)
     87e:	4b14      	ldr	r3, [pc, #80]	; (8d0 <callbacks+0x90>)
     880:	4798      	blx	r3
			artist_pause_maze();
     882:	4b14      	ldr	r3, [pc, #80]	; (8d4 <callbacks+0x94>)
     884:	4798      	blx	r3
			pause_counter = 0;
     886:	2200      	movs	r2, #0
     888:	4b0d      	ldr	r3, [pc, #52]	; (8c0 <callbacks+0x80>)
     88a:	801a      	strh	r2, [r3, #0]
     88c:	e012      	b.n	8b4 <callbacks+0x74>
		}
	}
	if (pause_counter > 10) {
     88e:	4b0c      	ldr	r3, [pc, #48]	; (8c0 <callbacks+0x80>)
     890:	881b      	ldrh	r3, [r3, #0]
     892:	2b0a      	cmp	r3, #10
     894:	d90e      	bls.n	8b4 <callbacks+0x74>
		if(artist_front.maze_status == STOP){
     896:	23d8      	movs	r3, #216	; 0xd8
     898:	4a0b      	ldr	r2, [pc, #44]	; (8c8 <callbacks+0x88>)
     89a:	5cd3      	ldrb	r3, [r2, r3]
     89c:	2b03      	cmp	r3, #3
     89e:	d109      	bne.n	8b4 <callbacks+0x74>
			artist_do_maze(); 
     8a0:	4b0d      	ldr	r3, [pc, #52]	; (8d8 <callbacks+0x98>)
     8a2:	4798      	blx	r3
			maze_counter = 0;
     8a4:	2200      	movs	r2, #0
     8a6:	4b05      	ldr	r3, [pc, #20]	; (8bc <callbacks+0x7c>)
     8a8:	801a      	strh	r2, [r3, #0]
		}
	}
	// ! [ultra sonic]
}
     8aa:	e003      	b.n	8b4 <callbacks+0x74>
			printf("STOP\n");
			artist_pause_maze();
			pause_counter = 0;
		}
	}
	if (pause_counter > 10) {
     8ac:	4b04      	ldr	r3, [pc, #16]	; (8c0 <callbacks+0x80>)
     8ae:	881b      	ldrh	r3, [r3, #0]
     8b0:	2b0a      	cmp	r3, #10
     8b2:	d8f5      	bhi.n	8a0 <callbacks+0x60>
			artist_do_maze(); 
			maze_counter = 0;
		}
	}
	// ! [ultra sonic]
}
     8b4:	bd10      	pop	{r4, pc}
     8b6:	46c0      	nop			; (mov r8, r8)
     8b8:	200000c4 	.word	0x200000c4
     8bc:	200000c8 	.word	0x200000c8
     8c0:	200000c6 	.word	0x200000c6
     8c4:	00000811 	.word	0x00000811
     8c8:	20000684 	.word	0x20000684
     8cc:	00008b48 	.word	0x00008b48
     8d0:	00004015 	.word	0x00004015
     8d4:	000002b9 	.word	0x000002b9
     8d8:	00000125 	.word	0x00000125

000008dc <artist_scheduler_tc_configure>:
	artist_front.center_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_center));
	artist_front.right_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_right));
	artist_front.left_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_left));
}

void artist_scheduler_tc_configure() {
     8dc:	b510      	push	{r4, lr}
     8de:	b08e      	sub	sp, #56	; 0x38

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     8e0:	aa01      	add	r2, sp, #4
     8e2:	2300      	movs	r3, #0
     8e4:	2100      	movs	r1, #0
     8e6:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     8e8:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     8ea:	2000      	movs	r0, #0
     8ec:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     8ee:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     8f0:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     8f2:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     8f4:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     8f6:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     8f8:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     8fa:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     8fc:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     8fe:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     900:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     902:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     904:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     906:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     908:	8593      	strh	r3, [r2, #44]	; 0x2c
	//! [setup_config_defaults]
	tc_get_config_defaults(&config_tc);
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
     90a:	3304      	adds	r3, #4
     90c:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source = GCLK_GENERATOR_3;
     90e:	3b01      	subs	r3, #1
     910:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024; //
     912:	23e0      	movs	r3, #224	; 0xe0
     914:	00db      	lsls	r3, r3, #3
     916:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period = 50;
     918:	2132      	movs	r1, #50	; 0x32
     91a:	2329      	movs	r3, #41	; 0x29
     91c:	54d1      	strb	r1, [r2, r3]
	//config_tc.counter_8_bit.compare_capture_channel[0] = 5;
	//config_tc.counter_8_bit.compare_capture_channel[1] = 54;
	//! [setup_change_config]

	//! [20 Hz setup_set_config]
	tc_init(&(artist_front.tc_instance_timer), TC5, &config_tc);
     91e:	4c08      	ldr	r4, [pc, #32]	; (940 <artist_scheduler_tc_configure+0x64>)
     920:	4908      	ldr	r1, [pc, #32]	; (944 <artist_scheduler_tc_configure+0x68>)
     922:	0020      	movs	r0, r4
     924:	4b08      	ldr	r3, [pc, #32]	; (948 <artist_scheduler_tc_configure+0x6c>)
     926:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     928:	6822      	ldr	r2, [r4, #0]

	while (tc_is_syncing(module_inst)) {
     92a:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     92c:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     92e:	438b      	bics	r3, r1
     930:	d1fc      	bne.n	92c <artist_scheduler_tc_configure+0x50>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     932:	8811      	ldrh	r1, [r2, #0]
     934:	3302      	adds	r3, #2
     936:	430b      	orrs	r3, r1
     938:	8013      	strh	r3, [r2, #0]
	//! [setup_set_config]

	//! [setup_enable]
	tc_enable(&(artist_front.tc_instance_timer));
	//! [setup_enable]
}
     93a:	b00e      	add	sp, #56	; 0x38
     93c:	bd10      	pop	{r4, pc}
     93e:	46c0      	nop			; (mov r8, r8)
     940:	200006a0 	.word	0x200006a0
     944:	42003400 	.word	0x42003400
     948:	00002585 	.word	0x00002585

0000094c <artist_configure_tc_callbacks>:
		}
	}
	// ! [ultra sonic]
}
void artist_configure_tc_callbacks(void)
{
     94c:	b510      	push	{r4, lr}
	tc_register_callback(&(artist_front.tc_instance_timer), callbacks ,
     94e:	4c0d      	ldr	r4, [pc, #52]	; (984 <artist_configure_tc_callbacks+0x38>)
     950:	2200      	movs	r2, #0
     952:	490d      	ldr	r1, [pc, #52]	; (988 <artist_configure_tc_callbacks+0x3c>)
     954:	0020      	movs	r0, r4
     956:	4b0d      	ldr	r3, [pc, #52]	; (98c <artist_configure_tc_callbacks+0x40>)
     958:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     95a:	6820      	ldr	r0, [r4, #0]
     95c:	3c1c      	subs	r4, #28
     95e:	4b0c      	ldr	r3, [pc, #48]	; (990 <artist_configure_tc_callbacks+0x44>)
     960:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     962:	4b0c      	ldr	r3, [pc, #48]	; (994 <artist_configure_tc_callbacks+0x48>)
     964:	5c1b      	ldrb	r3, [r3, r0]
     966:	221f      	movs	r2, #31
     968:	4013      	ands	r3, r2
     96a:	3a1e      	subs	r2, #30
     96c:	0011      	movs	r1, r2
     96e:	4099      	lsls	r1, r3
     970:	4b09      	ldr	r3, [pc, #36]	; (998 <artist_configure_tc_callbacks+0x4c>)
     972:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     974:	2135      	movs	r1, #53	; 0x35
     976:	5c60      	ldrb	r0, [r4, r1]
     978:	2301      	movs	r3, #1
     97a:	4303      	orrs	r3, r0
     97c:	5463      	strb	r3, [r4, r1]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     97e:	69e3      	ldr	r3, [r4, #28]
     980:	735a      	strb	r2, [r3, #13]
	TC_CALLBACK_OVERFLOW);
	
	tc_enable_callback(&(artist_front.tc_instance_timer), TC_CALLBACK_OVERFLOW);
     982:	bd10      	pop	{r4, pc}
     984:	200006a0 	.word	0x200006a0
     988:	00000841 	.word	0x00000841
     98c:	00002491 	.word	0x00002491
     990:	0000254d 	.word	0x0000254d
     994:	00008b50 	.word	0x00008b50
     998:	e000e100 	.word	0xe000e100

0000099c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     99c:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     99e:	2000      	movs	r0, #0
     9a0:	4b08      	ldr	r3, [pc, #32]	; (9c4 <delay_init+0x28>)
     9a2:	4798      	blx	r3
     9a4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     9a6:	4c08      	ldr	r4, [pc, #32]	; (9c8 <delay_init+0x2c>)
     9a8:	21fa      	movs	r1, #250	; 0xfa
     9aa:	0089      	lsls	r1, r1, #2
     9ac:	47a0      	blx	r4
     9ae:	4b07      	ldr	r3, [pc, #28]	; (9cc <delay_init+0x30>)
     9b0:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     9b2:	4907      	ldr	r1, [pc, #28]	; (9d0 <delay_init+0x34>)
     9b4:	0028      	movs	r0, r5
     9b6:	47a0      	blx	r4
     9b8:	4b06      	ldr	r3, [pc, #24]	; (9d4 <delay_init+0x38>)
     9ba:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     9bc:	2205      	movs	r2, #5
     9be:	4b06      	ldr	r3, [pc, #24]	; (9d8 <delay_init+0x3c>)
     9c0:	601a      	str	r2, [r3, #0]
}
     9c2:	bd70      	pop	{r4, r5, r6, pc}
     9c4:	00002221 	.word	0x00002221
     9c8:	00005f51 	.word	0x00005f51
     9cc:	20000004 	.word	0x20000004
     9d0:	000f4240 	.word	0x000f4240
     9d4:	20000000 	.word	0x20000000
     9d8:	e000e010 	.word	0xe000e010

000009dc <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     9dc:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     9de:	4b08      	ldr	r3, [pc, #32]	; (a00 <delay_cycles_us+0x24>)
     9e0:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     9e2:	4a08      	ldr	r2, [pc, #32]	; (a04 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     9e4:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     9e6:	2180      	movs	r1, #128	; 0x80
     9e8:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
     9ea:	e006      	b.n	9fa <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     9ec:	2c00      	cmp	r4, #0
     9ee:	d004      	beq.n	9fa <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
     9f0:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     9f2:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     9f4:	6813      	ldr	r3, [r2, #0]
     9f6:	420b      	tst	r3, r1
     9f8:	d0fc      	beq.n	9f4 <delay_cycles_us+0x18>
     9fa:	3801      	subs	r0, #1
     9fc:	d2f6      	bcs.n	9ec <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
     9fe:	bd30      	pop	{r4, r5, pc}
     a00:	20000000 	.word	0x20000000
     a04:	e000e010 	.word	0xe000e010

00000a08 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     a08:	4b0c      	ldr	r3, [pc, #48]	; (a3c <cpu_irq_enter_critical+0x34>)
     a0a:	681b      	ldr	r3, [r3, #0]
     a0c:	2b00      	cmp	r3, #0
     a0e:	d110      	bne.n	a32 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     a10:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     a14:	2b00      	cmp	r3, #0
     a16:	d109      	bne.n	a2c <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     a18:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     a1a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     a1e:	2200      	movs	r2, #0
     a20:	4b07      	ldr	r3, [pc, #28]	; (a40 <cpu_irq_enter_critical+0x38>)
     a22:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     a24:	3201      	adds	r2, #1
     a26:	4b07      	ldr	r3, [pc, #28]	; (a44 <cpu_irq_enter_critical+0x3c>)
     a28:	701a      	strb	r2, [r3, #0]
     a2a:	e002      	b.n	a32 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     a2c:	2200      	movs	r2, #0
     a2e:	4b05      	ldr	r3, [pc, #20]	; (a44 <cpu_irq_enter_critical+0x3c>)
     a30:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     a32:	4a02      	ldr	r2, [pc, #8]	; (a3c <cpu_irq_enter_critical+0x34>)
     a34:	6813      	ldr	r3, [r2, #0]
     a36:	3301      	adds	r3, #1
     a38:	6013      	str	r3, [r2, #0]
}
     a3a:	4770      	bx	lr
     a3c:	200000cc 	.word	0x200000cc
     a40:	20000008 	.word	0x20000008
     a44:	200000d0 	.word	0x200000d0

00000a48 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     a48:	4b08      	ldr	r3, [pc, #32]	; (a6c <cpu_irq_leave_critical+0x24>)
     a4a:	681a      	ldr	r2, [r3, #0]
     a4c:	3a01      	subs	r2, #1
     a4e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     a50:	681b      	ldr	r3, [r3, #0]
     a52:	2b00      	cmp	r3, #0
     a54:	d109      	bne.n	a6a <cpu_irq_leave_critical+0x22>
     a56:	4b06      	ldr	r3, [pc, #24]	; (a70 <cpu_irq_leave_critical+0x28>)
     a58:	781b      	ldrb	r3, [r3, #0]
     a5a:	2b00      	cmp	r3, #0
     a5c:	d005      	beq.n	a6a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     a5e:	2201      	movs	r2, #1
     a60:	4b04      	ldr	r3, [pc, #16]	; (a74 <cpu_irq_leave_critical+0x2c>)
     a62:	701a      	strb	r2, [r3, #0]
     a64:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     a68:	b662      	cpsie	i
	}
}
     a6a:	4770      	bx	lr
     a6c:	200000cc 	.word	0x200000cc
     a70:	200000d0 	.word	0x200000d0
     a74:	20000008 	.word	0x20000008

00000a78 <system_board_init>:




void system_board_init(void)
{
     a78:	b5f0      	push	{r4, r5, r6, r7, lr}
     a7a:	4647      	mov	r7, r8
     a7c:	b480      	push	{r7}
     a7e:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     a80:	ac01      	add	r4, sp, #4
     a82:	2601      	movs	r6, #1
     a84:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     a86:	2700      	movs	r7, #0
     a88:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     a8a:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     a8c:	0021      	movs	r1, r4
     a8e:	2013      	movs	r0, #19
     a90:	4d27      	ldr	r5, [pc, #156]	; (b30 <system_board_init+0xb8>)
     a92:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     a94:	4b27      	ldr	r3, [pc, #156]	; (b34 <system_board_init+0xbc>)
     a96:	4698      	mov	r8, r3
     a98:	2380      	movs	r3, #128	; 0x80
     a9a:	031b      	lsls	r3, r3, #12
     a9c:	4642      	mov	r2, r8
     a9e:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     aa0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     aa2:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     aa4:	0021      	movs	r1, r4
     aa6:	201c      	movs	r0, #28
     aa8:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     aaa:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     aac:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     aae:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     ab0:	0021      	movs	r1, r4
     ab2:	2052      	movs	r0, #82	; 0x52
     ab4:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     ab6:	0021      	movs	r1, r4
     ab8:	203e      	movs	r0, #62	; 0x3e
     aba:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     abc:	0021      	movs	r1, r4
     abe:	203f      	movs	r0, #63	; 0x3f
     ac0:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     ac2:	0021      	movs	r1, r4
     ac4:	202f      	movs	r0, #47	; 0x2f
     ac6:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     ac8:	0021      	movs	r1, r4
     aca:	2014      	movs	r0, #20
     acc:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     ace:	2280      	movs	r2, #128	; 0x80
     ad0:	02d2      	lsls	r2, r2, #11
     ad2:	4b19      	ldr	r3, [pc, #100]	; (b38 <system_board_init+0xc0>)
     ad4:	619a      	str	r2, [r3, #24]
     ad6:	3b80      	subs	r3, #128	; 0x80
     ad8:	2280      	movs	r2, #128	; 0x80
     ada:	05d2      	lsls	r2, r2, #23
     adc:	619a      	str	r2, [r3, #24]
     ade:	2280      	movs	r2, #128	; 0x80
     ae0:	0612      	lsls	r2, r2, #24
     ae2:	619a      	str	r2, [r3, #24]
     ae4:	2280      	movs	r2, #128	; 0x80
     ae6:	0212      	lsls	r2, r2, #8
     ae8:	619a      	str	r2, [r3, #24]
     aea:	2380      	movs	r3, #128	; 0x80
     aec:	035b      	lsls	r3, r3, #13
     aee:	4642      	mov	r2, r8
     af0:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     af2:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     af4:	0021      	movs	r1, r4
     af6:	2053      	movs	r0, #83	; 0x53
     af8:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     afa:	4a10      	ldr	r2, [pc, #64]	; (b3c <system_board_init+0xc4>)
     afc:	6a13      	ldr	r3, [r2, #32]
     afe:	2180      	movs	r1, #128	; 0x80
     b00:	0389      	lsls	r1, r1, #14
     b02:	430b      	orrs	r3, r1
     b04:	6213      	str	r3, [r2, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     b06:	2204      	movs	r2, #4
     b08:	4b0d      	ldr	r3, [pc, #52]	; (b40 <system_board_init+0xc8>)
     b0a:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     b0c:	466b      	mov	r3, sp
     b0e:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     b10:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     b12:	2305      	movs	r3, #5
     b14:	466a      	mov	r2, sp
     b16:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     b18:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     b1a:	4669      	mov	r1, sp
     b1c:	2009      	movs	r0, #9
     b1e:	4c09      	ldr	r4, [pc, #36]	; (b44 <system_board_init+0xcc>)
     b20:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     b22:	4669      	mov	r1, sp
     b24:	200c      	movs	r0, #12
     b26:	47a0      	blx	r4
#endif

}
     b28:	b002      	add	sp, #8
     b2a:	bc04      	pop	{r2}
     b2c:	4690      	mov	r8, r2
     b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b30:	00000ce9 	.word	0x00000ce9
     b34:	41004400 	.word	0x41004400
     b38:	41004500 	.word	0x41004500
     b3c:	40000400 	.word	0x40000400
     b40:	42005400 	.word	0x42005400
     b44:	00002431 	.word	0x00002431

00000b48 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     b48:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     b4a:	2a00      	cmp	r2, #0
     b4c:	d10d      	bne.n	b6a <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     b4e:	008b      	lsls	r3, r1, #2
     b50:	4a07      	ldr	r2, [pc, #28]	; (b70 <extint_register_callback+0x28>)
     b52:	589b      	ldr	r3, [r3, r2]
     b54:	2b00      	cmp	r3, #0
     b56:	d103      	bne.n	b60 <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
     b58:	0089      	lsls	r1, r1, #2
     b5a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     b5c:	2300      	movs	r3, #0
     b5e:	e004      	b.n	b6a <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
     b60:	4283      	cmp	r3, r0
     b62:	d001      	beq.n	b68 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     b64:	231d      	movs	r3, #29
     b66:	e000      	b.n	b6a <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
     b68:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     b6a:	0018      	movs	r0, r3
     b6c:	4770      	bx	lr
     b6e:	46c0      	nop			; (mov r8, r8)
     b70:	20000784 	.word	0x20000784

00000b74 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     b74:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     b76:	2200      	movs	r2, #0
     b78:	4b15      	ldr	r3, [pc, #84]	; (bd0 <EIC_Handler+0x5c>)
     b7a:	701a      	strb	r2, [r3, #0]
     b7c:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     b7e:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     b80:	4e14      	ldr	r6, [pc, #80]	; (bd4 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     b82:	4c13      	ldr	r4, [pc, #76]	; (bd0 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     b84:	2b1f      	cmp	r3, #31
     b86:	d919      	bls.n	bbc <EIC_Handler+0x48>
     b88:	e00f      	b.n	baa <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     b8a:	2100      	movs	r1, #0
     b8c:	e000      	b.n	b90 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     b8e:	4912      	ldr	r1, [pc, #72]	; (bd8 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     b90:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     b92:	009b      	lsls	r3, r3, #2
     b94:	599b      	ldr	r3, [r3, r6]
     b96:	2b00      	cmp	r3, #0
     b98:	d000      	beq.n	b9c <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     b9a:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     b9c:	7823      	ldrb	r3, [r4, #0]
     b9e:	3301      	adds	r3, #1
     ba0:	b2db      	uxtb	r3, r3
     ba2:	7023      	strb	r3, [r4, #0]
     ba4:	2b0f      	cmp	r3, #15
     ba6:	d9ed      	bls.n	b84 <EIC_Handler+0x10>
     ba8:	e011      	b.n	bce <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     baa:	0029      	movs	r1, r5
     bac:	4019      	ands	r1, r3
     bae:	2201      	movs	r2, #1
     bb0:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     bb2:	2100      	movs	r1, #0
     bb4:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     bb6:	4211      	tst	r1, r2
     bb8:	d1e7      	bne.n	b8a <EIC_Handler+0x16>
     bba:	e7ef      	b.n	b9c <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     bbc:	0029      	movs	r1, r5
     bbe:	4019      	ands	r1, r3
     bc0:	2201      	movs	r2, #1
     bc2:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     bc4:	4904      	ldr	r1, [pc, #16]	; (bd8 <EIC_Handler+0x64>)
     bc6:	6909      	ldr	r1, [r1, #16]
     bc8:	4211      	tst	r1, r2
     bca:	d1e0      	bne.n	b8e <EIC_Handler+0x1a>
     bcc:	e7e6      	b.n	b9c <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     bce:	bd70      	pop	{r4, r5, r6, pc}
     bd0:	20000780 	.word	0x20000780
     bd4:	20000784 	.word	0x20000784
     bd8:	40001800 	.word	0x40001800

00000bdc <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     bdc:	4a04      	ldr	r2, [pc, #16]	; (bf0 <_extint_enable+0x14>)
     bde:	7811      	ldrb	r1, [r2, #0]
     be0:	2302      	movs	r3, #2
     be2:	430b      	orrs	r3, r1
     be4:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     be6:	7853      	ldrb	r3, [r2, #1]
     be8:	b25b      	sxtb	r3, r3
     bea:	2b00      	cmp	r3, #0
     bec:	dbfb      	blt.n	be6 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     bee:	4770      	bx	lr
     bf0:	40001800 	.word	0x40001800

00000bf4 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     bf4:	b500      	push	{lr}
     bf6:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     bf8:	4a12      	ldr	r2, [pc, #72]	; (c44 <_system_extint_init+0x50>)
     bfa:	6991      	ldr	r1, [r2, #24]
     bfc:	2340      	movs	r3, #64	; 0x40
     bfe:	430b      	orrs	r3, r1
     c00:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     c02:	a901      	add	r1, sp, #4
     c04:	2300      	movs	r3, #0
     c06:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     c08:	2005      	movs	r0, #5
     c0a:	4b0f      	ldr	r3, [pc, #60]	; (c48 <_system_extint_init+0x54>)
     c0c:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     c0e:	2005      	movs	r0, #5
     c10:	4b0e      	ldr	r3, [pc, #56]	; (c4c <_system_extint_init+0x58>)
     c12:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     c14:	4a0e      	ldr	r2, [pc, #56]	; (c50 <_system_extint_init+0x5c>)
     c16:	7811      	ldrb	r1, [r2, #0]
     c18:	2301      	movs	r3, #1
     c1a:	430b      	orrs	r3, r1
     c1c:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     c1e:	7853      	ldrb	r3, [r2, #1]
     c20:	b25b      	sxtb	r3, r3
     c22:	2b00      	cmp	r3, #0
     c24:	dbfb      	blt.n	c1e <_system_extint_init+0x2a>
     c26:	4b0b      	ldr	r3, [pc, #44]	; (c54 <_system_extint_init+0x60>)
     c28:	0019      	movs	r1, r3
     c2a:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     c2c:	2200      	movs	r2, #0
     c2e:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     c30:	4299      	cmp	r1, r3
     c32:	d1fc      	bne.n	c2e <_system_extint_init+0x3a>
     c34:	2210      	movs	r2, #16
     c36:	4b08      	ldr	r3, [pc, #32]	; (c58 <_system_extint_init+0x64>)
     c38:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     c3a:	4b08      	ldr	r3, [pc, #32]	; (c5c <_system_extint_init+0x68>)
     c3c:	4798      	blx	r3
}
     c3e:	b003      	add	sp, #12
     c40:	bd00      	pop	{pc}
     c42:	46c0      	nop			; (mov r8, r8)
     c44:	40000400 	.word	0x40000400
     c48:	00002339 	.word	0x00002339
     c4c:	000022ad 	.word	0x000022ad
     c50:	40001800 	.word	0x40001800
     c54:	20000784 	.word	0x20000784
     c58:	e000e100 	.word	0xe000e100
     c5c:	00000bdd 	.word	0x00000bdd

00000c60 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     c60:	2300      	movs	r3, #0
     c62:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     c64:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     c66:	2201      	movs	r2, #1
     c68:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     c6a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     c6c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     c6e:	3302      	adds	r3, #2
     c70:	72c3      	strb	r3, [r0, #11]
}
     c72:	4770      	bx	lr

00000c74 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     c74:	b5f0      	push	{r4, r5, r6, r7, lr}
     c76:	b083      	sub	sp, #12
     c78:	0005      	movs	r5, r0
     c7a:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c7c:	a901      	add	r1, sp, #4
     c7e:	2300      	movs	r3, #0
     c80:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     c82:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     c84:	7923      	ldrb	r3, [r4, #4]
     c86:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     c88:	7a23      	ldrb	r3, [r4, #8]
     c8a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     c8c:	7820      	ldrb	r0, [r4, #0]
     c8e:	4b14      	ldr	r3, [pc, #80]	; (ce0 <extint_chan_set_config+0x6c>)
     c90:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     c92:	2000      	movs	r0, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     c94:	2d1f      	cmp	r5, #31
     c96:	d800      	bhi.n	c9a <extint_chan_set_config+0x26>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     c98:	4812      	ldr	r0, [pc, #72]	; (ce4 <extint_chan_set_config+0x70>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     c9a:	2107      	movs	r1, #7
     c9c:	4029      	ands	r1, r5
     c9e:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     ca0:	7ae2      	ldrb	r2, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     ca2:	7aa3      	ldrb	r3, [r4, #10]
     ca4:	2b00      	cmp	r3, #0
     ca6:	d001      	beq.n	cac <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
     ca8:	2308      	movs	r3, #8
     caa:	431a      	orrs	r2, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     cac:	08eb      	lsrs	r3, r5, #3
     cae:	009b      	lsls	r3, r3, #2
     cb0:	18c3      	adds	r3, r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
     cb2:	699e      	ldr	r6, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     cb4:	270f      	movs	r7, #15
     cb6:	408f      	lsls	r7, r1
     cb8:	43be      	bics	r6, r7
     cba:	408a      	lsls	r2, r1
     cbc:	4332      	orrs	r2, r6
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     cbe:	619a      	str	r2, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     cc0:	7a63      	ldrb	r3, [r4, #9]
     cc2:	2b00      	cmp	r3, #0
     cc4:	d005      	beq.n	cd2 <extint_chan_set_config+0x5e>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     cc6:	6942      	ldr	r2, [r0, #20]
     cc8:	2301      	movs	r3, #1
     cca:	40ab      	lsls	r3, r5
     ccc:	4313      	orrs	r3, r2
     cce:	6143      	str	r3, [r0, #20]
     cd0:	e004      	b.n	cdc <extint_chan_set_config+0x68>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     cd2:	6943      	ldr	r3, [r0, #20]
     cd4:	2201      	movs	r2, #1
     cd6:	40aa      	lsls	r2, r5
     cd8:	4393      	bics	r3, r2
     cda:	6143      	str	r3, [r0, #20]
	}
}
     cdc:	b003      	add	sp, #12
     cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ce0:	00002431 	.word	0x00002431
     ce4:	40001800 	.word	0x40001800

00000ce8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     ce8:	b500      	push	{lr}
     cea:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     cec:	ab01      	add	r3, sp, #4
     cee:	2280      	movs	r2, #128	; 0x80
     cf0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     cf2:	780a      	ldrb	r2, [r1, #0]
     cf4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     cf6:	784a      	ldrb	r2, [r1, #1]
     cf8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     cfa:	788a      	ldrb	r2, [r1, #2]
     cfc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     cfe:	0019      	movs	r1, r3
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <port_pin_set_config+0x20>)
     d02:	4798      	blx	r3
}
     d04:	b003      	add	sp, #12
     d06:	bd00      	pop	{pc}
     d08:	00002431 	.word	0x00002431

00000d0c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     d0c:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     d0e:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d10:	2340      	movs	r3, #64	; 0x40
     d12:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     d14:	4281      	cmp	r1, r0
     d16:	d201      	bcs.n	d1c <_sercom_get_sync_baud_val+0x10>
     d18:	e00a      	b.n	d30 <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
     d1a:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     d1c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     d1e:	1c63      	adds	r3, r4, #1
     d20:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     d22:	4288      	cmp	r0, r1
     d24:	d9f9      	bls.n	d1a <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d26:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     d28:	2cff      	cmp	r4, #255	; 0xff
     d2a:	d801      	bhi.n	d30 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     d2c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     d2e:	2300      	movs	r3, #0
	}
}
     d30:	0018      	movs	r0, r3
     d32:	bd10      	pop	{r4, pc}

00000d34 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     d34:	b5f0      	push	{r4, r5, r6, r7, lr}
     d36:	465f      	mov	r7, fp
     d38:	4656      	mov	r6, sl
     d3a:	464d      	mov	r5, r9
     d3c:	4644      	mov	r4, r8
     d3e:	b4f0      	push	{r4, r5, r6, r7}
     d40:	b089      	sub	sp, #36	; 0x24
     d42:	000c      	movs	r4, r1
     d44:	9205      	str	r2, [sp, #20]
     d46:	aa12      	add	r2, sp, #72	; 0x48
     d48:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     d4a:	0002      	movs	r2, r0
     d4c:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d4e:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     d50:	42a2      	cmp	r2, r4
     d52:	d900      	bls.n	d56 <_sercom_get_async_baud_val+0x22>
     d54:	e0c6      	b.n	ee4 <_sercom_get_async_baud_val+0x1b0>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     d56:	2b00      	cmp	r3, #0
     d58:	d151      	bne.n	dfe <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     d5a:	0002      	movs	r2, r0
     d5c:	0008      	movs	r0, r1
     d5e:	2100      	movs	r1, #0
     d60:	4d64      	ldr	r5, [pc, #400]	; (ef4 <_sercom_get_async_baud_val+0x1c0>)
     d62:	47a8      	blx	r5
     d64:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     d66:	0026      	movs	r6, r4
     d68:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     d6a:	2300      	movs	r3, #0
     d6c:	2400      	movs	r4, #0
     d6e:	9300      	str	r3, [sp, #0]
     d70:	9401      	str	r4, [sp, #4]
     d72:	2200      	movs	r2, #0
     d74:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     d76:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     d78:	2120      	movs	r1, #32
     d7a:	468c      	mov	ip, r1
     d7c:	391f      	subs	r1, #31
     d7e:	9602      	str	r6, [sp, #8]
     d80:	9703      	str	r7, [sp, #12]
     d82:	2420      	movs	r4, #32
     d84:	4264      	negs	r4, r4
     d86:	1904      	adds	r4, r0, r4
     d88:	d403      	bmi.n	d92 <_sercom_get_async_baud_val+0x5e>
     d8a:	000d      	movs	r5, r1
     d8c:	40a5      	lsls	r5, r4
     d8e:	46a8      	mov	r8, r5
     d90:	e004      	b.n	d9c <_sercom_get_async_baud_val+0x68>
     d92:	4664      	mov	r4, ip
     d94:	1a24      	subs	r4, r4, r0
     d96:	000d      	movs	r5, r1
     d98:	40e5      	lsrs	r5, r4
     d9a:	46a8      	mov	r8, r5
     d9c:	000c      	movs	r4, r1
     d9e:	4084      	lsls	r4, r0
     da0:	46a1      	mov	r9, r4

		r = r << 1;
     da2:	0014      	movs	r4, r2
     da4:	001d      	movs	r5, r3
     da6:	18a4      	adds	r4, r4, r2
     da8:	415d      	adcs	r5, r3
     daa:	0022      	movs	r2, r4
     dac:	002b      	movs	r3, r5

		if (n & bit_shift) {
     dae:	4646      	mov	r6, r8
     db0:	465f      	mov	r7, fp
     db2:	423e      	tst	r6, r7
     db4:	d003      	beq.n	dbe <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
     db6:	000e      	movs	r6, r1
     db8:	4326      	orrs	r6, r4
     dba:	0032      	movs	r2, r6
     dbc:	002b      	movs	r3, r5
		}

		if (r >= d) {
     dbe:	9c02      	ldr	r4, [sp, #8]
     dc0:	9d03      	ldr	r5, [sp, #12]
     dc2:	429d      	cmp	r5, r3
     dc4:	d80f      	bhi.n	de6 <_sercom_get_async_baud_val+0xb2>
     dc6:	d101      	bne.n	dcc <_sercom_get_async_baud_val+0x98>
     dc8:	4294      	cmp	r4, r2
     dca:	d80c      	bhi.n	de6 <_sercom_get_async_baud_val+0xb2>
			r = r - d;
     dcc:	9c02      	ldr	r4, [sp, #8]
     dce:	9d03      	ldr	r5, [sp, #12]
     dd0:	1b12      	subs	r2, r2, r4
     dd2:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     dd4:	464d      	mov	r5, r9
     dd6:	9e00      	ldr	r6, [sp, #0]
     dd8:	9f01      	ldr	r7, [sp, #4]
     dda:	4335      	orrs	r5, r6
     ddc:	003c      	movs	r4, r7
     dde:	4646      	mov	r6, r8
     de0:	4334      	orrs	r4, r6
     de2:	9500      	str	r5, [sp, #0]
     de4:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     de6:	3801      	subs	r0, #1
     de8:	d2cb      	bcs.n	d82 <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
     dea:	2200      	movs	r2, #0
     dec:	2301      	movs	r3, #1
     dee:	9800      	ldr	r0, [sp, #0]
     df0:	9901      	ldr	r1, [sp, #4]
     df2:	1a12      	subs	r2, r2, r0
     df4:	418b      	sbcs	r3, r1
     df6:	0c12      	lsrs	r2, r2, #16
     df8:	041b      	lsls	r3, r3, #16
     dfa:	431a      	orrs	r2, r3
     dfc:	e06f      	b.n	ede <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     dfe:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     e00:	2b01      	cmp	r3, #1
     e02:	d16c      	bne.n	ede <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     e04:	0f63      	lsrs	r3, r4, #29
     e06:	9304      	str	r3, [sp, #16]
     e08:	00e3      	lsls	r3, r4, #3
     e0a:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     e0c:	000a      	movs	r2, r1
     e0e:	2300      	movs	r3, #0
     e10:	2100      	movs	r1, #0
     e12:	4c38      	ldr	r4, [pc, #224]	; (ef4 <_sercom_get_async_baud_val+0x1c0>)
     e14:	47a0      	blx	r4
     e16:	0004      	movs	r4, r0
     e18:	000d      	movs	r5, r1
     e1a:	2300      	movs	r3, #0
     e1c:	469c      	mov	ip, r3
     e1e:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     e20:	3320      	adds	r3, #32
     e22:	469b      	mov	fp, r3
     e24:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     e26:	4663      	mov	r3, ip
     e28:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     e2a:	2300      	movs	r3, #0
     e2c:	9302      	str	r3, [sp, #8]
     e2e:	2200      	movs	r2, #0
     e30:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     e32:	213f      	movs	r1, #63	; 0x3f
     e34:	9400      	str	r4, [sp, #0]
     e36:	9501      	str	r5, [sp, #4]
     e38:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
     e3a:	2120      	movs	r1, #32
     e3c:	4249      	negs	r1, r1
     e3e:	1879      	adds	r1, r7, r1
     e40:	d403      	bmi.n	e4a <_sercom_get_async_baud_val+0x116>
     e42:	0030      	movs	r0, r6
     e44:	4088      	lsls	r0, r1
     e46:	4684      	mov	ip, r0
     e48:	e004      	b.n	e54 <_sercom_get_async_baud_val+0x120>
     e4a:	4659      	mov	r1, fp
     e4c:	1bc9      	subs	r1, r1, r7
     e4e:	0030      	movs	r0, r6
     e50:	40c8      	lsrs	r0, r1
     e52:	4684      	mov	ip, r0
     e54:	0031      	movs	r1, r6
     e56:	40b9      	lsls	r1, r7
     e58:	4689      	mov	r9, r1

		r = r << 1;
     e5a:	0010      	movs	r0, r2
     e5c:	0019      	movs	r1, r3
     e5e:	1880      	adds	r0, r0, r2
     e60:	4159      	adcs	r1, r3
     e62:	0002      	movs	r2, r0
     e64:	000b      	movs	r3, r1

		if (n & bit_shift) {
     e66:	4644      	mov	r4, r8
     e68:	464d      	mov	r5, r9
     e6a:	402c      	ands	r4, r5
     e6c:	46a2      	mov	sl, r4
     e6e:	4664      	mov	r4, ip
     e70:	9d04      	ldr	r5, [sp, #16]
     e72:	402c      	ands	r4, r5
     e74:	46a4      	mov	ip, r4
     e76:	4654      	mov	r4, sl
     e78:	4665      	mov	r5, ip
     e7a:	432c      	orrs	r4, r5
     e7c:	d003      	beq.n	e86 <_sercom_get_async_baud_val+0x152>
			r |= 0x01;
     e7e:	0034      	movs	r4, r6
     e80:	4304      	orrs	r4, r0
     e82:	0022      	movs	r2, r4
     e84:	000b      	movs	r3, r1
		}

		if (r >= d) {
     e86:	9800      	ldr	r0, [sp, #0]
     e88:	9901      	ldr	r1, [sp, #4]
     e8a:	4299      	cmp	r1, r3
     e8c:	d80a      	bhi.n	ea4 <_sercom_get_async_baud_val+0x170>
     e8e:	d101      	bne.n	e94 <_sercom_get_async_baud_val+0x160>
     e90:	4290      	cmp	r0, r2
     e92:	d807      	bhi.n	ea4 <_sercom_get_async_baud_val+0x170>
			r = r - d;
     e94:	9800      	ldr	r0, [sp, #0]
     e96:	9901      	ldr	r1, [sp, #4]
     e98:	1a12      	subs	r2, r2, r0
     e9a:	418b      	sbcs	r3, r1
			q |= bit_shift;
     e9c:	9902      	ldr	r1, [sp, #8]
     e9e:	4648      	mov	r0, r9
     ea0:	4301      	orrs	r1, r0
     ea2:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     ea4:	3f01      	subs	r7, #1
     ea6:	d2c8      	bcs.n	e3a <_sercom_get_async_baud_val+0x106>
     ea8:	9c00      	ldr	r4, [sp, #0]
     eaa:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     eac:	9902      	ldr	r1, [sp, #8]
     eae:	9a07      	ldr	r2, [sp, #28]
     eb0:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     eb2:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     eb4:	4910      	ldr	r1, [pc, #64]	; (ef8 <_sercom_get_async_baud_val+0x1c4>)
     eb6:	428b      	cmp	r3, r1
     eb8:	d90b      	bls.n	ed2 <_sercom_get_async_baud_val+0x19e>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     eba:	9b06      	ldr	r3, [sp, #24]
     ebc:	3301      	adds	r3, #1
     ebe:	b2db      	uxtb	r3, r3
     ec0:	0019      	movs	r1, r3
     ec2:	9306      	str	r3, [sp, #24]
     ec4:	0013      	movs	r3, r2
     ec6:	3301      	adds	r3, #1
     ec8:	9307      	str	r3, [sp, #28]
     eca:	2908      	cmp	r1, #8
     ecc:	d1ad      	bne.n	e2a <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ece:	2540      	movs	r5, #64	; 0x40
     ed0:	e008      	b.n	ee4 <_sercom_get_async_baud_val+0x1b0>
     ed2:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     ed4:	9a06      	ldr	r2, [sp, #24]
     ed6:	2a08      	cmp	r2, #8
     ed8:	d004      	beq.n	ee4 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     eda:	0352      	lsls	r2, r2, #13
     edc:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     ede:	9b05      	ldr	r3, [sp, #20]
     ee0:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     ee2:	2500      	movs	r5, #0
}
     ee4:	0028      	movs	r0, r5
     ee6:	b009      	add	sp, #36	; 0x24
     ee8:	bc3c      	pop	{r2, r3, r4, r5}
     eea:	4690      	mov	r8, r2
     eec:	4699      	mov	r9, r3
     eee:	46a2      	mov	sl, r4
     ef0:	46ab      	mov	fp, r5
     ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ef4:	0000632d 	.word	0x0000632d
     ef8:	00001fff 	.word	0x00001fff

00000efc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     efc:	b510      	push	{r4, lr}
     efe:	b082      	sub	sp, #8
     f00:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     f02:	4b0e      	ldr	r3, [pc, #56]	; (f3c <sercom_set_gclk_generator+0x40>)
     f04:	781b      	ldrb	r3, [r3, #0]
     f06:	2b00      	cmp	r3, #0
     f08:	d001      	beq.n	f0e <sercom_set_gclk_generator+0x12>
     f0a:	2900      	cmp	r1, #0
     f0c:	d00d      	beq.n	f2a <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     f0e:	a901      	add	r1, sp, #4
     f10:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     f12:	2013      	movs	r0, #19
     f14:	4b0a      	ldr	r3, [pc, #40]	; (f40 <sercom_set_gclk_generator+0x44>)
     f16:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     f18:	2013      	movs	r0, #19
     f1a:	4b0a      	ldr	r3, [pc, #40]	; (f44 <sercom_set_gclk_generator+0x48>)
     f1c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     f1e:	4b07      	ldr	r3, [pc, #28]	; (f3c <sercom_set_gclk_generator+0x40>)
     f20:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     f22:	2201      	movs	r2, #1
     f24:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     f26:	2000      	movs	r0, #0
     f28:	e006      	b.n	f38 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     f2a:	4b04      	ldr	r3, [pc, #16]	; (f3c <sercom_set_gclk_generator+0x40>)
     f2c:	785b      	ldrb	r3, [r3, #1]
     f2e:	4283      	cmp	r3, r0
     f30:	d001      	beq.n	f36 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     f32:	201d      	movs	r0, #29
     f34:	e000      	b.n	f38 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     f36:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     f38:	b002      	add	sp, #8
     f3a:	bd10      	pop	{r4, pc}
     f3c:	200000d4 	.word	0x200000d4
     f40:	00002339 	.word	0x00002339
     f44:	000022ad 	.word	0x000022ad

00000f48 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     f48:	4b44      	ldr	r3, [pc, #272]	; (105c <_sercom_get_default_pad+0x114>)
     f4a:	4298      	cmp	r0, r3
     f4c:	d033      	beq.n	fb6 <_sercom_get_default_pad+0x6e>
     f4e:	d806      	bhi.n	f5e <_sercom_get_default_pad+0x16>
     f50:	4b43      	ldr	r3, [pc, #268]	; (1060 <_sercom_get_default_pad+0x118>)
     f52:	4298      	cmp	r0, r3
     f54:	d00d      	beq.n	f72 <_sercom_get_default_pad+0x2a>
     f56:	4b43      	ldr	r3, [pc, #268]	; (1064 <_sercom_get_default_pad+0x11c>)
     f58:	4298      	cmp	r0, r3
     f5a:	d01b      	beq.n	f94 <_sercom_get_default_pad+0x4c>
     f5c:	e06f      	b.n	103e <_sercom_get_default_pad+0xf6>
     f5e:	4b42      	ldr	r3, [pc, #264]	; (1068 <_sercom_get_default_pad+0x120>)
     f60:	4298      	cmp	r0, r3
     f62:	d04a      	beq.n	ffa <_sercom_get_default_pad+0xb2>
     f64:	4b41      	ldr	r3, [pc, #260]	; (106c <_sercom_get_default_pad+0x124>)
     f66:	4298      	cmp	r0, r3
     f68:	d058      	beq.n	101c <_sercom_get_default_pad+0xd4>
     f6a:	4b41      	ldr	r3, [pc, #260]	; (1070 <_sercom_get_default_pad+0x128>)
     f6c:	4298      	cmp	r0, r3
     f6e:	d166      	bne.n	103e <_sercom_get_default_pad+0xf6>
     f70:	e032      	b.n	fd8 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f72:	2901      	cmp	r1, #1
     f74:	d006      	beq.n	f84 <_sercom_get_default_pad+0x3c>
     f76:	2900      	cmp	r1, #0
     f78:	d063      	beq.n	1042 <_sercom_get_default_pad+0xfa>
     f7a:	2902      	cmp	r1, #2
     f7c:	d006      	beq.n	f8c <_sercom_get_default_pad+0x44>
     f7e:	2903      	cmp	r1, #3
     f80:	d006      	beq.n	f90 <_sercom_get_default_pad+0x48>
     f82:	e001      	b.n	f88 <_sercom_get_default_pad+0x40>
     f84:	483b      	ldr	r0, [pc, #236]	; (1074 <_sercom_get_default_pad+0x12c>)
     f86:	e067      	b.n	1058 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     f88:	2000      	movs	r0, #0
     f8a:	e065      	b.n	1058 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f8c:	483a      	ldr	r0, [pc, #232]	; (1078 <_sercom_get_default_pad+0x130>)
     f8e:	e063      	b.n	1058 <_sercom_get_default_pad+0x110>
     f90:	483a      	ldr	r0, [pc, #232]	; (107c <_sercom_get_default_pad+0x134>)
     f92:	e061      	b.n	1058 <_sercom_get_default_pad+0x110>
     f94:	2901      	cmp	r1, #1
     f96:	d006      	beq.n	fa6 <_sercom_get_default_pad+0x5e>
     f98:	2900      	cmp	r1, #0
     f9a:	d054      	beq.n	1046 <_sercom_get_default_pad+0xfe>
     f9c:	2902      	cmp	r1, #2
     f9e:	d006      	beq.n	fae <_sercom_get_default_pad+0x66>
     fa0:	2903      	cmp	r1, #3
     fa2:	d006      	beq.n	fb2 <_sercom_get_default_pad+0x6a>
     fa4:	e001      	b.n	faa <_sercom_get_default_pad+0x62>
     fa6:	4836      	ldr	r0, [pc, #216]	; (1080 <_sercom_get_default_pad+0x138>)
     fa8:	e056      	b.n	1058 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     faa:	2000      	movs	r0, #0
     fac:	e054      	b.n	1058 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     fae:	4835      	ldr	r0, [pc, #212]	; (1084 <_sercom_get_default_pad+0x13c>)
     fb0:	e052      	b.n	1058 <_sercom_get_default_pad+0x110>
     fb2:	4835      	ldr	r0, [pc, #212]	; (1088 <_sercom_get_default_pad+0x140>)
     fb4:	e050      	b.n	1058 <_sercom_get_default_pad+0x110>
     fb6:	2901      	cmp	r1, #1
     fb8:	d006      	beq.n	fc8 <_sercom_get_default_pad+0x80>
     fba:	2900      	cmp	r1, #0
     fbc:	d045      	beq.n	104a <_sercom_get_default_pad+0x102>
     fbe:	2902      	cmp	r1, #2
     fc0:	d006      	beq.n	fd0 <_sercom_get_default_pad+0x88>
     fc2:	2903      	cmp	r1, #3
     fc4:	d006      	beq.n	fd4 <_sercom_get_default_pad+0x8c>
     fc6:	e001      	b.n	fcc <_sercom_get_default_pad+0x84>
     fc8:	4830      	ldr	r0, [pc, #192]	; (108c <_sercom_get_default_pad+0x144>)
     fca:	e045      	b.n	1058 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     fcc:	2000      	movs	r0, #0
     fce:	e043      	b.n	1058 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     fd0:	482f      	ldr	r0, [pc, #188]	; (1090 <_sercom_get_default_pad+0x148>)
     fd2:	e041      	b.n	1058 <_sercom_get_default_pad+0x110>
     fd4:	482f      	ldr	r0, [pc, #188]	; (1094 <_sercom_get_default_pad+0x14c>)
     fd6:	e03f      	b.n	1058 <_sercom_get_default_pad+0x110>
     fd8:	2901      	cmp	r1, #1
     fda:	d006      	beq.n	fea <_sercom_get_default_pad+0xa2>
     fdc:	2900      	cmp	r1, #0
     fde:	d036      	beq.n	104e <_sercom_get_default_pad+0x106>
     fe0:	2902      	cmp	r1, #2
     fe2:	d006      	beq.n	ff2 <_sercom_get_default_pad+0xaa>
     fe4:	2903      	cmp	r1, #3
     fe6:	d006      	beq.n	ff6 <_sercom_get_default_pad+0xae>
     fe8:	e001      	b.n	fee <_sercom_get_default_pad+0xa6>
     fea:	482b      	ldr	r0, [pc, #172]	; (1098 <_sercom_get_default_pad+0x150>)
     fec:	e034      	b.n	1058 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     fee:	2000      	movs	r0, #0
     ff0:	e032      	b.n	1058 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ff2:	482a      	ldr	r0, [pc, #168]	; (109c <_sercom_get_default_pad+0x154>)
     ff4:	e030      	b.n	1058 <_sercom_get_default_pad+0x110>
     ff6:	482a      	ldr	r0, [pc, #168]	; (10a0 <_sercom_get_default_pad+0x158>)
     ff8:	e02e      	b.n	1058 <_sercom_get_default_pad+0x110>
     ffa:	2901      	cmp	r1, #1
     ffc:	d006      	beq.n	100c <_sercom_get_default_pad+0xc4>
     ffe:	2900      	cmp	r1, #0
    1000:	d027      	beq.n	1052 <_sercom_get_default_pad+0x10a>
    1002:	2902      	cmp	r1, #2
    1004:	d006      	beq.n	1014 <_sercom_get_default_pad+0xcc>
    1006:	2903      	cmp	r1, #3
    1008:	d006      	beq.n	1018 <_sercom_get_default_pad+0xd0>
    100a:	e001      	b.n	1010 <_sercom_get_default_pad+0xc8>
    100c:	4825      	ldr	r0, [pc, #148]	; (10a4 <_sercom_get_default_pad+0x15c>)
    100e:	e023      	b.n	1058 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1010:	2000      	movs	r0, #0
    1012:	e021      	b.n	1058 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1014:	4824      	ldr	r0, [pc, #144]	; (10a8 <_sercom_get_default_pad+0x160>)
    1016:	e01f      	b.n	1058 <_sercom_get_default_pad+0x110>
    1018:	4824      	ldr	r0, [pc, #144]	; (10ac <_sercom_get_default_pad+0x164>)
    101a:	e01d      	b.n	1058 <_sercom_get_default_pad+0x110>
    101c:	2901      	cmp	r1, #1
    101e:	d006      	beq.n	102e <_sercom_get_default_pad+0xe6>
    1020:	2900      	cmp	r1, #0
    1022:	d018      	beq.n	1056 <_sercom_get_default_pad+0x10e>
    1024:	2902      	cmp	r1, #2
    1026:	d006      	beq.n	1036 <_sercom_get_default_pad+0xee>
    1028:	2903      	cmp	r1, #3
    102a:	d006      	beq.n	103a <_sercom_get_default_pad+0xf2>
    102c:	e001      	b.n	1032 <_sercom_get_default_pad+0xea>
    102e:	4820      	ldr	r0, [pc, #128]	; (10b0 <_sercom_get_default_pad+0x168>)
    1030:	e012      	b.n	1058 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1032:	2000      	movs	r0, #0
    1034:	e010      	b.n	1058 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1036:	481f      	ldr	r0, [pc, #124]	; (10b4 <_sercom_get_default_pad+0x16c>)
    1038:	e00e      	b.n	1058 <_sercom_get_default_pad+0x110>
    103a:	481f      	ldr	r0, [pc, #124]	; (10b8 <_sercom_get_default_pad+0x170>)
    103c:	e00c      	b.n	1058 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    103e:	2000      	movs	r0, #0
    1040:	e00a      	b.n	1058 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1042:	481e      	ldr	r0, [pc, #120]	; (10bc <_sercom_get_default_pad+0x174>)
    1044:	e008      	b.n	1058 <_sercom_get_default_pad+0x110>
    1046:	2003      	movs	r0, #3
    1048:	e006      	b.n	1058 <_sercom_get_default_pad+0x110>
    104a:	481d      	ldr	r0, [pc, #116]	; (10c0 <_sercom_get_default_pad+0x178>)
    104c:	e004      	b.n	1058 <_sercom_get_default_pad+0x110>
    104e:	481d      	ldr	r0, [pc, #116]	; (10c4 <_sercom_get_default_pad+0x17c>)
    1050:	e002      	b.n	1058 <_sercom_get_default_pad+0x110>
    1052:	481d      	ldr	r0, [pc, #116]	; (10c8 <_sercom_get_default_pad+0x180>)
    1054:	e000      	b.n	1058 <_sercom_get_default_pad+0x110>
    1056:	481d      	ldr	r0, [pc, #116]	; (10cc <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
    1058:	4770      	bx	lr
    105a:	46c0      	nop			; (mov r8, r8)
    105c:	42001000 	.word	0x42001000
    1060:	42000800 	.word	0x42000800
    1064:	42000c00 	.word	0x42000c00
    1068:	42001800 	.word	0x42001800
    106c:	42001c00 	.word	0x42001c00
    1070:	42001400 	.word	0x42001400
    1074:	00050003 	.word	0x00050003
    1078:	00060003 	.word	0x00060003
    107c:	00070003 	.word	0x00070003
    1080:	00010003 	.word	0x00010003
    1084:	001e0003 	.word	0x001e0003
    1088:	001f0003 	.word	0x001f0003
    108c:	000d0002 	.word	0x000d0002
    1090:	000e0002 	.word	0x000e0002
    1094:	000f0002 	.word	0x000f0002
    1098:	00110003 	.word	0x00110003
    109c:	00120003 	.word	0x00120003
    10a0:	00130003 	.word	0x00130003
    10a4:	003f0005 	.word	0x003f0005
    10a8:	003e0005 	.word	0x003e0005
    10ac:	00520005 	.word	0x00520005
    10b0:	00170003 	.word	0x00170003
    10b4:	00180003 	.word	0x00180003
    10b8:	00190003 	.word	0x00190003
    10bc:	00040003 	.word	0x00040003
    10c0:	000c0002 	.word	0x000c0002
    10c4:	00100003 	.word	0x00100003
    10c8:	00530005 	.word	0x00530005
    10cc:	00160003 	.word	0x00160003

000010d0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    10d0:	b530      	push	{r4, r5, lr}
    10d2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    10d4:	4b0c      	ldr	r3, [pc, #48]	; (1108 <_sercom_get_sercom_inst_index+0x38>)
    10d6:	466a      	mov	r2, sp
    10d8:	cb32      	ldmia	r3!, {r1, r4, r5}
    10da:	c232      	stmia	r2!, {r1, r4, r5}
    10dc:	cb32      	ldmia	r3!, {r1, r4, r5}
    10de:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    10e0:	9b00      	ldr	r3, [sp, #0]
    10e2:	4283      	cmp	r3, r0
    10e4:	d006      	beq.n	10f4 <_sercom_get_sercom_inst_index+0x24>
    10e6:	2301      	movs	r3, #1
    10e8:	009a      	lsls	r2, r3, #2
    10ea:	4669      	mov	r1, sp
    10ec:	5852      	ldr	r2, [r2, r1]
    10ee:	4282      	cmp	r2, r0
    10f0:	d103      	bne.n	10fa <_sercom_get_sercom_inst_index+0x2a>
    10f2:	e000      	b.n	10f6 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10f4:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    10f6:	b2d8      	uxtb	r0, r3
    10f8:	e003      	b.n	1102 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10fa:	3301      	adds	r3, #1
    10fc:	2b06      	cmp	r3, #6
    10fe:	d1f3      	bne.n	10e8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1100:	2000      	movs	r0, #0
}
    1102:	b007      	add	sp, #28
    1104:	bd30      	pop	{r4, r5, pc}
    1106:	46c0      	nop			; (mov r8, r8)
    1108:	00008b54 	.word	0x00008b54

0000110c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    110c:	4770      	bx	lr
    110e:	46c0      	nop			; (mov r8, r8)

00001110 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1110:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1112:	4b0a      	ldr	r3, [pc, #40]	; (113c <_sercom_set_handler+0x2c>)
    1114:	781b      	ldrb	r3, [r3, #0]
    1116:	2b00      	cmp	r3, #0
    1118:	d10c      	bne.n	1134 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    111a:	4f09      	ldr	r7, [pc, #36]	; (1140 <_sercom_set_handler+0x30>)
    111c:	4e09      	ldr	r6, [pc, #36]	; (1144 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    111e:	4d0a      	ldr	r5, [pc, #40]	; (1148 <_sercom_set_handler+0x38>)
    1120:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1122:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1124:	195a      	adds	r2, r3, r5
    1126:	6014      	str	r4, [r2, #0]
    1128:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    112a:	2b18      	cmp	r3, #24
    112c:	d1f9      	bne.n	1122 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    112e:	2201      	movs	r2, #1
    1130:	4b02      	ldr	r3, [pc, #8]	; (113c <_sercom_set_handler+0x2c>)
    1132:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1134:	0080      	lsls	r0, r0, #2
    1136:	4b02      	ldr	r3, [pc, #8]	; (1140 <_sercom_set_handler+0x30>)
    1138:	50c1      	str	r1, [r0, r3]
}
    113a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    113c:	200000d6 	.word	0x200000d6
    1140:	200000d8 	.word	0x200000d8
    1144:	0000110d 	.word	0x0000110d
    1148:	200007c4 	.word	0x200007c4

0000114c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    114c:	b510      	push	{r4, lr}
    114e:	b082      	sub	sp, #8
    1150:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1152:	2206      	movs	r2, #6
    1154:	4905      	ldr	r1, [pc, #20]	; (116c <_sercom_get_interrupt_vector+0x20>)
    1156:	4668      	mov	r0, sp
    1158:	4b05      	ldr	r3, [pc, #20]	; (1170 <_sercom_get_interrupt_vector+0x24>)
    115a:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    115c:	0020      	movs	r0, r4
    115e:	4b05      	ldr	r3, [pc, #20]	; (1174 <_sercom_get_interrupt_vector+0x28>)
    1160:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1162:	466b      	mov	r3, sp
    1164:	5618      	ldrsb	r0, [r3, r0]
}
    1166:	b002      	add	sp, #8
    1168:	bd10      	pop	{r4, pc}
    116a:	46c0      	nop			; (mov r8, r8)
    116c:	00008b6c 	.word	0x00008b6c
    1170:	0000360d 	.word	0x0000360d
    1174:	000010d1 	.word	0x000010d1

00001178 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1178:	b510      	push	{r4, lr}
    117a:	4b02      	ldr	r3, [pc, #8]	; (1184 <SERCOM0_Handler+0xc>)
    117c:	681b      	ldr	r3, [r3, #0]
    117e:	2000      	movs	r0, #0
    1180:	4798      	blx	r3
    1182:	bd10      	pop	{r4, pc}
    1184:	200000d8 	.word	0x200000d8

00001188 <SERCOM1_Handler>:
    1188:	b510      	push	{r4, lr}
    118a:	4b02      	ldr	r3, [pc, #8]	; (1194 <SERCOM1_Handler+0xc>)
    118c:	685b      	ldr	r3, [r3, #4]
    118e:	2001      	movs	r0, #1
    1190:	4798      	blx	r3
    1192:	bd10      	pop	{r4, pc}
    1194:	200000d8 	.word	0x200000d8

00001198 <SERCOM2_Handler>:
    1198:	b510      	push	{r4, lr}
    119a:	4b02      	ldr	r3, [pc, #8]	; (11a4 <SERCOM2_Handler+0xc>)
    119c:	689b      	ldr	r3, [r3, #8]
    119e:	2002      	movs	r0, #2
    11a0:	4798      	blx	r3
    11a2:	bd10      	pop	{r4, pc}
    11a4:	200000d8 	.word	0x200000d8

000011a8 <SERCOM3_Handler>:
    11a8:	b510      	push	{r4, lr}
    11aa:	4b02      	ldr	r3, [pc, #8]	; (11b4 <SERCOM3_Handler+0xc>)
    11ac:	68db      	ldr	r3, [r3, #12]
    11ae:	2003      	movs	r0, #3
    11b0:	4798      	blx	r3
    11b2:	bd10      	pop	{r4, pc}
    11b4:	200000d8 	.word	0x200000d8

000011b8 <SERCOM4_Handler>:
    11b8:	b510      	push	{r4, lr}
    11ba:	4b02      	ldr	r3, [pc, #8]	; (11c4 <SERCOM4_Handler+0xc>)
    11bc:	691b      	ldr	r3, [r3, #16]
    11be:	2004      	movs	r0, #4
    11c0:	4798      	blx	r3
    11c2:	bd10      	pop	{r4, pc}
    11c4:	200000d8 	.word	0x200000d8

000011c8 <SERCOM5_Handler>:
    11c8:	b510      	push	{r4, lr}
    11ca:	4b02      	ldr	r3, [pc, #8]	; (11d4 <SERCOM5_Handler+0xc>)
    11cc:	695b      	ldr	r3, [r3, #20]
    11ce:	2005      	movs	r0, #5
    11d0:	4798      	blx	r3
    11d2:	bd10      	pop	{r4, pc}
    11d4:	200000d8 	.word	0x200000d8

000011d8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    11d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    11da:	4657      	mov	r7, sl
    11dc:	464e      	mov	r6, r9
    11de:	4645      	mov	r5, r8
    11e0:	b4e0      	push	{r5, r6, r7}
    11e2:	b08a      	sub	sp, #40	; 0x28
    11e4:	0005      	movs	r5, r0
    11e6:	000e      	movs	r6, r1
    11e8:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    11ea:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    11ec:	680b      	ldr	r3, [r1, #0]
    11ee:	079b      	lsls	r3, r3, #30
    11f0:	d400      	bmi.n	11f4 <spi_init+0x1c>
    11f2:	e08c      	b.n	130e <spi_init+0x136>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    11f4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    11f6:	9305      	str	r3, [sp, #20]
    11f8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    11fa:	9306      	str	r3, [sp, #24]
    11fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
    11fe:	9307      	str	r3, [sp, #28]
    1200:	6b53      	ldr	r3, [r2, #52]	; 0x34
    1202:	9308      	str	r3, [sp, #32]
    1204:	2700      	movs	r7, #0
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    1206:	231f      	movs	r3, #31
    1208:	4699      	mov	r9, r3
    120a:	b2f9      	uxtb	r1, r7
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    120c:	00bb      	lsls	r3, r7, #2
    120e:	aa05      	add	r2, sp, #20
    1210:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    1212:	2800      	cmp	r0, #0
    1214:	d102      	bne.n	121c <spi_init+0x44>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1216:	0030      	movs	r0, r6
    1218:	4b8f      	ldr	r3, [pc, #572]	; (1458 <spi_init+0x280>)
    121a:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
    121c:	1c43      	adds	r3, r0, #1
    121e:	d029      	beq.n	1274 <spi_init+0x9c>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    1220:	0402      	lsls	r2, r0, #16
    1222:	0c13      	lsrs	r3, r2, #16
    1224:	4698      	mov	r8, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    1226:	0c00      	lsrs	r0, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1228:	b2c1      	uxtb	r1, r0
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    122a:	2300      	movs	r3, #0
    122c:	469c      	mov	ip, r3
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    122e:	0603      	lsls	r3, r0, #24
    1230:	d404      	bmi.n	123c <spi_init+0x64>
		return &(ports[port_index]->Group[group_index]);
    1232:	094b      	lsrs	r3, r1, #5
    1234:	01db      	lsls	r3, r3, #7
    1236:	4a89      	ldr	r2, [pc, #548]	; (145c <spi_init+0x284>)
    1238:	4694      	mov	ip, r2
    123a:	449c      	add	ip, r3
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    123c:	464b      	mov	r3, r9
    123e:	400b      	ands	r3, r1

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1240:	4660      	mov	r0, ip
    1242:	18c0      	adds	r0, r0, r3
    1244:	3040      	adds	r0, #64	; 0x40
    1246:	7800      	ldrb	r0, [r0, #0]
    1248:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    124a:	2080      	movs	r0, #128	; 0x80
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    124c:	4652      	mov	r2, sl
    124e:	07d2      	lsls	r2, r2, #31
    1250:	d50a      	bpl.n	1268 <spi_init+0x90>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    1252:	085b      	lsrs	r3, r3, #1
    1254:	4463      	add	r3, ip
    1256:	3330      	adds	r3, #48	; 0x30
    1258:	7818      	ldrb	r0, [r3, #0]
    125a:	b2c0      	uxtb	r0, r0

	if (pin_index & 1) {
    125c:	07cb      	lsls	r3, r1, #31
    125e:	d501      	bpl.n	1264 <spi_init+0x8c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    1260:	0900      	lsrs	r0, r0, #4
    1262:	e001      	b.n	1268 <spi_init+0x90>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    1264:	230f      	movs	r3, #15
    1266:	4018      	ands	r0, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    1268:	4580      	cmp	r8, r0
    126a:	d003      	beq.n	1274 <spi_init+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
    126c:	2300      	movs	r3, #0
    126e:	602b      	str	r3, [r5, #0]
			return STATUS_ERR_DENIED;
    1270:	201c      	movs	r0, #28
    1272:	e0ea      	b.n	144a <spi_init+0x272>
    1274:	3701      	adds	r7, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1276:	2f04      	cmp	r7, #4
    1278:	d1c7      	bne.n	120a <spi_init+0x32>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    127a:	2013      	movs	r0, #19
    127c:	4b78      	ldr	r3, [pc, #480]	; (1460 <spi_init+0x288>)
    127e:	4798      	blx	r3
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    1280:	7822      	ldrb	r2, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    1282:	2100      	movs	r1, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    1284:	2a01      	cmp	r2, #1
    1286:	d112      	bne.n	12ae <spi_init+0xd6>
		enum status_code error_code = _sercom_get_sync_baud_val(
    1288:	aa04      	add	r2, sp, #16
    128a:	0001      	movs	r1, r0
    128c:	69a0      	ldr	r0, [r4, #24]
    128e:	4b75      	ldr	r3, [pc, #468]	; (1464 <spi_init+0x28c>)
    1290:	4798      	blx	r3
    1292:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    1294:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    1296:	2b00      	cmp	r3, #0
    1298:	d000      	beq.n	129c <spi_init+0xc4>
    129a:	e0d6      	b.n	144a <spi_init+0x272>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    129c:	7b33      	ldrb	r3, [r6, #12]
    129e:	b2db      	uxtb	r3, r3
    12a0:	aa04      	add	r2, sp, #16
    12a2:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    12a4:	3005      	adds	r0, #5
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    12a6:	429a      	cmp	r2, r3
    12a8:	d000      	beq.n	12ac <spi_init+0xd4>
    12aa:	e0ce      	b.n	144a <spi_init+0x272>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    12ac:	210c      	movs	r1, #12

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    12ae:	6863      	ldr	r3, [r4, #4]
    12b0:	68a2      	ldr	r2, [r4, #8]
    12b2:	4313      	orrs	r3, r2
    12b4:	68e2      	ldr	r2, [r4, #12]
    12b6:	4313      	orrs	r3, r2
    12b8:	430b      	orrs	r3, r1

	/* Set SPI character size */
	ctrlb |= config->character_size;
    12ba:	7c21      	ldrb	r1, [r4, #16]

	if (config->run_in_standby) {
    12bc:	7c62      	ldrb	r2, [r4, #17]
    12be:	2a00      	cmp	r2, #0
    12c0:	d001      	beq.n	12c6 <spi_init+0xee>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    12c2:	2280      	movs	r2, #128	; 0x80
    12c4:	4313      	orrs	r3, r2
	}

	if (config->receiver_enable) {
    12c6:	7ca2      	ldrb	r2, [r4, #18]
    12c8:	2a00      	cmp	r2, #0
    12ca:	d002      	beq.n	12d2 <spi_init+0xfa>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    12cc:	2280      	movs	r2, #128	; 0x80
    12ce:	0292      	lsls	r2, r2, #10
    12d0:	4311      	orrs	r1, r2
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    12d2:	7ce2      	ldrb	r2, [r4, #19]
    12d4:	2a00      	cmp	r2, #0
    12d6:	d002      	beq.n	12de <spi_init+0x106>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    12d8:	2280      	movs	r2, #128	; 0x80
    12da:	0092      	lsls	r2, r2, #2
    12dc:	4311      	orrs	r1, r2
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    12de:	7d22      	ldrb	r2, [r4, #20]
    12e0:	2a00      	cmp	r2, #0
    12e2:	d002      	beq.n	12ea <spi_init+0x112>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    12e4:	2280      	movs	r2, #128	; 0x80
    12e6:	0192      	lsls	r2, r2, #6
    12e8:	4311      	orrs	r1, r2
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    12ea:	6830      	ldr	r0, [r6, #0]
    12ec:	2202      	movs	r2, #2
    12ee:	4313      	orrs	r3, r2
    12f0:	4283      	cmp	r3, r0
    12f2:	d108      	bne.n	1306 <spi_init+0x12e>
			spi_module->CTRLB.reg == ctrlb) {
    12f4:	6873      	ldr	r3, [r6, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    12f6:	428b      	cmp	r3, r1
    12f8:	d105      	bne.n	1306 <spi_init+0x12e>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    12fa:	7823      	ldrb	r3, [r4, #0]
    12fc:	716b      	strb	r3, [r5, #5]
		module->character_size = config->character_size;
    12fe:	7c23      	ldrb	r3, [r4, #16]
    1300:	71ab      	strb	r3, [r5, #6]
		return STATUS_OK;
    1302:	2000      	movs	r0, #0
    1304:	e0a1      	b.n	144a <spi_init+0x272>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    1306:	2300      	movs	r3, #0
    1308:	602b      	str	r3, [r5, #0]

	return STATUS_ERR_DENIED;
    130a:	201c      	movs	r0, #28
    130c:	e09d      	b.n	144a <spi_init+0x272>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    130e:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1310:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1312:	07db      	lsls	r3, r3, #31
    1314:	d500      	bpl.n	1318 <spi_init+0x140>
    1316:	e098      	b.n	144a <spi_init+0x272>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1318:	0008      	movs	r0, r1
    131a:	4b53      	ldr	r3, [pc, #332]	; (1468 <spi_init+0x290>)
    131c:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    131e:	4953      	ldr	r1, [pc, #332]	; (146c <spi_init+0x294>)
    1320:	6a0a      	ldr	r2, [r1, #32]
    1322:	1c87      	adds	r7, r0, #2
    1324:	2301      	movs	r3, #1
    1326:	40bb      	lsls	r3, r7
    1328:	4313      	orrs	r3, r2
    132a:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    132c:	a909      	add	r1, sp, #36	; 0x24
    132e:	2724      	movs	r7, #36	; 0x24
    1330:	5de3      	ldrb	r3, [r4, r7]
    1332:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1334:	3014      	adds	r0, #20
    1336:	b2c3      	uxtb	r3, r0
    1338:	9301      	str	r3, [sp, #4]
    133a:	0018      	movs	r0, r3
    133c:	4b4c      	ldr	r3, [pc, #304]	; (1470 <spi_init+0x298>)
    133e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1340:	9801      	ldr	r0, [sp, #4]
    1342:	4b4c      	ldr	r3, [pc, #304]	; (1474 <spi_init+0x29c>)
    1344:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1346:	5de0      	ldrb	r0, [r4, r7]
    1348:	2100      	movs	r1, #0
    134a:	4b4b      	ldr	r3, [pc, #300]	; (1478 <spi_init+0x2a0>)
    134c:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    134e:	7823      	ldrb	r3, [r4, #0]
    1350:	2b01      	cmp	r3, #1
    1352:	d103      	bne.n	135c <spi_init+0x184>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1354:	6832      	ldr	r2, [r6, #0]
    1356:	330b      	adds	r3, #11
    1358:	4313      	orrs	r3, r2
    135a:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    135c:	682e      	ldr	r6, [r5, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    135e:	ab04      	add	r3, sp, #16
    1360:	2280      	movs	r2, #128	; 0x80
    1362:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1364:	2200      	movs	r2, #0
    1366:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1368:	2101      	movs	r1, #1
    136a:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    136c:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    136e:	7823      	ldrb	r3, [r4, #0]
    1370:	2b00      	cmp	r3, #0
    1372:	d101      	bne.n	1378 <spi_init+0x1a0>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1374:	ab04      	add	r3, sp, #16
    1376:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    1378:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    137a:	9305      	str	r3, [sp, #20]
    137c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    137e:	9306      	str	r3, [sp, #24]
    1380:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1382:	9307      	str	r3, [sp, #28]
    1384:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1386:	9308      	str	r3, [sp, #32]
    1388:	2700      	movs	r7, #0
    138a:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    138c:	00bb      	lsls	r3, r7, #2
    138e:	aa05      	add	r2, sp, #20
    1390:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    1392:	2800      	cmp	r0, #0
    1394:	d102      	bne.n	139c <spi_init+0x1c4>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1396:	0030      	movs	r0, r6
    1398:	4b2f      	ldr	r3, [pc, #188]	; (1458 <spi_init+0x280>)
    139a:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    139c:	1c43      	adds	r3, r0, #1
    139e:	d006      	beq.n	13ae <spi_init+0x1d6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    13a0:	ab02      	add	r3, sp, #8
    13a2:	7218      	strb	r0, [r3, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    13a4:	0c00      	lsrs	r0, r0, #16
    13a6:	b2c0      	uxtb	r0, r0
    13a8:	a904      	add	r1, sp, #16
    13aa:	4b34      	ldr	r3, [pc, #208]	; (147c <spi_init+0x2a4>)
    13ac:	4798      	blx	r3
    13ae:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    13b0:	2f04      	cmp	r7, #4
    13b2:	d1ea      	bne.n	138a <spi_init+0x1b2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    13b4:	7823      	ldrb	r3, [r4, #0]
    13b6:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    13b8:	7c23      	ldrb	r3, [r4, #16]
    13ba:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    13bc:	7ca3      	ldrb	r3, [r4, #18]
    13be:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    13c0:	7d23      	ldrb	r3, [r4, #20]
    13c2:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    13c4:	2200      	movs	r2, #0
    13c6:	ab02      	add	r3, sp, #8
    13c8:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    13ca:	7823      	ldrb	r3, [r4, #0]
    13cc:	2b01      	cmp	r3, #1
    13ce:	d114      	bne.n	13fa <spi_init+0x222>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    13d0:	6828      	ldr	r0, [r5, #0]
    13d2:	4b25      	ldr	r3, [pc, #148]	; (1468 <spi_init+0x290>)
    13d4:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    13d6:	3014      	adds	r0, #20
    13d8:	b2c0      	uxtb	r0, r0
    13da:	4b21      	ldr	r3, [pc, #132]	; (1460 <spi_init+0x288>)
    13dc:	4798      	blx	r3
    13de:	0001      	movs	r1, r0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    13e0:	ab02      	add	r3, sp, #8
    13e2:	1d9a      	adds	r2, r3, #6
    13e4:	69a0      	ldr	r0, [r4, #24]
    13e6:	4b1f      	ldr	r3, [pc, #124]	; (1464 <spi_init+0x28c>)
    13e8:	4798      	blx	r3
    13ea:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    13ec:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    13ee:	2b00      	cmp	r3, #0
    13f0:	d12b      	bne.n	144a <spi_init+0x272>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    13f2:	ab02      	add	r3, sp, #8
    13f4:	3306      	adds	r3, #6
    13f6:	781b      	ldrb	r3, [r3, #0]
    13f8:	7333      	strb	r3, [r6, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    13fa:	6863      	ldr	r3, [r4, #4]
    13fc:	68a2      	ldr	r2, [r4, #8]
    13fe:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    1400:	68e2      	ldr	r2, [r4, #12]
    1402:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
    1404:	7c22      	ldrb	r2, [r4, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1406:	7c61      	ldrb	r1, [r4, #17]
    1408:	2900      	cmp	r1, #0
    140a:	d103      	bne.n	1414 <spi_init+0x23c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    140c:	491c      	ldr	r1, [pc, #112]	; (1480 <spi_init+0x2a8>)
    140e:	7889      	ldrb	r1, [r1, #2]
    1410:	0789      	lsls	r1, r1, #30
    1412:	d501      	bpl.n	1418 <spi_init+0x240>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1414:	2180      	movs	r1, #128	; 0x80
    1416:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
    1418:	7ca1      	ldrb	r1, [r4, #18]
    141a:	2900      	cmp	r1, #0
    141c:	d002      	beq.n	1424 <spi_init+0x24c>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    141e:	2180      	movs	r1, #128	; 0x80
    1420:	0289      	lsls	r1, r1, #10
    1422:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    1424:	7ce1      	ldrb	r1, [r4, #19]
    1426:	2900      	cmp	r1, #0
    1428:	d002      	beq.n	1430 <spi_init+0x258>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    142a:	2180      	movs	r1, #128	; 0x80
    142c:	0089      	lsls	r1, r1, #2
    142e:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    1430:	7d21      	ldrb	r1, [r4, #20]
    1432:	2900      	cmp	r1, #0
    1434:	d002      	beq.n	143c <spi_init+0x264>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1436:	2180      	movs	r1, #128	; 0x80
    1438:	0189      	lsls	r1, r1, #6
    143a:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    143c:	6831      	ldr	r1, [r6, #0]
    143e:	430b      	orrs	r3, r1
    1440:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    1442:	6873      	ldr	r3, [r6, #4]
    1444:	4313      	orrs	r3, r2
    1446:	6073      	str	r3, [r6, #4]

	return STATUS_OK;
    1448:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    144a:	b00a      	add	sp, #40	; 0x28
    144c:	bc1c      	pop	{r2, r3, r4}
    144e:	4690      	mov	r8, r2
    1450:	4699      	mov	r9, r3
    1452:	46a2      	mov	sl, r4
    1454:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1456:	46c0      	nop			; (mov r8, r8)
    1458:	00000f49 	.word	0x00000f49
    145c:	41004400 	.word	0x41004400
    1460:	00002355 	.word	0x00002355
    1464:	00000d0d 	.word	0x00000d0d
    1468:	000010d1 	.word	0x000010d1
    146c:	40000400 	.word	0x40000400
    1470:	00002339 	.word	0x00002339
    1474:	000022ad 	.word	0x000022ad
    1478:	00000efd 	.word	0x00000efd
    147c:	00002431 	.word	0x00002431
    1480:	41002000 	.word	0x41002000

00001484 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1484:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1486:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    1488:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    148a:	2c01      	cmp	r4, #1
    148c:	d16e      	bne.n	156c <spi_select_slave+0xe8>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    148e:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    1490:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    1492:	2c00      	cmp	r4, #0
    1494:	d16a      	bne.n	156c <spi_select_slave+0xe8>
#  endif
	{
		if (select) {
    1496:	2a00      	cmp	r2, #0
    1498:	d058      	beq.n	154c <spi_select_slave+0xc8>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    149a:	784b      	ldrb	r3, [r1, #1]
    149c:	2b00      	cmp	r3, #0
    149e:	d044      	beq.n	152a <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    14a0:	6803      	ldr	r3, [r0, #0]
    14a2:	7e1b      	ldrb	r3, [r3, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    14a4:	07db      	lsls	r3, r3, #31
    14a6:	d410      	bmi.n	14ca <spi_select_slave+0x46>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    14a8:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    14aa:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    14ac:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    14ae:	2900      	cmp	r1, #0
    14b0:	d104      	bne.n	14bc <spi_select_slave+0x38>
		return &(ports[port_index]->Group[group_index]);
    14b2:	095a      	lsrs	r2, r3, #5
    14b4:	01d2      	lsls	r2, r2, #7
    14b6:	492e      	ldr	r1, [pc, #184]	; (1570 <spi_select_slave+0xec>)
    14b8:	468c      	mov	ip, r1
    14ba:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    14bc:	211f      	movs	r1, #31
    14be:	400b      	ands	r3, r1
    14c0:	391e      	subs	r1, #30
    14c2:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    14c4:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
    14c6:	2305      	movs	r3, #5
    14c8:	e050      	b.n	156c <spi_select_slave+0xe8>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    14ca:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    14cc:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    14ce:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    14d0:	2c00      	cmp	r4, #0
    14d2:	d104      	bne.n	14de <spi_select_slave+0x5a>
		return &(ports[port_index]->Group[group_index]);
    14d4:	095a      	lsrs	r2, r3, #5
    14d6:	01d2      	lsls	r2, r2, #7
    14d8:	4c25      	ldr	r4, [pc, #148]	; (1570 <spi_select_slave+0xec>)
    14da:	46a4      	mov	ip, r4
    14dc:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    14de:	241f      	movs	r4, #31
    14e0:	4023      	ands	r3, r4
    14e2:	3c1e      	subs	r4, #30
    14e4:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    14e6:	6154      	str	r4, [r2, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    14e8:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    14ea:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    14ec:	07d2      	lsls	r2, r2, #31
    14ee:	d501      	bpl.n	14f4 <spi_select_slave+0x70>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    14f0:	788a      	ldrb	r2, [r1, #2]
    14f2:	629a      	str	r2, [r3, #40]	; 0x28

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    14f4:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    14f6:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    14f8:	2a00      	cmp	r2, #0
    14fa:	d137      	bne.n	156c <spi_select_slave+0xe8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    14fc:	6802      	ldr	r2, [r0, #0]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    14fe:	2104      	movs	r1, #4

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1500:	7e13      	ldrb	r3, [r2, #24]
    1502:	420b      	tst	r3, r1
    1504:	d0fc      	beq.n	1500 <spi_select_slave+0x7c>
    1506:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    1508:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    150a:	0749      	lsls	r1, r1, #29
    150c:	d52e      	bpl.n	156c <spi_select_slave+0xe8>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    150e:	8b53      	ldrh	r3, [r2, #26]
    1510:	075b      	lsls	r3, r3, #29
    1512:	d501      	bpl.n	1518 <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1514:	2304      	movs	r3, #4
    1516:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1518:	7983      	ldrb	r3, [r0, #6]
    151a:	2b01      	cmp	r3, #1
    151c:	d102      	bne.n	1524 <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    151e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1520:	2300      	movs	r3, #0
    1522:	e023      	b.n	156c <spi_select_slave+0xe8>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1524:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1526:	2300      	movs	r3, #0
    1528:	e020      	b.n	156c <spi_select_slave+0xe8>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    152a:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    152c:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    152e:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1530:	2900      	cmp	r1, #0
    1532:	d104      	bne.n	153e <spi_select_slave+0xba>
		return &(ports[port_index]->Group[group_index]);
    1534:	095a      	lsrs	r2, r3, #5
    1536:	01d2      	lsls	r2, r2, #7
    1538:	490d      	ldr	r1, [pc, #52]	; (1570 <spi_select_slave+0xec>)
    153a:	468c      	mov	ip, r1
    153c:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    153e:	211f      	movs	r1, #31
    1540:	400b      	ands	r3, r1
    1542:	391e      	subs	r1, #30
    1544:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1546:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    1548:	2300      	movs	r3, #0
    154a:	e00f      	b.n	156c <spi_select_slave+0xe8>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    154c:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    154e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1550:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1552:	2900      	cmp	r1, #0
    1554:	d104      	bne.n	1560 <spi_select_slave+0xdc>
		return &(ports[port_index]->Group[group_index]);
    1556:	095a      	lsrs	r2, r3, #5
    1558:	01d2      	lsls	r2, r2, #7
    155a:	4905      	ldr	r1, [pc, #20]	; (1570 <spi_select_slave+0xec>)
    155c:	468c      	mov	ip, r1
    155e:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1560:	211f      	movs	r1, #31
    1562:	400b      	ands	r3, r1
    1564:	391e      	subs	r1, #30
    1566:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1568:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
    156a:	2300      	movs	r3, #0
}
    156c:	0018      	movs	r0, r3
    156e:	bd10      	pop	{r4, pc}
    1570:	41004400 	.word	0x41004400

00001574 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1574:	b5f0      	push	{r4, r5, r6, r7, lr}
    1576:	465f      	mov	r7, fp
    1578:	4656      	mov	r6, sl
    157a:	464d      	mov	r5, r9
    157c:	4644      	mov	r4, r8
    157e:	b4f0      	push	{r4, r5, r6, r7}
    1580:	b091      	sub	sp, #68	; 0x44
    1582:	0005      	movs	r5, r0
    1584:	000c      	movs	r4, r1
    1586:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1588:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    158a:	0008      	movs	r0, r1
    158c:	4bb9      	ldr	r3, [pc, #740]	; (1874 <usart_init+0x300>)
    158e:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1590:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1592:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1594:	07d2      	lsls	r2, r2, #31
    1596:	d500      	bpl.n	159a <usart_init+0x26>
    1598:	e164      	b.n	1864 <usart_init+0x2f0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    159a:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    159c:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    159e:	0792      	lsls	r2, r2, #30
    15a0:	d500      	bpl.n	15a4 <usart_init+0x30>
    15a2:	e15f      	b.n	1864 <usart_init+0x2f0>
    15a4:	49b4      	ldr	r1, [pc, #720]	; (1878 <usart_init+0x304>)
    15a6:	6a0a      	ldr	r2, [r1, #32]
    15a8:	1c87      	adds	r7, r0, #2
    15aa:	3b1b      	subs	r3, #27
    15ac:	40bb      	lsls	r3, r7
    15ae:	4313      	orrs	r3, r2
    15b0:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    15b2:	a90f      	add	r1, sp, #60	; 0x3c
    15b4:	272d      	movs	r7, #45	; 0x2d
    15b6:	5df3      	ldrb	r3, [r6, r7]
    15b8:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    15ba:	3014      	adds	r0, #20
    15bc:	b2c3      	uxtb	r3, r0
    15be:	9302      	str	r3, [sp, #8]
    15c0:	0018      	movs	r0, r3
    15c2:	4bae      	ldr	r3, [pc, #696]	; (187c <usart_init+0x308>)
    15c4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    15c6:	9802      	ldr	r0, [sp, #8]
    15c8:	4bad      	ldr	r3, [pc, #692]	; (1880 <usart_init+0x30c>)
    15ca:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    15cc:	5df0      	ldrb	r0, [r6, r7]
    15ce:	2100      	movs	r1, #0
    15d0:	4bac      	ldr	r3, [pc, #688]	; (1884 <usart_init+0x310>)
    15d2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    15d4:	7af3      	ldrb	r3, [r6, #11]
    15d6:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    15d8:	2324      	movs	r3, #36	; 0x24
    15da:	5cf3      	ldrb	r3, [r6, r3]
    15dc:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    15de:	2325      	movs	r3, #37	; 0x25
    15e0:	5cf3      	ldrb	r3, [r6, r3]
    15e2:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    15e4:	7ef3      	ldrb	r3, [r6, #27]
    15e6:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    15e8:	7f33      	ldrb	r3, [r6, #28]
    15ea:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    15ec:	682b      	ldr	r3, [r5, #0]
    15ee:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    15f0:	0018      	movs	r0, r3
    15f2:	4ba0      	ldr	r3, [pc, #640]	; (1874 <usart_init+0x300>)
    15f4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    15f6:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    15f8:	2200      	movs	r2, #0
    15fa:	230e      	movs	r3, #14
    15fc:	a906      	add	r1, sp, #24
    15fe:	468c      	mov	ip, r1
    1600:	4463      	add	r3, ip
    1602:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    1604:	8a32      	ldrh	r2, [r6, #16]
    1606:	9202      	str	r2, [sp, #8]
    1608:	2380      	movs	r3, #128	; 0x80
    160a:	01db      	lsls	r3, r3, #7
    160c:	429a      	cmp	r2, r3
    160e:	d01a      	beq.n	1646 <usart_init+0xd2>
    1610:	d804      	bhi.n	161c <usart_init+0xa8>
    1612:	2380      	movs	r3, #128	; 0x80
    1614:	019b      	lsls	r3, r3, #6
    1616:	429a      	cmp	r2, r3
    1618:	d00b      	beq.n	1632 <usart_init+0xbe>
    161a:	e104      	b.n	1826 <usart_init+0x2b2>
    161c:	23c0      	movs	r3, #192	; 0xc0
    161e:	01db      	lsls	r3, r3, #7
    1620:	9a02      	ldr	r2, [sp, #8]
    1622:	429a      	cmp	r2, r3
    1624:	d00a      	beq.n	163c <usart_init+0xc8>
    1626:	2380      	movs	r3, #128	; 0x80
    1628:	021b      	lsls	r3, r3, #8
    162a:	429a      	cmp	r2, r3
    162c:	d100      	bne.n	1630 <usart_init+0xbc>
    162e:	e0ff      	b.n	1830 <usart_init+0x2bc>
    1630:	e0f9      	b.n	1826 <usart_init+0x2b2>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1632:	2310      	movs	r3, #16
    1634:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1636:	3b0f      	subs	r3, #15
    1638:	9307      	str	r3, [sp, #28]
    163a:	e0fd      	b.n	1838 <usart_init+0x2c4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    163c:	2308      	movs	r3, #8
    163e:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1640:	3b07      	subs	r3, #7
    1642:	9307      	str	r3, [sp, #28]
    1644:	e0f8      	b.n	1838 <usart_init+0x2c4>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1646:	6833      	ldr	r3, [r6, #0]
    1648:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    164a:	68f3      	ldr	r3, [r6, #12]
    164c:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    164e:	6973      	ldr	r3, [r6, #20]
    1650:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1652:	7e33      	ldrb	r3, [r6, #24]
    1654:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1656:	2326      	movs	r3, #38	; 0x26
    1658:	5cf3      	ldrb	r3, [r6, r3]
    165a:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    165c:	6873      	ldr	r3, [r6, #4]
    165e:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1660:	2b00      	cmp	r3, #0
    1662:	d015      	beq.n	1690 <usart_init+0x11c>
    1664:	2380      	movs	r3, #128	; 0x80
    1666:	055b      	lsls	r3, r3, #21
    1668:	459a      	cmp	sl, r3
    166a:	d136      	bne.n	16da <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    166c:	2327      	movs	r3, #39	; 0x27
    166e:	5cf3      	ldrb	r3, [r6, r3]
    1670:	2b00      	cmp	r3, #0
    1672:	d136      	bne.n	16e2 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1674:	6a33      	ldr	r3, [r6, #32]
    1676:	001f      	movs	r7, r3
    1678:	b2c0      	uxtb	r0, r0
    167a:	4b83      	ldr	r3, [pc, #524]	; (1888 <usart_init+0x314>)
    167c:	4798      	blx	r3
    167e:	0001      	movs	r1, r0
    1680:	220e      	movs	r2, #14
    1682:	ab06      	add	r3, sp, #24
    1684:	469c      	mov	ip, r3
    1686:	4462      	add	r2, ip
    1688:	0038      	movs	r0, r7
    168a:	4b80      	ldr	r3, [pc, #512]	; (188c <usart_init+0x318>)
    168c:	4798      	blx	r3
    168e:	e025      	b.n	16dc <usart_init+0x168>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1690:	2308      	movs	r3, #8
    1692:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1694:	2300      	movs	r3, #0
    1696:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    1698:	2327      	movs	r3, #39	; 0x27
    169a:	5cf3      	ldrb	r3, [r6, r3]
    169c:	2b00      	cmp	r3, #0
    169e:	d00b      	beq.n	16b8 <usart_init+0x144>
				status_code =
    16a0:	9b06      	ldr	r3, [sp, #24]
    16a2:	9300      	str	r3, [sp, #0]
    16a4:	9b07      	ldr	r3, [sp, #28]
    16a6:	220e      	movs	r2, #14
    16a8:	a906      	add	r1, sp, #24
    16aa:	468c      	mov	ip, r1
    16ac:	4462      	add	r2, ip
    16ae:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    16b0:	6a30      	ldr	r0, [r6, #32]
    16b2:	4f77      	ldr	r7, [pc, #476]	; (1890 <usart_init+0x31c>)
    16b4:	47b8      	blx	r7
    16b6:	e011      	b.n	16dc <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    16b8:	6a33      	ldr	r3, [r6, #32]
    16ba:	001f      	movs	r7, r3
    16bc:	b2c0      	uxtb	r0, r0
    16be:	4b72      	ldr	r3, [pc, #456]	; (1888 <usart_init+0x314>)
    16c0:	4798      	blx	r3
    16c2:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    16c4:	9b06      	ldr	r3, [sp, #24]
    16c6:	9300      	str	r3, [sp, #0]
    16c8:	9b07      	ldr	r3, [sp, #28]
    16ca:	220e      	movs	r2, #14
    16cc:	a806      	add	r0, sp, #24
    16ce:	4684      	mov	ip, r0
    16d0:	4462      	add	r2, ip
    16d2:	0038      	movs	r0, r7
    16d4:	4f6e      	ldr	r7, [pc, #440]	; (1890 <usart_init+0x31c>)
    16d6:	47b8      	blx	r7
    16d8:	e000      	b.n	16dc <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    16da:	2000      	movs	r0, #0
    16dc:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    16de:	d000      	beq.n	16e2 <usart_init+0x16e>
    16e0:	e0c0      	b.n	1864 <usart_init+0x2f0>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    16e2:	7e73      	ldrb	r3, [r6, #25]
    16e4:	2b00      	cmp	r3, #0
    16e6:	d002      	beq.n	16ee <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    16e8:	7eb3      	ldrb	r3, [r6, #26]
    16ea:	464a      	mov	r2, r9
    16ec:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    16ee:	682a      	ldr	r2, [r5, #0]
    16f0:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    16f2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    16f4:	2b00      	cmp	r3, #0
    16f6:	d1fc      	bne.n	16f2 <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    16f8:	330e      	adds	r3, #14
    16fa:	aa06      	add	r2, sp, #24
    16fc:	4694      	mov	ip, r2
    16fe:	4463      	add	r3, ip
    1700:	881b      	ldrh	r3, [r3, #0]
    1702:	464a      	mov	r2, r9
    1704:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    1706:	9b04      	ldr	r3, [sp, #16]
    1708:	465a      	mov	r2, fp
    170a:	4313      	orrs	r3, r2
    170c:	9a03      	ldr	r2, [sp, #12]
    170e:	4313      	orrs	r3, r2
    1710:	4652      	mov	r2, sl
    1712:	4313      	orrs	r3, r2
    1714:	433b      	orrs	r3, r7
    1716:	4642      	mov	r2, r8
    1718:	0212      	lsls	r2, r2, #8
    171a:	4313      	orrs	r3, r2
    171c:	9a05      	ldr	r2, [sp, #20]
    171e:	0757      	lsls	r7, r2, #29
    1720:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    1722:	2327      	movs	r3, #39	; 0x27
    1724:	5cf3      	ldrb	r3, [r6, r3]
    1726:	2b00      	cmp	r3, #0
    1728:	d101      	bne.n	172e <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    172a:	3304      	adds	r3, #4
    172c:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    172e:	7e71      	ldrb	r1, [r6, #25]
    1730:	0289      	lsls	r1, r1, #10
    1732:	7f33      	ldrb	r3, [r6, #28]
    1734:	025b      	lsls	r3, r3, #9
    1736:	4319      	orrs	r1, r3
    1738:	7f73      	ldrb	r3, [r6, #29]
    173a:	021b      	lsls	r3, r3, #8
    173c:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    173e:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    1740:	5cf3      	ldrb	r3, [r6, r3]
    1742:	045b      	lsls	r3, r3, #17
    1744:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1746:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    1748:	5cf2      	ldrb	r2, [r6, r3]
    174a:	0412      	lsls	r2, r2, #16
    174c:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    174e:	7af3      	ldrb	r3, [r6, #11]
    1750:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1752:	8933      	ldrh	r3, [r6, #8]
    1754:	2bff      	cmp	r3, #255	; 0xff
    1756:	d004      	beq.n	1762 <usart_init+0x1ee>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1758:	2280      	movs	r2, #128	; 0x80
    175a:	0452      	lsls	r2, r2, #17
    175c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    175e:	4319      	orrs	r1, r3
    1760:	e005      	b.n	176e <usart_init+0x1fa>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1762:	7ef3      	ldrb	r3, [r6, #27]
    1764:	2b00      	cmp	r3, #0
    1766:	d002      	beq.n	176e <usart_init+0x1fa>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1768:	2380      	movs	r3, #128	; 0x80
    176a:	04db      	lsls	r3, r3, #19
    176c:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    176e:	232c      	movs	r3, #44	; 0x2c
    1770:	5cf3      	ldrb	r3, [r6, r3]
    1772:	2b00      	cmp	r3, #0
    1774:	d103      	bne.n	177e <usart_init+0x20a>
    1776:	4b47      	ldr	r3, [pc, #284]	; (1894 <usart_init+0x320>)
    1778:	789b      	ldrb	r3, [r3, #2]
    177a:	079b      	lsls	r3, r3, #30
    177c:	d501      	bpl.n	1782 <usart_init+0x20e>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    177e:	2380      	movs	r3, #128	; 0x80
    1780:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1782:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1784:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1786:	2b00      	cmp	r3, #0
    1788:	d1fc      	bne.n	1784 <usart_init+0x210>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    178a:	464b      	mov	r3, r9
    178c:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    178e:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1790:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1792:	2b00      	cmp	r3, #0
    1794:	d1fc      	bne.n	1790 <usart_init+0x21c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    1796:	464b      	mov	r3, r9
    1798:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    179a:	ab0e      	add	r3, sp, #56	; 0x38
    179c:	2280      	movs	r2, #128	; 0x80
    179e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    17a0:	2200      	movs	r2, #0
    17a2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    17a4:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    17a6:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    17a8:	6b33      	ldr	r3, [r6, #48]	; 0x30
    17aa:	930a      	str	r3, [sp, #40]	; 0x28
    17ac:	6b73      	ldr	r3, [r6, #52]	; 0x34
    17ae:	930b      	str	r3, [sp, #44]	; 0x2c
    17b0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    17b2:	930c      	str	r3, [sp, #48]	; 0x30
    17b4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    17b6:	9302      	str	r3, [sp, #8]
    17b8:	930d      	str	r3, [sp, #52]	; 0x34
    17ba:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    17bc:	ae0e      	add	r6, sp, #56	; 0x38
    17be:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    17c0:	00bb      	lsls	r3, r7, #2
    17c2:	aa0a      	add	r2, sp, #40	; 0x28
    17c4:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    17c6:	2800      	cmp	r0, #0
    17c8:	d102      	bne.n	17d0 <usart_init+0x25c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    17ca:	0020      	movs	r0, r4
    17cc:	4b32      	ldr	r3, [pc, #200]	; (1898 <usart_init+0x324>)
    17ce:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    17d0:	1c43      	adds	r3, r0, #1
    17d2:	d005      	beq.n	17e0 <usart_init+0x26c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    17d4:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    17d6:	0c00      	lsrs	r0, r0, #16
    17d8:	b2c0      	uxtb	r0, r0
    17da:	0031      	movs	r1, r6
    17dc:	4b2f      	ldr	r3, [pc, #188]	; (189c <usart_init+0x328>)
    17de:	4798      	blx	r3
    17e0:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    17e2:	2f04      	cmp	r7, #4
    17e4:	d1eb      	bne.n	17be <usart_init+0x24a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    17e6:	2300      	movs	r3, #0
    17e8:	60eb      	str	r3, [r5, #12]
    17ea:	612b      	str	r3, [r5, #16]
    17ec:	616b      	str	r3, [r5, #20]
    17ee:	61ab      	str	r3, [r5, #24]
    17f0:	61eb      	str	r3, [r5, #28]
    17f2:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    17f4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    17f6:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    17f8:	2200      	movs	r2, #0
    17fa:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    17fc:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    17fe:	3330      	adds	r3, #48	; 0x30
    1800:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1802:	3301      	adds	r3, #1
    1804:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1806:	3301      	adds	r3, #1
    1808:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    180a:	3301      	adds	r3, #1
    180c:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    180e:	6828      	ldr	r0, [r5, #0]
    1810:	4b18      	ldr	r3, [pc, #96]	; (1874 <usart_init+0x300>)
    1812:	4798      	blx	r3
    1814:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1816:	4922      	ldr	r1, [pc, #136]	; (18a0 <usart_init+0x32c>)
    1818:	4b22      	ldr	r3, [pc, #136]	; (18a4 <usart_init+0x330>)
    181a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    181c:	00a4      	lsls	r4, r4, #2
    181e:	4b22      	ldr	r3, [pc, #136]	; (18a8 <usart_init+0x334>)
    1820:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    1822:	2300      	movs	r3, #0
    1824:	e01e      	b.n	1864 <usart_init+0x2f0>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1826:	2310      	movs	r3, #16
    1828:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    182a:	2300      	movs	r3, #0
    182c:	9307      	str	r3, [sp, #28]
    182e:	e003      	b.n	1838 <usart_init+0x2c4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1830:	2303      	movs	r3, #3
    1832:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1834:	2300      	movs	r3, #0
    1836:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1838:	6833      	ldr	r3, [r6, #0]
    183a:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    183c:	68f3      	ldr	r3, [r6, #12]
    183e:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1840:	6973      	ldr	r3, [r6, #20]
    1842:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1844:	7e33      	ldrb	r3, [r6, #24]
    1846:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1848:	2326      	movs	r3, #38	; 0x26
    184a:	5cf3      	ldrb	r3, [r6, r3]
    184c:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    184e:	6873      	ldr	r3, [r6, #4]
    1850:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1852:	2b00      	cmp	r3, #0
    1854:	d100      	bne.n	1858 <usart_init+0x2e4>
    1856:	e71f      	b.n	1698 <usart_init+0x124>
    1858:	2380      	movs	r3, #128	; 0x80
    185a:	055b      	lsls	r3, r3, #21
    185c:	459a      	cmp	sl, r3
    185e:	d100      	bne.n	1862 <usart_init+0x2ee>
    1860:	e704      	b.n	166c <usart_init+0xf8>
    1862:	e73e      	b.n	16e2 <usart_init+0x16e>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1864:	0018      	movs	r0, r3
    1866:	b011      	add	sp, #68	; 0x44
    1868:	bc3c      	pop	{r2, r3, r4, r5}
    186a:	4690      	mov	r8, r2
    186c:	4699      	mov	r9, r3
    186e:	46a2      	mov	sl, r4
    1870:	46ab      	mov	fp, r5
    1872:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1874:	000010d1 	.word	0x000010d1
    1878:	40000400 	.word	0x40000400
    187c:	00002339 	.word	0x00002339
    1880:	000022ad 	.word	0x000022ad
    1884:	00000efd 	.word	0x00000efd
    1888:	00002355 	.word	0x00002355
    188c:	00000d0d 	.word	0x00000d0d
    1890:	00000d35 	.word	0x00000d35
    1894:	41002000 	.word	0x41002000
    1898:	00000f49 	.word	0x00000f49
    189c:	00002431 	.word	0x00002431
    18a0:	00001a2d 	.word	0x00001a2d
    18a4:	00001111 	.word	0x00001111
    18a8:	200007c4 	.word	0x200007c4

000018ac <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    18ac:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    18ae:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    18b0:	2a00      	cmp	r2, #0
    18b2:	d00e      	beq.n	18d2 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    18b4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    18b6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    18b8:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    18ba:	2a00      	cmp	r2, #0
    18bc:	d109      	bne.n	18d2 <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    18be:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    18c0:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    18c2:	2a00      	cmp	r2, #0
    18c4:	d1fc      	bne.n	18c0 <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    18c6:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    18c8:	2102      	movs	r1, #2
    18ca:	7e1a      	ldrb	r2, [r3, #24]
    18cc:	420a      	tst	r2, r1
    18ce:	d0fc      	beq.n	18ca <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    18d0:	2300      	movs	r3, #0
}
    18d2:	0018      	movs	r0, r3
    18d4:	4770      	bx	lr
    18d6:	46c0      	nop			; (mov r8, r8)

000018d8 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    18d8:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    18da:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    18dc:	2a00      	cmp	r2, #0
    18de:	d030      	beq.n	1942 <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    18e0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    18e2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    18e4:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    18e6:	2a00      	cmp	r2, #0
    18e8:	d12b      	bne.n	1942 <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    18ea:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    18ec:	7e10      	ldrb	r0, [r2, #24]
    18ee:	0740      	lsls	r0, r0, #29
    18f0:	d527      	bpl.n	1942 <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    18f2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    18f4:	2b00      	cmp	r3, #0
    18f6:	d1fc      	bne.n	18f2 <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    18f8:	8b53      	ldrh	r3, [r2, #26]
    18fa:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    18fc:	0698      	lsls	r0, r3, #26
    18fe:	d01d      	beq.n	193c <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1900:	0798      	lsls	r0, r3, #30
    1902:	d503      	bpl.n	190c <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1904:	2302      	movs	r3, #2
    1906:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
    1908:	3318      	adds	r3, #24
    190a:	e01a      	b.n	1942 <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    190c:	0758      	lsls	r0, r3, #29
    190e:	d503      	bpl.n	1918 <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1910:	2304      	movs	r3, #4
    1912:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
    1914:	331a      	adds	r3, #26
    1916:	e014      	b.n	1942 <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1918:	07d8      	lsls	r0, r3, #31
    191a:	d503      	bpl.n	1924 <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    191c:	2301      	movs	r3, #1
    191e:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
    1920:	3312      	adds	r3, #18
    1922:	e00e      	b.n	1942 <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1924:	06d8      	lsls	r0, r3, #27
    1926:	d503      	bpl.n	1930 <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1928:	2310      	movs	r3, #16
    192a:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
    192c:	3332      	adds	r3, #50	; 0x32
    192e:	e008      	b.n	1942 <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1930:	069b      	lsls	r3, r3, #26
    1932:	d503      	bpl.n	193c <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1934:	2320      	movs	r3, #32
    1936:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
    1938:	3321      	adds	r3, #33	; 0x21
    193a:	e002      	b.n	1942 <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    193c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    193e:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    1940:	2300      	movs	r3, #0
}
    1942:	0018      	movs	r0, r3
    1944:	4770      	bx	lr
    1946:	46c0      	nop			; (mov r8, r8)

00001948 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    194a:	0006      	movs	r6, r0
    194c:	000c      	movs	r4, r1
    194e:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1950:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1952:	4b0a      	ldr	r3, [pc, #40]	; (197c <_usart_write_buffer+0x34>)
    1954:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    1956:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    1958:	b29b      	uxth	r3, r3
    195a:	2b00      	cmp	r3, #0
    195c:	d003      	beq.n	1966 <_usart_write_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    195e:	4b08      	ldr	r3, [pc, #32]	; (1980 <_usart_write_buffer+0x38>)
    1960:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1962:	2005      	movs	r0, #5
    1964:	e009      	b.n	197a <_usart_write_buffer+0x32>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    1966:	85f5      	strh	r5, [r6, #46]	; 0x2e
    1968:	4b05      	ldr	r3, [pc, #20]	; (1980 <_usart_write_buffer+0x38>)
    196a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->tx_buffer_ptr              = tx_data;
    196c:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    196e:	2205      	movs	r2, #5
    1970:	2333      	movs	r3, #51	; 0x33
    1972:	54f2      	strb	r2, [r6, r3]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    1974:	3b32      	subs	r3, #50	; 0x32
    1976:	75bb      	strb	r3, [r7, #22]

	return STATUS_OK;
    1978:	2000      	movs	r0, #0
}
    197a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    197c:	00000a09 	.word	0x00000a09
    1980:	00000a49 	.word	0x00000a49

00001984 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1986:	0004      	movs	r4, r0
    1988:	000d      	movs	r5, r1
    198a:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    198c:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    198e:	4b0f      	ldr	r3, [pc, #60]	; (19cc <_usart_read_buffer+0x48>)
    1990:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    1992:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1994:	b29b      	uxth	r3, r3
    1996:	2b00      	cmp	r3, #0
    1998:	d003      	beq.n	19a2 <_usart_read_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    199a:	4b0d      	ldr	r3, [pc, #52]	; (19d0 <_usart_read_buffer+0x4c>)
    199c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    199e:	2005      	movs	r0, #5
    19a0:	e013      	b.n	19ca <_usart_read_buffer+0x46>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    19a2:	85a6      	strh	r6, [r4, #44]	; 0x2c
    19a4:	4b0a      	ldr	r3, [pc, #40]	; (19d0 <_usart_read_buffer+0x4c>)
    19a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->rx_buffer_ptr              = rx_data;
    19a8:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    19aa:	2205      	movs	r2, #5
    19ac:	2332      	movs	r3, #50	; 0x32
    19ae:	54e2      	strb	r2, [r4, r3]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    19b0:	3b2e      	subs	r3, #46	; 0x2e
    19b2:	75bb      	strb	r3, [r7, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    19b4:	7a23      	ldrb	r3, [r4, #8]
    19b6:	2b00      	cmp	r3, #0
    19b8:	d001      	beq.n	19be <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    19ba:	2320      	movs	r3, #32
    19bc:	75bb      	strb	r3, [r7, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    19be:	7a63      	ldrb	r3, [r4, #9]
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
    19c0:	2000      	movs	r0, #0
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    19c2:	2b00      	cmp	r3, #0
    19c4:	d001      	beq.n	19ca <_usart_read_buffer+0x46>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    19c6:	2308      	movs	r3, #8
    19c8:	75bb      	strb	r3, [r7, #22]
	}
#endif

	return STATUS_OK;
}
    19ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19cc:	00000a09 	.word	0x00000a09
    19d0:	00000a49 	.word	0x00000a49

000019d4 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    19d4:	1c93      	adds	r3, r2, #2
    19d6:	009b      	lsls	r3, r3, #2
    19d8:	18c3      	adds	r3, r0, r3
    19da:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    19dc:	2130      	movs	r1, #48	; 0x30
    19de:	2301      	movs	r3, #1
    19e0:	4093      	lsls	r3, r2
    19e2:	5c42      	ldrb	r2, [r0, r1]
    19e4:	4313      	orrs	r3, r2
    19e6:	5443      	strb	r3, [r0, r1]
}
    19e8:	4770      	bx	lr
    19ea:	46c0      	nop			; (mov r8, r8)

000019ec <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    19ec:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    19ee:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    19f0:	2a00      	cmp	r2, #0
    19f2:	d006      	beq.n	1a02 <usart_write_buffer_job+0x16>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    19f4:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    19f6:	3305      	adds	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    19f8:	2c00      	cmp	r4, #0
    19fa:	d002      	beq.n	1a02 <usart_write_buffer_job+0x16>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    19fc:	4b02      	ldr	r3, [pc, #8]	; (1a08 <usart_write_buffer_job+0x1c>)
    19fe:	4798      	blx	r3
    1a00:	0003      	movs	r3, r0
}
    1a02:	0018      	movs	r0, r3
    1a04:	bd10      	pop	{r4, pc}
    1a06:	46c0      	nop			; (mov r8, r8)
    1a08:	00001949 	.word	0x00001949

00001a0c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1a0c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1a0e:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    1a10:	2a00      	cmp	r2, #0
    1a12:	d006      	beq.n	1a22 <usart_read_buffer_job+0x16>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1a14:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    1a16:	3305      	adds	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1a18:	2c00      	cmp	r4, #0
    1a1a:	d002      	beq.n	1a22 <usart_read_buffer_job+0x16>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    1a1c:	4b02      	ldr	r3, [pc, #8]	; (1a28 <usart_read_buffer_job+0x1c>)
    1a1e:	4798      	blx	r3
    1a20:	0003      	movs	r3, r0
}
    1a22:	0018      	movs	r0, r3
    1a24:	bd10      	pop	{r4, pc}
    1a26:	46c0      	nop			; (mov r8, r8)
    1a28:	00001985 	.word	0x00001985

00001a2c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1a2e:	0080      	lsls	r0, r0, #2
    1a30:	4b60      	ldr	r3, [pc, #384]	; (1bb4 <_usart_interrupt_handler+0x188>)
    1a32:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1a34:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1a36:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1a38:	2b00      	cmp	r3, #0
    1a3a:	d1fc      	bne.n	1a36 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1a3c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1a3e:	7da6      	ldrb	r6, [r4, #22]
    1a40:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1a42:	2330      	movs	r3, #48	; 0x30
    1a44:	5ceb      	ldrb	r3, [r5, r3]
    1a46:	2231      	movs	r2, #49	; 0x31
    1a48:	5caf      	ldrb	r7, [r5, r2]
    1a4a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1a4c:	07f3      	lsls	r3, r6, #31
    1a4e:	d522      	bpl.n	1a96 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1a50:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1a52:	b29b      	uxth	r3, r3
    1a54:	2b00      	cmp	r3, #0
    1a56:	d01c      	beq.n	1a92 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1a58:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1a5a:	7813      	ldrb	r3, [r2, #0]
    1a5c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1a5e:	1c51      	adds	r1, r2, #1
    1a60:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1a62:	7969      	ldrb	r1, [r5, #5]
    1a64:	2901      	cmp	r1, #1
    1a66:	d001      	beq.n	1a6c <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1a68:	b29b      	uxth	r3, r3
    1a6a:	e004      	b.n	1a76 <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1a6c:	7851      	ldrb	r1, [r2, #1]
    1a6e:	0209      	lsls	r1, r1, #8
    1a70:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1a72:	3202      	adds	r2, #2
    1a74:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1a76:	05db      	lsls	r3, r3, #23
    1a78:	0ddb      	lsrs	r3, r3, #23
    1a7a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1a7c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1a7e:	3b01      	subs	r3, #1
    1a80:	b29b      	uxth	r3, r3
    1a82:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1a84:	2b00      	cmp	r3, #0
    1a86:	d106      	bne.n	1a96 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1a88:	3301      	adds	r3, #1
    1a8a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1a8c:	3301      	adds	r3, #1
    1a8e:	75a3      	strb	r3, [r4, #22]
    1a90:	e001      	b.n	1a96 <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1a92:	2301      	movs	r3, #1
    1a94:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1a96:	07b3      	lsls	r3, r6, #30
    1a98:	d509      	bpl.n	1aae <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1a9a:	2302      	movs	r3, #2
    1a9c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1a9e:	2200      	movs	r2, #0
    1aa0:	3331      	adds	r3, #49	; 0x31
    1aa2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1aa4:	07fb      	lsls	r3, r7, #31
    1aa6:	d502      	bpl.n	1aae <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1aa8:	0028      	movs	r0, r5
    1aaa:	68eb      	ldr	r3, [r5, #12]
    1aac:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1aae:	0773      	lsls	r3, r6, #29
    1ab0:	d560      	bpl.n	1b74 <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
    1ab2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1ab4:	b29b      	uxth	r3, r3
    1ab6:	2b00      	cmp	r3, #0
    1ab8:	d05a      	beq.n	1b70 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1aba:	8b63      	ldrh	r3, [r4, #26]
    1abc:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1abe:	071a      	lsls	r2, r3, #28
    1ac0:	d402      	bmi.n	1ac8 <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1ac2:	223f      	movs	r2, #63	; 0x3f
    1ac4:	4013      	ands	r3, r2
    1ac6:	e001      	b.n	1acc <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1ac8:	2237      	movs	r2, #55	; 0x37
    1aca:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1acc:	2b00      	cmp	r3, #0
    1ace:	d02d      	beq.n	1b2c <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1ad0:	079a      	lsls	r2, r3, #30
    1ad2:	d505      	bpl.n	1ae0 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1ad4:	221a      	movs	r2, #26
    1ad6:	2332      	movs	r3, #50	; 0x32
    1ad8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1ada:	3b30      	subs	r3, #48	; 0x30
    1adc:	8363      	strh	r3, [r4, #26]
    1ade:	e01f      	b.n	1b20 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1ae0:	075a      	lsls	r2, r3, #29
    1ae2:	d505      	bpl.n	1af0 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1ae4:	221e      	movs	r2, #30
    1ae6:	2332      	movs	r3, #50	; 0x32
    1ae8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1aea:	3b2e      	subs	r3, #46	; 0x2e
    1aec:	8363      	strh	r3, [r4, #26]
    1aee:	e017      	b.n	1b20 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1af0:	07da      	lsls	r2, r3, #31
    1af2:	d505      	bpl.n	1b00 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1af4:	2213      	movs	r2, #19
    1af6:	2332      	movs	r3, #50	; 0x32
    1af8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1afa:	3b31      	subs	r3, #49	; 0x31
    1afc:	8363      	strh	r3, [r4, #26]
    1afe:	e00f      	b.n	1b20 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1b00:	06da      	lsls	r2, r3, #27
    1b02:	d505      	bpl.n	1b10 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1b04:	2242      	movs	r2, #66	; 0x42
    1b06:	2332      	movs	r3, #50	; 0x32
    1b08:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1b0a:	3b22      	subs	r3, #34	; 0x22
    1b0c:	8363      	strh	r3, [r4, #26]
    1b0e:	e007      	b.n	1b20 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1b10:	2220      	movs	r2, #32
    1b12:	421a      	tst	r2, r3
    1b14:	d004      	beq.n	1b20 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1b16:	3221      	adds	r2, #33	; 0x21
    1b18:	2332      	movs	r3, #50	; 0x32
    1b1a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1b1c:	3b12      	subs	r3, #18
    1b1e:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1b20:	077b      	lsls	r3, r7, #29
    1b22:	d527      	bpl.n	1b74 <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1b24:	0028      	movs	r0, r5
    1b26:	696b      	ldr	r3, [r5, #20]
    1b28:	4798      	blx	r3
    1b2a:	e023      	b.n	1b74 <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1b2c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1b2e:	05db      	lsls	r3, r3, #23
    1b30:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1b32:	b2da      	uxtb	r2, r3
    1b34:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1b36:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1b38:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1b3a:	1c51      	adds	r1, r2, #1
    1b3c:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1b3e:	7969      	ldrb	r1, [r5, #5]
    1b40:	2901      	cmp	r1, #1
    1b42:	d104      	bne.n	1b4e <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1b44:	0a1b      	lsrs	r3, r3, #8
    1b46:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1b48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1b4a:	3301      	adds	r3, #1
    1b4c:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1b4e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1b50:	3b01      	subs	r3, #1
    1b52:	b29b      	uxth	r3, r3
    1b54:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1b56:	2b00      	cmp	r3, #0
    1b58:	d10c      	bne.n	1b74 <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1b5a:	3304      	adds	r3, #4
    1b5c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1b5e:	2200      	movs	r2, #0
    1b60:	332e      	adds	r3, #46	; 0x2e
    1b62:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1b64:	07bb      	lsls	r3, r7, #30
    1b66:	d505      	bpl.n	1b74 <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1b68:	0028      	movs	r0, r5
    1b6a:	692b      	ldr	r3, [r5, #16]
    1b6c:	4798      	blx	r3
    1b6e:	e001      	b.n	1b74 <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1b70:	2304      	movs	r3, #4
    1b72:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1b74:	06f3      	lsls	r3, r6, #27
    1b76:	d507      	bpl.n	1b88 <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1b78:	2310      	movs	r3, #16
    1b7a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1b7c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1b7e:	06fb      	lsls	r3, r7, #27
    1b80:	d502      	bpl.n	1b88 <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1b82:	0028      	movs	r0, r5
    1b84:	69eb      	ldr	r3, [r5, #28]
    1b86:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1b88:	06b3      	lsls	r3, r6, #26
    1b8a:	d507      	bpl.n	1b9c <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1b8c:	2320      	movs	r3, #32
    1b8e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1b90:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1b92:	073b      	lsls	r3, r7, #28
    1b94:	d502      	bpl.n	1b9c <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1b96:	0028      	movs	r0, r5
    1b98:	69ab      	ldr	r3, [r5, #24]
    1b9a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1b9c:	0733      	lsls	r3, r6, #28
    1b9e:	d507      	bpl.n	1bb0 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1ba0:	2308      	movs	r3, #8
    1ba2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1ba4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1ba6:	06bb      	lsls	r3, r7, #26
    1ba8:	d502      	bpl.n	1bb0 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1baa:	6a2b      	ldr	r3, [r5, #32]
    1bac:	0028      	movs	r0, r5
    1bae:	4798      	blx	r3
		}
	}
#endif
}
    1bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1bb2:	46c0      	nop			; (mov r8, r8)
    1bb4:	200007c4 	.word	0x200007c4

00001bb8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1bb8:	b510      	push	{r4, lr}
	switch (clock_source) {
    1bba:	2808      	cmp	r0, #8
    1bbc:	d803      	bhi.n	1bc6 <system_clock_source_get_hz+0xe>
    1bbe:	0080      	lsls	r0, r0, #2
    1bc0:	4b1b      	ldr	r3, [pc, #108]	; (1c30 <system_clock_source_get_hz+0x78>)
    1bc2:	581b      	ldr	r3, [r3, r0]
    1bc4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1bc6:	2000      	movs	r0, #0
    1bc8:	e030      	b.n	1c2c <system_clock_source_get_hz+0x74>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1bca:	4b1a      	ldr	r3, [pc, #104]	; (1c34 <system_clock_source_get_hz+0x7c>)
    1bcc:	6918      	ldr	r0, [r3, #16]
    1bce:	e02d      	b.n	1c2c <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1bd0:	4b19      	ldr	r3, [pc, #100]	; (1c38 <system_clock_source_get_hz+0x80>)
    1bd2:	6a1b      	ldr	r3, [r3, #32]
    1bd4:	059b      	lsls	r3, r3, #22
    1bd6:	0f9b      	lsrs	r3, r3, #30
    1bd8:	4818      	ldr	r0, [pc, #96]	; (1c3c <system_clock_source_get_hz+0x84>)
    1bda:	40d8      	lsrs	r0, r3
    1bdc:	e026      	b.n	1c2c <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1bde:	4b15      	ldr	r3, [pc, #84]	; (1c34 <system_clock_source_get_hz+0x7c>)
    1be0:	6958      	ldr	r0, [r3, #20]
    1be2:	e023      	b.n	1c2c <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1be4:	4b13      	ldr	r3, [pc, #76]	; (1c34 <system_clock_source_get_hz+0x7c>)
    1be6:	681b      	ldr	r3, [r3, #0]
    1be8:	2002      	movs	r0, #2
    1bea:	4018      	ands	r0, r3
    1bec:	d01e      	beq.n	1c2c <system_clock_source_get_hz+0x74>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1bee:	4912      	ldr	r1, [pc, #72]	; (1c38 <system_clock_source_get_hz+0x80>)
    1bf0:	2210      	movs	r2, #16
    1bf2:	68cb      	ldr	r3, [r1, #12]
    1bf4:	421a      	tst	r2, r3
    1bf6:	d0fc      	beq.n	1bf2 <system_clock_source_get_hz+0x3a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1bf8:	4b0e      	ldr	r3, [pc, #56]	; (1c34 <system_clock_source_get_hz+0x7c>)
    1bfa:	681b      	ldr	r3, [r3, #0]
    1bfc:	075b      	lsls	r3, r3, #29
    1bfe:	d514      	bpl.n	1c2a <system_clock_source_get_hz+0x72>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1c00:	2000      	movs	r0, #0
    1c02:	4b0f      	ldr	r3, [pc, #60]	; (1c40 <system_clock_source_get_hz+0x88>)
    1c04:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1c06:	4b0b      	ldr	r3, [pc, #44]	; (1c34 <system_clock_source_get_hz+0x7c>)
    1c08:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1c0a:	041b      	lsls	r3, r3, #16
    1c0c:	0c1b      	lsrs	r3, r3, #16
    1c0e:	4358      	muls	r0, r3
    1c10:	e00c      	b.n	1c2c <system_clock_source_get_hz+0x74>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1c12:	2350      	movs	r3, #80	; 0x50
    1c14:	4a08      	ldr	r2, [pc, #32]	; (1c38 <system_clock_source_get_hz+0x80>)
    1c16:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1c18:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1c1a:	075b      	lsls	r3, r3, #29
    1c1c:	d506      	bpl.n	1c2c <system_clock_source_get_hz+0x74>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1c1e:	4b05      	ldr	r3, [pc, #20]	; (1c34 <system_clock_source_get_hz+0x7c>)
    1c20:	68d8      	ldr	r0, [r3, #12]
    1c22:	e003      	b.n	1c2c <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1c24:	2080      	movs	r0, #128	; 0x80
    1c26:	0200      	lsls	r0, r0, #8
    1c28:	e000      	b.n	1c2c <system_clock_source_get_hz+0x74>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1c2a:	4806      	ldr	r0, [pc, #24]	; (1c44 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    1c2c:	bd10      	pop	{r4, pc}
    1c2e:	46c0      	nop			; (mov r8, r8)
    1c30:	00008b74 	.word	0x00008b74
    1c34:	200000f0 	.word	0x200000f0
    1c38:	40000800 	.word	0x40000800
    1c3c:	007a1200 	.word	0x007a1200
    1c40:	00002355 	.word	0x00002355
    1c44:	02dc6c00 	.word	0x02dc6c00

00001c48 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1c48:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1c4a:	4c0c      	ldr	r4, [pc, #48]	; (1c7c <system_clock_source_osc8m_set_config+0x34>)
    1c4c:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1c4e:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1c50:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1c52:	7842      	ldrb	r2, [r0, #1]
    1c54:	2001      	movs	r0, #1
    1c56:	4002      	ands	r2, r0
    1c58:	0192      	lsls	r2, r2, #6
    1c5a:	2640      	movs	r6, #64	; 0x40
    1c5c:	43b3      	bics	r3, r6
    1c5e:	4313      	orrs	r3, r2
    1c60:	0002      	movs	r2, r0
    1c62:	402a      	ands	r2, r5
    1c64:	01d2      	lsls	r2, r2, #7
    1c66:	307f      	adds	r0, #127	; 0x7f
    1c68:	4383      	bics	r3, r0
    1c6a:	4313      	orrs	r3, r2
    1c6c:	2203      	movs	r2, #3
    1c6e:	400a      	ands	r2, r1
    1c70:	0212      	lsls	r2, r2, #8
    1c72:	4903      	ldr	r1, [pc, #12]	; (1c80 <system_clock_source_osc8m_set_config+0x38>)
    1c74:	400b      	ands	r3, r1
    1c76:	4313      	orrs	r3, r2
    1c78:	6223      	str	r3, [r4, #32]
}
    1c7a:	bd70      	pop	{r4, r5, r6, pc}
    1c7c:	40000800 	.word	0x40000800
    1c80:	fffffcff 	.word	0xfffffcff

00001c84 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c86:	4657      	mov	r7, sl
    1c88:	464e      	mov	r6, r9
    1c8a:	4645      	mov	r5, r8
    1c8c:	b4e0      	push	{r5, r6, r7}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1c8e:	4e1c      	ldr	r6, [pc, #112]	; (1d00 <system_clock_source_osc32k_set_config+0x7c>)
    1c90:	69b3      	ldr	r3, [r6, #24]
    1c92:	469c      	mov	ip, r3

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    1c94:	7841      	ldrb	r1, [r0, #1]
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1c96:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1c98:	7907      	ldrb	r7, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1c9a:	78c3      	ldrb	r3, [r0, #3]
    1c9c:	4699      	mov	r9, r3
	temp.bit.WRTLOCK  = config->write_once;
    1c9e:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    1ca0:	7883      	ldrb	r3, [r0, #2]
    1ca2:	2001      	movs	r0, #1
    1ca4:	4003      	ands	r3, r0
    1ca6:	009b      	lsls	r3, r3, #2
    1ca8:	469a      	mov	sl, r3
    1caa:	2204      	movs	r2, #4
    1cac:	4690      	mov	r8, r2
    1cae:	4662      	mov	r2, ip
    1cb0:	4643      	mov	r3, r8
    1cb2:	439a      	bics	r2, r3
    1cb4:	0013      	movs	r3, r2
    1cb6:	4652      	mov	r2, sl
    1cb8:	431a      	orrs	r2, r3
    1cba:	0013      	movs	r3, r2
    1cbc:	4001      	ands	r1, r0
    1cbe:	00c9      	lsls	r1, r1, #3
    1cc0:	2208      	movs	r2, #8
    1cc2:	4393      	bics	r3, r2
    1cc4:	430b      	orrs	r3, r1
    1cc6:	464a      	mov	r2, r9
    1cc8:	4002      	ands	r2, r0
    1cca:	0192      	lsls	r2, r2, #6
    1ccc:	2140      	movs	r1, #64	; 0x40
    1cce:	438b      	bics	r3, r1
    1cd0:	4313      	orrs	r3, r2
    1cd2:	4007      	ands	r7, r0
    1cd4:	01ff      	lsls	r7, r7, #7
    1cd6:	2280      	movs	r2, #128	; 0x80
    1cd8:	4393      	bics	r3, r2
    1cda:	433b      	orrs	r3, r7
    1cdc:	3a79      	subs	r2, #121	; 0x79
    1cde:	4015      	ands	r5, r2
    1ce0:	022d      	lsls	r5, r5, #8
    1ce2:	4f08      	ldr	r7, [pc, #32]	; (1d04 <system_clock_source_osc32k_set_config+0x80>)
    1ce4:	403b      	ands	r3, r7
    1ce6:	432b      	orrs	r3, r5
    1ce8:	4004      	ands	r4, r0
    1cea:	0320      	lsls	r0, r4, #12
    1cec:	4c06      	ldr	r4, [pc, #24]	; (1d08 <system_clock_source_osc32k_set_config+0x84>)
    1cee:	401c      	ands	r4, r3
    1cf0:	4304      	orrs	r4, r0
    1cf2:	61b4      	str	r4, [r6, #24]
}
    1cf4:	bc1c      	pop	{r2, r3, r4}
    1cf6:	4690      	mov	r8, r2
    1cf8:	4699      	mov	r9, r3
    1cfa:	46a2      	mov	sl, r4
    1cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cfe:	46c0      	nop			; (mov r8, r8)
    1d00:	40000800 	.word	0x40000800
    1d04:	fffff8ff 	.word	0xfffff8ff
    1d08:	ffffefff 	.word	0xffffefff

00001d0c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d0e:	465f      	mov	r7, fp
    1d10:	4656      	mov	r6, sl
    1d12:	464d      	mov	r5, r9
    1d14:	4644      	mov	r4, r8
    1d16:	b4f0      	push	{r4, r5, r6, r7}
    1d18:	b083      	sub	sp, #12
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1d1a:	4e2e      	ldr	r6, [pc, #184]	; (1dd4 <system_clock_source_xosc32k_set_config+0xc8>)
    1d1c:	8ab3      	ldrh	r3, [r6, #20]
    1d1e:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    1d20:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1d22:	7803      	ldrb	r3, [r0, #0]
    1d24:	425a      	negs	r2, r3
    1d26:	415a      	adcs	r2, r3
    1d28:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1d2a:	7883      	ldrb	r3, [r0, #2]
    1d2c:	469b      	mov	fp, r3
	temp.bit.EN1K = config->enable_1khz_output;
    1d2e:	78c3      	ldrb	r3, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    1d30:	7902      	ldrb	r2, [r0, #4]
    1d32:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1d34:	7b47      	ldrb	r7, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1d36:	7b02      	ldrb	r2, [r0, #12]
    1d38:	9201      	str	r2, [sp, #4]
	temp.bit.WRTLOCK  = config->write_once;
    1d3a:	7b84      	ldrb	r4, [r0, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1d3c:	6882      	ldr	r2, [r0, #8]
    1d3e:	4826      	ldr	r0, [pc, #152]	; (1dd8 <system_clock_source_xosc32k_set_config+0xcc>)
    1d40:	6142      	str	r2, [r0, #20]

	SYSCTRL->XOSC32K = temp;
    1d42:	2001      	movs	r0, #1
    1d44:	464a      	mov	r2, r9
    1d46:	0092      	lsls	r2, r2, #2
    1d48:	4691      	mov	r9, r2
    1d4a:	2204      	movs	r2, #4
    1d4c:	4692      	mov	sl, r2
    1d4e:	4662      	mov	r2, ip
    1d50:	4651      	mov	r1, sl
    1d52:	438a      	bics	r2, r1
    1d54:	4694      	mov	ip, r2
    1d56:	464a      	mov	r2, r9
    1d58:	4661      	mov	r1, ip
    1d5a:	430a      	orrs	r2, r1
    1d5c:	4694      	mov	ip, r2
    1d5e:	4642      	mov	r2, r8
    1d60:	4002      	ands	r2, r0
    1d62:	00d2      	lsls	r2, r2, #3
    1d64:	4690      	mov	r8, r2
    1d66:	2208      	movs	r2, #8
    1d68:	4691      	mov	r9, r2
    1d6a:	4662      	mov	r2, ip
    1d6c:	4649      	mov	r1, r9
    1d6e:	438a      	bics	r2, r1
    1d70:	4694      	mov	ip, r2
    1d72:	4642      	mov	r2, r8
    1d74:	4661      	mov	r1, ip
    1d76:	430a      	orrs	r2, r1
    1d78:	4694      	mov	ip, r2
    1d7a:	4003      	ands	r3, r0
    1d7c:	011b      	lsls	r3, r3, #4
    1d7e:	2210      	movs	r2, #16
    1d80:	4690      	mov	r8, r2
    1d82:	4662      	mov	r2, ip
    1d84:	4641      	mov	r1, r8
    1d86:	438a      	bics	r2, r1
    1d88:	4313      	orrs	r3, r2
    1d8a:	4659      	mov	r1, fp
    1d8c:	4001      	ands	r1, r0
    1d8e:	0149      	lsls	r1, r1, #5
    1d90:	2220      	movs	r2, #32
    1d92:	4393      	bics	r3, r2
    1d94:	430b      	orrs	r3, r1
    1d96:	9a01      	ldr	r2, [sp, #4]
    1d98:	4002      	ands	r2, r0
    1d9a:	0192      	lsls	r2, r2, #6
    1d9c:	2140      	movs	r1, #64	; 0x40
    1d9e:	438b      	bics	r3, r1
    1da0:	4313      	orrs	r3, r2
    1da2:	4007      	ands	r7, r0
    1da4:	01ff      	lsls	r7, r7, #7
    1da6:	2280      	movs	r2, #128	; 0x80
    1da8:	4393      	bics	r3, r2
    1daa:	433b      	orrs	r3, r7
    1dac:	3a79      	subs	r2, #121	; 0x79
    1dae:	4015      	ands	r5, r2
    1db0:	022d      	lsls	r5, r5, #8
    1db2:	4f0a      	ldr	r7, [pc, #40]	; (1ddc <system_clock_source_xosc32k_set_config+0xd0>)
    1db4:	403b      	ands	r3, r7
    1db6:	432b      	orrs	r3, r5
    1db8:	4004      	ands	r4, r0
    1dba:	0320      	lsls	r0, r4, #12
    1dbc:	4c08      	ldr	r4, [pc, #32]	; (1de0 <system_clock_source_xosc32k_set_config+0xd4>)
    1dbe:	401c      	ands	r4, r3
    1dc0:	4304      	orrs	r4, r0
    1dc2:	82b4      	strh	r4, [r6, #20]
}
    1dc4:	b003      	add	sp, #12
    1dc6:	bc3c      	pop	{r2, r3, r4, r5}
    1dc8:	4690      	mov	r8, r2
    1dca:	4699      	mov	r9, r3
    1dcc:	46a2      	mov	sl, r4
    1dce:	46ab      	mov	fp, r5
    1dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dd2:	46c0      	nop			; (mov r8, r8)
    1dd4:	40000800 	.word	0x40000800
    1dd8:	200000f0 	.word	0x200000f0
    1ddc:	fffff8ff 	.word	0xfffff8ff
    1de0:	ffffefff 	.word	0xffffefff

00001de4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1de4:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1de6:	7a03      	ldrb	r3, [r0, #8]
    1de8:	069b      	lsls	r3, r3, #26
    1dea:	0c1a      	lsrs	r2, r3, #16
    1dec:	8943      	ldrh	r3, [r0, #10]
    1dee:	059b      	lsls	r3, r3, #22
    1df0:	0d9b      	lsrs	r3, r3, #22
    1df2:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    1df4:	4c19      	ldr	r4, [pc, #100]	; (1e5c <system_clock_source_dfll_set_config+0x78>)
    1df6:	6063      	str	r3, [r4, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    1df8:	7981      	ldrb	r1, [r0, #6]
    1dfa:	79c3      	ldrb	r3, [r0, #7]
    1dfc:	4319      	orrs	r1, r3
    1dfe:	8843      	ldrh	r3, [r0, #2]
    1e00:	8882      	ldrh	r2, [r0, #4]
    1e02:	4313      	orrs	r3, r2
    1e04:	430b      	orrs	r3, r1
    1e06:	7842      	ldrb	r2, [r0, #1]
    1e08:	01d2      	lsls	r2, r2, #7
    1e0a:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    1e0c:	6023      	str	r3, [r4, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1e0e:	7803      	ldrb	r3, [r0, #0]
    1e10:	2b04      	cmp	r3, #4
    1e12:	d10f      	bne.n	1e34 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1e14:	7b03      	ldrb	r3, [r0, #12]
    1e16:	069b      	lsls	r3, r3, #26
    1e18:	8a02      	ldrh	r2, [r0, #16]
    1e1a:	4313      	orrs	r3, r2
    1e1c:	0019      	movs	r1, r3
    1e1e:	89c3      	ldrh	r3, [r0, #14]
    1e20:	041b      	lsls	r3, r3, #16
    1e22:	4a0f      	ldr	r2, [pc, #60]	; (1e60 <system_clock_source_dfll_set_config+0x7c>)
    1e24:	4013      	ands	r3, r2
    1e26:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    1e28:	60a3      	str	r3, [r4, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    1e2a:	6821      	ldr	r1, [r4, #0]
    1e2c:	2304      	movs	r3, #4
    1e2e:	430b      	orrs	r3, r1
    1e30:	6023      	str	r3, [r4, #0]
    1e32:	e011      	b.n	1e58 <system_clock_source_dfll_set_config+0x74>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1e34:	2b20      	cmp	r3, #32
    1e36:	d10f      	bne.n	1e58 <system_clock_source_dfll_set_config+0x74>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1e38:	7b03      	ldrb	r3, [r0, #12]
    1e3a:	069b      	lsls	r3, r3, #26
    1e3c:	8a02      	ldrh	r2, [r0, #16]
    1e3e:	4313      	orrs	r3, r2
    1e40:	0019      	movs	r1, r3
    1e42:	89c3      	ldrh	r3, [r0, #14]
    1e44:	041b      	lsls	r3, r3, #16
    1e46:	4a06      	ldr	r2, [pc, #24]	; (1e60 <system_clock_source_dfll_set_config+0x7c>)
    1e48:	4013      	ands	r3, r2
    1e4a:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    1e4c:	4a03      	ldr	r2, [pc, #12]	; (1e5c <system_clock_source_dfll_set_config+0x78>)
    1e4e:	6093      	str	r3, [r2, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1e50:	6813      	ldr	r3, [r2, #0]
    1e52:	4904      	ldr	r1, [pc, #16]	; (1e64 <system_clock_source_dfll_set_config+0x80>)
    1e54:	430b      	orrs	r3, r1
    1e56:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1e58:	bd10      	pop	{r4, pc}
    1e5a:	46c0      	nop			; (mov r8, r8)
    1e5c:	200000f0 	.word	0x200000f0
    1e60:	03ff0000 	.word	0x03ff0000
    1e64:	00000424 	.word	0x00000424

00001e68 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1e68:	2808      	cmp	r0, #8
    1e6a:	d803      	bhi.n	1e74 <system_clock_source_enable+0xc>
    1e6c:	0080      	lsls	r0, r0, #2
    1e6e:	4b25      	ldr	r3, [pc, #148]	; (1f04 <system_clock_source_enable+0x9c>)
    1e70:	581b      	ldr	r3, [r3, r0]
    1e72:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1e74:	2017      	movs	r0, #23
    1e76:	e044      	b.n	1f02 <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1e78:	4a23      	ldr	r2, [pc, #140]	; (1f08 <system_clock_source_enable+0xa0>)
    1e7a:	6a11      	ldr	r1, [r2, #32]
    1e7c:	2302      	movs	r3, #2
    1e7e:	430b      	orrs	r3, r1
    1e80:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1e82:	2000      	movs	r0, #0
    1e84:	e03d      	b.n	1f02 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1e86:	4a20      	ldr	r2, [pc, #128]	; (1f08 <system_clock_source_enable+0xa0>)
    1e88:	6991      	ldr	r1, [r2, #24]
    1e8a:	2302      	movs	r3, #2
    1e8c:	430b      	orrs	r3, r1
    1e8e:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1e90:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1e92:	e036      	b.n	1f02 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1e94:	4a1c      	ldr	r2, [pc, #112]	; (1f08 <system_clock_source_enable+0xa0>)
    1e96:	8a11      	ldrh	r1, [r2, #16]
    1e98:	2302      	movs	r3, #2
    1e9a:	430b      	orrs	r3, r1
    1e9c:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1e9e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1ea0:	e02f      	b.n	1f02 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1ea2:	4a19      	ldr	r2, [pc, #100]	; (1f08 <system_clock_source_enable+0xa0>)
    1ea4:	8a91      	ldrh	r1, [r2, #20]
    1ea6:	2302      	movs	r3, #2
    1ea8:	430b      	orrs	r3, r1
    1eaa:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1eac:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    1eae:	e028      	b.n	1f02 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1eb0:	4916      	ldr	r1, [pc, #88]	; (1f0c <system_clock_source_enable+0xa4>)
    1eb2:	680b      	ldr	r3, [r1, #0]
    1eb4:	2202      	movs	r2, #2
    1eb6:	4313      	orrs	r3, r2
    1eb8:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1eba:	4b13      	ldr	r3, [pc, #76]	; (1f08 <system_clock_source_enable+0xa0>)
    1ebc:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1ebe:	0019      	movs	r1, r3
    1ec0:	320e      	adds	r2, #14
    1ec2:	68cb      	ldr	r3, [r1, #12]
    1ec4:	421a      	tst	r2, r3
    1ec6:	d0fc      	beq.n	1ec2 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1ec8:	4a10      	ldr	r2, [pc, #64]	; (1f0c <system_clock_source_enable+0xa4>)
    1eca:	6891      	ldr	r1, [r2, #8]
    1ecc:	4b0e      	ldr	r3, [pc, #56]	; (1f08 <system_clock_source_enable+0xa0>)
    1ece:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1ed0:	6852      	ldr	r2, [r2, #4]
    1ed2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1ed4:	2200      	movs	r2, #0
    1ed6:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1ed8:	0019      	movs	r1, r3
    1eda:	3210      	adds	r2, #16
    1edc:	68cb      	ldr	r3, [r1, #12]
    1ede:	421a      	tst	r2, r3
    1ee0:	d0fc      	beq.n	1edc <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1ee2:	4b0a      	ldr	r3, [pc, #40]	; (1f0c <system_clock_source_enable+0xa4>)
    1ee4:	681b      	ldr	r3, [r3, #0]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	4a07      	ldr	r2, [pc, #28]	; (1f08 <system_clock_source_enable+0xa0>)
    1eea:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1eec:	2000      	movs	r0, #0
    1eee:	e008      	b.n	1f02 <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1ef0:	4905      	ldr	r1, [pc, #20]	; (1f08 <system_clock_source_enable+0xa0>)
    1ef2:	2244      	movs	r2, #68	; 0x44
    1ef4:	5c88      	ldrb	r0, [r1, r2]
    1ef6:	2302      	movs	r3, #2
    1ef8:	4303      	orrs	r3, r0
    1efa:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1efc:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1efe:	e000      	b.n	1f02 <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1f00:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1f02:	4770      	bx	lr
    1f04:	00008b98 	.word	0x00008b98
    1f08:	40000800 	.word	0x40000800
    1f0c:	200000f0 	.word	0x200000f0

00001f10 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1f10:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f12:	4657      	mov	r7, sl
    1f14:	464e      	mov	r6, r9
    1f16:	4645      	mov	r5, r8
    1f18:	b4e0      	push	{r5, r6, r7}
    1f1a:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1f1c:	22c2      	movs	r2, #194	; 0xc2
    1f1e:	00d2      	lsls	r2, r2, #3
    1f20:	4b68      	ldr	r3, [pc, #416]	; (20c4 <STACK_SIZE+0xc4>)
    1f22:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1f24:	4968      	ldr	r1, [pc, #416]	; (20c8 <STACK_SIZE+0xc8>)
    1f26:	684b      	ldr	r3, [r1, #4]
    1f28:	221e      	movs	r2, #30
    1f2a:	4393      	bics	r3, r2
    1f2c:	3a1a      	subs	r2, #26
    1f2e:	4313      	orrs	r3, r2
    1f30:	604b      	str	r3, [r1, #4]
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
#elif CONF_CLOCK_GCLK_4_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_4;
#elif CONF_CLOCK_GCLK_5_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_5;
    1f32:	3201      	adds	r2, #1
    1f34:	ab01      	add	r3, sp, #4
    1f36:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1f38:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1f3a:	4d64      	ldr	r5, [pc, #400]	; (20cc <STACK_SIZE+0xcc>)
    1f3c:	b2e0      	uxtb	r0, r4
    1f3e:	a901      	add	r1, sp, #4
    1f40:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1f42:	3401      	adds	r4, #1
    1f44:	2c25      	cmp	r4, #37	; 0x25
    1f46:	d1f9      	bne.n	1f3c <system_clock_init+0x2c>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1f48:	a80c      	add	r0, sp, #48	; 0x30
    1f4a:	2300      	movs	r3, #0
    1f4c:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
	config->frequency           = 32768UL;
    1f4e:	2280      	movs	r2, #128	; 0x80
    1f50:	0212      	lsls	r2, r2, #8
    1f52:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1f54:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1f56:	2201      	movs	r2, #1
    1f58:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1f5a:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    1f5c:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1f5e:	2106      	movs	r1, #6
    1f60:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    1f62:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1f64:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1f66:	4b5a      	ldr	r3, [pc, #360]	; (20d0 <STACK_SIZE+0xd0>)
    1f68:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1f6a:	2005      	movs	r0, #5
    1f6c:	4b59      	ldr	r3, [pc, #356]	; (20d4 <STACK_SIZE+0xd4>)
    1f6e:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1f70:	4954      	ldr	r1, [pc, #336]	; (20c4 <STACK_SIZE+0xc4>)
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1f72:	2202      	movs	r2, #2

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1f74:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1f76:	421a      	tst	r2, r3
    1f78:	d0fc      	beq.n	1f74 <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1f7a:	4952      	ldr	r1, [pc, #328]	; (20c4 <STACK_SIZE+0xc4>)
    1f7c:	8a8a      	ldrh	r2, [r1, #20]
    1f7e:	2380      	movs	r3, #128	; 0x80
    1f80:	4313      	orrs	r3, r2
    1f82:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    1f84:	4c54      	ldr	r4, [pc, #336]	; (20d8 <STACK_SIZE+0xd8>)
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    1f86:	6823      	ldr	r3, [r4, #0]
    1f88:	04da      	lsls	r2, r3, #19
    1f8a:	6988      	ldr	r0, [r1, #24]
    1f8c:	0e52      	lsrs	r2, r2, #25
    1f8e:	0412      	lsls	r2, r2, #16
    1f90:	4b52      	ldr	r3, [pc, #328]	; (20dc <STACK_SIZE+0xdc>)
    1f92:	4003      	ands	r3, r0
    1f94:	4313      	orrs	r3, r2
    1f96:	618b      	str	r3, [r1, #24]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    1f98:	a80a      	add	r0, sp, #40	; 0x28
    1f9a:	2301      	movs	r3, #1
    1f9c:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    1f9e:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
	config->on_demand           = true;
    1fa0:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1fa2:	2207      	movs	r2, #7
    1fa4:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    1fa6:	2500      	movs	r5, #0
    1fa8:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1faa:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1fac:	4b4c      	ldr	r3, [pc, #304]	; (20e0 <STACK_SIZE+0xe0>)
    1fae:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1fb0:	2004      	movs	r0, #4
    1fb2:	4b48      	ldr	r3, [pc, #288]	; (20d4 <STACK_SIZE+0xd4>)
    1fb4:	4798      	blx	r3
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1fb6:	ab05      	add	r3, sp, #20
    1fb8:	2200      	movs	r2, #0
    1fba:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1fbc:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1fbe:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1fc0:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
	config->fine_value      = 0xff / 4; /* Midpoint */
    1fc2:	213f      	movs	r1, #63	; 0x3f
    1fc4:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1fc6:	393b      	subs	r1, #59	; 0x3b
    1fc8:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1fca:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1fcc:	6823      	ldr	r3, [r4, #0]
    1fce:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1fd0:	2b3f      	cmp	r3, #63	; 0x3f
    1fd2:	d100      	bne.n	1fd6 <system_clock_init+0xc6>
		coarse = 0x1f;
    1fd4:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
    1fd6:	a805      	add	r0, sp, #20
    1fd8:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1fda:	23b7      	movs	r3, #183	; 0xb7
    1fdc:	00db      	lsls	r3, r3, #3
    1fde:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1fe0:	2307      	movs	r3, #7
    1fe2:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1fe4:	3338      	adds	r3, #56	; 0x38
    1fe6:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1fe8:	4b3e      	ldr	r3, [pc, #248]	; (20e4 <STACK_SIZE+0xe4>)
    1fea:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1fec:	a804      	add	r0, sp, #16
    1fee:	2500      	movs	r5, #0
    1ff0:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1ff2:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1ff4:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1ff6:	4b3c      	ldr	r3, [pc, #240]	; (20e8 <STACK_SIZE+0xe8>)
    1ff8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1ffa:	2006      	movs	r0, #6
    1ffc:	4b35      	ldr	r3, [pc, #212]	; (20d4 <STACK_SIZE+0xd4>)
    1ffe:	4699      	mov	r9, r3
    2000:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2002:	4b3a      	ldr	r3, [pc, #232]	; (20ec <STACK_SIZE+0xec>)
    2004:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2006:	ac01      	add	r4, sp, #4
    2008:	2601      	movs	r6, #1
    200a:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    200c:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    200e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2010:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2012:	2305      	movs	r3, #5
    2014:	7023      	strb	r3, [r4, #0]
    2016:	0021      	movs	r1, r4
    2018:	2001      	movs	r0, #1
    201a:	4b35      	ldr	r3, [pc, #212]	; (20f0 <STACK_SIZE+0xf0>)
    201c:	4698      	mov	r8, r3
    201e:	4798      	blx	r3
    2020:	2001      	movs	r0, #1
    2022:	4f34      	ldr	r7, [pc, #208]	; (20f4 <STACK_SIZE+0xf4>)
    2024:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    2026:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    2028:	7265      	strb	r5, [r4, #9]
    202a:	2304      	movs	r3, #4
    202c:	7023      	strb	r3, [r4, #0]
    202e:	331c      	adds	r3, #28
    2030:	469a      	mov	sl, r3
    2032:	6063      	str	r3, [r4, #4]
    2034:	7226      	strb	r6, [r4, #8]
    2036:	0021      	movs	r1, r4
    2038:	2002      	movs	r0, #2
    203a:	47c0      	blx	r8
    203c:	2002      	movs	r0, #2
    203e:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2040:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    2042:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2044:	2306      	movs	r3, #6
    2046:	7023      	strb	r3, [r4, #0]
#endif
	config->run_in_standby     = false;
    2048:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    204a:	7265      	strb	r5, [r4, #9]
    204c:	0021      	movs	r1, r4
    204e:	2003      	movs	r0, #3
    2050:	47c0      	blx	r8
    2052:	2003      	movs	r0, #3
    2054:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    2056:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2058:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    205a:	7265      	strb	r5, [r4, #9]
    205c:	2303      	movs	r3, #3
    205e:	7023      	strb	r3, [r4, #0]
    2060:	4653      	mov	r3, sl
    2062:	6063      	str	r3, [r4, #4]
    2064:	0021      	movs	r1, r4
    2066:	2004      	movs	r0, #4
    2068:	47c0      	blx	r8
    206a:	2004      	movs	r0, #4
    206c:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    206e:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2070:	0021      	movs	r1, r4
    2072:	2000      	movs	r0, #0
    2074:	4b15      	ldr	r3, [pc, #84]	; (20cc <STACK_SIZE+0xcc>)
    2076:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    2078:	2000      	movs	r0, #0
    207a:	4b1f      	ldr	r3, [pc, #124]	; (20f8 <STACK_SIZE+0xf8>)
    207c:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    207e:	2007      	movs	r0, #7
    2080:	47c8      	blx	r9

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2082:	4910      	ldr	r1, [pc, #64]	; (20c4 <STACK_SIZE+0xc4>)


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2084:	22d0      	movs	r2, #208	; 0xd0

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2086:	68cb      	ldr	r3, [r1, #12]


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2088:	4013      	ands	r3, r2
    208a:	2bd0      	cmp	r3, #208	; 0xd0
    208c:	d1fb      	bne.n	2086 <STACK_SIZE+0x86>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    208e:	4a1b      	ldr	r2, [pc, #108]	; (20fc <STACK_SIZE+0xfc>)
    2090:	2300      	movs	r3, #0
    2092:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    2094:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    2096:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    2098:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    209a:	a901      	add	r1, sp, #4
    209c:	2201      	movs	r2, #1
    209e:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    20a0:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    20a2:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    20a4:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    20a6:	3307      	adds	r3, #7
    20a8:	700b      	strb	r3, [r1, #0]
    20aa:	2000      	movs	r0, #0
    20ac:	4b10      	ldr	r3, [pc, #64]	; (20f0 <STACK_SIZE+0xf0>)
    20ae:	4798      	blx	r3
    20b0:	2000      	movs	r0, #0
    20b2:	4b10      	ldr	r3, [pc, #64]	; (20f4 <STACK_SIZE+0xf4>)
    20b4:	4798      	blx	r3
#endif
}
    20b6:	b010      	add	sp, #64	; 0x40
    20b8:	bc1c      	pop	{r2, r3, r4}
    20ba:	4690      	mov	r8, r2
    20bc:	4699      	mov	r9, r3
    20be:	46a2      	mov	sl, r4
    20c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20c2:	46c0      	nop			; (mov r8, r8)
    20c4:	40000800 	.word	0x40000800
    20c8:	41004000 	.word	0x41004000
    20cc:	00002339 	.word	0x00002339
    20d0:	00001d0d 	.word	0x00001d0d
    20d4:	00001e69 	.word	0x00001e69
    20d8:	00806024 	.word	0x00806024
    20dc:	ff80ffff 	.word	0xff80ffff
    20e0:	00001c85 	.word	0x00001c85
    20e4:	00001de5 	.word	0x00001de5
    20e8:	00001c49 	.word	0x00001c49
    20ec:	00002101 	.word	0x00002101
    20f0:	00002125 	.word	0x00002125
    20f4:	000021dd 	.word	0x000021dd
    20f8:	000022ad 	.word	0x000022ad
    20fc:	40000400 	.word	0x40000400

00002100 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    2100:	4a06      	ldr	r2, [pc, #24]	; (211c <system_gclk_init+0x1c>)
    2102:	6991      	ldr	r1, [r2, #24]
    2104:	2308      	movs	r3, #8
    2106:	430b      	orrs	r3, r1
    2108:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    210a:	2201      	movs	r2, #1
    210c:	4b04      	ldr	r3, [pc, #16]	; (2120 <system_gclk_init+0x20>)
    210e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2110:	0019      	movs	r1, r3
    2112:	780b      	ldrb	r3, [r1, #0]
    2114:	4213      	tst	r3, r2
    2116:	d1fc      	bne.n	2112 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2118:	4770      	bx	lr
    211a:	46c0      	nop			; (mov r8, r8)
    211c:	40000400 	.word	0x40000400
    2120:	40000c00 	.word	0x40000c00

00002124 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2124:	b570      	push	{r4, r5, r6, lr}
    2126:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2128:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    212a:	780c      	ldrb	r4, [r1, #0]
    212c:	0224      	lsls	r4, r4, #8
    212e:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2130:	784b      	ldrb	r3, [r1, #1]
    2132:	2b00      	cmp	r3, #0
    2134:	d002      	beq.n	213c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2136:	2380      	movs	r3, #128	; 0x80
    2138:	02db      	lsls	r3, r3, #11
    213a:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    213c:	7a4b      	ldrb	r3, [r1, #9]
    213e:	2b00      	cmp	r3, #0
    2140:	d002      	beq.n	2148 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2142:	2380      	movs	r3, #128	; 0x80
    2144:	031b      	lsls	r3, r3, #12
    2146:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2148:	6848      	ldr	r0, [r1, #4]
    214a:	2801      	cmp	r0, #1
    214c:	d918      	bls.n	2180 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    214e:	1e43      	subs	r3, r0, #1
    2150:	4218      	tst	r0, r3
    2152:	d110      	bne.n	2176 <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2154:	2802      	cmp	r0, #2
    2156:	d906      	bls.n	2166 <system_gclk_gen_set_config+0x42>
    2158:	2302      	movs	r3, #2
    215a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    215c:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    215e:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2160:	4298      	cmp	r0, r3
    2162:	d8fb      	bhi.n	215c <system_gclk_gen_set_config+0x38>
    2164:	e000      	b.n	2168 <system_gclk_gen_set_config+0x44>
    2166:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2168:	0212      	lsls	r2, r2, #8
    216a:	4332      	orrs	r2, r6
    216c:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    216e:	2380      	movs	r3, #128	; 0x80
    2170:	035b      	lsls	r3, r3, #13
    2172:	431c      	orrs	r4, r3
    2174:	e004      	b.n	2180 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    2176:	0205      	lsls	r5, r0, #8
    2178:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    217a:	2380      	movs	r3, #128	; 0x80
    217c:	029b      	lsls	r3, r3, #10
    217e:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2180:	7a0b      	ldrb	r3, [r1, #8]
    2182:	2b00      	cmp	r3, #0
    2184:	d002      	beq.n	218c <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2186:	2380      	movs	r3, #128	; 0x80
    2188:	039b      	lsls	r3, r3, #14
    218a:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    218c:	4a0f      	ldr	r2, [pc, #60]	; (21cc <system_gclk_gen_set_config+0xa8>)
    218e:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    2190:	b25b      	sxtb	r3, r3
    2192:	2b00      	cmp	r3, #0
    2194:	dbfb      	blt.n	218e <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2196:	4b0e      	ldr	r3, [pc, #56]	; (21d0 <system_gclk_gen_set_config+0xac>)
    2198:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    219a:	4b0e      	ldr	r3, [pc, #56]	; (21d4 <system_gclk_gen_set_config+0xb0>)
    219c:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    219e:	4a0b      	ldr	r2, [pc, #44]	; (21cc <system_gclk_gen_set_config+0xa8>)
    21a0:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    21a2:	b25b      	sxtb	r3, r3
    21a4:	2b00      	cmp	r3, #0
    21a6:	dbfb      	blt.n	21a0 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    21a8:	4b08      	ldr	r3, [pc, #32]	; (21cc <system_gclk_gen_set_config+0xa8>)
    21aa:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    21ac:	001a      	movs	r2, r3
    21ae:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    21b0:	b25b      	sxtb	r3, r3
    21b2:	2b00      	cmp	r3, #0
    21b4:	dbfb      	blt.n	21ae <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    21b6:	4a05      	ldr	r2, [pc, #20]	; (21cc <system_gclk_gen_set_config+0xa8>)
    21b8:	6851      	ldr	r1, [r2, #4]
    21ba:	2380      	movs	r3, #128	; 0x80
    21bc:	025b      	lsls	r3, r3, #9
    21be:	400b      	ands	r3, r1
    21c0:	431c      	orrs	r4, r3
    21c2:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    21c4:	4b04      	ldr	r3, [pc, #16]	; (21d8 <system_gclk_gen_set_config+0xb4>)
    21c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    21c8:	bd70      	pop	{r4, r5, r6, pc}
    21ca:	46c0      	nop			; (mov r8, r8)
    21cc:	40000c00 	.word	0x40000c00
    21d0:	00000a09 	.word	0x00000a09
    21d4:	40000c08 	.word	0x40000c08
    21d8:	00000a49 	.word	0x00000a49

000021dc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    21dc:	b510      	push	{r4, lr}
    21de:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    21e0:	4a0b      	ldr	r2, [pc, #44]	; (2210 <system_gclk_gen_enable+0x34>)
    21e2:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    21e4:	b25b      	sxtb	r3, r3
    21e6:	2b00      	cmp	r3, #0
    21e8:	dbfb      	blt.n	21e2 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    21ea:	4b0a      	ldr	r3, [pc, #40]	; (2214 <system_gclk_gen_enable+0x38>)
    21ec:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    21ee:	4b0a      	ldr	r3, [pc, #40]	; (2218 <system_gclk_gen_enable+0x3c>)
    21f0:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    21f2:	4a07      	ldr	r2, [pc, #28]	; (2210 <system_gclk_gen_enable+0x34>)
    21f4:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    21f6:	b25b      	sxtb	r3, r3
    21f8:	2b00      	cmp	r3, #0
    21fa:	dbfb      	blt.n	21f4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    21fc:	4a04      	ldr	r2, [pc, #16]	; (2210 <system_gclk_gen_enable+0x34>)
    21fe:	6853      	ldr	r3, [r2, #4]
    2200:	2180      	movs	r1, #128	; 0x80
    2202:	0249      	lsls	r1, r1, #9
    2204:	430b      	orrs	r3, r1
    2206:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2208:	4b04      	ldr	r3, [pc, #16]	; (221c <system_gclk_gen_enable+0x40>)
    220a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    220c:	bd10      	pop	{r4, pc}
    220e:	46c0      	nop			; (mov r8, r8)
    2210:	40000c00 	.word	0x40000c00
    2214:	00000a09 	.word	0x00000a09
    2218:	40000c04 	.word	0x40000c04
    221c:	00000a49 	.word	0x00000a49

00002220 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2220:	b570      	push	{r4, r5, r6, lr}
    2222:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2224:	4a1a      	ldr	r2, [pc, #104]	; (2290 <system_gclk_gen_get_hz+0x70>)
    2226:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    2228:	b25b      	sxtb	r3, r3
    222a:	2b00      	cmp	r3, #0
    222c:	dbfb      	blt.n	2226 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    222e:	4b19      	ldr	r3, [pc, #100]	; (2294 <system_gclk_gen_get_hz+0x74>)
    2230:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2232:	4b19      	ldr	r3, [pc, #100]	; (2298 <system_gclk_gen_get_hz+0x78>)
    2234:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2236:	4a16      	ldr	r2, [pc, #88]	; (2290 <system_gclk_gen_get_hz+0x70>)
    2238:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    223a:	b25b      	sxtb	r3, r3
    223c:	2b00      	cmp	r3, #0
    223e:	dbfb      	blt.n	2238 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2240:	4e13      	ldr	r6, [pc, #76]	; (2290 <system_gclk_gen_get_hz+0x70>)
    2242:	6870      	ldr	r0, [r6, #4]
    2244:	04c0      	lsls	r0, r0, #19
    2246:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2248:	4b14      	ldr	r3, [pc, #80]	; (229c <system_gclk_gen_get_hz+0x7c>)
    224a:	4798      	blx	r3
    224c:	0005      	movs	r5, r0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    224e:	4b12      	ldr	r3, [pc, #72]	; (2298 <system_gclk_gen_get_hz+0x78>)
    2250:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2252:	6876      	ldr	r6, [r6, #4]
    2254:	02f6      	lsls	r6, r6, #11
    2256:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2258:	4b11      	ldr	r3, [pc, #68]	; (22a0 <system_gclk_gen_get_hz+0x80>)
    225a:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    225c:	4a0c      	ldr	r2, [pc, #48]	; (2290 <system_gclk_gen_get_hz+0x70>)
    225e:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    2260:	b25b      	sxtb	r3, r3
    2262:	2b00      	cmp	r3, #0
    2264:	dbfb      	blt.n	225e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2266:	4b0a      	ldr	r3, [pc, #40]	; (2290 <system_gclk_gen_get_hz+0x70>)
    2268:	689c      	ldr	r4, [r3, #8]
    226a:	0224      	lsls	r4, r4, #8
    226c:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    226e:	4b0d      	ldr	r3, [pc, #52]	; (22a4 <system_gclk_gen_get_hz+0x84>)
    2270:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2272:	2e00      	cmp	r6, #0
    2274:	d107      	bne.n	2286 <system_gclk_gen_get_hz+0x66>
    2276:	2c01      	cmp	r4, #1
    2278:	d907      	bls.n	228a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    227a:	0021      	movs	r1, r4
    227c:	0028      	movs	r0, r5
    227e:	4b0a      	ldr	r3, [pc, #40]	; (22a8 <system_gclk_gen_get_hz+0x88>)
    2280:	4798      	blx	r3
    2282:	0005      	movs	r5, r0
    2284:	e001      	b.n	228a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2286:	3401      	adds	r4, #1
    2288:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    228a:	0028      	movs	r0, r5
    228c:	bd70      	pop	{r4, r5, r6, pc}
    228e:	46c0      	nop			; (mov r8, r8)
    2290:	40000c00 	.word	0x40000c00
    2294:	00000a09 	.word	0x00000a09
    2298:	40000c04 	.word	0x40000c04
    229c:	00001bb9 	.word	0x00001bb9
    22a0:	40000c08 	.word	0x40000c08
    22a4:	00000a49 	.word	0x00000a49
    22a8:	00005f51 	.word	0x00005f51

000022ac <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    22ac:	b510      	push	{r4, lr}
    22ae:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    22b0:	4b06      	ldr	r3, [pc, #24]	; (22cc <system_gclk_chan_enable+0x20>)
    22b2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    22b4:	4b06      	ldr	r3, [pc, #24]	; (22d0 <system_gclk_chan_enable+0x24>)
    22b6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    22b8:	4a06      	ldr	r2, [pc, #24]	; (22d4 <system_gclk_chan_enable+0x28>)
    22ba:	8851      	ldrh	r1, [r2, #2]
    22bc:	2380      	movs	r3, #128	; 0x80
    22be:	01db      	lsls	r3, r3, #7
    22c0:	430b      	orrs	r3, r1
    22c2:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    22c4:	4b04      	ldr	r3, [pc, #16]	; (22d8 <system_gclk_chan_enable+0x2c>)
    22c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    22c8:	bd10      	pop	{r4, pc}
    22ca:	46c0      	nop			; (mov r8, r8)
    22cc:	00000a09 	.word	0x00000a09
    22d0:	40000c02 	.word	0x40000c02
    22d4:	40000c00 	.word	0x40000c00
    22d8:	00000a49 	.word	0x00000a49

000022dc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    22dc:	b510      	push	{r4, lr}
    22de:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    22e0:	4b0f      	ldr	r3, [pc, #60]	; (2320 <system_gclk_chan_disable+0x44>)
    22e2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    22e4:	4b0f      	ldr	r3, [pc, #60]	; (2324 <system_gclk_chan_disable+0x48>)
    22e6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    22e8:	4b0f      	ldr	r3, [pc, #60]	; (2328 <system_gclk_chan_disable+0x4c>)
    22ea:	885a      	ldrh	r2, [r3, #2]
    22ec:	0512      	lsls	r2, r2, #20
    22ee:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    22f0:	8859      	ldrh	r1, [r3, #2]
    22f2:	4a0e      	ldr	r2, [pc, #56]	; (232c <system_gclk_chan_disable+0x50>)
    22f4:	400a      	ands	r2, r1
    22f6:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    22f8:	8859      	ldrh	r1, [r3, #2]
    22fa:	4a0d      	ldr	r2, [pc, #52]	; (2330 <system_gclk_chan_disable+0x54>)
    22fc:	400a      	ands	r2, r1
    22fe:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2300:	0019      	movs	r1, r3
    2302:	2280      	movs	r2, #128	; 0x80
    2304:	01d2      	lsls	r2, r2, #7
    2306:	884b      	ldrh	r3, [r1, #2]
    2308:	4213      	tst	r3, r2
    230a:	d1fc      	bne.n	2306 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    230c:	4906      	ldr	r1, [pc, #24]	; (2328 <system_gclk_chan_disable+0x4c>)
    230e:	884c      	ldrh	r4, [r1, #2]
    2310:	0202      	lsls	r2, r0, #8
    2312:	4b06      	ldr	r3, [pc, #24]	; (232c <system_gclk_chan_disable+0x50>)
    2314:	4023      	ands	r3, r4
    2316:	4313      	orrs	r3, r2
    2318:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    231a:	4b06      	ldr	r3, [pc, #24]	; (2334 <system_gclk_chan_disable+0x58>)
    231c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    231e:	bd10      	pop	{r4, pc}
    2320:	00000a09 	.word	0x00000a09
    2324:	40000c02 	.word	0x40000c02
    2328:	40000c00 	.word	0x40000c00
    232c:	fffff0ff 	.word	0xfffff0ff
    2330:	ffffbfff 	.word	0xffffbfff
    2334:	00000a49 	.word	0x00000a49

00002338 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    2338:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    233a:	780c      	ldrb	r4, [r1, #0]
    233c:	0224      	lsls	r4, r4, #8
    233e:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    2340:	4b02      	ldr	r3, [pc, #8]	; (234c <system_gclk_chan_set_config+0x14>)
    2342:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2344:	b2a4      	uxth	r4, r4
    2346:	4b02      	ldr	r3, [pc, #8]	; (2350 <system_gclk_chan_set_config+0x18>)
    2348:	805c      	strh	r4, [r3, #2]
}
    234a:	bd10      	pop	{r4, pc}
    234c:	000022dd 	.word	0x000022dd
    2350:	40000c00 	.word	0x40000c00

00002354 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2354:	b510      	push	{r4, lr}
    2356:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2358:	4b06      	ldr	r3, [pc, #24]	; (2374 <system_gclk_chan_get_hz+0x20>)
    235a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    235c:	4b06      	ldr	r3, [pc, #24]	; (2378 <system_gclk_chan_get_hz+0x24>)
    235e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2360:	4b06      	ldr	r3, [pc, #24]	; (237c <system_gclk_chan_get_hz+0x28>)
    2362:	885c      	ldrh	r4, [r3, #2]
    2364:	0524      	lsls	r4, r4, #20
    2366:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2368:	4b05      	ldr	r3, [pc, #20]	; (2380 <system_gclk_chan_get_hz+0x2c>)
    236a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    236c:	0020      	movs	r0, r4
    236e:	4b05      	ldr	r3, [pc, #20]	; (2384 <system_gclk_chan_get_hz+0x30>)
    2370:	4798      	blx	r3
}
    2372:	bd10      	pop	{r4, pc}
    2374:	00000a09 	.word	0x00000a09
    2378:	40000c02 	.word	0x40000c02
    237c:	40000c00 	.word	0x40000c00
    2380:	00000a49 	.word	0x00000a49
    2384:	00002221 	.word	0x00002221

00002388 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2388:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    238a:	78d3      	ldrb	r3, [r2, #3]
    238c:	2b00      	cmp	r3, #0
    238e:	d11e      	bne.n	23ce <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2390:	7813      	ldrb	r3, [r2, #0]
    2392:	2b80      	cmp	r3, #128	; 0x80
    2394:	d004      	beq.n	23a0 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2396:	061b      	lsls	r3, r3, #24
    2398:	2480      	movs	r4, #128	; 0x80
    239a:	0264      	lsls	r4, r4, #9
    239c:	4323      	orrs	r3, r4
    239e:	e000      	b.n	23a2 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    23a0:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    23a2:	7854      	ldrb	r4, [r2, #1]
    23a4:	2502      	movs	r5, #2
    23a6:	43ac      	bics	r4, r5
    23a8:	d10a      	bne.n	23c0 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    23aa:	7894      	ldrb	r4, [r2, #2]
    23ac:	2c00      	cmp	r4, #0
    23ae:	d103      	bne.n	23b8 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    23b0:	2480      	movs	r4, #128	; 0x80
    23b2:	02a4      	lsls	r4, r4, #10
    23b4:	4323      	orrs	r3, r4
    23b6:	e002      	b.n	23be <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    23b8:	24c0      	movs	r4, #192	; 0xc0
    23ba:	02e4      	lsls	r4, r4, #11
    23bc:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    23be:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    23c0:	7854      	ldrb	r4, [r2, #1]
    23c2:	3c01      	subs	r4, #1
    23c4:	2c01      	cmp	r4, #1
    23c6:	d812      	bhi.n	23ee <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    23c8:	4c18      	ldr	r4, [pc, #96]	; (242c <_system_pinmux_config+0xa4>)
    23ca:	4023      	ands	r3, r4
    23cc:	e00f      	b.n	23ee <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    23ce:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    23d0:	040b      	lsls	r3, r1, #16
    23d2:	0c1b      	lsrs	r3, r3, #16
    23d4:	24a0      	movs	r4, #160	; 0xa0
    23d6:	05e4      	lsls	r4, r4, #23
    23d8:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    23da:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    23dc:	0c0b      	lsrs	r3, r1, #16
    23de:	24d0      	movs	r4, #208	; 0xd0
    23e0:	0624      	lsls	r4, r4, #24
    23e2:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    23e4:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    23e6:	78d3      	ldrb	r3, [r2, #3]
    23e8:	2b00      	cmp	r3, #0
    23ea:	d018      	beq.n	241e <_system_pinmux_config+0x96>
    23ec:	e01c      	b.n	2428 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    23ee:	040c      	lsls	r4, r1, #16
    23f0:	0c24      	lsrs	r4, r4, #16
    23f2:	25a0      	movs	r5, #160	; 0xa0
    23f4:	05ed      	lsls	r5, r5, #23
    23f6:	432c      	orrs	r4, r5
    23f8:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    23fa:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    23fc:	0c0c      	lsrs	r4, r1, #16
    23fe:	25d0      	movs	r5, #208	; 0xd0
    2400:	062d      	lsls	r5, r5, #24
    2402:	432c      	orrs	r4, r5
    2404:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2406:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2408:	78d4      	ldrb	r4, [r2, #3]
    240a:	2c00      	cmp	r4, #0
    240c:	d10c      	bne.n	2428 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    240e:	035b      	lsls	r3, r3, #13
    2410:	d505      	bpl.n	241e <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2412:	7893      	ldrb	r3, [r2, #2]
    2414:	2b01      	cmp	r3, #1
    2416:	d101      	bne.n	241c <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    2418:	6181      	str	r1, [r0, #24]
    241a:	e000      	b.n	241e <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    241c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    241e:	7853      	ldrb	r3, [r2, #1]
    2420:	3b01      	subs	r3, #1
    2422:	2b01      	cmp	r3, #1
    2424:	d800      	bhi.n	2428 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    2426:	6081      	str	r1, [r0, #8]
		}
	}
}
    2428:	bd30      	pop	{r4, r5, pc}
    242a:	46c0      	nop			; (mov r8, r8)
    242c:	fffbffff 	.word	0xfffbffff

00002430 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2430:	b510      	push	{r4, lr}
    2432:	0003      	movs	r3, r0
    2434:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2436:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2438:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    243a:	2900      	cmp	r1, #0
    243c:	d104      	bne.n	2448 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    243e:	0958      	lsrs	r0, r3, #5
    2440:	01c0      	lsls	r0, r0, #7
    2442:	4905      	ldr	r1, [pc, #20]	; (2458 <system_pinmux_pin_set_config+0x28>)
    2444:	468c      	mov	ip, r1
    2446:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    2448:	211f      	movs	r1, #31
    244a:	400b      	ands	r3, r1
    244c:	391e      	subs	r1, #30
    244e:	4099      	lsls	r1, r3
    2450:	4b02      	ldr	r3, [pc, #8]	; (245c <system_pinmux_pin_set_config+0x2c>)
    2452:	4798      	blx	r3
}
    2454:	bd10      	pop	{r4, pc}
    2456:	46c0      	nop			; (mov r8, r8)
    2458:	41004400 	.word	0x41004400
    245c:	00002389 	.word	0x00002389

00002460 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2460:	4770      	bx	lr
    2462:	46c0      	nop			; (mov r8, r8)

00002464 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2464:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2466:	4b05      	ldr	r3, [pc, #20]	; (247c <system_init+0x18>)
    2468:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    246a:	4b05      	ldr	r3, [pc, #20]	; (2480 <system_init+0x1c>)
    246c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    246e:	4b05      	ldr	r3, [pc, #20]	; (2484 <system_init+0x20>)
    2470:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2472:	4b05      	ldr	r3, [pc, #20]	; (2488 <system_init+0x24>)
    2474:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2476:	4b05      	ldr	r3, [pc, #20]	; (248c <system_init+0x28>)
    2478:	4798      	blx	r3
}
    247a:	bd10      	pop	{r4, pc}
    247c:	00001f11 	.word	0x00001f11
    2480:	00000a79 	.word	0x00000a79
    2484:	00002461 	.word	0x00002461
    2488:	00000bf5 	.word	0x00000bf5
    248c:	00002461 	.word	0x00002461

00002490 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2490:	1c93      	adds	r3, r2, #2
    2492:	009b      	lsls	r3, r3, #2
    2494:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    2496:	2a02      	cmp	r2, #2
    2498:	d104      	bne.n	24a4 <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    249a:	7e02      	ldrb	r2, [r0, #24]
    249c:	2310      	movs	r3, #16
    249e:	4313      	orrs	r3, r2
    24a0:	7603      	strb	r3, [r0, #24]
    24a2:	e00b      	b.n	24bc <tc_register_callback+0x2c>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    24a4:	2a03      	cmp	r2, #3
    24a6:	d104      	bne.n	24b2 <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    24a8:	7e02      	ldrb	r2, [r0, #24]
    24aa:	2320      	movs	r3, #32
    24ac:	4313      	orrs	r3, r2
    24ae:	7603      	strb	r3, [r0, #24]
    24b0:	e004      	b.n	24bc <tc_register_callback+0x2c>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    24b2:	2301      	movs	r3, #1
    24b4:	4093      	lsls	r3, r2
    24b6:	7e02      	ldrb	r2, [r0, #24]
    24b8:	4313      	orrs	r3, r2
    24ba:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    24bc:	2000      	movs	r0, #0
    24be:	4770      	bx	lr

000024c0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    24c0:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    24c2:	0080      	lsls	r0, r0, #2
    24c4:	4b14      	ldr	r3, [pc, #80]	; (2518 <_tc_interrupt_handler+0x58>)
    24c6:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    24c8:	682b      	ldr	r3, [r5, #0]
    24ca:	7b9c      	ldrb	r4, [r3, #14]
    24cc:	7e2b      	ldrb	r3, [r5, #24]
    24ce:	401c      	ands	r4, r3
    24d0:	7e6b      	ldrb	r3, [r5, #25]
    24d2:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    24d4:	07e3      	lsls	r3, r4, #31
    24d6:	d505      	bpl.n	24e4 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    24d8:	0028      	movs	r0, r5
    24da:	68ab      	ldr	r3, [r5, #8]
    24dc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    24de:	2301      	movs	r3, #1
    24e0:	682a      	ldr	r2, [r5, #0]
    24e2:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    24e4:	07a3      	lsls	r3, r4, #30
    24e6:	d505      	bpl.n	24f4 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    24e8:	0028      	movs	r0, r5
    24ea:	68eb      	ldr	r3, [r5, #12]
    24ec:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    24ee:	2302      	movs	r3, #2
    24f0:	682a      	ldr	r2, [r5, #0]
    24f2:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    24f4:	06e3      	lsls	r3, r4, #27
    24f6:	d505      	bpl.n	2504 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    24f8:	0028      	movs	r0, r5
    24fa:	692b      	ldr	r3, [r5, #16]
    24fc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    24fe:	2310      	movs	r3, #16
    2500:	682a      	ldr	r2, [r5, #0]
    2502:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    2504:	06a3      	lsls	r3, r4, #26
    2506:	d505      	bpl.n	2514 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    2508:	0028      	movs	r0, r5
    250a:	696b      	ldr	r3, [r5, #20]
    250c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    250e:	682b      	ldr	r3, [r5, #0]
    2510:	2220      	movs	r2, #32
    2512:	739a      	strb	r2, [r3, #14]
	}
}
    2514:	bd70      	pop	{r4, r5, r6, pc}
    2516:	46c0      	nop			; (mov r8, r8)
    2518:	200007dc 	.word	0x200007dc

0000251c <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    251c:	b510      	push	{r4, lr}
    251e:	2000      	movs	r0, #0
    2520:	4b01      	ldr	r3, [pc, #4]	; (2528 <TC3_Handler+0xc>)
    2522:	4798      	blx	r3
    2524:	bd10      	pop	{r4, pc}
    2526:	46c0      	nop			; (mov r8, r8)
    2528:	000024c1 	.word	0x000024c1

0000252c <TC4_Handler>:
    252c:	b510      	push	{r4, lr}
    252e:	2001      	movs	r0, #1
    2530:	4b01      	ldr	r3, [pc, #4]	; (2538 <TC4_Handler+0xc>)
    2532:	4798      	blx	r3
    2534:	bd10      	pop	{r4, pc}
    2536:	46c0      	nop			; (mov r8, r8)
    2538:	000024c1 	.word	0x000024c1

0000253c <TC5_Handler>:
    253c:	b510      	push	{r4, lr}
    253e:	2002      	movs	r0, #2
    2540:	4b01      	ldr	r3, [pc, #4]	; (2548 <TC5_Handler+0xc>)
    2542:	4798      	blx	r3
    2544:	bd10      	pop	{r4, pc}
    2546:	46c0      	nop			; (mov r8, r8)
    2548:	000024c1 	.word	0x000024c1

0000254c <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    254c:	b530      	push	{r4, r5, lr}
    254e:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2550:	aa01      	add	r2, sp, #4
    2552:	4b0b      	ldr	r3, [pc, #44]	; (2580 <_tc_get_inst_index+0x34>)
    2554:	cb32      	ldmia	r3!, {r1, r4, r5}
    2556:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    2558:	9b01      	ldr	r3, [sp, #4]
    255a:	4298      	cmp	r0, r3
    255c:	d00a      	beq.n	2574 <_tc_get_inst_index+0x28>
    255e:	9b02      	ldr	r3, [sp, #8]
    2560:	4298      	cmp	r0, r3
    2562:	d005      	beq.n	2570 <_tc_get_inst_index+0x24>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    2564:	2300      	movs	r3, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    2566:	9a03      	ldr	r2, [sp, #12]
    2568:	4282      	cmp	r2, r0
    256a:	d105      	bne.n	2578 <_tc_get_inst_index+0x2c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    256c:	3302      	adds	r3, #2
    256e:	e002      	b.n	2576 <_tc_get_inst_index+0x2a>
    2570:	2301      	movs	r3, #1
    2572:	e000      	b.n	2576 <_tc_get_inst_index+0x2a>
    2574:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
    2576:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    2578:	0018      	movs	r0, r3
    257a:	b005      	add	sp, #20
    257c:	bd30      	pop	{r4, r5, pc}
    257e:	46c0      	nop			; (mov r8, r8)
    2580:	00008bbc 	.word	0x00008bbc

00002584 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    2584:	b5f0      	push	{r4, r5, r6, r7, lr}
    2586:	464f      	mov	r7, r9
    2588:	4646      	mov	r6, r8
    258a:	b4c0      	push	{r6, r7}
    258c:	b087      	sub	sp, #28
    258e:	0004      	movs	r4, r0
    2590:	000e      	movs	r6, r1
    2592:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    2594:	0008      	movs	r0, r1
    2596:	4b92      	ldr	r3, [pc, #584]	; (27e0 <tc_init+0x25c>)
    2598:	4798      	blx	r3
    259a:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    259c:	4d91      	ldr	r5, [pc, #580]	; (27e4 <tc_init+0x260>)
    259e:	0029      	movs	r1, r5
    25a0:	310c      	adds	r1, #12
    25a2:	2203      	movs	r2, #3
    25a4:	a805      	add	r0, sp, #20
    25a6:	4f90      	ldr	r7, [pc, #576]	; (27e8 <tc_init+0x264>)
    25a8:	47b8      	blx	r7
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    25aa:	0029      	movs	r1, r5
    25ac:	3110      	adds	r1, #16
    25ae:	2206      	movs	r2, #6
    25b0:	a803      	add	r0, sp, #12
    25b2:	47b8      	blx	r7
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    25b4:	2300      	movs	r3, #0
    25b6:	60a3      	str	r3, [r4, #8]
    25b8:	60e3      	str	r3, [r4, #12]
    25ba:	6123      	str	r3, [r4, #16]
    25bc:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    25be:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    25c0:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    25c2:	464b      	mov	r3, r9
    25c4:	009a      	lsls	r2, r3, #2
    25c6:	4b89      	ldr	r3, [pc, #548]	; (27ec <tc_init+0x268>)
    25c8:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    25ca:	6026      	str	r6, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    25cc:	4643      	mov	r3, r8
    25ce:	789b      	ldrb	r3, [r3, #2]
    25d0:	2b08      	cmp	r3, #8
    25d2:	d104      	bne.n	25de <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    25d4:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    25d6:	464a      	mov	r2, r9
    25d8:	07d2      	lsls	r2, r2, #31
    25da:	d400      	bmi.n	25de <tc_init+0x5a>
    25dc:	e0fb      	b.n	27d6 <tc_init+0x252>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    25de:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    25e0:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    25e2:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    25e4:	07db      	lsls	r3, r3, #31
    25e6:	d500      	bpl.n	25ea <tc_init+0x66>
    25e8:	e0f5      	b.n	27d6 <tc_init+0x252>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    25ea:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    25ec:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    25ee:	06db      	lsls	r3, r3, #27
    25f0:	d500      	bpl.n	25f4 <tc_init+0x70>
    25f2:	e0f0      	b.n	27d6 <tc_init+0x252>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    25f4:	8833      	ldrh	r3, [r6, #0]
    25f6:	079b      	lsls	r3, r3, #30
    25f8:	d500      	bpl.n	25fc <tc_init+0x78>
    25fa:	e0ec      	b.n	27d6 <tc_init+0x252>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    25fc:	4643      	mov	r3, r8
    25fe:	7c1b      	ldrb	r3, [r3, #16]
    2600:	2b00      	cmp	r3, #0
    2602:	d00c      	beq.n	261e <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2604:	a902      	add	r1, sp, #8
    2606:	2301      	movs	r3, #1
    2608:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    260a:	2200      	movs	r2, #0
    260c:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    260e:	4642      	mov	r2, r8
    2610:	7e12      	ldrb	r2, [r2, #24]
    2612:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2614:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2616:	4643      	mov	r3, r8
    2618:	7d18      	ldrb	r0, [r3, #20]
    261a:	4b75      	ldr	r3, [pc, #468]	; (27f0 <tc_init+0x26c>)
    261c:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    261e:	4643      	mov	r3, r8
    2620:	7f1b      	ldrb	r3, [r3, #28]
    2622:	2b00      	cmp	r3, #0
    2624:	d00d      	beq.n	2642 <tc_init+0xbe>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2626:	a902      	add	r1, sp, #8
    2628:	2301      	movs	r3, #1
    262a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    262c:	2200      	movs	r2, #0
    262e:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    2630:	4642      	mov	r2, r8
    2632:	6a52      	ldr	r2, [r2, #36]	; 0x24
    2634:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2636:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2638:	4643      	mov	r3, r8
    263a:	6a1b      	ldr	r3, [r3, #32]
    263c:	b2d8      	uxtb	r0, r3
    263e:	4b6c      	ldr	r3, [pc, #432]	; (27f0 <tc_init+0x26c>)
    2640:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2642:	496c      	ldr	r1, [pc, #432]	; (27f4 <tc_init+0x270>)
    2644:	6a0b      	ldr	r3, [r1, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    2646:	464a      	mov	r2, r9
    2648:	0052      	lsls	r2, r2, #1
    264a:	a803      	add	r0, sp, #12
    264c:	5a12      	ldrh	r2, [r2, r0]
    264e:	4313      	orrs	r3, r2
    2650:	620b      	str	r3, [r1, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    2652:	4643      	mov	r3, r8
    2654:	789b      	ldrb	r3, [r3, #2]
    2656:	2b08      	cmp	r3, #8
    2658:	d106      	bne.n	2668 <tc_init+0xe4>
    265a:	6a0b      	ldr	r3, [r1, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    265c:	464a      	mov	r2, r9
    265e:	3201      	adds	r2, #1
    2660:	0052      	lsls	r2, r2, #1
    2662:	5a12      	ldrh	r2, [r2, r0]
    2664:	4313      	orrs	r3, r2
    2666:	620b      	str	r3, [r1, #32]
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    2668:	a901      	add	r1, sp, #4
    266a:	4643      	mov	r3, r8
    266c:	781b      	ldrb	r3, [r3, #0]
    266e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    2670:	ab05      	add	r3, sp, #20
    2672:	464a      	mov	r2, r9
    2674:	5c9d      	ldrb	r5, [r3, r2]
    2676:	0028      	movs	r0, r5
    2678:	4b5f      	ldr	r3, [pc, #380]	; (27f8 <tc_init+0x274>)
    267a:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    267c:	0028      	movs	r0, r5
    267e:	4b5f      	ldr	r3, [pc, #380]	; (27fc <tc_init+0x278>)
    2680:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    2682:	4643      	mov	r3, r8
    2684:	7898      	ldrb	r0, [r3, #2]
    2686:	799b      	ldrb	r3, [r3, #6]
    2688:	0002      	movs	r2, r0
    268a:	431a      	orrs	r2, r3
    268c:	4643      	mov	r3, r8
    268e:	8918      	ldrh	r0, [r3, #8]
    2690:	889b      	ldrh	r3, [r3, #4]
    2692:	4303      	orrs	r3, r0
    2694:	431a      	orrs	r2, r3
    2696:	0010      	movs	r0, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    2698:	4643      	mov	r3, r8
    269a:	785b      	ldrb	r3, [r3, #1]
    269c:	2b00      	cmp	r3, #0
    269e:	d002      	beq.n	26a6 <tc_init+0x122>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    26a0:	2380      	movs	r3, #128	; 0x80
    26a2:	011b      	lsls	r3, r3, #4
    26a4:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26a6:	6821      	ldr	r1, [r4, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    26a8:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26aa:	7bcb      	ldrb	r3, [r1, #15]
    26ac:	4393      	bics	r3, r2
    26ae:	d1fc      	bne.n	26aa <tc_init+0x126>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    26b0:	8030      	strh	r0, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    26b2:	4643      	mov	r3, r8
    26b4:	7b58      	ldrb	r0, [r3, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    26b6:	1e43      	subs	r3, r0, #1
    26b8:	4198      	sbcs	r0, r3
    26ba:	0080      	lsls	r0, r0, #2
	}

	if (config->count_direction) {
    26bc:	4643      	mov	r3, r8
    26be:	7b9b      	ldrb	r3, [r3, #14]
    26c0:	2b00      	cmp	r3, #0
    26c2:	d001      	beq.n	26c8 <tc_init+0x144>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    26c4:	2301      	movs	r3, #1
    26c6:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26c8:	6821      	ldr	r1, [r4, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    26ca:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26cc:	7bcb      	ldrb	r3, [r1, #15]
    26ce:	4393      	bics	r3, r2
    26d0:	d1fc      	bne.n	26cc <tc_init+0x148>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    26d2:	33ff      	adds	r3, #255	; 0xff
    26d4:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    26d6:	2800      	cmp	r0, #0
    26d8:	d005      	beq.n	26e6 <tc_init+0x162>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26da:	6821      	ldr	r1, [r4, #0]
		while (tc_is_syncing(module_inst)) {
    26dc:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26de:	7bcb      	ldrb	r3, [r1, #15]
    26e0:	4393      	bics	r3, r2
    26e2:	d1fc      	bne.n	26de <tc_init+0x15a>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    26e4:	7170      	strb	r0, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    26e6:	4643      	mov	r3, r8
    26e8:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    26ea:	7adb      	ldrb	r3, [r3, #11]
    26ec:	2b00      	cmp	r3, #0
    26ee:	d001      	beq.n	26f4 <tc_init+0x170>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    26f0:	2310      	movs	r3, #16
    26f2:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    26f4:	4643      	mov	r3, r8
    26f6:	7b1b      	ldrb	r3, [r3, #12]
    26f8:	2b00      	cmp	r3, #0
    26fa:	d001      	beq.n	2700 <tc_init+0x17c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    26fc:	2320      	movs	r3, #32
    26fe:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2700:	6821      	ldr	r1, [r4, #0]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2702:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2704:	7bcb      	ldrb	r3, [r1, #15]
    2706:	4393      	bics	r3, r2
    2708:	d1fc      	bne.n	2704 <tc_init+0x180>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    270a:	71b0      	strb	r0, [r6, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    270c:	6822      	ldr	r2, [r4, #0]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    270e:	217f      	movs	r1, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2710:	7bd3      	ldrb	r3, [r2, #15]
    2712:	438b      	bics	r3, r1
    2714:	d1fc      	bne.n	2710 <tc_init+0x18c>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    2716:	7923      	ldrb	r3, [r4, #4]
    2718:	2b04      	cmp	r3, #4
    271a:	d005      	beq.n	2728 <tc_init+0x1a4>
    271c:	2b08      	cmp	r3, #8
    271e:	d041      	beq.n	27a4 <tc_init+0x220>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    2720:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    2722:	2b00      	cmp	r3, #0
    2724:	d157      	bne.n	27d6 <tc_init+0x252>
    2726:	e024      	b.n	2772 <tc_init+0x1ee>
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    2728:	217f      	movs	r1, #127	; 0x7f
    272a:	7bd3      	ldrb	r3, [r2, #15]
    272c:	438b      	bics	r3, r1
    272e:	d1fc      	bne.n	272a <tc_init+0x1a6>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    2730:	3328      	adds	r3, #40	; 0x28
    2732:	4642      	mov	r2, r8
    2734:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    2736:	7433      	strb	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2738:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    273a:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    273c:	7bcb      	ldrb	r3, [r1, #15]
    273e:	4393      	bics	r3, r2
    2740:	d1fc      	bne.n	273c <tc_init+0x1b8>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    2742:	3329      	adds	r3, #41	; 0x29
    2744:	4642      	mov	r2, r8
    2746:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    2748:	7533      	strb	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    274a:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    274c:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    274e:	7bcb      	ldrb	r3, [r1, #15]
    2750:	4393      	bics	r3, r2
    2752:	d1fc      	bne.n	274e <tc_init+0x1ca>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    2754:	332a      	adds	r3, #42	; 0x2a
    2756:	4642      	mov	r2, r8
    2758:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    275a:	7633      	strb	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    275c:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    275e:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2760:	7bcb      	ldrb	r3, [r1, #15]
    2762:	4393      	bics	r3, r2
    2764:	d1fc      	bne.n	2760 <tc_init+0x1dc>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    2766:	332b      	adds	r3, #43	; 0x2b
    2768:	4642      	mov	r2, r8
    276a:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    276c:	7673      	strb	r3, [r6, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    276e:	2000      	movs	r0, #0
    2770:	e031      	b.n	27d6 <tc_init+0x252>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    2772:	217f      	movs	r1, #127	; 0x7f
    2774:	7bd3      	ldrb	r3, [r2, #15]
    2776:	438b      	bics	r3, r1
    2778:	d1fc      	bne.n	2774 <tc_init+0x1f0>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    277a:	4643      	mov	r3, r8
    277c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    277e:	8233      	strh	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2780:	6821      	ldr	r1, [r4, #0]

			while (tc_is_syncing(module_inst)) {
    2782:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2784:	7bcb      	ldrb	r3, [r1, #15]
    2786:	4393      	bics	r3, r2
    2788:	d1fc      	bne.n	2784 <tc_init+0x200>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    278a:	4643      	mov	r3, r8
    278c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    278e:	8333      	strh	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2790:	6821      	ldr	r1, [r4, #0]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    2792:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2794:	7bcb      	ldrb	r3, [r1, #15]
    2796:	4393      	bics	r3, r2
    2798:	d1fc      	bne.n	2794 <tc_init+0x210>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    279a:	4643      	mov	r3, r8
    279c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    279e:	8373      	strh	r3, [r6, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    27a0:	2000      	movs	r0, #0
    27a2:	e018      	b.n	27d6 <tc_init+0x252>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    27a4:	217f      	movs	r1, #127	; 0x7f
    27a6:	7bd3      	ldrb	r3, [r2, #15]
    27a8:	438b      	bics	r3, r1
    27aa:	d1fc      	bne.n	27a6 <tc_init+0x222>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    27ac:	4643      	mov	r3, r8
    27ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    27b0:	6133      	str	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    27b2:	6821      	ldr	r1, [r4, #0]

			while (tc_is_syncing(module_inst)) {
    27b4:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    27b6:	7bcb      	ldrb	r3, [r1, #15]
    27b8:	4393      	bics	r3, r2
    27ba:	d1fc      	bne.n	27b6 <tc_init+0x232>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    27bc:	4643      	mov	r3, r8
    27be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    27c0:	61b3      	str	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    27c2:	6821      	ldr	r1, [r4, #0]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    27c4:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    27c6:	7bcb      	ldrb	r3, [r1, #15]
    27c8:	4393      	bics	r3, r2
    27ca:	d1fc      	bne.n	27c6 <tc_init+0x242>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    27cc:	4643      	mov	r3, r8
    27ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    27d0:	61f3      	str	r3, [r6, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    27d2:	2000      	movs	r0, #0
    27d4:	e7ff      	b.n	27d6 <tc_init+0x252>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    27d6:	b007      	add	sp, #28
    27d8:	bc0c      	pop	{r2, r3}
    27da:	4690      	mov	r8, r2
    27dc:	4699      	mov	r9, r3
    27de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27e0:	0000254d 	.word	0x0000254d
    27e4:	00008bbc 	.word	0x00008bbc
    27e8:	0000360d 	.word	0x0000360d
    27ec:	200007dc 	.word	0x200007dc
    27f0:	00002431 	.word	0x00002431
    27f4:	40000400 	.word	0x40000400
    27f8:	00002339 	.word	0x00002339
    27fc:	000022ad 	.word	0x000022ad

00002800 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    2800:	6802      	ldr	r2, [r0, #0]

	while (tc_is_syncing(module_inst)) {
    2802:	217f      	movs	r1, #127	; 0x7f
    2804:	7bd3      	ldrb	r3, [r2, #15]
    2806:	438b      	bics	r3, r1
    2808:	d1fc      	bne.n	2804 <tc_get_count_value+0x4>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    280a:	7903      	ldrb	r3, [r0, #4]
    280c:	2b04      	cmp	r3, #4
    280e:	d005      	beq.n	281c <tc_get_count_value+0x1c>
    2810:	2b08      	cmp	r3, #8
    2812:	d009      	beq.n	2828 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    2814:	2000      	movs	r0, #0
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    2816:	2b00      	cmp	r3, #0
    2818:	d108      	bne.n	282c <tc_get_count_value+0x2c>
    281a:	e002      	b.n	2822 <tc_get_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    281c:	7c10      	ldrb	r0, [r2, #16]
    281e:	b2c0      	uxtb	r0, r0
    2820:	e004      	b.n	282c <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    2822:	8a10      	ldrh	r0, [r2, #16]
    2824:	b280      	uxth	r0, r0
    2826:	e001      	b.n	282c <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    2828:	6910      	ldr	r0, [r2, #16]
    282a:	e7ff      	b.n	282c <tc_get_count_value+0x2c>
	}

	Assert(false);
	return 0;
}
    282c:	4770      	bx	lr
    282e:	46c0      	nop			; (mov r8, r8)

00002830 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    2830:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    2832:	6804      	ldr	r4, [r0, #0]

	while (tc_is_syncing(module_inst)) {
    2834:	257f      	movs	r5, #127	; 0x7f
    2836:	7be3      	ldrb	r3, [r4, #15]
    2838:	43ab      	bics	r3, r5
    283a:	d1fc      	bne.n	2836 <tc_set_compare_value+0x6>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    283c:	7903      	ldrb	r3, [r0, #4]
    283e:	2b04      	cmp	r3, #4
    2840:	d005      	beq.n	284e <tc_set_compare_value+0x1e>
    2842:	2b08      	cmp	r3, #8
    2844:	d014      	beq.n	2870 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    2846:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    2848:	2b00      	cmp	r3, #0
    284a:	d119      	bne.n	2880 <tc_set_compare_value+0x50>
    284c:	e007      	b.n	285e <tc_set_compare_value+0x2e>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    284e:	2017      	movs	r0, #23
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    2850:	2901      	cmp	r1, #1
    2852:	d815      	bhi.n	2880 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
						(uint8_t)compare;
    2854:	b2d2      	uxtb	r2, r2
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
    2856:	1861      	adds	r1, r4, r1
    2858:	760a      	strb	r2, [r1, #24]
						(uint8_t)compare;
				return STATUS_OK;
    285a:	2000      	movs	r0, #0
    285c:	e010      	b.n	2880 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    285e:	2017      	movs	r0, #23
						(uint8_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    2860:	2901      	cmp	r1, #1
    2862:	d80d      	bhi.n	2880 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
						(uint16_t)compare;
    2864:	b292      	uxth	r2, r2
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
    2866:	310c      	adds	r1, #12
    2868:	0049      	lsls	r1, r1, #1
    286a:	530a      	strh	r2, [r1, r4]
						(uint16_t)compare;
				return STATUS_OK;
    286c:	2000      	movs	r0, #0
    286e:	e007      	b.n	2880 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    2870:	2017      	movs	r0, #23
						(uint16_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    2872:	2901      	cmp	r1, #1
    2874:	d804      	bhi.n	2880 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
    2876:	3106      	adds	r1, #6
    2878:	0089      	lsls	r1, r1, #2
    287a:	510a      	str	r2, [r1, r4]
						(uint32_t)compare;
				return STATUS_OK;
    287c:	2000      	movs	r0, #0
    287e:	e7ff      	b.n	2880 <tc_set_compare_value+0x50>
			}
	}

	return STATUS_ERR_INVALID_ARG;
}
    2880:	bd30      	pop	{r4, r5, pc}
    2882:	46c0      	nop			; (mov r8, r8)

00002884 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2884:	e7fe      	b.n	2884 <Dummy_Handler>
    2886:	46c0      	nop			; (mov r8, r8)

00002888 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2888:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    288a:	4b2e      	ldr	r3, [pc, #184]	; (2944 <Reset_Handler+0xbc>)
    288c:	4a2e      	ldr	r2, [pc, #184]	; (2948 <Reset_Handler+0xc0>)
    288e:	429a      	cmp	r2, r3
    2890:	d003      	beq.n	289a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    2892:	4b2e      	ldr	r3, [pc, #184]	; (294c <Reset_Handler+0xc4>)
    2894:	4a2b      	ldr	r2, [pc, #172]	; (2944 <Reset_Handler+0xbc>)
    2896:	429a      	cmp	r2, r3
    2898:	d304      	bcc.n	28a4 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    289a:	4b2d      	ldr	r3, [pc, #180]	; (2950 <Reset_Handler+0xc8>)
    289c:	4a2d      	ldr	r2, [pc, #180]	; (2954 <Reset_Handler+0xcc>)
    289e:	429a      	cmp	r2, r3
    28a0:	d310      	bcc.n	28c4 <Reset_Handler+0x3c>
    28a2:	e01e      	b.n	28e2 <Reset_Handler+0x5a>
    28a4:	4a2c      	ldr	r2, [pc, #176]	; (2958 <Reset_Handler+0xd0>)
    28a6:	4b29      	ldr	r3, [pc, #164]	; (294c <Reset_Handler+0xc4>)
    28a8:	3303      	adds	r3, #3
    28aa:	1a9b      	subs	r3, r3, r2
    28ac:	089b      	lsrs	r3, r3, #2
    28ae:	3301      	adds	r3, #1
    28b0:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    28b2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    28b4:	4823      	ldr	r0, [pc, #140]	; (2944 <Reset_Handler+0xbc>)
    28b6:	4924      	ldr	r1, [pc, #144]	; (2948 <Reset_Handler+0xc0>)
    28b8:	588c      	ldr	r4, [r1, r2]
    28ba:	5084      	str	r4, [r0, r2]
    28bc:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    28be:	429a      	cmp	r2, r3
    28c0:	d1fa      	bne.n	28b8 <Reset_Handler+0x30>
    28c2:	e7ea      	b.n	289a <Reset_Handler+0x12>
    28c4:	4a25      	ldr	r2, [pc, #148]	; (295c <Reset_Handler+0xd4>)
    28c6:	4b22      	ldr	r3, [pc, #136]	; (2950 <Reset_Handler+0xc8>)
    28c8:	3303      	adds	r3, #3
    28ca:	1a9b      	subs	r3, r3, r2
    28cc:	089b      	lsrs	r3, r3, #2
    28ce:	3301      	adds	r3, #1
    28d0:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    28d2:	2200      	movs	r2, #0
                *pDest++ = 0;
    28d4:	481f      	ldr	r0, [pc, #124]	; (2954 <Reset_Handler+0xcc>)
    28d6:	2100      	movs	r1, #0
    28d8:	1814      	adds	r4, r2, r0
    28da:	6021      	str	r1, [r4, #0]
    28dc:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    28de:	429a      	cmp	r2, r3
    28e0:	d1fa      	bne.n	28d8 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    28e2:	4a1f      	ldr	r2, [pc, #124]	; (2960 <Reset_Handler+0xd8>)
    28e4:	21ff      	movs	r1, #255	; 0xff
    28e6:	4b1f      	ldr	r3, [pc, #124]	; (2964 <Reset_Handler+0xdc>)
    28e8:	438b      	bics	r3, r1
    28ea:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    28ec:	39fd      	subs	r1, #253	; 0xfd
    28ee:	2390      	movs	r3, #144	; 0x90
    28f0:	005b      	lsls	r3, r3, #1
    28f2:	4a1d      	ldr	r2, [pc, #116]	; (2968 <Reset_Handler+0xe0>)
    28f4:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    28f6:	481d      	ldr	r0, [pc, #116]	; (296c <Reset_Handler+0xe4>)
    28f8:	78c3      	ldrb	r3, [r0, #3]
    28fa:	2403      	movs	r4, #3
    28fc:	43a3      	bics	r3, r4
    28fe:	2202      	movs	r2, #2
    2900:	4313      	orrs	r3, r2
    2902:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2904:	78c3      	ldrb	r3, [r0, #3]
    2906:	260c      	movs	r6, #12
    2908:	43b3      	bics	r3, r6
    290a:	2108      	movs	r1, #8
    290c:	430b      	orrs	r3, r1
    290e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    2910:	4b17      	ldr	r3, [pc, #92]	; (2970 <Reset_Handler+0xe8>)
    2912:	7b98      	ldrb	r0, [r3, #14]
    2914:	2530      	movs	r5, #48	; 0x30
    2916:	43a8      	bics	r0, r5
    2918:	0005      	movs	r5, r0
    291a:	2020      	movs	r0, #32
    291c:	4328      	orrs	r0, r5
    291e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2920:	7b98      	ldrb	r0, [r3, #14]
    2922:	43b0      	bics	r0, r6
    2924:	4301      	orrs	r1, r0
    2926:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2928:	7b99      	ldrb	r1, [r3, #14]
    292a:	43a1      	bics	r1, r4
    292c:	430a      	orrs	r2, r1
    292e:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    2930:	4a10      	ldr	r2, [pc, #64]	; (2974 <Reset_Handler+0xec>)
    2932:	6851      	ldr	r1, [r2, #4]
    2934:	2380      	movs	r3, #128	; 0x80
    2936:	430b      	orrs	r3, r1
    2938:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    293a:	4b0f      	ldr	r3, [pc, #60]	; (2978 <Reset_Handler+0xf0>)
    293c:	4798      	blx	r3

        /* Branch to main function */
        main();
    293e:	4b0f      	ldr	r3, [pc, #60]	; (297c <Reset_Handler+0xf4>)
    2940:	4798      	blx	r3
    2942:	e7fe      	b.n	2942 <Reset_Handler+0xba>
    2944:	20000000 	.word	0x20000000
    2948:	00008f18 	.word	0x00008f18
    294c:	200000a8 	.word	0x200000a8
    2950:	200008fc 	.word	0x200008fc
    2954:	200000a8 	.word	0x200000a8
    2958:	20000004 	.word	0x20000004
    295c:	200000ac 	.word	0x200000ac
    2960:	e000ed00 	.word	0xe000ed00
    2964:	00000000 	.word	0x00000000
    2968:	41007000 	.word	0x41007000
    296c:	41005000 	.word	0x41005000
    2970:	41004800 	.word	0x41004800
    2974:	41004000 	.word	0x41004000
    2978:	000035c1 	.word	0x000035c1
    297c:	000034b9 	.word	0x000034b9

00002980 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2980:	b5f0      	push	{r4, r5, r6, r7, lr}
    2982:	4647      	mov	r7, r8
    2984:	b480      	push	{r7}
    2986:	000c      	movs	r4, r1
    2988:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    298a:	2800      	cmp	r0, #0
    298c:	d10d      	bne.n	29aa <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
    298e:	2a00      	cmp	r2, #0
    2990:	dd0e      	ble.n	29b0 <_read+0x30>
    2992:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2994:	4e08      	ldr	r6, [pc, #32]	; (29b8 <_read+0x38>)
    2996:	4d09      	ldr	r5, [pc, #36]	; (29bc <_read+0x3c>)
    2998:	6830      	ldr	r0, [r6, #0]
    299a:	0021      	movs	r1, r4
    299c:	682b      	ldr	r3, [r5, #0]
    299e:	4798      	blx	r3
		ptr++;
    29a0:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    29a2:	42a7      	cmp	r7, r4
    29a4:	d1f8      	bne.n	2998 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    29a6:	4640      	mov	r0, r8
    29a8:	e003      	b.n	29b2 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    29aa:	2001      	movs	r0, #1
    29ac:	4240      	negs	r0, r0
    29ae:	e000      	b.n	29b2 <_read+0x32>
	}

	for (; len > 0; --len) {
    29b0:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    29b2:	bc04      	pop	{r2}
    29b4:	4690      	mov	r8, r2
    29b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29b8:	200007f0 	.word	0x200007f0
    29bc:	200007e8 	.word	0x200007e8

000029c0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    29c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    29c2:	4647      	mov	r7, r8
    29c4:	b480      	push	{r7}
    29c6:	000e      	movs	r6, r1
    29c8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    29ca:	3801      	subs	r0, #1
    29cc:	2802      	cmp	r0, #2
    29ce:	d811      	bhi.n	29f4 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
    29d0:	2a00      	cmp	r2, #0
    29d2:	d012      	beq.n	29fa <_write+0x3a>
    29d4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    29d6:	4b0c      	ldr	r3, [pc, #48]	; (2a08 <_write+0x48>)
    29d8:	4698      	mov	r8, r3
    29da:	4f0c      	ldr	r7, [pc, #48]	; (2a0c <_write+0x4c>)
    29dc:	4643      	mov	r3, r8
    29de:	6818      	ldr	r0, [r3, #0]
    29e0:	5d31      	ldrb	r1, [r6, r4]
    29e2:	683b      	ldr	r3, [r7, #0]
    29e4:	4798      	blx	r3
    29e6:	2800      	cmp	r0, #0
    29e8:	db09      	blt.n	29fe <_write+0x3e>
			return -1;
		}
		++nChars;
    29ea:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    29ec:	42a5      	cmp	r5, r4
    29ee:	d1f5      	bne.n	29dc <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
    29f0:	0020      	movs	r0, r4
    29f2:	e006      	b.n	2a02 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    29f4:	2001      	movs	r0, #1
    29f6:	4240      	negs	r0, r0
    29f8:	e003      	b.n	2a02 <_write+0x42>
	}

	for (; len != 0; --len) {
    29fa:	2000      	movs	r0, #0
    29fc:	e001      	b.n	2a02 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    29fe:	2001      	movs	r0, #1
    2a00:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    2a02:	bc04      	pop	{r2}
    2a04:	4690      	mov	r8, r2
    2a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a08:	200007f0 	.word	0x200007f0
    2a0c:	200007ec 	.word	0x200007ec

00002a10 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2a10:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2a12:	4a06      	ldr	r2, [pc, #24]	; (2a2c <_sbrk+0x1c>)
    2a14:	6812      	ldr	r2, [r2, #0]
    2a16:	2a00      	cmp	r2, #0
    2a18:	d102      	bne.n	2a20 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    2a1a:	4905      	ldr	r1, [pc, #20]	; (2a30 <_sbrk+0x20>)
    2a1c:	4a03      	ldr	r2, [pc, #12]	; (2a2c <_sbrk+0x1c>)
    2a1e:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    2a20:	4a02      	ldr	r2, [pc, #8]	; (2a2c <_sbrk+0x1c>)
    2a22:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2a24:	18c3      	adds	r3, r0, r3
    2a26:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2a28:	4770      	bx	lr
    2a2a:	46c0      	nop			; (mov r8, r8)
    2a2c:	20000108 	.word	0x20000108
    2a30:	20002900 	.word	0x20002900

00002a34 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2a34:	2001      	movs	r0, #1
    2a36:	4240      	negs	r0, r0
    2a38:	4770      	bx	lr
    2a3a:	46c0      	nop			; (mov r8, r8)

00002a3c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2a3c:	2380      	movs	r3, #128	; 0x80
    2a3e:	019b      	lsls	r3, r3, #6
    2a40:	604b      	str	r3, [r1, #4]

	return 0;
}
    2a42:	2000      	movs	r0, #0
    2a44:	4770      	bx	lr
    2a46:	46c0      	nop			; (mov r8, r8)

00002a48 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2a48:	2001      	movs	r0, #1
    2a4a:	4770      	bx	lr

00002a4c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2a4c:	2000      	movs	r0, #0
    2a4e:	4770      	bx	lr

00002a50 <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    2a50:	b510      	push	{r4, lr}
	nwkIb.nwkSeqNum = 0;
    2a52:	4a0d      	ldr	r2, [pc, #52]	; (2a88 <NWK_Init+0x38>)
    2a54:	2300      	movs	r3, #0
    2a56:	7113      	strb	r3, [r2, #4]
	nwkIb.macSeqNum = 0;
    2a58:	7153      	strb	r3, [r2, #5]
	nwkIb.addr = 0;
    2a5a:	8013      	strh	r3, [r2, #0]
	nwkIb.lock = 0;
    2a5c:	2158      	movs	r1, #88	; 0x58
    2a5e:	5253      	strh	r3, [r2, r1]
    2a60:	0013      	movs	r3, r2
    2a62:	3240      	adds	r2, #64	; 0x40

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    2a64:	2100      	movs	r1, #0
    2a66:	6099      	str	r1, [r3, #8]
    2a68:	3304      	adds	r3, #4
	nwkIb.nwkSeqNum = 0;
	nwkIb.macSeqNum = 0;
	nwkIb.addr = 0;
	nwkIb.lock = 0;

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    2a6a:	4293      	cmp	r3, r2
    2a6c:	d1fb      	bne.n	2a66 <NWK_Init+0x16>
		nwkIb.endpoint[i] = NULL;
	}

	nwkTxInit();
    2a6e:	4b07      	ldr	r3, [pc, #28]	; (2a8c <NWK_Init+0x3c>)
    2a70:	4798      	blx	r3
	nwkRxInit();
    2a72:	4b07      	ldr	r3, [pc, #28]	; (2a90 <NWK_Init+0x40>)
    2a74:	4798      	blx	r3
	nwkFrameInit();
    2a76:	4b07      	ldr	r3, [pc, #28]	; (2a94 <NWK_Init+0x44>)
    2a78:	4798      	blx	r3
	nwkDataReqInit();
    2a7a:	4b07      	ldr	r3, [pc, #28]	; (2a98 <NWK_Init+0x48>)
    2a7c:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    2a7e:	4b07      	ldr	r3, [pc, #28]	; (2a9c <NWK_Init+0x4c>)
    2a80:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    2a82:	4b07      	ldr	r3, [pc, #28]	; (2aa0 <NWK_Init+0x50>)
    2a84:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
    2a86:	bd10      	pop	{r4, pc}
    2a88:	200007f4 	.word	0x200007f4
    2a8c:	00002d2d 	.word	0x00002d2d
    2a90:	00002c29 	.word	0x00002c29
    2a94:	00002ac1 	.word	0x00002ac1
    2a98:	00002ab5 	.word	0x00002ab5
    2a9c:	00002b11 	.word	0x00002b11
    2aa0:	00002c69 	.word	0x00002c69

00002aa4 <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    2aa4:	3002      	adds	r0, #2
    2aa6:	0080      	lsls	r0, r0, #2
    2aa8:	4b01      	ldr	r3, [pc, #4]	; (2ab0 <NWK_OpenEndpoint+0xc>)
    2aaa:	50c1      	str	r1, [r0, r3]
}
    2aac:	4770      	bx	lr
    2aae:	46c0      	nop			; (mov r8, r8)
    2ab0:	200007f4 	.word	0x200007f4

00002ab4 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    2ab4:	2200      	movs	r2, #0
    2ab6:	4b01      	ldr	r3, [pc, #4]	; (2abc <nwkDataReqInit+0x8>)
    2ab8:	601a      	str	r2, [r3, #0]
}
    2aba:	4770      	bx	lr
    2abc:	2000010c 	.word	0x2000010c

00002ac0 <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    2ac0:	4b03      	ldr	r3, [pc, #12]	; (2ad0 <nwkFrameInit+0x10>)
    2ac2:	2200      	movs	r2, #0
    2ac4:	701a      	strb	r2, [r3, #0]
    2ac6:	218d      	movs	r1, #141	; 0x8d
    2ac8:	545a      	strb	r2, [r3, r1]
    2aca:	318d      	adds	r1, #141	; 0x8d
    2acc:	545a      	strb	r2, [r3, r1]
	}
}
    2ace:	4770      	bx	lr
    2ad0:	20000110 	.word	0x20000110

00002ad4 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    2ad4:	2800      	cmp	r0, #0
    2ad6:	d006      	beq.n	2ae6 <nwkFrameNext+0x12>
		frame = nwkFrameFrames;
	} else {
		frame++;
    2ad8:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2ada:	4b0c      	ldr	r3, [pc, #48]	; (2b0c <nwkFrameNext+0x38>)
    2adc:	33a8      	adds	r3, #168	; 0xa8
    2ade:	33ff      	adds	r3, #255	; 0xff
    2ae0:	4298      	cmp	r0, r3
    2ae2:	d301      	bcc.n	2ae8 <nwkFrameNext+0x14>
    2ae4:	e00f      	b.n	2b06 <nwkFrameNext+0x32>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
    2ae6:	4809      	ldr	r0, [pc, #36]	; (2b0c <nwkFrameNext+0x38>)
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2ae8:	7803      	ldrb	r3, [r0, #0]
    2aea:	2b00      	cmp	r3, #0
    2aec:	d10c      	bne.n	2b08 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2aee:	4a07      	ldr	r2, [pc, #28]	; (2b0c <nwkFrameNext+0x38>)
    2af0:	32a8      	adds	r2, #168	; 0xa8
    2af2:	32ff      	adds	r2, #255	; 0xff
    2af4:	e002      	b.n	2afc <nwkFrameNext+0x28>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2af6:	7803      	ldrb	r3, [r0, #0]
    2af8:	2b00      	cmp	r3, #0
    2afa:	d105      	bne.n	2b08 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2afc:	308d      	adds	r0, #141	; 0x8d
    2afe:	4290      	cmp	r0, r2
    2b00:	d3f9      	bcc.n	2af6 <nwkFrameNext+0x22>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    2b02:	2000      	movs	r0, #0
    2b04:	e000      	b.n	2b08 <nwkFrameNext+0x34>
    2b06:	2000      	movs	r0, #0
}
    2b08:	4770      	bx	lr
    2b0a:	46c0      	nop			; (mov r8, r8)
    2b0c:	20000110 	.word	0x20000110

00002b10 <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    2b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b12:	4b09      	ldr	r3, [pc, #36]	; (2b38 <nwkRouteInit+0x28>)
    2b14:	3302      	adds	r3, #2
    2b16:	2200      	movs	r2, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2b18:	2701      	movs	r7, #1
    2b1a:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    2b1c:	4c06      	ldr	r4, [pc, #24]	; (2b38 <nwkRouteInit+0x28>)
    2b1e:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    2b20:	2500      	movs	r5, #0
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2b22:	801f      	strh	r7, [r3, #0]
		nwkRouteTable[i].fixed = 0;
    2b24:	00d0      	lsls	r0, r2, #3
    2b26:	5d01      	ldrb	r1, [r0, r4]
    2b28:	43b1      	bics	r1, r6
    2b2a:	5501      	strb	r1, [r0, r4]
		nwkRouteTable[i].rank = 0;
    2b2c:	711d      	strb	r5, [r3, #4]
    2b2e:	3201      	adds	r2, #1
    2b30:	3308      	adds	r3, #8
/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2b32:	2a64      	cmp	r2, #100	; 0x64
    2b34:	d1f5      	bne.n	2b22 <nwkRouteInit+0x12>
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
		nwkRouteTable[i].fixed = 0;
		nwkRouteTable[i].rank = 0;
	}
}
    2b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b38:	200002b8 	.word	0x200002b8

00002b3c <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    2b3c:	b570      	push	{r4, r5, r6, lr}
    2b3e:	4a0b      	ldr	r2, [pc, #44]	; (2b6c <NWK_RouteFindEntry+0x30>)
    2b40:	3202      	adds	r2, #2
    2b42:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    2b44:	4e09      	ldr	r6, [pc, #36]	; (2b6c <NWK_RouteFindEntry+0x30>)
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    2b46:	8814      	ldrh	r4, [r2, #0]
    2b48:	4284      	cmp	r4, r0
    2b4a:	d109      	bne.n	2b60 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
    2b4c:	00dc      	lsls	r4, r3, #3
    2b4e:	5da4      	ldrb	r4, [r4, r6]
    2b50:	07a4      	lsls	r4, r4, #30
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    2b52:	0fe4      	lsrs	r4, r4, #31
    2b54:	428c      	cmp	r4, r1
    2b56:	d103      	bne.n	2b60 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
    2b58:	00dd      	lsls	r5, r3, #3
    2b5a:	4804      	ldr	r0, [pc, #16]	; (2b6c <NWK_RouteFindEntry+0x30>)
    2b5c:	1940      	adds	r0, r0, r5
    2b5e:	e004      	b.n	2b6a <NWK_RouteFindEntry+0x2e>
    2b60:	3301      	adds	r3, #1
    2b62:	3208      	adds	r2, #8

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2b64:	2b64      	cmp	r3, #100	; 0x64
    2b66:	d1ee      	bne.n	2b46 <NWK_RouteFindEntry+0xa>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
		}
	}

	return NULL;
    2b68:	2000      	movs	r0, #0
}
    2b6a:	bd70      	pop	{r4, r5, r6, pc}
    2b6c:	200002b8 	.word	0x200002b8

00002b70 <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    2b70:	7803      	ldrb	r3, [r0, #0]
    2b72:	07db      	lsls	r3, r3, #31
    2b74:	d404      	bmi.n	2b80 <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    2b76:	2301      	movs	r3, #1
    2b78:	425b      	negs	r3, r3
    2b7a:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    2b7c:	2300      	movs	r3, #0
    2b7e:	7183      	strb	r3, [r0, #6]
}
    2b80:	4770      	bx	lr
    2b82:	46c0      	nop			; (mov r8, r8)

00002b84 <nwkRouteRemove>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    2b84:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    2b86:	4b03      	ldr	r3, [pc, #12]	; (2b94 <nwkRouteRemove+0x10>)
    2b88:	4798      	blx	r3
	if (entry) {
    2b8a:	2800      	cmp	r0, #0
    2b8c:	d001      	beq.n	2b92 <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    2b8e:	4b02      	ldr	r3, [pc, #8]	; (2b98 <nwkRouteRemove+0x14>)
    2b90:	4798      	blx	r3
	}
}
    2b92:	bd10      	pop	{r4, pc}
    2b94:	00002b3d 	.word	0x00002b3d
    2b98:	00002b71 	.word	0x00002b71

00002b9c <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    2b9c:	b510      	push	{r4, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2b9e:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2ba0:	2300      	movs	r3, #0
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2ba2:	2a06      	cmp	r2, #6
    2ba4:	d108      	bne.n	2bb8 <nwkRouteErrorReceived+0x1c>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    2ba6:	6882      	ldr	r2, [r0, #8]

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
    2ba8:	7951      	ldrb	r1, [r2, #5]
    2baa:	78d3      	ldrb	r3, [r2, #3]
    2bac:	7910      	ldrb	r0, [r2, #4]
    2bae:	0200      	lsls	r0, r0, #8
    2bb0:	4318      	orrs	r0, r3
    2bb2:	4b02      	ldr	r3, [pc, #8]	; (2bbc <nwkRouteErrorReceived+0x20>)
    2bb4:	4798      	blx	r3

	return true;
    2bb6:	2301      	movs	r3, #1
}
    2bb8:	0018      	movs	r0, r3
    2bba:	bd10      	pop	{r4, pc}
    2bbc:	00002b85 	.word	0x00002b85

00002bc0 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    2bc0:	b510      	push	{r4, lr}
	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
		return false;
	}
#endif

	if (ind->size < 1) {
    2bc2:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2bc4:	2300      	movs	r3, #0
	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
		return false;
	}
#endif

	if (ind->size < 1) {
    2bc6:	2a00      	cmp	r2, #0
    2bc8:	d00f      	beq.n	2bea <nwkRxSeriveDataInd+0x2a>
		return false;
	}

	switch (ind->data[0]) {
    2bca:	6883      	ldr	r3, [r0, #8]
    2bcc:	781b      	ldrb	r3, [r3, #0]
    2bce:	2b00      	cmp	r3, #0
    2bd0:	d002      	beq.n	2bd8 <nwkRxSeriveDataInd+0x18>
    2bd2:	2b01      	cmp	r3, #1
    2bd4:	d004      	beq.n	2be0 <nwkRxSeriveDataInd+0x20>
    2bd6:	e007      	b.n	2be8 <nwkRxSeriveDataInd+0x28>
	case NWK_COMMAND_ACK:
		return nwkTxAckReceived(ind);
    2bd8:	4b05      	ldr	r3, [pc, #20]	; (2bf0 <nwkRxSeriveDataInd+0x30>)
    2bda:	4798      	blx	r3
    2bdc:	0003      	movs	r3, r0
    2bde:	e004      	b.n	2bea <nwkRxSeriveDataInd+0x2a>

#ifdef NWK_ENABLE_ROUTING
	case NWK_COMMAND_ROUTE_ERROR:
		return nwkRouteErrorReceived(ind);
    2be0:	4b04      	ldr	r3, [pc, #16]	; (2bf4 <nwkRxSeriveDataInd+0x34>)
    2be2:	4798      	blx	r3
    2be4:	0003      	movs	r3, r0
    2be6:	e000      	b.n	2bea <nwkRxSeriveDataInd+0x2a>
	case NWK_COMMAND_ROUTE_REPLY:
		return nwkRouteDiscoveryReplyReceived(ind);
#endif

	default:
		return false;
    2be8:	2300      	movs	r3, #0
	}
}
    2bea:	0018      	movs	r0, r3
    2bec:	bd10      	pop	{r4, pc}
    2bee:	46c0      	nop			; (mov r8, r8)
    2bf0:	00002d61 	.word	0x00002d61
    2bf4:	00002b9d 	.word	0x00002b9d

00002bf8 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    2bf8:	b570      	push	{r4, r5, r6, lr}
    2bfa:	4909      	ldr	r1, [pc, #36]	; (2c20 <nwkRxDuplicateRejectionTimerHandler+0x28>)
    2bfc:	1d0b      	adds	r3, r1, #4
    2bfe:	3140      	adds	r1, #64	; 0x40
	bool restart = false;
    2c00:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
    2c02:	2501      	movs	r5, #1
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    2c04:	781a      	ldrb	r2, [r3, #0]
    2c06:	2a00      	cmp	r2, #0
    2c08:	d002      	beq.n	2c10 <nwkRxDuplicateRejectionTimerHandler+0x18>
			nwkRxDuplicateRejectionTable[i].ttl--;
    2c0a:	3a01      	subs	r2, #1
    2c0c:	701a      	strb	r2, [r3, #0]
			restart = true;
    2c0e:	002c      	movs	r4, r5
    2c10:	3306      	adds	r3, #6
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2c12:	428b      	cmp	r3, r1
    2c14:	d1f6      	bne.n	2c04 <nwkRxDuplicateRejectionTimerHandler+0xc>
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
		}
	}

	if (restart) {
    2c16:	2c00      	cmp	r4, #0
    2c18:	d001      	beq.n	2c1e <nwkRxDuplicateRejectionTimerHandler+0x26>
		SYS_TimerStart(timer);
    2c1a:	4b02      	ldr	r3, [pc, #8]	; (2c24 <nwkRxDuplicateRejectionTimerHandler+0x2c>)
    2c1c:	4798      	blx	r3
	}
}
    2c1e:	bd70      	pop	{r4, r5, r6, pc}
    2c20:	200005d8 	.word	0x200005d8
    2c24:	00002efd 	.word	0x00002efd

00002c28 <nwkRxInit>:

/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    2c28:	b510      	push	{r4, lr}
    2c2a:	4a0a      	ldr	r2, [pc, #40]	; (2c54 <nwkRxInit+0x2c>)
    2c2c:	1d13      	adds	r3, r2, #4
    2c2e:	3240      	adds	r2, #64	; 0x40
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    2c30:	2100      	movs	r1, #0
    2c32:	7019      	strb	r1, [r3, #0]
    2c34:	3306      	adds	r3, #6
/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2c36:	4293      	cmp	r3, r2
    2c38:	d1fb      	bne.n	2c32 <nwkRxInit+0xa>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
	}

	nwkRxDuplicateRejectionTimer.interval
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    2c3a:	4b07      	ldr	r3, [pc, #28]	; (2c58 <nwkRxInit+0x30>)
    2c3c:	2264      	movs	r2, #100	; 0x64
    2c3e:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2c40:	2200      	movs	r2, #0
    2c42:	731a      	strb	r2, [r3, #12]
	nwkRxDuplicateRejectionTimer.handler
		= nwkRxDuplicateRejectionTimerHandler;
    2c44:	4a05      	ldr	r2, [pc, #20]	; (2c5c <nwkRxInit+0x34>)
    2c46:	611a      	str	r2, [r3, #16]

	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    2c48:	4905      	ldr	r1, [pc, #20]	; (2c60 <nwkRxInit+0x38>)
    2c4a:	2000      	movs	r0, #0
    2c4c:	4b05      	ldr	r3, [pc, #20]	; (2c64 <nwkRxInit+0x3c>)
    2c4e:	4798      	blx	r3
}
    2c50:	bd10      	pop	{r4, pc}
    2c52:	46c0      	nop			; (mov r8, r8)
    2c54:	200005d8 	.word	0x200005d8
    2c58:	20000614 	.word	0x20000614
    2c5c:	00002bf9 	.word	0x00002bf9
    2c60:	00002bc1 	.word	0x00002bc1
    2c64:	00002aa5 	.word	0x00002aa5

00002c68 <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    2c68:	2300      	movs	r3, #0
    2c6a:	4a02      	ldr	r2, [pc, #8]	; (2c74 <nwkSecurityInit+0xc>)
    2c6c:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    2c6e:	4a02      	ldr	r2, [pc, #8]	; (2c78 <nwkSecurityInit+0x10>)
    2c70:	6013      	str	r3, [r2, #0]
}
    2c72:	4770      	bx	lr
    2c74:	20000628 	.word	0x20000628
    2c78:	2000062c 	.word	0x2000062c

00002c7c <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    2c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c7e:	b083      	sub	sp, #12
    2c80:	9001      	str	r0, [sp, #4]
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2c82:	2400      	movs	r4, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    2c84:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2c86:	4d10      	ldr	r5, [pc, #64]	; (2cc8 <nwkTxDelayTimerHandler+0x4c>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2c88:	2686      	movs	r6, #134	; 0x86
    2c8a:	2787      	movs	r7, #135	; 0x87
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2c8c:	e012      	b.n	2cb4 <nwkTxDelayTimerHandler+0x38>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    2c8e:	7803      	ldrb	r3, [r0, #0]
    2c90:	2b11      	cmp	r3, #17
    2c92:	d10f      	bne.n	2cb4 <nwkTxDelayTimerHandler+0x38>
			restart = true;

			if (0 == --frame->tx.timeout) {
    2c94:	5d82      	ldrb	r2, [r0, r6]
    2c96:	5dc3      	ldrb	r3, [r0, r7]
    2c98:	021b      	lsls	r3, r3, #8
    2c9a:	4313      	orrs	r3, r2
    2c9c:	3b01      	subs	r3, #1
    2c9e:	b29b      	uxth	r3, r3
    2ca0:	5583      	strb	r3, [r0, r6]
    2ca2:	0a19      	lsrs	r1, r3, #8
    2ca4:	0002      	movs	r2, r0
    2ca6:	3286      	adds	r2, #134	; 0x86
    2ca8:	7051      	strb	r1, [r2, #1]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;
    2caa:	2401      	movs	r4, #1

			if (0 == --frame->tx.timeout) {
    2cac:	2b00      	cmp	r3, #0
    2cae:	d101      	bne.n	2cb4 <nwkTxDelayTimerHandler+0x38>
				frame->state = NWK_TX_STATE_SEND;
    2cb0:	3313      	adds	r3, #19
    2cb2:	7003      	strb	r3, [r0, #0]
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2cb4:	47a8      	blx	r5
    2cb6:	2800      	cmp	r0, #0
    2cb8:	d1e9      	bne.n	2c8e <nwkTxDelayTimerHandler+0x12>
				frame->state = NWK_TX_STATE_SEND;
			}
		}
	}

	if (restart) {
    2cba:	2c00      	cmp	r4, #0
    2cbc:	d002      	beq.n	2cc4 <nwkTxDelayTimerHandler+0x48>
		SYS_TimerStart(timer);
    2cbe:	9801      	ldr	r0, [sp, #4]
    2cc0:	4b02      	ldr	r3, [pc, #8]	; (2ccc <nwkTxDelayTimerHandler+0x50>)
    2cc2:	4798      	blx	r3
	}
}
    2cc4:	b003      	add	sp, #12
    2cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cc8:	00002ad5 	.word	0x00002ad5
    2ccc:	00002efd 	.word	0x00002efd

00002cd0 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    2cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cd2:	b083      	sub	sp, #12
    2cd4:	9001      	str	r0, [sp, #4]
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2cd6:	2400      	movs	r4, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    2cd8:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2cda:	4d12      	ldr	r5, [pc, #72]	; (2d24 <nwkTxAckWaitTimerHandler+0x54>)
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2cdc:	2686      	movs	r6, #134	; 0x86
    2cde:	2787      	movs	r7, #135	; 0x87
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2ce0:	e015      	b.n	2d0e <nwkTxAckWaitTimerHandler+0x3e>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    2ce2:	7803      	ldrb	r3, [r0, #0]
    2ce4:	2b16      	cmp	r3, #22
    2ce6:	d112      	bne.n	2d0e <nwkTxAckWaitTimerHandler+0x3e>
			restart = true;

			if (0 == --frame->tx.timeout) {
    2ce8:	5d82      	ldrb	r2, [r0, r6]
    2cea:	5dc3      	ldrb	r3, [r0, r7]
    2cec:	021b      	lsls	r3, r3, #8
    2cee:	4313      	orrs	r3, r2
    2cf0:	3b01      	subs	r3, #1
    2cf2:	b29b      	uxth	r3, r3
    2cf4:	5583      	strb	r3, [r0, r6]
    2cf6:	0a19      	lsrs	r1, r3, #8
    2cf8:	0002      	movs	r2, r0
    2cfa:	3286      	adds	r2, #134	; 0x86
    2cfc:	7051      	strb	r1, [r2, #1]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;
    2cfe:	2401      	movs	r4, #1

			if (0 == --frame->tx.timeout) {
    2d00:	2b00      	cmp	r3, #0
    2d02:	d104      	bne.n	2d0e <nwkTxAckWaitTimerHandler+0x3e>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    2d04:	3317      	adds	r3, #23
    2d06:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    2d08:	2210      	movs	r2, #16
    2d0a:	336e      	adds	r3, #110	; 0x6e
    2d0c:	54c2      	strb	r2, [r0, r3]
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2d0e:	47a8      	blx	r5
    2d10:	2800      	cmp	r0, #0
    2d12:	d1e6      	bne.n	2ce2 <nwkTxAckWaitTimerHandler+0x12>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
			}
		}
	}

	if (restart) {
    2d14:	2c00      	cmp	r4, #0
    2d16:	d002      	beq.n	2d1e <nwkTxAckWaitTimerHandler+0x4e>
		SYS_TimerStart(timer);
    2d18:	9801      	ldr	r0, [sp, #4]
    2d1a:	4b03      	ldr	r3, [pc, #12]	; (2d28 <nwkTxAckWaitTimerHandler+0x58>)
    2d1c:	4798      	blx	r3
	}
}
    2d1e:	b003      	add	sp, #12
    2d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d22:	46c0      	nop			; (mov r8, r8)
    2d24:	00002ad5 	.word	0x00002ad5
    2d28:	00002efd 	.word	0x00002efd

00002d2c <nwkTxInit>:
/*************************************************************************//**
*  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
	nwkTxPhyActiveFrame = NULL;
    2d2c:	2200      	movs	r2, #0
    2d2e:	4b07      	ldr	r3, [pc, #28]	; (2d4c <nwkTxInit+0x20>)
    2d30:	601a      	str	r2, [r3, #0]

	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    2d32:	4b07      	ldr	r3, [pc, #28]	; (2d50 <nwkTxInit+0x24>)
    2d34:	2132      	movs	r1, #50	; 0x32
    2d36:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2d38:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    2d3a:	4906      	ldr	r1, [pc, #24]	; (2d54 <nwkTxInit+0x28>)
    2d3c:	6119      	str	r1, [r3, #16]

	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    2d3e:	4b06      	ldr	r3, [pc, #24]	; (2d58 <nwkTxInit+0x2c>)
    2d40:	210a      	movs	r1, #10
    2d42:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2d44:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    2d46:	4a05      	ldr	r2, [pc, #20]	; (2d5c <nwkTxInit+0x30>)
    2d48:	611a      	str	r2, [r3, #16]
}
    2d4a:	4770      	bx	lr
    2d4c:	20000644 	.word	0x20000644
    2d50:	20000630 	.word	0x20000630
    2d54:	00002cd1 	.word	0x00002cd1
    2d58:	20000648 	.word	0x20000648
    2d5c:	00002c7d 	.word	0x00002c7d

00002d60 <nwkTxAckReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    2d60:	b570      	push	{r4, r5, r6, lr}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    2d62:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2d64:	2300      	movs	r3, #0
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    2d66:	2a03      	cmp	r2, #3
    2d68:	d115      	bne.n	2d96 <nwkTxAckReceived+0x36>
    2d6a:	e00d      	b.n	2d88 <nwkTxAckReceived+0x28>
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    2d6c:	7803      	ldrb	r3, [r0, #0]
    2d6e:	2b16      	cmp	r3, #22
    2d70:	d10d      	bne.n	2d8e <nwkTxAckReceived+0x2e>
    2d72:	7b02      	ldrb	r2, [r0, #12]
    2d74:	786b      	ldrb	r3, [r5, #1]
    2d76:	429a      	cmp	r2, r3
    2d78:	d109      	bne.n	2d8e <nwkTxAckReceived+0x2e>
				frame->header.nwkSeq == command->seq) {
			frame->state = NWK_TX_STATE_CONFIRM;
    2d7a:	2317      	movs	r3, #23
    2d7c:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    2d7e:	78aa      	ldrb	r2, [r5, #2]
    2d80:	3371      	adds	r3, #113	; 0x71
    2d82:	54c2      	strb	r2, [r0, r3]
			return true;
    2d84:	3b87      	subs	r3, #135	; 0x87
    2d86:	e006      	b.n	2d96 <nwkTxAckReceived+0x36>

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    2d88:	6885      	ldr	r5, [r0, #8]
    2d8a:	2000      	movs	r0, #0

	if (sizeof(NwkCommandAck_t) != ind->size) {
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    2d8c:	4c03      	ldr	r4, [pc, #12]	; (2d9c <nwkTxAckReceived+0x3c>)
    2d8e:	47a0      	blx	r4
    2d90:	2800      	cmp	r0, #0
    2d92:	d1eb      	bne.n	2d6c <nwkTxAckReceived+0xc>
			frame->tx.control = command->control;
			return true;
		}
	}

	return false;
    2d94:	2300      	movs	r3, #0
}
    2d96:	0018      	movs	r0, r3
    2d98:	bd70      	pop	{r4, r5, r6, pc}
    2d9a:	46c0      	nop			; (mov r8, r8)
    2d9c:	00002ad5 	.word	0x00002ad5

00002da0 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    2da0:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    2da2:	4b0e      	ldr	r3, [pc, #56]	; (2ddc <PHY_Init+0x3c>)
    2da4:	4798      	blx	r3
	PhyReset();
    2da6:	4b0e      	ldr	r3, [pc, #56]	; (2de0 <PHY_Init+0x40>)
    2da8:	4798      	blx	r3
	phyRxState = false;
    2daa:	2200      	movs	r2, #0
    2dac:	4b0d      	ldr	r3, [pc, #52]	; (2de4 <PHY_Init+0x44>)
    2dae:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    2db0:	3201      	adds	r2, #1
    2db2:	4b0d      	ldr	r3, [pc, #52]	; (2de8 <PHY_Init+0x48>)
    2db4:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2db6:	4e0d      	ldr	r6, [pc, #52]	; (2dec <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2db8:	4d0d      	ldr	r5, [pc, #52]	; (2df0 <PHY_Init+0x50>)
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2dba:	241f      	movs	r4, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2dbc:	2108      	movs	r1, #8
    2dbe:	2002      	movs	r0, #2
    2dc0:	47b0      	blx	r6
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2dc2:	2001      	movs	r0, #1
    2dc4:	47a8      	blx	r5
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2dc6:	4020      	ands	r0, r4
    2dc8:	2808      	cmp	r0, #8
    2dca:	d1f7      	bne.n	2dbc <PHY_Init+0x1c>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2dcc:	212e      	movs	r1, #46	; 0x2e
    2dce:	3804      	subs	r0, #4
    2dd0:	4c06      	ldr	r4, [pc, #24]	; (2dec <PHY_Init+0x4c>)
    2dd2:	47a0      	blx	r4
    2dd4:	21a0      	movs	r1, #160	; 0xa0
    2dd6:	200c      	movs	r0, #12
    2dd8:	47a0      	blx	r4
			(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
			(1 << IRQ_MASK_MODE));

	phyWriteRegister(TRX_CTRL_2_REG,
			(1 << RX_SAFE_MODE) | (1 << OQPSK_SCRAM_EN));
}
    2dda:	bd70      	pop	{r4, r5, r6, pc}
    2ddc:	000030c1 	.word	0x000030c1
    2de0:	000031dd 	.word	0x000031dd
    2de4:	2000065d 	.word	0x2000065d
    2de8:	2000065c 	.word	0x2000065c
    2dec:	00003309 	.word	0x00003309
    2df0:	0000320d 	.word	0x0000320d

00002df4 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    2df4:	b510      	push	{r4, lr}
	SYS_TimerInit();
    2df6:	4b04      	ldr	r3, [pc, #16]	; (2e08 <SYS_Init+0x14>)
    2df8:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    2dfa:	4b04      	ldr	r3, [pc, #16]	; (2e0c <SYS_Init+0x18>)
    2dfc:	4798      	blx	r3
#endif
	PHY_Init();
    2dfe:	4b04      	ldr	r3, [pc, #16]	; (2e10 <SYS_Init+0x1c>)
    2e00:	4798      	blx	r3
	NWK_Init();
    2e02:	4b04      	ldr	r3, [pc, #16]	; (2e14 <SYS_Init+0x20>)
    2e04:	4798      	blx	r3
}
    2e06:	bd10      	pop	{r4, pc}
    2e08:	00002e95 	.word	0x00002e95
    2e0c:	000030a1 	.word	0x000030a1
    2e10:	00002da1 	.word	0x00002da1
    2e14:	00002a51 	.word	0x00002a51

00002e18 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    2e18:	b530      	push	{r4, r5, lr}
	if (timers) {
    2e1a:	4b15      	ldr	r3, [pc, #84]	; (2e70 <placeTimer+0x58>)
    2e1c:	681d      	ldr	r5, [r3, #0]
    2e1e:	2d00      	cmp	r5, #0
    2e20:	d01e      	beq.n	2e60 <placeTimer+0x48>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    2e22:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    2e24:	6869      	ldr	r1, [r5, #4]
    2e26:	428a      	cmp	r2, r1
    2e28:	d305      	bcc.n	2e36 <placeTimer+0x1e>
    2e2a:	002c      	movs	r4, r5
    2e2c:	e009      	b.n	2e42 <placeTimer+0x2a>
    2e2e:	6859      	ldr	r1, [r3, #4]
    2e30:	4291      	cmp	r1, r2
    2e32:	d905      	bls.n	2e40 <placeTimer+0x28>
    2e34:	e001      	b.n	2e3a <placeTimer+0x22>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2e36:	002b      	movs	r3, r5
/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
    2e38:	2400      	movs	r4, #0
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
				t->timeout -= timeout;
    2e3a:	1a89      	subs	r1, r1, r2
    2e3c:	6059      	str	r1, [r3, #4]
				break;
    2e3e:	e004      	b.n	2e4a <placeTimer+0x32>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2e40:	001c      	movs	r4, r3
			if (timeout < t->timeout) {
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    2e42:	1a52      	subs	r2, r2, r1
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2e44:	6823      	ldr	r3, [r4, #0]
    2e46:	2b00      	cmp	r3, #0
    2e48:	d1f1      	bne.n	2e2e <placeTimer+0x16>
			}

			prev = t;
		}

		timer->timeout = timeout;
    2e4a:	6042      	str	r2, [r0, #4]

		if (prev) {
    2e4c:	2c00      	cmp	r4, #0
    2e4e:	d003      	beq.n	2e58 <placeTimer+0x40>
			timer->next = prev->next;
    2e50:	6823      	ldr	r3, [r4, #0]
    2e52:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    2e54:	6020      	str	r0, [r4, #0]
    2e56:	e009      	b.n	2e6c <placeTimer+0x54>
		} else {
			timer->next = timers;
    2e58:	6005      	str	r5, [r0, #0]
			timers = timer;
    2e5a:	4b05      	ldr	r3, [pc, #20]	; (2e70 <placeTimer+0x58>)
    2e5c:	6018      	str	r0, [r3, #0]
    2e5e:	e005      	b.n	2e6c <placeTimer+0x54>
		}
	} else {
		timer->next = NULL;
    2e60:	2300      	movs	r3, #0
    2e62:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    2e64:	6883      	ldr	r3, [r0, #8]
    2e66:	6043      	str	r3, [r0, #4]
		timers = timer;
    2e68:	4b01      	ldr	r3, [pc, #4]	; (2e70 <placeTimer+0x58>)
    2e6a:	6018      	str	r0, [r3, #0]
	}
}
    2e6c:	bd30      	pop	{r4, r5, pc}
    2e6e:	46c0      	nop			; (mov r8, r8)
    2e70:	20000660 	.word	0x20000660

00002e74 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    2e74:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    2e76:	4a04      	ldr	r2, [pc, #16]	; (2e88 <SYS_HwExpiry_Cb+0x14>)
    2e78:	7813      	ldrb	r3, [r2, #0]
    2e7a:	3301      	adds	r3, #1
    2e7c:	b2db      	uxtb	r3, r3
    2e7e:	7013      	strb	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2e80:	4802      	ldr	r0, [pc, #8]	; (2e8c <SYS_HwExpiry_Cb+0x18>)
    2e82:	4b03      	ldr	r3, [pc, #12]	; (2e90 <SYS_HwExpiry_Cb+0x1c>)
    2e84:	4798      	blx	r3
}
    2e86:	bd10      	pop	{r4, pc}
    2e88:	20000850 	.word	0x20000850
    2e8c:	00002710 	.word	0x00002710
    2e90:	000034c5 	.word	0x000034c5

00002e94 <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    2e94:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    2e96:	2400      	movs	r4, #0
    2e98:	4b06      	ldr	r3, [pc, #24]	; (2eb4 <SYS_TimerInit+0x20>)
    2e9a:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    2e9c:	4806      	ldr	r0, [pc, #24]	; (2eb8 <SYS_TimerInit+0x24>)
    2e9e:	4b07      	ldr	r3, [pc, #28]	; (2ebc <SYS_TimerInit+0x28>)
    2ea0:	4798      	blx	r3
	common_tc_init();
    2ea2:	4b07      	ldr	r3, [pc, #28]	; (2ec0 <SYS_TimerInit+0x2c>)
    2ea4:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2ea6:	4807      	ldr	r0, [pc, #28]	; (2ec4 <SYS_TimerInit+0x30>)
    2ea8:	4b07      	ldr	r3, [pc, #28]	; (2ec8 <SYS_TimerInit+0x34>)
    2eaa:	4798      	blx	r3
	timers = NULL;
    2eac:	4b07      	ldr	r3, [pc, #28]	; (2ecc <SYS_TimerInit+0x38>)
    2eae:	601c      	str	r4, [r3, #0]
}
    2eb0:	bd10      	pop	{r4, pc}
    2eb2:	46c0      	nop			; (mov r8, r8)
    2eb4:	20000850 	.word	0x20000850
    2eb8:	00002e75 	.word	0x00002e75
    2ebc:	000035b5 	.word	0x000035b5
    2ec0:	00003531 	.word	0x00003531
    2ec4:	00002710 	.word	0x00002710
    2ec8:	000034c5 	.word	0x000034c5
    2ecc:	20000660 	.word	0x20000660

00002ed0 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2ed0:	4b09      	ldr	r3, [pc, #36]	; (2ef8 <SYS_TimerStarted+0x28>)
    2ed2:	681b      	ldr	r3, [r3, #0]
    2ed4:	2b00      	cmp	r3, #0
    2ed6:	d009      	beq.n	2eec <SYS_TimerStarted+0x1c>
		if (t == timer) {
    2ed8:	4283      	cmp	r3, r0
    2eda:	d102      	bne.n	2ee2 <SYS_TimerStarted+0x12>
    2edc:	e008      	b.n	2ef0 <SYS_TimerStarted+0x20>
    2ede:	4298      	cmp	r0, r3
    2ee0:	d008      	beq.n	2ef4 <SYS_TimerStarted+0x24>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2ee2:	681b      	ldr	r3, [r3, #0]
    2ee4:	2b00      	cmp	r3, #0
    2ee6:	d1fa      	bne.n	2ede <SYS_TimerStarted+0xe>
		if (t == timer) {
			return true;
		}
	}
	return false;
    2ee8:	2000      	movs	r0, #0
    2eea:	e004      	b.n	2ef6 <SYS_TimerStarted+0x26>
    2eec:	2000      	movs	r0, #0
    2eee:	e002      	b.n	2ef6 <SYS_TimerStarted+0x26>
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    2ef0:	2001      	movs	r0, #1
    2ef2:	e000      	b.n	2ef6 <SYS_TimerStarted+0x26>
    2ef4:	2001      	movs	r0, #1
		}
	}
	return false;
}
    2ef6:	4770      	bx	lr
    2ef8:	20000660 	.word	0x20000660

00002efc <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    2efc:	b510      	push	{r4, lr}
    2efe:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    2f00:	4b03      	ldr	r3, [pc, #12]	; (2f10 <SYS_TimerStart+0x14>)
    2f02:	4798      	blx	r3
    2f04:	2800      	cmp	r0, #0
    2f06:	d102      	bne.n	2f0e <SYS_TimerStart+0x12>
		placeTimer(timer);
    2f08:	0020      	movs	r0, r4
    2f0a:	4b02      	ldr	r3, [pc, #8]	; (2f14 <SYS_TimerStart+0x18>)
    2f0c:	4798      	blx	r3
	}
}
    2f0e:	bd10      	pop	{r4, pc}
    2f10:	00002ed1 	.word	0x00002ed1
    2f14:	00002e19 	.word	0x00002e19

00002f18 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    2f18:	b510      	push	{r4, lr}
	tmr_cca_callback();
    2f1a:	4b01      	ldr	r3, [pc, #4]	; (2f20 <tc_cca_callback+0x8>)
    2f1c:	4798      	blx	r3
}
    2f1e:	bd10      	pop	{r4, pc}
    2f20:	00003599 	.word	0x00003599

00002f24 <tc_ovf_callback>:
{
	cpu_irq_restore((uint32_t)flags);
}

static void tc_ovf_callback(struct tc_module *const module_instance)
{
    2f24:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    2f26:	4b01      	ldr	r3, [pc, #4]	; (2f2c <tc_ovf_callback+0x8>)
    2f28:	4798      	blx	r3
}
    2f2a:	bd10      	pop	{r4, pc}
    2f2c:	00003551 	.word	0x00003551

00002f30 <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
    2f30:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    2f32:	4802      	ldr	r0, [pc, #8]	; (2f3c <tmr_read_count+0xc>)
    2f34:	4b02      	ldr	r3, [pc, #8]	; (2f40 <tmr_read_count+0x10>)
    2f36:	4798      	blx	r3
    2f38:	b280      	uxth	r0, r0
}
    2f3a:	bd10      	pop	{r4, pc}
    2f3c:	20000888 	.word	0x20000888
    2f40:	00002801 	.word	0x00002801

00002f44 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    2f44:	4b03      	ldr	r3, [pc, #12]	; (2f54 <tmr_disable_cc_interrupt+0x10>)
    2f46:	2110      	movs	r1, #16
    2f48:	681a      	ldr	r2, [r3, #0]
    2f4a:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    2f4c:	7e5a      	ldrb	r2, [r3, #25]
    2f4e:	438a      	bics	r2, r1
    2f50:	765a      	strb	r2, [r3, #25]
/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    2f52:	4770      	bx	lr
    2f54:	20000888 	.word	0x20000888

00002f58 <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
    2f58:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2f5a:	4c0a      	ldr	r4, [pc, #40]	; (2f84 <tmr_enable_cc_interrupt+0x2c>)
    2f5c:	6820      	ldr	r0, [r4, #0]
    2f5e:	4b0a      	ldr	r3, [pc, #40]	; (2f88 <tmr_enable_cc_interrupt+0x30>)
    2f60:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2f62:	4b0a      	ldr	r3, [pc, #40]	; (2f8c <tmr_enable_cc_interrupt+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2f64:	5c1b      	ldrb	r3, [r3, r0]
    2f66:	221f      	movs	r2, #31
    2f68:	401a      	ands	r2, r3
    2f6a:	2301      	movs	r3, #1
    2f6c:	4093      	lsls	r3, r2
    2f6e:	4a08      	ldr	r2, [pc, #32]	; (2f90 <tmr_enable_cc_interrupt+0x38>)
    2f70:	6013      	str	r3, [r2, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2f72:	7e62      	ldrb	r2, [r4, #25]
    2f74:	2310      	movs	r3, #16
    2f76:	4313      	orrs	r3, r2
    2f78:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2f7a:	6823      	ldr	r3, [r4, #0]
    2f7c:	2210      	movs	r2, #16
    2f7e:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    2f80:	bd10      	pop	{r4, pc}
    2f82:	46c0      	nop			; (mov r8, r8)
    2f84:	20000888 	.word	0x20000888
    2f88:	0000254d 	.word	0x0000254d
    2f8c:	00008bd4 	.word	0x00008bd4
    2f90:	e000e100 	.word	0xe000e100

00002f94 <tmr_write_cmpreg>:
}

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
    2f94:	b510      	push	{r4, lr}
    2f96:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    2f98:	2100      	movs	r1, #0
    2f9a:	4802      	ldr	r0, [pc, #8]	; (2fa4 <tmr_write_cmpreg+0x10>)
    2f9c:	4b02      	ldr	r3, [pc, #8]	; (2fa8 <tmr_write_cmpreg+0x14>)
    2f9e:	4798      	blx	r3
			(uint32_t)compare_value);
}
    2fa0:	bd10      	pop	{r4, pc}
    2fa2:	46c0      	nop			; (mov r8, r8)
    2fa4:	20000888 	.word	0x20000888
    2fa8:	00002831 	.word	0x00002831

00002fac <tmr_init>:
}

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    2fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fae:	464f      	mov	r7, r9
    2fb0:	4646      	mov	r6, r8
    2fb2:	b4c0      	push	{r6, r7}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    2fb4:	4a2d      	ldr	r2, [pc, #180]	; (306c <tmr_init+0xc0>)
    2fb6:	2300      	movs	r3, #0
    2fb8:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    2fba:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    2fbc:	2100      	movs	r1, #0
    2fbe:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    2fc0:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2fc2:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2fc4:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2fc6:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2fc8:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2fca:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2fcc:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    2fce:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2fd0:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2fd2:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2fd4:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2fd6:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2fd8:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2fda:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    2fdc:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2fde:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    2fe0:	3b01      	subs	r3, #1
    2fe2:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    2fe4:	4c22      	ldr	r4, [pc, #136]	; (3070 <tmr_init+0xc4>)
    2fe6:	4923      	ldr	r1, [pc, #140]	; (3074 <tmr_init+0xc8>)
    2fe8:	0020      	movs	r0, r4
    2fea:	4b23      	ldr	r3, [pc, #140]	; (3078 <tmr_init+0xcc>)
    2fec:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    2fee:	2200      	movs	r2, #0
    2ff0:	4922      	ldr	r1, [pc, #136]	; (307c <tmr_init+0xd0>)
    2ff2:	0020      	movs	r0, r4
    2ff4:	4d22      	ldr	r5, [pc, #136]	; (3080 <tmr_init+0xd4>)
    2ff6:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    2ff8:	2202      	movs	r2, #2
    2ffa:	4922      	ldr	r1, [pc, #136]	; (3084 <tmr_init+0xd8>)
    2ffc:	0020      	movs	r0, r4
    2ffe:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3000:	6820      	ldr	r0, [r4, #0]
    3002:	4b21      	ldr	r3, [pc, #132]	; (3088 <tmr_init+0xdc>)
    3004:	4699      	mov	r9, r3
    3006:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    3008:	4b20      	ldr	r3, [pc, #128]	; (308c <tmr_init+0xe0>)
    300a:	4698      	mov	r8, r3
    300c:	5c1b      	ldrb	r3, [r3, r0]
    300e:	271f      	movs	r7, #31
    3010:	403b      	ands	r3, r7
    3012:	2501      	movs	r5, #1
    3014:	002a      	movs	r2, r5
    3016:	409a      	lsls	r2, r3
    3018:	4e1d      	ldr	r6, [pc, #116]	; (3090 <tmr_init+0xe4>)
    301a:	6032      	str	r2, [r6, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    301c:	7e62      	ldrb	r2, [r4, #25]
    301e:	2301      	movs	r3, #1
    3020:	4313      	orrs	r3, r2
    3022:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    3024:	6823      	ldr	r3, [r4, #0]
    3026:	735d      	strb	r5, [r3, #13]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3028:	0018      	movs	r0, r3
    302a:	47c8      	blx	r9
    302c:	4643      	mov	r3, r8
    302e:	5c1b      	ldrb	r3, [r3, r0]
    3030:	403b      	ands	r3, r7
    3032:	409d      	lsls	r5, r3
    3034:	6035      	str	r5, [r6, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    3036:	7e62      	ldrb	r2, [r4, #25]
    3038:	2310      	movs	r3, #16
    303a:	4313      	orrs	r3, r2
    303c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    303e:	6822      	ldr	r2, [r4, #0]
    3040:	2310      	movs	r3, #16
    3042:	7353      	strb	r3, [r2, #13]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3044:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3046:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3048:	438b      	bics	r3, r1
    304a:	d1fc      	bne.n	3046 <tmr_init+0x9a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    304c:	8811      	ldrh	r1, [r2, #0]
    304e:	3302      	adds	r3, #2
    3050:	430b      	orrs	r3, r1
    3052:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    3054:	2000      	movs	r0, #0
    3056:	4b0f      	ldr	r3, [pc, #60]	; (3094 <tmr_init+0xe8>)
    3058:	4798      	blx	r3
	#endif
	return timer_multiplier;
    305a:	490f      	ldr	r1, [pc, #60]	; (3098 <tmr_init+0xec>)
    305c:	4b0f      	ldr	r3, [pc, #60]	; (309c <tmr_init+0xf0>)
    305e:	4798      	blx	r3
    3060:	b2c0      	uxtb	r0, r0
}
    3062:	bc0c      	pop	{r2, r3}
    3064:	4690      	mov	r8, r2
    3066:	4699      	mov	r9, r3
    3068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    306a:	46c0      	nop			; (mov r8, r8)
    306c:	20000854 	.word	0x20000854
    3070:	20000888 	.word	0x20000888
    3074:	42002c00 	.word	0x42002c00
    3078:	00002585 	.word	0x00002585
    307c:	00002f25 	.word	0x00002f25
    3080:	00002491 	.word	0x00002491
    3084:	00002f19 	.word	0x00002f19
    3088:	0000254d 	.word	0x0000254d
    308c:	00008bd4 	.word	0x00008bd4
    3090:	e000e100 	.word	0xe000e100
    3094:	00002221 	.word	0x00002221
    3098:	000f4240 	.word	0x000f4240
    309c:	00005f51 	.word	0x00005f51

000030a0 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    30a0:	4770      	bx	lr
    30a2:	46c0      	nop			; (mov r8, r8)

000030a4 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    30a4:	b510      	push	{r4, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    30a6:	2201      	movs	r2, #1
    30a8:	4b03      	ldr	r3, [pc, #12]	; (30b8 <AT86RFX_ISR+0x14>)
    30aa:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    30ac:	4b03      	ldr	r3, [pc, #12]	; (30bc <AT86RFX_ISR+0x18>)
    30ae:	681b      	ldr	r3, [r3, #0]
    30b0:	2b00      	cmp	r3, #0
    30b2:	d000      	beq.n	30b6 <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    30b4:	4798      	blx	r3
	}
}
    30b6:	bd10      	pop	{r4, pc}
    30b8:	40001800 	.word	0x40001800
    30bc:	20000664 	.word	0x20000664

000030c0 <trx_spi_init>:

void trx_spi_init(void)
{
    30c0:	b530      	push	{r4, r5, lr}
    30c2:	b085      	sub	sp, #20
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    30c4:	4a34      	ldr	r2, [pc, #208]	; (3198 <trx_spi_init+0xd8>)
    30c6:	2300      	movs	r3, #0
    30c8:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    30ca:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    30cc:	213f      	movs	r1, #63	; 0x3f
    30ce:	7011      	strb	r1, [r2, #0]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    30d0:	4c32      	ldr	r4, [pc, #200]	; (319c <trx_spi_init+0xdc>)
    30d2:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    30d4:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    30d6:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    30d8:	2201      	movs	r2, #1
    30da:	4669      	mov	r1, sp
    30dc:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    30de:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    30e0:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    30e2:	203f      	movs	r0, #63	; 0x3f
    30e4:	4b2e      	ldr	r3, [pc, #184]	; (31a0 <trx_spi_init+0xe0>)
    30e6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    30e8:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    30ea:	09da      	lsrs	r2, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    30ec:	2100      	movs	r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    30ee:	2a00      	cmp	r2, #0
    30f0:	d104      	bne.n	30fc <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    30f2:	0959      	lsrs	r1, r3, #5
    30f4:	01c9      	lsls	r1, r1, #7
    30f6:	4a2b      	ldr	r2, [pc, #172]	; (31a4 <trx_spi_init+0xe4>)
    30f8:	4694      	mov	ip, r2
    30fa:	4461      	add	r1, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    30fc:	221f      	movs	r2, #31
    30fe:	4013      	ands	r3, r2
    3100:	3a1e      	subs	r2, #30
    3102:	0010      	movs	r0, r2
    3104:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3106:	6188      	str	r0, [r1, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    3108:	4c27      	ldr	r4, [pc, #156]	; (31a8 <trx_spi_init+0xe8>)
    310a:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    310c:	2300      	movs	r3, #0
    310e:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3110:	60a3      	str	r3, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3112:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    3114:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    3116:	74a2      	strb	r2, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    3118:	74e2      	strb	r2, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    311a:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    311c:	3223      	adds	r2, #35	; 0x23
    311e:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3120:	0020      	movs	r0, r4
    3122:	3018      	adds	r0, #24
    3124:	3a18      	subs	r2, #24
    3126:	2100      	movs	r1, #0
    3128:	4b20      	ldr	r3, [pc, #128]	; (31ac <trx_spi_init+0xec>)
    312a:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    312c:	2380      	movs	r3, #128	; 0x80
    312e:	025b      	lsls	r3, r3, #9
    3130:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    3132:	4b1f      	ldr	r3, [pc, #124]	; (31b0 <trx_spi_init+0xf0>)
    3134:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    3136:	4b1f      	ldr	r3, [pc, #124]	; (31b4 <trx_spi_init+0xf4>)
    3138:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    313a:	2301      	movs	r3, #1
    313c:	425b      	negs	r3, r3
    313e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    3140:	4b1d      	ldr	r3, [pc, #116]	; (31b8 <trx_spi_init+0xf8>)
    3142:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    3144:	4b1d      	ldr	r3, [pc, #116]	; (31bc <trx_spi_init+0xfc>)
    3146:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    3148:	4d1d      	ldr	r5, [pc, #116]	; (31c0 <trx_spi_init+0x100>)
    314a:	0022      	movs	r2, r4
    314c:	491d      	ldr	r1, [pc, #116]	; (31c4 <trx_spi_init+0x104>)
    314e:	0028      	movs	r0, r5
    3150:	4b1d      	ldr	r3, [pc, #116]	; (31c8 <trx_spi_init+0x108>)
    3152:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3154:	682a      	ldr	r2, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    3156:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    3158:	2b00      	cmp	r3, #0
    315a:	d1fc      	bne.n	3156 <trx_spi_init+0x96>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    315c:	6813      	ldr	r3, [r2, #0]
    315e:	2502      	movs	r5, #2
    3160:	432b      	orrs	r3, r5
    3162:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    3164:	ac01      	add	r4, sp, #4
    3166:	0020      	movs	r0, r4
    3168:	4b18      	ldr	r3, [pc, #96]	; (31cc <trx_spi_init+0x10c>)
    316a:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    316c:	2320      	movs	r3, #32
    316e:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    3170:	2380      	movs	r3, #128	; 0x80
    3172:	039b      	lsls	r3, r3, #14
    3174:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    3176:	7225      	strb	r5, [r4, #8]
	#if (SAML21)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    3178:	2301      	movs	r3, #1
    317a:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    317c:	2200      	movs	r2, #0
    317e:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    3180:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    3182:	0021      	movs	r1, r4
    3184:	2000      	movs	r0, #0
    3186:	4b12      	ldr	r3, [pc, #72]	; (31d0 <trx_spi_init+0x110>)
    3188:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    318a:	2200      	movs	r2, #0
    318c:	2100      	movs	r1, #0
    318e:	4811      	ldr	r0, [pc, #68]	; (31d4 <trx_spi_init+0x114>)
    3190:	4b11      	ldr	r3, [pc, #68]	; (31d8 <trx_spi_init+0x118>)
    3192:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    3194:	b005      	add	sp, #20
    3196:	bd30      	pop	{r4, r5, pc}
    3198:	200008a8 	.word	0x200008a8
    319c:	200008ac 	.word	0x200008ac
    31a0:	00000ce9 	.word	0x00000ce9
    31a4:	41004400 	.word	0x41004400
    31a8:	200008b0 	.word	0x200008b0
    31ac:	0000361f 	.word	0x0000361f
    31b0:	004c4b40 	.word	0x004c4b40
    31b4:	00530005 	.word	0x00530005
    31b8:	003e0005 	.word	0x003e0005
    31bc:	00520005 	.word	0x00520005
    31c0:	200008e8 	.word	0x200008e8
    31c4:	42001800 	.word	0x42001800
    31c8:	000011d9 	.word	0x000011d9
    31cc:	00000c61 	.word	0x00000c61
    31d0:	00000c75 	.word	0x00000c75
    31d4:	000030a5 	.word	0x000030a5
    31d8:	00000b49 	.word	0x00000b49

000031dc <PhyReset>:

void PhyReset(void)
{
    31dc:	b570      	push	{r4, r5, r6, lr}
    31de:	4b09      	ldr	r3, [pc, #36]	; (3204 <PhyReset+0x28>)
    31e0:	001c      	movs	r4, r3
    31e2:	3480      	adds	r4, #128	; 0x80
    31e4:	2580      	movs	r5, #128	; 0x80
    31e6:	022d      	lsls	r5, r5, #8
    31e8:	61a5      	str	r5, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    31ea:	2280      	movs	r2, #128	; 0x80
    31ec:	0352      	lsls	r2, r2, #13
    31ee:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    31f0:	20a5      	movs	r0, #165	; 0xa5
    31f2:	0040      	lsls	r0, r0, #1
    31f4:	4e04      	ldr	r6, [pc, #16]	; (3208 <PhyReset+0x2c>)
    31f6:	47b0      	blx	r6
    31f8:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    31fa:	200a      	movs	r0, #10
    31fc:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    31fe:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    3200:	bd70      	pop	{r4, r5, r6, pc}
    3202:	46c0      	nop			; (mov r8, r8)
    3204:	41004400 	.word	0x41004400
    3208:	000009dd 	.word	0x000009dd

0000320c <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    320c:	b570      	push	{r4, r5, r6, lr}
    320e:	b082      	sub	sp, #8
    3210:	0005      	movs	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3212:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3216:	425a      	negs	r2, r3
    3218:	4153      	adcs	r3, r2
    321a:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    321c:	b672      	cpsid	i
    321e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3222:	2200      	movs	r2, #0
    3224:	4b33      	ldr	r3, [pc, #204]	; (32f4 <trx_reg_read+0xe8>)
    3226:	701a      	strb	r2, [r3, #0]
	return flags;
    3228:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    322a:	4e33      	ldr	r6, [pc, #204]	; (32f8 <trx_reg_read+0xec>)
    322c:	3201      	adds	r2, #1
    322e:	4933      	ldr	r1, [pc, #204]	; (32fc <trx_reg_read+0xf0>)
    3230:	0030      	movs	r0, r6
    3232:	4b33      	ldr	r3, [pc, #204]	; (3300 <trx_reg_read+0xf4>)
    3234:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3236:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3238:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    323a:	7e1a      	ldrb	r2, [r3, #24]
    323c:	420a      	tst	r2, r1
    323e:	d0fc      	beq.n	323a <trx_reg_read+0x2e>
    3240:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3242:	07d2      	lsls	r2, r2, #31
    3244:	d502      	bpl.n	324c <trx_reg_read+0x40>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3246:	2280      	movs	r2, #128	; 0x80
    3248:	4315      	orrs	r5, r2
    324a:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    324c:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    324e:	7e1a      	ldrb	r2, [r3, #24]
    3250:	420a      	tst	r2, r1
    3252:	d0fc      	beq.n	324e <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3254:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3256:	7e1a      	ldrb	r2, [r3, #24]
    3258:	420a      	tst	r2, r1
    325a:	d0fc      	beq.n	3256 <trx_reg_read+0x4a>
    325c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    325e:	0752      	lsls	r2, r2, #29
    3260:	d512      	bpl.n	3288 <trx_reg_read+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3262:	8b5a      	ldrh	r2, [r3, #26]
    3264:	0752      	lsls	r2, r2, #29
    3266:	d501      	bpl.n	326c <trx_reg_read+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3268:	2204      	movs	r2, #4
    326a:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    326c:	4a22      	ldr	r2, [pc, #136]	; (32f8 <trx_reg_read+0xec>)
    326e:	7992      	ldrb	r2, [r2, #6]
    3270:	2a01      	cmp	r2, #1
    3272:	d105      	bne.n	3280 <trx_reg_read+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3276:	05d2      	lsls	r2, r2, #23
    3278:	0dd2      	lsrs	r2, r2, #23
    327a:	4922      	ldr	r1, [pc, #136]	; (3304 <trx_reg_read+0xf8>)
    327c:	800a      	strh	r2, [r1, #0]
    327e:	e003      	b.n	3288 <trx_reg_read+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3282:	b2d2      	uxtb	r2, r2
    3284:	491f      	ldr	r1, [pc, #124]	; (3304 <trx_reg_read+0xf8>)
    3286:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    3288:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    328a:	7e1a      	ldrb	r2, [r3, #24]
    328c:	420a      	tst	r2, r1
    328e:	d0fc      	beq.n	328a <trx_reg_read+0x7e>
    3290:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3292:	07d2      	lsls	r2, r2, #31
    3294:	d501      	bpl.n	329a <trx_reg_read+0x8e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3296:	2200      	movs	r2, #0
    3298:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    329a:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    329c:	7e1a      	ldrb	r2, [r3, #24]
    329e:	420a      	tst	r2, r1
    32a0:	d0fc      	beq.n	329c <trx_reg_read+0x90>
	}
	while (!spi_is_ready_to_read(&master)) {
    32a2:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    32a4:	7e1a      	ldrb	r2, [r3, #24]
    32a6:	420a      	tst	r2, r1
    32a8:	d0fc      	beq.n	32a4 <trx_reg_read+0x98>
    32aa:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMR21 || SAML21
	uint16_t register_value = 0;
    32ac:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    32ae:	0752      	lsls	r2, r2, #29
    32b0:	d50e      	bpl.n	32d0 <trx_reg_read+0xc4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    32b2:	8b5a      	ldrh	r2, [r3, #26]
    32b4:	0752      	lsls	r2, r2, #29
    32b6:	d501      	bpl.n	32bc <trx_reg_read+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    32b8:	2204      	movs	r2, #4
    32ba:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    32bc:	4a0e      	ldr	r2, [pc, #56]	; (32f8 <trx_reg_read+0xec>)
    32be:	7992      	ldrb	r2, [r2, #6]
    32c0:	2a01      	cmp	r2, #1
    32c2:	d103      	bne.n	32cc <trx_reg_read+0xc0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    32c4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    32c6:	05ed      	lsls	r5, r5, #23
    32c8:	0ded      	lsrs	r5, r5, #23
    32ca:	e001      	b.n	32d0 <trx_reg_read+0xc4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    32cc:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    32ce:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    32d0:	2200      	movs	r2, #0
    32d2:	490a      	ldr	r1, [pc, #40]	; (32fc <trx_reg_read+0xf0>)
    32d4:	4808      	ldr	r0, [pc, #32]	; (32f8 <trx_reg_read+0xec>)
    32d6:	4b0a      	ldr	r3, [pc, #40]	; (3300 <trx_reg_read+0xf4>)
    32d8:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    32da:	23ff      	movs	r3, #255	; 0xff
    32dc:	4223      	tst	r3, r4
    32de:	d005      	beq.n	32ec <trx_reg_read+0xe0>
		cpu_irq_enable();
    32e0:	2201      	movs	r2, #1
    32e2:	4b04      	ldr	r3, [pc, #16]	; (32f4 <trx_reg_read+0xe8>)
    32e4:	701a      	strb	r2, [r3, #0]
    32e6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    32ea:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    32ec:	b2e8      	uxtb	r0, r5
}
    32ee:	b002      	add	sp, #8
    32f0:	bd70      	pop	{r4, r5, r6, pc}
    32f2:	46c0      	nop			; (mov r8, r8)
    32f4:	20000008 	.word	0x20000008
    32f8:	200008e8 	.word	0x200008e8
    32fc:	200008ac 	.word	0x200008ac
    3300:	00001485 	.word	0x00001485
    3304:	200008a4 	.word	0x200008a4

00003308 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    3308:	b5f0      	push	{r4, r5, r6, r7, lr}
    330a:	b083      	sub	sp, #12
    330c:	0006      	movs	r6, r0
    330e:	000c      	movs	r4, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3310:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3314:	425a      	negs	r2, r3
    3316:	4153      	adcs	r3, r2
    3318:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    331a:	b672      	cpsid	i
    331c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3320:	2200      	movs	r2, #0
    3322:	4b34      	ldr	r3, [pc, #208]	; (33f4 <trx_reg_write+0xec>)
    3324:	701a      	strb	r2, [r3, #0]
	return flags;
    3326:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3328:	4f33      	ldr	r7, [pc, #204]	; (33f8 <trx_reg_write+0xf0>)
    332a:	3201      	adds	r2, #1
    332c:	4933      	ldr	r1, [pc, #204]	; (33fc <trx_reg_write+0xf4>)
    332e:	0038      	movs	r0, r7
    3330:	4b33      	ldr	r3, [pc, #204]	; (3400 <trx_reg_write+0xf8>)
    3332:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3334:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3336:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3338:	7e1a      	ldrb	r2, [r3, #24]
    333a:	420a      	tst	r2, r1
    333c:	d0fc      	beq.n	3338 <trx_reg_write+0x30>
    333e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3340:	07d2      	lsls	r2, r2, #31
    3342:	d502      	bpl.n	334a <trx_reg_write+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3344:	22c0      	movs	r2, #192	; 0xc0
    3346:	4316      	orrs	r6, r2
    3348:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    334a:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    334c:	7e1a      	ldrb	r2, [r3, #24]
    334e:	420a      	tst	r2, r1
    3350:	d0fc      	beq.n	334c <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3352:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3354:	7e1a      	ldrb	r2, [r3, #24]
    3356:	420a      	tst	r2, r1
    3358:	d0fc      	beq.n	3354 <trx_reg_write+0x4c>
    335a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    335c:	0752      	lsls	r2, r2, #29
    335e:	d512      	bpl.n	3386 <trx_reg_write+0x7e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3360:	8b5a      	ldrh	r2, [r3, #26]
    3362:	0752      	lsls	r2, r2, #29
    3364:	d501      	bpl.n	336a <trx_reg_write+0x62>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3366:	2204      	movs	r2, #4
    3368:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    336a:	4a23      	ldr	r2, [pc, #140]	; (33f8 <trx_reg_write+0xf0>)
    336c:	7992      	ldrb	r2, [r2, #6]
    336e:	2a01      	cmp	r2, #1
    3370:	d105      	bne.n	337e <trx_reg_write+0x76>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3374:	05d2      	lsls	r2, r2, #23
    3376:	0dd2      	lsrs	r2, r2, #23
    3378:	4922      	ldr	r1, [pc, #136]	; (3404 <trx_reg_write+0xfc>)
    337a:	800a      	strh	r2, [r1, #0]
    337c:	e003      	b.n	3386 <trx_reg_write+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    337e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3380:	b2d2      	uxtb	r2, r2
    3382:	4920      	ldr	r1, [pc, #128]	; (3404 <trx_reg_write+0xfc>)
    3384:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    3386:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3388:	7e1a      	ldrb	r2, [r3, #24]
    338a:	420a      	tst	r2, r1
    338c:	d0fc      	beq.n	3388 <trx_reg_write+0x80>
    338e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3390:	07d2      	lsls	r2, r2, #31
    3392:	d500      	bpl.n	3396 <trx_reg_write+0x8e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3394:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    3396:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3398:	7e1a      	ldrb	r2, [r3, #24]
    339a:	420a      	tst	r2, r1
    339c:	d0fc      	beq.n	3398 <trx_reg_write+0x90>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    339e:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    33a0:	7e1a      	ldrb	r2, [r3, #24]
    33a2:	420a      	tst	r2, r1
    33a4:	d0fc      	beq.n	33a0 <trx_reg_write+0x98>
    33a6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    33a8:	0752      	lsls	r2, r2, #29
    33aa:	d512      	bpl.n	33d2 <trx_reg_write+0xca>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    33ac:	8b5a      	ldrh	r2, [r3, #26]
    33ae:	0752      	lsls	r2, r2, #29
    33b0:	d501      	bpl.n	33b6 <trx_reg_write+0xae>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    33b2:	2204      	movs	r2, #4
    33b4:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    33b6:	4a10      	ldr	r2, [pc, #64]	; (33f8 <trx_reg_write+0xf0>)
    33b8:	7992      	ldrb	r2, [r2, #6]
    33ba:	2a01      	cmp	r2, #1
    33bc:	d105      	bne.n	33ca <trx_reg_write+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    33be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33c0:	05db      	lsls	r3, r3, #23
    33c2:	0ddb      	lsrs	r3, r3, #23
    33c4:	4a0f      	ldr	r2, [pc, #60]	; (3404 <trx_reg_write+0xfc>)
    33c6:	8013      	strh	r3, [r2, #0]
    33c8:	e003      	b.n	33d2 <trx_reg_write+0xca>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    33ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33cc:	b2db      	uxtb	r3, r3
    33ce:	4a0d      	ldr	r2, [pc, #52]	; (3404 <trx_reg_write+0xfc>)
    33d0:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    33d2:	2200      	movs	r2, #0
    33d4:	4909      	ldr	r1, [pc, #36]	; (33fc <trx_reg_write+0xf4>)
    33d6:	4808      	ldr	r0, [pc, #32]	; (33f8 <trx_reg_write+0xf0>)
    33d8:	4b09      	ldr	r3, [pc, #36]	; (3400 <trx_reg_write+0xf8>)
    33da:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    33dc:	23ff      	movs	r3, #255	; 0xff
    33de:	422b      	tst	r3, r5
    33e0:	d005      	beq.n	33ee <trx_reg_write+0xe6>
		cpu_irq_enable();
    33e2:	2201      	movs	r2, #1
    33e4:	4b03      	ldr	r3, [pc, #12]	; (33f4 <trx_reg_write+0xec>)
    33e6:	701a      	strb	r2, [r3, #0]
    33e8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    33ec:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    33ee:	b003      	add	sp, #12
    33f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33f2:	46c0      	nop			; (mov r8, r8)
    33f4:	20000008 	.word	0x20000008
    33f8:	200008e8 	.word	0x200008e8
    33fc:	200008ac 	.word	0x200008ac
    3400:	00001485 	.word	0x00001485
    3404:	200008a4 	.word	0x200008a4

00003408 <setup>:
#include "sys.h"
#include "TheArtist.h"
/************************************************************************/
/*                                                                      */
/************************************************************************/
void setup(void) {
    3408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// [SYSTEM INITIALIZE]
	// [NOTICE!]!! sequence of this calls is important!
	irq_initialize_vectors();
	system_init();
    340a:	4b1b      	ldr	r3, [pc, #108]	; (3478 <setup+0x70>)
    340c:	4798      	blx	r3
	delay_init();
    340e:	4b1b      	ldr	r3, [pc, #108]	; (347c <setup+0x74>)
    3410:	4798      	blx	r3
	SYS_Init();	
    3412:	4b1b      	ldr	r3, [pc, #108]	; (3480 <setup+0x78>)
    3414:	4798      	blx	r3
	
	artist_ultrasonic_tc_configure();
    3416:	4b1b      	ldr	r3, [pc, #108]	; (3484 <setup+0x7c>)
    3418:	4798      	blx	r3
	artist_scheduler_tc_configure();
    341a:	4b1b      	ldr	r3, [pc, #108]	; (3488 <setup+0x80>)
    341c:	4798      	blx	r3
	artist_configure_tc_callbacks();  
    341e:	4b1b      	ldr	r3, [pc, #108]	; (348c <setup+0x84>)
    3420:	4798      	blx	r3
	artist_init_maze(); 
    3422:	4b1b      	ldr	r3, [pc, #108]	; (3490 <setup+0x88>)
    3424:	4798      	blx	r3

	cpu_irq_enable();
    3426:	4e1b      	ldr	r6, [pc, #108]	; (3494 <setup+0x8c>)
    3428:	2701      	movs	r7, #1
    342a:	7037      	strb	r7, [r6, #0]
    342c:	f3bf 8f5f 	dmb	sy
    3430:	b662      	cpsie	i
	
	// [ultrasonic]
	artist_ultrasonic_configure(&(artist_front.us_instance_right),
    3432:	4c19      	ldr	r4, [pc, #100]	; (3498 <setup+0x90>)
    3434:	220f      	movs	r2, #15
    3436:	211c      	movs	r1, #28
    3438:	0020      	movs	r0, r4
    343a:	4d18      	ldr	r5, [pc, #96]	; (349c <setup+0x94>)
    343c:	47a8      	blx	r5
	CONF_ARTIST_RIGHT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_center),
    343e:	0020      	movs	r0, r4
    3440:	3810      	subs	r0, #16
    3442:	220f      	movs	r2, #15
    3444:	210d      	movs	r1, #13
    3446:	47a8      	blx	r5
	CONF_ARTIST_CENTER_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_left),
    3448:	0020      	movs	r0, r4
    344a:	3808      	subs	r0, #8
    344c:	220f      	movs	r2, #15
    344e:	2117      	movs	r1, #23
    3450:	47a8      	blx	r5
	CONF_ARTIST_LEFT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_gpio_init();
    3452:	4b13      	ldr	r3, [pc, #76]	; (34a0 <setup+0x98>)
    3454:	4798      	blx	r3
	
	//! [ultrasonic]
	
	
	artist_usart_configure(&(artist_front.usart_instance));
    3456:	3c4c      	subs	r4, #76	; 0x4c
    3458:	0020      	movs	r0, r4
    345a:	4b12      	ldr	r3, [pc, #72]	; (34a4 <setup+0x9c>)
    345c:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    345e:	7037      	strb	r7, [r6, #0]
    3460:	f3bf 8f5f 	dmb	sy
    3464:	b662      	cpsie	i
	
	system_interrupt_enable_global();

	
	usart_read_buffer_job( &(artist_front.usart_instance),
    3466:	2205      	movs	r2, #5
    3468:	490f      	ldr	r1, [pc, #60]	; (34a8 <setup+0xa0>)
    346a:	0020      	movs	r0, r4
    346c:	4b0f      	ldr	r3, [pc, #60]	; (34ac <setup+0xa4>)
    346e:	4798      	blx	r3
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
	
	printf("front node setup complete\n"); 
    3470:	480f      	ldr	r0, [pc, #60]	; (34b0 <setup+0xa8>)
    3472:	4b10      	ldr	r3, [pc, #64]	; (34b4 <setup+0xac>)
    3474:	4798      	blx	r3
	
}
    3476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3478:	00002465 	.word	0x00002465
    347c:	0000099d 	.word	0x0000099d
    3480:	00002df5 	.word	0x00002df5
    3484:	00000671 	.word	0x00000671
    3488:	000008dd 	.word	0x000008dd
    348c:	0000094d 	.word	0x0000094d
    3490:	00000115 	.word	0x00000115
    3494:	20000008 	.word	0x20000008
    3498:	20000748 	.word	0x20000748
    349c:	000002dd 	.word	0x000002dd
    34a0:	000002ed 	.word	0x000002ed
    34a4:	00000705 	.word	0x00000705
    34a8:	20000760 	.word	0x20000760
    34ac:	00001a0d 	.word	0x00001a0d
    34b0:	00008bd8 	.word	0x00008bd8
    34b4:	00004015 	.word	0x00004015

000034b8 <main>:
	
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
int main (void) {
    34b8:	b510      	push	{r4, lr}
	setup();
    34ba:	4b01      	ldr	r3, [pc, #4]	; (34c0 <main+0x8>)
    34bc:	4798      	blx	r3
    34be:	e7fe      	b.n	34be <main+0x6>
    34c0:	00003409 	.word	0x00003409

000034c4 <common_tc_delay>:
    34c4:	b510      	push	{r4, lr}
    34c6:	1c04      	adds	r4, r0, #0
    34c8:	4b13      	ldr	r3, [pc, #76]	; (3518 <common_tc_delay+0x54>)
    34ca:	4798      	blx	r3
    34cc:	4b13      	ldr	r3, [pc, #76]	; (351c <common_tc_delay+0x58>)
    34ce:	781a      	ldrb	r2, [r3, #0]
    34d0:	4362      	muls	r2, r4
    34d2:	1881      	adds	r1, r0, r2
    34d4:	4b12      	ldr	r3, [pc, #72]	; (3520 <common_tc_delay+0x5c>)
    34d6:	6059      	str	r1, [r3, #4]
    34d8:	6859      	ldr	r1, [r3, #4]
    34da:	0c09      	lsrs	r1, r1, #16
    34dc:	6059      	str	r1, [r3, #4]
    34de:	685b      	ldr	r3, [r3, #4]
    34e0:	2b00      	cmp	r3, #0
    34e2:	d007      	beq.n	34f4 <common_tc_delay+0x30>
    34e4:	4b0e      	ldr	r3, [pc, #56]	; (3520 <common_tc_delay+0x5c>)
    34e6:	6859      	ldr	r1, [r3, #4]
    34e8:	3201      	adds	r2, #1
    34ea:	1880      	adds	r0, r0, r2
    34ec:	8118      	strh	r0, [r3, #8]
    34ee:	4b0d      	ldr	r3, [pc, #52]	; (3524 <common_tc_delay+0x60>)
    34f0:	4798      	blx	r3
    34f2:	e004      	b.n	34fe <common_tc_delay+0x3a>
    34f4:	1882      	adds	r2, r0, r2
    34f6:	4b0a      	ldr	r3, [pc, #40]	; (3520 <common_tc_delay+0x5c>)
    34f8:	811a      	strh	r2, [r3, #8]
    34fa:	4b0b      	ldr	r3, [pc, #44]	; (3528 <common_tc_delay+0x64>)
    34fc:	4798      	blx	r3
    34fe:	4b08      	ldr	r3, [pc, #32]	; (3520 <common_tc_delay+0x5c>)
    3500:	891b      	ldrh	r3, [r3, #8]
    3502:	2b63      	cmp	r3, #99	; 0x63
    3504:	d802      	bhi.n	350c <common_tc_delay+0x48>
    3506:	3364      	adds	r3, #100	; 0x64
    3508:	4a05      	ldr	r2, [pc, #20]	; (3520 <common_tc_delay+0x5c>)
    350a:	8113      	strh	r3, [r2, #8]
    350c:	4b04      	ldr	r3, [pc, #16]	; (3520 <common_tc_delay+0x5c>)
    350e:	8918      	ldrh	r0, [r3, #8]
    3510:	4b06      	ldr	r3, [pc, #24]	; (352c <common_tc_delay+0x68>)
    3512:	4798      	blx	r3
    3514:	bd10      	pop	{r4, pc}
    3516:	46c0      	nop			; (mov r8, r8)
    3518:	00002f31 	.word	0x00002f31
    351c:	200008f4 	.word	0x200008f4
    3520:	20000668 	.word	0x20000668
    3524:	00002f45 	.word	0x00002f45
    3528:	00002f59 	.word	0x00002f59
    352c:	00002f95 	.word	0x00002f95

00003530 <common_tc_init>:
    3530:	b508      	push	{r3, lr}
    3532:	2200      	movs	r2, #0
    3534:	4b03      	ldr	r3, [pc, #12]	; (3544 <common_tc_init+0x14>)
    3536:	701a      	strb	r2, [r3, #0]
    3538:	4b03      	ldr	r3, [pc, #12]	; (3548 <common_tc_init+0x18>)
    353a:	4798      	blx	r3
    353c:	4b03      	ldr	r3, [pc, #12]	; (354c <common_tc_init+0x1c>)
    353e:	7018      	strb	r0, [r3, #0]
    3540:	bd08      	pop	{r3, pc}
    3542:	46c0      	nop			; (mov r8, r8)
    3544:	20000668 	.word	0x20000668
    3548:	00002fad 	.word	0x00002fad
    354c:	200008f4 	.word	0x200008f4

00003550 <tmr_ovf_callback>:
    3550:	b508      	push	{r3, lr}
    3552:	4b0e      	ldr	r3, [pc, #56]	; (358c <tmr_ovf_callback+0x3c>)
    3554:	685b      	ldr	r3, [r3, #4]
    3556:	2b00      	cmp	r3, #0
    3558:	d007      	beq.n	356a <tmr_ovf_callback+0x1a>
    355a:	4a0c      	ldr	r2, [pc, #48]	; (358c <tmr_ovf_callback+0x3c>)
    355c:	6853      	ldr	r3, [r2, #4]
    355e:	3b01      	subs	r3, #1
    3560:	6053      	str	r3, [r2, #4]
    3562:	2b00      	cmp	r3, #0
    3564:	d101      	bne.n	356a <tmr_ovf_callback+0x1a>
    3566:	4b0a      	ldr	r3, [pc, #40]	; (3590 <tmr_ovf_callback+0x40>)
    3568:	4798      	blx	r3
    356a:	4a08      	ldr	r2, [pc, #32]	; (358c <tmr_ovf_callback+0x3c>)
    356c:	7813      	ldrb	r3, [r2, #0]
    356e:	3301      	adds	r3, #1
    3570:	b2db      	uxtb	r3, r3
    3572:	7013      	strb	r3, [r2, #0]
    3574:	4a07      	ldr	r2, [pc, #28]	; (3594 <tmr_ovf_callback+0x44>)
    3576:	7812      	ldrb	r2, [r2, #0]
    3578:	429a      	cmp	r2, r3
    357a:	d806      	bhi.n	358a <tmr_ovf_callback+0x3a>
    357c:	4b03      	ldr	r3, [pc, #12]	; (358c <tmr_ovf_callback+0x3c>)
    357e:	2200      	movs	r2, #0
    3580:	701a      	strb	r2, [r3, #0]
    3582:	68db      	ldr	r3, [r3, #12]
    3584:	2b00      	cmp	r3, #0
    3586:	d000      	beq.n	358a <tmr_ovf_callback+0x3a>
    3588:	4798      	blx	r3
    358a:	bd08      	pop	{r3, pc}
    358c:	20000668 	.word	0x20000668
    3590:	00002f59 	.word	0x00002f59
    3594:	200008f4 	.word	0x200008f4

00003598 <tmr_cca_callback>:
    3598:	b508      	push	{r3, lr}
    359a:	4b04      	ldr	r3, [pc, #16]	; (35ac <tmr_cca_callback+0x14>)
    359c:	4798      	blx	r3
    359e:	4b04      	ldr	r3, [pc, #16]	; (35b0 <tmr_cca_callback+0x18>)
    35a0:	691b      	ldr	r3, [r3, #16]
    35a2:	2b00      	cmp	r3, #0
    35a4:	d000      	beq.n	35a8 <tmr_cca_callback+0x10>
    35a6:	4798      	blx	r3
    35a8:	bd08      	pop	{r3, pc}
    35aa:	46c0      	nop			; (mov r8, r8)
    35ac:	00002f45 	.word	0x00002f45
    35b0:	20000668 	.word	0x20000668

000035b4 <set_common_tc_expiry_callback>:
    35b4:	4b01      	ldr	r3, [pc, #4]	; (35bc <set_common_tc_expiry_callback+0x8>)
    35b6:	6118      	str	r0, [r3, #16]
    35b8:	4770      	bx	lr
    35ba:	46c0      	nop			; (mov r8, r8)
    35bc:	20000668 	.word	0x20000668

000035c0 <__libc_init_array>:
    35c0:	4b0e      	ldr	r3, [pc, #56]	; (35fc <__libc_init_array+0x3c>)
    35c2:	b570      	push	{r4, r5, r6, lr}
    35c4:	2500      	movs	r5, #0
    35c6:	001e      	movs	r6, r3
    35c8:	4c0d      	ldr	r4, [pc, #52]	; (3600 <__libc_init_array+0x40>)
    35ca:	1ae4      	subs	r4, r4, r3
    35cc:	10a4      	asrs	r4, r4, #2
    35ce:	42a5      	cmp	r5, r4
    35d0:	d004      	beq.n	35dc <__libc_init_array+0x1c>
    35d2:	00ab      	lsls	r3, r5, #2
    35d4:	58f3      	ldr	r3, [r6, r3]
    35d6:	4798      	blx	r3
    35d8:	3501      	adds	r5, #1
    35da:	e7f8      	b.n	35ce <__libc_init_array+0xe>
    35dc:	f005 fc8c 	bl	8ef8 <_init>
    35e0:	4b08      	ldr	r3, [pc, #32]	; (3604 <__libc_init_array+0x44>)
    35e2:	2500      	movs	r5, #0
    35e4:	001e      	movs	r6, r3
    35e6:	4c08      	ldr	r4, [pc, #32]	; (3608 <__libc_init_array+0x48>)
    35e8:	1ae4      	subs	r4, r4, r3
    35ea:	10a4      	asrs	r4, r4, #2
    35ec:	42a5      	cmp	r5, r4
    35ee:	d004      	beq.n	35fa <__libc_init_array+0x3a>
    35f0:	00ab      	lsls	r3, r5, #2
    35f2:	58f3      	ldr	r3, [r6, r3]
    35f4:	4798      	blx	r3
    35f6:	3501      	adds	r5, #1
    35f8:	e7f8      	b.n	35ec <__libc_init_array+0x2c>
    35fa:	bd70      	pop	{r4, r5, r6, pc}
    35fc:	00008f04 	.word	0x00008f04
    3600:	00008f04 	.word	0x00008f04
    3604:	00008f04 	.word	0x00008f04
    3608:	00008f08 	.word	0x00008f08

0000360c <memcpy>:
    360c:	2300      	movs	r3, #0
    360e:	b510      	push	{r4, lr}
    3610:	429a      	cmp	r2, r3
    3612:	d003      	beq.n	361c <memcpy+0x10>
    3614:	5ccc      	ldrb	r4, [r1, r3]
    3616:	54c4      	strb	r4, [r0, r3]
    3618:	3301      	adds	r3, #1
    361a:	e7f9      	b.n	3610 <memcpy+0x4>
    361c:	bd10      	pop	{r4, pc}

0000361e <memset>:
    361e:	0003      	movs	r3, r0
    3620:	1882      	adds	r2, r0, r2
    3622:	4293      	cmp	r3, r2
    3624:	d002      	beq.n	362c <memset+0xe>
    3626:	7019      	strb	r1, [r3, #0]
    3628:	3301      	adds	r3, #1
    362a:	e7fa      	b.n	3622 <memset+0x4>
    362c:	4770      	bx	lr

0000362e <__cvt>:
    362e:	b5f0      	push	{r4, r5, r6, r7, lr}
    3630:	b08b      	sub	sp, #44	; 0x2c
    3632:	0014      	movs	r4, r2
    3634:	1e1d      	subs	r5, r3, #0
    3636:	9912      	ldr	r1, [sp, #72]	; 0x48
    3638:	da06      	bge.n	3648 <__cvt+0x1a>
    363a:	2480      	movs	r4, #128	; 0x80
    363c:	0624      	lsls	r4, r4, #24
    363e:	191b      	adds	r3, r3, r4
    3640:	001d      	movs	r5, r3
    3642:	0014      	movs	r4, r2
    3644:	232d      	movs	r3, #45	; 0x2d
    3646:	e000      	b.n	364a <__cvt+0x1c>
    3648:	2300      	movs	r3, #0
    364a:	700b      	strb	r3, [r1, #0]
    364c:	2320      	movs	r3, #32
    364e:	9e14      	ldr	r6, [sp, #80]	; 0x50
    3650:	2203      	movs	r2, #3
    3652:	439e      	bics	r6, r3
    3654:	2e46      	cmp	r6, #70	; 0x46
    3656:	d007      	beq.n	3668 <__cvt+0x3a>
    3658:	0033      	movs	r3, r6
    365a:	3b45      	subs	r3, #69	; 0x45
    365c:	4259      	negs	r1, r3
    365e:	414b      	adcs	r3, r1
    3660:	9910      	ldr	r1, [sp, #64]	; 0x40
    3662:	3a01      	subs	r2, #1
    3664:	18cb      	adds	r3, r1, r3
    3666:	9310      	str	r3, [sp, #64]	; 0x40
    3668:	ab09      	add	r3, sp, #36	; 0x24
    366a:	9304      	str	r3, [sp, #16]
    366c:	ab08      	add	r3, sp, #32
    366e:	9303      	str	r3, [sp, #12]
    3670:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3672:	9200      	str	r2, [sp, #0]
    3674:	9302      	str	r3, [sp, #8]
    3676:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3678:	0022      	movs	r2, r4
    367a:	9301      	str	r3, [sp, #4]
    367c:	002b      	movs	r3, r5
    367e:	f000 fee9 	bl	4454 <_dtoa_r>
    3682:	0007      	movs	r7, r0
    3684:	2e47      	cmp	r6, #71	; 0x47
    3686:	d102      	bne.n	368e <__cvt+0x60>
    3688:	9b11      	ldr	r3, [sp, #68]	; 0x44
    368a:	07db      	lsls	r3, r3, #31
    368c:	d52d      	bpl.n	36ea <__cvt+0xbc>
    368e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3690:	18fb      	adds	r3, r7, r3
    3692:	9307      	str	r3, [sp, #28]
    3694:	2e46      	cmp	r6, #70	; 0x46
    3696:	d114      	bne.n	36c2 <__cvt+0x94>
    3698:	783b      	ldrb	r3, [r7, #0]
    369a:	2b30      	cmp	r3, #48	; 0x30
    369c:	d10c      	bne.n	36b8 <__cvt+0x8a>
    369e:	2200      	movs	r2, #0
    36a0:	2300      	movs	r3, #0
    36a2:	0020      	movs	r0, r4
    36a4:	0029      	movs	r1, r5
    36a6:	f002 fdd9 	bl	625c <__aeabi_dcmpeq>
    36aa:	2800      	cmp	r0, #0
    36ac:	d104      	bne.n	36b8 <__cvt+0x8a>
    36ae:	2301      	movs	r3, #1
    36b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    36b2:	1a9b      	subs	r3, r3, r2
    36b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    36b6:	6013      	str	r3, [r2, #0]
    36b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    36ba:	9a07      	ldr	r2, [sp, #28]
    36bc:	681b      	ldr	r3, [r3, #0]
    36be:	18d3      	adds	r3, r2, r3
    36c0:	9307      	str	r3, [sp, #28]
    36c2:	2200      	movs	r2, #0
    36c4:	2300      	movs	r3, #0
    36c6:	0020      	movs	r0, r4
    36c8:	0029      	movs	r1, r5
    36ca:	f002 fdc7 	bl	625c <__aeabi_dcmpeq>
    36ce:	2230      	movs	r2, #48	; 0x30
    36d0:	2800      	cmp	r0, #0
    36d2:	d002      	beq.n	36da <__cvt+0xac>
    36d4:	9b07      	ldr	r3, [sp, #28]
    36d6:	9309      	str	r3, [sp, #36]	; 0x24
    36d8:	e007      	b.n	36ea <__cvt+0xbc>
    36da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    36dc:	9907      	ldr	r1, [sp, #28]
    36de:	4299      	cmp	r1, r3
    36e0:	d903      	bls.n	36ea <__cvt+0xbc>
    36e2:	1c59      	adds	r1, r3, #1
    36e4:	9109      	str	r1, [sp, #36]	; 0x24
    36e6:	701a      	strb	r2, [r3, #0]
    36e8:	e7f7      	b.n	36da <__cvt+0xac>
    36ea:	0038      	movs	r0, r7
    36ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    36ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
    36f0:	1bdb      	subs	r3, r3, r7
    36f2:	6013      	str	r3, [r2, #0]
    36f4:	b00b      	add	sp, #44	; 0x2c
    36f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000036f8 <__exponent>:
    36f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    36fa:	232b      	movs	r3, #43	; 0x2b
    36fc:	0007      	movs	r7, r0
    36fe:	000c      	movs	r4, r1
    3700:	7002      	strb	r2, [r0, #0]
    3702:	1c86      	adds	r6, r0, #2
    3704:	2900      	cmp	r1, #0
    3706:	da01      	bge.n	370c <__exponent+0x14>
    3708:	232d      	movs	r3, #45	; 0x2d
    370a:	424c      	negs	r4, r1
    370c:	707b      	strb	r3, [r7, #1]
    370e:	2c09      	cmp	r4, #9
    3710:	dd1c      	ble.n	374c <__exponent+0x54>
    3712:	466b      	mov	r3, sp
    3714:	1ddd      	adds	r5, r3, #7
    3716:	0020      	movs	r0, r4
    3718:	210a      	movs	r1, #10
    371a:	f002 fd89 	bl	6230 <__aeabi_idivmod>
    371e:	3d01      	subs	r5, #1
    3720:	3130      	adds	r1, #48	; 0x30
    3722:	7029      	strb	r1, [r5, #0]
    3724:	0020      	movs	r0, r4
    3726:	210a      	movs	r1, #10
    3728:	f002 fc9c 	bl	6064 <__aeabi_idiv>
    372c:	1e04      	subs	r4, r0, #0
    372e:	2c09      	cmp	r4, #9
    3730:	dcf1      	bgt.n	3716 <__exponent+0x1e>
    3732:	3d01      	subs	r5, #1
    3734:	3430      	adds	r4, #48	; 0x30
    3736:	702c      	strb	r4, [r5, #0]
    3738:	466b      	mov	r3, sp
    373a:	3307      	adds	r3, #7
    373c:	0030      	movs	r0, r6
    373e:	42ab      	cmp	r3, r5
    3740:	d909      	bls.n	3756 <__exponent+0x5e>
    3742:	782b      	ldrb	r3, [r5, #0]
    3744:	3501      	adds	r5, #1
    3746:	7033      	strb	r3, [r6, #0]
    3748:	3601      	adds	r6, #1
    374a:	e7f5      	b.n	3738 <__exponent+0x40>
    374c:	2330      	movs	r3, #48	; 0x30
    374e:	18e4      	adds	r4, r4, r3
    3750:	7033      	strb	r3, [r6, #0]
    3752:	1cb0      	adds	r0, r6, #2
    3754:	7074      	strb	r4, [r6, #1]
    3756:	1bc0      	subs	r0, r0, r7
    3758:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000375c <_printf_float>:
    375c:	b5f0      	push	{r4, r5, r6, r7, lr}
    375e:	b095      	sub	sp, #84	; 0x54
    3760:	000c      	movs	r4, r1
    3762:	920a      	str	r2, [sp, #40]	; 0x28
    3764:	930b      	str	r3, [sp, #44]	; 0x2c
    3766:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    3768:	9009      	str	r0, [sp, #36]	; 0x24
    376a:	f001 fdc1 	bl	52f0 <_localeconv_r>
    376e:	6803      	ldr	r3, [r0, #0]
    3770:	0018      	movs	r0, r3
    3772:	930d      	str	r3, [sp, #52]	; 0x34
    3774:	f000 fd12 	bl	419c <strlen>
    3778:	2300      	movs	r3, #0
    377a:	9312      	str	r3, [sp, #72]	; 0x48
    377c:	6823      	ldr	r3, [r4, #0]
    377e:	900e      	str	r0, [sp, #56]	; 0x38
    3780:	930c      	str	r3, [sp, #48]	; 0x30
    3782:	990c      	ldr	r1, [sp, #48]	; 0x30
    3784:	7e27      	ldrb	r7, [r4, #24]
    3786:	682b      	ldr	r3, [r5, #0]
    3788:	2207      	movs	r2, #7
    378a:	05c9      	lsls	r1, r1, #23
    378c:	d501      	bpl.n	3792 <_printf_float+0x36>
    378e:	189b      	adds	r3, r3, r2
    3790:	e000      	b.n	3794 <_printf_float+0x38>
    3792:	3307      	adds	r3, #7
    3794:	4393      	bics	r3, r2
    3796:	001a      	movs	r2, r3
    3798:	3208      	adds	r2, #8
    379a:	602a      	str	r2, [r5, #0]
    379c:	681a      	ldr	r2, [r3, #0]
    379e:	685b      	ldr	r3, [r3, #4]
    37a0:	64a2      	str	r2, [r4, #72]	; 0x48
    37a2:	64e3      	str	r3, [r4, #76]	; 0x4c
    37a4:	2201      	movs	r2, #1
    37a6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    37a8:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    37aa:	006b      	lsls	r3, r5, #1
    37ac:	085b      	lsrs	r3, r3, #1
    37ae:	930f      	str	r3, [sp, #60]	; 0x3c
    37b0:	4252      	negs	r2, r2
    37b2:	4bc0      	ldr	r3, [pc, #768]	; (3ab4 <_printf_float+0x358>)
    37b4:	0030      	movs	r0, r6
    37b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    37b8:	f004 ff9e 	bl	86f8 <__aeabi_dcmpun>
    37bc:	2800      	cmp	r0, #0
    37be:	d119      	bne.n	37f4 <_printf_float+0x98>
    37c0:	2201      	movs	r2, #1
    37c2:	4bbc      	ldr	r3, [pc, #752]	; (3ab4 <_printf_float+0x358>)
    37c4:	4252      	negs	r2, r2
    37c6:	0030      	movs	r0, r6
    37c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    37ca:	f002 fd57 	bl	627c <__aeabi_dcmple>
    37ce:	2800      	cmp	r0, #0
    37d0:	d110      	bne.n	37f4 <_printf_float+0x98>
    37d2:	2200      	movs	r2, #0
    37d4:	2300      	movs	r3, #0
    37d6:	0030      	movs	r0, r6
    37d8:	0029      	movs	r1, r5
    37da:	f002 fd45 	bl	6268 <__aeabi_dcmplt>
    37de:	2800      	cmp	r0, #0
    37e0:	d003      	beq.n	37ea <_printf_float+0x8e>
    37e2:	0023      	movs	r3, r4
    37e4:	222d      	movs	r2, #45	; 0x2d
    37e6:	3343      	adds	r3, #67	; 0x43
    37e8:	701a      	strb	r2, [r3, #0]
    37ea:	4db3      	ldr	r5, [pc, #716]	; (3ab8 <_printf_float+0x35c>)
    37ec:	2f47      	cmp	r7, #71	; 0x47
    37ee:	d80e      	bhi.n	380e <_printf_float+0xb2>
    37f0:	4db2      	ldr	r5, [pc, #712]	; (3abc <_printf_float+0x360>)
    37f2:	e00c      	b.n	380e <_printf_float+0xb2>
    37f4:	0032      	movs	r2, r6
    37f6:	002b      	movs	r3, r5
    37f8:	0030      	movs	r0, r6
    37fa:	0029      	movs	r1, r5
    37fc:	f004 ff7c 	bl	86f8 <__aeabi_dcmpun>
    3800:	2800      	cmp	r0, #0
    3802:	d100      	bne.n	3806 <_printf_float+0xaa>
    3804:	e19a      	b.n	3b3c <_printf_float+0x3e0>
    3806:	4dae      	ldr	r5, [pc, #696]	; (3ac0 <_printf_float+0x364>)
    3808:	2f47      	cmp	r7, #71	; 0x47
    380a:	d800      	bhi.n	380e <_printf_float+0xb2>
    380c:	4dad      	ldr	r5, [pc, #692]	; (3ac4 <_printf_float+0x368>)
    380e:	2303      	movs	r3, #3
    3810:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3812:	6123      	str	r3, [r4, #16]
    3814:	3301      	adds	r3, #1
    3816:	439a      	bics	r2, r3
    3818:	6022      	str	r2, [r4, #0]
    381a:	2600      	movs	r6, #0
    381c:	e042      	b.n	38a4 <_printf_float+0x148>
    381e:	2f67      	cmp	r7, #103	; 0x67
    3820:	d100      	bne.n	3824 <_printf_float+0xc8>
    3822:	e193      	b.n	3b4c <_printf_float+0x3f0>
    3824:	2f47      	cmp	r7, #71	; 0x47
    3826:	d100      	bne.n	382a <_printf_float+0xce>
    3828:	e190      	b.n	3b4c <_printf_float+0x3f0>
    382a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    382c:	2100      	movs	r1, #0
    382e:	4313      	orrs	r3, r2
    3830:	aa12      	add	r2, sp, #72	; 0x48
    3832:	9205      	str	r2, [sp, #20]
    3834:	aa11      	add	r2, sp, #68	; 0x44
    3836:	9203      	str	r2, [sp, #12]
    3838:	2223      	movs	r2, #35	; 0x23
    383a:	6023      	str	r3, [r4, #0]
    383c:	9106      	str	r1, [sp, #24]
    383e:	9301      	str	r3, [sp, #4]
    3840:	a908      	add	r1, sp, #32
    3842:	6863      	ldr	r3, [r4, #4]
    3844:	1852      	adds	r2, r2, r1
    3846:	9202      	str	r2, [sp, #8]
    3848:	9300      	str	r3, [sp, #0]
    384a:	0032      	movs	r2, r6
    384c:	002b      	movs	r3, r5
    384e:	9704      	str	r7, [sp, #16]
    3850:	9809      	ldr	r0, [sp, #36]	; 0x24
    3852:	f7ff feec 	bl	362e <__cvt>
    3856:	2320      	movs	r3, #32
    3858:	003a      	movs	r2, r7
    385a:	0005      	movs	r5, r0
    385c:	439a      	bics	r2, r3
    385e:	2a47      	cmp	r2, #71	; 0x47
    3860:	d100      	bne.n	3864 <_printf_float+0x108>
    3862:	e18e      	b.n	3b82 <_printf_float+0x426>
    3864:	9911      	ldr	r1, [sp, #68]	; 0x44
    3866:	2f65      	cmp	r7, #101	; 0x65
    3868:	d900      	bls.n	386c <_printf_float+0x110>
    386a:	e196      	b.n	3b9a <_printf_float+0x43e>
    386c:	0020      	movs	r0, r4
    386e:	3901      	subs	r1, #1
    3870:	003a      	movs	r2, r7
    3872:	3050      	adds	r0, #80	; 0x50
    3874:	9111      	str	r1, [sp, #68]	; 0x44
    3876:	f7ff ff3f 	bl	36f8 <__exponent>
    387a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    387c:	0006      	movs	r6, r0
    387e:	1883      	adds	r3, r0, r2
    3880:	6123      	str	r3, [r4, #16]
    3882:	2a01      	cmp	r2, #1
    3884:	dd00      	ble.n	3888 <_printf_float+0x12c>
    3886:	e185      	b.n	3b94 <_printf_float+0x438>
    3888:	6822      	ldr	r2, [r4, #0]
    388a:	07d2      	lsls	r2, r2, #31
    388c:	d500      	bpl.n	3890 <_printf_float+0x134>
    388e:	e181      	b.n	3b94 <_printf_float+0x438>
    3890:	2323      	movs	r3, #35	; 0x23
    3892:	aa08      	add	r2, sp, #32
    3894:	189b      	adds	r3, r3, r2
    3896:	781b      	ldrb	r3, [r3, #0]
    3898:	2b00      	cmp	r3, #0
    389a:	d003      	beq.n	38a4 <_printf_float+0x148>
    389c:	0023      	movs	r3, r4
    389e:	222d      	movs	r2, #45	; 0x2d
    38a0:	3343      	adds	r3, #67	; 0x43
    38a2:	701a      	strb	r2, [r3, #0]
    38a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    38a6:	aa13      	add	r2, sp, #76	; 0x4c
    38a8:	9300      	str	r3, [sp, #0]
    38aa:	0021      	movs	r1, r4
    38ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    38ae:	9809      	ldr	r0, [sp, #36]	; 0x24
    38b0:	f000 f9a4 	bl	3bfc <_printf_common>
    38b4:	1c43      	adds	r3, r0, #1
    38b6:	d102      	bne.n	38be <_printf_float+0x162>
    38b8:	2001      	movs	r0, #1
    38ba:	4240      	negs	r0, r0
    38bc:	e19b      	b.n	3bf6 <_printf_float+0x49a>
    38be:	6822      	ldr	r2, [r4, #0]
    38c0:	0553      	lsls	r3, r2, #21
    38c2:	d401      	bmi.n	38c8 <_printf_float+0x16c>
    38c4:	6923      	ldr	r3, [r4, #16]
    38c6:	e064      	b.n	3992 <_printf_float+0x236>
    38c8:	2f65      	cmp	r7, #101	; 0x65
    38ca:	d800      	bhi.n	38ce <_printf_float+0x172>
    38cc:	e0cc      	b.n	3a68 <_printf_float+0x30c>
    38ce:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    38d0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    38d2:	2200      	movs	r2, #0
    38d4:	2300      	movs	r3, #0
    38d6:	f002 fcc1 	bl	625c <__aeabi_dcmpeq>
    38da:	2800      	cmp	r0, #0
    38dc:	d02c      	beq.n	3938 <_printf_float+0x1dc>
    38de:	2301      	movs	r3, #1
    38e0:	4a79      	ldr	r2, [pc, #484]	; (3ac8 <_printf_float+0x36c>)
    38e2:	990a      	ldr	r1, [sp, #40]	; 0x28
    38e4:	9809      	ldr	r0, [sp, #36]	; 0x24
    38e6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    38e8:	47a8      	blx	r5
    38ea:	1c43      	adds	r3, r0, #1
    38ec:	d0e4      	beq.n	38b8 <_printf_float+0x15c>
    38ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
    38f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    38f2:	4293      	cmp	r3, r2
    38f4:	db08      	blt.n	3908 <_printf_float+0x1ac>
    38f6:	6823      	ldr	r3, [r4, #0]
    38f8:	07db      	lsls	r3, r3, #31
    38fa:	d405      	bmi.n	3908 <_printf_float+0x1ac>
    38fc:	6823      	ldr	r3, [r4, #0]
    38fe:	2500      	movs	r5, #0
    3900:	079b      	lsls	r3, r3, #30
    3902:	d500      	bpl.n	3906 <_printf_float+0x1aa>
    3904:	e10f      	b.n	3b26 <_printf_float+0x3ca>
    3906:	e113      	b.n	3b30 <_printf_float+0x3d4>
    3908:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    390a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    390c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    390e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3910:	9809      	ldr	r0, [sp, #36]	; 0x24
    3912:	47a8      	blx	r5
    3914:	2500      	movs	r5, #0
    3916:	1c43      	adds	r3, r0, #1
    3918:	d0ce      	beq.n	38b8 <_printf_float+0x15c>
    391a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    391c:	3b01      	subs	r3, #1
    391e:	429d      	cmp	r5, r3
    3920:	daec      	bge.n	38fc <_printf_float+0x1a0>
    3922:	0022      	movs	r2, r4
    3924:	2301      	movs	r3, #1
    3926:	321a      	adds	r2, #26
    3928:	990a      	ldr	r1, [sp, #40]	; 0x28
    392a:	9809      	ldr	r0, [sp, #36]	; 0x24
    392c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    392e:	47b0      	blx	r6
    3930:	1c43      	adds	r3, r0, #1
    3932:	d0c1      	beq.n	38b8 <_printf_float+0x15c>
    3934:	3501      	adds	r5, #1
    3936:	e7f0      	b.n	391a <_printf_float+0x1be>
    3938:	9b11      	ldr	r3, [sp, #68]	; 0x44
    393a:	2b00      	cmp	r3, #0
    393c:	dc2b      	bgt.n	3996 <_printf_float+0x23a>
    393e:	2301      	movs	r3, #1
    3940:	4a61      	ldr	r2, [pc, #388]	; (3ac8 <_printf_float+0x36c>)
    3942:	990a      	ldr	r1, [sp, #40]	; 0x28
    3944:	9809      	ldr	r0, [sp, #36]	; 0x24
    3946:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3948:	47b0      	blx	r6
    394a:	1c43      	adds	r3, r0, #1
    394c:	d0b4      	beq.n	38b8 <_printf_float+0x15c>
    394e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3950:	2b00      	cmp	r3, #0
    3952:	d105      	bne.n	3960 <_printf_float+0x204>
    3954:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3956:	2b00      	cmp	r3, #0
    3958:	d102      	bne.n	3960 <_printf_float+0x204>
    395a:	6823      	ldr	r3, [r4, #0]
    395c:	07db      	lsls	r3, r3, #31
    395e:	d5cd      	bpl.n	38fc <_printf_float+0x1a0>
    3960:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3964:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3966:	990a      	ldr	r1, [sp, #40]	; 0x28
    3968:	9809      	ldr	r0, [sp, #36]	; 0x24
    396a:	47b0      	blx	r6
    396c:	2600      	movs	r6, #0
    396e:	1c43      	adds	r3, r0, #1
    3970:	d0a2      	beq.n	38b8 <_printf_float+0x15c>
    3972:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3974:	425b      	negs	r3, r3
    3976:	429e      	cmp	r6, r3
    3978:	da0a      	bge.n	3990 <_printf_float+0x234>
    397a:	0022      	movs	r2, r4
    397c:	2301      	movs	r3, #1
    397e:	321a      	adds	r2, #26
    3980:	990a      	ldr	r1, [sp, #40]	; 0x28
    3982:	9809      	ldr	r0, [sp, #36]	; 0x24
    3984:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3986:	47b8      	blx	r7
    3988:	1c43      	adds	r3, r0, #1
    398a:	d095      	beq.n	38b8 <_printf_float+0x15c>
    398c:	3601      	adds	r6, #1
    398e:	e7f0      	b.n	3972 <_printf_float+0x216>
    3990:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3992:	002a      	movs	r2, r5
    3994:	e0ac      	b.n	3af0 <_printf_float+0x394>
    3996:	6da3      	ldr	r3, [r4, #88]	; 0x58
    3998:	9e12      	ldr	r6, [sp, #72]	; 0x48
    399a:	429e      	cmp	r6, r3
    399c:	dd00      	ble.n	39a0 <_printf_float+0x244>
    399e:	001e      	movs	r6, r3
    39a0:	2e00      	cmp	r6, #0
    39a2:	dc05      	bgt.n	39b0 <_printf_float+0x254>
    39a4:	2300      	movs	r3, #0
    39a6:	930c      	str	r3, [sp, #48]	; 0x30
    39a8:	43f3      	mvns	r3, r6
    39aa:	17db      	asrs	r3, r3, #31
    39ac:	930f      	str	r3, [sp, #60]	; 0x3c
    39ae:	e015      	b.n	39dc <_printf_float+0x280>
    39b0:	0033      	movs	r3, r6
    39b2:	002a      	movs	r2, r5
    39b4:	990a      	ldr	r1, [sp, #40]	; 0x28
    39b6:	9809      	ldr	r0, [sp, #36]	; 0x24
    39b8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    39ba:	47b8      	blx	r7
    39bc:	1c43      	adds	r3, r0, #1
    39be:	d1f1      	bne.n	39a4 <_printf_float+0x248>
    39c0:	e77a      	b.n	38b8 <_printf_float+0x15c>
    39c2:	0022      	movs	r2, r4
    39c4:	2301      	movs	r3, #1
    39c6:	321a      	adds	r2, #26
    39c8:	990a      	ldr	r1, [sp, #40]	; 0x28
    39ca:	9809      	ldr	r0, [sp, #36]	; 0x24
    39cc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    39ce:	47b8      	blx	r7
    39d0:	1c43      	adds	r3, r0, #1
    39d2:	d100      	bne.n	39d6 <_printf_float+0x27a>
    39d4:	e770      	b.n	38b8 <_printf_float+0x15c>
    39d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    39d8:	3301      	adds	r3, #1
    39da:	930c      	str	r3, [sp, #48]	; 0x30
    39dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    39de:	6da2      	ldr	r2, [r4, #88]	; 0x58
    39e0:	990c      	ldr	r1, [sp, #48]	; 0x30
    39e2:	4033      	ands	r3, r6
    39e4:	1ad3      	subs	r3, r2, r3
    39e6:	4299      	cmp	r1, r3
    39e8:	dbeb      	blt.n	39c2 <_printf_float+0x266>
    39ea:	18ae      	adds	r6, r5, r2
    39ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
    39ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
    39f0:	4293      	cmp	r3, r2
    39f2:	db0d      	blt.n	3a10 <_printf_float+0x2b4>
    39f4:	6823      	ldr	r3, [r4, #0]
    39f6:	07db      	lsls	r3, r3, #31
    39f8:	d40a      	bmi.n	3a10 <_printf_float+0x2b4>
    39fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    39fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    39fe:	18ed      	adds	r5, r5, r3
    3a00:	1bad      	subs	r5, r5, r6
    3a02:	1a9b      	subs	r3, r3, r2
    3a04:	429d      	cmp	r5, r3
    3a06:	dd00      	ble.n	3a0a <_printf_float+0x2ae>
    3a08:	001d      	movs	r5, r3
    3a0a:	2d00      	cmp	r5, #0
    3a0c:	dc09      	bgt.n	3a22 <_printf_float+0x2c6>
    3a0e:	e011      	b.n	3a34 <_printf_float+0x2d8>
    3a10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3a12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3a14:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a16:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a18:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3a1a:	47b8      	blx	r7
    3a1c:	1c43      	adds	r3, r0, #1
    3a1e:	d1ec      	bne.n	39fa <_printf_float+0x29e>
    3a20:	e74a      	b.n	38b8 <_printf_float+0x15c>
    3a22:	002b      	movs	r3, r5
    3a24:	0032      	movs	r2, r6
    3a26:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a28:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a2a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3a2c:	47b0      	blx	r6
    3a2e:	1c43      	adds	r3, r0, #1
    3a30:	d100      	bne.n	3a34 <_printf_float+0x2d8>
    3a32:	e741      	b.n	38b8 <_printf_float+0x15c>
    3a34:	43ef      	mvns	r7, r5
    3a36:	17fb      	asrs	r3, r7, #31
    3a38:	2600      	movs	r6, #0
    3a3a:	930c      	str	r3, [sp, #48]	; 0x30
    3a3c:	e00a      	b.n	3a54 <_printf_float+0x2f8>
    3a3e:	0022      	movs	r2, r4
    3a40:	2301      	movs	r3, #1
    3a42:	321a      	adds	r2, #26
    3a44:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a46:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a48:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3a4a:	47b8      	blx	r7
    3a4c:	1c43      	adds	r3, r0, #1
    3a4e:	d100      	bne.n	3a52 <_printf_float+0x2f6>
    3a50:	e732      	b.n	38b8 <_printf_float+0x15c>
    3a52:	3601      	adds	r6, #1
    3a54:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3a56:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3a58:	990c      	ldr	r1, [sp, #48]	; 0x30
    3a5a:	1a9b      	subs	r3, r3, r2
    3a5c:	002a      	movs	r2, r5
    3a5e:	400a      	ands	r2, r1
    3a60:	1a9b      	subs	r3, r3, r2
    3a62:	429e      	cmp	r6, r3
    3a64:	dbeb      	blt.n	3a3e <_printf_float+0x2e2>
    3a66:	e749      	b.n	38fc <_printf_float+0x1a0>
    3a68:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3a6a:	2b01      	cmp	r3, #1
    3a6c:	dc02      	bgt.n	3a74 <_printf_float+0x318>
    3a6e:	2301      	movs	r3, #1
    3a70:	421a      	tst	r2, r3
    3a72:	d045      	beq.n	3b00 <_printf_float+0x3a4>
    3a74:	2301      	movs	r3, #1
    3a76:	002a      	movs	r2, r5
    3a78:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a7a:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a7c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3a7e:	47b8      	blx	r7
    3a80:	1c43      	adds	r3, r0, #1
    3a82:	d100      	bne.n	3a86 <_printf_float+0x32a>
    3a84:	e718      	b.n	38b8 <_printf_float+0x15c>
    3a86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3a88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3a8a:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a8e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3a90:	47b8      	blx	r7
    3a92:	1c43      	adds	r3, r0, #1
    3a94:	d100      	bne.n	3a98 <_printf_float+0x33c>
    3a96:	e70f      	b.n	38b8 <_printf_float+0x15c>
    3a98:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    3a9a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    3a9c:	2200      	movs	r2, #0
    3a9e:	2300      	movs	r3, #0
    3aa0:	f002 fbdc 	bl	625c <__aeabi_dcmpeq>
    3aa4:	2800      	cmp	r0, #0
    3aa6:	d001      	beq.n	3aac <_printf_float+0x350>
    3aa8:	2500      	movs	r5, #0
    3aaa:	e01a      	b.n	3ae2 <_printf_float+0x386>
    3aac:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3aae:	1c6a      	adds	r2, r5, #1
    3ab0:	3b01      	subs	r3, #1
    3ab2:	e026      	b.n	3b02 <_printf_float+0x3a6>
    3ab4:	7fefffff 	.word	0x7fefffff
    3ab8:	00008c00 	.word	0x00008c00
    3abc:	00008bfc 	.word	0x00008bfc
    3ac0:	00008c08 	.word	0x00008c08
    3ac4:	00008c04 	.word	0x00008c04
    3ac8:	00008c0c 	.word	0x00008c0c
    3acc:	0022      	movs	r2, r4
    3ace:	2301      	movs	r3, #1
    3ad0:	321a      	adds	r2, #26
    3ad2:	990a      	ldr	r1, [sp, #40]	; 0x28
    3ad4:	9809      	ldr	r0, [sp, #36]	; 0x24
    3ad6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3ad8:	47b8      	blx	r7
    3ada:	1c43      	adds	r3, r0, #1
    3adc:	d100      	bne.n	3ae0 <_printf_float+0x384>
    3ade:	e6eb      	b.n	38b8 <_printf_float+0x15c>
    3ae0:	3501      	adds	r5, #1
    3ae2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3ae4:	3b01      	subs	r3, #1
    3ae6:	429d      	cmp	r5, r3
    3ae8:	dbf0      	blt.n	3acc <_printf_float+0x370>
    3aea:	0022      	movs	r2, r4
    3aec:	0033      	movs	r3, r6
    3aee:	3250      	adds	r2, #80	; 0x50
    3af0:	990a      	ldr	r1, [sp, #40]	; 0x28
    3af2:	9809      	ldr	r0, [sp, #36]	; 0x24
    3af4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3af6:	47a8      	blx	r5
    3af8:	1c43      	adds	r3, r0, #1
    3afa:	d000      	beq.n	3afe <_printf_float+0x3a2>
    3afc:	e6fe      	b.n	38fc <_printf_float+0x1a0>
    3afe:	e6db      	b.n	38b8 <_printf_float+0x15c>
    3b00:	002a      	movs	r2, r5
    3b02:	990a      	ldr	r1, [sp, #40]	; 0x28
    3b04:	9809      	ldr	r0, [sp, #36]	; 0x24
    3b06:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3b08:	47a8      	blx	r5
    3b0a:	1c43      	adds	r3, r0, #1
    3b0c:	d1ed      	bne.n	3aea <_printf_float+0x38e>
    3b0e:	e6d3      	b.n	38b8 <_printf_float+0x15c>
    3b10:	0022      	movs	r2, r4
    3b12:	2301      	movs	r3, #1
    3b14:	3219      	adds	r2, #25
    3b16:	990a      	ldr	r1, [sp, #40]	; 0x28
    3b18:	9809      	ldr	r0, [sp, #36]	; 0x24
    3b1a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3b1c:	47b0      	blx	r6
    3b1e:	1c43      	adds	r3, r0, #1
    3b20:	d100      	bne.n	3b24 <_printf_float+0x3c8>
    3b22:	e6c9      	b.n	38b8 <_printf_float+0x15c>
    3b24:	3501      	adds	r5, #1
    3b26:	68e3      	ldr	r3, [r4, #12]
    3b28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3b2a:	1a9b      	subs	r3, r3, r2
    3b2c:	429d      	cmp	r5, r3
    3b2e:	dbef      	blt.n	3b10 <_printf_float+0x3b4>
    3b30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3b32:	68e0      	ldr	r0, [r4, #12]
    3b34:	4298      	cmp	r0, r3
    3b36:	da5e      	bge.n	3bf6 <_printf_float+0x49a>
    3b38:	0018      	movs	r0, r3
    3b3a:	e05c      	b.n	3bf6 <_printf_float+0x49a>
    3b3c:	2380      	movs	r3, #128	; 0x80
    3b3e:	6862      	ldr	r2, [r4, #4]
    3b40:	00db      	lsls	r3, r3, #3
    3b42:	1c51      	adds	r1, r2, #1
    3b44:	d000      	beq.n	3b48 <_printf_float+0x3ec>
    3b46:	e66a      	b.n	381e <_printf_float+0xc2>
    3b48:	3207      	adds	r2, #7
    3b4a:	e002      	b.n	3b52 <_printf_float+0x3f6>
    3b4c:	2a00      	cmp	r2, #0
    3b4e:	d102      	bne.n	3b56 <_printf_float+0x3fa>
    3b50:	2201      	movs	r2, #1
    3b52:	6062      	str	r2, [r4, #4]
    3b54:	e669      	b.n	382a <_printf_float+0xce>
    3b56:	990c      	ldr	r1, [sp, #48]	; 0x30
    3b58:	a808      	add	r0, sp, #32
    3b5a:	430b      	orrs	r3, r1
    3b5c:	2100      	movs	r1, #0
    3b5e:	9106      	str	r1, [sp, #24]
    3b60:	a912      	add	r1, sp, #72	; 0x48
    3b62:	9105      	str	r1, [sp, #20]
    3b64:	a911      	add	r1, sp, #68	; 0x44
    3b66:	9103      	str	r1, [sp, #12]
    3b68:	2123      	movs	r1, #35	; 0x23
    3b6a:	1809      	adds	r1, r1, r0
    3b6c:	6023      	str	r3, [r4, #0]
    3b6e:	9301      	str	r3, [sp, #4]
    3b70:	9200      	str	r2, [sp, #0]
    3b72:	002b      	movs	r3, r5
    3b74:	9704      	str	r7, [sp, #16]
    3b76:	9102      	str	r1, [sp, #8]
    3b78:	0032      	movs	r2, r6
    3b7a:	9809      	ldr	r0, [sp, #36]	; 0x24
    3b7c:	f7ff fd57 	bl	362e <__cvt>
    3b80:	0005      	movs	r5, r0
    3b82:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3b84:	1cda      	adds	r2, r3, #3
    3b86:	db02      	blt.n	3b8e <_printf_float+0x432>
    3b88:	6862      	ldr	r2, [r4, #4]
    3b8a:	4293      	cmp	r3, r2
    3b8c:	dd1c      	ble.n	3bc8 <_printf_float+0x46c>
    3b8e:	3f02      	subs	r7, #2
    3b90:	b2ff      	uxtb	r7, r7
    3b92:	e667      	b.n	3864 <_printf_float+0x108>
    3b94:	3301      	adds	r3, #1
    3b96:	6123      	str	r3, [r4, #16]
    3b98:	e67a      	b.n	3890 <_printf_float+0x134>
    3b9a:	2f66      	cmp	r7, #102	; 0x66
    3b9c:	d115      	bne.n	3bca <_printf_float+0x46e>
    3b9e:	6863      	ldr	r3, [r4, #4]
    3ba0:	2900      	cmp	r1, #0
    3ba2:	dd09      	ble.n	3bb8 <_printf_float+0x45c>
    3ba4:	6121      	str	r1, [r4, #16]
    3ba6:	2b00      	cmp	r3, #0
    3ba8:	d102      	bne.n	3bb0 <_printf_float+0x454>
    3baa:	6822      	ldr	r2, [r4, #0]
    3bac:	07d2      	lsls	r2, r2, #31
    3bae:	d51e      	bpl.n	3bee <_printf_float+0x492>
    3bb0:	3301      	adds	r3, #1
    3bb2:	1859      	adds	r1, r3, r1
    3bb4:	6121      	str	r1, [r4, #16]
    3bb6:	e01a      	b.n	3bee <_printf_float+0x492>
    3bb8:	2b00      	cmp	r3, #0
    3bba:	d103      	bne.n	3bc4 <_printf_float+0x468>
    3bbc:	2201      	movs	r2, #1
    3bbe:	6821      	ldr	r1, [r4, #0]
    3bc0:	4211      	tst	r1, r2
    3bc2:	d013      	beq.n	3bec <_printf_float+0x490>
    3bc4:	1c9a      	adds	r2, r3, #2
    3bc6:	e011      	b.n	3bec <_printf_float+0x490>
    3bc8:	2767      	movs	r7, #103	; 0x67
    3bca:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3bcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3bce:	4293      	cmp	r3, r2
    3bd0:	db06      	blt.n	3be0 <_printf_float+0x484>
    3bd2:	6822      	ldr	r2, [r4, #0]
    3bd4:	6123      	str	r3, [r4, #16]
    3bd6:	07d2      	lsls	r2, r2, #31
    3bd8:	d509      	bpl.n	3bee <_printf_float+0x492>
    3bda:	3301      	adds	r3, #1
    3bdc:	6123      	str	r3, [r4, #16]
    3bde:	e006      	b.n	3bee <_printf_float+0x492>
    3be0:	2101      	movs	r1, #1
    3be2:	2b00      	cmp	r3, #0
    3be4:	dc01      	bgt.n	3bea <_printf_float+0x48e>
    3be6:	1849      	adds	r1, r1, r1
    3be8:	1ac9      	subs	r1, r1, r3
    3bea:	188a      	adds	r2, r1, r2
    3bec:	6122      	str	r2, [r4, #16]
    3bee:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3bf0:	2600      	movs	r6, #0
    3bf2:	65a3      	str	r3, [r4, #88]	; 0x58
    3bf4:	e64c      	b.n	3890 <_printf_float+0x134>
    3bf6:	b015      	add	sp, #84	; 0x54
    3bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bfa:	46c0      	nop			; (mov r8, r8)

00003bfc <_printf_common>:
    3bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3bfe:	0017      	movs	r7, r2
    3c00:	9301      	str	r3, [sp, #4]
    3c02:	688a      	ldr	r2, [r1, #8]
    3c04:	690b      	ldr	r3, [r1, #16]
    3c06:	9000      	str	r0, [sp, #0]
    3c08:	000c      	movs	r4, r1
    3c0a:	4293      	cmp	r3, r2
    3c0c:	da00      	bge.n	3c10 <_printf_common+0x14>
    3c0e:	0013      	movs	r3, r2
    3c10:	0022      	movs	r2, r4
    3c12:	603b      	str	r3, [r7, #0]
    3c14:	3243      	adds	r2, #67	; 0x43
    3c16:	7812      	ldrb	r2, [r2, #0]
    3c18:	2a00      	cmp	r2, #0
    3c1a:	d001      	beq.n	3c20 <_printf_common+0x24>
    3c1c:	3301      	adds	r3, #1
    3c1e:	603b      	str	r3, [r7, #0]
    3c20:	6823      	ldr	r3, [r4, #0]
    3c22:	069b      	lsls	r3, r3, #26
    3c24:	d502      	bpl.n	3c2c <_printf_common+0x30>
    3c26:	683b      	ldr	r3, [r7, #0]
    3c28:	3302      	adds	r3, #2
    3c2a:	603b      	str	r3, [r7, #0]
    3c2c:	2506      	movs	r5, #6
    3c2e:	6823      	ldr	r3, [r4, #0]
    3c30:	401d      	ands	r5, r3
    3c32:	d01e      	beq.n	3c72 <_printf_common+0x76>
    3c34:	0023      	movs	r3, r4
    3c36:	3343      	adds	r3, #67	; 0x43
    3c38:	781b      	ldrb	r3, [r3, #0]
    3c3a:	1e5a      	subs	r2, r3, #1
    3c3c:	4193      	sbcs	r3, r2
    3c3e:	6822      	ldr	r2, [r4, #0]
    3c40:	0692      	lsls	r2, r2, #26
    3c42:	d51c      	bpl.n	3c7e <_printf_common+0x82>
    3c44:	2030      	movs	r0, #48	; 0x30
    3c46:	18e1      	adds	r1, r4, r3
    3c48:	3143      	adds	r1, #67	; 0x43
    3c4a:	7008      	strb	r0, [r1, #0]
    3c4c:	0021      	movs	r1, r4
    3c4e:	1c5a      	adds	r2, r3, #1
    3c50:	3145      	adds	r1, #69	; 0x45
    3c52:	7809      	ldrb	r1, [r1, #0]
    3c54:	18a2      	adds	r2, r4, r2
    3c56:	3243      	adds	r2, #67	; 0x43
    3c58:	3302      	adds	r3, #2
    3c5a:	7011      	strb	r1, [r2, #0]
    3c5c:	e00f      	b.n	3c7e <_printf_common+0x82>
    3c5e:	0022      	movs	r2, r4
    3c60:	2301      	movs	r3, #1
    3c62:	3219      	adds	r2, #25
    3c64:	9901      	ldr	r1, [sp, #4]
    3c66:	9800      	ldr	r0, [sp, #0]
    3c68:	9e08      	ldr	r6, [sp, #32]
    3c6a:	47b0      	blx	r6
    3c6c:	1c43      	adds	r3, r0, #1
    3c6e:	d00e      	beq.n	3c8e <_printf_common+0x92>
    3c70:	3501      	adds	r5, #1
    3c72:	68e3      	ldr	r3, [r4, #12]
    3c74:	683a      	ldr	r2, [r7, #0]
    3c76:	1a9b      	subs	r3, r3, r2
    3c78:	429d      	cmp	r5, r3
    3c7a:	dbf0      	blt.n	3c5e <_printf_common+0x62>
    3c7c:	e7da      	b.n	3c34 <_printf_common+0x38>
    3c7e:	0022      	movs	r2, r4
    3c80:	9901      	ldr	r1, [sp, #4]
    3c82:	3243      	adds	r2, #67	; 0x43
    3c84:	9800      	ldr	r0, [sp, #0]
    3c86:	9d08      	ldr	r5, [sp, #32]
    3c88:	47a8      	blx	r5
    3c8a:	1c43      	adds	r3, r0, #1
    3c8c:	d102      	bne.n	3c94 <_printf_common+0x98>
    3c8e:	2001      	movs	r0, #1
    3c90:	4240      	negs	r0, r0
    3c92:	e020      	b.n	3cd6 <_printf_common+0xda>
    3c94:	2306      	movs	r3, #6
    3c96:	6820      	ldr	r0, [r4, #0]
    3c98:	68e1      	ldr	r1, [r4, #12]
    3c9a:	683a      	ldr	r2, [r7, #0]
    3c9c:	4003      	ands	r3, r0
    3c9e:	2500      	movs	r5, #0
    3ca0:	2b04      	cmp	r3, #4
    3ca2:	d103      	bne.n	3cac <_printf_common+0xb0>
    3ca4:	1a8d      	subs	r5, r1, r2
    3ca6:	43eb      	mvns	r3, r5
    3ca8:	17db      	asrs	r3, r3, #31
    3caa:	401d      	ands	r5, r3
    3cac:	68a3      	ldr	r3, [r4, #8]
    3cae:	6922      	ldr	r2, [r4, #16]
    3cb0:	4293      	cmp	r3, r2
    3cb2:	dd01      	ble.n	3cb8 <_printf_common+0xbc>
    3cb4:	1a9b      	subs	r3, r3, r2
    3cb6:	18ed      	adds	r5, r5, r3
    3cb8:	2700      	movs	r7, #0
    3cba:	42bd      	cmp	r5, r7
    3cbc:	d00a      	beq.n	3cd4 <_printf_common+0xd8>
    3cbe:	0022      	movs	r2, r4
    3cc0:	2301      	movs	r3, #1
    3cc2:	321a      	adds	r2, #26
    3cc4:	9901      	ldr	r1, [sp, #4]
    3cc6:	9800      	ldr	r0, [sp, #0]
    3cc8:	9e08      	ldr	r6, [sp, #32]
    3cca:	47b0      	blx	r6
    3ccc:	1c43      	adds	r3, r0, #1
    3cce:	d0de      	beq.n	3c8e <_printf_common+0x92>
    3cd0:	3701      	adds	r7, #1
    3cd2:	e7f2      	b.n	3cba <_printf_common+0xbe>
    3cd4:	2000      	movs	r0, #0
    3cd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00003cd8 <_printf_i>:
    3cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cda:	b08b      	sub	sp, #44	; 0x2c
    3cdc:	9206      	str	r2, [sp, #24]
    3cde:	000a      	movs	r2, r1
    3ce0:	3243      	adds	r2, #67	; 0x43
    3ce2:	9307      	str	r3, [sp, #28]
    3ce4:	9005      	str	r0, [sp, #20]
    3ce6:	9204      	str	r2, [sp, #16]
    3ce8:	7e0a      	ldrb	r2, [r1, #24]
    3cea:	000c      	movs	r4, r1
    3cec:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3cee:	2a6e      	cmp	r2, #110	; 0x6e
    3cf0:	d100      	bne.n	3cf4 <_printf_i+0x1c>
    3cf2:	e0ab      	b.n	3e4c <_printf_i+0x174>
    3cf4:	d811      	bhi.n	3d1a <_printf_i+0x42>
    3cf6:	2a63      	cmp	r2, #99	; 0x63
    3cf8:	d022      	beq.n	3d40 <_printf_i+0x68>
    3cfa:	d809      	bhi.n	3d10 <_printf_i+0x38>
    3cfc:	2a00      	cmp	r2, #0
    3cfe:	d100      	bne.n	3d02 <_printf_i+0x2a>
    3d00:	e0b5      	b.n	3e6e <_printf_i+0x196>
    3d02:	2a58      	cmp	r2, #88	; 0x58
    3d04:	d000      	beq.n	3d08 <_printf_i+0x30>
    3d06:	e0c5      	b.n	3e94 <_printf_i+0x1bc>
    3d08:	3145      	adds	r1, #69	; 0x45
    3d0a:	700a      	strb	r2, [r1, #0]
    3d0c:	4a81      	ldr	r2, [pc, #516]	; (3f14 <_printf_i+0x23c>)
    3d0e:	e04f      	b.n	3db0 <_printf_i+0xd8>
    3d10:	2a64      	cmp	r2, #100	; 0x64
    3d12:	d01d      	beq.n	3d50 <_printf_i+0x78>
    3d14:	2a69      	cmp	r2, #105	; 0x69
    3d16:	d01b      	beq.n	3d50 <_printf_i+0x78>
    3d18:	e0bc      	b.n	3e94 <_printf_i+0x1bc>
    3d1a:	2a73      	cmp	r2, #115	; 0x73
    3d1c:	d100      	bne.n	3d20 <_printf_i+0x48>
    3d1e:	e0aa      	b.n	3e76 <_printf_i+0x19e>
    3d20:	d809      	bhi.n	3d36 <_printf_i+0x5e>
    3d22:	2a6f      	cmp	r2, #111	; 0x6f
    3d24:	d029      	beq.n	3d7a <_printf_i+0xa2>
    3d26:	2a70      	cmp	r2, #112	; 0x70
    3d28:	d000      	beq.n	3d2c <_printf_i+0x54>
    3d2a:	e0b3      	b.n	3e94 <_printf_i+0x1bc>
    3d2c:	2220      	movs	r2, #32
    3d2e:	6809      	ldr	r1, [r1, #0]
    3d30:	430a      	orrs	r2, r1
    3d32:	6022      	str	r2, [r4, #0]
    3d34:	e037      	b.n	3da6 <_printf_i+0xce>
    3d36:	2a75      	cmp	r2, #117	; 0x75
    3d38:	d01f      	beq.n	3d7a <_printf_i+0xa2>
    3d3a:	2a78      	cmp	r2, #120	; 0x78
    3d3c:	d033      	beq.n	3da6 <_printf_i+0xce>
    3d3e:	e0a9      	b.n	3e94 <_printf_i+0x1bc>
    3d40:	000e      	movs	r6, r1
    3d42:	681a      	ldr	r2, [r3, #0]
    3d44:	3642      	adds	r6, #66	; 0x42
    3d46:	1d11      	adds	r1, r2, #4
    3d48:	6019      	str	r1, [r3, #0]
    3d4a:	6813      	ldr	r3, [r2, #0]
    3d4c:	7033      	strb	r3, [r6, #0]
    3d4e:	e0a4      	b.n	3e9a <_printf_i+0x1c2>
    3d50:	6821      	ldr	r1, [r4, #0]
    3d52:	681a      	ldr	r2, [r3, #0]
    3d54:	0608      	lsls	r0, r1, #24
    3d56:	d406      	bmi.n	3d66 <_printf_i+0x8e>
    3d58:	0649      	lsls	r1, r1, #25
    3d5a:	d504      	bpl.n	3d66 <_printf_i+0x8e>
    3d5c:	1d11      	adds	r1, r2, #4
    3d5e:	6019      	str	r1, [r3, #0]
    3d60:	2300      	movs	r3, #0
    3d62:	5ed5      	ldrsh	r5, [r2, r3]
    3d64:	e002      	b.n	3d6c <_printf_i+0x94>
    3d66:	1d11      	adds	r1, r2, #4
    3d68:	6019      	str	r1, [r3, #0]
    3d6a:	6815      	ldr	r5, [r2, #0]
    3d6c:	2d00      	cmp	r5, #0
    3d6e:	da3b      	bge.n	3de8 <_printf_i+0x110>
    3d70:	232d      	movs	r3, #45	; 0x2d
    3d72:	9a04      	ldr	r2, [sp, #16]
    3d74:	426d      	negs	r5, r5
    3d76:	7013      	strb	r3, [r2, #0]
    3d78:	e036      	b.n	3de8 <_printf_i+0x110>
    3d7a:	6821      	ldr	r1, [r4, #0]
    3d7c:	681a      	ldr	r2, [r3, #0]
    3d7e:	0608      	lsls	r0, r1, #24
    3d80:	d406      	bmi.n	3d90 <_printf_i+0xb8>
    3d82:	0649      	lsls	r1, r1, #25
    3d84:	d504      	bpl.n	3d90 <_printf_i+0xb8>
    3d86:	6815      	ldr	r5, [r2, #0]
    3d88:	1d11      	adds	r1, r2, #4
    3d8a:	6019      	str	r1, [r3, #0]
    3d8c:	b2ad      	uxth	r5, r5
    3d8e:	e002      	b.n	3d96 <_printf_i+0xbe>
    3d90:	1d11      	adds	r1, r2, #4
    3d92:	6019      	str	r1, [r3, #0]
    3d94:	6815      	ldr	r5, [r2, #0]
    3d96:	4b5f      	ldr	r3, [pc, #380]	; (3f14 <_printf_i+0x23c>)
    3d98:	7e22      	ldrb	r2, [r4, #24]
    3d9a:	9303      	str	r3, [sp, #12]
    3d9c:	2708      	movs	r7, #8
    3d9e:	2a6f      	cmp	r2, #111	; 0x6f
    3da0:	d01d      	beq.n	3dde <_printf_i+0x106>
    3da2:	270a      	movs	r7, #10
    3da4:	e01b      	b.n	3dde <_printf_i+0x106>
    3da6:	0022      	movs	r2, r4
    3da8:	2178      	movs	r1, #120	; 0x78
    3daa:	3245      	adds	r2, #69	; 0x45
    3dac:	7011      	strb	r1, [r2, #0]
    3dae:	4a5a      	ldr	r2, [pc, #360]	; (3f18 <_printf_i+0x240>)
    3db0:	6819      	ldr	r1, [r3, #0]
    3db2:	9203      	str	r2, [sp, #12]
    3db4:	1d08      	adds	r0, r1, #4
    3db6:	6822      	ldr	r2, [r4, #0]
    3db8:	6018      	str	r0, [r3, #0]
    3dba:	680d      	ldr	r5, [r1, #0]
    3dbc:	0610      	lsls	r0, r2, #24
    3dbe:	d402      	bmi.n	3dc6 <_printf_i+0xee>
    3dc0:	0650      	lsls	r0, r2, #25
    3dc2:	d500      	bpl.n	3dc6 <_printf_i+0xee>
    3dc4:	b2ad      	uxth	r5, r5
    3dc6:	07d3      	lsls	r3, r2, #31
    3dc8:	d502      	bpl.n	3dd0 <_printf_i+0xf8>
    3dca:	2320      	movs	r3, #32
    3dcc:	431a      	orrs	r2, r3
    3dce:	6022      	str	r2, [r4, #0]
    3dd0:	2710      	movs	r7, #16
    3dd2:	2d00      	cmp	r5, #0
    3dd4:	d103      	bne.n	3dde <_printf_i+0x106>
    3dd6:	2320      	movs	r3, #32
    3dd8:	6822      	ldr	r2, [r4, #0]
    3dda:	439a      	bics	r2, r3
    3ddc:	6022      	str	r2, [r4, #0]
    3dde:	0023      	movs	r3, r4
    3de0:	2200      	movs	r2, #0
    3de2:	3343      	adds	r3, #67	; 0x43
    3de4:	701a      	strb	r2, [r3, #0]
    3de6:	e002      	b.n	3dee <_printf_i+0x116>
    3de8:	270a      	movs	r7, #10
    3dea:	4b4a      	ldr	r3, [pc, #296]	; (3f14 <_printf_i+0x23c>)
    3dec:	9303      	str	r3, [sp, #12]
    3dee:	6863      	ldr	r3, [r4, #4]
    3df0:	60a3      	str	r3, [r4, #8]
    3df2:	2b00      	cmp	r3, #0
    3df4:	db09      	blt.n	3e0a <_printf_i+0x132>
    3df6:	2204      	movs	r2, #4
    3df8:	6821      	ldr	r1, [r4, #0]
    3dfa:	4391      	bics	r1, r2
    3dfc:	6021      	str	r1, [r4, #0]
    3dfe:	2d00      	cmp	r5, #0
    3e00:	d105      	bne.n	3e0e <_printf_i+0x136>
    3e02:	9e04      	ldr	r6, [sp, #16]
    3e04:	2b00      	cmp	r3, #0
    3e06:	d011      	beq.n	3e2c <_printf_i+0x154>
    3e08:	e07b      	b.n	3f02 <_printf_i+0x22a>
    3e0a:	2d00      	cmp	r5, #0
    3e0c:	d079      	beq.n	3f02 <_printf_i+0x22a>
    3e0e:	9e04      	ldr	r6, [sp, #16]
    3e10:	0028      	movs	r0, r5
    3e12:	0039      	movs	r1, r7
    3e14:	f002 f922 	bl	605c <__aeabi_uidivmod>
    3e18:	9b03      	ldr	r3, [sp, #12]
    3e1a:	3e01      	subs	r6, #1
    3e1c:	5c5b      	ldrb	r3, [r3, r1]
    3e1e:	0028      	movs	r0, r5
    3e20:	7033      	strb	r3, [r6, #0]
    3e22:	0039      	movs	r1, r7
    3e24:	f002 f894 	bl	5f50 <__aeabi_uidiv>
    3e28:	1e05      	subs	r5, r0, #0
    3e2a:	d1f1      	bne.n	3e10 <_printf_i+0x138>
    3e2c:	2f08      	cmp	r7, #8
    3e2e:	d109      	bne.n	3e44 <_printf_i+0x16c>
    3e30:	6823      	ldr	r3, [r4, #0]
    3e32:	07db      	lsls	r3, r3, #31
    3e34:	d506      	bpl.n	3e44 <_printf_i+0x16c>
    3e36:	6863      	ldr	r3, [r4, #4]
    3e38:	6922      	ldr	r2, [r4, #16]
    3e3a:	4293      	cmp	r3, r2
    3e3c:	dc02      	bgt.n	3e44 <_printf_i+0x16c>
    3e3e:	2330      	movs	r3, #48	; 0x30
    3e40:	3e01      	subs	r6, #1
    3e42:	7033      	strb	r3, [r6, #0]
    3e44:	9b04      	ldr	r3, [sp, #16]
    3e46:	1b9b      	subs	r3, r3, r6
    3e48:	6123      	str	r3, [r4, #16]
    3e4a:	e02b      	b.n	3ea4 <_printf_i+0x1cc>
    3e4c:	6809      	ldr	r1, [r1, #0]
    3e4e:	681a      	ldr	r2, [r3, #0]
    3e50:	0608      	lsls	r0, r1, #24
    3e52:	d407      	bmi.n	3e64 <_printf_i+0x18c>
    3e54:	0649      	lsls	r1, r1, #25
    3e56:	d505      	bpl.n	3e64 <_printf_i+0x18c>
    3e58:	1d11      	adds	r1, r2, #4
    3e5a:	6019      	str	r1, [r3, #0]
    3e5c:	6813      	ldr	r3, [r2, #0]
    3e5e:	8aa2      	ldrh	r2, [r4, #20]
    3e60:	801a      	strh	r2, [r3, #0]
    3e62:	e004      	b.n	3e6e <_printf_i+0x196>
    3e64:	1d11      	adds	r1, r2, #4
    3e66:	6019      	str	r1, [r3, #0]
    3e68:	6813      	ldr	r3, [r2, #0]
    3e6a:	6962      	ldr	r2, [r4, #20]
    3e6c:	601a      	str	r2, [r3, #0]
    3e6e:	2300      	movs	r3, #0
    3e70:	9e04      	ldr	r6, [sp, #16]
    3e72:	6123      	str	r3, [r4, #16]
    3e74:	e016      	b.n	3ea4 <_printf_i+0x1cc>
    3e76:	681a      	ldr	r2, [r3, #0]
    3e78:	1d11      	adds	r1, r2, #4
    3e7a:	6019      	str	r1, [r3, #0]
    3e7c:	6816      	ldr	r6, [r2, #0]
    3e7e:	2100      	movs	r1, #0
    3e80:	6862      	ldr	r2, [r4, #4]
    3e82:	0030      	movs	r0, r6
    3e84:	f001 faa6 	bl	53d4 <memchr>
    3e88:	2800      	cmp	r0, #0
    3e8a:	d001      	beq.n	3e90 <_printf_i+0x1b8>
    3e8c:	1b80      	subs	r0, r0, r6
    3e8e:	6060      	str	r0, [r4, #4]
    3e90:	6863      	ldr	r3, [r4, #4]
    3e92:	e003      	b.n	3e9c <_printf_i+0x1c4>
    3e94:	0026      	movs	r6, r4
    3e96:	3642      	adds	r6, #66	; 0x42
    3e98:	7032      	strb	r2, [r6, #0]
    3e9a:	2301      	movs	r3, #1
    3e9c:	6123      	str	r3, [r4, #16]
    3e9e:	2300      	movs	r3, #0
    3ea0:	9a04      	ldr	r2, [sp, #16]
    3ea2:	7013      	strb	r3, [r2, #0]
    3ea4:	9b07      	ldr	r3, [sp, #28]
    3ea6:	aa09      	add	r2, sp, #36	; 0x24
    3ea8:	9300      	str	r3, [sp, #0]
    3eaa:	0021      	movs	r1, r4
    3eac:	9b06      	ldr	r3, [sp, #24]
    3eae:	9805      	ldr	r0, [sp, #20]
    3eb0:	f7ff fea4 	bl	3bfc <_printf_common>
    3eb4:	1c43      	adds	r3, r0, #1
    3eb6:	d102      	bne.n	3ebe <_printf_i+0x1e6>
    3eb8:	2001      	movs	r0, #1
    3eba:	4240      	negs	r0, r0
    3ebc:	e027      	b.n	3f0e <_printf_i+0x236>
    3ebe:	6923      	ldr	r3, [r4, #16]
    3ec0:	0032      	movs	r2, r6
    3ec2:	9906      	ldr	r1, [sp, #24]
    3ec4:	9805      	ldr	r0, [sp, #20]
    3ec6:	9d07      	ldr	r5, [sp, #28]
    3ec8:	47a8      	blx	r5
    3eca:	1c43      	adds	r3, r0, #1
    3ecc:	d0f4      	beq.n	3eb8 <_printf_i+0x1e0>
    3ece:	6823      	ldr	r3, [r4, #0]
    3ed0:	2500      	movs	r5, #0
    3ed2:	079b      	lsls	r3, r3, #30
    3ed4:	d40f      	bmi.n	3ef6 <_printf_i+0x21e>
    3ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3ed8:	68e0      	ldr	r0, [r4, #12]
    3eda:	4298      	cmp	r0, r3
    3edc:	da17      	bge.n	3f0e <_printf_i+0x236>
    3ede:	0018      	movs	r0, r3
    3ee0:	e015      	b.n	3f0e <_printf_i+0x236>
    3ee2:	0022      	movs	r2, r4
    3ee4:	2301      	movs	r3, #1
    3ee6:	3219      	adds	r2, #25
    3ee8:	9906      	ldr	r1, [sp, #24]
    3eea:	9805      	ldr	r0, [sp, #20]
    3eec:	9e07      	ldr	r6, [sp, #28]
    3eee:	47b0      	blx	r6
    3ef0:	1c43      	adds	r3, r0, #1
    3ef2:	d0e1      	beq.n	3eb8 <_printf_i+0x1e0>
    3ef4:	3501      	adds	r5, #1
    3ef6:	68e3      	ldr	r3, [r4, #12]
    3ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3efa:	1a9b      	subs	r3, r3, r2
    3efc:	429d      	cmp	r5, r3
    3efe:	dbf0      	blt.n	3ee2 <_printf_i+0x20a>
    3f00:	e7e9      	b.n	3ed6 <_printf_i+0x1fe>
    3f02:	0026      	movs	r6, r4
    3f04:	9b03      	ldr	r3, [sp, #12]
    3f06:	3642      	adds	r6, #66	; 0x42
    3f08:	781b      	ldrb	r3, [r3, #0]
    3f0a:	7033      	strb	r3, [r6, #0]
    3f0c:	e78e      	b.n	3e2c <_printf_i+0x154>
    3f0e:	b00b      	add	sp, #44	; 0x2c
    3f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f12:	46c0      	nop			; (mov r8, r8)
    3f14:	00008c0e 	.word	0x00008c0e
    3f18:	00008c1f 	.word	0x00008c1f

00003f1c <iprintf>:
    3f1c:	b40f      	push	{r0, r1, r2, r3}
    3f1e:	4b0b      	ldr	r3, [pc, #44]	; (3f4c <iprintf+0x30>)
    3f20:	b513      	push	{r0, r1, r4, lr}
    3f22:	681c      	ldr	r4, [r3, #0]
    3f24:	2c00      	cmp	r4, #0
    3f26:	d005      	beq.n	3f34 <iprintf+0x18>
    3f28:	69a3      	ldr	r3, [r4, #24]
    3f2a:	2b00      	cmp	r3, #0
    3f2c:	d102      	bne.n	3f34 <iprintf+0x18>
    3f2e:	0020      	movs	r0, r4
    3f30:	f001 f94a 	bl	51c8 <__sinit>
    3f34:	ab05      	add	r3, sp, #20
    3f36:	9a04      	ldr	r2, [sp, #16]
    3f38:	68a1      	ldr	r1, [r4, #8]
    3f3a:	0020      	movs	r0, r4
    3f3c:	9301      	str	r3, [sp, #4]
    3f3e:	f001 fe11 	bl	5b64 <_vfiprintf_r>
    3f42:	bc16      	pop	{r1, r2, r4}
    3f44:	bc08      	pop	{r3}
    3f46:	b004      	add	sp, #16
    3f48:	4718      	bx	r3
    3f4a:	46c0      	nop			; (mov r8, r8)
    3f4c:	2000006c 	.word	0x2000006c

00003f50 <_puts_r>:
    3f50:	b570      	push	{r4, r5, r6, lr}
    3f52:	0005      	movs	r5, r0
    3f54:	000e      	movs	r6, r1
    3f56:	2800      	cmp	r0, #0
    3f58:	d004      	beq.n	3f64 <_puts_r+0x14>
    3f5a:	6983      	ldr	r3, [r0, #24]
    3f5c:	2b00      	cmp	r3, #0
    3f5e:	d101      	bne.n	3f64 <_puts_r+0x14>
    3f60:	f001 f932 	bl	51c8 <__sinit>
    3f64:	69ab      	ldr	r3, [r5, #24]
    3f66:	68ac      	ldr	r4, [r5, #8]
    3f68:	2b00      	cmp	r3, #0
    3f6a:	d102      	bne.n	3f72 <_puts_r+0x22>
    3f6c:	0028      	movs	r0, r5
    3f6e:	f001 f92b 	bl	51c8 <__sinit>
    3f72:	4b25      	ldr	r3, [pc, #148]	; (4008 <_puts_r+0xb8>)
    3f74:	429c      	cmp	r4, r3
    3f76:	d101      	bne.n	3f7c <_puts_r+0x2c>
    3f78:	686c      	ldr	r4, [r5, #4]
    3f7a:	e008      	b.n	3f8e <_puts_r+0x3e>
    3f7c:	4b23      	ldr	r3, [pc, #140]	; (400c <_puts_r+0xbc>)
    3f7e:	429c      	cmp	r4, r3
    3f80:	d101      	bne.n	3f86 <_puts_r+0x36>
    3f82:	68ac      	ldr	r4, [r5, #8]
    3f84:	e003      	b.n	3f8e <_puts_r+0x3e>
    3f86:	4b22      	ldr	r3, [pc, #136]	; (4010 <_puts_r+0xc0>)
    3f88:	429c      	cmp	r4, r3
    3f8a:	d100      	bne.n	3f8e <_puts_r+0x3e>
    3f8c:	68ec      	ldr	r4, [r5, #12]
    3f8e:	89a3      	ldrh	r3, [r4, #12]
    3f90:	071b      	lsls	r3, r3, #28
    3f92:	d502      	bpl.n	3f9a <_puts_r+0x4a>
    3f94:	6923      	ldr	r3, [r4, #16]
    3f96:	2b00      	cmp	r3, #0
    3f98:	d111      	bne.n	3fbe <_puts_r+0x6e>
    3f9a:	0021      	movs	r1, r4
    3f9c:	0028      	movs	r0, r5
    3f9e:	f000 f95d 	bl	425c <__swsetup_r>
    3fa2:	2800      	cmp	r0, #0
    3fa4:	d00b      	beq.n	3fbe <_puts_r+0x6e>
    3fa6:	2001      	movs	r0, #1
    3fa8:	4240      	negs	r0, r0
    3faa:	e02b      	b.n	4004 <_puts_r+0xb4>
    3fac:	3b01      	subs	r3, #1
    3fae:	3601      	adds	r6, #1
    3fb0:	60a3      	str	r3, [r4, #8]
    3fb2:	2b00      	cmp	r3, #0
    3fb4:	db08      	blt.n	3fc8 <_puts_r+0x78>
    3fb6:	6823      	ldr	r3, [r4, #0]
    3fb8:	1c5a      	adds	r2, r3, #1
    3fba:	6022      	str	r2, [r4, #0]
    3fbc:	7019      	strb	r1, [r3, #0]
    3fbe:	7831      	ldrb	r1, [r6, #0]
    3fc0:	68a3      	ldr	r3, [r4, #8]
    3fc2:	2900      	cmp	r1, #0
    3fc4:	d1f2      	bne.n	3fac <_puts_r+0x5c>
    3fc6:	e00b      	b.n	3fe0 <_puts_r+0x90>
    3fc8:	69a2      	ldr	r2, [r4, #24]
    3fca:	4293      	cmp	r3, r2
    3fcc:	db01      	blt.n	3fd2 <_puts_r+0x82>
    3fce:	290a      	cmp	r1, #10
    3fd0:	d1f1      	bne.n	3fb6 <_puts_r+0x66>
    3fd2:	0022      	movs	r2, r4
    3fd4:	0028      	movs	r0, r5
    3fd6:	f000 f8e9 	bl	41ac <__swbuf_r>
    3fda:	1c43      	adds	r3, r0, #1
    3fdc:	d1ef      	bne.n	3fbe <_puts_r+0x6e>
    3fde:	e7e2      	b.n	3fa6 <_puts_r+0x56>
    3fe0:	3b01      	subs	r3, #1
    3fe2:	60a3      	str	r3, [r4, #8]
    3fe4:	2b00      	cmp	r3, #0
    3fe6:	da08      	bge.n	3ffa <_puts_r+0xaa>
    3fe8:	0022      	movs	r2, r4
    3fea:	310a      	adds	r1, #10
    3fec:	0028      	movs	r0, r5
    3fee:	f000 f8dd 	bl	41ac <__swbuf_r>
    3ff2:	1c43      	adds	r3, r0, #1
    3ff4:	d0d7      	beq.n	3fa6 <_puts_r+0x56>
    3ff6:	200a      	movs	r0, #10
    3ff8:	e004      	b.n	4004 <_puts_r+0xb4>
    3ffa:	200a      	movs	r0, #10
    3ffc:	6823      	ldr	r3, [r4, #0]
    3ffe:	1c5a      	adds	r2, r3, #1
    4000:	6022      	str	r2, [r4, #0]
    4002:	7018      	strb	r0, [r3, #0]
    4004:	bd70      	pop	{r4, r5, r6, pc}
    4006:	46c0      	nop			; (mov r8, r8)
    4008:	00008c40 	.word	0x00008c40
    400c:	00008c60 	.word	0x00008c60
    4010:	00008c80 	.word	0x00008c80

00004014 <puts>:
    4014:	b510      	push	{r4, lr}
    4016:	4b03      	ldr	r3, [pc, #12]	; (4024 <puts+0x10>)
    4018:	0001      	movs	r1, r0
    401a:	6818      	ldr	r0, [r3, #0]
    401c:	f7ff ff98 	bl	3f50 <_puts_r>
    4020:	bd10      	pop	{r4, pc}
    4022:	46c0      	nop			; (mov r8, r8)
    4024:	2000006c 	.word	0x2000006c

00004028 <setbuf>:
    4028:	424a      	negs	r2, r1
    402a:	414a      	adcs	r2, r1
    402c:	2380      	movs	r3, #128	; 0x80
    402e:	b510      	push	{r4, lr}
    4030:	0052      	lsls	r2, r2, #1
    4032:	00db      	lsls	r3, r3, #3
    4034:	f000 f802 	bl	403c <setvbuf>
    4038:	bd10      	pop	{r4, pc}
	...

0000403c <setvbuf>:
    403c:	b5f0      	push	{r4, r5, r6, r7, lr}
    403e:	001d      	movs	r5, r3
    4040:	4b51      	ldr	r3, [pc, #324]	; (4188 <setvbuf+0x14c>)
    4042:	b085      	sub	sp, #20
    4044:	681e      	ldr	r6, [r3, #0]
    4046:	0004      	movs	r4, r0
    4048:	000f      	movs	r7, r1
    404a:	9200      	str	r2, [sp, #0]
    404c:	2e00      	cmp	r6, #0
    404e:	d005      	beq.n	405c <setvbuf+0x20>
    4050:	69b3      	ldr	r3, [r6, #24]
    4052:	2b00      	cmp	r3, #0
    4054:	d102      	bne.n	405c <setvbuf+0x20>
    4056:	0030      	movs	r0, r6
    4058:	f001 f8b6 	bl	51c8 <__sinit>
    405c:	4b4b      	ldr	r3, [pc, #300]	; (418c <setvbuf+0x150>)
    405e:	429c      	cmp	r4, r3
    4060:	d101      	bne.n	4066 <setvbuf+0x2a>
    4062:	6874      	ldr	r4, [r6, #4]
    4064:	e008      	b.n	4078 <setvbuf+0x3c>
    4066:	4b4a      	ldr	r3, [pc, #296]	; (4190 <setvbuf+0x154>)
    4068:	429c      	cmp	r4, r3
    406a:	d101      	bne.n	4070 <setvbuf+0x34>
    406c:	68b4      	ldr	r4, [r6, #8]
    406e:	e003      	b.n	4078 <setvbuf+0x3c>
    4070:	4b48      	ldr	r3, [pc, #288]	; (4194 <setvbuf+0x158>)
    4072:	429c      	cmp	r4, r3
    4074:	d100      	bne.n	4078 <setvbuf+0x3c>
    4076:	68f4      	ldr	r4, [r6, #12]
    4078:	9b00      	ldr	r3, [sp, #0]
    407a:	2b02      	cmp	r3, #2
    407c:	d005      	beq.n	408a <setvbuf+0x4e>
    407e:	2b01      	cmp	r3, #1
    4080:	d900      	bls.n	4084 <setvbuf+0x48>
    4082:	e07c      	b.n	417e <setvbuf+0x142>
    4084:	2d00      	cmp	r5, #0
    4086:	da00      	bge.n	408a <setvbuf+0x4e>
    4088:	e079      	b.n	417e <setvbuf+0x142>
    408a:	0021      	movs	r1, r4
    408c:	0030      	movs	r0, r6
    408e:	f001 f82d 	bl	50ec <_fflush_r>
    4092:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4094:	2900      	cmp	r1, #0
    4096:	d008      	beq.n	40aa <setvbuf+0x6e>
    4098:	0023      	movs	r3, r4
    409a:	3344      	adds	r3, #68	; 0x44
    409c:	4299      	cmp	r1, r3
    409e:	d002      	beq.n	40a6 <setvbuf+0x6a>
    40a0:	0030      	movs	r0, r6
    40a2:	f001 fc9b 	bl	59dc <_free_r>
    40a6:	2300      	movs	r3, #0
    40a8:	6363      	str	r3, [r4, #52]	; 0x34
    40aa:	2300      	movs	r3, #0
    40ac:	61a3      	str	r3, [r4, #24]
    40ae:	6063      	str	r3, [r4, #4]
    40b0:	89a3      	ldrh	r3, [r4, #12]
    40b2:	061b      	lsls	r3, r3, #24
    40b4:	d503      	bpl.n	40be <setvbuf+0x82>
    40b6:	6921      	ldr	r1, [r4, #16]
    40b8:	0030      	movs	r0, r6
    40ba:	f001 fc8f 	bl	59dc <_free_r>
    40be:	89a2      	ldrh	r2, [r4, #12]
    40c0:	4b35      	ldr	r3, [pc, #212]	; (4198 <setvbuf+0x15c>)
    40c2:	4013      	ands	r3, r2
    40c4:	81a3      	strh	r3, [r4, #12]
    40c6:	9b00      	ldr	r3, [sp, #0]
    40c8:	2b02      	cmp	r3, #2
    40ca:	d021      	beq.n	4110 <setvbuf+0xd4>
    40cc:	ab03      	add	r3, sp, #12
    40ce:	aa02      	add	r2, sp, #8
    40d0:	0021      	movs	r1, r4
    40d2:	0030      	movs	r0, r6
    40d4:	f001 f910 	bl	52f8 <__swhatbuf_r>
    40d8:	89a3      	ldrh	r3, [r4, #12]
    40da:	4318      	orrs	r0, r3
    40dc:	81a0      	strh	r0, [r4, #12]
    40de:	2d00      	cmp	r5, #0
    40e0:	d101      	bne.n	40e6 <setvbuf+0xaa>
    40e2:	9d02      	ldr	r5, [sp, #8]
    40e4:	e001      	b.n	40ea <setvbuf+0xae>
    40e6:	2f00      	cmp	r7, #0
    40e8:	d125      	bne.n	4136 <setvbuf+0xfa>
    40ea:	0028      	movs	r0, r5
    40ec:	f001 f968 	bl	53c0 <malloc>
    40f0:	9501      	str	r5, [sp, #4]
    40f2:	1e07      	subs	r7, r0, #0
    40f4:	d11a      	bne.n	412c <setvbuf+0xf0>
    40f6:	9b02      	ldr	r3, [sp, #8]
    40f8:	9301      	str	r3, [sp, #4]
    40fa:	42ab      	cmp	r3, r5
    40fc:	d102      	bne.n	4104 <setvbuf+0xc8>
    40fe:	2001      	movs	r0, #1
    4100:	4240      	negs	r0, r0
    4102:	e006      	b.n	4112 <setvbuf+0xd6>
    4104:	9801      	ldr	r0, [sp, #4]
    4106:	f001 f95b 	bl	53c0 <malloc>
    410a:	1e07      	subs	r7, r0, #0
    410c:	d10e      	bne.n	412c <setvbuf+0xf0>
    410e:	e7f6      	b.n	40fe <setvbuf+0xc2>
    4110:	2000      	movs	r0, #0
    4112:	2202      	movs	r2, #2
    4114:	89a3      	ldrh	r3, [r4, #12]
    4116:	4313      	orrs	r3, r2
    4118:	81a3      	strh	r3, [r4, #12]
    411a:	2300      	movs	r3, #0
    411c:	60a3      	str	r3, [r4, #8]
    411e:	0023      	movs	r3, r4
    4120:	3347      	adds	r3, #71	; 0x47
    4122:	6023      	str	r3, [r4, #0]
    4124:	6123      	str	r3, [r4, #16]
    4126:	2301      	movs	r3, #1
    4128:	6163      	str	r3, [r4, #20]
    412a:	e02a      	b.n	4182 <setvbuf+0x146>
    412c:	2280      	movs	r2, #128	; 0x80
    412e:	89a3      	ldrh	r3, [r4, #12]
    4130:	9d01      	ldr	r5, [sp, #4]
    4132:	4313      	orrs	r3, r2
    4134:	81a3      	strh	r3, [r4, #12]
    4136:	69b3      	ldr	r3, [r6, #24]
    4138:	2b00      	cmp	r3, #0
    413a:	d102      	bne.n	4142 <setvbuf+0x106>
    413c:	0030      	movs	r0, r6
    413e:	f001 f843 	bl	51c8 <__sinit>
    4142:	9b00      	ldr	r3, [sp, #0]
    4144:	2b01      	cmp	r3, #1
    4146:	d103      	bne.n	4150 <setvbuf+0x114>
    4148:	89a3      	ldrh	r3, [r4, #12]
    414a:	9a00      	ldr	r2, [sp, #0]
    414c:	431a      	orrs	r2, r3
    414e:	81a2      	strh	r2, [r4, #12]
    4150:	2308      	movs	r3, #8
    4152:	89a2      	ldrh	r2, [r4, #12]
    4154:	6027      	str	r7, [r4, #0]
    4156:	4013      	ands	r3, r2
    4158:	6127      	str	r7, [r4, #16]
    415a:	6165      	str	r5, [r4, #20]
    415c:	1e18      	subs	r0, r3, #0
    415e:	d00c      	beq.n	417a <setvbuf+0x13e>
    4160:	2301      	movs	r3, #1
    4162:	401a      	ands	r2, r3
    4164:	2300      	movs	r3, #0
    4166:	1e10      	subs	r0, r2, #0
    4168:	4298      	cmp	r0, r3
    416a:	d004      	beq.n	4176 <setvbuf+0x13a>
    416c:	426d      	negs	r5, r5
    416e:	60a3      	str	r3, [r4, #8]
    4170:	61a5      	str	r5, [r4, #24]
    4172:	0018      	movs	r0, r3
    4174:	e005      	b.n	4182 <setvbuf+0x146>
    4176:	60a5      	str	r5, [r4, #8]
    4178:	e003      	b.n	4182 <setvbuf+0x146>
    417a:	60a3      	str	r3, [r4, #8]
    417c:	e001      	b.n	4182 <setvbuf+0x146>
    417e:	2001      	movs	r0, #1
    4180:	4240      	negs	r0, r0
    4182:	b005      	add	sp, #20
    4184:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4186:	46c0      	nop			; (mov r8, r8)
    4188:	2000006c 	.word	0x2000006c
    418c:	00008c40 	.word	0x00008c40
    4190:	00008c60 	.word	0x00008c60
    4194:	00008c80 	.word	0x00008c80
    4198:	fffff35c 	.word	0xfffff35c

0000419c <strlen>:
    419c:	2300      	movs	r3, #0
    419e:	5cc2      	ldrb	r2, [r0, r3]
    41a0:	3301      	adds	r3, #1
    41a2:	2a00      	cmp	r2, #0
    41a4:	d1fb      	bne.n	419e <strlen+0x2>
    41a6:	1e58      	subs	r0, r3, #1
    41a8:	4770      	bx	lr
	...

000041ac <__swbuf_r>:
    41ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41ae:	0005      	movs	r5, r0
    41b0:	000f      	movs	r7, r1
    41b2:	0014      	movs	r4, r2
    41b4:	2800      	cmp	r0, #0
    41b6:	d004      	beq.n	41c2 <__swbuf_r+0x16>
    41b8:	6983      	ldr	r3, [r0, #24]
    41ba:	2b00      	cmp	r3, #0
    41bc:	d101      	bne.n	41c2 <__swbuf_r+0x16>
    41be:	f001 f803 	bl	51c8 <__sinit>
    41c2:	4b23      	ldr	r3, [pc, #140]	; (4250 <__swbuf_r+0xa4>)
    41c4:	429c      	cmp	r4, r3
    41c6:	d101      	bne.n	41cc <__swbuf_r+0x20>
    41c8:	686c      	ldr	r4, [r5, #4]
    41ca:	e008      	b.n	41de <__swbuf_r+0x32>
    41cc:	4b21      	ldr	r3, [pc, #132]	; (4254 <__swbuf_r+0xa8>)
    41ce:	429c      	cmp	r4, r3
    41d0:	d101      	bne.n	41d6 <__swbuf_r+0x2a>
    41d2:	68ac      	ldr	r4, [r5, #8]
    41d4:	e003      	b.n	41de <__swbuf_r+0x32>
    41d6:	4b20      	ldr	r3, [pc, #128]	; (4258 <__swbuf_r+0xac>)
    41d8:	429c      	cmp	r4, r3
    41da:	d100      	bne.n	41de <__swbuf_r+0x32>
    41dc:	68ec      	ldr	r4, [r5, #12]
    41de:	69a3      	ldr	r3, [r4, #24]
    41e0:	60a3      	str	r3, [r4, #8]
    41e2:	89a3      	ldrh	r3, [r4, #12]
    41e4:	071b      	lsls	r3, r3, #28
    41e6:	d50a      	bpl.n	41fe <__swbuf_r+0x52>
    41e8:	6923      	ldr	r3, [r4, #16]
    41ea:	2b00      	cmp	r3, #0
    41ec:	d007      	beq.n	41fe <__swbuf_r+0x52>
    41ee:	6823      	ldr	r3, [r4, #0]
    41f0:	6922      	ldr	r2, [r4, #16]
    41f2:	b2fe      	uxtb	r6, r7
    41f4:	1a98      	subs	r0, r3, r2
    41f6:	6963      	ldr	r3, [r4, #20]
    41f8:	4298      	cmp	r0, r3
    41fa:	db0f      	blt.n	421c <__swbuf_r+0x70>
    41fc:	e008      	b.n	4210 <__swbuf_r+0x64>
    41fe:	0021      	movs	r1, r4
    4200:	0028      	movs	r0, r5
    4202:	f000 f82b 	bl	425c <__swsetup_r>
    4206:	2800      	cmp	r0, #0
    4208:	d0f1      	beq.n	41ee <__swbuf_r+0x42>
    420a:	2001      	movs	r0, #1
    420c:	4240      	negs	r0, r0
    420e:	e01d      	b.n	424c <__swbuf_r+0xa0>
    4210:	0021      	movs	r1, r4
    4212:	0028      	movs	r0, r5
    4214:	f000 ff6a 	bl	50ec <_fflush_r>
    4218:	2800      	cmp	r0, #0
    421a:	d1f6      	bne.n	420a <__swbuf_r+0x5e>
    421c:	68a3      	ldr	r3, [r4, #8]
    421e:	3001      	adds	r0, #1
    4220:	3b01      	subs	r3, #1
    4222:	60a3      	str	r3, [r4, #8]
    4224:	6823      	ldr	r3, [r4, #0]
    4226:	1c5a      	adds	r2, r3, #1
    4228:	6022      	str	r2, [r4, #0]
    422a:	701f      	strb	r7, [r3, #0]
    422c:	6963      	ldr	r3, [r4, #20]
    422e:	4298      	cmp	r0, r3
    4230:	d005      	beq.n	423e <__swbuf_r+0x92>
    4232:	89a3      	ldrh	r3, [r4, #12]
    4234:	0030      	movs	r0, r6
    4236:	07db      	lsls	r3, r3, #31
    4238:	d508      	bpl.n	424c <__swbuf_r+0xa0>
    423a:	2e0a      	cmp	r6, #10
    423c:	d106      	bne.n	424c <__swbuf_r+0xa0>
    423e:	0021      	movs	r1, r4
    4240:	0028      	movs	r0, r5
    4242:	f000 ff53 	bl	50ec <_fflush_r>
    4246:	2800      	cmp	r0, #0
    4248:	d1df      	bne.n	420a <__swbuf_r+0x5e>
    424a:	0030      	movs	r0, r6
    424c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    424e:	46c0      	nop			; (mov r8, r8)
    4250:	00008c40 	.word	0x00008c40
    4254:	00008c60 	.word	0x00008c60
    4258:	00008c80 	.word	0x00008c80

0000425c <__swsetup_r>:
    425c:	4b36      	ldr	r3, [pc, #216]	; (4338 <__swsetup_r+0xdc>)
    425e:	b570      	push	{r4, r5, r6, lr}
    4260:	681d      	ldr	r5, [r3, #0]
    4262:	0006      	movs	r6, r0
    4264:	000c      	movs	r4, r1
    4266:	2d00      	cmp	r5, #0
    4268:	d005      	beq.n	4276 <__swsetup_r+0x1a>
    426a:	69ab      	ldr	r3, [r5, #24]
    426c:	2b00      	cmp	r3, #0
    426e:	d102      	bne.n	4276 <__swsetup_r+0x1a>
    4270:	0028      	movs	r0, r5
    4272:	f000 ffa9 	bl	51c8 <__sinit>
    4276:	4b31      	ldr	r3, [pc, #196]	; (433c <__swsetup_r+0xe0>)
    4278:	429c      	cmp	r4, r3
    427a:	d101      	bne.n	4280 <__swsetup_r+0x24>
    427c:	686c      	ldr	r4, [r5, #4]
    427e:	e008      	b.n	4292 <__swsetup_r+0x36>
    4280:	4b2f      	ldr	r3, [pc, #188]	; (4340 <__swsetup_r+0xe4>)
    4282:	429c      	cmp	r4, r3
    4284:	d101      	bne.n	428a <__swsetup_r+0x2e>
    4286:	68ac      	ldr	r4, [r5, #8]
    4288:	e003      	b.n	4292 <__swsetup_r+0x36>
    428a:	4b2e      	ldr	r3, [pc, #184]	; (4344 <__swsetup_r+0xe8>)
    428c:	429c      	cmp	r4, r3
    428e:	d100      	bne.n	4292 <__swsetup_r+0x36>
    4290:	68ec      	ldr	r4, [r5, #12]
    4292:	220c      	movs	r2, #12
    4294:	5ea3      	ldrsh	r3, [r4, r2]
    4296:	b29a      	uxth	r2, r3
    4298:	0711      	lsls	r1, r2, #28
    429a:	d423      	bmi.n	42e4 <__swsetup_r+0x88>
    429c:	06d1      	lsls	r1, r2, #27
    429e:	d407      	bmi.n	42b0 <__swsetup_r+0x54>
    42a0:	2209      	movs	r2, #9
    42a2:	2001      	movs	r0, #1
    42a4:	6032      	str	r2, [r6, #0]
    42a6:	3237      	adds	r2, #55	; 0x37
    42a8:	4313      	orrs	r3, r2
    42aa:	81a3      	strh	r3, [r4, #12]
    42ac:	4240      	negs	r0, r0
    42ae:	e042      	b.n	4336 <__swsetup_r+0xda>
    42b0:	0753      	lsls	r3, r2, #29
    42b2:	d513      	bpl.n	42dc <__swsetup_r+0x80>
    42b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    42b6:	2900      	cmp	r1, #0
    42b8:	d008      	beq.n	42cc <__swsetup_r+0x70>
    42ba:	0023      	movs	r3, r4
    42bc:	3344      	adds	r3, #68	; 0x44
    42be:	4299      	cmp	r1, r3
    42c0:	d002      	beq.n	42c8 <__swsetup_r+0x6c>
    42c2:	0030      	movs	r0, r6
    42c4:	f001 fb8a 	bl	59dc <_free_r>
    42c8:	2300      	movs	r3, #0
    42ca:	6363      	str	r3, [r4, #52]	; 0x34
    42cc:	2224      	movs	r2, #36	; 0x24
    42ce:	89a3      	ldrh	r3, [r4, #12]
    42d0:	4393      	bics	r3, r2
    42d2:	81a3      	strh	r3, [r4, #12]
    42d4:	2300      	movs	r3, #0
    42d6:	6063      	str	r3, [r4, #4]
    42d8:	6923      	ldr	r3, [r4, #16]
    42da:	6023      	str	r3, [r4, #0]
    42dc:	2208      	movs	r2, #8
    42de:	89a3      	ldrh	r3, [r4, #12]
    42e0:	4313      	orrs	r3, r2
    42e2:	81a3      	strh	r3, [r4, #12]
    42e4:	6923      	ldr	r3, [r4, #16]
    42e6:	2b00      	cmp	r3, #0
    42e8:	d10b      	bne.n	4302 <__swsetup_r+0xa6>
    42ea:	23a0      	movs	r3, #160	; 0xa0
    42ec:	89a2      	ldrh	r2, [r4, #12]
    42ee:	009b      	lsls	r3, r3, #2
    42f0:	4013      	ands	r3, r2
    42f2:	2280      	movs	r2, #128	; 0x80
    42f4:	0092      	lsls	r2, r2, #2
    42f6:	4293      	cmp	r3, r2
    42f8:	d003      	beq.n	4302 <__swsetup_r+0xa6>
    42fa:	0021      	movs	r1, r4
    42fc:	0030      	movs	r0, r6
    42fe:	f001 f821 	bl	5344 <__smakebuf_r>
    4302:	2301      	movs	r3, #1
    4304:	89a2      	ldrh	r2, [r4, #12]
    4306:	4013      	ands	r3, r2
    4308:	d005      	beq.n	4316 <__swsetup_r+0xba>
    430a:	2300      	movs	r3, #0
    430c:	60a3      	str	r3, [r4, #8]
    430e:	6963      	ldr	r3, [r4, #20]
    4310:	425b      	negs	r3, r3
    4312:	61a3      	str	r3, [r4, #24]
    4314:	e003      	b.n	431e <__swsetup_r+0xc2>
    4316:	0792      	lsls	r2, r2, #30
    4318:	d400      	bmi.n	431c <__swsetup_r+0xc0>
    431a:	6963      	ldr	r3, [r4, #20]
    431c:	60a3      	str	r3, [r4, #8]
    431e:	2000      	movs	r0, #0
    4320:	6923      	ldr	r3, [r4, #16]
    4322:	4283      	cmp	r3, r0
    4324:	d107      	bne.n	4336 <__swsetup_r+0xda>
    4326:	220c      	movs	r2, #12
    4328:	5ea3      	ldrsh	r3, [r4, r2]
    432a:	061a      	lsls	r2, r3, #24
    432c:	d503      	bpl.n	4336 <__swsetup_r+0xda>
    432e:	2240      	movs	r2, #64	; 0x40
    4330:	4313      	orrs	r3, r2
    4332:	81a3      	strh	r3, [r4, #12]
    4334:	3801      	subs	r0, #1
    4336:	bd70      	pop	{r4, r5, r6, pc}
    4338:	2000006c 	.word	0x2000006c
    433c:	00008c40 	.word	0x00008c40
    4340:	00008c60 	.word	0x00008c60
    4344:	00008c80 	.word	0x00008c80

00004348 <quorem>:
    4348:	b5f0      	push	{r4, r5, r6, r7, lr}
    434a:	6903      	ldr	r3, [r0, #16]
    434c:	690c      	ldr	r4, [r1, #16]
    434e:	b089      	sub	sp, #36	; 0x24
    4350:	0007      	movs	r7, r0
    4352:	9105      	str	r1, [sp, #20]
    4354:	2600      	movs	r6, #0
    4356:	429c      	cmp	r4, r3
    4358:	dc79      	bgt.n	444e <quorem+0x106>
    435a:	000b      	movs	r3, r1
    435c:	3c01      	subs	r4, #1
    435e:	3314      	adds	r3, #20
    4360:	00a5      	lsls	r5, r4, #2
    4362:	9303      	str	r3, [sp, #12]
    4364:	195b      	adds	r3, r3, r5
    4366:	9304      	str	r3, [sp, #16]
    4368:	0003      	movs	r3, r0
    436a:	3314      	adds	r3, #20
    436c:	9302      	str	r3, [sp, #8]
    436e:	195d      	adds	r5, r3, r5
    4370:	9b04      	ldr	r3, [sp, #16]
    4372:	6828      	ldr	r0, [r5, #0]
    4374:	681b      	ldr	r3, [r3, #0]
    4376:	1c59      	adds	r1, r3, #1
    4378:	9301      	str	r3, [sp, #4]
    437a:	f001 fde9 	bl	5f50 <__aeabi_uidiv>
    437e:	9001      	str	r0, [sp, #4]
    4380:	42b0      	cmp	r0, r6
    4382:	d033      	beq.n	43ec <quorem+0xa4>
    4384:	9b03      	ldr	r3, [sp, #12]
    4386:	9802      	ldr	r0, [sp, #8]
    4388:	469c      	mov	ip, r3
    438a:	9606      	str	r6, [sp, #24]
    438c:	4663      	mov	r3, ip
    438e:	cb04      	ldmia	r3!, {r2}
    4390:	469c      	mov	ip, r3
    4392:	9b01      	ldr	r3, [sp, #4]
    4394:	b291      	uxth	r1, r2
    4396:	4359      	muls	r1, r3
    4398:	0c12      	lsrs	r2, r2, #16
    439a:	435a      	muls	r2, r3
    439c:	1989      	adds	r1, r1, r6
    439e:	0c0b      	lsrs	r3, r1, #16
    43a0:	18d3      	adds	r3, r2, r3
    43a2:	9307      	str	r3, [sp, #28]
    43a4:	9a06      	ldr	r2, [sp, #24]
    43a6:	0c1e      	lsrs	r6, r3, #16
    43a8:	8803      	ldrh	r3, [r0, #0]
    43aa:	b289      	uxth	r1, r1
    43ac:	189b      	adds	r3, r3, r2
    43ae:	6802      	ldr	r2, [r0, #0]
    43b0:	1a5b      	subs	r3, r3, r1
    43b2:	0c11      	lsrs	r1, r2, #16
    43b4:	466a      	mov	r2, sp
    43b6:	8b92      	ldrh	r2, [r2, #28]
    43b8:	1a8a      	subs	r2, r1, r2
    43ba:	1419      	asrs	r1, r3, #16
    43bc:	1852      	adds	r2, r2, r1
    43be:	1411      	asrs	r1, r2, #16
    43c0:	b29b      	uxth	r3, r3
    43c2:	0412      	lsls	r2, r2, #16
    43c4:	4313      	orrs	r3, r2
    43c6:	c008      	stmia	r0!, {r3}
    43c8:	9b04      	ldr	r3, [sp, #16]
    43ca:	9106      	str	r1, [sp, #24]
    43cc:	4563      	cmp	r3, ip
    43ce:	d2dd      	bcs.n	438c <quorem+0x44>
    43d0:	682b      	ldr	r3, [r5, #0]
    43d2:	2b00      	cmp	r3, #0
    43d4:	d10a      	bne.n	43ec <quorem+0xa4>
    43d6:	9b02      	ldr	r3, [sp, #8]
    43d8:	3d04      	subs	r5, #4
    43da:	42ab      	cmp	r3, r5
    43dc:	d301      	bcc.n	43e2 <quorem+0x9a>
    43de:	613c      	str	r4, [r7, #16]
    43e0:	e004      	b.n	43ec <quorem+0xa4>
    43e2:	682b      	ldr	r3, [r5, #0]
    43e4:	2b00      	cmp	r3, #0
    43e6:	d1fa      	bne.n	43de <quorem+0x96>
    43e8:	3c01      	subs	r4, #1
    43ea:	e7f4      	b.n	43d6 <quorem+0x8e>
    43ec:	9905      	ldr	r1, [sp, #20]
    43ee:	0038      	movs	r0, r7
    43f0:	f001 fa0c 	bl	580c <__mcmp>
    43f4:	2800      	cmp	r0, #0
    43f6:	db29      	blt.n	444c <quorem+0x104>
    43f8:	2000      	movs	r0, #0
    43fa:	9b01      	ldr	r3, [sp, #4]
    43fc:	9902      	ldr	r1, [sp, #8]
    43fe:	3301      	adds	r3, #1
    4400:	9a03      	ldr	r2, [sp, #12]
    4402:	9301      	str	r3, [sp, #4]
    4404:	ca40      	ldmia	r2!, {r6}
    4406:	880b      	ldrh	r3, [r1, #0]
    4408:	1818      	adds	r0, r3, r0
    440a:	b2b3      	uxth	r3, r6
    440c:	1ac3      	subs	r3, r0, r3
    440e:	6808      	ldr	r0, [r1, #0]
    4410:	0c36      	lsrs	r6, r6, #16
    4412:	0c00      	lsrs	r0, r0, #16
    4414:	1b80      	subs	r0, r0, r6
    4416:	141d      	asrs	r5, r3, #16
    4418:	1945      	adds	r5, r0, r5
    441a:	1428      	asrs	r0, r5, #16
    441c:	b29b      	uxth	r3, r3
    441e:	042d      	lsls	r5, r5, #16
    4420:	432b      	orrs	r3, r5
    4422:	c108      	stmia	r1!, {r3}
    4424:	9b04      	ldr	r3, [sp, #16]
    4426:	4293      	cmp	r3, r2
    4428:	d2ec      	bcs.n	4404 <quorem+0xbc>
    442a:	9a02      	ldr	r2, [sp, #8]
    442c:	00a3      	lsls	r3, r4, #2
    442e:	18d3      	adds	r3, r2, r3
    4430:	681a      	ldr	r2, [r3, #0]
    4432:	2a00      	cmp	r2, #0
    4434:	d10a      	bne.n	444c <quorem+0x104>
    4436:	9a02      	ldr	r2, [sp, #8]
    4438:	3b04      	subs	r3, #4
    443a:	429a      	cmp	r2, r3
    443c:	d301      	bcc.n	4442 <quorem+0xfa>
    443e:	613c      	str	r4, [r7, #16]
    4440:	e004      	b.n	444c <quorem+0x104>
    4442:	681a      	ldr	r2, [r3, #0]
    4444:	2a00      	cmp	r2, #0
    4446:	d1fa      	bne.n	443e <quorem+0xf6>
    4448:	3c01      	subs	r4, #1
    444a:	e7f4      	b.n	4436 <quorem+0xee>
    444c:	9e01      	ldr	r6, [sp, #4]
    444e:	0030      	movs	r0, r6
    4450:	b009      	add	sp, #36	; 0x24
    4452:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004454 <_dtoa_r>:
    4454:	b5f0      	push	{r4, r5, r6, r7, lr}
    4456:	0016      	movs	r6, r2
    4458:	001f      	movs	r7, r3
    445a:	6a44      	ldr	r4, [r0, #36]	; 0x24
    445c:	b09d      	sub	sp, #116	; 0x74
    445e:	9004      	str	r0, [sp, #16]
    4460:	9d25      	ldr	r5, [sp, #148]	; 0x94
    4462:	9606      	str	r6, [sp, #24]
    4464:	9707      	str	r7, [sp, #28]
    4466:	2c00      	cmp	r4, #0
    4468:	d108      	bne.n	447c <_dtoa_r+0x28>
    446a:	2010      	movs	r0, #16
    446c:	f000 ffa8 	bl	53c0 <malloc>
    4470:	9b04      	ldr	r3, [sp, #16]
    4472:	6258      	str	r0, [r3, #36]	; 0x24
    4474:	6044      	str	r4, [r0, #4]
    4476:	6084      	str	r4, [r0, #8]
    4478:	6004      	str	r4, [r0, #0]
    447a:	60c4      	str	r4, [r0, #12]
    447c:	9b04      	ldr	r3, [sp, #16]
    447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4480:	6819      	ldr	r1, [r3, #0]
    4482:	2900      	cmp	r1, #0
    4484:	d00b      	beq.n	449e <_dtoa_r+0x4a>
    4486:	685a      	ldr	r2, [r3, #4]
    4488:	2301      	movs	r3, #1
    448a:	4093      	lsls	r3, r2
    448c:	604a      	str	r2, [r1, #4]
    448e:	608b      	str	r3, [r1, #8]
    4490:	9804      	ldr	r0, [sp, #16]
    4492:	f000 ffe2 	bl	545a <_Bfree>
    4496:	2200      	movs	r2, #0
    4498:	9b04      	ldr	r3, [sp, #16]
    449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    449c:	601a      	str	r2, [r3, #0]
    449e:	9b07      	ldr	r3, [sp, #28]
    44a0:	2b00      	cmp	r3, #0
    44a2:	da05      	bge.n	44b0 <_dtoa_r+0x5c>
    44a4:	2301      	movs	r3, #1
    44a6:	602b      	str	r3, [r5, #0]
    44a8:	007b      	lsls	r3, r7, #1
    44aa:	085b      	lsrs	r3, r3, #1
    44ac:	9307      	str	r3, [sp, #28]
    44ae:	e001      	b.n	44b4 <_dtoa_r+0x60>
    44b0:	2300      	movs	r3, #0
    44b2:	602b      	str	r3, [r5, #0]
    44b4:	9c07      	ldr	r4, [sp, #28]
    44b6:	4bc8      	ldr	r3, [pc, #800]	; (47d8 <_dtoa_r+0x384>)
    44b8:	0022      	movs	r2, r4
    44ba:	9319      	str	r3, [sp, #100]	; 0x64
    44bc:	401a      	ands	r2, r3
    44be:	429a      	cmp	r2, r3
    44c0:	d119      	bne.n	44f6 <_dtoa_r+0xa2>
    44c2:	4bc6      	ldr	r3, [pc, #792]	; (47dc <_dtoa_r+0x388>)
    44c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    44c6:	6013      	str	r3, [r2, #0]
    44c8:	9a06      	ldr	r2, [sp, #24]
    44ca:	4bc5      	ldr	r3, [pc, #788]	; (47e0 <_dtoa_r+0x38c>)
    44cc:	2a00      	cmp	r2, #0
    44ce:	d102      	bne.n	44d6 <_dtoa_r+0x82>
    44d0:	0324      	lsls	r4, r4, #12
    44d2:	d100      	bne.n	44d6 <_dtoa_r+0x82>
    44d4:	4bc3      	ldr	r3, [pc, #780]	; (47e4 <_dtoa_r+0x390>)
    44d6:	9a26      	ldr	r2, [sp, #152]	; 0x98
    44d8:	0018      	movs	r0, r3
    44da:	2a00      	cmp	r2, #0
    44dc:	d101      	bne.n	44e2 <_dtoa_r+0x8e>
    44de:	f000 fd7d 	bl	4fdc <_dtoa_r+0xb88>
    44e2:	78d9      	ldrb	r1, [r3, #3]
    44e4:	1cda      	adds	r2, r3, #3
    44e6:	2900      	cmp	r1, #0
    44e8:	d000      	beq.n	44ec <_dtoa_r+0x98>
    44ea:	3205      	adds	r2, #5
    44ec:	9926      	ldr	r1, [sp, #152]	; 0x98
    44ee:	0018      	movs	r0, r3
    44f0:	600a      	str	r2, [r1, #0]
    44f2:	f000 fd73 	bl	4fdc <_dtoa_r+0xb88>
    44f6:	9e06      	ldr	r6, [sp, #24]
    44f8:	9f07      	ldr	r7, [sp, #28]
    44fa:	2200      	movs	r2, #0
    44fc:	2300      	movs	r3, #0
    44fe:	0030      	movs	r0, r6
    4500:	0039      	movs	r1, r7
    4502:	f001 feab 	bl	625c <__aeabi_dcmpeq>
    4506:	1e05      	subs	r5, r0, #0
    4508:	d00e      	beq.n	4528 <_dtoa_r+0xd4>
    450a:	2301      	movs	r3, #1
    450c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    450e:	6013      	str	r3, [r2, #0]
    4510:	4bb5      	ldr	r3, [pc, #724]	; (47e8 <_dtoa_r+0x394>)
    4512:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4514:	0018      	movs	r0, r3
    4516:	2a00      	cmp	r2, #0
    4518:	d101      	bne.n	451e <_dtoa_r+0xca>
    451a:	f000 fd5f 	bl	4fdc <_dtoa_r+0xb88>
    451e:	4ab3      	ldr	r2, [pc, #716]	; (47ec <_dtoa_r+0x398>)
    4520:	9926      	ldr	r1, [sp, #152]	; 0x98
    4522:	600a      	str	r2, [r1, #0]
    4524:	f000 fd5a 	bl	4fdc <_dtoa_r+0xb88>
    4528:	ab1a      	add	r3, sp, #104	; 0x68
    452a:	9301      	str	r3, [sp, #4]
    452c:	ab1b      	add	r3, sp, #108	; 0x6c
    452e:	9300      	str	r3, [sp, #0]
    4530:	0032      	movs	r2, r6
    4532:	003b      	movs	r3, r7
    4534:	9804      	ldr	r0, [sp, #16]
    4536:	f001 f9ef 	bl	5918 <__d2b>
    453a:	0063      	lsls	r3, r4, #1
    453c:	9005      	str	r0, [sp, #20]
    453e:	0d5b      	lsrs	r3, r3, #21
    4540:	d009      	beq.n	4556 <_dtoa_r+0x102>
    4542:	033a      	lsls	r2, r7, #12
    4544:	4caa      	ldr	r4, [pc, #680]	; (47f0 <_dtoa_r+0x39c>)
    4546:	0b12      	lsrs	r2, r2, #12
    4548:	4314      	orrs	r4, r2
    454a:	4aaa      	ldr	r2, [pc, #680]	; (47f4 <_dtoa_r+0x3a0>)
    454c:	0030      	movs	r0, r6
    454e:	0021      	movs	r1, r4
    4550:	189e      	adds	r6, r3, r2
    4552:	9517      	str	r5, [sp, #92]	; 0x5c
    4554:	e01a      	b.n	458c <_dtoa_r+0x138>
    4556:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4558:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    455a:	189e      	adds	r6, r3, r2
    455c:	4ba6      	ldr	r3, [pc, #664]	; (47f8 <_dtoa_r+0x3a4>)
    455e:	18f3      	adds	r3, r6, r3
    4560:	2b20      	cmp	r3, #32
    4562:	dd08      	ble.n	4576 <_dtoa_r+0x122>
    4564:	4aa5      	ldr	r2, [pc, #660]	; (47fc <_dtoa_r+0x3a8>)
    4566:	9806      	ldr	r0, [sp, #24]
    4568:	18b2      	adds	r2, r6, r2
    456a:	40d0      	lsrs	r0, r2
    456c:	2240      	movs	r2, #64	; 0x40
    456e:	1ad3      	subs	r3, r2, r3
    4570:	409c      	lsls	r4, r3
    4572:	4320      	orrs	r0, r4
    4574:	e003      	b.n	457e <_dtoa_r+0x12a>
    4576:	2220      	movs	r2, #32
    4578:	9806      	ldr	r0, [sp, #24]
    457a:	1ad3      	subs	r3, r2, r3
    457c:	4098      	lsls	r0, r3
    457e:	f004 f953 	bl	8828 <__aeabi_ui2d>
    4582:	2301      	movs	r3, #1
    4584:	4c9e      	ldr	r4, [pc, #632]	; (4800 <_dtoa_r+0x3ac>)
    4586:	3e01      	subs	r6, #1
    4588:	1909      	adds	r1, r1, r4
    458a:	9317      	str	r3, [sp, #92]	; 0x5c
    458c:	2200      	movs	r2, #0
    458e:	4b9d      	ldr	r3, [pc, #628]	; (4804 <_dtoa_r+0x3b0>)
    4590:	f003 fd5e 	bl	8050 <__aeabi_dsub>
    4594:	4a9c      	ldr	r2, [pc, #624]	; (4808 <_dtoa_r+0x3b4>)
    4596:	4b9d      	ldr	r3, [pc, #628]	; (480c <_dtoa_r+0x3b8>)
    4598:	f003 fae0 	bl	7b5c <__aeabi_dmul>
    459c:	4a9c      	ldr	r2, [pc, #624]	; (4810 <_dtoa_r+0x3bc>)
    459e:	4b9d      	ldr	r3, [pc, #628]	; (4814 <_dtoa_r+0x3c0>)
    45a0:	f002 fb8c 	bl	6cbc <__aeabi_dadd>
    45a4:	0004      	movs	r4, r0
    45a6:	0030      	movs	r0, r6
    45a8:	000d      	movs	r5, r1
    45aa:	f004 f8fb 	bl	87a4 <__aeabi_i2d>
    45ae:	4a9a      	ldr	r2, [pc, #616]	; (4818 <_dtoa_r+0x3c4>)
    45b0:	4b9a      	ldr	r3, [pc, #616]	; (481c <_dtoa_r+0x3c8>)
    45b2:	f003 fad3 	bl	7b5c <__aeabi_dmul>
    45b6:	0002      	movs	r2, r0
    45b8:	000b      	movs	r3, r1
    45ba:	0020      	movs	r0, r4
    45bc:	0029      	movs	r1, r5
    45be:	f002 fb7d 	bl	6cbc <__aeabi_dadd>
    45c2:	0004      	movs	r4, r0
    45c4:	000d      	movs	r5, r1
    45c6:	f004 f8b7 	bl	8738 <__aeabi_d2iz>
    45ca:	2200      	movs	r2, #0
    45cc:	9003      	str	r0, [sp, #12]
    45ce:	2300      	movs	r3, #0
    45d0:	0020      	movs	r0, r4
    45d2:	0029      	movs	r1, r5
    45d4:	f001 fe48 	bl	6268 <__aeabi_dcmplt>
    45d8:	2800      	cmp	r0, #0
    45da:	d00d      	beq.n	45f8 <_dtoa_r+0x1a4>
    45dc:	9803      	ldr	r0, [sp, #12]
    45de:	f004 f8e1 	bl	87a4 <__aeabi_i2d>
    45e2:	0002      	movs	r2, r0
    45e4:	000b      	movs	r3, r1
    45e6:	0020      	movs	r0, r4
    45e8:	0029      	movs	r1, r5
    45ea:	f001 fe37 	bl	625c <__aeabi_dcmpeq>
    45ee:	4243      	negs	r3, r0
    45f0:	4143      	adcs	r3, r0
    45f2:	9a03      	ldr	r2, [sp, #12]
    45f4:	1ad3      	subs	r3, r2, r3
    45f6:	9303      	str	r3, [sp, #12]
    45f8:	2301      	movs	r3, #1
    45fa:	9316      	str	r3, [sp, #88]	; 0x58
    45fc:	9b03      	ldr	r3, [sp, #12]
    45fe:	2b16      	cmp	r3, #22
    4600:	d811      	bhi.n	4626 <_dtoa_r+0x1d2>
    4602:	4987      	ldr	r1, [pc, #540]	; (4820 <_dtoa_r+0x3cc>)
    4604:	00db      	lsls	r3, r3, #3
    4606:	18c9      	adds	r1, r1, r3
    4608:	6808      	ldr	r0, [r1, #0]
    460a:	6849      	ldr	r1, [r1, #4]
    460c:	9a06      	ldr	r2, [sp, #24]
    460e:	9b07      	ldr	r3, [sp, #28]
    4610:	f001 fe3e 	bl	6290 <__aeabi_dcmpgt>
    4614:	2800      	cmp	r0, #0
    4616:	d005      	beq.n	4624 <_dtoa_r+0x1d0>
    4618:	9b03      	ldr	r3, [sp, #12]
    461a:	3b01      	subs	r3, #1
    461c:	9303      	str	r3, [sp, #12]
    461e:	2300      	movs	r3, #0
    4620:	9316      	str	r3, [sp, #88]	; 0x58
    4622:	e000      	b.n	4626 <_dtoa_r+0x1d2>
    4624:	9016      	str	r0, [sp, #88]	; 0x58
    4626:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4628:	1b9e      	subs	r6, r3, r6
    462a:	2300      	movs	r3, #0
    462c:	930b      	str	r3, [sp, #44]	; 0x2c
    462e:	3e01      	subs	r6, #1
    4630:	960c      	str	r6, [sp, #48]	; 0x30
    4632:	d504      	bpl.n	463e <_dtoa_r+0x1ea>
    4634:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4636:	425b      	negs	r3, r3
    4638:	930b      	str	r3, [sp, #44]	; 0x2c
    463a:	2300      	movs	r3, #0
    463c:	930c      	str	r3, [sp, #48]	; 0x30
    463e:	9b03      	ldr	r3, [sp, #12]
    4640:	2b00      	cmp	r3, #0
    4642:	db08      	blt.n	4656 <_dtoa_r+0x202>
    4644:	9a03      	ldr	r2, [sp, #12]
    4646:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4648:	4694      	mov	ip, r2
    464a:	4463      	add	r3, ip
    464c:	930c      	str	r3, [sp, #48]	; 0x30
    464e:	2300      	movs	r3, #0
    4650:	9211      	str	r2, [sp, #68]	; 0x44
    4652:	9308      	str	r3, [sp, #32]
    4654:	e007      	b.n	4666 <_dtoa_r+0x212>
    4656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4658:	9a03      	ldr	r2, [sp, #12]
    465a:	1a9b      	subs	r3, r3, r2
    465c:	930b      	str	r3, [sp, #44]	; 0x2c
    465e:	4253      	negs	r3, r2
    4660:	9308      	str	r3, [sp, #32]
    4662:	2300      	movs	r3, #0
    4664:	9311      	str	r3, [sp, #68]	; 0x44
    4666:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4668:	2501      	movs	r5, #1
    466a:	2b09      	cmp	r3, #9
    466c:	d825      	bhi.n	46ba <_dtoa_r+0x266>
    466e:	2b05      	cmp	r3, #5
    4670:	dd02      	ble.n	4678 <_dtoa_r+0x224>
    4672:	2500      	movs	r5, #0
    4674:	3b04      	subs	r3, #4
    4676:	9322      	str	r3, [sp, #136]	; 0x88
    4678:	9b22      	ldr	r3, [sp, #136]	; 0x88
    467a:	1e98      	subs	r0, r3, #2
    467c:	2803      	cmp	r0, #3
    467e:	d824      	bhi.n	46ca <_dtoa_r+0x276>
    4680:	f001 fc5c 	bl	5f3c <__gnu_thumb1_case_uqi>
    4684:	04020e06 	.word	0x04020e06
    4688:	2301      	movs	r3, #1
    468a:	e002      	b.n	4692 <_dtoa_r+0x23e>
    468c:	2301      	movs	r3, #1
    468e:	e008      	b.n	46a2 <_dtoa_r+0x24e>
    4690:	2300      	movs	r3, #0
    4692:	9310      	str	r3, [sp, #64]	; 0x40
    4694:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    4696:	2b00      	cmp	r3, #0
    4698:	dd20      	ble.n	46dc <_dtoa_r+0x288>
    469a:	001f      	movs	r7, r3
    469c:	930a      	str	r3, [sp, #40]	; 0x28
    469e:	e021      	b.n	46e4 <_dtoa_r+0x290>
    46a0:	2300      	movs	r3, #0
    46a2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    46a4:	9310      	str	r3, [sp, #64]	; 0x40
    46a6:	9b03      	ldr	r3, [sp, #12]
    46a8:	189f      	adds	r7, r3, r2
    46aa:	1c7b      	adds	r3, r7, #1
    46ac:	930a      	str	r3, [sp, #40]	; 0x28
    46ae:	2301      	movs	r3, #1
    46b0:	18fa      	adds	r2, r7, r3
    46b2:	2a00      	cmp	r2, #0
    46b4:	dd16      	ble.n	46e4 <_dtoa_r+0x290>
    46b6:	0013      	movs	r3, r2
    46b8:	e014      	b.n	46e4 <_dtoa_r+0x290>
    46ba:	2701      	movs	r7, #1
    46bc:	2300      	movs	r3, #0
    46be:	427f      	negs	r7, r7
    46c0:	9322      	str	r3, [sp, #136]	; 0x88
    46c2:	9510      	str	r5, [sp, #64]	; 0x40
    46c4:	970a      	str	r7, [sp, #40]	; 0x28
    46c6:	3312      	adds	r3, #18
    46c8:	e005      	b.n	46d6 <_dtoa_r+0x282>
    46ca:	2701      	movs	r7, #1
    46cc:	2301      	movs	r3, #1
    46ce:	427f      	negs	r7, r7
    46d0:	9310      	str	r3, [sp, #64]	; 0x40
    46d2:	970a      	str	r7, [sp, #40]	; 0x28
    46d4:	3311      	adds	r3, #17
    46d6:	2200      	movs	r2, #0
    46d8:	9223      	str	r2, [sp, #140]	; 0x8c
    46da:	e003      	b.n	46e4 <_dtoa_r+0x290>
    46dc:	2701      	movs	r7, #1
    46de:	003b      	movs	r3, r7
    46e0:	970a      	str	r7, [sp, #40]	; 0x28
    46e2:	9723      	str	r7, [sp, #140]	; 0x8c
    46e4:	9a04      	ldr	r2, [sp, #16]
    46e6:	6a54      	ldr	r4, [r2, #36]	; 0x24
    46e8:	2200      	movs	r2, #0
    46ea:	6062      	str	r2, [r4, #4]
    46ec:	3204      	adds	r2, #4
    46ee:	0011      	movs	r1, r2
    46f0:	3114      	adds	r1, #20
    46f2:	4299      	cmp	r1, r3
    46f4:	d804      	bhi.n	4700 <_dtoa_r+0x2ac>
    46f6:	6861      	ldr	r1, [r4, #4]
    46f8:	0052      	lsls	r2, r2, #1
    46fa:	3101      	adds	r1, #1
    46fc:	6061      	str	r1, [r4, #4]
    46fe:	e7f6      	b.n	46ee <_dtoa_r+0x29a>
    4700:	6861      	ldr	r1, [r4, #4]
    4702:	9804      	ldr	r0, [sp, #16]
    4704:	f000 fe71 	bl	53ea <_Balloc>
    4708:	9b04      	ldr	r3, [sp, #16]
    470a:	6020      	str	r0, [r4, #0]
    470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    470e:	681b      	ldr	r3, [r3, #0]
    4710:	930d      	str	r3, [sp, #52]	; 0x34
    4712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4714:	2b0e      	cmp	r3, #14
    4716:	d900      	bls.n	471a <_dtoa_r+0x2c6>
    4718:	e181      	b.n	4a1e <_dtoa_r+0x5ca>
    471a:	2d00      	cmp	r5, #0
    471c:	d100      	bne.n	4720 <_dtoa_r+0x2cc>
    471e:	e17e      	b.n	4a1e <_dtoa_r+0x5ca>
    4720:	9b06      	ldr	r3, [sp, #24]
    4722:	9c07      	ldr	r4, [sp, #28]
    4724:	9314      	str	r3, [sp, #80]	; 0x50
    4726:	9415      	str	r4, [sp, #84]	; 0x54
    4728:	9b03      	ldr	r3, [sp, #12]
    472a:	2b00      	cmp	r3, #0
    472c:	dd31      	ble.n	4792 <_dtoa_r+0x33e>
    472e:	220f      	movs	r2, #15
    4730:	493b      	ldr	r1, [pc, #236]	; (4820 <_dtoa_r+0x3cc>)
    4732:	4013      	ands	r3, r2
    4734:	00db      	lsls	r3, r3, #3
    4736:	18cb      	adds	r3, r1, r3
    4738:	685c      	ldr	r4, [r3, #4]
    473a:	681b      	ldr	r3, [r3, #0]
    473c:	930e      	str	r3, [sp, #56]	; 0x38
    473e:	940f      	str	r4, [sp, #60]	; 0x3c
    4740:	9b03      	ldr	r3, [sp, #12]
    4742:	2402      	movs	r4, #2
    4744:	111d      	asrs	r5, r3, #4
    4746:	06eb      	lsls	r3, r5, #27
    4748:	d50a      	bpl.n	4760 <_dtoa_r+0x30c>
    474a:	9814      	ldr	r0, [sp, #80]	; 0x50
    474c:	9915      	ldr	r1, [sp, #84]	; 0x54
    474e:	4b35      	ldr	r3, [pc, #212]	; (4824 <_dtoa_r+0x3d0>)
    4750:	4015      	ands	r5, r2
    4752:	6a1a      	ldr	r2, [r3, #32]
    4754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4756:	f002 fddd 	bl	7314 <__aeabi_ddiv>
    475a:	9006      	str	r0, [sp, #24]
    475c:	9107      	str	r1, [sp, #28]
    475e:	3401      	adds	r4, #1
    4760:	4e30      	ldr	r6, [pc, #192]	; (4824 <_dtoa_r+0x3d0>)
    4762:	2d00      	cmp	r5, #0
    4764:	d00e      	beq.n	4784 <_dtoa_r+0x330>
    4766:	2301      	movs	r3, #1
    4768:	421d      	tst	r5, r3
    476a:	d008      	beq.n	477e <_dtoa_r+0x32a>
    476c:	980e      	ldr	r0, [sp, #56]	; 0x38
    476e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    4770:	18e4      	adds	r4, r4, r3
    4772:	6832      	ldr	r2, [r6, #0]
    4774:	6873      	ldr	r3, [r6, #4]
    4776:	f003 f9f1 	bl	7b5c <__aeabi_dmul>
    477a:	900e      	str	r0, [sp, #56]	; 0x38
    477c:	910f      	str	r1, [sp, #60]	; 0x3c
    477e:	106d      	asrs	r5, r5, #1
    4780:	3608      	adds	r6, #8
    4782:	e7ee      	b.n	4762 <_dtoa_r+0x30e>
    4784:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4786:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4788:	9806      	ldr	r0, [sp, #24]
    478a:	9907      	ldr	r1, [sp, #28]
    478c:	f002 fdc2 	bl	7314 <__aeabi_ddiv>
    4790:	e04c      	b.n	482c <_dtoa_r+0x3d8>
    4792:	9b03      	ldr	r3, [sp, #12]
    4794:	2402      	movs	r4, #2
    4796:	425d      	negs	r5, r3
    4798:	2d00      	cmp	r5, #0
    479a:	d049      	beq.n	4830 <_dtoa_r+0x3dc>
    479c:	9814      	ldr	r0, [sp, #80]	; 0x50
    479e:	9915      	ldr	r1, [sp, #84]	; 0x54
    47a0:	230f      	movs	r3, #15
    47a2:	4a1f      	ldr	r2, [pc, #124]	; (4820 <_dtoa_r+0x3cc>)
    47a4:	402b      	ands	r3, r5
    47a6:	00db      	lsls	r3, r3, #3
    47a8:	18d3      	adds	r3, r2, r3
    47aa:	681a      	ldr	r2, [r3, #0]
    47ac:	685b      	ldr	r3, [r3, #4]
    47ae:	f003 f9d5 	bl	7b5c <__aeabi_dmul>
    47b2:	2300      	movs	r3, #0
    47b4:	9006      	str	r0, [sp, #24]
    47b6:	9107      	str	r1, [sp, #28]
    47b8:	4e1a      	ldr	r6, [pc, #104]	; (4824 <_dtoa_r+0x3d0>)
    47ba:	112d      	asrs	r5, r5, #4
    47bc:	2d00      	cmp	r5, #0
    47be:	d033      	beq.n	4828 <_dtoa_r+0x3d4>
    47c0:	2201      	movs	r2, #1
    47c2:	4215      	tst	r5, r2
    47c4:	d005      	beq.n	47d2 <_dtoa_r+0x37e>
    47c6:	18a4      	adds	r4, r4, r2
    47c8:	6832      	ldr	r2, [r6, #0]
    47ca:	6873      	ldr	r3, [r6, #4]
    47cc:	f003 f9c6 	bl	7b5c <__aeabi_dmul>
    47d0:	2301      	movs	r3, #1
    47d2:	106d      	asrs	r5, r5, #1
    47d4:	3608      	adds	r6, #8
    47d6:	e7f1      	b.n	47bc <_dtoa_r+0x368>
    47d8:	7ff00000 	.word	0x7ff00000
    47dc:	0000270f 	.word	0x0000270f
    47e0:	00008c39 	.word	0x00008c39
    47e4:	00008c30 	.word	0x00008c30
    47e8:	00008c0c 	.word	0x00008c0c
    47ec:	00008c0d 	.word	0x00008c0d
    47f0:	3ff00000 	.word	0x3ff00000
    47f4:	fffffc01 	.word	0xfffffc01
    47f8:	00000432 	.word	0x00000432
    47fc:	00000412 	.word	0x00000412
    4800:	fe100000 	.word	0xfe100000
    4804:	3ff80000 	.word	0x3ff80000
    4808:	636f4361 	.word	0x636f4361
    480c:	3fd287a7 	.word	0x3fd287a7
    4810:	8b60c8b3 	.word	0x8b60c8b3
    4814:	3fc68a28 	.word	0x3fc68a28
    4818:	509f79fb 	.word	0x509f79fb
    481c:	3fd34413 	.word	0x3fd34413
    4820:	00008ca8 	.word	0x00008ca8
    4824:	00008d70 	.word	0x00008d70
    4828:	2b00      	cmp	r3, #0
    482a:	d001      	beq.n	4830 <_dtoa_r+0x3dc>
    482c:	9006      	str	r0, [sp, #24]
    482e:	9107      	str	r1, [sp, #28]
    4830:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4832:	2b00      	cmp	r3, #0
    4834:	d01d      	beq.n	4872 <_dtoa_r+0x41e>
    4836:	9d06      	ldr	r5, [sp, #24]
    4838:	9e07      	ldr	r6, [sp, #28]
    483a:	2200      	movs	r2, #0
    483c:	4bc7      	ldr	r3, [pc, #796]	; (4b5c <_dtoa_r+0x708>)
    483e:	0028      	movs	r0, r5
    4840:	0031      	movs	r1, r6
    4842:	f001 fd11 	bl	6268 <__aeabi_dcmplt>
    4846:	2800      	cmp	r0, #0
    4848:	d013      	beq.n	4872 <_dtoa_r+0x41e>
    484a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    484c:	2b00      	cmp	r3, #0
    484e:	d010      	beq.n	4872 <_dtoa_r+0x41e>
    4850:	2f00      	cmp	r7, #0
    4852:	dc00      	bgt.n	4856 <_dtoa_r+0x402>
    4854:	e0df      	b.n	4a16 <_dtoa_r+0x5c2>
    4856:	9b03      	ldr	r3, [sp, #12]
    4858:	0031      	movs	r1, r6
    485a:	3b01      	subs	r3, #1
    485c:	930e      	str	r3, [sp, #56]	; 0x38
    485e:	2200      	movs	r2, #0
    4860:	4bbf      	ldr	r3, [pc, #764]	; (4b60 <_dtoa_r+0x70c>)
    4862:	0028      	movs	r0, r5
    4864:	f003 f97a 	bl	7b5c <__aeabi_dmul>
    4868:	3401      	adds	r4, #1
    486a:	9006      	str	r0, [sp, #24]
    486c:	9107      	str	r1, [sp, #28]
    486e:	003e      	movs	r6, r7
    4870:	e002      	b.n	4878 <_dtoa_r+0x424>
    4872:	9b03      	ldr	r3, [sp, #12]
    4874:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    4876:	930e      	str	r3, [sp, #56]	; 0x38
    4878:	0020      	movs	r0, r4
    487a:	f003 ff93 	bl	87a4 <__aeabi_i2d>
    487e:	9a06      	ldr	r2, [sp, #24]
    4880:	9b07      	ldr	r3, [sp, #28]
    4882:	f003 f96b 	bl	7b5c <__aeabi_dmul>
    4886:	2200      	movs	r2, #0
    4888:	4bb6      	ldr	r3, [pc, #728]	; (4b64 <_dtoa_r+0x710>)
    488a:	f002 fa17 	bl	6cbc <__aeabi_dadd>
    488e:	4ab6      	ldr	r2, [pc, #728]	; (4b68 <_dtoa_r+0x714>)
    4890:	9012      	str	r0, [sp, #72]	; 0x48
    4892:	9113      	str	r1, [sp, #76]	; 0x4c
    4894:	9c12      	ldr	r4, [sp, #72]	; 0x48
    4896:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    4898:	4694      	mov	ip, r2
    489a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    489c:	4463      	add	r3, ip
    489e:	9318      	str	r3, [sp, #96]	; 0x60
    48a0:	001d      	movs	r5, r3
    48a2:	2e00      	cmp	r6, #0
    48a4:	d11c      	bne.n	48e0 <_dtoa_r+0x48c>
    48a6:	9806      	ldr	r0, [sp, #24]
    48a8:	9907      	ldr	r1, [sp, #28]
    48aa:	2200      	movs	r2, #0
    48ac:	4baf      	ldr	r3, [pc, #700]	; (4b6c <_dtoa_r+0x718>)
    48ae:	f003 fbcf 	bl	8050 <__aeabi_dsub>
    48b2:	0022      	movs	r2, r4
    48b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    48b6:	9006      	str	r0, [sp, #24]
    48b8:	9107      	str	r1, [sp, #28]
    48ba:	f001 fce9 	bl	6290 <__aeabi_dcmpgt>
    48be:	2800      	cmp	r0, #0
    48c0:	d000      	beq.n	48c4 <_dtoa_r+0x470>
    48c2:	e254      	b.n	4d6e <_dtoa_r+0x91a>
    48c4:	48aa      	ldr	r0, [pc, #680]	; (4b70 <_dtoa_r+0x71c>)
    48c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    48c8:	4684      	mov	ip, r0
    48ca:	4461      	add	r1, ip
    48cc:	000b      	movs	r3, r1
    48ce:	9806      	ldr	r0, [sp, #24]
    48d0:	9907      	ldr	r1, [sp, #28]
    48d2:	0022      	movs	r2, r4
    48d4:	f001 fcc8 	bl	6268 <__aeabi_dcmplt>
    48d8:	2800      	cmp	r0, #0
    48da:	d000      	beq.n	48de <_dtoa_r+0x48a>
    48dc:	e23d      	b.n	4d5a <_dtoa_r+0x906>
    48de:	e09a      	b.n	4a16 <_dtoa_r+0x5c2>
    48e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    48e2:	1e73      	subs	r3, r6, #1
    48e4:	49a3      	ldr	r1, [pc, #652]	; (4b74 <_dtoa_r+0x720>)
    48e6:	00db      	lsls	r3, r3, #3
    48e8:	2a00      	cmp	r2, #0
    48ea:	d049      	beq.n	4980 <_dtoa_r+0x52c>
    48ec:	18cb      	adds	r3, r1, r3
    48ee:	681a      	ldr	r2, [r3, #0]
    48f0:	685b      	ldr	r3, [r3, #4]
    48f2:	2000      	movs	r0, #0
    48f4:	49a0      	ldr	r1, [pc, #640]	; (4b78 <_dtoa_r+0x724>)
    48f6:	f002 fd0d 	bl	7314 <__aeabi_ddiv>
    48fa:	002b      	movs	r3, r5
    48fc:	0022      	movs	r2, r4
    48fe:	f003 fba7 	bl	8050 <__aeabi_dsub>
    4902:	9012      	str	r0, [sp, #72]	; 0x48
    4904:	9113      	str	r1, [sp, #76]	; 0x4c
    4906:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4908:	9806      	ldr	r0, [sp, #24]
    490a:	9907      	ldr	r1, [sp, #28]
    490c:	f003 ff14 	bl	8738 <__aeabi_d2iz>
    4910:	0004      	movs	r4, r0
    4912:	f003 ff47 	bl	87a4 <__aeabi_i2d>
    4916:	0002      	movs	r2, r0
    4918:	000b      	movs	r3, r1
    491a:	9806      	ldr	r0, [sp, #24]
    491c:	9907      	ldr	r1, [sp, #28]
    491e:	f003 fb97 	bl	8050 <__aeabi_dsub>
    4922:	3501      	adds	r5, #1
    4924:	1e6b      	subs	r3, r5, #1
    4926:	3430      	adds	r4, #48	; 0x30
    4928:	701c      	strb	r4, [r3, #0]
    492a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    492c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    492e:	9006      	str	r0, [sp, #24]
    4930:	9107      	str	r1, [sp, #28]
    4932:	f001 fc99 	bl	6268 <__aeabi_dcmplt>
    4936:	2800      	cmp	r0, #0
    4938:	d000      	beq.n	493c <_dtoa_r+0x4e8>
    493a:	e32e      	b.n	4f9a <_dtoa_r+0xb46>
    493c:	9a06      	ldr	r2, [sp, #24]
    493e:	9b07      	ldr	r3, [sp, #28]
    4940:	2000      	movs	r0, #0
    4942:	4986      	ldr	r1, [pc, #536]	; (4b5c <_dtoa_r+0x708>)
    4944:	f003 fb84 	bl	8050 <__aeabi_dsub>
    4948:	9a12      	ldr	r2, [sp, #72]	; 0x48
    494a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    494c:	f001 fc8c 	bl	6268 <__aeabi_dcmplt>
    4950:	2800      	cmp	r0, #0
    4952:	d000      	beq.n	4956 <_dtoa_r+0x502>
    4954:	e0c7      	b.n	4ae6 <_dtoa_r+0x692>
    4956:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4958:	1aeb      	subs	r3, r5, r3
    495a:	42b3      	cmp	r3, r6
    495c:	da5b      	bge.n	4a16 <_dtoa_r+0x5c2>
    495e:	9812      	ldr	r0, [sp, #72]	; 0x48
    4960:	9913      	ldr	r1, [sp, #76]	; 0x4c
    4962:	2200      	movs	r2, #0
    4964:	4b7e      	ldr	r3, [pc, #504]	; (4b60 <_dtoa_r+0x70c>)
    4966:	f003 f8f9 	bl	7b5c <__aeabi_dmul>
    496a:	2200      	movs	r2, #0
    496c:	9012      	str	r0, [sp, #72]	; 0x48
    496e:	9113      	str	r1, [sp, #76]	; 0x4c
    4970:	9806      	ldr	r0, [sp, #24]
    4972:	9907      	ldr	r1, [sp, #28]
    4974:	4b7a      	ldr	r3, [pc, #488]	; (4b60 <_dtoa_r+0x70c>)
    4976:	f003 f8f1 	bl	7b5c <__aeabi_dmul>
    497a:	9006      	str	r0, [sp, #24]
    497c:	9107      	str	r1, [sp, #28]
    497e:	e7c3      	b.n	4908 <_dtoa_r+0x4b4>
    4980:	18c9      	adds	r1, r1, r3
    4982:	0022      	movs	r2, r4
    4984:	6808      	ldr	r0, [r1, #0]
    4986:	6849      	ldr	r1, [r1, #4]
    4988:	002b      	movs	r3, r5
    498a:	f003 f8e7 	bl	7b5c <__aeabi_dmul>
    498e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    4990:	9012      	str	r0, [sp, #72]	; 0x48
    4992:	9113      	str	r1, [sp, #76]	; 0x4c
    4994:	19a5      	adds	r5, r4, r6
    4996:	9806      	ldr	r0, [sp, #24]
    4998:	9907      	ldr	r1, [sp, #28]
    499a:	f003 fecd 	bl	8738 <__aeabi_d2iz>
    499e:	0006      	movs	r6, r0
    49a0:	f003 ff00 	bl	87a4 <__aeabi_i2d>
    49a4:	0002      	movs	r2, r0
    49a6:	000b      	movs	r3, r1
    49a8:	9806      	ldr	r0, [sp, #24]
    49aa:	9907      	ldr	r1, [sp, #28]
    49ac:	f003 fb50 	bl	8050 <__aeabi_dsub>
    49b0:	3630      	adds	r6, #48	; 0x30
    49b2:	7026      	strb	r6, [r4, #0]
    49b4:	3401      	adds	r4, #1
    49b6:	9006      	str	r0, [sp, #24]
    49b8:	9107      	str	r1, [sp, #28]
    49ba:	2200      	movs	r2, #0
    49bc:	42a5      	cmp	r5, r4
    49be:	d122      	bne.n	4a06 <_dtoa_r+0x5b2>
    49c0:	4b6d      	ldr	r3, [pc, #436]	; (4b78 <_dtoa_r+0x724>)
    49c2:	9812      	ldr	r0, [sp, #72]	; 0x48
    49c4:	9913      	ldr	r1, [sp, #76]	; 0x4c
    49c6:	f002 f979 	bl	6cbc <__aeabi_dadd>
    49ca:	0002      	movs	r2, r0
    49cc:	000b      	movs	r3, r1
    49ce:	9806      	ldr	r0, [sp, #24]
    49d0:	9907      	ldr	r1, [sp, #28]
    49d2:	f001 fc5d 	bl	6290 <__aeabi_dcmpgt>
    49d6:	2800      	cmp	r0, #0
    49d8:	d000      	beq.n	49dc <_dtoa_r+0x588>
    49da:	e084      	b.n	4ae6 <_dtoa_r+0x692>
    49dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    49de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    49e0:	2000      	movs	r0, #0
    49e2:	4965      	ldr	r1, [pc, #404]	; (4b78 <_dtoa_r+0x724>)
    49e4:	f003 fb34 	bl	8050 <__aeabi_dsub>
    49e8:	0002      	movs	r2, r0
    49ea:	000b      	movs	r3, r1
    49ec:	9806      	ldr	r0, [sp, #24]
    49ee:	9907      	ldr	r1, [sp, #28]
    49f0:	f001 fc3a 	bl	6268 <__aeabi_dcmplt>
    49f4:	2800      	cmp	r0, #0
    49f6:	d00e      	beq.n	4a16 <_dtoa_r+0x5c2>
    49f8:	1e6b      	subs	r3, r5, #1
    49fa:	781a      	ldrb	r2, [r3, #0]
    49fc:	2a30      	cmp	r2, #48	; 0x30
    49fe:	d000      	beq.n	4a02 <_dtoa_r+0x5ae>
    4a00:	e2cb      	b.n	4f9a <_dtoa_r+0xb46>
    4a02:	001d      	movs	r5, r3
    4a04:	e7f8      	b.n	49f8 <_dtoa_r+0x5a4>
    4a06:	9806      	ldr	r0, [sp, #24]
    4a08:	9907      	ldr	r1, [sp, #28]
    4a0a:	4b55      	ldr	r3, [pc, #340]	; (4b60 <_dtoa_r+0x70c>)
    4a0c:	f003 f8a6 	bl	7b5c <__aeabi_dmul>
    4a10:	9006      	str	r0, [sp, #24]
    4a12:	9107      	str	r1, [sp, #28]
    4a14:	e7bf      	b.n	4996 <_dtoa_r+0x542>
    4a16:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4a18:	9c15      	ldr	r4, [sp, #84]	; 0x54
    4a1a:	9306      	str	r3, [sp, #24]
    4a1c:	9407      	str	r4, [sp, #28]
    4a1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    4a20:	2b00      	cmp	r3, #0
    4a22:	da00      	bge.n	4a26 <_dtoa_r+0x5d2>
    4a24:	e081      	b.n	4b2a <_dtoa_r+0x6d6>
    4a26:	9a03      	ldr	r2, [sp, #12]
    4a28:	2a0e      	cmp	r2, #14
    4a2a:	dd00      	ble.n	4a2e <_dtoa_r+0x5da>
    4a2c:	e07d      	b.n	4b2a <_dtoa_r+0x6d6>
    4a2e:	00d3      	lsls	r3, r2, #3
    4a30:	4a50      	ldr	r2, [pc, #320]	; (4b74 <_dtoa_r+0x720>)
    4a32:	18d3      	adds	r3, r2, r3
    4a34:	685c      	ldr	r4, [r3, #4]
    4a36:	681b      	ldr	r3, [r3, #0]
    4a38:	9308      	str	r3, [sp, #32]
    4a3a:	9409      	str	r4, [sp, #36]	; 0x24
    4a3c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    4a3e:	2b00      	cmp	r3, #0
    4a40:	da15      	bge.n	4a6e <_dtoa_r+0x61a>
    4a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4a44:	2b00      	cmp	r3, #0
    4a46:	dc12      	bgt.n	4a6e <_dtoa_r+0x61a>
    4a48:	d000      	beq.n	4a4c <_dtoa_r+0x5f8>
    4a4a:	e188      	b.n	4d5e <_dtoa_r+0x90a>
    4a4c:	9808      	ldr	r0, [sp, #32]
    4a4e:	9909      	ldr	r1, [sp, #36]	; 0x24
    4a50:	2200      	movs	r2, #0
    4a52:	4b46      	ldr	r3, [pc, #280]	; (4b6c <_dtoa_r+0x718>)
    4a54:	f003 f882 	bl	7b5c <__aeabi_dmul>
    4a58:	9a06      	ldr	r2, [sp, #24]
    4a5a:	9b07      	ldr	r3, [sp, #28]
    4a5c:	f001 fc22 	bl	62a4 <__aeabi_dcmpge>
    4a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4a62:	9308      	str	r3, [sp, #32]
    4a64:	001e      	movs	r6, r3
    4a66:	2800      	cmp	r0, #0
    4a68:	d000      	beq.n	4a6c <_dtoa_r+0x618>
    4a6a:	e17b      	b.n	4d64 <_dtoa_r+0x910>
    4a6c:	e182      	b.n	4d74 <_dtoa_r+0x920>
    4a6e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4a70:	9e06      	ldr	r6, [sp, #24]
    4a72:	9f07      	ldr	r7, [sp, #28]
    4a74:	9a08      	ldr	r2, [sp, #32]
    4a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4a78:	0030      	movs	r0, r6
    4a7a:	0039      	movs	r1, r7
    4a7c:	f002 fc4a 	bl	7314 <__aeabi_ddiv>
    4a80:	f003 fe5a 	bl	8738 <__aeabi_d2iz>
    4a84:	0004      	movs	r4, r0
    4a86:	f003 fe8d 	bl	87a4 <__aeabi_i2d>
    4a8a:	9a08      	ldr	r2, [sp, #32]
    4a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4a8e:	f003 f865 	bl	7b5c <__aeabi_dmul>
    4a92:	0002      	movs	r2, r0
    4a94:	000b      	movs	r3, r1
    4a96:	0030      	movs	r0, r6
    4a98:	0039      	movs	r1, r7
    4a9a:	f003 fad9 	bl	8050 <__aeabi_dsub>
    4a9e:	0022      	movs	r2, r4
    4aa0:	3501      	adds	r5, #1
    4aa2:	1e6b      	subs	r3, r5, #1
    4aa4:	3230      	adds	r2, #48	; 0x30
    4aa6:	701a      	strb	r2, [r3, #0]
    4aa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4aaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4aac:	1aeb      	subs	r3, r5, r3
    4aae:	429a      	cmp	r2, r3
    4ab0:	d12e      	bne.n	4b10 <_dtoa_r+0x6bc>
    4ab2:	0002      	movs	r2, r0
    4ab4:	000b      	movs	r3, r1
    4ab6:	f002 f901 	bl	6cbc <__aeabi_dadd>
    4aba:	0006      	movs	r6, r0
    4abc:	000f      	movs	r7, r1
    4abe:	0002      	movs	r2, r0
    4ac0:	000b      	movs	r3, r1
    4ac2:	9808      	ldr	r0, [sp, #32]
    4ac4:	9909      	ldr	r1, [sp, #36]	; 0x24
    4ac6:	f001 fbcf 	bl	6268 <__aeabi_dcmplt>
    4aca:	2800      	cmp	r0, #0
    4acc:	d10f      	bne.n	4aee <_dtoa_r+0x69a>
    4ace:	9808      	ldr	r0, [sp, #32]
    4ad0:	9909      	ldr	r1, [sp, #36]	; 0x24
    4ad2:	0032      	movs	r2, r6
    4ad4:	003b      	movs	r3, r7
    4ad6:	f001 fbc1 	bl	625c <__aeabi_dcmpeq>
    4ada:	2800      	cmp	r0, #0
    4adc:	d100      	bne.n	4ae0 <_dtoa_r+0x68c>
    4ade:	e25e      	b.n	4f9e <_dtoa_r+0xb4a>
    4ae0:	07e3      	lsls	r3, r4, #31
    4ae2:	d404      	bmi.n	4aee <_dtoa_r+0x69a>
    4ae4:	e25b      	b.n	4f9e <_dtoa_r+0xb4a>
    4ae6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4ae8:	9303      	str	r3, [sp, #12]
    4aea:	e000      	b.n	4aee <_dtoa_r+0x69a>
    4aec:	001d      	movs	r5, r3
    4aee:	1e6b      	subs	r3, r5, #1
    4af0:	781a      	ldrb	r2, [r3, #0]
    4af2:	2a39      	cmp	r2, #57	; 0x39
    4af4:	d108      	bne.n	4b08 <_dtoa_r+0x6b4>
    4af6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4af8:	429a      	cmp	r2, r3
    4afa:	d1f7      	bne.n	4aec <_dtoa_r+0x698>
    4afc:	9a03      	ldr	r2, [sp, #12]
    4afe:	990d      	ldr	r1, [sp, #52]	; 0x34
    4b00:	3201      	adds	r2, #1
    4b02:	9203      	str	r2, [sp, #12]
    4b04:	2230      	movs	r2, #48	; 0x30
    4b06:	700a      	strb	r2, [r1, #0]
    4b08:	781a      	ldrb	r2, [r3, #0]
    4b0a:	3201      	adds	r2, #1
    4b0c:	701a      	strb	r2, [r3, #0]
    4b0e:	e246      	b.n	4f9e <_dtoa_r+0xb4a>
    4b10:	2200      	movs	r2, #0
    4b12:	4b13      	ldr	r3, [pc, #76]	; (4b60 <_dtoa_r+0x70c>)
    4b14:	f003 f822 	bl	7b5c <__aeabi_dmul>
    4b18:	2200      	movs	r2, #0
    4b1a:	2300      	movs	r3, #0
    4b1c:	0006      	movs	r6, r0
    4b1e:	000f      	movs	r7, r1
    4b20:	f001 fb9c 	bl	625c <__aeabi_dcmpeq>
    4b24:	2800      	cmp	r0, #0
    4b26:	d0a5      	beq.n	4a74 <_dtoa_r+0x620>
    4b28:	e239      	b.n	4f9e <_dtoa_r+0xb4a>
    4b2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4b2c:	2a00      	cmp	r2, #0
    4b2e:	d044      	beq.n	4bba <_dtoa_r+0x766>
    4b30:	9a22      	ldr	r2, [sp, #136]	; 0x88
    4b32:	2a01      	cmp	r2, #1
    4b34:	dc0b      	bgt.n	4b4e <_dtoa_r+0x6fa>
    4b36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    4b38:	2a00      	cmp	r2, #0
    4b3a:	d002      	beq.n	4b42 <_dtoa_r+0x6ee>
    4b3c:	4a0f      	ldr	r2, [pc, #60]	; (4b7c <_dtoa_r+0x728>)
    4b3e:	189b      	adds	r3, r3, r2
    4b40:	e002      	b.n	4b48 <_dtoa_r+0x6f4>
    4b42:	2336      	movs	r3, #54	; 0x36
    4b44:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    4b46:	1a9b      	subs	r3, r3, r2
    4b48:	9d08      	ldr	r5, [sp, #32]
    4b4a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4b4c:	e029      	b.n	4ba2 <_dtoa_r+0x74e>
    4b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4b50:	1e5d      	subs	r5, r3, #1
    4b52:	9b08      	ldr	r3, [sp, #32]
    4b54:	42ab      	cmp	r3, r5
    4b56:	db13      	blt.n	4b80 <_dtoa_r+0x72c>
    4b58:	1b5d      	subs	r5, r3, r5
    4b5a:	e018      	b.n	4b8e <_dtoa_r+0x73a>
    4b5c:	3ff00000 	.word	0x3ff00000
    4b60:	40240000 	.word	0x40240000
    4b64:	401c0000 	.word	0x401c0000
    4b68:	fcc00000 	.word	0xfcc00000
    4b6c:	40140000 	.word	0x40140000
    4b70:	7cc00000 	.word	0x7cc00000
    4b74:	00008ca8 	.word	0x00008ca8
    4b78:	3fe00000 	.word	0x3fe00000
    4b7c:	00000433 	.word	0x00000433
    4b80:	9b08      	ldr	r3, [sp, #32]
    4b82:	9508      	str	r5, [sp, #32]
    4b84:	1aea      	subs	r2, r5, r3
    4b86:	2500      	movs	r5, #0
    4b88:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4b8a:	189b      	adds	r3, r3, r2
    4b8c:	9311      	str	r3, [sp, #68]	; 0x44
    4b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4b90:	2b00      	cmp	r3, #0
    4b92:	da04      	bge.n	4b9e <_dtoa_r+0x74a>
    4b94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4b96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4b98:	1a9c      	subs	r4, r3, r2
    4b9a:	2300      	movs	r3, #0
    4b9c:	e001      	b.n	4ba2 <_dtoa_r+0x74e>
    4b9e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4ba2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4ba4:	2101      	movs	r1, #1
    4ba6:	18d2      	adds	r2, r2, r3
    4ba8:	920b      	str	r2, [sp, #44]	; 0x2c
    4baa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4bac:	9804      	ldr	r0, [sp, #16]
    4bae:	18d3      	adds	r3, r2, r3
    4bb0:	930c      	str	r3, [sp, #48]	; 0x30
    4bb2:	f000 fcf2 	bl	559a <__i2b>
    4bb6:	0006      	movs	r6, r0
    4bb8:	e002      	b.n	4bc0 <_dtoa_r+0x76c>
    4bba:	9d08      	ldr	r5, [sp, #32]
    4bbc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4bbe:	9e10      	ldr	r6, [sp, #64]	; 0x40
    4bc0:	2c00      	cmp	r4, #0
    4bc2:	d00e      	beq.n	4be2 <_dtoa_r+0x78e>
    4bc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4bc6:	2b00      	cmp	r3, #0
    4bc8:	dd0b      	ble.n	4be2 <_dtoa_r+0x78e>
    4bca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4bcc:	1e23      	subs	r3, r4, #0
    4bce:	4293      	cmp	r3, r2
    4bd0:	dd00      	ble.n	4bd4 <_dtoa_r+0x780>
    4bd2:	0013      	movs	r3, r2
    4bd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4bd6:	1ae4      	subs	r4, r4, r3
    4bd8:	1ad2      	subs	r2, r2, r3
    4bda:	920b      	str	r2, [sp, #44]	; 0x2c
    4bdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4bde:	1ad3      	subs	r3, r2, r3
    4be0:	930c      	str	r3, [sp, #48]	; 0x30
    4be2:	9b08      	ldr	r3, [sp, #32]
    4be4:	2b00      	cmp	r3, #0
    4be6:	dd20      	ble.n	4c2a <_dtoa_r+0x7d6>
    4be8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4bea:	2b00      	cmp	r3, #0
    4bec:	d017      	beq.n	4c1e <_dtoa_r+0x7ca>
    4bee:	2d00      	cmp	r5, #0
    4bf0:	d011      	beq.n	4c16 <_dtoa_r+0x7c2>
    4bf2:	0031      	movs	r1, r6
    4bf4:	002a      	movs	r2, r5
    4bf6:	9804      	ldr	r0, [sp, #16]
    4bf8:	f000 fd62 	bl	56c0 <__pow5mult>
    4bfc:	9a05      	ldr	r2, [sp, #20]
    4bfe:	0001      	movs	r1, r0
    4c00:	0006      	movs	r6, r0
    4c02:	9804      	ldr	r0, [sp, #16]
    4c04:	f000 fcd2 	bl	55ac <__multiply>
    4c08:	9905      	ldr	r1, [sp, #20]
    4c0a:	900e      	str	r0, [sp, #56]	; 0x38
    4c0c:	9804      	ldr	r0, [sp, #16]
    4c0e:	f000 fc24 	bl	545a <_Bfree>
    4c12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4c14:	9305      	str	r3, [sp, #20]
    4c16:	9b08      	ldr	r3, [sp, #32]
    4c18:	1b5a      	subs	r2, r3, r5
    4c1a:	d006      	beq.n	4c2a <_dtoa_r+0x7d6>
    4c1c:	e000      	b.n	4c20 <_dtoa_r+0x7cc>
    4c1e:	9a08      	ldr	r2, [sp, #32]
    4c20:	9905      	ldr	r1, [sp, #20]
    4c22:	9804      	ldr	r0, [sp, #16]
    4c24:	f000 fd4c 	bl	56c0 <__pow5mult>
    4c28:	9005      	str	r0, [sp, #20]
    4c2a:	2101      	movs	r1, #1
    4c2c:	9804      	ldr	r0, [sp, #16]
    4c2e:	f000 fcb4 	bl	559a <__i2b>
    4c32:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4c34:	9008      	str	r0, [sp, #32]
    4c36:	2b00      	cmp	r3, #0
    4c38:	d100      	bne.n	4c3c <_dtoa_r+0x7e8>
    4c3a:	e1c0      	b.n	4fbe <_dtoa_r+0xb6a>
    4c3c:	001a      	movs	r2, r3
    4c3e:	0001      	movs	r1, r0
    4c40:	9804      	ldr	r0, [sp, #16]
    4c42:	f000 fd3d 	bl	56c0 <__pow5mult>
    4c46:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4c48:	9008      	str	r0, [sp, #32]
    4c4a:	2b01      	cmp	r3, #1
    4c4c:	dc17      	bgt.n	4c7e <_dtoa_r+0x82a>
    4c4e:	2500      	movs	r5, #0
    4c50:	9b06      	ldr	r3, [sp, #24]
    4c52:	42ab      	cmp	r3, r5
    4c54:	d10e      	bne.n	4c74 <_dtoa_r+0x820>
    4c56:	9b07      	ldr	r3, [sp, #28]
    4c58:	031b      	lsls	r3, r3, #12
    4c5a:	42ab      	cmp	r3, r5
    4c5c:	d10a      	bne.n	4c74 <_dtoa_r+0x820>
    4c5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4c60:	9a07      	ldr	r2, [sp, #28]
    4c62:	4213      	tst	r3, r2
    4c64:	d006      	beq.n	4c74 <_dtoa_r+0x820>
    4c66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4c68:	3501      	adds	r5, #1
    4c6a:	3301      	adds	r3, #1
    4c6c:	930b      	str	r3, [sp, #44]	; 0x2c
    4c6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4c70:	3301      	adds	r3, #1
    4c72:	930c      	str	r3, [sp, #48]	; 0x30
    4c74:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4c76:	2001      	movs	r0, #1
    4c78:	2b00      	cmp	r3, #0
    4c7a:	d00d      	beq.n	4c98 <_dtoa_r+0x844>
    4c7c:	e000      	b.n	4c80 <_dtoa_r+0x82c>
    4c7e:	2500      	movs	r5, #0
    4c80:	9b08      	ldr	r3, [sp, #32]
    4c82:	9a08      	ldr	r2, [sp, #32]
    4c84:	691b      	ldr	r3, [r3, #16]
    4c86:	930e      	str	r3, [sp, #56]	; 0x38
    4c88:	3303      	adds	r3, #3
    4c8a:	009b      	lsls	r3, r3, #2
    4c8c:	18d3      	adds	r3, r2, r3
    4c8e:	6858      	ldr	r0, [r3, #4]
    4c90:	f000 fc39 	bl	5506 <__hi0bits>
    4c94:	2320      	movs	r3, #32
    4c96:	1a18      	subs	r0, r3, r0
    4c98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4c9a:	18c0      	adds	r0, r0, r3
    4c9c:	231f      	movs	r3, #31
    4c9e:	4018      	ands	r0, r3
    4ca0:	d009      	beq.n	4cb6 <_dtoa_r+0x862>
    4ca2:	3301      	adds	r3, #1
    4ca4:	1a1b      	subs	r3, r3, r0
    4ca6:	2b04      	cmp	r3, #4
    4ca8:	dd02      	ble.n	4cb0 <_dtoa_r+0x85c>
    4caa:	231c      	movs	r3, #28
    4cac:	1a18      	subs	r0, r3, r0
    4cae:	e003      	b.n	4cb8 <_dtoa_r+0x864>
    4cb0:	2b04      	cmp	r3, #4
    4cb2:	d008      	beq.n	4cc6 <_dtoa_r+0x872>
    4cb4:	0018      	movs	r0, r3
    4cb6:	301c      	adds	r0, #28
    4cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4cba:	1824      	adds	r4, r4, r0
    4cbc:	181b      	adds	r3, r3, r0
    4cbe:	930b      	str	r3, [sp, #44]	; 0x2c
    4cc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4cc2:	181b      	adds	r3, r3, r0
    4cc4:	930c      	str	r3, [sp, #48]	; 0x30
    4cc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4cc8:	2b00      	cmp	r3, #0
    4cca:	dd05      	ble.n	4cd8 <_dtoa_r+0x884>
    4ccc:	001a      	movs	r2, r3
    4cce:	9905      	ldr	r1, [sp, #20]
    4cd0:	9804      	ldr	r0, [sp, #16]
    4cd2:	f000 fd49 	bl	5768 <__lshift>
    4cd6:	9005      	str	r0, [sp, #20]
    4cd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4cda:	2b00      	cmp	r3, #0
    4cdc:	dd05      	ble.n	4cea <_dtoa_r+0x896>
    4cde:	001a      	movs	r2, r3
    4ce0:	9908      	ldr	r1, [sp, #32]
    4ce2:	9804      	ldr	r0, [sp, #16]
    4ce4:	f000 fd40 	bl	5768 <__lshift>
    4ce8:	9008      	str	r0, [sp, #32]
    4cea:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4cec:	2b00      	cmp	r3, #0
    4cee:	d01d      	beq.n	4d2c <_dtoa_r+0x8d8>
    4cf0:	9908      	ldr	r1, [sp, #32]
    4cf2:	9805      	ldr	r0, [sp, #20]
    4cf4:	f000 fd8a 	bl	580c <__mcmp>
    4cf8:	2800      	cmp	r0, #0
    4cfa:	da17      	bge.n	4d2c <_dtoa_r+0x8d8>
    4cfc:	9b03      	ldr	r3, [sp, #12]
    4cfe:	220a      	movs	r2, #10
    4d00:	3b01      	subs	r3, #1
    4d02:	9303      	str	r3, [sp, #12]
    4d04:	9905      	ldr	r1, [sp, #20]
    4d06:	2300      	movs	r3, #0
    4d08:	9804      	ldr	r0, [sp, #16]
    4d0a:	f000 fbbf 	bl	548c <__multadd>
    4d0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4d10:	9005      	str	r0, [sp, #20]
    4d12:	2b00      	cmp	r3, #0
    4d14:	d100      	bne.n	4d18 <_dtoa_r+0x8c4>
    4d16:	e159      	b.n	4fcc <_dtoa_r+0xb78>
    4d18:	0031      	movs	r1, r6
    4d1a:	2300      	movs	r3, #0
    4d1c:	220a      	movs	r2, #10
    4d1e:	9804      	ldr	r0, [sp, #16]
    4d20:	f000 fbb4 	bl	548c <__multadd>
    4d24:	0006      	movs	r6, r0
    4d26:	2f00      	cmp	r7, #0
    4d28:	dc37      	bgt.n	4d9a <_dtoa_r+0x946>
    4d2a:	e033      	b.n	4d94 <_dtoa_r+0x940>
    4d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4d2e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    4d30:	2b00      	cmp	r3, #0
    4d32:	dc2a      	bgt.n	4d8a <_dtoa_r+0x936>
    4d34:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4d36:	2b02      	cmp	r3, #2
    4d38:	dd27      	ble.n	4d8a <_dtoa_r+0x936>
    4d3a:	2f00      	cmp	r7, #0
    4d3c:	d112      	bne.n	4d64 <_dtoa_r+0x910>
    4d3e:	9908      	ldr	r1, [sp, #32]
    4d40:	003b      	movs	r3, r7
    4d42:	2205      	movs	r2, #5
    4d44:	9804      	ldr	r0, [sp, #16]
    4d46:	f000 fba1 	bl	548c <__multadd>
    4d4a:	9008      	str	r0, [sp, #32]
    4d4c:	0001      	movs	r1, r0
    4d4e:	9805      	ldr	r0, [sp, #20]
    4d50:	f000 fd5c 	bl	580c <__mcmp>
    4d54:	2800      	cmp	r0, #0
    4d56:	dc0d      	bgt.n	4d74 <_dtoa_r+0x920>
    4d58:	e004      	b.n	4d64 <_dtoa_r+0x910>
    4d5a:	9608      	str	r6, [sp, #32]
    4d5c:	e002      	b.n	4d64 <_dtoa_r+0x910>
    4d5e:	2300      	movs	r3, #0
    4d60:	001e      	movs	r6, r3
    4d62:	9308      	str	r3, [sp, #32]
    4d64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    4d66:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4d68:	43db      	mvns	r3, r3
    4d6a:	9303      	str	r3, [sp, #12]
    4d6c:	e00a      	b.n	4d84 <_dtoa_r+0x930>
    4d6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4d70:	9608      	str	r6, [sp, #32]
    4d72:	9303      	str	r3, [sp, #12]
    4d74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4d76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4d78:	1c5d      	adds	r5, r3, #1
    4d7a:	2331      	movs	r3, #49	; 0x31
    4d7c:	7013      	strb	r3, [r2, #0]
    4d7e:	9b03      	ldr	r3, [sp, #12]
    4d80:	3301      	adds	r3, #1
    4d82:	9303      	str	r3, [sp, #12]
    4d84:	960a      	str	r6, [sp, #40]	; 0x28
    4d86:	2600      	movs	r6, #0
    4d88:	e0f3      	b.n	4f72 <_dtoa_r+0xb1e>
    4d8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d104      	bne.n	4d9a <_dtoa_r+0x946>
    4d90:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4d92:	e0b5      	b.n	4f00 <_dtoa_r+0xaac>
    4d94:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4d96:	2b02      	cmp	r3, #2
    4d98:	dccf      	bgt.n	4d3a <_dtoa_r+0x8e6>
    4d9a:	2c00      	cmp	r4, #0
    4d9c:	dd05      	ble.n	4daa <_dtoa_r+0x956>
    4d9e:	0031      	movs	r1, r6
    4da0:	0022      	movs	r2, r4
    4da2:	9804      	ldr	r0, [sp, #16]
    4da4:	f000 fce0 	bl	5768 <__lshift>
    4da8:	0006      	movs	r6, r0
    4daa:	960a      	str	r6, [sp, #40]	; 0x28
    4dac:	2d00      	cmp	r5, #0
    4dae:	d012      	beq.n	4dd6 <_dtoa_r+0x982>
    4db0:	6871      	ldr	r1, [r6, #4]
    4db2:	9804      	ldr	r0, [sp, #16]
    4db4:	f000 fb19 	bl	53ea <_Balloc>
    4db8:	0031      	movs	r1, r6
    4dba:	0004      	movs	r4, r0
    4dbc:	6933      	ldr	r3, [r6, #16]
    4dbe:	310c      	adds	r1, #12
    4dc0:	1c9a      	adds	r2, r3, #2
    4dc2:	0092      	lsls	r2, r2, #2
    4dc4:	300c      	adds	r0, #12
    4dc6:	f7fe fc21 	bl	360c <memcpy>
    4dca:	2201      	movs	r2, #1
    4dcc:	0021      	movs	r1, r4
    4dce:	9804      	ldr	r0, [sp, #16]
    4dd0:	f000 fcca 	bl	5768 <__lshift>
    4dd4:	900a      	str	r0, [sp, #40]	; 0x28
    4dd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4dd8:	1e7d      	subs	r5, r7, #1
    4dda:	930b      	str	r3, [sp, #44]	; 0x2c
    4ddc:	195b      	adds	r3, r3, r5
    4dde:	930e      	str	r3, [sp, #56]	; 0x38
    4de0:	9908      	ldr	r1, [sp, #32]
    4de2:	9805      	ldr	r0, [sp, #20]
    4de4:	f7ff fab0 	bl	4348 <quorem>
    4de8:	0031      	movs	r1, r6
    4dea:	9010      	str	r0, [sp, #64]	; 0x40
    4dec:	0004      	movs	r4, r0
    4dee:	9805      	ldr	r0, [sp, #20]
    4df0:	f000 fd0c 	bl	580c <__mcmp>
    4df4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4df6:	0005      	movs	r5, r0
    4df8:	9908      	ldr	r1, [sp, #32]
    4dfa:	9804      	ldr	r0, [sp, #16]
    4dfc:	f000 fd21 	bl	5842 <__mdiff>
    4e00:	2301      	movs	r3, #1
    4e02:	930c      	str	r3, [sp, #48]	; 0x30
    4e04:	68c3      	ldr	r3, [r0, #12]
    4e06:	3430      	adds	r4, #48	; 0x30
    4e08:	0007      	movs	r7, r0
    4e0a:	2b00      	cmp	r3, #0
    4e0c:	d104      	bne.n	4e18 <_dtoa_r+0x9c4>
    4e0e:	0001      	movs	r1, r0
    4e10:	9805      	ldr	r0, [sp, #20]
    4e12:	f000 fcfb 	bl	580c <__mcmp>
    4e16:	900c      	str	r0, [sp, #48]	; 0x30
    4e18:	0039      	movs	r1, r7
    4e1a:	9804      	ldr	r0, [sp, #16]
    4e1c:	f000 fb1d 	bl	545a <_Bfree>
    4e20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4e22:	9a22      	ldr	r2, [sp, #136]	; 0x88
    4e24:	4313      	orrs	r3, r2
    4e26:	d108      	bne.n	4e3a <_dtoa_r+0x9e6>
    4e28:	9a06      	ldr	r2, [sp, #24]
    4e2a:	3301      	adds	r3, #1
    4e2c:	4213      	tst	r3, r2
    4e2e:	d104      	bne.n	4e3a <_dtoa_r+0x9e6>
    4e30:	2c39      	cmp	r4, #57	; 0x39
    4e32:	d02a      	beq.n	4e8a <_dtoa_r+0xa36>
    4e34:	2d00      	cmp	r5, #0
    4e36:	dc1c      	bgt.n	4e72 <_dtoa_r+0xa1e>
    4e38:	e01d      	b.n	4e76 <_dtoa_r+0xa22>
    4e3a:	2d00      	cmp	r5, #0
    4e3c:	db06      	blt.n	4e4c <_dtoa_r+0x9f8>
    4e3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4e40:	431d      	orrs	r5, r3
    4e42:	d11b      	bne.n	4e7c <_dtoa_r+0xa28>
    4e44:	2301      	movs	r3, #1
    4e46:	9a06      	ldr	r2, [sp, #24]
    4e48:	4213      	tst	r3, r2
    4e4a:	d117      	bne.n	4e7c <_dtoa_r+0xa28>
    4e4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4e4e:	2b00      	cmp	r3, #0
    4e50:	dd11      	ble.n	4e76 <_dtoa_r+0xa22>
    4e52:	9905      	ldr	r1, [sp, #20]
    4e54:	2201      	movs	r2, #1
    4e56:	9804      	ldr	r0, [sp, #16]
    4e58:	f000 fc86 	bl	5768 <__lshift>
    4e5c:	9908      	ldr	r1, [sp, #32]
    4e5e:	9005      	str	r0, [sp, #20]
    4e60:	f000 fcd4 	bl	580c <__mcmp>
    4e64:	2800      	cmp	r0, #0
    4e66:	dc02      	bgt.n	4e6e <_dtoa_r+0xa1a>
    4e68:	d105      	bne.n	4e76 <_dtoa_r+0xa22>
    4e6a:	07e3      	lsls	r3, r4, #31
    4e6c:	d503      	bpl.n	4e76 <_dtoa_r+0xa22>
    4e6e:	2c39      	cmp	r4, #57	; 0x39
    4e70:	d00b      	beq.n	4e8a <_dtoa_r+0xa36>
    4e72:	9c10      	ldr	r4, [sp, #64]	; 0x40
    4e74:	3431      	adds	r4, #49	; 0x31
    4e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4e78:	1c5d      	adds	r5, r3, #1
    4e7a:	e00f      	b.n	4e9c <_dtoa_r+0xa48>
    4e7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4e7e:	1c5f      	adds	r7, r3, #1
    4e80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4e82:	2b00      	cmp	r3, #0
    4e84:	dd0c      	ble.n	4ea0 <_dtoa_r+0xa4c>
    4e86:	2c39      	cmp	r4, #57	; 0x39
    4e88:	d105      	bne.n	4e96 <_dtoa_r+0xa42>
    4e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4e8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4e8e:	1c5d      	adds	r5, r3, #1
    4e90:	2339      	movs	r3, #57	; 0x39
    4e92:	7013      	strb	r3, [r2, #0]
    4e94:	e057      	b.n	4f46 <_dtoa_r+0xaf2>
    4e96:	003d      	movs	r5, r7
    4e98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4e9a:	3401      	adds	r4, #1
    4e9c:	701c      	strb	r4, [r3, #0]
    4e9e:	e068      	b.n	4f72 <_dtoa_r+0xb1e>
    4ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4ea2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4ea4:	003d      	movs	r5, r7
    4ea6:	701c      	strb	r4, [r3, #0]
    4ea8:	4293      	cmp	r3, r2
    4eaa:	d03c      	beq.n	4f26 <_dtoa_r+0xad2>
    4eac:	2300      	movs	r3, #0
    4eae:	220a      	movs	r2, #10
    4eb0:	9905      	ldr	r1, [sp, #20]
    4eb2:	9804      	ldr	r0, [sp, #16]
    4eb4:	f000 faea 	bl	548c <__multadd>
    4eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4eba:	9005      	str	r0, [sp, #20]
    4ebc:	429e      	cmp	r6, r3
    4ebe:	d108      	bne.n	4ed2 <_dtoa_r+0xa7e>
    4ec0:	0031      	movs	r1, r6
    4ec2:	2300      	movs	r3, #0
    4ec4:	220a      	movs	r2, #10
    4ec6:	9804      	ldr	r0, [sp, #16]
    4ec8:	f000 fae0 	bl	548c <__multadd>
    4ecc:	0006      	movs	r6, r0
    4ece:	900a      	str	r0, [sp, #40]	; 0x28
    4ed0:	e00d      	b.n	4eee <_dtoa_r+0xa9a>
    4ed2:	0031      	movs	r1, r6
    4ed4:	2300      	movs	r3, #0
    4ed6:	220a      	movs	r2, #10
    4ed8:	9804      	ldr	r0, [sp, #16]
    4eda:	f000 fad7 	bl	548c <__multadd>
    4ede:	2300      	movs	r3, #0
    4ee0:	0006      	movs	r6, r0
    4ee2:	220a      	movs	r2, #10
    4ee4:	990a      	ldr	r1, [sp, #40]	; 0x28
    4ee6:	9804      	ldr	r0, [sp, #16]
    4ee8:	f000 fad0 	bl	548c <__multadd>
    4eec:	900a      	str	r0, [sp, #40]	; 0x28
    4eee:	970b      	str	r7, [sp, #44]	; 0x2c
    4ef0:	e776      	b.n	4de0 <_dtoa_r+0x98c>
    4ef2:	2300      	movs	r3, #0
    4ef4:	220a      	movs	r2, #10
    4ef6:	9905      	ldr	r1, [sp, #20]
    4ef8:	9804      	ldr	r0, [sp, #16]
    4efa:	f000 fac7 	bl	548c <__multadd>
    4efe:	9005      	str	r0, [sp, #20]
    4f00:	9908      	ldr	r1, [sp, #32]
    4f02:	9805      	ldr	r0, [sp, #20]
    4f04:	f7ff fa20 	bl	4348 <quorem>
    4f08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4f0a:	3030      	adds	r0, #48	; 0x30
    4f0c:	7028      	strb	r0, [r5, #0]
    4f0e:	3501      	adds	r5, #1
    4f10:	0004      	movs	r4, r0
    4f12:	1aeb      	subs	r3, r5, r3
    4f14:	42bb      	cmp	r3, r7
    4f16:	dbec      	blt.n	4ef2 <_dtoa_r+0xa9e>
    4f18:	1e3d      	subs	r5, r7, #0
    4f1a:	dc00      	bgt.n	4f1e <_dtoa_r+0xaca>
    4f1c:	2501      	movs	r5, #1
    4f1e:	960a      	str	r6, [sp, #40]	; 0x28
    4f20:	2600      	movs	r6, #0
    4f22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4f24:	195d      	adds	r5, r3, r5
    4f26:	9905      	ldr	r1, [sp, #20]
    4f28:	2201      	movs	r2, #1
    4f2a:	9804      	ldr	r0, [sp, #16]
    4f2c:	f000 fc1c 	bl	5768 <__lshift>
    4f30:	9908      	ldr	r1, [sp, #32]
    4f32:	9005      	str	r0, [sp, #20]
    4f34:	f000 fc6a 	bl	580c <__mcmp>
    4f38:	2800      	cmp	r0, #0
    4f3a:	dc04      	bgt.n	4f46 <_dtoa_r+0xaf2>
    4f3c:	d113      	bne.n	4f66 <_dtoa_r+0xb12>
    4f3e:	07e3      	lsls	r3, r4, #31
    4f40:	d401      	bmi.n	4f46 <_dtoa_r+0xaf2>
    4f42:	e010      	b.n	4f66 <_dtoa_r+0xb12>
    4f44:	001d      	movs	r5, r3
    4f46:	1e6b      	subs	r3, r5, #1
    4f48:	781a      	ldrb	r2, [r3, #0]
    4f4a:	2a39      	cmp	r2, #57	; 0x39
    4f4c:	d108      	bne.n	4f60 <_dtoa_r+0xb0c>
    4f4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4f50:	429a      	cmp	r2, r3
    4f52:	d1f7      	bne.n	4f44 <_dtoa_r+0xaf0>
    4f54:	9b03      	ldr	r3, [sp, #12]
    4f56:	3301      	adds	r3, #1
    4f58:	9303      	str	r3, [sp, #12]
    4f5a:	2331      	movs	r3, #49	; 0x31
    4f5c:	7013      	strb	r3, [r2, #0]
    4f5e:	e008      	b.n	4f72 <_dtoa_r+0xb1e>
    4f60:	3201      	adds	r2, #1
    4f62:	701a      	strb	r2, [r3, #0]
    4f64:	e005      	b.n	4f72 <_dtoa_r+0xb1e>
    4f66:	1e6b      	subs	r3, r5, #1
    4f68:	781a      	ldrb	r2, [r3, #0]
    4f6a:	2a30      	cmp	r2, #48	; 0x30
    4f6c:	d101      	bne.n	4f72 <_dtoa_r+0xb1e>
    4f6e:	001d      	movs	r5, r3
    4f70:	e7f9      	b.n	4f66 <_dtoa_r+0xb12>
    4f72:	9908      	ldr	r1, [sp, #32]
    4f74:	9804      	ldr	r0, [sp, #16]
    4f76:	f000 fa70 	bl	545a <_Bfree>
    4f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4f7c:	2b00      	cmp	r3, #0
    4f7e:	d00e      	beq.n	4f9e <_dtoa_r+0xb4a>
    4f80:	2e00      	cmp	r6, #0
    4f82:	d005      	beq.n	4f90 <_dtoa_r+0xb3c>
    4f84:	429e      	cmp	r6, r3
    4f86:	d003      	beq.n	4f90 <_dtoa_r+0xb3c>
    4f88:	0031      	movs	r1, r6
    4f8a:	9804      	ldr	r0, [sp, #16]
    4f8c:	f000 fa65 	bl	545a <_Bfree>
    4f90:	990a      	ldr	r1, [sp, #40]	; 0x28
    4f92:	9804      	ldr	r0, [sp, #16]
    4f94:	f000 fa61 	bl	545a <_Bfree>
    4f98:	e001      	b.n	4f9e <_dtoa_r+0xb4a>
    4f9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4f9c:	9303      	str	r3, [sp, #12]
    4f9e:	9804      	ldr	r0, [sp, #16]
    4fa0:	9905      	ldr	r1, [sp, #20]
    4fa2:	f000 fa5a 	bl	545a <_Bfree>
    4fa6:	2300      	movs	r3, #0
    4fa8:	702b      	strb	r3, [r5, #0]
    4faa:	9b03      	ldr	r3, [sp, #12]
    4fac:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4fae:	3301      	adds	r3, #1
    4fb0:	6013      	str	r3, [r2, #0]
    4fb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
    4fb4:	980d      	ldr	r0, [sp, #52]	; 0x34
    4fb6:	2b00      	cmp	r3, #0
    4fb8:	d010      	beq.n	4fdc <_dtoa_r+0xb88>
    4fba:	601d      	str	r5, [r3, #0]
    4fbc:	e00e      	b.n	4fdc <_dtoa_r+0xb88>
    4fbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4fc0:	2b01      	cmp	r3, #1
    4fc2:	dc00      	bgt.n	4fc6 <_dtoa_r+0xb72>
    4fc4:	e643      	b.n	4c4e <_dtoa_r+0x7fa>
    4fc6:	9d11      	ldr	r5, [sp, #68]	; 0x44
    4fc8:	2001      	movs	r0, #1
    4fca:	e665      	b.n	4c98 <_dtoa_r+0x844>
    4fcc:	2f00      	cmp	r7, #0
    4fce:	dd00      	ble.n	4fd2 <_dtoa_r+0xb7e>
    4fd0:	e6de      	b.n	4d90 <_dtoa_r+0x93c>
    4fd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4fd4:	2b02      	cmp	r3, #2
    4fd6:	dc00      	bgt.n	4fda <_dtoa_r+0xb86>
    4fd8:	e6da      	b.n	4d90 <_dtoa_r+0x93c>
    4fda:	e6ae      	b.n	4d3a <_dtoa_r+0x8e6>
    4fdc:	b01d      	add	sp, #116	; 0x74
    4fde:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004fe0 <__sflush_r>:
    4fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4fe2:	898a      	ldrh	r2, [r1, #12]
    4fe4:	0005      	movs	r5, r0
    4fe6:	000c      	movs	r4, r1
    4fe8:	0713      	lsls	r3, r2, #28
    4fea:	d45a      	bmi.n	50a2 <__sflush_r+0xc2>
    4fec:	684b      	ldr	r3, [r1, #4]
    4fee:	2b00      	cmp	r3, #0
    4ff0:	dc02      	bgt.n	4ff8 <__sflush_r+0x18>
    4ff2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4ff4:	2b00      	cmp	r3, #0
    4ff6:	dd19      	ble.n	502c <__sflush_r+0x4c>
    4ff8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4ffa:	2f00      	cmp	r7, #0
    4ffc:	d016      	beq.n	502c <__sflush_r+0x4c>
    4ffe:	2300      	movs	r3, #0
    5000:	682e      	ldr	r6, [r5, #0]
    5002:	602b      	str	r3, [r5, #0]
    5004:	2380      	movs	r3, #128	; 0x80
    5006:	015b      	lsls	r3, r3, #5
    5008:	401a      	ands	r2, r3
    500a:	d001      	beq.n	5010 <__sflush_r+0x30>
    500c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    500e:	e014      	b.n	503a <__sflush_r+0x5a>
    5010:	2301      	movs	r3, #1
    5012:	6a21      	ldr	r1, [r4, #32]
    5014:	0028      	movs	r0, r5
    5016:	47b8      	blx	r7
    5018:	1c43      	adds	r3, r0, #1
    501a:	d10e      	bne.n	503a <__sflush_r+0x5a>
    501c:	682b      	ldr	r3, [r5, #0]
    501e:	2b00      	cmp	r3, #0
    5020:	d00b      	beq.n	503a <__sflush_r+0x5a>
    5022:	2b1d      	cmp	r3, #29
    5024:	d001      	beq.n	502a <__sflush_r+0x4a>
    5026:	2b16      	cmp	r3, #22
    5028:	d102      	bne.n	5030 <__sflush_r+0x50>
    502a:	602e      	str	r6, [r5, #0]
    502c:	2000      	movs	r0, #0
    502e:	e05a      	b.n	50e6 <__sflush_r+0x106>
    5030:	2240      	movs	r2, #64	; 0x40
    5032:	89a3      	ldrh	r3, [r4, #12]
    5034:	4313      	orrs	r3, r2
    5036:	81a3      	strh	r3, [r4, #12]
    5038:	e055      	b.n	50e6 <__sflush_r+0x106>
    503a:	89a3      	ldrh	r3, [r4, #12]
    503c:	075b      	lsls	r3, r3, #29
    503e:	d506      	bpl.n	504e <__sflush_r+0x6e>
    5040:	6863      	ldr	r3, [r4, #4]
    5042:	1ac0      	subs	r0, r0, r3
    5044:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5046:	2b00      	cmp	r3, #0
    5048:	d001      	beq.n	504e <__sflush_r+0x6e>
    504a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    504c:	1ac0      	subs	r0, r0, r3
    504e:	2300      	movs	r3, #0
    5050:	0002      	movs	r2, r0
    5052:	6a21      	ldr	r1, [r4, #32]
    5054:	0028      	movs	r0, r5
    5056:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5058:	47b8      	blx	r7
    505a:	89a3      	ldrh	r3, [r4, #12]
    505c:	1c42      	adds	r2, r0, #1
    505e:	d106      	bne.n	506e <__sflush_r+0x8e>
    5060:	6829      	ldr	r1, [r5, #0]
    5062:	291d      	cmp	r1, #29
    5064:	d83a      	bhi.n	50dc <__sflush_r+0xfc>
    5066:	4a20      	ldr	r2, [pc, #128]	; (50e8 <__sflush_r+0x108>)
    5068:	40ca      	lsrs	r2, r1
    506a:	07d2      	lsls	r2, r2, #31
    506c:	d536      	bpl.n	50dc <__sflush_r+0xfc>
    506e:	2200      	movs	r2, #0
    5070:	6062      	str	r2, [r4, #4]
    5072:	6922      	ldr	r2, [r4, #16]
    5074:	6022      	str	r2, [r4, #0]
    5076:	04db      	lsls	r3, r3, #19
    5078:	d505      	bpl.n	5086 <__sflush_r+0xa6>
    507a:	1c43      	adds	r3, r0, #1
    507c:	d102      	bne.n	5084 <__sflush_r+0xa4>
    507e:	682b      	ldr	r3, [r5, #0]
    5080:	2b00      	cmp	r3, #0
    5082:	d100      	bne.n	5086 <__sflush_r+0xa6>
    5084:	6560      	str	r0, [r4, #84]	; 0x54
    5086:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5088:	602e      	str	r6, [r5, #0]
    508a:	2900      	cmp	r1, #0
    508c:	d0ce      	beq.n	502c <__sflush_r+0x4c>
    508e:	0023      	movs	r3, r4
    5090:	3344      	adds	r3, #68	; 0x44
    5092:	4299      	cmp	r1, r3
    5094:	d002      	beq.n	509c <__sflush_r+0xbc>
    5096:	0028      	movs	r0, r5
    5098:	f000 fca0 	bl	59dc <_free_r>
    509c:	2000      	movs	r0, #0
    509e:	6360      	str	r0, [r4, #52]	; 0x34
    50a0:	e021      	b.n	50e6 <__sflush_r+0x106>
    50a2:	690f      	ldr	r7, [r1, #16]
    50a4:	2f00      	cmp	r7, #0
    50a6:	d0c1      	beq.n	502c <__sflush_r+0x4c>
    50a8:	680b      	ldr	r3, [r1, #0]
    50aa:	600f      	str	r7, [r1, #0]
    50ac:	1bdb      	subs	r3, r3, r7
    50ae:	9301      	str	r3, [sp, #4]
    50b0:	2300      	movs	r3, #0
    50b2:	0792      	lsls	r2, r2, #30
    50b4:	d100      	bne.n	50b8 <__sflush_r+0xd8>
    50b6:	694b      	ldr	r3, [r1, #20]
    50b8:	60a3      	str	r3, [r4, #8]
    50ba:	e003      	b.n	50c4 <__sflush_r+0xe4>
    50bc:	9b01      	ldr	r3, [sp, #4]
    50be:	183f      	adds	r7, r7, r0
    50c0:	1a1b      	subs	r3, r3, r0
    50c2:	9301      	str	r3, [sp, #4]
    50c4:	9b01      	ldr	r3, [sp, #4]
    50c6:	2b00      	cmp	r3, #0
    50c8:	ddb0      	ble.n	502c <__sflush_r+0x4c>
    50ca:	9b01      	ldr	r3, [sp, #4]
    50cc:	003a      	movs	r2, r7
    50ce:	6a21      	ldr	r1, [r4, #32]
    50d0:	0028      	movs	r0, r5
    50d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    50d4:	47b0      	blx	r6
    50d6:	2800      	cmp	r0, #0
    50d8:	dcf0      	bgt.n	50bc <__sflush_r+0xdc>
    50da:	89a3      	ldrh	r3, [r4, #12]
    50dc:	2240      	movs	r2, #64	; 0x40
    50de:	2001      	movs	r0, #1
    50e0:	4313      	orrs	r3, r2
    50e2:	81a3      	strh	r3, [r4, #12]
    50e4:	4240      	negs	r0, r0
    50e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    50e8:	20400001 	.word	0x20400001

000050ec <_fflush_r>:
    50ec:	690b      	ldr	r3, [r1, #16]
    50ee:	b570      	push	{r4, r5, r6, lr}
    50f0:	0005      	movs	r5, r0
    50f2:	000c      	movs	r4, r1
    50f4:	2b00      	cmp	r3, #0
    50f6:	d101      	bne.n	50fc <_fflush_r+0x10>
    50f8:	2000      	movs	r0, #0
    50fa:	e01c      	b.n	5136 <_fflush_r+0x4a>
    50fc:	2800      	cmp	r0, #0
    50fe:	d004      	beq.n	510a <_fflush_r+0x1e>
    5100:	6983      	ldr	r3, [r0, #24]
    5102:	2b00      	cmp	r3, #0
    5104:	d101      	bne.n	510a <_fflush_r+0x1e>
    5106:	f000 f85f 	bl	51c8 <__sinit>
    510a:	4b0b      	ldr	r3, [pc, #44]	; (5138 <_fflush_r+0x4c>)
    510c:	429c      	cmp	r4, r3
    510e:	d101      	bne.n	5114 <_fflush_r+0x28>
    5110:	686c      	ldr	r4, [r5, #4]
    5112:	e008      	b.n	5126 <_fflush_r+0x3a>
    5114:	4b09      	ldr	r3, [pc, #36]	; (513c <_fflush_r+0x50>)
    5116:	429c      	cmp	r4, r3
    5118:	d101      	bne.n	511e <_fflush_r+0x32>
    511a:	68ac      	ldr	r4, [r5, #8]
    511c:	e003      	b.n	5126 <_fflush_r+0x3a>
    511e:	4b08      	ldr	r3, [pc, #32]	; (5140 <_fflush_r+0x54>)
    5120:	429c      	cmp	r4, r3
    5122:	d100      	bne.n	5126 <_fflush_r+0x3a>
    5124:	68ec      	ldr	r4, [r5, #12]
    5126:	220c      	movs	r2, #12
    5128:	5ea3      	ldrsh	r3, [r4, r2]
    512a:	2b00      	cmp	r3, #0
    512c:	d0e4      	beq.n	50f8 <_fflush_r+0xc>
    512e:	0021      	movs	r1, r4
    5130:	0028      	movs	r0, r5
    5132:	f7ff ff55 	bl	4fe0 <__sflush_r>
    5136:	bd70      	pop	{r4, r5, r6, pc}
    5138:	00008c40 	.word	0x00008c40
    513c:	00008c60 	.word	0x00008c60
    5140:	00008c80 	.word	0x00008c80

00005144 <_cleanup_r>:
    5144:	b510      	push	{r4, lr}
    5146:	4902      	ldr	r1, [pc, #8]	; (5150 <_cleanup_r+0xc>)
    5148:	f000 f8b0 	bl	52ac <_fwalk_reent>
    514c:	bd10      	pop	{r4, pc}
    514e:	46c0      	nop			; (mov r8, r8)
    5150:	000050ed 	.word	0x000050ed

00005154 <std.isra.0>:
    5154:	2300      	movs	r3, #0
    5156:	b510      	push	{r4, lr}
    5158:	0004      	movs	r4, r0
    515a:	6003      	str	r3, [r0, #0]
    515c:	6043      	str	r3, [r0, #4]
    515e:	6083      	str	r3, [r0, #8]
    5160:	8181      	strh	r1, [r0, #12]
    5162:	6643      	str	r3, [r0, #100]	; 0x64
    5164:	81c2      	strh	r2, [r0, #14]
    5166:	6103      	str	r3, [r0, #16]
    5168:	6143      	str	r3, [r0, #20]
    516a:	6183      	str	r3, [r0, #24]
    516c:	0019      	movs	r1, r3
    516e:	2208      	movs	r2, #8
    5170:	305c      	adds	r0, #92	; 0x5c
    5172:	f7fe fa54 	bl	361e <memset>
    5176:	4b05      	ldr	r3, [pc, #20]	; (518c <std.isra.0+0x38>)
    5178:	6224      	str	r4, [r4, #32]
    517a:	6263      	str	r3, [r4, #36]	; 0x24
    517c:	4b04      	ldr	r3, [pc, #16]	; (5190 <std.isra.0+0x3c>)
    517e:	62a3      	str	r3, [r4, #40]	; 0x28
    5180:	4b04      	ldr	r3, [pc, #16]	; (5194 <std.isra.0+0x40>)
    5182:	62e3      	str	r3, [r4, #44]	; 0x2c
    5184:	4b04      	ldr	r3, [pc, #16]	; (5198 <std.isra.0+0x44>)
    5186:	6323      	str	r3, [r4, #48]	; 0x30
    5188:	bd10      	pop	{r4, pc}
    518a:	46c0      	nop			; (mov r8, r8)
    518c:	00005dc1 	.word	0x00005dc1
    5190:	00005de9 	.word	0x00005de9
    5194:	00005e21 	.word	0x00005e21
    5198:	00005e4d 	.word	0x00005e4d

0000519c <__sfmoreglue>:
    519c:	b570      	push	{r4, r5, r6, lr}
    519e:	2568      	movs	r5, #104	; 0x68
    51a0:	1e4b      	subs	r3, r1, #1
    51a2:	435d      	muls	r5, r3
    51a4:	000e      	movs	r6, r1
    51a6:	0029      	movs	r1, r5
    51a8:	3174      	adds	r1, #116	; 0x74
    51aa:	f000 fc5d 	bl	5a68 <_malloc_r>
    51ae:	1e04      	subs	r4, r0, #0
    51b0:	d008      	beq.n	51c4 <__sfmoreglue+0x28>
    51b2:	2100      	movs	r1, #0
    51b4:	002a      	movs	r2, r5
    51b6:	6001      	str	r1, [r0, #0]
    51b8:	6046      	str	r6, [r0, #4]
    51ba:	300c      	adds	r0, #12
    51bc:	60a0      	str	r0, [r4, #8]
    51be:	3268      	adds	r2, #104	; 0x68
    51c0:	f7fe fa2d 	bl	361e <memset>
    51c4:	0020      	movs	r0, r4
    51c6:	bd70      	pop	{r4, r5, r6, pc}

000051c8 <__sinit>:
    51c8:	6983      	ldr	r3, [r0, #24]
    51ca:	b513      	push	{r0, r1, r4, lr}
    51cc:	0004      	movs	r4, r0
    51ce:	2b00      	cmp	r3, #0
    51d0:	d128      	bne.n	5224 <__sinit+0x5c>
    51d2:	6483      	str	r3, [r0, #72]	; 0x48
    51d4:	64c3      	str	r3, [r0, #76]	; 0x4c
    51d6:	6503      	str	r3, [r0, #80]	; 0x50
    51d8:	4b13      	ldr	r3, [pc, #76]	; (5228 <__sinit+0x60>)
    51da:	4a14      	ldr	r2, [pc, #80]	; (522c <__sinit+0x64>)
    51dc:	681b      	ldr	r3, [r3, #0]
    51de:	6282      	str	r2, [r0, #40]	; 0x28
    51e0:	9301      	str	r3, [sp, #4]
    51e2:	4298      	cmp	r0, r3
    51e4:	d101      	bne.n	51ea <__sinit+0x22>
    51e6:	2301      	movs	r3, #1
    51e8:	6183      	str	r3, [r0, #24]
    51ea:	0020      	movs	r0, r4
    51ec:	f000 f820 	bl	5230 <__sfp>
    51f0:	6060      	str	r0, [r4, #4]
    51f2:	0020      	movs	r0, r4
    51f4:	f000 f81c 	bl	5230 <__sfp>
    51f8:	60a0      	str	r0, [r4, #8]
    51fa:	0020      	movs	r0, r4
    51fc:	f000 f818 	bl	5230 <__sfp>
    5200:	2200      	movs	r2, #0
    5202:	60e0      	str	r0, [r4, #12]
    5204:	2104      	movs	r1, #4
    5206:	6860      	ldr	r0, [r4, #4]
    5208:	f7ff ffa4 	bl	5154 <std.isra.0>
    520c:	2201      	movs	r2, #1
    520e:	2109      	movs	r1, #9
    5210:	68a0      	ldr	r0, [r4, #8]
    5212:	f7ff ff9f 	bl	5154 <std.isra.0>
    5216:	2202      	movs	r2, #2
    5218:	2112      	movs	r1, #18
    521a:	68e0      	ldr	r0, [r4, #12]
    521c:	f7ff ff9a 	bl	5154 <std.isra.0>
    5220:	2301      	movs	r3, #1
    5222:	61a3      	str	r3, [r4, #24]
    5224:	bd13      	pop	{r0, r1, r4, pc}
    5226:	46c0      	nop			; (mov r8, r8)
    5228:	00008bf8 	.word	0x00008bf8
    522c:	00005145 	.word	0x00005145

00005230 <__sfp>:
    5230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5232:	4b1d      	ldr	r3, [pc, #116]	; (52a8 <__sfp+0x78>)
    5234:	0006      	movs	r6, r0
    5236:	681d      	ldr	r5, [r3, #0]
    5238:	69ab      	ldr	r3, [r5, #24]
    523a:	2b00      	cmp	r3, #0
    523c:	d102      	bne.n	5244 <__sfp+0x14>
    523e:	0028      	movs	r0, r5
    5240:	f7ff ffc2 	bl	51c8 <__sinit>
    5244:	3548      	adds	r5, #72	; 0x48
    5246:	68ac      	ldr	r4, [r5, #8]
    5248:	686b      	ldr	r3, [r5, #4]
    524a:	3b01      	subs	r3, #1
    524c:	d405      	bmi.n	525a <__sfp+0x2a>
    524e:	220c      	movs	r2, #12
    5250:	5ea7      	ldrsh	r7, [r4, r2]
    5252:	2f00      	cmp	r7, #0
    5254:	d010      	beq.n	5278 <__sfp+0x48>
    5256:	3468      	adds	r4, #104	; 0x68
    5258:	e7f7      	b.n	524a <__sfp+0x1a>
    525a:	682b      	ldr	r3, [r5, #0]
    525c:	2b00      	cmp	r3, #0
    525e:	d001      	beq.n	5264 <__sfp+0x34>
    5260:	682d      	ldr	r5, [r5, #0]
    5262:	e7f0      	b.n	5246 <__sfp+0x16>
    5264:	2104      	movs	r1, #4
    5266:	0030      	movs	r0, r6
    5268:	f7ff ff98 	bl	519c <__sfmoreglue>
    526c:	6028      	str	r0, [r5, #0]
    526e:	2800      	cmp	r0, #0
    5270:	d1f6      	bne.n	5260 <__sfp+0x30>
    5272:	230c      	movs	r3, #12
    5274:	6033      	str	r3, [r6, #0]
    5276:	e016      	b.n	52a6 <__sfp+0x76>
    5278:	2301      	movs	r3, #1
    527a:	0020      	movs	r0, r4
    527c:	425b      	negs	r3, r3
    527e:	81e3      	strh	r3, [r4, #14]
    5280:	3302      	adds	r3, #2
    5282:	81a3      	strh	r3, [r4, #12]
    5284:	6667      	str	r7, [r4, #100]	; 0x64
    5286:	6027      	str	r7, [r4, #0]
    5288:	60a7      	str	r7, [r4, #8]
    528a:	6067      	str	r7, [r4, #4]
    528c:	6127      	str	r7, [r4, #16]
    528e:	6167      	str	r7, [r4, #20]
    5290:	61a7      	str	r7, [r4, #24]
    5292:	305c      	adds	r0, #92	; 0x5c
    5294:	2208      	movs	r2, #8
    5296:	0039      	movs	r1, r7
    5298:	f7fe f9c1 	bl	361e <memset>
    529c:	0020      	movs	r0, r4
    529e:	6367      	str	r7, [r4, #52]	; 0x34
    52a0:	63a7      	str	r7, [r4, #56]	; 0x38
    52a2:	64a7      	str	r7, [r4, #72]	; 0x48
    52a4:	64e7      	str	r7, [r4, #76]	; 0x4c
    52a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    52a8:	00008bf8 	.word	0x00008bf8

000052ac <_fwalk_reent>:
    52ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    52ae:	0004      	movs	r4, r0
    52b0:	0007      	movs	r7, r0
    52b2:	2600      	movs	r6, #0
    52b4:	9101      	str	r1, [sp, #4]
    52b6:	3448      	adds	r4, #72	; 0x48
    52b8:	2c00      	cmp	r4, #0
    52ba:	d016      	beq.n	52ea <_fwalk_reent+0x3e>
    52bc:	6863      	ldr	r3, [r4, #4]
    52be:	68a5      	ldr	r5, [r4, #8]
    52c0:	9300      	str	r3, [sp, #0]
    52c2:	9b00      	ldr	r3, [sp, #0]
    52c4:	3b01      	subs	r3, #1
    52c6:	9300      	str	r3, [sp, #0]
    52c8:	d40d      	bmi.n	52e6 <_fwalk_reent+0x3a>
    52ca:	89ab      	ldrh	r3, [r5, #12]
    52cc:	2b01      	cmp	r3, #1
    52ce:	d908      	bls.n	52e2 <_fwalk_reent+0x36>
    52d0:	220e      	movs	r2, #14
    52d2:	5eab      	ldrsh	r3, [r5, r2]
    52d4:	3301      	adds	r3, #1
    52d6:	d004      	beq.n	52e2 <_fwalk_reent+0x36>
    52d8:	0029      	movs	r1, r5
    52da:	0038      	movs	r0, r7
    52dc:	9b01      	ldr	r3, [sp, #4]
    52de:	4798      	blx	r3
    52e0:	4306      	orrs	r6, r0
    52e2:	3568      	adds	r5, #104	; 0x68
    52e4:	e7ed      	b.n	52c2 <_fwalk_reent+0x16>
    52e6:	6824      	ldr	r4, [r4, #0]
    52e8:	e7e6      	b.n	52b8 <_fwalk_reent+0xc>
    52ea:	0030      	movs	r0, r6
    52ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000052f0 <_localeconv_r>:
    52f0:	4800      	ldr	r0, [pc, #0]	; (52f4 <_localeconv_r+0x4>)
    52f2:	4770      	bx	lr
    52f4:	20000070 	.word	0x20000070

000052f8 <__swhatbuf_r>:
    52f8:	b570      	push	{r4, r5, r6, lr}
    52fa:	000e      	movs	r6, r1
    52fc:	001d      	movs	r5, r3
    52fe:	230e      	movs	r3, #14
    5300:	5ec9      	ldrsh	r1, [r1, r3]
    5302:	b090      	sub	sp, #64	; 0x40
    5304:	0014      	movs	r4, r2
    5306:	2900      	cmp	r1, #0
    5308:	da06      	bge.n	5318 <__swhatbuf_r+0x20>
    530a:	2300      	movs	r3, #0
    530c:	602b      	str	r3, [r5, #0]
    530e:	89b3      	ldrh	r3, [r6, #12]
    5310:	061b      	lsls	r3, r3, #24
    5312:	d50f      	bpl.n	5334 <__swhatbuf_r+0x3c>
    5314:	2340      	movs	r3, #64	; 0x40
    5316:	e00f      	b.n	5338 <__swhatbuf_r+0x40>
    5318:	aa01      	add	r2, sp, #4
    531a:	f000 fdc3 	bl	5ea4 <_fstat_r>
    531e:	2800      	cmp	r0, #0
    5320:	dbf3      	blt.n	530a <__swhatbuf_r+0x12>
    5322:	23f0      	movs	r3, #240	; 0xf0
    5324:	9a02      	ldr	r2, [sp, #8]
    5326:	021b      	lsls	r3, r3, #8
    5328:	4013      	ands	r3, r2
    532a:	4a05      	ldr	r2, [pc, #20]	; (5340 <__swhatbuf_r+0x48>)
    532c:	189b      	adds	r3, r3, r2
    532e:	425a      	negs	r2, r3
    5330:	4153      	adcs	r3, r2
    5332:	602b      	str	r3, [r5, #0]
    5334:	2380      	movs	r3, #128	; 0x80
    5336:	00db      	lsls	r3, r3, #3
    5338:	2000      	movs	r0, #0
    533a:	6023      	str	r3, [r4, #0]
    533c:	b010      	add	sp, #64	; 0x40
    533e:	bd70      	pop	{r4, r5, r6, pc}
    5340:	ffffe000 	.word	0xffffe000

00005344 <__smakebuf_r>:
    5344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5346:	2602      	movs	r6, #2
    5348:	898b      	ldrh	r3, [r1, #12]
    534a:	0005      	movs	r5, r0
    534c:	000c      	movs	r4, r1
    534e:	4233      	tst	r3, r6
    5350:	d110      	bne.n	5374 <__smakebuf_r+0x30>
    5352:	ab01      	add	r3, sp, #4
    5354:	466a      	mov	r2, sp
    5356:	f7ff ffcf 	bl	52f8 <__swhatbuf_r>
    535a:	9900      	ldr	r1, [sp, #0]
    535c:	0007      	movs	r7, r0
    535e:	0028      	movs	r0, r5
    5360:	f000 fb82 	bl	5a68 <_malloc_r>
    5364:	2800      	cmp	r0, #0
    5366:	d10c      	bne.n	5382 <__smakebuf_r+0x3e>
    5368:	220c      	movs	r2, #12
    536a:	5ea3      	ldrsh	r3, [r4, r2]
    536c:	059a      	lsls	r2, r3, #22
    536e:	d423      	bmi.n	53b8 <__smakebuf_r+0x74>
    5370:	4333      	orrs	r3, r6
    5372:	81a3      	strh	r3, [r4, #12]
    5374:	0023      	movs	r3, r4
    5376:	3347      	adds	r3, #71	; 0x47
    5378:	6023      	str	r3, [r4, #0]
    537a:	6123      	str	r3, [r4, #16]
    537c:	2301      	movs	r3, #1
    537e:	6163      	str	r3, [r4, #20]
    5380:	e01a      	b.n	53b8 <__smakebuf_r+0x74>
    5382:	2280      	movs	r2, #128	; 0x80
    5384:	4b0d      	ldr	r3, [pc, #52]	; (53bc <__smakebuf_r+0x78>)
    5386:	62ab      	str	r3, [r5, #40]	; 0x28
    5388:	89a3      	ldrh	r3, [r4, #12]
    538a:	6020      	str	r0, [r4, #0]
    538c:	4313      	orrs	r3, r2
    538e:	81a3      	strh	r3, [r4, #12]
    5390:	9b00      	ldr	r3, [sp, #0]
    5392:	6120      	str	r0, [r4, #16]
    5394:	6163      	str	r3, [r4, #20]
    5396:	9b01      	ldr	r3, [sp, #4]
    5398:	2b00      	cmp	r3, #0
    539a:	d00a      	beq.n	53b2 <__smakebuf_r+0x6e>
    539c:	230e      	movs	r3, #14
    539e:	5ee1      	ldrsh	r1, [r4, r3]
    53a0:	0028      	movs	r0, r5
    53a2:	f000 fd91 	bl	5ec8 <_isatty_r>
    53a6:	2800      	cmp	r0, #0
    53a8:	d003      	beq.n	53b2 <__smakebuf_r+0x6e>
    53aa:	2201      	movs	r2, #1
    53ac:	89a3      	ldrh	r3, [r4, #12]
    53ae:	4313      	orrs	r3, r2
    53b0:	81a3      	strh	r3, [r4, #12]
    53b2:	89a3      	ldrh	r3, [r4, #12]
    53b4:	431f      	orrs	r7, r3
    53b6:	81a7      	strh	r7, [r4, #12]
    53b8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    53ba:	46c0      	nop			; (mov r8, r8)
    53bc:	00005145 	.word	0x00005145

000053c0 <malloc>:
    53c0:	b510      	push	{r4, lr}
    53c2:	4b03      	ldr	r3, [pc, #12]	; (53d0 <malloc+0x10>)
    53c4:	0001      	movs	r1, r0
    53c6:	6818      	ldr	r0, [r3, #0]
    53c8:	f000 fb4e 	bl	5a68 <_malloc_r>
    53cc:	bd10      	pop	{r4, pc}
    53ce:	46c0      	nop			; (mov r8, r8)
    53d0:	2000006c 	.word	0x2000006c

000053d4 <memchr>:
    53d4:	b2c9      	uxtb	r1, r1
    53d6:	1882      	adds	r2, r0, r2
    53d8:	4290      	cmp	r0, r2
    53da:	d004      	beq.n	53e6 <memchr+0x12>
    53dc:	7803      	ldrb	r3, [r0, #0]
    53de:	428b      	cmp	r3, r1
    53e0:	d002      	beq.n	53e8 <memchr+0x14>
    53e2:	3001      	adds	r0, #1
    53e4:	e7f8      	b.n	53d8 <memchr+0x4>
    53e6:	2000      	movs	r0, #0
    53e8:	4770      	bx	lr

000053ea <_Balloc>:
    53ea:	b570      	push	{r4, r5, r6, lr}
    53ec:	6a46      	ldr	r6, [r0, #36]	; 0x24
    53ee:	0004      	movs	r4, r0
    53f0:	000d      	movs	r5, r1
    53f2:	2e00      	cmp	r6, #0
    53f4:	d107      	bne.n	5406 <_Balloc+0x1c>
    53f6:	2010      	movs	r0, #16
    53f8:	f7ff ffe2 	bl	53c0 <malloc>
    53fc:	6260      	str	r0, [r4, #36]	; 0x24
    53fe:	6046      	str	r6, [r0, #4]
    5400:	6086      	str	r6, [r0, #8]
    5402:	6006      	str	r6, [r0, #0]
    5404:	60c6      	str	r6, [r0, #12]
    5406:	6a66      	ldr	r6, [r4, #36]	; 0x24
    5408:	68f3      	ldr	r3, [r6, #12]
    540a:	2b00      	cmp	r3, #0
    540c:	d009      	beq.n	5422 <_Balloc+0x38>
    540e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5410:	00aa      	lsls	r2, r5, #2
    5412:	68db      	ldr	r3, [r3, #12]
    5414:	189b      	adds	r3, r3, r2
    5416:	6818      	ldr	r0, [r3, #0]
    5418:	2800      	cmp	r0, #0
    541a:	d00e      	beq.n	543a <_Balloc+0x50>
    541c:	6802      	ldr	r2, [r0, #0]
    541e:	601a      	str	r2, [r3, #0]
    5420:	e017      	b.n	5452 <_Balloc+0x68>
    5422:	2221      	movs	r2, #33	; 0x21
    5424:	2104      	movs	r1, #4
    5426:	0020      	movs	r0, r4
    5428:	f000 faca 	bl	59c0 <_calloc_r>
    542c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    542e:	60f0      	str	r0, [r6, #12]
    5430:	68db      	ldr	r3, [r3, #12]
    5432:	2b00      	cmp	r3, #0
    5434:	d1eb      	bne.n	540e <_Balloc+0x24>
    5436:	2000      	movs	r0, #0
    5438:	e00e      	b.n	5458 <_Balloc+0x6e>
    543a:	2101      	movs	r1, #1
    543c:	000e      	movs	r6, r1
    543e:	40ae      	lsls	r6, r5
    5440:	1d72      	adds	r2, r6, #5
    5442:	0092      	lsls	r2, r2, #2
    5444:	0020      	movs	r0, r4
    5446:	f000 fabb 	bl	59c0 <_calloc_r>
    544a:	2800      	cmp	r0, #0
    544c:	d0f3      	beq.n	5436 <_Balloc+0x4c>
    544e:	6045      	str	r5, [r0, #4]
    5450:	6086      	str	r6, [r0, #8]
    5452:	2300      	movs	r3, #0
    5454:	6103      	str	r3, [r0, #16]
    5456:	60c3      	str	r3, [r0, #12]
    5458:	bd70      	pop	{r4, r5, r6, pc}

0000545a <_Bfree>:
    545a:	b570      	push	{r4, r5, r6, lr}
    545c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    545e:	0006      	movs	r6, r0
    5460:	000c      	movs	r4, r1
    5462:	2d00      	cmp	r5, #0
    5464:	d107      	bne.n	5476 <_Bfree+0x1c>
    5466:	2010      	movs	r0, #16
    5468:	f7ff ffaa 	bl	53c0 <malloc>
    546c:	6270      	str	r0, [r6, #36]	; 0x24
    546e:	6045      	str	r5, [r0, #4]
    5470:	6085      	str	r5, [r0, #8]
    5472:	6005      	str	r5, [r0, #0]
    5474:	60c5      	str	r5, [r0, #12]
    5476:	2c00      	cmp	r4, #0
    5478:	d007      	beq.n	548a <_Bfree+0x30>
    547a:	6a72      	ldr	r2, [r6, #36]	; 0x24
    547c:	6863      	ldr	r3, [r4, #4]
    547e:	68d2      	ldr	r2, [r2, #12]
    5480:	009b      	lsls	r3, r3, #2
    5482:	18d3      	adds	r3, r2, r3
    5484:	681a      	ldr	r2, [r3, #0]
    5486:	6022      	str	r2, [r4, #0]
    5488:	601c      	str	r4, [r3, #0]
    548a:	bd70      	pop	{r4, r5, r6, pc}

0000548c <__multadd>:
    548c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    548e:	0007      	movs	r7, r0
    5490:	0008      	movs	r0, r1
    5492:	000c      	movs	r4, r1
    5494:	690d      	ldr	r5, [r1, #16]
    5496:	001e      	movs	r6, r3
    5498:	2100      	movs	r1, #0
    549a:	9201      	str	r2, [sp, #4]
    549c:	3014      	adds	r0, #20
    549e:	9a01      	ldr	r2, [sp, #4]
    54a0:	8803      	ldrh	r3, [r0, #0]
    54a2:	3101      	adds	r1, #1
    54a4:	4353      	muls	r3, r2
    54a6:	199b      	adds	r3, r3, r6
    54a8:	6806      	ldr	r6, [r0, #0]
    54aa:	0c36      	lsrs	r6, r6, #16
    54ac:	4356      	muls	r6, r2
    54ae:	0c1a      	lsrs	r2, r3, #16
    54b0:	4694      	mov	ip, r2
    54b2:	44b4      	add	ip, r6
    54b4:	4662      	mov	r2, ip
    54b6:	0c16      	lsrs	r6, r2, #16
    54b8:	0412      	lsls	r2, r2, #16
    54ba:	4694      	mov	ip, r2
    54bc:	b29b      	uxth	r3, r3
    54be:	4463      	add	r3, ip
    54c0:	c008      	stmia	r0!, {r3}
    54c2:	428d      	cmp	r5, r1
    54c4:	dceb      	bgt.n	549e <__multadd+0x12>
    54c6:	2e00      	cmp	r6, #0
    54c8:	d01b      	beq.n	5502 <__multadd+0x76>
    54ca:	68a3      	ldr	r3, [r4, #8]
    54cc:	429d      	cmp	r5, r3
    54ce:	db12      	blt.n	54f6 <__multadd+0x6a>
    54d0:	6863      	ldr	r3, [r4, #4]
    54d2:	0038      	movs	r0, r7
    54d4:	1c59      	adds	r1, r3, #1
    54d6:	f7ff ff88 	bl	53ea <_Balloc>
    54da:	0021      	movs	r1, r4
    54dc:	6923      	ldr	r3, [r4, #16]
    54de:	9001      	str	r0, [sp, #4]
    54e0:	1c9a      	adds	r2, r3, #2
    54e2:	0092      	lsls	r2, r2, #2
    54e4:	310c      	adds	r1, #12
    54e6:	300c      	adds	r0, #12
    54e8:	f7fe f890 	bl	360c <memcpy>
    54ec:	0021      	movs	r1, r4
    54ee:	0038      	movs	r0, r7
    54f0:	f7ff ffb3 	bl	545a <_Bfree>
    54f4:	9c01      	ldr	r4, [sp, #4]
    54f6:	1d2b      	adds	r3, r5, #4
    54f8:	009b      	lsls	r3, r3, #2
    54fa:	18e3      	adds	r3, r4, r3
    54fc:	3501      	adds	r5, #1
    54fe:	605e      	str	r6, [r3, #4]
    5500:	6125      	str	r5, [r4, #16]
    5502:	0020      	movs	r0, r4
    5504:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00005506 <__hi0bits>:
    5506:	2200      	movs	r2, #0
    5508:	0003      	movs	r3, r0
    550a:	0c01      	lsrs	r1, r0, #16
    550c:	4291      	cmp	r1, r2
    550e:	d101      	bne.n	5514 <__hi0bits+0xe>
    5510:	0403      	lsls	r3, r0, #16
    5512:	3210      	adds	r2, #16
    5514:	0e19      	lsrs	r1, r3, #24
    5516:	d101      	bne.n	551c <__hi0bits+0x16>
    5518:	3208      	adds	r2, #8
    551a:	021b      	lsls	r3, r3, #8
    551c:	0f19      	lsrs	r1, r3, #28
    551e:	d101      	bne.n	5524 <__hi0bits+0x1e>
    5520:	3204      	adds	r2, #4
    5522:	011b      	lsls	r3, r3, #4
    5524:	0f99      	lsrs	r1, r3, #30
    5526:	d101      	bne.n	552c <__hi0bits+0x26>
    5528:	3202      	adds	r2, #2
    552a:	009b      	lsls	r3, r3, #2
    552c:	0010      	movs	r0, r2
    552e:	2b00      	cmp	r3, #0
    5530:	db03      	blt.n	553a <__hi0bits+0x34>
    5532:	2020      	movs	r0, #32
    5534:	005b      	lsls	r3, r3, #1
    5536:	d500      	bpl.n	553a <__hi0bits+0x34>
    5538:	1c50      	adds	r0, r2, #1
    553a:	4770      	bx	lr

0000553c <__lo0bits>:
    553c:	2207      	movs	r2, #7
    553e:	6803      	ldr	r3, [r0, #0]
    5540:	b510      	push	{r4, lr}
    5542:	0001      	movs	r1, r0
    5544:	401a      	ands	r2, r3
    5546:	d00c      	beq.n	5562 <__lo0bits+0x26>
    5548:	2401      	movs	r4, #1
    554a:	2000      	movs	r0, #0
    554c:	4223      	tst	r3, r4
    554e:	d123      	bne.n	5598 <__lo0bits+0x5c>
    5550:	2202      	movs	r2, #2
    5552:	4213      	tst	r3, r2
    5554:	d003      	beq.n	555e <__lo0bits+0x22>
    5556:	40e3      	lsrs	r3, r4
    5558:	0020      	movs	r0, r4
    555a:	600b      	str	r3, [r1, #0]
    555c:	e01c      	b.n	5598 <__lo0bits+0x5c>
    555e:	089b      	lsrs	r3, r3, #2
    5560:	e018      	b.n	5594 <__lo0bits+0x58>
    5562:	b298      	uxth	r0, r3
    5564:	2800      	cmp	r0, #0
    5566:	d101      	bne.n	556c <__lo0bits+0x30>
    5568:	2210      	movs	r2, #16
    556a:	0c1b      	lsrs	r3, r3, #16
    556c:	b2d8      	uxtb	r0, r3
    556e:	2800      	cmp	r0, #0
    5570:	d101      	bne.n	5576 <__lo0bits+0x3a>
    5572:	3208      	adds	r2, #8
    5574:	0a1b      	lsrs	r3, r3, #8
    5576:	0718      	lsls	r0, r3, #28
    5578:	d101      	bne.n	557e <__lo0bits+0x42>
    557a:	3204      	adds	r2, #4
    557c:	091b      	lsrs	r3, r3, #4
    557e:	0798      	lsls	r0, r3, #30
    5580:	d101      	bne.n	5586 <__lo0bits+0x4a>
    5582:	3202      	adds	r2, #2
    5584:	089b      	lsrs	r3, r3, #2
    5586:	07d8      	lsls	r0, r3, #31
    5588:	d404      	bmi.n	5594 <__lo0bits+0x58>
    558a:	085b      	lsrs	r3, r3, #1
    558c:	2020      	movs	r0, #32
    558e:	2b00      	cmp	r3, #0
    5590:	d002      	beq.n	5598 <__lo0bits+0x5c>
    5592:	3201      	adds	r2, #1
    5594:	0010      	movs	r0, r2
    5596:	600b      	str	r3, [r1, #0]
    5598:	bd10      	pop	{r4, pc}

0000559a <__i2b>:
    559a:	b510      	push	{r4, lr}
    559c:	000c      	movs	r4, r1
    559e:	2101      	movs	r1, #1
    55a0:	f7ff ff23 	bl	53ea <_Balloc>
    55a4:	2301      	movs	r3, #1
    55a6:	6144      	str	r4, [r0, #20]
    55a8:	6103      	str	r3, [r0, #16]
    55aa:	bd10      	pop	{r4, pc}

000055ac <__multiply>:
    55ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    55ae:	690b      	ldr	r3, [r1, #16]
    55b0:	0014      	movs	r4, r2
    55b2:	6912      	ldr	r2, [r2, #16]
    55b4:	b089      	sub	sp, #36	; 0x24
    55b6:	000d      	movs	r5, r1
    55b8:	4293      	cmp	r3, r2
    55ba:	da01      	bge.n	55c0 <__multiply+0x14>
    55bc:	0025      	movs	r5, r4
    55be:	000c      	movs	r4, r1
    55c0:	692f      	ldr	r7, [r5, #16]
    55c2:	6926      	ldr	r6, [r4, #16]
    55c4:	68aa      	ldr	r2, [r5, #8]
    55c6:	19bb      	adds	r3, r7, r6
    55c8:	6869      	ldr	r1, [r5, #4]
    55ca:	9301      	str	r3, [sp, #4]
    55cc:	4293      	cmp	r3, r2
    55ce:	dd00      	ble.n	55d2 <__multiply+0x26>
    55d0:	3101      	adds	r1, #1
    55d2:	f7ff ff0a 	bl	53ea <_Balloc>
    55d6:	0002      	movs	r2, r0
    55d8:	19bb      	adds	r3, r7, r6
    55da:	3214      	adds	r2, #20
    55dc:	009b      	lsls	r3, r3, #2
    55de:	18d3      	adds	r3, r2, r3
    55e0:	469c      	mov	ip, r3
    55e2:	2100      	movs	r1, #0
    55e4:	0013      	movs	r3, r2
    55e6:	9002      	str	r0, [sp, #8]
    55e8:	4563      	cmp	r3, ip
    55ea:	d201      	bcs.n	55f0 <__multiply+0x44>
    55ec:	c302      	stmia	r3!, {r1}
    55ee:	e7fb      	b.n	55e8 <__multiply+0x3c>
    55f0:	3514      	adds	r5, #20
    55f2:	00bf      	lsls	r7, r7, #2
    55f4:	19eb      	adds	r3, r5, r7
    55f6:	3414      	adds	r4, #20
    55f8:	00b6      	lsls	r6, r6, #2
    55fa:	9305      	str	r3, [sp, #20]
    55fc:	19a3      	adds	r3, r4, r6
    55fe:	9503      	str	r5, [sp, #12]
    5600:	9307      	str	r3, [sp, #28]
    5602:	9b07      	ldr	r3, [sp, #28]
    5604:	429c      	cmp	r4, r3
    5606:	d251      	bcs.n	56ac <__multiply+0x100>
    5608:	8820      	ldrh	r0, [r4, #0]
    560a:	2800      	cmp	r0, #0
    560c:	d01e      	beq.n	564c <__multiply+0xa0>
    560e:	0015      	movs	r5, r2
    5610:	2600      	movs	r6, #0
    5612:	9f03      	ldr	r7, [sp, #12]
    5614:	cf08      	ldmia	r7!, {r3}
    5616:	9506      	str	r5, [sp, #24]
    5618:	9304      	str	r3, [sp, #16]
    561a:	466b      	mov	r3, sp
    561c:	8a1b      	ldrh	r3, [r3, #16]
    561e:	4343      	muls	r3, r0
    5620:	0019      	movs	r1, r3
    5622:	882b      	ldrh	r3, [r5, #0]
    5624:	18cb      	adds	r3, r1, r3
    5626:	9904      	ldr	r1, [sp, #16]
    5628:	199b      	adds	r3, r3, r6
    562a:	0c09      	lsrs	r1, r1, #16
    562c:	4341      	muls	r1, r0
    562e:	682e      	ldr	r6, [r5, #0]
    5630:	0c36      	lsrs	r6, r6, #16
    5632:	1989      	adds	r1, r1, r6
    5634:	0c1e      	lsrs	r6, r3, #16
    5636:	1989      	adds	r1, r1, r6
    5638:	0c0e      	lsrs	r6, r1, #16
    563a:	b29b      	uxth	r3, r3
    563c:	0409      	lsls	r1, r1, #16
    563e:	430b      	orrs	r3, r1
    5640:	c508      	stmia	r5!, {r3}
    5642:	9b05      	ldr	r3, [sp, #20]
    5644:	42bb      	cmp	r3, r7
    5646:	d8e5      	bhi.n	5614 <__multiply+0x68>
    5648:	9b06      	ldr	r3, [sp, #24]
    564a:	605e      	str	r6, [r3, #4]
    564c:	6823      	ldr	r3, [r4, #0]
    564e:	0c1d      	lsrs	r5, r3, #16
    5650:	d01f      	beq.n	5692 <__multiply+0xe6>
    5652:	2100      	movs	r1, #0
    5654:	0010      	movs	r0, r2
    5656:	6813      	ldr	r3, [r2, #0]
    5658:	9f03      	ldr	r7, [sp, #12]
    565a:	9104      	str	r1, [sp, #16]
    565c:	883e      	ldrh	r6, [r7, #0]
    565e:	6801      	ldr	r1, [r0, #0]
    5660:	436e      	muls	r6, r5
    5662:	0c09      	lsrs	r1, r1, #16
    5664:	1871      	adds	r1, r6, r1
    5666:	9e04      	ldr	r6, [sp, #16]
    5668:	b29b      	uxth	r3, r3
    566a:	1989      	adds	r1, r1, r6
    566c:	040e      	lsls	r6, r1, #16
    566e:	4333      	orrs	r3, r6
    5670:	6003      	str	r3, [r0, #0]
    5672:	cf08      	ldmia	r7!, {r3}
    5674:	8886      	ldrh	r6, [r0, #4]
    5676:	0c1b      	lsrs	r3, r3, #16
    5678:	436b      	muls	r3, r5
    567a:	0c09      	lsrs	r1, r1, #16
    567c:	199b      	adds	r3, r3, r6
    567e:	185b      	adds	r3, r3, r1
    5680:	0c19      	lsrs	r1, r3, #16
    5682:	9104      	str	r1, [sp, #16]
    5684:	9905      	ldr	r1, [sp, #20]
    5686:	9006      	str	r0, [sp, #24]
    5688:	3004      	adds	r0, #4
    568a:	42b9      	cmp	r1, r7
    568c:	d8e6      	bhi.n	565c <__multiply+0xb0>
    568e:	9906      	ldr	r1, [sp, #24]
    5690:	604b      	str	r3, [r1, #4]
    5692:	3404      	adds	r4, #4
    5694:	3204      	adds	r2, #4
    5696:	e7b4      	b.n	5602 <__multiply+0x56>
    5698:	2304      	movs	r3, #4
    569a:	425b      	negs	r3, r3
    569c:	449c      	add	ip, r3
    569e:	4663      	mov	r3, ip
    56a0:	681b      	ldr	r3, [r3, #0]
    56a2:	2b00      	cmp	r3, #0
    56a4:	d105      	bne.n	56b2 <__multiply+0x106>
    56a6:	9b01      	ldr	r3, [sp, #4]
    56a8:	3b01      	subs	r3, #1
    56aa:	9301      	str	r3, [sp, #4]
    56ac:	9b01      	ldr	r3, [sp, #4]
    56ae:	2b00      	cmp	r3, #0
    56b0:	dcf2      	bgt.n	5698 <__multiply+0xec>
    56b2:	9b02      	ldr	r3, [sp, #8]
    56b4:	9a01      	ldr	r2, [sp, #4]
    56b6:	0018      	movs	r0, r3
    56b8:	611a      	str	r2, [r3, #16]
    56ba:	b009      	add	sp, #36	; 0x24
    56bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000056c0 <__pow5mult>:
    56c0:	2303      	movs	r3, #3
    56c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    56c4:	4013      	ands	r3, r2
    56c6:	0005      	movs	r5, r0
    56c8:	000e      	movs	r6, r1
    56ca:	0014      	movs	r4, r2
    56cc:	2b00      	cmp	r3, #0
    56ce:	d008      	beq.n	56e2 <__pow5mult+0x22>
    56d0:	4923      	ldr	r1, [pc, #140]	; (5760 <__pow5mult+0xa0>)
    56d2:	3b01      	subs	r3, #1
    56d4:	009a      	lsls	r2, r3, #2
    56d6:	5852      	ldr	r2, [r2, r1]
    56d8:	2300      	movs	r3, #0
    56da:	0031      	movs	r1, r6
    56dc:	f7ff fed6 	bl	548c <__multadd>
    56e0:	0006      	movs	r6, r0
    56e2:	10a3      	asrs	r3, r4, #2
    56e4:	9301      	str	r3, [sp, #4]
    56e6:	d038      	beq.n	575a <__pow5mult+0x9a>
    56e8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    56ea:	2c00      	cmp	r4, #0
    56ec:	d107      	bne.n	56fe <__pow5mult+0x3e>
    56ee:	2010      	movs	r0, #16
    56f0:	f7ff fe66 	bl	53c0 <malloc>
    56f4:	6268      	str	r0, [r5, #36]	; 0x24
    56f6:	6044      	str	r4, [r0, #4]
    56f8:	6084      	str	r4, [r0, #8]
    56fa:	6004      	str	r4, [r0, #0]
    56fc:	60c4      	str	r4, [r0, #12]
    56fe:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    5700:	68bc      	ldr	r4, [r7, #8]
    5702:	2c00      	cmp	r4, #0
    5704:	d110      	bne.n	5728 <__pow5mult+0x68>
    5706:	4917      	ldr	r1, [pc, #92]	; (5764 <__pow5mult+0xa4>)
    5708:	0028      	movs	r0, r5
    570a:	f7ff ff46 	bl	559a <__i2b>
    570e:	2300      	movs	r3, #0
    5710:	60b8      	str	r0, [r7, #8]
    5712:	0004      	movs	r4, r0
    5714:	6003      	str	r3, [r0, #0]
    5716:	e007      	b.n	5728 <__pow5mult+0x68>
    5718:	9b01      	ldr	r3, [sp, #4]
    571a:	105b      	asrs	r3, r3, #1
    571c:	9301      	str	r3, [sp, #4]
    571e:	d01c      	beq.n	575a <__pow5mult+0x9a>
    5720:	6820      	ldr	r0, [r4, #0]
    5722:	2800      	cmp	r0, #0
    5724:	d010      	beq.n	5748 <__pow5mult+0x88>
    5726:	0004      	movs	r4, r0
    5728:	2201      	movs	r2, #1
    572a:	9b01      	ldr	r3, [sp, #4]
    572c:	4213      	tst	r3, r2
    572e:	d0f3      	beq.n	5718 <__pow5mult+0x58>
    5730:	0031      	movs	r1, r6
    5732:	0022      	movs	r2, r4
    5734:	0028      	movs	r0, r5
    5736:	f7ff ff39 	bl	55ac <__multiply>
    573a:	0007      	movs	r7, r0
    573c:	0031      	movs	r1, r6
    573e:	0028      	movs	r0, r5
    5740:	f7ff fe8b 	bl	545a <_Bfree>
    5744:	003e      	movs	r6, r7
    5746:	e7e7      	b.n	5718 <__pow5mult+0x58>
    5748:	0022      	movs	r2, r4
    574a:	0021      	movs	r1, r4
    574c:	0028      	movs	r0, r5
    574e:	f7ff ff2d 	bl	55ac <__multiply>
    5752:	2300      	movs	r3, #0
    5754:	6020      	str	r0, [r4, #0]
    5756:	6003      	str	r3, [r0, #0]
    5758:	e7e5      	b.n	5726 <__pow5mult+0x66>
    575a:	0030      	movs	r0, r6
    575c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    575e:	46c0      	nop			; (mov r8, r8)
    5760:	00008d98 	.word	0x00008d98
    5764:	00000271 	.word	0x00000271

00005768 <__lshift>:
    5768:	b5f0      	push	{r4, r5, r6, r7, lr}
    576a:	000c      	movs	r4, r1
    576c:	0017      	movs	r7, r2
    576e:	6923      	ldr	r3, [r4, #16]
    5770:	1155      	asrs	r5, r2, #5
    5772:	b085      	sub	sp, #20
    5774:	18eb      	adds	r3, r5, r3
    5776:	9301      	str	r3, [sp, #4]
    5778:	3301      	adds	r3, #1
    577a:	9300      	str	r3, [sp, #0]
    577c:	6849      	ldr	r1, [r1, #4]
    577e:	68a3      	ldr	r3, [r4, #8]
    5780:	9002      	str	r0, [sp, #8]
    5782:	9a00      	ldr	r2, [sp, #0]
    5784:	4293      	cmp	r3, r2
    5786:	da02      	bge.n	578e <__lshift+0x26>
    5788:	3101      	adds	r1, #1
    578a:	005b      	lsls	r3, r3, #1
    578c:	e7f9      	b.n	5782 <__lshift+0x1a>
    578e:	9802      	ldr	r0, [sp, #8]
    5790:	f7ff fe2b 	bl	53ea <_Balloc>
    5794:	2300      	movs	r3, #0
    5796:	0002      	movs	r2, r0
    5798:	0006      	movs	r6, r0
    579a:	0019      	movs	r1, r3
    579c:	3214      	adds	r2, #20
    579e:	42ab      	cmp	r3, r5
    57a0:	da03      	bge.n	57aa <__lshift+0x42>
    57a2:	0098      	lsls	r0, r3, #2
    57a4:	5011      	str	r1, [r2, r0]
    57a6:	3301      	adds	r3, #1
    57a8:	e7f9      	b.n	579e <__lshift+0x36>
    57aa:	43eb      	mvns	r3, r5
    57ac:	17db      	asrs	r3, r3, #31
    57ae:	401d      	ands	r5, r3
    57b0:	0023      	movs	r3, r4
    57b2:	00ad      	lsls	r5, r5, #2
    57b4:	1955      	adds	r5, r2, r5
    57b6:	6922      	ldr	r2, [r4, #16]
    57b8:	3314      	adds	r3, #20
    57ba:	0092      	lsls	r2, r2, #2
    57bc:	189a      	adds	r2, r3, r2
    57be:	4694      	mov	ip, r2
    57c0:	221f      	movs	r2, #31
    57c2:	4017      	ands	r7, r2
    57c4:	d014      	beq.n	57f0 <__lshift+0x88>
    57c6:	3201      	adds	r2, #1
    57c8:	1bd2      	subs	r2, r2, r7
    57ca:	9203      	str	r2, [sp, #12]
    57cc:	2200      	movs	r2, #0
    57ce:	6819      	ldr	r1, [r3, #0]
    57d0:	0028      	movs	r0, r5
    57d2:	40b9      	lsls	r1, r7
    57d4:	430a      	orrs	r2, r1
    57d6:	c504      	stmia	r5!, {r2}
    57d8:	cb04      	ldmia	r3!, {r2}
    57da:	9903      	ldr	r1, [sp, #12]
    57dc:	40ca      	lsrs	r2, r1
    57de:	459c      	cmp	ip, r3
    57e0:	d8f5      	bhi.n	57ce <__lshift+0x66>
    57e2:	6042      	str	r2, [r0, #4]
    57e4:	2a00      	cmp	r2, #0
    57e6:	d007      	beq.n	57f8 <__lshift+0x90>
    57e8:	9b01      	ldr	r3, [sp, #4]
    57ea:	3302      	adds	r3, #2
    57ec:	9300      	str	r3, [sp, #0]
    57ee:	e003      	b.n	57f8 <__lshift+0x90>
    57f0:	cb04      	ldmia	r3!, {r2}
    57f2:	c504      	stmia	r5!, {r2}
    57f4:	459c      	cmp	ip, r3
    57f6:	d8fb      	bhi.n	57f0 <__lshift+0x88>
    57f8:	9b00      	ldr	r3, [sp, #0]
    57fa:	9802      	ldr	r0, [sp, #8]
    57fc:	3b01      	subs	r3, #1
    57fe:	6133      	str	r3, [r6, #16]
    5800:	0021      	movs	r1, r4
    5802:	f7ff fe2a 	bl	545a <_Bfree>
    5806:	0030      	movs	r0, r6
    5808:	b005      	add	sp, #20
    580a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000580c <__mcmp>:
    580c:	6903      	ldr	r3, [r0, #16]
    580e:	690a      	ldr	r2, [r1, #16]
    5810:	b510      	push	{r4, lr}
    5812:	1a9b      	subs	r3, r3, r2
    5814:	0004      	movs	r4, r0
    5816:	1e18      	subs	r0, r3, #0
    5818:	d112      	bne.n	5840 <__mcmp+0x34>
    581a:	0093      	lsls	r3, r2, #2
    581c:	3414      	adds	r4, #20
    581e:	3114      	adds	r1, #20
    5820:	18e2      	adds	r2, r4, r3
    5822:	18c9      	adds	r1, r1, r3
    5824:	3a04      	subs	r2, #4
    5826:	3904      	subs	r1, #4
    5828:	6813      	ldr	r3, [r2, #0]
    582a:	6808      	ldr	r0, [r1, #0]
    582c:	4283      	cmp	r3, r0
    582e:	d004      	beq.n	583a <__mcmp+0x2e>
    5830:	4283      	cmp	r3, r0
    5832:	419b      	sbcs	r3, r3
    5834:	2001      	movs	r0, #1
    5836:	4318      	orrs	r0, r3
    5838:	e002      	b.n	5840 <__mcmp+0x34>
    583a:	4294      	cmp	r4, r2
    583c:	d3f2      	bcc.n	5824 <__mcmp+0x18>
    583e:	2000      	movs	r0, #0
    5840:	bd10      	pop	{r4, pc}

00005842 <__mdiff>:
    5842:	b5f0      	push	{r4, r5, r6, r7, lr}
    5844:	000c      	movs	r4, r1
    5846:	b085      	sub	sp, #20
    5848:	0007      	movs	r7, r0
    584a:	0011      	movs	r1, r2
    584c:	0020      	movs	r0, r4
    584e:	0015      	movs	r5, r2
    5850:	f7ff ffdc 	bl	580c <__mcmp>
    5854:	1e06      	subs	r6, r0, #0
    5856:	d107      	bne.n	5868 <__mdiff+0x26>
    5858:	0001      	movs	r1, r0
    585a:	0038      	movs	r0, r7
    585c:	f7ff fdc5 	bl	53ea <_Balloc>
    5860:	2301      	movs	r3, #1
    5862:	6146      	str	r6, [r0, #20]
    5864:	6103      	str	r3, [r0, #16]
    5866:	e055      	b.n	5914 <__mdiff+0xd2>
    5868:	2300      	movs	r3, #0
    586a:	9301      	str	r3, [sp, #4]
    586c:	4298      	cmp	r0, r3
    586e:	da04      	bge.n	587a <__mdiff+0x38>
    5870:	0023      	movs	r3, r4
    5872:	002c      	movs	r4, r5
    5874:	001d      	movs	r5, r3
    5876:	2301      	movs	r3, #1
    5878:	9301      	str	r3, [sp, #4]
    587a:	6861      	ldr	r1, [r4, #4]
    587c:	0038      	movs	r0, r7
    587e:	f7ff fdb4 	bl	53ea <_Balloc>
    5882:	9b01      	ldr	r3, [sp, #4]
    5884:	6926      	ldr	r6, [r4, #16]
    5886:	002f      	movs	r7, r5
    5888:	60c3      	str	r3, [r0, #12]
    588a:	3414      	adds	r4, #20
    588c:	00b3      	lsls	r3, r6, #2
    588e:	18e3      	adds	r3, r4, r3
    5890:	0002      	movs	r2, r0
    5892:	9302      	str	r3, [sp, #8]
    5894:	692b      	ldr	r3, [r5, #16]
    5896:	2500      	movs	r5, #0
    5898:	3714      	adds	r7, #20
    589a:	009b      	lsls	r3, r3, #2
    589c:	18fb      	adds	r3, r7, r3
    589e:	9303      	str	r3, [sp, #12]
    58a0:	3214      	adds	r2, #20
    58a2:	cc08      	ldmia	r4!, {r3}
    58a4:	4669      	mov	r1, sp
    58a6:	469c      	mov	ip, r3
    58a8:	cf08      	ldmia	r7!, {r3}
    58aa:	3204      	adds	r2, #4
    58ac:	9300      	str	r3, [sp, #0]
    58ae:	4663      	mov	r3, ip
    58b0:	808b      	strh	r3, [r1, #4]
    58b2:	888b      	ldrh	r3, [r1, #4]
    58b4:	195d      	adds	r5, r3, r5
    58b6:	9b00      	ldr	r3, [sp, #0]
    58b8:	b29b      	uxth	r3, r3
    58ba:	1aeb      	subs	r3, r5, r3
    58bc:	4665      	mov	r5, ip
    58be:	9301      	str	r3, [sp, #4]
    58c0:	9b00      	ldr	r3, [sp, #0]
    58c2:	0c2d      	lsrs	r5, r5, #16
    58c4:	0c19      	lsrs	r1, r3, #16
    58c6:	9b01      	ldr	r3, [sp, #4]
    58c8:	1a69      	subs	r1, r5, r1
    58ca:	141d      	asrs	r5, r3, #16
    58cc:	1f13      	subs	r3, r2, #4
    58ce:	469c      	mov	ip, r3
    58d0:	466b      	mov	r3, sp
    58d2:	1949      	adds	r1, r1, r5
    58d4:	889b      	ldrh	r3, [r3, #4]
    58d6:	140d      	asrs	r5, r1, #16
    58d8:	0409      	lsls	r1, r1, #16
    58da:	430b      	orrs	r3, r1
    58dc:	4661      	mov	r1, ip
    58de:	600b      	str	r3, [r1, #0]
    58e0:	9b03      	ldr	r3, [sp, #12]
    58e2:	42bb      	cmp	r3, r7
    58e4:	d8dd      	bhi.n	58a2 <__mdiff+0x60>
    58e6:	9902      	ldr	r1, [sp, #8]
    58e8:	0013      	movs	r3, r2
    58ea:	428c      	cmp	r4, r1
    58ec:	d20b      	bcs.n	5906 <__mdiff+0xc4>
    58ee:	cc02      	ldmia	r4!, {r1}
    58f0:	b28b      	uxth	r3, r1
    58f2:	195b      	adds	r3, r3, r5
    58f4:	141d      	asrs	r5, r3, #16
    58f6:	0c09      	lsrs	r1, r1, #16
    58f8:	1949      	adds	r1, r1, r5
    58fa:	140d      	asrs	r5, r1, #16
    58fc:	b29b      	uxth	r3, r3
    58fe:	0409      	lsls	r1, r1, #16
    5900:	430b      	orrs	r3, r1
    5902:	c208      	stmia	r2!, {r3}
    5904:	e7ef      	b.n	58e6 <__mdiff+0xa4>
    5906:	3b04      	subs	r3, #4
    5908:	681a      	ldr	r2, [r3, #0]
    590a:	2a00      	cmp	r2, #0
    590c:	d101      	bne.n	5912 <__mdiff+0xd0>
    590e:	3e01      	subs	r6, #1
    5910:	e7f9      	b.n	5906 <__mdiff+0xc4>
    5912:	6106      	str	r6, [r0, #16]
    5914:	b005      	add	sp, #20
    5916:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005918 <__d2b>:
    5918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    591a:	001d      	movs	r5, r3
    591c:	2101      	movs	r1, #1
    591e:	9f08      	ldr	r7, [sp, #32]
    5920:	0014      	movs	r4, r2
    5922:	f7ff fd62 	bl	53ea <_Balloc>
    5926:	032b      	lsls	r3, r5, #12
    5928:	006d      	lsls	r5, r5, #1
    592a:	0006      	movs	r6, r0
    592c:	0b1b      	lsrs	r3, r3, #12
    592e:	0d6d      	lsrs	r5, r5, #21
    5930:	d002      	beq.n	5938 <__d2b+0x20>
    5932:	2280      	movs	r2, #128	; 0x80
    5934:	0352      	lsls	r2, r2, #13
    5936:	4313      	orrs	r3, r2
    5938:	9301      	str	r3, [sp, #4]
    593a:	2c00      	cmp	r4, #0
    593c:	d018      	beq.n	5970 <__d2b+0x58>
    593e:	4668      	mov	r0, sp
    5940:	9400      	str	r4, [sp, #0]
    5942:	f7ff fdfb 	bl	553c <__lo0bits>
    5946:	9c00      	ldr	r4, [sp, #0]
    5948:	2800      	cmp	r0, #0
    594a:	d009      	beq.n	5960 <__d2b+0x48>
    594c:	9b01      	ldr	r3, [sp, #4]
    594e:	2120      	movs	r1, #32
    5950:	001a      	movs	r2, r3
    5952:	1a09      	subs	r1, r1, r0
    5954:	408a      	lsls	r2, r1
    5956:	40c3      	lsrs	r3, r0
    5958:	4322      	orrs	r2, r4
    595a:	6172      	str	r2, [r6, #20]
    595c:	9301      	str	r3, [sp, #4]
    595e:	e000      	b.n	5962 <__d2b+0x4a>
    5960:	6174      	str	r4, [r6, #20]
    5962:	9c01      	ldr	r4, [sp, #4]
    5964:	61b4      	str	r4, [r6, #24]
    5966:	1e63      	subs	r3, r4, #1
    5968:	419c      	sbcs	r4, r3
    596a:	3401      	adds	r4, #1
    596c:	6134      	str	r4, [r6, #16]
    596e:	e007      	b.n	5980 <__d2b+0x68>
    5970:	a801      	add	r0, sp, #4
    5972:	f7ff fde3 	bl	553c <__lo0bits>
    5976:	2401      	movs	r4, #1
    5978:	9b01      	ldr	r3, [sp, #4]
    597a:	6134      	str	r4, [r6, #16]
    597c:	6173      	str	r3, [r6, #20]
    597e:	3020      	adds	r0, #32
    5980:	2d00      	cmp	r5, #0
    5982:	d006      	beq.n	5992 <__d2b+0x7a>
    5984:	4b0b      	ldr	r3, [pc, #44]	; (59b4 <__d2b+0x9c>)
    5986:	18ed      	adds	r5, r5, r3
    5988:	2335      	movs	r3, #53	; 0x35
    598a:	182d      	adds	r5, r5, r0
    598c:	603d      	str	r5, [r7, #0]
    598e:	1a18      	subs	r0, r3, r0
    5990:	e00b      	b.n	59aa <__d2b+0x92>
    5992:	4b09      	ldr	r3, [pc, #36]	; (59b8 <__d2b+0xa0>)
    5994:	18c0      	adds	r0, r0, r3
    5996:	4b09      	ldr	r3, [pc, #36]	; (59bc <__d2b+0xa4>)
    5998:	6038      	str	r0, [r7, #0]
    599a:	18e3      	adds	r3, r4, r3
    599c:	009b      	lsls	r3, r3, #2
    599e:	18f3      	adds	r3, r6, r3
    59a0:	6958      	ldr	r0, [r3, #20]
    59a2:	f7ff fdb0 	bl	5506 <__hi0bits>
    59a6:	0164      	lsls	r4, r4, #5
    59a8:	1a20      	subs	r0, r4, r0
    59aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    59ac:	6018      	str	r0, [r3, #0]
    59ae:	0030      	movs	r0, r6
    59b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    59b2:	46c0      	nop			; (mov r8, r8)
    59b4:	fffffbcd 	.word	0xfffffbcd
    59b8:	fffffbce 	.word	0xfffffbce
    59bc:	3fffffff 	.word	0x3fffffff

000059c0 <_calloc_r>:
    59c0:	434a      	muls	r2, r1
    59c2:	b570      	push	{r4, r5, r6, lr}
    59c4:	0011      	movs	r1, r2
    59c6:	0014      	movs	r4, r2
    59c8:	f000 f84e 	bl	5a68 <_malloc_r>
    59cc:	1e05      	subs	r5, r0, #0
    59ce:	d003      	beq.n	59d8 <_calloc_r+0x18>
    59d0:	0022      	movs	r2, r4
    59d2:	2100      	movs	r1, #0
    59d4:	f7fd fe23 	bl	361e <memset>
    59d8:	0028      	movs	r0, r5
    59da:	bd70      	pop	{r4, r5, r6, pc}

000059dc <_free_r>:
    59dc:	b530      	push	{r4, r5, lr}
    59de:	2900      	cmp	r1, #0
    59e0:	d03e      	beq.n	5a60 <_free_r+0x84>
    59e2:	3904      	subs	r1, #4
    59e4:	680b      	ldr	r3, [r1, #0]
    59e6:	2b00      	cmp	r3, #0
    59e8:	da00      	bge.n	59ec <_free_r+0x10>
    59ea:	18c9      	adds	r1, r1, r3
    59ec:	4a1d      	ldr	r2, [pc, #116]	; (5a64 <_free_r+0x88>)
    59ee:	6813      	ldr	r3, [r2, #0]
    59f0:	0014      	movs	r4, r2
    59f2:	2b00      	cmp	r3, #0
    59f4:	d102      	bne.n	59fc <_free_r+0x20>
    59f6:	604b      	str	r3, [r1, #4]
    59f8:	6011      	str	r1, [r2, #0]
    59fa:	e031      	b.n	5a60 <_free_r+0x84>
    59fc:	428b      	cmp	r3, r1
    59fe:	d90d      	bls.n	5a1c <_free_r+0x40>
    5a00:	680a      	ldr	r2, [r1, #0]
    5a02:	1888      	adds	r0, r1, r2
    5a04:	4283      	cmp	r3, r0
    5a06:	d103      	bne.n	5a10 <_free_r+0x34>
    5a08:	6818      	ldr	r0, [r3, #0]
    5a0a:	685b      	ldr	r3, [r3, #4]
    5a0c:	1882      	adds	r2, r0, r2
    5a0e:	600a      	str	r2, [r1, #0]
    5a10:	604b      	str	r3, [r1, #4]
    5a12:	6021      	str	r1, [r4, #0]
    5a14:	e024      	b.n	5a60 <_free_r+0x84>
    5a16:	428a      	cmp	r2, r1
    5a18:	d803      	bhi.n	5a22 <_free_r+0x46>
    5a1a:	0013      	movs	r3, r2
    5a1c:	685a      	ldr	r2, [r3, #4]
    5a1e:	2a00      	cmp	r2, #0
    5a20:	d1f9      	bne.n	5a16 <_free_r+0x3a>
    5a22:	681d      	ldr	r5, [r3, #0]
    5a24:	195c      	adds	r4, r3, r5
    5a26:	428c      	cmp	r4, r1
    5a28:	d10b      	bne.n	5a42 <_free_r+0x66>
    5a2a:	6809      	ldr	r1, [r1, #0]
    5a2c:	1869      	adds	r1, r5, r1
    5a2e:	1858      	adds	r0, r3, r1
    5a30:	6019      	str	r1, [r3, #0]
    5a32:	4282      	cmp	r2, r0
    5a34:	d114      	bne.n	5a60 <_free_r+0x84>
    5a36:	6810      	ldr	r0, [r2, #0]
    5a38:	6852      	ldr	r2, [r2, #4]
    5a3a:	1841      	adds	r1, r0, r1
    5a3c:	6019      	str	r1, [r3, #0]
    5a3e:	605a      	str	r2, [r3, #4]
    5a40:	e00e      	b.n	5a60 <_free_r+0x84>
    5a42:	428c      	cmp	r4, r1
    5a44:	d902      	bls.n	5a4c <_free_r+0x70>
    5a46:	230c      	movs	r3, #12
    5a48:	6003      	str	r3, [r0, #0]
    5a4a:	e009      	b.n	5a60 <_free_r+0x84>
    5a4c:	6808      	ldr	r0, [r1, #0]
    5a4e:	180c      	adds	r4, r1, r0
    5a50:	42a2      	cmp	r2, r4
    5a52:	d103      	bne.n	5a5c <_free_r+0x80>
    5a54:	6814      	ldr	r4, [r2, #0]
    5a56:	6852      	ldr	r2, [r2, #4]
    5a58:	1820      	adds	r0, r4, r0
    5a5a:	6008      	str	r0, [r1, #0]
    5a5c:	604a      	str	r2, [r1, #4]
    5a5e:	6059      	str	r1, [r3, #4]
    5a60:	bd30      	pop	{r4, r5, pc}
    5a62:	46c0      	nop			; (mov r8, r8)
    5a64:	20000680 	.word	0x20000680

00005a68 <_malloc_r>:
    5a68:	2303      	movs	r3, #3
    5a6a:	b570      	push	{r4, r5, r6, lr}
    5a6c:	1ccd      	adds	r5, r1, #3
    5a6e:	439d      	bics	r5, r3
    5a70:	3508      	adds	r5, #8
    5a72:	0006      	movs	r6, r0
    5a74:	2d0c      	cmp	r5, #12
    5a76:	d201      	bcs.n	5a7c <_malloc_r+0x14>
    5a78:	250c      	movs	r5, #12
    5a7a:	e005      	b.n	5a88 <_malloc_r+0x20>
    5a7c:	2d00      	cmp	r5, #0
    5a7e:	da03      	bge.n	5a88 <_malloc_r+0x20>
    5a80:	230c      	movs	r3, #12
    5a82:	2000      	movs	r0, #0
    5a84:	6033      	str	r3, [r6, #0]
    5a86:	e040      	b.n	5b0a <_malloc_r+0xa2>
    5a88:	42a9      	cmp	r1, r5
    5a8a:	d8f9      	bhi.n	5a80 <_malloc_r+0x18>
    5a8c:	4b1f      	ldr	r3, [pc, #124]	; (5b0c <_malloc_r+0xa4>)
    5a8e:	681c      	ldr	r4, [r3, #0]
    5a90:	001a      	movs	r2, r3
    5a92:	0021      	movs	r1, r4
    5a94:	2900      	cmp	r1, #0
    5a96:	d013      	beq.n	5ac0 <_malloc_r+0x58>
    5a98:	680b      	ldr	r3, [r1, #0]
    5a9a:	1b5b      	subs	r3, r3, r5
    5a9c:	d40d      	bmi.n	5aba <_malloc_r+0x52>
    5a9e:	2b0b      	cmp	r3, #11
    5aa0:	d902      	bls.n	5aa8 <_malloc_r+0x40>
    5aa2:	600b      	str	r3, [r1, #0]
    5aa4:	18cc      	adds	r4, r1, r3
    5aa6:	e01e      	b.n	5ae6 <_malloc_r+0x7e>
    5aa8:	428c      	cmp	r4, r1
    5aaa:	d102      	bne.n	5ab2 <_malloc_r+0x4a>
    5aac:	6863      	ldr	r3, [r4, #4]
    5aae:	6013      	str	r3, [r2, #0]
    5ab0:	e01a      	b.n	5ae8 <_malloc_r+0x80>
    5ab2:	684b      	ldr	r3, [r1, #4]
    5ab4:	6063      	str	r3, [r4, #4]
    5ab6:	000c      	movs	r4, r1
    5ab8:	e016      	b.n	5ae8 <_malloc_r+0x80>
    5aba:	000c      	movs	r4, r1
    5abc:	6849      	ldr	r1, [r1, #4]
    5abe:	e7e9      	b.n	5a94 <_malloc_r+0x2c>
    5ac0:	4c13      	ldr	r4, [pc, #76]	; (5b10 <_malloc_r+0xa8>)
    5ac2:	6823      	ldr	r3, [r4, #0]
    5ac4:	2b00      	cmp	r3, #0
    5ac6:	d103      	bne.n	5ad0 <_malloc_r+0x68>
    5ac8:	0030      	movs	r0, r6
    5aca:	f000 f967 	bl	5d9c <_sbrk_r>
    5ace:	6020      	str	r0, [r4, #0]
    5ad0:	0029      	movs	r1, r5
    5ad2:	0030      	movs	r0, r6
    5ad4:	f000 f962 	bl	5d9c <_sbrk_r>
    5ad8:	1c43      	adds	r3, r0, #1
    5ada:	d0d1      	beq.n	5a80 <_malloc_r+0x18>
    5adc:	2303      	movs	r3, #3
    5ade:	1cc4      	adds	r4, r0, #3
    5ae0:	439c      	bics	r4, r3
    5ae2:	42a0      	cmp	r0, r4
    5ae4:	d10a      	bne.n	5afc <_malloc_r+0x94>
    5ae6:	6025      	str	r5, [r4, #0]
    5ae8:	0020      	movs	r0, r4
    5aea:	2207      	movs	r2, #7
    5aec:	300b      	adds	r0, #11
    5aee:	1d23      	adds	r3, r4, #4
    5af0:	4390      	bics	r0, r2
    5af2:	1ac3      	subs	r3, r0, r3
    5af4:	d009      	beq.n	5b0a <_malloc_r+0xa2>
    5af6:	425a      	negs	r2, r3
    5af8:	50e2      	str	r2, [r4, r3]
    5afa:	e006      	b.n	5b0a <_malloc_r+0xa2>
    5afc:	1a21      	subs	r1, r4, r0
    5afe:	0030      	movs	r0, r6
    5b00:	f000 f94c 	bl	5d9c <_sbrk_r>
    5b04:	1c43      	adds	r3, r0, #1
    5b06:	d1ee      	bne.n	5ae6 <_malloc_r+0x7e>
    5b08:	e7ba      	b.n	5a80 <_malloc_r+0x18>
    5b0a:	bd70      	pop	{r4, r5, r6, pc}
    5b0c:	20000680 	.word	0x20000680
    5b10:	2000067c 	.word	0x2000067c

00005b14 <__sfputc_r>:
    5b14:	6893      	ldr	r3, [r2, #8]
    5b16:	b510      	push	{r4, lr}
    5b18:	3b01      	subs	r3, #1
    5b1a:	6093      	str	r3, [r2, #8]
    5b1c:	2b00      	cmp	r3, #0
    5b1e:	da05      	bge.n	5b2c <__sfputc_r+0x18>
    5b20:	6994      	ldr	r4, [r2, #24]
    5b22:	42a3      	cmp	r3, r4
    5b24:	db08      	blt.n	5b38 <__sfputc_r+0x24>
    5b26:	b2cb      	uxtb	r3, r1
    5b28:	2b0a      	cmp	r3, #10
    5b2a:	d005      	beq.n	5b38 <__sfputc_r+0x24>
    5b2c:	6813      	ldr	r3, [r2, #0]
    5b2e:	1c58      	adds	r0, r3, #1
    5b30:	6010      	str	r0, [r2, #0]
    5b32:	7019      	strb	r1, [r3, #0]
    5b34:	b2c8      	uxtb	r0, r1
    5b36:	e001      	b.n	5b3c <__sfputc_r+0x28>
    5b38:	f7fe fb38 	bl	41ac <__swbuf_r>
    5b3c:	bd10      	pop	{r4, pc}

00005b3e <__sfputs_r>:
    5b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b40:	0006      	movs	r6, r0
    5b42:	000f      	movs	r7, r1
    5b44:	0014      	movs	r4, r2
    5b46:	18d5      	adds	r5, r2, r3
    5b48:	42ac      	cmp	r4, r5
    5b4a:	d008      	beq.n	5b5e <__sfputs_r+0x20>
    5b4c:	7821      	ldrb	r1, [r4, #0]
    5b4e:	003a      	movs	r2, r7
    5b50:	0030      	movs	r0, r6
    5b52:	f7ff ffdf 	bl	5b14 <__sfputc_r>
    5b56:	3401      	adds	r4, #1
    5b58:	1c43      	adds	r3, r0, #1
    5b5a:	d1f5      	bne.n	5b48 <__sfputs_r+0xa>
    5b5c:	e000      	b.n	5b60 <__sfputs_r+0x22>
    5b5e:	2000      	movs	r0, #0
    5b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005b64 <_vfiprintf_r>:
    5b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b66:	b09f      	sub	sp, #124	; 0x7c
    5b68:	0006      	movs	r6, r0
    5b6a:	000f      	movs	r7, r1
    5b6c:	9202      	str	r2, [sp, #8]
    5b6e:	9305      	str	r3, [sp, #20]
    5b70:	2800      	cmp	r0, #0
    5b72:	d004      	beq.n	5b7e <_vfiprintf_r+0x1a>
    5b74:	6983      	ldr	r3, [r0, #24]
    5b76:	2b00      	cmp	r3, #0
    5b78:	d101      	bne.n	5b7e <_vfiprintf_r+0x1a>
    5b7a:	f7ff fb25 	bl	51c8 <__sinit>
    5b7e:	4b7f      	ldr	r3, [pc, #508]	; (5d7c <_vfiprintf_r+0x218>)
    5b80:	429f      	cmp	r7, r3
    5b82:	d101      	bne.n	5b88 <_vfiprintf_r+0x24>
    5b84:	6877      	ldr	r7, [r6, #4]
    5b86:	e008      	b.n	5b9a <_vfiprintf_r+0x36>
    5b88:	4b7d      	ldr	r3, [pc, #500]	; (5d80 <_vfiprintf_r+0x21c>)
    5b8a:	429f      	cmp	r7, r3
    5b8c:	d101      	bne.n	5b92 <_vfiprintf_r+0x2e>
    5b8e:	68b7      	ldr	r7, [r6, #8]
    5b90:	e003      	b.n	5b9a <_vfiprintf_r+0x36>
    5b92:	4b7c      	ldr	r3, [pc, #496]	; (5d84 <_vfiprintf_r+0x220>)
    5b94:	429f      	cmp	r7, r3
    5b96:	d100      	bne.n	5b9a <_vfiprintf_r+0x36>
    5b98:	68f7      	ldr	r7, [r6, #12]
    5b9a:	89bb      	ldrh	r3, [r7, #12]
    5b9c:	071b      	lsls	r3, r3, #28
    5b9e:	d50a      	bpl.n	5bb6 <_vfiprintf_r+0x52>
    5ba0:	693b      	ldr	r3, [r7, #16]
    5ba2:	2b00      	cmp	r3, #0
    5ba4:	d007      	beq.n	5bb6 <_vfiprintf_r+0x52>
    5ba6:	2300      	movs	r3, #0
    5ba8:	ad06      	add	r5, sp, #24
    5baa:	616b      	str	r3, [r5, #20]
    5bac:	3320      	adds	r3, #32
    5bae:	766b      	strb	r3, [r5, #25]
    5bb0:	3310      	adds	r3, #16
    5bb2:	76ab      	strb	r3, [r5, #26]
    5bb4:	e03d      	b.n	5c32 <_vfiprintf_r+0xce>
    5bb6:	0039      	movs	r1, r7
    5bb8:	0030      	movs	r0, r6
    5bba:	f7fe fb4f 	bl	425c <__swsetup_r>
    5bbe:	2800      	cmp	r0, #0
    5bc0:	d0f1      	beq.n	5ba6 <_vfiprintf_r+0x42>
    5bc2:	2001      	movs	r0, #1
    5bc4:	4240      	negs	r0, r0
    5bc6:	e0d6      	b.n	5d76 <_vfiprintf_r+0x212>
    5bc8:	9a05      	ldr	r2, [sp, #20]
    5bca:	1d11      	adds	r1, r2, #4
    5bcc:	6812      	ldr	r2, [r2, #0]
    5bce:	9105      	str	r1, [sp, #20]
    5bd0:	2a00      	cmp	r2, #0
    5bd2:	da00      	bge.n	5bd6 <_vfiprintf_r+0x72>
    5bd4:	e07f      	b.n	5cd6 <_vfiprintf_r+0x172>
    5bd6:	9209      	str	r2, [sp, #36]	; 0x24
    5bd8:	3401      	adds	r4, #1
    5bda:	7823      	ldrb	r3, [r4, #0]
    5bdc:	2b2e      	cmp	r3, #46	; 0x2e
    5bde:	d100      	bne.n	5be2 <_vfiprintf_r+0x7e>
    5be0:	e08d      	b.n	5cfe <_vfiprintf_r+0x19a>
    5be2:	7821      	ldrb	r1, [r4, #0]
    5be4:	2203      	movs	r2, #3
    5be6:	4868      	ldr	r0, [pc, #416]	; (5d88 <_vfiprintf_r+0x224>)
    5be8:	f7ff fbf4 	bl	53d4 <memchr>
    5bec:	2800      	cmp	r0, #0
    5bee:	d007      	beq.n	5c00 <_vfiprintf_r+0x9c>
    5bf0:	4b65      	ldr	r3, [pc, #404]	; (5d88 <_vfiprintf_r+0x224>)
    5bf2:	682a      	ldr	r2, [r5, #0]
    5bf4:	1ac0      	subs	r0, r0, r3
    5bf6:	2340      	movs	r3, #64	; 0x40
    5bf8:	4083      	lsls	r3, r0
    5bfa:	4313      	orrs	r3, r2
    5bfc:	602b      	str	r3, [r5, #0]
    5bfe:	3401      	adds	r4, #1
    5c00:	7821      	ldrb	r1, [r4, #0]
    5c02:	1c63      	adds	r3, r4, #1
    5c04:	2206      	movs	r2, #6
    5c06:	4861      	ldr	r0, [pc, #388]	; (5d8c <_vfiprintf_r+0x228>)
    5c08:	9302      	str	r3, [sp, #8]
    5c0a:	7629      	strb	r1, [r5, #24]
    5c0c:	f7ff fbe2 	bl	53d4 <memchr>
    5c10:	2800      	cmp	r0, #0
    5c12:	d100      	bne.n	5c16 <_vfiprintf_r+0xb2>
    5c14:	e09d      	b.n	5d52 <_vfiprintf_r+0x1ee>
    5c16:	4b5e      	ldr	r3, [pc, #376]	; (5d90 <_vfiprintf_r+0x22c>)
    5c18:	2b00      	cmp	r3, #0
    5c1a:	d000      	beq.n	5c1e <_vfiprintf_r+0xba>
    5c1c:	e090      	b.n	5d40 <_vfiprintf_r+0x1dc>
    5c1e:	2207      	movs	r2, #7
    5c20:	9b05      	ldr	r3, [sp, #20]
    5c22:	3307      	adds	r3, #7
    5c24:	4393      	bics	r3, r2
    5c26:	3308      	adds	r3, #8
    5c28:	9305      	str	r3, [sp, #20]
    5c2a:	696b      	ldr	r3, [r5, #20]
    5c2c:	9a03      	ldr	r2, [sp, #12]
    5c2e:	189b      	adds	r3, r3, r2
    5c30:	616b      	str	r3, [r5, #20]
    5c32:	9c02      	ldr	r4, [sp, #8]
    5c34:	7823      	ldrb	r3, [r4, #0]
    5c36:	2b00      	cmp	r3, #0
    5c38:	d104      	bne.n	5c44 <_vfiprintf_r+0xe0>
    5c3a:	9b02      	ldr	r3, [sp, #8]
    5c3c:	1ae3      	subs	r3, r4, r3
    5c3e:	9304      	str	r3, [sp, #16]
    5c40:	d012      	beq.n	5c68 <_vfiprintf_r+0x104>
    5c42:	e003      	b.n	5c4c <_vfiprintf_r+0xe8>
    5c44:	2b25      	cmp	r3, #37	; 0x25
    5c46:	d0f8      	beq.n	5c3a <_vfiprintf_r+0xd6>
    5c48:	3401      	adds	r4, #1
    5c4a:	e7f3      	b.n	5c34 <_vfiprintf_r+0xd0>
    5c4c:	9b04      	ldr	r3, [sp, #16]
    5c4e:	9a02      	ldr	r2, [sp, #8]
    5c50:	0039      	movs	r1, r7
    5c52:	0030      	movs	r0, r6
    5c54:	f7ff ff73 	bl	5b3e <__sfputs_r>
    5c58:	1c43      	adds	r3, r0, #1
    5c5a:	d100      	bne.n	5c5e <_vfiprintf_r+0xfa>
    5c5c:	e086      	b.n	5d6c <_vfiprintf_r+0x208>
    5c5e:	696a      	ldr	r2, [r5, #20]
    5c60:	9b04      	ldr	r3, [sp, #16]
    5c62:	4694      	mov	ip, r2
    5c64:	4463      	add	r3, ip
    5c66:	616b      	str	r3, [r5, #20]
    5c68:	7823      	ldrb	r3, [r4, #0]
    5c6a:	2b00      	cmp	r3, #0
    5c6c:	d07e      	beq.n	5d6c <_vfiprintf_r+0x208>
    5c6e:	2201      	movs	r2, #1
    5c70:	2300      	movs	r3, #0
    5c72:	4252      	negs	r2, r2
    5c74:	606a      	str	r2, [r5, #4]
    5c76:	a902      	add	r1, sp, #8
    5c78:	3254      	adds	r2, #84	; 0x54
    5c7a:	1852      	adds	r2, r2, r1
    5c7c:	3401      	adds	r4, #1
    5c7e:	602b      	str	r3, [r5, #0]
    5c80:	60eb      	str	r3, [r5, #12]
    5c82:	60ab      	str	r3, [r5, #8]
    5c84:	7013      	strb	r3, [r2, #0]
    5c86:	65ab      	str	r3, [r5, #88]	; 0x58
    5c88:	7821      	ldrb	r1, [r4, #0]
    5c8a:	2205      	movs	r2, #5
    5c8c:	4841      	ldr	r0, [pc, #260]	; (5d94 <_vfiprintf_r+0x230>)
    5c8e:	f7ff fba1 	bl	53d4 <memchr>
    5c92:	2800      	cmp	r0, #0
    5c94:	d008      	beq.n	5ca8 <_vfiprintf_r+0x144>
    5c96:	4b3f      	ldr	r3, [pc, #252]	; (5d94 <_vfiprintf_r+0x230>)
    5c98:	682a      	ldr	r2, [r5, #0]
    5c9a:	1ac0      	subs	r0, r0, r3
    5c9c:	2301      	movs	r3, #1
    5c9e:	4083      	lsls	r3, r0
    5ca0:	4313      	orrs	r3, r2
    5ca2:	602b      	str	r3, [r5, #0]
    5ca4:	3401      	adds	r4, #1
    5ca6:	e7ef      	b.n	5c88 <_vfiprintf_r+0x124>
    5ca8:	682b      	ldr	r3, [r5, #0]
    5caa:	06da      	lsls	r2, r3, #27
    5cac:	d504      	bpl.n	5cb8 <_vfiprintf_r+0x154>
    5cae:	2253      	movs	r2, #83	; 0x53
    5cb0:	2120      	movs	r1, #32
    5cb2:	a802      	add	r0, sp, #8
    5cb4:	1812      	adds	r2, r2, r0
    5cb6:	7011      	strb	r1, [r2, #0]
    5cb8:	071a      	lsls	r2, r3, #28
    5cba:	d504      	bpl.n	5cc6 <_vfiprintf_r+0x162>
    5cbc:	2253      	movs	r2, #83	; 0x53
    5cbe:	212b      	movs	r1, #43	; 0x2b
    5cc0:	a802      	add	r0, sp, #8
    5cc2:	1812      	adds	r2, r2, r0
    5cc4:	7011      	strb	r1, [r2, #0]
    5cc6:	7822      	ldrb	r2, [r4, #0]
    5cc8:	2a2a      	cmp	r2, #42	; 0x2a
    5cca:	d100      	bne.n	5cce <_vfiprintf_r+0x16a>
    5ccc:	e77c      	b.n	5bc8 <_vfiprintf_r+0x64>
    5cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5cd0:	2000      	movs	r0, #0
    5cd2:	210a      	movs	r1, #10
    5cd4:	e005      	b.n	5ce2 <_vfiprintf_r+0x17e>
    5cd6:	4252      	negs	r2, r2
    5cd8:	60ea      	str	r2, [r5, #12]
    5cda:	2202      	movs	r2, #2
    5cdc:	4313      	orrs	r3, r2
    5cde:	602b      	str	r3, [r5, #0]
    5ce0:	e77a      	b.n	5bd8 <_vfiprintf_r+0x74>
    5ce2:	7822      	ldrb	r2, [r4, #0]
    5ce4:	3a30      	subs	r2, #48	; 0x30
    5ce6:	2a09      	cmp	r2, #9
    5ce8:	d804      	bhi.n	5cf4 <_vfiprintf_r+0x190>
    5cea:	434b      	muls	r3, r1
    5cec:	3401      	adds	r4, #1
    5cee:	189b      	adds	r3, r3, r2
    5cf0:	2001      	movs	r0, #1
    5cf2:	e7f6      	b.n	5ce2 <_vfiprintf_r+0x17e>
    5cf4:	2800      	cmp	r0, #0
    5cf6:	d100      	bne.n	5cfa <_vfiprintf_r+0x196>
    5cf8:	e76f      	b.n	5bda <_vfiprintf_r+0x76>
    5cfa:	9309      	str	r3, [sp, #36]	; 0x24
    5cfc:	e76d      	b.n	5bda <_vfiprintf_r+0x76>
    5cfe:	7863      	ldrb	r3, [r4, #1]
    5d00:	2b2a      	cmp	r3, #42	; 0x2a
    5d02:	d10a      	bne.n	5d1a <_vfiprintf_r+0x1b6>
    5d04:	9b05      	ldr	r3, [sp, #20]
    5d06:	3402      	adds	r4, #2
    5d08:	1d1a      	adds	r2, r3, #4
    5d0a:	681b      	ldr	r3, [r3, #0]
    5d0c:	9205      	str	r2, [sp, #20]
    5d0e:	2b00      	cmp	r3, #0
    5d10:	da01      	bge.n	5d16 <_vfiprintf_r+0x1b2>
    5d12:	2301      	movs	r3, #1
    5d14:	425b      	negs	r3, r3
    5d16:	9307      	str	r3, [sp, #28]
    5d18:	e763      	b.n	5be2 <_vfiprintf_r+0x7e>
    5d1a:	2300      	movs	r3, #0
    5d1c:	200a      	movs	r0, #10
    5d1e:	001a      	movs	r2, r3
    5d20:	3401      	adds	r4, #1
    5d22:	606b      	str	r3, [r5, #4]
    5d24:	7821      	ldrb	r1, [r4, #0]
    5d26:	3930      	subs	r1, #48	; 0x30
    5d28:	2909      	cmp	r1, #9
    5d2a:	d804      	bhi.n	5d36 <_vfiprintf_r+0x1d2>
    5d2c:	4342      	muls	r2, r0
    5d2e:	3401      	adds	r4, #1
    5d30:	1852      	adds	r2, r2, r1
    5d32:	2301      	movs	r3, #1
    5d34:	e7f6      	b.n	5d24 <_vfiprintf_r+0x1c0>
    5d36:	2b00      	cmp	r3, #0
    5d38:	d100      	bne.n	5d3c <_vfiprintf_r+0x1d8>
    5d3a:	e752      	b.n	5be2 <_vfiprintf_r+0x7e>
    5d3c:	9207      	str	r2, [sp, #28]
    5d3e:	e750      	b.n	5be2 <_vfiprintf_r+0x7e>
    5d40:	ab05      	add	r3, sp, #20
    5d42:	9300      	str	r3, [sp, #0]
    5d44:	003a      	movs	r2, r7
    5d46:	4b14      	ldr	r3, [pc, #80]	; (5d98 <_vfiprintf_r+0x234>)
    5d48:	0029      	movs	r1, r5
    5d4a:	0030      	movs	r0, r6
    5d4c:	f7fd fd06 	bl	375c <_printf_float>
    5d50:	e007      	b.n	5d62 <_vfiprintf_r+0x1fe>
    5d52:	ab05      	add	r3, sp, #20
    5d54:	9300      	str	r3, [sp, #0]
    5d56:	003a      	movs	r2, r7
    5d58:	4b0f      	ldr	r3, [pc, #60]	; (5d98 <_vfiprintf_r+0x234>)
    5d5a:	0029      	movs	r1, r5
    5d5c:	0030      	movs	r0, r6
    5d5e:	f7fd ffbb 	bl	3cd8 <_printf_i>
    5d62:	9003      	str	r0, [sp, #12]
    5d64:	9b03      	ldr	r3, [sp, #12]
    5d66:	3301      	adds	r3, #1
    5d68:	d000      	beq.n	5d6c <_vfiprintf_r+0x208>
    5d6a:	e75e      	b.n	5c2a <_vfiprintf_r+0xc6>
    5d6c:	89bb      	ldrh	r3, [r7, #12]
    5d6e:	065b      	lsls	r3, r3, #25
    5d70:	d500      	bpl.n	5d74 <_vfiprintf_r+0x210>
    5d72:	e726      	b.n	5bc2 <_vfiprintf_r+0x5e>
    5d74:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5d76:	b01f      	add	sp, #124	; 0x7c
    5d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d7a:	46c0      	nop			; (mov r8, r8)
    5d7c:	00008c40 	.word	0x00008c40
    5d80:	00008c60 	.word	0x00008c60
    5d84:	00008c80 	.word	0x00008c80
    5d88:	00008daa 	.word	0x00008daa
    5d8c:	00008dae 	.word	0x00008dae
    5d90:	0000375d 	.word	0x0000375d
    5d94:	00008da4 	.word	0x00008da4
    5d98:	00005b3f 	.word	0x00005b3f

00005d9c <_sbrk_r>:
    5d9c:	2300      	movs	r3, #0
    5d9e:	b570      	push	{r4, r5, r6, lr}
    5da0:	4c06      	ldr	r4, [pc, #24]	; (5dbc <_sbrk_r+0x20>)
    5da2:	0005      	movs	r5, r0
    5da4:	0008      	movs	r0, r1
    5da6:	6023      	str	r3, [r4, #0]
    5da8:	f7fc fe32 	bl	2a10 <_sbrk>
    5dac:	1c43      	adds	r3, r0, #1
    5dae:	d103      	bne.n	5db8 <_sbrk_r+0x1c>
    5db0:	6823      	ldr	r3, [r4, #0]
    5db2:	2b00      	cmp	r3, #0
    5db4:	d000      	beq.n	5db8 <_sbrk_r+0x1c>
    5db6:	602b      	str	r3, [r5, #0]
    5db8:	bd70      	pop	{r4, r5, r6, pc}
    5dba:	46c0      	nop			; (mov r8, r8)
    5dbc:	200008f8 	.word	0x200008f8

00005dc0 <__sread>:
    5dc0:	b570      	push	{r4, r5, r6, lr}
    5dc2:	000c      	movs	r4, r1
    5dc4:	250e      	movs	r5, #14
    5dc6:	5f49      	ldrsh	r1, [r1, r5]
    5dc8:	f000 f8a4 	bl	5f14 <_read_r>
    5dcc:	2800      	cmp	r0, #0
    5dce:	db03      	blt.n	5dd8 <__sread+0x18>
    5dd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5dd2:	181b      	adds	r3, r3, r0
    5dd4:	6563      	str	r3, [r4, #84]	; 0x54
    5dd6:	e003      	b.n	5de0 <__sread+0x20>
    5dd8:	89a2      	ldrh	r2, [r4, #12]
    5dda:	4b02      	ldr	r3, [pc, #8]	; (5de4 <__sread+0x24>)
    5ddc:	4013      	ands	r3, r2
    5dde:	81a3      	strh	r3, [r4, #12]
    5de0:	bd70      	pop	{r4, r5, r6, pc}
    5de2:	46c0      	nop			; (mov r8, r8)
    5de4:	ffffefff 	.word	0xffffefff

00005de8 <__swrite>:
    5de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5dea:	001f      	movs	r7, r3
    5dec:	898b      	ldrh	r3, [r1, #12]
    5dee:	0005      	movs	r5, r0
    5df0:	000c      	movs	r4, r1
    5df2:	0016      	movs	r6, r2
    5df4:	05db      	lsls	r3, r3, #23
    5df6:	d505      	bpl.n	5e04 <__swrite+0x1c>
    5df8:	230e      	movs	r3, #14
    5dfa:	5ec9      	ldrsh	r1, [r1, r3]
    5dfc:	2200      	movs	r2, #0
    5dfe:	2302      	movs	r3, #2
    5e00:	f000 f874 	bl	5eec <_lseek_r>
    5e04:	89a2      	ldrh	r2, [r4, #12]
    5e06:	4b05      	ldr	r3, [pc, #20]	; (5e1c <__swrite+0x34>)
    5e08:	0028      	movs	r0, r5
    5e0a:	4013      	ands	r3, r2
    5e0c:	81a3      	strh	r3, [r4, #12]
    5e0e:	0032      	movs	r2, r6
    5e10:	230e      	movs	r3, #14
    5e12:	5ee1      	ldrsh	r1, [r4, r3]
    5e14:	003b      	movs	r3, r7
    5e16:	f000 f81f 	bl	5e58 <_write_r>
    5e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e1c:	ffffefff 	.word	0xffffefff

00005e20 <__sseek>:
    5e20:	b570      	push	{r4, r5, r6, lr}
    5e22:	000c      	movs	r4, r1
    5e24:	250e      	movs	r5, #14
    5e26:	5f49      	ldrsh	r1, [r1, r5]
    5e28:	f000 f860 	bl	5eec <_lseek_r>
    5e2c:	89a3      	ldrh	r3, [r4, #12]
    5e2e:	1c42      	adds	r2, r0, #1
    5e30:	d103      	bne.n	5e3a <__sseek+0x1a>
    5e32:	4a05      	ldr	r2, [pc, #20]	; (5e48 <__sseek+0x28>)
    5e34:	4013      	ands	r3, r2
    5e36:	81a3      	strh	r3, [r4, #12]
    5e38:	e004      	b.n	5e44 <__sseek+0x24>
    5e3a:	2280      	movs	r2, #128	; 0x80
    5e3c:	0152      	lsls	r2, r2, #5
    5e3e:	4313      	orrs	r3, r2
    5e40:	81a3      	strh	r3, [r4, #12]
    5e42:	6560      	str	r0, [r4, #84]	; 0x54
    5e44:	bd70      	pop	{r4, r5, r6, pc}
    5e46:	46c0      	nop			; (mov r8, r8)
    5e48:	ffffefff 	.word	0xffffefff

00005e4c <__sclose>:
    5e4c:	b510      	push	{r4, lr}
    5e4e:	230e      	movs	r3, #14
    5e50:	5ec9      	ldrsh	r1, [r1, r3]
    5e52:	f000 f815 	bl	5e80 <_close_r>
    5e56:	bd10      	pop	{r4, pc}

00005e58 <_write_r>:
    5e58:	b570      	push	{r4, r5, r6, lr}
    5e5a:	0005      	movs	r5, r0
    5e5c:	0008      	movs	r0, r1
    5e5e:	0011      	movs	r1, r2
    5e60:	2200      	movs	r2, #0
    5e62:	4c06      	ldr	r4, [pc, #24]	; (5e7c <_write_r+0x24>)
    5e64:	6022      	str	r2, [r4, #0]
    5e66:	001a      	movs	r2, r3
    5e68:	f7fc fdaa 	bl	29c0 <_write>
    5e6c:	1c43      	adds	r3, r0, #1
    5e6e:	d103      	bne.n	5e78 <_write_r+0x20>
    5e70:	6823      	ldr	r3, [r4, #0]
    5e72:	2b00      	cmp	r3, #0
    5e74:	d000      	beq.n	5e78 <_write_r+0x20>
    5e76:	602b      	str	r3, [r5, #0]
    5e78:	bd70      	pop	{r4, r5, r6, pc}
    5e7a:	46c0      	nop			; (mov r8, r8)
    5e7c:	200008f8 	.word	0x200008f8

00005e80 <_close_r>:
    5e80:	2300      	movs	r3, #0
    5e82:	b570      	push	{r4, r5, r6, lr}
    5e84:	4c06      	ldr	r4, [pc, #24]	; (5ea0 <_close_r+0x20>)
    5e86:	0005      	movs	r5, r0
    5e88:	0008      	movs	r0, r1
    5e8a:	6023      	str	r3, [r4, #0]
    5e8c:	f7fc fdd2 	bl	2a34 <_close>
    5e90:	1c43      	adds	r3, r0, #1
    5e92:	d103      	bne.n	5e9c <_close_r+0x1c>
    5e94:	6823      	ldr	r3, [r4, #0]
    5e96:	2b00      	cmp	r3, #0
    5e98:	d000      	beq.n	5e9c <_close_r+0x1c>
    5e9a:	602b      	str	r3, [r5, #0]
    5e9c:	bd70      	pop	{r4, r5, r6, pc}
    5e9e:	46c0      	nop			; (mov r8, r8)
    5ea0:	200008f8 	.word	0x200008f8

00005ea4 <_fstat_r>:
    5ea4:	2300      	movs	r3, #0
    5ea6:	b570      	push	{r4, r5, r6, lr}
    5ea8:	4c06      	ldr	r4, [pc, #24]	; (5ec4 <_fstat_r+0x20>)
    5eaa:	0005      	movs	r5, r0
    5eac:	0008      	movs	r0, r1
    5eae:	0011      	movs	r1, r2
    5eb0:	6023      	str	r3, [r4, #0]
    5eb2:	f7fc fdc3 	bl	2a3c <_fstat>
    5eb6:	1c43      	adds	r3, r0, #1
    5eb8:	d103      	bne.n	5ec2 <_fstat_r+0x1e>
    5eba:	6823      	ldr	r3, [r4, #0]
    5ebc:	2b00      	cmp	r3, #0
    5ebe:	d000      	beq.n	5ec2 <_fstat_r+0x1e>
    5ec0:	602b      	str	r3, [r5, #0]
    5ec2:	bd70      	pop	{r4, r5, r6, pc}
    5ec4:	200008f8 	.word	0x200008f8

00005ec8 <_isatty_r>:
    5ec8:	2300      	movs	r3, #0
    5eca:	b570      	push	{r4, r5, r6, lr}
    5ecc:	4c06      	ldr	r4, [pc, #24]	; (5ee8 <_isatty_r+0x20>)
    5ece:	0005      	movs	r5, r0
    5ed0:	0008      	movs	r0, r1
    5ed2:	6023      	str	r3, [r4, #0]
    5ed4:	f7fc fdb8 	bl	2a48 <_isatty>
    5ed8:	1c43      	adds	r3, r0, #1
    5eda:	d103      	bne.n	5ee4 <_isatty_r+0x1c>
    5edc:	6823      	ldr	r3, [r4, #0]
    5ede:	2b00      	cmp	r3, #0
    5ee0:	d000      	beq.n	5ee4 <_isatty_r+0x1c>
    5ee2:	602b      	str	r3, [r5, #0]
    5ee4:	bd70      	pop	{r4, r5, r6, pc}
    5ee6:	46c0      	nop			; (mov r8, r8)
    5ee8:	200008f8 	.word	0x200008f8

00005eec <_lseek_r>:
    5eec:	b570      	push	{r4, r5, r6, lr}
    5eee:	0005      	movs	r5, r0
    5ef0:	0008      	movs	r0, r1
    5ef2:	0011      	movs	r1, r2
    5ef4:	2200      	movs	r2, #0
    5ef6:	4c06      	ldr	r4, [pc, #24]	; (5f10 <_lseek_r+0x24>)
    5ef8:	6022      	str	r2, [r4, #0]
    5efa:	001a      	movs	r2, r3
    5efc:	f7fc fda6 	bl	2a4c <_lseek>
    5f00:	1c43      	adds	r3, r0, #1
    5f02:	d103      	bne.n	5f0c <_lseek_r+0x20>
    5f04:	6823      	ldr	r3, [r4, #0]
    5f06:	2b00      	cmp	r3, #0
    5f08:	d000      	beq.n	5f0c <_lseek_r+0x20>
    5f0a:	602b      	str	r3, [r5, #0]
    5f0c:	bd70      	pop	{r4, r5, r6, pc}
    5f0e:	46c0      	nop			; (mov r8, r8)
    5f10:	200008f8 	.word	0x200008f8

00005f14 <_read_r>:
    5f14:	b570      	push	{r4, r5, r6, lr}
    5f16:	0005      	movs	r5, r0
    5f18:	0008      	movs	r0, r1
    5f1a:	0011      	movs	r1, r2
    5f1c:	2200      	movs	r2, #0
    5f1e:	4c06      	ldr	r4, [pc, #24]	; (5f38 <_read_r+0x24>)
    5f20:	6022      	str	r2, [r4, #0]
    5f22:	001a      	movs	r2, r3
    5f24:	f7fc fd2c 	bl	2980 <_read>
    5f28:	1c43      	adds	r3, r0, #1
    5f2a:	d103      	bne.n	5f34 <_read_r+0x20>
    5f2c:	6823      	ldr	r3, [r4, #0]
    5f2e:	2b00      	cmp	r3, #0
    5f30:	d000      	beq.n	5f34 <_read_r+0x20>
    5f32:	602b      	str	r3, [r5, #0]
    5f34:	bd70      	pop	{r4, r5, r6, pc}
    5f36:	46c0      	nop			; (mov r8, r8)
    5f38:	200008f8 	.word	0x200008f8

00005f3c <__gnu_thumb1_case_uqi>:
    5f3c:	b402      	push	{r1}
    5f3e:	4671      	mov	r1, lr
    5f40:	0849      	lsrs	r1, r1, #1
    5f42:	0049      	lsls	r1, r1, #1
    5f44:	5c09      	ldrb	r1, [r1, r0]
    5f46:	0049      	lsls	r1, r1, #1
    5f48:	448e      	add	lr, r1
    5f4a:	bc02      	pop	{r1}
    5f4c:	4770      	bx	lr
    5f4e:	46c0      	nop			; (mov r8, r8)

00005f50 <__aeabi_uidiv>:
    5f50:	2200      	movs	r2, #0
    5f52:	0843      	lsrs	r3, r0, #1
    5f54:	428b      	cmp	r3, r1
    5f56:	d374      	bcc.n	6042 <__aeabi_uidiv+0xf2>
    5f58:	0903      	lsrs	r3, r0, #4
    5f5a:	428b      	cmp	r3, r1
    5f5c:	d35f      	bcc.n	601e <__aeabi_uidiv+0xce>
    5f5e:	0a03      	lsrs	r3, r0, #8
    5f60:	428b      	cmp	r3, r1
    5f62:	d344      	bcc.n	5fee <__aeabi_uidiv+0x9e>
    5f64:	0b03      	lsrs	r3, r0, #12
    5f66:	428b      	cmp	r3, r1
    5f68:	d328      	bcc.n	5fbc <__aeabi_uidiv+0x6c>
    5f6a:	0c03      	lsrs	r3, r0, #16
    5f6c:	428b      	cmp	r3, r1
    5f6e:	d30d      	bcc.n	5f8c <__aeabi_uidiv+0x3c>
    5f70:	22ff      	movs	r2, #255	; 0xff
    5f72:	0209      	lsls	r1, r1, #8
    5f74:	ba12      	rev	r2, r2
    5f76:	0c03      	lsrs	r3, r0, #16
    5f78:	428b      	cmp	r3, r1
    5f7a:	d302      	bcc.n	5f82 <__aeabi_uidiv+0x32>
    5f7c:	1212      	asrs	r2, r2, #8
    5f7e:	0209      	lsls	r1, r1, #8
    5f80:	d065      	beq.n	604e <__aeabi_uidiv+0xfe>
    5f82:	0b03      	lsrs	r3, r0, #12
    5f84:	428b      	cmp	r3, r1
    5f86:	d319      	bcc.n	5fbc <__aeabi_uidiv+0x6c>
    5f88:	e000      	b.n	5f8c <__aeabi_uidiv+0x3c>
    5f8a:	0a09      	lsrs	r1, r1, #8
    5f8c:	0bc3      	lsrs	r3, r0, #15
    5f8e:	428b      	cmp	r3, r1
    5f90:	d301      	bcc.n	5f96 <__aeabi_uidiv+0x46>
    5f92:	03cb      	lsls	r3, r1, #15
    5f94:	1ac0      	subs	r0, r0, r3
    5f96:	4152      	adcs	r2, r2
    5f98:	0b83      	lsrs	r3, r0, #14
    5f9a:	428b      	cmp	r3, r1
    5f9c:	d301      	bcc.n	5fa2 <__aeabi_uidiv+0x52>
    5f9e:	038b      	lsls	r3, r1, #14
    5fa0:	1ac0      	subs	r0, r0, r3
    5fa2:	4152      	adcs	r2, r2
    5fa4:	0b43      	lsrs	r3, r0, #13
    5fa6:	428b      	cmp	r3, r1
    5fa8:	d301      	bcc.n	5fae <__aeabi_uidiv+0x5e>
    5faa:	034b      	lsls	r3, r1, #13
    5fac:	1ac0      	subs	r0, r0, r3
    5fae:	4152      	adcs	r2, r2
    5fb0:	0b03      	lsrs	r3, r0, #12
    5fb2:	428b      	cmp	r3, r1
    5fb4:	d301      	bcc.n	5fba <__aeabi_uidiv+0x6a>
    5fb6:	030b      	lsls	r3, r1, #12
    5fb8:	1ac0      	subs	r0, r0, r3
    5fba:	4152      	adcs	r2, r2
    5fbc:	0ac3      	lsrs	r3, r0, #11
    5fbe:	428b      	cmp	r3, r1
    5fc0:	d301      	bcc.n	5fc6 <__aeabi_uidiv+0x76>
    5fc2:	02cb      	lsls	r3, r1, #11
    5fc4:	1ac0      	subs	r0, r0, r3
    5fc6:	4152      	adcs	r2, r2
    5fc8:	0a83      	lsrs	r3, r0, #10
    5fca:	428b      	cmp	r3, r1
    5fcc:	d301      	bcc.n	5fd2 <__aeabi_uidiv+0x82>
    5fce:	028b      	lsls	r3, r1, #10
    5fd0:	1ac0      	subs	r0, r0, r3
    5fd2:	4152      	adcs	r2, r2
    5fd4:	0a43      	lsrs	r3, r0, #9
    5fd6:	428b      	cmp	r3, r1
    5fd8:	d301      	bcc.n	5fde <__aeabi_uidiv+0x8e>
    5fda:	024b      	lsls	r3, r1, #9
    5fdc:	1ac0      	subs	r0, r0, r3
    5fde:	4152      	adcs	r2, r2
    5fe0:	0a03      	lsrs	r3, r0, #8
    5fe2:	428b      	cmp	r3, r1
    5fe4:	d301      	bcc.n	5fea <__aeabi_uidiv+0x9a>
    5fe6:	020b      	lsls	r3, r1, #8
    5fe8:	1ac0      	subs	r0, r0, r3
    5fea:	4152      	adcs	r2, r2
    5fec:	d2cd      	bcs.n	5f8a <__aeabi_uidiv+0x3a>
    5fee:	09c3      	lsrs	r3, r0, #7
    5ff0:	428b      	cmp	r3, r1
    5ff2:	d301      	bcc.n	5ff8 <__aeabi_uidiv+0xa8>
    5ff4:	01cb      	lsls	r3, r1, #7
    5ff6:	1ac0      	subs	r0, r0, r3
    5ff8:	4152      	adcs	r2, r2
    5ffa:	0983      	lsrs	r3, r0, #6
    5ffc:	428b      	cmp	r3, r1
    5ffe:	d301      	bcc.n	6004 <__aeabi_uidiv+0xb4>
    6000:	018b      	lsls	r3, r1, #6
    6002:	1ac0      	subs	r0, r0, r3
    6004:	4152      	adcs	r2, r2
    6006:	0943      	lsrs	r3, r0, #5
    6008:	428b      	cmp	r3, r1
    600a:	d301      	bcc.n	6010 <__aeabi_uidiv+0xc0>
    600c:	014b      	lsls	r3, r1, #5
    600e:	1ac0      	subs	r0, r0, r3
    6010:	4152      	adcs	r2, r2
    6012:	0903      	lsrs	r3, r0, #4
    6014:	428b      	cmp	r3, r1
    6016:	d301      	bcc.n	601c <__aeabi_uidiv+0xcc>
    6018:	010b      	lsls	r3, r1, #4
    601a:	1ac0      	subs	r0, r0, r3
    601c:	4152      	adcs	r2, r2
    601e:	08c3      	lsrs	r3, r0, #3
    6020:	428b      	cmp	r3, r1
    6022:	d301      	bcc.n	6028 <__aeabi_uidiv+0xd8>
    6024:	00cb      	lsls	r3, r1, #3
    6026:	1ac0      	subs	r0, r0, r3
    6028:	4152      	adcs	r2, r2
    602a:	0883      	lsrs	r3, r0, #2
    602c:	428b      	cmp	r3, r1
    602e:	d301      	bcc.n	6034 <__aeabi_uidiv+0xe4>
    6030:	008b      	lsls	r3, r1, #2
    6032:	1ac0      	subs	r0, r0, r3
    6034:	4152      	adcs	r2, r2
    6036:	0843      	lsrs	r3, r0, #1
    6038:	428b      	cmp	r3, r1
    603a:	d301      	bcc.n	6040 <__aeabi_uidiv+0xf0>
    603c:	004b      	lsls	r3, r1, #1
    603e:	1ac0      	subs	r0, r0, r3
    6040:	4152      	adcs	r2, r2
    6042:	1a41      	subs	r1, r0, r1
    6044:	d200      	bcs.n	6048 <__aeabi_uidiv+0xf8>
    6046:	4601      	mov	r1, r0
    6048:	4152      	adcs	r2, r2
    604a:	4610      	mov	r0, r2
    604c:	4770      	bx	lr
    604e:	e7ff      	b.n	6050 <__aeabi_uidiv+0x100>
    6050:	b501      	push	{r0, lr}
    6052:	2000      	movs	r0, #0
    6054:	f000 f8f0 	bl	6238 <__aeabi_idiv0>
    6058:	bd02      	pop	{r1, pc}
    605a:	46c0      	nop			; (mov r8, r8)

0000605c <__aeabi_uidivmod>:
    605c:	2900      	cmp	r1, #0
    605e:	d0f7      	beq.n	6050 <__aeabi_uidiv+0x100>
    6060:	e776      	b.n	5f50 <__aeabi_uidiv>
    6062:	4770      	bx	lr

00006064 <__aeabi_idiv>:
    6064:	4603      	mov	r3, r0
    6066:	430b      	orrs	r3, r1
    6068:	d47f      	bmi.n	616a <__aeabi_idiv+0x106>
    606a:	2200      	movs	r2, #0
    606c:	0843      	lsrs	r3, r0, #1
    606e:	428b      	cmp	r3, r1
    6070:	d374      	bcc.n	615c <__aeabi_idiv+0xf8>
    6072:	0903      	lsrs	r3, r0, #4
    6074:	428b      	cmp	r3, r1
    6076:	d35f      	bcc.n	6138 <__aeabi_idiv+0xd4>
    6078:	0a03      	lsrs	r3, r0, #8
    607a:	428b      	cmp	r3, r1
    607c:	d344      	bcc.n	6108 <__aeabi_idiv+0xa4>
    607e:	0b03      	lsrs	r3, r0, #12
    6080:	428b      	cmp	r3, r1
    6082:	d328      	bcc.n	60d6 <__aeabi_idiv+0x72>
    6084:	0c03      	lsrs	r3, r0, #16
    6086:	428b      	cmp	r3, r1
    6088:	d30d      	bcc.n	60a6 <__aeabi_idiv+0x42>
    608a:	22ff      	movs	r2, #255	; 0xff
    608c:	0209      	lsls	r1, r1, #8
    608e:	ba12      	rev	r2, r2
    6090:	0c03      	lsrs	r3, r0, #16
    6092:	428b      	cmp	r3, r1
    6094:	d302      	bcc.n	609c <__aeabi_idiv+0x38>
    6096:	1212      	asrs	r2, r2, #8
    6098:	0209      	lsls	r1, r1, #8
    609a:	d065      	beq.n	6168 <__aeabi_idiv+0x104>
    609c:	0b03      	lsrs	r3, r0, #12
    609e:	428b      	cmp	r3, r1
    60a0:	d319      	bcc.n	60d6 <__aeabi_idiv+0x72>
    60a2:	e000      	b.n	60a6 <__aeabi_idiv+0x42>
    60a4:	0a09      	lsrs	r1, r1, #8
    60a6:	0bc3      	lsrs	r3, r0, #15
    60a8:	428b      	cmp	r3, r1
    60aa:	d301      	bcc.n	60b0 <__aeabi_idiv+0x4c>
    60ac:	03cb      	lsls	r3, r1, #15
    60ae:	1ac0      	subs	r0, r0, r3
    60b0:	4152      	adcs	r2, r2
    60b2:	0b83      	lsrs	r3, r0, #14
    60b4:	428b      	cmp	r3, r1
    60b6:	d301      	bcc.n	60bc <__aeabi_idiv+0x58>
    60b8:	038b      	lsls	r3, r1, #14
    60ba:	1ac0      	subs	r0, r0, r3
    60bc:	4152      	adcs	r2, r2
    60be:	0b43      	lsrs	r3, r0, #13
    60c0:	428b      	cmp	r3, r1
    60c2:	d301      	bcc.n	60c8 <__aeabi_idiv+0x64>
    60c4:	034b      	lsls	r3, r1, #13
    60c6:	1ac0      	subs	r0, r0, r3
    60c8:	4152      	adcs	r2, r2
    60ca:	0b03      	lsrs	r3, r0, #12
    60cc:	428b      	cmp	r3, r1
    60ce:	d301      	bcc.n	60d4 <__aeabi_idiv+0x70>
    60d0:	030b      	lsls	r3, r1, #12
    60d2:	1ac0      	subs	r0, r0, r3
    60d4:	4152      	adcs	r2, r2
    60d6:	0ac3      	lsrs	r3, r0, #11
    60d8:	428b      	cmp	r3, r1
    60da:	d301      	bcc.n	60e0 <__aeabi_idiv+0x7c>
    60dc:	02cb      	lsls	r3, r1, #11
    60de:	1ac0      	subs	r0, r0, r3
    60e0:	4152      	adcs	r2, r2
    60e2:	0a83      	lsrs	r3, r0, #10
    60e4:	428b      	cmp	r3, r1
    60e6:	d301      	bcc.n	60ec <__aeabi_idiv+0x88>
    60e8:	028b      	lsls	r3, r1, #10
    60ea:	1ac0      	subs	r0, r0, r3
    60ec:	4152      	adcs	r2, r2
    60ee:	0a43      	lsrs	r3, r0, #9
    60f0:	428b      	cmp	r3, r1
    60f2:	d301      	bcc.n	60f8 <__aeabi_idiv+0x94>
    60f4:	024b      	lsls	r3, r1, #9
    60f6:	1ac0      	subs	r0, r0, r3
    60f8:	4152      	adcs	r2, r2
    60fa:	0a03      	lsrs	r3, r0, #8
    60fc:	428b      	cmp	r3, r1
    60fe:	d301      	bcc.n	6104 <__aeabi_idiv+0xa0>
    6100:	020b      	lsls	r3, r1, #8
    6102:	1ac0      	subs	r0, r0, r3
    6104:	4152      	adcs	r2, r2
    6106:	d2cd      	bcs.n	60a4 <__aeabi_idiv+0x40>
    6108:	09c3      	lsrs	r3, r0, #7
    610a:	428b      	cmp	r3, r1
    610c:	d301      	bcc.n	6112 <__aeabi_idiv+0xae>
    610e:	01cb      	lsls	r3, r1, #7
    6110:	1ac0      	subs	r0, r0, r3
    6112:	4152      	adcs	r2, r2
    6114:	0983      	lsrs	r3, r0, #6
    6116:	428b      	cmp	r3, r1
    6118:	d301      	bcc.n	611e <__aeabi_idiv+0xba>
    611a:	018b      	lsls	r3, r1, #6
    611c:	1ac0      	subs	r0, r0, r3
    611e:	4152      	adcs	r2, r2
    6120:	0943      	lsrs	r3, r0, #5
    6122:	428b      	cmp	r3, r1
    6124:	d301      	bcc.n	612a <__aeabi_idiv+0xc6>
    6126:	014b      	lsls	r3, r1, #5
    6128:	1ac0      	subs	r0, r0, r3
    612a:	4152      	adcs	r2, r2
    612c:	0903      	lsrs	r3, r0, #4
    612e:	428b      	cmp	r3, r1
    6130:	d301      	bcc.n	6136 <__aeabi_idiv+0xd2>
    6132:	010b      	lsls	r3, r1, #4
    6134:	1ac0      	subs	r0, r0, r3
    6136:	4152      	adcs	r2, r2
    6138:	08c3      	lsrs	r3, r0, #3
    613a:	428b      	cmp	r3, r1
    613c:	d301      	bcc.n	6142 <__aeabi_idiv+0xde>
    613e:	00cb      	lsls	r3, r1, #3
    6140:	1ac0      	subs	r0, r0, r3
    6142:	4152      	adcs	r2, r2
    6144:	0883      	lsrs	r3, r0, #2
    6146:	428b      	cmp	r3, r1
    6148:	d301      	bcc.n	614e <__aeabi_idiv+0xea>
    614a:	008b      	lsls	r3, r1, #2
    614c:	1ac0      	subs	r0, r0, r3
    614e:	4152      	adcs	r2, r2
    6150:	0843      	lsrs	r3, r0, #1
    6152:	428b      	cmp	r3, r1
    6154:	d301      	bcc.n	615a <__aeabi_idiv+0xf6>
    6156:	004b      	lsls	r3, r1, #1
    6158:	1ac0      	subs	r0, r0, r3
    615a:	4152      	adcs	r2, r2
    615c:	1a41      	subs	r1, r0, r1
    615e:	d200      	bcs.n	6162 <__aeabi_idiv+0xfe>
    6160:	4601      	mov	r1, r0
    6162:	4152      	adcs	r2, r2
    6164:	4610      	mov	r0, r2
    6166:	4770      	bx	lr
    6168:	e05d      	b.n	6226 <__aeabi_idiv+0x1c2>
    616a:	0fca      	lsrs	r2, r1, #31
    616c:	d000      	beq.n	6170 <__aeabi_idiv+0x10c>
    616e:	4249      	negs	r1, r1
    6170:	1003      	asrs	r3, r0, #32
    6172:	d300      	bcc.n	6176 <__aeabi_idiv+0x112>
    6174:	4240      	negs	r0, r0
    6176:	4053      	eors	r3, r2
    6178:	2200      	movs	r2, #0
    617a:	469c      	mov	ip, r3
    617c:	0903      	lsrs	r3, r0, #4
    617e:	428b      	cmp	r3, r1
    6180:	d32d      	bcc.n	61de <__aeabi_idiv+0x17a>
    6182:	0a03      	lsrs	r3, r0, #8
    6184:	428b      	cmp	r3, r1
    6186:	d312      	bcc.n	61ae <__aeabi_idiv+0x14a>
    6188:	22fc      	movs	r2, #252	; 0xfc
    618a:	0189      	lsls	r1, r1, #6
    618c:	ba12      	rev	r2, r2
    618e:	0a03      	lsrs	r3, r0, #8
    6190:	428b      	cmp	r3, r1
    6192:	d30c      	bcc.n	61ae <__aeabi_idiv+0x14a>
    6194:	0189      	lsls	r1, r1, #6
    6196:	1192      	asrs	r2, r2, #6
    6198:	428b      	cmp	r3, r1
    619a:	d308      	bcc.n	61ae <__aeabi_idiv+0x14a>
    619c:	0189      	lsls	r1, r1, #6
    619e:	1192      	asrs	r2, r2, #6
    61a0:	428b      	cmp	r3, r1
    61a2:	d304      	bcc.n	61ae <__aeabi_idiv+0x14a>
    61a4:	0189      	lsls	r1, r1, #6
    61a6:	d03a      	beq.n	621e <__aeabi_idiv+0x1ba>
    61a8:	1192      	asrs	r2, r2, #6
    61aa:	e000      	b.n	61ae <__aeabi_idiv+0x14a>
    61ac:	0989      	lsrs	r1, r1, #6
    61ae:	09c3      	lsrs	r3, r0, #7
    61b0:	428b      	cmp	r3, r1
    61b2:	d301      	bcc.n	61b8 <__aeabi_idiv+0x154>
    61b4:	01cb      	lsls	r3, r1, #7
    61b6:	1ac0      	subs	r0, r0, r3
    61b8:	4152      	adcs	r2, r2
    61ba:	0983      	lsrs	r3, r0, #6
    61bc:	428b      	cmp	r3, r1
    61be:	d301      	bcc.n	61c4 <__aeabi_idiv+0x160>
    61c0:	018b      	lsls	r3, r1, #6
    61c2:	1ac0      	subs	r0, r0, r3
    61c4:	4152      	adcs	r2, r2
    61c6:	0943      	lsrs	r3, r0, #5
    61c8:	428b      	cmp	r3, r1
    61ca:	d301      	bcc.n	61d0 <__aeabi_idiv+0x16c>
    61cc:	014b      	lsls	r3, r1, #5
    61ce:	1ac0      	subs	r0, r0, r3
    61d0:	4152      	adcs	r2, r2
    61d2:	0903      	lsrs	r3, r0, #4
    61d4:	428b      	cmp	r3, r1
    61d6:	d301      	bcc.n	61dc <__aeabi_idiv+0x178>
    61d8:	010b      	lsls	r3, r1, #4
    61da:	1ac0      	subs	r0, r0, r3
    61dc:	4152      	adcs	r2, r2
    61de:	08c3      	lsrs	r3, r0, #3
    61e0:	428b      	cmp	r3, r1
    61e2:	d301      	bcc.n	61e8 <__aeabi_idiv+0x184>
    61e4:	00cb      	lsls	r3, r1, #3
    61e6:	1ac0      	subs	r0, r0, r3
    61e8:	4152      	adcs	r2, r2
    61ea:	0883      	lsrs	r3, r0, #2
    61ec:	428b      	cmp	r3, r1
    61ee:	d301      	bcc.n	61f4 <__aeabi_idiv+0x190>
    61f0:	008b      	lsls	r3, r1, #2
    61f2:	1ac0      	subs	r0, r0, r3
    61f4:	4152      	adcs	r2, r2
    61f6:	d2d9      	bcs.n	61ac <__aeabi_idiv+0x148>
    61f8:	0843      	lsrs	r3, r0, #1
    61fa:	428b      	cmp	r3, r1
    61fc:	d301      	bcc.n	6202 <__aeabi_idiv+0x19e>
    61fe:	004b      	lsls	r3, r1, #1
    6200:	1ac0      	subs	r0, r0, r3
    6202:	4152      	adcs	r2, r2
    6204:	1a41      	subs	r1, r0, r1
    6206:	d200      	bcs.n	620a <__aeabi_idiv+0x1a6>
    6208:	4601      	mov	r1, r0
    620a:	4663      	mov	r3, ip
    620c:	4152      	adcs	r2, r2
    620e:	105b      	asrs	r3, r3, #1
    6210:	4610      	mov	r0, r2
    6212:	d301      	bcc.n	6218 <__aeabi_idiv+0x1b4>
    6214:	4240      	negs	r0, r0
    6216:	2b00      	cmp	r3, #0
    6218:	d500      	bpl.n	621c <__aeabi_idiv+0x1b8>
    621a:	4249      	negs	r1, r1
    621c:	4770      	bx	lr
    621e:	4663      	mov	r3, ip
    6220:	105b      	asrs	r3, r3, #1
    6222:	d300      	bcc.n	6226 <__aeabi_idiv+0x1c2>
    6224:	4240      	negs	r0, r0
    6226:	b501      	push	{r0, lr}
    6228:	2000      	movs	r0, #0
    622a:	f000 f805 	bl	6238 <__aeabi_idiv0>
    622e:	bd02      	pop	{r1, pc}

00006230 <__aeabi_idivmod>:
    6230:	2900      	cmp	r1, #0
    6232:	d0f8      	beq.n	6226 <__aeabi_idiv+0x1c2>
    6234:	e716      	b.n	6064 <__aeabi_idiv>
    6236:	4770      	bx	lr

00006238 <__aeabi_idiv0>:
    6238:	4770      	bx	lr
    623a:	46c0      	nop			; (mov r8, r8)

0000623c <__aeabi_cdrcmple>:
    623c:	4684      	mov	ip, r0
    623e:	1c10      	adds	r0, r2, #0
    6240:	4662      	mov	r2, ip
    6242:	468c      	mov	ip, r1
    6244:	1c19      	adds	r1, r3, #0
    6246:	4663      	mov	r3, ip
    6248:	e000      	b.n	624c <__aeabi_cdcmpeq>
    624a:	46c0      	nop			; (mov r8, r8)

0000624c <__aeabi_cdcmpeq>:
    624c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    624e:	f001 fc1b 	bl	7a88 <__ledf2>
    6252:	2800      	cmp	r0, #0
    6254:	d401      	bmi.n	625a <__aeabi_cdcmpeq+0xe>
    6256:	2100      	movs	r1, #0
    6258:	42c8      	cmn	r0, r1
    625a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000625c <__aeabi_dcmpeq>:
    625c:	b510      	push	{r4, lr}
    625e:	f001 fb6f 	bl	7940 <__eqdf2>
    6262:	4240      	negs	r0, r0
    6264:	3001      	adds	r0, #1
    6266:	bd10      	pop	{r4, pc}

00006268 <__aeabi_dcmplt>:
    6268:	b510      	push	{r4, lr}
    626a:	f001 fc0d 	bl	7a88 <__ledf2>
    626e:	2800      	cmp	r0, #0
    6270:	db01      	blt.n	6276 <__aeabi_dcmplt+0xe>
    6272:	2000      	movs	r0, #0
    6274:	bd10      	pop	{r4, pc}
    6276:	2001      	movs	r0, #1
    6278:	bd10      	pop	{r4, pc}
    627a:	46c0      	nop			; (mov r8, r8)

0000627c <__aeabi_dcmple>:
    627c:	b510      	push	{r4, lr}
    627e:	f001 fc03 	bl	7a88 <__ledf2>
    6282:	2800      	cmp	r0, #0
    6284:	dd01      	ble.n	628a <__aeabi_dcmple+0xe>
    6286:	2000      	movs	r0, #0
    6288:	bd10      	pop	{r4, pc}
    628a:	2001      	movs	r0, #1
    628c:	bd10      	pop	{r4, pc}
    628e:	46c0      	nop			; (mov r8, r8)

00006290 <__aeabi_dcmpgt>:
    6290:	b510      	push	{r4, lr}
    6292:	f001 fb95 	bl	79c0 <__gedf2>
    6296:	2800      	cmp	r0, #0
    6298:	dc01      	bgt.n	629e <__aeabi_dcmpgt+0xe>
    629a:	2000      	movs	r0, #0
    629c:	bd10      	pop	{r4, pc}
    629e:	2001      	movs	r0, #1
    62a0:	bd10      	pop	{r4, pc}
    62a2:	46c0      	nop			; (mov r8, r8)

000062a4 <__aeabi_dcmpge>:
    62a4:	b510      	push	{r4, lr}
    62a6:	f001 fb8b 	bl	79c0 <__gedf2>
    62aa:	2800      	cmp	r0, #0
    62ac:	da01      	bge.n	62b2 <__aeabi_dcmpge+0xe>
    62ae:	2000      	movs	r0, #0
    62b0:	bd10      	pop	{r4, pc}
    62b2:	2001      	movs	r0, #1
    62b4:	bd10      	pop	{r4, pc}
    62b6:	46c0      	nop			; (mov r8, r8)

000062b8 <__aeabi_cfrcmple>:
    62b8:	4684      	mov	ip, r0
    62ba:	1c08      	adds	r0, r1, #0
    62bc:	4661      	mov	r1, ip
    62be:	e7ff      	b.n	62c0 <__aeabi_cfcmpeq>

000062c0 <__aeabi_cfcmpeq>:
    62c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    62c2:	f000 fb5b 	bl	697c <__lesf2>
    62c6:	2800      	cmp	r0, #0
    62c8:	d401      	bmi.n	62ce <__aeabi_cfcmpeq+0xe>
    62ca:	2100      	movs	r1, #0
    62cc:	42c8      	cmn	r0, r1
    62ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000062d0 <__aeabi_fcmpeq>:
    62d0:	b510      	push	{r4, lr}
    62d2:	f000 fae7 	bl	68a4 <__eqsf2>
    62d6:	4240      	negs	r0, r0
    62d8:	3001      	adds	r0, #1
    62da:	bd10      	pop	{r4, pc}

000062dc <__aeabi_fcmplt>:
    62dc:	b510      	push	{r4, lr}
    62de:	f000 fb4d 	bl	697c <__lesf2>
    62e2:	2800      	cmp	r0, #0
    62e4:	db01      	blt.n	62ea <__aeabi_fcmplt+0xe>
    62e6:	2000      	movs	r0, #0
    62e8:	bd10      	pop	{r4, pc}
    62ea:	2001      	movs	r0, #1
    62ec:	bd10      	pop	{r4, pc}
    62ee:	46c0      	nop			; (mov r8, r8)

000062f0 <__aeabi_fcmple>:
    62f0:	b510      	push	{r4, lr}
    62f2:	f000 fb43 	bl	697c <__lesf2>
    62f6:	2800      	cmp	r0, #0
    62f8:	dd01      	ble.n	62fe <__aeabi_fcmple+0xe>
    62fa:	2000      	movs	r0, #0
    62fc:	bd10      	pop	{r4, pc}
    62fe:	2001      	movs	r0, #1
    6300:	bd10      	pop	{r4, pc}
    6302:	46c0      	nop			; (mov r8, r8)

00006304 <__aeabi_fcmpgt>:
    6304:	b510      	push	{r4, lr}
    6306:	f000 faf5 	bl	68f4 <__gesf2>
    630a:	2800      	cmp	r0, #0
    630c:	dc01      	bgt.n	6312 <__aeabi_fcmpgt+0xe>
    630e:	2000      	movs	r0, #0
    6310:	bd10      	pop	{r4, pc}
    6312:	2001      	movs	r0, #1
    6314:	bd10      	pop	{r4, pc}
    6316:	46c0      	nop			; (mov r8, r8)

00006318 <__aeabi_fcmpge>:
    6318:	b510      	push	{r4, lr}
    631a:	f000 faeb 	bl	68f4 <__gesf2>
    631e:	2800      	cmp	r0, #0
    6320:	da01      	bge.n	6326 <__aeabi_fcmpge+0xe>
    6322:	2000      	movs	r0, #0
    6324:	bd10      	pop	{r4, pc}
    6326:	2001      	movs	r0, #1
    6328:	bd10      	pop	{r4, pc}
    632a:	46c0      	nop			; (mov r8, r8)

0000632c <__aeabi_lmul>:
    632c:	b5f0      	push	{r4, r5, r6, r7, lr}
    632e:	464f      	mov	r7, r9
    6330:	4646      	mov	r6, r8
    6332:	b4c0      	push	{r6, r7}
    6334:	0416      	lsls	r6, r2, #16
    6336:	0c36      	lsrs	r6, r6, #16
    6338:	4699      	mov	r9, r3
    633a:	0033      	movs	r3, r6
    633c:	0405      	lsls	r5, r0, #16
    633e:	0c2c      	lsrs	r4, r5, #16
    6340:	0c07      	lsrs	r7, r0, #16
    6342:	0c15      	lsrs	r5, r2, #16
    6344:	4363      	muls	r3, r4
    6346:	437e      	muls	r6, r7
    6348:	436f      	muls	r7, r5
    634a:	4365      	muls	r5, r4
    634c:	0c1c      	lsrs	r4, r3, #16
    634e:	19ad      	adds	r5, r5, r6
    6350:	1964      	adds	r4, r4, r5
    6352:	469c      	mov	ip, r3
    6354:	42a6      	cmp	r6, r4
    6356:	d903      	bls.n	6360 <__aeabi_lmul+0x34>
    6358:	2380      	movs	r3, #128	; 0x80
    635a:	025b      	lsls	r3, r3, #9
    635c:	4698      	mov	r8, r3
    635e:	4447      	add	r7, r8
    6360:	4663      	mov	r3, ip
    6362:	0c25      	lsrs	r5, r4, #16
    6364:	19ef      	adds	r7, r5, r7
    6366:	041d      	lsls	r5, r3, #16
    6368:	464b      	mov	r3, r9
    636a:	434a      	muls	r2, r1
    636c:	4343      	muls	r3, r0
    636e:	0c2d      	lsrs	r5, r5, #16
    6370:	0424      	lsls	r4, r4, #16
    6372:	1964      	adds	r4, r4, r5
    6374:	1899      	adds	r1, r3, r2
    6376:	19c9      	adds	r1, r1, r7
    6378:	0020      	movs	r0, r4
    637a:	bc0c      	pop	{r2, r3}
    637c:	4690      	mov	r8, r2
    637e:	4699      	mov	r9, r3
    6380:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6382:	46c0      	nop			; (mov r8, r8)

00006384 <__aeabi_fadd>:
    6384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6386:	024a      	lsls	r2, r1, #9
    6388:	0243      	lsls	r3, r0, #9
    638a:	0044      	lsls	r4, r0, #1
    638c:	004e      	lsls	r6, r1, #1
    638e:	0fc5      	lsrs	r5, r0, #31
    6390:	0e24      	lsrs	r4, r4, #24
    6392:	0028      	movs	r0, r5
    6394:	099b      	lsrs	r3, r3, #6
    6396:	0e36      	lsrs	r6, r6, #24
    6398:	0fc9      	lsrs	r1, r1, #31
    639a:	0992      	lsrs	r2, r2, #6
    639c:	428d      	cmp	r5, r1
    639e:	d059      	beq.n	6454 <__aeabi_fadd+0xd0>
    63a0:	1ba0      	subs	r0, r4, r6
    63a2:	2800      	cmp	r0, #0
    63a4:	dc00      	bgt.n	63a8 <__aeabi_fadd+0x24>
    63a6:	e08d      	b.n	64c4 <__aeabi_fadd+0x140>
    63a8:	2e00      	cmp	r6, #0
    63aa:	d11a      	bne.n	63e2 <__aeabi_fadd+0x5e>
    63ac:	2a00      	cmp	r2, #0
    63ae:	d000      	beq.n	63b2 <__aeabi_fadd+0x2e>
    63b0:	e079      	b.n	64a6 <__aeabi_fadd+0x122>
    63b2:	075a      	lsls	r2, r3, #29
    63b4:	d004      	beq.n	63c0 <__aeabi_fadd+0x3c>
    63b6:	220f      	movs	r2, #15
    63b8:	401a      	ands	r2, r3
    63ba:	2a04      	cmp	r2, #4
    63bc:	d000      	beq.n	63c0 <__aeabi_fadd+0x3c>
    63be:	3304      	adds	r3, #4
    63c0:	015a      	lsls	r2, r3, #5
    63c2:	d538      	bpl.n	6436 <__aeabi_fadd+0xb2>
    63c4:	3401      	adds	r4, #1
    63c6:	2cff      	cmp	r4, #255	; 0xff
    63c8:	d100      	bne.n	63cc <__aeabi_fadd+0x48>
    63ca:	e089      	b.n	64e0 <__aeabi_fadd+0x15c>
    63cc:	0028      	movs	r0, r5
    63ce:	019b      	lsls	r3, r3, #6
    63d0:	0a5b      	lsrs	r3, r3, #9
    63d2:	b2e4      	uxtb	r4, r4
    63d4:	025b      	lsls	r3, r3, #9
    63d6:	05e4      	lsls	r4, r4, #23
    63d8:	0a5b      	lsrs	r3, r3, #9
    63da:	4323      	orrs	r3, r4
    63dc:	07c0      	lsls	r0, r0, #31
    63de:	4318      	orrs	r0, r3
    63e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    63e2:	2cff      	cmp	r4, #255	; 0xff
    63e4:	d0e5      	beq.n	63b2 <__aeabi_fadd+0x2e>
    63e6:	2180      	movs	r1, #128	; 0x80
    63e8:	04c9      	lsls	r1, r1, #19
    63ea:	430a      	orrs	r2, r1
    63ec:	281b      	cmp	r0, #27
    63ee:	dd00      	ble.n	63f2 <__aeabi_fadd+0x6e>
    63f0:	e089      	b.n	6506 <__aeabi_fadd+0x182>
    63f2:	0016      	movs	r6, r2
    63f4:	2120      	movs	r1, #32
    63f6:	40c6      	lsrs	r6, r0
    63f8:	1a08      	subs	r0, r1, r0
    63fa:	4082      	lsls	r2, r0
    63fc:	1e51      	subs	r1, r2, #1
    63fe:	418a      	sbcs	r2, r1
    6400:	4332      	orrs	r2, r6
    6402:	1a9b      	subs	r3, r3, r2
    6404:	015a      	lsls	r2, r3, #5
    6406:	d514      	bpl.n	6432 <__aeabi_fadd+0xae>
    6408:	019b      	lsls	r3, r3, #6
    640a:	099e      	lsrs	r6, r3, #6
    640c:	0030      	movs	r0, r6
    640e:	f002 fb23 	bl	8a58 <__clzsi2>
    6412:	3805      	subs	r0, #5
    6414:	4086      	lsls	r6, r0
    6416:	4284      	cmp	r4, r0
    6418:	dc65      	bgt.n	64e6 <__aeabi_fadd+0x162>
    641a:	1b04      	subs	r4, r0, r4
    641c:	0033      	movs	r3, r6
    641e:	2020      	movs	r0, #32
    6420:	3401      	adds	r4, #1
    6422:	40e3      	lsrs	r3, r4
    6424:	1b04      	subs	r4, r0, r4
    6426:	40a6      	lsls	r6, r4
    6428:	1e72      	subs	r2, r6, #1
    642a:	4196      	sbcs	r6, r2
    642c:	2400      	movs	r4, #0
    642e:	4333      	orrs	r3, r6
    6430:	e7bf      	b.n	63b2 <__aeabi_fadd+0x2e>
    6432:	075a      	lsls	r2, r3, #29
    6434:	d1bf      	bne.n	63b6 <__aeabi_fadd+0x32>
    6436:	08df      	lsrs	r7, r3, #3
    6438:	0028      	movs	r0, r5
    643a:	2cff      	cmp	r4, #255	; 0xff
    643c:	d12f      	bne.n	649e <__aeabi_fadd+0x11a>
    643e:	2f00      	cmp	r7, #0
    6440:	d100      	bne.n	6444 <__aeabi_fadd+0xc0>
    6442:	e087      	b.n	6554 <__aeabi_fadd+0x1d0>
    6444:	2280      	movs	r2, #128	; 0x80
    6446:	03d2      	lsls	r2, r2, #15
    6448:	0013      	movs	r3, r2
    644a:	433b      	orrs	r3, r7
    644c:	025b      	lsls	r3, r3, #9
    644e:	0a5b      	lsrs	r3, r3, #9
    6450:	24ff      	movs	r4, #255	; 0xff
    6452:	e7bf      	b.n	63d4 <__aeabi_fadd+0x50>
    6454:	1ba1      	subs	r1, r4, r6
    6456:	2900      	cmp	r1, #0
    6458:	dd49      	ble.n	64ee <__aeabi_fadd+0x16a>
    645a:	2e00      	cmp	r6, #0
    645c:	d029      	beq.n	64b2 <__aeabi_fadd+0x12e>
    645e:	2cff      	cmp	r4, #255	; 0xff
    6460:	d0a7      	beq.n	63b2 <__aeabi_fadd+0x2e>
    6462:	2680      	movs	r6, #128	; 0x80
    6464:	04f6      	lsls	r6, r6, #19
    6466:	4332      	orrs	r2, r6
    6468:	291b      	cmp	r1, #27
    646a:	dd00      	ble.n	646e <__aeabi_fadd+0xea>
    646c:	e08d      	b.n	658a <__aeabi_fadd+0x206>
    646e:	0017      	movs	r7, r2
    6470:	2620      	movs	r6, #32
    6472:	40cf      	lsrs	r7, r1
    6474:	1a71      	subs	r1, r6, r1
    6476:	408a      	lsls	r2, r1
    6478:	1e51      	subs	r1, r2, #1
    647a:	418a      	sbcs	r2, r1
    647c:	433a      	orrs	r2, r7
    647e:	189b      	adds	r3, r3, r2
    6480:	015a      	lsls	r2, r3, #5
    6482:	d5d6      	bpl.n	6432 <__aeabi_fadd+0xae>
    6484:	3401      	adds	r4, #1
    6486:	2cff      	cmp	r4, #255	; 0xff
    6488:	d064      	beq.n	6554 <__aeabi_fadd+0x1d0>
    648a:	2201      	movs	r2, #1
    648c:	4976      	ldr	r1, [pc, #472]	; (6668 <__aeabi_fadd+0x2e4>)
    648e:	401a      	ands	r2, r3
    6490:	085b      	lsrs	r3, r3, #1
    6492:	400b      	ands	r3, r1
    6494:	4313      	orrs	r3, r2
    6496:	e78c      	b.n	63b2 <__aeabi_fadd+0x2e>
    6498:	1e03      	subs	r3, r0, #0
    649a:	d1ca      	bne.n	6432 <__aeabi_fadd+0xae>
    649c:	2000      	movs	r0, #0
    649e:	027b      	lsls	r3, r7, #9
    64a0:	0a5b      	lsrs	r3, r3, #9
    64a2:	b2e4      	uxtb	r4, r4
    64a4:	e796      	b.n	63d4 <__aeabi_fadd+0x50>
    64a6:	3801      	subs	r0, #1
    64a8:	2800      	cmp	r0, #0
    64aa:	d0aa      	beq.n	6402 <__aeabi_fadd+0x7e>
    64ac:	2cff      	cmp	r4, #255	; 0xff
    64ae:	d19d      	bne.n	63ec <__aeabi_fadd+0x68>
    64b0:	e77f      	b.n	63b2 <__aeabi_fadd+0x2e>
    64b2:	2a00      	cmp	r2, #0
    64b4:	d100      	bne.n	64b8 <__aeabi_fadd+0x134>
    64b6:	e77c      	b.n	63b2 <__aeabi_fadd+0x2e>
    64b8:	3901      	subs	r1, #1
    64ba:	2900      	cmp	r1, #0
    64bc:	d0df      	beq.n	647e <__aeabi_fadd+0xfa>
    64be:	2cff      	cmp	r4, #255	; 0xff
    64c0:	d1d2      	bne.n	6468 <__aeabi_fadd+0xe4>
    64c2:	e776      	b.n	63b2 <__aeabi_fadd+0x2e>
    64c4:	2800      	cmp	r0, #0
    64c6:	d120      	bne.n	650a <__aeabi_fadd+0x186>
    64c8:	1c60      	adds	r0, r4, #1
    64ca:	b2c0      	uxtb	r0, r0
    64cc:	2801      	cmp	r0, #1
    64ce:	dd53      	ble.n	6578 <__aeabi_fadd+0x1f4>
    64d0:	2780      	movs	r7, #128	; 0x80
    64d2:	1a9e      	subs	r6, r3, r2
    64d4:	04ff      	lsls	r7, r7, #19
    64d6:	4037      	ands	r7, r6
    64d8:	d02f      	beq.n	653a <__aeabi_fadd+0x1b6>
    64da:	1ad6      	subs	r6, r2, r3
    64dc:	000d      	movs	r5, r1
    64de:	e795      	b.n	640c <__aeabi_fadd+0x88>
    64e0:	0028      	movs	r0, r5
    64e2:	2300      	movs	r3, #0
    64e4:	e776      	b.n	63d4 <__aeabi_fadd+0x50>
    64e6:	4b61      	ldr	r3, [pc, #388]	; (666c <__aeabi_fadd+0x2e8>)
    64e8:	1a24      	subs	r4, r4, r0
    64ea:	4033      	ands	r3, r6
    64ec:	e761      	b.n	63b2 <__aeabi_fadd+0x2e>
    64ee:	2900      	cmp	r1, #0
    64f0:	d14d      	bne.n	658e <__aeabi_fadd+0x20a>
    64f2:	1c61      	adds	r1, r4, #1
    64f4:	b2ce      	uxtb	r6, r1
    64f6:	2e01      	cmp	r6, #1
    64f8:	dd2f      	ble.n	655a <__aeabi_fadd+0x1d6>
    64fa:	29ff      	cmp	r1, #255	; 0xff
    64fc:	d02a      	beq.n	6554 <__aeabi_fadd+0x1d0>
    64fe:	189b      	adds	r3, r3, r2
    6500:	085b      	lsrs	r3, r3, #1
    6502:	000c      	movs	r4, r1
    6504:	e755      	b.n	63b2 <__aeabi_fadd+0x2e>
    6506:	2201      	movs	r2, #1
    6508:	e77b      	b.n	6402 <__aeabi_fadd+0x7e>
    650a:	2c00      	cmp	r4, #0
    650c:	d11b      	bne.n	6546 <__aeabi_fadd+0x1c2>
    650e:	2b00      	cmp	r3, #0
    6510:	d05b      	beq.n	65ca <__aeabi_fadd+0x246>
    6512:	43c0      	mvns	r0, r0
    6514:	2800      	cmp	r0, #0
    6516:	d00c      	beq.n	6532 <__aeabi_fadd+0x1ae>
    6518:	2eff      	cmp	r6, #255	; 0xff
    651a:	d07e      	beq.n	661a <__aeabi_fadd+0x296>
    651c:	281b      	cmp	r0, #27
    651e:	dd00      	ble.n	6522 <__aeabi_fadd+0x19e>
    6520:	e092      	b.n	6648 <__aeabi_fadd+0x2c4>
    6522:	001d      	movs	r5, r3
    6524:	2420      	movs	r4, #32
    6526:	40c5      	lsrs	r5, r0
    6528:	1a20      	subs	r0, r4, r0
    652a:	4083      	lsls	r3, r0
    652c:	1e58      	subs	r0, r3, #1
    652e:	4183      	sbcs	r3, r0
    6530:	432b      	orrs	r3, r5
    6532:	1ad3      	subs	r3, r2, r3
    6534:	0034      	movs	r4, r6
    6536:	000d      	movs	r5, r1
    6538:	e764      	b.n	6404 <__aeabi_fadd+0x80>
    653a:	2e00      	cmp	r6, #0
    653c:	d000      	beq.n	6540 <__aeabi_fadd+0x1bc>
    653e:	e765      	b.n	640c <__aeabi_fadd+0x88>
    6540:	2000      	movs	r0, #0
    6542:	2400      	movs	r4, #0
    6544:	e7ab      	b.n	649e <__aeabi_fadd+0x11a>
    6546:	2eff      	cmp	r6, #255	; 0xff
    6548:	d067      	beq.n	661a <__aeabi_fadd+0x296>
    654a:	2480      	movs	r4, #128	; 0x80
    654c:	04e4      	lsls	r4, r4, #19
    654e:	4240      	negs	r0, r0
    6550:	4323      	orrs	r3, r4
    6552:	e7e3      	b.n	651c <__aeabi_fadd+0x198>
    6554:	24ff      	movs	r4, #255	; 0xff
    6556:	2300      	movs	r3, #0
    6558:	e73c      	b.n	63d4 <__aeabi_fadd+0x50>
    655a:	2c00      	cmp	r4, #0
    655c:	d161      	bne.n	6622 <__aeabi_fadd+0x29e>
    655e:	2b00      	cmp	r3, #0
    6560:	d07e      	beq.n	6660 <__aeabi_fadd+0x2dc>
    6562:	2a00      	cmp	r2, #0
    6564:	d100      	bne.n	6568 <__aeabi_fadd+0x1e4>
    6566:	e724      	b.n	63b2 <__aeabi_fadd+0x2e>
    6568:	189b      	adds	r3, r3, r2
    656a:	015a      	lsls	r2, r3, #5
    656c:	d400      	bmi.n	6570 <__aeabi_fadd+0x1ec>
    656e:	e760      	b.n	6432 <__aeabi_fadd+0xae>
    6570:	4a3e      	ldr	r2, [pc, #248]	; (666c <__aeabi_fadd+0x2e8>)
    6572:	000c      	movs	r4, r1
    6574:	4013      	ands	r3, r2
    6576:	e71c      	b.n	63b2 <__aeabi_fadd+0x2e>
    6578:	2c00      	cmp	r4, #0
    657a:	d11e      	bne.n	65ba <__aeabi_fadd+0x236>
    657c:	2b00      	cmp	r3, #0
    657e:	d12f      	bne.n	65e0 <__aeabi_fadd+0x25c>
    6580:	2a00      	cmp	r2, #0
    6582:	d066      	beq.n	6652 <__aeabi_fadd+0x2ce>
    6584:	0013      	movs	r3, r2
    6586:	000d      	movs	r5, r1
    6588:	e713      	b.n	63b2 <__aeabi_fadd+0x2e>
    658a:	2201      	movs	r2, #1
    658c:	e777      	b.n	647e <__aeabi_fadd+0xfa>
    658e:	2c00      	cmp	r4, #0
    6590:	d11f      	bne.n	65d2 <__aeabi_fadd+0x24e>
    6592:	2b00      	cmp	r3, #0
    6594:	d05a      	beq.n	664c <__aeabi_fadd+0x2c8>
    6596:	43c9      	mvns	r1, r1
    6598:	2900      	cmp	r1, #0
    659a:	d00b      	beq.n	65b4 <__aeabi_fadd+0x230>
    659c:	2eff      	cmp	r6, #255	; 0xff
    659e:	d050      	beq.n	6642 <__aeabi_fadd+0x2be>
    65a0:	291b      	cmp	r1, #27
    65a2:	dc5f      	bgt.n	6664 <__aeabi_fadd+0x2e0>
    65a4:	001f      	movs	r7, r3
    65a6:	2420      	movs	r4, #32
    65a8:	40cf      	lsrs	r7, r1
    65aa:	1a61      	subs	r1, r4, r1
    65ac:	408b      	lsls	r3, r1
    65ae:	1e59      	subs	r1, r3, #1
    65b0:	418b      	sbcs	r3, r1
    65b2:	433b      	orrs	r3, r7
    65b4:	189b      	adds	r3, r3, r2
    65b6:	0034      	movs	r4, r6
    65b8:	e762      	b.n	6480 <__aeabi_fadd+0xfc>
    65ba:	2b00      	cmp	r3, #0
    65bc:	d11c      	bne.n	65f8 <__aeabi_fadd+0x274>
    65be:	2a00      	cmp	r2, #0
    65c0:	d04a      	beq.n	6658 <__aeabi_fadd+0x2d4>
    65c2:	0013      	movs	r3, r2
    65c4:	000d      	movs	r5, r1
    65c6:	24ff      	movs	r4, #255	; 0xff
    65c8:	e6f3      	b.n	63b2 <__aeabi_fadd+0x2e>
    65ca:	0013      	movs	r3, r2
    65cc:	0034      	movs	r4, r6
    65ce:	000d      	movs	r5, r1
    65d0:	e6ef      	b.n	63b2 <__aeabi_fadd+0x2e>
    65d2:	2eff      	cmp	r6, #255	; 0xff
    65d4:	d035      	beq.n	6642 <__aeabi_fadd+0x2be>
    65d6:	2480      	movs	r4, #128	; 0x80
    65d8:	04e4      	lsls	r4, r4, #19
    65da:	4249      	negs	r1, r1
    65dc:	4323      	orrs	r3, r4
    65de:	e7df      	b.n	65a0 <__aeabi_fadd+0x21c>
    65e0:	2a00      	cmp	r2, #0
    65e2:	d100      	bne.n	65e6 <__aeabi_fadd+0x262>
    65e4:	e6e5      	b.n	63b2 <__aeabi_fadd+0x2e>
    65e6:	2780      	movs	r7, #128	; 0x80
    65e8:	1a98      	subs	r0, r3, r2
    65ea:	04ff      	lsls	r7, r7, #19
    65ec:	4007      	ands	r7, r0
    65ee:	d100      	bne.n	65f2 <__aeabi_fadd+0x26e>
    65f0:	e752      	b.n	6498 <__aeabi_fadd+0x114>
    65f2:	1ad3      	subs	r3, r2, r3
    65f4:	000d      	movs	r5, r1
    65f6:	e6dc      	b.n	63b2 <__aeabi_fadd+0x2e>
    65f8:	24ff      	movs	r4, #255	; 0xff
    65fa:	2a00      	cmp	r2, #0
    65fc:	d100      	bne.n	6600 <__aeabi_fadd+0x27c>
    65fe:	e6d8      	b.n	63b2 <__aeabi_fadd+0x2e>
    6600:	2080      	movs	r0, #128	; 0x80
    6602:	08db      	lsrs	r3, r3, #3
    6604:	03c0      	lsls	r0, r0, #15
    6606:	4203      	tst	r3, r0
    6608:	d004      	beq.n	6614 <__aeabi_fadd+0x290>
    660a:	08d2      	lsrs	r2, r2, #3
    660c:	4202      	tst	r2, r0
    660e:	d101      	bne.n	6614 <__aeabi_fadd+0x290>
    6610:	0013      	movs	r3, r2
    6612:	000d      	movs	r5, r1
    6614:	00db      	lsls	r3, r3, #3
    6616:	24ff      	movs	r4, #255	; 0xff
    6618:	e6cb      	b.n	63b2 <__aeabi_fadd+0x2e>
    661a:	0013      	movs	r3, r2
    661c:	24ff      	movs	r4, #255	; 0xff
    661e:	000d      	movs	r5, r1
    6620:	e6c7      	b.n	63b2 <__aeabi_fadd+0x2e>
    6622:	2b00      	cmp	r3, #0
    6624:	d00d      	beq.n	6642 <__aeabi_fadd+0x2be>
    6626:	24ff      	movs	r4, #255	; 0xff
    6628:	2a00      	cmp	r2, #0
    662a:	d100      	bne.n	662e <__aeabi_fadd+0x2aa>
    662c:	e6c1      	b.n	63b2 <__aeabi_fadd+0x2e>
    662e:	2180      	movs	r1, #128	; 0x80
    6630:	08db      	lsrs	r3, r3, #3
    6632:	03c9      	lsls	r1, r1, #15
    6634:	420b      	tst	r3, r1
    6636:	d0ed      	beq.n	6614 <__aeabi_fadd+0x290>
    6638:	08d2      	lsrs	r2, r2, #3
    663a:	420a      	tst	r2, r1
    663c:	d1ea      	bne.n	6614 <__aeabi_fadd+0x290>
    663e:	0013      	movs	r3, r2
    6640:	e7e8      	b.n	6614 <__aeabi_fadd+0x290>
    6642:	0013      	movs	r3, r2
    6644:	24ff      	movs	r4, #255	; 0xff
    6646:	e6b4      	b.n	63b2 <__aeabi_fadd+0x2e>
    6648:	2301      	movs	r3, #1
    664a:	e772      	b.n	6532 <__aeabi_fadd+0x1ae>
    664c:	0013      	movs	r3, r2
    664e:	0034      	movs	r4, r6
    6650:	e6af      	b.n	63b2 <__aeabi_fadd+0x2e>
    6652:	2700      	movs	r7, #0
    6654:	2000      	movs	r0, #0
    6656:	e722      	b.n	649e <__aeabi_fadd+0x11a>
    6658:	2780      	movs	r7, #128	; 0x80
    665a:	2000      	movs	r0, #0
    665c:	03ff      	lsls	r7, r7, #15
    665e:	e6f1      	b.n	6444 <__aeabi_fadd+0xc0>
    6660:	0013      	movs	r3, r2
    6662:	e6a6      	b.n	63b2 <__aeabi_fadd+0x2e>
    6664:	2301      	movs	r3, #1
    6666:	e7a5      	b.n	65b4 <__aeabi_fadd+0x230>
    6668:	7dffffff 	.word	0x7dffffff
    666c:	fbffffff 	.word	0xfbffffff

00006670 <__aeabi_fdiv>:
    6670:	b5f0      	push	{r4, r5, r6, r7, lr}
    6672:	4656      	mov	r6, sl
    6674:	4644      	mov	r4, r8
    6676:	465f      	mov	r7, fp
    6678:	464d      	mov	r5, r9
    667a:	b4f0      	push	{r4, r5, r6, r7}
    667c:	0244      	lsls	r4, r0, #9
    667e:	0046      	lsls	r6, r0, #1
    6680:	0fc7      	lsrs	r7, r0, #31
    6682:	b083      	sub	sp, #12
    6684:	4688      	mov	r8, r1
    6686:	0a65      	lsrs	r5, r4, #9
    6688:	0e36      	lsrs	r6, r6, #24
    668a:	46ba      	mov	sl, r7
    668c:	d03d      	beq.n	670a <__aeabi_fdiv+0x9a>
    668e:	2eff      	cmp	r6, #255	; 0xff
    6690:	d022      	beq.n	66d8 <__aeabi_fdiv+0x68>
    6692:	2300      	movs	r3, #0
    6694:	00ec      	lsls	r4, r5, #3
    6696:	2580      	movs	r5, #128	; 0x80
    6698:	4699      	mov	r9, r3
    669a:	469b      	mov	fp, r3
    669c:	04ed      	lsls	r5, r5, #19
    669e:	4325      	orrs	r5, r4
    66a0:	3e7f      	subs	r6, #127	; 0x7f
    66a2:	4643      	mov	r3, r8
    66a4:	025c      	lsls	r4, r3, #9
    66a6:	0058      	lsls	r0, r3, #1
    66a8:	0fdb      	lsrs	r3, r3, #31
    66aa:	0a64      	lsrs	r4, r4, #9
    66ac:	0e00      	lsrs	r0, r0, #24
    66ae:	4698      	mov	r8, r3
    66b0:	d036      	beq.n	6720 <__aeabi_fdiv+0xb0>
    66b2:	28ff      	cmp	r0, #255	; 0xff
    66b4:	d030      	beq.n	6718 <__aeabi_fdiv+0xa8>
    66b6:	2380      	movs	r3, #128	; 0x80
    66b8:	2100      	movs	r1, #0
    66ba:	00e4      	lsls	r4, r4, #3
    66bc:	04db      	lsls	r3, r3, #19
    66be:	431c      	orrs	r4, r3
    66c0:	387f      	subs	r0, #127	; 0x7f
    66c2:	1a30      	subs	r0, r6, r0
    66c4:	9001      	str	r0, [sp, #4]
    66c6:	4648      	mov	r0, r9
    66c8:	4642      	mov	r2, r8
    66ca:	4308      	orrs	r0, r1
    66cc:	4e72      	ldr	r6, [pc, #456]	; (6898 <__aeabi_fdiv+0x228>)
    66ce:	0080      	lsls	r0, r0, #2
    66d0:	5830      	ldr	r0, [r6, r0]
    66d2:	407a      	eors	r2, r7
    66d4:	0013      	movs	r3, r2
    66d6:	4687      	mov	pc, r0
    66d8:	2d00      	cmp	r5, #0
    66da:	d144      	bne.n	6766 <__aeabi_fdiv+0xf6>
    66dc:	2308      	movs	r3, #8
    66de:	4699      	mov	r9, r3
    66e0:	3b06      	subs	r3, #6
    66e2:	469b      	mov	fp, r3
    66e4:	e7dd      	b.n	66a2 <__aeabi_fdiv+0x32>
    66e6:	2201      	movs	r2, #1
    66e8:	20ff      	movs	r0, #255	; 0xff
    66ea:	2400      	movs	r4, #0
    66ec:	401a      	ands	r2, r3
    66ee:	0264      	lsls	r4, r4, #9
    66f0:	05c3      	lsls	r3, r0, #23
    66f2:	0a64      	lsrs	r4, r4, #9
    66f4:	07d2      	lsls	r2, r2, #31
    66f6:	431c      	orrs	r4, r3
    66f8:	4314      	orrs	r4, r2
    66fa:	0020      	movs	r0, r4
    66fc:	b003      	add	sp, #12
    66fe:	bc3c      	pop	{r2, r3, r4, r5}
    6700:	4690      	mov	r8, r2
    6702:	4699      	mov	r9, r3
    6704:	46a2      	mov	sl, r4
    6706:	46ab      	mov	fp, r5
    6708:	bdf0      	pop	{r4, r5, r6, r7, pc}
    670a:	2d00      	cmp	r5, #0
    670c:	d120      	bne.n	6750 <__aeabi_fdiv+0xe0>
    670e:	2304      	movs	r3, #4
    6710:	4699      	mov	r9, r3
    6712:	3b03      	subs	r3, #3
    6714:	469b      	mov	fp, r3
    6716:	e7c4      	b.n	66a2 <__aeabi_fdiv+0x32>
    6718:	2c00      	cmp	r4, #0
    671a:	d117      	bne.n	674c <__aeabi_fdiv+0xdc>
    671c:	2102      	movs	r1, #2
    671e:	e002      	b.n	6726 <__aeabi_fdiv+0xb6>
    6720:	2c00      	cmp	r4, #0
    6722:	d10a      	bne.n	673a <__aeabi_fdiv+0xca>
    6724:	2101      	movs	r1, #1
    6726:	1a32      	subs	r2, r6, r0
    6728:	9201      	str	r2, [sp, #4]
    672a:	464a      	mov	r2, r9
    672c:	4643      	mov	r3, r8
    672e:	430a      	orrs	r2, r1
    6730:	485a      	ldr	r0, [pc, #360]	; (689c <__aeabi_fdiv+0x22c>)
    6732:	0092      	lsls	r2, r2, #2
    6734:	5882      	ldr	r2, [r0, r2]
    6736:	407b      	eors	r3, r7
    6738:	4697      	mov	pc, r2
    673a:	0020      	movs	r0, r4
    673c:	f002 f98c 	bl	8a58 <__clzsi2>
    6740:	1f43      	subs	r3, r0, #5
    6742:	3076      	adds	r0, #118	; 0x76
    6744:	409c      	lsls	r4, r3
    6746:	4240      	negs	r0, r0
    6748:	2100      	movs	r1, #0
    674a:	e7ba      	b.n	66c2 <__aeabi_fdiv+0x52>
    674c:	2103      	movs	r1, #3
    674e:	e7b8      	b.n	66c2 <__aeabi_fdiv+0x52>
    6750:	0028      	movs	r0, r5
    6752:	f002 f981 	bl	8a58 <__clzsi2>
    6756:	1f43      	subs	r3, r0, #5
    6758:	409d      	lsls	r5, r3
    675a:	2300      	movs	r3, #0
    675c:	3076      	adds	r0, #118	; 0x76
    675e:	4246      	negs	r6, r0
    6760:	4699      	mov	r9, r3
    6762:	469b      	mov	fp, r3
    6764:	e79d      	b.n	66a2 <__aeabi_fdiv+0x32>
    6766:	230c      	movs	r3, #12
    6768:	4699      	mov	r9, r3
    676a:	3b09      	subs	r3, #9
    676c:	469b      	mov	fp, r3
    676e:	e798      	b.n	66a2 <__aeabi_fdiv+0x32>
    6770:	2480      	movs	r4, #128	; 0x80
    6772:	2200      	movs	r2, #0
    6774:	03e4      	lsls	r4, r4, #15
    6776:	20ff      	movs	r0, #255	; 0xff
    6778:	e7b9      	b.n	66ee <__aeabi_fdiv+0x7e>
    677a:	2400      	movs	r4, #0
    677c:	46c2      	mov	sl, r8
    677e:	468b      	mov	fp, r1
    6780:	465a      	mov	r2, fp
    6782:	4653      	mov	r3, sl
    6784:	2a02      	cmp	r2, #2
    6786:	d0ae      	beq.n	66e6 <__aeabi_fdiv+0x76>
    6788:	2a03      	cmp	r2, #3
    678a:	d07d      	beq.n	6888 <__aeabi_fdiv+0x218>
    678c:	2a01      	cmp	r2, #1
    678e:	d131      	bne.n	67f4 <__aeabi_fdiv+0x184>
    6790:	2201      	movs	r2, #1
    6792:	2000      	movs	r0, #0
    6794:	401a      	ands	r2, r3
    6796:	2400      	movs	r4, #0
    6798:	e7a9      	b.n	66ee <__aeabi_fdiv+0x7e>
    679a:	2201      	movs	r2, #1
    679c:	1a10      	subs	r0, r2, r0
    679e:	281b      	cmp	r0, #27
    67a0:	dd56      	ble.n	6850 <__aeabi_fdiv+0x1e0>
    67a2:	401a      	ands	r2, r3
    67a4:	2000      	movs	r0, #0
    67a6:	2400      	movs	r4, #0
    67a8:	e7a1      	b.n	66ee <__aeabi_fdiv+0x7e>
    67aa:	2380      	movs	r3, #128	; 0x80
    67ac:	03db      	lsls	r3, r3, #15
    67ae:	421d      	tst	r5, r3
    67b0:	d14b      	bne.n	684a <__aeabi_fdiv+0x1da>
    67b2:	2380      	movs	r3, #128	; 0x80
    67b4:	03db      	lsls	r3, r3, #15
    67b6:	432b      	orrs	r3, r5
    67b8:	025c      	lsls	r4, r3, #9
    67ba:	0a64      	lsrs	r4, r4, #9
    67bc:	003a      	movs	r2, r7
    67be:	20ff      	movs	r0, #255	; 0xff
    67c0:	e795      	b.n	66ee <__aeabi_fdiv+0x7e>
    67c2:	016d      	lsls	r5, r5, #5
    67c4:	0160      	lsls	r0, r4, #5
    67c6:	4285      	cmp	r5, r0
    67c8:	d230      	bcs.n	682c <__aeabi_fdiv+0x1bc>
    67ca:	9a01      	ldr	r2, [sp, #4]
    67cc:	2400      	movs	r4, #0
    67ce:	3a01      	subs	r2, #1
    67d0:	9201      	str	r2, [sp, #4]
    67d2:	221b      	movs	r2, #27
    67d4:	2701      	movs	r7, #1
    67d6:	0029      	movs	r1, r5
    67d8:	0064      	lsls	r4, r4, #1
    67da:	006d      	lsls	r5, r5, #1
    67dc:	2900      	cmp	r1, #0
    67de:	db01      	blt.n	67e4 <__aeabi_fdiv+0x174>
    67e0:	42a8      	cmp	r0, r5
    67e2:	d801      	bhi.n	67e8 <__aeabi_fdiv+0x178>
    67e4:	1a2d      	subs	r5, r5, r0
    67e6:	433c      	orrs	r4, r7
    67e8:	3a01      	subs	r2, #1
    67ea:	2a00      	cmp	r2, #0
    67ec:	d1f3      	bne.n	67d6 <__aeabi_fdiv+0x166>
    67ee:	1e6a      	subs	r2, r5, #1
    67f0:	4195      	sbcs	r5, r2
    67f2:	432c      	orrs	r4, r5
    67f4:	9801      	ldr	r0, [sp, #4]
    67f6:	307f      	adds	r0, #127	; 0x7f
    67f8:	2800      	cmp	r0, #0
    67fa:	ddce      	ble.n	679a <__aeabi_fdiv+0x12a>
    67fc:	0762      	lsls	r2, r4, #29
    67fe:	d004      	beq.n	680a <__aeabi_fdiv+0x19a>
    6800:	220f      	movs	r2, #15
    6802:	4022      	ands	r2, r4
    6804:	2a04      	cmp	r2, #4
    6806:	d000      	beq.n	680a <__aeabi_fdiv+0x19a>
    6808:	3404      	adds	r4, #4
    680a:	0122      	lsls	r2, r4, #4
    680c:	d503      	bpl.n	6816 <__aeabi_fdiv+0x1a6>
    680e:	4a24      	ldr	r2, [pc, #144]	; (68a0 <__aeabi_fdiv+0x230>)
    6810:	9801      	ldr	r0, [sp, #4]
    6812:	4014      	ands	r4, r2
    6814:	3080      	adds	r0, #128	; 0x80
    6816:	28fe      	cmp	r0, #254	; 0xfe
    6818:	dd00      	ble.n	681c <__aeabi_fdiv+0x1ac>
    681a:	e764      	b.n	66e6 <__aeabi_fdiv+0x76>
    681c:	2201      	movs	r2, #1
    681e:	01a4      	lsls	r4, r4, #6
    6820:	0a64      	lsrs	r4, r4, #9
    6822:	b2c0      	uxtb	r0, r0
    6824:	401a      	ands	r2, r3
    6826:	e762      	b.n	66ee <__aeabi_fdiv+0x7e>
    6828:	002c      	movs	r4, r5
    682a:	e7a9      	b.n	6780 <__aeabi_fdiv+0x110>
    682c:	1a2d      	subs	r5, r5, r0
    682e:	221a      	movs	r2, #26
    6830:	2401      	movs	r4, #1
    6832:	e7cf      	b.n	67d4 <__aeabi_fdiv+0x164>
    6834:	026b      	lsls	r3, r5, #9
    6836:	d5bc      	bpl.n	67b2 <__aeabi_fdiv+0x142>
    6838:	2400      	movs	r4, #0
    683a:	2380      	movs	r3, #128	; 0x80
    683c:	03db      	lsls	r3, r3, #15
    683e:	431c      	orrs	r4, r3
    6840:	0264      	lsls	r4, r4, #9
    6842:	0a64      	lsrs	r4, r4, #9
    6844:	4642      	mov	r2, r8
    6846:	20ff      	movs	r0, #255	; 0xff
    6848:	e751      	b.n	66ee <__aeabi_fdiv+0x7e>
    684a:	421c      	tst	r4, r3
    684c:	d1b3      	bne.n	67b6 <__aeabi_fdiv+0x146>
    684e:	e7f4      	b.n	683a <__aeabi_fdiv+0x1ca>
    6850:	0021      	movs	r1, r4
    6852:	2220      	movs	r2, #32
    6854:	40c1      	lsrs	r1, r0
    6856:	1a10      	subs	r0, r2, r0
    6858:	4084      	lsls	r4, r0
    685a:	1e62      	subs	r2, r4, #1
    685c:	4194      	sbcs	r4, r2
    685e:	430c      	orrs	r4, r1
    6860:	0762      	lsls	r2, r4, #29
    6862:	d004      	beq.n	686e <__aeabi_fdiv+0x1fe>
    6864:	220f      	movs	r2, #15
    6866:	4022      	ands	r2, r4
    6868:	2a04      	cmp	r2, #4
    686a:	d000      	beq.n	686e <__aeabi_fdiv+0x1fe>
    686c:	3404      	adds	r4, #4
    686e:	0162      	lsls	r2, r4, #5
    6870:	d504      	bpl.n	687c <__aeabi_fdiv+0x20c>
    6872:	2201      	movs	r2, #1
    6874:	2001      	movs	r0, #1
    6876:	401a      	ands	r2, r3
    6878:	2400      	movs	r4, #0
    687a:	e738      	b.n	66ee <__aeabi_fdiv+0x7e>
    687c:	2201      	movs	r2, #1
    687e:	01a4      	lsls	r4, r4, #6
    6880:	0a64      	lsrs	r4, r4, #9
    6882:	401a      	ands	r2, r3
    6884:	2000      	movs	r0, #0
    6886:	e732      	b.n	66ee <__aeabi_fdiv+0x7e>
    6888:	2380      	movs	r3, #128	; 0x80
    688a:	03db      	lsls	r3, r3, #15
    688c:	431c      	orrs	r4, r3
    688e:	0264      	lsls	r4, r4, #9
    6890:	0a64      	lsrs	r4, r4, #9
    6892:	4652      	mov	r2, sl
    6894:	20ff      	movs	r0, #255	; 0xff
    6896:	e72a      	b.n	66ee <__aeabi_fdiv+0x7e>
    6898:	00008db8 	.word	0x00008db8
    689c:	00008df8 	.word	0x00008df8
    68a0:	f7ffffff 	.word	0xf7ffffff

000068a4 <__eqsf2>:
    68a4:	0243      	lsls	r3, r0, #9
    68a6:	b570      	push	{r4, r5, r6, lr}
    68a8:	0042      	lsls	r2, r0, #1
    68aa:	004c      	lsls	r4, r1, #1
    68ac:	0a5d      	lsrs	r5, r3, #9
    68ae:	0fc3      	lsrs	r3, r0, #31
    68b0:	0248      	lsls	r0, r1, #9
    68b2:	0e12      	lsrs	r2, r2, #24
    68b4:	0a46      	lsrs	r6, r0, #9
    68b6:	0e24      	lsrs	r4, r4, #24
    68b8:	0fc9      	lsrs	r1, r1, #31
    68ba:	2aff      	cmp	r2, #255	; 0xff
    68bc:	d00f      	beq.n	68de <__eqsf2+0x3a>
    68be:	2cff      	cmp	r4, #255	; 0xff
    68c0:	d011      	beq.n	68e6 <__eqsf2+0x42>
    68c2:	2001      	movs	r0, #1
    68c4:	42a2      	cmp	r2, r4
    68c6:	d000      	beq.n	68ca <__eqsf2+0x26>
    68c8:	bd70      	pop	{r4, r5, r6, pc}
    68ca:	42b5      	cmp	r5, r6
    68cc:	d1fc      	bne.n	68c8 <__eqsf2+0x24>
    68ce:	428b      	cmp	r3, r1
    68d0:	d00d      	beq.n	68ee <__eqsf2+0x4a>
    68d2:	2a00      	cmp	r2, #0
    68d4:	d1f8      	bne.n	68c8 <__eqsf2+0x24>
    68d6:	0028      	movs	r0, r5
    68d8:	1e43      	subs	r3, r0, #1
    68da:	4198      	sbcs	r0, r3
    68dc:	e7f4      	b.n	68c8 <__eqsf2+0x24>
    68de:	2001      	movs	r0, #1
    68e0:	2d00      	cmp	r5, #0
    68e2:	d1f1      	bne.n	68c8 <__eqsf2+0x24>
    68e4:	e7eb      	b.n	68be <__eqsf2+0x1a>
    68e6:	2001      	movs	r0, #1
    68e8:	2e00      	cmp	r6, #0
    68ea:	d1ed      	bne.n	68c8 <__eqsf2+0x24>
    68ec:	e7e9      	b.n	68c2 <__eqsf2+0x1e>
    68ee:	2000      	movs	r0, #0
    68f0:	e7ea      	b.n	68c8 <__eqsf2+0x24>
    68f2:	46c0      	nop			; (mov r8, r8)

000068f4 <__gesf2>:
    68f4:	0243      	lsls	r3, r0, #9
    68f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    68f8:	0042      	lsls	r2, r0, #1
    68fa:	0a5d      	lsrs	r5, r3, #9
    68fc:	0fc3      	lsrs	r3, r0, #31
    68fe:	0248      	lsls	r0, r1, #9
    6900:	0a44      	lsrs	r4, r0, #9
    6902:	0048      	lsls	r0, r1, #1
    6904:	0e12      	lsrs	r2, r2, #24
    6906:	0e00      	lsrs	r0, r0, #24
    6908:	0fc9      	lsrs	r1, r1, #31
    690a:	2aff      	cmp	r2, #255	; 0xff
    690c:	d01f      	beq.n	694e <__gesf2+0x5a>
    690e:	28ff      	cmp	r0, #255	; 0xff
    6910:	d022      	beq.n	6958 <__gesf2+0x64>
    6912:	2a00      	cmp	r2, #0
    6914:	d109      	bne.n	692a <__gesf2+0x36>
    6916:	426e      	negs	r6, r5
    6918:	416e      	adcs	r6, r5
    691a:	2800      	cmp	r0, #0
    691c:	d10f      	bne.n	693e <__gesf2+0x4a>
    691e:	2c00      	cmp	r4, #0
    6920:	d10d      	bne.n	693e <__gesf2+0x4a>
    6922:	2000      	movs	r0, #0
    6924:	2d00      	cmp	r5, #0
    6926:	d009      	beq.n	693c <__gesf2+0x48>
    6928:	e005      	b.n	6936 <__gesf2+0x42>
    692a:	2800      	cmp	r0, #0
    692c:	d101      	bne.n	6932 <__gesf2+0x3e>
    692e:	2c00      	cmp	r4, #0
    6930:	d001      	beq.n	6936 <__gesf2+0x42>
    6932:	428b      	cmp	r3, r1
    6934:	d013      	beq.n	695e <__gesf2+0x6a>
    6936:	4258      	negs	r0, r3
    6938:	2301      	movs	r3, #1
    693a:	4318      	orrs	r0, r3
    693c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    693e:	2e00      	cmp	r6, #0
    6940:	d0f7      	beq.n	6932 <__gesf2+0x3e>
    6942:	4248      	negs	r0, r1
    6944:	4141      	adcs	r1, r0
    6946:	2001      	movs	r0, #1
    6948:	4249      	negs	r1, r1
    694a:	4308      	orrs	r0, r1
    694c:	e7f6      	b.n	693c <__gesf2+0x48>
    694e:	2d00      	cmp	r5, #0
    6950:	d0dd      	beq.n	690e <__gesf2+0x1a>
    6952:	2002      	movs	r0, #2
    6954:	4240      	negs	r0, r0
    6956:	e7f1      	b.n	693c <__gesf2+0x48>
    6958:	2c00      	cmp	r4, #0
    695a:	d0da      	beq.n	6912 <__gesf2+0x1e>
    695c:	e7f9      	b.n	6952 <__gesf2+0x5e>
    695e:	4282      	cmp	r2, r0
    6960:	dce9      	bgt.n	6936 <__gesf2+0x42>
    6962:	db04      	blt.n	696e <__gesf2+0x7a>
    6964:	42a5      	cmp	r5, r4
    6966:	d8e6      	bhi.n	6936 <__gesf2+0x42>
    6968:	2000      	movs	r0, #0
    696a:	42a5      	cmp	r5, r4
    696c:	d2e6      	bcs.n	693c <__gesf2+0x48>
    696e:	4258      	negs	r0, r3
    6970:	4143      	adcs	r3, r0
    6972:	2001      	movs	r0, #1
    6974:	425b      	negs	r3, r3
    6976:	4318      	orrs	r0, r3
    6978:	e7e0      	b.n	693c <__gesf2+0x48>
    697a:	46c0      	nop			; (mov r8, r8)

0000697c <__lesf2>:
    697c:	0243      	lsls	r3, r0, #9
    697e:	b5f0      	push	{r4, r5, r6, r7, lr}
    6980:	0042      	lsls	r2, r0, #1
    6982:	004c      	lsls	r4, r1, #1
    6984:	0a5e      	lsrs	r6, r3, #9
    6986:	0fc3      	lsrs	r3, r0, #31
    6988:	0248      	lsls	r0, r1, #9
    698a:	0e12      	lsrs	r2, r2, #24
    698c:	0a45      	lsrs	r5, r0, #9
    698e:	0e24      	lsrs	r4, r4, #24
    6990:	0fc9      	lsrs	r1, r1, #31
    6992:	2aff      	cmp	r2, #255	; 0xff
    6994:	d017      	beq.n	69c6 <__lesf2+0x4a>
    6996:	2cff      	cmp	r4, #255	; 0xff
    6998:	d019      	beq.n	69ce <__lesf2+0x52>
    699a:	2a00      	cmp	r2, #0
    699c:	d10b      	bne.n	69b6 <__lesf2+0x3a>
    699e:	4270      	negs	r0, r6
    69a0:	4170      	adcs	r0, r6
    69a2:	2c00      	cmp	r4, #0
    69a4:	d017      	beq.n	69d6 <__lesf2+0x5a>
    69a6:	2800      	cmp	r0, #0
    69a8:	d007      	beq.n	69ba <__lesf2+0x3e>
    69aa:	4248      	negs	r0, r1
    69ac:	4141      	adcs	r1, r0
    69ae:	2001      	movs	r0, #1
    69b0:	4249      	negs	r1, r1
    69b2:	4308      	orrs	r0, r1
    69b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69b6:	2c00      	cmp	r4, #0
    69b8:	d013      	beq.n	69e2 <__lesf2+0x66>
    69ba:	428b      	cmp	r3, r1
    69bc:	d014      	beq.n	69e8 <__lesf2+0x6c>
    69be:	4258      	negs	r0, r3
    69c0:	2301      	movs	r3, #1
    69c2:	4318      	orrs	r0, r3
    69c4:	e7f6      	b.n	69b4 <__lesf2+0x38>
    69c6:	2002      	movs	r0, #2
    69c8:	2e00      	cmp	r6, #0
    69ca:	d1f3      	bne.n	69b4 <__lesf2+0x38>
    69cc:	e7e3      	b.n	6996 <__lesf2+0x1a>
    69ce:	2002      	movs	r0, #2
    69d0:	2d00      	cmp	r5, #0
    69d2:	d1ef      	bne.n	69b4 <__lesf2+0x38>
    69d4:	e7e1      	b.n	699a <__lesf2+0x1e>
    69d6:	2d00      	cmp	r5, #0
    69d8:	d1e5      	bne.n	69a6 <__lesf2+0x2a>
    69da:	2000      	movs	r0, #0
    69dc:	2e00      	cmp	r6, #0
    69de:	d0e9      	beq.n	69b4 <__lesf2+0x38>
    69e0:	e7ed      	b.n	69be <__lesf2+0x42>
    69e2:	2d00      	cmp	r5, #0
    69e4:	d1e9      	bne.n	69ba <__lesf2+0x3e>
    69e6:	e7ea      	b.n	69be <__lesf2+0x42>
    69e8:	42a2      	cmp	r2, r4
    69ea:	dce8      	bgt.n	69be <__lesf2+0x42>
    69ec:	db04      	blt.n	69f8 <__lesf2+0x7c>
    69ee:	42ae      	cmp	r6, r5
    69f0:	d8e5      	bhi.n	69be <__lesf2+0x42>
    69f2:	2000      	movs	r0, #0
    69f4:	42ae      	cmp	r6, r5
    69f6:	d2dd      	bcs.n	69b4 <__lesf2+0x38>
    69f8:	4258      	negs	r0, r3
    69fa:	4143      	adcs	r3, r0
    69fc:	2001      	movs	r0, #1
    69fe:	425b      	negs	r3, r3
    6a00:	4318      	orrs	r0, r3
    6a02:	e7d7      	b.n	69b4 <__lesf2+0x38>

00006a04 <__aeabi_fmul>:
    6a04:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a06:	4657      	mov	r7, sl
    6a08:	464e      	mov	r6, r9
    6a0a:	4645      	mov	r5, r8
    6a0c:	0043      	lsls	r3, r0, #1
    6a0e:	b4e0      	push	{r5, r6, r7}
    6a10:	0246      	lsls	r6, r0, #9
    6a12:	4688      	mov	r8, r1
    6a14:	0a76      	lsrs	r6, r6, #9
    6a16:	0e1f      	lsrs	r7, r3, #24
    6a18:	0fc4      	lsrs	r4, r0, #31
    6a1a:	2f00      	cmp	r7, #0
    6a1c:	d047      	beq.n	6aae <__aeabi_fmul+0xaa>
    6a1e:	2fff      	cmp	r7, #255	; 0xff
    6a20:	d025      	beq.n	6a6e <__aeabi_fmul+0x6a>
    6a22:	2300      	movs	r3, #0
    6a24:	2580      	movs	r5, #128	; 0x80
    6a26:	469a      	mov	sl, r3
    6a28:	4699      	mov	r9, r3
    6a2a:	00f6      	lsls	r6, r6, #3
    6a2c:	04ed      	lsls	r5, r5, #19
    6a2e:	432e      	orrs	r6, r5
    6a30:	3f7f      	subs	r7, #127	; 0x7f
    6a32:	4643      	mov	r3, r8
    6a34:	4642      	mov	r2, r8
    6a36:	025d      	lsls	r5, r3, #9
    6a38:	0fd2      	lsrs	r2, r2, #31
    6a3a:	005b      	lsls	r3, r3, #1
    6a3c:	0a6d      	lsrs	r5, r5, #9
    6a3e:	0e1b      	lsrs	r3, r3, #24
    6a40:	4690      	mov	r8, r2
    6a42:	d040      	beq.n	6ac6 <__aeabi_fmul+0xc2>
    6a44:	2bff      	cmp	r3, #255	; 0xff
    6a46:	d039      	beq.n	6abc <__aeabi_fmul+0xb8>
    6a48:	2280      	movs	r2, #128	; 0x80
    6a4a:	2000      	movs	r0, #0
    6a4c:	00ed      	lsls	r5, r5, #3
    6a4e:	04d2      	lsls	r2, r2, #19
    6a50:	4315      	orrs	r5, r2
    6a52:	3b7f      	subs	r3, #127	; 0x7f
    6a54:	18fb      	adds	r3, r7, r3
    6a56:	4642      	mov	r2, r8
    6a58:	4657      	mov	r7, sl
    6a5a:	1c59      	adds	r1, r3, #1
    6a5c:	4062      	eors	r2, r4
    6a5e:	468c      	mov	ip, r1
    6a60:	4307      	orrs	r7, r0
    6a62:	2f0f      	cmp	r7, #15
    6a64:	d85c      	bhi.n	6b20 <__aeabi_fmul+0x11c>
    6a66:	496f      	ldr	r1, [pc, #444]	; (6c24 <__aeabi_fmul+0x220>)
    6a68:	00bf      	lsls	r7, r7, #2
    6a6a:	59c9      	ldr	r1, [r1, r7]
    6a6c:	468f      	mov	pc, r1
    6a6e:	2e00      	cmp	r6, #0
    6a70:	d145      	bne.n	6afe <__aeabi_fmul+0xfa>
    6a72:	2308      	movs	r3, #8
    6a74:	469a      	mov	sl, r3
    6a76:	3b06      	subs	r3, #6
    6a78:	4699      	mov	r9, r3
    6a7a:	e7da      	b.n	6a32 <__aeabi_fmul+0x2e>
    6a7c:	4642      	mov	r2, r8
    6a7e:	2802      	cmp	r0, #2
    6a80:	d02d      	beq.n	6ade <__aeabi_fmul+0xda>
    6a82:	2803      	cmp	r0, #3
    6a84:	d100      	bne.n	6a88 <__aeabi_fmul+0x84>
    6a86:	e0c3      	b.n	6c10 <__aeabi_fmul+0x20c>
    6a88:	2801      	cmp	r0, #1
    6a8a:	d000      	beq.n	6a8e <__aeabi_fmul+0x8a>
    6a8c:	e0a2      	b.n	6bd4 <__aeabi_fmul+0x1d0>
    6a8e:	2500      	movs	r5, #0
    6a90:	2600      	movs	r6, #0
    6a92:	4002      	ands	r2, r0
    6a94:	b2d4      	uxtb	r4, r2
    6a96:	0276      	lsls	r6, r6, #9
    6a98:	05ed      	lsls	r5, r5, #23
    6a9a:	0a76      	lsrs	r6, r6, #9
    6a9c:	432e      	orrs	r6, r5
    6a9e:	07e4      	lsls	r4, r4, #31
    6aa0:	4326      	orrs	r6, r4
    6aa2:	0030      	movs	r0, r6
    6aa4:	bc1c      	pop	{r2, r3, r4}
    6aa6:	4690      	mov	r8, r2
    6aa8:	4699      	mov	r9, r3
    6aaa:	46a2      	mov	sl, r4
    6aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6aae:	2e00      	cmp	r6, #0
    6ab0:	d11a      	bne.n	6ae8 <__aeabi_fmul+0xe4>
    6ab2:	2304      	movs	r3, #4
    6ab4:	469a      	mov	sl, r3
    6ab6:	3b03      	subs	r3, #3
    6ab8:	4699      	mov	r9, r3
    6aba:	e7ba      	b.n	6a32 <__aeabi_fmul+0x2e>
    6abc:	002a      	movs	r2, r5
    6abe:	1e51      	subs	r1, r2, #1
    6ac0:	418a      	sbcs	r2, r1
    6ac2:	1c90      	adds	r0, r2, #2
    6ac4:	e7c6      	b.n	6a54 <__aeabi_fmul+0x50>
    6ac6:	2001      	movs	r0, #1
    6ac8:	2d00      	cmp	r5, #0
    6aca:	d0c3      	beq.n	6a54 <__aeabi_fmul+0x50>
    6acc:	0028      	movs	r0, r5
    6ace:	f001 ffc3 	bl	8a58 <__clzsi2>
    6ad2:	1f43      	subs	r3, r0, #5
    6ad4:	3076      	adds	r0, #118	; 0x76
    6ad6:	409d      	lsls	r5, r3
    6ad8:	4243      	negs	r3, r0
    6ada:	2000      	movs	r0, #0
    6adc:	e7ba      	b.n	6a54 <__aeabi_fmul+0x50>
    6ade:	2401      	movs	r4, #1
    6ae0:	25ff      	movs	r5, #255	; 0xff
    6ae2:	4014      	ands	r4, r2
    6ae4:	2600      	movs	r6, #0
    6ae6:	e7d6      	b.n	6a96 <__aeabi_fmul+0x92>
    6ae8:	0030      	movs	r0, r6
    6aea:	f001 ffb5 	bl	8a58 <__clzsi2>
    6aee:	1f43      	subs	r3, r0, #5
    6af0:	409e      	lsls	r6, r3
    6af2:	2300      	movs	r3, #0
    6af4:	3076      	adds	r0, #118	; 0x76
    6af6:	4247      	negs	r7, r0
    6af8:	469a      	mov	sl, r3
    6afa:	4699      	mov	r9, r3
    6afc:	e799      	b.n	6a32 <__aeabi_fmul+0x2e>
    6afe:	230c      	movs	r3, #12
    6b00:	469a      	mov	sl, r3
    6b02:	3b09      	subs	r3, #9
    6b04:	4699      	mov	r9, r3
    6b06:	e794      	b.n	6a32 <__aeabi_fmul+0x2e>
    6b08:	2680      	movs	r6, #128	; 0x80
    6b0a:	2400      	movs	r4, #0
    6b0c:	03f6      	lsls	r6, r6, #15
    6b0e:	25ff      	movs	r5, #255	; 0xff
    6b10:	e7c1      	b.n	6a96 <__aeabi_fmul+0x92>
    6b12:	0035      	movs	r5, r6
    6b14:	4648      	mov	r0, r9
    6b16:	e7b2      	b.n	6a7e <__aeabi_fmul+0x7a>
    6b18:	0035      	movs	r5, r6
    6b1a:	0022      	movs	r2, r4
    6b1c:	4648      	mov	r0, r9
    6b1e:	e7ae      	b.n	6a7e <__aeabi_fmul+0x7a>
    6b20:	0429      	lsls	r1, r5, #16
    6b22:	0c09      	lsrs	r1, r1, #16
    6b24:	0008      	movs	r0, r1
    6b26:	0c37      	lsrs	r7, r6, #16
    6b28:	0436      	lsls	r6, r6, #16
    6b2a:	0c36      	lsrs	r6, r6, #16
    6b2c:	0c2c      	lsrs	r4, r5, #16
    6b2e:	4379      	muls	r1, r7
    6b30:	4370      	muls	r0, r6
    6b32:	4367      	muls	r7, r4
    6b34:	4374      	muls	r4, r6
    6b36:	0c06      	lsrs	r6, r0, #16
    6b38:	1864      	adds	r4, r4, r1
    6b3a:	1936      	adds	r6, r6, r4
    6b3c:	42b1      	cmp	r1, r6
    6b3e:	d903      	bls.n	6b48 <__aeabi_fmul+0x144>
    6b40:	2180      	movs	r1, #128	; 0x80
    6b42:	0249      	lsls	r1, r1, #9
    6b44:	4688      	mov	r8, r1
    6b46:	4447      	add	r7, r8
    6b48:	0400      	lsls	r0, r0, #16
    6b4a:	0c00      	lsrs	r0, r0, #16
    6b4c:	0431      	lsls	r1, r6, #16
    6b4e:	1809      	adds	r1, r1, r0
    6b50:	018d      	lsls	r5, r1, #6
    6b52:	1e68      	subs	r0, r5, #1
    6b54:	4185      	sbcs	r5, r0
    6b56:	0e89      	lsrs	r1, r1, #26
    6b58:	4329      	orrs	r1, r5
    6b5a:	0c35      	lsrs	r5, r6, #16
    6b5c:	19ed      	adds	r5, r5, r7
    6b5e:	01ad      	lsls	r5, r5, #6
    6b60:	430d      	orrs	r5, r1
    6b62:	0129      	lsls	r1, r5, #4
    6b64:	d504      	bpl.n	6b70 <__aeabi_fmul+0x16c>
    6b66:	2301      	movs	r3, #1
    6b68:	0869      	lsrs	r1, r5, #1
    6b6a:	401d      	ands	r5, r3
    6b6c:	4663      	mov	r3, ip
    6b6e:	430d      	orrs	r5, r1
    6b70:	0019      	movs	r1, r3
    6b72:	317f      	adds	r1, #127	; 0x7f
    6b74:	2900      	cmp	r1, #0
    6b76:	dd25      	ble.n	6bc4 <__aeabi_fmul+0x1c0>
    6b78:	0768      	lsls	r0, r5, #29
    6b7a:	d004      	beq.n	6b86 <__aeabi_fmul+0x182>
    6b7c:	200f      	movs	r0, #15
    6b7e:	4028      	ands	r0, r5
    6b80:	2804      	cmp	r0, #4
    6b82:	d000      	beq.n	6b86 <__aeabi_fmul+0x182>
    6b84:	3504      	adds	r5, #4
    6b86:	0128      	lsls	r0, r5, #4
    6b88:	d503      	bpl.n	6b92 <__aeabi_fmul+0x18e>
    6b8a:	4927      	ldr	r1, [pc, #156]	; (6c28 <__aeabi_fmul+0x224>)
    6b8c:	3380      	adds	r3, #128	; 0x80
    6b8e:	400d      	ands	r5, r1
    6b90:	0019      	movs	r1, r3
    6b92:	29fe      	cmp	r1, #254	; 0xfe
    6b94:	dca3      	bgt.n	6ade <__aeabi_fmul+0xda>
    6b96:	2401      	movs	r4, #1
    6b98:	01ad      	lsls	r5, r5, #6
    6b9a:	0a6e      	lsrs	r6, r5, #9
    6b9c:	4014      	ands	r4, r2
    6b9e:	b2cd      	uxtb	r5, r1
    6ba0:	e779      	b.n	6a96 <__aeabi_fmul+0x92>
    6ba2:	2080      	movs	r0, #128	; 0x80
    6ba4:	03c0      	lsls	r0, r0, #15
    6ba6:	4206      	tst	r6, r0
    6ba8:	d007      	beq.n	6bba <__aeabi_fmul+0x1b6>
    6baa:	4205      	tst	r5, r0
    6bac:	d105      	bne.n	6bba <__aeabi_fmul+0x1b6>
    6bae:	4328      	orrs	r0, r5
    6bb0:	0246      	lsls	r6, r0, #9
    6bb2:	0a76      	lsrs	r6, r6, #9
    6bb4:	4644      	mov	r4, r8
    6bb6:	25ff      	movs	r5, #255	; 0xff
    6bb8:	e76d      	b.n	6a96 <__aeabi_fmul+0x92>
    6bba:	4306      	orrs	r6, r0
    6bbc:	0276      	lsls	r6, r6, #9
    6bbe:	0a76      	lsrs	r6, r6, #9
    6bc0:	25ff      	movs	r5, #255	; 0xff
    6bc2:	e768      	b.n	6a96 <__aeabi_fmul+0x92>
    6bc4:	2401      	movs	r4, #1
    6bc6:	1a61      	subs	r1, r4, r1
    6bc8:	291b      	cmp	r1, #27
    6bca:	dd05      	ble.n	6bd8 <__aeabi_fmul+0x1d4>
    6bcc:	4014      	ands	r4, r2
    6bce:	2500      	movs	r5, #0
    6bd0:	2600      	movs	r6, #0
    6bd2:	e760      	b.n	6a96 <__aeabi_fmul+0x92>
    6bd4:	4663      	mov	r3, ip
    6bd6:	e7cb      	b.n	6b70 <__aeabi_fmul+0x16c>
    6bd8:	002e      	movs	r6, r5
    6bda:	2320      	movs	r3, #32
    6bdc:	40ce      	lsrs	r6, r1
    6bde:	1a59      	subs	r1, r3, r1
    6be0:	408d      	lsls	r5, r1
    6be2:	1e6b      	subs	r3, r5, #1
    6be4:	419d      	sbcs	r5, r3
    6be6:	432e      	orrs	r6, r5
    6be8:	0773      	lsls	r3, r6, #29
    6bea:	d004      	beq.n	6bf6 <__aeabi_fmul+0x1f2>
    6bec:	230f      	movs	r3, #15
    6bee:	4033      	ands	r3, r6
    6bf0:	2b04      	cmp	r3, #4
    6bf2:	d000      	beq.n	6bf6 <__aeabi_fmul+0x1f2>
    6bf4:	3604      	adds	r6, #4
    6bf6:	0173      	lsls	r3, r6, #5
    6bf8:	d504      	bpl.n	6c04 <__aeabi_fmul+0x200>
    6bfa:	2401      	movs	r4, #1
    6bfc:	2501      	movs	r5, #1
    6bfe:	4014      	ands	r4, r2
    6c00:	2600      	movs	r6, #0
    6c02:	e748      	b.n	6a96 <__aeabi_fmul+0x92>
    6c04:	2401      	movs	r4, #1
    6c06:	01b6      	lsls	r6, r6, #6
    6c08:	0a76      	lsrs	r6, r6, #9
    6c0a:	4014      	ands	r4, r2
    6c0c:	2500      	movs	r5, #0
    6c0e:	e742      	b.n	6a96 <__aeabi_fmul+0x92>
    6c10:	2680      	movs	r6, #128	; 0x80
    6c12:	2401      	movs	r4, #1
    6c14:	03f6      	lsls	r6, r6, #15
    6c16:	432e      	orrs	r6, r5
    6c18:	0276      	lsls	r6, r6, #9
    6c1a:	0a76      	lsrs	r6, r6, #9
    6c1c:	4014      	ands	r4, r2
    6c1e:	25ff      	movs	r5, #255	; 0xff
    6c20:	e739      	b.n	6a96 <__aeabi_fmul+0x92>
    6c22:	46c0      	nop			; (mov r8, r8)
    6c24:	00008e38 	.word	0x00008e38
    6c28:	f7ffffff 	.word	0xf7ffffff

00006c2c <__aeabi_i2f>:
    6c2c:	b570      	push	{r4, r5, r6, lr}
    6c2e:	2800      	cmp	r0, #0
    6c30:	d030      	beq.n	6c94 <__aeabi_i2f+0x68>
    6c32:	17c3      	asrs	r3, r0, #31
    6c34:	18c5      	adds	r5, r0, r3
    6c36:	405d      	eors	r5, r3
    6c38:	0fc4      	lsrs	r4, r0, #31
    6c3a:	0028      	movs	r0, r5
    6c3c:	f001 ff0c 	bl	8a58 <__clzsi2>
    6c40:	239e      	movs	r3, #158	; 0x9e
    6c42:	1a1b      	subs	r3, r3, r0
    6c44:	2b96      	cmp	r3, #150	; 0x96
    6c46:	dc0d      	bgt.n	6c64 <__aeabi_i2f+0x38>
    6c48:	2296      	movs	r2, #150	; 0x96
    6c4a:	1ad2      	subs	r2, r2, r3
    6c4c:	4095      	lsls	r5, r2
    6c4e:	026a      	lsls	r2, r5, #9
    6c50:	0a52      	lsrs	r2, r2, #9
    6c52:	b2d8      	uxtb	r0, r3
    6c54:	0252      	lsls	r2, r2, #9
    6c56:	05c0      	lsls	r0, r0, #23
    6c58:	0a52      	lsrs	r2, r2, #9
    6c5a:	07e4      	lsls	r4, r4, #31
    6c5c:	4302      	orrs	r2, r0
    6c5e:	4322      	orrs	r2, r4
    6c60:	0010      	movs	r0, r2
    6c62:	bd70      	pop	{r4, r5, r6, pc}
    6c64:	2b99      	cmp	r3, #153	; 0x99
    6c66:	dc19      	bgt.n	6c9c <__aeabi_i2f+0x70>
    6c68:	2299      	movs	r2, #153	; 0x99
    6c6a:	1ad2      	subs	r2, r2, r3
    6c6c:	4095      	lsls	r5, r2
    6c6e:	4a12      	ldr	r2, [pc, #72]	; (6cb8 <__aeabi_i2f+0x8c>)
    6c70:	402a      	ands	r2, r5
    6c72:	0769      	lsls	r1, r5, #29
    6c74:	d004      	beq.n	6c80 <__aeabi_i2f+0x54>
    6c76:	210f      	movs	r1, #15
    6c78:	400d      	ands	r5, r1
    6c7a:	2d04      	cmp	r5, #4
    6c7c:	d000      	beq.n	6c80 <__aeabi_i2f+0x54>
    6c7e:	3204      	adds	r2, #4
    6c80:	0151      	lsls	r1, r2, #5
    6c82:	d503      	bpl.n	6c8c <__aeabi_i2f+0x60>
    6c84:	4b0c      	ldr	r3, [pc, #48]	; (6cb8 <__aeabi_i2f+0x8c>)
    6c86:	401a      	ands	r2, r3
    6c88:	239f      	movs	r3, #159	; 0x9f
    6c8a:	1a1b      	subs	r3, r3, r0
    6c8c:	0192      	lsls	r2, r2, #6
    6c8e:	0a52      	lsrs	r2, r2, #9
    6c90:	b2d8      	uxtb	r0, r3
    6c92:	e7df      	b.n	6c54 <__aeabi_i2f+0x28>
    6c94:	2400      	movs	r4, #0
    6c96:	2000      	movs	r0, #0
    6c98:	2200      	movs	r2, #0
    6c9a:	e7db      	b.n	6c54 <__aeabi_i2f+0x28>
    6c9c:	2205      	movs	r2, #5
    6c9e:	002e      	movs	r6, r5
    6ca0:	1a12      	subs	r2, r2, r0
    6ca2:	21b9      	movs	r1, #185	; 0xb9
    6ca4:	40d6      	lsrs	r6, r2
    6ca6:	002a      	movs	r2, r5
    6ca8:	1ac9      	subs	r1, r1, r3
    6caa:	408a      	lsls	r2, r1
    6cac:	1e55      	subs	r5, r2, #1
    6cae:	41aa      	sbcs	r2, r5
    6cb0:	0035      	movs	r5, r6
    6cb2:	4315      	orrs	r5, r2
    6cb4:	e7db      	b.n	6c6e <__aeabi_i2f+0x42>
    6cb6:	46c0      	nop			; (mov r8, r8)
    6cb8:	fbffffff 	.word	0xfbffffff

00006cbc <__aeabi_dadd>:
    6cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6cbe:	4656      	mov	r6, sl
    6cc0:	465f      	mov	r7, fp
    6cc2:	464d      	mov	r5, r9
    6cc4:	4644      	mov	r4, r8
    6cc6:	b4f0      	push	{r4, r5, r6, r7}
    6cc8:	000f      	movs	r7, r1
    6cca:	0ffd      	lsrs	r5, r7, #31
    6ccc:	46aa      	mov	sl, r5
    6cce:	0309      	lsls	r1, r1, #12
    6cd0:	007c      	lsls	r4, r7, #1
    6cd2:	002e      	movs	r6, r5
    6cd4:	005f      	lsls	r7, r3, #1
    6cd6:	0f45      	lsrs	r5, r0, #29
    6cd8:	0a49      	lsrs	r1, r1, #9
    6cda:	0d7f      	lsrs	r7, r7, #21
    6cdc:	4329      	orrs	r1, r5
    6cde:	00c5      	lsls	r5, r0, #3
    6ce0:	0318      	lsls	r0, r3, #12
    6ce2:	46bc      	mov	ip, r7
    6ce4:	0a40      	lsrs	r0, r0, #9
    6ce6:	0f57      	lsrs	r7, r2, #29
    6ce8:	0d64      	lsrs	r4, r4, #21
    6cea:	0fdb      	lsrs	r3, r3, #31
    6cec:	4338      	orrs	r0, r7
    6cee:	00d2      	lsls	r2, r2, #3
    6cf0:	459a      	cmp	sl, r3
    6cf2:	d100      	bne.n	6cf6 <__aeabi_dadd+0x3a>
    6cf4:	e0aa      	b.n	6e4c <__aeabi_dadd+0x190>
    6cf6:	4666      	mov	r6, ip
    6cf8:	1ba6      	subs	r6, r4, r6
    6cfa:	2e00      	cmp	r6, #0
    6cfc:	dc00      	bgt.n	6d00 <__aeabi_dadd+0x44>
    6cfe:	e0ff      	b.n	6f00 <__aeabi_dadd+0x244>
    6d00:	4663      	mov	r3, ip
    6d02:	2b00      	cmp	r3, #0
    6d04:	d139      	bne.n	6d7a <__aeabi_dadd+0xbe>
    6d06:	0003      	movs	r3, r0
    6d08:	4313      	orrs	r3, r2
    6d0a:	d000      	beq.n	6d0e <__aeabi_dadd+0x52>
    6d0c:	e0d9      	b.n	6ec2 <__aeabi_dadd+0x206>
    6d0e:	076b      	lsls	r3, r5, #29
    6d10:	d009      	beq.n	6d26 <__aeabi_dadd+0x6a>
    6d12:	230f      	movs	r3, #15
    6d14:	402b      	ands	r3, r5
    6d16:	2b04      	cmp	r3, #4
    6d18:	d005      	beq.n	6d26 <__aeabi_dadd+0x6a>
    6d1a:	1d2b      	adds	r3, r5, #4
    6d1c:	42ab      	cmp	r3, r5
    6d1e:	41ad      	sbcs	r5, r5
    6d20:	426d      	negs	r5, r5
    6d22:	1949      	adds	r1, r1, r5
    6d24:	001d      	movs	r5, r3
    6d26:	020b      	lsls	r3, r1, #8
    6d28:	d400      	bmi.n	6d2c <__aeabi_dadd+0x70>
    6d2a:	e082      	b.n	6e32 <__aeabi_dadd+0x176>
    6d2c:	4bca      	ldr	r3, [pc, #808]	; (7058 <__aeabi_dadd+0x39c>)
    6d2e:	3401      	adds	r4, #1
    6d30:	429c      	cmp	r4, r3
    6d32:	d100      	bne.n	6d36 <__aeabi_dadd+0x7a>
    6d34:	e0fe      	b.n	6f34 <__aeabi_dadd+0x278>
    6d36:	000a      	movs	r2, r1
    6d38:	4656      	mov	r6, sl
    6d3a:	4bc8      	ldr	r3, [pc, #800]	; (705c <__aeabi_dadd+0x3a0>)
    6d3c:	08ed      	lsrs	r5, r5, #3
    6d3e:	401a      	ands	r2, r3
    6d40:	0750      	lsls	r0, r2, #29
    6d42:	0564      	lsls	r4, r4, #21
    6d44:	0252      	lsls	r2, r2, #9
    6d46:	4305      	orrs	r5, r0
    6d48:	0b12      	lsrs	r2, r2, #12
    6d4a:	0d64      	lsrs	r4, r4, #21
    6d4c:	2100      	movs	r1, #0
    6d4e:	0312      	lsls	r2, r2, #12
    6d50:	0d0b      	lsrs	r3, r1, #20
    6d52:	051b      	lsls	r3, r3, #20
    6d54:	0564      	lsls	r4, r4, #21
    6d56:	0b12      	lsrs	r2, r2, #12
    6d58:	431a      	orrs	r2, r3
    6d5a:	0863      	lsrs	r3, r4, #1
    6d5c:	4cc0      	ldr	r4, [pc, #768]	; (7060 <__aeabi_dadd+0x3a4>)
    6d5e:	07f6      	lsls	r6, r6, #31
    6d60:	4014      	ands	r4, r2
    6d62:	431c      	orrs	r4, r3
    6d64:	0064      	lsls	r4, r4, #1
    6d66:	0864      	lsrs	r4, r4, #1
    6d68:	4334      	orrs	r4, r6
    6d6a:	0028      	movs	r0, r5
    6d6c:	0021      	movs	r1, r4
    6d6e:	bc3c      	pop	{r2, r3, r4, r5}
    6d70:	4690      	mov	r8, r2
    6d72:	4699      	mov	r9, r3
    6d74:	46a2      	mov	sl, r4
    6d76:	46ab      	mov	fp, r5
    6d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6d7a:	4bb7      	ldr	r3, [pc, #732]	; (7058 <__aeabi_dadd+0x39c>)
    6d7c:	429c      	cmp	r4, r3
    6d7e:	d0c6      	beq.n	6d0e <__aeabi_dadd+0x52>
    6d80:	2380      	movs	r3, #128	; 0x80
    6d82:	041b      	lsls	r3, r3, #16
    6d84:	4318      	orrs	r0, r3
    6d86:	2e38      	cmp	r6, #56	; 0x38
    6d88:	dd00      	ble.n	6d8c <__aeabi_dadd+0xd0>
    6d8a:	e0eb      	b.n	6f64 <__aeabi_dadd+0x2a8>
    6d8c:	2e1f      	cmp	r6, #31
    6d8e:	dd00      	ble.n	6d92 <__aeabi_dadd+0xd6>
    6d90:	e11e      	b.n	6fd0 <__aeabi_dadd+0x314>
    6d92:	2320      	movs	r3, #32
    6d94:	1b9b      	subs	r3, r3, r6
    6d96:	469c      	mov	ip, r3
    6d98:	0003      	movs	r3, r0
    6d9a:	4667      	mov	r7, ip
    6d9c:	40bb      	lsls	r3, r7
    6d9e:	4698      	mov	r8, r3
    6da0:	0013      	movs	r3, r2
    6da2:	4647      	mov	r7, r8
    6da4:	40f3      	lsrs	r3, r6
    6da6:	433b      	orrs	r3, r7
    6da8:	4667      	mov	r7, ip
    6daa:	40ba      	lsls	r2, r7
    6dac:	1e57      	subs	r7, r2, #1
    6dae:	41ba      	sbcs	r2, r7
    6db0:	4313      	orrs	r3, r2
    6db2:	0002      	movs	r2, r0
    6db4:	40f2      	lsrs	r2, r6
    6db6:	1aeb      	subs	r3, r5, r3
    6db8:	429d      	cmp	r5, r3
    6dba:	41b6      	sbcs	r6, r6
    6dbc:	001d      	movs	r5, r3
    6dbe:	1a8a      	subs	r2, r1, r2
    6dc0:	4276      	negs	r6, r6
    6dc2:	1b91      	subs	r1, r2, r6
    6dc4:	020b      	lsls	r3, r1, #8
    6dc6:	d531      	bpl.n	6e2c <__aeabi_dadd+0x170>
    6dc8:	024a      	lsls	r2, r1, #9
    6dca:	0a56      	lsrs	r6, r2, #9
    6dcc:	2e00      	cmp	r6, #0
    6dce:	d100      	bne.n	6dd2 <__aeabi_dadd+0x116>
    6dd0:	e0b4      	b.n	6f3c <__aeabi_dadd+0x280>
    6dd2:	0030      	movs	r0, r6
    6dd4:	f001 fe40 	bl	8a58 <__clzsi2>
    6dd8:	0003      	movs	r3, r0
    6dda:	3b08      	subs	r3, #8
    6ddc:	2b1f      	cmp	r3, #31
    6dde:	dd00      	ble.n	6de2 <__aeabi_dadd+0x126>
    6de0:	e0b5      	b.n	6f4e <__aeabi_dadd+0x292>
    6de2:	2220      	movs	r2, #32
    6de4:	0029      	movs	r1, r5
    6de6:	1ad2      	subs	r2, r2, r3
    6de8:	40d1      	lsrs	r1, r2
    6dea:	409e      	lsls	r6, r3
    6dec:	000a      	movs	r2, r1
    6dee:	409d      	lsls	r5, r3
    6df0:	4332      	orrs	r2, r6
    6df2:	429c      	cmp	r4, r3
    6df4:	dd00      	ble.n	6df8 <__aeabi_dadd+0x13c>
    6df6:	e0b1      	b.n	6f5c <__aeabi_dadd+0x2a0>
    6df8:	1b1c      	subs	r4, r3, r4
    6dfa:	1c63      	adds	r3, r4, #1
    6dfc:	2b1f      	cmp	r3, #31
    6dfe:	dd00      	ble.n	6e02 <__aeabi_dadd+0x146>
    6e00:	e0d5      	b.n	6fae <__aeabi_dadd+0x2f2>
    6e02:	2120      	movs	r1, #32
    6e04:	0014      	movs	r4, r2
    6e06:	0028      	movs	r0, r5
    6e08:	1ac9      	subs	r1, r1, r3
    6e0a:	408c      	lsls	r4, r1
    6e0c:	40d8      	lsrs	r0, r3
    6e0e:	408d      	lsls	r5, r1
    6e10:	4304      	orrs	r4, r0
    6e12:	40da      	lsrs	r2, r3
    6e14:	1e68      	subs	r0, r5, #1
    6e16:	4185      	sbcs	r5, r0
    6e18:	0011      	movs	r1, r2
    6e1a:	4325      	orrs	r5, r4
    6e1c:	2400      	movs	r4, #0
    6e1e:	e776      	b.n	6d0e <__aeabi_dadd+0x52>
    6e20:	4641      	mov	r1, r8
    6e22:	4331      	orrs	r1, r6
    6e24:	d100      	bne.n	6e28 <__aeabi_dadd+0x16c>
    6e26:	e234      	b.n	7292 <__aeabi_dadd+0x5d6>
    6e28:	0031      	movs	r1, r6
    6e2a:	4645      	mov	r5, r8
    6e2c:	076b      	lsls	r3, r5, #29
    6e2e:	d000      	beq.n	6e32 <__aeabi_dadd+0x176>
    6e30:	e76f      	b.n	6d12 <__aeabi_dadd+0x56>
    6e32:	4656      	mov	r6, sl
    6e34:	0748      	lsls	r0, r1, #29
    6e36:	08ed      	lsrs	r5, r5, #3
    6e38:	08c9      	lsrs	r1, r1, #3
    6e3a:	4305      	orrs	r5, r0
    6e3c:	4b86      	ldr	r3, [pc, #536]	; (7058 <__aeabi_dadd+0x39c>)
    6e3e:	429c      	cmp	r4, r3
    6e40:	d035      	beq.n	6eae <__aeabi_dadd+0x1f2>
    6e42:	030a      	lsls	r2, r1, #12
    6e44:	0564      	lsls	r4, r4, #21
    6e46:	0b12      	lsrs	r2, r2, #12
    6e48:	0d64      	lsrs	r4, r4, #21
    6e4a:	e77f      	b.n	6d4c <__aeabi_dadd+0x90>
    6e4c:	4663      	mov	r3, ip
    6e4e:	1ae3      	subs	r3, r4, r3
    6e50:	469b      	mov	fp, r3
    6e52:	2b00      	cmp	r3, #0
    6e54:	dc00      	bgt.n	6e58 <__aeabi_dadd+0x19c>
    6e56:	e08b      	b.n	6f70 <__aeabi_dadd+0x2b4>
    6e58:	4667      	mov	r7, ip
    6e5a:	2f00      	cmp	r7, #0
    6e5c:	d03c      	beq.n	6ed8 <__aeabi_dadd+0x21c>
    6e5e:	4f7e      	ldr	r7, [pc, #504]	; (7058 <__aeabi_dadd+0x39c>)
    6e60:	42bc      	cmp	r4, r7
    6e62:	d100      	bne.n	6e66 <__aeabi_dadd+0x1aa>
    6e64:	e753      	b.n	6d0e <__aeabi_dadd+0x52>
    6e66:	2780      	movs	r7, #128	; 0x80
    6e68:	043f      	lsls	r7, r7, #16
    6e6a:	4338      	orrs	r0, r7
    6e6c:	465b      	mov	r3, fp
    6e6e:	2b38      	cmp	r3, #56	; 0x38
    6e70:	dc00      	bgt.n	6e74 <__aeabi_dadd+0x1b8>
    6e72:	e0f7      	b.n	7064 <__aeabi_dadd+0x3a8>
    6e74:	4302      	orrs	r2, r0
    6e76:	1e50      	subs	r0, r2, #1
    6e78:	4182      	sbcs	r2, r0
    6e7a:	2000      	movs	r0, #0
    6e7c:	b2d2      	uxtb	r2, r2
    6e7e:	1953      	adds	r3, r2, r5
    6e80:	1842      	adds	r2, r0, r1
    6e82:	42ab      	cmp	r3, r5
    6e84:	4189      	sbcs	r1, r1
    6e86:	001d      	movs	r5, r3
    6e88:	4249      	negs	r1, r1
    6e8a:	1889      	adds	r1, r1, r2
    6e8c:	020b      	lsls	r3, r1, #8
    6e8e:	d5cd      	bpl.n	6e2c <__aeabi_dadd+0x170>
    6e90:	4b71      	ldr	r3, [pc, #452]	; (7058 <__aeabi_dadd+0x39c>)
    6e92:	3401      	adds	r4, #1
    6e94:	429c      	cmp	r4, r3
    6e96:	d100      	bne.n	6e9a <__aeabi_dadd+0x1de>
    6e98:	e13d      	b.n	7116 <__aeabi_dadd+0x45a>
    6e9a:	2001      	movs	r0, #1
    6e9c:	4a6f      	ldr	r2, [pc, #444]	; (705c <__aeabi_dadd+0x3a0>)
    6e9e:	086b      	lsrs	r3, r5, #1
    6ea0:	400a      	ands	r2, r1
    6ea2:	4028      	ands	r0, r5
    6ea4:	4318      	orrs	r0, r3
    6ea6:	07d5      	lsls	r5, r2, #31
    6ea8:	4305      	orrs	r5, r0
    6eaa:	0851      	lsrs	r1, r2, #1
    6eac:	e72f      	b.n	6d0e <__aeabi_dadd+0x52>
    6eae:	002b      	movs	r3, r5
    6eb0:	430b      	orrs	r3, r1
    6eb2:	d100      	bne.n	6eb6 <__aeabi_dadd+0x1fa>
    6eb4:	e1cb      	b.n	724e <__aeabi_dadd+0x592>
    6eb6:	2380      	movs	r3, #128	; 0x80
    6eb8:	031b      	lsls	r3, r3, #12
    6eba:	430b      	orrs	r3, r1
    6ebc:	031a      	lsls	r2, r3, #12
    6ebe:	0b12      	lsrs	r2, r2, #12
    6ec0:	e744      	b.n	6d4c <__aeabi_dadd+0x90>
    6ec2:	3e01      	subs	r6, #1
    6ec4:	2e00      	cmp	r6, #0
    6ec6:	d16d      	bne.n	6fa4 <__aeabi_dadd+0x2e8>
    6ec8:	1aae      	subs	r6, r5, r2
    6eca:	42b5      	cmp	r5, r6
    6ecc:	419b      	sbcs	r3, r3
    6ece:	1a09      	subs	r1, r1, r0
    6ed0:	425b      	negs	r3, r3
    6ed2:	1ac9      	subs	r1, r1, r3
    6ed4:	0035      	movs	r5, r6
    6ed6:	e775      	b.n	6dc4 <__aeabi_dadd+0x108>
    6ed8:	0007      	movs	r7, r0
    6eda:	4317      	orrs	r7, r2
    6edc:	d100      	bne.n	6ee0 <__aeabi_dadd+0x224>
    6ede:	e716      	b.n	6d0e <__aeabi_dadd+0x52>
    6ee0:	2301      	movs	r3, #1
    6ee2:	425b      	negs	r3, r3
    6ee4:	469c      	mov	ip, r3
    6ee6:	44e3      	add	fp, ip
    6ee8:	465b      	mov	r3, fp
    6eea:	2b00      	cmp	r3, #0
    6eec:	d000      	beq.n	6ef0 <__aeabi_dadd+0x234>
    6eee:	e0e0      	b.n	70b2 <__aeabi_dadd+0x3f6>
    6ef0:	18aa      	adds	r2, r5, r2
    6ef2:	42aa      	cmp	r2, r5
    6ef4:	419b      	sbcs	r3, r3
    6ef6:	1809      	adds	r1, r1, r0
    6ef8:	425b      	negs	r3, r3
    6efa:	1859      	adds	r1, r3, r1
    6efc:	0015      	movs	r5, r2
    6efe:	e7c5      	b.n	6e8c <__aeabi_dadd+0x1d0>
    6f00:	2e00      	cmp	r6, #0
    6f02:	d175      	bne.n	6ff0 <__aeabi_dadd+0x334>
    6f04:	1c66      	adds	r6, r4, #1
    6f06:	0576      	lsls	r6, r6, #21
    6f08:	0d76      	lsrs	r6, r6, #21
    6f0a:	2e01      	cmp	r6, #1
    6f0c:	dc00      	bgt.n	6f10 <__aeabi_dadd+0x254>
    6f0e:	e0f3      	b.n	70f8 <__aeabi_dadd+0x43c>
    6f10:	1aae      	subs	r6, r5, r2
    6f12:	46b0      	mov	r8, r6
    6f14:	4545      	cmp	r5, r8
    6f16:	41bf      	sbcs	r7, r7
    6f18:	1a0e      	subs	r6, r1, r0
    6f1a:	427f      	negs	r7, r7
    6f1c:	1bf6      	subs	r6, r6, r7
    6f1e:	0237      	lsls	r7, r6, #8
    6f20:	d400      	bmi.n	6f24 <__aeabi_dadd+0x268>
    6f22:	e08f      	b.n	7044 <__aeabi_dadd+0x388>
    6f24:	1b55      	subs	r5, r2, r5
    6f26:	42aa      	cmp	r2, r5
    6f28:	41b6      	sbcs	r6, r6
    6f2a:	1a41      	subs	r1, r0, r1
    6f2c:	4276      	negs	r6, r6
    6f2e:	1b8e      	subs	r6, r1, r6
    6f30:	469a      	mov	sl, r3
    6f32:	e74b      	b.n	6dcc <__aeabi_dadd+0x110>
    6f34:	4656      	mov	r6, sl
    6f36:	2200      	movs	r2, #0
    6f38:	2500      	movs	r5, #0
    6f3a:	e707      	b.n	6d4c <__aeabi_dadd+0x90>
    6f3c:	0028      	movs	r0, r5
    6f3e:	f001 fd8b 	bl	8a58 <__clzsi2>
    6f42:	3020      	adds	r0, #32
    6f44:	0003      	movs	r3, r0
    6f46:	3b08      	subs	r3, #8
    6f48:	2b1f      	cmp	r3, #31
    6f4a:	dc00      	bgt.n	6f4e <__aeabi_dadd+0x292>
    6f4c:	e749      	b.n	6de2 <__aeabi_dadd+0x126>
    6f4e:	002a      	movs	r2, r5
    6f50:	3828      	subs	r0, #40	; 0x28
    6f52:	4082      	lsls	r2, r0
    6f54:	2500      	movs	r5, #0
    6f56:	429c      	cmp	r4, r3
    6f58:	dc00      	bgt.n	6f5c <__aeabi_dadd+0x2a0>
    6f5a:	e74d      	b.n	6df8 <__aeabi_dadd+0x13c>
    6f5c:	493f      	ldr	r1, [pc, #252]	; (705c <__aeabi_dadd+0x3a0>)
    6f5e:	1ae4      	subs	r4, r4, r3
    6f60:	4011      	ands	r1, r2
    6f62:	e6d4      	b.n	6d0e <__aeabi_dadd+0x52>
    6f64:	4302      	orrs	r2, r0
    6f66:	1e50      	subs	r0, r2, #1
    6f68:	4182      	sbcs	r2, r0
    6f6a:	b2d3      	uxtb	r3, r2
    6f6c:	2200      	movs	r2, #0
    6f6e:	e722      	b.n	6db6 <__aeabi_dadd+0xfa>
    6f70:	2b00      	cmp	r3, #0
    6f72:	d000      	beq.n	6f76 <__aeabi_dadd+0x2ba>
    6f74:	e0f3      	b.n	715e <__aeabi_dadd+0x4a2>
    6f76:	1c63      	adds	r3, r4, #1
    6f78:	469c      	mov	ip, r3
    6f7a:	055b      	lsls	r3, r3, #21
    6f7c:	0d5b      	lsrs	r3, r3, #21
    6f7e:	2b01      	cmp	r3, #1
    6f80:	dc00      	bgt.n	6f84 <__aeabi_dadd+0x2c8>
    6f82:	e09f      	b.n	70c4 <__aeabi_dadd+0x408>
    6f84:	4b34      	ldr	r3, [pc, #208]	; (7058 <__aeabi_dadd+0x39c>)
    6f86:	459c      	cmp	ip, r3
    6f88:	d100      	bne.n	6f8c <__aeabi_dadd+0x2d0>
    6f8a:	e0c3      	b.n	7114 <__aeabi_dadd+0x458>
    6f8c:	18aa      	adds	r2, r5, r2
    6f8e:	1809      	adds	r1, r1, r0
    6f90:	42aa      	cmp	r2, r5
    6f92:	4180      	sbcs	r0, r0
    6f94:	4240      	negs	r0, r0
    6f96:	1841      	adds	r1, r0, r1
    6f98:	07cd      	lsls	r5, r1, #31
    6f9a:	0852      	lsrs	r2, r2, #1
    6f9c:	4315      	orrs	r5, r2
    6f9e:	0849      	lsrs	r1, r1, #1
    6fa0:	4664      	mov	r4, ip
    6fa2:	e6b4      	b.n	6d0e <__aeabi_dadd+0x52>
    6fa4:	4b2c      	ldr	r3, [pc, #176]	; (7058 <__aeabi_dadd+0x39c>)
    6fa6:	429c      	cmp	r4, r3
    6fa8:	d000      	beq.n	6fac <__aeabi_dadd+0x2f0>
    6faa:	e6ec      	b.n	6d86 <__aeabi_dadd+0xca>
    6fac:	e6af      	b.n	6d0e <__aeabi_dadd+0x52>
    6fae:	0011      	movs	r1, r2
    6fb0:	3c1f      	subs	r4, #31
    6fb2:	40e1      	lsrs	r1, r4
    6fb4:	000c      	movs	r4, r1
    6fb6:	2b20      	cmp	r3, #32
    6fb8:	d100      	bne.n	6fbc <__aeabi_dadd+0x300>
    6fba:	e07f      	b.n	70bc <__aeabi_dadd+0x400>
    6fbc:	2140      	movs	r1, #64	; 0x40
    6fbe:	1acb      	subs	r3, r1, r3
    6fc0:	409a      	lsls	r2, r3
    6fc2:	4315      	orrs	r5, r2
    6fc4:	1e6a      	subs	r2, r5, #1
    6fc6:	4195      	sbcs	r5, r2
    6fc8:	2100      	movs	r1, #0
    6fca:	4325      	orrs	r5, r4
    6fcc:	2400      	movs	r4, #0
    6fce:	e72d      	b.n	6e2c <__aeabi_dadd+0x170>
    6fd0:	0033      	movs	r3, r6
    6fd2:	0007      	movs	r7, r0
    6fd4:	3b20      	subs	r3, #32
    6fd6:	40df      	lsrs	r7, r3
    6fd8:	003b      	movs	r3, r7
    6fda:	2e20      	cmp	r6, #32
    6fdc:	d070      	beq.n	70c0 <__aeabi_dadd+0x404>
    6fde:	2740      	movs	r7, #64	; 0x40
    6fe0:	1bbe      	subs	r6, r7, r6
    6fe2:	40b0      	lsls	r0, r6
    6fe4:	4302      	orrs	r2, r0
    6fe6:	1e50      	subs	r0, r2, #1
    6fe8:	4182      	sbcs	r2, r0
    6fea:	4313      	orrs	r3, r2
    6fec:	2200      	movs	r2, #0
    6fee:	e6e2      	b.n	6db6 <__aeabi_dadd+0xfa>
    6ff0:	2c00      	cmp	r4, #0
    6ff2:	d04f      	beq.n	7094 <__aeabi_dadd+0x3d8>
    6ff4:	4c18      	ldr	r4, [pc, #96]	; (7058 <__aeabi_dadd+0x39c>)
    6ff6:	45a4      	cmp	ip, r4
    6ff8:	d100      	bne.n	6ffc <__aeabi_dadd+0x340>
    6ffa:	e0ab      	b.n	7154 <__aeabi_dadd+0x498>
    6ffc:	2480      	movs	r4, #128	; 0x80
    6ffe:	0424      	lsls	r4, r4, #16
    7000:	4276      	negs	r6, r6
    7002:	4321      	orrs	r1, r4
    7004:	2e38      	cmp	r6, #56	; 0x38
    7006:	dd00      	ble.n	700a <__aeabi_dadd+0x34e>
    7008:	e0df      	b.n	71ca <__aeabi_dadd+0x50e>
    700a:	2e1f      	cmp	r6, #31
    700c:	dd00      	ble.n	7010 <__aeabi_dadd+0x354>
    700e:	e143      	b.n	7298 <__aeabi_dadd+0x5dc>
    7010:	2720      	movs	r7, #32
    7012:	1bbc      	subs	r4, r7, r6
    7014:	46a1      	mov	r9, r4
    7016:	000c      	movs	r4, r1
    7018:	464f      	mov	r7, r9
    701a:	40bc      	lsls	r4, r7
    701c:	46a0      	mov	r8, r4
    701e:	002c      	movs	r4, r5
    7020:	4647      	mov	r7, r8
    7022:	40f4      	lsrs	r4, r6
    7024:	433c      	orrs	r4, r7
    7026:	464f      	mov	r7, r9
    7028:	40bd      	lsls	r5, r7
    702a:	1e6f      	subs	r7, r5, #1
    702c:	41bd      	sbcs	r5, r7
    702e:	40f1      	lsrs	r1, r6
    7030:	432c      	orrs	r4, r5
    7032:	1b15      	subs	r5, r2, r4
    7034:	42aa      	cmp	r2, r5
    7036:	4192      	sbcs	r2, r2
    7038:	1a41      	subs	r1, r0, r1
    703a:	4252      	negs	r2, r2
    703c:	1a89      	subs	r1, r1, r2
    703e:	4664      	mov	r4, ip
    7040:	469a      	mov	sl, r3
    7042:	e6bf      	b.n	6dc4 <__aeabi_dadd+0x108>
    7044:	4641      	mov	r1, r8
    7046:	4645      	mov	r5, r8
    7048:	4331      	orrs	r1, r6
    704a:	d000      	beq.n	704e <__aeabi_dadd+0x392>
    704c:	e6be      	b.n	6dcc <__aeabi_dadd+0x110>
    704e:	2600      	movs	r6, #0
    7050:	2400      	movs	r4, #0
    7052:	2500      	movs	r5, #0
    7054:	e6f2      	b.n	6e3c <__aeabi_dadd+0x180>
    7056:	46c0      	nop			; (mov r8, r8)
    7058:	000007ff 	.word	0x000007ff
    705c:	ff7fffff 	.word	0xff7fffff
    7060:	800fffff 	.word	0x800fffff
    7064:	2b1f      	cmp	r3, #31
    7066:	dc59      	bgt.n	711c <__aeabi_dadd+0x460>
    7068:	2720      	movs	r7, #32
    706a:	1aff      	subs	r7, r7, r3
    706c:	46bc      	mov	ip, r7
    706e:	0007      	movs	r7, r0
    7070:	4663      	mov	r3, ip
    7072:	409f      	lsls	r7, r3
    7074:	465b      	mov	r3, fp
    7076:	46b9      	mov	r9, r7
    7078:	0017      	movs	r7, r2
    707a:	40df      	lsrs	r7, r3
    707c:	46b8      	mov	r8, r7
    707e:	464f      	mov	r7, r9
    7080:	4643      	mov	r3, r8
    7082:	431f      	orrs	r7, r3
    7084:	4663      	mov	r3, ip
    7086:	409a      	lsls	r2, r3
    7088:	1e53      	subs	r3, r2, #1
    708a:	419a      	sbcs	r2, r3
    708c:	465b      	mov	r3, fp
    708e:	433a      	orrs	r2, r7
    7090:	40d8      	lsrs	r0, r3
    7092:	e6f4      	b.n	6e7e <__aeabi_dadd+0x1c2>
    7094:	000c      	movs	r4, r1
    7096:	432c      	orrs	r4, r5
    7098:	d05c      	beq.n	7154 <__aeabi_dadd+0x498>
    709a:	43f6      	mvns	r6, r6
    709c:	2e00      	cmp	r6, #0
    709e:	d155      	bne.n	714c <__aeabi_dadd+0x490>
    70a0:	1b55      	subs	r5, r2, r5
    70a2:	42aa      	cmp	r2, r5
    70a4:	41a4      	sbcs	r4, r4
    70a6:	1a41      	subs	r1, r0, r1
    70a8:	4264      	negs	r4, r4
    70aa:	1b09      	subs	r1, r1, r4
    70ac:	469a      	mov	sl, r3
    70ae:	4664      	mov	r4, ip
    70b0:	e688      	b.n	6dc4 <__aeabi_dadd+0x108>
    70b2:	4f96      	ldr	r7, [pc, #600]	; (730c <__aeabi_dadd+0x650>)
    70b4:	42bc      	cmp	r4, r7
    70b6:	d000      	beq.n	70ba <__aeabi_dadd+0x3fe>
    70b8:	e6d8      	b.n	6e6c <__aeabi_dadd+0x1b0>
    70ba:	e628      	b.n	6d0e <__aeabi_dadd+0x52>
    70bc:	2200      	movs	r2, #0
    70be:	e780      	b.n	6fc2 <__aeabi_dadd+0x306>
    70c0:	2000      	movs	r0, #0
    70c2:	e78f      	b.n	6fe4 <__aeabi_dadd+0x328>
    70c4:	000b      	movs	r3, r1
    70c6:	432b      	orrs	r3, r5
    70c8:	2c00      	cmp	r4, #0
    70ca:	d000      	beq.n	70ce <__aeabi_dadd+0x412>
    70cc:	e0c2      	b.n	7254 <__aeabi_dadd+0x598>
    70ce:	2b00      	cmp	r3, #0
    70d0:	d100      	bne.n	70d4 <__aeabi_dadd+0x418>
    70d2:	e101      	b.n	72d8 <__aeabi_dadd+0x61c>
    70d4:	0003      	movs	r3, r0
    70d6:	4313      	orrs	r3, r2
    70d8:	d100      	bne.n	70dc <__aeabi_dadd+0x420>
    70da:	e618      	b.n	6d0e <__aeabi_dadd+0x52>
    70dc:	18ab      	adds	r3, r5, r2
    70de:	42ab      	cmp	r3, r5
    70e0:	41b6      	sbcs	r6, r6
    70e2:	1809      	adds	r1, r1, r0
    70e4:	4276      	negs	r6, r6
    70e6:	1871      	adds	r1, r6, r1
    70e8:	020a      	lsls	r2, r1, #8
    70ea:	d400      	bmi.n	70ee <__aeabi_dadd+0x432>
    70ec:	e109      	b.n	7302 <__aeabi_dadd+0x646>
    70ee:	4a88      	ldr	r2, [pc, #544]	; (7310 <__aeabi_dadd+0x654>)
    70f0:	001d      	movs	r5, r3
    70f2:	4011      	ands	r1, r2
    70f4:	4664      	mov	r4, ip
    70f6:	e60a      	b.n	6d0e <__aeabi_dadd+0x52>
    70f8:	2c00      	cmp	r4, #0
    70fa:	d15b      	bne.n	71b4 <__aeabi_dadd+0x4f8>
    70fc:	000e      	movs	r6, r1
    70fe:	432e      	orrs	r6, r5
    7100:	d000      	beq.n	7104 <__aeabi_dadd+0x448>
    7102:	e08a      	b.n	721a <__aeabi_dadd+0x55e>
    7104:	0001      	movs	r1, r0
    7106:	4311      	orrs	r1, r2
    7108:	d100      	bne.n	710c <__aeabi_dadd+0x450>
    710a:	e0c2      	b.n	7292 <__aeabi_dadd+0x5d6>
    710c:	0001      	movs	r1, r0
    710e:	0015      	movs	r5, r2
    7110:	469a      	mov	sl, r3
    7112:	e5fc      	b.n	6d0e <__aeabi_dadd+0x52>
    7114:	4664      	mov	r4, ip
    7116:	2100      	movs	r1, #0
    7118:	2500      	movs	r5, #0
    711a:	e68f      	b.n	6e3c <__aeabi_dadd+0x180>
    711c:	2320      	movs	r3, #32
    711e:	425b      	negs	r3, r3
    7120:	469c      	mov	ip, r3
    7122:	44dc      	add	ip, fp
    7124:	4663      	mov	r3, ip
    7126:	0007      	movs	r7, r0
    7128:	40df      	lsrs	r7, r3
    712a:	465b      	mov	r3, fp
    712c:	46bc      	mov	ip, r7
    712e:	2b20      	cmp	r3, #32
    7130:	d100      	bne.n	7134 <__aeabi_dadd+0x478>
    7132:	e0ac      	b.n	728e <__aeabi_dadd+0x5d2>
    7134:	2340      	movs	r3, #64	; 0x40
    7136:	465f      	mov	r7, fp
    7138:	1bdb      	subs	r3, r3, r7
    713a:	4098      	lsls	r0, r3
    713c:	4302      	orrs	r2, r0
    713e:	1e50      	subs	r0, r2, #1
    7140:	4182      	sbcs	r2, r0
    7142:	4663      	mov	r3, ip
    7144:	4313      	orrs	r3, r2
    7146:	001a      	movs	r2, r3
    7148:	2000      	movs	r0, #0
    714a:	e698      	b.n	6e7e <__aeabi_dadd+0x1c2>
    714c:	4c6f      	ldr	r4, [pc, #444]	; (730c <__aeabi_dadd+0x650>)
    714e:	45a4      	cmp	ip, r4
    7150:	d000      	beq.n	7154 <__aeabi_dadd+0x498>
    7152:	e757      	b.n	7004 <__aeabi_dadd+0x348>
    7154:	0001      	movs	r1, r0
    7156:	0015      	movs	r5, r2
    7158:	4664      	mov	r4, ip
    715a:	469a      	mov	sl, r3
    715c:	e5d7      	b.n	6d0e <__aeabi_dadd+0x52>
    715e:	2c00      	cmp	r4, #0
    7160:	d139      	bne.n	71d6 <__aeabi_dadd+0x51a>
    7162:	000c      	movs	r4, r1
    7164:	432c      	orrs	r4, r5
    7166:	d06e      	beq.n	7246 <__aeabi_dadd+0x58a>
    7168:	43db      	mvns	r3, r3
    716a:	2b00      	cmp	r3, #0
    716c:	d01a      	beq.n	71a4 <__aeabi_dadd+0x4e8>
    716e:	4c67      	ldr	r4, [pc, #412]	; (730c <__aeabi_dadd+0x650>)
    7170:	45a4      	cmp	ip, r4
    7172:	d068      	beq.n	7246 <__aeabi_dadd+0x58a>
    7174:	2b38      	cmp	r3, #56	; 0x38
    7176:	dd00      	ble.n	717a <__aeabi_dadd+0x4be>
    7178:	e0a4      	b.n	72c4 <__aeabi_dadd+0x608>
    717a:	2b1f      	cmp	r3, #31
    717c:	dd00      	ble.n	7180 <__aeabi_dadd+0x4c4>
    717e:	e0ae      	b.n	72de <__aeabi_dadd+0x622>
    7180:	2420      	movs	r4, #32
    7182:	000f      	movs	r7, r1
    7184:	1ae4      	subs	r4, r4, r3
    7186:	40a7      	lsls	r7, r4
    7188:	46b9      	mov	r9, r7
    718a:	002f      	movs	r7, r5
    718c:	40df      	lsrs	r7, r3
    718e:	46b8      	mov	r8, r7
    7190:	46a3      	mov	fp, r4
    7192:	464f      	mov	r7, r9
    7194:	4644      	mov	r4, r8
    7196:	4327      	orrs	r7, r4
    7198:	465c      	mov	r4, fp
    719a:	40a5      	lsls	r5, r4
    719c:	1e6c      	subs	r4, r5, #1
    719e:	41a5      	sbcs	r5, r4
    71a0:	40d9      	lsrs	r1, r3
    71a2:	433d      	orrs	r5, r7
    71a4:	18ad      	adds	r5, r5, r2
    71a6:	4295      	cmp	r5, r2
    71a8:	419b      	sbcs	r3, r3
    71aa:	1809      	adds	r1, r1, r0
    71ac:	425b      	negs	r3, r3
    71ae:	1859      	adds	r1, r3, r1
    71b0:	4664      	mov	r4, ip
    71b2:	e66b      	b.n	6e8c <__aeabi_dadd+0x1d0>
    71b4:	000c      	movs	r4, r1
    71b6:	432c      	orrs	r4, r5
    71b8:	d115      	bne.n	71e6 <__aeabi_dadd+0x52a>
    71ba:	0001      	movs	r1, r0
    71bc:	4311      	orrs	r1, r2
    71be:	d07b      	beq.n	72b8 <__aeabi_dadd+0x5fc>
    71c0:	0001      	movs	r1, r0
    71c2:	0015      	movs	r5, r2
    71c4:	469a      	mov	sl, r3
    71c6:	4c51      	ldr	r4, [pc, #324]	; (730c <__aeabi_dadd+0x650>)
    71c8:	e5a1      	b.n	6d0e <__aeabi_dadd+0x52>
    71ca:	430d      	orrs	r5, r1
    71cc:	1e69      	subs	r1, r5, #1
    71ce:	418d      	sbcs	r5, r1
    71d0:	2100      	movs	r1, #0
    71d2:	b2ec      	uxtb	r4, r5
    71d4:	e72d      	b.n	7032 <__aeabi_dadd+0x376>
    71d6:	4c4d      	ldr	r4, [pc, #308]	; (730c <__aeabi_dadd+0x650>)
    71d8:	45a4      	cmp	ip, r4
    71da:	d034      	beq.n	7246 <__aeabi_dadd+0x58a>
    71dc:	2480      	movs	r4, #128	; 0x80
    71de:	0424      	lsls	r4, r4, #16
    71e0:	425b      	negs	r3, r3
    71e2:	4321      	orrs	r1, r4
    71e4:	e7c6      	b.n	7174 <__aeabi_dadd+0x4b8>
    71e6:	0004      	movs	r4, r0
    71e8:	4314      	orrs	r4, r2
    71ea:	d04e      	beq.n	728a <__aeabi_dadd+0x5ce>
    71ec:	08ed      	lsrs	r5, r5, #3
    71ee:	074c      	lsls	r4, r1, #29
    71f0:	432c      	orrs	r4, r5
    71f2:	2580      	movs	r5, #128	; 0x80
    71f4:	08c9      	lsrs	r1, r1, #3
    71f6:	032d      	lsls	r5, r5, #12
    71f8:	4229      	tst	r1, r5
    71fa:	d008      	beq.n	720e <__aeabi_dadd+0x552>
    71fc:	08c6      	lsrs	r6, r0, #3
    71fe:	422e      	tst	r6, r5
    7200:	d105      	bne.n	720e <__aeabi_dadd+0x552>
    7202:	08d2      	lsrs	r2, r2, #3
    7204:	0741      	lsls	r1, r0, #29
    7206:	4311      	orrs	r1, r2
    7208:	000c      	movs	r4, r1
    720a:	469a      	mov	sl, r3
    720c:	0031      	movs	r1, r6
    720e:	0f62      	lsrs	r2, r4, #29
    7210:	00c9      	lsls	r1, r1, #3
    7212:	00e5      	lsls	r5, r4, #3
    7214:	4311      	orrs	r1, r2
    7216:	4c3d      	ldr	r4, [pc, #244]	; (730c <__aeabi_dadd+0x650>)
    7218:	e579      	b.n	6d0e <__aeabi_dadd+0x52>
    721a:	0006      	movs	r6, r0
    721c:	4316      	orrs	r6, r2
    721e:	d100      	bne.n	7222 <__aeabi_dadd+0x566>
    7220:	e575      	b.n	6d0e <__aeabi_dadd+0x52>
    7222:	1aae      	subs	r6, r5, r2
    7224:	46b0      	mov	r8, r6
    7226:	4545      	cmp	r5, r8
    7228:	41bf      	sbcs	r7, r7
    722a:	1a0e      	subs	r6, r1, r0
    722c:	427f      	negs	r7, r7
    722e:	1bf6      	subs	r6, r6, r7
    7230:	0237      	lsls	r7, r6, #8
    7232:	d400      	bmi.n	7236 <__aeabi_dadd+0x57a>
    7234:	e5f4      	b.n	6e20 <__aeabi_dadd+0x164>
    7236:	1b55      	subs	r5, r2, r5
    7238:	42aa      	cmp	r2, r5
    723a:	41b6      	sbcs	r6, r6
    723c:	1a41      	subs	r1, r0, r1
    723e:	4276      	negs	r6, r6
    7240:	1b89      	subs	r1, r1, r6
    7242:	469a      	mov	sl, r3
    7244:	e563      	b.n	6d0e <__aeabi_dadd+0x52>
    7246:	0001      	movs	r1, r0
    7248:	0015      	movs	r5, r2
    724a:	4664      	mov	r4, ip
    724c:	e55f      	b.n	6d0e <__aeabi_dadd+0x52>
    724e:	2200      	movs	r2, #0
    7250:	2500      	movs	r5, #0
    7252:	e57b      	b.n	6d4c <__aeabi_dadd+0x90>
    7254:	2b00      	cmp	r3, #0
    7256:	d03b      	beq.n	72d0 <__aeabi_dadd+0x614>
    7258:	0003      	movs	r3, r0
    725a:	4313      	orrs	r3, r2
    725c:	d015      	beq.n	728a <__aeabi_dadd+0x5ce>
    725e:	08ed      	lsrs	r5, r5, #3
    7260:	074b      	lsls	r3, r1, #29
    7262:	432b      	orrs	r3, r5
    7264:	2580      	movs	r5, #128	; 0x80
    7266:	08c9      	lsrs	r1, r1, #3
    7268:	032d      	lsls	r5, r5, #12
    726a:	4229      	tst	r1, r5
    726c:	d007      	beq.n	727e <__aeabi_dadd+0x5c2>
    726e:	08c4      	lsrs	r4, r0, #3
    7270:	422c      	tst	r4, r5
    7272:	d104      	bne.n	727e <__aeabi_dadd+0x5c2>
    7274:	0741      	lsls	r1, r0, #29
    7276:	000b      	movs	r3, r1
    7278:	0021      	movs	r1, r4
    727a:	08d2      	lsrs	r2, r2, #3
    727c:	4313      	orrs	r3, r2
    727e:	00c9      	lsls	r1, r1, #3
    7280:	0f5a      	lsrs	r2, r3, #29
    7282:	4311      	orrs	r1, r2
    7284:	00dd      	lsls	r5, r3, #3
    7286:	4c21      	ldr	r4, [pc, #132]	; (730c <__aeabi_dadd+0x650>)
    7288:	e541      	b.n	6d0e <__aeabi_dadd+0x52>
    728a:	4c20      	ldr	r4, [pc, #128]	; (730c <__aeabi_dadd+0x650>)
    728c:	e53f      	b.n	6d0e <__aeabi_dadd+0x52>
    728e:	2000      	movs	r0, #0
    7290:	e754      	b.n	713c <__aeabi_dadd+0x480>
    7292:	2600      	movs	r6, #0
    7294:	2500      	movs	r5, #0
    7296:	e5d1      	b.n	6e3c <__aeabi_dadd+0x180>
    7298:	0034      	movs	r4, r6
    729a:	000f      	movs	r7, r1
    729c:	3c20      	subs	r4, #32
    729e:	40e7      	lsrs	r7, r4
    72a0:	003c      	movs	r4, r7
    72a2:	2e20      	cmp	r6, #32
    72a4:	d02b      	beq.n	72fe <__aeabi_dadd+0x642>
    72a6:	2740      	movs	r7, #64	; 0x40
    72a8:	1bbe      	subs	r6, r7, r6
    72aa:	40b1      	lsls	r1, r6
    72ac:	430d      	orrs	r5, r1
    72ae:	1e69      	subs	r1, r5, #1
    72b0:	418d      	sbcs	r5, r1
    72b2:	2100      	movs	r1, #0
    72b4:	432c      	orrs	r4, r5
    72b6:	e6bc      	b.n	7032 <__aeabi_dadd+0x376>
    72b8:	2180      	movs	r1, #128	; 0x80
    72ba:	2600      	movs	r6, #0
    72bc:	0309      	lsls	r1, r1, #12
    72be:	4c13      	ldr	r4, [pc, #76]	; (730c <__aeabi_dadd+0x650>)
    72c0:	2500      	movs	r5, #0
    72c2:	e5bb      	b.n	6e3c <__aeabi_dadd+0x180>
    72c4:	430d      	orrs	r5, r1
    72c6:	1e69      	subs	r1, r5, #1
    72c8:	418d      	sbcs	r5, r1
    72ca:	2100      	movs	r1, #0
    72cc:	b2ed      	uxtb	r5, r5
    72ce:	e769      	b.n	71a4 <__aeabi_dadd+0x4e8>
    72d0:	0001      	movs	r1, r0
    72d2:	0015      	movs	r5, r2
    72d4:	4c0d      	ldr	r4, [pc, #52]	; (730c <__aeabi_dadd+0x650>)
    72d6:	e51a      	b.n	6d0e <__aeabi_dadd+0x52>
    72d8:	0001      	movs	r1, r0
    72da:	0015      	movs	r5, r2
    72dc:	e517      	b.n	6d0e <__aeabi_dadd+0x52>
    72de:	001c      	movs	r4, r3
    72e0:	000f      	movs	r7, r1
    72e2:	3c20      	subs	r4, #32
    72e4:	40e7      	lsrs	r7, r4
    72e6:	003c      	movs	r4, r7
    72e8:	2b20      	cmp	r3, #32
    72ea:	d00c      	beq.n	7306 <__aeabi_dadd+0x64a>
    72ec:	2740      	movs	r7, #64	; 0x40
    72ee:	1afb      	subs	r3, r7, r3
    72f0:	4099      	lsls	r1, r3
    72f2:	430d      	orrs	r5, r1
    72f4:	1e69      	subs	r1, r5, #1
    72f6:	418d      	sbcs	r5, r1
    72f8:	2100      	movs	r1, #0
    72fa:	4325      	orrs	r5, r4
    72fc:	e752      	b.n	71a4 <__aeabi_dadd+0x4e8>
    72fe:	2100      	movs	r1, #0
    7300:	e7d4      	b.n	72ac <__aeabi_dadd+0x5f0>
    7302:	001d      	movs	r5, r3
    7304:	e592      	b.n	6e2c <__aeabi_dadd+0x170>
    7306:	2100      	movs	r1, #0
    7308:	e7f3      	b.n	72f2 <__aeabi_dadd+0x636>
    730a:	46c0      	nop			; (mov r8, r8)
    730c:	000007ff 	.word	0x000007ff
    7310:	ff7fffff 	.word	0xff7fffff

00007314 <__aeabi_ddiv>:
    7314:	b5f0      	push	{r4, r5, r6, r7, lr}
    7316:	4656      	mov	r6, sl
    7318:	464d      	mov	r5, r9
    731a:	4644      	mov	r4, r8
    731c:	465f      	mov	r7, fp
    731e:	b4f0      	push	{r4, r5, r6, r7}
    7320:	001d      	movs	r5, r3
    7322:	030e      	lsls	r6, r1, #12
    7324:	004c      	lsls	r4, r1, #1
    7326:	0fcb      	lsrs	r3, r1, #31
    7328:	b087      	sub	sp, #28
    732a:	0007      	movs	r7, r0
    732c:	4692      	mov	sl, r2
    732e:	4681      	mov	r9, r0
    7330:	0b36      	lsrs	r6, r6, #12
    7332:	0d64      	lsrs	r4, r4, #21
    7334:	4698      	mov	r8, r3
    7336:	d06a      	beq.n	740e <__aeabi_ddiv+0xfa>
    7338:	4b6d      	ldr	r3, [pc, #436]	; (74f0 <__aeabi_ddiv+0x1dc>)
    733a:	429c      	cmp	r4, r3
    733c:	d035      	beq.n	73aa <__aeabi_ddiv+0x96>
    733e:	2280      	movs	r2, #128	; 0x80
    7340:	0f43      	lsrs	r3, r0, #29
    7342:	0412      	lsls	r2, r2, #16
    7344:	4313      	orrs	r3, r2
    7346:	00f6      	lsls	r6, r6, #3
    7348:	431e      	orrs	r6, r3
    734a:	00c3      	lsls	r3, r0, #3
    734c:	4699      	mov	r9, r3
    734e:	4b69      	ldr	r3, [pc, #420]	; (74f4 <__aeabi_ddiv+0x1e0>)
    7350:	2700      	movs	r7, #0
    7352:	469c      	mov	ip, r3
    7354:	2300      	movs	r3, #0
    7356:	4464      	add	r4, ip
    7358:	9302      	str	r3, [sp, #8]
    735a:	032b      	lsls	r3, r5, #12
    735c:	0068      	lsls	r0, r5, #1
    735e:	0b1b      	lsrs	r3, r3, #12
    7360:	0fed      	lsrs	r5, r5, #31
    7362:	4651      	mov	r1, sl
    7364:	469b      	mov	fp, r3
    7366:	0d40      	lsrs	r0, r0, #21
    7368:	9500      	str	r5, [sp, #0]
    736a:	d100      	bne.n	736e <__aeabi_ddiv+0x5a>
    736c:	e078      	b.n	7460 <__aeabi_ddiv+0x14c>
    736e:	4b60      	ldr	r3, [pc, #384]	; (74f0 <__aeabi_ddiv+0x1dc>)
    7370:	4298      	cmp	r0, r3
    7372:	d06c      	beq.n	744e <__aeabi_ddiv+0x13a>
    7374:	465b      	mov	r3, fp
    7376:	00da      	lsls	r2, r3, #3
    7378:	0f4b      	lsrs	r3, r1, #29
    737a:	2180      	movs	r1, #128	; 0x80
    737c:	0409      	lsls	r1, r1, #16
    737e:	430b      	orrs	r3, r1
    7380:	4313      	orrs	r3, r2
    7382:	469b      	mov	fp, r3
    7384:	4653      	mov	r3, sl
    7386:	00d9      	lsls	r1, r3, #3
    7388:	4b5a      	ldr	r3, [pc, #360]	; (74f4 <__aeabi_ddiv+0x1e0>)
    738a:	469c      	mov	ip, r3
    738c:	2300      	movs	r3, #0
    738e:	4460      	add	r0, ip
    7390:	4642      	mov	r2, r8
    7392:	1a20      	subs	r0, r4, r0
    7394:	406a      	eors	r2, r5
    7396:	4692      	mov	sl, r2
    7398:	9001      	str	r0, [sp, #4]
    739a:	431f      	orrs	r7, r3
    739c:	2f0f      	cmp	r7, #15
    739e:	d900      	bls.n	73a2 <__aeabi_ddiv+0x8e>
    73a0:	e0b0      	b.n	7504 <__aeabi_ddiv+0x1f0>
    73a2:	4855      	ldr	r0, [pc, #340]	; (74f8 <__aeabi_ddiv+0x1e4>)
    73a4:	00bf      	lsls	r7, r7, #2
    73a6:	59c0      	ldr	r0, [r0, r7]
    73a8:	4687      	mov	pc, r0
    73aa:	4337      	orrs	r7, r6
    73ac:	d000      	beq.n	73b0 <__aeabi_ddiv+0x9c>
    73ae:	e088      	b.n	74c2 <__aeabi_ddiv+0x1ae>
    73b0:	2300      	movs	r3, #0
    73b2:	4699      	mov	r9, r3
    73b4:	3302      	adds	r3, #2
    73b6:	2708      	movs	r7, #8
    73b8:	2600      	movs	r6, #0
    73ba:	9302      	str	r3, [sp, #8]
    73bc:	e7cd      	b.n	735a <__aeabi_ddiv+0x46>
    73be:	4643      	mov	r3, r8
    73c0:	46b3      	mov	fp, r6
    73c2:	4649      	mov	r1, r9
    73c4:	9300      	str	r3, [sp, #0]
    73c6:	9b02      	ldr	r3, [sp, #8]
    73c8:	9a00      	ldr	r2, [sp, #0]
    73ca:	4692      	mov	sl, r2
    73cc:	2b02      	cmp	r3, #2
    73ce:	d000      	beq.n	73d2 <__aeabi_ddiv+0xbe>
    73d0:	e1bf      	b.n	7752 <__aeabi_ddiv+0x43e>
    73d2:	2100      	movs	r1, #0
    73d4:	4653      	mov	r3, sl
    73d6:	2201      	movs	r2, #1
    73d8:	2600      	movs	r6, #0
    73da:	4689      	mov	r9, r1
    73dc:	401a      	ands	r2, r3
    73de:	4b44      	ldr	r3, [pc, #272]	; (74f0 <__aeabi_ddiv+0x1dc>)
    73e0:	2100      	movs	r1, #0
    73e2:	0336      	lsls	r6, r6, #12
    73e4:	0d0c      	lsrs	r4, r1, #20
    73e6:	0524      	lsls	r4, r4, #20
    73e8:	0b36      	lsrs	r6, r6, #12
    73ea:	4326      	orrs	r6, r4
    73ec:	4c43      	ldr	r4, [pc, #268]	; (74fc <__aeabi_ddiv+0x1e8>)
    73ee:	051b      	lsls	r3, r3, #20
    73f0:	4026      	ands	r6, r4
    73f2:	431e      	orrs	r6, r3
    73f4:	0076      	lsls	r6, r6, #1
    73f6:	07d2      	lsls	r2, r2, #31
    73f8:	0876      	lsrs	r6, r6, #1
    73fa:	4316      	orrs	r6, r2
    73fc:	4648      	mov	r0, r9
    73fe:	0031      	movs	r1, r6
    7400:	b007      	add	sp, #28
    7402:	bc3c      	pop	{r2, r3, r4, r5}
    7404:	4690      	mov	r8, r2
    7406:	4699      	mov	r9, r3
    7408:	46a2      	mov	sl, r4
    740a:	46ab      	mov	fp, r5
    740c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    740e:	0033      	movs	r3, r6
    7410:	4303      	orrs	r3, r0
    7412:	d04f      	beq.n	74b4 <__aeabi_ddiv+0x1a0>
    7414:	2e00      	cmp	r6, #0
    7416:	d100      	bne.n	741a <__aeabi_ddiv+0x106>
    7418:	e1bc      	b.n	7794 <__aeabi_ddiv+0x480>
    741a:	0030      	movs	r0, r6
    741c:	f001 fb1c 	bl	8a58 <__clzsi2>
    7420:	0003      	movs	r3, r0
    7422:	3b0b      	subs	r3, #11
    7424:	2b1c      	cmp	r3, #28
    7426:	dd00      	ble.n	742a <__aeabi_ddiv+0x116>
    7428:	e1ad      	b.n	7786 <__aeabi_ddiv+0x472>
    742a:	221d      	movs	r2, #29
    742c:	0001      	movs	r1, r0
    742e:	1ad3      	subs	r3, r2, r3
    7430:	3908      	subs	r1, #8
    7432:	003a      	movs	r2, r7
    7434:	408f      	lsls	r7, r1
    7436:	408e      	lsls	r6, r1
    7438:	40da      	lsrs	r2, r3
    743a:	46b9      	mov	r9, r7
    743c:	4316      	orrs	r6, r2
    743e:	4b30      	ldr	r3, [pc, #192]	; (7500 <__aeabi_ddiv+0x1ec>)
    7440:	2700      	movs	r7, #0
    7442:	469c      	mov	ip, r3
    7444:	2300      	movs	r3, #0
    7446:	4460      	add	r0, ip
    7448:	4244      	negs	r4, r0
    744a:	9302      	str	r3, [sp, #8]
    744c:	e785      	b.n	735a <__aeabi_ddiv+0x46>
    744e:	4653      	mov	r3, sl
    7450:	465a      	mov	r2, fp
    7452:	4313      	orrs	r3, r2
    7454:	d12c      	bne.n	74b0 <__aeabi_ddiv+0x19c>
    7456:	2300      	movs	r3, #0
    7458:	2100      	movs	r1, #0
    745a:	469b      	mov	fp, r3
    745c:	3302      	adds	r3, #2
    745e:	e797      	b.n	7390 <__aeabi_ddiv+0x7c>
    7460:	430b      	orrs	r3, r1
    7462:	d020      	beq.n	74a6 <__aeabi_ddiv+0x192>
    7464:	465b      	mov	r3, fp
    7466:	2b00      	cmp	r3, #0
    7468:	d100      	bne.n	746c <__aeabi_ddiv+0x158>
    746a:	e19e      	b.n	77aa <__aeabi_ddiv+0x496>
    746c:	4658      	mov	r0, fp
    746e:	f001 faf3 	bl	8a58 <__clzsi2>
    7472:	0003      	movs	r3, r0
    7474:	3b0b      	subs	r3, #11
    7476:	2b1c      	cmp	r3, #28
    7478:	dd00      	ble.n	747c <__aeabi_ddiv+0x168>
    747a:	e18f      	b.n	779c <__aeabi_ddiv+0x488>
    747c:	0002      	movs	r2, r0
    747e:	4659      	mov	r1, fp
    7480:	3a08      	subs	r2, #8
    7482:	4091      	lsls	r1, r2
    7484:	468b      	mov	fp, r1
    7486:	211d      	movs	r1, #29
    7488:	1acb      	subs	r3, r1, r3
    748a:	4651      	mov	r1, sl
    748c:	40d9      	lsrs	r1, r3
    748e:	000b      	movs	r3, r1
    7490:	4659      	mov	r1, fp
    7492:	430b      	orrs	r3, r1
    7494:	4651      	mov	r1, sl
    7496:	469b      	mov	fp, r3
    7498:	4091      	lsls	r1, r2
    749a:	4b19      	ldr	r3, [pc, #100]	; (7500 <__aeabi_ddiv+0x1ec>)
    749c:	469c      	mov	ip, r3
    749e:	4460      	add	r0, ip
    74a0:	4240      	negs	r0, r0
    74a2:	2300      	movs	r3, #0
    74a4:	e774      	b.n	7390 <__aeabi_ddiv+0x7c>
    74a6:	2300      	movs	r3, #0
    74a8:	2100      	movs	r1, #0
    74aa:	469b      	mov	fp, r3
    74ac:	3301      	adds	r3, #1
    74ae:	e76f      	b.n	7390 <__aeabi_ddiv+0x7c>
    74b0:	2303      	movs	r3, #3
    74b2:	e76d      	b.n	7390 <__aeabi_ddiv+0x7c>
    74b4:	2300      	movs	r3, #0
    74b6:	4699      	mov	r9, r3
    74b8:	3301      	adds	r3, #1
    74ba:	2704      	movs	r7, #4
    74bc:	2600      	movs	r6, #0
    74be:	9302      	str	r3, [sp, #8]
    74c0:	e74b      	b.n	735a <__aeabi_ddiv+0x46>
    74c2:	2303      	movs	r3, #3
    74c4:	270c      	movs	r7, #12
    74c6:	9302      	str	r3, [sp, #8]
    74c8:	e747      	b.n	735a <__aeabi_ddiv+0x46>
    74ca:	2201      	movs	r2, #1
    74cc:	1ad5      	subs	r5, r2, r3
    74ce:	2d38      	cmp	r5, #56	; 0x38
    74d0:	dc00      	bgt.n	74d4 <__aeabi_ddiv+0x1c0>
    74d2:	e1b0      	b.n	7836 <__aeabi_ddiv+0x522>
    74d4:	4653      	mov	r3, sl
    74d6:	401a      	ands	r2, r3
    74d8:	2100      	movs	r1, #0
    74da:	2300      	movs	r3, #0
    74dc:	2600      	movs	r6, #0
    74de:	4689      	mov	r9, r1
    74e0:	e77e      	b.n	73e0 <__aeabi_ddiv+0xcc>
    74e2:	2300      	movs	r3, #0
    74e4:	2680      	movs	r6, #128	; 0x80
    74e6:	4699      	mov	r9, r3
    74e8:	2200      	movs	r2, #0
    74ea:	0336      	lsls	r6, r6, #12
    74ec:	4b00      	ldr	r3, [pc, #0]	; (74f0 <__aeabi_ddiv+0x1dc>)
    74ee:	e777      	b.n	73e0 <__aeabi_ddiv+0xcc>
    74f0:	000007ff 	.word	0x000007ff
    74f4:	fffffc01 	.word	0xfffffc01
    74f8:	00008e78 	.word	0x00008e78
    74fc:	800fffff 	.word	0x800fffff
    7500:	000003f3 	.word	0x000003f3
    7504:	455e      	cmp	r6, fp
    7506:	d900      	bls.n	750a <__aeabi_ddiv+0x1f6>
    7508:	e172      	b.n	77f0 <__aeabi_ddiv+0x4dc>
    750a:	d100      	bne.n	750e <__aeabi_ddiv+0x1fa>
    750c:	e16d      	b.n	77ea <__aeabi_ddiv+0x4d6>
    750e:	9b01      	ldr	r3, [sp, #4]
    7510:	464d      	mov	r5, r9
    7512:	3b01      	subs	r3, #1
    7514:	9301      	str	r3, [sp, #4]
    7516:	2300      	movs	r3, #0
    7518:	0034      	movs	r4, r6
    751a:	9302      	str	r3, [sp, #8]
    751c:	465b      	mov	r3, fp
    751e:	021e      	lsls	r6, r3, #8
    7520:	0e0b      	lsrs	r3, r1, #24
    7522:	431e      	orrs	r6, r3
    7524:	020b      	lsls	r3, r1, #8
    7526:	9303      	str	r3, [sp, #12]
    7528:	0c33      	lsrs	r3, r6, #16
    752a:	4699      	mov	r9, r3
    752c:	0433      	lsls	r3, r6, #16
    752e:	0c1b      	lsrs	r3, r3, #16
    7530:	4649      	mov	r1, r9
    7532:	0020      	movs	r0, r4
    7534:	9300      	str	r3, [sp, #0]
    7536:	f7fe fd0b 	bl	5f50 <__aeabi_uidiv>
    753a:	9b00      	ldr	r3, [sp, #0]
    753c:	0037      	movs	r7, r6
    753e:	4343      	muls	r3, r0
    7540:	0006      	movs	r6, r0
    7542:	4649      	mov	r1, r9
    7544:	0020      	movs	r0, r4
    7546:	4698      	mov	r8, r3
    7548:	f7fe fd88 	bl	605c <__aeabi_uidivmod>
    754c:	0c2c      	lsrs	r4, r5, #16
    754e:	0409      	lsls	r1, r1, #16
    7550:	430c      	orrs	r4, r1
    7552:	45a0      	cmp	r8, r4
    7554:	d909      	bls.n	756a <__aeabi_ddiv+0x256>
    7556:	19e4      	adds	r4, r4, r7
    7558:	1e73      	subs	r3, r6, #1
    755a:	42a7      	cmp	r7, r4
    755c:	d900      	bls.n	7560 <__aeabi_ddiv+0x24c>
    755e:	e15c      	b.n	781a <__aeabi_ddiv+0x506>
    7560:	45a0      	cmp	r8, r4
    7562:	d800      	bhi.n	7566 <__aeabi_ddiv+0x252>
    7564:	e159      	b.n	781a <__aeabi_ddiv+0x506>
    7566:	3e02      	subs	r6, #2
    7568:	19e4      	adds	r4, r4, r7
    756a:	4643      	mov	r3, r8
    756c:	1ae4      	subs	r4, r4, r3
    756e:	4649      	mov	r1, r9
    7570:	0020      	movs	r0, r4
    7572:	f7fe fced 	bl	5f50 <__aeabi_uidiv>
    7576:	0003      	movs	r3, r0
    7578:	9a00      	ldr	r2, [sp, #0]
    757a:	4680      	mov	r8, r0
    757c:	4353      	muls	r3, r2
    757e:	4649      	mov	r1, r9
    7580:	0020      	movs	r0, r4
    7582:	469b      	mov	fp, r3
    7584:	f7fe fd6a 	bl	605c <__aeabi_uidivmod>
    7588:	042a      	lsls	r2, r5, #16
    758a:	0409      	lsls	r1, r1, #16
    758c:	0c12      	lsrs	r2, r2, #16
    758e:	430a      	orrs	r2, r1
    7590:	4593      	cmp	fp, r2
    7592:	d90d      	bls.n	75b0 <__aeabi_ddiv+0x29c>
    7594:	4643      	mov	r3, r8
    7596:	19d2      	adds	r2, r2, r7
    7598:	3b01      	subs	r3, #1
    759a:	4297      	cmp	r7, r2
    759c:	d900      	bls.n	75a0 <__aeabi_ddiv+0x28c>
    759e:	e13a      	b.n	7816 <__aeabi_ddiv+0x502>
    75a0:	4593      	cmp	fp, r2
    75a2:	d800      	bhi.n	75a6 <__aeabi_ddiv+0x292>
    75a4:	e137      	b.n	7816 <__aeabi_ddiv+0x502>
    75a6:	2302      	movs	r3, #2
    75a8:	425b      	negs	r3, r3
    75aa:	469c      	mov	ip, r3
    75ac:	19d2      	adds	r2, r2, r7
    75ae:	44e0      	add	r8, ip
    75b0:	465b      	mov	r3, fp
    75b2:	1ad2      	subs	r2, r2, r3
    75b4:	4643      	mov	r3, r8
    75b6:	0436      	lsls	r6, r6, #16
    75b8:	4333      	orrs	r3, r6
    75ba:	469b      	mov	fp, r3
    75bc:	9903      	ldr	r1, [sp, #12]
    75be:	0c18      	lsrs	r0, r3, #16
    75c0:	0c0b      	lsrs	r3, r1, #16
    75c2:	001d      	movs	r5, r3
    75c4:	9305      	str	r3, [sp, #20]
    75c6:	0409      	lsls	r1, r1, #16
    75c8:	465b      	mov	r3, fp
    75ca:	0c09      	lsrs	r1, r1, #16
    75cc:	000c      	movs	r4, r1
    75ce:	041b      	lsls	r3, r3, #16
    75d0:	0c1b      	lsrs	r3, r3, #16
    75d2:	4344      	muls	r4, r0
    75d4:	9104      	str	r1, [sp, #16]
    75d6:	4359      	muls	r1, r3
    75d8:	436b      	muls	r3, r5
    75da:	4368      	muls	r0, r5
    75dc:	191b      	adds	r3, r3, r4
    75de:	0c0d      	lsrs	r5, r1, #16
    75e0:	18eb      	adds	r3, r5, r3
    75e2:	429c      	cmp	r4, r3
    75e4:	d903      	bls.n	75ee <__aeabi_ddiv+0x2da>
    75e6:	2480      	movs	r4, #128	; 0x80
    75e8:	0264      	lsls	r4, r4, #9
    75ea:	46a4      	mov	ip, r4
    75ec:	4460      	add	r0, ip
    75ee:	0c1c      	lsrs	r4, r3, #16
    75f0:	0409      	lsls	r1, r1, #16
    75f2:	041b      	lsls	r3, r3, #16
    75f4:	0c09      	lsrs	r1, r1, #16
    75f6:	1820      	adds	r0, r4, r0
    75f8:	185d      	adds	r5, r3, r1
    75fa:	4282      	cmp	r2, r0
    75fc:	d200      	bcs.n	7600 <__aeabi_ddiv+0x2ec>
    75fe:	e0de      	b.n	77be <__aeabi_ddiv+0x4aa>
    7600:	d100      	bne.n	7604 <__aeabi_ddiv+0x2f0>
    7602:	e0d7      	b.n	77b4 <__aeabi_ddiv+0x4a0>
    7604:	1a16      	subs	r6, r2, r0
    7606:	9b02      	ldr	r3, [sp, #8]
    7608:	469c      	mov	ip, r3
    760a:	1b5d      	subs	r5, r3, r5
    760c:	45ac      	cmp	ip, r5
    760e:	419b      	sbcs	r3, r3
    7610:	425b      	negs	r3, r3
    7612:	1af6      	subs	r6, r6, r3
    7614:	42b7      	cmp	r7, r6
    7616:	d100      	bne.n	761a <__aeabi_ddiv+0x306>
    7618:	e106      	b.n	7828 <__aeabi_ddiv+0x514>
    761a:	4649      	mov	r1, r9
    761c:	0030      	movs	r0, r6
    761e:	f7fe fc97 	bl	5f50 <__aeabi_uidiv>
    7622:	9b00      	ldr	r3, [sp, #0]
    7624:	0004      	movs	r4, r0
    7626:	4343      	muls	r3, r0
    7628:	4649      	mov	r1, r9
    762a:	0030      	movs	r0, r6
    762c:	4698      	mov	r8, r3
    762e:	f7fe fd15 	bl	605c <__aeabi_uidivmod>
    7632:	0c2e      	lsrs	r6, r5, #16
    7634:	0409      	lsls	r1, r1, #16
    7636:	430e      	orrs	r6, r1
    7638:	45b0      	cmp	r8, r6
    763a:	d909      	bls.n	7650 <__aeabi_ddiv+0x33c>
    763c:	19f6      	adds	r6, r6, r7
    763e:	1e63      	subs	r3, r4, #1
    7640:	42b7      	cmp	r7, r6
    7642:	d900      	bls.n	7646 <__aeabi_ddiv+0x332>
    7644:	e0f3      	b.n	782e <__aeabi_ddiv+0x51a>
    7646:	45b0      	cmp	r8, r6
    7648:	d800      	bhi.n	764c <__aeabi_ddiv+0x338>
    764a:	e0f0      	b.n	782e <__aeabi_ddiv+0x51a>
    764c:	3c02      	subs	r4, #2
    764e:	19f6      	adds	r6, r6, r7
    7650:	4643      	mov	r3, r8
    7652:	1af3      	subs	r3, r6, r3
    7654:	4649      	mov	r1, r9
    7656:	0018      	movs	r0, r3
    7658:	9302      	str	r3, [sp, #8]
    765a:	f7fe fc79 	bl	5f50 <__aeabi_uidiv>
    765e:	9b00      	ldr	r3, [sp, #0]
    7660:	0006      	movs	r6, r0
    7662:	4343      	muls	r3, r0
    7664:	4649      	mov	r1, r9
    7666:	9802      	ldr	r0, [sp, #8]
    7668:	4698      	mov	r8, r3
    766a:	f7fe fcf7 	bl	605c <__aeabi_uidivmod>
    766e:	042d      	lsls	r5, r5, #16
    7670:	0409      	lsls	r1, r1, #16
    7672:	0c2d      	lsrs	r5, r5, #16
    7674:	430d      	orrs	r5, r1
    7676:	45a8      	cmp	r8, r5
    7678:	d909      	bls.n	768e <__aeabi_ddiv+0x37a>
    767a:	19ed      	adds	r5, r5, r7
    767c:	1e73      	subs	r3, r6, #1
    767e:	42af      	cmp	r7, r5
    7680:	d900      	bls.n	7684 <__aeabi_ddiv+0x370>
    7682:	e0d6      	b.n	7832 <__aeabi_ddiv+0x51e>
    7684:	45a8      	cmp	r8, r5
    7686:	d800      	bhi.n	768a <__aeabi_ddiv+0x376>
    7688:	e0d3      	b.n	7832 <__aeabi_ddiv+0x51e>
    768a:	3e02      	subs	r6, #2
    768c:	19ed      	adds	r5, r5, r7
    768e:	0424      	lsls	r4, r4, #16
    7690:	0021      	movs	r1, r4
    7692:	4643      	mov	r3, r8
    7694:	4331      	orrs	r1, r6
    7696:	9e04      	ldr	r6, [sp, #16]
    7698:	9a05      	ldr	r2, [sp, #20]
    769a:	0030      	movs	r0, r6
    769c:	1aed      	subs	r5, r5, r3
    769e:	040b      	lsls	r3, r1, #16
    76a0:	0c0c      	lsrs	r4, r1, #16
    76a2:	0c1b      	lsrs	r3, r3, #16
    76a4:	4358      	muls	r0, r3
    76a6:	4366      	muls	r6, r4
    76a8:	4353      	muls	r3, r2
    76aa:	4354      	muls	r4, r2
    76ac:	199a      	adds	r2, r3, r6
    76ae:	0c03      	lsrs	r3, r0, #16
    76b0:	189b      	adds	r3, r3, r2
    76b2:	429e      	cmp	r6, r3
    76b4:	d903      	bls.n	76be <__aeabi_ddiv+0x3aa>
    76b6:	2280      	movs	r2, #128	; 0x80
    76b8:	0252      	lsls	r2, r2, #9
    76ba:	4694      	mov	ip, r2
    76bc:	4464      	add	r4, ip
    76be:	0c1a      	lsrs	r2, r3, #16
    76c0:	0400      	lsls	r0, r0, #16
    76c2:	041b      	lsls	r3, r3, #16
    76c4:	0c00      	lsrs	r0, r0, #16
    76c6:	1914      	adds	r4, r2, r4
    76c8:	181b      	adds	r3, r3, r0
    76ca:	42a5      	cmp	r5, r4
    76cc:	d350      	bcc.n	7770 <__aeabi_ddiv+0x45c>
    76ce:	d04d      	beq.n	776c <__aeabi_ddiv+0x458>
    76d0:	2301      	movs	r3, #1
    76d2:	4319      	orrs	r1, r3
    76d4:	4a96      	ldr	r2, [pc, #600]	; (7930 <__aeabi_ddiv+0x61c>)
    76d6:	9b01      	ldr	r3, [sp, #4]
    76d8:	4694      	mov	ip, r2
    76da:	4463      	add	r3, ip
    76dc:	2b00      	cmp	r3, #0
    76de:	dc00      	bgt.n	76e2 <__aeabi_ddiv+0x3ce>
    76e0:	e6f3      	b.n	74ca <__aeabi_ddiv+0x1b6>
    76e2:	074a      	lsls	r2, r1, #29
    76e4:	d009      	beq.n	76fa <__aeabi_ddiv+0x3e6>
    76e6:	220f      	movs	r2, #15
    76e8:	400a      	ands	r2, r1
    76ea:	2a04      	cmp	r2, #4
    76ec:	d005      	beq.n	76fa <__aeabi_ddiv+0x3e6>
    76ee:	1d0a      	adds	r2, r1, #4
    76f0:	428a      	cmp	r2, r1
    76f2:	4189      	sbcs	r1, r1
    76f4:	4249      	negs	r1, r1
    76f6:	448b      	add	fp, r1
    76f8:	0011      	movs	r1, r2
    76fa:	465a      	mov	r2, fp
    76fc:	01d2      	lsls	r2, r2, #7
    76fe:	d508      	bpl.n	7712 <__aeabi_ddiv+0x3fe>
    7700:	465a      	mov	r2, fp
    7702:	4b8c      	ldr	r3, [pc, #560]	; (7934 <__aeabi_ddiv+0x620>)
    7704:	401a      	ands	r2, r3
    7706:	4693      	mov	fp, r2
    7708:	2280      	movs	r2, #128	; 0x80
    770a:	00d2      	lsls	r2, r2, #3
    770c:	4694      	mov	ip, r2
    770e:	9b01      	ldr	r3, [sp, #4]
    7710:	4463      	add	r3, ip
    7712:	4a89      	ldr	r2, [pc, #548]	; (7938 <__aeabi_ddiv+0x624>)
    7714:	4293      	cmp	r3, r2
    7716:	dd00      	ble.n	771a <__aeabi_ddiv+0x406>
    7718:	e65b      	b.n	73d2 <__aeabi_ddiv+0xbe>
    771a:	465a      	mov	r2, fp
    771c:	08c9      	lsrs	r1, r1, #3
    771e:	0750      	lsls	r0, r2, #29
    7720:	4308      	orrs	r0, r1
    7722:	0256      	lsls	r6, r2, #9
    7724:	4651      	mov	r1, sl
    7726:	2201      	movs	r2, #1
    7728:	055b      	lsls	r3, r3, #21
    772a:	4681      	mov	r9, r0
    772c:	0b36      	lsrs	r6, r6, #12
    772e:	0d5b      	lsrs	r3, r3, #21
    7730:	400a      	ands	r2, r1
    7732:	e655      	b.n	73e0 <__aeabi_ddiv+0xcc>
    7734:	2380      	movs	r3, #128	; 0x80
    7736:	031b      	lsls	r3, r3, #12
    7738:	421e      	tst	r6, r3
    773a:	d011      	beq.n	7760 <__aeabi_ddiv+0x44c>
    773c:	465a      	mov	r2, fp
    773e:	421a      	tst	r2, r3
    7740:	d10e      	bne.n	7760 <__aeabi_ddiv+0x44c>
    7742:	465e      	mov	r6, fp
    7744:	431e      	orrs	r6, r3
    7746:	0336      	lsls	r6, r6, #12
    7748:	0b36      	lsrs	r6, r6, #12
    774a:	002a      	movs	r2, r5
    774c:	4689      	mov	r9, r1
    774e:	4b7b      	ldr	r3, [pc, #492]	; (793c <__aeabi_ddiv+0x628>)
    7750:	e646      	b.n	73e0 <__aeabi_ddiv+0xcc>
    7752:	2b03      	cmp	r3, #3
    7754:	d100      	bne.n	7758 <__aeabi_ddiv+0x444>
    7756:	e0e1      	b.n	791c <__aeabi_ddiv+0x608>
    7758:	2b01      	cmp	r3, #1
    775a:	d1bb      	bne.n	76d4 <__aeabi_ddiv+0x3c0>
    775c:	401a      	ands	r2, r3
    775e:	e6bb      	b.n	74d8 <__aeabi_ddiv+0x1c4>
    7760:	431e      	orrs	r6, r3
    7762:	0336      	lsls	r6, r6, #12
    7764:	0b36      	lsrs	r6, r6, #12
    7766:	4642      	mov	r2, r8
    7768:	4b74      	ldr	r3, [pc, #464]	; (793c <__aeabi_ddiv+0x628>)
    776a:	e639      	b.n	73e0 <__aeabi_ddiv+0xcc>
    776c:	2b00      	cmp	r3, #0
    776e:	d0b1      	beq.n	76d4 <__aeabi_ddiv+0x3c0>
    7770:	197d      	adds	r5, r7, r5
    7772:	1e4a      	subs	r2, r1, #1
    7774:	42af      	cmp	r7, r5
    7776:	d952      	bls.n	781e <__aeabi_ddiv+0x50a>
    7778:	0011      	movs	r1, r2
    777a:	42a5      	cmp	r5, r4
    777c:	d1a8      	bne.n	76d0 <__aeabi_ddiv+0x3bc>
    777e:	9a03      	ldr	r2, [sp, #12]
    7780:	429a      	cmp	r2, r3
    7782:	d1a5      	bne.n	76d0 <__aeabi_ddiv+0x3bc>
    7784:	e7a6      	b.n	76d4 <__aeabi_ddiv+0x3c0>
    7786:	0003      	movs	r3, r0
    7788:	003e      	movs	r6, r7
    778a:	3b28      	subs	r3, #40	; 0x28
    778c:	409e      	lsls	r6, r3
    778e:	2300      	movs	r3, #0
    7790:	4699      	mov	r9, r3
    7792:	e654      	b.n	743e <__aeabi_ddiv+0x12a>
    7794:	f001 f960 	bl	8a58 <__clzsi2>
    7798:	3020      	adds	r0, #32
    779a:	e641      	b.n	7420 <__aeabi_ddiv+0x10c>
    779c:	0003      	movs	r3, r0
    779e:	4652      	mov	r2, sl
    77a0:	3b28      	subs	r3, #40	; 0x28
    77a2:	409a      	lsls	r2, r3
    77a4:	2100      	movs	r1, #0
    77a6:	4693      	mov	fp, r2
    77a8:	e677      	b.n	749a <__aeabi_ddiv+0x186>
    77aa:	4650      	mov	r0, sl
    77ac:	f001 f954 	bl	8a58 <__clzsi2>
    77b0:	3020      	adds	r0, #32
    77b2:	e65e      	b.n	7472 <__aeabi_ddiv+0x15e>
    77b4:	9b02      	ldr	r3, [sp, #8]
    77b6:	2600      	movs	r6, #0
    77b8:	42ab      	cmp	r3, r5
    77ba:	d300      	bcc.n	77be <__aeabi_ddiv+0x4aa>
    77bc:	e723      	b.n	7606 <__aeabi_ddiv+0x2f2>
    77be:	9e03      	ldr	r6, [sp, #12]
    77c0:	9902      	ldr	r1, [sp, #8]
    77c2:	46b4      	mov	ip, r6
    77c4:	4461      	add	r1, ip
    77c6:	4688      	mov	r8, r1
    77c8:	45b0      	cmp	r8, r6
    77ca:	41b6      	sbcs	r6, r6
    77cc:	465b      	mov	r3, fp
    77ce:	4276      	negs	r6, r6
    77d0:	19f6      	adds	r6, r6, r7
    77d2:	18b2      	adds	r2, r6, r2
    77d4:	3b01      	subs	r3, #1
    77d6:	9102      	str	r1, [sp, #8]
    77d8:	4297      	cmp	r7, r2
    77da:	d213      	bcs.n	7804 <__aeabi_ddiv+0x4f0>
    77dc:	4290      	cmp	r0, r2
    77de:	d84f      	bhi.n	7880 <__aeabi_ddiv+0x56c>
    77e0:	d100      	bne.n	77e4 <__aeabi_ddiv+0x4d0>
    77e2:	e08e      	b.n	7902 <__aeabi_ddiv+0x5ee>
    77e4:	1a16      	subs	r6, r2, r0
    77e6:	469b      	mov	fp, r3
    77e8:	e70d      	b.n	7606 <__aeabi_ddiv+0x2f2>
    77ea:	4589      	cmp	r9, r1
    77ec:	d200      	bcs.n	77f0 <__aeabi_ddiv+0x4dc>
    77ee:	e68e      	b.n	750e <__aeabi_ddiv+0x1fa>
    77f0:	0874      	lsrs	r4, r6, #1
    77f2:	464b      	mov	r3, r9
    77f4:	07f6      	lsls	r6, r6, #31
    77f6:	0035      	movs	r5, r6
    77f8:	085b      	lsrs	r3, r3, #1
    77fa:	431d      	orrs	r5, r3
    77fc:	464b      	mov	r3, r9
    77fe:	07db      	lsls	r3, r3, #31
    7800:	9302      	str	r3, [sp, #8]
    7802:	e68b      	b.n	751c <__aeabi_ddiv+0x208>
    7804:	4297      	cmp	r7, r2
    7806:	d1ed      	bne.n	77e4 <__aeabi_ddiv+0x4d0>
    7808:	9903      	ldr	r1, [sp, #12]
    780a:	9c02      	ldr	r4, [sp, #8]
    780c:	42a1      	cmp	r1, r4
    780e:	d9e5      	bls.n	77dc <__aeabi_ddiv+0x4c8>
    7810:	1a3e      	subs	r6, r7, r0
    7812:	469b      	mov	fp, r3
    7814:	e6f7      	b.n	7606 <__aeabi_ddiv+0x2f2>
    7816:	4698      	mov	r8, r3
    7818:	e6ca      	b.n	75b0 <__aeabi_ddiv+0x29c>
    781a:	001e      	movs	r6, r3
    781c:	e6a5      	b.n	756a <__aeabi_ddiv+0x256>
    781e:	42ac      	cmp	r4, r5
    7820:	d83e      	bhi.n	78a0 <__aeabi_ddiv+0x58c>
    7822:	d074      	beq.n	790e <__aeabi_ddiv+0x5fa>
    7824:	0011      	movs	r1, r2
    7826:	e753      	b.n	76d0 <__aeabi_ddiv+0x3bc>
    7828:	2101      	movs	r1, #1
    782a:	4249      	negs	r1, r1
    782c:	e752      	b.n	76d4 <__aeabi_ddiv+0x3c0>
    782e:	001c      	movs	r4, r3
    7830:	e70e      	b.n	7650 <__aeabi_ddiv+0x33c>
    7832:	001e      	movs	r6, r3
    7834:	e72b      	b.n	768e <__aeabi_ddiv+0x37a>
    7836:	2d1f      	cmp	r5, #31
    7838:	dc3c      	bgt.n	78b4 <__aeabi_ddiv+0x5a0>
    783a:	2320      	movs	r3, #32
    783c:	000a      	movs	r2, r1
    783e:	4658      	mov	r0, fp
    7840:	1b5b      	subs	r3, r3, r5
    7842:	4098      	lsls	r0, r3
    7844:	40ea      	lsrs	r2, r5
    7846:	4099      	lsls	r1, r3
    7848:	4302      	orrs	r2, r0
    784a:	1e48      	subs	r0, r1, #1
    784c:	4181      	sbcs	r1, r0
    784e:	465e      	mov	r6, fp
    7850:	4311      	orrs	r1, r2
    7852:	40ee      	lsrs	r6, r5
    7854:	074b      	lsls	r3, r1, #29
    7856:	d009      	beq.n	786c <__aeabi_ddiv+0x558>
    7858:	230f      	movs	r3, #15
    785a:	400b      	ands	r3, r1
    785c:	2b04      	cmp	r3, #4
    785e:	d005      	beq.n	786c <__aeabi_ddiv+0x558>
    7860:	000b      	movs	r3, r1
    7862:	1d19      	adds	r1, r3, #4
    7864:	4299      	cmp	r1, r3
    7866:	419b      	sbcs	r3, r3
    7868:	425b      	negs	r3, r3
    786a:	18f6      	adds	r6, r6, r3
    786c:	0233      	lsls	r3, r6, #8
    786e:	d53c      	bpl.n	78ea <__aeabi_ddiv+0x5d6>
    7870:	4653      	mov	r3, sl
    7872:	2201      	movs	r2, #1
    7874:	2100      	movs	r1, #0
    7876:	401a      	ands	r2, r3
    7878:	2600      	movs	r6, #0
    787a:	2301      	movs	r3, #1
    787c:	4689      	mov	r9, r1
    787e:	e5af      	b.n	73e0 <__aeabi_ddiv+0xcc>
    7880:	2302      	movs	r3, #2
    7882:	425b      	negs	r3, r3
    7884:	469c      	mov	ip, r3
    7886:	9c03      	ldr	r4, [sp, #12]
    7888:	44e3      	add	fp, ip
    788a:	46a4      	mov	ip, r4
    788c:	9b02      	ldr	r3, [sp, #8]
    788e:	4463      	add	r3, ip
    7890:	4698      	mov	r8, r3
    7892:	45a0      	cmp	r8, r4
    7894:	41b6      	sbcs	r6, r6
    7896:	4276      	negs	r6, r6
    7898:	19f6      	adds	r6, r6, r7
    789a:	9302      	str	r3, [sp, #8]
    789c:	18b2      	adds	r2, r6, r2
    789e:	e6b1      	b.n	7604 <__aeabi_ddiv+0x2f0>
    78a0:	9803      	ldr	r0, [sp, #12]
    78a2:	1e8a      	subs	r2, r1, #2
    78a4:	0041      	lsls	r1, r0, #1
    78a6:	4281      	cmp	r1, r0
    78a8:	41b6      	sbcs	r6, r6
    78aa:	4276      	negs	r6, r6
    78ac:	19f6      	adds	r6, r6, r7
    78ae:	19ad      	adds	r5, r5, r6
    78b0:	9103      	str	r1, [sp, #12]
    78b2:	e761      	b.n	7778 <__aeabi_ddiv+0x464>
    78b4:	221f      	movs	r2, #31
    78b6:	4252      	negs	r2, r2
    78b8:	1ad3      	subs	r3, r2, r3
    78ba:	465a      	mov	r2, fp
    78bc:	40da      	lsrs	r2, r3
    78be:	0013      	movs	r3, r2
    78c0:	2d20      	cmp	r5, #32
    78c2:	d029      	beq.n	7918 <__aeabi_ddiv+0x604>
    78c4:	2240      	movs	r2, #64	; 0x40
    78c6:	4658      	mov	r0, fp
    78c8:	1b55      	subs	r5, r2, r5
    78ca:	40a8      	lsls	r0, r5
    78cc:	4301      	orrs	r1, r0
    78ce:	1e48      	subs	r0, r1, #1
    78d0:	4181      	sbcs	r1, r0
    78d2:	2007      	movs	r0, #7
    78d4:	430b      	orrs	r3, r1
    78d6:	4018      	ands	r0, r3
    78d8:	2600      	movs	r6, #0
    78da:	2800      	cmp	r0, #0
    78dc:	d009      	beq.n	78f2 <__aeabi_ddiv+0x5de>
    78de:	220f      	movs	r2, #15
    78e0:	2600      	movs	r6, #0
    78e2:	401a      	ands	r2, r3
    78e4:	0019      	movs	r1, r3
    78e6:	2a04      	cmp	r2, #4
    78e8:	d1bb      	bne.n	7862 <__aeabi_ddiv+0x54e>
    78ea:	000b      	movs	r3, r1
    78ec:	0770      	lsls	r0, r6, #29
    78ee:	0276      	lsls	r6, r6, #9
    78f0:	0b36      	lsrs	r6, r6, #12
    78f2:	08db      	lsrs	r3, r3, #3
    78f4:	4303      	orrs	r3, r0
    78f6:	4699      	mov	r9, r3
    78f8:	2201      	movs	r2, #1
    78fa:	4653      	mov	r3, sl
    78fc:	401a      	ands	r2, r3
    78fe:	2300      	movs	r3, #0
    7900:	e56e      	b.n	73e0 <__aeabi_ddiv+0xcc>
    7902:	9902      	ldr	r1, [sp, #8]
    7904:	428d      	cmp	r5, r1
    7906:	d8bb      	bhi.n	7880 <__aeabi_ddiv+0x56c>
    7908:	469b      	mov	fp, r3
    790a:	2600      	movs	r6, #0
    790c:	e67b      	b.n	7606 <__aeabi_ddiv+0x2f2>
    790e:	9803      	ldr	r0, [sp, #12]
    7910:	4298      	cmp	r0, r3
    7912:	d3c5      	bcc.n	78a0 <__aeabi_ddiv+0x58c>
    7914:	0011      	movs	r1, r2
    7916:	e732      	b.n	777e <__aeabi_ddiv+0x46a>
    7918:	2000      	movs	r0, #0
    791a:	e7d7      	b.n	78cc <__aeabi_ddiv+0x5b8>
    791c:	2680      	movs	r6, #128	; 0x80
    791e:	465b      	mov	r3, fp
    7920:	0336      	lsls	r6, r6, #12
    7922:	431e      	orrs	r6, r3
    7924:	0336      	lsls	r6, r6, #12
    7926:	0b36      	lsrs	r6, r6, #12
    7928:	9a00      	ldr	r2, [sp, #0]
    792a:	4689      	mov	r9, r1
    792c:	4b03      	ldr	r3, [pc, #12]	; (793c <__aeabi_ddiv+0x628>)
    792e:	e557      	b.n	73e0 <__aeabi_ddiv+0xcc>
    7930:	000003ff 	.word	0x000003ff
    7934:	feffffff 	.word	0xfeffffff
    7938:	000007fe 	.word	0x000007fe
    793c:	000007ff 	.word	0x000007ff

00007940 <__eqdf2>:
    7940:	b5f0      	push	{r4, r5, r6, r7, lr}
    7942:	465f      	mov	r7, fp
    7944:	4656      	mov	r6, sl
    7946:	464d      	mov	r5, r9
    7948:	4644      	mov	r4, r8
    794a:	b4f0      	push	{r4, r5, r6, r7}
    794c:	031f      	lsls	r7, r3, #12
    794e:	005c      	lsls	r4, r3, #1
    7950:	0fdb      	lsrs	r3, r3, #31
    7952:	469a      	mov	sl, r3
    7954:	4b19      	ldr	r3, [pc, #100]	; (79bc <__eqdf2+0x7c>)
    7956:	030e      	lsls	r6, r1, #12
    7958:	004d      	lsls	r5, r1, #1
    795a:	0fc9      	lsrs	r1, r1, #31
    795c:	4680      	mov	r8, r0
    795e:	0b36      	lsrs	r6, r6, #12
    7960:	0d6d      	lsrs	r5, r5, #21
    7962:	468b      	mov	fp, r1
    7964:	4691      	mov	r9, r2
    7966:	0b3f      	lsrs	r7, r7, #12
    7968:	0d64      	lsrs	r4, r4, #21
    796a:	429d      	cmp	r5, r3
    796c:	d019      	beq.n	79a2 <__eqdf2+0x62>
    796e:	4b13      	ldr	r3, [pc, #76]	; (79bc <__eqdf2+0x7c>)
    7970:	429c      	cmp	r4, r3
    7972:	d01b      	beq.n	79ac <__eqdf2+0x6c>
    7974:	2301      	movs	r3, #1
    7976:	42a5      	cmp	r5, r4
    7978:	d006      	beq.n	7988 <__eqdf2+0x48>
    797a:	0018      	movs	r0, r3
    797c:	bc3c      	pop	{r2, r3, r4, r5}
    797e:	4690      	mov	r8, r2
    7980:	4699      	mov	r9, r3
    7982:	46a2      	mov	sl, r4
    7984:	46ab      	mov	fp, r5
    7986:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7988:	42be      	cmp	r6, r7
    798a:	d1f6      	bne.n	797a <__eqdf2+0x3a>
    798c:	45c8      	cmp	r8, r9
    798e:	d1f4      	bne.n	797a <__eqdf2+0x3a>
    7990:	45d3      	cmp	fp, sl
    7992:	d010      	beq.n	79b6 <__eqdf2+0x76>
    7994:	2d00      	cmp	r5, #0
    7996:	d1f0      	bne.n	797a <__eqdf2+0x3a>
    7998:	4330      	orrs	r0, r6
    799a:	0003      	movs	r3, r0
    799c:	1e5a      	subs	r2, r3, #1
    799e:	4193      	sbcs	r3, r2
    79a0:	e7eb      	b.n	797a <__eqdf2+0x3a>
    79a2:	0031      	movs	r1, r6
    79a4:	2301      	movs	r3, #1
    79a6:	4301      	orrs	r1, r0
    79a8:	d1e7      	bne.n	797a <__eqdf2+0x3a>
    79aa:	e7e0      	b.n	796e <__eqdf2+0x2e>
    79ac:	433a      	orrs	r2, r7
    79ae:	2301      	movs	r3, #1
    79b0:	2a00      	cmp	r2, #0
    79b2:	d1e2      	bne.n	797a <__eqdf2+0x3a>
    79b4:	e7de      	b.n	7974 <__eqdf2+0x34>
    79b6:	2300      	movs	r3, #0
    79b8:	e7df      	b.n	797a <__eqdf2+0x3a>
    79ba:	46c0      	nop			; (mov r8, r8)
    79bc:	000007ff 	.word	0x000007ff

000079c0 <__gedf2>:
    79c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    79c2:	465f      	mov	r7, fp
    79c4:	4644      	mov	r4, r8
    79c6:	4656      	mov	r6, sl
    79c8:	464d      	mov	r5, r9
    79ca:	b4f0      	push	{r4, r5, r6, r7}
    79cc:	031f      	lsls	r7, r3, #12
    79ce:	0b3c      	lsrs	r4, r7, #12
    79d0:	4f2c      	ldr	r7, [pc, #176]	; (7a84 <__gedf2+0xc4>)
    79d2:	030e      	lsls	r6, r1, #12
    79d4:	004d      	lsls	r5, r1, #1
    79d6:	46a3      	mov	fp, r4
    79d8:	005c      	lsls	r4, r3, #1
    79da:	4684      	mov	ip, r0
    79dc:	0b36      	lsrs	r6, r6, #12
    79de:	0d6d      	lsrs	r5, r5, #21
    79e0:	0fc9      	lsrs	r1, r1, #31
    79e2:	4690      	mov	r8, r2
    79e4:	0d64      	lsrs	r4, r4, #21
    79e6:	0fdb      	lsrs	r3, r3, #31
    79e8:	42bd      	cmp	r5, r7
    79ea:	d02b      	beq.n	7a44 <__gedf2+0x84>
    79ec:	4f25      	ldr	r7, [pc, #148]	; (7a84 <__gedf2+0xc4>)
    79ee:	42bc      	cmp	r4, r7
    79f0:	d02e      	beq.n	7a50 <__gedf2+0x90>
    79f2:	2d00      	cmp	r5, #0
    79f4:	d10e      	bne.n	7a14 <__gedf2+0x54>
    79f6:	4330      	orrs	r0, r6
    79f8:	0007      	movs	r7, r0
    79fa:	4681      	mov	r9, r0
    79fc:	4278      	negs	r0, r7
    79fe:	4178      	adcs	r0, r7
    7a00:	2c00      	cmp	r4, #0
    7a02:	d117      	bne.n	7a34 <__gedf2+0x74>
    7a04:	465f      	mov	r7, fp
    7a06:	433a      	orrs	r2, r7
    7a08:	d114      	bne.n	7a34 <__gedf2+0x74>
    7a0a:	464b      	mov	r3, r9
    7a0c:	2000      	movs	r0, #0
    7a0e:	2b00      	cmp	r3, #0
    7a10:	d00a      	beq.n	7a28 <__gedf2+0x68>
    7a12:	e006      	b.n	7a22 <__gedf2+0x62>
    7a14:	2c00      	cmp	r4, #0
    7a16:	d102      	bne.n	7a1e <__gedf2+0x5e>
    7a18:	4658      	mov	r0, fp
    7a1a:	4302      	orrs	r2, r0
    7a1c:	d001      	beq.n	7a22 <__gedf2+0x62>
    7a1e:	4299      	cmp	r1, r3
    7a20:	d01a      	beq.n	7a58 <__gedf2+0x98>
    7a22:	2301      	movs	r3, #1
    7a24:	4248      	negs	r0, r1
    7a26:	4318      	orrs	r0, r3
    7a28:	bc3c      	pop	{r2, r3, r4, r5}
    7a2a:	4690      	mov	r8, r2
    7a2c:	4699      	mov	r9, r3
    7a2e:	46a2      	mov	sl, r4
    7a30:	46ab      	mov	fp, r5
    7a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a34:	2800      	cmp	r0, #0
    7a36:	d0f2      	beq.n	7a1e <__gedf2+0x5e>
    7a38:	4258      	negs	r0, r3
    7a3a:	4158      	adcs	r0, r3
    7a3c:	2201      	movs	r2, #1
    7a3e:	4240      	negs	r0, r0
    7a40:	4310      	orrs	r0, r2
    7a42:	e7f1      	b.n	7a28 <__gedf2+0x68>
    7a44:	0037      	movs	r7, r6
    7a46:	4307      	orrs	r7, r0
    7a48:	d0d0      	beq.n	79ec <__gedf2+0x2c>
    7a4a:	2002      	movs	r0, #2
    7a4c:	4240      	negs	r0, r0
    7a4e:	e7eb      	b.n	7a28 <__gedf2+0x68>
    7a50:	465f      	mov	r7, fp
    7a52:	4317      	orrs	r7, r2
    7a54:	d0cd      	beq.n	79f2 <__gedf2+0x32>
    7a56:	e7f8      	b.n	7a4a <__gedf2+0x8a>
    7a58:	42a5      	cmp	r5, r4
    7a5a:	dce2      	bgt.n	7a22 <__gedf2+0x62>
    7a5c:	db05      	blt.n	7a6a <__gedf2+0xaa>
    7a5e:	455e      	cmp	r6, fp
    7a60:	d8df      	bhi.n	7a22 <__gedf2+0x62>
    7a62:	d008      	beq.n	7a76 <__gedf2+0xb6>
    7a64:	2000      	movs	r0, #0
    7a66:	455e      	cmp	r6, fp
    7a68:	d2de      	bcs.n	7a28 <__gedf2+0x68>
    7a6a:	4248      	negs	r0, r1
    7a6c:	4148      	adcs	r0, r1
    7a6e:	2301      	movs	r3, #1
    7a70:	4240      	negs	r0, r0
    7a72:	4318      	orrs	r0, r3
    7a74:	e7d8      	b.n	7a28 <__gedf2+0x68>
    7a76:	45c4      	cmp	ip, r8
    7a78:	d8d3      	bhi.n	7a22 <__gedf2+0x62>
    7a7a:	2000      	movs	r0, #0
    7a7c:	45c4      	cmp	ip, r8
    7a7e:	d3f4      	bcc.n	7a6a <__gedf2+0xaa>
    7a80:	e7d2      	b.n	7a28 <__gedf2+0x68>
    7a82:	46c0      	nop			; (mov r8, r8)
    7a84:	000007ff 	.word	0x000007ff

00007a88 <__ledf2>:
    7a88:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a8a:	465f      	mov	r7, fp
    7a8c:	464d      	mov	r5, r9
    7a8e:	4644      	mov	r4, r8
    7a90:	4656      	mov	r6, sl
    7a92:	b4f0      	push	{r4, r5, r6, r7}
    7a94:	031c      	lsls	r4, r3, #12
    7a96:	0b24      	lsrs	r4, r4, #12
    7a98:	46a4      	mov	ip, r4
    7a9a:	4c2f      	ldr	r4, [pc, #188]	; (7b58 <__ledf2+0xd0>)
    7a9c:	030f      	lsls	r7, r1, #12
    7a9e:	004d      	lsls	r5, r1, #1
    7aa0:	005e      	lsls	r6, r3, #1
    7aa2:	0fc9      	lsrs	r1, r1, #31
    7aa4:	4680      	mov	r8, r0
    7aa6:	0b3f      	lsrs	r7, r7, #12
    7aa8:	0d6d      	lsrs	r5, r5, #21
    7aaa:	468b      	mov	fp, r1
    7aac:	4691      	mov	r9, r2
    7aae:	0d76      	lsrs	r6, r6, #21
    7ab0:	0fdb      	lsrs	r3, r3, #31
    7ab2:	42a5      	cmp	r5, r4
    7ab4:	d020      	beq.n	7af8 <__ledf2+0x70>
    7ab6:	4c28      	ldr	r4, [pc, #160]	; (7b58 <__ledf2+0xd0>)
    7ab8:	42a6      	cmp	r6, r4
    7aba:	d022      	beq.n	7b02 <__ledf2+0x7a>
    7abc:	2d00      	cmp	r5, #0
    7abe:	d112      	bne.n	7ae6 <__ledf2+0x5e>
    7ac0:	4338      	orrs	r0, r7
    7ac2:	4244      	negs	r4, r0
    7ac4:	4144      	adcs	r4, r0
    7ac6:	2e00      	cmp	r6, #0
    7ac8:	d020      	beq.n	7b0c <__ledf2+0x84>
    7aca:	2c00      	cmp	r4, #0
    7acc:	d00d      	beq.n	7aea <__ledf2+0x62>
    7ace:	425c      	negs	r4, r3
    7ad0:	4163      	adcs	r3, r4
    7ad2:	2401      	movs	r4, #1
    7ad4:	425b      	negs	r3, r3
    7ad6:	431c      	orrs	r4, r3
    7ad8:	0020      	movs	r0, r4
    7ada:	bc3c      	pop	{r2, r3, r4, r5}
    7adc:	4690      	mov	r8, r2
    7ade:	4699      	mov	r9, r3
    7ae0:	46a2      	mov	sl, r4
    7ae2:	46ab      	mov	fp, r5
    7ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ae6:	2e00      	cmp	r6, #0
    7ae8:	d017      	beq.n	7b1a <__ledf2+0x92>
    7aea:	455b      	cmp	r3, fp
    7aec:	d019      	beq.n	7b22 <__ledf2+0x9a>
    7aee:	465b      	mov	r3, fp
    7af0:	425c      	negs	r4, r3
    7af2:	2301      	movs	r3, #1
    7af4:	431c      	orrs	r4, r3
    7af6:	e7ef      	b.n	7ad8 <__ledf2+0x50>
    7af8:	0039      	movs	r1, r7
    7afa:	2402      	movs	r4, #2
    7afc:	4301      	orrs	r1, r0
    7afe:	d1eb      	bne.n	7ad8 <__ledf2+0x50>
    7b00:	e7d9      	b.n	7ab6 <__ledf2+0x2e>
    7b02:	4661      	mov	r1, ip
    7b04:	2402      	movs	r4, #2
    7b06:	4311      	orrs	r1, r2
    7b08:	d1e6      	bne.n	7ad8 <__ledf2+0x50>
    7b0a:	e7d7      	b.n	7abc <__ledf2+0x34>
    7b0c:	4661      	mov	r1, ip
    7b0e:	430a      	orrs	r2, r1
    7b10:	d1db      	bne.n	7aca <__ledf2+0x42>
    7b12:	2400      	movs	r4, #0
    7b14:	2800      	cmp	r0, #0
    7b16:	d0df      	beq.n	7ad8 <__ledf2+0x50>
    7b18:	e7e9      	b.n	7aee <__ledf2+0x66>
    7b1a:	4661      	mov	r1, ip
    7b1c:	430a      	orrs	r2, r1
    7b1e:	d1e4      	bne.n	7aea <__ledf2+0x62>
    7b20:	e7e5      	b.n	7aee <__ledf2+0x66>
    7b22:	42b5      	cmp	r5, r6
    7b24:	dd03      	ble.n	7b2e <__ledf2+0xa6>
    7b26:	2201      	movs	r2, #1
    7b28:	425c      	negs	r4, r3
    7b2a:	4314      	orrs	r4, r2
    7b2c:	e7d4      	b.n	7ad8 <__ledf2+0x50>
    7b2e:	42b5      	cmp	r5, r6
    7b30:	dbcd      	blt.n	7ace <__ledf2+0x46>
    7b32:	4567      	cmp	r7, ip
    7b34:	d8db      	bhi.n	7aee <__ledf2+0x66>
    7b36:	d009      	beq.n	7b4c <__ledf2+0xc4>
    7b38:	2400      	movs	r4, #0
    7b3a:	4567      	cmp	r7, ip
    7b3c:	d2cc      	bcs.n	7ad8 <__ledf2+0x50>
    7b3e:	4659      	mov	r1, fp
    7b40:	424c      	negs	r4, r1
    7b42:	4161      	adcs	r1, r4
    7b44:	2401      	movs	r4, #1
    7b46:	4249      	negs	r1, r1
    7b48:	430c      	orrs	r4, r1
    7b4a:	e7c5      	b.n	7ad8 <__ledf2+0x50>
    7b4c:	45c8      	cmp	r8, r9
    7b4e:	d8ce      	bhi.n	7aee <__ledf2+0x66>
    7b50:	2400      	movs	r4, #0
    7b52:	45c8      	cmp	r8, r9
    7b54:	d3f3      	bcc.n	7b3e <__ledf2+0xb6>
    7b56:	e7bf      	b.n	7ad8 <__ledf2+0x50>
    7b58:	000007ff 	.word	0x000007ff

00007b5c <__aeabi_dmul>:
    7b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b5e:	465f      	mov	r7, fp
    7b60:	4656      	mov	r6, sl
    7b62:	464d      	mov	r5, r9
    7b64:	4644      	mov	r4, r8
    7b66:	b4f0      	push	{r4, r5, r6, r7}
    7b68:	030d      	lsls	r5, r1, #12
    7b6a:	4699      	mov	r9, r3
    7b6c:	004e      	lsls	r6, r1, #1
    7b6e:	0b2b      	lsrs	r3, r5, #12
    7b70:	b087      	sub	sp, #28
    7b72:	0007      	movs	r7, r0
    7b74:	4692      	mov	sl, r2
    7b76:	4680      	mov	r8, r0
    7b78:	469b      	mov	fp, r3
    7b7a:	0d76      	lsrs	r6, r6, #21
    7b7c:	0fcc      	lsrs	r4, r1, #31
    7b7e:	2e00      	cmp	r6, #0
    7b80:	d069      	beq.n	7c56 <__aeabi_dmul+0xfa>
    7b82:	4b6d      	ldr	r3, [pc, #436]	; (7d38 <__aeabi_dmul+0x1dc>)
    7b84:	429e      	cmp	r6, r3
    7b86:	d035      	beq.n	7bf4 <__aeabi_dmul+0x98>
    7b88:	465b      	mov	r3, fp
    7b8a:	2280      	movs	r2, #128	; 0x80
    7b8c:	00dd      	lsls	r5, r3, #3
    7b8e:	0412      	lsls	r2, r2, #16
    7b90:	0f43      	lsrs	r3, r0, #29
    7b92:	4313      	orrs	r3, r2
    7b94:	432b      	orrs	r3, r5
    7b96:	469b      	mov	fp, r3
    7b98:	00c3      	lsls	r3, r0, #3
    7b9a:	4698      	mov	r8, r3
    7b9c:	4b67      	ldr	r3, [pc, #412]	; (7d3c <__aeabi_dmul+0x1e0>)
    7b9e:	2700      	movs	r7, #0
    7ba0:	469c      	mov	ip, r3
    7ba2:	2300      	movs	r3, #0
    7ba4:	4466      	add	r6, ip
    7ba6:	9301      	str	r3, [sp, #4]
    7ba8:	464a      	mov	r2, r9
    7baa:	0315      	lsls	r5, r2, #12
    7bac:	0050      	lsls	r0, r2, #1
    7bae:	0fd2      	lsrs	r2, r2, #31
    7bb0:	4653      	mov	r3, sl
    7bb2:	0b2d      	lsrs	r5, r5, #12
    7bb4:	0d40      	lsrs	r0, r0, #21
    7bb6:	4691      	mov	r9, r2
    7bb8:	d100      	bne.n	7bbc <__aeabi_dmul+0x60>
    7bba:	e076      	b.n	7caa <__aeabi_dmul+0x14e>
    7bbc:	4a5e      	ldr	r2, [pc, #376]	; (7d38 <__aeabi_dmul+0x1dc>)
    7bbe:	4290      	cmp	r0, r2
    7bc0:	d06c      	beq.n	7c9c <__aeabi_dmul+0x140>
    7bc2:	2280      	movs	r2, #128	; 0x80
    7bc4:	0f5b      	lsrs	r3, r3, #29
    7bc6:	0412      	lsls	r2, r2, #16
    7bc8:	4313      	orrs	r3, r2
    7bca:	4a5c      	ldr	r2, [pc, #368]	; (7d3c <__aeabi_dmul+0x1e0>)
    7bcc:	00ed      	lsls	r5, r5, #3
    7bce:	4694      	mov	ip, r2
    7bd0:	431d      	orrs	r5, r3
    7bd2:	4653      	mov	r3, sl
    7bd4:	2200      	movs	r2, #0
    7bd6:	00db      	lsls	r3, r3, #3
    7bd8:	4460      	add	r0, ip
    7bda:	4649      	mov	r1, r9
    7bdc:	1836      	adds	r6, r6, r0
    7bde:	1c70      	adds	r0, r6, #1
    7be0:	4061      	eors	r1, r4
    7be2:	9002      	str	r0, [sp, #8]
    7be4:	4317      	orrs	r7, r2
    7be6:	2f0f      	cmp	r7, #15
    7be8:	d900      	bls.n	7bec <__aeabi_dmul+0x90>
    7bea:	e0af      	b.n	7d4c <__aeabi_dmul+0x1f0>
    7bec:	4854      	ldr	r0, [pc, #336]	; (7d40 <__aeabi_dmul+0x1e4>)
    7bee:	00bf      	lsls	r7, r7, #2
    7bf0:	59c7      	ldr	r7, [r0, r7]
    7bf2:	46bf      	mov	pc, r7
    7bf4:	465b      	mov	r3, fp
    7bf6:	431f      	orrs	r7, r3
    7bf8:	d000      	beq.n	7bfc <__aeabi_dmul+0xa0>
    7bfa:	e088      	b.n	7d0e <__aeabi_dmul+0x1b2>
    7bfc:	2300      	movs	r3, #0
    7bfe:	469b      	mov	fp, r3
    7c00:	4698      	mov	r8, r3
    7c02:	3302      	adds	r3, #2
    7c04:	2708      	movs	r7, #8
    7c06:	9301      	str	r3, [sp, #4]
    7c08:	e7ce      	b.n	7ba8 <__aeabi_dmul+0x4c>
    7c0a:	4649      	mov	r1, r9
    7c0c:	2a02      	cmp	r2, #2
    7c0e:	d06a      	beq.n	7ce6 <__aeabi_dmul+0x18a>
    7c10:	2a03      	cmp	r2, #3
    7c12:	d100      	bne.n	7c16 <__aeabi_dmul+0xba>
    7c14:	e209      	b.n	802a <__aeabi_dmul+0x4ce>
    7c16:	2a01      	cmp	r2, #1
    7c18:	d000      	beq.n	7c1c <__aeabi_dmul+0xc0>
    7c1a:	e1bb      	b.n	7f94 <__aeabi_dmul+0x438>
    7c1c:	4011      	ands	r1, r2
    7c1e:	2200      	movs	r2, #0
    7c20:	2300      	movs	r3, #0
    7c22:	2500      	movs	r5, #0
    7c24:	4690      	mov	r8, r2
    7c26:	b2cc      	uxtb	r4, r1
    7c28:	2100      	movs	r1, #0
    7c2a:	032d      	lsls	r5, r5, #12
    7c2c:	0d0a      	lsrs	r2, r1, #20
    7c2e:	0512      	lsls	r2, r2, #20
    7c30:	0b2d      	lsrs	r5, r5, #12
    7c32:	4315      	orrs	r5, r2
    7c34:	4a43      	ldr	r2, [pc, #268]	; (7d44 <__aeabi_dmul+0x1e8>)
    7c36:	051b      	lsls	r3, r3, #20
    7c38:	4015      	ands	r5, r2
    7c3a:	431d      	orrs	r5, r3
    7c3c:	006d      	lsls	r5, r5, #1
    7c3e:	07e4      	lsls	r4, r4, #31
    7c40:	086d      	lsrs	r5, r5, #1
    7c42:	4325      	orrs	r5, r4
    7c44:	4640      	mov	r0, r8
    7c46:	0029      	movs	r1, r5
    7c48:	b007      	add	sp, #28
    7c4a:	bc3c      	pop	{r2, r3, r4, r5}
    7c4c:	4690      	mov	r8, r2
    7c4e:	4699      	mov	r9, r3
    7c50:	46a2      	mov	sl, r4
    7c52:	46ab      	mov	fp, r5
    7c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c56:	4303      	orrs	r3, r0
    7c58:	d052      	beq.n	7d00 <__aeabi_dmul+0x1a4>
    7c5a:	465b      	mov	r3, fp
    7c5c:	2b00      	cmp	r3, #0
    7c5e:	d100      	bne.n	7c62 <__aeabi_dmul+0x106>
    7c60:	e18a      	b.n	7f78 <__aeabi_dmul+0x41c>
    7c62:	4658      	mov	r0, fp
    7c64:	f000 fef8 	bl	8a58 <__clzsi2>
    7c68:	0003      	movs	r3, r0
    7c6a:	3b0b      	subs	r3, #11
    7c6c:	2b1c      	cmp	r3, #28
    7c6e:	dd00      	ble.n	7c72 <__aeabi_dmul+0x116>
    7c70:	e17b      	b.n	7f6a <__aeabi_dmul+0x40e>
    7c72:	221d      	movs	r2, #29
    7c74:	1ad3      	subs	r3, r2, r3
    7c76:	003a      	movs	r2, r7
    7c78:	0001      	movs	r1, r0
    7c7a:	465d      	mov	r5, fp
    7c7c:	40da      	lsrs	r2, r3
    7c7e:	3908      	subs	r1, #8
    7c80:	408d      	lsls	r5, r1
    7c82:	0013      	movs	r3, r2
    7c84:	408f      	lsls	r7, r1
    7c86:	432b      	orrs	r3, r5
    7c88:	469b      	mov	fp, r3
    7c8a:	46b8      	mov	r8, r7
    7c8c:	4b2e      	ldr	r3, [pc, #184]	; (7d48 <__aeabi_dmul+0x1ec>)
    7c8e:	2700      	movs	r7, #0
    7c90:	469c      	mov	ip, r3
    7c92:	2300      	movs	r3, #0
    7c94:	4460      	add	r0, ip
    7c96:	4246      	negs	r6, r0
    7c98:	9301      	str	r3, [sp, #4]
    7c9a:	e785      	b.n	7ba8 <__aeabi_dmul+0x4c>
    7c9c:	4652      	mov	r2, sl
    7c9e:	432a      	orrs	r2, r5
    7ca0:	d12c      	bne.n	7cfc <__aeabi_dmul+0x1a0>
    7ca2:	2500      	movs	r5, #0
    7ca4:	2300      	movs	r3, #0
    7ca6:	2202      	movs	r2, #2
    7ca8:	e797      	b.n	7bda <__aeabi_dmul+0x7e>
    7caa:	4652      	mov	r2, sl
    7cac:	432a      	orrs	r2, r5
    7cae:	d021      	beq.n	7cf4 <__aeabi_dmul+0x198>
    7cb0:	2d00      	cmp	r5, #0
    7cb2:	d100      	bne.n	7cb6 <__aeabi_dmul+0x15a>
    7cb4:	e154      	b.n	7f60 <__aeabi_dmul+0x404>
    7cb6:	0028      	movs	r0, r5
    7cb8:	f000 fece 	bl	8a58 <__clzsi2>
    7cbc:	0003      	movs	r3, r0
    7cbe:	3b0b      	subs	r3, #11
    7cc0:	2b1c      	cmp	r3, #28
    7cc2:	dd00      	ble.n	7cc6 <__aeabi_dmul+0x16a>
    7cc4:	e146      	b.n	7f54 <__aeabi_dmul+0x3f8>
    7cc6:	211d      	movs	r1, #29
    7cc8:	1acb      	subs	r3, r1, r3
    7cca:	4651      	mov	r1, sl
    7ccc:	0002      	movs	r2, r0
    7cce:	40d9      	lsrs	r1, r3
    7cd0:	4653      	mov	r3, sl
    7cd2:	3a08      	subs	r2, #8
    7cd4:	4095      	lsls	r5, r2
    7cd6:	4093      	lsls	r3, r2
    7cd8:	430d      	orrs	r5, r1
    7cda:	4a1b      	ldr	r2, [pc, #108]	; (7d48 <__aeabi_dmul+0x1ec>)
    7cdc:	4694      	mov	ip, r2
    7cde:	4460      	add	r0, ip
    7ce0:	4240      	negs	r0, r0
    7ce2:	2200      	movs	r2, #0
    7ce4:	e779      	b.n	7bda <__aeabi_dmul+0x7e>
    7ce6:	2401      	movs	r4, #1
    7ce8:	2200      	movs	r2, #0
    7cea:	400c      	ands	r4, r1
    7cec:	4b12      	ldr	r3, [pc, #72]	; (7d38 <__aeabi_dmul+0x1dc>)
    7cee:	2500      	movs	r5, #0
    7cf0:	4690      	mov	r8, r2
    7cf2:	e799      	b.n	7c28 <__aeabi_dmul+0xcc>
    7cf4:	2500      	movs	r5, #0
    7cf6:	2300      	movs	r3, #0
    7cf8:	2201      	movs	r2, #1
    7cfa:	e76e      	b.n	7bda <__aeabi_dmul+0x7e>
    7cfc:	2203      	movs	r2, #3
    7cfe:	e76c      	b.n	7bda <__aeabi_dmul+0x7e>
    7d00:	2300      	movs	r3, #0
    7d02:	469b      	mov	fp, r3
    7d04:	4698      	mov	r8, r3
    7d06:	3301      	adds	r3, #1
    7d08:	2704      	movs	r7, #4
    7d0a:	9301      	str	r3, [sp, #4]
    7d0c:	e74c      	b.n	7ba8 <__aeabi_dmul+0x4c>
    7d0e:	2303      	movs	r3, #3
    7d10:	270c      	movs	r7, #12
    7d12:	9301      	str	r3, [sp, #4]
    7d14:	e748      	b.n	7ba8 <__aeabi_dmul+0x4c>
    7d16:	2300      	movs	r3, #0
    7d18:	2580      	movs	r5, #128	; 0x80
    7d1a:	4698      	mov	r8, r3
    7d1c:	2400      	movs	r4, #0
    7d1e:	032d      	lsls	r5, r5, #12
    7d20:	4b05      	ldr	r3, [pc, #20]	; (7d38 <__aeabi_dmul+0x1dc>)
    7d22:	e781      	b.n	7c28 <__aeabi_dmul+0xcc>
    7d24:	465d      	mov	r5, fp
    7d26:	4643      	mov	r3, r8
    7d28:	9a01      	ldr	r2, [sp, #4]
    7d2a:	e76f      	b.n	7c0c <__aeabi_dmul+0xb0>
    7d2c:	465d      	mov	r5, fp
    7d2e:	4643      	mov	r3, r8
    7d30:	0021      	movs	r1, r4
    7d32:	9a01      	ldr	r2, [sp, #4]
    7d34:	e76a      	b.n	7c0c <__aeabi_dmul+0xb0>
    7d36:	46c0      	nop			; (mov r8, r8)
    7d38:	000007ff 	.word	0x000007ff
    7d3c:	fffffc01 	.word	0xfffffc01
    7d40:	00008eb8 	.word	0x00008eb8
    7d44:	800fffff 	.word	0x800fffff
    7d48:	000003f3 	.word	0x000003f3
    7d4c:	4642      	mov	r2, r8
    7d4e:	0c12      	lsrs	r2, r2, #16
    7d50:	4691      	mov	r9, r2
    7d52:	0c1a      	lsrs	r2, r3, #16
    7d54:	4694      	mov	ip, r2
    7d56:	4642      	mov	r2, r8
    7d58:	0417      	lsls	r7, r2, #16
    7d5a:	464a      	mov	r2, r9
    7d5c:	041b      	lsls	r3, r3, #16
    7d5e:	0c1b      	lsrs	r3, r3, #16
    7d60:	435a      	muls	r2, r3
    7d62:	4660      	mov	r0, ip
    7d64:	4690      	mov	r8, r2
    7d66:	464a      	mov	r2, r9
    7d68:	4342      	muls	r2, r0
    7d6a:	0010      	movs	r0, r2
    7d6c:	9203      	str	r2, [sp, #12]
    7d6e:	4662      	mov	r2, ip
    7d70:	001c      	movs	r4, r3
    7d72:	0c3f      	lsrs	r7, r7, #16
    7d74:	437a      	muls	r2, r7
    7d76:	437c      	muls	r4, r7
    7d78:	4442      	add	r2, r8
    7d7a:	9201      	str	r2, [sp, #4]
    7d7c:	0c22      	lsrs	r2, r4, #16
    7d7e:	4692      	mov	sl, r2
    7d80:	9a01      	ldr	r2, [sp, #4]
    7d82:	4452      	add	r2, sl
    7d84:	4590      	cmp	r8, r2
    7d86:	d906      	bls.n	7d96 <__aeabi_dmul+0x23a>
    7d88:	4682      	mov	sl, r0
    7d8a:	2080      	movs	r0, #128	; 0x80
    7d8c:	0240      	lsls	r0, r0, #9
    7d8e:	4680      	mov	r8, r0
    7d90:	44c2      	add	sl, r8
    7d92:	4650      	mov	r0, sl
    7d94:	9003      	str	r0, [sp, #12]
    7d96:	0c10      	lsrs	r0, r2, #16
    7d98:	9004      	str	r0, [sp, #16]
    7d9a:	4648      	mov	r0, r9
    7d9c:	0424      	lsls	r4, r4, #16
    7d9e:	0c24      	lsrs	r4, r4, #16
    7da0:	0412      	lsls	r2, r2, #16
    7da2:	1912      	adds	r2, r2, r4
    7da4:	9205      	str	r2, [sp, #20]
    7da6:	0c2a      	lsrs	r2, r5, #16
    7da8:	042d      	lsls	r5, r5, #16
    7daa:	0c2d      	lsrs	r5, r5, #16
    7dac:	4368      	muls	r0, r5
    7dae:	002c      	movs	r4, r5
    7db0:	4682      	mov	sl, r0
    7db2:	4648      	mov	r0, r9
    7db4:	437c      	muls	r4, r7
    7db6:	4350      	muls	r0, r2
    7db8:	4681      	mov	r9, r0
    7dba:	0c20      	lsrs	r0, r4, #16
    7dbc:	4680      	mov	r8, r0
    7dbe:	4357      	muls	r7, r2
    7dc0:	4457      	add	r7, sl
    7dc2:	4447      	add	r7, r8
    7dc4:	45ba      	cmp	sl, r7
    7dc6:	d903      	bls.n	7dd0 <__aeabi_dmul+0x274>
    7dc8:	2080      	movs	r0, #128	; 0x80
    7dca:	0240      	lsls	r0, r0, #9
    7dcc:	4680      	mov	r8, r0
    7dce:	44c1      	add	r9, r8
    7dd0:	0c38      	lsrs	r0, r7, #16
    7dd2:	043f      	lsls	r7, r7, #16
    7dd4:	46b8      	mov	r8, r7
    7dd6:	4448      	add	r0, r9
    7dd8:	0424      	lsls	r4, r4, #16
    7dda:	0c24      	lsrs	r4, r4, #16
    7ddc:	9001      	str	r0, [sp, #4]
    7dde:	9804      	ldr	r0, [sp, #16]
    7de0:	44a0      	add	r8, r4
    7de2:	4440      	add	r0, r8
    7de4:	9004      	str	r0, [sp, #16]
    7de6:	4658      	mov	r0, fp
    7de8:	0c00      	lsrs	r0, r0, #16
    7dea:	4681      	mov	r9, r0
    7dec:	4658      	mov	r0, fp
    7dee:	0404      	lsls	r4, r0, #16
    7df0:	0c20      	lsrs	r0, r4, #16
    7df2:	4682      	mov	sl, r0
    7df4:	0007      	movs	r7, r0
    7df6:	4648      	mov	r0, r9
    7df8:	435f      	muls	r7, r3
    7dfa:	464c      	mov	r4, r9
    7dfc:	4343      	muls	r3, r0
    7dfe:	4660      	mov	r0, ip
    7e00:	4360      	muls	r0, r4
    7e02:	4664      	mov	r4, ip
    7e04:	4683      	mov	fp, r0
    7e06:	4650      	mov	r0, sl
    7e08:	4344      	muls	r4, r0
    7e0a:	0c38      	lsrs	r0, r7, #16
    7e0c:	4684      	mov	ip, r0
    7e0e:	18e4      	adds	r4, r4, r3
    7e10:	4464      	add	r4, ip
    7e12:	42a3      	cmp	r3, r4
    7e14:	d903      	bls.n	7e1e <__aeabi_dmul+0x2c2>
    7e16:	2380      	movs	r3, #128	; 0x80
    7e18:	025b      	lsls	r3, r3, #9
    7e1a:	469c      	mov	ip, r3
    7e1c:	44e3      	add	fp, ip
    7e1e:	4648      	mov	r0, r9
    7e20:	043f      	lsls	r7, r7, #16
    7e22:	0c23      	lsrs	r3, r4, #16
    7e24:	0c3f      	lsrs	r7, r7, #16
    7e26:	0424      	lsls	r4, r4, #16
    7e28:	19e4      	adds	r4, r4, r7
    7e2a:	4657      	mov	r7, sl
    7e2c:	4368      	muls	r0, r5
    7e2e:	436f      	muls	r7, r5
    7e30:	4684      	mov	ip, r0
    7e32:	464d      	mov	r5, r9
    7e34:	4650      	mov	r0, sl
    7e36:	4355      	muls	r5, r2
    7e38:	4342      	muls	r2, r0
    7e3a:	0c38      	lsrs	r0, r7, #16
    7e3c:	4681      	mov	r9, r0
    7e3e:	4462      	add	r2, ip
    7e40:	444a      	add	r2, r9
    7e42:	445b      	add	r3, fp
    7e44:	4594      	cmp	ip, r2
    7e46:	d903      	bls.n	7e50 <__aeabi_dmul+0x2f4>
    7e48:	2080      	movs	r0, #128	; 0x80
    7e4a:	0240      	lsls	r0, r0, #9
    7e4c:	4684      	mov	ip, r0
    7e4e:	4465      	add	r5, ip
    7e50:	9803      	ldr	r0, [sp, #12]
    7e52:	043f      	lsls	r7, r7, #16
    7e54:	4683      	mov	fp, r0
    7e56:	9804      	ldr	r0, [sp, #16]
    7e58:	0c3f      	lsrs	r7, r7, #16
    7e5a:	4684      	mov	ip, r0
    7e5c:	44e3      	add	fp, ip
    7e5e:	45c3      	cmp	fp, r8
    7e60:	4180      	sbcs	r0, r0
    7e62:	4240      	negs	r0, r0
    7e64:	4682      	mov	sl, r0
    7e66:	0410      	lsls	r0, r2, #16
    7e68:	4684      	mov	ip, r0
    7e6a:	9801      	ldr	r0, [sp, #4]
    7e6c:	4467      	add	r7, ip
    7e6e:	4684      	mov	ip, r0
    7e70:	4467      	add	r7, ip
    7e72:	44a3      	add	fp, r4
    7e74:	46bc      	mov	ip, r7
    7e76:	45a3      	cmp	fp, r4
    7e78:	41a4      	sbcs	r4, r4
    7e7a:	4699      	mov	r9, r3
    7e7c:	44d4      	add	ip, sl
    7e7e:	4264      	negs	r4, r4
    7e80:	4287      	cmp	r7, r0
    7e82:	41bf      	sbcs	r7, r7
    7e84:	45d4      	cmp	ip, sl
    7e86:	4180      	sbcs	r0, r0
    7e88:	44e1      	add	r9, ip
    7e8a:	46a0      	mov	r8, r4
    7e8c:	4599      	cmp	r9, r3
    7e8e:	419b      	sbcs	r3, r3
    7e90:	427f      	negs	r7, r7
    7e92:	4240      	negs	r0, r0
    7e94:	44c8      	add	r8, r9
    7e96:	4307      	orrs	r7, r0
    7e98:	0c12      	lsrs	r2, r2, #16
    7e9a:	18ba      	adds	r2, r7, r2
    7e9c:	45a0      	cmp	r8, r4
    7e9e:	41a4      	sbcs	r4, r4
    7ea0:	425f      	negs	r7, r3
    7ea2:	003b      	movs	r3, r7
    7ea4:	4264      	negs	r4, r4
    7ea6:	4323      	orrs	r3, r4
    7ea8:	18d7      	adds	r7, r2, r3
    7eaa:	4643      	mov	r3, r8
    7eac:	197d      	adds	r5, r7, r5
    7eae:	0ddb      	lsrs	r3, r3, #23
    7eb0:	026d      	lsls	r5, r5, #9
    7eb2:	431d      	orrs	r5, r3
    7eb4:	465b      	mov	r3, fp
    7eb6:	025a      	lsls	r2, r3, #9
    7eb8:	9b05      	ldr	r3, [sp, #20]
    7eba:	431a      	orrs	r2, r3
    7ebc:	1e53      	subs	r3, r2, #1
    7ebe:	419a      	sbcs	r2, r3
    7ec0:	465b      	mov	r3, fp
    7ec2:	0ddb      	lsrs	r3, r3, #23
    7ec4:	431a      	orrs	r2, r3
    7ec6:	4643      	mov	r3, r8
    7ec8:	025b      	lsls	r3, r3, #9
    7eca:	4313      	orrs	r3, r2
    7ecc:	01ea      	lsls	r2, r5, #7
    7ece:	d507      	bpl.n	7ee0 <__aeabi_dmul+0x384>
    7ed0:	2201      	movs	r2, #1
    7ed2:	085c      	lsrs	r4, r3, #1
    7ed4:	4013      	ands	r3, r2
    7ed6:	4323      	orrs	r3, r4
    7ed8:	07ea      	lsls	r2, r5, #31
    7eda:	9e02      	ldr	r6, [sp, #8]
    7edc:	4313      	orrs	r3, r2
    7ede:	086d      	lsrs	r5, r5, #1
    7ee0:	4a57      	ldr	r2, [pc, #348]	; (8040 <__aeabi_dmul+0x4e4>)
    7ee2:	18b2      	adds	r2, r6, r2
    7ee4:	2a00      	cmp	r2, #0
    7ee6:	dd4b      	ble.n	7f80 <__aeabi_dmul+0x424>
    7ee8:	0758      	lsls	r0, r3, #29
    7eea:	d009      	beq.n	7f00 <__aeabi_dmul+0x3a4>
    7eec:	200f      	movs	r0, #15
    7eee:	4018      	ands	r0, r3
    7ef0:	2804      	cmp	r0, #4
    7ef2:	d005      	beq.n	7f00 <__aeabi_dmul+0x3a4>
    7ef4:	1d18      	adds	r0, r3, #4
    7ef6:	4298      	cmp	r0, r3
    7ef8:	419b      	sbcs	r3, r3
    7efa:	425b      	negs	r3, r3
    7efc:	18ed      	adds	r5, r5, r3
    7efe:	0003      	movs	r3, r0
    7f00:	01e8      	lsls	r0, r5, #7
    7f02:	d504      	bpl.n	7f0e <__aeabi_dmul+0x3b2>
    7f04:	4a4f      	ldr	r2, [pc, #316]	; (8044 <__aeabi_dmul+0x4e8>)
    7f06:	4015      	ands	r5, r2
    7f08:	2280      	movs	r2, #128	; 0x80
    7f0a:	00d2      	lsls	r2, r2, #3
    7f0c:	18b2      	adds	r2, r6, r2
    7f0e:	484e      	ldr	r0, [pc, #312]	; (8048 <__aeabi_dmul+0x4ec>)
    7f10:	4282      	cmp	r2, r0
    7f12:	dd00      	ble.n	7f16 <__aeabi_dmul+0x3ba>
    7f14:	e6e7      	b.n	7ce6 <__aeabi_dmul+0x18a>
    7f16:	2401      	movs	r4, #1
    7f18:	08db      	lsrs	r3, r3, #3
    7f1a:	0768      	lsls	r0, r5, #29
    7f1c:	4318      	orrs	r0, r3
    7f1e:	026d      	lsls	r5, r5, #9
    7f20:	0553      	lsls	r3, r2, #21
    7f22:	4680      	mov	r8, r0
    7f24:	0b2d      	lsrs	r5, r5, #12
    7f26:	0d5b      	lsrs	r3, r3, #21
    7f28:	400c      	ands	r4, r1
    7f2a:	e67d      	b.n	7c28 <__aeabi_dmul+0xcc>
    7f2c:	2280      	movs	r2, #128	; 0x80
    7f2e:	4659      	mov	r1, fp
    7f30:	0312      	lsls	r2, r2, #12
    7f32:	4211      	tst	r1, r2
    7f34:	d008      	beq.n	7f48 <__aeabi_dmul+0x3ec>
    7f36:	4215      	tst	r5, r2
    7f38:	d106      	bne.n	7f48 <__aeabi_dmul+0x3ec>
    7f3a:	4315      	orrs	r5, r2
    7f3c:	032d      	lsls	r5, r5, #12
    7f3e:	4698      	mov	r8, r3
    7f40:	0b2d      	lsrs	r5, r5, #12
    7f42:	464c      	mov	r4, r9
    7f44:	4b41      	ldr	r3, [pc, #260]	; (804c <__aeabi_dmul+0x4f0>)
    7f46:	e66f      	b.n	7c28 <__aeabi_dmul+0xcc>
    7f48:	465d      	mov	r5, fp
    7f4a:	4315      	orrs	r5, r2
    7f4c:	032d      	lsls	r5, r5, #12
    7f4e:	0b2d      	lsrs	r5, r5, #12
    7f50:	4b3e      	ldr	r3, [pc, #248]	; (804c <__aeabi_dmul+0x4f0>)
    7f52:	e669      	b.n	7c28 <__aeabi_dmul+0xcc>
    7f54:	0003      	movs	r3, r0
    7f56:	4655      	mov	r5, sl
    7f58:	3b28      	subs	r3, #40	; 0x28
    7f5a:	409d      	lsls	r5, r3
    7f5c:	2300      	movs	r3, #0
    7f5e:	e6bc      	b.n	7cda <__aeabi_dmul+0x17e>
    7f60:	4650      	mov	r0, sl
    7f62:	f000 fd79 	bl	8a58 <__clzsi2>
    7f66:	3020      	adds	r0, #32
    7f68:	e6a8      	b.n	7cbc <__aeabi_dmul+0x160>
    7f6a:	0003      	movs	r3, r0
    7f6c:	3b28      	subs	r3, #40	; 0x28
    7f6e:	409f      	lsls	r7, r3
    7f70:	2300      	movs	r3, #0
    7f72:	46bb      	mov	fp, r7
    7f74:	4698      	mov	r8, r3
    7f76:	e689      	b.n	7c8c <__aeabi_dmul+0x130>
    7f78:	f000 fd6e 	bl	8a58 <__clzsi2>
    7f7c:	3020      	adds	r0, #32
    7f7e:	e673      	b.n	7c68 <__aeabi_dmul+0x10c>
    7f80:	2401      	movs	r4, #1
    7f82:	1aa6      	subs	r6, r4, r2
    7f84:	2e38      	cmp	r6, #56	; 0x38
    7f86:	dd07      	ble.n	7f98 <__aeabi_dmul+0x43c>
    7f88:	2200      	movs	r2, #0
    7f8a:	400c      	ands	r4, r1
    7f8c:	2300      	movs	r3, #0
    7f8e:	2500      	movs	r5, #0
    7f90:	4690      	mov	r8, r2
    7f92:	e649      	b.n	7c28 <__aeabi_dmul+0xcc>
    7f94:	9e02      	ldr	r6, [sp, #8]
    7f96:	e7a3      	b.n	7ee0 <__aeabi_dmul+0x384>
    7f98:	2e1f      	cmp	r6, #31
    7f9a:	dc20      	bgt.n	7fde <__aeabi_dmul+0x482>
    7f9c:	2220      	movs	r2, #32
    7f9e:	002c      	movs	r4, r5
    7fa0:	0018      	movs	r0, r3
    7fa2:	1b92      	subs	r2, r2, r6
    7fa4:	40f0      	lsrs	r0, r6
    7fa6:	4094      	lsls	r4, r2
    7fa8:	4093      	lsls	r3, r2
    7faa:	4304      	orrs	r4, r0
    7fac:	1e58      	subs	r0, r3, #1
    7fae:	4183      	sbcs	r3, r0
    7fb0:	431c      	orrs	r4, r3
    7fb2:	40f5      	lsrs	r5, r6
    7fb4:	0763      	lsls	r3, r4, #29
    7fb6:	d009      	beq.n	7fcc <__aeabi_dmul+0x470>
    7fb8:	230f      	movs	r3, #15
    7fba:	4023      	ands	r3, r4
    7fbc:	2b04      	cmp	r3, #4
    7fbe:	d005      	beq.n	7fcc <__aeabi_dmul+0x470>
    7fc0:	0023      	movs	r3, r4
    7fc2:	1d1c      	adds	r4, r3, #4
    7fc4:	429c      	cmp	r4, r3
    7fc6:	4192      	sbcs	r2, r2
    7fc8:	4252      	negs	r2, r2
    7fca:	18ad      	adds	r5, r5, r2
    7fcc:	022b      	lsls	r3, r5, #8
    7fce:	d51f      	bpl.n	8010 <__aeabi_dmul+0x4b4>
    7fd0:	2401      	movs	r4, #1
    7fd2:	2200      	movs	r2, #0
    7fd4:	400c      	ands	r4, r1
    7fd6:	2301      	movs	r3, #1
    7fd8:	2500      	movs	r5, #0
    7fda:	4690      	mov	r8, r2
    7fdc:	e624      	b.n	7c28 <__aeabi_dmul+0xcc>
    7fde:	201f      	movs	r0, #31
    7fe0:	002c      	movs	r4, r5
    7fe2:	4240      	negs	r0, r0
    7fe4:	1a82      	subs	r2, r0, r2
    7fe6:	40d4      	lsrs	r4, r2
    7fe8:	2e20      	cmp	r6, #32
    7fea:	d01c      	beq.n	8026 <__aeabi_dmul+0x4ca>
    7fec:	2240      	movs	r2, #64	; 0x40
    7fee:	1b96      	subs	r6, r2, r6
    7ff0:	40b5      	lsls	r5, r6
    7ff2:	432b      	orrs	r3, r5
    7ff4:	1e58      	subs	r0, r3, #1
    7ff6:	4183      	sbcs	r3, r0
    7ff8:	2007      	movs	r0, #7
    7ffa:	4323      	orrs	r3, r4
    7ffc:	4018      	ands	r0, r3
    7ffe:	2500      	movs	r5, #0
    8000:	2800      	cmp	r0, #0
    8002:	d009      	beq.n	8018 <__aeabi_dmul+0x4bc>
    8004:	220f      	movs	r2, #15
    8006:	2500      	movs	r5, #0
    8008:	401a      	ands	r2, r3
    800a:	001c      	movs	r4, r3
    800c:	2a04      	cmp	r2, #4
    800e:	d1d8      	bne.n	7fc2 <__aeabi_dmul+0x466>
    8010:	0023      	movs	r3, r4
    8012:	0768      	lsls	r0, r5, #29
    8014:	026d      	lsls	r5, r5, #9
    8016:	0b2d      	lsrs	r5, r5, #12
    8018:	2401      	movs	r4, #1
    801a:	08db      	lsrs	r3, r3, #3
    801c:	4303      	orrs	r3, r0
    801e:	4698      	mov	r8, r3
    8020:	400c      	ands	r4, r1
    8022:	2300      	movs	r3, #0
    8024:	e600      	b.n	7c28 <__aeabi_dmul+0xcc>
    8026:	2500      	movs	r5, #0
    8028:	e7e3      	b.n	7ff2 <__aeabi_dmul+0x496>
    802a:	2280      	movs	r2, #128	; 0x80
    802c:	2401      	movs	r4, #1
    802e:	0312      	lsls	r2, r2, #12
    8030:	4315      	orrs	r5, r2
    8032:	032d      	lsls	r5, r5, #12
    8034:	4698      	mov	r8, r3
    8036:	0b2d      	lsrs	r5, r5, #12
    8038:	400c      	ands	r4, r1
    803a:	4b04      	ldr	r3, [pc, #16]	; (804c <__aeabi_dmul+0x4f0>)
    803c:	e5f4      	b.n	7c28 <__aeabi_dmul+0xcc>
    803e:	46c0      	nop			; (mov r8, r8)
    8040:	000003ff 	.word	0x000003ff
    8044:	feffffff 	.word	0xfeffffff
    8048:	000007fe 	.word	0x000007fe
    804c:	000007ff 	.word	0x000007ff

00008050 <__aeabi_dsub>:
    8050:	b5f0      	push	{r4, r5, r6, r7, lr}
    8052:	4657      	mov	r7, sl
    8054:	464e      	mov	r6, r9
    8056:	4645      	mov	r5, r8
    8058:	b4e0      	push	{r5, r6, r7}
    805a:	000e      	movs	r6, r1
    805c:	0011      	movs	r1, r2
    805e:	0ff2      	lsrs	r2, r6, #31
    8060:	4692      	mov	sl, r2
    8062:	00c5      	lsls	r5, r0, #3
    8064:	0f42      	lsrs	r2, r0, #29
    8066:	0318      	lsls	r0, r3, #12
    8068:	0337      	lsls	r7, r6, #12
    806a:	0074      	lsls	r4, r6, #1
    806c:	0a40      	lsrs	r0, r0, #9
    806e:	0f4e      	lsrs	r6, r1, #29
    8070:	0a7f      	lsrs	r7, r7, #9
    8072:	4330      	orrs	r0, r6
    8074:	4ecf      	ldr	r6, [pc, #828]	; (83b4 <__aeabi_dsub+0x364>)
    8076:	4317      	orrs	r7, r2
    8078:	005a      	lsls	r2, r3, #1
    807a:	0d64      	lsrs	r4, r4, #21
    807c:	0d52      	lsrs	r2, r2, #21
    807e:	0fdb      	lsrs	r3, r3, #31
    8080:	00c9      	lsls	r1, r1, #3
    8082:	42b2      	cmp	r2, r6
    8084:	d100      	bne.n	8088 <__aeabi_dsub+0x38>
    8086:	e0e5      	b.n	8254 <__aeabi_dsub+0x204>
    8088:	2601      	movs	r6, #1
    808a:	4073      	eors	r3, r6
    808c:	1aa6      	subs	r6, r4, r2
    808e:	46b4      	mov	ip, r6
    8090:	4553      	cmp	r3, sl
    8092:	d100      	bne.n	8096 <__aeabi_dsub+0x46>
    8094:	e0af      	b.n	81f6 <__aeabi_dsub+0x1a6>
    8096:	2e00      	cmp	r6, #0
    8098:	dc00      	bgt.n	809c <__aeabi_dsub+0x4c>
    809a:	e10d      	b.n	82b8 <__aeabi_dsub+0x268>
    809c:	2a00      	cmp	r2, #0
    809e:	d13a      	bne.n	8116 <__aeabi_dsub+0xc6>
    80a0:	0003      	movs	r3, r0
    80a2:	430b      	orrs	r3, r1
    80a4:	d000      	beq.n	80a8 <__aeabi_dsub+0x58>
    80a6:	e0e4      	b.n	8272 <__aeabi_dsub+0x222>
    80a8:	076b      	lsls	r3, r5, #29
    80aa:	d009      	beq.n	80c0 <__aeabi_dsub+0x70>
    80ac:	230f      	movs	r3, #15
    80ae:	402b      	ands	r3, r5
    80b0:	2b04      	cmp	r3, #4
    80b2:	d005      	beq.n	80c0 <__aeabi_dsub+0x70>
    80b4:	1d2b      	adds	r3, r5, #4
    80b6:	42ab      	cmp	r3, r5
    80b8:	41ad      	sbcs	r5, r5
    80ba:	426d      	negs	r5, r5
    80bc:	197f      	adds	r7, r7, r5
    80be:	001d      	movs	r5, r3
    80c0:	023b      	lsls	r3, r7, #8
    80c2:	d400      	bmi.n	80c6 <__aeabi_dsub+0x76>
    80c4:	e088      	b.n	81d8 <__aeabi_dsub+0x188>
    80c6:	4bbb      	ldr	r3, [pc, #748]	; (83b4 <__aeabi_dsub+0x364>)
    80c8:	3401      	adds	r4, #1
    80ca:	429c      	cmp	r4, r3
    80cc:	d100      	bne.n	80d0 <__aeabi_dsub+0x80>
    80ce:	e110      	b.n	82f2 <__aeabi_dsub+0x2a2>
    80d0:	003a      	movs	r2, r7
    80d2:	4bb9      	ldr	r3, [pc, #740]	; (83b8 <__aeabi_dsub+0x368>)
    80d4:	4651      	mov	r1, sl
    80d6:	401a      	ands	r2, r3
    80d8:	2301      	movs	r3, #1
    80da:	0750      	lsls	r0, r2, #29
    80dc:	08ed      	lsrs	r5, r5, #3
    80de:	0252      	lsls	r2, r2, #9
    80e0:	0564      	lsls	r4, r4, #21
    80e2:	4305      	orrs	r5, r0
    80e4:	0b12      	lsrs	r2, r2, #12
    80e6:	0d64      	lsrs	r4, r4, #21
    80e8:	400b      	ands	r3, r1
    80ea:	2100      	movs	r1, #0
    80ec:	0028      	movs	r0, r5
    80ee:	0312      	lsls	r2, r2, #12
    80f0:	0d0d      	lsrs	r5, r1, #20
    80f2:	0b12      	lsrs	r2, r2, #12
    80f4:	0564      	lsls	r4, r4, #21
    80f6:	052d      	lsls	r5, r5, #20
    80f8:	4315      	orrs	r5, r2
    80fa:	0862      	lsrs	r2, r4, #1
    80fc:	4caf      	ldr	r4, [pc, #700]	; (83bc <__aeabi_dsub+0x36c>)
    80fe:	07db      	lsls	r3, r3, #31
    8100:	402c      	ands	r4, r5
    8102:	4314      	orrs	r4, r2
    8104:	0064      	lsls	r4, r4, #1
    8106:	0864      	lsrs	r4, r4, #1
    8108:	431c      	orrs	r4, r3
    810a:	0021      	movs	r1, r4
    810c:	bc1c      	pop	{r2, r3, r4}
    810e:	4690      	mov	r8, r2
    8110:	4699      	mov	r9, r3
    8112:	46a2      	mov	sl, r4
    8114:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8116:	4ba7      	ldr	r3, [pc, #668]	; (83b4 <__aeabi_dsub+0x364>)
    8118:	429c      	cmp	r4, r3
    811a:	d0c5      	beq.n	80a8 <__aeabi_dsub+0x58>
    811c:	2380      	movs	r3, #128	; 0x80
    811e:	041b      	lsls	r3, r3, #16
    8120:	4318      	orrs	r0, r3
    8122:	4663      	mov	r3, ip
    8124:	2b38      	cmp	r3, #56	; 0x38
    8126:	dd00      	ble.n	812a <__aeabi_dsub+0xda>
    8128:	e0fd      	b.n	8326 <__aeabi_dsub+0x2d6>
    812a:	2b1f      	cmp	r3, #31
    812c:	dd00      	ble.n	8130 <__aeabi_dsub+0xe0>
    812e:	e130      	b.n	8392 <__aeabi_dsub+0x342>
    8130:	4662      	mov	r2, ip
    8132:	2320      	movs	r3, #32
    8134:	1a9b      	subs	r3, r3, r2
    8136:	0002      	movs	r2, r0
    8138:	409a      	lsls	r2, r3
    813a:	4666      	mov	r6, ip
    813c:	4690      	mov	r8, r2
    813e:	000a      	movs	r2, r1
    8140:	4099      	lsls	r1, r3
    8142:	40f2      	lsrs	r2, r6
    8144:	4646      	mov	r6, r8
    8146:	1e4b      	subs	r3, r1, #1
    8148:	4199      	sbcs	r1, r3
    814a:	4332      	orrs	r2, r6
    814c:	4311      	orrs	r1, r2
    814e:	4663      	mov	r3, ip
    8150:	0002      	movs	r2, r0
    8152:	40da      	lsrs	r2, r3
    8154:	1a69      	subs	r1, r5, r1
    8156:	428d      	cmp	r5, r1
    8158:	419b      	sbcs	r3, r3
    815a:	000d      	movs	r5, r1
    815c:	1aba      	subs	r2, r7, r2
    815e:	425b      	negs	r3, r3
    8160:	1ad7      	subs	r7, r2, r3
    8162:	023b      	lsls	r3, r7, #8
    8164:	d535      	bpl.n	81d2 <__aeabi_dsub+0x182>
    8166:	027a      	lsls	r2, r7, #9
    8168:	0a53      	lsrs	r3, r2, #9
    816a:	4698      	mov	r8, r3
    816c:	4643      	mov	r3, r8
    816e:	2b00      	cmp	r3, #0
    8170:	d100      	bne.n	8174 <__aeabi_dsub+0x124>
    8172:	e0c4      	b.n	82fe <__aeabi_dsub+0x2ae>
    8174:	4640      	mov	r0, r8
    8176:	f000 fc6f 	bl	8a58 <__clzsi2>
    817a:	0003      	movs	r3, r0
    817c:	3b08      	subs	r3, #8
    817e:	2b1f      	cmp	r3, #31
    8180:	dd00      	ble.n	8184 <__aeabi_dsub+0x134>
    8182:	e0c5      	b.n	8310 <__aeabi_dsub+0x2c0>
    8184:	2220      	movs	r2, #32
    8186:	0029      	movs	r1, r5
    8188:	1ad2      	subs	r2, r2, r3
    818a:	4647      	mov	r7, r8
    818c:	40d1      	lsrs	r1, r2
    818e:	409f      	lsls	r7, r3
    8190:	000a      	movs	r2, r1
    8192:	409d      	lsls	r5, r3
    8194:	433a      	orrs	r2, r7
    8196:	429c      	cmp	r4, r3
    8198:	dd00      	ble.n	819c <__aeabi_dsub+0x14c>
    819a:	e0c0      	b.n	831e <__aeabi_dsub+0x2ce>
    819c:	1b1c      	subs	r4, r3, r4
    819e:	1c63      	adds	r3, r4, #1
    81a0:	2b1f      	cmp	r3, #31
    81a2:	dd00      	ble.n	81a6 <__aeabi_dsub+0x156>
    81a4:	e0e4      	b.n	8370 <__aeabi_dsub+0x320>
    81a6:	2120      	movs	r1, #32
    81a8:	0014      	movs	r4, r2
    81aa:	0028      	movs	r0, r5
    81ac:	1ac9      	subs	r1, r1, r3
    81ae:	40d8      	lsrs	r0, r3
    81b0:	408c      	lsls	r4, r1
    81b2:	408d      	lsls	r5, r1
    81b4:	4304      	orrs	r4, r0
    81b6:	40da      	lsrs	r2, r3
    81b8:	1e68      	subs	r0, r5, #1
    81ba:	4185      	sbcs	r5, r0
    81bc:	0017      	movs	r7, r2
    81be:	4325      	orrs	r5, r4
    81c0:	2400      	movs	r4, #0
    81c2:	e771      	b.n	80a8 <__aeabi_dsub+0x58>
    81c4:	4642      	mov	r2, r8
    81c6:	4663      	mov	r3, ip
    81c8:	431a      	orrs	r2, r3
    81ca:	d100      	bne.n	81ce <__aeabi_dsub+0x17e>
    81cc:	e24c      	b.n	8668 <__aeabi_dsub+0x618>
    81ce:	4667      	mov	r7, ip
    81d0:	4645      	mov	r5, r8
    81d2:	076b      	lsls	r3, r5, #29
    81d4:	d000      	beq.n	81d8 <__aeabi_dsub+0x188>
    81d6:	e769      	b.n	80ac <__aeabi_dsub+0x5c>
    81d8:	2301      	movs	r3, #1
    81da:	4651      	mov	r1, sl
    81dc:	0778      	lsls	r0, r7, #29
    81de:	08ed      	lsrs	r5, r5, #3
    81e0:	08fa      	lsrs	r2, r7, #3
    81e2:	400b      	ands	r3, r1
    81e4:	4305      	orrs	r5, r0
    81e6:	4973      	ldr	r1, [pc, #460]	; (83b4 <__aeabi_dsub+0x364>)
    81e8:	428c      	cmp	r4, r1
    81ea:	d038      	beq.n	825e <__aeabi_dsub+0x20e>
    81ec:	0312      	lsls	r2, r2, #12
    81ee:	0564      	lsls	r4, r4, #21
    81f0:	0b12      	lsrs	r2, r2, #12
    81f2:	0d64      	lsrs	r4, r4, #21
    81f4:	e779      	b.n	80ea <__aeabi_dsub+0x9a>
    81f6:	2e00      	cmp	r6, #0
    81f8:	dc00      	bgt.n	81fc <__aeabi_dsub+0x1ac>
    81fa:	e09a      	b.n	8332 <__aeabi_dsub+0x2e2>
    81fc:	2a00      	cmp	r2, #0
    81fe:	d047      	beq.n	8290 <__aeabi_dsub+0x240>
    8200:	4a6c      	ldr	r2, [pc, #432]	; (83b4 <__aeabi_dsub+0x364>)
    8202:	4294      	cmp	r4, r2
    8204:	d100      	bne.n	8208 <__aeabi_dsub+0x1b8>
    8206:	e74f      	b.n	80a8 <__aeabi_dsub+0x58>
    8208:	2280      	movs	r2, #128	; 0x80
    820a:	0412      	lsls	r2, r2, #16
    820c:	4310      	orrs	r0, r2
    820e:	4662      	mov	r2, ip
    8210:	2a38      	cmp	r2, #56	; 0x38
    8212:	dc00      	bgt.n	8216 <__aeabi_dsub+0x1c6>
    8214:	e108      	b.n	8428 <__aeabi_dsub+0x3d8>
    8216:	4301      	orrs	r1, r0
    8218:	1e48      	subs	r0, r1, #1
    821a:	4181      	sbcs	r1, r0
    821c:	2200      	movs	r2, #0
    821e:	b2c9      	uxtb	r1, r1
    8220:	1949      	adds	r1, r1, r5
    8222:	19d2      	adds	r2, r2, r7
    8224:	42a9      	cmp	r1, r5
    8226:	41bf      	sbcs	r7, r7
    8228:	000d      	movs	r5, r1
    822a:	427f      	negs	r7, r7
    822c:	18bf      	adds	r7, r7, r2
    822e:	023a      	lsls	r2, r7, #8
    8230:	d400      	bmi.n	8234 <__aeabi_dsub+0x1e4>
    8232:	e142      	b.n	84ba <__aeabi_dsub+0x46a>
    8234:	4a5f      	ldr	r2, [pc, #380]	; (83b4 <__aeabi_dsub+0x364>)
    8236:	3401      	adds	r4, #1
    8238:	4294      	cmp	r4, r2
    823a:	d100      	bne.n	823e <__aeabi_dsub+0x1ee>
    823c:	e14e      	b.n	84dc <__aeabi_dsub+0x48c>
    823e:	2001      	movs	r0, #1
    8240:	4a5d      	ldr	r2, [pc, #372]	; (83b8 <__aeabi_dsub+0x368>)
    8242:	0869      	lsrs	r1, r5, #1
    8244:	403a      	ands	r2, r7
    8246:	4028      	ands	r0, r5
    8248:	4308      	orrs	r0, r1
    824a:	07d5      	lsls	r5, r2, #31
    824c:	4305      	orrs	r5, r0
    824e:	0857      	lsrs	r7, r2, #1
    8250:	469a      	mov	sl, r3
    8252:	e729      	b.n	80a8 <__aeabi_dsub+0x58>
    8254:	0006      	movs	r6, r0
    8256:	430e      	orrs	r6, r1
    8258:	d000      	beq.n	825c <__aeabi_dsub+0x20c>
    825a:	e717      	b.n	808c <__aeabi_dsub+0x3c>
    825c:	e714      	b.n	8088 <__aeabi_dsub+0x38>
    825e:	0029      	movs	r1, r5
    8260:	4311      	orrs	r1, r2
    8262:	d100      	bne.n	8266 <__aeabi_dsub+0x216>
    8264:	e1f9      	b.n	865a <__aeabi_dsub+0x60a>
    8266:	2180      	movs	r1, #128	; 0x80
    8268:	0309      	lsls	r1, r1, #12
    826a:	430a      	orrs	r2, r1
    826c:	0312      	lsls	r2, r2, #12
    826e:	0b12      	lsrs	r2, r2, #12
    8270:	e73b      	b.n	80ea <__aeabi_dsub+0x9a>
    8272:	2301      	movs	r3, #1
    8274:	425b      	negs	r3, r3
    8276:	4698      	mov	r8, r3
    8278:	44c4      	add	ip, r8
    827a:	4663      	mov	r3, ip
    827c:	2b00      	cmp	r3, #0
    827e:	d172      	bne.n	8366 <__aeabi_dsub+0x316>
    8280:	1a69      	subs	r1, r5, r1
    8282:	428d      	cmp	r5, r1
    8284:	419b      	sbcs	r3, r3
    8286:	1a3f      	subs	r7, r7, r0
    8288:	425b      	negs	r3, r3
    828a:	1aff      	subs	r7, r7, r3
    828c:	000d      	movs	r5, r1
    828e:	e768      	b.n	8162 <__aeabi_dsub+0x112>
    8290:	0002      	movs	r2, r0
    8292:	430a      	orrs	r2, r1
    8294:	d100      	bne.n	8298 <__aeabi_dsub+0x248>
    8296:	e707      	b.n	80a8 <__aeabi_dsub+0x58>
    8298:	2201      	movs	r2, #1
    829a:	4252      	negs	r2, r2
    829c:	4690      	mov	r8, r2
    829e:	44c4      	add	ip, r8
    82a0:	4662      	mov	r2, ip
    82a2:	2a00      	cmp	r2, #0
    82a4:	d000      	beq.n	82a8 <__aeabi_dsub+0x258>
    82a6:	e0e6      	b.n	8476 <__aeabi_dsub+0x426>
    82a8:	1869      	adds	r1, r5, r1
    82aa:	42a9      	cmp	r1, r5
    82ac:	41b6      	sbcs	r6, r6
    82ae:	183f      	adds	r7, r7, r0
    82b0:	4276      	negs	r6, r6
    82b2:	19f7      	adds	r7, r6, r7
    82b4:	000d      	movs	r5, r1
    82b6:	e7ba      	b.n	822e <__aeabi_dsub+0x1de>
    82b8:	2e00      	cmp	r6, #0
    82ba:	d000      	beq.n	82be <__aeabi_dsub+0x26e>
    82bc:	e080      	b.n	83c0 <__aeabi_dsub+0x370>
    82be:	1c62      	adds	r2, r4, #1
    82c0:	0552      	lsls	r2, r2, #21
    82c2:	0d52      	lsrs	r2, r2, #21
    82c4:	2a01      	cmp	r2, #1
    82c6:	dc00      	bgt.n	82ca <__aeabi_dsub+0x27a>
    82c8:	e0f9      	b.n	84be <__aeabi_dsub+0x46e>
    82ca:	1a6a      	subs	r2, r5, r1
    82cc:	4691      	mov	r9, r2
    82ce:	454d      	cmp	r5, r9
    82d0:	41b6      	sbcs	r6, r6
    82d2:	1a3a      	subs	r2, r7, r0
    82d4:	4276      	negs	r6, r6
    82d6:	1b92      	subs	r2, r2, r6
    82d8:	4690      	mov	r8, r2
    82da:	0212      	lsls	r2, r2, #8
    82dc:	d400      	bmi.n	82e0 <__aeabi_dsub+0x290>
    82de:	e099      	b.n	8414 <__aeabi_dsub+0x3c4>
    82e0:	1b4d      	subs	r5, r1, r5
    82e2:	42a9      	cmp	r1, r5
    82e4:	4189      	sbcs	r1, r1
    82e6:	1bc7      	subs	r7, r0, r7
    82e8:	4249      	negs	r1, r1
    82ea:	1a7a      	subs	r2, r7, r1
    82ec:	4690      	mov	r8, r2
    82ee:	469a      	mov	sl, r3
    82f0:	e73c      	b.n	816c <__aeabi_dsub+0x11c>
    82f2:	4652      	mov	r2, sl
    82f4:	2301      	movs	r3, #1
    82f6:	2500      	movs	r5, #0
    82f8:	4013      	ands	r3, r2
    82fa:	2200      	movs	r2, #0
    82fc:	e6f5      	b.n	80ea <__aeabi_dsub+0x9a>
    82fe:	0028      	movs	r0, r5
    8300:	f000 fbaa 	bl	8a58 <__clzsi2>
    8304:	3020      	adds	r0, #32
    8306:	0003      	movs	r3, r0
    8308:	3b08      	subs	r3, #8
    830a:	2b1f      	cmp	r3, #31
    830c:	dc00      	bgt.n	8310 <__aeabi_dsub+0x2c0>
    830e:	e739      	b.n	8184 <__aeabi_dsub+0x134>
    8310:	002a      	movs	r2, r5
    8312:	3828      	subs	r0, #40	; 0x28
    8314:	4082      	lsls	r2, r0
    8316:	2500      	movs	r5, #0
    8318:	429c      	cmp	r4, r3
    831a:	dc00      	bgt.n	831e <__aeabi_dsub+0x2ce>
    831c:	e73e      	b.n	819c <__aeabi_dsub+0x14c>
    831e:	4f26      	ldr	r7, [pc, #152]	; (83b8 <__aeabi_dsub+0x368>)
    8320:	1ae4      	subs	r4, r4, r3
    8322:	4017      	ands	r7, r2
    8324:	e6c0      	b.n	80a8 <__aeabi_dsub+0x58>
    8326:	4301      	orrs	r1, r0
    8328:	1e48      	subs	r0, r1, #1
    832a:	4181      	sbcs	r1, r0
    832c:	2200      	movs	r2, #0
    832e:	b2c9      	uxtb	r1, r1
    8330:	e710      	b.n	8154 <__aeabi_dsub+0x104>
    8332:	2e00      	cmp	r6, #0
    8334:	d000      	beq.n	8338 <__aeabi_dsub+0x2e8>
    8336:	e0f1      	b.n	851c <__aeabi_dsub+0x4cc>
    8338:	1c62      	adds	r2, r4, #1
    833a:	4694      	mov	ip, r2
    833c:	0552      	lsls	r2, r2, #21
    833e:	0d52      	lsrs	r2, r2, #21
    8340:	2a01      	cmp	r2, #1
    8342:	dc00      	bgt.n	8346 <__aeabi_dsub+0x2f6>
    8344:	e0a0      	b.n	8488 <__aeabi_dsub+0x438>
    8346:	4a1b      	ldr	r2, [pc, #108]	; (83b4 <__aeabi_dsub+0x364>)
    8348:	4594      	cmp	ip, r2
    834a:	d100      	bne.n	834e <__aeabi_dsub+0x2fe>
    834c:	e0c5      	b.n	84da <__aeabi_dsub+0x48a>
    834e:	1869      	adds	r1, r5, r1
    8350:	42a9      	cmp	r1, r5
    8352:	4192      	sbcs	r2, r2
    8354:	183f      	adds	r7, r7, r0
    8356:	4252      	negs	r2, r2
    8358:	19d2      	adds	r2, r2, r7
    835a:	0849      	lsrs	r1, r1, #1
    835c:	07d5      	lsls	r5, r2, #31
    835e:	430d      	orrs	r5, r1
    8360:	0857      	lsrs	r7, r2, #1
    8362:	4664      	mov	r4, ip
    8364:	e6a0      	b.n	80a8 <__aeabi_dsub+0x58>
    8366:	4b13      	ldr	r3, [pc, #76]	; (83b4 <__aeabi_dsub+0x364>)
    8368:	429c      	cmp	r4, r3
    836a:	d000      	beq.n	836e <__aeabi_dsub+0x31e>
    836c:	e6d9      	b.n	8122 <__aeabi_dsub+0xd2>
    836e:	e69b      	b.n	80a8 <__aeabi_dsub+0x58>
    8370:	0011      	movs	r1, r2
    8372:	3c1f      	subs	r4, #31
    8374:	40e1      	lsrs	r1, r4
    8376:	000c      	movs	r4, r1
    8378:	2b20      	cmp	r3, #32
    837a:	d100      	bne.n	837e <__aeabi_dsub+0x32e>
    837c:	e080      	b.n	8480 <__aeabi_dsub+0x430>
    837e:	2140      	movs	r1, #64	; 0x40
    8380:	1acb      	subs	r3, r1, r3
    8382:	409a      	lsls	r2, r3
    8384:	4315      	orrs	r5, r2
    8386:	1e6a      	subs	r2, r5, #1
    8388:	4195      	sbcs	r5, r2
    838a:	2700      	movs	r7, #0
    838c:	4325      	orrs	r5, r4
    838e:	2400      	movs	r4, #0
    8390:	e71f      	b.n	81d2 <__aeabi_dsub+0x182>
    8392:	4663      	mov	r3, ip
    8394:	0002      	movs	r2, r0
    8396:	3b20      	subs	r3, #32
    8398:	40da      	lsrs	r2, r3
    839a:	4663      	mov	r3, ip
    839c:	2b20      	cmp	r3, #32
    839e:	d071      	beq.n	8484 <__aeabi_dsub+0x434>
    83a0:	2340      	movs	r3, #64	; 0x40
    83a2:	4666      	mov	r6, ip
    83a4:	1b9b      	subs	r3, r3, r6
    83a6:	4098      	lsls	r0, r3
    83a8:	4301      	orrs	r1, r0
    83aa:	1e48      	subs	r0, r1, #1
    83ac:	4181      	sbcs	r1, r0
    83ae:	4311      	orrs	r1, r2
    83b0:	2200      	movs	r2, #0
    83b2:	e6cf      	b.n	8154 <__aeabi_dsub+0x104>
    83b4:	000007ff 	.word	0x000007ff
    83b8:	ff7fffff 	.word	0xff7fffff
    83bc:	800fffff 	.word	0x800fffff
    83c0:	2c00      	cmp	r4, #0
    83c2:	d048      	beq.n	8456 <__aeabi_dsub+0x406>
    83c4:	4cca      	ldr	r4, [pc, #808]	; (86f0 <__aeabi_dsub+0x6a0>)
    83c6:	42a2      	cmp	r2, r4
    83c8:	d100      	bne.n	83cc <__aeabi_dsub+0x37c>
    83ca:	e0a2      	b.n	8512 <__aeabi_dsub+0x4c2>
    83cc:	4274      	negs	r4, r6
    83ce:	46a1      	mov	r9, r4
    83d0:	2480      	movs	r4, #128	; 0x80
    83d2:	0424      	lsls	r4, r4, #16
    83d4:	4327      	orrs	r7, r4
    83d6:	464c      	mov	r4, r9
    83d8:	2c38      	cmp	r4, #56	; 0x38
    83da:	dd00      	ble.n	83de <__aeabi_dsub+0x38e>
    83dc:	e0db      	b.n	8596 <__aeabi_dsub+0x546>
    83de:	2c1f      	cmp	r4, #31
    83e0:	dd00      	ble.n	83e4 <__aeabi_dsub+0x394>
    83e2:	e144      	b.n	866e <__aeabi_dsub+0x61e>
    83e4:	464e      	mov	r6, r9
    83e6:	2420      	movs	r4, #32
    83e8:	1ba4      	subs	r4, r4, r6
    83ea:	003e      	movs	r6, r7
    83ec:	40a6      	lsls	r6, r4
    83ee:	46a2      	mov	sl, r4
    83f0:	46b0      	mov	r8, r6
    83f2:	464c      	mov	r4, r9
    83f4:	002e      	movs	r6, r5
    83f6:	40e6      	lsrs	r6, r4
    83f8:	46b4      	mov	ip, r6
    83fa:	4646      	mov	r6, r8
    83fc:	4664      	mov	r4, ip
    83fe:	4326      	orrs	r6, r4
    8400:	4654      	mov	r4, sl
    8402:	40a5      	lsls	r5, r4
    8404:	1e6c      	subs	r4, r5, #1
    8406:	41a5      	sbcs	r5, r4
    8408:	0034      	movs	r4, r6
    840a:	432c      	orrs	r4, r5
    840c:	464d      	mov	r5, r9
    840e:	40ef      	lsrs	r7, r5
    8410:	1b0d      	subs	r5, r1, r4
    8412:	e028      	b.n	8466 <__aeabi_dsub+0x416>
    8414:	464a      	mov	r2, r9
    8416:	4643      	mov	r3, r8
    8418:	464d      	mov	r5, r9
    841a:	431a      	orrs	r2, r3
    841c:	d000      	beq.n	8420 <__aeabi_dsub+0x3d0>
    841e:	e6a5      	b.n	816c <__aeabi_dsub+0x11c>
    8420:	2300      	movs	r3, #0
    8422:	2400      	movs	r4, #0
    8424:	2500      	movs	r5, #0
    8426:	e6de      	b.n	81e6 <__aeabi_dsub+0x196>
    8428:	2a1f      	cmp	r2, #31
    842a:	dc5a      	bgt.n	84e2 <__aeabi_dsub+0x492>
    842c:	4666      	mov	r6, ip
    842e:	2220      	movs	r2, #32
    8430:	1b92      	subs	r2, r2, r6
    8432:	0006      	movs	r6, r0
    8434:	4096      	lsls	r6, r2
    8436:	4691      	mov	r9, r2
    8438:	46b0      	mov	r8, r6
    843a:	4662      	mov	r2, ip
    843c:	000e      	movs	r6, r1
    843e:	40d6      	lsrs	r6, r2
    8440:	4642      	mov	r2, r8
    8442:	4316      	orrs	r6, r2
    8444:	464a      	mov	r2, r9
    8446:	4091      	lsls	r1, r2
    8448:	1e4a      	subs	r2, r1, #1
    844a:	4191      	sbcs	r1, r2
    844c:	0002      	movs	r2, r0
    844e:	4660      	mov	r0, ip
    8450:	4331      	orrs	r1, r6
    8452:	40c2      	lsrs	r2, r0
    8454:	e6e4      	b.n	8220 <__aeabi_dsub+0x1d0>
    8456:	003c      	movs	r4, r7
    8458:	432c      	orrs	r4, r5
    845a:	d05a      	beq.n	8512 <__aeabi_dsub+0x4c2>
    845c:	43f4      	mvns	r4, r6
    845e:	46a1      	mov	r9, r4
    8460:	2c00      	cmp	r4, #0
    8462:	d152      	bne.n	850a <__aeabi_dsub+0x4ba>
    8464:	1b4d      	subs	r5, r1, r5
    8466:	42a9      	cmp	r1, r5
    8468:	4189      	sbcs	r1, r1
    846a:	1bc7      	subs	r7, r0, r7
    846c:	4249      	negs	r1, r1
    846e:	1a7f      	subs	r7, r7, r1
    8470:	0014      	movs	r4, r2
    8472:	469a      	mov	sl, r3
    8474:	e675      	b.n	8162 <__aeabi_dsub+0x112>
    8476:	4a9e      	ldr	r2, [pc, #632]	; (86f0 <__aeabi_dsub+0x6a0>)
    8478:	4294      	cmp	r4, r2
    847a:	d000      	beq.n	847e <__aeabi_dsub+0x42e>
    847c:	e6c7      	b.n	820e <__aeabi_dsub+0x1be>
    847e:	e613      	b.n	80a8 <__aeabi_dsub+0x58>
    8480:	2200      	movs	r2, #0
    8482:	e77f      	b.n	8384 <__aeabi_dsub+0x334>
    8484:	2000      	movs	r0, #0
    8486:	e78f      	b.n	83a8 <__aeabi_dsub+0x358>
    8488:	2c00      	cmp	r4, #0
    848a:	d000      	beq.n	848e <__aeabi_dsub+0x43e>
    848c:	e0c8      	b.n	8620 <__aeabi_dsub+0x5d0>
    848e:	003b      	movs	r3, r7
    8490:	432b      	orrs	r3, r5
    8492:	d100      	bne.n	8496 <__aeabi_dsub+0x446>
    8494:	e10f      	b.n	86b6 <__aeabi_dsub+0x666>
    8496:	0003      	movs	r3, r0
    8498:	430b      	orrs	r3, r1
    849a:	d100      	bne.n	849e <__aeabi_dsub+0x44e>
    849c:	e604      	b.n	80a8 <__aeabi_dsub+0x58>
    849e:	1869      	adds	r1, r5, r1
    84a0:	42a9      	cmp	r1, r5
    84a2:	419b      	sbcs	r3, r3
    84a4:	183f      	adds	r7, r7, r0
    84a6:	425b      	negs	r3, r3
    84a8:	19df      	adds	r7, r3, r7
    84aa:	023b      	lsls	r3, r7, #8
    84ac:	d400      	bmi.n	84b0 <__aeabi_dsub+0x460>
    84ae:	e11a      	b.n	86e6 <__aeabi_dsub+0x696>
    84b0:	4b90      	ldr	r3, [pc, #576]	; (86f4 <__aeabi_dsub+0x6a4>)
    84b2:	000d      	movs	r5, r1
    84b4:	401f      	ands	r7, r3
    84b6:	4664      	mov	r4, ip
    84b8:	e5f6      	b.n	80a8 <__aeabi_dsub+0x58>
    84ba:	469a      	mov	sl, r3
    84bc:	e689      	b.n	81d2 <__aeabi_dsub+0x182>
    84be:	003a      	movs	r2, r7
    84c0:	432a      	orrs	r2, r5
    84c2:	2c00      	cmp	r4, #0
    84c4:	d15c      	bne.n	8580 <__aeabi_dsub+0x530>
    84c6:	2a00      	cmp	r2, #0
    84c8:	d175      	bne.n	85b6 <__aeabi_dsub+0x566>
    84ca:	0002      	movs	r2, r0
    84cc:	430a      	orrs	r2, r1
    84ce:	d100      	bne.n	84d2 <__aeabi_dsub+0x482>
    84d0:	e0ca      	b.n	8668 <__aeabi_dsub+0x618>
    84d2:	0007      	movs	r7, r0
    84d4:	000d      	movs	r5, r1
    84d6:	469a      	mov	sl, r3
    84d8:	e5e6      	b.n	80a8 <__aeabi_dsub+0x58>
    84da:	4664      	mov	r4, ip
    84dc:	2200      	movs	r2, #0
    84de:	2500      	movs	r5, #0
    84e0:	e681      	b.n	81e6 <__aeabi_dsub+0x196>
    84e2:	4662      	mov	r2, ip
    84e4:	0006      	movs	r6, r0
    84e6:	3a20      	subs	r2, #32
    84e8:	40d6      	lsrs	r6, r2
    84ea:	4662      	mov	r2, ip
    84ec:	46b0      	mov	r8, r6
    84ee:	2a20      	cmp	r2, #32
    84f0:	d100      	bne.n	84f4 <__aeabi_dsub+0x4a4>
    84f2:	e0b7      	b.n	8664 <__aeabi_dsub+0x614>
    84f4:	2240      	movs	r2, #64	; 0x40
    84f6:	4666      	mov	r6, ip
    84f8:	1b92      	subs	r2, r2, r6
    84fa:	4090      	lsls	r0, r2
    84fc:	4301      	orrs	r1, r0
    84fe:	4642      	mov	r2, r8
    8500:	1e48      	subs	r0, r1, #1
    8502:	4181      	sbcs	r1, r0
    8504:	4311      	orrs	r1, r2
    8506:	2200      	movs	r2, #0
    8508:	e68a      	b.n	8220 <__aeabi_dsub+0x1d0>
    850a:	4c79      	ldr	r4, [pc, #484]	; (86f0 <__aeabi_dsub+0x6a0>)
    850c:	42a2      	cmp	r2, r4
    850e:	d000      	beq.n	8512 <__aeabi_dsub+0x4c2>
    8510:	e761      	b.n	83d6 <__aeabi_dsub+0x386>
    8512:	0007      	movs	r7, r0
    8514:	000d      	movs	r5, r1
    8516:	0014      	movs	r4, r2
    8518:	469a      	mov	sl, r3
    851a:	e5c5      	b.n	80a8 <__aeabi_dsub+0x58>
    851c:	2c00      	cmp	r4, #0
    851e:	d141      	bne.n	85a4 <__aeabi_dsub+0x554>
    8520:	003c      	movs	r4, r7
    8522:	432c      	orrs	r4, r5
    8524:	d078      	beq.n	8618 <__aeabi_dsub+0x5c8>
    8526:	43f4      	mvns	r4, r6
    8528:	46a1      	mov	r9, r4
    852a:	2c00      	cmp	r4, #0
    852c:	d020      	beq.n	8570 <__aeabi_dsub+0x520>
    852e:	4c70      	ldr	r4, [pc, #448]	; (86f0 <__aeabi_dsub+0x6a0>)
    8530:	42a2      	cmp	r2, r4
    8532:	d071      	beq.n	8618 <__aeabi_dsub+0x5c8>
    8534:	464c      	mov	r4, r9
    8536:	2c38      	cmp	r4, #56	; 0x38
    8538:	dd00      	ble.n	853c <__aeabi_dsub+0x4ec>
    853a:	e0b2      	b.n	86a2 <__aeabi_dsub+0x652>
    853c:	2c1f      	cmp	r4, #31
    853e:	dd00      	ble.n	8542 <__aeabi_dsub+0x4f2>
    8540:	e0bc      	b.n	86bc <__aeabi_dsub+0x66c>
    8542:	2620      	movs	r6, #32
    8544:	1b34      	subs	r4, r6, r4
    8546:	46a2      	mov	sl, r4
    8548:	003c      	movs	r4, r7
    854a:	4656      	mov	r6, sl
    854c:	40b4      	lsls	r4, r6
    854e:	464e      	mov	r6, r9
    8550:	46a0      	mov	r8, r4
    8552:	002c      	movs	r4, r5
    8554:	40f4      	lsrs	r4, r6
    8556:	46a4      	mov	ip, r4
    8558:	4644      	mov	r4, r8
    855a:	4666      	mov	r6, ip
    855c:	4334      	orrs	r4, r6
    855e:	46a4      	mov	ip, r4
    8560:	4654      	mov	r4, sl
    8562:	40a5      	lsls	r5, r4
    8564:	4664      	mov	r4, ip
    8566:	1e6e      	subs	r6, r5, #1
    8568:	41b5      	sbcs	r5, r6
    856a:	4325      	orrs	r5, r4
    856c:	464c      	mov	r4, r9
    856e:	40e7      	lsrs	r7, r4
    8570:	186d      	adds	r5, r5, r1
    8572:	428d      	cmp	r5, r1
    8574:	4189      	sbcs	r1, r1
    8576:	183f      	adds	r7, r7, r0
    8578:	4249      	negs	r1, r1
    857a:	19cf      	adds	r7, r1, r7
    857c:	0014      	movs	r4, r2
    857e:	e656      	b.n	822e <__aeabi_dsub+0x1de>
    8580:	2a00      	cmp	r2, #0
    8582:	d12f      	bne.n	85e4 <__aeabi_dsub+0x594>
    8584:	0002      	movs	r2, r0
    8586:	430a      	orrs	r2, r1
    8588:	d100      	bne.n	858c <__aeabi_dsub+0x53c>
    858a:	e084      	b.n	8696 <__aeabi_dsub+0x646>
    858c:	0007      	movs	r7, r0
    858e:	000d      	movs	r5, r1
    8590:	469a      	mov	sl, r3
    8592:	4c57      	ldr	r4, [pc, #348]	; (86f0 <__aeabi_dsub+0x6a0>)
    8594:	e588      	b.n	80a8 <__aeabi_dsub+0x58>
    8596:	433d      	orrs	r5, r7
    8598:	1e6f      	subs	r7, r5, #1
    859a:	41bd      	sbcs	r5, r7
    859c:	b2ec      	uxtb	r4, r5
    859e:	2700      	movs	r7, #0
    85a0:	1b0d      	subs	r5, r1, r4
    85a2:	e760      	b.n	8466 <__aeabi_dsub+0x416>
    85a4:	4c52      	ldr	r4, [pc, #328]	; (86f0 <__aeabi_dsub+0x6a0>)
    85a6:	42a2      	cmp	r2, r4
    85a8:	d036      	beq.n	8618 <__aeabi_dsub+0x5c8>
    85aa:	4274      	negs	r4, r6
    85ac:	2680      	movs	r6, #128	; 0x80
    85ae:	0436      	lsls	r6, r6, #16
    85b0:	46a1      	mov	r9, r4
    85b2:	4337      	orrs	r7, r6
    85b4:	e7be      	b.n	8534 <__aeabi_dsub+0x4e4>
    85b6:	0002      	movs	r2, r0
    85b8:	430a      	orrs	r2, r1
    85ba:	d100      	bne.n	85be <__aeabi_dsub+0x56e>
    85bc:	e574      	b.n	80a8 <__aeabi_dsub+0x58>
    85be:	1a6a      	subs	r2, r5, r1
    85c0:	4690      	mov	r8, r2
    85c2:	4545      	cmp	r5, r8
    85c4:	41b6      	sbcs	r6, r6
    85c6:	1a3a      	subs	r2, r7, r0
    85c8:	4276      	negs	r6, r6
    85ca:	1b92      	subs	r2, r2, r6
    85cc:	4694      	mov	ip, r2
    85ce:	0212      	lsls	r2, r2, #8
    85d0:	d400      	bmi.n	85d4 <__aeabi_dsub+0x584>
    85d2:	e5f7      	b.n	81c4 <__aeabi_dsub+0x174>
    85d4:	1b4d      	subs	r5, r1, r5
    85d6:	42a9      	cmp	r1, r5
    85d8:	4189      	sbcs	r1, r1
    85da:	1bc7      	subs	r7, r0, r7
    85dc:	4249      	negs	r1, r1
    85de:	1a7f      	subs	r7, r7, r1
    85e0:	469a      	mov	sl, r3
    85e2:	e561      	b.n	80a8 <__aeabi_dsub+0x58>
    85e4:	0002      	movs	r2, r0
    85e6:	430a      	orrs	r2, r1
    85e8:	d03a      	beq.n	8660 <__aeabi_dsub+0x610>
    85ea:	08ed      	lsrs	r5, r5, #3
    85ec:	077c      	lsls	r4, r7, #29
    85ee:	432c      	orrs	r4, r5
    85f0:	2580      	movs	r5, #128	; 0x80
    85f2:	08fa      	lsrs	r2, r7, #3
    85f4:	032d      	lsls	r5, r5, #12
    85f6:	422a      	tst	r2, r5
    85f8:	d008      	beq.n	860c <__aeabi_dsub+0x5bc>
    85fa:	08c7      	lsrs	r7, r0, #3
    85fc:	422f      	tst	r7, r5
    85fe:	d105      	bne.n	860c <__aeabi_dsub+0x5bc>
    8600:	0745      	lsls	r5, r0, #29
    8602:	002c      	movs	r4, r5
    8604:	003a      	movs	r2, r7
    8606:	469a      	mov	sl, r3
    8608:	08c9      	lsrs	r1, r1, #3
    860a:	430c      	orrs	r4, r1
    860c:	0f67      	lsrs	r7, r4, #29
    860e:	00d2      	lsls	r2, r2, #3
    8610:	00e5      	lsls	r5, r4, #3
    8612:	4317      	orrs	r7, r2
    8614:	4c36      	ldr	r4, [pc, #216]	; (86f0 <__aeabi_dsub+0x6a0>)
    8616:	e547      	b.n	80a8 <__aeabi_dsub+0x58>
    8618:	0007      	movs	r7, r0
    861a:	000d      	movs	r5, r1
    861c:	0014      	movs	r4, r2
    861e:	e543      	b.n	80a8 <__aeabi_dsub+0x58>
    8620:	003a      	movs	r2, r7
    8622:	432a      	orrs	r2, r5
    8624:	d043      	beq.n	86ae <__aeabi_dsub+0x65e>
    8626:	0002      	movs	r2, r0
    8628:	430a      	orrs	r2, r1
    862a:	d019      	beq.n	8660 <__aeabi_dsub+0x610>
    862c:	08ed      	lsrs	r5, r5, #3
    862e:	077c      	lsls	r4, r7, #29
    8630:	432c      	orrs	r4, r5
    8632:	2580      	movs	r5, #128	; 0x80
    8634:	08fa      	lsrs	r2, r7, #3
    8636:	032d      	lsls	r5, r5, #12
    8638:	422a      	tst	r2, r5
    863a:	d007      	beq.n	864c <__aeabi_dsub+0x5fc>
    863c:	08c6      	lsrs	r6, r0, #3
    863e:	422e      	tst	r6, r5
    8640:	d104      	bne.n	864c <__aeabi_dsub+0x5fc>
    8642:	0747      	lsls	r7, r0, #29
    8644:	003c      	movs	r4, r7
    8646:	0032      	movs	r2, r6
    8648:	08c9      	lsrs	r1, r1, #3
    864a:	430c      	orrs	r4, r1
    864c:	00d7      	lsls	r7, r2, #3
    864e:	0f62      	lsrs	r2, r4, #29
    8650:	00e5      	lsls	r5, r4, #3
    8652:	4317      	orrs	r7, r2
    8654:	469a      	mov	sl, r3
    8656:	4c26      	ldr	r4, [pc, #152]	; (86f0 <__aeabi_dsub+0x6a0>)
    8658:	e526      	b.n	80a8 <__aeabi_dsub+0x58>
    865a:	2200      	movs	r2, #0
    865c:	2500      	movs	r5, #0
    865e:	e544      	b.n	80ea <__aeabi_dsub+0x9a>
    8660:	4c23      	ldr	r4, [pc, #140]	; (86f0 <__aeabi_dsub+0x6a0>)
    8662:	e521      	b.n	80a8 <__aeabi_dsub+0x58>
    8664:	2000      	movs	r0, #0
    8666:	e749      	b.n	84fc <__aeabi_dsub+0x4ac>
    8668:	2300      	movs	r3, #0
    866a:	2500      	movs	r5, #0
    866c:	e5bb      	b.n	81e6 <__aeabi_dsub+0x196>
    866e:	464c      	mov	r4, r9
    8670:	003e      	movs	r6, r7
    8672:	3c20      	subs	r4, #32
    8674:	40e6      	lsrs	r6, r4
    8676:	464c      	mov	r4, r9
    8678:	46b4      	mov	ip, r6
    867a:	2c20      	cmp	r4, #32
    867c:	d031      	beq.n	86e2 <__aeabi_dsub+0x692>
    867e:	2440      	movs	r4, #64	; 0x40
    8680:	464e      	mov	r6, r9
    8682:	1ba6      	subs	r6, r4, r6
    8684:	40b7      	lsls	r7, r6
    8686:	433d      	orrs	r5, r7
    8688:	1e6c      	subs	r4, r5, #1
    868a:	41a5      	sbcs	r5, r4
    868c:	4664      	mov	r4, ip
    868e:	432c      	orrs	r4, r5
    8690:	2700      	movs	r7, #0
    8692:	1b0d      	subs	r5, r1, r4
    8694:	e6e7      	b.n	8466 <__aeabi_dsub+0x416>
    8696:	2280      	movs	r2, #128	; 0x80
    8698:	2300      	movs	r3, #0
    869a:	0312      	lsls	r2, r2, #12
    869c:	4c14      	ldr	r4, [pc, #80]	; (86f0 <__aeabi_dsub+0x6a0>)
    869e:	2500      	movs	r5, #0
    86a0:	e5a1      	b.n	81e6 <__aeabi_dsub+0x196>
    86a2:	433d      	orrs	r5, r7
    86a4:	1e6f      	subs	r7, r5, #1
    86a6:	41bd      	sbcs	r5, r7
    86a8:	2700      	movs	r7, #0
    86aa:	b2ed      	uxtb	r5, r5
    86ac:	e760      	b.n	8570 <__aeabi_dsub+0x520>
    86ae:	0007      	movs	r7, r0
    86b0:	000d      	movs	r5, r1
    86b2:	4c0f      	ldr	r4, [pc, #60]	; (86f0 <__aeabi_dsub+0x6a0>)
    86b4:	e4f8      	b.n	80a8 <__aeabi_dsub+0x58>
    86b6:	0007      	movs	r7, r0
    86b8:	000d      	movs	r5, r1
    86ba:	e4f5      	b.n	80a8 <__aeabi_dsub+0x58>
    86bc:	464e      	mov	r6, r9
    86be:	003c      	movs	r4, r7
    86c0:	3e20      	subs	r6, #32
    86c2:	40f4      	lsrs	r4, r6
    86c4:	46a0      	mov	r8, r4
    86c6:	464c      	mov	r4, r9
    86c8:	2c20      	cmp	r4, #32
    86ca:	d00e      	beq.n	86ea <__aeabi_dsub+0x69a>
    86cc:	2440      	movs	r4, #64	; 0x40
    86ce:	464e      	mov	r6, r9
    86d0:	1ba4      	subs	r4, r4, r6
    86d2:	40a7      	lsls	r7, r4
    86d4:	433d      	orrs	r5, r7
    86d6:	1e6f      	subs	r7, r5, #1
    86d8:	41bd      	sbcs	r5, r7
    86da:	4644      	mov	r4, r8
    86dc:	2700      	movs	r7, #0
    86de:	4325      	orrs	r5, r4
    86e0:	e746      	b.n	8570 <__aeabi_dsub+0x520>
    86e2:	2700      	movs	r7, #0
    86e4:	e7cf      	b.n	8686 <__aeabi_dsub+0x636>
    86e6:	000d      	movs	r5, r1
    86e8:	e573      	b.n	81d2 <__aeabi_dsub+0x182>
    86ea:	2700      	movs	r7, #0
    86ec:	e7f2      	b.n	86d4 <__aeabi_dsub+0x684>
    86ee:	46c0      	nop			; (mov r8, r8)
    86f0:	000007ff 	.word	0x000007ff
    86f4:	ff7fffff 	.word	0xff7fffff

000086f8 <__aeabi_dcmpun>:
    86f8:	b570      	push	{r4, r5, r6, lr}
    86fa:	4e0e      	ldr	r6, [pc, #56]	; (8734 <__aeabi_dcmpun+0x3c>)
    86fc:	030c      	lsls	r4, r1, #12
    86fe:	031d      	lsls	r5, r3, #12
    8700:	0049      	lsls	r1, r1, #1
    8702:	005b      	lsls	r3, r3, #1
    8704:	0b24      	lsrs	r4, r4, #12
    8706:	0d49      	lsrs	r1, r1, #21
    8708:	0b2d      	lsrs	r5, r5, #12
    870a:	0d5b      	lsrs	r3, r3, #21
    870c:	42b1      	cmp	r1, r6
    870e:	d004      	beq.n	871a <__aeabi_dcmpun+0x22>
    8710:	4908      	ldr	r1, [pc, #32]	; (8734 <__aeabi_dcmpun+0x3c>)
    8712:	2000      	movs	r0, #0
    8714:	428b      	cmp	r3, r1
    8716:	d008      	beq.n	872a <__aeabi_dcmpun+0x32>
    8718:	bd70      	pop	{r4, r5, r6, pc}
    871a:	4304      	orrs	r4, r0
    871c:	2001      	movs	r0, #1
    871e:	2c00      	cmp	r4, #0
    8720:	d1fa      	bne.n	8718 <__aeabi_dcmpun+0x20>
    8722:	4904      	ldr	r1, [pc, #16]	; (8734 <__aeabi_dcmpun+0x3c>)
    8724:	2000      	movs	r0, #0
    8726:	428b      	cmp	r3, r1
    8728:	d1f6      	bne.n	8718 <__aeabi_dcmpun+0x20>
    872a:	4315      	orrs	r5, r2
    872c:	0028      	movs	r0, r5
    872e:	1e45      	subs	r5, r0, #1
    8730:	41a8      	sbcs	r0, r5
    8732:	e7f1      	b.n	8718 <__aeabi_dcmpun+0x20>
    8734:	000007ff 	.word	0x000007ff

00008738 <__aeabi_d2iz>:
    8738:	030b      	lsls	r3, r1, #12
    873a:	b530      	push	{r4, r5, lr}
    873c:	4d13      	ldr	r5, [pc, #76]	; (878c <__aeabi_d2iz+0x54>)
    873e:	0b1a      	lsrs	r2, r3, #12
    8740:	004b      	lsls	r3, r1, #1
    8742:	0d5b      	lsrs	r3, r3, #21
    8744:	0fc9      	lsrs	r1, r1, #31
    8746:	2400      	movs	r4, #0
    8748:	42ab      	cmp	r3, r5
    874a:	dd11      	ble.n	8770 <__aeabi_d2iz+0x38>
    874c:	4c10      	ldr	r4, [pc, #64]	; (8790 <__aeabi_d2iz+0x58>)
    874e:	42a3      	cmp	r3, r4
    8750:	dc10      	bgt.n	8774 <__aeabi_d2iz+0x3c>
    8752:	2480      	movs	r4, #128	; 0x80
    8754:	0364      	lsls	r4, r4, #13
    8756:	4322      	orrs	r2, r4
    8758:	4c0e      	ldr	r4, [pc, #56]	; (8794 <__aeabi_d2iz+0x5c>)
    875a:	1ae4      	subs	r4, r4, r3
    875c:	2c1f      	cmp	r4, #31
    875e:	dd0c      	ble.n	877a <__aeabi_d2iz+0x42>
    8760:	480d      	ldr	r0, [pc, #52]	; (8798 <__aeabi_d2iz+0x60>)
    8762:	1ac3      	subs	r3, r0, r3
    8764:	40da      	lsrs	r2, r3
    8766:	0013      	movs	r3, r2
    8768:	425c      	negs	r4, r3
    876a:	2900      	cmp	r1, #0
    876c:	d100      	bne.n	8770 <__aeabi_d2iz+0x38>
    876e:	001c      	movs	r4, r3
    8770:	0020      	movs	r0, r4
    8772:	bd30      	pop	{r4, r5, pc}
    8774:	4b09      	ldr	r3, [pc, #36]	; (879c <__aeabi_d2iz+0x64>)
    8776:	18cc      	adds	r4, r1, r3
    8778:	e7fa      	b.n	8770 <__aeabi_d2iz+0x38>
    877a:	40e0      	lsrs	r0, r4
    877c:	4c08      	ldr	r4, [pc, #32]	; (87a0 <__aeabi_d2iz+0x68>)
    877e:	46a4      	mov	ip, r4
    8780:	4463      	add	r3, ip
    8782:	409a      	lsls	r2, r3
    8784:	0013      	movs	r3, r2
    8786:	4303      	orrs	r3, r0
    8788:	e7ee      	b.n	8768 <__aeabi_d2iz+0x30>
    878a:	46c0      	nop			; (mov r8, r8)
    878c:	000003fe 	.word	0x000003fe
    8790:	0000041d 	.word	0x0000041d
    8794:	00000433 	.word	0x00000433
    8798:	00000413 	.word	0x00000413
    879c:	7fffffff 	.word	0x7fffffff
    87a0:	fffffbed 	.word	0xfffffbed

000087a4 <__aeabi_i2d>:
    87a4:	b570      	push	{r4, r5, r6, lr}
    87a6:	2800      	cmp	r0, #0
    87a8:	d030      	beq.n	880c <__aeabi_i2d+0x68>
    87aa:	17c3      	asrs	r3, r0, #31
    87ac:	18c4      	adds	r4, r0, r3
    87ae:	405c      	eors	r4, r3
    87b0:	0fc5      	lsrs	r5, r0, #31
    87b2:	0020      	movs	r0, r4
    87b4:	f000 f950 	bl	8a58 <__clzsi2>
    87b8:	4b17      	ldr	r3, [pc, #92]	; (8818 <__aeabi_i2d+0x74>)
    87ba:	4a18      	ldr	r2, [pc, #96]	; (881c <__aeabi_i2d+0x78>)
    87bc:	1a1b      	subs	r3, r3, r0
    87be:	1ad2      	subs	r2, r2, r3
    87c0:	2a1f      	cmp	r2, #31
    87c2:	dd18      	ble.n	87f6 <__aeabi_i2d+0x52>
    87c4:	4a16      	ldr	r2, [pc, #88]	; (8820 <__aeabi_i2d+0x7c>)
    87c6:	1ad2      	subs	r2, r2, r3
    87c8:	4094      	lsls	r4, r2
    87ca:	2200      	movs	r2, #0
    87cc:	0324      	lsls	r4, r4, #12
    87ce:	055b      	lsls	r3, r3, #21
    87d0:	0b24      	lsrs	r4, r4, #12
    87d2:	0d5b      	lsrs	r3, r3, #21
    87d4:	2100      	movs	r1, #0
    87d6:	0010      	movs	r0, r2
    87d8:	0324      	lsls	r4, r4, #12
    87da:	0d0a      	lsrs	r2, r1, #20
    87dc:	0512      	lsls	r2, r2, #20
    87de:	0b24      	lsrs	r4, r4, #12
    87e0:	4314      	orrs	r4, r2
    87e2:	4a10      	ldr	r2, [pc, #64]	; (8824 <__aeabi_i2d+0x80>)
    87e4:	051b      	lsls	r3, r3, #20
    87e6:	4014      	ands	r4, r2
    87e8:	431c      	orrs	r4, r3
    87ea:	0064      	lsls	r4, r4, #1
    87ec:	07ed      	lsls	r5, r5, #31
    87ee:	0864      	lsrs	r4, r4, #1
    87f0:	432c      	orrs	r4, r5
    87f2:	0021      	movs	r1, r4
    87f4:	bd70      	pop	{r4, r5, r6, pc}
    87f6:	0021      	movs	r1, r4
    87f8:	4091      	lsls	r1, r2
    87fa:	000a      	movs	r2, r1
    87fc:	210b      	movs	r1, #11
    87fe:	1a08      	subs	r0, r1, r0
    8800:	40c4      	lsrs	r4, r0
    8802:	055b      	lsls	r3, r3, #21
    8804:	0324      	lsls	r4, r4, #12
    8806:	0b24      	lsrs	r4, r4, #12
    8808:	0d5b      	lsrs	r3, r3, #21
    880a:	e7e3      	b.n	87d4 <__aeabi_i2d+0x30>
    880c:	2500      	movs	r5, #0
    880e:	2300      	movs	r3, #0
    8810:	2400      	movs	r4, #0
    8812:	2200      	movs	r2, #0
    8814:	e7de      	b.n	87d4 <__aeabi_i2d+0x30>
    8816:	46c0      	nop			; (mov r8, r8)
    8818:	0000041e 	.word	0x0000041e
    881c:	00000433 	.word	0x00000433
    8820:	00000413 	.word	0x00000413
    8824:	800fffff 	.word	0x800fffff

00008828 <__aeabi_ui2d>:
    8828:	b570      	push	{r4, r5, r6, lr}
    882a:	1e05      	subs	r5, r0, #0
    882c:	d028      	beq.n	8880 <__aeabi_ui2d+0x58>
    882e:	f000 f913 	bl	8a58 <__clzsi2>
    8832:	4b15      	ldr	r3, [pc, #84]	; (8888 <__aeabi_ui2d+0x60>)
    8834:	4a15      	ldr	r2, [pc, #84]	; (888c <__aeabi_ui2d+0x64>)
    8836:	1a1b      	subs	r3, r3, r0
    8838:	1ad2      	subs	r2, r2, r3
    883a:	2a1f      	cmp	r2, #31
    883c:	dd16      	ble.n	886c <__aeabi_ui2d+0x44>
    883e:	002c      	movs	r4, r5
    8840:	4a13      	ldr	r2, [pc, #76]	; (8890 <__aeabi_ui2d+0x68>)
    8842:	2500      	movs	r5, #0
    8844:	1ad2      	subs	r2, r2, r3
    8846:	4094      	lsls	r4, r2
    8848:	055a      	lsls	r2, r3, #21
    884a:	0324      	lsls	r4, r4, #12
    884c:	0b24      	lsrs	r4, r4, #12
    884e:	0d52      	lsrs	r2, r2, #21
    8850:	2100      	movs	r1, #0
    8852:	0324      	lsls	r4, r4, #12
    8854:	0d0b      	lsrs	r3, r1, #20
    8856:	0b24      	lsrs	r4, r4, #12
    8858:	051b      	lsls	r3, r3, #20
    885a:	4323      	orrs	r3, r4
    885c:	4c0d      	ldr	r4, [pc, #52]	; (8894 <__aeabi_ui2d+0x6c>)
    885e:	0512      	lsls	r2, r2, #20
    8860:	4023      	ands	r3, r4
    8862:	4313      	orrs	r3, r2
    8864:	005b      	lsls	r3, r3, #1
    8866:	0028      	movs	r0, r5
    8868:	0859      	lsrs	r1, r3, #1
    886a:	bd70      	pop	{r4, r5, r6, pc}
    886c:	210b      	movs	r1, #11
    886e:	002c      	movs	r4, r5
    8870:	1a08      	subs	r0, r1, r0
    8872:	40c4      	lsrs	r4, r0
    8874:	4095      	lsls	r5, r2
    8876:	0324      	lsls	r4, r4, #12
    8878:	055a      	lsls	r2, r3, #21
    887a:	0b24      	lsrs	r4, r4, #12
    887c:	0d52      	lsrs	r2, r2, #21
    887e:	e7e7      	b.n	8850 <__aeabi_ui2d+0x28>
    8880:	2200      	movs	r2, #0
    8882:	2400      	movs	r4, #0
    8884:	e7e4      	b.n	8850 <__aeabi_ui2d+0x28>
    8886:	46c0      	nop			; (mov r8, r8)
    8888:	0000041e 	.word	0x0000041e
    888c:	00000433 	.word	0x00000433
    8890:	00000413 	.word	0x00000413
    8894:	800fffff 	.word	0x800fffff

00008898 <__aeabi_f2d>:
    8898:	0042      	lsls	r2, r0, #1
    889a:	0e12      	lsrs	r2, r2, #24
    889c:	1c51      	adds	r1, r2, #1
    889e:	0243      	lsls	r3, r0, #9
    88a0:	b2c9      	uxtb	r1, r1
    88a2:	b570      	push	{r4, r5, r6, lr}
    88a4:	0a5d      	lsrs	r5, r3, #9
    88a6:	0fc4      	lsrs	r4, r0, #31
    88a8:	2901      	cmp	r1, #1
    88aa:	dd15      	ble.n	88d8 <__aeabi_f2d+0x40>
    88ac:	21e0      	movs	r1, #224	; 0xe0
    88ae:	0089      	lsls	r1, r1, #2
    88b0:	468c      	mov	ip, r1
    88b2:	076d      	lsls	r5, r5, #29
    88b4:	0b1b      	lsrs	r3, r3, #12
    88b6:	4462      	add	r2, ip
    88b8:	2100      	movs	r1, #0
    88ba:	0028      	movs	r0, r5
    88bc:	0d0d      	lsrs	r5, r1, #20
    88be:	052d      	lsls	r5, r5, #20
    88c0:	432b      	orrs	r3, r5
    88c2:	4d1c      	ldr	r5, [pc, #112]	; (8934 <__aeabi_f2d+0x9c>)
    88c4:	0552      	lsls	r2, r2, #21
    88c6:	402b      	ands	r3, r5
    88c8:	0852      	lsrs	r2, r2, #1
    88ca:	4313      	orrs	r3, r2
    88cc:	005b      	lsls	r3, r3, #1
    88ce:	07e4      	lsls	r4, r4, #31
    88d0:	085b      	lsrs	r3, r3, #1
    88d2:	4323      	orrs	r3, r4
    88d4:	0019      	movs	r1, r3
    88d6:	bd70      	pop	{r4, r5, r6, pc}
    88d8:	2a00      	cmp	r2, #0
    88da:	d115      	bne.n	8908 <__aeabi_f2d+0x70>
    88dc:	2d00      	cmp	r5, #0
    88de:	d01f      	beq.n	8920 <__aeabi_f2d+0x88>
    88e0:	0028      	movs	r0, r5
    88e2:	f000 f8b9 	bl	8a58 <__clzsi2>
    88e6:	280a      	cmp	r0, #10
    88e8:	dc1d      	bgt.n	8926 <__aeabi_f2d+0x8e>
    88ea:	230b      	movs	r3, #11
    88ec:	002a      	movs	r2, r5
    88ee:	1a1b      	subs	r3, r3, r0
    88f0:	40da      	lsrs	r2, r3
    88f2:	0013      	movs	r3, r2
    88f4:	0002      	movs	r2, r0
    88f6:	3215      	adds	r2, #21
    88f8:	4095      	lsls	r5, r2
    88fa:	4a0f      	ldr	r2, [pc, #60]	; (8938 <__aeabi_f2d+0xa0>)
    88fc:	031b      	lsls	r3, r3, #12
    88fe:	1a12      	subs	r2, r2, r0
    8900:	0552      	lsls	r2, r2, #21
    8902:	0b1b      	lsrs	r3, r3, #12
    8904:	0d52      	lsrs	r2, r2, #21
    8906:	e7d7      	b.n	88b8 <__aeabi_f2d+0x20>
    8908:	2d00      	cmp	r5, #0
    890a:	d006      	beq.n	891a <__aeabi_f2d+0x82>
    890c:	2280      	movs	r2, #128	; 0x80
    890e:	0b1b      	lsrs	r3, r3, #12
    8910:	0312      	lsls	r2, r2, #12
    8912:	4313      	orrs	r3, r2
    8914:	076d      	lsls	r5, r5, #29
    8916:	4a09      	ldr	r2, [pc, #36]	; (893c <__aeabi_f2d+0xa4>)
    8918:	e7ce      	b.n	88b8 <__aeabi_f2d+0x20>
    891a:	4a08      	ldr	r2, [pc, #32]	; (893c <__aeabi_f2d+0xa4>)
    891c:	2300      	movs	r3, #0
    891e:	e7cb      	b.n	88b8 <__aeabi_f2d+0x20>
    8920:	2200      	movs	r2, #0
    8922:	2300      	movs	r3, #0
    8924:	e7c8      	b.n	88b8 <__aeabi_f2d+0x20>
    8926:	0003      	movs	r3, r0
    8928:	3b0b      	subs	r3, #11
    892a:	409d      	lsls	r5, r3
    892c:	002b      	movs	r3, r5
    892e:	2500      	movs	r5, #0
    8930:	e7e3      	b.n	88fa <__aeabi_f2d+0x62>
    8932:	46c0      	nop			; (mov r8, r8)
    8934:	800fffff 	.word	0x800fffff
    8938:	00000389 	.word	0x00000389
    893c:	000007ff 	.word	0x000007ff

00008940 <__aeabi_d2f>:
    8940:	004b      	lsls	r3, r1, #1
    8942:	b570      	push	{r4, r5, r6, lr}
    8944:	0d5e      	lsrs	r6, r3, #21
    8946:	030c      	lsls	r4, r1, #12
    8948:	1c75      	adds	r5, r6, #1
    894a:	0a64      	lsrs	r4, r4, #9
    894c:	0f42      	lsrs	r2, r0, #29
    894e:	056d      	lsls	r5, r5, #21
    8950:	4322      	orrs	r2, r4
    8952:	0fc9      	lsrs	r1, r1, #31
    8954:	00c4      	lsls	r4, r0, #3
    8956:	0d6d      	lsrs	r5, r5, #21
    8958:	2d01      	cmp	r5, #1
    895a:	dd2a      	ble.n	89b2 <__aeabi_d2f+0x72>
    895c:	4b3b      	ldr	r3, [pc, #236]	; (8a4c <__aeabi_d2f+0x10c>)
    895e:	18f3      	adds	r3, r6, r3
    8960:	2bfe      	cmp	r3, #254	; 0xfe
    8962:	dc1a      	bgt.n	899a <__aeabi_d2f+0x5a>
    8964:	2b00      	cmp	r3, #0
    8966:	dd42      	ble.n	89ee <__aeabi_d2f+0xae>
    8968:	0180      	lsls	r0, r0, #6
    896a:	1e45      	subs	r5, r0, #1
    896c:	41a8      	sbcs	r0, r5
    896e:	00d2      	lsls	r2, r2, #3
    8970:	4310      	orrs	r0, r2
    8972:	0f62      	lsrs	r2, r4, #29
    8974:	4302      	orrs	r2, r0
    8976:	0750      	lsls	r0, r2, #29
    8978:	d004      	beq.n	8984 <__aeabi_d2f+0x44>
    897a:	200f      	movs	r0, #15
    897c:	4010      	ands	r0, r2
    897e:	2804      	cmp	r0, #4
    8980:	d000      	beq.n	8984 <__aeabi_d2f+0x44>
    8982:	3204      	adds	r2, #4
    8984:	2080      	movs	r0, #128	; 0x80
    8986:	04c0      	lsls	r0, r0, #19
    8988:	4010      	ands	r0, r2
    898a:	d021      	beq.n	89d0 <__aeabi_d2f+0x90>
    898c:	3301      	adds	r3, #1
    898e:	2bff      	cmp	r3, #255	; 0xff
    8990:	d003      	beq.n	899a <__aeabi_d2f+0x5a>
    8992:	0192      	lsls	r2, r2, #6
    8994:	0a52      	lsrs	r2, r2, #9
    8996:	b2db      	uxtb	r3, r3
    8998:	e001      	b.n	899e <__aeabi_d2f+0x5e>
    899a:	23ff      	movs	r3, #255	; 0xff
    899c:	2200      	movs	r2, #0
    899e:	0252      	lsls	r2, r2, #9
    89a0:	0a52      	lsrs	r2, r2, #9
    89a2:	05db      	lsls	r3, r3, #23
    89a4:	4313      	orrs	r3, r2
    89a6:	005b      	lsls	r3, r3, #1
    89a8:	07c9      	lsls	r1, r1, #31
    89aa:	085b      	lsrs	r3, r3, #1
    89ac:	430b      	orrs	r3, r1
    89ae:	0018      	movs	r0, r3
    89b0:	bd70      	pop	{r4, r5, r6, pc}
    89b2:	2e00      	cmp	r6, #0
    89b4:	d007      	beq.n	89c6 <__aeabi_d2f+0x86>
    89b6:	4314      	orrs	r4, r2
    89b8:	d0ef      	beq.n	899a <__aeabi_d2f+0x5a>
    89ba:	2080      	movs	r0, #128	; 0x80
    89bc:	00d2      	lsls	r2, r2, #3
    89be:	0480      	lsls	r0, r0, #18
    89c0:	4302      	orrs	r2, r0
    89c2:	23ff      	movs	r3, #255	; 0xff
    89c4:	e7d7      	b.n	8976 <__aeabi_d2f+0x36>
    89c6:	4322      	orrs	r2, r4
    89c8:	2300      	movs	r3, #0
    89ca:	2a00      	cmp	r2, #0
    89cc:	d003      	beq.n	89d6 <__aeabi_d2f+0x96>
    89ce:	2205      	movs	r2, #5
    89d0:	08d2      	lsrs	r2, r2, #3
    89d2:	2bff      	cmp	r3, #255	; 0xff
    89d4:	d003      	beq.n	89de <__aeabi_d2f+0x9e>
    89d6:	0252      	lsls	r2, r2, #9
    89d8:	0a52      	lsrs	r2, r2, #9
    89da:	b2db      	uxtb	r3, r3
    89dc:	e7df      	b.n	899e <__aeabi_d2f+0x5e>
    89de:	2a00      	cmp	r2, #0
    89e0:	d032      	beq.n	8a48 <__aeabi_d2f+0x108>
    89e2:	2080      	movs	r0, #128	; 0x80
    89e4:	03c0      	lsls	r0, r0, #15
    89e6:	4302      	orrs	r2, r0
    89e8:	0252      	lsls	r2, r2, #9
    89ea:	0a52      	lsrs	r2, r2, #9
    89ec:	e7d7      	b.n	899e <__aeabi_d2f+0x5e>
    89ee:	0018      	movs	r0, r3
    89f0:	3017      	adds	r0, #23
    89f2:	db14      	blt.n	8a1e <__aeabi_d2f+0xde>
    89f4:	2080      	movs	r0, #128	; 0x80
    89f6:	0400      	lsls	r0, r0, #16
    89f8:	4302      	orrs	r2, r0
    89fa:	201e      	movs	r0, #30
    89fc:	1ac0      	subs	r0, r0, r3
    89fe:	281f      	cmp	r0, #31
    8a00:	dc0f      	bgt.n	8a22 <__aeabi_d2f+0xe2>
    8a02:	0025      	movs	r5, r4
    8a04:	4b12      	ldr	r3, [pc, #72]	; (8a50 <__aeabi_d2f+0x110>)
    8a06:	18f3      	adds	r3, r6, r3
    8a08:	409d      	lsls	r5, r3
    8a0a:	1e6e      	subs	r6, r5, #1
    8a0c:	41b5      	sbcs	r5, r6
    8a0e:	409a      	lsls	r2, r3
    8a10:	002b      	movs	r3, r5
    8a12:	4313      	orrs	r3, r2
    8a14:	0022      	movs	r2, r4
    8a16:	40c2      	lsrs	r2, r0
    8a18:	431a      	orrs	r2, r3
    8a1a:	2300      	movs	r3, #0
    8a1c:	e7ab      	b.n	8976 <__aeabi_d2f+0x36>
    8a1e:	2300      	movs	r3, #0
    8a20:	e7d5      	b.n	89ce <__aeabi_d2f+0x8e>
    8a22:	2502      	movs	r5, #2
    8a24:	426d      	negs	r5, r5
    8a26:	1aeb      	subs	r3, r5, r3
    8a28:	0015      	movs	r5, r2
    8a2a:	40dd      	lsrs	r5, r3
    8a2c:	2820      	cmp	r0, #32
    8a2e:	d009      	beq.n	8a44 <__aeabi_d2f+0x104>
    8a30:	4b08      	ldr	r3, [pc, #32]	; (8a54 <__aeabi_d2f+0x114>)
    8a32:	18f3      	adds	r3, r6, r3
    8a34:	409a      	lsls	r2, r3
    8a36:	4314      	orrs	r4, r2
    8a38:	1e62      	subs	r2, r4, #1
    8a3a:	4194      	sbcs	r4, r2
    8a3c:	0022      	movs	r2, r4
    8a3e:	2300      	movs	r3, #0
    8a40:	432a      	orrs	r2, r5
    8a42:	e798      	b.n	8976 <__aeabi_d2f+0x36>
    8a44:	2200      	movs	r2, #0
    8a46:	e7f6      	b.n	8a36 <__aeabi_d2f+0xf6>
    8a48:	2200      	movs	r2, #0
    8a4a:	e7a8      	b.n	899e <__aeabi_d2f+0x5e>
    8a4c:	fffffc80 	.word	0xfffffc80
    8a50:	fffffc82 	.word	0xfffffc82
    8a54:	fffffca2 	.word	0xfffffca2

00008a58 <__clzsi2>:
    8a58:	211c      	movs	r1, #28
    8a5a:	2301      	movs	r3, #1
    8a5c:	041b      	lsls	r3, r3, #16
    8a5e:	4298      	cmp	r0, r3
    8a60:	d301      	bcc.n	8a66 <__clzsi2+0xe>
    8a62:	0c00      	lsrs	r0, r0, #16
    8a64:	3910      	subs	r1, #16
    8a66:	0a1b      	lsrs	r3, r3, #8
    8a68:	4298      	cmp	r0, r3
    8a6a:	d301      	bcc.n	8a70 <__clzsi2+0x18>
    8a6c:	0a00      	lsrs	r0, r0, #8
    8a6e:	3908      	subs	r1, #8
    8a70:	091b      	lsrs	r3, r3, #4
    8a72:	4298      	cmp	r0, r3
    8a74:	d301      	bcc.n	8a7a <__clzsi2+0x22>
    8a76:	0900      	lsrs	r0, r0, #4
    8a78:	3904      	subs	r1, #4
    8a7a:	a202      	add	r2, pc, #8	; (adr r2, 8a84 <__clzsi2+0x2c>)
    8a7c:	5c10      	ldrb	r0, [r2, r0]
    8a7e:	1840      	adds	r0, r0, r1
    8a80:	4770      	bx	lr
    8a82:	46c0      	nop			; (mov r8, r8)
    8a84:	02020304 	.word	0x02020304
    8a88:	01010101 	.word	0x01010101
	...
    8a94:	0000023e 	.word	0x0000023e
    8a98:	0000024c 	.word	0x0000024c
    8a9c:	0000025a 	.word	0x0000025a
    8aa0:	00000276 	.word	0x00000276
    8aa4:	00000268 	.word	0x00000268
    8aa8:	41525453 	.word	0x41525453
    8aac:	00000000 	.word	0x00000000
    8ab0:	5446454c 	.word	0x5446454c
    8ab4:	00000000 	.word	0x00000000
    8ab8:	48474952 	.word	0x48474952
    8abc:	00000000 	.word	0x00000000
    8ac0:	4b434142 	.word	0x4b434142
    8ac4:	00000000 	.word	0x00000000
    8ac8:	0000776d 	.word	0x0000776d
    8acc:	00000000 	.word	0x00000000
    8ad0:	0000616d 	.word	0x0000616d
    8ad4:	00000000 	.word	0x00000000
    8ad8:	0000646d 	.word	0x0000646d
    8adc:	00000000 	.word	0x00000000
    8ae0:	0000736d 	.word	0x0000736d
    8ae4:	00000000 	.word	0x00000000
    8ae8:	0000206d 	.word	0x0000206d
    8aec:	00000000 	.word	0x00000000
    8af0:	322e3525 	.word	0x322e3525
    8af4:	25202c66 	.word	0x25202c66
    8af8:	66322e35 	.word	0x66322e35
    8afc:	3525202c 	.word	0x3525202c
    8b00:	0a66322e 	.word	0x0a66322e
    8b04:	00000000 	.word	0x00000000

00008b08 <_tcc_intflag>:
    8b08:	00000001 00000002 00000004 00000008     ................
    8b18:	00001000 00002000 00004000 00008000     ..... ...@......
    8b28:	00010000 00020000 00040000 00080000     ................
    8b38:	0000776d 00000000 0000206d 00000000     mw......m ......
    8b48:	504f5453 00000000                       STOP....

00008b50 <tc_interrupt_vectors.12761>:
    8b50:	00141312 42000800 42000c00 42001000     .......B...B...B
    8b60:	42001400 42001800 42001c00 0c0b0a09     ...B...B...B....
    8b70:	00000e0d 00001bca 00001bc6 00001bc6     ................
    8b80:	00001c24 00001c24 00001bde 00001bd0     $...$...........
    8b90:	00001be4 00001c12 00001e94 00001e74     ............t...
    8ba0:	00001e74 00001f00 00001e86 00001ea2     t...............
    8bb0:	00001e78 00001eb0 00001ef0 42002c00     x............,.B
    8bc0:	42003000 42003400 001c1c1b 10000800     .0.B.4.B........
    8bd0:	00002000                                . ..

00008bd4 <tc_interrupt_vectors.11902>:
    8bd4:	00141312 6e6f7266 6f6e2074 73206564     ....front node s
    8be4:	70757465 6d6f6320 74656c70 00000065     etup complete...
    8bf4:	00000043                                C...

00008bf8 <_global_impure_ptr>:
    8bf8:	2000000c 00464e49 00666e69 004e414e     ... INF.inf.NAN.
    8c08:	006e616e 31300030 35343332 39383736     nan.0.0123456789
    8c18:	44434241 30004645 34333231 38373635     ABCDEF.012345678
    8c28:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
    8c38:	4e614e00 00000000                       .NaN....

00008c40 <__sf_fake_stdin>:
	...

00008c60 <__sf_fake_stdout>:
	...

00008c80 <__sf_fake_stderr>:
	...
    8ca0:	49534f50 002e0058                       POSIX...

00008ca8 <__mprec_tens>:
    8ca8:	00000000 3ff00000 00000000 40240000     .......?......$@
    8cb8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    8cc8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    8cd8:	00000000 412e8480 00000000 416312d0     .......A......cA
    8ce8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    8cf8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    8d08:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    8d18:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    8d28:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    8d38:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    8d48:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    8d58:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    8d68:	79d99db4 44ea7843                       ...yCx.D

00008d70 <__mprec_bigtens>:
    8d70:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    8d80:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    8d90:	7f73bf3c 75154fdd                       <.s..O.u

00008d98 <p05.5385>:
    8d98:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    8da8:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....
    8db8:	000067c2 000066e6 000067a4 0000677c     .g...f...g..|g..
    8dc8:	000067a4 00006770 000067a4 0000677c     .g..pg...g..|g..
    8dd8:	000066e6 000066e6 00006770 0000677c     .f...f..pg..|g..
    8de8:	00006828 00006828 00006828 000067aa     (h..(h..(h...g..
    8df8:	000066e6 000066e6 00006790 0000677a     .f...f...g..zg..
    8e08:	00006790 00006770 00006790 0000677a     .g..pg...g..zg..
    8e18:	000066e6 000066e6 00006770 0000677a     .f...f..pg..zg..
    8e28:	00006828 00006828 00006828 00006834     (h..(h..(h..4h..
    8e38:	00006b20 00006a7e 00006a7e 00006a7c      k..~j..~j..|j..
    8e48:	00006b12 00006b12 00006b08 00006a7c     .k...k...k..|j..
    8e58:	00006b12 00006b08 00006b12 00006a7c     .k...k...k..|j..
    8e68:	00006b18 00006b18 00006b18 00006ba2     .k...k...k...k..
    8e78:	00007504 000073d2 000074d8 000073c8     .u...s...t...s..
    8e88:	000074d8 000074e2 000074d8 000073c8     .t...t...t...s..
    8e98:	000073d2 000073d2 000074e2 000073c8     .s...s...t...s..
    8ea8:	000073be 000073be 000073be 00007734     .s...s...s..4w..
    8eb8:	00007d4c 00007c0c 00007c0c 00007c0a     L}...|...|...|..
    8ec8:	00007d24 00007d24 00007d16 00007c0a     $}..$}...}...|..
    8ed8:	00007d24 00007d16 00007d24 00007c0a     $}...}..$}...|..
    8ee8:	00007d2c 00007d2c 00007d2c 00007f2c     ,}..,}..,}..,...

00008ef8 <_init>:
    8ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8efa:	46c0      	nop			; (mov r8, r8)
    8efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8efe:	bc08      	pop	{r3}
    8f00:	469e      	mov	lr, r3
    8f02:	4770      	bx	lr

00008f04 <__init_array_start>:
    8f04:	000000dd 	.word	0x000000dd

00008f08 <_fini>:
    8f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8f0a:	46c0      	nop			; (mov r8, r8)
    8f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8f0e:	bc08      	pop	{r3}
    8f10:	469e      	mov	lr, r3
    8f12:	4770      	bx	lr

00008f14 <__fini_array_start>:
    8f14:	000000b5 	.word	0x000000b5
