
front.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008e58  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001dc  20000000  00008e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000844  200001dc  00009034  000201dc  2**2
                  ALLOC
  3 .stack        00002000  20000a20  00009878  000201dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  5 .comment      0000008c  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005febd  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00008577  00000000  00000000  0008014d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e471  00000000  00000000  000886c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c18  00000000  00000000  00096b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001418  00000000  00000000  0009774d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000226bb  00000000  00000000  00098b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001cde2  00000000  00000000  000bb220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a239  00000000  00000000  000d8002  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002d28  00000000  00000000  0016223c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	20 2a 00 20 9d 26 00 00 99 26 00 00 99 26 00 00      *. .&...&...&..
	...
      2c:	99 26 00 00 00 00 00 00 00 00 00 00 99 26 00 00     .&...........&..
      3c:	99 26 00 00 99 26 00 00 99 26 00 00 99 26 00 00     .&...&...&...&..
      4c:	99 26 00 00 dd 09 00 00 99 26 00 00 99 26 00 00     .&.......&...&..
      5c:	99 26 00 00 99 26 00 00 c9 0f 00 00 d9 0f 00 00     .&...&..........
      6c:	e9 0f 00 00 f9 0f 00 00 09 10 00 00 19 10 00 00     ................
      7c:	59 04 00 00 69 04 00 00 79 04 00 00 79 23 00 00     Y...i...y...y#..
      8c:	89 23 00 00 99 23 00 00 00 00 00 00 00 00 00 00     .#...#..........
      9c:	99 26 00 00 99 26 00 00 00 00 00 00 99 26 00 00     .&...&.......&..
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001dc 	.word	0x200001dc
      d4:	00000000 	.word	0x00000000
      d8:	00008e58 	.word	0x00008e58

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001e0 	.word	0x200001e0
     108:	00008e58 	.word	0x00008e58
     10c:	00008e58 	.word	0x00008e58
     110:	00000000 	.word	0x00000000

00000114 <artist_init_maze>:
*/

#include "Maze.h"

void artist_init_maze (void) {
	artist_front.maze_status = STOP;
     114:	2103      	movs	r1, #3
     116:	23d8      	movs	r3, #216	; 0xd8
     118:	4a01      	ldr	r2, [pc, #4]	; (120 <artist_init_maze+0xc>)
     11a:	54d1      	strb	r1, [r2, r3]
}
     11c:	4770      	bx	lr
     11e:	46c0      	nop			; (mov r8, r8)
     120:	200007b4 	.word	0x200007b4

00000124 <artist_do_maze>:
void artist_do_maze (void) {
     124:	b510      	push	{r4, lr}
	if (artist_front.center_distance < 12) {
     126:	4926      	ldr	r1, [pc, #152]	; (1c0 <artist_do_maze+0x9c>)
     128:	23cc      	movs	r3, #204	; 0xcc
     12a:	4a26      	ldr	r2, [pc, #152]	; (1c4 <artist_do_maze+0xa0>)
     12c:	58d0      	ldr	r0, [r2, r3]
     12e:	4b26      	ldr	r3, [pc, #152]	; (1c8 <artist_do_maze+0xa4>)
     130:	4798      	blx	r3
     132:	2800      	cmp	r0, #0
     134:	d038      	beq.n	1a8 <artist_do_maze+0x84>
		if (artist_front.left_distance < 12 && artist_front.right_distance < 12) { 
     136:	23d0      	movs	r3, #208	; 0xd0
     138:	4a22      	ldr	r2, [pc, #136]	; (1c4 <artist_do_maze+0xa0>)
     13a:	58d4      	ldr	r4, [r2, r3]
     13c:	4920      	ldr	r1, [pc, #128]	; (1c0 <artist_do_maze+0x9c>)
     13e:	1c20      	adds	r0, r4, #0
     140:	4b21      	ldr	r3, [pc, #132]	; (1c8 <artist_do_maze+0xa4>)
     142:	4798      	blx	r3
     144:	2800      	cmp	r0, #0
     146:	d011      	beq.n	16c <artist_do_maze+0x48>
     148:	491d      	ldr	r1, [pc, #116]	; (1c0 <artist_do_maze+0x9c>)
     14a:	23d4      	movs	r3, #212	; 0xd4
     14c:	4a1d      	ldr	r2, [pc, #116]	; (1c4 <artist_do_maze+0xa0>)
     14e:	58d0      	ldr	r0, [r2, r3]
     150:	4b1d      	ldr	r3, [pc, #116]	; (1c8 <artist_do_maze+0xa4>)
     152:	4798      	blx	r3
     154:	2800      	cmp	r0, #0
     156:	d009      	beq.n	16c <artist_do_maze+0x48>
			artist_front.maze_status = BACK; 
     158:	481a      	ldr	r0, [pc, #104]	; (1c4 <artist_do_maze+0xa0>)
     15a:	2204      	movs	r2, #4
     15c:	23d8      	movs	r3, #216	; 0xd8
     15e:	54c2      	strb	r2, [r0, r3]
		break;
		case RIGHT :
		usart_write_buffer_job(&(artist_front.usart_instance), "md\0\0\0", MAX_RX_BUFFER_LENGTH);
		break;
		case BACK :
		usart_write_buffer_job(&(artist_front.usart_instance), "ms\0\0\0", MAX_RX_BUFFER_LENGTH);
     160:	3078      	adds	r0, #120	; 0x78
     162:	3201      	adds	r2, #1
     164:	4919      	ldr	r1, [pc, #100]	; (1cc <artist_do_maze+0xa8>)
     166:	4b1a      	ldr	r3, [pc, #104]	; (1d0 <artist_do_maze+0xac>)
     168:	4798      	blx	r3
		break;
     16a:	e027      	b.n	1bc <artist_do_maze+0x98>
		else if  (artist_front.left_distance < artist_front.right_distance) {
     16c:	23d4      	movs	r3, #212	; 0xd4
     16e:	4a15      	ldr	r2, [pc, #84]	; (1c4 <artist_do_maze+0xa0>)
     170:	58d1      	ldr	r1, [r2, r3]
     172:	1c20      	adds	r0, r4, #0
     174:	4b14      	ldr	r3, [pc, #80]	; (1c8 <artist_do_maze+0xa4>)
     176:	4798      	blx	r3
     178:	2800      	cmp	r0, #0
     17a:	d00a      	beq.n	192 <artist_do_maze+0x6e>
			artist_front.maze_status = RIGHT;
     17c:	4811      	ldr	r0, [pc, #68]	; (1c4 <artist_do_maze+0xa0>)
     17e:	2202      	movs	r2, #2
     180:	23d8      	movs	r3, #216	; 0xd8
     182:	54c2      	strb	r2, [r0, r3]
		usart_write_buffer_job(&(artist_front.usart_instance), "md\0\0\0", MAX_RX_BUFFER_LENGTH);
     184:	3078      	adds	r0, #120	; 0x78
     186:	3203      	adds	r2, #3
     188:	4910      	ldr	r1, [pc, #64]	; (1cc <artist_do_maze+0xa8>)
     18a:	3108      	adds	r1, #8
     18c:	4b10      	ldr	r3, [pc, #64]	; (1d0 <artist_do_maze+0xac>)
     18e:	4798      	blx	r3
		break;
     190:	e014      	b.n	1bc <artist_do_maze+0x98>
			artist_front.maze_status = LEFT;
     192:	480c      	ldr	r0, [pc, #48]	; (1c4 <artist_do_maze+0xa0>)
     194:	2201      	movs	r2, #1
     196:	23d8      	movs	r3, #216	; 0xd8
     198:	54c2      	strb	r2, [r0, r3]
		usart_write_buffer_job(&(artist_front.usart_instance), "ma\0\0\0", MAX_RX_BUFFER_LENGTH);
     19a:	3078      	adds	r0, #120	; 0x78
     19c:	3204      	adds	r2, #4
     19e:	490b      	ldr	r1, [pc, #44]	; (1cc <artist_do_maze+0xa8>)
     1a0:	3110      	adds	r1, #16
     1a2:	4b0b      	ldr	r3, [pc, #44]	; (1d0 <artist_do_maze+0xac>)
     1a4:	4798      	blx	r3
		break;
     1a6:	e009      	b.n	1bc <artist_do_maze+0x98>
		artist_front.maze_status = STRIGHT;
     1a8:	4806      	ldr	r0, [pc, #24]	; (1c4 <artist_do_maze+0xa0>)
     1aa:	2200      	movs	r2, #0
     1ac:	23d8      	movs	r3, #216	; 0xd8
     1ae:	54c2      	strb	r2, [r0, r3]
		usart_write_buffer_job(&(artist_front.usart_instance), "mw\0\0\0", MAX_RX_BUFFER_LENGTH);
     1b0:	3078      	adds	r0, #120	; 0x78
     1b2:	3205      	adds	r2, #5
     1b4:	4905      	ldr	r1, [pc, #20]	; (1cc <artist_do_maze+0xa8>)
     1b6:	3118      	adds	r1, #24
     1b8:	4b05      	ldr	r3, [pc, #20]	; (1d0 <artist_do_maze+0xac>)
     1ba:	4798      	blx	r3
	}
	

}
     1bc:	bd10      	pop	{r4, pc}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	41400000 	.word	0x41400000
     1c4:	200007b4 	.word	0x200007b4
     1c8:	00006175 	.word	0x00006175
     1cc:	00008940 	.word	0x00008940
     1d0:	00001861 	.word	0x00001861

000001d4 <artist_ultrasonic_configure>:
 */
#include "TheArtist.h"
#include "UltraSonic.h"

void artist_ultrasonic_configure (struct artist_ultrasonic_module * module, uint8_t echo, uint8_t trig) {
	module->echo_pin	= echo; 
     1d4:	7001      	strb	r1, [r0, #0]
	module->trigger_pin = trig;  
     1d6:	7042      	strb	r2, [r0, #1]
	module->filter_large_change_counts = 0; 
     1d8:	2300      	movs	r3, #0
     1da:	7083      	strb	r3, [r0, #2]
	module->fliter_old_val = 0; 
     1dc:	2300      	movs	r3, #0
     1de:	6043      	str	r3, [r0, #4]
}
     1e0:	4770      	bx	lr
	...

000001e4 <artist_ultrasonic_gpio_init>:

void artist_ultrasonic_gpio_init() {
     1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1e6:	b085      	sub	sp, #20
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1e8:	a903      	add	r1, sp, #12
     1ea:	2201      	movs	r2, #1
     1ec:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     1ee:	2300      	movs	r3, #0
     1f0:	708b      	strb	r3, [r1, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     1f2:	ad02      	add	r5, sp, #8
     1f4:	702b      	strb	r3, [r5, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     1f6:	706a      	strb	r2, [r5, #1]
	config->powersave  = false;
     1f8:	70ab      	strb	r3, [r5, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     1fa:	4668      	mov	r0, sp
     1fc:	7003      	strb	r3, [r0, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     1fe:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
     200:	7083      	strb	r3, [r0, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     202:	ac01      	add	r4, sp, #4
     204:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     206:	7062      	strb	r2, [r4, #1]
	config->powersave  = false;
     208:	70a3      	strb	r3, [r4, #2]
	port_get_config_defaults(&pin_config_trig);
	port_get_config_defaults(&pin_config_echo_center);
	port_get_config_defaults(&pin_config_echo_right);
	port_get_config_defaults(&pin_config_echo_left);

	pin_config_trig.direction			=	PORT_PIN_DIR_OUTPUT;
     20a:	700a      	strb	r2, [r1, #0]
	
	pin_config_echo_right.direction		=	PORT_PIN_DIR_INPUT;
	pin_config_echo_right.input_pull	=	PORT_PIN_PULL_UP;
	
	
	port_pin_set_config(artist_front.us_instance_center.trigger_pin, &pin_config_trig);
     20c:	4f09      	ldr	r7, [pc, #36]	; (234 <artist_ultrasonic_gpio_init+0x50>)
     20e:	33b5      	adds	r3, #181	; 0xb5
     210:	5cf8      	ldrb	r0, [r7, r3]
     212:	4e09      	ldr	r6, [pc, #36]	; (238 <artist_ultrasonic_gpio_init+0x54>)
     214:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_center.echo_pin, &pin_config_echo_center);
     216:	23b4      	movs	r3, #180	; 0xb4
     218:	5cf8      	ldrb	r0, [r7, r3]
     21a:	0029      	movs	r1, r5
     21c:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_left.echo_pin, &pin_config_echo_left);
     21e:	23bc      	movs	r3, #188	; 0xbc
     220:	5cf8      	ldrb	r0, [r7, r3]
     222:	0021      	movs	r1, r4
     224:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_right.echo_pin, &pin_config_echo_right); 
     226:	23c4      	movs	r3, #196	; 0xc4
     228:	5cf8      	ldrb	r0, [r7, r3]
     22a:	4669      	mov	r1, sp
     22c:	47b0      	blx	r6
}
     22e:	b005      	add	sp, #20
     230:	bdf0      	pop	{r4, r5, r6, r7, pc}
     232:	46c0      	nop			; (mov r8, r8)
     234:	200007b4 	.word	0x200007b4
     238:	00000b41 	.word	0x00000b41

0000023c <artist_ultrasonic_get_value>:
	printf("%5.2f, %5.2f, %5.2f\n", 
				artist_front.left_distance, 
				artist_front.center_distance, 
				artist_front.right_distance);  
}
float artist_ultrasonic_get_value(struct artist_ultrasonic_module * const module) {
     23c:	b5f0      	push	{r4, r5, r6, r7, lr}
     23e:	b083      	sub	sp, #12
     240:	0004      	movs	r4, r0
	// TODO : use timer callback function!
	uint16_t start, end;
	uint16_t count = 0;
	
	port_pin_set_output_level(module->trigger_pin, false);
     242:	7842      	ldrb	r2, [r0, #1]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     244:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     246:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     248:	2900      	cmp	r1, #0
     24a:	d104      	bne.n	256 <artist_ultrasonic_get_value+0x1a>
		return &(ports[port_index]->Group[group_index]);
     24c:	0953      	lsrs	r3, r2, #5
     24e:	01db      	lsls	r3, r3, #7
     250:	495c      	ldr	r1, [pc, #368]	; (3c4 <artist_ultrasonic_get_value+0x188>)
     252:	468c      	mov	ip, r1
     254:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     256:	211f      	movs	r1, #31
     258:	4011      	ands	r1, r2
     25a:	2201      	movs	r2, #1
     25c:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     25e:	615a      	str	r2, [r3, #20]
	delay_us(40);
     260:	2028      	movs	r0, #40	; 0x28
     262:	4b59      	ldr	r3, [pc, #356]	; (3c8 <artist_ultrasonic_get_value+0x18c>)
     264:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, true);
     266:	7862      	ldrb	r2, [r4, #1]
	if (port_index < PORT_INST_NUM) {
     268:	09d1      	lsrs	r1, r2, #7
		return NULL;
     26a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     26c:	2900      	cmp	r1, #0
     26e:	d104      	bne.n	27a <artist_ultrasonic_get_value+0x3e>
		return &(ports[port_index]->Group[group_index]);
     270:	0953      	lsrs	r3, r2, #5
     272:	01db      	lsls	r3, r3, #7
     274:	4953      	ldr	r1, [pc, #332]	; (3c4 <artist_ultrasonic_get_value+0x188>)
     276:	468c      	mov	ip, r1
     278:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     27a:	211f      	movs	r1, #31
     27c:	4011      	ands	r1, r2
     27e:	2201      	movs	r2, #1
     280:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     282:	619a      	str	r2, [r3, #24]
	delay_us(10);
     284:	200a      	movs	r0, #10
     286:	4b50      	ldr	r3, [pc, #320]	; (3c8 <artist_ultrasonic_get_value+0x18c>)
     288:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, false);
     28a:	7862      	ldrb	r2, [r4, #1]
	if (port_index < PORT_INST_NUM) {
     28c:	09d1      	lsrs	r1, r2, #7
		return NULL;
     28e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     290:	2900      	cmp	r1, #0
     292:	d104      	bne.n	29e <artist_ultrasonic_get_value+0x62>
		return &(ports[port_index]->Group[group_index]);
     294:	0953      	lsrs	r3, r2, #5
     296:	01db      	lsls	r3, r3, #7
     298:	494a      	ldr	r1, [pc, #296]	; (3c4 <artist_ultrasonic_get_value+0x188>)
     29a:	468c      	mov	ip, r1
     29c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     29e:	211f      	movs	r1, #31
     2a0:	4011      	ands	r1, r2
     2a2:	2201      	movs	r2, #1
     2a4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     2a6:	615a      	str	r2, [r3, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2a8:	4b48      	ldr	r3, [pc, #288]	; (3cc <artist_ultrasonic_get_value+0x190>)
     2aa:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     2ac:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     2ae:	b25b      	sxtb	r3, r3
     2b0:	2b00      	cmp	r3, #0
     2b2:	dbfb      	blt.n	2ac <artist_ultrasonic_get_value+0x70>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
     2b4:	2300      	movs	r3, #0
     2b6:	7113      	strb	r3, [r2, #4]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     2b8:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     2ba:	b25b      	sxtb	r3, r3
     2bc:	2b00      	cmp	r3, #0
     2be:	dbfb      	blt.n	2b8 <artist_ultrasonic_get_value+0x7c>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
     2c0:	2340      	movs	r3, #64	; 0x40
     2c2:	7153      	strb	r3, [r2, #5]
	tc_start_counter(&(artist_front.tc_instance_ultrasonic)); 
	while (!(port_pin_get_input_level(module->echo_pin))) {
     2c4:	7823      	ldrb	r3, [r4, #0]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2c6:	221f      	movs	r2, #31
     2c8:	401a      	ands	r2, r3
     2ca:	2001      	movs	r0, #1
     2cc:	4090      	lsls	r0, r2
     2ce:	09da      	lsrs	r2, r3, #7
     2d0:	2100      	movs	r1, #0
     2d2:	2a00      	cmp	r2, #0
     2d4:	d104      	bne.n	2e0 <artist_ultrasonic_get_value+0xa4>
     2d6:	0959      	lsrs	r1, r3, #5
     2d8:	01c9      	lsls	r1, r1, #7
     2da:	4b3a      	ldr	r3, [pc, #232]	; (3c4 <artist_ultrasonic_get_value+0x188>)
     2dc:	469c      	mov	ip, r3
     2de:	4461      	add	r1, ip
     2e0:	4b3b      	ldr	r3, [pc, #236]	; (3d0 <artist_ultrasonic_get_value+0x194>)
	return (port_base->IN.reg & pin_mask);
     2e2:	6a0a      	ldr	r2, [r1, #32]
     2e4:	4202      	tst	r2, r0
     2e6:	d105      	bne.n	2f4 <artist_ultrasonic_get_value+0xb8>
     2e8:	3b01      	subs	r3, #1
     2ea:	b29b      	uxth	r3, r3
		count ++;
		if (count > 0xFF00) return module->fliter_old_val; 
     2ec:	2b00      	cmp	r3, #0
     2ee:	d1f8      	bne.n	2e2 <artist_ultrasonic_get_value+0xa6>
     2f0:	6860      	ldr	r0, [r4, #4]
     2f2:	e062      	b.n	3ba <artist_ultrasonic_get_value+0x17e>
	}
	count =0; 
	start = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
     2f4:	4835      	ldr	r0, [pc, #212]	; (3cc <artist_ultrasonic_get_value+0x190>)
     2f6:	4b37      	ldr	r3, [pc, #220]	; (3d4 <artist_ultrasonic_get_value+0x198>)
     2f8:	4798      	blx	r3
     2fa:	0005      	movs	r5, r0
	while ((port_pin_get_input_level(module->echo_pin)))  {
     2fc:	7823      	ldrb	r3, [r4, #0]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2fe:	221f      	movs	r2, #31
     300:	401a      	ands	r2, r3
     302:	2001      	movs	r0, #1
     304:	4090      	lsls	r0, r2
     306:	09da      	lsrs	r2, r3, #7
     308:	2100      	movs	r1, #0
     30a:	2a00      	cmp	r2, #0
     30c:	d104      	bne.n	318 <artist_ultrasonic_get_value+0xdc>
     30e:	0959      	lsrs	r1, r3, #5
     310:	01c9      	lsls	r1, r1, #7
     312:	4b2c      	ldr	r3, [pc, #176]	; (3c4 <artist_ultrasonic_get_value+0x188>)
     314:	469c      	mov	ip, r3
     316:	4461      	add	r1, ip
     318:	4b2d      	ldr	r3, [pc, #180]	; (3d0 <artist_ultrasonic_get_value+0x194>)
	return (port_base->IN.reg & pin_mask);
     31a:	6a0a      	ldr	r2, [r1, #32]
     31c:	4202      	tst	r2, r0
     31e:	d005      	beq.n	32c <artist_ultrasonic_get_value+0xf0>
     320:	3b01      	subs	r3, #1
     322:	b29b      	uxth	r3, r3
		count ++;
		if (count > 0xFF00) return module->fliter_old_val;  
     324:	2b00      	cmp	r3, #0
     326:	d1f8      	bne.n	31a <artist_ultrasonic_get_value+0xde>
     328:	6860      	ldr	r0, [r4, #4]
     32a:	e046      	b.n	3ba <artist_ultrasonic_get_value+0x17e>
	}
	end = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
     32c:	4e27      	ldr	r6, [pc, #156]	; (3cc <artist_ultrasonic_get_value+0x190>)
     32e:	0030      	movs	r0, r6
     330:	4b28      	ldr	r3, [pc, #160]	; (3d4 <artist_ultrasonic_get_value+0x198>)
     332:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     334:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     336:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     338:	b25b      	sxtb	r3, r3
     33a:	2b00      	cmp	r3, #0
     33c:	dbfb      	blt.n	336 <artist_ultrasonic_get_value+0xfa>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
     33e:	2380      	movs	r3, #128	; 0x80
     340:	7153      	strb	r3, [r2, #5]
	tc_stop_counter(&(artist_front.tc_instance_ultrasonic));

	float new = ((float)(end - start)) * 0.017;
     342:	0400      	lsls	r0, r0, #16
     344:	0c00      	lsrs	r0, r0, #16
     346:	042d      	lsls	r5, r5, #16
     348:	0c2d      	lsrs	r5, r5, #16
     34a:	1b40      	subs	r0, r0, r5
     34c:	4f22      	ldr	r7, [pc, #136]	; (3d8 <artist_ultrasonic_get_value+0x19c>)
     34e:	47b8      	blx	r7
     350:	4b22      	ldr	r3, [pc, #136]	; (3dc <artist_ultrasonic_get_value+0x1a0>)
     352:	4798      	blx	r3
     354:	4a22      	ldr	r2, [pc, #136]	; (3e0 <artist_ultrasonic_get_value+0x1a4>)
     356:	4b23      	ldr	r3, [pc, #140]	; (3e4 <artist_ultrasonic_get_value+0x1a8>)
     358:	4d23      	ldr	r5, [pc, #140]	; (3e8 <artist_ultrasonic_get_value+0x1ac>)
     35a:	47a8      	blx	r5
     35c:	4b23      	ldr	r3, [pc, #140]	; (3ec <artist_ultrasonic_get_value+0x1b0>)
     35e:	4798      	blx	r3
     360:	9001      	str	r0, [sp, #4]
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     362:	6865      	ldr	r5, [r4, #4]
	if (new > old * module->filter_large_change_counts ||
     364:	78a6      	ldrb	r6, [r4, #2]
     366:	0030      	movs	r0, r6
     368:	47b8      	blx	r7
     36a:	1c07      	adds	r7, r0, #0
     36c:	1c01      	adds	r1, r0, #0
     36e:	1c28      	adds	r0, r5, #0
     370:	4b1f      	ldr	r3, [pc, #124]	; (3f0 <artist_ultrasonic_get_value+0x1b4>)
     372:	4798      	blx	r3
     374:	1c01      	adds	r1, r0, #0
     376:	9801      	ldr	r0, [sp, #4]
     378:	4b1e      	ldr	r3, [pc, #120]	; (3f4 <artist_ultrasonic_get_value+0x1b8>)
     37a:	4798      	blx	r3
     37c:	2800      	cmp	r0, #0
     37e:	d109      	bne.n	394 <artist_ultrasonic_get_value+0x158>
	new < old * 1/module->filter_large_change_counts ) {
     380:	1c39      	adds	r1, r7, #0
     382:	1c28      	adds	r0, r5, #0
     384:	4b1c      	ldr	r3, [pc, #112]	; (3f8 <artist_ultrasonic_get_value+0x1bc>)
     386:	4798      	blx	r3
     388:	1c01      	adds	r1, r0, #0
	if (new > old * module->filter_large_change_counts ||
     38a:	9801      	ldr	r0, [sp, #4]
     38c:	4b1b      	ldr	r3, [pc, #108]	; (3fc <artist_ultrasonic_get_value+0x1c0>)
     38e:	4798      	blx	r3
     390:	2800      	cmp	r0, #0
     392:	d005      	beq.n	3a0 <artist_ultrasonic_get_value+0x164>
		module->filter_large_change_counts ++;
     394:	1c73      	adds	r3, r6, #1
     396:	b2db      	uxtb	r3, r3
		if (module->filter_large_change_counts > 3)		
     398:	2b03      	cmp	r3, #3
     39a:	d810      	bhi.n	3be <artist_ultrasonic_get_value+0x182>
		module->filter_large_change_counts ++;
     39c:	70a3      	strb	r3, [r4, #2]
			new = old;
     39e:	9501      	str	r5, [sp, #4]
	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
     3a0:	4f13      	ldr	r7, [pc, #76]	; (3f0 <artist_ultrasonic_get_value+0x1b4>)
     3a2:	4917      	ldr	r1, [pc, #92]	; (400 <artist_ultrasonic_get_value+0x1c4>)
     3a4:	9801      	ldr	r0, [sp, #4]
     3a6:	47b8      	blx	r7
     3a8:	1c06      	adds	r6, r0, #0
     3aa:	4916      	ldr	r1, [pc, #88]	; (404 <artist_ultrasonic_get_value+0x1c8>)
     3ac:	1c28      	adds	r0, r5, #0
     3ae:	47b8      	blx	r7
     3b0:	1c01      	adds	r1, r0, #0
     3b2:	1c30      	adds	r0, r6, #0
     3b4:	4b14      	ldr	r3, [pc, #80]	; (408 <artist_ultrasonic_get_value+0x1cc>)
     3b6:	4798      	blx	r3
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     3b8:	6060      	str	r0, [r4, #4]
	return module->fliter_old_val;
}
     3ba:	b003      	add	sp, #12
     3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			module->filter_large_change_counts = 0;
     3be:	2300      	movs	r3, #0
     3c0:	70a3      	strb	r3, [r4, #2]
     3c2:	e7ed      	b.n	3a0 <artist_ultrasonic_get_value+0x164>
     3c4:	41004400 	.word	0x41004400
     3c8:	00000841 	.word	0x00000841
     3cc:	200007b4 	.word	0x200007b4
     3d0:	0000ff01 	.word	0x0000ff01
     3d4:	0000261d 	.word	0x0000261d
     3d8:	00006b5d 	.word	0x00006b5d
     3dc:	0000874d 	.word	0x0000874d
     3e0:	b020c49c 	.word	0xb020c49c
     3e4:	3f916872 	.word	0x3f916872
     3e8:	00007a85 	.word	0x00007a85
     3ec:	000087f1 	.word	0x000087f1
     3f0:	0000691d 	.word	0x0000691d
     3f4:	0000619d 	.word	0x0000619d
     3f8:	0000653d 	.word	0x0000653d
     3fc:	00006175 	.word	0x00006175
     400:	3ecccccc 	.word	0x3ecccccc
     404:	3f19999a 	.word	0x3f19999a
     408:	00006219 	.word	0x00006219

0000040c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     40c:	b5f0      	push	{r4, r5, r6, r7, lr}
     40e:	46c6      	mov	lr, r8
     410:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     412:	0080      	lsls	r0, r0, #2
     414:	4b0e      	ldr	r3, [pc, #56]	; (450 <_tcc_interrupt_handler+0x44>)
     416:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     418:	683b      	ldr	r3, [r7, #0]
     41a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     41e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     420:	4013      	ands	r3, r2
     422:	401e      	ands	r6, r3
     424:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     426:	4b0b      	ldr	r3, [pc, #44]	; (454 <_tcc_interrupt_handler+0x48>)
     428:	4698      	mov	r8, r3
     42a:	e002      	b.n	432 <_tcc_interrupt_handler+0x26>
     42c:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     42e:	2c30      	cmp	r4, #48	; 0x30
     430:	d00a      	beq.n	448 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     432:	4643      	mov	r3, r8
     434:	58e5      	ldr	r5, [r4, r3]
     436:	4235      	tst	r5, r6
     438:	d0f8      	beq.n	42c <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     43a:	193b      	adds	r3, r7, r4
     43c:	685b      	ldr	r3, [r3, #4]
     43e:	0038      	movs	r0, r7
     440:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     442:	683b      	ldr	r3, [r7, #0]
     444:	62dd      	str	r5, [r3, #44]	; 0x2c
     446:	e7f1      	b.n	42c <_tcc_interrupt_handler+0x20>
		}
	}
}
     448:	bc04      	pop	{r2}
     44a:	4690      	mov	r8, r2
     44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     44e:	46c0      	nop			; (mov r8, r8)
     450:	20000898 	.word	0x20000898
     454:	00008960 	.word	0x00008960

00000458 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     458:	b510      	push	{r4, lr}
     45a:	2000      	movs	r0, #0
     45c:	4b01      	ldr	r3, [pc, #4]	; (464 <TCC0_Handler+0xc>)
     45e:	4798      	blx	r3
     460:	bd10      	pop	{r4, pc}
     462:	46c0      	nop			; (mov r8, r8)
     464:	0000040d 	.word	0x0000040d

00000468 <TCC1_Handler>:
     468:	b510      	push	{r4, lr}
     46a:	2001      	movs	r0, #1
     46c:	4b01      	ldr	r3, [pc, #4]	; (474 <TCC1_Handler+0xc>)
     46e:	4798      	blx	r3
     470:	bd10      	pop	{r4, pc}
     472:	46c0      	nop			; (mov r8, r8)
     474:	0000040d 	.word	0x0000040d

00000478 <TCC2_Handler>:
     478:	b510      	push	{r4, lr}
     47a:	2002      	movs	r0, #2
     47c:	4b01      	ldr	r3, [pc, #4]	; (484 <TCC2_Handler+0xc>)
     47e:	4798      	blx	r3
     480:	bd10      	pop	{r4, pc}
     482:	46c0      	nop			; (mov r8, r8)
     484:	0000040d 	.word	0x0000040d

00000488 <usart_write_callback>:

}
void usart_write_callback(struct usart_module *const usart_module)
{
	
}
     488:	4770      	bx	lr
	...

0000048c <usart_read_callback>:
{
     48c:	b510      	push	{r4, lr}
     48e:	0004      	movs	r4, r0
	printf("1test");  
     490:	480d      	ldr	r0, [pc, #52]	; (4c8 <usart_read_callback+0x3c>)
     492:	4b0e      	ldr	r3, [pc, #56]	; (4cc <usart_read_callback+0x40>)
     494:	4798      	blx	r3
	switch(rx_buffer[0]) {
     496:	4b0e      	ldr	r3, [pc, #56]	; (4d0 <usart_read_callback+0x44>)
     498:	781b      	ldrb	r3, [r3, #0]
     49a:	b2db      	uxtb	r3, r3
     49c:	2b20      	cmp	r3, #32
     49e:	d00c      	beq.n	4ba <usart_read_callback+0x2e>
     4a0:	2b77      	cmp	r3, #119	; 0x77
     4a2:	d104      	bne.n	4ae <usart_read_callback+0x22>
		usart_write_buffer_job(usart_instance, "mw\0\0\0", MAX_RX_BUFFER_LENGTH);
     4a4:	2205      	movs	r2, #5
     4a6:	490b      	ldr	r1, [pc, #44]	; (4d4 <usart_read_callback+0x48>)
     4a8:	0020      	movs	r0, r4
     4aa:	4b0b      	ldr	r3, [pc, #44]	; (4d8 <usart_read_callback+0x4c>)
     4ac:	4798      	blx	r3
	usart_read_buffer_job( usart_instance,
     4ae:	2205      	movs	r2, #5
     4b0:	4907      	ldr	r1, [pc, #28]	; (4d0 <usart_read_callback+0x44>)
     4b2:	0020      	movs	r0, r4
     4b4:	4b09      	ldr	r3, [pc, #36]	; (4dc <usart_read_callback+0x50>)
     4b6:	4798      	blx	r3
}
     4b8:	bd10      	pop	{r4, pc}
		usart_write_buffer_job(usart_instance, "m \0\0\0", MAX_RX_BUFFER_LENGTH);
     4ba:	2205      	movs	r2, #5
     4bc:	4905      	ldr	r1, [pc, #20]	; (4d4 <usart_read_callback+0x48>)
     4be:	3108      	adds	r1, #8
     4c0:	0020      	movs	r0, r4
     4c2:	4b05      	ldr	r3, [pc, #20]	; (4d8 <usart_read_callback+0x4c>)
     4c4:	4798      	blx	r3
		break;
     4c6:	e7f2      	b.n	4ae <usart_read_callback+0x22>
     4c8:	000089a4 	.word	0x000089a4
     4cc:	00003d1d 	.word	0x00003d1d
     4d0:	20000890 	.word	0x20000890
     4d4:	00008990 	.word	0x00008990
     4d8:	00001861 	.word	0x00001861
     4dc:	00001881 	.word	0x00001881

000004e0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     4e0:	b570      	push	{r4, r5, r6, lr}
     4e2:	b082      	sub	sp, #8
     4e4:	0005      	movs	r5, r0
     4e6:	000e      	movs	r6, r1
	uint16_t temp = 0;
     4e8:	2200      	movs	r2, #0
     4ea:	466b      	mov	r3, sp
     4ec:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     4ee:	4c06      	ldr	r4, [pc, #24]	; (508 <usart_serial_getchar+0x28>)
     4f0:	466b      	mov	r3, sp
     4f2:	1d99      	adds	r1, r3, #6
     4f4:	0028      	movs	r0, r5
     4f6:	47a0      	blx	r4
     4f8:	2800      	cmp	r0, #0
     4fa:	d1f9      	bne.n	4f0 <usart_serial_getchar+0x10>

	*c = temp;
     4fc:	466b      	mov	r3, sp
     4fe:	3306      	adds	r3, #6
     500:	881b      	ldrh	r3, [r3, #0]
     502:	7033      	strb	r3, [r6, #0]
}
     504:	b002      	add	sp, #8
     506:	bd70      	pop	{r4, r5, r6, pc}
     508:	0000174d 	.word	0x0000174d

0000050c <usart_serial_putchar>:
{
     50c:	b570      	push	{r4, r5, r6, lr}
     50e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     510:	b28c      	uxth	r4, r1
     512:	4e03      	ldr	r6, [pc, #12]	; (520 <usart_serial_putchar+0x14>)
     514:	0021      	movs	r1, r4
     516:	0028      	movs	r0, r5
     518:	47b0      	blx	r6
     51a:	2800      	cmp	r0, #0
     51c:	d1fa      	bne.n	514 <usart_serial_putchar+0x8>
}
     51e:	bd70      	pop	{r4, r5, r6, pc}
     520:	00001721 	.word	0x00001721

00000524 <artist_ultrasonic_tc_configure>:
void artist_ultrasonic_tc_configure() {
     524:	b510      	push	{r4, lr}
     526:	b08e      	sub	sp, #56	; 0x38
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     528:	aa01      	add	r2, sp, #4
     52a:	2300      	movs	r3, #0
     52c:	2100      	movs	r1, #0
     52e:	7093      	strb	r3, [r2, #2]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     530:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     532:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     534:	2000      	movs	r0, #0
     536:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     538:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     53a:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     53c:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     53e:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     540:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     542:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     544:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     546:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     548:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     54a:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
     54c:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     54e:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     550:	8593      	strh	r3, [r2, #44]	; 0x2c
	config.clock_source = GCLK_GENERATOR_3;
     552:	3303      	adds	r3, #3
     554:	7013      	strb	r3, [r2, #0]
	config.clock_prescaler = TC_CLOCK_PRESCALER_DIV8;
     556:	23c0      	movs	r3, #192	; 0xc0
     558:	009b      	lsls	r3, r3, #2
     55a:	8093      	strh	r3, [r2, #4]
	config.enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = true;
     55c:	2301      	movs	r3, #1
     55e:	72d3      	strb	r3, [r2, #11]
	tc_init(&(artist_front.tc_instance_ultrasonic), TC4, &config);
     560:	4c07      	ldr	r4, [pc, #28]	; (580 <artist_ultrasonic_tc_configure+0x5c>)
     562:	4908      	ldr	r1, [pc, #32]	; (584 <artist_ultrasonic_tc_configure+0x60>)
     564:	0020      	movs	r0, r4
     566:	4b08      	ldr	r3, [pc, #32]	; (588 <artist_ultrasonic_tc_configure+0x64>)
     568:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     56a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     56c:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     56e:	b25b      	sxtb	r3, r3
     570:	2b00      	cmp	r3, #0
     572:	dbfb      	blt.n	56c <artist_ultrasonic_tc_configure+0x48>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     574:	8813      	ldrh	r3, [r2, #0]
     576:	2102      	movs	r1, #2
     578:	430b      	orrs	r3, r1
     57a:	8013      	strh	r3, [r2, #0]
}
     57c:	b00e      	add	sp, #56	; 0x38
     57e:	bd10      	pop	{r4, pc}
     580:	200007b4 	.word	0x200007b4
     584:	42003000 	.word	0x42003000
     588:	000023e1 	.word	0x000023e1

0000058c <configure_usart_callbacks>:


void configure_usart_callbacks(struct usart_module * usart_instance)
{
     58c:	b570      	push	{r4, r5, r6, lr}
     58e:	0004      	movs	r4, r0
	//! [setup_register_callbacks]
	usart_register_callback(usart_instance,
     590:	2200      	movs	r2, #0
     592:	4906      	ldr	r1, [pc, #24]	; (5ac <configure_usart_callbacks+0x20>)
     594:	4d06      	ldr	r5, [pc, #24]	; (5b0 <configure_usart_callbacks+0x24>)
     596:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	
	usart_register_callback(usart_instance,
     598:	2201      	movs	r2, #1
     59a:	4906      	ldr	r1, [pc, #24]	; (5b4 <configure_usart_callbacks+0x28>)
     59c:	0020      	movs	r0, r4
     59e:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     5a0:	2231      	movs	r2, #49	; 0x31
     5a2:	5ca3      	ldrb	r3, [r4, r2]
     5a4:	2103      	movs	r1, #3
     5a6:	430b      	orrs	r3, r1
     5a8:	54a3      	strb	r3, [r4, r2]

	//! [setup_enable_callbacks]
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
	//! [setup_enable_callbacks]
}
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	00000489 	.word	0x00000489
     5b0:	00001849 	.word	0x00001849
     5b4:	0000048d 	.word	0x0000048d

000005b8 <artist_usart_configure>:

void artist_usart_configure(struct usart_module * usart_instance) {
     5b8:	b570      	push	{r4, r5, r6, lr}
     5ba:	b090      	sub	sp, #64	; 0x40
     5bc:	0004      	movs	r4, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     5be:	2380      	movs	r3, #128	; 0x80
     5c0:	05db      	lsls	r3, r3, #23
     5c2:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     5c4:	2300      	movs	r3, #0
     5c6:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     5c8:	22ff      	movs	r2, #255	; 0xff
     5ca:	4669      	mov	r1, sp
     5cc:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     5ce:	2200      	movs	r2, #0
     5d0:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     5d2:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
     5d4:	2196      	movs	r1, #150	; 0x96
     5d6:	0189      	lsls	r1, r1, #6
     5d8:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
     5da:	2101      	movs	r1, #1
     5dc:	2024      	movs	r0, #36	; 0x24
     5de:	466d      	mov	r5, sp
     5e0:	5429      	strb	r1, [r5, r0]
	config->transmitter_enable = true;
     5e2:	3001      	adds	r0, #1
     5e4:	5429      	strb	r1, [r5, r0]
	config->clock_polarity_inverted = false;
     5e6:	3125      	adds	r1, #37	; 0x25
     5e8:	546b      	strb	r3, [r5, r1]
	config->use_external_clock = false;
     5ea:	3101      	adds	r1, #1
     5ec:	546b      	strb	r3, [r5, r1]
	config->ext_clock_freq   = 0;
     5ee:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     5f0:	3105      	adds	r1, #5
     5f2:	546b      	strb	r3, [r5, r1]
	config->generator_source = GCLK_GENERATOR_0;
     5f4:	3101      	adds	r1, #1
     5f6:	546b      	strb	r3, [r5, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     5f8:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     5fa:	822b      	strh	r3, [r5, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     5fc:	76eb      	strb	r3, [r5, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     5fe:	762a      	strb	r2, [r5, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     600:	772a      	strb	r2, [r5, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     602:	766a      	strb	r2, [r5, #25]
	config->receive_pulse_length                    = 19;
     604:	2313      	movs	r3, #19
     606:	76ab      	strb	r3, [r5, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     608:	776a      	strb	r2, [r5, #29]
	struct usart_config config;
	usart_get_config_defaults(&config);
	config.baudrate = CONF_ARTIST_BAUDRATE;
	config.mux_setting	= EDBG_CDC_SERCOM_MUX_SETTING;
     60a:	2380      	movs	r3, #128	; 0x80
     60c:	035b      	lsls	r3, r3, #13
     60e:	9303      	str	r3, [sp, #12]
	config.pinmux_pad0	= EDBG_CDC_SERCOM_PINMUX_PAD0;
     610:	4b1e      	ldr	r3, [pc, #120]	; (68c <artist_usart_configure+0xd4>)
     612:	930c      	str	r3, [sp, #48]	; 0x30
	config.pinmux_pad1	= EDBG_CDC_SERCOM_PINMUX_PAD1;
     614:	4b1e      	ldr	r3, [pc, #120]	; (690 <artist_usart_configure+0xd8>)
     616:	930d      	str	r3, [sp, #52]	; 0x34
	config.pinmux_pad2	= EDBG_CDC_SERCOM_PINMUX_PAD2;
     618:	2301      	movs	r3, #1
     61a:	425b      	negs	r3, r3
     61c:	930e      	str	r3, [sp, #56]	; 0x38
	config.pinmux_pad3	= EDBG_CDC_SERCOM_PINMUX_PAD3;
     61e:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(usart_instance, EDBG_CDC_MODULE, &config) != STATUS_OK);
     620:	4e1c      	ldr	r6, [pc, #112]	; (694 <artist_usart_configure+0xdc>)
     622:	4d1d      	ldr	r5, [pc, #116]	; (698 <artist_usart_configure+0xe0>)
     624:	466a      	mov	r2, sp
     626:	0031      	movs	r1, r6
     628:	0020      	movs	r0, r4
     62a:	47a8      	blx	r5
     62c:	2800      	cmp	r0, #0
     62e:	d1f9      	bne.n	624 <artist_usart_configure+0x6c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     630:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     632:	0028      	movs	r0, r5
     634:	4b19      	ldr	r3, [pc, #100]	; (69c <artist_usart_configure+0xe4>)
     636:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     638:	231f      	movs	r3, #31
     63a:	4018      	ands	r0, r3
     63c:	3b1e      	subs	r3, #30
     63e:	4083      	lsls	r3, r0
     640:	4a17      	ldr	r2, [pc, #92]	; (6a0 <artist_usart_configure+0xe8>)
     642:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     644:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     646:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     648:	2b00      	cmp	r3, #0
     64a:	d1fc      	bne.n	646 <artist_usart_configure+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     64c:	682b      	ldr	r3, [r5, #0]
     64e:	2202      	movs	r2, #2
     650:	4313      	orrs	r3, r2
     652:	602b      	str	r3, [r5, #0]
	
	
	usart_enable(usart_instance);
	configure_usart_callbacks(usart_instance);
     654:	0020      	movs	r0, r4
     656:	4b13      	ldr	r3, [pc, #76]	; (6a4 <artist_usart_configure+0xec>)
     658:	4798      	blx	r3
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     65a:	4b13      	ldr	r3, [pc, #76]	; (6a8 <artist_usart_configure+0xf0>)
     65c:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     65e:	4a13      	ldr	r2, [pc, #76]	; (6ac <artist_usart_configure+0xf4>)
     660:	4b13      	ldr	r3, [pc, #76]	; (6b0 <artist_usart_configure+0xf8>)
     662:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     664:	4a13      	ldr	r2, [pc, #76]	; (6b4 <artist_usart_configure+0xfc>)
     666:	4b14      	ldr	r3, [pc, #80]	; (6b8 <artist_usart_configure+0x100>)
     668:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     66a:	466a      	mov	r2, sp
     66c:	4909      	ldr	r1, [pc, #36]	; (694 <artist_usart_configure+0xdc>)
     66e:	0020      	movs	r0, r4
     670:	4b09      	ldr	r3, [pc, #36]	; (698 <artist_usart_configure+0xe0>)
     672:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     674:	4d11      	ldr	r5, [pc, #68]	; (6bc <artist_usart_configure+0x104>)
     676:	682b      	ldr	r3, [r5, #0]
     678:	6898      	ldr	r0, [r3, #8]
     67a:	2100      	movs	r1, #0
     67c:	4c10      	ldr	r4, [pc, #64]	; (6c0 <artist_usart_configure+0x108>)
     67e:	47a0      	blx	r4
	setbuf(stdin, NULL);
     680:	682b      	ldr	r3, [r5, #0]
     682:	6858      	ldr	r0, [r3, #4]
     684:	2100      	movs	r1, #0
     686:	47a0      	blx	r4
	
	stdio_serial_init(usart_instance, EDBG_CDC_MODULE, &config);
}
     688:	b010      	add	sp, #64	; 0x40
     68a:	bd70      	pop	{r4, r5, r6, pc}
     68c:	00040003 	.word	0x00040003
     690:	00050003 	.word	0x00050003
     694:	42000800 	.word	0x42000800
     698:	000013e1 	.word	0x000013e1
     69c:	00000f99 	.word	0x00000f99
     6a0:	e000e100 	.word	0xe000e100
     6a4:	0000058d 	.word	0x0000058d
     6a8:	20000914 	.word	0x20000914
     6ac:	0000050d 	.word	0x0000050d
     6b0:	20000910 	.word	0x20000910
     6b4:	000004e1 	.word	0x000004e1
     6b8:	2000090c 	.word	0x2000090c
     6bc:	2000000c 	.word	0x2000000c
     6c0:	00003e25 	.word	0x00003e25

000006c4 <artist_ultrasonic_update>:
	tcc_init(&(artist->tcc_instance), TCC0, &config);
	tcc_enable(&(artist->tcc_instance));
	*/
}

void artist_ultrasonic_update() {
     6c4:	b570      	push	{r4, r5, r6, lr}
	artist_front.center_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_center));
     6c6:	4e09      	ldr	r6, [pc, #36]	; (6ec <artist_ultrasonic_update+0x28>)
     6c8:	0030      	movs	r0, r6
     6ca:	4d09      	ldr	r5, [pc, #36]	; (6f0 <artist_ultrasonic_update+0x2c>)
     6cc:	47a8      	blx	r5
     6ce:	0034      	movs	r4, r6
     6d0:	3cb4      	subs	r4, #180	; 0xb4
     6d2:	61b0      	str	r0, [r6, #24]
	artist_front.right_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_right));
     6d4:	0020      	movs	r0, r4
     6d6:	30c4      	adds	r0, #196	; 0xc4
     6d8:	47a8      	blx	r5
     6da:	23d4      	movs	r3, #212	; 0xd4
     6dc:	50e0      	str	r0, [r4, r3]
	artist_front.left_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_left));
     6de:	0020      	movs	r0, r4
     6e0:	30bc      	adds	r0, #188	; 0xbc
     6e2:	47a8      	blx	r5
     6e4:	23d0      	movs	r3, #208	; 0xd0
     6e6:	50e0      	str	r0, [r4, r3]
}
     6e8:	bd70      	pop	{r4, r5, r6, pc}
     6ea:	46c0      	nop			; (mov r8, r8)
     6ec:	20000868 	.word	0x20000868
     6f0:	0000023d 	.word	0x0000023d

000006f4 <callbacks>:
	//! [setup_enable]
	tc_enable(&(artist_front.tc_instance_timer));
	//! [setup_enable]
}

void callbacks (void) {
     6f4:	b510      	push	{r4, lr}
	// [ultra sonic]
	static uint16_t ultrasonic_counter		= 0;
	static uint16_t maze_counter			= 0; 
	ultrasonic_counter ++;
     6f6:	4a0e      	ldr	r2, [pc, #56]	; (730 <callbacks+0x3c>)
     6f8:	8813      	ldrh	r3, [r2, #0]
     6fa:	3301      	adds	r3, #1
     6fc:	b29b      	uxth	r3, r3
     6fe:	8013      	strh	r3, [r2, #0]
	maze_counter ++; 
     700:	490c      	ldr	r1, [pc, #48]	; (734 <callbacks+0x40>)
     702:	880a      	ldrh	r2, [r1, #0]
     704:	3201      	adds	r2, #1
     706:	800a      	strh	r2, [r1, #0]
	
	if (ultrasonic_counter > 5) {
     708:	2b05      	cmp	r3, #5
     70a:	d804      	bhi.n	716 <callbacks+0x22>
		artist_ultrasonic_update();
		ultrasonic_counter = 0; 
	}
	
	if (maze_counter > 30) {
     70c:	4b09      	ldr	r3, [pc, #36]	; (734 <callbacks+0x40>)
     70e:	881b      	ldrh	r3, [r3, #0]
     710:	2b1e      	cmp	r3, #30
     712:	d806      	bhi.n	722 <callbacks+0x2e>
		artist_do_maze(); 
		maze_counter = 0; 
	}
	
	// ! [ultra sonic]
}
     714:	bd10      	pop	{r4, pc}
		artist_ultrasonic_update();
     716:	4b08      	ldr	r3, [pc, #32]	; (738 <callbacks+0x44>)
     718:	4798      	blx	r3
		ultrasonic_counter = 0; 
     71a:	2200      	movs	r2, #0
     71c:	4b04      	ldr	r3, [pc, #16]	; (730 <callbacks+0x3c>)
     71e:	801a      	strh	r2, [r3, #0]
     720:	e7f4      	b.n	70c <callbacks+0x18>
		artist_do_maze(); 
     722:	4b06      	ldr	r3, [pc, #24]	; (73c <callbacks+0x48>)
     724:	4798      	blx	r3
		maze_counter = 0; 
     726:	2200      	movs	r2, #0
     728:	4b02      	ldr	r3, [pc, #8]	; (734 <callbacks+0x40>)
     72a:	801a      	strh	r2, [r3, #0]
}
     72c:	e7f2      	b.n	714 <callbacks+0x20>
     72e:	46c0      	nop			; (mov r8, r8)
     730:	200001fa 	.word	0x200001fa
     734:	200001f8 	.word	0x200001f8
     738:	000006c5 	.word	0x000006c5
     73c:	00000125 	.word	0x00000125

00000740 <artist_scheduler_tc_configure>:
void artist_scheduler_tc_configure() {
     740:	b510      	push	{r4, lr}
     742:	b08e      	sub	sp, #56	; 0x38
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     744:	aa01      	add	r2, sp, #4
     746:	2300      	movs	r3, #0
     748:	2100      	movs	r1, #0
     74a:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     74c:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     74e:	2000      	movs	r0, #0
     750:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     752:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     754:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     756:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     758:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     75a:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     75c:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     75e:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     760:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     762:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     764:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     766:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
     768:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     76a:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     76c:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
     76e:	3304      	adds	r3, #4
     770:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source = GCLK_GENERATOR_3;
     772:	3b01      	subs	r3, #1
     774:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024; //
     776:	23e0      	movs	r3, #224	; 0xe0
     778:	00db      	lsls	r3, r3, #3
     77a:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period = 50;
     77c:	2132      	movs	r1, #50	; 0x32
     77e:	2329      	movs	r3, #41	; 0x29
     780:	54d1      	strb	r1, [r2, r3]
	tc_init(&(artist_front.tc_instance_timer), TC5, &config_tc);
     782:	4c08      	ldr	r4, [pc, #32]	; (7a4 <artist_scheduler_tc_configure+0x64>)
     784:	4908      	ldr	r1, [pc, #32]	; (7a8 <artist_scheduler_tc_configure+0x68>)
     786:	0020      	movs	r0, r4
     788:	4b08      	ldr	r3, [pc, #32]	; (7ac <artist_scheduler_tc_configure+0x6c>)
     78a:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     78c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     78e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     790:	b25b      	sxtb	r3, r3
     792:	2b00      	cmp	r3, #0
     794:	dbfb      	blt.n	78e <artist_scheduler_tc_configure+0x4e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     796:	8813      	ldrh	r3, [r2, #0]
     798:	2102      	movs	r1, #2
     79a:	430b      	orrs	r3, r1
     79c:	8013      	strh	r3, [r2, #0]
}
     79e:	b00e      	add	sp, #56	; 0x38
     7a0:	bd10      	pop	{r4, pc}
     7a2:	46c0      	nop			; (mov r8, r8)
     7a4:	200007d0 	.word	0x200007d0
     7a8:	42003400 	.word	0x42003400
     7ac:	000023e1 	.word	0x000023e1

000007b0 <artist_configure_tc_callbacks>:
void artist_configure_tc_callbacks(void)
{
     7b0:	b510      	push	{r4, lr}
	tc_register_callback(&(artist_front.tc_instance_timer), callbacks ,
     7b2:	4c0d      	ldr	r4, [pc, #52]	; (7e8 <artist_configure_tc_callbacks+0x38>)
     7b4:	2200      	movs	r2, #0
     7b6:	490d      	ldr	r1, [pc, #52]	; (7ec <artist_configure_tc_callbacks+0x3c>)
     7b8:	0020      	movs	r0, r4
     7ba:	4b0d      	ldr	r3, [pc, #52]	; (7f0 <artist_configure_tc_callbacks+0x40>)
     7bc:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     7be:	6820      	ldr	r0, [r4, #0]
     7c0:	3c1c      	subs	r4, #28
     7c2:	4b0c      	ldr	r3, [pc, #48]	; (7f4 <artist_configure_tc_callbacks+0x44>)
     7c4:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     7c6:	4b0c      	ldr	r3, [pc, #48]	; (7f8 <artist_configure_tc_callbacks+0x48>)
     7c8:	5c1a      	ldrb	r2, [r3, r0]
     7ca:	231f      	movs	r3, #31
     7cc:	4013      	ands	r3, r2
     7ce:	2201      	movs	r2, #1
     7d0:	0011      	movs	r1, r2
     7d2:	4099      	lsls	r1, r3
     7d4:	4b09      	ldr	r3, [pc, #36]	; (7fc <artist_configure_tc_callbacks+0x4c>)
     7d6:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     7d8:	2135      	movs	r1, #53	; 0x35
     7da:	5c63      	ldrb	r3, [r4, r1]
     7dc:	2001      	movs	r0, #1
     7de:	4303      	orrs	r3, r0
     7e0:	5463      	strb	r3, [r4, r1]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     7e2:	69e3      	ldr	r3, [r4, #28]
     7e4:	735a      	strb	r2, [r3, #13]
	TC_CALLBACK_OVERFLOW);
	
	tc_enable_callback(&(artist_front.tc_instance_timer), TC_CALLBACK_OVERFLOW);
     7e6:	bd10      	pop	{r4, pc}
     7e8:	200007d0 	.word	0x200007d0
     7ec:	000006f5 	.word	0x000006f5
     7f0:	000022e1 	.word	0x000022e1
     7f4:	000023a9 	.word	0x000023a9
     7f8:	000089a0 	.word	0x000089a0
     7fc:	e000e100 	.word	0xe000e100

00000800 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     800:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     802:	2000      	movs	r0, #0
     804:	4b08      	ldr	r3, [pc, #32]	; (828 <delay_init+0x28>)
     806:	4798      	blx	r3
     808:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     80a:	4c08      	ldr	r4, [pc, #32]	; (82c <delay_init+0x2c>)
     80c:	21fa      	movs	r1, #250	; 0xfa
     80e:	0089      	lsls	r1, r1, #2
     810:	47a0      	blx	r4
     812:	4b07      	ldr	r3, [pc, #28]	; (830 <delay_init+0x30>)
     814:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     816:	4907      	ldr	r1, [pc, #28]	; (834 <delay_init+0x34>)
     818:	0028      	movs	r0, r5
     81a:	47a0      	blx	r4
     81c:	4b06      	ldr	r3, [pc, #24]	; (838 <delay_init+0x38>)
     81e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     820:	2205      	movs	r2, #5
     822:	4b06      	ldr	r3, [pc, #24]	; (83c <delay_init+0x3c>)
     824:	601a      	str	r2, [r3, #0]
}
     826:	bd70      	pop	{r4, r5, r6, pc}
     828:	00002071 	.word	0x00002071
     82c:	00005de9 	.word	0x00005de9
     830:	20000000 	.word	0x20000000
     834:	000f4240 	.word	0x000f4240
     838:	20000004 	.word	0x20000004
     83c:	e000e010 	.word	0xe000e010

00000840 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     840:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     842:	4b08      	ldr	r3, [pc, #32]	; (864 <delay_cycles_us+0x24>)
     844:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     846:	4a08      	ldr	r2, [pc, #32]	; (868 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     848:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     84a:	2180      	movs	r1, #128	; 0x80
     84c:	0249      	lsls	r1, r1, #9
	while (n--) {
     84e:	3801      	subs	r0, #1
     850:	d307      	bcc.n	862 <delay_cycles_us+0x22>
	if (n > 0) {
     852:	2c00      	cmp	r4, #0
     854:	d0fb      	beq.n	84e <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     856:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     858:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     85a:	6813      	ldr	r3, [r2, #0]
     85c:	420b      	tst	r3, r1
     85e:	d0fc      	beq.n	85a <delay_cycles_us+0x1a>
     860:	e7f5      	b.n	84e <delay_cycles_us+0xe>
	}
}
     862:	bd30      	pop	{r4, r5, pc}
     864:	20000004 	.word	0x20000004
     868:	e000e010 	.word	0xe000e010

0000086c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     86c:	4b0c      	ldr	r3, [pc, #48]	; (8a0 <cpu_irq_enter_critical+0x34>)
     86e:	681b      	ldr	r3, [r3, #0]
     870:	2b00      	cmp	r3, #0
     872:	d106      	bne.n	882 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     874:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     878:	2b00      	cmp	r3, #0
     87a:	d007      	beq.n	88c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     87c:	2200      	movs	r2, #0
     87e:	4b09      	ldr	r3, [pc, #36]	; (8a4 <cpu_irq_enter_critical+0x38>)
     880:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     882:	4a07      	ldr	r2, [pc, #28]	; (8a0 <cpu_irq_enter_critical+0x34>)
     884:	6813      	ldr	r3, [r2, #0]
     886:	3301      	adds	r3, #1
     888:	6013      	str	r3, [r2, #0]
}
     88a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     88c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     88e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     892:	2200      	movs	r2, #0
     894:	4b04      	ldr	r3, [pc, #16]	; (8a8 <cpu_irq_enter_critical+0x3c>)
     896:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     898:	3201      	adds	r2, #1
     89a:	4b02      	ldr	r3, [pc, #8]	; (8a4 <cpu_irq_enter_critical+0x38>)
     89c:	701a      	strb	r2, [r3, #0]
     89e:	e7f0      	b.n	882 <cpu_irq_enter_critical+0x16>
     8a0:	200001fc 	.word	0x200001fc
     8a4:	20000200 	.word	0x20000200
     8a8:	20000008 	.word	0x20000008

000008ac <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     8ac:	4b08      	ldr	r3, [pc, #32]	; (8d0 <cpu_irq_leave_critical+0x24>)
     8ae:	681a      	ldr	r2, [r3, #0]
     8b0:	3a01      	subs	r2, #1
     8b2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     8b4:	681b      	ldr	r3, [r3, #0]
     8b6:	2b00      	cmp	r3, #0
     8b8:	d109      	bne.n	8ce <cpu_irq_leave_critical+0x22>
     8ba:	4b06      	ldr	r3, [pc, #24]	; (8d4 <cpu_irq_leave_critical+0x28>)
     8bc:	781b      	ldrb	r3, [r3, #0]
     8be:	2b00      	cmp	r3, #0
     8c0:	d005      	beq.n	8ce <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     8c2:	2201      	movs	r2, #1
     8c4:	4b04      	ldr	r3, [pc, #16]	; (8d8 <cpu_irq_leave_critical+0x2c>)
     8c6:	701a      	strb	r2, [r3, #0]
     8c8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     8cc:	b662      	cpsie	i
	}
}
     8ce:	4770      	bx	lr
     8d0:	200001fc 	.word	0x200001fc
     8d4:	20000200 	.word	0x20000200
     8d8:	20000008 	.word	0x20000008

000008dc <system_board_init>:




void system_board_init(void)
{
     8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     8de:	46c6      	mov	lr, r8
     8e0:	b500      	push	{lr}
     8e2:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
     8e4:	ac01      	add	r4, sp, #4
     8e6:	2601      	movs	r6, #1
     8e8:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     8ea:	2700      	movs	r7, #0
     8ec:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     8ee:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     8f0:	0021      	movs	r1, r4
     8f2:	2013      	movs	r0, #19
     8f4:	4d27      	ldr	r5, [pc, #156]	; (994 <system_board_init+0xb8>)
     8f6:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     8f8:	4b27      	ldr	r3, [pc, #156]	; (998 <system_board_init+0xbc>)
     8fa:	4698      	mov	r8, r3
     8fc:	2380      	movs	r3, #128	; 0x80
     8fe:	031b      	lsls	r3, r3, #12
     900:	4642      	mov	r2, r8
     902:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     904:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     906:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     908:	0021      	movs	r1, r4
     90a:	201c      	movs	r0, #28
     90c:	47a8      	blx	r5
	config->input_pull = PORT_PIN_PULL_UP;
     90e:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     910:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     912:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     914:	0021      	movs	r1, r4
     916:	2052      	movs	r0, #82	; 0x52
     918:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     91a:	0021      	movs	r1, r4
     91c:	203e      	movs	r0, #62	; 0x3e
     91e:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     920:	0021      	movs	r1, r4
     922:	203f      	movs	r0, #63	; 0x3f
     924:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     926:	0021      	movs	r1, r4
     928:	202f      	movs	r0, #47	; 0x2f
     92a:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     92c:	0021      	movs	r1, r4
     92e:	2014      	movs	r0, #20
     930:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     932:	2280      	movs	r2, #128	; 0x80
     934:	02d2      	lsls	r2, r2, #11
     936:	4b19      	ldr	r3, [pc, #100]	; (99c <system_board_init+0xc0>)
     938:	619a      	str	r2, [r3, #24]
     93a:	4b19      	ldr	r3, [pc, #100]	; (9a0 <system_board_init+0xc4>)
     93c:	2280      	movs	r2, #128	; 0x80
     93e:	05d2      	lsls	r2, r2, #23
     940:	619a      	str	r2, [r3, #24]
     942:	2280      	movs	r2, #128	; 0x80
     944:	0612      	lsls	r2, r2, #24
     946:	619a      	str	r2, [r3, #24]
     948:	2280      	movs	r2, #128	; 0x80
     94a:	0212      	lsls	r2, r2, #8
     94c:	619a      	str	r2, [r3, #24]
     94e:	2380      	movs	r3, #128	; 0x80
     950:	035b      	lsls	r3, r3, #13
     952:	4642      	mov	r2, r8
     954:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     956:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     958:	0021      	movs	r1, r4
     95a:	2053      	movs	r0, #83	; 0x53
     95c:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     95e:	4a11      	ldr	r2, [pc, #68]	; (9a4 <system_board_init+0xc8>)
     960:	6a11      	ldr	r1, [r2, #32]
     962:	2380      	movs	r3, #128	; 0x80
     964:	039b      	lsls	r3, r3, #14
     966:	430b      	orrs	r3, r1
     968:	6213      	str	r3, [r2, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     96a:	2204      	movs	r2, #4
     96c:	4b0e      	ldr	r3, [pc, #56]	; (9a8 <system_board_init+0xcc>)
     96e:	801a      	strh	r2, [r3, #0]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     970:	466b      	mov	r3, sp
     972:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     974:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     976:	2305      	movs	r3, #5
     978:	466a      	mov	r2, sp
     97a:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     97c:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     97e:	4669      	mov	r1, sp
     980:	2009      	movs	r0, #9
     982:	4c0a      	ldr	r4, [pc, #40]	; (9ac <system_board_init+0xd0>)
     984:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     986:	4669      	mov	r1, sp
     988:	200c      	movs	r0, #12
     98a:	47a0      	blx	r4
#endif

}
     98c:	b002      	add	sp, #8
     98e:	bc04      	pop	{r2}
     990:	4690      	mov	r8, r2
     992:	bdf0      	pop	{r4, r5, r6, r7, pc}
     994:	00000b41 	.word	0x00000b41
     998:	41004400 	.word	0x41004400
     99c:	41004500 	.word	0x41004500
     9a0:	41004480 	.word	0x41004480
     9a4:	40000400 	.word	0x40000400
     9a8:	42005400 	.word	0x42005400
     9ac:	00002281 	.word	0x00002281

000009b0 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     9b0:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     9b2:	2a00      	cmp	r2, #0
     9b4:	d001      	beq.n	9ba <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     9b6:	0018      	movs	r0, r3
     9b8:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     9ba:	008b      	lsls	r3, r1, #2
     9bc:	4a06      	ldr	r2, [pc, #24]	; (9d8 <extint_register_callback+0x28>)
     9be:	589b      	ldr	r3, [r3, r2]
     9c0:	2b00      	cmp	r3, #0
     9c2:	d003      	beq.n	9cc <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     9c4:	4283      	cmp	r3, r0
     9c6:	d005      	beq.n	9d4 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     9c8:	231d      	movs	r3, #29
     9ca:	e7f4      	b.n	9b6 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     9cc:	0089      	lsls	r1, r1, #2
     9ce:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     9d0:	2300      	movs	r3, #0
     9d2:	e7f0      	b.n	9b6 <extint_register_callback+0x6>
		return STATUS_OK;
     9d4:	2300      	movs	r3, #0
     9d6:	e7ee      	b.n	9b6 <extint_register_callback+0x6>
     9d8:	200008a8 	.word	0x200008a8

000009dc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     9dc:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     9de:	2200      	movs	r2, #0
     9e0:	4b10      	ldr	r3, [pc, #64]	; (a24 <EIC_Handler+0x48>)
     9e2:	701a      	strb	r2, [r3, #0]
     9e4:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     9e6:	4910      	ldr	r1, [pc, #64]	; (a28 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     9e8:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     9ea:	4e10      	ldr	r6, [pc, #64]	; (a2c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     9ec:	4c0d      	ldr	r4, [pc, #52]	; (a24 <EIC_Handler+0x48>)
     9ee:	e00a      	b.n	a06 <EIC_Handler+0x2a>
		return eics[eic_index];
     9f0:	490d      	ldr	r1, [pc, #52]	; (a28 <EIC_Handler+0x4c>)
     9f2:	e008      	b.n	a06 <EIC_Handler+0x2a>
     9f4:	7823      	ldrb	r3, [r4, #0]
     9f6:	3301      	adds	r3, #1
     9f8:	b2db      	uxtb	r3, r3
     9fa:	7023      	strb	r3, [r4, #0]
     9fc:	2b0f      	cmp	r3, #15
     9fe:	d810      	bhi.n	a22 <EIC_Handler+0x46>
		return NULL;
     a00:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     a02:	2b1f      	cmp	r3, #31
     a04:	d9f4      	bls.n	9f0 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     a06:	0028      	movs	r0, r5
     a08:	4018      	ands	r0, r3
     a0a:	2201      	movs	r2, #1
     a0c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     a0e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     a10:	4210      	tst	r0, r2
     a12:	d0ef      	beq.n	9f4 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     a14:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     a16:	009b      	lsls	r3, r3, #2
     a18:	599b      	ldr	r3, [r3, r6]
     a1a:	2b00      	cmp	r3, #0
     a1c:	d0ea      	beq.n	9f4 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     a1e:	4798      	blx	r3
     a20:	e7e8      	b.n	9f4 <EIC_Handler+0x18>
			}
		}
	}
}
     a22:	bd70      	pop	{r4, r5, r6, pc}
     a24:	200008a4 	.word	0x200008a4
     a28:	40001800 	.word	0x40001800
     a2c:	200008a8 	.word	0x200008a8

00000a30 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     a30:	4a04      	ldr	r2, [pc, #16]	; (a44 <_extint_enable+0x14>)
     a32:	7813      	ldrb	r3, [r2, #0]
     a34:	2102      	movs	r1, #2
     a36:	430b      	orrs	r3, r1
     a38:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     a3a:	7853      	ldrb	r3, [r2, #1]
     a3c:	b25b      	sxtb	r3, r3
     a3e:	2b00      	cmp	r3, #0
     a40:	dbfb      	blt.n	a3a <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     a42:	4770      	bx	lr
     a44:	40001800 	.word	0x40001800

00000a48 <_system_extint_init>:
{
     a48:	b500      	push	{lr}
     a4a:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     a4c:	4a12      	ldr	r2, [pc, #72]	; (a98 <_system_extint_init+0x50>)
     a4e:	6993      	ldr	r3, [r2, #24]
     a50:	2140      	movs	r1, #64	; 0x40
     a52:	430b      	orrs	r3, r1
     a54:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     a56:	a901      	add	r1, sp, #4
     a58:	2300      	movs	r3, #0
     a5a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     a5c:	2005      	movs	r0, #5
     a5e:	4b0f      	ldr	r3, [pc, #60]	; (a9c <_system_extint_init+0x54>)
     a60:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     a62:	2005      	movs	r0, #5
     a64:	4b0e      	ldr	r3, [pc, #56]	; (aa0 <_system_extint_init+0x58>)
     a66:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     a68:	4a0e      	ldr	r2, [pc, #56]	; (aa4 <_system_extint_init+0x5c>)
     a6a:	7813      	ldrb	r3, [r2, #0]
     a6c:	2101      	movs	r1, #1
     a6e:	430b      	orrs	r3, r1
     a70:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     a72:	7853      	ldrb	r3, [r2, #1]
     a74:	b25b      	sxtb	r3, r3
     a76:	2b00      	cmp	r3, #0
     a78:	dbfb      	blt.n	a72 <_system_extint_init+0x2a>
     a7a:	4b0b      	ldr	r3, [pc, #44]	; (aa8 <_system_extint_init+0x60>)
     a7c:	0019      	movs	r1, r3
     a7e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     a80:	2200      	movs	r2, #0
     a82:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     a84:	4299      	cmp	r1, r3
     a86:	d1fc      	bne.n	a82 <_system_extint_init+0x3a>
     a88:	2210      	movs	r2, #16
     a8a:	4b08      	ldr	r3, [pc, #32]	; (aac <_system_extint_init+0x64>)
     a8c:	601a      	str	r2, [r3, #0]
	_extint_enable();
     a8e:	4b08      	ldr	r3, [pc, #32]	; (ab0 <_system_extint_init+0x68>)
     a90:	4798      	blx	r3
}
     a92:	b003      	add	sp, #12
     a94:	bd00      	pop	{pc}
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	40000400 	.word	0x40000400
     a9c:	00002189 	.word	0x00002189
     aa0:	000020fd 	.word	0x000020fd
     aa4:	40001800 	.word	0x40001800
     aa8:	200008a8 	.word	0x200008a8
     aac:	e000e100 	.word	0xe000e100
     ab0:	00000a31 	.word	0x00000a31

00000ab4 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     ab4:	2300      	movs	r3, #0
     ab6:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     ab8:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     aba:	2201      	movs	r2, #1
     abc:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     abe:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     ac0:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     ac2:	3302      	adds	r3, #2
     ac4:	72c3      	strb	r3, [r0, #11]
}
     ac6:	4770      	bx	lr

00000ac8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
     aca:	b083      	sub	sp, #12
     acc:	0005      	movs	r5, r0
     ace:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ad0:	a901      	add	r1, sp, #4
     ad2:	2300      	movs	r3, #0
     ad4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     ad6:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     ad8:	7923      	ldrb	r3, [r4, #4]
     ada:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     adc:	7a23      	ldrb	r3, [r4, #8]
     ade:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     ae0:	7820      	ldrb	r0, [r4, #0]
     ae2:	4b15      	ldr	r3, [pc, #84]	; (b38 <extint_chan_set_config+0x70>)
     ae4:	4798      	blx	r3
		return NULL;
     ae6:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     ae8:	2d1f      	cmp	r5, #31
     aea:	d800      	bhi.n	aee <extint_chan_set_config+0x26>
		return eics[eic_index];
     aec:	4813      	ldr	r0, [pc, #76]	; (b3c <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     aee:	2207      	movs	r2, #7
     af0:	402a      	ands	r2, r5
     af2:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     af4:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     af6:	7aa3      	ldrb	r3, [r4, #10]
     af8:	2b00      	cmp	r3, #0
     afa:	d001      	beq.n	b00 <extint_chan_set_config+0x38>
     afc:	2308      	movs	r3, #8
     afe:	431f      	orrs	r7, r3
     b00:	08eb      	lsrs	r3, r5, #3
     b02:	009b      	lsls	r3, r3, #2
     b04:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     b06:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     b08:	260f      	movs	r6, #15
     b0a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     b0c:	43b1      	bics	r1, r6
			(new_config << config_pos);
     b0e:	4097      	lsls	r7, r2
     b10:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     b12:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     b14:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     b16:	7a63      	ldrb	r3, [r4, #9]
     b18:	2b00      	cmp	r3, #0
     b1a:	d106      	bne.n	b2a <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     b1c:	6943      	ldr	r3, [r0, #20]
     b1e:	2201      	movs	r2, #1
     b20:	40aa      	lsls	r2, r5
     b22:	4393      	bics	r3, r2
     b24:	6143      	str	r3, [r0, #20]
	}
}
     b26:	b003      	add	sp, #12
     b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     b2a:	6942      	ldr	r2, [r0, #20]
     b2c:	2301      	movs	r3, #1
     b2e:	40ab      	lsls	r3, r5
     b30:	4313      	orrs	r3, r2
     b32:	6143      	str	r3, [r0, #20]
     b34:	e7f7      	b.n	b26 <extint_chan_set_config+0x5e>
     b36:	46c0      	nop			; (mov r8, r8)
     b38:	00002281 	.word	0x00002281
     b3c:	40001800 	.word	0x40001800

00000b40 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     b40:	b500      	push	{lr}
     b42:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     b44:	ab01      	add	r3, sp, #4
     b46:	2280      	movs	r2, #128	; 0x80
     b48:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     b4a:	780a      	ldrb	r2, [r1, #0]
     b4c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     b4e:	784a      	ldrb	r2, [r1, #1]
     b50:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     b52:	788a      	ldrb	r2, [r1, #2]
     b54:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     b56:	0019      	movs	r1, r3
     b58:	4b01      	ldr	r3, [pc, #4]	; (b60 <port_pin_set_config+0x20>)
     b5a:	4798      	blx	r3
}
     b5c:	b003      	add	sp, #12
     b5e:	bd00      	pop	{pc}
     b60:	00002281 	.word	0x00002281

00000b64 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     b64:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     b66:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b68:	2340      	movs	r3, #64	; 0x40
     b6a:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     b6c:	4281      	cmp	r1, r0
     b6e:	d202      	bcs.n	b76 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     b70:	0018      	movs	r0, r3
     b72:	bd10      	pop	{r4, pc}
		baud_calculated++;
     b74:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     b76:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     b78:	1c63      	adds	r3, r4, #1
     b7a:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     b7c:	4288      	cmp	r0, r1
     b7e:	d9f9      	bls.n	b74 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b80:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     b82:	2cff      	cmp	r4, #255	; 0xff
     b84:	d8f4      	bhi.n	b70 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     b86:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     b88:	2300      	movs	r3, #0
     b8a:	e7f1      	b.n	b70 <_sercom_get_sync_baud_val+0xc>

00000b8c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b8e:	46de      	mov	lr, fp
     b90:	4657      	mov	r7, sl
     b92:	464e      	mov	r6, r9
     b94:	4645      	mov	r5, r8
     b96:	b5e0      	push	{r5, r6, r7, lr}
     b98:	b089      	sub	sp, #36	; 0x24
     b9a:	000c      	movs	r4, r1
     b9c:	9205      	str	r2, [sp, #20]
     b9e:	aa12      	add	r2, sp, #72	; 0x48
     ba0:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     ba2:	0005      	movs	r5, r0
     ba4:	434d      	muls	r5, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ba6:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     ba8:	42a5      	cmp	r5, r4
     baa:	d907      	bls.n	bbc <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     bac:	0010      	movs	r0, r2
     bae:	b009      	add	sp, #36	; 0x24
     bb0:	bc3c      	pop	{r2, r3, r4, r5}
     bb2:	4690      	mov	r8, r2
     bb4:	4699      	mov	r9, r3
     bb6:	46a2      	mov	sl, r4
     bb8:	46ab      	mov	fp, r5
     bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     bbc:	2b00      	cmp	r3, #0
     bbe:	d155      	bne.n	c6c <_sercom_get_async_baud_val+0xe0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     bc0:	0002      	movs	r2, r0
     bc2:	0008      	movs	r0, r1
     bc4:	2100      	movs	r1, #0
     bc6:	4d63      	ldr	r5, [pc, #396]	; (d54 <_sercom_get_async_baud_val+0x1c8>)
     bc8:	47a8      	blx	r5
     bca:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     bcc:	0026      	movs	r6, r4
     bce:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
     bd0:	2300      	movs	r3, #0
     bd2:	2400      	movs	r4, #0
     bd4:	9300      	str	r3, [sp, #0]
     bd6:	9401      	str	r4, [sp, #4]
     bd8:	2200      	movs	r2, #0
     bda:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     bdc:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     bde:	2120      	movs	r1, #32
     be0:	468c      	mov	ip, r1
     be2:	391f      	subs	r1, #31
     be4:	9602      	str	r6, [sp, #8]
     be6:	9703      	str	r7, [sp, #12]
     be8:	e014      	b.n	c14 <_sercom_get_async_baud_val+0x88>
     bea:	4664      	mov	r4, ip
     bec:	1a24      	subs	r4, r4, r0
     bee:	000d      	movs	r5, r1
     bf0:	40e5      	lsrs	r5, r4
     bf2:	46a8      	mov	r8, r5
     bf4:	e015      	b.n	c22 <_sercom_get_async_baud_val+0x96>
			r = r - d;
     bf6:	9c02      	ldr	r4, [sp, #8]
     bf8:	9d03      	ldr	r5, [sp, #12]
     bfa:	1b12      	subs	r2, r2, r4
     bfc:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     bfe:	464d      	mov	r5, r9
     c00:	9e00      	ldr	r6, [sp, #0]
     c02:	9f01      	ldr	r7, [sp, #4]
     c04:	4335      	orrs	r5, r6
     c06:	003c      	movs	r4, r7
     c08:	4646      	mov	r6, r8
     c0a:	4334      	orrs	r4, r6
     c0c:	9500      	str	r5, [sp, #0]
     c0e:	9401      	str	r4, [sp, #4]
	for (i = 63; i >= 0; i--) {
     c10:	3801      	subs	r0, #1
     c12:	d31d      	bcc.n	c50 <_sercom_get_async_baud_val+0xc4>
		bit_shift = (uint64_t)1 << i;
     c14:	2420      	movs	r4, #32
     c16:	4264      	negs	r4, r4
     c18:	1904      	adds	r4, r0, r4
     c1a:	d4e6      	bmi.n	bea <_sercom_get_async_baud_val+0x5e>
     c1c:	000d      	movs	r5, r1
     c1e:	40a5      	lsls	r5, r4
     c20:	46a8      	mov	r8, r5
     c22:	000c      	movs	r4, r1
     c24:	4084      	lsls	r4, r0
     c26:	46a1      	mov	r9, r4
		r = r << 1;
     c28:	1892      	adds	r2, r2, r2
     c2a:	415b      	adcs	r3, r3
     c2c:	0014      	movs	r4, r2
     c2e:	001d      	movs	r5, r3
		if (n & bit_shift) {
     c30:	4646      	mov	r6, r8
     c32:	465f      	mov	r7, fp
     c34:	423e      	tst	r6, r7
     c36:	d003      	beq.n	c40 <_sercom_get_async_baud_val+0xb4>
			r |= 0x01;
     c38:	000e      	movs	r6, r1
     c3a:	4326      	orrs	r6, r4
     c3c:	0032      	movs	r2, r6
     c3e:	002b      	movs	r3, r5
		if (r >= d) {
     c40:	9c02      	ldr	r4, [sp, #8]
     c42:	9d03      	ldr	r5, [sp, #12]
     c44:	429d      	cmp	r5, r3
     c46:	d8e3      	bhi.n	c10 <_sercom_get_async_baud_val+0x84>
     c48:	d1d5      	bne.n	bf6 <_sercom_get_async_baud_val+0x6a>
     c4a:	4294      	cmp	r4, r2
     c4c:	d8e0      	bhi.n	c10 <_sercom_get_async_baud_val+0x84>
     c4e:	e7d2      	b.n	bf6 <_sercom_get_async_baud_val+0x6a>
		scale = ((uint64_t)1 << SHIFT) - ratio;
     c50:	2200      	movs	r2, #0
     c52:	2301      	movs	r3, #1
     c54:	9800      	ldr	r0, [sp, #0]
     c56:	9901      	ldr	r1, [sp, #4]
     c58:	1a12      	subs	r2, r2, r0
     c5a:	418b      	sbcs	r3, r1
     c5c:	0019      	movs	r1, r3
		baud_calculated = (65536 * scale) >> SHIFT;
     c5e:	0c13      	lsrs	r3, r2, #16
     c60:	040a      	lsls	r2, r1, #16
     c62:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     c64:	9b05      	ldr	r3, [sp, #20]
     c66:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     c68:	2200      	movs	r2, #0
     c6a:	e79f      	b.n	bac <_sercom_get_async_baud_val+0x20>
	uint64_t baud_calculated = 0;
     c6c:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     c6e:	2b01      	cmp	r3, #1
     c70:	d1f8      	bne.n	c64 <_sercom_get_async_baud_val+0xd8>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     c72:	0f63      	lsrs	r3, r4, #29
     c74:	9304      	str	r3, [sp, #16]
     c76:	00e3      	lsls	r3, r4, #3
     c78:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     c7a:	000a      	movs	r2, r1
     c7c:	2300      	movs	r3, #0
     c7e:	2100      	movs	r1, #0
     c80:	4c34      	ldr	r4, [pc, #208]	; (d54 <_sercom_get_async_baud_val+0x1c8>)
     c82:	47a0      	blx	r4
     c84:	0004      	movs	r4, r0
     c86:	000d      	movs	r5, r1
     c88:	2300      	movs	r3, #0
     c8a:	469c      	mov	ip, r3
     c8c:	9306      	str	r3, [sp, #24]
		bit_shift = (uint64_t)1 << i;
     c8e:	3320      	adds	r3, #32
     c90:	469b      	mov	fp, r3
     c92:	2601      	movs	r6, #1
			if(baud_int < BAUD_INT_MAX) {
     c94:	4663      	mov	r3, ip
     c96:	9307      	str	r3, [sp, #28]
     c98:	e048      	b.n	d2c <_sercom_get_async_baud_val+0x1a0>
		bit_shift = (uint64_t)1 << i;
     c9a:	4659      	mov	r1, fp
     c9c:	1bc9      	subs	r1, r1, r7
     c9e:	0030      	movs	r0, r6
     ca0:	40c8      	lsrs	r0, r1
     ca2:	4682      	mov	sl, r0
     ca4:	e010      	b.n	cc8 <_sercom_get_async_baud_val+0x13c>
			r = r - d;
     ca6:	9800      	ldr	r0, [sp, #0]
     ca8:	9901      	ldr	r1, [sp, #4]
     caa:	1a12      	subs	r2, r2, r0
     cac:	418b      	sbcs	r3, r1
			q |= bit_shift;
     cae:	9902      	ldr	r1, [sp, #8]
     cb0:	4648      	mov	r0, r9
     cb2:	4301      	orrs	r1, r0
     cb4:	9102      	str	r1, [sp, #8]
	for (i = 63; i >= 0; i--) {
     cb6:	3f01      	subs	r7, #1
     cb8:	d325      	bcc.n	d06 <_sercom_get_async_baud_val+0x17a>
		bit_shift = (uint64_t)1 << i;
     cba:	2120      	movs	r1, #32
     cbc:	4249      	negs	r1, r1
     cbe:	1879      	adds	r1, r7, r1
     cc0:	d4eb      	bmi.n	c9a <_sercom_get_async_baud_val+0x10e>
     cc2:	0030      	movs	r0, r6
     cc4:	4088      	lsls	r0, r1
     cc6:	4682      	mov	sl, r0
     cc8:	0031      	movs	r1, r6
     cca:	40b9      	lsls	r1, r7
     ccc:	4689      	mov	r9, r1
		r = r << 1;
     cce:	1892      	adds	r2, r2, r2
     cd0:	415b      	adcs	r3, r3
     cd2:	0010      	movs	r0, r2
     cd4:	0019      	movs	r1, r3
		if (n & bit_shift) {
     cd6:	4644      	mov	r4, r8
     cd8:	464d      	mov	r5, r9
     cda:	402c      	ands	r4, r5
     cdc:	46a4      	mov	ip, r4
     cde:	4654      	mov	r4, sl
     ce0:	9d04      	ldr	r5, [sp, #16]
     ce2:	402c      	ands	r4, r5
     ce4:	46a2      	mov	sl, r4
     ce6:	4664      	mov	r4, ip
     ce8:	4655      	mov	r5, sl
     cea:	432c      	orrs	r4, r5
     cec:	d003      	beq.n	cf6 <_sercom_get_async_baud_val+0x16a>
			r |= 0x01;
     cee:	0034      	movs	r4, r6
     cf0:	4304      	orrs	r4, r0
     cf2:	0022      	movs	r2, r4
     cf4:	000b      	movs	r3, r1
		if (r >= d) {
     cf6:	9800      	ldr	r0, [sp, #0]
     cf8:	9901      	ldr	r1, [sp, #4]
     cfa:	4299      	cmp	r1, r3
     cfc:	d8db      	bhi.n	cb6 <_sercom_get_async_baud_val+0x12a>
     cfe:	d1d2      	bne.n	ca6 <_sercom_get_async_baud_val+0x11a>
     d00:	4290      	cmp	r0, r2
     d02:	d8d8      	bhi.n	cb6 <_sercom_get_async_baud_val+0x12a>
     d04:	e7cf      	b.n	ca6 <_sercom_get_async_baud_val+0x11a>
     d06:	9c00      	ldr	r4, [sp, #0]
     d08:	9d01      	ldr	r5, [sp, #4]
			baud_int -= baud_fp;
     d0a:	9902      	ldr	r1, [sp, #8]
     d0c:	9a07      	ldr	r2, [sp, #28]
     d0e:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     d10:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     d12:	4911      	ldr	r1, [pc, #68]	; (d58 <_sercom_get_async_baud_val+0x1cc>)
     d14:	428b      	cmp	r3, r1
     d16:	d914      	bls.n	d42 <_sercom_get_async_baud_val+0x1b6>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     d18:	9b06      	ldr	r3, [sp, #24]
     d1a:	3301      	adds	r3, #1
     d1c:	b2db      	uxtb	r3, r3
     d1e:	0019      	movs	r1, r3
     d20:	9306      	str	r3, [sp, #24]
     d22:	0013      	movs	r3, r2
     d24:	3301      	adds	r3, #1
     d26:	9307      	str	r3, [sp, #28]
     d28:	2908      	cmp	r1, #8
     d2a:	d008      	beq.n	d3e <_sercom_get_async_baud_val+0x1b2>
	uint64_t q = 0, r = 0, bit_shift;
     d2c:	2300      	movs	r3, #0
     d2e:	9302      	str	r3, [sp, #8]
     d30:	2200      	movs	r2, #0
     d32:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     d34:	213f      	movs	r1, #63	; 0x3f
     d36:	9400      	str	r4, [sp, #0]
     d38:	9501      	str	r5, [sp, #4]
     d3a:	000f      	movs	r7, r1
     d3c:	e7bd      	b.n	cba <_sercom_get_async_baud_val+0x12e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d3e:	2240      	movs	r2, #64	; 0x40
     d40:	e734      	b.n	bac <_sercom_get_async_baud_val+0x20>
     d42:	2240      	movs	r2, #64	; 0x40
		if(baud_fp == BAUD_FP_MAX) {
     d44:	9906      	ldr	r1, [sp, #24]
     d46:	2908      	cmp	r1, #8
     d48:	d100      	bne.n	d4c <_sercom_get_async_baud_val+0x1c0>
     d4a:	e72f      	b.n	bac <_sercom_get_async_baud_val+0x20>
		baud_calculated = baud_int | (baud_fp << 13);
     d4c:	034a      	lsls	r2, r1, #13
     d4e:	431a      	orrs	r2, r3
     d50:	e788      	b.n	c64 <_sercom_get_async_baud_val+0xd8>
     d52:	46c0      	nop			; (mov r8, r8)
     d54:	000061c5 	.word	0x000061c5
     d58:	00001fff 	.word	0x00001fff

00000d5c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     d5c:	b510      	push	{r4, lr}
     d5e:	b082      	sub	sp, #8
     d60:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     d62:	4b0e      	ldr	r3, [pc, #56]	; (d9c <sercom_set_gclk_generator+0x40>)
     d64:	781b      	ldrb	r3, [r3, #0]
     d66:	2b00      	cmp	r3, #0
     d68:	d007      	beq.n	d7a <sercom_set_gclk_generator+0x1e>
     d6a:	2900      	cmp	r1, #0
     d6c:	d105      	bne.n	d7a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     d6e:	4b0b      	ldr	r3, [pc, #44]	; (d9c <sercom_set_gclk_generator+0x40>)
     d70:	785b      	ldrb	r3, [r3, #1]
     d72:	4283      	cmp	r3, r0
     d74:	d010      	beq.n	d98 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     d76:	201d      	movs	r0, #29
     d78:	e00c      	b.n	d94 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     d7a:	a901      	add	r1, sp, #4
     d7c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     d7e:	2013      	movs	r0, #19
     d80:	4b07      	ldr	r3, [pc, #28]	; (da0 <sercom_set_gclk_generator+0x44>)
     d82:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     d84:	2013      	movs	r0, #19
     d86:	4b07      	ldr	r3, [pc, #28]	; (da4 <sercom_set_gclk_generator+0x48>)
     d88:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     d8a:	4b04      	ldr	r3, [pc, #16]	; (d9c <sercom_set_gclk_generator+0x40>)
     d8c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     d8e:	2201      	movs	r2, #1
     d90:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     d92:	2000      	movs	r0, #0
}
     d94:	b002      	add	sp, #8
     d96:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     d98:	2000      	movs	r0, #0
     d9a:	e7fb      	b.n	d94 <sercom_set_gclk_generator+0x38>
     d9c:	20000204 	.word	0x20000204
     da0:	00002189 	.word	0x00002189
     da4:	000020fd 	.word	0x000020fd

00000da8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     da8:	4b40      	ldr	r3, [pc, #256]	; (eac <_sercom_get_default_pad+0x104>)
     daa:	4298      	cmp	r0, r3
     dac:	d031      	beq.n	e12 <_sercom_get_default_pad+0x6a>
     dae:	d90a      	bls.n	dc6 <_sercom_get_default_pad+0x1e>
     db0:	4b3f      	ldr	r3, [pc, #252]	; (eb0 <_sercom_get_default_pad+0x108>)
     db2:	4298      	cmp	r0, r3
     db4:	d04d      	beq.n	e52 <_sercom_get_default_pad+0xaa>
     db6:	4b3f      	ldr	r3, [pc, #252]	; (eb4 <_sercom_get_default_pad+0x10c>)
     db8:	4298      	cmp	r0, r3
     dba:	d05a      	beq.n	e72 <_sercom_get_default_pad+0xca>
     dbc:	4b3e      	ldr	r3, [pc, #248]	; (eb8 <_sercom_get_default_pad+0x110>)
     dbe:	4298      	cmp	r0, r3
     dc0:	d037      	beq.n	e32 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     dc2:	2000      	movs	r0, #0
}
     dc4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     dc6:	4b3d      	ldr	r3, [pc, #244]	; (ebc <_sercom_get_default_pad+0x114>)
     dc8:	4298      	cmp	r0, r3
     dca:	d00c      	beq.n	de6 <_sercom_get_default_pad+0x3e>
     dcc:	4b3c      	ldr	r3, [pc, #240]	; (ec0 <_sercom_get_default_pad+0x118>)
     dce:	4298      	cmp	r0, r3
     dd0:	d1f7      	bne.n	dc2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dd2:	2901      	cmp	r1, #1
     dd4:	d017      	beq.n	e06 <_sercom_get_default_pad+0x5e>
     dd6:	2900      	cmp	r1, #0
     dd8:	d05d      	beq.n	e96 <_sercom_get_default_pad+0xee>
     dda:	2902      	cmp	r1, #2
     ddc:	d015      	beq.n	e0a <_sercom_get_default_pad+0x62>
     dde:	2903      	cmp	r1, #3
     de0:	d015      	beq.n	e0e <_sercom_get_default_pad+0x66>
	return 0;
     de2:	2000      	movs	r0, #0
     de4:	e7ee      	b.n	dc4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     de6:	2901      	cmp	r1, #1
     de8:	d007      	beq.n	dfa <_sercom_get_default_pad+0x52>
     dea:	2900      	cmp	r1, #0
     dec:	d051      	beq.n	e92 <_sercom_get_default_pad+0xea>
     dee:	2902      	cmp	r1, #2
     df0:	d005      	beq.n	dfe <_sercom_get_default_pad+0x56>
     df2:	2903      	cmp	r1, #3
     df4:	d005      	beq.n	e02 <_sercom_get_default_pad+0x5a>
	return 0;
     df6:	2000      	movs	r0, #0
     df8:	e7e4      	b.n	dc4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dfa:	4832      	ldr	r0, [pc, #200]	; (ec4 <_sercom_get_default_pad+0x11c>)
     dfc:	e7e2      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     dfe:	4832      	ldr	r0, [pc, #200]	; (ec8 <_sercom_get_default_pad+0x120>)
     e00:	e7e0      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     e02:	4832      	ldr	r0, [pc, #200]	; (ecc <_sercom_get_default_pad+0x124>)
     e04:	e7de      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     e06:	4832      	ldr	r0, [pc, #200]	; (ed0 <_sercom_get_default_pad+0x128>)
     e08:	e7dc      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     e0a:	4832      	ldr	r0, [pc, #200]	; (ed4 <_sercom_get_default_pad+0x12c>)
     e0c:	e7da      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     e0e:	4832      	ldr	r0, [pc, #200]	; (ed8 <_sercom_get_default_pad+0x130>)
     e10:	e7d8      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     e12:	2901      	cmp	r1, #1
     e14:	d007      	beq.n	e26 <_sercom_get_default_pad+0x7e>
     e16:	2900      	cmp	r1, #0
     e18:	d03f      	beq.n	e9a <_sercom_get_default_pad+0xf2>
     e1a:	2902      	cmp	r1, #2
     e1c:	d005      	beq.n	e2a <_sercom_get_default_pad+0x82>
     e1e:	2903      	cmp	r1, #3
     e20:	d005      	beq.n	e2e <_sercom_get_default_pad+0x86>
	return 0;
     e22:	2000      	movs	r0, #0
     e24:	e7ce      	b.n	dc4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e26:	482d      	ldr	r0, [pc, #180]	; (edc <_sercom_get_default_pad+0x134>)
     e28:	e7cc      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     e2a:	482d      	ldr	r0, [pc, #180]	; (ee0 <_sercom_get_default_pad+0x138>)
     e2c:	e7ca      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     e2e:	482d      	ldr	r0, [pc, #180]	; (ee4 <_sercom_get_default_pad+0x13c>)
     e30:	e7c8      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     e32:	2901      	cmp	r1, #1
     e34:	d007      	beq.n	e46 <_sercom_get_default_pad+0x9e>
     e36:	2900      	cmp	r1, #0
     e38:	d031      	beq.n	e9e <_sercom_get_default_pad+0xf6>
     e3a:	2902      	cmp	r1, #2
     e3c:	d005      	beq.n	e4a <_sercom_get_default_pad+0xa2>
     e3e:	2903      	cmp	r1, #3
     e40:	d005      	beq.n	e4e <_sercom_get_default_pad+0xa6>
	return 0;
     e42:	2000      	movs	r0, #0
     e44:	e7be      	b.n	dc4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e46:	4828      	ldr	r0, [pc, #160]	; (ee8 <_sercom_get_default_pad+0x140>)
     e48:	e7bc      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     e4a:	4828      	ldr	r0, [pc, #160]	; (eec <_sercom_get_default_pad+0x144>)
     e4c:	e7ba      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     e4e:	4828      	ldr	r0, [pc, #160]	; (ef0 <_sercom_get_default_pad+0x148>)
     e50:	e7b8      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     e52:	2901      	cmp	r1, #1
     e54:	d007      	beq.n	e66 <_sercom_get_default_pad+0xbe>
     e56:	2900      	cmp	r1, #0
     e58:	d023      	beq.n	ea2 <_sercom_get_default_pad+0xfa>
     e5a:	2902      	cmp	r1, #2
     e5c:	d005      	beq.n	e6a <_sercom_get_default_pad+0xc2>
     e5e:	2903      	cmp	r1, #3
     e60:	d005      	beq.n	e6e <_sercom_get_default_pad+0xc6>
	return 0;
     e62:	2000      	movs	r0, #0
     e64:	e7ae      	b.n	dc4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e66:	4823      	ldr	r0, [pc, #140]	; (ef4 <_sercom_get_default_pad+0x14c>)
     e68:	e7ac      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     e6a:	4823      	ldr	r0, [pc, #140]	; (ef8 <_sercom_get_default_pad+0x150>)
     e6c:	e7aa      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     e6e:	4823      	ldr	r0, [pc, #140]	; (efc <_sercom_get_default_pad+0x154>)
     e70:	e7a8      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     e72:	2901      	cmp	r1, #1
     e74:	d007      	beq.n	e86 <_sercom_get_default_pad+0xde>
     e76:	2900      	cmp	r1, #0
     e78:	d015      	beq.n	ea6 <_sercom_get_default_pad+0xfe>
     e7a:	2902      	cmp	r1, #2
     e7c:	d005      	beq.n	e8a <_sercom_get_default_pad+0xe2>
     e7e:	2903      	cmp	r1, #3
     e80:	d005      	beq.n	e8e <_sercom_get_default_pad+0xe6>
	return 0;
     e82:	2000      	movs	r0, #0
     e84:	e79e      	b.n	dc4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e86:	481e      	ldr	r0, [pc, #120]	; (f00 <_sercom_get_default_pad+0x158>)
     e88:	e79c      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     e8a:	481e      	ldr	r0, [pc, #120]	; (f04 <_sercom_get_default_pad+0x15c>)
     e8c:	e79a      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     e8e:	481e      	ldr	r0, [pc, #120]	; (f08 <_sercom_get_default_pad+0x160>)
     e90:	e798      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     e92:	481e      	ldr	r0, [pc, #120]	; (f0c <_sercom_get_default_pad+0x164>)
     e94:	e796      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     e96:	2003      	movs	r0, #3
     e98:	e794      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     e9a:	481d      	ldr	r0, [pc, #116]	; (f10 <_sercom_get_default_pad+0x168>)
     e9c:	e792      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     e9e:	481d      	ldr	r0, [pc, #116]	; (f14 <_sercom_get_default_pad+0x16c>)
     ea0:	e790      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     ea2:	481d      	ldr	r0, [pc, #116]	; (f18 <_sercom_get_default_pad+0x170>)
     ea4:	e78e      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     ea6:	481d      	ldr	r0, [pc, #116]	; (f1c <_sercom_get_default_pad+0x174>)
     ea8:	e78c      	b.n	dc4 <_sercom_get_default_pad+0x1c>
     eaa:	46c0      	nop			; (mov r8, r8)
     eac:	42001000 	.word	0x42001000
     eb0:	42001800 	.word	0x42001800
     eb4:	42001c00 	.word	0x42001c00
     eb8:	42001400 	.word	0x42001400
     ebc:	42000800 	.word	0x42000800
     ec0:	42000c00 	.word	0x42000c00
     ec4:	00050003 	.word	0x00050003
     ec8:	00060003 	.word	0x00060003
     ecc:	00070003 	.word	0x00070003
     ed0:	00010003 	.word	0x00010003
     ed4:	001e0003 	.word	0x001e0003
     ed8:	001f0003 	.word	0x001f0003
     edc:	000d0002 	.word	0x000d0002
     ee0:	000e0002 	.word	0x000e0002
     ee4:	000f0002 	.word	0x000f0002
     ee8:	00110003 	.word	0x00110003
     eec:	00120003 	.word	0x00120003
     ef0:	00130003 	.word	0x00130003
     ef4:	003f0005 	.word	0x003f0005
     ef8:	003e0005 	.word	0x003e0005
     efc:	00520005 	.word	0x00520005
     f00:	00170003 	.word	0x00170003
     f04:	00180003 	.word	0x00180003
     f08:	00190003 	.word	0x00190003
     f0c:	00040003 	.word	0x00040003
     f10:	000c0002 	.word	0x000c0002
     f14:	00100003 	.word	0x00100003
     f18:	00530005 	.word	0x00530005
     f1c:	00160003 	.word	0x00160003

00000f20 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     f20:	b530      	push	{r4, r5, lr}
     f22:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     f24:	4b0b      	ldr	r3, [pc, #44]	; (f54 <_sercom_get_sercom_inst_index+0x34>)
     f26:	466a      	mov	r2, sp
     f28:	cb32      	ldmia	r3!, {r1, r4, r5}
     f2a:	c232      	stmia	r2!, {r1, r4, r5}
     f2c:	cb32      	ldmia	r3!, {r1, r4, r5}
     f2e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     f30:	9b00      	ldr	r3, [sp, #0]
     f32:	4283      	cmp	r3, r0
     f34:	d00b      	beq.n	f4e <_sercom_get_sercom_inst_index+0x2e>
     f36:	2301      	movs	r3, #1
     f38:	009a      	lsls	r2, r3, #2
     f3a:	4669      	mov	r1, sp
     f3c:	5852      	ldr	r2, [r2, r1]
     f3e:	4282      	cmp	r2, r0
     f40:	d006      	beq.n	f50 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f42:	3301      	adds	r3, #1
     f44:	2b06      	cmp	r3, #6
     f46:	d1f7      	bne.n	f38 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     f48:	2000      	movs	r0, #0
}
     f4a:	b007      	add	sp, #28
     f4c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f4e:	2300      	movs	r3, #0
			return i;
     f50:	b2d8      	uxtb	r0, r3
     f52:	e7fa      	b.n	f4a <_sercom_get_sercom_inst_index+0x2a>
     f54:	000089ac 	.word	0x000089ac

00000f58 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     f58:	4770      	bx	lr
	...

00000f5c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     f5e:	4b0a      	ldr	r3, [pc, #40]	; (f88 <_sercom_set_handler+0x2c>)
     f60:	781b      	ldrb	r3, [r3, #0]
     f62:	2b00      	cmp	r3, #0
     f64:	d10c      	bne.n	f80 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     f66:	4f09      	ldr	r7, [pc, #36]	; (f8c <_sercom_set_handler+0x30>)
     f68:	4e09      	ldr	r6, [pc, #36]	; (f90 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     f6a:	4d0a      	ldr	r5, [pc, #40]	; (f94 <_sercom_set_handler+0x38>)
     f6c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     f6e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     f70:	195a      	adds	r2, r3, r5
     f72:	6014      	str	r4, [r2, #0]
     f74:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f76:	2b18      	cmp	r3, #24
     f78:	d1f9      	bne.n	f6e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     f7a:	2201      	movs	r2, #1
     f7c:	4b02      	ldr	r3, [pc, #8]	; (f88 <_sercom_set_handler+0x2c>)
     f7e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     f80:	0080      	lsls	r0, r0, #2
     f82:	4b02      	ldr	r3, [pc, #8]	; (f8c <_sercom_set_handler+0x30>)
     f84:	50c1      	str	r1, [r0, r3]
}
     f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f88:	20000206 	.word	0x20000206
     f8c:	20000208 	.word	0x20000208
     f90:	00000f59 	.word	0x00000f59
     f94:	200008e8 	.word	0x200008e8

00000f98 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     f98:	b500      	push	{lr}
     f9a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     f9c:	2309      	movs	r3, #9
     f9e:	466a      	mov	r2, sp
     fa0:	7013      	strb	r3, [r2, #0]
     fa2:	3301      	adds	r3, #1
     fa4:	7053      	strb	r3, [r2, #1]
     fa6:	3301      	adds	r3, #1
     fa8:	7093      	strb	r3, [r2, #2]
     faa:	3301      	adds	r3, #1
     fac:	70d3      	strb	r3, [r2, #3]
     fae:	3301      	adds	r3, #1
     fb0:	7113      	strb	r3, [r2, #4]
     fb2:	3301      	adds	r3, #1
     fb4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     fb6:	4b03      	ldr	r3, [pc, #12]	; (fc4 <_sercom_get_interrupt_vector+0x2c>)
     fb8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     fba:	466b      	mov	r3, sp
     fbc:	5618      	ldrsb	r0, [r3, r0]
}
     fbe:	b003      	add	sp, #12
     fc0:	bd00      	pop	{pc}
     fc2:	46c0      	nop			; (mov r8, r8)
     fc4:	00000f21 	.word	0x00000f21

00000fc8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     fc8:	b510      	push	{r4, lr}
     fca:	4b02      	ldr	r3, [pc, #8]	; (fd4 <SERCOM0_Handler+0xc>)
     fcc:	681b      	ldr	r3, [r3, #0]
     fce:	2000      	movs	r0, #0
     fd0:	4798      	blx	r3
     fd2:	bd10      	pop	{r4, pc}
     fd4:	20000208 	.word	0x20000208

00000fd8 <SERCOM1_Handler>:
     fd8:	b510      	push	{r4, lr}
     fda:	4b02      	ldr	r3, [pc, #8]	; (fe4 <SERCOM1_Handler+0xc>)
     fdc:	685b      	ldr	r3, [r3, #4]
     fde:	2001      	movs	r0, #1
     fe0:	4798      	blx	r3
     fe2:	bd10      	pop	{r4, pc}
     fe4:	20000208 	.word	0x20000208

00000fe8 <SERCOM2_Handler>:
     fe8:	b510      	push	{r4, lr}
     fea:	4b02      	ldr	r3, [pc, #8]	; (ff4 <SERCOM2_Handler+0xc>)
     fec:	689b      	ldr	r3, [r3, #8]
     fee:	2002      	movs	r0, #2
     ff0:	4798      	blx	r3
     ff2:	bd10      	pop	{r4, pc}
     ff4:	20000208 	.word	0x20000208

00000ff8 <SERCOM3_Handler>:
     ff8:	b510      	push	{r4, lr}
     ffa:	4b02      	ldr	r3, [pc, #8]	; (1004 <SERCOM3_Handler+0xc>)
     ffc:	68db      	ldr	r3, [r3, #12]
     ffe:	2003      	movs	r0, #3
    1000:	4798      	blx	r3
    1002:	bd10      	pop	{r4, pc}
    1004:	20000208 	.word	0x20000208

00001008 <SERCOM4_Handler>:
    1008:	b510      	push	{r4, lr}
    100a:	4b02      	ldr	r3, [pc, #8]	; (1014 <SERCOM4_Handler+0xc>)
    100c:	691b      	ldr	r3, [r3, #16]
    100e:	2004      	movs	r0, #4
    1010:	4798      	blx	r3
    1012:	bd10      	pop	{r4, pc}
    1014:	20000208 	.word	0x20000208

00001018 <SERCOM5_Handler>:
    1018:	b510      	push	{r4, lr}
    101a:	4b02      	ldr	r3, [pc, #8]	; (1024 <SERCOM5_Handler+0xc>)
    101c:	695b      	ldr	r3, [r3, #20]
    101e:	2005      	movs	r0, #5
    1020:	4798      	blx	r3
    1022:	bd10      	pop	{r4, pc}
    1024:	20000208 	.word	0x20000208

00001028 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1028:	b5f0      	push	{r4, r5, r6, r7, lr}
    102a:	46d6      	mov	lr, sl
    102c:	464f      	mov	r7, r9
    102e:	b580      	push	{r7, lr}
    1030:	b08b      	sub	sp, #44	; 0x2c
    1032:	4681      	mov	r9, r0
    1034:	000f      	movs	r7, r1
    1036:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1038:	0003      	movs	r3, r0
    103a:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    103c:	680b      	ldr	r3, [r1, #0]
    103e:	079b      	lsls	r3, r3, #30
    1040:	d409      	bmi.n	1056 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1042:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1044:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1046:	07db      	lsls	r3, r3, #31
    1048:	d400      	bmi.n	104c <spi_init+0x24>
    104a:	e098      	b.n	117e <spi_init+0x156>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    104c:	b00b      	add	sp, #44	; 0x2c
    104e:	bc0c      	pop	{r2, r3}
    1050:	4691      	mov	r9, r2
    1052:	469a      	mov	sl, r3
    1054:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    1056:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1058:	9305      	str	r3, [sp, #20]
    105a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    105c:	9306      	str	r3, [sp, #24]
    105e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1060:	9307      	str	r3, [sp, #28]
    1062:	6b53      	ldr	r3, [r2, #52]	; 0x34
    1064:	9308      	str	r3, [sp, #32]
    1066:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1068:	ab05      	add	r3, sp, #20
    106a:	9301      	str	r3, [sp, #4]
    106c:	e00a      	b.n	1084 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    106e:	0038      	movs	r0, r7
    1070:	4b93      	ldr	r3, [pc, #588]	; (12c0 <spi_init+0x298>)
    1072:	4798      	blx	r3
    1074:	e00c      	b.n	1090 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    1076:	230f      	movs	r3, #15
    1078:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    107a:	4281      	cmp	r1, r0
    107c:	d12d      	bne.n	10da <spi_init+0xb2>
    107e:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1080:	2e04      	cmp	r6, #4
    1082:	d02f      	beq.n	10e4 <spi_init+0xbc>
    1084:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1086:	00b3      	lsls	r3, r6, #2
    1088:	9a01      	ldr	r2, [sp, #4]
    108a:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    108c:	2800      	cmp	r0, #0
    108e:	d0ee      	beq.n	106e <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    1090:	1c43      	adds	r3, r0, #1
    1092:	d0f4      	beq.n	107e <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    1094:	0401      	lsls	r1, r0, #16
    1096:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    1098:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    109a:	b2c3      	uxtb	r3, r0
    109c:	469c      	mov	ip, r3
		return NULL;
    109e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    10a0:	0602      	lsls	r2, r0, #24
    10a2:	d405      	bmi.n	10b0 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    10a4:	4663      	mov	r3, ip
    10a6:	095b      	lsrs	r3, r3, #5
    10a8:	01db      	lsls	r3, r3, #7
    10aa:	4a86      	ldr	r2, [pc, #536]	; (12c4 <spi_init+0x29c>)
    10ac:	4692      	mov	sl, r2
    10ae:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    10b0:	221f      	movs	r2, #31
    10b2:	4660      	mov	r0, ip
    10b4:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    10b6:	1898      	adds	r0, r3, r2
    10b8:	3040      	adds	r0, #64	; 0x40
    10ba:	7800      	ldrb	r0, [r0, #0]
    10bc:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    10be:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    10c0:	4655      	mov	r5, sl
    10c2:	07ed      	lsls	r5, r5, #31
    10c4:	d5d9      	bpl.n	107a <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    10c6:	0852      	lsrs	r2, r2, #1
    10c8:	189b      	adds	r3, r3, r2
    10ca:	3330      	adds	r3, #48	; 0x30
    10cc:	7818      	ldrb	r0, [r3, #0]
    10ce:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    10d0:	4663      	mov	r3, ip
    10d2:	07db      	lsls	r3, r3, #31
    10d4:	d5cf      	bpl.n	1076 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    10d6:	0900      	lsrs	r0, r0, #4
    10d8:	e7cf      	b.n	107a <spi_init+0x52>
			module->hw = NULL;
    10da:	2300      	movs	r3, #0
    10dc:	464a      	mov	r2, r9
    10de:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    10e0:	201c      	movs	r0, #28
    10e2:	e7b3      	b.n	104c <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    10e4:	2013      	movs	r0, #19
    10e6:	4b78      	ldr	r3, [pc, #480]	; (12c8 <spi_init+0x2a0>)
    10e8:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    10ea:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    10ec:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    10ee:	2a01      	cmp	r2, #1
    10f0:	d027      	beq.n	1142 <spi_init+0x11a>
	ctrla |= config->mux_setting;
    10f2:	6863      	ldr	r3, [r4, #4]
    10f4:	68a2      	ldr	r2, [r4, #8]
    10f6:	4313      	orrs	r3, r2
    10f8:	68e2      	ldr	r2, [r4, #12]
    10fa:	4313      	orrs	r3, r2
    10fc:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    10fe:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    1100:	7c61      	ldrb	r1, [r4, #17]
    1102:	2900      	cmp	r1, #0
    1104:	d001      	beq.n	110a <spi_init+0xe2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1106:	2180      	movs	r1, #128	; 0x80
    1108:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    110a:	7ca1      	ldrb	r1, [r4, #18]
    110c:	2900      	cmp	r1, #0
    110e:	d002      	beq.n	1116 <spi_init+0xee>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1110:	2180      	movs	r1, #128	; 0x80
    1112:	0289      	lsls	r1, r1, #10
    1114:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    1116:	7ce1      	ldrb	r1, [r4, #19]
    1118:	2900      	cmp	r1, #0
    111a:	d002      	beq.n	1122 <spi_init+0xfa>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    111c:	2180      	movs	r1, #128	; 0x80
    111e:	0089      	lsls	r1, r1, #2
    1120:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    1122:	7d21      	ldrb	r1, [r4, #20]
    1124:	2900      	cmp	r1, #0
    1126:	d002      	beq.n	112e <spi_init+0x106>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1128:	2180      	movs	r1, #128	; 0x80
    112a:	0189      	lsls	r1, r1, #6
    112c:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    112e:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    1130:	2002      	movs	r0, #2
    1132:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    1134:	428b      	cmp	r3, r1
    1136:	d018      	beq.n	116a <spi_init+0x142>
	module->hw = NULL;
    1138:	2300      	movs	r3, #0
    113a:	464a      	mov	r2, r9
    113c:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    113e:	201c      	movs	r0, #28
    1140:	e784      	b.n	104c <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    1142:	aa04      	add	r2, sp, #16
    1144:	0001      	movs	r1, r0
    1146:	69a0      	ldr	r0, [r4, #24]
    1148:	4b60      	ldr	r3, [pc, #384]	; (12cc <spi_init+0x2a4>)
    114a:	4798      	blx	r3
    114c:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    114e:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    1150:	2b00      	cmp	r3, #0
    1152:	d000      	beq.n	1156 <spi_init+0x12e>
    1154:	e77a      	b.n	104c <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    1156:	7b3b      	ldrb	r3, [r7, #12]
    1158:	b2db      	uxtb	r3, r3
    115a:	aa04      	add	r2, sp, #16
    115c:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    115e:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    1160:	429a      	cmp	r2, r3
    1162:	d000      	beq.n	1166 <spi_init+0x13e>
    1164:	e772      	b.n	104c <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    1166:	350c      	adds	r5, #12
    1168:	e7c3      	b.n	10f2 <spi_init+0xca>
			spi_module->CTRLB.reg == ctrlb) {
    116a:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    116c:	4293      	cmp	r3, r2
    116e:	d1e3      	bne.n	1138 <spi_init+0x110>
		module->mode           = config->mode;
    1170:	7823      	ldrb	r3, [r4, #0]
    1172:	464a      	mov	r2, r9
    1174:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
    1176:	7c23      	ldrb	r3, [r4, #16]
    1178:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    117a:	2000      	movs	r0, #0
    117c:	e766      	b.n	104c <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    117e:	0008      	movs	r0, r1
    1180:	4b53      	ldr	r3, [pc, #332]	; (12d0 <spi_init+0x2a8>)
    1182:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1184:	4a53      	ldr	r2, [pc, #332]	; (12d4 <spi_init+0x2ac>)
    1186:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1188:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    118a:	2301      	movs	r3, #1
    118c:	40ab      	lsls	r3, r5
    118e:	430b      	orrs	r3, r1
    1190:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1192:	a909      	add	r1, sp, #36	; 0x24
    1194:	2624      	movs	r6, #36	; 0x24
    1196:	5da3      	ldrb	r3, [r4, r6]
    1198:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    119a:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    119c:	b2c5      	uxtb	r5, r0
    119e:	0028      	movs	r0, r5
    11a0:	4b4d      	ldr	r3, [pc, #308]	; (12d8 <spi_init+0x2b0>)
    11a2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    11a4:	0028      	movs	r0, r5
    11a6:	4b4d      	ldr	r3, [pc, #308]	; (12dc <spi_init+0x2b4>)
    11a8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    11aa:	5da0      	ldrb	r0, [r4, r6]
    11ac:	2100      	movs	r1, #0
    11ae:	4b4c      	ldr	r3, [pc, #304]	; (12e0 <spi_init+0x2b8>)
    11b0:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    11b2:	7823      	ldrb	r3, [r4, #0]
    11b4:	2b01      	cmp	r3, #1
    11b6:	d019      	beq.n	11ec <spi_init+0x1c4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    11b8:	464b      	mov	r3, r9
    11ba:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    11bc:	ab04      	add	r3, sp, #16
    11be:	2280      	movs	r2, #128	; 0x80
    11c0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    11c2:	2200      	movs	r2, #0
    11c4:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    11c6:	2101      	movs	r1, #1
    11c8:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    11ca:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    11cc:	7823      	ldrb	r3, [r4, #0]
    11ce:	2b00      	cmp	r3, #0
    11d0:	d101      	bne.n	11d6 <spi_init+0x1ae>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    11d2:	ab04      	add	r3, sp, #16
    11d4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    11d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    11d8:	9305      	str	r3, [sp, #20]
    11da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    11dc:	9306      	str	r3, [sp, #24]
    11de:	6b23      	ldr	r3, [r4, #48]	; 0x30
    11e0:	9307      	str	r3, [sp, #28]
    11e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    11e4:	9308      	str	r3, [sp, #32]
    11e6:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    11e8:	ad05      	add	r5, sp, #20
    11ea:	e011      	b.n	1210 <spi_init+0x1e8>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    11ec:	683b      	ldr	r3, [r7, #0]
    11ee:	220c      	movs	r2, #12
    11f0:	4313      	orrs	r3, r2
    11f2:	603b      	str	r3, [r7, #0]
    11f4:	e7e0      	b.n	11b8 <spi_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    11f6:	0030      	movs	r0, r6
    11f8:	4b31      	ldr	r3, [pc, #196]	; (12c0 <spi_init+0x298>)
    11fa:	4798      	blx	r3
    11fc:	e00d      	b.n	121a <spi_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    11fe:	a904      	add	r1, sp, #16
    1200:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1202:	0c00      	lsrs	r0, r0, #16
    1204:	b2c0      	uxtb	r0, r0
    1206:	4b37      	ldr	r3, [pc, #220]	; (12e4 <spi_init+0x2bc>)
    1208:	4798      	blx	r3
    120a:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    120c:	2f04      	cmp	r7, #4
    120e:	d007      	beq.n	1220 <spi_init+0x1f8>
    1210:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1212:	00bb      	lsls	r3, r7, #2
    1214:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    1216:	2800      	cmp	r0, #0
    1218:	d0ed      	beq.n	11f6 <spi_init+0x1ce>
		if (current_pinmux != PINMUX_UNUSED) {
    121a:	1c43      	adds	r3, r0, #1
    121c:	d1ef      	bne.n	11fe <spi_init+0x1d6>
    121e:	e7f4      	b.n	120a <spi_init+0x1e2>
	module->mode             = config->mode;
    1220:	7823      	ldrb	r3, [r4, #0]
    1222:	464a      	mov	r2, r9
    1224:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    1226:	7c23      	ldrb	r3, [r4, #16]
    1228:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    122a:	7ca3      	ldrb	r3, [r4, #18]
    122c:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    122e:	7d23      	ldrb	r3, [r4, #20]
    1230:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    1232:	2200      	movs	r2, #0
    1234:	ab02      	add	r3, sp, #8
    1236:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1238:	7823      	ldrb	r3, [r4, #0]
    123a:	2b01      	cmp	r3, #1
    123c:	d028      	beq.n	1290 <spi_init+0x268>
	ctrla |= config->transfer_mode;
    123e:	6863      	ldr	r3, [r4, #4]
    1240:	68a2      	ldr	r2, [r4, #8]
    1242:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    1244:	68e2      	ldr	r2, [r4, #12]
    1246:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    1248:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    124a:	7c62      	ldrb	r2, [r4, #17]
    124c:	2a00      	cmp	r2, #0
    124e:	d103      	bne.n	1258 <spi_init+0x230>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1250:	4a25      	ldr	r2, [pc, #148]	; (12e8 <spi_init+0x2c0>)
    1252:	7892      	ldrb	r2, [r2, #2]
    1254:	0792      	lsls	r2, r2, #30
    1256:	d501      	bpl.n	125c <spi_init+0x234>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1258:	2280      	movs	r2, #128	; 0x80
    125a:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    125c:	7ca2      	ldrb	r2, [r4, #18]
    125e:	2a00      	cmp	r2, #0
    1260:	d002      	beq.n	1268 <spi_init+0x240>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1262:	2280      	movs	r2, #128	; 0x80
    1264:	0292      	lsls	r2, r2, #10
    1266:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    1268:	7ce2      	ldrb	r2, [r4, #19]
    126a:	2a00      	cmp	r2, #0
    126c:	d002      	beq.n	1274 <spi_init+0x24c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    126e:	2280      	movs	r2, #128	; 0x80
    1270:	0092      	lsls	r2, r2, #2
    1272:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    1274:	7d22      	ldrb	r2, [r4, #20]
    1276:	2a00      	cmp	r2, #0
    1278:	d002      	beq.n	1280 <spi_init+0x258>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    127a:	2280      	movs	r2, #128	; 0x80
    127c:	0192      	lsls	r2, r2, #6
    127e:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    1280:	6832      	ldr	r2, [r6, #0]
    1282:	4313      	orrs	r3, r2
    1284:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    1286:	6873      	ldr	r3, [r6, #4]
    1288:	430b      	orrs	r3, r1
    128a:	6073      	str	r3, [r6, #4]
	return STATUS_OK;
    128c:	2000      	movs	r0, #0
    128e:	e6dd      	b.n	104c <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1290:	464b      	mov	r3, r9
    1292:	6818      	ldr	r0, [r3, #0]
    1294:	4b0e      	ldr	r3, [pc, #56]	; (12d0 <spi_init+0x2a8>)
    1296:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1298:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    129a:	b2c0      	uxtb	r0, r0
    129c:	4b0a      	ldr	r3, [pc, #40]	; (12c8 <spi_init+0x2a0>)
    129e:	4798      	blx	r3
    12a0:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    12a2:	ab02      	add	r3, sp, #8
    12a4:	1d9a      	adds	r2, r3, #6
    12a6:	69a0      	ldr	r0, [r4, #24]
    12a8:	4b08      	ldr	r3, [pc, #32]	; (12cc <spi_init+0x2a4>)
    12aa:	4798      	blx	r3
    12ac:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    12ae:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    12b0:	2b00      	cmp	r3, #0
    12b2:	d000      	beq.n	12b6 <spi_init+0x28e>
    12b4:	e6ca      	b.n	104c <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    12b6:	ab02      	add	r3, sp, #8
    12b8:	3306      	adds	r3, #6
    12ba:	781b      	ldrb	r3, [r3, #0]
    12bc:	7333      	strb	r3, [r6, #12]
    12be:	e7be      	b.n	123e <spi_init+0x216>
    12c0:	00000da9 	.word	0x00000da9
    12c4:	41004400 	.word	0x41004400
    12c8:	000021a5 	.word	0x000021a5
    12cc:	00000b65 	.word	0x00000b65
    12d0:	00000f21 	.word	0x00000f21
    12d4:	40000400 	.word	0x40000400
    12d8:	00002189 	.word	0x00002189
    12dc:	000020fd 	.word	0x000020fd
    12e0:	00000d5d 	.word	0x00000d5d
    12e4:	00002281 	.word	0x00002281
    12e8:	41002000 	.word	0x41002000

000012ec <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    12ec:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    12ee:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    12f0:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    12f2:	2c01      	cmp	r4, #1
    12f4:	d001      	beq.n	12fa <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    12f6:	0018      	movs	r0, r3
    12f8:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    12fa:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    12fc:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    12fe:	2c00      	cmp	r4, #0
    1300:	d1f9      	bne.n	12f6 <spi_select_slave+0xa>
		if (select) {
    1302:	2a00      	cmp	r2, #0
    1304:	d058      	beq.n	13b8 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    1306:	784b      	ldrb	r3, [r1, #1]
    1308:	2b00      	cmp	r3, #0
    130a:	d044      	beq.n	1396 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    130c:	6803      	ldr	r3, [r0, #0]
    130e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    1310:	07db      	lsls	r3, r3, #31
    1312:	d410      	bmi.n	1336 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    1314:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1316:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1318:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    131a:	2900      	cmp	r1, #0
    131c:	d104      	bne.n	1328 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    131e:	0953      	lsrs	r3, r2, #5
    1320:	01db      	lsls	r3, r3, #7
    1322:	492e      	ldr	r1, [pc, #184]	; (13dc <spi_select_slave+0xf0>)
    1324:	468c      	mov	ip, r1
    1326:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1328:	211f      	movs	r1, #31
    132a:	4011      	ands	r1, r2
    132c:	2201      	movs	r2, #1
    132e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1330:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    1332:	2305      	movs	r3, #5
    1334:	e7df      	b.n	12f6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1336:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1338:	09d4      	lsrs	r4, r2, #7
		return NULL;
    133a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    133c:	2c00      	cmp	r4, #0
    133e:	d104      	bne.n	134a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    1340:	0953      	lsrs	r3, r2, #5
    1342:	01db      	lsls	r3, r3, #7
    1344:	4c25      	ldr	r4, [pc, #148]	; (13dc <spi_select_slave+0xf0>)
    1346:	46a4      	mov	ip, r4
    1348:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    134a:	241f      	movs	r4, #31
    134c:	4014      	ands	r4, r2
    134e:	2201      	movs	r2, #1
    1350:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    1352:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1354:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1356:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1358:	07d2      	lsls	r2, r2, #31
    135a:	d501      	bpl.n	1360 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    135c:	788a      	ldrb	r2, [r1, #2]
    135e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    1360:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    1362:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    1364:	2a00      	cmp	r2, #0
    1366:	d1c6      	bne.n	12f6 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1368:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    136a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    136c:	7e13      	ldrb	r3, [r2, #24]
    136e:	420b      	tst	r3, r1
    1370:	d0fc      	beq.n	136c <spi_select_slave+0x80>
    1372:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    1374:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1376:	0749      	lsls	r1, r1, #29
    1378:	d5bd      	bpl.n	12f6 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    137a:	8b53      	ldrh	r3, [r2, #26]
    137c:	075b      	lsls	r3, r3, #29
    137e:	d501      	bpl.n	1384 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1380:	2304      	movs	r3, #4
    1382:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1384:	7983      	ldrb	r3, [r0, #6]
    1386:	2b01      	cmp	r3, #1
    1388:	d002      	beq.n	1390 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    138a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    138c:	2300      	movs	r3, #0
    138e:	e7b2      	b.n	12f6 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1390:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1392:	2300      	movs	r3, #0
    1394:	e7af      	b.n	12f6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1396:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1398:	09d1      	lsrs	r1, r2, #7
		return NULL;
    139a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    139c:	2900      	cmp	r1, #0
    139e:	d104      	bne.n	13aa <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    13a0:	0953      	lsrs	r3, r2, #5
    13a2:	01db      	lsls	r3, r3, #7
    13a4:	490d      	ldr	r1, [pc, #52]	; (13dc <spi_select_slave+0xf0>)
    13a6:	468c      	mov	ip, r1
    13a8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    13aa:	211f      	movs	r1, #31
    13ac:	4011      	ands	r1, r2
    13ae:	2201      	movs	r2, #1
    13b0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    13b2:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    13b4:	2300      	movs	r3, #0
    13b6:	e79e      	b.n	12f6 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    13b8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    13ba:	09d1      	lsrs	r1, r2, #7
		return NULL;
    13bc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    13be:	2900      	cmp	r1, #0
    13c0:	d104      	bne.n	13cc <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    13c2:	0953      	lsrs	r3, r2, #5
    13c4:	01db      	lsls	r3, r3, #7
    13c6:	4905      	ldr	r1, [pc, #20]	; (13dc <spi_select_slave+0xf0>)
    13c8:	468c      	mov	ip, r1
    13ca:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    13cc:	211f      	movs	r1, #31
    13ce:	4011      	ands	r1, r2
    13d0:	2201      	movs	r2, #1
    13d2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    13d4:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    13d6:	2300      	movs	r3, #0
    13d8:	e78d      	b.n	12f6 <spi_select_slave+0xa>
    13da:	46c0      	nop			; (mov r8, r8)
    13dc:	41004400 	.word	0x41004400

000013e0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    13e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13e2:	46de      	mov	lr, fp
    13e4:	4657      	mov	r7, sl
    13e6:	464e      	mov	r6, r9
    13e8:	4645      	mov	r5, r8
    13ea:	b5e0      	push	{r5, r6, r7, lr}
    13ec:	b091      	sub	sp, #68	; 0x44
    13ee:	0005      	movs	r5, r0
    13f0:	000c      	movs	r4, r1
    13f2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    13f4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    13f6:	0008      	movs	r0, r1
    13f8:	4bbb      	ldr	r3, [pc, #748]	; (16e8 <usart_init+0x308>)
    13fa:	4798      	blx	r3
    13fc:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    13fe:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1400:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1402:	07db      	lsls	r3, r3, #31
    1404:	d506      	bpl.n	1414 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1406:	b011      	add	sp, #68	; 0x44
    1408:	bc3c      	pop	{r2, r3, r4, r5}
    140a:	4690      	mov	r8, r2
    140c:	4699      	mov	r9, r3
    140e:	46a2      	mov	sl, r4
    1410:	46ab      	mov	fp, r5
    1412:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1414:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1416:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1418:	079b      	lsls	r3, r3, #30
    141a:	d4f4      	bmi.n	1406 <usart_init+0x26>
    141c:	49b3      	ldr	r1, [pc, #716]	; (16ec <usart_init+0x30c>)
    141e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1420:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1422:	2301      	movs	r3, #1
    1424:	40bb      	lsls	r3, r7
    1426:	4303      	orrs	r3, r0
    1428:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    142a:	a90f      	add	r1, sp, #60	; 0x3c
    142c:	272d      	movs	r7, #45	; 0x2d
    142e:	5df3      	ldrb	r3, [r6, r7]
    1430:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1432:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1434:	b2d3      	uxtb	r3, r2
    1436:	9302      	str	r3, [sp, #8]
    1438:	0018      	movs	r0, r3
    143a:	4bad      	ldr	r3, [pc, #692]	; (16f0 <usart_init+0x310>)
    143c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    143e:	9802      	ldr	r0, [sp, #8]
    1440:	4bac      	ldr	r3, [pc, #688]	; (16f4 <usart_init+0x314>)
    1442:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1444:	5df0      	ldrb	r0, [r6, r7]
    1446:	2100      	movs	r1, #0
    1448:	4bab      	ldr	r3, [pc, #684]	; (16f8 <usart_init+0x318>)
    144a:	4798      	blx	r3
	module->character_size = config->character_size;
    144c:	7af3      	ldrb	r3, [r6, #11]
    144e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1450:	2324      	movs	r3, #36	; 0x24
    1452:	5cf3      	ldrb	r3, [r6, r3]
    1454:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1456:	2325      	movs	r3, #37	; 0x25
    1458:	5cf3      	ldrb	r3, [r6, r3]
    145a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    145c:	7ef3      	ldrb	r3, [r6, #27]
    145e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1460:	7f33      	ldrb	r3, [r6, #28]
    1462:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1464:	682b      	ldr	r3, [r5, #0]
    1466:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1468:	0018      	movs	r0, r3
    146a:	4b9f      	ldr	r3, [pc, #636]	; (16e8 <usart_init+0x308>)
    146c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    146e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1470:	2200      	movs	r2, #0
    1472:	230e      	movs	r3, #14
    1474:	a906      	add	r1, sp, #24
    1476:	468c      	mov	ip, r1
    1478:	4463      	add	r3, ip
    147a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    147c:	8a32      	ldrh	r2, [r6, #16]
    147e:	9202      	str	r2, [sp, #8]
    1480:	2380      	movs	r3, #128	; 0x80
    1482:	01db      	lsls	r3, r3, #7
    1484:	429a      	cmp	r2, r3
    1486:	d100      	bne.n	148a <usart_init+0xaa>
    1488:	e09c      	b.n	15c4 <usart_init+0x1e4>
    148a:	d90f      	bls.n	14ac <usart_init+0xcc>
    148c:	23c0      	movs	r3, #192	; 0xc0
    148e:	01db      	lsls	r3, r3, #7
    1490:	9a02      	ldr	r2, [sp, #8]
    1492:	429a      	cmp	r2, r3
    1494:	d100      	bne.n	1498 <usart_init+0xb8>
    1496:	e090      	b.n	15ba <usart_init+0x1da>
    1498:	2380      	movs	r3, #128	; 0x80
    149a:	021b      	lsls	r3, r3, #8
    149c:	429a      	cmp	r2, r3
    149e:	d000      	beq.n	14a2 <usart_init+0xc2>
    14a0:	e11d      	b.n	16de <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    14a2:	2303      	movs	r3, #3
    14a4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    14a6:	2300      	movs	r3, #0
    14a8:	9307      	str	r3, [sp, #28]
    14aa:	e008      	b.n	14be <usart_init+0xde>
	switch (config->sample_rate) {
    14ac:	2380      	movs	r3, #128	; 0x80
    14ae:	019b      	lsls	r3, r3, #6
    14b0:	429a      	cmp	r2, r3
    14b2:	d000      	beq.n	14b6 <usart_init+0xd6>
    14b4:	e113      	b.n	16de <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    14b6:	2310      	movs	r3, #16
    14b8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    14ba:	3b0f      	subs	r3, #15
    14bc:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    14be:	6833      	ldr	r3, [r6, #0]
    14c0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    14c2:	68f3      	ldr	r3, [r6, #12]
    14c4:	469b      	mov	fp, r3
		config->sample_adjustment |
    14c6:	6973      	ldr	r3, [r6, #20]
    14c8:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    14ca:	7e33      	ldrb	r3, [r6, #24]
    14cc:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    14ce:	2326      	movs	r3, #38	; 0x26
    14d0:	5cf3      	ldrb	r3, [r6, r3]
    14d2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    14d4:	6873      	ldr	r3, [r6, #4]
    14d6:	4699      	mov	r9, r3
	switch (transfer_mode)
    14d8:	2b00      	cmp	r3, #0
    14da:	d100      	bne.n	14de <usart_init+0xfe>
    14dc:	e09e      	b.n	161c <usart_init+0x23c>
    14de:	2380      	movs	r3, #128	; 0x80
    14e0:	055b      	lsls	r3, r3, #21
    14e2:	4599      	cmp	r9, r3
    14e4:	d100      	bne.n	14e8 <usart_init+0x108>
    14e6:	e082      	b.n	15ee <usart_init+0x20e>
	if(config->encoding_format_enable) {
    14e8:	7e73      	ldrb	r3, [r6, #25]
    14ea:	2b00      	cmp	r3, #0
    14ec:	d002      	beq.n	14f4 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    14ee:	7eb3      	ldrb	r3, [r6, #26]
    14f0:	4642      	mov	r2, r8
    14f2:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    14f4:	682a      	ldr	r2, [r5, #0]
    14f6:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    14f8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    14fa:	2b00      	cmp	r3, #0
    14fc:	d1fc      	bne.n	14f8 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    14fe:	330e      	adds	r3, #14
    1500:	aa06      	add	r2, sp, #24
    1502:	4694      	mov	ip, r2
    1504:	4463      	add	r3, ip
    1506:	881b      	ldrh	r3, [r3, #0]
    1508:	4642      	mov	r2, r8
    150a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    150c:	9b05      	ldr	r3, [sp, #20]
    150e:	465a      	mov	r2, fp
    1510:	4313      	orrs	r3, r2
    1512:	9a03      	ldr	r2, [sp, #12]
    1514:	4313      	orrs	r3, r2
    1516:	464a      	mov	r2, r9
    1518:	4313      	orrs	r3, r2
    151a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    151c:	9b04      	ldr	r3, [sp, #16]
    151e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1520:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1522:	4653      	mov	r3, sl
    1524:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1526:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1528:	2327      	movs	r3, #39	; 0x27
    152a:	5cf3      	ldrb	r3, [r6, r3]
    152c:	2b00      	cmp	r3, #0
    152e:	d101      	bne.n	1534 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1530:	3304      	adds	r3, #4
    1532:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1534:	7e73      	ldrb	r3, [r6, #25]
    1536:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1538:	7f32      	ldrb	r2, [r6, #28]
    153a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    153c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    153e:	7f72      	ldrb	r2, [r6, #29]
    1540:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1542:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1544:	2224      	movs	r2, #36	; 0x24
    1546:	5cb2      	ldrb	r2, [r6, r2]
    1548:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    154a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    154c:	2225      	movs	r2, #37	; 0x25
    154e:	5cb2      	ldrb	r2, [r6, r2]
    1550:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1552:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1554:	7af1      	ldrb	r1, [r6, #11]
    1556:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1558:	8933      	ldrh	r3, [r6, #8]
    155a:	2bff      	cmp	r3, #255	; 0xff
    155c:	d100      	bne.n	1560 <usart_init+0x180>
    155e:	e081      	b.n	1664 <usart_init+0x284>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1560:	2280      	movs	r2, #128	; 0x80
    1562:	0452      	lsls	r2, r2, #17
    1564:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1566:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1568:	232c      	movs	r3, #44	; 0x2c
    156a:	5cf3      	ldrb	r3, [r6, r3]
    156c:	2b00      	cmp	r3, #0
    156e:	d103      	bne.n	1578 <usart_init+0x198>
    1570:	4b62      	ldr	r3, [pc, #392]	; (16fc <usart_init+0x31c>)
    1572:	789b      	ldrb	r3, [r3, #2]
    1574:	079b      	lsls	r3, r3, #30
    1576:	d501      	bpl.n	157c <usart_init+0x19c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1578:	2380      	movs	r3, #128	; 0x80
    157a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    157c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    157e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1580:	2b00      	cmp	r3, #0
    1582:	d1fc      	bne.n	157e <usart_init+0x19e>
	usart_hw->CTRLB.reg = ctrlb;
    1584:	4643      	mov	r3, r8
    1586:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1588:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    158a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    158c:	2b00      	cmp	r3, #0
    158e:	d1fc      	bne.n	158a <usart_init+0x1aa>
	usart_hw->CTRLA.reg = ctrla;
    1590:	4643      	mov	r3, r8
    1592:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1594:	ab0e      	add	r3, sp, #56	; 0x38
    1596:	2280      	movs	r2, #128	; 0x80
    1598:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    159a:	2200      	movs	r2, #0
    159c:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    159e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    15a0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    15a2:	6b33      	ldr	r3, [r6, #48]	; 0x30
    15a4:	930a      	str	r3, [sp, #40]	; 0x28
    15a6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    15a8:	930b      	str	r3, [sp, #44]	; 0x2c
    15aa:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    15ac:	930c      	str	r3, [sp, #48]	; 0x30
    15ae:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    15b0:	9302      	str	r3, [sp, #8]
    15b2:	930d      	str	r3, [sp, #52]	; 0x34
    15b4:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    15b6:	ae0a      	add	r6, sp, #40	; 0x28
    15b8:	e063      	b.n	1682 <usart_init+0x2a2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    15ba:	2308      	movs	r3, #8
    15bc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    15be:	3b07      	subs	r3, #7
    15c0:	9307      	str	r3, [sp, #28]
    15c2:	e77c      	b.n	14be <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    15c4:	6833      	ldr	r3, [r6, #0]
    15c6:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    15c8:	68f3      	ldr	r3, [r6, #12]
    15ca:	469b      	mov	fp, r3
		config->sample_adjustment |
    15cc:	6973      	ldr	r3, [r6, #20]
    15ce:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    15d0:	7e33      	ldrb	r3, [r6, #24]
    15d2:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    15d4:	2326      	movs	r3, #38	; 0x26
    15d6:	5cf3      	ldrb	r3, [r6, r3]
    15d8:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    15da:	6873      	ldr	r3, [r6, #4]
    15dc:	4699      	mov	r9, r3
	switch (transfer_mode)
    15de:	2b00      	cmp	r3, #0
    15e0:	d018      	beq.n	1614 <usart_init+0x234>
    15e2:	2380      	movs	r3, #128	; 0x80
    15e4:	055b      	lsls	r3, r3, #21
    15e6:	4599      	cmp	r9, r3
    15e8:	d001      	beq.n	15ee <usart_init+0x20e>
	enum status_code status_code = STATUS_OK;
    15ea:	2000      	movs	r0, #0
    15ec:	e025      	b.n	163a <usart_init+0x25a>
			if (!config->use_external_clock) {
    15ee:	2327      	movs	r3, #39	; 0x27
    15f0:	5cf3      	ldrb	r3, [r6, r3]
    15f2:	2b00      	cmp	r3, #0
    15f4:	d000      	beq.n	15f8 <usart_init+0x218>
    15f6:	e777      	b.n	14e8 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    15f8:	6a33      	ldr	r3, [r6, #32]
    15fa:	001f      	movs	r7, r3
    15fc:	b2c0      	uxtb	r0, r0
    15fe:	4b40      	ldr	r3, [pc, #256]	; (1700 <usart_init+0x320>)
    1600:	4798      	blx	r3
    1602:	0001      	movs	r1, r0
    1604:	220e      	movs	r2, #14
    1606:	ab06      	add	r3, sp, #24
    1608:	469c      	mov	ip, r3
    160a:	4462      	add	r2, ip
    160c:	0038      	movs	r0, r7
    160e:	4b3d      	ldr	r3, [pc, #244]	; (1704 <usart_init+0x324>)
    1610:	4798      	blx	r3
    1612:	e012      	b.n	163a <usart_init+0x25a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1614:	2308      	movs	r3, #8
    1616:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1618:	2300      	movs	r3, #0
    161a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    161c:	2327      	movs	r3, #39	; 0x27
    161e:	5cf3      	ldrb	r3, [r6, r3]
    1620:	2b00      	cmp	r3, #0
    1622:	d00e      	beq.n	1642 <usart_init+0x262>
				status_code =
    1624:	9b06      	ldr	r3, [sp, #24]
    1626:	9300      	str	r3, [sp, #0]
    1628:	9b07      	ldr	r3, [sp, #28]
    162a:	220e      	movs	r2, #14
    162c:	a906      	add	r1, sp, #24
    162e:	468c      	mov	ip, r1
    1630:	4462      	add	r2, ip
    1632:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1634:	6a30      	ldr	r0, [r6, #32]
    1636:	4f34      	ldr	r7, [pc, #208]	; (1708 <usart_init+0x328>)
    1638:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    163a:	2800      	cmp	r0, #0
    163c:	d000      	beq.n	1640 <usart_init+0x260>
    163e:	e6e2      	b.n	1406 <usart_init+0x26>
    1640:	e752      	b.n	14e8 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    1642:	6a33      	ldr	r3, [r6, #32]
    1644:	001f      	movs	r7, r3
    1646:	b2c0      	uxtb	r0, r0
    1648:	4b2d      	ldr	r3, [pc, #180]	; (1700 <usart_init+0x320>)
    164a:	4798      	blx	r3
    164c:	0001      	movs	r1, r0
				status_code =
    164e:	9b06      	ldr	r3, [sp, #24]
    1650:	9300      	str	r3, [sp, #0]
    1652:	9b07      	ldr	r3, [sp, #28]
    1654:	220e      	movs	r2, #14
    1656:	a806      	add	r0, sp, #24
    1658:	4684      	mov	ip, r0
    165a:	4462      	add	r2, ip
    165c:	0038      	movs	r0, r7
    165e:	4f2a      	ldr	r7, [pc, #168]	; (1708 <usart_init+0x328>)
    1660:	47b8      	blx	r7
    1662:	e7ea      	b.n	163a <usart_init+0x25a>
		if(config->lin_slave_enable) {
    1664:	7ef3      	ldrb	r3, [r6, #27]
    1666:	2b00      	cmp	r3, #0
    1668:	d100      	bne.n	166c <usart_init+0x28c>
    166a:	e77d      	b.n	1568 <usart_init+0x188>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    166c:	2380      	movs	r3, #128	; 0x80
    166e:	04db      	lsls	r3, r3, #19
    1670:	431f      	orrs	r7, r3
    1672:	e779      	b.n	1568 <usart_init+0x188>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1674:	0020      	movs	r0, r4
    1676:	4b25      	ldr	r3, [pc, #148]	; (170c <usart_init+0x32c>)
    1678:	4798      	blx	r3
    167a:	e007      	b.n	168c <usart_init+0x2ac>
    167c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    167e:	2f04      	cmp	r7, #4
    1680:	d00d      	beq.n	169e <usart_init+0x2be>
    1682:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1684:	00bb      	lsls	r3, r7, #2
    1686:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1688:	2800      	cmp	r0, #0
    168a:	d0f3      	beq.n	1674 <usart_init+0x294>
		if (current_pinmux != PINMUX_UNUSED) {
    168c:	1c43      	adds	r3, r0, #1
    168e:	d0f5      	beq.n	167c <usart_init+0x29c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1690:	a90e      	add	r1, sp, #56	; 0x38
    1692:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1694:	0c00      	lsrs	r0, r0, #16
    1696:	b2c0      	uxtb	r0, r0
    1698:	4b1d      	ldr	r3, [pc, #116]	; (1710 <usart_init+0x330>)
    169a:	4798      	blx	r3
    169c:	e7ee      	b.n	167c <usart_init+0x29c>
		module->callback[i]            = NULL;
    169e:	2300      	movs	r3, #0
    16a0:	60eb      	str	r3, [r5, #12]
    16a2:	612b      	str	r3, [r5, #16]
    16a4:	616b      	str	r3, [r5, #20]
    16a6:	61ab      	str	r3, [r5, #24]
    16a8:	61eb      	str	r3, [r5, #28]
    16aa:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    16ac:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    16ae:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    16b0:	2200      	movs	r2, #0
    16b2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    16b4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    16b6:	3330      	adds	r3, #48	; 0x30
    16b8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    16ba:	3301      	adds	r3, #1
    16bc:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    16be:	3301      	adds	r3, #1
    16c0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    16c2:	3301      	adds	r3, #1
    16c4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    16c6:	6828      	ldr	r0, [r5, #0]
    16c8:	4b07      	ldr	r3, [pc, #28]	; (16e8 <usart_init+0x308>)
    16ca:	4798      	blx	r3
    16cc:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    16ce:	4911      	ldr	r1, [pc, #68]	; (1714 <usart_init+0x334>)
    16d0:	4b11      	ldr	r3, [pc, #68]	; (1718 <usart_init+0x338>)
    16d2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    16d4:	00a4      	lsls	r4, r4, #2
    16d6:	4b11      	ldr	r3, [pc, #68]	; (171c <usart_init+0x33c>)
    16d8:	50e5      	str	r5, [r4, r3]
	return status_code;
    16da:	2000      	movs	r0, #0
    16dc:	e693      	b.n	1406 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    16de:	2310      	movs	r3, #16
    16e0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    16e2:	2300      	movs	r3, #0
    16e4:	9307      	str	r3, [sp, #28]
    16e6:	e6ea      	b.n	14be <usart_init+0xde>
    16e8:	00000f21 	.word	0x00000f21
    16ec:	40000400 	.word	0x40000400
    16f0:	00002189 	.word	0x00002189
    16f4:	000020fd 	.word	0x000020fd
    16f8:	00000d5d 	.word	0x00000d5d
    16fc:	41002000 	.word	0x41002000
    1700:	000021a5 	.word	0x000021a5
    1704:	00000b65 	.word	0x00000b65
    1708:	00000b8d 	.word	0x00000b8d
    170c:	00000da9 	.word	0x00000da9
    1710:	00002281 	.word	0x00002281
    1714:	000018a1 	.word	0x000018a1
    1718:	00000f5d 	.word	0x00000f5d
    171c:	200008e8 	.word	0x200008e8

00001720 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1720:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1722:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1724:	2a00      	cmp	r2, #0
    1726:	d101      	bne.n	172c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1728:	0018      	movs	r0, r3
    172a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    172c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    172e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1730:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1732:	2a00      	cmp	r2, #0
    1734:	d1f8      	bne.n	1728 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1736:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1738:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    173a:	2a00      	cmp	r2, #0
    173c:	d1fc      	bne.n	1738 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    173e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1740:	2102      	movs	r1, #2
    1742:	7e1a      	ldrb	r2, [r3, #24]
    1744:	420a      	tst	r2, r1
    1746:	d0fc      	beq.n	1742 <usart_write_wait+0x22>
	return STATUS_OK;
    1748:	2300      	movs	r3, #0
    174a:	e7ed      	b.n	1728 <usart_write_wait+0x8>

0000174c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    174c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    174e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1750:	2a00      	cmp	r2, #0
    1752:	d101      	bne.n	1758 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1754:	0018      	movs	r0, r3
    1756:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1758:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    175a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    175c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    175e:	2a00      	cmp	r2, #0
    1760:	d1f8      	bne.n	1754 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1762:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1764:	7e10      	ldrb	r0, [r2, #24]
    1766:	0740      	lsls	r0, r0, #29
    1768:	d5f4      	bpl.n	1754 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    176a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    176c:	2b00      	cmp	r3, #0
    176e:	d1fc      	bne.n	176a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1770:	8b53      	ldrh	r3, [r2, #26]
    1772:	b2db      	uxtb	r3, r3
	if (error_code) {
    1774:	0698      	lsls	r0, r3, #26
    1776:	d01d      	beq.n	17b4 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1778:	0798      	lsls	r0, r3, #30
    177a:	d503      	bpl.n	1784 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    177c:	2302      	movs	r3, #2
    177e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1780:	3318      	adds	r3, #24
    1782:	e7e7      	b.n	1754 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1784:	0758      	lsls	r0, r3, #29
    1786:	d503      	bpl.n	1790 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1788:	2304      	movs	r3, #4
    178a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    178c:	331a      	adds	r3, #26
    178e:	e7e1      	b.n	1754 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1790:	07d8      	lsls	r0, r3, #31
    1792:	d503      	bpl.n	179c <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1794:	2301      	movs	r3, #1
    1796:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1798:	3312      	adds	r3, #18
    179a:	e7db      	b.n	1754 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    179c:	06d8      	lsls	r0, r3, #27
    179e:	d503      	bpl.n	17a8 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    17a0:	2310      	movs	r3, #16
    17a2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    17a4:	3332      	adds	r3, #50	; 0x32
    17a6:	e7d5      	b.n	1754 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    17a8:	069b      	lsls	r3, r3, #26
    17aa:	d503      	bpl.n	17b4 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    17ac:	2320      	movs	r3, #32
    17ae:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    17b0:	3321      	adds	r3, #33	; 0x21
    17b2:	e7cf      	b.n	1754 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    17b4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    17b6:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    17b8:	2300      	movs	r3, #0
    17ba:	e7cb      	b.n	1754 <usart_read_wait+0x8>

000017bc <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    17bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17be:	0006      	movs	r6, r0
    17c0:	000c      	movs	r4, r1
    17c2:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    17c4:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    17c6:	4b0a      	ldr	r3, [pc, #40]	; (17f0 <_usart_write_buffer+0x34>)
    17c8:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    17ca:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    17cc:	b29b      	uxth	r3, r3
    17ce:	2b00      	cmp	r3, #0
    17d0:	d003      	beq.n	17da <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    17d2:	4b08      	ldr	r3, [pc, #32]	; (17f4 <_usart_write_buffer+0x38>)
    17d4:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    17d6:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    17d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    17da:	85f5      	strh	r5, [r6, #46]	; 0x2e
    17dc:	4b05      	ldr	r3, [pc, #20]	; (17f4 <_usart_write_buffer+0x38>)
    17de:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    17e0:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    17e2:	2205      	movs	r2, #5
    17e4:	2333      	movs	r3, #51	; 0x33
    17e6:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    17e8:	3b32      	subs	r3, #50	; 0x32
    17ea:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    17ec:	2000      	movs	r0, #0
    17ee:	e7f3      	b.n	17d8 <_usart_write_buffer+0x1c>
    17f0:	0000086d 	.word	0x0000086d
    17f4:	000008ad 	.word	0x000008ad

000017f8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    17f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17fa:	0004      	movs	r4, r0
    17fc:	000d      	movs	r5, r1
    17fe:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1800:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    1802:	4b0f      	ldr	r3, [pc, #60]	; (1840 <_usart_read_buffer+0x48>)
    1804:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    1806:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1808:	b29b      	uxth	r3, r3
    180a:	2b00      	cmp	r3, #0
    180c:	d003      	beq.n	1816 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    180e:	4b0d      	ldr	r3, [pc, #52]	; (1844 <_usart_read_buffer+0x4c>)
    1810:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1812:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    1814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    1816:	85a6      	strh	r6, [r4, #44]	; 0x2c
    1818:	4b0a      	ldr	r3, [pc, #40]	; (1844 <_usart_read_buffer+0x4c>)
    181a:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    181c:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    181e:	2205      	movs	r2, #5
    1820:	2332      	movs	r3, #50	; 0x32
    1822:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1824:	3b2e      	subs	r3, #46	; 0x2e
    1826:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    1828:	7a23      	ldrb	r3, [r4, #8]
    182a:	2b00      	cmp	r3, #0
    182c:	d001      	beq.n	1832 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    182e:	2320      	movs	r3, #32
    1830:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    1832:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    1834:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    1836:	2b00      	cmp	r3, #0
    1838:	d0ec      	beq.n	1814 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    183a:	2308      	movs	r3, #8
    183c:	75bb      	strb	r3, [r7, #22]
    183e:	e7e9      	b.n	1814 <_usart_read_buffer+0x1c>
    1840:	0000086d 	.word	0x0000086d
    1844:	000008ad 	.word	0x000008ad

00001848 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1848:	1c93      	adds	r3, r2, #2
    184a:	009b      	lsls	r3, r3, #2
    184c:	18c3      	adds	r3, r0, r3
    184e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    1850:	2130      	movs	r1, #48	; 0x30
    1852:	2301      	movs	r3, #1
    1854:	4093      	lsls	r3, r2
    1856:	001a      	movs	r2, r3
    1858:	5c43      	ldrb	r3, [r0, r1]
    185a:	4313      	orrs	r3, r2
    185c:	5443      	strb	r3, [r0, r1]
}
    185e:	4770      	bx	lr

00001860 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1860:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1862:	2317      	movs	r3, #23
	if (length == 0) {
    1864:	2a00      	cmp	r2, #0
    1866:	d101      	bne.n	186c <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    1868:	0018      	movs	r0, r3
    186a:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    186c:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    186e:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    1870:	2c00      	cmp	r4, #0
    1872:	d0f9      	beq.n	1868 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    1874:	4b01      	ldr	r3, [pc, #4]	; (187c <usart_write_buffer_job+0x1c>)
    1876:	4798      	blx	r3
    1878:	0003      	movs	r3, r0
    187a:	e7f5      	b.n	1868 <usart_write_buffer_job+0x8>
    187c:	000017bd 	.word	0x000017bd

00001880 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1880:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1882:	2317      	movs	r3, #23
	if (length == 0) {
    1884:	2a00      	cmp	r2, #0
    1886:	d101      	bne.n	188c <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    1888:	0018      	movs	r0, r3
    188a:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    188c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    188e:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    1890:	2c00      	cmp	r4, #0
    1892:	d0f9      	beq.n	1888 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    1894:	4b01      	ldr	r3, [pc, #4]	; (189c <usart_read_buffer_job+0x1c>)
    1896:	4798      	blx	r3
    1898:	0003      	movs	r3, r0
    189a:	e7f5      	b.n	1888 <usart_read_buffer_job+0x8>
    189c:	000017f9 	.word	0x000017f9

000018a0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    18a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    18a2:	0080      	lsls	r0, r0, #2
    18a4:	4b62      	ldr	r3, [pc, #392]	; (1a30 <_usart_interrupt_handler+0x190>)
    18a6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    18a8:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    18aa:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    18ac:	2b00      	cmp	r3, #0
    18ae:	d1fc      	bne.n	18aa <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    18b0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    18b2:	7da6      	ldrb	r6, [r4, #22]
    18b4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    18b6:	2330      	movs	r3, #48	; 0x30
    18b8:	5ceb      	ldrb	r3, [r5, r3]
    18ba:	2231      	movs	r2, #49	; 0x31
    18bc:	5caf      	ldrb	r7, [r5, r2]
    18be:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    18c0:	07f3      	lsls	r3, r6, #31
    18c2:	d522      	bpl.n	190a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    18c4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    18c6:	b29b      	uxth	r3, r3
    18c8:	2b00      	cmp	r3, #0
    18ca:	d01c      	beq.n	1906 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    18cc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    18ce:	7813      	ldrb	r3, [r2, #0]
    18d0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    18d2:	1c51      	adds	r1, r2, #1
    18d4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    18d6:	7969      	ldrb	r1, [r5, #5]
    18d8:	2901      	cmp	r1, #1
    18da:	d00e      	beq.n	18fa <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    18dc:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    18de:	05db      	lsls	r3, r3, #23
    18e0:	0ddb      	lsrs	r3, r3, #23
    18e2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    18e4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    18e6:	3b01      	subs	r3, #1
    18e8:	b29b      	uxth	r3, r3
    18ea:	85eb      	strh	r3, [r5, #46]	; 0x2e
    18ec:	2b00      	cmp	r3, #0
    18ee:	d10c      	bne.n	190a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    18f0:	3301      	adds	r3, #1
    18f2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    18f4:	3301      	adds	r3, #1
    18f6:	75a3      	strb	r3, [r4, #22]
    18f8:	e007      	b.n	190a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    18fa:	7851      	ldrb	r1, [r2, #1]
    18fc:	0209      	lsls	r1, r1, #8
    18fe:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1900:	3202      	adds	r2, #2
    1902:	62aa      	str	r2, [r5, #40]	; 0x28
    1904:	e7eb      	b.n	18de <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1906:	2301      	movs	r3, #1
    1908:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    190a:	07b3      	lsls	r3, r6, #30
    190c:	d506      	bpl.n	191c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    190e:	2302      	movs	r3, #2
    1910:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1912:	2200      	movs	r2, #0
    1914:	3331      	adds	r3, #49	; 0x31
    1916:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1918:	07fb      	lsls	r3, r7, #31
    191a:	d41a      	bmi.n	1952 <_usart_interrupt_handler+0xb2>

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    191c:	0773      	lsls	r3, r6, #29
    191e:	d565      	bpl.n	19ec <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1920:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1922:	b29b      	uxth	r3, r3
    1924:	2b00      	cmp	r3, #0
    1926:	d05f      	beq.n	19e8 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1928:	8b63      	ldrh	r3, [r4, #26]
    192a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    192c:	071a      	lsls	r2, r3, #28
    192e:	d414      	bmi.n	195a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1930:	223f      	movs	r2, #63	; 0x3f
    1932:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1934:	2b00      	cmp	r3, #0
    1936:	d034      	beq.n	19a2 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1938:	079a      	lsls	r2, r3, #30
    193a:	d511      	bpl.n	1960 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    193c:	221a      	movs	r2, #26
    193e:	2332      	movs	r3, #50	; 0x32
    1940:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1942:	3b30      	subs	r3, #48	; 0x30
    1944:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1946:	077b      	lsls	r3, r7, #29
    1948:	d550      	bpl.n	19ec <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    194a:	0028      	movs	r0, r5
    194c:	696b      	ldr	r3, [r5, #20]
    194e:	4798      	blx	r3
    1950:	e04c      	b.n	19ec <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1952:	0028      	movs	r0, r5
    1954:	68eb      	ldr	r3, [r5, #12]
    1956:	4798      	blx	r3
    1958:	e7e0      	b.n	191c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    195a:	2237      	movs	r2, #55	; 0x37
    195c:	4013      	ands	r3, r2
    195e:	e7e9      	b.n	1934 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1960:	075a      	lsls	r2, r3, #29
    1962:	d505      	bpl.n	1970 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1964:	221e      	movs	r2, #30
    1966:	2332      	movs	r3, #50	; 0x32
    1968:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    196a:	3b2e      	subs	r3, #46	; 0x2e
    196c:	8363      	strh	r3, [r4, #26]
    196e:	e7ea      	b.n	1946 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1970:	07da      	lsls	r2, r3, #31
    1972:	d505      	bpl.n	1980 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1974:	2213      	movs	r2, #19
    1976:	2332      	movs	r3, #50	; 0x32
    1978:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    197a:	3b31      	subs	r3, #49	; 0x31
    197c:	8363      	strh	r3, [r4, #26]
    197e:	e7e2      	b.n	1946 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1980:	06da      	lsls	r2, r3, #27
    1982:	d505      	bpl.n	1990 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1984:	2242      	movs	r2, #66	; 0x42
    1986:	2332      	movs	r3, #50	; 0x32
    1988:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    198a:	3b22      	subs	r3, #34	; 0x22
    198c:	8363      	strh	r3, [r4, #26]
    198e:	e7da      	b.n	1946 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1990:	2220      	movs	r2, #32
    1992:	421a      	tst	r2, r3
    1994:	d0d7      	beq.n	1946 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1996:	3221      	adds	r2, #33	; 0x21
    1998:	2332      	movs	r3, #50	; 0x32
    199a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    199c:	3b12      	subs	r3, #18
    199e:	8363      	strh	r3, [r4, #26]
    19a0:	e7d1      	b.n	1946 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    19a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    19a4:	05db      	lsls	r3, r3, #23
    19a6:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    19a8:	b2da      	uxtb	r2, r3
    19aa:	6a69      	ldr	r1, [r5, #36]	; 0x24
    19ac:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    19ae:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    19b0:	1c51      	adds	r1, r2, #1
    19b2:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    19b4:	7969      	ldrb	r1, [r5, #5]
    19b6:	2901      	cmp	r1, #1
    19b8:	d010      	beq.n	19dc <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    19ba:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    19bc:	3b01      	subs	r3, #1
    19be:	b29b      	uxth	r3, r3
    19c0:	85ab      	strh	r3, [r5, #44]	; 0x2c
    19c2:	2b00      	cmp	r3, #0
    19c4:	d112      	bne.n	19ec <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    19c6:	3304      	adds	r3, #4
    19c8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    19ca:	2200      	movs	r2, #0
    19cc:	332e      	adds	r3, #46	; 0x2e
    19ce:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    19d0:	07bb      	lsls	r3, r7, #30
    19d2:	d50b      	bpl.n	19ec <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    19d4:	0028      	movs	r0, r5
    19d6:	692b      	ldr	r3, [r5, #16]
    19d8:	4798      	blx	r3
    19da:	e007      	b.n	19ec <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    19dc:	0a1b      	lsrs	r3, r3, #8
    19de:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    19e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    19e2:	3301      	adds	r3, #1
    19e4:	626b      	str	r3, [r5, #36]	; 0x24
    19e6:	e7e8      	b.n	19ba <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    19e8:	2304      	movs	r3, #4
    19ea:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    19ec:	06f3      	lsls	r3, r6, #27
    19ee:	d504      	bpl.n	19fa <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    19f0:	2310      	movs	r3, #16
    19f2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    19f4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    19f6:	06fb      	lsls	r3, r7, #27
    19f8:	d40e      	bmi.n	1a18 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    19fa:	06b3      	lsls	r3, r6, #26
    19fc:	d504      	bpl.n	1a08 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    19fe:	2320      	movs	r3, #32
    1a00:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1a02:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1a04:	073b      	lsls	r3, r7, #28
    1a06:	d40b      	bmi.n	1a20 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1a08:	0733      	lsls	r3, r6, #28
    1a0a:	d504      	bpl.n	1a16 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1a0c:	2308      	movs	r3, #8
    1a0e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1a10:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1a12:	06bb      	lsls	r3, r7, #26
    1a14:	d408      	bmi.n	1a28 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1a18:	0028      	movs	r0, r5
    1a1a:	69eb      	ldr	r3, [r5, #28]
    1a1c:	4798      	blx	r3
    1a1e:	e7ec      	b.n	19fa <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1a20:	0028      	movs	r0, r5
    1a22:	69ab      	ldr	r3, [r5, #24]
    1a24:	4798      	blx	r3
    1a26:	e7ef      	b.n	1a08 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1a28:	6a2b      	ldr	r3, [r5, #32]
    1a2a:	0028      	movs	r0, r5
    1a2c:	4798      	blx	r3
}
    1a2e:	e7f2      	b.n	1a16 <_usart_interrupt_handler+0x176>
    1a30:	200008e8 	.word	0x200008e8

00001a34 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1a34:	b510      	push	{r4, lr}
	switch (clock_source) {
    1a36:	2808      	cmp	r0, #8
    1a38:	d803      	bhi.n	1a42 <system_clock_source_get_hz+0xe>
    1a3a:	0080      	lsls	r0, r0, #2
    1a3c:	4b1b      	ldr	r3, [pc, #108]	; (1aac <system_clock_source_get_hz+0x78>)
    1a3e:	581b      	ldr	r3, [r3, r0]
    1a40:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1a42:	2000      	movs	r0, #0
    1a44:	e030      	b.n	1aa8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    1a46:	4b1a      	ldr	r3, [pc, #104]	; (1ab0 <system_clock_source_get_hz+0x7c>)
    1a48:	6918      	ldr	r0, [r3, #16]
    1a4a:	e02d      	b.n	1aa8 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1a4c:	4b19      	ldr	r3, [pc, #100]	; (1ab4 <system_clock_source_get_hz+0x80>)
    1a4e:	6a1b      	ldr	r3, [r3, #32]
    1a50:	059b      	lsls	r3, r3, #22
    1a52:	0f9b      	lsrs	r3, r3, #30
    1a54:	4818      	ldr	r0, [pc, #96]	; (1ab8 <system_clock_source_get_hz+0x84>)
    1a56:	40d8      	lsrs	r0, r3
    1a58:	e026      	b.n	1aa8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    1a5a:	4b15      	ldr	r3, [pc, #84]	; (1ab0 <system_clock_source_get_hz+0x7c>)
    1a5c:	6958      	ldr	r0, [r3, #20]
    1a5e:	e023      	b.n	1aa8 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1a60:	4b13      	ldr	r3, [pc, #76]	; (1ab0 <system_clock_source_get_hz+0x7c>)
    1a62:	681b      	ldr	r3, [r3, #0]
			return 0;
    1a64:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1a66:	079b      	lsls	r3, r3, #30
    1a68:	d51e      	bpl.n	1aa8 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1a6a:	4912      	ldr	r1, [pc, #72]	; (1ab4 <system_clock_source_get_hz+0x80>)
    1a6c:	2210      	movs	r2, #16
    1a6e:	68cb      	ldr	r3, [r1, #12]
    1a70:	421a      	tst	r2, r3
    1a72:	d0fc      	beq.n	1a6e <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1a74:	4b0e      	ldr	r3, [pc, #56]	; (1ab0 <system_clock_source_get_hz+0x7c>)
    1a76:	681b      	ldr	r3, [r3, #0]
    1a78:	075b      	lsls	r3, r3, #29
    1a7a:	d401      	bmi.n	1a80 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1a7c:	480f      	ldr	r0, [pc, #60]	; (1abc <system_clock_source_get_hz+0x88>)
    1a7e:	e013      	b.n	1aa8 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1a80:	2000      	movs	r0, #0
    1a82:	4b0f      	ldr	r3, [pc, #60]	; (1ac0 <system_clock_source_get_hz+0x8c>)
    1a84:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1a86:	4b0a      	ldr	r3, [pc, #40]	; (1ab0 <system_clock_source_get_hz+0x7c>)
    1a88:	689b      	ldr	r3, [r3, #8]
    1a8a:	041b      	lsls	r3, r3, #16
    1a8c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1a8e:	4358      	muls	r0, r3
    1a90:	e00a      	b.n	1aa8 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1a92:	2350      	movs	r3, #80	; 0x50
    1a94:	4a07      	ldr	r2, [pc, #28]	; (1ab4 <system_clock_source_get_hz+0x80>)
    1a96:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1a98:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1a9a:	075b      	lsls	r3, r3, #29
    1a9c:	d504      	bpl.n	1aa8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1a9e:	4b04      	ldr	r3, [pc, #16]	; (1ab0 <system_clock_source_get_hz+0x7c>)
    1aa0:	68d8      	ldr	r0, [r3, #12]
    1aa2:	e001      	b.n	1aa8 <system_clock_source_get_hz+0x74>
		return 32768UL;
    1aa4:	2080      	movs	r0, #128	; 0x80
    1aa6:	0200      	lsls	r0, r0, #8
	}
}
    1aa8:	bd10      	pop	{r4, pc}
    1aaa:	46c0      	nop			; (mov r8, r8)
    1aac:	000089c4 	.word	0x000089c4
    1ab0:	20000220 	.word	0x20000220
    1ab4:	40000800 	.word	0x40000800
    1ab8:	007a1200 	.word	0x007a1200
    1abc:	02dc6c00 	.word	0x02dc6c00
    1ac0:	000021a5 	.word	0x000021a5

00001ac4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1ac4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1ac6:	490c      	ldr	r1, [pc, #48]	; (1af8 <system_clock_source_osc8m_set_config+0x34>)
    1ac8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1aca:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1acc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1ace:	7840      	ldrb	r0, [r0, #1]
    1ad0:	2201      	movs	r2, #1
    1ad2:	4010      	ands	r0, r2
    1ad4:	0180      	lsls	r0, r0, #6
    1ad6:	2640      	movs	r6, #64	; 0x40
    1ad8:	43b3      	bics	r3, r6
    1ada:	4303      	orrs	r3, r0
    1adc:	402a      	ands	r2, r5
    1ade:	01d2      	lsls	r2, r2, #7
    1ae0:	2080      	movs	r0, #128	; 0x80
    1ae2:	4383      	bics	r3, r0
    1ae4:	4313      	orrs	r3, r2
    1ae6:	2203      	movs	r2, #3
    1ae8:	4022      	ands	r2, r4
    1aea:	0212      	lsls	r2, r2, #8
    1aec:	4803      	ldr	r0, [pc, #12]	; (1afc <system_clock_source_osc8m_set_config+0x38>)
    1aee:	4003      	ands	r3, r0
    1af0:	4313      	orrs	r3, r2
    1af2:	620b      	str	r3, [r1, #32]
}
    1af4:	bd70      	pop	{r4, r5, r6, pc}
    1af6:	46c0      	nop			; (mov r8, r8)
    1af8:	40000800 	.word	0x40000800
    1afc:	fffffcff 	.word	0xfffffcff

00001b00 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b02:	46ce      	mov	lr, r9
    1b04:	4647      	mov	r7, r8
    1b06:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1b08:	4b19      	ldr	r3, [pc, #100]	; (1b70 <system_clock_source_osc32k_set_config+0x70>)
    1b0a:	4699      	mov	r9, r3
    1b0c:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    1b0e:	7841      	ldrb	r1, [r0, #1]
    1b10:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1b12:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1b14:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1b16:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    1b18:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    1b1a:	7880      	ldrb	r0, [r0, #2]
    1b1c:	2101      	movs	r1, #1
    1b1e:	4008      	ands	r0, r1
    1b20:	0080      	lsls	r0, r0, #2
    1b22:	2204      	movs	r2, #4
    1b24:	4393      	bics	r3, r2
    1b26:	4303      	orrs	r3, r0
    1b28:	4660      	mov	r0, ip
    1b2a:	4008      	ands	r0, r1
    1b2c:	00c0      	lsls	r0, r0, #3
    1b2e:	3204      	adds	r2, #4
    1b30:	4393      	bics	r3, r2
    1b32:	4303      	orrs	r3, r0
    1b34:	0038      	movs	r0, r7
    1b36:	4008      	ands	r0, r1
    1b38:	0180      	lsls	r0, r0, #6
    1b3a:	2740      	movs	r7, #64	; 0x40
    1b3c:	43bb      	bics	r3, r7
    1b3e:	4303      	orrs	r3, r0
    1b40:	0030      	movs	r0, r6
    1b42:	4008      	ands	r0, r1
    1b44:	01c0      	lsls	r0, r0, #7
    1b46:	2680      	movs	r6, #128	; 0x80
    1b48:	43b3      	bics	r3, r6
    1b4a:	4303      	orrs	r3, r0
    1b4c:	2007      	movs	r0, #7
    1b4e:	4005      	ands	r5, r0
    1b50:	022d      	lsls	r5, r5, #8
    1b52:	4808      	ldr	r0, [pc, #32]	; (1b74 <system_clock_source_osc32k_set_config+0x74>)
    1b54:	4003      	ands	r3, r0
    1b56:	432b      	orrs	r3, r5
    1b58:	4021      	ands	r1, r4
    1b5a:	0309      	lsls	r1, r1, #12
    1b5c:	4806      	ldr	r0, [pc, #24]	; (1b78 <system_clock_source_osc32k_set_config+0x78>)
    1b5e:	4003      	ands	r3, r0
    1b60:	430b      	orrs	r3, r1
    1b62:	464a      	mov	r2, r9
    1b64:	6193      	str	r3, [r2, #24]
}
    1b66:	bc0c      	pop	{r2, r3}
    1b68:	4690      	mov	r8, r2
    1b6a:	4699      	mov	r9, r3
    1b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b6e:	46c0      	nop			; (mov r8, r8)
    1b70:	40000800 	.word	0x40000800
    1b74:	fffff8ff 	.word	0xfffff8ff
    1b78:	ffffefff 	.word	0xffffefff

00001b7c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b7e:	46de      	mov	lr, fp
    1b80:	4657      	mov	r7, sl
    1b82:	464e      	mov	r6, r9
    1b84:	4645      	mov	r5, r8
    1b86:	b5e0      	push	{r5, r6, r7, lr}
    1b88:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1b8a:	4b26      	ldr	r3, [pc, #152]	; (1c24 <system_clock_source_xosc32k_set_config+0xa8>)
    1b8c:	469b      	mov	fp, r3
    1b8e:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1b90:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1b92:	7800      	ldrb	r0, [r0, #0]
    1b94:	4242      	negs	r2, r0
    1b96:	4142      	adcs	r2, r0
    1b98:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1b9a:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1b9c:	78ca      	ldrb	r2, [r1, #3]
    1b9e:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1ba0:	790a      	ldrb	r2, [r1, #4]
    1ba2:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1ba4:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1ba6:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1ba8:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1baa:	688a      	ldr	r2, [r1, #8]
    1bac:	491e      	ldr	r1, [pc, #120]	; (1c28 <system_clock_source_xosc32k_set_config+0xac>)
    1bae:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1bb0:	2101      	movs	r1, #1
    1bb2:	464a      	mov	r2, r9
    1bb4:	0092      	lsls	r2, r2, #2
    1bb6:	4691      	mov	r9, r2
    1bb8:	2204      	movs	r2, #4
    1bba:	4393      	bics	r3, r2
    1bbc:	464a      	mov	r2, r9
    1bbe:	4313      	orrs	r3, r2
    1bc0:	4642      	mov	r2, r8
    1bc2:	400a      	ands	r2, r1
    1bc4:	00d2      	lsls	r2, r2, #3
    1bc6:	4690      	mov	r8, r2
    1bc8:	2208      	movs	r2, #8
    1bca:	4393      	bics	r3, r2
    1bcc:	4642      	mov	r2, r8
    1bce:	4313      	orrs	r3, r2
    1bd0:	4662      	mov	r2, ip
    1bd2:	400a      	ands	r2, r1
    1bd4:	0112      	lsls	r2, r2, #4
    1bd6:	4694      	mov	ip, r2
    1bd8:	2210      	movs	r2, #16
    1bda:	4393      	bics	r3, r2
    1bdc:	4662      	mov	r2, ip
    1bde:	4313      	orrs	r3, r2
    1be0:	4008      	ands	r0, r1
    1be2:	0140      	lsls	r0, r0, #5
    1be4:	2220      	movs	r2, #32
    1be6:	4393      	bics	r3, r2
    1be8:	4303      	orrs	r3, r0
    1bea:	400f      	ands	r7, r1
    1bec:	01bf      	lsls	r7, r7, #6
    1bee:	2040      	movs	r0, #64	; 0x40
    1bf0:	4383      	bics	r3, r0
    1bf2:	433b      	orrs	r3, r7
    1bf4:	400e      	ands	r6, r1
    1bf6:	01f6      	lsls	r6, r6, #7
    1bf8:	3040      	adds	r0, #64	; 0x40
    1bfa:	4383      	bics	r3, r0
    1bfc:	4333      	orrs	r3, r6
    1bfe:	3879      	subs	r0, #121	; 0x79
    1c00:	4005      	ands	r5, r0
    1c02:	022d      	lsls	r5, r5, #8
    1c04:	4809      	ldr	r0, [pc, #36]	; (1c2c <system_clock_source_xosc32k_set_config+0xb0>)
    1c06:	4003      	ands	r3, r0
    1c08:	432b      	orrs	r3, r5
    1c0a:	4021      	ands	r1, r4
    1c0c:	0309      	lsls	r1, r1, #12
    1c0e:	4808      	ldr	r0, [pc, #32]	; (1c30 <system_clock_source_xosc32k_set_config+0xb4>)
    1c10:	4003      	ands	r3, r0
    1c12:	430b      	orrs	r3, r1
    1c14:	465a      	mov	r2, fp
    1c16:	8293      	strh	r3, [r2, #20]
}
    1c18:	bc3c      	pop	{r2, r3, r4, r5}
    1c1a:	4690      	mov	r8, r2
    1c1c:	4699      	mov	r9, r3
    1c1e:	46a2      	mov	sl, r4
    1c20:	46ab      	mov	fp, r5
    1c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c24:	40000800 	.word	0x40000800
    1c28:	20000220 	.word	0x20000220
    1c2c:	fffff8ff 	.word	0xfffff8ff
    1c30:	ffffefff 	.word	0xffffefff

00001c34 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1c34:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1c36:	7a03      	ldrb	r3, [r0, #8]
    1c38:	069b      	lsls	r3, r3, #26
    1c3a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1c3c:	8942      	ldrh	r2, [r0, #10]
    1c3e:	0592      	lsls	r2, r2, #22
    1c40:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1c42:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1c44:	4918      	ldr	r1, [pc, #96]	; (1ca8 <system_clock_source_dfll_set_config+0x74>)
    1c46:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1c48:	7983      	ldrb	r3, [r0, #6]
    1c4a:	79c2      	ldrb	r2, [r0, #7]
    1c4c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1c4e:	8842      	ldrh	r2, [r0, #2]
    1c50:	8884      	ldrh	r4, [r0, #4]
    1c52:	4322      	orrs	r2, r4
    1c54:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1c56:	7842      	ldrb	r2, [r0, #1]
    1c58:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1c5a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1c5c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1c5e:	7803      	ldrb	r3, [r0, #0]
    1c60:	2b04      	cmp	r3, #4
    1c62:	d011      	beq.n	1c88 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1c64:	2b20      	cmp	r3, #32
    1c66:	d10e      	bne.n	1c86 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1c68:	7b03      	ldrb	r3, [r0, #12]
    1c6a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1c6c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1c6e:	4313      	orrs	r3, r2
    1c70:	89c2      	ldrh	r2, [r0, #14]
    1c72:	0412      	lsls	r2, r2, #16
    1c74:	490d      	ldr	r1, [pc, #52]	; (1cac <system_clock_source_dfll_set_config+0x78>)
    1c76:	400a      	ands	r2, r1
    1c78:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1c7a:	4a0b      	ldr	r2, [pc, #44]	; (1ca8 <system_clock_source_dfll_set_config+0x74>)
    1c7c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1c7e:	6811      	ldr	r1, [r2, #0]
    1c80:	4b0b      	ldr	r3, [pc, #44]	; (1cb0 <system_clock_source_dfll_set_config+0x7c>)
    1c82:	430b      	orrs	r3, r1
    1c84:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1c86:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1c88:	7b03      	ldrb	r3, [r0, #12]
    1c8a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1c8c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1c8e:	4313      	orrs	r3, r2
    1c90:	89c2      	ldrh	r2, [r0, #14]
    1c92:	0412      	lsls	r2, r2, #16
    1c94:	4905      	ldr	r1, [pc, #20]	; (1cac <system_clock_source_dfll_set_config+0x78>)
    1c96:	400a      	ands	r2, r1
    1c98:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1c9a:	4a03      	ldr	r2, [pc, #12]	; (1ca8 <system_clock_source_dfll_set_config+0x74>)
    1c9c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1c9e:	6813      	ldr	r3, [r2, #0]
    1ca0:	2104      	movs	r1, #4
    1ca2:	430b      	orrs	r3, r1
    1ca4:	6013      	str	r3, [r2, #0]
    1ca6:	e7ee      	b.n	1c86 <system_clock_source_dfll_set_config+0x52>
    1ca8:	20000220 	.word	0x20000220
    1cac:	03ff0000 	.word	0x03ff0000
    1cb0:	00000424 	.word	0x00000424

00001cb4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1cb4:	2808      	cmp	r0, #8
    1cb6:	d803      	bhi.n	1cc0 <system_clock_source_enable+0xc>
    1cb8:	0080      	lsls	r0, r0, #2
    1cba:	4b25      	ldr	r3, [pc, #148]	; (1d50 <system_clock_source_enable+0x9c>)
    1cbc:	581b      	ldr	r3, [r3, r0]
    1cbe:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1cc0:	2017      	movs	r0, #23
    1cc2:	e044      	b.n	1d4e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1cc4:	4a23      	ldr	r2, [pc, #140]	; (1d54 <system_clock_source_enable+0xa0>)
    1cc6:	6a13      	ldr	r3, [r2, #32]
    1cc8:	2102      	movs	r1, #2
    1cca:	430b      	orrs	r3, r1
    1ccc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1cce:	2000      	movs	r0, #0
    1cd0:	e03d      	b.n	1d4e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1cd2:	4a20      	ldr	r2, [pc, #128]	; (1d54 <system_clock_source_enable+0xa0>)
    1cd4:	6993      	ldr	r3, [r2, #24]
    1cd6:	2102      	movs	r1, #2
    1cd8:	430b      	orrs	r3, r1
    1cda:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1cdc:	2000      	movs	r0, #0
		break;
    1cde:	e036      	b.n	1d4e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1ce0:	4a1c      	ldr	r2, [pc, #112]	; (1d54 <system_clock_source_enable+0xa0>)
    1ce2:	8a13      	ldrh	r3, [r2, #16]
    1ce4:	2102      	movs	r1, #2
    1ce6:	430b      	orrs	r3, r1
    1ce8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1cea:	2000      	movs	r0, #0
		break;
    1cec:	e02f      	b.n	1d4e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1cee:	4a19      	ldr	r2, [pc, #100]	; (1d54 <system_clock_source_enable+0xa0>)
    1cf0:	8a93      	ldrh	r3, [r2, #20]
    1cf2:	2102      	movs	r1, #2
    1cf4:	430b      	orrs	r3, r1
    1cf6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1cf8:	2000      	movs	r0, #0
		break;
    1cfa:	e028      	b.n	1d4e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1cfc:	4916      	ldr	r1, [pc, #88]	; (1d58 <system_clock_source_enable+0xa4>)
    1cfe:	680b      	ldr	r3, [r1, #0]
    1d00:	2202      	movs	r2, #2
    1d02:	4313      	orrs	r3, r2
    1d04:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1d06:	4b13      	ldr	r3, [pc, #76]	; (1d54 <system_clock_source_enable+0xa0>)
    1d08:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d0a:	0019      	movs	r1, r3
    1d0c:	320e      	adds	r2, #14
    1d0e:	68cb      	ldr	r3, [r1, #12]
    1d10:	421a      	tst	r2, r3
    1d12:	d0fc      	beq.n	1d0e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1d14:	4a10      	ldr	r2, [pc, #64]	; (1d58 <system_clock_source_enable+0xa4>)
    1d16:	6891      	ldr	r1, [r2, #8]
    1d18:	4b0e      	ldr	r3, [pc, #56]	; (1d54 <system_clock_source_enable+0xa0>)
    1d1a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1d1c:	6852      	ldr	r2, [r2, #4]
    1d1e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1d20:	2200      	movs	r2, #0
    1d22:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d24:	0019      	movs	r1, r3
    1d26:	3210      	adds	r2, #16
    1d28:	68cb      	ldr	r3, [r1, #12]
    1d2a:	421a      	tst	r2, r3
    1d2c:	d0fc      	beq.n	1d28 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1d2e:	4b0a      	ldr	r3, [pc, #40]	; (1d58 <system_clock_source_enable+0xa4>)
    1d30:	681b      	ldr	r3, [r3, #0]
    1d32:	b29b      	uxth	r3, r3
    1d34:	4a07      	ldr	r2, [pc, #28]	; (1d54 <system_clock_source_enable+0xa0>)
    1d36:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1d38:	2000      	movs	r0, #0
    1d3a:	e008      	b.n	1d4e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1d3c:	4905      	ldr	r1, [pc, #20]	; (1d54 <system_clock_source_enable+0xa0>)
    1d3e:	2244      	movs	r2, #68	; 0x44
    1d40:	5c8b      	ldrb	r3, [r1, r2]
    1d42:	2002      	movs	r0, #2
    1d44:	4303      	orrs	r3, r0
    1d46:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1d48:	2000      	movs	r0, #0
		break;
    1d4a:	e000      	b.n	1d4e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1d4c:	2000      	movs	r0, #0
}
    1d4e:	4770      	bx	lr
    1d50:	000089e8 	.word	0x000089e8
    1d54:	40000800 	.word	0x40000800
    1d58:	20000220 	.word	0x20000220

00001d5c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d5e:	46d6      	mov	lr, sl
    1d60:	464f      	mov	r7, r9
    1d62:	4646      	mov	r6, r8
    1d64:	b5c0      	push	{r6, r7, lr}
    1d66:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1d68:	22c2      	movs	r2, #194	; 0xc2
    1d6a:	00d2      	lsls	r2, r2, #3
    1d6c:	4b69      	ldr	r3, [pc, #420]	; (1f14 <system_clock_init+0x1b8>)
    1d6e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1d70:	4a69      	ldr	r2, [pc, #420]	; (1f18 <system_clock_init+0x1bc>)
    1d72:	6853      	ldr	r3, [r2, #4]
    1d74:	211e      	movs	r1, #30
    1d76:	438b      	bics	r3, r1
    1d78:	391a      	subs	r1, #26
    1d7a:	430b      	orrs	r3, r1
    1d7c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_5;
    1d7e:	2205      	movs	r2, #5
    1d80:	ab01      	add	r3, sp, #4
    1d82:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1d84:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1d86:	4d65      	ldr	r5, [pc, #404]	; (1f1c <system_clock_init+0x1c0>)
    1d88:	b2e0      	uxtb	r0, r4
    1d8a:	a901      	add	r1, sp, #4
    1d8c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1d8e:	3401      	adds	r4, #1
    1d90:	2c25      	cmp	r4, #37	; 0x25
    1d92:	d1f9      	bne.n	1d88 <system_clock_init+0x2c>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1d94:	a80c      	add	r0, sp, #48	; 0x30
    1d96:	2300      	movs	r3, #0
    1d98:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    1d9a:	2280      	movs	r2, #128	; 0x80
    1d9c:	0212      	lsls	r2, r2, #8
    1d9e:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1da0:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1da2:	2201      	movs	r2, #1
    1da4:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1da6:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1da8:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1daa:	2106      	movs	r1, #6
    1dac:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    1dae:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1db0:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1db2:	4b5b      	ldr	r3, [pc, #364]	; (1f20 <system_clock_init+0x1c4>)
    1db4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1db6:	2005      	movs	r0, #5
    1db8:	4b5a      	ldr	r3, [pc, #360]	; (1f24 <system_clock_init+0x1c8>)
    1dba:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1dbc:	4955      	ldr	r1, [pc, #340]	; (1f14 <system_clock_init+0x1b8>)
    1dbe:	2202      	movs	r2, #2
    1dc0:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1dc2:	421a      	tst	r2, r3
    1dc4:	d0fc      	beq.n	1dc0 <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1dc6:	4953      	ldr	r1, [pc, #332]	; (1f14 <system_clock_init+0x1b8>)
    1dc8:	8a8b      	ldrh	r3, [r1, #20]
    1dca:	2280      	movs	r2, #128	; 0x80
    1dcc:	4313      	orrs	r3, r2
    1dce:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    1dd0:	4c55      	ldr	r4, [pc, #340]	; (1f28 <system_clock_init+0x1cc>)
	SYSCTRL->OSC32K.bit.CALIB =
    1dd2:	6823      	ldr	r3, [r4, #0]
    1dd4:	04db      	lsls	r3, r3, #19
    1dd6:	698a      	ldr	r2, [r1, #24]
    1dd8:	0e5b      	lsrs	r3, r3, #25
    1dda:	041b      	lsls	r3, r3, #16
    1ddc:	4853      	ldr	r0, [pc, #332]	; (1f2c <system_clock_init+0x1d0>)
    1dde:	4002      	ands	r2, r0
    1de0:	4313      	orrs	r3, r2
    1de2:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    1de4:	a80a      	add	r0, sp, #40	; 0x28
    1de6:	2301      	movs	r3, #1
    1de8:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    1dea:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    1dec:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1dee:	2207      	movs	r2, #7
    1df0:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    1df2:	2500      	movs	r5, #0
    1df4:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1df6:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1df8:	4b4d      	ldr	r3, [pc, #308]	; (1f30 <system_clock_init+0x1d4>)
    1dfa:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1dfc:	2004      	movs	r0, #4
    1dfe:	4b49      	ldr	r3, [pc, #292]	; (1f24 <system_clock_init+0x1c8>)
    1e00:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1e02:	ab05      	add	r3, sp, #20
    1e04:	2200      	movs	r2, #0
    1e06:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1e08:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1e0a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1e0c:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1e0e:	213f      	movs	r1, #63	; 0x3f
    1e10:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1e12:	393b      	subs	r1, #59	; 0x3b
    1e14:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1e16:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1e18:	6823      	ldr	r3, [r4, #0]
    1e1a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1e1c:	2b3f      	cmp	r3, #63	; 0x3f
    1e1e:	d100      	bne.n	1e22 <system_clock_init+0xc6>
    1e20:	e075      	b.n	1f0e <system_clock_init+0x1b2>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1e22:	a805      	add	r0, sp, #20
    1e24:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1e26:	23b7      	movs	r3, #183	; 0xb7
    1e28:	00db      	lsls	r3, r3, #3
    1e2a:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1e2c:	2307      	movs	r3, #7
    1e2e:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1e30:	3338      	adds	r3, #56	; 0x38
    1e32:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1e34:	4b3f      	ldr	r3, [pc, #252]	; (1f34 <system_clock_init+0x1d8>)
    1e36:	4798      	blx	r3
	config->run_in_standby  = false;
    1e38:	a804      	add	r0, sp, #16
    1e3a:	2500      	movs	r5, #0
    1e3c:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1e3e:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1e40:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1e42:	4b3d      	ldr	r3, [pc, #244]	; (1f38 <system_clock_init+0x1dc>)
    1e44:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1e46:	2006      	movs	r0, #6
    1e48:	4b36      	ldr	r3, [pc, #216]	; (1f24 <system_clock_init+0x1c8>)
    1e4a:	4699      	mov	r9, r3
    1e4c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1e4e:	4b3b      	ldr	r3, [pc, #236]	; (1f3c <system_clock_init+0x1e0>)
    1e50:	4798      	blx	r3
	config->division_factor    = 1;
    1e52:	ac01      	add	r4, sp, #4
    1e54:	2601      	movs	r6, #1
    1e56:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1e58:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    1e5a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1e5c:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1e5e:	2305      	movs	r3, #5
    1e60:	7023      	strb	r3, [r4, #0]
    1e62:	0021      	movs	r1, r4
    1e64:	2001      	movs	r0, #1
    1e66:	4b36      	ldr	r3, [pc, #216]	; (1f40 <system_clock_init+0x1e4>)
    1e68:	4698      	mov	r8, r3
    1e6a:	4798      	blx	r3
    1e6c:	2001      	movs	r0, #1
    1e6e:	4f35      	ldr	r7, [pc, #212]	; (1f44 <system_clock_init+0x1e8>)
    1e70:	47b8      	blx	r7
	config->high_when_disabled = false;
    1e72:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    1e74:	7265      	strb	r5, [r4, #9]
    1e76:	2304      	movs	r3, #4
    1e78:	7023      	strb	r3, [r4, #0]
    1e7a:	331c      	adds	r3, #28
    1e7c:	469a      	mov	sl, r3
    1e7e:	6063      	str	r3, [r4, #4]
    1e80:	7226      	strb	r6, [r4, #8]
    1e82:	0021      	movs	r1, r4
    1e84:	2002      	movs	r0, #2
    1e86:	47c0      	blx	r8
    1e88:	2002      	movs	r0, #2
    1e8a:	47b8      	blx	r7
	config->division_factor    = 1;
    1e8c:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1e8e:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1e90:	2306      	movs	r3, #6
    1e92:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    1e94:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1e96:	7265      	strb	r5, [r4, #9]
    1e98:	0021      	movs	r1, r4
    1e9a:	2003      	movs	r0, #3
    1e9c:	47c0      	blx	r8
    1e9e:	2003      	movs	r0, #3
    1ea0:	47b8      	blx	r7
	config->high_when_disabled = false;
    1ea2:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    1ea4:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1ea6:	7265      	strb	r5, [r4, #9]
    1ea8:	2303      	movs	r3, #3
    1eaa:	7023      	strb	r3, [r4, #0]
    1eac:	4653      	mov	r3, sl
    1eae:	6063      	str	r3, [r4, #4]
    1eb0:	0021      	movs	r1, r4
    1eb2:	2004      	movs	r0, #4
    1eb4:	47c0      	blx	r8
    1eb6:	2004      	movs	r0, #4
    1eb8:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1eba:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1ebc:	0021      	movs	r1, r4
    1ebe:	2000      	movs	r0, #0
    1ec0:	4b16      	ldr	r3, [pc, #88]	; (1f1c <system_clock_init+0x1c0>)
    1ec2:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1ec4:	2000      	movs	r0, #0
    1ec6:	4b20      	ldr	r3, [pc, #128]	; (1f48 <system_clock_init+0x1ec>)
    1ec8:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1eca:	2007      	movs	r0, #7
    1ecc:	47c8      	blx	r9
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1ece:	4911      	ldr	r1, [pc, #68]	; (1f14 <system_clock_init+0x1b8>)
    1ed0:	22d0      	movs	r2, #208	; 0xd0
    1ed2:	68cb      	ldr	r3, [r1, #12]
    1ed4:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1ed6:	2bd0      	cmp	r3, #208	; 0xd0
    1ed8:	d1fb      	bne.n	1ed2 <system_clock_init+0x176>
	PM->CPUSEL.reg = (uint32_t)divider;
    1eda:	4a1c      	ldr	r2, [pc, #112]	; (1f4c <system_clock_init+0x1f0>)
    1edc:	2300      	movs	r3, #0
    1ede:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1ee0:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1ee2:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1ee4:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1ee6:	a901      	add	r1, sp, #4
    1ee8:	2201      	movs	r2, #1
    1eea:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1eec:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1eee:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1ef0:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1ef2:	3307      	adds	r3, #7
    1ef4:	700b      	strb	r3, [r1, #0]
    1ef6:	2000      	movs	r0, #0
    1ef8:	4b11      	ldr	r3, [pc, #68]	; (1f40 <system_clock_init+0x1e4>)
    1efa:	4798      	blx	r3
    1efc:	2000      	movs	r0, #0
    1efe:	4b11      	ldr	r3, [pc, #68]	; (1f44 <system_clock_init+0x1e8>)
    1f00:	4798      	blx	r3
#endif
}
    1f02:	b010      	add	sp, #64	; 0x40
    1f04:	bc1c      	pop	{r2, r3, r4}
    1f06:	4690      	mov	r8, r2
    1f08:	4699      	mov	r9, r3
    1f0a:	46a2      	mov	sl, r4
    1f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1f0e:	3b20      	subs	r3, #32
    1f10:	e787      	b.n	1e22 <system_clock_init+0xc6>
    1f12:	46c0      	nop			; (mov r8, r8)
    1f14:	40000800 	.word	0x40000800
    1f18:	41004000 	.word	0x41004000
    1f1c:	00002189 	.word	0x00002189
    1f20:	00001b7d 	.word	0x00001b7d
    1f24:	00001cb5 	.word	0x00001cb5
    1f28:	00806024 	.word	0x00806024
    1f2c:	ff80ffff 	.word	0xff80ffff
    1f30:	00001b01 	.word	0x00001b01
    1f34:	00001c35 	.word	0x00001c35
    1f38:	00001ac5 	.word	0x00001ac5
    1f3c:	00001f51 	.word	0x00001f51
    1f40:	00001f75 	.word	0x00001f75
    1f44:	0000202d 	.word	0x0000202d
    1f48:	000020fd 	.word	0x000020fd
    1f4c:	40000400 	.word	0x40000400

00001f50 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1f50:	4a06      	ldr	r2, [pc, #24]	; (1f6c <system_gclk_init+0x1c>)
    1f52:	6993      	ldr	r3, [r2, #24]
    1f54:	2108      	movs	r1, #8
    1f56:	430b      	orrs	r3, r1
    1f58:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1f5a:	2201      	movs	r2, #1
    1f5c:	4b04      	ldr	r3, [pc, #16]	; (1f70 <system_gclk_init+0x20>)
    1f5e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1f60:	0019      	movs	r1, r3
    1f62:	780b      	ldrb	r3, [r1, #0]
    1f64:	4213      	tst	r3, r2
    1f66:	d1fc      	bne.n	1f62 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1f68:	4770      	bx	lr
    1f6a:	46c0      	nop			; (mov r8, r8)
    1f6c:	40000400 	.word	0x40000400
    1f70:	40000c00 	.word	0x40000c00

00001f74 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1f74:	b570      	push	{r4, r5, r6, lr}
    1f76:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1f78:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1f7a:	780d      	ldrb	r5, [r1, #0]
    1f7c:	022d      	lsls	r5, r5, #8
    1f7e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1f80:	784b      	ldrb	r3, [r1, #1]
    1f82:	2b00      	cmp	r3, #0
    1f84:	d002      	beq.n	1f8c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1f86:	2380      	movs	r3, #128	; 0x80
    1f88:	02db      	lsls	r3, r3, #11
    1f8a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1f8c:	7a4b      	ldrb	r3, [r1, #9]
    1f8e:	2b00      	cmp	r3, #0
    1f90:	d002      	beq.n	1f98 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1f92:	2380      	movs	r3, #128	; 0x80
    1f94:	031b      	lsls	r3, r3, #12
    1f96:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1f98:	6848      	ldr	r0, [r1, #4]
    1f9a:	2801      	cmp	r0, #1
    1f9c:	d910      	bls.n	1fc0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1f9e:	1e43      	subs	r3, r0, #1
    1fa0:	4218      	tst	r0, r3
    1fa2:	d134      	bne.n	200e <STACK_SIZE+0xe>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1fa4:	2802      	cmp	r0, #2
    1fa6:	d930      	bls.n	200a <STACK_SIZE+0xa>
    1fa8:	2302      	movs	r3, #2
    1faa:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1fac:	3201      	adds	r2, #1
						mask <<= 1) {
    1fae:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1fb0:	4298      	cmp	r0, r3
    1fb2:	d8fb      	bhi.n	1fac <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1fb4:	0212      	lsls	r2, r2, #8
    1fb6:	4332      	orrs	r2, r6
    1fb8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1fba:	2380      	movs	r3, #128	; 0x80
    1fbc:	035b      	lsls	r3, r3, #13
    1fbe:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1fc0:	7a0b      	ldrb	r3, [r1, #8]
    1fc2:	2b00      	cmp	r3, #0
    1fc4:	d002      	beq.n	1fcc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1fc6:	2380      	movs	r3, #128	; 0x80
    1fc8:	039b      	lsls	r3, r3, #14
    1fca:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fcc:	4a13      	ldr	r2, [pc, #76]	; (201c <STACK_SIZE+0x1c>)
    1fce:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1fd0:	b25b      	sxtb	r3, r3
    1fd2:	2b00      	cmp	r3, #0
    1fd4:	dbfb      	blt.n	1fce <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1fd6:	4b12      	ldr	r3, [pc, #72]	; (2020 <STACK_SIZE+0x20>)
    1fd8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1fda:	4b12      	ldr	r3, [pc, #72]	; (2024 <STACK_SIZE+0x24>)
    1fdc:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fde:	4a0f      	ldr	r2, [pc, #60]	; (201c <STACK_SIZE+0x1c>)
    1fe0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1fe2:	b25b      	sxtb	r3, r3
    1fe4:	2b00      	cmp	r3, #0
    1fe6:	dbfb      	blt.n	1fe0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1fe8:	4b0c      	ldr	r3, [pc, #48]	; (201c <STACK_SIZE+0x1c>)
    1fea:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fec:	001a      	movs	r2, r3
    1fee:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1ff0:	b25b      	sxtb	r3, r3
    1ff2:	2b00      	cmp	r3, #0
    1ff4:	dbfb      	blt.n	1fee <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1ff6:	4a09      	ldr	r2, [pc, #36]	; (201c <STACK_SIZE+0x1c>)
    1ff8:	6853      	ldr	r3, [r2, #4]
    1ffa:	2180      	movs	r1, #128	; 0x80
    1ffc:	0249      	lsls	r1, r1, #9
    1ffe:	400b      	ands	r3, r1
    2000:	431d      	orrs	r5, r3
    2002:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2004:	4b08      	ldr	r3, [pc, #32]	; (2028 <STACK_SIZE+0x28>)
    2006:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2008:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    200a:	2200      	movs	r2, #0
    200c:	e7d2      	b.n	1fb4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    200e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2010:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2012:	2380      	movs	r3, #128	; 0x80
    2014:	029b      	lsls	r3, r3, #10
    2016:	431d      	orrs	r5, r3
    2018:	e7d2      	b.n	1fc0 <system_gclk_gen_set_config+0x4c>
    201a:	46c0      	nop			; (mov r8, r8)
    201c:	40000c00 	.word	0x40000c00
    2020:	0000086d 	.word	0x0000086d
    2024:	40000c08 	.word	0x40000c08
    2028:	000008ad 	.word	0x000008ad

0000202c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    202c:	b510      	push	{r4, lr}
    202e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2030:	4a0b      	ldr	r2, [pc, #44]	; (2060 <system_gclk_gen_enable+0x34>)
    2032:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2034:	b25b      	sxtb	r3, r3
    2036:	2b00      	cmp	r3, #0
    2038:	dbfb      	blt.n	2032 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    203a:	4b0a      	ldr	r3, [pc, #40]	; (2064 <system_gclk_gen_enable+0x38>)
    203c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    203e:	4b0a      	ldr	r3, [pc, #40]	; (2068 <system_gclk_gen_enable+0x3c>)
    2040:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2042:	4a07      	ldr	r2, [pc, #28]	; (2060 <system_gclk_gen_enable+0x34>)
    2044:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2046:	b25b      	sxtb	r3, r3
    2048:	2b00      	cmp	r3, #0
    204a:	dbfb      	blt.n	2044 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    204c:	4a04      	ldr	r2, [pc, #16]	; (2060 <system_gclk_gen_enable+0x34>)
    204e:	6851      	ldr	r1, [r2, #4]
    2050:	2380      	movs	r3, #128	; 0x80
    2052:	025b      	lsls	r3, r3, #9
    2054:	430b      	orrs	r3, r1
    2056:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2058:	4b04      	ldr	r3, [pc, #16]	; (206c <system_gclk_gen_enable+0x40>)
    205a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    205c:	bd10      	pop	{r4, pc}
    205e:	46c0      	nop			; (mov r8, r8)
    2060:	40000c00 	.word	0x40000c00
    2064:	0000086d 	.word	0x0000086d
    2068:	40000c04 	.word	0x40000c04
    206c:	000008ad 	.word	0x000008ad

00002070 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2070:	b570      	push	{r4, r5, r6, lr}
    2072:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2074:	4a1a      	ldr	r2, [pc, #104]	; (20e0 <system_gclk_gen_get_hz+0x70>)
    2076:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2078:	b25b      	sxtb	r3, r3
    207a:	2b00      	cmp	r3, #0
    207c:	dbfb      	blt.n	2076 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    207e:	4b19      	ldr	r3, [pc, #100]	; (20e4 <system_gclk_gen_get_hz+0x74>)
    2080:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2082:	4b19      	ldr	r3, [pc, #100]	; (20e8 <system_gclk_gen_get_hz+0x78>)
    2084:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2086:	4a16      	ldr	r2, [pc, #88]	; (20e0 <system_gclk_gen_get_hz+0x70>)
    2088:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    208a:	b25b      	sxtb	r3, r3
    208c:	2b00      	cmp	r3, #0
    208e:	dbfb      	blt.n	2088 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2090:	4e13      	ldr	r6, [pc, #76]	; (20e0 <system_gclk_gen_get_hz+0x70>)
    2092:	6870      	ldr	r0, [r6, #4]
    2094:	04c0      	lsls	r0, r0, #19
    2096:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2098:	4b14      	ldr	r3, [pc, #80]	; (20ec <system_gclk_gen_get_hz+0x7c>)
    209a:	4798      	blx	r3
    209c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    209e:	4b12      	ldr	r3, [pc, #72]	; (20e8 <system_gclk_gen_get_hz+0x78>)
    20a0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    20a2:	6876      	ldr	r6, [r6, #4]
    20a4:	02f6      	lsls	r6, r6, #11
    20a6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    20a8:	4b11      	ldr	r3, [pc, #68]	; (20f0 <system_gclk_gen_get_hz+0x80>)
    20aa:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20ac:	4a0c      	ldr	r2, [pc, #48]	; (20e0 <system_gclk_gen_get_hz+0x70>)
    20ae:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    20b0:	b25b      	sxtb	r3, r3
    20b2:	2b00      	cmp	r3, #0
    20b4:	dbfb      	blt.n	20ae <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    20b6:	4b0a      	ldr	r3, [pc, #40]	; (20e0 <system_gclk_gen_get_hz+0x70>)
    20b8:	689c      	ldr	r4, [r3, #8]
    20ba:	0224      	lsls	r4, r4, #8
    20bc:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    20be:	4b0d      	ldr	r3, [pc, #52]	; (20f4 <system_gclk_gen_get_hz+0x84>)
    20c0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    20c2:	2e00      	cmp	r6, #0
    20c4:	d107      	bne.n	20d6 <system_gclk_gen_get_hz+0x66>
    20c6:	2c01      	cmp	r4, #1
    20c8:	d907      	bls.n	20da <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    20ca:	0021      	movs	r1, r4
    20cc:	0028      	movs	r0, r5
    20ce:	4b0a      	ldr	r3, [pc, #40]	; (20f8 <system_gclk_gen_get_hz+0x88>)
    20d0:	4798      	blx	r3
    20d2:	0005      	movs	r5, r0
    20d4:	e001      	b.n	20da <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    20d6:	3401      	adds	r4, #1
    20d8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    20da:	0028      	movs	r0, r5
    20dc:	bd70      	pop	{r4, r5, r6, pc}
    20de:	46c0      	nop			; (mov r8, r8)
    20e0:	40000c00 	.word	0x40000c00
    20e4:	0000086d 	.word	0x0000086d
    20e8:	40000c04 	.word	0x40000c04
    20ec:	00001a35 	.word	0x00001a35
    20f0:	40000c08 	.word	0x40000c08
    20f4:	000008ad 	.word	0x000008ad
    20f8:	00005de9 	.word	0x00005de9

000020fc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    20fc:	b510      	push	{r4, lr}
    20fe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2100:	4b06      	ldr	r3, [pc, #24]	; (211c <system_gclk_chan_enable+0x20>)
    2102:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2104:	4b06      	ldr	r3, [pc, #24]	; (2120 <system_gclk_chan_enable+0x24>)
    2106:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2108:	4a06      	ldr	r2, [pc, #24]	; (2124 <system_gclk_chan_enable+0x28>)
    210a:	8853      	ldrh	r3, [r2, #2]
    210c:	2180      	movs	r1, #128	; 0x80
    210e:	01c9      	lsls	r1, r1, #7
    2110:	430b      	orrs	r3, r1
    2112:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2114:	4b04      	ldr	r3, [pc, #16]	; (2128 <system_gclk_chan_enable+0x2c>)
    2116:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2118:	bd10      	pop	{r4, pc}
    211a:	46c0      	nop			; (mov r8, r8)
    211c:	0000086d 	.word	0x0000086d
    2120:	40000c02 	.word	0x40000c02
    2124:	40000c00 	.word	0x40000c00
    2128:	000008ad 	.word	0x000008ad

0000212c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    212c:	b510      	push	{r4, lr}
    212e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2130:	4b0f      	ldr	r3, [pc, #60]	; (2170 <system_gclk_chan_disable+0x44>)
    2132:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2134:	4b0f      	ldr	r3, [pc, #60]	; (2174 <system_gclk_chan_disable+0x48>)
    2136:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2138:	4a0f      	ldr	r2, [pc, #60]	; (2178 <system_gclk_chan_disable+0x4c>)
    213a:	8853      	ldrh	r3, [r2, #2]
    213c:	051b      	lsls	r3, r3, #20
    213e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2140:	8853      	ldrh	r3, [r2, #2]
    2142:	490e      	ldr	r1, [pc, #56]	; (217c <system_gclk_chan_disable+0x50>)
    2144:	400b      	ands	r3, r1
    2146:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2148:	8853      	ldrh	r3, [r2, #2]
    214a:	490d      	ldr	r1, [pc, #52]	; (2180 <system_gclk_chan_disable+0x54>)
    214c:	400b      	ands	r3, r1
    214e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2150:	0011      	movs	r1, r2
    2152:	2280      	movs	r2, #128	; 0x80
    2154:	01d2      	lsls	r2, r2, #7
    2156:	884b      	ldrh	r3, [r1, #2]
    2158:	4213      	tst	r3, r2
    215a:	d1fc      	bne.n	2156 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    215c:	4906      	ldr	r1, [pc, #24]	; (2178 <system_gclk_chan_disable+0x4c>)
    215e:	884a      	ldrh	r2, [r1, #2]
    2160:	0203      	lsls	r3, r0, #8
    2162:	4806      	ldr	r0, [pc, #24]	; (217c <system_gclk_chan_disable+0x50>)
    2164:	4002      	ands	r2, r0
    2166:	4313      	orrs	r3, r2
    2168:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    216a:	4b06      	ldr	r3, [pc, #24]	; (2184 <system_gclk_chan_disable+0x58>)
    216c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    216e:	bd10      	pop	{r4, pc}
    2170:	0000086d 	.word	0x0000086d
    2174:	40000c02 	.word	0x40000c02
    2178:	40000c00 	.word	0x40000c00
    217c:	fffff0ff 	.word	0xfffff0ff
    2180:	ffffbfff 	.word	0xffffbfff
    2184:	000008ad 	.word	0x000008ad

00002188 <system_gclk_chan_set_config>:
{
    2188:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    218a:	780c      	ldrb	r4, [r1, #0]
    218c:	0224      	lsls	r4, r4, #8
    218e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2190:	4b02      	ldr	r3, [pc, #8]	; (219c <system_gclk_chan_set_config+0x14>)
    2192:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2194:	b2a4      	uxth	r4, r4
    2196:	4b02      	ldr	r3, [pc, #8]	; (21a0 <system_gclk_chan_set_config+0x18>)
    2198:	805c      	strh	r4, [r3, #2]
}
    219a:	bd10      	pop	{r4, pc}
    219c:	0000212d 	.word	0x0000212d
    21a0:	40000c00 	.word	0x40000c00

000021a4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    21a4:	b510      	push	{r4, lr}
    21a6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    21a8:	4b06      	ldr	r3, [pc, #24]	; (21c4 <system_gclk_chan_get_hz+0x20>)
    21aa:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    21ac:	4b06      	ldr	r3, [pc, #24]	; (21c8 <system_gclk_chan_get_hz+0x24>)
    21ae:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    21b0:	4b06      	ldr	r3, [pc, #24]	; (21cc <system_gclk_chan_get_hz+0x28>)
    21b2:	885c      	ldrh	r4, [r3, #2]
    21b4:	0524      	lsls	r4, r4, #20
    21b6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    21b8:	4b05      	ldr	r3, [pc, #20]	; (21d0 <system_gclk_chan_get_hz+0x2c>)
    21ba:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    21bc:	0020      	movs	r0, r4
    21be:	4b05      	ldr	r3, [pc, #20]	; (21d4 <system_gclk_chan_get_hz+0x30>)
    21c0:	4798      	blx	r3
}
    21c2:	bd10      	pop	{r4, pc}
    21c4:	0000086d 	.word	0x0000086d
    21c8:	40000c02 	.word	0x40000c02
    21cc:	40000c00 	.word	0x40000c00
    21d0:	000008ad 	.word	0x000008ad
    21d4:	00002071 	.word	0x00002071

000021d8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    21d8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    21da:	78d3      	ldrb	r3, [r2, #3]
    21dc:	2b00      	cmp	r3, #0
    21de:	d135      	bne.n	224c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    21e0:	7813      	ldrb	r3, [r2, #0]
    21e2:	2b80      	cmp	r3, #128	; 0x80
    21e4:	d029      	beq.n	223a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    21e6:	061b      	lsls	r3, r3, #24
    21e8:	2480      	movs	r4, #128	; 0x80
    21ea:	0264      	lsls	r4, r4, #9
    21ec:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    21ee:	7854      	ldrb	r4, [r2, #1]
    21f0:	2502      	movs	r5, #2
    21f2:	43ac      	bics	r4, r5
    21f4:	d106      	bne.n	2204 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    21f6:	7894      	ldrb	r4, [r2, #2]
    21f8:	2c00      	cmp	r4, #0
    21fa:	d120      	bne.n	223e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    21fc:	2480      	movs	r4, #128	; 0x80
    21fe:	02a4      	lsls	r4, r4, #10
    2200:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2202:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2204:	7854      	ldrb	r4, [r2, #1]
    2206:	3c01      	subs	r4, #1
    2208:	2c01      	cmp	r4, #1
    220a:	d91c      	bls.n	2246 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    220c:	040d      	lsls	r5, r1, #16
    220e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2210:	24a0      	movs	r4, #160	; 0xa0
    2212:	05e4      	lsls	r4, r4, #23
    2214:	432c      	orrs	r4, r5
    2216:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2218:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    221a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    221c:	24d0      	movs	r4, #208	; 0xd0
    221e:	0624      	lsls	r4, r4, #24
    2220:	432c      	orrs	r4, r5
    2222:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2224:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2226:	78d4      	ldrb	r4, [r2, #3]
    2228:	2c00      	cmp	r4, #0
    222a:	d122      	bne.n	2272 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    222c:	035b      	lsls	r3, r3, #13
    222e:	d51c      	bpl.n	226a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2230:	7893      	ldrb	r3, [r2, #2]
    2232:	2b01      	cmp	r3, #1
    2234:	d01e      	beq.n	2274 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2236:	6141      	str	r1, [r0, #20]
    2238:	e017      	b.n	226a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    223a:	2300      	movs	r3, #0
    223c:	e7d7      	b.n	21ee <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    223e:	24c0      	movs	r4, #192	; 0xc0
    2240:	02e4      	lsls	r4, r4, #11
    2242:	4323      	orrs	r3, r4
    2244:	e7dd      	b.n	2202 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2246:	4c0d      	ldr	r4, [pc, #52]	; (227c <_system_pinmux_config+0xa4>)
    2248:	4023      	ands	r3, r4
    224a:	e7df      	b.n	220c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    224c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    224e:	040c      	lsls	r4, r1, #16
    2250:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2252:	23a0      	movs	r3, #160	; 0xa0
    2254:	05db      	lsls	r3, r3, #23
    2256:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2258:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    225a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    225c:	23d0      	movs	r3, #208	; 0xd0
    225e:	061b      	lsls	r3, r3, #24
    2260:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2262:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2264:	78d3      	ldrb	r3, [r2, #3]
    2266:	2b00      	cmp	r3, #0
    2268:	d103      	bne.n	2272 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    226a:	7853      	ldrb	r3, [r2, #1]
    226c:	3b01      	subs	r3, #1
    226e:	2b01      	cmp	r3, #1
    2270:	d902      	bls.n	2278 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2272:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2274:	6181      	str	r1, [r0, #24]
    2276:	e7f8      	b.n	226a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2278:	6081      	str	r1, [r0, #8]
}
    227a:	e7fa      	b.n	2272 <_system_pinmux_config+0x9a>
    227c:	fffbffff 	.word	0xfffbffff

00002280 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2280:	b510      	push	{r4, lr}
    2282:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    2284:	09c1      	lsrs	r1, r0, #7
		return NULL;
    2286:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2288:	2900      	cmp	r1, #0
    228a:	d104      	bne.n	2296 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    228c:	0943      	lsrs	r3, r0, #5
    228e:	01db      	lsls	r3, r3, #7
    2290:	4905      	ldr	r1, [pc, #20]	; (22a8 <system_pinmux_pin_set_config+0x28>)
    2292:	468c      	mov	ip, r1
    2294:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2296:	241f      	movs	r4, #31
    2298:	4020      	ands	r0, r4
    229a:	2101      	movs	r1, #1
    229c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    229e:	0018      	movs	r0, r3
    22a0:	4b02      	ldr	r3, [pc, #8]	; (22ac <system_pinmux_pin_set_config+0x2c>)
    22a2:	4798      	blx	r3
}
    22a4:	bd10      	pop	{r4, pc}
    22a6:	46c0      	nop			; (mov r8, r8)
    22a8:	41004400 	.word	0x41004400
    22ac:	000021d9 	.word	0x000021d9

000022b0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    22b0:	4770      	bx	lr
	...

000022b4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    22b4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    22b6:	4b05      	ldr	r3, [pc, #20]	; (22cc <system_init+0x18>)
    22b8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    22ba:	4b05      	ldr	r3, [pc, #20]	; (22d0 <system_init+0x1c>)
    22bc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    22be:	4b05      	ldr	r3, [pc, #20]	; (22d4 <system_init+0x20>)
    22c0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    22c2:	4b05      	ldr	r3, [pc, #20]	; (22d8 <system_init+0x24>)
    22c4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    22c6:	4b05      	ldr	r3, [pc, #20]	; (22dc <system_init+0x28>)
    22c8:	4798      	blx	r3
}
    22ca:	bd10      	pop	{r4, pc}
    22cc:	00001d5d 	.word	0x00001d5d
    22d0:	000008dd 	.word	0x000008dd
    22d4:	000022b1 	.word	0x000022b1
    22d8:	00000a49 	.word	0x00000a49
    22dc:	000022b1 	.word	0x000022b1

000022e0 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    22e0:	1c93      	adds	r3, r2, #2
    22e2:	009b      	lsls	r3, r3, #2
    22e4:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    22e6:	2a02      	cmp	r2, #2
    22e8:	d009      	beq.n	22fe <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    22ea:	2a03      	cmp	r2, #3
    22ec:	d00c      	beq.n	2308 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    22ee:	2301      	movs	r3, #1
    22f0:	4093      	lsls	r3, r2
    22f2:	001a      	movs	r2, r3
    22f4:	7e03      	ldrb	r3, [r0, #24]
    22f6:	4313      	orrs	r3, r2
    22f8:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    22fa:	2000      	movs	r0, #0
    22fc:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    22fe:	7e03      	ldrb	r3, [r0, #24]
    2300:	2210      	movs	r2, #16
    2302:	4313      	orrs	r3, r2
    2304:	7603      	strb	r3, [r0, #24]
    2306:	e7f8      	b.n	22fa <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    2308:	7e03      	ldrb	r3, [r0, #24]
    230a:	2220      	movs	r2, #32
    230c:	4313      	orrs	r3, r2
    230e:	7603      	strb	r3, [r0, #24]
    2310:	e7f3      	b.n	22fa <tc_register_callback+0x1a>
	...

00002314 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    2314:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    2316:	0080      	lsls	r0, r0, #2
    2318:	4b16      	ldr	r3, [pc, #88]	; (2374 <_tc_interrupt_handler+0x60>)
    231a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    231c:	6823      	ldr	r3, [r4, #0]
    231e:	7b9d      	ldrb	r5, [r3, #14]
    2320:	7e22      	ldrb	r2, [r4, #24]
    2322:	7e63      	ldrb	r3, [r4, #25]
    2324:	4013      	ands	r3, r2
    2326:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    2328:	07eb      	lsls	r3, r5, #31
    232a:	d406      	bmi.n	233a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    232c:	07ab      	lsls	r3, r5, #30
    232e:	d40b      	bmi.n	2348 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2330:	06eb      	lsls	r3, r5, #27
    2332:	d410      	bmi.n	2356 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    2334:	06ab      	lsls	r3, r5, #26
    2336:	d415      	bmi.n	2364 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    2338:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    233a:	0020      	movs	r0, r4
    233c:	68a3      	ldr	r3, [r4, #8]
    233e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2340:	2301      	movs	r3, #1
    2342:	6822      	ldr	r2, [r4, #0]
    2344:	7393      	strb	r3, [r2, #14]
    2346:	e7f1      	b.n	232c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    2348:	0020      	movs	r0, r4
    234a:	68e3      	ldr	r3, [r4, #12]
    234c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    234e:	2302      	movs	r3, #2
    2350:	6822      	ldr	r2, [r4, #0]
    2352:	7393      	strb	r3, [r2, #14]
    2354:	e7ec      	b.n	2330 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    2356:	0020      	movs	r0, r4
    2358:	6923      	ldr	r3, [r4, #16]
    235a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    235c:	2310      	movs	r3, #16
    235e:	6822      	ldr	r2, [r4, #0]
    2360:	7393      	strb	r3, [r2, #14]
    2362:	e7e7      	b.n	2334 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    2364:	0020      	movs	r0, r4
    2366:	6963      	ldr	r3, [r4, #20]
    2368:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    236a:	6823      	ldr	r3, [r4, #0]
    236c:	2220      	movs	r2, #32
    236e:	739a      	strb	r2, [r3, #14]
}
    2370:	e7e2      	b.n	2338 <_tc_interrupt_handler+0x24>
    2372:	46c0      	nop			; (mov r8, r8)
    2374:	20000900 	.word	0x20000900

00002378 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    2378:	b510      	push	{r4, lr}
    237a:	2000      	movs	r0, #0
    237c:	4b01      	ldr	r3, [pc, #4]	; (2384 <TC3_Handler+0xc>)
    237e:	4798      	blx	r3
    2380:	bd10      	pop	{r4, pc}
    2382:	46c0      	nop			; (mov r8, r8)
    2384:	00002315 	.word	0x00002315

00002388 <TC4_Handler>:
    2388:	b510      	push	{r4, lr}
    238a:	2001      	movs	r0, #1
    238c:	4b01      	ldr	r3, [pc, #4]	; (2394 <TC4_Handler+0xc>)
    238e:	4798      	blx	r3
    2390:	bd10      	pop	{r4, pc}
    2392:	46c0      	nop			; (mov r8, r8)
    2394:	00002315 	.word	0x00002315

00002398 <TC5_Handler>:
    2398:	b510      	push	{r4, lr}
    239a:	2002      	movs	r0, #2
    239c:	4b01      	ldr	r3, [pc, #4]	; (23a4 <TC5_Handler+0xc>)
    239e:	4798      	blx	r3
    23a0:	bd10      	pop	{r4, pc}
    23a2:	46c0      	nop			; (mov r8, r8)
    23a4:	00002315 	.word	0x00002315

000023a8 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    23a8:	b530      	push	{r4, r5, lr}
    23aa:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    23ac:	aa01      	add	r2, sp, #4
    23ae:	4b0b      	ldr	r3, [pc, #44]	; (23dc <_tc_get_inst_index+0x34>)
    23b0:	cb32      	ldmia	r3!, {r1, r4, r5}
    23b2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    23b4:	9b01      	ldr	r3, [sp, #4]
    23b6:	4298      	cmp	r0, r3
    23b8:	d00d      	beq.n	23d6 <_tc_get_inst_index+0x2e>
    23ba:	9b02      	ldr	r3, [sp, #8]
    23bc:	4298      	cmp	r0, r3
    23be:	d008      	beq.n	23d2 <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    23c0:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    23c2:	9a03      	ldr	r2, [sp, #12]
    23c4:	4282      	cmp	r2, r0
    23c6:	d002      	beq.n	23ce <_tc_get_inst_index+0x26>
}
    23c8:	0018      	movs	r0, r3
    23ca:	b005      	add	sp, #20
    23cc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    23ce:	3302      	adds	r3, #2
    23d0:	e002      	b.n	23d8 <_tc_get_inst_index+0x30>
    23d2:	2301      	movs	r3, #1
    23d4:	e000      	b.n	23d8 <_tc_get_inst_index+0x30>
    23d6:	2300      	movs	r3, #0
			return i;
    23d8:	b2db      	uxtb	r3, r3
    23da:	e7f5      	b.n	23c8 <_tc_get_inst_index+0x20>
    23dc:	00008a0c 	.word	0x00008a0c

000023e0 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    23e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    23e2:	b087      	sub	sp, #28
    23e4:	0004      	movs	r4, r0
    23e6:	000d      	movs	r5, r1
    23e8:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    23ea:	0008      	movs	r0, r1
    23ec:	4b85      	ldr	r3, [pc, #532]	; (2604 <tc_init+0x224>)
    23ee:	4798      	blx	r3
    23f0:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    23f2:	ab05      	add	r3, sp, #20
    23f4:	221b      	movs	r2, #27
    23f6:	701a      	strb	r2, [r3, #0]
    23f8:	3201      	adds	r2, #1
    23fa:	705a      	strb	r2, [r3, #1]
    23fc:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    23fe:	ab03      	add	r3, sp, #12
    2400:	2280      	movs	r2, #128	; 0x80
    2402:	0112      	lsls	r2, r2, #4
    2404:	801a      	strh	r2, [r3, #0]
    2406:	2280      	movs	r2, #128	; 0x80
    2408:	0152      	lsls	r2, r2, #5
    240a:	805a      	strh	r2, [r3, #2]
    240c:	2280      	movs	r2, #128	; 0x80
    240e:	0192      	lsls	r2, r2, #6
    2410:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    2412:	2300      	movs	r3, #0
    2414:	60a3      	str	r3, [r4, #8]
    2416:	60e3      	str	r3, [r4, #12]
    2418:	6123      	str	r3, [r4, #16]
    241a:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    241c:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    241e:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    2420:	0082      	lsls	r2, r0, #2
    2422:	4b79      	ldr	r3, [pc, #484]	; (2608 <tc_init+0x228>)
    2424:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    2426:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2428:	78b3      	ldrb	r3, [r6, #2]
    242a:	2b08      	cmp	r3, #8
    242c:	d006      	beq.n	243c <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    242e:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2430:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2432:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2434:	07db      	lsls	r3, r3, #31
    2436:	d505      	bpl.n	2444 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    2438:	b007      	add	sp, #28
    243a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    243c:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    243e:	07fa      	lsls	r2, r7, #31
    2440:	d5fa      	bpl.n	2438 <tc_init+0x58>
    2442:	e7f4      	b.n	242e <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2444:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    2446:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2448:	06db      	lsls	r3, r3, #27
    244a:	d4f5      	bmi.n	2438 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    244c:	882b      	ldrh	r3, [r5, #0]
    244e:	079b      	lsls	r3, r3, #30
    2450:	d4f2      	bmi.n	2438 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    2452:	7c33      	ldrb	r3, [r6, #16]
    2454:	2b00      	cmp	r3, #0
    2456:	d179      	bne.n	254c <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    2458:	7f33      	ldrb	r3, [r6, #28]
    245a:	2b00      	cmp	r3, #0
    245c:	d000      	beq.n	2460 <tc_init+0x80>
    245e:	e081      	b.n	2564 <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    2460:	496a      	ldr	r1, [pc, #424]	; (260c <tc_init+0x22c>)
    2462:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    2464:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2466:	ab03      	add	r3, sp, #12
    2468:	5ad3      	ldrh	r3, [r2, r3]
    246a:	4303      	orrs	r3, r0
    246c:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    246e:	78b3      	ldrb	r3, [r6, #2]
    2470:	2b08      	cmp	r3, #8
    2472:	d100      	bne.n	2476 <tc_init+0x96>
    2474:	e086      	b.n	2584 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    2476:	a901      	add	r1, sp, #4
    2478:	7833      	ldrb	r3, [r6, #0]
    247a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    247c:	ab05      	add	r3, sp, #20
    247e:	5ddf      	ldrb	r7, [r3, r7]
    2480:	0038      	movs	r0, r7
    2482:	4b63      	ldr	r3, [pc, #396]	; (2610 <tc_init+0x230>)
    2484:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    2486:	0038      	movs	r0, r7
    2488:	4b62      	ldr	r3, [pc, #392]	; (2614 <tc_init+0x234>)
    248a:	4798      	blx	r3
	ctrla_tmp =
    248c:	8931      	ldrh	r1, [r6, #8]
    248e:	88b3      	ldrh	r3, [r6, #4]
    2490:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    2492:	78b1      	ldrb	r1, [r6, #2]
    2494:	79b2      	ldrb	r2, [r6, #6]
    2496:	4311      	orrs	r1, r2
	ctrla_tmp =
    2498:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    249a:	7873      	ldrb	r3, [r6, #1]
    249c:	2b00      	cmp	r3, #0
    249e:	d002      	beq.n	24a6 <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    24a0:	2380      	movs	r3, #128	; 0x80
    24a2:	011b      	lsls	r3, r3, #4
    24a4:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    24a6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    24a8:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    24aa:	b25b      	sxtb	r3, r3
    24ac:	2b00      	cmp	r3, #0
    24ae:	dbfb      	blt.n	24a8 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    24b0:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    24b2:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    24b4:	1e4b      	subs	r3, r1, #1
    24b6:	4199      	sbcs	r1, r3
    24b8:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    24ba:	7bb3      	ldrb	r3, [r6, #14]
    24bc:	2b00      	cmp	r3, #0
    24be:	d001      	beq.n	24c4 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    24c0:	2301      	movs	r3, #1
    24c2:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    24c4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    24c6:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    24c8:	b25b      	sxtb	r3, r3
    24ca:	2b00      	cmp	r3, #0
    24cc:	dbfb      	blt.n	24c6 <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    24ce:	23ff      	movs	r3, #255	; 0xff
    24d0:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    24d2:	2900      	cmp	r1, #0
    24d4:	d005      	beq.n	24e2 <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    24d6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    24d8:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    24da:	b25b      	sxtb	r3, r3
    24dc:	2b00      	cmp	r3, #0
    24de:	dbfb      	blt.n	24d8 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    24e0:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    24e2:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    24e4:	7af3      	ldrb	r3, [r6, #11]
    24e6:	2b00      	cmp	r3, #0
    24e8:	d001      	beq.n	24ee <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    24ea:	2310      	movs	r3, #16
    24ec:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    24ee:	7b33      	ldrb	r3, [r6, #12]
    24f0:	2b00      	cmp	r3, #0
    24f2:	d001      	beq.n	24f8 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    24f4:	2320      	movs	r3, #32
    24f6:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    24f8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    24fa:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    24fc:	b25b      	sxtb	r3, r3
    24fe:	2b00      	cmp	r3, #0
    2500:	dbfb      	blt.n	24fa <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    2502:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2504:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2506:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2508:	b25b      	sxtb	r3, r3
    250a:	2b00      	cmp	r3, #0
    250c:	dbfb      	blt.n	2506 <tc_init+0x126>
	switch (module_inst->counter_size) {
    250e:	7923      	ldrb	r3, [r4, #4]
    2510:	2b04      	cmp	r3, #4
    2512:	d03f      	beq.n	2594 <tc_init+0x1b4>
    2514:	2b08      	cmp	r3, #8
    2516:	d05e      	beq.n	25d6 <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    2518:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    251a:	2b00      	cmp	r3, #0
    251c:	d000      	beq.n	2520 <tc_init+0x140>
    251e:	e78b      	b.n	2438 <tc_init+0x58>
    2520:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2522:	b25b      	sxtb	r3, r3
    2524:	2b00      	cmp	r3, #0
    2526:	dbfb      	blt.n	2520 <tc_init+0x140>
				= config->counter_16_bit.value;
    2528:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    252a:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    252c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    252e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2530:	b25b      	sxtb	r3, r3
    2532:	2b00      	cmp	r3, #0
    2534:	dbfb      	blt.n	252e <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    2536:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    2538:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    253a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    253c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    253e:	b25b      	sxtb	r3, r3
    2540:	2b00      	cmp	r3, #0
    2542:	dbfb      	blt.n	253c <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    2544:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    2546:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    2548:	2000      	movs	r0, #0
    254a:	e775      	b.n	2438 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    254c:	a902      	add	r1, sp, #8
    254e:	2301      	movs	r3, #1
    2550:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2552:	2200      	movs	r2, #0
    2554:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    2556:	7e32      	ldrb	r2, [r6, #24]
    2558:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    255a:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    255c:	7d30      	ldrb	r0, [r6, #20]
    255e:	4b2e      	ldr	r3, [pc, #184]	; (2618 <tc_init+0x238>)
    2560:	4798      	blx	r3
    2562:	e779      	b.n	2458 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2564:	a902      	add	r1, sp, #8
    2566:	2301      	movs	r3, #1
    2568:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    256a:	2200      	movs	r2, #0
    256c:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    256e:	3224      	adds	r2, #36	; 0x24
    2570:	18b2      	adds	r2, r6, r2
    2572:	7812      	ldrb	r2, [r2, #0]
    2574:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2576:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2578:	331f      	adds	r3, #31
    257a:	18f3      	adds	r3, r6, r3
    257c:	7818      	ldrb	r0, [r3, #0]
    257e:	4b26      	ldr	r3, [pc, #152]	; (2618 <tc_init+0x238>)
    2580:	4798      	blx	r3
    2582:	e76d      	b.n	2460 <tc_init+0x80>
    2584:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    2586:	1c7a      	adds	r2, r7, #1
    2588:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    258a:	ab03      	add	r3, sp, #12
    258c:	5ad3      	ldrh	r3, [r2, r3]
    258e:	4303      	orrs	r3, r0
    2590:	620b      	str	r3, [r1, #32]
    2592:	e770      	b.n	2476 <tc_init+0x96>
    2594:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2596:	b25b      	sxtb	r3, r3
    2598:	2b00      	cmp	r3, #0
    259a:	dbfb      	blt.n	2594 <tc_init+0x1b4>
					config->counter_8_bit.value;
    259c:	2328      	movs	r3, #40	; 0x28
    259e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    25a0:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25a2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25a4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    25a6:	b25b      	sxtb	r3, r3
    25a8:	2b00      	cmp	r3, #0
    25aa:	dbfb      	blt.n	25a4 <tc_init+0x1c4>
					config->counter_8_bit.period;
    25ac:	2329      	movs	r3, #41	; 0x29
    25ae:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    25b0:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25b2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25b4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    25b6:	b25b      	sxtb	r3, r3
    25b8:	2b00      	cmp	r3, #0
    25ba:	dbfb      	blt.n	25b4 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    25bc:	232a      	movs	r3, #42	; 0x2a
    25be:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    25c0:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25c2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25c4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    25c6:	b25b      	sxtb	r3, r3
    25c8:	2b00      	cmp	r3, #0
    25ca:	dbfb      	blt.n	25c4 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    25cc:	232b      	movs	r3, #43	; 0x2b
    25ce:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    25d0:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    25d2:	2000      	movs	r0, #0
    25d4:	e730      	b.n	2438 <tc_init+0x58>
    25d6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    25d8:	b25b      	sxtb	r3, r3
    25da:	2b00      	cmp	r3, #0
    25dc:	dbfb      	blt.n	25d6 <tc_init+0x1f6>
				= config->counter_32_bit.value;
    25de:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    25e0:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25e2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25e4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    25e6:	b25b      	sxtb	r3, r3
    25e8:	2b00      	cmp	r3, #0
    25ea:	dbfb      	blt.n	25e4 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    25ec:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    25ee:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25f0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25f2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    25f4:	b25b      	sxtb	r3, r3
    25f6:	2b00      	cmp	r3, #0
    25f8:	dbfb      	blt.n	25f2 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    25fa:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    25fc:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    25fe:	2000      	movs	r0, #0
    2600:	e71a      	b.n	2438 <tc_init+0x58>
    2602:	46c0      	nop			; (mov r8, r8)
    2604:	000023a9 	.word	0x000023a9
    2608:	20000900 	.word	0x20000900
    260c:	40000400 	.word	0x40000400
    2610:	00002189 	.word	0x00002189
    2614:	000020fd 	.word	0x000020fd
    2618:	00002281 	.word	0x00002281

0000261c <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    261c:	6802      	ldr	r2, [r0, #0]
    261e:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    2620:	b25b      	sxtb	r3, r3
    2622:	2b00      	cmp	r3, #0
    2624:	dbfb      	blt.n	261e <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    2626:	7903      	ldrb	r3, [r0, #4]
    2628:	2b04      	cmp	r3, #4
    262a:	d005      	beq.n	2638 <tc_get_count_value+0x1c>
    262c:	2b08      	cmp	r3, #8
    262e:	d009      	beq.n	2644 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    2630:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    2632:	2b00      	cmp	r3, #0
    2634:	d003      	beq.n	263e <tc_get_count_value+0x22>
}
    2636:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    2638:	7c10      	ldrb	r0, [r2, #16]
    263a:	b2c0      	uxtb	r0, r0
    263c:	e7fb      	b.n	2636 <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    263e:	8a10      	ldrh	r0, [r2, #16]
    2640:	b280      	uxth	r0, r0
    2642:	e7f8      	b.n	2636 <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    2644:	6910      	ldr	r0, [r2, #16]
    2646:	e7f6      	b.n	2636 <tc_get_count_value+0x1a>

00002648 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    2648:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    264a:	6804      	ldr	r4, [r0, #0]
    264c:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    264e:	b25b      	sxtb	r3, r3
    2650:	2b00      	cmp	r3, #0
    2652:	dbfb      	blt.n	264c <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    2654:	7903      	ldrb	r3, [r0, #4]
    2656:	2b04      	cmp	r3, #4
    2658:	d005      	beq.n	2666 <tc_set_compare_value+0x1e>
    265a:	2b08      	cmp	r3, #8
    265c:	d014      	beq.n	2688 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    265e:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    2660:	2b00      	cmp	r3, #0
    2662:	d008      	beq.n	2676 <tc_set_compare_value+0x2e>
}
    2664:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    2666:	2017      	movs	r0, #23
			if (channel_index <
    2668:	2901      	cmp	r1, #1
    266a:	d8fb      	bhi.n	2664 <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    266c:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    266e:	1861      	adds	r1, r4, r1
    2670:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    2672:	2000      	movs	r0, #0
    2674:	e7f6      	b.n	2664 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    2676:	2017      	movs	r0, #23
			if (channel_index <
    2678:	2901      	cmp	r1, #1
    267a:	d8f3      	bhi.n	2664 <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    267c:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    267e:	310c      	adds	r1, #12
    2680:	0049      	lsls	r1, r1, #1
    2682:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    2684:	2000      	movs	r0, #0
    2686:	e7ed      	b.n	2664 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    2688:	2017      	movs	r0, #23
			if (channel_index <
    268a:	2901      	cmp	r1, #1
    268c:	d8ea      	bhi.n	2664 <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    268e:	3106      	adds	r1, #6
    2690:	0089      	lsls	r1, r1, #2
    2692:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    2694:	2000      	movs	r0, #0
    2696:	e7e5      	b.n	2664 <tc_set_compare_value+0x1c>

00002698 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2698:	e7fe      	b.n	2698 <Dummy_Handler>
	...

0000269c <Reset_Handler>:
{
    269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    269e:	4a2a      	ldr	r2, [pc, #168]	; (2748 <Reset_Handler+0xac>)
    26a0:	4b2a      	ldr	r3, [pc, #168]	; (274c <Reset_Handler+0xb0>)
    26a2:	429a      	cmp	r2, r3
    26a4:	d011      	beq.n	26ca <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    26a6:	001a      	movs	r2, r3
    26a8:	4b29      	ldr	r3, [pc, #164]	; (2750 <Reset_Handler+0xb4>)
    26aa:	429a      	cmp	r2, r3
    26ac:	d20d      	bcs.n	26ca <Reset_Handler+0x2e>
    26ae:	4a29      	ldr	r2, [pc, #164]	; (2754 <Reset_Handler+0xb8>)
    26b0:	3303      	adds	r3, #3
    26b2:	1a9b      	subs	r3, r3, r2
    26b4:	089b      	lsrs	r3, r3, #2
    26b6:	3301      	adds	r3, #1
    26b8:	009b      	lsls	r3, r3, #2
    26ba:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    26bc:	4823      	ldr	r0, [pc, #140]	; (274c <Reset_Handler+0xb0>)
    26be:	4922      	ldr	r1, [pc, #136]	; (2748 <Reset_Handler+0xac>)
    26c0:	588c      	ldr	r4, [r1, r2]
    26c2:	5084      	str	r4, [r0, r2]
    26c4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    26c6:	429a      	cmp	r2, r3
    26c8:	d1fa      	bne.n	26c0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    26ca:	4a23      	ldr	r2, [pc, #140]	; (2758 <Reset_Handler+0xbc>)
    26cc:	4b23      	ldr	r3, [pc, #140]	; (275c <Reset_Handler+0xc0>)
    26ce:	429a      	cmp	r2, r3
    26d0:	d20a      	bcs.n	26e8 <Reset_Handler+0x4c>
    26d2:	43d3      	mvns	r3, r2
    26d4:	4921      	ldr	r1, [pc, #132]	; (275c <Reset_Handler+0xc0>)
    26d6:	185b      	adds	r3, r3, r1
    26d8:	2103      	movs	r1, #3
    26da:	438b      	bics	r3, r1
    26dc:	3304      	adds	r3, #4
    26de:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    26e0:	2100      	movs	r1, #0
    26e2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    26e4:	4293      	cmp	r3, r2
    26e6:	d1fc      	bne.n	26e2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    26e8:	4a1d      	ldr	r2, [pc, #116]	; (2760 <Reset_Handler+0xc4>)
    26ea:	21ff      	movs	r1, #255	; 0xff
    26ec:	4b1d      	ldr	r3, [pc, #116]	; (2764 <Reset_Handler+0xc8>)
    26ee:	438b      	bics	r3, r1
    26f0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    26f2:	39fd      	subs	r1, #253	; 0xfd
    26f4:	2390      	movs	r3, #144	; 0x90
    26f6:	005b      	lsls	r3, r3, #1
    26f8:	4a1b      	ldr	r2, [pc, #108]	; (2768 <Reset_Handler+0xcc>)
    26fa:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    26fc:	4a1b      	ldr	r2, [pc, #108]	; (276c <Reset_Handler+0xd0>)
    26fe:	78d3      	ldrb	r3, [r2, #3]
    2700:	2503      	movs	r5, #3
    2702:	43ab      	bics	r3, r5
    2704:	2402      	movs	r4, #2
    2706:	4323      	orrs	r3, r4
    2708:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    270a:	78d3      	ldrb	r3, [r2, #3]
    270c:	270c      	movs	r7, #12
    270e:	43bb      	bics	r3, r7
    2710:	2608      	movs	r6, #8
    2712:	4333      	orrs	r3, r6
    2714:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2716:	4b16      	ldr	r3, [pc, #88]	; (2770 <Reset_Handler+0xd4>)
    2718:	7b98      	ldrb	r0, [r3, #14]
    271a:	2230      	movs	r2, #48	; 0x30
    271c:	4390      	bics	r0, r2
    271e:	2220      	movs	r2, #32
    2720:	4310      	orrs	r0, r2
    2722:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2724:	7b99      	ldrb	r1, [r3, #14]
    2726:	43b9      	bics	r1, r7
    2728:	4331      	orrs	r1, r6
    272a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    272c:	7b9a      	ldrb	r2, [r3, #14]
    272e:	43aa      	bics	r2, r5
    2730:	4322      	orrs	r2, r4
    2732:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2734:	4a0f      	ldr	r2, [pc, #60]	; (2774 <Reset_Handler+0xd8>)
    2736:	6853      	ldr	r3, [r2, #4]
    2738:	2180      	movs	r1, #128	; 0x80
    273a:	430b      	orrs	r3, r1
    273c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    273e:	4b0e      	ldr	r3, [pc, #56]	; (2778 <Reset_Handler+0xdc>)
    2740:	4798      	blx	r3
        main();
    2742:	4b0e      	ldr	r3, [pc, #56]	; (277c <Reset_Handler+0xe0>)
    2744:	4798      	blx	r3
    2746:	e7fe      	b.n	2746 <Reset_Handler+0xaa>
    2748:	00008e58 	.word	0x00008e58
    274c:	20000000 	.word	0x20000000
    2750:	200001dc 	.word	0x200001dc
    2754:	20000004 	.word	0x20000004
    2758:	200001dc 	.word	0x200001dc
    275c:	20000a20 	.word	0x20000a20
    2760:	e000ed00 	.word	0xe000ed00
    2764:	00000000 	.word	0x00000000
    2768:	41007000 	.word	0x41007000
    276c:	41005000 	.word	0x41005000
    2770:	41004800 	.word	0x41004800
    2774:	41004000 	.word	0x41004000
    2778:	000033d1 	.word	0x000033d1
    277c:	000032c9 	.word	0x000032c9

00002780 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2780:	b5f0      	push	{r4, r5, r6, r7, lr}
    2782:	46c6      	mov	lr, r8
    2784:	b500      	push	{lr}
    2786:	000c      	movs	r4, r1
    2788:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    278a:	2800      	cmp	r0, #0
    278c:	d10f      	bne.n	27ae <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    278e:	2a00      	cmp	r2, #0
    2790:	dd11      	ble.n	27b6 <_read+0x36>
    2792:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2794:	4e09      	ldr	r6, [pc, #36]	; (27bc <_read+0x3c>)
    2796:	4d0a      	ldr	r5, [pc, #40]	; (27c0 <_read+0x40>)
    2798:	6830      	ldr	r0, [r6, #0]
    279a:	0021      	movs	r1, r4
    279c:	682b      	ldr	r3, [r5, #0]
    279e:	4798      	blx	r3
		ptr++;
    27a0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    27a2:	42bc      	cmp	r4, r7
    27a4:	d1f8      	bne.n	2798 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    27a6:	4640      	mov	r0, r8
    27a8:	bc04      	pop	{r2}
    27aa:	4690      	mov	r8, r2
    27ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    27ae:	2301      	movs	r3, #1
    27b0:	425b      	negs	r3, r3
    27b2:	4698      	mov	r8, r3
    27b4:	e7f7      	b.n	27a6 <_read+0x26>
	for (; len > 0; --len) {
    27b6:	4680      	mov	r8, r0
    27b8:	e7f5      	b.n	27a6 <_read+0x26>
    27ba:	46c0      	nop			; (mov r8, r8)
    27bc:	20000914 	.word	0x20000914
    27c0:	2000090c 	.word	0x2000090c

000027c4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    27c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    27c6:	46c6      	mov	lr, r8
    27c8:	b500      	push	{lr}
    27ca:	000e      	movs	r6, r1
    27cc:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    27ce:	3801      	subs	r0, #1
    27d0:	2802      	cmp	r0, #2
    27d2:	d810      	bhi.n	27f6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    27d4:	2a00      	cmp	r2, #0
    27d6:	d011      	beq.n	27fc <_write+0x38>
    27d8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    27da:	4b0c      	ldr	r3, [pc, #48]	; (280c <_write+0x48>)
    27dc:	4698      	mov	r8, r3
    27de:	4f0c      	ldr	r7, [pc, #48]	; (2810 <_write+0x4c>)
    27e0:	4643      	mov	r3, r8
    27e2:	6818      	ldr	r0, [r3, #0]
    27e4:	5d31      	ldrb	r1, [r6, r4]
    27e6:	683b      	ldr	r3, [r7, #0]
    27e8:	4798      	blx	r3
    27ea:	2800      	cmp	r0, #0
    27ec:	db08      	blt.n	2800 <_write+0x3c>
			return -1;
		}
		++nChars;
    27ee:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    27f0:	42a5      	cmp	r5, r4
    27f2:	d1f5      	bne.n	27e0 <_write+0x1c>
    27f4:	e006      	b.n	2804 <_write+0x40>
		return -1;
    27f6:	2401      	movs	r4, #1
    27f8:	4264      	negs	r4, r4
    27fa:	e003      	b.n	2804 <_write+0x40>
	for (; len != 0; --len) {
    27fc:	0014      	movs	r4, r2
    27fe:	e001      	b.n	2804 <_write+0x40>
			return -1;
    2800:	2401      	movs	r4, #1
    2802:	4264      	negs	r4, r4
	}
	return nChars;
}
    2804:	0020      	movs	r0, r4
    2806:	bc04      	pop	{r2}
    2808:	4690      	mov	r8, r2
    280a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    280c:	20000914 	.word	0x20000914
    2810:	20000910 	.word	0x20000910

00002814 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2814:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2816:	4a06      	ldr	r2, [pc, #24]	; (2830 <_sbrk+0x1c>)
    2818:	6812      	ldr	r2, [r2, #0]
    281a:	2a00      	cmp	r2, #0
    281c:	d004      	beq.n	2828 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    281e:	4a04      	ldr	r2, [pc, #16]	; (2830 <_sbrk+0x1c>)
    2820:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2822:	18c3      	adds	r3, r0, r3
    2824:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2826:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2828:	4902      	ldr	r1, [pc, #8]	; (2834 <_sbrk+0x20>)
    282a:	4a01      	ldr	r2, [pc, #4]	; (2830 <_sbrk+0x1c>)
    282c:	6011      	str	r1, [r2, #0]
    282e:	e7f6      	b.n	281e <_sbrk+0xa>
    2830:	20000238 	.word	0x20000238
    2834:	20002a20 	.word	0x20002a20

00002838 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2838:	2001      	movs	r0, #1
    283a:	4240      	negs	r0, r0
    283c:	4770      	bx	lr

0000283e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    283e:	2380      	movs	r3, #128	; 0x80
    2840:	019b      	lsls	r3, r3, #6
    2842:	604b      	str	r3, [r1, #4]

	return 0;
}
    2844:	2000      	movs	r0, #0
    2846:	4770      	bx	lr

00002848 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2848:	2001      	movs	r0, #1
    284a:	4770      	bx	lr

0000284c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    284c:	2000      	movs	r0, #0
    284e:	4770      	bx	lr

00002850 <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    2850:	b510      	push	{r4, lr}
	nwkIb.nwkSeqNum = 0;
    2852:	4a0d      	ldr	r2, [pc, #52]	; (2888 <NWK_Init+0x38>)
    2854:	2300      	movs	r3, #0
    2856:	7113      	strb	r3, [r2, #4]
	nwkIb.macSeqNum = 0;
    2858:	7153      	strb	r3, [r2, #5]
	nwkIb.addr = 0;
    285a:	8013      	strh	r3, [r2, #0]
	nwkIb.lock = 0;
    285c:	2158      	movs	r1, #88	; 0x58
    285e:	5253      	strh	r3, [r2, r1]
    2860:	0013      	movs	r3, r2
    2862:	3240      	adds	r2, #64	; 0x40

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    2864:	2100      	movs	r1, #0
    2866:	6099      	str	r1, [r3, #8]
    2868:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    286a:	4293      	cmp	r3, r2
    286c:	d1fb      	bne.n	2866 <NWK_Init+0x16>
	}

	nwkTxInit();
    286e:	4b07      	ldr	r3, [pc, #28]	; (288c <NWK_Init+0x3c>)
    2870:	4798      	blx	r3
	nwkRxInit();
    2872:	4b07      	ldr	r3, [pc, #28]	; (2890 <NWK_Init+0x40>)
    2874:	4798      	blx	r3
	nwkFrameInit();
    2876:	4b07      	ldr	r3, [pc, #28]	; (2894 <NWK_Init+0x44>)
    2878:	4798      	blx	r3
	nwkDataReqInit();
    287a:	4b07      	ldr	r3, [pc, #28]	; (2898 <NWK_Init+0x48>)
    287c:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    287e:	4b07      	ldr	r3, [pc, #28]	; (289c <NWK_Init+0x4c>)
    2880:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    2882:	4b07      	ldr	r3, [pc, #28]	; (28a0 <NWK_Init+0x50>)
    2884:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
    2886:	bd10      	pop	{r4, pc}
    2888:	20000918 	.word	0x20000918
    288c:	00002b3d 	.word	0x00002b3d
    2890:	00002a35 	.word	0x00002a35
    2894:	000028c1 	.word	0x000028c1
    2898:	000028b5 	.word	0x000028b5
    289c:	00002911 	.word	0x00002911
    28a0:	00002a75 	.word	0x00002a75

000028a4 <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    28a4:	3002      	adds	r0, #2
    28a6:	0080      	lsls	r0, r0, #2
    28a8:	4b01      	ldr	r3, [pc, #4]	; (28b0 <NWK_OpenEndpoint+0xc>)
    28aa:	50c1      	str	r1, [r0, r3]
}
    28ac:	4770      	bx	lr
    28ae:	46c0      	nop			; (mov r8, r8)
    28b0:	20000918 	.word	0x20000918

000028b4 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    28b4:	2200      	movs	r2, #0
    28b6:	4b01      	ldr	r3, [pc, #4]	; (28bc <nwkDataReqInit+0x8>)
    28b8:	601a      	str	r2, [r3, #0]
}
    28ba:	4770      	bx	lr
    28bc:	2000023c 	.word	0x2000023c

000028c0 <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    28c0:	4b03      	ldr	r3, [pc, #12]	; (28d0 <nwkFrameInit+0x10>)
    28c2:	2200      	movs	r2, #0
    28c4:	701a      	strb	r2, [r3, #0]
    28c6:	218d      	movs	r1, #141	; 0x8d
    28c8:	545a      	strb	r2, [r3, r1]
    28ca:	318d      	adds	r1, #141	; 0x8d
    28cc:	545a      	strb	r2, [r3, r1]
	}
}
    28ce:	4770      	bx	lr
    28d0:	20000240 	.word	0x20000240

000028d4 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    28d4:	2800      	cmp	r0, #0
    28d6:	d012      	beq.n	28fe <nwkFrameNext+0x2a>
		frame = nwkFrameFrames;
	} else {
		frame++;
    28d8:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    28da:	4b0c      	ldr	r3, [pc, #48]	; (290c <nwkFrameNext+0x38>)
    28dc:	33a8      	adds	r3, #168	; 0xa8
    28de:	33ff      	adds	r3, #255	; 0xff
    28e0:	4298      	cmp	r0, r3
    28e2:	d210      	bcs.n	2906 <nwkFrameNext+0x32>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    28e4:	7803      	ldrb	r3, [r0, #0]
    28e6:	2b00      	cmp	r3, #0
    28e8:	d10c      	bne.n	2904 <nwkFrameNext+0x30>
	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    28ea:	4a08      	ldr	r2, [pc, #32]	; (290c <nwkFrameNext+0x38>)
    28ec:	32a8      	adds	r2, #168	; 0xa8
    28ee:	32ff      	adds	r2, #255	; 0xff
    28f0:	308d      	adds	r0, #141	; 0x8d
    28f2:	4290      	cmp	r0, r2
    28f4:	d205      	bcs.n	2902 <nwkFrameNext+0x2e>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    28f6:	7803      	ldrb	r3, [r0, #0]
    28f8:	2b00      	cmp	r3, #0
    28fa:	d0f9      	beq.n	28f0 <nwkFrameNext+0x1c>
    28fc:	e002      	b.n	2904 <nwkFrameNext+0x30>
		frame = nwkFrameFrames;
    28fe:	4803      	ldr	r0, [pc, #12]	; (290c <nwkFrameNext+0x38>)
    2900:	e7f0      	b.n	28e4 <nwkFrameNext+0x10>
			return frame;
		}
	}

	return NULL;
    2902:	2000      	movs	r0, #0
}
    2904:	4770      	bx	lr
	return NULL;
    2906:	2000      	movs	r0, #0
    2908:	e7fc      	b.n	2904 <nwkFrameNext+0x30>
    290a:	46c0      	nop			; (mov r8, r8)
    290c:	20000240 	.word	0x20000240

00002910 <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    2910:	b5f0      	push	{r4, r5, r6, r7, lr}
    2912:	4b09      	ldr	r3, [pc, #36]	; (2938 <nwkRouteInit+0x28>)
    2914:	3302      	adds	r3, #2
    2916:	2200      	movs	r2, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2918:	2701      	movs	r7, #1
    291a:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    291c:	4c06      	ldr	r4, [pc, #24]	; (2938 <nwkRouteInit+0x28>)
    291e:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    2920:	2500      	movs	r5, #0
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2922:	801f      	strh	r7, [r3, #0]
		nwkRouteTable[i].fixed = 0;
    2924:	00d0      	lsls	r0, r2, #3
    2926:	5d01      	ldrb	r1, [r0, r4]
    2928:	43b1      	bics	r1, r6
    292a:	5501      	strb	r1, [r0, r4]
		nwkRouteTable[i].rank = 0;
    292c:	711d      	strb	r5, [r3, #4]
    292e:	3201      	adds	r2, #1
    2930:	3308      	adds	r3, #8
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2932:	2a64      	cmp	r2, #100	; 0x64
    2934:	d1f5      	bne.n	2922 <nwkRouteInit+0x12>
	}
}
    2936:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2938:	200003e8 	.word	0x200003e8

0000293c <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    293c:	b530      	push	{r4, r5, lr}
    293e:	4a0c      	ldr	r2, [pc, #48]	; (2970 <NWK_RouteFindEntry+0x34>)
    2940:	3202      	adds	r2, #2
    2942:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    2944:	4d0a      	ldr	r5, [pc, #40]	; (2970 <NWK_RouteFindEntry+0x34>)
    2946:	e003      	b.n	2950 <NWK_RouteFindEntry+0x14>
    2948:	3301      	adds	r3, #1
    294a:	3208      	adds	r2, #8
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    294c:	2b64      	cmp	r3, #100	; 0x64
    294e:	d00c      	beq.n	296a <NWK_RouteFindEntry+0x2e>
		if (nwkRouteTable[i].dstAddr == dst &&
    2950:	8814      	ldrh	r4, [r2, #0]
    2952:	4284      	cmp	r4, r0
    2954:	d1f8      	bne.n	2948 <NWK_RouteFindEntry+0xc>
				nwkRouteTable[i].multicast == multicast) {
    2956:	00dc      	lsls	r4, r3, #3
    2958:	5d64      	ldrb	r4, [r4, r5]
    295a:	07a4      	lsls	r4, r4, #30
    295c:	0fe4      	lsrs	r4, r4, #31
		if (nwkRouteTable[i].dstAddr == dst &&
    295e:	428c      	cmp	r4, r1
    2960:	d1f2      	bne.n	2948 <NWK_RouteFindEntry+0xc>
			return &nwkRouteTable[i];
    2962:	00db      	lsls	r3, r3, #3
    2964:	4802      	ldr	r0, [pc, #8]	; (2970 <NWK_RouteFindEntry+0x34>)
    2966:	18c0      	adds	r0, r0, r3
		}
	}

	return NULL;
}
    2968:	bd30      	pop	{r4, r5, pc}
	return NULL;
    296a:	2000      	movs	r0, #0
    296c:	e7fc      	b.n	2968 <NWK_RouteFindEntry+0x2c>
    296e:	46c0      	nop			; (mov r8, r8)
    2970:	200003e8 	.word	0x200003e8

00002974 <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    2974:	7803      	ldrb	r3, [r0, #0]
    2976:	07db      	lsls	r3, r3, #31
    2978:	d404      	bmi.n	2984 <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    297a:	2301      	movs	r3, #1
    297c:	425b      	negs	r3, r3
    297e:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    2980:	2300      	movs	r3, #0
    2982:	7183      	strb	r3, [r0, #6]
}
    2984:	4770      	bx	lr
	...

00002988 <nwkRouteRemove>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    2988:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    298a:	4b03      	ldr	r3, [pc, #12]	; (2998 <nwkRouteRemove+0x10>)
    298c:	4798      	blx	r3
	if (entry) {
    298e:	2800      	cmp	r0, #0
    2990:	d001      	beq.n	2996 <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    2992:	4b02      	ldr	r3, [pc, #8]	; (299c <nwkRouteRemove+0x14>)
    2994:	4798      	blx	r3
	}
}
    2996:	bd10      	pop	{r4, pc}
    2998:	0000293d 	.word	0x0000293d
    299c:	00002975 	.word	0x00002975

000029a0 <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    29a0:	b510      	push	{r4, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    29a2:	7b02      	ldrb	r2, [r0, #12]
		return false;
    29a4:	2300      	movs	r3, #0
	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    29a6:	2a06      	cmp	r2, #6
    29a8:	d001      	beq.n	29ae <nwkRouteErrorReceived+0xe>
	}

	nwkRouteRemove(command->dstAddr, command->multicast);

	return true;
}
    29aa:	0018      	movs	r0, r3
    29ac:	bd10      	pop	{r4, pc}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    29ae:	6883      	ldr	r3, [r0, #8]
	nwkRouteRemove(command->dstAddr, command->multicast);
    29b0:	7959      	ldrb	r1, [r3, #5]
    29b2:	78da      	ldrb	r2, [r3, #3]
    29b4:	7918      	ldrb	r0, [r3, #4]
    29b6:	0200      	lsls	r0, r0, #8
    29b8:	4310      	orrs	r0, r2
    29ba:	4b02      	ldr	r3, [pc, #8]	; (29c4 <nwkRouteErrorReceived+0x24>)
    29bc:	4798      	blx	r3
	return true;
    29be:	2301      	movs	r3, #1
    29c0:	e7f3      	b.n	29aa <nwkRouteErrorReceived+0xa>
    29c2:	46c0      	nop			; (mov r8, r8)
    29c4:	00002989 	.word	0x00002989

000029c8 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    29c8:	b510      	push	{r4, lr}
	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
		return false;
	}
#endif

	if (ind->size < 1) {
    29ca:	7b02      	ldrb	r2, [r0, #12]
		return false;
    29cc:	2300      	movs	r3, #0
	if (ind->size < 1) {
    29ce:	2a00      	cmp	r2, #0
    29d0:	d00a      	beq.n	29e8 <nwkRxSeriveDataInd+0x20>
	}

	switch (ind->data[0]) {
    29d2:	6883      	ldr	r3, [r0, #8]
    29d4:	781b      	ldrb	r3, [r3, #0]
    29d6:	2b00      	cmp	r3, #0
    29d8:	d003      	beq.n	29e2 <nwkRxSeriveDataInd+0x1a>
    29da:	2b01      	cmp	r3, #1
    29dc:	d006      	beq.n	29ec <nwkRxSeriveDataInd+0x24>
	case NWK_COMMAND_ROUTE_REPLY:
		return nwkRouteDiscoveryReplyReceived(ind);
#endif

	default:
		return false;
    29de:	2300      	movs	r3, #0
    29e0:	e002      	b.n	29e8 <nwkRxSeriveDataInd+0x20>
		return nwkTxAckReceived(ind);
    29e2:	4b04      	ldr	r3, [pc, #16]	; (29f4 <nwkRxSeriveDataInd+0x2c>)
    29e4:	4798      	blx	r3
    29e6:	0003      	movs	r3, r0
	}
}
    29e8:	0018      	movs	r0, r3
    29ea:	bd10      	pop	{r4, pc}
		return nwkRouteErrorReceived(ind);
    29ec:	4b02      	ldr	r3, [pc, #8]	; (29f8 <nwkRxSeriveDataInd+0x30>)
    29ee:	4798      	blx	r3
    29f0:	0003      	movs	r3, r0
    29f2:	e7f9      	b.n	29e8 <nwkRxSeriveDataInd+0x20>
    29f4:	00002b71 	.word	0x00002b71
    29f8:	000029a1 	.word	0x000029a1

000029fc <nwkRxDuplicateRejectionTimerHandler>:
{
    29fc:	b570      	push	{r4, r5, r6, lr}
    29fe:	490b      	ldr	r1, [pc, #44]	; (2a2c <nwkRxDuplicateRejectionTimerHandler+0x30>)
    2a00:	1d0b      	adds	r3, r1, #4
    2a02:	3140      	adds	r1, #64	; 0x40
	bool restart = false;
    2a04:	2400      	movs	r4, #0
			restart = true;
    2a06:	2501      	movs	r5, #1
    2a08:	e002      	b.n	2a10 <nwkRxDuplicateRejectionTimerHandler+0x14>
    2a0a:	3306      	adds	r3, #6
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2a0c:	428b      	cmp	r3, r1
    2a0e:	d006      	beq.n	2a1e <nwkRxDuplicateRejectionTimerHandler+0x22>
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    2a10:	781a      	ldrb	r2, [r3, #0]
    2a12:	2a00      	cmp	r2, #0
    2a14:	d0f9      	beq.n	2a0a <nwkRxDuplicateRejectionTimerHandler+0xe>
			nwkRxDuplicateRejectionTable[i].ttl--;
    2a16:	3a01      	subs	r2, #1
    2a18:	701a      	strb	r2, [r3, #0]
			restart = true;
    2a1a:	002c      	movs	r4, r5
    2a1c:	e7f5      	b.n	2a0a <nwkRxDuplicateRejectionTimerHandler+0xe>
	if (restart) {
    2a1e:	2c00      	cmp	r4, #0
    2a20:	d100      	bne.n	2a24 <nwkRxDuplicateRejectionTimerHandler+0x28>
}
    2a22:	bd70      	pop	{r4, r5, r6, pc}
		SYS_TimerStart(timer);
    2a24:	4b02      	ldr	r3, [pc, #8]	; (2a30 <nwkRxDuplicateRejectionTimerHandler+0x34>)
    2a26:	4798      	blx	r3
}
    2a28:	e7fb      	b.n	2a22 <nwkRxDuplicateRejectionTimerHandler+0x26>
    2a2a:	46c0      	nop			; (mov r8, r8)
    2a2c:	20000708 	.word	0x20000708
    2a30:	00002d09 	.word	0x00002d09

00002a34 <nwkRxInit>:
{
    2a34:	b510      	push	{r4, lr}
    2a36:	4a0a      	ldr	r2, [pc, #40]	; (2a60 <nwkRxInit+0x2c>)
    2a38:	1d13      	adds	r3, r2, #4
    2a3a:	3240      	adds	r2, #64	; 0x40
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    2a3c:	2100      	movs	r1, #0
    2a3e:	7019      	strb	r1, [r3, #0]
    2a40:	3306      	adds	r3, #6
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2a42:	4293      	cmp	r3, r2
    2a44:	d1fb      	bne.n	2a3e <nwkRxInit+0xa>
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    2a46:	4b07      	ldr	r3, [pc, #28]	; (2a64 <nwkRxInit+0x30>)
    2a48:	2264      	movs	r2, #100	; 0x64
    2a4a:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2a4c:	2200      	movs	r2, #0
    2a4e:	731a      	strb	r2, [r3, #12]
		= nwkRxDuplicateRejectionTimerHandler;
    2a50:	4a05      	ldr	r2, [pc, #20]	; (2a68 <nwkRxInit+0x34>)
    2a52:	611a      	str	r2, [r3, #16]
	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    2a54:	4905      	ldr	r1, [pc, #20]	; (2a6c <nwkRxInit+0x38>)
    2a56:	2000      	movs	r0, #0
    2a58:	4b05      	ldr	r3, [pc, #20]	; (2a70 <nwkRxInit+0x3c>)
    2a5a:	4798      	blx	r3
}
    2a5c:	bd10      	pop	{r4, pc}
    2a5e:	46c0      	nop			; (mov r8, r8)
    2a60:	20000708 	.word	0x20000708
    2a64:	20000744 	.word	0x20000744
    2a68:	000029fd 	.word	0x000029fd
    2a6c:	000029c9 	.word	0x000029c9
    2a70:	000028a5 	.word	0x000028a5

00002a74 <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    2a74:	2300      	movs	r3, #0
    2a76:	4a02      	ldr	r2, [pc, #8]	; (2a80 <nwkSecurityInit+0xc>)
    2a78:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    2a7a:	4a02      	ldr	r2, [pc, #8]	; (2a84 <nwkSecurityInit+0x10>)
    2a7c:	6013      	str	r3, [r2, #0]
}
    2a7e:	4770      	bx	lr
    2a80:	2000075c 	.word	0x2000075c
    2a84:	20000758 	.word	0x20000758

00002a88 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    2a88:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a8a:	b083      	sub	sp, #12
    2a8c:	9001      	str	r0, [sp, #4]
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2a8e:	2400      	movs	r4, #0
	NwkFrame_t *frame = NULL;
    2a90:	2000      	movs	r0, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    2a92:	4d11      	ldr	r5, [pc, #68]	; (2ad8 <nwkTxDelayTimerHandler+0x50>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2a94:	2686      	movs	r6, #134	; 0x86
    2a96:	2787      	movs	r7, #135	; 0x87
	while (NULL != (frame = nwkFrameNext(frame))) {
    2a98:	47a8      	blx	r5
    2a9a:	2800      	cmp	r0, #0
    2a9c:	d013      	beq.n	2ac6 <nwkTxDelayTimerHandler+0x3e>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    2a9e:	7803      	ldrb	r3, [r0, #0]
    2aa0:	2b11      	cmp	r3, #17
    2aa2:	d1f9      	bne.n	2a98 <nwkTxDelayTimerHandler+0x10>
			if (0 == --frame->tx.timeout) {
    2aa4:	5d82      	ldrb	r2, [r0, r6]
    2aa6:	5dc3      	ldrb	r3, [r0, r7]
    2aa8:	021b      	lsls	r3, r3, #8
    2aaa:	4313      	orrs	r3, r2
    2aac:	3b01      	subs	r3, #1
    2aae:	b29b      	uxth	r3, r3
    2ab0:	5583      	strb	r3, [r0, r6]
    2ab2:	0a19      	lsrs	r1, r3, #8
    2ab4:	0002      	movs	r2, r0
    2ab6:	3286      	adds	r2, #134	; 0x86
    2ab8:	7051      	strb	r1, [r2, #1]
			restart = true;
    2aba:	2401      	movs	r4, #1
			if (0 == --frame->tx.timeout) {
    2abc:	2b00      	cmp	r3, #0
    2abe:	d1eb      	bne.n	2a98 <nwkTxDelayTimerHandler+0x10>
				frame->state = NWK_TX_STATE_SEND;
    2ac0:	3313      	adds	r3, #19
    2ac2:	7003      	strb	r3, [r0, #0]
    2ac4:	e7e8      	b.n	2a98 <nwkTxDelayTimerHandler+0x10>
			}
		}
	}

	if (restart) {
    2ac6:	2c00      	cmp	r4, #0
    2ac8:	d101      	bne.n	2ace <nwkTxDelayTimerHandler+0x46>
		SYS_TimerStart(timer);
	}
}
    2aca:	b003      	add	sp, #12
    2acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SYS_TimerStart(timer);
    2ace:	9801      	ldr	r0, [sp, #4]
    2ad0:	4b02      	ldr	r3, [pc, #8]	; (2adc <nwkTxDelayTimerHandler+0x54>)
    2ad2:	4798      	blx	r3
}
    2ad4:	e7f9      	b.n	2aca <nwkTxDelayTimerHandler+0x42>
    2ad6:	46c0      	nop			; (mov r8, r8)
    2ad8:	000028d5 	.word	0x000028d5
    2adc:	00002d09 	.word	0x00002d09

00002ae0 <nwkTxAckWaitTimerHandler>:
{
    2ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ae2:	b083      	sub	sp, #12
    2ae4:	9001      	str	r0, [sp, #4]
	bool restart = false;
    2ae6:	2400      	movs	r4, #0
	NwkFrame_t *frame = NULL;
    2ae8:	2000      	movs	r0, #0
	while (NULL != (frame = nwkFrameNext(frame))) {
    2aea:	4d12      	ldr	r5, [pc, #72]	; (2b34 <nwkTxAckWaitTimerHandler+0x54>)
			if (0 == --frame->tx.timeout) {
    2aec:	2686      	movs	r6, #134	; 0x86
    2aee:	2787      	movs	r7, #135	; 0x87
	while (NULL != (frame = nwkFrameNext(frame))) {
    2af0:	47a8      	blx	r5
    2af2:	2800      	cmp	r0, #0
    2af4:	d016      	beq.n	2b24 <nwkTxAckWaitTimerHandler+0x44>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    2af6:	7803      	ldrb	r3, [r0, #0]
    2af8:	2b16      	cmp	r3, #22
    2afa:	d1f9      	bne.n	2af0 <nwkTxAckWaitTimerHandler+0x10>
			if (0 == --frame->tx.timeout) {
    2afc:	5d82      	ldrb	r2, [r0, r6]
    2afe:	5dc3      	ldrb	r3, [r0, r7]
    2b00:	021b      	lsls	r3, r3, #8
    2b02:	4313      	orrs	r3, r2
    2b04:	3b01      	subs	r3, #1
    2b06:	b29b      	uxth	r3, r3
    2b08:	5583      	strb	r3, [r0, r6]
    2b0a:	0a19      	lsrs	r1, r3, #8
    2b0c:	0002      	movs	r2, r0
    2b0e:	3286      	adds	r2, #134	; 0x86
    2b10:	7051      	strb	r1, [r2, #1]
			restart = true;
    2b12:	2401      	movs	r4, #1
			if (0 == --frame->tx.timeout) {
    2b14:	2b00      	cmp	r3, #0
    2b16:	d1eb      	bne.n	2af0 <nwkTxAckWaitTimerHandler+0x10>
	frame->state = NWK_TX_STATE_CONFIRM;
    2b18:	3317      	adds	r3, #23
    2b1a:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    2b1c:	2210      	movs	r2, #16
    2b1e:	336e      	adds	r3, #110	; 0x6e
    2b20:	54c2      	strb	r2, [r0, r3]
    2b22:	e7e5      	b.n	2af0 <nwkTxAckWaitTimerHandler+0x10>
	if (restart) {
    2b24:	2c00      	cmp	r4, #0
    2b26:	d101      	bne.n	2b2c <nwkTxAckWaitTimerHandler+0x4c>
}
    2b28:	b003      	add	sp, #12
    2b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SYS_TimerStart(timer);
    2b2c:	9801      	ldr	r0, [sp, #4]
    2b2e:	4b02      	ldr	r3, [pc, #8]	; (2b38 <nwkTxAckWaitTimerHandler+0x58>)
    2b30:	4798      	blx	r3
}
    2b32:	e7f9      	b.n	2b28 <nwkTxAckWaitTimerHandler+0x48>
    2b34:	000028d5 	.word	0x000028d5
    2b38:	00002d09 	.word	0x00002d09

00002b3c <nwkTxInit>:
	nwkTxPhyActiveFrame = NULL;
    2b3c:	2200      	movs	r2, #0
    2b3e:	4b07      	ldr	r3, [pc, #28]	; (2b5c <nwkTxInit+0x20>)
    2b40:	601a      	str	r2, [r3, #0]
	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    2b42:	4b07      	ldr	r3, [pc, #28]	; (2b60 <nwkTxInit+0x24>)
    2b44:	2132      	movs	r1, #50	; 0x32
    2b46:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2b48:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    2b4a:	4906      	ldr	r1, [pc, #24]	; (2b64 <nwkTxInit+0x28>)
    2b4c:	6119      	str	r1, [r3, #16]
	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    2b4e:	4b06      	ldr	r3, [pc, #24]	; (2b68 <nwkTxInit+0x2c>)
    2b50:	210a      	movs	r1, #10
    2b52:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2b54:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    2b56:	4a05      	ldr	r2, [pc, #20]	; (2b6c <nwkTxInit+0x30>)
    2b58:	611a      	str	r2, [r3, #16]
}
    2b5a:	4770      	bx	lr
    2b5c:	20000788 	.word	0x20000788
    2b60:	20000760 	.word	0x20000760
    2b64:	00002ae1 	.word	0x00002ae1
    2b68:	20000774 	.word	0x20000774
    2b6c:	00002a89 	.word	0x00002a89

00002b70 <nwkTxAckReceived>:
{
    2b70:	b570      	push	{r4, r5, r6, lr}
	if (sizeof(NwkCommandAck_t) != ind->size) {
    2b72:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2b74:	2300      	movs	r3, #0
	if (sizeof(NwkCommandAck_t) != ind->size) {
    2b76:	2a03      	cmp	r2, #3
    2b78:	d001      	beq.n	2b7e <nwkTxAckReceived+0xe>
}
    2b7a:	0018      	movs	r0, r3
    2b7c:	bd70      	pop	{r4, r5, r6, pc}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    2b7e:	6885      	ldr	r5, [r0, #8]
    2b80:	2000      	movs	r0, #0
	while (NULL != (frame = nwkFrameNext(frame))) {
    2b82:	4c0a      	ldr	r4, [pc, #40]	; (2bac <nwkTxAckReceived+0x3c>)
    2b84:	47a0      	blx	r4
    2b86:	2800      	cmp	r0, #0
    2b88:	d00d      	beq.n	2ba6 <nwkTxAckReceived+0x36>
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    2b8a:	7803      	ldrb	r3, [r0, #0]
    2b8c:	2b16      	cmp	r3, #22
    2b8e:	d1f9      	bne.n	2b84 <nwkTxAckReceived+0x14>
    2b90:	7b02      	ldrb	r2, [r0, #12]
    2b92:	786b      	ldrb	r3, [r5, #1]
    2b94:	429a      	cmp	r2, r3
    2b96:	d1f5      	bne.n	2b84 <nwkTxAckReceived+0x14>
			frame->state = NWK_TX_STATE_CONFIRM;
    2b98:	2317      	movs	r3, #23
    2b9a:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    2b9c:	78aa      	ldrb	r2, [r5, #2]
    2b9e:	3371      	adds	r3, #113	; 0x71
    2ba0:	54c2      	strb	r2, [r0, r3]
			return true;
    2ba2:	3b87      	subs	r3, #135	; 0x87
    2ba4:	e7e9      	b.n	2b7a <nwkTxAckReceived+0xa>
	return false;
    2ba6:	2300      	movs	r3, #0
    2ba8:	e7e7      	b.n	2b7a <nwkTxAckReceived+0xa>
    2baa:	46c0      	nop			; (mov r8, r8)
    2bac:	000028d5 	.word	0x000028d5

00002bb0 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    2bb0:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    2bb2:	4b0e      	ldr	r3, [pc, #56]	; (2bec <PHY_Init+0x3c>)
    2bb4:	4798      	blx	r3
	PhyReset();
    2bb6:	4b0e      	ldr	r3, [pc, #56]	; (2bf0 <PHY_Init+0x40>)
    2bb8:	4798      	blx	r3
	phyRxState = false;
    2bba:	2200      	movs	r2, #0
    2bbc:	4b0d      	ldr	r3, [pc, #52]	; (2bf4 <PHY_Init+0x44>)
    2bbe:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    2bc0:	3201      	adds	r2, #1
    2bc2:	4b0d      	ldr	r3, [pc, #52]	; (2bf8 <PHY_Init+0x48>)
    2bc4:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2bc6:	4e0d      	ldr	r6, [pc, #52]	; (2bfc <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2bc8:	4d0d      	ldr	r5, [pc, #52]	; (2c00 <PHY_Init+0x50>)
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2bca:	241f      	movs	r4, #31
	trx_reg_write(reg, value);
    2bcc:	2108      	movs	r1, #8
    2bce:	2002      	movs	r0, #2
    2bd0:	47b0      	blx	r6
	value = trx_reg_read(reg);
    2bd2:	2001      	movs	r0, #1
    2bd4:	47a8      	blx	r5
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2bd6:	4020      	ands	r0, r4
    2bd8:	2808      	cmp	r0, #8
    2bda:	d1f7      	bne.n	2bcc <PHY_Init+0x1c>
	trx_reg_write(reg, value);
    2bdc:	212e      	movs	r1, #46	; 0x2e
    2bde:	3804      	subs	r0, #4
    2be0:	4c06      	ldr	r4, [pc, #24]	; (2bfc <PHY_Init+0x4c>)
    2be2:	47a0      	blx	r4
    2be4:	21a0      	movs	r1, #160	; 0xa0
    2be6:	200c      	movs	r0, #12
    2be8:	47a0      	blx	r4
}
    2bea:	bd70      	pop	{r4, r5, r6, pc}
    2bec:	00002ed1 	.word	0x00002ed1
    2bf0:	00002fed 	.word	0x00002fed
    2bf4:	2000078c 	.word	0x2000078c
    2bf8:	2000078d 	.word	0x2000078d
    2bfc:	00003119 	.word	0x00003119
    2c00:	0000301d 	.word	0x0000301d

00002c04 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    2c04:	b510      	push	{r4, lr}
	SYS_TimerInit();
    2c06:	4b04      	ldr	r3, [pc, #16]	; (2c18 <SYS_Init+0x14>)
    2c08:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    2c0a:	4b04      	ldr	r3, [pc, #16]	; (2c1c <SYS_Init+0x18>)
    2c0c:	4798      	blx	r3
#endif
	PHY_Init();
    2c0e:	4b04      	ldr	r3, [pc, #16]	; (2c20 <SYS_Init+0x1c>)
    2c10:	4798      	blx	r3
	NWK_Init();
    2c12:	4b04      	ldr	r3, [pc, #16]	; (2c24 <SYS_Init+0x20>)
    2c14:	4798      	blx	r3
}
    2c16:	bd10      	pop	{r4, pc}
    2c18:	00002ca1 	.word	0x00002ca1
    2c1c:	00002eb1 	.word	0x00002eb1
    2c20:	00002bb1 	.word	0x00002bb1
    2c24:	00002851 	.word	0x00002851

00002c28 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    2c28:	b530      	push	{r4, r5, lr}
	if (timers) {
    2c2a:	4b14      	ldr	r3, [pc, #80]	; (2c7c <placeTimer+0x54>)
    2c2c:	681d      	ldr	r5, [r3, #0]
    2c2e:	2d00      	cmp	r5, #0
    2c30:	d01c      	beq.n	2c6c <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    2c32:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    2c34:	6869      	ldr	r1, [r5, #4]
    2c36:	428a      	cmp	r2, r1
    2c38:	d309      	bcc.n	2c4e <placeTimer+0x26>
    2c3a:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    2c3c:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2c3e:	6823      	ldr	r3, [r4, #0]
    2c40:	2b00      	cmp	r3, #0
    2c42:	d008      	beq.n	2c56 <placeTimer+0x2e>
			if (timeout < t->timeout) {
    2c44:	6859      	ldr	r1, [r3, #4]
    2c46:	4291      	cmp	r1, r2
    2c48:	d803      	bhi.n	2c52 <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2c4a:	001c      	movs	r4, r3
    2c4c:	e7f6      	b.n	2c3c <placeTimer+0x14>
    2c4e:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    2c50:	2400      	movs	r4, #0
				t->timeout -= timeout;
    2c52:	1a89      	subs	r1, r1, r2
    2c54:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    2c56:	6042      	str	r2, [r0, #4]

		if (prev) {
    2c58:	2c00      	cmp	r4, #0
    2c5a:	d003      	beq.n	2c64 <placeTimer+0x3c>
			timer->next = prev->next;
    2c5c:	6823      	ldr	r3, [r4, #0]
    2c5e:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    2c60:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    2c62:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    2c64:	6005      	str	r5, [r0, #0]
			timers = timer;
    2c66:	4b05      	ldr	r3, [pc, #20]	; (2c7c <placeTimer+0x54>)
    2c68:	6018      	str	r0, [r3, #0]
    2c6a:	e7fa      	b.n	2c62 <placeTimer+0x3a>
		timer->next = NULL;
    2c6c:	2300      	movs	r3, #0
    2c6e:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    2c70:	6883      	ldr	r3, [r0, #8]
    2c72:	6043      	str	r3, [r0, #4]
		timers = timer;
    2c74:	4b01      	ldr	r3, [pc, #4]	; (2c7c <placeTimer+0x54>)
    2c76:	6018      	str	r0, [r3, #0]
}
    2c78:	e7f3      	b.n	2c62 <placeTimer+0x3a>
    2c7a:	46c0      	nop			; (mov r8, r8)
    2c7c:	20000790 	.word	0x20000790

00002c80 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    2c80:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    2c82:	4a04      	ldr	r2, [pc, #16]	; (2c94 <SYS_HwExpiry_Cb+0x14>)
    2c84:	7813      	ldrb	r3, [r2, #0]
    2c86:	3301      	adds	r3, #1
    2c88:	b2db      	uxtb	r3, r3
    2c8a:	7013      	strb	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2c8c:	4802      	ldr	r0, [pc, #8]	; (2c98 <SYS_HwExpiry_Cb+0x18>)
    2c8e:	4b03      	ldr	r3, [pc, #12]	; (2c9c <SYS_HwExpiry_Cb+0x1c>)
    2c90:	4798      	blx	r3
}
    2c92:	bd10      	pop	{r4, pc}
    2c94:	20000974 	.word	0x20000974
    2c98:	00002710 	.word	0x00002710
    2c9c:	000032d5 	.word	0x000032d5

00002ca0 <SYS_TimerInit>:
{
    2ca0:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    2ca2:	2400      	movs	r4, #0
    2ca4:	4b06      	ldr	r3, [pc, #24]	; (2cc0 <SYS_TimerInit+0x20>)
    2ca6:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    2ca8:	4806      	ldr	r0, [pc, #24]	; (2cc4 <SYS_TimerInit+0x24>)
    2caa:	4b07      	ldr	r3, [pc, #28]	; (2cc8 <SYS_TimerInit+0x28>)
    2cac:	4798      	blx	r3
	common_tc_init();
    2cae:	4b07      	ldr	r3, [pc, #28]	; (2ccc <SYS_TimerInit+0x2c>)
    2cb0:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2cb2:	4807      	ldr	r0, [pc, #28]	; (2cd0 <SYS_TimerInit+0x30>)
    2cb4:	4b07      	ldr	r3, [pc, #28]	; (2cd4 <SYS_TimerInit+0x34>)
    2cb6:	4798      	blx	r3
	timers = NULL;
    2cb8:	4b07      	ldr	r3, [pc, #28]	; (2cd8 <SYS_TimerInit+0x38>)
    2cba:	601c      	str	r4, [r3, #0]
}
    2cbc:	bd10      	pop	{r4, pc}
    2cbe:	46c0      	nop			; (mov r8, r8)
    2cc0:	20000974 	.word	0x20000974
    2cc4:	00002c81 	.word	0x00002c81
    2cc8:	000033c5 	.word	0x000033c5
    2ccc:	00003341 	.word	0x00003341
    2cd0:	00002710 	.word	0x00002710
    2cd4:	000032d5 	.word	0x000032d5
    2cd8:	20000790 	.word	0x20000790

00002cdc <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2cdc:	4b09      	ldr	r3, [pc, #36]	; (2d04 <SYS_TimerStarted+0x28>)
    2cde:	681b      	ldr	r3, [r3, #0]
    2ce0:	2b00      	cmp	r3, #0
    2ce2:	d00a      	beq.n	2cfa <SYS_TimerStarted+0x1e>
		if (t == timer) {
    2ce4:	4283      	cmp	r3, r0
    2ce6:	d00a      	beq.n	2cfe <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2ce8:	681b      	ldr	r3, [r3, #0]
    2cea:	2b00      	cmp	r3, #0
    2cec:	d003      	beq.n	2cf6 <SYS_TimerStarted+0x1a>
		if (t == timer) {
    2cee:	4298      	cmp	r0, r3
    2cf0:	d1fa      	bne.n	2ce8 <SYS_TimerStarted+0xc>
			return true;
    2cf2:	2001      	movs	r0, #1
    2cf4:	e000      	b.n	2cf8 <SYS_TimerStarted+0x1c>
	return false;
    2cf6:	2000      	movs	r0, #0
}
    2cf8:	4770      	bx	lr
	return false;
    2cfa:	2000      	movs	r0, #0
    2cfc:	e7fc      	b.n	2cf8 <SYS_TimerStarted+0x1c>
			return true;
    2cfe:	2001      	movs	r0, #1
    2d00:	e7fa      	b.n	2cf8 <SYS_TimerStarted+0x1c>
    2d02:	46c0      	nop			; (mov r8, r8)
    2d04:	20000790 	.word	0x20000790

00002d08 <SYS_TimerStart>:
{
    2d08:	b510      	push	{r4, lr}
    2d0a:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    2d0c:	4b04      	ldr	r3, [pc, #16]	; (2d20 <SYS_TimerStart+0x18>)
    2d0e:	4798      	blx	r3
    2d10:	2800      	cmp	r0, #0
    2d12:	d000      	beq.n	2d16 <SYS_TimerStart+0xe>
}
    2d14:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    2d16:	0020      	movs	r0, r4
    2d18:	4b02      	ldr	r3, [pc, #8]	; (2d24 <SYS_TimerStart+0x1c>)
    2d1a:	4798      	blx	r3
}
    2d1c:	e7fa      	b.n	2d14 <SYS_TimerStart+0xc>
    2d1e:	46c0      	nop			; (mov r8, r8)
    2d20:	00002cdd 	.word	0x00002cdd
    2d24:	00002c29 	.word	0x00002c29

00002d28 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    2d28:	b510      	push	{r4, lr}
	tmr_cca_callback();
    2d2a:	4b01      	ldr	r3, [pc, #4]	; (2d30 <tc_cca_callback+0x8>)
    2d2c:	4798      	blx	r3
}
    2d2e:	bd10      	pop	{r4, pc}
    2d30:	000033a9 	.word	0x000033a9

00002d34 <tc_ovf_callback>:
{
    2d34:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    2d36:	4b01      	ldr	r3, [pc, #4]	; (2d3c <tc_ovf_callback+0x8>)
    2d38:	4798      	blx	r3
}
    2d3a:	bd10      	pop	{r4, pc}
    2d3c:	00003361 	.word	0x00003361

00002d40 <tmr_read_count>:
{
    2d40:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    2d42:	4802      	ldr	r0, [pc, #8]	; (2d4c <tmr_read_count+0xc>)
    2d44:	4b02      	ldr	r3, [pc, #8]	; (2d50 <tmr_read_count+0x10>)
    2d46:	4798      	blx	r3
    2d48:	b280      	uxth	r0, r0
}
    2d4a:	bd10      	pop	{r4, pc}
    2d4c:	200009ac 	.word	0x200009ac
    2d50:	0000261d 	.word	0x0000261d

00002d54 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    2d54:	4b03      	ldr	r3, [pc, #12]	; (2d64 <tmr_disable_cc_interrupt+0x10>)
    2d56:	2110      	movs	r1, #16
    2d58:	681a      	ldr	r2, [r3, #0]
    2d5a:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    2d5c:	7e5a      	ldrb	r2, [r3, #25]
    2d5e:	438a      	bics	r2, r1
    2d60:	765a      	strb	r2, [r3, #25]
}
    2d62:	4770      	bx	lr
    2d64:	200009ac 	.word	0x200009ac

00002d68 <tmr_enable_cc_interrupt>:
{
    2d68:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2d6a:	4c0a      	ldr	r4, [pc, #40]	; (2d94 <tmr_enable_cc_interrupt+0x2c>)
    2d6c:	6820      	ldr	r0, [r4, #0]
    2d6e:	4b0a      	ldr	r3, [pc, #40]	; (2d98 <tmr_enable_cc_interrupt+0x30>)
    2d70:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2d72:	4b0a      	ldr	r3, [pc, #40]	; (2d9c <tmr_enable_cc_interrupt+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2d74:	5c1b      	ldrb	r3, [r3, r0]
    2d76:	221f      	movs	r2, #31
    2d78:	401a      	ands	r2, r3
    2d7a:	2301      	movs	r3, #1
    2d7c:	4093      	lsls	r3, r2
    2d7e:	4a08      	ldr	r2, [pc, #32]	; (2da0 <tmr_enable_cc_interrupt+0x38>)
    2d80:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2d82:	7e63      	ldrb	r3, [r4, #25]
    2d84:	2210      	movs	r2, #16
    2d86:	4313      	orrs	r3, r2
    2d88:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2d8a:	6823      	ldr	r3, [r4, #0]
    2d8c:	2210      	movs	r2, #16
    2d8e:	735a      	strb	r2, [r3, #13]
}
    2d90:	bd10      	pop	{r4, pc}
    2d92:	46c0      	nop			; (mov r8, r8)
    2d94:	200009ac 	.word	0x200009ac
    2d98:	000023a9 	.word	0x000023a9
    2d9c:	00008a18 	.word	0x00008a18
    2da0:	e000e100 	.word	0xe000e100

00002da4 <tmr_write_cmpreg>:
{
    2da4:	b510      	push	{r4, lr}
    2da6:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    2da8:	2100      	movs	r1, #0
    2daa:	4802      	ldr	r0, [pc, #8]	; (2db4 <tmr_write_cmpreg+0x10>)
    2dac:	4b02      	ldr	r3, [pc, #8]	; (2db8 <tmr_write_cmpreg+0x14>)
    2dae:	4798      	blx	r3
}
    2db0:	bd10      	pop	{r4, pc}
    2db2:	46c0      	nop			; (mov r8, r8)
    2db4:	200009ac 	.word	0x200009ac
    2db8:	00002649 	.word	0x00002649

00002dbc <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    2dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2dbe:	46ce      	mov	lr, r9
    2dc0:	4647      	mov	r7, r8
    2dc2:	b580      	push	{r7, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    2dc4:	4a2d      	ldr	r2, [pc, #180]	; (2e7c <tmr_init+0xc0>)
    2dc6:	2300      	movs	r3, #0
    2dc8:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    2dca:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    2dcc:	2100      	movs	r1, #0
    2dce:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    2dd0:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2dd2:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2dd4:	7051      	strb	r1, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2dd6:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2dd8:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2dda:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2ddc:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    2dde:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2de0:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2de2:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2de4:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2de6:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2de8:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2dea:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    2dec:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2dee:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    2df0:	3b01      	subs	r3, #1
    2df2:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    2df4:	4c22      	ldr	r4, [pc, #136]	; (2e80 <tmr_init+0xc4>)
    2df6:	4923      	ldr	r1, [pc, #140]	; (2e84 <tmr_init+0xc8>)
    2df8:	0020      	movs	r0, r4
    2dfa:	4b23      	ldr	r3, [pc, #140]	; (2e88 <tmr_init+0xcc>)
    2dfc:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    2dfe:	2200      	movs	r2, #0
    2e00:	4922      	ldr	r1, [pc, #136]	; (2e8c <tmr_init+0xd0>)
    2e02:	0020      	movs	r0, r4
    2e04:	4d22      	ldr	r5, [pc, #136]	; (2e90 <tmr_init+0xd4>)
    2e06:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    2e08:	2202      	movs	r2, #2
    2e0a:	4922      	ldr	r1, [pc, #136]	; (2e94 <tmr_init+0xd8>)
    2e0c:	0020      	movs	r0, r4
    2e0e:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2e10:	6820      	ldr	r0, [r4, #0]
    2e12:	4b21      	ldr	r3, [pc, #132]	; (2e98 <tmr_init+0xdc>)
    2e14:	4699      	mov	r9, r3
    2e16:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2e18:	4b20      	ldr	r3, [pc, #128]	; (2e9c <tmr_init+0xe0>)
    2e1a:	4698      	mov	r8, r3
    2e1c:	5c1b      	ldrb	r3, [r3, r0]
    2e1e:	261f      	movs	r6, #31
    2e20:	4033      	ands	r3, r6
    2e22:	2501      	movs	r5, #1
    2e24:	002a      	movs	r2, r5
    2e26:	409a      	lsls	r2, r3
    2e28:	4f1d      	ldr	r7, [pc, #116]	; (2ea0 <tmr_init+0xe4>)
    2e2a:	603a      	str	r2, [r7, #0]
		module->enable_callback_mask |= (1 << callback_type);
    2e2c:	7e63      	ldrb	r3, [r4, #25]
    2e2e:	2201      	movs	r2, #1
    2e30:	4313      	orrs	r3, r2
    2e32:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    2e34:	6823      	ldr	r3, [r4, #0]
    2e36:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2e38:	0018      	movs	r0, r3
    2e3a:	47c8      	blx	r9
    2e3c:	4643      	mov	r3, r8
    2e3e:	5c1b      	ldrb	r3, [r3, r0]
    2e40:	401e      	ands	r6, r3
    2e42:	40b5      	lsls	r5, r6
    2e44:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2e46:	7e63      	ldrb	r3, [r4, #25]
    2e48:	2210      	movs	r2, #16
    2e4a:	4313      	orrs	r3, r2
    2e4c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2e4e:	6822      	ldr	r2, [r4, #0]
    2e50:	2310      	movs	r3, #16
    2e52:	7353      	strb	r3, [r2, #13]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2e54:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2e56:	b25b      	sxtb	r3, r3
    2e58:	2b00      	cmp	r3, #0
    2e5a:	dbfb      	blt.n	2e54 <tmr_init+0x98>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2e5c:	8813      	ldrh	r3, [r2, #0]
    2e5e:	2102      	movs	r1, #2
    2e60:	430b      	orrs	r3, r1
    2e62:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    2e64:	2000      	movs	r0, #0
    2e66:	4b0f      	ldr	r3, [pc, #60]	; (2ea4 <tmr_init+0xe8>)
    2e68:	4798      	blx	r3
    2e6a:	490f      	ldr	r1, [pc, #60]	; (2ea8 <tmr_init+0xec>)
    2e6c:	4b0f      	ldr	r3, [pc, #60]	; (2eac <tmr_init+0xf0>)
    2e6e:	4798      	blx	r3
	#endif
	return timer_multiplier;
    2e70:	b2c0      	uxtb	r0, r0
}
    2e72:	bc0c      	pop	{r2, r3}
    2e74:	4690      	mov	r8, r2
    2e76:	4699      	mov	r9, r3
    2e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e7a:	46c0      	nop			; (mov r8, r8)
    2e7c:	20000978 	.word	0x20000978
    2e80:	200009ac 	.word	0x200009ac
    2e84:	42002c00 	.word	0x42002c00
    2e88:	000023e1 	.word	0x000023e1
    2e8c:	00002d35 	.word	0x00002d35
    2e90:	000022e1 	.word	0x000022e1
    2e94:	00002d29 	.word	0x00002d29
    2e98:	000023a9 	.word	0x000023a9
    2e9c:	00008a18 	.word	0x00008a18
    2ea0:	e000e100 	.word	0xe000e100
    2ea4:	00002071 	.word	0x00002071
    2ea8:	000f4240 	.word	0x000f4240
    2eac:	00005de9 	.word	0x00005de9

00002eb0 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    2eb0:	4770      	bx	lr
	...

00002eb4 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    2eb4:	b510      	push	{r4, lr}
	eic_module->INTFLAG.reg = eic_mask;
    2eb6:	2201      	movs	r2, #1
    2eb8:	4b03      	ldr	r3, [pc, #12]	; (2ec8 <AT86RFX_ISR+0x14>)
    2eba:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    2ebc:	4b03      	ldr	r3, [pc, #12]	; (2ecc <AT86RFX_ISR+0x18>)
    2ebe:	681b      	ldr	r3, [r3, #0]
    2ec0:	2b00      	cmp	r3, #0
    2ec2:	d000      	beq.n	2ec6 <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    2ec4:	4798      	blx	r3
	}
}
    2ec6:	bd10      	pop	{r4, pc}
    2ec8:	40001800 	.word	0x40001800
    2ecc:	20000794 	.word	0x20000794

00002ed0 <trx_spi_init>:

void trx_spi_init(void)
{
    2ed0:	b530      	push	{r4, r5, lr}
    2ed2:	b085      	sub	sp, #20
	config->address_enabled = false;
    2ed4:	4a34      	ldr	r2, [pc, #208]	; (2fa8 <trx_spi_init+0xd8>)
    2ed6:	2300      	movs	r3, #0
    2ed8:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    2eda:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    2edc:	213f      	movs	r1, #63	; 0x3f
    2ede:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    2ee0:	4c32      	ldr	r4, [pc, #200]	; (2fac <trx_spi_init+0xdc>)
    2ee2:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    2ee4:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    2ee6:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    2ee8:	2201      	movs	r2, #1
    2eea:	4669      	mov	r1, sp
    2eec:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    2eee:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2ef0:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2ef2:	203f      	movs	r0, #63	; 0x3f
    2ef4:	4b2e      	ldr	r3, [pc, #184]	; (2fb0 <trx_spi_init+0xe0>)
    2ef6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2ef8:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    2efa:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2efc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2efe:	2900      	cmp	r1, #0
    2f00:	d104      	bne.n	2f0c <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    2f02:	0953      	lsrs	r3, r2, #5
    2f04:	01db      	lsls	r3, r3, #7
    2f06:	492b      	ldr	r1, [pc, #172]	; (2fb4 <trx_spi_init+0xe4>)
    2f08:	468c      	mov	ip, r1
    2f0a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2f0c:	211f      	movs	r1, #31
    2f0e:	4011      	ands	r1, r2
    2f10:	2201      	movs	r2, #1
    2f12:	0010      	movs	r0, r2
    2f14:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    2f16:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    2f18:	4c27      	ldr	r4, [pc, #156]	; (2fb8 <trx_spi_init+0xe8>)
    2f1a:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2f1c:	2300      	movs	r3, #0
    2f1e:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2f20:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2f22:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    2f24:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    2f26:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    2f28:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    2f2a:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    2f2c:	3223      	adds	r2, #35	; 0x23
    2f2e:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2f30:	0020      	movs	r0, r4
    2f32:	3018      	adds	r0, #24
    2f34:	3a18      	subs	r2, #24
    2f36:	2100      	movs	r1, #0
    2f38:	4b20      	ldr	r3, [pc, #128]	; (2fbc <trx_spi_init+0xec>)
    2f3a:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    2f3c:	2380      	movs	r3, #128	; 0x80
    2f3e:	025b      	lsls	r3, r3, #9
    2f40:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    2f42:	4b1f      	ldr	r3, [pc, #124]	; (2fc0 <trx_spi_init+0xf0>)
    2f44:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    2f46:	4b1f      	ldr	r3, [pc, #124]	; (2fc4 <trx_spi_init+0xf4>)
    2f48:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    2f4a:	2301      	movs	r3, #1
    2f4c:	425b      	negs	r3, r3
    2f4e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    2f50:	4b1d      	ldr	r3, [pc, #116]	; (2fc8 <trx_spi_init+0xf8>)
    2f52:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    2f54:	4b1d      	ldr	r3, [pc, #116]	; (2fcc <trx_spi_init+0xfc>)
    2f56:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    2f58:	4d1d      	ldr	r5, [pc, #116]	; (2fd0 <trx_spi_init+0x100>)
    2f5a:	0022      	movs	r2, r4
    2f5c:	491d      	ldr	r1, [pc, #116]	; (2fd4 <trx_spi_init+0x104>)
    2f5e:	0028      	movs	r0, r5
    2f60:	4b1d      	ldr	r3, [pc, #116]	; (2fd8 <trx_spi_init+0x108>)
    2f62:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    2f64:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2f66:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2f68:	2b00      	cmp	r3, #0
    2f6a:	d1fc      	bne.n	2f66 <trx_spi_init+0x96>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2f6c:	6813      	ldr	r3, [r2, #0]
    2f6e:	2502      	movs	r5, #2
    2f70:	432b      	orrs	r3, r5
    2f72:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    2f74:	ac01      	add	r4, sp, #4
    2f76:	0020      	movs	r0, r4
    2f78:	4b18      	ldr	r3, [pc, #96]	; (2fdc <trx_spi_init+0x10c>)
    2f7a:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    2f7c:	2320      	movs	r3, #32
    2f7e:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    2f80:	2380      	movs	r3, #128	; 0x80
    2f82:	039b      	lsls	r3, r3, #14
    2f84:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    2f86:	7225      	strb	r5, [r4, #8]
	#if (SAML21)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    2f88:	2301      	movs	r3, #1
    2f8a:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    2f8c:	2200      	movs	r2, #0
    2f8e:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    2f90:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    2f92:	0021      	movs	r1, r4
    2f94:	2000      	movs	r0, #0
    2f96:	4b12      	ldr	r3, [pc, #72]	; (2fe0 <trx_spi_init+0x110>)
    2f98:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    2f9a:	2200      	movs	r2, #0
    2f9c:	2100      	movs	r1, #0
    2f9e:	4811      	ldr	r0, [pc, #68]	; (2fe4 <trx_spi_init+0x114>)
    2fa0:	4b11      	ldr	r3, [pc, #68]	; (2fe8 <trx_spi_init+0x118>)
    2fa2:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    2fa4:	b005      	add	sp, #20
    2fa6:	bd30      	pop	{r4, r5, pc}
    2fa8:	200009cc 	.word	0x200009cc
    2fac:	200009d0 	.word	0x200009d0
    2fb0:	00000b41 	.word	0x00000b41
    2fb4:	41004400 	.word	0x41004400
    2fb8:	200009d4 	.word	0x200009d4
    2fbc:	0000342b 	.word	0x0000342b
    2fc0:	004c4b40 	.word	0x004c4b40
    2fc4:	00530005 	.word	0x00530005
    2fc8:	003e0005 	.word	0x003e0005
    2fcc:	00520005 	.word	0x00520005
    2fd0:	20000a0c 	.word	0x20000a0c
    2fd4:	42001800 	.word	0x42001800
    2fd8:	00001029 	.word	0x00001029
    2fdc:	00000ab5 	.word	0x00000ab5
    2fe0:	00000ac9 	.word	0x00000ac9
    2fe4:	00002eb5 	.word	0x00002eb5
    2fe8:	000009b1 	.word	0x000009b1

00002fec <PhyReset>:

void PhyReset(void)
{
    2fec:	b570      	push	{r4, r5, r6, lr}
    2fee:	4c08      	ldr	r4, [pc, #32]	; (3010 <PhyReset+0x24>)
    2ff0:	2580      	movs	r5, #128	; 0x80
    2ff2:	022d      	lsls	r5, r5, #8
    2ff4:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    2ff6:	2280      	movs	r2, #128	; 0x80
    2ff8:	0352      	lsls	r2, r2, #13
    2ffa:	4b06      	ldr	r3, [pc, #24]	; (3014 <PhyReset+0x28>)
    2ffc:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    2ffe:	20a5      	movs	r0, #165	; 0xa5
    3000:	0040      	lsls	r0, r0, #1
    3002:	4e05      	ldr	r6, [pc, #20]	; (3018 <PhyReset+0x2c>)
    3004:	47b0      	blx	r6
    3006:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    3008:	200a      	movs	r0, #10
    300a:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    300c:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    300e:	bd70      	pop	{r4, r5, r6, pc}
    3010:	41004480 	.word	0x41004480
    3014:	41004400 	.word	0x41004400
    3018:	00000841 	.word	0x00000841

0000301c <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    301c:	b570      	push	{r4, r5, r6, lr}
    301e:	b082      	sub	sp, #8
    3020:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3022:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3026:	425a      	negs	r2, r3
    3028:	4153      	adcs	r3, r2
    302a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    302c:	b672      	cpsid	i
    302e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3032:	2200      	movs	r2, #0
    3034:	4b33      	ldr	r3, [pc, #204]	; (3104 <trx_reg_read+0xe8>)
    3036:	701a      	strb	r2, [r3, #0]
	return flags;
    3038:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    303a:	4e33      	ldr	r6, [pc, #204]	; (3108 <trx_reg_read+0xec>)
    303c:	3201      	adds	r2, #1
    303e:	4933      	ldr	r1, [pc, #204]	; (310c <trx_reg_read+0xf0>)
    3040:	0030      	movs	r0, r6
    3042:	4b33      	ldr	r3, [pc, #204]	; (3110 <trx_reg_read+0xf4>)
    3044:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3046:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3048:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    304a:	7e1a      	ldrb	r2, [r3, #24]
    304c:	420a      	tst	r2, r1
    304e:	d0fc      	beq.n	304a <trx_reg_read+0x2e>
    3050:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3052:	07d2      	lsls	r2, r2, #31
    3054:	d502      	bpl.n	305c <trx_reg_read+0x40>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3056:	2280      	movs	r2, #128	; 0x80
    3058:	4315      	orrs	r5, r2
    305a:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    305c:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    305e:	7e1a      	ldrb	r2, [r3, #24]
    3060:	420a      	tst	r2, r1
    3062:	d0fc      	beq.n	305e <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3064:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3066:	7e1a      	ldrb	r2, [r3, #24]
    3068:	420a      	tst	r2, r1
    306a:	d0fc      	beq.n	3066 <trx_reg_read+0x4a>
    306c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    306e:	0752      	lsls	r2, r2, #29
    3070:	d50c      	bpl.n	308c <trx_reg_read+0x70>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3072:	8b5a      	ldrh	r2, [r3, #26]
    3074:	0752      	lsls	r2, r2, #29
    3076:	d501      	bpl.n	307c <trx_reg_read+0x60>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3078:	2204      	movs	r2, #4
    307a:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    307c:	4a22      	ldr	r2, [pc, #136]	; (3108 <trx_reg_read+0xec>)
    307e:	7992      	ldrb	r2, [r2, #6]
    3080:	2a01      	cmp	r2, #1
    3082:	d034      	beq.n	30ee <trx_reg_read+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3086:	b2d2      	uxtb	r2, r2
    3088:	4922      	ldr	r1, [pc, #136]	; (3114 <trx_reg_read+0xf8>)
    308a:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    308c:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    308e:	7e1a      	ldrb	r2, [r3, #24]
    3090:	420a      	tst	r2, r1
    3092:	d0fc      	beq.n	308e <trx_reg_read+0x72>
    3094:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3096:	07d2      	lsls	r2, r2, #31
    3098:	d501      	bpl.n	309e <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    309a:	2200      	movs	r2, #0
    309c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    309e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    30a0:	7e1a      	ldrb	r2, [r3, #24]
    30a2:	420a      	tst	r2, r1
    30a4:	d0fc      	beq.n	30a0 <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    30a6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    30a8:	7e1a      	ldrb	r2, [r3, #24]
    30aa:	420a      	tst	r2, r1
    30ac:	d0fc      	beq.n	30a8 <trx_reg_read+0x8c>
    30ae:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    30b0:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    30b2:	0752      	lsls	r2, r2, #29
    30b4:	d50a      	bpl.n	30cc <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    30b6:	8b5a      	ldrh	r2, [r3, #26]
    30b8:	0752      	lsls	r2, r2, #29
    30ba:	d501      	bpl.n	30c0 <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    30bc:	2204      	movs	r2, #4
    30be:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    30c0:	4a11      	ldr	r2, [pc, #68]	; (3108 <trx_reg_read+0xec>)
    30c2:	7992      	ldrb	r2, [r2, #6]
    30c4:	2a01      	cmp	r2, #1
    30c6:	d018      	beq.n	30fa <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    30c8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    30ca:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    30cc:	2200      	movs	r2, #0
    30ce:	490f      	ldr	r1, [pc, #60]	; (310c <trx_reg_read+0xf0>)
    30d0:	480d      	ldr	r0, [pc, #52]	; (3108 <trx_reg_read+0xec>)
    30d2:	4b0f      	ldr	r3, [pc, #60]	; (3110 <trx_reg_read+0xf4>)
    30d4:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    30d6:	23ff      	movs	r3, #255	; 0xff
    30d8:	4223      	tst	r3, r4
    30da:	d005      	beq.n	30e8 <trx_reg_read+0xcc>
		cpu_irq_enable();
    30dc:	2201      	movs	r2, #1
    30de:	4b09      	ldr	r3, [pc, #36]	; (3104 <trx_reg_read+0xe8>)
    30e0:	701a      	strb	r2, [r3, #0]
    30e2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    30e6:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    30e8:	b2e8      	uxtb	r0, r5
}
    30ea:	b002      	add	sp, #8
    30ec:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    30ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    30f0:	05d2      	lsls	r2, r2, #23
    30f2:	0dd2      	lsrs	r2, r2, #23
    30f4:	4907      	ldr	r1, [pc, #28]	; (3114 <trx_reg_read+0xf8>)
    30f6:	800a      	strh	r2, [r1, #0]
    30f8:	e7c8      	b.n	308c <trx_reg_read+0x70>
    30fa:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    30fc:	05ed      	lsls	r5, r5, #23
    30fe:	0ded      	lsrs	r5, r5, #23
    3100:	e7e4      	b.n	30cc <trx_reg_read+0xb0>
    3102:	46c0      	nop			; (mov r8, r8)
    3104:	20000008 	.word	0x20000008
    3108:	20000a0c 	.word	0x20000a0c
    310c:	200009d0 	.word	0x200009d0
    3110:	000012ed 	.word	0x000012ed
    3114:	200009c8 	.word	0x200009c8

00003118 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    3118:	b5f0      	push	{r4, r5, r6, r7, lr}
    311a:	b083      	sub	sp, #12
    311c:	0006      	movs	r6, r0
    311e:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3120:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3124:	425a      	negs	r2, r3
    3126:	4153      	adcs	r3, r2
    3128:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    312a:	b672      	cpsid	i
    312c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3130:	2200      	movs	r2, #0
    3132:	4b34      	ldr	r3, [pc, #208]	; (3204 <trx_reg_write+0xec>)
    3134:	701a      	strb	r2, [r3, #0]
	return flags;
    3136:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3138:	4f33      	ldr	r7, [pc, #204]	; (3208 <trx_reg_write+0xf0>)
    313a:	3201      	adds	r2, #1
    313c:	4933      	ldr	r1, [pc, #204]	; (320c <trx_reg_write+0xf4>)
    313e:	0038      	movs	r0, r7
    3140:	4b33      	ldr	r3, [pc, #204]	; (3210 <trx_reg_write+0xf8>)
    3142:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3144:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3146:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3148:	7e1a      	ldrb	r2, [r3, #24]
    314a:	420a      	tst	r2, r1
    314c:	d0fc      	beq.n	3148 <trx_reg_write+0x30>
    314e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3150:	07d2      	lsls	r2, r2, #31
    3152:	d502      	bpl.n	315a <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3154:	22c0      	movs	r2, #192	; 0xc0
    3156:	4316      	orrs	r6, r2
    3158:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    315a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    315c:	7e1a      	ldrb	r2, [r3, #24]
    315e:	420a      	tst	r2, r1
    3160:	d0fc      	beq.n	315c <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3162:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3164:	7e1a      	ldrb	r2, [r3, #24]
    3166:	420a      	tst	r2, r1
    3168:	d0fc      	beq.n	3164 <trx_reg_write+0x4c>
    316a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    316c:	0752      	lsls	r2, r2, #29
    316e:	d50c      	bpl.n	318a <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3170:	8b5a      	ldrh	r2, [r3, #26]
    3172:	0752      	lsls	r2, r2, #29
    3174:	d501      	bpl.n	317a <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3176:	2204      	movs	r2, #4
    3178:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    317a:	4a23      	ldr	r2, [pc, #140]	; (3208 <trx_reg_write+0xf0>)
    317c:	7992      	ldrb	r2, [r2, #6]
    317e:	2a01      	cmp	r2, #1
    3180:	d033      	beq.n	31ea <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3182:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3184:	b2d2      	uxtb	r2, r2
    3186:	4923      	ldr	r1, [pc, #140]	; (3214 <trx_reg_write+0xfc>)
    3188:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    318a:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    318c:	7e1a      	ldrb	r2, [r3, #24]
    318e:	420a      	tst	r2, r1
    3190:	d0fc      	beq.n	318c <trx_reg_write+0x74>
    3192:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3194:	07d2      	lsls	r2, r2, #31
    3196:	d500      	bpl.n	319a <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3198:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    319a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    319c:	7e1a      	ldrb	r2, [r3, #24]
    319e:	420a      	tst	r2, r1
    31a0:	d0fc      	beq.n	319c <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    31a2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    31a4:	7e1a      	ldrb	r2, [r3, #24]
    31a6:	420a      	tst	r2, r1
    31a8:	d0fc      	beq.n	31a4 <trx_reg_write+0x8c>
    31aa:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    31ac:	0752      	lsls	r2, r2, #29
    31ae:	d50c      	bpl.n	31ca <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    31b0:	8b5a      	ldrh	r2, [r3, #26]
    31b2:	0752      	lsls	r2, r2, #29
    31b4:	d501      	bpl.n	31ba <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    31b6:	2204      	movs	r2, #4
    31b8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    31ba:	4a13      	ldr	r2, [pc, #76]	; (3208 <trx_reg_write+0xf0>)
    31bc:	7992      	ldrb	r2, [r2, #6]
    31be:	2a01      	cmp	r2, #1
    31c0:	d019      	beq.n	31f6 <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    31c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31c4:	b2db      	uxtb	r3, r3
    31c6:	4a13      	ldr	r2, [pc, #76]	; (3214 <trx_reg_write+0xfc>)
    31c8:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    31ca:	2200      	movs	r2, #0
    31cc:	490f      	ldr	r1, [pc, #60]	; (320c <trx_reg_write+0xf4>)
    31ce:	480e      	ldr	r0, [pc, #56]	; (3208 <trx_reg_write+0xf0>)
    31d0:	4b0f      	ldr	r3, [pc, #60]	; (3210 <trx_reg_write+0xf8>)
    31d2:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    31d4:	23ff      	movs	r3, #255	; 0xff
    31d6:	422b      	tst	r3, r5
    31d8:	d005      	beq.n	31e6 <trx_reg_write+0xce>
		cpu_irq_enable();
    31da:	2201      	movs	r2, #1
    31dc:	4b09      	ldr	r3, [pc, #36]	; (3204 <trx_reg_write+0xec>)
    31de:	701a      	strb	r2, [r3, #0]
    31e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    31e4:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    31e6:	b003      	add	sp, #12
    31e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    31ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    31ec:	05d2      	lsls	r2, r2, #23
    31ee:	0dd2      	lsrs	r2, r2, #23
    31f0:	4908      	ldr	r1, [pc, #32]	; (3214 <trx_reg_write+0xfc>)
    31f2:	800a      	strh	r2, [r1, #0]
    31f4:	e7c9      	b.n	318a <trx_reg_write+0x72>
    31f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31f8:	05db      	lsls	r3, r3, #23
    31fa:	0ddb      	lsrs	r3, r3, #23
    31fc:	4a05      	ldr	r2, [pc, #20]	; (3214 <trx_reg_write+0xfc>)
    31fe:	8013      	strh	r3, [r2, #0]
    3200:	e7e3      	b.n	31ca <trx_reg_write+0xb2>
    3202:	46c0      	nop			; (mov r8, r8)
    3204:	20000008 	.word	0x20000008
    3208:	20000a0c 	.word	0x20000a0c
    320c:	200009d0 	.word	0x200009d0
    3210:	000012ed 	.word	0x000012ed
    3214:	200009c8 	.word	0x200009c8

00003218 <setup>:
#include "sys.h"
#include "TheArtist.h"
/************************************************************************/
/*                                                                      */
/************************************************************************/
void setup(void) {
    3218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// [SYSTEM INITIALIZE]
	// [NOTICE!]!! sequence of this calls is important!
	irq_initialize_vectors();
	system_init();
    321a:	4b1b      	ldr	r3, [pc, #108]	; (3288 <setup+0x70>)
    321c:	4798      	blx	r3
	delay_init();
    321e:	4b1b      	ldr	r3, [pc, #108]	; (328c <setup+0x74>)
    3220:	4798      	blx	r3
	SYS_Init();	
    3222:	4b1b      	ldr	r3, [pc, #108]	; (3290 <setup+0x78>)
    3224:	4798      	blx	r3
	
	artist_ultrasonic_tc_configure();
    3226:	4b1b      	ldr	r3, [pc, #108]	; (3294 <setup+0x7c>)
    3228:	4798      	blx	r3
	artist_scheduler_tc_configure();
    322a:	4b1b      	ldr	r3, [pc, #108]	; (3298 <setup+0x80>)
    322c:	4798      	blx	r3
	artist_configure_tc_callbacks();  
    322e:	4b1b      	ldr	r3, [pc, #108]	; (329c <setup+0x84>)
    3230:	4798      	blx	r3
	artist_init_maze(); 
    3232:	4b1b      	ldr	r3, [pc, #108]	; (32a0 <setup+0x88>)
    3234:	4798      	blx	r3

	cpu_irq_enable();
    3236:	4e1b      	ldr	r6, [pc, #108]	; (32a4 <setup+0x8c>)
    3238:	2701      	movs	r7, #1
    323a:	7037      	strb	r7, [r6, #0]
    323c:	f3bf 8f5f 	dmb	sy
    3240:	b662      	cpsie	i
	
	// [ultrasonic]
	artist_ultrasonic_configure(&(artist_front.us_instance_right),
    3242:	4c19      	ldr	r4, [pc, #100]	; (32a8 <setup+0x90>)
    3244:	220f      	movs	r2, #15
    3246:	211c      	movs	r1, #28
    3248:	0020      	movs	r0, r4
    324a:	4d18      	ldr	r5, [pc, #96]	; (32ac <setup+0x94>)
    324c:	47a8      	blx	r5
	CONF_ARTIST_RIGHT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_center),
    324e:	0020      	movs	r0, r4
    3250:	3810      	subs	r0, #16
    3252:	220f      	movs	r2, #15
    3254:	210d      	movs	r1, #13
    3256:	47a8      	blx	r5
	CONF_ARTIST_CENTER_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_left),
    3258:	0020      	movs	r0, r4
    325a:	3808      	subs	r0, #8
    325c:	220f      	movs	r2, #15
    325e:	2117      	movs	r1, #23
    3260:	47a8      	blx	r5
	CONF_ARTIST_LEFT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_gpio_init();
    3262:	4b13      	ldr	r3, [pc, #76]	; (32b0 <setup+0x98>)
    3264:	4798      	blx	r3
	
	//! [ultrasonic]
	
	
	artist_usart_configure(&(artist_front.usart_instance));
    3266:	3c4c      	subs	r4, #76	; 0x4c
    3268:	0020      	movs	r0, r4
    326a:	4b12      	ldr	r3, [pc, #72]	; (32b4 <setup+0x9c>)
    326c:	4798      	blx	r3
	cpu_irq_enable();
    326e:	7037      	strb	r7, [r6, #0]
    3270:	f3bf 8f5f 	dmb	sy
    3274:	b662      	cpsie	i
	
	system_interrupt_enable_global();

	
	usart_read_buffer_job( &(artist_front.usart_instance),
    3276:	2205      	movs	r2, #5
    3278:	490f      	ldr	r1, [pc, #60]	; (32b8 <setup+0xa0>)
    327a:	0020      	movs	r0, r4
    327c:	4b0f      	ldr	r3, [pc, #60]	; (32bc <setup+0xa4>)
    327e:	4798      	blx	r3
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
	
	printf("front node setup complete\n"); 
    3280:	480f      	ldr	r0, [pc, #60]	; (32c0 <setup+0xa8>)
    3282:	4b10      	ldr	r3, [pc, #64]	; (32c4 <setup+0xac>)
    3284:	4798      	blx	r3
	
}
    3286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3288:	000022b5 	.word	0x000022b5
    328c:	00000801 	.word	0x00000801
    3290:	00002c05 	.word	0x00002c05
    3294:	00000525 	.word	0x00000525
    3298:	00000741 	.word	0x00000741
    329c:	000007b1 	.word	0x000007b1
    32a0:	00000115 	.word	0x00000115
    32a4:	20000008 	.word	0x20000008
    32a8:	20000878 	.word	0x20000878
    32ac:	000001d5 	.word	0x000001d5
    32b0:	000001e5 	.word	0x000001e5
    32b4:	000005b9 	.word	0x000005b9
    32b8:	20000890 	.word	0x20000890
    32bc:	00001881 	.word	0x00001881
    32c0:	00008a1c 	.word	0x00008a1c
    32c4:	00003e11 	.word	0x00003e11

000032c8 <main>:
	
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
int main (void) {
    32c8:	b510      	push	{r4, lr}
	setup();
    32ca:	4b01      	ldr	r3, [pc, #4]	; (32d0 <main+0x8>)
    32cc:	4798      	blx	r3
    32ce:	e7fe      	b.n	32ce <main+0x6>
    32d0:	00003219 	.word	0x00003219

000032d4 <common_tc_delay>:
    32d4:	b510      	push	{r4, lr}
    32d6:	1c04      	adds	r4, r0, #0
    32d8:	4b13      	ldr	r3, [pc, #76]	; (3328 <common_tc_delay+0x54>)
    32da:	4798      	blx	r3
    32dc:	4b13      	ldr	r3, [pc, #76]	; (332c <common_tc_delay+0x58>)
    32de:	781a      	ldrb	r2, [r3, #0]
    32e0:	4362      	muls	r2, r4
    32e2:	1881      	adds	r1, r0, r2
    32e4:	4b12      	ldr	r3, [pc, #72]	; (3330 <common_tc_delay+0x5c>)
    32e6:	6059      	str	r1, [r3, #4]
    32e8:	6859      	ldr	r1, [r3, #4]
    32ea:	0c09      	lsrs	r1, r1, #16
    32ec:	6059      	str	r1, [r3, #4]
    32ee:	685b      	ldr	r3, [r3, #4]
    32f0:	2b00      	cmp	r3, #0
    32f2:	d007      	beq.n	3304 <common_tc_delay+0x30>
    32f4:	4b0e      	ldr	r3, [pc, #56]	; (3330 <common_tc_delay+0x5c>)
    32f6:	6859      	ldr	r1, [r3, #4]
    32f8:	3201      	adds	r2, #1
    32fa:	1880      	adds	r0, r0, r2
    32fc:	8118      	strh	r0, [r3, #8]
    32fe:	4b0d      	ldr	r3, [pc, #52]	; (3334 <common_tc_delay+0x60>)
    3300:	4798      	blx	r3
    3302:	e004      	b.n	330e <common_tc_delay+0x3a>
    3304:	1882      	adds	r2, r0, r2
    3306:	4b0a      	ldr	r3, [pc, #40]	; (3330 <common_tc_delay+0x5c>)
    3308:	811a      	strh	r2, [r3, #8]
    330a:	4b0b      	ldr	r3, [pc, #44]	; (3338 <common_tc_delay+0x64>)
    330c:	4798      	blx	r3
    330e:	4b08      	ldr	r3, [pc, #32]	; (3330 <common_tc_delay+0x5c>)
    3310:	891b      	ldrh	r3, [r3, #8]
    3312:	2b63      	cmp	r3, #99	; 0x63
    3314:	d802      	bhi.n	331c <common_tc_delay+0x48>
    3316:	3364      	adds	r3, #100	; 0x64
    3318:	4a05      	ldr	r2, [pc, #20]	; (3330 <common_tc_delay+0x5c>)
    331a:	8113      	strh	r3, [r2, #8]
    331c:	4b04      	ldr	r3, [pc, #16]	; (3330 <common_tc_delay+0x5c>)
    331e:	8918      	ldrh	r0, [r3, #8]
    3320:	4b06      	ldr	r3, [pc, #24]	; (333c <common_tc_delay+0x68>)
    3322:	4798      	blx	r3
    3324:	bd10      	pop	{r4, pc}
    3326:	46c0      	nop			; (mov r8, r8)
    3328:	00002d41 	.word	0x00002d41
    332c:	20000a18 	.word	0x20000a18
    3330:	20000798 	.word	0x20000798
    3334:	00002d55 	.word	0x00002d55
    3338:	00002d69 	.word	0x00002d69
    333c:	00002da5 	.word	0x00002da5

00003340 <common_tc_init>:
    3340:	b508      	push	{r3, lr}
    3342:	2200      	movs	r2, #0
    3344:	4b03      	ldr	r3, [pc, #12]	; (3354 <common_tc_init+0x14>)
    3346:	701a      	strb	r2, [r3, #0]
    3348:	4b03      	ldr	r3, [pc, #12]	; (3358 <common_tc_init+0x18>)
    334a:	4798      	blx	r3
    334c:	4b03      	ldr	r3, [pc, #12]	; (335c <common_tc_init+0x1c>)
    334e:	7018      	strb	r0, [r3, #0]
    3350:	bd08      	pop	{r3, pc}
    3352:	46c0      	nop			; (mov r8, r8)
    3354:	20000798 	.word	0x20000798
    3358:	00002dbd 	.word	0x00002dbd
    335c:	20000a18 	.word	0x20000a18

00003360 <tmr_ovf_callback>:
    3360:	b508      	push	{r3, lr}
    3362:	4b0e      	ldr	r3, [pc, #56]	; (339c <tmr_ovf_callback+0x3c>)
    3364:	685b      	ldr	r3, [r3, #4]
    3366:	2b00      	cmp	r3, #0
    3368:	d007      	beq.n	337a <tmr_ovf_callback+0x1a>
    336a:	4a0c      	ldr	r2, [pc, #48]	; (339c <tmr_ovf_callback+0x3c>)
    336c:	6853      	ldr	r3, [r2, #4]
    336e:	3b01      	subs	r3, #1
    3370:	6053      	str	r3, [r2, #4]
    3372:	2b00      	cmp	r3, #0
    3374:	d101      	bne.n	337a <tmr_ovf_callback+0x1a>
    3376:	4b0a      	ldr	r3, [pc, #40]	; (33a0 <tmr_ovf_callback+0x40>)
    3378:	4798      	blx	r3
    337a:	4a08      	ldr	r2, [pc, #32]	; (339c <tmr_ovf_callback+0x3c>)
    337c:	7813      	ldrb	r3, [r2, #0]
    337e:	3301      	adds	r3, #1
    3380:	b2db      	uxtb	r3, r3
    3382:	7013      	strb	r3, [r2, #0]
    3384:	4a07      	ldr	r2, [pc, #28]	; (33a4 <tmr_ovf_callback+0x44>)
    3386:	7812      	ldrb	r2, [r2, #0]
    3388:	429a      	cmp	r2, r3
    338a:	d806      	bhi.n	339a <tmr_ovf_callback+0x3a>
    338c:	4b03      	ldr	r3, [pc, #12]	; (339c <tmr_ovf_callback+0x3c>)
    338e:	2200      	movs	r2, #0
    3390:	701a      	strb	r2, [r3, #0]
    3392:	68db      	ldr	r3, [r3, #12]
    3394:	2b00      	cmp	r3, #0
    3396:	d000      	beq.n	339a <tmr_ovf_callback+0x3a>
    3398:	4798      	blx	r3
    339a:	bd08      	pop	{r3, pc}
    339c:	20000798 	.word	0x20000798
    33a0:	00002d69 	.word	0x00002d69
    33a4:	20000a18 	.word	0x20000a18

000033a8 <tmr_cca_callback>:
    33a8:	b508      	push	{r3, lr}
    33aa:	4b04      	ldr	r3, [pc, #16]	; (33bc <tmr_cca_callback+0x14>)
    33ac:	4798      	blx	r3
    33ae:	4b04      	ldr	r3, [pc, #16]	; (33c0 <tmr_cca_callback+0x18>)
    33b0:	691b      	ldr	r3, [r3, #16]
    33b2:	2b00      	cmp	r3, #0
    33b4:	d000      	beq.n	33b8 <tmr_cca_callback+0x10>
    33b6:	4798      	blx	r3
    33b8:	bd08      	pop	{r3, pc}
    33ba:	46c0      	nop			; (mov r8, r8)
    33bc:	00002d55 	.word	0x00002d55
    33c0:	20000798 	.word	0x20000798

000033c4 <set_common_tc_expiry_callback>:
    33c4:	4b01      	ldr	r3, [pc, #4]	; (33cc <set_common_tc_expiry_callback+0x8>)
    33c6:	6118      	str	r0, [r3, #16]
    33c8:	4770      	bx	lr
    33ca:	46c0      	nop			; (mov r8, r8)
    33cc:	20000798 	.word	0x20000798

000033d0 <__libc_init_array>:
    33d0:	b570      	push	{r4, r5, r6, lr}
    33d2:	2600      	movs	r6, #0
    33d4:	4d0c      	ldr	r5, [pc, #48]	; (3408 <__libc_init_array+0x38>)
    33d6:	4c0d      	ldr	r4, [pc, #52]	; (340c <__libc_init_array+0x3c>)
    33d8:	1b64      	subs	r4, r4, r5
    33da:	10a4      	asrs	r4, r4, #2
    33dc:	42a6      	cmp	r6, r4
    33de:	d109      	bne.n	33f4 <__libc_init_array+0x24>
    33e0:	2600      	movs	r6, #0
    33e2:	f005 fd29 	bl	8e38 <_init>
    33e6:	4d0a      	ldr	r5, [pc, #40]	; (3410 <__libc_init_array+0x40>)
    33e8:	4c0a      	ldr	r4, [pc, #40]	; (3414 <__libc_init_array+0x44>)
    33ea:	1b64      	subs	r4, r4, r5
    33ec:	10a4      	asrs	r4, r4, #2
    33ee:	42a6      	cmp	r6, r4
    33f0:	d105      	bne.n	33fe <__libc_init_array+0x2e>
    33f2:	bd70      	pop	{r4, r5, r6, pc}
    33f4:	00b3      	lsls	r3, r6, #2
    33f6:	58eb      	ldr	r3, [r5, r3]
    33f8:	4798      	blx	r3
    33fa:	3601      	adds	r6, #1
    33fc:	e7ee      	b.n	33dc <__libc_init_array+0xc>
    33fe:	00b3      	lsls	r3, r6, #2
    3400:	58eb      	ldr	r3, [r5, r3]
    3402:	4798      	blx	r3
    3404:	3601      	adds	r6, #1
    3406:	e7f2      	b.n	33ee <__libc_init_array+0x1e>
    3408:	00008e44 	.word	0x00008e44
    340c:	00008e44 	.word	0x00008e44
    3410:	00008e44 	.word	0x00008e44
    3414:	00008e48 	.word	0x00008e48

00003418 <memcpy>:
    3418:	2300      	movs	r3, #0
    341a:	b510      	push	{r4, lr}
    341c:	429a      	cmp	r2, r3
    341e:	d100      	bne.n	3422 <memcpy+0xa>
    3420:	bd10      	pop	{r4, pc}
    3422:	5ccc      	ldrb	r4, [r1, r3]
    3424:	54c4      	strb	r4, [r0, r3]
    3426:	3301      	adds	r3, #1
    3428:	e7f8      	b.n	341c <memcpy+0x4>

0000342a <memset>:
    342a:	0003      	movs	r3, r0
    342c:	1882      	adds	r2, r0, r2
    342e:	4293      	cmp	r3, r2
    3430:	d100      	bne.n	3434 <memset+0xa>
    3432:	4770      	bx	lr
    3434:	7019      	strb	r1, [r3, #0]
    3436:	3301      	adds	r3, #1
    3438:	e7f9      	b.n	342e <memset+0x4>

0000343a <__cvt>:
    343a:	b5f0      	push	{r4, r5, r6, r7, lr}
    343c:	b08b      	sub	sp, #44	; 0x2c
    343e:	0014      	movs	r4, r2
    3440:	1e1d      	subs	r5, r3, #0
    3442:	9912      	ldr	r1, [sp, #72]	; 0x48
    3444:	da53      	bge.n	34ee <__cvt+0xb4>
    3446:	2480      	movs	r4, #128	; 0x80
    3448:	0624      	lsls	r4, r4, #24
    344a:	191b      	adds	r3, r3, r4
    344c:	001d      	movs	r5, r3
    344e:	0014      	movs	r4, r2
    3450:	232d      	movs	r3, #45	; 0x2d
    3452:	700b      	strb	r3, [r1, #0]
    3454:	2320      	movs	r3, #32
    3456:	9e14      	ldr	r6, [sp, #80]	; 0x50
    3458:	2203      	movs	r2, #3
    345a:	439e      	bics	r6, r3
    345c:	2e46      	cmp	r6, #70	; 0x46
    345e:	d007      	beq.n	3470 <__cvt+0x36>
    3460:	0033      	movs	r3, r6
    3462:	3b45      	subs	r3, #69	; 0x45
    3464:	4259      	negs	r1, r3
    3466:	414b      	adcs	r3, r1
    3468:	9910      	ldr	r1, [sp, #64]	; 0x40
    346a:	3a01      	subs	r2, #1
    346c:	18cb      	adds	r3, r1, r3
    346e:	9310      	str	r3, [sp, #64]	; 0x40
    3470:	ab09      	add	r3, sp, #36	; 0x24
    3472:	9304      	str	r3, [sp, #16]
    3474:	ab08      	add	r3, sp, #32
    3476:	9303      	str	r3, [sp, #12]
    3478:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    347a:	9200      	str	r2, [sp, #0]
    347c:	9302      	str	r3, [sp, #8]
    347e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3480:	0022      	movs	r2, r4
    3482:	9301      	str	r3, [sp, #4]
    3484:	002b      	movs	r3, r5
    3486:	f000 fedb 	bl	4240 <_dtoa_r>
    348a:	0007      	movs	r7, r0
    348c:	2e47      	cmp	r6, #71	; 0x47
    348e:	d102      	bne.n	3496 <__cvt+0x5c>
    3490:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3492:	07db      	lsls	r3, r3, #31
    3494:	d524      	bpl.n	34e0 <__cvt+0xa6>
    3496:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3498:	18fb      	adds	r3, r7, r3
    349a:	9307      	str	r3, [sp, #28]
    349c:	2e46      	cmp	r6, #70	; 0x46
    349e:	d114      	bne.n	34ca <__cvt+0x90>
    34a0:	783b      	ldrb	r3, [r7, #0]
    34a2:	2b30      	cmp	r3, #48	; 0x30
    34a4:	d10c      	bne.n	34c0 <__cvt+0x86>
    34a6:	2200      	movs	r2, #0
    34a8:	2300      	movs	r3, #0
    34aa:	0020      	movs	r0, r4
    34ac:	0029      	movs	r1, r5
    34ae:	f002 fe21 	bl	60f4 <__aeabi_dcmpeq>
    34b2:	2800      	cmp	r0, #0
    34b4:	d104      	bne.n	34c0 <__cvt+0x86>
    34b6:	2301      	movs	r3, #1
    34b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    34ba:	1a9b      	subs	r3, r3, r2
    34bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    34be:	6013      	str	r3, [r2, #0]
    34c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    34c2:	9a07      	ldr	r2, [sp, #28]
    34c4:	681b      	ldr	r3, [r3, #0]
    34c6:	18d3      	adds	r3, r2, r3
    34c8:	9307      	str	r3, [sp, #28]
    34ca:	2200      	movs	r2, #0
    34cc:	2300      	movs	r3, #0
    34ce:	0020      	movs	r0, r4
    34d0:	0029      	movs	r1, r5
    34d2:	f002 fe0f 	bl	60f4 <__aeabi_dcmpeq>
    34d6:	2230      	movs	r2, #48	; 0x30
    34d8:	2800      	cmp	r0, #0
    34da:	d00d      	beq.n	34f8 <__cvt+0xbe>
    34dc:	9b07      	ldr	r3, [sp, #28]
    34de:	9309      	str	r3, [sp, #36]	; 0x24
    34e0:	0038      	movs	r0, r7
    34e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    34e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
    34e6:	1bdb      	subs	r3, r3, r7
    34e8:	6013      	str	r3, [r2, #0]
    34ea:	b00b      	add	sp, #44	; 0x2c
    34ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34ee:	2300      	movs	r3, #0
    34f0:	e7af      	b.n	3452 <__cvt+0x18>
    34f2:	1c59      	adds	r1, r3, #1
    34f4:	9109      	str	r1, [sp, #36]	; 0x24
    34f6:	701a      	strb	r2, [r3, #0]
    34f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    34fa:	9907      	ldr	r1, [sp, #28]
    34fc:	4299      	cmp	r1, r3
    34fe:	d8f8      	bhi.n	34f2 <__cvt+0xb8>
    3500:	e7ee      	b.n	34e0 <__cvt+0xa6>

00003502 <__exponent>:
    3502:	b5f0      	push	{r4, r5, r6, r7, lr}
    3504:	232b      	movs	r3, #43	; 0x2b
    3506:	b085      	sub	sp, #20
    3508:	0007      	movs	r7, r0
    350a:	000c      	movs	r4, r1
    350c:	7002      	strb	r2, [r0, #0]
    350e:	1c86      	adds	r6, r0, #2
    3510:	2900      	cmp	r1, #0
    3512:	da01      	bge.n	3518 <__exponent+0x16>
    3514:	232d      	movs	r3, #45	; 0x2d
    3516:	424c      	negs	r4, r1
    3518:	707b      	strb	r3, [r7, #1]
    351a:	2c09      	cmp	r4, #9
    351c:	dd23      	ble.n	3566 <__exponent+0x64>
    351e:	ab02      	add	r3, sp, #8
    3520:	1ddd      	adds	r5, r3, #7
    3522:	1e6b      	subs	r3, r5, #1
    3524:	0020      	movs	r0, r4
    3526:	210a      	movs	r1, #10
    3528:	9301      	str	r3, [sp, #4]
    352a:	f002 fdcd 	bl	60c8 <__aeabi_idivmod>
    352e:	1e6b      	subs	r3, r5, #1
    3530:	3130      	adds	r1, #48	; 0x30
    3532:	7019      	strb	r1, [r3, #0]
    3534:	0020      	movs	r0, r4
    3536:	210a      	movs	r1, #10
    3538:	f002 fce0 	bl	5efc <__divsi3>
    353c:	0004      	movs	r4, r0
    353e:	2809      	cmp	r0, #9
    3540:	dc0a      	bgt.n	3558 <__exponent+0x56>
    3542:	3d02      	subs	r5, #2
    3544:	3430      	adds	r4, #48	; 0x30
    3546:	702c      	strb	r4, [r5, #0]
    3548:	ab02      	add	r3, sp, #8
    354a:	3307      	adds	r3, #7
    354c:	0030      	movs	r0, r6
    354e:	42ab      	cmp	r3, r5
    3550:	d804      	bhi.n	355c <__exponent+0x5a>
    3552:	1bc0      	subs	r0, r0, r7
    3554:	b005      	add	sp, #20
    3556:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3558:	9d01      	ldr	r5, [sp, #4]
    355a:	e7e2      	b.n	3522 <__exponent+0x20>
    355c:	782b      	ldrb	r3, [r5, #0]
    355e:	3501      	adds	r5, #1
    3560:	7033      	strb	r3, [r6, #0]
    3562:	3601      	adds	r6, #1
    3564:	e7f0      	b.n	3548 <__exponent+0x46>
    3566:	2330      	movs	r3, #48	; 0x30
    3568:	18e4      	adds	r4, r4, r3
    356a:	7033      	strb	r3, [r6, #0]
    356c:	1cb0      	adds	r0, r6, #2
    356e:	7074      	strb	r4, [r6, #1]
    3570:	e7ef      	b.n	3552 <__exponent+0x50>
	...

00003574 <_printf_float>:
    3574:	b5f0      	push	{r4, r5, r6, r7, lr}
    3576:	b095      	sub	sp, #84	; 0x54
    3578:	000c      	movs	r4, r1
    357a:	920a      	str	r2, [sp, #40]	; 0x28
    357c:	930b      	str	r3, [sp, #44]	; 0x2c
    357e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    3580:	9009      	str	r0, [sp, #36]	; 0x24
    3582:	f001 fdd3 	bl	512c <_localeconv_r>
    3586:	6803      	ldr	r3, [r0, #0]
    3588:	0018      	movs	r0, r3
    358a:	930d      	str	r3, [sp, #52]	; 0x34
    358c:	f000 fd00 	bl	3f90 <strlen>
    3590:	2300      	movs	r3, #0
    3592:	9312      	str	r3, [sp, #72]	; 0x48
    3594:	6823      	ldr	r3, [r4, #0]
    3596:	900e      	str	r0, [sp, #56]	; 0x38
    3598:	930c      	str	r3, [sp, #48]	; 0x30
    359a:	990c      	ldr	r1, [sp, #48]	; 0x30
    359c:	7e27      	ldrb	r7, [r4, #24]
    359e:	682b      	ldr	r3, [r5, #0]
    35a0:	2207      	movs	r2, #7
    35a2:	05c9      	lsls	r1, r1, #23
    35a4:	d547      	bpl.n	3636 <_printf_float+0xc2>
    35a6:	189b      	adds	r3, r3, r2
    35a8:	4393      	bics	r3, r2
    35aa:	001a      	movs	r2, r3
    35ac:	3208      	adds	r2, #8
    35ae:	602a      	str	r2, [r5, #0]
    35b0:	681a      	ldr	r2, [r3, #0]
    35b2:	685b      	ldr	r3, [r3, #4]
    35b4:	64a2      	str	r2, [r4, #72]	; 0x48
    35b6:	64e3      	str	r3, [r4, #76]	; 0x4c
    35b8:	2201      	movs	r2, #1
    35ba:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    35bc:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    35be:	006b      	lsls	r3, r5, #1
    35c0:	085b      	lsrs	r3, r3, #1
    35c2:	930f      	str	r3, [sp, #60]	; 0x3c
    35c4:	4252      	negs	r2, r2
    35c6:	4ba7      	ldr	r3, [pc, #668]	; (3864 <_printf_float+0x2f0>)
    35c8:	0030      	movs	r0, r6
    35ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
    35cc:	f004 fff0 	bl	85b0 <__aeabi_dcmpun>
    35d0:	2800      	cmp	r0, #0
    35d2:	d000      	beq.n	35d6 <_printf_float+0x62>
    35d4:	e206      	b.n	39e4 <_printf_float+0x470>
    35d6:	2201      	movs	r2, #1
    35d8:	4ba2      	ldr	r3, [pc, #648]	; (3864 <_printf_float+0x2f0>)
    35da:	4252      	negs	r2, r2
    35dc:	0030      	movs	r0, r6
    35de:	990f      	ldr	r1, [sp, #60]	; 0x3c
    35e0:	f002 fd98 	bl	6114 <__aeabi_dcmple>
    35e4:	2800      	cmp	r0, #0
    35e6:	d000      	beq.n	35ea <_printf_float+0x76>
    35e8:	e1fc      	b.n	39e4 <_printf_float+0x470>
    35ea:	2200      	movs	r2, #0
    35ec:	2300      	movs	r3, #0
    35ee:	0030      	movs	r0, r6
    35f0:	0029      	movs	r1, r5
    35f2:	f002 fd85 	bl	6100 <__aeabi_dcmplt>
    35f6:	2800      	cmp	r0, #0
    35f8:	d003      	beq.n	3602 <_printf_float+0x8e>
    35fa:	0023      	movs	r3, r4
    35fc:	222d      	movs	r2, #45	; 0x2d
    35fe:	3343      	adds	r3, #67	; 0x43
    3600:	701a      	strb	r2, [r3, #0]
    3602:	4d99      	ldr	r5, [pc, #612]	; (3868 <_printf_float+0x2f4>)
    3604:	2f47      	cmp	r7, #71	; 0x47
    3606:	d800      	bhi.n	360a <_printf_float+0x96>
    3608:	4d98      	ldr	r5, [pc, #608]	; (386c <_printf_float+0x2f8>)
    360a:	2303      	movs	r3, #3
    360c:	2600      	movs	r6, #0
    360e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3610:	6123      	str	r3, [r4, #16]
    3612:	3301      	adds	r3, #1
    3614:	439a      	bics	r2, r3
    3616:	6022      	str	r2, [r4, #0]
    3618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    361a:	aa13      	add	r2, sp, #76	; 0x4c
    361c:	9300      	str	r3, [sp, #0]
    361e:	0021      	movs	r1, r4
    3620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3622:	9809      	ldr	r0, [sp, #36]	; 0x24
    3624:	f000 f9f2 	bl	3a0c <_printf_common>
    3628:	1c43      	adds	r3, r0, #1
    362a:	d000      	beq.n	362e <_printf_float+0xba>
    362c:	e09c      	b.n	3768 <_printf_float+0x1f4>
    362e:	2001      	movs	r0, #1
    3630:	4240      	negs	r0, r0
    3632:	b015      	add	sp, #84	; 0x54
    3634:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3636:	3307      	adds	r3, #7
    3638:	e7b6      	b.n	35a8 <_printf_float+0x34>
    363a:	2380      	movs	r3, #128	; 0x80
    363c:	6862      	ldr	r2, [r4, #4]
    363e:	00db      	lsls	r3, r3, #3
    3640:	1c51      	adds	r1, r2, #1
    3642:	d145      	bne.n	36d0 <_printf_float+0x15c>
    3644:	3207      	adds	r2, #7
    3646:	6062      	str	r2, [r4, #4]
    3648:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    364a:	2100      	movs	r1, #0
    364c:	4313      	orrs	r3, r2
    364e:	aa12      	add	r2, sp, #72	; 0x48
    3650:	9205      	str	r2, [sp, #20]
    3652:	aa11      	add	r2, sp, #68	; 0x44
    3654:	9203      	str	r2, [sp, #12]
    3656:	2223      	movs	r2, #35	; 0x23
    3658:	6023      	str	r3, [r4, #0]
    365a:	9106      	str	r1, [sp, #24]
    365c:	9301      	str	r3, [sp, #4]
    365e:	a908      	add	r1, sp, #32
    3660:	6863      	ldr	r3, [r4, #4]
    3662:	1852      	adds	r2, r2, r1
    3664:	9202      	str	r2, [sp, #8]
    3666:	9300      	str	r3, [sp, #0]
    3668:	0032      	movs	r2, r6
    366a:	002b      	movs	r3, r5
    366c:	9704      	str	r7, [sp, #16]
    366e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3670:	f7ff fee3 	bl	343a <__cvt>
    3674:	2320      	movs	r3, #32
    3676:	003a      	movs	r2, r7
    3678:	0005      	movs	r5, r0
    367a:	439a      	bics	r2, r3
    367c:	2a47      	cmp	r2, #71	; 0x47
    367e:	d107      	bne.n	3690 <_printf_float+0x11c>
    3680:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3682:	1cda      	adds	r2, r3, #3
    3684:	db02      	blt.n	368c <_printf_float+0x118>
    3686:	6862      	ldr	r2, [r4, #4]
    3688:	4293      	cmp	r3, r2
    368a:	dd5b      	ble.n	3744 <_printf_float+0x1d0>
    368c:	3f02      	subs	r7, #2
    368e:	b2ff      	uxtb	r7, r7
    3690:	9911      	ldr	r1, [sp, #68]	; 0x44
    3692:	2f65      	cmp	r7, #101	; 0x65
    3694:	d83b      	bhi.n	370e <_printf_float+0x19a>
    3696:	0020      	movs	r0, r4
    3698:	3901      	subs	r1, #1
    369a:	003a      	movs	r2, r7
    369c:	3050      	adds	r0, #80	; 0x50
    369e:	9111      	str	r1, [sp, #68]	; 0x44
    36a0:	f7ff ff2f 	bl	3502 <__exponent>
    36a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    36a6:	0006      	movs	r6, r0
    36a8:	1883      	adds	r3, r0, r2
    36aa:	6123      	str	r3, [r4, #16]
    36ac:	2a01      	cmp	r2, #1
    36ae:	dc02      	bgt.n	36b6 <_printf_float+0x142>
    36b0:	6822      	ldr	r2, [r4, #0]
    36b2:	07d2      	lsls	r2, r2, #31
    36b4:	d501      	bpl.n	36ba <_printf_float+0x146>
    36b6:	3301      	adds	r3, #1
    36b8:	6123      	str	r3, [r4, #16]
    36ba:	2323      	movs	r3, #35	; 0x23
    36bc:	aa08      	add	r2, sp, #32
    36be:	189b      	adds	r3, r3, r2
    36c0:	781b      	ldrb	r3, [r3, #0]
    36c2:	2b00      	cmp	r3, #0
    36c4:	d0a8      	beq.n	3618 <_printf_float+0xa4>
    36c6:	0023      	movs	r3, r4
    36c8:	222d      	movs	r2, #45	; 0x2d
    36ca:	3343      	adds	r3, #67	; 0x43
    36cc:	701a      	strb	r2, [r3, #0]
    36ce:	e7a3      	b.n	3618 <_printf_float+0xa4>
    36d0:	2f67      	cmp	r7, #103	; 0x67
    36d2:	d001      	beq.n	36d8 <_printf_float+0x164>
    36d4:	2f47      	cmp	r7, #71	; 0x47
    36d6:	d1b7      	bne.n	3648 <_printf_float+0xd4>
    36d8:	2a00      	cmp	r2, #0
    36da:	d016      	beq.n	370a <_printf_float+0x196>
    36dc:	990c      	ldr	r1, [sp, #48]	; 0x30
    36de:	a808      	add	r0, sp, #32
    36e0:	430b      	orrs	r3, r1
    36e2:	2100      	movs	r1, #0
    36e4:	9106      	str	r1, [sp, #24]
    36e6:	a912      	add	r1, sp, #72	; 0x48
    36e8:	9105      	str	r1, [sp, #20]
    36ea:	a911      	add	r1, sp, #68	; 0x44
    36ec:	9103      	str	r1, [sp, #12]
    36ee:	2123      	movs	r1, #35	; 0x23
    36f0:	1809      	adds	r1, r1, r0
    36f2:	6023      	str	r3, [r4, #0]
    36f4:	9301      	str	r3, [sp, #4]
    36f6:	9200      	str	r2, [sp, #0]
    36f8:	002b      	movs	r3, r5
    36fa:	9704      	str	r7, [sp, #16]
    36fc:	9102      	str	r1, [sp, #8]
    36fe:	0032      	movs	r2, r6
    3700:	9809      	ldr	r0, [sp, #36]	; 0x24
    3702:	f7ff fe9a 	bl	343a <__cvt>
    3706:	0005      	movs	r5, r0
    3708:	e7ba      	b.n	3680 <_printf_float+0x10c>
    370a:	2201      	movs	r2, #1
    370c:	e79b      	b.n	3646 <_printf_float+0xd2>
    370e:	2f66      	cmp	r7, #102	; 0x66
    3710:	d119      	bne.n	3746 <_printf_float+0x1d2>
    3712:	6863      	ldr	r3, [r4, #4]
    3714:	2900      	cmp	r1, #0
    3716:	dd0c      	ble.n	3732 <_printf_float+0x1be>
    3718:	6121      	str	r1, [r4, #16]
    371a:	2b00      	cmp	r3, #0
    371c:	d102      	bne.n	3724 <_printf_float+0x1b0>
    371e:	6822      	ldr	r2, [r4, #0]
    3720:	07d2      	lsls	r2, r2, #31
    3722:	d502      	bpl.n	372a <_printf_float+0x1b6>
    3724:	3301      	adds	r3, #1
    3726:	185b      	adds	r3, r3, r1
    3728:	6123      	str	r3, [r4, #16]
    372a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    372c:	2600      	movs	r6, #0
    372e:	65a3      	str	r3, [r4, #88]	; 0x58
    3730:	e7c3      	b.n	36ba <_printf_float+0x146>
    3732:	2b00      	cmp	r3, #0
    3734:	d103      	bne.n	373e <_printf_float+0x1ca>
    3736:	2201      	movs	r2, #1
    3738:	6821      	ldr	r1, [r4, #0]
    373a:	4211      	tst	r1, r2
    373c:	d000      	beq.n	3740 <_printf_float+0x1cc>
    373e:	1c9a      	adds	r2, r3, #2
    3740:	6122      	str	r2, [r4, #16]
    3742:	e7f2      	b.n	372a <_printf_float+0x1b6>
    3744:	2767      	movs	r7, #103	; 0x67
    3746:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3748:	9812      	ldr	r0, [sp, #72]	; 0x48
    374a:	4283      	cmp	r3, r0
    374c:	db05      	blt.n	375a <_printf_float+0x1e6>
    374e:	6822      	ldr	r2, [r4, #0]
    3750:	6123      	str	r3, [r4, #16]
    3752:	07d2      	lsls	r2, r2, #31
    3754:	d5e9      	bpl.n	372a <_printf_float+0x1b6>
    3756:	3301      	adds	r3, #1
    3758:	e7e6      	b.n	3728 <_printf_float+0x1b4>
    375a:	2201      	movs	r2, #1
    375c:	2b00      	cmp	r3, #0
    375e:	dc01      	bgt.n	3764 <_printf_float+0x1f0>
    3760:	1892      	adds	r2, r2, r2
    3762:	1ad2      	subs	r2, r2, r3
    3764:	1812      	adds	r2, r2, r0
    3766:	e7eb      	b.n	3740 <_printf_float+0x1cc>
    3768:	6822      	ldr	r2, [r4, #0]
    376a:	0553      	lsls	r3, r2, #21
    376c:	d408      	bmi.n	3780 <_printf_float+0x20c>
    376e:	6923      	ldr	r3, [r4, #16]
    3770:	002a      	movs	r2, r5
    3772:	990a      	ldr	r1, [sp, #40]	; 0x28
    3774:	9809      	ldr	r0, [sp, #36]	; 0x24
    3776:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3778:	47a8      	blx	r5
    377a:	1c43      	adds	r3, r0, #1
    377c:	d129      	bne.n	37d2 <_printf_float+0x25e>
    377e:	e756      	b.n	362e <_printf_float+0xba>
    3780:	2f65      	cmp	r7, #101	; 0x65
    3782:	d800      	bhi.n	3786 <_printf_float+0x212>
    3784:	e0dc      	b.n	3940 <_printf_float+0x3cc>
    3786:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    3788:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    378a:	2200      	movs	r2, #0
    378c:	2300      	movs	r3, #0
    378e:	f002 fcb1 	bl	60f4 <__aeabi_dcmpeq>
    3792:	2800      	cmp	r0, #0
    3794:	d035      	beq.n	3802 <_printf_float+0x28e>
    3796:	2301      	movs	r3, #1
    3798:	4a35      	ldr	r2, [pc, #212]	; (3870 <_printf_float+0x2fc>)
    379a:	990a      	ldr	r1, [sp, #40]	; 0x28
    379c:	9809      	ldr	r0, [sp, #36]	; 0x24
    379e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    37a0:	47a8      	blx	r5
    37a2:	1c43      	adds	r3, r0, #1
    37a4:	d100      	bne.n	37a8 <_printf_float+0x234>
    37a6:	e742      	b.n	362e <_printf_float+0xba>
    37a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    37aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
    37ac:	4293      	cmp	r3, r2
    37ae:	db02      	blt.n	37b6 <_printf_float+0x242>
    37b0:	6823      	ldr	r3, [r4, #0]
    37b2:	07db      	lsls	r3, r3, #31
    37b4:	d50d      	bpl.n	37d2 <_printf_float+0x25e>
    37b6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    37b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    37ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    37bc:	990a      	ldr	r1, [sp, #40]	; 0x28
    37be:	9809      	ldr	r0, [sp, #36]	; 0x24
    37c0:	47a8      	blx	r5
    37c2:	2500      	movs	r5, #0
    37c4:	1c43      	adds	r3, r0, #1
    37c6:	d100      	bne.n	37ca <_printf_float+0x256>
    37c8:	e731      	b.n	362e <_printf_float+0xba>
    37ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
    37cc:	3b01      	subs	r3, #1
    37ce:	429d      	cmp	r5, r3
    37d0:	db0b      	blt.n	37ea <_printf_float+0x276>
    37d2:	6823      	ldr	r3, [r4, #0]
    37d4:	2500      	movs	r5, #0
    37d6:	079b      	lsls	r3, r3, #30
    37d8:	d500      	bpl.n	37dc <_printf_float+0x268>
    37da:	e0fd      	b.n	39d8 <_printf_float+0x464>
    37dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    37de:	68e0      	ldr	r0, [r4, #12]
    37e0:	4298      	cmp	r0, r3
    37e2:	db00      	blt.n	37e6 <_printf_float+0x272>
    37e4:	e725      	b.n	3632 <_printf_float+0xbe>
    37e6:	0018      	movs	r0, r3
    37e8:	e723      	b.n	3632 <_printf_float+0xbe>
    37ea:	0022      	movs	r2, r4
    37ec:	2301      	movs	r3, #1
    37ee:	321a      	adds	r2, #26
    37f0:	990a      	ldr	r1, [sp, #40]	; 0x28
    37f2:	9809      	ldr	r0, [sp, #36]	; 0x24
    37f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    37f6:	47b0      	blx	r6
    37f8:	1c43      	adds	r3, r0, #1
    37fa:	d100      	bne.n	37fe <_printf_float+0x28a>
    37fc:	e717      	b.n	362e <_printf_float+0xba>
    37fe:	3501      	adds	r5, #1
    3800:	e7e3      	b.n	37ca <_printf_float+0x256>
    3802:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3804:	2b00      	cmp	r3, #0
    3806:	dc35      	bgt.n	3874 <_printf_float+0x300>
    3808:	2301      	movs	r3, #1
    380a:	4a19      	ldr	r2, [pc, #100]	; (3870 <_printf_float+0x2fc>)
    380c:	990a      	ldr	r1, [sp, #40]	; 0x28
    380e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3810:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3812:	47b0      	blx	r6
    3814:	1c43      	adds	r3, r0, #1
    3816:	d100      	bne.n	381a <_printf_float+0x2a6>
    3818:	e709      	b.n	362e <_printf_float+0xba>
    381a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    381c:	2b00      	cmp	r3, #0
    381e:	d105      	bne.n	382c <_printf_float+0x2b8>
    3820:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3822:	2b00      	cmp	r3, #0
    3824:	d102      	bne.n	382c <_printf_float+0x2b8>
    3826:	6823      	ldr	r3, [r4, #0]
    3828:	07db      	lsls	r3, r3, #31
    382a:	d5d2      	bpl.n	37d2 <_printf_float+0x25e>
    382c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    382e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3830:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3832:	990a      	ldr	r1, [sp, #40]	; 0x28
    3834:	9809      	ldr	r0, [sp, #36]	; 0x24
    3836:	47b0      	blx	r6
    3838:	2600      	movs	r6, #0
    383a:	1c43      	adds	r3, r0, #1
    383c:	d100      	bne.n	3840 <_printf_float+0x2cc>
    383e:	e6f6      	b.n	362e <_printf_float+0xba>
    3840:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3842:	425b      	negs	r3, r3
    3844:	429e      	cmp	r6, r3
    3846:	db01      	blt.n	384c <_printf_float+0x2d8>
    3848:	9b12      	ldr	r3, [sp, #72]	; 0x48
    384a:	e791      	b.n	3770 <_printf_float+0x1fc>
    384c:	0022      	movs	r2, r4
    384e:	2301      	movs	r3, #1
    3850:	321a      	adds	r2, #26
    3852:	990a      	ldr	r1, [sp, #40]	; 0x28
    3854:	9809      	ldr	r0, [sp, #36]	; 0x24
    3856:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3858:	47b8      	blx	r7
    385a:	1c43      	adds	r3, r0, #1
    385c:	d100      	bne.n	3860 <_printf_float+0x2ec>
    385e:	e6e6      	b.n	362e <_printf_float+0xba>
    3860:	3601      	adds	r6, #1
    3862:	e7ed      	b.n	3840 <_printf_float+0x2cc>
    3864:	7fefffff 	.word	0x7fefffff
    3868:	00008a40 	.word	0x00008a40
    386c:	00008a3c 	.word	0x00008a3c
    3870:	00008a4c 	.word	0x00008a4c
    3874:	6da3      	ldr	r3, [r4, #88]	; 0x58
    3876:	9e12      	ldr	r6, [sp, #72]	; 0x48
    3878:	429e      	cmp	r6, r3
    387a:	dd00      	ble.n	387e <_printf_float+0x30a>
    387c:	001e      	movs	r6, r3
    387e:	2e00      	cmp	r6, #0
    3880:	dc35      	bgt.n	38ee <_printf_float+0x37a>
    3882:	2300      	movs	r3, #0
    3884:	930c      	str	r3, [sp, #48]	; 0x30
    3886:	43f3      	mvns	r3, r6
    3888:	17db      	asrs	r3, r3, #31
    388a:	930f      	str	r3, [sp, #60]	; 0x3c
    388c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    388e:	6da7      	ldr	r7, [r4, #88]	; 0x58
    3890:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3892:	4033      	ands	r3, r6
    3894:	1afb      	subs	r3, r7, r3
    3896:	429a      	cmp	r2, r3
    3898:	db32      	blt.n	3900 <_printf_float+0x38c>
    389a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    389c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    389e:	4293      	cmp	r3, r2
    38a0:	db3c      	blt.n	391c <_printf_float+0x3a8>
    38a2:	6823      	ldr	r3, [r4, #0]
    38a4:	07db      	lsls	r3, r3, #31
    38a6:	d439      	bmi.n	391c <_printf_float+0x3a8>
    38a8:	9e12      	ldr	r6, [sp, #72]	; 0x48
    38aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
    38ac:	1bf3      	subs	r3, r6, r7
    38ae:	1ab6      	subs	r6, r6, r2
    38b0:	429e      	cmp	r6, r3
    38b2:	dd00      	ble.n	38b6 <_printf_float+0x342>
    38b4:	001e      	movs	r6, r3
    38b6:	2e00      	cmp	r6, #0
    38b8:	dc39      	bgt.n	392e <_printf_float+0x3ba>
    38ba:	43f7      	mvns	r7, r6
    38bc:	2500      	movs	r5, #0
    38be:	17fb      	asrs	r3, r7, #31
    38c0:	930c      	str	r3, [sp, #48]	; 0x30
    38c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    38c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    38c6:	990c      	ldr	r1, [sp, #48]	; 0x30
    38c8:	1a9b      	subs	r3, r3, r2
    38ca:	0032      	movs	r2, r6
    38cc:	400a      	ands	r2, r1
    38ce:	1a9b      	subs	r3, r3, r2
    38d0:	429d      	cmp	r5, r3
    38d2:	db00      	blt.n	38d6 <_printf_float+0x362>
    38d4:	e77d      	b.n	37d2 <_printf_float+0x25e>
    38d6:	0022      	movs	r2, r4
    38d8:	2301      	movs	r3, #1
    38da:	321a      	adds	r2, #26
    38dc:	990a      	ldr	r1, [sp, #40]	; 0x28
    38de:	9809      	ldr	r0, [sp, #36]	; 0x24
    38e0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    38e2:	47b8      	blx	r7
    38e4:	1c43      	adds	r3, r0, #1
    38e6:	d100      	bne.n	38ea <_printf_float+0x376>
    38e8:	e6a1      	b.n	362e <_printf_float+0xba>
    38ea:	3501      	adds	r5, #1
    38ec:	e7e9      	b.n	38c2 <_printf_float+0x34e>
    38ee:	0033      	movs	r3, r6
    38f0:	002a      	movs	r2, r5
    38f2:	990a      	ldr	r1, [sp, #40]	; 0x28
    38f4:	9809      	ldr	r0, [sp, #36]	; 0x24
    38f6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    38f8:	47b8      	blx	r7
    38fa:	1c43      	adds	r3, r0, #1
    38fc:	d1c1      	bne.n	3882 <_printf_float+0x30e>
    38fe:	e696      	b.n	362e <_printf_float+0xba>
    3900:	0022      	movs	r2, r4
    3902:	2301      	movs	r3, #1
    3904:	321a      	adds	r2, #26
    3906:	990a      	ldr	r1, [sp, #40]	; 0x28
    3908:	9809      	ldr	r0, [sp, #36]	; 0x24
    390a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    390c:	47b8      	blx	r7
    390e:	1c43      	adds	r3, r0, #1
    3910:	d100      	bne.n	3914 <_printf_float+0x3a0>
    3912:	e68c      	b.n	362e <_printf_float+0xba>
    3914:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3916:	3301      	adds	r3, #1
    3918:	930c      	str	r3, [sp, #48]	; 0x30
    391a:	e7b7      	b.n	388c <_printf_float+0x318>
    391c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    391e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3920:	990a      	ldr	r1, [sp, #40]	; 0x28
    3922:	9809      	ldr	r0, [sp, #36]	; 0x24
    3924:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3926:	47b0      	blx	r6
    3928:	1c43      	adds	r3, r0, #1
    392a:	d1bd      	bne.n	38a8 <_printf_float+0x334>
    392c:	e67f      	b.n	362e <_printf_float+0xba>
    392e:	19ea      	adds	r2, r5, r7
    3930:	0033      	movs	r3, r6
    3932:	990a      	ldr	r1, [sp, #40]	; 0x28
    3934:	9809      	ldr	r0, [sp, #36]	; 0x24
    3936:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3938:	47a8      	blx	r5
    393a:	1c43      	adds	r3, r0, #1
    393c:	d1bd      	bne.n	38ba <_printf_float+0x346>
    393e:	e676      	b.n	362e <_printf_float+0xba>
    3940:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3942:	2b01      	cmp	r3, #1
    3944:	dc02      	bgt.n	394c <_printf_float+0x3d8>
    3946:	2301      	movs	r3, #1
    3948:	421a      	tst	r2, r3
    394a:	d038      	beq.n	39be <_printf_float+0x44a>
    394c:	2301      	movs	r3, #1
    394e:	002a      	movs	r2, r5
    3950:	990a      	ldr	r1, [sp, #40]	; 0x28
    3952:	9809      	ldr	r0, [sp, #36]	; 0x24
    3954:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3956:	47b8      	blx	r7
    3958:	1c43      	adds	r3, r0, #1
    395a:	d100      	bne.n	395e <_printf_float+0x3ea>
    395c:	e667      	b.n	362e <_printf_float+0xba>
    395e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3960:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3962:	990a      	ldr	r1, [sp, #40]	; 0x28
    3964:	9809      	ldr	r0, [sp, #36]	; 0x24
    3966:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3968:	47b8      	blx	r7
    396a:	1c43      	adds	r3, r0, #1
    396c:	d100      	bne.n	3970 <_printf_float+0x3fc>
    396e:	e65e      	b.n	362e <_printf_float+0xba>
    3970:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    3972:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    3974:	2200      	movs	r2, #0
    3976:	2300      	movs	r3, #0
    3978:	f002 fbbc 	bl	60f4 <__aeabi_dcmpeq>
    397c:	2800      	cmp	r0, #0
    397e:	d008      	beq.n	3992 <_printf_float+0x41e>
    3980:	2500      	movs	r5, #0
    3982:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3984:	3b01      	subs	r3, #1
    3986:	429d      	cmp	r5, r3
    3988:	db0d      	blt.n	39a6 <_printf_float+0x432>
    398a:	0022      	movs	r2, r4
    398c:	0033      	movs	r3, r6
    398e:	3250      	adds	r2, #80	; 0x50
    3990:	e6ef      	b.n	3772 <_printf_float+0x1fe>
    3992:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3994:	1c6a      	adds	r2, r5, #1
    3996:	3b01      	subs	r3, #1
    3998:	990a      	ldr	r1, [sp, #40]	; 0x28
    399a:	9809      	ldr	r0, [sp, #36]	; 0x24
    399c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    399e:	47a8      	blx	r5
    39a0:	1c43      	adds	r3, r0, #1
    39a2:	d1f2      	bne.n	398a <_printf_float+0x416>
    39a4:	e643      	b.n	362e <_printf_float+0xba>
    39a6:	0022      	movs	r2, r4
    39a8:	2301      	movs	r3, #1
    39aa:	321a      	adds	r2, #26
    39ac:	990a      	ldr	r1, [sp, #40]	; 0x28
    39ae:	9809      	ldr	r0, [sp, #36]	; 0x24
    39b0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    39b2:	47b8      	blx	r7
    39b4:	1c43      	adds	r3, r0, #1
    39b6:	d100      	bne.n	39ba <_printf_float+0x446>
    39b8:	e639      	b.n	362e <_printf_float+0xba>
    39ba:	3501      	adds	r5, #1
    39bc:	e7e1      	b.n	3982 <_printf_float+0x40e>
    39be:	002a      	movs	r2, r5
    39c0:	e7ea      	b.n	3998 <_printf_float+0x424>
    39c2:	0022      	movs	r2, r4
    39c4:	2301      	movs	r3, #1
    39c6:	3219      	adds	r2, #25
    39c8:	990a      	ldr	r1, [sp, #40]	; 0x28
    39ca:	9809      	ldr	r0, [sp, #36]	; 0x24
    39cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    39ce:	47b0      	blx	r6
    39d0:	1c43      	adds	r3, r0, #1
    39d2:	d100      	bne.n	39d6 <_printf_float+0x462>
    39d4:	e62b      	b.n	362e <_printf_float+0xba>
    39d6:	3501      	adds	r5, #1
    39d8:	68e3      	ldr	r3, [r4, #12]
    39da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    39dc:	1a9b      	subs	r3, r3, r2
    39de:	429d      	cmp	r5, r3
    39e0:	dbef      	blt.n	39c2 <_printf_float+0x44e>
    39e2:	e6fb      	b.n	37dc <_printf_float+0x268>
    39e4:	0032      	movs	r2, r6
    39e6:	002b      	movs	r3, r5
    39e8:	0030      	movs	r0, r6
    39ea:	0029      	movs	r1, r5
    39ec:	f004 fde0 	bl	85b0 <__aeabi_dcmpun>
    39f0:	2800      	cmp	r0, #0
    39f2:	d100      	bne.n	39f6 <_printf_float+0x482>
    39f4:	e621      	b.n	363a <_printf_float+0xc6>
    39f6:	4d03      	ldr	r5, [pc, #12]	; (3a04 <_printf_float+0x490>)
    39f8:	2f47      	cmp	r7, #71	; 0x47
    39fa:	d900      	bls.n	39fe <_printf_float+0x48a>
    39fc:	e605      	b.n	360a <_printf_float+0x96>
    39fe:	4d02      	ldr	r5, [pc, #8]	; (3a08 <_printf_float+0x494>)
    3a00:	e603      	b.n	360a <_printf_float+0x96>
    3a02:	46c0      	nop			; (mov r8, r8)
    3a04:	00008a48 	.word	0x00008a48
    3a08:	00008a44 	.word	0x00008a44

00003a0c <_printf_common>:
    3a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3a0e:	0015      	movs	r5, r2
    3a10:	9301      	str	r3, [sp, #4]
    3a12:	688a      	ldr	r2, [r1, #8]
    3a14:	690b      	ldr	r3, [r1, #16]
    3a16:	9000      	str	r0, [sp, #0]
    3a18:	000c      	movs	r4, r1
    3a1a:	4293      	cmp	r3, r2
    3a1c:	da00      	bge.n	3a20 <_printf_common+0x14>
    3a1e:	0013      	movs	r3, r2
    3a20:	0022      	movs	r2, r4
    3a22:	602b      	str	r3, [r5, #0]
    3a24:	3243      	adds	r2, #67	; 0x43
    3a26:	7812      	ldrb	r2, [r2, #0]
    3a28:	2a00      	cmp	r2, #0
    3a2a:	d001      	beq.n	3a30 <_printf_common+0x24>
    3a2c:	3301      	adds	r3, #1
    3a2e:	602b      	str	r3, [r5, #0]
    3a30:	6823      	ldr	r3, [r4, #0]
    3a32:	069b      	lsls	r3, r3, #26
    3a34:	d502      	bpl.n	3a3c <_printf_common+0x30>
    3a36:	682b      	ldr	r3, [r5, #0]
    3a38:	3302      	adds	r3, #2
    3a3a:	602b      	str	r3, [r5, #0]
    3a3c:	2706      	movs	r7, #6
    3a3e:	6823      	ldr	r3, [r4, #0]
    3a40:	401f      	ands	r7, r3
    3a42:	d027      	beq.n	3a94 <_printf_common+0x88>
    3a44:	0023      	movs	r3, r4
    3a46:	3343      	adds	r3, #67	; 0x43
    3a48:	781b      	ldrb	r3, [r3, #0]
    3a4a:	1e5a      	subs	r2, r3, #1
    3a4c:	4193      	sbcs	r3, r2
    3a4e:	6822      	ldr	r2, [r4, #0]
    3a50:	0692      	lsls	r2, r2, #26
    3a52:	d430      	bmi.n	3ab6 <_printf_common+0xaa>
    3a54:	0022      	movs	r2, r4
    3a56:	9901      	ldr	r1, [sp, #4]
    3a58:	3243      	adds	r2, #67	; 0x43
    3a5a:	9800      	ldr	r0, [sp, #0]
    3a5c:	9e08      	ldr	r6, [sp, #32]
    3a5e:	47b0      	blx	r6
    3a60:	1c43      	adds	r3, r0, #1
    3a62:	d025      	beq.n	3ab0 <_printf_common+0xa4>
    3a64:	2306      	movs	r3, #6
    3a66:	6820      	ldr	r0, [r4, #0]
    3a68:	682a      	ldr	r2, [r5, #0]
    3a6a:	68e1      	ldr	r1, [r4, #12]
    3a6c:	4003      	ands	r3, r0
    3a6e:	2500      	movs	r5, #0
    3a70:	2b04      	cmp	r3, #4
    3a72:	d103      	bne.n	3a7c <_printf_common+0x70>
    3a74:	1a8d      	subs	r5, r1, r2
    3a76:	43eb      	mvns	r3, r5
    3a78:	17db      	asrs	r3, r3, #31
    3a7a:	401d      	ands	r5, r3
    3a7c:	68a3      	ldr	r3, [r4, #8]
    3a7e:	6922      	ldr	r2, [r4, #16]
    3a80:	4293      	cmp	r3, r2
    3a82:	dd01      	ble.n	3a88 <_printf_common+0x7c>
    3a84:	1a9b      	subs	r3, r3, r2
    3a86:	18ed      	adds	r5, r5, r3
    3a88:	2700      	movs	r7, #0
    3a8a:	42bd      	cmp	r5, r7
    3a8c:	d120      	bne.n	3ad0 <_printf_common+0xc4>
    3a8e:	2000      	movs	r0, #0
    3a90:	e010      	b.n	3ab4 <_printf_common+0xa8>
    3a92:	3701      	adds	r7, #1
    3a94:	68e3      	ldr	r3, [r4, #12]
    3a96:	682a      	ldr	r2, [r5, #0]
    3a98:	1a9b      	subs	r3, r3, r2
    3a9a:	429f      	cmp	r7, r3
    3a9c:	dad2      	bge.n	3a44 <_printf_common+0x38>
    3a9e:	0022      	movs	r2, r4
    3aa0:	2301      	movs	r3, #1
    3aa2:	3219      	adds	r2, #25
    3aa4:	9901      	ldr	r1, [sp, #4]
    3aa6:	9800      	ldr	r0, [sp, #0]
    3aa8:	9e08      	ldr	r6, [sp, #32]
    3aaa:	47b0      	blx	r6
    3aac:	1c43      	adds	r3, r0, #1
    3aae:	d1f0      	bne.n	3a92 <_printf_common+0x86>
    3ab0:	2001      	movs	r0, #1
    3ab2:	4240      	negs	r0, r0
    3ab4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3ab6:	2030      	movs	r0, #48	; 0x30
    3ab8:	18e1      	adds	r1, r4, r3
    3aba:	3143      	adds	r1, #67	; 0x43
    3abc:	7008      	strb	r0, [r1, #0]
    3abe:	0021      	movs	r1, r4
    3ac0:	1c5a      	adds	r2, r3, #1
    3ac2:	3145      	adds	r1, #69	; 0x45
    3ac4:	7809      	ldrb	r1, [r1, #0]
    3ac6:	18a2      	adds	r2, r4, r2
    3ac8:	3243      	adds	r2, #67	; 0x43
    3aca:	3302      	adds	r3, #2
    3acc:	7011      	strb	r1, [r2, #0]
    3ace:	e7c1      	b.n	3a54 <_printf_common+0x48>
    3ad0:	0022      	movs	r2, r4
    3ad2:	2301      	movs	r3, #1
    3ad4:	321a      	adds	r2, #26
    3ad6:	9901      	ldr	r1, [sp, #4]
    3ad8:	9800      	ldr	r0, [sp, #0]
    3ada:	9e08      	ldr	r6, [sp, #32]
    3adc:	47b0      	blx	r6
    3ade:	1c43      	adds	r3, r0, #1
    3ae0:	d0e6      	beq.n	3ab0 <_printf_common+0xa4>
    3ae2:	3701      	adds	r7, #1
    3ae4:	e7d1      	b.n	3a8a <_printf_common+0x7e>
	...

00003ae8 <_printf_i>:
    3ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aea:	b08b      	sub	sp, #44	; 0x2c
    3aec:	9206      	str	r2, [sp, #24]
    3aee:	000a      	movs	r2, r1
    3af0:	3243      	adds	r2, #67	; 0x43
    3af2:	9307      	str	r3, [sp, #28]
    3af4:	9005      	str	r0, [sp, #20]
    3af6:	9204      	str	r2, [sp, #16]
    3af8:	7e0a      	ldrb	r2, [r1, #24]
    3afa:	000c      	movs	r4, r1
    3afc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3afe:	2a6e      	cmp	r2, #110	; 0x6e
    3b00:	d100      	bne.n	3b04 <_printf_i+0x1c>
    3b02:	e08f      	b.n	3c24 <_printf_i+0x13c>
    3b04:	d817      	bhi.n	3b36 <_printf_i+0x4e>
    3b06:	2a63      	cmp	r2, #99	; 0x63
    3b08:	d02c      	beq.n	3b64 <_printf_i+0x7c>
    3b0a:	d808      	bhi.n	3b1e <_printf_i+0x36>
    3b0c:	2a00      	cmp	r2, #0
    3b0e:	d100      	bne.n	3b12 <_printf_i+0x2a>
    3b10:	e099      	b.n	3c46 <_printf_i+0x15e>
    3b12:	2a58      	cmp	r2, #88	; 0x58
    3b14:	d054      	beq.n	3bc0 <_printf_i+0xd8>
    3b16:	0026      	movs	r6, r4
    3b18:	3642      	adds	r6, #66	; 0x42
    3b1a:	7032      	strb	r2, [r6, #0]
    3b1c:	e029      	b.n	3b72 <_printf_i+0x8a>
    3b1e:	2a64      	cmp	r2, #100	; 0x64
    3b20:	d001      	beq.n	3b26 <_printf_i+0x3e>
    3b22:	2a69      	cmp	r2, #105	; 0x69
    3b24:	d1f7      	bne.n	3b16 <_printf_i+0x2e>
    3b26:	6821      	ldr	r1, [r4, #0]
    3b28:	681a      	ldr	r2, [r3, #0]
    3b2a:	0608      	lsls	r0, r1, #24
    3b2c:	d523      	bpl.n	3b76 <_printf_i+0x8e>
    3b2e:	1d11      	adds	r1, r2, #4
    3b30:	6019      	str	r1, [r3, #0]
    3b32:	6815      	ldr	r5, [r2, #0]
    3b34:	e025      	b.n	3b82 <_printf_i+0x9a>
    3b36:	2a73      	cmp	r2, #115	; 0x73
    3b38:	d100      	bne.n	3b3c <_printf_i+0x54>
    3b3a:	e088      	b.n	3c4e <_printf_i+0x166>
    3b3c:	d808      	bhi.n	3b50 <_printf_i+0x68>
    3b3e:	2a6f      	cmp	r2, #111	; 0x6f
    3b40:	d029      	beq.n	3b96 <_printf_i+0xae>
    3b42:	2a70      	cmp	r2, #112	; 0x70
    3b44:	d1e7      	bne.n	3b16 <_printf_i+0x2e>
    3b46:	2220      	movs	r2, #32
    3b48:	6809      	ldr	r1, [r1, #0]
    3b4a:	430a      	orrs	r2, r1
    3b4c:	6022      	str	r2, [r4, #0]
    3b4e:	e003      	b.n	3b58 <_printf_i+0x70>
    3b50:	2a75      	cmp	r2, #117	; 0x75
    3b52:	d020      	beq.n	3b96 <_printf_i+0xae>
    3b54:	2a78      	cmp	r2, #120	; 0x78
    3b56:	d1de      	bne.n	3b16 <_printf_i+0x2e>
    3b58:	0022      	movs	r2, r4
    3b5a:	2178      	movs	r1, #120	; 0x78
    3b5c:	3245      	adds	r2, #69	; 0x45
    3b5e:	7011      	strb	r1, [r2, #0]
    3b60:	4a6c      	ldr	r2, [pc, #432]	; (3d14 <_printf_i+0x22c>)
    3b62:	e030      	b.n	3bc6 <_printf_i+0xde>
    3b64:	000e      	movs	r6, r1
    3b66:	681a      	ldr	r2, [r3, #0]
    3b68:	3642      	adds	r6, #66	; 0x42
    3b6a:	1d11      	adds	r1, r2, #4
    3b6c:	6019      	str	r1, [r3, #0]
    3b6e:	6813      	ldr	r3, [r2, #0]
    3b70:	7033      	strb	r3, [r6, #0]
    3b72:	2301      	movs	r3, #1
    3b74:	e079      	b.n	3c6a <_printf_i+0x182>
    3b76:	0649      	lsls	r1, r1, #25
    3b78:	d5d9      	bpl.n	3b2e <_printf_i+0x46>
    3b7a:	1d11      	adds	r1, r2, #4
    3b7c:	6019      	str	r1, [r3, #0]
    3b7e:	2300      	movs	r3, #0
    3b80:	5ed5      	ldrsh	r5, [r2, r3]
    3b82:	2d00      	cmp	r5, #0
    3b84:	da03      	bge.n	3b8e <_printf_i+0xa6>
    3b86:	232d      	movs	r3, #45	; 0x2d
    3b88:	9a04      	ldr	r2, [sp, #16]
    3b8a:	426d      	negs	r5, r5
    3b8c:	7013      	strb	r3, [r2, #0]
    3b8e:	4b62      	ldr	r3, [pc, #392]	; (3d18 <_printf_i+0x230>)
    3b90:	270a      	movs	r7, #10
    3b92:	9303      	str	r3, [sp, #12]
    3b94:	e02f      	b.n	3bf6 <_printf_i+0x10e>
    3b96:	6820      	ldr	r0, [r4, #0]
    3b98:	6819      	ldr	r1, [r3, #0]
    3b9a:	0605      	lsls	r5, r0, #24
    3b9c:	d503      	bpl.n	3ba6 <_printf_i+0xbe>
    3b9e:	1d08      	adds	r0, r1, #4
    3ba0:	6018      	str	r0, [r3, #0]
    3ba2:	680d      	ldr	r5, [r1, #0]
    3ba4:	e005      	b.n	3bb2 <_printf_i+0xca>
    3ba6:	0640      	lsls	r0, r0, #25
    3ba8:	d5f9      	bpl.n	3b9e <_printf_i+0xb6>
    3baa:	680d      	ldr	r5, [r1, #0]
    3bac:	1d08      	adds	r0, r1, #4
    3bae:	6018      	str	r0, [r3, #0]
    3bb0:	b2ad      	uxth	r5, r5
    3bb2:	4b59      	ldr	r3, [pc, #356]	; (3d18 <_printf_i+0x230>)
    3bb4:	2708      	movs	r7, #8
    3bb6:	9303      	str	r3, [sp, #12]
    3bb8:	2a6f      	cmp	r2, #111	; 0x6f
    3bba:	d018      	beq.n	3bee <_printf_i+0x106>
    3bbc:	270a      	movs	r7, #10
    3bbe:	e016      	b.n	3bee <_printf_i+0x106>
    3bc0:	3145      	adds	r1, #69	; 0x45
    3bc2:	700a      	strb	r2, [r1, #0]
    3bc4:	4a54      	ldr	r2, [pc, #336]	; (3d18 <_printf_i+0x230>)
    3bc6:	9203      	str	r2, [sp, #12]
    3bc8:	681a      	ldr	r2, [r3, #0]
    3bca:	6821      	ldr	r1, [r4, #0]
    3bcc:	1d10      	adds	r0, r2, #4
    3bce:	6018      	str	r0, [r3, #0]
    3bd0:	6815      	ldr	r5, [r2, #0]
    3bd2:	0608      	lsls	r0, r1, #24
    3bd4:	d522      	bpl.n	3c1c <_printf_i+0x134>
    3bd6:	07cb      	lsls	r3, r1, #31
    3bd8:	d502      	bpl.n	3be0 <_printf_i+0xf8>
    3bda:	2320      	movs	r3, #32
    3bdc:	4319      	orrs	r1, r3
    3bde:	6021      	str	r1, [r4, #0]
    3be0:	2710      	movs	r7, #16
    3be2:	2d00      	cmp	r5, #0
    3be4:	d103      	bne.n	3bee <_printf_i+0x106>
    3be6:	2320      	movs	r3, #32
    3be8:	6822      	ldr	r2, [r4, #0]
    3bea:	439a      	bics	r2, r3
    3bec:	6022      	str	r2, [r4, #0]
    3bee:	0023      	movs	r3, r4
    3bf0:	2200      	movs	r2, #0
    3bf2:	3343      	adds	r3, #67	; 0x43
    3bf4:	701a      	strb	r2, [r3, #0]
    3bf6:	6863      	ldr	r3, [r4, #4]
    3bf8:	60a3      	str	r3, [r4, #8]
    3bfa:	2b00      	cmp	r3, #0
    3bfc:	db5c      	blt.n	3cb8 <_printf_i+0x1d0>
    3bfe:	2204      	movs	r2, #4
    3c00:	6821      	ldr	r1, [r4, #0]
    3c02:	4391      	bics	r1, r2
    3c04:	6021      	str	r1, [r4, #0]
    3c06:	2d00      	cmp	r5, #0
    3c08:	d158      	bne.n	3cbc <_printf_i+0x1d4>
    3c0a:	9e04      	ldr	r6, [sp, #16]
    3c0c:	2b00      	cmp	r3, #0
    3c0e:	d064      	beq.n	3cda <_printf_i+0x1f2>
    3c10:	0026      	movs	r6, r4
    3c12:	9b03      	ldr	r3, [sp, #12]
    3c14:	3642      	adds	r6, #66	; 0x42
    3c16:	781b      	ldrb	r3, [r3, #0]
    3c18:	7033      	strb	r3, [r6, #0]
    3c1a:	e05e      	b.n	3cda <_printf_i+0x1f2>
    3c1c:	0648      	lsls	r0, r1, #25
    3c1e:	d5da      	bpl.n	3bd6 <_printf_i+0xee>
    3c20:	b2ad      	uxth	r5, r5
    3c22:	e7d8      	b.n	3bd6 <_printf_i+0xee>
    3c24:	6809      	ldr	r1, [r1, #0]
    3c26:	681a      	ldr	r2, [r3, #0]
    3c28:	0608      	lsls	r0, r1, #24
    3c2a:	d505      	bpl.n	3c38 <_printf_i+0x150>
    3c2c:	1d11      	adds	r1, r2, #4
    3c2e:	6019      	str	r1, [r3, #0]
    3c30:	6813      	ldr	r3, [r2, #0]
    3c32:	6962      	ldr	r2, [r4, #20]
    3c34:	601a      	str	r2, [r3, #0]
    3c36:	e006      	b.n	3c46 <_printf_i+0x15e>
    3c38:	0649      	lsls	r1, r1, #25
    3c3a:	d5f7      	bpl.n	3c2c <_printf_i+0x144>
    3c3c:	1d11      	adds	r1, r2, #4
    3c3e:	6019      	str	r1, [r3, #0]
    3c40:	6813      	ldr	r3, [r2, #0]
    3c42:	8aa2      	ldrh	r2, [r4, #20]
    3c44:	801a      	strh	r2, [r3, #0]
    3c46:	2300      	movs	r3, #0
    3c48:	9e04      	ldr	r6, [sp, #16]
    3c4a:	6123      	str	r3, [r4, #16]
    3c4c:	e054      	b.n	3cf8 <_printf_i+0x210>
    3c4e:	681a      	ldr	r2, [r3, #0]
    3c50:	1d11      	adds	r1, r2, #4
    3c52:	6019      	str	r1, [r3, #0]
    3c54:	6816      	ldr	r6, [r2, #0]
    3c56:	2100      	movs	r1, #0
    3c58:	6862      	ldr	r2, [r4, #4]
    3c5a:	0030      	movs	r0, r6
    3c5c:	f001 fae2 	bl	5224 <memchr>
    3c60:	2800      	cmp	r0, #0
    3c62:	d001      	beq.n	3c68 <_printf_i+0x180>
    3c64:	1b80      	subs	r0, r0, r6
    3c66:	6060      	str	r0, [r4, #4]
    3c68:	6863      	ldr	r3, [r4, #4]
    3c6a:	6123      	str	r3, [r4, #16]
    3c6c:	2300      	movs	r3, #0
    3c6e:	9a04      	ldr	r2, [sp, #16]
    3c70:	7013      	strb	r3, [r2, #0]
    3c72:	e041      	b.n	3cf8 <_printf_i+0x210>
    3c74:	6923      	ldr	r3, [r4, #16]
    3c76:	0032      	movs	r2, r6
    3c78:	9906      	ldr	r1, [sp, #24]
    3c7a:	9805      	ldr	r0, [sp, #20]
    3c7c:	9d07      	ldr	r5, [sp, #28]
    3c7e:	47a8      	blx	r5
    3c80:	1c43      	adds	r3, r0, #1
    3c82:	d043      	beq.n	3d0c <_printf_i+0x224>
    3c84:	6823      	ldr	r3, [r4, #0]
    3c86:	2500      	movs	r5, #0
    3c88:	079b      	lsls	r3, r3, #30
    3c8a:	d40f      	bmi.n	3cac <_printf_i+0x1c4>
    3c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3c8e:	68e0      	ldr	r0, [r4, #12]
    3c90:	4298      	cmp	r0, r3
    3c92:	da3d      	bge.n	3d10 <_printf_i+0x228>
    3c94:	0018      	movs	r0, r3
    3c96:	e03b      	b.n	3d10 <_printf_i+0x228>
    3c98:	0022      	movs	r2, r4
    3c9a:	2301      	movs	r3, #1
    3c9c:	3219      	adds	r2, #25
    3c9e:	9906      	ldr	r1, [sp, #24]
    3ca0:	9805      	ldr	r0, [sp, #20]
    3ca2:	9e07      	ldr	r6, [sp, #28]
    3ca4:	47b0      	blx	r6
    3ca6:	1c43      	adds	r3, r0, #1
    3ca8:	d030      	beq.n	3d0c <_printf_i+0x224>
    3caa:	3501      	adds	r5, #1
    3cac:	68e3      	ldr	r3, [r4, #12]
    3cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3cb0:	1a9b      	subs	r3, r3, r2
    3cb2:	429d      	cmp	r5, r3
    3cb4:	dbf0      	blt.n	3c98 <_printf_i+0x1b0>
    3cb6:	e7e9      	b.n	3c8c <_printf_i+0x1a4>
    3cb8:	2d00      	cmp	r5, #0
    3cba:	d0a9      	beq.n	3c10 <_printf_i+0x128>
    3cbc:	9e04      	ldr	r6, [sp, #16]
    3cbe:	0028      	movs	r0, r5
    3cc0:	0039      	movs	r1, r7
    3cc2:	f002 f917 	bl	5ef4 <__aeabi_uidivmod>
    3cc6:	9b03      	ldr	r3, [sp, #12]
    3cc8:	3e01      	subs	r6, #1
    3cca:	5c5b      	ldrb	r3, [r3, r1]
    3ccc:	0028      	movs	r0, r5
    3cce:	7033      	strb	r3, [r6, #0]
    3cd0:	0039      	movs	r1, r7
    3cd2:	f002 f889 	bl	5de8 <__udivsi3>
    3cd6:	1e05      	subs	r5, r0, #0
    3cd8:	d1f1      	bne.n	3cbe <_printf_i+0x1d6>
    3cda:	2f08      	cmp	r7, #8
    3cdc:	d109      	bne.n	3cf2 <_printf_i+0x20a>
    3cde:	6823      	ldr	r3, [r4, #0]
    3ce0:	07db      	lsls	r3, r3, #31
    3ce2:	d506      	bpl.n	3cf2 <_printf_i+0x20a>
    3ce4:	6863      	ldr	r3, [r4, #4]
    3ce6:	6922      	ldr	r2, [r4, #16]
    3ce8:	4293      	cmp	r3, r2
    3cea:	dc02      	bgt.n	3cf2 <_printf_i+0x20a>
    3cec:	2330      	movs	r3, #48	; 0x30
    3cee:	3e01      	subs	r6, #1
    3cf0:	7033      	strb	r3, [r6, #0]
    3cf2:	9b04      	ldr	r3, [sp, #16]
    3cf4:	1b9b      	subs	r3, r3, r6
    3cf6:	6123      	str	r3, [r4, #16]
    3cf8:	9b07      	ldr	r3, [sp, #28]
    3cfa:	aa09      	add	r2, sp, #36	; 0x24
    3cfc:	9300      	str	r3, [sp, #0]
    3cfe:	0021      	movs	r1, r4
    3d00:	9b06      	ldr	r3, [sp, #24]
    3d02:	9805      	ldr	r0, [sp, #20]
    3d04:	f7ff fe82 	bl	3a0c <_printf_common>
    3d08:	1c43      	adds	r3, r0, #1
    3d0a:	d1b3      	bne.n	3c74 <_printf_i+0x18c>
    3d0c:	2001      	movs	r0, #1
    3d0e:	4240      	negs	r0, r0
    3d10:	b00b      	add	sp, #44	; 0x2c
    3d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d14:	00008a5f 	.word	0x00008a5f
    3d18:	00008a4e 	.word	0x00008a4e

00003d1c <iprintf>:
    3d1c:	b40f      	push	{r0, r1, r2, r3}
    3d1e:	4b0b      	ldr	r3, [pc, #44]	; (3d4c <iprintf+0x30>)
    3d20:	b513      	push	{r0, r1, r4, lr}
    3d22:	681c      	ldr	r4, [r3, #0]
    3d24:	2c00      	cmp	r4, #0
    3d26:	d005      	beq.n	3d34 <iprintf+0x18>
    3d28:	69a3      	ldr	r3, [r4, #24]
    3d2a:	2b00      	cmp	r3, #0
    3d2c:	d102      	bne.n	3d34 <iprintf+0x18>
    3d2e:	0020      	movs	r0, r4
    3d30:	f001 f966 	bl	5000 <__sinit>
    3d34:	ab05      	add	r3, sp, #20
    3d36:	9a04      	ldr	r2, [sp, #16]
    3d38:	68a1      	ldr	r1, [r4, #8]
    3d3a:	0020      	movs	r0, r4
    3d3c:	9301      	str	r3, [sp, #4]
    3d3e:	f001 fe3d 	bl	59bc <_vfiprintf_r>
    3d42:	bc16      	pop	{r1, r2, r4}
    3d44:	bc08      	pop	{r3}
    3d46:	b004      	add	sp, #16
    3d48:	4718      	bx	r3
    3d4a:	46c0      	nop			; (mov r8, r8)
    3d4c:	2000000c 	.word	0x2000000c

00003d50 <_puts_r>:
    3d50:	b570      	push	{r4, r5, r6, lr}
    3d52:	0005      	movs	r5, r0
    3d54:	000e      	movs	r6, r1
    3d56:	2800      	cmp	r0, #0
    3d58:	d004      	beq.n	3d64 <_puts_r+0x14>
    3d5a:	6983      	ldr	r3, [r0, #24]
    3d5c:	2b00      	cmp	r3, #0
    3d5e:	d101      	bne.n	3d64 <_puts_r+0x14>
    3d60:	f001 f94e 	bl	5000 <__sinit>
    3d64:	69ab      	ldr	r3, [r5, #24]
    3d66:	68ac      	ldr	r4, [r5, #8]
    3d68:	2b00      	cmp	r3, #0
    3d6a:	d102      	bne.n	3d72 <_puts_r+0x22>
    3d6c:	0028      	movs	r0, r5
    3d6e:	f001 f947 	bl	5000 <__sinit>
    3d72:	4b24      	ldr	r3, [pc, #144]	; (3e04 <_puts_r+0xb4>)
    3d74:	429c      	cmp	r4, r3
    3d76:	d10f      	bne.n	3d98 <_puts_r+0x48>
    3d78:	686c      	ldr	r4, [r5, #4]
    3d7a:	89a3      	ldrh	r3, [r4, #12]
    3d7c:	071b      	lsls	r3, r3, #28
    3d7e:	d502      	bpl.n	3d86 <_puts_r+0x36>
    3d80:	6923      	ldr	r3, [r4, #16]
    3d82:	2b00      	cmp	r3, #0
    3d84:	d120      	bne.n	3dc8 <_puts_r+0x78>
    3d86:	0021      	movs	r1, r4
    3d88:	0028      	movs	r0, r5
    3d8a:	f000 f95f 	bl	404c <__swsetup_r>
    3d8e:	2800      	cmp	r0, #0
    3d90:	d01a      	beq.n	3dc8 <_puts_r+0x78>
    3d92:	2001      	movs	r0, #1
    3d94:	4240      	negs	r0, r0
    3d96:	bd70      	pop	{r4, r5, r6, pc}
    3d98:	4b1b      	ldr	r3, [pc, #108]	; (3e08 <_puts_r+0xb8>)
    3d9a:	429c      	cmp	r4, r3
    3d9c:	d101      	bne.n	3da2 <_puts_r+0x52>
    3d9e:	68ac      	ldr	r4, [r5, #8]
    3da0:	e7eb      	b.n	3d7a <_puts_r+0x2a>
    3da2:	4b1a      	ldr	r3, [pc, #104]	; (3e0c <_puts_r+0xbc>)
    3da4:	429c      	cmp	r4, r3
    3da6:	d1e8      	bne.n	3d7a <_puts_r+0x2a>
    3da8:	68ec      	ldr	r4, [r5, #12]
    3daa:	e7e6      	b.n	3d7a <_puts_r+0x2a>
    3dac:	3b01      	subs	r3, #1
    3dae:	3601      	adds	r6, #1
    3db0:	60a3      	str	r3, [r4, #8]
    3db2:	2b00      	cmp	r3, #0
    3db4:	da04      	bge.n	3dc0 <_puts_r+0x70>
    3db6:	69a2      	ldr	r2, [r4, #24]
    3db8:	4293      	cmp	r3, r2
    3dba:	db16      	blt.n	3dea <_puts_r+0x9a>
    3dbc:	290a      	cmp	r1, #10
    3dbe:	d014      	beq.n	3dea <_puts_r+0x9a>
    3dc0:	6823      	ldr	r3, [r4, #0]
    3dc2:	1c5a      	adds	r2, r3, #1
    3dc4:	6022      	str	r2, [r4, #0]
    3dc6:	7019      	strb	r1, [r3, #0]
    3dc8:	7831      	ldrb	r1, [r6, #0]
    3dca:	68a3      	ldr	r3, [r4, #8]
    3dcc:	2900      	cmp	r1, #0
    3dce:	d1ed      	bne.n	3dac <_puts_r+0x5c>
    3dd0:	3b01      	subs	r3, #1
    3dd2:	60a3      	str	r3, [r4, #8]
    3dd4:	2b00      	cmp	r3, #0
    3dd6:	da0f      	bge.n	3df8 <_puts_r+0xa8>
    3dd8:	0022      	movs	r2, r4
    3dda:	310a      	adds	r1, #10
    3ddc:	0028      	movs	r0, r5
    3dde:	f000 f8df 	bl	3fa0 <__swbuf_r>
    3de2:	1c43      	adds	r3, r0, #1
    3de4:	d0d5      	beq.n	3d92 <_puts_r+0x42>
    3de6:	200a      	movs	r0, #10
    3de8:	e7d5      	b.n	3d96 <_puts_r+0x46>
    3dea:	0022      	movs	r2, r4
    3dec:	0028      	movs	r0, r5
    3dee:	f000 f8d7 	bl	3fa0 <__swbuf_r>
    3df2:	1c43      	adds	r3, r0, #1
    3df4:	d1e8      	bne.n	3dc8 <_puts_r+0x78>
    3df6:	e7cc      	b.n	3d92 <_puts_r+0x42>
    3df8:	200a      	movs	r0, #10
    3dfa:	6823      	ldr	r3, [r4, #0]
    3dfc:	1c5a      	adds	r2, r3, #1
    3dfe:	6022      	str	r2, [r4, #0]
    3e00:	7018      	strb	r0, [r3, #0]
    3e02:	e7c8      	b.n	3d96 <_puts_r+0x46>
    3e04:	00008aa0 	.word	0x00008aa0
    3e08:	00008ac0 	.word	0x00008ac0
    3e0c:	00008a80 	.word	0x00008a80

00003e10 <puts>:
    3e10:	b510      	push	{r4, lr}
    3e12:	4b03      	ldr	r3, [pc, #12]	; (3e20 <puts+0x10>)
    3e14:	0001      	movs	r1, r0
    3e16:	6818      	ldr	r0, [r3, #0]
    3e18:	f7ff ff9a 	bl	3d50 <_puts_r>
    3e1c:	bd10      	pop	{r4, pc}
    3e1e:	46c0      	nop			; (mov r8, r8)
    3e20:	2000000c 	.word	0x2000000c

00003e24 <setbuf>:
    3e24:	424a      	negs	r2, r1
    3e26:	414a      	adcs	r2, r1
    3e28:	2380      	movs	r3, #128	; 0x80
    3e2a:	b510      	push	{r4, lr}
    3e2c:	0052      	lsls	r2, r2, #1
    3e2e:	00db      	lsls	r3, r3, #3
    3e30:	f000 f802 	bl	3e38 <setvbuf>
    3e34:	bd10      	pop	{r4, pc}
	...

00003e38 <setvbuf>:
    3e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e3a:	001d      	movs	r5, r3
    3e3c:	4b4f      	ldr	r3, [pc, #316]	; (3f7c <setvbuf+0x144>)
    3e3e:	b085      	sub	sp, #20
    3e40:	681e      	ldr	r6, [r3, #0]
    3e42:	0004      	movs	r4, r0
    3e44:	000f      	movs	r7, r1
    3e46:	9200      	str	r2, [sp, #0]
    3e48:	2e00      	cmp	r6, #0
    3e4a:	d005      	beq.n	3e58 <setvbuf+0x20>
    3e4c:	69b3      	ldr	r3, [r6, #24]
    3e4e:	2b00      	cmp	r3, #0
    3e50:	d102      	bne.n	3e58 <setvbuf+0x20>
    3e52:	0030      	movs	r0, r6
    3e54:	f001 f8d4 	bl	5000 <__sinit>
    3e58:	4b49      	ldr	r3, [pc, #292]	; (3f80 <setvbuf+0x148>)
    3e5a:	429c      	cmp	r4, r3
    3e5c:	d150      	bne.n	3f00 <setvbuf+0xc8>
    3e5e:	6874      	ldr	r4, [r6, #4]
    3e60:	9b00      	ldr	r3, [sp, #0]
    3e62:	2b02      	cmp	r3, #2
    3e64:	d005      	beq.n	3e72 <setvbuf+0x3a>
    3e66:	2b01      	cmp	r3, #1
    3e68:	d900      	bls.n	3e6c <setvbuf+0x34>
    3e6a:	e084      	b.n	3f76 <setvbuf+0x13e>
    3e6c:	2d00      	cmp	r5, #0
    3e6e:	da00      	bge.n	3e72 <setvbuf+0x3a>
    3e70:	e081      	b.n	3f76 <setvbuf+0x13e>
    3e72:	0021      	movs	r1, r4
    3e74:	0030      	movs	r0, r6
    3e76:	f001 f855 	bl	4f24 <_fflush_r>
    3e7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3e7c:	2900      	cmp	r1, #0
    3e7e:	d008      	beq.n	3e92 <setvbuf+0x5a>
    3e80:	0023      	movs	r3, r4
    3e82:	3344      	adds	r3, #68	; 0x44
    3e84:	4299      	cmp	r1, r3
    3e86:	d002      	beq.n	3e8e <setvbuf+0x56>
    3e88:	0030      	movs	r0, r6
    3e8a:	f001 fcc7 	bl	581c <_free_r>
    3e8e:	2300      	movs	r3, #0
    3e90:	6363      	str	r3, [r4, #52]	; 0x34
    3e92:	2300      	movs	r3, #0
    3e94:	61a3      	str	r3, [r4, #24]
    3e96:	6063      	str	r3, [r4, #4]
    3e98:	89a3      	ldrh	r3, [r4, #12]
    3e9a:	061b      	lsls	r3, r3, #24
    3e9c:	d503      	bpl.n	3ea6 <setvbuf+0x6e>
    3e9e:	6921      	ldr	r1, [r4, #16]
    3ea0:	0030      	movs	r0, r6
    3ea2:	f001 fcbb 	bl	581c <_free_r>
    3ea6:	89a3      	ldrh	r3, [r4, #12]
    3ea8:	4a36      	ldr	r2, [pc, #216]	; (3f84 <setvbuf+0x14c>)
    3eaa:	4013      	ands	r3, r2
    3eac:	81a3      	strh	r3, [r4, #12]
    3eae:	9b00      	ldr	r3, [sp, #0]
    3eb0:	2b02      	cmp	r3, #2
    3eb2:	d05a      	beq.n	3f6a <setvbuf+0x132>
    3eb4:	ab03      	add	r3, sp, #12
    3eb6:	aa02      	add	r2, sp, #8
    3eb8:	0021      	movs	r1, r4
    3eba:	0030      	movs	r0, r6
    3ebc:	f001 f942 	bl	5144 <__swhatbuf_r>
    3ec0:	89a3      	ldrh	r3, [r4, #12]
    3ec2:	4318      	orrs	r0, r3
    3ec4:	81a0      	strh	r0, [r4, #12]
    3ec6:	2d00      	cmp	r5, #0
    3ec8:	d124      	bne.n	3f14 <setvbuf+0xdc>
    3eca:	9d02      	ldr	r5, [sp, #8]
    3ecc:	0028      	movs	r0, r5
    3ece:	f001 f99f 	bl	5210 <malloc>
    3ed2:	9501      	str	r5, [sp, #4]
    3ed4:	1e07      	subs	r7, r0, #0
    3ed6:	d142      	bne.n	3f5e <setvbuf+0x126>
    3ed8:	9b02      	ldr	r3, [sp, #8]
    3eda:	9301      	str	r3, [sp, #4]
    3edc:	42ab      	cmp	r3, r5
    3ede:	d139      	bne.n	3f54 <setvbuf+0x11c>
    3ee0:	2001      	movs	r0, #1
    3ee2:	4240      	negs	r0, r0
    3ee4:	2302      	movs	r3, #2
    3ee6:	89a2      	ldrh	r2, [r4, #12]
    3ee8:	4313      	orrs	r3, r2
    3eea:	81a3      	strh	r3, [r4, #12]
    3eec:	2300      	movs	r3, #0
    3eee:	60a3      	str	r3, [r4, #8]
    3ef0:	0023      	movs	r3, r4
    3ef2:	3347      	adds	r3, #71	; 0x47
    3ef4:	6023      	str	r3, [r4, #0]
    3ef6:	6123      	str	r3, [r4, #16]
    3ef8:	2301      	movs	r3, #1
    3efa:	6163      	str	r3, [r4, #20]
    3efc:	b005      	add	sp, #20
    3efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f00:	4b21      	ldr	r3, [pc, #132]	; (3f88 <setvbuf+0x150>)
    3f02:	429c      	cmp	r4, r3
    3f04:	d101      	bne.n	3f0a <setvbuf+0xd2>
    3f06:	68b4      	ldr	r4, [r6, #8]
    3f08:	e7aa      	b.n	3e60 <setvbuf+0x28>
    3f0a:	4b20      	ldr	r3, [pc, #128]	; (3f8c <setvbuf+0x154>)
    3f0c:	429c      	cmp	r4, r3
    3f0e:	d1a7      	bne.n	3e60 <setvbuf+0x28>
    3f10:	68f4      	ldr	r4, [r6, #12]
    3f12:	e7a5      	b.n	3e60 <setvbuf+0x28>
    3f14:	2f00      	cmp	r7, #0
    3f16:	d0d9      	beq.n	3ecc <setvbuf+0x94>
    3f18:	69b3      	ldr	r3, [r6, #24]
    3f1a:	2b00      	cmp	r3, #0
    3f1c:	d102      	bne.n	3f24 <setvbuf+0xec>
    3f1e:	0030      	movs	r0, r6
    3f20:	f001 f86e 	bl	5000 <__sinit>
    3f24:	9b00      	ldr	r3, [sp, #0]
    3f26:	2b01      	cmp	r3, #1
    3f28:	d103      	bne.n	3f32 <setvbuf+0xfa>
    3f2a:	89a3      	ldrh	r3, [r4, #12]
    3f2c:	9a00      	ldr	r2, [sp, #0]
    3f2e:	431a      	orrs	r2, r3
    3f30:	81a2      	strh	r2, [r4, #12]
    3f32:	2008      	movs	r0, #8
    3f34:	89a3      	ldrh	r3, [r4, #12]
    3f36:	6027      	str	r7, [r4, #0]
    3f38:	6127      	str	r7, [r4, #16]
    3f3a:	6165      	str	r5, [r4, #20]
    3f3c:	4018      	ands	r0, r3
    3f3e:	d018      	beq.n	3f72 <setvbuf+0x13a>
    3f40:	2001      	movs	r0, #1
    3f42:	4018      	ands	r0, r3
    3f44:	2300      	movs	r3, #0
    3f46:	4298      	cmp	r0, r3
    3f48:	d011      	beq.n	3f6e <setvbuf+0x136>
    3f4a:	426d      	negs	r5, r5
    3f4c:	60a3      	str	r3, [r4, #8]
    3f4e:	61a5      	str	r5, [r4, #24]
    3f50:	0018      	movs	r0, r3
    3f52:	e7d3      	b.n	3efc <setvbuf+0xc4>
    3f54:	9801      	ldr	r0, [sp, #4]
    3f56:	f001 f95b 	bl	5210 <malloc>
    3f5a:	1e07      	subs	r7, r0, #0
    3f5c:	d0c0      	beq.n	3ee0 <setvbuf+0xa8>
    3f5e:	2380      	movs	r3, #128	; 0x80
    3f60:	89a2      	ldrh	r2, [r4, #12]
    3f62:	9d01      	ldr	r5, [sp, #4]
    3f64:	4313      	orrs	r3, r2
    3f66:	81a3      	strh	r3, [r4, #12]
    3f68:	e7d6      	b.n	3f18 <setvbuf+0xe0>
    3f6a:	2000      	movs	r0, #0
    3f6c:	e7ba      	b.n	3ee4 <setvbuf+0xac>
    3f6e:	60a5      	str	r5, [r4, #8]
    3f70:	e7c4      	b.n	3efc <setvbuf+0xc4>
    3f72:	60a0      	str	r0, [r4, #8]
    3f74:	e7c2      	b.n	3efc <setvbuf+0xc4>
    3f76:	2001      	movs	r0, #1
    3f78:	4240      	negs	r0, r0
    3f7a:	e7bf      	b.n	3efc <setvbuf+0xc4>
    3f7c:	2000000c 	.word	0x2000000c
    3f80:	00008aa0 	.word	0x00008aa0
    3f84:	fffff35c 	.word	0xfffff35c
    3f88:	00008ac0 	.word	0x00008ac0
    3f8c:	00008a80 	.word	0x00008a80

00003f90 <strlen>:
    3f90:	2300      	movs	r3, #0
    3f92:	5cc2      	ldrb	r2, [r0, r3]
    3f94:	3301      	adds	r3, #1
    3f96:	2a00      	cmp	r2, #0
    3f98:	d1fb      	bne.n	3f92 <strlen+0x2>
    3f9a:	1e58      	subs	r0, r3, #1
    3f9c:	4770      	bx	lr
	...

00003fa0 <__swbuf_r>:
    3fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fa2:	0005      	movs	r5, r0
    3fa4:	000e      	movs	r6, r1
    3fa6:	0014      	movs	r4, r2
    3fa8:	2800      	cmp	r0, #0
    3faa:	d004      	beq.n	3fb6 <__swbuf_r+0x16>
    3fac:	6983      	ldr	r3, [r0, #24]
    3fae:	2b00      	cmp	r3, #0
    3fb0:	d101      	bne.n	3fb6 <__swbuf_r+0x16>
    3fb2:	f001 f825 	bl	5000 <__sinit>
    3fb6:	4b22      	ldr	r3, [pc, #136]	; (4040 <__swbuf_r+0xa0>)
    3fb8:	429c      	cmp	r4, r3
    3fba:	d12d      	bne.n	4018 <__swbuf_r+0x78>
    3fbc:	686c      	ldr	r4, [r5, #4]
    3fbe:	69a3      	ldr	r3, [r4, #24]
    3fc0:	60a3      	str	r3, [r4, #8]
    3fc2:	89a3      	ldrh	r3, [r4, #12]
    3fc4:	071b      	lsls	r3, r3, #28
    3fc6:	d531      	bpl.n	402c <__swbuf_r+0x8c>
    3fc8:	6923      	ldr	r3, [r4, #16]
    3fca:	2b00      	cmp	r3, #0
    3fcc:	d02e      	beq.n	402c <__swbuf_r+0x8c>
    3fce:	6823      	ldr	r3, [r4, #0]
    3fd0:	6922      	ldr	r2, [r4, #16]
    3fd2:	b2f7      	uxtb	r7, r6
    3fd4:	1a98      	subs	r0, r3, r2
    3fd6:	6963      	ldr	r3, [r4, #20]
    3fd8:	b2f6      	uxtb	r6, r6
    3fda:	4298      	cmp	r0, r3
    3fdc:	db05      	blt.n	3fea <__swbuf_r+0x4a>
    3fde:	0021      	movs	r1, r4
    3fe0:	0028      	movs	r0, r5
    3fe2:	f000 ff9f 	bl	4f24 <_fflush_r>
    3fe6:	2800      	cmp	r0, #0
    3fe8:	d126      	bne.n	4038 <__swbuf_r+0x98>
    3fea:	68a3      	ldr	r3, [r4, #8]
    3fec:	3001      	adds	r0, #1
    3fee:	3b01      	subs	r3, #1
    3ff0:	60a3      	str	r3, [r4, #8]
    3ff2:	6823      	ldr	r3, [r4, #0]
    3ff4:	1c5a      	adds	r2, r3, #1
    3ff6:	6022      	str	r2, [r4, #0]
    3ff8:	701f      	strb	r7, [r3, #0]
    3ffa:	6963      	ldr	r3, [r4, #20]
    3ffc:	4298      	cmp	r0, r3
    3ffe:	d004      	beq.n	400a <__swbuf_r+0x6a>
    4000:	89a3      	ldrh	r3, [r4, #12]
    4002:	07db      	lsls	r3, r3, #31
    4004:	d51a      	bpl.n	403c <__swbuf_r+0x9c>
    4006:	2e0a      	cmp	r6, #10
    4008:	d118      	bne.n	403c <__swbuf_r+0x9c>
    400a:	0021      	movs	r1, r4
    400c:	0028      	movs	r0, r5
    400e:	f000 ff89 	bl	4f24 <_fflush_r>
    4012:	2800      	cmp	r0, #0
    4014:	d012      	beq.n	403c <__swbuf_r+0x9c>
    4016:	e00f      	b.n	4038 <__swbuf_r+0x98>
    4018:	4b0a      	ldr	r3, [pc, #40]	; (4044 <__swbuf_r+0xa4>)
    401a:	429c      	cmp	r4, r3
    401c:	d101      	bne.n	4022 <__swbuf_r+0x82>
    401e:	68ac      	ldr	r4, [r5, #8]
    4020:	e7cd      	b.n	3fbe <__swbuf_r+0x1e>
    4022:	4b09      	ldr	r3, [pc, #36]	; (4048 <__swbuf_r+0xa8>)
    4024:	429c      	cmp	r4, r3
    4026:	d1ca      	bne.n	3fbe <__swbuf_r+0x1e>
    4028:	68ec      	ldr	r4, [r5, #12]
    402a:	e7c8      	b.n	3fbe <__swbuf_r+0x1e>
    402c:	0021      	movs	r1, r4
    402e:	0028      	movs	r0, r5
    4030:	f000 f80c 	bl	404c <__swsetup_r>
    4034:	2800      	cmp	r0, #0
    4036:	d0ca      	beq.n	3fce <__swbuf_r+0x2e>
    4038:	2601      	movs	r6, #1
    403a:	4276      	negs	r6, r6
    403c:	0030      	movs	r0, r6
    403e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4040:	00008aa0 	.word	0x00008aa0
    4044:	00008ac0 	.word	0x00008ac0
    4048:	00008a80 	.word	0x00008a80

0000404c <__swsetup_r>:
    404c:	4b36      	ldr	r3, [pc, #216]	; (4128 <__swsetup_r+0xdc>)
    404e:	b570      	push	{r4, r5, r6, lr}
    4050:	681d      	ldr	r5, [r3, #0]
    4052:	0006      	movs	r6, r0
    4054:	000c      	movs	r4, r1
    4056:	2d00      	cmp	r5, #0
    4058:	d005      	beq.n	4066 <__swsetup_r+0x1a>
    405a:	69ab      	ldr	r3, [r5, #24]
    405c:	2b00      	cmp	r3, #0
    405e:	d102      	bne.n	4066 <__swsetup_r+0x1a>
    4060:	0028      	movs	r0, r5
    4062:	f000 ffcd 	bl	5000 <__sinit>
    4066:	4b31      	ldr	r3, [pc, #196]	; (412c <__swsetup_r+0xe0>)
    4068:	429c      	cmp	r4, r3
    406a:	d10f      	bne.n	408c <__swsetup_r+0x40>
    406c:	686c      	ldr	r4, [r5, #4]
    406e:	230c      	movs	r3, #12
    4070:	5ee2      	ldrsh	r2, [r4, r3]
    4072:	b293      	uxth	r3, r2
    4074:	0719      	lsls	r1, r3, #28
    4076:	d42d      	bmi.n	40d4 <__swsetup_r+0x88>
    4078:	06d9      	lsls	r1, r3, #27
    407a:	d411      	bmi.n	40a0 <__swsetup_r+0x54>
    407c:	2309      	movs	r3, #9
    407e:	2001      	movs	r0, #1
    4080:	6033      	str	r3, [r6, #0]
    4082:	3337      	adds	r3, #55	; 0x37
    4084:	4313      	orrs	r3, r2
    4086:	81a3      	strh	r3, [r4, #12]
    4088:	4240      	negs	r0, r0
    408a:	bd70      	pop	{r4, r5, r6, pc}
    408c:	4b28      	ldr	r3, [pc, #160]	; (4130 <__swsetup_r+0xe4>)
    408e:	429c      	cmp	r4, r3
    4090:	d101      	bne.n	4096 <__swsetup_r+0x4a>
    4092:	68ac      	ldr	r4, [r5, #8]
    4094:	e7eb      	b.n	406e <__swsetup_r+0x22>
    4096:	4b27      	ldr	r3, [pc, #156]	; (4134 <__swsetup_r+0xe8>)
    4098:	429c      	cmp	r4, r3
    409a:	d1e8      	bne.n	406e <__swsetup_r+0x22>
    409c:	68ec      	ldr	r4, [r5, #12]
    409e:	e7e6      	b.n	406e <__swsetup_r+0x22>
    40a0:	075b      	lsls	r3, r3, #29
    40a2:	d513      	bpl.n	40cc <__swsetup_r+0x80>
    40a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    40a6:	2900      	cmp	r1, #0
    40a8:	d008      	beq.n	40bc <__swsetup_r+0x70>
    40aa:	0023      	movs	r3, r4
    40ac:	3344      	adds	r3, #68	; 0x44
    40ae:	4299      	cmp	r1, r3
    40b0:	d002      	beq.n	40b8 <__swsetup_r+0x6c>
    40b2:	0030      	movs	r0, r6
    40b4:	f001 fbb2 	bl	581c <_free_r>
    40b8:	2300      	movs	r3, #0
    40ba:	6363      	str	r3, [r4, #52]	; 0x34
    40bc:	2224      	movs	r2, #36	; 0x24
    40be:	89a3      	ldrh	r3, [r4, #12]
    40c0:	4393      	bics	r3, r2
    40c2:	81a3      	strh	r3, [r4, #12]
    40c4:	2300      	movs	r3, #0
    40c6:	6063      	str	r3, [r4, #4]
    40c8:	6923      	ldr	r3, [r4, #16]
    40ca:	6023      	str	r3, [r4, #0]
    40cc:	2308      	movs	r3, #8
    40ce:	89a2      	ldrh	r2, [r4, #12]
    40d0:	4313      	orrs	r3, r2
    40d2:	81a3      	strh	r3, [r4, #12]
    40d4:	6923      	ldr	r3, [r4, #16]
    40d6:	2b00      	cmp	r3, #0
    40d8:	d10b      	bne.n	40f2 <__swsetup_r+0xa6>
    40da:	21a0      	movs	r1, #160	; 0xa0
    40dc:	2280      	movs	r2, #128	; 0x80
    40de:	89a3      	ldrh	r3, [r4, #12]
    40e0:	0089      	lsls	r1, r1, #2
    40e2:	0092      	lsls	r2, r2, #2
    40e4:	400b      	ands	r3, r1
    40e6:	4293      	cmp	r3, r2
    40e8:	d003      	beq.n	40f2 <__swsetup_r+0xa6>
    40ea:	0021      	movs	r1, r4
    40ec:	0030      	movs	r0, r6
    40ee:	f001 f851 	bl	5194 <__smakebuf_r>
    40f2:	2301      	movs	r3, #1
    40f4:	89a2      	ldrh	r2, [r4, #12]
    40f6:	4013      	ands	r3, r2
    40f8:	d011      	beq.n	411e <__swsetup_r+0xd2>
    40fa:	2300      	movs	r3, #0
    40fc:	60a3      	str	r3, [r4, #8]
    40fe:	6963      	ldr	r3, [r4, #20]
    4100:	425b      	negs	r3, r3
    4102:	61a3      	str	r3, [r4, #24]
    4104:	2000      	movs	r0, #0
    4106:	6923      	ldr	r3, [r4, #16]
    4108:	4283      	cmp	r3, r0
    410a:	d1be      	bne.n	408a <__swsetup_r+0x3e>
    410c:	230c      	movs	r3, #12
    410e:	5ee2      	ldrsh	r2, [r4, r3]
    4110:	0613      	lsls	r3, r2, #24
    4112:	d5ba      	bpl.n	408a <__swsetup_r+0x3e>
    4114:	2340      	movs	r3, #64	; 0x40
    4116:	4313      	orrs	r3, r2
    4118:	81a3      	strh	r3, [r4, #12]
    411a:	3801      	subs	r0, #1
    411c:	e7b5      	b.n	408a <__swsetup_r+0x3e>
    411e:	0792      	lsls	r2, r2, #30
    4120:	d400      	bmi.n	4124 <__swsetup_r+0xd8>
    4122:	6963      	ldr	r3, [r4, #20]
    4124:	60a3      	str	r3, [r4, #8]
    4126:	e7ed      	b.n	4104 <__swsetup_r+0xb8>
    4128:	2000000c 	.word	0x2000000c
    412c:	00008aa0 	.word	0x00008aa0
    4130:	00008ac0 	.word	0x00008ac0
    4134:	00008a80 	.word	0x00008a80

00004138 <quorem>:
    4138:	b5f0      	push	{r4, r5, r6, r7, lr}
    413a:	6903      	ldr	r3, [r0, #16]
    413c:	690c      	ldr	r4, [r1, #16]
    413e:	b089      	sub	sp, #36	; 0x24
    4140:	0007      	movs	r7, r0
    4142:	9105      	str	r1, [sp, #20]
    4144:	2600      	movs	r6, #0
    4146:	429c      	cmp	r4, r3
    4148:	dc6d      	bgt.n	4226 <quorem+0xee>
    414a:	000b      	movs	r3, r1
    414c:	3c01      	subs	r4, #1
    414e:	3314      	adds	r3, #20
    4150:	00a5      	lsls	r5, r4, #2
    4152:	9303      	str	r3, [sp, #12]
    4154:	195b      	adds	r3, r3, r5
    4156:	9304      	str	r3, [sp, #16]
    4158:	0003      	movs	r3, r0
    415a:	3314      	adds	r3, #20
    415c:	9302      	str	r3, [sp, #8]
    415e:	195d      	adds	r5, r3, r5
    4160:	9b04      	ldr	r3, [sp, #16]
    4162:	6828      	ldr	r0, [r5, #0]
    4164:	681b      	ldr	r3, [r3, #0]
    4166:	1c59      	adds	r1, r3, #1
    4168:	9301      	str	r3, [sp, #4]
    416a:	f001 fe3d 	bl	5de8 <__udivsi3>
    416e:	9001      	str	r0, [sp, #4]
    4170:	42b0      	cmp	r0, r6
    4172:	d02d      	beq.n	41d0 <quorem+0x98>
    4174:	9b03      	ldr	r3, [sp, #12]
    4176:	9802      	ldr	r0, [sp, #8]
    4178:	469c      	mov	ip, r3
    417a:	9606      	str	r6, [sp, #24]
    417c:	4662      	mov	r2, ip
    417e:	ca08      	ldmia	r2!, {r3}
    4180:	4694      	mov	ip, r2
    4182:	9a01      	ldr	r2, [sp, #4]
    4184:	b299      	uxth	r1, r3
    4186:	4351      	muls	r1, r2
    4188:	0c1b      	lsrs	r3, r3, #16
    418a:	4353      	muls	r3, r2
    418c:	1989      	adds	r1, r1, r6
    418e:	0c0a      	lsrs	r2, r1, #16
    4190:	189b      	adds	r3, r3, r2
    4192:	9307      	str	r3, [sp, #28]
    4194:	8802      	ldrh	r2, [r0, #0]
    4196:	0c1e      	lsrs	r6, r3, #16
    4198:	9b06      	ldr	r3, [sp, #24]
    419a:	b289      	uxth	r1, r1
    419c:	18d2      	adds	r2, r2, r3
    419e:	6803      	ldr	r3, [r0, #0]
    41a0:	1a52      	subs	r2, r2, r1
    41a2:	0c19      	lsrs	r1, r3, #16
    41a4:	466b      	mov	r3, sp
    41a6:	8b9b      	ldrh	r3, [r3, #28]
    41a8:	1acb      	subs	r3, r1, r3
    41aa:	1411      	asrs	r1, r2, #16
    41ac:	185b      	adds	r3, r3, r1
    41ae:	1419      	asrs	r1, r3, #16
    41b0:	b292      	uxth	r2, r2
    41b2:	041b      	lsls	r3, r3, #16
    41b4:	431a      	orrs	r2, r3
    41b6:	9b04      	ldr	r3, [sp, #16]
    41b8:	9106      	str	r1, [sp, #24]
    41ba:	c004      	stmia	r0!, {r2}
    41bc:	4563      	cmp	r3, ip
    41be:	d2dd      	bcs.n	417c <quorem+0x44>
    41c0:	682b      	ldr	r3, [r5, #0]
    41c2:	2b00      	cmp	r3, #0
    41c4:	d104      	bne.n	41d0 <quorem+0x98>
    41c6:	9b02      	ldr	r3, [sp, #8]
    41c8:	3d04      	subs	r5, #4
    41ca:	42ab      	cmp	r3, r5
    41cc:	d32e      	bcc.n	422c <quorem+0xf4>
    41ce:	613c      	str	r4, [r7, #16]
    41d0:	9905      	ldr	r1, [sp, #20]
    41d2:	0038      	movs	r0, r7
    41d4:	f001 fa43 	bl	565e <__mcmp>
    41d8:	2800      	cmp	r0, #0
    41da:	db23      	blt.n	4224 <quorem+0xec>
    41dc:	2500      	movs	r5, #0
    41de:	9b01      	ldr	r3, [sp, #4]
    41e0:	9802      	ldr	r0, [sp, #8]
    41e2:	3301      	adds	r3, #1
    41e4:	9903      	ldr	r1, [sp, #12]
    41e6:	9301      	str	r3, [sp, #4]
    41e8:	c908      	ldmia	r1!, {r3}
    41ea:	8802      	ldrh	r2, [r0, #0]
    41ec:	1955      	adds	r5, r2, r5
    41ee:	b29a      	uxth	r2, r3
    41f0:	1aaa      	subs	r2, r5, r2
    41f2:	6805      	ldr	r5, [r0, #0]
    41f4:	0c1b      	lsrs	r3, r3, #16
    41f6:	0c2d      	lsrs	r5, r5, #16
    41f8:	1aeb      	subs	r3, r5, r3
    41fa:	1415      	asrs	r5, r2, #16
    41fc:	195b      	adds	r3, r3, r5
    41fe:	141d      	asrs	r5, r3, #16
    4200:	b292      	uxth	r2, r2
    4202:	041b      	lsls	r3, r3, #16
    4204:	4313      	orrs	r3, r2
    4206:	c008      	stmia	r0!, {r3}
    4208:	9b04      	ldr	r3, [sp, #16]
    420a:	428b      	cmp	r3, r1
    420c:	d2ec      	bcs.n	41e8 <quorem+0xb0>
    420e:	9a02      	ldr	r2, [sp, #8]
    4210:	00a3      	lsls	r3, r4, #2
    4212:	18d3      	adds	r3, r2, r3
    4214:	681a      	ldr	r2, [r3, #0]
    4216:	2a00      	cmp	r2, #0
    4218:	d104      	bne.n	4224 <quorem+0xec>
    421a:	9a02      	ldr	r2, [sp, #8]
    421c:	3b04      	subs	r3, #4
    421e:	429a      	cmp	r2, r3
    4220:	d309      	bcc.n	4236 <quorem+0xfe>
    4222:	613c      	str	r4, [r7, #16]
    4224:	9e01      	ldr	r6, [sp, #4]
    4226:	0030      	movs	r0, r6
    4228:	b009      	add	sp, #36	; 0x24
    422a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    422c:	682b      	ldr	r3, [r5, #0]
    422e:	2b00      	cmp	r3, #0
    4230:	d1cd      	bne.n	41ce <quorem+0x96>
    4232:	3c01      	subs	r4, #1
    4234:	e7c7      	b.n	41c6 <quorem+0x8e>
    4236:	681a      	ldr	r2, [r3, #0]
    4238:	2a00      	cmp	r2, #0
    423a:	d1f2      	bne.n	4222 <quorem+0xea>
    423c:	3c01      	subs	r4, #1
    423e:	e7ec      	b.n	421a <quorem+0xe2>

00004240 <_dtoa_r>:
    4240:	b5f0      	push	{r4, r5, r6, r7, lr}
    4242:	0016      	movs	r6, r2
    4244:	001f      	movs	r7, r3
    4246:	6a44      	ldr	r4, [r0, #36]	; 0x24
    4248:	b09d      	sub	sp, #116	; 0x74
    424a:	9004      	str	r0, [sp, #16]
    424c:	9d25      	ldr	r5, [sp, #148]	; 0x94
    424e:	9606      	str	r6, [sp, #24]
    4250:	9707      	str	r7, [sp, #28]
    4252:	2c00      	cmp	r4, #0
    4254:	d108      	bne.n	4268 <_dtoa_r+0x28>
    4256:	2010      	movs	r0, #16
    4258:	f000 ffda 	bl	5210 <malloc>
    425c:	9b04      	ldr	r3, [sp, #16]
    425e:	6258      	str	r0, [r3, #36]	; 0x24
    4260:	6044      	str	r4, [r0, #4]
    4262:	6084      	str	r4, [r0, #8]
    4264:	6004      	str	r4, [r0, #0]
    4266:	60c4      	str	r4, [r0, #12]
    4268:	9b04      	ldr	r3, [sp, #16]
    426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    426c:	6819      	ldr	r1, [r3, #0]
    426e:	2900      	cmp	r1, #0
    4270:	d00b      	beq.n	428a <_dtoa_r+0x4a>
    4272:	685a      	ldr	r2, [r3, #4]
    4274:	2301      	movs	r3, #1
    4276:	4093      	lsls	r3, r2
    4278:	604a      	str	r2, [r1, #4]
    427a:	608b      	str	r3, [r1, #8]
    427c:	9804      	ldr	r0, [sp, #16]
    427e:	f001 f814 	bl	52aa <_Bfree>
    4282:	2200      	movs	r2, #0
    4284:	9b04      	ldr	r3, [sp, #16]
    4286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4288:	601a      	str	r2, [r3, #0]
    428a:	9b07      	ldr	r3, [sp, #28]
    428c:	2b00      	cmp	r3, #0
    428e:	da1f      	bge.n	42d0 <_dtoa_r+0x90>
    4290:	2301      	movs	r3, #1
    4292:	602b      	str	r3, [r5, #0]
    4294:	007b      	lsls	r3, r7, #1
    4296:	085b      	lsrs	r3, r3, #1
    4298:	9307      	str	r3, [sp, #28]
    429a:	9c07      	ldr	r4, [sp, #28]
    429c:	4bb7      	ldr	r3, [pc, #732]	; (457c <_dtoa_r+0x33c>)
    429e:	0022      	movs	r2, r4
    42a0:	9319      	str	r3, [sp, #100]	; 0x64
    42a2:	401a      	ands	r2, r3
    42a4:	429a      	cmp	r2, r3
    42a6:	d116      	bne.n	42d6 <_dtoa_r+0x96>
    42a8:	4bb5      	ldr	r3, [pc, #724]	; (4580 <_dtoa_r+0x340>)
    42aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
    42ac:	6013      	str	r3, [r2, #0]
    42ae:	9b06      	ldr	r3, [sp, #24]
    42b0:	2b00      	cmp	r3, #0
    42b2:	d103      	bne.n	42bc <_dtoa_r+0x7c>
    42b4:	0324      	lsls	r4, r4, #12
    42b6:	d101      	bne.n	42bc <_dtoa_r+0x7c>
    42b8:	f000 fd91 	bl	4dde <_dtoa_r+0xb9e>
    42bc:	4bb1      	ldr	r3, [pc, #708]	; (4584 <_dtoa_r+0x344>)
    42be:	9a26      	ldr	r2, [sp, #152]	; 0x98
    42c0:	930a      	str	r3, [sp, #40]	; 0x28
    42c2:	4bb1      	ldr	r3, [pc, #708]	; (4588 <_dtoa_r+0x348>)
    42c4:	2a00      	cmp	r2, #0
    42c6:	d001      	beq.n	42cc <_dtoa_r+0x8c>
    42c8:	f000 fd8f 	bl	4dea <_dtoa_r+0xbaa>
    42cc:	f000 fd8f 	bl	4dee <_dtoa_r+0xbae>
    42d0:	2300      	movs	r3, #0
    42d2:	602b      	str	r3, [r5, #0]
    42d4:	e7e1      	b.n	429a <_dtoa_r+0x5a>
    42d6:	9e06      	ldr	r6, [sp, #24]
    42d8:	9f07      	ldr	r7, [sp, #28]
    42da:	2200      	movs	r2, #0
    42dc:	2300      	movs	r3, #0
    42de:	0030      	movs	r0, r6
    42e0:	0039      	movs	r1, r7
    42e2:	f001 ff07 	bl	60f4 <__aeabi_dcmpeq>
    42e6:	1e05      	subs	r5, r0, #0
    42e8:	d00e      	beq.n	4308 <_dtoa_r+0xc8>
    42ea:	2301      	movs	r3, #1
    42ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
    42ee:	6013      	str	r3, [r2, #0]
    42f0:	4ba6      	ldr	r3, [pc, #664]	; (458c <_dtoa_r+0x34c>)
    42f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    42f4:	930a      	str	r3, [sp, #40]	; 0x28
    42f6:	2a00      	cmp	r2, #0
    42f8:	d101      	bne.n	42fe <_dtoa_r+0xbe>
    42fa:	f000 fd78 	bl	4dee <_dtoa_r+0xbae>
    42fe:	4aa4      	ldr	r2, [pc, #656]	; (4590 <_dtoa_r+0x350>)
    4300:	9926      	ldr	r1, [sp, #152]	; 0x98
    4302:	600a      	str	r2, [r1, #0]
    4304:	f000 fd73 	bl	4dee <_dtoa_r+0xbae>
    4308:	ab1a      	add	r3, sp, #104	; 0x68
    430a:	9301      	str	r3, [sp, #4]
    430c:	ab1b      	add	r3, sp, #108	; 0x6c
    430e:	9300      	str	r3, [sp, #0]
    4310:	0032      	movs	r2, r6
    4312:	003b      	movs	r3, r7
    4314:	9804      	ldr	r0, [sp, #16]
    4316:	f001 fa1f 	bl	5758 <__d2b>
    431a:	0063      	lsls	r3, r4, #1
    431c:	9005      	str	r0, [sp, #20]
    431e:	0d5b      	lsrs	r3, r3, #21
    4320:	d100      	bne.n	4324 <_dtoa_r+0xe4>
    4322:	e07f      	b.n	4424 <_dtoa_r+0x1e4>
    4324:	033a      	lsls	r2, r7, #12
    4326:	4c9b      	ldr	r4, [pc, #620]	; (4594 <_dtoa_r+0x354>)
    4328:	0b12      	lsrs	r2, r2, #12
    432a:	4314      	orrs	r4, r2
    432c:	0021      	movs	r1, r4
    432e:	4a9a      	ldr	r2, [pc, #616]	; (4598 <_dtoa_r+0x358>)
    4330:	0030      	movs	r0, r6
    4332:	9518      	str	r5, [sp, #96]	; 0x60
    4334:	189e      	adds	r6, r3, r2
    4336:	2200      	movs	r2, #0
    4338:	4b98      	ldr	r3, [pc, #608]	; (459c <_dtoa_r+0x35c>)
    433a:	f003 fe23 	bl	7f84 <__aeabi_dsub>
    433e:	4a98      	ldr	r2, [pc, #608]	; (45a0 <_dtoa_r+0x360>)
    4340:	4b98      	ldr	r3, [pc, #608]	; (45a4 <_dtoa_r+0x364>)
    4342:	f003 fb9f 	bl	7a84 <__aeabi_dmul>
    4346:	4a98      	ldr	r2, [pc, #608]	; (45a8 <_dtoa_r+0x368>)
    4348:	4b98      	ldr	r3, [pc, #608]	; (45ac <_dtoa_r+0x36c>)
    434a:	f002 fc57 	bl	6bfc <__aeabi_dadd>
    434e:	0004      	movs	r4, r0
    4350:	0030      	movs	r0, r6
    4352:	000d      	movs	r5, r1
    4354:	f004 f980 	bl	8658 <__aeabi_i2d>
    4358:	4a95      	ldr	r2, [pc, #596]	; (45b0 <_dtoa_r+0x370>)
    435a:	4b96      	ldr	r3, [pc, #600]	; (45b4 <_dtoa_r+0x374>)
    435c:	f003 fb92 	bl	7a84 <__aeabi_dmul>
    4360:	0002      	movs	r2, r0
    4362:	000b      	movs	r3, r1
    4364:	0020      	movs	r0, r4
    4366:	0029      	movs	r1, r5
    4368:	f002 fc48 	bl	6bfc <__aeabi_dadd>
    436c:	0004      	movs	r4, r0
    436e:	000d      	movs	r5, r1
    4370:	f004 f93e 	bl	85f0 <__aeabi_d2iz>
    4374:	2200      	movs	r2, #0
    4376:	9003      	str	r0, [sp, #12]
    4378:	2300      	movs	r3, #0
    437a:	0020      	movs	r0, r4
    437c:	0029      	movs	r1, r5
    437e:	f001 febf 	bl	6100 <__aeabi_dcmplt>
    4382:	2800      	cmp	r0, #0
    4384:	d00e      	beq.n	43a4 <_dtoa_r+0x164>
    4386:	9803      	ldr	r0, [sp, #12]
    4388:	f004 f966 	bl	8658 <__aeabi_i2d>
    438c:	000b      	movs	r3, r1
    438e:	0002      	movs	r2, r0
    4390:	0029      	movs	r1, r5
    4392:	0020      	movs	r0, r4
    4394:	f001 feae 	bl	60f4 <__aeabi_dcmpeq>
    4398:	0003      	movs	r3, r0
    439a:	4258      	negs	r0, r3
    439c:	4158      	adcs	r0, r3
    439e:	9b03      	ldr	r3, [sp, #12]
    43a0:	1a1b      	subs	r3, r3, r0
    43a2:	9303      	str	r3, [sp, #12]
    43a4:	2301      	movs	r3, #1
    43a6:	9316      	str	r3, [sp, #88]	; 0x58
    43a8:	9b03      	ldr	r3, [sp, #12]
    43aa:	2b16      	cmp	r3, #22
    43ac:	d80f      	bhi.n	43ce <_dtoa_r+0x18e>
    43ae:	4982      	ldr	r1, [pc, #520]	; (45b8 <_dtoa_r+0x378>)
    43b0:	00db      	lsls	r3, r3, #3
    43b2:	18c9      	adds	r1, r1, r3
    43b4:	6808      	ldr	r0, [r1, #0]
    43b6:	6849      	ldr	r1, [r1, #4]
    43b8:	9a06      	ldr	r2, [sp, #24]
    43ba:	9b07      	ldr	r3, [sp, #28]
    43bc:	f001 feb4 	bl	6128 <__aeabi_dcmpgt>
    43c0:	2800      	cmp	r0, #0
    43c2:	d04b      	beq.n	445c <_dtoa_r+0x21c>
    43c4:	9b03      	ldr	r3, [sp, #12]
    43c6:	3b01      	subs	r3, #1
    43c8:	9303      	str	r3, [sp, #12]
    43ca:	2300      	movs	r3, #0
    43cc:	9316      	str	r3, [sp, #88]	; 0x58
    43ce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    43d0:	1b9e      	subs	r6, r3, r6
    43d2:	2300      	movs	r3, #0
    43d4:	930b      	str	r3, [sp, #44]	; 0x2c
    43d6:	0033      	movs	r3, r6
    43d8:	3b01      	subs	r3, #1
    43da:	930c      	str	r3, [sp, #48]	; 0x30
    43dc:	d504      	bpl.n	43e8 <_dtoa_r+0x1a8>
    43de:	2301      	movs	r3, #1
    43e0:	1b9b      	subs	r3, r3, r6
    43e2:	930b      	str	r3, [sp, #44]	; 0x2c
    43e4:	2300      	movs	r3, #0
    43e6:	930c      	str	r3, [sp, #48]	; 0x30
    43e8:	9b03      	ldr	r3, [sp, #12]
    43ea:	2b00      	cmp	r3, #0
    43ec:	db38      	blt.n	4460 <_dtoa_r+0x220>
    43ee:	9a03      	ldr	r2, [sp, #12]
    43f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    43f2:	4694      	mov	ip, r2
    43f4:	4463      	add	r3, ip
    43f6:	930c      	str	r3, [sp, #48]	; 0x30
    43f8:	2300      	movs	r3, #0
    43fa:	920f      	str	r2, [sp, #60]	; 0x3c
    43fc:	9308      	str	r3, [sp, #32]
    43fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4400:	2501      	movs	r5, #1
    4402:	2b09      	cmp	r3, #9
    4404:	d900      	bls.n	4408 <_dtoa_r+0x1c8>
    4406:	e091      	b.n	452c <_dtoa_r+0x2ec>
    4408:	2b05      	cmp	r3, #5
    440a:	dd02      	ble.n	4412 <_dtoa_r+0x1d2>
    440c:	2500      	movs	r5, #0
    440e:	3b04      	subs	r3, #4
    4410:	9322      	str	r3, [sp, #136]	; 0x88
    4412:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4414:	1e98      	subs	r0, r3, #2
    4416:	2803      	cmp	r0, #3
    4418:	d900      	bls.n	441c <_dtoa_r+0x1dc>
    441a:	e091      	b.n	4540 <_dtoa_r+0x300>
    441c:	f001 fcda 	bl	5dd4 <__gnu_thumb1_case_uqi>
    4420:	76298482 	.word	0x76298482
    4424:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4426:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    4428:	189e      	adds	r6, r3, r2
    442a:	4b64      	ldr	r3, [pc, #400]	; (45bc <_dtoa_r+0x37c>)
    442c:	18f2      	adds	r2, r6, r3
    442e:	2a20      	cmp	r2, #32
    4430:	dd0f      	ble.n	4452 <_dtoa_r+0x212>
    4432:	4b63      	ldr	r3, [pc, #396]	; (45c0 <_dtoa_r+0x380>)
    4434:	9806      	ldr	r0, [sp, #24]
    4436:	18f3      	adds	r3, r6, r3
    4438:	40d8      	lsrs	r0, r3
    443a:	2340      	movs	r3, #64	; 0x40
    443c:	1a9b      	subs	r3, r3, r2
    443e:	409c      	lsls	r4, r3
    4440:	4320      	orrs	r0, r4
    4442:	f004 f94b 	bl	86dc <__aeabi_ui2d>
    4446:	2301      	movs	r3, #1
    4448:	4c5e      	ldr	r4, [pc, #376]	; (45c4 <_dtoa_r+0x384>)
    444a:	3e01      	subs	r6, #1
    444c:	1909      	adds	r1, r1, r4
    444e:	9318      	str	r3, [sp, #96]	; 0x60
    4450:	e771      	b.n	4336 <_dtoa_r+0xf6>
    4452:	2320      	movs	r3, #32
    4454:	9806      	ldr	r0, [sp, #24]
    4456:	1a9b      	subs	r3, r3, r2
    4458:	4098      	lsls	r0, r3
    445a:	e7f2      	b.n	4442 <_dtoa_r+0x202>
    445c:	9016      	str	r0, [sp, #88]	; 0x58
    445e:	e7b6      	b.n	43ce <_dtoa_r+0x18e>
    4460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4462:	9a03      	ldr	r2, [sp, #12]
    4464:	1a9b      	subs	r3, r3, r2
    4466:	930b      	str	r3, [sp, #44]	; 0x2c
    4468:	4253      	negs	r3, r2
    446a:	9308      	str	r3, [sp, #32]
    446c:	2300      	movs	r3, #0
    446e:	930f      	str	r3, [sp, #60]	; 0x3c
    4470:	e7c5      	b.n	43fe <_dtoa_r+0x1be>
    4472:	2301      	movs	r3, #1
    4474:	930e      	str	r3, [sp, #56]	; 0x38
    4476:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    4478:	2b00      	cmp	r3, #0
    447a:	dd65      	ble.n	4548 <_dtoa_r+0x308>
    447c:	001f      	movs	r7, r3
    447e:	930d      	str	r3, [sp, #52]	; 0x34
    4480:	9a04      	ldr	r2, [sp, #16]
    4482:	6a54      	ldr	r4, [r2, #36]	; 0x24
    4484:	2200      	movs	r2, #0
    4486:	6062      	str	r2, [r4, #4]
    4488:	3204      	adds	r2, #4
    448a:	0011      	movs	r1, r2
    448c:	3114      	adds	r1, #20
    448e:	4299      	cmp	r1, r3
    4490:	d95f      	bls.n	4552 <_dtoa_r+0x312>
    4492:	6861      	ldr	r1, [r4, #4]
    4494:	9804      	ldr	r0, [sp, #16]
    4496:	f000 fed0 	bl	523a <_Balloc>
    449a:	9b04      	ldr	r3, [sp, #16]
    449c:	6020      	str	r0, [r4, #0]
    449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    44a0:	681b      	ldr	r3, [r3, #0]
    44a2:	930a      	str	r3, [sp, #40]	; 0x28
    44a4:	2f0e      	cmp	r7, #14
    44a6:	d900      	bls.n	44aa <_dtoa_r+0x26a>
    44a8:	e105      	b.n	46b6 <_dtoa_r+0x476>
    44aa:	2d00      	cmp	r5, #0
    44ac:	d100      	bne.n	44b0 <_dtoa_r+0x270>
    44ae:	e102      	b.n	46b6 <_dtoa_r+0x476>
    44b0:	9b06      	ldr	r3, [sp, #24]
    44b2:	9c07      	ldr	r4, [sp, #28]
    44b4:	9314      	str	r3, [sp, #80]	; 0x50
    44b6:	9415      	str	r4, [sp, #84]	; 0x54
    44b8:	9b03      	ldr	r3, [sp, #12]
    44ba:	2b00      	cmp	r3, #0
    44bc:	dc00      	bgt.n	44c0 <_dtoa_r+0x280>
    44be:	e085      	b.n	45cc <_dtoa_r+0x38c>
    44c0:	001a      	movs	r2, r3
    44c2:	210f      	movs	r1, #15
    44c4:	4b3c      	ldr	r3, [pc, #240]	; (45b8 <_dtoa_r+0x378>)
    44c6:	400a      	ands	r2, r1
    44c8:	00d2      	lsls	r2, r2, #3
    44ca:	189b      	adds	r3, r3, r2
    44cc:	685c      	ldr	r4, [r3, #4]
    44ce:	681b      	ldr	r3, [r3, #0]
    44d0:	9310      	str	r3, [sp, #64]	; 0x40
    44d2:	9411      	str	r4, [sp, #68]	; 0x44
    44d4:	9b03      	ldr	r3, [sp, #12]
    44d6:	2402      	movs	r4, #2
    44d8:	111d      	asrs	r5, r3, #4
    44da:	06eb      	lsls	r3, r5, #27
    44dc:	d50a      	bpl.n	44f4 <_dtoa_r+0x2b4>
    44de:	4b3a      	ldr	r3, [pc, #232]	; (45c8 <_dtoa_r+0x388>)
    44e0:	400d      	ands	r5, r1
    44e2:	6a1a      	ldr	r2, [r3, #32]
    44e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    44e6:	9814      	ldr	r0, [sp, #80]	; 0x50
    44e8:	9915      	ldr	r1, [sp, #84]	; 0x54
    44ea:	f002 fe97 	bl	721c <__aeabi_ddiv>
    44ee:	9006      	str	r0, [sp, #24]
    44f0:	9107      	str	r1, [sp, #28]
    44f2:	3401      	adds	r4, #1
    44f4:	4e34      	ldr	r6, [pc, #208]	; (45c8 <_dtoa_r+0x388>)
    44f6:	2d00      	cmp	r5, #0
    44f8:	d130      	bne.n	455c <_dtoa_r+0x31c>
    44fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    44fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    44fe:	9806      	ldr	r0, [sp, #24]
    4500:	9907      	ldr	r1, [sp, #28]
    4502:	f002 fe8b 	bl	721c <__aeabi_ddiv>
    4506:	9006      	str	r0, [sp, #24]
    4508:	9107      	str	r1, [sp, #28]
    450a:	e07a      	b.n	4602 <_dtoa_r+0x3c2>
    450c:	2301      	movs	r3, #1
    450e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    4510:	930e      	str	r3, [sp, #56]	; 0x38
    4512:	4694      	mov	ip, r2
    4514:	9b03      	ldr	r3, [sp, #12]
    4516:	4463      	add	r3, ip
    4518:	1c5f      	adds	r7, r3, #1
    451a:	930d      	str	r3, [sp, #52]	; 0x34
    451c:	1e3b      	subs	r3, r7, #0
    451e:	dcaf      	bgt.n	4480 <_dtoa_r+0x240>
    4520:	2301      	movs	r3, #1
    4522:	e7ad      	b.n	4480 <_dtoa_r+0x240>
    4524:	2300      	movs	r3, #0
    4526:	e7a5      	b.n	4474 <_dtoa_r+0x234>
    4528:	2300      	movs	r3, #0
    452a:	e7f0      	b.n	450e <_dtoa_r+0x2ce>
    452c:	2300      	movs	r3, #0
    452e:	950e      	str	r5, [sp, #56]	; 0x38
    4530:	9322      	str	r3, [sp, #136]	; 0x88
    4532:	3b01      	subs	r3, #1
    4534:	2200      	movs	r2, #0
    4536:	930d      	str	r3, [sp, #52]	; 0x34
    4538:	001f      	movs	r7, r3
    453a:	3313      	adds	r3, #19
    453c:	9223      	str	r2, [sp, #140]	; 0x8c
    453e:	e79f      	b.n	4480 <_dtoa_r+0x240>
    4540:	2301      	movs	r3, #1
    4542:	930e      	str	r3, [sp, #56]	; 0x38
    4544:	3b02      	subs	r3, #2
    4546:	e7f5      	b.n	4534 <_dtoa_r+0x2f4>
    4548:	2301      	movs	r3, #1
    454a:	930d      	str	r3, [sp, #52]	; 0x34
    454c:	001f      	movs	r7, r3
    454e:	001a      	movs	r2, r3
    4550:	e7f4      	b.n	453c <_dtoa_r+0x2fc>
    4552:	6861      	ldr	r1, [r4, #4]
    4554:	0052      	lsls	r2, r2, #1
    4556:	3101      	adds	r1, #1
    4558:	6061      	str	r1, [r4, #4]
    455a:	e796      	b.n	448a <_dtoa_r+0x24a>
    455c:	2301      	movs	r3, #1
    455e:	421d      	tst	r5, r3
    4560:	d008      	beq.n	4574 <_dtoa_r+0x334>
    4562:	9810      	ldr	r0, [sp, #64]	; 0x40
    4564:	9911      	ldr	r1, [sp, #68]	; 0x44
    4566:	18e4      	adds	r4, r4, r3
    4568:	6832      	ldr	r2, [r6, #0]
    456a:	6873      	ldr	r3, [r6, #4]
    456c:	f003 fa8a 	bl	7a84 <__aeabi_dmul>
    4570:	9010      	str	r0, [sp, #64]	; 0x40
    4572:	9111      	str	r1, [sp, #68]	; 0x44
    4574:	106d      	asrs	r5, r5, #1
    4576:	3608      	adds	r6, #8
    4578:	e7bd      	b.n	44f6 <_dtoa_r+0x2b6>
    457a:	46c0      	nop			; (mov r8, r8)
    457c:	7ff00000 	.word	0x7ff00000
    4580:	0000270f 	.word	0x0000270f
    4584:	00008a79 	.word	0x00008a79
    4588:	00008a7c 	.word	0x00008a7c
    458c:	00008a4c 	.word	0x00008a4c
    4590:	00008a4d 	.word	0x00008a4d
    4594:	3ff00000 	.word	0x3ff00000
    4598:	fffffc01 	.word	0xfffffc01
    459c:	3ff80000 	.word	0x3ff80000
    45a0:	636f4361 	.word	0x636f4361
    45a4:	3fd287a7 	.word	0x3fd287a7
    45a8:	8b60c8b3 	.word	0x8b60c8b3
    45ac:	3fc68a28 	.word	0x3fc68a28
    45b0:	509f79fb 	.word	0x509f79fb
    45b4:	3fd34413 	.word	0x3fd34413
    45b8:	00008b08 	.word	0x00008b08
    45bc:	00000432 	.word	0x00000432
    45c0:	00000412 	.word	0x00000412
    45c4:	fe100000 	.word	0xfe100000
    45c8:	00008ae0 	.word	0x00008ae0
    45cc:	9b03      	ldr	r3, [sp, #12]
    45ce:	2402      	movs	r4, #2
    45d0:	2b00      	cmp	r3, #0
    45d2:	d016      	beq.n	4602 <_dtoa_r+0x3c2>
    45d4:	9814      	ldr	r0, [sp, #80]	; 0x50
    45d6:	9915      	ldr	r1, [sp, #84]	; 0x54
    45d8:	425d      	negs	r5, r3
    45da:	230f      	movs	r3, #15
    45dc:	4aca      	ldr	r2, [pc, #808]	; (4908 <_dtoa_r+0x6c8>)
    45de:	402b      	ands	r3, r5
    45e0:	00db      	lsls	r3, r3, #3
    45e2:	18d3      	adds	r3, r2, r3
    45e4:	681a      	ldr	r2, [r3, #0]
    45e6:	685b      	ldr	r3, [r3, #4]
    45e8:	f003 fa4c 	bl	7a84 <__aeabi_dmul>
    45ec:	2300      	movs	r3, #0
    45ee:	9006      	str	r0, [sp, #24]
    45f0:	9107      	str	r1, [sp, #28]
    45f2:	4ec6      	ldr	r6, [pc, #792]	; (490c <_dtoa_r+0x6cc>)
    45f4:	112d      	asrs	r5, r5, #4
    45f6:	2d00      	cmp	r5, #0
    45f8:	d000      	beq.n	45fc <_dtoa_r+0x3bc>
    45fa:	e08c      	b.n	4716 <_dtoa_r+0x4d6>
    45fc:	2b00      	cmp	r3, #0
    45fe:	d000      	beq.n	4602 <_dtoa_r+0x3c2>
    4600:	e781      	b.n	4506 <_dtoa_r+0x2c6>
    4602:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4604:	2b00      	cmp	r3, #0
    4606:	d100      	bne.n	460a <_dtoa_r+0x3ca>
    4608:	e091      	b.n	472e <_dtoa_r+0x4ee>
    460a:	9a06      	ldr	r2, [sp, #24]
    460c:	9b07      	ldr	r3, [sp, #28]
    460e:	9210      	str	r2, [sp, #64]	; 0x40
    4610:	9311      	str	r3, [sp, #68]	; 0x44
    4612:	9810      	ldr	r0, [sp, #64]	; 0x40
    4614:	9911      	ldr	r1, [sp, #68]	; 0x44
    4616:	2200      	movs	r2, #0
    4618:	4bbd      	ldr	r3, [pc, #756]	; (4910 <_dtoa_r+0x6d0>)
    461a:	f001 fd71 	bl	6100 <__aeabi_dcmplt>
    461e:	2800      	cmp	r0, #0
    4620:	d100      	bne.n	4624 <_dtoa_r+0x3e4>
    4622:	e084      	b.n	472e <_dtoa_r+0x4ee>
    4624:	2f00      	cmp	r7, #0
    4626:	d100      	bne.n	462a <_dtoa_r+0x3ea>
    4628:	e081      	b.n	472e <_dtoa_r+0x4ee>
    462a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    462c:	2b00      	cmp	r3, #0
    462e:	dd3e      	ble.n	46ae <_dtoa_r+0x46e>
    4630:	9810      	ldr	r0, [sp, #64]	; 0x40
    4632:	9911      	ldr	r1, [sp, #68]	; 0x44
    4634:	9b03      	ldr	r3, [sp, #12]
    4636:	2200      	movs	r2, #0
    4638:	1e5e      	subs	r6, r3, #1
    463a:	4bb6      	ldr	r3, [pc, #728]	; (4914 <_dtoa_r+0x6d4>)
    463c:	f003 fa22 	bl	7a84 <__aeabi_dmul>
    4640:	9006      	str	r0, [sp, #24]
    4642:	9107      	str	r1, [sp, #28]
    4644:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4646:	3401      	adds	r4, #1
    4648:	0020      	movs	r0, r4
    464a:	f004 f805 	bl	8658 <__aeabi_i2d>
    464e:	9a06      	ldr	r2, [sp, #24]
    4650:	9b07      	ldr	r3, [sp, #28]
    4652:	f003 fa17 	bl	7a84 <__aeabi_dmul>
    4656:	2200      	movs	r2, #0
    4658:	4baf      	ldr	r3, [pc, #700]	; (4918 <_dtoa_r+0x6d8>)
    465a:	f002 facf 	bl	6bfc <__aeabi_dadd>
    465e:	9012      	str	r0, [sp, #72]	; 0x48
    4660:	9113      	str	r1, [sp, #76]	; 0x4c
    4662:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4664:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    4666:	4aad      	ldr	r2, [pc, #692]	; (491c <_dtoa_r+0x6dc>)
    4668:	9310      	str	r3, [sp, #64]	; 0x40
    466a:	9411      	str	r4, [sp, #68]	; 0x44
    466c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    466e:	189c      	adds	r4, r3, r2
    4670:	9411      	str	r4, [sp, #68]	; 0x44
    4672:	2d00      	cmp	r5, #0
    4674:	d15e      	bne.n	4734 <_dtoa_r+0x4f4>
    4676:	9806      	ldr	r0, [sp, #24]
    4678:	9907      	ldr	r1, [sp, #28]
    467a:	2200      	movs	r2, #0
    467c:	4ba8      	ldr	r3, [pc, #672]	; (4920 <_dtoa_r+0x6e0>)
    467e:	f003 fc81 	bl	7f84 <__aeabi_dsub>
    4682:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4684:	0023      	movs	r3, r4
    4686:	9006      	str	r0, [sp, #24]
    4688:	9107      	str	r1, [sp, #28]
    468a:	f001 fd4d 	bl	6128 <__aeabi_dcmpgt>
    468e:	2800      	cmp	r0, #0
    4690:	d000      	beq.n	4694 <_dtoa_r+0x454>
    4692:	e301      	b.n	4c98 <_dtoa_r+0xa58>
    4694:	48a3      	ldr	r0, [pc, #652]	; (4924 <_dtoa_r+0x6e4>)
    4696:	9913      	ldr	r1, [sp, #76]	; 0x4c
    4698:	4684      	mov	ip, r0
    469a:	4461      	add	r1, ip
    469c:	000b      	movs	r3, r1
    469e:	9806      	ldr	r0, [sp, #24]
    46a0:	9907      	ldr	r1, [sp, #28]
    46a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    46a4:	f001 fd2c 	bl	6100 <__aeabi_dcmplt>
    46a8:	2800      	cmp	r0, #0
    46aa:	d000      	beq.n	46ae <_dtoa_r+0x46e>
    46ac:	e2e8      	b.n	4c80 <_dtoa_r+0xa40>
    46ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
    46b0:	9c15      	ldr	r4, [sp, #84]	; 0x54
    46b2:	9306      	str	r3, [sp, #24]
    46b4:	9407      	str	r4, [sp, #28]
    46b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    46b8:	2b00      	cmp	r3, #0
    46ba:	da00      	bge.n	46be <_dtoa_r+0x47e>
    46bc:	e157      	b.n	496e <_dtoa_r+0x72e>
    46be:	9a03      	ldr	r2, [sp, #12]
    46c0:	2a0e      	cmp	r2, #14
    46c2:	dd00      	ble.n	46c6 <_dtoa_r+0x486>
    46c4:	e153      	b.n	496e <_dtoa_r+0x72e>
    46c6:	4b90      	ldr	r3, [pc, #576]	; (4908 <_dtoa_r+0x6c8>)
    46c8:	00d2      	lsls	r2, r2, #3
    46ca:	189b      	adds	r3, r3, r2
    46cc:	685c      	ldr	r4, [r3, #4]
    46ce:	681b      	ldr	r3, [r3, #0]
    46d0:	9308      	str	r3, [sp, #32]
    46d2:	9409      	str	r4, [sp, #36]	; 0x24
    46d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    46d6:	2b00      	cmp	r3, #0
    46d8:	db00      	blt.n	46dc <_dtoa_r+0x49c>
    46da:	e0ce      	b.n	487a <_dtoa_r+0x63a>
    46dc:	2f00      	cmp	r7, #0
    46de:	dd00      	ble.n	46e2 <_dtoa_r+0x4a2>
    46e0:	e0cb      	b.n	487a <_dtoa_r+0x63a>
    46e2:	d000      	beq.n	46e6 <_dtoa_r+0x4a6>
    46e4:	e2cf      	b.n	4c86 <_dtoa_r+0xa46>
    46e6:	9808      	ldr	r0, [sp, #32]
    46e8:	9909      	ldr	r1, [sp, #36]	; 0x24
    46ea:	2200      	movs	r2, #0
    46ec:	4b8c      	ldr	r3, [pc, #560]	; (4920 <_dtoa_r+0x6e0>)
    46ee:	f003 f9c9 	bl	7a84 <__aeabi_dmul>
    46f2:	9a06      	ldr	r2, [sp, #24]
    46f4:	9b07      	ldr	r3, [sp, #28]
    46f6:	f001 fd21 	bl	613c <__aeabi_dcmpge>
    46fa:	003e      	movs	r6, r7
    46fc:	9708      	str	r7, [sp, #32]
    46fe:	2800      	cmp	r0, #0
    4700:	d000      	beq.n	4704 <_dtoa_r+0x4c4>
    4702:	e2a4      	b.n	4c4e <_dtoa_r+0xa0e>
    4704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4706:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4708:	1c5d      	adds	r5, r3, #1
    470a:	2331      	movs	r3, #49	; 0x31
    470c:	7013      	strb	r3, [r2, #0]
    470e:	9b03      	ldr	r3, [sp, #12]
    4710:	3301      	adds	r3, #1
    4712:	9303      	str	r3, [sp, #12]
    4714:	e29f      	b.n	4c56 <_dtoa_r+0xa16>
    4716:	2201      	movs	r2, #1
    4718:	4215      	tst	r5, r2
    471a:	d005      	beq.n	4728 <_dtoa_r+0x4e8>
    471c:	18a4      	adds	r4, r4, r2
    471e:	6832      	ldr	r2, [r6, #0]
    4720:	6873      	ldr	r3, [r6, #4]
    4722:	f003 f9af 	bl	7a84 <__aeabi_dmul>
    4726:	2301      	movs	r3, #1
    4728:	106d      	asrs	r5, r5, #1
    472a:	3608      	adds	r6, #8
    472c:	e763      	b.n	45f6 <_dtoa_r+0x3b6>
    472e:	9e03      	ldr	r6, [sp, #12]
    4730:	003d      	movs	r5, r7
    4732:	e789      	b.n	4648 <_dtoa_r+0x408>
    4734:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4736:	1e69      	subs	r1, r5, #1
    4738:	1952      	adds	r2, r2, r5
    473a:	9217      	str	r2, [sp, #92]	; 0x5c
    473c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    473e:	4b72      	ldr	r3, [pc, #456]	; (4908 <_dtoa_r+0x6c8>)
    4740:	00c9      	lsls	r1, r1, #3
    4742:	2a00      	cmp	r2, #0
    4744:	d04a      	beq.n	47dc <_dtoa_r+0x59c>
    4746:	185b      	adds	r3, r3, r1
    4748:	681a      	ldr	r2, [r3, #0]
    474a:	685b      	ldr	r3, [r3, #4]
    474c:	2000      	movs	r0, #0
    474e:	4976      	ldr	r1, [pc, #472]	; (4928 <_dtoa_r+0x6e8>)
    4750:	f002 fd64 	bl	721c <__aeabi_ddiv>
    4754:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4756:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4758:	f003 fc14 	bl	7f84 <__aeabi_dsub>
    475c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    475e:	9010      	str	r0, [sp, #64]	; 0x40
    4760:	9111      	str	r1, [sp, #68]	; 0x44
    4762:	9312      	str	r3, [sp, #72]	; 0x48
    4764:	9806      	ldr	r0, [sp, #24]
    4766:	9907      	ldr	r1, [sp, #28]
    4768:	f003 ff42 	bl	85f0 <__aeabi_d2iz>
    476c:	0004      	movs	r4, r0
    476e:	f003 ff73 	bl	8658 <__aeabi_i2d>
    4772:	0002      	movs	r2, r0
    4774:	000b      	movs	r3, r1
    4776:	9806      	ldr	r0, [sp, #24]
    4778:	9907      	ldr	r1, [sp, #28]
    477a:	f003 fc03 	bl	7f84 <__aeabi_dsub>
    477e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4780:	3430      	adds	r4, #48	; 0x30
    4782:	1c5d      	adds	r5, r3, #1
    4784:	701c      	strb	r4, [r3, #0]
    4786:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4788:	9b11      	ldr	r3, [sp, #68]	; 0x44
    478a:	9006      	str	r0, [sp, #24]
    478c:	9107      	str	r1, [sp, #28]
    478e:	f001 fcb7 	bl	6100 <__aeabi_dcmplt>
    4792:	2800      	cmp	r0, #0
    4794:	d165      	bne.n	4862 <_dtoa_r+0x622>
    4796:	9a06      	ldr	r2, [sp, #24]
    4798:	9b07      	ldr	r3, [sp, #28]
    479a:	2000      	movs	r0, #0
    479c:	495c      	ldr	r1, [pc, #368]	; (4910 <_dtoa_r+0x6d0>)
    479e:	f003 fbf1 	bl	7f84 <__aeabi_dsub>
    47a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    47a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    47a6:	f001 fcab 	bl	6100 <__aeabi_dcmplt>
    47aa:	2800      	cmp	r0, #0
    47ac:	d000      	beq.n	47b0 <_dtoa_r+0x570>
    47ae:	e0be      	b.n	492e <_dtoa_r+0x6ee>
    47b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    47b2:	429d      	cmp	r5, r3
    47b4:	d100      	bne.n	47b8 <_dtoa_r+0x578>
    47b6:	e77a      	b.n	46ae <_dtoa_r+0x46e>
    47b8:	9810      	ldr	r0, [sp, #64]	; 0x40
    47ba:	9911      	ldr	r1, [sp, #68]	; 0x44
    47bc:	2200      	movs	r2, #0
    47be:	4b55      	ldr	r3, [pc, #340]	; (4914 <_dtoa_r+0x6d4>)
    47c0:	f003 f960 	bl	7a84 <__aeabi_dmul>
    47c4:	2200      	movs	r2, #0
    47c6:	9010      	str	r0, [sp, #64]	; 0x40
    47c8:	9111      	str	r1, [sp, #68]	; 0x44
    47ca:	9806      	ldr	r0, [sp, #24]
    47cc:	9907      	ldr	r1, [sp, #28]
    47ce:	4b51      	ldr	r3, [pc, #324]	; (4914 <_dtoa_r+0x6d4>)
    47d0:	f003 f958 	bl	7a84 <__aeabi_dmul>
    47d4:	9512      	str	r5, [sp, #72]	; 0x48
    47d6:	9006      	str	r0, [sp, #24]
    47d8:	9107      	str	r1, [sp, #28]
    47da:	e7c3      	b.n	4764 <_dtoa_r+0x524>
    47dc:	1859      	adds	r1, r3, r1
    47de:	6808      	ldr	r0, [r1, #0]
    47e0:	6849      	ldr	r1, [r1, #4]
    47e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    47e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    47e6:	f003 f94d 	bl	7a84 <__aeabi_dmul>
    47ea:	9010      	str	r0, [sp, #64]	; 0x40
    47ec:	9111      	str	r1, [sp, #68]	; 0x44
    47ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    47f0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    47f2:	9806      	ldr	r0, [sp, #24]
    47f4:	9907      	ldr	r1, [sp, #28]
    47f6:	f003 fefb 	bl	85f0 <__aeabi_d2iz>
    47fa:	9012      	str	r0, [sp, #72]	; 0x48
    47fc:	f003 ff2c 	bl	8658 <__aeabi_i2d>
    4800:	0002      	movs	r2, r0
    4802:	000b      	movs	r3, r1
    4804:	9806      	ldr	r0, [sp, #24]
    4806:	9907      	ldr	r1, [sp, #28]
    4808:	f003 fbbc 	bl	7f84 <__aeabi_dsub>
    480c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    480e:	9006      	str	r0, [sp, #24]
    4810:	9107      	str	r1, [sp, #28]
    4812:	3330      	adds	r3, #48	; 0x30
    4814:	7023      	strb	r3, [r4, #0]
    4816:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    4818:	3401      	adds	r4, #1
    481a:	2200      	movs	r2, #0
    481c:	42a3      	cmp	r3, r4
    481e:	d124      	bne.n	486a <_dtoa_r+0x62a>
    4820:	4b41      	ldr	r3, [pc, #260]	; (4928 <_dtoa_r+0x6e8>)
    4822:	9810      	ldr	r0, [sp, #64]	; 0x40
    4824:	9911      	ldr	r1, [sp, #68]	; 0x44
    4826:	f002 f9e9 	bl	6bfc <__aeabi_dadd>
    482a:	0002      	movs	r2, r0
    482c:	000b      	movs	r3, r1
    482e:	9806      	ldr	r0, [sp, #24]
    4830:	9907      	ldr	r1, [sp, #28]
    4832:	f001 fc79 	bl	6128 <__aeabi_dcmpgt>
    4836:	2800      	cmp	r0, #0
    4838:	d000      	beq.n	483c <_dtoa_r+0x5fc>
    483a:	e078      	b.n	492e <_dtoa_r+0x6ee>
    483c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    483e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4840:	2000      	movs	r0, #0
    4842:	4939      	ldr	r1, [pc, #228]	; (4928 <_dtoa_r+0x6e8>)
    4844:	f003 fb9e 	bl	7f84 <__aeabi_dsub>
    4848:	0002      	movs	r2, r0
    484a:	000b      	movs	r3, r1
    484c:	9806      	ldr	r0, [sp, #24]
    484e:	9907      	ldr	r1, [sp, #28]
    4850:	f001 fc56 	bl	6100 <__aeabi_dcmplt>
    4854:	2800      	cmp	r0, #0
    4856:	d100      	bne.n	485a <_dtoa_r+0x61a>
    4858:	e729      	b.n	46ae <_dtoa_r+0x46e>
    485a:	1e6b      	subs	r3, r5, #1
    485c:	781a      	ldrb	r2, [r3, #0]
    485e:	2a30      	cmp	r2, #48	; 0x30
    4860:	d001      	beq.n	4866 <_dtoa_r+0x626>
    4862:	9603      	str	r6, [sp, #12]
    4864:	e03f      	b.n	48e6 <_dtoa_r+0x6a6>
    4866:	001d      	movs	r5, r3
    4868:	e7f7      	b.n	485a <_dtoa_r+0x61a>
    486a:	9806      	ldr	r0, [sp, #24]
    486c:	9907      	ldr	r1, [sp, #28]
    486e:	4b29      	ldr	r3, [pc, #164]	; (4914 <_dtoa_r+0x6d4>)
    4870:	f003 f908 	bl	7a84 <__aeabi_dmul>
    4874:	9006      	str	r0, [sp, #24]
    4876:	9107      	str	r1, [sp, #28]
    4878:	e7bb      	b.n	47f2 <_dtoa_r+0x5b2>
    487a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    487c:	9a08      	ldr	r2, [sp, #32]
    487e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4880:	9806      	ldr	r0, [sp, #24]
    4882:	9907      	ldr	r1, [sp, #28]
    4884:	f002 fcca 	bl	721c <__aeabi_ddiv>
    4888:	f003 feb2 	bl	85f0 <__aeabi_d2iz>
    488c:	0004      	movs	r4, r0
    488e:	f003 fee3 	bl	8658 <__aeabi_i2d>
    4892:	9a08      	ldr	r2, [sp, #32]
    4894:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4896:	f003 f8f5 	bl	7a84 <__aeabi_dmul>
    489a:	000b      	movs	r3, r1
    489c:	0002      	movs	r2, r0
    489e:	9806      	ldr	r0, [sp, #24]
    48a0:	9907      	ldr	r1, [sp, #28]
    48a2:	f003 fb6f 	bl	7f84 <__aeabi_dsub>
    48a6:	0023      	movs	r3, r4
    48a8:	3330      	adds	r3, #48	; 0x30
    48aa:	7033      	strb	r3, [r6, #0]
    48ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    48ae:	1c75      	adds	r5, r6, #1
    48b0:	1aeb      	subs	r3, r5, r3
    48b2:	429f      	cmp	r7, r3
    48b4:	d14c      	bne.n	4950 <_dtoa_r+0x710>
    48b6:	0002      	movs	r2, r0
    48b8:	000b      	movs	r3, r1
    48ba:	f002 f99f 	bl	6bfc <__aeabi_dadd>
    48be:	0006      	movs	r6, r0
    48c0:	000f      	movs	r7, r1
    48c2:	0002      	movs	r2, r0
    48c4:	000b      	movs	r3, r1
    48c6:	9808      	ldr	r0, [sp, #32]
    48c8:	9909      	ldr	r1, [sp, #36]	; 0x24
    48ca:	f001 fc19 	bl	6100 <__aeabi_dcmplt>
    48ce:	2800      	cmp	r0, #0
    48d0:	d12c      	bne.n	492c <_dtoa_r+0x6ec>
    48d2:	9808      	ldr	r0, [sp, #32]
    48d4:	9909      	ldr	r1, [sp, #36]	; 0x24
    48d6:	0032      	movs	r2, r6
    48d8:	003b      	movs	r3, r7
    48da:	f001 fc0b 	bl	60f4 <__aeabi_dcmpeq>
    48de:	2800      	cmp	r0, #0
    48e0:	d001      	beq.n	48e6 <_dtoa_r+0x6a6>
    48e2:	07e3      	lsls	r3, r4, #31
    48e4:	d422      	bmi.n	492c <_dtoa_r+0x6ec>
    48e6:	9905      	ldr	r1, [sp, #20]
    48e8:	9804      	ldr	r0, [sp, #16]
    48ea:	f000 fcde 	bl	52aa <_Bfree>
    48ee:	2300      	movs	r3, #0
    48f0:	702b      	strb	r3, [r5, #0]
    48f2:	9b03      	ldr	r3, [sp, #12]
    48f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    48f6:	3301      	adds	r3, #1
    48f8:	6013      	str	r3, [r2, #0]
    48fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
    48fc:	2b00      	cmp	r3, #0
    48fe:	d100      	bne.n	4902 <_dtoa_r+0x6c2>
    4900:	e275      	b.n	4dee <_dtoa_r+0xbae>
    4902:	601d      	str	r5, [r3, #0]
    4904:	e273      	b.n	4dee <_dtoa_r+0xbae>
    4906:	46c0      	nop			; (mov r8, r8)
    4908:	00008b08 	.word	0x00008b08
    490c:	00008ae0 	.word	0x00008ae0
    4910:	3ff00000 	.word	0x3ff00000
    4914:	40240000 	.word	0x40240000
    4918:	401c0000 	.word	0x401c0000
    491c:	fcc00000 	.word	0xfcc00000
    4920:	40140000 	.word	0x40140000
    4924:	7cc00000 	.word	0x7cc00000
    4928:	3fe00000 	.word	0x3fe00000
    492c:	9e03      	ldr	r6, [sp, #12]
    492e:	1e6b      	subs	r3, r5, #1
    4930:	781a      	ldrb	r2, [r3, #0]
    4932:	2a39      	cmp	r2, #57	; 0x39
    4934:	d106      	bne.n	4944 <_dtoa_r+0x704>
    4936:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4938:	429a      	cmp	r2, r3
    493a:	d107      	bne.n	494c <_dtoa_r+0x70c>
    493c:	2330      	movs	r3, #48	; 0x30
    493e:	7013      	strb	r3, [r2, #0]
    4940:	0013      	movs	r3, r2
    4942:	3601      	adds	r6, #1
    4944:	781a      	ldrb	r2, [r3, #0]
    4946:	3201      	adds	r2, #1
    4948:	701a      	strb	r2, [r3, #0]
    494a:	e78a      	b.n	4862 <_dtoa_r+0x622>
    494c:	001d      	movs	r5, r3
    494e:	e7ee      	b.n	492e <_dtoa_r+0x6ee>
    4950:	2200      	movs	r2, #0
    4952:	4bcf      	ldr	r3, [pc, #828]	; (4c90 <_dtoa_r+0xa50>)
    4954:	f003 f896 	bl	7a84 <__aeabi_dmul>
    4958:	2200      	movs	r2, #0
    495a:	2300      	movs	r3, #0
    495c:	9006      	str	r0, [sp, #24]
    495e:	9107      	str	r1, [sp, #28]
    4960:	002e      	movs	r6, r5
    4962:	f001 fbc7 	bl	60f4 <__aeabi_dcmpeq>
    4966:	2800      	cmp	r0, #0
    4968:	d100      	bne.n	496c <_dtoa_r+0x72c>
    496a:	e787      	b.n	487c <_dtoa_r+0x63c>
    496c:	e7bb      	b.n	48e6 <_dtoa_r+0x6a6>
    496e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4970:	2a00      	cmp	r2, #0
    4972:	d100      	bne.n	4976 <_dtoa_r+0x736>
    4974:	e087      	b.n	4a86 <_dtoa_r+0x846>
    4976:	9a22      	ldr	r2, [sp, #136]	; 0x88
    4978:	2a01      	cmp	r2, #1
    497a:	dc6e      	bgt.n	4a5a <_dtoa_r+0x81a>
    497c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    497e:	2a00      	cmp	r2, #0
    4980:	d067      	beq.n	4a52 <_dtoa_r+0x812>
    4982:	4ac4      	ldr	r2, [pc, #784]	; (4c94 <_dtoa_r+0xa54>)
    4984:	189b      	adds	r3, r3, r2
    4986:	9d08      	ldr	r5, [sp, #32]
    4988:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    498a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    498c:	2101      	movs	r1, #1
    498e:	18d2      	adds	r2, r2, r3
    4990:	920b      	str	r2, [sp, #44]	; 0x2c
    4992:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4994:	9804      	ldr	r0, [sp, #16]
    4996:	18d3      	adds	r3, r2, r3
    4998:	930c      	str	r3, [sp, #48]	; 0x30
    499a:	f000 fd24 	bl	53e6 <__i2b>
    499e:	0006      	movs	r6, r0
    49a0:	2c00      	cmp	r4, #0
    49a2:	dd0e      	ble.n	49c2 <_dtoa_r+0x782>
    49a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    49a6:	2b00      	cmp	r3, #0
    49a8:	dd0b      	ble.n	49c2 <_dtoa_r+0x782>
    49aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    49ac:	0023      	movs	r3, r4
    49ae:	4294      	cmp	r4, r2
    49b0:	dd00      	ble.n	49b4 <_dtoa_r+0x774>
    49b2:	0013      	movs	r3, r2
    49b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    49b6:	1ae4      	subs	r4, r4, r3
    49b8:	1ad2      	subs	r2, r2, r3
    49ba:	920b      	str	r2, [sp, #44]	; 0x2c
    49bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    49be:	1ad3      	subs	r3, r2, r3
    49c0:	930c      	str	r3, [sp, #48]	; 0x30
    49c2:	9b08      	ldr	r3, [sp, #32]
    49c4:	2b00      	cmp	r3, #0
    49c6:	d01e      	beq.n	4a06 <_dtoa_r+0x7c6>
    49c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    49ca:	2b00      	cmp	r3, #0
    49cc:	d05f      	beq.n	4a8e <_dtoa_r+0x84e>
    49ce:	2d00      	cmp	r5, #0
    49d0:	dd11      	ble.n	49f6 <_dtoa_r+0x7b6>
    49d2:	0031      	movs	r1, r6
    49d4:	002a      	movs	r2, r5
    49d6:	9804      	ldr	r0, [sp, #16]
    49d8:	f000 fd9e 	bl	5518 <__pow5mult>
    49dc:	9a05      	ldr	r2, [sp, #20]
    49de:	0001      	movs	r1, r0
    49e0:	0006      	movs	r6, r0
    49e2:	9804      	ldr	r0, [sp, #16]
    49e4:	f000 fd08 	bl	53f8 <__multiply>
    49e8:	9905      	ldr	r1, [sp, #20]
    49ea:	9010      	str	r0, [sp, #64]	; 0x40
    49ec:	9804      	ldr	r0, [sp, #16]
    49ee:	f000 fc5c 	bl	52aa <_Bfree>
    49f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    49f4:	9305      	str	r3, [sp, #20]
    49f6:	9b08      	ldr	r3, [sp, #32]
    49f8:	1b5a      	subs	r2, r3, r5
    49fa:	d004      	beq.n	4a06 <_dtoa_r+0x7c6>
    49fc:	9905      	ldr	r1, [sp, #20]
    49fe:	9804      	ldr	r0, [sp, #16]
    4a00:	f000 fd8a 	bl	5518 <__pow5mult>
    4a04:	9005      	str	r0, [sp, #20]
    4a06:	2101      	movs	r1, #1
    4a08:	9804      	ldr	r0, [sp, #16]
    4a0a:	f000 fcec 	bl	53e6 <__i2b>
    4a0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4a10:	9008      	str	r0, [sp, #32]
    4a12:	2b00      	cmp	r3, #0
    4a14:	dd3d      	ble.n	4a92 <_dtoa_r+0x852>
    4a16:	001a      	movs	r2, r3
    4a18:	0001      	movs	r1, r0
    4a1a:	9804      	ldr	r0, [sp, #16]
    4a1c:	f000 fd7c 	bl	5518 <__pow5mult>
    4a20:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4a22:	9008      	str	r0, [sp, #32]
    4a24:	2500      	movs	r5, #0
    4a26:	2b01      	cmp	r3, #1
    4a28:	dc3b      	bgt.n	4aa2 <_dtoa_r+0x862>
    4a2a:	2500      	movs	r5, #0
    4a2c:	9b06      	ldr	r3, [sp, #24]
    4a2e:	42ab      	cmp	r3, r5
    4a30:	d133      	bne.n	4a9a <_dtoa_r+0x85a>
    4a32:	9b07      	ldr	r3, [sp, #28]
    4a34:	031b      	lsls	r3, r3, #12
    4a36:	42ab      	cmp	r3, r5
    4a38:	d12f      	bne.n	4a9a <_dtoa_r+0x85a>
    4a3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4a3c:	9a07      	ldr	r2, [sp, #28]
    4a3e:	4213      	tst	r3, r2
    4a40:	d02b      	beq.n	4a9a <_dtoa_r+0x85a>
    4a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4a44:	3501      	adds	r5, #1
    4a46:	3301      	adds	r3, #1
    4a48:	930b      	str	r3, [sp, #44]	; 0x2c
    4a4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4a4c:	3301      	adds	r3, #1
    4a4e:	930c      	str	r3, [sp, #48]	; 0x30
    4a50:	e023      	b.n	4a9a <_dtoa_r+0x85a>
    4a52:	2336      	movs	r3, #54	; 0x36
    4a54:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    4a56:	1a9b      	subs	r3, r3, r2
    4a58:	e795      	b.n	4986 <_dtoa_r+0x746>
    4a5a:	9b08      	ldr	r3, [sp, #32]
    4a5c:	1e7d      	subs	r5, r7, #1
    4a5e:	42ab      	cmp	r3, r5
    4a60:	db06      	blt.n	4a70 <_dtoa_r+0x830>
    4a62:	1b5d      	subs	r5, r3, r5
    4a64:	2f00      	cmp	r7, #0
    4a66:	da0b      	bge.n	4a80 <_dtoa_r+0x840>
    4a68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4a6a:	1bdc      	subs	r4, r3, r7
    4a6c:	2300      	movs	r3, #0
    4a6e:	e78c      	b.n	498a <_dtoa_r+0x74a>
    4a70:	9b08      	ldr	r3, [sp, #32]
    4a72:	9508      	str	r5, [sp, #32]
    4a74:	1aea      	subs	r2, r5, r3
    4a76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4a78:	2500      	movs	r5, #0
    4a7a:	189b      	adds	r3, r3, r2
    4a7c:	930f      	str	r3, [sp, #60]	; 0x3c
    4a7e:	e7f1      	b.n	4a64 <_dtoa_r+0x824>
    4a80:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4a82:	003b      	movs	r3, r7
    4a84:	e781      	b.n	498a <_dtoa_r+0x74a>
    4a86:	9d08      	ldr	r5, [sp, #32]
    4a88:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4a8a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4a8c:	e788      	b.n	49a0 <_dtoa_r+0x760>
    4a8e:	9a08      	ldr	r2, [sp, #32]
    4a90:	e7b4      	b.n	49fc <_dtoa_r+0x7bc>
    4a92:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4a94:	2500      	movs	r5, #0
    4a96:	2b01      	cmp	r3, #1
    4a98:	ddc7      	ble.n	4a2a <_dtoa_r+0x7ea>
    4a9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4a9c:	2001      	movs	r0, #1
    4a9e:	2b00      	cmp	r3, #0
    4aa0:	d00b      	beq.n	4aba <_dtoa_r+0x87a>
    4aa2:	9b08      	ldr	r3, [sp, #32]
    4aa4:	9a08      	ldr	r2, [sp, #32]
    4aa6:	691b      	ldr	r3, [r3, #16]
    4aa8:	930f      	str	r3, [sp, #60]	; 0x3c
    4aaa:	3303      	adds	r3, #3
    4aac:	009b      	lsls	r3, r3, #2
    4aae:	18d3      	adds	r3, r2, r3
    4ab0:	6858      	ldr	r0, [r3, #4]
    4ab2:	f000 fc4f 	bl	5354 <__hi0bits>
    4ab6:	2320      	movs	r3, #32
    4ab8:	1a18      	subs	r0, r3, r0
    4aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4abc:	18c0      	adds	r0, r0, r3
    4abe:	231f      	movs	r3, #31
    4ac0:	4018      	ands	r0, r3
    4ac2:	d100      	bne.n	4ac6 <_dtoa_r+0x886>
    4ac4:	e0ab      	b.n	4c1e <_dtoa_r+0x9de>
    4ac6:	3301      	adds	r3, #1
    4ac8:	1a1b      	subs	r3, r3, r0
    4aca:	2b04      	cmp	r3, #4
    4acc:	dc00      	bgt.n	4ad0 <_dtoa_r+0x890>
    4ace:	e09b      	b.n	4c08 <_dtoa_r+0x9c8>
    4ad0:	231c      	movs	r3, #28
    4ad2:	1a18      	subs	r0, r3, r0
    4ad4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4ad6:	1824      	adds	r4, r4, r0
    4ad8:	181b      	adds	r3, r3, r0
    4ada:	930b      	str	r3, [sp, #44]	; 0x2c
    4adc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4ade:	181b      	adds	r3, r3, r0
    4ae0:	930c      	str	r3, [sp, #48]	; 0x30
    4ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4ae4:	2b00      	cmp	r3, #0
    4ae6:	dd05      	ble.n	4af4 <_dtoa_r+0x8b4>
    4ae8:	001a      	movs	r2, r3
    4aea:	9905      	ldr	r1, [sp, #20]
    4aec:	9804      	ldr	r0, [sp, #16]
    4aee:	f000 fd65 	bl	55bc <__lshift>
    4af2:	9005      	str	r0, [sp, #20]
    4af4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4af6:	2b00      	cmp	r3, #0
    4af8:	dd05      	ble.n	4b06 <_dtoa_r+0x8c6>
    4afa:	001a      	movs	r2, r3
    4afc:	9908      	ldr	r1, [sp, #32]
    4afe:	9804      	ldr	r0, [sp, #16]
    4b00:	f000 fd5c 	bl	55bc <__lshift>
    4b04:	9008      	str	r0, [sp, #32]
    4b06:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4b08:	2b00      	cmp	r3, #0
    4b0a:	d100      	bne.n	4b0e <_dtoa_r+0x8ce>
    4b0c:	e089      	b.n	4c22 <_dtoa_r+0x9e2>
    4b0e:	9908      	ldr	r1, [sp, #32]
    4b10:	9805      	ldr	r0, [sp, #20]
    4b12:	f000 fda4 	bl	565e <__mcmp>
    4b16:	2800      	cmp	r0, #0
    4b18:	db00      	blt.n	4b1c <_dtoa_r+0x8dc>
    4b1a:	e082      	b.n	4c22 <_dtoa_r+0x9e2>
    4b1c:	9b03      	ldr	r3, [sp, #12]
    4b1e:	220a      	movs	r2, #10
    4b20:	3b01      	subs	r3, #1
    4b22:	9303      	str	r3, [sp, #12]
    4b24:	9905      	ldr	r1, [sp, #20]
    4b26:	2300      	movs	r3, #0
    4b28:	9804      	ldr	r0, [sp, #16]
    4b2a:	f000 fbd7 	bl	52dc <__multadd>
    4b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4b30:	9005      	str	r0, [sp, #20]
    4b32:	2b00      	cmp	r3, #0
    4b34:	d100      	bne.n	4b38 <_dtoa_r+0x8f8>
    4b36:	e15d      	b.n	4df4 <_dtoa_r+0xbb4>
    4b38:	2300      	movs	r3, #0
    4b3a:	0031      	movs	r1, r6
    4b3c:	220a      	movs	r2, #10
    4b3e:	9804      	ldr	r0, [sp, #16]
    4b40:	f000 fbcc 	bl	52dc <__multadd>
    4b44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4b46:	0006      	movs	r6, r0
    4b48:	2b00      	cmp	r3, #0
    4b4a:	dc02      	bgt.n	4b52 <_dtoa_r+0x912>
    4b4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4b4e:	2b02      	cmp	r3, #2
    4b50:	dc6d      	bgt.n	4c2e <_dtoa_r+0x9ee>
    4b52:	2c00      	cmp	r4, #0
    4b54:	dd05      	ble.n	4b62 <_dtoa_r+0x922>
    4b56:	0031      	movs	r1, r6
    4b58:	0022      	movs	r2, r4
    4b5a:	9804      	ldr	r0, [sp, #16]
    4b5c:	f000 fd2e 	bl	55bc <__lshift>
    4b60:	0006      	movs	r6, r0
    4b62:	0030      	movs	r0, r6
    4b64:	2d00      	cmp	r5, #0
    4b66:	d011      	beq.n	4b8c <_dtoa_r+0x94c>
    4b68:	6871      	ldr	r1, [r6, #4]
    4b6a:	9804      	ldr	r0, [sp, #16]
    4b6c:	f000 fb65 	bl	523a <_Balloc>
    4b70:	0031      	movs	r1, r6
    4b72:	0004      	movs	r4, r0
    4b74:	6933      	ldr	r3, [r6, #16]
    4b76:	310c      	adds	r1, #12
    4b78:	1c9a      	adds	r2, r3, #2
    4b7a:	0092      	lsls	r2, r2, #2
    4b7c:	300c      	adds	r0, #12
    4b7e:	f7fe fc4b 	bl	3418 <memcpy>
    4b82:	2201      	movs	r2, #1
    4b84:	0021      	movs	r1, r4
    4b86:	9804      	ldr	r0, [sp, #16]
    4b88:	f000 fd18 	bl	55bc <__lshift>
    4b8c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4b90:	3f01      	subs	r7, #1
    4b92:	930b      	str	r3, [sp, #44]	; 0x2c
    4b94:	19db      	adds	r3, r3, r7
    4b96:	0037      	movs	r7, r6
    4b98:	0006      	movs	r6, r0
    4b9a:	930f      	str	r3, [sp, #60]	; 0x3c
    4b9c:	9908      	ldr	r1, [sp, #32]
    4b9e:	9805      	ldr	r0, [sp, #20]
    4ba0:	f7ff faca 	bl	4138 <quorem>
    4ba4:	0039      	movs	r1, r7
    4ba6:	900d      	str	r0, [sp, #52]	; 0x34
    4ba8:	0004      	movs	r4, r0
    4baa:	9805      	ldr	r0, [sp, #20]
    4bac:	f000 fd57 	bl	565e <__mcmp>
    4bb0:	0032      	movs	r2, r6
    4bb2:	900e      	str	r0, [sp, #56]	; 0x38
    4bb4:	9908      	ldr	r1, [sp, #32]
    4bb6:	9804      	ldr	r0, [sp, #16]
    4bb8:	f000 fd6a 	bl	5690 <__mdiff>
    4bbc:	2301      	movs	r3, #1
    4bbe:	930c      	str	r3, [sp, #48]	; 0x30
    4bc0:	68c3      	ldr	r3, [r0, #12]
    4bc2:	3430      	adds	r4, #48	; 0x30
    4bc4:	0005      	movs	r5, r0
    4bc6:	2b00      	cmp	r3, #0
    4bc8:	d104      	bne.n	4bd4 <_dtoa_r+0x994>
    4bca:	0001      	movs	r1, r0
    4bcc:	9805      	ldr	r0, [sp, #20]
    4bce:	f000 fd46 	bl	565e <__mcmp>
    4bd2:	900c      	str	r0, [sp, #48]	; 0x30
    4bd4:	0029      	movs	r1, r5
    4bd6:	9804      	ldr	r0, [sp, #16]
    4bd8:	f000 fb67 	bl	52aa <_Bfree>
    4bdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4bde:	9a22      	ldr	r2, [sp, #136]	; 0x88
    4be0:	4313      	orrs	r3, r2
    4be2:	d000      	beq.n	4be6 <_dtoa_r+0x9a6>
    4be4:	e089      	b.n	4cfa <_dtoa_r+0xaba>
    4be6:	9a06      	ldr	r2, [sp, #24]
    4be8:	3301      	adds	r3, #1
    4bea:	4213      	tst	r3, r2
    4bec:	d000      	beq.n	4bf0 <_dtoa_r+0x9b0>
    4bee:	e084      	b.n	4cfa <_dtoa_r+0xaba>
    4bf0:	2c39      	cmp	r4, #57	; 0x39
    4bf2:	d100      	bne.n	4bf6 <_dtoa_r+0x9b6>
    4bf4:	e0a3      	b.n	4d3e <_dtoa_r+0xafe>
    4bf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4bf8:	2b00      	cmp	r3, #0
    4bfa:	dd01      	ble.n	4c00 <_dtoa_r+0x9c0>
    4bfc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    4bfe:	3431      	adds	r4, #49	; 0x31
    4c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4c02:	1c5d      	adds	r5, r3, #1
    4c04:	701c      	strb	r4, [r3, #0]
    4c06:	e027      	b.n	4c58 <_dtoa_r+0xa18>
    4c08:	2b04      	cmp	r3, #4
    4c0a:	d100      	bne.n	4c0e <_dtoa_r+0x9ce>
    4c0c:	e769      	b.n	4ae2 <_dtoa_r+0x8a2>
    4c0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4c10:	331c      	adds	r3, #28
    4c12:	18d2      	adds	r2, r2, r3
    4c14:	920b      	str	r2, [sp, #44]	; 0x2c
    4c16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4c18:	18e4      	adds	r4, r4, r3
    4c1a:	18d3      	adds	r3, r2, r3
    4c1c:	e760      	b.n	4ae0 <_dtoa_r+0x8a0>
    4c1e:	0003      	movs	r3, r0
    4c20:	e7f5      	b.n	4c0e <_dtoa_r+0x9ce>
    4c22:	2f00      	cmp	r7, #0
    4c24:	dc3c      	bgt.n	4ca0 <_dtoa_r+0xa60>
    4c26:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4c28:	2b02      	cmp	r3, #2
    4c2a:	dd39      	ble.n	4ca0 <_dtoa_r+0xa60>
    4c2c:	970d      	str	r7, [sp, #52]	; 0x34
    4c2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4c30:	2b00      	cmp	r3, #0
    4c32:	d10c      	bne.n	4c4e <_dtoa_r+0xa0e>
    4c34:	9908      	ldr	r1, [sp, #32]
    4c36:	2205      	movs	r2, #5
    4c38:	9804      	ldr	r0, [sp, #16]
    4c3a:	f000 fb4f 	bl	52dc <__multadd>
    4c3e:	9008      	str	r0, [sp, #32]
    4c40:	0001      	movs	r1, r0
    4c42:	9805      	ldr	r0, [sp, #20]
    4c44:	f000 fd0b 	bl	565e <__mcmp>
    4c48:	2800      	cmp	r0, #0
    4c4a:	dd00      	ble.n	4c4e <_dtoa_r+0xa0e>
    4c4c:	e55a      	b.n	4704 <_dtoa_r+0x4c4>
    4c4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    4c50:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    4c52:	43db      	mvns	r3, r3
    4c54:	9303      	str	r3, [sp, #12]
    4c56:	2700      	movs	r7, #0
    4c58:	9908      	ldr	r1, [sp, #32]
    4c5a:	9804      	ldr	r0, [sp, #16]
    4c5c:	f000 fb25 	bl	52aa <_Bfree>
    4c60:	2e00      	cmp	r6, #0
    4c62:	d100      	bne.n	4c66 <_dtoa_r+0xa26>
    4c64:	e63f      	b.n	48e6 <_dtoa_r+0x6a6>
    4c66:	2f00      	cmp	r7, #0
    4c68:	d005      	beq.n	4c76 <_dtoa_r+0xa36>
    4c6a:	42b7      	cmp	r7, r6
    4c6c:	d003      	beq.n	4c76 <_dtoa_r+0xa36>
    4c6e:	0039      	movs	r1, r7
    4c70:	9804      	ldr	r0, [sp, #16]
    4c72:	f000 fb1a 	bl	52aa <_Bfree>
    4c76:	0031      	movs	r1, r6
    4c78:	9804      	ldr	r0, [sp, #16]
    4c7a:	f000 fb16 	bl	52aa <_Bfree>
    4c7e:	e632      	b.n	48e6 <_dtoa_r+0x6a6>
    4c80:	9508      	str	r5, [sp, #32]
    4c82:	002e      	movs	r6, r5
    4c84:	e7e3      	b.n	4c4e <_dtoa_r+0xa0e>
    4c86:	2300      	movs	r3, #0
    4c88:	9308      	str	r3, [sp, #32]
    4c8a:	001e      	movs	r6, r3
    4c8c:	e7df      	b.n	4c4e <_dtoa_r+0xa0e>
    4c8e:	46c0      	nop			; (mov r8, r8)
    4c90:	40240000 	.word	0x40240000
    4c94:	00000433 	.word	0x00000433
    4c98:	9603      	str	r6, [sp, #12]
    4c9a:	9508      	str	r5, [sp, #32]
    4c9c:	002e      	movs	r6, r5
    4c9e:	e531      	b.n	4704 <_dtoa_r+0x4c4>
    4ca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4ca2:	970d      	str	r7, [sp, #52]	; 0x34
    4ca4:	2b00      	cmp	r3, #0
    4ca6:	d000      	beq.n	4caa <_dtoa_r+0xa6a>
    4ca8:	e753      	b.n	4b52 <_dtoa_r+0x912>
    4caa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    4cac:	9908      	ldr	r1, [sp, #32]
    4cae:	9805      	ldr	r0, [sp, #20]
    4cb0:	f7ff fa42 	bl	4138 <quorem>
    4cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4cb6:	3030      	adds	r0, #48	; 0x30
    4cb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4cba:	7028      	strb	r0, [r5, #0]
    4cbc:	3501      	adds	r5, #1
    4cbe:	0004      	movs	r4, r0
    4cc0:	1aeb      	subs	r3, r5, r3
    4cc2:	429a      	cmp	r2, r3
    4cc4:	dc78      	bgt.n	4db8 <_dtoa_r+0xb78>
    4cc6:	1e15      	subs	r5, r2, #0
    4cc8:	dc00      	bgt.n	4ccc <_dtoa_r+0xa8c>
    4cca:	2501      	movs	r5, #1
    4ccc:	2700      	movs	r7, #0
    4cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4cd0:	195d      	adds	r5, r3, r5
    4cd2:	9905      	ldr	r1, [sp, #20]
    4cd4:	2201      	movs	r2, #1
    4cd6:	9804      	ldr	r0, [sp, #16]
    4cd8:	f000 fc70 	bl	55bc <__lshift>
    4cdc:	9908      	ldr	r1, [sp, #32]
    4cde:	9005      	str	r0, [sp, #20]
    4ce0:	f000 fcbd 	bl	565e <__mcmp>
    4ce4:	2800      	cmp	r0, #0
    4ce6:	dc2f      	bgt.n	4d48 <_dtoa_r+0xb08>
    4ce8:	d101      	bne.n	4cee <_dtoa_r+0xaae>
    4cea:	07e3      	lsls	r3, r4, #31
    4cec:	d42c      	bmi.n	4d48 <_dtoa_r+0xb08>
    4cee:	1e6b      	subs	r3, r5, #1
    4cf0:	781a      	ldrb	r2, [r3, #0]
    4cf2:	2a30      	cmp	r2, #48	; 0x30
    4cf4:	d1b0      	bne.n	4c58 <_dtoa_r+0xa18>
    4cf6:	001d      	movs	r5, r3
    4cf8:	e7f9      	b.n	4cee <_dtoa_r+0xaae>
    4cfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4cfc:	2b00      	cmp	r3, #0
    4cfe:	db07      	blt.n	4d10 <_dtoa_r+0xad0>
    4d00:	001d      	movs	r5, r3
    4d02:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4d04:	431d      	orrs	r5, r3
    4d06:	d126      	bne.n	4d56 <_dtoa_r+0xb16>
    4d08:	2301      	movs	r3, #1
    4d0a:	9a06      	ldr	r2, [sp, #24]
    4d0c:	4213      	tst	r3, r2
    4d0e:	d122      	bne.n	4d56 <_dtoa_r+0xb16>
    4d10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4d12:	2b00      	cmp	r3, #0
    4d14:	dc00      	bgt.n	4d18 <_dtoa_r+0xad8>
    4d16:	e773      	b.n	4c00 <_dtoa_r+0x9c0>
    4d18:	9905      	ldr	r1, [sp, #20]
    4d1a:	2201      	movs	r2, #1
    4d1c:	9804      	ldr	r0, [sp, #16]
    4d1e:	f000 fc4d 	bl	55bc <__lshift>
    4d22:	9908      	ldr	r1, [sp, #32]
    4d24:	9005      	str	r0, [sp, #20]
    4d26:	f000 fc9a 	bl	565e <__mcmp>
    4d2a:	2800      	cmp	r0, #0
    4d2c:	dc04      	bgt.n	4d38 <_dtoa_r+0xaf8>
    4d2e:	d000      	beq.n	4d32 <_dtoa_r+0xaf2>
    4d30:	e766      	b.n	4c00 <_dtoa_r+0x9c0>
    4d32:	07e3      	lsls	r3, r4, #31
    4d34:	d400      	bmi.n	4d38 <_dtoa_r+0xaf8>
    4d36:	e763      	b.n	4c00 <_dtoa_r+0x9c0>
    4d38:	2c39      	cmp	r4, #57	; 0x39
    4d3a:	d000      	beq.n	4d3e <_dtoa_r+0xafe>
    4d3c:	e75e      	b.n	4bfc <_dtoa_r+0x9bc>
    4d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4d40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4d42:	1c5d      	adds	r5, r3, #1
    4d44:	2339      	movs	r3, #57	; 0x39
    4d46:	7013      	strb	r3, [r2, #0]
    4d48:	1e6b      	subs	r3, r5, #1
    4d4a:	781a      	ldrb	r2, [r3, #0]
    4d4c:	2a39      	cmp	r2, #57	; 0x39
    4d4e:	d03b      	beq.n	4dc8 <_dtoa_r+0xb88>
    4d50:	3201      	adds	r2, #1
    4d52:	701a      	strb	r2, [r3, #0]
    4d54:	e780      	b.n	4c58 <_dtoa_r+0xa18>
    4d56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4d58:	3301      	adds	r3, #1
    4d5a:	930d      	str	r3, [sp, #52]	; 0x34
    4d5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4d5e:	2b00      	cmp	r3, #0
    4d60:	dd05      	ble.n	4d6e <_dtoa_r+0xb2e>
    4d62:	2c39      	cmp	r4, #57	; 0x39
    4d64:	d0eb      	beq.n	4d3e <_dtoa_r+0xafe>
    4d66:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4d68:	3401      	adds	r4, #1
    4d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4d6c:	e74a      	b.n	4c04 <_dtoa_r+0x9c4>
    4d6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4d70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4d72:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4d74:	701c      	strb	r4, [r3, #0]
    4d76:	4293      	cmp	r3, r2
    4d78:	d0ab      	beq.n	4cd2 <_dtoa_r+0xa92>
    4d7a:	2300      	movs	r3, #0
    4d7c:	220a      	movs	r2, #10
    4d7e:	9905      	ldr	r1, [sp, #20]
    4d80:	9804      	ldr	r0, [sp, #16]
    4d82:	f000 faab 	bl	52dc <__multadd>
    4d86:	2300      	movs	r3, #0
    4d88:	9005      	str	r0, [sp, #20]
    4d8a:	220a      	movs	r2, #10
    4d8c:	0039      	movs	r1, r7
    4d8e:	9804      	ldr	r0, [sp, #16]
    4d90:	42b7      	cmp	r7, r6
    4d92:	d106      	bne.n	4da2 <_dtoa_r+0xb62>
    4d94:	f000 faa2 	bl	52dc <__multadd>
    4d98:	0007      	movs	r7, r0
    4d9a:	0006      	movs	r6, r0
    4d9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4d9e:	930b      	str	r3, [sp, #44]	; 0x2c
    4da0:	e6fc      	b.n	4b9c <_dtoa_r+0x95c>
    4da2:	f000 fa9b 	bl	52dc <__multadd>
    4da6:	0031      	movs	r1, r6
    4da8:	0007      	movs	r7, r0
    4daa:	2300      	movs	r3, #0
    4dac:	220a      	movs	r2, #10
    4dae:	9804      	ldr	r0, [sp, #16]
    4db0:	f000 fa94 	bl	52dc <__multadd>
    4db4:	0006      	movs	r6, r0
    4db6:	e7f1      	b.n	4d9c <_dtoa_r+0xb5c>
    4db8:	2300      	movs	r3, #0
    4dba:	220a      	movs	r2, #10
    4dbc:	9905      	ldr	r1, [sp, #20]
    4dbe:	9804      	ldr	r0, [sp, #16]
    4dc0:	f000 fa8c 	bl	52dc <__multadd>
    4dc4:	9005      	str	r0, [sp, #20]
    4dc6:	e771      	b.n	4cac <_dtoa_r+0xa6c>
    4dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4dca:	429a      	cmp	r2, r3
    4dcc:	d105      	bne.n	4dda <_dtoa_r+0xb9a>
    4dce:	9b03      	ldr	r3, [sp, #12]
    4dd0:	3301      	adds	r3, #1
    4dd2:	9303      	str	r3, [sp, #12]
    4dd4:	2331      	movs	r3, #49	; 0x31
    4dd6:	7013      	strb	r3, [r2, #0]
    4dd8:	e73e      	b.n	4c58 <_dtoa_r+0xa18>
    4dda:	001d      	movs	r5, r3
    4ddc:	e7b4      	b.n	4d48 <_dtoa_r+0xb08>
    4dde:	4b0a      	ldr	r3, [pc, #40]	; (4e08 <_dtoa_r+0xbc8>)
    4de0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4de2:	930a      	str	r3, [sp, #40]	; 0x28
    4de4:	4b09      	ldr	r3, [pc, #36]	; (4e0c <_dtoa_r+0xbcc>)
    4de6:	2a00      	cmp	r2, #0
    4de8:	d001      	beq.n	4dee <_dtoa_r+0xbae>
    4dea:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4dec:	6013      	str	r3, [r2, #0]
    4dee:	980a      	ldr	r0, [sp, #40]	; 0x28
    4df0:	b01d      	add	sp, #116	; 0x74
    4df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4df4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4df6:	2b00      	cmp	r3, #0
    4df8:	dd00      	ble.n	4dfc <_dtoa_r+0xbbc>
    4dfa:	e756      	b.n	4caa <_dtoa_r+0xa6a>
    4dfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4dfe:	2b02      	cmp	r3, #2
    4e00:	dc00      	bgt.n	4e04 <_dtoa_r+0xbc4>
    4e02:	e752      	b.n	4caa <_dtoa_r+0xa6a>
    4e04:	e713      	b.n	4c2e <_dtoa_r+0x9ee>
    4e06:	46c0      	nop			; (mov r8, r8)
    4e08:	00008a70 	.word	0x00008a70
    4e0c:	00008a78 	.word	0x00008a78

00004e10 <__sflush_r>:
    4e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4e12:	898a      	ldrh	r2, [r1, #12]
    4e14:	0005      	movs	r5, r0
    4e16:	000c      	movs	r4, r1
    4e18:	0713      	lsls	r3, r2, #28
    4e1a:	d460      	bmi.n	4ede <__sflush_r+0xce>
    4e1c:	684b      	ldr	r3, [r1, #4]
    4e1e:	2b00      	cmp	r3, #0
    4e20:	dc04      	bgt.n	4e2c <__sflush_r+0x1c>
    4e22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4e24:	2b00      	cmp	r3, #0
    4e26:	dc01      	bgt.n	4e2c <__sflush_r+0x1c>
    4e28:	2000      	movs	r0, #0
    4e2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4e2c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4e2e:	2f00      	cmp	r7, #0
    4e30:	d0fa      	beq.n	4e28 <__sflush_r+0x18>
    4e32:	2300      	movs	r3, #0
    4e34:	682e      	ldr	r6, [r5, #0]
    4e36:	602b      	str	r3, [r5, #0]
    4e38:	2380      	movs	r3, #128	; 0x80
    4e3a:	015b      	lsls	r3, r3, #5
    4e3c:	401a      	ands	r2, r3
    4e3e:	d034      	beq.n	4eaa <__sflush_r+0x9a>
    4e40:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4e42:	89a3      	ldrh	r3, [r4, #12]
    4e44:	075b      	lsls	r3, r3, #29
    4e46:	d506      	bpl.n	4e56 <__sflush_r+0x46>
    4e48:	6863      	ldr	r3, [r4, #4]
    4e4a:	1ac0      	subs	r0, r0, r3
    4e4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4e4e:	2b00      	cmp	r3, #0
    4e50:	d001      	beq.n	4e56 <__sflush_r+0x46>
    4e52:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4e54:	1ac0      	subs	r0, r0, r3
    4e56:	0002      	movs	r2, r0
    4e58:	6a21      	ldr	r1, [r4, #32]
    4e5a:	2300      	movs	r3, #0
    4e5c:	0028      	movs	r0, r5
    4e5e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4e60:	47b8      	blx	r7
    4e62:	89a1      	ldrh	r1, [r4, #12]
    4e64:	1c43      	adds	r3, r0, #1
    4e66:	d106      	bne.n	4e76 <__sflush_r+0x66>
    4e68:	682b      	ldr	r3, [r5, #0]
    4e6a:	2b1d      	cmp	r3, #29
    4e6c:	d831      	bhi.n	4ed2 <__sflush_r+0xc2>
    4e6e:	4a2c      	ldr	r2, [pc, #176]	; (4f20 <__sflush_r+0x110>)
    4e70:	40da      	lsrs	r2, r3
    4e72:	07d3      	lsls	r3, r2, #31
    4e74:	d52d      	bpl.n	4ed2 <__sflush_r+0xc2>
    4e76:	2300      	movs	r3, #0
    4e78:	6063      	str	r3, [r4, #4]
    4e7a:	6923      	ldr	r3, [r4, #16]
    4e7c:	6023      	str	r3, [r4, #0]
    4e7e:	04cb      	lsls	r3, r1, #19
    4e80:	d505      	bpl.n	4e8e <__sflush_r+0x7e>
    4e82:	1c43      	adds	r3, r0, #1
    4e84:	d102      	bne.n	4e8c <__sflush_r+0x7c>
    4e86:	682b      	ldr	r3, [r5, #0]
    4e88:	2b00      	cmp	r3, #0
    4e8a:	d100      	bne.n	4e8e <__sflush_r+0x7e>
    4e8c:	6560      	str	r0, [r4, #84]	; 0x54
    4e8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4e90:	602e      	str	r6, [r5, #0]
    4e92:	2900      	cmp	r1, #0
    4e94:	d0c8      	beq.n	4e28 <__sflush_r+0x18>
    4e96:	0023      	movs	r3, r4
    4e98:	3344      	adds	r3, #68	; 0x44
    4e9a:	4299      	cmp	r1, r3
    4e9c:	d002      	beq.n	4ea4 <__sflush_r+0x94>
    4e9e:	0028      	movs	r0, r5
    4ea0:	f000 fcbc 	bl	581c <_free_r>
    4ea4:	2000      	movs	r0, #0
    4ea6:	6360      	str	r0, [r4, #52]	; 0x34
    4ea8:	e7bf      	b.n	4e2a <__sflush_r+0x1a>
    4eaa:	2301      	movs	r3, #1
    4eac:	6a21      	ldr	r1, [r4, #32]
    4eae:	0028      	movs	r0, r5
    4eb0:	47b8      	blx	r7
    4eb2:	1c43      	adds	r3, r0, #1
    4eb4:	d1c5      	bne.n	4e42 <__sflush_r+0x32>
    4eb6:	682b      	ldr	r3, [r5, #0]
    4eb8:	2b00      	cmp	r3, #0
    4eba:	d0c2      	beq.n	4e42 <__sflush_r+0x32>
    4ebc:	2b1d      	cmp	r3, #29
    4ebe:	d001      	beq.n	4ec4 <__sflush_r+0xb4>
    4ec0:	2b16      	cmp	r3, #22
    4ec2:	d101      	bne.n	4ec8 <__sflush_r+0xb8>
    4ec4:	602e      	str	r6, [r5, #0]
    4ec6:	e7af      	b.n	4e28 <__sflush_r+0x18>
    4ec8:	2340      	movs	r3, #64	; 0x40
    4eca:	89a2      	ldrh	r2, [r4, #12]
    4ecc:	4313      	orrs	r3, r2
    4ece:	81a3      	strh	r3, [r4, #12]
    4ed0:	e7ab      	b.n	4e2a <__sflush_r+0x1a>
    4ed2:	2340      	movs	r3, #64	; 0x40
    4ed4:	430b      	orrs	r3, r1
    4ed6:	2001      	movs	r0, #1
    4ed8:	81a3      	strh	r3, [r4, #12]
    4eda:	4240      	negs	r0, r0
    4edc:	e7a5      	b.n	4e2a <__sflush_r+0x1a>
    4ede:	690f      	ldr	r7, [r1, #16]
    4ee0:	2f00      	cmp	r7, #0
    4ee2:	d0a1      	beq.n	4e28 <__sflush_r+0x18>
    4ee4:	680b      	ldr	r3, [r1, #0]
    4ee6:	600f      	str	r7, [r1, #0]
    4ee8:	1bdb      	subs	r3, r3, r7
    4eea:	9301      	str	r3, [sp, #4]
    4eec:	2300      	movs	r3, #0
    4eee:	0792      	lsls	r2, r2, #30
    4ef0:	d100      	bne.n	4ef4 <__sflush_r+0xe4>
    4ef2:	694b      	ldr	r3, [r1, #20]
    4ef4:	60a3      	str	r3, [r4, #8]
    4ef6:	9b01      	ldr	r3, [sp, #4]
    4ef8:	2b00      	cmp	r3, #0
    4efa:	dc00      	bgt.n	4efe <__sflush_r+0xee>
    4efc:	e794      	b.n	4e28 <__sflush_r+0x18>
    4efe:	9b01      	ldr	r3, [sp, #4]
    4f00:	003a      	movs	r2, r7
    4f02:	6a21      	ldr	r1, [r4, #32]
    4f04:	0028      	movs	r0, r5
    4f06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4f08:	47b0      	blx	r6
    4f0a:	2800      	cmp	r0, #0
    4f0c:	dc03      	bgt.n	4f16 <__sflush_r+0x106>
    4f0e:	2340      	movs	r3, #64	; 0x40
    4f10:	89a2      	ldrh	r2, [r4, #12]
    4f12:	4313      	orrs	r3, r2
    4f14:	e7df      	b.n	4ed6 <__sflush_r+0xc6>
    4f16:	9b01      	ldr	r3, [sp, #4]
    4f18:	183f      	adds	r7, r7, r0
    4f1a:	1a1b      	subs	r3, r3, r0
    4f1c:	9301      	str	r3, [sp, #4]
    4f1e:	e7ea      	b.n	4ef6 <__sflush_r+0xe6>
    4f20:	20400001 	.word	0x20400001

00004f24 <_fflush_r>:
    4f24:	690b      	ldr	r3, [r1, #16]
    4f26:	b570      	push	{r4, r5, r6, lr}
    4f28:	0005      	movs	r5, r0
    4f2a:	000c      	movs	r4, r1
    4f2c:	2b00      	cmp	r3, #0
    4f2e:	d101      	bne.n	4f34 <_fflush_r+0x10>
    4f30:	2000      	movs	r0, #0
    4f32:	bd70      	pop	{r4, r5, r6, pc}
    4f34:	2800      	cmp	r0, #0
    4f36:	d004      	beq.n	4f42 <_fflush_r+0x1e>
    4f38:	6983      	ldr	r3, [r0, #24]
    4f3a:	2b00      	cmp	r3, #0
    4f3c:	d101      	bne.n	4f42 <_fflush_r+0x1e>
    4f3e:	f000 f85f 	bl	5000 <__sinit>
    4f42:	4b0b      	ldr	r3, [pc, #44]	; (4f70 <_fflush_r+0x4c>)
    4f44:	429c      	cmp	r4, r3
    4f46:	d109      	bne.n	4f5c <_fflush_r+0x38>
    4f48:	686c      	ldr	r4, [r5, #4]
    4f4a:	220c      	movs	r2, #12
    4f4c:	5ea3      	ldrsh	r3, [r4, r2]
    4f4e:	2b00      	cmp	r3, #0
    4f50:	d0ee      	beq.n	4f30 <_fflush_r+0xc>
    4f52:	0021      	movs	r1, r4
    4f54:	0028      	movs	r0, r5
    4f56:	f7ff ff5b 	bl	4e10 <__sflush_r>
    4f5a:	e7ea      	b.n	4f32 <_fflush_r+0xe>
    4f5c:	4b05      	ldr	r3, [pc, #20]	; (4f74 <_fflush_r+0x50>)
    4f5e:	429c      	cmp	r4, r3
    4f60:	d101      	bne.n	4f66 <_fflush_r+0x42>
    4f62:	68ac      	ldr	r4, [r5, #8]
    4f64:	e7f1      	b.n	4f4a <_fflush_r+0x26>
    4f66:	4b04      	ldr	r3, [pc, #16]	; (4f78 <_fflush_r+0x54>)
    4f68:	429c      	cmp	r4, r3
    4f6a:	d1ee      	bne.n	4f4a <_fflush_r+0x26>
    4f6c:	68ec      	ldr	r4, [r5, #12]
    4f6e:	e7ec      	b.n	4f4a <_fflush_r+0x26>
    4f70:	00008aa0 	.word	0x00008aa0
    4f74:	00008ac0 	.word	0x00008ac0
    4f78:	00008a80 	.word	0x00008a80

00004f7c <_cleanup_r>:
    4f7c:	b510      	push	{r4, lr}
    4f7e:	4902      	ldr	r1, [pc, #8]	; (4f88 <_cleanup_r+0xc>)
    4f80:	f000 f8b2 	bl	50e8 <_fwalk_reent>
    4f84:	bd10      	pop	{r4, pc}
    4f86:	46c0      	nop			; (mov r8, r8)
    4f88:	00004f25 	.word	0x00004f25

00004f8c <std.isra.0>:
    4f8c:	2300      	movs	r3, #0
    4f8e:	b510      	push	{r4, lr}
    4f90:	0004      	movs	r4, r0
    4f92:	6003      	str	r3, [r0, #0]
    4f94:	6043      	str	r3, [r0, #4]
    4f96:	6083      	str	r3, [r0, #8]
    4f98:	8181      	strh	r1, [r0, #12]
    4f9a:	6643      	str	r3, [r0, #100]	; 0x64
    4f9c:	81c2      	strh	r2, [r0, #14]
    4f9e:	6103      	str	r3, [r0, #16]
    4fa0:	6143      	str	r3, [r0, #20]
    4fa2:	6183      	str	r3, [r0, #24]
    4fa4:	0019      	movs	r1, r3
    4fa6:	2208      	movs	r2, #8
    4fa8:	305c      	adds	r0, #92	; 0x5c
    4faa:	f7fe fa3e 	bl	342a <memset>
    4fae:	4b05      	ldr	r3, [pc, #20]	; (4fc4 <std.isra.0+0x38>)
    4fb0:	6224      	str	r4, [r4, #32]
    4fb2:	6263      	str	r3, [r4, #36]	; 0x24
    4fb4:	4b04      	ldr	r3, [pc, #16]	; (4fc8 <std.isra.0+0x3c>)
    4fb6:	62a3      	str	r3, [r4, #40]	; 0x28
    4fb8:	4b04      	ldr	r3, [pc, #16]	; (4fcc <std.isra.0+0x40>)
    4fba:	62e3      	str	r3, [r4, #44]	; 0x2c
    4fbc:	4b04      	ldr	r3, [pc, #16]	; (4fd0 <std.isra.0+0x44>)
    4fbe:	6323      	str	r3, [r4, #48]	; 0x30
    4fc0:	bd10      	pop	{r4, pc}
    4fc2:	46c0      	nop			; (mov r8, r8)
    4fc4:	00005c19 	.word	0x00005c19
    4fc8:	00005c41 	.word	0x00005c41
    4fcc:	00005c79 	.word	0x00005c79
    4fd0:	00005ca5 	.word	0x00005ca5

00004fd4 <__sfmoreglue>:
    4fd4:	b570      	push	{r4, r5, r6, lr}
    4fd6:	2568      	movs	r5, #104	; 0x68
    4fd8:	1e4a      	subs	r2, r1, #1
    4fda:	4355      	muls	r5, r2
    4fdc:	000e      	movs	r6, r1
    4fde:	0029      	movs	r1, r5
    4fe0:	3174      	adds	r1, #116	; 0x74
    4fe2:	f000 fc65 	bl	58b0 <_malloc_r>
    4fe6:	1e04      	subs	r4, r0, #0
    4fe8:	d008      	beq.n	4ffc <__sfmoreglue+0x28>
    4fea:	2100      	movs	r1, #0
    4fec:	002a      	movs	r2, r5
    4fee:	6001      	str	r1, [r0, #0]
    4ff0:	6046      	str	r6, [r0, #4]
    4ff2:	300c      	adds	r0, #12
    4ff4:	60a0      	str	r0, [r4, #8]
    4ff6:	3268      	adds	r2, #104	; 0x68
    4ff8:	f7fe fa17 	bl	342a <memset>
    4ffc:	0020      	movs	r0, r4
    4ffe:	bd70      	pop	{r4, r5, r6, pc}

00005000 <__sinit>:
    5000:	6983      	ldr	r3, [r0, #24]
    5002:	b513      	push	{r0, r1, r4, lr}
    5004:	0004      	movs	r4, r0
    5006:	2b00      	cmp	r3, #0
    5008:	d128      	bne.n	505c <__sinit+0x5c>
    500a:	6483      	str	r3, [r0, #72]	; 0x48
    500c:	64c3      	str	r3, [r0, #76]	; 0x4c
    500e:	6503      	str	r3, [r0, #80]	; 0x50
    5010:	4b13      	ldr	r3, [pc, #76]	; (5060 <__sinit+0x60>)
    5012:	4a14      	ldr	r2, [pc, #80]	; (5064 <__sinit+0x64>)
    5014:	681b      	ldr	r3, [r3, #0]
    5016:	6282      	str	r2, [r0, #40]	; 0x28
    5018:	9301      	str	r3, [sp, #4]
    501a:	4298      	cmp	r0, r3
    501c:	d101      	bne.n	5022 <__sinit+0x22>
    501e:	2301      	movs	r3, #1
    5020:	6183      	str	r3, [r0, #24]
    5022:	0020      	movs	r0, r4
    5024:	f000 f820 	bl	5068 <__sfp>
    5028:	6060      	str	r0, [r4, #4]
    502a:	0020      	movs	r0, r4
    502c:	f000 f81c 	bl	5068 <__sfp>
    5030:	60a0      	str	r0, [r4, #8]
    5032:	0020      	movs	r0, r4
    5034:	f000 f818 	bl	5068 <__sfp>
    5038:	2200      	movs	r2, #0
    503a:	60e0      	str	r0, [r4, #12]
    503c:	2104      	movs	r1, #4
    503e:	6860      	ldr	r0, [r4, #4]
    5040:	f7ff ffa4 	bl	4f8c <std.isra.0>
    5044:	2201      	movs	r2, #1
    5046:	2109      	movs	r1, #9
    5048:	68a0      	ldr	r0, [r4, #8]
    504a:	f7ff ff9f 	bl	4f8c <std.isra.0>
    504e:	2202      	movs	r2, #2
    5050:	2112      	movs	r1, #18
    5052:	68e0      	ldr	r0, [r4, #12]
    5054:	f7ff ff9a 	bl	4f8c <std.isra.0>
    5058:	2301      	movs	r3, #1
    505a:	61a3      	str	r3, [r4, #24]
    505c:	bd13      	pop	{r0, r1, r4, pc}
    505e:	46c0      	nop			; (mov r8, r8)
    5060:	00008a38 	.word	0x00008a38
    5064:	00004f7d 	.word	0x00004f7d

00005068 <__sfp>:
    5068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    506a:	4b1e      	ldr	r3, [pc, #120]	; (50e4 <__sfp+0x7c>)
    506c:	0007      	movs	r7, r0
    506e:	681e      	ldr	r6, [r3, #0]
    5070:	69b3      	ldr	r3, [r6, #24]
    5072:	2b00      	cmp	r3, #0
    5074:	d102      	bne.n	507c <__sfp+0x14>
    5076:	0030      	movs	r0, r6
    5078:	f7ff ffc2 	bl	5000 <__sinit>
    507c:	3648      	adds	r6, #72	; 0x48
    507e:	68b4      	ldr	r4, [r6, #8]
    5080:	6873      	ldr	r3, [r6, #4]
    5082:	3b01      	subs	r3, #1
    5084:	d504      	bpl.n	5090 <__sfp+0x28>
    5086:	6833      	ldr	r3, [r6, #0]
    5088:	2b00      	cmp	r3, #0
    508a:	d007      	beq.n	509c <__sfp+0x34>
    508c:	6836      	ldr	r6, [r6, #0]
    508e:	e7f6      	b.n	507e <__sfp+0x16>
    5090:	220c      	movs	r2, #12
    5092:	5ea5      	ldrsh	r5, [r4, r2]
    5094:	2d00      	cmp	r5, #0
    5096:	d00d      	beq.n	50b4 <__sfp+0x4c>
    5098:	3468      	adds	r4, #104	; 0x68
    509a:	e7f2      	b.n	5082 <__sfp+0x1a>
    509c:	2104      	movs	r1, #4
    509e:	0038      	movs	r0, r7
    50a0:	f7ff ff98 	bl	4fd4 <__sfmoreglue>
    50a4:	6030      	str	r0, [r6, #0]
    50a6:	2800      	cmp	r0, #0
    50a8:	d1f0      	bne.n	508c <__sfp+0x24>
    50aa:	230c      	movs	r3, #12
    50ac:	0004      	movs	r4, r0
    50ae:	603b      	str	r3, [r7, #0]
    50b0:	0020      	movs	r0, r4
    50b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50b4:	2301      	movs	r3, #1
    50b6:	0020      	movs	r0, r4
    50b8:	425b      	negs	r3, r3
    50ba:	81e3      	strh	r3, [r4, #14]
    50bc:	3302      	adds	r3, #2
    50be:	81a3      	strh	r3, [r4, #12]
    50c0:	6665      	str	r5, [r4, #100]	; 0x64
    50c2:	6025      	str	r5, [r4, #0]
    50c4:	60a5      	str	r5, [r4, #8]
    50c6:	6065      	str	r5, [r4, #4]
    50c8:	6125      	str	r5, [r4, #16]
    50ca:	6165      	str	r5, [r4, #20]
    50cc:	61a5      	str	r5, [r4, #24]
    50ce:	2208      	movs	r2, #8
    50d0:	0029      	movs	r1, r5
    50d2:	305c      	adds	r0, #92	; 0x5c
    50d4:	f7fe f9a9 	bl	342a <memset>
    50d8:	6365      	str	r5, [r4, #52]	; 0x34
    50da:	63a5      	str	r5, [r4, #56]	; 0x38
    50dc:	64a5      	str	r5, [r4, #72]	; 0x48
    50de:	64e5      	str	r5, [r4, #76]	; 0x4c
    50e0:	e7e6      	b.n	50b0 <__sfp+0x48>
    50e2:	46c0      	nop			; (mov r8, r8)
    50e4:	00008a38 	.word	0x00008a38

000050e8 <_fwalk_reent>:
    50e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    50ea:	0004      	movs	r4, r0
    50ec:	0007      	movs	r7, r0
    50ee:	2600      	movs	r6, #0
    50f0:	9101      	str	r1, [sp, #4]
    50f2:	3448      	adds	r4, #72	; 0x48
    50f4:	2c00      	cmp	r4, #0
    50f6:	d101      	bne.n	50fc <_fwalk_reent+0x14>
    50f8:	0030      	movs	r0, r6
    50fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    50fc:	6863      	ldr	r3, [r4, #4]
    50fe:	68a5      	ldr	r5, [r4, #8]
    5100:	9300      	str	r3, [sp, #0]
    5102:	9b00      	ldr	r3, [sp, #0]
    5104:	3b01      	subs	r3, #1
    5106:	9300      	str	r3, [sp, #0]
    5108:	d501      	bpl.n	510e <_fwalk_reent+0x26>
    510a:	6824      	ldr	r4, [r4, #0]
    510c:	e7f2      	b.n	50f4 <_fwalk_reent+0xc>
    510e:	89ab      	ldrh	r3, [r5, #12]
    5110:	2b01      	cmp	r3, #1
    5112:	d908      	bls.n	5126 <_fwalk_reent+0x3e>
    5114:	220e      	movs	r2, #14
    5116:	5eab      	ldrsh	r3, [r5, r2]
    5118:	3301      	adds	r3, #1
    511a:	d004      	beq.n	5126 <_fwalk_reent+0x3e>
    511c:	0029      	movs	r1, r5
    511e:	0038      	movs	r0, r7
    5120:	9b01      	ldr	r3, [sp, #4]
    5122:	4798      	blx	r3
    5124:	4306      	orrs	r6, r0
    5126:	3568      	adds	r5, #104	; 0x68
    5128:	e7eb      	b.n	5102 <_fwalk_reent+0x1a>
	...

0000512c <_localeconv_r>:
    512c:	4b03      	ldr	r3, [pc, #12]	; (513c <_localeconv_r+0x10>)
    512e:	681b      	ldr	r3, [r3, #0]
    5130:	6a18      	ldr	r0, [r3, #32]
    5132:	2800      	cmp	r0, #0
    5134:	d100      	bne.n	5138 <_localeconv_r+0xc>
    5136:	4802      	ldr	r0, [pc, #8]	; (5140 <_localeconv_r+0x14>)
    5138:	30f0      	adds	r0, #240	; 0xf0
    513a:	4770      	bx	lr
    513c:	2000000c 	.word	0x2000000c
    5140:	20000070 	.word	0x20000070

00005144 <__swhatbuf_r>:
    5144:	b570      	push	{r4, r5, r6, lr}
    5146:	000e      	movs	r6, r1
    5148:	001d      	movs	r5, r3
    514a:	230e      	movs	r3, #14
    514c:	5ec9      	ldrsh	r1, [r1, r3]
    514e:	b090      	sub	sp, #64	; 0x40
    5150:	0014      	movs	r4, r2
    5152:	2900      	cmp	r1, #0
    5154:	da07      	bge.n	5166 <__swhatbuf_r+0x22>
    5156:	2300      	movs	r3, #0
    5158:	602b      	str	r3, [r5, #0]
    515a:	89b3      	ldrh	r3, [r6, #12]
    515c:	061b      	lsls	r3, r3, #24
    515e:	d411      	bmi.n	5184 <__swhatbuf_r+0x40>
    5160:	2380      	movs	r3, #128	; 0x80
    5162:	00db      	lsls	r3, r3, #3
    5164:	e00f      	b.n	5186 <__swhatbuf_r+0x42>
    5166:	aa01      	add	r2, sp, #4
    5168:	f000 fdc8 	bl	5cfc <_fstat_r>
    516c:	2800      	cmp	r0, #0
    516e:	dbf2      	blt.n	5156 <__swhatbuf_r+0x12>
    5170:	22f0      	movs	r2, #240	; 0xf0
    5172:	9b02      	ldr	r3, [sp, #8]
    5174:	0212      	lsls	r2, r2, #8
    5176:	4013      	ands	r3, r2
    5178:	4a05      	ldr	r2, [pc, #20]	; (5190 <__swhatbuf_r+0x4c>)
    517a:	189b      	adds	r3, r3, r2
    517c:	425a      	negs	r2, r3
    517e:	4153      	adcs	r3, r2
    5180:	602b      	str	r3, [r5, #0]
    5182:	e7ed      	b.n	5160 <__swhatbuf_r+0x1c>
    5184:	2340      	movs	r3, #64	; 0x40
    5186:	2000      	movs	r0, #0
    5188:	6023      	str	r3, [r4, #0]
    518a:	b010      	add	sp, #64	; 0x40
    518c:	bd70      	pop	{r4, r5, r6, pc}
    518e:	46c0      	nop			; (mov r8, r8)
    5190:	ffffe000 	.word	0xffffe000

00005194 <__smakebuf_r>:
    5194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5196:	2602      	movs	r6, #2
    5198:	898b      	ldrh	r3, [r1, #12]
    519a:	0005      	movs	r5, r0
    519c:	000c      	movs	r4, r1
    519e:	4233      	tst	r3, r6
    51a0:	d006      	beq.n	51b0 <__smakebuf_r+0x1c>
    51a2:	0023      	movs	r3, r4
    51a4:	3347      	adds	r3, #71	; 0x47
    51a6:	6023      	str	r3, [r4, #0]
    51a8:	6123      	str	r3, [r4, #16]
    51aa:	2301      	movs	r3, #1
    51ac:	6163      	str	r3, [r4, #20]
    51ae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    51b0:	ab01      	add	r3, sp, #4
    51b2:	466a      	mov	r2, sp
    51b4:	f7ff ffc6 	bl	5144 <__swhatbuf_r>
    51b8:	9900      	ldr	r1, [sp, #0]
    51ba:	0007      	movs	r7, r0
    51bc:	0028      	movs	r0, r5
    51be:	f000 fb77 	bl	58b0 <_malloc_r>
    51c2:	2800      	cmp	r0, #0
    51c4:	d106      	bne.n	51d4 <__smakebuf_r+0x40>
    51c6:	220c      	movs	r2, #12
    51c8:	5ea3      	ldrsh	r3, [r4, r2]
    51ca:	059a      	lsls	r2, r3, #22
    51cc:	d4ef      	bmi.n	51ae <__smakebuf_r+0x1a>
    51ce:	431e      	orrs	r6, r3
    51d0:	81a6      	strh	r6, [r4, #12]
    51d2:	e7e6      	b.n	51a2 <__smakebuf_r+0xe>
    51d4:	4b0d      	ldr	r3, [pc, #52]	; (520c <__smakebuf_r+0x78>)
    51d6:	62ab      	str	r3, [r5, #40]	; 0x28
    51d8:	2380      	movs	r3, #128	; 0x80
    51da:	89a2      	ldrh	r2, [r4, #12]
    51dc:	6020      	str	r0, [r4, #0]
    51de:	4313      	orrs	r3, r2
    51e0:	81a3      	strh	r3, [r4, #12]
    51e2:	9b00      	ldr	r3, [sp, #0]
    51e4:	6120      	str	r0, [r4, #16]
    51e6:	6163      	str	r3, [r4, #20]
    51e8:	9b01      	ldr	r3, [sp, #4]
    51ea:	2b00      	cmp	r3, #0
    51ec:	d00a      	beq.n	5204 <__smakebuf_r+0x70>
    51ee:	230e      	movs	r3, #14
    51f0:	5ee1      	ldrsh	r1, [r4, r3]
    51f2:	0028      	movs	r0, r5
    51f4:	f000 fd94 	bl	5d20 <_isatty_r>
    51f8:	2800      	cmp	r0, #0
    51fa:	d003      	beq.n	5204 <__smakebuf_r+0x70>
    51fc:	2301      	movs	r3, #1
    51fe:	89a2      	ldrh	r2, [r4, #12]
    5200:	4313      	orrs	r3, r2
    5202:	81a3      	strh	r3, [r4, #12]
    5204:	89a0      	ldrh	r0, [r4, #12]
    5206:	4338      	orrs	r0, r7
    5208:	81a0      	strh	r0, [r4, #12]
    520a:	e7d0      	b.n	51ae <__smakebuf_r+0x1a>
    520c:	00004f7d 	.word	0x00004f7d

00005210 <malloc>:
    5210:	b510      	push	{r4, lr}
    5212:	4b03      	ldr	r3, [pc, #12]	; (5220 <malloc+0x10>)
    5214:	0001      	movs	r1, r0
    5216:	6818      	ldr	r0, [r3, #0]
    5218:	f000 fb4a 	bl	58b0 <_malloc_r>
    521c:	bd10      	pop	{r4, pc}
    521e:	46c0      	nop			; (mov r8, r8)
    5220:	2000000c 	.word	0x2000000c

00005224 <memchr>:
    5224:	b2c9      	uxtb	r1, r1
    5226:	1882      	adds	r2, r0, r2
    5228:	4290      	cmp	r0, r2
    522a:	d101      	bne.n	5230 <memchr+0xc>
    522c:	2000      	movs	r0, #0
    522e:	4770      	bx	lr
    5230:	7803      	ldrb	r3, [r0, #0]
    5232:	428b      	cmp	r3, r1
    5234:	d0fb      	beq.n	522e <memchr+0xa>
    5236:	3001      	adds	r0, #1
    5238:	e7f6      	b.n	5228 <memchr+0x4>

0000523a <_Balloc>:
    523a:	b570      	push	{r4, r5, r6, lr}
    523c:	6a46      	ldr	r6, [r0, #36]	; 0x24
    523e:	0004      	movs	r4, r0
    5240:	000d      	movs	r5, r1
    5242:	2e00      	cmp	r6, #0
    5244:	d107      	bne.n	5256 <_Balloc+0x1c>
    5246:	2010      	movs	r0, #16
    5248:	f7ff ffe2 	bl	5210 <malloc>
    524c:	6260      	str	r0, [r4, #36]	; 0x24
    524e:	6046      	str	r6, [r0, #4]
    5250:	6086      	str	r6, [r0, #8]
    5252:	6006      	str	r6, [r0, #0]
    5254:	60c6      	str	r6, [r0, #12]
    5256:	6a66      	ldr	r6, [r4, #36]	; 0x24
    5258:	68f3      	ldr	r3, [r6, #12]
    525a:	2b00      	cmp	r3, #0
    525c:	d013      	beq.n	5286 <_Balloc+0x4c>
    525e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5260:	00aa      	lsls	r2, r5, #2
    5262:	68db      	ldr	r3, [r3, #12]
    5264:	189b      	adds	r3, r3, r2
    5266:	6818      	ldr	r0, [r3, #0]
    5268:	2800      	cmp	r0, #0
    526a:	d118      	bne.n	529e <_Balloc+0x64>
    526c:	2101      	movs	r1, #1
    526e:	000e      	movs	r6, r1
    5270:	40ae      	lsls	r6, r5
    5272:	1d72      	adds	r2, r6, #5
    5274:	0092      	lsls	r2, r2, #2
    5276:	0020      	movs	r0, r4
    5278:	f000 fac2 	bl	5800 <_calloc_r>
    527c:	2800      	cmp	r0, #0
    527e:	d00c      	beq.n	529a <_Balloc+0x60>
    5280:	6045      	str	r5, [r0, #4]
    5282:	6086      	str	r6, [r0, #8]
    5284:	e00d      	b.n	52a2 <_Balloc+0x68>
    5286:	2221      	movs	r2, #33	; 0x21
    5288:	2104      	movs	r1, #4
    528a:	0020      	movs	r0, r4
    528c:	f000 fab8 	bl	5800 <_calloc_r>
    5290:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5292:	60f0      	str	r0, [r6, #12]
    5294:	68db      	ldr	r3, [r3, #12]
    5296:	2b00      	cmp	r3, #0
    5298:	d1e1      	bne.n	525e <_Balloc+0x24>
    529a:	2000      	movs	r0, #0
    529c:	bd70      	pop	{r4, r5, r6, pc}
    529e:	6802      	ldr	r2, [r0, #0]
    52a0:	601a      	str	r2, [r3, #0]
    52a2:	2300      	movs	r3, #0
    52a4:	6103      	str	r3, [r0, #16]
    52a6:	60c3      	str	r3, [r0, #12]
    52a8:	e7f8      	b.n	529c <_Balloc+0x62>

000052aa <_Bfree>:
    52aa:	b570      	push	{r4, r5, r6, lr}
    52ac:	6a44      	ldr	r4, [r0, #36]	; 0x24
    52ae:	0006      	movs	r6, r0
    52b0:	000d      	movs	r5, r1
    52b2:	2c00      	cmp	r4, #0
    52b4:	d107      	bne.n	52c6 <_Bfree+0x1c>
    52b6:	2010      	movs	r0, #16
    52b8:	f7ff ffaa 	bl	5210 <malloc>
    52bc:	6270      	str	r0, [r6, #36]	; 0x24
    52be:	6044      	str	r4, [r0, #4]
    52c0:	6084      	str	r4, [r0, #8]
    52c2:	6004      	str	r4, [r0, #0]
    52c4:	60c4      	str	r4, [r0, #12]
    52c6:	2d00      	cmp	r5, #0
    52c8:	d007      	beq.n	52da <_Bfree+0x30>
    52ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
    52cc:	686a      	ldr	r2, [r5, #4]
    52ce:	68db      	ldr	r3, [r3, #12]
    52d0:	0092      	lsls	r2, r2, #2
    52d2:	189b      	adds	r3, r3, r2
    52d4:	681a      	ldr	r2, [r3, #0]
    52d6:	602a      	str	r2, [r5, #0]
    52d8:	601d      	str	r5, [r3, #0]
    52da:	bd70      	pop	{r4, r5, r6, pc}

000052dc <__multadd>:
    52dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    52de:	001e      	movs	r6, r3
    52e0:	2314      	movs	r3, #20
    52e2:	469c      	mov	ip, r3
    52e4:	0007      	movs	r7, r0
    52e6:	000c      	movs	r4, r1
    52e8:	2000      	movs	r0, #0
    52ea:	690d      	ldr	r5, [r1, #16]
    52ec:	448c      	add	ip, r1
    52ee:	4663      	mov	r3, ip
    52f0:	8819      	ldrh	r1, [r3, #0]
    52f2:	681b      	ldr	r3, [r3, #0]
    52f4:	4351      	muls	r1, r2
    52f6:	0c1b      	lsrs	r3, r3, #16
    52f8:	4353      	muls	r3, r2
    52fa:	1989      	adds	r1, r1, r6
    52fc:	0c0e      	lsrs	r6, r1, #16
    52fe:	199b      	adds	r3, r3, r6
    5300:	b289      	uxth	r1, r1
    5302:	0c1e      	lsrs	r6, r3, #16
    5304:	041b      	lsls	r3, r3, #16
    5306:	185b      	adds	r3, r3, r1
    5308:	4661      	mov	r1, ip
    530a:	3001      	adds	r0, #1
    530c:	c108      	stmia	r1!, {r3}
    530e:	468c      	mov	ip, r1
    5310:	4285      	cmp	r5, r0
    5312:	dcec      	bgt.n	52ee <__multadd+0x12>
    5314:	2e00      	cmp	r6, #0
    5316:	d01b      	beq.n	5350 <__multadd+0x74>
    5318:	68a3      	ldr	r3, [r4, #8]
    531a:	429d      	cmp	r5, r3
    531c:	db12      	blt.n	5344 <__multadd+0x68>
    531e:	6863      	ldr	r3, [r4, #4]
    5320:	0038      	movs	r0, r7
    5322:	1c59      	adds	r1, r3, #1
    5324:	f7ff ff89 	bl	523a <_Balloc>
    5328:	0021      	movs	r1, r4
    532a:	6923      	ldr	r3, [r4, #16]
    532c:	9001      	str	r0, [sp, #4]
    532e:	1c9a      	adds	r2, r3, #2
    5330:	0092      	lsls	r2, r2, #2
    5332:	310c      	adds	r1, #12
    5334:	300c      	adds	r0, #12
    5336:	f7fe f86f 	bl	3418 <memcpy>
    533a:	0021      	movs	r1, r4
    533c:	0038      	movs	r0, r7
    533e:	f7ff ffb4 	bl	52aa <_Bfree>
    5342:	9c01      	ldr	r4, [sp, #4]
    5344:	1d2b      	adds	r3, r5, #4
    5346:	009b      	lsls	r3, r3, #2
    5348:	18e3      	adds	r3, r4, r3
    534a:	3501      	adds	r5, #1
    534c:	605e      	str	r6, [r3, #4]
    534e:	6125      	str	r5, [r4, #16]
    5350:	0020      	movs	r0, r4
    5352:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00005354 <__hi0bits>:
    5354:	0003      	movs	r3, r0
    5356:	0c02      	lsrs	r2, r0, #16
    5358:	2000      	movs	r0, #0
    535a:	4282      	cmp	r2, r0
    535c:	d101      	bne.n	5362 <__hi0bits+0xe>
    535e:	041b      	lsls	r3, r3, #16
    5360:	3010      	adds	r0, #16
    5362:	0e1a      	lsrs	r2, r3, #24
    5364:	d101      	bne.n	536a <__hi0bits+0x16>
    5366:	3008      	adds	r0, #8
    5368:	021b      	lsls	r3, r3, #8
    536a:	0f1a      	lsrs	r2, r3, #28
    536c:	d101      	bne.n	5372 <__hi0bits+0x1e>
    536e:	3004      	adds	r0, #4
    5370:	011b      	lsls	r3, r3, #4
    5372:	0f9a      	lsrs	r2, r3, #30
    5374:	d101      	bne.n	537a <__hi0bits+0x26>
    5376:	3002      	adds	r0, #2
    5378:	009b      	lsls	r3, r3, #2
    537a:	2b00      	cmp	r3, #0
    537c:	db03      	blt.n	5386 <__hi0bits+0x32>
    537e:	3001      	adds	r0, #1
    5380:	005b      	lsls	r3, r3, #1
    5382:	d400      	bmi.n	5386 <__hi0bits+0x32>
    5384:	2020      	movs	r0, #32
    5386:	4770      	bx	lr

00005388 <__lo0bits>:
    5388:	2207      	movs	r2, #7
    538a:	6803      	ldr	r3, [r0, #0]
    538c:	b510      	push	{r4, lr}
    538e:	0001      	movs	r1, r0
    5390:	401a      	ands	r2, r3
    5392:	d00d      	beq.n	53b0 <__lo0bits+0x28>
    5394:	2401      	movs	r4, #1
    5396:	2000      	movs	r0, #0
    5398:	4223      	tst	r3, r4
    539a:	d105      	bne.n	53a8 <__lo0bits+0x20>
    539c:	3002      	adds	r0, #2
    539e:	4203      	tst	r3, r0
    53a0:	d003      	beq.n	53aa <__lo0bits+0x22>
    53a2:	40e3      	lsrs	r3, r4
    53a4:	0020      	movs	r0, r4
    53a6:	600b      	str	r3, [r1, #0]
    53a8:	bd10      	pop	{r4, pc}
    53aa:	089b      	lsrs	r3, r3, #2
    53ac:	600b      	str	r3, [r1, #0]
    53ae:	e7fb      	b.n	53a8 <__lo0bits+0x20>
    53b0:	b29c      	uxth	r4, r3
    53b2:	0010      	movs	r0, r2
    53b4:	2c00      	cmp	r4, #0
    53b6:	d101      	bne.n	53bc <__lo0bits+0x34>
    53b8:	2010      	movs	r0, #16
    53ba:	0c1b      	lsrs	r3, r3, #16
    53bc:	b2da      	uxtb	r2, r3
    53be:	2a00      	cmp	r2, #0
    53c0:	d101      	bne.n	53c6 <__lo0bits+0x3e>
    53c2:	3008      	adds	r0, #8
    53c4:	0a1b      	lsrs	r3, r3, #8
    53c6:	071a      	lsls	r2, r3, #28
    53c8:	d101      	bne.n	53ce <__lo0bits+0x46>
    53ca:	3004      	adds	r0, #4
    53cc:	091b      	lsrs	r3, r3, #4
    53ce:	079a      	lsls	r2, r3, #30
    53d0:	d101      	bne.n	53d6 <__lo0bits+0x4e>
    53d2:	3002      	adds	r0, #2
    53d4:	089b      	lsrs	r3, r3, #2
    53d6:	07da      	lsls	r2, r3, #31
    53d8:	d4e8      	bmi.n	53ac <__lo0bits+0x24>
    53da:	085b      	lsrs	r3, r3, #1
    53dc:	d001      	beq.n	53e2 <__lo0bits+0x5a>
    53de:	3001      	adds	r0, #1
    53e0:	e7e4      	b.n	53ac <__lo0bits+0x24>
    53e2:	2020      	movs	r0, #32
    53e4:	e7e0      	b.n	53a8 <__lo0bits+0x20>

000053e6 <__i2b>:
    53e6:	b510      	push	{r4, lr}
    53e8:	000c      	movs	r4, r1
    53ea:	2101      	movs	r1, #1
    53ec:	f7ff ff25 	bl	523a <_Balloc>
    53f0:	2301      	movs	r3, #1
    53f2:	6144      	str	r4, [r0, #20]
    53f4:	6103      	str	r3, [r0, #16]
    53f6:	bd10      	pop	{r4, pc}

000053f8 <__multiply>:
    53f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    53fa:	690b      	ldr	r3, [r1, #16]
    53fc:	0015      	movs	r5, r2
    53fe:	6912      	ldr	r2, [r2, #16]
    5400:	b089      	sub	sp, #36	; 0x24
    5402:	000c      	movs	r4, r1
    5404:	4293      	cmp	r3, r2
    5406:	da01      	bge.n	540c <__multiply+0x14>
    5408:	002c      	movs	r4, r5
    540a:	000d      	movs	r5, r1
    540c:	6927      	ldr	r7, [r4, #16]
    540e:	692e      	ldr	r6, [r5, #16]
    5410:	68a2      	ldr	r2, [r4, #8]
    5412:	19bb      	adds	r3, r7, r6
    5414:	6861      	ldr	r1, [r4, #4]
    5416:	9301      	str	r3, [sp, #4]
    5418:	4293      	cmp	r3, r2
    541a:	dd00      	ble.n	541e <__multiply+0x26>
    541c:	3101      	adds	r1, #1
    541e:	f7ff ff0c 	bl	523a <_Balloc>
    5422:	0003      	movs	r3, r0
    5424:	3314      	adds	r3, #20
    5426:	9300      	str	r3, [sp, #0]
    5428:	9a00      	ldr	r2, [sp, #0]
    542a:	19bb      	adds	r3, r7, r6
    542c:	4694      	mov	ip, r2
    542e:	009b      	lsls	r3, r3, #2
    5430:	449c      	add	ip, r3
    5432:	0013      	movs	r3, r2
    5434:	2200      	movs	r2, #0
    5436:	9004      	str	r0, [sp, #16]
    5438:	4563      	cmp	r3, ip
    543a:	d31c      	bcc.n	5476 <__multiply+0x7e>
    543c:	002a      	movs	r2, r5
    543e:	3414      	adds	r4, #20
    5440:	00bf      	lsls	r7, r7, #2
    5442:	19e3      	adds	r3, r4, r7
    5444:	3214      	adds	r2, #20
    5446:	00b6      	lsls	r6, r6, #2
    5448:	9305      	str	r3, [sp, #20]
    544a:	1993      	adds	r3, r2, r6
    544c:	9402      	str	r4, [sp, #8]
    544e:	9306      	str	r3, [sp, #24]
    5450:	9b06      	ldr	r3, [sp, #24]
    5452:	429a      	cmp	r2, r3
    5454:	d311      	bcc.n	547a <__multiply+0x82>
    5456:	9b01      	ldr	r3, [sp, #4]
    5458:	2b00      	cmp	r3, #0
    545a:	dd06      	ble.n	546a <__multiply+0x72>
    545c:	2304      	movs	r3, #4
    545e:	425b      	negs	r3, r3
    5460:	449c      	add	ip, r3
    5462:	4663      	mov	r3, ip
    5464:	681b      	ldr	r3, [r3, #0]
    5466:	2b00      	cmp	r3, #0
    5468:	d051      	beq.n	550e <__multiply+0x116>
    546a:	9b04      	ldr	r3, [sp, #16]
    546c:	9a01      	ldr	r2, [sp, #4]
    546e:	0018      	movs	r0, r3
    5470:	611a      	str	r2, [r3, #16]
    5472:	b009      	add	sp, #36	; 0x24
    5474:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5476:	c304      	stmia	r3!, {r2}
    5478:	e7de      	b.n	5438 <__multiply+0x40>
    547a:	8814      	ldrh	r4, [r2, #0]
    547c:	2c00      	cmp	r4, #0
    547e:	d01e      	beq.n	54be <__multiply+0xc6>
    5480:	2600      	movs	r6, #0
    5482:	9d00      	ldr	r5, [sp, #0]
    5484:	9f02      	ldr	r7, [sp, #8]
    5486:	cf01      	ldmia	r7!, {r0}
    5488:	9507      	str	r5, [sp, #28]
    548a:	cd08      	ldmia	r5!, {r3}
    548c:	9303      	str	r3, [sp, #12]
    548e:	b283      	uxth	r3, r0
    5490:	4363      	muls	r3, r4
    5492:	0019      	movs	r1, r3
    5494:	466b      	mov	r3, sp
    5496:	0c00      	lsrs	r0, r0, #16
    5498:	899b      	ldrh	r3, [r3, #12]
    549a:	4360      	muls	r0, r4
    549c:	18cb      	adds	r3, r1, r3
    549e:	9903      	ldr	r1, [sp, #12]
    54a0:	199b      	adds	r3, r3, r6
    54a2:	0c09      	lsrs	r1, r1, #16
    54a4:	1841      	adds	r1, r0, r1
    54a6:	0c18      	lsrs	r0, r3, #16
    54a8:	1809      	adds	r1, r1, r0
    54aa:	0c0e      	lsrs	r6, r1, #16
    54ac:	b29b      	uxth	r3, r3
    54ae:	0409      	lsls	r1, r1, #16
    54b0:	430b      	orrs	r3, r1
    54b2:	9907      	ldr	r1, [sp, #28]
    54b4:	600b      	str	r3, [r1, #0]
    54b6:	9b05      	ldr	r3, [sp, #20]
    54b8:	42bb      	cmp	r3, r7
    54ba:	d8e4      	bhi.n	5486 <__multiply+0x8e>
    54bc:	602e      	str	r6, [r5, #0]
    54be:	6813      	ldr	r3, [r2, #0]
    54c0:	0c1b      	lsrs	r3, r3, #16
    54c2:	9303      	str	r3, [sp, #12]
    54c4:	d01e      	beq.n	5504 <__multiply+0x10c>
    54c6:	2600      	movs	r6, #0
    54c8:	9b00      	ldr	r3, [sp, #0]
    54ca:	9c02      	ldr	r4, [sp, #8]
    54cc:	681b      	ldr	r3, [r3, #0]
    54ce:	9800      	ldr	r0, [sp, #0]
    54d0:	0007      	movs	r7, r0
    54d2:	8821      	ldrh	r1, [r4, #0]
    54d4:	9d03      	ldr	r5, [sp, #12]
    54d6:	b29b      	uxth	r3, r3
    54d8:	4369      	muls	r1, r5
    54da:	c820      	ldmia	r0!, {r5}
    54dc:	0c2d      	lsrs	r5, r5, #16
    54de:	1949      	adds	r1, r1, r5
    54e0:	198e      	adds	r6, r1, r6
    54e2:	0431      	lsls	r1, r6, #16
    54e4:	430b      	orrs	r3, r1
    54e6:	603b      	str	r3, [r7, #0]
    54e8:	cc08      	ldmia	r4!, {r3}
    54ea:	9903      	ldr	r1, [sp, #12]
    54ec:	0c1b      	lsrs	r3, r3, #16
    54ee:	434b      	muls	r3, r1
    54f0:	6879      	ldr	r1, [r7, #4]
    54f2:	0c36      	lsrs	r6, r6, #16
    54f4:	b289      	uxth	r1, r1
    54f6:	185b      	adds	r3, r3, r1
    54f8:	9905      	ldr	r1, [sp, #20]
    54fa:	199b      	adds	r3, r3, r6
    54fc:	0c1e      	lsrs	r6, r3, #16
    54fe:	42a1      	cmp	r1, r4
    5500:	d8e6      	bhi.n	54d0 <__multiply+0xd8>
    5502:	6003      	str	r3, [r0, #0]
    5504:	9b00      	ldr	r3, [sp, #0]
    5506:	3204      	adds	r2, #4
    5508:	3304      	adds	r3, #4
    550a:	9300      	str	r3, [sp, #0]
    550c:	e7a0      	b.n	5450 <__multiply+0x58>
    550e:	9b01      	ldr	r3, [sp, #4]
    5510:	3b01      	subs	r3, #1
    5512:	9301      	str	r3, [sp, #4]
    5514:	e79f      	b.n	5456 <__multiply+0x5e>
	...

00005518 <__pow5mult>:
    5518:	2303      	movs	r3, #3
    551a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    551c:	4013      	ands	r3, r2
    551e:	0005      	movs	r5, r0
    5520:	000e      	movs	r6, r1
    5522:	0014      	movs	r4, r2
    5524:	2b00      	cmp	r3, #0
    5526:	d008      	beq.n	553a <__pow5mult+0x22>
    5528:	4922      	ldr	r1, [pc, #136]	; (55b4 <__pow5mult+0x9c>)
    552a:	3b01      	subs	r3, #1
    552c:	009a      	lsls	r2, r3, #2
    552e:	5852      	ldr	r2, [r2, r1]
    5530:	2300      	movs	r3, #0
    5532:	0031      	movs	r1, r6
    5534:	f7ff fed2 	bl	52dc <__multadd>
    5538:	0006      	movs	r6, r0
    553a:	10a3      	asrs	r3, r4, #2
    553c:	9301      	str	r3, [sp, #4]
    553e:	d036      	beq.n	55ae <__pow5mult+0x96>
    5540:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    5542:	2c00      	cmp	r4, #0
    5544:	d107      	bne.n	5556 <__pow5mult+0x3e>
    5546:	2010      	movs	r0, #16
    5548:	f7ff fe62 	bl	5210 <malloc>
    554c:	6268      	str	r0, [r5, #36]	; 0x24
    554e:	6044      	str	r4, [r0, #4]
    5550:	6084      	str	r4, [r0, #8]
    5552:	6004      	str	r4, [r0, #0]
    5554:	60c4      	str	r4, [r0, #12]
    5556:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    5558:	68bc      	ldr	r4, [r7, #8]
    555a:	2c00      	cmp	r4, #0
    555c:	d107      	bne.n	556e <__pow5mult+0x56>
    555e:	4916      	ldr	r1, [pc, #88]	; (55b8 <__pow5mult+0xa0>)
    5560:	0028      	movs	r0, r5
    5562:	f7ff ff40 	bl	53e6 <__i2b>
    5566:	2300      	movs	r3, #0
    5568:	0004      	movs	r4, r0
    556a:	60b8      	str	r0, [r7, #8]
    556c:	6003      	str	r3, [r0, #0]
    556e:	2201      	movs	r2, #1
    5570:	9b01      	ldr	r3, [sp, #4]
    5572:	4213      	tst	r3, r2
    5574:	d00a      	beq.n	558c <__pow5mult+0x74>
    5576:	0031      	movs	r1, r6
    5578:	0022      	movs	r2, r4
    557a:	0028      	movs	r0, r5
    557c:	f7ff ff3c 	bl	53f8 <__multiply>
    5580:	0007      	movs	r7, r0
    5582:	0031      	movs	r1, r6
    5584:	0028      	movs	r0, r5
    5586:	f7ff fe90 	bl	52aa <_Bfree>
    558a:	003e      	movs	r6, r7
    558c:	9b01      	ldr	r3, [sp, #4]
    558e:	105b      	asrs	r3, r3, #1
    5590:	9301      	str	r3, [sp, #4]
    5592:	d00c      	beq.n	55ae <__pow5mult+0x96>
    5594:	6820      	ldr	r0, [r4, #0]
    5596:	2800      	cmp	r0, #0
    5598:	d107      	bne.n	55aa <__pow5mult+0x92>
    559a:	0022      	movs	r2, r4
    559c:	0021      	movs	r1, r4
    559e:	0028      	movs	r0, r5
    55a0:	f7ff ff2a 	bl	53f8 <__multiply>
    55a4:	2300      	movs	r3, #0
    55a6:	6020      	str	r0, [r4, #0]
    55a8:	6003      	str	r3, [r0, #0]
    55aa:	0004      	movs	r4, r0
    55ac:	e7df      	b.n	556e <__pow5mult+0x56>
    55ae:	0030      	movs	r0, r6
    55b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    55b2:	46c0      	nop			; (mov r8, r8)
    55b4:	00008bd0 	.word	0x00008bd0
    55b8:	00000271 	.word	0x00000271

000055bc <__lshift>:
    55bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    55be:	000d      	movs	r5, r1
    55c0:	0017      	movs	r7, r2
    55c2:	692b      	ldr	r3, [r5, #16]
    55c4:	1154      	asrs	r4, r2, #5
    55c6:	b085      	sub	sp, #20
    55c8:	18e3      	adds	r3, r4, r3
    55ca:	9302      	str	r3, [sp, #8]
    55cc:	3301      	adds	r3, #1
    55ce:	9301      	str	r3, [sp, #4]
    55d0:	6849      	ldr	r1, [r1, #4]
    55d2:	68ab      	ldr	r3, [r5, #8]
    55d4:	9003      	str	r0, [sp, #12]
    55d6:	9a01      	ldr	r2, [sp, #4]
    55d8:	4293      	cmp	r3, r2
    55da:	db34      	blt.n	5646 <__lshift+0x8a>
    55dc:	9803      	ldr	r0, [sp, #12]
    55de:	f7ff fe2c 	bl	523a <_Balloc>
    55e2:	2300      	movs	r3, #0
    55e4:	0002      	movs	r2, r0
    55e6:	0006      	movs	r6, r0
    55e8:	0019      	movs	r1, r3
    55ea:	3214      	adds	r2, #20
    55ec:	42a3      	cmp	r3, r4
    55ee:	db2d      	blt.n	564c <__lshift+0x90>
    55f0:	43e3      	mvns	r3, r4
    55f2:	17db      	asrs	r3, r3, #31
    55f4:	401c      	ands	r4, r3
    55f6:	002b      	movs	r3, r5
    55f8:	211f      	movs	r1, #31
    55fa:	00a4      	lsls	r4, r4, #2
    55fc:	1914      	adds	r4, r2, r4
    55fe:	692a      	ldr	r2, [r5, #16]
    5600:	3314      	adds	r3, #20
    5602:	0092      	lsls	r2, r2, #2
    5604:	189a      	adds	r2, r3, r2
    5606:	400f      	ands	r7, r1
    5608:	d024      	beq.n	5654 <__lshift+0x98>
    560a:	3101      	adds	r1, #1
    560c:	1bc9      	subs	r1, r1, r7
    560e:	468c      	mov	ip, r1
    5610:	2100      	movs	r1, #0
    5612:	6818      	ldr	r0, [r3, #0]
    5614:	40b8      	lsls	r0, r7
    5616:	4301      	orrs	r1, r0
    5618:	4660      	mov	r0, ip
    561a:	6021      	str	r1, [r4, #0]
    561c:	cb02      	ldmia	r3!, {r1}
    561e:	3404      	adds	r4, #4
    5620:	40c1      	lsrs	r1, r0
    5622:	429a      	cmp	r2, r3
    5624:	d8f5      	bhi.n	5612 <__lshift+0x56>
    5626:	6021      	str	r1, [r4, #0]
    5628:	2900      	cmp	r1, #0
    562a:	d002      	beq.n	5632 <__lshift+0x76>
    562c:	9b02      	ldr	r3, [sp, #8]
    562e:	3302      	adds	r3, #2
    5630:	9301      	str	r3, [sp, #4]
    5632:	9b01      	ldr	r3, [sp, #4]
    5634:	9803      	ldr	r0, [sp, #12]
    5636:	3b01      	subs	r3, #1
    5638:	6133      	str	r3, [r6, #16]
    563a:	0029      	movs	r1, r5
    563c:	f7ff fe35 	bl	52aa <_Bfree>
    5640:	0030      	movs	r0, r6
    5642:	b005      	add	sp, #20
    5644:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5646:	3101      	adds	r1, #1
    5648:	005b      	lsls	r3, r3, #1
    564a:	e7c4      	b.n	55d6 <__lshift+0x1a>
    564c:	0098      	lsls	r0, r3, #2
    564e:	5011      	str	r1, [r2, r0]
    5650:	3301      	adds	r3, #1
    5652:	e7cb      	b.n	55ec <__lshift+0x30>
    5654:	cb02      	ldmia	r3!, {r1}
    5656:	c402      	stmia	r4!, {r1}
    5658:	429a      	cmp	r2, r3
    565a:	d8fb      	bhi.n	5654 <__lshift+0x98>
    565c:	e7e9      	b.n	5632 <__lshift+0x76>

0000565e <__mcmp>:
    565e:	690a      	ldr	r2, [r1, #16]
    5660:	6903      	ldr	r3, [r0, #16]
    5662:	b530      	push	{r4, r5, lr}
    5664:	1a9b      	subs	r3, r3, r2
    5666:	d10e      	bne.n	5686 <__mcmp+0x28>
    5668:	0092      	lsls	r2, r2, #2
    566a:	3014      	adds	r0, #20
    566c:	3114      	adds	r1, #20
    566e:	1884      	adds	r4, r0, r2
    5670:	1889      	adds	r1, r1, r2
    5672:	3c04      	subs	r4, #4
    5674:	3904      	subs	r1, #4
    5676:	6822      	ldr	r2, [r4, #0]
    5678:	680d      	ldr	r5, [r1, #0]
    567a:	42aa      	cmp	r2, r5
    567c:	d005      	beq.n	568a <__mcmp+0x2c>
    567e:	42aa      	cmp	r2, r5
    5680:	4192      	sbcs	r2, r2
    5682:	2301      	movs	r3, #1
    5684:	4313      	orrs	r3, r2
    5686:	0018      	movs	r0, r3
    5688:	bd30      	pop	{r4, r5, pc}
    568a:	42a0      	cmp	r0, r4
    568c:	d3f1      	bcc.n	5672 <__mcmp+0x14>
    568e:	e7fa      	b.n	5686 <__mcmp+0x28>

00005690 <__mdiff>:
    5690:	b5f0      	push	{r4, r5, r6, r7, lr}
    5692:	000d      	movs	r5, r1
    5694:	b085      	sub	sp, #20
    5696:	0007      	movs	r7, r0
    5698:	0011      	movs	r1, r2
    569a:	0028      	movs	r0, r5
    569c:	0014      	movs	r4, r2
    569e:	f7ff ffde 	bl	565e <__mcmp>
    56a2:	1e06      	subs	r6, r0, #0
    56a4:	d108      	bne.n	56b8 <__mdiff+0x28>
    56a6:	0001      	movs	r1, r0
    56a8:	0038      	movs	r0, r7
    56aa:	f7ff fdc6 	bl	523a <_Balloc>
    56ae:	2301      	movs	r3, #1
    56b0:	6146      	str	r6, [r0, #20]
    56b2:	6103      	str	r3, [r0, #16]
    56b4:	b005      	add	sp, #20
    56b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56b8:	2301      	movs	r3, #1
    56ba:	9301      	str	r3, [sp, #4]
    56bc:	2800      	cmp	r0, #0
    56be:	db04      	blt.n	56ca <__mdiff+0x3a>
    56c0:	0023      	movs	r3, r4
    56c2:	002c      	movs	r4, r5
    56c4:	001d      	movs	r5, r3
    56c6:	2300      	movs	r3, #0
    56c8:	9301      	str	r3, [sp, #4]
    56ca:	6861      	ldr	r1, [r4, #4]
    56cc:	0038      	movs	r0, r7
    56ce:	f7ff fdb4 	bl	523a <_Balloc>
    56d2:	002f      	movs	r7, r5
    56d4:	2200      	movs	r2, #0
    56d6:	9b01      	ldr	r3, [sp, #4]
    56d8:	6926      	ldr	r6, [r4, #16]
    56da:	60c3      	str	r3, [r0, #12]
    56dc:	3414      	adds	r4, #20
    56de:	00b3      	lsls	r3, r6, #2
    56e0:	18e3      	adds	r3, r4, r3
    56e2:	9302      	str	r3, [sp, #8]
    56e4:	692b      	ldr	r3, [r5, #16]
    56e6:	3714      	adds	r7, #20
    56e8:	009b      	lsls	r3, r3, #2
    56ea:	18fb      	adds	r3, r7, r3
    56ec:	9303      	str	r3, [sp, #12]
    56ee:	0003      	movs	r3, r0
    56f0:	4694      	mov	ip, r2
    56f2:	3314      	adds	r3, #20
    56f4:	cc20      	ldmia	r4!, {r5}
    56f6:	cf04      	ldmia	r7!, {r2}
    56f8:	9201      	str	r2, [sp, #4]
    56fa:	b2aa      	uxth	r2, r5
    56fc:	4494      	add	ip, r2
    56fe:	466a      	mov	r2, sp
    5700:	4661      	mov	r1, ip
    5702:	8892      	ldrh	r2, [r2, #4]
    5704:	0c2d      	lsrs	r5, r5, #16
    5706:	1a8a      	subs	r2, r1, r2
    5708:	9901      	ldr	r1, [sp, #4]
    570a:	0c09      	lsrs	r1, r1, #16
    570c:	1a69      	subs	r1, r5, r1
    570e:	1415      	asrs	r5, r2, #16
    5710:	1949      	adds	r1, r1, r5
    5712:	140d      	asrs	r5, r1, #16
    5714:	b292      	uxth	r2, r2
    5716:	0409      	lsls	r1, r1, #16
    5718:	430a      	orrs	r2, r1
    571a:	601a      	str	r2, [r3, #0]
    571c:	9a03      	ldr	r2, [sp, #12]
    571e:	46ac      	mov	ip, r5
    5720:	3304      	adds	r3, #4
    5722:	42ba      	cmp	r2, r7
    5724:	d8e6      	bhi.n	56f4 <__mdiff+0x64>
    5726:	9902      	ldr	r1, [sp, #8]
    5728:	001a      	movs	r2, r3
    572a:	428c      	cmp	r4, r1
    572c:	d305      	bcc.n	573a <__mdiff+0xaa>
    572e:	3a04      	subs	r2, #4
    5730:	6813      	ldr	r3, [r2, #0]
    5732:	2b00      	cmp	r3, #0
    5734:	d00e      	beq.n	5754 <__mdiff+0xc4>
    5736:	6106      	str	r6, [r0, #16]
    5738:	e7bc      	b.n	56b4 <__mdiff+0x24>
    573a:	cc04      	ldmia	r4!, {r2}
    573c:	b291      	uxth	r1, r2
    573e:	4461      	add	r1, ip
    5740:	140d      	asrs	r5, r1, #16
    5742:	0c12      	lsrs	r2, r2, #16
    5744:	1952      	adds	r2, r2, r5
    5746:	1415      	asrs	r5, r2, #16
    5748:	b289      	uxth	r1, r1
    574a:	0412      	lsls	r2, r2, #16
    574c:	430a      	orrs	r2, r1
    574e:	46ac      	mov	ip, r5
    5750:	c304      	stmia	r3!, {r2}
    5752:	e7e8      	b.n	5726 <__mdiff+0x96>
    5754:	3e01      	subs	r6, #1
    5756:	e7ea      	b.n	572e <__mdiff+0x9e>

00005758 <__d2b>:
    5758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    575a:	001d      	movs	r5, r3
    575c:	2101      	movs	r1, #1
    575e:	9f08      	ldr	r7, [sp, #32]
    5760:	0014      	movs	r4, r2
    5762:	f7ff fd6a 	bl	523a <_Balloc>
    5766:	032b      	lsls	r3, r5, #12
    5768:	006d      	lsls	r5, r5, #1
    576a:	0006      	movs	r6, r0
    576c:	0b1b      	lsrs	r3, r3, #12
    576e:	0d6d      	lsrs	r5, r5, #21
    5770:	d124      	bne.n	57bc <__d2b+0x64>
    5772:	9301      	str	r3, [sp, #4]
    5774:	2c00      	cmp	r4, #0
    5776:	d027      	beq.n	57c8 <__d2b+0x70>
    5778:	4668      	mov	r0, sp
    577a:	9400      	str	r4, [sp, #0]
    577c:	f7ff fe04 	bl	5388 <__lo0bits>
    5780:	9c00      	ldr	r4, [sp, #0]
    5782:	2800      	cmp	r0, #0
    5784:	d01e      	beq.n	57c4 <__d2b+0x6c>
    5786:	9b01      	ldr	r3, [sp, #4]
    5788:	2120      	movs	r1, #32
    578a:	001a      	movs	r2, r3
    578c:	1a09      	subs	r1, r1, r0
    578e:	408a      	lsls	r2, r1
    5790:	40c3      	lsrs	r3, r0
    5792:	4322      	orrs	r2, r4
    5794:	6172      	str	r2, [r6, #20]
    5796:	9301      	str	r3, [sp, #4]
    5798:	9c01      	ldr	r4, [sp, #4]
    579a:	61b4      	str	r4, [r6, #24]
    579c:	1e63      	subs	r3, r4, #1
    579e:	419c      	sbcs	r4, r3
    57a0:	3401      	adds	r4, #1
    57a2:	6134      	str	r4, [r6, #16]
    57a4:	2d00      	cmp	r5, #0
    57a6:	d018      	beq.n	57da <__d2b+0x82>
    57a8:	4b12      	ldr	r3, [pc, #72]	; (57f4 <__d2b+0x9c>)
    57aa:	18ed      	adds	r5, r5, r3
    57ac:	2335      	movs	r3, #53	; 0x35
    57ae:	182d      	adds	r5, r5, r0
    57b0:	603d      	str	r5, [r7, #0]
    57b2:	1a18      	subs	r0, r3, r0
    57b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    57b6:	6018      	str	r0, [r3, #0]
    57b8:	0030      	movs	r0, r6
    57ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    57bc:	2280      	movs	r2, #128	; 0x80
    57be:	0352      	lsls	r2, r2, #13
    57c0:	4313      	orrs	r3, r2
    57c2:	e7d6      	b.n	5772 <__d2b+0x1a>
    57c4:	6174      	str	r4, [r6, #20]
    57c6:	e7e7      	b.n	5798 <__d2b+0x40>
    57c8:	a801      	add	r0, sp, #4
    57ca:	f7ff fddd 	bl	5388 <__lo0bits>
    57ce:	2401      	movs	r4, #1
    57d0:	9b01      	ldr	r3, [sp, #4]
    57d2:	6134      	str	r4, [r6, #16]
    57d4:	6173      	str	r3, [r6, #20]
    57d6:	3020      	adds	r0, #32
    57d8:	e7e4      	b.n	57a4 <__d2b+0x4c>
    57da:	4b07      	ldr	r3, [pc, #28]	; (57f8 <__d2b+0xa0>)
    57dc:	18c0      	adds	r0, r0, r3
    57de:	4b07      	ldr	r3, [pc, #28]	; (57fc <__d2b+0xa4>)
    57e0:	6038      	str	r0, [r7, #0]
    57e2:	18e3      	adds	r3, r4, r3
    57e4:	009b      	lsls	r3, r3, #2
    57e6:	18f3      	adds	r3, r6, r3
    57e8:	6958      	ldr	r0, [r3, #20]
    57ea:	f7ff fdb3 	bl	5354 <__hi0bits>
    57ee:	0164      	lsls	r4, r4, #5
    57f0:	1a20      	subs	r0, r4, r0
    57f2:	e7df      	b.n	57b4 <__d2b+0x5c>
    57f4:	fffffbcd 	.word	0xfffffbcd
    57f8:	fffffbce 	.word	0xfffffbce
    57fc:	3fffffff 	.word	0x3fffffff

00005800 <_calloc_r>:
    5800:	434a      	muls	r2, r1
    5802:	b570      	push	{r4, r5, r6, lr}
    5804:	0011      	movs	r1, r2
    5806:	0014      	movs	r4, r2
    5808:	f000 f852 	bl	58b0 <_malloc_r>
    580c:	1e05      	subs	r5, r0, #0
    580e:	d003      	beq.n	5818 <_calloc_r+0x18>
    5810:	0022      	movs	r2, r4
    5812:	2100      	movs	r1, #0
    5814:	f7fd fe09 	bl	342a <memset>
    5818:	0028      	movs	r0, r5
    581a:	bd70      	pop	{r4, r5, r6, pc}

0000581c <_free_r>:
    581c:	b570      	push	{r4, r5, r6, lr}
    581e:	0005      	movs	r5, r0
    5820:	2900      	cmp	r1, #0
    5822:	d010      	beq.n	5846 <_free_r+0x2a>
    5824:	1f0c      	subs	r4, r1, #4
    5826:	6823      	ldr	r3, [r4, #0]
    5828:	2b00      	cmp	r3, #0
    582a:	da00      	bge.n	582e <_free_r+0x12>
    582c:	18e4      	adds	r4, r4, r3
    582e:	0028      	movs	r0, r5
    5830:	f000 faae 	bl	5d90 <__malloc_lock>
    5834:	4a1d      	ldr	r2, [pc, #116]	; (58ac <_free_r+0x90>)
    5836:	6813      	ldr	r3, [r2, #0]
    5838:	2b00      	cmp	r3, #0
    583a:	d105      	bne.n	5848 <_free_r+0x2c>
    583c:	6063      	str	r3, [r4, #4]
    583e:	6014      	str	r4, [r2, #0]
    5840:	0028      	movs	r0, r5
    5842:	f000 faa6 	bl	5d92 <__malloc_unlock>
    5846:	bd70      	pop	{r4, r5, r6, pc}
    5848:	42a3      	cmp	r3, r4
    584a:	d909      	bls.n	5860 <_free_r+0x44>
    584c:	6821      	ldr	r1, [r4, #0]
    584e:	1860      	adds	r0, r4, r1
    5850:	4283      	cmp	r3, r0
    5852:	d1f3      	bne.n	583c <_free_r+0x20>
    5854:	6818      	ldr	r0, [r3, #0]
    5856:	685b      	ldr	r3, [r3, #4]
    5858:	1841      	adds	r1, r0, r1
    585a:	6021      	str	r1, [r4, #0]
    585c:	e7ee      	b.n	583c <_free_r+0x20>
    585e:	0013      	movs	r3, r2
    5860:	685a      	ldr	r2, [r3, #4]
    5862:	2a00      	cmp	r2, #0
    5864:	d001      	beq.n	586a <_free_r+0x4e>
    5866:	42a2      	cmp	r2, r4
    5868:	d9f9      	bls.n	585e <_free_r+0x42>
    586a:	6819      	ldr	r1, [r3, #0]
    586c:	1858      	adds	r0, r3, r1
    586e:	42a0      	cmp	r0, r4
    5870:	d10b      	bne.n	588a <_free_r+0x6e>
    5872:	6820      	ldr	r0, [r4, #0]
    5874:	1809      	adds	r1, r1, r0
    5876:	1858      	adds	r0, r3, r1
    5878:	6019      	str	r1, [r3, #0]
    587a:	4282      	cmp	r2, r0
    587c:	d1e0      	bne.n	5840 <_free_r+0x24>
    587e:	6810      	ldr	r0, [r2, #0]
    5880:	6852      	ldr	r2, [r2, #4]
    5882:	1841      	adds	r1, r0, r1
    5884:	6019      	str	r1, [r3, #0]
    5886:	605a      	str	r2, [r3, #4]
    5888:	e7da      	b.n	5840 <_free_r+0x24>
    588a:	42a0      	cmp	r0, r4
    588c:	d902      	bls.n	5894 <_free_r+0x78>
    588e:	230c      	movs	r3, #12
    5890:	602b      	str	r3, [r5, #0]
    5892:	e7d5      	b.n	5840 <_free_r+0x24>
    5894:	6821      	ldr	r1, [r4, #0]
    5896:	1860      	adds	r0, r4, r1
    5898:	4282      	cmp	r2, r0
    589a:	d103      	bne.n	58a4 <_free_r+0x88>
    589c:	6810      	ldr	r0, [r2, #0]
    589e:	6852      	ldr	r2, [r2, #4]
    58a0:	1841      	adds	r1, r0, r1
    58a2:	6021      	str	r1, [r4, #0]
    58a4:	6062      	str	r2, [r4, #4]
    58a6:	605c      	str	r4, [r3, #4]
    58a8:	e7ca      	b.n	5840 <_free_r+0x24>
    58aa:	46c0      	nop			; (mov r8, r8)
    58ac:	200007ac 	.word	0x200007ac

000058b0 <_malloc_r>:
    58b0:	2303      	movs	r3, #3
    58b2:	b570      	push	{r4, r5, r6, lr}
    58b4:	1ccd      	adds	r5, r1, #3
    58b6:	439d      	bics	r5, r3
    58b8:	3508      	adds	r5, #8
    58ba:	0006      	movs	r6, r0
    58bc:	2d0c      	cmp	r5, #12
    58be:	d21e      	bcs.n	58fe <_malloc_r+0x4e>
    58c0:	250c      	movs	r5, #12
    58c2:	42a9      	cmp	r1, r5
    58c4:	d81d      	bhi.n	5902 <_malloc_r+0x52>
    58c6:	0030      	movs	r0, r6
    58c8:	f000 fa62 	bl	5d90 <__malloc_lock>
    58cc:	4a25      	ldr	r2, [pc, #148]	; (5964 <_malloc_r+0xb4>)
    58ce:	6814      	ldr	r4, [r2, #0]
    58d0:	0021      	movs	r1, r4
    58d2:	2900      	cmp	r1, #0
    58d4:	d119      	bne.n	590a <_malloc_r+0x5a>
    58d6:	4c24      	ldr	r4, [pc, #144]	; (5968 <_malloc_r+0xb8>)
    58d8:	6823      	ldr	r3, [r4, #0]
    58da:	2b00      	cmp	r3, #0
    58dc:	d103      	bne.n	58e6 <_malloc_r+0x36>
    58de:	0030      	movs	r0, r6
    58e0:	f000 f988 	bl	5bf4 <_sbrk_r>
    58e4:	6020      	str	r0, [r4, #0]
    58e6:	0029      	movs	r1, r5
    58e8:	0030      	movs	r0, r6
    58ea:	f000 f983 	bl	5bf4 <_sbrk_r>
    58ee:	1c43      	adds	r3, r0, #1
    58f0:	d12c      	bne.n	594c <_malloc_r+0x9c>
    58f2:	230c      	movs	r3, #12
    58f4:	0030      	movs	r0, r6
    58f6:	6033      	str	r3, [r6, #0]
    58f8:	f000 fa4b 	bl	5d92 <__malloc_unlock>
    58fc:	e003      	b.n	5906 <_malloc_r+0x56>
    58fe:	2d00      	cmp	r5, #0
    5900:	dadf      	bge.n	58c2 <_malloc_r+0x12>
    5902:	230c      	movs	r3, #12
    5904:	6033      	str	r3, [r6, #0]
    5906:	2000      	movs	r0, #0
    5908:	bd70      	pop	{r4, r5, r6, pc}
    590a:	680b      	ldr	r3, [r1, #0]
    590c:	1b5b      	subs	r3, r3, r5
    590e:	d41a      	bmi.n	5946 <_malloc_r+0x96>
    5910:	2b0b      	cmp	r3, #11
    5912:	d903      	bls.n	591c <_malloc_r+0x6c>
    5914:	600b      	str	r3, [r1, #0]
    5916:	18cc      	adds	r4, r1, r3
    5918:	6025      	str	r5, [r4, #0]
    591a:	e003      	b.n	5924 <_malloc_r+0x74>
    591c:	428c      	cmp	r4, r1
    591e:	d10e      	bne.n	593e <_malloc_r+0x8e>
    5920:	6863      	ldr	r3, [r4, #4]
    5922:	6013      	str	r3, [r2, #0]
    5924:	0030      	movs	r0, r6
    5926:	f000 fa34 	bl	5d92 <__malloc_unlock>
    592a:	0020      	movs	r0, r4
    592c:	2207      	movs	r2, #7
    592e:	300b      	adds	r0, #11
    5930:	1d23      	adds	r3, r4, #4
    5932:	4390      	bics	r0, r2
    5934:	1ac3      	subs	r3, r0, r3
    5936:	d0e7      	beq.n	5908 <_malloc_r+0x58>
    5938:	425a      	negs	r2, r3
    593a:	50e2      	str	r2, [r4, r3]
    593c:	e7e4      	b.n	5908 <_malloc_r+0x58>
    593e:	684b      	ldr	r3, [r1, #4]
    5940:	6063      	str	r3, [r4, #4]
    5942:	000c      	movs	r4, r1
    5944:	e7ee      	b.n	5924 <_malloc_r+0x74>
    5946:	000c      	movs	r4, r1
    5948:	6849      	ldr	r1, [r1, #4]
    594a:	e7c2      	b.n	58d2 <_malloc_r+0x22>
    594c:	2303      	movs	r3, #3
    594e:	1cc4      	adds	r4, r0, #3
    5950:	439c      	bics	r4, r3
    5952:	42a0      	cmp	r0, r4
    5954:	d0e0      	beq.n	5918 <_malloc_r+0x68>
    5956:	1a21      	subs	r1, r4, r0
    5958:	0030      	movs	r0, r6
    595a:	f000 f94b 	bl	5bf4 <_sbrk_r>
    595e:	1c43      	adds	r3, r0, #1
    5960:	d1da      	bne.n	5918 <_malloc_r+0x68>
    5962:	e7c6      	b.n	58f2 <_malloc_r+0x42>
    5964:	200007ac 	.word	0x200007ac
    5968:	200007b0 	.word	0x200007b0

0000596c <__sfputc_r>:
    596c:	6893      	ldr	r3, [r2, #8]
    596e:	b510      	push	{r4, lr}
    5970:	3b01      	subs	r3, #1
    5972:	6093      	str	r3, [r2, #8]
    5974:	2b00      	cmp	r3, #0
    5976:	da05      	bge.n	5984 <__sfputc_r+0x18>
    5978:	6994      	ldr	r4, [r2, #24]
    597a:	42a3      	cmp	r3, r4
    597c:	db08      	blt.n	5990 <__sfputc_r+0x24>
    597e:	b2cb      	uxtb	r3, r1
    5980:	2b0a      	cmp	r3, #10
    5982:	d005      	beq.n	5990 <__sfputc_r+0x24>
    5984:	6813      	ldr	r3, [r2, #0]
    5986:	1c58      	adds	r0, r3, #1
    5988:	6010      	str	r0, [r2, #0]
    598a:	7019      	strb	r1, [r3, #0]
    598c:	b2c8      	uxtb	r0, r1
    598e:	bd10      	pop	{r4, pc}
    5990:	f7fe fb06 	bl	3fa0 <__swbuf_r>
    5994:	e7fb      	b.n	598e <__sfputc_r+0x22>

00005996 <__sfputs_r>:
    5996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5998:	0006      	movs	r6, r0
    599a:	000f      	movs	r7, r1
    599c:	0014      	movs	r4, r2
    599e:	18d5      	adds	r5, r2, r3
    59a0:	42ac      	cmp	r4, r5
    59a2:	d101      	bne.n	59a8 <__sfputs_r+0x12>
    59a4:	2000      	movs	r0, #0
    59a6:	e007      	b.n	59b8 <__sfputs_r+0x22>
    59a8:	7821      	ldrb	r1, [r4, #0]
    59aa:	003a      	movs	r2, r7
    59ac:	0030      	movs	r0, r6
    59ae:	f7ff ffdd 	bl	596c <__sfputc_r>
    59b2:	3401      	adds	r4, #1
    59b4:	1c43      	adds	r3, r0, #1
    59b6:	d1f3      	bne.n	59a0 <__sfputs_r+0xa>
    59b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000059bc <_vfiprintf_r>:
    59bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    59be:	b09f      	sub	sp, #124	; 0x7c
    59c0:	0006      	movs	r6, r0
    59c2:	000f      	movs	r7, r1
    59c4:	0014      	movs	r4, r2
    59c6:	9305      	str	r3, [sp, #20]
    59c8:	2800      	cmp	r0, #0
    59ca:	d004      	beq.n	59d6 <_vfiprintf_r+0x1a>
    59cc:	6983      	ldr	r3, [r0, #24]
    59ce:	2b00      	cmp	r3, #0
    59d0:	d101      	bne.n	59d6 <_vfiprintf_r+0x1a>
    59d2:	f7ff fb15 	bl	5000 <__sinit>
    59d6:	4b7f      	ldr	r3, [pc, #508]	; (5bd4 <_vfiprintf_r+0x218>)
    59d8:	429f      	cmp	r7, r3
    59da:	d15c      	bne.n	5a96 <_vfiprintf_r+0xda>
    59dc:	6877      	ldr	r7, [r6, #4]
    59de:	89bb      	ldrh	r3, [r7, #12]
    59e0:	071b      	lsls	r3, r3, #28
    59e2:	d562      	bpl.n	5aaa <_vfiprintf_r+0xee>
    59e4:	693b      	ldr	r3, [r7, #16]
    59e6:	2b00      	cmp	r3, #0
    59e8:	d05f      	beq.n	5aaa <_vfiprintf_r+0xee>
    59ea:	2300      	movs	r3, #0
    59ec:	ad06      	add	r5, sp, #24
    59ee:	616b      	str	r3, [r5, #20]
    59f0:	3320      	adds	r3, #32
    59f2:	766b      	strb	r3, [r5, #25]
    59f4:	3310      	adds	r3, #16
    59f6:	76ab      	strb	r3, [r5, #26]
    59f8:	9402      	str	r4, [sp, #8]
    59fa:	9c02      	ldr	r4, [sp, #8]
    59fc:	7823      	ldrb	r3, [r4, #0]
    59fe:	2b00      	cmp	r3, #0
    5a00:	d15d      	bne.n	5abe <_vfiprintf_r+0x102>
    5a02:	9b02      	ldr	r3, [sp, #8]
    5a04:	1ae3      	subs	r3, r4, r3
    5a06:	9304      	str	r3, [sp, #16]
    5a08:	d00d      	beq.n	5a26 <_vfiprintf_r+0x6a>
    5a0a:	9b04      	ldr	r3, [sp, #16]
    5a0c:	9a02      	ldr	r2, [sp, #8]
    5a0e:	0039      	movs	r1, r7
    5a10:	0030      	movs	r0, r6
    5a12:	f7ff ffc0 	bl	5996 <__sfputs_r>
    5a16:	1c43      	adds	r3, r0, #1
    5a18:	d100      	bne.n	5a1c <_vfiprintf_r+0x60>
    5a1a:	e0cc      	b.n	5bb6 <_vfiprintf_r+0x1fa>
    5a1c:	696a      	ldr	r2, [r5, #20]
    5a1e:	9b04      	ldr	r3, [sp, #16]
    5a20:	4694      	mov	ip, r2
    5a22:	4463      	add	r3, ip
    5a24:	616b      	str	r3, [r5, #20]
    5a26:	7823      	ldrb	r3, [r4, #0]
    5a28:	2b00      	cmp	r3, #0
    5a2a:	d100      	bne.n	5a2e <_vfiprintf_r+0x72>
    5a2c:	e0c3      	b.n	5bb6 <_vfiprintf_r+0x1fa>
    5a2e:	2201      	movs	r2, #1
    5a30:	2300      	movs	r3, #0
    5a32:	4252      	negs	r2, r2
    5a34:	606a      	str	r2, [r5, #4]
    5a36:	a902      	add	r1, sp, #8
    5a38:	3254      	adds	r2, #84	; 0x54
    5a3a:	1852      	adds	r2, r2, r1
    5a3c:	3401      	adds	r4, #1
    5a3e:	602b      	str	r3, [r5, #0]
    5a40:	60eb      	str	r3, [r5, #12]
    5a42:	60ab      	str	r3, [r5, #8]
    5a44:	7013      	strb	r3, [r2, #0]
    5a46:	65ab      	str	r3, [r5, #88]	; 0x58
    5a48:	7821      	ldrb	r1, [r4, #0]
    5a4a:	2205      	movs	r2, #5
    5a4c:	4862      	ldr	r0, [pc, #392]	; (5bd8 <_vfiprintf_r+0x21c>)
    5a4e:	f7ff fbe9 	bl	5224 <memchr>
    5a52:	1c63      	adds	r3, r4, #1
    5a54:	469c      	mov	ip, r3
    5a56:	2800      	cmp	r0, #0
    5a58:	d135      	bne.n	5ac6 <_vfiprintf_r+0x10a>
    5a5a:	6829      	ldr	r1, [r5, #0]
    5a5c:	06cb      	lsls	r3, r1, #27
    5a5e:	d504      	bpl.n	5a6a <_vfiprintf_r+0xae>
    5a60:	2353      	movs	r3, #83	; 0x53
    5a62:	aa02      	add	r2, sp, #8
    5a64:	3020      	adds	r0, #32
    5a66:	189b      	adds	r3, r3, r2
    5a68:	7018      	strb	r0, [r3, #0]
    5a6a:	070b      	lsls	r3, r1, #28
    5a6c:	d504      	bpl.n	5a78 <_vfiprintf_r+0xbc>
    5a6e:	2353      	movs	r3, #83	; 0x53
    5a70:	202b      	movs	r0, #43	; 0x2b
    5a72:	aa02      	add	r2, sp, #8
    5a74:	189b      	adds	r3, r3, r2
    5a76:	7018      	strb	r0, [r3, #0]
    5a78:	7823      	ldrb	r3, [r4, #0]
    5a7a:	2b2a      	cmp	r3, #42	; 0x2a
    5a7c:	d02c      	beq.n	5ad8 <_vfiprintf_r+0x11c>
    5a7e:	2000      	movs	r0, #0
    5a80:	210a      	movs	r1, #10
    5a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5a84:	7822      	ldrb	r2, [r4, #0]
    5a86:	3a30      	subs	r2, #48	; 0x30
    5a88:	2a09      	cmp	r2, #9
    5a8a:	d800      	bhi.n	5a8e <_vfiprintf_r+0xd2>
    5a8c:	e06b      	b.n	5b66 <_vfiprintf_r+0x1aa>
    5a8e:	2800      	cmp	r0, #0
    5a90:	d02a      	beq.n	5ae8 <_vfiprintf_r+0x12c>
    5a92:	9309      	str	r3, [sp, #36]	; 0x24
    5a94:	e028      	b.n	5ae8 <_vfiprintf_r+0x12c>
    5a96:	4b51      	ldr	r3, [pc, #324]	; (5bdc <_vfiprintf_r+0x220>)
    5a98:	429f      	cmp	r7, r3
    5a9a:	d101      	bne.n	5aa0 <_vfiprintf_r+0xe4>
    5a9c:	68b7      	ldr	r7, [r6, #8]
    5a9e:	e79e      	b.n	59de <_vfiprintf_r+0x22>
    5aa0:	4b4f      	ldr	r3, [pc, #316]	; (5be0 <_vfiprintf_r+0x224>)
    5aa2:	429f      	cmp	r7, r3
    5aa4:	d19b      	bne.n	59de <_vfiprintf_r+0x22>
    5aa6:	68f7      	ldr	r7, [r6, #12]
    5aa8:	e799      	b.n	59de <_vfiprintf_r+0x22>
    5aaa:	0039      	movs	r1, r7
    5aac:	0030      	movs	r0, r6
    5aae:	f7fe facd 	bl	404c <__swsetup_r>
    5ab2:	2800      	cmp	r0, #0
    5ab4:	d099      	beq.n	59ea <_vfiprintf_r+0x2e>
    5ab6:	2001      	movs	r0, #1
    5ab8:	4240      	negs	r0, r0
    5aba:	b01f      	add	sp, #124	; 0x7c
    5abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5abe:	2b25      	cmp	r3, #37	; 0x25
    5ac0:	d09f      	beq.n	5a02 <_vfiprintf_r+0x46>
    5ac2:	3401      	adds	r4, #1
    5ac4:	e79a      	b.n	59fc <_vfiprintf_r+0x40>
    5ac6:	4b44      	ldr	r3, [pc, #272]	; (5bd8 <_vfiprintf_r+0x21c>)
    5ac8:	6829      	ldr	r1, [r5, #0]
    5aca:	1ac0      	subs	r0, r0, r3
    5acc:	2301      	movs	r3, #1
    5ace:	4083      	lsls	r3, r0
    5ad0:	430b      	orrs	r3, r1
    5ad2:	602b      	str	r3, [r5, #0]
    5ad4:	4664      	mov	r4, ip
    5ad6:	e7b7      	b.n	5a48 <_vfiprintf_r+0x8c>
    5ad8:	9b05      	ldr	r3, [sp, #20]
    5ada:	1d18      	adds	r0, r3, #4
    5adc:	681b      	ldr	r3, [r3, #0]
    5ade:	9005      	str	r0, [sp, #20]
    5ae0:	2b00      	cmp	r3, #0
    5ae2:	db3a      	blt.n	5b5a <_vfiprintf_r+0x19e>
    5ae4:	9309      	str	r3, [sp, #36]	; 0x24
    5ae6:	4664      	mov	r4, ip
    5ae8:	7823      	ldrb	r3, [r4, #0]
    5aea:	2b2e      	cmp	r3, #46	; 0x2e
    5aec:	d10b      	bne.n	5b06 <_vfiprintf_r+0x14a>
    5aee:	7863      	ldrb	r3, [r4, #1]
    5af0:	1c62      	adds	r2, r4, #1
    5af2:	2b2a      	cmp	r3, #42	; 0x2a
    5af4:	d13f      	bne.n	5b76 <_vfiprintf_r+0x1ba>
    5af6:	9b05      	ldr	r3, [sp, #20]
    5af8:	3402      	adds	r4, #2
    5afa:	1d1a      	adds	r2, r3, #4
    5afc:	681b      	ldr	r3, [r3, #0]
    5afe:	9205      	str	r2, [sp, #20]
    5b00:	2b00      	cmp	r3, #0
    5b02:	db35      	blt.n	5b70 <_vfiprintf_r+0x1b4>
    5b04:	9307      	str	r3, [sp, #28]
    5b06:	7821      	ldrb	r1, [r4, #0]
    5b08:	2203      	movs	r2, #3
    5b0a:	4836      	ldr	r0, [pc, #216]	; (5be4 <_vfiprintf_r+0x228>)
    5b0c:	f7ff fb8a 	bl	5224 <memchr>
    5b10:	2800      	cmp	r0, #0
    5b12:	d007      	beq.n	5b24 <_vfiprintf_r+0x168>
    5b14:	4b33      	ldr	r3, [pc, #204]	; (5be4 <_vfiprintf_r+0x228>)
    5b16:	682a      	ldr	r2, [r5, #0]
    5b18:	1ac0      	subs	r0, r0, r3
    5b1a:	2340      	movs	r3, #64	; 0x40
    5b1c:	4083      	lsls	r3, r0
    5b1e:	4313      	orrs	r3, r2
    5b20:	602b      	str	r3, [r5, #0]
    5b22:	3401      	adds	r4, #1
    5b24:	7821      	ldrb	r1, [r4, #0]
    5b26:	1c63      	adds	r3, r4, #1
    5b28:	2206      	movs	r2, #6
    5b2a:	482f      	ldr	r0, [pc, #188]	; (5be8 <_vfiprintf_r+0x22c>)
    5b2c:	9302      	str	r3, [sp, #8]
    5b2e:	7629      	strb	r1, [r5, #24]
    5b30:	f7ff fb78 	bl	5224 <memchr>
    5b34:	2800      	cmp	r0, #0
    5b36:	d044      	beq.n	5bc2 <_vfiprintf_r+0x206>
    5b38:	4b2c      	ldr	r3, [pc, #176]	; (5bec <_vfiprintf_r+0x230>)
    5b3a:	2b00      	cmp	r3, #0
    5b3c:	d12f      	bne.n	5b9e <_vfiprintf_r+0x1e2>
    5b3e:	6829      	ldr	r1, [r5, #0]
    5b40:	9b05      	ldr	r3, [sp, #20]
    5b42:	2207      	movs	r2, #7
    5b44:	05c9      	lsls	r1, r1, #23
    5b46:	d528      	bpl.n	5b9a <_vfiprintf_r+0x1de>
    5b48:	189b      	adds	r3, r3, r2
    5b4a:	4393      	bics	r3, r2
    5b4c:	3308      	adds	r3, #8
    5b4e:	9305      	str	r3, [sp, #20]
    5b50:	696b      	ldr	r3, [r5, #20]
    5b52:	9a03      	ldr	r2, [sp, #12]
    5b54:	189b      	adds	r3, r3, r2
    5b56:	616b      	str	r3, [r5, #20]
    5b58:	e74f      	b.n	59fa <_vfiprintf_r+0x3e>
    5b5a:	425b      	negs	r3, r3
    5b5c:	60eb      	str	r3, [r5, #12]
    5b5e:	2302      	movs	r3, #2
    5b60:	430b      	orrs	r3, r1
    5b62:	602b      	str	r3, [r5, #0]
    5b64:	e7bf      	b.n	5ae6 <_vfiprintf_r+0x12a>
    5b66:	434b      	muls	r3, r1
    5b68:	3401      	adds	r4, #1
    5b6a:	189b      	adds	r3, r3, r2
    5b6c:	2001      	movs	r0, #1
    5b6e:	e789      	b.n	5a84 <_vfiprintf_r+0xc8>
    5b70:	2301      	movs	r3, #1
    5b72:	425b      	negs	r3, r3
    5b74:	e7c6      	b.n	5b04 <_vfiprintf_r+0x148>
    5b76:	2300      	movs	r3, #0
    5b78:	0014      	movs	r4, r2
    5b7a:	200a      	movs	r0, #10
    5b7c:	001a      	movs	r2, r3
    5b7e:	606b      	str	r3, [r5, #4]
    5b80:	7821      	ldrb	r1, [r4, #0]
    5b82:	3930      	subs	r1, #48	; 0x30
    5b84:	2909      	cmp	r1, #9
    5b86:	d903      	bls.n	5b90 <_vfiprintf_r+0x1d4>
    5b88:	2b00      	cmp	r3, #0
    5b8a:	d0bc      	beq.n	5b06 <_vfiprintf_r+0x14a>
    5b8c:	9207      	str	r2, [sp, #28]
    5b8e:	e7ba      	b.n	5b06 <_vfiprintf_r+0x14a>
    5b90:	4342      	muls	r2, r0
    5b92:	3401      	adds	r4, #1
    5b94:	1852      	adds	r2, r2, r1
    5b96:	2301      	movs	r3, #1
    5b98:	e7f2      	b.n	5b80 <_vfiprintf_r+0x1c4>
    5b9a:	3307      	adds	r3, #7
    5b9c:	e7d5      	b.n	5b4a <_vfiprintf_r+0x18e>
    5b9e:	ab05      	add	r3, sp, #20
    5ba0:	9300      	str	r3, [sp, #0]
    5ba2:	003a      	movs	r2, r7
    5ba4:	4b12      	ldr	r3, [pc, #72]	; (5bf0 <_vfiprintf_r+0x234>)
    5ba6:	0029      	movs	r1, r5
    5ba8:	0030      	movs	r0, r6
    5baa:	f7fd fce3 	bl	3574 <_printf_float>
    5bae:	9003      	str	r0, [sp, #12]
    5bb0:	9b03      	ldr	r3, [sp, #12]
    5bb2:	3301      	adds	r3, #1
    5bb4:	d1cc      	bne.n	5b50 <_vfiprintf_r+0x194>
    5bb6:	89bb      	ldrh	r3, [r7, #12]
    5bb8:	065b      	lsls	r3, r3, #25
    5bba:	d500      	bpl.n	5bbe <_vfiprintf_r+0x202>
    5bbc:	e77b      	b.n	5ab6 <_vfiprintf_r+0xfa>
    5bbe:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5bc0:	e77b      	b.n	5aba <_vfiprintf_r+0xfe>
    5bc2:	ab05      	add	r3, sp, #20
    5bc4:	9300      	str	r3, [sp, #0]
    5bc6:	003a      	movs	r2, r7
    5bc8:	4b09      	ldr	r3, [pc, #36]	; (5bf0 <_vfiprintf_r+0x234>)
    5bca:	0029      	movs	r1, r5
    5bcc:	0030      	movs	r0, r6
    5bce:	f7fd ff8b 	bl	3ae8 <_printf_i>
    5bd2:	e7ec      	b.n	5bae <_vfiprintf_r+0x1f2>
    5bd4:	00008aa0 	.word	0x00008aa0
    5bd8:	00008bdc 	.word	0x00008bdc
    5bdc:	00008ac0 	.word	0x00008ac0
    5be0:	00008a80 	.word	0x00008a80
    5be4:	00008be2 	.word	0x00008be2
    5be8:	00008be6 	.word	0x00008be6
    5bec:	00003575 	.word	0x00003575
    5bf0:	00005997 	.word	0x00005997

00005bf4 <_sbrk_r>:
    5bf4:	2300      	movs	r3, #0
    5bf6:	b570      	push	{r4, r5, r6, lr}
    5bf8:	4c06      	ldr	r4, [pc, #24]	; (5c14 <_sbrk_r+0x20>)
    5bfa:	0005      	movs	r5, r0
    5bfc:	0008      	movs	r0, r1
    5bfe:	6023      	str	r3, [r4, #0]
    5c00:	f7fc fe08 	bl	2814 <_sbrk>
    5c04:	1c43      	adds	r3, r0, #1
    5c06:	d103      	bne.n	5c10 <_sbrk_r+0x1c>
    5c08:	6823      	ldr	r3, [r4, #0]
    5c0a:	2b00      	cmp	r3, #0
    5c0c:	d000      	beq.n	5c10 <_sbrk_r+0x1c>
    5c0e:	602b      	str	r3, [r5, #0]
    5c10:	bd70      	pop	{r4, r5, r6, pc}
    5c12:	46c0      	nop			; (mov r8, r8)
    5c14:	20000a1c 	.word	0x20000a1c

00005c18 <__sread>:
    5c18:	b570      	push	{r4, r5, r6, lr}
    5c1a:	000c      	movs	r4, r1
    5c1c:	250e      	movs	r5, #14
    5c1e:	5f49      	ldrsh	r1, [r1, r5]
    5c20:	f000 f8b8 	bl	5d94 <_read_r>
    5c24:	2800      	cmp	r0, #0
    5c26:	db03      	blt.n	5c30 <__sread+0x18>
    5c28:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5c2a:	181b      	adds	r3, r3, r0
    5c2c:	6563      	str	r3, [r4, #84]	; 0x54
    5c2e:	bd70      	pop	{r4, r5, r6, pc}
    5c30:	89a3      	ldrh	r3, [r4, #12]
    5c32:	4a02      	ldr	r2, [pc, #8]	; (5c3c <__sread+0x24>)
    5c34:	4013      	ands	r3, r2
    5c36:	81a3      	strh	r3, [r4, #12]
    5c38:	e7f9      	b.n	5c2e <__sread+0x16>
    5c3a:	46c0      	nop			; (mov r8, r8)
    5c3c:	ffffefff 	.word	0xffffefff

00005c40 <__swrite>:
    5c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c42:	001f      	movs	r7, r3
    5c44:	898b      	ldrh	r3, [r1, #12]
    5c46:	0005      	movs	r5, r0
    5c48:	000c      	movs	r4, r1
    5c4a:	0016      	movs	r6, r2
    5c4c:	05db      	lsls	r3, r3, #23
    5c4e:	d505      	bpl.n	5c5c <__swrite+0x1c>
    5c50:	230e      	movs	r3, #14
    5c52:	5ec9      	ldrsh	r1, [r1, r3]
    5c54:	2200      	movs	r2, #0
    5c56:	2302      	movs	r3, #2
    5c58:	f000 f874 	bl	5d44 <_lseek_r>
    5c5c:	89a3      	ldrh	r3, [r4, #12]
    5c5e:	4a05      	ldr	r2, [pc, #20]	; (5c74 <__swrite+0x34>)
    5c60:	0028      	movs	r0, r5
    5c62:	4013      	ands	r3, r2
    5c64:	81a3      	strh	r3, [r4, #12]
    5c66:	0032      	movs	r2, r6
    5c68:	230e      	movs	r3, #14
    5c6a:	5ee1      	ldrsh	r1, [r4, r3]
    5c6c:	003b      	movs	r3, r7
    5c6e:	f000 f81f 	bl	5cb0 <_write_r>
    5c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c74:	ffffefff 	.word	0xffffefff

00005c78 <__sseek>:
    5c78:	b570      	push	{r4, r5, r6, lr}
    5c7a:	000c      	movs	r4, r1
    5c7c:	250e      	movs	r5, #14
    5c7e:	5f49      	ldrsh	r1, [r1, r5]
    5c80:	f000 f860 	bl	5d44 <_lseek_r>
    5c84:	89a3      	ldrh	r3, [r4, #12]
    5c86:	1c42      	adds	r2, r0, #1
    5c88:	d103      	bne.n	5c92 <__sseek+0x1a>
    5c8a:	4a05      	ldr	r2, [pc, #20]	; (5ca0 <__sseek+0x28>)
    5c8c:	4013      	ands	r3, r2
    5c8e:	81a3      	strh	r3, [r4, #12]
    5c90:	bd70      	pop	{r4, r5, r6, pc}
    5c92:	2280      	movs	r2, #128	; 0x80
    5c94:	0152      	lsls	r2, r2, #5
    5c96:	4313      	orrs	r3, r2
    5c98:	81a3      	strh	r3, [r4, #12]
    5c9a:	6560      	str	r0, [r4, #84]	; 0x54
    5c9c:	e7f8      	b.n	5c90 <__sseek+0x18>
    5c9e:	46c0      	nop			; (mov r8, r8)
    5ca0:	ffffefff 	.word	0xffffefff

00005ca4 <__sclose>:
    5ca4:	b510      	push	{r4, lr}
    5ca6:	230e      	movs	r3, #14
    5ca8:	5ec9      	ldrsh	r1, [r1, r3]
    5caa:	f000 f815 	bl	5cd8 <_close_r>
    5cae:	bd10      	pop	{r4, pc}

00005cb0 <_write_r>:
    5cb0:	b570      	push	{r4, r5, r6, lr}
    5cb2:	0005      	movs	r5, r0
    5cb4:	0008      	movs	r0, r1
    5cb6:	0011      	movs	r1, r2
    5cb8:	2200      	movs	r2, #0
    5cba:	4c06      	ldr	r4, [pc, #24]	; (5cd4 <_write_r+0x24>)
    5cbc:	6022      	str	r2, [r4, #0]
    5cbe:	001a      	movs	r2, r3
    5cc0:	f7fc fd80 	bl	27c4 <_write>
    5cc4:	1c43      	adds	r3, r0, #1
    5cc6:	d103      	bne.n	5cd0 <_write_r+0x20>
    5cc8:	6823      	ldr	r3, [r4, #0]
    5cca:	2b00      	cmp	r3, #0
    5ccc:	d000      	beq.n	5cd0 <_write_r+0x20>
    5cce:	602b      	str	r3, [r5, #0]
    5cd0:	bd70      	pop	{r4, r5, r6, pc}
    5cd2:	46c0      	nop			; (mov r8, r8)
    5cd4:	20000a1c 	.word	0x20000a1c

00005cd8 <_close_r>:
    5cd8:	2300      	movs	r3, #0
    5cda:	b570      	push	{r4, r5, r6, lr}
    5cdc:	4c06      	ldr	r4, [pc, #24]	; (5cf8 <_close_r+0x20>)
    5cde:	0005      	movs	r5, r0
    5ce0:	0008      	movs	r0, r1
    5ce2:	6023      	str	r3, [r4, #0]
    5ce4:	f7fc fda8 	bl	2838 <_close>
    5ce8:	1c43      	adds	r3, r0, #1
    5cea:	d103      	bne.n	5cf4 <_close_r+0x1c>
    5cec:	6823      	ldr	r3, [r4, #0]
    5cee:	2b00      	cmp	r3, #0
    5cf0:	d000      	beq.n	5cf4 <_close_r+0x1c>
    5cf2:	602b      	str	r3, [r5, #0]
    5cf4:	bd70      	pop	{r4, r5, r6, pc}
    5cf6:	46c0      	nop			; (mov r8, r8)
    5cf8:	20000a1c 	.word	0x20000a1c

00005cfc <_fstat_r>:
    5cfc:	2300      	movs	r3, #0
    5cfe:	b570      	push	{r4, r5, r6, lr}
    5d00:	4c06      	ldr	r4, [pc, #24]	; (5d1c <_fstat_r+0x20>)
    5d02:	0005      	movs	r5, r0
    5d04:	0008      	movs	r0, r1
    5d06:	0011      	movs	r1, r2
    5d08:	6023      	str	r3, [r4, #0]
    5d0a:	f7fc fd98 	bl	283e <_fstat>
    5d0e:	1c43      	adds	r3, r0, #1
    5d10:	d103      	bne.n	5d1a <_fstat_r+0x1e>
    5d12:	6823      	ldr	r3, [r4, #0]
    5d14:	2b00      	cmp	r3, #0
    5d16:	d000      	beq.n	5d1a <_fstat_r+0x1e>
    5d18:	602b      	str	r3, [r5, #0]
    5d1a:	bd70      	pop	{r4, r5, r6, pc}
    5d1c:	20000a1c 	.word	0x20000a1c

00005d20 <_isatty_r>:
    5d20:	2300      	movs	r3, #0
    5d22:	b570      	push	{r4, r5, r6, lr}
    5d24:	4c06      	ldr	r4, [pc, #24]	; (5d40 <_isatty_r+0x20>)
    5d26:	0005      	movs	r5, r0
    5d28:	0008      	movs	r0, r1
    5d2a:	6023      	str	r3, [r4, #0]
    5d2c:	f7fc fd8c 	bl	2848 <_isatty>
    5d30:	1c43      	adds	r3, r0, #1
    5d32:	d103      	bne.n	5d3c <_isatty_r+0x1c>
    5d34:	6823      	ldr	r3, [r4, #0]
    5d36:	2b00      	cmp	r3, #0
    5d38:	d000      	beq.n	5d3c <_isatty_r+0x1c>
    5d3a:	602b      	str	r3, [r5, #0]
    5d3c:	bd70      	pop	{r4, r5, r6, pc}
    5d3e:	46c0      	nop			; (mov r8, r8)
    5d40:	20000a1c 	.word	0x20000a1c

00005d44 <_lseek_r>:
    5d44:	b570      	push	{r4, r5, r6, lr}
    5d46:	0005      	movs	r5, r0
    5d48:	0008      	movs	r0, r1
    5d4a:	0011      	movs	r1, r2
    5d4c:	2200      	movs	r2, #0
    5d4e:	4c06      	ldr	r4, [pc, #24]	; (5d68 <_lseek_r+0x24>)
    5d50:	6022      	str	r2, [r4, #0]
    5d52:	001a      	movs	r2, r3
    5d54:	f7fc fd7a 	bl	284c <_lseek>
    5d58:	1c43      	adds	r3, r0, #1
    5d5a:	d103      	bne.n	5d64 <_lseek_r+0x20>
    5d5c:	6823      	ldr	r3, [r4, #0]
    5d5e:	2b00      	cmp	r3, #0
    5d60:	d000      	beq.n	5d64 <_lseek_r+0x20>
    5d62:	602b      	str	r3, [r5, #0]
    5d64:	bd70      	pop	{r4, r5, r6, pc}
    5d66:	46c0      	nop			; (mov r8, r8)
    5d68:	20000a1c 	.word	0x20000a1c

00005d6c <__ascii_mbtowc>:
    5d6c:	b082      	sub	sp, #8
    5d6e:	2900      	cmp	r1, #0
    5d70:	d100      	bne.n	5d74 <__ascii_mbtowc+0x8>
    5d72:	a901      	add	r1, sp, #4
    5d74:	1e10      	subs	r0, r2, #0
    5d76:	d006      	beq.n	5d86 <__ascii_mbtowc+0x1a>
    5d78:	2b00      	cmp	r3, #0
    5d7a:	d006      	beq.n	5d8a <__ascii_mbtowc+0x1e>
    5d7c:	7813      	ldrb	r3, [r2, #0]
    5d7e:	600b      	str	r3, [r1, #0]
    5d80:	7810      	ldrb	r0, [r2, #0]
    5d82:	1e43      	subs	r3, r0, #1
    5d84:	4198      	sbcs	r0, r3
    5d86:	b002      	add	sp, #8
    5d88:	4770      	bx	lr
    5d8a:	2002      	movs	r0, #2
    5d8c:	4240      	negs	r0, r0
    5d8e:	e7fa      	b.n	5d86 <__ascii_mbtowc+0x1a>

00005d90 <__malloc_lock>:
    5d90:	4770      	bx	lr

00005d92 <__malloc_unlock>:
    5d92:	4770      	bx	lr

00005d94 <_read_r>:
    5d94:	b570      	push	{r4, r5, r6, lr}
    5d96:	0005      	movs	r5, r0
    5d98:	0008      	movs	r0, r1
    5d9a:	0011      	movs	r1, r2
    5d9c:	2200      	movs	r2, #0
    5d9e:	4c06      	ldr	r4, [pc, #24]	; (5db8 <_read_r+0x24>)
    5da0:	6022      	str	r2, [r4, #0]
    5da2:	001a      	movs	r2, r3
    5da4:	f7fc fcec 	bl	2780 <_read>
    5da8:	1c43      	adds	r3, r0, #1
    5daa:	d103      	bne.n	5db4 <_read_r+0x20>
    5dac:	6823      	ldr	r3, [r4, #0]
    5dae:	2b00      	cmp	r3, #0
    5db0:	d000      	beq.n	5db4 <_read_r+0x20>
    5db2:	602b      	str	r3, [r5, #0]
    5db4:	bd70      	pop	{r4, r5, r6, pc}
    5db6:	46c0      	nop			; (mov r8, r8)
    5db8:	20000a1c 	.word	0x20000a1c

00005dbc <__ascii_wctomb>:
    5dbc:	1e0b      	subs	r3, r1, #0
    5dbe:	d004      	beq.n	5dca <__ascii_wctomb+0xe>
    5dc0:	2aff      	cmp	r2, #255	; 0xff
    5dc2:	d904      	bls.n	5dce <__ascii_wctomb+0x12>
    5dc4:	238a      	movs	r3, #138	; 0x8a
    5dc6:	6003      	str	r3, [r0, #0]
    5dc8:	3b8b      	subs	r3, #139	; 0x8b
    5dca:	0018      	movs	r0, r3
    5dcc:	4770      	bx	lr
    5dce:	700a      	strb	r2, [r1, #0]
    5dd0:	2301      	movs	r3, #1
    5dd2:	e7fa      	b.n	5dca <__ascii_wctomb+0xe>

00005dd4 <__gnu_thumb1_case_uqi>:
    5dd4:	b402      	push	{r1}
    5dd6:	4671      	mov	r1, lr
    5dd8:	0849      	lsrs	r1, r1, #1
    5dda:	0049      	lsls	r1, r1, #1
    5ddc:	5c09      	ldrb	r1, [r1, r0]
    5dde:	0049      	lsls	r1, r1, #1
    5de0:	448e      	add	lr, r1
    5de2:	bc02      	pop	{r1}
    5de4:	4770      	bx	lr
    5de6:	46c0      	nop			; (mov r8, r8)

00005de8 <__udivsi3>:
    5de8:	2200      	movs	r2, #0
    5dea:	0843      	lsrs	r3, r0, #1
    5dec:	428b      	cmp	r3, r1
    5dee:	d374      	bcc.n	5eda <__udivsi3+0xf2>
    5df0:	0903      	lsrs	r3, r0, #4
    5df2:	428b      	cmp	r3, r1
    5df4:	d35f      	bcc.n	5eb6 <__udivsi3+0xce>
    5df6:	0a03      	lsrs	r3, r0, #8
    5df8:	428b      	cmp	r3, r1
    5dfa:	d344      	bcc.n	5e86 <__udivsi3+0x9e>
    5dfc:	0b03      	lsrs	r3, r0, #12
    5dfe:	428b      	cmp	r3, r1
    5e00:	d328      	bcc.n	5e54 <__udivsi3+0x6c>
    5e02:	0c03      	lsrs	r3, r0, #16
    5e04:	428b      	cmp	r3, r1
    5e06:	d30d      	bcc.n	5e24 <__udivsi3+0x3c>
    5e08:	22ff      	movs	r2, #255	; 0xff
    5e0a:	0209      	lsls	r1, r1, #8
    5e0c:	ba12      	rev	r2, r2
    5e0e:	0c03      	lsrs	r3, r0, #16
    5e10:	428b      	cmp	r3, r1
    5e12:	d302      	bcc.n	5e1a <__udivsi3+0x32>
    5e14:	1212      	asrs	r2, r2, #8
    5e16:	0209      	lsls	r1, r1, #8
    5e18:	d065      	beq.n	5ee6 <__udivsi3+0xfe>
    5e1a:	0b03      	lsrs	r3, r0, #12
    5e1c:	428b      	cmp	r3, r1
    5e1e:	d319      	bcc.n	5e54 <__udivsi3+0x6c>
    5e20:	e000      	b.n	5e24 <__udivsi3+0x3c>
    5e22:	0a09      	lsrs	r1, r1, #8
    5e24:	0bc3      	lsrs	r3, r0, #15
    5e26:	428b      	cmp	r3, r1
    5e28:	d301      	bcc.n	5e2e <__udivsi3+0x46>
    5e2a:	03cb      	lsls	r3, r1, #15
    5e2c:	1ac0      	subs	r0, r0, r3
    5e2e:	4152      	adcs	r2, r2
    5e30:	0b83      	lsrs	r3, r0, #14
    5e32:	428b      	cmp	r3, r1
    5e34:	d301      	bcc.n	5e3a <__udivsi3+0x52>
    5e36:	038b      	lsls	r3, r1, #14
    5e38:	1ac0      	subs	r0, r0, r3
    5e3a:	4152      	adcs	r2, r2
    5e3c:	0b43      	lsrs	r3, r0, #13
    5e3e:	428b      	cmp	r3, r1
    5e40:	d301      	bcc.n	5e46 <__udivsi3+0x5e>
    5e42:	034b      	lsls	r3, r1, #13
    5e44:	1ac0      	subs	r0, r0, r3
    5e46:	4152      	adcs	r2, r2
    5e48:	0b03      	lsrs	r3, r0, #12
    5e4a:	428b      	cmp	r3, r1
    5e4c:	d301      	bcc.n	5e52 <__udivsi3+0x6a>
    5e4e:	030b      	lsls	r3, r1, #12
    5e50:	1ac0      	subs	r0, r0, r3
    5e52:	4152      	adcs	r2, r2
    5e54:	0ac3      	lsrs	r3, r0, #11
    5e56:	428b      	cmp	r3, r1
    5e58:	d301      	bcc.n	5e5e <__udivsi3+0x76>
    5e5a:	02cb      	lsls	r3, r1, #11
    5e5c:	1ac0      	subs	r0, r0, r3
    5e5e:	4152      	adcs	r2, r2
    5e60:	0a83      	lsrs	r3, r0, #10
    5e62:	428b      	cmp	r3, r1
    5e64:	d301      	bcc.n	5e6a <__udivsi3+0x82>
    5e66:	028b      	lsls	r3, r1, #10
    5e68:	1ac0      	subs	r0, r0, r3
    5e6a:	4152      	adcs	r2, r2
    5e6c:	0a43      	lsrs	r3, r0, #9
    5e6e:	428b      	cmp	r3, r1
    5e70:	d301      	bcc.n	5e76 <__udivsi3+0x8e>
    5e72:	024b      	lsls	r3, r1, #9
    5e74:	1ac0      	subs	r0, r0, r3
    5e76:	4152      	adcs	r2, r2
    5e78:	0a03      	lsrs	r3, r0, #8
    5e7a:	428b      	cmp	r3, r1
    5e7c:	d301      	bcc.n	5e82 <__udivsi3+0x9a>
    5e7e:	020b      	lsls	r3, r1, #8
    5e80:	1ac0      	subs	r0, r0, r3
    5e82:	4152      	adcs	r2, r2
    5e84:	d2cd      	bcs.n	5e22 <__udivsi3+0x3a>
    5e86:	09c3      	lsrs	r3, r0, #7
    5e88:	428b      	cmp	r3, r1
    5e8a:	d301      	bcc.n	5e90 <__udivsi3+0xa8>
    5e8c:	01cb      	lsls	r3, r1, #7
    5e8e:	1ac0      	subs	r0, r0, r3
    5e90:	4152      	adcs	r2, r2
    5e92:	0983      	lsrs	r3, r0, #6
    5e94:	428b      	cmp	r3, r1
    5e96:	d301      	bcc.n	5e9c <__udivsi3+0xb4>
    5e98:	018b      	lsls	r3, r1, #6
    5e9a:	1ac0      	subs	r0, r0, r3
    5e9c:	4152      	adcs	r2, r2
    5e9e:	0943      	lsrs	r3, r0, #5
    5ea0:	428b      	cmp	r3, r1
    5ea2:	d301      	bcc.n	5ea8 <__udivsi3+0xc0>
    5ea4:	014b      	lsls	r3, r1, #5
    5ea6:	1ac0      	subs	r0, r0, r3
    5ea8:	4152      	adcs	r2, r2
    5eaa:	0903      	lsrs	r3, r0, #4
    5eac:	428b      	cmp	r3, r1
    5eae:	d301      	bcc.n	5eb4 <__udivsi3+0xcc>
    5eb0:	010b      	lsls	r3, r1, #4
    5eb2:	1ac0      	subs	r0, r0, r3
    5eb4:	4152      	adcs	r2, r2
    5eb6:	08c3      	lsrs	r3, r0, #3
    5eb8:	428b      	cmp	r3, r1
    5eba:	d301      	bcc.n	5ec0 <__udivsi3+0xd8>
    5ebc:	00cb      	lsls	r3, r1, #3
    5ebe:	1ac0      	subs	r0, r0, r3
    5ec0:	4152      	adcs	r2, r2
    5ec2:	0883      	lsrs	r3, r0, #2
    5ec4:	428b      	cmp	r3, r1
    5ec6:	d301      	bcc.n	5ecc <__udivsi3+0xe4>
    5ec8:	008b      	lsls	r3, r1, #2
    5eca:	1ac0      	subs	r0, r0, r3
    5ecc:	4152      	adcs	r2, r2
    5ece:	0843      	lsrs	r3, r0, #1
    5ed0:	428b      	cmp	r3, r1
    5ed2:	d301      	bcc.n	5ed8 <__udivsi3+0xf0>
    5ed4:	004b      	lsls	r3, r1, #1
    5ed6:	1ac0      	subs	r0, r0, r3
    5ed8:	4152      	adcs	r2, r2
    5eda:	1a41      	subs	r1, r0, r1
    5edc:	d200      	bcs.n	5ee0 <__udivsi3+0xf8>
    5ede:	4601      	mov	r1, r0
    5ee0:	4152      	adcs	r2, r2
    5ee2:	4610      	mov	r0, r2
    5ee4:	4770      	bx	lr
    5ee6:	e7ff      	b.n	5ee8 <__udivsi3+0x100>
    5ee8:	b501      	push	{r0, lr}
    5eea:	2000      	movs	r0, #0
    5eec:	f000 f8f0 	bl	60d0 <__aeabi_idiv0>
    5ef0:	bd02      	pop	{r1, pc}
    5ef2:	46c0      	nop			; (mov r8, r8)

00005ef4 <__aeabi_uidivmod>:
    5ef4:	2900      	cmp	r1, #0
    5ef6:	d0f7      	beq.n	5ee8 <__udivsi3+0x100>
    5ef8:	e776      	b.n	5de8 <__udivsi3>
    5efa:	4770      	bx	lr

00005efc <__divsi3>:
    5efc:	4603      	mov	r3, r0
    5efe:	430b      	orrs	r3, r1
    5f00:	d47f      	bmi.n	6002 <__divsi3+0x106>
    5f02:	2200      	movs	r2, #0
    5f04:	0843      	lsrs	r3, r0, #1
    5f06:	428b      	cmp	r3, r1
    5f08:	d374      	bcc.n	5ff4 <__divsi3+0xf8>
    5f0a:	0903      	lsrs	r3, r0, #4
    5f0c:	428b      	cmp	r3, r1
    5f0e:	d35f      	bcc.n	5fd0 <__divsi3+0xd4>
    5f10:	0a03      	lsrs	r3, r0, #8
    5f12:	428b      	cmp	r3, r1
    5f14:	d344      	bcc.n	5fa0 <__divsi3+0xa4>
    5f16:	0b03      	lsrs	r3, r0, #12
    5f18:	428b      	cmp	r3, r1
    5f1a:	d328      	bcc.n	5f6e <__divsi3+0x72>
    5f1c:	0c03      	lsrs	r3, r0, #16
    5f1e:	428b      	cmp	r3, r1
    5f20:	d30d      	bcc.n	5f3e <__divsi3+0x42>
    5f22:	22ff      	movs	r2, #255	; 0xff
    5f24:	0209      	lsls	r1, r1, #8
    5f26:	ba12      	rev	r2, r2
    5f28:	0c03      	lsrs	r3, r0, #16
    5f2a:	428b      	cmp	r3, r1
    5f2c:	d302      	bcc.n	5f34 <__divsi3+0x38>
    5f2e:	1212      	asrs	r2, r2, #8
    5f30:	0209      	lsls	r1, r1, #8
    5f32:	d065      	beq.n	6000 <__divsi3+0x104>
    5f34:	0b03      	lsrs	r3, r0, #12
    5f36:	428b      	cmp	r3, r1
    5f38:	d319      	bcc.n	5f6e <__divsi3+0x72>
    5f3a:	e000      	b.n	5f3e <__divsi3+0x42>
    5f3c:	0a09      	lsrs	r1, r1, #8
    5f3e:	0bc3      	lsrs	r3, r0, #15
    5f40:	428b      	cmp	r3, r1
    5f42:	d301      	bcc.n	5f48 <__divsi3+0x4c>
    5f44:	03cb      	lsls	r3, r1, #15
    5f46:	1ac0      	subs	r0, r0, r3
    5f48:	4152      	adcs	r2, r2
    5f4a:	0b83      	lsrs	r3, r0, #14
    5f4c:	428b      	cmp	r3, r1
    5f4e:	d301      	bcc.n	5f54 <__divsi3+0x58>
    5f50:	038b      	lsls	r3, r1, #14
    5f52:	1ac0      	subs	r0, r0, r3
    5f54:	4152      	adcs	r2, r2
    5f56:	0b43      	lsrs	r3, r0, #13
    5f58:	428b      	cmp	r3, r1
    5f5a:	d301      	bcc.n	5f60 <__divsi3+0x64>
    5f5c:	034b      	lsls	r3, r1, #13
    5f5e:	1ac0      	subs	r0, r0, r3
    5f60:	4152      	adcs	r2, r2
    5f62:	0b03      	lsrs	r3, r0, #12
    5f64:	428b      	cmp	r3, r1
    5f66:	d301      	bcc.n	5f6c <__divsi3+0x70>
    5f68:	030b      	lsls	r3, r1, #12
    5f6a:	1ac0      	subs	r0, r0, r3
    5f6c:	4152      	adcs	r2, r2
    5f6e:	0ac3      	lsrs	r3, r0, #11
    5f70:	428b      	cmp	r3, r1
    5f72:	d301      	bcc.n	5f78 <__divsi3+0x7c>
    5f74:	02cb      	lsls	r3, r1, #11
    5f76:	1ac0      	subs	r0, r0, r3
    5f78:	4152      	adcs	r2, r2
    5f7a:	0a83      	lsrs	r3, r0, #10
    5f7c:	428b      	cmp	r3, r1
    5f7e:	d301      	bcc.n	5f84 <__divsi3+0x88>
    5f80:	028b      	lsls	r3, r1, #10
    5f82:	1ac0      	subs	r0, r0, r3
    5f84:	4152      	adcs	r2, r2
    5f86:	0a43      	lsrs	r3, r0, #9
    5f88:	428b      	cmp	r3, r1
    5f8a:	d301      	bcc.n	5f90 <__divsi3+0x94>
    5f8c:	024b      	lsls	r3, r1, #9
    5f8e:	1ac0      	subs	r0, r0, r3
    5f90:	4152      	adcs	r2, r2
    5f92:	0a03      	lsrs	r3, r0, #8
    5f94:	428b      	cmp	r3, r1
    5f96:	d301      	bcc.n	5f9c <__divsi3+0xa0>
    5f98:	020b      	lsls	r3, r1, #8
    5f9a:	1ac0      	subs	r0, r0, r3
    5f9c:	4152      	adcs	r2, r2
    5f9e:	d2cd      	bcs.n	5f3c <__divsi3+0x40>
    5fa0:	09c3      	lsrs	r3, r0, #7
    5fa2:	428b      	cmp	r3, r1
    5fa4:	d301      	bcc.n	5faa <__divsi3+0xae>
    5fa6:	01cb      	lsls	r3, r1, #7
    5fa8:	1ac0      	subs	r0, r0, r3
    5faa:	4152      	adcs	r2, r2
    5fac:	0983      	lsrs	r3, r0, #6
    5fae:	428b      	cmp	r3, r1
    5fb0:	d301      	bcc.n	5fb6 <__divsi3+0xba>
    5fb2:	018b      	lsls	r3, r1, #6
    5fb4:	1ac0      	subs	r0, r0, r3
    5fb6:	4152      	adcs	r2, r2
    5fb8:	0943      	lsrs	r3, r0, #5
    5fba:	428b      	cmp	r3, r1
    5fbc:	d301      	bcc.n	5fc2 <__divsi3+0xc6>
    5fbe:	014b      	lsls	r3, r1, #5
    5fc0:	1ac0      	subs	r0, r0, r3
    5fc2:	4152      	adcs	r2, r2
    5fc4:	0903      	lsrs	r3, r0, #4
    5fc6:	428b      	cmp	r3, r1
    5fc8:	d301      	bcc.n	5fce <__divsi3+0xd2>
    5fca:	010b      	lsls	r3, r1, #4
    5fcc:	1ac0      	subs	r0, r0, r3
    5fce:	4152      	adcs	r2, r2
    5fd0:	08c3      	lsrs	r3, r0, #3
    5fd2:	428b      	cmp	r3, r1
    5fd4:	d301      	bcc.n	5fda <__divsi3+0xde>
    5fd6:	00cb      	lsls	r3, r1, #3
    5fd8:	1ac0      	subs	r0, r0, r3
    5fda:	4152      	adcs	r2, r2
    5fdc:	0883      	lsrs	r3, r0, #2
    5fde:	428b      	cmp	r3, r1
    5fe0:	d301      	bcc.n	5fe6 <__divsi3+0xea>
    5fe2:	008b      	lsls	r3, r1, #2
    5fe4:	1ac0      	subs	r0, r0, r3
    5fe6:	4152      	adcs	r2, r2
    5fe8:	0843      	lsrs	r3, r0, #1
    5fea:	428b      	cmp	r3, r1
    5fec:	d301      	bcc.n	5ff2 <__divsi3+0xf6>
    5fee:	004b      	lsls	r3, r1, #1
    5ff0:	1ac0      	subs	r0, r0, r3
    5ff2:	4152      	adcs	r2, r2
    5ff4:	1a41      	subs	r1, r0, r1
    5ff6:	d200      	bcs.n	5ffa <__divsi3+0xfe>
    5ff8:	4601      	mov	r1, r0
    5ffa:	4152      	adcs	r2, r2
    5ffc:	4610      	mov	r0, r2
    5ffe:	4770      	bx	lr
    6000:	e05d      	b.n	60be <__divsi3+0x1c2>
    6002:	0fca      	lsrs	r2, r1, #31
    6004:	d000      	beq.n	6008 <__divsi3+0x10c>
    6006:	4249      	negs	r1, r1
    6008:	1003      	asrs	r3, r0, #32
    600a:	d300      	bcc.n	600e <__divsi3+0x112>
    600c:	4240      	negs	r0, r0
    600e:	4053      	eors	r3, r2
    6010:	2200      	movs	r2, #0
    6012:	469c      	mov	ip, r3
    6014:	0903      	lsrs	r3, r0, #4
    6016:	428b      	cmp	r3, r1
    6018:	d32d      	bcc.n	6076 <__divsi3+0x17a>
    601a:	0a03      	lsrs	r3, r0, #8
    601c:	428b      	cmp	r3, r1
    601e:	d312      	bcc.n	6046 <__divsi3+0x14a>
    6020:	22fc      	movs	r2, #252	; 0xfc
    6022:	0189      	lsls	r1, r1, #6
    6024:	ba12      	rev	r2, r2
    6026:	0a03      	lsrs	r3, r0, #8
    6028:	428b      	cmp	r3, r1
    602a:	d30c      	bcc.n	6046 <__divsi3+0x14a>
    602c:	0189      	lsls	r1, r1, #6
    602e:	1192      	asrs	r2, r2, #6
    6030:	428b      	cmp	r3, r1
    6032:	d308      	bcc.n	6046 <__divsi3+0x14a>
    6034:	0189      	lsls	r1, r1, #6
    6036:	1192      	asrs	r2, r2, #6
    6038:	428b      	cmp	r3, r1
    603a:	d304      	bcc.n	6046 <__divsi3+0x14a>
    603c:	0189      	lsls	r1, r1, #6
    603e:	d03a      	beq.n	60b6 <__divsi3+0x1ba>
    6040:	1192      	asrs	r2, r2, #6
    6042:	e000      	b.n	6046 <__divsi3+0x14a>
    6044:	0989      	lsrs	r1, r1, #6
    6046:	09c3      	lsrs	r3, r0, #7
    6048:	428b      	cmp	r3, r1
    604a:	d301      	bcc.n	6050 <__divsi3+0x154>
    604c:	01cb      	lsls	r3, r1, #7
    604e:	1ac0      	subs	r0, r0, r3
    6050:	4152      	adcs	r2, r2
    6052:	0983      	lsrs	r3, r0, #6
    6054:	428b      	cmp	r3, r1
    6056:	d301      	bcc.n	605c <__divsi3+0x160>
    6058:	018b      	lsls	r3, r1, #6
    605a:	1ac0      	subs	r0, r0, r3
    605c:	4152      	adcs	r2, r2
    605e:	0943      	lsrs	r3, r0, #5
    6060:	428b      	cmp	r3, r1
    6062:	d301      	bcc.n	6068 <__divsi3+0x16c>
    6064:	014b      	lsls	r3, r1, #5
    6066:	1ac0      	subs	r0, r0, r3
    6068:	4152      	adcs	r2, r2
    606a:	0903      	lsrs	r3, r0, #4
    606c:	428b      	cmp	r3, r1
    606e:	d301      	bcc.n	6074 <__divsi3+0x178>
    6070:	010b      	lsls	r3, r1, #4
    6072:	1ac0      	subs	r0, r0, r3
    6074:	4152      	adcs	r2, r2
    6076:	08c3      	lsrs	r3, r0, #3
    6078:	428b      	cmp	r3, r1
    607a:	d301      	bcc.n	6080 <__divsi3+0x184>
    607c:	00cb      	lsls	r3, r1, #3
    607e:	1ac0      	subs	r0, r0, r3
    6080:	4152      	adcs	r2, r2
    6082:	0883      	lsrs	r3, r0, #2
    6084:	428b      	cmp	r3, r1
    6086:	d301      	bcc.n	608c <__divsi3+0x190>
    6088:	008b      	lsls	r3, r1, #2
    608a:	1ac0      	subs	r0, r0, r3
    608c:	4152      	adcs	r2, r2
    608e:	d2d9      	bcs.n	6044 <__divsi3+0x148>
    6090:	0843      	lsrs	r3, r0, #1
    6092:	428b      	cmp	r3, r1
    6094:	d301      	bcc.n	609a <__divsi3+0x19e>
    6096:	004b      	lsls	r3, r1, #1
    6098:	1ac0      	subs	r0, r0, r3
    609a:	4152      	adcs	r2, r2
    609c:	1a41      	subs	r1, r0, r1
    609e:	d200      	bcs.n	60a2 <__divsi3+0x1a6>
    60a0:	4601      	mov	r1, r0
    60a2:	4663      	mov	r3, ip
    60a4:	4152      	adcs	r2, r2
    60a6:	105b      	asrs	r3, r3, #1
    60a8:	4610      	mov	r0, r2
    60aa:	d301      	bcc.n	60b0 <__divsi3+0x1b4>
    60ac:	4240      	negs	r0, r0
    60ae:	2b00      	cmp	r3, #0
    60b0:	d500      	bpl.n	60b4 <__divsi3+0x1b8>
    60b2:	4249      	negs	r1, r1
    60b4:	4770      	bx	lr
    60b6:	4663      	mov	r3, ip
    60b8:	105b      	asrs	r3, r3, #1
    60ba:	d300      	bcc.n	60be <__divsi3+0x1c2>
    60bc:	4240      	negs	r0, r0
    60be:	b501      	push	{r0, lr}
    60c0:	2000      	movs	r0, #0
    60c2:	f000 f805 	bl	60d0 <__aeabi_idiv0>
    60c6:	bd02      	pop	{r1, pc}

000060c8 <__aeabi_idivmod>:
    60c8:	2900      	cmp	r1, #0
    60ca:	d0f8      	beq.n	60be <__divsi3+0x1c2>
    60cc:	e716      	b.n	5efc <__divsi3>
    60ce:	4770      	bx	lr

000060d0 <__aeabi_idiv0>:
    60d0:	4770      	bx	lr
    60d2:	46c0      	nop			; (mov r8, r8)

000060d4 <__aeabi_cdrcmple>:
    60d4:	4684      	mov	ip, r0
    60d6:	1c10      	adds	r0, r2, #0
    60d8:	4662      	mov	r2, ip
    60da:	468c      	mov	ip, r1
    60dc:	1c19      	adds	r1, r3, #0
    60de:	4663      	mov	r3, ip
    60e0:	e000      	b.n	60e4 <__aeabi_cdcmpeq>
    60e2:	46c0      	nop			; (mov r8, r8)

000060e4 <__aeabi_cdcmpeq>:
    60e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    60e6:	f001 fc6b 	bl	79c0 <__ledf2>
    60ea:	2800      	cmp	r0, #0
    60ec:	d401      	bmi.n	60f2 <__aeabi_cdcmpeq+0xe>
    60ee:	2100      	movs	r1, #0
    60f0:	42c8      	cmn	r0, r1
    60f2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000060f4 <__aeabi_dcmpeq>:
    60f4:	b510      	push	{r4, lr}
    60f6:	f001 fbc5 	bl	7884 <__eqdf2>
    60fa:	4240      	negs	r0, r0
    60fc:	3001      	adds	r0, #1
    60fe:	bd10      	pop	{r4, pc}

00006100 <__aeabi_dcmplt>:
    6100:	b510      	push	{r4, lr}
    6102:	f001 fc5d 	bl	79c0 <__ledf2>
    6106:	2800      	cmp	r0, #0
    6108:	db01      	blt.n	610e <__aeabi_dcmplt+0xe>
    610a:	2000      	movs	r0, #0
    610c:	bd10      	pop	{r4, pc}
    610e:	2001      	movs	r0, #1
    6110:	bd10      	pop	{r4, pc}
    6112:	46c0      	nop			; (mov r8, r8)

00006114 <__aeabi_dcmple>:
    6114:	b510      	push	{r4, lr}
    6116:	f001 fc53 	bl	79c0 <__ledf2>
    611a:	2800      	cmp	r0, #0
    611c:	dd01      	ble.n	6122 <__aeabi_dcmple+0xe>
    611e:	2000      	movs	r0, #0
    6120:	bd10      	pop	{r4, pc}
    6122:	2001      	movs	r0, #1
    6124:	bd10      	pop	{r4, pc}
    6126:	46c0      	nop			; (mov r8, r8)

00006128 <__aeabi_dcmpgt>:
    6128:	b510      	push	{r4, lr}
    612a:	f001 fbe5 	bl	78f8 <__gedf2>
    612e:	2800      	cmp	r0, #0
    6130:	dc01      	bgt.n	6136 <__aeabi_dcmpgt+0xe>
    6132:	2000      	movs	r0, #0
    6134:	bd10      	pop	{r4, pc}
    6136:	2001      	movs	r0, #1
    6138:	bd10      	pop	{r4, pc}
    613a:	46c0      	nop			; (mov r8, r8)

0000613c <__aeabi_dcmpge>:
    613c:	b510      	push	{r4, lr}
    613e:	f001 fbdb 	bl	78f8 <__gedf2>
    6142:	2800      	cmp	r0, #0
    6144:	da01      	bge.n	614a <__aeabi_dcmpge+0xe>
    6146:	2000      	movs	r0, #0
    6148:	bd10      	pop	{r4, pc}
    614a:	2001      	movs	r0, #1
    614c:	bd10      	pop	{r4, pc}
    614e:	46c0      	nop			; (mov r8, r8)

00006150 <__aeabi_cfrcmple>:
    6150:	4684      	mov	ip, r0
    6152:	1c08      	adds	r0, r1, #0
    6154:	4661      	mov	r1, ip
    6156:	e7ff      	b.n	6158 <__aeabi_cfcmpeq>

00006158 <__aeabi_cfcmpeq>:
    6158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    615a:	f000 fb9d 	bl	6898 <__lesf2>
    615e:	2800      	cmp	r0, #0
    6160:	d401      	bmi.n	6166 <__aeabi_cfcmpeq+0xe>
    6162:	2100      	movs	r1, #0
    6164:	42c8      	cmn	r0, r1
    6166:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006168 <__aeabi_fcmpeq>:
    6168:	b510      	push	{r4, lr}
    616a:	f000 fb2f 	bl	67cc <__eqsf2>
    616e:	4240      	negs	r0, r0
    6170:	3001      	adds	r0, #1
    6172:	bd10      	pop	{r4, pc}

00006174 <__aeabi_fcmplt>:
    6174:	b510      	push	{r4, lr}
    6176:	f000 fb8f 	bl	6898 <__lesf2>
    617a:	2800      	cmp	r0, #0
    617c:	db01      	blt.n	6182 <__aeabi_fcmplt+0xe>
    617e:	2000      	movs	r0, #0
    6180:	bd10      	pop	{r4, pc}
    6182:	2001      	movs	r0, #1
    6184:	bd10      	pop	{r4, pc}
    6186:	46c0      	nop			; (mov r8, r8)

00006188 <__aeabi_fcmple>:
    6188:	b510      	push	{r4, lr}
    618a:	f000 fb85 	bl	6898 <__lesf2>
    618e:	2800      	cmp	r0, #0
    6190:	dd01      	ble.n	6196 <__aeabi_fcmple+0xe>
    6192:	2000      	movs	r0, #0
    6194:	bd10      	pop	{r4, pc}
    6196:	2001      	movs	r0, #1
    6198:	bd10      	pop	{r4, pc}
    619a:	46c0      	nop			; (mov r8, r8)

0000619c <__aeabi_fcmpgt>:
    619c:	b510      	push	{r4, lr}
    619e:	f000 fb3b 	bl	6818 <__gesf2>
    61a2:	2800      	cmp	r0, #0
    61a4:	dc01      	bgt.n	61aa <__aeabi_fcmpgt+0xe>
    61a6:	2000      	movs	r0, #0
    61a8:	bd10      	pop	{r4, pc}
    61aa:	2001      	movs	r0, #1
    61ac:	bd10      	pop	{r4, pc}
    61ae:	46c0      	nop			; (mov r8, r8)

000061b0 <__aeabi_fcmpge>:
    61b0:	b510      	push	{r4, lr}
    61b2:	f000 fb31 	bl	6818 <__gesf2>
    61b6:	2800      	cmp	r0, #0
    61b8:	da01      	bge.n	61be <__aeabi_fcmpge+0xe>
    61ba:	2000      	movs	r0, #0
    61bc:	bd10      	pop	{r4, pc}
    61be:	2001      	movs	r0, #1
    61c0:	bd10      	pop	{r4, pc}
    61c2:	46c0      	nop			; (mov r8, r8)

000061c4 <__aeabi_lmul>:
    61c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    61c6:	46ce      	mov	lr, r9
    61c8:	4647      	mov	r7, r8
    61ca:	0415      	lsls	r5, r2, #16
    61cc:	0c2d      	lsrs	r5, r5, #16
    61ce:	002e      	movs	r6, r5
    61d0:	b580      	push	{r7, lr}
    61d2:	0407      	lsls	r7, r0, #16
    61d4:	0c14      	lsrs	r4, r2, #16
    61d6:	0c3f      	lsrs	r7, r7, #16
    61d8:	4699      	mov	r9, r3
    61da:	0c03      	lsrs	r3, r0, #16
    61dc:	437e      	muls	r6, r7
    61de:	435d      	muls	r5, r3
    61e0:	4367      	muls	r7, r4
    61e2:	4363      	muls	r3, r4
    61e4:	197f      	adds	r7, r7, r5
    61e6:	0c34      	lsrs	r4, r6, #16
    61e8:	19e4      	adds	r4, r4, r7
    61ea:	469c      	mov	ip, r3
    61ec:	42a5      	cmp	r5, r4
    61ee:	d903      	bls.n	61f8 <__aeabi_lmul+0x34>
    61f0:	2380      	movs	r3, #128	; 0x80
    61f2:	025b      	lsls	r3, r3, #9
    61f4:	4698      	mov	r8, r3
    61f6:	44c4      	add	ip, r8
    61f8:	464b      	mov	r3, r9
    61fa:	4351      	muls	r1, r2
    61fc:	4343      	muls	r3, r0
    61fe:	0436      	lsls	r6, r6, #16
    6200:	0c36      	lsrs	r6, r6, #16
    6202:	0c25      	lsrs	r5, r4, #16
    6204:	0424      	lsls	r4, r4, #16
    6206:	4465      	add	r5, ip
    6208:	19a4      	adds	r4, r4, r6
    620a:	1859      	adds	r1, r3, r1
    620c:	1949      	adds	r1, r1, r5
    620e:	0020      	movs	r0, r4
    6210:	bc0c      	pop	{r2, r3}
    6212:	4690      	mov	r8, r2
    6214:	4699      	mov	r9, r3
    6216:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006218 <__aeabi_fadd>:
    6218:	b5f0      	push	{r4, r5, r6, r7, lr}
    621a:	46c6      	mov	lr, r8
    621c:	024e      	lsls	r6, r1, #9
    621e:	0247      	lsls	r7, r0, #9
    6220:	0a76      	lsrs	r6, r6, #9
    6222:	0a7b      	lsrs	r3, r7, #9
    6224:	0044      	lsls	r4, r0, #1
    6226:	0fc5      	lsrs	r5, r0, #31
    6228:	00f7      	lsls	r7, r6, #3
    622a:	0048      	lsls	r0, r1, #1
    622c:	4698      	mov	r8, r3
    622e:	b500      	push	{lr}
    6230:	0e24      	lsrs	r4, r4, #24
    6232:	002a      	movs	r2, r5
    6234:	00db      	lsls	r3, r3, #3
    6236:	0e00      	lsrs	r0, r0, #24
    6238:	0fc9      	lsrs	r1, r1, #31
    623a:	46bc      	mov	ip, r7
    623c:	428d      	cmp	r5, r1
    623e:	d067      	beq.n	6310 <__aeabi_fadd+0xf8>
    6240:	1a22      	subs	r2, r4, r0
    6242:	2a00      	cmp	r2, #0
    6244:	dc00      	bgt.n	6248 <__aeabi_fadd+0x30>
    6246:	e0a5      	b.n	6394 <__aeabi_fadd+0x17c>
    6248:	2800      	cmp	r0, #0
    624a:	d13a      	bne.n	62c2 <__aeabi_fadd+0xaa>
    624c:	2f00      	cmp	r7, #0
    624e:	d100      	bne.n	6252 <__aeabi_fadd+0x3a>
    6250:	e093      	b.n	637a <__aeabi_fadd+0x162>
    6252:	1e51      	subs	r1, r2, #1
    6254:	2900      	cmp	r1, #0
    6256:	d000      	beq.n	625a <__aeabi_fadd+0x42>
    6258:	e0bc      	b.n	63d4 <__aeabi_fadd+0x1bc>
    625a:	2401      	movs	r4, #1
    625c:	1bdb      	subs	r3, r3, r7
    625e:	015a      	lsls	r2, r3, #5
    6260:	d546      	bpl.n	62f0 <__aeabi_fadd+0xd8>
    6262:	019b      	lsls	r3, r3, #6
    6264:	099e      	lsrs	r6, r3, #6
    6266:	0030      	movs	r0, r6
    6268:	f002 fb4c 	bl	8904 <__clzsi2>
    626c:	3805      	subs	r0, #5
    626e:	4086      	lsls	r6, r0
    6270:	4284      	cmp	r4, r0
    6272:	dd00      	ble.n	6276 <__aeabi_fadd+0x5e>
    6274:	e09d      	b.n	63b2 <__aeabi_fadd+0x19a>
    6276:	1b04      	subs	r4, r0, r4
    6278:	0032      	movs	r2, r6
    627a:	2020      	movs	r0, #32
    627c:	3401      	adds	r4, #1
    627e:	40e2      	lsrs	r2, r4
    6280:	1b04      	subs	r4, r0, r4
    6282:	40a6      	lsls	r6, r4
    6284:	0033      	movs	r3, r6
    6286:	1e5e      	subs	r6, r3, #1
    6288:	41b3      	sbcs	r3, r6
    628a:	2400      	movs	r4, #0
    628c:	4313      	orrs	r3, r2
    628e:	075a      	lsls	r2, r3, #29
    6290:	d004      	beq.n	629c <__aeabi_fadd+0x84>
    6292:	220f      	movs	r2, #15
    6294:	401a      	ands	r2, r3
    6296:	2a04      	cmp	r2, #4
    6298:	d000      	beq.n	629c <__aeabi_fadd+0x84>
    629a:	3304      	adds	r3, #4
    629c:	015a      	lsls	r2, r3, #5
    629e:	d529      	bpl.n	62f4 <__aeabi_fadd+0xdc>
    62a0:	3401      	adds	r4, #1
    62a2:	2cff      	cmp	r4, #255	; 0xff
    62a4:	d100      	bne.n	62a8 <__aeabi_fadd+0x90>
    62a6:	e081      	b.n	63ac <__aeabi_fadd+0x194>
    62a8:	002a      	movs	r2, r5
    62aa:	019b      	lsls	r3, r3, #6
    62ac:	0a5b      	lsrs	r3, r3, #9
    62ae:	b2e4      	uxtb	r4, r4
    62b0:	025b      	lsls	r3, r3, #9
    62b2:	05e4      	lsls	r4, r4, #23
    62b4:	0a58      	lsrs	r0, r3, #9
    62b6:	07d2      	lsls	r2, r2, #31
    62b8:	4320      	orrs	r0, r4
    62ba:	4310      	orrs	r0, r2
    62bc:	bc04      	pop	{r2}
    62be:	4690      	mov	r8, r2
    62c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62c2:	2cff      	cmp	r4, #255	; 0xff
    62c4:	d0e3      	beq.n	628e <__aeabi_fadd+0x76>
    62c6:	2180      	movs	r1, #128	; 0x80
    62c8:	0038      	movs	r0, r7
    62ca:	04c9      	lsls	r1, r1, #19
    62cc:	4308      	orrs	r0, r1
    62ce:	4684      	mov	ip, r0
    62d0:	2a1b      	cmp	r2, #27
    62d2:	dd00      	ble.n	62d6 <__aeabi_fadd+0xbe>
    62d4:	e082      	b.n	63dc <__aeabi_fadd+0x1c4>
    62d6:	2020      	movs	r0, #32
    62d8:	4661      	mov	r1, ip
    62da:	40d1      	lsrs	r1, r2
    62dc:	1a82      	subs	r2, r0, r2
    62de:	4660      	mov	r0, ip
    62e0:	4090      	lsls	r0, r2
    62e2:	0002      	movs	r2, r0
    62e4:	1e50      	subs	r0, r2, #1
    62e6:	4182      	sbcs	r2, r0
    62e8:	430a      	orrs	r2, r1
    62ea:	1a9b      	subs	r3, r3, r2
    62ec:	015a      	lsls	r2, r3, #5
    62ee:	d4b8      	bmi.n	6262 <__aeabi_fadd+0x4a>
    62f0:	075a      	lsls	r2, r3, #29
    62f2:	d1ce      	bne.n	6292 <__aeabi_fadd+0x7a>
    62f4:	08de      	lsrs	r6, r3, #3
    62f6:	002a      	movs	r2, r5
    62f8:	2cff      	cmp	r4, #255	; 0xff
    62fa:	d13a      	bne.n	6372 <__aeabi_fadd+0x15a>
    62fc:	2e00      	cmp	r6, #0
    62fe:	d100      	bne.n	6302 <__aeabi_fadd+0xea>
    6300:	e0ae      	b.n	6460 <__aeabi_fadd+0x248>
    6302:	2380      	movs	r3, #128	; 0x80
    6304:	03db      	lsls	r3, r3, #15
    6306:	4333      	orrs	r3, r6
    6308:	025b      	lsls	r3, r3, #9
    630a:	0a5b      	lsrs	r3, r3, #9
    630c:	24ff      	movs	r4, #255	; 0xff
    630e:	e7cf      	b.n	62b0 <__aeabi_fadd+0x98>
    6310:	1a21      	subs	r1, r4, r0
    6312:	2900      	cmp	r1, #0
    6314:	dd52      	ble.n	63bc <__aeabi_fadd+0x1a4>
    6316:	2800      	cmp	r0, #0
    6318:	d031      	beq.n	637e <__aeabi_fadd+0x166>
    631a:	2cff      	cmp	r4, #255	; 0xff
    631c:	d0b7      	beq.n	628e <__aeabi_fadd+0x76>
    631e:	2080      	movs	r0, #128	; 0x80
    6320:	003e      	movs	r6, r7
    6322:	04c0      	lsls	r0, r0, #19
    6324:	4306      	orrs	r6, r0
    6326:	46b4      	mov	ip, r6
    6328:	291b      	cmp	r1, #27
    632a:	dd00      	ble.n	632e <__aeabi_fadd+0x116>
    632c:	e0aa      	b.n	6484 <__aeabi_fadd+0x26c>
    632e:	2620      	movs	r6, #32
    6330:	4660      	mov	r0, ip
    6332:	40c8      	lsrs	r0, r1
    6334:	1a71      	subs	r1, r6, r1
    6336:	4666      	mov	r6, ip
    6338:	408e      	lsls	r6, r1
    633a:	0031      	movs	r1, r6
    633c:	1e4e      	subs	r6, r1, #1
    633e:	41b1      	sbcs	r1, r6
    6340:	4301      	orrs	r1, r0
    6342:	185b      	adds	r3, r3, r1
    6344:	0159      	lsls	r1, r3, #5
    6346:	d5d3      	bpl.n	62f0 <__aeabi_fadd+0xd8>
    6348:	3401      	adds	r4, #1
    634a:	2cff      	cmp	r4, #255	; 0xff
    634c:	d100      	bne.n	6350 <__aeabi_fadd+0x138>
    634e:	e087      	b.n	6460 <__aeabi_fadd+0x248>
    6350:	2201      	movs	r2, #1
    6352:	4978      	ldr	r1, [pc, #480]	; (6534 <__aeabi_fadd+0x31c>)
    6354:	401a      	ands	r2, r3
    6356:	085b      	lsrs	r3, r3, #1
    6358:	400b      	ands	r3, r1
    635a:	4313      	orrs	r3, r2
    635c:	e797      	b.n	628e <__aeabi_fadd+0x76>
    635e:	2c00      	cmp	r4, #0
    6360:	d000      	beq.n	6364 <__aeabi_fadd+0x14c>
    6362:	e0a7      	b.n	64b4 <__aeabi_fadd+0x29c>
    6364:	2b00      	cmp	r3, #0
    6366:	d000      	beq.n	636a <__aeabi_fadd+0x152>
    6368:	e0b6      	b.n	64d8 <__aeabi_fadd+0x2c0>
    636a:	1e3b      	subs	r3, r7, #0
    636c:	d162      	bne.n	6434 <__aeabi_fadd+0x21c>
    636e:	2600      	movs	r6, #0
    6370:	2200      	movs	r2, #0
    6372:	0273      	lsls	r3, r6, #9
    6374:	0a5b      	lsrs	r3, r3, #9
    6376:	b2e4      	uxtb	r4, r4
    6378:	e79a      	b.n	62b0 <__aeabi_fadd+0x98>
    637a:	0014      	movs	r4, r2
    637c:	e787      	b.n	628e <__aeabi_fadd+0x76>
    637e:	2f00      	cmp	r7, #0
    6380:	d04d      	beq.n	641e <__aeabi_fadd+0x206>
    6382:	1e48      	subs	r0, r1, #1
    6384:	2800      	cmp	r0, #0
    6386:	d157      	bne.n	6438 <__aeabi_fadd+0x220>
    6388:	4463      	add	r3, ip
    638a:	2401      	movs	r4, #1
    638c:	015a      	lsls	r2, r3, #5
    638e:	d5af      	bpl.n	62f0 <__aeabi_fadd+0xd8>
    6390:	2402      	movs	r4, #2
    6392:	e7dd      	b.n	6350 <__aeabi_fadd+0x138>
    6394:	2a00      	cmp	r2, #0
    6396:	d124      	bne.n	63e2 <__aeabi_fadd+0x1ca>
    6398:	1c62      	adds	r2, r4, #1
    639a:	b2d2      	uxtb	r2, r2
    639c:	2a01      	cmp	r2, #1
    639e:	ddde      	ble.n	635e <__aeabi_fadd+0x146>
    63a0:	1bde      	subs	r6, r3, r7
    63a2:	0172      	lsls	r2, r6, #5
    63a4:	d535      	bpl.n	6412 <__aeabi_fadd+0x1fa>
    63a6:	1afe      	subs	r6, r7, r3
    63a8:	000d      	movs	r5, r1
    63aa:	e75c      	b.n	6266 <__aeabi_fadd+0x4e>
    63ac:	002a      	movs	r2, r5
    63ae:	2300      	movs	r3, #0
    63b0:	e77e      	b.n	62b0 <__aeabi_fadd+0x98>
    63b2:	0033      	movs	r3, r6
    63b4:	4a60      	ldr	r2, [pc, #384]	; (6538 <__aeabi_fadd+0x320>)
    63b6:	1a24      	subs	r4, r4, r0
    63b8:	4013      	ands	r3, r2
    63ba:	e768      	b.n	628e <__aeabi_fadd+0x76>
    63bc:	2900      	cmp	r1, #0
    63be:	d163      	bne.n	6488 <__aeabi_fadd+0x270>
    63c0:	1c61      	adds	r1, r4, #1
    63c2:	b2c8      	uxtb	r0, r1
    63c4:	2801      	cmp	r0, #1
    63c6:	dd4e      	ble.n	6466 <__aeabi_fadd+0x24e>
    63c8:	29ff      	cmp	r1, #255	; 0xff
    63ca:	d049      	beq.n	6460 <__aeabi_fadd+0x248>
    63cc:	4463      	add	r3, ip
    63ce:	085b      	lsrs	r3, r3, #1
    63d0:	000c      	movs	r4, r1
    63d2:	e75c      	b.n	628e <__aeabi_fadd+0x76>
    63d4:	2aff      	cmp	r2, #255	; 0xff
    63d6:	d041      	beq.n	645c <__aeabi_fadd+0x244>
    63d8:	000a      	movs	r2, r1
    63da:	e779      	b.n	62d0 <__aeabi_fadd+0xb8>
    63dc:	2201      	movs	r2, #1
    63de:	1a9b      	subs	r3, r3, r2
    63e0:	e784      	b.n	62ec <__aeabi_fadd+0xd4>
    63e2:	2c00      	cmp	r4, #0
    63e4:	d01d      	beq.n	6422 <__aeabi_fadd+0x20a>
    63e6:	28ff      	cmp	r0, #255	; 0xff
    63e8:	d022      	beq.n	6430 <__aeabi_fadd+0x218>
    63ea:	2480      	movs	r4, #128	; 0x80
    63ec:	04e4      	lsls	r4, r4, #19
    63ee:	4252      	negs	r2, r2
    63f0:	4323      	orrs	r3, r4
    63f2:	2a1b      	cmp	r2, #27
    63f4:	dd00      	ble.n	63f8 <__aeabi_fadd+0x1e0>
    63f6:	e08a      	b.n	650e <__aeabi_fadd+0x2f6>
    63f8:	001c      	movs	r4, r3
    63fa:	2520      	movs	r5, #32
    63fc:	40d4      	lsrs	r4, r2
    63fe:	1aaa      	subs	r2, r5, r2
    6400:	4093      	lsls	r3, r2
    6402:	1e5a      	subs	r2, r3, #1
    6404:	4193      	sbcs	r3, r2
    6406:	4323      	orrs	r3, r4
    6408:	4662      	mov	r2, ip
    640a:	0004      	movs	r4, r0
    640c:	1ad3      	subs	r3, r2, r3
    640e:	000d      	movs	r5, r1
    6410:	e725      	b.n	625e <__aeabi_fadd+0x46>
    6412:	2e00      	cmp	r6, #0
    6414:	d000      	beq.n	6418 <__aeabi_fadd+0x200>
    6416:	e726      	b.n	6266 <__aeabi_fadd+0x4e>
    6418:	2200      	movs	r2, #0
    641a:	2400      	movs	r4, #0
    641c:	e7a9      	b.n	6372 <__aeabi_fadd+0x15a>
    641e:	000c      	movs	r4, r1
    6420:	e735      	b.n	628e <__aeabi_fadd+0x76>
    6422:	2b00      	cmp	r3, #0
    6424:	d04d      	beq.n	64c2 <__aeabi_fadd+0x2aa>
    6426:	43d2      	mvns	r2, r2
    6428:	2a00      	cmp	r2, #0
    642a:	d0ed      	beq.n	6408 <__aeabi_fadd+0x1f0>
    642c:	28ff      	cmp	r0, #255	; 0xff
    642e:	d1e0      	bne.n	63f2 <__aeabi_fadd+0x1da>
    6430:	4663      	mov	r3, ip
    6432:	24ff      	movs	r4, #255	; 0xff
    6434:	000d      	movs	r5, r1
    6436:	e72a      	b.n	628e <__aeabi_fadd+0x76>
    6438:	29ff      	cmp	r1, #255	; 0xff
    643a:	d00f      	beq.n	645c <__aeabi_fadd+0x244>
    643c:	0001      	movs	r1, r0
    643e:	e773      	b.n	6328 <__aeabi_fadd+0x110>
    6440:	2b00      	cmp	r3, #0
    6442:	d061      	beq.n	6508 <__aeabi_fadd+0x2f0>
    6444:	24ff      	movs	r4, #255	; 0xff
    6446:	2f00      	cmp	r7, #0
    6448:	d100      	bne.n	644c <__aeabi_fadd+0x234>
    644a:	e720      	b.n	628e <__aeabi_fadd+0x76>
    644c:	2280      	movs	r2, #128	; 0x80
    644e:	4641      	mov	r1, r8
    6450:	03d2      	lsls	r2, r2, #15
    6452:	4211      	tst	r1, r2
    6454:	d002      	beq.n	645c <__aeabi_fadd+0x244>
    6456:	4216      	tst	r6, r2
    6458:	d100      	bne.n	645c <__aeabi_fadd+0x244>
    645a:	003b      	movs	r3, r7
    645c:	24ff      	movs	r4, #255	; 0xff
    645e:	e716      	b.n	628e <__aeabi_fadd+0x76>
    6460:	24ff      	movs	r4, #255	; 0xff
    6462:	2300      	movs	r3, #0
    6464:	e724      	b.n	62b0 <__aeabi_fadd+0x98>
    6466:	2c00      	cmp	r4, #0
    6468:	d1ea      	bne.n	6440 <__aeabi_fadd+0x228>
    646a:	2b00      	cmp	r3, #0
    646c:	d058      	beq.n	6520 <__aeabi_fadd+0x308>
    646e:	2f00      	cmp	r7, #0
    6470:	d100      	bne.n	6474 <__aeabi_fadd+0x25c>
    6472:	e70c      	b.n	628e <__aeabi_fadd+0x76>
    6474:	4463      	add	r3, ip
    6476:	015a      	lsls	r2, r3, #5
    6478:	d400      	bmi.n	647c <__aeabi_fadd+0x264>
    647a:	e739      	b.n	62f0 <__aeabi_fadd+0xd8>
    647c:	4a2e      	ldr	r2, [pc, #184]	; (6538 <__aeabi_fadd+0x320>)
    647e:	000c      	movs	r4, r1
    6480:	4013      	ands	r3, r2
    6482:	e704      	b.n	628e <__aeabi_fadd+0x76>
    6484:	2101      	movs	r1, #1
    6486:	e75c      	b.n	6342 <__aeabi_fadd+0x12a>
    6488:	2c00      	cmp	r4, #0
    648a:	d11e      	bne.n	64ca <__aeabi_fadd+0x2b2>
    648c:	2b00      	cmp	r3, #0
    648e:	d040      	beq.n	6512 <__aeabi_fadd+0x2fa>
    6490:	43c9      	mvns	r1, r1
    6492:	2900      	cmp	r1, #0
    6494:	d00b      	beq.n	64ae <__aeabi_fadd+0x296>
    6496:	28ff      	cmp	r0, #255	; 0xff
    6498:	d036      	beq.n	6508 <__aeabi_fadd+0x2f0>
    649a:	291b      	cmp	r1, #27
    649c:	dc47      	bgt.n	652e <__aeabi_fadd+0x316>
    649e:	001c      	movs	r4, r3
    64a0:	2620      	movs	r6, #32
    64a2:	40cc      	lsrs	r4, r1
    64a4:	1a71      	subs	r1, r6, r1
    64a6:	408b      	lsls	r3, r1
    64a8:	1e59      	subs	r1, r3, #1
    64aa:	418b      	sbcs	r3, r1
    64ac:	4323      	orrs	r3, r4
    64ae:	4463      	add	r3, ip
    64b0:	0004      	movs	r4, r0
    64b2:	e747      	b.n	6344 <__aeabi_fadd+0x12c>
    64b4:	2b00      	cmp	r3, #0
    64b6:	d118      	bne.n	64ea <__aeabi_fadd+0x2d2>
    64b8:	1e3b      	subs	r3, r7, #0
    64ba:	d02d      	beq.n	6518 <__aeabi_fadd+0x300>
    64bc:	000d      	movs	r5, r1
    64be:	24ff      	movs	r4, #255	; 0xff
    64c0:	e6e5      	b.n	628e <__aeabi_fadd+0x76>
    64c2:	003b      	movs	r3, r7
    64c4:	0004      	movs	r4, r0
    64c6:	000d      	movs	r5, r1
    64c8:	e6e1      	b.n	628e <__aeabi_fadd+0x76>
    64ca:	28ff      	cmp	r0, #255	; 0xff
    64cc:	d01c      	beq.n	6508 <__aeabi_fadd+0x2f0>
    64ce:	2480      	movs	r4, #128	; 0x80
    64d0:	04e4      	lsls	r4, r4, #19
    64d2:	4249      	negs	r1, r1
    64d4:	4323      	orrs	r3, r4
    64d6:	e7e0      	b.n	649a <__aeabi_fadd+0x282>
    64d8:	2f00      	cmp	r7, #0
    64da:	d100      	bne.n	64de <__aeabi_fadd+0x2c6>
    64dc:	e6d7      	b.n	628e <__aeabi_fadd+0x76>
    64de:	1bde      	subs	r6, r3, r7
    64e0:	0172      	lsls	r2, r6, #5
    64e2:	d51f      	bpl.n	6524 <__aeabi_fadd+0x30c>
    64e4:	1afb      	subs	r3, r7, r3
    64e6:	000d      	movs	r5, r1
    64e8:	e6d1      	b.n	628e <__aeabi_fadd+0x76>
    64ea:	24ff      	movs	r4, #255	; 0xff
    64ec:	2f00      	cmp	r7, #0
    64ee:	d100      	bne.n	64f2 <__aeabi_fadd+0x2da>
    64f0:	e6cd      	b.n	628e <__aeabi_fadd+0x76>
    64f2:	2280      	movs	r2, #128	; 0x80
    64f4:	4640      	mov	r0, r8
    64f6:	03d2      	lsls	r2, r2, #15
    64f8:	4210      	tst	r0, r2
    64fa:	d0af      	beq.n	645c <__aeabi_fadd+0x244>
    64fc:	4216      	tst	r6, r2
    64fe:	d1ad      	bne.n	645c <__aeabi_fadd+0x244>
    6500:	003b      	movs	r3, r7
    6502:	000d      	movs	r5, r1
    6504:	24ff      	movs	r4, #255	; 0xff
    6506:	e6c2      	b.n	628e <__aeabi_fadd+0x76>
    6508:	4663      	mov	r3, ip
    650a:	24ff      	movs	r4, #255	; 0xff
    650c:	e6bf      	b.n	628e <__aeabi_fadd+0x76>
    650e:	2301      	movs	r3, #1
    6510:	e77a      	b.n	6408 <__aeabi_fadd+0x1f0>
    6512:	003b      	movs	r3, r7
    6514:	0004      	movs	r4, r0
    6516:	e6ba      	b.n	628e <__aeabi_fadd+0x76>
    6518:	2680      	movs	r6, #128	; 0x80
    651a:	2200      	movs	r2, #0
    651c:	03f6      	lsls	r6, r6, #15
    651e:	e6f0      	b.n	6302 <__aeabi_fadd+0xea>
    6520:	003b      	movs	r3, r7
    6522:	e6b4      	b.n	628e <__aeabi_fadd+0x76>
    6524:	1e33      	subs	r3, r6, #0
    6526:	d000      	beq.n	652a <__aeabi_fadd+0x312>
    6528:	e6e2      	b.n	62f0 <__aeabi_fadd+0xd8>
    652a:	2200      	movs	r2, #0
    652c:	e721      	b.n	6372 <__aeabi_fadd+0x15a>
    652e:	2301      	movs	r3, #1
    6530:	e7bd      	b.n	64ae <__aeabi_fadd+0x296>
    6532:	46c0      	nop			; (mov r8, r8)
    6534:	7dffffff 	.word	0x7dffffff
    6538:	fbffffff 	.word	0xfbffffff

0000653c <__aeabi_fdiv>:
    653c:	b5f0      	push	{r4, r5, r6, r7, lr}
    653e:	4657      	mov	r7, sl
    6540:	464e      	mov	r6, r9
    6542:	46de      	mov	lr, fp
    6544:	4645      	mov	r5, r8
    6546:	b5e0      	push	{r5, r6, r7, lr}
    6548:	0244      	lsls	r4, r0, #9
    654a:	0043      	lsls	r3, r0, #1
    654c:	0fc6      	lsrs	r6, r0, #31
    654e:	b083      	sub	sp, #12
    6550:	1c0f      	adds	r7, r1, #0
    6552:	0a64      	lsrs	r4, r4, #9
    6554:	0e1b      	lsrs	r3, r3, #24
    6556:	46b2      	mov	sl, r6
    6558:	d053      	beq.n	6602 <__aeabi_fdiv+0xc6>
    655a:	2bff      	cmp	r3, #255	; 0xff
    655c:	d027      	beq.n	65ae <__aeabi_fdiv+0x72>
    655e:	2280      	movs	r2, #128	; 0x80
    6560:	00e4      	lsls	r4, r4, #3
    6562:	04d2      	lsls	r2, r2, #19
    6564:	4314      	orrs	r4, r2
    6566:	227f      	movs	r2, #127	; 0x7f
    6568:	4252      	negs	r2, r2
    656a:	4690      	mov	r8, r2
    656c:	4498      	add	r8, r3
    656e:	2300      	movs	r3, #0
    6570:	4699      	mov	r9, r3
    6572:	469b      	mov	fp, r3
    6574:	027d      	lsls	r5, r7, #9
    6576:	0078      	lsls	r0, r7, #1
    6578:	0ffb      	lsrs	r3, r7, #31
    657a:	0a6d      	lsrs	r5, r5, #9
    657c:	0e00      	lsrs	r0, r0, #24
    657e:	9300      	str	r3, [sp, #0]
    6580:	d024      	beq.n	65cc <__aeabi_fdiv+0x90>
    6582:	28ff      	cmp	r0, #255	; 0xff
    6584:	d046      	beq.n	6614 <__aeabi_fdiv+0xd8>
    6586:	2380      	movs	r3, #128	; 0x80
    6588:	2100      	movs	r1, #0
    658a:	00ed      	lsls	r5, r5, #3
    658c:	04db      	lsls	r3, r3, #19
    658e:	431d      	orrs	r5, r3
    6590:	387f      	subs	r0, #127	; 0x7f
    6592:	4647      	mov	r7, r8
    6594:	1a38      	subs	r0, r7, r0
    6596:	464f      	mov	r7, r9
    6598:	430f      	orrs	r7, r1
    659a:	00bf      	lsls	r7, r7, #2
    659c:	46b9      	mov	r9, r7
    659e:	0033      	movs	r3, r6
    65a0:	9a00      	ldr	r2, [sp, #0]
    65a2:	4f87      	ldr	r7, [pc, #540]	; (67c0 <__aeabi_fdiv+0x284>)
    65a4:	4053      	eors	r3, r2
    65a6:	464a      	mov	r2, r9
    65a8:	58ba      	ldr	r2, [r7, r2]
    65aa:	9301      	str	r3, [sp, #4]
    65ac:	4697      	mov	pc, r2
    65ae:	2c00      	cmp	r4, #0
    65b0:	d14e      	bne.n	6650 <__aeabi_fdiv+0x114>
    65b2:	2308      	movs	r3, #8
    65b4:	4699      	mov	r9, r3
    65b6:	33f7      	adds	r3, #247	; 0xf7
    65b8:	4698      	mov	r8, r3
    65ba:	3bfd      	subs	r3, #253	; 0xfd
    65bc:	469b      	mov	fp, r3
    65be:	027d      	lsls	r5, r7, #9
    65c0:	0078      	lsls	r0, r7, #1
    65c2:	0ffb      	lsrs	r3, r7, #31
    65c4:	0a6d      	lsrs	r5, r5, #9
    65c6:	0e00      	lsrs	r0, r0, #24
    65c8:	9300      	str	r3, [sp, #0]
    65ca:	d1da      	bne.n	6582 <__aeabi_fdiv+0x46>
    65cc:	2d00      	cmp	r5, #0
    65ce:	d126      	bne.n	661e <__aeabi_fdiv+0xe2>
    65d0:	2000      	movs	r0, #0
    65d2:	2101      	movs	r1, #1
    65d4:	0033      	movs	r3, r6
    65d6:	9a00      	ldr	r2, [sp, #0]
    65d8:	4f7a      	ldr	r7, [pc, #488]	; (67c4 <__aeabi_fdiv+0x288>)
    65da:	4053      	eors	r3, r2
    65dc:	4642      	mov	r2, r8
    65de:	1a10      	subs	r0, r2, r0
    65e0:	464a      	mov	r2, r9
    65e2:	430a      	orrs	r2, r1
    65e4:	0092      	lsls	r2, r2, #2
    65e6:	58ba      	ldr	r2, [r7, r2]
    65e8:	001d      	movs	r5, r3
    65ea:	4697      	mov	pc, r2
    65ec:	9b00      	ldr	r3, [sp, #0]
    65ee:	002c      	movs	r4, r5
    65f0:	469a      	mov	sl, r3
    65f2:	468b      	mov	fp, r1
    65f4:	465b      	mov	r3, fp
    65f6:	2b02      	cmp	r3, #2
    65f8:	d131      	bne.n	665e <__aeabi_fdiv+0x122>
    65fa:	4653      	mov	r3, sl
    65fc:	21ff      	movs	r1, #255	; 0xff
    65fe:	2400      	movs	r4, #0
    6600:	e038      	b.n	6674 <__aeabi_fdiv+0x138>
    6602:	2c00      	cmp	r4, #0
    6604:	d117      	bne.n	6636 <__aeabi_fdiv+0xfa>
    6606:	2304      	movs	r3, #4
    6608:	4699      	mov	r9, r3
    660a:	2300      	movs	r3, #0
    660c:	4698      	mov	r8, r3
    660e:	3301      	adds	r3, #1
    6610:	469b      	mov	fp, r3
    6612:	e7af      	b.n	6574 <__aeabi_fdiv+0x38>
    6614:	20ff      	movs	r0, #255	; 0xff
    6616:	2d00      	cmp	r5, #0
    6618:	d10b      	bne.n	6632 <__aeabi_fdiv+0xf6>
    661a:	2102      	movs	r1, #2
    661c:	e7da      	b.n	65d4 <__aeabi_fdiv+0x98>
    661e:	0028      	movs	r0, r5
    6620:	f002 f970 	bl	8904 <__clzsi2>
    6624:	1f43      	subs	r3, r0, #5
    6626:	409d      	lsls	r5, r3
    6628:	2376      	movs	r3, #118	; 0x76
    662a:	425b      	negs	r3, r3
    662c:	1a18      	subs	r0, r3, r0
    662e:	2100      	movs	r1, #0
    6630:	e7af      	b.n	6592 <__aeabi_fdiv+0x56>
    6632:	2103      	movs	r1, #3
    6634:	e7ad      	b.n	6592 <__aeabi_fdiv+0x56>
    6636:	0020      	movs	r0, r4
    6638:	f002 f964 	bl	8904 <__clzsi2>
    663c:	1f43      	subs	r3, r0, #5
    663e:	409c      	lsls	r4, r3
    6640:	2376      	movs	r3, #118	; 0x76
    6642:	425b      	negs	r3, r3
    6644:	1a1b      	subs	r3, r3, r0
    6646:	4698      	mov	r8, r3
    6648:	2300      	movs	r3, #0
    664a:	4699      	mov	r9, r3
    664c:	469b      	mov	fp, r3
    664e:	e791      	b.n	6574 <__aeabi_fdiv+0x38>
    6650:	230c      	movs	r3, #12
    6652:	4699      	mov	r9, r3
    6654:	33f3      	adds	r3, #243	; 0xf3
    6656:	4698      	mov	r8, r3
    6658:	3bfc      	subs	r3, #252	; 0xfc
    665a:	469b      	mov	fp, r3
    665c:	e78a      	b.n	6574 <__aeabi_fdiv+0x38>
    665e:	2b03      	cmp	r3, #3
    6660:	d100      	bne.n	6664 <__aeabi_fdiv+0x128>
    6662:	e0a5      	b.n	67b0 <__aeabi_fdiv+0x274>
    6664:	4655      	mov	r5, sl
    6666:	2b01      	cmp	r3, #1
    6668:	d000      	beq.n	666c <__aeabi_fdiv+0x130>
    666a:	e081      	b.n	6770 <__aeabi_fdiv+0x234>
    666c:	2301      	movs	r3, #1
    666e:	2100      	movs	r1, #0
    6670:	2400      	movs	r4, #0
    6672:	402b      	ands	r3, r5
    6674:	0264      	lsls	r4, r4, #9
    6676:	05c9      	lsls	r1, r1, #23
    6678:	0a60      	lsrs	r0, r4, #9
    667a:	07db      	lsls	r3, r3, #31
    667c:	4308      	orrs	r0, r1
    667e:	4318      	orrs	r0, r3
    6680:	b003      	add	sp, #12
    6682:	bc3c      	pop	{r2, r3, r4, r5}
    6684:	4690      	mov	r8, r2
    6686:	4699      	mov	r9, r3
    6688:	46a2      	mov	sl, r4
    668a:	46ab      	mov	fp, r5
    668c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    668e:	2480      	movs	r4, #128	; 0x80
    6690:	2300      	movs	r3, #0
    6692:	03e4      	lsls	r4, r4, #15
    6694:	21ff      	movs	r1, #255	; 0xff
    6696:	e7ed      	b.n	6674 <__aeabi_fdiv+0x138>
    6698:	21ff      	movs	r1, #255	; 0xff
    669a:	2400      	movs	r4, #0
    669c:	e7ea      	b.n	6674 <__aeabi_fdiv+0x138>
    669e:	2301      	movs	r3, #1
    66a0:	1a59      	subs	r1, r3, r1
    66a2:	291b      	cmp	r1, #27
    66a4:	dd66      	ble.n	6774 <__aeabi_fdiv+0x238>
    66a6:	9a01      	ldr	r2, [sp, #4]
    66a8:	4013      	ands	r3, r2
    66aa:	2100      	movs	r1, #0
    66ac:	2400      	movs	r4, #0
    66ae:	e7e1      	b.n	6674 <__aeabi_fdiv+0x138>
    66b0:	2380      	movs	r3, #128	; 0x80
    66b2:	03db      	lsls	r3, r3, #15
    66b4:	421c      	tst	r4, r3
    66b6:	d038      	beq.n	672a <__aeabi_fdiv+0x1ee>
    66b8:	421d      	tst	r5, r3
    66ba:	d051      	beq.n	6760 <__aeabi_fdiv+0x224>
    66bc:	431c      	orrs	r4, r3
    66be:	0264      	lsls	r4, r4, #9
    66c0:	0a64      	lsrs	r4, r4, #9
    66c2:	0033      	movs	r3, r6
    66c4:	21ff      	movs	r1, #255	; 0xff
    66c6:	e7d5      	b.n	6674 <__aeabi_fdiv+0x138>
    66c8:	0163      	lsls	r3, r4, #5
    66ca:	016c      	lsls	r4, r5, #5
    66cc:	42a3      	cmp	r3, r4
    66ce:	d23b      	bcs.n	6748 <__aeabi_fdiv+0x20c>
    66d0:	261b      	movs	r6, #27
    66d2:	2100      	movs	r1, #0
    66d4:	3801      	subs	r0, #1
    66d6:	2501      	movs	r5, #1
    66d8:	001f      	movs	r7, r3
    66da:	0049      	lsls	r1, r1, #1
    66dc:	005b      	lsls	r3, r3, #1
    66de:	2f00      	cmp	r7, #0
    66e0:	db01      	blt.n	66e6 <__aeabi_fdiv+0x1aa>
    66e2:	429c      	cmp	r4, r3
    66e4:	d801      	bhi.n	66ea <__aeabi_fdiv+0x1ae>
    66e6:	1b1b      	subs	r3, r3, r4
    66e8:	4329      	orrs	r1, r5
    66ea:	3e01      	subs	r6, #1
    66ec:	2e00      	cmp	r6, #0
    66ee:	d1f3      	bne.n	66d8 <__aeabi_fdiv+0x19c>
    66f0:	001c      	movs	r4, r3
    66f2:	1e63      	subs	r3, r4, #1
    66f4:	419c      	sbcs	r4, r3
    66f6:	430c      	orrs	r4, r1
    66f8:	0001      	movs	r1, r0
    66fa:	317f      	adds	r1, #127	; 0x7f
    66fc:	2900      	cmp	r1, #0
    66fe:	ddce      	ble.n	669e <__aeabi_fdiv+0x162>
    6700:	0763      	lsls	r3, r4, #29
    6702:	d004      	beq.n	670e <__aeabi_fdiv+0x1d2>
    6704:	230f      	movs	r3, #15
    6706:	4023      	ands	r3, r4
    6708:	2b04      	cmp	r3, #4
    670a:	d000      	beq.n	670e <__aeabi_fdiv+0x1d2>
    670c:	3404      	adds	r4, #4
    670e:	0123      	lsls	r3, r4, #4
    6710:	d503      	bpl.n	671a <__aeabi_fdiv+0x1de>
    6712:	0001      	movs	r1, r0
    6714:	4b2c      	ldr	r3, [pc, #176]	; (67c8 <__aeabi_fdiv+0x28c>)
    6716:	3180      	adds	r1, #128	; 0x80
    6718:	401c      	ands	r4, r3
    671a:	29fe      	cmp	r1, #254	; 0xfe
    671c:	dd0d      	ble.n	673a <__aeabi_fdiv+0x1fe>
    671e:	2301      	movs	r3, #1
    6720:	9a01      	ldr	r2, [sp, #4]
    6722:	21ff      	movs	r1, #255	; 0xff
    6724:	4013      	ands	r3, r2
    6726:	2400      	movs	r4, #0
    6728:	e7a4      	b.n	6674 <__aeabi_fdiv+0x138>
    672a:	2380      	movs	r3, #128	; 0x80
    672c:	03db      	lsls	r3, r3, #15
    672e:	431c      	orrs	r4, r3
    6730:	0264      	lsls	r4, r4, #9
    6732:	0a64      	lsrs	r4, r4, #9
    6734:	0033      	movs	r3, r6
    6736:	21ff      	movs	r1, #255	; 0xff
    6738:	e79c      	b.n	6674 <__aeabi_fdiv+0x138>
    673a:	2301      	movs	r3, #1
    673c:	9a01      	ldr	r2, [sp, #4]
    673e:	01a4      	lsls	r4, r4, #6
    6740:	0a64      	lsrs	r4, r4, #9
    6742:	b2c9      	uxtb	r1, r1
    6744:	4013      	ands	r3, r2
    6746:	e795      	b.n	6674 <__aeabi_fdiv+0x138>
    6748:	1b1b      	subs	r3, r3, r4
    674a:	261a      	movs	r6, #26
    674c:	2101      	movs	r1, #1
    674e:	e7c2      	b.n	66d6 <__aeabi_fdiv+0x19a>
    6750:	9b00      	ldr	r3, [sp, #0]
    6752:	468b      	mov	fp, r1
    6754:	469a      	mov	sl, r3
    6756:	2400      	movs	r4, #0
    6758:	e74c      	b.n	65f4 <__aeabi_fdiv+0xb8>
    675a:	0263      	lsls	r3, r4, #9
    675c:	d5e5      	bpl.n	672a <__aeabi_fdiv+0x1ee>
    675e:	2500      	movs	r5, #0
    6760:	2480      	movs	r4, #128	; 0x80
    6762:	03e4      	lsls	r4, r4, #15
    6764:	432c      	orrs	r4, r5
    6766:	0264      	lsls	r4, r4, #9
    6768:	0a64      	lsrs	r4, r4, #9
    676a:	9b00      	ldr	r3, [sp, #0]
    676c:	21ff      	movs	r1, #255	; 0xff
    676e:	e781      	b.n	6674 <__aeabi_fdiv+0x138>
    6770:	9501      	str	r5, [sp, #4]
    6772:	e7c1      	b.n	66f8 <__aeabi_fdiv+0x1bc>
    6774:	0023      	movs	r3, r4
    6776:	2020      	movs	r0, #32
    6778:	40cb      	lsrs	r3, r1
    677a:	1a41      	subs	r1, r0, r1
    677c:	408c      	lsls	r4, r1
    677e:	1e61      	subs	r1, r4, #1
    6780:	418c      	sbcs	r4, r1
    6782:	431c      	orrs	r4, r3
    6784:	0763      	lsls	r3, r4, #29
    6786:	d004      	beq.n	6792 <__aeabi_fdiv+0x256>
    6788:	230f      	movs	r3, #15
    678a:	4023      	ands	r3, r4
    678c:	2b04      	cmp	r3, #4
    678e:	d000      	beq.n	6792 <__aeabi_fdiv+0x256>
    6790:	3404      	adds	r4, #4
    6792:	0163      	lsls	r3, r4, #5
    6794:	d505      	bpl.n	67a2 <__aeabi_fdiv+0x266>
    6796:	2301      	movs	r3, #1
    6798:	9a01      	ldr	r2, [sp, #4]
    679a:	2101      	movs	r1, #1
    679c:	4013      	ands	r3, r2
    679e:	2400      	movs	r4, #0
    67a0:	e768      	b.n	6674 <__aeabi_fdiv+0x138>
    67a2:	2301      	movs	r3, #1
    67a4:	9a01      	ldr	r2, [sp, #4]
    67a6:	01a4      	lsls	r4, r4, #6
    67a8:	0a64      	lsrs	r4, r4, #9
    67aa:	4013      	ands	r3, r2
    67ac:	2100      	movs	r1, #0
    67ae:	e761      	b.n	6674 <__aeabi_fdiv+0x138>
    67b0:	2380      	movs	r3, #128	; 0x80
    67b2:	03db      	lsls	r3, r3, #15
    67b4:	431c      	orrs	r4, r3
    67b6:	0264      	lsls	r4, r4, #9
    67b8:	0a64      	lsrs	r4, r4, #9
    67ba:	4653      	mov	r3, sl
    67bc:	21ff      	movs	r1, #255	; 0xff
    67be:	e759      	b.n	6674 <__aeabi_fdiv+0x138>
    67c0:	00008cf8 	.word	0x00008cf8
    67c4:	00008d38 	.word	0x00008d38
    67c8:	f7ffffff 	.word	0xf7ffffff

000067cc <__eqsf2>:
    67cc:	b570      	push	{r4, r5, r6, lr}
    67ce:	0042      	lsls	r2, r0, #1
    67d0:	0245      	lsls	r5, r0, #9
    67d2:	024e      	lsls	r6, r1, #9
    67d4:	004c      	lsls	r4, r1, #1
    67d6:	0fc3      	lsrs	r3, r0, #31
    67d8:	0a6d      	lsrs	r5, r5, #9
    67da:	0e12      	lsrs	r2, r2, #24
    67dc:	0a76      	lsrs	r6, r6, #9
    67de:	0e24      	lsrs	r4, r4, #24
    67e0:	0fc9      	lsrs	r1, r1, #31
    67e2:	2001      	movs	r0, #1
    67e4:	2aff      	cmp	r2, #255	; 0xff
    67e6:	d006      	beq.n	67f6 <__eqsf2+0x2a>
    67e8:	2cff      	cmp	r4, #255	; 0xff
    67ea:	d003      	beq.n	67f4 <__eqsf2+0x28>
    67ec:	42a2      	cmp	r2, r4
    67ee:	d101      	bne.n	67f4 <__eqsf2+0x28>
    67f0:	42b5      	cmp	r5, r6
    67f2:	d006      	beq.n	6802 <__eqsf2+0x36>
    67f4:	bd70      	pop	{r4, r5, r6, pc}
    67f6:	2d00      	cmp	r5, #0
    67f8:	d1fc      	bne.n	67f4 <__eqsf2+0x28>
    67fa:	2cff      	cmp	r4, #255	; 0xff
    67fc:	d1fa      	bne.n	67f4 <__eqsf2+0x28>
    67fe:	2e00      	cmp	r6, #0
    6800:	d1f8      	bne.n	67f4 <__eqsf2+0x28>
    6802:	428b      	cmp	r3, r1
    6804:	d006      	beq.n	6814 <__eqsf2+0x48>
    6806:	2001      	movs	r0, #1
    6808:	2a00      	cmp	r2, #0
    680a:	d1f3      	bne.n	67f4 <__eqsf2+0x28>
    680c:	0028      	movs	r0, r5
    680e:	1e45      	subs	r5, r0, #1
    6810:	41a8      	sbcs	r0, r5
    6812:	e7ef      	b.n	67f4 <__eqsf2+0x28>
    6814:	2000      	movs	r0, #0
    6816:	e7ed      	b.n	67f4 <__eqsf2+0x28>

00006818 <__gesf2>:
    6818:	b5f0      	push	{r4, r5, r6, r7, lr}
    681a:	0042      	lsls	r2, r0, #1
    681c:	0245      	lsls	r5, r0, #9
    681e:	024c      	lsls	r4, r1, #9
    6820:	0fc3      	lsrs	r3, r0, #31
    6822:	0048      	lsls	r0, r1, #1
    6824:	0a6d      	lsrs	r5, r5, #9
    6826:	0e12      	lsrs	r2, r2, #24
    6828:	0a64      	lsrs	r4, r4, #9
    682a:	0e00      	lsrs	r0, r0, #24
    682c:	0fc9      	lsrs	r1, r1, #31
    682e:	2aff      	cmp	r2, #255	; 0xff
    6830:	d01e      	beq.n	6870 <__gesf2+0x58>
    6832:	28ff      	cmp	r0, #255	; 0xff
    6834:	d021      	beq.n	687a <__gesf2+0x62>
    6836:	2a00      	cmp	r2, #0
    6838:	d10a      	bne.n	6850 <__gesf2+0x38>
    683a:	426e      	negs	r6, r5
    683c:	416e      	adcs	r6, r5
    683e:	b2f6      	uxtb	r6, r6
    6840:	2800      	cmp	r0, #0
    6842:	d10f      	bne.n	6864 <__gesf2+0x4c>
    6844:	2c00      	cmp	r4, #0
    6846:	d10d      	bne.n	6864 <__gesf2+0x4c>
    6848:	2000      	movs	r0, #0
    684a:	2d00      	cmp	r5, #0
    684c:	d009      	beq.n	6862 <__gesf2+0x4a>
    684e:	e005      	b.n	685c <__gesf2+0x44>
    6850:	2800      	cmp	r0, #0
    6852:	d101      	bne.n	6858 <__gesf2+0x40>
    6854:	2c00      	cmp	r4, #0
    6856:	d001      	beq.n	685c <__gesf2+0x44>
    6858:	428b      	cmp	r3, r1
    685a:	d011      	beq.n	6880 <__gesf2+0x68>
    685c:	2101      	movs	r1, #1
    685e:	4258      	negs	r0, r3
    6860:	4308      	orrs	r0, r1
    6862:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6864:	2e00      	cmp	r6, #0
    6866:	d0f7      	beq.n	6858 <__gesf2+0x40>
    6868:	2001      	movs	r0, #1
    686a:	3901      	subs	r1, #1
    686c:	4308      	orrs	r0, r1
    686e:	e7f8      	b.n	6862 <__gesf2+0x4a>
    6870:	2d00      	cmp	r5, #0
    6872:	d0de      	beq.n	6832 <__gesf2+0x1a>
    6874:	2002      	movs	r0, #2
    6876:	4240      	negs	r0, r0
    6878:	e7f3      	b.n	6862 <__gesf2+0x4a>
    687a:	2c00      	cmp	r4, #0
    687c:	d0db      	beq.n	6836 <__gesf2+0x1e>
    687e:	e7f9      	b.n	6874 <__gesf2+0x5c>
    6880:	4282      	cmp	r2, r0
    6882:	dceb      	bgt.n	685c <__gesf2+0x44>
    6884:	db04      	blt.n	6890 <__gesf2+0x78>
    6886:	42a5      	cmp	r5, r4
    6888:	d8e8      	bhi.n	685c <__gesf2+0x44>
    688a:	2000      	movs	r0, #0
    688c:	42a5      	cmp	r5, r4
    688e:	d2e8      	bcs.n	6862 <__gesf2+0x4a>
    6890:	2101      	movs	r1, #1
    6892:	1e58      	subs	r0, r3, #1
    6894:	4308      	orrs	r0, r1
    6896:	e7e4      	b.n	6862 <__gesf2+0x4a>

00006898 <__lesf2>:
    6898:	b5f0      	push	{r4, r5, r6, r7, lr}
    689a:	0042      	lsls	r2, r0, #1
    689c:	024d      	lsls	r5, r1, #9
    689e:	004c      	lsls	r4, r1, #1
    68a0:	0246      	lsls	r6, r0, #9
    68a2:	0a76      	lsrs	r6, r6, #9
    68a4:	0e12      	lsrs	r2, r2, #24
    68a6:	0fc3      	lsrs	r3, r0, #31
    68a8:	0a6d      	lsrs	r5, r5, #9
    68aa:	0e24      	lsrs	r4, r4, #24
    68ac:	0fc9      	lsrs	r1, r1, #31
    68ae:	2aff      	cmp	r2, #255	; 0xff
    68b0:	d016      	beq.n	68e0 <__lesf2+0x48>
    68b2:	2cff      	cmp	r4, #255	; 0xff
    68b4:	d018      	beq.n	68e8 <__lesf2+0x50>
    68b6:	2a00      	cmp	r2, #0
    68b8:	d10a      	bne.n	68d0 <__lesf2+0x38>
    68ba:	4270      	negs	r0, r6
    68bc:	4170      	adcs	r0, r6
    68be:	b2c0      	uxtb	r0, r0
    68c0:	2c00      	cmp	r4, #0
    68c2:	d015      	beq.n	68f0 <__lesf2+0x58>
    68c4:	2800      	cmp	r0, #0
    68c6:	d005      	beq.n	68d4 <__lesf2+0x3c>
    68c8:	2001      	movs	r0, #1
    68ca:	3901      	subs	r1, #1
    68cc:	4308      	orrs	r0, r1
    68ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68d0:	2c00      	cmp	r4, #0
    68d2:	d013      	beq.n	68fc <__lesf2+0x64>
    68d4:	4299      	cmp	r1, r3
    68d6:	d014      	beq.n	6902 <__lesf2+0x6a>
    68d8:	2001      	movs	r0, #1
    68da:	425b      	negs	r3, r3
    68dc:	4318      	orrs	r0, r3
    68de:	e7f6      	b.n	68ce <__lesf2+0x36>
    68e0:	2002      	movs	r0, #2
    68e2:	2e00      	cmp	r6, #0
    68e4:	d1f3      	bne.n	68ce <__lesf2+0x36>
    68e6:	e7e4      	b.n	68b2 <__lesf2+0x1a>
    68e8:	2002      	movs	r0, #2
    68ea:	2d00      	cmp	r5, #0
    68ec:	d1ef      	bne.n	68ce <__lesf2+0x36>
    68ee:	e7e2      	b.n	68b6 <__lesf2+0x1e>
    68f0:	2d00      	cmp	r5, #0
    68f2:	d1e7      	bne.n	68c4 <__lesf2+0x2c>
    68f4:	2000      	movs	r0, #0
    68f6:	2e00      	cmp	r6, #0
    68f8:	d0e9      	beq.n	68ce <__lesf2+0x36>
    68fa:	e7ed      	b.n	68d8 <__lesf2+0x40>
    68fc:	2d00      	cmp	r5, #0
    68fe:	d1e9      	bne.n	68d4 <__lesf2+0x3c>
    6900:	e7ea      	b.n	68d8 <__lesf2+0x40>
    6902:	42a2      	cmp	r2, r4
    6904:	dc06      	bgt.n	6914 <__lesf2+0x7c>
    6906:	dbdf      	blt.n	68c8 <__lesf2+0x30>
    6908:	42ae      	cmp	r6, r5
    690a:	d803      	bhi.n	6914 <__lesf2+0x7c>
    690c:	2000      	movs	r0, #0
    690e:	42ae      	cmp	r6, r5
    6910:	d3da      	bcc.n	68c8 <__lesf2+0x30>
    6912:	e7dc      	b.n	68ce <__lesf2+0x36>
    6914:	2001      	movs	r0, #1
    6916:	4249      	negs	r1, r1
    6918:	4308      	orrs	r0, r1
    691a:	e7d8      	b.n	68ce <__lesf2+0x36>

0000691c <__aeabi_fmul>:
    691c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    691e:	4657      	mov	r7, sl
    6920:	464e      	mov	r6, r9
    6922:	4645      	mov	r5, r8
    6924:	46de      	mov	lr, fp
    6926:	b5e0      	push	{r5, r6, r7, lr}
    6928:	0247      	lsls	r7, r0, #9
    692a:	0046      	lsls	r6, r0, #1
    692c:	4688      	mov	r8, r1
    692e:	0a7f      	lsrs	r7, r7, #9
    6930:	0e36      	lsrs	r6, r6, #24
    6932:	0fc4      	lsrs	r4, r0, #31
    6934:	2e00      	cmp	r6, #0
    6936:	d047      	beq.n	69c8 <__aeabi_fmul+0xac>
    6938:	2eff      	cmp	r6, #255	; 0xff
    693a:	d024      	beq.n	6986 <__aeabi_fmul+0x6a>
    693c:	00fb      	lsls	r3, r7, #3
    693e:	2780      	movs	r7, #128	; 0x80
    6940:	04ff      	lsls	r7, r7, #19
    6942:	431f      	orrs	r7, r3
    6944:	2300      	movs	r3, #0
    6946:	4699      	mov	r9, r3
    6948:	469a      	mov	sl, r3
    694a:	3e7f      	subs	r6, #127	; 0x7f
    694c:	4643      	mov	r3, r8
    694e:	025d      	lsls	r5, r3, #9
    6950:	0058      	lsls	r0, r3, #1
    6952:	0fdb      	lsrs	r3, r3, #31
    6954:	0a6d      	lsrs	r5, r5, #9
    6956:	0e00      	lsrs	r0, r0, #24
    6958:	4698      	mov	r8, r3
    695a:	d043      	beq.n	69e4 <__aeabi_fmul+0xc8>
    695c:	28ff      	cmp	r0, #255	; 0xff
    695e:	d03b      	beq.n	69d8 <__aeabi_fmul+0xbc>
    6960:	00eb      	lsls	r3, r5, #3
    6962:	2580      	movs	r5, #128	; 0x80
    6964:	2200      	movs	r2, #0
    6966:	04ed      	lsls	r5, r5, #19
    6968:	431d      	orrs	r5, r3
    696a:	387f      	subs	r0, #127	; 0x7f
    696c:	1836      	adds	r6, r6, r0
    696e:	1c73      	adds	r3, r6, #1
    6970:	4641      	mov	r1, r8
    6972:	469b      	mov	fp, r3
    6974:	464b      	mov	r3, r9
    6976:	4061      	eors	r1, r4
    6978:	4313      	orrs	r3, r2
    697a:	2b0f      	cmp	r3, #15
    697c:	d864      	bhi.n	6a48 <__aeabi_fmul+0x12c>
    697e:	4875      	ldr	r0, [pc, #468]	; (6b54 <__aeabi_fmul+0x238>)
    6980:	009b      	lsls	r3, r3, #2
    6982:	58c3      	ldr	r3, [r0, r3]
    6984:	469f      	mov	pc, r3
    6986:	2f00      	cmp	r7, #0
    6988:	d142      	bne.n	6a10 <__aeabi_fmul+0xf4>
    698a:	2308      	movs	r3, #8
    698c:	4699      	mov	r9, r3
    698e:	3b06      	subs	r3, #6
    6990:	26ff      	movs	r6, #255	; 0xff
    6992:	469a      	mov	sl, r3
    6994:	e7da      	b.n	694c <__aeabi_fmul+0x30>
    6996:	4641      	mov	r1, r8
    6998:	2a02      	cmp	r2, #2
    699a:	d028      	beq.n	69ee <__aeabi_fmul+0xd2>
    699c:	2a03      	cmp	r2, #3
    699e:	d100      	bne.n	69a2 <__aeabi_fmul+0x86>
    69a0:	e0ce      	b.n	6b40 <__aeabi_fmul+0x224>
    69a2:	2a01      	cmp	r2, #1
    69a4:	d000      	beq.n	69a8 <__aeabi_fmul+0x8c>
    69a6:	e0ac      	b.n	6b02 <__aeabi_fmul+0x1e6>
    69a8:	4011      	ands	r1, r2
    69aa:	2000      	movs	r0, #0
    69ac:	2200      	movs	r2, #0
    69ae:	b2cc      	uxtb	r4, r1
    69b0:	0240      	lsls	r0, r0, #9
    69b2:	05d2      	lsls	r2, r2, #23
    69b4:	0a40      	lsrs	r0, r0, #9
    69b6:	07e4      	lsls	r4, r4, #31
    69b8:	4310      	orrs	r0, r2
    69ba:	4320      	orrs	r0, r4
    69bc:	bc3c      	pop	{r2, r3, r4, r5}
    69be:	4690      	mov	r8, r2
    69c0:	4699      	mov	r9, r3
    69c2:	46a2      	mov	sl, r4
    69c4:	46ab      	mov	fp, r5
    69c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69c8:	2f00      	cmp	r7, #0
    69ca:	d115      	bne.n	69f8 <__aeabi_fmul+0xdc>
    69cc:	2304      	movs	r3, #4
    69ce:	4699      	mov	r9, r3
    69d0:	3b03      	subs	r3, #3
    69d2:	2600      	movs	r6, #0
    69d4:	469a      	mov	sl, r3
    69d6:	e7b9      	b.n	694c <__aeabi_fmul+0x30>
    69d8:	20ff      	movs	r0, #255	; 0xff
    69da:	2202      	movs	r2, #2
    69dc:	2d00      	cmp	r5, #0
    69de:	d0c5      	beq.n	696c <__aeabi_fmul+0x50>
    69e0:	2203      	movs	r2, #3
    69e2:	e7c3      	b.n	696c <__aeabi_fmul+0x50>
    69e4:	2d00      	cmp	r5, #0
    69e6:	d119      	bne.n	6a1c <__aeabi_fmul+0x100>
    69e8:	2000      	movs	r0, #0
    69ea:	2201      	movs	r2, #1
    69ec:	e7be      	b.n	696c <__aeabi_fmul+0x50>
    69ee:	2401      	movs	r4, #1
    69f0:	22ff      	movs	r2, #255	; 0xff
    69f2:	400c      	ands	r4, r1
    69f4:	2000      	movs	r0, #0
    69f6:	e7db      	b.n	69b0 <__aeabi_fmul+0x94>
    69f8:	0038      	movs	r0, r7
    69fa:	f001 ff83 	bl	8904 <__clzsi2>
    69fe:	2676      	movs	r6, #118	; 0x76
    6a00:	1f43      	subs	r3, r0, #5
    6a02:	409f      	lsls	r7, r3
    6a04:	2300      	movs	r3, #0
    6a06:	4276      	negs	r6, r6
    6a08:	1a36      	subs	r6, r6, r0
    6a0a:	4699      	mov	r9, r3
    6a0c:	469a      	mov	sl, r3
    6a0e:	e79d      	b.n	694c <__aeabi_fmul+0x30>
    6a10:	230c      	movs	r3, #12
    6a12:	4699      	mov	r9, r3
    6a14:	3b09      	subs	r3, #9
    6a16:	26ff      	movs	r6, #255	; 0xff
    6a18:	469a      	mov	sl, r3
    6a1a:	e797      	b.n	694c <__aeabi_fmul+0x30>
    6a1c:	0028      	movs	r0, r5
    6a1e:	f001 ff71 	bl	8904 <__clzsi2>
    6a22:	1f43      	subs	r3, r0, #5
    6a24:	409d      	lsls	r5, r3
    6a26:	2376      	movs	r3, #118	; 0x76
    6a28:	425b      	negs	r3, r3
    6a2a:	1a18      	subs	r0, r3, r0
    6a2c:	2200      	movs	r2, #0
    6a2e:	e79d      	b.n	696c <__aeabi_fmul+0x50>
    6a30:	2080      	movs	r0, #128	; 0x80
    6a32:	2400      	movs	r4, #0
    6a34:	03c0      	lsls	r0, r0, #15
    6a36:	22ff      	movs	r2, #255	; 0xff
    6a38:	e7ba      	b.n	69b0 <__aeabi_fmul+0x94>
    6a3a:	003d      	movs	r5, r7
    6a3c:	4652      	mov	r2, sl
    6a3e:	e7ab      	b.n	6998 <__aeabi_fmul+0x7c>
    6a40:	003d      	movs	r5, r7
    6a42:	0021      	movs	r1, r4
    6a44:	4652      	mov	r2, sl
    6a46:	e7a7      	b.n	6998 <__aeabi_fmul+0x7c>
    6a48:	0c3b      	lsrs	r3, r7, #16
    6a4a:	469c      	mov	ip, r3
    6a4c:	042a      	lsls	r2, r5, #16
    6a4e:	0c12      	lsrs	r2, r2, #16
    6a50:	0c2b      	lsrs	r3, r5, #16
    6a52:	0014      	movs	r4, r2
    6a54:	4660      	mov	r0, ip
    6a56:	4665      	mov	r5, ip
    6a58:	043f      	lsls	r7, r7, #16
    6a5a:	0c3f      	lsrs	r7, r7, #16
    6a5c:	437c      	muls	r4, r7
    6a5e:	4342      	muls	r2, r0
    6a60:	435d      	muls	r5, r3
    6a62:	437b      	muls	r3, r7
    6a64:	0c27      	lsrs	r7, r4, #16
    6a66:	189b      	adds	r3, r3, r2
    6a68:	18ff      	adds	r7, r7, r3
    6a6a:	42ba      	cmp	r2, r7
    6a6c:	d903      	bls.n	6a76 <__aeabi_fmul+0x15a>
    6a6e:	2380      	movs	r3, #128	; 0x80
    6a70:	025b      	lsls	r3, r3, #9
    6a72:	469c      	mov	ip, r3
    6a74:	4465      	add	r5, ip
    6a76:	0424      	lsls	r4, r4, #16
    6a78:	043a      	lsls	r2, r7, #16
    6a7a:	0c24      	lsrs	r4, r4, #16
    6a7c:	1912      	adds	r2, r2, r4
    6a7e:	0193      	lsls	r3, r2, #6
    6a80:	1e5c      	subs	r4, r3, #1
    6a82:	41a3      	sbcs	r3, r4
    6a84:	0c3f      	lsrs	r7, r7, #16
    6a86:	0e92      	lsrs	r2, r2, #26
    6a88:	197d      	adds	r5, r7, r5
    6a8a:	431a      	orrs	r2, r3
    6a8c:	01ad      	lsls	r5, r5, #6
    6a8e:	4315      	orrs	r5, r2
    6a90:	012b      	lsls	r3, r5, #4
    6a92:	d504      	bpl.n	6a9e <__aeabi_fmul+0x182>
    6a94:	2301      	movs	r3, #1
    6a96:	465e      	mov	r6, fp
    6a98:	086a      	lsrs	r2, r5, #1
    6a9a:	401d      	ands	r5, r3
    6a9c:	4315      	orrs	r5, r2
    6a9e:	0032      	movs	r2, r6
    6aa0:	327f      	adds	r2, #127	; 0x7f
    6aa2:	2a00      	cmp	r2, #0
    6aa4:	dd25      	ble.n	6af2 <__aeabi_fmul+0x1d6>
    6aa6:	076b      	lsls	r3, r5, #29
    6aa8:	d004      	beq.n	6ab4 <__aeabi_fmul+0x198>
    6aaa:	230f      	movs	r3, #15
    6aac:	402b      	ands	r3, r5
    6aae:	2b04      	cmp	r3, #4
    6ab0:	d000      	beq.n	6ab4 <__aeabi_fmul+0x198>
    6ab2:	3504      	adds	r5, #4
    6ab4:	012b      	lsls	r3, r5, #4
    6ab6:	d503      	bpl.n	6ac0 <__aeabi_fmul+0x1a4>
    6ab8:	0032      	movs	r2, r6
    6aba:	4b27      	ldr	r3, [pc, #156]	; (6b58 <__aeabi_fmul+0x23c>)
    6abc:	3280      	adds	r2, #128	; 0x80
    6abe:	401d      	ands	r5, r3
    6ac0:	2afe      	cmp	r2, #254	; 0xfe
    6ac2:	dc94      	bgt.n	69ee <__aeabi_fmul+0xd2>
    6ac4:	2401      	movs	r4, #1
    6ac6:	01a8      	lsls	r0, r5, #6
    6ac8:	0a40      	lsrs	r0, r0, #9
    6aca:	b2d2      	uxtb	r2, r2
    6acc:	400c      	ands	r4, r1
    6ace:	e76f      	b.n	69b0 <__aeabi_fmul+0x94>
    6ad0:	2080      	movs	r0, #128	; 0x80
    6ad2:	03c0      	lsls	r0, r0, #15
    6ad4:	4207      	tst	r7, r0
    6ad6:	d007      	beq.n	6ae8 <__aeabi_fmul+0x1cc>
    6ad8:	4205      	tst	r5, r0
    6ada:	d105      	bne.n	6ae8 <__aeabi_fmul+0x1cc>
    6adc:	4328      	orrs	r0, r5
    6ade:	0240      	lsls	r0, r0, #9
    6ae0:	0a40      	lsrs	r0, r0, #9
    6ae2:	4644      	mov	r4, r8
    6ae4:	22ff      	movs	r2, #255	; 0xff
    6ae6:	e763      	b.n	69b0 <__aeabi_fmul+0x94>
    6ae8:	4338      	orrs	r0, r7
    6aea:	0240      	lsls	r0, r0, #9
    6aec:	0a40      	lsrs	r0, r0, #9
    6aee:	22ff      	movs	r2, #255	; 0xff
    6af0:	e75e      	b.n	69b0 <__aeabi_fmul+0x94>
    6af2:	2401      	movs	r4, #1
    6af4:	1aa3      	subs	r3, r4, r2
    6af6:	2b1b      	cmp	r3, #27
    6af8:	dd05      	ble.n	6b06 <__aeabi_fmul+0x1ea>
    6afa:	400c      	ands	r4, r1
    6afc:	2200      	movs	r2, #0
    6afe:	2000      	movs	r0, #0
    6b00:	e756      	b.n	69b0 <__aeabi_fmul+0x94>
    6b02:	465e      	mov	r6, fp
    6b04:	e7cb      	b.n	6a9e <__aeabi_fmul+0x182>
    6b06:	002a      	movs	r2, r5
    6b08:	2020      	movs	r0, #32
    6b0a:	40da      	lsrs	r2, r3
    6b0c:	1ac3      	subs	r3, r0, r3
    6b0e:	409d      	lsls	r5, r3
    6b10:	002b      	movs	r3, r5
    6b12:	1e5d      	subs	r5, r3, #1
    6b14:	41ab      	sbcs	r3, r5
    6b16:	4313      	orrs	r3, r2
    6b18:	075a      	lsls	r2, r3, #29
    6b1a:	d004      	beq.n	6b26 <__aeabi_fmul+0x20a>
    6b1c:	220f      	movs	r2, #15
    6b1e:	401a      	ands	r2, r3
    6b20:	2a04      	cmp	r2, #4
    6b22:	d000      	beq.n	6b26 <__aeabi_fmul+0x20a>
    6b24:	3304      	adds	r3, #4
    6b26:	015a      	lsls	r2, r3, #5
    6b28:	d504      	bpl.n	6b34 <__aeabi_fmul+0x218>
    6b2a:	2401      	movs	r4, #1
    6b2c:	2201      	movs	r2, #1
    6b2e:	400c      	ands	r4, r1
    6b30:	2000      	movs	r0, #0
    6b32:	e73d      	b.n	69b0 <__aeabi_fmul+0x94>
    6b34:	2401      	movs	r4, #1
    6b36:	019b      	lsls	r3, r3, #6
    6b38:	0a58      	lsrs	r0, r3, #9
    6b3a:	400c      	ands	r4, r1
    6b3c:	2200      	movs	r2, #0
    6b3e:	e737      	b.n	69b0 <__aeabi_fmul+0x94>
    6b40:	2080      	movs	r0, #128	; 0x80
    6b42:	2401      	movs	r4, #1
    6b44:	03c0      	lsls	r0, r0, #15
    6b46:	4328      	orrs	r0, r5
    6b48:	0240      	lsls	r0, r0, #9
    6b4a:	0a40      	lsrs	r0, r0, #9
    6b4c:	400c      	ands	r4, r1
    6b4e:	22ff      	movs	r2, #255	; 0xff
    6b50:	e72e      	b.n	69b0 <__aeabi_fmul+0x94>
    6b52:	46c0      	nop			; (mov r8, r8)
    6b54:	00008d78 	.word	0x00008d78
    6b58:	f7ffffff 	.word	0xf7ffffff

00006b5c <__aeabi_i2f>:
    6b5c:	b570      	push	{r4, r5, r6, lr}
    6b5e:	2800      	cmp	r0, #0
    6b60:	d030      	beq.n	6bc4 <__aeabi_i2f+0x68>
    6b62:	17c3      	asrs	r3, r0, #31
    6b64:	18c4      	adds	r4, r0, r3
    6b66:	405c      	eors	r4, r3
    6b68:	0fc5      	lsrs	r5, r0, #31
    6b6a:	0020      	movs	r0, r4
    6b6c:	f001 feca 	bl	8904 <__clzsi2>
    6b70:	239e      	movs	r3, #158	; 0x9e
    6b72:	1a1b      	subs	r3, r3, r0
    6b74:	2b96      	cmp	r3, #150	; 0x96
    6b76:	dc0d      	bgt.n	6b94 <__aeabi_i2f+0x38>
    6b78:	2296      	movs	r2, #150	; 0x96
    6b7a:	1ad2      	subs	r2, r2, r3
    6b7c:	4094      	lsls	r4, r2
    6b7e:	002a      	movs	r2, r5
    6b80:	0264      	lsls	r4, r4, #9
    6b82:	0a64      	lsrs	r4, r4, #9
    6b84:	b2db      	uxtb	r3, r3
    6b86:	0264      	lsls	r4, r4, #9
    6b88:	05db      	lsls	r3, r3, #23
    6b8a:	0a60      	lsrs	r0, r4, #9
    6b8c:	07d2      	lsls	r2, r2, #31
    6b8e:	4318      	orrs	r0, r3
    6b90:	4310      	orrs	r0, r2
    6b92:	bd70      	pop	{r4, r5, r6, pc}
    6b94:	2b99      	cmp	r3, #153	; 0x99
    6b96:	dc19      	bgt.n	6bcc <__aeabi_i2f+0x70>
    6b98:	2299      	movs	r2, #153	; 0x99
    6b9a:	1ad2      	subs	r2, r2, r3
    6b9c:	2a00      	cmp	r2, #0
    6b9e:	dd29      	ble.n	6bf4 <__aeabi_i2f+0x98>
    6ba0:	4094      	lsls	r4, r2
    6ba2:	0022      	movs	r2, r4
    6ba4:	4c14      	ldr	r4, [pc, #80]	; (6bf8 <__aeabi_i2f+0x9c>)
    6ba6:	4014      	ands	r4, r2
    6ba8:	0751      	lsls	r1, r2, #29
    6baa:	d004      	beq.n	6bb6 <__aeabi_i2f+0x5a>
    6bac:	210f      	movs	r1, #15
    6bae:	400a      	ands	r2, r1
    6bb0:	2a04      	cmp	r2, #4
    6bb2:	d000      	beq.n	6bb6 <__aeabi_i2f+0x5a>
    6bb4:	3404      	adds	r4, #4
    6bb6:	0162      	lsls	r2, r4, #5
    6bb8:	d413      	bmi.n	6be2 <__aeabi_i2f+0x86>
    6bba:	01a4      	lsls	r4, r4, #6
    6bbc:	0a64      	lsrs	r4, r4, #9
    6bbe:	b2db      	uxtb	r3, r3
    6bc0:	002a      	movs	r2, r5
    6bc2:	e7e0      	b.n	6b86 <__aeabi_i2f+0x2a>
    6bc4:	2200      	movs	r2, #0
    6bc6:	2300      	movs	r3, #0
    6bc8:	2400      	movs	r4, #0
    6bca:	e7dc      	b.n	6b86 <__aeabi_i2f+0x2a>
    6bcc:	2205      	movs	r2, #5
    6bce:	0021      	movs	r1, r4
    6bd0:	1a12      	subs	r2, r2, r0
    6bd2:	40d1      	lsrs	r1, r2
    6bd4:	22b9      	movs	r2, #185	; 0xb9
    6bd6:	1ad2      	subs	r2, r2, r3
    6bd8:	4094      	lsls	r4, r2
    6bda:	1e62      	subs	r2, r4, #1
    6bdc:	4194      	sbcs	r4, r2
    6bde:	430c      	orrs	r4, r1
    6be0:	e7da      	b.n	6b98 <__aeabi_i2f+0x3c>
    6be2:	4b05      	ldr	r3, [pc, #20]	; (6bf8 <__aeabi_i2f+0x9c>)
    6be4:	002a      	movs	r2, r5
    6be6:	401c      	ands	r4, r3
    6be8:	239f      	movs	r3, #159	; 0x9f
    6bea:	01a4      	lsls	r4, r4, #6
    6bec:	1a1b      	subs	r3, r3, r0
    6bee:	0a64      	lsrs	r4, r4, #9
    6bf0:	b2db      	uxtb	r3, r3
    6bf2:	e7c8      	b.n	6b86 <__aeabi_i2f+0x2a>
    6bf4:	0022      	movs	r2, r4
    6bf6:	e7d5      	b.n	6ba4 <__aeabi_i2f+0x48>
    6bf8:	fbffffff 	.word	0xfbffffff

00006bfc <__aeabi_dadd>:
    6bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6bfe:	4645      	mov	r5, r8
    6c00:	46de      	mov	lr, fp
    6c02:	4657      	mov	r7, sl
    6c04:	464e      	mov	r6, r9
    6c06:	030c      	lsls	r4, r1, #12
    6c08:	b5e0      	push	{r5, r6, r7, lr}
    6c0a:	004e      	lsls	r6, r1, #1
    6c0c:	0fc9      	lsrs	r1, r1, #31
    6c0e:	4688      	mov	r8, r1
    6c10:	000d      	movs	r5, r1
    6c12:	0a61      	lsrs	r1, r4, #9
    6c14:	0f44      	lsrs	r4, r0, #29
    6c16:	430c      	orrs	r4, r1
    6c18:	00c7      	lsls	r7, r0, #3
    6c1a:	0319      	lsls	r1, r3, #12
    6c1c:	0058      	lsls	r0, r3, #1
    6c1e:	0fdb      	lsrs	r3, r3, #31
    6c20:	469b      	mov	fp, r3
    6c22:	0a4b      	lsrs	r3, r1, #9
    6c24:	0f51      	lsrs	r1, r2, #29
    6c26:	430b      	orrs	r3, r1
    6c28:	0d76      	lsrs	r6, r6, #21
    6c2a:	0d40      	lsrs	r0, r0, #21
    6c2c:	0019      	movs	r1, r3
    6c2e:	00d2      	lsls	r2, r2, #3
    6c30:	45d8      	cmp	r8, fp
    6c32:	d100      	bne.n	6c36 <__aeabi_dadd+0x3a>
    6c34:	e0ae      	b.n	6d94 <__aeabi_dadd+0x198>
    6c36:	1a35      	subs	r5, r6, r0
    6c38:	2d00      	cmp	r5, #0
    6c3a:	dc00      	bgt.n	6c3e <__aeabi_dadd+0x42>
    6c3c:	e0f6      	b.n	6e2c <__aeabi_dadd+0x230>
    6c3e:	2800      	cmp	r0, #0
    6c40:	d10f      	bne.n	6c62 <__aeabi_dadd+0x66>
    6c42:	4313      	orrs	r3, r2
    6c44:	d100      	bne.n	6c48 <__aeabi_dadd+0x4c>
    6c46:	e0db      	b.n	6e00 <__aeabi_dadd+0x204>
    6c48:	1e6b      	subs	r3, r5, #1
    6c4a:	2b00      	cmp	r3, #0
    6c4c:	d000      	beq.n	6c50 <__aeabi_dadd+0x54>
    6c4e:	e137      	b.n	6ec0 <__aeabi_dadd+0x2c4>
    6c50:	1aba      	subs	r2, r7, r2
    6c52:	4297      	cmp	r7, r2
    6c54:	41bf      	sbcs	r7, r7
    6c56:	1a64      	subs	r4, r4, r1
    6c58:	427f      	negs	r7, r7
    6c5a:	1be4      	subs	r4, r4, r7
    6c5c:	2601      	movs	r6, #1
    6c5e:	0017      	movs	r7, r2
    6c60:	e024      	b.n	6cac <__aeabi_dadd+0xb0>
    6c62:	4bc6      	ldr	r3, [pc, #792]	; (6f7c <__aeabi_dadd+0x380>)
    6c64:	429e      	cmp	r6, r3
    6c66:	d04d      	beq.n	6d04 <__aeabi_dadd+0x108>
    6c68:	2380      	movs	r3, #128	; 0x80
    6c6a:	041b      	lsls	r3, r3, #16
    6c6c:	4319      	orrs	r1, r3
    6c6e:	2d38      	cmp	r5, #56	; 0x38
    6c70:	dd00      	ble.n	6c74 <__aeabi_dadd+0x78>
    6c72:	e107      	b.n	6e84 <__aeabi_dadd+0x288>
    6c74:	2d1f      	cmp	r5, #31
    6c76:	dd00      	ble.n	6c7a <__aeabi_dadd+0x7e>
    6c78:	e138      	b.n	6eec <__aeabi_dadd+0x2f0>
    6c7a:	2020      	movs	r0, #32
    6c7c:	1b43      	subs	r3, r0, r5
    6c7e:	469a      	mov	sl, r3
    6c80:	000b      	movs	r3, r1
    6c82:	4650      	mov	r0, sl
    6c84:	4083      	lsls	r3, r0
    6c86:	4699      	mov	r9, r3
    6c88:	0013      	movs	r3, r2
    6c8a:	4648      	mov	r0, r9
    6c8c:	40eb      	lsrs	r3, r5
    6c8e:	4318      	orrs	r0, r3
    6c90:	0003      	movs	r3, r0
    6c92:	4650      	mov	r0, sl
    6c94:	4082      	lsls	r2, r0
    6c96:	1e50      	subs	r0, r2, #1
    6c98:	4182      	sbcs	r2, r0
    6c9a:	40e9      	lsrs	r1, r5
    6c9c:	431a      	orrs	r2, r3
    6c9e:	1aba      	subs	r2, r7, r2
    6ca0:	1a61      	subs	r1, r4, r1
    6ca2:	4297      	cmp	r7, r2
    6ca4:	41a4      	sbcs	r4, r4
    6ca6:	0017      	movs	r7, r2
    6ca8:	4264      	negs	r4, r4
    6caa:	1b0c      	subs	r4, r1, r4
    6cac:	0223      	lsls	r3, r4, #8
    6cae:	d562      	bpl.n	6d76 <__aeabi_dadd+0x17a>
    6cb0:	0264      	lsls	r4, r4, #9
    6cb2:	0a65      	lsrs	r5, r4, #9
    6cb4:	2d00      	cmp	r5, #0
    6cb6:	d100      	bne.n	6cba <__aeabi_dadd+0xbe>
    6cb8:	e0df      	b.n	6e7a <__aeabi_dadd+0x27e>
    6cba:	0028      	movs	r0, r5
    6cbc:	f001 fe22 	bl	8904 <__clzsi2>
    6cc0:	0003      	movs	r3, r0
    6cc2:	3b08      	subs	r3, #8
    6cc4:	2b1f      	cmp	r3, #31
    6cc6:	dd00      	ble.n	6cca <__aeabi_dadd+0xce>
    6cc8:	e0d2      	b.n	6e70 <__aeabi_dadd+0x274>
    6cca:	2220      	movs	r2, #32
    6ccc:	003c      	movs	r4, r7
    6cce:	1ad2      	subs	r2, r2, r3
    6cd0:	409d      	lsls	r5, r3
    6cd2:	40d4      	lsrs	r4, r2
    6cd4:	409f      	lsls	r7, r3
    6cd6:	4325      	orrs	r5, r4
    6cd8:	429e      	cmp	r6, r3
    6cda:	dd00      	ble.n	6cde <__aeabi_dadd+0xe2>
    6cdc:	e0c4      	b.n	6e68 <__aeabi_dadd+0x26c>
    6cde:	1b9e      	subs	r6, r3, r6
    6ce0:	1c73      	adds	r3, r6, #1
    6ce2:	2b1f      	cmp	r3, #31
    6ce4:	dd00      	ble.n	6ce8 <__aeabi_dadd+0xec>
    6ce6:	e0f1      	b.n	6ecc <__aeabi_dadd+0x2d0>
    6ce8:	2220      	movs	r2, #32
    6cea:	0038      	movs	r0, r7
    6cec:	0029      	movs	r1, r5
    6cee:	1ad2      	subs	r2, r2, r3
    6cf0:	40d8      	lsrs	r0, r3
    6cf2:	4091      	lsls	r1, r2
    6cf4:	4097      	lsls	r7, r2
    6cf6:	002c      	movs	r4, r5
    6cf8:	4301      	orrs	r1, r0
    6cfa:	1e78      	subs	r0, r7, #1
    6cfc:	4187      	sbcs	r7, r0
    6cfe:	40dc      	lsrs	r4, r3
    6d00:	2600      	movs	r6, #0
    6d02:	430f      	orrs	r7, r1
    6d04:	077b      	lsls	r3, r7, #29
    6d06:	d009      	beq.n	6d1c <__aeabi_dadd+0x120>
    6d08:	230f      	movs	r3, #15
    6d0a:	403b      	ands	r3, r7
    6d0c:	2b04      	cmp	r3, #4
    6d0e:	d005      	beq.n	6d1c <__aeabi_dadd+0x120>
    6d10:	1d3b      	adds	r3, r7, #4
    6d12:	42bb      	cmp	r3, r7
    6d14:	41bf      	sbcs	r7, r7
    6d16:	427f      	negs	r7, r7
    6d18:	19e4      	adds	r4, r4, r7
    6d1a:	001f      	movs	r7, r3
    6d1c:	0223      	lsls	r3, r4, #8
    6d1e:	d52c      	bpl.n	6d7a <__aeabi_dadd+0x17e>
    6d20:	4b96      	ldr	r3, [pc, #600]	; (6f7c <__aeabi_dadd+0x380>)
    6d22:	3601      	adds	r6, #1
    6d24:	429e      	cmp	r6, r3
    6d26:	d100      	bne.n	6d2a <__aeabi_dadd+0x12e>
    6d28:	e09a      	b.n	6e60 <__aeabi_dadd+0x264>
    6d2a:	4645      	mov	r5, r8
    6d2c:	4b94      	ldr	r3, [pc, #592]	; (6f80 <__aeabi_dadd+0x384>)
    6d2e:	08ff      	lsrs	r7, r7, #3
    6d30:	401c      	ands	r4, r3
    6d32:	0760      	lsls	r0, r4, #29
    6d34:	0576      	lsls	r6, r6, #21
    6d36:	0264      	lsls	r4, r4, #9
    6d38:	4307      	orrs	r7, r0
    6d3a:	0b24      	lsrs	r4, r4, #12
    6d3c:	0d76      	lsrs	r6, r6, #21
    6d3e:	2100      	movs	r1, #0
    6d40:	0324      	lsls	r4, r4, #12
    6d42:	0b23      	lsrs	r3, r4, #12
    6d44:	0d0c      	lsrs	r4, r1, #20
    6d46:	4a8f      	ldr	r2, [pc, #572]	; (6f84 <__aeabi_dadd+0x388>)
    6d48:	0524      	lsls	r4, r4, #20
    6d4a:	431c      	orrs	r4, r3
    6d4c:	4014      	ands	r4, r2
    6d4e:	0533      	lsls	r3, r6, #20
    6d50:	4323      	orrs	r3, r4
    6d52:	005b      	lsls	r3, r3, #1
    6d54:	07ed      	lsls	r5, r5, #31
    6d56:	085b      	lsrs	r3, r3, #1
    6d58:	432b      	orrs	r3, r5
    6d5a:	0038      	movs	r0, r7
    6d5c:	0019      	movs	r1, r3
    6d5e:	bc3c      	pop	{r2, r3, r4, r5}
    6d60:	4690      	mov	r8, r2
    6d62:	4699      	mov	r9, r3
    6d64:	46a2      	mov	sl, r4
    6d66:	46ab      	mov	fp, r5
    6d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6d6a:	4664      	mov	r4, ip
    6d6c:	4304      	orrs	r4, r0
    6d6e:	d100      	bne.n	6d72 <__aeabi_dadd+0x176>
    6d70:	e211      	b.n	7196 <__aeabi_dadd+0x59a>
    6d72:	0004      	movs	r4, r0
    6d74:	4667      	mov	r7, ip
    6d76:	077b      	lsls	r3, r7, #29
    6d78:	d1c6      	bne.n	6d08 <__aeabi_dadd+0x10c>
    6d7a:	4645      	mov	r5, r8
    6d7c:	0760      	lsls	r0, r4, #29
    6d7e:	08ff      	lsrs	r7, r7, #3
    6d80:	4307      	orrs	r7, r0
    6d82:	08e4      	lsrs	r4, r4, #3
    6d84:	4b7d      	ldr	r3, [pc, #500]	; (6f7c <__aeabi_dadd+0x380>)
    6d86:	429e      	cmp	r6, r3
    6d88:	d030      	beq.n	6dec <__aeabi_dadd+0x1f0>
    6d8a:	0324      	lsls	r4, r4, #12
    6d8c:	0576      	lsls	r6, r6, #21
    6d8e:	0b24      	lsrs	r4, r4, #12
    6d90:	0d76      	lsrs	r6, r6, #21
    6d92:	e7d4      	b.n	6d3e <__aeabi_dadd+0x142>
    6d94:	1a33      	subs	r3, r6, r0
    6d96:	469a      	mov	sl, r3
    6d98:	2b00      	cmp	r3, #0
    6d9a:	dd78      	ble.n	6e8e <__aeabi_dadd+0x292>
    6d9c:	2800      	cmp	r0, #0
    6d9e:	d031      	beq.n	6e04 <__aeabi_dadd+0x208>
    6da0:	4876      	ldr	r0, [pc, #472]	; (6f7c <__aeabi_dadd+0x380>)
    6da2:	4286      	cmp	r6, r0
    6da4:	d0ae      	beq.n	6d04 <__aeabi_dadd+0x108>
    6da6:	2080      	movs	r0, #128	; 0x80
    6da8:	0400      	lsls	r0, r0, #16
    6daa:	4301      	orrs	r1, r0
    6dac:	4653      	mov	r3, sl
    6dae:	2b38      	cmp	r3, #56	; 0x38
    6db0:	dc00      	bgt.n	6db4 <__aeabi_dadd+0x1b8>
    6db2:	e0e9      	b.n	6f88 <__aeabi_dadd+0x38c>
    6db4:	430a      	orrs	r2, r1
    6db6:	1e51      	subs	r1, r2, #1
    6db8:	418a      	sbcs	r2, r1
    6dba:	2100      	movs	r1, #0
    6dbc:	19d2      	adds	r2, r2, r7
    6dbe:	42ba      	cmp	r2, r7
    6dc0:	41bf      	sbcs	r7, r7
    6dc2:	1909      	adds	r1, r1, r4
    6dc4:	427c      	negs	r4, r7
    6dc6:	0017      	movs	r7, r2
    6dc8:	190c      	adds	r4, r1, r4
    6dca:	0223      	lsls	r3, r4, #8
    6dcc:	d5d3      	bpl.n	6d76 <__aeabi_dadd+0x17a>
    6dce:	4b6b      	ldr	r3, [pc, #428]	; (6f7c <__aeabi_dadd+0x380>)
    6dd0:	3601      	adds	r6, #1
    6dd2:	429e      	cmp	r6, r3
    6dd4:	d100      	bne.n	6dd8 <__aeabi_dadd+0x1dc>
    6dd6:	e13a      	b.n	704e <__aeabi_dadd+0x452>
    6dd8:	2001      	movs	r0, #1
    6dda:	4b69      	ldr	r3, [pc, #420]	; (6f80 <__aeabi_dadd+0x384>)
    6ddc:	401c      	ands	r4, r3
    6dde:	087b      	lsrs	r3, r7, #1
    6de0:	4007      	ands	r7, r0
    6de2:	431f      	orrs	r7, r3
    6de4:	07e0      	lsls	r0, r4, #31
    6de6:	4307      	orrs	r7, r0
    6de8:	0864      	lsrs	r4, r4, #1
    6dea:	e78b      	b.n	6d04 <__aeabi_dadd+0x108>
    6dec:	0023      	movs	r3, r4
    6dee:	433b      	orrs	r3, r7
    6df0:	d100      	bne.n	6df4 <__aeabi_dadd+0x1f8>
    6df2:	e1cb      	b.n	718c <__aeabi_dadd+0x590>
    6df4:	2280      	movs	r2, #128	; 0x80
    6df6:	0312      	lsls	r2, r2, #12
    6df8:	4314      	orrs	r4, r2
    6dfa:	0324      	lsls	r4, r4, #12
    6dfc:	0b24      	lsrs	r4, r4, #12
    6dfe:	e79e      	b.n	6d3e <__aeabi_dadd+0x142>
    6e00:	002e      	movs	r6, r5
    6e02:	e77f      	b.n	6d04 <__aeabi_dadd+0x108>
    6e04:	0008      	movs	r0, r1
    6e06:	4310      	orrs	r0, r2
    6e08:	d100      	bne.n	6e0c <__aeabi_dadd+0x210>
    6e0a:	e0b4      	b.n	6f76 <__aeabi_dadd+0x37a>
    6e0c:	1e58      	subs	r0, r3, #1
    6e0e:	2800      	cmp	r0, #0
    6e10:	d000      	beq.n	6e14 <__aeabi_dadd+0x218>
    6e12:	e0de      	b.n	6fd2 <__aeabi_dadd+0x3d6>
    6e14:	18ba      	adds	r2, r7, r2
    6e16:	42ba      	cmp	r2, r7
    6e18:	419b      	sbcs	r3, r3
    6e1a:	1864      	adds	r4, r4, r1
    6e1c:	425b      	negs	r3, r3
    6e1e:	18e4      	adds	r4, r4, r3
    6e20:	0017      	movs	r7, r2
    6e22:	2601      	movs	r6, #1
    6e24:	0223      	lsls	r3, r4, #8
    6e26:	d5a6      	bpl.n	6d76 <__aeabi_dadd+0x17a>
    6e28:	2602      	movs	r6, #2
    6e2a:	e7d5      	b.n	6dd8 <__aeabi_dadd+0x1dc>
    6e2c:	2d00      	cmp	r5, #0
    6e2e:	d16e      	bne.n	6f0e <__aeabi_dadd+0x312>
    6e30:	1c70      	adds	r0, r6, #1
    6e32:	0540      	lsls	r0, r0, #21
    6e34:	0d40      	lsrs	r0, r0, #21
    6e36:	2801      	cmp	r0, #1
    6e38:	dc00      	bgt.n	6e3c <__aeabi_dadd+0x240>
    6e3a:	e0f9      	b.n	7030 <__aeabi_dadd+0x434>
    6e3c:	1ab8      	subs	r0, r7, r2
    6e3e:	4684      	mov	ip, r0
    6e40:	4287      	cmp	r7, r0
    6e42:	4180      	sbcs	r0, r0
    6e44:	1ae5      	subs	r5, r4, r3
    6e46:	4240      	negs	r0, r0
    6e48:	1a2d      	subs	r5, r5, r0
    6e4a:	0228      	lsls	r0, r5, #8
    6e4c:	d400      	bmi.n	6e50 <__aeabi_dadd+0x254>
    6e4e:	e089      	b.n	6f64 <__aeabi_dadd+0x368>
    6e50:	1bd7      	subs	r7, r2, r7
    6e52:	42ba      	cmp	r2, r7
    6e54:	4192      	sbcs	r2, r2
    6e56:	1b1c      	subs	r4, r3, r4
    6e58:	4252      	negs	r2, r2
    6e5a:	1aa5      	subs	r5, r4, r2
    6e5c:	46d8      	mov	r8, fp
    6e5e:	e729      	b.n	6cb4 <__aeabi_dadd+0xb8>
    6e60:	4645      	mov	r5, r8
    6e62:	2400      	movs	r4, #0
    6e64:	2700      	movs	r7, #0
    6e66:	e76a      	b.n	6d3e <__aeabi_dadd+0x142>
    6e68:	4c45      	ldr	r4, [pc, #276]	; (6f80 <__aeabi_dadd+0x384>)
    6e6a:	1af6      	subs	r6, r6, r3
    6e6c:	402c      	ands	r4, r5
    6e6e:	e749      	b.n	6d04 <__aeabi_dadd+0x108>
    6e70:	003d      	movs	r5, r7
    6e72:	3828      	subs	r0, #40	; 0x28
    6e74:	4085      	lsls	r5, r0
    6e76:	2700      	movs	r7, #0
    6e78:	e72e      	b.n	6cd8 <__aeabi_dadd+0xdc>
    6e7a:	0038      	movs	r0, r7
    6e7c:	f001 fd42 	bl	8904 <__clzsi2>
    6e80:	3020      	adds	r0, #32
    6e82:	e71d      	b.n	6cc0 <__aeabi_dadd+0xc4>
    6e84:	430a      	orrs	r2, r1
    6e86:	1e51      	subs	r1, r2, #1
    6e88:	418a      	sbcs	r2, r1
    6e8a:	2100      	movs	r1, #0
    6e8c:	e707      	b.n	6c9e <__aeabi_dadd+0xa2>
    6e8e:	2b00      	cmp	r3, #0
    6e90:	d000      	beq.n	6e94 <__aeabi_dadd+0x298>
    6e92:	e0f3      	b.n	707c <__aeabi_dadd+0x480>
    6e94:	1c70      	adds	r0, r6, #1
    6e96:	0543      	lsls	r3, r0, #21
    6e98:	0d5b      	lsrs	r3, r3, #21
    6e9a:	2b01      	cmp	r3, #1
    6e9c:	dc00      	bgt.n	6ea0 <__aeabi_dadd+0x2a4>
    6e9e:	e0ad      	b.n	6ffc <__aeabi_dadd+0x400>
    6ea0:	4b36      	ldr	r3, [pc, #216]	; (6f7c <__aeabi_dadd+0x380>)
    6ea2:	4298      	cmp	r0, r3
    6ea4:	d100      	bne.n	6ea8 <__aeabi_dadd+0x2ac>
    6ea6:	e0d1      	b.n	704c <__aeabi_dadd+0x450>
    6ea8:	18ba      	adds	r2, r7, r2
    6eaa:	42ba      	cmp	r2, r7
    6eac:	41bf      	sbcs	r7, r7
    6eae:	1864      	adds	r4, r4, r1
    6eb0:	427f      	negs	r7, r7
    6eb2:	19e4      	adds	r4, r4, r7
    6eb4:	07e7      	lsls	r7, r4, #31
    6eb6:	0852      	lsrs	r2, r2, #1
    6eb8:	4317      	orrs	r7, r2
    6eba:	0864      	lsrs	r4, r4, #1
    6ebc:	0006      	movs	r6, r0
    6ebe:	e721      	b.n	6d04 <__aeabi_dadd+0x108>
    6ec0:	482e      	ldr	r0, [pc, #184]	; (6f7c <__aeabi_dadd+0x380>)
    6ec2:	4285      	cmp	r5, r0
    6ec4:	d100      	bne.n	6ec8 <__aeabi_dadd+0x2cc>
    6ec6:	e093      	b.n	6ff0 <__aeabi_dadd+0x3f4>
    6ec8:	001d      	movs	r5, r3
    6eca:	e6d0      	b.n	6c6e <__aeabi_dadd+0x72>
    6ecc:	0029      	movs	r1, r5
    6ece:	3e1f      	subs	r6, #31
    6ed0:	40f1      	lsrs	r1, r6
    6ed2:	2b20      	cmp	r3, #32
    6ed4:	d100      	bne.n	6ed8 <__aeabi_dadd+0x2dc>
    6ed6:	e08d      	b.n	6ff4 <__aeabi_dadd+0x3f8>
    6ed8:	2240      	movs	r2, #64	; 0x40
    6eda:	1ad3      	subs	r3, r2, r3
    6edc:	409d      	lsls	r5, r3
    6ede:	432f      	orrs	r7, r5
    6ee0:	1e7d      	subs	r5, r7, #1
    6ee2:	41af      	sbcs	r7, r5
    6ee4:	2400      	movs	r4, #0
    6ee6:	430f      	orrs	r7, r1
    6ee8:	2600      	movs	r6, #0
    6eea:	e744      	b.n	6d76 <__aeabi_dadd+0x17a>
    6eec:	002b      	movs	r3, r5
    6eee:	0008      	movs	r0, r1
    6ef0:	3b20      	subs	r3, #32
    6ef2:	40d8      	lsrs	r0, r3
    6ef4:	0003      	movs	r3, r0
    6ef6:	2d20      	cmp	r5, #32
    6ef8:	d100      	bne.n	6efc <__aeabi_dadd+0x300>
    6efa:	e07d      	b.n	6ff8 <__aeabi_dadd+0x3fc>
    6efc:	2040      	movs	r0, #64	; 0x40
    6efe:	1b45      	subs	r5, r0, r5
    6f00:	40a9      	lsls	r1, r5
    6f02:	430a      	orrs	r2, r1
    6f04:	1e51      	subs	r1, r2, #1
    6f06:	418a      	sbcs	r2, r1
    6f08:	2100      	movs	r1, #0
    6f0a:	431a      	orrs	r2, r3
    6f0c:	e6c7      	b.n	6c9e <__aeabi_dadd+0xa2>
    6f0e:	2e00      	cmp	r6, #0
    6f10:	d050      	beq.n	6fb4 <__aeabi_dadd+0x3b8>
    6f12:	4e1a      	ldr	r6, [pc, #104]	; (6f7c <__aeabi_dadd+0x380>)
    6f14:	42b0      	cmp	r0, r6
    6f16:	d057      	beq.n	6fc8 <__aeabi_dadd+0x3cc>
    6f18:	2680      	movs	r6, #128	; 0x80
    6f1a:	426b      	negs	r3, r5
    6f1c:	4699      	mov	r9, r3
    6f1e:	0436      	lsls	r6, r6, #16
    6f20:	4334      	orrs	r4, r6
    6f22:	464b      	mov	r3, r9
    6f24:	2b38      	cmp	r3, #56	; 0x38
    6f26:	dd00      	ble.n	6f2a <__aeabi_dadd+0x32e>
    6f28:	e0d6      	b.n	70d8 <__aeabi_dadd+0x4dc>
    6f2a:	2b1f      	cmp	r3, #31
    6f2c:	dd00      	ble.n	6f30 <__aeabi_dadd+0x334>
    6f2e:	e135      	b.n	719c <__aeabi_dadd+0x5a0>
    6f30:	2620      	movs	r6, #32
    6f32:	1af5      	subs	r5, r6, r3
    6f34:	0026      	movs	r6, r4
    6f36:	40ae      	lsls	r6, r5
    6f38:	46b2      	mov	sl, r6
    6f3a:	003e      	movs	r6, r7
    6f3c:	40de      	lsrs	r6, r3
    6f3e:	46ac      	mov	ip, r5
    6f40:	0035      	movs	r5, r6
    6f42:	4656      	mov	r6, sl
    6f44:	432e      	orrs	r6, r5
    6f46:	4665      	mov	r5, ip
    6f48:	40af      	lsls	r7, r5
    6f4a:	1e7d      	subs	r5, r7, #1
    6f4c:	41af      	sbcs	r7, r5
    6f4e:	40dc      	lsrs	r4, r3
    6f50:	4337      	orrs	r7, r6
    6f52:	1bd7      	subs	r7, r2, r7
    6f54:	42ba      	cmp	r2, r7
    6f56:	4192      	sbcs	r2, r2
    6f58:	1b0c      	subs	r4, r1, r4
    6f5a:	4252      	negs	r2, r2
    6f5c:	1aa4      	subs	r4, r4, r2
    6f5e:	0006      	movs	r6, r0
    6f60:	46d8      	mov	r8, fp
    6f62:	e6a3      	b.n	6cac <__aeabi_dadd+0xb0>
    6f64:	4664      	mov	r4, ip
    6f66:	4667      	mov	r7, ip
    6f68:	432c      	orrs	r4, r5
    6f6a:	d000      	beq.n	6f6e <__aeabi_dadd+0x372>
    6f6c:	e6a2      	b.n	6cb4 <__aeabi_dadd+0xb8>
    6f6e:	2500      	movs	r5, #0
    6f70:	2600      	movs	r6, #0
    6f72:	2700      	movs	r7, #0
    6f74:	e706      	b.n	6d84 <__aeabi_dadd+0x188>
    6f76:	001e      	movs	r6, r3
    6f78:	e6c4      	b.n	6d04 <__aeabi_dadd+0x108>
    6f7a:	46c0      	nop			; (mov r8, r8)
    6f7c:	000007ff 	.word	0x000007ff
    6f80:	ff7fffff 	.word	0xff7fffff
    6f84:	800fffff 	.word	0x800fffff
    6f88:	2b1f      	cmp	r3, #31
    6f8a:	dc63      	bgt.n	7054 <__aeabi_dadd+0x458>
    6f8c:	2020      	movs	r0, #32
    6f8e:	1ac3      	subs	r3, r0, r3
    6f90:	0008      	movs	r0, r1
    6f92:	4098      	lsls	r0, r3
    6f94:	469c      	mov	ip, r3
    6f96:	4683      	mov	fp, r0
    6f98:	4653      	mov	r3, sl
    6f9a:	0010      	movs	r0, r2
    6f9c:	40d8      	lsrs	r0, r3
    6f9e:	0003      	movs	r3, r0
    6fa0:	4658      	mov	r0, fp
    6fa2:	4318      	orrs	r0, r3
    6fa4:	4663      	mov	r3, ip
    6fa6:	409a      	lsls	r2, r3
    6fa8:	1e53      	subs	r3, r2, #1
    6faa:	419a      	sbcs	r2, r3
    6fac:	4653      	mov	r3, sl
    6fae:	4302      	orrs	r2, r0
    6fb0:	40d9      	lsrs	r1, r3
    6fb2:	e703      	b.n	6dbc <__aeabi_dadd+0x1c0>
    6fb4:	0026      	movs	r6, r4
    6fb6:	433e      	orrs	r6, r7
    6fb8:	d006      	beq.n	6fc8 <__aeabi_dadd+0x3cc>
    6fba:	43eb      	mvns	r3, r5
    6fbc:	4699      	mov	r9, r3
    6fbe:	2b00      	cmp	r3, #0
    6fc0:	d0c7      	beq.n	6f52 <__aeabi_dadd+0x356>
    6fc2:	4e94      	ldr	r6, [pc, #592]	; (7214 <__aeabi_dadd+0x618>)
    6fc4:	42b0      	cmp	r0, r6
    6fc6:	d1ac      	bne.n	6f22 <__aeabi_dadd+0x326>
    6fc8:	000c      	movs	r4, r1
    6fca:	0017      	movs	r7, r2
    6fcc:	0006      	movs	r6, r0
    6fce:	46d8      	mov	r8, fp
    6fd0:	e698      	b.n	6d04 <__aeabi_dadd+0x108>
    6fd2:	4b90      	ldr	r3, [pc, #576]	; (7214 <__aeabi_dadd+0x618>)
    6fd4:	459a      	cmp	sl, r3
    6fd6:	d00b      	beq.n	6ff0 <__aeabi_dadd+0x3f4>
    6fd8:	4682      	mov	sl, r0
    6fda:	e6e7      	b.n	6dac <__aeabi_dadd+0x1b0>
    6fdc:	2800      	cmp	r0, #0
    6fde:	d000      	beq.n	6fe2 <__aeabi_dadd+0x3e6>
    6fe0:	e09e      	b.n	7120 <__aeabi_dadd+0x524>
    6fe2:	0018      	movs	r0, r3
    6fe4:	4310      	orrs	r0, r2
    6fe6:	d100      	bne.n	6fea <__aeabi_dadd+0x3ee>
    6fe8:	e0e9      	b.n	71be <__aeabi_dadd+0x5c2>
    6fea:	001c      	movs	r4, r3
    6fec:	0017      	movs	r7, r2
    6fee:	46d8      	mov	r8, fp
    6ff0:	4e88      	ldr	r6, [pc, #544]	; (7214 <__aeabi_dadd+0x618>)
    6ff2:	e687      	b.n	6d04 <__aeabi_dadd+0x108>
    6ff4:	2500      	movs	r5, #0
    6ff6:	e772      	b.n	6ede <__aeabi_dadd+0x2e2>
    6ff8:	2100      	movs	r1, #0
    6ffa:	e782      	b.n	6f02 <__aeabi_dadd+0x306>
    6ffc:	0023      	movs	r3, r4
    6ffe:	433b      	orrs	r3, r7
    7000:	2e00      	cmp	r6, #0
    7002:	d000      	beq.n	7006 <__aeabi_dadd+0x40a>
    7004:	e0ab      	b.n	715e <__aeabi_dadd+0x562>
    7006:	2b00      	cmp	r3, #0
    7008:	d100      	bne.n	700c <__aeabi_dadd+0x410>
    700a:	e0e7      	b.n	71dc <__aeabi_dadd+0x5e0>
    700c:	000b      	movs	r3, r1
    700e:	4313      	orrs	r3, r2
    7010:	d100      	bne.n	7014 <__aeabi_dadd+0x418>
    7012:	e677      	b.n	6d04 <__aeabi_dadd+0x108>
    7014:	18ba      	adds	r2, r7, r2
    7016:	42ba      	cmp	r2, r7
    7018:	41bf      	sbcs	r7, r7
    701a:	1864      	adds	r4, r4, r1
    701c:	427f      	negs	r7, r7
    701e:	19e4      	adds	r4, r4, r7
    7020:	0223      	lsls	r3, r4, #8
    7022:	d400      	bmi.n	7026 <__aeabi_dadd+0x42a>
    7024:	e0f2      	b.n	720c <__aeabi_dadd+0x610>
    7026:	4b7c      	ldr	r3, [pc, #496]	; (7218 <__aeabi_dadd+0x61c>)
    7028:	0017      	movs	r7, r2
    702a:	401c      	ands	r4, r3
    702c:	0006      	movs	r6, r0
    702e:	e669      	b.n	6d04 <__aeabi_dadd+0x108>
    7030:	0020      	movs	r0, r4
    7032:	4338      	orrs	r0, r7
    7034:	2e00      	cmp	r6, #0
    7036:	d1d1      	bne.n	6fdc <__aeabi_dadd+0x3e0>
    7038:	2800      	cmp	r0, #0
    703a:	d15b      	bne.n	70f4 <__aeabi_dadd+0x4f8>
    703c:	001c      	movs	r4, r3
    703e:	4314      	orrs	r4, r2
    7040:	d100      	bne.n	7044 <__aeabi_dadd+0x448>
    7042:	e0a8      	b.n	7196 <__aeabi_dadd+0x59a>
    7044:	001c      	movs	r4, r3
    7046:	0017      	movs	r7, r2
    7048:	46d8      	mov	r8, fp
    704a:	e65b      	b.n	6d04 <__aeabi_dadd+0x108>
    704c:	0006      	movs	r6, r0
    704e:	2400      	movs	r4, #0
    7050:	2700      	movs	r7, #0
    7052:	e697      	b.n	6d84 <__aeabi_dadd+0x188>
    7054:	4650      	mov	r0, sl
    7056:	000b      	movs	r3, r1
    7058:	3820      	subs	r0, #32
    705a:	40c3      	lsrs	r3, r0
    705c:	4699      	mov	r9, r3
    705e:	4653      	mov	r3, sl
    7060:	2b20      	cmp	r3, #32
    7062:	d100      	bne.n	7066 <__aeabi_dadd+0x46a>
    7064:	e095      	b.n	7192 <__aeabi_dadd+0x596>
    7066:	2340      	movs	r3, #64	; 0x40
    7068:	4650      	mov	r0, sl
    706a:	1a1b      	subs	r3, r3, r0
    706c:	4099      	lsls	r1, r3
    706e:	430a      	orrs	r2, r1
    7070:	1e51      	subs	r1, r2, #1
    7072:	418a      	sbcs	r2, r1
    7074:	464b      	mov	r3, r9
    7076:	2100      	movs	r1, #0
    7078:	431a      	orrs	r2, r3
    707a:	e69f      	b.n	6dbc <__aeabi_dadd+0x1c0>
    707c:	2e00      	cmp	r6, #0
    707e:	d130      	bne.n	70e2 <__aeabi_dadd+0x4e6>
    7080:	0026      	movs	r6, r4
    7082:	433e      	orrs	r6, r7
    7084:	d067      	beq.n	7156 <__aeabi_dadd+0x55a>
    7086:	43db      	mvns	r3, r3
    7088:	469a      	mov	sl, r3
    708a:	2b00      	cmp	r3, #0
    708c:	d01c      	beq.n	70c8 <__aeabi_dadd+0x4cc>
    708e:	4e61      	ldr	r6, [pc, #388]	; (7214 <__aeabi_dadd+0x618>)
    7090:	42b0      	cmp	r0, r6
    7092:	d060      	beq.n	7156 <__aeabi_dadd+0x55a>
    7094:	4653      	mov	r3, sl
    7096:	2b38      	cmp	r3, #56	; 0x38
    7098:	dd00      	ble.n	709c <__aeabi_dadd+0x4a0>
    709a:	e096      	b.n	71ca <__aeabi_dadd+0x5ce>
    709c:	2b1f      	cmp	r3, #31
    709e:	dd00      	ble.n	70a2 <__aeabi_dadd+0x4a6>
    70a0:	e09f      	b.n	71e2 <__aeabi_dadd+0x5e6>
    70a2:	2620      	movs	r6, #32
    70a4:	1af3      	subs	r3, r6, r3
    70a6:	0026      	movs	r6, r4
    70a8:	409e      	lsls	r6, r3
    70aa:	469c      	mov	ip, r3
    70ac:	46b3      	mov	fp, r6
    70ae:	4653      	mov	r3, sl
    70b0:	003e      	movs	r6, r7
    70b2:	40de      	lsrs	r6, r3
    70b4:	0033      	movs	r3, r6
    70b6:	465e      	mov	r6, fp
    70b8:	431e      	orrs	r6, r3
    70ba:	4663      	mov	r3, ip
    70bc:	409f      	lsls	r7, r3
    70be:	1e7b      	subs	r3, r7, #1
    70c0:	419f      	sbcs	r7, r3
    70c2:	4653      	mov	r3, sl
    70c4:	40dc      	lsrs	r4, r3
    70c6:	4337      	orrs	r7, r6
    70c8:	18bf      	adds	r7, r7, r2
    70ca:	4297      	cmp	r7, r2
    70cc:	4192      	sbcs	r2, r2
    70ce:	1864      	adds	r4, r4, r1
    70d0:	4252      	negs	r2, r2
    70d2:	18a4      	adds	r4, r4, r2
    70d4:	0006      	movs	r6, r0
    70d6:	e678      	b.n	6dca <__aeabi_dadd+0x1ce>
    70d8:	4327      	orrs	r7, r4
    70da:	1e7c      	subs	r4, r7, #1
    70dc:	41a7      	sbcs	r7, r4
    70de:	2400      	movs	r4, #0
    70e0:	e737      	b.n	6f52 <__aeabi_dadd+0x356>
    70e2:	4e4c      	ldr	r6, [pc, #304]	; (7214 <__aeabi_dadd+0x618>)
    70e4:	42b0      	cmp	r0, r6
    70e6:	d036      	beq.n	7156 <__aeabi_dadd+0x55a>
    70e8:	2680      	movs	r6, #128	; 0x80
    70ea:	425b      	negs	r3, r3
    70ec:	0436      	lsls	r6, r6, #16
    70ee:	469a      	mov	sl, r3
    70f0:	4334      	orrs	r4, r6
    70f2:	e7cf      	b.n	7094 <__aeabi_dadd+0x498>
    70f4:	0018      	movs	r0, r3
    70f6:	4310      	orrs	r0, r2
    70f8:	d100      	bne.n	70fc <__aeabi_dadd+0x500>
    70fa:	e603      	b.n	6d04 <__aeabi_dadd+0x108>
    70fc:	1ab8      	subs	r0, r7, r2
    70fe:	4684      	mov	ip, r0
    7100:	4567      	cmp	r7, ip
    7102:	41ad      	sbcs	r5, r5
    7104:	1ae0      	subs	r0, r4, r3
    7106:	426d      	negs	r5, r5
    7108:	1b40      	subs	r0, r0, r5
    710a:	0205      	lsls	r5, r0, #8
    710c:	d400      	bmi.n	7110 <__aeabi_dadd+0x514>
    710e:	e62c      	b.n	6d6a <__aeabi_dadd+0x16e>
    7110:	1bd7      	subs	r7, r2, r7
    7112:	42ba      	cmp	r2, r7
    7114:	4192      	sbcs	r2, r2
    7116:	1b1c      	subs	r4, r3, r4
    7118:	4252      	negs	r2, r2
    711a:	1aa4      	subs	r4, r4, r2
    711c:	46d8      	mov	r8, fp
    711e:	e5f1      	b.n	6d04 <__aeabi_dadd+0x108>
    7120:	0018      	movs	r0, r3
    7122:	4310      	orrs	r0, r2
    7124:	d100      	bne.n	7128 <__aeabi_dadd+0x52c>
    7126:	e763      	b.n	6ff0 <__aeabi_dadd+0x3f4>
    7128:	08f8      	lsrs	r0, r7, #3
    712a:	0767      	lsls	r7, r4, #29
    712c:	4307      	orrs	r7, r0
    712e:	2080      	movs	r0, #128	; 0x80
    7130:	08e4      	lsrs	r4, r4, #3
    7132:	0300      	lsls	r0, r0, #12
    7134:	4204      	tst	r4, r0
    7136:	d008      	beq.n	714a <__aeabi_dadd+0x54e>
    7138:	08dd      	lsrs	r5, r3, #3
    713a:	4205      	tst	r5, r0
    713c:	d105      	bne.n	714a <__aeabi_dadd+0x54e>
    713e:	08d2      	lsrs	r2, r2, #3
    7140:	0759      	lsls	r1, r3, #29
    7142:	4311      	orrs	r1, r2
    7144:	000f      	movs	r7, r1
    7146:	002c      	movs	r4, r5
    7148:	46d8      	mov	r8, fp
    714a:	0f7b      	lsrs	r3, r7, #29
    714c:	00e4      	lsls	r4, r4, #3
    714e:	431c      	orrs	r4, r3
    7150:	00ff      	lsls	r7, r7, #3
    7152:	4e30      	ldr	r6, [pc, #192]	; (7214 <__aeabi_dadd+0x618>)
    7154:	e5d6      	b.n	6d04 <__aeabi_dadd+0x108>
    7156:	000c      	movs	r4, r1
    7158:	0017      	movs	r7, r2
    715a:	0006      	movs	r6, r0
    715c:	e5d2      	b.n	6d04 <__aeabi_dadd+0x108>
    715e:	2b00      	cmp	r3, #0
    7160:	d038      	beq.n	71d4 <__aeabi_dadd+0x5d8>
    7162:	000b      	movs	r3, r1
    7164:	4313      	orrs	r3, r2
    7166:	d100      	bne.n	716a <__aeabi_dadd+0x56e>
    7168:	e742      	b.n	6ff0 <__aeabi_dadd+0x3f4>
    716a:	08f8      	lsrs	r0, r7, #3
    716c:	0767      	lsls	r7, r4, #29
    716e:	4307      	orrs	r7, r0
    7170:	2080      	movs	r0, #128	; 0x80
    7172:	08e4      	lsrs	r4, r4, #3
    7174:	0300      	lsls	r0, r0, #12
    7176:	4204      	tst	r4, r0
    7178:	d0e7      	beq.n	714a <__aeabi_dadd+0x54e>
    717a:	08cb      	lsrs	r3, r1, #3
    717c:	4203      	tst	r3, r0
    717e:	d1e4      	bne.n	714a <__aeabi_dadd+0x54e>
    7180:	08d2      	lsrs	r2, r2, #3
    7182:	0749      	lsls	r1, r1, #29
    7184:	4311      	orrs	r1, r2
    7186:	000f      	movs	r7, r1
    7188:	001c      	movs	r4, r3
    718a:	e7de      	b.n	714a <__aeabi_dadd+0x54e>
    718c:	2700      	movs	r7, #0
    718e:	2400      	movs	r4, #0
    7190:	e5d5      	b.n	6d3e <__aeabi_dadd+0x142>
    7192:	2100      	movs	r1, #0
    7194:	e76b      	b.n	706e <__aeabi_dadd+0x472>
    7196:	2500      	movs	r5, #0
    7198:	2700      	movs	r7, #0
    719a:	e5f3      	b.n	6d84 <__aeabi_dadd+0x188>
    719c:	464e      	mov	r6, r9
    719e:	0025      	movs	r5, r4
    71a0:	3e20      	subs	r6, #32
    71a2:	40f5      	lsrs	r5, r6
    71a4:	464b      	mov	r3, r9
    71a6:	002e      	movs	r6, r5
    71a8:	2b20      	cmp	r3, #32
    71aa:	d02d      	beq.n	7208 <__aeabi_dadd+0x60c>
    71ac:	2540      	movs	r5, #64	; 0x40
    71ae:	1aed      	subs	r5, r5, r3
    71b0:	40ac      	lsls	r4, r5
    71b2:	4327      	orrs	r7, r4
    71b4:	1e7c      	subs	r4, r7, #1
    71b6:	41a7      	sbcs	r7, r4
    71b8:	2400      	movs	r4, #0
    71ba:	4337      	orrs	r7, r6
    71bc:	e6c9      	b.n	6f52 <__aeabi_dadd+0x356>
    71be:	2480      	movs	r4, #128	; 0x80
    71c0:	2500      	movs	r5, #0
    71c2:	0324      	lsls	r4, r4, #12
    71c4:	4e13      	ldr	r6, [pc, #76]	; (7214 <__aeabi_dadd+0x618>)
    71c6:	2700      	movs	r7, #0
    71c8:	e5dc      	b.n	6d84 <__aeabi_dadd+0x188>
    71ca:	4327      	orrs	r7, r4
    71cc:	1e7c      	subs	r4, r7, #1
    71ce:	41a7      	sbcs	r7, r4
    71d0:	2400      	movs	r4, #0
    71d2:	e779      	b.n	70c8 <__aeabi_dadd+0x4cc>
    71d4:	000c      	movs	r4, r1
    71d6:	0017      	movs	r7, r2
    71d8:	4e0e      	ldr	r6, [pc, #56]	; (7214 <__aeabi_dadd+0x618>)
    71da:	e593      	b.n	6d04 <__aeabi_dadd+0x108>
    71dc:	000c      	movs	r4, r1
    71de:	0017      	movs	r7, r2
    71e0:	e590      	b.n	6d04 <__aeabi_dadd+0x108>
    71e2:	4656      	mov	r6, sl
    71e4:	0023      	movs	r3, r4
    71e6:	3e20      	subs	r6, #32
    71e8:	40f3      	lsrs	r3, r6
    71ea:	4699      	mov	r9, r3
    71ec:	4653      	mov	r3, sl
    71ee:	2b20      	cmp	r3, #32
    71f0:	d00e      	beq.n	7210 <__aeabi_dadd+0x614>
    71f2:	2340      	movs	r3, #64	; 0x40
    71f4:	4656      	mov	r6, sl
    71f6:	1b9b      	subs	r3, r3, r6
    71f8:	409c      	lsls	r4, r3
    71fa:	4327      	orrs	r7, r4
    71fc:	1e7c      	subs	r4, r7, #1
    71fe:	41a7      	sbcs	r7, r4
    7200:	464b      	mov	r3, r9
    7202:	2400      	movs	r4, #0
    7204:	431f      	orrs	r7, r3
    7206:	e75f      	b.n	70c8 <__aeabi_dadd+0x4cc>
    7208:	2400      	movs	r4, #0
    720a:	e7d2      	b.n	71b2 <__aeabi_dadd+0x5b6>
    720c:	0017      	movs	r7, r2
    720e:	e5b2      	b.n	6d76 <__aeabi_dadd+0x17a>
    7210:	2400      	movs	r4, #0
    7212:	e7f2      	b.n	71fa <__aeabi_dadd+0x5fe>
    7214:	000007ff 	.word	0x000007ff
    7218:	ff7fffff 	.word	0xff7fffff

0000721c <__aeabi_ddiv>:
    721c:	b5f0      	push	{r4, r5, r6, r7, lr}
    721e:	4657      	mov	r7, sl
    7220:	4645      	mov	r5, r8
    7222:	46de      	mov	lr, fp
    7224:	464e      	mov	r6, r9
    7226:	b5e0      	push	{r5, r6, r7, lr}
    7228:	004c      	lsls	r4, r1, #1
    722a:	030e      	lsls	r6, r1, #12
    722c:	b087      	sub	sp, #28
    722e:	4683      	mov	fp, r0
    7230:	4692      	mov	sl, r2
    7232:	001d      	movs	r5, r3
    7234:	4680      	mov	r8, r0
    7236:	0b36      	lsrs	r6, r6, #12
    7238:	0d64      	lsrs	r4, r4, #21
    723a:	0fcf      	lsrs	r7, r1, #31
    723c:	2c00      	cmp	r4, #0
    723e:	d04f      	beq.n	72e0 <__aeabi_ddiv+0xc4>
    7240:	4b6f      	ldr	r3, [pc, #444]	; (7400 <__aeabi_ddiv+0x1e4>)
    7242:	429c      	cmp	r4, r3
    7244:	d035      	beq.n	72b2 <__aeabi_ddiv+0x96>
    7246:	2380      	movs	r3, #128	; 0x80
    7248:	0f42      	lsrs	r2, r0, #29
    724a:	041b      	lsls	r3, r3, #16
    724c:	00f6      	lsls	r6, r6, #3
    724e:	4313      	orrs	r3, r2
    7250:	4333      	orrs	r3, r6
    7252:	4699      	mov	r9, r3
    7254:	00c3      	lsls	r3, r0, #3
    7256:	4698      	mov	r8, r3
    7258:	4b6a      	ldr	r3, [pc, #424]	; (7404 <__aeabi_ddiv+0x1e8>)
    725a:	2600      	movs	r6, #0
    725c:	469c      	mov	ip, r3
    725e:	2300      	movs	r3, #0
    7260:	4464      	add	r4, ip
    7262:	9303      	str	r3, [sp, #12]
    7264:	032b      	lsls	r3, r5, #12
    7266:	0b1b      	lsrs	r3, r3, #12
    7268:	469b      	mov	fp, r3
    726a:	006b      	lsls	r3, r5, #1
    726c:	0fed      	lsrs	r5, r5, #31
    726e:	4650      	mov	r0, sl
    7270:	0d5b      	lsrs	r3, r3, #21
    7272:	9501      	str	r5, [sp, #4]
    7274:	d05e      	beq.n	7334 <__aeabi_ddiv+0x118>
    7276:	4a62      	ldr	r2, [pc, #392]	; (7400 <__aeabi_ddiv+0x1e4>)
    7278:	4293      	cmp	r3, r2
    727a:	d053      	beq.n	7324 <__aeabi_ddiv+0x108>
    727c:	465a      	mov	r2, fp
    727e:	00d1      	lsls	r1, r2, #3
    7280:	2280      	movs	r2, #128	; 0x80
    7282:	0f40      	lsrs	r0, r0, #29
    7284:	0412      	lsls	r2, r2, #16
    7286:	4302      	orrs	r2, r0
    7288:	430a      	orrs	r2, r1
    728a:	4693      	mov	fp, r2
    728c:	4652      	mov	r2, sl
    728e:	00d1      	lsls	r1, r2, #3
    7290:	4a5c      	ldr	r2, [pc, #368]	; (7404 <__aeabi_ddiv+0x1e8>)
    7292:	4694      	mov	ip, r2
    7294:	2200      	movs	r2, #0
    7296:	4463      	add	r3, ip
    7298:	0038      	movs	r0, r7
    729a:	4068      	eors	r0, r5
    729c:	4684      	mov	ip, r0
    729e:	9002      	str	r0, [sp, #8]
    72a0:	1ae4      	subs	r4, r4, r3
    72a2:	4316      	orrs	r6, r2
    72a4:	2e0f      	cmp	r6, #15
    72a6:	d900      	bls.n	72aa <__aeabi_ddiv+0x8e>
    72a8:	e0b4      	b.n	7414 <__aeabi_ddiv+0x1f8>
    72aa:	4b57      	ldr	r3, [pc, #348]	; (7408 <__aeabi_ddiv+0x1ec>)
    72ac:	00b6      	lsls	r6, r6, #2
    72ae:	599b      	ldr	r3, [r3, r6]
    72b0:	469f      	mov	pc, r3
    72b2:	0003      	movs	r3, r0
    72b4:	4333      	orrs	r3, r6
    72b6:	4699      	mov	r9, r3
    72b8:	d16c      	bne.n	7394 <__aeabi_ddiv+0x178>
    72ba:	2300      	movs	r3, #0
    72bc:	4698      	mov	r8, r3
    72be:	3302      	adds	r3, #2
    72c0:	2608      	movs	r6, #8
    72c2:	9303      	str	r3, [sp, #12]
    72c4:	e7ce      	b.n	7264 <__aeabi_ddiv+0x48>
    72c6:	46cb      	mov	fp, r9
    72c8:	4641      	mov	r1, r8
    72ca:	9a03      	ldr	r2, [sp, #12]
    72cc:	9701      	str	r7, [sp, #4]
    72ce:	2a02      	cmp	r2, #2
    72d0:	d165      	bne.n	739e <__aeabi_ddiv+0x182>
    72d2:	9b01      	ldr	r3, [sp, #4]
    72d4:	4c4a      	ldr	r4, [pc, #296]	; (7400 <__aeabi_ddiv+0x1e4>)
    72d6:	469c      	mov	ip, r3
    72d8:	2300      	movs	r3, #0
    72da:	2200      	movs	r2, #0
    72dc:	4698      	mov	r8, r3
    72de:	e06b      	b.n	73b8 <__aeabi_ddiv+0x19c>
    72e0:	0003      	movs	r3, r0
    72e2:	4333      	orrs	r3, r6
    72e4:	4699      	mov	r9, r3
    72e6:	d04e      	beq.n	7386 <__aeabi_ddiv+0x16a>
    72e8:	2e00      	cmp	r6, #0
    72ea:	d100      	bne.n	72ee <__aeabi_ddiv+0xd2>
    72ec:	e1bc      	b.n	7668 <__aeabi_ddiv+0x44c>
    72ee:	0030      	movs	r0, r6
    72f0:	f001 fb08 	bl	8904 <__clzsi2>
    72f4:	0003      	movs	r3, r0
    72f6:	3b0b      	subs	r3, #11
    72f8:	2b1c      	cmp	r3, #28
    72fa:	dd00      	ble.n	72fe <__aeabi_ddiv+0xe2>
    72fc:	e1ac      	b.n	7658 <__aeabi_ddiv+0x43c>
    72fe:	221d      	movs	r2, #29
    7300:	1ad3      	subs	r3, r2, r3
    7302:	465a      	mov	r2, fp
    7304:	0001      	movs	r1, r0
    7306:	40da      	lsrs	r2, r3
    7308:	3908      	subs	r1, #8
    730a:	408e      	lsls	r6, r1
    730c:	0013      	movs	r3, r2
    730e:	4333      	orrs	r3, r6
    7310:	4699      	mov	r9, r3
    7312:	465b      	mov	r3, fp
    7314:	408b      	lsls	r3, r1
    7316:	4698      	mov	r8, r3
    7318:	2300      	movs	r3, #0
    731a:	4c3c      	ldr	r4, [pc, #240]	; (740c <__aeabi_ddiv+0x1f0>)
    731c:	2600      	movs	r6, #0
    731e:	1a24      	subs	r4, r4, r0
    7320:	9303      	str	r3, [sp, #12]
    7322:	e79f      	b.n	7264 <__aeabi_ddiv+0x48>
    7324:	4651      	mov	r1, sl
    7326:	465a      	mov	r2, fp
    7328:	4311      	orrs	r1, r2
    732a:	d129      	bne.n	7380 <__aeabi_ddiv+0x164>
    732c:	2200      	movs	r2, #0
    732e:	4693      	mov	fp, r2
    7330:	3202      	adds	r2, #2
    7332:	e7b1      	b.n	7298 <__aeabi_ddiv+0x7c>
    7334:	4659      	mov	r1, fp
    7336:	4301      	orrs	r1, r0
    7338:	d01e      	beq.n	7378 <__aeabi_ddiv+0x15c>
    733a:	465b      	mov	r3, fp
    733c:	2b00      	cmp	r3, #0
    733e:	d100      	bne.n	7342 <__aeabi_ddiv+0x126>
    7340:	e19e      	b.n	7680 <__aeabi_ddiv+0x464>
    7342:	4658      	mov	r0, fp
    7344:	f001 fade 	bl	8904 <__clzsi2>
    7348:	0003      	movs	r3, r0
    734a:	3b0b      	subs	r3, #11
    734c:	2b1c      	cmp	r3, #28
    734e:	dd00      	ble.n	7352 <__aeabi_ddiv+0x136>
    7350:	e18f      	b.n	7672 <__aeabi_ddiv+0x456>
    7352:	0002      	movs	r2, r0
    7354:	4659      	mov	r1, fp
    7356:	3a08      	subs	r2, #8
    7358:	4091      	lsls	r1, r2
    735a:	468b      	mov	fp, r1
    735c:	211d      	movs	r1, #29
    735e:	1acb      	subs	r3, r1, r3
    7360:	4651      	mov	r1, sl
    7362:	40d9      	lsrs	r1, r3
    7364:	000b      	movs	r3, r1
    7366:	4659      	mov	r1, fp
    7368:	430b      	orrs	r3, r1
    736a:	4651      	mov	r1, sl
    736c:	469b      	mov	fp, r3
    736e:	4091      	lsls	r1, r2
    7370:	4b26      	ldr	r3, [pc, #152]	; (740c <__aeabi_ddiv+0x1f0>)
    7372:	2200      	movs	r2, #0
    7374:	1a1b      	subs	r3, r3, r0
    7376:	e78f      	b.n	7298 <__aeabi_ddiv+0x7c>
    7378:	2300      	movs	r3, #0
    737a:	2201      	movs	r2, #1
    737c:	469b      	mov	fp, r3
    737e:	e78b      	b.n	7298 <__aeabi_ddiv+0x7c>
    7380:	4651      	mov	r1, sl
    7382:	2203      	movs	r2, #3
    7384:	e788      	b.n	7298 <__aeabi_ddiv+0x7c>
    7386:	2300      	movs	r3, #0
    7388:	4698      	mov	r8, r3
    738a:	3301      	adds	r3, #1
    738c:	2604      	movs	r6, #4
    738e:	2400      	movs	r4, #0
    7390:	9303      	str	r3, [sp, #12]
    7392:	e767      	b.n	7264 <__aeabi_ddiv+0x48>
    7394:	2303      	movs	r3, #3
    7396:	46b1      	mov	r9, r6
    7398:	9303      	str	r3, [sp, #12]
    739a:	260c      	movs	r6, #12
    739c:	e762      	b.n	7264 <__aeabi_ddiv+0x48>
    739e:	2a03      	cmp	r2, #3
    73a0:	d100      	bne.n	73a4 <__aeabi_ddiv+0x188>
    73a2:	e25c      	b.n	785e <__aeabi_ddiv+0x642>
    73a4:	9b01      	ldr	r3, [sp, #4]
    73a6:	2a01      	cmp	r2, #1
    73a8:	d000      	beq.n	73ac <__aeabi_ddiv+0x190>
    73aa:	e1e4      	b.n	7776 <__aeabi_ddiv+0x55a>
    73ac:	4013      	ands	r3, r2
    73ae:	469c      	mov	ip, r3
    73b0:	2300      	movs	r3, #0
    73b2:	2400      	movs	r4, #0
    73b4:	2200      	movs	r2, #0
    73b6:	4698      	mov	r8, r3
    73b8:	2100      	movs	r1, #0
    73ba:	0312      	lsls	r2, r2, #12
    73bc:	0b13      	lsrs	r3, r2, #12
    73be:	0d0a      	lsrs	r2, r1, #20
    73c0:	0512      	lsls	r2, r2, #20
    73c2:	431a      	orrs	r2, r3
    73c4:	0523      	lsls	r3, r4, #20
    73c6:	4c12      	ldr	r4, [pc, #72]	; (7410 <__aeabi_ddiv+0x1f4>)
    73c8:	4640      	mov	r0, r8
    73ca:	4022      	ands	r2, r4
    73cc:	4313      	orrs	r3, r2
    73ce:	4662      	mov	r2, ip
    73d0:	005b      	lsls	r3, r3, #1
    73d2:	07d2      	lsls	r2, r2, #31
    73d4:	085b      	lsrs	r3, r3, #1
    73d6:	4313      	orrs	r3, r2
    73d8:	0019      	movs	r1, r3
    73da:	b007      	add	sp, #28
    73dc:	bc3c      	pop	{r2, r3, r4, r5}
    73de:	4690      	mov	r8, r2
    73e0:	4699      	mov	r9, r3
    73e2:	46a2      	mov	sl, r4
    73e4:	46ab      	mov	fp, r5
    73e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    73e8:	2300      	movs	r3, #0
    73ea:	2280      	movs	r2, #128	; 0x80
    73ec:	469c      	mov	ip, r3
    73ee:	0312      	lsls	r2, r2, #12
    73f0:	4698      	mov	r8, r3
    73f2:	4c03      	ldr	r4, [pc, #12]	; (7400 <__aeabi_ddiv+0x1e4>)
    73f4:	e7e0      	b.n	73b8 <__aeabi_ddiv+0x19c>
    73f6:	2300      	movs	r3, #0
    73f8:	4c01      	ldr	r4, [pc, #4]	; (7400 <__aeabi_ddiv+0x1e4>)
    73fa:	2200      	movs	r2, #0
    73fc:	4698      	mov	r8, r3
    73fe:	e7db      	b.n	73b8 <__aeabi_ddiv+0x19c>
    7400:	000007ff 	.word	0x000007ff
    7404:	fffffc01 	.word	0xfffffc01
    7408:	00008db8 	.word	0x00008db8
    740c:	fffffc0d 	.word	0xfffffc0d
    7410:	800fffff 	.word	0x800fffff
    7414:	45d9      	cmp	r9, fp
    7416:	d900      	bls.n	741a <__aeabi_ddiv+0x1fe>
    7418:	e139      	b.n	768e <__aeabi_ddiv+0x472>
    741a:	d100      	bne.n	741e <__aeabi_ddiv+0x202>
    741c:	e134      	b.n	7688 <__aeabi_ddiv+0x46c>
    741e:	2300      	movs	r3, #0
    7420:	4646      	mov	r6, r8
    7422:	464d      	mov	r5, r9
    7424:	469a      	mov	sl, r3
    7426:	3c01      	subs	r4, #1
    7428:	465b      	mov	r3, fp
    742a:	0e0a      	lsrs	r2, r1, #24
    742c:	021b      	lsls	r3, r3, #8
    742e:	431a      	orrs	r2, r3
    7430:	020b      	lsls	r3, r1, #8
    7432:	0c17      	lsrs	r7, r2, #16
    7434:	9303      	str	r3, [sp, #12]
    7436:	0413      	lsls	r3, r2, #16
    7438:	0c1b      	lsrs	r3, r3, #16
    743a:	0039      	movs	r1, r7
    743c:	0028      	movs	r0, r5
    743e:	4690      	mov	r8, r2
    7440:	9301      	str	r3, [sp, #4]
    7442:	f7fe fcd1 	bl	5de8 <__udivsi3>
    7446:	0002      	movs	r2, r0
    7448:	9b01      	ldr	r3, [sp, #4]
    744a:	4683      	mov	fp, r0
    744c:	435a      	muls	r2, r3
    744e:	0028      	movs	r0, r5
    7450:	0039      	movs	r1, r7
    7452:	4691      	mov	r9, r2
    7454:	f7fe fd4e 	bl	5ef4 <__aeabi_uidivmod>
    7458:	0c35      	lsrs	r5, r6, #16
    745a:	0409      	lsls	r1, r1, #16
    745c:	430d      	orrs	r5, r1
    745e:	45a9      	cmp	r9, r5
    7460:	d90d      	bls.n	747e <__aeabi_ddiv+0x262>
    7462:	465b      	mov	r3, fp
    7464:	4445      	add	r5, r8
    7466:	3b01      	subs	r3, #1
    7468:	45a8      	cmp	r8, r5
    746a:	d900      	bls.n	746e <__aeabi_ddiv+0x252>
    746c:	e13a      	b.n	76e4 <__aeabi_ddiv+0x4c8>
    746e:	45a9      	cmp	r9, r5
    7470:	d800      	bhi.n	7474 <__aeabi_ddiv+0x258>
    7472:	e137      	b.n	76e4 <__aeabi_ddiv+0x4c8>
    7474:	2302      	movs	r3, #2
    7476:	425b      	negs	r3, r3
    7478:	469c      	mov	ip, r3
    747a:	4445      	add	r5, r8
    747c:	44e3      	add	fp, ip
    747e:	464b      	mov	r3, r9
    7480:	1aeb      	subs	r3, r5, r3
    7482:	0039      	movs	r1, r7
    7484:	0018      	movs	r0, r3
    7486:	9304      	str	r3, [sp, #16]
    7488:	f7fe fcae 	bl	5de8 <__udivsi3>
    748c:	9b01      	ldr	r3, [sp, #4]
    748e:	0005      	movs	r5, r0
    7490:	4343      	muls	r3, r0
    7492:	0039      	movs	r1, r7
    7494:	9804      	ldr	r0, [sp, #16]
    7496:	4699      	mov	r9, r3
    7498:	f7fe fd2c 	bl	5ef4 <__aeabi_uidivmod>
    749c:	0433      	lsls	r3, r6, #16
    749e:	0409      	lsls	r1, r1, #16
    74a0:	0c1b      	lsrs	r3, r3, #16
    74a2:	430b      	orrs	r3, r1
    74a4:	4599      	cmp	r9, r3
    74a6:	d909      	bls.n	74bc <__aeabi_ddiv+0x2a0>
    74a8:	4443      	add	r3, r8
    74aa:	1e6a      	subs	r2, r5, #1
    74ac:	4598      	cmp	r8, r3
    74ae:	d900      	bls.n	74b2 <__aeabi_ddiv+0x296>
    74b0:	e11a      	b.n	76e8 <__aeabi_ddiv+0x4cc>
    74b2:	4599      	cmp	r9, r3
    74b4:	d800      	bhi.n	74b8 <__aeabi_ddiv+0x29c>
    74b6:	e117      	b.n	76e8 <__aeabi_ddiv+0x4cc>
    74b8:	3d02      	subs	r5, #2
    74ba:	4443      	add	r3, r8
    74bc:	464a      	mov	r2, r9
    74be:	1a9b      	subs	r3, r3, r2
    74c0:	465a      	mov	r2, fp
    74c2:	0412      	lsls	r2, r2, #16
    74c4:	432a      	orrs	r2, r5
    74c6:	9903      	ldr	r1, [sp, #12]
    74c8:	4693      	mov	fp, r2
    74ca:	0c10      	lsrs	r0, r2, #16
    74cc:	0c0a      	lsrs	r2, r1, #16
    74ce:	4691      	mov	r9, r2
    74d0:	0409      	lsls	r1, r1, #16
    74d2:	465a      	mov	r2, fp
    74d4:	0c09      	lsrs	r1, r1, #16
    74d6:	464e      	mov	r6, r9
    74d8:	000d      	movs	r5, r1
    74da:	0412      	lsls	r2, r2, #16
    74dc:	0c12      	lsrs	r2, r2, #16
    74de:	4345      	muls	r5, r0
    74e0:	9105      	str	r1, [sp, #20]
    74e2:	4351      	muls	r1, r2
    74e4:	4372      	muls	r2, r6
    74e6:	4370      	muls	r0, r6
    74e8:	1952      	adds	r2, r2, r5
    74ea:	0c0e      	lsrs	r6, r1, #16
    74ec:	18b2      	adds	r2, r6, r2
    74ee:	4295      	cmp	r5, r2
    74f0:	d903      	bls.n	74fa <__aeabi_ddiv+0x2de>
    74f2:	2580      	movs	r5, #128	; 0x80
    74f4:	026d      	lsls	r5, r5, #9
    74f6:	46ac      	mov	ip, r5
    74f8:	4460      	add	r0, ip
    74fa:	0c15      	lsrs	r5, r2, #16
    74fc:	0409      	lsls	r1, r1, #16
    74fe:	0412      	lsls	r2, r2, #16
    7500:	0c09      	lsrs	r1, r1, #16
    7502:	1828      	adds	r0, r5, r0
    7504:	1852      	adds	r2, r2, r1
    7506:	4283      	cmp	r3, r0
    7508:	d200      	bcs.n	750c <__aeabi_ddiv+0x2f0>
    750a:	e0ce      	b.n	76aa <__aeabi_ddiv+0x48e>
    750c:	d100      	bne.n	7510 <__aeabi_ddiv+0x2f4>
    750e:	e0c8      	b.n	76a2 <__aeabi_ddiv+0x486>
    7510:	1a1d      	subs	r5, r3, r0
    7512:	4653      	mov	r3, sl
    7514:	1a9e      	subs	r6, r3, r2
    7516:	45b2      	cmp	sl, r6
    7518:	4192      	sbcs	r2, r2
    751a:	4252      	negs	r2, r2
    751c:	1aab      	subs	r3, r5, r2
    751e:	469a      	mov	sl, r3
    7520:	4598      	cmp	r8, r3
    7522:	d100      	bne.n	7526 <__aeabi_ddiv+0x30a>
    7524:	e117      	b.n	7756 <__aeabi_ddiv+0x53a>
    7526:	0039      	movs	r1, r7
    7528:	0018      	movs	r0, r3
    752a:	f7fe fc5d 	bl	5de8 <__udivsi3>
    752e:	9b01      	ldr	r3, [sp, #4]
    7530:	0005      	movs	r5, r0
    7532:	4343      	muls	r3, r0
    7534:	0039      	movs	r1, r7
    7536:	4650      	mov	r0, sl
    7538:	9304      	str	r3, [sp, #16]
    753a:	f7fe fcdb 	bl	5ef4 <__aeabi_uidivmod>
    753e:	9804      	ldr	r0, [sp, #16]
    7540:	040b      	lsls	r3, r1, #16
    7542:	0c31      	lsrs	r1, r6, #16
    7544:	4319      	orrs	r1, r3
    7546:	4288      	cmp	r0, r1
    7548:	d909      	bls.n	755e <__aeabi_ddiv+0x342>
    754a:	4441      	add	r1, r8
    754c:	1e6b      	subs	r3, r5, #1
    754e:	4588      	cmp	r8, r1
    7550:	d900      	bls.n	7554 <__aeabi_ddiv+0x338>
    7552:	e107      	b.n	7764 <__aeabi_ddiv+0x548>
    7554:	4288      	cmp	r0, r1
    7556:	d800      	bhi.n	755a <__aeabi_ddiv+0x33e>
    7558:	e104      	b.n	7764 <__aeabi_ddiv+0x548>
    755a:	3d02      	subs	r5, #2
    755c:	4441      	add	r1, r8
    755e:	9b04      	ldr	r3, [sp, #16]
    7560:	1acb      	subs	r3, r1, r3
    7562:	0018      	movs	r0, r3
    7564:	0039      	movs	r1, r7
    7566:	9304      	str	r3, [sp, #16]
    7568:	f7fe fc3e 	bl	5de8 <__udivsi3>
    756c:	9b01      	ldr	r3, [sp, #4]
    756e:	4682      	mov	sl, r0
    7570:	4343      	muls	r3, r0
    7572:	0039      	movs	r1, r7
    7574:	9804      	ldr	r0, [sp, #16]
    7576:	9301      	str	r3, [sp, #4]
    7578:	f7fe fcbc 	bl	5ef4 <__aeabi_uidivmod>
    757c:	9801      	ldr	r0, [sp, #4]
    757e:	040b      	lsls	r3, r1, #16
    7580:	0431      	lsls	r1, r6, #16
    7582:	0c09      	lsrs	r1, r1, #16
    7584:	4319      	orrs	r1, r3
    7586:	4288      	cmp	r0, r1
    7588:	d90d      	bls.n	75a6 <__aeabi_ddiv+0x38a>
    758a:	4653      	mov	r3, sl
    758c:	4441      	add	r1, r8
    758e:	3b01      	subs	r3, #1
    7590:	4588      	cmp	r8, r1
    7592:	d900      	bls.n	7596 <__aeabi_ddiv+0x37a>
    7594:	e0e8      	b.n	7768 <__aeabi_ddiv+0x54c>
    7596:	4288      	cmp	r0, r1
    7598:	d800      	bhi.n	759c <__aeabi_ddiv+0x380>
    759a:	e0e5      	b.n	7768 <__aeabi_ddiv+0x54c>
    759c:	2302      	movs	r3, #2
    759e:	425b      	negs	r3, r3
    75a0:	469c      	mov	ip, r3
    75a2:	4441      	add	r1, r8
    75a4:	44e2      	add	sl, ip
    75a6:	9b01      	ldr	r3, [sp, #4]
    75a8:	042d      	lsls	r5, r5, #16
    75aa:	1ace      	subs	r6, r1, r3
    75ac:	4651      	mov	r1, sl
    75ae:	4329      	orrs	r1, r5
    75b0:	9d05      	ldr	r5, [sp, #20]
    75b2:	464f      	mov	r7, r9
    75b4:	002a      	movs	r2, r5
    75b6:	040b      	lsls	r3, r1, #16
    75b8:	0c08      	lsrs	r0, r1, #16
    75ba:	0c1b      	lsrs	r3, r3, #16
    75bc:	435a      	muls	r2, r3
    75be:	4345      	muls	r5, r0
    75c0:	437b      	muls	r3, r7
    75c2:	4378      	muls	r0, r7
    75c4:	195b      	adds	r3, r3, r5
    75c6:	0c17      	lsrs	r7, r2, #16
    75c8:	18fb      	adds	r3, r7, r3
    75ca:	429d      	cmp	r5, r3
    75cc:	d903      	bls.n	75d6 <__aeabi_ddiv+0x3ba>
    75ce:	2580      	movs	r5, #128	; 0x80
    75d0:	026d      	lsls	r5, r5, #9
    75d2:	46ac      	mov	ip, r5
    75d4:	4460      	add	r0, ip
    75d6:	0c1d      	lsrs	r5, r3, #16
    75d8:	0412      	lsls	r2, r2, #16
    75da:	041b      	lsls	r3, r3, #16
    75dc:	0c12      	lsrs	r2, r2, #16
    75de:	1828      	adds	r0, r5, r0
    75e0:	189b      	adds	r3, r3, r2
    75e2:	4286      	cmp	r6, r0
    75e4:	d200      	bcs.n	75e8 <__aeabi_ddiv+0x3cc>
    75e6:	e093      	b.n	7710 <__aeabi_ddiv+0x4f4>
    75e8:	d100      	bne.n	75ec <__aeabi_ddiv+0x3d0>
    75ea:	e08e      	b.n	770a <__aeabi_ddiv+0x4ee>
    75ec:	2301      	movs	r3, #1
    75ee:	4319      	orrs	r1, r3
    75f0:	4ba0      	ldr	r3, [pc, #640]	; (7874 <__aeabi_ddiv+0x658>)
    75f2:	18e3      	adds	r3, r4, r3
    75f4:	2b00      	cmp	r3, #0
    75f6:	dc00      	bgt.n	75fa <__aeabi_ddiv+0x3de>
    75f8:	e099      	b.n	772e <__aeabi_ddiv+0x512>
    75fa:	074a      	lsls	r2, r1, #29
    75fc:	d000      	beq.n	7600 <__aeabi_ddiv+0x3e4>
    75fe:	e09e      	b.n	773e <__aeabi_ddiv+0x522>
    7600:	465a      	mov	r2, fp
    7602:	01d2      	lsls	r2, r2, #7
    7604:	d506      	bpl.n	7614 <__aeabi_ddiv+0x3f8>
    7606:	465a      	mov	r2, fp
    7608:	4b9b      	ldr	r3, [pc, #620]	; (7878 <__aeabi_ddiv+0x65c>)
    760a:	401a      	ands	r2, r3
    760c:	2380      	movs	r3, #128	; 0x80
    760e:	4693      	mov	fp, r2
    7610:	00db      	lsls	r3, r3, #3
    7612:	18e3      	adds	r3, r4, r3
    7614:	4a99      	ldr	r2, [pc, #612]	; (787c <__aeabi_ddiv+0x660>)
    7616:	4293      	cmp	r3, r2
    7618:	dd68      	ble.n	76ec <__aeabi_ddiv+0x4d0>
    761a:	2301      	movs	r3, #1
    761c:	9a02      	ldr	r2, [sp, #8]
    761e:	4c98      	ldr	r4, [pc, #608]	; (7880 <__aeabi_ddiv+0x664>)
    7620:	401a      	ands	r2, r3
    7622:	2300      	movs	r3, #0
    7624:	4694      	mov	ip, r2
    7626:	4698      	mov	r8, r3
    7628:	2200      	movs	r2, #0
    762a:	e6c5      	b.n	73b8 <__aeabi_ddiv+0x19c>
    762c:	2280      	movs	r2, #128	; 0x80
    762e:	464b      	mov	r3, r9
    7630:	0312      	lsls	r2, r2, #12
    7632:	4213      	tst	r3, r2
    7634:	d00a      	beq.n	764c <__aeabi_ddiv+0x430>
    7636:	465b      	mov	r3, fp
    7638:	4213      	tst	r3, r2
    763a:	d106      	bne.n	764a <__aeabi_ddiv+0x42e>
    763c:	431a      	orrs	r2, r3
    763e:	0312      	lsls	r2, r2, #12
    7640:	0b12      	lsrs	r2, r2, #12
    7642:	46ac      	mov	ip, r5
    7644:	4688      	mov	r8, r1
    7646:	4c8e      	ldr	r4, [pc, #568]	; (7880 <__aeabi_ddiv+0x664>)
    7648:	e6b6      	b.n	73b8 <__aeabi_ddiv+0x19c>
    764a:	464b      	mov	r3, r9
    764c:	431a      	orrs	r2, r3
    764e:	0312      	lsls	r2, r2, #12
    7650:	0b12      	lsrs	r2, r2, #12
    7652:	46bc      	mov	ip, r7
    7654:	4c8a      	ldr	r4, [pc, #552]	; (7880 <__aeabi_ddiv+0x664>)
    7656:	e6af      	b.n	73b8 <__aeabi_ddiv+0x19c>
    7658:	0003      	movs	r3, r0
    765a:	465a      	mov	r2, fp
    765c:	3b28      	subs	r3, #40	; 0x28
    765e:	409a      	lsls	r2, r3
    7660:	2300      	movs	r3, #0
    7662:	4691      	mov	r9, r2
    7664:	4698      	mov	r8, r3
    7666:	e657      	b.n	7318 <__aeabi_ddiv+0xfc>
    7668:	4658      	mov	r0, fp
    766a:	f001 f94b 	bl	8904 <__clzsi2>
    766e:	3020      	adds	r0, #32
    7670:	e640      	b.n	72f4 <__aeabi_ddiv+0xd8>
    7672:	0003      	movs	r3, r0
    7674:	4652      	mov	r2, sl
    7676:	3b28      	subs	r3, #40	; 0x28
    7678:	409a      	lsls	r2, r3
    767a:	2100      	movs	r1, #0
    767c:	4693      	mov	fp, r2
    767e:	e677      	b.n	7370 <__aeabi_ddiv+0x154>
    7680:	f001 f940 	bl	8904 <__clzsi2>
    7684:	3020      	adds	r0, #32
    7686:	e65f      	b.n	7348 <__aeabi_ddiv+0x12c>
    7688:	4588      	cmp	r8, r1
    768a:	d200      	bcs.n	768e <__aeabi_ddiv+0x472>
    768c:	e6c7      	b.n	741e <__aeabi_ddiv+0x202>
    768e:	464b      	mov	r3, r9
    7690:	07de      	lsls	r6, r3, #31
    7692:	085d      	lsrs	r5, r3, #1
    7694:	4643      	mov	r3, r8
    7696:	085b      	lsrs	r3, r3, #1
    7698:	431e      	orrs	r6, r3
    769a:	4643      	mov	r3, r8
    769c:	07db      	lsls	r3, r3, #31
    769e:	469a      	mov	sl, r3
    76a0:	e6c2      	b.n	7428 <__aeabi_ddiv+0x20c>
    76a2:	2500      	movs	r5, #0
    76a4:	4592      	cmp	sl, r2
    76a6:	d300      	bcc.n	76aa <__aeabi_ddiv+0x48e>
    76a8:	e733      	b.n	7512 <__aeabi_ddiv+0x2f6>
    76aa:	9e03      	ldr	r6, [sp, #12]
    76ac:	4659      	mov	r1, fp
    76ae:	46b4      	mov	ip, r6
    76b0:	44e2      	add	sl, ip
    76b2:	45b2      	cmp	sl, r6
    76b4:	41ad      	sbcs	r5, r5
    76b6:	426d      	negs	r5, r5
    76b8:	4445      	add	r5, r8
    76ba:	18eb      	adds	r3, r5, r3
    76bc:	3901      	subs	r1, #1
    76be:	4598      	cmp	r8, r3
    76c0:	d207      	bcs.n	76d2 <__aeabi_ddiv+0x4b6>
    76c2:	4298      	cmp	r0, r3
    76c4:	d900      	bls.n	76c8 <__aeabi_ddiv+0x4ac>
    76c6:	e07f      	b.n	77c8 <__aeabi_ddiv+0x5ac>
    76c8:	d100      	bne.n	76cc <__aeabi_ddiv+0x4b0>
    76ca:	e0bc      	b.n	7846 <__aeabi_ddiv+0x62a>
    76cc:	1a1d      	subs	r5, r3, r0
    76ce:	468b      	mov	fp, r1
    76d0:	e71f      	b.n	7512 <__aeabi_ddiv+0x2f6>
    76d2:	4598      	cmp	r8, r3
    76d4:	d1fa      	bne.n	76cc <__aeabi_ddiv+0x4b0>
    76d6:	9d03      	ldr	r5, [sp, #12]
    76d8:	4555      	cmp	r5, sl
    76da:	d9f2      	bls.n	76c2 <__aeabi_ddiv+0x4a6>
    76dc:	4643      	mov	r3, r8
    76de:	468b      	mov	fp, r1
    76e0:	1a1d      	subs	r5, r3, r0
    76e2:	e716      	b.n	7512 <__aeabi_ddiv+0x2f6>
    76e4:	469b      	mov	fp, r3
    76e6:	e6ca      	b.n	747e <__aeabi_ddiv+0x262>
    76e8:	0015      	movs	r5, r2
    76ea:	e6e7      	b.n	74bc <__aeabi_ddiv+0x2a0>
    76ec:	465a      	mov	r2, fp
    76ee:	08c9      	lsrs	r1, r1, #3
    76f0:	0752      	lsls	r2, r2, #29
    76f2:	430a      	orrs	r2, r1
    76f4:	055b      	lsls	r3, r3, #21
    76f6:	4690      	mov	r8, r2
    76f8:	0d5c      	lsrs	r4, r3, #21
    76fa:	465a      	mov	r2, fp
    76fc:	2301      	movs	r3, #1
    76fe:	9902      	ldr	r1, [sp, #8]
    7700:	0252      	lsls	r2, r2, #9
    7702:	4019      	ands	r1, r3
    7704:	0b12      	lsrs	r2, r2, #12
    7706:	468c      	mov	ip, r1
    7708:	e656      	b.n	73b8 <__aeabi_ddiv+0x19c>
    770a:	2b00      	cmp	r3, #0
    770c:	d100      	bne.n	7710 <__aeabi_ddiv+0x4f4>
    770e:	e76f      	b.n	75f0 <__aeabi_ddiv+0x3d4>
    7710:	4446      	add	r6, r8
    7712:	1e4a      	subs	r2, r1, #1
    7714:	45b0      	cmp	r8, r6
    7716:	d929      	bls.n	776c <__aeabi_ddiv+0x550>
    7718:	0011      	movs	r1, r2
    771a:	4286      	cmp	r6, r0
    771c:	d000      	beq.n	7720 <__aeabi_ddiv+0x504>
    771e:	e765      	b.n	75ec <__aeabi_ddiv+0x3d0>
    7720:	9a03      	ldr	r2, [sp, #12]
    7722:	4293      	cmp	r3, r2
    7724:	d000      	beq.n	7728 <__aeabi_ddiv+0x50c>
    7726:	e761      	b.n	75ec <__aeabi_ddiv+0x3d0>
    7728:	e762      	b.n	75f0 <__aeabi_ddiv+0x3d4>
    772a:	2101      	movs	r1, #1
    772c:	4249      	negs	r1, r1
    772e:	2001      	movs	r0, #1
    7730:	1ac2      	subs	r2, r0, r3
    7732:	2a38      	cmp	r2, #56	; 0x38
    7734:	dd21      	ble.n	777a <__aeabi_ddiv+0x55e>
    7736:	9b02      	ldr	r3, [sp, #8]
    7738:	4003      	ands	r3, r0
    773a:	469c      	mov	ip, r3
    773c:	e638      	b.n	73b0 <__aeabi_ddiv+0x194>
    773e:	220f      	movs	r2, #15
    7740:	400a      	ands	r2, r1
    7742:	2a04      	cmp	r2, #4
    7744:	d100      	bne.n	7748 <__aeabi_ddiv+0x52c>
    7746:	e75b      	b.n	7600 <__aeabi_ddiv+0x3e4>
    7748:	000a      	movs	r2, r1
    774a:	1d11      	adds	r1, r2, #4
    774c:	4291      	cmp	r1, r2
    774e:	4192      	sbcs	r2, r2
    7750:	4252      	negs	r2, r2
    7752:	4493      	add	fp, r2
    7754:	e754      	b.n	7600 <__aeabi_ddiv+0x3e4>
    7756:	4b47      	ldr	r3, [pc, #284]	; (7874 <__aeabi_ddiv+0x658>)
    7758:	18e3      	adds	r3, r4, r3
    775a:	2b00      	cmp	r3, #0
    775c:	dde5      	ble.n	772a <__aeabi_ddiv+0x50e>
    775e:	2201      	movs	r2, #1
    7760:	4252      	negs	r2, r2
    7762:	e7f2      	b.n	774a <__aeabi_ddiv+0x52e>
    7764:	001d      	movs	r5, r3
    7766:	e6fa      	b.n	755e <__aeabi_ddiv+0x342>
    7768:	469a      	mov	sl, r3
    776a:	e71c      	b.n	75a6 <__aeabi_ddiv+0x38a>
    776c:	42b0      	cmp	r0, r6
    776e:	d839      	bhi.n	77e4 <__aeabi_ddiv+0x5c8>
    7770:	d06e      	beq.n	7850 <__aeabi_ddiv+0x634>
    7772:	0011      	movs	r1, r2
    7774:	e73a      	b.n	75ec <__aeabi_ddiv+0x3d0>
    7776:	9302      	str	r3, [sp, #8]
    7778:	e73a      	b.n	75f0 <__aeabi_ddiv+0x3d4>
    777a:	2a1f      	cmp	r2, #31
    777c:	dc3c      	bgt.n	77f8 <__aeabi_ddiv+0x5dc>
    777e:	2320      	movs	r3, #32
    7780:	1a9b      	subs	r3, r3, r2
    7782:	000c      	movs	r4, r1
    7784:	4658      	mov	r0, fp
    7786:	4099      	lsls	r1, r3
    7788:	4098      	lsls	r0, r3
    778a:	1e4b      	subs	r3, r1, #1
    778c:	4199      	sbcs	r1, r3
    778e:	465b      	mov	r3, fp
    7790:	40d4      	lsrs	r4, r2
    7792:	40d3      	lsrs	r3, r2
    7794:	4320      	orrs	r0, r4
    7796:	4308      	orrs	r0, r1
    7798:	001a      	movs	r2, r3
    779a:	0743      	lsls	r3, r0, #29
    779c:	d009      	beq.n	77b2 <__aeabi_ddiv+0x596>
    779e:	230f      	movs	r3, #15
    77a0:	4003      	ands	r3, r0
    77a2:	2b04      	cmp	r3, #4
    77a4:	d005      	beq.n	77b2 <__aeabi_ddiv+0x596>
    77a6:	0001      	movs	r1, r0
    77a8:	1d08      	adds	r0, r1, #4
    77aa:	4288      	cmp	r0, r1
    77ac:	419b      	sbcs	r3, r3
    77ae:	425b      	negs	r3, r3
    77b0:	18d2      	adds	r2, r2, r3
    77b2:	0213      	lsls	r3, r2, #8
    77b4:	d53a      	bpl.n	782c <__aeabi_ddiv+0x610>
    77b6:	2301      	movs	r3, #1
    77b8:	9a02      	ldr	r2, [sp, #8]
    77ba:	2401      	movs	r4, #1
    77bc:	401a      	ands	r2, r3
    77be:	2300      	movs	r3, #0
    77c0:	4694      	mov	ip, r2
    77c2:	4698      	mov	r8, r3
    77c4:	2200      	movs	r2, #0
    77c6:	e5f7      	b.n	73b8 <__aeabi_ddiv+0x19c>
    77c8:	2102      	movs	r1, #2
    77ca:	4249      	negs	r1, r1
    77cc:	468c      	mov	ip, r1
    77ce:	9d03      	ldr	r5, [sp, #12]
    77d0:	44e3      	add	fp, ip
    77d2:	46ac      	mov	ip, r5
    77d4:	44e2      	add	sl, ip
    77d6:	45aa      	cmp	sl, r5
    77d8:	41ad      	sbcs	r5, r5
    77da:	426d      	negs	r5, r5
    77dc:	4445      	add	r5, r8
    77de:	18ed      	adds	r5, r5, r3
    77e0:	1a2d      	subs	r5, r5, r0
    77e2:	e696      	b.n	7512 <__aeabi_ddiv+0x2f6>
    77e4:	1e8a      	subs	r2, r1, #2
    77e6:	9903      	ldr	r1, [sp, #12]
    77e8:	004d      	lsls	r5, r1, #1
    77ea:	428d      	cmp	r5, r1
    77ec:	4189      	sbcs	r1, r1
    77ee:	4249      	negs	r1, r1
    77f0:	4441      	add	r1, r8
    77f2:	1876      	adds	r6, r6, r1
    77f4:	9503      	str	r5, [sp, #12]
    77f6:	e78f      	b.n	7718 <__aeabi_ddiv+0x4fc>
    77f8:	201f      	movs	r0, #31
    77fa:	4240      	negs	r0, r0
    77fc:	1ac3      	subs	r3, r0, r3
    77fe:	4658      	mov	r0, fp
    7800:	40d8      	lsrs	r0, r3
    7802:	0003      	movs	r3, r0
    7804:	2a20      	cmp	r2, #32
    7806:	d028      	beq.n	785a <__aeabi_ddiv+0x63e>
    7808:	2040      	movs	r0, #64	; 0x40
    780a:	465d      	mov	r5, fp
    780c:	1a82      	subs	r2, r0, r2
    780e:	4095      	lsls	r5, r2
    7810:	4329      	orrs	r1, r5
    7812:	1e4a      	subs	r2, r1, #1
    7814:	4191      	sbcs	r1, r2
    7816:	4319      	orrs	r1, r3
    7818:	2307      	movs	r3, #7
    781a:	2200      	movs	r2, #0
    781c:	400b      	ands	r3, r1
    781e:	d009      	beq.n	7834 <__aeabi_ddiv+0x618>
    7820:	230f      	movs	r3, #15
    7822:	2200      	movs	r2, #0
    7824:	400b      	ands	r3, r1
    7826:	0008      	movs	r0, r1
    7828:	2b04      	cmp	r3, #4
    782a:	d1bd      	bne.n	77a8 <__aeabi_ddiv+0x58c>
    782c:	0001      	movs	r1, r0
    782e:	0753      	lsls	r3, r2, #29
    7830:	0252      	lsls	r2, r2, #9
    7832:	0b12      	lsrs	r2, r2, #12
    7834:	08c9      	lsrs	r1, r1, #3
    7836:	4319      	orrs	r1, r3
    7838:	2301      	movs	r3, #1
    783a:	4688      	mov	r8, r1
    783c:	9902      	ldr	r1, [sp, #8]
    783e:	2400      	movs	r4, #0
    7840:	4019      	ands	r1, r3
    7842:	468c      	mov	ip, r1
    7844:	e5b8      	b.n	73b8 <__aeabi_ddiv+0x19c>
    7846:	4552      	cmp	r2, sl
    7848:	d8be      	bhi.n	77c8 <__aeabi_ddiv+0x5ac>
    784a:	468b      	mov	fp, r1
    784c:	2500      	movs	r5, #0
    784e:	e660      	b.n	7512 <__aeabi_ddiv+0x2f6>
    7850:	9d03      	ldr	r5, [sp, #12]
    7852:	429d      	cmp	r5, r3
    7854:	d3c6      	bcc.n	77e4 <__aeabi_ddiv+0x5c8>
    7856:	0011      	movs	r1, r2
    7858:	e762      	b.n	7720 <__aeabi_ddiv+0x504>
    785a:	2500      	movs	r5, #0
    785c:	e7d8      	b.n	7810 <__aeabi_ddiv+0x5f4>
    785e:	2280      	movs	r2, #128	; 0x80
    7860:	465b      	mov	r3, fp
    7862:	0312      	lsls	r2, r2, #12
    7864:	431a      	orrs	r2, r3
    7866:	9b01      	ldr	r3, [sp, #4]
    7868:	0312      	lsls	r2, r2, #12
    786a:	0b12      	lsrs	r2, r2, #12
    786c:	469c      	mov	ip, r3
    786e:	4688      	mov	r8, r1
    7870:	4c03      	ldr	r4, [pc, #12]	; (7880 <__aeabi_ddiv+0x664>)
    7872:	e5a1      	b.n	73b8 <__aeabi_ddiv+0x19c>
    7874:	000003ff 	.word	0x000003ff
    7878:	feffffff 	.word	0xfeffffff
    787c:	000007fe 	.word	0x000007fe
    7880:	000007ff 	.word	0x000007ff

00007884 <__eqdf2>:
    7884:	b5f0      	push	{r4, r5, r6, r7, lr}
    7886:	464f      	mov	r7, r9
    7888:	4646      	mov	r6, r8
    788a:	46d6      	mov	lr, sl
    788c:	005c      	lsls	r4, r3, #1
    788e:	b5c0      	push	{r6, r7, lr}
    7890:	031f      	lsls	r7, r3, #12
    7892:	0fdb      	lsrs	r3, r3, #31
    7894:	469a      	mov	sl, r3
    7896:	4b17      	ldr	r3, [pc, #92]	; (78f4 <__eqdf2+0x70>)
    7898:	030e      	lsls	r6, r1, #12
    789a:	004d      	lsls	r5, r1, #1
    789c:	4684      	mov	ip, r0
    789e:	4680      	mov	r8, r0
    78a0:	0b36      	lsrs	r6, r6, #12
    78a2:	0d6d      	lsrs	r5, r5, #21
    78a4:	0fc9      	lsrs	r1, r1, #31
    78a6:	4691      	mov	r9, r2
    78a8:	0b3f      	lsrs	r7, r7, #12
    78aa:	0d64      	lsrs	r4, r4, #21
    78ac:	2001      	movs	r0, #1
    78ae:	429d      	cmp	r5, r3
    78b0:	d008      	beq.n	78c4 <__eqdf2+0x40>
    78b2:	429c      	cmp	r4, r3
    78b4:	d001      	beq.n	78ba <__eqdf2+0x36>
    78b6:	42a5      	cmp	r5, r4
    78b8:	d00b      	beq.n	78d2 <__eqdf2+0x4e>
    78ba:	bc1c      	pop	{r2, r3, r4}
    78bc:	4690      	mov	r8, r2
    78be:	4699      	mov	r9, r3
    78c0:	46a2      	mov	sl, r4
    78c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    78c4:	4663      	mov	r3, ip
    78c6:	4333      	orrs	r3, r6
    78c8:	d1f7      	bne.n	78ba <__eqdf2+0x36>
    78ca:	42ac      	cmp	r4, r5
    78cc:	d1f5      	bne.n	78ba <__eqdf2+0x36>
    78ce:	433a      	orrs	r2, r7
    78d0:	d1f3      	bne.n	78ba <__eqdf2+0x36>
    78d2:	2001      	movs	r0, #1
    78d4:	42be      	cmp	r6, r7
    78d6:	d1f0      	bne.n	78ba <__eqdf2+0x36>
    78d8:	45c8      	cmp	r8, r9
    78da:	d1ee      	bne.n	78ba <__eqdf2+0x36>
    78dc:	4551      	cmp	r1, sl
    78de:	d007      	beq.n	78f0 <__eqdf2+0x6c>
    78e0:	2d00      	cmp	r5, #0
    78e2:	d1ea      	bne.n	78ba <__eqdf2+0x36>
    78e4:	4663      	mov	r3, ip
    78e6:	431e      	orrs	r6, r3
    78e8:	0030      	movs	r0, r6
    78ea:	1e46      	subs	r6, r0, #1
    78ec:	41b0      	sbcs	r0, r6
    78ee:	e7e4      	b.n	78ba <__eqdf2+0x36>
    78f0:	2000      	movs	r0, #0
    78f2:	e7e2      	b.n	78ba <__eqdf2+0x36>
    78f4:	000007ff 	.word	0x000007ff

000078f8 <__gedf2>:
    78f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    78fa:	4645      	mov	r5, r8
    78fc:	46de      	mov	lr, fp
    78fe:	4657      	mov	r7, sl
    7900:	464e      	mov	r6, r9
    7902:	b5e0      	push	{r5, r6, r7, lr}
    7904:	031f      	lsls	r7, r3, #12
    7906:	0b3d      	lsrs	r5, r7, #12
    7908:	4f2c      	ldr	r7, [pc, #176]	; (79bc <__gedf2+0xc4>)
    790a:	030e      	lsls	r6, r1, #12
    790c:	004c      	lsls	r4, r1, #1
    790e:	46ab      	mov	fp, r5
    7910:	005d      	lsls	r5, r3, #1
    7912:	4684      	mov	ip, r0
    7914:	0b36      	lsrs	r6, r6, #12
    7916:	0d64      	lsrs	r4, r4, #21
    7918:	0fc9      	lsrs	r1, r1, #31
    791a:	4690      	mov	r8, r2
    791c:	0d6d      	lsrs	r5, r5, #21
    791e:	0fdb      	lsrs	r3, r3, #31
    7920:	42bc      	cmp	r4, r7
    7922:	d02a      	beq.n	797a <__gedf2+0x82>
    7924:	4f25      	ldr	r7, [pc, #148]	; (79bc <__gedf2+0xc4>)
    7926:	42bd      	cmp	r5, r7
    7928:	d02d      	beq.n	7986 <__gedf2+0x8e>
    792a:	2c00      	cmp	r4, #0
    792c:	d10f      	bne.n	794e <__gedf2+0x56>
    792e:	4330      	orrs	r0, r6
    7930:	0007      	movs	r7, r0
    7932:	4681      	mov	r9, r0
    7934:	4278      	negs	r0, r7
    7936:	4178      	adcs	r0, r7
    7938:	b2c0      	uxtb	r0, r0
    793a:	2d00      	cmp	r5, #0
    793c:	d117      	bne.n	796e <__gedf2+0x76>
    793e:	465f      	mov	r7, fp
    7940:	433a      	orrs	r2, r7
    7942:	d114      	bne.n	796e <__gedf2+0x76>
    7944:	464b      	mov	r3, r9
    7946:	2000      	movs	r0, #0
    7948:	2b00      	cmp	r3, #0
    794a:	d00a      	beq.n	7962 <__gedf2+0x6a>
    794c:	e006      	b.n	795c <__gedf2+0x64>
    794e:	2d00      	cmp	r5, #0
    7950:	d102      	bne.n	7958 <__gedf2+0x60>
    7952:	4658      	mov	r0, fp
    7954:	4302      	orrs	r2, r0
    7956:	d001      	beq.n	795c <__gedf2+0x64>
    7958:	4299      	cmp	r1, r3
    795a:	d018      	beq.n	798e <__gedf2+0x96>
    795c:	4248      	negs	r0, r1
    795e:	2101      	movs	r1, #1
    7960:	4308      	orrs	r0, r1
    7962:	bc3c      	pop	{r2, r3, r4, r5}
    7964:	4690      	mov	r8, r2
    7966:	4699      	mov	r9, r3
    7968:	46a2      	mov	sl, r4
    796a:	46ab      	mov	fp, r5
    796c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    796e:	2800      	cmp	r0, #0
    7970:	d0f2      	beq.n	7958 <__gedf2+0x60>
    7972:	2001      	movs	r0, #1
    7974:	3b01      	subs	r3, #1
    7976:	4318      	orrs	r0, r3
    7978:	e7f3      	b.n	7962 <__gedf2+0x6a>
    797a:	0037      	movs	r7, r6
    797c:	4307      	orrs	r7, r0
    797e:	d0d1      	beq.n	7924 <__gedf2+0x2c>
    7980:	2002      	movs	r0, #2
    7982:	4240      	negs	r0, r0
    7984:	e7ed      	b.n	7962 <__gedf2+0x6a>
    7986:	465f      	mov	r7, fp
    7988:	4317      	orrs	r7, r2
    798a:	d0ce      	beq.n	792a <__gedf2+0x32>
    798c:	e7f8      	b.n	7980 <__gedf2+0x88>
    798e:	42ac      	cmp	r4, r5
    7990:	dce4      	bgt.n	795c <__gedf2+0x64>
    7992:	da03      	bge.n	799c <__gedf2+0xa4>
    7994:	1e48      	subs	r0, r1, #1
    7996:	2101      	movs	r1, #1
    7998:	4308      	orrs	r0, r1
    799a:	e7e2      	b.n	7962 <__gedf2+0x6a>
    799c:	455e      	cmp	r6, fp
    799e:	d8dd      	bhi.n	795c <__gedf2+0x64>
    79a0:	d006      	beq.n	79b0 <__gedf2+0xb8>
    79a2:	2000      	movs	r0, #0
    79a4:	455e      	cmp	r6, fp
    79a6:	d2dc      	bcs.n	7962 <__gedf2+0x6a>
    79a8:	2301      	movs	r3, #1
    79aa:	1e48      	subs	r0, r1, #1
    79ac:	4318      	orrs	r0, r3
    79ae:	e7d8      	b.n	7962 <__gedf2+0x6a>
    79b0:	45c4      	cmp	ip, r8
    79b2:	d8d3      	bhi.n	795c <__gedf2+0x64>
    79b4:	2000      	movs	r0, #0
    79b6:	45c4      	cmp	ip, r8
    79b8:	d3f6      	bcc.n	79a8 <__gedf2+0xb0>
    79ba:	e7d2      	b.n	7962 <__gedf2+0x6a>
    79bc:	000007ff 	.word	0x000007ff

000079c0 <__ledf2>:
    79c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    79c2:	464e      	mov	r6, r9
    79c4:	4645      	mov	r5, r8
    79c6:	46de      	mov	lr, fp
    79c8:	4657      	mov	r7, sl
    79ca:	005c      	lsls	r4, r3, #1
    79cc:	b5e0      	push	{r5, r6, r7, lr}
    79ce:	031f      	lsls	r7, r3, #12
    79d0:	0fdb      	lsrs	r3, r3, #31
    79d2:	4699      	mov	r9, r3
    79d4:	4b2a      	ldr	r3, [pc, #168]	; (7a80 <__ledf2+0xc0>)
    79d6:	030e      	lsls	r6, r1, #12
    79d8:	004d      	lsls	r5, r1, #1
    79da:	0fc9      	lsrs	r1, r1, #31
    79dc:	4684      	mov	ip, r0
    79de:	0b36      	lsrs	r6, r6, #12
    79e0:	0d6d      	lsrs	r5, r5, #21
    79e2:	468b      	mov	fp, r1
    79e4:	4690      	mov	r8, r2
    79e6:	0b3f      	lsrs	r7, r7, #12
    79e8:	0d64      	lsrs	r4, r4, #21
    79ea:	429d      	cmp	r5, r3
    79ec:	d020      	beq.n	7a30 <__ledf2+0x70>
    79ee:	4b24      	ldr	r3, [pc, #144]	; (7a80 <__ledf2+0xc0>)
    79f0:	429c      	cmp	r4, r3
    79f2:	d022      	beq.n	7a3a <__ledf2+0x7a>
    79f4:	2d00      	cmp	r5, #0
    79f6:	d112      	bne.n	7a1e <__ledf2+0x5e>
    79f8:	4330      	orrs	r0, r6
    79fa:	4243      	negs	r3, r0
    79fc:	4143      	adcs	r3, r0
    79fe:	b2db      	uxtb	r3, r3
    7a00:	2c00      	cmp	r4, #0
    7a02:	d01f      	beq.n	7a44 <__ledf2+0x84>
    7a04:	2b00      	cmp	r3, #0
    7a06:	d00c      	beq.n	7a22 <__ledf2+0x62>
    7a08:	464b      	mov	r3, r9
    7a0a:	2001      	movs	r0, #1
    7a0c:	3b01      	subs	r3, #1
    7a0e:	4303      	orrs	r3, r0
    7a10:	0018      	movs	r0, r3
    7a12:	bc3c      	pop	{r2, r3, r4, r5}
    7a14:	4690      	mov	r8, r2
    7a16:	4699      	mov	r9, r3
    7a18:	46a2      	mov	sl, r4
    7a1a:	46ab      	mov	fp, r5
    7a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a1e:	2c00      	cmp	r4, #0
    7a20:	d016      	beq.n	7a50 <__ledf2+0x90>
    7a22:	45cb      	cmp	fp, r9
    7a24:	d017      	beq.n	7a56 <__ledf2+0x96>
    7a26:	465b      	mov	r3, fp
    7a28:	4259      	negs	r1, r3
    7a2a:	2301      	movs	r3, #1
    7a2c:	430b      	orrs	r3, r1
    7a2e:	e7ef      	b.n	7a10 <__ledf2+0x50>
    7a30:	0031      	movs	r1, r6
    7a32:	2302      	movs	r3, #2
    7a34:	4301      	orrs	r1, r0
    7a36:	d1eb      	bne.n	7a10 <__ledf2+0x50>
    7a38:	e7d9      	b.n	79ee <__ledf2+0x2e>
    7a3a:	0039      	movs	r1, r7
    7a3c:	2302      	movs	r3, #2
    7a3e:	4311      	orrs	r1, r2
    7a40:	d1e6      	bne.n	7a10 <__ledf2+0x50>
    7a42:	e7d7      	b.n	79f4 <__ledf2+0x34>
    7a44:	433a      	orrs	r2, r7
    7a46:	d1dd      	bne.n	7a04 <__ledf2+0x44>
    7a48:	2300      	movs	r3, #0
    7a4a:	2800      	cmp	r0, #0
    7a4c:	d0e0      	beq.n	7a10 <__ledf2+0x50>
    7a4e:	e7ea      	b.n	7a26 <__ledf2+0x66>
    7a50:	433a      	orrs	r2, r7
    7a52:	d1e6      	bne.n	7a22 <__ledf2+0x62>
    7a54:	e7e7      	b.n	7a26 <__ledf2+0x66>
    7a56:	42a5      	cmp	r5, r4
    7a58:	dce5      	bgt.n	7a26 <__ledf2+0x66>
    7a5a:	db05      	blt.n	7a68 <__ledf2+0xa8>
    7a5c:	42be      	cmp	r6, r7
    7a5e:	d8e2      	bhi.n	7a26 <__ledf2+0x66>
    7a60:	d007      	beq.n	7a72 <__ledf2+0xb2>
    7a62:	2300      	movs	r3, #0
    7a64:	42be      	cmp	r6, r7
    7a66:	d2d3      	bcs.n	7a10 <__ledf2+0x50>
    7a68:	4659      	mov	r1, fp
    7a6a:	2301      	movs	r3, #1
    7a6c:	3901      	subs	r1, #1
    7a6e:	430b      	orrs	r3, r1
    7a70:	e7ce      	b.n	7a10 <__ledf2+0x50>
    7a72:	45c4      	cmp	ip, r8
    7a74:	d8d7      	bhi.n	7a26 <__ledf2+0x66>
    7a76:	2300      	movs	r3, #0
    7a78:	45c4      	cmp	ip, r8
    7a7a:	d3f5      	bcc.n	7a68 <__ledf2+0xa8>
    7a7c:	e7c8      	b.n	7a10 <__ledf2+0x50>
    7a7e:	46c0      	nop			; (mov r8, r8)
    7a80:	000007ff 	.word	0x000007ff

00007a84 <__aeabi_dmul>:
    7a84:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a86:	4657      	mov	r7, sl
    7a88:	4645      	mov	r5, r8
    7a8a:	46de      	mov	lr, fp
    7a8c:	464e      	mov	r6, r9
    7a8e:	b5e0      	push	{r5, r6, r7, lr}
    7a90:	030c      	lsls	r4, r1, #12
    7a92:	4698      	mov	r8, r3
    7a94:	004e      	lsls	r6, r1, #1
    7a96:	0b23      	lsrs	r3, r4, #12
    7a98:	b087      	sub	sp, #28
    7a9a:	0007      	movs	r7, r0
    7a9c:	4692      	mov	sl, r2
    7a9e:	469b      	mov	fp, r3
    7aa0:	0d76      	lsrs	r6, r6, #21
    7aa2:	0fcd      	lsrs	r5, r1, #31
    7aa4:	2e00      	cmp	r6, #0
    7aa6:	d06b      	beq.n	7b80 <__aeabi_dmul+0xfc>
    7aa8:	4b6d      	ldr	r3, [pc, #436]	; (7c60 <__aeabi_dmul+0x1dc>)
    7aaa:	429e      	cmp	r6, r3
    7aac:	d035      	beq.n	7b1a <__aeabi_dmul+0x96>
    7aae:	2480      	movs	r4, #128	; 0x80
    7ab0:	465b      	mov	r3, fp
    7ab2:	0f42      	lsrs	r2, r0, #29
    7ab4:	0424      	lsls	r4, r4, #16
    7ab6:	00db      	lsls	r3, r3, #3
    7ab8:	4314      	orrs	r4, r2
    7aba:	431c      	orrs	r4, r3
    7abc:	00c3      	lsls	r3, r0, #3
    7abe:	4699      	mov	r9, r3
    7ac0:	4b68      	ldr	r3, [pc, #416]	; (7c64 <__aeabi_dmul+0x1e0>)
    7ac2:	46a3      	mov	fp, r4
    7ac4:	469c      	mov	ip, r3
    7ac6:	2300      	movs	r3, #0
    7ac8:	2700      	movs	r7, #0
    7aca:	4466      	add	r6, ip
    7acc:	9302      	str	r3, [sp, #8]
    7ace:	4643      	mov	r3, r8
    7ad0:	031c      	lsls	r4, r3, #12
    7ad2:	005a      	lsls	r2, r3, #1
    7ad4:	0fdb      	lsrs	r3, r3, #31
    7ad6:	4650      	mov	r0, sl
    7ad8:	0b24      	lsrs	r4, r4, #12
    7ada:	0d52      	lsrs	r2, r2, #21
    7adc:	4698      	mov	r8, r3
    7ade:	d100      	bne.n	7ae2 <__aeabi_dmul+0x5e>
    7ae0:	e076      	b.n	7bd0 <__aeabi_dmul+0x14c>
    7ae2:	4b5f      	ldr	r3, [pc, #380]	; (7c60 <__aeabi_dmul+0x1dc>)
    7ae4:	429a      	cmp	r2, r3
    7ae6:	d06d      	beq.n	7bc4 <__aeabi_dmul+0x140>
    7ae8:	2380      	movs	r3, #128	; 0x80
    7aea:	0f41      	lsrs	r1, r0, #29
    7aec:	041b      	lsls	r3, r3, #16
    7aee:	430b      	orrs	r3, r1
    7af0:	495c      	ldr	r1, [pc, #368]	; (7c64 <__aeabi_dmul+0x1e0>)
    7af2:	00e4      	lsls	r4, r4, #3
    7af4:	468c      	mov	ip, r1
    7af6:	431c      	orrs	r4, r3
    7af8:	00c3      	lsls	r3, r0, #3
    7afa:	2000      	movs	r0, #0
    7afc:	4462      	add	r2, ip
    7afe:	4641      	mov	r1, r8
    7b00:	18b6      	adds	r6, r6, r2
    7b02:	4069      	eors	r1, r5
    7b04:	1c72      	adds	r2, r6, #1
    7b06:	9101      	str	r1, [sp, #4]
    7b08:	4694      	mov	ip, r2
    7b0a:	4307      	orrs	r7, r0
    7b0c:	2f0f      	cmp	r7, #15
    7b0e:	d900      	bls.n	7b12 <__aeabi_dmul+0x8e>
    7b10:	e0b0      	b.n	7c74 <__aeabi_dmul+0x1f0>
    7b12:	4a55      	ldr	r2, [pc, #340]	; (7c68 <__aeabi_dmul+0x1e4>)
    7b14:	00bf      	lsls	r7, r7, #2
    7b16:	59d2      	ldr	r2, [r2, r7]
    7b18:	4697      	mov	pc, r2
    7b1a:	465b      	mov	r3, fp
    7b1c:	4303      	orrs	r3, r0
    7b1e:	4699      	mov	r9, r3
    7b20:	d000      	beq.n	7b24 <__aeabi_dmul+0xa0>
    7b22:	e087      	b.n	7c34 <__aeabi_dmul+0x1b0>
    7b24:	2300      	movs	r3, #0
    7b26:	469b      	mov	fp, r3
    7b28:	3302      	adds	r3, #2
    7b2a:	2708      	movs	r7, #8
    7b2c:	9302      	str	r3, [sp, #8]
    7b2e:	e7ce      	b.n	7ace <__aeabi_dmul+0x4a>
    7b30:	4642      	mov	r2, r8
    7b32:	9201      	str	r2, [sp, #4]
    7b34:	2802      	cmp	r0, #2
    7b36:	d067      	beq.n	7c08 <__aeabi_dmul+0x184>
    7b38:	2803      	cmp	r0, #3
    7b3a:	d100      	bne.n	7b3e <__aeabi_dmul+0xba>
    7b3c:	e20e      	b.n	7f5c <__aeabi_dmul+0x4d8>
    7b3e:	2801      	cmp	r0, #1
    7b40:	d000      	beq.n	7b44 <__aeabi_dmul+0xc0>
    7b42:	e162      	b.n	7e0a <__aeabi_dmul+0x386>
    7b44:	2300      	movs	r3, #0
    7b46:	2400      	movs	r4, #0
    7b48:	2200      	movs	r2, #0
    7b4a:	4699      	mov	r9, r3
    7b4c:	9901      	ldr	r1, [sp, #4]
    7b4e:	4001      	ands	r1, r0
    7b50:	b2cd      	uxtb	r5, r1
    7b52:	2100      	movs	r1, #0
    7b54:	0312      	lsls	r2, r2, #12
    7b56:	0d0b      	lsrs	r3, r1, #20
    7b58:	0b12      	lsrs	r2, r2, #12
    7b5a:	051b      	lsls	r3, r3, #20
    7b5c:	4313      	orrs	r3, r2
    7b5e:	4a43      	ldr	r2, [pc, #268]	; (7c6c <__aeabi_dmul+0x1e8>)
    7b60:	0524      	lsls	r4, r4, #20
    7b62:	4013      	ands	r3, r2
    7b64:	431c      	orrs	r4, r3
    7b66:	0064      	lsls	r4, r4, #1
    7b68:	07ed      	lsls	r5, r5, #31
    7b6a:	0864      	lsrs	r4, r4, #1
    7b6c:	432c      	orrs	r4, r5
    7b6e:	4648      	mov	r0, r9
    7b70:	0021      	movs	r1, r4
    7b72:	b007      	add	sp, #28
    7b74:	bc3c      	pop	{r2, r3, r4, r5}
    7b76:	4690      	mov	r8, r2
    7b78:	4699      	mov	r9, r3
    7b7a:	46a2      	mov	sl, r4
    7b7c:	46ab      	mov	fp, r5
    7b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b80:	4303      	orrs	r3, r0
    7b82:	4699      	mov	r9, r3
    7b84:	d04f      	beq.n	7c26 <__aeabi_dmul+0x1a2>
    7b86:	465b      	mov	r3, fp
    7b88:	2b00      	cmp	r3, #0
    7b8a:	d100      	bne.n	7b8e <__aeabi_dmul+0x10a>
    7b8c:	e189      	b.n	7ea2 <__aeabi_dmul+0x41e>
    7b8e:	4658      	mov	r0, fp
    7b90:	f000 feb8 	bl	8904 <__clzsi2>
    7b94:	0003      	movs	r3, r0
    7b96:	3b0b      	subs	r3, #11
    7b98:	2b1c      	cmp	r3, #28
    7b9a:	dd00      	ble.n	7b9e <__aeabi_dmul+0x11a>
    7b9c:	e17a      	b.n	7e94 <__aeabi_dmul+0x410>
    7b9e:	221d      	movs	r2, #29
    7ba0:	1ad3      	subs	r3, r2, r3
    7ba2:	003a      	movs	r2, r7
    7ba4:	0001      	movs	r1, r0
    7ba6:	465c      	mov	r4, fp
    7ba8:	40da      	lsrs	r2, r3
    7baa:	3908      	subs	r1, #8
    7bac:	408c      	lsls	r4, r1
    7bae:	0013      	movs	r3, r2
    7bb0:	408f      	lsls	r7, r1
    7bb2:	4323      	orrs	r3, r4
    7bb4:	469b      	mov	fp, r3
    7bb6:	46b9      	mov	r9, r7
    7bb8:	2300      	movs	r3, #0
    7bba:	4e2d      	ldr	r6, [pc, #180]	; (7c70 <__aeabi_dmul+0x1ec>)
    7bbc:	2700      	movs	r7, #0
    7bbe:	1a36      	subs	r6, r6, r0
    7bc0:	9302      	str	r3, [sp, #8]
    7bc2:	e784      	b.n	7ace <__aeabi_dmul+0x4a>
    7bc4:	4653      	mov	r3, sl
    7bc6:	4323      	orrs	r3, r4
    7bc8:	d12a      	bne.n	7c20 <__aeabi_dmul+0x19c>
    7bca:	2400      	movs	r4, #0
    7bcc:	2002      	movs	r0, #2
    7bce:	e796      	b.n	7afe <__aeabi_dmul+0x7a>
    7bd0:	4653      	mov	r3, sl
    7bd2:	4323      	orrs	r3, r4
    7bd4:	d020      	beq.n	7c18 <__aeabi_dmul+0x194>
    7bd6:	2c00      	cmp	r4, #0
    7bd8:	d100      	bne.n	7bdc <__aeabi_dmul+0x158>
    7bda:	e157      	b.n	7e8c <__aeabi_dmul+0x408>
    7bdc:	0020      	movs	r0, r4
    7bde:	f000 fe91 	bl	8904 <__clzsi2>
    7be2:	0003      	movs	r3, r0
    7be4:	3b0b      	subs	r3, #11
    7be6:	2b1c      	cmp	r3, #28
    7be8:	dd00      	ble.n	7bec <__aeabi_dmul+0x168>
    7bea:	e149      	b.n	7e80 <__aeabi_dmul+0x3fc>
    7bec:	211d      	movs	r1, #29
    7bee:	1acb      	subs	r3, r1, r3
    7bf0:	4651      	mov	r1, sl
    7bf2:	0002      	movs	r2, r0
    7bf4:	40d9      	lsrs	r1, r3
    7bf6:	4653      	mov	r3, sl
    7bf8:	3a08      	subs	r2, #8
    7bfa:	4094      	lsls	r4, r2
    7bfc:	4093      	lsls	r3, r2
    7bfe:	430c      	orrs	r4, r1
    7c00:	4a1b      	ldr	r2, [pc, #108]	; (7c70 <__aeabi_dmul+0x1ec>)
    7c02:	1a12      	subs	r2, r2, r0
    7c04:	2000      	movs	r0, #0
    7c06:	e77a      	b.n	7afe <__aeabi_dmul+0x7a>
    7c08:	2501      	movs	r5, #1
    7c0a:	9b01      	ldr	r3, [sp, #4]
    7c0c:	4c14      	ldr	r4, [pc, #80]	; (7c60 <__aeabi_dmul+0x1dc>)
    7c0e:	401d      	ands	r5, r3
    7c10:	2300      	movs	r3, #0
    7c12:	2200      	movs	r2, #0
    7c14:	4699      	mov	r9, r3
    7c16:	e79c      	b.n	7b52 <__aeabi_dmul+0xce>
    7c18:	2400      	movs	r4, #0
    7c1a:	2200      	movs	r2, #0
    7c1c:	2001      	movs	r0, #1
    7c1e:	e76e      	b.n	7afe <__aeabi_dmul+0x7a>
    7c20:	4653      	mov	r3, sl
    7c22:	2003      	movs	r0, #3
    7c24:	e76b      	b.n	7afe <__aeabi_dmul+0x7a>
    7c26:	2300      	movs	r3, #0
    7c28:	469b      	mov	fp, r3
    7c2a:	3301      	adds	r3, #1
    7c2c:	2704      	movs	r7, #4
    7c2e:	2600      	movs	r6, #0
    7c30:	9302      	str	r3, [sp, #8]
    7c32:	e74c      	b.n	7ace <__aeabi_dmul+0x4a>
    7c34:	2303      	movs	r3, #3
    7c36:	4681      	mov	r9, r0
    7c38:	270c      	movs	r7, #12
    7c3a:	9302      	str	r3, [sp, #8]
    7c3c:	e747      	b.n	7ace <__aeabi_dmul+0x4a>
    7c3e:	2280      	movs	r2, #128	; 0x80
    7c40:	2300      	movs	r3, #0
    7c42:	2500      	movs	r5, #0
    7c44:	0312      	lsls	r2, r2, #12
    7c46:	4699      	mov	r9, r3
    7c48:	4c05      	ldr	r4, [pc, #20]	; (7c60 <__aeabi_dmul+0x1dc>)
    7c4a:	e782      	b.n	7b52 <__aeabi_dmul+0xce>
    7c4c:	465c      	mov	r4, fp
    7c4e:	464b      	mov	r3, r9
    7c50:	9802      	ldr	r0, [sp, #8]
    7c52:	e76f      	b.n	7b34 <__aeabi_dmul+0xb0>
    7c54:	465c      	mov	r4, fp
    7c56:	464b      	mov	r3, r9
    7c58:	9501      	str	r5, [sp, #4]
    7c5a:	9802      	ldr	r0, [sp, #8]
    7c5c:	e76a      	b.n	7b34 <__aeabi_dmul+0xb0>
    7c5e:	46c0      	nop			; (mov r8, r8)
    7c60:	000007ff 	.word	0x000007ff
    7c64:	fffffc01 	.word	0xfffffc01
    7c68:	00008df8 	.word	0x00008df8
    7c6c:	800fffff 	.word	0x800fffff
    7c70:	fffffc0d 	.word	0xfffffc0d
    7c74:	464a      	mov	r2, r9
    7c76:	4649      	mov	r1, r9
    7c78:	0c17      	lsrs	r7, r2, #16
    7c7a:	0c1a      	lsrs	r2, r3, #16
    7c7c:	041b      	lsls	r3, r3, #16
    7c7e:	0c1b      	lsrs	r3, r3, #16
    7c80:	0408      	lsls	r0, r1, #16
    7c82:	0019      	movs	r1, r3
    7c84:	0c00      	lsrs	r0, r0, #16
    7c86:	4341      	muls	r1, r0
    7c88:	0015      	movs	r5, r2
    7c8a:	4688      	mov	r8, r1
    7c8c:	0019      	movs	r1, r3
    7c8e:	437d      	muls	r5, r7
    7c90:	4379      	muls	r1, r7
    7c92:	9503      	str	r5, [sp, #12]
    7c94:	4689      	mov	r9, r1
    7c96:	0029      	movs	r1, r5
    7c98:	0015      	movs	r5, r2
    7c9a:	4345      	muls	r5, r0
    7c9c:	444d      	add	r5, r9
    7c9e:	9502      	str	r5, [sp, #8]
    7ca0:	4645      	mov	r5, r8
    7ca2:	0c2d      	lsrs	r5, r5, #16
    7ca4:	46aa      	mov	sl, r5
    7ca6:	9d02      	ldr	r5, [sp, #8]
    7ca8:	4455      	add	r5, sl
    7caa:	45a9      	cmp	r9, r5
    7cac:	d906      	bls.n	7cbc <__aeabi_dmul+0x238>
    7cae:	468a      	mov	sl, r1
    7cb0:	2180      	movs	r1, #128	; 0x80
    7cb2:	0249      	lsls	r1, r1, #9
    7cb4:	4689      	mov	r9, r1
    7cb6:	44ca      	add	sl, r9
    7cb8:	4651      	mov	r1, sl
    7cba:	9103      	str	r1, [sp, #12]
    7cbc:	0c29      	lsrs	r1, r5, #16
    7cbe:	9104      	str	r1, [sp, #16]
    7cc0:	4641      	mov	r1, r8
    7cc2:	0409      	lsls	r1, r1, #16
    7cc4:	042d      	lsls	r5, r5, #16
    7cc6:	0c09      	lsrs	r1, r1, #16
    7cc8:	4688      	mov	r8, r1
    7cca:	0029      	movs	r1, r5
    7ccc:	0c25      	lsrs	r5, r4, #16
    7cce:	0424      	lsls	r4, r4, #16
    7cd0:	4441      	add	r1, r8
    7cd2:	0c24      	lsrs	r4, r4, #16
    7cd4:	9105      	str	r1, [sp, #20]
    7cd6:	0021      	movs	r1, r4
    7cd8:	4341      	muls	r1, r0
    7cda:	4688      	mov	r8, r1
    7cdc:	0021      	movs	r1, r4
    7cde:	4379      	muls	r1, r7
    7ce0:	468a      	mov	sl, r1
    7ce2:	4368      	muls	r0, r5
    7ce4:	4641      	mov	r1, r8
    7ce6:	4450      	add	r0, sl
    7ce8:	4681      	mov	r9, r0
    7cea:	0c08      	lsrs	r0, r1, #16
    7cec:	4448      	add	r0, r9
    7cee:	436f      	muls	r7, r5
    7cf0:	4582      	cmp	sl, r0
    7cf2:	d903      	bls.n	7cfc <__aeabi_dmul+0x278>
    7cf4:	2180      	movs	r1, #128	; 0x80
    7cf6:	0249      	lsls	r1, r1, #9
    7cf8:	4689      	mov	r9, r1
    7cfa:	444f      	add	r7, r9
    7cfc:	0c01      	lsrs	r1, r0, #16
    7cfe:	4689      	mov	r9, r1
    7d00:	0039      	movs	r1, r7
    7d02:	4449      	add	r1, r9
    7d04:	9102      	str	r1, [sp, #8]
    7d06:	4641      	mov	r1, r8
    7d08:	040f      	lsls	r7, r1, #16
    7d0a:	9904      	ldr	r1, [sp, #16]
    7d0c:	0c3f      	lsrs	r7, r7, #16
    7d0e:	4688      	mov	r8, r1
    7d10:	0400      	lsls	r0, r0, #16
    7d12:	19c0      	adds	r0, r0, r7
    7d14:	4480      	add	r8, r0
    7d16:	4641      	mov	r1, r8
    7d18:	9104      	str	r1, [sp, #16]
    7d1a:	4659      	mov	r1, fp
    7d1c:	0c0f      	lsrs	r7, r1, #16
    7d1e:	0409      	lsls	r1, r1, #16
    7d20:	0c09      	lsrs	r1, r1, #16
    7d22:	4688      	mov	r8, r1
    7d24:	4359      	muls	r1, r3
    7d26:	468a      	mov	sl, r1
    7d28:	0039      	movs	r1, r7
    7d2a:	4351      	muls	r1, r2
    7d2c:	4689      	mov	r9, r1
    7d2e:	4641      	mov	r1, r8
    7d30:	434a      	muls	r2, r1
    7d32:	4651      	mov	r1, sl
    7d34:	0c09      	lsrs	r1, r1, #16
    7d36:	468b      	mov	fp, r1
    7d38:	437b      	muls	r3, r7
    7d3a:	18d2      	adds	r2, r2, r3
    7d3c:	445a      	add	r2, fp
    7d3e:	4293      	cmp	r3, r2
    7d40:	d903      	bls.n	7d4a <__aeabi_dmul+0x2c6>
    7d42:	2380      	movs	r3, #128	; 0x80
    7d44:	025b      	lsls	r3, r3, #9
    7d46:	469b      	mov	fp, r3
    7d48:	44d9      	add	r9, fp
    7d4a:	4651      	mov	r1, sl
    7d4c:	0409      	lsls	r1, r1, #16
    7d4e:	0c09      	lsrs	r1, r1, #16
    7d50:	468a      	mov	sl, r1
    7d52:	4641      	mov	r1, r8
    7d54:	4361      	muls	r1, r4
    7d56:	437c      	muls	r4, r7
    7d58:	0c13      	lsrs	r3, r2, #16
    7d5a:	0412      	lsls	r2, r2, #16
    7d5c:	444b      	add	r3, r9
    7d5e:	4452      	add	r2, sl
    7d60:	46a1      	mov	r9, r4
    7d62:	468a      	mov	sl, r1
    7d64:	003c      	movs	r4, r7
    7d66:	4641      	mov	r1, r8
    7d68:	436c      	muls	r4, r5
    7d6a:	434d      	muls	r5, r1
    7d6c:	4651      	mov	r1, sl
    7d6e:	444d      	add	r5, r9
    7d70:	0c0f      	lsrs	r7, r1, #16
    7d72:	197d      	adds	r5, r7, r5
    7d74:	45a9      	cmp	r9, r5
    7d76:	d903      	bls.n	7d80 <__aeabi_dmul+0x2fc>
    7d78:	2180      	movs	r1, #128	; 0x80
    7d7a:	0249      	lsls	r1, r1, #9
    7d7c:	4688      	mov	r8, r1
    7d7e:	4444      	add	r4, r8
    7d80:	9f04      	ldr	r7, [sp, #16]
    7d82:	9903      	ldr	r1, [sp, #12]
    7d84:	46b8      	mov	r8, r7
    7d86:	4441      	add	r1, r8
    7d88:	468b      	mov	fp, r1
    7d8a:	4583      	cmp	fp, r0
    7d8c:	4180      	sbcs	r0, r0
    7d8e:	4241      	negs	r1, r0
    7d90:	4688      	mov	r8, r1
    7d92:	4651      	mov	r1, sl
    7d94:	0408      	lsls	r0, r1, #16
    7d96:	042f      	lsls	r7, r5, #16
    7d98:	0c00      	lsrs	r0, r0, #16
    7d9a:	183f      	adds	r7, r7, r0
    7d9c:	4658      	mov	r0, fp
    7d9e:	9902      	ldr	r1, [sp, #8]
    7da0:	1810      	adds	r0, r2, r0
    7da2:	4689      	mov	r9, r1
    7da4:	4290      	cmp	r0, r2
    7da6:	4192      	sbcs	r2, r2
    7da8:	444f      	add	r7, r9
    7daa:	46ba      	mov	sl, r7
    7dac:	4252      	negs	r2, r2
    7dae:	4699      	mov	r9, r3
    7db0:	4693      	mov	fp, r2
    7db2:	44c2      	add	sl, r8
    7db4:	44d1      	add	r9, sl
    7db6:	44cb      	add	fp, r9
    7db8:	428f      	cmp	r7, r1
    7dba:	41bf      	sbcs	r7, r7
    7dbc:	45c2      	cmp	sl, r8
    7dbe:	4189      	sbcs	r1, r1
    7dc0:	4599      	cmp	r9, r3
    7dc2:	419b      	sbcs	r3, r3
    7dc4:	4593      	cmp	fp, r2
    7dc6:	4192      	sbcs	r2, r2
    7dc8:	427f      	negs	r7, r7
    7dca:	4249      	negs	r1, r1
    7dcc:	0c2d      	lsrs	r5, r5, #16
    7dce:	4252      	negs	r2, r2
    7dd0:	430f      	orrs	r7, r1
    7dd2:	425b      	negs	r3, r3
    7dd4:	4313      	orrs	r3, r2
    7dd6:	197f      	adds	r7, r7, r5
    7dd8:	18ff      	adds	r7, r7, r3
    7dda:	465b      	mov	r3, fp
    7ddc:	193c      	adds	r4, r7, r4
    7dde:	0ddb      	lsrs	r3, r3, #23
    7de0:	9a05      	ldr	r2, [sp, #20]
    7de2:	0264      	lsls	r4, r4, #9
    7de4:	431c      	orrs	r4, r3
    7de6:	0243      	lsls	r3, r0, #9
    7de8:	4313      	orrs	r3, r2
    7dea:	1e5d      	subs	r5, r3, #1
    7dec:	41ab      	sbcs	r3, r5
    7dee:	465a      	mov	r2, fp
    7df0:	0dc0      	lsrs	r0, r0, #23
    7df2:	4303      	orrs	r3, r0
    7df4:	0252      	lsls	r2, r2, #9
    7df6:	4313      	orrs	r3, r2
    7df8:	01e2      	lsls	r2, r4, #7
    7dfa:	d556      	bpl.n	7eaa <__aeabi_dmul+0x426>
    7dfc:	2001      	movs	r0, #1
    7dfe:	085a      	lsrs	r2, r3, #1
    7e00:	4003      	ands	r3, r0
    7e02:	4313      	orrs	r3, r2
    7e04:	07e2      	lsls	r2, r4, #31
    7e06:	4313      	orrs	r3, r2
    7e08:	0864      	lsrs	r4, r4, #1
    7e0a:	485a      	ldr	r0, [pc, #360]	; (7f74 <__aeabi_dmul+0x4f0>)
    7e0c:	4460      	add	r0, ip
    7e0e:	2800      	cmp	r0, #0
    7e10:	dd4d      	ble.n	7eae <__aeabi_dmul+0x42a>
    7e12:	075a      	lsls	r2, r3, #29
    7e14:	d009      	beq.n	7e2a <__aeabi_dmul+0x3a6>
    7e16:	220f      	movs	r2, #15
    7e18:	401a      	ands	r2, r3
    7e1a:	2a04      	cmp	r2, #4
    7e1c:	d005      	beq.n	7e2a <__aeabi_dmul+0x3a6>
    7e1e:	1d1a      	adds	r2, r3, #4
    7e20:	429a      	cmp	r2, r3
    7e22:	419b      	sbcs	r3, r3
    7e24:	425b      	negs	r3, r3
    7e26:	18e4      	adds	r4, r4, r3
    7e28:	0013      	movs	r3, r2
    7e2a:	01e2      	lsls	r2, r4, #7
    7e2c:	d504      	bpl.n	7e38 <__aeabi_dmul+0x3b4>
    7e2e:	2080      	movs	r0, #128	; 0x80
    7e30:	4a51      	ldr	r2, [pc, #324]	; (7f78 <__aeabi_dmul+0x4f4>)
    7e32:	00c0      	lsls	r0, r0, #3
    7e34:	4014      	ands	r4, r2
    7e36:	4460      	add	r0, ip
    7e38:	4a50      	ldr	r2, [pc, #320]	; (7f7c <__aeabi_dmul+0x4f8>)
    7e3a:	4290      	cmp	r0, r2
    7e3c:	dd00      	ble.n	7e40 <__aeabi_dmul+0x3bc>
    7e3e:	e6e3      	b.n	7c08 <__aeabi_dmul+0x184>
    7e40:	2501      	movs	r5, #1
    7e42:	08db      	lsrs	r3, r3, #3
    7e44:	0762      	lsls	r2, r4, #29
    7e46:	431a      	orrs	r2, r3
    7e48:	0264      	lsls	r4, r4, #9
    7e4a:	9b01      	ldr	r3, [sp, #4]
    7e4c:	4691      	mov	r9, r2
    7e4e:	0b22      	lsrs	r2, r4, #12
    7e50:	0544      	lsls	r4, r0, #21
    7e52:	0d64      	lsrs	r4, r4, #21
    7e54:	401d      	ands	r5, r3
    7e56:	e67c      	b.n	7b52 <__aeabi_dmul+0xce>
    7e58:	2280      	movs	r2, #128	; 0x80
    7e5a:	4659      	mov	r1, fp
    7e5c:	0312      	lsls	r2, r2, #12
    7e5e:	4211      	tst	r1, r2
    7e60:	d008      	beq.n	7e74 <__aeabi_dmul+0x3f0>
    7e62:	4214      	tst	r4, r2
    7e64:	d106      	bne.n	7e74 <__aeabi_dmul+0x3f0>
    7e66:	4322      	orrs	r2, r4
    7e68:	0312      	lsls	r2, r2, #12
    7e6a:	0b12      	lsrs	r2, r2, #12
    7e6c:	4645      	mov	r5, r8
    7e6e:	4699      	mov	r9, r3
    7e70:	4c43      	ldr	r4, [pc, #268]	; (7f80 <__aeabi_dmul+0x4fc>)
    7e72:	e66e      	b.n	7b52 <__aeabi_dmul+0xce>
    7e74:	465b      	mov	r3, fp
    7e76:	431a      	orrs	r2, r3
    7e78:	0312      	lsls	r2, r2, #12
    7e7a:	0b12      	lsrs	r2, r2, #12
    7e7c:	4c40      	ldr	r4, [pc, #256]	; (7f80 <__aeabi_dmul+0x4fc>)
    7e7e:	e668      	b.n	7b52 <__aeabi_dmul+0xce>
    7e80:	0003      	movs	r3, r0
    7e82:	4654      	mov	r4, sl
    7e84:	3b28      	subs	r3, #40	; 0x28
    7e86:	409c      	lsls	r4, r3
    7e88:	2300      	movs	r3, #0
    7e8a:	e6b9      	b.n	7c00 <__aeabi_dmul+0x17c>
    7e8c:	f000 fd3a 	bl	8904 <__clzsi2>
    7e90:	3020      	adds	r0, #32
    7e92:	e6a6      	b.n	7be2 <__aeabi_dmul+0x15e>
    7e94:	0003      	movs	r3, r0
    7e96:	3b28      	subs	r3, #40	; 0x28
    7e98:	409f      	lsls	r7, r3
    7e9a:	2300      	movs	r3, #0
    7e9c:	46bb      	mov	fp, r7
    7e9e:	4699      	mov	r9, r3
    7ea0:	e68a      	b.n	7bb8 <__aeabi_dmul+0x134>
    7ea2:	f000 fd2f 	bl	8904 <__clzsi2>
    7ea6:	3020      	adds	r0, #32
    7ea8:	e674      	b.n	7b94 <__aeabi_dmul+0x110>
    7eaa:	46b4      	mov	ip, r6
    7eac:	e7ad      	b.n	7e0a <__aeabi_dmul+0x386>
    7eae:	2501      	movs	r5, #1
    7eb0:	1a2a      	subs	r2, r5, r0
    7eb2:	2a38      	cmp	r2, #56	; 0x38
    7eb4:	dd06      	ble.n	7ec4 <__aeabi_dmul+0x440>
    7eb6:	9b01      	ldr	r3, [sp, #4]
    7eb8:	2400      	movs	r4, #0
    7eba:	401d      	ands	r5, r3
    7ebc:	2300      	movs	r3, #0
    7ebe:	2200      	movs	r2, #0
    7ec0:	4699      	mov	r9, r3
    7ec2:	e646      	b.n	7b52 <__aeabi_dmul+0xce>
    7ec4:	2a1f      	cmp	r2, #31
    7ec6:	dc21      	bgt.n	7f0c <__aeabi_dmul+0x488>
    7ec8:	2520      	movs	r5, #32
    7eca:	0020      	movs	r0, r4
    7ecc:	1aad      	subs	r5, r5, r2
    7ece:	001e      	movs	r6, r3
    7ed0:	40ab      	lsls	r3, r5
    7ed2:	40a8      	lsls	r0, r5
    7ed4:	40d6      	lsrs	r6, r2
    7ed6:	1e5d      	subs	r5, r3, #1
    7ed8:	41ab      	sbcs	r3, r5
    7eda:	4330      	orrs	r0, r6
    7edc:	4318      	orrs	r0, r3
    7ede:	40d4      	lsrs	r4, r2
    7ee0:	0743      	lsls	r3, r0, #29
    7ee2:	d009      	beq.n	7ef8 <__aeabi_dmul+0x474>
    7ee4:	230f      	movs	r3, #15
    7ee6:	4003      	ands	r3, r0
    7ee8:	2b04      	cmp	r3, #4
    7eea:	d005      	beq.n	7ef8 <__aeabi_dmul+0x474>
    7eec:	0003      	movs	r3, r0
    7eee:	1d18      	adds	r0, r3, #4
    7ef0:	4298      	cmp	r0, r3
    7ef2:	419b      	sbcs	r3, r3
    7ef4:	425b      	negs	r3, r3
    7ef6:	18e4      	adds	r4, r4, r3
    7ef8:	0223      	lsls	r3, r4, #8
    7efa:	d521      	bpl.n	7f40 <__aeabi_dmul+0x4bc>
    7efc:	2501      	movs	r5, #1
    7efe:	9b01      	ldr	r3, [sp, #4]
    7f00:	2401      	movs	r4, #1
    7f02:	401d      	ands	r5, r3
    7f04:	2300      	movs	r3, #0
    7f06:	2200      	movs	r2, #0
    7f08:	4699      	mov	r9, r3
    7f0a:	e622      	b.n	7b52 <__aeabi_dmul+0xce>
    7f0c:	251f      	movs	r5, #31
    7f0e:	0021      	movs	r1, r4
    7f10:	426d      	negs	r5, r5
    7f12:	1a28      	subs	r0, r5, r0
    7f14:	40c1      	lsrs	r1, r0
    7f16:	0008      	movs	r0, r1
    7f18:	2a20      	cmp	r2, #32
    7f1a:	d01d      	beq.n	7f58 <__aeabi_dmul+0x4d4>
    7f1c:	355f      	adds	r5, #95	; 0x5f
    7f1e:	1aaa      	subs	r2, r5, r2
    7f20:	4094      	lsls	r4, r2
    7f22:	4323      	orrs	r3, r4
    7f24:	1e5c      	subs	r4, r3, #1
    7f26:	41a3      	sbcs	r3, r4
    7f28:	2507      	movs	r5, #7
    7f2a:	4303      	orrs	r3, r0
    7f2c:	401d      	ands	r5, r3
    7f2e:	2200      	movs	r2, #0
    7f30:	2d00      	cmp	r5, #0
    7f32:	d009      	beq.n	7f48 <__aeabi_dmul+0x4c4>
    7f34:	220f      	movs	r2, #15
    7f36:	2400      	movs	r4, #0
    7f38:	401a      	ands	r2, r3
    7f3a:	0018      	movs	r0, r3
    7f3c:	2a04      	cmp	r2, #4
    7f3e:	d1d6      	bne.n	7eee <__aeabi_dmul+0x46a>
    7f40:	0003      	movs	r3, r0
    7f42:	0765      	lsls	r5, r4, #29
    7f44:	0264      	lsls	r4, r4, #9
    7f46:	0b22      	lsrs	r2, r4, #12
    7f48:	08db      	lsrs	r3, r3, #3
    7f4a:	432b      	orrs	r3, r5
    7f4c:	2501      	movs	r5, #1
    7f4e:	4699      	mov	r9, r3
    7f50:	9b01      	ldr	r3, [sp, #4]
    7f52:	2400      	movs	r4, #0
    7f54:	401d      	ands	r5, r3
    7f56:	e5fc      	b.n	7b52 <__aeabi_dmul+0xce>
    7f58:	2400      	movs	r4, #0
    7f5a:	e7e2      	b.n	7f22 <__aeabi_dmul+0x49e>
    7f5c:	2280      	movs	r2, #128	; 0x80
    7f5e:	2501      	movs	r5, #1
    7f60:	0312      	lsls	r2, r2, #12
    7f62:	4322      	orrs	r2, r4
    7f64:	9901      	ldr	r1, [sp, #4]
    7f66:	0312      	lsls	r2, r2, #12
    7f68:	0b12      	lsrs	r2, r2, #12
    7f6a:	400d      	ands	r5, r1
    7f6c:	4699      	mov	r9, r3
    7f6e:	4c04      	ldr	r4, [pc, #16]	; (7f80 <__aeabi_dmul+0x4fc>)
    7f70:	e5ef      	b.n	7b52 <__aeabi_dmul+0xce>
    7f72:	46c0      	nop			; (mov r8, r8)
    7f74:	000003ff 	.word	0x000003ff
    7f78:	feffffff 	.word	0xfeffffff
    7f7c:	000007fe 	.word	0x000007fe
    7f80:	000007ff 	.word	0x000007ff

00007f84 <__aeabi_dsub>:
    7f84:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f86:	4646      	mov	r6, r8
    7f88:	46d6      	mov	lr, sl
    7f8a:	464f      	mov	r7, r9
    7f8c:	030c      	lsls	r4, r1, #12
    7f8e:	b5c0      	push	{r6, r7, lr}
    7f90:	0fcd      	lsrs	r5, r1, #31
    7f92:	004e      	lsls	r6, r1, #1
    7f94:	0a61      	lsrs	r1, r4, #9
    7f96:	0f44      	lsrs	r4, r0, #29
    7f98:	430c      	orrs	r4, r1
    7f9a:	00c1      	lsls	r1, r0, #3
    7f9c:	0058      	lsls	r0, r3, #1
    7f9e:	0d40      	lsrs	r0, r0, #21
    7fa0:	4684      	mov	ip, r0
    7fa2:	468a      	mov	sl, r1
    7fa4:	000f      	movs	r7, r1
    7fa6:	0319      	lsls	r1, r3, #12
    7fa8:	0f50      	lsrs	r0, r2, #29
    7faa:	0a49      	lsrs	r1, r1, #9
    7fac:	4301      	orrs	r1, r0
    7fae:	48c6      	ldr	r0, [pc, #792]	; (82c8 <__aeabi_dsub+0x344>)
    7fb0:	0d76      	lsrs	r6, r6, #21
    7fb2:	46a8      	mov	r8, r5
    7fb4:	0fdb      	lsrs	r3, r3, #31
    7fb6:	00d2      	lsls	r2, r2, #3
    7fb8:	4584      	cmp	ip, r0
    7fba:	d100      	bne.n	7fbe <__aeabi_dsub+0x3a>
    7fbc:	e0d8      	b.n	8170 <__aeabi_dsub+0x1ec>
    7fbe:	2001      	movs	r0, #1
    7fc0:	4043      	eors	r3, r0
    7fc2:	42ab      	cmp	r3, r5
    7fc4:	d100      	bne.n	7fc8 <__aeabi_dsub+0x44>
    7fc6:	e0a6      	b.n	8116 <__aeabi_dsub+0x192>
    7fc8:	4660      	mov	r0, ip
    7fca:	1a35      	subs	r5, r6, r0
    7fcc:	2d00      	cmp	r5, #0
    7fce:	dc00      	bgt.n	7fd2 <__aeabi_dsub+0x4e>
    7fd0:	e105      	b.n	81de <__aeabi_dsub+0x25a>
    7fd2:	2800      	cmp	r0, #0
    7fd4:	d110      	bne.n	7ff8 <__aeabi_dsub+0x74>
    7fd6:	000b      	movs	r3, r1
    7fd8:	4313      	orrs	r3, r2
    7fda:	d100      	bne.n	7fde <__aeabi_dsub+0x5a>
    7fdc:	e0d7      	b.n	818e <__aeabi_dsub+0x20a>
    7fde:	1e6b      	subs	r3, r5, #1
    7fe0:	2b00      	cmp	r3, #0
    7fe2:	d000      	beq.n	7fe6 <__aeabi_dsub+0x62>
    7fe4:	e14b      	b.n	827e <__aeabi_dsub+0x2fa>
    7fe6:	4653      	mov	r3, sl
    7fe8:	1a9f      	subs	r7, r3, r2
    7fea:	45ba      	cmp	sl, r7
    7fec:	4180      	sbcs	r0, r0
    7fee:	1a64      	subs	r4, r4, r1
    7ff0:	4240      	negs	r0, r0
    7ff2:	1a24      	subs	r4, r4, r0
    7ff4:	2601      	movs	r6, #1
    7ff6:	e01e      	b.n	8036 <__aeabi_dsub+0xb2>
    7ff8:	4bb3      	ldr	r3, [pc, #716]	; (82c8 <__aeabi_dsub+0x344>)
    7ffa:	429e      	cmp	r6, r3
    7ffc:	d048      	beq.n	8090 <__aeabi_dsub+0x10c>
    7ffe:	2380      	movs	r3, #128	; 0x80
    8000:	041b      	lsls	r3, r3, #16
    8002:	4319      	orrs	r1, r3
    8004:	2d38      	cmp	r5, #56	; 0x38
    8006:	dd00      	ble.n	800a <__aeabi_dsub+0x86>
    8008:	e119      	b.n	823e <__aeabi_dsub+0x2ba>
    800a:	2d1f      	cmp	r5, #31
    800c:	dd00      	ble.n	8010 <__aeabi_dsub+0x8c>
    800e:	e14c      	b.n	82aa <__aeabi_dsub+0x326>
    8010:	2320      	movs	r3, #32
    8012:	000f      	movs	r7, r1
    8014:	1b5b      	subs	r3, r3, r5
    8016:	0010      	movs	r0, r2
    8018:	409a      	lsls	r2, r3
    801a:	409f      	lsls	r7, r3
    801c:	40e8      	lsrs	r0, r5
    801e:	1e53      	subs	r3, r2, #1
    8020:	419a      	sbcs	r2, r3
    8022:	40e9      	lsrs	r1, r5
    8024:	4307      	orrs	r7, r0
    8026:	4317      	orrs	r7, r2
    8028:	4653      	mov	r3, sl
    802a:	1bdf      	subs	r7, r3, r7
    802c:	1a61      	subs	r1, r4, r1
    802e:	45ba      	cmp	sl, r7
    8030:	41a4      	sbcs	r4, r4
    8032:	4264      	negs	r4, r4
    8034:	1b0c      	subs	r4, r1, r4
    8036:	0223      	lsls	r3, r4, #8
    8038:	d400      	bmi.n	803c <__aeabi_dsub+0xb8>
    803a:	e0c5      	b.n	81c8 <__aeabi_dsub+0x244>
    803c:	0264      	lsls	r4, r4, #9
    803e:	0a65      	lsrs	r5, r4, #9
    8040:	2d00      	cmp	r5, #0
    8042:	d100      	bne.n	8046 <__aeabi_dsub+0xc2>
    8044:	e0f6      	b.n	8234 <__aeabi_dsub+0x2b0>
    8046:	0028      	movs	r0, r5
    8048:	f000 fc5c 	bl	8904 <__clzsi2>
    804c:	0003      	movs	r3, r0
    804e:	3b08      	subs	r3, #8
    8050:	2b1f      	cmp	r3, #31
    8052:	dd00      	ble.n	8056 <__aeabi_dsub+0xd2>
    8054:	e0e9      	b.n	822a <__aeabi_dsub+0x2a6>
    8056:	2220      	movs	r2, #32
    8058:	003c      	movs	r4, r7
    805a:	1ad2      	subs	r2, r2, r3
    805c:	409d      	lsls	r5, r3
    805e:	40d4      	lsrs	r4, r2
    8060:	409f      	lsls	r7, r3
    8062:	4325      	orrs	r5, r4
    8064:	429e      	cmp	r6, r3
    8066:	dd00      	ble.n	806a <__aeabi_dsub+0xe6>
    8068:	e0db      	b.n	8222 <__aeabi_dsub+0x29e>
    806a:	1b9e      	subs	r6, r3, r6
    806c:	1c73      	adds	r3, r6, #1
    806e:	2b1f      	cmp	r3, #31
    8070:	dd00      	ble.n	8074 <__aeabi_dsub+0xf0>
    8072:	e10a      	b.n	828a <__aeabi_dsub+0x306>
    8074:	2220      	movs	r2, #32
    8076:	0038      	movs	r0, r7
    8078:	1ad2      	subs	r2, r2, r3
    807a:	0029      	movs	r1, r5
    807c:	4097      	lsls	r7, r2
    807e:	002c      	movs	r4, r5
    8080:	4091      	lsls	r1, r2
    8082:	40d8      	lsrs	r0, r3
    8084:	1e7a      	subs	r2, r7, #1
    8086:	4197      	sbcs	r7, r2
    8088:	40dc      	lsrs	r4, r3
    808a:	2600      	movs	r6, #0
    808c:	4301      	orrs	r1, r0
    808e:	430f      	orrs	r7, r1
    8090:	077b      	lsls	r3, r7, #29
    8092:	d009      	beq.n	80a8 <__aeabi_dsub+0x124>
    8094:	230f      	movs	r3, #15
    8096:	403b      	ands	r3, r7
    8098:	2b04      	cmp	r3, #4
    809a:	d005      	beq.n	80a8 <__aeabi_dsub+0x124>
    809c:	1d3b      	adds	r3, r7, #4
    809e:	42bb      	cmp	r3, r7
    80a0:	41bf      	sbcs	r7, r7
    80a2:	427f      	negs	r7, r7
    80a4:	19e4      	adds	r4, r4, r7
    80a6:	001f      	movs	r7, r3
    80a8:	0223      	lsls	r3, r4, #8
    80aa:	d525      	bpl.n	80f8 <__aeabi_dsub+0x174>
    80ac:	4b86      	ldr	r3, [pc, #536]	; (82c8 <__aeabi_dsub+0x344>)
    80ae:	3601      	adds	r6, #1
    80b0:	429e      	cmp	r6, r3
    80b2:	d100      	bne.n	80b6 <__aeabi_dsub+0x132>
    80b4:	e0af      	b.n	8216 <__aeabi_dsub+0x292>
    80b6:	4b85      	ldr	r3, [pc, #532]	; (82cc <__aeabi_dsub+0x348>)
    80b8:	2501      	movs	r5, #1
    80ba:	401c      	ands	r4, r3
    80bc:	4643      	mov	r3, r8
    80be:	0762      	lsls	r2, r4, #29
    80c0:	08ff      	lsrs	r7, r7, #3
    80c2:	0264      	lsls	r4, r4, #9
    80c4:	0576      	lsls	r6, r6, #21
    80c6:	4317      	orrs	r7, r2
    80c8:	0b24      	lsrs	r4, r4, #12
    80ca:	0d76      	lsrs	r6, r6, #21
    80cc:	401d      	ands	r5, r3
    80ce:	2100      	movs	r1, #0
    80d0:	0324      	lsls	r4, r4, #12
    80d2:	0b23      	lsrs	r3, r4, #12
    80d4:	0d0c      	lsrs	r4, r1, #20
    80d6:	4a7e      	ldr	r2, [pc, #504]	; (82d0 <__aeabi_dsub+0x34c>)
    80d8:	0524      	lsls	r4, r4, #20
    80da:	431c      	orrs	r4, r3
    80dc:	4014      	ands	r4, r2
    80de:	0533      	lsls	r3, r6, #20
    80e0:	4323      	orrs	r3, r4
    80e2:	005b      	lsls	r3, r3, #1
    80e4:	07ed      	lsls	r5, r5, #31
    80e6:	085b      	lsrs	r3, r3, #1
    80e8:	432b      	orrs	r3, r5
    80ea:	0038      	movs	r0, r7
    80ec:	0019      	movs	r1, r3
    80ee:	bc1c      	pop	{r2, r3, r4}
    80f0:	4690      	mov	r8, r2
    80f2:	4699      	mov	r9, r3
    80f4:	46a2      	mov	sl, r4
    80f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80f8:	2501      	movs	r5, #1
    80fa:	4643      	mov	r3, r8
    80fc:	0762      	lsls	r2, r4, #29
    80fe:	08ff      	lsrs	r7, r7, #3
    8100:	4317      	orrs	r7, r2
    8102:	08e4      	lsrs	r4, r4, #3
    8104:	401d      	ands	r5, r3
    8106:	4b70      	ldr	r3, [pc, #448]	; (82c8 <__aeabi_dsub+0x344>)
    8108:	429e      	cmp	r6, r3
    810a:	d036      	beq.n	817a <__aeabi_dsub+0x1f6>
    810c:	0324      	lsls	r4, r4, #12
    810e:	0576      	lsls	r6, r6, #21
    8110:	0b24      	lsrs	r4, r4, #12
    8112:	0d76      	lsrs	r6, r6, #21
    8114:	e7db      	b.n	80ce <__aeabi_dsub+0x14a>
    8116:	4663      	mov	r3, ip
    8118:	1af3      	subs	r3, r6, r3
    811a:	2b00      	cmp	r3, #0
    811c:	dc00      	bgt.n	8120 <__aeabi_dsub+0x19c>
    811e:	e094      	b.n	824a <__aeabi_dsub+0x2c6>
    8120:	4660      	mov	r0, ip
    8122:	2800      	cmp	r0, #0
    8124:	d035      	beq.n	8192 <__aeabi_dsub+0x20e>
    8126:	4868      	ldr	r0, [pc, #416]	; (82c8 <__aeabi_dsub+0x344>)
    8128:	4286      	cmp	r6, r0
    812a:	d0b1      	beq.n	8090 <__aeabi_dsub+0x10c>
    812c:	2780      	movs	r7, #128	; 0x80
    812e:	043f      	lsls	r7, r7, #16
    8130:	4339      	orrs	r1, r7
    8132:	2b38      	cmp	r3, #56	; 0x38
    8134:	dc00      	bgt.n	8138 <__aeabi_dsub+0x1b4>
    8136:	e0fd      	b.n	8334 <__aeabi_dsub+0x3b0>
    8138:	430a      	orrs	r2, r1
    813a:	0017      	movs	r7, r2
    813c:	2100      	movs	r1, #0
    813e:	1e7a      	subs	r2, r7, #1
    8140:	4197      	sbcs	r7, r2
    8142:	4457      	add	r7, sl
    8144:	4557      	cmp	r7, sl
    8146:	4180      	sbcs	r0, r0
    8148:	1909      	adds	r1, r1, r4
    814a:	4244      	negs	r4, r0
    814c:	190c      	adds	r4, r1, r4
    814e:	0223      	lsls	r3, r4, #8
    8150:	d53a      	bpl.n	81c8 <__aeabi_dsub+0x244>
    8152:	4b5d      	ldr	r3, [pc, #372]	; (82c8 <__aeabi_dsub+0x344>)
    8154:	3601      	adds	r6, #1
    8156:	429e      	cmp	r6, r3
    8158:	d100      	bne.n	815c <__aeabi_dsub+0x1d8>
    815a:	e14b      	b.n	83f4 <__aeabi_dsub+0x470>
    815c:	2201      	movs	r2, #1
    815e:	4b5b      	ldr	r3, [pc, #364]	; (82cc <__aeabi_dsub+0x348>)
    8160:	401c      	ands	r4, r3
    8162:	087b      	lsrs	r3, r7, #1
    8164:	4017      	ands	r7, r2
    8166:	431f      	orrs	r7, r3
    8168:	07e2      	lsls	r2, r4, #31
    816a:	4317      	orrs	r7, r2
    816c:	0864      	lsrs	r4, r4, #1
    816e:	e78f      	b.n	8090 <__aeabi_dsub+0x10c>
    8170:	0008      	movs	r0, r1
    8172:	4310      	orrs	r0, r2
    8174:	d000      	beq.n	8178 <__aeabi_dsub+0x1f4>
    8176:	e724      	b.n	7fc2 <__aeabi_dsub+0x3e>
    8178:	e721      	b.n	7fbe <__aeabi_dsub+0x3a>
    817a:	0023      	movs	r3, r4
    817c:	433b      	orrs	r3, r7
    817e:	d100      	bne.n	8182 <__aeabi_dsub+0x1fe>
    8180:	e1b9      	b.n	84f6 <__aeabi_dsub+0x572>
    8182:	2280      	movs	r2, #128	; 0x80
    8184:	0312      	lsls	r2, r2, #12
    8186:	4314      	orrs	r4, r2
    8188:	0324      	lsls	r4, r4, #12
    818a:	0b24      	lsrs	r4, r4, #12
    818c:	e79f      	b.n	80ce <__aeabi_dsub+0x14a>
    818e:	002e      	movs	r6, r5
    8190:	e77e      	b.n	8090 <__aeabi_dsub+0x10c>
    8192:	0008      	movs	r0, r1
    8194:	4310      	orrs	r0, r2
    8196:	d100      	bne.n	819a <__aeabi_dsub+0x216>
    8198:	e0ca      	b.n	8330 <__aeabi_dsub+0x3ac>
    819a:	1e58      	subs	r0, r3, #1
    819c:	4684      	mov	ip, r0
    819e:	2800      	cmp	r0, #0
    81a0:	d000      	beq.n	81a4 <__aeabi_dsub+0x220>
    81a2:	e0e7      	b.n	8374 <__aeabi_dsub+0x3f0>
    81a4:	4452      	add	r2, sl
    81a6:	4552      	cmp	r2, sl
    81a8:	4180      	sbcs	r0, r0
    81aa:	1864      	adds	r4, r4, r1
    81ac:	4240      	negs	r0, r0
    81ae:	1824      	adds	r4, r4, r0
    81b0:	0017      	movs	r7, r2
    81b2:	2601      	movs	r6, #1
    81b4:	0223      	lsls	r3, r4, #8
    81b6:	d507      	bpl.n	81c8 <__aeabi_dsub+0x244>
    81b8:	2602      	movs	r6, #2
    81ba:	e7cf      	b.n	815c <__aeabi_dsub+0x1d8>
    81bc:	4664      	mov	r4, ip
    81be:	432c      	orrs	r4, r5
    81c0:	d100      	bne.n	81c4 <__aeabi_dsub+0x240>
    81c2:	e1b3      	b.n	852c <__aeabi_dsub+0x5a8>
    81c4:	002c      	movs	r4, r5
    81c6:	4667      	mov	r7, ip
    81c8:	077b      	lsls	r3, r7, #29
    81ca:	d000      	beq.n	81ce <__aeabi_dsub+0x24a>
    81cc:	e762      	b.n	8094 <__aeabi_dsub+0x110>
    81ce:	0763      	lsls	r3, r4, #29
    81d0:	08ff      	lsrs	r7, r7, #3
    81d2:	431f      	orrs	r7, r3
    81d4:	2501      	movs	r5, #1
    81d6:	4643      	mov	r3, r8
    81d8:	08e4      	lsrs	r4, r4, #3
    81da:	401d      	ands	r5, r3
    81dc:	e793      	b.n	8106 <__aeabi_dsub+0x182>
    81de:	2d00      	cmp	r5, #0
    81e0:	d178      	bne.n	82d4 <__aeabi_dsub+0x350>
    81e2:	1c75      	adds	r5, r6, #1
    81e4:	056d      	lsls	r5, r5, #21
    81e6:	0d6d      	lsrs	r5, r5, #21
    81e8:	2d01      	cmp	r5, #1
    81ea:	dc00      	bgt.n	81ee <__aeabi_dsub+0x26a>
    81ec:	e0f2      	b.n	83d4 <__aeabi_dsub+0x450>
    81ee:	4650      	mov	r0, sl
    81f0:	1a80      	subs	r0, r0, r2
    81f2:	4582      	cmp	sl, r0
    81f4:	41bf      	sbcs	r7, r7
    81f6:	1a65      	subs	r5, r4, r1
    81f8:	427f      	negs	r7, r7
    81fa:	1bed      	subs	r5, r5, r7
    81fc:	4684      	mov	ip, r0
    81fe:	0228      	lsls	r0, r5, #8
    8200:	d400      	bmi.n	8204 <__aeabi_dsub+0x280>
    8202:	e08c      	b.n	831e <__aeabi_dsub+0x39a>
    8204:	4650      	mov	r0, sl
    8206:	1a17      	subs	r7, r2, r0
    8208:	42ba      	cmp	r2, r7
    820a:	4192      	sbcs	r2, r2
    820c:	1b0c      	subs	r4, r1, r4
    820e:	4255      	negs	r5, r2
    8210:	1b65      	subs	r5, r4, r5
    8212:	4698      	mov	r8, r3
    8214:	e714      	b.n	8040 <__aeabi_dsub+0xbc>
    8216:	2501      	movs	r5, #1
    8218:	4643      	mov	r3, r8
    821a:	2400      	movs	r4, #0
    821c:	401d      	ands	r5, r3
    821e:	2700      	movs	r7, #0
    8220:	e755      	b.n	80ce <__aeabi_dsub+0x14a>
    8222:	4c2a      	ldr	r4, [pc, #168]	; (82cc <__aeabi_dsub+0x348>)
    8224:	1af6      	subs	r6, r6, r3
    8226:	402c      	ands	r4, r5
    8228:	e732      	b.n	8090 <__aeabi_dsub+0x10c>
    822a:	003d      	movs	r5, r7
    822c:	3828      	subs	r0, #40	; 0x28
    822e:	4085      	lsls	r5, r0
    8230:	2700      	movs	r7, #0
    8232:	e717      	b.n	8064 <__aeabi_dsub+0xe0>
    8234:	0038      	movs	r0, r7
    8236:	f000 fb65 	bl	8904 <__clzsi2>
    823a:	3020      	adds	r0, #32
    823c:	e706      	b.n	804c <__aeabi_dsub+0xc8>
    823e:	430a      	orrs	r2, r1
    8240:	0017      	movs	r7, r2
    8242:	2100      	movs	r1, #0
    8244:	1e7a      	subs	r2, r7, #1
    8246:	4197      	sbcs	r7, r2
    8248:	e6ee      	b.n	8028 <__aeabi_dsub+0xa4>
    824a:	2b00      	cmp	r3, #0
    824c:	d000      	beq.n	8250 <__aeabi_dsub+0x2cc>
    824e:	e0e5      	b.n	841c <__aeabi_dsub+0x498>
    8250:	1c73      	adds	r3, r6, #1
    8252:	469c      	mov	ip, r3
    8254:	055b      	lsls	r3, r3, #21
    8256:	0d5b      	lsrs	r3, r3, #21
    8258:	2b01      	cmp	r3, #1
    825a:	dc00      	bgt.n	825e <__aeabi_dsub+0x2da>
    825c:	e09f      	b.n	839e <__aeabi_dsub+0x41a>
    825e:	4b1a      	ldr	r3, [pc, #104]	; (82c8 <__aeabi_dsub+0x344>)
    8260:	459c      	cmp	ip, r3
    8262:	d100      	bne.n	8266 <__aeabi_dsub+0x2e2>
    8264:	e0c5      	b.n	83f2 <__aeabi_dsub+0x46e>
    8266:	4452      	add	r2, sl
    8268:	4552      	cmp	r2, sl
    826a:	4180      	sbcs	r0, r0
    826c:	1864      	adds	r4, r4, r1
    826e:	4240      	negs	r0, r0
    8270:	1824      	adds	r4, r4, r0
    8272:	07e7      	lsls	r7, r4, #31
    8274:	0852      	lsrs	r2, r2, #1
    8276:	4317      	orrs	r7, r2
    8278:	0864      	lsrs	r4, r4, #1
    827a:	4666      	mov	r6, ip
    827c:	e708      	b.n	8090 <__aeabi_dsub+0x10c>
    827e:	4812      	ldr	r0, [pc, #72]	; (82c8 <__aeabi_dsub+0x344>)
    8280:	4285      	cmp	r5, r0
    8282:	d100      	bne.n	8286 <__aeabi_dsub+0x302>
    8284:	e085      	b.n	8392 <__aeabi_dsub+0x40e>
    8286:	001d      	movs	r5, r3
    8288:	e6bc      	b.n	8004 <__aeabi_dsub+0x80>
    828a:	0029      	movs	r1, r5
    828c:	3e1f      	subs	r6, #31
    828e:	40f1      	lsrs	r1, r6
    8290:	2b20      	cmp	r3, #32
    8292:	d100      	bne.n	8296 <__aeabi_dsub+0x312>
    8294:	e07f      	b.n	8396 <__aeabi_dsub+0x412>
    8296:	2240      	movs	r2, #64	; 0x40
    8298:	1ad3      	subs	r3, r2, r3
    829a:	409d      	lsls	r5, r3
    829c:	432f      	orrs	r7, r5
    829e:	1e7d      	subs	r5, r7, #1
    82a0:	41af      	sbcs	r7, r5
    82a2:	2400      	movs	r4, #0
    82a4:	430f      	orrs	r7, r1
    82a6:	2600      	movs	r6, #0
    82a8:	e78e      	b.n	81c8 <__aeabi_dsub+0x244>
    82aa:	002b      	movs	r3, r5
    82ac:	000f      	movs	r7, r1
    82ae:	3b20      	subs	r3, #32
    82b0:	40df      	lsrs	r7, r3
    82b2:	2d20      	cmp	r5, #32
    82b4:	d071      	beq.n	839a <__aeabi_dsub+0x416>
    82b6:	2340      	movs	r3, #64	; 0x40
    82b8:	1b5d      	subs	r5, r3, r5
    82ba:	40a9      	lsls	r1, r5
    82bc:	430a      	orrs	r2, r1
    82be:	1e51      	subs	r1, r2, #1
    82c0:	418a      	sbcs	r2, r1
    82c2:	2100      	movs	r1, #0
    82c4:	4317      	orrs	r7, r2
    82c6:	e6af      	b.n	8028 <__aeabi_dsub+0xa4>
    82c8:	000007ff 	.word	0x000007ff
    82cc:	ff7fffff 	.word	0xff7fffff
    82d0:	800fffff 	.word	0x800fffff
    82d4:	2e00      	cmp	r6, #0
    82d6:	d03e      	beq.n	8356 <__aeabi_dsub+0x3d2>
    82d8:	4eb3      	ldr	r6, [pc, #716]	; (85a8 <__aeabi_dsub+0x624>)
    82da:	45b4      	cmp	ip, r6
    82dc:	d045      	beq.n	836a <__aeabi_dsub+0x3e6>
    82de:	2680      	movs	r6, #128	; 0x80
    82e0:	0436      	lsls	r6, r6, #16
    82e2:	426d      	negs	r5, r5
    82e4:	4334      	orrs	r4, r6
    82e6:	2d38      	cmp	r5, #56	; 0x38
    82e8:	dd00      	ble.n	82ec <__aeabi_dsub+0x368>
    82ea:	e0a8      	b.n	843e <__aeabi_dsub+0x4ba>
    82ec:	2d1f      	cmp	r5, #31
    82ee:	dd00      	ble.n	82f2 <__aeabi_dsub+0x36e>
    82f0:	e11f      	b.n	8532 <__aeabi_dsub+0x5ae>
    82f2:	2620      	movs	r6, #32
    82f4:	0027      	movs	r7, r4
    82f6:	4650      	mov	r0, sl
    82f8:	1b76      	subs	r6, r6, r5
    82fa:	40b7      	lsls	r7, r6
    82fc:	40e8      	lsrs	r0, r5
    82fe:	4307      	orrs	r7, r0
    8300:	4650      	mov	r0, sl
    8302:	40b0      	lsls	r0, r6
    8304:	1e46      	subs	r6, r0, #1
    8306:	41b0      	sbcs	r0, r6
    8308:	40ec      	lsrs	r4, r5
    830a:	4338      	orrs	r0, r7
    830c:	1a17      	subs	r7, r2, r0
    830e:	42ba      	cmp	r2, r7
    8310:	4192      	sbcs	r2, r2
    8312:	1b0c      	subs	r4, r1, r4
    8314:	4252      	negs	r2, r2
    8316:	1aa4      	subs	r4, r4, r2
    8318:	4666      	mov	r6, ip
    831a:	4698      	mov	r8, r3
    831c:	e68b      	b.n	8036 <__aeabi_dsub+0xb2>
    831e:	4664      	mov	r4, ip
    8320:	4667      	mov	r7, ip
    8322:	432c      	orrs	r4, r5
    8324:	d000      	beq.n	8328 <__aeabi_dsub+0x3a4>
    8326:	e68b      	b.n	8040 <__aeabi_dsub+0xbc>
    8328:	2500      	movs	r5, #0
    832a:	2600      	movs	r6, #0
    832c:	2700      	movs	r7, #0
    832e:	e6ea      	b.n	8106 <__aeabi_dsub+0x182>
    8330:	001e      	movs	r6, r3
    8332:	e6ad      	b.n	8090 <__aeabi_dsub+0x10c>
    8334:	2b1f      	cmp	r3, #31
    8336:	dc60      	bgt.n	83fa <__aeabi_dsub+0x476>
    8338:	2720      	movs	r7, #32
    833a:	1af8      	subs	r0, r7, r3
    833c:	000f      	movs	r7, r1
    833e:	4684      	mov	ip, r0
    8340:	4087      	lsls	r7, r0
    8342:	0010      	movs	r0, r2
    8344:	40d8      	lsrs	r0, r3
    8346:	4307      	orrs	r7, r0
    8348:	4660      	mov	r0, ip
    834a:	4082      	lsls	r2, r0
    834c:	1e50      	subs	r0, r2, #1
    834e:	4182      	sbcs	r2, r0
    8350:	40d9      	lsrs	r1, r3
    8352:	4317      	orrs	r7, r2
    8354:	e6f5      	b.n	8142 <__aeabi_dsub+0x1be>
    8356:	0026      	movs	r6, r4
    8358:	4650      	mov	r0, sl
    835a:	4306      	orrs	r6, r0
    835c:	d005      	beq.n	836a <__aeabi_dsub+0x3e6>
    835e:	43ed      	mvns	r5, r5
    8360:	2d00      	cmp	r5, #0
    8362:	d0d3      	beq.n	830c <__aeabi_dsub+0x388>
    8364:	4e90      	ldr	r6, [pc, #576]	; (85a8 <__aeabi_dsub+0x624>)
    8366:	45b4      	cmp	ip, r6
    8368:	d1bd      	bne.n	82e6 <__aeabi_dsub+0x362>
    836a:	000c      	movs	r4, r1
    836c:	0017      	movs	r7, r2
    836e:	4666      	mov	r6, ip
    8370:	4698      	mov	r8, r3
    8372:	e68d      	b.n	8090 <__aeabi_dsub+0x10c>
    8374:	488c      	ldr	r0, [pc, #560]	; (85a8 <__aeabi_dsub+0x624>)
    8376:	4283      	cmp	r3, r0
    8378:	d00b      	beq.n	8392 <__aeabi_dsub+0x40e>
    837a:	4663      	mov	r3, ip
    837c:	e6d9      	b.n	8132 <__aeabi_dsub+0x1ae>
    837e:	2d00      	cmp	r5, #0
    8380:	d000      	beq.n	8384 <__aeabi_dsub+0x400>
    8382:	e096      	b.n	84b2 <__aeabi_dsub+0x52e>
    8384:	0008      	movs	r0, r1
    8386:	4310      	orrs	r0, r2
    8388:	d100      	bne.n	838c <__aeabi_dsub+0x408>
    838a:	e0e2      	b.n	8552 <__aeabi_dsub+0x5ce>
    838c:	000c      	movs	r4, r1
    838e:	0017      	movs	r7, r2
    8390:	4698      	mov	r8, r3
    8392:	4e85      	ldr	r6, [pc, #532]	; (85a8 <__aeabi_dsub+0x624>)
    8394:	e67c      	b.n	8090 <__aeabi_dsub+0x10c>
    8396:	2500      	movs	r5, #0
    8398:	e780      	b.n	829c <__aeabi_dsub+0x318>
    839a:	2100      	movs	r1, #0
    839c:	e78e      	b.n	82bc <__aeabi_dsub+0x338>
    839e:	0023      	movs	r3, r4
    83a0:	4650      	mov	r0, sl
    83a2:	4303      	orrs	r3, r0
    83a4:	2e00      	cmp	r6, #0
    83a6:	d000      	beq.n	83aa <__aeabi_dsub+0x426>
    83a8:	e0a8      	b.n	84fc <__aeabi_dsub+0x578>
    83aa:	2b00      	cmp	r3, #0
    83ac:	d100      	bne.n	83b0 <__aeabi_dsub+0x42c>
    83ae:	e0de      	b.n	856e <__aeabi_dsub+0x5ea>
    83b0:	000b      	movs	r3, r1
    83b2:	4313      	orrs	r3, r2
    83b4:	d100      	bne.n	83b8 <__aeabi_dsub+0x434>
    83b6:	e66b      	b.n	8090 <__aeabi_dsub+0x10c>
    83b8:	4452      	add	r2, sl
    83ba:	4552      	cmp	r2, sl
    83bc:	4180      	sbcs	r0, r0
    83be:	1864      	adds	r4, r4, r1
    83c0:	4240      	negs	r0, r0
    83c2:	1824      	adds	r4, r4, r0
    83c4:	0017      	movs	r7, r2
    83c6:	0223      	lsls	r3, r4, #8
    83c8:	d400      	bmi.n	83cc <__aeabi_dsub+0x448>
    83ca:	e6fd      	b.n	81c8 <__aeabi_dsub+0x244>
    83cc:	4b77      	ldr	r3, [pc, #476]	; (85ac <__aeabi_dsub+0x628>)
    83ce:	4666      	mov	r6, ip
    83d0:	401c      	ands	r4, r3
    83d2:	e65d      	b.n	8090 <__aeabi_dsub+0x10c>
    83d4:	0025      	movs	r5, r4
    83d6:	4650      	mov	r0, sl
    83d8:	4305      	orrs	r5, r0
    83da:	2e00      	cmp	r6, #0
    83dc:	d1cf      	bne.n	837e <__aeabi_dsub+0x3fa>
    83de:	2d00      	cmp	r5, #0
    83e0:	d14f      	bne.n	8482 <__aeabi_dsub+0x4fe>
    83e2:	000c      	movs	r4, r1
    83e4:	4314      	orrs	r4, r2
    83e6:	d100      	bne.n	83ea <__aeabi_dsub+0x466>
    83e8:	e0a0      	b.n	852c <__aeabi_dsub+0x5a8>
    83ea:	000c      	movs	r4, r1
    83ec:	0017      	movs	r7, r2
    83ee:	4698      	mov	r8, r3
    83f0:	e64e      	b.n	8090 <__aeabi_dsub+0x10c>
    83f2:	4666      	mov	r6, ip
    83f4:	2400      	movs	r4, #0
    83f6:	2700      	movs	r7, #0
    83f8:	e685      	b.n	8106 <__aeabi_dsub+0x182>
    83fa:	001f      	movs	r7, r3
    83fc:	0008      	movs	r0, r1
    83fe:	3f20      	subs	r7, #32
    8400:	40f8      	lsrs	r0, r7
    8402:	0007      	movs	r7, r0
    8404:	2b20      	cmp	r3, #32
    8406:	d100      	bne.n	840a <__aeabi_dsub+0x486>
    8408:	e08e      	b.n	8528 <__aeabi_dsub+0x5a4>
    840a:	2040      	movs	r0, #64	; 0x40
    840c:	1ac3      	subs	r3, r0, r3
    840e:	4099      	lsls	r1, r3
    8410:	430a      	orrs	r2, r1
    8412:	1e51      	subs	r1, r2, #1
    8414:	418a      	sbcs	r2, r1
    8416:	2100      	movs	r1, #0
    8418:	4317      	orrs	r7, r2
    841a:	e692      	b.n	8142 <__aeabi_dsub+0x1be>
    841c:	2e00      	cmp	r6, #0
    841e:	d114      	bne.n	844a <__aeabi_dsub+0x4c6>
    8420:	0026      	movs	r6, r4
    8422:	4650      	mov	r0, sl
    8424:	4306      	orrs	r6, r0
    8426:	d062      	beq.n	84ee <__aeabi_dsub+0x56a>
    8428:	43db      	mvns	r3, r3
    842a:	2b00      	cmp	r3, #0
    842c:	d15c      	bne.n	84e8 <__aeabi_dsub+0x564>
    842e:	1887      	adds	r7, r0, r2
    8430:	4297      	cmp	r7, r2
    8432:	4192      	sbcs	r2, r2
    8434:	1864      	adds	r4, r4, r1
    8436:	4252      	negs	r2, r2
    8438:	18a4      	adds	r4, r4, r2
    843a:	4666      	mov	r6, ip
    843c:	e687      	b.n	814e <__aeabi_dsub+0x1ca>
    843e:	4650      	mov	r0, sl
    8440:	4320      	orrs	r0, r4
    8442:	1e44      	subs	r4, r0, #1
    8444:	41a0      	sbcs	r0, r4
    8446:	2400      	movs	r4, #0
    8448:	e760      	b.n	830c <__aeabi_dsub+0x388>
    844a:	4e57      	ldr	r6, [pc, #348]	; (85a8 <__aeabi_dsub+0x624>)
    844c:	45b4      	cmp	ip, r6
    844e:	d04e      	beq.n	84ee <__aeabi_dsub+0x56a>
    8450:	2680      	movs	r6, #128	; 0x80
    8452:	0436      	lsls	r6, r6, #16
    8454:	425b      	negs	r3, r3
    8456:	4334      	orrs	r4, r6
    8458:	2b38      	cmp	r3, #56	; 0x38
    845a:	dd00      	ble.n	845e <__aeabi_dsub+0x4da>
    845c:	e07f      	b.n	855e <__aeabi_dsub+0x5da>
    845e:	2b1f      	cmp	r3, #31
    8460:	dd00      	ble.n	8464 <__aeabi_dsub+0x4e0>
    8462:	e08b      	b.n	857c <__aeabi_dsub+0x5f8>
    8464:	2620      	movs	r6, #32
    8466:	0027      	movs	r7, r4
    8468:	4650      	mov	r0, sl
    846a:	1af6      	subs	r6, r6, r3
    846c:	40b7      	lsls	r7, r6
    846e:	40d8      	lsrs	r0, r3
    8470:	4307      	orrs	r7, r0
    8472:	4650      	mov	r0, sl
    8474:	40b0      	lsls	r0, r6
    8476:	1e46      	subs	r6, r0, #1
    8478:	41b0      	sbcs	r0, r6
    847a:	4307      	orrs	r7, r0
    847c:	40dc      	lsrs	r4, r3
    847e:	18bf      	adds	r7, r7, r2
    8480:	e7d6      	b.n	8430 <__aeabi_dsub+0x4ac>
    8482:	000d      	movs	r5, r1
    8484:	4315      	orrs	r5, r2
    8486:	d100      	bne.n	848a <__aeabi_dsub+0x506>
    8488:	e602      	b.n	8090 <__aeabi_dsub+0x10c>
    848a:	4650      	mov	r0, sl
    848c:	1a80      	subs	r0, r0, r2
    848e:	4582      	cmp	sl, r0
    8490:	41bf      	sbcs	r7, r7
    8492:	1a65      	subs	r5, r4, r1
    8494:	427f      	negs	r7, r7
    8496:	1bed      	subs	r5, r5, r7
    8498:	4684      	mov	ip, r0
    849a:	0228      	lsls	r0, r5, #8
    849c:	d400      	bmi.n	84a0 <__aeabi_dsub+0x51c>
    849e:	e68d      	b.n	81bc <__aeabi_dsub+0x238>
    84a0:	4650      	mov	r0, sl
    84a2:	1a17      	subs	r7, r2, r0
    84a4:	42ba      	cmp	r2, r7
    84a6:	4192      	sbcs	r2, r2
    84a8:	1b0c      	subs	r4, r1, r4
    84aa:	4252      	negs	r2, r2
    84ac:	1aa4      	subs	r4, r4, r2
    84ae:	4698      	mov	r8, r3
    84b0:	e5ee      	b.n	8090 <__aeabi_dsub+0x10c>
    84b2:	000d      	movs	r5, r1
    84b4:	4315      	orrs	r5, r2
    84b6:	d100      	bne.n	84ba <__aeabi_dsub+0x536>
    84b8:	e76b      	b.n	8392 <__aeabi_dsub+0x40e>
    84ba:	4650      	mov	r0, sl
    84bc:	0767      	lsls	r7, r4, #29
    84be:	08c0      	lsrs	r0, r0, #3
    84c0:	4307      	orrs	r7, r0
    84c2:	2080      	movs	r0, #128	; 0x80
    84c4:	08e4      	lsrs	r4, r4, #3
    84c6:	0300      	lsls	r0, r0, #12
    84c8:	4204      	tst	r4, r0
    84ca:	d007      	beq.n	84dc <__aeabi_dsub+0x558>
    84cc:	08cd      	lsrs	r5, r1, #3
    84ce:	4205      	tst	r5, r0
    84d0:	d104      	bne.n	84dc <__aeabi_dsub+0x558>
    84d2:	002c      	movs	r4, r5
    84d4:	4698      	mov	r8, r3
    84d6:	08d7      	lsrs	r7, r2, #3
    84d8:	0749      	lsls	r1, r1, #29
    84da:	430f      	orrs	r7, r1
    84dc:	0f7b      	lsrs	r3, r7, #29
    84de:	00e4      	lsls	r4, r4, #3
    84e0:	431c      	orrs	r4, r3
    84e2:	00ff      	lsls	r7, r7, #3
    84e4:	4e30      	ldr	r6, [pc, #192]	; (85a8 <__aeabi_dsub+0x624>)
    84e6:	e5d3      	b.n	8090 <__aeabi_dsub+0x10c>
    84e8:	4e2f      	ldr	r6, [pc, #188]	; (85a8 <__aeabi_dsub+0x624>)
    84ea:	45b4      	cmp	ip, r6
    84ec:	d1b4      	bne.n	8458 <__aeabi_dsub+0x4d4>
    84ee:	000c      	movs	r4, r1
    84f0:	0017      	movs	r7, r2
    84f2:	4666      	mov	r6, ip
    84f4:	e5cc      	b.n	8090 <__aeabi_dsub+0x10c>
    84f6:	2700      	movs	r7, #0
    84f8:	2400      	movs	r4, #0
    84fa:	e5e8      	b.n	80ce <__aeabi_dsub+0x14a>
    84fc:	2b00      	cmp	r3, #0
    84fe:	d039      	beq.n	8574 <__aeabi_dsub+0x5f0>
    8500:	000b      	movs	r3, r1
    8502:	4313      	orrs	r3, r2
    8504:	d100      	bne.n	8508 <__aeabi_dsub+0x584>
    8506:	e744      	b.n	8392 <__aeabi_dsub+0x40e>
    8508:	08c0      	lsrs	r0, r0, #3
    850a:	0767      	lsls	r7, r4, #29
    850c:	4307      	orrs	r7, r0
    850e:	2080      	movs	r0, #128	; 0x80
    8510:	08e4      	lsrs	r4, r4, #3
    8512:	0300      	lsls	r0, r0, #12
    8514:	4204      	tst	r4, r0
    8516:	d0e1      	beq.n	84dc <__aeabi_dsub+0x558>
    8518:	08cb      	lsrs	r3, r1, #3
    851a:	4203      	tst	r3, r0
    851c:	d1de      	bne.n	84dc <__aeabi_dsub+0x558>
    851e:	08d7      	lsrs	r7, r2, #3
    8520:	0749      	lsls	r1, r1, #29
    8522:	430f      	orrs	r7, r1
    8524:	001c      	movs	r4, r3
    8526:	e7d9      	b.n	84dc <__aeabi_dsub+0x558>
    8528:	2100      	movs	r1, #0
    852a:	e771      	b.n	8410 <__aeabi_dsub+0x48c>
    852c:	2500      	movs	r5, #0
    852e:	2700      	movs	r7, #0
    8530:	e5e9      	b.n	8106 <__aeabi_dsub+0x182>
    8532:	002e      	movs	r6, r5
    8534:	0027      	movs	r7, r4
    8536:	3e20      	subs	r6, #32
    8538:	40f7      	lsrs	r7, r6
    853a:	2d20      	cmp	r5, #32
    853c:	d02f      	beq.n	859e <__aeabi_dsub+0x61a>
    853e:	2640      	movs	r6, #64	; 0x40
    8540:	1b75      	subs	r5, r6, r5
    8542:	40ac      	lsls	r4, r5
    8544:	4650      	mov	r0, sl
    8546:	4320      	orrs	r0, r4
    8548:	1e44      	subs	r4, r0, #1
    854a:	41a0      	sbcs	r0, r4
    854c:	2400      	movs	r4, #0
    854e:	4338      	orrs	r0, r7
    8550:	e6dc      	b.n	830c <__aeabi_dsub+0x388>
    8552:	2480      	movs	r4, #128	; 0x80
    8554:	2500      	movs	r5, #0
    8556:	0324      	lsls	r4, r4, #12
    8558:	4e13      	ldr	r6, [pc, #76]	; (85a8 <__aeabi_dsub+0x624>)
    855a:	2700      	movs	r7, #0
    855c:	e5d3      	b.n	8106 <__aeabi_dsub+0x182>
    855e:	4650      	mov	r0, sl
    8560:	4320      	orrs	r0, r4
    8562:	0007      	movs	r7, r0
    8564:	1e78      	subs	r0, r7, #1
    8566:	4187      	sbcs	r7, r0
    8568:	2400      	movs	r4, #0
    856a:	18bf      	adds	r7, r7, r2
    856c:	e760      	b.n	8430 <__aeabi_dsub+0x4ac>
    856e:	000c      	movs	r4, r1
    8570:	0017      	movs	r7, r2
    8572:	e58d      	b.n	8090 <__aeabi_dsub+0x10c>
    8574:	000c      	movs	r4, r1
    8576:	0017      	movs	r7, r2
    8578:	4e0b      	ldr	r6, [pc, #44]	; (85a8 <__aeabi_dsub+0x624>)
    857a:	e589      	b.n	8090 <__aeabi_dsub+0x10c>
    857c:	001e      	movs	r6, r3
    857e:	0027      	movs	r7, r4
    8580:	3e20      	subs	r6, #32
    8582:	40f7      	lsrs	r7, r6
    8584:	2b20      	cmp	r3, #32
    8586:	d00c      	beq.n	85a2 <__aeabi_dsub+0x61e>
    8588:	2640      	movs	r6, #64	; 0x40
    858a:	1af3      	subs	r3, r6, r3
    858c:	409c      	lsls	r4, r3
    858e:	4650      	mov	r0, sl
    8590:	4320      	orrs	r0, r4
    8592:	1e44      	subs	r4, r0, #1
    8594:	41a0      	sbcs	r0, r4
    8596:	4307      	orrs	r7, r0
    8598:	2400      	movs	r4, #0
    859a:	18bf      	adds	r7, r7, r2
    859c:	e748      	b.n	8430 <__aeabi_dsub+0x4ac>
    859e:	2400      	movs	r4, #0
    85a0:	e7d0      	b.n	8544 <__aeabi_dsub+0x5c0>
    85a2:	2400      	movs	r4, #0
    85a4:	e7f3      	b.n	858e <__aeabi_dsub+0x60a>
    85a6:	46c0      	nop			; (mov r8, r8)
    85a8:	000007ff 	.word	0x000007ff
    85ac:	ff7fffff 	.word	0xff7fffff

000085b0 <__aeabi_dcmpun>:
    85b0:	b570      	push	{r4, r5, r6, lr}
    85b2:	4e0e      	ldr	r6, [pc, #56]	; (85ec <__aeabi_dcmpun+0x3c>)
    85b4:	030d      	lsls	r5, r1, #12
    85b6:	031c      	lsls	r4, r3, #12
    85b8:	0049      	lsls	r1, r1, #1
    85ba:	005b      	lsls	r3, r3, #1
    85bc:	0b2d      	lsrs	r5, r5, #12
    85be:	0d49      	lsrs	r1, r1, #21
    85c0:	0b24      	lsrs	r4, r4, #12
    85c2:	0d5b      	lsrs	r3, r3, #21
    85c4:	42b1      	cmp	r1, r6
    85c6:	d004      	beq.n	85d2 <__aeabi_dcmpun+0x22>
    85c8:	4908      	ldr	r1, [pc, #32]	; (85ec <__aeabi_dcmpun+0x3c>)
    85ca:	2000      	movs	r0, #0
    85cc:	428b      	cmp	r3, r1
    85ce:	d008      	beq.n	85e2 <__aeabi_dcmpun+0x32>
    85d0:	bd70      	pop	{r4, r5, r6, pc}
    85d2:	4305      	orrs	r5, r0
    85d4:	2001      	movs	r0, #1
    85d6:	2d00      	cmp	r5, #0
    85d8:	d1fa      	bne.n	85d0 <__aeabi_dcmpun+0x20>
    85da:	4904      	ldr	r1, [pc, #16]	; (85ec <__aeabi_dcmpun+0x3c>)
    85dc:	2000      	movs	r0, #0
    85de:	428b      	cmp	r3, r1
    85e0:	d1f6      	bne.n	85d0 <__aeabi_dcmpun+0x20>
    85e2:	4314      	orrs	r4, r2
    85e4:	0020      	movs	r0, r4
    85e6:	1e44      	subs	r4, r0, #1
    85e8:	41a0      	sbcs	r0, r4
    85ea:	e7f1      	b.n	85d0 <__aeabi_dcmpun+0x20>
    85ec:	000007ff 	.word	0x000007ff

000085f0 <__aeabi_d2iz>:
    85f0:	b530      	push	{r4, r5, lr}
    85f2:	4d13      	ldr	r5, [pc, #76]	; (8640 <__aeabi_d2iz+0x50>)
    85f4:	030a      	lsls	r2, r1, #12
    85f6:	004b      	lsls	r3, r1, #1
    85f8:	0b12      	lsrs	r2, r2, #12
    85fa:	0d5b      	lsrs	r3, r3, #21
    85fc:	0fc9      	lsrs	r1, r1, #31
    85fe:	2400      	movs	r4, #0
    8600:	42ab      	cmp	r3, r5
    8602:	dd10      	ble.n	8626 <__aeabi_d2iz+0x36>
    8604:	4c0f      	ldr	r4, [pc, #60]	; (8644 <__aeabi_d2iz+0x54>)
    8606:	42a3      	cmp	r3, r4
    8608:	dc0f      	bgt.n	862a <__aeabi_d2iz+0x3a>
    860a:	2480      	movs	r4, #128	; 0x80
    860c:	4d0e      	ldr	r5, [pc, #56]	; (8648 <__aeabi_d2iz+0x58>)
    860e:	0364      	lsls	r4, r4, #13
    8610:	4322      	orrs	r2, r4
    8612:	1aed      	subs	r5, r5, r3
    8614:	2d1f      	cmp	r5, #31
    8616:	dd0b      	ble.n	8630 <__aeabi_d2iz+0x40>
    8618:	480c      	ldr	r0, [pc, #48]	; (864c <__aeabi_d2iz+0x5c>)
    861a:	1ac3      	subs	r3, r0, r3
    861c:	40da      	lsrs	r2, r3
    861e:	4254      	negs	r4, r2
    8620:	2900      	cmp	r1, #0
    8622:	d100      	bne.n	8626 <__aeabi_d2iz+0x36>
    8624:	0014      	movs	r4, r2
    8626:	0020      	movs	r0, r4
    8628:	bd30      	pop	{r4, r5, pc}
    862a:	4b09      	ldr	r3, [pc, #36]	; (8650 <__aeabi_d2iz+0x60>)
    862c:	18cc      	adds	r4, r1, r3
    862e:	e7fa      	b.n	8626 <__aeabi_d2iz+0x36>
    8630:	4c08      	ldr	r4, [pc, #32]	; (8654 <__aeabi_d2iz+0x64>)
    8632:	40e8      	lsrs	r0, r5
    8634:	46a4      	mov	ip, r4
    8636:	4463      	add	r3, ip
    8638:	409a      	lsls	r2, r3
    863a:	4302      	orrs	r2, r0
    863c:	e7ef      	b.n	861e <__aeabi_d2iz+0x2e>
    863e:	46c0      	nop			; (mov r8, r8)
    8640:	000003fe 	.word	0x000003fe
    8644:	0000041d 	.word	0x0000041d
    8648:	00000433 	.word	0x00000433
    864c:	00000413 	.word	0x00000413
    8650:	7fffffff 	.word	0x7fffffff
    8654:	fffffbed 	.word	0xfffffbed

00008658 <__aeabi_i2d>:
    8658:	b570      	push	{r4, r5, r6, lr}
    865a:	2800      	cmp	r0, #0
    865c:	d030      	beq.n	86c0 <__aeabi_i2d+0x68>
    865e:	17c3      	asrs	r3, r0, #31
    8660:	18c4      	adds	r4, r0, r3
    8662:	405c      	eors	r4, r3
    8664:	0fc5      	lsrs	r5, r0, #31
    8666:	0020      	movs	r0, r4
    8668:	f000 f94c 	bl	8904 <__clzsi2>
    866c:	4b17      	ldr	r3, [pc, #92]	; (86cc <__aeabi_i2d+0x74>)
    866e:	4a18      	ldr	r2, [pc, #96]	; (86d0 <__aeabi_i2d+0x78>)
    8670:	1a1b      	subs	r3, r3, r0
    8672:	1ad2      	subs	r2, r2, r3
    8674:	2a1f      	cmp	r2, #31
    8676:	dd18      	ble.n	86aa <__aeabi_i2d+0x52>
    8678:	4a16      	ldr	r2, [pc, #88]	; (86d4 <__aeabi_i2d+0x7c>)
    867a:	1ad2      	subs	r2, r2, r3
    867c:	4094      	lsls	r4, r2
    867e:	2200      	movs	r2, #0
    8680:	0324      	lsls	r4, r4, #12
    8682:	055b      	lsls	r3, r3, #21
    8684:	0b24      	lsrs	r4, r4, #12
    8686:	0d5b      	lsrs	r3, r3, #21
    8688:	2100      	movs	r1, #0
    868a:	0010      	movs	r0, r2
    868c:	0324      	lsls	r4, r4, #12
    868e:	0d0a      	lsrs	r2, r1, #20
    8690:	0b24      	lsrs	r4, r4, #12
    8692:	0512      	lsls	r2, r2, #20
    8694:	4322      	orrs	r2, r4
    8696:	4c10      	ldr	r4, [pc, #64]	; (86d8 <__aeabi_i2d+0x80>)
    8698:	051b      	lsls	r3, r3, #20
    869a:	4022      	ands	r2, r4
    869c:	4313      	orrs	r3, r2
    869e:	005b      	lsls	r3, r3, #1
    86a0:	07ed      	lsls	r5, r5, #31
    86a2:	085b      	lsrs	r3, r3, #1
    86a4:	432b      	orrs	r3, r5
    86a6:	0019      	movs	r1, r3
    86a8:	bd70      	pop	{r4, r5, r6, pc}
    86aa:	0021      	movs	r1, r4
    86ac:	4091      	lsls	r1, r2
    86ae:	000a      	movs	r2, r1
    86b0:	210b      	movs	r1, #11
    86b2:	1a08      	subs	r0, r1, r0
    86b4:	40c4      	lsrs	r4, r0
    86b6:	055b      	lsls	r3, r3, #21
    86b8:	0324      	lsls	r4, r4, #12
    86ba:	0b24      	lsrs	r4, r4, #12
    86bc:	0d5b      	lsrs	r3, r3, #21
    86be:	e7e3      	b.n	8688 <__aeabi_i2d+0x30>
    86c0:	2500      	movs	r5, #0
    86c2:	2300      	movs	r3, #0
    86c4:	2400      	movs	r4, #0
    86c6:	2200      	movs	r2, #0
    86c8:	e7de      	b.n	8688 <__aeabi_i2d+0x30>
    86ca:	46c0      	nop			; (mov r8, r8)
    86cc:	0000041e 	.word	0x0000041e
    86d0:	00000433 	.word	0x00000433
    86d4:	00000413 	.word	0x00000413
    86d8:	800fffff 	.word	0x800fffff

000086dc <__aeabi_ui2d>:
    86dc:	b510      	push	{r4, lr}
    86de:	1e04      	subs	r4, r0, #0
    86e0:	d028      	beq.n	8734 <__aeabi_ui2d+0x58>
    86e2:	f000 f90f 	bl	8904 <__clzsi2>
    86e6:	4b15      	ldr	r3, [pc, #84]	; (873c <__aeabi_ui2d+0x60>)
    86e8:	4a15      	ldr	r2, [pc, #84]	; (8740 <__aeabi_ui2d+0x64>)
    86ea:	1a1b      	subs	r3, r3, r0
    86ec:	1ad2      	subs	r2, r2, r3
    86ee:	2a1f      	cmp	r2, #31
    86f0:	dd15      	ble.n	871e <__aeabi_ui2d+0x42>
    86f2:	4a14      	ldr	r2, [pc, #80]	; (8744 <__aeabi_ui2d+0x68>)
    86f4:	1ad2      	subs	r2, r2, r3
    86f6:	4094      	lsls	r4, r2
    86f8:	2200      	movs	r2, #0
    86fa:	0324      	lsls	r4, r4, #12
    86fc:	055b      	lsls	r3, r3, #21
    86fe:	0b24      	lsrs	r4, r4, #12
    8700:	0d5b      	lsrs	r3, r3, #21
    8702:	2100      	movs	r1, #0
    8704:	0010      	movs	r0, r2
    8706:	0324      	lsls	r4, r4, #12
    8708:	0d0a      	lsrs	r2, r1, #20
    870a:	0b24      	lsrs	r4, r4, #12
    870c:	0512      	lsls	r2, r2, #20
    870e:	4322      	orrs	r2, r4
    8710:	4c0d      	ldr	r4, [pc, #52]	; (8748 <__aeabi_ui2d+0x6c>)
    8712:	051b      	lsls	r3, r3, #20
    8714:	4022      	ands	r2, r4
    8716:	4313      	orrs	r3, r2
    8718:	005b      	lsls	r3, r3, #1
    871a:	0859      	lsrs	r1, r3, #1
    871c:	bd10      	pop	{r4, pc}
    871e:	0021      	movs	r1, r4
    8720:	4091      	lsls	r1, r2
    8722:	000a      	movs	r2, r1
    8724:	210b      	movs	r1, #11
    8726:	1a08      	subs	r0, r1, r0
    8728:	40c4      	lsrs	r4, r0
    872a:	055b      	lsls	r3, r3, #21
    872c:	0324      	lsls	r4, r4, #12
    872e:	0b24      	lsrs	r4, r4, #12
    8730:	0d5b      	lsrs	r3, r3, #21
    8732:	e7e6      	b.n	8702 <__aeabi_ui2d+0x26>
    8734:	2300      	movs	r3, #0
    8736:	2400      	movs	r4, #0
    8738:	2200      	movs	r2, #0
    873a:	e7e2      	b.n	8702 <__aeabi_ui2d+0x26>
    873c:	0000041e 	.word	0x0000041e
    8740:	00000433 	.word	0x00000433
    8744:	00000413 	.word	0x00000413
    8748:	800fffff 	.word	0x800fffff

0000874c <__aeabi_f2d>:
    874c:	0041      	lsls	r1, r0, #1
    874e:	0e09      	lsrs	r1, r1, #24
    8750:	1c4b      	adds	r3, r1, #1
    8752:	b570      	push	{r4, r5, r6, lr}
    8754:	b2db      	uxtb	r3, r3
    8756:	0246      	lsls	r6, r0, #9
    8758:	0a75      	lsrs	r5, r6, #9
    875a:	0fc4      	lsrs	r4, r0, #31
    875c:	2b01      	cmp	r3, #1
    875e:	dd14      	ble.n	878a <__aeabi_f2d+0x3e>
    8760:	23e0      	movs	r3, #224	; 0xe0
    8762:	009b      	lsls	r3, r3, #2
    8764:	076d      	lsls	r5, r5, #29
    8766:	0b36      	lsrs	r6, r6, #12
    8768:	18cb      	adds	r3, r1, r3
    876a:	2100      	movs	r1, #0
    876c:	0d0a      	lsrs	r2, r1, #20
    876e:	0028      	movs	r0, r5
    8770:	0512      	lsls	r2, r2, #20
    8772:	4d1c      	ldr	r5, [pc, #112]	; (87e4 <__aeabi_f2d+0x98>)
    8774:	4332      	orrs	r2, r6
    8776:	055b      	lsls	r3, r3, #21
    8778:	402a      	ands	r2, r5
    877a:	085b      	lsrs	r3, r3, #1
    877c:	4313      	orrs	r3, r2
    877e:	005b      	lsls	r3, r3, #1
    8780:	07e4      	lsls	r4, r4, #31
    8782:	085b      	lsrs	r3, r3, #1
    8784:	4323      	orrs	r3, r4
    8786:	0019      	movs	r1, r3
    8788:	bd70      	pop	{r4, r5, r6, pc}
    878a:	2900      	cmp	r1, #0
    878c:	d114      	bne.n	87b8 <__aeabi_f2d+0x6c>
    878e:	2d00      	cmp	r5, #0
    8790:	d01e      	beq.n	87d0 <__aeabi_f2d+0x84>
    8792:	0028      	movs	r0, r5
    8794:	f000 f8b6 	bl	8904 <__clzsi2>
    8798:	280a      	cmp	r0, #10
    879a:	dc1c      	bgt.n	87d6 <__aeabi_f2d+0x8a>
    879c:	230b      	movs	r3, #11
    879e:	002a      	movs	r2, r5
    87a0:	1a1b      	subs	r3, r3, r0
    87a2:	40da      	lsrs	r2, r3
    87a4:	0003      	movs	r3, r0
    87a6:	3315      	adds	r3, #21
    87a8:	409d      	lsls	r5, r3
    87aa:	4b0f      	ldr	r3, [pc, #60]	; (87e8 <__aeabi_f2d+0x9c>)
    87ac:	0312      	lsls	r2, r2, #12
    87ae:	1a1b      	subs	r3, r3, r0
    87b0:	055b      	lsls	r3, r3, #21
    87b2:	0b16      	lsrs	r6, r2, #12
    87b4:	0d5b      	lsrs	r3, r3, #21
    87b6:	e7d8      	b.n	876a <__aeabi_f2d+0x1e>
    87b8:	2d00      	cmp	r5, #0
    87ba:	d006      	beq.n	87ca <__aeabi_f2d+0x7e>
    87bc:	0b32      	lsrs	r2, r6, #12
    87be:	2680      	movs	r6, #128	; 0x80
    87c0:	0336      	lsls	r6, r6, #12
    87c2:	076d      	lsls	r5, r5, #29
    87c4:	4316      	orrs	r6, r2
    87c6:	4b09      	ldr	r3, [pc, #36]	; (87ec <__aeabi_f2d+0xa0>)
    87c8:	e7cf      	b.n	876a <__aeabi_f2d+0x1e>
    87ca:	4b08      	ldr	r3, [pc, #32]	; (87ec <__aeabi_f2d+0xa0>)
    87cc:	2600      	movs	r6, #0
    87ce:	e7cc      	b.n	876a <__aeabi_f2d+0x1e>
    87d0:	2300      	movs	r3, #0
    87d2:	2600      	movs	r6, #0
    87d4:	e7c9      	b.n	876a <__aeabi_f2d+0x1e>
    87d6:	0003      	movs	r3, r0
    87d8:	002a      	movs	r2, r5
    87da:	3b0b      	subs	r3, #11
    87dc:	409a      	lsls	r2, r3
    87de:	2500      	movs	r5, #0
    87e0:	e7e3      	b.n	87aa <__aeabi_f2d+0x5e>
    87e2:	46c0      	nop			; (mov r8, r8)
    87e4:	800fffff 	.word	0x800fffff
    87e8:	00000389 	.word	0x00000389
    87ec:	000007ff 	.word	0x000007ff

000087f0 <__aeabi_d2f>:
    87f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    87f2:	004c      	lsls	r4, r1, #1
    87f4:	0d64      	lsrs	r4, r4, #21
    87f6:	030b      	lsls	r3, r1, #12
    87f8:	1c62      	adds	r2, r4, #1
    87fa:	0f45      	lsrs	r5, r0, #29
    87fc:	0a5b      	lsrs	r3, r3, #9
    87fe:	0552      	lsls	r2, r2, #21
    8800:	432b      	orrs	r3, r5
    8802:	0fc9      	lsrs	r1, r1, #31
    8804:	00c5      	lsls	r5, r0, #3
    8806:	0d52      	lsrs	r2, r2, #21
    8808:	2a01      	cmp	r2, #1
    880a:	dd28      	ble.n	885e <__aeabi_d2f+0x6e>
    880c:	4a3a      	ldr	r2, [pc, #232]	; (88f8 <__aeabi_d2f+0x108>)
    880e:	18a6      	adds	r6, r4, r2
    8810:	2efe      	cmp	r6, #254	; 0xfe
    8812:	dc1b      	bgt.n	884c <__aeabi_d2f+0x5c>
    8814:	2e00      	cmp	r6, #0
    8816:	dd3e      	ble.n	8896 <__aeabi_d2f+0xa6>
    8818:	0180      	lsls	r0, r0, #6
    881a:	0002      	movs	r2, r0
    881c:	1e50      	subs	r0, r2, #1
    881e:	4182      	sbcs	r2, r0
    8820:	0f6d      	lsrs	r5, r5, #29
    8822:	432a      	orrs	r2, r5
    8824:	00db      	lsls	r3, r3, #3
    8826:	4313      	orrs	r3, r2
    8828:	075a      	lsls	r2, r3, #29
    882a:	d004      	beq.n	8836 <__aeabi_d2f+0x46>
    882c:	220f      	movs	r2, #15
    882e:	401a      	ands	r2, r3
    8830:	2a04      	cmp	r2, #4
    8832:	d000      	beq.n	8836 <__aeabi_d2f+0x46>
    8834:	3304      	adds	r3, #4
    8836:	2280      	movs	r2, #128	; 0x80
    8838:	04d2      	lsls	r2, r2, #19
    883a:	401a      	ands	r2, r3
    883c:	d05a      	beq.n	88f4 <__aeabi_d2f+0x104>
    883e:	3601      	adds	r6, #1
    8840:	2eff      	cmp	r6, #255	; 0xff
    8842:	d003      	beq.n	884c <__aeabi_d2f+0x5c>
    8844:	019b      	lsls	r3, r3, #6
    8846:	0a5b      	lsrs	r3, r3, #9
    8848:	b2f4      	uxtb	r4, r6
    884a:	e001      	b.n	8850 <__aeabi_d2f+0x60>
    884c:	24ff      	movs	r4, #255	; 0xff
    884e:	2300      	movs	r3, #0
    8850:	0258      	lsls	r0, r3, #9
    8852:	05e4      	lsls	r4, r4, #23
    8854:	0a40      	lsrs	r0, r0, #9
    8856:	07c9      	lsls	r1, r1, #31
    8858:	4320      	orrs	r0, r4
    885a:	4308      	orrs	r0, r1
    885c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    885e:	2c00      	cmp	r4, #0
    8860:	d007      	beq.n	8872 <__aeabi_d2f+0x82>
    8862:	431d      	orrs	r5, r3
    8864:	d0f2      	beq.n	884c <__aeabi_d2f+0x5c>
    8866:	2080      	movs	r0, #128	; 0x80
    8868:	00db      	lsls	r3, r3, #3
    886a:	0480      	lsls	r0, r0, #18
    886c:	4303      	orrs	r3, r0
    886e:	26ff      	movs	r6, #255	; 0xff
    8870:	e7da      	b.n	8828 <__aeabi_d2f+0x38>
    8872:	432b      	orrs	r3, r5
    8874:	d003      	beq.n	887e <__aeabi_d2f+0x8e>
    8876:	2305      	movs	r3, #5
    8878:	08db      	lsrs	r3, r3, #3
    887a:	2cff      	cmp	r4, #255	; 0xff
    887c:	d003      	beq.n	8886 <__aeabi_d2f+0x96>
    887e:	025b      	lsls	r3, r3, #9
    8880:	0a5b      	lsrs	r3, r3, #9
    8882:	b2e4      	uxtb	r4, r4
    8884:	e7e4      	b.n	8850 <__aeabi_d2f+0x60>
    8886:	2b00      	cmp	r3, #0
    8888:	d032      	beq.n	88f0 <__aeabi_d2f+0x100>
    888a:	2080      	movs	r0, #128	; 0x80
    888c:	03c0      	lsls	r0, r0, #15
    888e:	4303      	orrs	r3, r0
    8890:	025b      	lsls	r3, r3, #9
    8892:	0a5b      	lsrs	r3, r3, #9
    8894:	e7dc      	b.n	8850 <__aeabi_d2f+0x60>
    8896:	0032      	movs	r2, r6
    8898:	3217      	adds	r2, #23
    889a:	db14      	blt.n	88c6 <__aeabi_d2f+0xd6>
    889c:	2280      	movs	r2, #128	; 0x80
    889e:	271e      	movs	r7, #30
    88a0:	0412      	lsls	r2, r2, #16
    88a2:	4313      	orrs	r3, r2
    88a4:	1bbf      	subs	r7, r7, r6
    88a6:	2f1f      	cmp	r7, #31
    88a8:	dc0f      	bgt.n	88ca <__aeabi_d2f+0xda>
    88aa:	4a14      	ldr	r2, [pc, #80]	; (88fc <__aeabi_d2f+0x10c>)
    88ac:	4694      	mov	ip, r2
    88ae:	4464      	add	r4, ip
    88b0:	002a      	movs	r2, r5
    88b2:	40a5      	lsls	r5, r4
    88b4:	002e      	movs	r6, r5
    88b6:	40a3      	lsls	r3, r4
    88b8:	1e75      	subs	r5, r6, #1
    88ba:	41ae      	sbcs	r6, r5
    88bc:	40fa      	lsrs	r2, r7
    88be:	4333      	orrs	r3, r6
    88c0:	4313      	orrs	r3, r2
    88c2:	2600      	movs	r6, #0
    88c4:	e7b0      	b.n	8828 <__aeabi_d2f+0x38>
    88c6:	2400      	movs	r4, #0
    88c8:	e7d5      	b.n	8876 <__aeabi_d2f+0x86>
    88ca:	2202      	movs	r2, #2
    88cc:	4252      	negs	r2, r2
    88ce:	1b96      	subs	r6, r2, r6
    88d0:	001a      	movs	r2, r3
    88d2:	40f2      	lsrs	r2, r6
    88d4:	2f20      	cmp	r7, #32
    88d6:	d009      	beq.n	88ec <__aeabi_d2f+0xfc>
    88d8:	4809      	ldr	r0, [pc, #36]	; (8900 <__aeabi_d2f+0x110>)
    88da:	4684      	mov	ip, r0
    88dc:	4464      	add	r4, ip
    88de:	40a3      	lsls	r3, r4
    88e0:	432b      	orrs	r3, r5
    88e2:	1e5d      	subs	r5, r3, #1
    88e4:	41ab      	sbcs	r3, r5
    88e6:	2600      	movs	r6, #0
    88e8:	4313      	orrs	r3, r2
    88ea:	e79d      	b.n	8828 <__aeabi_d2f+0x38>
    88ec:	2300      	movs	r3, #0
    88ee:	e7f7      	b.n	88e0 <__aeabi_d2f+0xf0>
    88f0:	2300      	movs	r3, #0
    88f2:	e7ad      	b.n	8850 <__aeabi_d2f+0x60>
    88f4:	0034      	movs	r4, r6
    88f6:	e7bf      	b.n	8878 <__aeabi_d2f+0x88>
    88f8:	fffffc80 	.word	0xfffffc80
    88fc:	fffffc82 	.word	0xfffffc82
    8900:	fffffca2 	.word	0xfffffca2

00008904 <__clzsi2>:
    8904:	211c      	movs	r1, #28
    8906:	2301      	movs	r3, #1
    8908:	041b      	lsls	r3, r3, #16
    890a:	4298      	cmp	r0, r3
    890c:	d301      	bcc.n	8912 <__clzsi2+0xe>
    890e:	0c00      	lsrs	r0, r0, #16
    8910:	3910      	subs	r1, #16
    8912:	0a1b      	lsrs	r3, r3, #8
    8914:	4298      	cmp	r0, r3
    8916:	d301      	bcc.n	891c <__clzsi2+0x18>
    8918:	0a00      	lsrs	r0, r0, #8
    891a:	3908      	subs	r1, #8
    891c:	091b      	lsrs	r3, r3, #4
    891e:	4298      	cmp	r0, r3
    8920:	d301      	bcc.n	8926 <__clzsi2+0x22>
    8922:	0900      	lsrs	r0, r0, #4
    8924:	3904      	subs	r1, #4
    8926:	a202      	add	r2, pc, #8	; (adr r2, 8930 <__clzsi2+0x2c>)
    8928:	5c10      	ldrb	r0, [r2, r0]
    892a:	1840      	adds	r0, r0, r1
    892c:	4770      	bx	lr
    892e:	46c0      	nop			; (mov r8, r8)
    8930:	02020304 	.word	0x02020304
    8934:	01010101 	.word	0x01010101
	...
    8940:	0000736d 	.word	0x0000736d
    8944:	00000000 	.word	0x00000000
    8948:	0000646d 	.word	0x0000646d
    894c:	00000000 	.word	0x00000000
    8950:	0000616d 	.word	0x0000616d
    8954:	00000000 	.word	0x00000000
    8958:	0000776d 	.word	0x0000776d
    895c:	00000000 	.word	0x00000000

00008960 <_tcc_intflag>:
    8960:	00000001 00000002 00000004 00000008     ................
    8970:	00001000 00002000 00004000 00008000     ..... ...@......
    8980:	00010000 00020000 00040000 00080000     ................
    8990:	0000776d 00000000 0000206d 00000000     mw......m ......

000089a0 <tc_interrupt_vectors.12756>:
    89a0:	00141312 73657431 00000074 42000800     ....1test......B
    89b0:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    89c0:	42001c00 00001a46 00001a42 00001a42     ...BF...B...B...
    89d0:	00001aa4 00001aa4 00001a5a 00001a4c     ........Z...L...
    89e0:	00001a60 00001a92 00001ce0 00001cc0     `...............
    89f0:	00001cc0 00001d4c 00001cd2 00001cee     ....L...........
    8a00:	00001cc4 00001cfc 00001d3c 42002c00     ........<....,.B
    8a10:	42003000 42003400                       .0.B.4.B

00008a18 <tc_interrupt_vectors.11884>:
    8a18:	00141312 6e6f7266 6f6e2074 73206564     ....front node s
    8a28:	70757465 6d6f6320 74656c70 00000065     etup complete...

00008a38 <_global_impure_ptr>:
    8a38:	20000010 00464e49 00666e69 004e414e     ... INF.inf.NAN.
    8a48:	006e616e 31300030 35343332 39383736     nan.0.0123456789
    8a58:	44434241 30004645 34333231 38373635     ABCDEF.012345678
    8a68:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
    8a78:	4e614e00 00000000                       .NaN....

00008a80 <__sf_fake_stderr>:
	...

00008aa0 <__sf_fake_stdin>:
	...

00008ac0 <__sf_fake_stdout>:
	...

00008ae0 <__mprec_bigtens>:
    8ae0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    8af0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    8b00:	7f73bf3c 75154fdd                       <.s..O.u

00008b08 <__mprec_tens>:
    8b08:	00000000 3ff00000 00000000 40240000     .......?......$@
    8b18:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    8b28:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    8b38:	00000000 412e8480 00000000 416312d0     .......A......cA
    8b48:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    8b58:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    8b68:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    8b78:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    8b88:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    8b98:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    8ba8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    8bb8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    8bc8:	79d99db4 44ea7843                       ...yCx.D

00008bd0 <p05.6052>:
    8bd0:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    8be0:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
    8bf0:	5849534f 00002e00                                OSIX...

00008bf7 <_ctype_>:
    8bf7:	20202000 20202020 28282020 20282828     .         ((((( 
    8c07:	20202020 20202020 20202020 20202020                     
    8c17:	10108820 10101010 10101010 10101010      ...............
    8c27:	04040410 04040404 10040404 10101010     ................
    8c37:	41411010 41414141 01010101 01010101     ..AAAAAA........
    8c47:	01010101 01010101 01010101 10101010     ................
    8c57:	42421010 42424242 02020202 02020202     ..BBBBBB........
    8c67:	02020202 02020202 02020202 10101010     ................
    8c77:	00000020 00000000 00000000 00000000      ...............
	...
    8cf7:	0066c800 00669800 0066aa00 0065ec00     ..f...f...f...e.
    8d07:	0066aa00 00668e00 0066aa00 0065ec00     ..f...f...f...e.
    8d17:	00669800 00669800 00668e00 0065ec00     ..f...f...f...e.
    8d27:	0065f400 0065f400 0065f400 0066b000     ..e...e...e...f.
    8d37:	00669800 00669800 00666c00 00675000     ..f...f..lf..Pg.
    8d47:	00666c00 00668e00 00666c00 00675000     .lf...f..lf..Pg.
    8d57:	00669800 00669800 00668e00 00675000     ..f...f...f..Pg.
    8d67:	0065f400 0065f400 0065f400 00675a00     ..e...e...e..Zg.
    8d77:	006a4800 00699800 00699800 00699600     .Hj...i...i...i.
    8d87:	006a3a00 006a3a00 006a3000 00699600     .:j..:j..0j...i.
    8d97:	006a3a00 006a3000 006a3a00 00699600     .:j..0j..:j...i.
    8da7:	006a4000 006a4000 006a4000 006ad000     .@j..@j..@j...j.
    8db7:	00741400 0073f600 0073b000 0072ce00     ..t...s...s...r.
    8dc7:	0073b000 0073e800 0073b000 0072ce00     ..s...s...s...r.
    8dd7:	0073f600 0073f600 0073e800 0072ce00     ..s...s...s...r.
    8de7:	0072c600 0072c600 0072c600 00762c00     ..r...r...r..,v.
    8df7:	007c7400 007b3400 007b3400 007b3000     .t|..4{..4{..0{.
    8e07:	007c4c00 007c4c00 007c3e00 007b3000     .L|..L|..>|..0{.
    8e17:	007c4c00 007c3e00 007c4c00 007b3000     .L|..>|..L|..0{.
    8e27:	007c5400 007c5400 007c5400 007e5800     .T|..T|..T|..X~.
	...

00008e38 <_init>:
    8e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e3a:	46c0      	nop			; (mov r8, r8)
    8e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8e3e:	bc08      	pop	{r3}
    8e40:	469e      	mov	lr, r3
    8e42:	4770      	bx	lr

00008e44 <__init_array_start>:
    8e44:	000000dd 	.word	0x000000dd

00008e48 <_fini>:
    8e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e4a:	46c0      	nop			; (mov r8, r8)
    8e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8e4e:	bc08      	pop	{r3}
    8e50:	469e      	mov	lr, r3
    8e52:	4770      	bx	lr

00008e54 <__fini_array_start>:
    8e54:	000000b5 	.word	0x000000b5
