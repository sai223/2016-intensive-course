
front.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008e58  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000a8  20000000  00008e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000848  200000a8  00008f00  000200a8  2**2
                  ALLOC
  3 .stack        00002000  200008f0  00009748  000200a8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
  5 .comment      0000008c  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004d208  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006be1  00000000  00000000  0006d364  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000d13f  00000000  00000000  00073f45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c20  00000000  00000000  00081084  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001180  00000000  00000000  00081ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021dfa  00000000  00000000  00082e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001c57c  00000000  00000000  000a4c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00089ce0  00000000  00000000  000c119a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002cb0  00000000  00000000  0014ae7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200028f0 	.word	0x200028f0
       4:	00002791 	.word	0x00002791
       8:	0000278d 	.word	0x0000278d
       c:	0000278d 	.word	0x0000278d
	...
      2c:	0000278d 	.word	0x0000278d
	...
      38:	0000278d 	.word	0x0000278d
      3c:	0000278d 	.word	0x0000278d
      40:	0000278d 	.word	0x0000278d
      44:	0000278d 	.word	0x0000278d
      48:	0000278d 	.word	0x0000278d
      4c:	0000278d 	.word	0x0000278d
      50:	00000a7d 	.word	0x00000a7d
      54:	0000278d 	.word	0x0000278d
      58:	0000278d 	.word	0x0000278d
      5c:	0000278d 	.word	0x0000278d
      60:	0000278d 	.word	0x0000278d
      64:	00001081 	.word	0x00001081
      68:	00001091 	.word	0x00001091
      6c:	000010a1 	.word	0x000010a1
      70:	000010b1 	.word	0x000010b1
      74:	000010c1 	.word	0x000010c1
      78:	000010d1 	.word	0x000010d1
      7c:	000004ad 	.word	0x000004ad
      80:	000004bd 	.word	0x000004bd
      84:	000004cd 	.word	0x000004cd
      88:	00002425 	.word	0x00002425
      8c:	00002435 	.word	0x00002435
      90:	00002445 	.word	0x00002445
	...
      9c:	0000278d 	.word	0x0000278d
      a0:	0000278d 	.word	0x0000278d
      a4:	00000000 	.word	0x00000000
      a8:	0000278d 	.word	0x0000278d
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000a8 	.word	0x200000a8
      d4:	00000000 	.word	0x00000000
      d8:	00008e58 	.word	0x00008e58

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000ac 	.word	0x200000ac
     108:	00008e58 	.word	0x00008e58
     10c:	00008e58 	.word	0x00008e58
     110:	00000000 	.word	0x00000000

00000114 <artist_init_maze>:
*/

#include "Maze.h"

void artist_init_maze (void) {
	artist_front.maze_status = STOP;
     114:	2103      	movs	r1, #3
     116:	23d8      	movs	r3, #216	; 0xd8
     118:	4a01      	ldr	r2, [pc, #4]	; (120 <artist_init_maze+0xc>)
     11a:	54d1      	strb	r1, [r2, r3]
}
     11c:	4770      	bx	lr
     11e:	46c0      	nop			; (mov r8, r8)
     120:	20000684 	.word	0x20000684

00000124 <artist_do_maze>:

void artist_do_maze (void) {
     124:	b510      	push	{r4, lr}
	if(artist_front.center_distance <= MAZE_FRONT_WALL_EXIST_DETERMINATE){
     126:	4929      	ldr	r1, [pc, #164]	; (1cc <artist_do_maze+0xa8>)
     128:	23cc      	movs	r3, #204	; 0xcc
     12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <artist_do_maze+0xac>)
     12c:	58d0      	ldr	r0, [r2, r3]
     12e:	4b29      	ldr	r3, [pc, #164]	; (1d4 <artist_do_maze+0xb0>)
     130:	4798      	blx	r3
     132:	2800      	cmp	r0, #0
     134:	d00c      	beq.n	150 <artist_do_maze+0x2c>
		strategic_withdrawal = true;
     136:	2201      	movs	r2, #1
     138:	4b27      	ldr	r3, [pc, #156]	; (1d8 <artist_do_maze+0xb4>)
     13a:	701a      	strb	r2, [r3, #0]
		artist_front.maze_status = BACK;
     13c:	4824      	ldr	r0, [pc, #144]	; (1d0 <artist_do_maze+0xac>)
     13e:	3203      	adds	r2, #3
     140:	23d8      	movs	r3, #216	; 0xd8
     142:	54c2      	strb	r2, [r0, r3]
		break;
		case RIGHT :
		usart_write_buffer_job(&(artist_front.usart_instance), "md\0\0\0", MAX_RX_BUFFER_LENGTH);
		break;
		case BACK :
		usart_write_buffer_job(&(artist_front.usart_instance), "ms\0\0\0", MAX_RX_BUFFER_LENGTH);
     144:	3078      	adds	r0, #120	; 0x78
     146:	3201      	adds	r2, #1
     148:	4924      	ldr	r1, [pc, #144]	; (1dc <artist_do_maze+0xb8>)
     14a:	4b25      	ldr	r3, [pc, #148]	; (1e0 <artist_do_maze+0xbc>)
     14c:	4798      	blx	r3
		break;
     14e:	e03b      	b.n	1c8 <artist_do_maze+0xa4>
void artist_do_maze (void) {
	if(artist_front.center_distance <= MAZE_FRONT_WALL_EXIST_DETERMINATE){
		strategic_withdrawal = true;
		artist_front.maze_status = BACK;
	}
	else if(artist_front.right_distance < MAZE_RIGHT_DISTANCE_LOWERBOUND){
     150:	23d4      	movs	r3, #212	; 0xd4
     152:	4a1f      	ldr	r2, [pc, #124]	; (1d0 <artist_do_maze+0xac>)
     154:	58d4      	ldr	r4, [r2, r3]
     156:	491d      	ldr	r1, [pc, #116]	; (1cc <artist_do_maze+0xa8>)
     158:	1c20      	adds	r0, r4, #0
     15a:	4b22      	ldr	r3, [pc, #136]	; (1e4 <artist_do_maze+0xc0>)
     15c:	4798      	blx	r3
     15e:	2800      	cmp	r0, #0
     160:	d004      	beq.n	16c <artist_do_maze+0x48>
		artist_front.maze_status = LEFT;
     162:	2101      	movs	r1, #1
     164:	23d8      	movs	r3, #216	; 0xd8
     166:	4a1a      	ldr	r2, [pc, #104]	; (1d0 <artist_do_maze+0xac>)
     168:	54d1      	strb	r1, [r2, r3]
     16a:	e027      	b.n	1bc <artist_do_maze+0x98>
	}
	else if(artist_front.right_distance > MAZE_RIGHT_DISTANCE_UPPERBOUND){
     16c:	491e      	ldr	r1, [pc, #120]	; (1e8 <artist_do_maze+0xc4>)
     16e:	1c20      	adds	r0, r4, #0
     170:	4b1e      	ldr	r3, [pc, #120]	; (1ec <artist_do_maze+0xc8>)
     172:	4798      	blx	r3
     174:	2800      	cmp	r0, #0
     176:	d00a      	beq.n	18e <artist_do_maze+0x6a>
		artist_front.maze_status = RIGHT;
     178:	4815      	ldr	r0, [pc, #84]	; (1d0 <artist_do_maze+0xac>)
     17a:	2202      	movs	r2, #2
     17c:	23d8      	movs	r3, #216	; 0xd8
     17e:	54c2      	strb	r2, [r0, r3]
		break;
		case LEFT :
		usart_write_buffer_job(&(artist_front.usart_instance), "ma\0\0\0", MAX_RX_BUFFER_LENGTH);
		break;
		case RIGHT :
		usart_write_buffer_job(&(artist_front.usart_instance), "md\0\0\0", MAX_RX_BUFFER_LENGTH);
     180:	3078      	adds	r0, #120	; 0x78
     182:	3203      	adds	r2, #3
     184:	4915      	ldr	r1, [pc, #84]	; (1dc <artist_do_maze+0xb8>)
     186:	3108      	adds	r1, #8
     188:	4b15      	ldr	r3, [pc, #84]	; (1e0 <artist_do_maze+0xbc>)
     18a:	4798      	blx	r3
		break;
     18c:	e01c      	b.n	1c8 <artist_do_maze+0xa4>
	}
	else if(artist_front.right_distance > MAZE_RIGHT_DISTANCE_UPPERBOUND){
		artist_front.maze_status = RIGHT;
	}
	else{
		if(strategic_withdrawal){
     18e:	4b12      	ldr	r3, [pc, #72]	; (1d8 <artist_do_maze+0xb4>)
     190:	781b      	ldrb	r3, [r3, #0]
     192:	2b00      	cmp	r3, #0
     194:	d007      	beq.n	1a6 <artist_do_maze+0x82>
			strategic_withdrawal = false;
     196:	2200      	movs	r2, #0
     198:	4b0f      	ldr	r3, [pc, #60]	; (1d8 <artist_do_maze+0xb4>)
     19a:	701a      	strb	r2, [r3, #0]
			artist_front.maze_status = LEFT;
     19c:	2101      	movs	r1, #1
     19e:	23d8      	movs	r3, #216	; 0xd8
     1a0:	4a0b      	ldr	r2, [pc, #44]	; (1d0 <artist_do_maze+0xac>)
     1a2:	54d1      	strb	r1, [r2, r3]
     1a4:	e00a      	b.n	1bc <artist_do_maze+0x98>
		}
		else artist_front.maze_status = STRAIGHT;
     1a6:	480a      	ldr	r0, [pc, #40]	; (1d0 <artist_do_maze+0xac>)
     1a8:	2200      	movs	r2, #0
     1aa:	23d8      	movs	r3, #216	; 0xd8
     1ac:	54c2      	strb	r2, [r0, r3]
	}
	
	switch (artist_front.maze_status){
		case STRAIGHT :
		usart_write_buffer_job(&(artist_front.usart_instance), "mw\0\0\0", MAX_RX_BUFFER_LENGTH);
     1ae:	3078      	adds	r0, #120	; 0x78
     1b0:	3205      	adds	r2, #5
     1b2:	490a      	ldr	r1, [pc, #40]	; (1dc <artist_do_maze+0xb8>)
     1b4:	3110      	adds	r1, #16
     1b6:	4b0a      	ldr	r3, [pc, #40]	; (1e0 <artist_do_maze+0xbc>)
     1b8:	4798      	blx	r3
		break;
		case BACK :
		usart_write_buffer_job(&(artist_front.usart_instance), "ms\0\0\0", MAX_RX_BUFFER_LENGTH);
		break;
	}
}
     1ba:	e005      	b.n	1c8 <artist_do_maze+0xa4>
		break;
		case STOP :
		usart_write_buffer_job(&(artist_front.usart_instance), "m \0\0\0", MAX_RX_BUFFER_LENGTH);
		break;
		case LEFT :
		usart_write_buffer_job(&(artist_front.usart_instance), "ma\0\0\0", MAX_RX_BUFFER_LENGTH);
     1bc:	2205      	movs	r2, #5
     1be:	4907      	ldr	r1, [pc, #28]	; (1dc <artist_do_maze+0xb8>)
     1c0:	3118      	adds	r1, #24
     1c2:	480b      	ldr	r0, [pc, #44]	; (1f0 <artist_do_maze+0xcc>)
     1c4:	4b06      	ldr	r3, [pc, #24]	; (1e0 <artist_do_maze+0xbc>)
     1c6:	4798      	blx	r3
		break;
		case BACK :
		usart_write_buffer_job(&(artist_front.usart_instance), "ms\0\0\0", MAX_RX_BUFFER_LENGTH);
		break;
	}
}
     1c8:	bd10      	pop	{r4, pc}
     1ca:	46c0      	nop			; (mov r8, r8)
     1cc:	40a00000 	.word	0x40a00000
     1d0:	20000684 	.word	0x20000684
     1d4:	000061f9 	.word	0x000061f9
     1d8:	20000765 	.word	0x20000765
     1dc:	0000899c 	.word	0x0000899c
     1e0:	000018f5 	.word	0x000018f5
     1e4:	000061e5 	.word	0x000061e5
     1e8:	40e00000 	.word	0x40e00000
     1ec:	0000620d 	.word	0x0000620d
     1f0:	200006fc 	.word	0x200006fc

000001f4 <artist_pause_maze>:

void artist_pause_maze(void){
     1f4:	b510      	push	{r4, lr}
	artist_front.maze_status = STOP;
     1f6:	4805      	ldr	r0, [pc, #20]	; (20c <artist_pause_maze+0x18>)
     1f8:	2203      	movs	r2, #3
     1fa:	23d8      	movs	r3, #216	; 0xd8
     1fc:	54c2      	strb	r2, [r0, r3]
	usart_write_buffer_job(&(artist_front.usart_instance), "m \0\0\0", MAX_RX_BUFFER_LENGTH);
     1fe:	3078      	adds	r0, #120	; 0x78
     200:	3202      	adds	r2, #2
     202:	4903      	ldr	r1, [pc, #12]	; (210 <artist_pause_maze+0x1c>)
     204:	3120      	adds	r1, #32
     206:	4b03      	ldr	r3, [pc, #12]	; (214 <artist_pause_maze+0x20>)
     208:	4798      	blx	r3
     20a:	bd10      	pop	{r4, pc}
     20c:	20000684 	.word	0x20000684
     210:	0000899c 	.word	0x0000899c
     214:	000018f5 	.word	0x000018f5

00000218 <artist_ultrasonic_configure>:
 */
#include "TheArtist.h"
#include "UltraSonic.h"

void artist_ultrasonic_configure (struct artist_ultrasonic_module * module, uint8_t echo, uint8_t trig) {
	module->echo_pin	= echo; 
     218:	7001      	strb	r1, [r0, #0]
	module->trigger_pin = trig;  
     21a:	7042      	strb	r2, [r0, #1]
	module->filter_large_change_counts = 0; 
     21c:	2300      	movs	r3, #0
     21e:	7083      	strb	r3, [r0, #2]
	module->fliter_old_val = 0; 
     220:	2300      	movs	r3, #0
     222:	6043      	str	r3, [r0, #4]
}
     224:	4770      	bx	lr
     226:	46c0      	nop			; (mov r8, r8)

00000228 <artist_ultrasonic_gpio_init>:

void artist_ultrasonic_gpio_init() {
     228:	b5f0      	push	{r4, r5, r6, r7, lr}
     22a:	b085      	sub	sp, #20
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     22c:	a903      	add	r1, sp, #12
     22e:	2201      	movs	r2, #1
     230:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     232:	2300      	movs	r3, #0
     234:	708b      	strb	r3, [r1, #2]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     236:	ad02      	add	r5, sp, #8
     238:	702b      	strb	r3, [r5, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     23a:	706a      	strb	r2, [r5, #1]
	config->powersave  = false;
     23c:	70ab      	strb	r3, [r5, #2]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     23e:	4668      	mov	r0, sp
     240:	7003      	strb	r3, [r0, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     242:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
     244:	7083      	strb	r3, [r0, #2]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     246:	ac01      	add	r4, sp, #4
     248:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     24a:	7062      	strb	r2, [r4, #1]
	config->powersave  = false;
     24c:	70a3      	strb	r3, [r4, #2]
	port_get_config_defaults(&pin_config_trig);
	port_get_config_defaults(&pin_config_echo_center);
	port_get_config_defaults(&pin_config_echo_right);
	port_get_config_defaults(&pin_config_echo_left);

	pin_config_trig.direction			=	PORT_PIN_DIR_OUTPUT;
     24e:	700a      	strb	r2, [r1, #0]
	
	pin_config_echo_right.direction		=	PORT_PIN_DIR_INPUT;
	pin_config_echo_right.input_pull	=	PORT_PIN_PULL_UP;
	
	
	port_pin_set_config(artist_front.us_instance_center.trigger_pin, &pin_config_trig);
     250:	4f09      	ldr	r7, [pc, #36]	; (278 <artist_ultrasonic_gpio_init+0x50>)
     252:	33b5      	adds	r3, #181	; 0xb5
     254:	5cf8      	ldrb	r0, [r7, r3]
     256:	4e09      	ldr	r6, [pc, #36]	; (27c <artist_ultrasonic_gpio_init+0x54>)
     258:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_center.echo_pin, &pin_config_echo_center);
     25a:	23b4      	movs	r3, #180	; 0xb4
     25c:	5cf8      	ldrb	r0, [r7, r3]
     25e:	0029      	movs	r1, r5
     260:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_left.echo_pin, &pin_config_echo_left);
     262:	23bc      	movs	r3, #188	; 0xbc
     264:	5cf8      	ldrb	r0, [r7, r3]
     266:	0021      	movs	r1, r4
     268:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_right.echo_pin, &pin_config_echo_right); 
     26a:	23c4      	movs	r3, #196	; 0xc4
     26c:	5cf8      	ldrb	r0, [r7, r3]
     26e:	4669      	mov	r1, sp
     270:	47b0      	blx	r6
}
     272:	b005      	add	sp, #20
     274:	bdf0      	pop	{r4, r5, r6, r7, pc}
     276:	46c0      	nop			; (mov r8, r8)
     278:	20000684 	.word	0x20000684
     27c:	00000bf1 	.word	0x00000bf1

00000280 <artist_ultrasonic_get_value>:
	printf("%5.2f, %5.2f, %5.2f\n", 
				artist_front.left_distance, 
				artist_front.center_distance, 
				artist_front.right_distance);  
}
float artist_ultrasonic_get_value(struct artist_ultrasonic_module * const module) {
     280:	b5f0      	push	{r4, r5, r6, r7, lr}
     282:	b083      	sub	sp, #12
     284:	0004      	movs	r4, r0
	// TODO : use timer callback function!
	uint16_t start, end;
	uint16_t count = 0;
	
	port_pin_set_output_level(module->trigger_pin, false);
     286:	7843      	ldrb	r3, [r0, #1]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     288:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     28a:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     28c:	2900      	cmp	r1, #0
     28e:	d104      	bne.n	29a <artist_ultrasonic_get_value+0x1a>
		return &(ports[port_index]->Group[group_index]);
     290:	095a      	lsrs	r2, r3, #5
     292:	01d2      	lsls	r2, r2, #7
     294:	495d      	ldr	r1, [pc, #372]	; (40c <artist_ultrasonic_get_value+0x18c>)
     296:	468c      	mov	ip, r1
     298:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     29a:	211f      	movs	r1, #31
     29c:	400b      	ands	r3, r1
     29e:	391e      	subs	r1, #30
     2a0:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     2a2:	6151      	str	r1, [r2, #20]
	delay_us(40);
     2a4:	2028      	movs	r0, #40	; 0x28
     2a6:	4b5a      	ldr	r3, [pc, #360]	; (410 <artist_ultrasonic_get_value+0x190>)
     2a8:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, true);
     2aa:	7863      	ldrb	r3, [r4, #1]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2ac:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     2ae:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2b0:	2900      	cmp	r1, #0
     2b2:	d104      	bne.n	2be <artist_ultrasonic_get_value+0x3e>
		return &(ports[port_index]->Group[group_index]);
     2b4:	095a      	lsrs	r2, r3, #5
     2b6:	01d2      	lsls	r2, r2, #7
     2b8:	4954      	ldr	r1, [pc, #336]	; (40c <artist_ultrasonic_get_value+0x18c>)
     2ba:	468c      	mov	ip, r1
     2bc:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2be:	211f      	movs	r1, #31
     2c0:	400b      	ands	r3, r1
     2c2:	391e      	subs	r1, #30
     2c4:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     2c6:	6191      	str	r1, [r2, #24]
	delay_us(10);
     2c8:	200a      	movs	r0, #10
     2ca:	4b51      	ldr	r3, [pc, #324]	; (410 <artist_ultrasonic_get_value+0x190>)
     2cc:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, false);
     2ce:	7863      	ldrb	r3, [r4, #1]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2d0:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     2d2:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2d4:	2900      	cmp	r1, #0
     2d6:	d104      	bne.n	2e2 <artist_ultrasonic_get_value+0x62>
		return &(ports[port_index]->Group[group_index]);
     2d8:	095a      	lsrs	r2, r3, #5
     2da:	01d2      	lsls	r2, r2, #7
     2dc:	494b      	ldr	r1, [pc, #300]	; (40c <artist_ultrasonic_get_value+0x18c>)
     2de:	468c      	mov	ip, r1
     2e0:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2e2:	211f      	movs	r1, #31
     2e4:	400b      	ands	r3, r1
     2e6:	391e      	subs	r1, #30
     2e8:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     2ea:	6151      	str	r1, [r2, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2ec:	4b49      	ldr	r3, [pc, #292]	; (414 <artist_ultrasonic_get_value+0x194>)
     2ee:	681a      	ldr	r2, [r3, #0]

	while (tc_is_syncing(module_inst)) {
     2f0:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     2f2:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     2f4:	438b      	bics	r3, r1
     2f6:	d1fc      	bne.n	2f2 <artist_ultrasonic_get_value+0x72>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
     2f8:	7113      	strb	r3, [r2, #4]

	while (tc_is_syncing(module_inst)) {
     2fa:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     2fc:	7bd3      	ldrb	r3, [r2, #15]
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;

	while (tc_is_syncing(module_inst)) {
     2fe:	438b      	bics	r3, r1
     300:	d1fc      	bne.n	2fc <artist_ultrasonic_get_value+0x7c>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
     302:	3340      	adds	r3, #64	; 0x40
     304:	7153      	strb	r3, [r2, #5]
	tc_start_counter(&(artist_front.tc_instance_ultrasonic)); 
	while (!(port_pin_get_input_level(module->echo_pin))) {
     306:	7823      	ldrb	r3, [r4, #0]
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     308:	221f      	movs	r2, #31
     30a:	401a      	ands	r2, r3
     30c:	2001      	movs	r0, #1
     30e:	4090      	lsls	r0, r2
     310:	09da      	lsrs	r2, r3, #7
     312:	2100      	movs	r1, #0
     314:	2a00      	cmp	r2, #0
     316:	d104      	bne.n	322 <artist_ultrasonic_get_value+0xa2>
     318:	0959      	lsrs	r1, r3, #5
     31a:	01c9      	lsls	r1, r1, #7
     31c:	4b3b      	ldr	r3, [pc, #236]	; (40c <artist_ultrasonic_get_value+0x18c>)
     31e:	469c      	mov	ip, r3
     320:	4461      	add	r1, ip
     322:	4b3d      	ldr	r3, [pc, #244]	; (418 <artist_ultrasonic_get_value+0x198>)
     324:	e005      	b.n	332 <artist_ultrasonic_get_value+0xb2>
     326:	3b01      	subs	r3, #1
     328:	b29b      	uxth	r3, r3
		count ++;
		if (count > 0xFF00) return module->fliter_old_val; 
     32a:	2b00      	cmp	r3, #0
     32c:	d101      	bne.n	332 <artist_ultrasonic_get_value+0xb2>
     32e:	6860      	ldr	r0, [r4, #4]
     330:	e069      	b.n	406 <artist_ultrasonic_get_value+0x186>

	return (port_base->IN.reg & pin_mask);
     332:	6a0a      	ldr	r2, [r1, #32]
	delay_us(40);
	port_pin_set_output_level(module->trigger_pin, true);
	delay_us(10);
	port_pin_set_output_level(module->trigger_pin, false);
	tc_start_counter(&(artist_front.tc_instance_ultrasonic)); 
	while (!(port_pin_get_input_level(module->echo_pin))) {
     334:	4202      	tst	r2, r0
     336:	d0f6      	beq.n	326 <artist_ultrasonic_get_value+0xa6>
		count ++;
		if (count > 0xFF00) return module->fliter_old_val; 
	}
	count =0; 
	start = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
     338:	4836      	ldr	r0, [pc, #216]	; (414 <artist_ultrasonic_get_value+0x194>)
     33a:	4b38      	ldr	r3, [pc, #224]	; (41c <artist_ultrasonic_get_value+0x19c>)
     33c:	4798      	blx	r3
     33e:	0005      	movs	r5, r0
	while ((port_pin_get_input_level(module->echo_pin)))  {
     340:	7823      	ldrb	r3, [r4, #0]
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     342:	221f      	movs	r2, #31
     344:	401a      	ands	r2, r3
     346:	2001      	movs	r0, #1
     348:	4090      	lsls	r0, r2
     34a:	09da      	lsrs	r2, r3, #7
     34c:	2100      	movs	r1, #0
     34e:	2a00      	cmp	r2, #0
     350:	d104      	bne.n	35c <artist_ultrasonic_get_value+0xdc>
     352:	0959      	lsrs	r1, r3, #5
     354:	01c9      	lsls	r1, r1, #7
     356:	4b2d      	ldr	r3, [pc, #180]	; (40c <artist_ultrasonic_get_value+0x18c>)
     358:	469c      	mov	ip, r3
     35a:	4461      	add	r1, ip
     35c:	4b2e      	ldr	r3, [pc, #184]	; (418 <artist_ultrasonic_get_value+0x198>)
     35e:	e005      	b.n	36c <artist_ultrasonic_get_value+0xec>
     360:	3b01      	subs	r3, #1
     362:	b29b      	uxth	r3, r3
		count ++;
		if (count > 0xFF00) return module->fliter_old_val;  
     364:	2b00      	cmp	r3, #0
     366:	d101      	bne.n	36c <artist_ultrasonic_get_value+0xec>
     368:	6860      	ldr	r0, [r4, #4]
     36a:	e04c      	b.n	406 <artist_ultrasonic_get_value+0x186>

	return (port_base->IN.reg & pin_mask);
     36c:	6a0a      	ldr	r2, [r1, #32]
		count ++;
		if (count > 0xFF00) return module->fliter_old_val; 
	}
	count =0; 
	start = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
	while ((port_pin_get_input_level(module->echo_pin)))  {
     36e:	4202      	tst	r2, r0
     370:	d1f6      	bne.n	360 <artist_ultrasonic_get_value+0xe0>
		count ++;
		if (count > 0xFF00) return module->fliter_old_val;  
	}
	end = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
     372:	4e28      	ldr	r6, [pc, #160]	; (414 <artist_ultrasonic_get_value+0x194>)
     374:	0030      	movs	r0, r6
     376:	4b29      	ldr	r3, [pc, #164]	; (41c <artist_ultrasonic_get_value+0x19c>)
     378:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     37a:	6832      	ldr	r2, [r6, #0]

	while (tc_is_syncing(module_inst)) {
     37c:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     37e:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     380:	438b      	bics	r3, r1
     382:	d1fc      	bne.n	37e <artist_ultrasonic_get_value+0xfe>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
     384:	3380      	adds	r3, #128	; 0x80
     386:	7153      	strb	r3, [r2, #5]
	tc_stop_counter(&(artist_front.tc_instance_ultrasonic));

	float new = ((float)(end - start)) * 0.017;
     388:	0400      	lsls	r0, r0, #16
     38a:	0c03      	lsrs	r3, r0, #16
     38c:	042d      	lsls	r5, r5, #16
     38e:	0c2d      	lsrs	r5, r5, #16
     390:	1b58      	subs	r0, r3, r5
     392:	4f23      	ldr	r7, [pc, #140]	; (420 <artist_ultrasonic_get_value+0x1a0>)
     394:	47b8      	blx	r7
     396:	4b23      	ldr	r3, [pc, #140]	; (424 <artist_ultrasonic_get_value+0x1a4>)
     398:	4798      	blx	r3
     39a:	4a23      	ldr	r2, [pc, #140]	; (428 <artist_ultrasonic_get_value+0x1a8>)
     39c:	4b23      	ldr	r3, [pc, #140]	; (42c <artist_ultrasonic_get_value+0x1ac>)
     39e:	4d24      	ldr	r5, [pc, #144]	; (430 <artist_ultrasonic_get_value+0x1b0>)
     3a0:	47a8      	blx	r5
     3a2:	4b24      	ldr	r3, [pc, #144]	; (434 <artist_ultrasonic_get_value+0x1b4>)
     3a4:	4798      	blx	r3
     3a6:	9001      	str	r0, [sp, #4]
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     3a8:	6865      	ldr	r5, [r4, #4]
	port_pin_set_config(artist_front.us_instance_right.echo_pin, &pin_config_echo_right); 
}
static float artist_HC_SR04_filter(struct artist_ultrasonic_module * module,
float new, float old, float FILTER_VAL ) {
	
	if (new > old * module->filter_large_change_counts ||
     3aa:	78a6      	ldrb	r6, [r4, #2]
     3ac:	0030      	movs	r0, r6
     3ae:	47b8      	blx	r7
     3b0:	1c07      	adds	r7, r0, #0
     3b2:	1c01      	adds	r1, r0, #0
     3b4:	1c28      	adds	r0, r5, #0
     3b6:	4b20      	ldr	r3, [pc, #128]	; (438 <artist_ultrasonic_get_value+0x1b8>)
     3b8:	4798      	blx	r3
     3ba:	1c01      	adds	r1, r0, #0
     3bc:	9801      	ldr	r0, [sp, #4]
     3be:	4b1f      	ldr	r3, [pc, #124]	; (43c <artist_ultrasonic_get_value+0x1bc>)
     3c0:	4798      	blx	r3
     3c2:	2800      	cmp	r0, #0
     3c4:	d109      	bne.n	3da <artist_ultrasonic_get_value+0x15a>
     3c6:	1c39      	adds	r1, r7, #0
     3c8:	1c28      	adds	r0, r5, #0
     3ca:	4b1d      	ldr	r3, [pc, #116]	; (440 <artist_ultrasonic_get_value+0x1c0>)
     3cc:	4798      	blx	r3
     3ce:	1c01      	adds	r1, r0, #0
     3d0:	9801      	ldr	r0, [sp, #4]
     3d2:	4b1c      	ldr	r3, [pc, #112]	; (444 <artist_ultrasonic_get_value+0x1c4>)
     3d4:	4798      	blx	r3
     3d6:	2800      	cmp	r0, #0
     3d8:	d008      	beq.n	3ec <artist_ultrasonic_get_value+0x16c>
	new < old * 1/module->filter_large_change_counts ) {
		module->filter_large_change_counts ++;
     3da:	1c73      	adds	r3, r6, #1
     3dc:	b2db      	uxtb	r3, r3
		if (module->filter_large_change_counts > 3)		
     3de:	2b03      	cmp	r3, #3
     3e0:	d802      	bhi.n	3e8 <artist_ultrasonic_get_value+0x168>
static float artist_HC_SR04_filter(struct artist_ultrasonic_module * module,
float new, float old, float FILTER_VAL ) {
	
	if (new > old * module->filter_large_change_counts ||
	new < old * 1/module->filter_large_change_counts ) {
		module->filter_large_change_counts ++;
     3e2:	70a3      	strb	r3, [r4, #2]
		if (module->filter_large_change_counts > 3)		
			module->filter_large_change_counts = 0;
		else 											
			new = old;
     3e4:	9501      	str	r5, [sp, #4]
     3e6:	e001      	b.n	3ec <artist_ultrasonic_get_value+0x16c>
	
	if (new > old * module->filter_large_change_counts ||
	new < old * 1/module->filter_large_change_counts ) {
		module->filter_large_change_counts ++;
		if (module->filter_large_change_counts > 3)		
			module->filter_large_change_counts = 0;
     3e8:	2300      	movs	r3, #0
     3ea:	70a3      	strb	r3, [r4, #2]
			new = old;
	}
	if (FILTER_VAL > 1)			FILTER_VAL = 1;
	else if (FILTER_VAL < 0)	FILTER_VAL = 0;

	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
     3ec:	4f12      	ldr	r7, [pc, #72]	; (438 <artist_ultrasonic_get_value+0x1b8>)
     3ee:	4916      	ldr	r1, [pc, #88]	; (448 <artist_ultrasonic_get_value+0x1c8>)
     3f0:	9801      	ldr	r0, [sp, #4]
     3f2:	47b8      	blx	r7
     3f4:	1c06      	adds	r6, r0, #0
     3f6:	4915      	ldr	r1, [pc, #84]	; (44c <artist_ultrasonic_get_value+0x1cc>)
     3f8:	1c28      	adds	r0, r5, #0
     3fa:	47b8      	blx	r7
     3fc:	1c01      	adds	r1, r0, #0
     3fe:	1c30      	adds	r0, r6, #0
     400:	4b13      	ldr	r3, [pc, #76]	; (450 <artist_ultrasonic_get_value+0x1d0>)
     402:	4798      	blx	r3
	}
	end = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
	tc_stop_counter(&(artist_front.tc_instance_ultrasonic));

	float new = ((float)(end - start)) * 0.017;
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     404:	6060      	str	r0, [r4, #4]
	return module->fliter_old_val;
}
     406:	b003      	add	sp, #12
     408:	bdf0      	pop	{r4, r5, r6, r7, pc}
     40a:	46c0      	nop			; (mov r8, r8)
     40c:	41004400 	.word	0x41004400
     410:	000008e5 	.word	0x000008e5
     414:	20000684 	.word	0x20000684
     418:	0000ff01 	.word	0x0000ff01
     41c:	00002709 	.word	0x00002709
     420:	00006b35 	.word	0x00006b35
     424:	000087a1 	.word	0x000087a1
     428:	b020c49c 	.word	0xb020c49c
     42c:	3f916872 	.word	0x3f916872
     430:	00007a65 	.word	0x00007a65
     434:	00008849 	.word	0x00008849
     438:	0000690d 	.word	0x0000690d
     43c:	0000620d 	.word	0x0000620d
     440:	00006579 	.word	0x00006579
     444:	000061e5 	.word	0x000061e5
     448:	3ecccccc 	.word	0x3ecccccc
     44c:	3f19999a 	.word	0x3f19999a
     450:	0000628d 	.word	0x0000628d

00000454 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     456:	464f      	mov	r7, r9
     458:	4646      	mov	r6, r8
     45a:	b4c0      	push	{r6, r7}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     45c:	0080      	lsls	r0, r0, #2
     45e:	4b11      	ldr	r3, [pc, #68]	; (4a4 <_tcc_interrupt_handler+0x50>)
     460:	58c3      	ldr	r3, [r0, r3]
     462:	4699      	mov	r9, r3
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     464:	681b      	ldr	r3, [r3, #0]
     466:	6adf      	ldr	r7, [r3, #44]	; 0x2c
     468:	464b      	mov	r3, r9
     46a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     46c:	401f      	ands	r7, r3
     46e:	464b      	mov	r3, r9
     470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     472:	401f      	ands	r7, r3
     474:	4d0c      	ldr	r5, [pc, #48]	; (4a8 <_tcc_interrupt_handler+0x54>)
     476:	464b      	mov	r3, r9
     478:	1d1c      	adds	r4, r3, #4
     47a:	2334      	movs	r3, #52	; 0x34
     47c:	444b      	add	r3, r9
     47e:	4698      	mov	r8, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     480:	682e      	ldr	r6, [r5, #0]
     482:	423e      	tst	r6, r7
     484:	d005      	beq.n	492 <_tcc_interrupt_handler+0x3e>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     486:	4648      	mov	r0, r9
     488:	6823      	ldr	r3, [r4, #0]
     48a:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     48c:	464b      	mov	r3, r9
     48e:	681b      	ldr	r3, [r3, #0]
     490:	62de      	str	r6, [r3, #44]	; 0x2c
     492:	3504      	adds	r5, #4
     494:	3404      	adds	r4, #4
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     496:	4544      	cmp	r4, r8
     498:	d1f2      	bne.n	480 <_tcc_interrupt_handler+0x2c>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
     49a:	bc0c      	pop	{r2, r3}
     49c:	4690      	mov	r8, r2
     49e:	4699      	mov	r9, r3
     4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4a2:	46c0      	nop			; (mov r8, r8)
     4a4:	20000768 	.word	0x20000768
     4a8:	000089c4 	.word	0x000089c4

000004ac <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     4ac:	b510      	push	{r4, lr}
     4ae:	2000      	movs	r0, #0
     4b0:	4b01      	ldr	r3, [pc, #4]	; (4b8 <TCC0_Handler+0xc>)
     4b2:	4798      	blx	r3
     4b4:	bd10      	pop	{r4, pc}
     4b6:	46c0      	nop			; (mov r8, r8)
     4b8:	00000455 	.word	0x00000455

000004bc <TCC1_Handler>:
     4bc:	b510      	push	{r4, lr}
     4be:	2001      	movs	r0, #1
     4c0:	4b01      	ldr	r3, [pc, #4]	; (4c8 <TCC1_Handler+0xc>)
     4c2:	4798      	blx	r3
     4c4:	bd10      	pop	{r4, pc}
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	00000455 	.word	0x00000455

000004cc <TCC2_Handler>:
     4cc:	b510      	push	{r4, lr}
     4ce:	2002      	movs	r0, #2
     4d0:	4b01      	ldr	r3, [pc, #4]	; (4d8 <TCC2_Handler+0xc>)
     4d2:	4798      	blx	r3
     4d4:	bd10      	pop	{r4, pc}
     4d6:	46c0      	nop			; (mov r8, r8)
     4d8:	00000455 	.word	0x00000455

000004dc <usart_write_callback>:

}
void usart_write_callback(struct usart_module *const usart_module)
{
	
}
     4dc:	4770      	bx	lr
     4de:	46c0      	nop			; (mov r8, r8)

000004e0 <usart_read_callback>:
	tc_enable(&(artist_front.tc_instance_ultrasonic));
}


void usart_read_callback(struct usart_module * const usart_instance)
{
     4e0:	b510      	push	{r4, lr}
     4e2:	0004      	movs	r4, r0
	switch(rx_buffer[0]) {
     4e4:	4b0b      	ldr	r3, [pc, #44]	; (514 <usart_read_callback+0x34>)
     4e6:	781b      	ldrb	r3, [r3, #0]
     4e8:	b2db      	uxtb	r3, r3
     4ea:	2b20      	cmp	r3, #32
     4ec:	d006      	beq.n	4fc <usart_read_callback+0x1c>
     4ee:	2b77      	cmp	r3, #119	; 0x77
     4f0:	d109      	bne.n	506 <usart_read_callback+0x26>
		case 'c' : 
		break; 
		case 'w' :
		usart_write_buffer_job(usart_instance, "mw\0\0\0", MAX_RX_BUFFER_LENGTH);
     4f2:	2205      	movs	r2, #5
     4f4:	4908      	ldr	r1, [pc, #32]	; (518 <usart_read_callback+0x38>)
     4f6:	4b09      	ldr	r3, [pc, #36]	; (51c <usart_read_callback+0x3c>)
     4f8:	4798      	blx	r3
		break; 
     4fa:	e004      	b.n	506 <usart_read_callback+0x26>
		case ' ' : 
		usart_write_buffer_job(usart_instance, "m \0\0\0", MAX_RX_BUFFER_LENGTH);
     4fc:	2205      	movs	r2, #5
     4fe:	4906      	ldr	r1, [pc, #24]	; (518 <usart_read_callback+0x38>)
     500:	3108      	adds	r1, #8
     502:	4b06      	ldr	r3, [pc, #24]	; (51c <usart_read_callback+0x3c>)
     504:	4798      	blx	r3
		break;
	}
	usart_read_buffer_job( usart_instance,
     506:	2205      	movs	r2, #5
     508:	4902      	ldr	r1, [pc, #8]	; (514 <usart_read_callback+0x34>)
     50a:	0020      	movs	r0, r4
     50c:	4b04      	ldr	r3, [pc, #16]	; (520 <usart_read_callback+0x40>)
     50e:	4798      	blx	r3
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
	

}
     510:	bd10      	pop	{r4, pc}
     512:	46c0      	nop			; (mov r8, r8)
     514:	20000760 	.word	0x20000760
     518:	000089f4 	.word	0x000089f4
     51c:	000018f5 	.word	0x000018f5
     520:	00001915 	.word	0x00001915

00000524 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     524:	b570      	push	{r4, r5, r6, lr}
     526:	b082      	sub	sp, #8
     528:	0005      	movs	r5, r0
     52a:	000e      	movs	r6, r1
	uint16_t temp = 0;
     52c:	2200      	movs	r2, #0
     52e:	466b      	mov	r3, sp
     530:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     532:	4c06      	ldr	r4, [pc, #24]	; (54c <usart_serial_getchar+0x28>)
     534:	466b      	mov	r3, sp
     536:	1d99      	adds	r1, r3, #6
     538:	0028      	movs	r0, r5
     53a:	47a0      	blx	r4
     53c:	2800      	cmp	r0, #0
     53e:	d1f9      	bne.n	534 <usart_serial_getchar+0x10>

	*c = temp;
     540:	466b      	mov	r3, sp
     542:	3306      	adds	r3, #6
     544:	881b      	ldrh	r3, [r3, #0]
     546:	7033      	strb	r3, [r6, #0]
}
     548:	b002      	add	sp, #8
     54a:	bd70      	pop	{r4, r5, r6, pc}
     54c:	000017e1 	.word	0x000017e1

00000550 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     550:	b570      	push	{r4, r5, r6, lr}
     552:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     554:	b28c      	uxth	r4, r1
     556:	4e03      	ldr	r6, [pc, #12]	; (564 <usart_serial_putchar+0x14>)
     558:	0021      	movs	r1, r4
     55a:	0028      	movs	r0, r5
     55c:	47b0      	blx	r6
     55e:	2800      	cmp	r0, #0
     560:	d1fa      	bne.n	558 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
     562:	bd70      	pop	{r4, r5, r6, pc}
     564:	000017b5 	.word	0x000017b5

00000568 <artist_ultrasonic_tc_configure>:
*  Author: credt
*/

#include "TheArtist.h"

void artist_ultrasonic_tc_configure() {
     568:	b510      	push	{r4, lr}
     56a:	b08e      	sub	sp, #56	; 0x38
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     56c:	aa01      	add	r2, sp, #4
     56e:	2300      	movs	r3, #0
     570:	2100      	movs	r1, #0
     572:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     574:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     576:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     578:	2000      	movs	r0, #0
     57a:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     57c:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     57e:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     580:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     582:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     584:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     586:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     588:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     58a:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     58c:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     58e:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     590:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     592:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     594:	8593      	strh	r3, [r2, #44]	; 0x2c
	struct tc_config config;
	
	tc_get_config_defaults(&config);
	
	config.counter_size = TC_COUNTER_SIZE_16BIT;
	config.clock_source = GCLK_GENERATOR_3;
     596:	3303      	adds	r3, #3
     598:	7013      	strb	r3, [r2, #0]
	config.clock_prescaler = TC_CLOCK_PRESCALER_DIV8;
     59a:	23c0      	movs	r3, #192	; 0xc0
     59c:	009b      	lsls	r3, r3, #2
     59e:	8093      	strh	r3, [r2, #4]
	config.enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = true;
     5a0:	2301      	movs	r3, #1
     5a2:	72d3      	strb	r3, [r2, #11]
	tc_init(&(artist_front.tc_instance_ultrasonic), TC4, &config);
     5a4:	4c07      	ldr	r4, [pc, #28]	; (5c4 <artist_ultrasonic_tc_configure+0x5c>)
     5a6:	4908      	ldr	r1, [pc, #32]	; (5c8 <artist_ultrasonic_tc_configure+0x60>)
     5a8:	0020      	movs	r0, r4
     5aa:	4b08      	ldr	r3, [pc, #32]	; (5cc <artist_ultrasonic_tc_configure+0x64>)
     5ac:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     5ae:	6822      	ldr	r2, [r4, #0]

	while (tc_is_syncing(module_inst)) {
     5b0:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     5b2:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     5b4:	438b      	bics	r3, r1
     5b6:	d1fc      	bne.n	5b2 <artist_ultrasonic_tc_configure+0x4a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     5b8:	8811      	ldrh	r1, [r2, #0]
     5ba:	3302      	adds	r3, #2
     5bc:	430b      	orrs	r3, r1
     5be:	8013      	strh	r3, [r2, #0]
	tc_enable(&(artist_front.tc_instance_ultrasonic));
}
     5c0:	b00e      	add	sp, #56	; 0x38
     5c2:	bd10      	pop	{r4, pc}
     5c4:	20000684 	.word	0x20000684
     5c8:	42003000 	.word	0x42003000
     5cc:	0000248d 	.word	0x0000248d

000005d0 <configure_usart_callbacks>:
	
}


void configure_usart_callbacks(struct usart_module * usart_instance)
{
     5d0:	b570      	push	{r4, r5, r6, lr}
     5d2:	0004      	movs	r4, r0
	//! [setup_register_callbacks]
	usart_register_callback(usart_instance,
     5d4:	2200      	movs	r2, #0
     5d6:	4906      	ldr	r1, [pc, #24]	; (5f0 <configure_usart_callbacks+0x20>)
     5d8:	4d06      	ldr	r5, [pc, #24]	; (5f4 <configure_usart_callbacks+0x24>)
     5da:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	
	usart_register_callback(usart_instance,
     5dc:	2201      	movs	r2, #1
     5de:	4906      	ldr	r1, [pc, #24]	; (5f8 <configure_usart_callbacks+0x28>)
     5e0:	0020      	movs	r0, r4
     5e2:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     5e4:	2231      	movs	r2, #49	; 0x31
     5e6:	5ca1      	ldrb	r1, [r4, r2]
     5e8:	2303      	movs	r3, #3
     5ea:	430b      	orrs	r3, r1
     5ec:	54a3      	strb	r3, [r4, r2]

	//! [setup_enable_callbacks]
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
	//! [setup_enable_callbacks]
}
     5ee:	bd70      	pop	{r4, r5, r6, pc}
     5f0:	000004dd 	.word	0x000004dd
     5f4:	000018dd 	.word	0x000018dd
     5f8:	000004e1 	.word	0x000004e1

000005fc <artist_usart_configure>:

void artist_usart_configure(struct usart_module * usart_instance) {
     5fc:	b570      	push	{r4, r5, r6, lr}
     5fe:	b090      	sub	sp, #64	; 0x40
     600:	0004      	movs	r4, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     602:	2380      	movs	r3, #128	; 0x80
     604:	05db      	lsls	r3, r3, #23
     606:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     608:	2300      	movs	r3, #0
     60a:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     60c:	22ff      	movs	r2, #255	; 0xff
     60e:	4669      	mov	r1, sp
     610:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     612:	2200      	movs	r2, #0
     614:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     616:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
     618:	2196      	movs	r1, #150	; 0x96
     61a:	0189      	lsls	r1, r1, #6
     61c:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
     61e:	2101      	movs	r1, #1
     620:	2024      	movs	r0, #36	; 0x24
     622:	466d      	mov	r5, sp
     624:	5429      	strb	r1, [r5, r0]
	config->transmitter_enable = true;
     626:	3001      	adds	r0, #1
     628:	5429      	strb	r1, [r5, r0]
	config->clock_polarity_inverted = false;
     62a:	3125      	adds	r1, #37	; 0x25
     62c:	546b      	strb	r3, [r5, r1]
	config->use_external_clock = false;
     62e:	3101      	adds	r1, #1
     630:	546b      	strb	r3, [r5, r1]
	config->ext_clock_freq   = 0;
     632:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     634:	3105      	adds	r1, #5
     636:	546b      	strb	r3, [r5, r1]
	config->generator_source = GCLK_GENERATOR_0;
     638:	3101      	adds	r1, #1
     63a:	546b      	strb	r3, [r5, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     63c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     63e:	822b      	strh	r3, [r5, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     640:	76eb      	strb	r3, [r5, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     642:	762a      	strb	r2, [r5, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     644:	772a      	strb	r2, [r5, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     646:	766a      	strb	r2, [r5, #25]
	config->receive_pulse_length                    = 19;
     648:	2313      	movs	r3, #19
     64a:	76ab      	strb	r3, [r5, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     64c:	776a      	strb	r2, [r5, #29]
	struct usart_config config;
	usart_get_config_defaults(&config);
	config.baudrate = CONF_ARTIST_BAUDRATE;
	config.mux_setting	= EDBG_CDC_SERCOM_MUX_SETTING;
     64e:	2380      	movs	r3, #128	; 0x80
     650:	035b      	lsls	r3, r3, #13
     652:	9303      	str	r3, [sp, #12]
	config.pinmux_pad0	= EDBG_CDC_SERCOM_PINMUX_PAD0;
     654:	4b1e      	ldr	r3, [pc, #120]	; (6d0 <artist_usart_configure+0xd4>)
     656:	930c      	str	r3, [sp, #48]	; 0x30
	config.pinmux_pad1	= EDBG_CDC_SERCOM_PINMUX_PAD1;
     658:	4b1e      	ldr	r3, [pc, #120]	; (6d4 <artist_usart_configure+0xd8>)
     65a:	930d      	str	r3, [sp, #52]	; 0x34
	config.pinmux_pad2	= EDBG_CDC_SERCOM_PINMUX_PAD2;
     65c:	2301      	movs	r3, #1
     65e:	425b      	negs	r3, r3
     660:	930e      	str	r3, [sp, #56]	; 0x38
	config.pinmux_pad3	= EDBG_CDC_SERCOM_PINMUX_PAD3;
     662:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(usart_instance, EDBG_CDC_MODULE, &config) != STATUS_OK);
     664:	4e1c      	ldr	r6, [pc, #112]	; (6d8 <artist_usart_configure+0xdc>)
     666:	4d1d      	ldr	r5, [pc, #116]	; (6dc <artist_usart_configure+0xe0>)
     668:	466a      	mov	r2, sp
     66a:	0031      	movs	r1, r6
     66c:	0020      	movs	r0, r4
     66e:	47a8      	blx	r5
     670:	2800      	cmp	r0, #0
     672:	d1f9      	bne.n	668 <artist_usart_configure+0x6c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     674:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     676:	0028      	movs	r0, r5
     678:	4b19      	ldr	r3, [pc, #100]	; (6e0 <artist_usart_configure+0xe4>)
     67a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     67c:	231f      	movs	r3, #31
     67e:	4018      	ands	r0, r3
     680:	3b1e      	subs	r3, #30
     682:	4083      	lsls	r3, r0
     684:	4a17      	ldr	r2, [pc, #92]	; (6e4 <artist_usart_configure+0xe8>)
     686:	6013      	str	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     688:	6822      	ldr	r2, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     68a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     68c:	2b00      	cmp	r3, #0
     68e:	d1fc      	bne.n	68a <artist_usart_configure+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     690:	682a      	ldr	r2, [r5, #0]
     692:	3302      	adds	r3, #2
     694:	4313      	orrs	r3, r2
     696:	602b      	str	r3, [r5, #0]
	
	
	usart_enable(usart_instance);
	configure_usart_callbacks(usart_instance);
     698:	0020      	movs	r0, r4
     69a:	4b13      	ldr	r3, [pc, #76]	; (6e8 <artist_usart_configure+0xec>)
     69c:	4798      	blx	r3
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     69e:	4b13      	ldr	r3, [pc, #76]	; (6ec <artist_usart_configure+0xf0>)
     6a0:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     6a2:	4a13      	ldr	r2, [pc, #76]	; (6f0 <artist_usart_configure+0xf4>)
     6a4:	4b13      	ldr	r3, [pc, #76]	; (6f4 <artist_usart_configure+0xf8>)
     6a6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     6a8:	4a13      	ldr	r2, [pc, #76]	; (6f8 <artist_usart_configure+0xfc>)
     6aa:	4b14      	ldr	r3, [pc, #80]	; (6fc <artist_usart_configure+0x100>)
     6ac:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
     6ae:	466a      	mov	r2, sp
     6b0:	4909      	ldr	r1, [pc, #36]	; (6d8 <artist_usart_configure+0xdc>)
     6b2:	0020      	movs	r0, r4
     6b4:	4b09      	ldr	r3, [pc, #36]	; (6dc <artist_usart_configure+0xe0>)
     6b6:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     6b8:	4d11      	ldr	r5, [pc, #68]	; (700 <artist_usart_configure+0x104>)
     6ba:	682b      	ldr	r3, [r5, #0]
     6bc:	6898      	ldr	r0, [r3, #8]
     6be:	2100      	movs	r1, #0
     6c0:	4c10      	ldr	r4, [pc, #64]	; (704 <artist_usart_configure+0x108>)
     6c2:	47a0      	blx	r4
	setbuf(stdin, NULL);
     6c4:	682b      	ldr	r3, [r5, #0]
     6c6:	6858      	ldr	r0, [r3, #4]
     6c8:	2100      	movs	r1, #0
     6ca:	47a0      	blx	r4
	
	stdio_serial_init(usart_instance, EDBG_CDC_MODULE, &config);
}
     6cc:	b010      	add	sp, #64	; 0x40
     6ce:	bd70      	pop	{r4, r5, r6, pc}
     6d0:	00040003 	.word	0x00040003
     6d4:	00050003 	.word	0x00050003
     6d8:	42000800 	.word	0x42000800
     6dc:	0000147d 	.word	0x0000147d
     6e0:	00001055 	.word	0x00001055
     6e4:	e000e100 	.word	0xe000e100
     6e8:	000005d1 	.word	0x000005d1
     6ec:	200007e4 	.word	0x200007e4
     6f0:	00000551 	.word	0x00000551
     6f4:	200007e0 	.word	0x200007e0
     6f8:	00000525 	.word	0x00000525
     6fc:	200007dc 	.word	0x200007dc
     700:	2000006c 	.word	0x2000006c
     704:	00003f31 	.word	0x00003f31

00000708 <artist_ultrasonic_update>:
	tcc_init(&(artist->tcc_instance), TCC0, &config);
	tcc_enable(&(artist->tcc_instance));
	*/
}

void artist_ultrasonic_update() {
     708:	b570      	push	{r4, r5, r6, lr}
	artist_front.center_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_center));
     70a:	4e09      	ldr	r6, [pc, #36]	; (730 <artist_ultrasonic_update+0x28>)
     70c:	0030      	movs	r0, r6
     70e:	4d09      	ldr	r5, [pc, #36]	; (734 <artist_ultrasonic_update+0x2c>)
     710:	47a8      	blx	r5
     712:	0034      	movs	r4, r6
     714:	3cb4      	subs	r4, #180	; 0xb4
     716:	61b0      	str	r0, [r6, #24]
	artist_front.right_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_right));
     718:	0020      	movs	r0, r4
     71a:	30c4      	adds	r0, #196	; 0xc4
     71c:	47a8      	blx	r5
     71e:	23d4      	movs	r3, #212	; 0xd4
     720:	50e0      	str	r0, [r4, r3]
	artist_front.left_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_left));
     722:	0020      	movs	r0, r4
     724:	30bc      	adds	r0, #188	; 0xbc
     726:	47a8      	blx	r5
     728:	23d0      	movs	r3, #208	; 0xd0
     72a:	50e0      	str	r0, [r4, r3]
}
     72c:	bd70      	pop	{r4, r5, r6, pc}
     72e:	46c0      	nop			; (mov r8, r8)
     730:	20000738 	.word	0x20000738
     734:	00000281 	.word	0x00000281

00000738 <callbacks>:
	//! [setup_enable]
	tc_enable(&(artist_front.tc_instance_timer));
	//! [setup_enable]
}

void callbacks (void) {
     738:	b510      	push	{r4, lr}
	// [ultra sonic]
	static uint16_t ultrasonic_counter		= 0;
	static uint16_t maze_counter			= 0; 
	static uint16_t pause_counter			= 0;
	ultrasonic_counter ++;
     73a:	4c1e      	ldr	r4, [pc, #120]	; (7b4 <callbacks+0x7c>)
     73c:	8823      	ldrh	r3, [r4, #0]
     73e:	3301      	adds	r3, #1
     740:	8023      	strh	r3, [r4, #0]
	maze_counter ++;
     742:	4b1d      	ldr	r3, [pc, #116]	; (7b8 <callbacks+0x80>)
     744:	8819      	ldrh	r1, [r3, #0]
     746:	3101      	adds	r1, #1
     748:	b289      	uxth	r1, r1
     74a:	8019      	strh	r1, [r3, #0]
	pause_counter ++;
     74c:	4b1b      	ldr	r3, [pc, #108]	; (7bc <callbacks+0x84>)
     74e:	881a      	ldrh	r2, [r3, #0]
     750:	3201      	adds	r2, #1
     752:	b292      	uxth	r2, r2
     754:	801a      	strh	r2, [r3, #0]
	printf(">>>>>>>>> %d %d <<<<<<<<<<\n", maze_counter, pause_counter);	
     756:	481a      	ldr	r0, [pc, #104]	; (7c0 <callbacks+0x88>)
     758:	4b1a      	ldr	r3, [pc, #104]	; (7c4 <callbacks+0x8c>)
     75a:	4798      	blx	r3
	if (ultrasonic_counter > 5) {
     75c:	8823      	ldrh	r3, [r4, #0]
     75e:	2b05      	cmp	r3, #5
     760:	d904      	bls.n	76c <callbacks+0x34>
		artist_ultrasonic_update();
     762:	4b19      	ldr	r3, [pc, #100]	; (7c8 <callbacks+0x90>)
     764:	4798      	blx	r3
		ultrasonic_counter = 0; 
     766:	2200      	movs	r2, #0
     768:	4b12      	ldr	r3, [pc, #72]	; (7b4 <callbacks+0x7c>)
     76a:	801a      	strh	r2, [r3, #0]
	}

	if(maze_counter > 20){
     76c:	4b12      	ldr	r3, [pc, #72]	; (7b8 <callbacks+0x80>)
     76e:	881b      	ldrh	r3, [r3, #0]
     770:	2b14      	cmp	r3, #20
     772:	d90d      	bls.n	790 <callbacks+0x58>
		printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
     774:	4815      	ldr	r0, [pc, #84]	; (7cc <callbacks+0x94>)
     776:	4b16      	ldr	r3, [pc, #88]	; (7d0 <callbacks+0x98>)
     778:	4798      	blx	r3
		if(artist_front.maze_status != STOP){
     77a:	23d8      	movs	r3, #216	; 0xd8
     77c:	4a15      	ldr	r2, [pc, #84]	; (7d4 <callbacks+0x9c>)
     77e:	5cd3      	ldrb	r3, [r2, r3]
     780:	2b03      	cmp	r3, #3
     782:	d005      	beq.n	790 <callbacks+0x58>
			artist_pause_maze();
     784:	4b14      	ldr	r3, [pc, #80]	; (7d8 <callbacks+0xa0>)
     786:	4798      	blx	r3
			pause_counter = 0;
     788:	2200      	movs	r2, #0
     78a:	4b0c      	ldr	r3, [pc, #48]	; (7bc <callbacks+0x84>)
     78c:	801a      	strh	r2, [r3, #0]
     78e:	e010      	b.n	7b2 <callbacks+0x7a>
		}
	}
	if (pause_counter > 60) {
     790:	4b0a      	ldr	r3, [pc, #40]	; (7bc <callbacks+0x84>)
     792:	881b      	ldrh	r3, [r3, #0]
     794:	2b3c      	cmp	r3, #60	; 0x3c
     796:	d90c      	bls.n	7b2 <callbacks+0x7a>
		printf("??????????????????????????????????????????????????\n");
     798:	4810      	ldr	r0, [pc, #64]	; (7dc <callbacks+0xa4>)
     79a:	4b0d      	ldr	r3, [pc, #52]	; (7d0 <callbacks+0x98>)
     79c:	4798      	blx	r3
		if(artist_front.maze_status == STOP){
     79e:	23d8      	movs	r3, #216	; 0xd8
     7a0:	4a0c      	ldr	r2, [pc, #48]	; (7d4 <callbacks+0x9c>)
     7a2:	5cd3      	ldrb	r3, [r2, r3]
     7a4:	2b03      	cmp	r3, #3
     7a6:	d104      	bne.n	7b2 <callbacks+0x7a>
			artist_do_maze(); 
     7a8:	4b0d      	ldr	r3, [pc, #52]	; (7e0 <callbacks+0xa8>)
     7aa:	4798      	blx	r3
			maze_counter = 0;
     7ac:	2200      	movs	r2, #0
     7ae:	4b02      	ldr	r3, [pc, #8]	; (7b8 <callbacks+0x80>)
     7b0:	801a      	strh	r2, [r3, #0]
		}
	}
	// ! [ultra sonic]
}
     7b2:	bd10      	pop	{r4, pc}
     7b4:	200000c4 	.word	0x200000c4
     7b8:	200000c8 	.word	0x200000c8
     7bc:	200000c6 	.word	0x200000c6
     7c0:	00008a04 	.word	0x00008a04
     7c4:	00003e25 	.word	0x00003e25
     7c8:	00000709 	.word	0x00000709
     7cc:	00008a20 	.word	0x00008a20
     7d0:	00003f1d 	.word	0x00003f1d
     7d4:	20000684 	.word	0x20000684
     7d8:	000001f5 	.word	0x000001f5
     7dc:	00008a58 	.word	0x00008a58
     7e0:	00000125 	.word	0x00000125

000007e4 <artist_scheduler_tc_configure>:
	artist_front.center_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_center));
	artist_front.right_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_right));
	artist_front.left_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_left));
}

void artist_scheduler_tc_configure() {
     7e4:	b510      	push	{r4, lr}
     7e6:	b08e      	sub	sp, #56	; 0x38

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     7e8:	aa01      	add	r2, sp, #4
     7ea:	2300      	movs	r3, #0
     7ec:	2100      	movs	r1, #0
     7ee:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     7f0:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     7f2:	2000      	movs	r0, #0
     7f4:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     7f6:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     7f8:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     7fa:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     7fc:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     7fe:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     800:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     802:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     804:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     806:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     808:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     80a:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     80c:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     80e:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     810:	8593      	strh	r3, [r2, #44]	; 0x2c
	//! [setup_config_defaults]
	tc_get_config_defaults(&config_tc);
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
     812:	3304      	adds	r3, #4
     814:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source = GCLK_GENERATOR_3;
     816:	3b01      	subs	r3, #1
     818:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024; //
     81a:	23e0      	movs	r3, #224	; 0xe0
     81c:	00db      	lsls	r3, r3, #3
     81e:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period = 50;
     820:	2132      	movs	r1, #50	; 0x32
     822:	2329      	movs	r3, #41	; 0x29
     824:	54d1      	strb	r1, [r2, r3]
	//config_tc.counter_8_bit.compare_capture_channel[0] = 5;
	//config_tc.counter_8_bit.compare_capture_channel[1] = 54;
	//! [setup_change_config]

	//! [20 Hz setup_set_config]
	tc_init(&(artist_front.tc_instance_timer), TC5, &config_tc);
     826:	4c08      	ldr	r4, [pc, #32]	; (848 <artist_scheduler_tc_configure+0x64>)
     828:	4908      	ldr	r1, [pc, #32]	; (84c <artist_scheduler_tc_configure+0x68>)
     82a:	0020      	movs	r0, r4
     82c:	4b08      	ldr	r3, [pc, #32]	; (850 <artist_scheduler_tc_configure+0x6c>)
     82e:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     830:	6822      	ldr	r2, [r4, #0]

	while (tc_is_syncing(module_inst)) {
     832:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     834:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     836:	438b      	bics	r3, r1
     838:	d1fc      	bne.n	834 <artist_scheduler_tc_configure+0x50>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     83a:	8811      	ldrh	r1, [r2, #0]
     83c:	3302      	adds	r3, #2
     83e:	430b      	orrs	r3, r1
     840:	8013      	strh	r3, [r2, #0]
	//! [setup_set_config]

	//! [setup_enable]
	tc_enable(&(artist_front.tc_instance_timer));
	//! [setup_enable]
}
     842:	b00e      	add	sp, #56	; 0x38
     844:	bd10      	pop	{r4, pc}
     846:	46c0      	nop			; (mov r8, r8)
     848:	200006a0 	.word	0x200006a0
     84c:	42003400 	.word	0x42003400
     850:	0000248d 	.word	0x0000248d

00000854 <artist_configure_tc_callbacks>:
		}
	}
	// ! [ultra sonic]
}
void artist_configure_tc_callbacks(void)
{
     854:	b510      	push	{r4, lr}
	tc_register_callback(&(artist_front.tc_instance_timer), callbacks ,
     856:	4c0d      	ldr	r4, [pc, #52]	; (88c <artist_configure_tc_callbacks+0x38>)
     858:	2200      	movs	r2, #0
     85a:	490d      	ldr	r1, [pc, #52]	; (890 <artist_configure_tc_callbacks+0x3c>)
     85c:	0020      	movs	r0, r4
     85e:	4b0d      	ldr	r3, [pc, #52]	; (894 <artist_configure_tc_callbacks+0x40>)
     860:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     862:	6820      	ldr	r0, [r4, #0]
     864:	3c1c      	subs	r4, #28
     866:	4b0c      	ldr	r3, [pc, #48]	; (898 <artist_configure_tc_callbacks+0x44>)
     868:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     86a:	4b0c      	ldr	r3, [pc, #48]	; (89c <artist_configure_tc_callbacks+0x48>)
     86c:	5c1b      	ldrb	r3, [r3, r0]
     86e:	221f      	movs	r2, #31
     870:	4013      	ands	r3, r2
     872:	3a1e      	subs	r2, #30
     874:	0011      	movs	r1, r2
     876:	4099      	lsls	r1, r3
     878:	4b09      	ldr	r3, [pc, #36]	; (8a0 <artist_configure_tc_callbacks+0x4c>)
     87a:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     87c:	2135      	movs	r1, #53	; 0x35
     87e:	5c60      	ldrb	r0, [r4, r1]
     880:	2301      	movs	r3, #1
     882:	4303      	orrs	r3, r0
     884:	5463      	strb	r3, [r4, r1]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     886:	69e3      	ldr	r3, [r4, #28]
     888:	735a      	strb	r2, [r3, #13]
	TC_CALLBACK_OVERFLOW);
	
	tc_enable_callback(&(artist_front.tc_instance_timer), TC_CALLBACK_OVERFLOW);
     88a:	bd10      	pop	{r4, pc}
     88c:	200006a0 	.word	0x200006a0
     890:	00000739 	.word	0x00000739
     894:	00002399 	.word	0x00002399
     898:	00002455 	.word	0x00002455
     89c:	00008a8c 	.word	0x00008a8c
     8a0:	e000e100 	.word	0xe000e100

000008a4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     8a4:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     8a6:	2000      	movs	r0, #0
     8a8:	4b08      	ldr	r3, [pc, #32]	; (8cc <delay_init+0x28>)
     8aa:	4798      	blx	r3
     8ac:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     8ae:	4c08      	ldr	r4, [pc, #32]	; (8d0 <delay_init+0x2c>)
     8b0:	21fa      	movs	r1, #250	; 0xfa
     8b2:	0089      	lsls	r1, r1, #2
     8b4:	47a0      	blx	r4
     8b6:	4b07      	ldr	r3, [pc, #28]	; (8d4 <delay_init+0x30>)
     8b8:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     8ba:	4907      	ldr	r1, [pc, #28]	; (8d8 <delay_init+0x34>)
     8bc:	0028      	movs	r0, r5
     8be:	47a0      	blx	r4
     8c0:	4b06      	ldr	r3, [pc, #24]	; (8dc <delay_init+0x38>)
     8c2:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     8c4:	2205      	movs	r2, #5
     8c6:	4b06      	ldr	r3, [pc, #24]	; (8e0 <delay_init+0x3c>)
     8c8:	601a      	str	r2, [r3, #0]
}
     8ca:	bd70      	pop	{r4, r5, r6, pc}
     8cc:	00002129 	.word	0x00002129
     8d0:	00005e59 	.word	0x00005e59
     8d4:	20000004 	.word	0x20000004
     8d8:	000f4240 	.word	0x000f4240
     8dc:	20000000 	.word	0x20000000
     8e0:	e000e010 	.word	0xe000e010

000008e4 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     8e4:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     8e6:	4b08      	ldr	r3, [pc, #32]	; (908 <delay_cycles_us+0x24>)
     8e8:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     8ea:	4a08      	ldr	r2, [pc, #32]	; (90c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     8ec:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     8ee:	2180      	movs	r1, #128	; 0x80
     8f0:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
     8f2:	e006      	b.n	902 <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     8f4:	2c00      	cmp	r4, #0
     8f6:	d004      	beq.n	902 <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
     8f8:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     8fa:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     8fc:	6813      	ldr	r3, [r2, #0]
     8fe:	420b      	tst	r3, r1
     900:	d0fc      	beq.n	8fc <delay_cycles_us+0x18>
     902:	3801      	subs	r0, #1
     904:	d2f6      	bcs.n	8f4 <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
     906:	bd30      	pop	{r4, r5, pc}
     908:	20000000 	.word	0x20000000
     90c:	e000e010 	.word	0xe000e010

00000910 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     910:	4b0c      	ldr	r3, [pc, #48]	; (944 <cpu_irq_enter_critical+0x34>)
     912:	681b      	ldr	r3, [r3, #0]
     914:	2b00      	cmp	r3, #0
     916:	d110      	bne.n	93a <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     918:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     91c:	2b00      	cmp	r3, #0
     91e:	d109      	bne.n	934 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     920:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     922:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     926:	2200      	movs	r2, #0
     928:	4b07      	ldr	r3, [pc, #28]	; (948 <cpu_irq_enter_critical+0x38>)
     92a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     92c:	3201      	adds	r2, #1
     92e:	4b07      	ldr	r3, [pc, #28]	; (94c <cpu_irq_enter_critical+0x3c>)
     930:	701a      	strb	r2, [r3, #0]
     932:	e002      	b.n	93a <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     934:	2200      	movs	r2, #0
     936:	4b05      	ldr	r3, [pc, #20]	; (94c <cpu_irq_enter_critical+0x3c>)
     938:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     93a:	4a02      	ldr	r2, [pc, #8]	; (944 <cpu_irq_enter_critical+0x34>)
     93c:	6813      	ldr	r3, [r2, #0]
     93e:	3301      	adds	r3, #1
     940:	6013      	str	r3, [r2, #0]
}
     942:	4770      	bx	lr
     944:	200000cc 	.word	0x200000cc
     948:	20000008 	.word	0x20000008
     94c:	200000d0 	.word	0x200000d0

00000950 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     950:	4b08      	ldr	r3, [pc, #32]	; (974 <cpu_irq_leave_critical+0x24>)
     952:	681a      	ldr	r2, [r3, #0]
     954:	3a01      	subs	r2, #1
     956:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     958:	681b      	ldr	r3, [r3, #0]
     95a:	2b00      	cmp	r3, #0
     95c:	d109      	bne.n	972 <cpu_irq_leave_critical+0x22>
     95e:	4b06      	ldr	r3, [pc, #24]	; (978 <cpu_irq_leave_critical+0x28>)
     960:	781b      	ldrb	r3, [r3, #0]
     962:	2b00      	cmp	r3, #0
     964:	d005      	beq.n	972 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     966:	2201      	movs	r2, #1
     968:	4b04      	ldr	r3, [pc, #16]	; (97c <cpu_irq_leave_critical+0x2c>)
     96a:	701a      	strb	r2, [r3, #0]
     96c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     970:	b662      	cpsie	i
	}
}
     972:	4770      	bx	lr
     974:	200000cc 	.word	0x200000cc
     978:	200000d0 	.word	0x200000d0
     97c:	20000008 	.word	0x20000008

00000980 <system_board_init>:




void system_board_init(void)
{
     980:	b5f0      	push	{r4, r5, r6, r7, lr}
     982:	4647      	mov	r7, r8
     984:	b480      	push	{r7}
     986:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     988:	ac01      	add	r4, sp, #4
     98a:	2601      	movs	r6, #1
     98c:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     98e:	2700      	movs	r7, #0
     990:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     992:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     994:	0021      	movs	r1, r4
     996:	2013      	movs	r0, #19
     998:	4d27      	ldr	r5, [pc, #156]	; (a38 <system_board_init+0xb8>)
     99a:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     99c:	4b27      	ldr	r3, [pc, #156]	; (a3c <system_board_init+0xbc>)
     99e:	4698      	mov	r8, r3
     9a0:	2380      	movs	r3, #128	; 0x80
     9a2:	031b      	lsls	r3, r3, #12
     9a4:	4642      	mov	r2, r8
     9a6:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     9a8:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     9aa:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     9ac:	0021      	movs	r1, r4
     9ae:	201c      	movs	r0, #28
     9b0:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     9b2:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     9b4:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     9b6:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     9b8:	0021      	movs	r1, r4
     9ba:	2052      	movs	r0, #82	; 0x52
     9bc:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     9be:	0021      	movs	r1, r4
     9c0:	203e      	movs	r0, #62	; 0x3e
     9c2:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     9c4:	0021      	movs	r1, r4
     9c6:	203f      	movs	r0, #63	; 0x3f
     9c8:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     9ca:	0021      	movs	r1, r4
     9cc:	202f      	movs	r0, #47	; 0x2f
     9ce:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     9d0:	0021      	movs	r1, r4
     9d2:	2014      	movs	r0, #20
     9d4:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     9d6:	2280      	movs	r2, #128	; 0x80
     9d8:	02d2      	lsls	r2, r2, #11
     9da:	4b19      	ldr	r3, [pc, #100]	; (a40 <system_board_init+0xc0>)
     9dc:	619a      	str	r2, [r3, #24]
     9de:	3b80      	subs	r3, #128	; 0x80
     9e0:	2280      	movs	r2, #128	; 0x80
     9e2:	05d2      	lsls	r2, r2, #23
     9e4:	619a      	str	r2, [r3, #24]
     9e6:	2280      	movs	r2, #128	; 0x80
     9e8:	0612      	lsls	r2, r2, #24
     9ea:	619a      	str	r2, [r3, #24]
     9ec:	2280      	movs	r2, #128	; 0x80
     9ee:	0212      	lsls	r2, r2, #8
     9f0:	619a      	str	r2, [r3, #24]
     9f2:	2380      	movs	r3, #128	; 0x80
     9f4:	035b      	lsls	r3, r3, #13
     9f6:	4642      	mov	r2, r8
     9f8:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     9fa:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     9fc:	0021      	movs	r1, r4
     9fe:	2053      	movs	r0, #83	; 0x53
     a00:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     a02:	4a10      	ldr	r2, [pc, #64]	; (a44 <system_board_init+0xc4>)
     a04:	6a13      	ldr	r3, [r2, #32]
     a06:	2180      	movs	r1, #128	; 0x80
     a08:	0389      	lsls	r1, r1, #14
     a0a:	430b      	orrs	r3, r1
     a0c:	6213      	str	r3, [r2, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     a0e:	2204      	movs	r2, #4
     a10:	4b0d      	ldr	r3, [pc, #52]	; (a48 <system_board_init+0xc8>)
     a12:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     a14:	466b      	mov	r3, sp
     a16:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     a18:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     a1a:	2305      	movs	r3, #5
     a1c:	466a      	mov	r2, sp
     a1e:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     a20:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     a22:	4669      	mov	r1, sp
     a24:	2009      	movs	r0, #9
     a26:	4c09      	ldr	r4, [pc, #36]	; (a4c <system_board_init+0xcc>)
     a28:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     a2a:	4669      	mov	r1, sp
     a2c:	200c      	movs	r0, #12
     a2e:	47a0      	blx	r4
#endif

}
     a30:	b002      	add	sp, #8
     a32:	bc04      	pop	{r2}
     a34:	4690      	mov	r8, r2
     a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a38:	00000bf1 	.word	0x00000bf1
     a3c:	41004400 	.word	0x41004400
     a40:	41004500 	.word	0x41004500
     a44:	40000400 	.word	0x40000400
     a48:	42005400 	.word	0x42005400
     a4c:	00002339 	.word	0x00002339

00000a50 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     a50:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     a52:	2a00      	cmp	r2, #0
     a54:	d10d      	bne.n	a72 <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     a56:	008b      	lsls	r3, r1, #2
     a58:	4a07      	ldr	r2, [pc, #28]	; (a78 <extint_register_callback+0x28>)
     a5a:	589b      	ldr	r3, [r3, r2]
     a5c:	2b00      	cmp	r3, #0
     a5e:	d103      	bne.n	a68 <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
     a60:	0089      	lsls	r1, r1, #2
     a62:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     a64:	2300      	movs	r3, #0
     a66:	e004      	b.n	a72 <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
     a68:	4283      	cmp	r3, r0
     a6a:	d001      	beq.n	a70 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     a6c:	231d      	movs	r3, #29
     a6e:	e000      	b.n	a72 <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
     a70:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     a72:	0018      	movs	r0, r3
     a74:	4770      	bx	lr
     a76:	46c0      	nop			; (mov r8, r8)
     a78:	20000778 	.word	0x20000778

00000a7c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     a7c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     a7e:	2200      	movs	r2, #0
     a80:	4b15      	ldr	r3, [pc, #84]	; (ad8 <EIC_Handler+0x5c>)
     a82:	701a      	strb	r2, [r3, #0]
     a84:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     a86:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     a88:	4e14      	ldr	r6, [pc, #80]	; (adc <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     a8a:	4c13      	ldr	r4, [pc, #76]	; (ad8 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     a8c:	2b1f      	cmp	r3, #31
     a8e:	d919      	bls.n	ac4 <EIC_Handler+0x48>
     a90:	e00f      	b.n	ab2 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     a92:	2100      	movs	r1, #0
     a94:	e000      	b.n	a98 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     a96:	4912      	ldr	r1, [pc, #72]	; (ae0 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     a98:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     a9a:	009b      	lsls	r3, r3, #2
     a9c:	599b      	ldr	r3, [r3, r6]
     a9e:	2b00      	cmp	r3, #0
     aa0:	d000      	beq.n	aa4 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     aa2:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     aa4:	7823      	ldrb	r3, [r4, #0]
     aa6:	3301      	adds	r3, #1
     aa8:	b2db      	uxtb	r3, r3
     aaa:	7023      	strb	r3, [r4, #0]
     aac:	2b0f      	cmp	r3, #15
     aae:	d9ed      	bls.n	a8c <EIC_Handler+0x10>
     ab0:	e011      	b.n	ad6 <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     ab2:	0029      	movs	r1, r5
     ab4:	4019      	ands	r1, r3
     ab6:	2201      	movs	r2, #1
     ab8:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     aba:	2100      	movs	r1, #0
     abc:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     abe:	4211      	tst	r1, r2
     ac0:	d1e7      	bne.n	a92 <EIC_Handler+0x16>
     ac2:	e7ef      	b.n	aa4 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     ac4:	0029      	movs	r1, r5
     ac6:	4019      	ands	r1, r3
     ac8:	2201      	movs	r2, #1
     aca:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     acc:	4904      	ldr	r1, [pc, #16]	; (ae0 <EIC_Handler+0x64>)
     ace:	6909      	ldr	r1, [r1, #16]
     ad0:	4211      	tst	r1, r2
     ad2:	d1e0      	bne.n	a96 <EIC_Handler+0x1a>
     ad4:	e7e6      	b.n	aa4 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     ad6:	bd70      	pop	{r4, r5, r6, pc}
     ad8:	20000774 	.word	0x20000774
     adc:	20000778 	.word	0x20000778
     ae0:	40001800 	.word	0x40001800

00000ae4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     ae4:	4a04      	ldr	r2, [pc, #16]	; (af8 <_extint_enable+0x14>)
     ae6:	7811      	ldrb	r1, [r2, #0]
     ae8:	2302      	movs	r3, #2
     aea:	430b      	orrs	r3, r1
     aec:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     aee:	7853      	ldrb	r3, [r2, #1]
     af0:	b25b      	sxtb	r3, r3
     af2:	2b00      	cmp	r3, #0
     af4:	dbfb      	blt.n	aee <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     af6:	4770      	bx	lr
     af8:	40001800 	.word	0x40001800

00000afc <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     afc:	b500      	push	{lr}
     afe:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     b00:	4a12      	ldr	r2, [pc, #72]	; (b4c <_system_extint_init+0x50>)
     b02:	6991      	ldr	r1, [r2, #24]
     b04:	2340      	movs	r3, #64	; 0x40
     b06:	430b      	orrs	r3, r1
     b08:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     b0a:	a901      	add	r1, sp, #4
     b0c:	2300      	movs	r3, #0
     b0e:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     b10:	2005      	movs	r0, #5
     b12:	4b0f      	ldr	r3, [pc, #60]	; (b50 <_system_extint_init+0x54>)
     b14:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     b16:	2005      	movs	r0, #5
     b18:	4b0e      	ldr	r3, [pc, #56]	; (b54 <_system_extint_init+0x58>)
     b1a:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     b1c:	4a0e      	ldr	r2, [pc, #56]	; (b58 <_system_extint_init+0x5c>)
     b1e:	7811      	ldrb	r1, [r2, #0]
     b20:	2301      	movs	r3, #1
     b22:	430b      	orrs	r3, r1
     b24:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     b26:	7853      	ldrb	r3, [r2, #1]
     b28:	b25b      	sxtb	r3, r3
     b2a:	2b00      	cmp	r3, #0
     b2c:	dbfb      	blt.n	b26 <_system_extint_init+0x2a>
     b2e:	4b0b      	ldr	r3, [pc, #44]	; (b5c <_system_extint_init+0x60>)
     b30:	0019      	movs	r1, r3
     b32:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     b34:	2200      	movs	r2, #0
     b36:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     b38:	4299      	cmp	r1, r3
     b3a:	d1fc      	bne.n	b36 <_system_extint_init+0x3a>
     b3c:	2210      	movs	r2, #16
     b3e:	4b08      	ldr	r3, [pc, #32]	; (b60 <_system_extint_init+0x64>)
     b40:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     b42:	4b08      	ldr	r3, [pc, #32]	; (b64 <_system_extint_init+0x68>)
     b44:	4798      	blx	r3
}
     b46:	b003      	add	sp, #12
     b48:	bd00      	pop	{pc}
     b4a:	46c0      	nop			; (mov r8, r8)
     b4c:	40000400 	.word	0x40000400
     b50:	00002241 	.word	0x00002241
     b54:	000021b5 	.word	0x000021b5
     b58:	40001800 	.word	0x40001800
     b5c:	20000778 	.word	0x20000778
     b60:	e000e100 	.word	0xe000e100
     b64:	00000ae5 	.word	0x00000ae5

00000b68 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     b68:	2300      	movs	r3, #0
     b6a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     b6c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     b6e:	2201      	movs	r2, #1
     b70:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     b72:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     b74:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     b76:	3302      	adds	r3, #2
     b78:	72c3      	strb	r3, [r0, #11]
}
     b7a:	4770      	bx	lr

00000b7c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b7e:	b083      	sub	sp, #12
     b80:	0005      	movs	r5, r0
     b82:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b84:	a901      	add	r1, sp, #4
     b86:	2300      	movs	r3, #0
     b88:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     b8a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     b8c:	7923      	ldrb	r3, [r4, #4]
     b8e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     b90:	7a23      	ldrb	r3, [r4, #8]
     b92:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     b94:	7820      	ldrb	r0, [r4, #0]
     b96:	4b14      	ldr	r3, [pc, #80]	; (be8 <extint_chan_set_config+0x6c>)
     b98:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     b9a:	2000      	movs	r0, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     b9c:	2d1f      	cmp	r5, #31
     b9e:	d800      	bhi.n	ba2 <extint_chan_set_config+0x26>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     ba0:	4812      	ldr	r0, [pc, #72]	; (bec <extint_chan_set_config+0x70>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     ba2:	2107      	movs	r1, #7
     ba4:	4029      	ands	r1, r5
     ba6:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     ba8:	7ae2      	ldrb	r2, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     baa:	7aa3      	ldrb	r3, [r4, #10]
     bac:	2b00      	cmp	r3, #0
     bae:	d001      	beq.n	bb4 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
     bb0:	2308      	movs	r3, #8
     bb2:	431a      	orrs	r2, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     bb4:	08eb      	lsrs	r3, r5, #3
     bb6:	009b      	lsls	r3, r3, #2
     bb8:	18c3      	adds	r3, r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
     bba:	699e      	ldr	r6, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     bbc:	270f      	movs	r7, #15
     bbe:	408f      	lsls	r7, r1
     bc0:	43be      	bics	r6, r7
     bc2:	408a      	lsls	r2, r1
     bc4:	4332      	orrs	r2, r6
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     bc6:	619a      	str	r2, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     bc8:	7a63      	ldrb	r3, [r4, #9]
     bca:	2b00      	cmp	r3, #0
     bcc:	d005      	beq.n	bda <extint_chan_set_config+0x5e>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     bce:	6942      	ldr	r2, [r0, #20]
     bd0:	2301      	movs	r3, #1
     bd2:	40ab      	lsls	r3, r5
     bd4:	4313      	orrs	r3, r2
     bd6:	6143      	str	r3, [r0, #20]
     bd8:	e004      	b.n	be4 <extint_chan_set_config+0x68>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     bda:	6943      	ldr	r3, [r0, #20]
     bdc:	2201      	movs	r2, #1
     bde:	40aa      	lsls	r2, r5
     be0:	4393      	bics	r3, r2
     be2:	6143      	str	r3, [r0, #20]
	}
}
     be4:	b003      	add	sp, #12
     be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     be8:	00002339 	.word	0x00002339
     bec:	40001800 	.word	0x40001800

00000bf0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     bf0:	b500      	push	{lr}
     bf2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     bf4:	ab01      	add	r3, sp, #4
     bf6:	2280      	movs	r2, #128	; 0x80
     bf8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     bfa:	780a      	ldrb	r2, [r1, #0]
     bfc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     bfe:	784a      	ldrb	r2, [r1, #1]
     c00:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     c02:	788a      	ldrb	r2, [r1, #2]
     c04:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     c06:	0019      	movs	r1, r3
     c08:	4b01      	ldr	r3, [pc, #4]	; (c10 <port_pin_set_config+0x20>)
     c0a:	4798      	blx	r3
}
     c0c:	b003      	add	sp, #12
     c0e:	bd00      	pop	{pc}
     c10:	00002339 	.word	0x00002339

00000c14 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     c14:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     c16:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c18:	2340      	movs	r3, #64	; 0x40
     c1a:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     c1c:	4281      	cmp	r1, r0
     c1e:	d201      	bcs.n	c24 <_sercom_get_sync_baud_val+0x10>
     c20:	e00a      	b.n	c38 <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
     c22:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     c24:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     c26:	1c63      	adds	r3, r4, #1
     c28:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     c2a:	4288      	cmp	r0, r1
     c2c:	d9f9      	bls.n	c22 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c2e:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     c30:	2cff      	cmp	r4, #255	; 0xff
     c32:	d801      	bhi.n	c38 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     c34:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     c36:	2300      	movs	r3, #0
	}
}
     c38:	0018      	movs	r0, r3
     c3a:	bd10      	pop	{r4, pc}

00000c3c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c3e:	465f      	mov	r7, fp
     c40:	4656      	mov	r6, sl
     c42:	464d      	mov	r5, r9
     c44:	4644      	mov	r4, r8
     c46:	b4f0      	push	{r4, r5, r6, r7}
     c48:	b089      	sub	sp, #36	; 0x24
     c4a:	000c      	movs	r4, r1
     c4c:	9205      	str	r2, [sp, #20]
     c4e:	aa12      	add	r2, sp, #72	; 0x48
     c50:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     c52:	0002      	movs	r2, r0
     c54:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c56:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     c58:	42a2      	cmp	r2, r4
     c5a:	d900      	bls.n	c5e <_sercom_get_async_baud_val+0x22>
     c5c:	e0c6      	b.n	dec <_sercom_get_async_baud_val+0x1b0>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     c5e:	2b00      	cmp	r3, #0
     c60:	d151      	bne.n	d06 <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     c62:	0002      	movs	r2, r0
     c64:	0008      	movs	r0, r1
     c66:	2100      	movs	r1, #0
     c68:	4d64      	ldr	r5, [pc, #400]	; (dfc <_sercom_get_async_baud_val+0x1c0>)
     c6a:	47a8      	blx	r5
     c6c:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     c6e:	0026      	movs	r6, r4
     c70:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     c72:	2300      	movs	r3, #0
     c74:	2400      	movs	r4, #0
     c76:	9300      	str	r3, [sp, #0]
     c78:	9401      	str	r4, [sp, #4]
     c7a:	2200      	movs	r2, #0
     c7c:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     c7e:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     c80:	2120      	movs	r1, #32
     c82:	468c      	mov	ip, r1
     c84:	391f      	subs	r1, #31
     c86:	9602      	str	r6, [sp, #8]
     c88:	9703      	str	r7, [sp, #12]
     c8a:	2420      	movs	r4, #32
     c8c:	4264      	negs	r4, r4
     c8e:	1904      	adds	r4, r0, r4
     c90:	d403      	bmi.n	c9a <_sercom_get_async_baud_val+0x5e>
     c92:	000d      	movs	r5, r1
     c94:	40a5      	lsls	r5, r4
     c96:	46a8      	mov	r8, r5
     c98:	e004      	b.n	ca4 <_sercom_get_async_baud_val+0x68>
     c9a:	4664      	mov	r4, ip
     c9c:	1a24      	subs	r4, r4, r0
     c9e:	000d      	movs	r5, r1
     ca0:	40e5      	lsrs	r5, r4
     ca2:	46a8      	mov	r8, r5
     ca4:	000c      	movs	r4, r1
     ca6:	4084      	lsls	r4, r0
     ca8:	46a1      	mov	r9, r4

		r = r << 1;
     caa:	0014      	movs	r4, r2
     cac:	001d      	movs	r5, r3
     cae:	18a4      	adds	r4, r4, r2
     cb0:	415d      	adcs	r5, r3
     cb2:	0022      	movs	r2, r4
     cb4:	002b      	movs	r3, r5

		if (n & bit_shift) {
     cb6:	4646      	mov	r6, r8
     cb8:	465f      	mov	r7, fp
     cba:	423e      	tst	r6, r7
     cbc:	d003      	beq.n	cc6 <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
     cbe:	000e      	movs	r6, r1
     cc0:	4326      	orrs	r6, r4
     cc2:	0032      	movs	r2, r6
     cc4:	002b      	movs	r3, r5
		}

		if (r >= d) {
     cc6:	9c02      	ldr	r4, [sp, #8]
     cc8:	9d03      	ldr	r5, [sp, #12]
     cca:	429d      	cmp	r5, r3
     ccc:	d80f      	bhi.n	cee <_sercom_get_async_baud_val+0xb2>
     cce:	d101      	bne.n	cd4 <_sercom_get_async_baud_val+0x98>
     cd0:	4294      	cmp	r4, r2
     cd2:	d80c      	bhi.n	cee <_sercom_get_async_baud_val+0xb2>
			r = r - d;
     cd4:	9c02      	ldr	r4, [sp, #8]
     cd6:	9d03      	ldr	r5, [sp, #12]
     cd8:	1b12      	subs	r2, r2, r4
     cda:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     cdc:	464d      	mov	r5, r9
     cde:	9e00      	ldr	r6, [sp, #0]
     ce0:	9f01      	ldr	r7, [sp, #4]
     ce2:	4335      	orrs	r5, r6
     ce4:	003c      	movs	r4, r7
     ce6:	4646      	mov	r6, r8
     ce8:	4334      	orrs	r4, r6
     cea:	9500      	str	r5, [sp, #0]
     cec:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     cee:	3801      	subs	r0, #1
     cf0:	d2cb      	bcs.n	c8a <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
     cf2:	2200      	movs	r2, #0
     cf4:	2301      	movs	r3, #1
     cf6:	9800      	ldr	r0, [sp, #0]
     cf8:	9901      	ldr	r1, [sp, #4]
     cfa:	1a12      	subs	r2, r2, r0
     cfc:	418b      	sbcs	r3, r1
     cfe:	0c12      	lsrs	r2, r2, #16
     d00:	041b      	lsls	r3, r3, #16
     d02:	431a      	orrs	r2, r3
     d04:	e06f      	b.n	de6 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     d06:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     d08:	2b01      	cmp	r3, #1
     d0a:	d16c      	bne.n	de6 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     d0c:	0f63      	lsrs	r3, r4, #29
     d0e:	9304      	str	r3, [sp, #16]
     d10:	00e3      	lsls	r3, r4, #3
     d12:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     d14:	000a      	movs	r2, r1
     d16:	2300      	movs	r3, #0
     d18:	2100      	movs	r1, #0
     d1a:	4c38      	ldr	r4, [pc, #224]	; (dfc <_sercom_get_async_baud_val+0x1c0>)
     d1c:	47a0      	blx	r4
     d1e:	0004      	movs	r4, r0
     d20:	000d      	movs	r5, r1
     d22:	2300      	movs	r3, #0
     d24:	469c      	mov	ip, r3
     d26:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     d28:	3320      	adds	r3, #32
     d2a:	469b      	mov	fp, r3
     d2c:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     d2e:	4663      	mov	r3, ip
     d30:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     d32:	2300      	movs	r3, #0
     d34:	9302      	str	r3, [sp, #8]
     d36:	2200      	movs	r2, #0
     d38:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     d3a:	213f      	movs	r1, #63	; 0x3f
     d3c:	9400      	str	r4, [sp, #0]
     d3e:	9501      	str	r5, [sp, #4]
     d40:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
     d42:	2120      	movs	r1, #32
     d44:	4249      	negs	r1, r1
     d46:	1879      	adds	r1, r7, r1
     d48:	d403      	bmi.n	d52 <_sercom_get_async_baud_val+0x116>
     d4a:	0030      	movs	r0, r6
     d4c:	4088      	lsls	r0, r1
     d4e:	4684      	mov	ip, r0
     d50:	e004      	b.n	d5c <_sercom_get_async_baud_val+0x120>
     d52:	4659      	mov	r1, fp
     d54:	1bc9      	subs	r1, r1, r7
     d56:	0030      	movs	r0, r6
     d58:	40c8      	lsrs	r0, r1
     d5a:	4684      	mov	ip, r0
     d5c:	0031      	movs	r1, r6
     d5e:	40b9      	lsls	r1, r7
     d60:	4689      	mov	r9, r1

		r = r << 1;
     d62:	0010      	movs	r0, r2
     d64:	0019      	movs	r1, r3
     d66:	1880      	adds	r0, r0, r2
     d68:	4159      	adcs	r1, r3
     d6a:	0002      	movs	r2, r0
     d6c:	000b      	movs	r3, r1

		if (n & bit_shift) {
     d6e:	4644      	mov	r4, r8
     d70:	464d      	mov	r5, r9
     d72:	402c      	ands	r4, r5
     d74:	46a2      	mov	sl, r4
     d76:	4664      	mov	r4, ip
     d78:	9d04      	ldr	r5, [sp, #16]
     d7a:	402c      	ands	r4, r5
     d7c:	46a4      	mov	ip, r4
     d7e:	4654      	mov	r4, sl
     d80:	4665      	mov	r5, ip
     d82:	432c      	orrs	r4, r5
     d84:	d003      	beq.n	d8e <_sercom_get_async_baud_val+0x152>
			r |= 0x01;
     d86:	0034      	movs	r4, r6
     d88:	4304      	orrs	r4, r0
     d8a:	0022      	movs	r2, r4
     d8c:	000b      	movs	r3, r1
		}

		if (r >= d) {
     d8e:	9800      	ldr	r0, [sp, #0]
     d90:	9901      	ldr	r1, [sp, #4]
     d92:	4299      	cmp	r1, r3
     d94:	d80a      	bhi.n	dac <_sercom_get_async_baud_val+0x170>
     d96:	d101      	bne.n	d9c <_sercom_get_async_baud_val+0x160>
     d98:	4290      	cmp	r0, r2
     d9a:	d807      	bhi.n	dac <_sercom_get_async_baud_val+0x170>
			r = r - d;
     d9c:	9800      	ldr	r0, [sp, #0]
     d9e:	9901      	ldr	r1, [sp, #4]
     da0:	1a12      	subs	r2, r2, r0
     da2:	418b      	sbcs	r3, r1
			q |= bit_shift;
     da4:	9902      	ldr	r1, [sp, #8]
     da6:	4648      	mov	r0, r9
     da8:	4301      	orrs	r1, r0
     daa:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     dac:	3f01      	subs	r7, #1
     dae:	d2c8      	bcs.n	d42 <_sercom_get_async_baud_val+0x106>
     db0:	9c00      	ldr	r4, [sp, #0]
     db2:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     db4:	9902      	ldr	r1, [sp, #8]
     db6:	9a07      	ldr	r2, [sp, #28]
     db8:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     dba:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     dbc:	4910      	ldr	r1, [pc, #64]	; (e00 <_sercom_get_async_baud_val+0x1c4>)
     dbe:	428b      	cmp	r3, r1
     dc0:	d90b      	bls.n	dda <_sercom_get_async_baud_val+0x19e>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     dc2:	9b06      	ldr	r3, [sp, #24]
     dc4:	3301      	adds	r3, #1
     dc6:	b2db      	uxtb	r3, r3
     dc8:	0019      	movs	r1, r3
     dca:	9306      	str	r3, [sp, #24]
     dcc:	0013      	movs	r3, r2
     dce:	3301      	adds	r3, #1
     dd0:	9307      	str	r3, [sp, #28]
     dd2:	2908      	cmp	r1, #8
     dd4:	d1ad      	bne.n	d32 <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     dd6:	2540      	movs	r5, #64	; 0x40
     dd8:	e008      	b.n	dec <_sercom_get_async_baud_val+0x1b0>
     dda:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     ddc:	9a06      	ldr	r2, [sp, #24]
     dde:	2a08      	cmp	r2, #8
     de0:	d004      	beq.n	dec <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     de2:	0352      	lsls	r2, r2, #13
     de4:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     de6:	9b05      	ldr	r3, [sp, #20]
     de8:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     dea:	2500      	movs	r5, #0
}
     dec:	0028      	movs	r0, r5
     dee:	b009      	add	sp, #36	; 0x24
     df0:	bc3c      	pop	{r2, r3, r4, r5}
     df2:	4690      	mov	r8, r2
     df4:	4699      	mov	r9, r3
     df6:	46a2      	mov	sl, r4
     df8:	46ab      	mov	fp, r5
     dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dfc:	00006235 	.word	0x00006235
     e00:	00001fff 	.word	0x00001fff

00000e04 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     e04:	b510      	push	{r4, lr}
     e06:	b082      	sub	sp, #8
     e08:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     e0a:	4b0e      	ldr	r3, [pc, #56]	; (e44 <sercom_set_gclk_generator+0x40>)
     e0c:	781b      	ldrb	r3, [r3, #0]
     e0e:	2b00      	cmp	r3, #0
     e10:	d001      	beq.n	e16 <sercom_set_gclk_generator+0x12>
     e12:	2900      	cmp	r1, #0
     e14:	d00d      	beq.n	e32 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     e16:	a901      	add	r1, sp, #4
     e18:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     e1a:	2013      	movs	r0, #19
     e1c:	4b0a      	ldr	r3, [pc, #40]	; (e48 <sercom_set_gclk_generator+0x44>)
     e1e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     e20:	2013      	movs	r0, #19
     e22:	4b0a      	ldr	r3, [pc, #40]	; (e4c <sercom_set_gclk_generator+0x48>)
     e24:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     e26:	4b07      	ldr	r3, [pc, #28]	; (e44 <sercom_set_gclk_generator+0x40>)
     e28:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     e2a:	2201      	movs	r2, #1
     e2c:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     e2e:	2000      	movs	r0, #0
     e30:	e006      	b.n	e40 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     e32:	4b04      	ldr	r3, [pc, #16]	; (e44 <sercom_set_gclk_generator+0x40>)
     e34:	785b      	ldrb	r3, [r3, #1]
     e36:	4283      	cmp	r3, r0
     e38:	d001      	beq.n	e3e <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     e3a:	201d      	movs	r0, #29
     e3c:	e000      	b.n	e40 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     e3e:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     e40:	b002      	add	sp, #8
     e42:	bd10      	pop	{r4, pc}
     e44:	200000d4 	.word	0x200000d4
     e48:	00002241 	.word	0x00002241
     e4c:	000021b5 	.word	0x000021b5

00000e50 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     e50:	4b44      	ldr	r3, [pc, #272]	; (f64 <_sercom_get_default_pad+0x114>)
     e52:	4298      	cmp	r0, r3
     e54:	d033      	beq.n	ebe <_sercom_get_default_pad+0x6e>
     e56:	d806      	bhi.n	e66 <_sercom_get_default_pad+0x16>
     e58:	4b43      	ldr	r3, [pc, #268]	; (f68 <_sercom_get_default_pad+0x118>)
     e5a:	4298      	cmp	r0, r3
     e5c:	d00d      	beq.n	e7a <_sercom_get_default_pad+0x2a>
     e5e:	4b43      	ldr	r3, [pc, #268]	; (f6c <_sercom_get_default_pad+0x11c>)
     e60:	4298      	cmp	r0, r3
     e62:	d01b      	beq.n	e9c <_sercom_get_default_pad+0x4c>
     e64:	e06f      	b.n	f46 <_sercom_get_default_pad+0xf6>
     e66:	4b42      	ldr	r3, [pc, #264]	; (f70 <_sercom_get_default_pad+0x120>)
     e68:	4298      	cmp	r0, r3
     e6a:	d04a      	beq.n	f02 <_sercom_get_default_pad+0xb2>
     e6c:	4b41      	ldr	r3, [pc, #260]	; (f74 <_sercom_get_default_pad+0x124>)
     e6e:	4298      	cmp	r0, r3
     e70:	d058      	beq.n	f24 <_sercom_get_default_pad+0xd4>
     e72:	4b41      	ldr	r3, [pc, #260]	; (f78 <_sercom_get_default_pad+0x128>)
     e74:	4298      	cmp	r0, r3
     e76:	d166      	bne.n	f46 <_sercom_get_default_pad+0xf6>
     e78:	e032      	b.n	ee0 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e7a:	2901      	cmp	r1, #1
     e7c:	d006      	beq.n	e8c <_sercom_get_default_pad+0x3c>
     e7e:	2900      	cmp	r1, #0
     e80:	d063      	beq.n	f4a <_sercom_get_default_pad+0xfa>
     e82:	2902      	cmp	r1, #2
     e84:	d006      	beq.n	e94 <_sercom_get_default_pad+0x44>
     e86:	2903      	cmp	r1, #3
     e88:	d006      	beq.n	e98 <_sercom_get_default_pad+0x48>
     e8a:	e001      	b.n	e90 <_sercom_get_default_pad+0x40>
     e8c:	483b      	ldr	r0, [pc, #236]	; (f7c <_sercom_get_default_pad+0x12c>)
     e8e:	e067      	b.n	f60 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     e90:	2000      	movs	r0, #0
     e92:	e065      	b.n	f60 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e94:	483a      	ldr	r0, [pc, #232]	; (f80 <_sercom_get_default_pad+0x130>)
     e96:	e063      	b.n	f60 <_sercom_get_default_pad+0x110>
     e98:	483a      	ldr	r0, [pc, #232]	; (f84 <_sercom_get_default_pad+0x134>)
     e9a:	e061      	b.n	f60 <_sercom_get_default_pad+0x110>
     e9c:	2901      	cmp	r1, #1
     e9e:	d006      	beq.n	eae <_sercom_get_default_pad+0x5e>
     ea0:	2900      	cmp	r1, #0
     ea2:	d054      	beq.n	f4e <_sercom_get_default_pad+0xfe>
     ea4:	2902      	cmp	r1, #2
     ea6:	d006      	beq.n	eb6 <_sercom_get_default_pad+0x66>
     ea8:	2903      	cmp	r1, #3
     eaa:	d006      	beq.n	eba <_sercom_get_default_pad+0x6a>
     eac:	e001      	b.n	eb2 <_sercom_get_default_pad+0x62>
     eae:	4836      	ldr	r0, [pc, #216]	; (f88 <_sercom_get_default_pad+0x138>)
     eb0:	e056      	b.n	f60 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     eb2:	2000      	movs	r0, #0
     eb4:	e054      	b.n	f60 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     eb6:	4835      	ldr	r0, [pc, #212]	; (f8c <_sercom_get_default_pad+0x13c>)
     eb8:	e052      	b.n	f60 <_sercom_get_default_pad+0x110>
     eba:	4835      	ldr	r0, [pc, #212]	; (f90 <_sercom_get_default_pad+0x140>)
     ebc:	e050      	b.n	f60 <_sercom_get_default_pad+0x110>
     ebe:	2901      	cmp	r1, #1
     ec0:	d006      	beq.n	ed0 <_sercom_get_default_pad+0x80>
     ec2:	2900      	cmp	r1, #0
     ec4:	d045      	beq.n	f52 <_sercom_get_default_pad+0x102>
     ec6:	2902      	cmp	r1, #2
     ec8:	d006      	beq.n	ed8 <_sercom_get_default_pad+0x88>
     eca:	2903      	cmp	r1, #3
     ecc:	d006      	beq.n	edc <_sercom_get_default_pad+0x8c>
     ece:	e001      	b.n	ed4 <_sercom_get_default_pad+0x84>
     ed0:	4830      	ldr	r0, [pc, #192]	; (f94 <_sercom_get_default_pad+0x144>)
     ed2:	e045      	b.n	f60 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     ed4:	2000      	movs	r0, #0
     ed6:	e043      	b.n	f60 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ed8:	482f      	ldr	r0, [pc, #188]	; (f98 <_sercom_get_default_pad+0x148>)
     eda:	e041      	b.n	f60 <_sercom_get_default_pad+0x110>
     edc:	482f      	ldr	r0, [pc, #188]	; (f9c <_sercom_get_default_pad+0x14c>)
     ede:	e03f      	b.n	f60 <_sercom_get_default_pad+0x110>
     ee0:	2901      	cmp	r1, #1
     ee2:	d006      	beq.n	ef2 <_sercom_get_default_pad+0xa2>
     ee4:	2900      	cmp	r1, #0
     ee6:	d036      	beq.n	f56 <_sercom_get_default_pad+0x106>
     ee8:	2902      	cmp	r1, #2
     eea:	d006      	beq.n	efa <_sercom_get_default_pad+0xaa>
     eec:	2903      	cmp	r1, #3
     eee:	d006      	beq.n	efe <_sercom_get_default_pad+0xae>
     ef0:	e001      	b.n	ef6 <_sercom_get_default_pad+0xa6>
     ef2:	482b      	ldr	r0, [pc, #172]	; (fa0 <_sercom_get_default_pad+0x150>)
     ef4:	e034      	b.n	f60 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     ef6:	2000      	movs	r0, #0
     ef8:	e032      	b.n	f60 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     efa:	482a      	ldr	r0, [pc, #168]	; (fa4 <_sercom_get_default_pad+0x154>)
     efc:	e030      	b.n	f60 <_sercom_get_default_pad+0x110>
     efe:	482a      	ldr	r0, [pc, #168]	; (fa8 <_sercom_get_default_pad+0x158>)
     f00:	e02e      	b.n	f60 <_sercom_get_default_pad+0x110>
     f02:	2901      	cmp	r1, #1
     f04:	d006      	beq.n	f14 <_sercom_get_default_pad+0xc4>
     f06:	2900      	cmp	r1, #0
     f08:	d027      	beq.n	f5a <_sercom_get_default_pad+0x10a>
     f0a:	2902      	cmp	r1, #2
     f0c:	d006      	beq.n	f1c <_sercom_get_default_pad+0xcc>
     f0e:	2903      	cmp	r1, #3
     f10:	d006      	beq.n	f20 <_sercom_get_default_pad+0xd0>
     f12:	e001      	b.n	f18 <_sercom_get_default_pad+0xc8>
     f14:	4825      	ldr	r0, [pc, #148]	; (fac <_sercom_get_default_pad+0x15c>)
     f16:	e023      	b.n	f60 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     f18:	2000      	movs	r0, #0
     f1a:	e021      	b.n	f60 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f1c:	4824      	ldr	r0, [pc, #144]	; (fb0 <_sercom_get_default_pad+0x160>)
     f1e:	e01f      	b.n	f60 <_sercom_get_default_pad+0x110>
     f20:	4824      	ldr	r0, [pc, #144]	; (fb4 <_sercom_get_default_pad+0x164>)
     f22:	e01d      	b.n	f60 <_sercom_get_default_pad+0x110>
     f24:	2901      	cmp	r1, #1
     f26:	d006      	beq.n	f36 <_sercom_get_default_pad+0xe6>
     f28:	2900      	cmp	r1, #0
     f2a:	d018      	beq.n	f5e <_sercom_get_default_pad+0x10e>
     f2c:	2902      	cmp	r1, #2
     f2e:	d006      	beq.n	f3e <_sercom_get_default_pad+0xee>
     f30:	2903      	cmp	r1, #3
     f32:	d006      	beq.n	f42 <_sercom_get_default_pad+0xf2>
     f34:	e001      	b.n	f3a <_sercom_get_default_pad+0xea>
     f36:	4820      	ldr	r0, [pc, #128]	; (fb8 <_sercom_get_default_pad+0x168>)
     f38:	e012      	b.n	f60 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     f3a:	2000      	movs	r0, #0
     f3c:	e010      	b.n	f60 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f3e:	481f      	ldr	r0, [pc, #124]	; (fbc <_sercom_get_default_pad+0x16c>)
     f40:	e00e      	b.n	f60 <_sercom_get_default_pad+0x110>
     f42:	481f      	ldr	r0, [pc, #124]	; (fc0 <_sercom_get_default_pad+0x170>)
     f44:	e00c      	b.n	f60 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     f46:	2000      	movs	r0, #0
     f48:	e00a      	b.n	f60 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f4a:	481e      	ldr	r0, [pc, #120]	; (fc4 <_sercom_get_default_pad+0x174>)
     f4c:	e008      	b.n	f60 <_sercom_get_default_pad+0x110>
     f4e:	2003      	movs	r0, #3
     f50:	e006      	b.n	f60 <_sercom_get_default_pad+0x110>
     f52:	481d      	ldr	r0, [pc, #116]	; (fc8 <_sercom_get_default_pad+0x178>)
     f54:	e004      	b.n	f60 <_sercom_get_default_pad+0x110>
     f56:	481d      	ldr	r0, [pc, #116]	; (fcc <_sercom_get_default_pad+0x17c>)
     f58:	e002      	b.n	f60 <_sercom_get_default_pad+0x110>
     f5a:	481d      	ldr	r0, [pc, #116]	; (fd0 <_sercom_get_default_pad+0x180>)
     f5c:	e000      	b.n	f60 <_sercom_get_default_pad+0x110>
     f5e:	481d      	ldr	r0, [pc, #116]	; (fd4 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     f60:	4770      	bx	lr
     f62:	46c0      	nop			; (mov r8, r8)
     f64:	42001000 	.word	0x42001000
     f68:	42000800 	.word	0x42000800
     f6c:	42000c00 	.word	0x42000c00
     f70:	42001800 	.word	0x42001800
     f74:	42001c00 	.word	0x42001c00
     f78:	42001400 	.word	0x42001400
     f7c:	00050003 	.word	0x00050003
     f80:	00060003 	.word	0x00060003
     f84:	00070003 	.word	0x00070003
     f88:	00010003 	.word	0x00010003
     f8c:	001e0003 	.word	0x001e0003
     f90:	001f0003 	.word	0x001f0003
     f94:	000d0002 	.word	0x000d0002
     f98:	000e0002 	.word	0x000e0002
     f9c:	000f0002 	.word	0x000f0002
     fa0:	00110003 	.word	0x00110003
     fa4:	00120003 	.word	0x00120003
     fa8:	00130003 	.word	0x00130003
     fac:	003f0005 	.word	0x003f0005
     fb0:	003e0005 	.word	0x003e0005
     fb4:	00520005 	.word	0x00520005
     fb8:	00170003 	.word	0x00170003
     fbc:	00180003 	.word	0x00180003
     fc0:	00190003 	.word	0x00190003
     fc4:	00040003 	.word	0x00040003
     fc8:	000c0002 	.word	0x000c0002
     fcc:	00100003 	.word	0x00100003
     fd0:	00530005 	.word	0x00530005
     fd4:	00160003 	.word	0x00160003

00000fd8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     fd8:	b530      	push	{r4, r5, lr}
     fda:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     fdc:	4b0c      	ldr	r3, [pc, #48]	; (1010 <_sercom_get_sercom_inst_index+0x38>)
     fde:	466a      	mov	r2, sp
     fe0:	cb32      	ldmia	r3!, {r1, r4, r5}
     fe2:	c232      	stmia	r2!, {r1, r4, r5}
     fe4:	cb32      	ldmia	r3!, {r1, r4, r5}
     fe6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     fe8:	9b00      	ldr	r3, [sp, #0]
     fea:	4283      	cmp	r3, r0
     fec:	d006      	beq.n	ffc <_sercom_get_sercom_inst_index+0x24>
     fee:	2301      	movs	r3, #1
     ff0:	009a      	lsls	r2, r3, #2
     ff2:	4669      	mov	r1, sp
     ff4:	5852      	ldr	r2, [r2, r1]
     ff6:	4282      	cmp	r2, r0
     ff8:	d103      	bne.n	1002 <_sercom_get_sercom_inst_index+0x2a>
     ffa:	e000      	b.n	ffe <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ffc:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     ffe:	b2d8      	uxtb	r0, r3
    1000:	e003      	b.n	100a <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1002:	3301      	adds	r3, #1
    1004:	2b06      	cmp	r3, #6
    1006:	d1f3      	bne.n	ff0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1008:	2000      	movs	r0, #0
}
    100a:	b007      	add	sp, #28
    100c:	bd30      	pop	{r4, r5, pc}
    100e:	46c0      	nop			; (mov r8, r8)
    1010:	00008a90 	.word	0x00008a90

00001014 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1014:	4770      	bx	lr
    1016:	46c0      	nop			; (mov r8, r8)

00001018 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1018:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    101a:	4b0a      	ldr	r3, [pc, #40]	; (1044 <_sercom_set_handler+0x2c>)
    101c:	781b      	ldrb	r3, [r3, #0]
    101e:	2b00      	cmp	r3, #0
    1020:	d10c      	bne.n	103c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1022:	4f09      	ldr	r7, [pc, #36]	; (1048 <_sercom_set_handler+0x30>)
    1024:	4e09      	ldr	r6, [pc, #36]	; (104c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1026:	4d0a      	ldr	r5, [pc, #40]	; (1050 <_sercom_set_handler+0x38>)
    1028:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    102a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    102c:	195a      	adds	r2, r3, r5
    102e:	6014      	str	r4, [r2, #0]
    1030:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1032:	2b18      	cmp	r3, #24
    1034:	d1f9      	bne.n	102a <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    1036:	2201      	movs	r2, #1
    1038:	4b02      	ldr	r3, [pc, #8]	; (1044 <_sercom_set_handler+0x2c>)
    103a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    103c:	0080      	lsls	r0, r0, #2
    103e:	4b02      	ldr	r3, [pc, #8]	; (1048 <_sercom_set_handler+0x30>)
    1040:	50c1      	str	r1, [r0, r3]
}
    1042:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1044:	200000d6 	.word	0x200000d6
    1048:	200000d8 	.word	0x200000d8
    104c:	00001015 	.word	0x00001015
    1050:	200007b8 	.word	0x200007b8

00001054 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1054:	b510      	push	{r4, lr}
    1056:	b082      	sub	sp, #8
    1058:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    105a:	2206      	movs	r2, #6
    105c:	4905      	ldr	r1, [pc, #20]	; (1074 <_sercom_get_interrupt_vector+0x20>)
    105e:	4668      	mov	r0, sp
    1060:	4b05      	ldr	r3, [pc, #20]	; (1078 <_sercom_get_interrupt_vector+0x24>)
    1062:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1064:	0020      	movs	r0, r4
    1066:	4b05      	ldr	r3, [pc, #20]	; (107c <_sercom_get_interrupt_vector+0x28>)
    1068:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    106a:	466b      	mov	r3, sp
    106c:	5618      	ldrsb	r0, [r3, r0]
}
    106e:	b002      	add	sp, #8
    1070:	bd10      	pop	{r4, pc}
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	00008aa8 	.word	0x00008aa8
    1078:	00003515 	.word	0x00003515
    107c:	00000fd9 	.word	0x00000fd9

00001080 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1080:	b510      	push	{r4, lr}
    1082:	4b02      	ldr	r3, [pc, #8]	; (108c <SERCOM0_Handler+0xc>)
    1084:	681b      	ldr	r3, [r3, #0]
    1086:	2000      	movs	r0, #0
    1088:	4798      	blx	r3
    108a:	bd10      	pop	{r4, pc}
    108c:	200000d8 	.word	0x200000d8

00001090 <SERCOM1_Handler>:
    1090:	b510      	push	{r4, lr}
    1092:	4b02      	ldr	r3, [pc, #8]	; (109c <SERCOM1_Handler+0xc>)
    1094:	685b      	ldr	r3, [r3, #4]
    1096:	2001      	movs	r0, #1
    1098:	4798      	blx	r3
    109a:	bd10      	pop	{r4, pc}
    109c:	200000d8 	.word	0x200000d8

000010a0 <SERCOM2_Handler>:
    10a0:	b510      	push	{r4, lr}
    10a2:	4b02      	ldr	r3, [pc, #8]	; (10ac <SERCOM2_Handler+0xc>)
    10a4:	689b      	ldr	r3, [r3, #8]
    10a6:	2002      	movs	r0, #2
    10a8:	4798      	blx	r3
    10aa:	bd10      	pop	{r4, pc}
    10ac:	200000d8 	.word	0x200000d8

000010b0 <SERCOM3_Handler>:
    10b0:	b510      	push	{r4, lr}
    10b2:	4b02      	ldr	r3, [pc, #8]	; (10bc <SERCOM3_Handler+0xc>)
    10b4:	68db      	ldr	r3, [r3, #12]
    10b6:	2003      	movs	r0, #3
    10b8:	4798      	blx	r3
    10ba:	bd10      	pop	{r4, pc}
    10bc:	200000d8 	.word	0x200000d8

000010c0 <SERCOM4_Handler>:
    10c0:	b510      	push	{r4, lr}
    10c2:	4b02      	ldr	r3, [pc, #8]	; (10cc <SERCOM4_Handler+0xc>)
    10c4:	691b      	ldr	r3, [r3, #16]
    10c6:	2004      	movs	r0, #4
    10c8:	4798      	blx	r3
    10ca:	bd10      	pop	{r4, pc}
    10cc:	200000d8 	.word	0x200000d8

000010d0 <SERCOM5_Handler>:
    10d0:	b510      	push	{r4, lr}
    10d2:	4b02      	ldr	r3, [pc, #8]	; (10dc <SERCOM5_Handler+0xc>)
    10d4:	695b      	ldr	r3, [r3, #20]
    10d6:	2005      	movs	r0, #5
    10d8:	4798      	blx	r3
    10da:	bd10      	pop	{r4, pc}
    10dc:	200000d8 	.word	0x200000d8

000010e0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    10e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10e2:	4657      	mov	r7, sl
    10e4:	464e      	mov	r6, r9
    10e6:	4645      	mov	r5, r8
    10e8:	b4e0      	push	{r5, r6, r7}
    10ea:	b08a      	sub	sp, #40	; 0x28
    10ec:	0005      	movs	r5, r0
    10ee:	000e      	movs	r6, r1
    10f0:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    10f2:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    10f4:	680b      	ldr	r3, [r1, #0]
    10f6:	079b      	lsls	r3, r3, #30
    10f8:	d400      	bmi.n	10fc <spi_init+0x1c>
    10fa:	e08c      	b.n	1216 <spi_init+0x136>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    10fc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    10fe:	9305      	str	r3, [sp, #20]
    1100:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1102:	9306      	str	r3, [sp, #24]
    1104:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1106:	9307      	str	r3, [sp, #28]
    1108:	6b53      	ldr	r3, [r2, #52]	; 0x34
    110a:	9308      	str	r3, [sp, #32]
    110c:	2700      	movs	r7, #0
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    110e:	231f      	movs	r3, #31
    1110:	4699      	mov	r9, r3
    1112:	b2f9      	uxtb	r1, r7
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1114:	00bb      	lsls	r3, r7, #2
    1116:	aa05      	add	r2, sp, #20
    1118:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    111a:	2800      	cmp	r0, #0
    111c:	d102      	bne.n	1124 <spi_init+0x44>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    111e:	0030      	movs	r0, r6
    1120:	4b8f      	ldr	r3, [pc, #572]	; (1360 <spi_init+0x280>)
    1122:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
    1124:	1c43      	adds	r3, r0, #1
    1126:	d029      	beq.n	117c <spi_init+0x9c>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    1128:	0402      	lsls	r2, r0, #16
    112a:	0c13      	lsrs	r3, r2, #16
    112c:	4698      	mov	r8, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    112e:	0c00      	lsrs	r0, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1130:	b2c1      	uxtb	r1, r0
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1132:	2300      	movs	r3, #0
    1134:	469c      	mov	ip, r3
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1136:	0603      	lsls	r3, r0, #24
    1138:	d404      	bmi.n	1144 <spi_init+0x64>
		return &(ports[port_index]->Group[group_index]);
    113a:	094b      	lsrs	r3, r1, #5
    113c:	01db      	lsls	r3, r3, #7
    113e:	4a89      	ldr	r2, [pc, #548]	; (1364 <spi_init+0x284>)
    1140:	4694      	mov	ip, r2
    1142:	449c      	add	ip, r3
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    1144:	464b      	mov	r3, r9
    1146:	400b      	ands	r3, r1

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1148:	4660      	mov	r0, ip
    114a:	18c0      	adds	r0, r0, r3
    114c:	3040      	adds	r0, #64	; 0x40
    114e:	7800      	ldrb	r0, [r0, #0]
    1150:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    1152:	2080      	movs	r0, #128	; 0x80
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1154:	4652      	mov	r2, sl
    1156:	07d2      	lsls	r2, r2, #31
    1158:	d50a      	bpl.n	1170 <spi_init+0x90>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    115a:	085b      	lsrs	r3, r3, #1
    115c:	4463      	add	r3, ip
    115e:	3330      	adds	r3, #48	; 0x30
    1160:	7818      	ldrb	r0, [r3, #0]
    1162:	b2c0      	uxtb	r0, r0

	if (pin_index & 1) {
    1164:	07cb      	lsls	r3, r1, #31
    1166:	d501      	bpl.n	116c <spi_init+0x8c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    1168:	0900      	lsrs	r0, r0, #4
    116a:	e001      	b.n	1170 <spi_init+0x90>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    116c:	230f      	movs	r3, #15
    116e:	4018      	ands	r0, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    1170:	4580      	cmp	r8, r0
    1172:	d003      	beq.n	117c <spi_init+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
    1174:	2300      	movs	r3, #0
    1176:	602b      	str	r3, [r5, #0]
			return STATUS_ERR_DENIED;
    1178:	201c      	movs	r0, #28
    117a:	e0ea      	b.n	1352 <spi_init+0x272>
    117c:	3701      	adds	r7, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    117e:	2f04      	cmp	r7, #4
    1180:	d1c7      	bne.n	1112 <spi_init+0x32>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    1182:	2013      	movs	r0, #19
    1184:	4b78      	ldr	r3, [pc, #480]	; (1368 <spi_init+0x288>)
    1186:	4798      	blx	r3
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    1188:	7822      	ldrb	r2, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    118a:	2100      	movs	r1, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    118c:	2a01      	cmp	r2, #1
    118e:	d112      	bne.n	11b6 <spi_init+0xd6>
		enum status_code error_code = _sercom_get_sync_baud_val(
    1190:	aa04      	add	r2, sp, #16
    1192:	0001      	movs	r1, r0
    1194:	69a0      	ldr	r0, [r4, #24]
    1196:	4b75      	ldr	r3, [pc, #468]	; (136c <spi_init+0x28c>)
    1198:	4798      	blx	r3
    119a:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    119c:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    119e:	2b00      	cmp	r3, #0
    11a0:	d000      	beq.n	11a4 <spi_init+0xc4>
    11a2:	e0d6      	b.n	1352 <spi_init+0x272>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    11a4:	7b33      	ldrb	r3, [r6, #12]
    11a6:	b2db      	uxtb	r3, r3
    11a8:	aa04      	add	r2, sp, #16
    11aa:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    11ac:	3005      	adds	r0, #5
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    11ae:	429a      	cmp	r2, r3
    11b0:	d000      	beq.n	11b4 <spi_init+0xd4>
    11b2:	e0ce      	b.n	1352 <spi_init+0x272>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    11b4:	210c      	movs	r1, #12

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    11b6:	6863      	ldr	r3, [r4, #4]
    11b8:	68a2      	ldr	r2, [r4, #8]
    11ba:	4313      	orrs	r3, r2
    11bc:	68e2      	ldr	r2, [r4, #12]
    11be:	4313      	orrs	r3, r2
    11c0:	430b      	orrs	r3, r1

	/* Set SPI character size */
	ctrlb |= config->character_size;
    11c2:	7c21      	ldrb	r1, [r4, #16]

	if (config->run_in_standby) {
    11c4:	7c62      	ldrb	r2, [r4, #17]
    11c6:	2a00      	cmp	r2, #0
    11c8:	d001      	beq.n	11ce <spi_init+0xee>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    11ca:	2280      	movs	r2, #128	; 0x80
    11cc:	4313      	orrs	r3, r2
	}

	if (config->receiver_enable) {
    11ce:	7ca2      	ldrb	r2, [r4, #18]
    11d0:	2a00      	cmp	r2, #0
    11d2:	d002      	beq.n	11da <spi_init+0xfa>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    11d4:	2280      	movs	r2, #128	; 0x80
    11d6:	0292      	lsls	r2, r2, #10
    11d8:	4311      	orrs	r1, r2
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    11da:	7ce2      	ldrb	r2, [r4, #19]
    11dc:	2a00      	cmp	r2, #0
    11de:	d002      	beq.n	11e6 <spi_init+0x106>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    11e0:	2280      	movs	r2, #128	; 0x80
    11e2:	0092      	lsls	r2, r2, #2
    11e4:	4311      	orrs	r1, r2
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    11e6:	7d22      	ldrb	r2, [r4, #20]
    11e8:	2a00      	cmp	r2, #0
    11ea:	d002      	beq.n	11f2 <spi_init+0x112>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    11ec:	2280      	movs	r2, #128	; 0x80
    11ee:	0192      	lsls	r2, r2, #6
    11f0:	4311      	orrs	r1, r2
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    11f2:	6830      	ldr	r0, [r6, #0]
    11f4:	2202      	movs	r2, #2
    11f6:	4313      	orrs	r3, r2
    11f8:	4283      	cmp	r3, r0
    11fa:	d108      	bne.n	120e <spi_init+0x12e>
			spi_module->CTRLB.reg == ctrlb) {
    11fc:	6873      	ldr	r3, [r6, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    11fe:	428b      	cmp	r3, r1
    1200:	d105      	bne.n	120e <spi_init+0x12e>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    1202:	7823      	ldrb	r3, [r4, #0]
    1204:	716b      	strb	r3, [r5, #5]
		module->character_size = config->character_size;
    1206:	7c23      	ldrb	r3, [r4, #16]
    1208:	71ab      	strb	r3, [r5, #6]
		return STATUS_OK;
    120a:	2000      	movs	r0, #0
    120c:	e0a1      	b.n	1352 <spi_init+0x272>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    120e:	2300      	movs	r3, #0
    1210:	602b      	str	r3, [r5, #0]

	return STATUS_ERR_DENIED;
    1212:	201c      	movs	r0, #28
    1214:	e09d      	b.n	1352 <spi_init+0x272>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1216:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1218:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    121a:	07db      	lsls	r3, r3, #31
    121c:	d500      	bpl.n	1220 <spi_init+0x140>
    121e:	e098      	b.n	1352 <spi_init+0x272>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1220:	0008      	movs	r0, r1
    1222:	4b53      	ldr	r3, [pc, #332]	; (1370 <spi_init+0x290>)
    1224:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1226:	4953      	ldr	r1, [pc, #332]	; (1374 <spi_init+0x294>)
    1228:	6a0a      	ldr	r2, [r1, #32]
    122a:	1c87      	adds	r7, r0, #2
    122c:	2301      	movs	r3, #1
    122e:	40bb      	lsls	r3, r7
    1230:	4313      	orrs	r3, r2
    1232:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1234:	a909      	add	r1, sp, #36	; 0x24
    1236:	2724      	movs	r7, #36	; 0x24
    1238:	5de3      	ldrb	r3, [r4, r7]
    123a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    123c:	3014      	adds	r0, #20
    123e:	b2c3      	uxtb	r3, r0
    1240:	9301      	str	r3, [sp, #4]
    1242:	0018      	movs	r0, r3
    1244:	4b4c      	ldr	r3, [pc, #304]	; (1378 <spi_init+0x298>)
    1246:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1248:	9801      	ldr	r0, [sp, #4]
    124a:	4b4c      	ldr	r3, [pc, #304]	; (137c <spi_init+0x29c>)
    124c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    124e:	5de0      	ldrb	r0, [r4, r7]
    1250:	2100      	movs	r1, #0
    1252:	4b4b      	ldr	r3, [pc, #300]	; (1380 <spi_init+0x2a0>)
    1254:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    1256:	7823      	ldrb	r3, [r4, #0]
    1258:	2b01      	cmp	r3, #1
    125a:	d103      	bne.n	1264 <spi_init+0x184>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    125c:	6832      	ldr	r2, [r6, #0]
    125e:	330b      	adds	r3, #11
    1260:	4313      	orrs	r3, r2
    1262:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1264:	682e      	ldr	r6, [r5, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1266:	ab04      	add	r3, sp, #16
    1268:	2280      	movs	r2, #128	; 0x80
    126a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    126c:	2200      	movs	r2, #0
    126e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1270:	2101      	movs	r1, #1
    1272:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    1274:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    1276:	7823      	ldrb	r3, [r4, #0]
    1278:	2b00      	cmp	r3, #0
    127a:	d101      	bne.n	1280 <spi_init+0x1a0>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    127c:	ab04      	add	r3, sp, #16
    127e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    1280:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1282:	9305      	str	r3, [sp, #20]
    1284:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1286:	9306      	str	r3, [sp, #24]
    1288:	6b23      	ldr	r3, [r4, #48]	; 0x30
    128a:	9307      	str	r3, [sp, #28]
    128c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    128e:	9308      	str	r3, [sp, #32]
    1290:	2700      	movs	r7, #0
    1292:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1294:	00bb      	lsls	r3, r7, #2
    1296:	aa05      	add	r2, sp, #20
    1298:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    129a:	2800      	cmp	r0, #0
    129c:	d102      	bne.n	12a4 <spi_init+0x1c4>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    129e:	0030      	movs	r0, r6
    12a0:	4b2f      	ldr	r3, [pc, #188]	; (1360 <spi_init+0x280>)
    12a2:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    12a4:	1c43      	adds	r3, r0, #1
    12a6:	d006      	beq.n	12b6 <spi_init+0x1d6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    12a8:	ab02      	add	r3, sp, #8
    12aa:	7218      	strb	r0, [r3, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    12ac:	0c00      	lsrs	r0, r0, #16
    12ae:	b2c0      	uxtb	r0, r0
    12b0:	a904      	add	r1, sp, #16
    12b2:	4b34      	ldr	r3, [pc, #208]	; (1384 <spi_init+0x2a4>)
    12b4:	4798      	blx	r3
    12b6:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    12b8:	2f04      	cmp	r7, #4
    12ba:	d1ea      	bne.n	1292 <spi_init+0x1b2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    12bc:	7823      	ldrb	r3, [r4, #0]
    12be:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    12c0:	7c23      	ldrb	r3, [r4, #16]
    12c2:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    12c4:	7ca3      	ldrb	r3, [r4, #18]
    12c6:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    12c8:	7d23      	ldrb	r3, [r4, #20]
    12ca:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    12cc:	2200      	movs	r2, #0
    12ce:	ab02      	add	r3, sp, #8
    12d0:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    12d2:	7823      	ldrb	r3, [r4, #0]
    12d4:	2b01      	cmp	r3, #1
    12d6:	d114      	bne.n	1302 <spi_init+0x222>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    12d8:	6828      	ldr	r0, [r5, #0]
    12da:	4b25      	ldr	r3, [pc, #148]	; (1370 <spi_init+0x290>)
    12dc:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    12de:	3014      	adds	r0, #20
    12e0:	b2c0      	uxtb	r0, r0
    12e2:	4b21      	ldr	r3, [pc, #132]	; (1368 <spi_init+0x288>)
    12e4:	4798      	blx	r3
    12e6:	0001      	movs	r1, r0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    12e8:	ab02      	add	r3, sp, #8
    12ea:	1d9a      	adds	r2, r3, #6
    12ec:	69a0      	ldr	r0, [r4, #24]
    12ee:	4b1f      	ldr	r3, [pc, #124]	; (136c <spi_init+0x28c>)
    12f0:	4798      	blx	r3
    12f2:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    12f4:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    12f6:	2b00      	cmp	r3, #0
    12f8:	d12b      	bne.n	1352 <spi_init+0x272>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    12fa:	ab02      	add	r3, sp, #8
    12fc:	3306      	adds	r3, #6
    12fe:	781b      	ldrb	r3, [r3, #0]
    1300:	7333      	strb	r3, [r6, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    1302:	6863      	ldr	r3, [r4, #4]
    1304:	68a2      	ldr	r2, [r4, #8]
    1306:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    1308:	68e2      	ldr	r2, [r4, #12]
    130a:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
    130c:	7c22      	ldrb	r2, [r4, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    130e:	7c61      	ldrb	r1, [r4, #17]
    1310:	2900      	cmp	r1, #0
    1312:	d103      	bne.n	131c <spi_init+0x23c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1314:	491c      	ldr	r1, [pc, #112]	; (1388 <spi_init+0x2a8>)
    1316:	7889      	ldrb	r1, [r1, #2]
    1318:	0789      	lsls	r1, r1, #30
    131a:	d501      	bpl.n	1320 <spi_init+0x240>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    131c:	2180      	movs	r1, #128	; 0x80
    131e:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
    1320:	7ca1      	ldrb	r1, [r4, #18]
    1322:	2900      	cmp	r1, #0
    1324:	d002      	beq.n	132c <spi_init+0x24c>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1326:	2180      	movs	r1, #128	; 0x80
    1328:	0289      	lsls	r1, r1, #10
    132a:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    132c:	7ce1      	ldrb	r1, [r4, #19]
    132e:	2900      	cmp	r1, #0
    1330:	d002      	beq.n	1338 <spi_init+0x258>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1332:	2180      	movs	r1, #128	; 0x80
    1334:	0089      	lsls	r1, r1, #2
    1336:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    1338:	7d21      	ldrb	r1, [r4, #20]
    133a:	2900      	cmp	r1, #0
    133c:	d002      	beq.n	1344 <spi_init+0x264>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    133e:	2180      	movs	r1, #128	; 0x80
    1340:	0189      	lsls	r1, r1, #6
    1342:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    1344:	6831      	ldr	r1, [r6, #0]
    1346:	430b      	orrs	r3, r1
    1348:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    134a:	6873      	ldr	r3, [r6, #4]
    134c:	4313      	orrs	r3, r2
    134e:	6073      	str	r3, [r6, #4]

	return STATUS_OK;
    1350:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1352:	b00a      	add	sp, #40	; 0x28
    1354:	bc1c      	pop	{r2, r3, r4}
    1356:	4690      	mov	r8, r2
    1358:	4699      	mov	r9, r3
    135a:	46a2      	mov	sl, r4
    135c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    135e:	46c0      	nop			; (mov r8, r8)
    1360:	00000e51 	.word	0x00000e51
    1364:	41004400 	.word	0x41004400
    1368:	0000225d 	.word	0x0000225d
    136c:	00000c15 	.word	0x00000c15
    1370:	00000fd9 	.word	0x00000fd9
    1374:	40000400 	.word	0x40000400
    1378:	00002241 	.word	0x00002241
    137c:	000021b5 	.word	0x000021b5
    1380:	00000e05 	.word	0x00000e05
    1384:	00002339 	.word	0x00002339
    1388:	41002000 	.word	0x41002000

0000138c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    138c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    138e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    1390:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1392:	2c01      	cmp	r4, #1
    1394:	d16e      	bne.n	1474 <spi_select_slave+0xe8>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    1396:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    1398:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    139a:	2c00      	cmp	r4, #0
    139c:	d16a      	bne.n	1474 <spi_select_slave+0xe8>
#  endif
	{
		if (select) {
    139e:	2a00      	cmp	r2, #0
    13a0:	d058      	beq.n	1454 <spi_select_slave+0xc8>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    13a2:	784b      	ldrb	r3, [r1, #1]
    13a4:	2b00      	cmp	r3, #0
    13a6:	d044      	beq.n	1432 <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    13a8:	6803      	ldr	r3, [r0, #0]
    13aa:	7e1b      	ldrb	r3, [r3, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    13ac:	07db      	lsls	r3, r3, #31
    13ae:	d410      	bmi.n	13d2 <spi_select_slave+0x46>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    13b0:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    13b2:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    13b4:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    13b6:	2900      	cmp	r1, #0
    13b8:	d104      	bne.n	13c4 <spi_select_slave+0x38>
		return &(ports[port_index]->Group[group_index]);
    13ba:	095a      	lsrs	r2, r3, #5
    13bc:	01d2      	lsls	r2, r2, #7
    13be:	492e      	ldr	r1, [pc, #184]	; (1478 <spi_select_slave+0xec>)
    13c0:	468c      	mov	ip, r1
    13c2:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    13c4:	211f      	movs	r1, #31
    13c6:	400b      	ands	r3, r1
    13c8:	391e      	subs	r1, #30
    13ca:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    13cc:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
    13ce:	2305      	movs	r3, #5
    13d0:	e050      	b.n	1474 <spi_select_slave+0xe8>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    13d2:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    13d4:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    13d6:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    13d8:	2c00      	cmp	r4, #0
    13da:	d104      	bne.n	13e6 <spi_select_slave+0x5a>
		return &(ports[port_index]->Group[group_index]);
    13dc:	095a      	lsrs	r2, r3, #5
    13de:	01d2      	lsls	r2, r2, #7
    13e0:	4c25      	ldr	r4, [pc, #148]	; (1478 <spi_select_slave+0xec>)
    13e2:	46a4      	mov	ip, r4
    13e4:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    13e6:	241f      	movs	r4, #31
    13e8:	4023      	ands	r3, r4
    13ea:	3c1e      	subs	r4, #30
    13ec:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    13ee:	6154      	str	r4, [r2, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    13f0:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    13f2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    13f4:	07d2      	lsls	r2, r2, #31
    13f6:	d501      	bpl.n	13fc <spi_select_slave+0x70>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    13f8:	788a      	ldrb	r2, [r1, #2]
    13fa:	629a      	str	r2, [r3, #40]	; 0x28

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    13fc:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    13fe:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    1400:	2a00      	cmp	r2, #0
    1402:	d137      	bne.n	1474 <spi_select_slave+0xe8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1404:	6802      	ldr	r2, [r0, #0]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    1406:	2104      	movs	r1, #4

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1408:	7e13      	ldrb	r3, [r2, #24]
    140a:	420b      	tst	r3, r1
    140c:	d0fc      	beq.n	1408 <spi_select_slave+0x7c>
    140e:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    1410:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1412:	0749      	lsls	r1, r1, #29
    1414:	d52e      	bpl.n	1474 <spi_select_slave+0xe8>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1416:	8b53      	ldrh	r3, [r2, #26]
    1418:	075b      	lsls	r3, r3, #29
    141a:	d501      	bpl.n	1420 <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    141c:	2304      	movs	r3, #4
    141e:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1420:	7983      	ldrb	r3, [r0, #6]
    1422:	2b01      	cmp	r3, #1
    1424:	d102      	bne.n	142c <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1426:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1428:	2300      	movs	r3, #0
    142a:	e023      	b.n	1474 <spi_select_slave+0xe8>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    142c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    142e:	2300      	movs	r3, #0
    1430:	e020      	b.n	1474 <spi_select_slave+0xe8>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    1432:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1434:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1436:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1438:	2900      	cmp	r1, #0
    143a:	d104      	bne.n	1446 <spi_select_slave+0xba>
		return &(ports[port_index]->Group[group_index]);
    143c:	095a      	lsrs	r2, r3, #5
    143e:	01d2      	lsls	r2, r2, #7
    1440:	490d      	ldr	r1, [pc, #52]	; (1478 <spi_select_slave+0xec>)
    1442:	468c      	mov	ip, r1
    1444:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1446:	211f      	movs	r1, #31
    1448:	400b      	ands	r3, r1
    144a:	391e      	subs	r1, #30
    144c:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    144e:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    1450:	2300      	movs	r3, #0
    1452:	e00f      	b.n	1474 <spi_select_slave+0xe8>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    1454:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1456:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1458:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    145a:	2900      	cmp	r1, #0
    145c:	d104      	bne.n	1468 <spi_select_slave+0xdc>
		return &(ports[port_index]->Group[group_index]);
    145e:	095a      	lsrs	r2, r3, #5
    1460:	01d2      	lsls	r2, r2, #7
    1462:	4905      	ldr	r1, [pc, #20]	; (1478 <spi_select_slave+0xec>)
    1464:	468c      	mov	ip, r1
    1466:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1468:	211f      	movs	r1, #31
    146a:	400b      	ands	r3, r1
    146c:	391e      	subs	r1, #30
    146e:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1470:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
    1472:	2300      	movs	r3, #0
}
    1474:	0018      	movs	r0, r3
    1476:	bd10      	pop	{r4, pc}
    1478:	41004400 	.word	0x41004400

0000147c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    147c:	b5f0      	push	{r4, r5, r6, r7, lr}
    147e:	465f      	mov	r7, fp
    1480:	4656      	mov	r6, sl
    1482:	464d      	mov	r5, r9
    1484:	4644      	mov	r4, r8
    1486:	b4f0      	push	{r4, r5, r6, r7}
    1488:	b091      	sub	sp, #68	; 0x44
    148a:	0005      	movs	r5, r0
    148c:	000c      	movs	r4, r1
    148e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1490:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1492:	0008      	movs	r0, r1
    1494:	4bb9      	ldr	r3, [pc, #740]	; (177c <usart_init+0x300>)
    1496:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1498:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    149a:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    149c:	07d2      	lsls	r2, r2, #31
    149e:	d500      	bpl.n	14a2 <usart_init+0x26>
    14a0:	e164      	b.n	176c <usart_init+0x2f0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    14a2:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    14a4:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    14a6:	0792      	lsls	r2, r2, #30
    14a8:	d500      	bpl.n	14ac <usart_init+0x30>
    14aa:	e15f      	b.n	176c <usart_init+0x2f0>
    14ac:	49b4      	ldr	r1, [pc, #720]	; (1780 <usart_init+0x304>)
    14ae:	6a0a      	ldr	r2, [r1, #32]
    14b0:	1c87      	adds	r7, r0, #2
    14b2:	3b1b      	subs	r3, #27
    14b4:	40bb      	lsls	r3, r7
    14b6:	4313      	orrs	r3, r2
    14b8:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    14ba:	a90f      	add	r1, sp, #60	; 0x3c
    14bc:	272d      	movs	r7, #45	; 0x2d
    14be:	5df3      	ldrb	r3, [r6, r7]
    14c0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    14c2:	3014      	adds	r0, #20
    14c4:	b2c3      	uxtb	r3, r0
    14c6:	9302      	str	r3, [sp, #8]
    14c8:	0018      	movs	r0, r3
    14ca:	4bae      	ldr	r3, [pc, #696]	; (1784 <usart_init+0x308>)
    14cc:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    14ce:	9802      	ldr	r0, [sp, #8]
    14d0:	4bad      	ldr	r3, [pc, #692]	; (1788 <usart_init+0x30c>)
    14d2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    14d4:	5df0      	ldrb	r0, [r6, r7]
    14d6:	2100      	movs	r1, #0
    14d8:	4bac      	ldr	r3, [pc, #688]	; (178c <usart_init+0x310>)
    14da:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    14dc:	7af3      	ldrb	r3, [r6, #11]
    14de:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    14e0:	2324      	movs	r3, #36	; 0x24
    14e2:	5cf3      	ldrb	r3, [r6, r3]
    14e4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    14e6:	2325      	movs	r3, #37	; 0x25
    14e8:	5cf3      	ldrb	r3, [r6, r3]
    14ea:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    14ec:	7ef3      	ldrb	r3, [r6, #27]
    14ee:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    14f0:	7f33      	ldrb	r3, [r6, #28]
    14f2:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    14f4:	682b      	ldr	r3, [r5, #0]
    14f6:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    14f8:	0018      	movs	r0, r3
    14fa:	4ba0      	ldr	r3, [pc, #640]	; (177c <usart_init+0x300>)
    14fc:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    14fe:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    1500:	2200      	movs	r2, #0
    1502:	230e      	movs	r3, #14
    1504:	a906      	add	r1, sp, #24
    1506:	468c      	mov	ip, r1
    1508:	4463      	add	r3, ip
    150a:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    150c:	8a32      	ldrh	r2, [r6, #16]
    150e:	9202      	str	r2, [sp, #8]
    1510:	2380      	movs	r3, #128	; 0x80
    1512:	01db      	lsls	r3, r3, #7
    1514:	429a      	cmp	r2, r3
    1516:	d01a      	beq.n	154e <usart_init+0xd2>
    1518:	d804      	bhi.n	1524 <usart_init+0xa8>
    151a:	2380      	movs	r3, #128	; 0x80
    151c:	019b      	lsls	r3, r3, #6
    151e:	429a      	cmp	r2, r3
    1520:	d00b      	beq.n	153a <usart_init+0xbe>
    1522:	e104      	b.n	172e <usart_init+0x2b2>
    1524:	23c0      	movs	r3, #192	; 0xc0
    1526:	01db      	lsls	r3, r3, #7
    1528:	9a02      	ldr	r2, [sp, #8]
    152a:	429a      	cmp	r2, r3
    152c:	d00a      	beq.n	1544 <usart_init+0xc8>
    152e:	2380      	movs	r3, #128	; 0x80
    1530:	021b      	lsls	r3, r3, #8
    1532:	429a      	cmp	r2, r3
    1534:	d100      	bne.n	1538 <usart_init+0xbc>
    1536:	e0ff      	b.n	1738 <usart_init+0x2bc>
    1538:	e0f9      	b.n	172e <usart_init+0x2b2>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    153a:	2310      	movs	r3, #16
    153c:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    153e:	3b0f      	subs	r3, #15
    1540:	9307      	str	r3, [sp, #28]
    1542:	e0fd      	b.n	1740 <usart_init+0x2c4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1544:	2308      	movs	r3, #8
    1546:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1548:	3b07      	subs	r3, #7
    154a:	9307      	str	r3, [sp, #28]
    154c:	e0f8      	b.n	1740 <usart_init+0x2c4>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    154e:	6833      	ldr	r3, [r6, #0]
    1550:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    1552:	68f3      	ldr	r3, [r6, #12]
    1554:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1556:	6973      	ldr	r3, [r6, #20]
    1558:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    155a:	7e33      	ldrb	r3, [r6, #24]
    155c:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    155e:	2326      	movs	r3, #38	; 0x26
    1560:	5cf3      	ldrb	r3, [r6, r3]
    1562:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1564:	6873      	ldr	r3, [r6, #4]
    1566:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1568:	2b00      	cmp	r3, #0
    156a:	d015      	beq.n	1598 <usart_init+0x11c>
    156c:	2380      	movs	r3, #128	; 0x80
    156e:	055b      	lsls	r3, r3, #21
    1570:	459a      	cmp	sl, r3
    1572:	d136      	bne.n	15e2 <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    1574:	2327      	movs	r3, #39	; 0x27
    1576:	5cf3      	ldrb	r3, [r6, r3]
    1578:	2b00      	cmp	r3, #0
    157a:	d136      	bne.n	15ea <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    157c:	6a33      	ldr	r3, [r6, #32]
    157e:	001f      	movs	r7, r3
    1580:	b2c0      	uxtb	r0, r0
    1582:	4b83      	ldr	r3, [pc, #524]	; (1790 <usart_init+0x314>)
    1584:	4798      	blx	r3
    1586:	0001      	movs	r1, r0
    1588:	220e      	movs	r2, #14
    158a:	ab06      	add	r3, sp, #24
    158c:	469c      	mov	ip, r3
    158e:	4462      	add	r2, ip
    1590:	0038      	movs	r0, r7
    1592:	4b80      	ldr	r3, [pc, #512]	; (1794 <usart_init+0x318>)
    1594:	4798      	blx	r3
    1596:	e025      	b.n	15e4 <usart_init+0x168>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1598:	2308      	movs	r3, #8
    159a:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    159c:	2300      	movs	r3, #0
    159e:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    15a0:	2327      	movs	r3, #39	; 0x27
    15a2:	5cf3      	ldrb	r3, [r6, r3]
    15a4:	2b00      	cmp	r3, #0
    15a6:	d00b      	beq.n	15c0 <usart_init+0x144>
				status_code =
    15a8:	9b06      	ldr	r3, [sp, #24]
    15aa:	9300      	str	r3, [sp, #0]
    15ac:	9b07      	ldr	r3, [sp, #28]
    15ae:	220e      	movs	r2, #14
    15b0:	a906      	add	r1, sp, #24
    15b2:	468c      	mov	ip, r1
    15b4:	4462      	add	r2, ip
    15b6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    15b8:	6a30      	ldr	r0, [r6, #32]
    15ba:	4f77      	ldr	r7, [pc, #476]	; (1798 <usart_init+0x31c>)
    15bc:	47b8      	blx	r7
    15be:	e011      	b.n	15e4 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    15c0:	6a33      	ldr	r3, [r6, #32]
    15c2:	001f      	movs	r7, r3
    15c4:	b2c0      	uxtb	r0, r0
    15c6:	4b72      	ldr	r3, [pc, #456]	; (1790 <usart_init+0x314>)
    15c8:	4798      	blx	r3
    15ca:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    15cc:	9b06      	ldr	r3, [sp, #24]
    15ce:	9300      	str	r3, [sp, #0]
    15d0:	9b07      	ldr	r3, [sp, #28]
    15d2:	220e      	movs	r2, #14
    15d4:	a806      	add	r0, sp, #24
    15d6:	4684      	mov	ip, r0
    15d8:	4462      	add	r2, ip
    15da:	0038      	movs	r0, r7
    15dc:	4f6e      	ldr	r7, [pc, #440]	; (1798 <usart_init+0x31c>)
    15de:	47b8      	blx	r7
    15e0:	e000      	b.n	15e4 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    15e2:	2000      	movs	r0, #0
    15e4:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    15e6:	d000      	beq.n	15ea <usart_init+0x16e>
    15e8:	e0c0      	b.n	176c <usart_init+0x2f0>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    15ea:	7e73      	ldrb	r3, [r6, #25]
    15ec:	2b00      	cmp	r3, #0
    15ee:	d002      	beq.n	15f6 <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    15f0:	7eb3      	ldrb	r3, [r6, #26]
    15f2:	464a      	mov	r2, r9
    15f4:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    15f6:	682a      	ldr	r2, [r5, #0]
    15f8:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    15fa:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    15fc:	2b00      	cmp	r3, #0
    15fe:	d1fc      	bne.n	15fa <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    1600:	330e      	adds	r3, #14
    1602:	aa06      	add	r2, sp, #24
    1604:	4694      	mov	ip, r2
    1606:	4463      	add	r3, ip
    1608:	881b      	ldrh	r3, [r3, #0]
    160a:	464a      	mov	r2, r9
    160c:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    160e:	9b04      	ldr	r3, [sp, #16]
    1610:	465a      	mov	r2, fp
    1612:	4313      	orrs	r3, r2
    1614:	9a03      	ldr	r2, [sp, #12]
    1616:	4313      	orrs	r3, r2
    1618:	4652      	mov	r2, sl
    161a:	4313      	orrs	r3, r2
    161c:	433b      	orrs	r3, r7
    161e:	4642      	mov	r2, r8
    1620:	0212      	lsls	r2, r2, #8
    1622:	4313      	orrs	r3, r2
    1624:	9a05      	ldr	r2, [sp, #20]
    1626:	0757      	lsls	r7, r2, #29
    1628:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    162a:	2327      	movs	r3, #39	; 0x27
    162c:	5cf3      	ldrb	r3, [r6, r3]
    162e:	2b00      	cmp	r3, #0
    1630:	d101      	bne.n	1636 <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1632:	3304      	adds	r3, #4
    1634:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    1636:	7e71      	ldrb	r1, [r6, #25]
    1638:	0289      	lsls	r1, r1, #10
    163a:	7f33      	ldrb	r3, [r6, #28]
    163c:	025b      	lsls	r3, r3, #9
    163e:	4319      	orrs	r1, r3
    1640:	7f73      	ldrb	r3, [r6, #29]
    1642:	021b      	lsls	r3, r3, #8
    1644:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1646:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    1648:	5cf3      	ldrb	r3, [r6, r3]
    164a:	045b      	lsls	r3, r3, #17
    164c:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    164e:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    1650:	5cf2      	ldrb	r2, [r6, r3]
    1652:	0412      	lsls	r2, r2, #16
    1654:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    1656:	7af3      	ldrb	r3, [r6, #11]
    1658:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    165a:	8933      	ldrh	r3, [r6, #8]
    165c:	2bff      	cmp	r3, #255	; 0xff
    165e:	d004      	beq.n	166a <usart_init+0x1ee>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1660:	2280      	movs	r2, #128	; 0x80
    1662:	0452      	lsls	r2, r2, #17
    1664:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1666:	4319      	orrs	r1, r3
    1668:	e005      	b.n	1676 <usart_init+0x1fa>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    166a:	7ef3      	ldrb	r3, [r6, #27]
    166c:	2b00      	cmp	r3, #0
    166e:	d002      	beq.n	1676 <usart_init+0x1fa>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1670:	2380      	movs	r3, #128	; 0x80
    1672:	04db      	lsls	r3, r3, #19
    1674:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1676:	232c      	movs	r3, #44	; 0x2c
    1678:	5cf3      	ldrb	r3, [r6, r3]
    167a:	2b00      	cmp	r3, #0
    167c:	d103      	bne.n	1686 <usart_init+0x20a>
    167e:	4b47      	ldr	r3, [pc, #284]	; (179c <usart_init+0x320>)
    1680:	789b      	ldrb	r3, [r3, #2]
    1682:	079b      	lsls	r3, r3, #30
    1684:	d501      	bpl.n	168a <usart_init+0x20e>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1686:	2380      	movs	r3, #128	; 0x80
    1688:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    168a:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    168c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    168e:	2b00      	cmp	r3, #0
    1690:	d1fc      	bne.n	168c <usart_init+0x210>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1692:	464b      	mov	r3, r9
    1694:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1696:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1698:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    169a:	2b00      	cmp	r3, #0
    169c:	d1fc      	bne.n	1698 <usart_init+0x21c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    169e:	464b      	mov	r3, r9
    16a0:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    16a2:	ab0e      	add	r3, sp, #56	; 0x38
    16a4:	2280      	movs	r2, #128	; 0x80
    16a6:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    16a8:	2200      	movs	r2, #0
    16aa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    16ac:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    16ae:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    16b0:	6b33      	ldr	r3, [r6, #48]	; 0x30
    16b2:	930a      	str	r3, [sp, #40]	; 0x28
    16b4:	6b73      	ldr	r3, [r6, #52]	; 0x34
    16b6:	930b      	str	r3, [sp, #44]	; 0x2c
    16b8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    16ba:	930c      	str	r3, [sp, #48]	; 0x30
    16bc:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    16be:	9302      	str	r3, [sp, #8]
    16c0:	930d      	str	r3, [sp, #52]	; 0x34
    16c2:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    16c4:	ae0e      	add	r6, sp, #56	; 0x38
    16c6:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    16c8:	00bb      	lsls	r3, r7, #2
    16ca:	aa0a      	add	r2, sp, #40	; 0x28
    16cc:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    16ce:	2800      	cmp	r0, #0
    16d0:	d102      	bne.n	16d8 <usart_init+0x25c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    16d2:	0020      	movs	r0, r4
    16d4:	4b32      	ldr	r3, [pc, #200]	; (17a0 <usart_init+0x324>)
    16d6:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    16d8:	1c43      	adds	r3, r0, #1
    16da:	d005      	beq.n	16e8 <usart_init+0x26c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    16dc:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    16de:	0c00      	lsrs	r0, r0, #16
    16e0:	b2c0      	uxtb	r0, r0
    16e2:	0031      	movs	r1, r6
    16e4:	4b2f      	ldr	r3, [pc, #188]	; (17a4 <usart_init+0x328>)
    16e6:	4798      	blx	r3
    16e8:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    16ea:	2f04      	cmp	r7, #4
    16ec:	d1eb      	bne.n	16c6 <usart_init+0x24a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    16ee:	2300      	movs	r3, #0
    16f0:	60eb      	str	r3, [r5, #12]
    16f2:	612b      	str	r3, [r5, #16]
    16f4:	616b      	str	r3, [r5, #20]
    16f6:	61ab      	str	r3, [r5, #24]
    16f8:	61eb      	str	r3, [r5, #28]
    16fa:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    16fc:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    16fe:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1700:	2200      	movs	r2, #0
    1702:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1704:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1706:	3330      	adds	r3, #48	; 0x30
    1708:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    170a:	3301      	adds	r3, #1
    170c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    170e:	3301      	adds	r3, #1
    1710:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1712:	3301      	adds	r3, #1
    1714:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1716:	6828      	ldr	r0, [r5, #0]
    1718:	4b18      	ldr	r3, [pc, #96]	; (177c <usart_init+0x300>)
    171a:	4798      	blx	r3
    171c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    171e:	4922      	ldr	r1, [pc, #136]	; (17a8 <usart_init+0x32c>)
    1720:	4b22      	ldr	r3, [pc, #136]	; (17ac <usart_init+0x330>)
    1722:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1724:	00a4      	lsls	r4, r4, #2
    1726:	4b22      	ldr	r3, [pc, #136]	; (17b0 <usart_init+0x334>)
    1728:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    172a:	2300      	movs	r3, #0
    172c:	e01e      	b.n	176c <usart_init+0x2f0>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    172e:	2310      	movs	r3, #16
    1730:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1732:	2300      	movs	r3, #0
    1734:	9307      	str	r3, [sp, #28]
    1736:	e003      	b.n	1740 <usart_init+0x2c4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1738:	2303      	movs	r3, #3
    173a:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    173c:	2300      	movs	r3, #0
    173e:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1740:	6833      	ldr	r3, [r6, #0]
    1742:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    1744:	68f3      	ldr	r3, [r6, #12]
    1746:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1748:	6973      	ldr	r3, [r6, #20]
    174a:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    174c:	7e33      	ldrb	r3, [r6, #24]
    174e:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1750:	2326      	movs	r3, #38	; 0x26
    1752:	5cf3      	ldrb	r3, [r6, r3]
    1754:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1756:	6873      	ldr	r3, [r6, #4]
    1758:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    175a:	2b00      	cmp	r3, #0
    175c:	d100      	bne.n	1760 <usart_init+0x2e4>
    175e:	e71f      	b.n	15a0 <usart_init+0x124>
    1760:	2380      	movs	r3, #128	; 0x80
    1762:	055b      	lsls	r3, r3, #21
    1764:	459a      	cmp	sl, r3
    1766:	d100      	bne.n	176a <usart_init+0x2ee>
    1768:	e704      	b.n	1574 <usart_init+0xf8>
    176a:	e73e      	b.n	15ea <usart_init+0x16e>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    176c:	0018      	movs	r0, r3
    176e:	b011      	add	sp, #68	; 0x44
    1770:	bc3c      	pop	{r2, r3, r4, r5}
    1772:	4690      	mov	r8, r2
    1774:	4699      	mov	r9, r3
    1776:	46a2      	mov	sl, r4
    1778:	46ab      	mov	fp, r5
    177a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    177c:	00000fd9 	.word	0x00000fd9
    1780:	40000400 	.word	0x40000400
    1784:	00002241 	.word	0x00002241
    1788:	000021b5 	.word	0x000021b5
    178c:	00000e05 	.word	0x00000e05
    1790:	0000225d 	.word	0x0000225d
    1794:	00000c15 	.word	0x00000c15
    1798:	00000c3d 	.word	0x00000c3d
    179c:	41002000 	.word	0x41002000
    17a0:	00000e51 	.word	0x00000e51
    17a4:	00002339 	.word	0x00002339
    17a8:	00001935 	.word	0x00001935
    17ac:	00001019 	.word	0x00001019
    17b0:	200007b8 	.word	0x200007b8

000017b4 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    17b4:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    17b6:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    17b8:	2a00      	cmp	r2, #0
    17ba:	d00e      	beq.n	17da <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    17bc:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    17be:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    17c0:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    17c2:	2a00      	cmp	r2, #0
    17c4:	d109      	bne.n	17da <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    17c6:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    17c8:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    17ca:	2a00      	cmp	r2, #0
    17cc:	d1fc      	bne.n	17c8 <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    17ce:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    17d0:	2102      	movs	r1, #2
    17d2:	7e1a      	ldrb	r2, [r3, #24]
    17d4:	420a      	tst	r2, r1
    17d6:	d0fc      	beq.n	17d2 <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    17d8:	2300      	movs	r3, #0
}
    17da:	0018      	movs	r0, r3
    17dc:	4770      	bx	lr
    17de:	46c0      	nop			; (mov r8, r8)

000017e0 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    17e0:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    17e2:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    17e4:	2a00      	cmp	r2, #0
    17e6:	d030      	beq.n	184a <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    17e8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    17ea:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    17ec:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    17ee:	2a00      	cmp	r2, #0
    17f0:	d12b      	bne.n	184a <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    17f2:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    17f4:	7e10      	ldrb	r0, [r2, #24]
    17f6:	0740      	lsls	r0, r0, #29
    17f8:	d527      	bpl.n	184a <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    17fa:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    17fc:	2b00      	cmp	r3, #0
    17fe:	d1fc      	bne.n	17fa <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1800:	8b53      	ldrh	r3, [r2, #26]
    1802:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    1804:	0698      	lsls	r0, r3, #26
    1806:	d01d      	beq.n	1844 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1808:	0798      	lsls	r0, r3, #30
    180a:	d503      	bpl.n	1814 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    180c:	2302      	movs	r3, #2
    180e:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
    1810:	3318      	adds	r3, #24
    1812:	e01a      	b.n	184a <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1814:	0758      	lsls	r0, r3, #29
    1816:	d503      	bpl.n	1820 <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1818:	2304      	movs	r3, #4
    181a:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
    181c:	331a      	adds	r3, #26
    181e:	e014      	b.n	184a <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1820:	07d8      	lsls	r0, r3, #31
    1822:	d503      	bpl.n	182c <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1824:	2301      	movs	r3, #1
    1826:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
    1828:	3312      	adds	r3, #18
    182a:	e00e      	b.n	184a <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    182c:	06d8      	lsls	r0, r3, #27
    182e:	d503      	bpl.n	1838 <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1830:	2310      	movs	r3, #16
    1832:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
    1834:	3332      	adds	r3, #50	; 0x32
    1836:	e008      	b.n	184a <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1838:	069b      	lsls	r3, r3, #26
    183a:	d503      	bpl.n	1844 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    183c:	2320      	movs	r3, #32
    183e:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
    1840:	3321      	adds	r3, #33	; 0x21
    1842:	e002      	b.n	184a <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1844:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1846:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    1848:	2300      	movs	r3, #0
}
    184a:	0018      	movs	r0, r3
    184c:	4770      	bx	lr
    184e:	46c0      	nop			; (mov r8, r8)

00001850 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1852:	0006      	movs	r6, r0
    1854:	000c      	movs	r4, r1
    1856:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1858:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    185a:	4b0a      	ldr	r3, [pc, #40]	; (1884 <_usart_write_buffer+0x34>)
    185c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    185e:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    1860:	b29b      	uxth	r3, r3
    1862:	2b00      	cmp	r3, #0
    1864:	d003      	beq.n	186e <_usart_write_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1866:	4b08      	ldr	r3, [pc, #32]	; (1888 <_usart_write_buffer+0x38>)
    1868:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    186a:	2005      	movs	r0, #5
    186c:	e009      	b.n	1882 <_usart_write_buffer+0x32>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    186e:	85f5      	strh	r5, [r6, #46]	; 0x2e
    1870:	4b05      	ldr	r3, [pc, #20]	; (1888 <_usart_write_buffer+0x38>)
    1872:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->tx_buffer_ptr              = tx_data;
    1874:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    1876:	2205      	movs	r2, #5
    1878:	2333      	movs	r3, #51	; 0x33
    187a:	54f2      	strb	r2, [r6, r3]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    187c:	3b32      	subs	r3, #50	; 0x32
    187e:	75bb      	strb	r3, [r7, #22]

	return STATUS_OK;
    1880:	2000      	movs	r0, #0
}
    1882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1884:	00000911 	.word	0x00000911
    1888:	00000951 	.word	0x00000951

0000188c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    188c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    188e:	0004      	movs	r4, r0
    1890:	000d      	movs	r5, r1
    1892:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1894:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1896:	4b0f      	ldr	r3, [pc, #60]	; (18d4 <_usart_read_buffer+0x48>)
    1898:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    189a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    189c:	b29b      	uxth	r3, r3
    189e:	2b00      	cmp	r3, #0
    18a0:	d003      	beq.n	18aa <_usart_read_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    18a2:	4b0d      	ldr	r3, [pc, #52]	; (18d8 <_usart_read_buffer+0x4c>)
    18a4:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    18a6:	2005      	movs	r0, #5
    18a8:	e013      	b.n	18d2 <_usart_read_buffer+0x46>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    18aa:	85a6      	strh	r6, [r4, #44]	; 0x2c
    18ac:	4b0a      	ldr	r3, [pc, #40]	; (18d8 <_usart_read_buffer+0x4c>)
    18ae:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->rx_buffer_ptr              = rx_data;
    18b0:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    18b2:	2205      	movs	r2, #5
    18b4:	2332      	movs	r3, #50	; 0x32
    18b6:	54e2      	strb	r2, [r4, r3]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    18b8:	3b2e      	subs	r3, #46	; 0x2e
    18ba:	75bb      	strb	r3, [r7, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    18bc:	7a23      	ldrb	r3, [r4, #8]
    18be:	2b00      	cmp	r3, #0
    18c0:	d001      	beq.n	18c6 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    18c2:	2320      	movs	r3, #32
    18c4:	75bb      	strb	r3, [r7, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    18c6:	7a63      	ldrb	r3, [r4, #9]
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
    18c8:	2000      	movs	r0, #0
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    18ca:	2b00      	cmp	r3, #0
    18cc:	d001      	beq.n	18d2 <_usart_read_buffer+0x46>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    18ce:	2308      	movs	r3, #8
    18d0:	75bb      	strb	r3, [r7, #22]
	}
#endif

	return STATUS_OK;
}
    18d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18d4:	00000911 	.word	0x00000911
    18d8:	00000951 	.word	0x00000951

000018dc <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    18dc:	1c93      	adds	r3, r2, #2
    18de:	009b      	lsls	r3, r3, #2
    18e0:	18c3      	adds	r3, r0, r3
    18e2:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    18e4:	2130      	movs	r1, #48	; 0x30
    18e6:	2301      	movs	r3, #1
    18e8:	4093      	lsls	r3, r2
    18ea:	5c42      	ldrb	r2, [r0, r1]
    18ec:	4313      	orrs	r3, r2
    18ee:	5443      	strb	r3, [r0, r1]
}
    18f0:	4770      	bx	lr
    18f2:	46c0      	nop			; (mov r8, r8)

000018f4 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    18f4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    18f6:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    18f8:	2a00      	cmp	r2, #0
    18fa:	d006      	beq.n	190a <usart_write_buffer_job+0x16>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    18fc:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    18fe:	3305      	adds	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    1900:	2c00      	cmp	r4, #0
    1902:	d002      	beq.n	190a <usart_write_buffer_job+0x16>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    1904:	4b02      	ldr	r3, [pc, #8]	; (1910 <usart_write_buffer_job+0x1c>)
    1906:	4798      	blx	r3
    1908:	0003      	movs	r3, r0
}
    190a:	0018      	movs	r0, r3
    190c:	bd10      	pop	{r4, pc}
    190e:	46c0      	nop			; (mov r8, r8)
    1910:	00001851 	.word	0x00001851

00001914 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1914:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1916:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    1918:	2a00      	cmp	r2, #0
    191a:	d006      	beq.n	192a <usart_read_buffer_job+0x16>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    191c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    191e:	3305      	adds	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1920:	2c00      	cmp	r4, #0
    1922:	d002      	beq.n	192a <usart_read_buffer_job+0x16>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    1924:	4b02      	ldr	r3, [pc, #8]	; (1930 <usart_read_buffer_job+0x1c>)
    1926:	4798      	blx	r3
    1928:	0003      	movs	r3, r0
}
    192a:	0018      	movs	r0, r3
    192c:	bd10      	pop	{r4, pc}
    192e:	46c0      	nop			; (mov r8, r8)
    1930:	0000188d 	.word	0x0000188d

00001934 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1936:	0080      	lsls	r0, r0, #2
    1938:	4b60      	ldr	r3, [pc, #384]	; (1abc <_usart_interrupt_handler+0x188>)
    193a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    193c:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    193e:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1940:	2b00      	cmp	r3, #0
    1942:	d1fc      	bne.n	193e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1944:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1946:	7da6      	ldrb	r6, [r4, #22]
    1948:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    194a:	2330      	movs	r3, #48	; 0x30
    194c:	5ceb      	ldrb	r3, [r5, r3]
    194e:	2231      	movs	r2, #49	; 0x31
    1950:	5caf      	ldrb	r7, [r5, r2]
    1952:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1954:	07f3      	lsls	r3, r6, #31
    1956:	d522      	bpl.n	199e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1958:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    195a:	b29b      	uxth	r3, r3
    195c:	2b00      	cmp	r3, #0
    195e:	d01c      	beq.n	199a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1960:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1962:	7813      	ldrb	r3, [r2, #0]
    1964:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1966:	1c51      	adds	r1, r2, #1
    1968:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    196a:	7969      	ldrb	r1, [r5, #5]
    196c:	2901      	cmp	r1, #1
    196e:	d001      	beq.n	1974 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1970:	b29b      	uxth	r3, r3
    1972:	e004      	b.n	197e <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1974:	7851      	ldrb	r1, [r2, #1]
    1976:	0209      	lsls	r1, r1, #8
    1978:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    197a:	3202      	adds	r2, #2
    197c:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    197e:	05db      	lsls	r3, r3, #23
    1980:	0ddb      	lsrs	r3, r3, #23
    1982:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1984:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1986:	3b01      	subs	r3, #1
    1988:	b29b      	uxth	r3, r3
    198a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    198c:	2b00      	cmp	r3, #0
    198e:	d106      	bne.n	199e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1990:	3301      	adds	r3, #1
    1992:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1994:	3301      	adds	r3, #1
    1996:	75a3      	strb	r3, [r4, #22]
    1998:	e001      	b.n	199e <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    199a:	2301      	movs	r3, #1
    199c:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    199e:	07b3      	lsls	r3, r6, #30
    19a0:	d509      	bpl.n	19b6 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    19a2:	2302      	movs	r3, #2
    19a4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    19a6:	2200      	movs	r2, #0
    19a8:	3331      	adds	r3, #49	; 0x31
    19aa:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    19ac:	07fb      	lsls	r3, r7, #31
    19ae:	d502      	bpl.n	19b6 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    19b0:	0028      	movs	r0, r5
    19b2:	68eb      	ldr	r3, [r5, #12]
    19b4:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    19b6:	0773      	lsls	r3, r6, #29
    19b8:	d560      	bpl.n	1a7c <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
    19ba:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    19bc:	b29b      	uxth	r3, r3
    19be:	2b00      	cmp	r3, #0
    19c0:	d05a      	beq.n	1a78 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    19c2:	8b63      	ldrh	r3, [r4, #26]
    19c4:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    19c6:	071a      	lsls	r2, r3, #28
    19c8:	d402      	bmi.n	19d0 <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    19ca:	223f      	movs	r2, #63	; 0x3f
    19cc:	4013      	ands	r3, r2
    19ce:	e001      	b.n	19d4 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    19d0:	2237      	movs	r2, #55	; 0x37
    19d2:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    19d4:	2b00      	cmp	r3, #0
    19d6:	d02d      	beq.n	1a34 <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    19d8:	079a      	lsls	r2, r3, #30
    19da:	d505      	bpl.n	19e8 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    19dc:	221a      	movs	r2, #26
    19de:	2332      	movs	r3, #50	; 0x32
    19e0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    19e2:	3b30      	subs	r3, #48	; 0x30
    19e4:	8363      	strh	r3, [r4, #26]
    19e6:	e01f      	b.n	1a28 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    19e8:	075a      	lsls	r2, r3, #29
    19ea:	d505      	bpl.n	19f8 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    19ec:	221e      	movs	r2, #30
    19ee:	2332      	movs	r3, #50	; 0x32
    19f0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    19f2:	3b2e      	subs	r3, #46	; 0x2e
    19f4:	8363      	strh	r3, [r4, #26]
    19f6:	e017      	b.n	1a28 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    19f8:	07da      	lsls	r2, r3, #31
    19fa:	d505      	bpl.n	1a08 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    19fc:	2213      	movs	r2, #19
    19fe:	2332      	movs	r3, #50	; 0x32
    1a00:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1a02:	3b31      	subs	r3, #49	; 0x31
    1a04:	8363      	strh	r3, [r4, #26]
    1a06:	e00f      	b.n	1a28 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1a08:	06da      	lsls	r2, r3, #27
    1a0a:	d505      	bpl.n	1a18 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1a0c:	2242      	movs	r2, #66	; 0x42
    1a0e:	2332      	movs	r3, #50	; 0x32
    1a10:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1a12:	3b22      	subs	r3, #34	; 0x22
    1a14:	8363      	strh	r3, [r4, #26]
    1a16:	e007      	b.n	1a28 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1a18:	2220      	movs	r2, #32
    1a1a:	421a      	tst	r2, r3
    1a1c:	d004      	beq.n	1a28 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1a1e:	3221      	adds	r2, #33	; 0x21
    1a20:	2332      	movs	r3, #50	; 0x32
    1a22:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1a24:	3b12      	subs	r3, #18
    1a26:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1a28:	077b      	lsls	r3, r7, #29
    1a2a:	d527      	bpl.n	1a7c <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1a2c:	0028      	movs	r0, r5
    1a2e:	696b      	ldr	r3, [r5, #20]
    1a30:	4798      	blx	r3
    1a32:	e023      	b.n	1a7c <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1a34:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1a36:	05db      	lsls	r3, r3, #23
    1a38:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1a3a:	b2da      	uxtb	r2, r3
    1a3c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1a3e:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1a40:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1a42:	1c51      	adds	r1, r2, #1
    1a44:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1a46:	7969      	ldrb	r1, [r5, #5]
    1a48:	2901      	cmp	r1, #1
    1a4a:	d104      	bne.n	1a56 <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1a4c:	0a1b      	lsrs	r3, r3, #8
    1a4e:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1a50:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1a52:	3301      	adds	r3, #1
    1a54:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1a56:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1a58:	3b01      	subs	r3, #1
    1a5a:	b29b      	uxth	r3, r3
    1a5c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1a5e:	2b00      	cmp	r3, #0
    1a60:	d10c      	bne.n	1a7c <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1a62:	3304      	adds	r3, #4
    1a64:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1a66:	2200      	movs	r2, #0
    1a68:	332e      	adds	r3, #46	; 0x2e
    1a6a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1a6c:	07bb      	lsls	r3, r7, #30
    1a6e:	d505      	bpl.n	1a7c <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1a70:	0028      	movs	r0, r5
    1a72:	692b      	ldr	r3, [r5, #16]
    1a74:	4798      	blx	r3
    1a76:	e001      	b.n	1a7c <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1a78:	2304      	movs	r3, #4
    1a7a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1a7c:	06f3      	lsls	r3, r6, #27
    1a7e:	d507      	bpl.n	1a90 <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1a80:	2310      	movs	r3, #16
    1a82:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1a84:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1a86:	06fb      	lsls	r3, r7, #27
    1a88:	d502      	bpl.n	1a90 <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1a8a:	0028      	movs	r0, r5
    1a8c:	69eb      	ldr	r3, [r5, #28]
    1a8e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1a90:	06b3      	lsls	r3, r6, #26
    1a92:	d507      	bpl.n	1aa4 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1a94:	2320      	movs	r3, #32
    1a96:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1a98:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1a9a:	073b      	lsls	r3, r7, #28
    1a9c:	d502      	bpl.n	1aa4 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1a9e:	0028      	movs	r0, r5
    1aa0:	69ab      	ldr	r3, [r5, #24]
    1aa2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1aa4:	0733      	lsls	r3, r6, #28
    1aa6:	d507      	bpl.n	1ab8 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1aa8:	2308      	movs	r3, #8
    1aaa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1aac:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1aae:	06bb      	lsls	r3, r7, #26
    1ab0:	d502      	bpl.n	1ab8 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1ab2:	6a2b      	ldr	r3, [r5, #32]
    1ab4:	0028      	movs	r0, r5
    1ab6:	4798      	blx	r3
		}
	}
#endif
}
    1ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1aba:	46c0      	nop			; (mov r8, r8)
    1abc:	200007b8 	.word	0x200007b8

00001ac0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1ac0:	b510      	push	{r4, lr}
	switch (clock_source) {
    1ac2:	2808      	cmp	r0, #8
    1ac4:	d803      	bhi.n	1ace <system_clock_source_get_hz+0xe>
    1ac6:	0080      	lsls	r0, r0, #2
    1ac8:	4b1b      	ldr	r3, [pc, #108]	; (1b38 <system_clock_source_get_hz+0x78>)
    1aca:	581b      	ldr	r3, [r3, r0]
    1acc:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1ace:	2000      	movs	r0, #0
    1ad0:	e030      	b.n	1b34 <system_clock_source_get_hz+0x74>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1ad2:	4b1a      	ldr	r3, [pc, #104]	; (1b3c <system_clock_source_get_hz+0x7c>)
    1ad4:	6918      	ldr	r0, [r3, #16]
    1ad6:	e02d      	b.n	1b34 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1ad8:	4b19      	ldr	r3, [pc, #100]	; (1b40 <system_clock_source_get_hz+0x80>)
    1ada:	6a1b      	ldr	r3, [r3, #32]
    1adc:	059b      	lsls	r3, r3, #22
    1ade:	0f9b      	lsrs	r3, r3, #30
    1ae0:	4818      	ldr	r0, [pc, #96]	; (1b44 <system_clock_source_get_hz+0x84>)
    1ae2:	40d8      	lsrs	r0, r3
    1ae4:	e026      	b.n	1b34 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1ae6:	4b15      	ldr	r3, [pc, #84]	; (1b3c <system_clock_source_get_hz+0x7c>)
    1ae8:	6958      	ldr	r0, [r3, #20]
    1aea:	e023      	b.n	1b34 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1aec:	4b13      	ldr	r3, [pc, #76]	; (1b3c <system_clock_source_get_hz+0x7c>)
    1aee:	681b      	ldr	r3, [r3, #0]
    1af0:	2002      	movs	r0, #2
    1af2:	4018      	ands	r0, r3
    1af4:	d01e      	beq.n	1b34 <system_clock_source_get_hz+0x74>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1af6:	4912      	ldr	r1, [pc, #72]	; (1b40 <system_clock_source_get_hz+0x80>)
    1af8:	2210      	movs	r2, #16
    1afa:	68cb      	ldr	r3, [r1, #12]
    1afc:	421a      	tst	r2, r3
    1afe:	d0fc      	beq.n	1afa <system_clock_source_get_hz+0x3a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1b00:	4b0e      	ldr	r3, [pc, #56]	; (1b3c <system_clock_source_get_hz+0x7c>)
    1b02:	681b      	ldr	r3, [r3, #0]
    1b04:	075b      	lsls	r3, r3, #29
    1b06:	d514      	bpl.n	1b32 <system_clock_source_get_hz+0x72>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1b08:	2000      	movs	r0, #0
    1b0a:	4b0f      	ldr	r3, [pc, #60]	; (1b48 <system_clock_source_get_hz+0x88>)
    1b0c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1b0e:	4b0b      	ldr	r3, [pc, #44]	; (1b3c <system_clock_source_get_hz+0x7c>)
    1b10:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1b12:	041b      	lsls	r3, r3, #16
    1b14:	0c1b      	lsrs	r3, r3, #16
    1b16:	4358      	muls	r0, r3
    1b18:	e00c      	b.n	1b34 <system_clock_source_get_hz+0x74>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1b1a:	2350      	movs	r3, #80	; 0x50
    1b1c:	4a08      	ldr	r2, [pc, #32]	; (1b40 <system_clock_source_get_hz+0x80>)
    1b1e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1b20:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1b22:	075b      	lsls	r3, r3, #29
    1b24:	d506      	bpl.n	1b34 <system_clock_source_get_hz+0x74>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1b26:	4b05      	ldr	r3, [pc, #20]	; (1b3c <system_clock_source_get_hz+0x7c>)
    1b28:	68d8      	ldr	r0, [r3, #12]
    1b2a:	e003      	b.n	1b34 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1b2c:	2080      	movs	r0, #128	; 0x80
    1b2e:	0200      	lsls	r0, r0, #8
    1b30:	e000      	b.n	1b34 <system_clock_source_get_hz+0x74>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1b32:	4806      	ldr	r0, [pc, #24]	; (1b4c <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    1b34:	bd10      	pop	{r4, pc}
    1b36:	46c0      	nop			; (mov r8, r8)
    1b38:	00008ab0 	.word	0x00008ab0
    1b3c:	200000f0 	.word	0x200000f0
    1b40:	40000800 	.word	0x40000800
    1b44:	007a1200 	.word	0x007a1200
    1b48:	0000225d 	.word	0x0000225d
    1b4c:	02dc6c00 	.word	0x02dc6c00

00001b50 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1b50:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1b52:	4c0c      	ldr	r4, [pc, #48]	; (1b84 <system_clock_source_osc8m_set_config+0x34>)
    1b54:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1b56:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1b58:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1b5a:	7842      	ldrb	r2, [r0, #1]
    1b5c:	2001      	movs	r0, #1
    1b5e:	4002      	ands	r2, r0
    1b60:	0192      	lsls	r2, r2, #6
    1b62:	2640      	movs	r6, #64	; 0x40
    1b64:	43b3      	bics	r3, r6
    1b66:	4313      	orrs	r3, r2
    1b68:	0002      	movs	r2, r0
    1b6a:	402a      	ands	r2, r5
    1b6c:	01d2      	lsls	r2, r2, #7
    1b6e:	307f      	adds	r0, #127	; 0x7f
    1b70:	4383      	bics	r3, r0
    1b72:	4313      	orrs	r3, r2
    1b74:	2203      	movs	r2, #3
    1b76:	400a      	ands	r2, r1
    1b78:	0212      	lsls	r2, r2, #8
    1b7a:	4903      	ldr	r1, [pc, #12]	; (1b88 <system_clock_source_osc8m_set_config+0x38>)
    1b7c:	400b      	ands	r3, r1
    1b7e:	4313      	orrs	r3, r2
    1b80:	6223      	str	r3, [r4, #32]
}
    1b82:	bd70      	pop	{r4, r5, r6, pc}
    1b84:	40000800 	.word	0x40000800
    1b88:	fffffcff 	.word	0xfffffcff

00001b8c <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b8e:	4657      	mov	r7, sl
    1b90:	464e      	mov	r6, r9
    1b92:	4645      	mov	r5, r8
    1b94:	b4e0      	push	{r5, r6, r7}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1b96:	4e1c      	ldr	r6, [pc, #112]	; (1c08 <system_clock_source_osc32k_set_config+0x7c>)
    1b98:	69b3      	ldr	r3, [r6, #24]
    1b9a:	469c      	mov	ip, r3

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    1b9c:	7841      	ldrb	r1, [r0, #1]
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1b9e:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1ba0:	7907      	ldrb	r7, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1ba2:	78c3      	ldrb	r3, [r0, #3]
    1ba4:	4699      	mov	r9, r3
	temp.bit.WRTLOCK  = config->write_once;
    1ba6:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    1ba8:	7883      	ldrb	r3, [r0, #2]
    1baa:	2001      	movs	r0, #1
    1bac:	4003      	ands	r3, r0
    1bae:	009b      	lsls	r3, r3, #2
    1bb0:	469a      	mov	sl, r3
    1bb2:	2204      	movs	r2, #4
    1bb4:	4690      	mov	r8, r2
    1bb6:	4662      	mov	r2, ip
    1bb8:	4643      	mov	r3, r8
    1bba:	439a      	bics	r2, r3
    1bbc:	0013      	movs	r3, r2
    1bbe:	4652      	mov	r2, sl
    1bc0:	431a      	orrs	r2, r3
    1bc2:	0013      	movs	r3, r2
    1bc4:	4001      	ands	r1, r0
    1bc6:	00c9      	lsls	r1, r1, #3
    1bc8:	2208      	movs	r2, #8
    1bca:	4393      	bics	r3, r2
    1bcc:	430b      	orrs	r3, r1
    1bce:	464a      	mov	r2, r9
    1bd0:	4002      	ands	r2, r0
    1bd2:	0192      	lsls	r2, r2, #6
    1bd4:	2140      	movs	r1, #64	; 0x40
    1bd6:	438b      	bics	r3, r1
    1bd8:	4313      	orrs	r3, r2
    1bda:	4007      	ands	r7, r0
    1bdc:	01ff      	lsls	r7, r7, #7
    1bde:	2280      	movs	r2, #128	; 0x80
    1be0:	4393      	bics	r3, r2
    1be2:	433b      	orrs	r3, r7
    1be4:	3a79      	subs	r2, #121	; 0x79
    1be6:	4015      	ands	r5, r2
    1be8:	022d      	lsls	r5, r5, #8
    1bea:	4f08      	ldr	r7, [pc, #32]	; (1c0c <system_clock_source_osc32k_set_config+0x80>)
    1bec:	403b      	ands	r3, r7
    1bee:	432b      	orrs	r3, r5
    1bf0:	4004      	ands	r4, r0
    1bf2:	0320      	lsls	r0, r4, #12
    1bf4:	4c06      	ldr	r4, [pc, #24]	; (1c10 <system_clock_source_osc32k_set_config+0x84>)
    1bf6:	401c      	ands	r4, r3
    1bf8:	4304      	orrs	r4, r0
    1bfa:	61b4      	str	r4, [r6, #24]
}
    1bfc:	bc1c      	pop	{r2, r3, r4}
    1bfe:	4690      	mov	r8, r2
    1c00:	4699      	mov	r9, r3
    1c02:	46a2      	mov	sl, r4
    1c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c06:	46c0      	nop			; (mov r8, r8)
    1c08:	40000800 	.word	0x40000800
    1c0c:	fffff8ff 	.word	0xfffff8ff
    1c10:	ffffefff 	.word	0xffffefff

00001c14 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1c14:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c16:	465f      	mov	r7, fp
    1c18:	4656      	mov	r6, sl
    1c1a:	464d      	mov	r5, r9
    1c1c:	4644      	mov	r4, r8
    1c1e:	b4f0      	push	{r4, r5, r6, r7}
    1c20:	b083      	sub	sp, #12
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1c22:	4e2e      	ldr	r6, [pc, #184]	; (1cdc <system_clock_source_xosc32k_set_config+0xc8>)
    1c24:	8ab3      	ldrh	r3, [r6, #20]
    1c26:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    1c28:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1c2a:	7803      	ldrb	r3, [r0, #0]
    1c2c:	425a      	negs	r2, r3
    1c2e:	415a      	adcs	r2, r3
    1c30:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1c32:	7883      	ldrb	r3, [r0, #2]
    1c34:	469b      	mov	fp, r3
	temp.bit.EN1K = config->enable_1khz_output;
    1c36:	78c3      	ldrb	r3, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    1c38:	7902      	ldrb	r2, [r0, #4]
    1c3a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1c3c:	7b47      	ldrb	r7, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1c3e:	7b02      	ldrb	r2, [r0, #12]
    1c40:	9201      	str	r2, [sp, #4]
	temp.bit.WRTLOCK  = config->write_once;
    1c42:	7b84      	ldrb	r4, [r0, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1c44:	6882      	ldr	r2, [r0, #8]
    1c46:	4826      	ldr	r0, [pc, #152]	; (1ce0 <system_clock_source_xosc32k_set_config+0xcc>)
    1c48:	6142      	str	r2, [r0, #20]

	SYSCTRL->XOSC32K = temp;
    1c4a:	2001      	movs	r0, #1
    1c4c:	464a      	mov	r2, r9
    1c4e:	0092      	lsls	r2, r2, #2
    1c50:	4691      	mov	r9, r2
    1c52:	2204      	movs	r2, #4
    1c54:	4692      	mov	sl, r2
    1c56:	4662      	mov	r2, ip
    1c58:	4651      	mov	r1, sl
    1c5a:	438a      	bics	r2, r1
    1c5c:	4694      	mov	ip, r2
    1c5e:	464a      	mov	r2, r9
    1c60:	4661      	mov	r1, ip
    1c62:	430a      	orrs	r2, r1
    1c64:	4694      	mov	ip, r2
    1c66:	4642      	mov	r2, r8
    1c68:	4002      	ands	r2, r0
    1c6a:	00d2      	lsls	r2, r2, #3
    1c6c:	4690      	mov	r8, r2
    1c6e:	2208      	movs	r2, #8
    1c70:	4691      	mov	r9, r2
    1c72:	4662      	mov	r2, ip
    1c74:	4649      	mov	r1, r9
    1c76:	438a      	bics	r2, r1
    1c78:	4694      	mov	ip, r2
    1c7a:	4642      	mov	r2, r8
    1c7c:	4661      	mov	r1, ip
    1c7e:	430a      	orrs	r2, r1
    1c80:	4694      	mov	ip, r2
    1c82:	4003      	ands	r3, r0
    1c84:	011b      	lsls	r3, r3, #4
    1c86:	2210      	movs	r2, #16
    1c88:	4690      	mov	r8, r2
    1c8a:	4662      	mov	r2, ip
    1c8c:	4641      	mov	r1, r8
    1c8e:	438a      	bics	r2, r1
    1c90:	4313      	orrs	r3, r2
    1c92:	4659      	mov	r1, fp
    1c94:	4001      	ands	r1, r0
    1c96:	0149      	lsls	r1, r1, #5
    1c98:	2220      	movs	r2, #32
    1c9a:	4393      	bics	r3, r2
    1c9c:	430b      	orrs	r3, r1
    1c9e:	9a01      	ldr	r2, [sp, #4]
    1ca0:	4002      	ands	r2, r0
    1ca2:	0192      	lsls	r2, r2, #6
    1ca4:	2140      	movs	r1, #64	; 0x40
    1ca6:	438b      	bics	r3, r1
    1ca8:	4313      	orrs	r3, r2
    1caa:	4007      	ands	r7, r0
    1cac:	01ff      	lsls	r7, r7, #7
    1cae:	2280      	movs	r2, #128	; 0x80
    1cb0:	4393      	bics	r3, r2
    1cb2:	433b      	orrs	r3, r7
    1cb4:	3a79      	subs	r2, #121	; 0x79
    1cb6:	4015      	ands	r5, r2
    1cb8:	022d      	lsls	r5, r5, #8
    1cba:	4f0a      	ldr	r7, [pc, #40]	; (1ce4 <system_clock_source_xosc32k_set_config+0xd0>)
    1cbc:	403b      	ands	r3, r7
    1cbe:	432b      	orrs	r3, r5
    1cc0:	4004      	ands	r4, r0
    1cc2:	0320      	lsls	r0, r4, #12
    1cc4:	4c08      	ldr	r4, [pc, #32]	; (1ce8 <system_clock_source_xosc32k_set_config+0xd4>)
    1cc6:	401c      	ands	r4, r3
    1cc8:	4304      	orrs	r4, r0
    1cca:	82b4      	strh	r4, [r6, #20]
}
    1ccc:	b003      	add	sp, #12
    1cce:	bc3c      	pop	{r2, r3, r4, r5}
    1cd0:	4690      	mov	r8, r2
    1cd2:	4699      	mov	r9, r3
    1cd4:	46a2      	mov	sl, r4
    1cd6:	46ab      	mov	fp, r5
    1cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cda:	46c0      	nop			; (mov r8, r8)
    1cdc:	40000800 	.word	0x40000800
    1ce0:	200000f0 	.word	0x200000f0
    1ce4:	fffff8ff 	.word	0xfffff8ff
    1ce8:	ffffefff 	.word	0xffffefff

00001cec <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1cec:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1cee:	7a03      	ldrb	r3, [r0, #8]
    1cf0:	069b      	lsls	r3, r3, #26
    1cf2:	0c1a      	lsrs	r2, r3, #16
    1cf4:	8943      	ldrh	r3, [r0, #10]
    1cf6:	059b      	lsls	r3, r3, #22
    1cf8:	0d9b      	lsrs	r3, r3, #22
    1cfa:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    1cfc:	4c19      	ldr	r4, [pc, #100]	; (1d64 <system_clock_source_dfll_set_config+0x78>)
    1cfe:	6063      	str	r3, [r4, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    1d00:	7981      	ldrb	r1, [r0, #6]
    1d02:	79c3      	ldrb	r3, [r0, #7]
    1d04:	4319      	orrs	r1, r3
    1d06:	8843      	ldrh	r3, [r0, #2]
    1d08:	8882      	ldrh	r2, [r0, #4]
    1d0a:	4313      	orrs	r3, r2
    1d0c:	430b      	orrs	r3, r1
    1d0e:	7842      	ldrb	r2, [r0, #1]
    1d10:	01d2      	lsls	r2, r2, #7
    1d12:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    1d14:	6023      	str	r3, [r4, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1d16:	7803      	ldrb	r3, [r0, #0]
    1d18:	2b04      	cmp	r3, #4
    1d1a:	d10f      	bne.n	1d3c <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1d1c:	7b03      	ldrb	r3, [r0, #12]
    1d1e:	069b      	lsls	r3, r3, #26
    1d20:	8a02      	ldrh	r2, [r0, #16]
    1d22:	4313      	orrs	r3, r2
    1d24:	0019      	movs	r1, r3
    1d26:	89c3      	ldrh	r3, [r0, #14]
    1d28:	041b      	lsls	r3, r3, #16
    1d2a:	4a0f      	ldr	r2, [pc, #60]	; (1d68 <system_clock_source_dfll_set_config+0x7c>)
    1d2c:	4013      	ands	r3, r2
    1d2e:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    1d30:	60a3      	str	r3, [r4, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    1d32:	6821      	ldr	r1, [r4, #0]
    1d34:	2304      	movs	r3, #4
    1d36:	430b      	orrs	r3, r1
    1d38:	6023      	str	r3, [r4, #0]
    1d3a:	e011      	b.n	1d60 <system_clock_source_dfll_set_config+0x74>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1d3c:	2b20      	cmp	r3, #32
    1d3e:	d10f      	bne.n	1d60 <system_clock_source_dfll_set_config+0x74>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1d40:	7b03      	ldrb	r3, [r0, #12]
    1d42:	069b      	lsls	r3, r3, #26
    1d44:	8a02      	ldrh	r2, [r0, #16]
    1d46:	4313      	orrs	r3, r2
    1d48:	0019      	movs	r1, r3
    1d4a:	89c3      	ldrh	r3, [r0, #14]
    1d4c:	041b      	lsls	r3, r3, #16
    1d4e:	4a06      	ldr	r2, [pc, #24]	; (1d68 <system_clock_source_dfll_set_config+0x7c>)
    1d50:	4013      	ands	r3, r2
    1d52:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    1d54:	4a03      	ldr	r2, [pc, #12]	; (1d64 <system_clock_source_dfll_set_config+0x78>)
    1d56:	6093      	str	r3, [r2, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1d58:	6813      	ldr	r3, [r2, #0]
    1d5a:	4904      	ldr	r1, [pc, #16]	; (1d6c <system_clock_source_dfll_set_config+0x80>)
    1d5c:	430b      	orrs	r3, r1
    1d5e:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1d60:	bd10      	pop	{r4, pc}
    1d62:	46c0      	nop			; (mov r8, r8)
    1d64:	200000f0 	.word	0x200000f0
    1d68:	03ff0000 	.word	0x03ff0000
    1d6c:	00000424 	.word	0x00000424

00001d70 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1d70:	2808      	cmp	r0, #8
    1d72:	d803      	bhi.n	1d7c <system_clock_source_enable+0xc>
    1d74:	0080      	lsls	r0, r0, #2
    1d76:	4b25      	ldr	r3, [pc, #148]	; (1e0c <system_clock_source_enable+0x9c>)
    1d78:	581b      	ldr	r3, [r3, r0]
    1d7a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1d7c:	2017      	movs	r0, #23
    1d7e:	e044      	b.n	1e0a <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1d80:	4a23      	ldr	r2, [pc, #140]	; (1e10 <system_clock_source_enable+0xa0>)
    1d82:	6a11      	ldr	r1, [r2, #32]
    1d84:	2302      	movs	r3, #2
    1d86:	430b      	orrs	r3, r1
    1d88:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1d8a:	2000      	movs	r0, #0
    1d8c:	e03d      	b.n	1e0a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1d8e:	4a20      	ldr	r2, [pc, #128]	; (1e10 <system_clock_source_enable+0xa0>)
    1d90:	6991      	ldr	r1, [r2, #24]
    1d92:	2302      	movs	r3, #2
    1d94:	430b      	orrs	r3, r1
    1d96:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d98:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1d9a:	e036      	b.n	1e0a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1d9c:	4a1c      	ldr	r2, [pc, #112]	; (1e10 <system_clock_source_enable+0xa0>)
    1d9e:	8a11      	ldrh	r1, [r2, #16]
    1da0:	2302      	movs	r3, #2
    1da2:	430b      	orrs	r3, r1
    1da4:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1da6:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1da8:	e02f      	b.n	1e0a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1daa:	4a19      	ldr	r2, [pc, #100]	; (1e10 <system_clock_source_enable+0xa0>)
    1dac:	8a91      	ldrh	r1, [r2, #20]
    1dae:	2302      	movs	r3, #2
    1db0:	430b      	orrs	r3, r1
    1db2:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1db4:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    1db6:	e028      	b.n	1e0a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1db8:	4916      	ldr	r1, [pc, #88]	; (1e14 <system_clock_source_enable+0xa4>)
    1dba:	680b      	ldr	r3, [r1, #0]
    1dbc:	2202      	movs	r2, #2
    1dbe:	4313      	orrs	r3, r2
    1dc0:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1dc2:	4b13      	ldr	r3, [pc, #76]	; (1e10 <system_clock_source_enable+0xa0>)
    1dc4:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1dc6:	0019      	movs	r1, r3
    1dc8:	320e      	adds	r2, #14
    1dca:	68cb      	ldr	r3, [r1, #12]
    1dcc:	421a      	tst	r2, r3
    1dce:	d0fc      	beq.n	1dca <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1dd0:	4a10      	ldr	r2, [pc, #64]	; (1e14 <system_clock_source_enable+0xa4>)
    1dd2:	6891      	ldr	r1, [r2, #8]
    1dd4:	4b0e      	ldr	r3, [pc, #56]	; (1e10 <system_clock_source_enable+0xa0>)
    1dd6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1dd8:	6852      	ldr	r2, [r2, #4]
    1dda:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1ddc:	2200      	movs	r2, #0
    1dde:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1de0:	0019      	movs	r1, r3
    1de2:	3210      	adds	r2, #16
    1de4:	68cb      	ldr	r3, [r1, #12]
    1de6:	421a      	tst	r2, r3
    1de8:	d0fc      	beq.n	1de4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1dea:	4b0a      	ldr	r3, [pc, #40]	; (1e14 <system_clock_source_enable+0xa4>)
    1dec:	681b      	ldr	r3, [r3, #0]
    1dee:	b29b      	uxth	r3, r3
    1df0:	4a07      	ldr	r2, [pc, #28]	; (1e10 <system_clock_source_enable+0xa0>)
    1df2:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1df4:	2000      	movs	r0, #0
    1df6:	e008      	b.n	1e0a <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1df8:	4905      	ldr	r1, [pc, #20]	; (1e10 <system_clock_source_enable+0xa0>)
    1dfa:	2244      	movs	r2, #68	; 0x44
    1dfc:	5c88      	ldrb	r0, [r1, r2]
    1dfe:	2302      	movs	r3, #2
    1e00:	4303      	orrs	r3, r0
    1e02:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1e04:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1e06:	e000      	b.n	1e0a <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1e08:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1e0a:	4770      	bx	lr
    1e0c:	00008ad4 	.word	0x00008ad4
    1e10:	40000800 	.word	0x40000800
    1e14:	200000f0 	.word	0x200000f0

00001e18 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1e18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e1a:	4657      	mov	r7, sl
    1e1c:	464e      	mov	r6, r9
    1e1e:	4645      	mov	r5, r8
    1e20:	b4e0      	push	{r5, r6, r7}
    1e22:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1e24:	22c2      	movs	r2, #194	; 0xc2
    1e26:	00d2      	lsls	r2, r2, #3
    1e28:	4b68      	ldr	r3, [pc, #416]	; (1fcc <system_clock_init+0x1b4>)
    1e2a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1e2c:	4968      	ldr	r1, [pc, #416]	; (1fd0 <system_clock_init+0x1b8>)
    1e2e:	684b      	ldr	r3, [r1, #4]
    1e30:	221e      	movs	r2, #30
    1e32:	4393      	bics	r3, r2
    1e34:	3a1a      	subs	r2, #26
    1e36:	4313      	orrs	r3, r2
    1e38:	604b      	str	r3, [r1, #4]
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
#elif CONF_CLOCK_GCLK_4_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_4;
#elif CONF_CLOCK_GCLK_5_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_5;
    1e3a:	3201      	adds	r2, #1
    1e3c:	ab01      	add	r3, sp, #4
    1e3e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1e40:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1e42:	4d64      	ldr	r5, [pc, #400]	; (1fd4 <system_clock_init+0x1bc>)
    1e44:	b2e0      	uxtb	r0, r4
    1e46:	a901      	add	r1, sp, #4
    1e48:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1e4a:	3401      	adds	r4, #1
    1e4c:	2c25      	cmp	r4, #37	; 0x25
    1e4e:	d1f9      	bne.n	1e44 <system_clock_init+0x2c>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1e50:	a80c      	add	r0, sp, #48	; 0x30
    1e52:	2300      	movs	r3, #0
    1e54:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
	config->frequency           = 32768UL;
    1e56:	2280      	movs	r2, #128	; 0x80
    1e58:	0212      	lsls	r2, r2, #8
    1e5a:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1e5c:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1e5e:	2201      	movs	r2, #1
    1e60:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1e62:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    1e64:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1e66:	2106      	movs	r1, #6
    1e68:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    1e6a:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1e6c:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1e6e:	4b5a      	ldr	r3, [pc, #360]	; (1fd8 <system_clock_init+0x1c0>)
    1e70:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1e72:	2005      	movs	r0, #5
    1e74:	4b59      	ldr	r3, [pc, #356]	; (1fdc <system_clock_init+0x1c4>)
    1e76:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1e78:	4954      	ldr	r1, [pc, #336]	; (1fcc <system_clock_init+0x1b4>)
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1e7a:	2202      	movs	r2, #2

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1e7c:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1e7e:	421a      	tst	r2, r3
    1e80:	d0fc      	beq.n	1e7c <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1e82:	4952      	ldr	r1, [pc, #328]	; (1fcc <system_clock_init+0x1b4>)
    1e84:	8a8a      	ldrh	r2, [r1, #20]
    1e86:	2380      	movs	r3, #128	; 0x80
    1e88:	4313      	orrs	r3, r2
    1e8a:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    1e8c:	4c54      	ldr	r4, [pc, #336]	; (1fe0 <system_clock_init+0x1c8>)
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    1e8e:	6823      	ldr	r3, [r4, #0]
    1e90:	04da      	lsls	r2, r3, #19
    1e92:	6988      	ldr	r0, [r1, #24]
    1e94:	0e52      	lsrs	r2, r2, #25
    1e96:	0412      	lsls	r2, r2, #16
    1e98:	4b52      	ldr	r3, [pc, #328]	; (1fe4 <system_clock_init+0x1cc>)
    1e9a:	4003      	ands	r3, r0
    1e9c:	4313      	orrs	r3, r2
    1e9e:	618b      	str	r3, [r1, #24]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    1ea0:	a80a      	add	r0, sp, #40	; 0x28
    1ea2:	2301      	movs	r3, #1
    1ea4:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    1ea6:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
	config->on_demand           = true;
    1ea8:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1eaa:	2207      	movs	r2, #7
    1eac:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    1eae:	2500      	movs	r5, #0
    1eb0:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1eb2:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1eb4:	4b4c      	ldr	r3, [pc, #304]	; (1fe8 <system_clock_init+0x1d0>)
    1eb6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1eb8:	2004      	movs	r0, #4
    1eba:	4b48      	ldr	r3, [pc, #288]	; (1fdc <system_clock_init+0x1c4>)
    1ebc:	4798      	blx	r3
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1ebe:	ab05      	add	r3, sp, #20
    1ec0:	2200      	movs	r2, #0
    1ec2:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1ec4:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1ec6:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1ec8:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
	config->fine_value      = 0xff / 4; /* Midpoint */
    1eca:	213f      	movs	r1, #63	; 0x3f
    1ecc:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1ece:	393b      	subs	r1, #59	; 0x3b
    1ed0:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1ed2:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1ed4:	6823      	ldr	r3, [r4, #0]
    1ed6:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1ed8:	2b3f      	cmp	r3, #63	; 0x3f
    1eda:	d100      	bne.n	1ede <system_clock_init+0xc6>
		coarse = 0x1f;
    1edc:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
    1ede:	a805      	add	r0, sp, #20
    1ee0:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1ee2:	23b7      	movs	r3, #183	; 0xb7
    1ee4:	00db      	lsls	r3, r3, #3
    1ee6:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1ee8:	2307      	movs	r3, #7
    1eea:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1eec:	3338      	adds	r3, #56	; 0x38
    1eee:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1ef0:	4b3e      	ldr	r3, [pc, #248]	; (1fec <system_clock_init+0x1d4>)
    1ef2:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1ef4:	a804      	add	r0, sp, #16
    1ef6:	2500      	movs	r5, #0
    1ef8:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1efa:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1efc:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1efe:	4b3c      	ldr	r3, [pc, #240]	; (1ff0 <system_clock_init+0x1d8>)
    1f00:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1f02:	2006      	movs	r0, #6
    1f04:	4b35      	ldr	r3, [pc, #212]	; (1fdc <system_clock_init+0x1c4>)
    1f06:	4699      	mov	r9, r3
    1f08:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1f0a:	4b3a      	ldr	r3, [pc, #232]	; (1ff4 <system_clock_init+0x1dc>)
    1f0c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1f0e:	ac01      	add	r4, sp, #4
    1f10:	2601      	movs	r6, #1
    1f12:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1f14:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1f16:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1f18:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1f1a:	2305      	movs	r3, #5
    1f1c:	7023      	strb	r3, [r4, #0]
    1f1e:	0021      	movs	r1, r4
    1f20:	2001      	movs	r0, #1
    1f22:	4b35      	ldr	r3, [pc, #212]	; (1ff8 <system_clock_init+0x1e0>)
    1f24:	4698      	mov	r8, r3
    1f26:	4798      	blx	r3
    1f28:	2001      	movs	r0, #1
    1f2a:	4f34      	ldr	r7, [pc, #208]	; (1ffc <system_clock_init+0x1e4>)
    1f2c:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    1f2e:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    1f30:	7265      	strb	r5, [r4, #9]
    1f32:	2304      	movs	r3, #4
    1f34:	7023      	strb	r3, [r4, #0]
    1f36:	331c      	adds	r3, #28
    1f38:	469a      	mov	sl, r3
    1f3a:	6063      	str	r3, [r4, #4]
    1f3c:	7226      	strb	r6, [r4, #8]
    1f3e:	0021      	movs	r1, r4
    1f40:	2002      	movs	r0, #2
    1f42:	47c0      	blx	r8
    1f44:	2002      	movs	r0, #2
    1f46:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1f48:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1f4a:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1f4c:	2306      	movs	r3, #6
    1f4e:	7023      	strb	r3, [r4, #0]
#endif
	config->run_in_standby     = false;
    1f50:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1f52:	7265      	strb	r5, [r4, #9]
    1f54:	0021      	movs	r1, r4
    1f56:	2003      	movs	r0, #3
    1f58:	47c0      	blx	r8
    1f5a:	2003      	movs	r0, #3
    1f5c:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    1f5e:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1f60:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1f62:	7265      	strb	r5, [r4, #9]
    1f64:	2303      	movs	r3, #3
    1f66:	7023      	strb	r3, [r4, #0]
    1f68:	4653      	mov	r3, sl
    1f6a:	6063      	str	r3, [r4, #4]
    1f6c:	0021      	movs	r1, r4
    1f6e:	2004      	movs	r0, #4
    1f70:	47c0      	blx	r8
    1f72:	2004      	movs	r0, #4
    1f74:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1f76:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1f78:	0021      	movs	r1, r4
    1f7a:	2000      	movs	r0, #0
    1f7c:	4b15      	ldr	r3, [pc, #84]	; (1fd4 <system_clock_init+0x1bc>)
    1f7e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1f80:	2000      	movs	r0, #0
    1f82:	4b1f      	ldr	r3, [pc, #124]	; (2000 <STACK_SIZE>)
    1f84:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1f86:	2007      	movs	r0, #7
    1f88:	47c8      	blx	r9

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1f8a:	4910      	ldr	r1, [pc, #64]	; (1fcc <system_clock_init+0x1b4>)


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1f8c:	22d0      	movs	r2, #208	; 0xd0

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1f8e:	68cb      	ldr	r3, [r1, #12]


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1f90:	4013      	ands	r3, r2
    1f92:	2bd0      	cmp	r3, #208	; 0xd0
    1f94:	d1fb      	bne.n	1f8e <system_clock_init+0x176>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1f96:	4a1b      	ldr	r2, [pc, #108]	; (2004 <STACK_SIZE+0x4>)
    1f98:	2300      	movs	r3, #0
    1f9a:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1f9c:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1f9e:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    1fa0:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1fa2:	a901      	add	r1, sp, #4
    1fa4:	2201      	movs	r2, #1
    1fa6:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1fa8:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1faa:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1fac:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1fae:	3307      	adds	r3, #7
    1fb0:	700b      	strb	r3, [r1, #0]
    1fb2:	2000      	movs	r0, #0
    1fb4:	4b10      	ldr	r3, [pc, #64]	; (1ff8 <system_clock_init+0x1e0>)
    1fb6:	4798      	blx	r3
    1fb8:	2000      	movs	r0, #0
    1fba:	4b10      	ldr	r3, [pc, #64]	; (1ffc <system_clock_init+0x1e4>)
    1fbc:	4798      	blx	r3
#endif
}
    1fbe:	b010      	add	sp, #64	; 0x40
    1fc0:	bc1c      	pop	{r2, r3, r4}
    1fc2:	4690      	mov	r8, r2
    1fc4:	4699      	mov	r9, r3
    1fc6:	46a2      	mov	sl, r4
    1fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fca:	46c0      	nop			; (mov r8, r8)
    1fcc:	40000800 	.word	0x40000800
    1fd0:	41004000 	.word	0x41004000
    1fd4:	00002241 	.word	0x00002241
    1fd8:	00001c15 	.word	0x00001c15
    1fdc:	00001d71 	.word	0x00001d71
    1fe0:	00806024 	.word	0x00806024
    1fe4:	ff80ffff 	.word	0xff80ffff
    1fe8:	00001b8d 	.word	0x00001b8d
    1fec:	00001ced 	.word	0x00001ced
    1ff0:	00001b51 	.word	0x00001b51
    1ff4:	00002009 	.word	0x00002009
    1ff8:	0000202d 	.word	0x0000202d
    1ffc:	000020e5 	.word	0x000020e5
    2000:	000021b5 	.word	0x000021b5
    2004:	40000400 	.word	0x40000400

00002008 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    2008:	4a06      	ldr	r2, [pc, #24]	; (2024 <system_gclk_init+0x1c>)
    200a:	6991      	ldr	r1, [r2, #24]
    200c:	2308      	movs	r3, #8
    200e:	430b      	orrs	r3, r1
    2010:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2012:	2201      	movs	r2, #1
    2014:	4b04      	ldr	r3, [pc, #16]	; (2028 <system_gclk_init+0x20>)
    2016:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2018:	0019      	movs	r1, r3
    201a:	780b      	ldrb	r3, [r1, #0]
    201c:	4213      	tst	r3, r2
    201e:	d1fc      	bne.n	201a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2020:	4770      	bx	lr
    2022:	46c0      	nop			; (mov r8, r8)
    2024:	40000400 	.word	0x40000400
    2028:	40000c00 	.word	0x40000c00

0000202c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    202c:	b570      	push	{r4, r5, r6, lr}
    202e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2030:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2032:	780c      	ldrb	r4, [r1, #0]
    2034:	0224      	lsls	r4, r4, #8
    2036:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2038:	784b      	ldrb	r3, [r1, #1]
    203a:	2b00      	cmp	r3, #0
    203c:	d002      	beq.n	2044 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    203e:	2380      	movs	r3, #128	; 0x80
    2040:	02db      	lsls	r3, r3, #11
    2042:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2044:	7a4b      	ldrb	r3, [r1, #9]
    2046:	2b00      	cmp	r3, #0
    2048:	d002      	beq.n	2050 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    204a:	2380      	movs	r3, #128	; 0x80
    204c:	031b      	lsls	r3, r3, #12
    204e:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2050:	6848      	ldr	r0, [r1, #4]
    2052:	2801      	cmp	r0, #1
    2054:	d918      	bls.n	2088 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2056:	1e43      	subs	r3, r0, #1
    2058:	4218      	tst	r0, r3
    205a:	d110      	bne.n	207e <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    205c:	2802      	cmp	r0, #2
    205e:	d906      	bls.n	206e <system_gclk_gen_set_config+0x42>
    2060:	2302      	movs	r3, #2
    2062:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2064:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    2066:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2068:	4298      	cmp	r0, r3
    206a:	d8fb      	bhi.n	2064 <system_gclk_gen_set_config+0x38>
    206c:	e000      	b.n	2070 <system_gclk_gen_set_config+0x44>
    206e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2070:	0212      	lsls	r2, r2, #8
    2072:	4332      	orrs	r2, r6
    2074:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2076:	2380      	movs	r3, #128	; 0x80
    2078:	035b      	lsls	r3, r3, #13
    207a:	431c      	orrs	r4, r3
    207c:	e004      	b.n	2088 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    207e:	0205      	lsls	r5, r0, #8
    2080:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2082:	2380      	movs	r3, #128	; 0x80
    2084:	029b      	lsls	r3, r3, #10
    2086:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2088:	7a0b      	ldrb	r3, [r1, #8]
    208a:	2b00      	cmp	r3, #0
    208c:	d002      	beq.n	2094 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    208e:	2380      	movs	r3, #128	; 0x80
    2090:	039b      	lsls	r3, r3, #14
    2092:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2094:	4a0f      	ldr	r2, [pc, #60]	; (20d4 <system_gclk_gen_set_config+0xa8>)
    2096:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    2098:	b25b      	sxtb	r3, r3
    209a:	2b00      	cmp	r3, #0
    209c:	dbfb      	blt.n	2096 <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    209e:	4b0e      	ldr	r3, [pc, #56]	; (20d8 <system_gclk_gen_set_config+0xac>)
    20a0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    20a2:	4b0e      	ldr	r3, [pc, #56]	; (20dc <system_gclk_gen_set_config+0xb0>)
    20a4:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20a6:	4a0b      	ldr	r2, [pc, #44]	; (20d4 <system_gclk_gen_set_config+0xa8>)
    20a8:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    20aa:	b25b      	sxtb	r3, r3
    20ac:	2b00      	cmp	r3, #0
    20ae:	dbfb      	blt.n	20a8 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    20b0:	4b08      	ldr	r3, [pc, #32]	; (20d4 <system_gclk_gen_set_config+0xa8>)
    20b2:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20b4:	001a      	movs	r2, r3
    20b6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    20b8:	b25b      	sxtb	r3, r3
    20ba:	2b00      	cmp	r3, #0
    20bc:	dbfb      	blt.n	20b6 <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    20be:	4a05      	ldr	r2, [pc, #20]	; (20d4 <system_gclk_gen_set_config+0xa8>)
    20c0:	6851      	ldr	r1, [r2, #4]
    20c2:	2380      	movs	r3, #128	; 0x80
    20c4:	025b      	lsls	r3, r3, #9
    20c6:	400b      	ands	r3, r1
    20c8:	431c      	orrs	r4, r3
    20ca:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    20cc:	4b04      	ldr	r3, [pc, #16]	; (20e0 <system_gclk_gen_set_config+0xb4>)
    20ce:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    20d0:	bd70      	pop	{r4, r5, r6, pc}
    20d2:	46c0      	nop			; (mov r8, r8)
    20d4:	40000c00 	.word	0x40000c00
    20d8:	00000911 	.word	0x00000911
    20dc:	40000c08 	.word	0x40000c08
    20e0:	00000951 	.word	0x00000951

000020e4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    20e4:	b510      	push	{r4, lr}
    20e6:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20e8:	4a0b      	ldr	r2, [pc, #44]	; (2118 <system_gclk_gen_enable+0x34>)
    20ea:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    20ec:	b25b      	sxtb	r3, r3
    20ee:	2b00      	cmp	r3, #0
    20f0:	dbfb      	blt.n	20ea <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    20f2:	4b0a      	ldr	r3, [pc, #40]	; (211c <system_gclk_gen_enable+0x38>)
    20f4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    20f6:	4b0a      	ldr	r3, [pc, #40]	; (2120 <system_gclk_gen_enable+0x3c>)
    20f8:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20fa:	4a07      	ldr	r2, [pc, #28]	; (2118 <system_gclk_gen_enable+0x34>)
    20fc:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    20fe:	b25b      	sxtb	r3, r3
    2100:	2b00      	cmp	r3, #0
    2102:	dbfb      	blt.n	20fc <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2104:	4a04      	ldr	r2, [pc, #16]	; (2118 <system_gclk_gen_enable+0x34>)
    2106:	6853      	ldr	r3, [r2, #4]
    2108:	2180      	movs	r1, #128	; 0x80
    210a:	0249      	lsls	r1, r1, #9
    210c:	430b      	orrs	r3, r1
    210e:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2110:	4b04      	ldr	r3, [pc, #16]	; (2124 <system_gclk_gen_enable+0x40>)
    2112:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2114:	bd10      	pop	{r4, pc}
    2116:	46c0      	nop			; (mov r8, r8)
    2118:	40000c00 	.word	0x40000c00
    211c:	00000911 	.word	0x00000911
    2120:	40000c04 	.word	0x40000c04
    2124:	00000951 	.word	0x00000951

00002128 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2128:	b570      	push	{r4, r5, r6, lr}
    212a:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    212c:	4a1a      	ldr	r2, [pc, #104]	; (2198 <system_gclk_gen_get_hz+0x70>)
    212e:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    2130:	b25b      	sxtb	r3, r3
    2132:	2b00      	cmp	r3, #0
    2134:	dbfb      	blt.n	212e <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2136:	4b19      	ldr	r3, [pc, #100]	; (219c <system_gclk_gen_get_hz+0x74>)
    2138:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    213a:	4b19      	ldr	r3, [pc, #100]	; (21a0 <system_gclk_gen_get_hz+0x78>)
    213c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    213e:	4a16      	ldr	r2, [pc, #88]	; (2198 <system_gclk_gen_get_hz+0x70>)
    2140:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    2142:	b25b      	sxtb	r3, r3
    2144:	2b00      	cmp	r3, #0
    2146:	dbfb      	blt.n	2140 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2148:	4e13      	ldr	r6, [pc, #76]	; (2198 <system_gclk_gen_get_hz+0x70>)
    214a:	6870      	ldr	r0, [r6, #4]
    214c:	04c0      	lsls	r0, r0, #19
    214e:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2150:	4b14      	ldr	r3, [pc, #80]	; (21a4 <system_gclk_gen_get_hz+0x7c>)
    2152:	4798      	blx	r3
    2154:	0005      	movs	r5, r0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2156:	4b12      	ldr	r3, [pc, #72]	; (21a0 <system_gclk_gen_get_hz+0x78>)
    2158:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    215a:	6876      	ldr	r6, [r6, #4]
    215c:	02f6      	lsls	r6, r6, #11
    215e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2160:	4b11      	ldr	r3, [pc, #68]	; (21a8 <system_gclk_gen_get_hz+0x80>)
    2162:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2164:	4a0c      	ldr	r2, [pc, #48]	; (2198 <system_gclk_gen_get_hz+0x70>)
    2166:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    2168:	b25b      	sxtb	r3, r3
    216a:	2b00      	cmp	r3, #0
    216c:	dbfb      	blt.n	2166 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    216e:	4b0a      	ldr	r3, [pc, #40]	; (2198 <system_gclk_gen_get_hz+0x70>)
    2170:	689c      	ldr	r4, [r3, #8]
    2172:	0224      	lsls	r4, r4, #8
    2174:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2176:	4b0d      	ldr	r3, [pc, #52]	; (21ac <system_gclk_gen_get_hz+0x84>)
    2178:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    217a:	2e00      	cmp	r6, #0
    217c:	d107      	bne.n	218e <system_gclk_gen_get_hz+0x66>
    217e:	2c01      	cmp	r4, #1
    2180:	d907      	bls.n	2192 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2182:	0021      	movs	r1, r4
    2184:	0028      	movs	r0, r5
    2186:	4b0a      	ldr	r3, [pc, #40]	; (21b0 <system_gclk_gen_get_hz+0x88>)
    2188:	4798      	blx	r3
    218a:	0005      	movs	r5, r0
    218c:	e001      	b.n	2192 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    218e:	3401      	adds	r4, #1
    2190:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2192:	0028      	movs	r0, r5
    2194:	bd70      	pop	{r4, r5, r6, pc}
    2196:	46c0      	nop			; (mov r8, r8)
    2198:	40000c00 	.word	0x40000c00
    219c:	00000911 	.word	0x00000911
    21a0:	40000c04 	.word	0x40000c04
    21a4:	00001ac1 	.word	0x00001ac1
    21a8:	40000c08 	.word	0x40000c08
    21ac:	00000951 	.word	0x00000951
    21b0:	00005e59 	.word	0x00005e59

000021b4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    21b4:	b510      	push	{r4, lr}
    21b6:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    21b8:	4b06      	ldr	r3, [pc, #24]	; (21d4 <system_gclk_chan_enable+0x20>)
    21ba:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    21bc:	4b06      	ldr	r3, [pc, #24]	; (21d8 <system_gclk_chan_enable+0x24>)
    21be:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    21c0:	4a06      	ldr	r2, [pc, #24]	; (21dc <system_gclk_chan_enable+0x28>)
    21c2:	8851      	ldrh	r1, [r2, #2]
    21c4:	2380      	movs	r3, #128	; 0x80
    21c6:	01db      	lsls	r3, r3, #7
    21c8:	430b      	orrs	r3, r1
    21ca:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    21cc:	4b04      	ldr	r3, [pc, #16]	; (21e0 <system_gclk_chan_enable+0x2c>)
    21ce:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    21d0:	bd10      	pop	{r4, pc}
    21d2:	46c0      	nop			; (mov r8, r8)
    21d4:	00000911 	.word	0x00000911
    21d8:	40000c02 	.word	0x40000c02
    21dc:	40000c00 	.word	0x40000c00
    21e0:	00000951 	.word	0x00000951

000021e4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    21e4:	b510      	push	{r4, lr}
    21e6:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    21e8:	4b0f      	ldr	r3, [pc, #60]	; (2228 <system_gclk_chan_disable+0x44>)
    21ea:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    21ec:	4b0f      	ldr	r3, [pc, #60]	; (222c <system_gclk_chan_disable+0x48>)
    21ee:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    21f0:	4b0f      	ldr	r3, [pc, #60]	; (2230 <system_gclk_chan_disable+0x4c>)
    21f2:	885a      	ldrh	r2, [r3, #2]
    21f4:	0512      	lsls	r2, r2, #20
    21f6:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    21f8:	8859      	ldrh	r1, [r3, #2]
    21fa:	4a0e      	ldr	r2, [pc, #56]	; (2234 <system_gclk_chan_disable+0x50>)
    21fc:	400a      	ands	r2, r1
    21fe:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2200:	8859      	ldrh	r1, [r3, #2]
    2202:	4a0d      	ldr	r2, [pc, #52]	; (2238 <system_gclk_chan_disable+0x54>)
    2204:	400a      	ands	r2, r1
    2206:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2208:	0019      	movs	r1, r3
    220a:	2280      	movs	r2, #128	; 0x80
    220c:	01d2      	lsls	r2, r2, #7
    220e:	884b      	ldrh	r3, [r1, #2]
    2210:	4213      	tst	r3, r2
    2212:	d1fc      	bne.n	220e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2214:	4906      	ldr	r1, [pc, #24]	; (2230 <system_gclk_chan_disable+0x4c>)
    2216:	884c      	ldrh	r4, [r1, #2]
    2218:	0202      	lsls	r2, r0, #8
    221a:	4b06      	ldr	r3, [pc, #24]	; (2234 <system_gclk_chan_disable+0x50>)
    221c:	4023      	ands	r3, r4
    221e:	4313      	orrs	r3, r2
    2220:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2222:	4b06      	ldr	r3, [pc, #24]	; (223c <system_gclk_chan_disable+0x58>)
    2224:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2226:	bd10      	pop	{r4, pc}
    2228:	00000911 	.word	0x00000911
    222c:	40000c02 	.word	0x40000c02
    2230:	40000c00 	.word	0x40000c00
    2234:	fffff0ff 	.word	0xfffff0ff
    2238:	ffffbfff 	.word	0xffffbfff
    223c:	00000951 	.word	0x00000951

00002240 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    2240:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2242:	780c      	ldrb	r4, [r1, #0]
    2244:	0224      	lsls	r4, r4, #8
    2246:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    2248:	4b02      	ldr	r3, [pc, #8]	; (2254 <system_gclk_chan_set_config+0x14>)
    224a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    224c:	b2a4      	uxth	r4, r4
    224e:	4b02      	ldr	r3, [pc, #8]	; (2258 <system_gclk_chan_set_config+0x18>)
    2250:	805c      	strh	r4, [r3, #2]
}
    2252:	bd10      	pop	{r4, pc}
    2254:	000021e5 	.word	0x000021e5
    2258:	40000c00 	.word	0x40000c00

0000225c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    225c:	b510      	push	{r4, lr}
    225e:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2260:	4b06      	ldr	r3, [pc, #24]	; (227c <system_gclk_chan_get_hz+0x20>)
    2262:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2264:	4b06      	ldr	r3, [pc, #24]	; (2280 <system_gclk_chan_get_hz+0x24>)
    2266:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2268:	4b06      	ldr	r3, [pc, #24]	; (2284 <system_gclk_chan_get_hz+0x28>)
    226a:	885c      	ldrh	r4, [r3, #2]
    226c:	0524      	lsls	r4, r4, #20
    226e:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2270:	4b05      	ldr	r3, [pc, #20]	; (2288 <system_gclk_chan_get_hz+0x2c>)
    2272:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2274:	0020      	movs	r0, r4
    2276:	4b05      	ldr	r3, [pc, #20]	; (228c <system_gclk_chan_get_hz+0x30>)
    2278:	4798      	blx	r3
}
    227a:	bd10      	pop	{r4, pc}
    227c:	00000911 	.word	0x00000911
    2280:	40000c02 	.word	0x40000c02
    2284:	40000c00 	.word	0x40000c00
    2288:	00000951 	.word	0x00000951
    228c:	00002129 	.word	0x00002129

00002290 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2290:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2292:	78d3      	ldrb	r3, [r2, #3]
    2294:	2b00      	cmp	r3, #0
    2296:	d11e      	bne.n	22d6 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2298:	7813      	ldrb	r3, [r2, #0]
    229a:	2b80      	cmp	r3, #128	; 0x80
    229c:	d004      	beq.n	22a8 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    229e:	061b      	lsls	r3, r3, #24
    22a0:	2480      	movs	r4, #128	; 0x80
    22a2:	0264      	lsls	r4, r4, #9
    22a4:	4323      	orrs	r3, r4
    22a6:	e000      	b.n	22aa <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    22a8:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    22aa:	7854      	ldrb	r4, [r2, #1]
    22ac:	2502      	movs	r5, #2
    22ae:	43ac      	bics	r4, r5
    22b0:	d10a      	bne.n	22c8 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    22b2:	7894      	ldrb	r4, [r2, #2]
    22b4:	2c00      	cmp	r4, #0
    22b6:	d103      	bne.n	22c0 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    22b8:	2480      	movs	r4, #128	; 0x80
    22ba:	02a4      	lsls	r4, r4, #10
    22bc:	4323      	orrs	r3, r4
    22be:	e002      	b.n	22c6 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    22c0:	24c0      	movs	r4, #192	; 0xc0
    22c2:	02e4      	lsls	r4, r4, #11
    22c4:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    22c6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    22c8:	7854      	ldrb	r4, [r2, #1]
    22ca:	3c01      	subs	r4, #1
    22cc:	2c01      	cmp	r4, #1
    22ce:	d812      	bhi.n	22f6 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    22d0:	4c18      	ldr	r4, [pc, #96]	; (2334 <_system_pinmux_config+0xa4>)
    22d2:	4023      	ands	r3, r4
    22d4:	e00f      	b.n	22f6 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    22d6:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    22d8:	040b      	lsls	r3, r1, #16
    22da:	0c1b      	lsrs	r3, r3, #16
    22dc:	24a0      	movs	r4, #160	; 0xa0
    22de:	05e4      	lsls	r4, r4, #23
    22e0:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    22e2:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    22e4:	0c0b      	lsrs	r3, r1, #16
    22e6:	24d0      	movs	r4, #208	; 0xd0
    22e8:	0624      	lsls	r4, r4, #24
    22ea:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    22ec:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    22ee:	78d3      	ldrb	r3, [r2, #3]
    22f0:	2b00      	cmp	r3, #0
    22f2:	d018      	beq.n	2326 <_system_pinmux_config+0x96>
    22f4:	e01c      	b.n	2330 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    22f6:	040c      	lsls	r4, r1, #16
    22f8:	0c24      	lsrs	r4, r4, #16
    22fa:	25a0      	movs	r5, #160	; 0xa0
    22fc:	05ed      	lsls	r5, r5, #23
    22fe:	432c      	orrs	r4, r5
    2300:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2302:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2304:	0c0c      	lsrs	r4, r1, #16
    2306:	25d0      	movs	r5, #208	; 0xd0
    2308:	062d      	lsls	r5, r5, #24
    230a:	432c      	orrs	r4, r5
    230c:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    230e:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2310:	78d4      	ldrb	r4, [r2, #3]
    2312:	2c00      	cmp	r4, #0
    2314:	d10c      	bne.n	2330 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2316:	035b      	lsls	r3, r3, #13
    2318:	d505      	bpl.n	2326 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    231a:	7893      	ldrb	r3, [r2, #2]
    231c:	2b01      	cmp	r3, #1
    231e:	d101      	bne.n	2324 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    2320:	6181      	str	r1, [r0, #24]
    2322:	e000      	b.n	2326 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    2324:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2326:	7853      	ldrb	r3, [r2, #1]
    2328:	3b01      	subs	r3, #1
    232a:	2b01      	cmp	r3, #1
    232c:	d800      	bhi.n	2330 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    232e:	6081      	str	r1, [r0, #8]
		}
	}
}
    2330:	bd30      	pop	{r4, r5, pc}
    2332:	46c0      	nop			; (mov r8, r8)
    2334:	fffbffff 	.word	0xfffbffff

00002338 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2338:	b510      	push	{r4, lr}
    233a:	0003      	movs	r3, r0
    233c:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    233e:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2340:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2342:	2900      	cmp	r1, #0
    2344:	d104      	bne.n	2350 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    2346:	0958      	lsrs	r0, r3, #5
    2348:	01c0      	lsls	r0, r0, #7
    234a:	4905      	ldr	r1, [pc, #20]	; (2360 <system_pinmux_pin_set_config+0x28>)
    234c:	468c      	mov	ip, r1
    234e:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    2350:	211f      	movs	r1, #31
    2352:	400b      	ands	r3, r1
    2354:	391e      	subs	r1, #30
    2356:	4099      	lsls	r1, r3
    2358:	4b02      	ldr	r3, [pc, #8]	; (2364 <system_pinmux_pin_set_config+0x2c>)
    235a:	4798      	blx	r3
}
    235c:	bd10      	pop	{r4, pc}
    235e:	46c0      	nop			; (mov r8, r8)
    2360:	41004400 	.word	0x41004400
    2364:	00002291 	.word	0x00002291

00002368 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2368:	4770      	bx	lr
    236a:	46c0      	nop			; (mov r8, r8)

0000236c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    236c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    236e:	4b05      	ldr	r3, [pc, #20]	; (2384 <system_init+0x18>)
    2370:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2372:	4b05      	ldr	r3, [pc, #20]	; (2388 <system_init+0x1c>)
    2374:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2376:	4b05      	ldr	r3, [pc, #20]	; (238c <system_init+0x20>)
    2378:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    237a:	4b05      	ldr	r3, [pc, #20]	; (2390 <system_init+0x24>)
    237c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    237e:	4b05      	ldr	r3, [pc, #20]	; (2394 <system_init+0x28>)
    2380:	4798      	blx	r3
}
    2382:	bd10      	pop	{r4, pc}
    2384:	00001e19 	.word	0x00001e19
    2388:	00000981 	.word	0x00000981
    238c:	00002369 	.word	0x00002369
    2390:	00000afd 	.word	0x00000afd
    2394:	00002369 	.word	0x00002369

00002398 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2398:	1c93      	adds	r3, r2, #2
    239a:	009b      	lsls	r3, r3, #2
    239c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    239e:	2a02      	cmp	r2, #2
    23a0:	d104      	bne.n	23ac <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    23a2:	7e02      	ldrb	r2, [r0, #24]
    23a4:	2310      	movs	r3, #16
    23a6:	4313      	orrs	r3, r2
    23a8:	7603      	strb	r3, [r0, #24]
    23aa:	e00b      	b.n	23c4 <tc_register_callback+0x2c>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    23ac:	2a03      	cmp	r2, #3
    23ae:	d104      	bne.n	23ba <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    23b0:	7e02      	ldrb	r2, [r0, #24]
    23b2:	2320      	movs	r3, #32
    23b4:	4313      	orrs	r3, r2
    23b6:	7603      	strb	r3, [r0, #24]
    23b8:	e004      	b.n	23c4 <tc_register_callback+0x2c>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    23ba:	2301      	movs	r3, #1
    23bc:	4093      	lsls	r3, r2
    23be:	7e02      	ldrb	r2, [r0, #24]
    23c0:	4313      	orrs	r3, r2
    23c2:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    23c4:	2000      	movs	r0, #0
    23c6:	4770      	bx	lr

000023c8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    23c8:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    23ca:	0080      	lsls	r0, r0, #2
    23cc:	4b14      	ldr	r3, [pc, #80]	; (2420 <_tc_interrupt_handler+0x58>)
    23ce:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    23d0:	682b      	ldr	r3, [r5, #0]
    23d2:	7b9c      	ldrb	r4, [r3, #14]
    23d4:	7e2b      	ldrb	r3, [r5, #24]
    23d6:	401c      	ands	r4, r3
    23d8:	7e6b      	ldrb	r3, [r5, #25]
    23da:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    23dc:	07e3      	lsls	r3, r4, #31
    23de:	d505      	bpl.n	23ec <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    23e0:	0028      	movs	r0, r5
    23e2:	68ab      	ldr	r3, [r5, #8]
    23e4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    23e6:	2301      	movs	r3, #1
    23e8:	682a      	ldr	r2, [r5, #0]
    23ea:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    23ec:	07a3      	lsls	r3, r4, #30
    23ee:	d505      	bpl.n	23fc <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    23f0:	0028      	movs	r0, r5
    23f2:	68eb      	ldr	r3, [r5, #12]
    23f4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    23f6:	2302      	movs	r3, #2
    23f8:	682a      	ldr	r2, [r5, #0]
    23fa:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    23fc:	06e3      	lsls	r3, r4, #27
    23fe:	d505      	bpl.n	240c <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    2400:	0028      	movs	r0, r5
    2402:	692b      	ldr	r3, [r5, #16]
    2404:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    2406:	2310      	movs	r3, #16
    2408:	682a      	ldr	r2, [r5, #0]
    240a:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    240c:	06a3      	lsls	r3, r4, #26
    240e:	d505      	bpl.n	241c <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    2410:	0028      	movs	r0, r5
    2412:	696b      	ldr	r3, [r5, #20]
    2414:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    2416:	682b      	ldr	r3, [r5, #0]
    2418:	2220      	movs	r2, #32
    241a:	739a      	strb	r2, [r3, #14]
	}
}
    241c:	bd70      	pop	{r4, r5, r6, pc}
    241e:	46c0      	nop			; (mov r8, r8)
    2420:	200007d0 	.word	0x200007d0

00002424 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    2424:	b510      	push	{r4, lr}
    2426:	2000      	movs	r0, #0
    2428:	4b01      	ldr	r3, [pc, #4]	; (2430 <TC3_Handler+0xc>)
    242a:	4798      	blx	r3
    242c:	bd10      	pop	{r4, pc}
    242e:	46c0      	nop			; (mov r8, r8)
    2430:	000023c9 	.word	0x000023c9

00002434 <TC4_Handler>:
    2434:	b510      	push	{r4, lr}
    2436:	2001      	movs	r0, #1
    2438:	4b01      	ldr	r3, [pc, #4]	; (2440 <TC4_Handler+0xc>)
    243a:	4798      	blx	r3
    243c:	bd10      	pop	{r4, pc}
    243e:	46c0      	nop			; (mov r8, r8)
    2440:	000023c9 	.word	0x000023c9

00002444 <TC5_Handler>:
    2444:	b510      	push	{r4, lr}
    2446:	2002      	movs	r0, #2
    2448:	4b01      	ldr	r3, [pc, #4]	; (2450 <TC5_Handler+0xc>)
    244a:	4798      	blx	r3
    244c:	bd10      	pop	{r4, pc}
    244e:	46c0      	nop			; (mov r8, r8)
    2450:	000023c9 	.word	0x000023c9

00002454 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    2454:	b530      	push	{r4, r5, lr}
    2456:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2458:	aa01      	add	r2, sp, #4
    245a:	4b0b      	ldr	r3, [pc, #44]	; (2488 <_tc_get_inst_index+0x34>)
    245c:	cb32      	ldmia	r3!, {r1, r4, r5}
    245e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    2460:	9b01      	ldr	r3, [sp, #4]
    2462:	4298      	cmp	r0, r3
    2464:	d00a      	beq.n	247c <_tc_get_inst_index+0x28>
    2466:	9b02      	ldr	r3, [sp, #8]
    2468:	4298      	cmp	r0, r3
    246a:	d005      	beq.n	2478 <_tc_get_inst_index+0x24>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    246c:	2300      	movs	r3, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    246e:	9a03      	ldr	r2, [sp, #12]
    2470:	4282      	cmp	r2, r0
    2472:	d105      	bne.n	2480 <_tc_get_inst_index+0x2c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2474:	3302      	adds	r3, #2
    2476:	e002      	b.n	247e <_tc_get_inst_index+0x2a>
    2478:	2301      	movs	r3, #1
    247a:	e000      	b.n	247e <_tc_get_inst_index+0x2a>
    247c:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
    247e:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    2480:	0018      	movs	r0, r3
    2482:	b005      	add	sp, #20
    2484:	bd30      	pop	{r4, r5, pc}
    2486:	46c0      	nop			; (mov r8, r8)
    2488:	00008af8 	.word	0x00008af8

0000248c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    248c:	b5f0      	push	{r4, r5, r6, r7, lr}
    248e:	464f      	mov	r7, r9
    2490:	4646      	mov	r6, r8
    2492:	b4c0      	push	{r6, r7}
    2494:	b087      	sub	sp, #28
    2496:	0004      	movs	r4, r0
    2498:	000e      	movs	r6, r1
    249a:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    249c:	0008      	movs	r0, r1
    249e:	4b92      	ldr	r3, [pc, #584]	; (26e8 <tc_init+0x25c>)
    24a0:	4798      	blx	r3
    24a2:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    24a4:	4d91      	ldr	r5, [pc, #580]	; (26ec <tc_init+0x260>)
    24a6:	0029      	movs	r1, r5
    24a8:	310c      	adds	r1, #12
    24aa:	2203      	movs	r2, #3
    24ac:	a805      	add	r0, sp, #20
    24ae:	4f90      	ldr	r7, [pc, #576]	; (26f0 <tc_init+0x264>)
    24b0:	47b8      	blx	r7
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    24b2:	0029      	movs	r1, r5
    24b4:	3110      	adds	r1, #16
    24b6:	2206      	movs	r2, #6
    24b8:	a803      	add	r0, sp, #12
    24ba:	47b8      	blx	r7
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    24bc:	2300      	movs	r3, #0
    24be:	60a3      	str	r3, [r4, #8]
    24c0:	60e3      	str	r3, [r4, #12]
    24c2:	6123      	str	r3, [r4, #16]
    24c4:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    24c6:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    24c8:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    24ca:	464b      	mov	r3, r9
    24cc:	009a      	lsls	r2, r3, #2
    24ce:	4b89      	ldr	r3, [pc, #548]	; (26f4 <tc_init+0x268>)
    24d0:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    24d2:	6026      	str	r6, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    24d4:	4643      	mov	r3, r8
    24d6:	789b      	ldrb	r3, [r3, #2]
    24d8:	2b08      	cmp	r3, #8
    24da:	d104      	bne.n	24e6 <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    24dc:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    24de:	464a      	mov	r2, r9
    24e0:	07d2      	lsls	r2, r2, #31
    24e2:	d400      	bmi.n	24e6 <tc_init+0x5a>
    24e4:	e0fb      	b.n	26de <tc_init+0x252>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    24e6:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    24e8:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    24ea:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    24ec:	07db      	lsls	r3, r3, #31
    24ee:	d500      	bpl.n	24f2 <tc_init+0x66>
    24f0:	e0f5      	b.n	26de <tc_init+0x252>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    24f2:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    24f4:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    24f6:	06db      	lsls	r3, r3, #27
    24f8:	d500      	bpl.n	24fc <tc_init+0x70>
    24fa:	e0f0      	b.n	26de <tc_init+0x252>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    24fc:	8833      	ldrh	r3, [r6, #0]
    24fe:	079b      	lsls	r3, r3, #30
    2500:	d500      	bpl.n	2504 <tc_init+0x78>
    2502:	e0ec      	b.n	26de <tc_init+0x252>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    2504:	4643      	mov	r3, r8
    2506:	7c1b      	ldrb	r3, [r3, #16]
    2508:	2b00      	cmp	r3, #0
    250a:	d00c      	beq.n	2526 <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    250c:	a902      	add	r1, sp, #8
    250e:	2301      	movs	r3, #1
    2510:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2512:	2200      	movs	r2, #0
    2514:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    2516:	4642      	mov	r2, r8
    2518:	7e12      	ldrb	r2, [r2, #24]
    251a:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    251c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    251e:	4643      	mov	r3, r8
    2520:	7d18      	ldrb	r0, [r3, #20]
    2522:	4b75      	ldr	r3, [pc, #468]	; (26f8 <tc_init+0x26c>)
    2524:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    2526:	4643      	mov	r3, r8
    2528:	7f1b      	ldrb	r3, [r3, #28]
    252a:	2b00      	cmp	r3, #0
    252c:	d00d      	beq.n	254a <tc_init+0xbe>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    252e:	a902      	add	r1, sp, #8
    2530:	2301      	movs	r3, #1
    2532:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2534:	2200      	movs	r2, #0
    2536:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    2538:	4642      	mov	r2, r8
    253a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    253c:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    253e:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2540:	4643      	mov	r3, r8
    2542:	6a1b      	ldr	r3, [r3, #32]
    2544:	b2d8      	uxtb	r0, r3
    2546:	4b6c      	ldr	r3, [pc, #432]	; (26f8 <tc_init+0x26c>)
    2548:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    254a:	496c      	ldr	r1, [pc, #432]	; (26fc <tc_init+0x270>)
    254c:	6a0b      	ldr	r3, [r1, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    254e:	464a      	mov	r2, r9
    2550:	0052      	lsls	r2, r2, #1
    2552:	a803      	add	r0, sp, #12
    2554:	5a12      	ldrh	r2, [r2, r0]
    2556:	4313      	orrs	r3, r2
    2558:	620b      	str	r3, [r1, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    255a:	4643      	mov	r3, r8
    255c:	789b      	ldrb	r3, [r3, #2]
    255e:	2b08      	cmp	r3, #8
    2560:	d106      	bne.n	2570 <tc_init+0xe4>
    2562:	6a0b      	ldr	r3, [r1, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    2564:	464a      	mov	r2, r9
    2566:	3201      	adds	r2, #1
    2568:	0052      	lsls	r2, r2, #1
    256a:	5a12      	ldrh	r2, [r2, r0]
    256c:	4313      	orrs	r3, r2
    256e:	620b      	str	r3, [r1, #32]
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    2570:	a901      	add	r1, sp, #4
    2572:	4643      	mov	r3, r8
    2574:	781b      	ldrb	r3, [r3, #0]
    2576:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    2578:	ab05      	add	r3, sp, #20
    257a:	464a      	mov	r2, r9
    257c:	5c9d      	ldrb	r5, [r3, r2]
    257e:	0028      	movs	r0, r5
    2580:	4b5f      	ldr	r3, [pc, #380]	; (2700 <tc_init+0x274>)
    2582:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    2584:	0028      	movs	r0, r5
    2586:	4b5f      	ldr	r3, [pc, #380]	; (2704 <tc_init+0x278>)
    2588:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    258a:	4643      	mov	r3, r8
    258c:	7898      	ldrb	r0, [r3, #2]
    258e:	799b      	ldrb	r3, [r3, #6]
    2590:	0002      	movs	r2, r0
    2592:	431a      	orrs	r2, r3
    2594:	4643      	mov	r3, r8
    2596:	8918      	ldrh	r0, [r3, #8]
    2598:	889b      	ldrh	r3, [r3, #4]
    259a:	4303      	orrs	r3, r0
    259c:	431a      	orrs	r2, r3
    259e:	0010      	movs	r0, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    25a0:	4643      	mov	r3, r8
    25a2:	785b      	ldrb	r3, [r3, #1]
    25a4:	2b00      	cmp	r3, #0
    25a6:	d002      	beq.n	25ae <tc_init+0x122>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    25a8:	2380      	movs	r3, #128	; 0x80
    25aa:	011b      	lsls	r3, r3, #4
    25ac:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25ae:	6821      	ldr	r1, [r4, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    25b0:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25b2:	7bcb      	ldrb	r3, [r1, #15]
    25b4:	4393      	bics	r3, r2
    25b6:	d1fc      	bne.n	25b2 <tc_init+0x126>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    25b8:	8030      	strh	r0, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    25ba:	4643      	mov	r3, r8
    25bc:	7b58      	ldrb	r0, [r3, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    25be:	1e43      	subs	r3, r0, #1
    25c0:	4198      	sbcs	r0, r3
    25c2:	0080      	lsls	r0, r0, #2
	}

	if (config->count_direction) {
    25c4:	4643      	mov	r3, r8
    25c6:	7b9b      	ldrb	r3, [r3, #14]
    25c8:	2b00      	cmp	r3, #0
    25ca:	d001      	beq.n	25d0 <tc_init+0x144>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    25cc:	2301      	movs	r3, #1
    25ce:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25d0:	6821      	ldr	r1, [r4, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    25d2:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25d4:	7bcb      	ldrb	r3, [r1, #15]
    25d6:	4393      	bics	r3, r2
    25d8:	d1fc      	bne.n	25d4 <tc_init+0x148>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    25da:	33ff      	adds	r3, #255	; 0xff
    25dc:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    25de:	2800      	cmp	r0, #0
    25e0:	d005      	beq.n	25ee <tc_init+0x162>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25e2:	6821      	ldr	r1, [r4, #0]
		while (tc_is_syncing(module_inst)) {
    25e4:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25e6:	7bcb      	ldrb	r3, [r1, #15]
    25e8:	4393      	bics	r3, r2
    25ea:	d1fc      	bne.n	25e6 <tc_init+0x15a>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    25ec:	7170      	strb	r0, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    25ee:	4643      	mov	r3, r8
    25f0:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    25f2:	7adb      	ldrb	r3, [r3, #11]
    25f4:	2b00      	cmp	r3, #0
    25f6:	d001      	beq.n	25fc <tc_init+0x170>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    25f8:	2310      	movs	r3, #16
    25fa:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    25fc:	4643      	mov	r3, r8
    25fe:	7b1b      	ldrb	r3, [r3, #12]
    2600:	2b00      	cmp	r3, #0
    2602:	d001      	beq.n	2608 <tc_init+0x17c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2604:	2320      	movs	r3, #32
    2606:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2608:	6821      	ldr	r1, [r4, #0]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    260a:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    260c:	7bcb      	ldrb	r3, [r1, #15]
    260e:	4393      	bics	r3, r2
    2610:	d1fc      	bne.n	260c <tc_init+0x180>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    2612:	71b0      	strb	r0, [r6, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2614:	6822      	ldr	r2, [r4, #0]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2616:	217f      	movs	r1, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2618:	7bd3      	ldrb	r3, [r2, #15]
    261a:	438b      	bics	r3, r1
    261c:	d1fc      	bne.n	2618 <tc_init+0x18c>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    261e:	7923      	ldrb	r3, [r4, #4]
    2620:	2b04      	cmp	r3, #4
    2622:	d005      	beq.n	2630 <tc_init+0x1a4>
    2624:	2b08      	cmp	r3, #8
    2626:	d041      	beq.n	26ac <tc_init+0x220>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    2628:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    262a:	2b00      	cmp	r3, #0
    262c:	d157      	bne.n	26de <tc_init+0x252>
    262e:	e024      	b.n	267a <tc_init+0x1ee>
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    2630:	217f      	movs	r1, #127	; 0x7f
    2632:	7bd3      	ldrb	r3, [r2, #15]
    2634:	438b      	bics	r3, r1
    2636:	d1fc      	bne.n	2632 <tc_init+0x1a6>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    2638:	3328      	adds	r3, #40	; 0x28
    263a:	4642      	mov	r2, r8
    263c:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    263e:	7433      	strb	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2640:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    2642:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2644:	7bcb      	ldrb	r3, [r1, #15]
    2646:	4393      	bics	r3, r2
    2648:	d1fc      	bne.n	2644 <tc_init+0x1b8>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    264a:	3329      	adds	r3, #41	; 0x29
    264c:	4642      	mov	r2, r8
    264e:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    2650:	7533      	strb	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2652:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    2654:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2656:	7bcb      	ldrb	r3, [r1, #15]
    2658:	4393      	bics	r3, r2
    265a:	d1fc      	bne.n	2656 <tc_init+0x1ca>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    265c:	332a      	adds	r3, #42	; 0x2a
    265e:	4642      	mov	r2, r8
    2660:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    2662:	7633      	strb	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2664:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    2666:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2668:	7bcb      	ldrb	r3, [r1, #15]
    266a:	4393      	bics	r3, r2
    266c:	d1fc      	bne.n	2668 <tc_init+0x1dc>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    266e:	332b      	adds	r3, #43	; 0x2b
    2670:	4642      	mov	r2, r8
    2672:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    2674:	7673      	strb	r3, [r6, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    2676:	2000      	movs	r0, #0
    2678:	e031      	b.n	26de <tc_init+0x252>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    267a:	217f      	movs	r1, #127	; 0x7f
    267c:	7bd3      	ldrb	r3, [r2, #15]
    267e:	438b      	bics	r3, r1
    2680:	d1fc      	bne.n	267c <tc_init+0x1f0>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    2682:	4643      	mov	r3, r8
    2684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2686:	8233      	strh	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2688:	6821      	ldr	r1, [r4, #0]

			while (tc_is_syncing(module_inst)) {
    268a:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    268c:	7bcb      	ldrb	r3, [r1, #15]
    268e:	4393      	bics	r3, r2
    2690:	d1fc      	bne.n	268c <tc_init+0x200>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    2692:	4643      	mov	r3, r8
    2694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    2696:	8333      	strh	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2698:	6821      	ldr	r1, [r4, #0]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    269a:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    269c:	7bcb      	ldrb	r3, [r1, #15]
    269e:	4393      	bics	r3, r2
    26a0:	d1fc      	bne.n	269c <tc_init+0x210>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    26a2:	4643      	mov	r3, r8
    26a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    26a6:	8373      	strh	r3, [r6, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    26a8:	2000      	movs	r0, #0
    26aa:	e018      	b.n	26de <tc_init+0x252>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    26ac:	217f      	movs	r1, #127	; 0x7f
    26ae:	7bd3      	ldrb	r3, [r2, #15]
    26b0:	438b      	bics	r3, r1
    26b2:	d1fc      	bne.n	26ae <tc_init+0x222>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    26b4:	4643      	mov	r3, r8
    26b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26b8:	6133      	str	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26ba:	6821      	ldr	r1, [r4, #0]

			while (tc_is_syncing(module_inst)) {
    26bc:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26be:	7bcb      	ldrb	r3, [r1, #15]
    26c0:	4393      	bics	r3, r2
    26c2:	d1fc      	bne.n	26be <tc_init+0x232>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    26c4:	4643      	mov	r3, r8
    26c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    26c8:	61b3      	str	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26ca:	6821      	ldr	r1, [r4, #0]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    26cc:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26ce:	7bcb      	ldrb	r3, [r1, #15]
    26d0:	4393      	bics	r3, r2
    26d2:	d1fc      	bne.n	26ce <tc_init+0x242>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    26d4:	4643      	mov	r3, r8
    26d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    26d8:	61f3      	str	r3, [r6, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    26da:	2000      	movs	r0, #0
    26dc:	e7ff      	b.n	26de <tc_init+0x252>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    26de:	b007      	add	sp, #28
    26e0:	bc0c      	pop	{r2, r3}
    26e2:	4690      	mov	r8, r2
    26e4:	4699      	mov	r9, r3
    26e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26e8:	00002455 	.word	0x00002455
    26ec:	00008af8 	.word	0x00008af8
    26f0:	00003515 	.word	0x00003515
    26f4:	200007d0 	.word	0x200007d0
    26f8:	00002339 	.word	0x00002339
    26fc:	40000400 	.word	0x40000400
    2700:	00002241 	.word	0x00002241
    2704:	000021b5 	.word	0x000021b5

00002708 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    2708:	6802      	ldr	r2, [r0, #0]

	while (tc_is_syncing(module_inst)) {
    270a:	217f      	movs	r1, #127	; 0x7f
    270c:	7bd3      	ldrb	r3, [r2, #15]
    270e:	438b      	bics	r3, r1
    2710:	d1fc      	bne.n	270c <tc_get_count_value+0x4>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    2712:	7903      	ldrb	r3, [r0, #4]
    2714:	2b04      	cmp	r3, #4
    2716:	d005      	beq.n	2724 <tc_get_count_value+0x1c>
    2718:	2b08      	cmp	r3, #8
    271a:	d009      	beq.n	2730 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    271c:	2000      	movs	r0, #0
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    271e:	2b00      	cmp	r3, #0
    2720:	d108      	bne.n	2734 <tc_get_count_value+0x2c>
    2722:	e002      	b.n	272a <tc_get_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    2724:	7c10      	ldrb	r0, [r2, #16]
    2726:	b2c0      	uxtb	r0, r0
    2728:	e004      	b.n	2734 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    272a:	8a10      	ldrh	r0, [r2, #16]
    272c:	b280      	uxth	r0, r0
    272e:	e001      	b.n	2734 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    2730:	6910      	ldr	r0, [r2, #16]
    2732:	e7ff      	b.n	2734 <tc_get_count_value+0x2c>
	}

	Assert(false);
	return 0;
}
    2734:	4770      	bx	lr
    2736:	46c0      	nop			; (mov r8, r8)

00002738 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    2738:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    273a:	6804      	ldr	r4, [r0, #0]

	while (tc_is_syncing(module_inst)) {
    273c:	257f      	movs	r5, #127	; 0x7f
    273e:	7be3      	ldrb	r3, [r4, #15]
    2740:	43ab      	bics	r3, r5
    2742:	d1fc      	bne.n	273e <tc_set_compare_value+0x6>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    2744:	7903      	ldrb	r3, [r0, #4]
    2746:	2b04      	cmp	r3, #4
    2748:	d005      	beq.n	2756 <tc_set_compare_value+0x1e>
    274a:	2b08      	cmp	r3, #8
    274c:	d014      	beq.n	2778 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    274e:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    2750:	2b00      	cmp	r3, #0
    2752:	d119      	bne.n	2788 <tc_set_compare_value+0x50>
    2754:	e007      	b.n	2766 <tc_set_compare_value+0x2e>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    2756:	2017      	movs	r0, #23
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    2758:	2901      	cmp	r1, #1
    275a:	d815      	bhi.n	2788 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
						(uint8_t)compare;
    275c:	b2d2      	uxtb	r2, r2
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
    275e:	1861      	adds	r1, r4, r1
    2760:	760a      	strb	r2, [r1, #24]
						(uint8_t)compare;
				return STATUS_OK;
    2762:	2000      	movs	r0, #0
    2764:	e010      	b.n	2788 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    2766:	2017      	movs	r0, #23
						(uint8_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    2768:	2901      	cmp	r1, #1
    276a:	d80d      	bhi.n	2788 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
						(uint16_t)compare;
    276c:	b292      	uxth	r2, r2
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
    276e:	310c      	adds	r1, #12
    2770:	0049      	lsls	r1, r1, #1
    2772:	530a      	strh	r2, [r1, r4]
						(uint16_t)compare;
				return STATUS_OK;
    2774:	2000      	movs	r0, #0
    2776:	e007      	b.n	2788 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    2778:	2017      	movs	r0, #23
						(uint16_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    277a:	2901      	cmp	r1, #1
    277c:	d804      	bhi.n	2788 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
    277e:	3106      	adds	r1, #6
    2780:	0089      	lsls	r1, r1, #2
    2782:	510a      	str	r2, [r1, r4]
						(uint32_t)compare;
				return STATUS_OK;
    2784:	2000      	movs	r0, #0
    2786:	e7ff      	b.n	2788 <tc_set_compare_value+0x50>
			}
	}

	return STATUS_ERR_INVALID_ARG;
}
    2788:	bd30      	pop	{r4, r5, pc}
    278a:	46c0      	nop			; (mov r8, r8)

0000278c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    278c:	e7fe      	b.n	278c <Dummy_Handler>
    278e:	46c0      	nop			; (mov r8, r8)

00002790 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2790:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    2792:	4b2e      	ldr	r3, [pc, #184]	; (284c <Reset_Handler+0xbc>)
    2794:	4a2e      	ldr	r2, [pc, #184]	; (2850 <Reset_Handler+0xc0>)
    2796:	429a      	cmp	r2, r3
    2798:	d003      	beq.n	27a2 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    279a:	4b2e      	ldr	r3, [pc, #184]	; (2854 <Reset_Handler+0xc4>)
    279c:	4a2b      	ldr	r2, [pc, #172]	; (284c <Reset_Handler+0xbc>)
    279e:	429a      	cmp	r2, r3
    27a0:	d304      	bcc.n	27ac <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    27a2:	4b2d      	ldr	r3, [pc, #180]	; (2858 <Reset_Handler+0xc8>)
    27a4:	4a2d      	ldr	r2, [pc, #180]	; (285c <Reset_Handler+0xcc>)
    27a6:	429a      	cmp	r2, r3
    27a8:	d310      	bcc.n	27cc <Reset_Handler+0x3c>
    27aa:	e01e      	b.n	27ea <Reset_Handler+0x5a>
    27ac:	4a2c      	ldr	r2, [pc, #176]	; (2860 <Reset_Handler+0xd0>)
    27ae:	4b29      	ldr	r3, [pc, #164]	; (2854 <Reset_Handler+0xc4>)
    27b0:	3303      	adds	r3, #3
    27b2:	1a9b      	subs	r3, r3, r2
    27b4:	089b      	lsrs	r3, r3, #2
    27b6:	3301      	adds	r3, #1
    27b8:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    27ba:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    27bc:	4823      	ldr	r0, [pc, #140]	; (284c <Reset_Handler+0xbc>)
    27be:	4924      	ldr	r1, [pc, #144]	; (2850 <Reset_Handler+0xc0>)
    27c0:	588c      	ldr	r4, [r1, r2]
    27c2:	5084      	str	r4, [r0, r2]
    27c4:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    27c6:	429a      	cmp	r2, r3
    27c8:	d1fa      	bne.n	27c0 <Reset_Handler+0x30>
    27ca:	e7ea      	b.n	27a2 <Reset_Handler+0x12>
    27cc:	4a25      	ldr	r2, [pc, #148]	; (2864 <Reset_Handler+0xd4>)
    27ce:	4b22      	ldr	r3, [pc, #136]	; (2858 <Reset_Handler+0xc8>)
    27d0:	3303      	adds	r3, #3
    27d2:	1a9b      	subs	r3, r3, r2
    27d4:	089b      	lsrs	r3, r3, #2
    27d6:	3301      	adds	r3, #1
    27d8:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    27da:	2200      	movs	r2, #0
                *pDest++ = 0;
    27dc:	481f      	ldr	r0, [pc, #124]	; (285c <Reset_Handler+0xcc>)
    27de:	2100      	movs	r1, #0
    27e0:	1814      	adds	r4, r2, r0
    27e2:	6021      	str	r1, [r4, #0]
    27e4:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    27e6:	429a      	cmp	r2, r3
    27e8:	d1fa      	bne.n	27e0 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    27ea:	4a1f      	ldr	r2, [pc, #124]	; (2868 <Reset_Handler+0xd8>)
    27ec:	21ff      	movs	r1, #255	; 0xff
    27ee:	4b1f      	ldr	r3, [pc, #124]	; (286c <Reset_Handler+0xdc>)
    27f0:	438b      	bics	r3, r1
    27f2:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    27f4:	39fd      	subs	r1, #253	; 0xfd
    27f6:	2390      	movs	r3, #144	; 0x90
    27f8:	005b      	lsls	r3, r3, #1
    27fa:	4a1d      	ldr	r2, [pc, #116]	; (2870 <Reset_Handler+0xe0>)
    27fc:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    27fe:	481d      	ldr	r0, [pc, #116]	; (2874 <Reset_Handler+0xe4>)
    2800:	78c3      	ldrb	r3, [r0, #3]
    2802:	2403      	movs	r4, #3
    2804:	43a3      	bics	r3, r4
    2806:	2202      	movs	r2, #2
    2808:	4313      	orrs	r3, r2
    280a:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    280c:	78c3      	ldrb	r3, [r0, #3]
    280e:	260c      	movs	r6, #12
    2810:	43b3      	bics	r3, r6
    2812:	2108      	movs	r1, #8
    2814:	430b      	orrs	r3, r1
    2816:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    2818:	4b17      	ldr	r3, [pc, #92]	; (2878 <Reset_Handler+0xe8>)
    281a:	7b98      	ldrb	r0, [r3, #14]
    281c:	2530      	movs	r5, #48	; 0x30
    281e:	43a8      	bics	r0, r5
    2820:	0005      	movs	r5, r0
    2822:	2020      	movs	r0, #32
    2824:	4328      	orrs	r0, r5
    2826:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2828:	7b98      	ldrb	r0, [r3, #14]
    282a:	43b0      	bics	r0, r6
    282c:	4301      	orrs	r1, r0
    282e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2830:	7b99      	ldrb	r1, [r3, #14]
    2832:	43a1      	bics	r1, r4
    2834:	430a      	orrs	r2, r1
    2836:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    2838:	4a10      	ldr	r2, [pc, #64]	; (287c <Reset_Handler+0xec>)
    283a:	6851      	ldr	r1, [r2, #4]
    283c:	2380      	movs	r3, #128	; 0x80
    283e:	430b      	orrs	r3, r1
    2840:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    2842:	4b0f      	ldr	r3, [pc, #60]	; (2880 <Reset_Handler+0xf0>)
    2844:	4798      	blx	r3

        /* Branch to main function */
        main();
    2846:	4b0f      	ldr	r3, [pc, #60]	; (2884 <Reset_Handler+0xf4>)
    2848:	4798      	blx	r3
    284a:	e7fe      	b.n	284a <Reset_Handler+0xba>
    284c:	20000000 	.word	0x20000000
    2850:	00008e58 	.word	0x00008e58
    2854:	200000a8 	.word	0x200000a8
    2858:	200008f0 	.word	0x200008f0
    285c:	200000a8 	.word	0x200000a8
    2860:	20000004 	.word	0x20000004
    2864:	200000ac 	.word	0x200000ac
    2868:	e000ed00 	.word	0xe000ed00
    286c:	00000000 	.word	0x00000000
    2870:	41007000 	.word	0x41007000
    2874:	41005000 	.word	0x41005000
    2878:	41004800 	.word	0x41004800
    287c:	41004000 	.word	0x41004000
    2880:	000034c9 	.word	0x000034c9
    2884:	000033c1 	.word	0x000033c1

00002888 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2888:	b5f0      	push	{r4, r5, r6, r7, lr}
    288a:	4647      	mov	r7, r8
    288c:	b480      	push	{r7}
    288e:	000c      	movs	r4, r1
    2890:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2892:	2800      	cmp	r0, #0
    2894:	d10d      	bne.n	28b2 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
    2896:	2a00      	cmp	r2, #0
    2898:	dd0e      	ble.n	28b8 <_read+0x30>
    289a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    289c:	4e08      	ldr	r6, [pc, #32]	; (28c0 <_read+0x38>)
    289e:	4d09      	ldr	r5, [pc, #36]	; (28c4 <_read+0x3c>)
    28a0:	6830      	ldr	r0, [r6, #0]
    28a2:	0021      	movs	r1, r4
    28a4:	682b      	ldr	r3, [r5, #0]
    28a6:	4798      	blx	r3
		ptr++;
    28a8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    28aa:	42a7      	cmp	r7, r4
    28ac:	d1f8      	bne.n	28a0 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    28ae:	4640      	mov	r0, r8
    28b0:	e003      	b.n	28ba <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    28b2:	2001      	movs	r0, #1
    28b4:	4240      	negs	r0, r0
    28b6:	e000      	b.n	28ba <_read+0x32>
	}

	for (; len > 0; --len) {
    28b8:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    28ba:	bc04      	pop	{r2}
    28bc:	4690      	mov	r8, r2
    28be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28c0:	200007e4 	.word	0x200007e4
    28c4:	200007dc 	.word	0x200007dc

000028c8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    28c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    28ca:	4647      	mov	r7, r8
    28cc:	b480      	push	{r7}
    28ce:	000e      	movs	r6, r1
    28d0:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    28d2:	3801      	subs	r0, #1
    28d4:	2802      	cmp	r0, #2
    28d6:	d811      	bhi.n	28fc <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
    28d8:	2a00      	cmp	r2, #0
    28da:	d012      	beq.n	2902 <_write+0x3a>
    28dc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    28de:	4b0c      	ldr	r3, [pc, #48]	; (2910 <_write+0x48>)
    28e0:	4698      	mov	r8, r3
    28e2:	4f0c      	ldr	r7, [pc, #48]	; (2914 <_write+0x4c>)
    28e4:	4643      	mov	r3, r8
    28e6:	6818      	ldr	r0, [r3, #0]
    28e8:	5d31      	ldrb	r1, [r6, r4]
    28ea:	683b      	ldr	r3, [r7, #0]
    28ec:	4798      	blx	r3
    28ee:	2800      	cmp	r0, #0
    28f0:	db09      	blt.n	2906 <_write+0x3e>
			return -1;
		}
		++nChars;
    28f2:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    28f4:	42a5      	cmp	r5, r4
    28f6:	d1f5      	bne.n	28e4 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
    28f8:	0020      	movs	r0, r4
    28fa:	e006      	b.n	290a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    28fc:	2001      	movs	r0, #1
    28fe:	4240      	negs	r0, r0
    2900:	e003      	b.n	290a <_write+0x42>
	}

	for (; len != 0; --len) {
    2902:	2000      	movs	r0, #0
    2904:	e001      	b.n	290a <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    2906:	2001      	movs	r0, #1
    2908:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    290a:	bc04      	pop	{r2}
    290c:	4690      	mov	r8, r2
    290e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2910:	200007e4 	.word	0x200007e4
    2914:	200007e0 	.word	0x200007e0

00002918 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2918:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    291a:	4a06      	ldr	r2, [pc, #24]	; (2934 <_sbrk+0x1c>)
    291c:	6812      	ldr	r2, [r2, #0]
    291e:	2a00      	cmp	r2, #0
    2920:	d102      	bne.n	2928 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    2922:	4905      	ldr	r1, [pc, #20]	; (2938 <_sbrk+0x20>)
    2924:	4a03      	ldr	r2, [pc, #12]	; (2934 <_sbrk+0x1c>)
    2926:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    2928:	4a02      	ldr	r2, [pc, #8]	; (2934 <_sbrk+0x1c>)
    292a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    292c:	18c3      	adds	r3, r0, r3
    292e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2930:	4770      	bx	lr
    2932:	46c0      	nop			; (mov r8, r8)
    2934:	20000108 	.word	0x20000108
    2938:	200028f0 	.word	0x200028f0

0000293c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    293c:	2001      	movs	r0, #1
    293e:	4240      	negs	r0, r0
    2940:	4770      	bx	lr
    2942:	46c0      	nop			; (mov r8, r8)

00002944 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2944:	2380      	movs	r3, #128	; 0x80
    2946:	019b      	lsls	r3, r3, #6
    2948:	604b      	str	r3, [r1, #4]

	return 0;
}
    294a:	2000      	movs	r0, #0
    294c:	4770      	bx	lr
    294e:	46c0      	nop			; (mov r8, r8)

00002950 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2950:	2001      	movs	r0, #1
    2952:	4770      	bx	lr

00002954 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2954:	2000      	movs	r0, #0
    2956:	4770      	bx	lr

00002958 <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    2958:	b510      	push	{r4, lr}
	nwkIb.nwkSeqNum = 0;
    295a:	4a0d      	ldr	r2, [pc, #52]	; (2990 <NWK_Init+0x38>)
    295c:	2300      	movs	r3, #0
    295e:	7113      	strb	r3, [r2, #4]
	nwkIb.macSeqNum = 0;
    2960:	7153      	strb	r3, [r2, #5]
	nwkIb.addr = 0;
    2962:	8013      	strh	r3, [r2, #0]
	nwkIb.lock = 0;
    2964:	2158      	movs	r1, #88	; 0x58
    2966:	5253      	strh	r3, [r2, r1]
    2968:	0013      	movs	r3, r2
    296a:	3240      	adds	r2, #64	; 0x40

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    296c:	2100      	movs	r1, #0
    296e:	6099      	str	r1, [r3, #8]
    2970:	3304      	adds	r3, #4
	nwkIb.nwkSeqNum = 0;
	nwkIb.macSeqNum = 0;
	nwkIb.addr = 0;
	nwkIb.lock = 0;

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    2972:	4293      	cmp	r3, r2
    2974:	d1fb      	bne.n	296e <NWK_Init+0x16>
		nwkIb.endpoint[i] = NULL;
	}

	nwkTxInit();
    2976:	4b07      	ldr	r3, [pc, #28]	; (2994 <NWK_Init+0x3c>)
    2978:	4798      	blx	r3
	nwkRxInit();
    297a:	4b07      	ldr	r3, [pc, #28]	; (2998 <NWK_Init+0x40>)
    297c:	4798      	blx	r3
	nwkFrameInit();
    297e:	4b07      	ldr	r3, [pc, #28]	; (299c <NWK_Init+0x44>)
    2980:	4798      	blx	r3
	nwkDataReqInit();
    2982:	4b07      	ldr	r3, [pc, #28]	; (29a0 <NWK_Init+0x48>)
    2984:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    2986:	4b07      	ldr	r3, [pc, #28]	; (29a4 <NWK_Init+0x4c>)
    2988:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    298a:	4b07      	ldr	r3, [pc, #28]	; (29a8 <NWK_Init+0x50>)
    298c:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
    298e:	bd10      	pop	{r4, pc}
    2990:	200007e8 	.word	0x200007e8
    2994:	00002c35 	.word	0x00002c35
    2998:	00002b31 	.word	0x00002b31
    299c:	000029c9 	.word	0x000029c9
    29a0:	000029bd 	.word	0x000029bd
    29a4:	00002a19 	.word	0x00002a19
    29a8:	00002b71 	.word	0x00002b71

000029ac <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    29ac:	3002      	adds	r0, #2
    29ae:	0080      	lsls	r0, r0, #2
    29b0:	4b01      	ldr	r3, [pc, #4]	; (29b8 <NWK_OpenEndpoint+0xc>)
    29b2:	50c1      	str	r1, [r0, r3]
}
    29b4:	4770      	bx	lr
    29b6:	46c0      	nop			; (mov r8, r8)
    29b8:	200007e8 	.word	0x200007e8

000029bc <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    29bc:	2200      	movs	r2, #0
    29be:	4b01      	ldr	r3, [pc, #4]	; (29c4 <nwkDataReqInit+0x8>)
    29c0:	601a      	str	r2, [r3, #0]
}
    29c2:	4770      	bx	lr
    29c4:	2000010c 	.word	0x2000010c

000029c8 <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    29c8:	4b03      	ldr	r3, [pc, #12]	; (29d8 <nwkFrameInit+0x10>)
    29ca:	2200      	movs	r2, #0
    29cc:	701a      	strb	r2, [r3, #0]
    29ce:	218d      	movs	r1, #141	; 0x8d
    29d0:	545a      	strb	r2, [r3, r1]
    29d2:	318d      	adds	r1, #141	; 0x8d
    29d4:	545a      	strb	r2, [r3, r1]
	}
}
    29d6:	4770      	bx	lr
    29d8:	20000110 	.word	0x20000110

000029dc <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    29dc:	2800      	cmp	r0, #0
    29de:	d006      	beq.n	29ee <nwkFrameNext+0x12>
		frame = nwkFrameFrames;
	} else {
		frame++;
    29e0:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    29e2:	4b0c      	ldr	r3, [pc, #48]	; (2a14 <nwkFrameNext+0x38>)
    29e4:	33a8      	adds	r3, #168	; 0xa8
    29e6:	33ff      	adds	r3, #255	; 0xff
    29e8:	4298      	cmp	r0, r3
    29ea:	d301      	bcc.n	29f0 <nwkFrameNext+0x14>
    29ec:	e00f      	b.n	2a0e <nwkFrameNext+0x32>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
    29ee:	4809      	ldr	r0, [pc, #36]	; (2a14 <nwkFrameNext+0x38>)
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    29f0:	7803      	ldrb	r3, [r0, #0]
    29f2:	2b00      	cmp	r3, #0
    29f4:	d10c      	bne.n	2a10 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    29f6:	4a07      	ldr	r2, [pc, #28]	; (2a14 <nwkFrameNext+0x38>)
    29f8:	32a8      	adds	r2, #168	; 0xa8
    29fa:	32ff      	adds	r2, #255	; 0xff
    29fc:	e002      	b.n	2a04 <nwkFrameNext+0x28>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    29fe:	7803      	ldrb	r3, [r0, #0]
    2a00:	2b00      	cmp	r3, #0
    2a02:	d105      	bne.n	2a10 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2a04:	308d      	adds	r0, #141	; 0x8d
    2a06:	4290      	cmp	r0, r2
    2a08:	d3f9      	bcc.n	29fe <nwkFrameNext+0x22>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    2a0a:	2000      	movs	r0, #0
    2a0c:	e000      	b.n	2a10 <nwkFrameNext+0x34>
    2a0e:	2000      	movs	r0, #0
}
    2a10:	4770      	bx	lr
    2a12:	46c0      	nop			; (mov r8, r8)
    2a14:	20000110 	.word	0x20000110

00002a18 <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    2a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a1a:	4b09      	ldr	r3, [pc, #36]	; (2a40 <nwkRouteInit+0x28>)
    2a1c:	3302      	adds	r3, #2
    2a1e:	2200      	movs	r2, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2a20:	2701      	movs	r7, #1
    2a22:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    2a24:	4c06      	ldr	r4, [pc, #24]	; (2a40 <nwkRouteInit+0x28>)
    2a26:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    2a28:	2500      	movs	r5, #0
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2a2a:	801f      	strh	r7, [r3, #0]
		nwkRouteTable[i].fixed = 0;
    2a2c:	00d0      	lsls	r0, r2, #3
    2a2e:	5d01      	ldrb	r1, [r0, r4]
    2a30:	43b1      	bics	r1, r6
    2a32:	5501      	strb	r1, [r0, r4]
		nwkRouteTable[i].rank = 0;
    2a34:	711d      	strb	r5, [r3, #4]
    2a36:	3201      	adds	r2, #1
    2a38:	3308      	adds	r3, #8
/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2a3a:	2a64      	cmp	r2, #100	; 0x64
    2a3c:	d1f5      	bne.n	2a2a <nwkRouteInit+0x12>
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
		nwkRouteTable[i].fixed = 0;
		nwkRouteTable[i].rank = 0;
	}
}
    2a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a40:	200002b8 	.word	0x200002b8

00002a44 <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    2a44:	b570      	push	{r4, r5, r6, lr}
    2a46:	4a0b      	ldr	r2, [pc, #44]	; (2a74 <NWK_RouteFindEntry+0x30>)
    2a48:	3202      	adds	r2, #2
    2a4a:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    2a4c:	4e09      	ldr	r6, [pc, #36]	; (2a74 <NWK_RouteFindEntry+0x30>)
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    2a4e:	8814      	ldrh	r4, [r2, #0]
    2a50:	4284      	cmp	r4, r0
    2a52:	d109      	bne.n	2a68 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
    2a54:	00dc      	lsls	r4, r3, #3
    2a56:	5da4      	ldrb	r4, [r4, r6]
    2a58:	07a4      	lsls	r4, r4, #30
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    2a5a:	0fe4      	lsrs	r4, r4, #31
    2a5c:	428c      	cmp	r4, r1
    2a5e:	d103      	bne.n	2a68 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
    2a60:	00dd      	lsls	r5, r3, #3
    2a62:	4804      	ldr	r0, [pc, #16]	; (2a74 <NWK_RouteFindEntry+0x30>)
    2a64:	1940      	adds	r0, r0, r5
    2a66:	e004      	b.n	2a72 <NWK_RouteFindEntry+0x2e>
    2a68:	3301      	adds	r3, #1
    2a6a:	3208      	adds	r2, #8

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2a6c:	2b64      	cmp	r3, #100	; 0x64
    2a6e:	d1ee      	bne.n	2a4e <NWK_RouteFindEntry+0xa>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
		}
	}

	return NULL;
    2a70:	2000      	movs	r0, #0
}
    2a72:	bd70      	pop	{r4, r5, r6, pc}
    2a74:	200002b8 	.word	0x200002b8

00002a78 <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    2a78:	7803      	ldrb	r3, [r0, #0]
    2a7a:	07db      	lsls	r3, r3, #31
    2a7c:	d404      	bmi.n	2a88 <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    2a7e:	2301      	movs	r3, #1
    2a80:	425b      	negs	r3, r3
    2a82:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    2a84:	2300      	movs	r3, #0
    2a86:	7183      	strb	r3, [r0, #6]
}
    2a88:	4770      	bx	lr
    2a8a:	46c0      	nop			; (mov r8, r8)

00002a8c <nwkRouteRemove>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    2a8c:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    2a8e:	4b03      	ldr	r3, [pc, #12]	; (2a9c <nwkRouteRemove+0x10>)
    2a90:	4798      	blx	r3
	if (entry) {
    2a92:	2800      	cmp	r0, #0
    2a94:	d001      	beq.n	2a9a <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    2a96:	4b02      	ldr	r3, [pc, #8]	; (2aa0 <nwkRouteRemove+0x14>)
    2a98:	4798      	blx	r3
	}
}
    2a9a:	bd10      	pop	{r4, pc}
    2a9c:	00002a45 	.word	0x00002a45
    2aa0:	00002a79 	.word	0x00002a79

00002aa4 <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    2aa4:	b510      	push	{r4, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2aa6:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2aa8:	2300      	movs	r3, #0
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2aaa:	2a06      	cmp	r2, #6
    2aac:	d108      	bne.n	2ac0 <nwkRouteErrorReceived+0x1c>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    2aae:	6882      	ldr	r2, [r0, #8]

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
    2ab0:	7951      	ldrb	r1, [r2, #5]
    2ab2:	78d3      	ldrb	r3, [r2, #3]
    2ab4:	7910      	ldrb	r0, [r2, #4]
    2ab6:	0200      	lsls	r0, r0, #8
    2ab8:	4318      	orrs	r0, r3
    2aba:	4b02      	ldr	r3, [pc, #8]	; (2ac4 <nwkRouteErrorReceived+0x20>)
    2abc:	4798      	blx	r3

	return true;
    2abe:	2301      	movs	r3, #1
}
    2ac0:	0018      	movs	r0, r3
    2ac2:	bd10      	pop	{r4, pc}
    2ac4:	00002a8d 	.word	0x00002a8d

00002ac8 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    2ac8:	b510      	push	{r4, lr}
	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
		return false;
	}
#endif

	if (ind->size < 1) {
    2aca:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2acc:	2300      	movs	r3, #0
	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
		return false;
	}
#endif

	if (ind->size < 1) {
    2ace:	2a00      	cmp	r2, #0
    2ad0:	d00f      	beq.n	2af2 <nwkRxSeriveDataInd+0x2a>
		return false;
	}

	switch (ind->data[0]) {
    2ad2:	6883      	ldr	r3, [r0, #8]
    2ad4:	781b      	ldrb	r3, [r3, #0]
    2ad6:	2b00      	cmp	r3, #0
    2ad8:	d002      	beq.n	2ae0 <nwkRxSeriveDataInd+0x18>
    2ada:	2b01      	cmp	r3, #1
    2adc:	d004      	beq.n	2ae8 <nwkRxSeriveDataInd+0x20>
    2ade:	e007      	b.n	2af0 <nwkRxSeriveDataInd+0x28>
	case NWK_COMMAND_ACK:
		return nwkTxAckReceived(ind);
    2ae0:	4b05      	ldr	r3, [pc, #20]	; (2af8 <nwkRxSeriveDataInd+0x30>)
    2ae2:	4798      	blx	r3
    2ae4:	0003      	movs	r3, r0
    2ae6:	e004      	b.n	2af2 <nwkRxSeriveDataInd+0x2a>

#ifdef NWK_ENABLE_ROUTING
	case NWK_COMMAND_ROUTE_ERROR:
		return nwkRouteErrorReceived(ind);
    2ae8:	4b04      	ldr	r3, [pc, #16]	; (2afc <nwkRxSeriveDataInd+0x34>)
    2aea:	4798      	blx	r3
    2aec:	0003      	movs	r3, r0
    2aee:	e000      	b.n	2af2 <nwkRxSeriveDataInd+0x2a>
	case NWK_COMMAND_ROUTE_REPLY:
		return nwkRouteDiscoveryReplyReceived(ind);
#endif

	default:
		return false;
    2af0:	2300      	movs	r3, #0
	}
}
    2af2:	0018      	movs	r0, r3
    2af4:	bd10      	pop	{r4, pc}
    2af6:	46c0      	nop			; (mov r8, r8)
    2af8:	00002c69 	.word	0x00002c69
    2afc:	00002aa5 	.word	0x00002aa5

00002b00 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    2b00:	b570      	push	{r4, r5, r6, lr}
    2b02:	4909      	ldr	r1, [pc, #36]	; (2b28 <nwkRxDuplicateRejectionTimerHandler+0x28>)
    2b04:	1d0b      	adds	r3, r1, #4
    2b06:	3140      	adds	r1, #64	; 0x40
	bool restart = false;
    2b08:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
    2b0a:	2501      	movs	r5, #1
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    2b0c:	781a      	ldrb	r2, [r3, #0]
    2b0e:	2a00      	cmp	r2, #0
    2b10:	d002      	beq.n	2b18 <nwkRxDuplicateRejectionTimerHandler+0x18>
			nwkRxDuplicateRejectionTable[i].ttl--;
    2b12:	3a01      	subs	r2, #1
    2b14:	701a      	strb	r2, [r3, #0]
			restart = true;
    2b16:	002c      	movs	r4, r5
    2b18:	3306      	adds	r3, #6
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2b1a:	428b      	cmp	r3, r1
    2b1c:	d1f6      	bne.n	2b0c <nwkRxDuplicateRejectionTimerHandler+0xc>
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
		}
	}

	if (restart) {
    2b1e:	2c00      	cmp	r4, #0
    2b20:	d001      	beq.n	2b26 <nwkRxDuplicateRejectionTimerHandler+0x26>
		SYS_TimerStart(timer);
    2b22:	4b02      	ldr	r3, [pc, #8]	; (2b2c <nwkRxDuplicateRejectionTimerHandler+0x2c>)
    2b24:	4798      	blx	r3
	}
}
    2b26:	bd70      	pop	{r4, r5, r6, pc}
    2b28:	200005d8 	.word	0x200005d8
    2b2c:	00002e05 	.word	0x00002e05

00002b30 <nwkRxInit>:

/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    2b30:	b510      	push	{r4, lr}
    2b32:	4a0a      	ldr	r2, [pc, #40]	; (2b5c <nwkRxInit+0x2c>)
    2b34:	1d13      	adds	r3, r2, #4
    2b36:	3240      	adds	r2, #64	; 0x40
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    2b38:	2100      	movs	r1, #0
    2b3a:	7019      	strb	r1, [r3, #0]
    2b3c:	3306      	adds	r3, #6
/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2b3e:	4293      	cmp	r3, r2
    2b40:	d1fb      	bne.n	2b3a <nwkRxInit+0xa>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
	}

	nwkRxDuplicateRejectionTimer.interval
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    2b42:	4b07      	ldr	r3, [pc, #28]	; (2b60 <nwkRxInit+0x30>)
    2b44:	2264      	movs	r2, #100	; 0x64
    2b46:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2b48:	2200      	movs	r2, #0
    2b4a:	731a      	strb	r2, [r3, #12]
	nwkRxDuplicateRejectionTimer.handler
		= nwkRxDuplicateRejectionTimerHandler;
    2b4c:	4a05      	ldr	r2, [pc, #20]	; (2b64 <nwkRxInit+0x34>)
    2b4e:	611a      	str	r2, [r3, #16]

	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    2b50:	4905      	ldr	r1, [pc, #20]	; (2b68 <nwkRxInit+0x38>)
    2b52:	2000      	movs	r0, #0
    2b54:	4b05      	ldr	r3, [pc, #20]	; (2b6c <nwkRxInit+0x3c>)
    2b56:	4798      	blx	r3
}
    2b58:	bd10      	pop	{r4, pc}
    2b5a:	46c0      	nop			; (mov r8, r8)
    2b5c:	200005d8 	.word	0x200005d8
    2b60:	20000614 	.word	0x20000614
    2b64:	00002b01 	.word	0x00002b01
    2b68:	00002ac9 	.word	0x00002ac9
    2b6c:	000029ad 	.word	0x000029ad

00002b70 <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    2b70:	2300      	movs	r3, #0
    2b72:	4a02      	ldr	r2, [pc, #8]	; (2b7c <nwkSecurityInit+0xc>)
    2b74:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    2b76:	4a02      	ldr	r2, [pc, #8]	; (2b80 <nwkSecurityInit+0x10>)
    2b78:	6013      	str	r3, [r2, #0]
}
    2b7a:	4770      	bx	lr
    2b7c:	20000628 	.word	0x20000628
    2b80:	2000062c 	.word	0x2000062c

00002b84 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    2b84:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b86:	b083      	sub	sp, #12
    2b88:	9001      	str	r0, [sp, #4]
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2b8a:	2400      	movs	r4, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    2b8c:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2b8e:	4d10      	ldr	r5, [pc, #64]	; (2bd0 <nwkTxDelayTimerHandler+0x4c>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2b90:	2686      	movs	r6, #134	; 0x86
    2b92:	2787      	movs	r7, #135	; 0x87
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2b94:	e012      	b.n	2bbc <nwkTxDelayTimerHandler+0x38>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    2b96:	7803      	ldrb	r3, [r0, #0]
    2b98:	2b11      	cmp	r3, #17
    2b9a:	d10f      	bne.n	2bbc <nwkTxDelayTimerHandler+0x38>
			restart = true;

			if (0 == --frame->tx.timeout) {
    2b9c:	5d82      	ldrb	r2, [r0, r6]
    2b9e:	5dc3      	ldrb	r3, [r0, r7]
    2ba0:	021b      	lsls	r3, r3, #8
    2ba2:	4313      	orrs	r3, r2
    2ba4:	3b01      	subs	r3, #1
    2ba6:	b29b      	uxth	r3, r3
    2ba8:	5583      	strb	r3, [r0, r6]
    2baa:	0a19      	lsrs	r1, r3, #8
    2bac:	0002      	movs	r2, r0
    2bae:	3286      	adds	r2, #134	; 0x86
    2bb0:	7051      	strb	r1, [r2, #1]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;
    2bb2:	2401      	movs	r4, #1

			if (0 == --frame->tx.timeout) {
    2bb4:	2b00      	cmp	r3, #0
    2bb6:	d101      	bne.n	2bbc <nwkTxDelayTimerHandler+0x38>
				frame->state = NWK_TX_STATE_SEND;
    2bb8:	3313      	adds	r3, #19
    2bba:	7003      	strb	r3, [r0, #0]
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2bbc:	47a8      	blx	r5
    2bbe:	2800      	cmp	r0, #0
    2bc0:	d1e9      	bne.n	2b96 <nwkTxDelayTimerHandler+0x12>
				frame->state = NWK_TX_STATE_SEND;
			}
		}
	}

	if (restart) {
    2bc2:	2c00      	cmp	r4, #0
    2bc4:	d002      	beq.n	2bcc <nwkTxDelayTimerHandler+0x48>
		SYS_TimerStart(timer);
    2bc6:	9801      	ldr	r0, [sp, #4]
    2bc8:	4b02      	ldr	r3, [pc, #8]	; (2bd4 <nwkTxDelayTimerHandler+0x50>)
    2bca:	4798      	blx	r3
	}
}
    2bcc:	b003      	add	sp, #12
    2bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bd0:	000029dd 	.word	0x000029dd
    2bd4:	00002e05 	.word	0x00002e05

00002bd8 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    2bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bda:	b083      	sub	sp, #12
    2bdc:	9001      	str	r0, [sp, #4]
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2bde:	2400      	movs	r4, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    2be0:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2be2:	4d12      	ldr	r5, [pc, #72]	; (2c2c <nwkTxAckWaitTimerHandler+0x54>)
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2be4:	2686      	movs	r6, #134	; 0x86
    2be6:	2787      	movs	r7, #135	; 0x87
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2be8:	e015      	b.n	2c16 <nwkTxAckWaitTimerHandler+0x3e>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    2bea:	7803      	ldrb	r3, [r0, #0]
    2bec:	2b16      	cmp	r3, #22
    2bee:	d112      	bne.n	2c16 <nwkTxAckWaitTimerHandler+0x3e>
			restart = true;

			if (0 == --frame->tx.timeout) {
    2bf0:	5d82      	ldrb	r2, [r0, r6]
    2bf2:	5dc3      	ldrb	r3, [r0, r7]
    2bf4:	021b      	lsls	r3, r3, #8
    2bf6:	4313      	orrs	r3, r2
    2bf8:	3b01      	subs	r3, #1
    2bfa:	b29b      	uxth	r3, r3
    2bfc:	5583      	strb	r3, [r0, r6]
    2bfe:	0a19      	lsrs	r1, r3, #8
    2c00:	0002      	movs	r2, r0
    2c02:	3286      	adds	r2, #134	; 0x86
    2c04:	7051      	strb	r1, [r2, #1]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;
    2c06:	2401      	movs	r4, #1

			if (0 == --frame->tx.timeout) {
    2c08:	2b00      	cmp	r3, #0
    2c0a:	d104      	bne.n	2c16 <nwkTxAckWaitTimerHandler+0x3e>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    2c0c:	3317      	adds	r3, #23
    2c0e:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    2c10:	2210      	movs	r2, #16
    2c12:	336e      	adds	r3, #110	; 0x6e
    2c14:	54c2      	strb	r2, [r0, r3]
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2c16:	47a8      	blx	r5
    2c18:	2800      	cmp	r0, #0
    2c1a:	d1e6      	bne.n	2bea <nwkTxAckWaitTimerHandler+0x12>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
			}
		}
	}

	if (restart) {
    2c1c:	2c00      	cmp	r4, #0
    2c1e:	d002      	beq.n	2c26 <nwkTxAckWaitTimerHandler+0x4e>
		SYS_TimerStart(timer);
    2c20:	9801      	ldr	r0, [sp, #4]
    2c22:	4b03      	ldr	r3, [pc, #12]	; (2c30 <nwkTxAckWaitTimerHandler+0x58>)
    2c24:	4798      	blx	r3
	}
}
    2c26:	b003      	add	sp, #12
    2c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c2a:	46c0      	nop			; (mov r8, r8)
    2c2c:	000029dd 	.word	0x000029dd
    2c30:	00002e05 	.word	0x00002e05

00002c34 <nwkTxInit>:
/*************************************************************************//**
*  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
	nwkTxPhyActiveFrame = NULL;
    2c34:	2200      	movs	r2, #0
    2c36:	4b07      	ldr	r3, [pc, #28]	; (2c54 <nwkTxInit+0x20>)
    2c38:	601a      	str	r2, [r3, #0]

	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    2c3a:	4b07      	ldr	r3, [pc, #28]	; (2c58 <nwkTxInit+0x24>)
    2c3c:	2132      	movs	r1, #50	; 0x32
    2c3e:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2c40:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    2c42:	4906      	ldr	r1, [pc, #24]	; (2c5c <nwkTxInit+0x28>)
    2c44:	6119      	str	r1, [r3, #16]

	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    2c46:	4b06      	ldr	r3, [pc, #24]	; (2c60 <nwkTxInit+0x2c>)
    2c48:	210a      	movs	r1, #10
    2c4a:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2c4c:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    2c4e:	4a05      	ldr	r2, [pc, #20]	; (2c64 <nwkTxInit+0x30>)
    2c50:	611a      	str	r2, [r3, #16]
}
    2c52:	4770      	bx	lr
    2c54:	20000644 	.word	0x20000644
    2c58:	20000630 	.word	0x20000630
    2c5c:	00002bd9 	.word	0x00002bd9
    2c60:	20000648 	.word	0x20000648
    2c64:	00002b85 	.word	0x00002b85

00002c68 <nwkTxAckReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    2c68:	b570      	push	{r4, r5, r6, lr}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    2c6a:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2c6c:	2300      	movs	r3, #0
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    2c6e:	2a03      	cmp	r2, #3
    2c70:	d115      	bne.n	2c9e <nwkTxAckReceived+0x36>
    2c72:	e00d      	b.n	2c90 <nwkTxAckReceived+0x28>
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    2c74:	7803      	ldrb	r3, [r0, #0]
    2c76:	2b16      	cmp	r3, #22
    2c78:	d10d      	bne.n	2c96 <nwkTxAckReceived+0x2e>
    2c7a:	7b02      	ldrb	r2, [r0, #12]
    2c7c:	786b      	ldrb	r3, [r5, #1]
    2c7e:	429a      	cmp	r2, r3
    2c80:	d109      	bne.n	2c96 <nwkTxAckReceived+0x2e>
				frame->header.nwkSeq == command->seq) {
			frame->state = NWK_TX_STATE_CONFIRM;
    2c82:	2317      	movs	r3, #23
    2c84:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    2c86:	78aa      	ldrb	r2, [r5, #2]
    2c88:	3371      	adds	r3, #113	; 0x71
    2c8a:	54c2      	strb	r2, [r0, r3]
			return true;
    2c8c:	3b87      	subs	r3, #135	; 0x87
    2c8e:	e006      	b.n	2c9e <nwkTxAckReceived+0x36>

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    2c90:	6885      	ldr	r5, [r0, #8]
    2c92:	2000      	movs	r0, #0

	if (sizeof(NwkCommandAck_t) != ind->size) {
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    2c94:	4c03      	ldr	r4, [pc, #12]	; (2ca4 <nwkTxAckReceived+0x3c>)
    2c96:	47a0      	blx	r4
    2c98:	2800      	cmp	r0, #0
    2c9a:	d1eb      	bne.n	2c74 <nwkTxAckReceived+0xc>
			frame->tx.control = command->control;
			return true;
		}
	}

	return false;
    2c9c:	2300      	movs	r3, #0
}
    2c9e:	0018      	movs	r0, r3
    2ca0:	bd70      	pop	{r4, r5, r6, pc}
    2ca2:	46c0      	nop			; (mov r8, r8)
    2ca4:	000029dd 	.word	0x000029dd

00002ca8 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    2ca8:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    2caa:	4b0e      	ldr	r3, [pc, #56]	; (2ce4 <PHY_Init+0x3c>)
    2cac:	4798      	blx	r3
	PhyReset();
    2cae:	4b0e      	ldr	r3, [pc, #56]	; (2ce8 <PHY_Init+0x40>)
    2cb0:	4798      	blx	r3
	phyRxState = false;
    2cb2:	2200      	movs	r2, #0
    2cb4:	4b0d      	ldr	r3, [pc, #52]	; (2cec <PHY_Init+0x44>)
    2cb6:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    2cb8:	3201      	adds	r2, #1
    2cba:	4b0d      	ldr	r3, [pc, #52]	; (2cf0 <PHY_Init+0x48>)
    2cbc:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2cbe:	4e0d      	ldr	r6, [pc, #52]	; (2cf4 <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2cc0:	4d0d      	ldr	r5, [pc, #52]	; (2cf8 <PHY_Init+0x50>)
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2cc2:	241f      	movs	r4, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2cc4:	2108      	movs	r1, #8
    2cc6:	2002      	movs	r0, #2
    2cc8:	47b0      	blx	r6
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2cca:	2001      	movs	r0, #1
    2ccc:	47a8      	blx	r5
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2cce:	4020      	ands	r0, r4
    2cd0:	2808      	cmp	r0, #8
    2cd2:	d1f7      	bne.n	2cc4 <PHY_Init+0x1c>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2cd4:	212e      	movs	r1, #46	; 0x2e
    2cd6:	3804      	subs	r0, #4
    2cd8:	4c06      	ldr	r4, [pc, #24]	; (2cf4 <PHY_Init+0x4c>)
    2cda:	47a0      	blx	r4
    2cdc:	21a0      	movs	r1, #160	; 0xa0
    2cde:	200c      	movs	r0, #12
    2ce0:	47a0      	blx	r4
			(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
			(1 << IRQ_MASK_MODE));

	phyWriteRegister(TRX_CTRL_2_REG,
			(1 << RX_SAFE_MODE) | (1 << OQPSK_SCRAM_EN));
}
    2ce2:	bd70      	pop	{r4, r5, r6, pc}
    2ce4:	00002fc9 	.word	0x00002fc9
    2ce8:	000030e5 	.word	0x000030e5
    2cec:	2000065d 	.word	0x2000065d
    2cf0:	2000065c 	.word	0x2000065c
    2cf4:	00003211 	.word	0x00003211
    2cf8:	00003115 	.word	0x00003115

00002cfc <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    2cfc:	b510      	push	{r4, lr}
	SYS_TimerInit();
    2cfe:	4b04      	ldr	r3, [pc, #16]	; (2d10 <SYS_Init+0x14>)
    2d00:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    2d02:	4b04      	ldr	r3, [pc, #16]	; (2d14 <SYS_Init+0x18>)
    2d04:	4798      	blx	r3
#endif
	PHY_Init();
    2d06:	4b04      	ldr	r3, [pc, #16]	; (2d18 <SYS_Init+0x1c>)
    2d08:	4798      	blx	r3
	NWK_Init();
    2d0a:	4b04      	ldr	r3, [pc, #16]	; (2d1c <SYS_Init+0x20>)
    2d0c:	4798      	blx	r3
}
    2d0e:	bd10      	pop	{r4, pc}
    2d10:	00002d9d 	.word	0x00002d9d
    2d14:	00002fa9 	.word	0x00002fa9
    2d18:	00002ca9 	.word	0x00002ca9
    2d1c:	00002959 	.word	0x00002959

00002d20 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    2d20:	b530      	push	{r4, r5, lr}
	if (timers) {
    2d22:	4b15      	ldr	r3, [pc, #84]	; (2d78 <placeTimer+0x58>)
    2d24:	681d      	ldr	r5, [r3, #0]
    2d26:	2d00      	cmp	r5, #0
    2d28:	d01e      	beq.n	2d68 <placeTimer+0x48>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    2d2a:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    2d2c:	6869      	ldr	r1, [r5, #4]
    2d2e:	428a      	cmp	r2, r1
    2d30:	d305      	bcc.n	2d3e <placeTimer+0x1e>
    2d32:	002c      	movs	r4, r5
    2d34:	e009      	b.n	2d4a <placeTimer+0x2a>
    2d36:	6859      	ldr	r1, [r3, #4]
    2d38:	4291      	cmp	r1, r2
    2d3a:	d905      	bls.n	2d48 <placeTimer+0x28>
    2d3c:	e001      	b.n	2d42 <placeTimer+0x22>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2d3e:	002b      	movs	r3, r5
/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
    2d40:	2400      	movs	r4, #0
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
				t->timeout -= timeout;
    2d42:	1a89      	subs	r1, r1, r2
    2d44:	6059      	str	r1, [r3, #4]
				break;
    2d46:	e004      	b.n	2d52 <placeTimer+0x32>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2d48:	001c      	movs	r4, r3
			if (timeout < t->timeout) {
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    2d4a:	1a52      	subs	r2, r2, r1
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2d4c:	6823      	ldr	r3, [r4, #0]
    2d4e:	2b00      	cmp	r3, #0
    2d50:	d1f1      	bne.n	2d36 <placeTimer+0x16>
			}

			prev = t;
		}

		timer->timeout = timeout;
    2d52:	6042      	str	r2, [r0, #4]

		if (prev) {
    2d54:	2c00      	cmp	r4, #0
    2d56:	d003      	beq.n	2d60 <placeTimer+0x40>
			timer->next = prev->next;
    2d58:	6823      	ldr	r3, [r4, #0]
    2d5a:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    2d5c:	6020      	str	r0, [r4, #0]
    2d5e:	e009      	b.n	2d74 <placeTimer+0x54>
		} else {
			timer->next = timers;
    2d60:	6005      	str	r5, [r0, #0]
			timers = timer;
    2d62:	4b05      	ldr	r3, [pc, #20]	; (2d78 <placeTimer+0x58>)
    2d64:	6018      	str	r0, [r3, #0]
    2d66:	e005      	b.n	2d74 <placeTimer+0x54>
		}
	} else {
		timer->next = NULL;
    2d68:	2300      	movs	r3, #0
    2d6a:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    2d6c:	6883      	ldr	r3, [r0, #8]
    2d6e:	6043      	str	r3, [r0, #4]
		timers = timer;
    2d70:	4b01      	ldr	r3, [pc, #4]	; (2d78 <placeTimer+0x58>)
    2d72:	6018      	str	r0, [r3, #0]
	}
}
    2d74:	bd30      	pop	{r4, r5, pc}
    2d76:	46c0      	nop			; (mov r8, r8)
    2d78:	20000660 	.word	0x20000660

00002d7c <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    2d7c:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    2d7e:	4a04      	ldr	r2, [pc, #16]	; (2d90 <SYS_HwExpiry_Cb+0x14>)
    2d80:	7813      	ldrb	r3, [r2, #0]
    2d82:	3301      	adds	r3, #1
    2d84:	b2db      	uxtb	r3, r3
    2d86:	7013      	strb	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2d88:	4802      	ldr	r0, [pc, #8]	; (2d94 <SYS_HwExpiry_Cb+0x18>)
    2d8a:	4b03      	ldr	r3, [pc, #12]	; (2d98 <SYS_HwExpiry_Cb+0x1c>)
    2d8c:	4798      	blx	r3
}
    2d8e:	bd10      	pop	{r4, pc}
    2d90:	20000844 	.word	0x20000844
    2d94:	00002710 	.word	0x00002710
    2d98:	000033cd 	.word	0x000033cd

00002d9c <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    2d9c:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    2d9e:	2400      	movs	r4, #0
    2da0:	4b06      	ldr	r3, [pc, #24]	; (2dbc <SYS_TimerInit+0x20>)
    2da2:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    2da4:	4806      	ldr	r0, [pc, #24]	; (2dc0 <SYS_TimerInit+0x24>)
    2da6:	4b07      	ldr	r3, [pc, #28]	; (2dc4 <SYS_TimerInit+0x28>)
    2da8:	4798      	blx	r3
	common_tc_init();
    2daa:	4b07      	ldr	r3, [pc, #28]	; (2dc8 <SYS_TimerInit+0x2c>)
    2dac:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2dae:	4807      	ldr	r0, [pc, #28]	; (2dcc <SYS_TimerInit+0x30>)
    2db0:	4b07      	ldr	r3, [pc, #28]	; (2dd0 <SYS_TimerInit+0x34>)
    2db2:	4798      	blx	r3
	timers = NULL;
    2db4:	4b07      	ldr	r3, [pc, #28]	; (2dd4 <SYS_TimerInit+0x38>)
    2db6:	601c      	str	r4, [r3, #0]
}
    2db8:	bd10      	pop	{r4, pc}
    2dba:	46c0      	nop			; (mov r8, r8)
    2dbc:	20000844 	.word	0x20000844
    2dc0:	00002d7d 	.word	0x00002d7d
    2dc4:	000034bd 	.word	0x000034bd
    2dc8:	00003439 	.word	0x00003439
    2dcc:	00002710 	.word	0x00002710
    2dd0:	000033cd 	.word	0x000033cd
    2dd4:	20000660 	.word	0x20000660

00002dd8 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2dd8:	4b09      	ldr	r3, [pc, #36]	; (2e00 <SYS_TimerStarted+0x28>)
    2dda:	681b      	ldr	r3, [r3, #0]
    2ddc:	2b00      	cmp	r3, #0
    2dde:	d009      	beq.n	2df4 <SYS_TimerStarted+0x1c>
		if (t == timer) {
    2de0:	4283      	cmp	r3, r0
    2de2:	d102      	bne.n	2dea <SYS_TimerStarted+0x12>
    2de4:	e008      	b.n	2df8 <SYS_TimerStarted+0x20>
    2de6:	4298      	cmp	r0, r3
    2de8:	d008      	beq.n	2dfc <SYS_TimerStarted+0x24>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2dea:	681b      	ldr	r3, [r3, #0]
    2dec:	2b00      	cmp	r3, #0
    2dee:	d1fa      	bne.n	2de6 <SYS_TimerStarted+0xe>
		if (t == timer) {
			return true;
		}
	}
	return false;
    2df0:	2000      	movs	r0, #0
    2df2:	e004      	b.n	2dfe <SYS_TimerStarted+0x26>
    2df4:	2000      	movs	r0, #0
    2df6:	e002      	b.n	2dfe <SYS_TimerStarted+0x26>
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    2df8:	2001      	movs	r0, #1
    2dfa:	e000      	b.n	2dfe <SYS_TimerStarted+0x26>
    2dfc:	2001      	movs	r0, #1
		}
	}
	return false;
}
    2dfe:	4770      	bx	lr
    2e00:	20000660 	.word	0x20000660

00002e04 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    2e04:	b510      	push	{r4, lr}
    2e06:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    2e08:	4b03      	ldr	r3, [pc, #12]	; (2e18 <SYS_TimerStart+0x14>)
    2e0a:	4798      	blx	r3
    2e0c:	2800      	cmp	r0, #0
    2e0e:	d102      	bne.n	2e16 <SYS_TimerStart+0x12>
		placeTimer(timer);
    2e10:	0020      	movs	r0, r4
    2e12:	4b02      	ldr	r3, [pc, #8]	; (2e1c <SYS_TimerStart+0x18>)
    2e14:	4798      	blx	r3
	}
}
    2e16:	bd10      	pop	{r4, pc}
    2e18:	00002dd9 	.word	0x00002dd9
    2e1c:	00002d21 	.word	0x00002d21

00002e20 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    2e20:	b510      	push	{r4, lr}
	tmr_cca_callback();
    2e22:	4b01      	ldr	r3, [pc, #4]	; (2e28 <tc_cca_callback+0x8>)
    2e24:	4798      	blx	r3
}
    2e26:	bd10      	pop	{r4, pc}
    2e28:	000034a1 	.word	0x000034a1

00002e2c <tc_ovf_callback>:
{
	cpu_irq_restore((uint32_t)flags);
}

static void tc_ovf_callback(struct tc_module *const module_instance)
{
    2e2c:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    2e2e:	4b01      	ldr	r3, [pc, #4]	; (2e34 <tc_ovf_callback+0x8>)
    2e30:	4798      	blx	r3
}
    2e32:	bd10      	pop	{r4, pc}
    2e34:	00003459 	.word	0x00003459

00002e38 <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
    2e38:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    2e3a:	4802      	ldr	r0, [pc, #8]	; (2e44 <tmr_read_count+0xc>)
    2e3c:	4b02      	ldr	r3, [pc, #8]	; (2e48 <tmr_read_count+0x10>)
    2e3e:	4798      	blx	r3
    2e40:	b280      	uxth	r0, r0
}
    2e42:	bd10      	pop	{r4, pc}
    2e44:	2000087c 	.word	0x2000087c
    2e48:	00002709 	.word	0x00002709

00002e4c <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    2e4c:	4b03      	ldr	r3, [pc, #12]	; (2e5c <tmr_disable_cc_interrupt+0x10>)
    2e4e:	2110      	movs	r1, #16
    2e50:	681a      	ldr	r2, [r3, #0]
    2e52:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    2e54:	7e5a      	ldrb	r2, [r3, #25]
    2e56:	438a      	bics	r2, r1
    2e58:	765a      	strb	r2, [r3, #25]
/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    2e5a:	4770      	bx	lr
    2e5c:	2000087c 	.word	0x2000087c

00002e60 <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
    2e60:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2e62:	4c0a      	ldr	r4, [pc, #40]	; (2e8c <tmr_enable_cc_interrupt+0x2c>)
    2e64:	6820      	ldr	r0, [r4, #0]
    2e66:	4b0a      	ldr	r3, [pc, #40]	; (2e90 <tmr_enable_cc_interrupt+0x30>)
    2e68:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2e6a:	4b0a      	ldr	r3, [pc, #40]	; (2e94 <tmr_enable_cc_interrupt+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2e6c:	5c1b      	ldrb	r3, [r3, r0]
    2e6e:	221f      	movs	r2, #31
    2e70:	401a      	ands	r2, r3
    2e72:	2301      	movs	r3, #1
    2e74:	4093      	lsls	r3, r2
    2e76:	4a08      	ldr	r2, [pc, #32]	; (2e98 <tmr_enable_cc_interrupt+0x38>)
    2e78:	6013      	str	r3, [r2, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2e7a:	7e62      	ldrb	r2, [r4, #25]
    2e7c:	2310      	movs	r3, #16
    2e7e:	4313      	orrs	r3, r2
    2e80:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2e82:	6823      	ldr	r3, [r4, #0]
    2e84:	2210      	movs	r2, #16
    2e86:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    2e88:	bd10      	pop	{r4, pc}
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	2000087c 	.word	0x2000087c
    2e90:	00002455 	.word	0x00002455
    2e94:	00008b10 	.word	0x00008b10
    2e98:	e000e100 	.word	0xe000e100

00002e9c <tmr_write_cmpreg>:
}

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
    2e9c:	b510      	push	{r4, lr}
    2e9e:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    2ea0:	2100      	movs	r1, #0
    2ea2:	4802      	ldr	r0, [pc, #8]	; (2eac <tmr_write_cmpreg+0x10>)
    2ea4:	4b02      	ldr	r3, [pc, #8]	; (2eb0 <tmr_write_cmpreg+0x14>)
    2ea6:	4798      	blx	r3
			(uint32_t)compare_value);
}
    2ea8:	bd10      	pop	{r4, pc}
    2eaa:	46c0      	nop			; (mov r8, r8)
    2eac:	2000087c 	.word	0x2000087c
    2eb0:	00002739 	.word	0x00002739

00002eb4 <tmr_init>:
}

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    2eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2eb6:	464f      	mov	r7, r9
    2eb8:	4646      	mov	r6, r8
    2eba:	b4c0      	push	{r6, r7}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    2ebc:	4a2d      	ldr	r2, [pc, #180]	; (2f74 <tmr_init+0xc0>)
    2ebe:	2300      	movs	r3, #0
    2ec0:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    2ec2:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    2ec4:	2100      	movs	r1, #0
    2ec6:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    2ec8:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2eca:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2ecc:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2ece:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2ed0:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2ed2:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2ed4:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    2ed6:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2ed8:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2eda:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2edc:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2ede:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2ee0:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2ee2:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    2ee4:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2ee6:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    2ee8:	3b01      	subs	r3, #1
    2eea:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    2eec:	4c22      	ldr	r4, [pc, #136]	; (2f78 <tmr_init+0xc4>)
    2eee:	4923      	ldr	r1, [pc, #140]	; (2f7c <tmr_init+0xc8>)
    2ef0:	0020      	movs	r0, r4
    2ef2:	4b23      	ldr	r3, [pc, #140]	; (2f80 <tmr_init+0xcc>)
    2ef4:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    2ef6:	2200      	movs	r2, #0
    2ef8:	4922      	ldr	r1, [pc, #136]	; (2f84 <tmr_init+0xd0>)
    2efa:	0020      	movs	r0, r4
    2efc:	4d22      	ldr	r5, [pc, #136]	; (2f88 <tmr_init+0xd4>)
    2efe:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    2f00:	2202      	movs	r2, #2
    2f02:	4922      	ldr	r1, [pc, #136]	; (2f8c <tmr_init+0xd8>)
    2f04:	0020      	movs	r0, r4
    2f06:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2f08:	6820      	ldr	r0, [r4, #0]
    2f0a:	4b21      	ldr	r3, [pc, #132]	; (2f90 <tmr_init+0xdc>)
    2f0c:	4699      	mov	r9, r3
    2f0e:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2f10:	4b20      	ldr	r3, [pc, #128]	; (2f94 <tmr_init+0xe0>)
    2f12:	4698      	mov	r8, r3
    2f14:	5c1b      	ldrb	r3, [r3, r0]
    2f16:	271f      	movs	r7, #31
    2f18:	403b      	ands	r3, r7
    2f1a:	2501      	movs	r5, #1
    2f1c:	002a      	movs	r2, r5
    2f1e:	409a      	lsls	r2, r3
    2f20:	4e1d      	ldr	r6, [pc, #116]	; (2f98 <tmr_init+0xe4>)
    2f22:	6032      	str	r2, [r6, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    2f24:	7e62      	ldrb	r2, [r4, #25]
    2f26:	2301      	movs	r3, #1
    2f28:	4313      	orrs	r3, r2
    2f2a:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    2f2c:	6823      	ldr	r3, [r4, #0]
    2f2e:	735d      	strb	r5, [r3, #13]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2f30:	0018      	movs	r0, r3
    2f32:	47c8      	blx	r9
    2f34:	4643      	mov	r3, r8
    2f36:	5c1b      	ldrb	r3, [r3, r0]
    2f38:	403b      	ands	r3, r7
    2f3a:	409d      	lsls	r5, r3
    2f3c:	6035      	str	r5, [r6, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2f3e:	7e62      	ldrb	r2, [r4, #25]
    2f40:	2310      	movs	r3, #16
    2f42:	4313      	orrs	r3, r2
    2f44:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2f46:	6822      	ldr	r2, [r4, #0]
    2f48:	2310      	movs	r3, #16
    2f4a:	7353      	strb	r3, [r2, #13]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    2f4c:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2f4e:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    2f50:	438b      	bics	r3, r1
    2f52:	d1fc      	bne.n	2f4e <tmr_init+0x9a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2f54:	8811      	ldrh	r1, [r2, #0]
    2f56:	3302      	adds	r3, #2
    2f58:	430b      	orrs	r3, r1
    2f5a:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    2f5c:	2000      	movs	r0, #0
    2f5e:	4b0f      	ldr	r3, [pc, #60]	; (2f9c <tmr_init+0xe8>)
    2f60:	4798      	blx	r3
	#endif
	return timer_multiplier;
    2f62:	490f      	ldr	r1, [pc, #60]	; (2fa0 <tmr_init+0xec>)
    2f64:	4b0f      	ldr	r3, [pc, #60]	; (2fa4 <tmr_init+0xf0>)
    2f66:	4798      	blx	r3
    2f68:	b2c0      	uxtb	r0, r0
}
    2f6a:	bc0c      	pop	{r2, r3}
    2f6c:	4690      	mov	r8, r2
    2f6e:	4699      	mov	r9, r3
    2f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f72:	46c0      	nop			; (mov r8, r8)
    2f74:	20000848 	.word	0x20000848
    2f78:	2000087c 	.word	0x2000087c
    2f7c:	42002c00 	.word	0x42002c00
    2f80:	0000248d 	.word	0x0000248d
    2f84:	00002e2d 	.word	0x00002e2d
    2f88:	00002399 	.word	0x00002399
    2f8c:	00002e21 	.word	0x00002e21
    2f90:	00002455 	.word	0x00002455
    2f94:	00008b10 	.word	0x00008b10
    2f98:	e000e100 	.word	0xe000e100
    2f9c:	00002129 	.word	0x00002129
    2fa0:	000f4240 	.word	0x000f4240
    2fa4:	00005e59 	.word	0x00005e59

00002fa8 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    2fa8:	4770      	bx	lr
    2faa:	46c0      	nop			; (mov r8, r8)

00002fac <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    2fac:	b510      	push	{r4, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    2fae:	2201      	movs	r2, #1
    2fb0:	4b03      	ldr	r3, [pc, #12]	; (2fc0 <AT86RFX_ISR+0x14>)
    2fb2:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    2fb4:	4b03      	ldr	r3, [pc, #12]	; (2fc4 <AT86RFX_ISR+0x18>)
    2fb6:	681b      	ldr	r3, [r3, #0]
    2fb8:	2b00      	cmp	r3, #0
    2fba:	d000      	beq.n	2fbe <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    2fbc:	4798      	blx	r3
	}
}
    2fbe:	bd10      	pop	{r4, pc}
    2fc0:	40001800 	.word	0x40001800
    2fc4:	20000664 	.word	0x20000664

00002fc8 <trx_spi_init>:

void trx_spi_init(void)
{
    2fc8:	b530      	push	{r4, r5, lr}
    2fca:	b085      	sub	sp, #20
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    2fcc:	4a34      	ldr	r2, [pc, #208]	; (30a0 <trx_spi_init+0xd8>)
    2fce:	2300      	movs	r3, #0
    2fd0:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    2fd2:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    2fd4:	213f      	movs	r1, #63	; 0x3f
    2fd6:	7011      	strb	r1, [r2, #0]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    2fd8:	4c32      	ldr	r4, [pc, #200]	; (30a4 <trx_spi_init+0xdc>)
    2fda:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    2fdc:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    2fde:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    2fe0:	2201      	movs	r2, #1
    2fe2:	4669      	mov	r1, sp
    2fe4:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    2fe6:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2fe8:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2fea:	203f      	movs	r0, #63	; 0x3f
    2fec:	4b2e      	ldr	r3, [pc, #184]	; (30a8 <trx_spi_init+0xe0>)
    2fee:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2ff0:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2ff2:	09da      	lsrs	r2, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2ff4:	2100      	movs	r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2ff6:	2a00      	cmp	r2, #0
    2ff8:	d104      	bne.n	3004 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    2ffa:	0959      	lsrs	r1, r3, #5
    2ffc:	01c9      	lsls	r1, r1, #7
    2ffe:	4a2b      	ldr	r2, [pc, #172]	; (30ac <trx_spi_init+0xe4>)
    3000:	4694      	mov	ip, r2
    3002:	4461      	add	r1, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3004:	221f      	movs	r2, #31
    3006:	4013      	ands	r3, r2
    3008:	3a1e      	subs	r2, #30
    300a:	0010      	movs	r0, r2
    300c:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    300e:	6188      	str	r0, [r1, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    3010:	4c27      	ldr	r4, [pc, #156]	; (30b0 <trx_spi_init+0xe8>)
    3012:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3014:	2300      	movs	r3, #0
    3016:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3018:	60a3      	str	r3, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    301a:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    301c:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    301e:	74a2      	strb	r2, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    3020:	74e2      	strb	r2, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    3022:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    3024:	3223      	adds	r2, #35	; 0x23
    3026:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3028:	0020      	movs	r0, r4
    302a:	3018      	adds	r0, #24
    302c:	3a18      	subs	r2, #24
    302e:	2100      	movs	r1, #0
    3030:	4b20      	ldr	r3, [pc, #128]	; (30b4 <trx_spi_init+0xec>)
    3032:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    3034:	2380      	movs	r3, #128	; 0x80
    3036:	025b      	lsls	r3, r3, #9
    3038:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    303a:	4b1f      	ldr	r3, [pc, #124]	; (30b8 <trx_spi_init+0xf0>)
    303c:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    303e:	4b1f      	ldr	r3, [pc, #124]	; (30bc <trx_spi_init+0xf4>)
    3040:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    3042:	2301      	movs	r3, #1
    3044:	425b      	negs	r3, r3
    3046:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    3048:	4b1d      	ldr	r3, [pc, #116]	; (30c0 <trx_spi_init+0xf8>)
    304a:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    304c:	4b1d      	ldr	r3, [pc, #116]	; (30c4 <trx_spi_init+0xfc>)
    304e:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    3050:	4d1d      	ldr	r5, [pc, #116]	; (30c8 <trx_spi_init+0x100>)
    3052:	0022      	movs	r2, r4
    3054:	491d      	ldr	r1, [pc, #116]	; (30cc <trx_spi_init+0x104>)
    3056:	0028      	movs	r0, r5
    3058:	4b1d      	ldr	r3, [pc, #116]	; (30d0 <trx_spi_init+0x108>)
    305a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    305c:	682a      	ldr	r2, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    305e:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    3060:	2b00      	cmp	r3, #0
    3062:	d1fc      	bne.n	305e <trx_spi_init+0x96>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3064:	6813      	ldr	r3, [r2, #0]
    3066:	2502      	movs	r5, #2
    3068:	432b      	orrs	r3, r5
    306a:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    306c:	ac01      	add	r4, sp, #4
    306e:	0020      	movs	r0, r4
    3070:	4b18      	ldr	r3, [pc, #96]	; (30d4 <trx_spi_init+0x10c>)
    3072:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    3074:	2320      	movs	r3, #32
    3076:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    3078:	2380      	movs	r3, #128	; 0x80
    307a:	039b      	lsls	r3, r3, #14
    307c:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    307e:	7225      	strb	r5, [r4, #8]
	#if (SAML21)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    3080:	2301      	movs	r3, #1
    3082:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    3084:	2200      	movs	r2, #0
    3086:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    3088:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    308a:	0021      	movs	r1, r4
    308c:	2000      	movs	r0, #0
    308e:	4b12      	ldr	r3, [pc, #72]	; (30d8 <trx_spi_init+0x110>)
    3090:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    3092:	2200      	movs	r2, #0
    3094:	2100      	movs	r1, #0
    3096:	4811      	ldr	r0, [pc, #68]	; (30dc <trx_spi_init+0x114>)
    3098:	4b11      	ldr	r3, [pc, #68]	; (30e0 <trx_spi_init+0x118>)
    309a:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    309c:	b005      	add	sp, #20
    309e:	bd30      	pop	{r4, r5, pc}
    30a0:	2000089c 	.word	0x2000089c
    30a4:	200008a0 	.word	0x200008a0
    30a8:	00000bf1 	.word	0x00000bf1
    30ac:	41004400 	.word	0x41004400
    30b0:	200008a4 	.word	0x200008a4
    30b4:	00003527 	.word	0x00003527
    30b8:	004c4b40 	.word	0x004c4b40
    30bc:	00530005 	.word	0x00530005
    30c0:	003e0005 	.word	0x003e0005
    30c4:	00520005 	.word	0x00520005
    30c8:	200008dc 	.word	0x200008dc
    30cc:	42001800 	.word	0x42001800
    30d0:	000010e1 	.word	0x000010e1
    30d4:	00000b69 	.word	0x00000b69
    30d8:	00000b7d 	.word	0x00000b7d
    30dc:	00002fad 	.word	0x00002fad
    30e0:	00000a51 	.word	0x00000a51

000030e4 <PhyReset>:

void PhyReset(void)
{
    30e4:	b570      	push	{r4, r5, r6, lr}
    30e6:	4b09      	ldr	r3, [pc, #36]	; (310c <PhyReset+0x28>)
    30e8:	001c      	movs	r4, r3
    30ea:	3480      	adds	r4, #128	; 0x80
    30ec:	2580      	movs	r5, #128	; 0x80
    30ee:	022d      	lsls	r5, r5, #8
    30f0:	61a5      	str	r5, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    30f2:	2280      	movs	r2, #128	; 0x80
    30f4:	0352      	lsls	r2, r2, #13
    30f6:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    30f8:	20a5      	movs	r0, #165	; 0xa5
    30fa:	0040      	lsls	r0, r0, #1
    30fc:	4e04      	ldr	r6, [pc, #16]	; (3110 <PhyReset+0x2c>)
    30fe:	47b0      	blx	r6
    3100:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    3102:	200a      	movs	r0, #10
    3104:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3106:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    3108:	bd70      	pop	{r4, r5, r6, pc}
    310a:	46c0      	nop			; (mov r8, r8)
    310c:	41004400 	.word	0x41004400
    3110:	000008e5 	.word	0x000008e5

00003114 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    3114:	b570      	push	{r4, r5, r6, lr}
    3116:	b082      	sub	sp, #8
    3118:	0005      	movs	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    311a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    311e:	425a      	negs	r2, r3
    3120:	4153      	adcs	r3, r2
    3122:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3124:	b672      	cpsid	i
    3126:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    312a:	2200      	movs	r2, #0
    312c:	4b33      	ldr	r3, [pc, #204]	; (31fc <trx_reg_read+0xe8>)
    312e:	701a      	strb	r2, [r3, #0]
	return flags;
    3130:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3132:	4e33      	ldr	r6, [pc, #204]	; (3200 <trx_reg_read+0xec>)
    3134:	3201      	adds	r2, #1
    3136:	4933      	ldr	r1, [pc, #204]	; (3204 <trx_reg_read+0xf0>)
    3138:	0030      	movs	r0, r6
    313a:	4b33      	ldr	r3, [pc, #204]	; (3208 <trx_reg_read+0xf4>)
    313c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    313e:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3140:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3142:	7e1a      	ldrb	r2, [r3, #24]
    3144:	420a      	tst	r2, r1
    3146:	d0fc      	beq.n	3142 <trx_reg_read+0x2e>
    3148:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    314a:	07d2      	lsls	r2, r2, #31
    314c:	d502      	bpl.n	3154 <trx_reg_read+0x40>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    314e:	2280      	movs	r2, #128	; 0x80
    3150:	4315      	orrs	r5, r2
    3152:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3154:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3156:	7e1a      	ldrb	r2, [r3, #24]
    3158:	420a      	tst	r2, r1
    315a:	d0fc      	beq.n	3156 <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    315c:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    315e:	7e1a      	ldrb	r2, [r3, #24]
    3160:	420a      	tst	r2, r1
    3162:	d0fc      	beq.n	315e <trx_reg_read+0x4a>
    3164:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3166:	0752      	lsls	r2, r2, #29
    3168:	d512      	bpl.n	3190 <trx_reg_read+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    316a:	8b5a      	ldrh	r2, [r3, #26]
    316c:	0752      	lsls	r2, r2, #29
    316e:	d501      	bpl.n	3174 <trx_reg_read+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3170:	2204      	movs	r2, #4
    3172:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3174:	4a22      	ldr	r2, [pc, #136]	; (3200 <trx_reg_read+0xec>)
    3176:	7992      	ldrb	r2, [r2, #6]
    3178:	2a01      	cmp	r2, #1
    317a:	d105      	bne.n	3188 <trx_reg_read+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    317c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    317e:	05d2      	lsls	r2, r2, #23
    3180:	0dd2      	lsrs	r2, r2, #23
    3182:	4922      	ldr	r1, [pc, #136]	; (320c <trx_reg_read+0xf8>)
    3184:	800a      	strh	r2, [r1, #0]
    3186:	e003      	b.n	3190 <trx_reg_read+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    318a:	b2d2      	uxtb	r2, r2
    318c:	491f      	ldr	r1, [pc, #124]	; (320c <trx_reg_read+0xf8>)
    318e:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    3190:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3192:	7e1a      	ldrb	r2, [r3, #24]
    3194:	420a      	tst	r2, r1
    3196:	d0fc      	beq.n	3192 <trx_reg_read+0x7e>
    3198:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    319a:	07d2      	lsls	r2, r2, #31
    319c:	d501      	bpl.n	31a2 <trx_reg_read+0x8e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    319e:	2200      	movs	r2, #0
    31a0:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    31a2:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    31a4:	7e1a      	ldrb	r2, [r3, #24]
    31a6:	420a      	tst	r2, r1
    31a8:	d0fc      	beq.n	31a4 <trx_reg_read+0x90>
	}
	while (!spi_is_ready_to_read(&master)) {
    31aa:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    31ac:	7e1a      	ldrb	r2, [r3, #24]
    31ae:	420a      	tst	r2, r1
    31b0:	d0fc      	beq.n	31ac <trx_reg_read+0x98>
    31b2:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMR21 || SAML21
	uint16_t register_value = 0;
    31b4:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    31b6:	0752      	lsls	r2, r2, #29
    31b8:	d50e      	bpl.n	31d8 <trx_reg_read+0xc4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    31ba:	8b5a      	ldrh	r2, [r3, #26]
    31bc:	0752      	lsls	r2, r2, #29
    31be:	d501      	bpl.n	31c4 <trx_reg_read+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    31c0:	2204      	movs	r2, #4
    31c2:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    31c4:	4a0e      	ldr	r2, [pc, #56]	; (3200 <trx_reg_read+0xec>)
    31c6:	7992      	ldrb	r2, [r2, #6]
    31c8:	2a01      	cmp	r2, #1
    31ca:	d103      	bne.n	31d4 <trx_reg_read+0xc0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    31cc:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    31ce:	05ed      	lsls	r5, r5, #23
    31d0:	0ded      	lsrs	r5, r5, #23
    31d2:	e001      	b.n	31d8 <trx_reg_read+0xc4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    31d4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    31d6:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    31d8:	2200      	movs	r2, #0
    31da:	490a      	ldr	r1, [pc, #40]	; (3204 <trx_reg_read+0xf0>)
    31dc:	4808      	ldr	r0, [pc, #32]	; (3200 <trx_reg_read+0xec>)
    31de:	4b0a      	ldr	r3, [pc, #40]	; (3208 <trx_reg_read+0xf4>)
    31e0:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    31e2:	23ff      	movs	r3, #255	; 0xff
    31e4:	4223      	tst	r3, r4
    31e6:	d005      	beq.n	31f4 <trx_reg_read+0xe0>
		cpu_irq_enable();
    31e8:	2201      	movs	r2, #1
    31ea:	4b04      	ldr	r3, [pc, #16]	; (31fc <trx_reg_read+0xe8>)
    31ec:	701a      	strb	r2, [r3, #0]
    31ee:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    31f2:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    31f4:	b2e8      	uxtb	r0, r5
}
    31f6:	b002      	add	sp, #8
    31f8:	bd70      	pop	{r4, r5, r6, pc}
    31fa:	46c0      	nop			; (mov r8, r8)
    31fc:	20000008 	.word	0x20000008
    3200:	200008dc 	.word	0x200008dc
    3204:	200008a0 	.word	0x200008a0
    3208:	0000138d 	.word	0x0000138d
    320c:	20000898 	.word	0x20000898

00003210 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    3210:	b5f0      	push	{r4, r5, r6, r7, lr}
    3212:	b083      	sub	sp, #12
    3214:	0006      	movs	r6, r0
    3216:	000c      	movs	r4, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3218:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    321c:	425a      	negs	r2, r3
    321e:	4153      	adcs	r3, r2
    3220:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3222:	b672      	cpsid	i
    3224:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3228:	2200      	movs	r2, #0
    322a:	4b34      	ldr	r3, [pc, #208]	; (32fc <trx_reg_write+0xec>)
    322c:	701a      	strb	r2, [r3, #0]
	return flags;
    322e:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3230:	4f33      	ldr	r7, [pc, #204]	; (3300 <trx_reg_write+0xf0>)
    3232:	3201      	adds	r2, #1
    3234:	4933      	ldr	r1, [pc, #204]	; (3304 <trx_reg_write+0xf4>)
    3236:	0038      	movs	r0, r7
    3238:	4b33      	ldr	r3, [pc, #204]	; (3308 <trx_reg_write+0xf8>)
    323a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    323c:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    323e:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3240:	7e1a      	ldrb	r2, [r3, #24]
    3242:	420a      	tst	r2, r1
    3244:	d0fc      	beq.n	3240 <trx_reg_write+0x30>
    3246:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3248:	07d2      	lsls	r2, r2, #31
    324a:	d502      	bpl.n	3252 <trx_reg_write+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    324c:	22c0      	movs	r2, #192	; 0xc0
    324e:	4316      	orrs	r6, r2
    3250:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3252:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3254:	7e1a      	ldrb	r2, [r3, #24]
    3256:	420a      	tst	r2, r1
    3258:	d0fc      	beq.n	3254 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    325a:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    325c:	7e1a      	ldrb	r2, [r3, #24]
    325e:	420a      	tst	r2, r1
    3260:	d0fc      	beq.n	325c <trx_reg_write+0x4c>
    3262:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3264:	0752      	lsls	r2, r2, #29
    3266:	d512      	bpl.n	328e <trx_reg_write+0x7e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3268:	8b5a      	ldrh	r2, [r3, #26]
    326a:	0752      	lsls	r2, r2, #29
    326c:	d501      	bpl.n	3272 <trx_reg_write+0x62>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    326e:	2204      	movs	r2, #4
    3270:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3272:	4a23      	ldr	r2, [pc, #140]	; (3300 <trx_reg_write+0xf0>)
    3274:	7992      	ldrb	r2, [r2, #6]
    3276:	2a01      	cmp	r2, #1
    3278:	d105      	bne.n	3286 <trx_reg_write+0x76>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    327a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    327c:	05d2      	lsls	r2, r2, #23
    327e:	0dd2      	lsrs	r2, r2, #23
    3280:	4922      	ldr	r1, [pc, #136]	; (330c <trx_reg_write+0xfc>)
    3282:	800a      	strh	r2, [r1, #0]
    3284:	e003      	b.n	328e <trx_reg_write+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3286:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3288:	b2d2      	uxtb	r2, r2
    328a:	4920      	ldr	r1, [pc, #128]	; (330c <trx_reg_write+0xfc>)
    328c:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    328e:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3290:	7e1a      	ldrb	r2, [r3, #24]
    3292:	420a      	tst	r2, r1
    3294:	d0fc      	beq.n	3290 <trx_reg_write+0x80>
    3296:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3298:	07d2      	lsls	r2, r2, #31
    329a:	d500      	bpl.n	329e <trx_reg_write+0x8e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    329c:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    329e:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    32a0:	7e1a      	ldrb	r2, [r3, #24]
    32a2:	420a      	tst	r2, r1
    32a4:	d0fc      	beq.n	32a0 <trx_reg_write+0x90>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    32a6:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    32a8:	7e1a      	ldrb	r2, [r3, #24]
    32aa:	420a      	tst	r2, r1
    32ac:	d0fc      	beq.n	32a8 <trx_reg_write+0x98>
    32ae:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    32b0:	0752      	lsls	r2, r2, #29
    32b2:	d512      	bpl.n	32da <trx_reg_write+0xca>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    32b4:	8b5a      	ldrh	r2, [r3, #26]
    32b6:	0752      	lsls	r2, r2, #29
    32b8:	d501      	bpl.n	32be <trx_reg_write+0xae>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    32ba:	2204      	movs	r2, #4
    32bc:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    32be:	4a10      	ldr	r2, [pc, #64]	; (3300 <trx_reg_write+0xf0>)
    32c0:	7992      	ldrb	r2, [r2, #6]
    32c2:	2a01      	cmp	r2, #1
    32c4:	d105      	bne.n	32d2 <trx_reg_write+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    32c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    32c8:	05db      	lsls	r3, r3, #23
    32ca:	0ddb      	lsrs	r3, r3, #23
    32cc:	4a0f      	ldr	r2, [pc, #60]	; (330c <trx_reg_write+0xfc>)
    32ce:	8013      	strh	r3, [r2, #0]
    32d0:	e003      	b.n	32da <trx_reg_write+0xca>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    32d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    32d4:	b2db      	uxtb	r3, r3
    32d6:	4a0d      	ldr	r2, [pc, #52]	; (330c <trx_reg_write+0xfc>)
    32d8:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    32da:	2200      	movs	r2, #0
    32dc:	4909      	ldr	r1, [pc, #36]	; (3304 <trx_reg_write+0xf4>)
    32de:	4808      	ldr	r0, [pc, #32]	; (3300 <trx_reg_write+0xf0>)
    32e0:	4b09      	ldr	r3, [pc, #36]	; (3308 <trx_reg_write+0xf8>)
    32e2:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    32e4:	23ff      	movs	r3, #255	; 0xff
    32e6:	422b      	tst	r3, r5
    32e8:	d005      	beq.n	32f6 <trx_reg_write+0xe6>
		cpu_irq_enable();
    32ea:	2201      	movs	r2, #1
    32ec:	4b03      	ldr	r3, [pc, #12]	; (32fc <trx_reg_write+0xec>)
    32ee:	701a      	strb	r2, [r3, #0]
    32f0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    32f4:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    32f6:	b003      	add	sp, #12
    32f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32fa:	46c0      	nop			; (mov r8, r8)
    32fc:	20000008 	.word	0x20000008
    3300:	200008dc 	.word	0x200008dc
    3304:	200008a0 	.word	0x200008a0
    3308:	0000138d 	.word	0x0000138d
    330c:	20000898 	.word	0x20000898

00003310 <setup>:
#include "sys.h"
#include "TheArtist.h"
/************************************************************************/
/*                                                                      */
/************************************************************************/
void setup(void) {
    3310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// [SYSTEM INITIALIZE]
	// [NOTICE!]!! sequence of this calls is important!
	irq_initialize_vectors();
	system_init();
    3312:	4b1b      	ldr	r3, [pc, #108]	; (3380 <setup+0x70>)
    3314:	4798      	blx	r3
	delay_init();
    3316:	4b1b      	ldr	r3, [pc, #108]	; (3384 <setup+0x74>)
    3318:	4798      	blx	r3
	SYS_Init();	
    331a:	4b1b      	ldr	r3, [pc, #108]	; (3388 <setup+0x78>)
    331c:	4798      	blx	r3
	
	artist_ultrasonic_tc_configure();
    331e:	4b1b      	ldr	r3, [pc, #108]	; (338c <setup+0x7c>)
    3320:	4798      	blx	r3
	artist_scheduler_tc_configure();
    3322:	4b1b      	ldr	r3, [pc, #108]	; (3390 <setup+0x80>)
    3324:	4798      	blx	r3
	artist_configure_tc_callbacks();  
    3326:	4b1b      	ldr	r3, [pc, #108]	; (3394 <setup+0x84>)
    3328:	4798      	blx	r3
	artist_init_maze(); 
    332a:	4b1b      	ldr	r3, [pc, #108]	; (3398 <setup+0x88>)
    332c:	4798      	blx	r3

	cpu_irq_enable();
    332e:	4e1b      	ldr	r6, [pc, #108]	; (339c <setup+0x8c>)
    3330:	2701      	movs	r7, #1
    3332:	7037      	strb	r7, [r6, #0]
    3334:	f3bf 8f5f 	dmb	sy
    3338:	b662      	cpsie	i
	
	// [ultrasonic]
	artist_ultrasonic_configure(&(artist_front.us_instance_right),
    333a:	4c19      	ldr	r4, [pc, #100]	; (33a0 <setup+0x90>)
    333c:	220f      	movs	r2, #15
    333e:	211c      	movs	r1, #28
    3340:	0020      	movs	r0, r4
    3342:	4d18      	ldr	r5, [pc, #96]	; (33a4 <setup+0x94>)
    3344:	47a8      	blx	r5
	CONF_ARTIST_RIGHT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_center),
    3346:	0020      	movs	r0, r4
    3348:	3810      	subs	r0, #16
    334a:	220f      	movs	r2, #15
    334c:	210d      	movs	r1, #13
    334e:	47a8      	blx	r5
	CONF_ARTIST_CENTER_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_left),
    3350:	0020      	movs	r0, r4
    3352:	3808      	subs	r0, #8
    3354:	220f      	movs	r2, #15
    3356:	2117      	movs	r1, #23
    3358:	47a8      	blx	r5
	CONF_ARTIST_LEFT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_gpio_init();
    335a:	4b13      	ldr	r3, [pc, #76]	; (33a8 <setup+0x98>)
    335c:	4798      	blx	r3
	
	//! [ultrasonic]
	
	
	artist_usart_configure(&(artist_front.usart_instance));
    335e:	3c4c      	subs	r4, #76	; 0x4c
    3360:	0020      	movs	r0, r4
    3362:	4b12      	ldr	r3, [pc, #72]	; (33ac <setup+0x9c>)
    3364:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    3366:	7037      	strb	r7, [r6, #0]
    3368:	f3bf 8f5f 	dmb	sy
    336c:	b662      	cpsie	i
	
	system_interrupt_enable_global();

	
	usart_read_buffer_job( &(artist_front.usart_instance),
    336e:	2205      	movs	r2, #5
    3370:	490f      	ldr	r1, [pc, #60]	; (33b0 <setup+0xa0>)
    3372:	0020      	movs	r0, r4
    3374:	4b0f      	ldr	r3, [pc, #60]	; (33b4 <setup+0xa4>)
    3376:	4798      	blx	r3
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
	
	printf("front node setup complete\n"); 
    3378:	480f      	ldr	r0, [pc, #60]	; (33b8 <setup+0xa8>)
    337a:	4b10      	ldr	r3, [pc, #64]	; (33bc <setup+0xac>)
    337c:	4798      	blx	r3
	
}
    337e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3380:	0000236d 	.word	0x0000236d
    3384:	000008a5 	.word	0x000008a5
    3388:	00002cfd 	.word	0x00002cfd
    338c:	00000569 	.word	0x00000569
    3390:	000007e5 	.word	0x000007e5
    3394:	00000855 	.word	0x00000855
    3398:	00000115 	.word	0x00000115
    339c:	20000008 	.word	0x20000008
    33a0:	20000748 	.word	0x20000748
    33a4:	00000219 	.word	0x00000219
    33a8:	00000229 	.word	0x00000229
    33ac:	000005fd 	.word	0x000005fd
    33b0:	20000760 	.word	0x20000760
    33b4:	00001915 	.word	0x00001915
    33b8:	00008b14 	.word	0x00008b14
    33bc:	00003f1d 	.word	0x00003f1d

000033c0 <main>:
	
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
int main (void) {
    33c0:	b510      	push	{r4, lr}
	setup();
    33c2:	4b01      	ldr	r3, [pc, #4]	; (33c8 <main+0x8>)
    33c4:	4798      	blx	r3
    33c6:	e7fe      	b.n	33c6 <main+0x6>
    33c8:	00003311 	.word	0x00003311

000033cc <common_tc_delay>:
    33cc:	b510      	push	{r4, lr}
    33ce:	1c04      	adds	r4, r0, #0
    33d0:	4b13      	ldr	r3, [pc, #76]	; (3420 <common_tc_delay+0x54>)
    33d2:	4798      	blx	r3
    33d4:	4b13      	ldr	r3, [pc, #76]	; (3424 <common_tc_delay+0x58>)
    33d6:	781a      	ldrb	r2, [r3, #0]
    33d8:	4362      	muls	r2, r4
    33da:	1881      	adds	r1, r0, r2
    33dc:	4b12      	ldr	r3, [pc, #72]	; (3428 <common_tc_delay+0x5c>)
    33de:	6059      	str	r1, [r3, #4]
    33e0:	6859      	ldr	r1, [r3, #4]
    33e2:	0c09      	lsrs	r1, r1, #16
    33e4:	6059      	str	r1, [r3, #4]
    33e6:	685b      	ldr	r3, [r3, #4]
    33e8:	2b00      	cmp	r3, #0
    33ea:	d007      	beq.n	33fc <common_tc_delay+0x30>
    33ec:	4b0e      	ldr	r3, [pc, #56]	; (3428 <common_tc_delay+0x5c>)
    33ee:	6859      	ldr	r1, [r3, #4]
    33f0:	3201      	adds	r2, #1
    33f2:	1880      	adds	r0, r0, r2
    33f4:	8118      	strh	r0, [r3, #8]
    33f6:	4b0d      	ldr	r3, [pc, #52]	; (342c <common_tc_delay+0x60>)
    33f8:	4798      	blx	r3
    33fa:	e004      	b.n	3406 <common_tc_delay+0x3a>
    33fc:	1882      	adds	r2, r0, r2
    33fe:	4b0a      	ldr	r3, [pc, #40]	; (3428 <common_tc_delay+0x5c>)
    3400:	811a      	strh	r2, [r3, #8]
    3402:	4b0b      	ldr	r3, [pc, #44]	; (3430 <common_tc_delay+0x64>)
    3404:	4798      	blx	r3
    3406:	4b08      	ldr	r3, [pc, #32]	; (3428 <common_tc_delay+0x5c>)
    3408:	891b      	ldrh	r3, [r3, #8]
    340a:	2b63      	cmp	r3, #99	; 0x63
    340c:	d802      	bhi.n	3414 <common_tc_delay+0x48>
    340e:	3364      	adds	r3, #100	; 0x64
    3410:	4a05      	ldr	r2, [pc, #20]	; (3428 <common_tc_delay+0x5c>)
    3412:	8113      	strh	r3, [r2, #8]
    3414:	4b04      	ldr	r3, [pc, #16]	; (3428 <common_tc_delay+0x5c>)
    3416:	8918      	ldrh	r0, [r3, #8]
    3418:	4b06      	ldr	r3, [pc, #24]	; (3434 <common_tc_delay+0x68>)
    341a:	4798      	blx	r3
    341c:	bd10      	pop	{r4, pc}
    341e:	46c0      	nop			; (mov r8, r8)
    3420:	00002e39 	.word	0x00002e39
    3424:	200008e8 	.word	0x200008e8
    3428:	20000668 	.word	0x20000668
    342c:	00002e4d 	.word	0x00002e4d
    3430:	00002e61 	.word	0x00002e61
    3434:	00002e9d 	.word	0x00002e9d

00003438 <common_tc_init>:
    3438:	b508      	push	{r3, lr}
    343a:	2200      	movs	r2, #0
    343c:	4b03      	ldr	r3, [pc, #12]	; (344c <common_tc_init+0x14>)
    343e:	701a      	strb	r2, [r3, #0]
    3440:	4b03      	ldr	r3, [pc, #12]	; (3450 <common_tc_init+0x18>)
    3442:	4798      	blx	r3
    3444:	4b03      	ldr	r3, [pc, #12]	; (3454 <common_tc_init+0x1c>)
    3446:	7018      	strb	r0, [r3, #0]
    3448:	bd08      	pop	{r3, pc}
    344a:	46c0      	nop			; (mov r8, r8)
    344c:	20000668 	.word	0x20000668
    3450:	00002eb5 	.word	0x00002eb5
    3454:	200008e8 	.word	0x200008e8

00003458 <tmr_ovf_callback>:
    3458:	b508      	push	{r3, lr}
    345a:	4b0e      	ldr	r3, [pc, #56]	; (3494 <tmr_ovf_callback+0x3c>)
    345c:	685b      	ldr	r3, [r3, #4]
    345e:	2b00      	cmp	r3, #0
    3460:	d007      	beq.n	3472 <tmr_ovf_callback+0x1a>
    3462:	4a0c      	ldr	r2, [pc, #48]	; (3494 <tmr_ovf_callback+0x3c>)
    3464:	6853      	ldr	r3, [r2, #4]
    3466:	3b01      	subs	r3, #1
    3468:	6053      	str	r3, [r2, #4]
    346a:	2b00      	cmp	r3, #0
    346c:	d101      	bne.n	3472 <tmr_ovf_callback+0x1a>
    346e:	4b0a      	ldr	r3, [pc, #40]	; (3498 <tmr_ovf_callback+0x40>)
    3470:	4798      	blx	r3
    3472:	4a08      	ldr	r2, [pc, #32]	; (3494 <tmr_ovf_callback+0x3c>)
    3474:	7813      	ldrb	r3, [r2, #0]
    3476:	3301      	adds	r3, #1
    3478:	b2db      	uxtb	r3, r3
    347a:	7013      	strb	r3, [r2, #0]
    347c:	4a07      	ldr	r2, [pc, #28]	; (349c <tmr_ovf_callback+0x44>)
    347e:	7812      	ldrb	r2, [r2, #0]
    3480:	429a      	cmp	r2, r3
    3482:	d806      	bhi.n	3492 <tmr_ovf_callback+0x3a>
    3484:	4b03      	ldr	r3, [pc, #12]	; (3494 <tmr_ovf_callback+0x3c>)
    3486:	2200      	movs	r2, #0
    3488:	701a      	strb	r2, [r3, #0]
    348a:	68db      	ldr	r3, [r3, #12]
    348c:	2b00      	cmp	r3, #0
    348e:	d000      	beq.n	3492 <tmr_ovf_callback+0x3a>
    3490:	4798      	blx	r3
    3492:	bd08      	pop	{r3, pc}
    3494:	20000668 	.word	0x20000668
    3498:	00002e61 	.word	0x00002e61
    349c:	200008e8 	.word	0x200008e8

000034a0 <tmr_cca_callback>:
    34a0:	b508      	push	{r3, lr}
    34a2:	4b04      	ldr	r3, [pc, #16]	; (34b4 <tmr_cca_callback+0x14>)
    34a4:	4798      	blx	r3
    34a6:	4b04      	ldr	r3, [pc, #16]	; (34b8 <tmr_cca_callback+0x18>)
    34a8:	691b      	ldr	r3, [r3, #16]
    34aa:	2b00      	cmp	r3, #0
    34ac:	d000      	beq.n	34b0 <tmr_cca_callback+0x10>
    34ae:	4798      	blx	r3
    34b0:	bd08      	pop	{r3, pc}
    34b2:	46c0      	nop			; (mov r8, r8)
    34b4:	00002e4d 	.word	0x00002e4d
    34b8:	20000668 	.word	0x20000668

000034bc <set_common_tc_expiry_callback>:
    34bc:	4b01      	ldr	r3, [pc, #4]	; (34c4 <set_common_tc_expiry_callback+0x8>)
    34be:	6118      	str	r0, [r3, #16]
    34c0:	4770      	bx	lr
    34c2:	46c0      	nop			; (mov r8, r8)
    34c4:	20000668 	.word	0x20000668

000034c8 <__libc_init_array>:
    34c8:	4b0e      	ldr	r3, [pc, #56]	; (3504 <__libc_init_array+0x3c>)
    34ca:	b570      	push	{r4, r5, r6, lr}
    34cc:	2500      	movs	r5, #0
    34ce:	001e      	movs	r6, r3
    34d0:	4c0d      	ldr	r4, [pc, #52]	; (3508 <__libc_init_array+0x40>)
    34d2:	1ae4      	subs	r4, r4, r3
    34d4:	10a4      	asrs	r4, r4, #2
    34d6:	42a5      	cmp	r5, r4
    34d8:	d004      	beq.n	34e4 <__libc_init_array+0x1c>
    34da:	00ab      	lsls	r3, r5, #2
    34dc:	58f3      	ldr	r3, [r6, r3]
    34de:	4798      	blx	r3
    34e0:	3501      	adds	r5, #1
    34e2:	e7f8      	b.n	34d6 <__libc_init_array+0xe>
    34e4:	f005 fca8 	bl	8e38 <_init>
    34e8:	4b08      	ldr	r3, [pc, #32]	; (350c <__libc_init_array+0x44>)
    34ea:	2500      	movs	r5, #0
    34ec:	001e      	movs	r6, r3
    34ee:	4c08      	ldr	r4, [pc, #32]	; (3510 <__libc_init_array+0x48>)
    34f0:	1ae4      	subs	r4, r4, r3
    34f2:	10a4      	asrs	r4, r4, #2
    34f4:	42a5      	cmp	r5, r4
    34f6:	d004      	beq.n	3502 <__libc_init_array+0x3a>
    34f8:	00ab      	lsls	r3, r5, #2
    34fa:	58f3      	ldr	r3, [r6, r3]
    34fc:	4798      	blx	r3
    34fe:	3501      	adds	r5, #1
    3500:	e7f8      	b.n	34f4 <__libc_init_array+0x2c>
    3502:	bd70      	pop	{r4, r5, r6, pc}
    3504:	00008e44 	.word	0x00008e44
    3508:	00008e44 	.word	0x00008e44
    350c:	00008e44 	.word	0x00008e44
    3510:	00008e48 	.word	0x00008e48

00003514 <memcpy>:
    3514:	2300      	movs	r3, #0
    3516:	b510      	push	{r4, lr}
    3518:	429a      	cmp	r2, r3
    351a:	d003      	beq.n	3524 <memcpy+0x10>
    351c:	5ccc      	ldrb	r4, [r1, r3]
    351e:	54c4      	strb	r4, [r0, r3]
    3520:	3301      	adds	r3, #1
    3522:	e7f9      	b.n	3518 <memcpy+0x4>
    3524:	bd10      	pop	{r4, pc}

00003526 <memset>:
    3526:	0003      	movs	r3, r0
    3528:	1882      	adds	r2, r0, r2
    352a:	4293      	cmp	r3, r2
    352c:	d002      	beq.n	3534 <memset+0xe>
    352e:	7019      	strb	r1, [r3, #0]
    3530:	3301      	adds	r3, #1
    3532:	e7fa      	b.n	352a <memset+0x4>
    3534:	4770      	bx	lr

00003536 <__cvt>:
    3536:	b5f0      	push	{r4, r5, r6, r7, lr}
    3538:	b08b      	sub	sp, #44	; 0x2c
    353a:	0014      	movs	r4, r2
    353c:	1e1d      	subs	r5, r3, #0
    353e:	9912      	ldr	r1, [sp, #72]	; 0x48
    3540:	da06      	bge.n	3550 <__cvt+0x1a>
    3542:	2480      	movs	r4, #128	; 0x80
    3544:	0624      	lsls	r4, r4, #24
    3546:	191b      	adds	r3, r3, r4
    3548:	001d      	movs	r5, r3
    354a:	0014      	movs	r4, r2
    354c:	232d      	movs	r3, #45	; 0x2d
    354e:	e000      	b.n	3552 <__cvt+0x1c>
    3550:	2300      	movs	r3, #0
    3552:	700b      	strb	r3, [r1, #0]
    3554:	2320      	movs	r3, #32
    3556:	9e14      	ldr	r6, [sp, #80]	; 0x50
    3558:	2203      	movs	r2, #3
    355a:	439e      	bics	r6, r3
    355c:	2e46      	cmp	r6, #70	; 0x46
    355e:	d007      	beq.n	3570 <__cvt+0x3a>
    3560:	0033      	movs	r3, r6
    3562:	3b45      	subs	r3, #69	; 0x45
    3564:	4259      	negs	r1, r3
    3566:	414b      	adcs	r3, r1
    3568:	9910      	ldr	r1, [sp, #64]	; 0x40
    356a:	3a01      	subs	r2, #1
    356c:	18cb      	adds	r3, r1, r3
    356e:	9310      	str	r3, [sp, #64]	; 0x40
    3570:	ab09      	add	r3, sp, #36	; 0x24
    3572:	9304      	str	r3, [sp, #16]
    3574:	ab08      	add	r3, sp, #32
    3576:	9303      	str	r3, [sp, #12]
    3578:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    357a:	9200      	str	r2, [sp, #0]
    357c:	9302      	str	r3, [sp, #8]
    357e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3580:	0022      	movs	r2, r4
    3582:	9301      	str	r3, [sp, #4]
    3584:	002b      	movs	r3, r5
    3586:	f000 fee9 	bl	435c <_dtoa_r>
    358a:	0007      	movs	r7, r0
    358c:	2e47      	cmp	r6, #71	; 0x47
    358e:	d102      	bne.n	3596 <__cvt+0x60>
    3590:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3592:	07db      	lsls	r3, r3, #31
    3594:	d52d      	bpl.n	35f2 <__cvt+0xbc>
    3596:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3598:	18fb      	adds	r3, r7, r3
    359a:	9307      	str	r3, [sp, #28]
    359c:	2e46      	cmp	r6, #70	; 0x46
    359e:	d114      	bne.n	35ca <__cvt+0x94>
    35a0:	783b      	ldrb	r3, [r7, #0]
    35a2:	2b30      	cmp	r3, #48	; 0x30
    35a4:	d10c      	bne.n	35c0 <__cvt+0x8a>
    35a6:	2200      	movs	r2, #0
    35a8:	2300      	movs	r3, #0
    35aa:	0020      	movs	r0, r4
    35ac:	0029      	movs	r1, r5
    35ae:	f002 fdd9 	bl	6164 <__aeabi_dcmpeq>
    35b2:	2800      	cmp	r0, #0
    35b4:	d104      	bne.n	35c0 <__cvt+0x8a>
    35b6:	2301      	movs	r3, #1
    35b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    35ba:	1a9b      	subs	r3, r3, r2
    35bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    35be:	6013      	str	r3, [r2, #0]
    35c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    35c2:	9a07      	ldr	r2, [sp, #28]
    35c4:	681b      	ldr	r3, [r3, #0]
    35c6:	18d3      	adds	r3, r2, r3
    35c8:	9307      	str	r3, [sp, #28]
    35ca:	2200      	movs	r2, #0
    35cc:	2300      	movs	r3, #0
    35ce:	0020      	movs	r0, r4
    35d0:	0029      	movs	r1, r5
    35d2:	f002 fdc7 	bl	6164 <__aeabi_dcmpeq>
    35d6:	2230      	movs	r2, #48	; 0x30
    35d8:	2800      	cmp	r0, #0
    35da:	d002      	beq.n	35e2 <__cvt+0xac>
    35dc:	9b07      	ldr	r3, [sp, #28]
    35de:	9309      	str	r3, [sp, #36]	; 0x24
    35e0:	e007      	b.n	35f2 <__cvt+0xbc>
    35e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    35e4:	9907      	ldr	r1, [sp, #28]
    35e6:	4299      	cmp	r1, r3
    35e8:	d903      	bls.n	35f2 <__cvt+0xbc>
    35ea:	1c59      	adds	r1, r3, #1
    35ec:	9109      	str	r1, [sp, #36]	; 0x24
    35ee:	701a      	strb	r2, [r3, #0]
    35f0:	e7f7      	b.n	35e2 <__cvt+0xac>
    35f2:	0038      	movs	r0, r7
    35f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    35f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
    35f8:	1bdb      	subs	r3, r3, r7
    35fa:	6013      	str	r3, [r2, #0]
    35fc:	b00b      	add	sp, #44	; 0x2c
    35fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003600 <__exponent>:
    3600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3602:	232b      	movs	r3, #43	; 0x2b
    3604:	0007      	movs	r7, r0
    3606:	000c      	movs	r4, r1
    3608:	7002      	strb	r2, [r0, #0]
    360a:	1c86      	adds	r6, r0, #2
    360c:	2900      	cmp	r1, #0
    360e:	da01      	bge.n	3614 <__exponent+0x14>
    3610:	232d      	movs	r3, #45	; 0x2d
    3612:	424c      	negs	r4, r1
    3614:	707b      	strb	r3, [r7, #1]
    3616:	2c09      	cmp	r4, #9
    3618:	dd1c      	ble.n	3654 <__exponent+0x54>
    361a:	466b      	mov	r3, sp
    361c:	1ddd      	adds	r5, r3, #7
    361e:	0020      	movs	r0, r4
    3620:	210a      	movs	r1, #10
    3622:	f002 fd89 	bl	6138 <__aeabi_idivmod>
    3626:	3d01      	subs	r5, #1
    3628:	3130      	adds	r1, #48	; 0x30
    362a:	7029      	strb	r1, [r5, #0]
    362c:	0020      	movs	r0, r4
    362e:	210a      	movs	r1, #10
    3630:	f002 fc9c 	bl	5f6c <__aeabi_idiv>
    3634:	1e04      	subs	r4, r0, #0
    3636:	2c09      	cmp	r4, #9
    3638:	dcf1      	bgt.n	361e <__exponent+0x1e>
    363a:	3d01      	subs	r5, #1
    363c:	3430      	adds	r4, #48	; 0x30
    363e:	702c      	strb	r4, [r5, #0]
    3640:	466b      	mov	r3, sp
    3642:	3307      	adds	r3, #7
    3644:	0030      	movs	r0, r6
    3646:	42ab      	cmp	r3, r5
    3648:	d909      	bls.n	365e <__exponent+0x5e>
    364a:	782b      	ldrb	r3, [r5, #0]
    364c:	3501      	adds	r5, #1
    364e:	7033      	strb	r3, [r6, #0]
    3650:	3601      	adds	r6, #1
    3652:	e7f5      	b.n	3640 <__exponent+0x40>
    3654:	2330      	movs	r3, #48	; 0x30
    3656:	18e4      	adds	r4, r4, r3
    3658:	7033      	strb	r3, [r6, #0]
    365a:	1cb0      	adds	r0, r6, #2
    365c:	7074      	strb	r4, [r6, #1]
    365e:	1bc0      	subs	r0, r0, r7
    3660:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00003664 <_printf_float>:
    3664:	b5f0      	push	{r4, r5, r6, r7, lr}
    3666:	b095      	sub	sp, #84	; 0x54
    3668:	000c      	movs	r4, r1
    366a:	920a      	str	r2, [sp, #40]	; 0x28
    366c:	930b      	str	r3, [sp, #44]	; 0x2c
    366e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    3670:	9009      	str	r0, [sp, #36]	; 0x24
    3672:	f001 fdc1 	bl	51f8 <_localeconv_r>
    3676:	6803      	ldr	r3, [r0, #0]
    3678:	0018      	movs	r0, r3
    367a:	930d      	str	r3, [sp, #52]	; 0x34
    367c:	f000 fd12 	bl	40a4 <strlen>
    3680:	2300      	movs	r3, #0
    3682:	9312      	str	r3, [sp, #72]	; 0x48
    3684:	6823      	ldr	r3, [r4, #0]
    3686:	900e      	str	r0, [sp, #56]	; 0x38
    3688:	930c      	str	r3, [sp, #48]	; 0x30
    368a:	990c      	ldr	r1, [sp, #48]	; 0x30
    368c:	7e27      	ldrb	r7, [r4, #24]
    368e:	682b      	ldr	r3, [r5, #0]
    3690:	2207      	movs	r2, #7
    3692:	05c9      	lsls	r1, r1, #23
    3694:	d501      	bpl.n	369a <_printf_float+0x36>
    3696:	189b      	adds	r3, r3, r2
    3698:	e000      	b.n	369c <_printf_float+0x38>
    369a:	3307      	adds	r3, #7
    369c:	4393      	bics	r3, r2
    369e:	001a      	movs	r2, r3
    36a0:	3208      	adds	r2, #8
    36a2:	602a      	str	r2, [r5, #0]
    36a4:	681a      	ldr	r2, [r3, #0]
    36a6:	685b      	ldr	r3, [r3, #4]
    36a8:	64a2      	str	r2, [r4, #72]	; 0x48
    36aa:	64e3      	str	r3, [r4, #76]	; 0x4c
    36ac:	2201      	movs	r2, #1
    36ae:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    36b0:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    36b2:	006b      	lsls	r3, r5, #1
    36b4:	085b      	lsrs	r3, r3, #1
    36b6:	930f      	str	r3, [sp, #60]	; 0x3c
    36b8:	4252      	negs	r2, r2
    36ba:	4bc0      	ldr	r3, [pc, #768]	; (39bc <_printf_float+0x358>)
    36bc:	0030      	movs	r0, r6
    36be:	990f      	ldr	r1, [sp, #60]	; 0x3c
    36c0:	f004 ff9e 	bl	8600 <__aeabi_dcmpun>
    36c4:	2800      	cmp	r0, #0
    36c6:	d119      	bne.n	36fc <_printf_float+0x98>
    36c8:	2201      	movs	r2, #1
    36ca:	4bbc      	ldr	r3, [pc, #752]	; (39bc <_printf_float+0x358>)
    36cc:	4252      	negs	r2, r2
    36ce:	0030      	movs	r0, r6
    36d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
    36d2:	f002 fd57 	bl	6184 <__aeabi_dcmple>
    36d6:	2800      	cmp	r0, #0
    36d8:	d110      	bne.n	36fc <_printf_float+0x98>
    36da:	2200      	movs	r2, #0
    36dc:	2300      	movs	r3, #0
    36de:	0030      	movs	r0, r6
    36e0:	0029      	movs	r1, r5
    36e2:	f002 fd45 	bl	6170 <__aeabi_dcmplt>
    36e6:	2800      	cmp	r0, #0
    36e8:	d003      	beq.n	36f2 <_printf_float+0x8e>
    36ea:	0023      	movs	r3, r4
    36ec:	222d      	movs	r2, #45	; 0x2d
    36ee:	3343      	adds	r3, #67	; 0x43
    36f0:	701a      	strb	r2, [r3, #0]
    36f2:	4db3      	ldr	r5, [pc, #716]	; (39c0 <_printf_float+0x35c>)
    36f4:	2f47      	cmp	r7, #71	; 0x47
    36f6:	d80e      	bhi.n	3716 <_printf_float+0xb2>
    36f8:	4db2      	ldr	r5, [pc, #712]	; (39c4 <_printf_float+0x360>)
    36fa:	e00c      	b.n	3716 <_printf_float+0xb2>
    36fc:	0032      	movs	r2, r6
    36fe:	002b      	movs	r3, r5
    3700:	0030      	movs	r0, r6
    3702:	0029      	movs	r1, r5
    3704:	f004 ff7c 	bl	8600 <__aeabi_dcmpun>
    3708:	2800      	cmp	r0, #0
    370a:	d100      	bne.n	370e <_printf_float+0xaa>
    370c:	e19a      	b.n	3a44 <_printf_float+0x3e0>
    370e:	4dae      	ldr	r5, [pc, #696]	; (39c8 <_printf_float+0x364>)
    3710:	2f47      	cmp	r7, #71	; 0x47
    3712:	d800      	bhi.n	3716 <_printf_float+0xb2>
    3714:	4dad      	ldr	r5, [pc, #692]	; (39cc <_printf_float+0x368>)
    3716:	2303      	movs	r3, #3
    3718:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    371a:	6123      	str	r3, [r4, #16]
    371c:	3301      	adds	r3, #1
    371e:	439a      	bics	r2, r3
    3720:	6022      	str	r2, [r4, #0]
    3722:	2600      	movs	r6, #0
    3724:	e042      	b.n	37ac <_printf_float+0x148>
    3726:	2f67      	cmp	r7, #103	; 0x67
    3728:	d100      	bne.n	372c <_printf_float+0xc8>
    372a:	e193      	b.n	3a54 <_printf_float+0x3f0>
    372c:	2f47      	cmp	r7, #71	; 0x47
    372e:	d100      	bne.n	3732 <_printf_float+0xce>
    3730:	e190      	b.n	3a54 <_printf_float+0x3f0>
    3732:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3734:	2100      	movs	r1, #0
    3736:	4313      	orrs	r3, r2
    3738:	aa12      	add	r2, sp, #72	; 0x48
    373a:	9205      	str	r2, [sp, #20]
    373c:	aa11      	add	r2, sp, #68	; 0x44
    373e:	9203      	str	r2, [sp, #12]
    3740:	2223      	movs	r2, #35	; 0x23
    3742:	6023      	str	r3, [r4, #0]
    3744:	9106      	str	r1, [sp, #24]
    3746:	9301      	str	r3, [sp, #4]
    3748:	a908      	add	r1, sp, #32
    374a:	6863      	ldr	r3, [r4, #4]
    374c:	1852      	adds	r2, r2, r1
    374e:	9202      	str	r2, [sp, #8]
    3750:	9300      	str	r3, [sp, #0]
    3752:	0032      	movs	r2, r6
    3754:	002b      	movs	r3, r5
    3756:	9704      	str	r7, [sp, #16]
    3758:	9809      	ldr	r0, [sp, #36]	; 0x24
    375a:	f7ff feec 	bl	3536 <__cvt>
    375e:	2320      	movs	r3, #32
    3760:	003a      	movs	r2, r7
    3762:	0005      	movs	r5, r0
    3764:	439a      	bics	r2, r3
    3766:	2a47      	cmp	r2, #71	; 0x47
    3768:	d100      	bne.n	376c <_printf_float+0x108>
    376a:	e18e      	b.n	3a8a <_printf_float+0x426>
    376c:	9911      	ldr	r1, [sp, #68]	; 0x44
    376e:	2f65      	cmp	r7, #101	; 0x65
    3770:	d900      	bls.n	3774 <_printf_float+0x110>
    3772:	e196      	b.n	3aa2 <_printf_float+0x43e>
    3774:	0020      	movs	r0, r4
    3776:	3901      	subs	r1, #1
    3778:	003a      	movs	r2, r7
    377a:	3050      	adds	r0, #80	; 0x50
    377c:	9111      	str	r1, [sp, #68]	; 0x44
    377e:	f7ff ff3f 	bl	3600 <__exponent>
    3782:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3784:	0006      	movs	r6, r0
    3786:	1883      	adds	r3, r0, r2
    3788:	6123      	str	r3, [r4, #16]
    378a:	2a01      	cmp	r2, #1
    378c:	dd00      	ble.n	3790 <_printf_float+0x12c>
    378e:	e185      	b.n	3a9c <_printf_float+0x438>
    3790:	6822      	ldr	r2, [r4, #0]
    3792:	07d2      	lsls	r2, r2, #31
    3794:	d500      	bpl.n	3798 <_printf_float+0x134>
    3796:	e181      	b.n	3a9c <_printf_float+0x438>
    3798:	2323      	movs	r3, #35	; 0x23
    379a:	aa08      	add	r2, sp, #32
    379c:	189b      	adds	r3, r3, r2
    379e:	781b      	ldrb	r3, [r3, #0]
    37a0:	2b00      	cmp	r3, #0
    37a2:	d003      	beq.n	37ac <_printf_float+0x148>
    37a4:	0023      	movs	r3, r4
    37a6:	222d      	movs	r2, #45	; 0x2d
    37a8:	3343      	adds	r3, #67	; 0x43
    37aa:	701a      	strb	r2, [r3, #0]
    37ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    37ae:	aa13      	add	r2, sp, #76	; 0x4c
    37b0:	9300      	str	r3, [sp, #0]
    37b2:	0021      	movs	r1, r4
    37b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    37b6:	9809      	ldr	r0, [sp, #36]	; 0x24
    37b8:	f000 f9a4 	bl	3b04 <_printf_common>
    37bc:	1c43      	adds	r3, r0, #1
    37be:	d102      	bne.n	37c6 <_printf_float+0x162>
    37c0:	2001      	movs	r0, #1
    37c2:	4240      	negs	r0, r0
    37c4:	e19b      	b.n	3afe <_printf_float+0x49a>
    37c6:	6822      	ldr	r2, [r4, #0]
    37c8:	0553      	lsls	r3, r2, #21
    37ca:	d401      	bmi.n	37d0 <_printf_float+0x16c>
    37cc:	6923      	ldr	r3, [r4, #16]
    37ce:	e064      	b.n	389a <_printf_float+0x236>
    37d0:	2f65      	cmp	r7, #101	; 0x65
    37d2:	d800      	bhi.n	37d6 <_printf_float+0x172>
    37d4:	e0cc      	b.n	3970 <_printf_float+0x30c>
    37d6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    37d8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    37da:	2200      	movs	r2, #0
    37dc:	2300      	movs	r3, #0
    37de:	f002 fcc1 	bl	6164 <__aeabi_dcmpeq>
    37e2:	2800      	cmp	r0, #0
    37e4:	d02c      	beq.n	3840 <_printf_float+0x1dc>
    37e6:	2301      	movs	r3, #1
    37e8:	4a79      	ldr	r2, [pc, #484]	; (39d0 <_printf_float+0x36c>)
    37ea:	990a      	ldr	r1, [sp, #40]	; 0x28
    37ec:	9809      	ldr	r0, [sp, #36]	; 0x24
    37ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    37f0:	47a8      	blx	r5
    37f2:	1c43      	adds	r3, r0, #1
    37f4:	d0e4      	beq.n	37c0 <_printf_float+0x15c>
    37f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    37f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    37fa:	4293      	cmp	r3, r2
    37fc:	db08      	blt.n	3810 <_printf_float+0x1ac>
    37fe:	6823      	ldr	r3, [r4, #0]
    3800:	07db      	lsls	r3, r3, #31
    3802:	d405      	bmi.n	3810 <_printf_float+0x1ac>
    3804:	6823      	ldr	r3, [r4, #0]
    3806:	2500      	movs	r5, #0
    3808:	079b      	lsls	r3, r3, #30
    380a:	d500      	bpl.n	380e <_printf_float+0x1aa>
    380c:	e10f      	b.n	3a2e <_printf_float+0x3ca>
    380e:	e113      	b.n	3a38 <_printf_float+0x3d4>
    3810:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3814:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3816:	990a      	ldr	r1, [sp, #40]	; 0x28
    3818:	9809      	ldr	r0, [sp, #36]	; 0x24
    381a:	47a8      	blx	r5
    381c:	2500      	movs	r5, #0
    381e:	1c43      	adds	r3, r0, #1
    3820:	d0ce      	beq.n	37c0 <_printf_float+0x15c>
    3822:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3824:	3b01      	subs	r3, #1
    3826:	429d      	cmp	r5, r3
    3828:	daec      	bge.n	3804 <_printf_float+0x1a0>
    382a:	0022      	movs	r2, r4
    382c:	2301      	movs	r3, #1
    382e:	321a      	adds	r2, #26
    3830:	990a      	ldr	r1, [sp, #40]	; 0x28
    3832:	9809      	ldr	r0, [sp, #36]	; 0x24
    3834:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3836:	47b0      	blx	r6
    3838:	1c43      	adds	r3, r0, #1
    383a:	d0c1      	beq.n	37c0 <_printf_float+0x15c>
    383c:	3501      	adds	r5, #1
    383e:	e7f0      	b.n	3822 <_printf_float+0x1be>
    3840:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3842:	2b00      	cmp	r3, #0
    3844:	dc2b      	bgt.n	389e <_printf_float+0x23a>
    3846:	2301      	movs	r3, #1
    3848:	4a61      	ldr	r2, [pc, #388]	; (39d0 <_printf_float+0x36c>)
    384a:	990a      	ldr	r1, [sp, #40]	; 0x28
    384c:	9809      	ldr	r0, [sp, #36]	; 0x24
    384e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3850:	47b0      	blx	r6
    3852:	1c43      	adds	r3, r0, #1
    3854:	d0b4      	beq.n	37c0 <_printf_float+0x15c>
    3856:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3858:	2b00      	cmp	r3, #0
    385a:	d105      	bne.n	3868 <_printf_float+0x204>
    385c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    385e:	2b00      	cmp	r3, #0
    3860:	d102      	bne.n	3868 <_printf_float+0x204>
    3862:	6823      	ldr	r3, [r4, #0]
    3864:	07db      	lsls	r3, r3, #31
    3866:	d5cd      	bpl.n	3804 <_printf_float+0x1a0>
    3868:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    386a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    386c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    386e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3870:	9809      	ldr	r0, [sp, #36]	; 0x24
    3872:	47b0      	blx	r6
    3874:	2600      	movs	r6, #0
    3876:	1c43      	adds	r3, r0, #1
    3878:	d0a2      	beq.n	37c0 <_printf_float+0x15c>
    387a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    387c:	425b      	negs	r3, r3
    387e:	429e      	cmp	r6, r3
    3880:	da0a      	bge.n	3898 <_printf_float+0x234>
    3882:	0022      	movs	r2, r4
    3884:	2301      	movs	r3, #1
    3886:	321a      	adds	r2, #26
    3888:	990a      	ldr	r1, [sp, #40]	; 0x28
    388a:	9809      	ldr	r0, [sp, #36]	; 0x24
    388c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    388e:	47b8      	blx	r7
    3890:	1c43      	adds	r3, r0, #1
    3892:	d095      	beq.n	37c0 <_printf_float+0x15c>
    3894:	3601      	adds	r6, #1
    3896:	e7f0      	b.n	387a <_printf_float+0x216>
    3898:	9b12      	ldr	r3, [sp, #72]	; 0x48
    389a:	002a      	movs	r2, r5
    389c:	e0ac      	b.n	39f8 <_printf_float+0x394>
    389e:	6da3      	ldr	r3, [r4, #88]	; 0x58
    38a0:	9e12      	ldr	r6, [sp, #72]	; 0x48
    38a2:	429e      	cmp	r6, r3
    38a4:	dd00      	ble.n	38a8 <_printf_float+0x244>
    38a6:	001e      	movs	r6, r3
    38a8:	2e00      	cmp	r6, #0
    38aa:	dc05      	bgt.n	38b8 <_printf_float+0x254>
    38ac:	2300      	movs	r3, #0
    38ae:	930c      	str	r3, [sp, #48]	; 0x30
    38b0:	43f3      	mvns	r3, r6
    38b2:	17db      	asrs	r3, r3, #31
    38b4:	930f      	str	r3, [sp, #60]	; 0x3c
    38b6:	e015      	b.n	38e4 <_printf_float+0x280>
    38b8:	0033      	movs	r3, r6
    38ba:	002a      	movs	r2, r5
    38bc:	990a      	ldr	r1, [sp, #40]	; 0x28
    38be:	9809      	ldr	r0, [sp, #36]	; 0x24
    38c0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    38c2:	47b8      	blx	r7
    38c4:	1c43      	adds	r3, r0, #1
    38c6:	d1f1      	bne.n	38ac <_printf_float+0x248>
    38c8:	e77a      	b.n	37c0 <_printf_float+0x15c>
    38ca:	0022      	movs	r2, r4
    38cc:	2301      	movs	r3, #1
    38ce:	321a      	adds	r2, #26
    38d0:	990a      	ldr	r1, [sp, #40]	; 0x28
    38d2:	9809      	ldr	r0, [sp, #36]	; 0x24
    38d4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    38d6:	47b8      	blx	r7
    38d8:	1c43      	adds	r3, r0, #1
    38da:	d100      	bne.n	38de <_printf_float+0x27a>
    38dc:	e770      	b.n	37c0 <_printf_float+0x15c>
    38de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    38e0:	3301      	adds	r3, #1
    38e2:	930c      	str	r3, [sp, #48]	; 0x30
    38e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    38e6:	6da2      	ldr	r2, [r4, #88]	; 0x58
    38e8:	990c      	ldr	r1, [sp, #48]	; 0x30
    38ea:	4033      	ands	r3, r6
    38ec:	1ad3      	subs	r3, r2, r3
    38ee:	4299      	cmp	r1, r3
    38f0:	dbeb      	blt.n	38ca <_printf_float+0x266>
    38f2:	18ae      	adds	r6, r5, r2
    38f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    38f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    38f8:	4293      	cmp	r3, r2
    38fa:	db0d      	blt.n	3918 <_printf_float+0x2b4>
    38fc:	6823      	ldr	r3, [r4, #0]
    38fe:	07db      	lsls	r3, r3, #31
    3900:	d40a      	bmi.n	3918 <_printf_float+0x2b4>
    3902:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3904:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3906:	18ed      	adds	r5, r5, r3
    3908:	1bad      	subs	r5, r5, r6
    390a:	1a9b      	subs	r3, r3, r2
    390c:	429d      	cmp	r5, r3
    390e:	dd00      	ble.n	3912 <_printf_float+0x2ae>
    3910:	001d      	movs	r5, r3
    3912:	2d00      	cmp	r5, #0
    3914:	dc09      	bgt.n	392a <_printf_float+0x2c6>
    3916:	e011      	b.n	393c <_printf_float+0x2d8>
    3918:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    391a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    391c:	990a      	ldr	r1, [sp, #40]	; 0x28
    391e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3920:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3922:	47b8      	blx	r7
    3924:	1c43      	adds	r3, r0, #1
    3926:	d1ec      	bne.n	3902 <_printf_float+0x29e>
    3928:	e74a      	b.n	37c0 <_printf_float+0x15c>
    392a:	002b      	movs	r3, r5
    392c:	0032      	movs	r2, r6
    392e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3930:	9809      	ldr	r0, [sp, #36]	; 0x24
    3932:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3934:	47b0      	blx	r6
    3936:	1c43      	adds	r3, r0, #1
    3938:	d100      	bne.n	393c <_printf_float+0x2d8>
    393a:	e741      	b.n	37c0 <_printf_float+0x15c>
    393c:	43ef      	mvns	r7, r5
    393e:	17fb      	asrs	r3, r7, #31
    3940:	2600      	movs	r6, #0
    3942:	930c      	str	r3, [sp, #48]	; 0x30
    3944:	e00a      	b.n	395c <_printf_float+0x2f8>
    3946:	0022      	movs	r2, r4
    3948:	2301      	movs	r3, #1
    394a:	321a      	adds	r2, #26
    394c:	990a      	ldr	r1, [sp, #40]	; 0x28
    394e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3950:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3952:	47b8      	blx	r7
    3954:	1c43      	adds	r3, r0, #1
    3956:	d100      	bne.n	395a <_printf_float+0x2f6>
    3958:	e732      	b.n	37c0 <_printf_float+0x15c>
    395a:	3601      	adds	r6, #1
    395c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    395e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3960:	990c      	ldr	r1, [sp, #48]	; 0x30
    3962:	1a9b      	subs	r3, r3, r2
    3964:	002a      	movs	r2, r5
    3966:	400a      	ands	r2, r1
    3968:	1a9b      	subs	r3, r3, r2
    396a:	429e      	cmp	r6, r3
    396c:	dbeb      	blt.n	3946 <_printf_float+0x2e2>
    396e:	e749      	b.n	3804 <_printf_float+0x1a0>
    3970:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3972:	2b01      	cmp	r3, #1
    3974:	dc02      	bgt.n	397c <_printf_float+0x318>
    3976:	2301      	movs	r3, #1
    3978:	421a      	tst	r2, r3
    397a:	d045      	beq.n	3a08 <_printf_float+0x3a4>
    397c:	2301      	movs	r3, #1
    397e:	002a      	movs	r2, r5
    3980:	990a      	ldr	r1, [sp, #40]	; 0x28
    3982:	9809      	ldr	r0, [sp, #36]	; 0x24
    3984:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3986:	47b8      	blx	r7
    3988:	1c43      	adds	r3, r0, #1
    398a:	d100      	bne.n	398e <_printf_float+0x32a>
    398c:	e718      	b.n	37c0 <_printf_float+0x15c>
    398e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3990:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3992:	990a      	ldr	r1, [sp, #40]	; 0x28
    3994:	9809      	ldr	r0, [sp, #36]	; 0x24
    3996:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3998:	47b8      	blx	r7
    399a:	1c43      	adds	r3, r0, #1
    399c:	d100      	bne.n	39a0 <_printf_float+0x33c>
    399e:	e70f      	b.n	37c0 <_printf_float+0x15c>
    39a0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    39a2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    39a4:	2200      	movs	r2, #0
    39a6:	2300      	movs	r3, #0
    39a8:	f002 fbdc 	bl	6164 <__aeabi_dcmpeq>
    39ac:	2800      	cmp	r0, #0
    39ae:	d001      	beq.n	39b4 <_printf_float+0x350>
    39b0:	2500      	movs	r5, #0
    39b2:	e01a      	b.n	39ea <_printf_float+0x386>
    39b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    39b6:	1c6a      	adds	r2, r5, #1
    39b8:	3b01      	subs	r3, #1
    39ba:	e026      	b.n	3a0a <_printf_float+0x3a6>
    39bc:	7fefffff 	.word	0x7fefffff
    39c0:	00008b3c 	.word	0x00008b3c
    39c4:	00008b38 	.word	0x00008b38
    39c8:	00008b44 	.word	0x00008b44
    39cc:	00008b40 	.word	0x00008b40
    39d0:	00008b48 	.word	0x00008b48
    39d4:	0022      	movs	r2, r4
    39d6:	2301      	movs	r3, #1
    39d8:	321a      	adds	r2, #26
    39da:	990a      	ldr	r1, [sp, #40]	; 0x28
    39dc:	9809      	ldr	r0, [sp, #36]	; 0x24
    39de:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    39e0:	47b8      	blx	r7
    39e2:	1c43      	adds	r3, r0, #1
    39e4:	d100      	bne.n	39e8 <_printf_float+0x384>
    39e6:	e6eb      	b.n	37c0 <_printf_float+0x15c>
    39e8:	3501      	adds	r5, #1
    39ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
    39ec:	3b01      	subs	r3, #1
    39ee:	429d      	cmp	r5, r3
    39f0:	dbf0      	blt.n	39d4 <_printf_float+0x370>
    39f2:	0022      	movs	r2, r4
    39f4:	0033      	movs	r3, r6
    39f6:	3250      	adds	r2, #80	; 0x50
    39f8:	990a      	ldr	r1, [sp, #40]	; 0x28
    39fa:	9809      	ldr	r0, [sp, #36]	; 0x24
    39fc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    39fe:	47a8      	blx	r5
    3a00:	1c43      	adds	r3, r0, #1
    3a02:	d000      	beq.n	3a06 <_printf_float+0x3a2>
    3a04:	e6fe      	b.n	3804 <_printf_float+0x1a0>
    3a06:	e6db      	b.n	37c0 <_printf_float+0x15c>
    3a08:	002a      	movs	r2, r5
    3a0a:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a0e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3a10:	47a8      	blx	r5
    3a12:	1c43      	adds	r3, r0, #1
    3a14:	d1ed      	bne.n	39f2 <_printf_float+0x38e>
    3a16:	e6d3      	b.n	37c0 <_printf_float+0x15c>
    3a18:	0022      	movs	r2, r4
    3a1a:	2301      	movs	r3, #1
    3a1c:	3219      	adds	r2, #25
    3a1e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a20:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a22:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3a24:	47b0      	blx	r6
    3a26:	1c43      	adds	r3, r0, #1
    3a28:	d100      	bne.n	3a2c <_printf_float+0x3c8>
    3a2a:	e6c9      	b.n	37c0 <_printf_float+0x15c>
    3a2c:	3501      	adds	r5, #1
    3a2e:	68e3      	ldr	r3, [r4, #12]
    3a30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3a32:	1a9b      	subs	r3, r3, r2
    3a34:	429d      	cmp	r5, r3
    3a36:	dbef      	blt.n	3a18 <_printf_float+0x3b4>
    3a38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3a3a:	68e0      	ldr	r0, [r4, #12]
    3a3c:	4298      	cmp	r0, r3
    3a3e:	da5e      	bge.n	3afe <_printf_float+0x49a>
    3a40:	0018      	movs	r0, r3
    3a42:	e05c      	b.n	3afe <_printf_float+0x49a>
    3a44:	2380      	movs	r3, #128	; 0x80
    3a46:	6862      	ldr	r2, [r4, #4]
    3a48:	00db      	lsls	r3, r3, #3
    3a4a:	1c51      	adds	r1, r2, #1
    3a4c:	d000      	beq.n	3a50 <_printf_float+0x3ec>
    3a4e:	e66a      	b.n	3726 <_printf_float+0xc2>
    3a50:	3207      	adds	r2, #7
    3a52:	e002      	b.n	3a5a <_printf_float+0x3f6>
    3a54:	2a00      	cmp	r2, #0
    3a56:	d102      	bne.n	3a5e <_printf_float+0x3fa>
    3a58:	2201      	movs	r2, #1
    3a5a:	6062      	str	r2, [r4, #4]
    3a5c:	e669      	b.n	3732 <_printf_float+0xce>
    3a5e:	990c      	ldr	r1, [sp, #48]	; 0x30
    3a60:	a808      	add	r0, sp, #32
    3a62:	430b      	orrs	r3, r1
    3a64:	2100      	movs	r1, #0
    3a66:	9106      	str	r1, [sp, #24]
    3a68:	a912      	add	r1, sp, #72	; 0x48
    3a6a:	9105      	str	r1, [sp, #20]
    3a6c:	a911      	add	r1, sp, #68	; 0x44
    3a6e:	9103      	str	r1, [sp, #12]
    3a70:	2123      	movs	r1, #35	; 0x23
    3a72:	1809      	adds	r1, r1, r0
    3a74:	6023      	str	r3, [r4, #0]
    3a76:	9301      	str	r3, [sp, #4]
    3a78:	9200      	str	r2, [sp, #0]
    3a7a:	002b      	movs	r3, r5
    3a7c:	9704      	str	r7, [sp, #16]
    3a7e:	9102      	str	r1, [sp, #8]
    3a80:	0032      	movs	r2, r6
    3a82:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a84:	f7ff fd57 	bl	3536 <__cvt>
    3a88:	0005      	movs	r5, r0
    3a8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3a8c:	1cda      	adds	r2, r3, #3
    3a8e:	db02      	blt.n	3a96 <_printf_float+0x432>
    3a90:	6862      	ldr	r2, [r4, #4]
    3a92:	4293      	cmp	r3, r2
    3a94:	dd1c      	ble.n	3ad0 <_printf_float+0x46c>
    3a96:	3f02      	subs	r7, #2
    3a98:	b2ff      	uxtb	r7, r7
    3a9a:	e667      	b.n	376c <_printf_float+0x108>
    3a9c:	3301      	adds	r3, #1
    3a9e:	6123      	str	r3, [r4, #16]
    3aa0:	e67a      	b.n	3798 <_printf_float+0x134>
    3aa2:	2f66      	cmp	r7, #102	; 0x66
    3aa4:	d115      	bne.n	3ad2 <_printf_float+0x46e>
    3aa6:	6863      	ldr	r3, [r4, #4]
    3aa8:	2900      	cmp	r1, #0
    3aaa:	dd09      	ble.n	3ac0 <_printf_float+0x45c>
    3aac:	6121      	str	r1, [r4, #16]
    3aae:	2b00      	cmp	r3, #0
    3ab0:	d102      	bne.n	3ab8 <_printf_float+0x454>
    3ab2:	6822      	ldr	r2, [r4, #0]
    3ab4:	07d2      	lsls	r2, r2, #31
    3ab6:	d51e      	bpl.n	3af6 <_printf_float+0x492>
    3ab8:	3301      	adds	r3, #1
    3aba:	1859      	adds	r1, r3, r1
    3abc:	6121      	str	r1, [r4, #16]
    3abe:	e01a      	b.n	3af6 <_printf_float+0x492>
    3ac0:	2b00      	cmp	r3, #0
    3ac2:	d103      	bne.n	3acc <_printf_float+0x468>
    3ac4:	2201      	movs	r2, #1
    3ac6:	6821      	ldr	r1, [r4, #0]
    3ac8:	4211      	tst	r1, r2
    3aca:	d013      	beq.n	3af4 <_printf_float+0x490>
    3acc:	1c9a      	adds	r2, r3, #2
    3ace:	e011      	b.n	3af4 <_printf_float+0x490>
    3ad0:	2767      	movs	r7, #103	; 0x67
    3ad2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3ad4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3ad6:	4293      	cmp	r3, r2
    3ad8:	db06      	blt.n	3ae8 <_printf_float+0x484>
    3ada:	6822      	ldr	r2, [r4, #0]
    3adc:	6123      	str	r3, [r4, #16]
    3ade:	07d2      	lsls	r2, r2, #31
    3ae0:	d509      	bpl.n	3af6 <_printf_float+0x492>
    3ae2:	3301      	adds	r3, #1
    3ae4:	6123      	str	r3, [r4, #16]
    3ae6:	e006      	b.n	3af6 <_printf_float+0x492>
    3ae8:	2101      	movs	r1, #1
    3aea:	2b00      	cmp	r3, #0
    3aec:	dc01      	bgt.n	3af2 <_printf_float+0x48e>
    3aee:	1849      	adds	r1, r1, r1
    3af0:	1ac9      	subs	r1, r1, r3
    3af2:	188a      	adds	r2, r1, r2
    3af4:	6122      	str	r2, [r4, #16]
    3af6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3af8:	2600      	movs	r6, #0
    3afa:	65a3      	str	r3, [r4, #88]	; 0x58
    3afc:	e64c      	b.n	3798 <_printf_float+0x134>
    3afe:	b015      	add	sp, #84	; 0x54
    3b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b02:	46c0      	nop			; (mov r8, r8)

00003b04 <_printf_common>:
    3b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3b06:	0017      	movs	r7, r2
    3b08:	9301      	str	r3, [sp, #4]
    3b0a:	688a      	ldr	r2, [r1, #8]
    3b0c:	690b      	ldr	r3, [r1, #16]
    3b0e:	9000      	str	r0, [sp, #0]
    3b10:	000c      	movs	r4, r1
    3b12:	4293      	cmp	r3, r2
    3b14:	da00      	bge.n	3b18 <_printf_common+0x14>
    3b16:	0013      	movs	r3, r2
    3b18:	0022      	movs	r2, r4
    3b1a:	603b      	str	r3, [r7, #0]
    3b1c:	3243      	adds	r2, #67	; 0x43
    3b1e:	7812      	ldrb	r2, [r2, #0]
    3b20:	2a00      	cmp	r2, #0
    3b22:	d001      	beq.n	3b28 <_printf_common+0x24>
    3b24:	3301      	adds	r3, #1
    3b26:	603b      	str	r3, [r7, #0]
    3b28:	6823      	ldr	r3, [r4, #0]
    3b2a:	069b      	lsls	r3, r3, #26
    3b2c:	d502      	bpl.n	3b34 <_printf_common+0x30>
    3b2e:	683b      	ldr	r3, [r7, #0]
    3b30:	3302      	adds	r3, #2
    3b32:	603b      	str	r3, [r7, #0]
    3b34:	2506      	movs	r5, #6
    3b36:	6823      	ldr	r3, [r4, #0]
    3b38:	401d      	ands	r5, r3
    3b3a:	d01e      	beq.n	3b7a <_printf_common+0x76>
    3b3c:	0023      	movs	r3, r4
    3b3e:	3343      	adds	r3, #67	; 0x43
    3b40:	781b      	ldrb	r3, [r3, #0]
    3b42:	1e5a      	subs	r2, r3, #1
    3b44:	4193      	sbcs	r3, r2
    3b46:	6822      	ldr	r2, [r4, #0]
    3b48:	0692      	lsls	r2, r2, #26
    3b4a:	d51c      	bpl.n	3b86 <_printf_common+0x82>
    3b4c:	2030      	movs	r0, #48	; 0x30
    3b4e:	18e1      	adds	r1, r4, r3
    3b50:	3143      	adds	r1, #67	; 0x43
    3b52:	7008      	strb	r0, [r1, #0]
    3b54:	0021      	movs	r1, r4
    3b56:	1c5a      	adds	r2, r3, #1
    3b58:	3145      	adds	r1, #69	; 0x45
    3b5a:	7809      	ldrb	r1, [r1, #0]
    3b5c:	18a2      	adds	r2, r4, r2
    3b5e:	3243      	adds	r2, #67	; 0x43
    3b60:	3302      	adds	r3, #2
    3b62:	7011      	strb	r1, [r2, #0]
    3b64:	e00f      	b.n	3b86 <_printf_common+0x82>
    3b66:	0022      	movs	r2, r4
    3b68:	2301      	movs	r3, #1
    3b6a:	3219      	adds	r2, #25
    3b6c:	9901      	ldr	r1, [sp, #4]
    3b6e:	9800      	ldr	r0, [sp, #0]
    3b70:	9e08      	ldr	r6, [sp, #32]
    3b72:	47b0      	blx	r6
    3b74:	1c43      	adds	r3, r0, #1
    3b76:	d00e      	beq.n	3b96 <_printf_common+0x92>
    3b78:	3501      	adds	r5, #1
    3b7a:	68e3      	ldr	r3, [r4, #12]
    3b7c:	683a      	ldr	r2, [r7, #0]
    3b7e:	1a9b      	subs	r3, r3, r2
    3b80:	429d      	cmp	r5, r3
    3b82:	dbf0      	blt.n	3b66 <_printf_common+0x62>
    3b84:	e7da      	b.n	3b3c <_printf_common+0x38>
    3b86:	0022      	movs	r2, r4
    3b88:	9901      	ldr	r1, [sp, #4]
    3b8a:	3243      	adds	r2, #67	; 0x43
    3b8c:	9800      	ldr	r0, [sp, #0]
    3b8e:	9d08      	ldr	r5, [sp, #32]
    3b90:	47a8      	blx	r5
    3b92:	1c43      	adds	r3, r0, #1
    3b94:	d102      	bne.n	3b9c <_printf_common+0x98>
    3b96:	2001      	movs	r0, #1
    3b98:	4240      	negs	r0, r0
    3b9a:	e020      	b.n	3bde <_printf_common+0xda>
    3b9c:	2306      	movs	r3, #6
    3b9e:	6820      	ldr	r0, [r4, #0]
    3ba0:	68e1      	ldr	r1, [r4, #12]
    3ba2:	683a      	ldr	r2, [r7, #0]
    3ba4:	4003      	ands	r3, r0
    3ba6:	2500      	movs	r5, #0
    3ba8:	2b04      	cmp	r3, #4
    3baa:	d103      	bne.n	3bb4 <_printf_common+0xb0>
    3bac:	1a8d      	subs	r5, r1, r2
    3bae:	43eb      	mvns	r3, r5
    3bb0:	17db      	asrs	r3, r3, #31
    3bb2:	401d      	ands	r5, r3
    3bb4:	68a3      	ldr	r3, [r4, #8]
    3bb6:	6922      	ldr	r2, [r4, #16]
    3bb8:	4293      	cmp	r3, r2
    3bba:	dd01      	ble.n	3bc0 <_printf_common+0xbc>
    3bbc:	1a9b      	subs	r3, r3, r2
    3bbe:	18ed      	adds	r5, r5, r3
    3bc0:	2700      	movs	r7, #0
    3bc2:	42bd      	cmp	r5, r7
    3bc4:	d00a      	beq.n	3bdc <_printf_common+0xd8>
    3bc6:	0022      	movs	r2, r4
    3bc8:	2301      	movs	r3, #1
    3bca:	321a      	adds	r2, #26
    3bcc:	9901      	ldr	r1, [sp, #4]
    3bce:	9800      	ldr	r0, [sp, #0]
    3bd0:	9e08      	ldr	r6, [sp, #32]
    3bd2:	47b0      	blx	r6
    3bd4:	1c43      	adds	r3, r0, #1
    3bd6:	d0de      	beq.n	3b96 <_printf_common+0x92>
    3bd8:	3701      	adds	r7, #1
    3bda:	e7f2      	b.n	3bc2 <_printf_common+0xbe>
    3bdc:	2000      	movs	r0, #0
    3bde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00003be0 <_printf_i>:
    3be0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3be2:	b08b      	sub	sp, #44	; 0x2c
    3be4:	9206      	str	r2, [sp, #24]
    3be6:	000a      	movs	r2, r1
    3be8:	3243      	adds	r2, #67	; 0x43
    3bea:	9307      	str	r3, [sp, #28]
    3bec:	9005      	str	r0, [sp, #20]
    3bee:	9204      	str	r2, [sp, #16]
    3bf0:	7e0a      	ldrb	r2, [r1, #24]
    3bf2:	000c      	movs	r4, r1
    3bf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3bf6:	2a6e      	cmp	r2, #110	; 0x6e
    3bf8:	d100      	bne.n	3bfc <_printf_i+0x1c>
    3bfa:	e0ab      	b.n	3d54 <_printf_i+0x174>
    3bfc:	d811      	bhi.n	3c22 <_printf_i+0x42>
    3bfe:	2a63      	cmp	r2, #99	; 0x63
    3c00:	d022      	beq.n	3c48 <_printf_i+0x68>
    3c02:	d809      	bhi.n	3c18 <_printf_i+0x38>
    3c04:	2a00      	cmp	r2, #0
    3c06:	d100      	bne.n	3c0a <_printf_i+0x2a>
    3c08:	e0b5      	b.n	3d76 <_printf_i+0x196>
    3c0a:	2a58      	cmp	r2, #88	; 0x58
    3c0c:	d000      	beq.n	3c10 <_printf_i+0x30>
    3c0e:	e0c5      	b.n	3d9c <_printf_i+0x1bc>
    3c10:	3145      	adds	r1, #69	; 0x45
    3c12:	700a      	strb	r2, [r1, #0]
    3c14:	4a81      	ldr	r2, [pc, #516]	; (3e1c <_printf_i+0x23c>)
    3c16:	e04f      	b.n	3cb8 <_printf_i+0xd8>
    3c18:	2a64      	cmp	r2, #100	; 0x64
    3c1a:	d01d      	beq.n	3c58 <_printf_i+0x78>
    3c1c:	2a69      	cmp	r2, #105	; 0x69
    3c1e:	d01b      	beq.n	3c58 <_printf_i+0x78>
    3c20:	e0bc      	b.n	3d9c <_printf_i+0x1bc>
    3c22:	2a73      	cmp	r2, #115	; 0x73
    3c24:	d100      	bne.n	3c28 <_printf_i+0x48>
    3c26:	e0aa      	b.n	3d7e <_printf_i+0x19e>
    3c28:	d809      	bhi.n	3c3e <_printf_i+0x5e>
    3c2a:	2a6f      	cmp	r2, #111	; 0x6f
    3c2c:	d029      	beq.n	3c82 <_printf_i+0xa2>
    3c2e:	2a70      	cmp	r2, #112	; 0x70
    3c30:	d000      	beq.n	3c34 <_printf_i+0x54>
    3c32:	e0b3      	b.n	3d9c <_printf_i+0x1bc>
    3c34:	2220      	movs	r2, #32
    3c36:	6809      	ldr	r1, [r1, #0]
    3c38:	430a      	orrs	r2, r1
    3c3a:	6022      	str	r2, [r4, #0]
    3c3c:	e037      	b.n	3cae <_printf_i+0xce>
    3c3e:	2a75      	cmp	r2, #117	; 0x75
    3c40:	d01f      	beq.n	3c82 <_printf_i+0xa2>
    3c42:	2a78      	cmp	r2, #120	; 0x78
    3c44:	d033      	beq.n	3cae <_printf_i+0xce>
    3c46:	e0a9      	b.n	3d9c <_printf_i+0x1bc>
    3c48:	000e      	movs	r6, r1
    3c4a:	681a      	ldr	r2, [r3, #0]
    3c4c:	3642      	adds	r6, #66	; 0x42
    3c4e:	1d11      	adds	r1, r2, #4
    3c50:	6019      	str	r1, [r3, #0]
    3c52:	6813      	ldr	r3, [r2, #0]
    3c54:	7033      	strb	r3, [r6, #0]
    3c56:	e0a4      	b.n	3da2 <_printf_i+0x1c2>
    3c58:	6821      	ldr	r1, [r4, #0]
    3c5a:	681a      	ldr	r2, [r3, #0]
    3c5c:	0608      	lsls	r0, r1, #24
    3c5e:	d406      	bmi.n	3c6e <_printf_i+0x8e>
    3c60:	0649      	lsls	r1, r1, #25
    3c62:	d504      	bpl.n	3c6e <_printf_i+0x8e>
    3c64:	1d11      	adds	r1, r2, #4
    3c66:	6019      	str	r1, [r3, #0]
    3c68:	2300      	movs	r3, #0
    3c6a:	5ed5      	ldrsh	r5, [r2, r3]
    3c6c:	e002      	b.n	3c74 <_printf_i+0x94>
    3c6e:	1d11      	adds	r1, r2, #4
    3c70:	6019      	str	r1, [r3, #0]
    3c72:	6815      	ldr	r5, [r2, #0]
    3c74:	2d00      	cmp	r5, #0
    3c76:	da3b      	bge.n	3cf0 <_printf_i+0x110>
    3c78:	232d      	movs	r3, #45	; 0x2d
    3c7a:	9a04      	ldr	r2, [sp, #16]
    3c7c:	426d      	negs	r5, r5
    3c7e:	7013      	strb	r3, [r2, #0]
    3c80:	e036      	b.n	3cf0 <_printf_i+0x110>
    3c82:	6821      	ldr	r1, [r4, #0]
    3c84:	681a      	ldr	r2, [r3, #0]
    3c86:	0608      	lsls	r0, r1, #24
    3c88:	d406      	bmi.n	3c98 <_printf_i+0xb8>
    3c8a:	0649      	lsls	r1, r1, #25
    3c8c:	d504      	bpl.n	3c98 <_printf_i+0xb8>
    3c8e:	6815      	ldr	r5, [r2, #0]
    3c90:	1d11      	adds	r1, r2, #4
    3c92:	6019      	str	r1, [r3, #0]
    3c94:	b2ad      	uxth	r5, r5
    3c96:	e002      	b.n	3c9e <_printf_i+0xbe>
    3c98:	1d11      	adds	r1, r2, #4
    3c9a:	6019      	str	r1, [r3, #0]
    3c9c:	6815      	ldr	r5, [r2, #0]
    3c9e:	4b5f      	ldr	r3, [pc, #380]	; (3e1c <_printf_i+0x23c>)
    3ca0:	7e22      	ldrb	r2, [r4, #24]
    3ca2:	9303      	str	r3, [sp, #12]
    3ca4:	2708      	movs	r7, #8
    3ca6:	2a6f      	cmp	r2, #111	; 0x6f
    3ca8:	d01d      	beq.n	3ce6 <_printf_i+0x106>
    3caa:	270a      	movs	r7, #10
    3cac:	e01b      	b.n	3ce6 <_printf_i+0x106>
    3cae:	0022      	movs	r2, r4
    3cb0:	2178      	movs	r1, #120	; 0x78
    3cb2:	3245      	adds	r2, #69	; 0x45
    3cb4:	7011      	strb	r1, [r2, #0]
    3cb6:	4a5a      	ldr	r2, [pc, #360]	; (3e20 <_printf_i+0x240>)
    3cb8:	6819      	ldr	r1, [r3, #0]
    3cba:	9203      	str	r2, [sp, #12]
    3cbc:	1d08      	adds	r0, r1, #4
    3cbe:	6822      	ldr	r2, [r4, #0]
    3cc0:	6018      	str	r0, [r3, #0]
    3cc2:	680d      	ldr	r5, [r1, #0]
    3cc4:	0610      	lsls	r0, r2, #24
    3cc6:	d402      	bmi.n	3cce <_printf_i+0xee>
    3cc8:	0650      	lsls	r0, r2, #25
    3cca:	d500      	bpl.n	3cce <_printf_i+0xee>
    3ccc:	b2ad      	uxth	r5, r5
    3cce:	07d3      	lsls	r3, r2, #31
    3cd0:	d502      	bpl.n	3cd8 <_printf_i+0xf8>
    3cd2:	2320      	movs	r3, #32
    3cd4:	431a      	orrs	r2, r3
    3cd6:	6022      	str	r2, [r4, #0]
    3cd8:	2710      	movs	r7, #16
    3cda:	2d00      	cmp	r5, #0
    3cdc:	d103      	bne.n	3ce6 <_printf_i+0x106>
    3cde:	2320      	movs	r3, #32
    3ce0:	6822      	ldr	r2, [r4, #0]
    3ce2:	439a      	bics	r2, r3
    3ce4:	6022      	str	r2, [r4, #0]
    3ce6:	0023      	movs	r3, r4
    3ce8:	2200      	movs	r2, #0
    3cea:	3343      	adds	r3, #67	; 0x43
    3cec:	701a      	strb	r2, [r3, #0]
    3cee:	e002      	b.n	3cf6 <_printf_i+0x116>
    3cf0:	270a      	movs	r7, #10
    3cf2:	4b4a      	ldr	r3, [pc, #296]	; (3e1c <_printf_i+0x23c>)
    3cf4:	9303      	str	r3, [sp, #12]
    3cf6:	6863      	ldr	r3, [r4, #4]
    3cf8:	60a3      	str	r3, [r4, #8]
    3cfa:	2b00      	cmp	r3, #0
    3cfc:	db09      	blt.n	3d12 <_printf_i+0x132>
    3cfe:	2204      	movs	r2, #4
    3d00:	6821      	ldr	r1, [r4, #0]
    3d02:	4391      	bics	r1, r2
    3d04:	6021      	str	r1, [r4, #0]
    3d06:	2d00      	cmp	r5, #0
    3d08:	d105      	bne.n	3d16 <_printf_i+0x136>
    3d0a:	9e04      	ldr	r6, [sp, #16]
    3d0c:	2b00      	cmp	r3, #0
    3d0e:	d011      	beq.n	3d34 <_printf_i+0x154>
    3d10:	e07b      	b.n	3e0a <_printf_i+0x22a>
    3d12:	2d00      	cmp	r5, #0
    3d14:	d079      	beq.n	3e0a <_printf_i+0x22a>
    3d16:	9e04      	ldr	r6, [sp, #16]
    3d18:	0028      	movs	r0, r5
    3d1a:	0039      	movs	r1, r7
    3d1c:	f002 f922 	bl	5f64 <__aeabi_uidivmod>
    3d20:	9b03      	ldr	r3, [sp, #12]
    3d22:	3e01      	subs	r6, #1
    3d24:	5c5b      	ldrb	r3, [r3, r1]
    3d26:	0028      	movs	r0, r5
    3d28:	7033      	strb	r3, [r6, #0]
    3d2a:	0039      	movs	r1, r7
    3d2c:	f002 f894 	bl	5e58 <__aeabi_uidiv>
    3d30:	1e05      	subs	r5, r0, #0
    3d32:	d1f1      	bne.n	3d18 <_printf_i+0x138>
    3d34:	2f08      	cmp	r7, #8
    3d36:	d109      	bne.n	3d4c <_printf_i+0x16c>
    3d38:	6823      	ldr	r3, [r4, #0]
    3d3a:	07db      	lsls	r3, r3, #31
    3d3c:	d506      	bpl.n	3d4c <_printf_i+0x16c>
    3d3e:	6863      	ldr	r3, [r4, #4]
    3d40:	6922      	ldr	r2, [r4, #16]
    3d42:	4293      	cmp	r3, r2
    3d44:	dc02      	bgt.n	3d4c <_printf_i+0x16c>
    3d46:	2330      	movs	r3, #48	; 0x30
    3d48:	3e01      	subs	r6, #1
    3d4a:	7033      	strb	r3, [r6, #0]
    3d4c:	9b04      	ldr	r3, [sp, #16]
    3d4e:	1b9b      	subs	r3, r3, r6
    3d50:	6123      	str	r3, [r4, #16]
    3d52:	e02b      	b.n	3dac <_printf_i+0x1cc>
    3d54:	6809      	ldr	r1, [r1, #0]
    3d56:	681a      	ldr	r2, [r3, #0]
    3d58:	0608      	lsls	r0, r1, #24
    3d5a:	d407      	bmi.n	3d6c <_printf_i+0x18c>
    3d5c:	0649      	lsls	r1, r1, #25
    3d5e:	d505      	bpl.n	3d6c <_printf_i+0x18c>
    3d60:	1d11      	adds	r1, r2, #4
    3d62:	6019      	str	r1, [r3, #0]
    3d64:	6813      	ldr	r3, [r2, #0]
    3d66:	8aa2      	ldrh	r2, [r4, #20]
    3d68:	801a      	strh	r2, [r3, #0]
    3d6a:	e004      	b.n	3d76 <_printf_i+0x196>
    3d6c:	1d11      	adds	r1, r2, #4
    3d6e:	6019      	str	r1, [r3, #0]
    3d70:	6813      	ldr	r3, [r2, #0]
    3d72:	6962      	ldr	r2, [r4, #20]
    3d74:	601a      	str	r2, [r3, #0]
    3d76:	2300      	movs	r3, #0
    3d78:	9e04      	ldr	r6, [sp, #16]
    3d7a:	6123      	str	r3, [r4, #16]
    3d7c:	e016      	b.n	3dac <_printf_i+0x1cc>
    3d7e:	681a      	ldr	r2, [r3, #0]
    3d80:	1d11      	adds	r1, r2, #4
    3d82:	6019      	str	r1, [r3, #0]
    3d84:	6816      	ldr	r6, [r2, #0]
    3d86:	2100      	movs	r1, #0
    3d88:	6862      	ldr	r2, [r4, #4]
    3d8a:	0030      	movs	r0, r6
    3d8c:	f001 faa6 	bl	52dc <memchr>
    3d90:	2800      	cmp	r0, #0
    3d92:	d001      	beq.n	3d98 <_printf_i+0x1b8>
    3d94:	1b80      	subs	r0, r0, r6
    3d96:	6060      	str	r0, [r4, #4]
    3d98:	6863      	ldr	r3, [r4, #4]
    3d9a:	e003      	b.n	3da4 <_printf_i+0x1c4>
    3d9c:	0026      	movs	r6, r4
    3d9e:	3642      	adds	r6, #66	; 0x42
    3da0:	7032      	strb	r2, [r6, #0]
    3da2:	2301      	movs	r3, #1
    3da4:	6123      	str	r3, [r4, #16]
    3da6:	2300      	movs	r3, #0
    3da8:	9a04      	ldr	r2, [sp, #16]
    3daa:	7013      	strb	r3, [r2, #0]
    3dac:	9b07      	ldr	r3, [sp, #28]
    3dae:	aa09      	add	r2, sp, #36	; 0x24
    3db0:	9300      	str	r3, [sp, #0]
    3db2:	0021      	movs	r1, r4
    3db4:	9b06      	ldr	r3, [sp, #24]
    3db6:	9805      	ldr	r0, [sp, #20]
    3db8:	f7ff fea4 	bl	3b04 <_printf_common>
    3dbc:	1c43      	adds	r3, r0, #1
    3dbe:	d102      	bne.n	3dc6 <_printf_i+0x1e6>
    3dc0:	2001      	movs	r0, #1
    3dc2:	4240      	negs	r0, r0
    3dc4:	e027      	b.n	3e16 <_printf_i+0x236>
    3dc6:	6923      	ldr	r3, [r4, #16]
    3dc8:	0032      	movs	r2, r6
    3dca:	9906      	ldr	r1, [sp, #24]
    3dcc:	9805      	ldr	r0, [sp, #20]
    3dce:	9d07      	ldr	r5, [sp, #28]
    3dd0:	47a8      	blx	r5
    3dd2:	1c43      	adds	r3, r0, #1
    3dd4:	d0f4      	beq.n	3dc0 <_printf_i+0x1e0>
    3dd6:	6823      	ldr	r3, [r4, #0]
    3dd8:	2500      	movs	r5, #0
    3dda:	079b      	lsls	r3, r3, #30
    3ddc:	d40f      	bmi.n	3dfe <_printf_i+0x21e>
    3dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3de0:	68e0      	ldr	r0, [r4, #12]
    3de2:	4298      	cmp	r0, r3
    3de4:	da17      	bge.n	3e16 <_printf_i+0x236>
    3de6:	0018      	movs	r0, r3
    3de8:	e015      	b.n	3e16 <_printf_i+0x236>
    3dea:	0022      	movs	r2, r4
    3dec:	2301      	movs	r3, #1
    3dee:	3219      	adds	r2, #25
    3df0:	9906      	ldr	r1, [sp, #24]
    3df2:	9805      	ldr	r0, [sp, #20]
    3df4:	9e07      	ldr	r6, [sp, #28]
    3df6:	47b0      	blx	r6
    3df8:	1c43      	adds	r3, r0, #1
    3dfa:	d0e1      	beq.n	3dc0 <_printf_i+0x1e0>
    3dfc:	3501      	adds	r5, #1
    3dfe:	68e3      	ldr	r3, [r4, #12]
    3e00:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3e02:	1a9b      	subs	r3, r3, r2
    3e04:	429d      	cmp	r5, r3
    3e06:	dbf0      	blt.n	3dea <_printf_i+0x20a>
    3e08:	e7e9      	b.n	3dde <_printf_i+0x1fe>
    3e0a:	0026      	movs	r6, r4
    3e0c:	9b03      	ldr	r3, [sp, #12]
    3e0e:	3642      	adds	r6, #66	; 0x42
    3e10:	781b      	ldrb	r3, [r3, #0]
    3e12:	7033      	strb	r3, [r6, #0]
    3e14:	e78e      	b.n	3d34 <_printf_i+0x154>
    3e16:	b00b      	add	sp, #44	; 0x2c
    3e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e1a:	46c0      	nop			; (mov r8, r8)
    3e1c:	00008b4a 	.word	0x00008b4a
    3e20:	00008b5b 	.word	0x00008b5b

00003e24 <iprintf>:
    3e24:	b40f      	push	{r0, r1, r2, r3}
    3e26:	4b0b      	ldr	r3, [pc, #44]	; (3e54 <iprintf+0x30>)
    3e28:	b513      	push	{r0, r1, r4, lr}
    3e2a:	681c      	ldr	r4, [r3, #0]
    3e2c:	2c00      	cmp	r4, #0
    3e2e:	d005      	beq.n	3e3c <iprintf+0x18>
    3e30:	69a3      	ldr	r3, [r4, #24]
    3e32:	2b00      	cmp	r3, #0
    3e34:	d102      	bne.n	3e3c <iprintf+0x18>
    3e36:	0020      	movs	r0, r4
    3e38:	f001 f94a 	bl	50d0 <__sinit>
    3e3c:	ab05      	add	r3, sp, #20
    3e3e:	9a04      	ldr	r2, [sp, #16]
    3e40:	68a1      	ldr	r1, [r4, #8]
    3e42:	0020      	movs	r0, r4
    3e44:	9301      	str	r3, [sp, #4]
    3e46:	f001 fe11 	bl	5a6c <_vfiprintf_r>
    3e4a:	bc16      	pop	{r1, r2, r4}
    3e4c:	bc08      	pop	{r3}
    3e4e:	b004      	add	sp, #16
    3e50:	4718      	bx	r3
    3e52:	46c0      	nop			; (mov r8, r8)
    3e54:	2000006c 	.word	0x2000006c

00003e58 <_puts_r>:
    3e58:	b570      	push	{r4, r5, r6, lr}
    3e5a:	0005      	movs	r5, r0
    3e5c:	000e      	movs	r6, r1
    3e5e:	2800      	cmp	r0, #0
    3e60:	d004      	beq.n	3e6c <_puts_r+0x14>
    3e62:	6983      	ldr	r3, [r0, #24]
    3e64:	2b00      	cmp	r3, #0
    3e66:	d101      	bne.n	3e6c <_puts_r+0x14>
    3e68:	f001 f932 	bl	50d0 <__sinit>
    3e6c:	69ab      	ldr	r3, [r5, #24]
    3e6e:	68ac      	ldr	r4, [r5, #8]
    3e70:	2b00      	cmp	r3, #0
    3e72:	d102      	bne.n	3e7a <_puts_r+0x22>
    3e74:	0028      	movs	r0, r5
    3e76:	f001 f92b 	bl	50d0 <__sinit>
    3e7a:	4b25      	ldr	r3, [pc, #148]	; (3f10 <_puts_r+0xb8>)
    3e7c:	429c      	cmp	r4, r3
    3e7e:	d101      	bne.n	3e84 <_puts_r+0x2c>
    3e80:	686c      	ldr	r4, [r5, #4]
    3e82:	e008      	b.n	3e96 <_puts_r+0x3e>
    3e84:	4b23      	ldr	r3, [pc, #140]	; (3f14 <_puts_r+0xbc>)
    3e86:	429c      	cmp	r4, r3
    3e88:	d101      	bne.n	3e8e <_puts_r+0x36>
    3e8a:	68ac      	ldr	r4, [r5, #8]
    3e8c:	e003      	b.n	3e96 <_puts_r+0x3e>
    3e8e:	4b22      	ldr	r3, [pc, #136]	; (3f18 <_puts_r+0xc0>)
    3e90:	429c      	cmp	r4, r3
    3e92:	d100      	bne.n	3e96 <_puts_r+0x3e>
    3e94:	68ec      	ldr	r4, [r5, #12]
    3e96:	89a3      	ldrh	r3, [r4, #12]
    3e98:	071b      	lsls	r3, r3, #28
    3e9a:	d502      	bpl.n	3ea2 <_puts_r+0x4a>
    3e9c:	6923      	ldr	r3, [r4, #16]
    3e9e:	2b00      	cmp	r3, #0
    3ea0:	d111      	bne.n	3ec6 <_puts_r+0x6e>
    3ea2:	0021      	movs	r1, r4
    3ea4:	0028      	movs	r0, r5
    3ea6:	f000 f95d 	bl	4164 <__swsetup_r>
    3eaa:	2800      	cmp	r0, #0
    3eac:	d00b      	beq.n	3ec6 <_puts_r+0x6e>
    3eae:	2001      	movs	r0, #1
    3eb0:	4240      	negs	r0, r0
    3eb2:	e02b      	b.n	3f0c <_puts_r+0xb4>
    3eb4:	3b01      	subs	r3, #1
    3eb6:	3601      	adds	r6, #1
    3eb8:	60a3      	str	r3, [r4, #8]
    3eba:	2b00      	cmp	r3, #0
    3ebc:	db08      	blt.n	3ed0 <_puts_r+0x78>
    3ebe:	6823      	ldr	r3, [r4, #0]
    3ec0:	1c5a      	adds	r2, r3, #1
    3ec2:	6022      	str	r2, [r4, #0]
    3ec4:	7019      	strb	r1, [r3, #0]
    3ec6:	7831      	ldrb	r1, [r6, #0]
    3ec8:	68a3      	ldr	r3, [r4, #8]
    3eca:	2900      	cmp	r1, #0
    3ecc:	d1f2      	bne.n	3eb4 <_puts_r+0x5c>
    3ece:	e00b      	b.n	3ee8 <_puts_r+0x90>
    3ed0:	69a2      	ldr	r2, [r4, #24]
    3ed2:	4293      	cmp	r3, r2
    3ed4:	db01      	blt.n	3eda <_puts_r+0x82>
    3ed6:	290a      	cmp	r1, #10
    3ed8:	d1f1      	bne.n	3ebe <_puts_r+0x66>
    3eda:	0022      	movs	r2, r4
    3edc:	0028      	movs	r0, r5
    3ede:	f000 f8e9 	bl	40b4 <__swbuf_r>
    3ee2:	1c43      	adds	r3, r0, #1
    3ee4:	d1ef      	bne.n	3ec6 <_puts_r+0x6e>
    3ee6:	e7e2      	b.n	3eae <_puts_r+0x56>
    3ee8:	3b01      	subs	r3, #1
    3eea:	60a3      	str	r3, [r4, #8]
    3eec:	2b00      	cmp	r3, #0
    3eee:	da08      	bge.n	3f02 <_puts_r+0xaa>
    3ef0:	0022      	movs	r2, r4
    3ef2:	310a      	adds	r1, #10
    3ef4:	0028      	movs	r0, r5
    3ef6:	f000 f8dd 	bl	40b4 <__swbuf_r>
    3efa:	1c43      	adds	r3, r0, #1
    3efc:	d0d7      	beq.n	3eae <_puts_r+0x56>
    3efe:	200a      	movs	r0, #10
    3f00:	e004      	b.n	3f0c <_puts_r+0xb4>
    3f02:	200a      	movs	r0, #10
    3f04:	6823      	ldr	r3, [r4, #0]
    3f06:	1c5a      	adds	r2, r3, #1
    3f08:	6022      	str	r2, [r4, #0]
    3f0a:	7018      	strb	r0, [r3, #0]
    3f0c:	bd70      	pop	{r4, r5, r6, pc}
    3f0e:	46c0      	nop			; (mov r8, r8)
    3f10:	00008b7c 	.word	0x00008b7c
    3f14:	00008b9c 	.word	0x00008b9c
    3f18:	00008bbc 	.word	0x00008bbc

00003f1c <puts>:
    3f1c:	b510      	push	{r4, lr}
    3f1e:	4b03      	ldr	r3, [pc, #12]	; (3f2c <puts+0x10>)
    3f20:	0001      	movs	r1, r0
    3f22:	6818      	ldr	r0, [r3, #0]
    3f24:	f7ff ff98 	bl	3e58 <_puts_r>
    3f28:	bd10      	pop	{r4, pc}
    3f2a:	46c0      	nop			; (mov r8, r8)
    3f2c:	2000006c 	.word	0x2000006c

00003f30 <setbuf>:
    3f30:	424a      	negs	r2, r1
    3f32:	414a      	adcs	r2, r1
    3f34:	2380      	movs	r3, #128	; 0x80
    3f36:	b510      	push	{r4, lr}
    3f38:	0052      	lsls	r2, r2, #1
    3f3a:	00db      	lsls	r3, r3, #3
    3f3c:	f000 f802 	bl	3f44 <setvbuf>
    3f40:	bd10      	pop	{r4, pc}
	...

00003f44 <setvbuf>:
    3f44:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f46:	001d      	movs	r5, r3
    3f48:	4b51      	ldr	r3, [pc, #324]	; (4090 <setvbuf+0x14c>)
    3f4a:	b085      	sub	sp, #20
    3f4c:	681e      	ldr	r6, [r3, #0]
    3f4e:	0004      	movs	r4, r0
    3f50:	000f      	movs	r7, r1
    3f52:	9200      	str	r2, [sp, #0]
    3f54:	2e00      	cmp	r6, #0
    3f56:	d005      	beq.n	3f64 <setvbuf+0x20>
    3f58:	69b3      	ldr	r3, [r6, #24]
    3f5a:	2b00      	cmp	r3, #0
    3f5c:	d102      	bne.n	3f64 <setvbuf+0x20>
    3f5e:	0030      	movs	r0, r6
    3f60:	f001 f8b6 	bl	50d0 <__sinit>
    3f64:	4b4b      	ldr	r3, [pc, #300]	; (4094 <setvbuf+0x150>)
    3f66:	429c      	cmp	r4, r3
    3f68:	d101      	bne.n	3f6e <setvbuf+0x2a>
    3f6a:	6874      	ldr	r4, [r6, #4]
    3f6c:	e008      	b.n	3f80 <setvbuf+0x3c>
    3f6e:	4b4a      	ldr	r3, [pc, #296]	; (4098 <setvbuf+0x154>)
    3f70:	429c      	cmp	r4, r3
    3f72:	d101      	bne.n	3f78 <setvbuf+0x34>
    3f74:	68b4      	ldr	r4, [r6, #8]
    3f76:	e003      	b.n	3f80 <setvbuf+0x3c>
    3f78:	4b48      	ldr	r3, [pc, #288]	; (409c <setvbuf+0x158>)
    3f7a:	429c      	cmp	r4, r3
    3f7c:	d100      	bne.n	3f80 <setvbuf+0x3c>
    3f7e:	68f4      	ldr	r4, [r6, #12]
    3f80:	9b00      	ldr	r3, [sp, #0]
    3f82:	2b02      	cmp	r3, #2
    3f84:	d005      	beq.n	3f92 <setvbuf+0x4e>
    3f86:	2b01      	cmp	r3, #1
    3f88:	d900      	bls.n	3f8c <setvbuf+0x48>
    3f8a:	e07c      	b.n	4086 <setvbuf+0x142>
    3f8c:	2d00      	cmp	r5, #0
    3f8e:	da00      	bge.n	3f92 <setvbuf+0x4e>
    3f90:	e079      	b.n	4086 <setvbuf+0x142>
    3f92:	0021      	movs	r1, r4
    3f94:	0030      	movs	r0, r6
    3f96:	f001 f82d 	bl	4ff4 <_fflush_r>
    3f9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3f9c:	2900      	cmp	r1, #0
    3f9e:	d008      	beq.n	3fb2 <setvbuf+0x6e>
    3fa0:	0023      	movs	r3, r4
    3fa2:	3344      	adds	r3, #68	; 0x44
    3fa4:	4299      	cmp	r1, r3
    3fa6:	d002      	beq.n	3fae <setvbuf+0x6a>
    3fa8:	0030      	movs	r0, r6
    3faa:	f001 fc9b 	bl	58e4 <_free_r>
    3fae:	2300      	movs	r3, #0
    3fb0:	6363      	str	r3, [r4, #52]	; 0x34
    3fb2:	2300      	movs	r3, #0
    3fb4:	61a3      	str	r3, [r4, #24]
    3fb6:	6063      	str	r3, [r4, #4]
    3fb8:	89a3      	ldrh	r3, [r4, #12]
    3fba:	061b      	lsls	r3, r3, #24
    3fbc:	d503      	bpl.n	3fc6 <setvbuf+0x82>
    3fbe:	6921      	ldr	r1, [r4, #16]
    3fc0:	0030      	movs	r0, r6
    3fc2:	f001 fc8f 	bl	58e4 <_free_r>
    3fc6:	89a2      	ldrh	r2, [r4, #12]
    3fc8:	4b35      	ldr	r3, [pc, #212]	; (40a0 <setvbuf+0x15c>)
    3fca:	4013      	ands	r3, r2
    3fcc:	81a3      	strh	r3, [r4, #12]
    3fce:	9b00      	ldr	r3, [sp, #0]
    3fd0:	2b02      	cmp	r3, #2
    3fd2:	d021      	beq.n	4018 <setvbuf+0xd4>
    3fd4:	ab03      	add	r3, sp, #12
    3fd6:	aa02      	add	r2, sp, #8
    3fd8:	0021      	movs	r1, r4
    3fda:	0030      	movs	r0, r6
    3fdc:	f001 f910 	bl	5200 <__swhatbuf_r>
    3fe0:	89a3      	ldrh	r3, [r4, #12]
    3fe2:	4318      	orrs	r0, r3
    3fe4:	81a0      	strh	r0, [r4, #12]
    3fe6:	2d00      	cmp	r5, #0
    3fe8:	d101      	bne.n	3fee <setvbuf+0xaa>
    3fea:	9d02      	ldr	r5, [sp, #8]
    3fec:	e001      	b.n	3ff2 <setvbuf+0xae>
    3fee:	2f00      	cmp	r7, #0
    3ff0:	d125      	bne.n	403e <setvbuf+0xfa>
    3ff2:	0028      	movs	r0, r5
    3ff4:	f001 f968 	bl	52c8 <malloc>
    3ff8:	9501      	str	r5, [sp, #4]
    3ffa:	1e07      	subs	r7, r0, #0
    3ffc:	d11a      	bne.n	4034 <setvbuf+0xf0>
    3ffe:	9b02      	ldr	r3, [sp, #8]
    4000:	9301      	str	r3, [sp, #4]
    4002:	42ab      	cmp	r3, r5
    4004:	d102      	bne.n	400c <setvbuf+0xc8>
    4006:	2001      	movs	r0, #1
    4008:	4240      	negs	r0, r0
    400a:	e006      	b.n	401a <setvbuf+0xd6>
    400c:	9801      	ldr	r0, [sp, #4]
    400e:	f001 f95b 	bl	52c8 <malloc>
    4012:	1e07      	subs	r7, r0, #0
    4014:	d10e      	bne.n	4034 <setvbuf+0xf0>
    4016:	e7f6      	b.n	4006 <setvbuf+0xc2>
    4018:	2000      	movs	r0, #0
    401a:	2202      	movs	r2, #2
    401c:	89a3      	ldrh	r3, [r4, #12]
    401e:	4313      	orrs	r3, r2
    4020:	81a3      	strh	r3, [r4, #12]
    4022:	2300      	movs	r3, #0
    4024:	60a3      	str	r3, [r4, #8]
    4026:	0023      	movs	r3, r4
    4028:	3347      	adds	r3, #71	; 0x47
    402a:	6023      	str	r3, [r4, #0]
    402c:	6123      	str	r3, [r4, #16]
    402e:	2301      	movs	r3, #1
    4030:	6163      	str	r3, [r4, #20]
    4032:	e02a      	b.n	408a <setvbuf+0x146>
    4034:	2280      	movs	r2, #128	; 0x80
    4036:	89a3      	ldrh	r3, [r4, #12]
    4038:	9d01      	ldr	r5, [sp, #4]
    403a:	4313      	orrs	r3, r2
    403c:	81a3      	strh	r3, [r4, #12]
    403e:	69b3      	ldr	r3, [r6, #24]
    4040:	2b00      	cmp	r3, #0
    4042:	d102      	bne.n	404a <setvbuf+0x106>
    4044:	0030      	movs	r0, r6
    4046:	f001 f843 	bl	50d0 <__sinit>
    404a:	9b00      	ldr	r3, [sp, #0]
    404c:	2b01      	cmp	r3, #1
    404e:	d103      	bne.n	4058 <setvbuf+0x114>
    4050:	89a3      	ldrh	r3, [r4, #12]
    4052:	9a00      	ldr	r2, [sp, #0]
    4054:	431a      	orrs	r2, r3
    4056:	81a2      	strh	r2, [r4, #12]
    4058:	2308      	movs	r3, #8
    405a:	89a2      	ldrh	r2, [r4, #12]
    405c:	6027      	str	r7, [r4, #0]
    405e:	4013      	ands	r3, r2
    4060:	6127      	str	r7, [r4, #16]
    4062:	6165      	str	r5, [r4, #20]
    4064:	1e18      	subs	r0, r3, #0
    4066:	d00c      	beq.n	4082 <setvbuf+0x13e>
    4068:	2301      	movs	r3, #1
    406a:	401a      	ands	r2, r3
    406c:	2300      	movs	r3, #0
    406e:	1e10      	subs	r0, r2, #0
    4070:	4298      	cmp	r0, r3
    4072:	d004      	beq.n	407e <setvbuf+0x13a>
    4074:	426d      	negs	r5, r5
    4076:	60a3      	str	r3, [r4, #8]
    4078:	61a5      	str	r5, [r4, #24]
    407a:	0018      	movs	r0, r3
    407c:	e005      	b.n	408a <setvbuf+0x146>
    407e:	60a5      	str	r5, [r4, #8]
    4080:	e003      	b.n	408a <setvbuf+0x146>
    4082:	60a3      	str	r3, [r4, #8]
    4084:	e001      	b.n	408a <setvbuf+0x146>
    4086:	2001      	movs	r0, #1
    4088:	4240      	negs	r0, r0
    408a:	b005      	add	sp, #20
    408c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    408e:	46c0      	nop			; (mov r8, r8)
    4090:	2000006c 	.word	0x2000006c
    4094:	00008b7c 	.word	0x00008b7c
    4098:	00008b9c 	.word	0x00008b9c
    409c:	00008bbc 	.word	0x00008bbc
    40a0:	fffff35c 	.word	0xfffff35c

000040a4 <strlen>:
    40a4:	2300      	movs	r3, #0
    40a6:	5cc2      	ldrb	r2, [r0, r3]
    40a8:	3301      	adds	r3, #1
    40aa:	2a00      	cmp	r2, #0
    40ac:	d1fb      	bne.n	40a6 <strlen+0x2>
    40ae:	1e58      	subs	r0, r3, #1
    40b0:	4770      	bx	lr
	...

000040b4 <__swbuf_r>:
    40b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40b6:	0005      	movs	r5, r0
    40b8:	000f      	movs	r7, r1
    40ba:	0014      	movs	r4, r2
    40bc:	2800      	cmp	r0, #0
    40be:	d004      	beq.n	40ca <__swbuf_r+0x16>
    40c0:	6983      	ldr	r3, [r0, #24]
    40c2:	2b00      	cmp	r3, #0
    40c4:	d101      	bne.n	40ca <__swbuf_r+0x16>
    40c6:	f001 f803 	bl	50d0 <__sinit>
    40ca:	4b23      	ldr	r3, [pc, #140]	; (4158 <__swbuf_r+0xa4>)
    40cc:	429c      	cmp	r4, r3
    40ce:	d101      	bne.n	40d4 <__swbuf_r+0x20>
    40d0:	686c      	ldr	r4, [r5, #4]
    40d2:	e008      	b.n	40e6 <__swbuf_r+0x32>
    40d4:	4b21      	ldr	r3, [pc, #132]	; (415c <__swbuf_r+0xa8>)
    40d6:	429c      	cmp	r4, r3
    40d8:	d101      	bne.n	40de <__swbuf_r+0x2a>
    40da:	68ac      	ldr	r4, [r5, #8]
    40dc:	e003      	b.n	40e6 <__swbuf_r+0x32>
    40de:	4b20      	ldr	r3, [pc, #128]	; (4160 <__swbuf_r+0xac>)
    40e0:	429c      	cmp	r4, r3
    40e2:	d100      	bne.n	40e6 <__swbuf_r+0x32>
    40e4:	68ec      	ldr	r4, [r5, #12]
    40e6:	69a3      	ldr	r3, [r4, #24]
    40e8:	60a3      	str	r3, [r4, #8]
    40ea:	89a3      	ldrh	r3, [r4, #12]
    40ec:	071b      	lsls	r3, r3, #28
    40ee:	d50a      	bpl.n	4106 <__swbuf_r+0x52>
    40f0:	6923      	ldr	r3, [r4, #16]
    40f2:	2b00      	cmp	r3, #0
    40f4:	d007      	beq.n	4106 <__swbuf_r+0x52>
    40f6:	6823      	ldr	r3, [r4, #0]
    40f8:	6922      	ldr	r2, [r4, #16]
    40fa:	b2fe      	uxtb	r6, r7
    40fc:	1a98      	subs	r0, r3, r2
    40fe:	6963      	ldr	r3, [r4, #20]
    4100:	4298      	cmp	r0, r3
    4102:	db0f      	blt.n	4124 <__swbuf_r+0x70>
    4104:	e008      	b.n	4118 <__swbuf_r+0x64>
    4106:	0021      	movs	r1, r4
    4108:	0028      	movs	r0, r5
    410a:	f000 f82b 	bl	4164 <__swsetup_r>
    410e:	2800      	cmp	r0, #0
    4110:	d0f1      	beq.n	40f6 <__swbuf_r+0x42>
    4112:	2001      	movs	r0, #1
    4114:	4240      	negs	r0, r0
    4116:	e01d      	b.n	4154 <__swbuf_r+0xa0>
    4118:	0021      	movs	r1, r4
    411a:	0028      	movs	r0, r5
    411c:	f000 ff6a 	bl	4ff4 <_fflush_r>
    4120:	2800      	cmp	r0, #0
    4122:	d1f6      	bne.n	4112 <__swbuf_r+0x5e>
    4124:	68a3      	ldr	r3, [r4, #8]
    4126:	3001      	adds	r0, #1
    4128:	3b01      	subs	r3, #1
    412a:	60a3      	str	r3, [r4, #8]
    412c:	6823      	ldr	r3, [r4, #0]
    412e:	1c5a      	adds	r2, r3, #1
    4130:	6022      	str	r2, [r4, #0]
    4132:	701f      	strb	r7, [r3, #0]
    4134:	6963      	ldr	r3, [r4, #20]
    4136:	4298      	cmp	r0, r3
    4138:	d005      	beq.n	4146 <__swbuf_r+0x92>
    413a:	89a3      	ldrh	r3, [r4, #12]
    413c:	0030      	movs	r0, r6
    413e:	07db      	lsls	r3, r3, #31
    4140:	d508      	bpl.n	4154 <__swbuf_r+0xa0>
    4142:	2e0a      	cmp	r6, #10
    4144:	d106      	bne.n	4154 <__swbuf_r+0xa0>
    4146:	0021      	movs	r1, r4
    4148:	0028      	movs	r0, r5
    414a:	f000 ff53 	bl	4ff4 <_fflush_r>
    414e:	2800      	cmp	r0, #0
    4150:	d1df      	bne.n	4112 <__swbuf_r+0x5e>
    4152:	0030      	movs	r0, r6
    4154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4156:	46c0      	nop			; (mov r8, r8)
    4158:	00008b7c 	.word	0x00008b7c
    415c:	00008b9c 	.word	0x00008b9c
    4160:	00008bbc 	.word	0x00008bbc

00004164 <__swsetup_r>:
    4164:	4b36      	ldr	r3, [pc, #216]	; (4240 <__swsetup_r+0xdc>)
    4166:	b570      	push	{r4, r5, r6, lr}
    4168:	681d      	ldr	r5, [r3, #0]
    416a:	0006      	movs	r6, r0
    416c:	000c      	movs	r4, r1
    416e:	2d00      	cmp	r5, #0
    4170:	d005      	beq.n	417e <__swsetup_r+0x1a>
    4172:	69ab      	ldr	r3, [r5, #24]
    4174:	2b00      	cmp	r3, #0
    4176:	d102      	bne.n	417e <__swsetup_r+0x1a>
    4178:	0028      	movs	r0, r5
    417a:	f000 ffa9 	bl	50d0 <__sinit>
    417e:	4b31      	ldr	r3, [pc, #196]	; (4244 <__swsetup_r+0xe0>)
    4180:	429c      	cmp	r4, r3
    4182:	d101      	bne.n	4188 <__swsetup_r+0x24>
    4184:	686c      	ldr	r4, [r5, #4]
    4186:	e008      	b.n	419a <__swsetup_r+0x36>
    4188:	4b2f      	ldr	r3, [pc, #188]	; (4248 <__swsetup_r+0xe4>)
    418a:	429c      	cmp	r4, r3
    418c:	d101      	bne.n	4192 <__swsetup_r+0x2e>
    418e:	68ac      	ldr	r4, [r5, #8]
    4190:	e003      	b.n	419a <__swsetup_r+0x36>
    4192:	4b2e      	ldr	r3, [pc, #184]	; (424c <__swsetup_r+0xe8>)
    4194:	429c      	cmp	r4, r3
    4196:	d100      	bne.n	419a <__swsetup_r+0x36>
    4198:	68ec      	ldr	r4, [r5, #12]
    419a:	220c      	movs	r2, #12
    419c:	5ea3      	ldrsh	r3, [r4, r2]
    419e:	b29a      	uxth	r2, r3
    41a0:	0711      	lsls	r1, r2, #28
    41a2:	d423      	bmi.n	41ec <__swsetup_r+0x88>
    41a4:	06d1      	lsls	r1, r2, #27
    41a6:	d407      	bmi.n	41b8 <__swsetup_r+0x54>
    41a8:	2209      	movs	r2, #9
    41aa:	2001      	movs	r0, #1
    41ac:	6032      	str	r2, [r6, #0]
    41ae:	3237      	adds	r2, #55	; 0x37
    41b0:	4313      	orrs	r3, r2
    41b2:	81a3      	strh	r3, [r4, #12]
    41b4:	4240      	negs	r0, r0
    41b6:	e042      	b.n	423e <__swsetup_r+0xda>
    41b8:	0753      	lsls	r3, r2, #29
    41ba:	d513      	bpl.n	41e4 <__swsetup_r+0x80>
    41bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    41be:	2900      	cmp	r1, #0
    41c0:	d008      	beq.n	41d4 <__swsetup_r+0x70>
    41c2:	0023      	movs	r3, r4
    41c4:	3344      	adds	r3, #68	; 0x44
    41c6:	4299      	cmp	r1, r3
    41c8:	d002      	beq.n	41d0 <__swsetup_r+0x6c>
    41ca:	0030      	movs	r0, r6
    41cc:	f001 fb8a 	bl	58e4 <_free_r>
    41d0:	2300      	movs	r3, #0
    41d2:	6363      	str	r3, [r4, #52]	; 0x34
    41d4:	2224      	movs	r2, #36	; 0x24
    41d6:	89a3      	ldrh	r3, [r4, #12]
    41d8:	4393      	bics	r3, r2
    41da:	81a3      	strh	r3, [r4, #12]
    41dc:	2300      	movs	r3, #0
    41de:	6063      	str	r3, [r4, #4]
    41e0:	6923      	ldr	r3, [r4, #16]
    41e2:	6023      	str	r3, [r4, #0]
    41e4:	2208      	movs	r2, #8
    41e6:	89a3      	ldrh	r3, [r4, #12]
    41e8:	4313      	orrs	r3, r2
    41ea:	81a3      	strh	r3, [r4, #12]
    41ec:	6923      	ldr	r3, [r4, #16]
    41ee:	2b00      	cmp	r3, #0
    41f0:	d10b      	bne.n	420a <__swsetup_r+0xa6>
    41f2:	23a0      	movs	r3, #160	; 0xa0
    41f4:	89a2      	ldrh	r2, [r4, #12]
    41f6:	009b      	lsls	r3, r3, #2
    41f8:	4013      	ands	r3, r2
    41fa:	2280      	movs	r2, #128	; 0x80
    41fc:	0092      	lsls	r2, r2, #2
    41fe:	4293      	cmp	r3, r2
    4200:	d003      	beq.n	420a <__swsetup_r+0xa6>
    4202:	0021      	movs	r1, r4
    4204:	0030      	movs	r0, r6
    4206:	f001 f821 	bl	524c <__smakebuf_r>
    420a:	2301      	movs	r3, #1
    420c:	89a2      	ldrh	r2, [r4, #12]
    420e:	4013      	ands	r3, r2
    4210:	d005      	beq.n	421e <__swsetup_r+0xba>
    4212:	2300      	movs	r3, #0
    4214:	60a3      	str	r3, [r4, #8]
    4216:	6963      	ldr	r3, [r4, #20]
    4218:	425b      	negs	r3, r3
    421a:	61a3      	str	r3, [r4, #24]
    421c:	e003      	b.n	4226 <__swsetup_r+0xc2>
    421e:	0792      	lsls	r2, r2, #30
    4220:	d400      	bmi.n	4224 <__swsetup_r+0xc0>
    4222:	6963      	ldr	r3, [r4, #20]
    4224:	60a3      	str	r3, [r4, #8]
    4226:	2000      	movs	r0, #0
    4228:	6923      	ldr	r3, [r4, #16]
    422a:	4283      	cmp	r3, r0
    422c:	d107      	bne.n	423e <__swsetup_r+0xda>
    422e:	220c      	movs	r2, #12
    4230:	5ea3      	ldrsh	r3, [r4, r2]
    4232:	061a      	lsls	r2, r3, #24
    4234:	d503      	bpl.n	423e <__swsetup_r+0xda>
    4236:	2240      	movs	r2, #64	; 0x40
    4238:	4313      	orrs	r3, r2
    423a:	81a3      	strh	r3, [r4, #12]
    423c:	3801      	subs	r0, #1
    423e:	bd70      	pop	{r4, r5, r6, pc}
    4240:	2000006c 	.word	0x2000006c
    4244:	00008b7c 	.word	0x00008b7c
    4248:	00008b9c 	.word	0x00008b9c
    424c:	00008bbc 	.word	0x00008bbc

00004250 <quorem>:
    4250:	b5f0      	push	{r4, r5, r6, r7, lr}
    4252:	6903      	ldr	r3, [r0, #16]
    4254:	690c      	ldr	r4, [r1, #16]
    4256:	b089      	sub	sp, #36	; 0x24
    4258:	0007      	movs	r7, r0
    425a:	9105      	str	r1, [sp, #20]
    425c:	2600      	movs	r6, #0
    425e:	429c      	cmp	r4, r3
    4260:	dc79      	bgt.n	4356 <quorem+0x106>
    4262:	000b      	movs	r3, r1
    4264:	3c01      	subs	r4, #1
    4266:	3314      	adds	r3, #20
    4268:	00a5      	lsls	r5, r4, #2
    426a:	9303      	str	r3, [sp, #12]
    426c:	195b      	adds	r3, r3, r5
    426e:	9304      	str	r3, [sp, #16]
    4270:	0003      	movs	r3, r0
    4272:	3314      	adds	r3, #20
    4274:	9302      	str	r3, [sp, #8]
    4276:	195d      	adds	r5, r3, r5
    4278:	9b04      	ldr	r3, [sp, #16]
    427a:	6828      	ldr	r0, [r5, #0]
    427c:	681b      	ldr	r3, [r3, #0]
    427e:	1c59      	adds	r1, r3, #1
    4280:	9301      	str	r3, [sp, #4]
    4282:	f001 fde9 	bl	5e58 <__aeabi_uidiv>
    4286:	9001      	str	r0, [sp, #4]
    4288:	42b0      	cmp	r0, r6
    428a:	d033      	beq.n	42f4 <quorem+0xa4>
    428c:	9b03      	ldr	r3, [sp, #12]
    428e:	9802      	ldr	r0, [sp, #8]
    4290:	469c      	mov	ip, r3
    4292:	9606      	str	r6, [sp, #24]
    4294:	4663      	mov	r3, ip
    4296:	cb04      	ldmia	r3!, {r2}
    4298:	469c      	mov	ip, r3
    429a:	9b01      	ldr	r3, [sp, #4]
    429c:	b291      	uxth	r1, r2
    429e:	4359      	muls	r1, r3
    42a0:	0c12      	lsrs	r2, r2, #16
    42a2:	435a      	muls	r2, r3
    42a4:	1989      	adds	r1, r1, r6
    42a6:	0c0b      	lsrs	r3, r1, #16
    42a8:	18d3      	adds	r3, r2, r3
    42aa:	9307      	str	r3, [sp, #28]
    42ac:	9a06      	ldr	r2, [sp, #24]
    42ae:	0c1e      	lsrs	r6, r3, #16
    42b0:	8803      	ldrh	r3, [r0, #0]
    42b2:	b289      	uxth	r1, r1
    42b4:	189b      	adds	r3, r3, r2
    42b6:	6802      	ldr	r2, [r0, #0]
    42b8:	1a5b      	subs	r3, r3, r1
    42ba:	0c11      	lsrs	r1, r2, #16
    42bc:	466a      	mov	r2, sp
    42be:	8b92      	ldrh	r2, [r2, #28]
    42c0:	1a8a      	subs	r2, r1, r2
    42c2:	1419      	asrs	r1, r3, #16
    42c4:	1852      	adds	r2, r2, r1
    42c6:	1411      	asrs	r1, r2, #16
    42c8:	b29b      	uxth	r3, r3
    42ca:	0412      	lsls	r2, r2, #16
    42cc:	4313      	orrs	r3, r2
    42ce:	c008      	stmia	r0!, {r3}
    42d0:	9b04      	ldr	r3, [sp, #16]
    42d2:	9106      	str	r1, [sp, #24]
    42d4:	4563      	cmp	r3, ip
    42d6:	d2dd      	bcs.n	4294 <quorem+0x44>
    42d8:	682b      	ldr	r3, [r5, #0]
    42da:	2b00      	cmp	r3, #0
    42dc:	d10a      	bne.n	42f4 <quorem+0xa4>
    42de:	9b02      	ldr	r3, [sp, #8]
    42e0:	3d04      	subs	r5, #4
    42e2:	42ab      	cmp	r3, r5
    42e4:	d301      	bcc.n	42ea <quorem+0x9a>
    42e6:	613c      	str	r4, [r7, #16]
    42e8:	e004      	b.n	42f4 <quorem+0xa4>
    42ea:	682b      	ldr	r3, [r5, #0]
    42ec:	2b00      	cmp	r3, #0
    42ee:	d1fa      	bne.n	42e6 <quorem+0x96>
    42f0:	3c01      	subs	r4, #1
    42f2:	e7f4      	b.n	42de <quorem+0x8e>
    42f4:	9905      	ldr	r1, [sp, #20]
    42f6:	0038      	movs	r0, r7
    42f8:	f001 fa0c 	bl	5714 <__mcmp>
    42fc:	2800      	cmp	r0, #0
    42fe:	db29      	blt.n	4354 <quorem+0x104>
    4300:	2000      	movs	r0, #0
    4302:	9b01      	ldr	r3, [sp, #4]
    4304:	9902      	ldr	r1, [sp, #8]
    4306:	3301      	adds	r3, #1
    4308:	9a03      	ldr	r2, [sp, #12]
    430a:	9301      	str	r3, [sp, #4]
    430c:	ca40      	ldmia	r2!, {r6}
    430e:	880b      	ldrh	r3, [r1, #0]
    4310:	1818      	adds	r0, r3, r0
    4312:	b2b3      	uxth	r3, r6
    4314:	1ac3      	subs	r3, r0, r3
    4316:	6808      	ldr	r0, [r1, #0]
    4318:	0c36      	lsrs	r6, r6, #16
    431a:	0c00      	lsrs	r0, r0, #16
    431c:	1b80      	subs	r0, r0, r6
    431e:	141d      	asrs	r5, r3, #16
    4320:	1945      	adds	r5, r0, r5
    4322:	1428      	asrs	r0, r5, #16
    4324:	b29b      	uxth	r3, r3
    4326:	042d      	lsls	r5, r5, #16
    4328:	432b      	orrs	r3, r5
    432a:	c108      	stmia	r1!, {r3}
    432c:	9b04      	ldr	r3, [sp, #16]
    432e:	4293      	cmp	r3, r2
    4330:	d2ec      	bcs.n	430c <quorem+0xbc>
    4332:	9a02      	ldr	r2, [sp, #8]
    4334:	00a3      	lsls	r3, r4, #2
    4336:	18d3      	adds	r3, r2, r3
    4338:	681a      	ldr	r2, [r3, #0]
    433a:	2a00      	cmp	r2, #0
    433c:	d10a      	bne.n	4354 <quorem+0x104>
    433e:	9a02      	ldr	r2, [sp, #8]
    4340:	3b04      	subs	r3, #4
    4342:	429a      	cmp	r2, r3
    4344:	d301      	bcc.n	434a <quorem+0xfa>
    4346:	613c      	str	r4, [r7, #16]
    4348:	e004      	b.n	4354 <quorem+0x104>
    434a:	681a      	ldr	r2, [r3, #0]
    434c:	2a00      	cmp	r2, #0
    434e:	d1fa      	bne.n	4346 <quorem+0xf6>
    4350:	3c01      	subs	r4, #1
    4352:	e7f4      	b.n	433e <quorem+0xee>
    4354:	9e01      	ldr	r6, [sp, #4]
    4356:	0030      	movs	r0, r6
    4358:	b009      	add	sp, #36	; 0x24
    435a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000435c <_dtoa_r>:
    435c:	b5f0      	push	{r4, r5, r6, r7, lr}
    435e:	0016      	movs	r6, r2
    4360:	001f      	movs	r7, r3
    4362:	6a44      	ldr	r4, [r0, #36]	; 0x24
    4364:	b09d      	sub	sp, #116	; 0x74
    4366:	9004      	str	r0, [sp, #16]
    4368:	9d25      	ldr	r5, [sp, #148]	; 0x94
    436a:	9606      	str	r6, [sp, #24]
    436c:	9707      	str	r7, [sp, #28]
    436e:	2c00      	cmp	r4, #0
    4370:	d108      	bne.n	4384 <_dtoa_r+0x28>
    4372:	2010      	movs	r0, #16
    4374:	f000 ffa8 	bl	52c8 <malloc>
    4378:	9b04      	ldr	r3, [sp, #16]
    437a:	6258      	str	r0, [r3, #36]	; 0x24
    437c:	6044      	str	r4, [r0, #4]
    437e:	6084      	str	r4, [r0, #8]
    4380:	6004      	str	r4, [r0, #0]
    4382:	60c4      	str	r4, [r0, #12]
    4384:	9b04      	ldr	r3, [sp, #16]
    4386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4388:	6819      	ldr	r1, [r3, #0]
    438a:	2900      	cmp	r1, #0
    438c:	d00b      	beq.n	43a6 <_dtoa_r+0x4a>
    438e:	685a      	ldr	r2, [r3, #4]
    4390:	2301      	movs	r3, #1
    4392:	4093      	lsls	r3, r2
    4394:	604a      	str	r2, [r1, #4]
    4396:	608b      	str	r3, [r1, #8]
    4398:	9804      	ldr	r0, [sp, #16]
    439a:	f000 ffe2 	bl	5362 <_Bfree>
    439e:	2200      	movs	r2, #0
    43a0:	9b04      	ldr	r3, [sp, #16]
    43a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    43a4:	601a      	str	r2, [r3, #0]
    43a6:	9b07      	ldr	r3, [sp, #28]
    43a8:	2b00      	cmp	r3, #0
    43aa:	da05      	bge.n	43b8 <_dtoa_r+0x5c>
    43ac:	2301      	movs	r3, #1
    43ae:	602b      	str	r3, [r5, #0]
    43b0:	007b      	lsls	r3, r7, #1
    43b2:	085b      	lsrs	r3, r3, #1
    43b4:	9307      	str	r3, [sp, #28]
    43b6:	e001      	b.n	43bc <_dtoa_r+0x60>
    43b8:	2300      	movs	r3, #0
    43ba:	602b      	str	r3, [r5, #0]
    43bc:	9c07      	ldr	r4, [sp, #28]
    43be:	4bc8      	ldr	r3, [pc, #800]	; (46e0 <_dtoa_r+0x384>)
    43c0:	0022      	movs	r2, r4
    43c2:	9319      	str	r3, [sp, #100]	; 0x64
    43c4:	401a      	ands	r2, r3
    43c6:	429a      	cmp	r2, r3
    43c8:	d119      	bne.n	43fe <_dtoa_r+0xa2>
    43ca:	4bc6      	ldr	r3, [pc, #792]	; (46e4 <_dtoa_r+0x388>)
    43cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
    43ce:	6013      	str	r3, [r2, #0]
    43d0:	9a06      	ldr	r2, [sp, #24]
    43d2:	4bc5      	ldr	r3, [pc, #788]	; (46e8 <_dtoa_r+0x38c>)
    43d4:	2a00      	cmp	r2, #0
    43d6:	d102      	bne.n	43de <_dtoa_r+0x82>
    43d8:	0324      	lsls	r4, r4, #12
    43da:	d100      	bne.n	43de <_dtoa_r+0x82>
    43dc:	4bc3      	ldr	r3, [pc, #780]	; (46ec <_dtoa_r+0x390>)
    43de:	9a26      	ldr	r2, [sp, #152]	; 0x98
    43e0:	0018      	movs	r0, r3
    43e2:	2a00      	cmp	r2, #0
    43e4:	d101      	bne.n	43ea <_dtoa_r+0x8e>
    43e6:	f000 fd7d 	bl	4ee4 <_dtoa_r+0xb88>
    43ea:	78d9      	ldrb	r1, [r3, #3]
    43ec:	1cda      	adds	r2, r3, #3
    43ee:	2900      	cmp	r1, #0
    43f0:	d000      	beq.n	43f4 <_dtoa_r+0x98>
    43f2:	3205      	adds	r2, #5
    43f4:	9926      	ldr	r1, [sp, #152]	; 0x98
    43f6:	0018      	movs	r0, r3
    43f8:	600a      	str	r2, [r1, #0]
    43fa:	f000 fd73 	bl	4ee4 <_dtoa_r+0xb88>
    43fe:	9e06      	ldr	r6, [sp, #24]
    4400:	9f07      	ldr	r7, [sp, #28]
    4402:	2200      	movs	r2, #0
    4404:	2300      	movs	r3, #0
    4406:	0030      	movs	r0, r6
    4408:	0039      	movs	r1, r7
    440a:	f001 feab 	bl	6164 <__aeabi_dcmpeq>
    440e:	1e05      	subs	r5, r0, #0
    4410:	d00e      	beq.n	4430 <_dtoa_r+0xd4>
    4412:	2301      	movs	r3, #1
    4414:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4416:	6013      	str	r3, [r2, #0]
    4418:	4bb5      	ldr	r3, [pc, #724]	; (46f0 <_dtoa_r+0x394>)
    441a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    441c:	0018      	movs	r0, r3
    441e:	2a00      	cmp	r2, #0
    4420:	d101      	bne.n	4426 <_dtoa_r+0xca>
    4422:	f000 fd5f 	bl	4ee4 <_dtoa_r+0xb88>
    4426:	4ab3      	ldr	r2, [pc, #716]	; (46f4 <_dtoa_r+0x398>)
    4428:	9926      	ldr	r1, [sp, #152]	; 0x98
    442a:	600a      	str	r2, [r1, #0]
    442c:	f000 fd5a 	bl	4ee4 <_dtoa_r+0xb88>
    4430:	ab1a      	add	r3, sp, #104	; 0x68
    4432:	9301      	str	r3, [sp, #4]
    4434:	ab1b      	add	r3, sp, #108	; 0x6c
    4436:	9300      	str	r3, [sp, #0]
    4438:	0032      	movs	r2, r6
    443a:	003b      	movs	r3, r7
    443c:	9804      	ldr	r0, [sp, #16]
    443e:	f001 f9ef 	bl	5820 <__d2b>
    4442:	0063      	lsls	r3, r4, #1
    4444:	9005      	str	r0, [sp, #20]
    4446:	0d5b      	lsrs	r3, r3, #21
    4448:	d009      	beq.n	445e <_dtoa_r+0x102>
    444a:	033a      	lsls	r2, r7, #12
    444c:	4caa      	ldr	r4, [pc, #680]	; (46f8 <_dtoa_r+0x39c>)
    444e:	0b12      	lsrs	r2, r2, #12
    4450:	4314      	orrs	r4, r2
    4452:	4aaa      	ldr	r2, [pc, #680]	; (46fc <_dtoa_r+0x3a0>)
    4454:	0030      	movs	r0, r6
    4456:	0021      	movs	r1, r4
    4458:	189e      	adds	r6, r3, r2
    445a:	9517      	str	r5, [sp, #92]	; 0x5c
    445c:	e01a      	b.n	4494 <_dtoa_r+0x138>
    445e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4460:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    4462:	189e      	adds	r6, r3, r2
    4464:	4ba6      	ldr	r3, [pc, #664]	; (4700 <_dtoa_r+0x3a4>)
    4466:	18f3      	adds	r3, r6, r3
    4468:	2b20      	cmp	r3, #32
    446a:	dd08      	ble.n	447e <_dtoa_r+0x122>
    446c:	4aa5      	ldr	r2, [pc, #660]	; (4704 <_dtoa_r+0x3a8>)
    446e:	9806      	ldr	r0, [sp, #24]
    4470:	18b2      	adds	r2, r6, r2
    4472:	40d0      	lsrs	r0, r2
    4474:	2240      	movs	r2, #64	; 0x40
    4476:	1ad3      	subs	r3, r2, r3
    4478:	409c      	lsls	r4, r3
    447a:	4320      	orrs	r0, r4
    447c:	e003      	b.n	4486 <_dtoa_r+0x12a>
    447e:	2220      	movs	r2, #32
    4480:	9806      	ldr	r0, [sp, #24]
    4482:	1ad3      	subs	r3, r2, r3
    4484:	4098      	lsls	r0, r3
    4486:	f004 f953 	bl	8730 <__aeabi_ui2d>
    448a:	2301      	movs	r3, #1
    448c:	4c9e      	ldr	r4, [pc, #632]	; (4708 <_dtoa_r+0x3ac>)
    448e:	3e01      	subs	r6, #1
    4490:	1909      	adds	r1, r1, r4
    4492:	9317      	str	r3, [sp, #92]	; 0x5c
    4494:	2200      	movs	r2, #0
    4496:	4b9d      	ldr	r3, [pc, #628]	; (470c <_dtoa_r+0x3b0>)
    4498:	f003 fd5e 	bl	7f58 <__aeabi_dsub>
    449c:	4a9c      	ldr	r2, [pc, #624]	; (4710 <_dtoa_r+0x3b4>)
    449e:	4b9d      	ldr	r3, [pc, #628]	; (4714 <_dtoa_r+0x3b8>)
    44a0:	f003 fae0 	bl	7a64 <__aeabi_dmul>
    44a4:	4a9c      	ldr	r2, [pc, #624]	; (4718 <_dtoa_r+0x3bc>)
    44a6:	4b9d      	ldr	r3, [pc, #628]	; (471c <_dtoa_r+0x3c0>)
    44a8:	f002 fb8c 	bl	6bc4 <__aeabi_dadd>
    44ac:	0004      	movs	r4, r0
    44ae:	0030      	movs	r0, r6
    44b0:	000d      	movs	r5, r1
    44b2:	f004 f8fb 	bl	86ac <__aeabi_i2d>
    44b6:	4a9a      	ldr	r2, [pc, #616]	; (4720 <_dtoa_r+0x3c4>)
    44b8:	4b9a      	ldr	r3, [pc, #616]	; (4724 <_dtoa_r+0x3c8>)
    44ba:	f003 fad3 	bl	7a64 <__aeabi_dmul>
    44be:	0002      	movs	r2, r0
    44c0:	000b      	movs	r3, r1
    44c2:	0020      	movs	r0, r4
    44c4:	0029      	movs	r1, r5
    44c6:	f002 fb7d 	bl	6bc4 <__aeabi_dadd>
    44ca:	0004      	movs	r4, r0
    44cc:	000d      	movs	r5, r1
    44ce:	f004 f8b7 	bl	8640 <__aeabi_d2iz>
    44d2:	2200      	movs	r2, #0
    44d4:	9003      	str	r0, [sp, #12]
    44d6:	2300      	movs	r3, #0
    44d8:	0020      	movs	r0, r4
    44da:	0029      	movs	r1, r5
    44dc:	f001 fe48 	bl	6170 <__aeabi_dcmplt>
    44e0:	2800      	cmp	r0, #0
    44e2:	d00d      	beq.n	4500 <_dtoa_r+0x1a4>
    44e4:	9803      	ldr	r0, [sp, #12]
    44e6:	f004 f8e1 	bl	86ac <__aeabi_i2d>
    44ea:	0002      	movs	r2, r0
    44ec:	000b      	movs	r3, r1
    44ee:	0020      	movs	r0, r4
    44f0:	0029      	movs	r1, r5
    44f2:	f001 fe37 	bl	6164 <__aeabi_dcmpeq>
    44f6:	4243      	negs	r3, r0
    44f8:	4143      	adcs	r3, r0
    44fa:	9a03      	ldr	r2, [sp, #12]
    44fc:	1ad3      	subs	r3, r2, r3
    44fe:	9303      	str	r3, [sp, #12]
    4500:	2301      	movs	r3, #1
    4502:	9316      	str	r3, [sp, #88]	; 0x58
    4504:	9b03      	ldr	r3, [sp, #12]
    4506:	2b16      	cmp	r3, #22
    4508:	d811      	bhi.n	452e <_dtoa_r+0x1d2>
    450a:	4987      	ldr	r1, [pc, #540]	; (4728 <_dtoa_r+0x3cc>)
    450c:	00db      	lsls	r3, r3, #3
    450e:	18c9      	adds	r1, r1, r3
    4510:	6808      	ldr	r0, [r1, #0]
    4512:	6849      	ldr	r1, [r1, #4]
    4514:	9a06      	ldr	r2, [sp, #24]
    4516:	9b07      	ldr	r3, [sp, #28]
    4518:	f001 fe3e 	bl	6198 <__aeabi_dcmpgt>
    451c:	2800      	cmp	r0, #0
    451e:	d005      	beq.n	452c <_dtoa_r+0x1d0>
    4520:	9b03      	ldr	r3, [sp, #12]
    4522:	3b01      	subs	r3, #1
    4524:	9303      	str	r3, [sp, #12]
    4526:	2300      	movs	r3, #0
    4528:	9316      	str	r3, [sp, #88]	; 0x58
    452a:	e000      	b.n	452e <_dtoa_r+0x1d2>
    452c:	9016      	str	r0, [sp, #88]	; 0x58
    452e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4530:	1b9e      	subs	r6, r3, r6
    4532:	2300      	movs	r3, #0
    4534:	930b      	str	r3, [sp, #44]	; 0x2c
    4536:	3e01      	subs	r6, #1
    4538:	960c      	str	r6, [sp, #48]	; 0x30
    453a:	d504      	bpl.n	4546 <_dtoa_r+0x1ea>
    453c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    453e:	425b      	negs	r3, r3
    4540:	930b      	str	r3, [sp, #44]	; 0x2c
    4542:	2300      	movs	r3, #0
    4544:	930c      	str	r3, [sp, #48]	; 0x30
    4546:	9b03      	ldr	r3, [sp, #12]
    4548:	2b00      	cmp	r3, #0
    454a:	db08      	blt.n	455e <_dtoa_r+0x202>
    454c:	9a03      	ldr	r2, [sp, #12]
    454e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4550:	4694      	mov	ip, r2
    4552:	4463      	add	r3, ip
    4554:	930c      	str	r3, [sp, #48]	; 0x30
    4556:	2300      	movs	r3, #0
    4558:	9211      	str	r2, [sp, #68]	; 0x44
    455a:	9308      	str	r3, [sp, #32]
    455c:	e007      	b.n	456e <_dtoa_r+0x212>
    455e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4560:	9a03      	ldr	r2, [sp, #12]
    4562:	1a9b      	subs	r3, r3, r2
    4564:	930b      	str	r3, [sp, #44]	; 0x2c
    4566:	4253      	negs	r3, r2
    4568:	9308      	str	r3, [sp, #32]
    456a:	2300      	movs	r3, #0
    456c:	9311      	str	r3, [sp, #68]	; 0x44
    456e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4570:	2501      	movs	r5, #1
    4572:	2b09      	cmp	r3, #9
    4574:	d825      	bhi.n	45c2 <_dtoa_r+0x266>
    4576:	2b05      	cmp	r3, #5
    4578:	dd02      	ble.n	4580 <_dtoa_r+0x224>
    457a:	2500      	movs	r5, #0
    457c:	3b04      	subs	r3, #4
    457e:	9322      	str	r3, [sp, #136]	; 0x88
    4580:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4582:	1e98      	subs	r0, r3, #2
    4584:	2803      	cmp	r0, #3
    4586:	d824      	bhi.n	45d2 <_dtoa_r+0x276>
    4588:	f001 fc5c 	bl	5e44 <__gnu_thumb1_case_uqi>
    458c:	04020e06 	.word	0x04020e06
    4590:	2301      	movs	r3, #1
    4592:	e002      	b.n	459a <_dtoa_r+0x23e>
    4594:	2301      	movs	r3, #1
    4596:	e008      	b.n	45aa <_dtoa_r+0x24e>
    4598:	2300      	movs	r3, #0
    459a:	9310      	str	r3, [sp, #64]	; 0x40
    459c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    459e:	2b00      	cmp	r3, #0
    45a0:	dd20      	ble.n	45e4 <_dtoa_r+0x288>
    45a2:	001f      	movs	r7, r3
    45a4:	930a      	str	r3, [sp, #40]	; 0x28
    45a6:	e021      	b.n	45ec <_dtoa_r+0x290>
    45a8:	2300      	movs	r3, #0
    45aa:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    45ac:	9310      	str	r3, [sp, #64]	; 0x40
    45ae:	9b03      	ldr	r3, [sp, #12]
    45b0:	189f      	adds	r7, r3, r2
    45b2:	1c7b      	adds	r3, r7, #1
    45b4:	930a      	str	r3, [sp, #40]	; 0x28
    45b6:	2301      	movs	r3, #1
    45b8:	18fa      	adds	r2, r7, r3
    45ba:	2a00      	cmp	r2, #0
    45bc:	dd16      	ble.n	45ec <_dtoa_r+0x290>
    45be:	0013      	movs	r3, r2
    45c0:	e014      	b.n	45ec <_dtoa_r+0x290>
    45c2:	2701      	movs	r7, #1
    45c4:	2300      	movs	r3, #0
    45c6:	427f      	negs	r7, r7
    45c8:	9322      	str	r3, [sp, #136]	; 0x88
    45ca:	9510      	str	r5, [sp, #64]	; 0x40
    45cc:	970a      	str	r7, [sp, #40]	; 0x28
    45ce:	3312      	adds	r3, #18
    45d0:	e005      	b.n	45de <_dtoa_r+0x282>
    45d2:	2701      	movs	r7, #1
    45d4:	2301      	movs	r3, #1
    45d6:	427f      	negs	r7, r7
    45d8:	9310      	str	r3, [sp, #64]	; 0x40
    45da:	970a      	str	r7, [sp, #40]	; 0x28
    45dc:	3311      	adds	r3, #17
    45de:	2200      	movs	r2, #0
    45e0:	9223      	str	r2, [sp, #140]	; 0x8c
    45e2:	e003      	b.n	45ec <_dtoa_r+0x290>
    45e4:	2701      	movs	r7, #1
    45e6:	003b      	movs	r3, r7
    45e8:	970a      	str	r7, [sp, #40]	; 0x28
    45ea:	9723      	str	r7, [sp, #140]	; 0x8c
    45ec:	9a04      	ldr	r2, [sp, #16]
    45ee:	6a54      	ldr	r4, [r2, #36]	; 0x24
    45f0:	2200      	movs	r2, #0
    45f2:	6062      	str	r2, [r4, #4]
    45f4:	3204      	adds	r2, #4
    45f6:	0011      	movs	r1, r2
    45f8:	3114      	adds	r1, #20
    45fa:	4299      	cmp	r1, r3
    45fc:	d804      	bhi.n	4608 <_dtoa_r+0x2ac>
    45fe:	6861      	ldr	r1, [r4, #4]
    4600:	0052      	lsls	r2, r2, #1
    4602:	3101      	adds	r1, #1
    4604:	6061      	str	r1, [r4, #4]
    4606:	e7f6      	b.n	45f6 <_dtoa_r+0x29a>
    4608:	6861      	ldr	r1, [r4, #4]
    460a:	9804      	ldr	r0, [sp, #16]
    460c:	f000 fe71 	bl	52f2 <_Balloc>
    4610:	9b04      	ldr	r3, [sp, #16]
    4612:	6020      	str	r0, [r4, #0]
    4614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4616:	681b      	ldr	r3, [r3, #0]
    4618:	930d      	str	r3, [sp, #52]	; 0x34
    461a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    461c:	2b0e      	cmp	r3, #14
    461e:	d900      	bls.n	4622 <_dtoa_r+0x2c6>
    4620:	e181      	b.n	4926 <_dtoa_r+0x5ca>
    4622:	2d00      	cmp	r5, #0
    4624:	d100      	bne.n	4628 <_dtoa_r+0x2cc>
    4626:	e17e      	b.n	4926 <_dtoa_r+0x5ca>
    4628:	9b06      	ldr	r3, [sp, #24]
    462a:	9c07      	ldr	r4, [sp, #28]
    462c:	9314      	str	r3, [sp, #80]	; 0x50
    462e:	9415      	str	r4, [sp, #84]	; 0x54
    4630:	9b03      	ldr	r3, [sp, #12]
    4632:	2b00      	cmp	r3, #0
    4634:	dd31      	ble.n	469a <_dtoa_r+0x33e>
    4636:	220f      	movs	r2, #15
    4638:	493b      	ldr	r1, [pc, #236]	; (4728 <_dtoa_r+0x3cc>)
    463a:	4013      	ands	r3, r2
    463c:	00db      	lsls	r3, r3, #3
    463e:	18cb      	adds	r3, r1, r3
    4640:	685c      	ldr	r4, [r3, #4]
    4642:	681b      	ldr	r3, [r3, #0]
    4644:	930e      	str	r3, [sp, #56]	; 0x38
    4646:	940f      	str	r4, [sp, #60]	; 0x3c
    4648:	9b03      	ldr	r3, [sp, #12]
    464a:	2402      	movs	r4, #2
    464c:	111d      	asrs	r5, r3, #4
    464e:	06eb      	lsls	r3, r5, #27
    4650:	d50a      	bpl.n	4668 <_dtoa_r+0x30c>
    4652:	9814      	ldr	r0, [sp, #80]	; 0x50
    4654:	9915      	ldr	r1, [sp, #84]	; 0x54
    4656:	4b35      	ldr	r3, [pc, #212]	; (472c <_dtoa_r+0x3d0>)
    4658:	4015      	ands	r5, r2
    465a:	6a1a      	ldr	r2, [r3, #32]
    465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    465e:	f002 fddd 	bl	721c <__aeabi_ddiv>
    4662:	9006      	str	r0, [sp, #24]
    4664:	9107      	str	r1, [sp, #28]
    4666:	3401      	adds	r4, #1
    4668:	4e30      	ldr	r6, [pc, #192]	; (472c <_dtoa_r+0x3d0>)
    466a:	2d00      	cmp	r5, #0
    466c:	d00e      	beq.n	468c <_dtoa_r+0x330>
    466e:	2301      	movs	r3, #1
    4670:	421d      	tst	r5, r3
    4672:	d008      	beq.n	4686 <_dtoa_r+0x32a>
    4674:	980e      	ldr	r0, [sp, #56]	; 0x38
    4676:	990f      	ldr	r1, [sp, #60]	; 0x3c
    4678:	18e4      	adds	r4, r4, r3
    467a:	6832      	ldr	r2, [r6, #0]
    467c:	6873      	ldr	r3, [r6, #4]
    467e:	f003 f9f1 	bl	7a64 <__aeabi_dmul>
    4682:	900e      	str	r0, [sp, #56]	; 0x38
    4684:	910f      	str	r1, [sp, #60]	; 0x3c
    4686:	106d      	asrs	r5, r5, #1
    4688:	3608      	adds	r6, #8
    468a:	e7ee      	b.n	466a <_dtoa_r+0x30e>
    468c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    468e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4690:	9806      	ldr	r0, [sp, #24]
    4692:	9907      	ldr	r1, [sp, #28]
    4694:	f002 fdc2 	bl	721c <__aeabi_ddiv>
    4698:	e04c      	b.n	4734 <_dtoa_r+0x3d8>
    469a:	9b03      	ldr	r3, [sp, #12]
    469c:	2402      	movs	r4, #2
    469e:	425d      	negs	r5, r3
    46a0:	2d00      	cmp	r5, #0
    46a2:	d049      	beq.n	4738 <_dtoa_r+0x3dc>
    46a4:	9814      	ldr	r0, [sp, #80]	; 0x50
    46a6:	9915      	ldr	r1, [sp, #84]	; 0x54
    46a8:	230f      	movs	r3, #15
    46aa:	4a1f      	ldr	r2, [pc, #124]	; (4728 <_dtoa_r+0x3cc>)
    46ac:	402b      	ands	r3, r5
    46ae:	00db      	lsls	r3, r3, #3
    46b0:	18d3      	adds	r3, r2, r3
    46b2:	681a      	ldr	r2, [r3, #0]
    46b4:	685b      	ldr	r3, [r3, #4]
    46b6:	f003 f9d5 	bl	7a64 <__aeabi_dmul>
    46ba:	2300      	movs	r3, #0
    46bc:	9006      	str	r0, [sp, #24]
    46be:	9107      	str	r1, [sp, #28]
    46c0:	4e1a      	ldr	r6, [pc, #104]	; (472c <_dtoa_r+0x3d0>)
    46c2:	112d      	asrs	r5, r5, #4
    46c4:	2d00      	cmp	r5, #0
    46c6:	d033      	beq.n	4730 <_dtoa_r+0x3d4>
    46c8:	2201      	movs	r2, #1
    46ca:	4215      	tst	r5, r2
    46cc:	d005      	beq.n	46da <_dtoa_r+0x37e>
    46ce:	18a4      	adds	r4, r4, r2
    46d0:	6832      	ldr	r2, [r6, #0]
    46d2:	6873      	ldr	r3, [r6, #4]
    46d4:	f003 f9c6 	bl	7a64 <__aeabi_dmul>
    46d8:	2301      	movs	r3, #1
    46da:	106d      	asrs	r5, r5, #1
    46dc:	3608      	adds	r6, #8
    46de:	e7f1      	b.n	46c4 <_dtoa_r+0x368>
    46e0:	7ff00000 	.word	0x7ff00000
    46e4:	0000270f 	.word	0x0000270f
    46e8:	00008b75 	.word	0x00008b75
    46ec:	00008b6c 	.word	0x00008b6c
    46f0:	00008b48 	.word	0x00008b48
    46f4:	00008b49 	.word	0x00008b49
    46f8:	3ff00000 	.word	0x3ff00000
    46fc:	fffffc01 	.word	0xfffffc01
    4700:	00000432 	.word	0x00000432
    4704:	00000412 	.word	0x00000412
    4708:	fe100000 	.word	0xfe100000
    470c:	3ff80000 	.word	0x3ff80000
    4710:	636f4361 	.word	0x636f4361
    4714:	3fd287a7 	.word	0x3fd287a7
    4718:	8b60c8b3 	.word	0x8b60c8b3
    471c:	3fc68a28 	.word	0x3fc68a28
    4720:	509f79fb 	.word	0x509f79fb
    4724:	3fd34413 	.word	0x3fd34413
    4728:	00008be8 	.word	0x00008be8
    472c:	00008cb0 	.word	0x00008cb0
    4730:	2b00      	cmp	r3, #0
    4732:	d001      	beq.n	4738 <_dtoa_r+0x3dc>
    4734:	9006      	str	r0, [sp, #24]
    4736:	9107      	str	r1, [sp, #28]
    4738:	9b16      	ldr	r3, [sp, #88]	; 0x58
    473a:	2b00      	cmp	r3, #0
    473c:	d01d      	beq.n	477a <_dtoa_r+0x41e>
    473e:	9d06      	ldr	r5, [sp, #24]
    4740:	9e07      	ldr	r6, [sp, #28]
    4742:	2200      	movs	r2, #0
    4744:	4bc7      	ldr	r3, [pc, #796]	; (4a64 <_dtoa_r+0x708>)
    4746:	0028      	movs	r0, r5
    4748:	0031      	movs	r1, r6
    474a:	f001 fd11 	bl	6170 <__aeabi_dcmplt>
    474e:	2800      	cmp	r0, #0
    4750:	d013      	beq.n	477a <_dtoa_r+0x41e>
    4752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4754:	2b00      	cmp	r3, #0
    4756:	d010      	beq.n	477a <_dtoa_r+0x41e>
    4758:	2f00      	cmp	r7, #0
    475a:	dc00      	bgt.n	475e <_dtoa_r+0x402>
    475c:	e0df      	b.n	491e <_dtoa_r+0x5c2>
    475e:	9b03      	ldr	r3, [sp, #12]
    4760:	0031      	movs	r1, r6
    4762:	3b01      	subs	r3, #1
    4764:	930e      	str	r3, [sp, #56]	; 0x38
    4766:	2200      	movs	r2, #0
    4768:	4bbf      	ldr	r3, [pc, #764]	; (4a68 <_dtoa_r+0x70c>)
    476a:	0028      	movs	r0, r5
    476c:	f003 f97a 	bl	7a64 <__aeabi_dmul>
    4770:	3401      	adds	r4, #1
    4772:	9006      	str	r0, [sp, #24]
    4774:	9107      	str	r1, [sp, #28]
    4776:	003e      	movs	r6, r7
    4778:	e002      	b.n	4780 <_dtoa_r+0x424>
    477a:	9b03      	ldr	r3, [sp, #12]
    477c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    477e:	930e      	str	r3, [sp, #56]	; 0x38
    4780:	0020      	movs	r0, r4
    4782:	f003 ff93 	bl	86ac <__aeabi_i2d>
    4786:	9a06      	ldr	r2, [sp, #24]
    4788:	9b07      	ldr	r3, [sp, #28]
    478a:	f003 f96b 	bl	7a64 <__aeabi_dmul>
    478e:	2200      	movs	r2, #0
    4790:	4bb6      	ldr	r3, [pc, #728]	; (4a6c <_dtoa_r+0x710>)
    4792:	f002 fa17 	bl	6bc4 <__aeabi_dadd>
    4796:	4ab6      	ldr	r2, [pc, #728]	; (4a70 <_dtoa_r+0x714>)
    4798:	9012      	str	r0, [sp, #72]	; 0x48
    479a:	9113      	str	r1, [sp, #76]	; 0x4c
    479c:	9c12      	ldr	r4, [sp, #72]	; 0x48
    479e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    47a0:	4694      	mov	ip, r2
    47a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    47a4:	4463      	add	r3, ip
    47a6:	9318      	str	r3, [sp, #96]	; 0x60
    47a8:	001d      	movs	r5, r3
    47aa:	2e00      	cmp	r6, #0
    47ac:	d11c      	bne.n	47e8 <_dtoa_r+0x48c>
    47ae:	9806      	ldr	r0, [sp, #24]
    47b0:	9907      	ldr	r1, [sp, #28]
    47b2:	2200      	movs	r2, #0
    47b4:	4baf      	ldr	r3, [pc, #700]	; (4a74 <_dtoa_r+0x718>)
    47b6:	f003 fbcf 	bl	7f58 <__aeabi_dsub>
    47ba:	0022      	movs	r2, r4
    47bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
    47be:	9006      	str	r0, [sp, #24]
    47c0:	9107      	str	r1, [sp, #28]
    47c2:	f001 fce9 	bl	6198 <__aeabi_dcmpgt>
    47c6:	2800      	cmp	r0, #0
    47c8:	d000      	beq.n	47cc <_dtoa_r+0x470>
    47ca:	e254      	b.n	4c76 <_dtoa_r+0x91a>
    47cc:	48aa      	ldr	r0, [pc, #680]	; (4a78 <_dtoa_r+0x71c>)
    47ce:	9913      	ldr	r1, [sp, #76]	; 0x4c
    47d0:	4684      	mov	ip, r0
    47d2:	4461      	add	r1, ip
    47d4:	000b      	movs	r3, r1
    47d6:	9806      	ldr	r0, [sp, #24]
    47d8:	9907      	ldr	r1, [sp, #28]
    47da:	0022      	movs	r2, r4
    47dc:	f001 fcc8 	bl	6170 <__aeabi_dcmplt>
    47e0:	2800      	cmp	r0, #0
    47e2:	d000      	beq.n	47e6 <_dtoa_r+0x48a>
    47e4:	e23d      	b.n	4c62 <_dtoa_r+0x906>
    47e6:	e09a      	b.n	491e <_dtoa_r+0x5c2>
    47e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    47ea:	1e73      	subs	r3, r6, #1
    47ec:	49a3      	ldr	r1, [pc, #652]	; (4a7c <_dtoa_r+0x720>)
    47ee:	00db      	lsls	r3, r3, #3
    47f0:	2a00      	cmp	r2, #0
    47f2:	d049      	beq.n	4888 <_dtoa_r+0x52c>
    47f4:	18cb      	adds	r3, r1, r3
    47f6:	681a      	ldr	r2, [r3, #0]
    47f8:	685b      	ldr	r3, [r3, #4]
    47fa:	2000      	movs	r0, #0
    47fc:	49a0      	ldr	r1, [pc, #640]	; (4a80 <_dtoa_r+0x724>)
    47fe:	f002 fd0d 	bl	721c <__aeabi_ddiv>
    4802:	002b      	movs	r3, r5
    4804:	0022      	movs	r2, r4
    4806:	f003 fba7 	bl	7f58 <__aeabi_dsub>
    480a:	9012      	str	r0, [sp, #72]	; 0x48
    480c:	9113      	str	r1, [sp, #76]	; 0x4c
    480e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4810:	9806      	ldr	r0, [sp, #24]
    4812:	9907      	ldr	r1, [sp, #28]
    4814:	f003 ff14 	bl	8640 <__aeabi_d2iz>
    4818:	0004      	movs	r4, r0
    481a:	f003 ff47 	bl	86ac <__aeabi_i2d>
    481e:	0002      	movs	r2, r0
    4820:	000b      	movs	r3, r1
    4822:	9806      	ldr	r0, [sp, #24]
    4824:	9907      	ldr	r1, [sp, #28]
    4826:	f003 fb97 	bl	7f58 <__aeabi_dsub>
    482a:	3501      	adds	r5, #1
    482c:	1e6b      	subs	r3, r5, #1
    482e:	3430      	adds	r4, #48	; 0x30
    4830:	701c      	strb	r4, [r3, #0]
    4832:	9a12      	ldr	r2, [sp, #72]	; 0x48
    4834:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4836:	9006      	str	r0, [sp, #24]
    4838:	9107      	str	r1, [sp, #28]
    483a:	f001 fc99 	bl	6170 <__aeabi_dcmplt>
    483e:	2800      	cmp	r0, #0
    4840:	d000      	beq.n	4844 <_dtoa_r+0x4e8>
    4842:	e32e      	b.n	4ea2 <_dtoa_r+0xb46>
    4844:	9a06      	ldr	r2, [sp, #24]
    4846:	9b07      	ldr	r3, [sp, #28]
    4848:	2000      	movs	r0, #0
    484a:	4986      	ldr	r1, [pc, #536]	; (4a64 <_dtoa_r+0x708>)
    484c:	f003 fb84 	bl	7f58 <__aeabi_dsub>
    4850:	9a12      	ldr	r2, [sp, #72]	; 0x48
    4852:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4854:	f001 fc8c 	bl	6170 <__aeabi_dcmplt>
    4858:	2800      	cmp	r0, #0
    485a:	d000      	beq.n	485e <_dtoa_r+0x502>
    485c:	e0c7      	b.n	49ee <_dtoa_r+0x692>
    485e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4860:	1aeb      	subs	r3, r5, r3
    4862:	42b3      	cmp	r3, r6
    4864:	da5b      	bge.n	491e <_dtoa_r+0x5c2>
    4866:	9812      	ldr	r0, [sp, #72]	; 0x48
    4868:	9913      	ldr	r1, [sp, #76]	; 0x4c
    486a:	2200      	movs	r2, #0
    486c:	4b7e      	ldr	r3, [pc, #504]	; (4a68 <_dtoa_r+0x70c>)
    486e:	f003 f8f9 	bl	7a64 <__aeabi_dmul>
    4872:	2200      	movs	r2, #0
    4874:	9012      	str	r0, [sp, #72]	; 0x48
    4876:	9113      	str	r1, [sp, #76]	; 0x4c
    4878:	9806      	ldr	r0, [sp, #24]
    487a:	9907      	ldr	r1, [sp, #28]
    487c:	4b7a      	ldr	r3, [pc, #488]	; (4a68 <_dtoa_r+0x70c>)
    487e:	f003 f8f1 	bl	7a64 <__aeabi_dmul>
    4882:	9006      	str	r0, [sp, #24]
    4884:	9107      	str	r1, [sp, #28]
    4886:	e7c3      	b.n	4810 <_dtoa_r+0x4b4>
    4888:	18c9      	adds	r1, r1, r3
    488a:	0022      	movs	r2, r4
    488c:	6808      	ldr	r0, [r1, #0]
    488e:	6849      	ldr	r1, [r1, #4]
    4890:	002b      	movs	r3, r5
    4892:	f003 f8e7 	bl	7a64 <__aeabi_dmul>
    4896:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    4898:	9012      	str	r0, [sp, #72]	; 0x48
    489a:	9113      	str	r1, [sp, #76]	; 0x4c
    489c:	19a5      	adds	r5, r4, r6
    489e:	9806      	ldr	r0, [sp, #24]
    48a0:	9907      	ldr	r1, [sp, #28]
    48a2:	f003 fecd 	bl	8640 <__aeabi_d2iz>
    48a6:	0006      	movs	r6, r0
    48a8:	f003 ff00 	bl	86ac <__aeabi_i2d>
    48ac:	0002      	movs	r2, r0
    48ae:	000b      	movs	r3, r1
    48b0:	9806      	ldr	r0, [sp, #24]
    48b2:	9907      	ldr	r1, [sp, #28]
    48b4:	f003 fb50 	bl	7f58 <__aeabi_dsub>
    48b8:	3630      	adds	r6, #48	; 0x30
    48ba:	7026      	strb	r6, [r4, #0]
    48bc:	3401      	adds	r4, #1
    48be:	9006      	str	r0, [sp, #24]
    48c0:	9107      	str	r1, [sp, #28]
    48c2:	2200      	movs	r2, #0
    48c4:	42a5      	cmp	r5, r4
    48c6:	d122      	bne.n	490e <_dtoa_r+0x5b2>
    48c8:	4b6d      	ldr	r3, [pc, #436]	; (4a80 <_dtoa_r+0x724>)
    48ca:	9812      	ldr	r0, [sp, #72]	; 0x48
    48cc:	9913      	ldr	r1, [sp, #76]	; 0x4c
    48ce:	f002 f979 	bl	6bc4 <__aeabi_dadd>
    48d2:	0002      	movs	r2, r0
    48d4:	000b      	movs	r3, r1
    48d6:	9806      	ldr	r0, [sp, #24]
    48d8:	9907      	ldr	r1, [sp, #28]
    48da:	f001 fc5d 	bl	6198 <__aeabi_dcmpgt>
    48de:	2800      	cmp	r0, #0
    48e0:	d000      	beq.n	48e4 <_dtoa_r+0x588>
    48e2:	e084      	b.n	49ee <_dtoa_r+0x692>
    48e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    48e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    48e8:	2000      	movs	r0, #0
    48ea:	4965      	ldr	r1, [pc, #404]	; (4a80 <_dtoa_r+0x724>)
    48ec:	f003 fb34 	bl	7f58 <__aeabi_dsub>
    48f0:	0002      	movs	r2, r0
    48f2:	000b      	movs	r3, r1
    48f4:	9806      	ldr	r0, [sp, #24]
    48f6:	9907      	ldr	r1, [sp, #28]
    48f8:	f001 fc3a 	bl	6170 <__aeabi_dcmplt>
    48fc:	2800      	cmp	r0, #0
    48fe:	d00e      	beq.n	491e <_dtoa_r+0x5c2>
    4900:	1e6b      	subs	r3, r5, #1
    4902:	781a      	ldrb	r2, [r3, #0]
    4904:	2a30      	cmp	r2, #48	; 0x30
    4906:	d000      	beq.n	490a <_dtoa_r+0x5ae>
    4908:	e2cb      	b.n	4ea2 <_dtoa_r+0xb46>
    490a:	001d      	movs	r5, r3
    490c:	e7f8      	b.n	4900 <_dtoa_r+0x5a4>
    490e:	9806      	ldr	r0, [sp, #24]
    4910:	9907      	ldr	r1, [sp, #28]
    4912:	4b55      	ldr	r3, [pc, #340]	; (4a68 <_dtoa_r+0x70c>)
    4914:	f003 f8a6 	bl	7a64 <__aeabi_dmul>
    4918:	9006      	str	r0, [sp, #24]
    491a:	9107      	str	r1, [sp, #28]
    491c:	e7bf      	b.n	489e <_dtoa_r+0x542>
    491e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4920:	9c15      	ldr	r4, [sp, #84]	; 0x54
    4922:	9306      	str	r3, [sp, #24]
    4924:	9407      	str	r4, [sp, #28]
    4926:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    4928:	2b00      	cmp	r3, #0
    492a:	da00      	bge.n	492e <_dtoa_r+0x5d2>
    492c:	e081      	b.n	4a32 <_dtoa_r+0x6d6>
    492e:	9a03      	ldr	r2, [sp, #12]
    4930:	2a0e      	cmp	r2, #14
    4932:	dd00      	ble.n	4936 <_dtoa_r+0x5da>
    4934:	e07d      	b.n	4a32 <_dtoa_r+0x6d6>
    4936:	00d3      	lsls	r3, r2, #3
    4938:	4a50      	ldr	r2, [pc, #320]	; (4a7c <_dtoa_r+0x720>)
    493a:	18d3      	adds	r3, r2, r3
    493c:	685c      	ldr	r4, [r3, #4]
    493e:	681b      	ldr	r3, [r3, #0]
    4940:	9308      	str	r3, [sp, #32]
    4942:	9409      	str	r4, [sp, #36]	; 0x24
    4944:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    4946:	2b00      	cmp	r3, #0
    4948:	da15      	bge.n	4976 <_dtoa_r+0x61a>
    494a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    494c:	2b00      	cmp	r3, #0
    494e:	dc12      	bgt.n	4976 <_dtoa_r+0x61a>
    4950:	d000      	beq.n	4954 <_dtoa_r+0x5f8>
    4952:	e188      	b.n	4c66 <_dtoa_r+0x90a>
    4954:	9808      	ldr	r0, [sp, #32]
    4956:	9909      	ldr	r1, [sp, #36]	; 0x24
    4958:	2200      	movs	r2, #0
    495a:	4b46      	ldr	r3, [pc, #280]	; (4a74 <_dtoa_r+0x718>)
    495c:	f003 f882 	bl	7a64 <__aeabi_dmul>
    4960:	9a06      	ldr	r2, [sp, #24]
    4962:	9b07      	ldr	r3, [sp, #28]
    4964:	f001 fc22 	bl	61ac <__aeabi_dcmpge>
    4968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    496a:	9308      	str	r3, [sp, #32]
    496c:	001e      	movs	r6, r3
    496e:	2800      	cmp	r0, #0
    4970:	d000      	beq.n	4974 <_dtoa_r+0x618>
    4972:	e17b      	b.n	4c6c <_dtoa_r+0x910>
    4974:	e182      	b.n	4c7c <_dtoa_r+0x920>
    4976:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4978:	9e06      	ldr	r6, [sp, #24]
    497a:	9f07      	ldr	r7, [sp, #28]
    497c:	9a08      	ldr	r2, [sp, #32]
    497e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4980:	0030      	movs	r0, r6
    4982:	0039      	movs	r1, r7
    4984:	f002 fc4a 	bl	721c <__aeabi_ddiv>
    4988:	f003 fe5a 	bl	8640 <__aeabi_d2iz>
    498c:	0004      	movs	r4, r0
    498e:	f003 fe8d 	bl	86ac <__aeabi_i2d>
    4992:	9a08      	ldr	r2, [sp, #32]
    4994:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4996:	f003 f865 	bl	7a64 <__aeabi_dmul>
    499a:	0002      	movs	r2, r0
    499c:	000b      	movs	r3, r1
    499e:	0030      	movs	r0, r6
    49a0:	0039      	movs	r1, r7
    49a2:	f003 fad9 	bl	7f58 <__aeabi_dsub>
    49a6:	0022      	movs	r2, r4
    49a8:	3501      	adds	r5, #1
    49aa:	1e6b      	subs	r3, r5, #1
    49ac:	3230      	adds	r2, #48	; 0x30
    49ae:	701a      	strb	r2, [r3, #0]
    49b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    49b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    49b4:	1aeb      	subs	r3, r5, r3
    49b6:	429a      	cmp	r2, r3
    49b8:	d12e      	bne.n	4a18 <_dtoa_r+0x6bc>
    49ba:	0002      	movs	r2, r0
    49bc:	000b      	movs	r3, r1
    49be:	f002 f901 	bl	6bc4 <__aeabi_dadd>
    49c2:	0006      	movs	r6, r0
    49c4:	000f      	movs	r7, r1
    49c6:	0002      	movs	r2, r0
    49c8:	000b      	movs	r3, r1
    49ca:	9808      	ldr	r0, [sp, #32]
    49cc:	9909      	ldr	r1, [sp, #36]	; 0x24
    49ce:	f001 fbcf 	bl	6170 <__aeabi_dcmplt>
    49d2:	2800      	cmp	r0, #0
    49d4:	d10f      	bne.n	49f6 <_dtoa_r+0x69a>
    49d6:	9808      	ldr	r0, [sp, #32]
    49d8:	9909      	ldr	r1, [sp, #36]	; 0x24
    49da:	0032      	movs	r2, r6
    49dc:	003b      	movs	r3, r7
    49de:	f001 fbc1 	bl	6164 <__aeabi_dcmpeq>
    49e2:	2800      	cmp	r0, #0
    49e4:	d100      	bne.n	49e8 <_dtoa_r+0x68c>
    49e6:	e25e      	b.n	4ea6 <_dtoa_r+0xb4a>
    49e8:	07e3      	lsls	r3, r4, #31
    49ea:	d404      	bmi.n	49f6 <_dtoa_r+0x69a>
    49ec:	e25b      	b.n	4ea6 <_dtoa_r+0xb4a>
    49ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    49f0:	9303      	str	r3, [sp, #12]
    49f2:	e000      	b.n	49f6 <_dtoa_r+0x69a>
    49f4:	001d      	movs	r5, r3
    49f6:	1e6b      	subs	r3, r5, #1
    49f8:	781a      	ldrb	r2, [r3, #0]
    49fa:	2a39      	cmp	r2, #57	; 0x39
    49fc:	d108      	bne.n	4a10 <_dtoa_r+0x6b4>
    49fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4a00:	429a      	cmp	r2, r3
    4a02:	d1f7      	bne.n	49f4 <_dtoa_r+0x698>
    4a04:	9a03      	ldr	r2, [sp, #12]
    4a06:	990d      	ldr	r1, [sp, #52]	; 0x34
    4a08:	3201      	adds	r2, #1
    4a0a:	9203      	str	r2, [sp, #12]
    4a0c:	2230      	movs	r2, #48	; 0x30
    4a0e:	700a      	strb	r2, [r1, #0]
    4a10:	781a      	ldrb	r2, [r3, #0]
    4a12:	3201      	adds	r2, #1
    4a14:	701a      	strb	r2, [r3, #0]
    4a16:	e246      	b.n	4ea6 <_dtoa_r+0xb4a>
    4a18:	2200      	movs	r2, #0
    4a1a:	4b13      	ldr	r3, [pc, #76]	; (4a68 <_dtoa_r+0x70c>)
    4a1c:	f003 f822 	bl	7a64 <__aeabi_dmul>
    4a20:	2200      	movs	r2, #0
    4a22:	2300      	movs	r3, #0
    4a24:	0006      	movs	r6, r0
    4a26:	000f      	movs	r7, r1
    4a28:	f001 fb9c 	bl	6164 <__aeabi_dcmpeq>
    4a2c:	2800      	cmp	r0, #0
    4a2e:	d0a5      	beq.n	497c <_dtoa_r+0x620>
    4a30:	e239      	b.n	4ea6 <_dtoa_r+0xb4a>
    4a32:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4a34:	2a00      	cmp	r2, #0
    4a36:	d044      	beq.n	4ac2 <_dtoa_r+0x766>
    4a38:	9a22      	ldr	r2, [sp, #136]	; 0x88
    4a3a:	2a01      	cmp	r2, #1
    4a3c:	dc0b      	bgt.n	4a56 <_dtoa_r+0x6fa>
    4a3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    4a40:	2a00      	cmp	r2, #0
    4a42:	d002      	beq.n	4a4a <_dtoa_r+0x6ee>
    4a44:	4a0f      	ldr	r2, [pc, #60]	; (4a84 <_dtoa_r+0x728>)
    4a46:	189b      	adds	r3, r3, r2
    4a48:	e002      	b.n	4a50 <_dtoa_r+0x6f4>
    4a4a:	2336      	movs	r3, #54	; 0x36
    4a4c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    4a4e:	1a9b      	subs	r3, r3, r2
    4a50:	9d08      	ldr	r5, [sp, #32]
    4a52:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4a54:	e029      	b.n	4aaa <_dtoa_r+0x74e>
    4a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4a58:	1e5d      	subs	r5, r3, #1
    4a5a:	9b08      	ldr	r3, [sp, #32]
    4a5c:	42ab      	cmp	r3, r5
    4a5e:	db13      	blt.n	4a88 <_dtoa_r+0x72c>
    4a60:	1b5d      	subs	r5, r3, r5
    4a62:	e018      	b.n	4a96 <_dtoa_r+0x73a>
    4a64:	3ff00000 	.word	0x3ff00000
    4a68:	40240000 	.word	0x40240000
    4a6c:	401c0000 	.word	0x401c0000
    4a70:	fcc00000 	.word	0xfcc00000
    4a74:	40140000 	.word	0x40140000
    4a78:	7cc00000 	.word	0x7cc00000
    4a7c:	00008be8 	.word	0x00008be8
    4a80:	3fe00000 	.word	0x3fe00000
    4a84:	00000433 	.word	0x00000433
    4a88:	9b08      	ldr	r3, [sp, #32]
    4a8a:	9508      	str	r5, [sp, #32]
    4a8c:	1aea      	subs	r2, r5, r3
    4a8e:	2500      	movs	r5, #0
    4a90:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4a92:	189b      	adds	r3, r3, r2
    4a94:	9311      	str	r3, [sp, #68]	; 0x44
    4a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4a98:	2b00      	cmp	r3, #0
    4a9a:	da04      	bge.n	4aa6 <_dtoa_r+0x74a>
    4a9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4a9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4aa0:	1a9c      	subs	r4, r3, r2
    4aa2:	2300      	movs	r3, #0
    4aa4:	e001      	b.n	4aaa <_dtoa_r+0x74e>
    4aa6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4aaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4aac:	2101      	movs	r1, #1
    4aae:	18d2      	adds	r2, r2, r3
    4ab0:	920b      	str	r2, [sp, #44]	; 0x2c
    4ab2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4ab4:	9804      	ldr	r0, [sp, #16]
    4ab6:	18d3      	adds	r3, r2, r3
    4ab8:	930c      	str	r3, [sp, #48]	; 0x30
    4aba:	f000 fcf2 	bl	54a2 <__i2b>
    4abe:	0006      	movs	r6, r0
    4ac0:	e002      	b.n	4ac8 <_dtoa_r+0x76c>
    4ac2:	9d08      	ldr	r5, [sp, #32]
    4ac4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4ac6:	9e10      	ldr	r6, [sp, #64]	; 0x40
    4ac8:	2c00      	cmp	r4, #0
    4aca:	d00e      	beq.n	4aea <_dtoa_r+0x78e>
    4acc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4ace:	2b00      	cmp	r3, #0
    4ad0:	dd0b      	ble.n	4aea <_dtoa_r+0x78e>
    4ad2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4ad4:	1e23      	subs	r3, r4, #0
    4ad6:	4293      	cmp	r3, r2
    4ad8:	dd00      	ble.n	4adc <_dtoa_r+0x780>
    4ada:	0013      	movs	r3, r2
    4adc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4ade:	1ae4      	subs	r4, r4, r3
    4ae0:	1ad2      	subs	r2, r2, r3
    4ae2:	920b      	str	r2, [sp, #44]	; 0x2c
    4ae4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4ae6:	1ad3      	subs	r3, r2, r3
    4ae8:	930c      	str	r3, [sp, #48]	; 0x30
    4aea:	9b08      	ldr	r3, [sp, #32]
    4aec:	2b00      	cmp	r3, #0
    4aee:	dd20      	ble.n	4b32 <_dtoa_r+0x7d6>
    4af0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4af2:	2b00      	cmp	r3, #0
    4af4:	d017      	beq.n	4b26 <_dtoa_r+0x7ca>
    4af6:	2d00      	cmp	r5, #0
    4af8:	d011      	beq.n	4b1e <_dtoa_r+0x7c2>
    4afa:	0031      	movs	r1, r6
    4afc:	002a      	movs	r2, r5
    4afe:	9804      	ldr	r0, [sp, #16]
    4b00:	f000 fd62 	bl	55c8 <__pow5mult>
    4b04:	9a05      	ldr	r2, [sp, #20]
    4b06:	0001      	movs	r1, r0
    4b08:	0006      	movs	r6, r0
    4b0a:	9804      	ldr	r0, [sp, #16]
    4b0c:	f000 fcd2 	bl	54b4 <__multiply>
    4b10:	9905      	ldr	r1, [sp, #20]
    4b12:	900e      	str	r0, [sp, #56]	; 0x38
    4b14:	9804      	ldr	r0, [sp, #16]
    4b16:	f000 fc24 	bl	5362 <_Bfree>
    4b1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4b1c:	9305      	str	r3, [sp, #20]
    4b1e:	9b08      	ldr	r3, [sp, #32]
    4b20:	1b5a      	subs	r2, r3, r5
    4b22:	d006      	beq.n	4b32 <_dtoa_r+0x7d6>
    4b24:	e000      	b.n	4b28 <_dtoa_r+0x7cc>
    4b26:	9a08      	ldr	r2, [sp, #32]
    4b28:	9905      	ldr	r1, [sp, #20]
    4b2a:	9804      	ldr	r0, [sp, #16]
    4b2c:	f000 fd4c 	bl	55c8 <__pow5mult>
    4b30:	9005      	str	r0, [sp, #20]
    4b32:	2101      	movs	r1, #1
    4b34:	9804      	ldr	r0, [sp, #16]
    4b36:	f000 fcb4 	bl	54a2 <__i2b>
    4b3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4b3c:	9008      	str	r0, [sp, #32]
    4b3e:	2b00      	cmp	r3, #0
    4b40:	d100      	bne.n	4b44 <_dtoa_r+0x7e8>
    4b42:	e1c0      	b.n	4ec6 <_dtoa_r+0xb6a>
    4b44:	001a      	movs	r2, r3
    4b46:	0001      	movs	r1, r0
    4b48:	9804      	ldr	r0, [sp, #16]
    4b4a:	f000 fd3d 	bl	55c8 <__pow5mult>
    4b4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4b50:	9008      	str	r0, [sp, #32]
    4b52:	2b01      	cmp	r3, #1
    4b54:	dc17      	bgt.n	4b86 <_dtoa_r+0x82a>
    4b56:	2500      	movs	r5, #0
    4b58:	9b06      	ldr	r3, [sp, #24]
    4b5a:	42ab      	cmp	r3, r5
    4b5c:	d10e      	bne.n	4b7c <_dtoa_r+0x820>
    4b5e:	9b07      	ldr	r3, [sp, #28]
    4b60:	031b      	lsls	r3, r3, #12
    4b62:	42ab      	cmp	r3, r5
    4b64:	d10a      	bne.n	4b7c <_dtoa_r+0x820>
    4b66:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4b68:	9a07      	ldr	r2, [sp, #28]
    4b6a:	4213      	tst	r3, r2
    4b6c:	d006      	beq.n	4b7c <_dtoa_r+0x820>
    4b6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4b70:	3501      	adds	r5, #1
    4b72:	3301      	adds	r3, #1
    4b74:	930b      	str	r3, [sp, #44]	; 0x2c
    4b76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4b78:	3301      	adds	r3, #1
    4b7a:	930c      	str	r3, [sp, #48]	; 0x30
    4b7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4b7e:	2001      	movs	r0, #1
    4b80:	2b00      	cmp	r3, #0
    4b82:	d00d      	beq.n	4ba0 <_dtoa_r+0x844>
    4b84:	e000      	b.n	4b88 <_dtoa_r+0x82c>
    4b86:	2500      	movs	r5, #0
    4b88:	9b08      	ldr	r3, [sp, #32]
    4b8a:	9a08      	ldr	r2, [sp, #32]
    4b8c:	691b      	ldr	r3, [r3, #16]
    4b8e:	930e      	str	r3, [sp, #56]	; 0x38
    4b90:	3303      	adds	r3, #3
    4b92:	009b      	lsls	r3, r3, #2
    4b94:	18d3      	adds	r3, r2, r3
    4b96:	6858      	ldr	r0, [r3, #4]
    4b98:	f000 fc39 	bl	540e <__hi0bits>
    4b9c:	2320      	movs	r3, #32
    4b9e:	1a18      	subs	r0, r3, r0
    4ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4ba2:	18c0      	adds	r0, r0, r3
    4ba4:	231f      	movs	r3, #31
    4ba6:	4018      	ands	r0, r3
    4ba8:	d009      	beq.n	4bbe <_dtoa_r+0x862>
    4baa:	3301      	adds	r3, #1
    4bac:	1a1b      	subs	r3, r3, r0
    4bae:	2b04      	cmp	r3, #4
    4bb0:	dd02      	ble.n	4bb8 <_dtoa_r+0x85c>
    4bb2:	231c      	movs	r3, #28
    4bb4:	1a18      	subs	r0, r3, r0
    4bb6:	e003      	b.n	4bc0 <_dtoa_r+0x864>
    4bb8:	2b04      	cmp	r3, #4
    4bba:	d008      	beq.n	4bce <_dtoa_r+0x872>
    4bbc:	0018      	movs	r0, r3
    4bbe:	301c      	adds	r0, #28
    4bc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4bc2:	1824      	adds	r4, r4, r0
    4bc4:	181b      	adds	r3, r3, r0
    4bc6:	930b      	str	r3, [sp, #44]	; 0x2c
    4bc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4bca:	181b      	adds	r3, r3, r0
    4bcc:	930c      	str	r3, [sp, #48]	; 0x30
    4bce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4bd0:	2b00      	cmp	r3, #0
    4bd2:	dd05      	ble.n	4be0 <_dtoa_r+0x884>
    4bd4:	001a      	movs	r2, r3
    4bd6:	9905      	ldr	r1, [sp, #20]
    4bd8:	9804      	ldr	r0, [sp, #16]
    4bda:	f000 fd49 	bl	5670 <__lshift>
    4bde:	9005      	str	r0, [sp, #20]
    4be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4be2:	2b00      	cmp	r3, #0
    4be4:	dd05      	ble.n	4bf2 <_dtoa_r+0x896>
    4be6:	001a      	movs	r2, r3
    4be8:	9908      	ldr	r1, [sp, #32]
    4bea:	9804      	ldr	r0, [sp, #16]
    4bec:	f000 fd40 	bl	5670 <__lshift>
    4bf0:	9008      	str	r0, [sp, #32]
    4bf2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4bf4:	2b00      	cmp	r3, #0
    4bf6:	d01d      	beq.n	4c34 <_dtoa_r+0x8d8>
    4bf8:	9908      	ldr	r1, [sp, #32]
    4bfa:	9805      	ldr	r0, [sp, #20]
    4bfc:	f000 fd8a 	bl	5714 <__mcmp>
    4c00:	2800      	cmp	r0, #0
    4c02:	da17      	bge.n	4c34 <_dtoa_r+0x8d8>
    4c04:	9b03      	ldr	r3, [sp, #12]
    4c06:	220a      	movs	r2, #10
    4c08:	3b01      	subs	r3, #1
    4c0a:	9303      	str	r3, [sp, #12]
    4c0c:	9905      	ldr	r1, [sp, #20]
    4c0e:	2300      	movs	r3, #0
    4c10:	9804      	ldr	r0, [sp, #16]
    4c12:	f000 fbbf 	bl	5394 <__multadd>
    4c16:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4c18:	9005      	str	r0, [sp, #20]
    4c1a:	2b00      	cmp	r3, #0
    4c1c:	d100      	bne.n	4c20 <_dtoa_r+0x8c4>
    4c1e:	e159      	b.n	4ed4 <_dtoa_r+0xb78>
    4c20:	0031      	movs	r1, r6
    4c22:	2300      	movs	r3, #0
    4c24:	220a      	movs	r2, #10
    4c26:	9804      	ldr	r0, [sp, #16]
    4c28:	f000 fbb4 	bl	5394 <__multadd>
    4c2c:	0006      	movs	r6, r0
    4c2e:	2f00      	cmp	r7, #0
    4c30:	dc37      	bgt.n	4ca2 <_dtoa_r+0x946>
    4c32:	e033      	b.n	4c9c <_dtoa_r+0x940>
    4c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4c36:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    4c38:	2b00      	cmp	r3, #0
    4c3a:	dc2a      	bgt.n	4c92 <_dtoa_r+0x936>
    4c3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4c3e:	2b02      	cmp	r3, #2
    4c40:	dd27      	ble.n	4c92 <_dtoa_r+0x936>
    4c42:	2f00      	cmp	r7, #0
    4c44:	d112      	bne.n	4c6c <_dtoa_r+0x910>
    4c46:	9908      	ldr	r1, [sp, #32]
    4c48:	003b      	movs	r3, r7
    4c4a:	2205      	movs	r2, #5
    4c4c:	9804      	ldr	r0, [sp, #16]
    4c4e:	f000 fba1 	bl	5394 <__multadd>
    4c52:	9008      	str	r0, [sp, #32]
    4c54:	0001      	movs	r1, r0
    4c56:	9805      	ldr	r0, [sp, #20]
    4c58:	f000 fd5c 	bl	5714 <__mcmp>
    4c5c:	2800      	cmp	r0, #0
    4c5e:	dc0d      	bgt.n	4c7c <_dtoa_r+0x920>
    4c60:	e004      	b.n	4c6c <_dtoa_r+0x910>
    4c62:	9608      	str	r6, [sp, #32]
    4c64:	e002      	b.n	4c6c <_dtoa_r+0x910>
    4c66:	2300      	movs	r3, #0
    4c68:	001e      	movs	r6, r3
    4c6a:	9308      	str	r3, [sp, #32]
    4c6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    4c6e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4c70:	43db      	mvns	r3, r3
    4c72:	9303      	str	r3, [sp, #12]
    4c74:	e00a      	b.n	4c8c <_dtoa_r+0x930>
    4c76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4c78:	9608      	str	r6, [sp, #32]
    4c7a:	9303      	str	r3, [sp, #12]
    4c7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4c7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4c80:	1c5d      	adds	r5, r3, #1
    4c82:	2331      	movs	r3, #49	; 0x31
    4c84:	7013      	strb	r3, [r2, #0]
    4c86:	9b03      	ldr	r3, [sp, #12]
    4c88:	3301      	adds	r3, #1
    4c8a:	9303      	str	r3, [sp, #12]
    4c8c:	960a      	str	r6, [sp, #40]	; 0x28
    4c8e:	2600      	movs	r6, #0
    4c90:	e0f3      	b.n	4e7a <_dtoa_r+0xb1e>
    4c92:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4c94:	2b00      	cmp	r3, #0
    4c96:	d104      	bne.n	4ca2 <_dtoa_r+0x946>
    4c98:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4c9a:	e0b5      	b.n	4e08 <_dtoa_r+0xaac>
    4c9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4c9e:	2b02      	cmp	r3, #2
    4ca0:	dccf      	bgt.n	4c42 <_dtoa_r+0x8e6>
    4ca2:	2c00      	cmp	r4, #0
    4ca4:	dd05      	ble.n	4cb2 <_dtoa_r+0x956>
    4ca6:	0031      	movs	r1, r6
    4ca8:	0022      	movs	r2, r4
    4caa:	9804      	ldr	r0, [sp, #16]
    4cac:	f000 fce0 	bl	5670 <__lshift>
    4cb0:	0006      	movs	r6, r0
    4cb2:	960a      	str	r6, [sp, #40]	; 0x28
    4cb4:	2d00      	cmp	r5, #0
    4cb6:	d012      	beq.n	4cde <_dtoa_r+0x982>
    4cb8:	6871      	ldr	r1, [r6, #4]
    4cba:	9804      	ldr	r0, [sp, #16]
    4cbc:	f000 fb19 	bl	52f2 <_Balloc>
    4cc0:	0031      	movs	r1, r6
    4cc2:	0004      	movs	r4, r0
    4cc4:	6933      	ldr	r3, [r6, #16]
    4cc6:	310c      	adds	r1, #12
    4cc8:	1c9a      	adds	r2, r3, #2
    4cca:	0092      	lsls	r2, r2, #2
    4ccc:	300c      	adds	r0, #12
    4cce:	f7fe fc21 	bl	3514 <memcpy>
    4cd2:	2201      	movs	r2, #1
    4cd4:	0021      	movs	r1, r4
    4cd6:	9804      	ldr	r0, [sp, #16]
    4cd8:	f000 fcca 	bl	5670 <__lshift>
    4cdc:	900a      	str	r0, [sp, #40]	; 0x28
    4cde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4ce0:	1e7d      	subs	r5, r7, #1
    4ce2:	930b      	str	r3, [sp, #44]	; 0x2c
    4ce4:	195b      	adds	r3, r3, r5
    4ce6:	930e      	str	r3, [sp, #56]	; 0x38
    4ce8:	9908      	ldr	r1, [sp, #32]
    4cea:	9805      	ldr	r0, [sp, #20]
    4cec:	f7ff fab0 	bl	4250 <quorem>
    4cf0:	0031      	movs	r1, r6
    4cf2:	9010      	str	r0, [sp, #64]	; 0x40
    4cf4:	0004      	movs	r4, r0
    4cf6:	9805      	ldr	r0, [sp, #20]
    4cf8:	f000 fd0c 	bl	5714 <__mcmp>
    4cfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4cfe:	0005      	movs	r5, r0
    4d00:	9908      	ldr	r1, [sp, #32]
    4d02:	9804      	ldr	r0, [sp, #16]
    4d04:	f000 fd21 	bl	574a <__mdiff>
    4d08:	2301      	movs	r3, #1
    4d0a:	930c      	str	r3, [sp, #48]	; 0x30
    4d0c:	68c3      	ldr	r3, [r0, #12]
    4d0e:	3430      	adds	r4, #48	; 0x30
    4d10:	0007      	movs	r7, r0
    4d12:	2b00      	cmp	r3, #0
    4d14:	d104      	bne.n	4d20 <_dtoa_r+0x9c4>
    4d16:	0001      	movs	r1, r0
    4d18:	9805      	ldr	r0, [sp, #20]
    4d1a:	f000 fcfb 	bl	5714 <__mcmp>
    4d1e:	900c      	str	r0, [sp, #48]	; 0x30
    4d20:	0039      	movs	r1, r7
    4d22:	9804      	ldr	r0, [sp, #16]
    4d24:	f000 fb1d 	bl	5362 <_Bfree>
    4d28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4d2a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    4d2c:	4313      	orrs	r3, r2
    4d2e:	d108      	bne.n	4d42 <_dtoa_r+0x9e6>
    4d30:	9a06      	ldr	r2, [sp, #24]
    4d32:	3301      	adds	r3, #1
    4d34:	4213      	tst	r3, r2
    4d36:	d104      	bne.n	4d42 <_dtoa_r+0x9e6>
    4d38:	2c39      	cmp	r4, #57	; 0x39
    4d3a:	d02a      	beq.n	4d92 <_dtoa_r+0xa36>
    4d3c:	2d00      	cmp	r5, #0
    4d3e:	dc1c      	bgt.n	4d7a <_dtoa_r+0xa1e>
    4d40:	e01d      	b.n	4d7e <_dtoa_r+0xa22>
    4d42:	2d00      	cmp	r5, #0
    4d44:	db06      	blt.n	4d54 <_dtoa_r+0x9f8>
    4d46:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4d48:	431d      	orrs	r5, r3
    4d4a:	d11b      	bne.n	4d84 <_dtoa_r+0xa28>
    4d4c:	2301      	movs	r3, #1
    4d4e:	9a06      	ldr	r2, [sp, #24]
    4d50:	4213      	tst	r3, r2
    4d52:	d117      	bne.n	4d84 <_dtoa_r+0xa28>
    4d54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4d56:	2b00      	cmp	r3, #0
    4d58:	dd11      	ble.n	4d7e <_dtoa_r+0xa22>
    4d5a:	9905      	ldr	r1, [sp, #20]
    4d5c:	2201      	movs	r2, #1
    4d5e:	9804      	ldr	r0, [sp, #16]
    4d60:	f000 fc86 	bl	5670 <__lshift>
    4d64:	9908      	ldr	r1, [sp, #32]
    4d66:	9005      	str	r0, [sp, #20]
    4d68:	f000 fcd4 	bl	5714 <__mcmp>
    4d6c:	2800      	cmp	r0, #0
    4d6e:	dc02      	bgt.n	4d76 <_dtoa_r+0xa1a>
    4d70:	d105      	bne.n	4d7e <_dtoa_r+0xa22>
    4d72:	07e3      	lsls	r3, r4, #31
    4d74:	d503      	bpl.n	4d7e <_dtoa_r+0xa22>
    4d76:	2c39      	cmp	r4, #57	; 0x39
    4d78:	d00b      	beq.n	4d92 <_dtoa_r+0xa36>
    4d7a:	9c10      	ldr	r4, [sp, #64]	; 0x40
    4d7c:	3431      	adds	r4, #49	; 0x31
    4d7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4d80:	1c5d      	adds	r5, r3, #1
    4d82:	e00f      	b.n	4da4 <_dtoa_r+0xa48>
    4d84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4d86:	1c5f      	adds	r7, r3, #1
    4d88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4d8a:	2b00      	cmp	r3, #0
    4d8c:	dd0c      	ble.n	4da8 <_dtoa_r+0xa4c>
    4d8e:	2c39      	cmp	r4, #57	; 0x39
    4d90:	d105      	bne.n	4d9e <_dtoa_r+0xa42>
    4d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4d94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4d96:	1c5d      	adds	r5, r3, #1
    4d98:	2339      	movs	r3, #57	; 0x39
    4d9a:	7013      	strb	r3, [r2, #0]
    4d9c:	e057      	b.n	4e4e <_dtoa_r+0xaf2>
    4d9e:	003d      	movs	r5, r7
    4da0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4da2:	3401      	adds	r4, #1
    4da4:	701c      	strb	r4, [r3, #0]
    4da6:	e068      	b.n	4e7a <_dtoa_r+0xb1e>
    4da8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4daa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4dac:	003d      	movs	r5, r7
    4dae:	701c      	strb	r4, [r3, #0]
    4db0:	4293      	cmp	r3, r2
    4db2:	d03c      	beq.n	4e2e <_dtoa_r+0xad2>
    4db4:	2300      	movs	r3, #0
    4db6:	220a      	movs	r2, #10
    4db8:	9905      	ldr	r1, [sp, #20]
    4dba:	9804      	ldr	r0, [sp, #16]
    4dbc:	f000 faea 	bl	5394 <__multadd>
    4dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4dc2:	9005      	str	r0, [sp, #20]
    4dc4:	429e      	cmp	r6, r3
    4dc6:	d108      	bne.n	4dda <_dtoa_r+0xa7e>
    4dc8:	0031      	movs	r1, r6
    4dca:	2300      	movs	r3, #0
    4dcc:	220a      	movs	r2, #10
    4dce:	9804      	ldr	r0, [sp, #16]
    4dd0:	f000 fae0 	bl	5394 <__multadd>
    4dd4:	0006      	movs	r6, r0
    4dd6:	900a      	str	r0, [sp, #40]	; 0x28
    4dd8:	e00d      	b.n	4df6 <_dtoa_r+0xa9a>
    4dda:	0031      	movs	r1, r6
    4ddc:	2300      	movs	r3, #0
    4dde:	220a      	movs	r2, #10
    4de0:	9804      	ldr	r0, [sp, #16]
    4de2:	f000 fad7 	bl	5394 <__multadd>
    4de6:	2300      	movs	r3, #0
    4de8:	0006      	movs	r6, r0
    4dea:	220a      	movs	r2, #10
    4dec:	990a      	ldr	r1, [sp, #40]	; 0x28
    4dee:	9804      	ldr	r0, [sp, #16]
    4df0:	f000 fad0 	bl	5394 <__multadd>
    4df4:	900a      	str	r0, [sp, #40]	; 0x28
    4df6:	970b      	str	r7, [sp, #44]	; 0x2c
    4df8:	e776      	b.n	4ce8 <_dtoa_r+0x98c>
    4dfa:	2300      	movs	r3, #0
    4dfc:	220a      	movs	r2, #10
    4dfe:	9905      	ldr	r1, [sp, #20]
    4e00:	9804      	ldr	r0, [sp, #16]
    4e02:	f000 fac7 	bl	5394 <__multadd>
    4e06:	9005      	str	r0, [sp, #20]
    4e08:	9908      	ldr	r1, [sp, #32]
    4e0a:	9805      	ldr	r0, [sp, #20]
    4e0c:	f7ff fa20 	bl	4250 <quorem>
    4e10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4e12:	3030      	adds	r0, #48	; 0x30
    4e14:	7028      	strb	r0, [r5, #0]
    4e16:	3501      	adds	r5, #1
    4e18:	0004      	movs	r4, r0
    4e1a:	1aeb      	subs	r3, r5, r3
    4e1c:	42bb      	cmp	r3, r7
    4e1e:	dbec      	blt.n	4dfa <_dtoa_r+0xa9e>
    4e20:	1e3d      	subs	r5, r7, #0
    4e22:	dc00      	bgt.n	4e26 <_dtoa_r+0xaca>
    4e24:	2501      	movs	r5, #1
    4e26:	960a      	str	r6, [sp, #40]	; 0x28
    4e28:	2600      	movs	r6, #0
    4e2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4e2c:	195d      	adds	r5, r3, r5
    4e2e:	9905      	ldr	r1, [sp, #20]
    4e30:	2201      	movs	r2, #1
    4e32:	9804      	ldr	r0, [sp, #16]
    4e34:	f000 fc1c 	bl	5670 <__lshift>
    4e38:	9908      	ldr	r1, [sp, #32]
    4e3a:	9005      	str	r0, [sp, #20]
    4e3c:	f000 fc6a 	bl	5714 <__mcmp>
    4e40:	2800      	cmp	r0, #0
    4e42:	dc04      	bgt.n	4e4e <_dtoa_r+0xaf2>
    4e44:	d113      	bne.n	4e6e <_dtoa_r+0xb12>
    4e46:	07e3      	lsls	r3, r4, #31
    4e48:	d401      	bmi.n	4e4e <_dtoa_r+0xaf2>
    4e4a:	e010      	b.n	4e6e <_dtoa_r+0xb12>
    4e4c:	001d      	movs	r5, r3
    4e4e:	1e6b      	subs	r3, r5, #1
    4e50:	781a      	ldrb	r2, [r3, #0]
    4e52:	2a39      	cmp	r2, #57	; 0x39
    4e54:	d108      	bne.n	4e68 <_dtoa_r+0xb0c>
    4e56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4e58:	429a      	cmp	r2, r3
    4e5a:	d1f7      	bne.n	4e4c <_dtoa_r+0xaf0>
    4e5c:	9b03      	ldr	r3, [sp, #12]
    4e5e:	3301      	adds	r3, #1
    4e60:	9303      	str	r3, [sp, #12]
    4e62:	2331      	movs	r3, #49	; 0x31
    4e64:	7013      	strb	r3, [r2, #0]
    4e66:	e008      	b.n	4e7a <_dtoa_r+0xb1e>
    4e68:	3201      	adds	r2, #1
    4e6a:	701a      	strb	r2, [r3, #0]
    4e6c:	e005      	b.n	4e7a <_dtoa_r+0xb1e>
    4e6e:	1e6b      	subs	r3, r5, #1
    4e70:	781a      	ldrb	r2, [r3, #0]
    4e72:	2a30      	cmp	r2, #48	; 0x30
    4e74:	d101      	bne.n	4e7a <_dtoa_r+0xb1e>
    4e76:	001d      	movs	r5, r3
    4e78:	e7f9      	b.n	4e6e <_dtoa_r+0xb12>
    4e7a:	9908      	ldr	r1, [sp, #32]
    4e7c:	9804      	ldr	r0, [sp, #16]
    4e7e:	f000 fa70 	bl	5362 <_Bfree>
    4e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4e84:	2b00      	cmp	r3, #0
    4e86:	d00e      	beq.n	4ea6 <_dtoa_r+0xb4a>
    4e88:	2e00      	cmp	r6, #0
    4e8a:	d005      	beq.n	4e98 <_dtoa_r+0xb3c>
    4e8c:	429e      	cmp	r6, r3
    4e8e:	d003      	beq.n	4e98 <_dtoa_r+0xb3c>
    4e90:	0031      	movs	r1, r6
    4e92:	9804      	ldr	r0, [sp, #16]
    4e94:	f000 fa65 	bl	5362 <_Bfree>
    4e98:	990a      	ldr	r1, [sp, #40]	; 0x28
    4e9a:	9804      	ldr	r0, [sp, #16]
    4e9c:	f000 fa61 	bl	5362 <_Bfree>
    4ea0:	e001      	b.n	4ea6 <_dtoa_r+0xb4a>
    4ea2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4ea4:	9303      	str	r3, [sp, #12]
    4ea6:	9804      	ldr	r0, [sp, #16]
    4ea8:	9905      	ldr	r1, [sp, #20]
    4eaa:	f000 fa5a 	bl	5362 <_Bfree>
    4eae:	2300      	movs	r3, #0
    4eb0:	702b      	strb	r3, [r5, #0]
    4eb2:	9b03      	ldr	r3, [sp, #12]
    4eb4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4eb6:	3301      	adds	r3, #1
    4eb8:	6013      	str	r3, [r2, #0]
    4eba:	9b26      	ldr	r3, [sp, #152]	; 0x98
    4ebc:	980d      	ldr	r0, [sp, #52]	; 0x34
    4ebe:	2b00      	cmp	r3, #0
    4ec0:	d010      	beq.n	4ee4 <_dtoa_r+0xb88>
    4ec2:	601d      	str	r5, [r3, #0]
    4ec4:	e00e      	b.n	4ee4 <_dtoa_r+0xb88>
    4ec6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4ec8:	2b01      	cmp	r3, #1
    4eca:	dc00      	bgt.n	4ece <_dtoa_r+0xb72>
    4ecc:	e643      	b.n	4b56 <_dtoa_r+0x7fa>
    4ece:	9d11      	ldr	r5, [sp, #68]	; 0x44
    4ed0:	2001      	movs	r0, #1
    4ed2:	e665      	b.n	4ba0 <_dtoa_r+0x844>
    4ed4:	2f00      	cmp	r7, #0
    4ed6:	dd00      	ble.n	4eda <_dtoa_r+0xb7e>
    4ed8:	e6de      	b.n	4c98 <_dtoa_r+0x93c>
    4eda:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4edc:	2b02      	cmp	r3, #2
    4ede:	dc00      	bgt.n	4ee2 <_dtoa_r+0xb86>
    4ee0:	e6da      	b.n	4c98 <_dtoa_r+0x93c>
    4ee2:	e6ae      	b.n	4c42 <_dtoa_r+0x8e6>
    4ee4:	b01d      	add	sp, #116	; 0x74
    4ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004ee8 <__sflush_r>:
    4ee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4eea:	898a      	ldrh	r2, [r1, #12]
    4eec:	0005      	movs	r5, r0
    4eee:	000c      	movs	r4, r1
    4ef0:	0713      	lsls	r3, r2, #28
    4ef2:	d45a      	bmi.n	4faa <__sflush_r+0xc2>
    4ef4:	684b      	ldr	r3, [r1, #4]
    4ef6:	2b00      	cmp	r3, #0
    4ef8:	dc02      	bgt.n	4f00 <__sflush_r+0x18>
    4efa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4efc:	2b00      	cmp	r3, #0
    4efe:	dd19      	ble.n	4f34 <__sflush_r+0x4c>
    4f00:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4f02:	2f00      	cmp	r7, #0
    4f04:	d016      	beq.n	4f34 <__sflush_r+0x4c>
    4f06:	2300      	movs	r3, #0
    4f08:	682e      	ldr	r6, [r5, #0]
    4f0a:	602b      	str	r3, [r5, #0]
    4f0c:	2380      	movs	r3, #128	; 0x80
    4f0e:	015b      	lsls	r3, r3, #5
    4f10:	401a      	ands	r2, r3
    4f12:	d001      	beq.n	4f18 <__sflush_r+0x30>
    4f14:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4f16:	e014      	b.n	4f42 <__sflush_r+0x5a>
    4f18:	2301      	movs	r3, #1
    4f1a:	6a21      	ldr	r1, [r4, #32]
    4f1c:	0028      	movs	r0, r5
    4f1e:	47b8      	blx	r7
    4f20:	1c43      	adds	r3, r0, #1
    4f22:	d10e      	bne.n	4f42 <__sflush_r+0x5a>
    4f24:	682b      	ldr	r3, [r5, #0]
    4f26:	2b00      	cmp	r3, #0
    4f28:	d00b      	beq.n	4f42 <__sflush_r+0x5a>
    4f2a:	2b1d      	cmp	r3, #29
    4f2c:	d001      	beq.n	4f32 <__sflush_r+0x4a>
    4f2e:	2b16      	cmp	r3, #22
    4f30:	d102      	bne.n	4f38 <__sflush_r+0x50>
    4f32:	602e      	str	r6, [r5, #0]
    4f34:	2000      	movs	r0, #0
    4f36:	e05a      	b.n	4fee <__sflush_r+0x106>
    4f38:	2240      	movs	r2, #64	; 0x40
    4f3a:	89a3      	ldrh	r3, [r4, #12]
    4f3c:	4313      	orrs	r3, r2
    4f3e:	81a3      	strh	r3, [r4, #12]
    4f40:	e055      	b.n	4fee <__sflush_r+0x106>
    4f42:	89a3      	ldrh	r3, [r4, #12]
    4f44:	075b      	lsls	r3, r3, #29
    4f46:	d506      	bpl.n	4f56 <__sflush_r+0x6e>
    4f48:	6863      	ldr	r3, [r4, #4]
    4f4a:	1ac0      	subs	r0, r0, r3
    4f4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4f4e:	2b00      	cmp	r3, #0
    4f50:	d001      	beq.n	4f56 <__sflush_r+0x6e>
    4f52:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4f54:	1ac0      	subs	r0, r0, r3
    4f56:	2300      	movs	r3, #0
    4f58:	0002      	movs	r2, r0
    4f5a:	6a21      	ldr	r1, [r4, #32]
    4f5c:	0028      	movs	r0, r5
    4f5e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4f60:	47b8      	blx	r7
    4f62:	89a3      	ldrh	r3, [r4, #12]
    4f64:	1c42      	adds	r2, r0, #1
    4f66:	d106      	bne.n	4f76 <__sflush_r+0x8e>
    4f68:	6829      	ldr	r1, [r5, #0]
    4f6a:	291d      	cmp	r1, #29
    4f6c:	d83a      	bhi.n	4fe4 <__sflush_r+0xfc>
    4f6e:	4a20      	ldr	r2, [pc, #128]	; (4ff0 <__sflush_r+0x108>)
    4f70:	40ca      	lsrs	r2, r1
    4f72:	07d2      	lsls	r2, r2, #31
    4f74:	d536      	bpl.n	4fe4 <__sflush_r+0xfc>
    4f76:	2200      	movs	r2, #0
    4f78:	6062      	str	r2, [r4, #4]
    4f7a:	6922      	ldr	r2, [r4, #16]
    4f7c:	6022      	str	r2, [r4, #0]
    4f7e:	04db      	lsls	r3, r3, #19
    4f80:	d505      	bpl.n	4f8e <__sflush_r+0xa6>
    4f82:	1c43      	adds	r3, r0, #1
    4f84:	d102      	bne.n	4f8c <__sflush_r+0xa4>
    4f86:	682b      	ldr	r3, [r5, #0]
    4f88:	2b00      	cmp	r3, #0
    4f8a:	d100      	bne.n	4f8e <__sflush_r+0xa6>
    4f8c:	6560      	str	r0, [r4, #84]	; 0x54
    4f8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4f90:	602e      	str	r6, [r5, #0]
    4f92:	2900      	cmp	r1, #0
    4f94:	d0ce      	beq.n	4f34 <__sflush_r+0x4c>
    4f96:	0023      	movs	r3, r4
    4f98:	3344      	adds	r3, #68	; 0x44
    4f9a:	4299      	cmp	r1, r3
    4f9c:	d002      	beq.n	4fa4 <__sflush_r+0xbc>
    4f9e:	0028      	movs	r0, r5
    4fa0:	f000 fca0 	bl	58e4 <_free_r>
    4fa4:	2000      	movs	r0, #0
    4fa6:	6360      	str	r0, [r4, #52]	; 0x34
    4fa8:	e021      	b.n	4fee <__sflush_r+0x106>
    4faa:	690f      	ldr	r7, [r1, #16]
    4fac:	2f00      	cmp	r7, #0
    4fae:	d0c1      	beq.n	4f34 <__sflush_r+0x4c>
    4fb0:	680b      	ldr	r3, [r1, #0]
    4fb2:	600f      	str	r7, [r1, #0]
    4fb4:	1bdb      	subs	r3, r3, r7
    4fb6:	9301      	str	r3, [sp, #4]
    4fb8:	2300      	movs	r3, #0
    4fba:	0792      	lsls	r2, r2, #30
    4fbc:	d100      	bne.n	4fc0 <__sflush_r+0xd8>
    4fbe:	694b      	ldr	r3, [r1, #20]
    4fc0:	60a3      	str	r3, [r4, #8]
    4fc2:	e003      	b.n	4fcc <__sflush_r+0xe4>
    4fc4:	9b01      	ldr	r3, [sp, #4]
    4fc6:	183f      	adds	r7, r7, r0
    4fc8:	1a1b      	subs	r3, r3, r0
    4fca:	9301      	str	r3, [sp, #4]
    4fcc:	9b01      	ldr	r3, [sp, #4]
    4fce:	2b00      	cmp	r3, #0
    4fd0:	ddb0      	ble.n	4f34 <__sflush_r+0x4c>
    4fd2:	9b01      	ldr	r3, [sp, #4]
    4fd4:	003a      	movs	r2, r7
    4fd6:	6a21      	ldr	r1, [r4, #32]
    4fd8:	0028      	movs	r0, r5
    4fda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4fdc:	47b0      	blx	r6
    4fde:	2800      	cmp	r0, #0
    4fe0:	dcf0      	bgt.n	4fc4 <__sflush_r+0xdc>
    4fe2:	89a3      	ldrh	r3, [r4, #12]
    4fe4:	2240      	movs	r2, #64	; 0x40
    4fe6:	2001      	movs	r0, #1
    4fe8:	4313      	orrs	r3, r2
    4fea:	81a3      	strh	r3, [r4, #12]
    4fec:	4240      	negs	r0, r0
    4fee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4ff0:	20400001 	.word	0x20400001

00004ff4 <_fflush_r>:
    4ff4:	690b      	ldr	r3, [r1, #16]
    4ff6:	b570      	push	{r4, r5, r6, lr}
    4ff8:	0005      	movs	r5, r0
    4ffa:	000c      	movs	r4, r1
    4ffc:	2b00      	cmp	r3, #0
    4ffe:	d101      	bne.n	5004 <_fflush_r+0x10>
    5000:	2000      	movs	r0, #0
    5002:	e01c      	b.n	503e <_fflush_r+0x4a>
    5004:	2800      	cmp	r0, #0
    5006:	d004      	beq.n	5012 <_fflush_r+0x1e>
    5008:	6983      	ldr	r3, [r0, #24]
    500a:	2b00      	cmp	r3, #0
    500c:	d101      	bne.n	5012 <_fflush_r+0x1e>
    500e:	f000 f85f 	bl	50d0 <__sinit>
    5012:	4b0b      	ldr	r3, [pc, #44]	; (5040 <_fflush_r+0x4c>)
    5014:	429c      	cmp	r4, r3
    5016:	d101      	bne.n	501c <_fflush_r+0x28>
    5018:	686c      	ldr	r4, [r5, #4]
    501a:	e008      	b.n	502e <_fflush_r+0x3a>
    501c:	4b09      	ldr	r3, [pc, #36]	; (5044 <_fflush_r+0x50>)
    501e:	429c      	cmp	r4, r3
    5020:	d101      	bne.n	5026 <_fflush_r+0x32>
    5022:	68ac      	ldr	r4, [r5, #8]
    5024:	e003      	b.n	502e <_fflush_r+0x3a>
    5026:	4b08      	ldr	r3, [pc, #32]	; (5048 <_fflush_r+0x54>)
    5028:	429c      	cmp	r4, r3
    502a:	d100      	bne.n	502e <_fflush_r+0x3a>
    502c:	68ec      	ldr	r4, [r5, #12]
    502e:	220c      	movs	r2, #12
    5030:	5ea3      	ldrsh	r3, [r4, r2]
    5032:	2b00      	cmp	r3, #0
    5034:	d0e4      	beq.n	5000 <_fflush_r+0xc>
    5036:	0021      	movs	r1, r4
    5038:	0028      	movs	r0, r5
    503a:	f7ff ff55 	bl	4ee8 <__sflush_r>
    503e:	bd70      	pop	{r4, r5, r6, pc}
    5040:	00008b7c 	.word	0x00008b7c
    5044:	00008b9c 	.word	0x00008b9c
    5048:	00008bbc 	.word	0x00008bbc

0000504c <_cleanup_r>:
    504c:	b510      	push	{r4, lr}
    504e:	4902      	ldr	r1, [pc, #8]	; (5058 <_cleanup_r+0xc>)
    5050:	f000 f8b0 	bl	51b4 <_fwalk_reent>
    5054:	bd10      	pop	{r4, pc}
    5056:	46c0      	nop			; (mov r8, r8)
    5058:	00004ff5 	.word	0x00004ff5

0000505c <std.isra.0>:
    505c:	2300      	movs	r3, #0
    505e:	b510      	push	{r4, lr}
    5060:	0004      	movs	r4, r0
    5062:	6003      	str	r3, [r0, #0]
    5064:	6043      	str	r3, [r0, #4]
    5066:	6083      	str	r3, [r0, #8]
    5068:	8181      	strh	r1, [r0, #12]
    506a:	6643      	str	r3, [r0, #100]	; 0x64
    506c:	81c2      	strh	r2, [r0, #14]
    506e:	6103      	str	r3, [r0, #16]
    5070:	6143      	str	r3, [r0, #20]
    5072:	6183      	str	r3, [r0, #24]
    5074:	0019      	movs	r1, r3
    5076:	2208      	movs	r2, #8
    5078:	305c      	adds	r0, #92	; 0x5c
    507a:	f7fe fa54 	bl	3526 <memset>
    507e:	4b05      	ldr	r3, [pc, #20]	; (5094 <std.isra.0+0x38>)
    5080:	6224      	str	r4, [r4, #32]
    5082:	6263      	str	r3, [r4, #36]	; 0x24
    5084:	4b04      	ldr	r3, [pc, #16]	; (5098 <std.isra.0+0x3c>)
    5086:	62a3      	str	r3, [r4, #40]	; 0x28
    5088:	4b04      	ldr	r3, [pc, #16]	; (509c <std.isra.0+0x40>)
    508a:	62e3      	str	r3, [r4, #44]	; 0x2c
    508c:	4b04      	ldr	r3, [pc, #16]	; (50a0 <std.isra.0+0x44>)
    508e:	6323      	str	r3, [r4, #48]	; 0x30
    5090:	bd10      	pop	{r4, pc}
    5092:	46c0      	nop			; (mov r8, r8)
    5094:	00005cc9 	.word	0x00005cc9
    5098:	00005cf1 	.word	0x00005cf1
    509c:	00005d29 	.word	0x00005d29
    50a0:	00005d55 	.word	0x00005d55

000050a4 <__sfmoreglue>:
    50a4:	b570      	push	{r4, r5, r6, lr}
    50a6:	2568      	movs	r5, #104	; 0x68
    50a8:	1e4b      	subs	r3, r1, #1
    50aa:	435d      	muls	r5, r3
    50ac:	000e      	movs	r6, r1
    50ae:	0029      	movs	r1, r5
    50b0:	3174      	adds	r1, #116	; 0x74
    50b2:	f000 fc5d 	bl	5970 <_malloc_r>
    50b6:	1e04      	subs	r4, r0, #0
    50b8:	d008      	beq.n	50cc <__sfmoreglue+0x28>
    50ba:	2100      	movs	r1, #0
    50bc:	002a      	movs	r2, r5
    50be:	6001      	str	r1, [r0, #0]
    50c0:	6046      	str	r6, [r0, #4]
    50c2:	300c      	adds	r0, #12
    50c4:	60a0      	str	r0, [r4, #8]
    50c6:	3268      	adds	r2, #104	; 0x68
    50c8:	f7fe fa2d 	bl	3526 <memset>
    50cc:	0020      	movs	r0, r4
    50ce:	bd70      	pop	{r4, r5, r6, pc}

000050d0 <__sinit>:
    50d0:	6983      	ldr	r3, [r0, #24]
    50d2:	b513      	push	{r0, r1, r4, lr}
    50d4:	0004      	movs	r4, r0
    50d6:	2b00      	cmp	r3, #0
    50d8:	d128      	bne.n	512c <__sinit+0x5c>
    50da:	6483      	str	r3, [r0, #72]	; 0x48
    50dc:	64c3      	str	r3, [r0, #76]	; 0x4c
    50de:	6503      	str	r3, [r0, #80]	; 0x50
    50e0:	4b13      	ldr	r3, [pc, #76]	; (5130 <__sinit+0x60>)
    50e2:	4a14      	ldr	r2, [pc, #80]	; (5134 <__sinit+0x64>)
    50e4:	681b      	ldr	r3, [r3, #0]
    50e6:	6282      	str	r2, [r0, #40]	; 0x28
    50e8:	9301      	str	r3, [sp, #4]
    50ea:	4298      	cmp	r0, r3
    50ec:	d101      	bne.n	50f2 <__sinit+0x22>
    50ee:	2301      	movs	r3, #1
    50f0:	6183      	str	r3, [r0, #24]
    50f2:	0020      	movs	r0, r4
    50f4:	f000 f820 	bl	5138 <__sfp>
    50f8:	6060      	str	r0, [r4, #4]
    50fa:	0020      	movs	r0, r4
    50fc:	f000 f81c 	bl	5138 <__sfp>
    5100:	60a0      	str	r0, [r4, #8]
    5102:	0020      	movs	r0, r4
    5104:	f000 f818 	bl	5138 <__sfp>
    5108:	2200      	movs	r2, #0
    510a:	60e0      	str	r0, [r4, #12]
    510c:	2104      	movs	r1, #4
    510e:	6860      	ldr	r0, [r4, #4]
    5110:	f7ff ffa4 	bl	505c <std.isra.0>
    5114:	2201      	movs	r2, #1
    5116:	2109      	movs	r1, #9
    5118:	68a0      	ldr	r0, [r4, #8]
    511a:	f7ff ff9f 	bl	505c <std.isra.0>
    511e:	2202      	movs	r2, #2
    5120:	2112      	movs	r1, #18
    5122:	68e0      	ldr	r0, [r4, #12]
    5124:	f7ff ff9a 	bl	505c <std.isra.0>
    5128:	2301      	movs	r3, #1
    512a:	61a3      	str	r3, [r4, #24]
    512c:	bd13      	pop	{r0, r1, r4, pc}
    512e:	46c0      	nop			; (mov r8, r8)
    5130:	00008b34 	.word	0x00008b34
    5134:	0000504d 	.word	0x0000504d

00005138 <__sfp>:
    5138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    513a:	4b1d      	ldr	r3, [pc, #116]	; (51b0 <__sfp+0x78>)
    513c:	0006      	movs	r6, r0
    513e:	681d      	ldr	r5, [r3, #0]
    5140:	69ab      	ldr	r3, [r5, #24]
    5142:	2b00      	cmp	r3, #0
    5144:	d102      	bne.n	514c <__sfp+0x14>
    5146:	0028      	movs	r0, r5
    5148:	f7ff ffc2 	bl	50d0 <__sinit>
    514c:	3548      	adds	r5, #72	; 0x48
    514e:	68ac      	ldr	r4, [r5, #8]
    5150:	686b      	ldr	r3, [r5, #4]
    5152:	3b01      	subs	r3, #1
    5154:	d405      	bmi.n	5162 <__sfp+0x2a>
    5156:	220c      	movs	r2, #12
    5158:	5ea7      	ldrsh	r7, [r4, r2]
    515a:	2f00      	cmp	r7, #0
    515c:	d010      	beq.n	5180 <__sfp+0x48>
    515e:	3468      	adds	r4, #104	; 0x68
    5160:	e7f7      	b.n	5152 <__sfp+0x1a>
    5162:	682b      	ldr	r3, [r5, #0]
    5164:	2b00      	cmp	r3, #0
    5166:	d001      	beq.n	516c <__sfp+0x34>
    5168:	682d      	ldr	r5, [r5, #0]
    516a:	e7f0      	b.n	514e <__sfp+0x16>
    516c:	2104      	movs	r1, #4
    516e:	0030      	movs	r0, r6
    5170:	f7ff ff98 	bl	50a4 <__sfmoreglue>
    5174:	6028      	str	r0, [r5, #0]
    5176:	2800      	cmp	r0, #0
    5178:	d1f6      	bne.n	5168 <__sfp+0x30>
    517a:	230c      	movs	r3, #12
    517c:	6033      	str	r3, [r6, #0]
    517e:	e016      	b.n	51ae <__sfp+0x76>
    5180:	2301      	movs	r3, #1
    5182:	0020      	movs	r0, r4
    5184:	425b      	negs	r3, r3
    5186:	81e3      	strh	r3, [r4, #14]
    5188:	3302      	adds	r3, #2
    518a:	81a3      	strh	r3, [r4, #12]
    518c:	6667      	str	r7, [r4, #100]	; 0x64
    518e:	6027      	str	r7, [r4, #0]
    5190:	60a7      	str	r7, [r4, #8]
    5192:	6067      	str	r7, [r4, #4]
    5194:	6127      	str	r7, [r4, #16]
    5196:	6167      	str	r7, [r4, #20]
    5198:	61a7      	str	r7, [r4, #24]
    519a:	305c      	adds	r0, #92	; 0x5c
    519c:	2208      	movs	r2, #8
    519e:	0039      	movs	r1, r7
    51a0:	f7fe f9c1 	bl	3526 <memset>
    51a4:	0020      	movs	r0, r4
    51a6:	6367      	str	r7, [r4, #52]	; 0x34
    51a8:	63a7      	str	r7, [r4, #56]	; 0x38
    51aa:	64a7      	str	r7, [r4, #72]	; 0x48
    51ac:	64e7      	str	r7, [r4, #76]	; 0x4c
    51ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    51b0:	00008b34 	.word	0x00008b34

000051b4 <_fwalk_reent>:
    51b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    51b6:	0004      	movs	r4, r0
    51b8:	0007      	movs	r7, r0
    51ba:	2600      	movs	r6, #0
    51bc:	9101      	str	r1, [sp, #4]
    51be:	3448      	adds	r4, #72	; 0x48
    51c0:	2c00      	cmp	r4, #0
    51c2:	d016      	beq.n	51f2 <_fwalk_reent+0x3e>
    51c4:	6863      	ldr	r3, [r4, #4]
    51c6:	68a5      	ldr	r5, [r4, #8]
    51c8:	9300      	str	r3, [sp, #0]
    51ca:	9b00      	ldr	r3, [sp, #0]
    51cc:	3b01      	subs	r3, #1
    51ce:	9300      	str	r3, [sp, #0]
    51d0:	d40d      	bmi.n	51ee <_fwalk_reent+0x3a>
    51d2:	89ab      	ldrh	r3, [r5, #12]
    51d4:	2b01      	cmp	r3, #1
    51d6:	d908      	bls.n	51ea <_fwalk_reent+0x36>
    51d8:	220e      	movs	r2, #14
    51da:	5eab      	ldrsh	r3, [r5, r2]
    51dc:	3301      	adds	r3, #1
    51de:	d004      	beq.n	51ea <_fwalk_reent+0x36>
    51e0:	0029      	movs	r1, r5
    51e2:	0038      	movs	r0, r7
    51e4:	9b01      	ldr	r3, [sp, #4]
    51e6:	4798      	blx	r3
    51e8:	4306      	orrs	r6, r0
    51ea:	3568      	adds	r5, #104	; 0x68
    51ec:	e7ed      	b.n	51ca <_fwalk_reent+0x16>
    51ee:	6824      	ldr	r4, [r4, #0]
    51f0:	e7e6      	b.n	51c0 <_fwalk_reent+0xc>
    51f2:	0030      	movs	r0, r6
    51f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000051f8 <_localeconv_r>:
    51f8:	4800      	ldr	r0, [pc, #0]	; (51fc <_localeconv_r+0x4>)
    51fa:	4770      	bx	lr
    51fc:	20000070 	.word	0x20000070

00005200 <__swhatbuf_r>:
    5200:	b570      	push	{r4, r5, r6, lr}
    5202:	000e      	movs	r6, r1
    5204:	001d      	movs	r5, r3
    5206:	230e      	movs	r3, #14
    5208:	5ec9      	ldrsh	r1, [r1, r3]
    520a:	b090      	sub	sp, #64	; 0x40
    520c:	0014      	movs	r4, r2
    520e:	2900      	cmp	r1, #0
    5210:	da06      	bge.n	5220 <__swhatbuf_r+0x20>
    5212:	2300      	movs	r3, #0
    5214:	602b      	str	r3, [r5, #0]
    5216:	89b3      	ldrh	r3, [r6, #12]
    5218:	061b      	lsls	r3, r3, #24
    521a:	d50f      	bpl.n	523c <__swhatbuf_r+0x3c>
    521c:	2340      	movs	r3, #64	; 0x40
    521e:	e00f      	b.n	5240 <__swhatbuf_r+0x40>
    5220:	aa01      	add	r2, sp, #4
    5222:	f000 fdc3 	bl	5dac <_fstat_r>
    5226:	2800      	cmp	r0, #0
    5228:	dbf3      	blt.n	5212 <__swhatbuf_r+0x12>
    522a:	23f0      	movs	r3, #240	; 0xf0
    522c:	9a02      	ldr	r2, [sp, #8]
    522e:	021b      	lsls	r3, r3, #8
    5230:	4013      	ands	r3, r2
    5232:	4a05      	ldr	r2, [pc, #20]	; (5248 <__swhatbuf_r+0x48>)
    5234:	189b      	adds	r3, r3, r2
    5236:	425a      	negs	r2, r3
    5238:	4153      	adcs	r3, r2
    523a:	602b      	str	r3, [r5, #0]
    523c:	2380      	movs	r3, #128	; 0x80
    523e:	00db      	lsls	r3, r3, #3
    5240:	2000      	movs	r0, #0
    5242:	6023      	str	r3, [r4, #0]
    5244:	b010      	add	sp, #64	; 0x40
    5246:	bd70      	pop	{r4, r5, r6, pc}
    5248:	ffffe000 	.word	0xffffe000

0000524c <__smakebuf_r>:
    524c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    524e:	2602      	movs	r6, #2
    5250:	898b      	ldrh	r3, [r1, #12]
    5252:	0005      	movs	r5, r0
    5254:	000c      	movs	r4, r1
    5256:	4233      	tst	r3, r6
    5258:	d110      	bne.n	527c <__smakebuf_r+0x30>
    525a:	ab01      	add	r3, sp, #4
    525c:	466a      	mov	r2, sp
    525e:	f7ff ffcf 	bl	5200 <__swhatbuf_r>
    5262:	9900      	ldr	r1, [sp, #0]
    5264:	0007      	movs	r7, r0
    5266:	0028      	movs	r0, r5
    5268:	f000 fb82 	bl	5970 <_malloc_r>
    526c:	2800      	cmp	r0, #0
    526e:	d10c      	bne.n	528a <__smakebuf_r+0x3e>
    5270:	220c      	movs	r2, #12
    5272:	5ea3      	ldrsh	r3, [r4, r2]
    5274:	059a      	lsls	r2, r3, #22
    5276:	d423      	bmi.n	52c0 <__smakebuf_r+0x74>
    5278:	4333      	orrs	r3, r6
    527a:	81a3      	strh	r3, [r4, #12]
    527c:	0023      	movs	r3, r4
    527e:	3347      	adds	r3, #71	; 0x47
    5280:	6023      	str	r3, [r4, #0]
    5282:	6123      	str	r3, [r4, #16]
    5284:	2301      	movs	r3, #1
    5286:	6163      	str	r3, [r4, #20]
    5288:	e01a      	b.n	52c0 <__smakebuf_r+0x74>
    528a:	2280      	movs	r2, #128	; 0x80
    528c:	4b0d      	ldr	r3, [pc, #52]	; (52c4 <__smakebuf_r+0x78>)
    528e:	62ab      	str	r3, [r5, #40]	; 0x28
    5290:	89a3      	ldrh	r3, [r4, #12]
    5292:	6020      	str	r0, [r4, #0]
    5294:	4313      	orrs	r3, r2
    5296:	81a3      	strh	r3, [r4, #12]
    5298:	9b00      	ldr	r3, [sp, #0]
    529a:	6120      	str	r0, [r4, #16]
    529c:	6163      	str	r3, [r4, #20]
    529e:	9b01      	ldr	r3, [sp, #4]
    52a0:	2b00      	cmp	r3, #0
    52a2:	d00a      	beq.n	52ba <__smakebuf_r+0x6e>
    52a4:	230e      	movs	r3, #14
    52a6:	5ee1      	ldrsh	r1, [r4, r3]
    52a8:	0028      	movs	r0, r5
    52aa:	f000 fd91 	bl	5dd0 <_isatty_r>
    52ae:	2800      	cmp	r0, #0
    52b0:	d003      	beq.n	52ba <__smakebuf_r+0x6e>
    52b2:	2201      	movs	r2, #1
    52b4:	89a3      	ldrh	r3, [r4, #12]
    52b6:	4313      	orrs	r3, r2
    52b8:	81a3      	strh	r3, [r4, #12]
    52ba:	89a3      	ldrh	r3, [r4, #12]
    52bc:	431f      	orrs	r7, r3
    52be:	81a7      	strh	r7, [r4, #12]
    52c0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    52c2:	46c0      	nop			; (mov r8, r8)
    52c4:	0000504d 	.word	0x0000504d

000052c8 <malloc>:
    52c8:	b510      	push	{r4, lr}
    52ca:	4b03      	ldr	r3, [pc, #12]	; (52d8 <malloc+0x10>)
    52cc:	0001      	movs	r1, r0
    52ce:	6818      	ldr	r0, [r3, #0]
    52d0:	f000 fb4e 	bl	5970 <_malloc_r>
    52d4:	bd10      	pop	{r4, pc}
    52d6:	46c0      	nop			; (mov r8, r8)
    52d8:	2000006c 	.word	0x2000006c

000052dc <memchr>:
    52dc:	b2c9      	uxtb	r1, r1
    52de:	1882      	adds	r2, r0, r2
    52e0:	4290      	cmp	r0, r2
    52e2:	d004      	beq.n	52ee <memchr+0x12>
    52e4:	7803      	ldrb	r3, [r0, #0]
    52e6:	428b      	cmp	r3, r1
    52e8:	d002      	beq.n	52f0 <memchr+0x14>
    52ea:	3001      	adds	r0, #1
    52ec:	e7f8      	b.n	52e0 <memchr+0x4>
    52ee:	2000      	movs	r0, #0
    52f0:	4770      	bx	lr

000052f2 <_Balloc>:
    52f2:	b570      	push	{r4, r5, r6, lr}
    52f4:	6a46      	ldr	r6, [r0, #36]	; 0x24
    52f6:	0004      	movs	r4, r0
    52f8:	000d      	movs	r5, r1
    52fa:	2e00      	cmp	r6, #0
    52fc:	d107      	bne.n	530e <_Balloc+0x1c>
    52fe:	2010      	movs	r0, #16
    5300:	f7ff ffe2 	bl	52c8 <malloc>
    5304:	6260      	str	r0, [r4, #36]	; 0x24
    5306:	6046      	str	r6, [r0, #4]
    5308:	6086      	str	r6, [r0, #8]
    530a:	6006      	str	r6, [r0, #0]
    530c:	60c6      	str	r6, [r0, #12]
    530e:	6a66      	ldr	r6, [r4, #36]	; 0x24
    5310:	68f3      	ldr	r3, [r6, #12]
    5312:	2b00      	cmp	r3, #0
    5314:	d009      	beq.n	532a <_Balloc+0x38>
    5316:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5318:	00aa      	lsls	r2, r5, #2
    531a:	68db      	ldr	r3, [r3, #12]
    531c:	189b      	adds	r3, r3, r2
    531e:	6818      	ldr	r0, [r3, #0]
    5320:	2800      	cmp	r0, #0
    5322:	d00e      	beq.n	5342 <_Balloc+0x50>
    5324:	6802      	ldr	r2, [r0, #0]
    5326:	601a      	str	r2, [r3, #0]
    5328:	e017      	b.n	535a <_Balloc+0x68>
    532a:	2221      	movs	r2, #33	; 0x21
    532c:	2104      	movs	r1, #4
    532e:	0020      	movs	r0, r4
    5330:	f000 faca 	bl	58c8 <_calloc_r>
    5334:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5336:	60f0      	str	r0, [r6, #12]
    5338:	68db      	ldr	r3, [r3, #12]
    533a:	2b00      	cmp	r3, #0
    533c:	d1eb      	bne.n	5316 <_Balloc+0x24>
    533e:	2000      	movs	r0, #0
    5340:	e00e      	b.n	5360 <_Balloc+0x6e>
    5342:	2101      	movs	r1, #1
    5344:	000e      	movs	r6, r1
    5346:	40ae      	lsls	r6, r5
    5348:	1d72      	adds	r2, r6, #5
    534a:	0092      	lsls	r2, r2, #2
    534c:	0020      	movs	r0, r4
    534e:	f000 fabb 	bl	58c8 <_calloc_r>
    5352:	2800      	cmp	r0, #0
    5354:	d0f3      	beq.n	533e <_Balloc+0x4c>
    5356:	6045      	str	r5, [r0, #4]
    5358:	6086      	str	r6, [r0, #8]
    535a:	2300      	movs	r3, #0
    535c:	6103      	str	r3, [r0, #16]
    535e:	60c3      	str	r3, [r0, #12]
    5360:	bd70      	pop	{r4, r5, r6, pc}

00005362 <_Bfree>:
    5362:	b570      	push	{r4, r5, r6, lr}
    5364:	6a45      	ldr	r5, [r0, #36]	; 0x24
    5366:	0006      	movs	r6, r0
    5368:	000c      	movs	r4, r1
    536a:	2d00      	cmp	r5, #0
    536c:	d107      	bne.n	537e <_Bfree+0x1c>
    536e:	2010      	movs	r0, #16
    5370:	f7ff ffaa 	bl	52c8 <malloc>
    5374:	6270      	str	r0, [r6, #36]	; 0x24
    5376:	6045      	str	r5, [r0, #4]
    5378:	6085      	str	r5, [r0, #8]
    537a:	6005      	str	r5, [r0, #0]
    537c:	60c5      	str	r5, [r0, #12]
    537e:	2c00      	cmp	r4, #0
    5380:	d007      	beq.n	5392 <_Bfree+0x30>
    5382:	6a72      	ldr	r2, [r6, #36]	; 0x24
    5384:	6863      	ldr	r3, [r4, #4]
    5386:	68d2      	ldr	r2, [r2, #12]
    5388:	009b      	lsls	r3, r3, #2
    538a:	18d3      	adds	r3, r2, r3
    538c:	681a      	ldr	r2, [r3, #0]
    538e:	6022      	str	r2, [r4, #0]
    5390:	601c      	str	r4, [r3, #0]
    5392:	bd70      	pop	{r4, r5, r6, pc}

00005394 <__multadd>:
    5394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5396:	0007      	movs	r7, r0
    5398:	0008      	movs	r0, r1
    539a:	000c      	movs	r4, r1
    539c:	690d      	ldr	r5, [r1, #16]
    539e:	001e      	movs	r6, r3
    53a0:	2100      	movs	r1, #0
    53a2:	9201      	str	r2, [sp, #4]
    53a4:	3014      	adds	r0, #20
    53a6:	9a01      	ldr	r2, [sp, #4]
    53a8:	8803      	ldrh	r3, [r0, #0]
    53aa:	3101      	adds	r1, #1
    53ac:	4353      	muls	r3, r2
    53ae:	199b      	adds	r3, r3, r6
    53b0:	6806      	ldr	r6, [r0, #0]
    53b2:	0c36      	lsrs	r6, r6, #16
    53b4:	4356      	muls	r6, r2
    53b6:	0c1a      	lsrs	r2, r3, #16
    53b8:	4694      	mov	ip, r2
    53ba:	44b4      	add	ip, r6
    53bc:	4662      	mov	r2, ip
    53be:	0c16      	lsrs	r6, r2, #16
    53c0:	0412      	lsls	r2, r2, #16
    53c2:	4694      	mov	ip, r2
    53c4:	b29b      	uxth	r3, r3
    53c6:	4463      	add	r3, ip
    53c8:	c008      	stmia	r0!, {r3}
    53ca:	428d      	cmp	r5, r1
    53cc:	dceb      	bgt.n	53a6 <__multadd+0x12>
    53ce:	2e00      	cmp	r6, #0
    53d0:	d01b      	beq.n	540a <__multadd+0x76>
    53d2:	68a3      	ldr	r3, [r4, #8]
    53d4:	429d      	cmp	r5, r3
    53d6:	db12      	blt.n	53fe <__multadd+0x6a>
    53d8:	6863      	ldr	r3, [r4, #4]
    53da:	0038      	movs	r0, r7
    53dc:	1c59      	adds	r1, r3, #1
    53de:	f7ff ff88 	bl	52f2 <_Balloc>
    53e2:	0021      	movs	r1, r4
    53e4:	6923      	ldr	r3, [r4, #16]
    53e6:	9001      	str	r0, [sp, #4]
    53e8:	1c9a      	adds	r2, r3, #2
    53ea:	0092      	lsls	r2, r2, #2
    53ec:	310c      	adds	r1, #12
    53ee:	300c      	adds	r0, #12
    53f0:	f7fe f890 	bl	3514 <memcpy>
    53f4:	0021      	movs	r1, r4
    53f6:	0038      	movs	r0, r7
    53f8:	f7ff ffb3 	bl	5362 <_Bfree>
    53fc:	9c01      	ldr	r4, [sp, #4]
    53fe:	1d2b      	adds	r3, r5, #4
    5400:	009b      	lsls	r3, r3, #2
    5402:	18e3      	adds	r3, r4, r3
    5404:	3501      	adds	r5, #1
    5406:	605e      	str	r6, [r3, #4]
    5408:	6125      	str	r5, [r4, #16]
    540a:	0020      	movs	r0, r4
    540c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000540e <__hi0bits>:
    540e:	2200      	movs	r2, #0
    5410:	0003      	movs	r3, r0
    5412:	0c01      	lsrs	r1, r0, #16
    5414:	4291      	cmp	r1, r2
    5416:	d101      	bne.n	541c <__hi0bits+0xe>
    5418:	0403      	lsls	r3, r0, #16
    541a:	3210      	adds	r2, #16
    541c:	0e19      	lsrs	r1, r3, #24
    541e:	d101      	bne.n	5424 <__hi0bits+0x16>
    5420:	3208      	adds	r2, #8
    5422:	021b      	lsls	r3, r3, #8
    5424:	0f19      	lsrs	r1, r3, #28
    5426:	d101      	bne.n	542c <__hi0bits+0x1e>
    5428:	3204      	adds	r2, #4
    542a:	011b      	lsls	r3, r3, #4
    542c:	0f99      	lsrs	r1, r3, #30
    542e:	d101      	bne.n	5434 <__hi0bits+0x26>
    5430:	3202      	adds	r2, #2
    5432:	009b      	lsls	r3, r3, #2
    5434:	0010      	movs	r0, r2
    5436:	2b00      	cmp	r3, #0
    5438:	db03      	blt.n	5442 <__hi0bits+0x34>
    543a:	2020      	movs	r0, #32
    543c:	005b      	lsls	r3, r3, #1
    543e:	d500      	bpl.n	5442 <__hi0bits+0x34>
    5440:	1c50      	adds	r0, r2, #1
    5442:	4770      	bx	lr

00005444 <__lo0bits>:
    5444:	2207      	movs	r2, #7
    5446:	6803      	ldr	r3, [r0, #0]
    5448:	b510      	push	{r4, lr}
    544a:	0001      	movs	r1, r0
    544c:	401a      	ands	r2, r3
    544e:	d00c      	beq.n	546a <__lo0bits+0x26>
    5450:	2401      	movs	r4, #1
    5452:	2000      	movs	r0, #0
    5454:	4223      	tst	r3, r4
    5456:	d123      	bne.n	54a0 <__lo0bits+0x5c>
    5458:	2202      	movs	r2, #2
    545a:	4213      	tst	r3, r2
    545c:	d003      	beq.n	5466 <__lo0bits+0x22>
    545e:	40e3      	lsrs	r3, r4
    5460:	0020      	movs	r0, r4
    5462:	600b      	str	r3, [r1, #0]
    5464:	e01c      	b.n	54a0 <__lo0bits+0x5c>
    5466:	089b      	lsrs	r3, r3, #2
    5468:	e018      	b.n	549c <__lo0bits+0x58>
    546a:	b298      	uxth	r0, r3
    546c:	2800      	cmp	r0, #0
    546e:	d101      	bne.n	5474 <__lo0bits+0x30>
    5470:	2210      	movs	r2, #16
    5472:	0c1b      	lsrs	r3, r3, #16
    5474:	b2d8      	uxtb	r0, r3
    5476:	2800      	cmp	r0, #0
    5478:	d101      	bne.n	547e <__lo0bits+0x3a>
    547a:	3208      	adds	r2, #8
    547c:	0a1b      	lsrs	r3, r3, #8
    547e:	0718      	lsls	r0, r3, #28
    5480:	d101      	bne.n	5486 <__lo0bits+0x42>
    5482:	3204      	adds	r2, #4
    5484:	091b      	lsrs	r3, r3, #4
    5486:	0798      	lsls	r0, r3, #30
    5488:	d101      	bne.n	548e <__lo0bits+0x4a>
    548a:	3202      	adds	r2, #2
    548c:	089b      	lsrs	r3, r3, #2
    548e:	07d8      	lsls	r0, r3, #31
    5490:	d404      	bmi.n	549c <__lo0bits+0x58>
    5492:	085b      	lsrs	r3, r3, #1
    5494:	2020      	movs	r0, #32
    5496:	2b00      	cmp	r3, #0
    5498:	d002      	beq.n	54a0 <__lo0bits+0x5c>
    549a:	3201      	adds	r2, #1
    549c:	0010      	movs	r0, r2
    549e:	600b      	str	r3, [r1, #0]
    54a0:	bd10      	pop	{r4, pc}

000054a2 <__i2b>:
    54a2:	b510      	push	{r4, lr}
    54a4:	000c      	movs	r4, r1
    54a6:	2101      	movs	r1, #1
    54a8:	f7ff ff23 	bl	52f2 <_Balloc>
    54ac:	2301      	movs	r3, #1
    54ae:	6144      	str	r4, [r0, #20]
    54b0:	6103      	str	r3, [r0, #16]
    54b2:	bd10      	pop	{r4, pc}

000054b4 <__multiply>:
    54b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    54b6:	690b      	ldr	r3, [r1, #16]
    54b8:	0014      	movs	r4, r2
    54ba:	6912      	ldr	r2, [r2, #16]
    54bc:	b089      	sub	sp, #36	; 0x24
    54be:	000d      	movs	r5, r1
    54c0:	4293      	cmp	r3, r2
    54c2:	da01      	bge.n	54c8 <__multiply+0x14>
    54c4:	0025      	movs	r5, r4
    54c6:	000c      	movs	r4, r1
    54c8:	692f      	ldr	r7, [r5, #16]
    54ca:	6926      	ldr	r6, [r4, #16]
    54cc:	68aa      	ldr	r2, [r5, #8]
    54ce:	19bb      	adds	r3, r7, r6
    54d0:	6869      	ldr	r1, [r5, #4]
    54d2:	9301      	str	r3, [sp, #4]
    54d4:	4293      	cmp	r3, r2
    54d6:	dd00      	ble.n	54da <__multiply+0x26>
    54d8:	3101      	adds	r1, #1
    54da:	f7ff ff0a 	bl	52f2 <_Balloc>
    54de:	0002      	movs	r2, r0
    54e0:	19bb      	adds	r3, r7, r6
    54e2:	3214      	adds	r2, #20
    54e4:	009b      	lsls	r3, r3, #2
    54e6:	18d3      	adds	r3, r2, r3
    54e8:	469c      	mov	ip, r3
    54ea:	2100      	movs	r1, #0
    54ec:	0013      	movs	r3, r2
    54ee:	9002      	str	r0, [sp, #8]
    54f0:	4563      	cmp	r3, ip
    54f2:	d201      	bcs.n	54f8 <__multiply+0x44>
    54f4:	c302      	stmia	r3!, {r1}
    54f6:	e7fb      	b.n	54f0 <__multiply+0x3c>
    54f8:	3514      	adds	r5, #20
    54fa:	00bf      	lsls	r7, r7, #2
    54fc:	19eb      	adds	r3, r5, r7
    54fe:	3414      	adds	r4, #20
    5500:	00b6      	lsls	r6, r6, #2
    5502:	9305      	str	r3, [sp, #20]
    5504:	19a3      	adds	r3, r4, r6
    5506:	9503      	str	r5, [sp, #12]
    5508:	9307      	str	r3, [sp, #28]
    550a:	9b07      	ldr	r3, [sp, #28]
    550c:	429c      	cmp	r4, r3
    550e:	d251      	bcs.n	55b4 <__multiply+0x100>
    5510:	8820      	ldrh	r0, [r4, #0]
    5512:	2800      	cmp	r0, #0
    5514:	d01e      	beq.n	5554 <__multiply+0xa0>
    5516:	0015      	movs	r5, r2
    5518:	2600      	movs	r6, #0
    551a:	9f03      	ldr	r7, [sp, #12]
    551c:	cf08      	ldmia	r7!, {r3}
    551e:	9506      	str	r5, [sp, #24]
    5520:	9304      	str	r3, [sp, #16]
    5522:	466b      	mov	r3, sp
    5524:	8a1b      	ldrh	r3, [r3, #16]
    5526:	4343      	muls	r3, r0
    5528:	0019      	movs	r1, r3
    552a:	882b      	ldrh	r3, [r5, #0]
    552c:	18cb      	adds	r3, r1, r3
    552e:	9904      	ldr	r1, [sp, #16]
    5530:	199b      	adds	r3, r3, r6
    5532:	0c09      	lsrs	r1, r1, #16
    5534:	4341      	muls	r1, r0
    5536:	682e      	ldr	r6, [r5, #0]
    5538:	0c36      	lsrs	r6, r6, #16
    553a:	1989      	adds	r1, r1, r6
    553c:	0c1e      	lsrs	r6, r3, #16
    553e:	1989      	adds	r1, r1, r6
    5540:	0c0e      	lsrs	r6, r1, #16
    5542:	b29b      	uxth	r3, r3
    5544:	0409      	lsls	r1, r1, #16
    5546:	430b      	orrs	r3, r1
    5548:	c508      	stmia	r5!, {r3}
    554a:	9b05      	ldr	r3, [sp, #20]
    554c:	42bb      	cmp	r3, r7
    554e:	d8e5      	bhi.n	551c <__multiply+0x68>
    5550:	9b06      	ldr	r3, [sp, #24]
    5552:	605e      	str	r6, [r3, #4]
    5554:	6823      	ldr	r3, [r4, #0]
    5556:	0c1d      	lsrs	r5, r3, #16
    5558:	d01f      	beq.n	559a <__multiply+0xe6>
    555a:	2100      	movs	r1, #0
    555c:	0010      	movs	r0, r2
    555e:	6813      	ldr	r3, [r2, #0]
    5560:	9f03      	ldr	r7, [sp, #12]
    5562:	9104      	str	r1, [sp, #16]
    5564:	883e      	ldrh	r6, [r7, #0]
    5566:	6801      	ldr	r1, [r0, #0]
    5568:	436e      	muls	r6, r5
    556a:	0c09      	lsrs	r1, r1, #16
    556c:	1871      	adds	r1, r6, r1
    556e:	9e04      	ldr	r6, [sp, #16]
    5570:	b29b      	uxth	r3, r3
    5572:	1989      	adds	r1, r1, r6
    5574:	040e      	lsls	r6, r1, #16
    5576:	4333      	orrs	r3, r6
    5578:	6003      	str	r3, [r0, #0]
    557a:	cf08      	ldmia	r7!, {r3}
    557c:	8886      	ldrh	r6, [r0, #4]
    557e:	0c1b      	lsrs	r3, r3, #16
    5580:	436b      	muls	r3, r5
    5582:	0c09      	lsrs	r1, r1, #16
    5584:	199b      	adds	r3, r3, r6
    5586:	185b      	adds	r3, r3, r1
    5588:	0c19      	lsrs	r1, r3, #16
    558a:	9104      	str	r1, [sp, #16]
    558c:	9905      	ldr	r1, [sp, #20]
    558e:	9006      	str	r0, [sp, #24]
    5590:	3004      	adds	r0, #4
    5592:	42b9      	cmp	r1, r7
    5594:	d8e6      	bhi.n	5564 <__multiply+0xb0>
    5596:	9906      	ldr	r1, [sp, #24]
    5598:	604b      	str	r3, [r1, #4]
    559a:	3404      	adds	r4, #4
    559c:	3204      	adds	r2, #4
    559e:	e7b4      	b.n	550a <__multiply+0x56>
    55a0:	2304      	movs	r3, #4
    55a2:	425b      	negs	r3, r3
    55a4:	449c      	add	ip, r3
    55a6:	4663      	mov	r3, ip
    55a8:	681b      	ldr	r3, [r3, #0]
    55aa:	2b00      	cmp	r3, #0
    55ac:	d105      	bne.n	55ba <__multiply+0x106>
    55ae:	9b01      	ldr	r3, [sp, #4]
    55b0:	3b01      	subs	r3, #1
    55b2:	9301      	str	r3, [sp, #4]
    55b4:	9b01      	ldr	r3, [sp, #4]
    55b6:	2b00      	cmp	r3, #0
    55b8:	dcf2      	bgt.n	55a0 <__multiply+0xec>
    55ba:	9b02      	ldr	r3, [sp, #8]
    55bc:	9a01      	ldr	r2, [sp, #4]
    55be:	0018      	movs	r0, r3
    55c0:	611a      	str	r2, [r3, #16]
    55c2:	b009      	add	sp, #36	; 0x24
    55c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000055c8 <__pow5mult>:
    55c8:	2303      	movs	r3, #3
    55ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    55cc:	4013      	ands	r3, r2
    55ce:	0005      	movs	r5, r0
    55d0:	000e      	movs	r6, r1
    55d2:	0014      	movs	r4, r2
    55d4:	2b00      	cmp	r3, #0
    55d6:	d008      	beq.n	55ea <__pow5mult+0x22>
    55d8:	4923      	ldr	r1, [pc, #140]	; (5668 <__pow5mult+0xa0>)
    55da:	3b01      	subs	r3, #1
    55dc:	009a      	lsls	r2, r3, #2
    55de:	5852      	ldr	r2, [r2, r1]
    55e0:	2300      	movs	r3, #0
    55e2:	0031      	movs	r1, r6
    55e4:	f7ff fed6 	bl	5394 <__multadd>
    55e8:	0006      	movs	r6, r0
    55ea:	10a3      	asrs	r3, r4, #2
    55ec:	9301      	str	r3, [sp, #4]
    55ee:	d038      	beq.n	5662 <__pow5mult+0x9a>
    55f0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    55f2:	2c00      	cmp	r4, #0
    55f4:	d107      	bne.n	5606 <__pow5mult+0x3e>
    55f6:	2010      	movs	r0, #16
    55f8:	f7ff fe66 	bl	52c8 <malloc>
    55fc:	6268      	str	r0, [r5, #36]	; 0x24
    55fe:	6044      	str	r4, [r0, #4]
    5600:	6084      	str	r4, [r0, #8]
    5602:	6004      	str	r4, [r0, #0]
    5604:	60c4      	str	r4, [r0, #12]
    5606:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    5608:	68bc      	ldr	r4, [r7, #8]
    560a:	2c00      	cmp	r4, #0
    560c:	d110      	bne.n	5630 <__pow5mult+0x68>
    560e:	4917      	ldr	r1, [pc, #92]	; (566c <__pow5mult+0xa4>)
    5610:	0028      	movs	r0, r5
    5612:	f7ff ff46 	bl	54a2 <__i2b>
    5616:	2300      	movs	r3, #0
    5618:	60b8      	str	r0, [r7, #8]
    561a:	0004      	movs	r4, r0
    561c:	6003      	str	r3, [r0, #0]
    561e:	e007      	b.n	5630 <__pow5mult+0x68>
    5620:	9b01      	ldr	r3, [sp, #4]
    5622:	105b      	asrs	r3, r3, #1
    5624:	9301      	str	r3, [sp, #4]
    5626:	d01c      	beq.n	5662 <__pow5mult+0x9a>
    5628:	6820      	ldr	r0, [r4, #0]
    562a:	2800      	cmp	r0, #0
    562c:	d010      	beq.n	5650 <__pow5mult+0x88>
    562e:	0004      	movs	r4, r0
    5630:	2201      	movs	r2, #1
    5632:	9b01      	ldr	r3, [sp, #4]
    5634:	4213      	tst	r3, r2
    5636:	d0f3      	beq.n	5620 <__pow5mult+0x58>
    5638:	0031      	movs	r1, r6
    563a:	0022      	movs	r2, r4
    563c:	0028      	movs	r0, r5
    563e:	f7ff ff39 	bl	54b4 <__multiply>
    5642:	0007      	movs	r7, r0
    5644:	0031      	movs	r1, r6
    5646:	0028      	movs	r0, r5
    5648:	f7ff fe8b 	bl	5362 <_Bfree>
    564c:	003e      	movs	r6, r7
    564e:	e7e7      	b.n	5620 <__pow5mult+0x58>
    5650:	0022      	movs	r2, r4
    5652:	0021      	movs	r1, r4
    5654:	0028      	movs	r0, r5
    5656:	f7ff ff2d 	bl	54b4 <__multiply>
    565a:	2300      	movs	r3, #0
    565c:	6020      	str	r0, [r4, #0]
    565e:	6003      	str	r3, [r0, #0]
    5660:	e7e5      	b.n	562e <__pow5mult+0x66>
    5662:	0030      	movs	r0, r6
    5664:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5666:	46c0      	nop			; (mov r8, r8)
    5668:	00008cd8 	.word	0x00008cd8
    566c:	00000271 	.word	0x00000271

00005670 <__lshift>:
    5670:	b5f0      	push	{r4, r5, r6, r7, lr}
    5672:	000c      	movs	r4, r1
    5674:	0017      	movs	r7, r2
    5676:	6923      	ldr	r3, [r4, #16]
    5678:	1155      	asrs	r5, r2, #5
    567a:	b085      	sub	sp, #20
    567c:	18eb      	adds	r3, r5, r3
    567e:	9301      	str	r3, [sp, #4]
    5680:	3301      	adds	r3, #1
    5682:	9300      	str	r3, [sp, #0]
    5684:	6849      	ldr	r1, [r1, #4]
    5686:	68a3      	ldr	r3, [r4, #8]
    5688:	9002      	str	r0, [sp, #8]
    568a:	9a00      	ldr	r2, [sp, #0]
    568c:	4293      	cmp	r3, r2
    568e:	da02      	bge.n	5696 <__lshift+0x26>
    5690:	3101      	adds	r1, #1
    5692:	005b      	lsls	r3, r3, #1
    5694:	e7f9      	b.n	568a <__lshift+0x1a>
    5696:	9802      	ldr	r0, [sp, #8]
    5698:	f7ff fe2b 	bl	52f2 <_Balloc>
    569c:	2300      	movs	r3, #0
    569e:	0002      	movs	r2, r0
    56a0:	0006      	movs	r6, r0
    56a2:	0019      	movs	r1, r3
    56a4:	3214      	adds	r2, #20
    56a6:	42ab      	cmp	r3, r5
    56a8:	da03      	bge.n	56b2 <__lshift+0x42>
    56aa:	0098      	lsls	r0, r3, #2
    56ac:	5011      	str	r1, [r2, r0]
    56ae:	3301      	adds	r3, #1
    56b0:	e7f9      	b.n	56a6 <__lshift+0x36>
    56b2:	43eb      	mvns	r3, r5
    56b4:	17db      	asrs	r3, r3, #31
    56b6:	401d      	ands	r5, r3
    56b8:	0023      	movs	r3, r4
    56ba:	00ad      	lsls	r5, r5, #2
    56bc:	1955      	adds	r5, r2, r5
    56be:	6922      	ldr	r2, [r4, #16]
    56c0:	3314      	adds	r3, #20
    56c2:	0092      	lsls	r2, r2, #2
    56c4:	189a      	adds	r2, r3, r2
    56c6:	4694      	mov	ip, r2
    56c8:	221f      	movs	r2, #31
    56ca:	4017      	ands	r7, r2
    56cc:	d014      	beq.n	56f8 <__lshift+0x88>
    56ce:	3201      	adds	r2, #1
    56d0:	1bd2      	subs	r2, r2, r7
    56d2:	9203      	str	r2, [sp, #12]
    56d4:	2200      	movs	r2, #0
    56d6:	6819      	ldr	r1, [r3, #0]
    56d8:	0028      	movs	r0, r5
    56da:	40b9      	lsls	r1, r7
    56dc:	430a      	orrs	r2, r1
    56de:	c504      	stmia	r5!, {r2}
    56e0:	cb04      	ldmia	r3!, {r2}
    56e2:	9903      	ldr	r1, [sp, #12]
    56e4:	40ca      	lsrs	r2, r1
    56e6:	459c      	cmp	ip, r3
    56e8:	d8f5      	bhi.n	56d6 <__lshift+0x66>
    56ea:	6042      	str	r2, [r0, #4]
    56ec:	2a00      	cmp	r2, #0
    56ee:	d007      	beq.n	5700 <__lshift+0x90>
    56f0:	9b01      	ldr	r3, [sp, #4]
    56f2:	3302      	adds	r3, #2
    56f4:	9300      	str	r3, [sp, #0]
    56f6:	e003      	b.n	5700 <__lshift+0x90>
    56f8:	cb04      	ldmia	r3!, {r2}
    56fa:	c504      	stmia	r5!, {r2}
    56fc:	459c      	cmp	ip, r3
    56fe:	d8fb      	bhi.n	56f8 <__lshift+0x88>
    5700:	9b00      	ldr	r3, [sp, #0]
    5702:	9802      	ldr	r0, [sp, #8]
    5704:	3b01      	subs	r3, #1
    5706:	6133      	str	r3, [r6, #16]
    5708:	0021      	movs	r1, r4
    570a:	f7ff fe2a 	bl	5362 <_Bfree>
    570e:	0030      	movs	r0, r6
    5710:	b005      	add	sp, #20
    5712:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005714 <__mcmp>:
    5714:	6903      	ldr	r3, [r0, #16]
    5716:	690a      	ldr	r2, [r1, #16]
    5718:	b510      	push	{r4, lr}
    571a:	1a9b      	subs	r3, r3, r2
    571c:	0004      	movs	r4, r0
    571e:	1e18      	subs	r0, r3, #0
    5720:	d112      	bne.n	5748 <__mcmp+0x34>
    5722:	0093      	lsls	r3, r2, #2
    5724:	3414      	adds	r4, #20
    5726:	3114      	adds	r1, #20
    5728:	18e2      	adds	r2, r4, r3
    572a:	18c9      	adds	r1, r1, r3
    572c:	3a04      	subs	r2, #4
    572e:	3904      	subs	r1, #4
    5730:	6813      	ldr	r3, [r2, #0]
    5732:	6808      	ldr	r0, [r1, #0]
    5734:	4283      	cmp	r3, r0
    5736:	d004      	beq.n	5742 <__mcmp+0x2e>
    5738:	4283      	cmp	r3, r0
    573a:	419b      	sbcs	r3, r3
    573c:	2001      	movs	r0, #1
    573e:	4318      	orrs	r0, r3
    5740:	e002      	b.n	5748 <__mcmp+0x34>
    5742:	4294      	cmp	r4, r2
    5744:	d3f2      	bcc.n	572c <__mcmp+0x18>
    5746:	2000      	movs	r0, #0
    5748:	bd10      	pop	{r4, pc}

0000574a <__mdiff>:
    574a:	b5f0      	push	{r4, r5, r6, r7, lr}
    574c:	000c      	movs	r4, r1
    574e:	b085      	sub	sp, #20
    5750:	0007      	movs	r7, r0
    5752:	0011      	movs	r1, r2
    5754:	0020      	movs	r0, r4
    5756:	0015      	movs	r5, r2
    5758:	f7ff ffdc 	bl	5714 <__mcmp>
    575c:	1e06      	subs	r6, r0, #0
    575e:	d107      	bne.n	5770 <__mdiff+0x26>
    5760:	0001      	movs	r1, r0
    5762:	0038      	movs	r0, r7
    5764:	f7ff fdc5 	bl	52f2 <_Balloc>
    5768:	2301      	movs	r3, #1
    576a:	6146      	str	r6, [r0, #20]
    576c:	6103      	str	r3, [r0, #16]
    576e:	e055      	b.n	581c <__mdiff+0xd2>
    5770:	2300      	movs	r3, #0
    5772:	9301      	str	r3, [sp, #4]
    5774:	4298      	cmp	r0, r3
    5776:	da04      	bge.n	5782 <__mdiff+0x38>
    5778:	0023      	movs	r3, r4
    577a:	002c      	movs	r4, r5
    577c:	001d      	movs	r5, r3
    577e:	2301      	movs	r3, #1
    5780:	9301      	str	r3, [sp, #4]
    5782:	6861      	ldr	r1, [r4, #4]
    5784:	0038      	movs	r0, r7
    5786:	f7ff fdb4 	bl	52f2 <_Balloc>
    578a:	9b01      	ldr	r3, [sp, #4]
    578c:	6926      	ldr	r6, [r4, #16]
    578e:	002f      	movs	r7, r5
    5790:	60c3      	str	r3, [r0, #12]
    5792:	3414      	adds	r4, #20
    5794:	00b3      	lsls	r3, r6, #2
    5796:	18e3      	adds	r3, r4, r3
    5798:	0002      	movs	r2, r0
    579a:	9302      	str	r3, [sp, #8]
    579c:	692b      	ldr	r3, [r5, #16]
    579e:	2500      	movs	r5, #0
    57a0:	3714      	adds	r7, #20
    57a2:	009b      	lsls	r3, r3, #2
    57a4:	18fb      	adds	r3, r7, r3
    57a6:	9303      	str	r3, [sp, #12]
    57a8:	3214      	adds	r2, #20
    57aa:	cc08      	ldmia	r4!, {r3}
    57ac:	4669      	mov	r1, sp
    57ae:	469c      	mov	ip, r3
    57b0:	cf08      	ldmia	r7!, {r3}
    57b2:	3204      	adds	r2, #4
    57b4:	9300      	str	r3, [sp, #0]
    57b6:	4663      	mov	r3, ip
    57b8:	808b      	strh	r3, [r1, #4]
    57ba:	888b      	ldrh	r3, [r1, #4]
    57bc:	195d      	adds	r5, r3, r5
    57be:	9b00      	ldr	r3, [sp, #0]
    57c0:	b29b      	uxth	r3, r3
    57c2:	1aeb      	subs	r3, r5, r3
    57c4:	4665      	mov	r5, ip
    57c6:	9301      	str	r3, [sp, #4]
    57c8:	9b00      	ldr	r3, [sp, #0]
    57ca:	0c2d      	lsrs	r5, r5, #16
    57cc:	0c19      	lsrs	r1, r3, #16
    57ce:	9b01      	ldr	r3, [sp, #4]
    57d0:	1a69      	subs	r1, r5, r1
    57d2:	141d      	asrs	r5, r3, #16
    57d4:	1f13      	subs	r3, r2, #4
    57d6:	469c      	mov	ip, r3
    57d8:	466b      	mov	r3, sp
    57da:	1949      	adds	r1, r1, r5
    57dc:	889b      	ldrh	r3, [r3, #4]
    57de:	140d      	asrs	r5, r1, #16
    57e0:	0409      	lsls	r1, r1, #16
    57e2:	430b      	orrs	r3, r1
    57e4:	4661      	mov	r1, ip
    57e6:	600b      	str	r3, [r1, #0]
    57e8:	9b03      	ldr	r3, [sp, #12]
    57ea:	42bb      	cmp	r3, r7
    57ec:	d8dd      	bhi.n	57aa <__mdiff+0x60>
    57ee:	9902      	ldr	r1, [sp, #8]
    57f0:	0013      	movs	r3, r2
    57f2:	428c      	cmp	r4, r1
    57f4:	d20b      	bcs.n	580e <__mdiff+0xc4>
    57f6:	cc02      	ldmia	r4!, {r1}
    57f8:	b28b      	uxth	r3, r1
    57fa:	195b      	adds	r3, r3, r5
    57fc:	141d      	asrs	r5, r3, #16
    57fe:	0c09      	lsrs	r1, r1, #16
    5800:	1949      	adds	r1, r1, r5
    5802:	140d      	asrs	r5, r1, #16
    5804:	b29b      	uxth	r3, r3
    5806:	0409      	lsls	r1, r1, #16
    5808:	430b      	orrs	r3, r1
    580a:	c208      	stmia	r2!, {r3}
    580c:	e7ef      	b.n	57ee <__mdiff+0xa4>
    580e:	3b04      	subs	r3, #4
    5810:	681a      	ldr	r2, [r3, #0]
    5812:	2a00      	cmp	r2, #0
    5814:	d101      	bne.n	581a <__mdiff+0xd0>
    5816:	3e01      	subs	r6, #1
    5818:	e7f9      	b.n	580e <__mdiff+0xc4>
    581a:	6106      	str	r6, [r0, #16]
    581c:	b005      	add	sp, #20
    581e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005820 <__d2b>:
    5820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5822:	001d      	movs	r5, r3
    5824:	2101      	movs	r1, #1
    5826:	9f08      	ldr	r7, [sp, #32]
    5828:	0014      	movs	r4, r2
    582a:	f7ff fd62 	bl	52f2 <_Balloc>
    582e:	032b      	lsls	r3, r5, #12
    5830:	006d      	lsls	r5, r5, #1
    5832:	0006      	movs	r6, r0
    5834:	0b1b      	lsrs	r3, r3, #12
    5836:	0d6d      	lsrs	r5, r5, #21
    5838:	d002      	beq.n	5840 <__d2b+0x20>
    583a:	2280      	movs	r2, #128	; 0x80
    583c:	0352      	lsls	r2, r2, #13
    583e:	4313      	orrs	r3, r2
    5840:	9301      	str	r3, [sp, #4]
    5842:	2c00      	cmp	r4, #0
    5844:	d018      	beq.n	5878 <__d2b+0x58>
    5846:	4668      	mov	r0, sp
    5848:	9400      	str	r4, [sp, #0]
    584a:	f7ff fdfb 	bl	5444 <__lo0bits>
    584e:	9c00      	ldr	r4, [sp, #0]
    5850:	2800      	cmp	r0, #0
    5852:	d009      	beq.n	5868 <__d2b+0x48>
    5854:	9b01      	ldr	r3, [sp, #4]
    5856:	2120      	movs	r1, #32
    5858:	001a      	movs	r2, r3
    585a:	1a09      	subs	r1, r1, r0
    585c:	408a      	lsls	r2, r1
    585e:	40c3      	lsrs	r3, r0
    5860:	4322      	orrs	r2, r4
    5862:	6172      	str	r2, [r6, #20]
    5864:	9301      	str	r3, [sp, #4]
    5866:	e000      	b.n	586a <__d2b+0x4a>
    5868:	6174      	str	r4, [r6, #20]
    586a:	9c01      	ldr	r4, [sp, #4]
    586c:	61b4      	str	r4, [r6, #24]
    586e:	1e63      	subs	r3, r4, #1
    5870:	419c      	sbcs	r4, r3
    5872:	3401      	adds	r4, #1
    5874:	6134      	str	r4, [r6, #16]
    5876:	e007      	b.n	5888 <__d2b+0x68>
    5878:	a801      	add	r0, sp, #4
    587a:	f7ff fde3 	bl	5444 <__lo0bits>
    587e:	2401      	movs	r4, #1
    5880:	9b01      	ldr	r3, [sp, #4]
    5882:	6134      	str	r4, [r6, #16]
    5884:	6173      	str	r3, [r6, #20]
    5886:	3020      	adds	r0, #32
    5888:	2d00      	cmp	r5, #0
    588a:	d006      	beq.n	589a <__d2b+0x7a>
    588c:	4b0b      	ldr	r3, [pc, #44]	; (58bc <__d2b+0x9c>)
    588e:	18ed      	adds	r5, r5, r3
    5890:	2335      	movs	r3, #53	; 0x35
    5892:	182d      	adds	r5, r5, r0
    5894:	603d      	str	r5, [r7, #0]
    5896:	1a18      	subs	r0, r3, r0
    5898:	e00b      	b.n	58b2 <__d2b+0x92>
    589a:	4b09      	ldr	r3, [pc, #36]	; (58c0 <__d2b+0xa0>)
    589c:	18c0      	adds	r0, r0, r3
    589e:	4b09      	ldr	r3, [pc, #36]	; (58c4 <__d2b+0xa4>)
    58a0:	6038      	str	r0, [r7, #0]
    58a2:	18e3      	adds	r3, r4, r3
    58a4:	009b      	lsls	r3, r3, #2
    58a6:	18f3      	adds	r3, r6, r3
    58a8:	6958      	ldr	r0, [r3, #20]
    58aa:	f7ff fdb0 	bl	540e <__hi0bits>
    58ae:	0164      	lsls	r4, r4, #5
    58b0:	1a20      	subs	r0, r4, r0
    58b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    58b4:	6018      	str	r0, [r3, #0]
    58b6:	0030      	movs	r0, r6
    58b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    58ba:	46c0      	nop			; (mov r8, r8)
    58bc:	fffffbcd 	.word	0xfffffbcd
    58c0:	fffffbce 	.word	0xfffffbce
    58c4:	3fffffff 	.word	0x3fffffff

000058c8 <_calloc_r>:
    58c8:	434a      	muls	r2, r1
    58ca:	b570      	push	{r4, r5, r6, lr}
    58cc:	0011      	movs	r1, r2
    58ce:	0014      	movs	r4, r2
    58d0:	f000 f84e 	bl	5970 <_malloc_r>
    58d4:	1e05      	subs	r5, r0, #0
    58d6:	d003      	beq.n	58e0 <_calloc_r+0x18>
    58d8:	0022      	movs	r2, r4
    58da:	2100      	movs	r1, #0
    58dc:	f7fd fe23 	bl	3526 <memset>
    58e0:	0028      	movs	r0, r5
    58e2:	bd70      	pop	{r4, r5, r6, pc}

000058e4 <_free_r>:
    58e4:	b530      	push	{r4, r5, lr}
    58e6:	2900      	cmp	r1, #0
    58e8:	d03e      	beq.n	5968 <_free_r+0x84>
    58ea:	3904      	subs	r1, #4
    58ec:	680b      	ldr	r3, [r1, #0]
    58ee:	2b00      	cmp	r3, #0
    58f0:	da00      	bge.n	58f4 <_free_r+0x10>
    58f2:	18c9      	adds	r1, r1, r3
    58f4:	4a1d      	ldr	r2, [pc, #116]	; (596c <_free_r+0x88>)
    58f6:	6813      	ldr	r3, [r2, #0]
    58f8:	0014      	movs	r4, r2
    58fa:	2b00      	cmp	r3, #0
    58fc:	d102      	bne.n	5904 <_free_r+0x20>
    58fe:	604b      	str	r3, [r1, #4]
    5900:	6011      	str	r1, [r2, #0]
    5902:	e031      	b.n	5968 <_free_r+0x84>
    5904:	428b      	cmp	r3, r1
    5906:	d90d      	bls.n	5924 <_free_r+0x40>
    5908:	680a      	ldr	r2, [r1, #0]
    590a:	1888      	adds	r0, r1, r2
    590c:	4283      	cmp	r3, r0
    590e:	d103      	bne.n	5918 <_free_r+0x34>
    5910:	6818      	ldr	r0, [r3, #0]
    5912:	685b      	ldr	r3, [r3, #4]
    5914:	1882      	adds	r2, r0, r2
    5916:	600a      	str	r2, [r1, #0]
    5918:	604b      	str	r3, [r1, #4]
    591a:	6021      	str	r1, [r4, #0]
    591c:	e024      	b.n	5968 <_free_r+0x84>
    591e:	428a      	cmp	r2, r1
    5920:	d803      	bhi.n	592a <_free_r+0x46>
    5922:	0013      	movs	r3, r2
    5924:	685a      	ldr	r2, [r3, #4]
    5926:	2a00      	cmp	r2, #0
    5928:	d1f9      	bne.n	591e <_free_r+0x3a>
    592a:	681d      	ldr	r5, [r3, #0]
    592c:	195c      	adds	r4, r3, r5
    592e:	428c      	cmp	r4, r1
    5930:	d10b      	bne.n	594a <_free_r+0x66>
    5932:	6809      	ldr	r1, [r1, #0]
    5934:	1869      	adds	r1, r5, r1
    5936:	1858      	adds	r0, r3, r1
    5938:	6019      	str	r1, [r3, #0]
    593a:	4282      	cmp	r2, r0
    593c:	d114      	bne.n	5968 <_free_r+0x84>
    593e:	6810      	ldr	r0, [r2, #0]
    5940:	6852      	ldr	r2, [r2, #4]
    5942:	1841      	adds	r1, r0, r1
    5944:	6019      	str	r1, [r3, #0]
    5946:	605a      	str	r2, [r3, #4]
    5948:	e00e      	b.n	5968 <_free_r+0x84>
    594a:	428c      	cmp	r4, r1
    594c:	d902      	bls.n	5954 <_free_r+0x70>
    594e:	230c      	movs	r3, #12
    5950:	6003      	str	r3, [r0, #0]
    5952:	e009      	b.n	5968 <_free_r+0x84>
    5954:	6808      	ldr	r0, [r1, #0]
    5956:	180c      	adds	r4, r1, r0
    5958:	42a2      	cmp	r2, r4
    595a:	d103      	bne.n	5964 <_free_r+0x80>
    595c:	6814      	ldr	r4, [r2, #0]
    595e:	6852      	ldr	r2, [r2, #4]
    5960:	1820      	adds	r0, r4, r0
    5962:	6008      	str	r0, [r1, #0]
    5964:	604a      	str	r2, [r1, #4]
    5966:	6059      	str	r1, [r3, #4]
    5968:	bd30      	pop	{r4, r5, pc}
    596a:	46c0      	nop			; (mov r8, r8)
    596c:	20000680 	.word	0x20000680

00005970 <_malloc_r>:
    5970:	2303      	movs	r3, #3
    5972:	b570      	push	{r4, r5, r6, lr}
    5974:	1ccd      	adds	r5, r1, #3
    5976:	439d      	bics	r5, r3
    5978:	3508      	adds	r5, #8
    597a:	0006      	movs	r6, r0
    597c:	2d0c      	cmp	r5, #12
    597e:	d201      	bcs.n	5984 <_malloc_r+0x14>
    5980:	250c      	movs	r5, #12
    5982:	e005      	b.n	5990 <_malloc_r+0x20>
    5984:	2d00      	cmp	r5, #0
    5986:	da03      	bge.n	5990 <_malloc_r+0x20>
    5988:	230c      	movs	r3, #12
    598a:	2000      	movs	r0, #0
    598c:	6033      	str	r3, [r6, #0]
    598e:	e040      	b.n	5a12 <_malloc_r+0xa2>
    5990:	42a9      	cmp	r1, r5
    5992:	d8f9      	bhi.n	5988 <_malloc_r+0x18>
    5994:	4b1f      	ldr	r3, [pc, #124]	; (5a14 <_malloc_r+0xa4>)
    5996:	681c      	ldr	r4, [r3, #0]
    5998:	001a      	movs	r2, r3
    599a:	0021      	movs	r1, r4
    599c:	2900      	cmp	r1, #0
    599e:	d013      	beq.n	59c8 <_malloc_r+0x58>
    59a0:	680b      	ldr	r3, [r1, #0]
    59a2:	1b5b      	subs	r3, r3, r5
    59a4:	d40d      	bmi.n	59c2 <_malloc_r+0x52>
    59a6:	2b0b      	cmp	r3, #11
    59a8:	d902      	bls.n	59b0 <_malloc_r+0x40>
    59aa:	600b      	str	r3, [r1, #0]
    59ac:	18cc      	adds	r4, r1, r3
    59ae:	e01e      	b.n	59ee <_malloc_r+0x7e>
    59b0:	428c      	cmp	r4, r1
    59b2:	d102      	bne.n	59ba <_malloc_r+0x4a>
    59b4:	6863      	ldr	r3, [r4, #4]
    59b6:	6013      	str	r3, [r2, #0]
    59b8:	e01a      	b.n	59f0 <_malloc_r+0x80>
    59ba:	684b      	ldr	r3, [r1, #4]
    59bc:	6063      	str	r3, [r4, #4]
    59be:	000c      	movs	r4, r1
    59c0:	e016      	b.n	59f0 <_malloc_r+0x80>
    59c2:	000c      	movs	r4, r1
    59c4:	6849      	ldr	r1, [r1, #4]
    59c6:	e7e9      	b.n	599c <_malloc_r+0x2c>
    59c8:	4c13      	ldr	r4, [pc, #76]	; (5a18 <_malloc_r+0xa8>)
    59ca:	6823      	ldr	r3, [r4, #0]
    59cc:	2b00      	cmp	r3, #0
    59ce:	d103      	bne.n	59d8 <_malloc_r+0x68>
    59d0:	0030      	movs	r0, r6
    59d2:	f000 f967 	bl	5ca4 <_sbrk_r>
    59d6:	6020      	str	r0, [r4, #0]
    59d8:	0029      	movs	r1, r5
    59da:	0030      	movs	r0, r6
    59dc:	f000 f962 	bl	5ca4 <_sbrk_r>
    59e0:	1c43      	adds	r3, r0, #1
    59e2:	d0d1      	beq.n	5988 <_malloc_r+0x18>
    59e4:	2303      	movs	r3, #3
    59e6:	1cc4      	adds	r4, r0, #3
    59e8:	439c      	bics	r4, r3
    59ea:	42a0      	cmp	r0, r4
    59ec:	d10a      	bne.n	5a04 <_malloc_r+0x94>
    59ee:	6025      	str	r5, [r4, #0]
    59f0:	0020      	movs	r0, r4
    59f2:	2207      	movs	r2, #7
    59f4:	300b      	adds	r0, #11
    59f6:	1d23      	adds	r3, r4, #4
    59f8:	4390      	bics	r0, r2
    59fa:	1ac3      	subs	r3, r0, r3
    59fc:	d009      	beq.n	5a12 <_malloc_r+0xa2>
    59fe:	425a      	negs	r2, r3
    5a00:	50e2      	str	r2, [r4, r3]
    5a02:	e006      	b.n	5a12 <_malloc_r+0xa2>
    5a04:	1a21      	subs	r1, r4, r0
    5a06:	0030      	movs	r0, r6
    5a08:	f000 f94c 	bl	5ca4 <_sbrk_r>
    5a0c:	1c43      	adds	r3, r0, #1
    5a0e:	d1ee      	bne.n	59ee <_malloc_r+0x7e>
    5a10:	e7ba      	b.n	5988 <_malloc_r+0x18>
    5a12:	bd70      	pop	{r4, r5, r6, pc}
    5a14:	20000680 	.word	0x20000680
    5a18:	2000067c 	.word	0x2000067c

00005a1c <__sfputc_r>:
    5a1c:	6893      	ldr	r3, [r2, #8]
    5a1e:	b510      	push	{r4, lr}
    5a20:	3b01      	subs	r3, #1
    5a22:	6093      	str	r3, [r2, #8]
    5a24:	2b00      	cmp	r3, #0
    5a26:	da05      	bge.n	5a34 <__sfputc_r+0x18>
    5a28:	6994      	ldr	r4, [r2, #24]
    5a2a:	42a3      	cmp	r3, r4
    5a2c:	db08      	blt.n	5a40 <__sfputc_r+0x24>
    5a2e:	b2cb      	uxtb	r3, r1
    5a30:	2b0a      	cmp	r3, #10
    5a32:	d005      	beq.n	5a40 <__sfputc_r+0x24>
    5a34:	6813      	ldr	r3, [r2, #0]
    5a36:	1c58      	adds	r0, r3, #1
    5a38:	6010      	str	r0, [r2, #0]
    5a3a:	7019      	strb	r1, [r3, #0]
    5a3c:	b2c8      	uxtb	r0, r1
    5a3e:	e001      	b.n	5a44 <__sfputc_r+0x28>
    5a40:	f7fe fb38 	bl	40b4 <__swbuf_r>
    5a44:	bd10      	pop	{r4, pc}

00005a46 <__sfputs_r>:
    5a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a48:	0006      	movs	r6, r0
    5a4a:	000f      	movs	r7, r1
    5a4c:	0014      	movs	r4, r2
    5a4e:	18d5      	adds	r5, r2, r3
    5a50:	42ac      	cmp	r4, r5
    5a52:	d008      	beq.n	5a66 <__sfputs_r+0x20>
    5a54:	7821      	ldrb	r1, [r4, #0]
    5a56:	003a      	movs	r2, r7
    5a58:	0030      	movs	r0, r6
    5a5a:	f7ff ffdf 	bl	5a1c <__sfputc_r>
    5a5e:	3401      	adds	r4, #1
    5a60:	1c43      	adds	r3, r0, #1
    5a62:	d1f5      	bne.n	5a50 <__sfputs_r+0xa>
    5a64:	e000      	b.n	5a68 <__sfputs_r+0x22>
    5a66:	2000      	movs	r0, #0
    5a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005a6c <_vfiprintf_r>:
    5a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a6e:	b09f      	sub	sp, #124	; 0x7c
    5a70:	0006      	movs	r6, r0
    5a72:	000f      	movs	r7, r1
    5a74:	9202      	str	r2, [sp, #8]
    5a76:	9305      	str	r3, [sp, #20]
    5a78:	2800      	cmp	r0, #0
    5a7a:	d004      	beq.n	5a86 <_vfiprintf_r+0x1a>
    5a7c:	6983      	ldr	r3, [r0, #24]
    5a7e:	2b00      	cmp	r3, #0
    5a80:	d101      	bne.n	5a86 <_vfiprintf_r+0x1a>
    5a82:	f7ff fb25 	bl	50d0 <__sinit>
    5a86:	4b7f      	ldr	r3, [pc, #508]	; (5c84 <_vfiprintf_r+0x218>)
    5a88:	429f      	cmp	r7, r3
    5a8a:	d101      	bne.n	5a90 <_vfiprintf_r+0x24>
    5a8c:	6877      	ldr	r7, [r6, #4]
    5a8e:	e008      	b.n	5aa2 <_vfiprintf_r+0x36>
    5a90:	4b7d      	ldr	r3, [pc, #500]	; (5c88 <_vfiprintf_r+0x21c>)
    5a92:	429f      	cmp	r7, r3
    5a94:	d101      	bne.n	5a9a <_vfiprintf_r+0x2e>
    5a96:	68b7      	ldr	r7, [r6, #8]
    5a98:	e003      	b.n	5aa2 <_vfiprintf_r+0x36>
    5a9a:	4b7c      	ldr	r3, [pc, #496]	; (5c8c <_vfiprintf_r+0x220>)
    5a9c:	429f      	cmp	r7, r3
    5a9e:	d100      	bne.n	5aa2 <_vfiprintf_r+0x36>
    5aa0:	68f7      	ldr	r7, [r6, #12]
    5aa2:	89bb      	ldrh	r3, [r7, #12]
    5aa4:	071b      	lsls	r3, r3, #28
    5aa6:	d50a      	bpl.n	5abe <_vfiprintf_r+0x52>
    5aa8:	693b      	ldr	r3, [r7, #16]
    5aaa:	2b00      	cmp	r3, #0
    5aac:	d007      	beq.n	5abe <_vfiprintf_r+0x52>
    5aae:	2300      	movs	r3, #0
    5ab0:	ad06      	add	r5, sp, #24
    5ab2:	616b      	str	r3, [r5, #20]
    5ab4:	3320      	adds	r3, #32
    5ab6:	766b      	strb	r3, [r5, #25]
    5ab8:	3310      	adds	r3, #16
    5aba:	76ab      	strb	r3, [r5, #26]
    5abc:	e03d      	b.n	5b3a <_vfiprintf_r+0xce>
    5abe:	0039      	movs	r1, r7
    5ac0:	0030      	movs	r0, r6
    5ac2:	f7fe fb4f 	bl	4164 <__swsetup_r>
    5ac6:	2800      	cmp	r0, #0
    5ac8:	d0f1      	beq.n	5aae <_vfiprintf_r+0x42>
    5aca:	2001      	movs	r0, #1
    5acc:	4240      	negs	r0, r0
    5ace:	e0d6      	b.n	5c7e <_vfiprintf_r+0x212>
    5ad0:	9a05      	ldr	r2, [sp, #20]
    5ad2:	1d11      	adds	r1, r2, #4
    5ad4:	6812      	ldr	r2, [r2, #0]
    5ad6:	9105      	str	r1, [sp, #20]
    5ad8:	2a00      	cmp	r2, #0
    5ada:	da00      	bge.n	5ade <_vfiprintf_r+0x72>
    5adc:	e07f      	b.n	5bde <_vfiprintf_r+0x172>
    5ade:	9209      	str	r2, [sp, #36]	; 0x24
    5ae0:	3401      	adds	r4, #1
    5ae2:	7823      	ldrb	r3, [r4, #0]
    5ae4:	2b2e      	cmp	r3, #46	; 0x2e
    5ae6:	d100      	bne.n	5aea <_vfiprintf_r+0x7e>
    5ae8:	e08d      	b.n	5c06 <_vfiprintf_r+0x19a>
    5aea:	7821      	ldrb	r1, [r4, #0]
    5aec:	2203      	movs	r2, #3
    5aee:	4868      	ldr	r0, [pc, #416]	; (5c90 <_vfiprintf_r+0x224>)
    5af0:	f7ff fbf4 	bl	52dc <memchr>
    5af4:	2800      	cmp	r0, #0
    5af6:	d007      	beq.n	5b08 <_vfiprintf_r+0x9c>
    5af8:	4b65      	ldr	r3, [pc, #404]	; (5c90 <_vfiprintf_r+0x224>)
    5afa:	682a      	ldr	r2, [r5, #0]
    5afc:	1ac0      	subs	r0, r0, r3
    5afe:	2340      	movs	r3, #64	; 0x40
    5b00:	4083      	lsls	r3, r0
    5b02:	4313      	orrs	r3, r2
    5b04:	602b      	str	r3, [r5, #0]
    5b06:	3401      	adds	r4, #1
    5b08:	7821      	ldrb	r1, [r4, #0]
    5b0a:	1c63      	adds	r3, r4, #1
    5b0c:	2206      	movs	r2, #6
    5b0e:	4861      	ldr	r0, [pc, #388]	; (5c94 <_vfiprintf_r+0x228>)
    5b10:	9302      	str	r3, [sp, #8]
    5b12:	7629      	strb	r1, [r5, #24]
    5b14:	f7ff fbe2 	bl	52dc <memchr>
    5b18:	2800      	cmp	r0, #0
    5b1a:	d100      	bne.n	5b1e <_vfiprintf_r+0xb2>
    5b1c:	e09d      	b.n	5c5a <_vfiprintf_r+0x1ee>
    5b1e:	4b5e      	ldr	r3, [pc, #376]	; (5c98 <_vfiprintf_r+0x22c>)
    5b20:	2b00      	cmp	r3, #0
    5b22:	d000      	beq.n	5b26 <_vfiprintf_r+0xba>
    5b24:	e090      	b.n	5c48 <_vfiprintf_r+0x1dc>
    5b26:	2207      	movs	r2, #7
    5b28:	9b05      	ldr	r3, [sp, #20]
    5b2a:	3307      	adds	r3, #7
    5b2c:	4393      	bics	r3, r2
    5b2e:	3308      	adds	r3, #8
    5b30:	9305      	str	r3, [sp, #20]
    5b32:	696b      	ldr	r3, [r5, #20]
    5b34:	9a03      	ldr	r2, [sp, #12]
    5b36:	189b      	adds	r3, r3, r2
    5b38:	616b      	str	r3, [r5, #20]
    5b3a:	9c02      	ldr	r4, [sp, #8]
    5b3c:	7823      	ldrb	r3, [r4, #0]
    5b3e:	2b00      	cmp	r3, #0
    5b40:	d104      	bne.n	5b4c <_vfiprintf_r+0xe0>
    5b42:	9b02      	ldr	r3, [sp, #8]
    5b44:	1ae3      	subs	r3, r4, r3
    5b46:	9304      	str	r3, [sp, #16]
    5b48:	d012      	beq.n	5b70 <_vfiprintf_r+0x104>
    5b4a:	e003      	b.n	5b54 <_vfiprintf_r+0xe8>
    5b4c:	2b25      	cmp	r3, #37	; 0x25
    5b4e:	d0f8      	beq.n	5b42 <_vfiprintf_r+0xd6>
    5b50:	3401      	adds	r4, #1
    5b52:	e7f3      	b.n	5b3c <_vfiprintf_r+0xd0>
    5b54:	9b04      	ldr	r3, [sp, #16]
    5b56:	9a02      	ldr	r2, [sp, #8]
    5b58:	0039      	movs	r1, r7
    5b5a:	0030      	movs	r0, r6
    5b5c:	f7ff ff73 	bl	5a46 <__sfputs_r>
    5b60:	1c43      	adds	r3, r0, #1
    5b62:	d100      	bne.n	5b66 <_vfiprintf_r+0xfa>
    5b64:	e086      	b.n	5c74 <_vfiprintf_r+0x208>
    5b66:	696a      	ldr	r2, [r5, #20]
    5b68:	9b04      	ldr	r3, [sp, #16]
    5b6a:	4694      	mov	ip, r2
    5b6c:	4463      	add	r3, ip
    5b6e:	616b      	str	r3, [r5, #20]
    5b70:	7823      	ldrb	r3, [r4, #0]
    5b72:	2b00      	cmp	r3, #0
    5b74:	d07e      	beq.n	5c74 <_vfiprintf_r+0x208>
    5b76:	2201      	movs	r2, #1
    5b78:	2300      	movs	r3, #0
    5b7a:	4252      	negs	r2, r2
    5b7c:	606a      	str	r2, [r5, #4]
    5b7e:	a902      	add	r1, sp, #8
    5b80:	3254      	adds	r2, #84	; 0x54
    5b82:	1852      	adds	r2, r2, r1
    5b84:	3401      	adds	r4, #1
    5b86:	602b      	str	r3, [r5, #0]
    5b88:	60eb      	str	r3, [r5, #12]
    5b8a:	60ab      	str	r3, [r5, #8]
    5b8c:	7013      	strb	r3, [r2, #0]
    5b8e:	65ab      	str	r3, [r5, #88]	; 0x58
    5b90:	7821      	ldrb	r1, [r4, #0]
    5b92:	2205      	movs	r2, #5
    5b94:	4841      	ldr	r0, [pc, #260]	; (5c9c <_vfiprintf_r+0x230>)
    5b96:	f7ff fba1 	bl	52dc <memchr>
    5b9a:	2800      	cmp	r0, #0
    5b9c:	d008      	beq.n	5bb0 <_vfiprintf_r+0x144>
    5b9e:	4b3f      	ldr	r3, [pc, #252]	; (5c9c <_vfiprintf_r+0x230>)
    5ba0:	682a      	ldr	r2, [r5, #0]
    5ba2:	1ac0      	subs	r0, r0, r3
    5ba4:	2301      	movs	r3, #1
    5ba6:	4083      	lsls	r3, r0
    5ba8:	4313      	orrs	r3, r2
    5baa:	602b      	str	r3, [r5, #0]
    5bac:	3401      	adds	r4, #1
    5bae:	e7ef      	b.n	5b90 <_vfiprintf_r+0x124>
    5bb0:	682b      	ldr	r3, [r5, #0]
    5bb2:	06da      	lsls	r2, r3, #27
    5bb4:	d504      	bpl.n	5bc0 <_vfiprintf_r+0x154>
    5bb6:	2253      	movs	r2, #83	; 0x53
    5bb8:	2120      	movs	r1, #32
    5bba:	a802      	add	r0, sp, #8
    5bbc:	1812      	adds	r2, r2, r0
    5bbe:	7011      	strb	r1, [r2, #0]
    5bc0:	071a      	lsls	r2, r3, #28
    5bc2:	d504      	bpl.n	5bce <_vfiprintf_r+0x162>
    5bc4:	2253      	movs	r2, #83	; 0x53
    5bc6:	212b      	movs	r1, #43	; 0x2b
    5bc8:	a802      	add	r0, sp, #8
    5bca:	1812      	adds	r2, r2, r0
    5bcc:	7011      	strb	r1, [r2, #0]
    5bce:	7822      	ldrb	r2, [r4, #0]
    5bd0:	2a2a      	cmp	r2, #42	; 0x2a
    5bd2:	d100      	bne.n	5bd6 <_vfiprintf_r+0x16a>
    5bd4:	e77c      	b.n	5ad0 <_vfiprintf_r+0x64>
    5bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5bd8:	2000      	movs	r0, #0
    5bda:	210a      	movs	r1, #10
    5bdc:	e005      	b.n	5bea <_vfiprintf_r+0x17e>
    5bde:	4252      	negs	r2, r2
    5be0:	60ea      	str	r2, [r5, #12]
    5be2:	2202      	movs	r2, #2
    5be4:	4313      	orrs	r3, r2
    5be6:	602b      	str	r3, [r5, #0]
    5be8:	e77a      	b.n	5ae0 <_vfiprintf_r+0x74>
    5bea:	7822      	ldrb	r2, [r4, #0]
    5bec:	3a30      	subs	r2, #48	; 0x30
    5bee:	2a09      	cmp	r2, #9
    5bf0:	d804      	bhi.n	5bfc <_vfiprintf_r+0x190>
    5bf2:	434b      	muls	r3, r1
    5bf4:	3401      	adds	r4, #1
    5bf6:	189b      	adds	r3, r3, r2
    5bf8:	2001      	movs	r0, #1
    5bfa:	e7f6      	b.n	5bea <_vfiprintf_r+0x17e>
    5bfc:	2800      	cmp	r0, #0
    5bfe:	d100      	bne.n	5c02 <_vfiprintf_r+0x196>
    5c00:	e76f      	b.n	5ae2 <_vfiprintf_r+0x76>
    5c02:	9309      	str	r3, [sp, #36]	; 0x24
    5c04:	e76d      	b.n	5ae2 <_vfiprintf_r+0x76>
    5c06:	7863      	ldrb	r3, [r4, #1]
    5c08:	2b2a      	cmp	r3, #42	; 0x2a
    5c0a:	d10a      	bne.n	5c22 <_vfiprintf_r+0x1b6>
    5c0c:	9b05      	ldr	r3, [sp, #20]
    5c0e:	3402      	adds	r4, #2
    5c10:	1d1a      	adds	r2, r3, #4
    5c12:	681b      	ldr	r3, [r3, #0]
    5c14:	9205      	str	r2, [sp, #20]
    5c16:	2b00      	cmp	r3, #0
    5c18:	da01      	bge.n	5c1e <_vfiprintf_r+0x1b2>
    5c1a:	2301      	movs	r3, #1
    5c1c:	425b      	negs	r3, r3
    5c1e:	9307      	str	r3, [sp, #28]
    5c20:	e763      	b.n	5aea <_vfiprintf_r+0x7e>
    5c22:	2300      	movs	r3, #0
    5c24:	200a      	movs	r0, #10
    5c26:	001a      	movs	r2, r3
    5c28:	3401      	adds	r4, #1
    5c2a:	606b      	str	r3, [r5, #4]
    5c2c:	7821      	ldrb	r1, [r4, #0]
    5c2e:	3930      	subs	r1, #48	; 0x30
    5c30:	2909      	cmp	r1, #9
    5c32:	d804      	bhi.n	5c3e <_vfiprintf_r+0x1d2>
    5c34:	4342      	muls	r2, r0
    5c36:	3401      	adds	r4, #1
    5c38:	1852      	adds	r2, r2, r1
    5c3a:	2301      	movs	r3, #1
    5c3c:	e7f6      	b.n	5c2c <_vfiprintf_r+0x1c0>
    5c3e:	2b00      	cmp	r3, #0
    5c40:	d100      	bne.n	5c44 <_vfiprintf_r+0x1d8>
    5c42:	e752      	b.n	5aea <_vfiprintf_r+0x7e>
    5c44:	9207      	str	r2, [sp, #28]
    5c46:	e750      	b.n	5aea <_vfiprintf_r+0x7e>
    5c48:	ab05      	add	r3, sp, #20
    5c4a:	9300      	str	r3, [sp, #0]
    5c4c:	003a      	movs	r2, r7
    5c4e:	4b14      	ldr	r3, [pc, #80]	; (5ca0 <_vfiprintf_r+0x234>)
    5c50:	0029      	movs	r1, r5
    5c52:	0030      	movs	r0, r6
    5c54:	f7fd fd06 	bl	3664 <_printf_float>
    5c58:	e007      	b.n	5c6a <_vfiprintf_r+0x1fe>
    5c5a:	ab05      	add	r3, sp, #20
    5c5c:	9300      	str	r3, [sp, #0]
    5c5e:	003a      	movs	r2, r7
    5c60:	4b0f      	ldr	r3, [pc, #60]	; (5ca0 <_vfiprintf_r+0x234>)
    5c62:	0029      	movs	r1, r5
    5c64:	0030      	movs	r0, r6
    5c66:	f7fd ffbb 	bl	3be0 <_printf_i>
    5c6a:	9003      	str	r0, [sp, #12]
    5c6c:	9b03      	ldr	r3, [sp, #12]
    5c6e:	3301      	adds	r3, #1
    5c70:	d000      	beq.n	5c74 <_vfiprintf_r+0x208>
    5c72:	e75e      	b.n	5b32 <_vfiprintf_r+0xc6>
    5c74:	89bb      	ldrh	r3, [r7, #12]
    5c76:	065b      	lsls	r3, r3, #25
    5c78:	d500      	bpl.n	5c7c <_vfiprintf_r+0x210>
    5c7a:	e726      	b.n	5aca <_vfiprintf_r+0x5e>
    5c7c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5c7e:	b01f      	add	sp, #124	; 0x7c
    5c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c82:	46c0      	nop			; (mov r8, r8)
    5c84:	00008b7c 	.word	0x00008b7c
    5c88:	00008b9c 	.word	0x00008b9c
    5c8c:	00008bbc 	.word	0x00008bbc
    5c90:	00008cea 	.word	0x00008cea
    5c94:	00008cee 	.word	0x00008cee
    5c98:	00003665 	.word	0x00003665
    5c9c:	00008ce4 	.word	0x00008ce4
    5ca0:	00005a47 	.word	0x00005a47

00005ca4 <_sbrk_r>:
    5ca4:	2300      	movs	r3, #0
    5ca6:	b570      	push	{r4, r5, r6, lr}
    5ca8:	4c06      	ldr	r4, [pc, #24]	; (5cc4 <_sbrk_r+0x20>)
    5caa:	0005      	movs	r5, r0
    5cac:	0008      	movs	r0, r1
    5cae:	6023      	str	r3, [r4, #0]
    5cb0:	f7fc fe32 	bl	2918 <_sbrk>
    5cb4:	1c43      	adds	r3, r0, #1
    5cb6:	d103      	bne.n	5cc0 <_sbrk_r+0x1c>
    5cb8:	6823      	ldr	r3, [r4, #0]
    5cba:	2b00      	cmp	r3, #0
    5cbc:	d000      	beq.n	5cc0 <_sbrk_r+0x1c>
    5cbe:	602b      	str	r3, [r5, #0]
    5cc0:	bd70      	pop	{r4, r5, r6, pc}
    5cc2:	46c0      	nop			; (mov r8, r8)
    5cc4:	200008ec 	.word	0x200008ec

00005cc8 <__sread>:
    5cc8:	b570      	push	{r4, r5, r6, lr}
    5cca:	000c      	movs	r4, r1
    5ccc:	250e      	movs	r5, #14
    5cce:	5f49      	ldrsh	r1, [r1, r5]
    5cd0:	f000 f8a4 	bl	5e1c <_read_r>
    5cd4:	2800      	cmp	r0, #0
    5cd6:	db03      	blt.n	5ce0 <__sread+0x18>
    5cd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5cda:	181b      	adds	r3, r3, r0
    5cdc:	6563      	str	r3, [r4, #84]	; 0x54
    5cde:	e003      	b.n	5ce8 <__sread+0x20>
    5ce0:	89a2      	ldrh	r2, [r4, #12]
    5ce2:	4b02      	ldr	r3, [pc, #8]	; (5cec <__sread+0x24>)
    5ce4:	4013      	ands	r3, r2
    5ce6:	81a3      	strh	r3, [r4, #12]
    5ce8:	bd70      	pop	{r4, r5, r6, pc}
    5cea:	46c0      	nop			; (mov r8, r8)
    5cec:	ffffefff 	.word	0xffffefff

00005cf0 <__swrite>:
    5cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5cf2:	001f      	movs	r7, r3
    5cf4:	898b      	ldrh	r3, [r1, #12]
    5cf6:	0005      	movs	r5, r0
    5cf8:	000c      	movs	r4, r1
    5cfa:	0016      	movs	r6, r2
    5cfc:	05db      	lsls	r3, r3, #23
    5cfe:	d505      	bpl.n	5d0c <__swrite+0x1c>
    5d00:	230e      	movs	r3, #14
    5d02:	5ec9      	ldrsh	r1, [r1, r3]
    5d04:	2200      	movs	r2, #0
    5d06:	2302      	movs	r3, #2
    5d08:	f000 f874 	bl	5df4 <_lseek_r>
    5d0c:	89a2      	ldrh	r2, [r4, #12]
    5d0e:	4b05      	ldr	r3, [pc, #20]	; (5d24 <__swrite+0x34>)
    5d10:	0028      	movs	r0, r5
    5d12:	4013      	ands	r3, r2
    5d14:	81a3      	strh	r3, [r4, #12]
    5d16:	0032      	movs	r2, r6
    5d18:	230e      	movs	r3, #14
    5d1a:	5ee1      	ldrsh	r1, [r4, r3]
    5d1c:	003b      	movs	r3, r7
    5d1e:	f000 f81f 	bl	5d60 <_write_r>
    5d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d24:	ffffefff 	.word	0xffffefff

00005d28 <__sseek>:
    5d28:	b570      	push	{r4, r5, r6, lr}
    5d2a:	000c      	movs	r4, r1
    5d2c:	250e      	movs	r5, #14
    5d2e:	5f49      	ldrsh	r1, [r1, r5]
    5d30:	f000 f860 	bl	5df4 <_lseek_r>
    5d34:	89a3      	ldrh	r3, [r4, #12]
    5d36:	1c42      	adds	r2, r0, #1
    5d38:	d103      	bne.n	5d42 <__sseek+0x1a>
    5d3a:	4a05      	ldr	r2, [pc, #20]	; (5d50 <__sseek+0x28>)
    5d3c:	4013      	ands	r3, r2
    5d3e:	81a3      	strh	r3, [r4, #12]
    5d40:	e004      	b.n	5d4c <__sseek+0x24>
    5d42:	2280      	movs	r2, #128	; 0x80
    5d44:	0152      	lsls	r2, r2, #5
    5d46:	4313      	orrs	r3, r2
    5d48:	81a3      	strh	r3, [r4, #12]
    5d4a:	6560      	str	r0, [r4, #84]	; 0x54
    5d4c:	bd70      	pop	{r4, r5, r6, pc}
    5d4e:	46c0      	nop			; (mov r8, r8)
    5d50:	ffffefff 	.word	0xffffefff

00005d54 <__sclose>:
    5d54:	b510      	push	{r4, lr}
    5d56:	230e      	movs	r3, #14
    5d58:	5ec9      	ldrsh	r1, [r1, r3]
    5d5a:	f000 f815 	bl	5d88 <_close_r>
    5d5e:	bd10      	pop	{r4, pc}

00005d60 <_write_r>:
    5d60:	b570      	push	{r4, r5, r6, lr}
    5d62:	0005      	movs	r5, r0
    5d64:	0008      	movs	r0, r1
    5d66:	0011      	movs	r1, r2
    5d68:	2200      	movs	r2, #0
    5d6a:	4c06      	ldr	r4, [pc, #24]	; (5d84 <_write_r+0x24>)
    5d6c:	6022      	str	r2, [r4, #0]
    5d6e:	001a      	movs	r2, r3
    5d70:	f7fc fdaa 	bl	28c8 <_write>
    5d74:	1c43      	adds	r3, r0, #1
    5d76:	d103      	bne.n	5d80 <_write_r+0x20>
    5d78:	6823      	ldr	r3, [r4, #0]
    5d7a:	2b00      	cmp	r3, #0
    5d7c:	d000      	beq.n	5d80 <_write_r+0x20>
    5d7e:	602b      	str	r3, [r5, #0]
    5d80:	bd70      	pop	{r4, r5, r6, pc}
    5d82:	46c0      	nop			; (mov r8, r8)
    5d84:	200008ec 	.word	0x200008ec

00005d88 <_close_r>:
    5d88:	2300      	movs	r3, #0
    5d8a:	b570      	push	{r4, r5, r6, lr}
    5d8c:	4c06      	ldr	r4, [pc, #24]	; (5da8 <_close_r+0x20>)
    5d8e:	0005      	movs	r5, r0
    5d90:	0008      	movs	r0, r1
    5d92:	6023      	str	r3, [r4, #0]
    5d94:	f7fc fdd2 	bl	293c <_close>
    5d98:	1c43      	adds	r3, r0, #1
    5d9a:	d103      	bne.n	5da4 <_close_r+0x1c>
    5d9c:	6823      	ldr	r3, [r4, #0]
    5d9e:	2b00      	cmp	r3, #0
    5da0:	d000      	beq.n	5da4 <_close_r+0x1c>
    5da2:	602b      	str	r3, [r5, #0]
    5da4:	bd70      	pop	{r4, r5, r6, pc}
    5da6:	46c0      	nop			; (mov r8, r8)
    5da8:	200008ec 	.word	0x200008ec

00005dac <_fstat_r>:
    5dac:	2300      	movs	r3, #0
    5dae:	b570      	push	{r4, r5, r6, lr}
    5db0:	4c06      	ldr	r4, [pc, #24]	; (5dcc <_fstat_r+0x20>)
    5db2:	0005      	movs	r5, r0
    5db4:	0008      	movs	r0, r1
    5db6:	0011      	movs	r1, r2
    5db8:	6023      	str	r3, [r4, #0]
    5dba:	f7fc fdc3 	bl	2944 <_fstat>
    5dbe:	1c43      	adds	r3, r0, #1
    5dc0:	d103      	bne.n	5dca <_fstat_r+0x1e>
    5dc2:	6823      	ldr	r3, [r4, #0]
    5dc4:	2b00      	cmp	r3, #0
    5dc6:	d000      	beq.n	5dca <_fstat_r+0x1e>
    5dc8:	602b      	str	r3, [r5, #0]
    5dca:	bd70      	pop	{r4, r5, r6, pc}
    5dcc:	200008ec 	.word	0x200008ec

00005dd0 <_isatty_r>:
    5dd0:	2300      	movs	r3, #0
    5dd2:	b570      	push	{r4, r5, r6, lr}
    5dd4:	4c06      	ldr	r4, [pc, #24]	; (5df0 <_isatty_r+0x20>)
    5dd6:	0005      	movs	r5, r0
    5dd8:	0008      	movs	r0, r1
    5dda:	6023      	str	r3, [r4, #0]
    5ddc:	f7fc fdb8 	bl	2950 <_isatty>
    5de0:	1c43      	adds	r3, r0, #1
    5de2:	d103      	bne.n	5dec <_isatty_r+0x1c>
    5de4:	6823      	ldr	r3, [r4, #0]
    5de6:	2b00      	cmp	r3, #0
    5de8:	d000      	beq.n	5dec <_isatty_r+0x1c>
    5dea:	602b      	str	r3, [r5, #0]
    5dec:	bd70      	pop	{r4, r5, r6, pc}
    5dee:	46c0      	nop			; (mov r8, r8)
    5df0:	200008ec 	.word	0x200008ec

00005df4 <_lseek_r>:
    5df4:	b570      	push	{r4, r5, r6, lr}
    5df6:	0005      	movs	r5, r0
    5df8:	0008      	movs	r0, r1
    5dfa:	0011      	movs	r1, r2
    5dfc:	2200      	movs	r2, #0
    5dfe:	4c06      	ldr	r4, [pc, #24]	; (5e18 <_lseek_r+0x24>)
    5e00:	6022      	str	r2, [r4, #0]
    5e02:	001a      	movs	r2, r3
    5e04:	f7fc fda6 	bl	2954 <_lseek>
    5e08:	1c43      	adds	r3, r0, #1
    5e0a:	d103      	bne.n	5e14 <_lseek_r+0x20>
    5e0c:	6823      	ldr	r3, [r4, #0]
    5e0e:	2b00      	cmp	r3, #0
    5e10:	d000      	beq.n	5e14 <_lseek_r+0x20>
    5e12:	602b      	str	r3, [r5, #0]
    5e14:	bd70      	pop	{r4, r5, r6, pc}
    5e16:	46c0      	nop			; (mov r8, r8)
    5e18:	200008ec 	.word	0x200008ec

00005e1c <_read_r>:
    5e1c:	b570      	push	{r4, r5, r6, lr}
    5e1e:	0005      	movs	r5, r0
    5e20:	0008      	movs	r0, r1
    5e22:	0011      	movs	r1, r2
    5e24:	2200      	movs	r2, #0
    5e26:	4c06      	ldr	r4, [pc, #24]	; (5e40 <_read_r+0x24>)
    5e28:	6022      	str	r2, [r4, #0]
    5e2a:	001a      	movs	r2, r3
    5e2c:	f7fc fd2c 	bl	2888 <_read>
    5e30:	1c43      	adds	r3, r0, #1
    5e32:	d103      	bne.n	5e3c <_read_r+0x20>
    5e34:	6823      	ldr	r3, [r4, #0]
    5e36:	2b00      	cmp	r3, #0
    5e38:	d000      	beq.n	5e3c <_read_r+0x20>
    5e3a:	602b      	str	r3, [r5, #0]
    5e3c:	bd70      	pop	{r4, r5, r6, pc}
    5e3e:	46c0      	nop			; (mov r8, r8)
    5e40:	200008ec 	.word	0x200008ec

00005e44 <__gnu_thumb1_case_uqi>:
    5e44:	b402      	push	{r1}
    5e46:	4671      	mov	r1, lr
    5e48:	0849      	lsrs	r1, r1, #1
    5e4a:	0049      	lsls	r1, r1, #1
    5e4c:	5c09      	ldrb	r1, [r1, r0]
    5e4e:	0049      	lsls	r1, r1, #1
    5e50:	448e      	add	lr, r1
    5e52:	bc02      	pop	{r1}
    5e54:	4770      	bx	lr
    5e56:	46c0      	nop			; (mov r8, r8)

00005e58 <__aeabi_uidiv>:
    5e58:	2200      	movs	r2, #0
    5e5a:	0843      	lsrs	r3, r0, #1
    5e5c:	428b      	cmp	r3, r1
    5e5e:	d374      	bcc.n	5f4a <__aeabi_uidiv+0xf2>
    5e60:	0903      	lsrs	r3, r0, #4
    5e62:	428b      	cmp	r3, r1
    5e64:	d35f      	bcc.n	5f26 <__aeabi_uidiv+0xce>
    5e66:	0a03      	lsrs	r3, r0, #8
    5e68:	428b      	cmp	r3, r1
    5e6a:	d344      	bcc.n	5ef6 <__aeabi_uidiv+0x9e>
    5e6c:	0b03      	lsrs	r3, r0, #12
    5e6e:	428b      	cmp	r3, r1
    5e70:	d328      	bcc.n	5ec4 <__aeabi_uidiv+0x6c>
    5e72:	0c03      	lsrs	r3, r0, #16
    5e74:	428b      	cmp	r3, r1
    5e76:	d30d      	bcc.n	5e94 <__aeabi_uidiv+0x3c>
    5e78:	22ff      	movs	r2, #255	; 0xff
    5e7a:	0209      	lsls	r1, r1, #8
    5e7c:	ba12      	rev	r2, r2
    5e7e:	0c03      	lsrs	r3, r0, #16
    5e80:	428b      	cmp	r3, r1
    5e82:	d302      	bcc.n	5e8a <__aeabi_uidiv+0x32>
    5e84:	1212      	asrs	r2, r2, #8
    5e86:	0209      	lsls	r1, r1, #8
    5e88:	d065      	beq.n	5f56 <__aeabi_uidiv+0xfe>
    5e8a:	0b03      	lsrs	r3, r0, #12
    5e8c:	428b      	cmp	r3, r1
    5e8e:	d319      	bcc.n	5ec4 <__aeabi_uidiv+0x6c>
    5e90:	e000      	b.n	5e94 <__aeabi_uidiv+0x3c>
    5e92:	0a09      	lsrs	r1, r1, #8
    5e94:	0bc3      	lsrs	r3, r0, #15
    5e96:	428b      	cmp	r3, r1
    5e98:	d301      	bcc.n	5e9e <__aeabi_uidiv+0x46>
    5e9a:	03cb      	lsls	r3, r1, #15
    5e9c:	1ac0      	subs	r0, r0, r3
    5e9e:	4152      	adcs	r2, r2
    5ea0:	0b83      	lsrs	r3, r0, #14
    5ea2:	428b      	cmp	r3, r1
    5ea4:	d301      	bcc.n	5eaa <__aeabi_uidiv+0x52>
    5ea6:	038b      	lsls	r3, r1, #14
    5ea8:	1ac0      	subs	r0, r0, r3
    5eaa:	4152      	adcs	r2, r2
    5eac:	0b43      	lsrs	r3, r0, #13
    5eae:	428b      	cmp	r3, r1
    5eb0:	d301      	bcc.n	5eb6 <__aeabi_uidiv+0x5e>
    5eb2:	034b      	lsls	r3, r1, #13
    5eb4:	1ac0      	subs	r0, r0, r3
    5eb6:	4152      	adcs	r2, r2
    5eb8:	0b03      	lsrs	r3, r0, #12
    5eba:	428b      	cmp	r3, r1
    5ebc:	d301      	bcc.n	5ec2 <__aeabi_uidiv+0x6a>
    5ebe:	030b      	lsls	r3, r1, #12
    5ec0:	1ac0      	subs	r0, r0, r3
    5ec2:	4152      	adcs	r2, r2
    5ec4:	0ac3      	lsrs	r3, r0, #11
    5ec6:	428b      	cmp	r3, r1
    5ec8:	d301      	bcc.n	5ece <__aeabi_uidiv+0x76>
    5eca:	02cb      	lsls	r3, r1, #11
    5ecc:	1ac0      	subs	r0, r0, r3
    5ece:	4152      	adcs	r2, r2
    5ed0:	0a83      	lsrs	r3, r0, #10
    5ed2:	428b      	cmp	r3, r1
    5ed4:	d301      	bcc.n	5eda <__aeabi_uidiv+0x82>
    5ed6:	028b      	lsls	r3, r1, #10
    5ed8:	1ac0      	subs	r0, r0, r3
    5eda:	4152      	adcs	r2, r2
    5edc:	0a43      	lsrs	r3, r0, #9
    5ede:	428b      	cmp	r3, r1
    5ee0:	d301      	bcc.n	5ee6 <__aeabi_uidiv+0x8e>
    5ee2:	024b      	lsls	r3, r1, #9
    5ee4:	1ac0      	subs	r0, r0, r3
    5ee6:	4152      	adcs	r2, r2
    5ee8:	0a03      	lsrs	r3, r0, #8
    5eea:	428b      	cmp	r3, r1
    5eec:	d301      	bcc.n	5ef2 <__aeabi_uidiv+0x9a>
    5eee:	020b      	lsls	r3, r1, #8
    5ef0:	1ac0      	subs	r0, r0, r3
    5ef2:	4152      	adcs	r2, r2
    5ef4:	d2cd      	bcs.n	5e92 <__aeabi_uidiv+0x3a>
    5ef6:	09c3      	lsrs	r3, r0, #7
    5ef8:	428b      	cmp	r3, r1
    5efa:	d301      	bcc.n	5f00 <__aeabi_uidiv+0xa8>
    5efc:	01cb      	lsls	r3, r1, #7
    5efe:	1ac0      	subs	r0, r0, r3
    5f00:	4152      	adcs	r2, r2
    5f02:	0983      	lsrs	r3, r0, #6
    5f04:	428b      	cmp	r3, r1
    5f06:	d301      	bcc.n	5f0c <__aeabi_uidiv+0xb4>
    5f08:	018b      	lsls	r3, r1, #6
    5f0a:	1ac0      	subs	r0, r0, r3
    5f0c:	4152      	adcs	r2, r2
    5f0e:	0943      	lsrs	r3, r0, #5
    5f10:	428b      	cmp	r3, r1
    5f12:	d301      	bcc.n	5f18 <__aeabi_uidiv+0xc0>
    5f14:	014b      	lsls	r3, r1, #5
    5f16:	1ac0      	subs	r0, r0, r3
    5f18:	4152      	adcs	r2, r2
    5f1a:	0903      	lsrs	r3, r0, #4
    5f1c:	428b      	cmp	r3, r1
    5f1e:	d301      	bcc.n	5f24 <__aeabi_uidiv+0xcc>
    5f20:	010b      	lsls	r3, r1, #4
    5f22:	1ac0      	subs	r0, r0, r3
    5f24:	4152      	adcs	r2, r2
    5f26:	08c3      	lsrs	r3, r0, #3
    5f28:	428b      	cmp	r3, r1
    5f2a:	d301      	bcc.n	5f30 <__aeabi_uidiv+0xd8>
    5f2c:	00cb      	lsls	r3, r1, #3
    5f2e:	1ac0      	subs	r0, r0, r3
    5f30:	4152      	adcs	r2, r2
    5f32:	0883      	lsrs	r3, r0, #2
    5f34:	428b      	cmp	r3, r1
    5f36:	d301      	bcc.n	5f3c <__aeabi_uidiv+0xe4>
    5f38:	008b      	lsls	r3, r1, #2
    5f3a:	1ac0      	subs	r0, r0, r3
    5f3c:	4152      	adcs	r2, r2
    5f3e:	0843      	lsrs	r3, r0, #1
    5f40:	428b      	cmp	r3, r1
    5f42:	d301      	bcc.n	5f48 <__aeabi_uidiv+0xf0>
    5f44:	004b      	lsls	r3, r1, #1
    5f46:	1ac0      	subs	r0, r0, r3
    5f48:	4152      	adcs	r2, r2
    5f4a:	1a41      	subs	r1, r0, r1
    5f4c:	d200      	bcs.n	5f50 <__aeabi_uidiv+0xf8>
    5f4e:	4601      	mov	r1, r0
    5f50:	4152      	adcs	r2, r2
    5f52:	4610      	mov	r0, r2
    5f54:	4770      	bx	lr
    5f56:	e7ff      	b.n	5f58 <__aeabi_uidiv+0x100>
    5f58:	b501      	push	{r0, lr}
    5f5a:	2000      	movs	r0, #0
    5f5c:	f000 f8f0 	bl	6140 <__aeabi_idiv0>
    5f60:	bd02      	pop	{r1, pc}
    5f62:	46c0      	nop			; (mov r8, r8)

00005f64 <__aeabi_uidivmod>:
    5f64:	2900      	cmp	r1, #0
    5f66:	d0f7      	beq.n	5f58 <__aeabi_uidiv+0x100>
    5f68:	e776      	b.n	5e58 <__aeabi_uidiv>
    5f6a:	4770      	bx	lr

00005f6c <__aeabi_idiv>:
    5f6c:	4603      	mov	r3, r0
    5f6e:	430b      	orrs	r3, r1
    5f70:	d47f      	bmi.n	6072 <__aeabi_idiv+0x106>
    5f72:	2200      	movs	r2, #0
    5f74:	0843      	lsrs	r3, r0, #1
    5f76:	428b      	cmp	r3, r1
    5f78:	d374      	bcc.n	6064 <__aeabi_idiv+0xf8>
    5f7a:	0903      	lsrs	r3, r0, #4
    5f7c:	428b      	cmp	r3, r1
    5f7e:	d35f      	bcc.n	6040 <__aeabi_idiv+0xd4>
    5f80:	0a03      	lsrs	r3, r0, #8
    5f82:	428b      	cmp	r3, r1
    5f84:	d344      	bcc.n	6010 <__aeabi_idiv+0xa4>
    5f86:	0b03      	lsrs	r3, r0, #12
    5f88:	428b      	cmp	r3, r1
    5f8a:	d328      	bcc.n	5fde <__aeabi_idiv+0x72>
    5f8c:	0c03      	lsrs	r3, r0, #16
    5f8e:	428b      	cmp	r3, r1
    5f90:	d30d      	bcc.n	5fae <__aeabi_idiv+0x42>
    5f92:	22ff      	movs	r2, #255	; 0xff
    5f94:	0209      	lsls	r1, r1, #8
    5f96:	ba12      	rev	r2, r2
    5f98:	0c03      	lsrs	r3, r0, #16
    5f9a:	428b      	cmp	r3, r1
    5f9c:	d302      	bcc.n	5fa4 <__aeabi_idiv+0x38>
    5f9e:	1212      	asrs	r2, r2, #8
    5fa0:	0209      	lsls	r1, r1, #8
    5fa2:	d065      	beq.n	6070 <__aeabi_idiv+0x104>
    5fa4:	0b03      	lsrs	r3, r0, #12
    5fa6:	428b      	cmp	r3, r1
    5fa8:	d319      	bcc.n	5fde <__aeabi_idiv+0x72>
    5faa:	e000      	b.n	5fae <__aeabi_idiv+0x42>
    5fac:	0a09      	lsrs	r1, r1, #8
    5fae:	0bc3      	lsrs	r3, r0, #15
    5fb0:	428b      	cmp	r3, r1
    5fb2:	d301      	bcc.n	5fb8 <__aeabi_idiv+0x4c>
    5fb4:	03cb      	lsls	r3, r1, #15
    5fb6:	1ac0      	subs	r0, r0, r3
    5fb8:	4152      	adcs	r2, r2
    5fba:	0b83      	lsrs	r3, r0, #14
    5fbc:	428b      	cmp	r3, r1
    5fbe:	d301      	bcc.n	5fc4 <__aeabi_idiv+0x58>
    5fc0:	038b      	lsls	r3, r1, #14
    5fc2:	1ac0      	subs	r0, r0, r3
    5fc4:	4152      	adcs	r2, r2
    5fc6:	0b43      	lsrs	r3, r0, #13
    5fc8:	428b      	cmp	r3, r1
    5fca:	d301      	bcc.n	5fd0 <__aeabi_idiv+0x64>
    5fcc:	034b      	lsls	r3, r1, #13
    5fce:	1ac0      	subs	r0, r0, r3
    5fd0:	4152      	adcs	r2, r2
    5fd2:	0b03      	lsrs	r3, r0, #12
    5fd4:	428b      	cmp	r3, r1
    5fd6:	d301      	bcc.n	5fdc <__aeabi_idiv+0x70>
    5fd8:	030b      	lsls	r3, r1, #12
    5fda:	1ac0      	subs	r0, r0, r3
    5fdc:	4152      	adcs	r2, r2
    5fde:	0ac3      	lsrs	r3, r0, #11
    5fe0:	428b      	cmp	r3, r1
    5fe2:	d301      	bcc.n	5fe8 <__aeabi_idiv+0x7c>
    5fe4:	02cb      	lsls	r3, r1, #11
    5fe6:	1ac0      	subs	r0, r0, r3
    5fe8:	4152      	adcs	r2, r2
    5fea:	0a83      	lsrs	r3, r0, #10
    5fec:	428b      	cmp	r3, r1
    5fee:	d301      	bcc.n	5ff4 <__aeabi_idiv+0x88>
    5ff0:	028b      	lsls	r3, r1, #10
    5ff2:	1ac0      	subs	r0, r0, r3
    5ff4:	4152      	adcs	r2, r2
    5ff6:	0a43      	lsrs	r3, r0, #9
    5ff8:	428b      	cmp	r3, r1
    5ffa:	d301      	bcc.n	6000 <__aeabi_idiv+0x94>
    5ffc:	024b      	lsls	r3, r1, #9
    5ffe:	1ac0      	subs	r0, r0, r3
    6000:	4152      	adcs	r2, r2
    6002:	0a03      	lsrs	r3, r0, #8
    6004:	428b      	cmp	r3, r1
    6006:	d301      	bcc.n	600c <__aeabi_idiv+0xa0>
    6008:	020b      	lsls	r3, r1, #8
    600a:	1ac0      	subs	r0, r0, r3
    600c:	4152      	adcs	r2, r2
    600e:	d2cd      	bcs.n	5fac <__aeabi_idiv+0x40>
    6010:	09c3      	lsrs	r3, r0, #7
    6012:	428b      	cmp	r3, r1
    6014:	d301      	bcc.n	601a <__aeabi_idiv+0xae>
    6016:	01cb      	lsls	r3, r1, #7
    6018:	1ac0      	subs	r0, r0, r3
    601a:	4152      	adcs	r2, r2
    601c:	0983      	lsrs	r3, r0, #6
    601e:	428b      	cmp	r3, r1
    6020:	d301      	bcc.n	6026 <__aeabi_idiv+0xba>
    6022:	018b      	lsls	r3, r1, #6
    6024:	1ac0      	subs	r0, r0, r3
    6026:	4152      	adcs	r2, r2
    6028:	0943      	lsrs	r3, r0, #5
    602a:	428b      	cmp	r3, r1
    602c:	d301      	bcc.n	6032 <__aeabi_idiv+0xc6>
    602e:	014b      	lsls	r3, r1, #5
    6030:	1ac0      	subs	r0, r0, r3
    6032:	4152      	adcs	r2, r2
    6034:	0903      	lsrs	r3, r0, #4
    6036:	428b      	cmp	r3, r1
    6038:	d301      	bcc.n	603e <__aeabi_idiv+0xd2>
    603a:	010b      	lsls	r3, r1, #4
    603c:	1ac0      	subs	r0, r0, r3
    603e:	4152      	adcs	r2, r2
    6040:	08c3      	lsrs	r3, r0, #3
    6042:	428b      	cmp	r3, r1
    6044:	d301      	bcc.n	604a <__aeabi_idiv+0xde>
    6046:	00cb      	lsls	r3, r1, #3
    6048:	1ac0      	subs	r0, r0, r3
    604a:	4152      	adcs	r2, r2
    604c:	0883      	lsrs	r3, r0, #2
    604e:	428b      	cmp	r3, r1
    6050:	d301      	bcc.n	6056 <__aeabi_idiv+0xea>
    6052:	008b      	lsls	r3, r1, #2
    6054:	1ac0      	subs	r0, r0, r3
    6056:	4152      	adcs	r2, r2
    6058:	0843      	lsrs	r3, r0, #1
    605a:	428b      	cmp	r3, r1
    605c:	d301      	bcc.n	6062 <__aeabi_idiv+0xf6>
    605e:	004b      	lsls	r3, r1, #1
    6060:	1ac0      	subs	r0, r0, r3
    6062:	4152      	adcs	r2, r2
    6064:	1a41      	subs	r1, r0, r1
    6066:	d200      	bcs.n	606a <__aeabi_idiv+0xfe>
    6068:	4601      	mov	r1, r0
    606a:	4152      	adcs	r2, r2
    606c:	4610      	mov	r0, r2
    606e:	4770      	bx	lr
    6070:	e05d      	b.n	612e <__aeabi_idiv+0x1c2>
    6072:	0fca      	lsrs	r2, r1, #31
    6074:	d000      	beq.n	6078 <__aeabi_idiv+0x10c>
    6076:	4249      	negs	r1, r1
    6078:	1003      	asrs	r3, r0, #32
    607a:	d300      	bcc.n	607e <__aeabi_idiv+0x112>
    607c:	4240      	negs	r0, r0
    607e:	4053      	eors	r3, r2
    6080:	2200      	movs	r2, #0
    6082:	469c      	mov	ip, r3
    6084:	0903      	lsrs	r3, r0, #4
    6086:	428b      	cmp	r3, r1
    6088:	d32d      	bcc.n	60e6 <__aeabi_idiv+0x17a>
    608a:	0a03      	lsrs	r3, r0, #8
    608c:	428b      	cmp	r3, r1
    608e:	d312      	bcc.n	60b6 <__aeabi_idiv+0x14a>
    6090:	22fc      	movs	r2, #252	; 0xfc
    6092:	0189      	lsls	r1, r1, #6
    6094:	ba12      	rev	r2, r2
    6096:	0a03      	lsrs	r3, r0, #8
    6098:	428b      	cmp	r3, r1
    609a:	d30c      	bcc.n	60b6 <__aeabi_idiv+0x14a>
    609c:	0189      	lsls	r1, r1, #6
    609e:	1192      	asrs	r2, r2, #6
    60a0:	428b      	cmp	r3, r1
    60a2:	d308      	bcc.n	60b6 <__aeabi_idiv+0x14a>
    60a4:	0189      	lsls	r1, r1, #6
    60a6:	1192      	asrs	r2, r2, #6
    60a8:	428b      	cmp	r3, r1
    60aa:	d304      	bcc.n	60b6 <__aeabi_idiv+0x14a>
    60ac:	0189      	lsls	r1, r1, #6
    60ae:	d03a      	beq.n	6126 <__aeabi_idiv+0x1ba>
    60b0:	1192      	asrs	r2, r2, #6
    60b2:	e000      	b.n	60b6 <__aeabi_idiv+0x14a>
    60b4:	0989      	lsrs	r1, r1, #6
    60b6:	09c3      	lsrs	r3, r0, #7
    60b8:	428b      	cmp	r3, r1
    60ba:	d301      	bcc.n	60c0 <__aeabi_idiv+0x154>
    60bc:	01cb      	lsls	r3, r1, #7
    60be:	1ac0      	subs	r0, r0, r3
    60c0:	4152      	adcs	r2, r2
    60c2:	0983      	lsrs	r3, r0, #6
    60c4:	428b      	cmp	r3, r1
    60c6:	d301      	bcc.n	60cc <__aeabi_idiv+0x160>
    60c8:	018b      	lsls	r3, r1, #6
    60ca:	1ac0      	subs	r0, r0, r3
    60cc:	4152      	adcs	r2, r2
    60ce:	0943      	lsrs	r3, r0, #5
    60d0:	428b      	cmp	r3, r1
    60d2:	d301      	bcc.n	60d8 <__aeabi_idiv+0x16c>
    60d4:	014b      	lsls	r3, r1, #5
    60d6:	1ac0      	subs	r0, r0, r3
    60d8:	4152      	adcs	r2, r2
    60da:	0903      	lsrs	r3, r0, #4
    60dc:	428b      	cmp	r3, r1
    60de:	d301      	bcc.n	60e4 <__aeabi_idiv+0x178>
    60e0:	010b      	lsls	r3, r1, #4
    60e2:	1ac0      	subs	r0, r0, r3
    60e4:	4152      	adcs	r2, r2
    60e6:	08c3      	lsrs	r3, r0, #3
    60e8:	428b      	cmp	r3, r1
    60ea:	d301      	bcc.n	60f0 <__aeabi_idiv+0x184>
    60ec:	00cb      	lsls	r3, r1, #3
    60ee:	1ac0      	subs	r0, r0, r3
    60f0:	4152      	adcs	r2, r2
    60f2:	0883      	lsrs	r3, r0, #2
    60f4:	428b      	cmp	r3, r1
    60f6:	d301      	bcc.n	60fc <__aeabi_idiv+0x190>
    60f8:	008b      	lsls	r3, r1, #2
    60fa:	1ac0      	subs	r0, r0, r3
    60fc:	4152      	adcs	r2, r2
    60fe:	d2d9      	bcs.n	60b4 <__aeabi_idiv+0x148>
    6100:	0843      	lsrs	r3, r0, #1
    6102:	428b      	cmp	r3, r1
    6104:	d301      	bcc.n	610a <__aeabi_idiv+0x19e>
    6106:	004b      	lsls	r3, r1, #1
    6108:	1ac0      	subs	r0, r0, r3
    610a:	4152      	adcs	r2, r2
    610c:	1a41      	subs	r1, r0, r1
    610e:	d200      	bcs.n	6112 <__aeabi_idiv+0x1a6>
    6110:	4601      	mov	r1, r0
    6112:	4663      	mov	r3, ip
    6114:	4152      	adcs	r2, r2
    6116:	105b      	asrs	r3, r3, #1
    6118:	4610      	mov	r0, r2
    611a:	d301      	bcc.n	6120 <__aeabi_idiv+0x1b4>
    611c:	4240      	negs	r0, r0
    611e:	2b00      	cmp	r3, #0
    6120:	d500      	bpl.n	6124 <__aeabi_idiv+0x1b8>
    6122:	4249      	negs	r1, r1
    6124:	4770      	bx	lr
    6126:	4663      	mov	r3, ip
    6128:	105b      	asrs	r3, r3, #1
    612a:	d300      	bcc.n	612e <__aeabi_idiv+0x1c2>
    612c:	4240      	negs	r0, r0
    612e:	b501      	push	{r0, lr}
    6130:	2000      	movs	r0, #0
    6132:	f000 f805 	bl	6140 <__aeabi_idiv0>
    6136:	bd02      	pop	{r1, pc}

00006138 <__aeabi_idivmod>:
    6138:	2900      	cmp	r1, #0
    613a:	d0f8      	beq.n	612e <__aeabi_idiv+0x1c2>
    613c:	e716      	b.n	5f6c <__aeabi_idiv>
    613e:	4770      	bx	lr

00006140 <__aeabi_idiv0>:
    6140:	4770      	bx	lr
    6142:	46c0      	nop			; (mov r8, r8)

00006144 <__aeabi_cdrcmple>:
    6144:	4684      	mov	ip, r0
    6146:	1c10      	adds	r0, r2, #0
    6148:	4662      	mov	r2, ip
    614a:	468c      	mov	ip, r1
    614c:	1c19      	adds	r1, r3, #0
    614e:	4663      	mov	r3, ip
    6150:	e000      	b.n	6154 <__aeabi_cdcmpeq>
    6152:	46c0      	nop			; (mov r8, r8)

00006154 <__aeabi_cdcmpeq>:
    6154:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6156:	f001 fc1b 	bl	7990 <__ledf2>
    615a:	2800      	cmp	r0, #0
    615c:	d401      	bmi.n	6162 <__aeabi_cdcmpeq+0xe>
    615e:	2100      	movs	r1, #0
    6160:	42c8      	cmn	r0, r1
    6162:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006164 <__aeabi_dcmpeq>:
    6164:	b510      	push	{r4, lr}
    6166:	f001 fb6f 	bl	7848 <__eqdf2>
    616a:	4240      	negs	r0, r0
    616c:	3001      	adds	r0, #1
    616e:	bd10      	pop	{r4, pc}

00006170 <__aeabi_dcmplt>:
    6170:	b510      	push	{r4, lr}
    6172:	f001 fc0d 	bl	7990 <__ledf2>
    6176:	2800      	cmp	r0, #0
    6178:	db01      	blt.n	617e <__aeabi_dcmplt+0xe>
    617a:	2000      	movs	r0, #0
    617c:	bd10      	pop	{r4, pc}
    617e:	2001      	movs	r0, #1
    6180:	bd10      	pop	{r4, pc}
    6182:	46c0      	nop			; (mov r8, r8)

00006184 <__aeabi_dcmple>:
    6184:	b510      	push	{r4, lr}
    6186:	f001 fc03 	bl	7990 <__ledf2>
    618a:	2800      	cmp	r0, #0
    618c:	dd01      	ble.n	6192 <__aeabi_dcmple+0xe>
    618e:	2000      	movs	r0, #0
    6190:	bd10      	pop	{r4, pc}
    6192:	2001      	movs	r0, #1
    6194:	bd10      	pop	{r4, pc}
    6196:	46c0      	nop			; (mov r8, r8)

00006198 <__aeabi_dcmpgt>:
    6198:	b510      	push	{r4, lr}
    619a:	f001 fb95 	bl	78c8 <__gedf2>
    619e:	2800      	cmp	r0, #0
    61a0:	dc01      	bgt.n	61a6 <__aeabi_dcmpgt+0xe>
    61a2:	2000      	movs	r0, #0
    61a4:	bd10      	pop	{r4, pc}
    61a6:	2001      	movs	r0, #1
    61a8:	bd10      	pop	{r4, pc}
    61aa:	46c0      	nop			; (mov r8, r8)

000061ac <__aeabi_dcmpge>:
    61ac:	b510      	push	{r4, lr}
    61ae:	f001 fb8b 	bl	78c8 <__gedf2>
    61b2:	2800      	cmp	r0, #0
    61b4:	da01      	bge.n	61ba <__aeabi_dcmpge+0xe>
    61b6:	2000      	movs	r0, #0
    61b8:	bd10      	pop	{r4, pc}
    61ba:	2001      	movs	r0, #1
    61bc:	bd10      	pop	{r4, pc}
    61be:	46c0      	nop			; (mov r8, r8)

000061c0 <__aeabi_cfrcmple>:
    61c0:	4684      	mov	ip, r0
    61c2:	1c08      	adds	r0, r1, #0
    61c4:	4661      	mov	r1, ip
    61c6:	e7ff      	b.n	61c8 <__aeabi_cfcmpeq>

000061c8 <__aeabi_cfcmpeq>:
    61c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    61ca:	f000 fb5b 	bl	6884 <__lesf2>
    61ce:	2800      	cmp	r0, #0
    61d0:	d401      	bmi.n	61d6 <__aeabi_cfcmpeq+0xe>
    61d2:	2100      	movs	r1, #0
    61d4:	42c8      	cmn	r0, r1
    61d6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000061d8 <__aeabi_fcmpeq>:
    61d8:	b510      	push	{r4, lr}
    61da:	f000 fae7 	bl	67ac <__eqsf2>
    61de:	4240      	negs	r0, r0
    61e0:	3001      	adds	r0, #1
    61e2:	bd10      	pop	{r4, pc}

000061e4 <__aeabi_fcmplt>:
    61e4:	b510      	push	{r4, lr}
    61e6:	f000 fb4d 	bl	6884 <__lesf2>
    61ea:	2800      	cmp	r0, #0
    61ec:	db01      	blt.n	61f2 <__aeabi_fcmplt+0xe>
    61ee:	2000      	movs	r0, #0
    61f0:	bd10      	pop	{r4, pc}
    61f2:	2001      	movs	r0, #1
    61f4:	bd10      	pop	{r4, pc}
    61f6:	46c0      	nop			; (mov r8, r8)

000061f8 <__aeabi_fcmple>:
    61f8:	b510      	push	{r4, lr}
    61fa:	f000 fb43 	bl	6884 <__lesf2>
    61fe:	2800      	cmp	r0, #0
    6200:	dd01      	ble.n	6206 <__aeabi_fcmple+0xe>
    6202:	2000      	movs	r0, #0
    6204:	bd10      	pop	{r4, pc}
    6206:	2001      	movs	r0, #1
    6208:	bd10      	pop	{r4, pc}
    620a:	46c0      	nop			; (mov r8, r8)

0000620c <__aeabi_fcmpgt>:
    620c:	b510      	push	{r4, lr}
    620e:	f000 faf5 	bl	67fc <__gesf2>
    6212:	2800      	cmp	r0, #0
    6214:	dc01      	bgt.n	621a <__aeabi_fcmpgt+0xe>
    6216:	2000      	movs	r0, #0
    6218:	bd10      	pop	{r4, pc}
    621a:	2001      	movs	r0, #1
    621c:	bd10      	pop	{r4, pc}
    621e:	46c0      	nop			; (mov r8, r8)

00006220 <__aeabi_fcmpge>:
    6220:	b510      	push	{r4, lr}
    6222:	f000 faeb 	bl	67fc <__gesf2>
    6226:	2800      	cmp	r0, #0
    6228:	da01      	bge.n	622e <__aeabi_fcmpge+0xe>
    622a:	2000      	movs	r0, #0
    622c:	bd10      	pop	{r4, pc}
    622e:	2001      	movs	r0, #1
    6230:	bd10      	pop	{r4, pc}
    6232:	46c0      	nop			; (mov r8, r8)

00006234 <__aeabi_lmul>:
    6234:	b5f0      	push	{r4, r5, r6, r7, lr}
    6236:	464f      	mov	r7, r9
    6238:	4646      	mov	r6, r8
    623a:	b4c0      	push	{r6, r7}
    623c:	0416      	lsls	r6, r2, #16
    623e:	0c36      	lsrs	r6, r6, #16
    6240:	4699      	mov	r9, r3
    6242:	0033      	movs	r3, r6
    6244:	0405      	lsls	r5, r0, #16
    6246:	0c2c      	lsrs	r4, r5, #16
    6248:	0c07      	lsrs	r7, r0, #16
    624a:	0c15      	lsrs	r5, r2, #16
    624c:	4363      	muls	r3, r4
    624e:	437e      	muls	r6, r7
    6250:	436f      	muls	r7, r5
    6252:	4365      	muls	r5, r4
    6254:	0c1c      	lsrs	r4, r3, #16
    6256:	19ad      	adds	r5, r5, r6
    6258:	1964      	adds	r4, r4, r5
    625a:	469c      	mov	ip, r3
    625c:	42a6      	cmp	r6, r4
    625e:	d903      	bls.n	6268 <__aeabi_lmul+0x34>
    6260:	2380      	movs	r3, #128	; 0x80
    6262:	025b      	lsls	r3, r3, #9
    6264:	4698      	mov	r8, r3
    6266:	4447      	add	r7, r8
    6268:	4663      	mov	r3, ip
    626a:	0c25      	lsrs	r5, r4, #16
    626c:	19ef      	adds	r7, r5, r7
    626e:	041d      	lsls	r5, r3, #16
    6270:	464b      	mov	r3, r9
    6272:	434a      	muls	r2, r1
    6274:	4343      	muls	r3, r0
    6276:	0c2d      	lsrs	r5, r5, #16
    6278:	0424      	lsls	r4, r4, #16
    627a:	1964      	adds	r4, r4, r5
    627c:	1899      	adds	r1, r3, r2
    627e:	19c9      	adds	r1, r1, r7
    6280:	0020      	movs	r0, r4
    6282:	bc0c      	pop	{r2, r3}
    6284:	4690      	mov	r8, r2
    6286:	4699      	mov	r9, r3
    6288:	bdf0      	pop	{r4, r5, r6, r7, pc}
    628a:	46c0      	nop			; (mov r8, r8)

0000628c <__aeabi_fadd>:
    628c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    628e:	024a      	lsls	r2, r1, #9
    6290:	0243      	lsls	r3, r0, #9
    6292:	0044      	lsls	r4, r0, #1
    6294:	004e      	lsls	r6, r1, #1
    6296:	0fc5      	lsrs	r5, r0, #31
    6298:	0e24      	lsrs	r4, r4, #24
    629a:	0028      	movs	r0, r5
    629c:	099b      	lsrs	r3, r3, #6
    629e:	0e36      	lsrs	r6, r6, #24
    62a0:	0fc9      	lsrs	r1, r1, #31
    62a2:	0992      	lsrs	r2, r2, #6
    62a4:	428d      	cmp	r5, r1
    62a6:	d059      	beq.n	635c <__aeabi_fadd+0xd0>
    62a8:	1ba0      	subs	r0, r4, r6
    62aa:	2800      	cmp	r0, #0
    62ac:	dc00      	bgt.n	62b0 <__aeabi_fadd+0x24>
    62ae:	e08d      	b.n	63cc <__aeabi_fadd+0x140>
    62b0:	2e00      	cmp	r6, #0
    62b2:	d11a      	bne.n	62ea <__aeabi_fadd+0x5e>
    62b4:	2a00      	cmp	r2, #0
    62b6:	d000      	beq.n	62ba <__aeabi_fadd+0x2e>
    62b8:	e079      	b.n	63ae <__aeabi_fadd+0x122>
    62ba:	075a      	lsls	r2, r3, #29
    62bc:	d004      	beq.n	62c8 <__aeabi_fadd+0x3c>
    62be:	220f      	movs	r2, #15
    62c0:	401a      	ands	r2, r3
    62c2:	2a04      	cmp	r2, #4
    62c4:	d000      	beq.n	62c8 <__aeabi_fadd+0x3c>
    62c6:	3304      	adds	r3, #4
    62c8:	015a      	lsls	r2, r3, #5
    62ca:	d538      	bpl.n	633e <__aeabi_fadd+0xb2>
    62cc:	3401      	adds	r4, #1
    62ce:	2cff      	cmp	r4, #255	; 0xff
    62d0:	d100      	bne.n	62d4 <__aeabi_fadd+0x48>
    62d2:	e089      	b.n	63e8 <__aeabi_fadd+0x15c>
    62d4:	0028      	movs	r0, r5
    62d6:	019b      	lsls	r3, r3, #6
    62d8:	0a5b      	lsrs	r3, r3, #9
    62da:	b2e4      	uxtb	r4, r4
    62dc:	025b      	lsls	r3, r3, #9
    62de:	05e4      	lsls	r4, r4, #23
    62e0:	0a5b      	lsrs	r3, r3, #9
    62e2:	4323      	orrs	r3, r4
    62e4:	07c0      	lsls	r0, r0, #31
    62e6:	4318      	orrs	r0, r3
    62e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    62ea:	2cff      	cmp	r4, #255	; 0xff
    62ec:	d0e5      	beq.n	62ba <__aeabi_fadd+0x2e>
    62ee:	2180      	movs	r1, #128	; 0x80
    62f0:	04c9      	lsls	r1, r1, #19
    62f2:	430a      	orrs	r2, r1
    62f4:	281b      	cmp	r0, #27
    62f6:	dd00      	ble.n	62fa <__aeabi_fadd+0x6e>
    62f8:	e089      	b.n	640e <__aeabi_fadd+0x182>
    62fa:	0016      	movs	r6, r2
    62fc:	2120      	movs	r1, #32
    62fe:	40c6      	lsrs	r6, r0
    6300:	1a08      	subs	r0, r1, r0
    6302:	4082      	lsls	r2, r0
    6304:	1e51      	subs	r1, r2, #1
    6306:	418a      	sbcs	r2, r1
    6308:	4332      	orrs	r2, r6
    630a:	1a9b      	subs	r3, r3, r2
    630c:	015a      	lsls	r2, r3, #5
    630e:	d514      	bpl.n	633a <__aeabi_fadd+0xae>
    6310:	019b      	lsls	r3, r3, #6
    6312:	099e      	lsrs	r6, r3, #6
    6314:	0030      	movs	r0, r6
    6316:	f002 fb23 	bl	8960 <__clzsi2>
    631a:	3805      	subs	r0, #5
    631c:	4086      	lsls	r6, r0
    631e:	4284      	cmp	r4, r0
    6320:	dc65      	bgt.n	63ee <__aeabi_fadd+0x162>
    6322:	1b04      	subs	r4, r0, r4
    6324:	0033      	movs	r3, r6
    6326:	2020      	movs	r0, #32
    6328:	3401      	adds	r4, #1
    632a:	40e3      	lsrs	r3, r4
    632c:	1b04      	subs	r4, r0, r4
    632e:	40a6      	lsls	r6, r4
    6330:	1e72      	subs	r2, r6, #1
    6332:	4196      	sbcs	r6, r2
    6334:	2400      	movs	r4, #0
    6336:	4333      	orrs	r3, r6
    6338:	e7bf      	b.n	62ba <__aeabi_fadd+0x2e>
    633a:	075a      	lsls	r2, r3, #29
    633c:	d1bf      	bne.n	62be <__aeabi_fadd+0x32>
    633e:	08df      	lsrs	r7, r3, #3
    6340:	0028      	movs	r0, r5
    6342:	2cff      	cmp	r4, #255	; 0xff
    6344:	d12f      	bne.n	63a6 <__aeabi_fadd+0x11a>
    6346:	2f00      	cmp	r7, #0
    6348:	d100      	bne.n	634c <__aeabi_fadd+0xc0>
    634a:	e087      	b.n	645c <__aeabi_fadd+0x1d0>
    634c:	2280      	movs	r2, #128	; 0x80
    634e:	03d2      	lsls	r2, r2, #15
    6350:	0013      	movs	r3, r2
    6352:	433b      	orrs	r3, r7
    6354:	025b      	lsls	r3, r3, #9
    6356:	0a5b      	lsrs	r3, r3, #9
    6358:	24ff      	movs	r4, #255	; 0xff
    635a:	e7bf      	b.n	62dc <__aeabi_fadd+0x50>
    635c:	1ba1      	subs	r1, r4, r6
    635e:	2900      	cmp	r1, #0
    6360:	dd49      	ble.n	63f6 <__aeabi_fadd+0x16a>
    6362:	2e00      	cmp	r6, #0
    6364:	d029      	beq.n	63ba <__aeabi_fadd+0x12e>
    6366:	2cff      	cmp	r4, #255	; 0xff
    6368:	d0a7      	beq.n	62ba <__aeabi_fadd+0x2e>
    636a:	2680      	movs	r6, #128	; 0x80
    636c:	04f6      	lsls	r6, r6, #19
    636e:	4332      	orrs	r2, r6
    6370:	291b      	cmp	r1, #27
    6372:	dd00      	ble.n	6376 <__aeabi_fadd+0xea>
    6374:	e08d      	b.n	6492 <__aeabi_fadd+0x206>
    6376:	0017      	movs	r7, r2
    6378:	2620      	movs	r6, #32
    637a:	40cf      	lsrs	r7, r1
    637c:	1a71      	subs	r1, r6, r1
    637e:	408a      	lsls	r2, r1
    6380:	1e51      	subs	r1, r2, #1
    6382:	418a      	sbcs	r2, r1
    6384:	433a      	orrs	r2, r7
    6386:	189b      	adds	r3, r3, r2
    6388:	015a      	lsls	r2, r3, #5
    638a:	d5d6      	bpl.n	633a <__aeabi_fadd+0xae>
    638c:	3401      	adds	r4, #1
    638e:	2cff      	cmp	r4, #255	; 0xff
    6390:	d064      	beq.n	645c <__aeabi_fadd+0x1d0>
    6392:	2201      	movs	r2, #1
    6394:	4976      	ldr	r1, [pc, #472]	; (6570 <__aeabi_fadd+0x2e4>)
    6396:	401a      	ands	r2, r3
    6398:	085b      	lsrs	r3, r3, #1
    639a:	400b      	ands	r3, r1
    639c:	4313      	orrs	r3, r2
    639e:	e78c      	b.n	62ba <__aeabi_fadd+0x2e>
    63a0:	1e03      	subs	r3, r0, #0
    63a2:	d1ca      	bne.n	633a <__aeabi_fadd+0xae>
    63a4:	2000      	movs	r0, #0
    63a6:	027b      	lsls	r3, r7, #9
    63a8:	0a5b      	lsrs	r3, r3, #9
    63aa:	b2e4      	uxtb	r4, r4
    63ac:	e796      	b.n	62dc <__aeabi_fadd+0x50>
    63ae:	3801      	subs	r0, #1
    63b0:	2800      	cmp	r0, #0
    63b2:	d0aa      	beq.n	630a <__aeabi_fadd+0x7e>
    63b4:	2cff      	cmp	r4, #255	; 0xff
    63b6:	d19d      	bne.n	62f4 <__aeabi_fadd+0x68>
    63b8:	e77f      	b.n	62ba <__aeabi_fadd+0x2e>
    63ba:	2a00      	cmp	r2, #0
    63bc:	d100      	bne.n	63c0 <__aeabi_fadd+0x134>
    63be:	e77c      	b.n	62ba <__aeabi_fadd+0x2e>
    63c0:	3901      	subs	r1, #1
    63c2:	2900      	cmp	r1, #0
    63c4:	d0df      	beq.n	6386 <__aeabi_fadd+0xfa>
    63c6:	2cff      	cmp	r4, #255	; 0xff
    63c8:	d1d2      	bne.n	6370 <__aeabi_fadd+0xe4>
    63ca:	e776      	b.n	62ba <__aeabi_fadd+0x2e>
    63cc:	2800      	cmp	r0, #0
    63ce:	d120      	bne.n	6412 <__aeabi_fadd+0x186>
    63d0:	1c60      	adds	r0, r4, #1
    63d2:	b2c0      	uxtb	r0, r0
    63d4:	2801      	cmp	r0, #1
    63d6:	dd53      	ble.n	6480 <__aeabi_fadd+0x1f4>
    63d8:	2780      	movs	r7, #128	; 0x80
    63da:	1a9e      	subs	r6, r3, r2
    63dc:	04ff      	lsls	r7, r7, #19
    63de:	4037      	ands	r7, r6
    63e0:	d02f      	beq.n	6442 <__aeabi_fadd+0x1b6>
    63e2:	1ad6      	subs	r6, r2, r3
    63e4:	000d      	movs	r5, r1
    63e6:	e795      	b.n	6314 <__aeabi_fadd+0x88>
    63e8:	0028      	movs	r0, r5
    63ea:	2300      	movs	r3, #0
    63ec:	e776      	b.n	62dc <__aeabi_fadd+0x50>
    63ee:	4b61      	ldr	r3, [pc, #388]	; (6574 <__aeabi_fadd+0x2e8>)
    63f0:	1a24      	subs	r4, r4, r0
    63f2:	4033      	ands	r3, r6
    63f4:	e761      	b.n	62ba <__aeabi_fadd+0x2e>
    63f6:	2900      	cmp	r1, #0
    63f8:	d14d      	bne.n	6496 <__aeabi_fadd+0x20a>
    63fa:	1c61      	adds	r1, r4, #1
    63fc:	b2ce      	uxtb	r6, r1
    63fe:	2e01      	cmp	r6, #1
    6400:	dd2f      	ble.n	6462 <__aeabi_fadd+0x1d6>
    6402:	29ff      	cmp	r1, #255	; 0xff
    6404:	d02a      	beq.n	645c <__aeabi_fadd+0x1d0>
    6406:	189b      	adds	r3, r3, r2
    6408:	085b      	lsrs	r3, r3, #1
    640a:	000c      	movs	r4, r1
    640c:	e755      	b.n	62ba <__aeabi_fadd+0x2e>
    640e:	2201      	movs	r2, #1
    6410:	e77b      	b.n	630a <__aeabi_fadd+0x7e>
    6412:	2c00      	cmp	r4, #0
    6414:	d11b      	bne.n	644e <__aeabi_fadd+0x1c2>
    6416:	2b00      	cmp	r3, #0
    6418:	d05b      	beq.n	64d2 <__aeabi_fadd+0x246>
    641a:	43c0      	mvns	r0, r0
    641c:	2800      	cmp	r0, #0
    641e:	d00c      	beq.n	643a <__aeabi_fadd+0x1ae>
    6420:	2eff      	cmp	r6, #255	; 0xff
    6422:	d07e      	beq.n	6522 <__aeabi_fadd+0x296>
    6424:	281b      	cmp	r0, #27
    6426:	dd00      	ble.n	642a <__aeabi_fadd+0x19e>
    6428:	e092      	b.n	6550 <__aeabi_fadd+0x2c4>
    642a:	001d      	movs	r5, r3
    642c:	2420      	movs	r4, #32
    642e:	40c5      	lsrs	r5, r0
    6430:	1a20      	subs	r0, r4, r0
    6432:	4083      	lsls	r3, r0
    6434:	1e58      	subs	r0, r3, #1
    6436:	4183      	sbcs	r3, r0
    6438:	432b      	orrs	r3, r5
    643a:	1ad3      	subs	r3, r2, r3
    643c:	0034      	movs	r4, r6
    643e:	000d      	movs	r5, r1
    6440:	e764      	b.n	630c <__aeabi_fadd+0x80>
    6442:	2e00      	cmp	r6, #0
    6444:	d000      	beq.n	6448 <__aeabi_fadd+0x1bc>
    6446:	e765      	b.n	6314 <__aeabi_fadd+0x88>
    6448:	2000      	movs	r0, #0
    644a:	2400      	movs	r4, #0
    644c:	e7ab      	b.n	63a6 <__aeabi_fadd+0x11a>
    644e:	2eff      	cmp	r6, #255	; 0xff
    6450:	d067      	beq.n	6522 <__aeabi_fadd+0x296>
    6452:	2480      	movs	r4, #128	; 0x80
    6454:	04e4      	lsls	r4, r4, #19
    6456:	4240      	negs	r0, r0
    6458:	4323      	orrs	r3, r4
    645a:	e7e3      	b.n	6424 <__aeabi_fadd+0x198>
    645c:	24ff      	movs	r4, #255	; 0xff
    645e:	2300      	movs	r3, #0
    6460:	e73c      	b.n	62dc <__aeabi_fadd+0x50>
    6462:	2c00      	cmp	r4, #0
    6464:	d161      	bne.n	652a <__aeabi_fadd+0x29e>
    6466:	2b00      	cmp	r3, #0
    6468:	d07e      	beq.n	6568 <__aeabi_fadd+0x2dc>
    646a:	2a00      	cmp	r2, #0
    646c:	d100      	bne.n	6470 <__aeabi_fadd+0x1e4>
    646e:	e724      	b.n	62ba <__aeabi_fadd+0x2e>
    6470:	189b      	adds	r3, r3, r2
    6472:	015a      	lsls	r2, r3, #5
    6474:	d400      	bmi.n	6478 <__aeabi_fadd+0x1ec>
    6476:	e760      	b.n	633a <__aeabi_fadd+0xae>
    6478:	4a3e      	ldr	r2, [pc, #248]	; (6574 <__aeabi_fadd+0x2e8>)
    647a:	000c      	movs	r4, r1
    647c:	4013      	ands	r3, r2
    647e:	e71c      	b.n	62ba <__aeabi_fadd+0x2e>
    6480:	2c00      	cmp	r4, #0
    6482:	d11e      	bne.n	64c2 <__aeabi_fadd+0x236>
    6484:	2b00      	cmp	r3, #0
    6486:	d12f      	bne.n	64e8 <__aeabi_fadd+0x25c>
    6488:	2a00      	cmp	r2, #0
    648a:	d066      	beq.n	655a <__aeabi_fadd+0x2ce>
    648c:	0013      	movs	r3, r2
    648e:	000d      	movs	r5, r1
    6490:	e713      	b.n	62ba <__aeabi_fadd+0x2e>
    6492:	2201      	movs	r2, #1
    6494:	e777      	b.n	6386 <__aeabi_fadd+0xfa>
    6496:	2c00      	cmp	r4, #0
    6498:	d11f      	bne.n	64da <__aeabi_fadd+0x24e>
    649a:	2b00      	cmp	r3, #0
    649c:	d05a      	beq.n	6554 <__aeabi_fadd+0x2c8>
    649e:	43c9      	mvns	r1, r1
    64a0:	2900      	cmp	r1, #0
    64a2:	d00b      	beq.n	64bc <__aeabi_fadd+0x230>
    64a4:	2eff      	cmp	r6, #255	; 0xff
    64a6:	d050      	beq.n	654a <__aeabi_fadd+0x2be>
    64a8:	291b      	cmp	r1, #27
    64aa:	dc5f      	bgt.n	656c <__aeabi_fadd+0x2e0>
    64ac:	001f      	movs	r7, r3
    64ae:	2420      	movs	r4, #32
    64b0:	40cf      	lsrs	r7, r1
    64b2:	1a61      	subs	r1, r4, r1
    64b4:	408b      	lsls	r3, r1
    64b6:	1e59      	subs	r1, r3, #1
    64b8:	418b      	sbcs	r3, r1
    64ba:	433b      	orrs	r3, r7
    64bc:	189b      	adds	r3, r3, r2
    64be:	0034      	movs	r4, r6
    64c0:	e762      	b.n	6388 <__aeabi_fadd+0xfc>
    64c2:	2b00      	cmp	r3, #0
    64c4:	d11c      	bne.n	6500 <__aeabi_fadd+0x274>
    64c6:	2a00      	cmp	r2, #0
    64c8:	d04a      	beq.n	6560 <__aeabi_fadd+0x2d4>
    64ca:	0013      	movs	r3, r2
    64cc:	000d      	movs	r5, r1
    64ce:	24ff      	movs	r4, #255	; 0xff
    64d0:	e6f3      	b.n	62ba <__aeabi_fadd+0x2e>
    64d2:	0013      	movs	r3, r2
    64d4:	0034      	movs	r4, r6
    64d6:	000d      	movs	r5, r1
    64d8:	e6ef      	b.n	62ba <__aeabi_fadd+0x2e>
    64da:	2eff      	cmp	r6, #255	; 0xff
    64dc:	d035      	beq.n	654a <__aeabi_fadd+0x2be>
    64de:	2480      	movs	r4, #128	; 0x80
    64e0:	04e4      	lsls	r4, r4, #19
    64e2:	4249      	negs	r1, r1
    64e4:	4323      	orrs	r3, r4
    64e6:	e7df      	b.n	64a8 <__aeabi_fadd+0x21c>
    64e8:	2a00      	cmp	r2, #0
    64ea:	d100      	bne.n	64ee <__aeabi_fadd+0x262>
    64ec:	e6e5      	b.n	62ba <__aeabi_fadd+0x2e>
    64ee:	2780      	movs	r7, #128	; 0x80
    64f0:	1a98      	subs	r0, r3, r2
    64f2:	04ff      	lsls	r7, r7, #19
    64f4:	4007      	ands	r7, r0
    64f6:	d100      	bne.n	64fa <__aeabi_fadd+0x26e>
    64f8:	e752      	b.n	63a0 <__aeabi_fadd+0x114>
    64fa:	1ad3      	subs	r3, r2, r3
    64fc:	000d      	movs	r5, r1
    64fe:	e6dc      	b.n	62ba <__aeabi_fadd+0x2e>
    6500:	24ff      	movs	r4, #255	; 0xff
    6502:	2a00      	cmp	r2, #0
    6504:	d100      	bne.n	6508 <__aeabi_fadd+0x27c>
    6506:	e6d8      	b.n	62ba <__aeabi_fadd+0x2e>
    6508:	2080      	movs	r0, #128	; 0x80
    650a:	08db      	lsrs	r3, r3, #3
    650c:	03c0      	lsls	r0, r0, #15
    650e:	4203      	tst	r3, r0
    6510:	d004      	beq.n	651c <__aeabi_fadd+0x290>
    6512:	08d2      	lsrs	r2, r2, #3
    6514:	4202      	tst	r2, r0
    6516:	d101      	bne.n	651c <__aeabi_fadd+0x290>
    6518:	0013      	movs	r3, r2
    651a:	000d      	movs	r5, r1
    651c:	00db      	lsls	r3, r3, #3
    651e:	24ff      	movs	r4, #255	; 0xff
    6520:	e6cb      	b.n	62ba <__aeabi_fadd+0x2e>
    6522:	0013      	movs	r3, r2
    6524:	24ff      	movs	r4, #255	; 0xff
    6526:	000d      	movs	r5, r1
    6528:	e6c7      	b.n	62ba <__aeabi_fadd+0x2e>
    652a:	2b00      	cmp	r3, #0
    652c:	d00d      	beq.n	654a <__aeabi_fadd+0x2be>
    652e:	24ff      	movs	r4, #255	; 0xff
    6530:	2a00      	cmp	r2, #0
    6532:	d100      	bne.n	6536 <__aeabi_fadd+0x2aa>
    6534:	e6c1      	b.n	62ba <__aeabi_fadd+0x2e>
    6536:	2180      	movs	r1, #128	; 0x80
    6538:	08db      	lsrs	r3, r3, #3
    653a:	03c9      	lsls	r1, r1, #15
    653c:	420b      	tst	r3, r1
    653e:	d0ed      	beq.n	651c <__aeabi_fadd+0x290>
    6540:	08d2      	lsrs	r2, r2, #3
    6542:	420a      	tst	r2, r1
    6544:	d1ea      	bne.n	651c <__aeabi_fadd+0x290>
    6546:	0013      	movs	r3, r2
    6548:	e7e8      	b.n	651c <__aeabi_fadd+0x290>
    654a:	0013      	movs	r3, r2
    654c:	24ff      	movs	r4, #255	; 0xff
    654e:	e6b4      	b.n	62ba <__aeabi_fadd+0x2e>
    6550:	2301      	movs	r3, #1
    6552:	e772      	b.n	643a <__aeabi_fadd+0x1ae>
    6554:	0013      	movs	r3, r2
    6556:	0034      	movs	r4, r6
    6558:	e6af      	b.n	62ba <__aeabi_fadd+0x2e>
    655a:	2700      	movs	r7, #0
    655c:	2000      	movs	r0, #0
    655e:	e722      	b.n	63a6 <__aeabi_fadd+0x11a>
    6560:	2780      	movs	r7, #128	; 0x80
    6562:	2000      	movs	r0, #0
    6564:	03ff      	lsls	r7, r7, #15
    6566:	e6f1      	b.n	634c <__aeabi_fadd+0xc0>
    6568:	0013      	movs	r3, r2
    656a:	e6a6      	b.n	62ba <__aeabi_fadd+0x2e>
    656c:	2301      	movs	r3, #1
    656e:	e7a5      	b.n	64bc <__aeabi_fadd+0x230>
    6570:	7dffffff 	.word	0x7dffffff
    6574:	fbffffff 	.word	0xfbffffff

00006578 <__aeabi_fdiv>:
    6578:	b5f0      	push	{r4, r5, r6, r7, lr}
    657a:	4656      	mov	r6, sl
    657c:	4644      	mov	r4, r8
    657e:	465f      	mov	r7, fp
    6580:	464d      	mov	r5, r9
    6582:	b4f0      	push	{r4, r5, r6, r7}
    6584:	0244      	lsls	r4, r0, #9
    6586:	0046      	lsls	r6, r0, #1
    6588:	0fc7      	lsrs	r7, r0, #31
    658a:	b083      	sub	sp, #12
    658c:	4688      	mov	r8, r1
    658e:	0a65      	lsrs	r5, r4, #9
    6590:	0e36      	lsrs	r6, r6, #24
    6592:	46ba      	mov	sl, r7
    6594:	d03d      	beq.n	6612 <__aeabi_fdiv+0x9a>
    6596:	2eff      	cmp	r6, #255	; 0xff
    6598:	d022      	beq.n	65e0 <__aeabi_fdiv+0x68>
    659a:	2300      	movs	r3, #0
    659c:	00ec      	lsls	r4, r5, #3
    659e:	2580      	movs	r5, #128	; 0x80
    65a0:	4699      	mov	r9, r3
    65a2:	469b      	mov	fp, r3
    65a4:	04ed      	lsls	r5, r5, #19
    65a6:	4325      	orrs	r5, r4
    65a8:	3e7f      	subs	r6, #127	; 0x7f
    65aa:	4643      	mov	r3, r8
    65ac:	025c      	lsls	r4, r3, #9
    65ae:	0058      	lsls	r0, r3, #1
    65b0:	0fdb      	lsrs	r3, r3, #31
    65b2:	0a64      	lsrs	r4, r4, #9
    65b4:	0e00      	lsrs	r0, r0, #24
    65b6:	4698      	mov	r8, r3
    65b8:	d036      	beq.n	6628 <__aeabi_fdiv+0xb0>
    65ba:	28ff      	cmp	r0, #255	; 0xff
    65bc:	d030      	beq.n	6620 <__aeabi_fdiv+0xa8>
    65be:	2380      	movs	r3, #128	; 0x80
    65c0:	2100      	movs	r1, #0
    65c2:	00e4      	lsls	r4, r4, #3
    65c4:	04db      	lsls	r3, r3, #19
    65c6:	431c      	orrs	r4, r3
    65c8:	387f      	subs	r0, #127	; 0x7f
    65ca:	1a30      	subs	r0, r6, r0
    65cc:	9001      	str	r0, [sp, #4]
    65ce:	4648      	mov	r0, r9
    65d0:	4642      	mov	r2, r8
    65d2:	4308      	orrs	r0, r1
    65d4:	4e72      	ldr	r6, [pc, #456]	; (67a0 <__aeabi_fdiv+0x228>)
    65d6:	0080      	lsls	r0, r0, #2
    65d8:	5830      	ldr	r0, [r6, r0]
    65da:	407a      	eors	r2, r7
    65dc:	0013      	movs	r3, r2
    65de:	4687      	mov	pc, r0
    65e0:	2d00      	cmp	r5, #0
    65e2:	d144      	bne.n	666e <__aeabi_fdiv+0xf6>
    65e4:	2308      	movs	r3, #8
    65e6:	4699      	mov	r9, r3
    65e8:	3b06      	subs	r3, #6
    65ea:	469b      	mov	fp, r3
    65ec:	e7dd      	b.n	65aa <__aeabi_fdiv+0x32>
    65ee:	2201      	movs	r2, #1
    65f0:	20ff      	movs	r0, #255	; 0xff
    65f2:	2400      	movs	r4, #0
    65f4:	401a      	ands	r2, r3
    65f6:	0264      	lsls	r4, r4, #9
    65f8:	05c3      	lsls	r3, r0, #23
    65fa:	0a64      	lsrs	r4, r4, #9
    65fc:	07d2      	lsls	r2, r2, #31
    65fe:	431c      	orrs	r4, r3
    6600:	4314      	orrs	r4, r2
    6602:	0020      	movs	r0, r4
    6604:	b003      	add	sp, #12
    6606:	bc3c      	pop	{r2, r3, r4, r5}
    6608:	4690      	mov	r8, r2
    660a:	4699      	mov	r9, r3
    660c:	46a2      	mov	sl, r4
    660e:	46ab      	mov	fp, r5
    6610:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6612:	2d00      	cmp	r5, #0
    6614:	d120      	bne.n	6658 <__aeabi_fdiv+0xe0>
    6616:	2304      	movs	r3, #4
    6618:	4699      	mov	r9, r3
    661a:	3b03      	subs	r3, #3
    661c:	469b      	mov	fp, r3
    661e:	e7c4      	b.n	65aa <__aeabi_fdiv+0x32>
    6620:	2c00      	cmp	r4, #0
    6622:	d117      	bne.n	6654 <__aeabi_fdiv+0xdc>
    6624:	2102      	movs	r1, #2
    6626:	e002      	b.n	662e <__aeabi_fdiv+0xb6>
    6628:	2c00      	cmp	r4, #0
    662a:	d10a      	bne.n	6642 <__aeabi_fdiv+0xca>
    662c:	2101      	movs	r1, #1
    662e:	1a32      	subs	r2, r6, r0
    6630:	9201      	str	r2, [sp, #4]
    6632:	464a      	mov	r2, r9
    6634:	4643      	mov	r3, r8
    6636:	430a      	orrs	r2, r1
    6638:	485a      	ldr	r0, [pc, #360]	; (67a4 <__aeabi_fdiv+0x22c>)
    663a:	0092      	lsls	r2, r2, #2
    663c:	5882      	ldr	r2, [r0, r2]
    663e:	407b      	eors	r3, r7
    6640:	4697      	mov	pc, r2
    6642:	0020      	movs	r0, r4
    6644:	f002 f98c 	bl	8960 <__clzsi2>
    6648:	1f43      	subs	r3, r0, #5
    664a:	3076      	adds	r0, #118	; 0x76
    664c:	409c      	lsls	r4, r3
    664e:	4240      	negs	r0, r0
    6650:	2100      	movs	r1, #0
    6652:	e7ba      	b.n	65ca <__aeabi_fdiv+0x52>
    6654:	2103      	movs	r1, #3
    6656:	e7b8      	b.n	65ca <__aeabi_fdiv+0x52>
    6658:	0028      	movs	r0, r5
    665a:	f002 f981 	bl	8960 <__clzsi2>
    665e:	1f43      	subs	r3, r0, #5
    6660:	409d      	lsls	r5, r3
    6662:	2300      	movs	r3, #0
    6664:	3076      	adds	r0, #118	; 0x76
    6666:	4246      	negs	r6, r0
    6668:	4699      	mov	r9, r3
    666a:	469b      	mov	fp, r3
    666c:	e79d      	b.n	65aa <__aeabi_fdiv+0x32>
    666e:	230c      	movs	r3, #12
    6670:	4699      	mov	r9, r3
    6672:	3b09      	subs	r3, #9
    6674:	469b      	mov	fp, r3
    6676:	e798      	b.n	65aa <__aeabi_fdiv+0x32>
    6678:	2480      	movs	r4, #128	; 0x80
    667a:	2200      	movs	r2, #0
    667c:	03e4      	lsls	r4, r4, #15
    667e:	20ff      	movs	r0, #255	; 0xff
    6680:	e7b9      	b.n	65f6 <__aeabi_fdiv+0x7e>
    6682:	2400      	movs	r4, #0
    6684:	46c2      	mov	sl, r8
    6686:	468b      	mov	fp, r1
    6688:	465a      	mov	r2, fp
    668a:	4653      	mov	r3, sl
    668c:	2a02      	cmp	r2, #2
    668e:	d0ae      	beq.n	65ee <__aeabi_fdiv+0x76>
    6690:	2a03      	cmp	r2, #3
    6692:	d07d      	beq.n	6790 <__aeabi_fdiv+0x218>
    6694:	2a01      	cmp	r2, #1
    6696:	d131      	bne.n	66fc <__aeabi_fdiv+0x184>
    6698:	2201      	movs	r2, #1
    669a:	2000      	movs	r0, #0
    669c:	401a      	ands	r2, r3
    669e:	2400      	movs	r4, #0
    66a0:	e7a9      	b.n	65f6 <__aeabi_fdiv+0x7e>
    66a2:	2201      	movs	r2, #1
    66a4:	1a10      	subs	r0, r2, r0
    66a6:	281b      	cmp	r0, #27
    66a8:	dd56      	ble.n	6758 <__aeabi_fdiv+0x1e0>
    66aa:	401a      	ands	r2, r3
    66ac:	2000      	movs	r0, #0
    66ae:	2400      	movs	r4, #0
    66b0:	e7a1      	b.n	65f6 <__aeabi_fdiv+0x7e>
    66b2:	2380      	movs	r3, #128	; 0x80
    66b4:	03db      	lsls	r3, r3, #15
    66b6:	421d      	tst	r5, r3
    66b8:	d14b      	bne.n	6752 <__aeabi_fdiv+0x1da>
    66ba:	2380      	movs	r3, #128	; 0x80
    66bc:	03db      	lsls	r3, r3, #15
    66be:	432b      	orrs	r3, r5
    66c0:	025c      	lsls	r4, r3, #9
    66c2:	0a64      	lsrs	r4, r4, #9
    66c4:	003a      	movs	r2, r7
    66c6:	20ff      	movs	r0, #255	; 0xff
    66c8:	e795      	b.n	65f6 <__aeabi_fdiv+0x7e>
    66ca:	016d      	lsls	r5, r5, #5
    66cc:	0160      	lsls	r0, r4, #5
    66ce:	4285      	cmp	r5, r0
    66d0:	d230      	bcs.n	6734 <__aeabi_fdiv+0x1bc>
    66d2:	9a01      	ldr	r2, [sp, #4]
    66d4:	2400      	movs	r4, #0
    66d6:	3a01      	subs	r2, #1
    66d8:	9201      	str	r2, [sp, #4]
    66da:	221b      	movs	r2, #27
    66dc:	2701      	movs	r7, #1
    66de:	0029      	movs	r1, r5
    66e0:	0064      	lsls	r4, r4, #1
    66e2:	006d      	lsls	r5, r5, #1
    66e4:	2900      	cmp	r1, #0
    66e6:	db01      	blt.n	66ec <__aeabi_fdiv+0x174>
    66e8:	42a8      	cmp	r0, r5
    66ea:	d801      	bhi.n	66f0 <__aeabi_fdiv+0x178>
    66ec:	1a2d      	subs	r5, r5, r0
    66ee:	433c      	orrs	r4, r7
    66f0:	3a01      	subs	r2, #1
    66f2:	2a00      	cmp	r2, #0
    66f4:	d1f3      	bne.n	66de <__aeabi_fdiv+0x166>
    66f6:	1e6a      	subs	r2, r5, #1
    66f8:	4195      	sbcs	r5, r2
    66fa:	432c      	orrs	r4, r5
    66fc:	9801      	ldr	r0, [sp, #4]
    66fe:	307f      	adds	r0, #127	; 0x7f
    6700:	2800      	cmp	r0, #0
    6702:	ddce      	ble.n	66a2 <__aeabi_fdiv+0x12a>
    6704:	0762      	lsls	r2, r4, #29
    6706:	d004      	beq.n	6712 <__aeabi_fdiv+0x19a>
    6708:	220f      	movs	r2, #15
    670a:	4022      	ands	r2, r4
    670c:	2a04      	cmp	r2, #4
    670e:	d000      	beq.n	6712 <__aeabi_fdiv+0x19a>
    6710:	3404      	adds	r4, #4
    6712:	0122      	lsls	r2, r4, #4
    6714:	d503      	bpl.n	671e <__aeabi_fdiv+0x1a6>
    6716:	4a24      	ldr	r2, [pc, #144]	; (67a8 <__aeabi_fdiv+0x230>)
    6718:	9801      	ldr	r0, [sp, #4]
    671a:	4014      	ands	r4, r2
    671c:	3080      	adds	r0, #128	; 0x80
    671e:	28fe      	cmp	r0, #254	; 0xfe
    6720:	dd00      	ble.n	6724 <__aeabi_fdiv+0x1ac>
    6722:	e764      	b.n	65ee <__aeabi_fdiv+0x76>
    6724:	2201      	movs	r2, #1
    6726:	01a4      	lsls	r4, r4, #6
    6728:	0a64      	lsrs	r4, r4, #9
    672a:	b2c0      	uxtb	r0, r0
    672c:	401a      	ands	r2, r3
    672e:	e762      	b.n	65f6 <__aeabi_fdiv+0x7e>
    6730:	002c      	movs	r4, r5
    6732:	e7a9      	b.n	6688 <__aeabi_fdiv+0x110>
    6734:	1a2d      	subs	r5, r5, r0
    6736:	221a      	movs	r2, #26
    6738:	2401      	movs	r4, #1
    673a:	e7cf      	b.n	66dc <__aeabi_fdiv+0x164>
    673c:	026b      	lsls	r3, r5, #9
    673e:	d5bc      	bpl.n	66ba <__aeabi_fdiv+0x142>
    6740:	2400      	movs	r4, #0
    6742:	2380      	movs	r3, #128	; 0x80
    6744:	03db      	lsls	r3, r3, #15
    6746:	431c      	orrs	r4, r3
    6748:	0264      	lsls	r4, r4, #9
    674a:	0a64      	lsrs	r4, r4, #9
    674c:	4642      	mov	r2, r8
    674e:	20ff      	movs	r0, #255	; 0xff
    6750:	e751      	b.n	65f6 <__aeabi_fdiv+0x7e>
    6752:	421c      	tst	r4, r3
    6754:	d1b3      	bne.n	66be <__aeabi_fdiv+0x146>
    6756:	e7f4      	b.n	6742 <__aeabi_fdiv+0x1ca>
    6758:	0021      	movs	r1, r4
    675a:	2220      	movs	r2, #32
    675c:	40c1      	lsrs	r1, r0
    675e:	1a10      	subs	r0, r2, r0
    6760:	4084      	lsls	r4, r0
    6762:	1e62      	subs	r2, r4, #1
    6764:	4194      	sbcs	r4, r2
    6766:	430c      	orrs	r4, r1
    6768:	0762      	lsls	r2, r4, #29
    676a:	d004      	beq.n	6776 <__aeabi_fdiv+0x1fe>
    676c:	220f      	movs	r2, #15
    676e:	4022      	ands	r2, r4
    6770:	2a04      	cmp	r2, #4
    6772:	d000      	beq.n	6776 <__aeabi_fdiv+0x1fe>
    6774:	3404      	adds	r4, #4
    6776:	0162      	lsls	r2, r4, #5
    6778:	d504      	bpl.n	6784 <__aeabi_fdiv+0x20c>
    677a:	2201      	movs	r2, #1
    677c:	2001      	movs	r0, #1
    677e:	401a      	ands	r2, r3
    6780:	2400      	movs	r4, #0
    6782:	e738      	b.n	65f6 <__aeabi_fdiv+0x7e>
    6784:	2201      	movs	r2, #1
    6786:	01a4      	lsls	r4, r4, #6
    6788:	0a64      	lsrs	r4, r4, #9
    678a:	401a      	ands	r2, r3
    678c:	2000      	movs	r0, #0
    678e:	e732      	b.n	65f6 <__aeabi_fdiv+0x7e>
    6790:	2380      	movs	r3, #128	; 0x80
    6792:	03db      	lsls	r3, r3, #15
    6794:	431c      	orrs	r4, r3
    6796:	0264      	lsls	r4, r4, #9
    6798:	0a64      	lsrs	r4, r4, #9
    679a:	4652      	mov	r2, sl
    679c:	20ff      	movs	r0, #255	; 0xff
    679e:	e72a      	b.n	65f6 <__aeabi_fdiv+0x7e>
    67a0:	00008cf8 	.word	0x00008cf8
    67a4:	00008d38 	.word	0x00008d38
    67a8:	f7ffffff 	.word	0xf7ffffff

000067ac <__eqsf2>:
    67ac:	0243      	lsls	r3, r0, #9
    67ae:	b570      	push	{r4, r5, r6, lr}
    67b0:	0042      	lsls	r2, r0, #1
    67b2:	004c      	lsls	r4, r1, #1
    67b4:	0a5d      	lsrs	r5, r3, #9
    67b6:	0fc3      	lsrs	r3, r0, #31
    67b8:	0248      	lsls	r0, r1, #9
    67ba:	0e12      	lsrs	r2, r2, #24
    67bc:	0a46      	lsrs	r6, r0, #9
    67be:	0e24      	lsrs	r4, r4, #24
    67c0:	0fc9      	lsrs	r1, r1, #31
    67c2:	2aff      	cmp	r2, #255	; 0xff
    67c4:	d00f      	beq.n	67e6 <__eqsf2+0x3a>
    67c6:	2cff      	cmp	r4, #255	; 0xff
    67c8:	d011      	beq.n	67ee <__eqsf2+0x42>
    67ca:	2001      	movs	r0, #1
    67cc:	42a2      	cmp	r2, r4
    67ce:	d000      	beq.n	67d2 <__eqsf2+0x26>
    67d0:	bd70      	pop	{r4, r5, r6, pc}
    67d2:	42b5      	cmp	r5, r6
    67d4:	d1fc      	bne.n	67d0 <__eqsf2+0x24>
    67d6:	428b      	cmp	r3, r1
    67d8:	d00d      	beq.n	67f6 <__eqsf2+0x4a>
    67da:	2a00      	cmp	r2, #0
    67dc:	d1f8      	bne.n	67d0 <__eqsf2+0x24>
    67de:	0028      	movs	r0, r5
    67e0:	1e43      	subs	r3, r0, #1
    67e2:	4198      	sbcs	r0, r3
    67e4:	e7f4      	b.n	67d0 <__eqsf2+0x24>
    67e6:	2001      	movs	r0, #1
    67e8:	2d00      	cmp	r5, #0
    67ea:	d1f1      	bne.n	67d0 <__eqsf2+0x24>
    67ec:	e7eb      	b.n	67c6 <__eqsf2+0x1a>
    67ee:	2001      	movs	r0, #1
    67f0:	2e00      	cmp	r6, #0
    67f2:	d1ed      	bne.n	67d0 <__eqsf2+0x24>
    67f4:	e7e9      	b.n	67ca <__eqsf2+0x1e>
    67f6:	2000      	movs	r0, #0
    67f8:	e7ea      	b.n	67d0 <__eqsf2+0x24>
    67fa:	46c0      	nop			; (mov r8, r8)

000067fc <__gesf2>:
    67fc:	0243      	lsls	r3, r0, #9
    67fe:	b5f0      	push	{r4, r5, r6, r7, lr}
    6800:	0042      	lsls	r2, r0, #1
    6802:	0a5d      	lsrs	r5, r3, #9
    6804:	0fc3      	lsrs	r3, r0, #31
    6806:	0248      	lsls	r0, r1, #9
    6808:	0a44      	lsrs	r4, r0, #9
    680a:	0048      	lsls	r0, r1, #1
    680c:	0e12      	lsrs	r2, r2, #24
    680e:	0e00      	lsrs	r0, r0, #24
    6810:	0fc9      	lsrs	r1, r1, #31
    6812:	2aff      	cmp	r2, #255	; 0xff
    6814:	d01f      	beq.n	6856 <__gesf2+0x5a>
    6816:	28ff      	cmp	r0, #255	; 0xff
    6818:	d022      	beq.n	6860 <__gesf2+0x64>
    681a:	2a00      	cmp	r2, #0
    681c:	d109      	bne.n	6832 <__gesf2+0x36>
    681e:	426e      	negs	r6, r5
    6820:	416e      	adcs	r6, r5
    6822:	2800      	cmp	r0, #0
    6824:	d10f      	bne.n	6846 <__gesf2+0x4a>
    6826:	2c00      	cmp	r4, #0
    6828:	d10d      	bne.n	6846 <__gesf2+0x4a>
    682a:	2000      	movs	r0, #0
    682c:	2d00      	cmp	r5, #0
    682e:	d009      	beq.n	6844 <__gesf2+0x48>
    6830:	e005      	b.n	683e <__gesf2+0x42>
    6832:	2800      	cmp	r0, #0
    6834:	d101      	bne.n	683a <__gesf2+0x3e>
    6836:	2c00      	cmp	r4, #0
    6838:	d001      	beq.n	683e <__gesf2+0x42>
    683a:	428b      	cmp	r3, r1
    683c:	d013      	beq.n	6866 <__gesf2+0x6a>
    683e:	4258      	negs	r0, r3
    6840:	2301      	movs	r3, #1
    6842:	4318      	orrs	r0, r3
    6844:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6846:	2e00      	cmp	r6, #0
    6848:	d0f7      	beq.n	683a <__gesf2+0x3e>
    684a:	4248      	negs	r0, r1
    684c:	4141      	adcs	r1, r0
    684e:	2001      	movs	r0, #1
    6850:	4249      	negs	r1, r1
    6852:	4308      	orrs	r0, r1
    6854:	e7f6      	b.n	6844 <__gesf2+0x48>
    6856:	2d00      	cmp	r5, #0
    6858:	d0dd      	beq.n	6816 <__gesf2+0x1a>
    685a:	2002      	movs	r0, #2
    685c:	4240      	negs	r0, r0
    685e:	e7f1      	b.n	6844 <__gesf2+0x48>
    6860:	2c00      	cmp	r4, #0
    6862:	d0da      	beq.n	681a <__gesf2+0x1e>
    6864:	e7f9      	b.n	685a <__gesf2+0x5e>
    6866:	4282      	cmp	r2, r0
    6868:	dce9      	bgt.n	683e <__gesf2+0x42>
    686a:	db04      	blt.n	6876 <__gesf2+0x7a>
    686c:	42a5      	cmp	r5, r4
    686e:	d8e6      	bhi.n	683e <__gesf2+0x42>
    6870:	2000      	movs	r0, #0
    6872:	42a5      	cmp	r5, r4
    6874:	d2e6      	bcs.n	6844 <__gesf2+0x48>
    6876:	4258      	negs	r0, r3
    6878:	4143      	adcs	r3, r0
    687a:	2001      	movs	r0, #1
    687c:	425b      	negs	r3, r3
    687e:	4318      	orrs	r0, r3
    6880:	e7e0      	b.n	6844 <__gesf2+0x48>
    6882:	46c0      	nop			; (mov r8, r8)

00006884 <__lesf2>:
    6884:	0243      	lsls	r3, r0, #9
    6886:	b5f0      	push	{r4, r5, r6, r7, lr}
    6888:	0042      	lsls	r2, r0, #1
    688a:	004c      	lsls	r4, r1, #1
    688c:	0a5e      	lsrs	r6, r3, #9
    688e:	0fc3      	lsrs	r3, r0, #31
    6890:	0248      	lsls	r0, r1, #9
    6892:	0e12      	lsrs	r2, r2, #24
    6894:	0a45      	lsrs	r5, r0, #9
    6896:	0e24      	lsrs	r4, r4, #24
    6898:	0fc9      	lsrs	r1, r1, #31
    689a:	2aff      	cmp	r2, #255	; 0xff
    689c:	d017      	beq.n	68ce <__lesf2+0x4a>
    689e:	2cff      	cmp	r4, #255	; 0xff
    68a0:	d019      	beq.n	68d6 <__lesf2+0x52>
    68a2:	2a00      	cmp	r2, #0
    68a4:	d10b      	bne.n	68be <__lesf2+0x3a>
    68a6:	4270      	negs	r0, r6
    68a8:	4170      	adcs	r0, r6
    68aa:	2c00      	cmp	r4, #0
    68ac:	d017      	beq.n	68de <__lesf2+0x5a>
    68ae:	2800      	cmp	r0, #0
    68b0:	d007      	beq.n	68c2 <__lesf2+0x3e>
    68b2:	4248      	negs	r0, r1
    68b4:	4141      	adcs	r1, r0
    68b6:	2001      	movs	r0, #1
    68b8:	4249      	negs	r1, r1
    68ba:	4308      	orrs	r0, r1
    68bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68be:	2c00      	cmp	r4, #0
    68c0:	d013      	beq.n	68ea <__lesf2+0x66>
    68c2:	428b      	cmp	r3, r1
    68c4:	d014      	beq.n	68f0 <__lesf2+0x6c>
    68c6:	4258      	negs	r0, r3
    68c8:	2301      	movs	r3, #1
    68ca:	4318      	orrs	r0, r3
    68cc:	e7f6      	b.n	68bc <__lesf2+0x38>
    68ce:	2002      	movs	r0, #2
    68d0:	2e00      	cmp	r6, #0
    68d2:	d1f3      	bne.n	68bc <__lesf2+0x38>
    68d4:	e7e3      	b.n	689e <__lesf2+0x1a>
    68d6:	2002      	movs	r0, #2
    68d8:	2d00      	cmp	r5, #0
    68da:	d1ef      	bne.n	68bc <__lesf2+0x38>
    68dc:	e7e1      	b.n	68a2 <__lesf2+0x1e>
    68de:	2d00      	cmp	r5, #0
    68e0:	d1e5      	bne.n	68ae <__lesf2+0x2a>
    68e2:	2000      	movs	r0, #0
    68e4:	2e00      	cmp	r6, #0
    68e6:	d0e9      	beq.n	68bc <__lesf2+0x38>
    68e8:	e7ed      	b.n	68c6 <__lesf2+0x42>
    68ea:	2d00      	cmp	r5, #0
    68ec:	d1e9      	bne.n	68c2 <__lesf2+0x3e>
    68ee:	e7ea      	b.n	68c6 <__lesf2+0x42>
    68f0:	42a2      	cmp	r2, r4
    68f2:	dce8      	bgt.n	68c6 <__lesf2+0x42>
    68f4:	db04      	blt.n	6900 <__lesf2+0x7c>
    68f6:	42ae      	cmp	r6, r5
    68f8:	d8e5      	bhi.n	68c6 <__lesf2+0x42>
    68fa:	2000      	movs	r0, #0
    68fc:	42ae      	cmp	r6, r5
    68fe:	d2dd      	bcs.n	68bc <__lesf2+0x38>
    6900:	4258      	negs	r0, r3
    6902:	4143      	adcs	r3, r0
    6904:	2001      	movs	r0, #1
    6906:	425b      	negs	r3, r3
    6908:	4318      	orrs	r0, r3
    690a:	e7d7      	b.n	68bc <__lesf2+0x38>

0000690c <__aeabi_fmul>:
    690c:	b5f0      	push	{r4, r5, r6, r7, lr}
    690e:	4657      	mov	r7, sl
    6910:	464e      	mov	r6, r9
    6912:	4645      	mov	r5, r8
    6914:	0043      	lsls	r3, r0, #1
    6916:	b4e0      	push	{r5, r6, r7}
    6918:	0246      	lsls	r6, r0, #9
    691a:	4688      	mov	r8, r1
    691c:	0a76      	lsrs	r6, r6, #9
    691e:	0e1f      	lsrs	r7, r3, #24
    6920:	0fc4      	lsrs	r4, r0, #31
    6922:	2f00      	cmp	r7, #0
    6924:	d047      	beq.n	69b6 <__aeabi_fmul+0xaa>
    6926:	2fff      	cmp	r7, #255	; 0xff
    6928:	d025      	beq.n	6976 <__aeabi_fmul+0x6a>
    692a:	2300      	movs	r3, #0
    692c:	2580      	movs	r5, #128	; 0x80
    692e:	469a      	mov	sl, r3
    6930:	4699      	mov	r9, r3
    6932:	00f6      	lsls	r6, r6, #3
    6934:	04ed      	lsls	r5, r5, #19
    6936:	432e      	orrs	r6, r5
    6938:	3f7f      	subs	r7, #127	; 0x7f
    693a:	4643      	mov	r3, r8
    693c:	4642      	mov	r2, r8
    693e:	025d      	lsls	r5, r3, #9
    6940:	0fd2      	lsrs	r2, r2, #31
    6942:	005b      	lsls	r3, r3, #1
    6944:	0a6d      	lsrs	r5, r5, #9
    6946:	0e1b      	lsrs	r3, r3, #24
    6948:	4690      	mov	r8, r2
    694a:	d040      	beq.n	69ce <__aeabi_fmul+0xc2>
    694c:	2bff      	cmp	r3, #255	; 0xff
    694e:	d039      	beq.n	69c4 <__aeabi_fmul+0xb8>
    6950:	2280      	movs	r2, #128	; 0x80
    6952:	2000      	movs	r0, #0
    6954:	00ed      	lsls	r5, r5, #3
    6956:	04d2      	lsls	r2, r2, #19
    6958:	4315      	orrs	r5, r2
    695a:	3b7f      	subs	r3, #127	; 0x7f
    695c:	18fb      	adds	r3, r7, r3
    695e:	4642      	mov	r2, r8
    6960:	4657      	mov	r7, sl
    6962:	1c59      	adds	r1, r3, #1
    6964:	4062      	eors	r2, r4
    6966:	468c      	mov	ip, r1
    6968:	4307      	orrs	r7, r0
    696a:	2f0f      	cmp	r7, #15
    696c:	d85c      	bhi.n	6a28 <__aeabi_fmul+0x11c>
    696e:	496f      	ldr	r1, [pc, #444]	; (6b2c <__aeabi_fmul+0x220>)
    6970:	00bf      	lsls	r7, r7, #2
    6972:	59c9      	ldr	r1, [r1, r7]
    6974:	468f      	mov	pc, r1
    6976:	2e00      	cmp	r6, #0
    6978:	d145      	bne.n	6a06 <__aeabi_fmul+0xfa>
    697a:	2308      	movs	r3, #8
    697c:	469a      	mov	sl, r3
    697e:	3b06      	subs	r3, #6
    6980:	4699      	mov	r9, r3
    6982:	e7da      	b.n	693a <__aeabi_fmul+0x2e>
    6984:	4642      	mov	r2, r8
    6986:	2802      	cmp	r0, #2
    6988:	d02d      	beq.n	69e6 <__aeabi_fmul+0xda>
    698a:	2803      	cmp	r0, #3
    698c:	d100      	bne.n	6990 <__aeabi_fmul+0x84>
    698e:	e0c3      	b.n	6b18 <__aeabi_fmul+0x20c>
    6990:	2801      	cmp	r0, #1
    6992:	d000      	beq.n	6996 <__aeabi_fmul+0x8a>
    6994:	e0a2      	b.n	6adc <__aeabi_fmul+0x1d0>
    6996:	2500      	movs	r5, #0
    6998:	2600      	movs	r6, #0
    699a:	4002      	ands	r2, r0
    699c:	b2d4      	uxtb	r4, r2
    699e:	0276      	lsls	r6, r6, #9
    69a0:	05ed      	lsls	r5, r5, #23
    69a2:	0a76      	lsrs	r6, r6, #9
    69a4:	432e      	orrs	r6, r5
    69a6:	07e4      	lsls	r4, r4, #31
    69a8:	4326      	orrs	r6, r4
    69aa:	0030      	movs	r0, r6
    69ac:	bc1c      	pop	{r2, r3, r4}
    69ae:	4690      	mov	r8, r2
    69b0:	4699      	mov	r9, r3
    69b2:	46a2      	mov	sl, r4
    69b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69b6:	2e00      	cmp	r6, #0
    69b8:	d11a      	bne.n	69f0 <__aeabi_fmul+0xe4>
    69ba:	2304      	movs	r3, #4
    69bc:	469a      	mov	sl, r3
    69be:	3b03      	subs	r3, #3
    69c0:	4699      	mov	r9, r3
    69c2:	e7ba      	b.n	693a <__aeabi_fmul+0x2e>
    69c4:	002a      	movs	r2, r5
    69c6:	1e51      	subs	r1, r2, #1
    69c8:	418a      	sbcs	r2, r1
    69ca:	1c90      	adds	r0, r2, #2
    69cc:	e7c6      	b.n	695c <__aeabi_fmul+0x50>
    69ce:	2001      	movs	r0, #1
    69d0:	2d00      	cmp	r5, #0
    69d2:	d0c3      	beq.n	695c <__aeabi_fmul+0x50>
    69d4:	0028      	movs	r0, r5
    69d6:	f001 ffc3 	bl	8960 <__clzsi2>
    69da:	1f43      	subs	r3, r0, #5
    69dc:	3076      	adds	r0, #118	; 0x76
    69de:	409d      	lsls	r5, r3
    69e0:	4243      	negs	r3, r0
    69e2:	2000      	movs	r0, #0
    69e4:	e7ba      	b.n	695c <__aeabi_fmul+0x50>
    69e6:	2401      	movs	r4, #1
    69e8:	25ff      	movs	r5, #255	; 0xff
    69ea:	4014      	ands	r4, r2
    69ec:	2600      	movs	r6, #0
    69ee:	e7d6      	b.n	699e <__aeabi_fmul+0x92>
    69f0:	0030      	movs	r0, r6
    69f2:	f001 ffb5 	bl	8960 <__clzsi2>
    69f6:	1f43      	subs	r3, r0, #5
    69f8:	409e      	lsls	r6, r3
    69fa:	2300      	movs	r3, #0
    69fc:	3076      	adds	r0, #118	; 0x76
    69fe:	4247      	negs	r7, r0
    6a00:	469a      	mov	sl, r3
    6a02:	4699      	mov	r9, r3
    6a04:	e799      	b.n	693a <__aeabi_fmul+0x2e>
    6a06:	230c      	movs	r3, #12
    6a08:	469a      	mov	sl, r3
    6a0a:	3b09      	subs	r3, #9
    6a0c:	4699      	mov	r9, r3
    6a0e:	e794      	b.n	693a <__aeabi_fmul+0x2e>
    6a10:	2680      	movs	r6, #128	; 0x80
    6a12:	2400      	movs	r4, #0
    6a14:	03f6      	lsls	r6, r6, #15
    6a16:	25ff      	movs	r5, #255	; 0xff
    6a18:	e7c1      	b.n	699e <__aeabi_fmul+0x92>
    6a1a:	0035      	movs	r5, r6
    6a1c:	4648      	mov	r0, r9
    6a1e:	e7b2      	b.n	6986 <__aeabi_fmul+0x7a>
    6a20:	0035      	movs	r5, r6
    6a22:	0022      	movs	r2, r4
    6a24:	4648      	mov	r0, r9
    6a26:	e7ae      	b.n	6986 <__aeabi_fmul+0x7a>
    6a28:	0429      	lsls	r1, r5, #16
    6a2a:	0c09      	lsrs	r1, r1, #16
    6a2c:	0008      	movs	r0, r1
    6a2e:	0c37      	lsrs	r7, r6, #16
    6a30:	0436      	lsls	r6, r6, #16
    6a32:	0c36      	lsrs	r6, r6, #16
    6a34:	0c2c      	lsrs	r4, r5, #16
    6a36:	4379      	muls	r1, r7
    6a38:	4370      	muls	r0, r6
    6a3a:	4367      	muls	r7, r4
    6a3c:	4374      	muls	r4, r6
    6a3e:	0c06      	lsrs	r6, r0, #16
    6a40:	1864      	adds	r4, r4, r1
    6a42:	1936      	adds	r6, r6, r4
    6a44:	42b1      	cmp	r1, r6
    6a46:	d903      	bls.n	6a50 <__aeabi_fmul+0x144>
    6a48:	2180      	movs	r1, #128	; 0x80
    6a4a:	0249      	lsls	r1, r1, #9
    6a4c:	4688      	mov	r8, r1
    6a4e:	4447      	add	r7, r8
    6a50:	0400      	lsls	r0, r0, #16
    6a52:	0c00      	lsrs	r0, r0, #16
    6a54:	0431      	lsls	r1, r6, #16
    6a56:	1809      	adds	r1, r1, r0
    6a58:	018d      	lsls	r5, r1, #6
    6a5a:	1e68      	subs	r0, r5, #1
    6a5c:	4185      	sbcs	r5, r0
    6a5e:	0e89      	lsrs	r1, r1, #26
    6a60:	4329      	orrs	r1, r5
    6a62:	0c35      	lsrs	r5, r6, #16
    6a64:	19ed      	adds	r5, r5, r7
    6a66:	01ad      	lsls	r5, r5, #6
    6a68:	430d      	orrs	r5, r1
    6a6a:	0129      	lsls	r1, r5, #4
    6a6c:	d504      	bpl.n	6a78 <__aeabi_fmul+0x16c>
    6a6e:	2301      	movs	r3, #1
    6a70:	0869      	lsrs	r1, r5, #1
    6a72:	401d      	ands	r5, r3
    6a74:	4663      	mov	r3, ip
    6a76:	430d      	orrs	r5, r1
    6a78:	0019      	movs	r1, r3
    6a7a:	317f      	adds	r1, #127	; 0x7f
    6a7c:	2900      	cmp	r1, #0
    6a7e:	dd25      	ble.n	6acc <__aeabi_fmul+0x1c0>
    6a80:	0768      	lsls	r0, r5, #29
    6a82:	d004      	beq.n	6a8e <__aeabi_fmul+0x182>
    6a84:	200f      	movs	r0, #15
    6a86:	4028      	ands	r0, r5
    6a88:	2804      	cmp	r0, #4
    6a8a:	d000      	beq.n	6a8e <__aeabi_fmul+0x182>
    6a8c:	3504      	adds	r5, #4
    6a8e:	0128      	lsls	r0, r5, #4
    6a90:	d503      	bpl.n	6a9a <__aeabi_fmul+0x18e>
    6a92:	4927      	ldr	r1, [pc, #156]	; (6b30 <__aeabi_fmul+0x224>)
    6a94:	3380      	adds	r3, #128	; 0x80
    6a96:	400d      	ands	r5, r1
    6a98:	0019      	movs	r1, r3
    6a9a:	29fe      	cmp	r1, #254	; 0xfe
    6a9c:	dca3      	bgt.n	69e6 <__aeabi_fmul+0xda>
    6a9e:	2401      	movs	r4, #1
    6aa0:	01ad      	lsls	r5, r5, #6
    6aa2:	0a6e      	lsrs	r6, r5, #9
    6aa4:	4014      	ands	r4, r2
    6aa6:	b2cd      	uxtb	r5, r1
    6aa8:	e779      	b.n	699e <__aeabi_fmul+0x92>
    6aaa:	2080      	movs	r0, #128	; 0x80
    6aac:	03c0      	lsls	r0, r0, #15
    6aae:	4206      	tst	r6, r0
    6ab0:	d007      	beq.n	6ac2 <__aeabi_fmul+0x1b6>
    6ab2:	4205      	tst	r5, r0
    6ab4:	d105      	bne.n	6ac2 <__aeabi_fmul+0x1b6>
    6ab6:	4328      	orrs	r0, r5
    6ab8:	0246      	lsls	r6, r0, #9
    6aba:	0a76      	lsrs	r6, r6, #9
    6abc:	4644      	mov	r4, r8
    6abe:	25ff      	movs	r5, #255	; 0xff
    6ac0:	e76d      	b.n	699e <__aeabi_fmul+0x92>
    6ac2:	4306      	orrs	r6, r0
    6ac4:	0276      	lsls	r6, r6, #9
    6ac6:	0a76      	lsrs	r6, r6, #9
    6ac8:	25ff      	movs	r5, #255	; 0xff
    6aca:	e768      	b.n	699e <__aeabi_fmul+0x92>
    6acc:	2401      	movs	r4, #1
    6ace:	1a61      	subs	r1, r4, r1
    6ad0:	291b      	cmp	r1, #27
    6ad2:	dd05      	ble.n	6ae0 <__aeabi_fmul+0x1d4>
    6ad4:	4014      	ands	r4, r2
    6ad6:	2500      	movs	r5, #0
    6ad8:	2600      	movs	r6, #0
    6ada:	e760      	b.n	699e <__aeabi_fmul+0x92>
    6adc:	4663      	mov	r3, ip
    6ade:	e7cb      	b.n	6a78 <__aeabi_fmul+0x16c>
    6ae0:	002e      	movs	r6, r5
    6ae2:	2320      	movs	r3, #32
    6ae4:	40ce      	lsrs	r6, r1
    6ae6:	1a59      	subs	r1, r3, r1
    6ae8:	408d      	lsls	r5, r1
    6aea:	1e6b      	subs	r3, r5, #1
    6aec:	419d      	sbcs	r5, r3
    6aee:	432e      	orrs	r6, r5
    6af0:	0773      	lsls	r3, r6, #29
    6af2:	d004      	beq.n	6afe <__aeabi_fmul+0x1f2>
    6af4:	230f      	movs	r3, #15
    6af6:	4033      	ands	r3, r6
    6af8:	2b04      	cmp	r3, #4
    6afa:	d000      	beq.n	6afe <__aeabi_fmul+0x1f2>
    6afc:	3604      	adds	r6, #4
    6afe:	0173      	lsls	r3, r6, #5
    6b00:	d504      	bpl.n	6b0c <__aeabi_fmul+0x200>
    6b02:	2401      	movs	r4, #1
    6b04:	2501      	movs	r5, #1
    6b06:	4014      	ands	r4, r2
    6b08:	2600      	movs	r6, #0
    6b0a:	e748      	b.n	699e <__aeabi_fmul+0x92>
    6b0c:	2401      	movs	r4, #1
    6b0e:	01b6      	lsls	r6, r6, #6
    6b10:	0a76      	lsrs	r6, r6, #9
    6b12:	4014      	ands	r4, r2
    6b14:	2500      	movs	r5, #0
    6b16:	e742      	b.n	699e <__aeabi_fmul+0x92>
    6b18:	2680      	movs	r6, #128	; 0x80
    6b1a:	2401      	movs	r4, #1
    6b1c:	03f6      	lsls	r6, r6, #15
    6b1e:	432e      	orrs	r6, r5
    6b20:	0276      	lsls	r6, r6, #9
    6b22:	0a76      	lsrs	r6, r6, #9
    6b24:	4014      	ands	r4, r2
    6b26:	25ff      	movs	r5, #255	; 0xff
    6b28:	e739      	b.n	699e <__aeabi_fmul+0x92>
    6b2a:	46c0      	nop			; (mov r8, r8)
    6b2c:	00008d78 	.word	0x00008d78
    6b30:	f7ffffff 	.word	0xf7ffffff

00006b34 <__aeabi_i2f>:
    6b34:	b570      	push	{r4, r5, r6, lr}
    6b36:	2800      	cmp	r0, #0
    6b38:	d030      	beq.n	6b9c <__aeabi_i2f+0x68>
    6b3a:	17c3      	asrs	r3, r0, #31
    6b3c:	18c5      	adds	r5, r0, r3
    6b3e:	405d      	eors	r5, r3
    6b40:	0fc4      	lsrs	r4, r0, #31
    6b42:	0028      	movs	r0, r5
    6b44:	f001 ff0c 	bl	8960 <__clzsi2>
    6b48:	239e      	movs	r3, #158	; 0x9e
    6b4a:	1a1b      	subs	r3, r3, r0
    6b4c:	2b96      	cmp	r3, #150	; 0x96
    6b4e:	dc0d      	bgt.n	6b6c <__aeabi_i2f+0x38>
    6b50:	2296      	movs	r2, #150	; 0x96
    6b52:	1ad2      	subs	r2, r2, r3
    6b54:	4095      	lsls	r5, r2
    6b56:	026a      	lsls	r2, r5, #9
    6b58:	0a52      	lsrs	r2, r2, #9
    6b5a:	b2d8      	uxtb	r0, r3
    6b5c:	0252      	lsls	r2, r2, #9
    6b5e:	05c0      	lsls	r0, r0, #23
    6b60:	0a52      	lsrs	r2, r2, #9
    6b62:	07e4      	lsls	r4, r4, #31
    6b64:	4302      	orrs	r2, r0
    6b66:	4322      	orrs	r2, r4
    6b68:	0010      	movs	r0, r2
    6b6a:	bd70      	pop	{r4, r5, r6, pc}
    6b6c:	2b99      	cmp	r3, #153	; 0x99
    6b6e:	dc19      	bgt.n	6ba4 <__aeabi_i2f+0x70>
    6b70:	2299      	movs	r2, #153	; 0x99
    6b72:	1ad2      	subs	r2, r2, r3
    6b74:	4095      	lsls	r5, r2
    6b76:	4a12      	ldr	r2, [pc, #72]	; (6bc0 <__aeabi_i2f+0x8c>)
    6b78:	402a      	ands	r2, r5
    6b7a:	0769      	lsls	r1, r5, #29
    6b7c:	d004      	beq.n	6b88 <__aeabi_i2f+0x54>
    6b7e:	210f      	movs	r1, #15
    6b80:	400d      	ands	r5, r1
    6b82:	2d04      	cmp	r5, #4
    6b84:	d000      	beq.n	6b88 <__aeabi_i2f+0x54>
    6b86:	3204      	adds	r2, #4
    6b88:	0151      	lsls	r1, r2, #5
    6b8a:	d503      	bpl.n	6b94 <__aeabi_i2f+0x60>
    6b8c:	4b0c      	ldr	r3, [pc, #48]	; (6bc0 <__aeabi_i2f+0x8c>)
    6b8e:	401a      	ands	r2, r3
    6b90:	239f      	movs	r3, #159	; 0x9f
    6b92:	1a1b      	subs	r3, r3, r0
    6b94:	0192      	lsls	r2, r2, #6
    6b96:	0a52      	lsrs	r2, r2, #9
    6b98:	b2d8      	uxtb	r0, r3
    6b9a:	e7df      	b.n	6b5c <__aeabi_i2f+0x28>
    6b9c:	2400      	movs	r4, #0
    6b9e:	2000      	movs	r0, #0
    6ba0:	2200      	movs	r2, #0
    6ba2:	e7db      	b.n	6b5c <__aeabi_i2f+0x28>
    6ba4:	2205      	movs	r2, #5
    6ba6:	002e      	movs	r6, r5
    6ba8:	1a12      	subs	r2, r2, r0
    6baa:	21b9      	movs	r1, #185	; 0xb9
    6bac:	40d6      	lsrs	r6, r2
    6bae:	002a      	movs	r2, r5
    6bb0:	1ac9      	subs	r1, r1, r3
    6bb2:	408a      	lsls	r2, r1
    6bb4:	1e55      	subs	r5, r2, #1
    6bb6:	41aa      	sbcs	r2, r5
    6bb8:	0035      	movs	r5, r6
    6bba:	4315      	orrs	r5, r2
    6bbc:	e7db      	b.n	6b76 <__aeabi_i2f+0x42>
    6bbe:	46c0      	nop			; (mov r8, r8)
    6bc0:	fbffffff 	.word	0xfbffffff

00006bc4 <__aeabi_dadd>:
    6bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6bc6:	4656      	mov	r6, sl
    6bc8:	465f      	mov	r7, fp
    6bca:	464d      	mov	r5, r9
    6bcc:	4644      	mov	r4, r8
    6bce:	b4f0      	push	{r4, r5, r6, r7}
    6bd0:	000f      	movs	r7, r1
    6bd2:	0ffd      	lsrs	r5, r7, #31
    6bd4:	46aa      	mov	sl, r5
    6bd6:	0309      	lsls	r1, r1, #12
    6bd8:	007c      	lsls	r4, r7, #1
    6bda:	002e      	movs	r6, r5
    6bdc:	005f      	lsls	r7, r3, #1
    6bde:	0f45      	lsrs	r5, r0, #29
    6be0:	0a49      	lsrs	r1, r1, #9
    6be2:	0d7f      	lsrs	r7, r7, #21
    6be4:	4329      	orrs	r1, r5
    6be6:	00c5      	lsls	r5, r0, #3
    6be8:	0318      	lsls	r0, r3, #12
    6bea:	46bc      	mov	ip, r7
    6bec:	0a40      	lsrs	r0, r0, #9
    6bee:	0f57      	lsrs	r7, r2, #29
    6bf0:	0d64      	lsrs	r4, r4, #21
    6bf2:	0fdb      	lsrs	r3, r3, #31
    6bf4:	4338      	orrs	r0, r7
    6bf6:	00d2      	lsls	r2, r2, #3
    6bf8:	459a      	cmp	sl, r3
    6bfa:	d100      	bne.n	6bfe <__aeabi_dadd+0x3a>
    6bfc:	e0aa      	b.n	6d54 <__aeabi_dadd+0x190>
    6bfe:	4666      	mov	r6, ip
    6c00:	1ba6      	subs	r6, r4, r6
    6c02:	2e00      	cmp	r6, #0
    6c04:	dc00      	bgt.n	6c08 <__aeabi_dadd+0x44>
    6c06:	e0ff      	b.n	6e08 <__aeabi_dadd+0x244>
    6c08:	4663      	mov	r3, ip
    6c0a:	2b00      	cmp	r3, #0
    6c0c:	d139      	bne.n	6c82 <__aeabi_dadd+0xbe>
    6c0e:	0003      	movs	r3, r0
    6c10:	4313      	orrs	r3, r2
    6c12:	d000      	beq.n	6c16 <__aeabi_dadd+0x52>
    6c14:	e0d9      	b.n	6dca <__aeabi_dadd+0x206>
    6c16:	076b      	lsls	r3, r5, #29
    6c18:	d009      	beq.n	6c2e <__aeabi_dadd+0x6a>
    6c1a:	230f      	movs	r3, #15
    6c1c:	402b      	ands	r3, r5
    6c1e:	2b04      	cmp	r3, #4
    6c20:	d005      	beq.n	6c2e <__aeabi_dadd+0x6a>
    6c22:	1d2b      	adds	r3, r5, #4
    6c24:	42ab      	cmp	r3, r5
    6c26:	41ad      	sbcs	r5, r5
    6c28:	426d      	negs	r5, r5
    6c2a:	1949      	adds	r1, r1, r5
    6c2c:	001d      	movs	r5, r3
    6c2e:	020b      	lsls	r3, r1, #8
    6c30:	d400      	bmi.n	6c34 <__aeabi_dadd+0x70>
    6c32:	e082      	b.n	6d3a <__aeabi_dadd+0x176>
    6c34:	4bca      	ldr	r3, [pc, #808]	; (6f60 <__aeabi_dadd+0x39c>)
    6c36:	3401      	adds	r4, #1
    6c38:	429c      	cmp	r4, r3
    6c3a:	d100      	bne.n	6c3e <__aeabi_dadd+0x7a>
    6c3c:	e0fe      	b.n	6e3c <__aeabi_dadd+0x278>
    6c3e:	000a      	movs	r2, r1
    6c40:	4656      	mov	r6, sl
    6c42:	4bc8      	ldr	r3, [pc, #800]	; (6f64 <__aeabi_dadd+0x3a0>)
    6c44:	08ed      	lsrs	r5, r5, #3
    6c46:	401a      	ands	r2, r3
    6c48:	0750      	lsls	r0, r2, #29
    6c4a:	0564      	lsls	r4, r4, #21
    6c4c:	0252      	lsls	r2, r2, #9
    6c4e:	4305      	orrs	r5, r0
    6c50:	0b12      	lsrs	r2, r2, #12
    6c52:	0d64      	lsrs	r4, r4, #21
    6c54:	2100      	movs	r1, #0
    6c56:	0312      	lsls	r2, r2, #12
    6c58:	0d0b      	lsrs	r3, r1, #20
    6c5a:	051b      	lsls	r3, r3, #20
    6c5c:	0564      	lsls	r4, r4, #21
    6c5e:	0b12      	lsrs	r2, r2, #12
    6c60:	431a      	orrs	r2, r3
    6c62:	0863      	lsrs	r3, r4, #1
    6c64:	4cc0      	ldr	r4, [pc, #768]	; (6f68 <__aeabi_dadd+0x3a4>)
    6c66:	07f6      	lsls	r6, r6, #31
    6c68:	4014      	ands	r4, r2
    6c6a:	431c      	orrs	r4, r3
    6c6c:	0064      	lsls	r4, r4, #1
    6c6e:	0864      	lsrs	r4, r4, #1
    6c70:	4334      	orrs	r4, r6
    6c72:	0028      	movs	r0, r5
    6c74:	0021      	movs	r1, r4
    6c76:	bc3c      	pop	{r2, r3, r4, r5}
    6c78:	4690      	mov	r8, r2
    6c7a:	4699      	mov	r9, r3
    6c7c:	46a2      	mov	sl, r4
    6c7e:	46ab      	mov	fp, r5
    6c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c82:	4bb7      	ldr	r3, [pc, #732]	; (6f60 <__aeabi_dadd+0x39c>)
    6c84:	429c      	cmp	r4, r3
    6c86:	d0c6      	beq.n	6c16 <__aeabi_dadd+0x52>
    6c88:	2380      	movs	r3, #128	; 0x80
    6c8a:	041b      	lsls	r3, r3, #16
    6c8c:	4318      	orrs	r0, r3
    6c8e:	2e38      	cmp	r6, #56	; 0x38
    6c90:	dd00      	ble.n	6c94 <__aeabi_dadd+0xd0>
    6c92:	e0eb      	b.n	6e6c <__aeabi_dadd+0x2a8>
    6c94:	2e1f      	cmp	r6, #31
    6c96:	dd00      	ble.n	6c9a <__aeabi_dadd+0xd6>
    6c98:	e11e      	b.n	6ed8 <__aeabi_dadd+0x314>
    6c9a:	2320      	movs	r3, #32
    6c9c:	1b9b      	subs	r3, r3, r6
    6c9e:	469c      	mov	ip, r3
    6ca0:	0003      	movs	r3, r0
    6ca2:	4667      	mov	r7, ip
    6ca4:	40bb      	lsls	r3, r7
    6ca6:	4698      	mov	r8, r3
    6ca8:	0013      	movs	r3, r2
    6caa:	4647      	mov	r7, r8
    6cac:	40f3      	lsrs	r3, r6
    6cae:	433b      	orrs	r3, r7
    6cb0:	4667      	mov	r7, ip
    6cb2:	40ba      	lsls	r2, r7
    6cb4:	1e57      	subs	r7, r2, #1
    6cb6:	41ba      	sbcs	r2, r7
    6cb8:	4313      	orrs	r3, r2
    6cba:	0002      	movs	r2, r0
    6cbc:	40f2      	lsrs	r2, r6
    6cbe:	1aeb      	subs	r3, r5, r3
    6cc0:	429d      	cmp	r5, r3
    6cc2:	41b6      	sbcs	r6, r6
    6cc4:	001d      	movs	r5, r3
    6cc6:	1a8a      	subs	r2, r1, r2
    6cc8:	4276      	negs	r6, r6
    6cca:	1b91      	subs	r1, r2, r6
    6ccc:	020b      	lsls	r3, r1, #8
    6cce:	d531      	bpl.n	6d34 <__aeabi_dadd+0x170>
    6cd0:	024a      	lsls	r2, r1, #9
    6cd2:	0a56      	lsrs	r6, r2, #9
    6cd4:	2e00      	cmp	r6, #0
    6cd6:	d100      	bne.n	6cda <__aeabi_dadd+0x116>
    6cd8:	e0b4      	b.n	6e44 <__aeabi_dadd+0x280>
    6cda:	0030      	movs	r0, r6
    6cdc:	f001 fe40 	bl	8960 <__clzsi2>
    6ce0:	0003      	movs	r3, r0
    6ce2:	3b08      	subs	r3, #8
    6ce4:	2b1f      	cmp	r3, #31
    6ce6:	dd00      	ble.n	6cea <__aeabi_dadd+0x126>
    6ce8:	e0b5      	b.n	6e56 <__aeabi_dadd+0x292>
    6cea:	2220      	movs	r2, #32
    6cec:	0029      	movs	r1, r5
    6cee:	1ad2      	subs	r2, r2, r3
    6cf0:	40d1      	lsrs	r1, r2
    6cf2:	409e      	lsls	r6, r3
    6cf4:	000a      	movs	r2, r1
    6cf6:	409d      	lsls	r5, r3
    6cf8:	4332      	orrs	r2, r6
    6cfa:	429c      	cmp	r4, r3
    6cfc:	dd00      	ble.n	6d00 <__aeabi_dadd+0x13c>
    6cfe:	e0b1      	b.n	6e64 <__aeabi_dadd+0x2a0>
    6d00:	1b1c      	subs	r4, r3, r4
    6d02:	1c63      	adds	r3, r4, #1
    6d04:	2b1f      	cmp	r3, #31
    6d06:	dd00      	ble.n	6d0a <__aeabi_dadd+0x146>
    6d08:	e0d5      	b.n	6eb6 <__aeabi_dadd+0x2f2>
    6d0a:	2120      	movs	r1, #32
    6d0c:	0014      	movs	r4, r2
    6d0e:	0028      	movs	r0, r5
    6d10:	1ac9      	subs	r1, r1, r3
    6d12:	408c      	lsls	r4, r1
    6d14:	40d8      	lsrs	r0, r3
    6d16:	408d      	lsls	r5, r1
    6d18:	4304      	orrs	r4, r0
    6d1a:	40da      	lsrs	r2, r3
    6d1c:	1e68      	subs	r0, r5, #1
    6d1e:	4185      	sbcs	r5, r0
    6d20:	0011      	movs	r1, r2
    6d22:	4325      	orrs	r5, r4
    6d24:	2400      	movs	r4, #0
    6d26:	e776      	b.n	6c16 <__aeabi_dadd+0x52>
    6d28:	4641      	mov	r1, r8
    6d2a:	4331      	orrs	r1, r6
    6d2c:	d100      	bne.n	6d30 <__aeabi_dadd+0x16c>
    6d2e:	e234      	b.n	719a <__aeabi_dadd+0x5d6>
    6d30:	0031      	movs	r1, r6
    6d32:	4645      	mov	r5, r8
    6d34:	076b      	lsls	r3, r5, #29
    6d36:	d000      	beq.n	6d3a <__aeabi_dadd+0x176>
    6d38:	e76f      	b.n	6c1a <__aeabi_dadd+0x56>
    6d3a:	4656      	mov	r6, sl
    6d3c:	0748      	lsls	r0, r1, #29
    6d3e:	08ed      	lsrs	r5, r5, #3
    6d40:	08c9      	lsrs	r1, r1, #3
    6d42:	4305      	orrs	r5, r0
    6d44:	4b86      	ldr	r3, [pc, #536]	; (6f60 <__aeabi_dadd+0x39c>)
    6d46:	429c      	cmp	r4, r3
    6d48:	d035      	beq.n	6db6 <__aeabi_dadd+0x1f2>
    6d4a:	030a      	lsls	r2, r1, #12
    6d4c:	0564      	lsls	r4, r4, #21
    6d4e:	0b12      	lsrs	r2, r2, #12
    6d50:	0d64      	lsrs	r4, r4, #21
    6d52:	e77f      	b.n	6c54 <__aeabi_dadd+0x90>
    6d54:	4663      	mov	r3, ip
    6d56:	1ae3      	subs	r3, r4, r3
    6d58:	469b      	mov	fp, r3
    6d5a:	2b00      	cmp	r3, #0
    6d5c:	dc00      	bgt.n	6d60 <__aeabi_dadd+0x19c>
    6d5e:	e08b      	b.n	6e78 <__aeabi_dadd+0x2b4>
    6d60:	4667      	mov	r7, ip
    6d62:	2f00      	cmp	r7, #0
    6d64:	d03c      	beq.n	6de0 <__aeabi_dadd+0x21c>
    6d66:	4f7e      	ldr	r7, [pc, #504]	; (6f60 <__aeabi_dadd+0x39c>)
    6d68:	42bc      	cmp	r4, r7
    6d6a:	d100      	bne.n	6d6e <__aeabi_dadd+0x1aa>
    6d6c:	e753      	b.n	6c16 <__aeabi_dadd+0x52>
    6d6e:	2780      	movs	r7, #128	; 0x80
    6d70:	043f      	lsls	r7, r7, #16
    6d72:	4338      	orrs	r0, r7
    6d74:	465b      	mov	r3, fp
    6d76:	2b38      	cmp	r3, #56	; 0x38
    6d78:	dc00      	bgt.n	6d7c <__aeabi_dadd+0x1b8>
    6d7a:	e0f7      	b.n	6f6c <__aeabi_dadd+0x3a8>
    6d7c:	4302      	orrs	r2, r0
    6d7e:	1e50      	subs	r0, r2, #1
    6d80:	4182      	sbcs	r2, r0
    6d82:	2000      	movs	r0, #0
    6d84:	b2d2      	uxtb	r2, r2
    6d86:	1953      	adds	r3, r2, r5
    6d88:	1842      	adds	r2, r0, r1
    6d8a:	42ab      	cmp	r3, r5
    6d8c:	4189      	sbcs	r1, r1
    6d8e:	001d      	movs	r5, r3
    6d90:	4249      	negs	r1, r1
    6d92:	1889      	adds	r1, r1, r2
    6d94:	020b      	lsls	r3, r1, #8
    6d96:	d5cd      	bpl.n	6d34 <__aeabi_dadd+0x170>
    6d98:	4b71      	ldr	r3, [pc, #452]	; (6f60 <__aeabi_dadd+0x39c>)
    6d9a:	3401      	adds	r4, #1
    6d9c:	429c      	cmp	r4, r3
    6d9e:	d100      	bne.n	6da2 <__aeabi_dadd+0x1de>
    6da0:	e13d      	b.n	701e <__aeabi_dadd+0x45a>
    6da2:	2001      	movs	r0, #1
    6da4:	4a6f      	ldr	r2, [pc, #444]	; (6f64 <__aeabi_dadd+0x3a0>)
    6da6:	086b      	lsrs	r3, r5, #1
    6da8:	400a      	ands	r2, r1
    6daa:	4028      	ands	r0, r5
    6dac:	4318      	orrs	r0, r3
    6dae:	07d5      	lsls	r5, r2, #31
    6db0:	4305      	orrs	r5, r0
    6db2:	0851      	lsrs	r1, r2, #1
    6db4:	e72f      	b.n	6c16 <__aeabi_dadd+0x52>
    6db6:	002b      	movs	r3, r5
    6db8:	430b      	orrs	r3, r1
    6dba:	d100      	bne.n	6dbe <__aeabi_dadd+0x1fa>
    6dbc:	e1cb      	b.n	7156 <__aeabi_dadd+0x592>
    6dbe:	2380      	movs	r3, #128	; 0x80
    6dc0:	031b      	lsls	r3, r3, #12
    6dc2:	430b      	orrs	r3, r1
    6dc4:	031a      	lsls	r2, r3, #12
    6dc6:	0b12      	lsrs	r2, r2, #12
    6dc8:	e744      	b.n	6c54 <__aeabi_dadd+0x90>
    6dca:	3e01      	subs	r6, #1
    6dcc:	2e00      	cmp	r6, #0
    6dce:	d16d      	bne.n	6eac <__aeabi_dadd+0x2e8>
    6dd0:	1aae      	subs	r6, r5, r2
    6dd2:	42b5      	cmp	r5, r6
    6dd4:	419b      	sbcs	r3, r3
    6dd6:	1a09      	subs	r1, r1, r0
    6dd8:	425b      	negs	r3, r3
    6dda:	1ac9      	subs	r1, r1, r3
    6ddc:	0035      	movs	r5, r6
    6dde:	e775      	b.n	6ccc <__aeabi_dadd+0x108>
    6de0:	0007      	movs	r7, r0
    6de2:	4317      	orrs	r7, r2
    6de4:	d100      	bne.n	6de8 <__aeabi_dadd+0x224>
    6de6:	e716      	b.n	6c16 <__aeabi_dadd+0x52>
    6de8:	2301      	movs	r3, #1
    6dea:	425b      	negs	r3, r3
    6dec:	469c      	mov	ip, r3
    6dee:	44e3      	add	fp, ip
    6df0:	465b      	mov	r3, fp
    6df2:	2b00      	cmp	r3, #0
    6df4:	d000      	beq.n	6df8 <__aeabi_dadd+0x234>
    6df6:	e0e0      	b.n	6fba <__aeabi_dadd+0x3f6>
    6df8:	18aa      	adds	r2, r5, r2
    6dfa:	42aa      	cmp	r2, r5
    6dfc:	419b      	sbcs	r3, r3
    6dfe:	1809      	adds	r1, r1, r0
    6e00:	425b      	negs	r3, r3
    6e02:	1859      	adds	r1, r3, r1
    6e04:	0015      	movs	r5, r2
    6e06:	e7c5      	b.n	6d94 <__aeabi_dadd+0x1d0>
    6e08:	2e00      	cmp	r6, #0
    6e0a:	d175      	bne.n	6ef8 <__aeabi_dadd+0x334>
    6e0c:	1c66      	adds	r6, r4, #1
    6e0e:	0576      	lsls	r6, r6, #21
    6e10:	0d76      	lsrs	r6, r6, #21
    6e12:	2e01      	cmp	r6, #1
    6e14:	dc00      	bgt.n	6e18 <__aeabi_dadd+0x254>
    6e16:	e0f3      	b.n	7000 <__aeabi_dadd+0x43c>
    6e18:	1aae      	subs	r6, r5, r2
    6e1a:	46b0      	mov	r8, r6
    6e1c:	4545      	cmp	r5, r8
    6e1e:	41bf      	sbcs	r7, r7
    6e20:	1a0e      	subs	r6, r1, r0
    6e22:	427f      	negs	r7, r7
    6e24:	1bf6      	subs	r6, r6, r7
    6e26:	0237      	lsls	r7, r6, #8
    6e28:	d400      	bmi.n	6e2c <__aeabi_dadd+0x268>
    6e2a:	e08f      	b.n	6f4c <__aeabi_dadd+0x388>
    6e2c:	1b55      	subs	r5, r2, r5
    6e2e:	42aa      	cmp	r2, r5
    6e30:	41b6      	sbcs	r6, r6
    6e32:	1a41      	subs	r1, r0, r1
    6e34:	4276      	negs	r6, r6
    6e36:	1b8e      	subs	r6, r1, r6
    6e38:	469a      	mov	sl, r3
    6e3a:	e74b      	b.n	6cd4 <__aeabi_dadd+0x110>
    6e3c:	4656      	mov	r6, sl
    6e3e:	2200      	movs	r2, #0
    6e40:	2500      	movs	r5, #0
    6e42:	e707      	b.n	6c54 <__aeabi_dadd+0x90>
    6e44:	0028      	movs	r0, r5
    6e46:	f001 fd8b 	bl	8960 <__clzsi2>
    6e4a:	3020      	adds	r0, #32
    6e4c:	0003      	movs	r3, r0
    6e4e:	3b08      	subs	r3, #8
    6e50:	2b1f      	cmp	r3, #31
    6e52:	dc00      	bgt.n	6e56 <__aeabi_dadd+0x292>
    6e54:	e749      	b.n	6cea <__aeabi_dadd+0x126>
    6e56:	002a      	movs	r2, r5
    6e58:	3828      	subs	r0, #40	; 0x28
    6e5a:	4082      	lsls	r2, r0
    6e5c:	2500      	movs	r5, #0
    6e5e:	429c      	cmp	r4, r3
    6e60:	dc00      	bgt.n	6e64 <__aeabi_dadd+0x2a0>
    6e62:	e74d      	b.n	6d00 <__aeabi_dadd+0x13c>
    6e64:	493f      	ldr	r1, [pc, #252]	; (6f64 <__aeabi_dadd+0x3a0>)
    6e66:	1ae4      	subs	r4, r4, r3
    6e68:	4011      	ands	r1, r2
    6e6a:	e6d4      	b.n	6c16 <__aeabi_dadd+0x52>
    6e6c:	4302      	orrs	r2, r0
    6e6e:	1e50      	subs	r0, r2, #1
    6e70:	4182      	sbcs	r2, r0
    6e72:	b2d3      	uxtb	r3, r2
    6e74:	2200      	movs	r2, #0
    6e76:	e722      	b.n	6cbe <__aeabi_dadd+0xfa>
    6e78:	2b00      	cmp	r3, #0
    6e7a:	d000      	beq.n	6e7e <__aeabi_dadd+0x2ba>
    6e7c:	e0f3      	b.n	7066 <__aeabi_dadd+0x4a2>
    6e7e:	1c63      	adds	r3, r4, #1
    6e80:	469c      	mov	ip, r3
    6e82:	055b      	lsls	r3, r3, #21
    6e84:	0d5b      	lsrs	r3, r3, #21
    6e86:	2b01      	cmp	r3, #1
    6e88:	dc00      	bgt.n	6e8c <__aeabi_dadd+0x2c8>
    6e8a:	e09f      	b.n	6fcc <__aeabi_dadd+0x408>
    6e8c:	4b34      	ldr	r3, [pc, #208]	; (6f60 <__aeabi_dadd+0x39c>)
    6e8e:	459c      	cmp	ip, r3
    6e90:	d100      	bne.n	6e94 <__aeabi_dadd+0x2d0>
    6e92:	e0c3      	b.n	701c <__aeabi_dadd+0x458>
    6e94:	18aa      	adds	r2, r5, r2
    6e96:	1809      	adds	r1, r1, r0
    6e98:	42aa      	cmp	r2, r5
    6e9a:	4180      	sbcs	r0, r0
    6e9c:	4240      	negs	r0, r0
    6e9e:	1841      	adds	r1, r0, r1
    6ea0:	07cd      	lsls	r5, r1, #31
    6ea2:	0852      	lsrs	r2, r2, #1
    6ea4:	4315      	orrs	r5, r2
    6ea6:	0849      	lsrs	r1, r1, #1
    6ea8:	4664      	mov	r4, ip
    6eaa:	e6b4      	b.n	6c16 <__aeabi_dadd+0x52>
    6eac:	4b2c      	ldr	r3, [pc, #176]	; (6f60 <__aeabi_dadd+0x39c>)
    6eae:	429c      	cmp	r4, r3
    6eb0:	d000      	beq.n	6eb4 <__aeabi_dadd+0x2f0>
    6eb2:	e6ec      	b.n	6c8e <__aeabi_dadd+0xca>
    6eb4:	e6af      	b.n	6c16 <__aeabi_dadd+0x52>
    6eb6:	0011      	movs	r1, r2
    6eb8:	3c1f      	subs	r4, #31
    6eba:	40e1      	lsrs	r1, r4
    6ebc:	000c      	movs	r4, r1
    6ebe:	2b20      	cmp	r3, #32
    6ec0:	d100      	bne.n	6ec4 <__aeabi_dadd+0x300>
    6ec2:	e07f      	b.n	6fc4 <__aeabi_dadd+0x400>
    6ec4:	2140      	movs	r1, #64	; 0x40
    6ec6:	1acb      	subs	r3, r1, r3
    6ec8:	409a      	lsls	r2, r3
    6eca:	4315      	orrs	r5, r2
    6ecc:	1e6a      	subs	r2, r5, #1
    6ece:	4195      	sbcs	r5, r2
    6ed0:	2100      	movs	r1, #0
    6ed2:	4325      	orrs	r5, r4
    6ed4:	2400      	movs	r4, #0
    6ed6:	e72d      	b.n	6d34 <__aeabi_dadd+0x170>
    6ed8:	0033      	movs	r3, r6
    6eda:	0007      	movs	r7, r0
    6edc:	3b20      	subs	r3, #32
    6ede:	40df      	lsrs	r7, r3
    6ee0:	003b      	movs	r3, r7
    6ee2:	2e20      	cmp	r6, #32
    6ee4:	d070      	beq.n	6fc8 <__aeabi_dadd+0x404>
    6ee6:	2740      	movs	r7, #64	; 0x40
    6ee8:	1bbe      	subs	r6, r7, r6
    6eea:	40b0      	lsls	r0, r6
    6eec:	4302      	orrs	r2, r0
    6eee:	1e50      	subs	r0, r2, #1
    6ef0:	4182      	sbcs	r2, r0
    6ef2:	4313      	orrs	r3, r2
    6ef4:	2200      	movs	r2, #0
    6ef6:	e6e2      	b.n	6cbe <__aeabi_dadd+0xfa>
    6ef8:	2c00      	cmp	r4, #0
    6efa:	d04f      	beq.n	6f9c <__aeabi_dadd+0x3d8>
    6efc:	4c18      	ldr	r4, [pc, #96]	; (6f60 <__aeabi_dadd+0x39c>)
    6efe:	45a4      	cmp	ip, r4
    6f00:	d100      	bne.n	6f04 <__aeabi_dadd+0x340>
    6f02:	e0ab      	b.n	705c <__aeabi_dadd+0x498>
    6f04:	2480      	movs	r4, #128	; 0x80
    6f06:	0424      	lsls	r4, r4, #16
    6f08:	4276      	negs	r6, r6
    6f0a:	4321      	orrs	r1, r4
    6f0c:	2e38      	cmp	r6, #56	; 0x38
    6f0e:	dd00      	ble.n	6f12 <__aeabi_dadd+0x34e>
    6f10:	e0df      	b.n	70d2 <__aeabi_dadd+0x50e>
    6f12:	2e1f      	cmp	r6, #31
    6f14:	dd00      	ble.n	6f18 <__aeabi_dadd+0x354>
    6f16:	e143      	b.n	71a0 <__aeabi_dadd+0x5dc>
    6f18:	2720      	movs	r7, #32
    6f1a:	1bbc      	subs	r4, r7, r6
    6f1c:	46a1      	mov	r9, r4
    6f1e:	000c      	movs	r4, r1
    6f20:	464f      	mov	r7, r9
    6f22:	40bc      	lsls	r4, r7
    6f24:	46a0      	mov	r8, r4
    6f26:	002c      	movs	r4, r5
    6f28:	4647      	mov	r7, r8
    6f2a:	40f4      	lsrs	r4, r6
    6f2c:	433c      	orrs	r4, r7
    6f2e:	464f      	mov	r7, r9
    6f30:	40bd      	lsls	r5, r7
    6f32:	1e6f      	subs	r7, r5, #1
    6f34:	41bd      	sbcs	r5, r7
    6f36:	40f1      	lsrs	r1, r6
    6f38:	432c      	orrs	r4, r5
    6f3a:	1b15      	subs	r5, r2, r4
    6f3c:	42aa      	cmp	r2, r5
    6f3e:	4192      	sbcs	r2, r2
    6f40:	1a41      	subs	r1, r0, r1
    6f42:	4252      	negs	r2, r2
    6f44:	1a89      	subs	r1, r1, r2
    6f46:	4664      	mov	r4, ip
    6f48:	469a      	mov	sl, r3
    6f4a:	e6bf      	b.n	6ccc <__aeabi_dadd+0x108>
    6f4c:	4641      	mov	r1, r8
    6f4e:	4645      	mov	r5, r8
    6f50:	4331      	orrs	r1, r6
    6f52:	d000      	beq.n	6f56 <__aeabi_dadd+0x392>
    6f54:	e6be      	b.n	6cd4 <__aeabi_dadd+0x110>
    6f56:	2600      	movs	r6, #0
    6f58:	2400      	movs	r4, #0
    6f5a:	2500      	movs	r5, #0
    6f5c:	e6f2      	b.n	6d44 <__aeabi_dadd+0x180>
    6f5e:	46c0      	nop			; (mov r8, r8)
    6f60:	000007ff 	.word	0x000007ff
    6f64:	ff7fffff 	.word	0xff7fffff
    6f68:	800fffff 	.word	0x800fffff
    6f6c:	2b1f      	cmp	r3, #31
    6f6e:	dc59      	bgt.n	7024 <__aeabi_dadd+0x460>
    6f70:	2720      	movs	r7, #32
    6f72:	1aff      	subs	r7, r7, r3
    6f74:	46bc      	mov	ip, r7
    6f76:	0007      	movs	r7, r0
    6f78:	4663      	mov	r3, ip
    6f7a:	409f      	lsls	r7, r3
    6f7c:	465b      	mov	r3, fp
    6f7e:	46b9      	mov	r9, r7
    6f80:	0017      	movs	r7, r2
    6f82:	40df      	lsrs	r7, r3
    6f84:	46b8      	mov	r8, r7
    6f86:	464f      	mov	r7, r9
    6f88:	4643      	mov	r3, r8
    6f8a:	431f      	orrs	r7, r3
    6f8c:	4663      	mov	r3, ip
    6f8e:	409a      	lsls	r2, r3
    6f90:	1e53      	subs	r3, r2, #1
    6f92:	419a      	sbcs	r2, r3
    6f94:	465b      	mov	r3, fp
    6f96:	433a      	orrs	r2, r7
    6f98:	40d8      	lsrs	r0, r3
    6f9a:	e6f4      	b.n	6d86 <__aeabi_dadd+0x1c2>
    6f9c:	000c      	movs	r4, r1
    6f9e:	432c      	orrs	r4, r5
    6fa0:	d05c      	beq.n	705c <__aeabi_dadd+0x498>
    6fa2:	43f6      	mvns	r6, r6
    6fa4:	2e00      	cmp	r6, #0
    6fa6:	d155      	bne.n	7054 <__aeabi_dadd+0x490>
    6fa8:	1b55      	subs	r5, r2, r5
    6faa:	42aa      	cmp	r2, r5
    6fac:	41a4      	sbcs	r4, r4
    6fae:	1a41      	subs	r1, r0, r1
    6fb0:	4264      	negs	r4, r4
    6fb2:	1b09      	subs	r1, r1, r4
    6fb4:	469a      	mov	sl, r3
    6fb6:	4664      	mov	r4, ip
    6fb8:	e688      	b.n	6ccc <__aeabi_dadd+0x108>
    6fba:	4f96      	ldr	r7, [pc, #600]	; (7214 <__aeabi_dadd+0x650>)
    6fbc:	42bc      	cmp	r4, r7
    6fbe:	d000      	beq.n	6fc2 <__aeabi_dadd+0x3fe>
    6fc0:	e6d8      	b.n	6d74 <__aeabi_dadd+0x1b0>
    6fc2:	e628      	b.n	6c16 <__aeabi_dadd+0x52>
    6fc4:	2200      	movs	r2, #0
    6fc6:	e780      	b.n	6eca <__aeabi_dadd+0x306>
    6fc8:	2000      	movs	r0, #0
    6fca:	e78f      	b.n	6eec <__aeabi_dadd+0x328>
    6fcc:	000b      	movs	r3, r1
    6fce:	432b      	orrs	r3, r5
    6fd0:	2c00      	cmp	r4, #0
    6fd2:	d000      	beq.n	6fd6 <__aeabi_dadd+0x412>
    6fd4:	e0c2      	b.n	715c <__aeabi_dadd+0x598>
    6fd6:	2b00      	cmp	r3, #0
    6fd8:	d100      	bne.n	6fdc <__aeabi_dadd+0x418>
    6fda:	e101      	b.n	71e0 <__aeabi_dadd+0x61c>
    6fdc:	0003      	movs	r3, r0
    6fde:	4313      	orrs	r3, r2
    6fe0:	d100      	bne.n	6fe4 <__aeabi_dadd+0x420>
    6fe2:	e618      	b.n	6c16 <__aeabi_dadd+0x52>
    6fe4:	18ab      	adds	r3, r5, r2
    6fe6:	42ab      	cmp	r3, r5
    6fe8:	41b6      	sbcs	r6, r6
    6fea:	1809      	adds	r1, r1, r0
    6fec:	4276      	negs	r6, r6
    6fee:	1871      	adds	r1, r6, r1
    6ff0:	020a      	lsls	r2, r1, #8
    6ff2:	d400      	bmi.n	6ff6 <__aeabi_dadd+0x432>
    6ff4:	e109      	b.n	720a <__aeabi_dadd+0x646>
    6ff6:	4a88      	ldr	r2, [pc, #544]	; (7218 <__aeabi_dadd+0x654>)
    6ff8:	001d      	movs	r5, r3
    6ffa:	4011      	ands	r1, r2
    6ffc:	4664      	mov	r4, ip
    6ffe:	e60a      	b.n	6c16 <__aeabi_dadd+0x52>
    7000:	2c00      	cmp	r4, #0
    7002:	d15b      	bne.n	70bc <__aeabi_dadd+0x4f8>
    7004:	000e      	movs	r6, r1
    7006:	432e      	orrs	r6, r5
    7008:	d000      	beq.n	700c <__aeabi_dadd+0x448>
    700a:	e08a      	b.n	7122 <__aeabi_dadd+0x55e>
    700c:	0001      	movs	r1, r0
    700e:	4311      	orrs	r1, r2
    7010:	d100      	bne.n	7014 <__aeabi_dadd+0x450>
    7012:	e0c2      	b.n	719a <__aeabi_dadd+0x5d6>
    7014:	0001      	movs	r1, r0
    7016:	0015      	movs	r5, r2
    7018:	469a      	mov	sl, r3
    701a:	e5fc      	b.n	6c16 <__aeabi_dadd+0x52>
    701c:	4664      	mov	r4, ip
    701e:	2100      	movs	r1, #0
    7020:	2500      	movs	r5, #0
    7022:	e68f      	b.n	6d44 <__aeabi_dadd+0x180>
    7024:	2320      	movs	r3, #32
    7026:	425b      	negs	r3, r3
    7028:	469c      	mov	ip, r3
    702a:	44dc      	add	ip, fp
    702c:	4663      	mov	r3, ip
    702e:	0007      	movs	r7, r0
    7030:	40df      	lsrs	r7, r3
    7032:	465b      	mov	r3, fp
    7034:	46bc      	mov	ip, r7
    7036:	2b20      	cmp	r3, #32
    7038:	d100      	bne.n	703c <__aeabi_dadd+0x478>
    703a:	e0ac      	b.n	7196 <__aeabi_dadd+0x5d2>
    703c:	2340      	movs	r3, #64	; 0x40
    703e:	465f      	mov	r7, fp
    7040:	1bdb      	subs	r3, r3, r7
    7042:	4098      	lsls	r0, r3
    7044:	4302      	orrs	r2, r0
    7046:	1e50      	subs	r0, r2, #1
    7048:	4182      	sbcs	r2, r0
    704a:	4663      	mov	r3, ip
    704c:	4313      	orrs	r3, r2
    704e:	001a      	movs	r2, r3
    7050:	2000      	movs	r0, #0
    7052:	e698      	b.n	6d86 <__aeabi_dadd+0x1c2>
    7054:	4c6f      	ldr	r4, [pc, #444]	; (7214 <__aeabi_dadd+0x650>)
    7056:	45a4      	cmp	ip, r4
    7058:	d000      	beq.n	705c <__aeabi_dadd+0x498>
    705a:	e757      	b.n	6f0c <__aeabi_dadd+0x348>
    705c:	0001      	movs	r1, r0
    705e:	0015      	movs	r5, r2
    7060:	4664      	mov	r4, ip
    7062:	469a      	mov	sl, r3
    7064:	e5d7      	b.n	6c16 <__aeabi_dadd+0x52>
    7066:	2c00      	cmp	r4, #0
    7068:	d139      	bne.n	70de <__aeabi_dadd+0x51a>
    706a:	000c      	movs	r4, r1
    706c:	432c      	orrs	r4, r5
    706e:	d06e      	beq.n	714e <__aeabi_dadd+0x58a>
    7070:	43db      	mvns	r3, r3
    7072:	2b00      	cmp	r3, #0
    7074:	d01a      	beq.n	70ac <__aeabi_dadd+0x4e8>
    7076:	4c67      	ldr	r4, [pc, #412]	; (7214 <__aeabi_dadd+0x650>)
    7078:	45a4      	cmp	ip, r4
    707a:	d068      	beq.n	714e <__aeabi_dadd+0x58a>
    707c:	2b38      	cmp	r3, #56	; 0x38
    707e:	dd00      	ble.n	7082 <__aeabi_dadd+0x4be>
    7080:	e0a4      	b.n	71cc <__aeabi_dadd+0x608>
    7082:	2b1f      	cmp	r3, #31
    7084:	dd00      	ble.n	7088 <__aeabi_dadd+0x4c4>
    7086:	e0ae      	b.n	71e6 <__aeabi_dadd+0x622>
    7088:	2420      	movs	r4, #32
    708a:	000f      	movs	r7, r1
    708c:	1ae4      	subs	r4, r4, r3
    708e:	40a7      	lsls	r7, r4
    7090:	46b9      	mov	r9, r7
    7092:	002f      	movs	r7, r5
    7094:	40df      	lsrs	r7, r3
    7096:	46b8      	mov	r8, r7
    7098:	46a3      	mov	fp, r4
    709a:	464f      	mov	r7, r9
    709c:	4644      	mov	r4, r8
    709e:	4327      	orrs	r7, r4
    70a0:	465c      	mov	r4, fp
    70a2:	40a5      	lsls	r5, r4
    70a4:	1e6c      	subs	r4, r5, #1
    70a6:	41a5      	sbcs	r5, r4
    70a8:	40d9      	lsrs	r1, r3
    70aa:	433d      	orrs	r5, r7
    70ac:	18ad      	adds	r5, r5, r2
    70ae:	4295      	cmp	r5, r2
    70b0:	419b      	sbcs	r3, r3
    70b2:	1809      	adds	r1, r1, r0
    70b4:	425b      	negs	r3, r3
    70b6:	1859      	adds	r1, r3, r1
    70b8:	4664      	mov	r4, ip
    70ba:	e66b      	b.n	6d94 <__aeabi_dadd+0x1d0>
    70bc:	000c      	movs	r4, r1
    70be:	432c      	orrs	r4, r5
    70c0:	d115      	bne.n	70ee <__aeabi_dadd+0x52a>
    70c2:	0001      	movs	r1, r0
    70c4:	4311      	orrs	r1, r2
    70c6:	d07b      	beq.n	71c0 <__aeabi_dadd+0x5fc>
    70c8:	0001      	movs	r1, r0
    70ca:	0015      	movs	r5, r2
    70cc:	469a      	mov	sl, r3
    70ce:	4c51      	ldr	r4, [pc, #324]	; (7214 <__aeabi_dadd+0x650>)
    70d0:	e5a1      	b.n	6c16 <__aeabi_dadd+0x52>
    70d2:	430d      	orrs	r5, r1
    70d4:	1e69      	subs	r1, r5, #1
    70d6:	418d      	sbcs	r5, r1
    70d8:	2100      	movs	r1, #0
    70da:	b2ec      	uxtb	r4, r5
    70dc:	e72d      	b.n	6f3a <__aeabi_dadd+0x376>
    70de:	4c4d      	ldr	r4, [pc, #308]	; (7214 <__aeabi_dadd+0x650>)
    70e0:	45a4      	cmp	ip, r4
    70e2:	d034      	beq.n	714e <__aeabi_dadd+0x58a>
    70e4:	2480      	movs	r4, #128	; 0x80
    70e6:	0424      	lsls	r4, r4, #16
    70e8:	425b      	negs	r3, r3
    70ea:	4321      	orrs	r1, r4
    70ec:	e7c6      	b.n	707c <__aeabi_dadd+0x4b8>
    70ee:	0004      	movs	r4, r0
    70f0:	4314      	orrs	r4, r2
    70f2:	d04e      	beq.n	7192 <__aeabi_dadd+0x5ce>
    70f4:	08ed      	lsrs	r5, r5, #3
    70f6:	074c      	lsls	r4, r1, #29
    70f8:	432c      	orrs	r4, r5
    70fa:	2580      	movs	r5, #128	; 0x80
    70fc:	08c9      	lsrs	r1, r1, #3
    70fe:	032d      	lsls	r5, r5, #12
    7100:	4229      	tst	r1, r5
    7102:	d008      	beq.n	7116 <__aeabi_dadd+0x552>
    7104:	08c6      	lsrs	r6, r0, #3
    7106:	422e      	tst	r6, r5
    7108:	d105      	bne.n	7116 <__aeabi_dadd+0x552>
    710a:	08d2      	lsrs	r2, r2, #3
    710c:	0741      	lsls	r1, r0, #29
    710e:	4311      	orrs	r1, r2
    7110:	000c      	movs	r4, r1
    7112:	469a      	mov	sl, r3
    7114:	0031      	movs	r1, r6
    7116:	0f62      	lsrs	r2, r4, #29
    7118:	00c9      	lsls	r1, r1, #3
    711a:	00e5      	lsls	r5, r4, #3
    711c:	4311      	orrs	r1, r2
    711e:	4c3d      	ldr	r4, [pc, #244]	; (7214 <__aeabi_dadd+0x650>)
    7120:	e579      	b.n	6c16 <__aeabi_dadd+0x52>
    7122:	0006      	movs	r6, r0
    7124:	4316      	orrs	r6, r2
    7126:	d100      	bne.n	712a <__aeabi_dadd+0x566>
    7128:	e575      	b.n	6c16 <__aeabi_dadd+0x52>
    712a:	1aae      	subs	r6, r5, r2
    712c:	46b0      	mov	r8, r6
    712e:	4545      	cmp	r5, r8
    7130:	41bf      	sbcs	r7, r7
    7132:	1a0e      	subs	r6, r1, r0
    7134:	427f      	negs	r7, r7
    7136:	1bf6      	subs	r6, r6, r7
    7138:	0237      	lsls	r7, r6, #8
    713a:	d400      	bmi.n	713e <__aeabi_dadd+0x57a>
    713c:	e5f4      	b.n	6d28 <__aeabi_dadd+0x164>
    713e:	1b55      	subs	r5, r2, r5
    7140:	42aa      	cmp	r2, r5
    7142:	41b6      	sbcs	r6, r6
    7144:	1a41      	subs	r1, r0, r1
    7146:	4276      	negs	r6, r6
    7148:	1b89      	subs	r1, r1, r6
    714a:	469a      	mov	sl, r3
    714c:	e563      	b.n	6c16 <__aeabi_dadd+0x52>
    714e:	0001      	movs	r1, r0
    7150:	0015      	movs	r5, r2
    7152:	4664      	mov	r4, ip
    7154:	e55f      	b.n	6c16 <__aeabi_dadd+0x52>
    7156:	2200      	movs	r2, #0
    7158:	2500      	movs	r5, #0
    715a:	e57b      	b.n	6c54 <__aeabi_dadd+0x90>
    715c:	2b00      	cmp	r3, #0
    715e:	d03b      	beq.n	71d8 <__aeabi_dadd+0x614>
    7160:	0003      	movs	r3, r0
    7162:	4313      	orrs	r3, r2
    7164:	d015      	beq.n	7192 <__aeabi_dadd+0x5ce>
    7166:	08ed      	lsrs	r5, r5, #3
    7168:	074b      	lsls	r3, r1, #29
    716a:	432b      	orrs	r3, r5
    716c:	2580      	movs	r5, #128	; 0x80
    716e:	08c9      	lsrs	r1, r1, #3
    7170:	032d      	lsls	r5, r5, #12
    7172:	4229      	tst	r1, r5
    7174:	d007      	beq.n	7186 <__aeabi_dadd+0x5c2>
    7176:	08c4      	lsrs	r4, r0, #3
    7178:	422c      	tst	r4, r5
    717a:	d104      	bne.n	7186 <__aeabi_dadd+0x5c2>
    717c:	0741      	lsls	r1, r0, #29
    717e:	000b      	movs	r3, r1
    7180:	0021      	movs	r1, r4
    7182:	08d2      	lsrs	r2, r2, #3
    7184:	4313      	orrs	r3, r2
    7186:	00c9      	lsls	r1, r1, #3
    7188:	0f5a      	lsrs	r2, r3, #29
    718a:	4311      	orrs	r1, r2
    718c:	00dd      	lsls	r5, r3, #3
    718e:	4c21      	ldr	r4, [pc, #132]	; (7214 <__aeabi_dadd+0x650>)
    7190:	e541      	b.n	6c16 <__aeabi_dadd+0x52>
    7192:	4c20      	ldr	r4, [pc, #128]	; (7214 <__aeabi_dadd+0x650>)
    7194:	e53f      	b.n	6c16 <__aeabi_dadd+0x52>
    7196:	2000      	movs	r0, #0
    7198:	e754      	b.n	7044 <__aeabi_dadd+0x480>
    719a:	2600      	movs	r6, #0
    719c:	2500      	movs	r5, #0
    719e:	e5d1      	b.n	6d44 <__aeabi_dadd+0x180>
    71a0:	0034      	movs	r4, r6
    71a2:	000f      	movs	r7, r1
    71a4:	3c20      	subs	r4, #32
    71a6:	40e7      	lsrs	r7, r4
    71a8:	003c      	movs	r4, r7
    71aa:	2e20      	cmp	r6, #32
    71ac:	d02b      	beq.n	7206 <__aeabi_dadd+0x642>
    71ae:	2740      	movs	r7, #64	; 0x40
    71b0:	1bbe      	subs	r6, r7, r6
    71b2:	40b1      	lsls	r1, r6
    71b4:	430d      	orrs	r5, r1
    71b6:	1e69      	subs	r1, r5, #1
    71b8:	418d      	sbcs	r5, r1
    71ba:	2100      	movs	r1, #0
    71bc:	432c      	orrs	r4, r5
    71be:	e6bc      	b.n	6f3a <__aeabi_dadd+0x376>
    71c0:	2180      	movs	r1, #128	; 0x80
    71c2:	2600      	movs	r6, #0
    71c4:	0309      	lsls	r1, r1, #12
    71c6:	4c13      	ldr	r4, [pc, #76]	; (7214 <__aeabi_dadd+0x650>)
    71c8:	2500      	movs	r5, #0
    71ca:	e5bb      	b.n	6d44 <__aeabi_dadd+0x180>
    71cc:	430d      	orrs	r5, r1
    71ce:	1e69      	subs	r1, r5, #1
    71d0:	418d      	sbcs	r5, r1
    71d2:	2100      	movs	r1, #0
    71d4:	b2ed      	uxtb	r5, r5
    71d6:	e769      	b.n	70ac <__aeabi_dadd+0x4e8>
    71d8:	0001      	movs	r1, r0
    71da:	0015      	movs	r5, r2
    71dc:	4c0d      	ldr	r4, [pc, #52]	; (7214 <__aeabi_dadd+0x650>)
    71de:	e51a      	b.n	6c16 <__aeabi_dadd+0x52>
    71e0:	0001      	movs	r1, r0
    71e2:	0015      	movs	r5, r2
    71e4:	e517      	b.n	6c16 <__aeabi_dadd+0x52>
    71e6:	001c      	movs	r4, r3
    71e8:	000f      	movs	r7, r1
    71ea:	3c20      	subs	r4, #32
    71ec:	40e7      	lsrs	r7, r4
    71ee:	003c      	movs	r4, r7
    71f0:	2b20      	cmp	r3, #32
    71f2:	d00c      	beq.n	720e <__aeabi_dadd+0x64a>
    71f4:	2740      	movs	r7, #64	; 0x40
    71f6:	1afb      	subs	r3, r7, r3
    71f8:	4099      	lsls	r1, r3
    71fa:	430d      	orrs	r5, r1
    71fc:	1e69      	subs	r1, r5, #1
    71fe:	418d      	sbcs	r5, r1
    7200:	2100      	movs	r1, #0
    7202:	4325      	orrs	r5, r4
    7204:	e752      	b.n	70ac <__aeabi_dadd+0x4e8>
    7206:	2100      	movs	r1, #0
    7208:	e7d4      	b.n	71b4 <__aeabi_dadd+0x5f0>
    720a:	001d      	movs	r5, r3
    720c:	e592      	b.n	6d34 <__aeabi_dadd+0x170>
    720e:	2100      	movs	r1, #0
    7210:	e7f3      	b.n	71fa <__aeabi_dadd+0x636>
    7212:	46c0      	nop			; (mov r8, r8)
    7214:	000007ff 	.word	0x000007ff
    7218:	ff7fffff 	.word	0xff7fffff

0000721c <__aeabi_ddiv>:
    721c:	b5f0      	push	{r4, r5, r6, r7, lr}
    721e:	4656      	mov	r6, sl
    7220:	464d      	mov	r5, r9
    7222:	4644      	mov	r4, r8
    7224:	465f      	mov	r7, fp
    7226:	b4f0      	push	{r4, r5, r6, r7}
    7228:	001d      	movs	r5, r3
    722a:	030e      	lsls	r6, r1, #12
    722c:	004c      	lsls	r4, r1, #1
    722e:	0fcb      	lsrs	r3, r1, #31
    7230:	b087      	sub	sp, #28
    7232:	0007      	movs	r7, r0
    7234:	4692      	mov	sl, r2
    7236:	4681      	mov	r9, r0
    7238:	0b36      	lsrs	r6, r6, #12
    723a:	0d64      	lsrs	r4, r4, #21
    723c:	4698      	mov	r8, r3
    723e:	d06a      	beq.n	7316 <__aeabi_ddiv+0xfa>
    7240:	4b6d      	ldr	r3, [pc, #436]	; (73f8 <__aeabi_ddiv+0x1dc>)
    7242:	429c      	cmp	r4, r3
    7244:	d035      	beq.n	72b2 <__aeabi_ddiv+0x96>
    7246:	2280      	movs	r2, #128	; 0x80
    7248:	0f43      	lsrs	r3, r0, #29
    724a:	0412      	lsls	r2, r2, #16
    724c:	4313      	orrs	r3, r2
    724e:	00f6      	lsls	r6, r6, #3
    7250:	431e      	orrs	r6, r3
    7252:	00c3      	lsls	r3, r0, #3
    7254:	4699      	mov	r9, r3
    7256:	4b69      	ldr	r3, [pc, #420]	; (73fc <__aeabi_ddiv+0x1e0>)
    7258:	2700      	movs	r7, #0
    725a:	469c      	mov	ip, r3
    725c:	2300      	movs	r3, #0
    725e:	4464      	add	r4, ip
    7260:	9302      	str	r3, [sp, #8]
    7262:	032b      	lsls	r3, r5, #12
    7264:	0068      	lsls	r0, r5, #1
    7266:	0b1b      	lsrs	r3, r3, #12
    7268:	0fed      	lsrs	r5, r5, #31
    726a:	4651      	mov	r1, sl
    726c:	469b      	mov	fp, r3
    726e:	0d40      	lsrs	r0, r0, #21
    7270:	9500      	str	r5, [sp, #0]
    7272:	d100      	bne.n	7276 <__aeabi_ddiv+0x5a>
    7274:	e078      	b.n	7368 <__aeabi_ddiv+0x14c>
    7276:	4b60      	ldr	r3, [pc, #384]	; (73f8 <__aeabi_ddiv+0x1dc>)
    7278:	4298      	cmp	r0, r3
    727a:	d06c      	beq.n	7356 <__aeabi_ddiv+0x13a>
    727c:	465b      	mov	r3, fp
    727e:	00da      	lsls	r2, r3, #3
    7280:	0f4b      	lsrs	r3, r1, #29
    7282:	2180      	movs	r1, #128	; 0x80
    7284:	0409      	lsls	r1, r1, #16
    7286:	430b      	orrs	r3, r1
    7288:	4313      	orrs	r3, r2
    728a:	469b      	mov	fp, r3
    728c:	4653      	mov	r3, sl
    728e:	00d9      	lsls	r1, r3, #3
    7290:	4b5a      	ldr	r3, [pc, #360]	; (73fc <__aeabi_ddiv+0x1e0>)
    7292:	469c      	mov	ip, r3
    7294:	2300      	movs	r3, #0
    7296:	4460      	add	r0, ip
    7298:	4642      	mov	r2, r8
    729a:	1a20      	subs	r0, r4, r0
    729c:	406a      	eors	r2, r5
    729e:	4692      	mov	sl, r2
    72a0:	9001      	str	r0, [sp, #4]
    72a2:	431f      	orrs	r7, r3
    72a4:	2f0f      	cmp	r7, #15
    72a6:	d900      	bls.n	72aa <__aeabi_ddiv+0x8e>
    72a8:	e0b0      	b.n	740c <__aeabi_ddiv+0x1f0>
    72aa:	4855      	ldr	r0, [pc, #340]	; (7400 <__aeabi_ddiv+0x1e4>)
    72ac:	00bf      	lsls	r7, r7, #2
    72ae:	59c0      	ldr	r0, [r0, r7]
    72b0:	4687      	mov	pc, r0
    72b2:	4337      	orrs	r7, r6
    72b4:	d000      	beq.n	72b8 <__aeabi_ddiv+0x9c>
    72b6:	e088      	b.n	73ca <__aeabi_ddiv+0x1ae>
    72b8:	2300      	movs	r3, #0
    72ba:	4699      	mov	r9, r3
    72bc:	3302      	adds	r3, #2
    72be:	2708      	movs	r7, #8
    72c0:	2600      	movs	r6, #0
    72c2:	9302      	str	r3, [sp, #8]
    72c4:	e7cd      	b.n	7262 <__aeabi_ddiv+0x46>
    72c6:	4643      	mov	r3, r8
    72c8:	46b3      	mov	fp, r6
    72ca:	4649      	mov	r1, r9
    72cc:	9300      	str	r3, [sp, #0]
    72ce:	9b02      	ldr	r3, [sp, #8]
    72d0:	9a00      	ldr	r2, [sp, #0]
    72d2:	4692      	mov	sl, r2
    72d4:	2b02      	cmp	r3, #2
    72d6:	d000      	beq.n	72da <__aeabi_ddiv+0xbe>
    72d8:	e1bf      	b.n	765a <__aeabi_ddiv+0x43e>
    72da:	2100      	movs	r1, #0
    72dc:	4653      	mov	r3, sl
    72de:	2201      	movs	r2, #1
    72e0:	2600      	movs	r6, #0
    72e2:	4689      	mov	r9, r1
    72e4:	401a      	ands	r2, r3
    72e6:	4b44      	ldr	r3, [pc, #272]	; (73f8 <__aeabi_ddiv+0x1dc>)
    72e8:	2100      	movs	r1, #0
    72ea:	0336      	lsls	r6, r6, #12
    72ec:	0d0c      	lsrs	r4, r1, #20
    72ee:	0524      	lsls	r4, r4, #20
    72f0:	0b36      	lsrs	r6, r6, #12
    72f2:	4326      	orrs	r6, r4
    72f4:	4c43      	ldr	r4, [pc, #268]	; (7404 <__aeabi_ddiv+0x1e8>)
    72f6:	051b      	lsls	r3, r3, #20
    72f8:	4026      	ands	r6, r4
    72fa:	431e      	orrs	r6, r3
    72fc:	0076      	lsls	r6, r6, #1
    72fe:	07d2      	lsls	r2, r2, #31
    7300:	0876      	lsrs	r6, r6, #1
    7302:	4316      	orrs	r6, r2
    7304:	4648      	mov	r0, r9
    7306:	0031      	movs	r1, r6
    7308:	b007      	add	sp, #28
    730a:	bc3c      	pop	{r2, r3, r4, r5}
    730c:	4690      	mov	r8, r2
    730e:	4699      	mov	r9, r3
    7310:	46a2      	mov	sl, r4
    7312:	46ab      	mov	fp, r5
    7314:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7316:	0033      	movs	r3, r6
    7318:	4303      	orrs	r3, r0
    731a:	d04f      	beq.n	73bc <__aeabi_ddiv+0x1a0>
    731c:	2e00      	cmp	r6, #0
    731e:	d100      	bne.n	7322 <__aeabi_ddiv+0x106>
    7320:	e1bc      	b.n	769c <__aeabi_ddiv+0x480>
    7322:	0030      	movs	r0, r6
    7324:	f001 fb1c 	bl	8960 <__clzsi2>
    7328:	0003      	movs	r3, r0
    732a:	3b0b      	subs	r3, #11
    732c:	2b1c      	cmp	r3, #28
    732e:	dd00      	ble.n	7332 <__aeabi_ddiv+0x116>
    7330:	e1ad      	b.n	768e <__aeabi_ddiv+0x472>
    7332:	221d      	movs	r2, #29
    7334:	0001      	movs	r1, r0
    7336:	1ad3      	subs	r3, r2, r3
    7338:	3908      	subs	r1, #8
    733a:	003a      	movs	r2, r7
    733c:	408f      	lsls	r7, r1
    733e:	408e      	lsls	r6, r1
    7340:	40da      	lsrs	r2, r3
    7342:	46b9      	mov	r9, r7
    7344:	4316      	orrs	r6, r2
    7346:	4b30      	ldr	r3, [pc, #192]	; (7408 <__aeabi_ddiv+0x1ec>)
    7348:	2700      	movs	r7, #0
    734a:	469c      	mov	ip, r3
    734c:	2300      	movs	r3, #0
    734e:	4460      	add	r0, ip
    7350:	4244      	negs	r4, r0
    7352:	9302      	str	r3, [sp, #8]
    7354:	e785      	b.n	7262 <__aeabi_ddiv+0x46>
    7356:	4653      	mov	r3, sl
    7358:	465a      	mov	r2, fp
    735a:	4313      	orrs	r3, r2
    735c:	d12c      	bne.n	73b8 <__aeabi_ddiv+0x19c>
    735e:	2300      	movs	r3, #0
    7360:	2100      	movs	r1, #0
    7362:	469b      	mov	fp, r3
    7364:	3302      	adds	r3, #2
    7366:	e797      	b.n	7298 <__aeabi_ddiv+0x7c>
    7368:	430b      	orrs	r3, r1
    736a:	d020      	beq.n	73ae <__aeabi_ddiv+0x192>
    736c:	465b      	mov	r3, fp
    736e:	2b00      	cmp	r3, #0
    7370:	d100      	bne.n	7374 <__aeabi_ddiv+0x158>
    7372:	e19e      	b.n	76b2 <__aeabi_ddiv+0x496>
    7374:	4658      	mov	r0, fp
    7376:	f001 faf3 	bl	8960 <__clzsi2>
    737a:	0003      	movs	r3, r0
    737c:	3b0b      	subs	r3, #11
    737e:	2b1c      	cmp	r3, #28
    7380:	dd00      	ble.n	7384 <__aeabi_ddiv+0x168>
    7382:	e18f      	b.n	76a4 <__aeabi_ddiv+0x488>
    7384:	0002      	movs	r2, r0
    7386:	4659      	mov	r1, fp
    7388:	3a08      	subs	r2, #8
    738a:	4091      	lsls	r1, r2
    738c:	468b      	mov	fp, r1
    738e:	211d      	movs	r1, #29
    7390:	1acb      	subs	r3, r1, r3
    7392:	4651      	mov	r1, sl
    7394:	40d9      	lsrs	r1, r3
    7396:	000b      	movs	r3, r1
    7398:	4659      	mov	r1, fp
    739a:	430b      	orrs	r3, r1
    739c:	4651      	mov	r1, sl
    739e:	469b      	mov	fp, r3
    73a0:	4091      	lsls	r1, r2
    73a2:	4b19      	ldr	r3, [pc, #100]	; (7408 <__aeabi_ddiv+0x1ec>)
    73a4:	469c      	mov	ip, r3
    73a6:	4460      	add	r0, ip
    73a8:	4240      	negs	r0, r0
    73aa:	2300      	movs	r3, #0
    73ac:	e774      	b.n	7298 <__aeabi_ddiv+0x7c>
    73ae:	2300      	movs	r3, #0
    73b0:	2100      	movs	r1, #0
    73b2:	469b      	mov	fp, r3
    73b4:	3301      	adds	r3, #1
    73b6:	e76f      	b.n	7298 <__aeabi_ddiv+0x7c>
    73b8:	2303      	movs	r3, #3
    73ba:	e76d      	b.n	7298 <__aeabi_ddiv+0x7c>
    73bc:	2300      	movs	r3, #0
    73be:	4699      	mov	r9, r3
    73c0:	3301      	adds	r3, #1
    73c2:	2704      	movs	r7, #4
    73c4:	2600      	movs	r6, #0
    73c6:	9302      	str	r3, [sp, #8]
    73c8:	e74b      	b.n	7262 <__aeabi_ddiv+0x46>
    73ca:	2303      	movs	r3, #3
    73cc:	270c      	movs	r7, #12
    73ce:	9302      	str	r3, [sp, #8]
    73d0:	e747      	b.n	7262 <__aeabi_ddiv+0x46>
    73d2:	2201      	movs	r2, #1
    73d4:	1ad5      	subs	r5, r2, r3
    73d6:	2d38      	cmp	r5, #56	; 0x38
    73d8:	dc00      	bgt.n	73dc <__aeabi_ddiv+0x1c0>
    73da:	e1b0      	b.n	773e <__aeabi_ddiv+0x522>
    73dc:	4653      	mov	r3, sl
    73de:	401a      	ands	r2, r3
    73e0:	2100      	movs	r1, #0
    73e2:	2300      	movs	r3, #0
    73e4:	2600      	movs	r6, #0
    73e6:	4689      	mov	r9, r1
    73e8:	e77e      	b.n	72e8 <__aeabi_ddiv+0xcc>
    73ea:	2300      	movs	r3, #0
    73ec:	2680      	movs	r6, #128	; 0x80
    73ee:	4699      	mov	r9, r3
    73f0:	2200      	movs	r2, #0
    73f2:	0336      	lsls	r6, r6, #12
    73f4:	4b00      	ldr	r3, [pc, #0]	; (73f8 <__aeabi_ddiv+0x1dc>)
    73f6:	e777      	b.n	72e8 <__aeabi_ddiv+0xcc>
    73f8:	000007ff 	.word	0x000007ff
    73fc:	fffffc01 	.word	0xfffffc01
    7400:	00008db8 	.word	0x00008db8
    7404:	800fffff 	.word	0x800fffff
    7408:	000003f3 	.word	0x000003f3
    740c:	455e      	cmp	r6, fp
    740e:	d900      	bls.n	7412 <__aeabi_ddiv+0x1f6>
    7410:	e172      	b.n	76f8 <__aeabi_ddiv+0x4dc>
    7412:	d100      	bne.n	7416 <__aeabi_ddiv+0x1fa>
    7414:	e16d      	b.n	76f2 <__aeabi_ddiv+0x4d6>
    7416:	9b01      	ldr	r3, [sp, #4]
    7418:	464d      	mov	r5, r9
    741a:	3b01      	subs	r3, #1
    741c:	9301      	str	r3, [sp, #4]
    741e:	2300      	movs	r3, #0
    7420:	0034      	movs	r4, r6
    7422:	9302      	str	r3, [sp, #8]
    7424:	465b      	mov	r3, fp
    7426:	021e      	lsls	r6, r3, #8
    7428:	0e0b      	lsrs	r3, r1, #24
    742a:	431e      	orrs	r6, r3
    742c:	020b      	lsls	r3, r1, #8
    742e:	9303      	str	r3, [sp, #12]
    7430:	0c33      	lsrs	r3, r6, #16
    7432:	4699      	mov	r9, r3
    7434:	0433      	lsls	r3, r6, #16
    7436:	0c1b      	lsrs	r3, r3, #16
    7438:	4649      	mov	r1, r9
    743a:	0020      	movs	r0, r4
    743c:	9300      	str	r3, [sp, #0]
    743e:	f7fe fd0b 	bl	5e58 <__aeabi_uidiv>
    7442:	9b00      	ldr	r3, [sp, #0]
    7444:	0037      	movs	r7, r6
    7446:	4343      	muls	r3, r0
    7448:	0006      	movs	r6, r0
    744a:	4649      	mov	r1, r9
    744c:	0020      	movs	r0, r4
    744e:	4698      	mov	r8, r3
    7450:	f7fe fd88 	bl	5f64 <__aeabi_uidivmod>
    7454:	0c2c      	lsrs	r4, r5, #16
    7456:	0409      	lsls	r1, r1, #16
    7458:	430c      	orrs	r4, r1
    745a:	45a0      	cmp	r8, r4
    745c:	d909      	bls.n	7472 <__aeabi_ddiv+0x256>
    745e:	19e4      	adds	r4, r4, r7
    7460:	1e73      	subs	r3, r6, #1
    7462:	42a7      	cmp	r7, r4
    7464:	d900      	bls.n	7468 <__aeabi_ddiv+0x24c>
    7466:	e15c      	b.n	7722 <__aeabi_ddiv+0x506>
    7468:	45a0      	cmp	r8, r4
    746a:	d800      	bhi.n	746e <__aeabi_ddiv+0x252>
    746c:	e159      	b.n	7722 <__aeabi_ddiv+0x506>
    746e:	3e02      	subs	r6, #2
    7470:	19e4      	adds	r4, r4, r7
    7472:	4643      	mov	r3, r8
    7474:	1ae4      	subs	r4, r4, r3
    7476:	4649      	mov	r1, r9
    7478:	0020      	movs	r0, r4
    747a:	f7fe fced 	bl	5e58 <__aeabi_uidiv>
    747e:	0003      	movs	r3, r0
    7480:	9a00      	ldr	r2, [sp, #0]
    7482:	4680      	mov	r8, r0
    7484:	4353      	muls	r3, r2
    7486:	4649      	mov	r1, r9
    7488:	0020      	movs	r0, r4
    748a:	469b      	mov	fp, r3
    748c:	f7fe fd6a 	bl	5f64 <__aeabi_uidivmod>
    7490:	042a      	lsls	r2, r5, #16
    7492:	0409      	lsls	r1, r1, #16
    7494:	0c12      	lsrs	r2, r2, #16
    7496:	430a      	orrs	r2, r1
    7498:	4593      	cmp	fp, r2
    749a:	d90d      	bls.n	74b8 <__aeabi_ddiv+0x29c>
    749c:	4643      	mov	r3, r8
    749e:	19d2      	adds	r2, r2, r7
    74a0:	3b01      	subs	r3, #1
    74a2:	4297      	cmp	r7, r2
    74a4:	d900      	bls.n	74a8 <__aeabi_ddiv+0x28c>
    74a6:	e13a      	b.n	771e <__aeabi_ddiv+0x502>
    74a8:	4593      	cmp	fp, r2
    74aa:	d800      	bhi.n	74ae <__aeabi_ddiv+0x292>
    74ac:	e137      	b.n	771e <__aeabi_ddiv+0x502>
    74ae:	2302      	movs	r3, #2
    74b0:	425b      	negs	r3, r3
    74b2:	469c      	mov	ip, r3
    74b4:	19d2      	adds	r2, r2, r7
    74b6:	44e0      	add	r8, ip
    74b8:	465b      	mov	r3, fp
    74ba:	1ad2      	subs	r2, r2, r3
    74bc:	4643      	mov	r3, r8
    74be:	0436      	lsls	r6, r6, #16
    74c0:	4333      	orrs	r3, r6
    74c2:	469b      	mov	fp, r3
    74c4:	9903      	ldr	r1, [sp, #12]
    74c6:	0c18      	lsrs	r0, r3, #16
    74c8:	0c0b      	lsrs	r3, r1, #16
    74ca:	001d      	movs	r5, r3
    74cc:	9305      	str	r3, [sp, #20]
    74ce:	0409      	lsls	r1, r1, #16
    74d0:	465b      	mov	r3, fp
    74d2:	0c09      	lsrs	r1, r1, #16
    74d4:	000c      	movs	r4, r1
    74d6:	041b      	lsls	r3, r3, #16
    74d8:	0c1b      	lsrs	r3, r3, #16
    74da:	4344      	muls	r4, r0
    74dc:	9104      	str	r1, [sp, #16]
    74de:	4359      	muls	r1, r3
    74e0:	436b      	muls	r3, r5
    74e2:	4368      	muls	r0, r5
    74e4:	191b      	adds	r3, r3, r4
    74e6:	0c0d      	lsrs	r5, r1, #16
    74e8:	18eb      	adds	r3, r5, r3
    74ea:	429c      	cmp	r4, r3
    74ec:	d903      	bls.n	74f6 <__aeabi_ddiv+0x2da>
    74ee:	2480      	movs	r4, #128	; 0x80
    74f0:	0264      	lsls	r4, r4, #9
    74f2:	46a4      	mov	ip, r4
    74f4:	4460      	add	r0, ip
    74f6:	0c1c      	lsrs	r4, r3, #16
    74f8:	0409      	lsls	r1, r1, #16
    74fa:	041b      	lsls	r3, r3, #16
    74fc:	0c09      	lsrs	r1, r1, #16
    74fe:	1820      	adds	r0, r4, r0
    7500:	185d      	adds	r5, r3, r1
    7502:	4282      	cmp	r2, r0
    7504:	d200      	bcs.n	7508 <__aeabi_ddiv+0x2ec>
    7506:	e0de      	b.n	76c6 <__aeabi_ddiv+0x4aa>
    7508:	d100      	bne.n	750c <__aeabi_ddiv+0x2f0>
    750a:	e0d7      	b.n	76bc <__aeabi_ddiv+0x4a0>
    750c:	1a16      	subs	r6, r2, r0
    750e:	9b02      	ldr	r3, [sp, #8]
    7510:	469c      	mov	ip, r3
    7512:	1b5d      	subs	r5, r3, r5
    7514:	45ac      	cmp	ip, r5
    7516:	419b      	sbcs	r3, r3
    7518:	425b      	negs	r3, r3
    751a:	1af6      	subs	r6, r6, r3
    751c:	42b7      	cmp	r7, r6
    751e:	d100      	bne.n	7522 <__aeabi_ddiv+0x306>
    7520:	e106      	b.n	7730 <__aeabi_ddiv+0x514>
    7522:	4649      	mov	r1, r9
    7524:	0030      	movs	r0, r6
    7526:	f7fe fc97 	bl	5e58 <__aeabi_uidiv>
    752a:	9b00      	ldr	r3, [sp, #0]
    752c:	0004      	movs	r4, r0
    752e:	4343      	muls	r3, r0
    7530:	4649      	mov	r1, r9
    7532:	0030      	movs	r0, r6
    7534:	4698      	mov	r8, r3
    7536:	f7fe fd15 	bl	5f64 <__aeabi_uidivmod>
    753a:	0c2e      	lsrs	r6, r5, #16
    753c:	0409      	lsls	r1, r1, #16
    753e:	430e      	orrs	r6, r1
    7540:	45b0      	cmp	r8, r6
    7542:	d909      	bls.n	7558 <__aeabi_ddiv+0x33c>
    7544:	19f6      	adds	r6, r6, r7
    7546:	1e63      	subs	r3, r4, #1
    7548:	42b7      	cmp	r7, r6
    754a:	d900      	bls.n	754e <__aeabi_ddiv+0x332>
    754c:	e0f3      	b.n	7736 <__aeabi_ddiv+0x51a>
    754e:	45b0      	cmp	r8, r6
    7550:	d800      	bhi.n	7554 <__aeabi_ddiv+0x338>
    7552:	e0f0      	b.n	7736 <__aeabi_ddiv+0x51a>
    7554:	3c02      	subs	r4, #2
    7556:	19f6      	adds	r6, r6, r7
    7558:	4643      	mov	r3, r8
    755a:	1af3      	subs	r3, r6, r3
    755c:	4649      	mov	r1, r9
    755e:	0018      	movs	r0, r3
    7560:	9302      	str	r3, [sp, #8]
    7562:	f7fe fc79 	bl	5e58 <__aeabi_uidiv>
    7566:	9b00      	ldr	r3, [sp, #0]
    7568:	0006      	movs	r6, r0
    756a:	4343      	muls	r3, r0
    756c:	4649      	mov	r1, r9
    756e:	9802      	ldr	r0, [sp, #8]
    7570:	4698      	mov	r8, r3
    7572:	f7fe fcf7 	bl	5f64 <__aeabi_uidivmod>
    7576:	042d      	lsls	r5, r5, #16
    7578:	0409      	lsls	r1, r1, #16
    757a:	0c2d      	lsrs	r5, r5, #16
    757c:	430d      	orrs	r5, r1
    757e:	45a8      	cmp	r8, r5
    7580:	d909      	bls.n	7596 <__aeabi_ddiv+0x37a>
    7582:	19ed      	adds	r5, r5, r7
    7584:	1e73      	subs	r3, r6, #1
    7586:	42af      	cmp	r7, r5
    7588:	d900      	bls.n	758c <__aeabi_ddiv+0x370>
    758a:	e0d6      	b.n	773a <__aeabi_ddiv+0x51e>
    758c:	45a8      	cmp	r8, r5
    758e:	d800      	bhi.n	7592 <__aeabi_ddiv+0x376>
    7590:	e0d3      	b.n	773a <__aeabi_ddiv+0x51e>
    7592:	3e02      	subs	r6, #2
    7594:	19ed      	adds	r5, r5, r7
    7596:	0424      	lsls	r4, r4, #16
    7598:	0021      	movs	r1, r4
    759a:	4643      	mov	r3, r8
    759c:	4331      	orrs	r1, r6
    759e:	9e04      	ldr	r6, [sp, #16]
    75a0:	9a05      	ldr	r2, [sp, #20]
    75a2:	0030      	movs	r0, r6
    75a4:	1aed      	subs	r5, r5, r3
    75a6:	040b      	lsls	r3, r1, #16
    75a8:	0c0c      	lsrs	r4, r1, #16
    75aa:	0c1b      	lsrs	r3, r3, #16
    75ac:	4358      	muls	r0, r3
    75ae:	4366      	muls	r6, r4
    75b0:	4353      	muls	r3, r2
    75b2:	4354      	muls	r4, r2
    75b4:	199a      	adds	r2, r3, r6
    75b6:	0c03      	lsrs	r3, r0, #16
    75b8:	189b      	adds	r3, r3, r2
    75ba:	429e      	cmp	r6, r3
    75bc:	d903      	bls.n	75c6 <__aeabi_ddiv+0x3aa>
    75be:	2280      	movs	r2, #128	; 0x80
    75c0:	0252      	lsls	r2, r2, #9
    75c2:	4694      	mov	ip, r2
    75c4:	4464      	add	r4, ip
    75c6:	0c1a      	lsrs	r2, r3, #16
    75c8:	0400      	lsls	r0, r0, #16
    75ca:	041b      	lsls	r3, r3, #16
    75cc:	0c00      	lsrs	r0, r0, #16
    75ce:	1914      	adds	r4, r2, r4
    75d0:	181b      	adds	r3, r3, r0
    75d2:	42a5      	cmp	r5, r4
    75d4:	d350      	bcc.n	7678 <__aeabi_ddiv+0x45c>
    75d6:	d04d      	beq.n	7674 <__aeabi_ddiv+0x458>
    75d8:	2301      	movs	r3, #1
    75da:	4319      	orrs	r1, r3
    75dc:	4a96      	ldr	r2, [pc, #600]	; (7838 <__aeabi_ddiv+0x61c>)
    75de:	9b01      	ldr	r3, [sp, #4]
    75e0:	4694      	mov	ip, r2
    75e2:	4463      	add	r3, ip
    75e4:	2b00      	cmp	r3, #0
    75e6:	dc00      	bgt.n	75ea <__aeabi_ddiv+0x3ce>
    75e8:	e6f3      	b.n	73d2 <__aeabi_ddiv+0x1b6>
    75ea:	074a      	lsls	r2, r1, #29
    75ec:	d009      	beq.n	7602 <__aeabi_ddiv+0x3e6>
    75ee:	220f      	movs	r2, #15
    75f0:	400a      	ands	r2, r1
    75f2:	2a04      	cmp	r2, #4
    75f4:	d005      	beq.n	7602 <__aeabi_ddiv+0x3e6>
    75f6:	1d0a      	adds	r2, r1, #4
    75f8:	428a      	cmp	r2, r1
    75fa:	4189      	sbcs	r1, r1
    75fc:	4249      	negs	r1, r1
    75fe:	448b      	add	fp, r1
    7600:	0011      	movs	r1, r2
    7602:	465a      	mov	r2, fp
    7604:	01d2      	lsls	r2, r2, #7
    7606:	d508      	bpl.n	761a <__aeabi_ddiv+0x3fe>
    7608:	465a      	mov	r2, fp
    760a:	4b8c      	ldr	r3, [pc, #560]	; (783c <__aeabi_ddiv+0x620>)
    760c:	401a      	ands	r2, r3
    760e:	4693      	mov	fp, r2
    7610:	2280      	movs	r2, #128	; 0x80
    7612:	00d2      	lsls	r2, r2, #3
    7614:	4694      	mov	ip, r2
    7616:	9b01      	ldr	r3, [sp, #4]
    7618:	4463      	add	r3, ip
    761a:	4a89      	ldr	r2, [pc, #548]	; (7840 <__aeabi_ddiv+0x624>)
    761c:	4293      	cmp	r3, r2
    761e:	dd00      	ble.n	7622 <__aeabi_ddiv+0x406>
    7620:	e65b      	b.n	72da <__aeabi_ddiv+0xbe>
    7622:	465a      	mov	r2, fp
    7624:	08c9      	lsrs	r1, r1, #3
    7626:	0750      	lsls	r0, r2, #29
    7628:	4308      	orrs	r0, r1
    762a:	0256      	lsls	r6, r2, #9
    762c:	4651      	mov	r1, sl
    762e:	2201      	movs	r2, #1
    7630:	055b      	lsls	r3, r3, #21
    7632:	4681      	mov	r9, r0
    7634:	0b36      	lsrs	r6, r6, #12
    7636:	0d5b      	lsrs	r3, r3, #21
    7638:	400a      	ands	r2, r1
    763a:	e655      	b.n	72e8 <__aeabi_ddiv+0xcc>
    763c:	2380      	movs	r3, #128	; 0x80
    763e:	031b      	lsls	r3, r3, #12
    7640:	421e      	tst	r6, r3
    7642:	d011      	beq.n	7668 <__aeabi_ddiv+0x44c>
    7644:	465a      	mov	r2, fp
    7646:	421a      	tst	r2, r3
    7648:	d10e      	bne.n	7668 <__aeabi_ddiv+0x44c>
    764a:	465e      	mov	r6, fp
    764c:	431e      	orrs	r6, r3
    764e:	0336      	lsls	r6, r6, #12
    7650:	0b36      	lsrs	r6, r6, #12
    7652:	002a      	movs	r2, r5
    7654:	4689      	mov	r9, r1
    7656:	4b7b      	ldr	r3, [pc, #492]	; (7844 <__aeabi_ddiv+0x628>)
    7658:	e646      	b.n	72e8 <__aeabi_ddiv+0xcc>
    765a:	2b03      	cmp	r3, #3
    765c:	d100      	bne.n	7660 <__aeabi_ddiv+0x444>
    765e:	e0e1      	b.n	7824 <__aeabi_ddiv+0x608>
    7660:	2b01      	cmp	r3, #1
    7662:	d1bb      	bne.n	75dc <__aeabi_ddiv+0x3c0>
    7664:	401a      	ands	r2, r3
    7666:	e6bb      	b.n	73e0 <__aeabi_ddiv+0x1c4>
    7668:	431e      	orrs	r6, r3
    766a:	0336      	lsls	r6, r6, #12
    766c:	0b36      	lsrs	r6, r6, #12
    766e:	4642      	mov	r2, r8
    7670:	4b74      	ldr	r3, [pc, #464]	; (7844 <__aeabi_ddiv+0x628>)
    7672:	e639      	b.n	72e8 <__aeabi_ddiv+0xcc>
    7674:	2b00      	cmp	r3, #0
    7676:	d0b1      	beq.n	75dc <__aeabi_ddiv+0x3c0>
    7678:	197d      	adds	r5, r7, r5
    767a:	1e4a      	subs	r2, r1, #1
    767c:	42af      	cmp	r7, r5
    767e:	d952      	bls.n	7726 <__aeabi_ddiv+0x50a>
    7680:	0011      	movs	r1, r2
    7682:	42a5      	cmp	r5, r4
    7684:	d1a8      	bne.n	75d8 <__aeabi_ddiv+0x3bc>
    7686:	9a03      	ldr	r2, [sp, #12]
    7688:	429a      	cmp	r2, r3
    768a:	d1a5      	bne.n	75d8 <__aeabi_ddiv+0x3bc>
    768c:	e7a6      	b.n	75dc <__aeabi_ddiv+0x3c0>
    768e:	0003      	movs	r3, r0
    7690:	003e      	movs	r6, r7
    7692:	3b28      	subs	r3, #40	; 0x28
    7694:	409e      	lsls	r6, r3
    7696:	2300      	movs	r3, #0
    7698:	4699      	mov	r9, r3
    769a:	e654      	b.n	7346 <__aeabi_ddiv+0x12a>
    769c:	f001 f960 	bl	8960 <__clzsi2>
    76a0:	3020      	adds	r0, #32
    76a2:	e641      	b.n	7328 <__aeabi_ddiv+0x10c>
    76a4:	0003      	movs	r3, r0
    76a6:	4652      	mov	r2, sl
    76a8:	3b28      	subs	r3, #40	; 0x28
    76aa:	409a      	lsls	r2, r3
    76ac:	2100      	movs	r1, #0
    76ae:	4693      	mov	fp, r2
    76b0:	e677      	b.n	73a2 <__aeabi_ddiv+0x186>
    76b2:	4650      	mov	r0, sl
    76b4:	f001 f954 	bl	8960 <__clzsi2>
    76b8:	3020      	adds	r0, #32
    76ba:	e65e      	b.n	737a <__aeabi_ddiv+0x15e>
    76bc:	9b02      	ldr	r3, [sp, #8]
    76be:	2600      	movs	r6, #0
    76c0:	42ab      	cmp	r3, r5
    76c2:	d300      	bcc.n	76c6 <__aeabi_ddiv+0x4aa>
    76c4:	e723      	b.n	750e <__aeabi_ddiv+0x2f2>
    76c6:	9e03      	ldr	r6, [sp, #12]
    76c8:	9902      	ldr	r1, [sp, #8]
    76ca:	46b4      	mov	ip, r6
    76cc:	4461      	add	r1, ip
    76ce:	4688      	mov	r8, r1
    76d0:	45b0      	cmp	r8, r6
    76d2:	41b6      	sbcs	r6, r6
    76d4:	465b      	mov	r3, fp
    76d6:	4276      	negs	r6, r6
    76d8:	19f6      	adds	r6, r6, r7
    76da:	18b2      	adds	r2, r6, r2
    76dc:	3b01      	subs	r3, #1
    76de:	9102      	str	r1, [sp, #8]
    76e0:	4297      	cmp	r7, r2
    76e2:	d213      	bcs.n	770c <__aeabi_ddiv+0x4f0>
    76e4:	4290      	cmp	r0, r2
    76e6:	d84f      	bhi.n	7788 <__aeabi_ddiv+0x56c>
    76e8:	d100      	bne.n	76ec <__aeabi_ddiv+0x4d0>
    76ea:	e08e      	b.n	780a <__aeabi_ddiv+0x5ee>
    76ec:	1a16      	subs	r6, r2, r0
    76ee:	469b      	mov	fp, r3
    76f0:	e70d      	b.n	750e <__aeabi_ddiv+0x2f2>
    76f2:	4589      	cmp	r9, r1
    76f4:	d200      	bcs.n	76f8 <__aeabi_ddiv+0x4dc>
    76f6:	e68e      	b.n	7416 <__aeabi_ddiv+0x1fa>
    76f8:	0874      	lsrs	r4, r6, #1
    76fa:	464b      	mov	r3, r9
    76fc:	07f6      	lsls	r6, r6, #31
    76fe:	0035      	movs	r5, r6
    7700:	085b      	lsrs	r3, r3, #1
    7702:	431d      	orrs	r5, r3
    7704:	464b      	mov	r3, r9
    7706:	07db      	lsls	r3, r3, #31
    7708:	9302      	str	r3, [sp, #8]
    770a:	e68b      	b.n	7424 <__aeabi_ddiv+0x208>
    770c:	4297      	cmp	r7, r2
    770e:	d1ed      	bne.n	76ec <__aeabi_ddiv+0x4d0>
    7710:	9903      	ldr	r1, [sp, #12]
    7712:	9c02      	ldr	r4, [sp, #8]
    7714:	42a1      	cmp	r1, r4
    7716:	d9e5      	bls.n	76e4 <__aeabi_ddiv+0x4c8>
    7718:	1a3e      	subs	r6, r7, r0
    771a:	469b      	mov	fp, r3
    771c:	e6f7      	b.n	750e <__aeabi_ddiv+0x2f2>
    771e:	4698      	mov	r8, r3
    7720:	e6ca      	b.n	74b8 <__aeabi_ddiv+0x29c>
    7722:	001e      	movs	r6, r3
    7724:	e6a5      	b.n	7472 <__aeabi_ddiv+0x256>
    7726:	42ac      	cmp	r4, r5
    7728:	d83e      	bhi.n	77a8 <__aeabi_ddiv+0x58c>
    772a:	d074      	beq.n	7816 <__aeabi_ddiv+0x5fa>
    772c:	0011      	movs	r1, r2
    772e:	e753      	b.n	75d8 <__aeabi_ddiv+0x3bc>
    7730:	2101      	movs	r1, #1
    7732:	4249      	negs	r1, r1
    7734:	e752      	b.n	75dc <__aeabi_ddiv+0x3c0>
    7736:	001c      	movs	r4, r3
    7738:	e70e      	b.n	7558 <__aeabi_ddiv+0x33c>
    773a:	001e      	movs	r6, r3
    773c:	e72b      	b.n	7596 <__aeabi_ddiv+0x37a>
    773e:	2d1f      	cmp	r5, #31
    7740:	dc3c      	bgt.n	77bc <__aeabi_ddiv+0x5a0>
    7742:	2320      	movs	r3, #32
    7744:	000a      	movs	r2, r1
    7746:	4658      	mov	r0, fp
    7748:	1b5b      	subs	r3, r3, r5
    774a:	4098      	lsls	r0, r3
    774c:	40ea      	lsrs	r2, r5
    774e:	4099      	lsls	r1, r3
    7750:	4302      	orrs	r2, r0
    7752:	1e48      	subs	r0, r1, #1
    7754:	4181      	sbcs	r1, r0
    7756:	465e      	mov	r6, fp
    7758:	4311      	orrs	r1, r2
    775a:	40ee      	lsrs	r6, r5
    775c:	074b      	lsls	r3, r1, #29
    775e:	d009      	beq.n	7774 <__aeabi_ddiv+0x558>
    7760:	230f      	movs	r3, #15
    7762:	400b      	ands	r3, r1
    7764:	2b04      	cmp	r3, #4
    7766:	d005      	beq.n	7774 <__aeabi_ddiv+0x558>
    7768:	000b      	movs	r3, r1
    776a:	1d19      	adds	r1, r3, #4
    776c:	4299      	cmp	r1, r3
    776e:	419b      	sbcs	r3, r3
    7770:	425b      	negs	r3, r3
    7772:	18f6      	adds	r6, r6, r3
    7774:	0233      	lsls	r3, r6, #8
    7776:	d53c      	bpl.n	77f2 <__aeabi_ddiv+0x5d6>
    7778:	4653      	mov	r3, sl
    777a:	2201      	movs	r2, #1
    777c:	2100      	movs	r1, #0
    777e:	401a      	ands	r2, r3
    7780:	2600      	movs	r6, #0
    7782:	2301      	movs	r3, #1
    7784:	4689      	mov	r9, r1
    7786:	e5af      	b.n	72e8 <__aeabi_ddiv+0xcc>
    7788:	2302      	movs	r3, #2
    778a:	425b      	negs	r3, r3
    778c:	469c      	mov	ip, r3
    778e:	9c03      	ldr	r4, [sp, #12]
    7790:	44e3      	add	fp, ip
    7792:	46a4      	mov	ip, r4
    7794:	9b02      	ldr	r3, [sp, #8]
    7796:	4463      	add	r3, ip
    7798:	4698      	mov	r8, r3
    779a:	45a0      	cmp	r8, r4
    779c:	41b6      	sbcs	r6, r6
    779e:	4276      	negs	r6, r6
    77a0:	19f6      	adds	r6, r6, r7
    77a2:	9302      	str	r3, [sp, #8]
    77a4:	18b2      	adds	r2, r6, r2
    77a6:	e6b1      	b.n	750c <__aeabi_ddiv+0x2f0>
    77a8:	9803      	ldr	r0, [sp, #12]
    77aa:	1e8a      	subs	r2, r1, #2
    77ac:	0041      	lsls	r1, r0, #1
    77ae:	4281      	cmp	r1, r0
    77b0:	41b6      	sbcs	r6, r6
    77b2:	4276      	negs	r6, r6
    77b4:	19f6      	adds	r6, r6, r7
    77b6:	19ad      	adds	r5, r5, r6
    77b8:	9103      	str	r1, [sp, #12]
    77ba:	e761      	b.n	7680 <__aeabi_ddiv+0x464>
    77bc:	221f      	movs	r2, #31
    77be:	4252      	negs	r2, r2
    77c0:	1ad3      	subs	r3, r2, r3
    77c2:	465a      	mov	r2, fp
    77c4:	40da      	lsrs	r2, r3
    77c6:	0013      	movs	r3, r2
    77c8:	2d20      	cmp	r5, #32
    77ca:	d029      	beq.n	7820 <__aeabi_ddiv+0x604>
    77cc:	2240      	movs	r2, #64	; 0x40
    77ce:	4658      	mov	r0, fp
    77d0:	1b55      	subs	r5, r2, r5
    77d2:	40a8      	lsls	r0, r5
    77d4:	4301      	orrs	r1, r0
    77d6:	1e48      	subs	r0, r1, #1
    77d8:	4181      	sbcs	r1, r0
    77da:	2007      	movs	r0, #7
    77dc:	430b      	orrs	r3, r1
    77de:	4018      	ands	r0, r3
    77e0:	2600      	movs	r6, #0
    77e2:	2800      	cmp	r0, #0
    77e4:	d009      	beq.n	77fa <__aeabi_ddiv+0x5de>
    77e6:	220f      	movs	r2, #15
    77e8:	2600      	movs	r6, #0
    77ea:	401a      	ands	r2, r3
    77ec:	0019      	movs	r1, r3
    77ee:	2a04      	cmp	r2, #4
    77f0:	d1bb      	bne.n	776a <__aeabi_ddiv+0x54e>
    77f2:	000b      	movs	r3, r1
    77f4:	0770      	lsls	r0, r6, #29
    77f6:	0276      	lsls	r6, r6, #9
    77f8:	0b36      	lsrs	r6, r6, #12
    77fa:	08db      	lsrs	r3, r3, #3
    77fc:	4303      	orrs	r3, r0
    77fe:	4699      	mov	r9, r3
    7800:	2201      	movs	r2, #1
    7802:	4653      	mov	r3, sl
    7804:	401a      	ands	r2, r3
    7806:	2300      	movs	r3, #0
    7808:	e56e      	b.n	72e8 <__aeabi_ddiv+0xcc>
    780a:	9902      	ldr	r1, [sp, #8]
    780c:	428d      	cmp	r5, r1
    780e:	d8bb      	bhi.n	7788 <__aeabi_ddiv+0x56c>
    7810:	469b      	mov	fp, r3
    7812:	2600      	movs	r6, #0
    7814:	e67b      	b.n	750e <__aeabi_ddiv+0x2f2>
    7816:	9803      	ldr	r0, [sp, #12]
    7818:	4298      	cmp	r0, r3
    781a:	d3c5      	bcc.n	77a8 <__aeabi_ddiv+0x58c>
    781c:	0011      	movs	r1, r2
    781e:	e732      	b.n	7686 <__aeabi_ddiv+0x46a>
    7820:	2000      	movs	r0, #0
    7822:	e7d7      	b.n	77d4 <__aeabi_ddiv+0x5b8>
    7824:	2680      	movs	r6, #128	; 0x80
    7826:	465b      	mov	r3, fp
    7828:	0336      	lsls	r6, r6, #12
    782a:	431e      	orrs	r6, r3
    782c:	0336      	lsls	r6, r6, #12
    782e:	0b36      	lsrs	r6, r6, #12
    7830:	9a00      	ldr	r2, [sp, #0]
    7832:	4689      	mov	r9, r1
    7834:	4b03      	ldr	r3, [pc, #12]	; (7844 <__aeabi_ddiv+0x628>)
    7836:	e557      	b.n	72e8 <__aeabi_ddiv+0xcc>
    7838:	000003ff 	.word	0x000003ff
    783c:	feffffff 	.word	0xfeffffff
    7840:	000007fe 	.word	0x000007fe
    7844:	000007ff 	.word	0x000007ff

00007848 <__eqdf2>:
    7848:	b5f0      	push	{r4, r5, r6, r7, lr}
    784a:	465f      	mov	r7, fp
    784c:	4656      	mov	r6, sl
    784e:	464d      	mov	r5, r9
    7850:	4644      	mov	r4, r8
    7852:	b4f0      	push	{r4, r5, r6, r7}
    7854:	031f      	lsls	r7, r3, #12
    7856:	005c      	lsls	r4, r3, #1
    7858:	0fdb      	lsrs	r3, r3, #31
    785a:	469a      	mov	sl, r3
    785c:	4b19      	ldr	r3, [pc, #100]	; (78c4 <__eqdf2+0x7c>)
    785e:	030e      	lsls	r6, r1, #12
    7860:	004d      	lsls	r5, r1, #1
    7862:	0fc9      	lsrs	r1, r1, #31
    7864:	4680      	mov	r8, r0
    7866:	0b36      	lsrs	r6, r6, #12
    7868:	0d6d      	lsrs	r5, r5, #21
    786a:	468b      	mov	fp, r1
    786c:	4691      	mov	r9, r2
    786e:	0b3f      	lsrs	r7, r7, #12
    7870:	0d64      	lsrs	r4, r4, #21
    7872:	429d      	cmp	r5, r3
    7874:	d019      	beq.n	78aa <__eqdf2+0x62>
    7876:	4b13      	ldr	r3, [pc, #76]	; (78c4 <__eqdf2+0x7c>)
    7878:	429c      	cmp	r4, r3
    787a:	d01b      	beq.n	78b4 <__eqdf2+0x6c>
    787c:	2301      	movs	r3, #1
    787e:	42a5      	cmp	r5, r4
    7880:	d006      	beq.n	7890 <__eqdf2+0x48>
    7882:	0018      	movs	r0, r3
    7884:	bc3c      	pop	{r2, r3, r4, r5}
    7886:	4690      	mov	r8, r2
    7888:	4699      	mov	r9, r3
    788a:	46a2      	mov	sl, r4
    788c:	46ab      	mov	fp, r5
    788e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7890:	42be      	cmp	r6, r7
    7892:	d1f6      	bne.n	7882 <__eqdf2+0x3a>
    7894:	45c8      	cmp	r8, r9
    7896:	d1f4      	bne.n	7882 <__eqdf2+0x3a>
    7898:	45d3      	cmp	fp, sl
    789a:	d010      	beq.n	78be <__eqdf2+0x76>
    789c:	2d00      	cmp	r5, #0
    789e:	d1f0      	bne.n	7882 <__eqdf2+0x3a>
    78a0:	4330      	orrs	r0, r6
    78a2:	0003      	movs	r3, r0
    78a4:	1e5a      	subs	r2, r3, #1
    78a6:	4193      	sbcs	r3, r2
    78a8:	e7eb      	b.n	7882 <__eqdf2+0x3a>
    78aa:	0031      	movs	r1, r6
    78ac:	2301      	movs	r3, #1
    78ae:	4301      	orrs	r1, r0
    78b0:	d1e7      	bne.n	7882 <__eqdf2+0x3a>
    78b2:	e7e0      	b.n	7876 <__eqdf2+0x2e>
    78b4:	433a      	orrs	r2, r7
    78b6:	2301      	movs	r3, #1
    78b8:	2a00      	cmp	r2, #0
    78ba:	d1e2      	bne.n	7882 <__eqdf2+0x3a>
    78bc:	e7de      	b.n	787c <__eqdf2+0x34>
    78be:	2300      	movs	r3, #0
    78c0:	e7df      	b.n	7882 <__eqdf2+0x3a>
    78c2:	46c0      	nop			; (mov r8, r8)
    78c4:	000007ff 	.word	0x000007ff

000078c8 <__gedf2>:
    78c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    78ca:	465f      	mov	r7, fp
    78cc:	4644      	mov	r4, r8
    78ce:	4656      	mov	r6, sl
    78d0:	464d      	mov	r5, r9
    78d2:	b4f0      	push	{r4, r5, r6, r7}
    78d4:	031f      	lsls	r7, r3, #12
    78d6:	0b3c      	lsrs	r4, r7, #12
    78d8:	4f2c      	ldr	r7, [pc, #176]	; (798c <__gedf2+0xc4>)
    78da:	030e      	lsls	r6, r1, #12
    78dc:	004d      	lsls	r5, r1, #1
    78de:	46a3      	mov	fp, r4
    78e0:	005c      	lsls	r4, r3, #1
    78e2:	4684      	mov	ip, r0
    78e4:	0b36      	lsrs	r6, r6, #12
    78e6:	0d6d      	lsrs	r5, r5, #21
    78e8:	0fc9      	lsrs	r1, r1, #31
    78ea:	4690      	mov	r8, r2
    78ec:	0d64      	lsrs	r4, r4, #21
    78ee:	0fdb      	lsrs	r3, r3, #31
    78f0:	42bd      	cmp	r5, r7
    78f2:	d02b      	beq.n	794c <__gedf2+0x84>
    78f4:	4f25      	ldr	r7, [pc, #148]	; (798c <__gedf2+0xc4>)
    78f6:	42bc      	cmp	r4, r7
    78f8:	d02e      	beq.n	7958 <__gedf2+0x90>
    78fa:	2d00      	cmp	r5, #0
    78fc:	d10e      	bne.n	791c <__gedf2+0x54>
    78fe:	4330      	orrs	r0, r6
    7900:	0007      	movs	r7, r0
    7902:	4681      	mov	r9, r0
    7904:	4278      	negs	r0, r7
    7906:	4178      	adcs	r0, r7
    7908:	2c00      	cmp	r4, #0
    790a:	d117      	bne.n	793c <__gedf2+0x74>
    790c:	465f      	mov	r7, fp
    790e:	433a      	orrs	r2, r7
    7910:	d114      	bne.n	793c <__gedf2+0x74>
    7912:	464b      	mov	r3, r9
    7914:	2000      	movs	r0, #0
    7916:	2b00      	cmp	r3, #0
    7918:	d00a      	beq.n	7930 <__gedf2+0x68>
    791a:	e006      	b.n	792a <__gedf2+0x62>
    791c:	2c00      	cmp	r4, #0
    791e:	d102      	bne.n	7926 <__gedf2+0x5e>
    7920:	4658      	mov	r0, fp
    7922:	4302      	orrs	r2, r0
    7924:	d001      	beq.n	792a <__gedf2+0x62>
    7926:	4299      	cmp	r1, r3
    7928:	d01a      	beq.n	7960 <__gedf2+0x98>
    792a:	2301      	movs	r3, #1
    792c:	4248      	negs	r0, r1
    792e:	4318      	orrs	r0, r3
    7930:	bc3c      	pop	{r2, r3, r4, r5}
    7932:	4690      	mov	r8, r2
    7934:	4699      	mov	r9, r3
    7936:	46a2      	mov	sl, r4
    7938:	46ab      	mov	fp, r5
    793a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    793c:	2800      	cmp	r0, #0
    793e:	d0f2      	beq.n	7926 <__gedf2+0x5e>
    7940:	4258      	negs	r0, r3
    7942:	4158      	adcs	r0, r3
    7944:	2201      	movs	r2, #1
    7946:	4240      	negs	r0, r0
    7948:	4310      	orrs	r0, r2
    794a:	e7f1      	b.n	7930 <__gedf2+0x68>
    794c:	0037      	movs	r7, r6
    794e:	4307      	orrs	r7, r0
    7950:	d0d0      	beq.n	78f4 <__gedf2+0x2c>
    7952:	2002      	movs	r0, #2
    7954:	4240      	negs	r0, r0
    7956:	e7eb      	b.n	7930 <__gedf2+0x68>
    7958:	465f      	mov	r7, fp
    795a:	4317      	orrs	r7, r2
    795c:	d0cd      	beq.n	78fa <__gedf2+0x32>
    795e:	e7f8      	b.n	7952 <__gedf2+0x8a>
    7960:	42a5      	cmp	r5, r4
    7962:	dce2      	bgt.n	792a <__gedf2+0x62>
    7964:	db05      	blt.n	7972 <__gedf2+0xaa>
    7966:	455e      	cmp	r6, fp
    7968:	d8df      	bhi.n	792a <__gedf2+0x62>
    796a:	d008      	beq.n	797e <__gedf2+0xb6>
    796c:	2000      	movs	r0, #0
    796e:	455e      	cmp	r6, fp
    7970:	d2de      	bcs.n	7930 <__gedf2+0x68>
    7972:	4248      	negs	r0, r1
    7974:	4148      	adcs	r0, r1
    7976:	2301      	movs	r3, #1
    7978:	4240      	negs	r0, r0
    797a:	4318      	orrs	r0, r3
    797c:	e7d8      	b.n	7930 <__gedf2+0x68>
    797e:	45c4      	cmp	ip, r8
    7980:	d8d3      	bhi.n	792a <__gedf2+0x62>
    7982:	2000      	movs	r0, #0
    7984:	45c4      	cmp	ip, r8
    7986:	d3f4      	bcc.n	7972 <__gedf2+0xaa>
    7988:	e7d2      	b.n	7930 <__gedf2+0x68>
    798a:	46c0      	nop			; (mov r8, r8)
    798c:	000007ff 	.word	0x000007ff

00007990 <__ledf2>:
    7990:	b5f0      	push	{r4, r5, r6, r7, lr}
    7992:	465f      	mov	r7, fp
    7994:	464d      	mov	r5, r9
    7996:	4644      	mov	r4, r8
    7998:	4656      	mov	r6, sl
    799a:	b4f0      	push	{r4, r5, r6, r7}
    799c:	031c      	lsls	r4, r3, #12
    799e:	0b24      	lsrs	r4, r4, #12
    79a0:	46a4      	mov	ip, r4
    79a2:	4c2f      	ldr	r4, [pc, #188]	; (7a60 <__ledf2+0xd0>)
    79a4:	030f      	lsls	r7, r1, #12
    79a6:	004d      	lsls	r5, r1, #1
    79a8:	005e      	lsls	r6, r3, #1
    79aa:	0fc9      	lsrs	r1, r1, #31
    79ac:	4680      	mov	r8, r0
    79ae:	0b3f      	lsrs	r7, r7, #12
    79b0:	0d6d      	lsrs	r5, r5, #21
    79b2:	468b      	mov	fp, r1
    79b4:	4691      	mov	r9, r2
    79b6:	0d76      	lsrs	r6, r6, #21
    79b8:	0fdb      	lsrs	r3, r3, #31
    79ba:	42a5      	cmp	r5, r4
    79bc:	d020      	beq.n	7a00 <__ledf2+0x70>
    79be:	4c28      	ldr	r4, [pc, #160]	; (7a60 <__ledf2+0xd0>)
    79c0:	42a6      	cmp	r6, r4
    79c2:	d022      	beq.n	7a0a <__ledf2+0x7a>
    79c4:	2d00      	cmp	r5, #0
    79c6:	d112      	bne.n	79ee <__ledf2+0x5e>
    79c8:	4338      	orrs	r0, r7
    79ca:	4244      	negs	r4, r0
    79cc:	4144      	adcs	r4, r0
    79ce:	2e00      	cmp	r6, #0
    79d0:	d020      	beq.n	7a14 <__ledf2+0x84>
    79d2:	2c00      	cmp	r4, #0
    79d4:	d00d      	beq.n	79f2 <__ledf2+0x62>
    79d6:	425c      	negs	r4, r3
    79d8:	4163      	adcs	r3, r4
    79da:	2401      	movs	r4, #1
    79dc:	425b      	negs	r3, r3
    79de:	431c      	orrs	r4, r3
    79e0:	0020      	movs	r0, r4
    79e2:	bc3c      	pop	{r2, r3, r4, r5}
    79e4:	4690      	mov	r8, r2
    79e6:	4699      	mov	r9, r3
    79e8:	46a2      	mov	sl, r4
    79ea:	46ab      	mov	fp, r5
    79ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    79ee:	2e00      	cmp	r6, #0
    79f0:	d017      	beq.n	7a22 <__ledf2+0x92>
    79f2:	455b      	cmp	r3, fp
    79f4:	d019      	beq.n	7a2a <__ledf2+0x9a>
    79f6:	465b      	mov	r3, fp
    79f8:	425c      	negs	r4, r3
    79fa:	2301      	movs	r3, #1
    79fc:	431c      	orrs	r4, r3
    79fe:	e7ef      	b.n	79e0 <__ledf2+0x50>
    7a00:	0039      	movs	r1, r7
    7a02:	2402      	movs	r4, #2
    7a04:	4301      	orrs	r1, r0
    7a06:	d1eb      	bne.n	79e0 <__ledf2+0x50>
    7a08:	e7d9      	b.n	79be <__ledf2+0x2e>
    7a0a:	4661      	mov	r1, ip
    7a0c:	2402      	movs	r4, #2
    7a0e:	4311      	orrs	r1, r2
    7a10:	d1e6      	bne.n	79e0 <__ledf2+0x50>
    7a12:	e7d7      	b.n	79c4 <__ledf2+0x34>
    7a14:	4661      	mov	r1, ip
    7a16:	430a      	orrs	r2, r1
    7a18:	d1db      	bne.n	79d2 <__ledf2+0x42>
    7a1a:	2400      	movs	r4, #0
    7a1c:	2800      	cmp	r0, #0
    7a1e:	d0df      	beq.n	79e0 <__ledf2+0x50>
    7a20:	e7e9      	b.n	79f6 <__ledf2+0x66>
    7a22:	4661      	mov	r1, ip
    7a24:	430a      	orrs	r2, r1
    7a26:	d1e4      	bne.n	79f2 <__ledf2+0x62>
    7a28:	e7e5      	b.n	79f6 <__ledf2+0x66>
    7a2a:	42b5      	cmp	r5, r6
    7a2c:	dd03      	ble.n	7a36 <__ledf2+0xa6>
    7a2e:	2201      	movs	r2, #1
    7a30:	425c      	negs	r4, r3
    7a32:	4314      	orrs	r4, r2
    7a34:	e7d4      	b.n	79e0 <__ledf2+0x50>
    7a36:	42b5      	cmp	r5, r6
    7a38:	dbcd      	blt.n	79d6 <__ledf2+0x46>
    7a3a:	4567      	cmp	r7, ip
    7a3c:	d8db      	bhi.n	79f6 <__ledf2+0x66>
    7a3e:	d009      	beq.n	7a54 <__ledf2+0xc4>
    7a40:	2400      	movs	r4, #0
    7a42:	4567      	cmp	r7, ip
    7a44:	d2cc      	bcs.n	79e0 <__ledf2+0x50>
    7a46:	4659      	mov	r1, fp
    7a48:	424c      	negs	r4, r1
    7a4a:	4161      	adcs	r1, r4
    7a4c:	2401      	movs	r4, #1
    7a4e:	4249      	negs	r1, r1
    7a50:	430c      	orrs	r4, r1
    7a52:	e7c5      	b.n	79e0 <__ledf2+0x50>
    7a54:	45c8      	cmp	r8, r9
    7a56:	d8ce      	bhi.n	79f6 <__ledf2+0x66>
    7a58:	2400      	movs	r4, #0
    7a5a:	45c8      	cmp	r8, r9
    7a5c:	d3f3      	bcc.n	7a46 <__ledf2+0xb6>
    7a5e:	e7bf      	b.n	79e0 <__ledf2+0x50>
    7a60:	000007ff 	.word	0x000007ff

00007a64 <__aeabi_dmul>:
    7a64:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a66:	465f      	mov	r7, fp
    7a68:	4656      	mov	r6, sl
    7a6a:	464d      	mov	r5, r9
    7a6c:	4644      	mov	r4, r8
    7a6e:	b4f0      	push	{r4, r5, r6, r7}
    7a70:	030d      	lsls	r5, r1, #12
    7a72:	4699      	mov	r9, r3
    7a74:	004e      	lsls	r6, r1, #1
    7a76:	0b2b      	lsrs	r3, r5, #12
    7a78:	b087      	sub	sp, #28
    7a7a:	0007      	movs	r7, r0
    7a7c:	4692      	mov	sl, r2
    7a7e:	4680      	mov	r8, r0
    7a80:	469b      	mov	fp, r3
    7a82:	0d76      	lsrs	r6, r6, #21
    7a84:	0fcc      	lsrs	r4, r1, #31
    7a86:	2e00      	cmp	r6, #0
    7a88:	d069      	beq.n	7b5e <__aeabi_dmul+0xfa>
    7a8a:	4b6d      	ldr	r3, [pc, #436]	; (7c40 <__aeabi_dmul+0x1dc>)
    7a8c:	429e      	cmp	r6, r3
    7a8e:	d035      	beq.n	7afc <__aeabi_dmul+0x98>
    7a90:	465b      	mov	r3, fp
    7a92:	2280      	movs	r2, #128	; 0x80
    7a94:	00dd      	lsls	r5, r3, #3
    7a96:	0412      	lsls	r2, r2, #16
    7a98:	0f43      	lsrs	r3, r0, #29
    7a9a:	4313      	orrs	r3, r2
    7a9c:	432b      	orrs	r3, r5
    7a9e:	469b      	mov	fp, r3
    7aa0:	00c3      	lsls	r3, r0, #3
    7aa2:	4698      	mov	r8, r3
    7aa4:	4b67      	ldr	r3, [pc, #412]	; (7c44 <__aeabi_dmul+0x1e0>)
    7aa6:	2700      	movs	r7, #0
    7aa8:	469c      	mov	ip, r3
    7aaa:	2300      	movs	r3, #0
    7aac:	4466      	add	r6, ip
    7aae:	9301      	str	r3, [sp, #4]
    7ab0:	464a      	mov	r2, r9
    7ab2:	0315      	lsls	r5, r2, #12
    7ab4:	0050      	lsls	r0, r2, #1
    7ab6:	0fd2      	lsrs	r2, r2, #31
    7ab8:	4653      	mov	r3, sl
    7aba:	0b2d      	lsrs	r5, r5, #12
    7abc:	0d40      	lsrs	r0, r0, #21
    7abe:	4691      	mov	r9, r2
    7ac0:	d100      	bne.n	7ac4 <__aeabi_dmul+0x60>
    7ac2:	e076      	b.n	7bb2 <__aeabi_dmul+0x14e>
    7ac4:	4a5e      	ldr	r2, [pc, #376]	; (7c40 <__aeabi_dmul+0x1dc>)
    7ac6:	4290      	cmp	r0, r2
    7ac8:	d06c      	beq.n	7ba4 <__aeabi_dmul+0x140>
    7aca:	2280      	movs	r2, #128	; 0x80
    7acc:	0f5b      	lsrs	r3, r3, #29
    7ace:	0412      	lsls	r2, r2, #16
    7ad0:	4313      	orrs	r3, r2
    7ad2:	4a5c      	ldr	r2, [pc, #368]	; (7c44 <__aeabi_dmul+0x1e0>)
    7ad4:	00ed      	lsls	r5, r5, #3
    7ad6:	4694      	mov	ip, r2
    7ad8:	431d      	orrs	r5, r3
    7ada:	4653      	mov	r3, sl
    7adc:	2200      	movs	r2, #0
    7ade:	00db      	lsls	r3, r3, #3
    7ae0:	4460      	add	r0, ip
    7ae2:	4649      	mov	r1, r9
    7ae4:	1836      	adds	r6, r6, r0
    7ae6:	1c70      	adds	r0, r6, #1
    7ae8:	4061      	eors	r1, r4
    7aea:	9002      	str	r0, [sp, #8]
    7aec:	4317      	orrs	r7, r2
    7aee:	2f0f      	cmp	r7, #15
    7af0:	d900      	bls.n	7af4 <__aeabi_dmul+0x90>
    7af2:	e0af      	b.n	7c54 <__aeabi_dmul+0x1f0>
    7af4:	4854      	ldr	r0, [pc, #336]	; (7c48 <__aeabi_dmul+0x1e4>)
    7af6:	00bf      	lsls	r7, r7, #2
    7af8:	59c7      	ldr	r7, [r0, r7]
    7afa:	46bf      	mov	pc, r7
    7afc:	465b      	mov	r3, fp
    7afe:	431f      	orrs	r7, r3
    7b00:	d000      	beq.n	7b04 <__aeabi_dmul+0xa0>
    7b02:	e088      	b.n	7c16 <__aeabi_dmul+0x1b2>
    7b04:	2300      	movs	r3, #0
    7b06:	469b      	mov	fp, r3
    7b08:	4698      	mov	r8, r3
    7b0a:	3302      	adds	r3, #2
    7b0c:	2708      	movs	r7, #8
    7b0e:	9301      	str	r3, [sp, #4]
    7b10:	e7ce      	b.n	7ab0 <__aeabi_dmul+0x4c>
    7b12:	4649      	mov	r1, r9
    7b14:	2a02      	cmp	r2, #2
    7b16:	d06a      	beq.n	7bee <__aeabi_dmul+0x18a>
    7b18:	2a03      	cmp	r2, #3
    7b1a:	d100      	bne.n	7b1e <__aeabi_dmul+0xba>
    7b1c:	e209      	b.n	7f32 <__aeabi_dmul+0x4ce>
    7b1e:	2a01      	cmp	r2, #1
    7b20:	d000      	beq.n	7b24 <__aeabi_dmul+0xc0>
    7b22:	e1bb      	b.n	7e9c <__aeabi_dmul+0x438>
    7b24:	4011      	ands	r1, r2
    7b26:	2200      	movs	r2, #0
    7b28:	2300      	movs	r3, #0
    7b2a:	2500      	movs	r5, #0
    7b2c:	4690      	mov	r8, r2
    7b2e:	b2cc      	uxtb	r4, r1
    7b30:	2100      	movs	r1, #0
    7b32:	032d      	lsls	r5, r5, #12
    7b34:	0d0a      	lsrs	r2, r1, #20
    7b36:	0512      	lsls	r2, r2, #20
    7b38:	0b2d      	lsrs	r5, r5, #12
    7b3a:	4315      	orrs	r5, r2
    7b3c:	4a43      	ldr	r2, [pc, #268]	; (7c4c <__aeabi_dmul+0x1e8>)
    7b3e:	051b      	lsls	r3, r3, #20
    7b40:	4015      	ands	r5, r2
    7b42:	431d      	orrs	r5, r3
    7b44:	006d      	lsls	r5, r5, #1
    7b46:	07e4      	lsls	r4, r4, #31
    7b48:	086d      	lsrs	r5, r5, #1
    7b4a:	4325      	orrs	r5, r4
    7b4c:	4640      	mov	r0, r8
    7b4e:	0029      	movs	r1, r5
    7b50:	b007      	add	sp, #28
    7b52:	bc3c      	pop	{r2, r3, r4, r5}
    7b54:	4690      	mov	r8, r2
    7b56:	4699      	mov	r9, r3
    7b58:	46a2      	mov	sl, r4
    7b5a:	46ab      	mov	fp, r5
    7b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b5e:	4303      	orrs	r3, r0
    7b60:	d052      	beq.n	7c08 <__aeabi_dmul+0x1a4>
    7b62:	465b      	mov	r3, fp
    7b64:	2b00      	cmp	r3, #0
    7b66:	d100      	bne.n	7b6a <__aeabi_dmul+0x106>
    7b68:	e18a      	b.n	7e80 <__aeabi_dmul+0x41c>
    7b6a:	4658      	mov	r0, fp
    7b6c:	f000 fef8 	bl	8960 <__clzsi2>
    7b70:	0003      	movs	r3, r0
    7b72:	3b0b      	subs	r3, #11
    7b74:	2b1c      	cmp	r3, #28
    7b76:	dd00      	ble.n	7b7a <__aeabi_dmul+0x116>
    7b78:	e17b      	b.n	7e72 <__aeabi_dmul+0x40e>
    7b7a:	221d      	movs	r2, #29
    7b7c:	1ad3      	subs	r3, r2, r3
    7b7e:	003a      	movs	r2, r7
    7b80:	0001      	movs	r1, r0
    7b82:	465d      	mov	r5, fp
    7b84:	40da      	lsrs	r2, r3
    7b86:	3908      	subs	r1, #8
    7b88:	408d      	lsls	r5, r1
    7b8a:	0013      	movs	r3, r2
    7b8c:	408f      	lsls	r7, r1
    7b8e:	432b      	orrs	r3, r5
    7b90:	469b      	mov	fp, r3
    7b92:	46b8      	mov	r8, r7
    7b94:	4b2e      	ldr	r3, [pc, #184]	; (7c50 <__aeabi_dmul+0x1ec>)
    7b96:	2700      	movs	r7, #0
    7b98:	469c      	mov	ip, r3
    7b9a:	2300      	movs	r3, #0
    7b9c:	4460      	add	r0, ip
    7b9e:	4246      	negs	r6, r0
    7ba0:	9301      	str	r3, [sp, #4]
    7ba2:	e785      	b.n	7ab0 <__aeabi_dmul+0x4c>
    7ba4:	4652      	mov	r2, sl
    7ba6:	432a      	orrs	r2, r5
    7ba8:	d12c      	bne.n	7c04 <__aeabi_dmul+0x1a0>
    7baa:	2500      	movs	r5, #0
    7bac:	2300      	movs	r3, #0
    7bae:	2202      	movs	r2, #2
    7bb0:	e797      	b.n	7ae2 <__aeabi_dmul+0x7e>
    7bb2:	4652      	mov	r2, sl
    7bb4:	432a      	orrs	r2, r5
    7bb6:	d021      	beq.n	7bfc <__aeabi_dmul+0x198>
    7bb8:	2d00      	cmp	r5, #0
    7bba:	d100      	bne.n	7bbe <__aeabi_dmul+0x15a>
    7bbc:	e154      	b.n	7e68 <__aeabi_dmul+0x404>
    7bbe:	0028      	movs	r0, r5
    7bc0:	f000 fece 	bl	8960 <__clzsi2>
    7bc4:	0003      	movs	r3, r0
    7bc6:	3b0b      	subs	r3, #11
    7bc8:	2b1c      	cmp	r3, #28
    7bca:	dd00      	ble.n	7bce <__aeabi_dmul+0x16a>
    7bcc:	e146      	b.n	7e5c <__aeabi_dmul+0x3f8>
    7bce:	211d      	movs	r1, #29
    7bd0:	1acb      	subs	r3, r1, r3
    7bd2:	4651      	mov	r1, sl
    7bd4:	0002      	movs	r2, r0
    7bd6:	40d9      	lsrs	r1, r3
    7bd8:	4653      	mov	r3, sl
    7bda:	3a08      	subs	r2, #8
    7bdc:	4095      	lsls	r5, r2
    7bde:	4093      	lsls	r3, r2
    7be0:	430d      	orrs	r5, r1
    7be2:	4a1b      	ldr	r2, [pc, #108]	; (7c50 <__aeabi_dmul+0x1ec>)
    7be4:	4694      	mov	ip, r2
    7be6:	4460      	add	r0, ip
    7be8:	4240      	negs	r0, r0
    7bea:	2200      	movs	r2, #0
    7bec:	e779      	b.n	7ae2 <__aeabi_dmul+0x7e>
    7bee:	2401      	movs	r4, #1
    7bf0:	2200      	movs	r2, #0
    7bf2:	400c      	ands	r4, r1
    7bf4:	4b12      	ldr	r3, [pc, #72]	; (7c40 <__aeabi_dmul+0x1dc>)
    7bf6:	2500      	movs	r5, #0
    7bf8:	4690      	mov	r8, r2
    7bfa:	e799      	b.n	7b30 <__aeabi_dmul+0xcc>
    7bfc:	2500      	movs	r5, #0
    7bfe:	2300      	movs	r3, #0
    7c00:	2201      	movs	r2, #1
    7c02:	e76e      	b.n	7ae2 <__aeabi_dmul+0x7e>
    7c04:	2203      	movs	r2, #3
    7c06:	e76c      	b.n	7ae2 <__aeabi_dmul+0x7e>
    7c08:	2300      	movs	r3, #0
    7c0a:	469b      	mov	fp, r3
    7c0c:	4698      	mov	r8, r3
    7c0e:	3301      	adds	r3, #1
    7c10:	2704      	movs	r7, #4
    7c12:	9301      	str	r3, [sp, #4]
    7c14:	e74c      	b.n	7ab0 <__aeabi_dmul+0x4c>
    7c16:	2303      	movs	r3, #3
    7c18:	270c      	movs	r7, #12
    7c1a:	9301      	str	r3, [sp, #4]
    7c1c:	e748      	b.n	7ab0 <__aeabi_dmul+0x4c>
    7c1e:	2300      	movs	r3, #0
    7c20:	2580      	movs	r5, #128	; 0x80
    7c22:	4698      	mov	r8, r3
    7c24:	2400      	movs	r4, #0
    7c26:	032d      	lsls	r5, r5, #12
    7c28:	4b05      	ldr	r3, [pc, #20]	; (7c40 <__aeabi_dmul+0x1dc>)
    7c2a:	e781      	b.n	7b30 <__aeabi_dmul+0xcc>
    7c2c:	465d      	mov	r5, fp
    7c2e:	4643      	mov	r3, r8
    7c30:	9a01      	ldr	r2, [sp, #4]
    7c32:	e76f      	b.n	7b14 <__aeabi_dmul+0xb0>
    7c34:	465d      	mov	r5, fp
    7c36:	4643      	mov	r3, r8
    7c38:	0021      	movs	r1, r4
    7c3a:	9a01      	ldr	r2, [sp, #4]
    7c3c:	e76a      	b.n	7b14 <__aeabi_dmul+0xb0>
    7c3e:	46c0      	nop			; (mov r8, r8)
    7c40:	000007ff 	.word	0x000007ff
    7c44:	fffffc01 	.word	0xfffffc01
    7c48:	00008df8 	.word	0x00008df8
    7c4c:	800fffff 	.word	0x800fffff
    7c50:	000003f3 	.word	0x000003f3
    7c54:	4642      	mov	r2, r8
    7c56:	0c12      	lsrs	r2, r2, #16
    7c58:	4691      	mov	r9, r2
    7c5a:	0c1a      	lsrs	r2, r3, #16
    7c5c:	4694      	mov	ip, r2
    7c5e:	4642      	mov	r2, r8
    7c60:	0417      	lsls	r7, r2, #16
    7c62:	464a      	mov	r2, r9
    7c64:	041b      	lsls	r3, r3, #16
    7c66:	0c1b      	lsrs	r3, r3, #16
    7c68:	435a      	muls	r2, r3
    7c6a:	4660      	mov	r0, ip
    7c6c:	4690      	mov	r8, r2
    7c6e:	464a      	mov	r2, r9
    7c70:	4342      	muls	r2, r0
    7c72:	0010      	movs	r0, r2
    7c74:	9203      	str	r2, [sp, #12]
    7c76:	4662      	mov	r2, ip
    7c78:	001c      	movs	r4, r3
    7c7a:	0c3f      	lsrs	r7, r7, #16
    7c7c:	437a      	muls	r2, r7
    7c7e:	437c      	muls	r4, r7
    7c80:	4442      	add	r2, r8
    7c82:	9201      	str	r2, [sp, #4]
    7c84:	0c22      	lsrs	r2, r4, #16
    7c86:	4692      	mov	sl, r2
    7c88:	9a01      	ldr	r2, [sp, #4]
    7c8a:	4452      	add	r2, sl
    7c8c:	4590      	cmp	r8, r2
    7c8e:	d906      	bls.n	7c9e <__aeabi_dmul+0x23a>
    7c90:	4682      	mov	sl, r0
    7c92:	2080      	movs	r0, #128	; 0x80
    7c94:	0240      	lsls	r0, r0, #9
    7c96:	4680      	mov	r8, r0
    7c98:	44c2      	add	sl, r8
    7c9a:	4650      	mov	r0, sl
    7c9c:	9003      	str	r0, [sp, #12]
    7c9e:	0c10      	lsrs	r0, r2, #16
    7ca0:	9004      	str	r0, [sp, #16]
    7ca2:	4648      	mov	r0, r9
    7ca4:	0424      	lsls	r4, r4, #16
    7ca6:	0c24      	lsrs	r4, r4, #16
    7ca8:	0412      	lsls	r2, r2, #16
    7caa:	1912      	adds	r2, r2, r4
    7cac:	9205      	str	r2, [sp, #20]
    7cae:	0c2a      	lsrs	r2, r5, #16
    7cb0:	042d      	lsls	r5, r5, #16
    7cb2:	0c2d      	lsrs	r5, r5, #16
    7cb4:	4368      	muls	r0, r5
    7cb6:	002c      	movs	r4, r5
    7cb8:	4682      	mov	sl, r0
    7cba:	4648      	mov	r0, r9
    7cbc:	437c      	muls	r4, r7
    7cbe:	4350      	muls	r0, r2
    7cc0:	4681      	mov	r9, r0
    7cc2:	0c20      	lsrs	r0, r4, #16
    7cc4:	4680      	mov	r8, r0
    7cc6:	4357      	muls	r7, r2
    7cc8:	4457      	add	r7, sl
    7cca:	4447      	add	r7, r8
    7ccc:	45ba      	cmp	sl, r7
    7cce:	d903      	bls.n	7cd8 <__aeabi_dmul+0x274>
    7cd0:	2080      	movs	r0, #128	; 0x80
    7cd2:	0240      	lsls	r0, r0, #9
    7cd4:	4680      	mov	r8, r0
    7cd6:	44c1      	add	r9, r8
    7cd8:	0c38      	lsrs	r0, r7, #16
    7cda:	043f      	lsls	r7, r7, #16
    7cdc:	46b8      	mov	r8, r7
    7cde:	4448      	add	r0, r9
    7ce0:	0424      	lsls	r4, r4, #16
    7ce2:	0c24      	lsrs	r4, r4, #16
    7ce4:	9001      	str	r0, [sp, #4]
    7ce6:	9804      	ldr	r0, [sp, #16]
    7ce8:	44a0      	add	r8, r4
    7cea:	4440      	add	r0, r8
    7cec:	9004      	str	r0, [sp, #16]
    7cee:	4658      	mov	r0, fp
    7cf0:	0c00      	lsrs	r0, r0, #16
    7cf2:	4681      	mov	r9, r0
    7cf4:	4658      	mov	r0, fp
    7cf6:	0404      	lsls	r4, r0, #16
    7cf8:	0c20      	lsrs	r0, r4, #16
    7cfa:	4682      	mov	sl, r0
    7cfc:	0007      	movs	r7, r0
    7cfe:	4648      	mov	r0, r9
    7d00:	435f      	muls	r7, r3
    7d02:	464c      	mov	r4, r9
    7d04:	4343      	muls	r3, r0
    7d06:	4660      	mov	r0, ip
    7d08:	4360      	muls	r0, r4
    7d0a:	4664      	mov	r4, ip
    7d0c:	4683      	mov	fp, r0
    7d0e:	4650      	mov	r0, sl
    7d10:	4344      	muls	r4, r0
    7d12:	0c38      	lsrs	r0, r7, #16
    7d14:	4684      	mov	ip, r0
    7d16:	18e4      	adds	r4, r4, r3
    7d18:	4464      	add	r4, ip
    7d1a:	42a3      	cmp	r3, r4
    7d1c:	d903      	bls.n	7d26 <__aeabi_dmul+0x2c2>
    7d1e:	2380      	movs	r3, #128	; 0x80
    7d20:	025b      	lsls	r3, r3, #9
    7d22:	469c      	mov	ip, r3
    7d24:	44e3      	add	fp, ip
    7d26:	4648      	mov	r0, r9
    7d28:	043f      	lsls	r7, r7, #16
    7d2a:	0c23      	lsrs	r3, r4, #16
    7d2c:	0c3f      	lsrs	r7, r7, #16
    7d2e:	0424      	lsls	r4, r4, #16
    7d30:	19e4      	adds	r4, r4, r7
    7d32:	4657      	mov	r7, sl
    7d34:	4368      	muls	r0, r5
    7d36:	436f      	muls	r7, r5
    7d38:	4684      	mov	ip, r0
    7d3a:	464d      	mov	r5, r9
    7d3c:	4650      	mov	r0, sl
    7d3e:	4355      	muls	r5, r2
    7d40:	4342      	muls	r2, r0
    7d42:	0c38      	lsrs	r0, r7, #16
    7d44:	4681      	mov	r9, r0
    7d46:	4462      	add	r2, ip
    7d48:	444a      	add	r2, r9
    7d4a:	445b      	add	r3, fp
    7d4c:	4594      	cmp	ip, r2
    7d4e:	d903      	bls.n	7d58 <__aeabi_dmul+0x2f4>
    7d50:	2080      	movs	r0, #128	; 0x80
    7d52:	0240      	lsls	r0, r0, #9
    7d54:	4684      	mov	ip, r0
    7d56:	4465      	add	r5, ip
    7d58:	9803      	ldr	r0, [sp, #12]
    7d5a:	043f      	lsls	r7, r7, #16
    7d5c:	4683      	mov	fp, r0
    7d5e:	9804      	ldr	r0, [sp, #16]
    7d60:	0c3f      	lsrs	r7, r7, #16
    7d62:	4684      	mov	ip, r0
    7d64:	44e3      	add	fp, ip
    7d66:	45c3      	cmp	fp, r8
    7d68:	4180      	sbcs	r0, r0
    7d6a:	4240      	negs	r0, r0
    7d6c:	4682      	mov	sl, r0
    7d6e:	0410      	lsls	r0, r2, #16
    7d70:	4684      	mov	ip, r0
    7d72:	9801      	ldr	r0, [sp, #4]
    7d74:	4467      	add	r7, ip
    7d76:	4684      	mov	ip, r0
    7d78:	4467      	add	r7, ip
    7d7a:	44a3      	add	fp, r4
    7d7c:	46bc      	mov	ip, r7
    7d7e:	45a3      	cmp	fp, r4
    7d80:	41a4      	sbcs	r4, r4
    7d82:	4699      	mov	r9, r3
    7d84:	44d4      	add	ip, sl
    7d86:	4264      	negs	r4, r4
    7d88:	4287      	cmp	r7, r0
    7d8a:	41bf      	sbcs	r7, r7
    7d8c:	45d4      	cmp	ip, sl
    7d8e:	4180      	sbcs	r0, r0
    7d90:	44e1      	add	r9, ip
    7d92:	46a0      	mov	r8, r4
    7d94:	4599      	cmp	r9, r3
    7d96:	419b      	sbcs	r3, r3
    7d98:	427f      	negs	r7, r7
    7d9a:	4240      	negs	r0, r0
    7d9c:	44c8      	add	r8, r9
    7d9e:	4307      	orrs	r7, r0
    7da0:	0c12      	lsrs	r2, r2, #16
    7da2:	18ba      	adds	r2, r7, r2
    7da4:	45a0      	cmp	r8, r4
    7da6:	41a4      	sbcs	r4, r4
    7da8:	425f      	negs	r7, r3
    7daa:	003b      	movs	r3, r7
    7dac:	4264      	negs	r4, r4
    7dae:	4323      	orrs	r3, r4
    7db0:	18d7      	adds	r7, r2, r3
    7db2:	4643      	mov	r3, r8
    7db4:	197d      	adds	r5, r7, r5
    7db6:	0ddb      	lsrs	r3, r3, #23
    7db8:	026d      	lsls	r5, r5, #9
    7dba:	431d      	orrs	r5, r3
    7dbc:	465b      	mov	r3, fp
    7dbe:	025a      	lsls	r2, r3, #9
    7dc0:	9b05      	ldr	r3, [sp, #20]
    7dc2:	431a      	orrs	r2, r3
    7dc4:	1e53      	subs	r3, r2, #1
    7dc6:	419a      	sbcs	r2, r3
    7dc8:	465b      	mov	r3, fp
    7dca:	0ddb      	lsrs	r3, r3, #23
    7dcc:	431a      	orrs	r2, r3
    7dce:	4643      	mov	r3, r8
    7dd0:	025b      	lsls	r3, r3, #9
    7dd2:	4313      	orrs	r3, r2
    7dd4:	01ea      	lsls	r2, r5, #7
    7dd6:	d507      	bpl.n	7de8 <__aeabi_dmul+0x384>
    7dd8:	2201      	movs	r2, #1
    7dda:	085c      	lsrs	r4, r3, #1
    7ddc:	4013      	ands	r3, r2
    7dde:	4323      	orrs	r3, r4
    7de0:	07ea      	lsls	r2, r5, #31
    7de2:	9e02      	ldr	r6, [sp, #8]
    7de4:	4313      	orrs	r3, r2
    7de6:	086d      	lsrs	r5, r5, #1
    7de8:	4a57      	ldr	r2, [pc, #348]	; (7f48 <__aeabi_dmul+0x4e4>)
    7dea:	18b2      	adds	r2, r6, r2
    7dec:	2a00      	cmp	r2, #0
    7dee:	dd4b      	ble.n	7e88 <__aeabi_dmul+0x424>
    7df0:	0758      	lsls	r0, r3, #29
    7df2:	d009      	beq.n	7e08 <__aeabi_dmul+0x3a4>
    7df4:	200f      	movs	r0, #15
    7df6:	4018      	ands	r0, r3
    7df8:	2804      	cmp	r0, #4
    7dfa:	d005      	beq.n	7e08 <__aeabi_dmul+0x3a4>
    7dfc:	1d18      	adds	r0, r3, #4
    7dfe:	4298      	cmp	r0, r3
    7e00:	419b      	sbcs	r3, r3
    7e02:	425b      	negs	r3, r3
    7e04:	18ed      	adds	r5, r5, r3
    7e06:	0003      	movs	r3, r0
    7e08:	01e8      	lsls	r0, r5, #7
    7e0a:	d504      	bpl.n	7e16 <__aeabi_dmul+0x3b2>
    7e0c:	4a4f      	ldr	r2, [pc, #316]	; (7f4c <__aeabi_dmul+0x4e8>)
    7e0e:	4015      	ands	r5, r2
    7e10:	2280      	movs	r2, #128	; 0x80
    7e12:	00d2      	lsls	r2, r2, #3
    7e14:	18b2      	adds	r2, r6, r2
    7e16:	484e      	ldr	r0, [pc, #312]	; (7f50 <__aeabi_dmul+0x4ec>)
    7e18:	4282      	cmp	r2, r0
    7e1a:	dd00      	ble.n	7e1e <__aeabi_dmul+0x3ba>
    7e1c:	e6e7      	b.n	7bee <__aeabi_dmul+0x18a>
    7e1e:	2401      	movs	r4, #1
    7e20:	08db      	lsrs	r3, r3, #3
    7e22:	0768      	lsls	r0, r5, #29
    7e24:	4318      	orrs	r0, r3
    7e26:	026d      	lsls	r5, r5, #9
    7e28:	0553      	lsls	r3, r2, #21
    7e2a:	4680      	mov	r8, r0
    7e2c:	0b2d      	lsrs	r5, r5, #12
    7e2e:	0d5b      	lsrs	r3, r3, #21
    7e30:	400c      	ands	r4, r1
    7e32:	e67d      	b.n	7b30 <__aeabi_dmul+0xcc>
    7e34:	2280      	movs	r2, #128	; 0x80
    7e36:	4659      	mov	r1, fp
    7e38:	0312      	lsls	r2, r2, #12
    7e3a:	4211      	tst	r1, r2
    7e3c:	d008      	beq.n	7e50 <__aeabi_dmul+0x3ec>
    7e3e:	4215      	tst	r5, r2
    7e40:	d106      	bne.n	7e50 <__aeabi_dmul+0x3ec>
    7e42:	4315      	orrs	r5, r2
    7e44:	032d      	lsls	r5, r5, #12
    7e46:	4698      	mov	r8, r3
    7e48:	0b2d      	lsrs	r5, r5, #12
    7e4a:	464c      	mov	r4, r9
    7e4c:	4b41      	ldr	r3, [pc, #260]	; (7f54 <__aeabi_dmul+0x4f0>)
    7e4e:	e66f      	b.n	7b30 <__aeabi_dmul+0xcc>
    7e50:	465d      	mov	r5, fp
    7e52:	4315      	orrs	r5, r2
    7e54:	032d      	lsls	r5, r5, #12
    7e56:	0b2d      	lsrs	r5, r5, #12
    7e58:	4b3e      	ldr	r3, [pc, #248]	; (7f54 <__aeabi_dmul+0x4f0>)
    7e5a:	e669      	b.n	7b30 <__aeabi_dmul+0xcc>
    7e5c:	0003      	movs	r3, r0
    7e5e:	4655      	mov	r5, sl
    7e60:	3b28      	subs	r3, #40	; 0x28
    7e62:	409d      	lsls	r5, r3
    7e64:	2300      	movs	r3, #0
    7e66:	e6bc      	b.n	7be2 <__aeabi_dmul+0x17e>
    7e68:	4650      	mov	r0, sl
    7e6a:	f000 fd79 	bl	8960 <__clzsi2>
    7e6e:	3020      	adds	r0, #32
    7e70:	e6a8      	b.n	7bc4 <__aeabi_dmul+0x160>
    7e72:	0003      	movs	r3, r0
    7e74:	3b28      	subs	r3, #40	; 0x28
    7e76:	409f      	lsls	r7, r3
    7e78:	2300      	movs	r3, #0
    7e7a:	46bb      	mov	fp, r7
    7e7c:	4698      	mov	r8, r3
    7e7e:	e689      	b.n	7b94 <__aeabi_dmul+0x130>
    7e80:	f000 fd6e 	bl	8960 <__clzsi2>
    7e84:	3020      	adds	r0, #32
    7e86:	e673      	b.n	7b70 <__aeabi_dmul+0x10c>
    7e88:	2401      	movs	r4, #1
    7e8a:	1aa6      	subs	r6, r4, r2
    7e8c:	2e38      	cmp	r6, #56	; 0x38
    7e8e:	dd07      	ble.n	7ea0 <__aeabi_dmul+0x43c>
    7e90:	2200      	movs	r2, #0
    7e92:	400c      	ands	r4, r1
    7e94:	2300      	movs	r3, #0
    7e96:	2500      	movs	r5, #0
    7e98:	4690      	mov	r8, r2
    7e9a:	e649      	b.n	7b30 <__aeabi_dmul+0xcc>
    7e9c:	9e02      	ldr	r6, [sp, #8]
    7e9e:	e7a3      	b.n	7de8 <__aeabi_dmul+0x384>
    7ea0:	2e1f      	cmp	r6, #31
    7ea2:	dc20      	bgt.n	7ee6 <__aeabi_dmul+0x482>
    7ea4:	2220      	movs	r2, #32
    7ea6:	002c      	movs	r4, r5
    7ea8:	0018      	movs	r0, r3
    7eaa:	1b92      	subs	r2, r2, r6
    7eac:	40f0      	lsrs	r0, r6
    7eae:	4094      	lsls	r4, r2
    7eb0:	4093      	lsls	r3, r2
    7eb2:	4304      	orrs	r4, r0
    7eb4:	1e58      	subs	r0, r3, #1
    7eb6:	4183      	sbcs	r3, r0
    7eb8:	431c      	orrs	r4, r3
    7eba:	40f5      	lsrs	r5, r6
    7ebc:	0763      	lsls	r3, r4, #29
    7ebe:	d009      	beq.n	7ed4 <__aeabi_dmul+0x470>
    7ec0:	230f      	movs	r3, #15
    7ec2:	4023      	ands	r3, r4
    7ec4:	2b04      	cmp	r3, #4
    7ec6:	d005      	beq.n	7ed4 <__aeabi_dmul+0x470>
    7ec8:	0023      	movs	r3, r4
    7eca:	1d1c      	adds	r4, r3, #4
    7ecc:	429c      	cmp	r4, r3
    7ece:	4192      	sbcs	r2, r2
    7ed0:	4252      	negs	r2, r2
    7ed2:	18ad      	adds	r5, r5, r2
    7ed4:	022b      	lsls	r3, r5, #8
    7ed6:	d51f      	bpl.n	7f18 <__aeabi_dmul+0x4b4>
    7ed8:	2401      	movs	r4, #1
    7eda:	2200      	movs	r2, #0
    7edc:	400c      	ands	r4, r1
    7ede:	2301      	movs	r3, #1
    7ee0:	2500      	movs	r5, #0
    7ee2:	4690      	mov	r8, r2
    7ee4:	e624      	b.n	7b30 <__aeabi_dmul+0xcc>
    7ee6:	201f      	movs	r0, #31
    7ee8:	002c      	movs	r4, r5
    7eea:	4240      	negs	r0, r0
    7eec:	1a82      	subs	r2, r0, r2
    7eee:	40d4      	lsrs	r4, r2
    7ef0:	2e20      	cmp	r6, #32
    7ef2:	d01c      	beq.n	7f2e <__aeabi_dmul+0x4ca>
    7ef4:	2240      	movs	r2, #64	; 0x40
    7ef6:	1b96      	subs	r6, r2, r6
    7ef8:	40b5      	lsls	r5, r6
    7efa:	432b      	orrs	r3, r5
    7efc:	1e58      	subs	r0, r3, #1
    7efe:	4183      	sbcs	r3, r0
    7f00:	2007      	movs	r0, #7
    7f02:	4323      	orrs	r3, r4
    7f04:	4018      	ands	r0, r3
    7f06:	2500      	movs	r5, #0
    7f08:	2800      	cmp	r0, #0
    7f0a:	d009      	beq.n	7f20 <__aeabi_dmul+0x4bc>
    7f0c:	220f      	movs	r2, #15
    7f0e:	2500      	movs	r5, #0
    7f10:	401a      	ands	r2, r3
    7f12:	001c      	movs	r4, r3
    7f14:	2a04      	cmp	r2, #4
    7f16:	d1d8      	bne.n	7eca <__aeabi_dmul+0x466>
    7f18:	0023      	movs	r3, r4
    7f1a:	0768      	lsls	r0, r5, #29
    7f1c:	026d      	lsls	r5, r5, #9
    7f1e:	0b2d      	lsrs	r5, r5, #12
    7f20:	2401      	movs	r4, #1
    7f22:	08db      	lsrs	r3, r3, #3
    7f24:	4303      	orrs	r3, r0
    7f26:	4698      	mov	r8, r3
    7f28:	400c      	ands	r4, r1
    7f2a:	2300      	movs	r3, #0
    7f2c:	e600      	b.n	7b30 <__aeabi_dmul+0xcc>
    7f2e:	2500      	movs	r5, #0
    7f30:	e7e3      	b.n	7efa <__aeabi_dmul+0x496>
    7f32:	2280      	movs	r2, #128	; 0x80
    7f34:	2401      	movs	r4, #1
    7f36:	0312      	lsls	r2, r2, #12
    7f38:	4315      	orrs	r5, r2
    7f3a:	032d      	lsls	r5, r5, #12
    7f3c:	4698      	mov	r8, r3
    7f3e:	0b2d      	lsrs	r5, r5, #12
    7f40:	400c      	ands	r4, r1
    7f42:	4b04      	ldr	r3, [pc, #16]	; (7f54 <__aeabi_dmul+0x4f0>)
    7f44:	e5f4      	b.n	7b30 <__aeabi_dmul+0xcc>
    7f46:	46c0      	nop			; (mov r8, r8)
    7f48:	000003ff 	.word	0x000003ff
    7f4c:	feffffff 	.word	0xfeffffff
    7f50:	000007fe 	.word	0x000007fe
    7f54:	000007ff 	.word	0x000007ff

00007f58 <__aeabi_dsub>:
    7f58:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f5a:	4657      	mov	r7, sl
    7f5c:	464e      	mov	r6, r9
    7f5e:	4645      	mov	r5, r8
    7f60:	b4e0      	push	{r5, r6, r7}
    7f62:	000e      	movs	r6, r1
    7f64:	0011      	movs	r1, r2
    7f66:	0ff2      	lsrs	r2, r6, #31
    7f68:	4692      	mov	sl, r2
    7f6a:	00c5      	lsls	r5, r0, #3
    7f6c:	0f42      	lsrs	r2, r0, #29
    7f6e:	0318      	lsls	r0, r3, #12
    7f70:	0337      	lsls	r7, r6, #12
    7f72:	0074      	lsls	r4, r6, #1
    7f74:	0a40      	lsrs	r0, r0, #9
    7f76:	0f4e      	lsrs	r6, r1, #29
    7f78:	0a7f      	lsrs	r7, r7, #9
    7f7a:	4330      	orrs	r0, r6
    7f7c:	4ecf      	ldr	r6, [pc, #828]	; (82bc <__aeabi_dsub+0x364>)
    7f7e:	4317      	orrs	r7, r2
    7f80:	005a      	lsls	r2, r3, #1
    7f82:	0d64      	lsrs	r4, r4, #21
    7f84:	0d52      	lsrs	r2, r2, #21
    7f86:	0fdb      	lsrs	r3, r3, #31
    7f88:	00c9      	lsls	r1, r1, #3
    7f8a:	42b2      	cmp	r2, r6
    7f8c:	d100      	bne.n	7f90 <__aeabi_dsub+0x38>
    7f8e:	e0e5      	b.n	815c <__aeabi_dsub+0x204>
    7f90:	2601      	movs	r6, #1
    7f92:	4073      	eors	r3, r6
    7f94:	1aa6      	subs	r6, r4, r2
    7f96:	46b4      	mov	ip, r6
    7f98:	4553      	cmp	r3, sl
    7f9a:	d100      	bne.n	7f9e <__aeabi_dsub+0x46>
    7f9c:	e0af      	b.n	80fe <__aeabi_dsub+0x1a6>
    7f9e:	2e00      	cmp	r6, #0
    7fa0:	dc00      	bgt.n	7fa4 <__aeabi_dsub+0x4c>
    7fa2:	e10d      	b.n	81c0 <__aeabi_dsub+0x268>
    7fa4:	2a00      	cmp	r2, #0
    7fa6:	d13a      	bne.n	801e <__aeabi_dsub+0xc6>
    7fa8:	0003      	movs	r3, r0
    7faa:	430b      	orrs	r3, r1
    7fac:	d000      	beq.n	7fb0 <__aeabi_dsub+0x58>
    7fae:	e0e4      	b.n	817a <__aeabi_dsub+0x222>
    7fb0:	076b      	lsls	r3, r5, #29
    7fb2:	d009      	beq.n	7fc8 <__aeabi_dsub+0x70>
    7fb4:	230f      	movs	r3, #15
    7fb6:	402b      	ands	r3, r5
    7fb8:	2b04      	cmp	r3, #4
    7fba:	d005      	beq.n	7fc8 <__aeabi_dsub+0x70>
    7fbc:	1d2b      	adds	r3, r5, #4
    7fbe:	42ab      	cmp	r3, r5
    7fc0:	41ad      	sbcs	r5, r5
    7fc2:	426d      	negs	r5, r5
    7fc4:	197f      	adds	r7, r7, r5
    7fc6:	001d      	movs	r5, r3
    7fc8:	023b      	lsls	r3, r7, #8
    7fca:	d400      	bmi.n	7fce <__aeabi_dsub+0x76>
    7fcc:	e088      	b.n	80e0 <__aeabi_dsub+0x188>
    7fce:	4bbb      	ldr	r3, [pc, #748]	; (82bc <__aeabi_dsub+0x364>)
    7fd0:	3401      	adds	r4, #1
    7fd2:	429c      	cmp	r4, r3
    7fd4:	d100      	bne.n	7fd8 <__aeabi_dsub+0x80>
    7fd6:	e110      	b.n	81fa <__aeabi_dsub+0x2a2>
    7fd8:	003a      	movs	r2, r7
    7fda:	4bb9      	ldr	r3, [pc, #740]	; (82c0 <__aeabi_dsub+0x368>)
    7fdc:	4651      	mov	r1, sl
    7fde:	401a      	ands	r2, r3
    7fe0:	2301      	movs	r3, #1
    7fe2:	0750      	lsls	r0, r2, #29
    7fe4:	08ed      	lsrs	r5, r5, #3
    7fe6:	0252      	lsls	r2, r2, #9
    7fe8:	0564      	lsls	r4, r4, #21
    7fea:	4305      	orrs	r5, r0
    7fec:	0b12      	lsrs	r2, r2, #12
    7fee:	0d64      	lsrs	r4, r4, #21
    7ff0:	400b      	ands	r3, r1
    7ff2:	2100      	movs	r1, #0
    7ff4:	0028      	movs	r0, r5
    7ff6:	0312      	lsls	r2, r2, #12
    7ff8:	0d0d      	lsrs	r5, r1, #20
    7ffa:	0b12      	lsrs	r2, r2, #12
    7ffc:	0564      	lsls	r4, r4, #21
    7ffe:	052d      	lsls	r5, r5, #20
    8000:	4315      	orrs	r5, r2
    8002:	0862      	lsrs	r2, r4, #1
    8004:	4caf      	ldr	r4, [pc, #700]	; (82c4 <__aeabi_dsub+0x36c>)
    8006:	07db      	lsls	r3, r3, #31
    8008:	402c      	ands	r4, r5
    800a:	4314      	orrs	r4, r2
    800c:	0064      	lsls	r4, r4, #1
    800e:	0864      	lsrs	r4, r4, #1
    8010:	431c      	orrs	r4, r3
    8012:	0021      	movs	r1, r4
    8014:	bc1c      	pop	{r2, r3, r4}
    8016:	4690      	mov	r8, r2
    8018:	4699      	mov	r9, r3
    801a:	46a2      	mov	sl, r4
    801c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    801e:	4ba7      	ldr	r3, [pc, #668]	; (82bc <__aeabi_dsub+0x364>)
    8020:	429c      	cmp	r4, r3
    8022:	d0c5      	beq.n	7fb0 <__aeabi_dsub+0x58>
    8024:	2380      	movs	r3, #128	; 0x80
    8026:	041b      	lsls	r3, r3, #16
    8028:	4318      	orrs	r0, r3
    802a:	4663      	mov	r3, ip
    802c:	2b38      	cmp	r3, #56	; 0x38
    802e:	dd00      	ble.n	8032 <__aeabi_dsub+0xda>
    8030:	e0fd      	b.n	822e <__aeabi_dsub+0x2d6>
    8032:	2b1f      	cmp	r3, #31
    8034:	dd00      	ble.n	8038 <__aeabi_dsub+0xe0>
    8036:	e130      	b.n	829a <__aeabi_dsub+0x342>
    8038:	4662      	mov	r2, ip
    803a:	2320      	movs	r3, #32
    803c:	1a9b      	subs	r3, r3, r2
    803e:	0002      	movs	r2, r0
    8040:	409a      	lsls	r2, r3
    8042:	4666      	mov	r6, ip
    8044:	4690      	mov	r8, r2
    8046:	000a      	movs	r2, r1
    8048:	4099      	lsls	r1, r3
    804a:	40f2      	lsrs	r2, r6
    804c:	4646      	mov	r6, r8
    804e:	1e4b      	subs	r3, r1, #1
    8050:	4199      	sbcs	r1, r3
    8052:	4332      	orrs	r2, r6
    8054:	4311      	orrs	r1, r2
    8056:	4663      	mov	r3, ip
    8058:	0002      	movs	r2, r0
    805a:	40da      	lsrs	r2, r3
    805c:	1a69      	subs	r1, r5, r1
    805e:	428d      	cmp	r5, r1
    8060:	419b      	sbcs	r3, r3
    8062:	000d      	movs	r5, r1
    8064:	1aba      	subs	r2, r7, r2
    8066:	425b      	negs	r3, r3
    8068:	1ad7      	subs	r7, r2, r3
    806a:	023b      	lsls	r3, r7, #8
    806c:	d535      	bpl.n	80da <__aeabi_dsub+0x182>
    806e:	027a      	lsls	r2, r7, #9
    8070:	0a53      	lsrs	r3, r2, #9
    8072:	4698      	mov	r8, r3
    8074:	4643      	mov	r3, r8
    8076:	2b00      	cmp	r3, #0
    8078:	d100      	bne.n	807c <__aeabi_dsub+0x124>
    807a:	e0c4      	b.n	8206 <__aeabi_dsub+0x2ae>
    807c:	4640      	mov	r0, r8
    807e:	f000 fc6f 	bl	8960 <__clzsi2>
    8082:	0003      	movs	r3, r0
    8084:	3b08      	subs	r3, #8
    8086:	2b1f      	cmp	r3, #31
    8088:	dd00      	ble.n	808c <__aeabi_dsub+0x134>
    808a:	e0c5      	b.n	8218 <__aeabi_dsub+0x2c0>
    808c:	2220      	movs	r2, #32
    808e:	0029      	movs	r1, r5
    8090:	1ad2      	subs	r2, r2, r3
    8092:	4647      	mov	r7, r8
    8094:	40d1      	lsrs	r1, r2
    8096:	409f      	lsls	r7, r3
    8098:	000a      	movs	r2, r1
    809a:	409d      	lsls	r5, r3
    809c:	433a      	orrs	r2, r7
    809e:	429c      	cmp	r4, r3
    80a0:	dd00      	ble.n	80a4 <__aeabi_dsub+0x14c>
    80a2:	e0c0      	b.n	8226 <__aeabi_dsub+0x2ce>
    80a4:	1b1c      	subs	r4, r3, r4
    80a6:	1c63      	adds	r3, r4, #1
    80a8:	2b1f      	cmp	r3, #31
    80aa:	dd00      	ble.n	80ae <__aeabi_dsub+0x156>
    80ac:	e0e4      	b.n	8278 <__aeabi_dsub+0x320>
    80ae:	2120      	movs	r1, #32
    80b0:	0014      	movs	r4, r2
    80b2:	0028      	movs	r0, r5
    80b4:	1ac9      	subs	r1, r1, r3
    80b6:	40d8      	lsrs	r0, r3
    80b8:	408c      	lsls	r4, r1
    80ba:	408d      	lsls	r5, r1
    80bc:	4304      	orrs	r4, r0
    80be:	40da      	lsrs	r2, r3
    80c0:	1e68      	subs	r0, r5, #1
    80c2:	4185      	sbcs	r5, r0
    80c4:	0017      	movs	r7, r2
    80c6:	4325      	orrs	r5, r4
    80c8:	2400      	movs	r4, #0
    80ca:	e771      	b.n	7fb0 <__aeabi_dsub+0x58>
    80cc:	4642      	mov	r2, r8
    80ce:	4663      	mov	r3, ip
    80d0:	431a      	orrs	r2, r3
    80d2:	d100      	bne.n	80d6 <__aeabi_dsub+0x17e>
    80d4:	e24c      	b.n	8570 <__aeabi_dsub+0x618>
    80d6:	4667      	mov	r7, ip
    80d8:	4645      	mov	r5, r8
    80da:	076b      	lsls	r3, r5, #29
    80dc:	d000      	beq.n	80e0 <__aeabi_dsub+0x188>
    80de:	e769      	b.n	7fb4 <__aeabi_dsub+0x5c>
    80e0:	2301      	movs	r3, #1
    80e2:	4651      	mov	r1, sl
    80e4:	0778      	lsls	r0, r7, #29
    80e6:	08ed      	lsrs	r5, r5, #3
    80e8:	08fa      	lsrs	r2, r7, #3
    80ea:	400b      	ands	r3, r1
    80ec:	4305      	orrs	r5, r0
    80ee:	4973      	ldr	r1, [pc, #460]	; (82bc <__aeabi_dsub+0x364>)
    80f0:	428c      	cmp	r4, r1
    80f2:	d038      	beq.n	8166 <__aeabi_dsub+0x20e>
    80f4:	0312      	lsls	r2, r2, #12
    80f6:	0564      	lsls	r4, r4, #21
    80f8:	0b12      	lsrs	r2, r2, #12
    80fa:	0d64      	lsrs	r4, r4, #21
    80fc:	e779      	b.n	7ff2 <__aeabi_dsub+0x9a>
    80fe:	2e00      	cmp	r6, #0
    8100:	dc00      	bgt.n	8104 <__aeabi_dsub+0x1ac>
    8102:	e09a      	b.n	823a <__aeabi_dsub+0x2e2>
    8104:	2a00      	cmp	r2, #0
    8106:	d047      	beq.n	8198 <__aeabi_dsub+0x240>
    8108:	4a6c      	ldr	r2, [pc, #432]	; (82bc <__aeabi_dsub+0x364>)
    810a:	4294      	cmp	r4, r2
    810c:	d100      	bne.n	8110 <__aeabi_dsub+0x1b8>
    810e:	e74f      	b.n	7fb0 <__aeabi_dsub+0x58>
    8110:	2280      	movs	r2, #128	; 0x80
    8112:	0412      	lsls	r2, r2, #16
    8114:	4310      	orrs	r0, r2
    8116:	4662      	mov	r2, ip
    8118:	2a38      	cmp	r2, #56	; 0x38
    811a:	dc00      	bgt.n	811e <__aeabi_dsub+0x1c6>
    811c:	e108      	b.n	8330 <__aeabi_dsub+0x3d8>
    811e:	4301      	orrs	r1, r0
    8120:	1e48      	subs	r0, r1, #1
    8122:	4181      	sbcs	r1, r0
    8124:	2200      	movs	r2, #0
    8126:	b2c9      	uxtb	r1, r1
    8128:	1949      	adds	r1, r1, r5
    812a:	19d2      	adds	r2, r2, r7
    812c:	42a9      	cmp	r1, r5
    812e:	41bf      	sbcs	r7, r7
    8130:	000d      	movs	r5, r1
    8132:	427f      	negs	r7, r7
    8134:	18bf      	adds	r7, r7, r2
    8136:	023a      	lsls	r2, r7, #8
    8138:	d400      	bmi.n	813c <__aeabi_dsub+0x1e4>
    813a:	e142      	b.n	83c2 <__aeabi_dsub+0x46a>
    813c:	4a5f      	ldr	r2, [pc, #380]	; (82bc <__aeabi_dsub+0x364>)
    813e:	3401      	adds	r4, #1
    8140:	4294      	cmp	r4, r2
    8142:	d100      	bne.n	8146 <__aeabi_dsub+0x1ee>
    8144:	e14e      	b.n	83e4 <__aeabi_dsub+0x48c>
    8146:	2001      	movs	r0, #1
    8148:	4a5d      	ldr	r2, [pc, #372]	; (82c0 <__aeabi_dsub+0x368>)
    814a:	0869      	lsrs	r1, r5, #1
    814c:	403a      	ands	r2, r7
    814e:	4028      	ands	r0, r5
    8150:	4308      	orrs	r0, r1
    8152:	07d5      	lsls	r5, r2, #31
    8154:	4305      	orrs	r5, r0
    8156:	0857      	lsrs	r7, r2, #1
    8158:	469a      	mov	sl, r3
    815a:	e729      	b.n	7fb0 <__aeabi_dsub+0x58>
    815c:	0006      	movs	r6, r0
    815e:	430e      	orrs	r6, r1
    8160:	d000      	beq.n	8164 <__aeabi_dsub+0x20c>
    8162:	e717      	b.n	7f94 <__aeabi_dsub+0x3c>
    8164:	e714      	b.n	7f90 <__aeabi_dsub+0x38>
    8166:	0029      	movs	r1, r5
    8168:	4311      	orrs	r1, r2
    816a:	d100      	bne.n	816e <__aeabi_dsub+0x216>
    816c:	e1f9      	b.n	8562 <__aeabi_dsub+0x60a>
    816e:	2180      	movs	r1, #128	; 0x80
    8170:	0309      	lsls	r1, r1, #12
    8172:	430a      	orrs	r2, r1
    8174:	0312      	lsls	r2, r2, #12
    8176:	0b12      	lsrs	r2, r2, #12
    8178:	e73b      	b.n	7ff2 <__aeabi_dsub+0x9a>
    817a:	2301      	movs	r3, #1
    817c:	425b      	negs	r3, r3
    817e:	4698      	mov	r8, r3
    8180:	44c4      	add	ip, r8
    8182:	4663      	mov	r3, ip
    8184:	2b00      	cmp	r3, #0
    8186:	d172      	bne.n	826e <__aeabi_dsub+0x316>
    8188:	1a69      	subs	r1, r5, r1
    818a:	428d      	cmp	r5, r1
    818c:	419b      	sbcs	r3, r3
    818e:	1a3f      	subs	r7, r7, r0
    8190:	425b      	negs	r3, r3
    8192:	1aff      	subs	r7, r7, r3
    8194:	000d      	movs	r5, r1
    8196:	e768      	b.n	806a <__aeabi_dsub+0x112>
    8198:	0002      	movs	r2, r0
    819a:	430a      	orrs	r2, r1
    819c:	d100      	bne.n	81a0 <__aeabi_dsub+0x248>
    819e:	e707      	b.n	7fb0 <__aeabi_dsub+0x58>
    81a0:	2201      	movs	r2, #1
    81a2:	4252      	negs	r2, r2
    81a4:	4690      	mov	r8, r2
    81a6:	44c4      	add	ip, r8
    81a8:	4662      	mov	r2, ip
    81aa:	2a00      	cmp	r2, #0
    81ac:	d000      	beq.n	81b0 <__aeabi_dsub+0x258>
    81ae:	e0e6      	b.n	837e <__aeabi_dsub+0x426>
    81b0:	1869      	adds	r1, r5, r1
    81b2:	42a9      	cmp	r1, r5
    81b4:	41b6      	sbcs	r6, r6
    81b6:	183f      	adds	r7, r7, r0
    81b8:	4276      	negs	r6, r6
    81ba:	19f7      	adds	r7, r6, r7
    81bc:	000d      	movs	r5, r1
    81be:	e7ba      	b.n	8136 <__aeabi_dsub+0x1de>
    81c0:	2e00      	cmp	r6, #0
    81c2:	d000      	beq.n	81c6 <__aeabi_dsub+0x26e>
    81c4:	e080      	b.n	82c8 <__aeabi_dsub+0x370>
    81c6:	1c62      	adds	r2, r4, #1
    81c8:	0552      	lsls	r2, r2, #21
    81ca:	0d52      	lsrs	r2, r2, #21
    81cc:	2a01      	cmp	r2, #1
    81ce:	dc00      	bgt.n	81d2 <__aeabi_dsub+0x27a>
    81d0:	e0f9      	b.n	83c6 <__aeabi_dsub+0x46e>
    81d2:	1a6a      	subs	r2, r5, r1
    81d4:	4691      	mov	r9, r2
    81d6:	454d      	cmp	r5, r9
    81d8:	41b6      	sbcs	r6, r6
    81da:	1a3a      	subs	r2, r7, r0
    81dc:	4276      	negs	r6, r6
    81de:	1b92      	subs	r2, r2, r6
    81e0:	4690      	mov	r8, r2
    81e2:	0212      	lsls	r2, r2, #8
    81e4:	d400      	bmi.n	81e8 <__aeabi_dsub+0x290>
    81e6:	e099      	b.n	831c <__aeabi_dsub+0x3c4>
    81e8:	1b4d      	subs	r5, r1, r5
    81ea:	42a9      	cmp	r1, r5
    81ec:	4189      	sbcs	r1, r1
    81ee:	1bc7      	subs	r7, r0, r7
    81f0:	4249      	negs	r1, r1
    81f2:	1a7a      	subs	r2, r7, r1
    81f4:	4690      	mov	r8, r2
    81f6:	469a      	mov	sl, r3
    81f8:	e73c      	b.n	8074 <__aeabi_dsub+0x11c>
    81fa:	4652      	mov	r2, sl
    81fc:	2301      	movs	r3, #1
    81fe:	2500      	movs	r5, #0
    8200:	4013      	ands	r3, r2
    8202:	2200      	movs	r2, #0
    8204:	e6f5      	b.n	7ff2 <__aeabi_dsub+0x9a>
    8206:	0028      	movs	r0, r5
    8208:	f000 fbaa 	bl	8960 <__clzsi2>
    820c:	3020      	adds	r0, #32
    820e:	0003      	movs	r3, r0
    8210:	3b08      	subs	r3, #8
    8212:	2b1f      	cmp	r3, #31
    8214:	dc00      	bgt.n	8218 <__aeabi_dsub+0x2c0>
    8216:	e739      	b.n	808c <__aeabi_dsub+0x134>
    8218:	002a      	movs	r2, r5
    821a:	3828      	subs	r0, #40	; 0x28
    821c:	4082      	lsls	r2, r0
    821e:	2500      	movs	r5, #0
    8220:	429c      	cmp	r4, r3
    8222:	dc00      	bgt.n	8226 <__aeabi_dsub+0x2ce>
    8224:	e73e      	b.n	80a4 <__aeabi_dsub+0x14c>
    8226:	4f26      	ldr	r7, [pc, #152]	; (82c0 <__aeabi_dsub+0x368>)
    8228:	1ae4      	subs	r4, r4, r3
    822a:	4017      	ands	r7, r2
    822c:	e6c0      	b.n	7fb0 <__aeabi_dsub+0x58>
    822e:	4301      	orrs	r1, r0
    8230:	1e48      	subs	r0, r1, #1
    8232:	4181      	sbcs	r1, r0
    8234:	2200      	movs	r2, #0
    8236:	b2c9      	uxtb	r1, r1
    8238:	e710      	b.n	805c <__aeabi_dsub+0x104>
    823a:	2e00      	cmp	r6, #0
    823c:	d000      	beq.n	8240 <__aeabi_dsub+0x2e8>
    823e:	e0f1      	b.n	8424 <__aeabi_dsub+0x4cc>
    8240:	1c62      	adds	r2, r4, #1
    8242:	4694      	mov	ip, r2
    8244:	0552      	lsls	r2, r2, #21
    8246:	0d52      	lsrs	r2, r2, #21
    8248:	2a01      	cmp	r2, #1
    824a:	dc00      	bgt.n	824e <__aeabi_dsub+0x2f6>
    824c:	e0a0      	b.n	8390 <__aeabi_dsub+0x438>
    824e:	4a1b      	ldr	r2, [pc, #108]	; (82bc <__aeabi_dsub+0x364>)
    8250:	4594      	cmp	ip, r2
    8252:	d100      	bne.n	8256 <__aeabi_dsub+0x2fe>
    8254:	e0c5      	b.n	83e2 <__aeabi_dsub+0x48a>
    8256:	1869      	adds	r1, r5, r1
    8258:	42a9      	cmp	r1, r5
    825a:	4192      	sbcs	r2, r2
    825c:	183f      	adds	r7, r7, r0
    825e:	4252      	negs	r2, r2
    8260:	19d2      	adds	r2, r2, r7
    8262:	0849      	lsrs	r1, r1, #1
    8264:	07d5      	lsls	r5, r2, #31
    8266:	430d      	orrs	r5, r1
    8268:	0857      	lsrs	r7, r2, #1
    826a:	4664      	mov	r4, ip
    826c:	e6a0      	b.n	7fb0 <__aeabi_dsub+0x58>
    826e:	4b13      	ldr	r3, [pc, #76]	; (82bc <__aeabi_dsub+0x364>)
    8270:	429c      	cmp	r4, r3
    8272:	d000      	beq.n	8276 <__aeabi_dsub+0x31e>
    8274:	e6d9      	b.n	802a <__aeabi_dsub+0xd2>
    8276:	e69b      	b.n	7fb0 <__aeabi_dsub+0x58>
    8278:	0011      	movs	r1, r2
    827a:	3c1f      	subs	r4, #31
    827c:	40e1      	lsrs	r1, r4
    827e:	000c      	movs	r4, r1
    8280:	2b20      	cmp	r3, #32
    8282:	d100      	bne.n	8286 <__aeabi_dsub+0x32e>
    8284:	e080      	b.n	8388 <__aeabi_dsub+0x430>
    8286:	2140      	movs	r1, #64	; 0x40
    8288:	1acb      	subs	r3, r1, r3
    828a:	409a      	lsls	r2, r3
    828c:	4315      	orrs	r5, r2
    828e:	1e6a      	subs	r2, r5, #1
    8290:	4195      	sbcs	r5, r2
    8292:	2700      	movs	r7, #0
    8294:	4325      	orrs	r5, r4
    8296:	2400      	movs	r4, #0
    8298:	e71f      	b.n	80da <__aeabi_dsub+0x182>
    829a:	4663      	mov	r3, ip
    829c:	0002      	movs	r2, r0
    829e:	3b20      	subs	r3, #32
    82a0:	40da      	lsrs	r2, r3
    82a2:	4663      	mov	r3, ip
    82a4:	2b20      	cmp	r3, #32
    82a6:	d071      	beq.n	838c <__aeabi_dsub+0x434>
    82a8:	2340      	movs	r3, #64	; 0x40
    82aa:	4666      	mov	r6, ip
    82ac:	1b9b      	subs	r3, r3, r6
    82ae:	4098      	lsls	r0, r3
    82b0:	4301      	orrs	r1, r0
    82b2:	1e48      	subs	r0, r1, #1
    82b4:	4181      	sbcs	r1, r0
    82b6:	4311      	orrs	r1, r2
    82b8:	2200      	movs	r2, #0
    82ba:	e6cf      	b.n	805c <__aeabi_dsub+0x104>
    82bc:	000007ff 	.word	0x000007ff
    82c0:	ff7fffff 	.word	0xff7fffff
    82c4:	800fffff 	.word	0x800fffff
    82c8:	2c00      	cmp	r4, #0
    82ca:	d048      	beq.n	835e <__aeabi_dsub+0x406>
    82cc:	4cca      	ldr	r4, [pc, #808]	; (85f8 <__aeabi_dsub+0x6a0>)
    82ce:	42a2      	cmp	r2, r4
    82d0:	d100      	bne.n	82d4 <__aeabi_dsub+0x37c>
    82d2:	e0a2      	b.n	841a <__aeabi_dsub+0x4c2>
    82d4:	4274      	negs	r4, r6
    82d6:	46a1      	mov	r9, r4
    82d8:	2480      	movs	r4, #128	; 0x80
    82da:	0424      	lsls	r4, r4, #16
    82dc:	4327      	orrs	r7, r4
    82de:	464c      	mov	r4, r9
    82e0:	2c38      	cmp	r4, #56	; 0x38
    82e2:	dd00      	ble.n	82e6 <__aeabi_dsub+0x38e>
    82e4:	e0db      	b.n	849e <__aeabi_dsub+0x546>
    82e6:	2c1f      	cmp	r4, #31
    82e8:	dd00      	ble.n	82ec <__aeabi_dsub+0x394>
    82ea:	e144      	b.n	8576 <__aeabi_dsub+0x61e>
    82ec:	464e      	mov	r6, r9
    82ee:	2420      	movs	r4, #32
    82f0:	1ba4      	subs	r4, r4, r6
    82f2:	003e      	movs	r6, r7
    82f4:	40a6      	lsls	r6, r4
    82f6:	46a2      	mov	sl, r4
    82f8:	46b0      	mov	r8, r6
    82fa:	464c      	mov	r4, r9
    82fc:	002e      	movs	r6, r5
    82fe:	40e6      	lsrs	r6, r4
    8300:	46b4      	mov	ip, r6
    8302:	4646      	mov	r6, r8
    8304:	4664      	mov	r4, ip
    8306:	4326      	orrs	r6, r4
    8308:	4654      	mov	r4, sl
    830a:	40a5      	lsls	r5, r4
    830c:	1e6c      	subs	r4, r5, #1
    830e:	41a5      	sbcs	r5, r4
    8310:	0034      	movs	r4, r6
    8312:	432c      	orrs	r4, r5
    8314:	464d      	mov	r5, r9
    8316:	40ef      	lsrs	r7, r5
    8318:	1b0d      	subs	r5, r1, r4
    831a:	e028      	b.n	836e <__aeabi_dsub+0x416>
    831c:	464a      	mov	r2, r9
    831e:	4643      	mov	r3, r8
    8320:	464d      	mov	r5, r9
    8322:	431a      	orrs	r2, r3
    8324:	d000      	beq.n	8328 <__aeabi_dsub+0x3d0>
    8326:	e6a5      	b.n	8074 <__aeabi_dsub+0x11c>
    8328:	2300      	movs	r3, #0
    832a:	2400      	movs	r4, #0
    832c:	2500      	movs	r5, #0
    832e:	e6de      	b.n	80ee <__aeabi_dsub+0x196>
    8330:	2a1f      	cmp	r2, #31
    8332:	dc5a      	bgt.n	83ea <__aeabi_dsub+0x492>
    8334:	4666      	mov	r6, ip
    8336:	2220      	movs	r2, #32
    8338:	1b92      	subs	r2, r2, r6
    833a:	0006      	movs	r6, r0
    833c:	4096      	lsls	r6, r2
    833e:	4691      	mov	r9, r2
    8340:	46b0      	mov	r8, r6
    8342:	4662      	mov	r2, ip
    8344:	000e      	movs	r6, r1
    8346:	40d6      	lsrs	r6, r2
    8348:	4642      	mov	r2, r8
    834a:	4316      	orrs	r6, r2
    834c:	464a      	mov	r2, r9
    834e:	4091      	lsls	r1, r2
    8350:	1e4a      	subs	r2, r1, #1
    8352:	4191      	sbcs	r1, r2
    8354:	0002      	movs	r2, r0
    8356:	4660      	mov	r0, ip
    8358:	4331      	orrs	r1, r6
    835a:	40c2      	lsrs	r2, r0
    835c:	e6e4      	b.n	8128 <__aeabi_dsub+0x1d0>
    835e:	003c      	movs	r4, r7
    8360:	432c      	orrs	r4, r5
    8362:	d05a      	beq.n	841a <__aeabi_dsub+0x4c2>
    8364:	43f4      	mvns	r4, r6
    8366:	46a1      	mov	r9, r4
    8368:	2c00      	cmp	r4, #0
    836a:	d152      	bne.n	8412 <__aeabi_dsub+0x4ba>
    836c:	1b4d      	subs	r5, r1, r5
    836e:	42a9      	cmp	r1, r5
    8370:	4189      	sbcs	r1, r1
    8372:	1bc7      	subs	r7, r0, r7
    8374:	4249      	negs	r1, r1
    8376:	1a7f      	subs	r7, r7, r1
    8378:	0014      	movs	r4, r2
    837a:	469a      	mov	sl, r3
    837c:	e675      	b.n	806a <__aeabi_dsub+0x112>
    837e:	4a9e      	ldr	r2, [pc, #632]	; (85f8 <__aeabi_dsub+0x6a0>)
    8380:	4294      	cmp	r4, r2
    8382:	d000      	beq.n	8386 <__aeabi_dsub+0x42e>
    8384:	e6c7      	b.n	8116 <__aeabi_dsub+0x1be>
    8386:	e613      	b.n	7fb0 <__aeabi_dsub+0x58>
    8388:	2200      	movs	r2, #0
    838a:	e77f      	b.n	828c <__aeabi_dsub+0x334>
    838c:	2000      	movs	r0, #0
    838e:	e78f      	b.n	82b0 <__aeabi_dsub+0x358>
    8390:	2c00      	cmp	r4, #0
    8392:	d000      	beq.n	8396 <__aeabi_dsub+0x43e>
    8394:	e0c8      	b.n	8528 <__aeabi_dsub+0x5d0>
    8396:	003b      	movs	r3, r7
    8398:	432b      	orrs	r3, r5
    839a:	d100      	bne.n	839e <__aeabi_dsub+0x446>
    839c:	e10f      	b.n	85be <__aeabi_dsub+0x666>
    839e:	0003      	movs	r3, r0
    83a0:	430b      	orrs	r3, r1
    83a2:	d100      	bne.n	83a6 <__aeabi_dsub+0x44e>
    83a4:	e604      	b.n	7fb0 <__aeabi_dsub+0x58>
    83a6:	1869      	adds	r1, r5, r1
    83a8:	42a9      	cmp	r1, r5
    83aa:	419b      	sbcs	r3, r3
    83ac:	183f      	adds	r7, r7, r0
    83ae:	425b      	negs	r3, r3
    83b0:	19df      	adds	r7, r3, r7
    83b2:	023b      	lsls	r3, r7, #8
    83b4:	d400      	bmi.n	83b8 <__aeabi_dsub+0x460>
    83b6:	e11a      	b.n	85ee <__aeabi_dsub+0x696>
    83b8:	4b90      	ldr	r3, [pc, #576]	; (85fc <__aeabi_dsub+0x6a4>)
    83ba:	000d      	movs	r5, r1
    83bc:	401f      	ands	r7, r3
    83be:	4664      	mov	r4, ip
    83c0:	e5f6      	b.n	7fb0 <__aeabi_dsub+0x58>
    83c2:	469a      	mov	sl, r3
    83c4:	e689      	b.n	80da <__aeabi_dsub+0x182>
    83c6:	003a      	movs	r2, r7
    83c8:	432a      	orrs	r2, r5
    83ca:	2c00      	cmp	r4, #0
    83cc:	d15c      	bne.n	8488 <__aeabi_dsub+0x530>
    83ce:	2a00      	cmp	r2, #0
    83d0:	d175      	bne.n	84be <__aeabi_dsub+0x566>
    83d2:	0002      	movs	r2, r0
    83d4:	430a      	orrs	r2, r1
    83d6:	d100      	bne.n	83da <__aeabi_dsub+0x482>
    83d8:	e0ca      	b.n	8570 <__aeabi_dsub+0x618>
    83da:	0007      	movs	r7, r0
    83dc:	000d      	movs	r5, r1
    83de:	469a      	mov	sl, r3
    83e0:	e5e6      	b.n	7fb0 <__aeabi_dsub+0x58>
    83e2:	4664      	mov	r4, ip
    83e4:	2200      	movs	r2, #0
    83e6:	2500      	movs	r5, #0
    83e8:	e681      	b.n	80ee <__aeabi_dsub+0x196>
    83ea:	4662      	mov	r2, ip
    83ec:	0006      	movs	r6, r0
    83ee:	3a20      	subs	r2, #32
    83f0:	40d6      	lsrs	r6, r2
    83f2:	4662      	mov	r2, ip
    83f4:	46b0      	mov	r8, r6
    83f6:	2a20      	cmp	r2, #32
    83f8:	d100      	bne.n	83fc <__aeabi_dsub+0x4a4>
    83fa:	e0b7      	b.n	856c <__aeabi_dsub+0x614>
    83fc:	2240      	movs	r2, #64	; 0x40
    83fe:	4666      	mov	r6, ip
    8400:	1b92      	subs	r2, r2, r6
    8402:	4090      	lsls	r0, r2
    8404:	4301      	orrs	r1, r0
    8406:	4642      	mov	r2, r8
    8408:	1e48      	subs	r0, r1, #1
    840a:	4181      	sbcs	r1, r0
    840c:	4311      	orrs	r1, r2
    840e:	2200      	movs	r2, #0
    8410:	e68a      	b.n	8128 <__aeabi_dsub+0x1d0>
    8412:	4c79      	ldr	r4, [pc, #484]	; (85f8 <__aeabi_dsub+0x6a0>)
    8414:	42a2      	cmp	r2, r4
    8416:	d000      	beq.n	841a <__aeabi_dsub+0x4c2>
    8418:	e761      	b.n	82de <__aeabi_dsub+0x386>
    841a:	0007      	movs	r7, r0
    841c:	000d      	movs	r5, r1
    841e:	0014      	movs	r4, r2
    8420:	469a      	mov	sl, r3
    8422:	e5c5      	b.n	7fb0 <__aeabi_dsub+0x58>
    8424:	2c00      	cmp	r4, #0
    8426:	d141      	bne.n	84ac <__aeabi_dsub+0x554>
    8428:	003c      	movs	r4, r7
    842a:	432c      	orrs	r4, r5
    842c:	d078      	beq.n	8520 <__aeabi_dsub+0x5c8>
    842e:	43f4      	mvns	r4, r6
    8430:	46a1      	mov	r9, r4
    8432:	2c00      	cmp	r4, #0
    8434:	d020      	beq.n	8478 <__aeabi_dsub+0x520>
    8436:	4c70      	ldr	r4, [pc, #448]	; (85f8 <__aeabi_dsub+0x6a0>)
    8438:	42a2      	cmp	r2, r4
    843a:	d071      	beq.n	8520 <__aeabi_dsub+0x5c8>
    843c:	464c      	mov	r4, r9
    843e:	2c38      	cmp	r4, #56	; 0x38
    8440:	dd00      	ble.n	8444 <__aeabi_dsub+0x4ec>
    8442:	e0b2      	b.n	85aa <__aeabi_dsub+0x652>
    8444:	2c1f      	cmp	r4, #31
    8446:	dd00      	ble.n	844a <__aeabi_dsub+0x4f2>
    8448:	e0bc      	b.n	85c4 <__aeabi_dsub+0x66c>
    844a:	2620      	movs	r6, #32
    844c:	1b34      	subs	r4, r6, r4
    844e:	46a2      	mov	sl, r4
    8450:	003c      	movs	r4, r7
    8452:	4656      	mov	r6, sl
    8454:	40b4      	lsls	r4, r6
    8456:	464e      	mov	r6, r9
    8458:	46a0      	mov	r8, r4
    845a:	002c      	movs	r4, r5
    845c:	40f4      	lsrs	r4, r6
    845e:	46a4      	mov	ip, r4
    8460:	4644      	mov	r4, r8
    8462:	4666      	mov	r6, ip
    8464:	4334      	orrs	r4, r6
    8466:	46a4      	mov	ip, r4
    8468:	4654      	mov	r4, sl
    846a:	40a5      	lsls	r5, r4
    846c:	4664      	mov	r4, ip
    846e:	1e6e      	subs	r6, r5, #1
    8470:	41b5      	sbcs	r5, r6
    8472:	4325      	orrs	r5, r4
    8474:	464c      	mov	r4, r9
    8476:	40e7      	lsrs	r7, r4
    8478:	186d      	adds	r5, r5, r1
    847a:	428d      	cmp	r5, r1
    847c:	4189      	sbcs	r1, r1
    847e:	183f      	adds	r7, r7, r0
    8480:	4249      	negs	r1, r1
    8482:	19cf      	adds	r7, r1, r7
    8484:	0014      	movs	r4, r2
    8486:	e656      	b.n	8136 <__aeabi_dsub+0x1de>
    8488:	2a00      	cmp	r2, #0
    848a:	d12f      	bne.n	84ec <__aeabi_dsub+0x594>
    848c:	0002      	movs	r2, r0
    848e:	430a      	orrs	r2, r1
    8490:	d100      	bne.n	8494 <__aeabi_dsub+0x53c>
    8492:	e084      	b.n	859e <__aeabi_dsub+0x646>
    8494:	0007      	movs	r7, r0
    8496:	000d      	movs	r5, r1
    8498:	469a      	mov	sl, r3
    849a:	4c57      	ldr	r4, [pc, #348]	; (85f8 <__aeabi_dsub+0x6a0>)
    849c:	e588      	b.n	7fb0 <__aeabi_dsub+0x58>
    849e:	433d      	orrs	r5, r7
    84a0:	1e6f      	subs	r7, r5, #1
    84a2:	41bd      	sbcs	r5, r7
    84a4:	b2ec      	uxtb	r4, r5
    84a6:	2700      	movs	r7, #0
    84a8:	1b0d      	subs	r5, r1, r4
    84aa:	e760      	b.n	836e <__aeabi_dsub+0x416>
    84ac:	4c52      	ldr	r4, [pc, #328]	; (85f8 <__aeabi_dsub+0x6a0>)
    84ae:	42a2      	cmp	r2, r4
    84b0:	d036      	beq.n	8520 <__aeabi_dsub+0x5c8>
    84b2:	4274      	negs	r4, r6
    84b4:	2680      	movs	r6, #128	; 0x80
    84b6:	0436      	lsls	r6, r6, #16
    84b8:	46a1      	mov	r9, r4
    84ba:	4337      	orrs	r7, r6
    84bc:	e7be      	b.n	843c <__aeabi_dsub+0x4e4>
    84be:	0002      	movs	r2, r0
    84c0:	430a      	orrs	r2, r1
    84c2:	d100      	bne.n	84c6 <__aeabi_dsub+0x56e>
    84c4:	e574      	b.n	7fb0 <__aeabi_dsub+0x58>
    84c6:	1a6a      	subs	r2, r5, r1
    84c8:	4690      	mov	r8, r2
    84ca:	4545      	cmp	r5, r8
    84cc:	41b6      	sbcs	r6, r6
    84ce:	1a3a      	subs	r2, r7, r0
    84d0:	4276      	negs	r6, r6
    84d2:	1b92      	subs	r2, r2, r6
    84d4:	4694      	mov	ip, r2
    84d6:	0212      	lsls	r2, r2, #8
    84d8:	d400      	bmi.n	84dc <__aeabi_dsub+0x584>
    84da:	e5f7      	b.n	80cc <__aeabi_dsub+0x174>
    84dc:	1b4d      	subs	r5, r1, r5
    84de:	42a9      	cmp	r1, r5
    84e0:	4189      	sbcs	r1, r1
    84e2:	1bc7      	subs	r7, r0, r7
    84e4:	4249      	negs	r1, r1
    84e6:	1a7f      	subs	r7, r7, r1
    84e8:	469a      	mov	sl, r3
    84ea:	e561      	b.n	7fb0 <__aeabi_dsub+0x58>
    84ec:	0002      	movs	r2, r0
    84ee:	430a      	orrs	r2, r1
    84f0:	d03a      	beq.n	8568 <__aeabi_dsub+0x610>
    84f2:	08ed      	lsrs	r5, r5, #3
    84f4:	077c      	lsls	r4, r7, #29
    84f6:	432c      	orrs	r4, r5
    84f8:	2580      	movs	r5, #128	; 0x80
    84fa:	08fa      	lsrs	r2, r7, #3
    84fc:	032d      	lsls	r5, r5, #12
    84fe:	422a      	tst	r2, r5
    8500:	d008      	beq.n	8514 <__aeabi_dsub+0x5bc>
    8502:	08c7      	lsrs	r7, r0, #3
    8504:	422f      	tst	r7, r5
    8506:	d105      	bne.n	8514 <__aeabi_dsub+0x5bc>
    8508:	0745      	lsls	r5, r0, #29
    850a:	002c      	movs	r4, r5
    850c:	003a      	movs	r2, r7
    850e:	469a      	mov	sl, r3
    8510:	08c9      	lsrs	r1, r1, #3
    8512:	430c      	orrs	r4, r1
    8514:	0f67      	lsrs	r7, r4, #29
    8516:	00d2      	lsls	r2, r2, #3
    8518:	00e5      	lsls	r5, r4, #3
    851a:	4317      	orrs	r7, r2
    851c:	4c36      	ldr	r4, [pc, #216]	; (85f8 <__aeabi_dsub+0x6a0>)
    851e:	e547      	b.n	7fb0 <__aeabi_dsub+0x58>
    8520:	0007      	movs	r7, r0
    8522:	000d      	movs	r5, r1
    8524:	0014      	movs	r4, r2
    8526:	e543      	b.n	7fb0 <__aeabi_dsub+0x58>
    8528:	003a      	movs	r2, r7
    852a:	432a      	orrs	r2, r5
    852c:	d043      	beq.n	85b6 <__aeabi_dsub+0x65e>
    852e:	0002      	movs	r2, r0
    8530:	430a      	orrs	r2, r1
    8532:	d019      	beq.n	8568 <__aeabi_dsub+0x610>
    8534:	08ed      	lsrs	r5, r5, #3
    8536:	077c      	lsls	r4, r7, #29
    8538:	432c      	orrs	r4, r5
    853a:	2580      	movs	r5, #128	; 0x80
    853c:	08fa      	lsrs	r2, r7, #3
    853e:	032d      	lsls	r5, r5, #12
    8540:	422a      	tst	r2, r5
    8542:	d007      	beq.n	8554 <__aeabi_dsub+0x5fc>
    8544:	08c6      	lsrs	r6, r0, #3
    8546:	422e      	tst	r6, r5
    8548:	d104      	bne.n	8554 <__aeabi_dsub+0x5fc>
    854a:	0747      	lsls	r7, r0, #29
    854c:	003c      	movs	r4, r7
    854e:	0032      	movs	r2, r6
    8550:	08c9      	lsrs	r1, r1, #3
    8552:	430c      	orrs	r4, r1
    8554:	00d7      	lsls	r7, r2, #3
    8556:	0f62      	lsrs	r2, r4, #29
    8558:	00e5      	lsls	r5, r4, #3
    855a:	4317      	orrs	r7, r2
    855c:	469a      	mov	sl, r3
    855e:	4c26      	ldr	r4, [pc, #152]	; (85f8 <__aeabi_dsub+0x6a0>)
    8560:	e526      	b.n	7fb0 <__aeabi_dsub+0x58>
    8562:	2200      	movs	r2, #0
    8564:	2500      	movs	r5, #0
    8566:	e544      	b.n	7ff2 <__aeabi_dsub+0x9a>
    8568:	4c23      	ldr	r4, [pc, #140]	; (85f8 <__aeabi_dsub+0x6a0>)
    856a:	e521      	b.n	7fb0 <__aeabi_dsub+0x58>
    856c:	2000      	movs	r0, #0
    856e:	e749      	b.n	8404 <__aeabi_dsub+0x4ac>
    8570:	2300      	movs	r3, #0
    8572:	2500      	movs	r5, #0
    8574:	e5bb      	b.n	80ee <__aeabi_dsub+0x196>
    8576:	464c      	mov	r4, r9
    8578:	003e      	movs	r6, r7
    857a:	3c20      	subs	r4, #32
    857c:	40e6      	lsrs	r6, r4
    857e:	464c      	mov	r4, r9
    8580:	46b4      	mov	ip, r6
    8582:	2c20      	cmp	r4, #32
    8584:	d031      	beq.n	85ea <__aeabi_dsub+0x692>
    8586:	2440      	movs	r4, #64	; 0x40
    8588:	464e      	mov	r6, r9
    858a:	1ba6      	subs	r6, r4, r6
    858c:	40b7      	lsls	r7, r6
    858e:	433d      	orrs	r5, r7
    8590:	1e6c      	subs	r4, r5, #1
    8592:	41a5      	sbcs	r5, r4
    8594:	4664      	mov	r4, ip
    8596:	432c      	orrs	r4, r5
    8598:	2700      	movs	r7, #0
    859a:	1b0d      	subs	r5, r1, r4
    859c:	e6e7      	b.n	836e <__aeabi_dsub+0x416>
    859e:	2280      	movs	r2, #128	; 0x80
    85a0:	2300      	movs	r3, #0
    85a2:	0312      	lsls	r2, r2, #12
    85a4:	4c14      	ldr	r4, [pc, #80]	; (85f8 <__aeabi_dsub+0x6a0>)
    85a6:	2500      	movs	r5, #0
    85a8:	e5a1      	b.n	80ee <__aeabi_dsub+0x196>
    85aa:	433d      	orrs	r5, r7
    85ac:	1e6f      	subs	r7, r5, #1
    85ae:	41bd      	sbcs	r5, r7
    85b0:	2700      	movs	r7, #0
    85b2:	b2ed      	uxtb	r5, r5
    85b4:	e760      	b.n	8478 <__aeabi_dsub+0x520>
    85b6:	0007      	movs	r7, r0
    85b8:	000d      	movs	r5, r1
    85ba:	4c0f      	ldr	r4, [pc, #60]	; (85f8 <__aeabi_dsub+0x6a0>)
    85bc:	e4f8      	b.n	7fb0 <__aeabi_dsub+0x58>
    85be:	0007      	movs	r7, r0
    85c0:	000d      	movs	r5, r1
    85c2:	e4f5      	b.n	7fb0 <__aeabi_dsub+0x58>
    85c4:	464e      	mov	r6, r9
    85c6:	003c      	movs	r4, r7
    85c8:	3e20      	subs	r6, #32
    85ca:	40f4      	lsrs	r4, r6
    85cc:	46a0      	mov	r8, r4
    85ce:	464c      	mov	r4, r9
    85d0:	2c20      	cmp	r4, #32
    85d2:	d00e      	beq.n	85f2 <__aeabi_dsub+0x69a>
    85d4:	2440      	movs	r4, #64	; 0x40
    85d6:	464e      	mov	r6, r9
    85d8:	1ba4      	subs	r4, r4, r6
    85da:	40a7      	lsls	r7, r4
    85dc:	433d      	orrs	r5, r7
    85de:	1e6f      	subs	r7, r5, #1
    85e0:	41bd      	sbcs	r5, r7
    85e2:	4644      	mov	r4, r8
    85e4:	2700      	movs	r7, #0
    85e6:	4325      	orrs	r5, r4
    85e8:	e746      	b.n	8478 <__aeabi_dsub+0x520>
    85ea:	2700      	movs	r7, #0
    85ec:	e7cf      	b.n	858e <__aeabi_dsub+0x636>
    85ee:	000d      	movs	r5, r1
    85f0:	e573      	b.n	80da <__aeabi_dsub+0x182>
    85f2:	2700      	movs	r7, #0
    85f4:	e7f2      	b.n	85dc <__aeabi_dsub+0x684>
    85f6:	46c0      	nop			; (mov r8, r8)
    85f8:	000007ff 	.word	0x000007ff
    85fc:	ff7fffff 	.word	0xff7fffff

00008600 <__aeabi_dcmpun>:
    8600:	b570      	push	{r4, r5, r6, lr}
    8602:	4e0e      	ldr	r6, [pc, #56]	; (863c <__aeabi_dcmpun+0x3c>)
    8604:	030c      	lsls	r4, r1, #12
    8606:	031d      	lsls	r5, r3, #12
    8608:	0049      	lsls	r1, r1, #1
    860a:	005b      	lsls	r3, r3, #1
    860c:	0b24      	lsrs	r4, r4, #12
    860e:	0d49      	lsrs	r1, r1, #21
    8610:	0b2d      	lsrs	r5, r5, #12
    8612:	0d5b      	lsrs	r3, r3, #21
    8614:	42b1      	cmp	r1, r6
    8616:	d004      	beq.n	8622 <__aeabi_dcmpun+0x22>
    8618:	4908      	ldr	r1, [pc, #32]	; (863c <__aeabi_dcmpun+0x3c>)
    861a:	2000      	movs	r0, #0
    861c:	428b      	cmp	r3, r1
    861e:	d008      	beq.n	8632 <__aeabi_dcmpun+0x32>
    8620:	bd70      	pop	{r4, r5, r6, pc}
    8622:	4304      	orrs	r4, r0
    8624:	2001      	movs	r0, #1
    8626:	2c00      	cmp	r4, #0
    8628:	d1fa      	bne.n	8620 <__aeabi_dcmpun+0x20>
    862a:	4904      	ldr	r1, [pc, #16]	; (863c <__aeabi_dcmpun+0x3c>)
    862c:	2000      	movs	r0, #0
    862e:	428b      	cmp	r3, r1
    8630:	d1f6      	bne.n	8620 <__aeabi_dcmpun+0x20>
    8632:	4315      	orrs	r5, r2
    8634:	0028      	movs	r0, r5
    8636:	1e45      	subs	r5, r0, #1
    8638:	41a8      	sbcs	r0, r5
    863a:	e7f1      	b.n	8620 <__aeabi_dcmpun+0x20>
    863c:	000007ff 	.word	0x000007ff

00008640 <__aeabi_d2iz>:
    8640:	030b      	lsls	r3, r1, #12
    8642:	b530      	push	{r4, r5, lr}
    8644:	4d13      	ldr	r5, [pc, #76]	; (8694 <__aeabi_d2iz+0x54>)
    8646:	0b1a      	lsrs	r2, r3, #12
    8648:	004b      	lsls	r3, r1, #1
    864a:	0d5b      	lsrs	r3, r3, #21
    864c:	0fc9      	lsrs	r1, r1, #31
    864e:	2400      	movs	r4, #0
    8650:	42ab      	cmp	r3, r5
    8652:	dd11      	ble.n	8678 <__aeabi_d2iz+0x38>
    8654:	4c10      	ldr	r4, [pc, #64]	; (8698 <__aeabi_d2iz+0x58>)
    8656:	42a3      	cmp	r3, r4
    8658:	dc10      	bgt.n	867c <__aeabi_d2iz+0x3c>
    865a:	2480      	movs	r4, #128	; 0x80
    865c:	0364      	lsls	r4, r4, #13
    865e:	4322      	orrs	r2, r4
    8660:	4c0e      	ldr	r4, [pc, #56]	; (869c <__aeabi_d2iz+0x5c>)
    8662:	1ae4      	subs	r4, r4, r3
    8664:	2c1f      	cmp	r4, #31
    8666:	dd0c      	ble.n	8682 <__aeabi_d2iz+0x42>
    8668:	480d      	ldr	r0, [pc, #52]	; (86a0 <__aeabi_d2iz+0x60>)
    866a:	1ac3      	subs	r3, r0, r3
    866c:	40da      	lsrs	r2, r3
    866e:	0013      	movs	r3, r2
    8670:	425c      	negs	r4, r3
    8672:	2900      	cmp	r1, #0
    8674:	d100      	bne.n	8678 <__aeabi_d2iz+0x38>
    8676:	001c      	movs	r4, r3
    8678:	0020      	movs	r0, r4
    867a:	bd30      	pop	{r4, r5, pc}
    867c:	4b09      	ldr	r3, [pc, #36]	; (86a4 <__aeabi_d2iz+0x64>)
    867e:	18cc      	adds	r4, r1, r3
    8680:	e7fa      	b.n	8678 <__aeabi_d2iz+0x38>
    8682:	40e0      	lsrs	r0, r4
    8684:	4c08      	ldr	r4, [pc, #32]	; (86a8 <__aeabi_d2iz+0x68>)
    8686:	46a4      	mov	ip, r4
    8688:	4463      	add	r3, ip
    868a:	409a      	lsls	r2, r3
    868c:	0013      	movs	r3, r2
    868e:	4303      	orrs	r3, r0
    8690:	e7ee      	b.n	8670 <__aeabi_d2iz+0x30>
    8692:	46c0      	nop			; (mov r8, r8)
    8694:	000003fe 	.word	0x000003fe
    8698:	0000041d 	.word	0x0000041d
    869c:	00000433 	.word	0x00000433
    86a0:	00000413 	.word	0x00000413
    86a4:	7fffffff 	.word	0x7fffffff
    86a8:	fffffbed 	.word	0xfffffbed

000086ac <__aeabi_i2d>:
    86ac:	b570      	push	{r4, r5, r6, lr}
    86ae:	2800      	cmp	r0, #0
    86b0:	d030      	beq.n	8714 <__aeabi_i2d+0x68>
    86b2:	17c3      	asrs	r3, r0, #31
    86b4:	18c4      	adds	r4, r0, r3
    86b6:	405c      	eors	r4, r3
    86b8:	0fc5      	lsrs	r5, r0, #31
    86ba:	0020      	movs	r0, r4
    86bc:	f000 f950 	bl	8960 <__clzsi2>
    86c0:	4b17      	ldr	r3, [pc, #92]	; (8720 <__aeabi_i2d+0x74>)
    86c2:	4a18      	ldr	r2, [pc, #96]	; (8724 <__aeabi_i2d+0x78>)
    86c4:	1a1b      	subs	r3, r3, r0
    86c6:	1ad2      	subs	r2, r2, r3
    86c8:	2a1f      	cmp	r2, #31
    86ca:	dd18      	ble.n	86fe <__aeabi_i2d+0x52>
    86cc:	4a16      	ldr	r2, [pc, #88]	; (8728 <__aeabi_i2d+0x7c>)
    86ce:	1ad2      	subs	r2, r2, r3
    86d0:	4094      	lsls	r4, r2
    86d2:	2200      	movs	r2, #0
    86d4:	0324      	lsls	r4, r4, #12
    86d6:	055b      	lsls	r3, r3, #21
    86d8:	0b24      	lsrs	r4, r4, #12
    86da:	0d5b      	lsrs	r3, r3, #21
    86dc:	2100      	movs	r1, #0
    86de:	0010      	movs	r0, r2
    86e0:	0324      	lsls	r4, r4, #12
    86e2:	0d0a      	lsrs	r2, r1, #20
    86e4:	0512      	lsls	r2, r2, #20
    86e6:	0b24      	lsrs	r4, r4, #12
    86e8:	4314      	orrs	r4, r2
    86ea:	4a10      	ldr	r2, [pc, #64]	; (872c <__aeabi_i2d+0x80>)
    86ec:	051b      	lsls	r3, r3, #20
    86ee:	4014      	ands	r4, r2
    86f0:	431c      	orrs	r4, r3
    86f2:	0064      	lsls	r4, r4, #1
    86f4:	07ed      	lsls	r5, r5, #31
    86f6:	0864      	lsrs	r4, r4, #1
    86f8:	432c      	orrs	r4, r5
    86fa:	0021      	movs	r1, r4
    86fc:	bd70      	pop	{r4, r5, r6, pc}
    86fe:	0021      	movs	r1, r4
    8700:	4091      	lsls	r1, r2
    8702:	000a      	movs	r2, r1
    8704:	210b      	movs	r1, #11
    8706:	1a08      	subs	r0, r1, r0
    8708:	40c4      	lsrs	r4, r0
    870a:	055b      	lsls	r3, r3, #21
    870c:	0324      	lsls	r4, r4, #12
    870e:	0b24      	lsrs	r4, r4, #12
    8710:	0d5b      	lsrs	r3, r3, #21
    8712:	e7e3      	b.n	86dc <__aeabi_i2d+0x30>
    8714:	2500      	movs	r5, #0
    8716:	2300      	movs	r3, #0
    8718:	2400      	movs	r4, #0
    871a:	2200      	movs	r2, #0
    871c:	e7de      	b.n	86dc <__aeabi_i2d+0x30>
    871e:	46c0      	nop			; (mov r8, r8)
    8720:	0000041e 	.word	0x0000041e
    8724:	00000433 	.word	0x00000433
    8728:	00000413 	.word	0x00000413
    872c:	800fffff 	.word	0x800fffff

00008730 <__aeabi_ui2d>:
    8730:	b570      	push	{r4, r5, r6, lr}
    8732:	1e05      	subs	r5, r0, #0
    8734:	d028      	beq.n	8788 <__aeabi_ui2d+0x58>
    8736:	f000 f913 	bl	8960 <__clzsi2>
    873a:	4b15      	ldr	r3, [pc, #84]	; (8790 <__aeabi_ui2d+0x60>)
    873c:	4a15      	ldr	r2, [pc, #84]	; (8794 <__aeabi_ui2d+0x64>)
    873e:	1a1b      	subs	r3, r3, r0
    8740:	1ad2      	subs	r2, r2, r3
    8742:	2a1f      	cmp	r2, #31
    8744:	dd16      	ble.n	8774 <__aeabi_ui2d+0x44>
    8746:	002c      	movs	r4, r5
    8748:	4a13      	ldr	r2, [pc, #76]	; (8798 <__aeabi_ui2d+0x68>)
    874a:	2500      	movs	r5, #0
    874c:	1ad2      	subs	r2, r2, r3
    874e:	4094      	lsls	r4, r2
    8750:	055a      	lsls	r2, r3, #21
    8752:	0324      	lsls	r4, r4, #12
    8754:	0b24      	lsrs	r4, r4, #12
    8756:	0d52      	lsrs	r2, r2, #21
    8758:	2100      	movs	r1, #0
    875a:	0324      	lsls	r4, r4, #12
    875c:	0d0b      	lsrs	r3, r1, #20
    875e:	0b24      	lsrs	r4, r4, #12
    8760:	051b      	lsls	r3, r3, #20
    8762:	4323      	orrs	r3, r4
    8764:	4c0d      	ldr	r4, [pc, #52]	; (879c <__aeabi_ui2d+0x6c>)
    8766:	0512      	lsls	r2, r2, #20
    8768:	4023      	ands	r3, r4
    876a:	4313      	orrs	r3, r2
    876c:	005b      	lsls	r3, r3, #1
    876e:	0028      	movs	r0, r5
    8770:	0859      	lsrs	r1, r3, #1
    8772:	bd70      	pop	{r4, r5, r6, pc}
    8774:	210b      	movs	r1, #11
    8776:	002c      	movs	r4, r5
    8778:	1a08      	subs	r0, r1, r0
    877a:	40c4      	lsrs	r4, r0
    877c:	4095      	lsls	r5, r2
    877e:	0324      	lsls	r4, r4, #12
    8780:	055a      	lsls	r2, r3, #21
    8782:	0b24      	lsrs	r4, r4, #12
    8784:	0d52      	lsrs	r2, r2, #21
    8786:	e7e7      	b.n	8758 <__aeabi_ui2d+0x28>
    8788:	2200      	movs	r2, #0
    878a:	2400      	movs	r4, #0
    878c:	e7e4      	b.n	8758 <__aeabi_ui2d+0x28>
    878e:	46c0      	nop			; (mov r8, r8)
    8790:	0000041e 	.word	0x0000041e
    8794:	00000433 	.word	0x00000433
    8798:	00000413 	.word	0x00000413
    879c:	800fffff 	.word	0x800fffff

000087a0 <__aeabi_f2d>:
    87a0:	0042      	lsls	r2, r0, #1
    87a2:	0e12      	lsrs	r2, r2, #24
    87a4:	1c51      	adds	r1, r2, #1
    87a6:	0243      	lsls	r3, r0, #9
    87a8:	b2c9      	uxtb	r1, r1
    87aa:	b570      	push	{r4, r5, r6, lr}
    87ac:	0a5d      	lsrs	r5, r3, #9
    87ae:	0fc4      	lsrs	r4, r0, #31
    87b0:	2901      	cmp	r1, #1
    87b2:	dd15      	ble.n	87e0 <__aeabi_f2d+0x40>
    87b4:	21e0      	movs	r1, #224	; 0xe0
    87b6:	0089      	lsls	r1, r1, #2
    87b8:	468c      	mov	ip, r1
    87ba:	076d      	lsls	r5, r5, #29
    87bc:	0b1b      	lsrs	r3, r3, #12
    87be:	4462      	add	r2, ip
    87c0:	2100      	movs	r1, #0
    87c2:	0028      	movs	r0, r5
    87c4:	0d0d      	lsrs	r5, r1, #20
    87c6:	052d      	lsls	r5, r5, #20
    87c8:	432b      	orrs	r3, r5
    87ca:	4d1c      	ldr	r5, [pc, #112]	; (883c <__aeabi_f2d+0x9c>)
    87cc:	0552      	lsls	r2, r2, #21
    87ce:	402b      	ands	r3, r5
    87d0:	0852      	lsrs	r2, r2, #1
    87d2:	4313      	orrs	r3, r2
    87d4:	005b      	lsls	r3, r3, #1
    87d6:	07e4      	lsls	r4, r4, #31
    87d8:	085b      	lsrs	r3, r3, #1
    87da:	4323      	orrs	r3, r4
    87dc:	0019      	movs	r1, r3
    87de:	bd70      	pop	{r4, r5, r6, pc}
    87e0:	2a00      	cmp	r2, #0
    87e2:	d115      	bne.n	8810 <__aeabi_f2d+0x70>
    87e4:	2d00      	cmp	r5, #0
    87e6:	d01f      	beq.n	8828 <__aeabi_f2d+0x88>
    87e8:	0028      	movs	r0, r5
    87ea:	f000 f8b9 	bl	8960 <__clzsi2>
    87ee:	280a      	cmp	r0, #10
    87f0:	dc1d      	bgt.n	882e <__aeabi_f2d+0x8e>
    87f2:	230b      	movs	r3, #11
    87f4:	002a      	movs	r2, r5
    87f6:	1a1b      	subs	r3, r3, r0
    87f8:	40da      	lsrs	r2, r3
    87fa:	0013      	movs	r3, r2
    87fc:	0002      	movs	r2, r0
    87fe:	3215      	adds	r2, #21
    8800:	4095      	lsls	r5, r2
    8802:	4a0f      	ldr	r2, [pc, #60]	; (8840 <__aeabi_f2d+0xa0>)
    8804:	031b      	lsls	r3, r3, #12
    8806:	1a12      	subs	r2, r2, r0
    8808:	0552      	lsls	r2, r2, #21
    880a:	0b1b      	lsrs	r3, r3, #12
    880c:	0d52      	lsrs	r2, r2, #21
    880e:	e7d7      	b.n	87c0 <__aeabi_f2d+0x20>
    8810:	2d00      	cmp	r5, #0
    8812:	d006      	beq.n	8822 <__aeabi_f2d+0x82>
    8814:	2280      	movs	r2, #128	; 0x80
    8816:	0b1b      	lsrs	r3, r3, #12
    8818:	0312      	lsls	r2, r2, #12
    881a:	4313      	orrs	r3, r2
    881c:	076d      	lsls	r5, r5, #29
    881e:	4a09      	ldr	r2, [pc, #36]	; (8844 <__aeabi_f2d+0xa4>)
    8820:	e7ce      	b.n	87c0 <__aeabi_f2d+0x20>
    8822:	4a08      	ldr	r2, [pc, #32]	; (8844 <__aeabi_f2d+0xa4>)
    8824:	2300      	movs	r3, #0
    8826:	e7cb      	b.n	87c0 <__aeabi_f2d+0x20>
    8828:	2200      	movs	r2, #0
    882a:	2300      	movs	r3, #0
    882c:	e7c8      	b.n	87c0 <__aeabi_f2d+0x20>
    882e:	0003      	movs	r3, r0
    8830:	3b0b      	subs	r3, #11
    8832:	409d      	lsls	r5, r3
    8834:	002b      	movs	r3, r5
    8836:	2500      	movs	r5, #0
    8838:	e7e3      	b.n	8802 <__aeabi_f2d+0x62>
    883a:	46c0      	nop			; (mov r8, r8)
    883c:	800fffff 	.word	0x800fffff
    8840:	00000389 	.word	0x00000389
    8844:	000007ff 	.word	0x000007ff

00008848 <__aeabi_d2f>:
    8848:	004b      	lsls	r3, r1, #1
    884a:	b570      	push	{r4, r5, r6, lr}
    884c:	0d5e      	lsrs	r6, r3, #21
    884e:	030c      	lsls	r4, r1, #12
    8850:	1c75      	adds	r5, r6, #1
    8852:	0a64      	lsrs	r4, r4, #9
    8854:	0f42      	lsrs	r2, r0, #29
    8856:	056d      	lsls	r5, r5, #21
    8858:	4322      	orrs	r2, r4
    885a:	0fc9      	lsrs	r1, r1, #31
    885c:	00c4      	lsls	r4, r0, #3
    885e:	0d6d      	lsrs	r5, r5, #21
    8860:	2d01      	cmp	r5, #1
    8862:	dd2a      	ble.n	88ba <__aeabi_d2f+0x72>
    8864:	4b3b      	ldr	r3, [pc, #236]	; (8954 <__aeabi_d2f+0x10c>)
    8866:	18f3      	adds	r3, r6, r3
    8868:	2bfe      	cmp	r3, #254	; 0xfe
    886a:	dc1a      	bgt.n	88a2 <__aeabi_d2f+0x5a>
    886c:	2b00      	cmp	r3, #0
    886e:	dd42      	ble.n	88f6 <__aeabi_d2f+0xae>
    8870:	0180      	lsls	r0, r0, #6
    8872:	1e45      	subs	r5, r0, #1
    8874:	41a8      	sbcs	r0, r5
    8876:	00d2      	lsls	r2, r2, #3
    8878:	4310      	orrs	r0, r2
    887a:	0f62      	lsrs	r2, r4, #29
    887c:	4302      	orrs	r2, r0
    887e:	0750      	lsls	r0, r2, #29
    8880:	d004      	beq.n	888c <__aeabi_d2f+0x44>
    8882:	200f      	movs	r0, #15
    8884:	4010      	ands	r0, r2
    8886:	2804      	cmp	r0, #4
    8888:	d000      	beq.n	888c <__aeabi_d2f+0x44>
    888a:	3204      	adds	r2, #4
    888c:	2080      	movs	r0, #128	; 0x80
    888e:	04c0      	lsls	r0, r0, #19
    8890:	4010      	ands	r0, r2
    8892:	d021      	beq.n	88d8 <__aeabi_d2f+0x90>
    8894:	3301      	adds	r3, #1
    8896:	2bff      	cmp	r3, #255	; 0xff
    8898:	d003      	beq.n	88a2 <__aeabi_d2f+0x5a>
    889a:	0192      	lsls	r2, r2, #6
    889c:	0a52      	lsrs	r2, r2, #9
    889e:	b2db      	uxtb	r3, r3
    88a0:	e001      	b.n	88a6 <__aeabi_d2f+0x5e>
    88a2:	23ff      	movs	r3, #255	; 0xff
    88a4:	2200      	movs	r2, #0
    88a6:	0252      	lsls	r2, r2, #9
    88a8:	0a52      	lsrs	r2, r2, #9
    88aa:	05db      	lsls	r3, r3, #23
    88ac:	4313      	orrs	r3, r2
    88ae:	005b      	lsls	r3, r3, #1
    88b0:	07c9      	lsls	r1, r1, #31
    88b2:	085b      	lsrs	r3, r3, #1
    88b4:	430b      	orrs	r3, r1
    88b6:	0018      	movs	r0, r3
    88b8:	bd70      	pop	{r4, r5, r6, pc}
    88ba:	2e00      	cmp	r6, #0
    88bc:	d007      	beq.n	88ce <__aeabi_d2f+0x86>
    88be:	4314      	orrs	r4, r2
    88c0:	d0ef      	beq.n	88a2 <__aeabi_d2f+0x5a>
    88c2:	2080      	movs	r0, #128	; 0x80
    88c4:	00d2      	lsls	r2, r2, #3
    88c6:	0480      	lsls	r0, r0, #18
    88c8:	4302      	orrs	r2, r0
    88ca:	23ff      	movs	r3, #255	; 0xff
    88cc:	e7d7      	b.n	887e <__aeabi_d2f+0x36>
    88ce:	4322      	orrs	r2, r4
    88d0:	2300      	movs	r3, #0
    88d2:	2a00      	cmp	r2, #0
    88d4:	d003      	beq.n	88de <__aeabi_d2f+0x96>
    88d6:	2205      	movs	r2, #5
    88d8:	08d2      	lsrs	r2, r2, #3
    88da:	2bff      	cmp	r3, #255	; 0xff
    88dc:	d003      	beq.n	88e6 <__aeabi_d2f+0x9e>
    88de:	0252      	lsls	r2, r2, #9
    88e0:	0a52      	lsrs	r2, r2, #9
    88e2:	b2db      	uxtb	r3, r3
    88e4:	e7df      	b.n	88a6 <__aeabi_d2f+0x5e>
    88e6:	2a00      	cmp	r2, #0
    88e8:	d032      	beq.n	8950 <__aeabi_d2f+0x108>
    88ea:	2080      	movs	r0, #128	; 0x80
    88ec:	03c0      	lsls	r0, r0, #15
    88ee:	4302      	orrs	r2, r0
    88f0:	0252      	lsls	r2, r2, #9
    88f2:	0a52      	lsrs	r2, r2, #9
    88f4:	e7d7      	b.n	88a6 <__aeabi_d2f+0x5e>
    88f6:	0018      	movs	r0, r3
    88f8:	3017      	adds	r0, #23
    88fa:	db14      	blt.n	8926 <__aeabi_d2f+0xde>
    88fc:	2080      	movs	r0, #128	; 0x80
    88fe:	0400      	lsls	r0, r0, #16
    8900:	4302      	orrs	r2, r0
    8902:	201e      	movs	r0, #30
    8904:	1ac0      	subs	r0, r0, r3
    8906:	281f      	cmp	r0, #31
    8908:	dc0f      	bgt.n	892a <__aeabi_d2f+0xe2>
    890a:	0025      	movs	r5, r4
    890c:	4b12      	ldr	r3, [pc, #72]	; (8958 <__aeabi_d2f+0x110>)
    890e:	18f3      	adds	r3, r6, r3
    8910:	409d      	lsls	r5, r3
    8912:	1e6e      	subs	r6, r5, #1
    8914:	41b5      	sbcs	r5, r6
    8916:	409a      	lsls	r2, r3
    8918:	002b      	movs	r3, r5
    891a:	4313      	orrs	r3, r2
    891c:	0022      	movs	r2, r4
    891e:	40c2      	lsrs	r2, r0
    8920:	431a      	orrs	r2, r3
    8922:	2300      	movs	r3, #0
    8924:	e7ab      	b.n	887e <__aeabi_d2f+0x36>
    8926:	2300      	movs	r3, #0
    8928:	e7d5      	b.n	88d6 <__aeabi_d2f+0x8e>
    892a:	2502      	movs	r5, #2
    892c:	426d      	negs	r5, r5
    892e:	1aeb      	subs	r3, r5, r3
    8930:	0015      	movs	r5, r2
    8932:	40dd      	lsrs	r5, r3
    8934:	2820      	cmp	r0, #32
    8936:	d009      	beq.n	894c <__aeabi_d2f+0x104>
    8938:	4b08      	ldr	r3, [pc, #32]	; (895c <__aeabi_d2f+0x114>)
    893a:	18f3      	adds	r3, r6, r3
    893c:	409a      	lsls	r2, r3
    893e:	4314      	orrs	r4, r2
    8940:	1e62      	subs	r2, r4, #1
    8942:	4194      	sbcs	r4, r2
    8944:	0022      	movs	r2, r4
    8946:	2300      	movs	r3, #0
    8948:	432a      	orrs	r2, r5
    894a:	e798      	b.n	887e <__aeabi_d2f+0x36>
    894c:	2200      	movs	r2, #0
    894e:	e7f6      	b.n	893e <__aeabi_d2f+0xf6>
    8950:	2200      	movs	r2, #0
    8952:	e7a8      	b.n	88a6 <__aeabi_d2f+0x5e>
    8954:	fffffc80 	.word	0xfffffc80
    8958:	fffffc82 	.word	0xfffffc82
    895c:	fffffca2 	.word	0xfffffca2

00008960 <__clzsi2>:
    8960:	211c      	movs	r1, #28
    8962:	2301      	movs	r3, #1
    8964:	041b      	lsls	r3, r3, #16
    8966:	4298      	cmp	r0, r3
    8968:	d301      	bcc.n	896e <__clzsi2+0xe>
    896a:	0c00      	lsrs	r0, r0, #16
    896c:	3910      	subs	r1, #16
    896e:	0a1b      	lsrs	r3, r3, #8
    8970:	4298      	cmp	r0, r3
    8972:	d301      	bcc.n	8978 <__clzsi2+0x18>
    8974:	0a00      	lsrs	r0, r0, #8
    8976:	3908      	subs	r1, #8
    8978:	091b      	lsrs	r3, r3, #4
    897a:	4298      	cmp	r0, r3
    897c:	d301      	bcc.n	8982 <__clzsi2+0x22>
    897e:	0900      	lsrs	r0, r0, #4
    8980:	3904      	subs	r1, #4
    8982:	a202      	add	r2, pc, #8	; (adr r2, 898c <__clzsi2+0x2c>)
    8984:	5c10      	ldrb	r0, [r2, r0]
    8986:	1840      	adds	r0, r0, r1
    8988:	4770      	bx	lr
    898a:	46c0      	nop			; (mov r8, r8)
    898c:	02020304 	.word	0x02020304
    8990:	01010101 	.word	0x01010101
	...
    899c:	0000736d 	.word	0x0000736d
    89a0:	00000000 	.word	0x00000000
    89a4:	0000646d 	.word	0x0000646d
    89a8:	00000000 	.word	0x00000000
    89ac:	0000776d 	.word	0x0000776d
    89b0:	00000000 	.word	0x00000000
    89b4:	0000616d 	.word	0x0000616d
    89b8:	00000000 	.word	0x00000000
    89bc:	0000206d 	.word	0x0000206d
    89c0:	00000000 	.word	0x00000000

000089c4 <_tcc_intflag>:
    89c4:	00000001 00000002 00000004 00000008     ................
    89d4:	00001000 00002000 00004000 00008000     ..... ...@......
    89e4:	00010000 00020000 00040000 00080000     ................
    89f4:	0000776d 00000000 0000206d 00000000     mw......m ......
    8a04:	3e3e3e3e 3e3e3e3e 6425203e 20642520     >>>>>>>>> %d %d 
    8a14:	3c3c3c3c 3c3c3c3c 000a3c3c 21212121     <<<<<<<<<<..!!!!
    8a24:	21212121 21212121 21212121 21212121     !!!!!!!!!!!!!!!!
    8a34:	21212121 21212121 21212121 21212121     !!!!!!!!!!!!!!!!
    8a44:	21212121 21212121 21212121 21212121     !!!!!!!!!!!!!!!!
    8a54:	00002121 3f3f3f3f 3f3f3f3f 3f3f3f3f     !!..????????????
    8a64:	3f3f3f3f 3f3f3f3f 3f3f3f3f 3f3f3f3f     ????????????????
    8a74:	3f3f3f3f 3f3f3f3f 3f3f3f3f 3f3f3f3f     ????????????????
    8a84:	3f3f3f3f 00003f3f                       ??????..

00008a8c <tc_interrupt_vectors.12761>:
    8a8c:	00141312 42000800 42000c00 42001000     .......B...B...B
    8a9c:	42001400 42001800 42001c00 0c0b0a09     ...B...B...B....
    8aac:	00000e0d 00001ad2 00001ace 00001ace     ................
    8abc:	00001b2c 00001b2c 00001ae6 00001ad8     ,...,...........
    8acc:	00001aec 00001b1a 00001d9c 00001d7c     ............|...
    8adc:	00001d7c 00001e08 00001d8e 00001daa     |...............
    8aec:	00001d80 00001db8 00001df8 42002c00     .............,.B
    8afc:	42003000 42003400 001c1c1b 10000800     .0.B.4.B........
    8b0c:	00002000                                . ..

00008b10 <tc_interrupt_vectors.11902>:
    8b10:	00141312 6e6f7266 6f6e2074 73206564     ....front node s
    8b20:	70757465 6d6f6320 74656c70 00000065     etup complete...
    8b30:	00000043                                C...

00008b34 <_global_impure_ptr>:
    8b34:	2000000c 00464e49 00666e69 004e414e     ... INF.inf.NAN.
    8b44:	006e616e 31300030 35343332 39383736     nan.0.0123456789
    8b54:	44434241 30004645 34333231 38373635     ABCDEF.012345678
    8b64:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
    8b74:	4e614e00 00000000                       .NaN....

00008b7c <__sf_fake_stdin>:
	...

00008b9c <__sf_fake_stdout>:
	...

00008bbc <__sf_fake_stderr>:
	...
    8bdc:	49534f50 002e0058 00000000              POSIX.......

00008be8 <__mprec_tens>:
    8be8:	00000000 3ff00000 00000000 40240000     .......?......$@
    8bf8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    8c08:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    8c18:	00000000 412e8480 00000000 416312d0     .......A......cA
    8c28:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    8c38:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    8c48:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    8c58:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    8c68:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    8c78:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    8c88:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    8c98:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    8ca8:	79d99db4 44ea7843                       ...yCx.D

00008cb0 <__mprec_bigtens>:
    8cb0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    8cc0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    8cd0:	7f73bf3c 75154fdd                       <.s..O.u

00008cd8 <p05.5385>:
    8cd8:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    8ce8:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....
    8cf8:	000066ca 000065ee 000066ac 00006684     .f...e...f...f..
    8d08:	000066ac 00006678 000066ac 00006684     .f..xf...f...f..
    8d18:	000065ee 000065ee 00006678 00006684     .e...e..xf...f..
    8d28:	00006730 00006730 00006730 000066b2     0g..0g..0g...f..
    8d38:	000065ee 000065ee 00006698 00006682     .e...e...f...f..
    8d48:	00006698 00006678 00006698 00006682     .f..xf...f...f..
    8d58:	000065ee 000065ee 00006678 00006682     .e...e..xf...f..
    8d68:	00006730 00006730 00006730 0000673c     0g..0g..0g..<g..
    8d78:	00006a28 00006986 00006986 00006984     (j...i...i...i..
    8d88:	00006a1a 00006a1a 00006a10 00006984     .j...j...j...i..
    8d98:	00006a1a 00006a10 00006a1a 00006984     .j...j...j...i..
    8da8:	00006a20 00006a20 00006a20 00006aaa      j.. j.. j...j..
    8db8:	0000740c 000072da 000073e0 000072d0     .t...r...s...r..
    8dc8:	000073e0 000073ea 000073e0 000072d0     .s...s...s...r..
    8dd8:	000072da 000072da 000073ea 000072d0     .r...r...s...r..
    8de8:	000072c6 000072c6 000072c6 0000763c     .r...r...r..<v..
    8df8:	00007c54 00007b14 00007b14 00007b12     T|...{...{...{..
    8e08:	00007c2c 00007c2c 00007c1e 00007b12     ,|..,|...|...{..
    8e18:	00007c2c 00007c1e 00007c2c 00007b12     ,|...|..,|...{..
    8e28:	00007c34 00007c34 00007c34 00007e34     4|..4|..4|..4~..

00008e38 <_init>:
    8e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e3a:	46c0      	nop			; (mov r8, r8)
    8e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8e3e:	bc08      	pop	{r3}
    8e40:	469e      	mov	lr, r3
    8e42:	4770      	bx	lr

00008e44 <__init_array_start>:
    8e44:	000000dd 	.word	0x000000dd

00008e48 <_fini>:
    8e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e4a:	46c0      	nop			; (mov r8, r8)
    8e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8e4e:	bc08      	pop	{r3}
    8e50:	469e      	mov	lr, r3
    8e52:	4770      	bx	lr

00008e54 <__fini_array_start>:
    8e54:	000000b5 	.word	0x000000b5
