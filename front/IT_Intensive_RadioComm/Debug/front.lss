
front.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008ee8  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000a8  20000000  00008ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000858  200000a8  00008f90  000200a8  2**2
                  ALLOC
  3 .stack        00002000  20000900  000097e8  000200a8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
  5 .comment      0000008c  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004d3b8  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006bed  00000000  00000000  0006d514  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000d13f  00000000  00000000  00074101  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c20  00000000  00000000  00081240  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001180  00000000  00000000  00081e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021dfa  00000000  00000000  00082fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001c593  00000000  00000000  000a4dda  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00089d03  00000000  00000000  000c136d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002cb4  00000000  00000000  0014b070  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002900 	.word	0x20002900
       4:	00002855 	.word	0x00002855
       8:	00002851 	.word	0x00002851
       c:	00002851 	.word	0x00002851
	...
      2c:	00002851 	.word	0x00002851
	...
      38:	00002851 	.word	0x00002851
      3c:	00002851 	.word	0x00002851
      40:	00002851 	.word	0x00002851
      44:	00002851 	.word	0x00002851
      48:	00002851 	.word	0x00002851
      4c:	00002851 	.word	0x00002851
      50:	00000b41 	.word	0x00000b41
      54:	00002851 	.word	0x00002851
      58:	00002851 	.word	0x00002851
      5c:	00002851 	.word	0x00002851
      60:	00002851 	.word	0x00002851
      64:	00001145 	.word	0x00001145
      68:	00001155 	.word	0x00001155
      6c:	00001165 	.word	0x00001165
      70:	00001175 	.word	0x00001175
      74:	00001185 	.word	0x00001185
      78:	00001195 	.word	0x00001195
      7c:	00000581 	.word	0x00000581
      80:	00000591 	.word	0x00000591
      84:	000005a1 	.word	0x000005a1
      88:	000024e9 	.word	0x000024e9
      8c:	000024f9 	.word	0x000024f9
      90:	00002509 	.word	0x00002509
	...
      9c:	00002851 	.word	0x00002851
      a0:	00002851 	.word	0x00002851
      a4:	00000000 	.word	0x00000000
      a8:	00002851 	.word	0x00002851
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000a8 	.word	0x200000a8
      d4:	00000000 	.word	0x00000000
      d8:	00008ee8 	.word	0x00008ee8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000ac 	.word	0x200000ac
     108:	00008ee8 	.word	0x00008ee8
     10c:	00008ee8 	.word	0x00008ee8
     110:	00000000 	.word	0x00000000

00000114 <artist_init_maze>:
*/

#include "Maze.h"

void artist_init_maze (void) {
	artist_front.maze_status = STOP;
     114:	2303      	movs	r3, #3
     116:	22d8      	movs	r2, #216	; 0xd8
     118:	4902      	ldr	r1, [pc, #8]	; (124 <artist_init_maze+0x10>)
     11a:	548b      	strb	r3, [r1, r2]
	past_distance.direction = STOP;
     11c:	4a02      	ldr	r2, [pc, #8]	; (128 <artist_init_maze+0x14>)
     11e:	7013      	strb	r3, [r2, #0]
}
     120:	4770      	bx	lr
     122:	46c0      	nop			; (mov r8, r8)
     124:	20000684 	.word	0x20000684
     128:	20000768 	.word	0x20000768

0000012c <artist_do_maze>:
	else if(artist_front.maze_status == RIGHT) printf("%s\n", "RIGH\0");
	else printf("%s\n", "BACK\0");
}
*/

void artist_do_maze (void) {
     12c:	b570      	push	{r4, r5, r6, lr}
// 		&& artist_front.right_distance < past_distance.right_distance 
// 		&& MAZE_RIGHT_DISTANCE_LOWERBOUND < artist_front.right_distance 
// 		&& artist_front.right_distance < MAZE_RIGHT_DISTANCE_UPPERBOUND){
// 		artist_front.maze_status = artist_front.maze_status;
// 	}
	if(past_distance.direction == RIGHT || past_distance.direction == LEFT){
     12e:	4b47      	ldr	r3, [pc, #284]	; (24c <artist_do_maze+0x120>)
     130:	781b      	ldrb	r3, [r3, #0]
     132:	3b01      	subs	r3, #1
     134:	2b01      	cmp	r3, #1
     136:	d804      	bhi.n	142 <artist_do_maze+0x16>
		artist_front.maze_status = STRAIGHT;
     138:	2100      	movs	r1, #0
     13a:	23d8      	movs	r3, #216	; 0xd8
     13c:	4a44      	ldr	r2, [pc, #272]	; (250 <artist_do_maze+0x124>)
     13e:	54d1      	strb	r1, [r2, r3]
     140:	e02e      	b.n	1a0 <artist_do_maze+0x74>
	}
	else if(artist_front.right_distance > MAZE_RIGHT_DISTANCE_UPPERBOUND){
     142:	23d4      	movs	r3, #212	; 0xd4
     144:	4a42      	ldr	r2, [pc, #264]	; (250 <artist_do_maze+0x124>)
     146:	58d4      	ldr	r4, [r2, r3]
     148:	2182      	movs	r1, #130	; 0x82
     14a:	05c9      	lsls	r1, r1, #23
     14c:	1c20      	adds	r0, r4, #0
     14e:	4b41      	ldr	r3, [pc, #260]	; (254 <artist_do_maze+0x128>)
     150:	4798      	blx	r3
     152:	2800      	cmp	r0, #0
     154:	d004      	beq.n	160 <artist_do_maze+0x34>
		artist_front.maze_status = RIGHT;
     156:	2102      	movs	r1, #2
     158:	23d8      	movs	r3, #216	; 0xd8
     15a:	4a3d      	ldr	r2, [pc, #244]	; (250 <artist_do_maze+0x124>)
     15c:	54d1      	strb	r1, [r2, r3]
     15e:	e01f      	b.n	1a0 <artist_do_maze+0x74>
	}
	else if(artist_front.center_distance <= MAZE_FRONT_WALL_EXIST_DETERMINATE){
     160:	2182      	movs	r1, #130	; 0x82
     162:	05c9      	lsls	r1, r1, #23
     164:	23cc      	movs	r3, #204	; 0xcc
     166:	4a3a      	ldr	r2, [pc, #232]	; (250 <artist_do_maze+0x124>)
     168:	58d0      	ldr	r0, [r2, r3]
     16a:	4b3b      	ldr	r3, [pc, #236]	; (258 <artist_do_maze+0x12c>)
     16c:	4798      	blx	r3
     16e:	2800      	cmp	r0, #0
     170:	d004      	beq.n	17c <artist_do_maze+0x50>
		artist_front.maze_status = LEFT;
     172:	2101      	movs	r1, #1
     174:	23d8      	movs	r3, #216	; 0xd8
     176:	4a36      	ldr	r2, [pc, #216]	; (250 <artist_do_maze+0x124>)
     178:	54d1      	strb	r1, [r2, r3]
     17a:	e011      	b.n	1a0 <artist_do_maze+0x74>
	}
	else if(artist_front.right_distance < MAZE_RIGHT_DISTANCE_LOWERBOUND){
     17c:	1c20      	adds	r0, r4, #0
     17e:	4b37      	ldr	r3, [pc, #220]	; (25c <artist_do_maze+0x130>)
     180:	4798      	blx	r3
     182:	4a37      	ldr	r2, [pc, #220]	; (260 <artist_do_maze+0x134>)
     184:	4b37      	ldr	r3, [pc, #220]	; (264 <artist_do_maze+0x138>)
     186:	4c38      	ldr	r4, [pc, #224]	; (268 <artist_do_maze+0x13c>)
     188:	47a0      	blx	r4
     18a:	2800      	cmp	r0, #0
     18c:	d004      	beq.n	198 <artist_do_maze+0x6c>
		artist_front.maze_status = LEFT;
     18e:	2101      	movs	r1, #1
     190:	23d8      	movs	r3, #216	; 0xd8
     192:	4a2f      	ldr	r2, [pc, #188]	; (250 <artist_do_maze+0x124>)
     194:	54d1      	strb	r1, [r2, r3]
     196:	e003      	b.n	1a0 <artist_do_maze+0x74>
	}
	else{
		artist_front.maze_status = STRAIGHT;
     198:	2100      	movs	r1, #0
     19a:	23d8      	movs	r3, #216	; 0xd8
     19c:	4a2c      	ldr	r2, [pc, #176]	; (250 <artist_do_maze+0x124>)
     19e:	54d1      	strb	r1, [r2, r3]
	}
	
	past_distance.direction = artist_front.maze_status;
     1a0:	4b2a      	ldr	r3, [pc, #168]	; (24c <artist_do_maze+0x120>)
     1a2:	4c2b      	ldr	r4, [pc, #172]	; (250 <artist_do_maze+0x124>)
     1a4:	25d8      	movs	r5, #216	; 0xd8
     1a6:	5d62      	ldrb	r2, [r4, r5]
     1a8:	701a      	strb	r2, [r3, #0]
	past_distance.left_distance = artist_front.left_distance;
     1aa:	22d0      	movs	r2, #208	; 0xd0
     1ac:	58a2      	ldr	r2, [r4, r2]
     1ae:	605a      	str	r2, [r3, #4]
	past_distance.center_distance = artist_front.center_distance;
     1b0:	22cc      	movs	r2, #204	; 0xcc
     1b2:	58a2      	ldr	r2, [r4, r2]
     1b4:	609a      	str	r2, [r3, #8]
	past_distance.right_distance = artist_front.right_distance;
     1b6:	22d4      	movs	r2, #212	; 0xd4
     1b8:	58a2      	ldr	r2, [r4, r2]
     1ba:	60da      	str	r2, [r3, #12]
	
	artist_print_ultrasonic_value();
     1bc:	4b2b      	ldr	r3, [pc, #172]	; (26c <artist_do_maze+0x140>)
     1be:	4798      	blx	r3
	if(artist_front.maze_status == STRAIGHT) printf("%s\n", "STRA\0");
     1c0:	5d63      	ldrb	r3, [r4, r5]
     1c2:	2b00      	cmp	r3, #0
     1c4:	d103      	bne.n	1ce <artist_do_maze+0xa2>
     1c6:	482a      	ldr	r0, [pc, #168]	; (270 <artist_do_maze+0x144>)
     1c8:	4b2a      	ldr	r3, [pc, #168]	; (274 <artist_do_maze+0x148>)
     1ca:	4798      	blx	r3
     1cc:	e011      	b.n	1f2 <artist_do_maze+0xc6>
	else if(artist_front.maze_status == LEFT) printf("%s\n", "LEFT\0");
     1ce:	2b01      	cmp	r3, #1
     1d0:	d104      	bne.n	1dc <artist_do_maze+0xb0>
     1d2:	4827      	ldr	r0, [pc, #156]	; (270 <artist_do_maze+0x144>)
     1d4:	3008      	adds	r0, #8
     1d6:	4b27      	ldr	r3, [pc, #156]	; (274 <artist_do_maze+0x148>)
     1d8:	4798      	blx	r3
     1da:	e00a      	b.n	1f2 <artist_do_maze+0xc6>
	else if(artist_front.maze_status == RIGHT) printf("%s\n", "RIGH\0");
     1dc:	2b02      	cmp	r3, #2
     1de:	d104      	bne.n	1ea <artist_do_maze+0xbe>
     1e0:	4823      	ldr	r0, [pc, #140]	; (270 <artist_do_maze+0x144>)
     1e2:	3010      	adds	r0, #16
     1e4:	4b23      	ldr	r3, [pc, #140]	; (274 <artist_do_maze+0x148>)
     1e6:	4798      	blx	r3
     1e8:	e003      	b.n	1f2 <artist_do_maze+0xc6>
	else printf("%s\n", "BACK\0");
     1ea:	4821      	ldr	r0, [pc, #132]	; (270 <artist_do_maze+0x144>)
     1ec:	3018      	adds	r0, #24
     1ee:	4b21      	ldr	r3, [pc, #132]	; (274 <artist_do_maze+0x148>)
     1f0:	4798      	blx	r3

	switch (artist_front.maze_status){
     1f2:	4a17      	ldr	r2, [pc, #92]	; (250 <artist_do_maze+0x124>)
     1f4:	23d8      	movs	r3, #216	; 0xd8
     1f6:	5cd1      	ldrb	r1, [r2, r3]
     1f8:	2904      	cmp	r1, #4
     1fa:	d825      	bhi.n	248 <artist_do_maze+0x11c>
     1fc:	008b      	lsls	r3, r1, #2
     1fe:	4a1e      	ldr	r2, [pc, #120]	; (278 <artist_do_maze+0x14c>)
     200:	58d3      	ldr	r3, [r2, r3]
     202:	469f      	mov	pc, r3
		case STRAIGHT :
		usart_write_buffer_job(&(artist_front.usart_instance), "mw\0\0\0", MAX_RX_BUFFER_LENGTH);
     204:	2205      	movs	r2, #5
     206:	491a      	ldr	r1, [pc, #104]	; (270 <artist_do_maze+0x144>)
     208:	3120      	adds	r1, #32
     20a:	481c      	ldr	r0, [pc, #112]	; (27c <artist_do_maze+0x150>)
     20c:	4b1c      	ldr	r3, [pc, #112]	; (280 <artist_do_maze+0x154>)
     20e:	4798      	blx	r3
		break;
     210:	e01a      	b.n	248 <artist_do_maze+0x11c>
		case LEFT :
		usart_write_buffer_job(&(artist_front.usart_instance), "ma\0\0\0", MAX_RX_BUFFER_LENGTH);
     212:	2205      	movs	r2, #5
     214:	4916      	ldr	r1, [pc, #88]	; (270 <artist_do_maze+0x144>)
     216:	3128      	adds	r1, #40	; 0x28
     218:	4818      	ldr	r0, [pc, #96]	; (27c <artist_do_maze+0x150>)
     21a:	4b19      	ldr	r3, [pc, #100]	; (280 <artist_do_maze+0x154>)
     21c:	4798      	blx	r3
		break;
     21e:	e013      	b.n	248 <artist_do_maze+0x11c>
		case RIGHT :
		usart_write_buffer_job(&(artist_front.usart_instance), "md\0\0\0", MAX_RX_BUFFER_LENGTH);
     220:	2205      	movs	r2, #5
     222:	4913      	ldr	r1, [pc, #76]	; (270 <artist_do_maze+0x144>)
     224:	3130      	adds	r1, #48	; 0x30
     226:	4815      	ldr	r0, [pc, #84]	; (27c <artist_do_maze+0x150>)
     228:	4b15      	ldr	r3, [pc, #84]	; (280 <artist_do_maze+0x154>)
     22a:	4798      	blx	r3
		break;
     22c:	e00c      	b.n	248 <artist_do_maze+0x11c>
		case BACK :
		usart_write_buffer_job(&(artist_front.usart_instance), "ms\0\0\0", MAX_RX_BUFFER_LENGTH);
     22e:	2205      	movs	r2, #5
     230:	490f      	ldr	r1, [pc, #60]	; (270 <artist_do_maze+0x144>)
     232:	3138      	adds	r1, #56	; 0x38
     234:	4811      	ldr	r0, [pc, #68]	; (27c <artist_do_maze+0x150>)
     236:	4b12      	ldr	r3, [pc, #72]	; (280 <artist_do_maze+0x154>)
     238:	4798      	blx	r3
		break;
     23a:	e005      	b.n	248 <artist_do_maze+0x11c>
		case STOP :
		usart_write_buffer_job(&(artist_front.usart_instance), "m \0\0\0", MAX_RX_BUFFER_LENGTH);
     23c:	2205      	movs	r2, #5
     23e:	490c      	ldr	r1, [pc, #48]	; (270 <artist_do_maze+0x144>)
     240:	3140      	adds	r1, #64	; 0x40
     242:	480e      	ldr	r0, [pc, #56]	; (27c <artist_do_maze+0x150>)
     244:	4b0e      	ldr	r3, [pc, #56]	; (280 <artist_do_maze+0x154>)
     246:	4798      	blx	r3
		break;
	}
}
     248:	bd70      	pop	{r4, r5, r6, pc}
     24a:	46c0      	nop			; (mov r8, r8)
     24c:	20000768 	.word	0x20000768
     250:	20000684 	.word	0x20000684
     254:	000062d1 	.word	0x000062d1
     258:	000062bd 	.word	0x000062bd
     25c:	00008865 	.word	0x00008865
     260:	66666666 	.word	0x66666666
     264:	400e6666 	.word	0x400e6666
     268:	00006235 	.word	0x00006235
     26c:	00000311 	.word	0x00000311
     270:	00008a74 	.word	0x00008a74
     274:	00003fe1 	.word	0x00003fe1
     278:	00008a60 	.word	0x00008a60
     27c:	200006fc 	.word	0x200006fc
     280:	000019b9 	.word	0x000019b9

00000284 <artist_pause_maze>:

void artist_pause_maze(void){
     284:	b510      	push	{r4, lr}
	artist_front.maze_status = STOP;
     286:	4805      	ldr	r0, [pc, #20]	; (29c <artist_pause_maze+0x18>)
     288:	2203      	movs	r2, #3
     28a:	23d8      	movs	r3, #216	; 0xd8
     28c:	54c2      	strb	r2, [r0, r3]
	usart_write_buffer_job(&(artist_front.usart_instance), "m \0\0\0", MAX_RX_BUFFER_LENGTH);
     28e:	3078      	adds	r0, #120	; 0x78
     290:	3202      	adds	r2, #2
     292:	4903      	ldr	r1, [pc, #12]	; (2a0 <artist_pause_maze+0x1c>)
     294:	3140      	adds	r1, #64	; 0x40
     296:	4b03      	ldr	r3, [pc, #12]	; (2a4 <artist_pause_maze+0x20>)
     298:	4798      	blx	r3
     29a:	bd10      	pop	{r4, pc}
     29c:	20000684 	.word	0x20000684
     2a0:	00008a74 	.word	0x00008a74
     2a4:	000019b9 	.word	0x000019b9

000002a8 <artist_ultrasonic_configure>:
 */
#include "TheArtist.h"
#include "UltraSonic.h"

void artist_ultrasonic_configure (struct artist_ultrasonic_module * module, uint8_t echo, uint8_t trig) {
	module->echo_pin	= echo; 
     2a8:	7001      	strb	r1, [r0, #0]
	module->trigger_pin = trig;  
     2aa:	7042      	strb	r2, [r0, #1]
	module->filter_large_change_counts = 0; 
     2ac:	2300      	movs	r3, #0
     2ae:	7083      	strb	r3, [r0, #2]
	module->fliter_old_val = 0; 
     2b0:	2300      	movs	r3, #0
     2b2:	6043      	str	r3, [r0, #4]
}
     2b4:	4770      	bx	lr
     2b6:	46c0      	nop			; (mov r8, r8)

000002b8 <artist_ultrasonic_gpio_init>:

void artist_ultrasonic_gpio_init() {
     2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ba:	b085      	sub	sp, #20
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     2bc:	a903      	add	r1, sp, #12
     2be:	2201      	movs	r2, #1
     2c0:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     2c2:	2300      	movs	r3, #0
     2c4:	708b      	strb	r3, [r1, #2]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     2c6:	ad02      	add	r5, sp, #8
     2c8:	702b      	strb	r3, [r5, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     2ca:	706a      	strb	r2, [r5, #1]
	config->powersave  = false;
     2cc:	70ab      	strb	r3, [r5, #2]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     2ce:	4668      	mov	r0, sp
     2d0:	7003      	strb	r3, [r0, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     2d2:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
     2d4:	7083      	strb	r3, [r0, #2]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     2d6:	ac01      	add	r4, sp, #4
     2d8:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     2da:	7062      	strb	r2, [r4, #1]
	config->powersave  = false;
     2dc:	70a3      	strb	r3, [r4, #2]
	port_get_config_defaults(&pin_config_trig);
	port_get_config_defaults(&pin_config_echo_center);
	port_get_config_defaults(&pin_config_echo_right);
	port_get_config_defaults(&pin_config_echo_left);

	pin_config_trig.direction			=	PORT_PIN_DIR_OUTPUT;
     2de:	700a      	strb	r2, [r1, #0]
	
	pin_config_echo_right.direction		=	PORT_PIN_DIR_INPUT;
	pin_config_echo_right.input_pull	=	PORT_PIN_PULL_UP;
	
	
	port_pin_set_config(artist_front.us_instance_center.trigger_pin, &pin_config_trig);
     2e0:	4f09      	ldr	r7, [pc, #36]	; (308 <artist_ultrasonic_gpio_init+0x50>)
     2e2:	33b5      	adds	r3, #181	; 0xb5
     2e4:	5cf8      	ldrb	r0, [r7, r3]
     2e6:	4e09      	ldr	r6, [pc, #36]	; (30c <artist_ultrasonic_gpio_init+0x54>)
     2e8:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_center.echo_pin, &pin_config_echo_center);
     2ea:	23b4      	movs	r3, #180	; 0xb4
     2ec:	5cf8      	ldrb	r0, [r7, r3]
     2ee:	0029      	movs	r1, r5
     2f0:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_left.echo_pin, &pin_config_echo_left);
     2f2:	23bc      	movs	r3, #188	; 0xbc
     2f4:	5cf8      	ldrb	r0, [r7, r3]
     2f6:	0021      	movs	r1, r4
     2f8:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_right.echo_pin, &pin_config_echo_right); 
     2fa:	23c4      	movs	r3, #196	; 0xc4
     2fc:	5cf8      	ldrb	r0, [r7, r3]
     2fe:	4669      	mov	r1, sp
     300:	47b0      	blx	r6
}
     302:	b005      	add	sp, #20
     304:	bdf0      	pop	{r4, r5, r6, r7, pc}
     306:	46c0      	nop			; (mov r8, r8)
     308:	20000684 	.word	0x20000684
     30c:	00000cb5 	.word	0x00000cb5

00000310 <artist_print_ultrasonic_value>:
	else if (FILTER_VAL < 0)	FILTER_VAL = 0;

	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
}

float artist_print_ultrasonic_value() {
     310:	b5f0      	push	{r4, r5, r6, r7, lr}
     312:	b085      	sub	sp, #20
	printf("%5.2f, %5.2f, %5.2f\n", 
				artist_front.left_distance, 
     314:	4d0b      	ldr	r5, [pc, #44]	; (344 <artist_print_ultrasonic_value+0x34>)

	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
}

float artist_print_ultrasonic_value() {
	printf("%5.2f, %5.2f, %5.2f\n", 
     316:	4c0c      	ldr	r4, [pc, #48]	; (348 <artist_print_ultrasonic_value+0x38>)
     318:	23d0      	movs	r3, #208	; 0xd0
     31a:	58e8      	ldr	r0, [r5, r3]
     31c:	47a0      	blx	r4
     31e:	0006      	movs	r6, r0
     320:	000f      	movs	r7, r1
				artist_front.left_distance, 
				artist_front.center_distance, 
				artist_front.right_distance);  
     322:	23d4      	movs	r3, #212	; 0xd4

	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
}

float artist_print_ultrasonic_value() {
	printf("%5.2f, %5.2f, %5.2f\n", 
     324:	58e8      	ldr	r0, [r5, r3]
     326:	47a0      	blx	r4
     328:	9002      	str	r0, [sp, #8]
     32a:	9103      	str	r1, [sp, #12]
				artist_front.left_distance, 
				artist_front.center_distance, 
     32c:	23cc      	movs	r3, #204	; 0xcc

	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
}

float artist_print_ultrasonic_value() {
	printf("%5.2f, %5.2f, %5.2f\n", 
     32e:	58e8      	ldr	r0, [r5, r3]
     330:	47a0      	blx	r4
     332:	9000      	str	r0, [sp, #0]
     334:	9101      	str	r1, [sp, #4]
     336:	0032      	movs	r2, r6
     338:	003b      	movs	r3, r7
     33a:	4804      	ldr	r0, [pc, #16]	; (34c <artist_print_ultrasonic_value+0x3c>)
     33c:	4904      	ldr	r1, [pc, #16]	; (350 <artist_print_ultrasonic_value+0x40>)
     33e:	4788      	blx	r1
				artist_front.left_distance, 
				artist_front.center_distance, 
				artist_front.right_distance);  
}
     340:	b005      	add	sp, #20
     342:	bdf0      	pop	{r4, r5, r6, r7, pc}
     344:	20000684 	.word	0x20000684
     348:	00008865 	.word	0x00008865
     34c:	00008abc 	.word	0x00008abc
     350:	00003ee9 	.word	0x00003ee9

00000354 <artist_ultrasonic_get_value>:
float artist_ultrasonic_get_value(struct artist_ultrasonic_module * const module) {
     354:	b5f0      	push	{r4, r5, r6, r7, lr}
     356:	b083      	sub	sp, #12
     358:	0004      	movs	r4, r0
	// TODO : use timer callback function!
	uint16_t start, end;
	uint16_t count = 0;
	
	port_pin_set_output_level(module->trigger_pin, false);
     35a:	7843      	ldrb	r3, [r0, #1]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     35c:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     35e:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     360:	2900      	cmp	r1, #0
     362:	d104      	bne.n	36e <artist_ultrasonic_get_value+0x1a>
		return &(ports[port_index]->Group[group_index]);
     364:	095a      	lsrs	r2, r3, #5
     366:	01d2      	lsls	r2, r2, #7
     368:	495d      	ldr	r1, [pc, #372]	; (4e0 <artist_ultrasonic_get_value+0x18c>)
     36a:	468c      	mov	ip, r1
     36c:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     36e:	211f      	movs	r1, #31
     370:	400b      	ands	r3, r1
     372:	391e      	subs	r1, #30
     374:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     376:	6151      	str	r1, [r2, #20]
	delay_us(40);
     378:	2028      	movs	r0, #40	; 0x28
     37a:	4b5a      	ldr	r3, [pc, #360]	; (4e4 <artist_ultrasonic_get_value+0x190>)
     37c:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, true);
     37e:	7863      	ldrb	r3, [r4, #1]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     380:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     382:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     384:	2900      	cmp	r1, #0
     386:	d104      	bne.n	392 <artist_ultrasonic_get_value+0x3e>
		return &(ports[port_index]->Group[group_index]);
     388:	095a      	lsrs	r2, r3, #5
     38a:	01d2      	lsls	r2, r2, #7
     38c:	4954      	ldr	r1, [pc, #336]	; (4e0 <artist_ultrasonic_get_value+0x18c>)
     38e:	468c      	mov	ip, r1
     390:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     392:	211f      	movs	r1, #31
     394:	400b      	ands	r3, r1
     396:	391e      	subs	r1, #30
     398:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     39a:	6191      	str	r1, [r2, #24]
	delay_us(10);
     39c:	200a      	movs	r0, #10
     39e:	4b51      	ldr	r3, [pc, #324]	; (4e4 <artist_ultrasonic_get_value+0x190>)
     3a0:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, false);
     3a2:	7863      	ldrb	r3, [r4, #1]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     3a4:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     3a6:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     3a8:	2900      	cmp	r1, #0
     3aa:	d104      	bne.n	3b6 <artist_ultrasonic_get_value+0x62>
		return &(ports[port_index]->Group[group_index]);
     3ac:	095a      	lsrs	r2, r3, #5
     3ae:	01d2      	lsls	r2, r2, #7
     3b0:	494b      	ldr	r1, [pc, #300]	; (4e0 <artist_ultrasonic_get_value+0x18c>)
     3b2:	468c      	mov	ip, r1
     3b4:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3b6:	211f      	movs	r1, #31
     3b8:	400b      	ands	r3, r1
     3ba:	391e      	subs	r1, #30
     3bc:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     3be:	6151      	str	r1, [r2, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     3c0:	4b49      	ldr	r3, [pc, #292]	; (4e8 <artist_ultrasonic_get_value+0x194>)
     3c2:	681a      	ldr	r2, [r3, #0]

	while (tc_is_syncing(module_inst)) {
     3c4:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     3c6:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     3c8:	438b      	bics	r3, r1
     3ca:	d1fc      	bne.n	3c6 <artist_ultrasonic_get_value+0x72>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
     3cc:	7113      	strb	r3, [r2, #4]

	while (tc_is_syncing(module_inst)) {
     3ce:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     3d0:	7bd3      	ldrb	r3, [r2, #15]
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;

	while (tc_is_syncing(module_inst)) {
     3d2:	438b      	bics	r3, r1
     3d4:	d1fc      	bne.n	3d0 <artist_ultrasonic_get_value+0x7c>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
     3d6:	3340      	adds	r3, #64	; 0x40
     3d8:	7153      	strb	r3, [r2, #5]
	tc_start_counter(&(artist_front.tc_instance_ultrasonic)); 
	while (!(port_pin_get_input_level(module->echo_pin))) {
     3da:	7823      	ldrb	r3, [r4, #0]
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3dc:	221f      	movs	r2, #31
     3de:	401a      	ands	r2, r3
     3e0:	2001      	movs	r0, #1
     3e2:	4090      	lsls	r0, r2
     3e4:	09da      	lsrs	r2, r3, #7
     3e6:	2100      	movs	r1, #0
     3e8:	2a00      	cmp	r2, #0
     3ea:	d104      	bne.n	3f6 <artist_ultrasonic_get_value+0xa2>
     3ec:	0959      	lsrs	r1, r3, #5
     3ee:	01c9      	lsls	r1, r1, #7
     3f0:	4b3b      	ldr	r3, [pc, #236]	; (4e0 <artist_ultrasonic_get_value+0x18c>)
     3f2:	469c      	mov	ip, r3
     3f4:	4461      	add	r1, ip
     3f6:	4b3d      	ldr	r3, [pc, #244]	; (4ec <artist_ultrasonic_get_value+0x198>)
     3f8:	e005      	b.n	406 <artist_ultrasonic_get_value+0xb2>
     3fa:	3b01      	subs	r3, #1
     3fc:	b29b      	uxth	r3, r3
		count ++;
		if (count > 0xFF00) return module->fliter_old_val; 
     3fe:	2b00      	cmp	r3, #0
     400:	d101      	bne.n	406 <artist_ultrasonic_get_value+0xb2>
     402:	6860      	ldr	r0, [r4, #4]
     404:	e069      	b.n	4da <artist_ultrasonic_get_value+0x186>

	return (port_base->IN.reg & pin_mask);
     406:	6a0a      	ldr	r2, [r1, #32]
	delay_us(40);
	port_pin_set_output_level(module->trigger_pin, true);
	delay_us(10);
	port_pin_set_output_level(module->trigger_pin, false);
	tc_start_counter(&(artist_front.tc_instance_ultrasonic)); 
	while (!(port_pin_get_input_level(module->echo_pin))) {
     408:	4202      	tst	r2, r0
     40a:	d0f6      	beq.n	3fa <artist_ultrasonic_get_value+0xa6>
		count ++;
		if (count > 0xFF00) return module->fliter_old_val; 
	}
	count =0; 
	start = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
     40c:	4836      	ldr	r0, [pc, #216]	; (4e8 <artist_ultrasonic_get_value+0x194>)
     40e:	4b38      	ldr	r3, [pc, #224]	; (4f0 <artist_ultrasonic_get_value+0x19c>)
     410:	4798      	blx	r3
     412:	0005      	movs	r5, r0
	while ((port_pin_get_input_level(module->echo_pin)))  {
     414:	7823      	ldrb	r3, [r4, #0]
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     416:	221f      	movs	r2, #31
     418:	401a      	ands	r2, r3
     41a:	2001      	movs	r0, #1
     41c:	4090      	lsls	r0, r2
     41e:	09da      	lsrs	r2, r3, #7
     420:	2100      	movs	r1, #0
     422:	2a00      	cmp	r2, #0
     424:	d104      	bne.n	430 <artist_ultrasonic_get_value+0xdc>
     426:	0959      	lsrs	r1, r3, #5
     428:	01c9      	lsls	r1, r1, #7
     42a:	4b2d      	ldr	r3, [pc, #180]	; (4e0 <artist_ultrasonic_get_value+0x18c>)
     42c:	469c      	mov	ip, r3
     42e:	4461      	add	r1, ip
     430:	4b2e      	ldr	r3, [pc, #184]	; (4ec <artist_ultrasonic_get_value+0x198>)
     432:	e005      	b.n	440 <artist_ultrasonic_get_value+0xec>
     434:	3b01      	subs	r3, #1
     436:	b29b      	uxth	r3, r3
		count ++;
		if (count > 0xFF00) return module->fliter_old_val;  
     438:	2b00      	cmp	r3, #0
     43a:	d101      	bne.n	440 <artist_ultrasonic_get_value+0xec>
     43c:	6860      	ldr	r0, [r4, #4]
     43e:	e04c      	b.n	4da <artist_ultrasonic_get_value+0x186>

	return (port_base->IN.reg & pin_mask);
     440:	6a0a      	ldr	r2, [r1, #32]
		count ++;
		if (count > 0xFF00) return module->fliter_old_val; 
	}
	count =0; 
	start = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
	while ((port_pin_get_input_level(module->echo_pin)))  {
     442:	4202      	tst	r2, r0
     444:	d1f6      	bne.n	434 <artist_ultrasonic_get_value+0xe0>
		count ++;
		if (count > 0xFF00) return module->fliter_old_val;  
	}
	end = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
     446:	4e28      	ldr	r6, [pc, #160]	; (4e8 <artist_ultrasonic_get_value+0x194>)
     448:	0030      	movs	r0, r6
     44a:	4b29      	ldr	r3, [pc, #164]	; (4f0 <artist_ultrasonic_get_value+0x19c>)
     44c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     44e:	6832      	ldr	r2, [r6, #0]

	while (tc_is_syncing(module_inst)) {
     450:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     452:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     454:	438b      	bics	r3, r1
     456:	d1fc      	bne.n	452 <artist_ultrasonic_get_value+0xfe>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
     458:	3380      	adds	r3, #128	; 0x80
     45a:	7153      	strb	r3, [r2, #5]
	tc_stop_counter(&(artist_front.tc_instance_ultrasonic));

	float new = ((float)(end - start)) * 0.017;
     45c:	0400      	lsls	r0, r0, #16
     45e:	0c03      	lsrs	r3, r0, #16
     460:	042d      	lsls	r5, r5, #16
     462:	0c2d      	lsrs	r5, r5, #16
     464:	1b58      	subs	r0, r3, r5
     466:	4f23      	ldr	r7, [pc, #140]	; (4f4 <artist_ultrasonic_get_value+0x1a0>)
     468:	47b8      	blx	r7
     46a:	4b23      	ldr	r3, [pc, #140]	; (4f8 <artist_ultrasonic_get_value+0x1a4>)
     46c:	4798      	blx	r3
     46e:	4a23      	ldr	r2, [pc, #140]	; (4fc <artist_ultrasonic_get_value+0x1a8>)
     470:	4b23      	ldr	r3, [pc, #140]	; (500 <artist_ultrasonic_get_value+0x1ac>)
     472:	4d24      	ldr	r5, [pc, #144]	; (504 <artist_ultrasonic_get_value+0x1b0>)
     474:	47a8      	blx	r5
     476:	4b24      	ldr	r3, [pc, #144]	; (508 <artist_ultrasonic_get_value+0x1b4>)
     478:	4798      	blx	r3
     47a:	9001      	str	r0, [sp, #4]
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     47c:	6865      	ldr	r5, [r4, #4]
	port_pin_set_config(artist_front.us_instance_right.echo_pin, &pin_config_echo_right); 
}
static float artist_HC_SR04_filter(struct artist_ultrasonic_module * module,
float new, float old, float FILTER_VAL ) {
	
	if (new > old * module->filter_large_change_counts ||
     47e:	78a6      	ldrb	r6, [r4, #2]
     480:	0030      	movs	r0, r6
     482:	47b8      	blx	r7
     484:	1c07      	adds	r7, r0, #0
     486:	1c01      	adds	r1, r0, #0
     488:	1c28      	adds	r0, r5, #0
     48a:	4b20      	ldr	r3, [pc, #128]	; (50c <artist_ultrasonic_get_value+0x1b8>)
     48c:	4798      	blx	r3
     48e:	1c01      	adds	r1, r0, #0
     490:	9801      	ldr	r0, [sp, #4]
     492:	4b1f      	ldr	r3, [pc, #124]	; (510 <artist_ultrasonic_get_value+0x1bc>)
     494:	4798      	blx	r3
     496:	2800      	cmp	r0, #0
     498:	d109      	bne.n	4ae <artist_ultrasonic_get_value+0x15a>
     49a:	1c39      	adds	r1, r7, #0
     49c:	1c28      	adds	r0, r5, #0
     49e:	4b1d      	ldr	r3, [pc, #116]	; (514 <artist_ultrasonic_get_value+0x1c0>)
     4a0:	4798      	blx	r3
     4a2:	1c01      	adds	r1, r0, #0
     4a4:	9801      	ldr	r0, [sp, #4]
     4a6:	4b1c      	ldr	r3, [pc, #112]	; (518 <artist_ultrasonic_get_value+0x1c4>)
     4a8:	4798      	blx	r3
     4aa:	2800      	cmp	r0, #0
     4ac:	d008      	beq.n	4c0 <artist_ultrasonic_get_value+0x16c>
	new < old * 1/module->filter_large_change_counts ) {
		module->filter_large_change_counts ++;
     4ae:	1c73      	adds	r3, r6, #1
     4b0:	b2db      	uxtb	r3, r3
		if (module->filter_large_change_counts > 3)		
     4b2:	2b03      	cmp	r3, #3
     4b4:	d802      	bhi.n	4bc <artist_ultrasonic_get_value+0x168>
static float artist_HC_SR04_filter(struct artist_ultrasonic_module * module,
float new, float old, float FILTER_VAL ) {
	
	if (new > old * module->filter_large_change_counts ||
	new < old * 1/module->filter_large_change_counts ) {
		module->filter_large_change_counts ++;
     4b6:	70a3      	strb	r3, [r4, #2]
		if (module->filter_large_change_counts > 3)		
			module->filter_large_change_counts = 0;
		else 											
			new = old;
     4b8:	9501      	str	r5, [sp, #4]
     4ba:	e001      	b.n	4c0 <artist_ultrasonic_get_value+0x16c>
	
	if (new > old * module->filter_large_change_counts ||
	new < old * 1/module->filter_large_change_counts ) {
		module->filter_large_change_counts ++;
		if (module->filter_large_change_counts > 3)		
			module->filter_large_change_counts = 0;
     4bc:	2300      	movs	r3, #0
     4be:	70a3      	strb	r3, [r4, #2]
			new = old;
	}
	if (FILTER_VAL > 1)			FILTER_VAL = 1;
	else if (FILTER_VAL < 0)	FILTER_VAL = 0;

	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
     4c0:	4f12      	ldr	r7, [pc, #72]	; (50c <artist_ultrasonic_get_value+0x1b8>)
     4c2:	4916      	ldr	r1, [pc, #88]	; (51c <artist_ultrasonic_get_value+0x1c8>)
     4c4:	9801      	ldr	r0, [sp, #4]
     4c6:	47b8      	blx	r7
     4c8:	1c06      	adds	r6, r0, #0
     4ca:	4915      	ldr	r1, [pc, #84]	; (520 <artist_ultrasonic_get_value+0x1cc>)
     4cc:	1c28      	adds	r0, r5, #0
     4ce:	47b8      	blx	r7
     4d0:	1c01      	adds	r1, r0, #0
     4d2:	1c30      	adds	r0, r6, #0
     4d4:	4b13      	ldr	r3, [pc, #76]	; (524 <artist_ultrasonic_get_value+0x1d0>)
     4d6:	4798      	blx	r3
	}
	end = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
	tc_stop_counter(&(artist_front.tc_instance_ultrasonic));

	float new = ((float)(end - start)) * 0.017;
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     4d8:	6060      	str	r0, [r4, #4]
	return module->fliter_old_val;
}
     4da:	b003      	add	sp, #12
     4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4de:	46c0      	nop			; (mov r8, r8)
     4e0:	41004400 	.word	0x41004400
     4e4:	000009a9 	.word	0x000009a9
     4e8:	20000684 	.word	0x20000684
     4ec:	0000ff01 	.word	0x0000ff01
     4f0:	000027cd 	.word	0x000027cd
     4f4:	00006bf9 	.word	0x00006bf9
     4f8:	00008865 	.word	0x00008865
     4fc:	b020c49c 	.word	0xb020c49c
     500:	3f916872 	.word	0x3f916872
     504:	00007b29 	.word	0x00007b29
     508:	0000890d 	.word	0x0000890d
     50c:	000069d1 	.word	0x000069d1
     510:	000062d1 	.word	0x000062d1
     514:	0000663d 	.word	0x0000663d
     518:	000062a9 	.word	0x000062a9
     51c:	3ecccccc 	.word	0x3ecccccc
     520:	3f19999a 	.word	0x3f19999a
     524:	00006351 	.word	0x00006351

00000528 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     52a:	464f      	mov	r7, r9
     52c:	4646      	mov	r6, r8
     52e:	b4c0      	push	{r6, r7}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     530:	0080      	lsls	r0, r0, #2
     532:	4b11      	ldr	r3, [pc, #68]	; (578 <_tcc_interrupt_handler+0x50>)
     534:	58c3      	ldr	r3, [r0, r3]
     536:	4699      	mov	r9, r3
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     538:	681b      	ldr	r3, [r3, #0]
     53a:	6adf      	ldr	r7, [r3, #44]	; 0x2c
     53c:	464b      	mov	r3, r9
     53e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     540:	401f      	ands	r7, r3
     542:	464b      	mov	r3, r9
     544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     546:	401f      	ands	r7, r3
     548:	4d0c      	ldr	r5, [pc, #48]	; (57c <_tcc_interrupt_handler+0x54>)
     54a:	464b      	mov	r3, r9
     54c:	1d1c      	adds	r4, r3, #4
     54e:	2334      	movs	r3, #52	; 0x34
     550:	444b      	add	r3, r9
     552:	4698      	mov	r8, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     554:	682e      	ldr	r6, [r5, #0]
     556:	423e      	tst	r6, r7
     558:	d005      	beq.n	566 <_tcc_interrupt_handler+0x3e>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     55a:	4648      	mov	r0, r9
     55c:	6823      	ldr	r3, [r4, #0]
     55e:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     560:	464b      	mov	r3, r9
     562:	681b      	ldr	r3, [r3, #0]
     564:	62de      	str	r6, [r3, #44]	; 0x2c
     566:	3504      	adds	r5, #4
     568:	3404      	adds	r4, #4
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     56a:	4544      	cmp	r4, r8
     56c:	d1f2      	bne.n	554 <_tcc_interrupt_handler+0x2c>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
     56e:	bc0c      	pop	{r2, r3}
     570:	4690      	mov	r8, r2
     572:	4699      	mov	r9, r3
     574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     576:	46c0      	nop			; (mov r8, r8)
     578:	20000778 	.word	0x20000778
     57c:	00008ad4 	.word	0x00008ad4

00000580 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     580:	b510      	push	{r4, lr}
     582:	2000      	movs	r0, #0
     584:	4b01      	ldr	r3, [pc, #4]	; (58c <TCC0_Handler+0xc>)
     586:	4798      	blx	r3
     588:	bd10      	pop	{r4, pc}
     58a:	46c0      	nop			; (mov r8, r8)
     58c:	00000529 	.word	0x00000529

00000590 <TCC1_Handler>:
     590:	b510      	push	{r4, lr}
     592:	2001      	movs	r0, #1
     594:	4b01      	ldr	r3, [pc, #4]	; (59c <TCC1_Handler+0xc>)
     596:	4798      	blx	r3
     598:	bd10      	pop	{r4, pc}
     59a:	46c0      	nop			; (mov r8, r8)
     59c:	00000529 	.word	0x00000529

000005a0 <TCC2_Handler>:
     5a0:	b510      	push	{r4, lr}
     5a2:	2002      	movs	r0, #2
     5a4:	4b01      	ldr	r3, [pc, #4]	; (5ac <TCC2_Handler+0xc>)
     5a6:	4798      	blx	r3
     5a8:	bd10      	pop	{r4, pc}
     5aa:	46c0      	nop			; (mov r8, r8)
     5ac:	00000529 	.word	0x00000529

000005b0 <usart_write_callback>:

}
void usart_write_callback(struct usart_module *const usart_module)
{
	
}
     5b0:	4770      	bx	lr
     5b2:	46c0      	nop			; (mov r8, r8)

000005b4 <usart_read_callback>:
	tc_enable(&(artist_front.tc_instance_ultrasonic));
}


void usart_read_callback(struct usart_module * const usart_instance)
{
     5b4:	b510      	push	{r4, lr}
     5b6:	0004      	movs	r4, r0
	switch(rx_buffer[0]) {
     5b8:	4b0b      	ldr	r3, [pc, #44]	; (5e8 <usart_read_callback+0x34>)
     5ba:	781b      	ldrb	r3, [r3, #0]
     5bc:	b2db      	uxtb	r3, r3
     5be:	2b20      	cmp	r3, #32
     5c0:	d006      	beq.n	5d0 <usart_read_callback+0x1c>
     5c2:	2b77      	cmp	r3, #119	; 0x77
     5c4:	d109      	bne.n	5da <usart_read_callback+0x26>
		case 'c' : 
		break; 
		case 'w' :
		usart_write_buffer_job(usart_instance, "mw\0\0\0", MAX_RX_BUFFER_LENGTH);
     5c6:	2205      	movs	r2, #5
     5c8:	4908      	ldr	r1, [pc, #32]	; (5ec <usart_read_callback+0x38>)
     5ca:	4b09      	ldr	r3, [pc, #36]	; (5f0 <usart_read_callback+0x3c>)
     5cc:	4798      	blx	r3
		break; 
     5ce:	e004      	b.n	5da <usart_read_callback+0x26>
		case ' ' : 
		usart_write_buffer_job(usart_instance, "m \0\0\0", MAX_RX_BUFFER_LENGTH);
     5d0:	2205      	movs	r2, #5
     5d2:	4906      	ldr	r1, [pc, #24]	; (5ec <usart_read_callback+0x38>)
     5d4:	3108      	adds	r1, #8
     5d6:	4b06      	ldr	r3, [pc, #24]	; (5f0 <usart_read_callback+0x3c>)
     5d8:	4798      	blx	r3
		break;
	}
	usart_read_buffer_job( usart_instance,
     5da:	2205      	movs	r2, #5
     5dc:	4902      	ldr	r1, [pc, #8]	; (5e8 <usart_read_callback+0x34>)
     5de:	0020      	movs	r0, r4
     5e0:	4b04      	ldr	r3, [pc, #16]	; (5f4 <usart_read_callback+0x40>)
     5e2:	4798      	blx	r3
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
	

}
     5e4:	bd10      	pop	{r4, pc}
     5e6:	46c0      	nop			; (mov r8, r8)
     5e8:	20000760 	.word	0x20000760
     5ec:	00008b04 	.word	0x00008b04
     5f0:	000019b9 	.word	0x000019b9
     5f4:	000019d9 	.word	0x000019d9

000005f8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     5f8:	b570      	push	{r4, r5, r6, lr}
     5fa:	b082      	sub	sp, #8
     5fc:	0005      	movs	r5, r0
     5fe:	000e      	movs	r6, r1
	uint16_t temp = 0;
     600:	2200      	movs	r2, #0
     602:	466b      	mov	r3, sp
     604:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     606:	4c06      	ldr	r4, [pc, #24]	; (620 <usart_serial_getchar+0x28>)
     608:	466b      	mov	r3, sp
     60a:	1d99      	adds	r1, r3, #6
     60c:	0028      	movs	r0, r5
     60e:	47a0      	blx	r4
     610:	2800      	cmp	r0, #0
     612:	d1f9      	bne.n	608 <usart_serial_getchar+0x10>

	*c = temp;
     614:	466b      	mov	r3, sp
     616:	3306      	adds	r3, #6
     618:	881b      	ldrh	r3, [r3, #0]
     61a:	7033      	strb	r3, [r6, #0]
}
     61c:	b002      	add	sp, #8
     61e:	bd70      	pop	{r4, r5, r6, pc}
     620:	000018a5 	.word	0x000018a5

00000624 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     624:	b570      	push	{r4, r5, r6, lr}
     626:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     628:	b28c      	uxth	r4, r1
     62a:	4e03      	ldr	r6, [pc, #12]	; (638 <usart_serial_putchar+0x14>)
     62c:	0021      	movs	r1, r4
     62e:	0028      	movs	r0, r5
     630:	47b0      	blx	r6
     632:	2800      	cmp	r0, #0
     634:	d1fa      	bne.n	62c <usart_serial_putchar+0x8>

	return STATUS_OK;
}
     636:	bd70      	pop	{r4, r5, r6, pc}
     638:	00001879 	.word	0x00001879

0000063c <artist_ultrasonic_tc_configure>:
*  Author: credt
*/

#include "TheArtist.h"

void artist_ultrasonic_tc_configure() {
     63c:	b510      	push	{r4, lr}
     63e:	b08e      	sub	sp, #56	; 0x38
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     640:	aa01      	add	r2, sp, #4
     642:	2300      	movs	r3, #0
     644:	2100      	movs	r1, #0
     646:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     648:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     64a:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     64c:	2000      	movs	r0, #0
     64e:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     650:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     652:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     654:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     656:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     658:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     65a:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     65c:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     65e:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     660:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     662:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     664:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     666:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     668:	8593      	strh	r3, [r2, #44]	; 0x2c
	struct tc_config config;
	
	tc_get_config_defaults(&config);
	
	config.counter_size = TC_COUNTER_SIZE_16BIT;
	config.clock_source = GCLK_GENERATOR_3;
     66a:	3303      	adds	r3, #3
     66c:	7013      	strb	r3, [r2, #0]
	config.clock_prescaler = TC_CLOCK_PRESCALER_DIV8;
     66e:	23c0      	movs	r3, #192	; 0xc0
     670:	009b      	lsls	r3, r3, #2
     672:	8093      	strh	r3, [r2, #4]
	config.enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = true;
     674:	2301      	movs	r3, #1
     676:	72d3      	strb	r3, [r2, #11]
	tc_init(&(artist_front.tc_instance_ultrasonic), TC4, &config);
     678:	4c07      	ldr	r4, [pc, #28]	; (698 <artist_ultrasonic_tc_configure+0x5c>)
     67a:	4908      	ldr	r1, [pc, #32]	; (69c <artist_ultrasonic_tc_configure+0x60>)
     67c:	0020      	movs	r0, r4
     67e:	4b08      	ldr	r3, [pc, #32]	; (6a0 <artist_ultrasonic_tc_configure+0x64>)
     680:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     682:	6822      	ldr	r2, [r4, #0]

	while (tc_is_syncing(module_inst)) {
     684:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     686:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     688:	438b      	bics	r3, r1
     68a:	d1fc      	bne.n	686 <artist_ultrasonic_tc_configure+0x4a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     68c:	8811      	ldrh	r1, [r2, #0]
     68e:	3302      	adds	r3, #2
     690:	430b      	orrs	r3, r1
     692:	8013      	strh	r3, [r2, #0]
	tc_enable(&(artist_front.tc_instance_ultrasonic));
}
     694:	b00e      	add	sp, #56	; 0x38
     696:	bd10      	pop	{r4, pc}
     698:	20000684 	.word	0x20000684
     69c:	42003000 	.word	0x42003000
     6a0:	00002551 	.word	0x00002551

000006a4 <configure_usart_callbacks>:
	
}


void configure_usart_callbacks(struct usart_module * usart_instance)
{
     6a4:	b570      	push	{r4, r5, r6, lr}
     6a6:	0004      	movs	r4, r0
	//! [setup_register_callbacks]
	usart_register_callback(usart_instance,
     6a8:	2200      	movs	r2, #0
     6aa:	4906      	ldr	r1, [pc, #24]	; (6c4 <configure_usart_callbacks+0x20>)
     6ac:	4d06      	ldr	r5, [pc, #24]	; (6c8 <configure_usart_callbacks+0x24>)
     6ae:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	
	usart_register_callback(usart_instance,
     6b0:	2201      	movs	r2, #1
     6b2:	4906      	ldr	r1, [pc, #24]	; (6cc <configure_usart_callbacks+0x28>)
     6b4:	0020      	movs	r0, r4
     6b6:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     6b8:	2231      	movs	r2, #49	; 0x31
     6ba:	5ca1      	ldrb	r1, [r4, r2]
     6bc:	2303      	movs	r3, #3
     6be:	430b      	orrs	r3, r1
     6c0:	54a3      	strb	r3, [r4, r2]

	//! [setup_enable_callbacks]
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
	//! [setup_enable_callbacks]
}
     6c2:	bd70      	pop	{r4, r5, r6, pc}
     6c4:	000005b1 	.word	0x000005b1
     6c8:	000019a1 	.word	0x000019a1
     6cc:	000005b5 	.word	0x000005b5

000006d0 <artist_usart_configure>:

void artist_usart_configure(struct usart_module * usart_instance) {
     6d0:	b570      	push	{r4, r5, r6, lr}
     6d2:	b090      	sub	sp, #64	; 0x40
     6d4:	0004      	movs	r4, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     6d6:	2380      	movs	r3, #128	; 0x80
     6d8:	05db      	lsls	r3, r3, #23
     6da:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     6dc:	2300      	movs	r3, #0
     6de:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     6e0:	22ff      	movs	r2, #255	; 0xff
     6e2:	4669      	mov	r1, sp
     6e4:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     6e6:	2200      	movs	r2, #0
     6e8:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     6ea:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
     6ec:	2196      	movs	r1, #150	; 0x96
     6ee:	0189      	lsls	r1, r1, #6
     6f0:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
     6f2:	2101      	movs	r1, #1
     6f4:	2024      	movs	r0, #36	; 0x24
     6f6:	466d      	mov	r5, sp
     6f8:	5429      	strb	r1, [r5, r0]
	config->transmitter_enable = true;
     6fa:	3001      	adds	r0, #1
     6fc:	5429      	strb	r1, [r5, r0]
	config->clock_polarity_inverted = false;
     6fe:	3125      	adds	r1, #37	; 0x25
     700:	546b      	strb	r3, [r5, r1]
	config->use_external_clock = false;
     702:	3101      	adds	r1, #1
     704:	546b      	strb	r3, [r5, r1]
	config->ext_clock_freq   = 0;
     706:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     708:	3105      	adds	r1, #5
     70a:	546b      	strb	r3, [r5, r1]
	config->generator_source = GCLK_GENERATOR_0;
     70c:	3101      	adds	r1, #1
     70e:	546b      	strb	r3, [r5, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     710:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     712:	822b      	strh	r3, [r5, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     714:	76eb      	strb	r3, [r5, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     716:	762a      	strb	r2, [r5, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     718:	772a      	strb	r2, [r5, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     71a:	766a      	strb	r2, [r5, #25]
	config->receive_pulse_length                    = 19;
     71c:	2313      	movs	r3, #19
     71e:	76ab      	strb	r3, [r5, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     720:	776a      	strb	r2, [r5, #29]
	struct usart_config config;
	usart_get_config_defaults(&config);
	config.baudrate = CONF_ARTIST_BAUDRATE;
	config.mux_setting	= EDBG_CDC_SERCOM_MUX_SETTING;
     722:	2380      	movs	r3, #128	; 0x80
     724:	035b      	lsls	r3, r3, #13
     726:	9303      	str	r3, [sp, #12]
	config.pinmux_pad0	= EDBG_CDC_SERCOM_PINMUX_PAD0;
     728:	4b1e      	ldr	r3, [pc, #120]	; (7a4 <artist_usart_configure+0xd4>)
     72a:	930c      	str	r3, [sp, #48]	; 0x30
	config.pinmux_pad1	= EDBG_CDC_SERCOM_PINMUX_PAD1;
     72c:	4b1e      	ldr	r3, [pc, #120]	; (7a8 <artist_usart_configure+0xd8>)
     72e:	930d      	str	r3, [sp, #52]	; 0x34
	config.pinmux_pad2	= EDBG_CDC_SERCOM_PINMUX_PAD2;
     730:	2301      	movs	r3, #1
     732:	425b      	negs	r3, r3
     734:	930e      	str	r3, [sp, #56]	; 0x38
	config.pinmux_pad3	= EDBG_CDC_SERCOM_PINMUX_PAD3;
     736:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(usart_instance, EDBG_CDC_MODULE, &config) != STATUS_OK);
     738:	4e1c      	ldr	r6, [pc, #112]	; (7ac <artist_usart_configure+0xdc>)
     73a:	4d1d      	ldr	r5, [pc, #116]	; (7b0 <artist_usart_configure+0xe0>)
     73c:	466a      	mov	r2, sp
     73e:	0031      	movs	r1, r6
     740:	0020      	movs	r0, r4
     742:	47a8      	blx	r5
     744:	2800      	cmp	r0, #0
     746:	d1f9      	bne.n	73c <artist_usart_configure+0x6c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     748:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     74a:	0028      	movs	r0, r5
     74c:	4b19      	ldr	r3, [pc, #100]	; (7b4 <artist_usart_configure+0xe4>)
     74e:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     750:	231f      	movs	r3, #31
     752:	4018      	ands	r0, r3
     754:	3b1e      	subs	r3, #30
     756:	4083      	lsls	r3, r0
     758:	4a17      	ldr	r2, [pc, #92]	; (7b8 <artist_usart_configure+0xe8>)
     75a:	6013      	str	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     75c:	6822      	ldr	r2, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     75e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     760:	2b00      	cmp	r3, #0
     762:	d1fc      	bne.n	75e <artist_usart_configure+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     764:	682a      	ldr	r2, [r5, #0]
     766:	3302      	adds	r3, #2
     768:	4313      	orrs	r3, r2
     76a:	602b      	str	r3, [r5, #0]
	
	
	usart_enable(usart_instance);
	configure_usart_callbacks(usart_instance);
     76c:	0020      	movs	r0, r4
     76e:	4b13      	ldr	r3, [pc, #76]	; (7bc <artist_usart_configure+0xec>)
     770:	4798      	blx	r3
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     772:	4b13      	ldr	r3, [pc, #76]	; (7c0 <artist_usart_configure+0xf0>)
     774:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     776:	4a13      	ldr	r2, [pc, #76]	; (7c4 <artist_usart_configure+0xf4>)
     778:	4b13      	ldr	r3, [pc, #76]	; (7c8 <artist_usart_configure+0xf8>)
     77a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     77c:	4a13      	ldr	r2, [pc, #76]	; (7cc <artist_usart_configure+0xfc>)
     77e:	4b14      	ldr	r3, [pc, #80]	; (7d0 <artist_usart_configure+0x100>)
     780:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
     782:	466a      	mov	r2, sp
     784:	4909      	ldr	r1, [pc, #36]	; (7ac <artist_usart_configure+0xdc>)
     786:	0020      	movs	r0, r4
     788:	4b09      	ldr	r3, [pc, #36]	; (7b0 <artist_usart_configure+0xe0>)
     78a:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     78c:	4d11      	ldr	r5, [pc, #68]	; (7d4 <artist_usart_configure+0x104>)
     78e:	682b      	ldr	r3, [r5, #0]
     790:	6898      	ldr	r0, [r3, #8]
     792:	2100      	movs	r1, #0
     794:	4c10      	ldr	r4, [pc, #64]	; (7d8 <artist_usart_configure+0x108>)
     796:	47a0      	blx	r4
	setbuf(stdin, NULL);
     798:	682b      	ldr	r3, [r5, #0]
     79a:	6858      	ldr	r0, [r3, #4]
     79c:	2100      	movs	r1, #0
     79e:	47a0      	blx	r4
	
	stdio_serial_init(usart_instance, EDBG_CDC_MODULE, &config);
}
     7a0:	b010      	add	sp, #64	; 0x40
     7a2:	bd70      	pop	{r4, r5, r6, pc}
     7a4:	00040003 	.word	0x00040003
     7a8:	00050003 	.word	0x00050003
     7ac:	42000800 	.word	0x42000800
     7b0:	00001541 	.word	0x00001541
     7b4:	00001119 	.word	0x00001119
     7b8:	e000e100 	.word	0xe000e100
     7bc:	000006a5 	.word	0x000006a5
     7c0:	200007f4 	.word	0x200007f4
     7c4:	00000625 	.word	0x00000625
     7c8:	200007f0 	.word	0x200007f0
     7cc:	000005f9 	.word	0x000005f9
     7d0:	200007ec 	.word	0x200007ec
     7d4:	2000006c 	.word	0x2000006c
     7d8:	00003ff5 	.word	0x00003ff5

000007dc <artist_ultrasonic_update>:
	tcc_init(&(artist->tcc_instance), TCC0, &config);
	tcc_enable(&(artist->tcc_instance));
	*/
}

void artist_ultrasonic_update() {
     7dc:	b570      	push	{r4, r5, r6, lr}
	artist_front.center_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_center));
     7de:	4e09      	ldr	r6, [pc, #36]	; (804 <artist_ultrasonic_update+0x28>)
     7e0:	0030      	movs	r0, r6
     7e2:	4d09      	ldr	r5, [pc, #36]	; (808 <artist_ultrasonic_update+0x2c>)
     7e4:	47a8      	blx	r5
     7e6:	0034      	movs	r4, r6
     7e8:	3cb4      	subs	r4, #180	; 0xb4
     7ea:	61b0      	str	r0, [r6, #24]
	artist_front.right_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_right));
     7ec:	0020      	movs	r0, r4
     7ee:	30c4      	adds	r0, #196	; 0xc4
     7f0:	47a8      	blx	r5
     7f2:	23d4      	movs	r3, #212	; 0xd4
     7f4:	50e0      	str	r0, [r4, r3]
	artist_front.left_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_left));
     7f6:	0020      	movs	r0, r4
     7f8:	30bc      	adds	r0, #188	; 0xbc
     7fa:	47a8      	blx	r5
     7fc:	23d0      	movs	r3, #208	; 0xd0
     7fe:	50e0      	str	r0, [r4, r3]
}
     800:	bd70      	pop	{r4, r5, r6, pc}
     802:	46c0      	nop			; (mov r8, r8)
     804:	20000738 	.word	0x20000738
     808:	00000355 	.word	0x00000355

0000080c <callbacks>:
	//! [setup_enable]
	tc_enable(&(artist_front.tc_instance_timer));
	//! [setup_enable]
}

void callbacks (void) {
     80c:	b510      	push	{r4, lr}
	// [ultra sonic]
	static uint16_t ultrasonic_counter		= 0;
	static uint16_t maze_counter			= 0; 
	static uint16_t pause_counter			= 0;
	ultrasonic_counter ++;
     80e:	4a1d      	ldr	r2, [pc, #116]	; (884 <callbacks+0x78>)
     810:	8813      	ldrh	r3, [r2, #0]
     812:	3301      	adds	r3, #1
     814:	b29b      	uxth	r3, r3
     816:	8013      	strh	r3, [r2, #0]
	maze_counter ++;
     818:	491b      	ldr	r1, [pc, #108]	; (888 <callbacks+0x7c>)
     81a:	880a      	ldrh	r2, [r1, #0]
     81c:	3201      	adds	r2, #1
     81e:	800a      	strh	r2, [r1, #0]
	pause_counter ++;
     820:	491a      	ldr	r1, [pc, #104]	; (88c <callbacks+0x80>)
     822:	880a      	ldrh	r2, [r1, #0]
     824:	3201      	adds	r2, #1
     826:	800a      	strh	r2, [r1, #0]

	if (ultrasonic_counter > 5) {
     828:	2b05      	cmp	r3, #5
     82a:	d904      	bls.n	836 <callbacks+0x2a>
		artist_ultrasonic_update();
     82c:	4b18      	ldr	r3, [pc, #96]	; (890 <callbacks+0x84>)
     82e:	4798      	blx	r3
		ultrasonic_counter = 0; 
     830:	2200      	movs	r2, #0
     832:	4b14      	ldr	r3, [pc, #80]	; (884 <callbacks+0x78>)
     834:	801a      	strh	r2, [r3, #0]

// 	if(maze_counter > 30){
// 		artist_do_maze();
// 		maze_counter = 0;
// 	}
	if(maze_counter > 20){
     836:	4b14      	ldr	r3, [pc, #80]	; (888 <callbacks+0x7c>)
     838:	881b      	ldrh	r3, [r3, #0]
     83a:	2b14      	cmp	r3, #20
     83c:	d90d      	bls.n	85a <callbacks+0x4e>
		if(artist_front.maze_status != STOP){
     83e:	23d8      	movs	r3, #216	; 0xd8
     840:	4a14      	ldr	r2, [pc, #80]	; (894 <callbacks+0x88>)
     842:	5cd3      	ldrb	r3, [r2, r3]
     844:	2b03      	cmp	r3, #3
     846:	d017      	beq.n	878 <callbacks+0x6c>
			printf("STOP\n");
     848:	4813      	ldr	r0, [pc, #76]	; (898 <callbacks+0x8c>)
     84a:	4b14      	ldr	r3, [pc, #80]	; (89c <callbacks+0x90>)
     84c:	4798      	blx	r3
			artist_pause_maze();
     84e:	4b14      	ldr	r3, [pc, #80]	; (8a0 <callbacks+0x94>)
     850:	4798      	blx	r3
			pause_counter = 0;
     852:	2200      	movs	r2, #0
     854:	4b0d      	ldr	r3, [pc, #52]	; (88c <callbacks+0x80>)
     856:	801a      	strh	r2, [r3, #0]
     858:	e012      	b.n	880 <callbacks+0x74>
		}
	}
	if (pause_counter > 10) {
     85a:	4b0c      	ldr	r3, [pc, #48]	; (88c <callbacks+0x80>)
     85c:	881b      	ldrh	r3, [r3, #0]
     85e:	2b0a      	cmp	r3, #10
     860:	d90e      	bls.n	880 <callbacks+0x74>
		if(artist_front.maze_status == STOP){
     862:	23d8      	movs	r3, #216	; 0xd8
     864:	4a0b      	ldr	r2, [pc, #44]	; (894 <callbacks+0x88>)
     866:	5cd3      	ldrb	r3, [r2, r3]
     868:	2b03      	cmp	r3, #3
     86a:	d109      	bne.n	880 <callbacks+0x74>
			artist_do_maze(); 
     86c:	4b0d      	ldr	r3, [pc, #52]	; (8a4 <callbacks+0x98>)
     86e:	4798      	blx	r3
			maze_counter = 0;
     870:	2200      	movs	r2, #0
     872:	4b05      	ldr	r3, [pc, #20]	; (888 <callbacks+0x7c>)
     874:	801a      	strh	r2, [r3, #0]
		}
	}
	// ! [ultra sonic]
}
     876:	e003      	b.n	880 <callbacks+0x74>
			printf("STOP\n");
			artist_pause_maze();
			pause_counter = 0;
		}
	}
	if (pause_counter > 10) {
     878:	4b04      	ldr	r3, [pc, #16]	; (88c <callbacks+0x80>)
     87a:	881b      	ldrh	r3, [r3, #0]
     87c:	2b0a      	cmp	r3, #10
     87e:	d8f5      	bhi.n	86c <callbacks+0x60>
			artist_do_maze(); 
			maze_counter = 0;
		}
	}
	// ! [ultra sonic]
}
     880:	bd10      	pop	{r4, pc}
     882:	46c0      	nop			; (mov r8, r8)
     884:	200000c6 	.word	0x200000c6
     888:	200000c8 	.word	0x200000c8
     88c:	200000c4 	.word	0x200000c4
     890:	000007dd 	.word	0x000007dd
     894:	20000684 	.word	0x20000684
     898:	00008b14 	.word	0x00008b14
     89c:	00003fe1 	.word	0x00003fe1
     8a0:	00000285 	.word	0x00000285
     8a4:	0000012d 	.word	0x0000012d

000008a8 <artist_scheduler_tc_configure>:
	artist_front.center_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_center));
	artist_front.right_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_right));
	artist_front.left_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_left));
}

void artist_scheduler_tc_configure() {
     8a8:	b510      	push	{r4, lr}
     8aa:	b08e      	sub	sp, #56	; 0x38

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     8ac:	aa01      	add	r2, sp, #4
     8ae:	2300      	movs	r3, #0
     8b0:	2100      	movs	r1, #0
     8b2:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     8b4:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     8b6:	2000      	movs	r0, #0
     8b8:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     8ba:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     8bc:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     8be:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     8c0:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     8c2:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     8c4:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     8c6:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     8c8:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     8ca:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     8cc:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     8ce:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     8d0:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     8d2:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     8d4:	8593      	strh	r3, [r2, #44]	; 0x2c
	//! [setup_config_defaults]
	tc_get_config_defaults(&config_tc);
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
     8d6:	3304      	adds	r3, #4
     8d8:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source = GCLK_GENERATOR_3;
     8da:	3b01      	subs	r3, #1
     8dc:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024; //
     8de:	23e0      	movs	r3, #224	; 0xe0
     8e0:	00db      	lsls	r3, r3, #3
     8e2:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period = 50;
     8e4:	2132      	movs	r1, #50	; 0x32
     8e6:	2329      	movs	r3, #41	; 0x29
     8e8:	54d1      	strb	r1, [r2, r3]
	//config_tc.counter_8_bit.compare_capture_channel[0] = 5;
	//config_tc.counter_8_bit.compare_capture_channel[1] = 54;
	//! [setup_change_config]

	//! [20 Hz setup_set_config]
	tc_init(&(artist_front.tc_instance_timer), TC5, &config_tc);
     8ea:	4c08      	ldr	r4, [pc, #32]	; (90c <artist_scheduler_tc_configure+0x64>)
     8ec:	4908      	ldr	r1, [pc, #32]	; (910 <artist_scheduler_tc_configure+0x68>)
     8ee:	0020      	movs	r0, r4
     8f0:	4b08      	ldr	r3, [pc, #32]	; (914 <artist_scheduler_tc_configure+0x6c>)
     8f2:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     8f4:	6822      	ldr	r2, [r4, #0]

	while (tc_is_syncing(module_inst)) {
     8f6:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     8f8:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     8fa:	438b      	bics	r3, r1
     8fc:	d1fc      	bne.n	8f8 <artist_scheduler_tc_configure+0x50>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     8fe:	8811      	ldrh	r1, [r2, #0]
     900:	3302      	adds	r3, #2
     902:	430b      	orrs	r3, r1
     904:	8013      	strh	r3, [r2, #0]
	//! [setup_set_config]

	//! [setup_enable]
	tc_enable(&(artist_front.tc_instance_timer));
	//! [setup_enable]
}
     906:	b00e      	add	sp, #56	; 0x38
     908:	bd10      	pop	{r4, pc}
     90a:	46c0      	nop			; (mov r8, r8)
     90c:	200006a0 	.word	0x200006a0
     910:	42003400 	.word	0x42003400
     914:	00002551 	.word	0x00002551

00000918 <artist_configure_tc_callbacks>:
		}
	}
	// ! [ultra sonic]
}
void artist_configure_tc_callbacks(void)
{
     918:	b510      	push	{r4, lr}
	tc_register_callback(&(artist_front.tc_instance_timer), callbacks ,
     91a:	4c0d      	ldr	r4, [pc, #52]	; (950 <artist_configure_tc_callbacks+0x38>)
     91c:	2200      	movs	r2, #0
     91e:	490d      	ldr	r1, [pc, #52]	; (954 <artist_configure_tc_callbacks+0x3c>)
     920:	0020      	movs	r0, r4
     922:	4b0d      	ldr	r3, [pc, #52]	; (958 <artist_configure_tc_callbacks+0x40>)
     924:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     926:	6820      	ldr	r0, [r4, #0]
     928:	3c1c      	subs	r4, #28
     92a:	4b0c      	ldr	r3, [pc, #48]	; (95c <artist_configure_tc_callbacks+0x44>)
     92c:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     92e:	4b0c      	ldr	r3, [pc, #48]	; (960 <artist_configure_tc_callbacks+0x48>)
     930:	5c1b      	ldrb	r3, [r3, r0]
     932:	221f      	movs	r2, #31
     934:	4013      	ands	r3, r2
     936:	3a1e      	subs	r2, #30
     938:	0011      	movs	r1, r2
     93a:	4099      	lsls	r1, r3
     93c:	4b09      	ldr	r3, [pc, #36]	; (964 <artist_configure_tc_callbacks+0x4c>)
     93e:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     940:	2135      	movs	r1, #53	; 0x35
     942:	5c60      	ldrb	r0, [r4, r1]
     944:	2301      	movs	r3, #1
     946:	4303      	orrs	r3, r0
     948:	5463      	strb	r3, [r4, r1]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     94a:	69e3      	ldr	r3, [r4, #28]
     94c:	735a      	strb	r2, [r3, #13]
	TC_CALLBACK_OVERFLOW);
	
	tc_enable_callback(&(artist_front.tc_instance_timer), TC_CALLBACK_OVERFLOW);
     94e:	bd10      	pop	{r4, pc}
     950:	200006a0 	.word	0x200006a0
     954:	0000080d 	.word	0x0000080d
     958:	0000245d 	.word	0x0000245d
     95c:	00002519 	.word	0x00002519
     960:	00008b1c 	.word	0x00008b1c
     964:	e000e100 	.word	0xe000e100

00000968 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     968:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     96a:	2000      	movs	r0, #0
     96c:	4b08      	ldr	r3, [pc, #32]	; (990 <delay_init+0x28>)
     96e:	4798      	blx	r3
     970:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     972:	4c08      	ldr	r4, [pc, #32]	; (994 <delay_init+0x2c>)
     974:	21fa      	movs	r1, #250	; 0xfa
     976:	0089      	lsls	r1, r1, #2
     978:	47a0      	blx	r4
     97a:	4b07      	ldr	r3, [pc, #28]	; (998 <delay_init+0x30>)
     97c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     97e:	4907      	ldr	r1, [pc, #28]	; (99c <delay_init+0x34>)
     980:	0028      	movs	r0, r5
     982:	47a0      	blx	r4
     984:	4b06      	ldr	r3, [pc, #24]	; (9a0 <delay_init+0x38>)
     986:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     988:	2205      	movs	r2, #5
     98a:	4b06      	ldr	r3, [pc, #24]	; (9a4 <delay_init+0x3c>)
     98c:	601a      	str	r2, [r3, #0]
}
     98e:	bd70      	pop	{r4, r5, r6, pc}
     990:	000021ed 	.word	0x000021ed
     994:	00005f1d 	.word	0x00005f1d
     998:	20000004 	.word	0x20000004
     99c:	000f4240 	.word	0x000f4240
     9a0:	20000000 	.word	0x20000000
     9a4:	e000e010 	.word	0xe000e010

000009a8 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     9a8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     9aa:	4b08      	ldr	r3, [pc, #32]	; (9cc <delay_cycles_us+0x24>)
     9ac:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     9ae:	4a08      	ldr	r2, [pc, #32]	; (9d0 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     9b0:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     9b2:	2180      	movs	r1, #128	; 0x80
     9b4:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
     9b6:	e006      	b.n	9c6 <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     9b8:	2c00      	cmp	r4, #0
     9ba:	d004      	beq.n	9c6 <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
     9bc:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     9be:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     9c0:	6813      	ldr	r3, [r2, #0]
     9c2:	420b      	tst	r3, r1
     9c4:	d0fc      	beq.n	9c0 <delay_cycles_us+0x18>
     9c6:	3801      	subs	r0, #1
     9c8:	d2f6      	bcs.n	9b8 <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
     9ca:	bd30      	pop	{r4, r5, pc}
     9cc:	20000000 	.word	0x20000000
     9d0:	e000e010 	.word	0xe000e010

000009d4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     9d4:	4b0c      	ldr	r3, [pc, #48]	; (a08 <cpu_irq_enter_critical+0x34>)
     9d6:	681b      	ldr	r3, [r3, #0]
     9d8:	2b00      	cmp	r3, #0
     9da:	d110      	bne.n	9fe <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     9dc:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     9e0:	2b00      	cmp	r3, #0
     9e2:	d109      	bne.n	9f8 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     9e4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     9e6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     9ea:	2200      	movs	r2, #0
     9ec:	4b07      	ldr	r3, [pc, #28]	; (a0c <cpu_irq_enter_critical+0x38>)
     9ee:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     9f0:	3201      	adds	r2, #1
     9f2:	4b07      	ldr	r3, [pc, #28]	; (a10 <cpu_irq_enter_critical+0x3c>)
     9f4:	701a      	strb	r2, [r3, #0]
     9f6:	e002      	b.n	9fe <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     9f8:	2200      	movs	r2, #0
     9fa:	4b05      	ldr	r3, [pc, #20]	; (a10 <cpu_irq_enter_critical+0x3c>)
     9fc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     9fe:	4a02      	ldr	r2, [pc, #8]	; (a08 <cpu_irq_enter_critical+0x34>)
     a00:	6813      	ldr	r3, [r2, #0]
     a02:	3301      	adds	r3, #1
     a04:	6013      	str	r3, [r2, #0]
}
     a06:	4770      	bx	lr
     a08:	200000cc 	.word	0x200000cc
     a0c:	20000008 	.word	0x20000008
     a10:	200000d0 	.word	0x200000d0

00000a14 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     a14:	4b08      	ldr	r3, [pc, #32]	; (a38 <cpu_irq_leave_critical+0x24>)
     a16:	681a      	ldr	r2, [r3, #0]
     a18:	3a01      	subs	r2, #1
     a1a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     a1c:	681b      	ldr	r3, [r3, #0]
     a1e:	2b00      	cmp	r3, #0
     a20:	d109      	bne.n	a36 <cpu_irq_leave_critical+0x22>
     a22:	4b06      	ldr	r3, [pc, #24]	; (a3c <cpu_irq_leave_critical+0x28>)
     a24:	781b      	ldrb	r3, [r3, #0]
     a26:	2b00      	cmp	r3, #0
     a28:	d005      	beq.n	a36 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     a2a:	2201      	movs	r2, #1
     a2c:	4b04      	ldr	r3, [pc, #16]	; (a40 <cpu_irq_leave_critical+0x2c>)
     a2e:	701a      	strb	r2, [r3, #0]
     a30:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     a34:	b662      	cpsie	i
	}
}
     a36:	4770      	bx	lr
     a38:	200000cc 	.word	0x200000cc
     a3c:	200000d0 	.word	0x200000d0
     a40:	20000008 	.word	0x20000008

00000a44 <system_board_init>:




void system_board_init(void)
{
     a44:	b5f0      	push	{r4, r5, r6, r7, lr}
     a46:	4647      	mov	r7, r8
     a48:	b480      	push	{r7}
     a4a:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     a4c:	ac01      	add	r4, sp, #4
     a4e:	2601      	movs	r6, #1
     a50:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     a52:	2700      	movs	r7, #0
     a54:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     a56:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     a58:	0021      	movs	r1, r4
     a5a:	2013      	movs	r0, #19
     a5c:	4d27      	ldr	r5, [pc, #156]	; (afc <system_board_init+0xb8>)
     a5e:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     a60:	4b27      	ldr	r3, [pc, #156]	; (b00 <system_board_init+0xbc>)
     a62:	4698      	mov	r8, r3
     a64:	2380      	movs	r3, #128	; 0x80
     a66:	031b      	lsls	r3, r3, #12
     a68:	4642      	mov	r2, r8
     a6a:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     a6c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     a6e:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     a70:	0021      	movs	r1, r4
     a72:	201c      	movs	r0, #28
     a74:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     a76:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     a78:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     a7a:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     a7c:	0021      	movs	r1, r4
     a7e:	2052      	movs	r0, #82	; 0x52
     a80:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     a82:	0021      	movs	r1, r4
     a84:	203e      	movs	r0, #62	; 0x3e
     a86:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     a88:	0021      	movs	r1, r4
     a8a:	203f      	movs	r0, #63	; 0x3f
     a8c:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     a8e:	0021      	movs	r1, r4
     a90:	202f      	movs	r0, #47	; 0x2f
     a92:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     a94:	0021      	movs	r1, r4
     a96:	2014      	movs	r0, #20
     a98:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     a9a:	2280      	movs	r2, #128	; 0x80
     a9c:	02d2      	lsls	r2, r2, #11
     a9e:	4b19      	ldr	r3, [pc, #100]	; (b04 <system_board_init+0xc0>)
     aa0:	619a      	str	r2, [r3, #24]
     aa2:	3b80      	subs	r3, #128	; 0x80
     aa4:	2280      	movs	r2, #128	; 0x80
     aa6:	05d2      	lsls	r2, r2, #23
     aa8:	619a      	str	r2, [r3, #24]
     aaa:	2280      	movs	r2, #128	; 0x80
     aac:	0612      	lsls	r2, r2, #24
     aae:	619a      	str	r2, [r3, #24]
     ab0:	2280      	movs	r2, #128	; 0x80
     ab2:	0212      	lsls	r2, r2, #8
     ab4:	619a      	str	r2, [r3, #24]
     ab6:	2380      	movs	r3, #128	; 0x80
     ab8:	035b      	lsls	r3, r3, #13
     aba:	4642      	mov	r2, r8
     abc:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     abe:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     ac0:	0021      	movs	r1, r4
     ac2:	2053      	movs	r0, #83	; 0x53
     ac4:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     ac6:	4a10      	ldr	r2, [pc, #64]	; (b08 <system_board_init+0xc4>)
     ac8:	6a13      	ldr	r3, [r2, #32]
     aca:	2180      	movs	r1, #128	; 0x80
     acc:	0389      	lsls	r1, r1, #14
     ace:	430b      	orrs	r3, r1
     ad0:	6213      	str	r3, [r2, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     ad2:	2204      	movs	r2, #4
     ad4:	4b0d      	ldr	r3, [pc, #52]	; (b0c <system_board_init+0xc8>)
     ad6:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     ad8:	466b      	mov	r3, sp
     ada:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     adc:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     ade:	2305      	movs	r3, #5
     ae0:	466a      	mov	r2, sp
     ae2:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     ae4:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     ae6:	4669      	mov	r1, sp
     ae8:	2009      	movs	r0, #9
     aea:	4c09      	ldr	r4, [pc, #36]	; (b10 <system_board_init+0xcc>)
     aec:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     aee:	4669      	mov	r1, sp
     af0:	200c      	movs	r0, #12
     af2:	47a0      	blx	r4
#endif

}
     af4:	b002      	add	sp, #8
     af6:	bc04      	pop	{r2}
     af8:	4690      	mov	r8, r2
     afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     afc:	00000cb5 	.word	0x00000cb5
     b00:	41004400 	.word	0x41004400
     b04:	41004500 	.word	0x41004500
     b08:	40000400 	.word	0x40000400
     b0c:	42005400 	.word	0x42005400
     b10:	000023fd 	.word	0x000023fd

00000b14 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     b14:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     b16:	2a00      	cmp	r2, #0
     b18:	d10d      	bne.n	b36 <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     b1a:	008b      	lsls	r3, r1, #2
     b1c:	4a07      	ldr	r2, [pc, #28]	; (b3c <extint_register_callback+0x28>)
     b1e:	589b      	ldr	r3, [r3, r2]
     b20:	2b00      	cmp	r3, #0
     b22:	d103      	bne.n	b2c <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
     b24:	0089      	lsls	r1, r1, #2
     b26:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     b28:	2300      	movs	r3, #0
     b2a:	e004      	b.n	b36 <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
     b2c:	4283      	cmp	r3, r0
     b2e:	d001      	beq.n	b34 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     b30:	231d      	movs	r3, #29
     b32:	e000      	b.n	b36 <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
     b34:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     b36:	0018      	movs	r0, r3
     b38:	4770      	bx	lr
     b3a:	46c0      	nop			; (mov r8, r8)
     b3c:	20000788 	.word	0x20000788

00000b40 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     b40:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     b42:	2200      	movs	r2, #0
     b44:	4b15      	ldr	r3, [pc, #84]	; (b9c <EIC_Handler+0x5c>)
     b46:	701a      	strb	r2, [r3, #0]
     b48:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     b4a:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     b4c:	4e14      	ldr	r6, [pc, #80]	; (ba0 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     b4e:	4c13      	ldr	r4, [pc, #76]	; (b9c <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     b50:	2b1f      	cmp	r3, #31
     b52:	d919      	bls.n	b88 <EIC_Handler+0x48>
     b54:	e00f      	b.n	b76 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     b56:	2100      	movs	r1, #0
     b58:	e000      	b.n	b5c <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     b5a:	4912      	ldr	r1, [pc, #72]	; (ba4 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     b5c:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     b5e:	009b      	lsls	r3, r3, #2
     b60:	599b      	ldr	r3, [r3, r6]
     b62:	2b00      	cmp	r3, #0
     b64:	d000      	beq.n	b68 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     b66:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     b68:	7823      	ldrb	r3, [r4, #0]
     b6a:	3301      	adds	r3, #1
     b6c:	b2db      	uxtb	r3, r3
     b6e:	7023      	strb	r3, [r4, #0]
     b70:	2b0f      	cmp	r3, #15
     b72:	d9ed      	bls.n	b50 <EIC_Handler+0x10>
     b74:	e011      	b.n	b9a <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     b76:	0029      	movs	r1, r5
     b78:	4019      	ands	r1, r3
     b7a:	2201      	movs	r2, #1
     b7c:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     b7e:	2100      	movs	r1, #0
     b80:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     b82:	4211      	tst	r1, r2
     b84:	d1e7      	bne.n	b56 <EIC_Handler+0x16>
     b86:	e7ef      	b.n	b68 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     b88:	0029      	movs	r1, r5
     b8a:	4019      	ands	r1, r3
     b8c:	2201      	movs	r2, #1
     b8e:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     b90:	4904      	ldr	r1, [pc, #16]	; (ba4 <EIC_Handler+0x64>)
     b92:	6909      	ldr	r1, [r1, #16]
     b94:	4211      	tst	r1, r2
     b96:	d1e0      	bne.n	b5a <EIC_Handler+0x1a>
     b98:	e7e6      	b.n	b68 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     b9a:	bd70      	pop	{r4, r5, r6, pc}
     b9c:	20000784 	.word	0x20000784
     ba0:	20000788 	.word	0x20000788
     ba4:	40001800 	.word	0x40001800

00000ba8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     ba8:	4a04      	ldr	r2, [pc, #16]	; (bbc <_extint_enable+0x14>)
     baa:	7811      	ldrb	r1, [r2, #0]
     bac:	2302      	movs	r3, #2
     bae:	430b      	orrs	r3, r1
     bb0:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     bb2:	7853      	ldrb	r3, [r2, #1]
     bb4:	b25b      	sxtb	r3, r3
     bb6:	2b00      	cmp	r3, #0
     bb8:	dbfb      	blt.n	bb2 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     bba:	4770      	bx	lr
     bbc:	40001800 	.word	0x40001800

00000bc0 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     bc0:	b500      	push	{lr}
     bc2:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     bc4:	4a12      	ldr	r2, [pc, #72]	; (c10 <_system_extint_init+0x50>)
     bc6:	6991      	ldr	r1, [r2, #24]
     bc8:	2340      	movs	r3, #64	; 0x40
     bca:	430b      	orrs	r3, r1
     bcc:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     bce:	a901      	add	r1, sp, #4
     bd0:	2300      	movs	r3, #0
     bd2:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     bd4:	2005      	movs	r0, #5
     bd6:	4b0f      	ldr	r3, [pc, #60]	; (c14 <_system_extint_init+0x54>)
     bd8:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     bda:	2005      	movs	r0, #5
     bdc:	4b0e      	ldr	r3, [pc, #56]	; (c18 <_system_extint_init+0x58>)
     bde:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     be0:	4a0e      	ldr	r2, [pc, #56]	; (c1c <_system_extint_init+0x5c>)
     be2:	7811      	ldrb	r1, [r2, #0]
     be4:	2301      	movs	r3, #1
     be6:	430b      	orrs	r3, r1
     be8:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     bea:	7853      	ldrb	r3, [r2, #1]
     bec:	b25b      	sxtb	r3, r3
     bee:	2b00      	cmp	r3, #0
     bf0:	dbfb      	blt.n	bea <_system_extint_init+0x2a>
     bf2:	4b0b      	ldr	r3, [pc, #44]	; (c20 <_system_extint_init+0x60>)
     bf4:	0019      	movs	r1, r3
     bf6:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     bf8:	2200      	movs	r2, #0
     bfa:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     bfc:	4299      	cmp	r1, r3
     bfe:	d1fc      	bne.n	bfa <_system_extint_init+0x3a>
     c00:	2210      	movs	r2, #16
     c02:	4b08      	ldr	r3, [pc, #32]	; (c24 <_system_extint_init+0x64>)
     c04:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     c06:	4b08      	ldr	r3, [pc, #32]	; (c28 <_system_extint_init+0x68>)
     c08:	4798      	blx	r3
}
     c0a:	b003      	add	sp, #12
     c0c:	bd00      	pop	{pc}
     c0e:	46c0      	nop			; (mov r8, r8)
     c10:	40000400 	.word	0x40000400
     c14:	00002305 	.word	0x00002305
     c18:	00002279 	.word	0x00002279
     c1c:	40001800 	.word	0x40001800
     c20:	20000788 	.word	0x20000788
     c24:	e000e100 	.word	0xe000e100
     c28:	00000ba9 	.word	0x00000ba9

00000c2c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     c2c:	2300      	movs	r3, #0
     c2e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     c30:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     c32:	2201      	movs	r2, #1
     c34:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     c36:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     c38:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     c3a:	3302      	adds	r3, #2
     c3c:	72c3      	strb	r3, [r0, #11]
}
     c3e:	4770      	bx	lr

00000c40 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     c40:	b5f0      	push	{r4, r5, r6, r7, lr}
     c42:	b083      	sub	sp, #12
     c44:	0005      	movs	r5, r0
     c46:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c48:	a901      	add	r1, sp, #4
     c4a:	2300      	movs	r3, #0
     c4c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     c4e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     c50:	7923      	ldrb	r3, [r4, #4]
     c52:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     c54:	7a23      	ldrb	r3, [r4, #8]
     c56:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     c58:	7820      	ldrb	r0, [r4, #0]
     c5a:	4b14      	ldr	r3, [pc, #80]	; (cac <extint_chan_set_config+0x6c>)
     c5c:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     c5e:	2000      	movs	r0, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     c60:	2d1f      	cmp	r5, #31
     c62:	d800      	bhi.n	c66 <extint_chan_set_config+0x26>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     c64:	4812      	ldr	r0, [pc, #72]	; (cb0 <extint_chan_set_config+0x70>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     c66:	2107      	movs	r1, #7
     c68:	4029      	ands	r1, r5
     c6a:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     c6c:	7ae2      	ldrb	r2, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     c6e:	7aa3      	ldrb	r3, [r4, #10]
     c70:	2b00      	cmp	r3, #0
     c72:	d001      	beq.n	c78 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
     c74:	2308      	movs	r3, #8
     c76:	431a      	orrs	r2, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     c78:	08eb      	lsrs	r3, r5, #3
     c7a:	009b      	lsls	r3, r3, #2
     c7c:	18c3      	adds	r3, r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
     c7e:	699e      	ldr	r6, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     c80:	270f      	movs	r7, #15
     c82:	408f      	lsls	r7, r1
     c84:	43be      	bics	r6, r7
     c86:	408a      	lsls	r2, r1
     c88:	4332      	orrs	r2, r6
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     c8a:	619a      	str	r2, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     c8c:	7a63      	ldrb	r3, [r4, #9]
     c8e:	2b00      	cmp	r3, #0
     c90:	d005      	beq.n	c9e <extint_chan_set_config+0x5e>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     c92:	6942      	ldr	r2, [r0, #20]
     c94:	2301      	movs	r3, #1
     c96:	40ab      	lsls	r3, r5
     c98:	4313      	orrs	r3, r2
     c9a:	6143      	str	r3, [r0, #20]
     c9c:	e004      	b.n	ca8 <extint_chan_set_config+0x68>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     c9e:	6943      	ldr	r3, [r0, #20]
     ca0:	2201      	movs	r2, #1
     ca2:	40aa      	lsls	r2, r5
     ca4:	4393      	bics	r3, r2
     ca6:	6143      	str	r3, [r0, #20]
	}
}
     ca8:	b003      	add	sp, #12
     caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cac:	000023fd 	.word	0x000023fd
     cb0:	40001800 	.word	0x40001800

00000cb4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     cb4:	b500      	push	{lr}
     cb6:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     cb8:	ab01      	add	r3, sp, #4
     cba:	2280      	movs	r2, #128	; 0x80
     cbc:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     cbe:	780a      	ldrb	r2, [r1, #0]
     cc0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     cc2:	784a      	ldrb	r2, [r1, #1]
     cc4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     cc6:	788a      	ldrb	r2, [r1, #2]
     cc8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     cca:	0019      	movs	r1, r3
     ccc:	4b01      	ldr	r3, [pc, #4]	; (cd4 <port_pin_set_config+0x20>)
     cce:	4798      	blx	r3
}
     cd0:	b003      	add	sp, #12
     cd2:	bd00      	pop	{pc}
     cd4:	000023fd 	.word	0x000023fd

00000cd8 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     cd8:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     cda:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     cdc:	2340      	movs	r3, #64	; 0x40
     cde:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     ce0:	4281      	cmp	r1, r0
     ce2:	d201      	bcs.n	ce8 <_sercom_get_sync_baud_val+0x10>
     ce4:	e00a      	b.n	cfc <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
     ce6:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     ce8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     cea:	1c63      	adds	r3, r4, #1
     cec:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     cee:	4288      	cmp	r0, r1
     cf0:	d9f9      	bls.n	ce6 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     cf2:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     cf4:	2cff      	cmp	r4, #255	; 0xff
     cf6:	d801      	bhi.n	cfc <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     cf8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     cfa:	2300      	movs	r3, #0
	}
}
     cfc:	0018      	movs	r0, r3
     cfe:	bd10      	pop	{r4, pc}

00000d00 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     d00:	b5f0      	push	{r4, r5, r6, r7, lr}
     d02:	465f      	mov	r7, fp
     d04:	4656      	mov	r6, sl
     d06:	464d      	mov	r5, r9
     d08:	4644      	mov	r4, r8
     d0a:	b4f0      	push	{r4, r5, r6, r7}
     d0c:	b089      	sub	sp, #36	; 0x24
     d0e:	000c      	movs	r4, r1
     d10:	9205      	str	r2, [sp, #20]
     d12:	aa12      	add	r2, sp, #72	; 0x48
     d14:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     d16:	0002      	movs	r2, r0
     d18:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d1a:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     d1c:	42a2      	cmp	r2, r4
     d1e:	d900      	bls.n	d22 <_sercom_get_async_baud_val+0x22>
     d20:	e0c6      	b.n	eb0 <_sercom_get_async_baud_val+0x1b0>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     d22:	2b00      	cmp	r3, #0
     d24:	d151      	bne.n	dca <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     d26:	0002      	movs	r2, r0
     d28:	0008      	movs	r0, r1
     d2a:	2100      	movs	r1, #0
     d2c:	4d64      	ldr	r5, [pc, #400]	; (ec0 <_sercom_get_async_baud_val+0x1c0>)
     d2e:	47a8      	blx	r5
     d30:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     d32:	0026      	movs	r6, r4
     d34:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     d36:	2300      	movs	r3, #0
     d38:	2400      	movs	r4, #0
     d3a:	9300      	str	r3, [sp, #0]
     d3c:	9401      	str	r4, [sp, #4]
     d3e:	2200      	movs	r2, #0
     d40:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     d42:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     d44:	2120      	movs	r1, #32
     d46:	468c      	mov	ip, r1
     d48:	391f      	subs	r1, #31
     d4a:	9602      	str	r6, [sp, #8]
     d4c:	9703      	str	r7, [sp, #12]
     d4e:	2420      	movs	r4, #32
     d50:	4264      	negs	r4, r4
     d52:	1904      	adds	r4, r0, r4
     d54:	d403      	bmi.n	d5e <_sercom_get_async_baud_val+0x5e>
     d56:	000d      	movs	r5, r1
     d58:	40a5      	lsls	r5, r4
     d5a:	46a8      	mov	r8, r5
     d5c:	e004      	b.n	d68 <_sercom_get_async_baud_val+0x68>
     d5e:	4664      	mov	r4, ip
     d60:	1a24      	subs	r4, r4, r0
     d62:	000d      	movs	r5, r1
     d64:	40e5      	lsrs	r5, r4
     d66:	46a8      	mov	r8, r5
     d68:	000c      	movs	r4, r1
     d6a:	4084      	lsls	r4, r0
     d6c:	46a1      	mov	r9, r4

		r = r << 1;
     d6e:	0014      	movs	r4, r2
     d70:	001d      	movs	r5, r3
     d72:	18a4      	adds	r4, r4, r2
     d74:	415d      	adcs	r5, r3
     d76:	0022      	movs	r2, r4
     d78:	002b      	movs	r3, r5

		if (n & bit_shift) {
     d7a:	4646      	mov	r6, r8
     d7c:	465f      	mov	r7, fp
     d7e:	423e      	tst	r6, r7
     d80:	d003      	beq.n	d8a <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
     d82:	000e      	movs	r6, r1
     d84:	4326      	orrs	r6, r4
     d86:	0032      	movs	r2, r6
     d88:	002b      	movs	r3, r5
		}

		if (r >= d) {
     d8a:	9c02      	ldr	r4, [sp, #8]
     d8c:	9d03      	ldr	r5, [sp, #12]
     d8e:	429d      	cmp	r5, r3
     d90:	d80f      	bhi.n	db2 <_sercom_get_async_baud_val+0xb2>
     d92:	d101      	bne.n	d98 <_sercom_get_async_baud_val+0x98>
     d94:	4294      	cmp	r4, r2
     d96:	d80c      	bhi.n	db2 <_sercom_get_async_baud_val+0xb2>
			r = r - d;
     d98:	9c02      	ldr	r4, [sp, #8]
     d9a:	9d03      	ldr	r5, [sp, #12]
     d9c:	1b12      	subs	r2, r2, r4
     d9e:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     da0:	464d      	mov	r5, r9
     da2:	9e00      	ldr	r6, [sp, #0]
     da4:	9f01      	ldr	r7, [sp, #4]
     da6:	4335      	orrs	r5, r6
     da8:	003c      	movs	r4, r7
     daa:	4646      	mov	r6, r8
     dac:	4334      	orrs	r4, r6
     dae:	9500      	str	r5, [sp, #0]
     db0:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     db2:	3801      	subs	r0, #1
     db4:	d2cb      	bcs.n	d4e <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
     db6:	2200      	movs	r2, #0
     db8:	2301      	movs	r3, #1
     dba:	9800      	ldr	r0, [sp, #0]
     dbc:	9901      	ldr	r1, [sp, #4]
     dbe:	1a12      	subs	r2, r2, r0
     dc0:	418b      	sbcs	r3, r1
     dc2:	0c12      	lsrs	r2, r2, #16
     dc4:	041b      	lsls	r3, r3, #16
     dc6:	431a      	orrs	r2, r3
     dc8:	e06f      	b.n	eaa <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     dca:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     dcc:	2b01      	cmp	r3, #1
     dce:	d16c      	bne.n	eaa <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     dd0:	0f63      	lsrs	r3, r4, #29
     dd2:	9304      	str	r3, [sp, #16]
     dd4:	00e3      	lsls	r3, r4, #3
     dd6:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     dd8:	000a      	movs	r2, r1
     dda:	2300      	movs	r3, #0
     ddc:	2100      	movs	r1, #0
     dde:	4c38      	ldr	r4, [pc, #224]	; (ec0 <_sercom_get_async_baud_val+0x1c0>)
     de0:	47a0      	blx	r4
     de2:	0004      	movs	r4, r0
     de4:	000d      	movs	r5, r1
     de6:	2300      	movs	r3, #0
     de8:	469c      	mov	ip, r3
     dea:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     dec:	3320      	adds	r3, #32
     dee:	469b      	mov	fp, r3
     df0:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     df2:	4663      	mov	r3, ip
     df4:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     df6:	2300      	movs	r3, #0
     df8:	9302      	str	r3, [sp, #8]
     dfa:	2200      	movs	r2, #0
     dfc:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     dfe:	213f      	movs	r1, #63	; 0x3f
     e00:	9400      	str	r4, [sp, #0]
     e02:	9501      	str	r5, [sp, #4]
     e04:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
     e06:	2120      	movs	r1, #32
     e08:	4249      	negs	r1, r1
     e0a:	1879      	adds	r1, r7, r1
     e0c:	d403      	bmi.n	e16 <_sercom_get_async_baud_val+0x116>
     e0e:	0030      	movs	r0, r6
     e10:	4088      	lsls	r0, r1
     e12:	4684      	mov	ip, r0
     e14:	e004      	b.n	e20 <_sercom_get_async_baud_val+0x120>
     e16:	4659      	mov	r1, fp
     e18:	1bc9      	subs	r1, r1, r7
     e1a:	0030      	movs	r0, r6
     e1c:	40c8      	lsrs	r0, r1
     e1e:	4684      	mov	ip, r0
     e20:	0031      	movs	r1, r6
     e22:	40b9      	lsls	r1, r7
     e24:	4689      	mov	r9, r1

		r = r << 1;
     e26:	0010      	movs	r0, r2
     e28:	0019      	movs	r1, r3
     e2a:	1880      	adds	r0, r0, r2
     e2c:	4159      	adcs	r1, r3
     e2e:	0002      	movs	r2, r0
     e30:	000b      	movs	r3, r1

		if (n & bit_shift) {
     e32:	4644      	mov	r4, r8
     e34:	464d      	mov	r5, r9
     e36:	402c      	ands	r4, r5
     e38:	46a2      	mov	sl, r4
     e3a:	4664      	mov	r4, ip
     e3c:	9d04      	ldr	r5, [sp, #16]
     e3e:	402c      	ands	r4, r5
     e40:	46a4      	mov	ip, r4
     e42:	4654      	mov	r4, sl
     e44:	4665      	mov	r5, ip
     e46:	432c      	orrs	r4, r5
     e48:	d003      	beq.n	e52 <_sercom_get_async_baud_val+0x152>
			r |= 0x01;
     e4a:	0034      	movs	r4, r6
     e4c:	4304      	orrs	r4, r0
     e4e:	0022      	movs	r2, r4
     e50:	000b      	movs	r3, r1
		}

		if (r >= d) {
     e52:	9800      	ldr	r0, [sp, #0]
     e54:	9901      	ldr	r1, [sp, #4]
     e56:	4299      	cmp	r1, r3
     e58:	d80a      	bhi.n	e70 <_sercom_get_async_baud_val+0x170>
     e5a:	d101      	bne.n	e60 <_sercom_get_async_baud_val+0x160>
     e5c:	4290      	cmp	r0, r2
     e5e:	d807      	bhi.n	e70 <_sercom_get_async_baud_val+0x170>
			r = r - d;
     e60:	9800      	ldr	r0, [sp, #0]
     e62:	9901      	ldr	r1, [sp, #4]
     e64:	1a12      	subs	r2, r2, r0
     e66:	418b      	sbcs	r3, r1
			q |= bit_shift;
     e68:	9902      	ldr	r1, [sp, #8]
     e6a:	4648      	mov	r0, r9
     e6c:	4301      	orrs	r1, r0
     e6e:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     e70:	3f01      	subs	r7, #1
     e72:	d2c8      	bcs.n	e06 <_sercom_get_async_baud_val+0x106>
     e74:	9c00      	ldr	r4, [sp, #0]
     e76:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     e78:	9902      	ldr	r1, [sp, #8]
     e7a:	9a07      	ldr	r2, [sp, #28]
     e7c:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     e7e:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     e80:	4910      	ldr	r1, [pc, #64]	; (ec4 <_sercom_get_async_baud_val+0x1c4>)
     e82:	428b      	cmp	r3, r1
     e84:	d90b      	bls.n	e9e <_sercom_get_async_baud_val+0x19e>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     e86:	9b06      	ldr	r3, [sp, #24]
     e88:	3301      	adds	r3, #1
     e8a:	b2db      	uxtb	r3, r3
     e8c:	0019      	movs	r1, r3
     e8e:	9306      	str	r3, [sp, #24]
     e90:	0013      	movs	r3, r2
     e92:	3301      	adds	r3, #1
     e94:	9307      	str	r3, [sp, #28]
     e96:	2908      	cmp	r1, #8
     e98:	d1ad      	bne.n	df6 <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e9a:	2540      	movs	r5, #64	; 0x40
     e9c:	e008      	b.n	eb0 <_sercom_get_async_baud_val+0x1b0>
     e9e:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     ea0:	9a06      	ldr	r2, [sp, #24]
     ea2:	2a08      	cmp	r2, #8
     ea4:	d004      	beq.n	eb0 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     ea6:	0352      	lsls	r2, r2, #13
     ea8:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     eaa:	9b05      	ldr	r3, [sp, #20]
     eac:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     eae:	2500      	movs	r5, #0
}
     eb0:	0028      	movs	r0, r5
     eb2:	b009      	add	sp, #36	; 0x24
     eb4:	bc3c      	pop	{r2, r3, r4, r5}
     eb6:	4690      	mov	r8, r2
     eb8:	4699      	mov	r9, r3
     eba:	46a2      	mov	sl, r4
     ebc:	46ab      	mov	fp, r5
     ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ec0:	000062f9 	.word	0x000062f9
     ec4:	00001fff 	.word	0x00001fff

00000ec8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     ec8:	b510      	push	{r4, lr}
     eca:	b082      	sub	sp, #8
     ecc:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     ece:	4b0e      	ldr	r3, [pc, #56]	; (f08 <sercom_set_gclk_generator+0x40>)
     ed0:	781b      	ldrb	r3, [r3, #0]
     ed2:	2b00      	cmp	r3, #0
     ed4:	d001      	beq.n	eda <sercom_set_gclk_generator+0x12>
     ed6:	2900      	cmp	r1, #0
     ed8:	d00d      	beq.n	ef6 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     eda:	a901      	add	r1, sp, #4
     edc:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     ede:	2013      	movs	r0, #19
     ee0:	4b0a      	ldr	r3, [pc, #40]	; (f0c <sercom_set_gclk_generator+0x44>)
     ee2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     ee4:	2013      	movs	r0, #19
     ee6:	4b0a      	ldr	r3, [pc, #40]	; (f10 <sercom_set_gclk_generator+0x48>)
     ee8:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     eea:	4b07      	ldr	r3, [pc, #28]	; (f08 <sercom_set_gclk_generator+0x40>)
     eec:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     eee:	2201      	movs	r2, #1
     ef0:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     ef2:	2000      	movs	r0, #0
     ef4:	e006      	b.n	f04 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     ef6:	4b04      	ldr	r3, [pc, #16]	; (f08 <sercom_set_gclk_generator+0x40>)
     ef8:	785b      	ldrb	r3, [r3, #1]
     efa:	4283      	cmp	r3, r0
     efc:	d001      	beq.n	f02 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     efe:	201d      	movs	r0, #29
     f00:	e000      	b.n	f04 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     f02:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     f04:	b002      	add	sp, #8
     f06:	bd10      	pop	{r4, pc}
     f08:	200000d4 	.word	0x200000d4
     f0c:	00002305 	.word	0x00002305
     f10:	00002279 	.word	0x00002279

00000f14 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     f14:	4b44      	ldr	r3, [pc, #272]	; (1028 <_sercom_get_default_pad+0x114>)
     f16:	4298      	cmp	r0, r3
     f18:	d033      	beq.n	f82 <_sercom_get_default_pad+0x6e>
     f1a:	d806      	bhi.n	f2a <_sercom_get_default_pad+0x16>
     f1c:	4b43      	ldr	r3, [pc, #268]	; (102c <_sercom_get_default_pad+0x118>)
     f1e:	4298      	cmp	r0, r3
     f20:	d00d      	beq.n	f3e <_sercom_get_default_pad+0x2a>
     f22:	4b43      	ldr	r3, [pc, #268]	; (1030 <_sercom_get_default_pad+0x11c>)
     f24:	4298      	cmp	r0, r3
     f26:	d01b      	beq.n	f60 <_sercom_get_default_pad+0x4c>
     f28:	e06f      	b.n	100a <_sercom_get_default_pad+0xf6>
     f2a:	4b42      	ldr	r3, [pc, #264]	; (1034 <_sercom_get_default_pad+0x120>)
     f2c:	4298      	cmp	r0, r3
     f2e:	d04a      	beq.n	fc6 <_sercom_get_default_pad+0xb2>
     f30:	4b41      	ldr	r3, [pc, #260]	; (1038 <_sercom_get_default_pad+0x124>)
     f32:	4298      	cmp	r0, r3
     f34:	d058      	beq.n	fe8 <_sercom_get_default_pad+0xd4>
     f36:	4b41      	ldr	r3, [pc, #260]	; (103c <_sercom_get_default_pad+0x128>)
     f38:	4298      	cmp	r0, r3
     f3a:	d166      	bne.n	100a <_sercom_get_default_pad+0xf6>
     f3c:	e032      	b.n	fa4 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f3e:	2901      	cmp	r1, #1
     f40:	d006      	beq.n	f50 <_sercom_get_default_pad+0x3c>
     f42:	2900      	cmp	r1, #0
     f44:	d063      	beq.n	100e <_sercom_get_default_pad+0xfa>
     f46:	2902      	cmp	r1, #2
     f48:	d006      	beq.n	f58 <_sercom_get_default_pad+0x44>
     f4a:	2903      	cmp	r1, #3
     f4c:	d006      	beq.n	f5c <_sercom_get_default_pad+0x48>
     f4e:	e001      	b.n	f54 <_sercom_get_default_pad+0x40>
     f50:	483b      	ldr	r0, [pc, #236]	; (1040 <_sercom_get_default_pad+0x12c>)
     f52:	e067      	b.n	1024 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     f54:	2000      	movs	r0, #0
     f56:	e065      	b.n	1024 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f58:	483a      	ldr	r0, [pc, #232]	; (1044 <_sercom_get_default_pad+0x130>)
     f5a:	e063      	b.n	1024 <_sercom_get_default_pad+0x110>
     f5c:	483a      	ldr	r0, [pc, #232]	; (1048 <_sercom_get_default_pad+0x134>)
     f5e:	e061      	b.n	1024 <_sercom_get_default_pad+0x110>
     f60:	2901      	cmp	r1, #1
     f62:	d006      	beq.n	f72 <_sercom_get_default_pad+0x5e>
     f64:	2900      	cmp	r1, #0
     f66:	d054      	beq.n	1012 <_sercom_get_default_pad+0xfe>
     f68:	2902      	cmp	r1, #2
     f6a:	d006      	beq.n	f7a <_sercom_get_default_pad+0x66>
     f6c:	2903      	cmp	r1, #3
     f6e:	d006      	beq.n	f7e <_sercom_get_default_pad+0x6a>
     f70:	e001      	b.n	f76 <_sercom_get_default_pad+0x62>
     f72:	4836      	ldr	r0, [pc, #216]	; (104c <_sercom_get_default_pad+0x138>)
     f74:	e056      	b.n	1024 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     f76:	2000      	movs	r0, #0
     f78:	e054      	b.n	1024 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f7a:	4835      	ldr	r0, [pc, #212]	; (1050 <_sercom_get_default_pad+0x13c>)
     f7c:	e052      	b.n	1024 <_sercom_get_default_pad+0x110>
     f7e:	4835      	ldr	r0, [pc, #212]	; (1054 <_sercom_get_default_pad+0x140>)
     f80:	e050      	b.n	1024 <_sercom_get_default_pad+0x110>
     f82:	2901      	cmp	r1, #1
     f84:	d006      	beq.n	f94 <_sercom_get_default_pad+0x80>
     f86:	2900      	cmp	r1, #0
     f88:	d045      	beq.n	1016 <_sercom_get_default_pad+0x102>
     f8a:	2902      	cmp	r1, #2
     f8c:	d006      	beq.n	f9c <_sercom_get_default_pad+0x88>
     f8e:	2903      	cmp	r1, #3
     f90:	d006      	beq.n	fa0 <_sercom_get_default_pad+0x8c>
     f92:	e001      	b.n	f98 <_sercom_get_default_pad+0x84>
     f94:	4830      	ldr	r0, [pc, #192]	; (1058 <_sercom_get_default_pad+0x144>)
     f96:	e045      	b.n	1024 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     f98:	2000      	movs	r0, #0
     f9a:	e043      	b.n	1024 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f9c:	482f      	ldr	r0, [pc, #188]	; (105c <_sercom_get_default_pad+0x148>)
     f9e:	e041      	b.n	1024 <_sercom_get_default_pad+0x110>
     fa0:	482f      	ldr	r0, [pc, #188]	; (1060 <_sercom_get_default_pad+0x14c>)
     fa2:	e03f      	b.n	1024 <_sercom_get_default_pad+0x110>
     fa4:	2901      	cmp	r1, #1
     fa6:	d006      	beq.n	fb6 <_sercom_get_default_pad+0xa2>
     fa8:	2900      	cmp	r1, #0
     faa:	d036      	beq.n	101a <_sercom_get_default_pad+0x106>
     fac:	2902      	cmp	r1, #2
     fae:	d006      	beq.n	fbe <_sercom_get_default_pad+0xaa>
     fb0:	2903      	cmp	r1, #3
     fb2:	d006      	beq.n	fc2 <_sercom_get_default_pad+0xae>
     fb4:	e001      	b.n	fba <_sercom_get_default_pad+0xa6>
     fb6:	482b      	ldr	r0, [pc, #172]	; (1064 <_sercom_get_default_pad+0x150>)
     fb8:	e034      	b.n	1024 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     fba:	2000      	movs	r0, #0
     fbc:	e032      	b.n	1024 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     fbe:	482a      	ldr	r0, [pc, #168]	; (1068 <_sercom_get_default_pad+0x154>)
     fc0:	e030      	b.n	1024 <_sercom_get_default_pad+0x110>
     fc2:	482a      	ldr	r0, [pc, #168]	; (106c <_sercom_get_default_pad+0x158>)
     fc4:	e02e      	b.n	1024 <_sercom_get_default_pad+0x110>
     fc6:	2901      	cmp	r1, #1
     fc8:	d006      	beq.n	fd8 <_sercom_get_default_pad+0xc4>
     fca:	2900      	cmp	r1, #0
     fcc:	d027      	beq.n	101e <_sercom_get_default_pad+0x10a>
     fce:	2902      	cmp	r1, #2
     fd0:	d006      	beq.n	fe0 <_sercom_get_default_pad+0xcc>
     fd2:	2903      	cmp	r1, #3
     fd4:	d006      	beq.n	fe4 <_sercom_get_default_pad+0xd0>
     fd6:	e001      	b.n	fdc <_sercom_get_default_pad+0xc8>
     fd8:	4825      	ldr	r0, [pc, #148]	; (1070 <_sercom_get_default_pad+0x15c>)
     fda:	e023      	b.n	1024 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     fdc:	2000      	movs	r0, #0
     fde:	e021      	b.n	1024 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     fe0:	4824      	ldr	r0, [pc, #144]	; (1074 <_sercom_get_default_pad+0x160>)
     fe2:	e01f      	b.n	1024 <_sercom_get_default_pad+0x110>
     fe4:	4824      	ldr	r0, [pc, #144]	; (1078 <_sercom_get_default_pad+0x164>)
     fe6:	e01d      	b.n	1024 <_sercom_get_default_pad+0x110>
     fe8:	2901      	cmp	r1, #1
     fea:	d006      	beq.n	ffa <_sercom_get_default_pad+0xe6>
     fec:	2900      	cmp	r1, #0
     fee:	d018      	beq.n	1022 <_sercom_get_default_pad+0x10e>
     ff0:	2902      	cmp	r1, #2
     ff2:	d006      	beq.n	1002 <_sercom_get_default_pad+0xee>
     ff4:	2903      	cmp	r1, #3
     ff6:	d006      	beq.n	1006 <_sercom_get_default_pad+0xf2>
     ff8:	e001      	b.n	ffe <_sercom_get_default_pad+0xea>
     ffa:	4820      	ldr	r0, [pc, #128]	; (107c <_sercom_get_default_pad+0x168>)
     ffc:	e012      	b.n	1024 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     ffe:	2000      	movs	r0, #0
    1000:	e010      	b.n	1024 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1002:	481f      	ldr	r0, [pc, #124]	; (1080 <_sercom_get_default_pad+0x16c>)
    1004:	e00e      	b.n	1024 <_sercom_get_default_pad+0x110>
    1006:	481f      	ldr	r0, [pc, #124]	; (1084 <_sercom_get_default_pad+0x170>)
    1008:	e00c      	b.n	1024 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    100a:	2000      	movs	r0, #0
    100c:	e00a      	b.n	1024 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    100e:	481e      	ldr	r0, [pc, #120]	; (1088 <_sercom_get_default_pad+0x174>)
    1010:	e008      	b.n	1024 <_sercom_get_default_pad+0x110>
    1012:	2003      	movs	r0, #3
    1014:	e006      	b.n	1024 <_sercom_get_default_pad+0x110>
    1016:	481d      	ldr	r0, [pc, #116]	; (108c <_sercom_get_default_pad+0x178>)
    1018:	e004      	b.n	1024 <_sercom_get_default_pad+0x110>
    101a:	481d      	ldr	r0, [pc, #116]	; (1090 <_sercom_get_default_pad+0x17c>)
    101c:	e002      	b.n	1024 <_sercom_get_default_pad+0x110>
    101e:	481d      	ldr	r0, [pc, #116]	; (1094 <_sercom_get_default_pad+0x180>)
    1020:	e000      	b.n	1024 <_sercom_get_default_pad+0x110>
    1022:	481d      	ldr	r0, [pc, #116]	; (1098 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
    1024:	4770      	bx	lr
    1026:	46c0      	nop			; (mov r8, r8)
    1028:	42001000 	.word	0x42001000
    102c:	42000800 	.word	0x42000800
    1030:	42000c00 	.word	0x42000c00
    1034:	42001800 	.word	0x42001800
    1038:	42001c00 	.word	0x42001c00
    103c:	42001400 	.word	0x42001400
    1040:	00050003 	.word	0x00050003
    1044:	00060003 	.word	0x00060003
    1048:	00070003 	.word	0x00070003
    104c:	00010003 	.word	0x00010003
    1050:	001e0003 	.word	0x001e0003
    1054:	001f0003 	.word	0x001f0003
    1058:	000d0002 	.word	0x000d0002
    105c:	000e0002 	.word	0x000e0002
    1060:	000f0002 	.word	0x000f0002
    1064:	00110003 	.word	0x00110003
    1068:	00120003 	.word	0x00120003
    106c:	00130003 	.word	0x00130003
    1070:	003f0005 	.word	0x003f0005
    1074:	003e0005 	.word	0x003e0005
    1078:	00520005 	.word	0x00520005
    107c:	00170003 	.word	0x00170003
    1080:	00180003 	.word	0x00180003
    1084:	00190003 	.word	0x00190003
    1088:	00040003 	.word	0x00040003
    108c:	000c0002 	.word	0x000c0002
    1090:	00100003 	.word	0x00100003
    1094:	00530005 	.word	0x00530005
    1098:	00160003 	.word	0x00160003

0000109c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    109c:	b530      	push	{r4, r5, lr}
    109e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    10a0:	4b0c      	ldr	r3, [pc, #48]	; (10d4 <_sercom_get_sercom_inst_index+0x38>)
    10a2:	466a      	mov	r2, sp
    10a4:	cb32      	ldmia	r3!, {r1, r4, r5}
    10a6:	c232      	stmia	r2!, {r1, r4, r5}
    10a8:	cb32      	ldmia	r3!, {r1, r4, r5}
    10aa:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    10ac:	9b00      	ldr	r3, [sp, #0]
    10ae:	4283      	cmp	r3, r0
    10b0:	d006      	beq.n	10c0 <_sercom_get_sercom_inst_index+0x24>
    10b2:	2301      	movs	r3, #1
    10b4:	009a      	lsls	r2, r3, #2
    10b6:	4669      	mov	r1, sp
    10b8:	5852      	ldr	r2, [r2, r1]
    10ba:	4282      	cmp	r2, r0
    10bc:	d103      	bne.n	10c6 <_sercom_get_sercom_inst_index+0x2a>
    10be:	e000      	b.n	10c2 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10c0:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    10c2:	b2d8      	uxtb	r0, r3
    10c4:	e003      	b.n	10ce <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10c6:	3301      	adds	r3, #1
    10c8:	2b06      	cmp	r3, #6
    10ca:	d1f3      	bne.n	10b4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    10cc:	2000      	movs	r0, #0
}
    10ce:	b007      	add	sp, #28
    10d0:	bd30      	pop	{r4, r5, pc}
    10d2:	46c0      	nop			; (mov r8, r8)
    10d4:	00008b20 	.word	0x00008b20

000010d8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    10d8:	4770      	bx	lr
    10da:	46c0      	nop			; (mov r8, r8)

000010dc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    10dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    10de:	4b0a      	ldr	r3, [pc, #40]	; (1108 <_sercom_set_handler+0x2c>)
    10e0:	781b      	ldrb	r3, [r3, #0]
    10e2:	2b00      	cmp	r3, #0
    10e4:	d10c      	bne.n	1100 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    10e6:	4f09      	ldr	r7, [pc, #36]	; (110c <_sercom_set_handler+0x30>)
    10e8:	4e09      	ldr	r6, [pc, #36]	; (1110 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    10ea:	4d0a      	ldr	r5, [pc, #40]	; (1114 <_sercom_set_handler+0x38>)
    10ec:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    10ee:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    10f0:	195a      	adds	r2, r3, r5
    10f2:	6014      	str	r4, [r2, #0]
    10f4:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10f6:	2b18      	cmp	r3, #24
    10f8:	d1f9      	bne.n	10ee <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    10fa:	2201      	movs	r2, #1
    10fc:	4b02      	ldr	r3, [pc, #8]	; (1108 <_sercom_set_handler+0x2c>)
    10fe:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1100:	0080      	lsls	r0, r0, #2
    1102:	4b02      	ldr	r3, [pc, #8]	; (110c <_sercom_set_handler+0x30>)
    1104:	50c1      	str	r1, [r0, r3]
}
    1106:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1108:	200000d6 	.word	0x200000d6
    110c:	200000d8 	.word	0x200000d8
    1110:	000010d9 	.word	0x000010d9
    1114:	200007c8 	.word	0x200007c8

00001118 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1118:	b510      	push	{r4, lr}
    111a:	b082      	sub	sp, #8
    111c:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    111e:	2206      	movs	r2, #6
    1120:	4905      	ldr	r1, [pc, #20]	; (1138 <_sercom_get_interrupt_vector+0x20>)
    1122:	4668      	mov	r0, sp
    1124:	4b05      	ldr	r3, [pc, #20]	; (113c <_sercom_get_interrupt_vector+0x24>)
    1126:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1128:	0020      	movs	r0, r4
    112a:	4b05      	ldr	r3, [pc, #20]	; (1140 <_sercom_get_interrupt_vector+0x28>)
    112c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    112e:	466b      	mov	r3, sp
    1130:	5618      	ldrsb	r0, [r3, r0]
}
    1132:	b002      	add	sp, #8
    1134:	bd10      	pop	{r4, pc}
    1136:	46c0      	nop			; (mov r8, r8)
    1138:	00008b38 	.word	0x00008b38
    113c:	000035d9 	.word	0x000035d9
    1140:	0000109d 	.word	0x0000109d

00001144 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1144:	b510      	push	{r4, lr}
    1146:	4b02      	ldr	r3, [pc, #8]	; (1150 <SERCOM0_Handler+0xc>)
    1148:	681b      	ldr	r3, [r3, #0]
    114a:	2000      	movs	r0, #0
    114c:	4798      	blx	r3
    114e:	bd10      	pop	{r4, pc}
    1150:	200000d8 	.word	0x200000d8

00001154 <SERCOM1_Handler>:
    1154:	b510      	push	{r4, lr}
    1156:	4b02      	ldr	r3, [pc, #8]	; (1160 <SERCOM1_Handler+0xc>)
    1158:	685b      	ldr	r3, [r3, #4]
    115a:	2001      	movs	r0, #1
    115c:	4798      	blx	r3
    115e:	bd10      	pop	{r4, pc}
    1160:	200000d8 	.word	0x200000d8

00001164 <SERCOM2_Handler>:
    1164:	b510      	push	{r4, lr}
    1166:	4b02      	ldr	r3, [pc, #8]	; (1170 <SERCOM2_Handler+0xc>)
    1168:	689b      	ldr	r3, [r3, #8]
    116a:	2002      	movs	r0, #2
    116c:	4798      	blx	r3
    116e:	bd10      	pop	{r4, pc}
    1170:	200000d8 	.word	0x200000d8

00001174 <SERCOM3_Handler>:
    1174:	b510      	push	{r4, lr}
    1176:	4b02      	ldr	r3, [pc, #8]	; (1180 <SERCOM3_Handler+0xc>)
    1178:	68db      	ldr	r3, [r3, #12]
    117a:	2003      	movs	r0, #3
    117c:	4798      	blx	r3
    117e:	bd10      	pop	{r4, pc}
    1180:	200000d8 	.word	0x200000d8

00001184 <SERCOM4_Handler>:
    1184:	b510      	push	{r4, lr}
    1186:	4b02      	ldr	r3, [pc, #8]	; (1190 <SERCOM4_Handler+0xc>)
    1188:	691b      	ldr	r3, [r3, #16]
    118a:	2004      	movs	r0, #4
    118c:	4798      	blx	r3
    118e:	bd10      	pop	{r4, pc}
    1190:	200000d8 	.word	0x200000d8

00001194 <SERCOM5_Handler>:
    1194:	b510      	push	{r4, lr}
    1196:	4b02      	ldr	r3, [pc, #8]	; (11a0 <SERCOM5_Handler+0xc>)
    1198:	695b      	ldr	r3, [r3, #20]
    119a:	2005      	movs	r0, #5
    119c:	4798      	blx	r3
    119e:	bd10      	pop	{r4, pc}
    11a0:	200000d8 	.word	0x200000d8

000011a4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    11a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11a6:	4657      	mov	r7, sl
    11a8:	464e      	mov	r6, r9
    11aa:	4645      	mov	r5, r8
    11ac:	b4e0      	push	{r5, r6, r7}
    11ae:	b08a      	sub	sp, #40	; 0x28
    11b0:	0005      	movs	r5, r0
    11b2:	000e      	movs	r6, r1
    11b4:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    11b6:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    11b8:	680b      	ldr	r3, [r1, #0]
    11ba:	079b      	lsls	r3, r3, #30
    11bc:	d400      	bmi.n	11c0 <spi_init+0x1c>
    11be:	e08c      	b.n	12da <spi_init+0x136>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    11c0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    11c2:	9305      	str	r3, [sp, #20]
    11c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    11c6:	9306      	str	r3, [sp, #24]
    11c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    11ca:	9307      	str	r3, [sp, #28]
    11cc:	6b53      	ldr	r3, [r2, #52]	; 0x34
    11ce:	9308      	str	r3, [sp, #32]
    11d0:	2700      	movs	r7, #0
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    11d2:	231f      	movs	r3, #31
    11d4:	4699      	mov	r9, r3
    11d6:	b2f9      	uxtb	r1, r7
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    11d8:	00bb      	lsls	r3, r7, #2
    11da:	aa05      	add	r2, sp, #20
    11dc:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    11de:	2800      	cmp	r0, #0
    11e0:	d102      	bne.n	11e8 <spi_init+0x44>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    11e2:	0030      	movs	r0, r6
    11e4:	4b8f      	ldr	r3, [pc, #572]	; (1424 <spi_init+0x280>)
    11e6:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
    11e8:	1c43      	adds	r3, r0, #1
    11ea:	d029      	beq.n	1240 <spi_init+0x9c>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    11ec:	0402      	lsls	r2, r0, #16
    11ee:	0c13      	lsrs	r3, r2, #16
    11f0:	4698      	mov	r8, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    11f2:	0c00      	lsrs	r0, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    11f4:	b2c1      	uxtb	r1, r0
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    11f6:	2300      	movs	r3, #0
    11f8:	469c      	mov	ip, r3
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    11fa:	0603      	lsls	r3, r0, #24
    11fc:	d404      	bmi.n	1208 <spi_init+0x64>
		return &(ports[port_index]->Group[group_index]);
    11fe:	094b      	lsrs	r3, r1, #5
    1200:	01db      	lsls	r3, r3, #7
    1202:	4a89      	ldr	r2, [pc, #548]	; (1428 <spi_init+0x284>)
    1204:	4694      	mov	ip, r2
    1206:	449c      	add	ip, r3
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    1208:	464b      	mov	r3, r9
    120a:	400b      	ands	r3, r1

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    120c:	4660      	mov	r0, ip
    120e:	18c0      	adds	r0, r0, r3
    1210:	3040      	adds	r0, #64	; 0x40
    1212:	7800      	ldrb	r0, [r0, #0]
    1214:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    1216:	2080      	movs	r0, #128	; 0x80
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1218:	4652      	mov	r2, sl
    121a:	07d2      	lsls	r2, r2, #31
    121c:	d50a      	bpl.n	1234 <spi_init+0x90>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    121e:	085b      	lsrs	r3, r3, #1
    1220:	4463      	add	r3, ip
    1222:	3330      	adds	r3, #48	; 0x30
    1224:	7818      	ldrb	r0, [r3, #0]
    1226:	b2c0      	uxtb	r0, r0

	if (pin_index & 1) {
    1228:	07cb      	lsls	r3, r1, #31
    122a:	d501      	bpl.n	1230 <spi_init+0x8c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    122c:	0900      	lsrs	r0, r0, #4
    122e:	e001      	b.n	1234 <spi_init+0x90>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    1230:	230f      	movs	r3, #15
    1232:	4018      	ands	r0, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    1234:	4580      	cmp	r8, r0
    1236:	d003      	beq.n	1240 <spi_init+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
    1238:	2300      	movs	r3, #0
    123a:	602b      	str	r3, [r5, #0]
			return STATUS_ERR_DENIED;
    123c:	201c      	movs	r0, #28
    123e:	e0ea      	b.n	1416 <spi_init+0x272>
    1240:	3701      	adds	r7, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1242:	2f04      	cmp	r7, #4
    1244:	d1c7      	bne.n	11d6 <spi_init+0x32>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    1246:	2013      	movs	r0, #19
    1248:	4b78      	ldr	r3, [pc, #480]	; (142c <spi_init+0x288>)
    124a:	4798      	blx	r3
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    124c:	7822      	ldrb	r2, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    124e:	2100      	movs	r1, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    1250:	2a01      	cmp	r2, #1
    1252:	d112      	bne.n	127a <spi_init+0xd6>
		enum status_code error_code = _sercom_get_sync_baud_val(
    1254:	aa04      	add	r2, sp, #16
    1256:	0001      	movs	r1, r0
    1258:	69a0      	ldr	r0, [r4, #24]
    125a:	4b75      	ldr	r3, [pc, #468]	; (1430 <spi_init+0x28c>)
    125c:	4798      	blx	r3
    125e:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    1260:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    1262:	2b00      	cmp	r3, #0
    1264:	d000      	beq.n	1268 <spi_init+0xc4>
    1266:	e0d6      	b.n	1416 <spi_init+0x272>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    1268:	7b33      	ldrb	r3, [r6, #12]
    126a:	b2db      	uxtb	r3, r3
    126c:	aa04      	add	r2, sp, #16
    126e:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    1270:	3005      	adds	r0, #5
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    1272:	429a      	cmp	r2, r3
    1274:	d000      	beq.n	1278 <spi_init+0xd4>
    1276:	e0ce      	b.n	1416 <spi_init+0x272>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    1278:	210c      	movs	r1, #12

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    127a:	6863      	ldr	r3, [r4, #4]
    127c:	68a2      	ldr	r2, [r4, #8]
    127e:	4313      	orrs	r3, r2
    1280:	68e2      	ldr	r2, [r4, #12]
    1282:	4313      	orrs	r3, r2
    1284:	430b      	orrs	r3, r1

	/* Set SPI character size */
	ctrlb |= config->character_size;
    1286:	7c21      	ldrb	r1, [r4, #16]

	if (config->run_in_standby) {
    1288:	7c62      	ldrb	r2, [r4, #17]
    128a:	2a00      	cmp	r2, #0
    128c:	d001      	beq.n	1292 <spi_init+0xee>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    128e:	2280      	movs	r2, #128	; 0x80
    1290:	4313      	orrs	r3, r2
	}

	if (config->receiver_enable) {
    1292:	7ca2      	ldrb	r2, [r4, #18]
    1294:	2a00      	cmp	r2, #0
    1296:	d002      	beq.n	129e <spi_init+0xfa>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1298:	2280      	movs	r2, #128	; 0x80
    129a:	0292      	lsls	r2, r2, #10
    129c:	4311      	orrs	r1, r2
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    129e:	7ce2      	ldrb	r2, [r4, #19]
    12a0:	2a00      	cmp	r2, #0
    12a2:	d002      	beq.n	12aa <spi_init+0x106>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    12a4:	2280      	movs	r2, #128	; 0x80
    12a6:	0092      	lsls	r2, r2, #2
    12a8:	4311      	orrs	r1, r2
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    12aa:	7d22      	ldrb	r2, [r4, #20]
    12ac:	2a00      	cmp	r2, #0
    12ae:	d002      	beq.n	12b6 <spi_init+0x112>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    12b0:	2280      	movs	r2, #128	; 0x80
    12b2:	0192      	lsls	r2, r2, #6
    12b4:	4311      	orrs	r1, r2
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    12b6:	6830      	ldr	r0, [r6, #0]
    12b8:	2202      	movs	r2, #2
    12ba:	4313      	orrs	r3, r2
    12bc:	4283      	cmp	r3, r0
    12be:	d108      	bne.n	12d2 <spi_init+0x12e>
			spi_module->CTRLB.reg == ctrlb) {
    12c0:	6873      	ldr	r3, [r6, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    12c2:	428b      	cmp	r3, r1
    12c4:	d105      	bne.n	12d2 <spi_init+0x12e>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    12c6:	7823      	ldrb	r3, [r4, #0]
    12c8:	716b      	strb	r3, [r5, #5]
		module->character_size = config->character_size;
    12ca:	7c23      	ldrb	r3, [r4, #16]
    12cc:	71ab      	strb	r3, [r5, #6]
		return STATUS_OK;
    12ce:	2000      	movs	r0, #0
    12d0:	e0a1      	b.n	1416 <spi_init+0x272>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    12d2:	2300      	movs	r3, #0
    12d4:	602b      	str	r3, [r5, #0]

	return STATUS_ERR_DENIED;
    12d6:	201c      	movs	r0, #28
    12d8:	e09d      	b.n	1416 <spi_init+0x272>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    12da:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    12dc:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    12de:	07db      	lsls	r3, r3, #31
    12e0:	d500      	bpl.n	12e4 <spi_init+0x140>
    12e2:	e098      	b.n	1416 <spi_init+0x272>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    12e4:	0008      	movs	r0, r1
    12e6:	4b53      	ldr	r3, [pc, #332]	; (1434 <spi_init+0x290>)
    12e8:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    12ea:	4953      	ldr	r1, [pc, #332]	; (1438 <spi_init+0x294>)
    12ec:	6a0a      	ldr	r2, [r1, #32]
    12ee:	1c87      	adds	r7, r0, #2
    12f0:	2301      	movs	r3, #1
    12f2:	40bb      	lsls	r3, r7
    12f4:	4313      	orrs	r3, r2
    12f6:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    12f8:	a909      	add	r1, sp, #36	; 0x24
    12fa:	2724      	movs	r7, #36	; 0x24
    12fc:	5de3      	ldrb	r3, [r4, r7]
    12fe:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1300:	3014      	adds	r0, #20
    1302:	b2c3      	uxtb	r3, r0
    1304:	9301      	str	r3, [sp, #4]
    1306:	0018      	movs	r0, r3
    1308:	4b4c      	ldr	r3, [pc, #304]	; (143c <spi_init+0x298>)
    130a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    130c:	9801      	ldr	r0, [sp, #4]
    130e:	4b4c      	ldr	r3, [pc, #304]	; (1440 <spi_init+0x29c>)
    1310:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1312:	5de0      	ldrb	r0, [r4, r7]
    1314:	2100      	movs	r1, #0
    1316:	4b4b      	ldr	r3, [pc, #300]	; (1444 <spi_init+0x2a0>)
    1318:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    131a:	7823      	ldrb	r3, [r4, #0]
    131c:	2b01      	cmp	r3, #1
    131e:	d103      	bne.n	1328 <spi_init+0x184>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1320:	6832      	ldr	r2, [r6, #0]
    1322:	330b      	adds	r3, #11
    1324:	4313      	orrs	r3, r2
    1326:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1328:	682e      	ldr	r6, [r5, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    132a:	ab04      	add	r3, sp, #16
    132c:	2280      	movs	r2, #128	; 0x80
    132e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1330:	2200      	movs	r2, #0
    1332:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1334:	2101      	movs	r1, #1
    1336:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    1338:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    133a:	7823      	ldrb	r3, [r4, #0]
    133c:	2b00      	cmp	r3, #0
    133e:	d101      	bne.n	1344 <spi_init+0x1a0>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1340:	ab04      	add	r3, sp, #16
    1342:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    1344:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1346:	9305      	str	r3, [sp, #20]
    1348:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    134a:	9306      	str	r3, [sp, #24]
    134c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    134e:	9307      	str	r3, [sp, #28]
    1350:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1352:	9308      	str	r3, [sp, #32]
    1354:	2700      	movs	r7, #0
    1356:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1358:	00bb      	lsls	r3, r7, #2
    135a:	aa05      	add	r2, sp, #20
    135c:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    135e:	2800      	cmp	r0, #0
    1360:	d102      	bne.n	1368 <spi_init+0x1c4>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1362:	0030      	movs	r0, r6
    1364:	4b2f      	ldr	r3, [pc, #188]	; (1424 <spi_init+0x280>)
    1366:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1368:	1c43      	adds	r3, r0, #1
    136a:	d006      	beq.n	137a <spi_init+0x1d6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    136c:	ab02      	add	r3, sp, #8
    136e:	7218      	strb	r0, [r3, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1370:	0c00      	lsrs	r0, r0, #16
    1372:	b2c0      	uxtb	r0, r0
    1374:	a904      	add	r1, sp, #16
    1376:	4b34      	ldr	r3, [pc, #208]	; (1448 <spi_init+0x2a4>)
    1378:	4798      	blx	r3
    137a:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    137c:	2f04      	cmp	r7, #4
    137e:	d1ea      	bne.n	1356 <spi_init+0x1b2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    1380:	7823      	ldrb	r3, [r4, #0]
    1382:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    1384:	7c23      	ldrb	r3, [r4, #16]
    1386:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    1388:	7ca3      	ldrb	r3, [r4, #18]
    138a:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    138c:	7d23      	ldrb	r3, [r4, #20]
    138e:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    1390:	2200      	movs	r2, #0
    1392:	ab02      	add	r3, sp, #8
    1394:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    1396:	7823      	ldrb	r3, [r4, #0]
    1398:	2b01      	cmp	r3, #1
    139a:	d114      	bne.n	13c6 <spi_init+0x222>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    139c:	6828      	ldr	r0, [r5, #0]
    139e:	4b25      	ldr	r3, [pc, #148]	; (1434 <spi_init+0x290>)
    13a0:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    13a2:	3014      	adds	r0, #20
    13a4:	b2c0      	uxtb	r0, r0
    13a6:	4b21      	ldr	r3, [pc, #132]	; (142c <spi_init+0x288>)
    13a8:	4798      	blx	r3
    13aa:	0001      	movs	r1, r0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    13ac:	ab02      	add	r3, sp, #8
    13ae:	1d9a      	adds	r2, r3, #6
    13b0:	69a0      	ldr	r0, [r4, #24]
    13b2:	4b1f      	ldr	r3, [pc, #124]	; (1430 <spi_init+0x28c>)
    13b4:	4798      	blx	r3
    13b6:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    13b8:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    13ba:	2b00      	cmp	r3, #0
    13bc:	d12b      	bne.n	1416 <spi_init+0x272>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    13be:	ab02      	add	r3, sp, #8
    13c0:	3306      	adds	r3, #6
    13c2:	781b      	ldrb	r3, [r3, #0]
    13c4:	7333      	strb	r3, [r6, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    13c6:	6863      	ldr	r3, [r4, #4]
    13c8:	68a2      	ldr	r2, [r4, #8]
    13ca:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    13cc:	68e2      	ldr	r2, [r4, #12]
    13ce:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
    13d0:	7c22      	ldrb	r2, [r4, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    13d2:	7c61      	ldrb	r1, [r4, #17]
    13d4:	2900      	cmp	r1, #0
    13d6:	d103      	bne.n	13e0 <spi_init+0x23c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    13d8:	491c      	ldr	r1, [pc, #112]	; (144c <spi_init+0x2a8>)
    13da:	7889      	ldrb	r1, [r1, #2]
    13dc:	0789      	lsls	r1, r1, #30
    13de:	d501      	bpl.n	13e4 <spi_init+0x240>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    13e0:	2180      	movs	r1, #128	; 0x80
    13e2:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
    13e4:	7ca1      	ldrb	r1, [r4, #18]
    13e6:	2900      	cmp	r1, #0
    13e8:	d002      	beq.n	13f0 <spi_init+0x24c>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    13ea:	2180      	movs	r1, #128	; 0x80
    13ec:	0289      	lsls	r1, r1, #10
    13ee:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    13f0:	7ce1      	ldrb	r1, [r4, #19]
    13f2:	2900      	cmp	r1, #0
    13f4:	d002      	beq.n	13fc <spi_init+0x258>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    13f6:	2180      	movs	r1, #128	; 0x80
    13f8:	0089      	lsls	r1, r1, #2
    13fa:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    13fc:	7d21      	ldrb	r1, [r4, #20]
    13fe:	2900      	cmp	r1, #0
    1400:	d002      	beq.n	1408 <spi_init+0x264>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1402:	2180      	movs	r1, #128	; 0x80
    1404:	0189      	lsls	r1, r1, #6
    1406:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    1408:	6831      	ldr	r1, [r6, #0]
    140a:	430b      	orrs	r3, r1
    140c:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    140e:	6873      	ldr	r3, [r6, #4]
    1410:	4313      	orrs	r3, r2
    1412:	6073      	str	r3, [r6, #4]

	return STATUS_OK;
    1414:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1416:	b00a      	add	sp, #40	; 0x28
    1418:	bc1c      	pop	{r2, r3, r4}
    141a:	4690      	mov	r8, r2
    141c:	4699      	mov	r9, r3
    141e:	46a2      	mov	sl, r4
    1420:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1422:	46c0      	nop			; (mov r8, r8)
    1424:	00000f15 	.word	0x00000f15
    1428:	41004400 	.word	0x41004400
    142c:	00002321 	.word	0x00002321
    1430:	00000cd9 	.word	0x00000cd9
    1434:	0000109d 	.word	0x0000109d
    1438:	40000400 	.word	0x40000400
    143c:	00002305 	.word	0x00002305
    1440:	00002279 	.word	0x00002279
    1444:	00000ec9 	.word	0x00000ec9
    1448:	000023fd 	.word	0x000023fd
    144c:	41002000 	.word	0x41002000

00001450 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1450:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1452:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    1454:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1456:	2c01      	cmp	r4, #1
    1458:	d16e      	bne.n	1538 <spi_select_slave+0xe8>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    145a:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    145c:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    145e:	2c00      	cmp	r4, #0
    1460:	d16a      	bne.n	1538 <spi_select_slave+0xe8>
#  endif
	{
		if (select) {
    1462:	2a00      	cmp	r2, #0
    1464:	d058      	beq.n	1518 <spi_select_slave+0xc8>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    1466:	784b      	ldrb	r3, [r1, #1]
    1468:	2b00      	cmp	r3, #0
    146a:	d044      	beq.n	14f6 <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    146c:	6803      	ldr	r3, [r0, #0]
    146e:	7e1b      	ldrb	r3, [r3, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    1470:	07db      	lsls	r3, r3, #31
    1472:	d410      	bmi.n	1496 <spi_select_slave+0x46>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    1474:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1476:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1478:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    147a:	2900      	cmp	r1, #0
    147c:	d104      	bne.n	1488 <spi_select_slave+0x38>
		return &(ports[port_index]->Group[group_index]);
    147e:	095a      	lsrs	r2, r3, #5
    1480:	01d2      	lsls	r2, r2, #7
    1482:	492e      	ldr	r1, [pc, #184]	; (153c <spi_select_slave+0xec>)
    1484:	468c      	mov	ip, r1
    1486:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1488:	211f      	movs	r1, #31
    148a:	400b      	ands	r3, r1
    148c:	391e      	subs	r1, #30
    148e:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1490:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
    1492:	2305      	movs	r3, #5
    1494:	e050      	b.n	1538 <spi_select_slave+0xe8>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    1496:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1498:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    149a:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    149c:	2c00      	cmp	r4, #0
    149e:	d104      	bne.n	14aa <spi_select_slave+0x5a>
		return &(ports[port_index]->Group[group_index]);
    14a0:	095a      	lsrs	r2, r3, #5
    14a2:	01d2      	lsls	r2, r2, #7
    14a4:	4c25      	ldr	r4, [pc, #148]	; (153c <spi_select_slave+0xec>)
    14a6:	46a4      	mov	ip, r4
    14a8:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    14aa:	241f      	movs	r4, #31
    14ac:	4023      	ands	r3, r4
    14ae:	3c1e      	subs	r4, #30
    14b0:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    14b2:	6154      	str	r4, [r2, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    14b4:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    14b6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    14b8:	07d2      	lsls	r2, r2, #31
    14ba:	d501      	bpl.n	14c0 <spi_select_slave+0x70>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    14bc:	788a      	ldrb	r2, [r1, #2]
    14be:	629a      	str	r2, [r3, #40]	; 0x28

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    14c0:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    14c2:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    14c4:	2a00      	cmp	r2, #0
    14c6:	d137      	bne.n	1538 <spi_select_slave+0xe8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    14c8:	6802      	ldr	r2, [r0, #0]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    14ca:	2104      	movs	r1, #4

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    14cc:	7e13      	ldrb	r3, [r2, #24]
    14ce:	420b      	tst	r3, r1
    14d0:	d0fc      	beq.n	14cc <spi_select_slave+0x7c>
    14d2:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    14d4:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    14d6:	0749      	lsls	r1, r1, #29
    14d8:	d52e      	bpl.n	1538 <spi_select_slave+0xe8>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    14da:	8b53      	ldrh	r3, [r2, #26]
    14dc:	075b      	lsls	r3, r3, #29
    14de:	d501      	bpl.n	14e4 <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    14e0:	2304      	movs	r3, #4
    14e2:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    14e4:	7983      	ldrb	r3, [r0, #6]
    14e6:	2b01      	cmp	r3, #1
    14e8:	d102      	bne.n	14f0 <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    14ea:	6a93      	ldr	r3, [r2, #40]	; 0x28
    14ec:	2300      	movs	r3, #0
    14ee:	e023      	b.n	1538 <spi_select_slave+0xe8>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    14f0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    14f2:	2300      	movs	r3, #0
    14f4:	e020      	b.n	1538 <spi_select_slave+0xe8>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    14f6:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    14f8:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    14fa:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    14fc:	2900      	cmp	r1, #0
    14fe:	d104      	bne.n	150a <spi_select_slave+0xba>
		return &(ports[port_index]->Group[group_index]);
    1500:	095a      	lsrs	r2, r3, #5
    1502:	01d2      	lsls	r2, r2, #7
    1504:	490d      	ldr	r1, [pc, #52]	; (153c <spi_select_slave+0xec>)
    1506:	468c      	mov	ip, r1
    1508:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    150a:	211f      	movs	r1, #31
    150c:	400b      	ands	r3, r1
    150e:	391e      	subs	r1, #30
    1510:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1512:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    1514:	2300      	movs	r3, #0
    1516:	e00f      	b.n	1538 <spi_select_slave+0xe8>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    1518:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    151a:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    151c:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    151e:	2900      	cmp	r1, #0
    1520:	d104      	bne.n	152c <spi_select_slave+0xdc>
		return &(ports[port_index]->Group[group_index]);
    1522:	095a      	lsrs	r2, r3, #5
    1524:	01d2      	lsls	r2, r2, #7
    1526:	4905      	ldr	r1, [pc, #20]	; (153c <spi_select_slave+0xec>)
    1528:	468c      	mov	ip, r1
    152a:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    152c:	211f      	movs	r1, #31
    152e:	400b      	ands	r3, r1
    1530:	391e      	subs	r1, #30
    1532:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1534:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
    1536:	2300      	movs	r3, #0
}
    1538:	0018      	movs	r0, r3
    153a:	bd10      	pop	{r4, pc}
    153c:	41004400 	.word	0x41004400

00001540 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1540:	b5f0      	push	{r4, r5, r6, r7, lr}
    1542:	465f      	mov	r7, fp
    1544:	4656      	mov	r6, sl
    1546:	464d      	mov	r5, r9
    1548:	4644      	mov	r4, r8
    154a:	b4f0      	push	{r4, r5, r6, r7}
    154c:	b091      	sub	sp, #68	; 0x44
    154e:	0005      	movs	r5, r0
    1550:	000c      	movs	r4, r1
    1552:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1554:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1556:	0008      	movs	r0, r1
    1558:	4bb9      	ldr	r3, [pc, #740]	; (1840 <usart_init+0x300>)
    155a:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    155c:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    155e:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1560:	07d2      	lsls	r2, r2, #31
    1562:	d500      	bpl.n	1566 <usart_init+0x26>
    1564:	e164      	b.n	1830 <usart_init+0x2f0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1566:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    1568:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    156a:	0792      	lsls	r2, r2, #30
    156c:	d500      	bpl.n	1570 <usart_init+0x30>
    156e:	e15f      	b.n	1830 <usart_init+0x2f0>
    1570:	49b4      	ldr	r1, [pc, #720]	; (1844 <usart_init+0x304>)
    1572:	6a0a      	ldr	r2, [r1, #32]
    1574:	1c87      	adds	r7, r0, #2
    1576:	3b1b      	subs	r3, #27
    1578:	40bb      	lsls	r3, r7
    157a:	4313      	orrs	r3, r2
    157c:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    157e:	a90f      	add	r1, sp, #60	; 0x3c
    1580:	272d      	movs	r7, #45	; 0x2d
    1582:	5df3      	ldrb	r3, [r6, r7]
    1584:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1586:	3014      	adds	r0, #20
    1588:	b2c3      	uxtb	r3, r0
    158a:	9302      	str	r3, [sp, #8]
    158c:	0018      	movs	r0, r3
    158e:	4bae      	ldr	r3, [pc, #696]	; (1848 <usart_init+0x308>)
    1590:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1592:	9802      	ldr	r0, [sp, #8]
    1594:	4bad      	ldr	r3, [pc, #692]	; (184c <usart_init+0x30c>)
    1596:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1598:	5df0      	ldrb	r0, [r6, r7]
    159a:	2100      	movs	r1, #0
    159c:	4bac      	ldr	r3, [pc, #688]	; (1850 <usart_init+0x310>)
    159e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    15a0:	7af3      	ldrb	r3, [r6, #11]
    15a2:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    15a4:	2324      	movs	r3, #36	; 0x24
    15a6:	5cf3      	ldrb	r3, [r6, r3]
    15a8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    15aa:	2325      	movs	r3, #37	; 0x25
    15ac:	5cf3      	ldrb	r3, [r6, r3]
    15ae:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    15b0:	7ef3      	ldrb	r3, [r6, #27]
    15b2:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    15b4:	7f33      	ldrb	r3, [r6, #28]
    15b6:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    15b8:	682b      	ldr	r3, [r5, #0]
    15ba:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    15bc:	0018      	movs	r0, r3
    15be:	4ba0      	ldr	r3, [pc, #640]	; (1840 <usart_init+0x300>)
    15c0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    15c2:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    15c4:	2200      	movs	r2, #0
    15c6:	230e      	movs	r3, #14
    15c8:	a906      	add	r1, sp, #24
    15ca:	468c      	mov	ip, r1
    15cc:	4463      	add	r3, ip
    15ce:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    15d0:	8a32      	ldrh	r2, [r6, #16]
    15d2:	9202      	str	r2, [sp, #8]
    15d4:	2380      	movs	r3, #128	; 0x80
    15d6:	01db      	lsls	r3, r3, #7
    15d8:	429a      	cmp	r2, r3
    15da:	d01a      	beq.n	1612 <usart_init+0xd2>
    15dc:	d804      	bhi.n	15e8 <usart_init+0xa8>
    15de:	2380      	movs	r3, #128	; 0x80
    15e0:	019b      	lsls	r3, r3, #6
    15e2:	429a      	cmp	r2, r3
    15e4:	d00b      	beq.n	15fe <usart_init+0xbe>
    15e6:	e104      	b.n	17f2 <usart_init+0x2b2>
    15e8:	23c0      	movs	r3, #192	; 0xc0
    15ea:	01db      	lsls	r3, r3, #7
    15ec:	9a02      	ldr	r2, [sp, #8]
    15ee:	429a      	cmp	r2, r3
    15f0:	d00a      	beq.n	1608 <usart_init+0xc8>
    15f2:	2380      	movs	r3, #128	; 0x80
    15f4:	021b      	lsls	r3, r3, #8
    15f6:	429a      	cmp	r2, r3
    15f8:	d100      	bne.n	15fc <usart_init+0xbc>
    15fa:	e0ff      	b.n	17fc <usart_init+0x2bc>
    15fc:	e0f9      	b.n	17f2 <usart_init+0x2b2>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    15fe:	2310      	movs	r3, #16
    1600:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1602:	3b0f      	subs	r3, #15
    1604:	9307      	str	r3, [sp, #28]
    1606:	e0fd      	b.n	1804 <usart_init+0x2c4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1608:	2308      	movs	r3, #8
    160a:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    160c:	3b07      	subs	r3, #7
    160e:	9307      	str	r3, [sp, #28]
    1610:	e0f8      	b.n	1804 <usart_init+0x2c4>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1612:	6833      	ldr	r3, [r6, #0]
    1614:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    1616:	68f3      	ldr	r3, [r6, #12]
    1618:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    161a:	6973      	ldr	r3, [r6, #20]
    161c:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    161e:	7e33      	ldrb	r3, [r6, #24]
    1620:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1622:	2326      	movs	r3, #38	; 0x26
    1624:	5cf3      	ldrb	r3, [r6, r3]
    1626:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1628:	6873      	ldr	r3, [r6, #4]
    162a:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    162c:	2b00      	cmp	r3, #0
    162e:	d015      	beq.n	165c <usart_init+0x11c>
    1630:	2380      	movs	r3, #128	; 0x80
    1632:	055b      	lsls	r3, r3, #21
    1634:	459a      	cmp	sl, r3
    1636:	d136      	bne.n	16a6 <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    1638:	2327      	movs	r3, #39	; 0x27
    163a:	5cf3      	ldrb	r3, [r6, r3]
    163c:	2b00      	cmp	r3, #0
    163e:	d136      	bne.n	16ae <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1640:	6a33      	ldr	r3, [r6, #32]
    1642:	001f      	movs	r7, r3
    1644:	b2c0      	uxtb	r0, r0
    1646:	4b83      	ldr	r3, [pc, #524]	; (1854 <usart_init+0x314>)
    1648:	4798      	blx	r3
    164a:	0001      	movs	r1, r0
    164c:	220e      	movs	r2, #14
    164e:	ab06      	add	r3, sp, #24
    1650:	469c      	mov	ip, r3
    1652:	4462      	add	r2, ip
    1654:	0038      	movs	r0, r7
    1656:	4b80      	ldr	r3, [pc, #512]	; (1858 <usart_init+0x318>)
    1658:	4798      	blx	r3
    165a:	e025      	b.n	16a8 <usart_init+0x168>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    165c:	2308      	movs	r3, #8
    165e:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1660:	2300      	movs	r3, #0
    1662:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    1664:	2327      	movs	r3, #39	; 0x27
    1666:	5cf3      	ldrb	r3, [r6, r3]
    1668:	2b00      	cmp	r3, #0
    166a:	d00b      	beq.n	1684 <usart_init+0x144>
				status_code =
    166c:	9b06      	ldr	r3, [sp, #24]
    166e:	9300      	str	r3, [sp, #0]
    1670:	9b07      	ldr	r3, [sp, #28]
    1672:	220e      	movs	r2, #14
    1674:	a906      	add	r1, sp, #24
    1676:	468c      	mov	ip, r1
    1678:	4462      	add	r2, ip
    167a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    167c:	6a30      	ldr	r0, [r6, #32]
    167e:	4f77      	ldr	r7, [pc, #476]	; (185c <usart_init+0x31c>)
    1680:	47b8      	blx	r7
    1682:	e011      	b.n	16a8 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1684:	6a33      	ldr	r3, [r6, #32]
    1686:	001f      	movs	r7, r3
    1688:	b2c0      	uxtb	r0, r0
    168a:	4b72      	ldr	r3, [pc, #456]	; (1854 <usart_init+0x314>)
    168c:	4798      	blx	r3
    168e:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    1690:	9b06      	ldr	r3, [sp, #24]
    1692:	9300      	str	r3, [sp, #0]
    1694:	9b07      	ldr	r3, [sp, #28]
    1696:	220e      	movs	r2, #14
    1698:	a806      	add	r0, sp, #24
    169a:	4684      	mov	ip, r0
    169c:	4462      	add	r2, ip
    169e:	0038      	movs	r0, r7
    16a0:	4f6e      	ldr	r7, [pc, #440]	; (185c <usart_init+0x31c>)
    16a2:	47b8      	blx	r7
    16a4:	e000      	b.n	16a8 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    16a6:	2000      	movs	r0, #0
    16a8:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    16aa:	d000      	beq.n	16ae <usart_init+0x16e>
    16ac:	e0c0      	b.n	1830 <usart_init+0x2f0>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    16ae:	7e73      	ldrb	r3, [r6, #25]
    16b0:	2b00      	cmp	r3, #0
    16b2:	d002      	beq.n	16ba <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    16b4:	7eb3      	ldrb	r3, [r6, #26]
    16b6:	464a      	mov	r2, r9
    16b8:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    16ba:	682a      	ldr	r2, [r5, #0]
    16bc:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    16be:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    16c0:	2b00      	cmp	r3, #0
    16c2:	d1fc      	bne.n	16be <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    16c4:	330e      	adds	r3, #14
    16c6:	aa06      	add	r2, sp, #24
    16c8:	4694      	mov	ip, r2
    16ca:	4463      	add	r3, ip
    16cc:	881b      	ldrh	r3, [r3, #0]
    16ce:	464a      	mov	r2, r9
    16d0:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    16d2:	9b04      	ldr	r3, [sp, #16]
    16d4:	465a      	mov	r2, fp
    16d6:	4313      	orrs	r3, r2
    16d8:	9a03      	ldr	r2, [sp, #12]
    16da:	4313      	orrs	r3, r2
    16dc:	4652      	mov	r2, sl
    16de:	4313      	orrs	r3, r2
    16e0:	433b      	orrs	r3, r7
    16e2:	4642      	mov	r2, r8
    16e4:	0212      	lsls	r2, r2, #8
    16e6:	4313      	orrs	r3, r2
    16e8:	9a05      	ldr	r2, [sp, #20]
    16ea:	0757      	lsls	r7, r2, #29
    16ec:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    16ee:	2327      	movs	r3, #39	; 0x27
    16f0:	5cf3      	ldrb	r3, [r6, r3]
    16f2:	2b00      	cmp	r3, #0
    16f4:	d101      	bne.n	16fa <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    16f6:	3304      	adds	r3, #4
    16f8:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    16fa:	7e71      	ldrb	r1, [r6, #25]
    16fc:	0289      	lsls	r1, r1, #10
    16fe:	7f33      	ldrb	r3, [r6, #28]
    1700:	025b      	lsls	r3, r3, #9
    1702:	4319      	orrs	r1, r3
    1704:	7f73      	ldrb	r3, [r6, #29]
    1706:	021b      	lsls	r3, r3, #8
    1708:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    170a:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    170c:	5cf3      	ldrb	r3, [r6, r3]
    170e:	045b      	lsls	r3, r3, #17
    1710:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1712:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    1714:	5cf2      	ldrb	r2, [r6, r3]
    1716:	0412      	lsls	r2, r2, #16
    1718:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    171a:	7af3      	ldrb	r3, [r6, #11]
    171c:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    171e:	8933      	ldrh	r3, [r6, #8]
    1720:	2bff      	cmp	r3, #255	; 0xff
    1722:	d004      	beq.n	172e <usart_init+0x1ee>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1724:	2280      	movs	r2, #128	; 0x80
    1726:	0452      	lsls	r2, r2, #17
    1728:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    172a:	4319      	orrs	r1, r3
    172c:	e005      	b.n	173a <usart_init+0x1fa>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    172e:	7ef3      	ldrb	r3, [r6, #27]
    1730:	2b00      	cmp	r3, #0
    1732:	d002      	beq.n	173a <usart_init+0x1fa>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1734:	2380      	movs	r3, #128	; 0x80
    1736:	04db      	lsls	r3, r3, #19
    1738:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    173a:	232c      	movs	r3, #44	; 0x2c
    173c:	5cf3      	ldrb	r3, [r6, r3]
    173e:	2b00      	cmp	r3, #0
    1740:	d103      	bne.n	174a <usart_init+0x20a>
    1742:	4b47      	ldr	r3, [pc, #284]	; (1860 <usart_init+0x320>)
    1744:	789b      	ldrb	r3, [r3, #2]
    1746:	079b      	lsls	r3, r3, #30
    1748:	d501      	bpl.n	174e <usart_init+0x20e>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    174a:	2380      	movs	r3, #128	; 0x80
    174c:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    174e:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1750:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1752:	2b00      	cmp	r3, #0
    1754:	d1fc      	bne.n	1750 <usart_init+0x210>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1756:	464b      	mov	r3, r9
    1758:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    175a:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    175c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    175e:	2b00      	cmp	r3, #0
    1760:	d1fc      	bne.n	175c <usart_init+0x21c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    1762:	464b      	mov	r3, r9
    1764:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1766:	ab0e      	add	r3, sp, #56	; 0x38
    1768:	2280      	movs	r2, #128	; 0x80
    176a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    176c:	2200      	movs	r2, #0
    176e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1770:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1772:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    1774:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1776:	930a      	str	r3, [sp, #40]	; 0x28
    1778:	6b73      	ldr	r3, [r6, #52]	; 0x34
    177a:	930b      	str	r3, [sp, #44]	; 0x2c
    177c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    177e:	930c      	str	r3, [sp, #48]	; 0x30
    1780:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1782:	9302      	str	r3, [sp, #8]
    1784:	930d      	str	r3, [sp, #52]	; 0x34
    1786:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1788:	ae0e      	add	r6, sp, #56	; 0x38
    178a:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    178c:	00bb      	lsls	r3, r7, #2
    178e:	aa0a      	add	r2, sp, #40	; 0x28
    1790:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    1792:	2800      	cmp	r0, #0
    1794:	d102      	bne.n	179c <usart_init+0x25c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1796:	0020      	movs	r0, r4
    1798:	4b32      	ldr	r3, [pc, #200]	; (1864 <usart_init+0x324>)
    179a:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    179c:	1c43      	adds	r3, r0, #1
    179e:	d005      	beq.n	17ac <usart_init+0x26c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    17a0:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    17a2:	0c00      	lsrs	r0, r0, #16
    17a4:	b2c0      	uxtb	r0, r0
    17a6:	0031      	movs	r1, r6
    17a8:	4b2f      	ldr	r3, [pc, #188]	; (1868 <usart_init+0x328>)
    17aa:	4798      	blx	r3
    17ac:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    17ae:	2f04      	cmp	r7, #4
    17b0:	d1eb      	bne.n	178a <usart_init+0x24a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    17b2:	2300      	movs	r3, #0
    17b4:	60eb      	str	r3, [r5, #12]
    17b6:	612b      	str	r3, [r5, #16]
    17b8:	616b      	str	r3, [r5, #20]
    17ba:	61ab      	str	r3, [r5, #24]
    17bc:	61eb      	str	r3, [r5, #28]
    17be:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    17c0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    17c2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    17c4:	2200      	movs	r2, #0
    17c6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    17c8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    17ca:	3330      	adds	r3, #48	; 0x30
    17cc:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    17ce:	3301      	adds	r3, #1
    17d0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    17d2:	3301      	adds	r3, #1
    17d4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    17d6:	3301      	adds	r3, #1
    17d8:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    17da:	6828      	ldr	r0, [r5, #0]
    17dc:	4b18      	ldr	r3, [pc, #96]	; (1840 <usart_init+0x300>)
    17de:	4798      	blx	r3
    17e0:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    17e2:	4922      	ldr	r1, [pc, #136]	; (186c <usart_init+0x32c>)
    17e4:	4b22      	ldr	r3, [pc, #136]	; (1870 <usart_init+0x330>)
    17e6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    17e8:	00a4      	lsls	r4, r4, #2
    17ea:	4b22      	ldr	r3, [pc, #136]	; (1874 <usart_init+0x334>)
    17ec:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    17ee:	2300      	movs	r3, #0
    17f0:	e01e      	b.n	1830 <usart_init+0x2f0>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    17f2:	2310      	movs	r3, #16
    17f4:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    17f6:	2300      	movs	r3, #0
    17f8:	9307      	str	r3, [sp, #28]
    17fa:	e003      	b.n	1804 <usart_init+0x2c4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    17fc:	2303      	movs	r3, #3
    17fe:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1800:	2300      	movs	r3, #0
    1802:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1804:	6833      	ldr	r3, [r6, #0]
    1806:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    1808:	68f3      	ldr	r3, [r6, #12]
    180a:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    180c:	6973      	ldr	r3, [r6, #20]
    180e:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1810:	7e33      	ldrb	r3, [r6, #24]
    1812:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1814:	2326      	movs	r3, #38	; 0x26
    1816:	5cf3      	ldrb	r3, [r6, r3]
    1818:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    181a:	6873      	ldr	r3, [r6, #4]
    181c:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    181e:	2b00      	cmp	r3, #0
    1820:	d100      	bne.n	1824 <usart_init+0x2e4>
    1822:	e71f      	b.n	1664 <usart_init+0x124>
    1824:	2380      	movs	r3, #128	; 0x80
    1826:	055b      	lsls	r3, r3, #21
    1828:	459a      	cmp	sl, r3
    182a:	d100      	bne.n	182e <usart_init+0x2ee>
    182c:	e704      	b.n	1638 <usart_init+0xf8>
    182e:	e73e      	b.n	16ae <usart_init+0x16e>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1830:	0018      	movs	r0, r3
    1832:	b011      	add	sp, #68	; 0x44
    1834:	bc3c      	pop	{r2, r3, r4, r5}
    1836:	4690      	mov	r8, r2
    1838:	4699      	mov	r9, r3
    183a:	46a2      	mov	sl, r4
    183c:	46ab      	mov	fp, r5
    183e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1840:	0000109d 	.word	0x0000109d
    1844:	40000400 	.word	0x40000400
    1848:	00002305 	.word	0x00002305
    184c:	00002279 	.word	0x00002279
    1850:	00000ec9 	.word	0x00000ec9
    1854:	00002321 	.word	0x00002321
    1858:	00000cd9 	.word	0x00000cd9
    185c:	00000d01 	.word	0x00000d01
    1860:	41002000 	.word	0x41002000
    1864:	00000f15 	.word	0x00000f15
    1868:	000023fd 	.word	0x000023fd
    186c:	000019f9 	.word	0x000019f9
    1870:	000010dd 	.word	0x000010dd
    1874:	200007c8 	.word	0x200007c8

00001878 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1878:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    187a:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    187c:	2a00      	cmp	r2, #0
    187e:	d00e      	beq.n	189e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1880:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1882:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1884:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1886:	2a00      	cmp	r2, #0
    1888:	d109      	bne.n	189e <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    188a:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    188c:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    188e:	2a00      	cmp	r2, #0
    1890:	d1fc      	bne.n	188c <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    1892:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1894:	2102      	movs	r1, #2
    1896:	7e1a      	ldrb	r2, [r3, #24]
    1898:	420a      	tst	r2, r1
    189a:	d0fc      	beq.n	1896 <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    189c:	2300      	movs	r3, #0
}
    189e:	0018      	movs	r0, r3
    18a0:	4770      	bx	lr
    18a2:	46c0      	nop			; (mov r8, r8)

000018a4 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    18a4:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    18a6:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    18a8:	2a00      	cmp	r2, #0
    18aa:	d030      	beq.n	190e <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    18ac:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    18ae:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    18b0:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    18b2:	2a00      	cmp	r2, #0
    18b4:	d12b      	bne.n	190e <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    18b6:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    18b8:	7e10      	ldrb	r0, [r2, #24]
    18ba:	0740      	lsls	r0, r0, #29
    18bc:	d527      	bpl.n	190e <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    18be:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    18c0:	2b00      	cmp	r3, #0
    18c2:	d1fc      	bne.n	18be <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    18c4:	8b53      	ldrh	r3, [r2, #26]
    18c6:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    18c8:	0698      	lsls	r0, r3, #26
    18ca:	d01d      	beq.n	1908 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    18cc:	0798      	lsls	r0, r3, #30
    18ce:	d503      	bpl.n	18d8 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    18d0:	2302      	movs	r3, #2
    18d2:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
    18d4:	3318      	adds	r3, #24
    18d6:	e01a      	b.n	190e <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    18d8:	0758      	lsls	r0, r3, #29
    18da:	d503      	bpl.n	18e4 <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    18dc:	2304      	movs	r3, #4
    18de:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
    18e0:	331a      	adds	r3, #26
    18e2:	e014      	b.n	190e <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    18e4:	07d8      	lsls	r0, r3, #31
    18e6:	d503      	bpl.n	18f0 <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    18e8:	2301      	movs	r3, #1
    18ea:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
    18ec:	3312      	adds	r3, #18
    18ee:	e00e      	b.n	190e <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    18f0:	06d8      	lsls	r0, r3, #27
    18f2:	d503      	bpl.n	18fc <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    18f4:	2310      	movs	r3, #16
    18f6:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
    18f8:	3332      	adds	r3, #50	; 0x32
    18fa:	e008      	b.n	190e <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    18fc:	069b      	lsls	r3, r3, #26
    18fe:	d503      	bpl.n	1908 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1900:	2320      	movs	r3, #32
    1902:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
    1904:	3321      	adds	r3, #33	; 0x21
    1906:	e002      	b.n	190e <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1908:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    190a:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    190c:	2300      	movs	r3, #0
}
    190e:	0018      	movs	r0, r3
    1910:	4770      	bx	lr
    1912:	46c0      	nop			; (mov r8, r8)

00001914 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1916:	0006      	movs	r6, r0
    1918:	000c      	movs	r4, r1
    191a:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    191c:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    191e:	4b0a      	ldr	r3, [pc, #40]	; (1948 <_usart_write_buffer+0x34>)
    1920:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    1922:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    1924:	b29b      	uxth	r3, r3
    1926:	2b00      	cmp	r3, #0
    1928:	d003      	beq.n	1932 <_usart_write_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    192a:	4b08      	ldr	r3, [pc, #32]	; (194c <_usart_write_buffer+0x38>)
    192c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    192e:	2005      	movs	r0, #5
    1930:	e009      	b.n	1946 <_usart_write_buffer+0x32>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    1932:	85f5      	strh	r5, [r6, #46]	; 0x2e
    1934:	4b05      	ldr	r3, [pc, #20]	; (194c <_usart_write_buffer+0x38>)
    1936:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->tx_buffer_ptr              = tx_data;
    1938:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    193a:	2205      	movs	r2, #5
    193c:	2333      	movs	r3, #51	; 0x33
    193e:	54f2      	strb	r2, [r6, r3]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    1940:	3b32      	subs	r3, #50	; 0x32
    1942:	75bb      	strb	r3, [r7, #22]

	return STATUS_OK;
    1944:	2000      	movs	r0, #0
}
    1946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1948:	000009d5 	.word	0x000009d5
    194c:	00000a15 	.word	0x00000a15

00001950 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1952:	0004      	movs	r4, r0
    1954:	000d      	movs	r5, r1
    1956:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1958:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    195a:	4b0f      	ldr	r3, [pc, #60]	; (1998 <_usart_read_buffer+0x48>)
    195c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    195e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1960:	b29b      	uxth	r3, r3
    1962:	2b00      	cmp	r3, #0
    1964:	d003      	beq.n	196e <_usart_read_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1966:	4b0d      	ldr	r3, [pc, #52]	; (199c <_usart_read_buffer+0x4c>)
    1968:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    196a:	2005      	movs	r0, #5
    196c:	e013      	b.n	1996 <_usart_read_buffer+0x46>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    196e:	85a6      	strh	r6, [r4, #44]	; 0x2c
    1970:	4b0a      	ldr	r3, [pc, #40]	; (199c <_usart_read_buffer+0x4c>)
    1972:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->rx_buffer_ptr              = rx_data;
    1974:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    1976:	2205      	movs	r2, #5
    1978:	2332      	movs	r3, #50	; 0x32
    197a:	54e2      	strb	r2, [r4, r3]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    197c:	3b2e      	subs	r3, #46	; 0x2e
    197e:	75bb      	strb	r3, [r7, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    1980:	7a23      	ldrb	r3, [r4, #8]
    1982:	2b00      	cmp	r3, #0
    1984:	d001      	beq.n	198a <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    1986:	2320      	movs	r3, #32
    1988:	75bb      	strb	r3, [r7, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    198a:	7a63      	ldrb	r3, [r4, #9]
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
    198c:	2000      	movs	r0, #0
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    198e:	2b00      	cmp	r3, #0
    1990:	d001      	beq.n	1996 <_usart_read_buffer+0x46>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    1992:	2308      	movs	r3, #8
    1994:	75bb      	strb	r3, [r7, #22]
	}
#endif

	return STATUS_OK;
}
    1996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1998:	000009d5 	.word	0x000009d5
    199c:	00000a15 	.word	0x00000a15

000019a0 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    19a0:	1c93      	adds	r3, r2, #2
    19a2:	009b      	lsls	r3, r3, #2
    19a4:	18c3      	adds	r3, r0, r3
    19a6:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    19a8:	2130      	movs	r1, #48	; 0x30
    19aa:	2301      	movs	r3, #1
    19ac:	4093      	lsls	r3, r2
    19ae:	5c42      	ldrb	r2, [r0, r1]
    19b0:	4313      	orrs	r3, r2
    19b2:	5443      	strb	r3, [r0, r1]
}
    19b4:	4770      	bx	lr
    19b6:	46c0      	nop			; (mov r8, r8)

000019b8 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    19b8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    19ba:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    19bc:	2a00      	cmp	r2, #0
    19be:	d006      	beq.n	19ce <usart_write_buffer_job+0x16>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    19c0:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    19c2:	3305      	adds	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    19c4:	2c00      	cmp	r4, #0
    19c6:	d002      	beq.n	19ce <usart_write_buffer_job+0x16>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    19c8:	4b02      	ldr	r3, [pc, #8]	; (19d4 <usart_write_buffer_job+0x1c>)
    19ca:	4798      	blx	r3
    19cc:	0003      	movs	r3, r0
}
    19ce:	0018      	movs	r0, r3
    19d0:	bd10      	pop	{r4, pc}
    19d2:	46c0      	nop			; (mov r8, r8)
    19d4:	00001915 	.word	0x00001915

000019d8 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    19d8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    19da:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    19dc:	2a00      	cmp	r2, #0
    19de:	d006      	beq.n	19ee <usart_read_buffer_job+0x16>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    19e0:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    19e2:	3305      	adds	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    19e4:	2c00      	cmp	r4, #0
    19e6:	d002      	beq.n	19ee <usart_read_buffer_job+0x16>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    19e8:	4b02      	ldr	r3, [pc, #8]	; (19f4 <usart_read_buffer_job+0x1c>)
    19ea:	4798      	blx	r3
    19ec:	0003      	movs	r3, r0
}
    19ee:	0018      	movs	r0, r3
    19f0:	bd10      	pop	{r4, pc}
    19f2:	46c0      	nop			; (mov r8, r8)
    19f4:	00001951 	.word	0x00001951

000019f8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    19f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    19fa:	0080      	lsls	r0, r0, #2
    19fc:	4b60      	ldr	r3, [pc, #384]	; (1b80 <_usart_interrupt_handler+0x188>)
    19fe:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1a00:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1a02:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1a04:	2b00      	cmp	r3, #0
    1a06:	d1fc      	bne.n	1a02 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1a08:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1a0a:	7da6      	ldrb	r6, [r4, #22]
    1a0c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1a0e:	2330      	movs	r3, #48	; 0x30
    1a10:	5ceb      	ldrb	r3, [r5, r3]
    1a12:	2231      	movs	r2, #49	; 0x31
    1a14:	5caf      	ldrb	r7, [r5, r2]
    1a16:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1a18:	07f3      	lsls	r3, r6, #31
    1a1a:	d522      	bpl.n	1a62 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1a1c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1a1e:	b29b      	uxth	r3, r3
    1a20:	2b00      	cmp	r3, #0
    1a22:	d01c      	beq.n	1a5e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1a24:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1a26:	7813      	ldrb	r3, [r2, #0]
    1a28:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1a2a:	1c51      	adds	r1, r2, #1
    1a2c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1a2e:	7969      	ldrb	r1, [r5, #5]
    1a30:	2901      	cmp	r1, #1
    1a32:	d001      	beq.n	1a38 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1a34:	b29b      	uxth	r3, r3
    1a36:	e004      	b.n	1a42 <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1a38:	7851      	ldrb	r1, [r2, #1]
    1a3a:	0209      	lsls	r1, r1, #8
    1a3c:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1a3e:	3202      	adds	r2, #2
    1a40:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1a42:	05db      	lsls	r3, r3, #23
    1a44:	0ddb      	lsrs	r3, r3, #23
    1a46:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1a48:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1a4a:	3b01      	subs	r3, #1
    1a4c:	b29b      	uxth	r3, r3
    1a4e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1a50:	2b00      	cmp	r3, #0
    1a52:	d106      	bne.n	1a62 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1a54:	3301      	adds	r3, #1
    1a56:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1a58:	3301      	adds	r3, #1
    1a5a:	75a3      	strb	r3, [r4, #22]
    1a5c:	e001      	b.n	1a62 <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1a5e:	2301      	movs	r3, #1
    1a60:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1a62:	07b3      	lsls	r3, r6, #30
    1a64:	d509      	bpl.n	1a7a <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1a66:	2302      	movs	r3, #2
    1a68:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1a6a:	2200      	movs	r2, #0
    1a6c:	3331      	adds	r3, #49	; 0x31
    1a6e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1a70:	07fb      	lsls	r3, r7, #31
    1a72:	d502      	bpl.n	1a7a <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1a74:	0028      	movs	r0, r5
    1a76:	68eb      	ldr	r3, [r5, #12]
    1a78:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1a7a:	0773      	lsls	r3, r6, #29
    1a7c:	d560      	bpl.n	1b40 <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
    1a7e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1a80:	b29b      	uxth	r3, r3
    1a82:	2b00      	cmp	r3, #0
    1a84:	d05a      	beq.n	1b3c <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1a86:	8b63      	ldrh	r3, [r4, #26]
    1a88:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1a8a:	071a      	lsls	r2, r3, #28
    1a8c:	d402      	bmi.n	1a94 <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1a8e:	223f      	movs	r2, #63	; 0x3f
    1a90:	4013      	ands	r3, r2
    1a92:	e001      	b.n	1a98 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1a94:	2237      	movs	r2, #55	; 0x37
    1a96:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1a98:	2b00      	cmp	r3, #0
    1a9a:	d02d      	beq.n	1af8 <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1a9c:	079a      	lsls	r2, r3, #30
    1a9e:	d505      	bpl.n	1aac <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1aa0:	221a      	movs	r2, #26
    1aa2:	2332      	movs	r3, #50	; 0x32
    1aa4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1aa6:	3b30      	subs	r3, #48	; 0x30
    1aa8:	8363      	strh	r3, [r4, #26]
    1aaa:	e01f      	b.n	1aec <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1aac:	075a      	lsls	r2, r3, #29
    1aae:	d505      	bpl.n	1abc <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1ab0:	221e      	movs	r2, #30
    1ab2:	2332      	movs	r3, #50	; 0x32
    1ab4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1ab6:	3b2e      	subs	r3, #46	; 0x2e
    1ab8:	8363      	strh	r3, [r4, #26]
    1aba:	e017      	b.n	1aec <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1abc:	07da      	lsls	r2, r3, #31
    1abe:	d505      	bpl.n	1acc <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1ac0:	2213      	movs	r2, #19
    1ac2:	2332      	movs	r3, #50	; 0x32
    1ac4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1ac6:	3b31      	subs	r3, #49	; 0x31
    1ac8:	8363      	strh	r3, [r4, #26]
    1aca:	e00f      	b.n	1aec <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1acc:	06da      	lsls	r2, r3, #27
    1ace:	d505      	bpl.n	1adc <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1ad0:	2242      	movs	r2, #66	; 0x42
    1ad2:	2332      	movs	r3, #50	; 0x32
    1ad4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1ad6:	3b22      	subs	r3, #34	; 0x22
    1ad8:	8363      	strh	r3, [r4, #26]
    1ada:	e007      	b.n	1aec <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1adc:	2220      	movs	r2, #32
    1ade:	421a      	tst	r2, r3
    1ae0:	d004      	beq.n	1aec <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1ae2:	3221      	adds	r2, #33	; 0x21
    1ae4:	2332      	movs	r3, #50	; 0x32
    1ae6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1ae8:	3b12      	subs	r3, #18
    1aea:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1aec:	077b      	lsls	r3, r7, #29
    1aee:	d527      	bpl.n	1b40 <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1af0:	0028      	movs	r0, r5
    1af2:	696b      	ldr	r3, [r5, #20]
    1af4:	4798      	blx	r3
    1af6:	e023      	b.n	1b40 <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1af8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1afa:	05db      	lsls	r3, r3, #23
    1afc:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1afe:	b2da      	uxtb	r2, r3
    1b00:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1b02:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1b04:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1b06:	1c51      	adds	r1, r2, #1
    1b08:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1b0a:	7969      	ldrb	r1, [r5, #5]
    1b0c:	2901      	cmp	r1, #1
    1b0e:	d104      	bne.n	1b1a <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1b10:	0a1b      	lsrs	r3, r3, #8
    1b12:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1b14:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1b16:	3301      	adds	r3, #1
    1b18:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1b1a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1b1c:	3b01      	subs	r3, #1
    1b1e:	b29b      	uxth	r3, r3
    1b20:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1b22:	2b00      	cmp	r3, #0
    1b24:	d10c      	bne.n	1b40 <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1b26:	3304      	adds	r3, #4
    1b28:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1b2a:	2200      	movs	r2, #0
    1b2c:	332e      	adds	r3, #46	; 0x2e
    1b2e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1b30:	07bb      	lsls	r3, r7, #30
    1b32:	d505      	bpl.n	1b40 <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1b34:	0028      	movs	r0, r5
    1b36:	692b      	ldr	r3, [r5, #16]
    1b38:	4798      	blx	r3
    1b3a:	e001      	b.n	1b40 <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1b3c:	2304      	movs	r3, #4
    1b3e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1b40:	06f3      	lsls	r3, r6, #27
    1b42:	d507      	bpl.n	1b54 <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1b44:	2310      	movs	r3, #16
    1b46:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1b48:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1b4a:	06fb      	lsls	r3, r7, #27
    1b4c:	d502      	bpl.n	1b54 <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1b4e:	0028      	movs	r0, r5
    1b50:	69eb      	ldr	r3, [r5, #28]
    1b52:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1b54:	06b3      	lsls	r3, r6, #26
    1b56:	d507      	bpl.n	1b68 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1b58:	2320      	movs	r3, #32
    1b5a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1b5c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1b5e:	073b      	lsls	r3, r7, #28
    1b60:	d502      	bpl.n	1b68 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1b62:	0028      	movs	r0, r5
    1b64:	69ab      	ldr	r3, [r5, #24]
    1b66:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1b68:	0733      	lsls	r3, r6, #28
    1b6a:	d507      	bpl.n	1b7c <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1b6c:	2308      	movs	r3, #8
    1b6e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1b70:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1b72:	06bb      	lsls	r3, r7, #26
    1b74:	d502      	bpl.n	1b7c <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1b76:	6a2b      	ldr	r3, [r5, #32]
    1b78:	0028      	movs	r0, r5
    1b7a:	4798      	blx	r3
		}
	}
#endif
}
    1b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b7e:	46c0      	nop			; (mov r8, r8)
    1b80:	200007c8 	.word	0x200007c8

00001b84 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1b84:	b510      	push	{r4, lr}
	switch (clock_source) {
    1b86:	2808      	cmp	r0, #8
    1b88:	d803      	bhi.n	1b92 <system_clock_source_get_hz+0xe>
    1b8a:	0080      	lsls	r0, r0, #2
    1b8c:	4b1b      	ldr	r3, [pc, #108]	; (1bfc <system_clock_source_get_hz+0x78>)
    1b8e:	581b      	ldr	r3, [r3, r0]
    1b90:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1b92:	2000      	movs	r0, #0
    1b94:	e030      	b.n	1bf8 <system_clock_source_get_hz+0x74>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1b96:	4b1a      	ldr	r3, [pc, #104]	; (1c00 <system_clock_source_get_hz+0x7c>)
    1b98:	6918      	ldr	r0, [r3, #16]
    1b9a:	e02d      	b.n	1bf8 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1b9c:	4b19      	ldr	r3, [pc, #100]	; (1c04 <system_clock_source_get_hz+0x80>)
    1b9e:	6a1b      	ldr	r3, [r3, #32]
    1ba0:	059b      	lsls	r3, r3, #22
    1ba2:	0f9b      	lsrs	r3, r3, #30
    1ba4:	4818      	ldr	r0, [pc, #96]	; (1c08 <system_clock_source_get_hz+0x84>)
    1ba6:	40d8      	lsrs	r0, r3
    1ba8:	e026      	b.n	1bf8 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1baa:	4b15      	ldr	r3, [pc, #84]	; (1c00 <system_clock_source_get_hz+0x7c>)
    1bac:	6958      	ldr	r0, [r3, #20]
    1bae:	e023      	b.n	1bf8 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1bb0:	4b13      	ldr	r3, [pc, #76]	; (1c00 <system_clock_source_get_hz+0x7c>)
    1bb2:	681b      	ldr	r3, [r3, #0]
    1bb4:	2002      	movs	r0, #2
    1bb6:	4018      	ands	r0, r3
    1bb8:	d01e      	beq.n	1bf8 <system_clock_source_get_hz+0x74>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1bba:	4912      	ldr	r1, [pc, #72]	; (1c04 <system_clock_source_get_hz+0x80>)
    1bbc:	2210      	movs	r2, #16
    1bbe:	68cb      	ldr	r3, [r1, #12]
    1bc0:	421a      	tst	r2, r3
    1bc2:	d0fc      	beq.n	1bbe <system_clock_source_get_hz+0x3a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1bc4:	4b0e      	ldr	r3, [pc, #56]	; (1c00 <system_clock_source_get_hz+0x7c>)
    1bc6:	681b      	ldr	r3, [r3, #0]
    1bc8:	075b      	lsls	r3, r3, #29
    1bca:	d514      	bpl.n	1bf6 <system_clock_source_get_hz+0x72>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1bcc:	2000      	movs	r0, #0
    1bce:	4b0f      	ldr	r3, [pc, #60]	; (1c0c <system_clock_source_get_hz+0x88>)
    1bd0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1bd2:	4b0b      	ldr	r3, [pc, #44]	; (1c00 <system_clock_source_get_hz+0x7c>)
    1bd4:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1bd6:	041b      	lsls	r3, r3, #16
    1bd8:	0c1b      	lsrs	r3, r3, #16
    1bda:	4358      	muls	r0, r3
    1bdc:	e00c      	b.n	1bf8 <system_clock_source_get_hz+0x74>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1bde:	2350      	movs	r3, #80	; 0x50
    1be0:	4a08      	ldr	r2, [pc, #32]	; (1c04 <system_clock_source_get_hz+0x80>)
    1be2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1be4:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1be6:	075b      	lsls	r3, r3, #29
    1be8:	d506      	bpl.n	1bf8 <system_clock_source_get_hz+0x74>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1bea:	4b05      	ldr	r3, [pc, #20]	; (1c00 <system_clock_source_get_hz+0x7c>)
    1bec:	68d8      	ldr	r0, [r3, #12]
    1bee:	e003      	b.n	1bf8 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1bf0:	2080      	movs	r0, #128	; 0x80
    1bf2:	0200      	lsls	r0, r0, #8
    1bf4:	e000      	b.n	1bf8 <system_clock_source_get_hz+0x74>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1bf6:	4806      	ldr	r0, [pc, #24]	; (1c10 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    1bf8:	bd10      	pop	{r4, pc}
    1bfa:	46c0      	nop			; (mov r8, r8)
    1bfc:	00008b40 	.word	0x00008b40
    1c00:	200000f0 	.word	0x200000f0
    1c04:	40000800 	.word	0x40000800
    1c08:	007a1200 	.word	0x007a1200
    1c0c:	00002321 	.word	0x00002321
    1c10:	02dc6c00 	.word	0x02dc6c00

00001c14 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1c14:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1c16:	4c0c      	ldr	r4, [pc, #48]	; (1c48 <system_clock_source_osc8m_set_config+0x34>)
    1c18:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1c1a:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1c1c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1c1e:	7842      	ldrb	r2, [r0, #1]
    1c20:	2001      	movs	r0, #1
    1c22:	4002      	ands	r2, r0
    1c24:	0192      	lsls	r2, r2, #6
    1c26:	2640      	movs	r6, #64	; 0x40
    1c28:	43b3      	bics	r3, r6
    1c2a:	4313      	orrs	r3, r2
    1c2c:	0002      	movs	r2, r0
    1c2e:	402a      	ands	r2, r5
    1c30:	01d2      	lsls	r2, r2, #7
    1c32:	307f      	adds	r0, #127	; 0x7f
    1c34:	4383      	bics	r3, r0
    1c36:	4313      	orrs	r3, r2
    1c38:	2203      	movs	r2, #3
    1c3a:	400a      	ands	r2, r1
    1c3c:	0212      	lsls	r2, r2, #8
    1c3e:	4903      	ldr	r1, [pc, #12]	; (1c4c <system_clock_source_osc8m_set_config+0x38>)
    1c40:	400b      	ands	r3, r1
    1c42:	4313      	orrs	r3, r2
    1c44:	6223      	str	r3, [r4, #32]
}
    1c46:	bd70      	pop	{r4, r5, r6, pc}
    1c48:	40000800 	.word	0x40000800
    1c4c:	fffffcff 	.word	0xfffffcff

00001c50 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1c50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c52:	4657      	mov	r7, sl
    1c54:	464e      	mov	r6, r9
    1c56:	4645      	mov	r5, r8
    1c58:	b4e0      	push	{r5, r6, r7}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1c5a:	4e1c      	ldr	r6, [pc, #112]	; (1ccc <system_clock_source_osc32k_set_config+0x7c>)
    1c5c:	69b3      	ldr	r3, [r6, #24]
    1c5e:	469c      	mov	ip, r3

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    1c60:	7841      	ldrb	r1, [r0, #1]
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1c62:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1c64:	7907      	ldrb	r7, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1c66:	78c3      	ldrb	r3, [r0, #3]
    1c68:	4699      	mov	r9, r3
	temp.bit.WRTLOCK  = config->write_once;
    1c6a:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    1c6c:	7883      	ldrb	r3, [r0, #2]
    1c6e:	2001      	movs	r0, #1
    1c70:	4003      	ands	r3, r0
    1c72:	009b      	lsls	r3, r3, #2
    1c74:	469a      	mov	sl, r3
    1c76:	2204      	movs	r2, #4
    1c78:	4690      	mov	r8, r2
    1c7a:	4662      	mov	r2, ip
    1c7c:	4643      	mov	r3, r8
    1c7e:	439a      	bics	r2, r3
    1c80:	0013      	movs	r3, r2
    1c82:	4652      	mov	r2, sl
    1c84:	431a      	orrs	r2, r3
    1c86:	0013      	movs	r3, r2
    1c88:	4001      	ands	r1, r0
    1c8a:	00c9      	lsls	r1, r1, #3
    1c8c:	2208      	movs	r2, #8
    1c8e:	4393      	bics	r3, r2
    1c90:	430b      	orrs	r3, r1
    1c92:	464a      	mov	r2, r9
    1c94:	4002      	ands	r2, r0
    1c96:	0192      	lsls	r2, r2, #6
    1c98:	2140      	movs	r1, #64	; 0x40
    1c9a:	438b      	bics	r3, r1
    1c9c:	4313      	orrs	r3, r2
    1c9e:	4007      	ands	r7, r0
    1ca0:	01ff      	lsls	r7, r7, #7
    1ca2:	2280      	movs	r2, #128	; 0x80
    1ca4:	4393      	bics	r3, r2
    1ca6:	433b      	orrs	r3, r7
    1ca8:	3a79      	subs	r2, #121	; 0x79
    1caa:	4015      	ands	r5, r2
    1cac:	022d      	lsls	r5, r5, #8
    1cae:	4f08      	ldr	r7, [pc, #32]	; (1cd0 <system_clock_source_osc32k_set_config+0x80>)
    1cb0:	403b      	ands	r3, r7
    1cb2:	432b      	orrs	r3, r5
    1cb4:	4004      	ands	r4, r0
    1cb6:	0320      	lsls	r0, r4, #12
    1cb8:	4c06      	ldr	r4, [pc, #24]	; (1cd4 <system_clock_source_osc32k_set_config+0x84>)
    1cba:	401c      	ands	r4, r3
    1cbc:	4304      	orrs	r4, r0
    1cbe:	61b4      	str	r4, [r6, #24]
}
    1cc0:	bc1c      	pop	{r2, r3, r4}
    1cc2:	4690      	mov	r8, r2
    1cc4:	4699      	mov	r9, r3
    1cc6:	46a2      	mov	sl, r4
    1cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cca:	46c0      	nop			; (mov r8, r8)
    1ccc:	40000800 	.word	0x40000800
    1cd0:	fffff8ff 	.word	0xfffff8ff
    1cd4:	ffffefff 	.word	0xffffefff

00001cd8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cda:	465f      	mov	r7, fp
    1cdc:	4656      	mov	r6, sl
    1cde:	464d      	mov	r5, r9
    1ce0:	4644      	mov	r4, r8
    1ce2:	b4f0      	push	{r4, r5, r6, r7}
    1ce4:	b083      	sub	sp, #12
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1ce6:	4e2e      	ldr	r6, [pc, #184]	; (1da0 <system_clock_source_xosc32k_set_config+0xc8>)
    1ce8:	8ab3      	ldrh	r3, [r6, #20]
    1cea:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    1cec:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1cee:	7803      	ldrb	r3, [r0, #0]
    1cf0:	425a      	negs	r2, r3
    1cf2:	415a      	adcs	r2, r3
    1cf4:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1cf6:	7883      	ldrb	r3, [r0, #2]
    1cf8:	469b      	mov	fp, r3
	temp.bit.EN1K = config->enable_1khz_output;
    1cfa:	78c3      	ldrb	r3, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    1cfc:	7902      	ldrb	r2, [r0, #4]
    1cfe:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1d00:	7b47      	ldrb	r7, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1d02:	7b02      	ldrb	r2, [r0, #12]
    1d04:	9201      	str	r2, [sp, #4]
	temp.bit.WRTLOCK  = config->write_once;
    1d06:	7b84      	ldrb	r4, [r0, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1d08:	6882      	ldr	r2, [r0, #8]
    1d0a:	4826      	ldr	r0, [pc, #152]	; (1da4 <system_clock_source_xosc32k_set_config+0xcc>)
    1d0c:	6142      	str	r2, [r0, #20]

	SYSCTRL->XOSC32K = temp;
    1d0e:	2001      	movs	r0, #1
    1d10:	464a      	mov	r2, r9
    1d12:	0092      	lsls	r2, r2, #2
    1d14:	4691      	mov	r9, r2
    1d16:	2204      	movs	r2, #4
    1d18:	4692      	mov	sl, r2
    1d1a:	4662      	mov	r2, ip
    1d1c:	4651      	mov	r1, sl
    1d1e:	438a      	bics	r2, r1
    1d20:	4694      	mov	ip, r2
    1d22:	464a      	mov	r2, r9
    1d24:	4661      	mov	r1, ip
    1d26:	430a      	orrs	r2, r1
    1d28:	4694      	mov	ip, r2
    1d2a:	4642      	mov	r2, r8
    1d2c:	4002      	ands	r2, r0
    1d2e:	00d2      	lsls	r2, r2, #3
    1d30:	4690      	mov	r8, r2
    1d32:	2208      	movs	r2, #8
    1d34:	4691      	mov	r9, r2
    1d36:	4662      	mov	r2, ip
    1d38:	4649      	mov	r1, r9
    1d3a:	438a      	bics	r2, r1
    1d3c:	4694      	mov	ip, r2
    1d3e:	4642      	mov	r2, r8
    1d40:	4661      	mov	r1, ip
    1d42:	430a      	orrs	r2, r1
    1d44:	4694      	mov	ip, r2
    1d46:	4003      	ands	r3, r0
    1d48:	011b      	lsls	r3, r3, #4
    1d4a:	2210      	movs	r2, #16
    1d4c:	4690      	mov	r8, r2
    1d4e:	4662      	mov	r2, ip
    1d50:	4641      	mov	r1, r8
    1d52:	438a      	bics	r2, r1
    1d54:	4313      	orrs	r3, r2
    1d56:	4659      	mov	r1, fp
    1d58:	4001      	ands	r1, r0
    1d5a:	0149      	lsls	r1, r1, #5
    1d5c:	2220      	movs	r2, #32
    1d5e:	4393      	bics	r3, r2
    1d60:	430b      	orrs	r3, r1
    1d62:	9a01      	ldr	r2, [sp, #4]
    1d64:	4002      	ands	r2, r0
    1d66:	0192      	lsls	r2, r2, #6
    1d68:	2140      	movs	r1, #64	; 0x40
    1d6a:	438b      	bics	r3, r1
    1d6c:	4313      	orrs	r3, r2
    1d6e:	4007      	ands	r7, r0
    1d70:	01ff      	lsls	r7, r7, #7
    1d72:	2280      	movs	r2, #128	; 0x80
    1d74:	4393      	bics	r3, r2
    1d76:	433b      	orrs	r3, r7
    1d78:	3a79      	subs	r2, #121	; 0x79
    1d7a:	4015      	ands	r5, r2
    1d7c:	022d      	lsls	r5, r5, #8
    1d7e:	4f0a      	ldr	r7, [pc, #40]	; (1da8 <system_clock_source_xosc32k_set_config+0xd0>)
    1d80:	403b      	ands	r3, r7
    1d82:	432b      	orrs	r3, r5
    1d84:	4004      	ands	r4, r0
    1d86:	0320      	lsls	r0, r4, #12
    1d88:	4c08      	ldr	r4, [pc, #32]	; (1dac <system_clock_source_xosc32k_set_config+0xd4>)
    1d8a:	401c      	ands	r4, r3
    1d8c:	4304      	orrs	r4, r0
    1d8e:	82b4      	strh	r4, [r6, #20]
}
    1d90:	b003      	add	sp, #12
    1d92:	bc3c      	pop	{r2, r3, r4, r5}
    1d94:	4690      	mov	r8, r2
    1d96:	4699      	mov	r9, r3
    1d98:	46a2      	mov	sl, r4
    1d9a:	46ab      	mov	fp, r5
    1d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d9e:	46c0      	nop			; (mov r8, r8)
    1da0:	40000800 	.word	0x40000800
    1da4:	200000f0 	.word	0x200000f0
    1da8:	fffff8ff 	.word	0xfffff8ff
    1dac:	ffffefff 	.word	0xffffefff

00001db0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1db0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1db2:	7a03      	ldrb	r3, [r0, #8]
    1db4:	069b      	lsls	r3, r3, #26
    1db6:	0c1a      	lsrs	r2, r3, #16
    1db8:	8943      	ldrh	r3, [r0, #10]
    1dba:	059b      	lsls	r3, r3, #22
    1dbc:	0d9b      	lsrs	r3, r3, #22
    1dbe:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    1dc0:	4c19      	ldr	r4, [pc, #100]	; (1e28 <system_clock_source_dfll_set_config+0x78>)
    1dc2:	6063      	str	r3, [r4, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    1dc4:	7981      	ldrb	r1, [r0, #6]
    1dc6:	79c3      	ldrb	r3, [r0, #7]
    1dc8:	4319      	orrs	r1, r3
    1dca:	8843      	ldrh	r3, [r0, #2]
    1dcc:	8882      	ldrh	r2, [r0, #4]
    1dce:	4313      	orrs	r3, r2
    1dd0:	430b      	orrs	r3, r1
    1dd2:	7842      	ldrb	r2, [r0, #1]
    1dd4:	01d2      	lsls	r2, r2, #7
    1dd6:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    1dd8:	6023      	str	r3, [r4, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1dda:	7803      	ldrb	r3, [r0, #0]
    1ddc:	2b04      	cmp	r3, #4
    1dde:	d10f      	bne.n	1e00 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1de0:	7b03      	ldrb	r3, [r0, #12]
    1de2:	069b      	lsls	r3, r3, #26
    1de4:	8a02      	ldrh	r2, [r0, #16]
    1de6:	4313      	orrs	r3, r2
    1de8:	0019      	movs	r1, r3
    1dea:	89c3      	ldrh	r3, [r0, #14]
    1dec:	041b      	lsls	r3, r3, #16
    1dee:	4a0f      	ldr	r2, [pc, #60]	; (1e2c <system_clock_source_dfll_set_config+0x7c>)
    1df0:	4013      	ands	r3, r2
    1df2:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    1df4:	60a3      	str	r3, [r4, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    1df6:	6821      	ldr	r1, [r4, #0]
    1df8:	2304      	movs	r3, #4
    1dfa:	430b      	orrs	r3, r1
    1dfc:	6023      	str	r3, [r4, #0]
    1dfe:	e011      	b.n	1e24 <system_clock_source_dfll_set_config+0x74>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1e00:	2b20      	cmp	r3, #32
    1e02:	d10f      	bne.n	1e24 <system_clock_source_dfll_set_config+0x74>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1e04:	7b03      	ldrb	r3, [r0, #12]
    1e06:	069b      	lsls	r3, r3, #26
    1e08:	8a02      	ldrh	r2, [r0, #16]
    1e0a:	4313      	orrs	r3, r2
    1e0c:	0019      	movs	r1, r3
    1e0e:	89c3      	ldrh	r3, [r0, #14]
    1e10:	041b      	lsls	r3, r3, #16
    1e12:	4a06      	ldr	r2, [pc, #24]	; (1e2c <system_clock_source_dfll_set_config+0x7c>)
    1e14:	4013      	ands	r3, r2
    1e16:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    1e18:	4a03      	ldr	r2, [pc, #12]	; (1e28 <system_clock_source_dfll_set_config+0x78>)
    1e1a:	6093      	str	r3, [r2, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1e1c:	6813      	ldr	r3, [r2, #0]
    1e1e:	4904      	ldr	r1, [pc, #16]	; (1e30 <system_clock_source_dfll_set_config+0x80>)
    1e20:	430b      	orrs	r3, r1
    1e22:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1e24:	bd10      	pop	{r4, pc}
    1e26:	46c0      	nop			; (mov r8, r8)
    1e28:	200000f0 	.word	0x200000f0
    1e2c:	03ff0000 	.word	0x03ff0000
    1e30:	00000424 	.word	0x00000424

00001e34 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1e34:	2808      	cmp	r0, #8
    1e36:	d803      	bhi.n	1e40 <system_clock_source_enable+0xc>
    1e38:	0080      	lsls	r0, r0, #2
    1e3a:	4b25      	ldr	r3, [pc, #148]	; (1ed0 <system_clock_source_enable+0x9c>)
    1e3c:	581b      	ldr	r3, [r3, r0]
    1e3e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1e40:	2017      	movs	r0, #23
    1e42:	e044      	b.n	1ece <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1e44:	4a23      	ldr	r2, [pc, #140]	; (1ed4 <system_clock_source_enable+0xa0>)
    1e46:	6a11      	ldr	r1, [r2, #32]
    1e48:	2302      	movs	r3, #2
    1e4a:	430b      	orrs	r3, r1
    1e4c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1e4e:	2000      	movs	r0, #0
    1e50:	e03d      	b.n	1ece <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1e52:	4a20      	ldr	r2, [pc, #128]	; (1ed4 <system_clock_source_enable+0xa0>)
    1e54:	6991      	ldr	r1, [r2, #24]
    1e56:	2302      	movs	r3, #2
    1e58:	430b      	orrs	r3, r1
    1e5a:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1e5c:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1e5e:	e036      	b.n	1ece <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1e60:	4a1c      	ldr	r2, [pc, #112]	; (1ed4 <system_clock_source_enable+0xa0>)
    1e62:	8a11      	ldrh	r1, [r2, #16]
    1e64:	2302      	movs	r3, #2
    1e66:	430b      	orrs	r3, r1
    1e68:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1e6a:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1e6c:	e02f      	b.n	1ece <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1e6e:	4a19      	ldr	r2, [pc, #100]	; (1ed4 <system_clock_source_enable+0xa0>)
    1e70:	8a91      	ldrh	r1, [r2, #20]
    1e72:	2302      	movs	r3, #2
    1e74:	430b      	orrs	r3, r1
    1e76:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1e78:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    1e7a:	e028      	b.n	1ece <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1e7c:	4916      	ldr	r1, [pc, #88]	; (1ed8 <system_clock_source_enable+0xa4>)
    1e7e:	680b      	ldr	r3, [r1, #0]
    1e80:	2202      	movs	r2, #2
    1e82:	4313      	orrs	r3, r2
    1e84:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1e86:	4b13      	ldr	r3, [pc, #76]	; (1ed4 <system_clock_source_enable+0xa0>)
    1e88:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1e8a:	0019      	movs	r1, r3
    1e8c:	320e      	adds	r2, #14
    1e8e:	68cb      	ldr	r3, [r1, #12]
    1e90:	421a      	tst	r2, r3
    1e92:	d0fc      	beq.n	1e8e <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1e94:	4a10      	ldr	r2, [pc, #64]	; (1ed8 <system_clock_source_enable+0xa4>)
    1e96:	6891      	ldr	r1, [r2, #8]
    1e98:	4b0e      	ldr	r3, [pc, #56]	; (1ed4 <system_clock_source_enable+0xa0>)
    1e9a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1e9c:	6852      	ldr	r2, [r2, #4]
    1e9e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1ea0:	2200      	movs	r2, #0
    1ea2:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1ea4:	0019      	movs	r1, r3
    1ea6:	3210      	adds	r2, #16
    1ea8:	68cb      	ldr	r3, [r1, #12]
    1eaa:	421a      	tst	r2, r3
    1eac:	d0fc      	beq.n	1ea8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1eae:	4b0a      	ldr	r3, [pc, #40]	; (1ed8 <system_clock_source_enable+0xa4>)
    1eb0:	681b      	ldr	r3, [r3, #0]
    1eb2:	b29b      	uxth	r3, r3
    1eb4:	4a07      	ldr	r2, [pc, #28]	; (1ed4 <system_clock_source_enable+0xa0>)
    1eb6:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1eb8:	2000      	movs	r0, #0
    1eba:	e008      	b.n	1ece <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1ebc:	4905      	ldr	r1, [pc, #20]	; (1ed4 <system_clock_source_enable+0xa0>)
    1ebe:	2244      	movs	r2, #68	; 0x44
    1ec0:	5c88      	ldrb	r0, [r1, r2]
    1ec2:	2302      	movs	r3, #2
    1ec4:	4303      	orrs	r3, r0
    1ec6:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1ec8:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1eca:	e000      	b.n	1ece <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1ecc:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1ece:	4770      	bx	lr
    1ed0:	00008b64 	.word	0x00008b64
    1ed4:	40000800 	.word	0x40000800
    1ed8:	200000f0 	.word	0x200000f0

00001edc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ede:	4657      	mov	r7, sl
    1ee0:	464e      	mov	r6, r9
    1ee2:	4645      	mov	r5, r8
    1ee4:	b4e0      	push	{r5, r6, r7}
    1ee6:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1ee8:	22c2      	movs	r2, #194	; 0xc2
    1eea:	00d2      	lsls	r2, r2, #3
    1eec:	4b68      	ldr	r3, [pc, #416]	; (2090 <STACK_SIZE+0x90>)
    1eee:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1ef0:	4968      	ldr	r1, [pc, #416]	; (2094 <STACK_SIZE+0x94>)
    1ef2:	684b      	ldr	r3, [r1, #4]
    1ef4:	221e      	movs	r2, #30
    1ef6:	4393      	bics	r3, r2
    1ef8:	3a1a      	subs	r2, #26
    1efa:	4313      	orrs	r3, r2
    1efc:	604b      	str	r3, [r1, #4]
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
#elif CONF_CLOCK_GCLK_4_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_4;
#elif CONF_CLOCK_GCLK_5_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_5;
    1efe:	3201      	adds	r2, #1
    1f00:	ab01      	add	r3, sp, #4
    1f02:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1f04:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1f06:	4d64      	ldr	r5, [pc, #400]	; (2098 <STACK_SIZE+0x98>)
    1f08:	b2e0      	uxtb	r0, r4
    1f0a:	a901      	add	r1, sp, #4
    1f0c:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1f0e:	3401      	adds	r4, #1
    1f10:	2c25      	cmp	r4, #37	; 0x25
    1f12:	d1f9      	bne.n	1f08 <system_clock_init+0x2c>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1f14:	a80c      	add	r0, sp, #48	; 0x30
    1f16:	2300      	movs	r3, #0
    1f18:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
	config->frequency           = 32768UL;
    1f1a:	2280      	movs	r2, #128	; 0x80
    1f1c:	0212      	lsls	r2, r2, #8
    1f1e:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1f20:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1f22:	2201      	movs	r2, #1
    1f24:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1f26:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    1f28:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1f2a:	2106      	movs	r1, #6
    1f2c:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    1f2e:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1f30:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1f32:	4b5a      	ldr	r3, [pc, #360]	; (209c <STACK_SIZE+0x9c>)
    1f34:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1f36:	2005      	movs	r0, #5
    1f38:	4b59      	ldr	r3, [pc, #356]	; (20a0 <STACK_SIZE+0xa0>)
    1f3a:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1f3c:	4954      	ldr	r1, [pc, #336]	; (2090 <STACK_SIZE+0x90>)
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1f3e:	2202      	movs	r2, #2

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1f40:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1f42:	421a      	tst	r2, r3
    1f44:	d0fc      	beq.n	1f40 <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1f46:	4952      	ldr	r1, [pc, #328]	; (2090 <STACK_SIZE+0x90>)
    1f48:	8a8a      	ldrh	r2, [r1, #20]
    1f4a:	2380      	movs	r3, #128	; 0x80
    1f4c:	4313      	orrs	r3, r2
    1f4e:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    1f50:	4c54      	ldr	r4, [pc, #336]	; (20a4 <STACK_SIZE+0xa4>)
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    1f52:	6823      	ldr	r3, [r4, #0]
    1f54:	04da      	lsls	r2, r3, #19
    1f56:	6988      	ldr	r0, [r1, #24]
    1f58:	0e52      	lsrs	r2, r2, #25
    1f5a:	0412      	lsls	r2, r2, #16
    1f5c:	4b52      	ldr	r3, [pc, #328]	; (20a8 <STACK_SIZE+0xa8>)
    1f5e:	4003      	ands	r3, r0
    1f60:	4313      	orrs	r3, r2
    1f62:	618b      	str	r3, [r1, #24]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    1f64:	a80a      	add	r0, sp, #40	; 0x28
    1f66:	2301      	movs	r3, #1
    1f68:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    1f6a:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
	config->on_demand           = true;
    1f6c:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1f6e:	2207      	movs	r2, #7
    1f70:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    1f72:	2500      	movs	r5, #0
    1f74:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1f76:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1f78:	4b4c      	ldr	r3, [pc, #304]	; (20ac <STACK_SIZE+0xac>)
    1f7a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1f7c:	2004      	movs	r0, #4
    1f7e:	4b48      	ldr	r3, [pc, #288]	; (20a0 <STACK_SIZE+0xa0>)
    1f80:	4798      	blx	r3
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1f82:	ab05      	add	r3, sp, #20
    1f84:	2200      	movs	r2, #0
    1f86:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1f88:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1f8a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1f8c:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
	config->fine_value      = 0xff / 4; /* Midpoint */
    1f8e:	213f      	movs	r1, #63	; 0x3f
    1f90:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1f92:	393b      	subs	r1, #59	; 0x3b
    1f94:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1f96:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1f98:	6823      	ldr	r3, [r4, #0]
    1f9a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1f9c:	2b3f      	cmp	r3, #63	; 0x3f
    1f9e:	d100      	bne.n	1fa2 <system_clock_init+0xc6>
		coarse = 0x1f;
    1fa0:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
    1fa2:	a805      	add	r0, sp, #20
    1fa4:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1fa6:	23b7      	movs	r3, #183	; 0xb7
    1fa8:	00db      	lsls	r3, r3, #3
    1faa:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1fac:	2307      	movs	r3, #7
    1fae:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1fb0:	3338      	adds	r3, #56	; 0x38
    1fb2:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1fb4:	4b3e      	ldr	r3, [pc, #248]	; (20b0 <STACK_SIZE+0xb0>)
    1fb6:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1fb8:	a804      	add	r0, sp, #16
    1fba:	2500      	movs	r5, #0
    1fbc:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1fbe:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1fc0:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1fc2:	4b3c      	ldr	r3, [pc, #240]	; (20b4 <STACK_SIZE+0xb4>)
    1fc4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1fc6:	2006      	movs	r0, #6
    1fc8:	4b35      	ldr	r3, [pc, #212]	; (20a0 <STACK_SIZE+0xa0>)
    1fca:	4699      	mov	r9, r3
    1fcc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1fce:	4b3a      	ldr	r3, [pc, #232]	; (20b8 <STACK_SIZE+0xb8>)
    1fd0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1fd2:	ac01      	add	r4, sp, #4
    1fd4:	2601      	movs	r6, #1
    1fd6:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1fd8:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1fda:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1fdc:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1fde:	2305      	movs	r3, #5
    1fe0:	7023      	strb	r3, [r4, #0]
    1fe2:	0021      	movs	r1, r4
    1fe4:	2001      	movs	r0, #1
    1fe6:	4b35      	ldr	r3, [pc, #212]	; (20bc <STACK_SIZE+0xbc>)
    1fe8:	4698      	mov	r8, r3
    1fea:	4798      	blx	r3
    1fec:	2001      	movs	r0, #1
    1fee:	4f34      	ldr	r7, [pc, #208]	; (20c0 <STACK_SIZE+0xc0>)
    1ff0:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    1ff2:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    1ff4:	7265      	strb	r5, [r4, #9]
    1ff6:	2304      	movs	r3, #4
    1ff8:	7023      	strb	r3, [r4, #0]
    1ffa:	331c      	adds	r3, #28
    1ffc:	469a      	mov	sl, r3
    1ffe:	6063      	str	r3, [r4, #4]
    2000:	7226      	strb	r6, [r4, #8]
    2002:	0021      	movs	r1, r4
    2004:	2002      	movs	r0, #2
    2006:	47c0      	blx	r8
    2008:	2002      	movs	r0, #2
    200a:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    200c:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    200e:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2010:	2306      	movs	r3, #6
    2012:	7023      	strb	r3, [r4, #0]
#endif
	config->run_in_standby     = false;
    2014:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2016:	7265      	strb	r5, [r4, #9]
    2018:	0021      	movs	r1, r4
    201a:	2003      	movs	r0, #3
    201c:	47c0      	blx	r8
    201e:	2003      	movs	r0, #3
    2020:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    2022:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2024:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2026:	7265      	strb	r5, [r4, #9]
    2028:	2303      	movs	r3, #3
    202a:	7023      	strb	r3, [r4, #0]
    202c:	4653      	mov	r3, sl
    202e:	6063      	str	r3, [r4, #4]
    2030:	0021      	movs	r1, r4
    2032:	2004      	movs	r0, #4
    2034:	47c0      	blx	r8
    2036:	2004      	movs	r0, #4
    2038:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    203a:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    203c:	0021      	movs	r1, r4
    203e:	2000      	movs	r0, #0
    2040:	4b15      	ldr	r3, [pc, #84]	; (2098 <STACK_SIZE+0x98>)
    2042:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    2044:	2000      	movs	r0, #0
    2046:	4b1f      	ldr	r3, [pc, #124]	; (20c4 <STACK_SIZE+0xc4>)
    2048:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    204a:	2007      	movs	r0, #7
    204c:	47c8      	blx	r9

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    204e:	4910      	ldr	r1, [pc, #64]	; (2090 <STACK_SIZE+0x90>)


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2050:	22d0      	movs	r2, #208	; 0xd0

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2052:	68cb      	ldr	r3, [r1, #12]


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2054:	4013      	ands	r3, r2
    2056:	2bd0      	cmp	r3, #208	; 0xd0
    2058:	d1fb      	bne.n	2052 <STACK_SIZE+0x52>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    205a:	4a1b      	ldr	r2, [pc, #108]	; (20c8 <STACK_SIZE+0xc8>)
    205c:	2300      	movs	r3, #0
    205e:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    2060:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    2062:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    2064:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2066:	a901      	add	r1, sp, #4
    2068:	2201      	movs	r2, #1
    206a:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    206c:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    206e:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2070:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2072:	3307      	adds	r3, #7
    2074:	700b      	strb	r3, [r1, #0]
    2076:	2000      	movs	r0, #0
    2078:	4b10      	ldr	r3, [pc, #64]	; (20bc <STACK_SIZE+0xbc>)
    207a:	4798      	blx	r3
    207c:	2000      	movs	r0, #0
    207e:	4b10      	ldr	r3, [pc, #64]	; (20c0 <STACK_SIZE+0xc0>)
    2080:	4798      	blx	r3
#endif
}
    2082:	b010      	add	sp, #64	; 0x40
    2084:	bc1c      	pop	{r2, r3, r4}
    2086:	4690      	mov	r8, r2
    2088:	4699      	mov	r9, r3
    208a:	46a2      	mov	sl, r4
    208c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    208e:	46c0      	nop			; (mov r8, r8)
    2090:	40000800 	.word	0x40000800
    2094:	41004000 	.word	0x41004000
    2098:	00002305 	.word	0x00002305
    209c:	00001cd9 	.word	0x00001cd9
    20a0:	00001e35 	.word	0x00001e35
    20a4:	00806024 	.word	0x00806024
    20a8:	ff80ffff 	.word	0xff80ffff
    20ac:	00001c51 	.word	0x00001c51
    20b0:	00001db1 	.word	0x00001db1
    20b4:	00001c15 	.word	0x00001c15
    20b8:	000020cd 	.word	0x000020cd
    20bc:	000020f1 	.word	0x000020f1
    20c0:	000021a9 	.word	0x000021a9
    20c4:	00002279 	.word	0x00002279
    20c8:	40000400 	.word	0x40000400

000020cc <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    20cc:	4a06      	ldr	r2, [pc, #24]	; (20e8 <system_gclk_init+0x1c>)
    20ce:	6991      	ldr	r1, [r2, #24]
    20d0:	2308      	movs	r3, #8
    20d2:	430b      	orrs	r3, r1
    20d4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    20d6:	2201      	movs	r2, #1
    20d8:	4b04      	ldr	r3, [pc, #16]	; (20ec <system_gclk_init+0x20>)
    20da:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    20dc:	0019      	movs	r1, r3
    20de:	780b      	ldrb	r3, [r1, #0]
    20e0:	4213      	tst	r3, r2
    20e2:	d1fc      	bne.n	20de <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    20e4:	4770      	bx	lr
    20e6:	46c0      	nop			; (mov r8, r8)
    20e8:	40000400 	.word	0x40000400
    20ec:	40000c00 	.word	0x40000c00

000020f0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    20f0:	b570      	push	{r4, r5, r6, lr}
    20f2:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    20f4:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    20f6:	780c      	ldrb	r4, [r1, #0]
    20f8:	0224      	lsls	r4, r4, #8
    20fa:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    20fc:	784b      	ldrb	r3, [r1, #1]
    20fe:	2b00      	cmp	r3, #0
    2100:	d002      	beq.n	2108 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2102:	2380      	movs	r3, #128	; 0x80
    2104:	02db      	lsls	r3, r3, #11
    2106:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2108:	7a4b      	ldrb	r3, [r1, #9]
    210a:	2b00      	cmp	r3, #0
    210c:	d002      	beq.n	2114 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    210e:	2380      	movs	r3, #128	; 0x80
    2110:	031b      	lsls	r3, r3, #12
    2112:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2114:	6848      	ldr	r0, [r1, #4]
    2116:	2801      	cmp	r0, #1
    2118:	d918      	bls.n	214c <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    211a:	1e43      	subs	r3, r0, #1
    211c:	4218      	tst	r0, r3
    211e:	d110      	bne.n	2142 <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2120:	2802      	cmp	r0, #2
    2122:	d906      	bls.n	2132 <system_gclk_gen_set_config+0x42>
    2124:	2302      	movs	r3, #2
    2126:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2128:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    212a:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    212c:	4298      	cmp	r0, r3
    212e:	d8fb      	bhi.n	2128 <system_gclk_gen_set_config+0x38>
    2130:	e000      	b.n	2134 <system_gclk_gen_set_config+0x44>
    2132:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2134:	0212      	lsls	r2, r2, #8
    2136:	4332      	orrs	r2, r6
    2138:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    213a:	2380      	movs	r3, #128	; 0x80
    213c:	035b      	lsls	r3, r3, #13
    213e:	431c      	orrs	r4, r3
    2140:	e004      	b.n	214c <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    2142:	0205      	lsls	r5, r0, #8
    2144:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2146:	2380      	movs	r3, #128	; 0x80
    2148:	029b      	lsls	r3, r3, #10
    214a:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    214c:	7a0b      	ldrb	r3, [r1, #8]
    214e:	2b00      	cmp	r3, #0
    2150:	d002      	beq.n	2158 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2152:	2380      	movs	r3, #128	; 0x80
    2154:	039b      	lsls	r3, r3, #14
    2156:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2158:	4a0f      	ldr	r2, [pc, #60]	; (2198 <system_gclk_gen_set_config+0xa8>)
    215a:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    215c:	b25b      	sxtb	r3, r3
    215e:	2b00      	cmp	r3, #0
    2160:	dbfb      	blt.n	215a <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2162:	4b0e      	ldr	r3, [pc, #56]	; (219c <system_gclk_gen_set_config+0xac>)
    2164:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2166:	4b0e      	ldr	r3, [pc, #56]	; (21a0 <system_gclk_gen_set_config+0xb0>)
    2168:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    216a:	4a0b      	ldr	r2, [pc, #44]	; (2198 <system_gclk_gen_set_config+0xa8>)
    216c:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    216e:	b25b      	sxtb	r3, r3
    2170:	2b00      	cmp	r3, #0
    2172:	dbfb      	blt.n	216c <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2174:	4b08      	ldr	r3, [pc, #32]	; (2198 <system_gclk_gen_set_config+0xa8>)
    2176:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2178:	001a      	movs	r2, r3
    217a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    217c:	b25b      	sxtb	r3, r3
    217e:	2b00      	cmp	r3, #0
    2180:	dbfb      	blt.n	217a <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2182:	4a05      	ldr	r2, [pc, #20]	; (2198 <system_gclk_gen_set_config+0xa8>)
    2184:	6851      	ldr	r1, [r2, #4]
    2186:	2380      	movs	r3, #128	; 0x80
    2188:	025b      	lsls	r3, r3, #9
    218a:	400b      	ands	r3, r1
    218c:	431c      	orrs	r4, r3
    218e:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2190:	4b04      	ldr	r3, [pc, #16]	; (21a4 <system_gclk_gen_set_config+0xb4>)
    2192:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2194:	bd70      	pop	{r4, r5, r6, pc}
    2196:	46c0      	nop			; (mov r8, r8)
    2198:	40000c00 	.word	0x40000c00
    219c:	000009d5 	.word	0x000009d5
    21a0:	40000c08 	.word	0x40000c08
    21a4:	00000a15 	.word	0x00000a15

000021a8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    21a8:	b510      	push	{r4, lr}
    21aa:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    21ac:	4a0b      	ldr	r2, [pc, #44]	; (21dc <system_gclk_gen_enable+0x34>)
    21ae:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    21b0:	b25b      	sxtb	r3, r3
    21b2:	2b00      	cmp	r3, #0
    21b4:	dbfb      	blt.n	21ae <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    21b6:	4b0a      	ldr	r3, [pc, #40]	; (21e0 <system_gclk_gen_enable+0x38>)
    21b8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    21ba:	4b0a      	ldr	r3, [pc, #40]	; (21e4 <system_gclk_gen_enable+0x3c>)
    21bc:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    21be:	4a07      	ldr	r2, [pc, #28]	; (21dc <system_gclk_gen_enable+0x34>)
    21c0:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    21c2:	b25b      	sxtb	r3, r3
    21c4:	2b00      	cmp	r3, #0
    21c6:	dbfb      	blt.n	21c0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    21c8:	4a04      	ldr	r2, [pc, #16]	; (21dc <system_gclk_gen_enable+0x34>)
    21ca:	6853      	ldr	r3, [r2, #4]
    21cc:	2180      	movs	r1, #128	; 0x80
    21ce:	0249      	lsls	r1, r1, #9
    21d0:	430b      	orrs	r3, r1
    21d2:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    21d4:	4b04      	ldr	r3, [pc, #16]	; (21e8 <system_gclk_gen_enable+0x40>)
    21d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    21d8:	bd10      	pop	{r4, pc}
    21da:	46c0      	nop			; (mov r8, r8)
    21dc:	40000c00 	.word	0x40000c00
    21e0:	000009d5 	.word	0x000009d5
    21e4:	40000c04 	.word	0x40000c04
    21e8:	00000a15 	.word	0x00000a15

000021ec <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    21ec:	b570      	push	{r4, r5, r6, lr}
    21ee:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    21f0:	4a1a      	ldr	r2, [pc, #104]	; (225c <system_gclk_gen_get_hz+0x70>)
    21f2:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    21f4:	b25b      	sxtb	r3, r3
    21f6:	2b00      	cmp	r3, #0
    21f8:	dbfb      	blt.n	21f2 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    21fa:	4b19      	ldr	r3, [pc, #100]	; (2260 <system_gclk_gen_get_hz+0x74>)
    21fc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    21fe:	4b19      	ldr	r3, [pc, #100]	; (2264 <system_gclk_gen_get_hz+0x78>)
    2200:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2202:	4a16      	ldr	r2, [pc, #88]	; (225c <system_gclk_gen_get_hz+0x70>)
    2204:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    2206:	b25b      	sxtb	r3, r3
    2208:	2b00      	cmp	r3, #0
    220a:	dbfb      	blt.n	2204 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    220c:	4e13      	ldr	r6, [pc, #76]	; (225c <system_gclk_gen_get_hz+0x70>)
    220e:	6870      	ldr	r0, [r6, #4]
    2210:	04c0      	lsls	r0, r0, #19
    2212:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2214:	4b14      	ldr	r3, [pc, #80]	; (2268 <system_gclk_gen_get_hz+0x7c>)
    2216:	4798      	blx	r3
    2218:	0005      	movs	r5, r0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    221a:	4b12      	ldr	r3, [pc, #72]	; (2264 <system_gclk_gen_get_hz+0x78>)
    221c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    221e:	6876      	ldr	r6, [r6, #4]
    2220:	02f6      	lsls	r6, r6, #11
    2222:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2224:	4b11      	ldr	r3, [pc, #68]	; (226c <system_gclk_gen_get_hz+0x80>)
    2226:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2228:	4a0c      	ldr	r2, [pc, #48]	; (225c <system_gclk_gen_get_hz+0x70>)
    222a:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    222c:	b25b      	sxtb	r3, r3
    222e:	2b00      	cmp	r3, #0
    2230:	dbfb      	blt.n	222a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2232:	4b0a      	ldr	r3, [pc, #40]	; (225c <system_gclk_gen_get_hz+0x70>)
    2234:	689c      	ldr	r4, [r3, #8]
    2236:	0224      	lsls	r4, r4, #8
    2238:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    223a:	4b0d      	ldr	r3, [pc, #52]	; (2270 <system_gclk_gen_get_hz+0x84>)
    223c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    223e:	2e00      	cmp	r6, #0
    2240:	d107      	bne.n	2252 <system_gclk_gen_get_hz+0x66>
    2242:	2c01      	cmp	r4, #1
    2244:	d907      	bls.n	2256 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2246:	0021      	movs	r1, r4
    2248:	0028      	movs	r0, r5
    224a:	4b0a      	ldr	r3, [pc, #40]	; (2274 <system_gclk_gen_get_hz+0x88>)
    224c:	4798      	blx	r3
    224e:	0005      	movs	r5, r0
    2250:	e001      	b.n	2256 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2252:	3401      	adds	r4, #1
    2254:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2256:	0028      	movs	r0, r5
    2258:	bd70      	pop	{r4, r5, r6, pc}
    225a:	46c0      	nop			; (mov r8, r8)
    225c:	40000c00 	.word	0x40000c00
    2260:	000009d5 	.word	0x000009d5
    2264:	40000c04 	.word	0x40000c04
    2268:	00001b85 	.word	0x00001b85
    226c:	40000c08 	.word	0x40000c08
    2270:	00000a15 	.word	0x00000a15
    2274:	00005f1d 	.word	0x00005f1d

00002278 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2278:	b510      	push	{r4, lr}
    227a:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    227c:	4b06      	ldr	r3, [pc, #24]	; (2298 <system_gclk_chan_enable+0x20>)
    227e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2280:	4b06      	ldr	r3, [pc, #24]	; (229c <system_gclk_chan_enable+0x24>)
    2282:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2284:	4a06      	ldr	r2, [pc, #24]	; (22a0 <system_gclk_chan_enable+0x28>)
    2286:	8851      	ldrh	r1, [r2, #2]
    2288:	2380      	movs	r3, #128	; 0x80
    228a:	01db      	lsls	r3, r3, #7
    228c:	430b      	orrs	r3, r1
    228e:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2290:	4b04      	ldr	r3, [pc, #16]	; (22a4 <system_gclk_chan_enable+0x2c>)
    2292:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2294:	bd10      	pop	{r4, pc}
    2296:	46c0      	nop			; (mov r8, r8)
    2298:	000009d5 	.word	0x000009d5
    229c:	40000c02 	.word	0x40000c02
    22a0:	40000c00 	.word	0x40000c00
    22a4:	00000a15 	.word	0x00000a15

000022a8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    22a8:	b510      	push	{r4, lr}
    22aa:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    22ac:	4b0f      	ldr	r3, [pc, #60]	; (22ec <system_gclk_chan_disable+0x44>)
    22ae:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    22b0:	4b0f      	ldr	r3, [pc, #60]	; (22f0 <system_gclk_chan_disable+0x48>)
    22b2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    22b4:	4b0f      	ldr	r3, [pc, #60]	; (22f4 <system_gclk_chan_disable+0x4c>)
    22b6:	885a      	ldrh	r2, [r3, #2]
    22b8:	0512      	lsls	r2, r2, #20
    22ba:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    22bc:	8859      	ldrh	r1, [r3, #2]
    22be:	4a0e      	ldr	r2, [pc, #56]	; (22f8 <system_gclk_chan_disable+0x50>)
    22c0:	400a      	ands	r2, r1
    22c2:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    22c4:	8859      	ldrh	r1, [r3, #2]
    22c6:	4a0d      	ldr	r2, [pc, #52]	; (22fc <system_gclk_chan_disable+0x54>)
    22c8:	400a      	ands	r2, r1
    22ca:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    22cc:	0019      	movs	r1, r3
    22ce:	2280      	movs	r2, #128	; 0x80
    22d0:	01d2      	lsls	r2, r2, #7
    22d2:	884b      	ldrh	r3, [r1, #2]
    22d4:	4213      	tst	r3, r2
    22d6:	d1fc      	bne.n	22d2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    22d8:	4906      	ldr	r1, [pc, #24]	; (22f4 <system_gclk_chan_disable+0x4c>)
    22da:	884c      	ldrh	r4, [r1, #2]
    22dc:	0202      	lsls	r2, r0, #8
    22de:	4b06      	ldr	r3, [pc, #24]	; (22f8 <system_gclk_chan_disable+0x50>)
    22e0:	4023      	ands	r3, r4
    22e2:	4313      	orrs	r3, r2
    22e4:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    22e6:	4b06      	ldr	r3, [pc, #24]	; (2300 <system_gclk_chan_disable+0x58>)
    22e8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    22ea:	bd10      	pop	{r4, pc}
    22ec:	000009d5 	.word	0x000009d5
    22f0:	40000c02 	.word	0x40000c02
    22f4:	40000c00 	.word	0x40000c00
    22f8:	fffff0ff 	.word	0xfffff0ff
    22fc:	ffffbfff 	.word	0xffffbfff
    2300:	00000a15 	.word	0x00000a15

00002304 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    2304:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2306:	780c      	ldrb	r4, [r1, #0]
    2308:	0224      	lsls	r4, r4, #8
    230a:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    230c:	4b02      	ldr	r3, [pc, #8]	; (2318 <system_gclk_chan_set_config+0x14>)
    230e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2310:	b2a4      	uxth	r4, r4
    2312:	4b02      	ldr	r3, [pc, #8]	; (231c <system_gclk_chan_set_config+0x18>)
    2314:	805c      	strh	r4, [r3, #2]
}
    2316:	bd10      	pop	{r4, pc}
    2318:	000022a9 	.word	0x000022a9
    231c:	40000c00 	.word	0x40000c00

00002320 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2320:	b510      	push	{r4, lr}
    2322:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2324:	4b06      	ldr	r3, [pc, #24]	; (2340 <system_gclk_chan_get_hz+0x20>)
    2326:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2328:	4b06      	ldr	r3, [pc, #24]	; (2344 <system_gclk_chan_get_hz+0x24>)
    232a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    232c:	4b06      	ldr	r3, [pc, #24]	; (2348 <system_gclk_chan_get_hz+0x28>)
    232e:	885c      	ldrh	r4, [r3, #2]
    2330:	0524      	lsls	r4, r4, #20
    2332:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2334:	4b05      	ldr	r3, [pc, #20]	; (234c <system_gclk_chan_get_hz+0x2c>)
    2336:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2338:	0020      	movs	r0, r4
    233a:	4b05      	ldr	r3, [pc, #20]	; (2350 <system_gclk_chan_get_hz+0x30>)
    233c:	4798      	blx	r3
}
    233e:	bd10      	pop	{r4, pc}
    2340:	000009d5 	.word	0x000009d5
    2344:	40000c02 	.word	0x40000c02
    2348:	40000c00 	.word	0x40000c00
    234c:	00000a15 	.word	0x00000a15
    2350:	000021ed 	.word	0x000021ed

00002354 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2354:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2356:	78d3      	ldrb	r3, [r2, #3]
    2358:	2b00      	cmp	r3, #0
    235a:	d11e      	bne.n	239a <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    235c:	7813      	ldrb	r3, [r2, #0]
    235e:	2b80      	cmp	r3, #128	; 0x80
    2360:	d004      	beq.n	236c <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2362:	061b      	lsls	r3, r3, #24
    2364:	2480      	movs	r4, #128	; 0x80
    2366:	0264      	lsls	r4, r4, #9
    2368:	4323      	orrs	r3, r4
    236a:	e000      	b.n	236e <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    236c:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    236e:	7854      	ldrb	r4, [r2, #1]
    2370:	2502      	movs	r5, #2
    2372:	43ac      	bics	r4, r5
    2374:	d10a      	bne.n	238c <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2376:	7894      	ldrb	r4, [r2, #2]
    2378:	2c00      	cmp	r4, #0
    237a:	d103      	bne.n	2384 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    237c:	2480      	movs	r4, #128	; 0x80
    237e:	02a4      	lsls	r4, r4, #10
    2380:	4323      	orrs	r3, r4
    2382:	e002      	b.n	238a <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2384:	24c0      	movs	r4, #192	; 0xc0
    2386:	02e4      	lsls	r4, r4, #11
    2388:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    238a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    238c:	7854      	ldrb	r4, [r2, #1]
    238e:	3c01      	subs	r4, #1
    2390:	2c01      	cmp	r4, #1
    2392:	d812      	bhi.n	23ba <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2394:	4c18      	ldr	r4, [pc, #96]	; (23f8 <_system_pinmux_config+0xa4>)
    2396:	4023      	ands	r3, r4
    2398:	e00f      	b.n	23ba <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    239a:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    239c:	040b      	lsls	r3, r1, #16
    239e:	0c1b      	lsrs	r3, r3, #16
    23a0:	24a0      	movs	r4, #160	; 0xa0
    23a2:	05e4      	lsls	r4, r4, #23
    23a4:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    23a6:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    23a8:	0c0b      	lsrs	r3, r1, #16
    23aa:	24d0      	movs	r4, #208	; 0xd0
    23ac:	0624      	lsls	r4, r4, #24
    23ae:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    23b0:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    23b2:	78d3      	ldrb	r3, [r2, #3]
    23b4:	2b00      	cmp	r3, #0
    23b6:	d018      	beq.n	23ea <_system_pinmux_config+0x96>
    23b8:	e01c      	b.n	23f4 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    23ba:	040c      	lsls	r4, r1, #16
    23bc:	0c24      	lsrs	r4, r4, #16
    23be:	25a0      	movs	r5, #160	; 0xa0
    23c0:	05ed      	lsls	r5, r5, #23
    23c2:	432c      	orrs	r4, r5
    23c4:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    23c6:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    23c8:	0c0c      	lsrs	r4, r1, #16
    23ca:	25d0      	movs	r5, #208	; 0xd0
    23cc:	062d      	lsls	r5, r5, #24
    23ce:	432c      	orrs	r4, r5
    23d0:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    23d2:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    23d4:	78d4      	ldrb	r4, [r2, #3]
    23d6:	2c00      	cmp	r4, #0
    23d8:	d10c      	bne.n	23f4 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    23da:	035b      	lsls	r3, r3, #13
    23dc:	d505      	bpl.n	23ea <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    23de:	7893      	ldrb	r3, [r2, #2]
    23e0:	2b01      	cmp	r3, #1
    23e2:	d101      	bne.n	23e8 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    23e4:	6181      	str	r1, [r0, #24]
    23e6:	e000      	b.n	23ea <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    23e8:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    23ea:	7853      	ldrb	r3, [r2, #1]
    23ec:	3b01      	subs	r3, #1
    23ee:	2b01      	cmp	r3, #1
    23f0:	d800      	bhi.n	23f4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    23f2:	6081      	str	r1, [r0, #8]
		}
	}
}
    23f4:	bd30      	pop	{r4, r5, pc}
    23f6:	46c0      	nop			; (mov r8, r8)
    23f8:	fffbffff 	.word	0xfffbffff

000023fc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    23fc:	b510      	push	{r4, lr}
    23fe:	0003      	movs	r3, r0
    2400:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2402:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2404:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2406:	2900      	cmp	r1, #0
    2408:	d104      	bne.n	2414 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    240a:	0958      	lsrs	r0, r3, #5
    240c:	01c0      	lsls	r0, r0, #7
    240e:	4905      	ldr	r1, [pc, #20]	; (2424 <system_pinmux_pin_set_config+0x28>)
    2410:	468c      	mov	ip, r1
    2412:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    2414:	211f      	movs	r1, #31
    2416:	400b      	ands	r3, r1
    2418:	391e      	subs	r1, #30
    241a:	4099      	lsls	r1, r3
    241c:	4b02      	ldr	r3, [pc, #8]	; (2428 <system_pinmux_pin_set_config+0x2c>)
    241e:	4798      	blx	r3
}
    2420:	bd10      	pop	{r4, pc}
    2422:	46c0      	nop			; (mov r8, r8)
    2424:	41004400 	.word	0x41004400
    2428:	00002355 	.word	0x00002355

0000242c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    242c:	4770      	bx	lr
    242e:	46c0      	nop			; (mov r8, r8)

00002430 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2430:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2432:	4b05      	ldr	r3, [pc, #20]	; (2448 <system_init+0x18>)
    2434:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2436:	4b05      	ldr	r3, [pc, #20]	; (244c <system_init+0x1c>)
    2438:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    243a:	4b05      	ldr	r3, [pc, #20]	; (2450 <system_init+0x20>)
    243c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    243e:	4b05      	ldr	r3, [pc, #20]	; (2454 <system_init+0x24>)
    2440:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2442:	4b05      	ldr	r3, [pc, #20]	; (2458 <system_init+0x28>)
    2444:	4798      	blx	r3
}
    2446:	bd10      	pop	{r4, pc}
    2448:	00001edd 	.word	0x00001edd
    244c:	00000a45 	.word	0x00000a45
    2450:	0000242d 	.word	0x0000242d
    2454:	00000bc1 	.word	0x00000bc1
    2458:	0000242d 	.word	0x0000242d

0000245c <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    245c:	1c93      	adds	r3, r2, #2
    245e:	009b      	lsls	r3, r3, #2
    2460:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    2462:	2a02      	cmp	r2, #2
    2464:	d104      	bne.n	2470 <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    2466:	7e02      	ldrb	r2, [r0, #24]
    2468:	2310      	movs	r3, #16
    246a:	4313      	orrs	r3, r2
    246c:	7603      	strb	r3, [r0, #24]
    246e:	e00b      	b.n	2488 <tc_register_callback+0x2c>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    2470:	2a03      	cmp	r2, #3
    2472:	d104      	bne.n	247e <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    2474:	7e02      	ldrb	r2, [r0, #24]
    2476:	2320      	movs	r3, #32
    2478:	4313      	orrs	r3, r2
    247a:	7603      	strb	r3, [r0, #24]
    247c:	e004      	b.n	2488 <tc_register_callback+0x2c>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    247e:	2301      	movs	r3, #1
    2480:	4093      	lsls	r3, r2
    2482:	7e02      	ldrb	r2, [r0, #24]
    2484:	4313      	orrs	r3, r2
    2486:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    2488:	2000      	movs	r0, #0
    248a:	4770      	bx	lr

0000248c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    248c:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    248e:	0080      	lsls	r0, r0, #2
    2490:	4b14      	ldr	r3, [pc, #80]	; (24e4 <_tc_interrupt_handler+0x58>)
    2492:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2494:	682b      	ldr	r3, [r5, #0]
    2496:	7b9c      	ldrb	r4, [r3, #14]
    2498:	7e2b      	ldrb	r3, [r5, #24]
    249a:	401c      	ands	r4, r3
    249c:	7e6b      	ldrb	r3, [r5, #25]
    249e:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    24a0:	07e3      	lsls	r3, r4, #31
    24a2:	d505      	bpl.n	24b0 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    24a4:	0028      	movs	r0, r5
    24a6:	68ab      	ldr	r3, [r5, #8]
    24a8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    24aa:	2301      	movs	r3, #1
    24ac:	682a      	ldr	r2, [r5, #0]
    24ae:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    24b0:	07a3      	lsls	r3, r4, #30
    24b2:	d505      	bpl.n	24c0 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    24b4:	0028      	movs	r0, r5
    24b6:	68eb      	ldr	r3, [r5, #12]
    24b8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    24ba:	2302      	movs	r3, #2
    24bc:	682a      	ldr	r2, [r5, #0]
    24be:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    24c0:	06e3      	lsls	r3, r4, #27
    24c2:	d505      	bpl.n	24d0 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    24c4:	0028      	movs	r0, r5
    24c6:	692b      	ldr	r3, [r5, #16]
    24c8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    24ca:	2310      	movs	r3, #16
    24cc:	682a      	ldr	r2, [r5, #0]
    24ce:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    24d0:	06a3      	lsls	r3, r4, #26
    24d2:	d505      	bpl.n	24e0 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    24d4:	0028      	movs	r0, r5
    24d6:	696b      	ldr	r3, [r5, #20]
    24d8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    24da:	682b      	ldr	r3, [r5, #0]
    24dc:	2220      	movs	r2, #32
    24de:	739a      	strb	r2, [r3, #14]
	}
}
    24e0:	bd70      	pop	{r4, r5, r6, pc}
    24e2:	46c0      	nop			; (mov r8, r8)
    24e4:	200007e0 	.word	0x200007e0

000024e8 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    24e8:	b510      	push	{r4, lr}
    24ea:	2000      	movs	r0, #0
    24ec:	4b01      	ldr	r3, [pc, #4]	; (24f4 <TC3_Handler+0xc>)
    24ee:	4798      	blx	r3
    24f0:	bd10      	pop	{r4, pc}
    24f2:	46c0      	nop			; (mov r8, r8)
    24f4:	0000248d 	.word	0x0000248d

000024f8 <TC4_Handler>:
    24f8:	b510      	push	{r4, lr}
    24fa:	2001      	movs	r0, #1
    24fc:	4b01      	ldr	r3, [pc, #4]	; (2504 <TC4_Handler+0xc>)
    24fe:	4798      	blx	r3
    2500:	bd10      	pop	{r4, pc}
    2502:	46c0      	nop			; (mov r8, r8)
    2504:	0000248d 	.word	0x0000248d

00002508 <TC5_Handler>:
    2508:	b510      	push	{r4, lr}
    250a:	2002      	movs	r0, #2
    250c:	4b01      	ldr	r3, [pc, #4]	; (2514 <TC5_Handler+0xc>)
    250e:	4798      	blx	r3
    2510:	bd10      	pop	{r4, pc}
    2512:	46c0      	nop			; (mov r8, r8)
    2514:	0000248d 	.word	0x0000248d

00002518 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    2518:	b530      	push	{r4, r5, lr}
    251a:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    251c:	aa01      	add	r2, sp, #4
    251e:	4b0b      	ldr	r3, [pc, #44]	; (254c <_tc_get_inst_index+0x34>)
    2520:	cb32      	ldmia	r3!, {r1, r4, r5}
    2522:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    2524:	9b01      	ldr	r3, [sp, #4]
    2526:	4298      	cmp	r0, r3
    2528:	d00a      	beq.n	2540 <_tc_get_inst_index+0x28>
    252a:	9b02      	ldr	r3, [sp, #8]
    252c:	4298      	cmp	r0, r3
    252e:	d005      	beq.n	253c <_tc_get_inst_index+0x24>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    2530:	2300      	movs	r3, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    2532:	9a03      	ldr	r2, [sp, #12]
    2534:	4282      	cmp	r2, r0
    2536:	d105      	bne.n	2544 <_tc_get_inst_index+0x2c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2538:	3302      	adds	r3, #2
    253a:	e002      	b.n	2542 <_tc_get_inst_index+0x2a>
    253c:	2301      	movs	r3, #1
    253e:	e000      	b.n	2542 <_tc_get_inst_index+0x2a>
    2540:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
    2542:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    2544:	0018      	movs	r0, r3
    2546:	b005      	add	sp, #20
    2548:	bd30      	pop	{r4, r5, pc}
    254a:	46c0      	nop			; (mov r8, r8)
    254c:	00008b88 	.word	0x00008b88

00002550 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    2550:	b5f0      	push	{r4, r5, r6, r7, lr}
    2552:	464f      	mov	r7, r9
    2554:	4646      	mov	r6, r8
    2556:	b4c0      	push	{r6, r7}
    2558:	b087      	sub	sp, #28
    255a:	0004      	movs	r4, r0
    255c:	000e      	movs	r6, r1
    255e:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    2560:	0008      	movs	r0, r1
    2562:	4b92      	ldr	r3, [pc, #584]	; (27ac <tc_init+0x25c>)
    2564:	4798      	blx	r3
    2566:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    2568:	4d91      	ldr	r5, [pc, #580]	; (27b0 <tc_init+0x260>)
    256a:	0029      	movs	r1, r5
    256c:	310c      	adds	r1, #12
    256e:	2203      	movs	r2, #3
    2570:	a805      	add	r0, sp, #20
    2572:	4f90      	ldr	r7, [pc, #576]	; (27b4 <tc_init+0x264>)
    2574:	47b8      	blx	r7
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    2576:	0029      	movs	r1, r5
    2578:	3110      	adds	r1, #16
    257a:	2206      	movs	r2, #6
    257c:	a803      	add	r0, sp, #12
    257e:	47b8      	blx	r7
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    2580:	2300      	movs	r3, #0
    2582:	60a3      	str	r3, [r4, #8]
    2584:	60e3      	str	r3, [r4, #12]
    2586:	6123      	str	r3, [r4, #16]
    2588:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    258a:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    258c:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    258e:	464b      	mov	r3, r9
    2590:	009a      	lsls	r2, r3, #2
    2592:	4b89      	ldr	r3, [pc, #548]	; (27b8 <tc_init+0x268>)
    2594:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    2596:	6026      	str	r6, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2598:	4643      	mov	r3, r8
    259a:	789b      	ldrb	r3, [r3, #2]
    259c:	2b08      	cmp	r3, #8
    259e:	d104      	bne.n	25aa <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    25a0:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    25a2:	464a      	mov	r2, r9
    25a4:	07d2      	lsls	r2, r2, #31
    25a6:	d400      	bmi.n	25aa <tc_init+0x5a>
    25a8:	e0fb      	b.n	27a2 <tc_init+0x252>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    25aa:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    25ac:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    25ae:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    25b0:	07db      	lsls	r3, r3, #31
    25b2:	d500      	bpl.n	25b6 <tc_init+0x66>
    25b4:	e0f5      	b.n	27a2 <tc_init+0x252>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    25b6:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    25b8:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    25ba:	06db      	lsls	r3, r3, #27
    25bc:	d500      	bpl.n	25c0 <tc_init+0x70>
    25be:	e0f0      	b.n	27a2 <tc_init+0x252>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    25c0:	8833      	ldrh	r3, [r6, #0]
    25c2:	079b      	lsls	r3, r3, #30
    25c4:	d500      	bpl.n	25c8 <tc_init+0x78>
    25c6:	e0ec      	b.n	27a2 <tc_init+0x252>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    25c8:	4643      	mov	r3, r8
    25ca:	7c1b      	ldrb	r3, [r3, #16]
    25cc:	2b00      	cmp	r3, #0
    25ce:	d00c      	beq.n	25ea <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    25d0:	a902      	add	r1, sp, #8
    25d2:	2301      	movs	r3, #1
    25d4:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    25d6:	2200      	movs	r2, #0
    25d8:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    25da:	4642      	mov	r2, r8
    25dc:	7e12      	ldrb	r2, [r2, #24]
    25de:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    25e0:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    25e2:	4643      	mov	r3, r8
    25e4:	7d18      	ldrb	r0, [r3, #20]
    25e6:	4b75      	ldr	r3, [pc, #468]	; (27bc <tc_init+0x26c>)
    25e8:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    25ea:	4643      	mov	r3, r8
    25ec:	7f1b      	ldrb	r3, [r3, #28]
    25ee:	2b00      	cmp	r3, #0
    25f0:	d00d      	beq.n	260e <tc_init+0xbe>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    25f2:	a902      	add	r1, sp, #8
    25f4:	2301      	movs	r3, #1
    25f6:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    25f8:	2200      	movs	r2, #0
    25fa:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    25fc:	4642      	mov	r2, r8
    25fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
    2600:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2602:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2604:	4643      	mov	r3, r8
    2606:	6a1b      	ldr	r3, [r3, #32]
    2608:	b2d8      	uxtb	r0, r3
    260a:	4b6c      	ldr	r3, [pc, #432]	; (27bc <tc_init+0x26c>)
    260c:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    260e:	496c      	ldr	r1, [pc, #432]	; (27c0 <tc_init+0x270>)
    2610:	6a0b      	ldr	r3, [r1, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    2612:	464a      	mov	r2, r9
    2614:	0052      	lsls	r2, r2, #1
    2616:	a803      	add	r0, sp, #12
    2618:	5a12      	ldrh	r2, [r2, r0]
    261a:	4313      	orrs	r3, r2
    261c:	620b      	str	r3, [r1, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    261e:	4643      	mov	r3, r8
    2620:	789b      	ldrb	r3, [r3, #2]
    2622:	2b08      	cmp	r3, #8
    2624:	d106      	bne.n	2634 <tc_init+0xe4>
    2626:	6a0b      	ldr	r3, [r1, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    2628:	464a      	mov	r2, r9
    262a:	3201      	adds	r2, #1
    262c:	0052      	lsls	r2, r2, #1
    262e:	5a12      	ldrh	r2, [r2, r0]
    2630:	4313      	orrs	r3, r2
    2632:	620b      	str	r3, [r1, #32]
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    2634:	a901      	add	r1, sp, #4
    2636:	4643      	mov	r3, r8
    2638:	781b      	ldrb	r3, [r3, #0]
    263a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    263c:	ab05      	add	r3, sp, #20
    263e:	464a      	mov	r2, r9
    2640:	5c9d      	ldrb	r5, [r3, r2]
    2642:	0028      	movs	r0, r5
    2644:	4b5f      	ldr	r3, [pc, #380]	; (27c4 <tc_init+0x274>)
    2646:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    2648:	0028      	movs	r0, r5
    264a:	4b5f      	ldr	r3, [pc, #380]	; (27c8 <tc_init+0x278>)
    264c:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    264e:	4643      	mov	r3, r8
    2650:	7898      	ldrb	r0, [r3, #2]
    2652:	799b      	ldrb	r3, [r3, #6]
    2654:	0002      	movs	r2, r0
    2656:	431a      	orrs	r2, r3
    2658:	4643      	mov	r3, r8
    265a:	8918      	ldrh	r0, [r3, #8]
    265c:	889b      	ldrh	r3, [r3, #4]
    265e:	4303      	orrs	r3, r0
    2660:	431a      	orrs	r2, r3
    2662:	0010      	movs	r0, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    2664:	4643      	mov	r3, r8
    2666:	785b      	ldrb	r3, [r3, #1]
    2668:	2b00      	cmp	r3, #0
    266a:	d002      	beq.n	2672 <tc_init+0x122>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    266c:	2380      	movs	r3, #128	; 0x80
    266e:	011b      	lsls	r3, r3, #4
    2670:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2672:	6821      	ldr	r1, [r4, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2674:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2676:	7bcb      	ldrb	r3, [r1, #15]
    2678:	4393      	bics	r3, r2
    267a:	d1fc      	bne.n	2676 <tc_init+0x126>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    267c:	8030      	strh	r0, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    267e:	4643      	mov	r3, r8
    2680:	7b58      	ldrb	r0, [r3, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    2682:	1e43      	subs	r3, r0, #1
    2684:	4198      	sbcs	r0, r3
    2686:	0080      	lsls	r0, r0, #2
	}

	if (config->count_direction) {
    2688:	4643      	mov	r3, r8
    268a:	7b9b      	ldrb	r3, [r3, #14]
    268c:	2b00      	cmp	r3, #0
    268e:	d001      	beq.n	2694 <tc_init+0x144>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    2690:	2301      	movs	r3, #1
    2692:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2694:	6821      	ldr	r1, [r4, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    2696:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2698:	7bcb      	ldrb	r3, [r1, #15]
    269a:	4393      	bics	r3, r2
    269c:	d1fc      	bne.n	2698 <tc_init+0x148>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    269e:	33ff      	adds	r3, #255	; 0xff
    26a0:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    26a2:	2800      	cmp	r0, #0
    26a4:	d005      	beq.n	26b2 <tc_init+0x162>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26a6:	6821      	ldr	r1, [r4, #0]
		while (tc_is_syncing(module_inst)) {
    26a8:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26aa:	7bcb      	ldrb	r3, [r1, #15]
    26ac:	4393      	bics	r3, r2
    26ae:	d1fc      	bne.n	26aa <tc_init+0x15a>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    26b0:	7170      	strb	r0, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    26b2:	4643      	mov	r3, r8
    26b4:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    26b6:	7adb      	ldrb	r3, [r3, #11]
    26b8:	2b00      	cmp	r3, #0
    26ba:	d001      	beq.n	26c0 <tc_init+0x170>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    26bc:	2310      	movs	r3, #16
    26be:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    26c0:	4643      	mov	r3, r8
    26c2:	7b1b      	ldrb	r3, [r3, #12]
    26c4:	2b00      	cmp	r3, #0
    26c6:	d001      	beq.n	26cc <tc_init+0x17c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    26c8:	2320      	movs	r3, #32
    26ca:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26cc:	6821      	ldr	r1, [r4, #0]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    26ce:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26d0:	7bcb      	ldrb	r3, [r1, #15]
    26d2:	4393      	bics	r3, r2
    26d4:	d1fc      	bne.n	26d0 <tc_init+0x180>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    26d6:	71b0      	strb	r0, [r6, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26d8:	6822      	ldr	r2, [r4, #0]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    26da:	217f      	movs	r1, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26dc:	7bd3      	ldrb	r3, [r2, #15]
    26de:	438b      	bics	r3, r1
    26e0:	d1fc      	bne.n	26dc <tc_init+0x18c>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    26e2:	7923      	ldrb	r3, [r4, #4]
    26e4:	2b04      	cmp	r3, #4
    26e6:	d005      	beq.n	26f4 <tc_init+0x1a4>
    26e8:	2b08      	cmp	r3, #8
    26ea:	d041      	beq.n	2770 <tc_init+0x220>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    26ec:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    26ee:	2b00      	cmp	r3, #0
    26f0:	d157      	bne.n	27a2 <tc_init+0x252>
    26f2:	e024      	b.n	273e <tc_init+0x1ee>
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    26f4:	217f      	movs	r1, #127	; 0x7f
    26f6:	7bd3      	ldrb	r3, [r2, #15]
    26f8:	438b      	bics	r3, r1
    26fa:	d1fc      	bne.n	26f6 <tc_init+0x1a6>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    26fc:	3328      	adds	r3, #40	; 0x28
    26fe:	4642      	mov	r2, r8
    2700:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    2702:	7433      	strb	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2704:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    2706:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2708:	7bcb      	ldrb	r3, [r1, #15]
    270a:	4393      	bics	r3, r2
    270c:	d1fc      	bne.n	2708 <tc_init+0x1b8>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    270e:	3329      	adds	r3, #41	; 0x29
    2710:	4642      	mov	r2, r8
    2712:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    2714:	7533      	strb	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2716:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    2718:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    271a:	7bcb      	ldrb	r3, [r1, #15]
    271c:	4393      	bics	r3, r2
    271e:	d1fc      	bne.n	271a <tc_init+0x1ca>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    2720:	332a      	adds	r3, #42	; 0x2a
    2722:	4642      	mov	r2, r8
    2724:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    2726:	7633      	strb	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2728:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    272a:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    272c:	7bcb      	ldrb	r3, [r1, #15]
    272e:	4393      	bics	r3, r2
    2730:	d1fc      	bne.n	272c <tc_init+0x1dc>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    2732:	332b      	adds	r3, #43	; 0x2b
    2734:	4642      	mov	r2, r8
    2736:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    2738:	7673      	strb	r3, [r6, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    273a:	2000      	movs	r0, #0
    273c:	e031      	b.n	27a2 <tc_init+0x252>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    273e:	217f      	movs	r1, #127	; 0x7f
    2740:	7bd3      	ldrb	r3, [r2, #15]
    2742:	438b      	bics	r3, r1
    2744:	d1fc      	bne.n	2740 <tc_init+0x1f0>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    2746:	4643      	mov	r3, r8
    2748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    274a:	8233      	strh	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    274c:	6821      	ldr	r1, [r4, #0]

			while (tc_is_syncing(module_inst)) {
    274e:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2750:	7bcb      	ldrb	r3, [r1, #15]
    2752:	4393      	bics	r3, r2
    2754:	d1fc      	bne.n	2750 <tc_init+0x200>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    2756:	4643      	mov	r3, r8
    2758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    275a:	8333      	strh	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    275c:	6821      	ldr	r1, [r4, #0]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    275e:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2760:	7bcb      	ldrb	r3, [r1, #15]
    2762:	4393      	bics	r3, r2
    2764:	d1fc      	bne.n	2760 <tc_init+0x210>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    2766:	4643      	mov	r3, r8
    2768:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    276a:	8373      	strh	r3, [r6, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    276c:	2000      	movs	r0, #0
    276e:	e018      	b.n	27a2 <tc_init+0x252>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    2770:	217f      	movs	r1, #127	; 0x7f
    2772:	7bd3      	ldrb	r3, [r2, #15]
    2774:	438b      	bics	r3, r1
    2776:	d1fc      	bne.n	2772 <tc_init+0x222>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    2778:	4643      	mov	r3, r8
    277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    277c:	6133      	str	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    277e:	6821      	ldr	r1, [r4, #0]

			while (tc_is_syncing(module_inst)) {
    2780:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2782:	7bcb      	ldrb	r3, [r1, #15]
    2784:	4393      	bics	r3, r2
    2786:	d1fc      	bne.n	2782 <tc_init+0x232>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    2788:	4643      	mov	r3, r8
    278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    278c:	61b3      	str	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    278e:	6821      	ldr	r1, [r4, #0]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    2790:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2792:	7bcb      	ldrb	r3, [r1, #15]
    2794:	4393      	bics	r3, r2
    2796:	d1fc      	bne.n	2792 <tc_init+0x242>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    2798:	4643      	mov	r3, r8
    279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    279c:	61f3      	str	r3, [r6, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    279e:	2000      	movs	r0, #0
    27a0:	e7ff      	b.n	27a2 <tc_init+0x252>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    27a2:	b007      	add	sp, #28
    27a4:	bc0c      	pop	{r2, r3}
    27a6:	4690      	mov	r8, r2
    27a8:	4699      	mov	r9, r3
    27aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27ac:	00002519 	.word	0x00002519
    27b0:	00008b88 	.word	0x00008b88
    27b4:	000035d9 	.word	0x000035d9
    27b8:	200007e0 	.word	0x200007e0
    27bc:	000023fd 	.word	0x000023fd
    27c0:	40000400 	.word	0x40000400
    27c4:	00002305 	.word	0x00002305
    27c8:	00002279 	.word	0x00002279

000027cc <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    27cc:	6802      	ldr	r2, [r0, #0]

	while (tc_is_syncing(module_inst)) {
    27ce:	217f      	movs	r1, #127	; 0x7f
    27d0:	7bd3      	ldrb	r3, [r2, #15]
    27d2:	438b      	bics	r3, r1
    27d4:	d1fc      	bne.n	27d0 <tc_get_count_value+0x4>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    27d6:	7903      	ldrb	r3, [r0, #4]
    27d8:	2b04      	cmp	r3, #4
    27da:	d005      	beq.n	27e8 <tc_get_count_value+0x1c>
    27dc:	2b08      	cmp	r3, #8
    27de:	d009      	beq.n	27f4 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    27e0:	2000      	movs	r0, #0
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    27e2:	2b00      	cmp	r3, #0
    27e4:	d108      	bne.n	27f8 <tc_get_count_value+0x2c>
    27e6:	e002      	b.n	27ee <tc_get_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    27e8:	7c10      	ldrb	r0, [r2, #16]
    27ea:	b2c0      	uxtb	r0, r0
    27ec:	e004      	b.n	27f8 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    27ee:	8a10      	ldrh	r0, [r2, #16]
    27f0:	b280      	uxth	r0, r0
    27f2:	e001      	b.n	27f8 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    27f4:	6910      	ldr	r0, [r2, #16]
    27f6:	e7ff      	b.n	27f8 <tc_get_count_value+0x2c>
	}

	Assert(false);
	return 0;
}
    27f8:	4770      	bx	lr
    27fa:	46c0      	nop			; (mov r8, r8)

000027fc <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    27fc:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    27fe:	6804      	ldr	r4, [r0, #0]

	while (tc_is_syncing(module_inst)) {
    2800:	257f      	movs	r5, #127	; 0x7f
    2802:	7be3      	ldrb	r3, [r4, #15]
    2804:	43ab      	bics	r3, r5
    2806:	d1fc      	bne.n	2802 <tc_set_compare_value+0x6>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    2808:	7903      	ldrb	r3, [r0, #4]
    280a:	2b04      	cmp	r3, #4
    280c:	d005      	beq.n	281a <tc_set_compare_value+0x1e>
    280e:	2b08      	cmp	r3, #8
    2810:	d014      	beq.n	283c <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    2812:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    2814:	2b00      	cmp	r3, #0
    2816:	d119      	bne.n	284c <tc_set_compare_value+0x50>
    2818:	e007      	b.n	282a <tc_set_compare_value+0x2e>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    281a:	2017      	movs	r0, #23
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    281c:	2901      	cmp	r1, #1
    281e:	d815      	bhi.n	284c <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
						(uint8_t)compare;
    2820:	b2d2      	uxtb	r2, r2
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
    2822:	1861      	adds	r1, r4, r1
    2824:	760a      	strb	r2, [r1, #24]
						(uint8_t)compare;
				return STATUS_OK;
    2826:	2000      	movs	r0, #0
    2828:	e010      	b.n	284c <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    282a:	2017      	movs	r0, #23
						(uint8_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    282c:	2901      	cmp	r1, #1
    282e:	d80d      	bhi.n	284c <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
						(uint16_t)compare;
    2830:	b292      	uxth	r2, r2
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
    2832:	310c      	adds	r1, #12
    2834:	0049      	lsls	r1, r1, #1
    2836:	530a      	strh	r2, [r1, r4]
						(uint16_t)compare;
				return STATUS_OK;
    2838:	2000      	movs	r0, #0
    283a:	e007      	b.n	284c <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    283c:	2017      	movs	r0, #23
						(uint16_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    283e:	2901      	cmp	r1, #1
    2840:	d804      	bhi.n	284c <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
    2842:	3106      	adds	r1, #6
    2844:	0089      	lsls	r1, r1, #2
    2846:	510a      	str	r2, [r1, r4]
						(uint32_t)compare;
				return STATUS_OK;
    2848:	2000      	movs	r0, #0
    284a:	e7ff      	b.n	284c <tc_set_compare_value+0x50>
			}
	}

	return STATUS_ERR_INVALID_ARG;
}
    284c:	bd30      	pop	{r4, r5, pc}
    284e:	46c0      	nop			; (mov r8, r8)

00002850 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2850:	e7fe      	b.n	2850 <Dummy_Handler>
    2852:	46c0      	nop			; (mov r8, r8)

00002854 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2854:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    2856:	4b2e      	ldr	r3, [pc, #184]	; (2910 <Reset_Handler+0xbc>)
    2858:	4a2e      	ldr	r2, [pc, #184]	; (2914 <Reset_Handler+0xc0>)
    285a:	429a      	cmp	r2, r3
    285c:	d003      	beq.n	2866 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    285e:	4b2e      	ldr	r3, [pc, #184]	; (2918 <Reset_Handler+0xc4>)
    2860:	4a2b      	ldr	r2, [pc, #172]	; (2910 <Reset_Handler+0xbc>)
    2862:	429a      	cmp	r2, r3
    2864:	d304      	bcc.n	2870 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2866:	4b2d      	ldr	r3, [pc, #180]	; (291c <Reset_Handler+0xc8>)
    2868:	4a2d      	ldr	r2, [pc, #180]	; (2920 <Reset_Handler+0xcc>)
    286a:	429a      	cmp	r2, r3
    286c:	d310      	bcc.n	2890 <Reset_Handler+0x3c>
    286e:	e01e      	b.n	28ae <Reset_Handler+0x5a>
    2870:	4a2c      	ldr	r2, [pc, #176]	; (2924 <Reset_Handler+0xd0>)
    2872:	4b29      	ldr	r3, [pc, #164]	; (2918 <Reset_Handler+0xc4>)
    2874:	3303      	adds	r3, #3
    2876:	1a9b      	subs	r3, r3, r2
    2878:	089b      	lsrs	r3, r3, #2
    287a:	3301      	adds	r3, #1
    287c:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    287e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2880:	4823      	ldr	r0, [pc, #140]	; (2910 <Reset_Handler+0xbc>)
    2882:	4924      	ldr	r1, [pc, #144]	; (2914 <Reset_Handler+0xc0>)
    2884:	588c      	ldr	r4, [r1, r2]
    2886:	5084      	str	r4, [r0, r2]
    2888:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    288a:	429a      	cmp	r2, r3
    288c:	d1fa      	bne.n	2884 <Reset_Handler+0x30>
    288e:	e7ea      	b.n	2866 <Reset_Handler+0x12>
    2890:	4a25      	ldr	r2, [pc, #148]	; (2928 <Reset_Handler+0xd4>)
    2892:	4b22      	ldr	r3, [pc, #136]	; (291c <Reset_Handler+0xc8>)
    2894:	3303      	adds	r3, #3
    2896:	1a9b      	subs	r3, r3, r2
    2898:	089b      	lsrs	r3, r3, #2
    289a:	3301      	adds	r3, #1
    289c:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    289e:	2200      	movs	r2, #0
                *pDest++ = 0;
    28a0:	481f      	ldr	r0, [pc, #124]	; (2920 <Reset_Handler+0xcc>)
    28a2:	2100      	movs	r1, #0
    28a4:	1814      	adds	r4, r2, r0
    28a6:	6021      	str	r1, [r4, #0]
    28a8:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    28aa:	429a      	cmp	r2, r3
    28ac:	d1fa      	bne.n	28a4 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    28ae:	4a1f      	ldr	r2, [pc, #124]	; (292c <Reset_Handler+0xd8>)
    28b0:	21ff      	movs	r1, #255	; 0xff
    28b2:	4b1f      	ldr	r3, [pc, #124]	; (2930 <Reset_Handler+0xdc>)
    28b4:	438b      	bics	r3, r1
    28b6:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    28b8:	39fd      	subs	r1, #253	; 0xfd
    28ba:	2390      	movs	r3, #144	; 0x90
    28bc:	005b      	lsls	r3, r3, #1
    28be:	4a1d      	ldr	r2, [pc, #116]	; (2934 <Reset_Handler+0xe0>)
    28c0:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    28c2:	481d      	ldr	r0, [pc, #116]	; (2938 <Reset_Handler+0xe4>)
    28c4:	78c3      	ldrb	r3, [r0, #3]
    28c6:	2403      	movs	r4, #3
    28c8:	43a3      	bics	r3, r4
    28ca:	2202      	movs	r2, #2
    28cc:	4313      	orrs	r3, r2
    28ce:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    28d0:	78c3      	ldrb	r3, [r0, #3]
    28d2:	260c      	movs	r6, #12
    28d4:	43b3      	bics	r3, r6
    28d6:	2108      	movs	r1, #8
    28d8:	430b      	orrs	r3, r1
    28da:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    28dc:	4b17      	ldr	r3, [pc, #92]	; (293c <Reset_Handler+0xe8>)
    28de:	7b98      	ldrb	r0, [r3, #14]
    28e0:	2530      	movs	r5, #48	; 0x30
    28e2:	43a8      	bics	r0, r5
    28e4:	0005      	movs	r5, r0
    28e6:	2020      	movs	r0, #32
    28e8:	4328      	orrs	r0, r5
    28ea:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    28ec:	7b98      	ldrb	r0, [r3, #14]
    28ee:	43b0      	bics	r0, r6
    28f0:	4301      	orrs	r1, r0
    28f2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    28f4:	7b99      	ldrb	r1, [r3, #14]
    28f6:	43a1      	bics	r1, r4
    28f8:	430a      	orrs	r2, r1
    28fa:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    28fc:	4a10      	ldr	r2, [pc, #64]	; (2940 <Reset_Handler+0xec>)
    28fe:	6851      	ldr	r1, [r2, #4]
    2900:	2380      	movs	r3, #128	; 0x80
    2902:	430b      	orrs	r3, r1
    2904:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    2906:	4b0f      	ldr	r3, [pc, #60]	; (2944 <Reset_Handler+0xf0>)
    2908:	4798      	blx	r3

        /* Branch to main function */
        main();
    290a:	4b0f      	ldr	r3, [pc, #60]	; (2948 <Reset_Handler+0xf4>)
    290c:	4798      	blx	r3
    290e:	e7fe      	b.n	290e <Reset_Handler+0xba>
    2910:	20000000 	.word	0x20000000
    2914:	00008ee8 	.word	0x00008ee8
    2918:	200000a8 	.word	0x200000a8
    291c:	20000900 	.word	0x20000900
    2920:	200000a8 	.word	0x200000a8
    2924:	20000004 	.word	0x20000004
    2928:	200000ac 	.word	0x200000ac
    292c:	e000ed00 	.word	0xe000ed00
    2930:	00000000 	.word	0x00000000
    2934:	41007000 	.word	0x41007000
    2938:	41005000 	.word	0x41005000
    293c:	41004800 	.word	0x41004800
    2940:	41004000 	.word	0x41004000
    2944:	0000358d 	.word	0x0000358d
    2948:	00003485 	.word	0x00003485

0000294c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    294c:	b5f0      	push	{r4, r5, r6, r7, lr}
    294e:	4647      	mov	r7, r8
    2950:	b480      	push	{r7}
    2952:	000c      	movs	r4, r1
    2954:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2956:	2800      	cmp	r0, #0
    2958:	d10d      	bne.n	2976 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
    295a:	2a00      	cmp	r2, #0
    295c:	dd0e      	ble.n	297c <_read+0x30>
    295e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2960:	4e08      	ldr	r6, [pc, #32]	; (2984 <_read+0x38>)
    2962:	4d09      	ldr	r5, [pc, #36]	; (2988 <_read+0x3c>)
    2964:	6830      	ldr	r0, [r6, #0]
    2966:	0021      	movs	r1, r4
    2968:	682b      	ldr	r3, [r5, #0]
    296a:	4798      	blx	r3
		ptr++;
    296c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    296e:	42a7      	cmp	r7, r4
    2970:	d1f8      	bne.n	2964 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    2972:	4640      	mov	r0, r8
    2974:	e003      	b.n	297e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    2976:	2001      	movs	r0, #1
    2978:	4240      	negs	r0, r0
    297a:	e000      	b.n	297e <_read+0x32>
	}

	for (; len > 0; --len) {
    297c:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    297e:	bc04      	pop	{r2}
    2980:	4690      	mov	r8, r2
    2982:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2984:	200007f4 	.word	0x200007f4
    2988:	200007ec 	.word	0x200007ec

0000298c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    298c:	b5f0      	push	{r4, r5, r6, r7, lr}
    298e:	4647      	mov	r7, r8
    2990:	b480      	push	{r7}
    2992:	000e      	movs	r6, r1
    2994:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2996:	3801      	subs	r0, #1
    2998:	2802      	cmp	r0, #2
    299a:	d811      	bhi.n	29c0 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
    299c:	2a00      	cmp	r2, #0
    299e:	d012      	beq.n	29c6 <_write+0x3a>
    29a0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    29a2:	4b0c      	ldr	r3, [pc, #48]	; (29d4 <_write+0x48>)
    29a4:	4698      	mov	r8, r3
    29a6:	4f0c      	ldr	r7, [pc, #48]	; (29d8 <_write+0x4c>)
    29a8:	4643      	mov	r3, r8
    29aa:	6818      	ldr	r0, [r3, #0]
    29ac:	5d31      	ldrb	r1, [r6, r4]
    29ae:	683b      	ldr	r3, [r7, #0]
    29b0:	4798      	blx	r3
    29b2:	2800      	cmp	r0, #0
    29b4:	db09      	blt.n	29ca <_write+0x3e>
			return -1;
		}
		++nChars;
    29b6:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    29b8:	42a5      	cmp	r5, r4
    29ba:	d1f5      	bne.n	29a8 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
    29bc:	0020      	movs	r0, r4
    29be:	e006      	b.n	29ce <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    29c0:	2001      	movs	r0, #1
    29c2:	4240      	negs	r0, r0
    29c4:	e003      	b.n	29ce <_write+0x42>
	}

	for (; len != 0; --len) {
    29c6:	2000      	movs	r0, #0
    29c8:	e001      	b.n	29ce <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    29ca:	2001      	movs	r0, #1
    29cc:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    29ce:	bc04      	pop	{r2}
    29d0:	4690      	mov	r8, r2
    29d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29d4:	200007f4 	.word	0x200007f4
    29d8:	200007f0 	.word	0x200007f0

000029dc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    29dc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    29de:	4a06      	ldr	r2, [pc, #24]	; (29f8 <_sbrk+0x1c>)
    29e0:	6812      	ldr	r2, [r2, #0]
    29e2:	2a00      	cmp	r2, #0
    29e4:	d102      	bne.n	29ec <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    29e6:	4905      	ldr	r1, [pc, #20]	; (29fc <_sbrk+0x20>)
    29e8:	4a03      	ldr	r2, [pc, #12]	; (29f8 <_sbrk+0x1c>)
    29ea:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    29ec:	4a02      	ldr	r2, [pc, #8]	; (29f8 <_sbrk+0x1c>)
    29ee:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    29f0:	18c3      	adds	r3, r0, r3
    29f2:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    29f4:	4770      	bx	lr
    29f6:	46c0      	nop			; (mov r8, r8)
    29f8:	20000108 	.word	0x20000108
    29fc:	20002900 	.word	0x20002900

00002a00 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2a00:	2001      	movs	r0, #1
    2a02:	4240      	negs	r0, r0
    2a04:	4770      	bx	lr
    2a06:	46c0      	nop			; (mov r8, r8)

00002a08 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2a08:	2380      	movs	r3, #128	; 0x80
    2a0a:	019b      	lsls	r3, r3, #6
    2a0c:	604b      	str	r3, [r1, #4]

	return 0;
}
    2a0e:	2000      	movs	r0, #0
    2a10:	4770      	bx	lr
    2a12:	46c0      	nop			; (mov r8, r8)

00002a14 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2a14:	2001      	movs	r0, #1
    2a16:	4770      	bx	lr

00002a18 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2a18:	2000      	movs	r0, #0
    2a1a:	4770      	bx	lr

00002a1c <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    2a1c:	b510      	push	{r4, lr}
	nwkIb.nwkSeqNum = 0;
    2a1e:	4a0d      	ldr	r2, [pc, #52]	; (2a54 <NWK_Init+0x38>)
    2a20:	2300      	movs	r3, #0
    2a22:	7113      	strb	r3, [r2, #4]
	nwkIb.macSeqNum = 0;
    2a24:	7153      	strb	r3, [r2, #5]
	nwkIb.addr = 0;
    2a26:	8013      	strh	r3, [r2, #0]
	nwkIb.lock = 0;
    2a28:	2158      	movs	r1, #88	; 0x58
    2a2a:	5253      	strh	r3, [r2, r1]
    2a2c:	0013      	movs	r3, r2
    2a2e:	3240      	adds	r2, #64	; 0x40

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    2a30:	2100      	movs	r1, #0
    2a32:	6099      	str	r1, [r3, #8]
    2a34:	3304      	adds	r3, #4
	nwkIb.nwkSeqNum = 0;
	nwkIb.macSeqNum = 0;
	nwkIb.addr = 0;
	nwkIb.lock = 0;

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    2a36:	4293      	cmp	r3, r2
    2a38:	d1fb      	bne.n	2a32 <NWK_Init+0x16>
		nwkIb.endpoint[i] = NULL;
	}

	nwkTxInit();
    2a3a:	4b07      	ldr	r3, [pc, #28]	; (2a58 <NWK_Init+0x3c>)
    2a3c:	4798      	blx	r3
	nwkRxInit();
    2a3e:	4b07      	ldr	r3, [pc, #28]	; (2a5c <NWK_Init+0x40>)
    2a40:	4798      	blx	r3
	nwkFrameInit();
    2a42:	4b07      	ldr	r3, [pc, #28]	; (2a60 <NWK_Init+0x44>)
    2a44:	4798      	blx	r3
	nwkDataReqInit();
    2a46:	4b07      	ldr	r3, [pc, #28]	; (2a64 <NWK_Init+0x48>)
    2a48:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    2a4a:	4b07      	ldr	r3, [pc, #28]	; (2a68 <NWK_Init+0x4c>)
    2a4c:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    2a4e:	4b07      	ldr	r3, [pc, #28]	; (2a6c <NWK_Init+0x50>)
    2a50:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
    2a52:	bd10      	pop	{r4, pc}
    2a54:	200007f8 	.word	0x200007f8
    2a58:	00002cf9 	.word	0x00002cf9
    2a5c:	00002bf5 	.word	0x00002bf5
    2a60:	00002a8d 	.word	0x00002a8d
    2a64:	00002a81 	.word	0x00002a81
    2a68:	00002add 	.word	0x00002add
    2a6c:	00002c35 	.word	0x00002c35

00002a70 <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    2a70:	3002      	adds	r0, #2
    2a72:	0080      	lsls	r0, r0, #2
    2a74:	4b01      	ldr	r3, [pc, #4]	; (2a7c <NWK_OpenEndpoint+0xc>)
    2a76:	50c1      	str	r1, [r0, r3]
}
    2a78:	4770      	bx	lr
    2a7a:	46c0      	nop			; (mov r8, r8)
    2a7c:	200007f8 	.word	0x200007f8

00002a80 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    2a80:	2200      	movs	r2, #0
    2a82:	4b01      	ldr	r3, [pc, #4]	; (2a88 <nwkDataReqInit+0x8>)
    2a84:	601a      	str	r2, [r3, #0]
}
    2a86:	4770      	bx	lr
    2a88:	2000010c 	.word	0x2000010c

00002a8c <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    2a8c:	4b03      	ldr	r3, [pc, #12]	; (2a9c <nwkFrameInit+0x10>)
    2a8e:	2200      	movs	r2, #0
    2a90:	701a      	strb	r2, [r3, #0]
    2a92:	218d      	movs	r1, #141	; 0x8d
    2a94:	545a      	strb	r2, [r3, r1]
    2a96:	318d      	adds	r1, #141	; 0x8d
    2a98:	545a      	strb	r2, [r3, r1]
	}
}
    2a9a:	4770      	bx	lr
    2a9c:	20000110 	.word	0x20000110

00002aa0 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    2aa0:	2800      	cmp	r0, #0
    2aa2:	d006      	beq.n	2ab2 <nwkFrameNext+0x12>
		frame = nwkFrameFrames;
	} else {
		frame++;
    2aa4:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2aa6:	4b0c      	ldr	r3, [pc, #48]	; (2ad8 <nwkFrameNext+0x38>)
    2aa8:	33a8      	adds	r3, #168	; 0xa8
    2aaa:	33ff      	adds	r3, #255	; 0xff
    2aac:	4298      	cmp	r0, r3
    2aae:	d301      	bcc.n	2ab4 <nwkFrameNext+0x14>
    2ab0:	e00f      	b.n	2ad2 <nwkFrameNext+0x32>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
    2ab2:	4809      	ldr	r0, [pc, #36]	; (2ad8 <nwkFrameNext+0x38>)
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2ab4:	7803      	ldrb	r3, [r0, #0]
    2ab6:	2b00      	cmp	r3, #0
    2ab8:	d10c      	bne.n	2ad4 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2aba:	4a07      	ldr	r2, [pc, #28]	; (2ad8 <nwkFrameNext+0x38>)
    2abc:	32a8      	adds	r2, #168	; 0xa8
    2abe:	32ff      	adds	r2, #255	; 0xff
    2ac0:	e002      	b.n	2ac8 <nwkFrameNext+0x28>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2ac2:	7803      	ldrb	r3, [r0, #0]
    2ac4:	2b00      	cmp	r3, #0
    2ac6:	d105      	bne.n	2ad4 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2ac8:	308d      	adds	r0, #141	; 0x8d
    2aca:	4290      	cmp	r0, r2
    2acc:	d3f9      	bcc.n	2ac2 <nwkFrameNext+0x22>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    2ace:	2000      	movs	r0, #0
    2ad0:	e000      	b.n	2ad4 <nwkFrameNext+0x34>
    2ad2:	2000      	movs	r0, #0
}
    2ad4:	4770      	bx	lr
    2ad6:	46c0      	nop			; (mov r8, r8)
    2ad8:	20000110 	.word	0x20000110

00002adc <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    2adc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ade:	4b09      	ldr	r3, [pc, #36]	; (2b04 <nwkRouteInit+0x28>)
    2ae0:	3302      	adds	r3, #2
    2ae2:	2200      	movs	r2, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2ae4:	2701      	movs	r7, #1
    2ae6:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    2ae8:	4c06      	ldr	r4, [pc, #24]	; (2b04 <nwkRouteInit+0x28>)
    2aea:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    2aec:	2500      	movs	r5, #0
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2aee:	801f      	strh	r7, [r3, #0]
		nwkRouteTable[i].fixed = 0;
    2af0:	00d0      	lsls	r0, r2, #3
    2af2:	5d01      	ldrb	r1, [r0, r4]
    2af4:	43b1      	bics	r1, r6
    2af6:	5501      	strb	r1, [r0, r4]
		nwkRouteTable[i].rank = 0;
    2af8:	711d      	strb	r5, [r3, #4]
    2afa:	3201      	adds	r2, #1
    2afc:	3308      	adds	r3, #8
/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2afe:	2a64      	cmp	r2, #100	; 0x64
    2b00:	d1f5      	bne.n	2aee <nwkRouteInit+0x12>
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
		nwkRouteTable[i].fixed = 0;
		nwkRouteTable[i].rank = 0;
	}
}
    2b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b04:	200002b8 	.word	0x200002b8

00002b08 <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    2b08:	b570      	push	{r4, r5, r6, lr}
    2b0a:	4a0b      	ldr	r2, [pc, #44]	; (2b38 <NWK_RouteFindEntry+0x30>)
    2b0c:	3202      	adds	r2, #2
    2b0e:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    2b10:	4e09      	ldr	r6, [pc, #36]	; (2b38 <NWK_RouteFindEntry+0x30>)
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    2b12:	8814      	ldrh	r4, [r2, #0]
    2b14:	4284      	cmp	r4, r0
    2b16:	d109      	bne.n	2b2c <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
    2b18:	00dc      	lsls	r4, r3, #3
    2b1a:	5da4      	ldrb	r4, [r4, r6]
    2b1c:	07a4      	lsls	r4, r4, #30
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    2b1e:	0fe4      	lsrs	r4, r4, #31
    2b20:	428c      	cmp	r4, r1
    2b22:	d103      	bne.n	2b2c <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
    2b24:	00dd      	lsls	r5, r3, #3
    2b26:	4804      	ldr	r0, [pc, #16]	; (2b38 <NWK_RouteFindEntry+0x30>)
    2b28:	1940      	adds	r0, r0, r5
    2b2a:	e004      	b.n	2b36 <NWK_RouteFindEntry+0x2e>
    2b2c:	3301      	adds	r3, #1
    2b2e:	3208      	adds	r2, #8

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2b30:	2b64      	cmp	r3, #100	; 0x64
    2b32:	d1ee      	bne.n	2b12 <NWK_RouteFindEntry+0xa>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
		}
	}

	return NULL;
    2b34:	2000      	movs	r0, #0
}
    2b36:	bd70      	pop	{r4, r5, r6, pc}
    2b38:	200002b8 	.word	0x200002b8

00002b3c <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    2b3c:	7803      	ldrb	r3, [r0, #0]
    2b3e:	07db      	lsls	r3, r3, #31
    2b40:	d404      	bmi.n	2b4c <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    2b42:	2301      	movs	r3, #1
    2b44:	425b      	negs	r3, r3
    2b46:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    2b48:	2300      	movs	r3, #0
    2b4a:	7183      	strb	r3, [r0, #6]
}
    2b4c:	4770      	bx	lr
    2b4e:	46c0      	nop			; (mov r8, r8)

00002b50 <nwkRouteRemove>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    2b50:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    2b52:	4b03      	ldr	r3, [pc, #12]	; (2b60 <nwkRouteRemove+0x10>)
    2b54:	4798      	blx	r3
	if (entry) {
    2b56:	2800      	cmp	r0, #0
    2b58:	d001      	beq.n	2b5e <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    2b5a:	4b02      	ldr	r3, [pc, #8]	; (2b64 <nwkRouteRemove+0x14>)
    2b5c:	4798      	blx	r3
	}
}
    2b5e:	bd10      	pop	{r4, pc}
    2b60:	00002b09 	.word	0x00002b09
    2b64:	00002b3d 	.word	0x00002b3d

00002b68 <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    2b68:	b510      	push	{r4, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2b6a:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2b6c:	2300      	movs	r3, #0
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2b6e:	2a06      	cmp	r2, #6
    2b70:	d108      	bne.n	2b84 <nwkRouteErrorReceived+0x1c>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    2b72:	6882      	ldr	r2, [r0, #8]

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
    2b74:	7951      	ldrb	r1, [r2, #5]
    2b76:	78d3      	ldrb	r3, [r2, #3]
    2b78:	7910      	ldrb	r0, [r2, #4]
    2b7a:	0200      	lsls	r0, r0, #8
    2b7c:	4318      	orrs	r0, r3
    2b7e:	4b02      	ldr	r3, [pc, #8]	; (2b88 <nwkRouteErrorReceived+0x20>)
    2b80:	4798      	blx	r3

	return true;
    2b82:	2301      	movs	r3, #1
}
    2b84:	0018      	movs	r0, r3
    2b86:	bd10      	pop	{r4, pc}
    2b88:	00002b51 	.word	0x00002b51

00002b8c <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    2b8c:	b510      	push	{r4, lr}
	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
		return false;
	}
#endif

	if (ind->size < 1) {
    2b8e:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2b90:	2300      	movs	r3, #0
	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
		return false;
	}
#endif

	if (ind->size < 1) {
    2b92:	2a00      	cmp	r2, #0
    2b94:	d00f      	beq.n	2bb6 <nwkRxSeriveDataInd+0x2a>
		return false;
	}

	switch (ind->data[0]) {
    2b96:	6883      	ldr	r3, [r0, #8]
    2b98:	781b      	ldrb	r3, [r3, #0]
    2b9a:	2b00      	cmp	r3, #0
    2b9c:	d002      	beq.n	2ba4 <nwkRxSeriveDataInd+0x18>
    2b9e:	2b01      	cmp	r3, #1
    2ba0:	d004      	beq.n	2bac <nwkRxSeriveDataInd+0x20>
    2ba2:	e007      	b.n	2bb4 <nwkRxSeriveDataInd+0x28>
	case NWK_COMMAND_ACK:
		return nwkTxAckReceived(ind);
    2ba4:	4b05      	ldr	r3, [pc, #20]	; (2bbc <nwkRxSeriveDataInd+0x30>)
    2ba6:	4798      	blx	r3
    2ba8:	0003      	movs	r3, r0
    2baa:	e004      	b.n	2bb6 <nwkRxSeriveDataInd+0x2a>

#ifdef NWK_ENABLE_ROUTING
	case NWK_COMMAND_ROUTE_ERROR:
		return nwkRouteErrorReceived(ind);
    2bac:	4b04      	ldr	r3, [pc, #16]	; (2bc0 <nwkRxSeriveDataInd+0x34>)
    2bae:	4798      	blx	r3
    2bb0:	0003      	movs	r3, r0
    2bb2:	e000      	b.n	2bb6 <nwkRxSeriveDataInd+0x2a>
	case NWK_COMMAND_ROUTE_REPLY:
		return nwkRouteDiscoveryReplyReceived(ind);
#endif

	default:
		return false;
    2bb4:	2300      	movs	r3, #0
	}
}
    2bb6:	0018      	movs	r0, r3
    2bb8:	bd10      	pop	{r4, pc}
    2bba:	46c0      	nop			; (mov r8, r8)
    2bbc:	00002d2d 	.word	0x00002d2d
    2bc0:	00002b69 	.word	0x00002b69

00002bc4 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    2bc4:	b570      	push	{r4, r5, r6, lr}
    2bc6:	4909      	ldr	r1, [pc, #36]	; (2bec <nwkRxDuplicateRejectionTimerHandler+0x28>)
    2bc8:	1d0b      	adds	r3, r1, #4
    2bca:	3140      	adds	r1, #64	; 0x40
	bool restart = false;
    2bcc:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
    2bce:	2501      	movs	r5, #1
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    2bd0:	781a      	ldrb	r2, [r3, #0]
    2bd2:	2a00      	cmp	r2, #0
    2bd4:	d002      	beq.n	2bdc <nwkRxDuplicateRejectionTimerHandler+0x18>
			nwkRxDuplicateRejectionTable[i].ttl--;
    2bd6:	3a01      	subs	r2, #1
    2bd8:	701a      	strb	r2, [r3, #0]
			restart = true;
    2bda:	002c      	movs	r4, r5
    2bdc:	3306      	adds	r3, #6
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2bde:	428b      	cmp	r3, r1
    2be0:	d1f6      	bne.n	2bd0 <nwkRxDuplicateRejectionTimerHandler+0xc>
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
		}
	}

	if (restart) {
    2be2:	2c00      	cmp	r4, #0
    2be4:	d001      	beq.n	2bea <nwkRxDuplicateRejectionTimerHandler+0x26>
		SYS_TimerStart(timer);
    2be6:	4b02      	ldr	r3, [pc, #8]	; (2bf0 <nwkRxDuplicateRejectionTimerHandler+0x2c>)
    2be8:	4798      	blx	r3
	}
}
    2bea:	bd70      	pop	{r4, r5, r6, pc}
    2bec:	200005d8 	.word	0x200005d8
    2bf0:	00002ec9 	.word	0x00002ec9

00002bf4 <nwkRxInit>:

/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    2bf4:	b510      	push	{r4, lr}
    2bf6:	4a0a      	ldr	r2, [pc, #40]	; (2c20 <nwkRxInit+0x2c>)
    2bf8:	1d13      	adds	r3, r2, #4
    2bfa:	3240      	adds	r2, #64	; 0x40
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    2bfc:	2100      	movs	r1, #0
    2bfe:	7019      	strb	r1, [r3, #0]
    2c00:	3306      	adds	r3, #6
/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2c02:	4293      	cmp	r3, r2
    2c04:	d1fb      	bne.n	2bfe <nwkRxInit+0xa>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
	}

	nwkRxDuplicateRejectionTimer.interval
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    2c06:	4b07      	ldr	r3, [pc, #28]	; (2c24 <nwkRxInit+0x30>)
    2c08:	2264      	movs	r2, #100	; 0x64
    2c0a:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2c0c:	2200      	movs	r2, #0
    2c0e:	731a      	strb	r2, [r3, #12]
	nwkRxDuplicateRejectionTimer.handler
		= nwkRxDuplicateRejectionTimerHandler;
    2c10:	4a05      	ldr	r2, [pc, #20]	; (2c28 <nwkRxInit+0x34>)
    2c12:	611a      	str	r2, [r3, #16]

	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    2c14:	4905      	ldr	r1, [pc, #20]	; (2c2c <nwkRxInit+0x38>)
    2c16:	2000      	movs	r0, #0
    2c18:	4b05      	ldr	r3, [pc, #20]	; (2c30 <nwkRxInit+0x3c>)
    2c1a:	4798      	blx	r3
}
    2c1c:	bd10      	pop	{r4, pc}
    2c1e:	46c0      	nop			; (mov r8, r8)
    2c20:	200005d8 	.word	0x200005d8
    2c24:	20000614 	.word	0x20000614
    2c28:	00002bc5 	.word	0x00002bc5
    2c2c:	00002b8d 	.word	0x00002b8d
    2c30:	00002a71 	.word	0x00002a71

00002c34 <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    2c34:	2300      	movs	r3, #0
    2c36:	4a02      	ldr	r2, [pc, #8]	; (2c40 <nwkSecurityInit+0xc>)
    2c38:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    2c3a:	4a02      	ldr	r2, [pc, #8]	; (2c44 <nwkSecurityInit+0x10>)
    2c3c:	6013      	str	r3, [r2, #0]
}
    2c3e:	4770      	bx	lr
    2c40:	20000628 	.word	0x20000628
    2c44:	2000062c 	.word	0x2000062c

00002c48 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    2c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c4a:	b083      	sub	sp, #12
    2c4c:	9001      	str	r0, [sp, #4]
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2c4e:	2400      	movs	r4, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    2c50:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2c52:	4d10      	ldr	r5, [pc, #64]	; (2c94 <nwkTxDelayTimerHandler+0x4c>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2c54:	2686      	movs	r6, #134	; 0x86
    2c56:	2787      	movs	r7, #135	; 0x87
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2c58:	e012      	b.n	2c80 <nwkTxDelayTimerHandler+0x38>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    2c5a:	7803      	ldrb	r3, [r0, #0]
    2c5c:	2b11      	cmp	r3, #17
    2c5e:	d10f      	bne.n	2c80 <nwkTxDelayTimerHandler+0x38>
			restart = true;

			if (0 == --frame->tx.timeout) {
    2c60:	5d82      	ldrb	r2, [r0, r6]
    2c62:	5dc3      	ldrb	r3, [r0, r7]
    2c64:	021b      	lsls	r3, r3, #8
    2c66:	4313      	orrs	r3, r2
    2c68:	3b01      	subs	r3, #1
    2c6a:	b29b      	uxth	r3, r3
    2c6c:	5583      	strb	r3, [r0, r6]
    2c6e:	0a19      	lsrs	r1, r3, #8
    2c70:	0002      	movs	r2, r0
    2c72:	3286      	adds	r2, #134	; 0x86
    2c74:	7051      	strb	r1, [r2, #1]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;
    2c76:	2401      	movs	r4, #1

			if (0 == --frame->tx.timeout) {
    2c78:	2b00      	cmp	r3, #0
    2c7a:	d101      	bne.n	2c80 <nwkTxDelayTimerHandler+0x38>
				frame->state = NWK_TX_STATE_SEND;
    2c7c:	3313      	adds	r3, #19
    2c7e:	7003      	strb	r3, [r0, #0]
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2c80:	47a8      	blx	r5
    2c82:	2800      	cmp	r0, #0
    2c84:	d1e9      	bne.n	2c5a <nwkTxDelayTimerHandler+0x12>
				frame->state = NWK_TX_STATE_SEND;
			}
		}
	}

	if (restart) {
    2c86:	2c00      	cmp	r4, #0
    2c88:	d002      	beq.n	2c90 <nwkTxDelayTimerHandler+0x48>
		SYS_TimerStart(timer);
    2c8a:	9801      	ldr	r0, [sp, #4]
    2c8c:	4b02      	ldr	r3, [pc, #8]	; (2c98 <nwkTxDelayTimerHandler+0x50>)
    2c8e:	4798      	blx	r3
	}
}
    2c90:	b003      	add	sp, #12
    2c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c94:	00002aa1 	.word	0x00002aa1
    2c98:	00002ec9 	.word	0x00002ec9

00002c9c <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    2c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c9e:	b083      	sub	sp, #12
    2ca0:	9001      	str	r0, [sp, #4]
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2ca2:	2400      	movs	r4, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    2ca4:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2ca6:	4d12      	ldr	r5, [pc, #72]	; (2cf0 <nwkTxAckWaitTimerHandler+0x54>)
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2ca8:	2686      	movs	r6, #134	; 0x86
    2caa:	2787      	movs	r7, #135	; 0x87
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2cac:	e015      	b.n	2cda <nwkTxAckWaitTimerHandler+0x3e>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    2cae:	7803      	ldrb	r3, [r0, #0]
    2cb0:	2b16      	cmp	r3, #22
    2cb2:	d112      	bne.n	2cda <nwkTxAckWaitTimerHandler+0x3e>
			restart = true;

			if (0 == --frame->tx.timeout) {
    2cb4:	5d82      	ldrb	r2, [r0, r6]
    2cb6:	5dc3      	ldrb	r3, [r0, r7]
    2cb8:	021b      	lsls	r3, r3, #8
    2cba:	4313      	orrs	r3, r2
    2cbc:	3b01      	subs	r3, #1
    2cbe:	b29b      	uxth	r3, r3
    2cc0:	5583      	strb	r3, [r0, r6]
    2cc2:	0a19      	lsrs	r1, r3, #8
    2cc4:	0002      	movs	r2, r0
    2cc6:	3286      	adds	r2, #134	; 0x86
    2cc8:	7051      	strb	r1, [r2, #1]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;
    2cca:	2401      	movs	r4, #1

			if (0 == --frame->tx.timeout) {
    2ccc:	2b00      	cmp	r3, #0
    2cce:	d104      	bne.n	2cda <nwkTxAckWaitTimerHandler+0x3e>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    2cd0:	3317      	adds	r3, #23
    2cd2:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    2cd4:	2210      	movs	r2, #16
    2cd6:	336e      	adds	r3, #110	; 0x6e
    2cd8:	54c2      	strb	r2, [r0, r3]
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2cda:	47a8      	blx	r5
    2cdc:	2800      	cmp	r0, #0
    2cde:	d1e6      	bne.n	2cae <nwkTxAckWaitTimerHandler+0x12>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
			}
		}
	}

	if (restart) {
    2ce0:	2c00      	cmp	r4, #0
    2ce2:	d002      	beq.n	2cea <nwkTxAckWaitTimerHandler+0x4e>
		SYS_TimerStart(timer);
    2ce4:	9801      	ldr	r0, [sp, #4]
    2ce6:	4b03      	ldr	r3, [pc, #12]	; (2cf4 <nwkTxAckWaitTimerHandler+0x58>)
    2ce8:	4798      	blx	r3
	}
}
    2cea:	b003      	add	sp, #12
    2cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cee:	46c0      	nop			; (mov r8, r8)
    2cf0:	00002aa1 	.word	0x00002aa1
    2cf4:	00002ec9 	.word	0x00002ec9

00002cf8 <nwkTxInit>:
/*************************************************************************//**
*  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
	nwkTxPhyActiveFrame = NULL;
    2cf8:	2200      	movs	r2, #0
    2cfa:	4b07      	ldr	r3, [pc, #28]	; (2d18 <nwkTxInit+0x20>)
    2cfc:	601a      	str	r2, [r3, #0]

	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    2cfe:	4b07      	ldr	r3, [pc, #28]	; (2d1c <nwkTxInit+0x24>)
    2d00:	2132      	movs	r1, #50	; 0x32
    2d02:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2d04:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    2d06:	4906      	ldr	r1, [pc, #24]	; (2d20 <nwkTxInit+0x28>)
    2d08:	6119      	str	r1, [r3, #16]

	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    2d0a:	4b06      	ldr	r3, [pc, #24]	; (2d24 <nwkTxInit+0x2c>)
    2d0c:	210a      	movs	r1, #10
    2d0e:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2d10:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    2d12:	4a05      	ldr	r2, [pc, #20]	; (2d28 <nwkTxInit+0x30>)
    2d14:	611a      	str	r2, [r3, #16]
}
    2d16:	4770      	bx	lr
    2d18:	20000644 	.word	0x20000644
    2d1c:	20000630 	.word	0x20000630
    2d20:	00002c9d 	.word	0x00002c9d
    2d24:	20000648 	.word	0x20000648
    2d28:	00002c49 	.word	0x00002c49

00002d2c <nwkTxAckReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    2d2c:	b570      	push	{r4, r5, r6, lr}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    2d2e:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2d30:	2300      	movs	r3, #0
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    2d32:	2a03      	cmp	r2, #3
    2d34:	d115      	bne.n	2d62 <nwkTxAckReceived+0x36>
    2d36:	e00d      	b.n	2d54 <nwkTxAckReceived+0x28>
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    2d38:	7803      	ldrb	r3, [r0, #0]
    2d3a:	2b16      	cmp	r3, #22
    2d3c:	d10d      	bne.n	2d5a <nwkTxAckReceived+0x2e>
    2d3e:	7b02      	ldrb	r2, [r0, #12]
    2d40:	786b      	ldrb	r3, [r5, #1]
    2d42:	429a      	cmp	r2, r3
    2d44:	d109      	bne.n	2d5a <nwkTxAckReceived+0x2e>
				frame->header.nwkSeq == command->seq) {
			frame->state = NWK_TX_STATE_CONFIRM;
    2d46:	2317      	movs	r3, #23
    2d48:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    2d4a:	78aa      	ldrb	r2, [r5, #2]
    2d4c:	3371      	adds	r3, #113	; 0x71
    2d4e:	54c2      	strb	r2, [r0, r3]
			return true;
    2d50:	3b87      	subs	r3, #135	; 0x87
    2d52:	e006      	b.n	2d62 <nwkTxAckReceived+0x36>

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    2d54:	6885      	ldr	r5, [r0, #8]
    2d56:	2000      	movs	r0, #0

	if (sizeof(NwkCommandAck_t) != ind->size) {
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    2d58:	4c03      	ldr	r4, [pc, #12]	; (2d68 <nwkTxAckReceived+0x3c>)
    2d5a:	47a0      	blx	r4
    2d5c:	2800      	cmp	r0, #0
    2d5e:	d1eb      	bne.n	2d38 <nwkTxAckReceived+0xc>
			frame->tx.control = command->control;
			return true;
		}
	}

	return false;
    2d60:	2300      	movs	r3, #0
}
    2d62:	0018      	movs	r0, r3
    2d64:	bd70      	pop	{r4, r5, r6, pc}
    2d66:	46c0      	nop			; (mov r8, r8)
    2d68:	00002aa1 	.word	0x00002aa1

00002d6c <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    2d6c:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    2d6e:	4b0e      	ldr	r3, [pc, #56]	; (2da8 <PHY_Init+0x3c>)
    2d70:	4798      	blx	r3
	PhyReset();
    2d72:	4b0e      	ldr	r3, [pc, #56]	; (2dac <PHY_Init+0x40>)
    2d74:	4798      	blx	r3
	phyRxState = false;
    2d76:	2200      	movs	r2, #0
    2d78:	4b0d      	ldr	r3, [pc, #52]	; (2db0 <PHY_Init+0x44>)
    2d7a:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    2d7c:	3201      	adds	r2, #1
    2d7e:	4b0d      	ldr	r3, [pc, #52]	; (2db4 <PHY_Init+0x48>)
    2d80:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2d82:	4e0d      	ldr	r6, [pc, #52]	; (2db8 <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2d84:	4d0d      	ldr	r5, [pc, #52]	; (2dbc <PHY_Init+0x50>)
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2d86:	241f      	movs	r4, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2d88:	2108      	movs	r1, #8
    2d8a:	2002      	movs	r0, #2
    2d8c:	47b0      	blx	r6
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2d8e:	2001      	movs	r0, #1
    2d90:	47a8      	blx	r5
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2d92:	4020      	ands	r0, r4
    2d94:	2808      	cmp	r0, #8
    2d96:	d1f7      	bne.n	2d88 <PHY_Init+0x1c>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2d98:	212e      	movs	r1, #46	; 0x2e
    2d9a:	3804      	subs	r0, #4
    2d9c:	4c06      	ldr	r4, [pc, #24]	; (2db8 <PHY_Init+0x4c>)
    2d9e:	47a0      	blx	r4
    2da0:	21a0      	movs	r1, #160	; 0xa0
    2da2:	200c      	movs	r0, #12
    2da4:	47a0      	blx	r4
			(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
			(1 << IRQ_MASK_MODE));

	phyWriteRegister(TRX_CTRL_2_REG,
			(1 << RX_SAFE_MODE) | (1 << OQPSK_SCRAM_EN));
}
    2da6:	bd70      	pop	{r4, r5, r6, pc}
    2da8:	0000308d 	.word	0x0000308d
    2dac:	000031a9 	.word	0x000031a9
    2db0:	2000065d 	.word	0x2000065d
    2db4:	2000065c 	.word	0x2000065c
    2db8:	000032d5 	.word	0x000032d5
    2dbc:	000031d9 	.word	0x000031d9

00002dc0 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    2dc0:	b510      	push	{r4, lr}
	SYS_TimerInit();
    2dc2:	4b04      	ldr	r3, [pc, #16]	; (2dd4 <SYS_Init+0x14>)
    2dc4:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    2dc6:	4b04      	ldr	r3, [pc, #16]	; (2dd8 <SYS_Init+0x18>)
    2dc8:	4798      	blx	r3
#endif
	PHY_Init();
    2dca:	4b04      	ldr	r3, [pc, #16]	; (2ddc <SYS_Init+0x1c>)
    2dcc:	4798      	blx	r3
	NWK_Init();
    2dce:	4b04      	ldr	r3, [pc, #16]	; (2de0 <SYS_Init+0x20>)
    2dd0:	4798      	blx	r3
}
    2dd2:	bd10      	pop	{r4, pc}
    2dd4:	00002e61 	.word	0x00002e61
    2dd8:	0000306d 	.word	0x0000306d
    2ddc:	00002d6d 	.word	0x00002d6d
    2de0:	00002a1d 	.word	0x00002a1d

00002de4 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    2de4:	b530      	push	{r4, r5, lr}
	if (timers) {
    2de6:	4b15      	ldr	r3, [pc, #84]	; (2e3c <placeTimer+0x58>)
    2de8:	681d      	ldr	r5, [r3, #0]
    2dea:	2d00      	cmp	r5, #0
    2dec:	d01e      	beq.n	2e2c <placeTimer+0x48>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    2dee:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    2df0:	6869      	ldr	r1, [r5, #4]
    2df2:	428a      	cmp	r2, r1
    2df4:	d305      	bcc.n	2e02 <placeTimer+0x1e>
    2df6:	002c      	movs	r4, r5
    2df8:	e009      	b.n	2e0e <placeTimer+0x2a>
    2dfa:	6859      	ldr	r1, [r3, #4]
    2dfc:	4291      	cmp	r1, r2
    2dfe:	d905      	bls.n	2e0c <placeTimer+0x28>
    2e00:	e001      	b.n	2e06 <placeTimer+0x22>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2e02:	002b      	movs	r3, r5
/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
    2e04:	2400      	movs	r4, #0
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
				t->timeout -= timeout;
    2e06:	1a89      	subs	r1, r1, r2
    2e08:	6059      	str	r1, [r3, #4]
				break;
    2e0a:	e004      	b.n	2e16 <placeTimer+0x32>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2e0c:	001c      	movs	r4, r3
			if (timeout < t->timeout) {
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    2e0e:	1a52      	subs	r2, r2, r1
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2e10:	6823      	ldr	r3, [r4, #0]
    2e12:	2b00      	cmp	r3, #0
    2e14:	d1f1      	bne.n	2dfa <placeTimer+0x16>
			}

			prev = t;
		}

		timer->timeout = timeout;
    2e16:	6042      	str	r2, [r0, #4]

		if (prev) {
    2e18:	2c00      	cmp	r4, #0
    2e1a:	d003      	beq.n	2e24 <placeTimer+0x40>
			timer->next = prev->next;
    2e1c:	6823      	ldr	r3, [r4, #0]
    2e1e:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    2e20:	6020      	str	r0, [r4, #0]
    2e22:	e009      	b.n	2e38 <placeTimer+0x54>
		} else {
			timer->next = timers;
    2e24:	6005      	str	r5, [r0, #0]
			timers = timer;
    2e26:	4b05      	ldr	r3, [pc, #20]	; (2e3c <placeTimer+0x58>)
    2e28:	6018      	str	r0, [r3, #0]
    2e2a:	e005      	b.n	2e38 <placeTimer+0x54>
		}
	} else {
		timer->next = NULL;
    2e2c:	2300      	movs	r3, #0
    2e2e:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    2e30:	6883      	ldr	r3, [r0, #8]
    2e32:	6043      	str	r3, [r0, #4]
		timers = timer;
    2e34:	4b01      	ldr	r3, [pc, #4]	; (2e3c <placeTimer+0x58>)
    2e36:	6018      	str	r0, [r3, #0]
	}
}
    2e38:	bd30      	pop	{r4, r5, pc}
    2e3a:	46c0      	nop			; (mov r8, r8)
    2e3c:	20000660 	.word	0x20000660

00002e40 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    2e40:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    2e42:	4a04      	ldr	r2, [pc, #16]	; (2e54 <SYS_HwExpiry_Cb+0x14>)
    2e44:	7813      	ldrb	r3, [r2, #0]
    2e46:	3301      	adds	r3, #1
    2e48:	b2db      	uxtb	r3, r3
    2e4a:	7013      	strb	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2e4c:	4802      	ldr	r0, [pc, #8]	; (2e58 <SYS_HwExpiry_Cb+0x18>)
    2e4e:	4b03      	ldr	r3, [pc, #12]	; (2e5c <SYS_HwExpiry_Cb+0x1c>)
    2e50:	4798      	blx	r3
}
    2e52:	bd10      	pop	{r4, pc}
    2e54:	20000854 	.word	0x20000854
    2e58:	00002710 	.word	0x00002710
    2e5c:	00003491 	.word	0x00003491

00002e60 <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    2e60:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    2e62:	2400      	movs	r4, #0
    2e64:	4b06      	ldr	r3, [pc, #24]	; (2e80 <SYS_TimerInit+0x20>)
    2e66:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    2e68:	4806      	ldr	r0, [pc, #24]	; (2e84 <SYS_TimerInit+0x24>)
    2e6a:	4b07      	ldr	r3, [pc, #28]	; (2e88 <SYS_TimerInit+0x28>)
    2e6c:	4798      	blx	r3
	common_tc_init();
    2e6e:	4b07      	ldr	r3, [pc, #28]	; (2e8c <SYS_TimerInit+0x2c>)
    2e70:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2e72:	4807      	ldr	r0, [pc, #28]	; (2e90 <SYS_TimerInit+0x30>)
    2e74:	4b07      	ldr	r3, [pc, #28]	; (2e94 <SYS_TimerInit+0x34>)
    2e76:	4798      	blx	r3
	timers = NULL;
    2e78:	4b07      	ldr	r3, [pc, #28]	; (2e98 <SYS_TimerInit+0x38>)
    2e7a:	601c      	str	r4, [r3, #0]
}
    2e7c:	bd10      	pop	{r4, pc}
    2e7e:	46c0      	nop			; (mov r8, r8)
    2e80:	20000854 	.word	0x20000854
    2e84:	00002e41 	.word	0x00002e41
    2e88:	00003581 	.word	0x00003581
    2e8c:	000034fd 	.word	0x000034fd
    2e90:	00002710 	.word	0x00002710
    2e94:	00003491 	.word	0x00003491
    2e98:	20000660 	.word	0x20000660

00002e9c <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2e9c:	4b09      	ldr	r3, [pc, #36]	; (2ec4 <SYS_TimerStarted+0x28>)
    2e9e:	681b      	ldr	r3, [r3, #0]
    2ea0:	2b00      	cmp	r3, #0
    2ea2:	d009      	beq.n	2eb8 <SYS_TimerStarted+0x1c>
		if (t == timer) {
    2ea4:	4283      	cmp	r3, r0
    2ea6:	d102      	bne.n	2eae <SYS_TimerStarted+0x12>
    2ea8:	e008      	b.n	2ebc <SYS_TimerStarted+0x20>
    2eaa:	4298      	cmp	r0, r3
    2eac:	d008      	beq.n	2ec0 <SYS_TimerStarted+0x24>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2eae:	681b      	ldr	r3, [r3, #0]
    2eb0:	2b00      	cmp	r3, #0
    2eb2:	d1fa      	bne.n	2eaa <SYS_TimerStarted+0xe>
		if (t == timer) {
			return true;
		}
	}
	return false;
    2eb4:	2000      	movs	r0, #0
    2eb6:	e004      	b.n	2ec2 <SYS_TimerStarted+0x26>
    2eb8:	2000      	movs	r0, #0
    2eba:	e002      	b.n	2ec2 <SYS_TimerStarted+0x26>
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    2ebc:	2001      	movs	r0, #1
    2ebe:	e000      	b.n	2ec2 <SYS_TimerStarted+0x26>
    2ec0:	2001      	movs	r0, #1
		}
	}
	return false;
}
    2ec2:	4770      	bx	lr
    2ec4:	20000660 	.word	0x20000660

00002ec8 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    2ec8:	b510      	push	{r4, lr}
    2eca:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    2ecc:	4b03      	ldr	r3, [pc, #12]	; (2edc <SYS_TimerStart+0x14>)
    2ece:	4798      	blx	r3
    2ed0:	2800      	cmp	r0, #0
    2ed2:	d102      	bne.n	2eda <SYS_TimerStart+0x12>
		placeTimer(timer);
    2ed4:	0020      	movs	r0, r4
    2ed6:	4b02      	ldr	r3, [pc, #8]	; (2ee0 <SYS_TimerStart+0x18>)
    2ed8:	4798      	blx	r3
	}
}
    2eda:	bd10      	pop	{r4, pc}
    2edc:	00002e9d 	.word	0x00002e9d
    2ee0:	00002de5 	.word	0x00002de5

00002ee4 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    2ee4:	b510      	push	{r4, lr}
	tmr_cca_callback();
    2ee6:	4b01      	ldr	r3, [pc, #4]	; (2eec <tc_cca_callback+0x8>)
    2ee8:	4798      	blx	r3
}
    2eea:	bd10      	pop	{r4, pc}
    2eec:	00003565 	.word	0x00003565

00002ef0 <tc_ovf_callback>:
{
	cpu_irq_restore((uint32_t)flags);
}

static void tc_ovf_callback(struct tc_module *const module_instance)
{
    2ef0:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    2ef2:	4b01      	ldr	r3, [pc, #4]	; (2ef8 <tc_ovf_callback+0x8>)
    2ef4:	4798      	blx	r3
}
    2ef6:	bd10      	pop	{r4, pc}
    2ef8:	0000351d 	.word	0x0000351d

00002efc <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
    2efc:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    2efe:	4802      	ldr	r0, [pc, #8]	; (2f08 <tmr_read_count+0xc>)
    2f00:	4b02      	ldr	r3, [pc, #8]	; (2f0c <tmr_read_count+0x10>)
    2f02:	4798      	blx	r3
    2f04:	b280      	uxth	r0, r0
}
    2f06:	bd10      	pop	{r4, pc}
    2f08:	2000088c 	.word	0x2000088c
    2f0c:	000027cd 	.word	0x000027cd

00002f10 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    2f10:	4b03      	ldr	r3, [pc, #12]	; (2f20 <tmr_disable_cc_interrupt+0x10>)
    2f12:	2110      	movs	r1, #16
    2f14:	681a      	ldr	r2, [r3, #0]
    2f16:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    2f18:	7e5a      	ldrb	r2, [r3, #25]
    2f1a:	438a      	bics	r2, r1
    2f1c:	765a      	strb	r2, [r3, #25]
/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    2f1e:	4770      	bx	lr
    2f20:	2000088c 	.word	0x2000088c

00002f24 <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
    2f24:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2f26:	4c0a      	ldr	r4, [pc, #40]	; (2f50 <tmr_enable_cc_interrupt+0x2c>)
    2f28:	6820      	ldr	r0, [r4, #0]
    2f2a:	4b0a      	ldr	r3, [pc, #40]	; (2f54 <tmr_enable_cc_interrupt+0x30>)
    2f2c:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2f2e:	4b0a      	ldr	r3, [pc, #40]	; (2f58 <tmr_enable_cc_interrupt+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2f30:	5c1b      	ldrb	r3, [r3, r0]
    2f32:	221f      	movs	r2, #31
    2f34:	401a      	ands	r2, r3
    2f36:	2301      	movs	r3, #1
    2f38:	4093      	lsls	r3, r2
    2f3a:	4a08      	ldr	r2, [pc, #32]	; (2f5c <tmr_enable_cc_interrupt+0x38>)
    2f3c:	6013      	str	r3, [r2, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2f3e:	7e62      	ldrb	r2, [r4, #25]
    2f40:	2310      	movs	r3, #16
    2f42:	4313      	orrs	r3, r2
    2f44:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2f46:	6823      	ldr	r3, [r4, #0]
    2f48:	2210      	movs	r2, #16
    2f4a:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    2f4c:	bd10      	pop	{r4, pc}
    2f4e:	46c0      	nop			; (mov r8, r8)
    2f50:	2000088c 	.word	0x2000088c
    2f54:	00002519 	.word	0x00002519
    2f58:	00008ba0 	.word	0x00008ba0
    2f5c:	e000e100 	.word	0xe000e100

00002f60 <tmr_write_cmpreg>:
}

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
    2f60:	b510      	push	{r4, lr}
    2f62:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    2f64:	2100      	movs	r1, #0
    2f66:	4802      	ldr	r0, [pc, #8]	; (2f70 <tmr_write_cmpreg+0x10>)
    2f68:	4b02      	ldr	r3, [pc, #8]	; (2f74 <tmr_write_cmpreg+0x14>)
    2f6a:	4798      	blx	r3
			(uint32_t)compare_value);
}
    2f6c:	bd10      	pop	{r4, pc}
    2f6e:	46c0      	nop			; (mov r8, r8)
    2f70:	2000088c 	.word	0x2000088c
    2f74:	000027fd 	.word	0x000027fd

00002f78 <tmr_init>:
}

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    2f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f7a:	464f      	mov	r7, r9
    2f7c:	4646      	mov	r6, r8
    2f7e:	b4c0      	push	{r6, r7}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    2f80:	4a2d      	ldr	r2, [pc, #180]	; (3038 <tmr_init+0xc0>)
    2f82:	2300      	movs	r3, #0
    2f84:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    2f86:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    2f88:	2100      	movs	r1, #0
    2f8a:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    2f8c:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2f8e:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2f90:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2f92:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2f94:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2f96:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2f98:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    2f9a:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2f9c:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2f9e:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2fa0:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2fa2:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2fa4:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2fa6:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    2fa8:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2faa:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    2fac:	3b01      	subs	r3, #1
    2fae:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    2fb0:	4c22      	ldr	r4, [pc, #136]	; (303c <tmr_init+0xc4>)
    2fb2:	4923      	ldr	r1, [pc, #140]	; (3040 <tmr_init+0xc8>)
    2fb4:	0020      	movs	r0, r4
    2fb6:	4b23      	ldr	r3, [pc, #140]	; (3044 <tmr_init+0xcc>)
    2fb8:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    2fba:	2200      	movs	r2, #0
    2fbc:	4922      	ldr	r1, [pc, #136]	; (3048 <tmr_init+0xd0>)
    2fbe:	0020      	movs	r0, r4
    2fc0:	4d22      	ldr	r5, [pc, #136]	; (304c <tmr_init+0xd4>)
    2fc2:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    2fc4:	2202      	movs	r2, #2
    2fc6:	4922      	ldr	r1, [pc, #136]	; (3050 <tmr_init+0xd8>)
    2fc8:	0020      	movs	r0, r4
    2fca:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2fcc:	6820      	ldr	r0, [r4, #0]
    2fce:	4b21      	ldr	r3, [pc, #132]	; (3054 <tmr_init+0xdc>)
    2fd0:	4699      	mov	r9, r3
    2fd2:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2fd4:	4b20      	ldr	r3, [pc, #128]	; (3058 <tmr_init+0xe0>)
    2fd6:	4698      	mov	r8, r3
    2fd8:	5c1b      	ldrb	r3, [r3, r0]
    2fda:	271f      	movs	r7, #31
    2fdc:	403b      	ands	r3, r7
    2fde:	2501      	movs	r5, #1
    2fe0:	002a      	movs	r2, r5
    2fe2:	409a      	lsls	r2, r3
    2fe4:	4e1d      	ldr	r6, [pc, #116]	; (305c <tmr_init+0xe4>)
    2fe6:	6032      	str	r2, [r6, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    2fe8:	7e62      	ldrb	r2, [r4, #25]
    2fea:	2301      	movs	r3, #1
    2fec:	4313      	orrs	r3, r2
    2fee:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    2ff0:	6823      	ldr	r3, [r4, #0]
    2ff2:	735d      	strb	r5, [r3, #13]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2ff4:	0018      	movs	r0, r3
    2ff6:	47c8      	blx	r9
    2ff8:	4643      	mov	r3, r8
    2ffa:	5c1b      	ldrb	r3, [r3, r0]
    2ffc:	403b      	ands	r3, r7
    2ffe:	409d      	lsls	r5, r3
    3000:	6035      	str	r5, [r6, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    3002:	7e62      	ldrb	r2, [r4, #25]
    3004:	2310      	movs	r3, #16
    3006:	4313      	orrs	r3, r2
    3008:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    300a:	6822      	ldr	r2, [r4, #0]
    300c:	2310      	movs	r3, #16
    300e:	7353      	strb	r3, [r2, #13]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3010:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3012:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3014:	438b      	bics	r3, r1
    3016:	d1fc      	bne.n	3012 <tmr_init+0x9a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3018:	8811      	ldrh	r1, [r2, #0]
    301a:	3302      	adds	r3, #2
    301c:	430b      	orrs	r3, r1
    301e:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    3020:	2000      	movs	r0, #0
    3022:	4b0f      	ldr	r3, [pc, #60]	; (3060 <tmr_init+0xe8>)
    3024:	4798      	blx	r3
	#endif
	return timer_multiplier;
    3026:	490f      	ldr	r1, [pc, #60]	; (3064 <tmr_init+0xec>)
    3028:	4b0f      	ldr	r3, [pc, #60]	; (3068 <tmr_init+0xf0>)
    302a:	4798      	blx	r3
    302c:	b2c0      	uxtb	r0, r0
}
    302e:	bc0c      	pop	{r2, r3}
    3030:	4690      	mov	r8, r2
    3032:	4699      	mov	r9, r3
    3034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3036:	46c0      	nop			; (mov r8, r8)
    3038:	20000858 	.word	0x20000858
    303c:	2000088c 	.word	0x2000088c
    3040:	42002c00 	.word	0x42002c00
    3044:	00002551 	.word	0x00002551
    3048:	00002ef1 	.word	0x00002ef1
    304c:	0000245d 	.word	0x0000245d
    3050:	00002ee5 	.word	0x00002ee5
    3054:	00002519 	.word	0x00002519
    3058:	00008ba0 	.word	0x00008ba0
    305c:	e000e100 	.word	0xe000e100
    3060:	000021ed 	.word	0x000021ed
    3064:	000f4240 	.word	0x000f4240
    3068:	00005f1d 	.word	0x00005f1d

0000306c <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    306c:	4770      	bx	lr
    306e:	46c0      	nop			; (mov r8, r8)

00003070 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    3070:	b510      	push	{r4, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    3072:	2201      	movs	r2, #1
    3074:	4b03      	ldr	r3, [pc, #12]	; (3084 <AT86RFX_ISR+0x14>)
    3076:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    3078:	4b03      	ldr	r3, [pc, #12]	; (3088 <AT86RFX_ISR+0x18>)
    307a:	681b      	ldr	r3, [r3, #0]
    307c:	2b00      	cmp	r3, #0
    307e:	d000      	beq.n	3082 <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    3080:	4798      	blx	r3
	}
}
    3082:	bd10      	pop	{r4, pc}
    3084:	40001800 	.word	0x40001800
    3088:	20000664 	.word	0x20000664

0000308c <trx_spi_init>:

void trx_spi_init(void)
{
    308c:	b530      	push	{r4, r5, lr}
    308e:	b085      	sub	sp, #20
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    3090:	4a34      	ldr	r2, [pc, #208]	; (3164 <trx_spi_init+0xd8>)
    3092:	2300      	movs	r3, #0
    3094:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    3096:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    3098:	213f      	movs	r1, #63	; 0x3f
    309a:	7011      	strb	r1, [r2, #0]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    309c:	4c32      	ldr	r4, [pc, #200]	; (3168 <trx_spi_init+0xdc>)
    309e:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    30a0:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    30a2:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    30a4:	2201      	movs	r2, #1
    30a6:	4669      	mov	r1, sp
    30a8:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    30aa:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    30ac:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    30ae:	203f      	movs	r0, #63	; 0x3f
    30b0:	4b2e      	ldr	r3, [pc, #184]	; (316c <trx_spi_init+0xe0>)
    30b2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    30b4:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    30b6:	09da      	lsrs	r2, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    30b8:	2100      	movs	r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    30ba:	2a00      	cmp	r2, #0
    30bc:	d104      	bne.n	30c8 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    30be:	0959      	lsrs	r1, r3, #5
    30c0:	01c9      	lsls	r1, r1, #7
    30c2:	4a2b      	ldr	r2, [pc, #172]	; (3170 <trx_spi_init+0xe4>)
    30c4:	4694      	mov	ip, r2
    30c6:	4461      	add	r1, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    30c8:	221f      	movs	r2, #31
    30ca:	4013      	ands	r3, r2
    30cc:	3a1e      	subs	r2, #30
    30ce:	0010      	movs	r0, r2
    30d0:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    30d2:	6188      	str	r0, [r1, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    30d4:	4c27      	ldr	r4, [pc, #156]	; (3174 <trx_spi_init+0xe8>)
    30d6:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    30d8:	2300      	movs	r3, #0
    30da:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    30dc:	60a3      	str	r3, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    30de:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    30e0:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    30e2:	74a2      	strb	r2, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    30e4:	74e2      	strb	r2, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    30e6:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    30e8:	3223      	adds	r2, #35	; 0x23
    30ea:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    30ec:	0020      	movs	r0, r4
    30ee:	3018      	adds	r0, #24
    30f0:	3a18      	subs	r2, #24
    30f2:	2100      	movs	r1, #0
    30f4:	4b20      	ldr	r3, [pc, #128]	; (3178 <trx_spi_init+0xec>)
    30f6:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    30f8:	2380      	movs	r3, #128	; 0x80
    30fa:	025b      	lsls	r3, r3, #9
    30fc:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    30fe:	4b1f      	ldr	r3, [pc, #124]	; (317c <trx_spi_init+0xf0>)
    3100:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    3102:	4b1f      	ldr	r3, [pc, #124]	; (3180 <trx_spi_init+0xf4>)
    3104:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    3106:	2301      	movs	r3, #1
    3108:	425b      	negs	r3, r3
    310a:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    310c:	4b1d      	ldr	r3, [pc, #116]	; (3184 <trx_spi_init+0xf8>)
    310e:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    3110:	4b1d      	ldr	r3, [pc, #116]	; (3188 <trx_spi_init+0xfc>)
    3112:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    3114:	4d1d      	ldr	r5, [pc, #116]	; (318c <trx_spi_init+0x100>)
    3116:	0022      	movs	r2, r4
    3118:	491d      	ldr	r1, [pc, #116]	; (3190 <trx_spi_init+0x104>)
    311a:	0028      	movs	r0, r5
    311c:	4b1d      	ldr	r3, [pc, #116]	; (3194 <trx_spi_init+0x108>)
    311e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3120:	682a      	ldr	r2, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    3122:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    3124:	2b00      	cmp	r3, #0
    3126:	d1fc      	bne.n	3122 <trx_spi_init+0x96>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3128:	6813      	ldr	r3, [r2, #0]
    312a:	2502      	movs	r5, #2
    312c:	432b      	orrs	r3, r5
    312e:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    3130:	ac01      	add	r4, sp, #4
    3132:	0020      	movs	r0, r4
    3134:	4b18      	ldr	r3, [pc, #96]	; (3198 <trx_spi_init+0x10c>)
    3136:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    3138:	2320      	movs	r3, #32
    313a:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    313c:	2380      	movs	r3, #128	; 0x80
    313e:	039b      	lsls	r3, r3, #14
    3140:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    3142:	7225      	strb	r5, [r4, #8]
	#if (SAML21)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    3144:	2301      	movs	r3, #1
    3146:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    3148:	2200      	movs	r2, #0
    314a:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    314c:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    314e:	0021      	movs	r1, r4
    3150:	2000      	movs	r0, #0
    3152:	4b12      	ldr	r3, [pc, #72]	; (319c <trx_spi_init+0x110>)
    3154:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    3156:	2200      	movs	r2, #0
    3158:	2100      	movs	r1, #0
    315a:	4811      	ldr	r0, [pc, #68]	; (31a0 <trx_spi_init+0x114>)
    315c:	4b11      	ldr	r3, [pc, #68]	; (31a4 <trx_spi_init+0x118>)
    315e:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    3160:	b005      	add	sp, #20
    3162:	bd30      	pop	{r4, r5, pc}
    3164:	200008ac 	.word	0x200008ac
    3168:	200008b0 	.word	0x200008b0
    316c:	00000cb5 	.word	0x00000cb5
    3170:	41004400 	.word	0x41004400
    3174:	200008b4 	.word	0x200008b4
    3178:	000035eb 	.word	0x000035eb
    317c:	004c4b40 	.word	0x004c4b40
    3180:	00530005 	.word	0x00530005
    3184:	003e0005 	.word	0x003e0005
    3188:	00520005 	.word	0x00520005
    318c:	200008ec 	.word	0x200008ec
    3190:	42001800 	.word	0x42001800
    3194:	000011a5 	.word	0x000011a5
    3198:	00000c2d 	.word	0x00000c2d
    319c:	00000c41 	.word	0x00000c41
    31a0:	00003071 	.word	0x00003071
    31a4:	00000b15 	.word	0x00000b15

000031a8 <PhyReset>:

void PhyReset(void)
{
    31a8:	b570      	push	{r4, r5, r6, lr}
    31aa:	4b09      	ldr	r3, [pc, #36]	; (31d0 <PhyReset+0x28>)
    31ac:	001c      	movs	r4, r3
    31ae:	3480      	adds	r4, #128	; 0x80
    31b0:	2580      	movs	r5, #128	; 0x80
    31b2:	022d      	lsls	r5, r5, #8
    31b4:	61a5      	str	r5, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    31b6:	2280      	movs	r2, #128	; 0x80
    31b8:	0352      	lsls	r2, r2, #13
    31ba:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    31bc:	20a5      	movs	r0, #165	; 0xa5
    31be:	0040      	lsls	r0, r0, #1
    31c0:	4e04      	ldr	r6, [pc, #16]	; (31d4 <PhyReset+0x2c>)
    31c2:	47b0      	blx	r6
    31c4:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    31c6:	200a      	movs	r0, #10
    31c8:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    31ca:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    31cc:	bd70      	pop	{r4, r5, r6, pc}
    31ce:	46c0      	nop			; (mov r8, r8)
    31d0:	41004400 	.word	0x41004400
    31d4:	000009a9 	.word	0x000009a9

000031d8 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    31d8:	b570      	push	{r4, r5, r6, lr}
    31da:	b082      	sub	sp, #8
    31dc:	0005      	movs	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    31de:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    31e2:	425a      	negs	r2, r3
    31e4:	4153      	adcs	r3, r2
    31e6:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    31e8:	b672      	cpsid	i
    31ea:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    31ee:	2200      	movs	r2, #0
    31f0:	4b33      	ldr	r3, [pc, #204]	; (32c0 <trx_reg_read+0xe8>)
    31f2:	701a      	strb	r2, [r3, #0]
	return flags;
    31f4:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    31f6:	4e33      	ldr	r6, [pc, #204]	; (32c4 <trx_reg_read+0xec>)
    31f8:	3201      	adds	r2, #1
    31fa:	4933      	ldr	r1, [pc, #204]	; (32c8 <trx_reg_read+0xf0>)
    31fc:	0030      	movs	r0, r6
    31fe:	4b33      	ldr	r3, [pc, #204]	; (32cc <trx_reg_read+0xf4>)
    3200:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3202:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3204:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3206:	7e1a      	ldrb	r2, [r3, #24]
    3208:	420a      	tst	r2, r1
    320a:	d0fc      	beq.n	3206 <trx_reg_read+0x2e>
    320c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    320e:	07d2      	lsls	r2, r2, #31
    3210:	d502      	bpl.n	3218 <trx_reg_read+0x40>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3212:	2280      	movs	r2, #128	; 0x80
    3214:	4315      	orrs	r5, r2
    3216:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3218:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    321a:	7e1a      	ldrb	r2, [r3, #24]
    321c:	420a      	tst	r2, r1
    321e:	d0fc      	beq.n	321a <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3220:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3222:	7e1a      	ldrb	r2, [r3, #24]
    3224:	420a      	tst	r2, r1
    3226:	d0fc      	beq.n	3222 <trx_reg_read+0x4a>
    3228:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    322a:	0752      	lsls	r2, r2, #29
    322c:	d512      	bpl.n	3254 <trx_reg_read+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    322e:	8b5a      	ldrh	r2, [r3, #26]
    3230:	0752      	lsls	r2, r2, #29
    3232:	d501      	bpl.n	3238 <trx_reg_read+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3234:	2204      	movs	r2, #4
    3236:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3238:	4a22      	ldr	r2, [pc, #136]	; (32c4 <trx_reg_read+0xec>)
    323a:	7992      	ldrb	r2, [r2, #6]
    323c:	2a01      	cmp	r2, #1
    323e:	d105      	bne.n	324c <trx_reg_read+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3242:	05d2      	lsls	r2, r2, #23
    3244:	0dd2      	lsrs	r2, r2, #23
    3246:	4922      	ldr	r1, [pc, #136]	; (32d0 <trx_reg_read+0xf8>)
    3248:	800a      	strh	r2, [r1, #0]
    324a:	e003      	b.n	3254 <trx_reg_read+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    324c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    324e:	b2d2      	uxtb	r2, r2
    3250:	491f      	ldr	r1, [pc, #124]	; (32d0 <trx_reg_read+0xf8>)
    3252:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    3254:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3256:	7e1a      	ldrb	r2, [r3, #24]
    3258:	420a      	tst	r2, r1
    325a:	d0fc      	beq.n	3256 <trx_reg_read+0x7e>
    325c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    325e:	07d2      	lsls	r2, r2, #31
    3260:	d501      	bpl.n	3266 <trx_reg_read+0x8e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3262:	2200      	movs	r2, #0
    3264:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    3266:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3268:	7e1a      	ldrb	r2, [r3, #24]
    326a:	420a      	tst	r2, r1
    326c:	d0fc      	beq.n	3268 <trx_reg_read+0x90>
	}
	while (!spi_is_ready_to_read(&master)) {
    326e:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3270:	7e1a      	ldrb	r2, [r3, #24]
    3272:	420a      	tst	r2, r1
    3274:	d0fc      	beq.n	3270 <trx_reg_read+0x98>
    3276:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMR21 || SAML21
	uint16_t register_value = 0;
    3278:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    327a:	0752      	lsls	r2, r2, #29
    327c:	d50e      	bpl.n	329c <trx_reg_read+0xc4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    327e:	8b5a      	ldrh	r2, [r3, #26]
    3280:	0752      	lsls	r2, r2, #29
    3282:	d501      	bpl.n	3288 <trx_reg_read+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3284:	2204      	movs	r2, #4
    3286:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3288:	4a0e      	ldr	r2, [pc, #56]	; (32c4 <trx_reg_read+0xec>)
    328a:	7992      	ldrb	r2, [r2, #6]
    328c:	2a01      	cmp	r2, #1
    328e:	d103      	bne.n	3298 <trx_reg_read+0xc0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3290:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3292:	05ed      	lsls	r5, r5, #23
    3294:	0ded      	lsrs	r5, r5, #23
    3296:	e001      	b.n	329c <trx_reg_read+0xc4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3298:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    329a:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    329c:	2200      	movs	r2, #0
    329e:	490a      	ldr	r1, [pc, #40]	; (32c8 <trx_reg_read+0xf0>)
    32a0:	4808      	ldr	r0, [pc, #32]	; (32c4 <trx_reg_read+0xec>)
    32a2:	4b0a      	ldr	r3, [pc, #40]	; (32cc <trx_reg_read+0xf4>)
    32a4:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    32a6:	23ff      	movs	r3, #255	; 0xff
    32a8:	4223      	tst	r3, r4
    32aa:	d005      	beq.n	32b8 <trx_reg_read+0xe0>
		cpu_irq_enable();
    32ac:	2201      	movs	r2, #1
    32ae:	4b04      	ldr	r3, [pc, #16]	; (32c0 <trx_reg_read+0xe8>)
    32b0:	701a      	strb	r2, [r3, #0]
    32b2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    32b6:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    32b8:	b2e8      	uxtb	r0, r5
}
    32ba:	b002      	add	sp, #8
    32bc:	bd70      	pop	{r4, r5, r6, pc}
    32be:	46c0      	nop			; (mov r8, r8)
    32c0:	20000008 	.word	0x20000008
    32c4:	200008ec 	.word	0x200008ec
    32c8:	200008b0 	.word	0x200008b0
    32cc:	00001451 	.word	0x00001451
    32d0:	200008a8 	.word	0x200008a8

000032d4 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    32d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    32d6:	b083      	sub	sp, #12
    32d8:	0006      	movs	r6, r0
    32da:	000c      	movs	r4, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    32dc:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    32e0:	425a      	negs	r2, r3
    32e2:	4153      	adcs	r3, r2
    32e4:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    32e6:	b672      	cpsid	i
    32e8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    32ec:	2200      	movs	r2, #0
    32ee:	4b34      	ldr	r3, [pc, #208]	; (33c0 <trx_reg_write+0xec>)
    32f0:	701a      	strb	r2, [r3, #0]
	return flags;
    32f2:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    32f4:	4f33      	ldr	r7, [pc, #204]	; (33c4 <trx_reg_write+0xf0>)
    32f6:	3201      	adds	r2, #1
    32f8:	4933      	ldr	r1, [pc, #204]	; (33c8 <trx_reg_write+0xf4>)
    32fa:	0038      	movs	r0, r7
    32fc:	4b33      	ldr	r3, [pc, #204]	; (33cc <trx_reg_write+0xf8>)
    32fe:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3300:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3302:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3304:	7e1a      	ldrb	r2, [r3, #24]
    3306:	420a      	tst	r2, r1
    3308:	d0fc      	beq.n	3304 <trx_reg_write+0x30>
    330a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    330c:	07d2      	lsls	r2, r2, #31
    330e:	d502      	bpl.n	3316 <trx_reg_write+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3310:	22c0      	movs	r2, #192	; 0xc0
    3312:	4316      	orrs	r6, r2
    3314:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3316:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3318:	7e1a      	ldrb	r2, [r3, #24]
    331a:	420a      	tst	r2, r1
    331c:	d0fc      	beq.n	3318 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    331e:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3320:	7e1a      	ldrb	r2, [r3, #24]
    3322:	420a      	tst	r2, r1
    3324:	d0fc      	beq.n	3320 <trx_reg_write+0x4c>
    3326:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3328:	0752      	lsls	r2, r2, #29
    332a:	d512      	bpl.n	3352 <trx_reg_write+0x7e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    332c:	8b5a      	ldrh	r2, [r3, #26]
    332e:	0752      	lsls	r2, r2, #29
    3330:	d501      	bpl.n	3336 <trx_reg_write+0x62>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3332:	2204      	movs	r2, #4
    3334:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3336:	4a23      	ldr	r2, [pc, #140]	; (33c4 <trx_reg_write+0xf0>)
    3338:	7992      	ldrb	r2, [r2, #6]
    333a:	2a01      	cmp	r2, #1
    333c:	d105      	bne.n	334a <trx_reg_write+0x76>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    333e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3340:	05d2      	lsls	r2, r2, #23
    3342:	0dd2      	lsrs	r2, r2, #23
    3344:	4922      	ldr	r1, [pc, #136]	; (33d0 <trx_reg_write+0xfc>)
    3346:	800a      	strh	r2, [r1, #0]
    3348:	e003      	b.n	3352 <trx_reg_write+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    334a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    334c:	b2d2      	uxtb	r2, r2
    334e:	4920      	ldr	r1, [pc, #128]	; (33d0 <trx_reg_write+0xfc>)
    3350:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    3352:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3354:	7e1a      	ldrb	r2, [r3, #24]
    3356:	420a      	tst	r2, r1
    3358:	d0fc      	beq.n	3354 <trx_reg_write+0x80>
    335a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    335c:	07d2      	lsls	r2, r2, #31
    335e:	d500      	bpl.n	3362 <trx_reg_write+0x8e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3360:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    3362:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3364:	7e1a      	ldrb	r2, [r3, #24]
    3366:	420a      	tst	r2, r1
    3368:	d0fc      	beq.n	3364 <trx_reg_write+0x90>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    336a:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    336c:	7e1a      	ldrb	r2, [r3, #24]
    336e:	420a      	tst	r2, r1
    3370:	d0fc      	beq.n	336c <trx_reg_write+0x98>
    3372:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3374:	0752      	lsls	r2, r2, #29
    3376:	d512      	bpl.n	339e <trx_reg_write+0xca>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3378:	8b5a      	ldrh	r2, [r3, #26]
    337a:	0752      	lsls	r2, r2, #29
    337c:	d501      	bpl.n	3382 <trx_reg_write+0xae>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    337e:	2204      	movs	r2, #4
    3380:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3382:	4a10      	ldr	r2, [pc, #64]	; (33c4 <trx_reg_write+0xf0>)
    3384:	7992      	ldrb	r2, [r2, #6]
    3386:	2a01      	cmp	r2, #1
    3388:	d105      	bne.n	3396 <trx_reg_write+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    338c:	05db      	lsls	r3, r3, #23
    338e:	0ddb      	lsrs	r3, r3, #23
    3390:	4a0f      	ldr	r2, [pc, #60]	; (33d0 <trx_reg_write+0xfc>)
    3392:	8013      	strh	r3, [r2, #0]
    3394:	e003      	b.n	339e <trx_reg_write+0xca>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3398:	b2db      	uxtb	r3, r3
    339a:	4a0d      	ldr	r2, [pc, #52]	; (33d0 <trx_reg_write+0xfc>)
    339c:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    339e:	2200      	movs	r2, #0
    33a0:	4909      	ldr	r1, [pc, #36]	; (33c8 <trx_reg_write+0xf4>)
    33a2:	4808      	ldr	r0, [pc, #32]	; (33c4 <trx_reg_write+0xf0>)
    33a4:	4b09      	ldr	r3, [pc, #36]	; (33cc <trx_reg_write+0xf8>)
    33a6:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    33a8:	23ff      	movs	r3, #255	; 0xff
    33aa:	422b      	tst	r3, r5
    33ac:	d005      	beq.n	33ba <trx_reg_write+0xe6>
		cpu_irq_enable();
    33ae:	2201      	movs	r2, #1
    33b0:	4b03      	ldr	r3, [pc, #12]	; (33c0 <trx_reg_write+0xec>)
    33b2:	701a      	strb	r2, [r3, #0]
    33b4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    33b8:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    33ba:	b003      	add	sp, #12
    33bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33be:	46c0      	nop			; (mov r8, r8)
    33c0:	20000008 	.word	0x20000008
    33c4:	200008ec 	.word	0x200008ec
    33c8:	200008b0 	.word	0x200008b0
    33cc:	00001451 	.word	0x00001451
    33d0:	200008a8 	.word	0x200008a8

000033d4 <setup>:
#include "sys.h"
#include "TheArtist.h"
/************************************************************************/
/*                                                                      */
/************************************************************************/
void setup(void) {
    33d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// [SYSTEM INITIALIZE]
	// [NOTICE!]!! sequence of this calls is important!
	irq_initialize_vectors();
	system_init();
    33d6:	4b1b      	ldr	r3, [pc, #108]	; (3444 <setup+0x70>)
    33d8:	4798      	blx	r3
	delay_init();
    33da:	4b1b      	ldr	r3, [pc, #108]	; (3448 <setup+0x74>)
    33dc:	4798      	blx	r3
	SYS_Init();	
    33de:	4b1b      	ldr	r3, [pc, #108]	; (344c <setup+0x78>)
    33e0:	4798      	blx	r3
	
	artist_ultrasonic_tc_configure();
    33e2:	4b1b      	ldr	r3, [pc, #108]	; (3450 <setup+0x7c>)
    33e4:	4798      	blx	r3
	artist_scheduler_tc_configure();
    33e6:	4b1b      	ldr	r3, [pc, #108]	; (3454 <setup+0x80>)
    33e8:	4798      	blx	r3
	artist_configure_tc_callbacks();  
    33ea:	4b1b      	ldr	r3, [pc, #108]	; (3458 <setup+0x84>)
    33ec:	4798      	blx	r3
	artist_init_maze(); 
    33ee:	4b1b      	ldr	r3, [pc, #108]	; (345c <setup+0x88>)
    33f0:	4798      	blx	r3

	cpu_irq_enable();
    33f2:	4e1b      	ldr	r6, [pc, #108]	; (3460 <setup+0x8c>)
    33f4:	2701      	movs	r7, #1
    33f6:	7037      	strb	r7, [r6, #0]
    33f8:	f3bf 8f5f 	dmb	sy
    33fc:	b662      	cpsie	i
	
	// [ultrasonic]
	artist_ultrasonic_configure(&(artist_front.us_instance_right),
    33fe:	4c19      	ldr	r4, [pc, #100]	; (3464 <setup+0x90>)
    3400:	220f      	movs	r2, #15
    3402:	211c      	movs	r1, #28
    3404:	0020      	movs	r0, r4
    3406:	4d18      	ldr	r5, [pc, #96]	; (3468 <setup+0x94>)
    3408:	47a8      	blx	r5
	CONF_ARTIST_RIGHT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_center),
    340a:	0020      	movs	r0, r4
    340c:	3810      	subs	r0, #16
    340e:	220f      	movs	r2, #15
    3410:	210d      	movs	r1, #13
    3412:	47a8      	blx	r5
	CONF_ARTIST_CENTER_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_left),
    3414:	0020      	movs	r0, r4
    3416:	3808      	subs	r0, #8
    3418:	220f      	movs	r2, #15
    341a:	2117      	movs	r1, #23
    341c:	47a8      	blx	r5
	CONF_ARTIST_LEFT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_gpio_init();
    341e:	4b13      	ldr	r3, [pc, #76]	; (346c <setup+0x98>)
    3420:	4798      	blx	r3
	
	//! [ultrasonic]
	
	
	artist_usart_configure(&(artist_front.usart_instance));
    3422:	3c4c      	subs	r4, #76	; 0x4c
    3424:	0020      	movs	r0, r4
    3426:	4b12      	ldr	r3, [pc, #72]	; (3470 <setup+0x9c>)
    3428:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    342a:	7037      	strb	r7, [r6, #0]
    342c:	f3bf 8f5f 	dmb	sy
    3430:	b662      	cpsie	i
	
	system_interrupt_enable_global();

	
	usart_read_buffer_job( &(artist_front.usart_instance),
    3432:	2205      	movs	r2, #5
    3434:	490f      	ldr	r1, [pc, #60]	; (3474 <setup+0xa0>)
    3436:	0020      	movs	r0, r4
    3438:	4b0f      	ldr	r3, [pc, #60]	; (3478 <setup+0xa4>)
    343a:	4798      	blx	r3
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
	
	printf("front node setup complete\n"); 
    343c:	480f      	ldr	r0, [pc, #60]	; (347c <setup+0xa8>)
    343e:	4b10      	ldr	r3, [pc, #64]	; (3480 <setup+0xac>)
    3440:	4798      	blx	r3
	
}
    3442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3444:	00002431 	.word	0x00002431
    3448:	00000969 	.word	0x00000969
    344c:	00002dc1 	.word	0x00002dc1
    3450:	0000063d 	.word	0x0000063d
    3454:	000008a9 	.word	0x000008a9
    3458:	00000919 	.word	0x00000919
    345c:	00000115 	.word	0x00000115
    3460:	20000008 	.word	0x20000008
    3464:	20000748 	.word	0x20000748
    3468:	000002a9 	.word	0x000002a9
    346c:	000002b9 	.word	0x000002b9
    3470:	000006d1 	.word	0x000006d1
    3474:	20000760 	.word	0x20000760
    3478:	000019d9 	.word	0x000019d9
    347c:	00008ba4 	.word	0x00008ba4
    3480:	00003fe1 	.word	0x00003fe1

00003484 <main>:
	
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
int main (void) {
    3484:	b510      	push	{r4, lr}
	setup();
    3486:	4b01      	ldr	r3, [pc, #4]	; (348c <main+0x8>)
    3488:	4798      	blx	r3
    348a:	e7fe      	b.n	348a <main+0x6>
    348c:	000033d5 	.word	0x000033d5

00003490 <common_tc_delay>:
    3490:	b510      	push	{r4, lr}
    3492:	1c04      	adds	r4, r0, #0
    3494:	4b13      	ldr	r3, [pc, #76]	; (34e4 <common_tc_delay+0x54>)
    3496:	4798      	blx	r3
    3498:	4b13      	ldr	r3, [pc, #76]	; (34e8 <common_tc_delay+0x58>)
    349a:	781a      	ldrb	r2, [r3, #0]
    349c:	4362      	muls	r2, r4
    349e:	1881      	adds	r1, r0, r2
    34a0:	4b12      	ldr	r3, [pc, #72]	; (34ec <common_tc_delay+0x5c>)
    34a2:	6059      	str	r1, [r3, #4]
    34a4:	6859      	ldr	r1, [r3, #4]
    34a6:	0c09      	lsrs	r1, r1, #16
    34a8:	6059      	str	r1, [r3, #4]
    34aa:	685b      	ldr	r3, [r3, #4]
    34ac:	2b00      	cmp	r3, #0
    34ae:	d007      	beq.n	34c0 <common_tc_delay+0x30>
    34b0:	4b0e      	ldr	r3, [pc, #56]	; (34ec <common_tc_delay+0x5c>)
    34b2:	6859      	ldr	r1, [r3, #4]
    34b4:	3201      	adds	r2, #1
    34b6:	1880      	adds	r0, r0, r2
    34b8:	8118      	strh	r0, [r3, #8]
    34ba:	4b0d      	ldr	r3, [pc, #52]	; (34f0 <common_tc_delay+0x60>)
    34bc:	4798      	blx	r3
    34be:	e004      	b.n	34ca <common_tc_delay+0x3a>
    34c0:	1882      	adds	r2, r0, r2
    34c2:	4b0a      	ldr	r3, [pc, #40]	; (34ec <common_tc_delay+0x5c>)
    34c4:	811a      	strh	r2, [r3, #8]
    34c6:	4b0b      	ldr	r3, [pc, #44]	; (34f4 <common_tc_delay+0x64>)
    34c8:	4798      	blx	r3
    34ca:	4b08      	ldr	r3, [pc, #32]	; (34ec <common_tc_delay+0x5c>)
    34cc:	891b      	ldrh	r3, [r3, #8]
    34ce:	2b63      	cmp	r3, #99	; 0x63
    34d0:	d802      	bhi.n	34d8 <common_tc_delay+0x48>
    34d2:	3364      	adds	r3, #100	; 0x64
    34d4:	4a05      	ldr	r2, [pc, #20]	; (34ec <common_tc_delay+0x5c>)
    34d6:	8113      	strh	r3, [r2, #8]
    34d8:	4b04      	ldr	r3, [pc, #16]	; (34ec <common_tc_delay+0x5c>)
    34da:	8918      	ldrh	r0, [r3, #8]
    34dc:	4b06      	ldr	r3, [pc, #24]	; (34f8 <common_tc_delay+0x68>)
    34de:	4798      	blx	r3
    34e0:	bd10      	pop	{r4, pc}
    34e2:	46c0      	nop			; (mov r8, r8)
    34e4:	00002efd 	.word	0x00002efd
    34e8:	200008f8 	.word	0x200008f8
    34ec:	20000668 	.word	0x20000668
    34f0:	00002f11 	.word	0x00002f11
    34f4:	00002f25 	.word	0x00002f25
    34f8:	00002f61 	.word	0x00002f61

000034fc <common_tc_init>:
    34fc:	b508      	push	{r3, lr}
    34fe:	2200      	movs	r2, #0
    3500:	4b03      	ldr	r3, [pc, #12]	; (3510 <common_tc_init+0x14>)
    3502:	701a      	strb	r2, [r3, #0]
    3504:	4b03      	ldr	r3, [pc, #12]	; (3514 <common_tc_init+0x18>)
    3506:	4798      	blx	r3
    3508:	4b03      	ldr	r3, [pc, #12]	; (3518 <common_tc_init+0x1c>)
    350a:	7018      	strb	r0, [r3, #0]
    350c:	bd08      	pop	{r3, pc}
    350e:	46c0      	nop			; (mov r8, r8)
    3510:	20000668 	.word	0x20000668
    3514:	00002f79 	.word	0x00002f79
    3518:	200008f8 	.word	0x200008f8

0000351c <tmr_ovf_callback>:
    351c:	b508      	push	{r3, lr}
    351e:	4b0e      	ldr	r3, [pc, #56]	; (3558 <tmr_ovf_callback+0x3c>)
    3520:	685b      	ldr	r3, [r3, #4]
    3522:	2b00      	cmp	r3, #0
    3524:	d007      	beq.n	3536 <tmr_ovf_callback+0x1a>
    3526:	4a0c      	ldr	r2, [pc, #48]	; (3558 <tmr_ovf_callback+0x3c>)
    3528:	6853      	ldr	r3, [r2, #4]
    352a:	3b01      	subs	r3, #1
    352c:	6053      	str	r3, [r2, #4]
    352e:	2b00      	cmp	r3, #0
    3530:	d101      	bne.n	3536 <tmr_ovf_callback+0x1a>
    3532:	4b0a      	ldr	r3, [pc, #40]	; (355c <tmr_ovf_callback+0x40>)
    3534:	4798      	blx	r3
    3536:	4a08      	ldr	r2, [pc, #32]	; (3558 <tmr_ovf_callback+0x3c>)
    3538:	7813      	ldrb	r3, [r2, #0]
    353a:	3301      	adds	r3, #1
    353c:	b2db      	uxtb	r3, r3
    353e:	7013      	strb	r3, [r2, #0]
    3540:	4a07      	ldr	r2, [pc, #28]	; (3560 <tmr_ovf_callback+0x44>)
    3542:	7812      	ldrb	r2, [r2, #0]
    3544:	429a      	cmp	r2, r3
    3546:	d806      	bhi.n	3556 <tmr_ovf_callback+0x3a>
    3548:	4b03      	ldr	r3, [pc, #12]	; (3558 <tmr_ovf_callback+0x3c>)
    354a:	2200      	movs	r2, #0
    354c:	701a      	strb	r2, [r3, #0]
    354e:	68db      	ldr	r3, [r3, #12]
    3550:	2b00      	cmp	r3, #0
    3552:	d000      	beq.n	3556 <tmr_ovf_callback+0x3a>
    3554:	4798      	blx	r3
    3556:	bd08      	pop	{r3, pc}
    3558:	20000668 	.word	0x20000668
    355c:	00002f25 	.word	0x00002f25
    3560:	200008f8 	.word	0x200008f8

00003564 <tmr_cca_callback>:
    3564:	b508      	push	{r3, lr}
    3566:	4b04      	ldr	r3, [pc, #16]	; (3578 <tmr_cca_callback+0x14>)
    3568:	4798      	blx	r3
    356a:	4b04      	ldr	r3, [pc, #16]	; (357c <tmr_cca_callback+0x18>)
    356c:	691b      	ldr	r3, [r3, #16]
    356e:	2b00      	cmp	r3, #0
    3570:	d000      	beq.n	3574 <tmr_cca_callback+0x10>
    3572:	4798      	blx	r3
    3574:	bd08      	pop	{r3, pc}
    3576:	46c0      	nop			; (mov r8, r8)
    3578:	00002f11 	.word	0x00002f11
    357c:	20000668 	.word	0x20000668

00003580 <set_common_tc_expiry_callback>:
    3580:	4b01      	ldr	r3, [pc, #4]	; (3588 <set_common_tc_expiry_callback+0x8>)
    3582:	6118      	str	r0, [r3, #16]
    3584:	4770      	bx	lr
    3586:	46c0      	nop			; (mov r8, r8)
    3588:	20000668 	.word	0x20000668

0000358c <__libc_init_array>:
    358c:	4b0e      	ldr	r3, [pc, #56]	; (35c8 <__libc_init_array+0x3c>)
    358e:	b570      	push	{r4, r5, r6, lr}
    3590:	2500      	movs	r5, #0
    3592:	001e      	movs	r6, r3
    3594:	4c0d      	ldr	r4, [pc, #52]	; (35cc <__libc_init_array+0x40>)
    3596:	1ae4      	subs	r4, r4, r3
    3598:	10a4      	asrs	r4, r4, #2
    359a:	42a5      	cmp	r5, r4
    359c:	d004      	beq.n	35a8 <__libc_init_array+0x1c>
    359e:	00ab      	lsls	r3, r5, #2
    35a0:	58f3      	ldr	r3, [r6, r3]
    35a2:	4798      	blx	r3
    35a4:	3501      	adds	r5, #1
    35a6:	e7f8      	b.n	359a <__libc_init_array+0xe>
    35a8:	f005 fc8e 	bl	8ec8 <_init>
    35ac:	4b08      	ldr	r3, [pc, #32]	; (35d0 <__libc_init_array+0x44>)
    35ae:	2500      	movs	r5, #0
    35b0:	001e      	movs	r6, r3
    35b2:	4c08      	ldr	r4, [pc, #32]	; (35d4 <__libc_init_array+0x48>)
    35b4:	1ae4      	subs	r4, r4, r3
    35b6:	10a4      	asrs	r4, r4, #2
    35b8:	42a5      	cmp	r5, r4
    35ba:	d004      	beq.n	35c6 <__libc_init_array+0x3a>
    35bc:	00ab      	lsls	r3, r5, #2
    35be:	58f3      	ldr	r3, [r6, r3]
    35c0:	4798      	blx	r3
    35c2:	3501      	adds	r5, #1
    35c4:	e7f8      	b.n	35b8 <__libc_init_array+0x2c>
    35c6:	bd70      	pop	{r4, r5, r6, pc}
    35c8:	00008ed4 	.word	0x00008ed4
    35cc:	00008ed4 	.word	0x00008ed4
    35d0:	00008ed4 	.word	0x00008ed4
    35d4:	00008ed8 	.word	0x00008ed8

000035d8 <memcpy>:
    35d8:	2300      	movs	r3, #0
    35da:	b510      	push	{r4, lr}
    35dc:	429a      	cmp	r2, r3
    35de:	d003      	beq.n	35e8 <memcpy+0x10>
    35e0:	5ccc      	ldrb	r4, [r1, r3]
    35e2:	54c4      	strb	r4, [r0, r3]
    35e4:	3301      	adds	r3, #1
    35e6:	e7f9      	b.n	35dc <memcpy+0x4>
    35e8:	bd10      	pop	{r4, pc}

000035ea <memset>:
    35ea:	0003      	movs	r3, r0
    35ec:	1882      	adds	r2, r0, r2
    35ee:	4293      	cmp	r3, r2
    35f0:	d002      	beq.n	35f8 <memset+0xe>
    35f2:	7019      	strb	r1, [r3, #0]
    35f4:	3301      	adds	r3, #1
    35f6:	e7fa      	b.n	35ee <memset+0x4>
    35f8:	4770      	bx	lr

000035fa <__cvt>:
    35fa:	b5f0      	push	{r4, r5, r6, r7, lr}
    35fc:	b08b      	sub	sp, #44	; 0x2c
    35fe:	0014      	movs	r4, r2
    3600:	1e1d      	subs	r5, r3, #0
    3602:	9912      	ldr	r1, [sp, #72]	; 0x48
    3604:	da06      	bge.n	3614 <__cvt+0x1a>
    3606:	2480      	movs	r4, #128	; 0x80
    3608:	0624      	lsls	r4, r4, #24
    360a:	191b      	adds	r3, r3, r4
    360c:	001d      	movs	r5, r3
    360e:	0014      	movs	r4, r2
    3610:	232d      	movs	r3, #45	; 0x2d
    3612:	e000      	b.n	3616 <__cvt+0x1c>
    3614:	2300      	movs	r3, #0
    3616:	700b      	strb	r3, [r1, #0]
    3618:	2320      	movs	r3, #32
    361a:	9e14      	ldr	r6, [sp, #80]	; 0x50
    361c:	2203      	movs	r2, #3
    361e:	439e      	bics	r6, r3
    3620:	2e46      	cmp	r6, #70	; 0x46
    3622:	d007      	beq.n	3634 <__cvt+0x3a>
    3624:	0033      	movs	r3, r6
    3626:	3b45      	subs	r3, #69	; 0x45
    3628:	4259      	negs	r1, r3
    362a:	414b      	adcs	r3, r1
    362c:	9910      	ldr	r1, [sp, #64]	; 0x40
    362e:	3a01      	subs	r2, #1
    3630:	18cb      	adds	r3, r1, r3
    3632:	9310      	str	r3, [sp, #64]	; 0x40
    3634:	ab09      	add	r3, sp, #36	; 0x24
    3636:	9304      	str	r3, [sp, #16]
    3638:	ab08      	add	r3, sp, #32
    363a:	9303      	str	r3, [sp, #12]
    363c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    363e:	9200      	str	r2, [sp, #0]
    3640:	9302      	str	r3, [sp, #8]
    3642:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3644:	0022      	movs	r2, r4
    3646:	9301      	str	r3, [sp, #4]
    3648:	002b      	movs	r3, r5
    364a:	f000 fee9 	bl	4420 <_dtoa_r>
    364e:	0007      	movs	r7, r0
    3650:	2e47      	cmp	r6, #71	; 0x47
    3652:	d102      	bne.n	365a <__cvt+0x60>
    3654:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3656:	07db      	lsls	r3, r3, #31
    3658:	d52d      	bpl.n	36b6 <__cvt+0xbc>
    365a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    365c:	18fb      	adds	r3, r7, r3
    365e:	9307      	str	r3, [sp, #28]
    3660:	2e46      	cmp	r6, #70	; 0x46
    3662:	d114      	bne.n	368e <__cvt+0x94>
    3664:	783b      	ldrb	r3, [r7, #0]
    3666:	2b30      	cmp	r3, #48	; 0x30
    3668:	d10c      	bne.n	3684 <__cvt+0x8a>
    366a:	2200      	movs	r2, #0
    366c:	2300      	movs	r3, #0
    366e:	0020      	movs	r0, r4
    3670:	0029      	movs	r1, r5
    3672:	f002 fdd9 	bl	6228 <__aeabi_dcmpeq>
    3676:	2800      	cmp	r0, #0
    3678:	d104      	bne.n	3684 <__cvt+0x8a>
    367a:	2301      	movs	r3, #1
    367c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    367e:	1a9b      	subs	r3, r3, r2
    3680:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3682:	6013      	str	r3, [r2, #0]
    3684:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3686:	9a07      	ldr	r2, [sp, #28]
    3688:	681b      	ldr	r3, [r3, #0]
    368a:	18d3      	adds	r3, r2, r3
    368c:	9307      	str	r3, [sp, #28]
    368e:	2200      	movs	r2, #0
    3690:	2300      	movs	r3, #0
    3692:	0020      	movs	r0, r4
    3694:	0029      	movs	r1, r5
    3696:	f002 fdc7 	bl	6228 <__aeabi_dcmpeq>
    369a:	2230      	movs	r2, #48	; 0x30
    369c:	2800      	cmp	r0, #0
    369e:	d002      	beq.n	36a6 <__cvt+0xac>
    36a0:	9b07      	ldr	r3, [sp, #28]
    36a2:	9309      	str	r3, [sp, #36]	; 0x24
    36a4:	e007      	b.n	36b6 <__cvt+0xbc>
    36a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    36a8:	9907      	ldr	r1, [sp, #28]
    36aa:	4299      	cmp	r1, r3
    36ac:	d903      	bls.n	36b6 <__cvt+0xbc>
    36ae:	1c59      	adds	r1, r3, #1
    36b0:	9109      	str	r1, [sp, #36]	; 0x24
    36b2:	701a      	strb	r2, [r3, #0]
    36b4:	e7f7      	b.n	36a6 <__cvt+0xac>
    36b6:	0038      	movs	r0, r7
    36b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    36ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
    36bc:	1bdb      	subs	r3, r3, r7
    36be:	6013      	str	r3, [r2, #0]
    36c0:	b00b      	add	sp, #44	; 0x2c
    36c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000036c4 <__exponent>:
    36c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    36c6:	232b      	movs	r3, #43	; 0x2b
    36c8:	0007      	movs	r7, r0
    36ca:	000c      	movs	r4, r1
    36cc:	7002      	strb	r2, [r0, #0]
    36ce:	1c86      	adds	r6, r0, #2
    36d0:	2900      	cmp	r1, #0
    36d2:	da01      	bge.n	36d8 <__exponent+0x14>
    36d4:	232d      	movs	r3, #45	; 0x2d
    36d6:	424c      	negs	r4, r1
    36d8:	707b      	strb	r3, [r7, #1]
    36da:	2c09      	cmp	r4, #9
    36dc:	dd1c      	ble.n	3718 <__exponent+0x54>
    36de:	466b      	mov	r3, sp
    36e0:	1ddd      	adds	r5, r3, #7
    36e2:	0020      	movs	r0, r4
    36e4:	210a      	movs	r1, #10
    36e6:	f002 fd89 	bl	61fc <__aeabi_idivmod>
    36ea:	3d01      	subs	r5, #1
    36ec:	3130      	adds	r1, #48	; 0x30
    36ee:	7029      	strb	r1, [r5, #0]
    36f0:	0020      	movs	r0, r4
    36f2:	210a      	movs	r1, #10
    36f4:	f002 fc9c 	bl	6030 <__aeabi_idiv>
    36f8:	1e04      	subs	r4, r0, #0
    36fa:	2c09      	cmp	r4, #9
    36fc:	dcf1      	bgt.n	36e2 <__exponent+0x1e>
    36fe:	3d01      	subs	r5, #1
    3700:	3430      	adds	r4, #48	; 0x30
    3702:	702c      	strb	r4, [r5, #0]
    3704:	466b      	mov	r3, sp
    3706:	3307      	adds	r3, #7
    3708:	0030      	movs	r0, r6
    370a:	42ab      	cmp	r3, r5
    370c:	d909      	bls.n	3722 <__exponent+0x5e>
    370e:	782b      	ldrb	r3, [r5, #0]
    3710:	3501      	adds	r5, #1
    3712:	7033      	strb	r3, [r6, #0]
    3714:	3601      	adds	r6, #1
    3716:	e7f5      	b.n	3704 <__exponent+0x40>
    3718:	2330      	movs	r3, #48	; 0x30
    371a:	18e4      	adds	r4, r4, r3
    371c:	7033      	strb	r3, [r6, #0]
    371e:	1cb0      	adds	r0, r6, #2
    3720:	7074      	strb	r4, [r6, #1]
    3722:	1bc0      	subs	r0, r0, r7
    3724:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00003728 <_printf_float>:
    3728:	b5f0      	push	{r4, r5, r6, r7, lr}
    372a:	b095      	sub	sp, #84	; 0x54
    372c:	000c      	movs	r4, r1
    372e:	920a      	str	r2, [sp, #40]	; 0x28
    3730:	930b      	str	r3, [sp, #44]	; 0x2c
    3732:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    3734:	9009      	str	r0, [sp, #36]	; 0x24
    3736:	f001 fdc1 	bl	52bc <_localeconv_r>
    373a:	6803      	ldr	r3, [r0, #0]
    373c:	0018      	movs	r0, r3
    373e:	930d      	str	r3, [sp, #52]	; 0x34
    3740:	f000 fd12 	bl	4168 <strlen>
    3744:	2300      	movs	r3, #0
    3746:	9312      	str	r3, [sp, #72]	; 0x48
    3748:	6823      	ldr	r3, [r4, #0]
    374a:	900e      	str	r0, [sp, #56]	; 0x38
    374c:	930c      	str	r3, [sp, #48]	; 0x30
    374e:	990c      	ldr	r1, [sp, #48]	; 0x30
    3750:	7e27      	ldrb	r7, [r4, #24]
    3752:	682b      	ldr	r3, [r5, #0]
    3754:	2207      	movs	r2, #7
    3756:	05c9      	lsls	r1, r1, #23
    3758:	d501      	bpl.n	375e <_printf_float+0x36>
    375a:	189b      	adds	r3, r3, r2
    375c:	e000      	b.n	3760 <_printf_float+0x38>
    375e:	3307      	adds	r3, #7
    3760:	4393      	bics	r3, r2
    3762:	001a      	movs	r2, r3
    3764:	3208      	adds	r2, #8
    3766:	602a      	str	r2, [r5, #0]
    3768:	681a      	ldr	r2, [r3, #0]
    376a:	685b      	ldr	r3, [r3, #4]
    376c:	64a2      	str	r2, [r4, #72]	; 0x48
    376e:	64e3      	str	r3, [r4, #76]	; 0x4c
    3770:	2201      	movs	r2, #1
    3772:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    3774:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    3776:	006b      	lsls	r3, r5, #1
    3778:	085b      	lsrs	r3, r3, #1
    377a:	930f      	str	r3, [sp, #60]	; 0x3c
    377c:	4252      	negs	r2, r2
    377e:	4bc0      	ldr	r3, [pc, #768]	; (3a80 <_printf_float+0x358>)
    3780:	0030      	movs	r0, r6
    3782:	990f      	ldr	r1, [sp, #60]	; 0x3c
    3784:	f004 ff9e 	bl	86c4 <__aeabi_dcmpun>
    3788:	2800      	cmp	r0, #0
    378a:	d119      	bne.n	37c0 <_printf_float+0x98>
    378c:	2201      	movs	r2, #1
    378e:	4bbc      	ldr	r3, [pc, #752]	; (3a80 <_printf_float+0x358>)
    3790:	4252      	negs	r2, r2
    3792:	0030      	movs	r0, r6
    3794:	990f      	ldr	r1, [sp, #60]	; 0x3c
    3796:	f002 fd57 	bl	6248 <__aeabi_dcmple>
    379a:	2800      	cmp	r0, #0
    379c:	d110      	bne.n	37c0 <_printf_float+0x98>
    379e:	2200      	movs	r2, #0
    37a0:	2300      	movs	r3, #0
    37a2:	0030      	movs	r0, r6
    37a4:	0029      	movs	r1, r5
    37a6:	f002 fd45 	bl	6234 <__aeabi_dcmplt>
    37aa:	2800      	cmp	r0, #0
    37ac:	d003      	beq.n	37b6 <_printf_float+0x8e>
    37ae:	0023      	movs	r3, r4
    37b0:	222d      	movs	r2, #45	; 0x2d
    37b2:	3343      	adds	r3, #67	; 0x43
    37b4:	701a      	strb	r2, [r3, #0]
    37b6:	4db3      	ldr	r5, [pc, #716]	; (3a84 <_printf_float+0x35c>)
    37b8:	2f47      	cmp	r7, #71	; 0x47
    37ba:	d80e      	bhi.n	37da <_printf_float+0xb2>
    37bc:	4db2      	ldr	r5, [pc, #712]	; (3a88 <_printf_float+0x360>)
    37be:	e00c      	b.n	37da <_printf_float+0xb2>
    37c0:	0032      	movs	r2, r6
    37c2:	002b      	movs	r3, r5
    37c4:	0030      	movs	r0, r6
    37c6:	0029      	movs	r1, r5
    37c8:	f004 ff7c 	bl	86c4 <__aeabi_dcmpun>
    37cc:	2800      	cmp	r0, #0
    37ce:	d100      	bne.n	37d2 <_printf_float+0xaa>
    37d0:	e19a      	b.n	3b08 <_printf_float+0x3e0>
    37d2:	4dae      	ldr	r5, [pc, #696]	; (3a8c <_printf_float+0x364>)
    37d4:	2f47      	cmp	r7, #71	; 0x47
    37d6:	d800      	bhi.n	37da <_printf_float+0xb2>
    37d8:	4dad      	ldr	r5, [pc, #692]	; (3a90 <_printf_float+0x368>)
    37da:	2303      	movs	r3, #3
    37dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    37de:	6123      	str	r3, [r4, #16]
    37e0:	3301      	adds	r3, #1
    37e2:	439a      	bics	r2, r3
    37e4:	6022      	str	r2, [r4, #0]
    37e6:	2600      	movs	r6, #0
    37e8:	e042      	b.n	3870 <_printf_float+0x148>
    37ea:	2f67      	cmp	r7, #103	; 0x67
    37ec:	d100      	bne.n	37f0 <_printf_float+0xc8>
    37ee:	e193      	b.n	3b18 <_printf_float+0x3f0>
    37f0:	2f47      	cmp	r7, #71	; 0x47
    37f2:	d100      	bne.n	37f6 <_printf_float+0xce>
    37f4:	e190      	b.n	3b18 <_printf_float+0x3f0>
    37f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    37f8:	2100      	movs	r1, #0
    37fa:	4313      	orrs	r3, r2
    37fc:	aa12      	add	r2, sp, #72	; 0x48
    37fe:	9205      	str	r2, [sp, #20]
    3800:	aa11      	add	r2, sp, #68	; 0x44
    3802:	9203      	str	r2, [sp, #12]
    3804:	2223      	movs	r2, #35	; 0x23
    3806:	6023      	str	r3, [r4, #0]
    3808:	9106      	str	r1, [sp, #24]
    380a:	9301      	str	r3, [sp, #4]
    380c:	a908      	add	r1, sp, #32
    380e:	6863      	ldr	r3, [r4, #4]
    3810:	1852      	adds	r2, r2, r1
    3812:	9202      	str	r2, [sp, #8]
    3814:	9300      	str	r3, [sp, #0]
    3816:	0032      	movs	r2, r6
    3818:	002b      	movs	r3, r5
    381a:	9704      	str	r7, [sp, #16]
    381c:	9809      	ldr	r0, [sp, #36]	; 0x24
    381e:	f7ff feec 	bl	35fa <__cvt>
    3822:	2320      	movs	r3, #32
    3824:	003a      	movs	r2, r7
    3826:	0005      	movs	r5, r0
    3828:	439a      	bics	r2, r3
    382a:	2a47      	cmp	r2, #71	; 0x47
    382c:	d100      	bne.n	3830 <_printf_float+0x108>
    382e:	e18e      	b.n	3b4e <_printf_float+0x426>
    3830:	9911      	ldr	r1, [sp, #68]	; 0x44
    3832:	2f65      	cmp	r7, #101	; 0x65
    3834:	d900      	bls.n	3838 <_printf_float+0x110>
    3836:	e196      	b.n	3b66 <_printf_float+0x43e>
    3838:	0020      	movs	r0, r4
    383a:	3901      	subs	r1, #1
    383c:	003a      	movs	r2, r7
    383e:	3050      	adds	r0, #80	; 0x50
    3840:	9111      	str	r1, [sp, #68]	; 0x44
    3842:	f7ff ff3f 	bl	36c4 <__exponent>
    3846:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3848:	0006      	movs	r6, r0
    384a:	1883      	adds	r3, r0, r2
    384c:	6123      	str	r3, [r4, #16]
    384e:	2a01      	cmp	r2, #1
    3850:	dd00      	ble.n	3854 <_printf_float+0x12c>
    3852:	e185      	b.n	3b60 <_printf_float+0x438>
    3854:	6822      	ldr	r2, [r4, #0]
    3856:	07d2      	lsls	r2, r2, #31
    3858:	d500      	bpl.n	385c <_printf_float+0x134>
    385a:	e181      	b.n	3b60 <_printf_float+0x438>
    385c:	2323      	movs	r3, #35	; 0x23
    385e:	aa08      	add	r2, sp, #32
    3860:	189b      	adds	r3, r3, r2
    3862:	781b      	ldrb	r3, [r3, #0]
    3864:	2b00      	cmp	r3, #0
    3866:	d003      	beq.n	3870 <_printf_float+0x148>
    3868:	0023      	movs	r3, r4
    386a:	222d      	movs	r2, #45	; 0x2d
    386c:	3343      	adds	r3, #67	; 0x43
    386e:	701a      	strb	r2, [r3, #0]
    3870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3872:	aa13      	add	r2, sp, #76	; 0x4c
    3874:	9300      	str	r3, [sp, #0]
    3876:	0021      	movs	r1, r4
    3878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    387a:	9809      	ldr	r0, [sp, #36]	; 0x24
    387c:	f000 f9a4 	bl	3bc8 <_printf_common>
    3880:	1c43      	adds	r3, r0, #1
    3882:	d102      	bne.n	388a <_printf_float+0x162>
    3884:	2001      	movs	r0, #1
    3886:	4240      	negs	r0, r0
    3888:	e19b      	b.n	3bc2 <_printf_float+0x49a>
    388a:	6822      	ldr	r2, [r4, #0]
    388c:	0553      	lsls	r3, r2, #21
    388e:	d401      	bmi.n	3894 <_printf_float+0x16c>
    3890:	6923      	ldr	r3, [r4, #16]
    3892:	e064      	b.n	395e <_printf_float+0x236>
    3894:	2f65      	cmp	r7, #101	; 0x65
    3896:	d800      	bhi.n	389a <_printf_float+0x172>
    3898:	e0cc      	b.n	3a34 <_printf_float+0x30c>
    389a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    389c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    389e:	2200      	movs	r2, #0
    38a0:	2300      	movs	r3, #0
    38a2:	f002 fcc1 	bl	6228 <__aeabi_dcmpeq>
    38a6:	2800      	cmp	r0, #0
    38a8:	d02c      	beq.n	3904 <_printf_float+0x1dc>
    38aa:	2301      	movs	r3, #1
    38ac:	4a79      	ldr	r2, [pc, #484]	; (3a94 <_printf_float+0x36c>)
    38ae:	990a      	ldr	r1, [sp, #40]	; 0x28
    38b0:	9809      	ldr	r0, [sp, #36]	; 0x24
    38b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    38b4:	47a8      	blx	r5
    38b6:	1c43      	adds	r3, r0, #1
    38b8:	d0e4      	beq.n	3884 <_printf_float+0x15c>
    38ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    38bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    38be:	4293      	cmp	r3, r2
    38c0:	db08      	blt.n	38d4 <_printf_float+0x1ac>
    38c2:	6823      	ldr	r3, [r4, #0]
    38c4:	07db      	lsls	r3, r3, #31
    38c6:	d405      	bmi.n	38d4 <_printf_float+0x1ac>
    38c8:	6823      	ldr	r3, [r4, #0]
    38ca:	2500      	movs	r5, #0
    38cc:	079b      	lsls	r3, r3, #30
    38ce:	d500      	bpl.n	38d2 <_printf_float+0x1aa>
    38d0:	e10f      	b.n	3af2 <_printf_float+0x3ca>
    38d2:	e113      	b.n	3afc <_printf_float+0x3d4>
    38d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    38d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    38d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    38da:	990a      	ldr	r1, [sp, #40]	; 0x28
    38dc:	9809      	ldr	r0, [sp, #36]	; 0x24
    38de:	47a8      	blx	r5
    38e0:	2500      	movs	r5, #0
    38e2:	1c43      	adds	r3, r0, #1
    38e4:	d0ce      	beq.n	3884 <_printf_float+0x15c>
    38e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    38e8:	3b01      	subs	r3, #1
    38ea:	429d      	cmp	r5, r3
    38ec:	daec      	bge.n	38c8 <_printf_float+0x1a0>
    38ee:	0022      	movs	r2, r4
    38f0:	2301      	movs	r3, #1
    38f2:	321a      	adds	r2, #26
    38f4:	990a      	ldr	r1, [sp, #40]	; 0x28
    38f6:	9809      	ldr	r0, [sp, #36]	; 0x24
    38f8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    38fa:	47b0      	blx	r6
    38fc:	1c43      	adds	r3, r0, #1
    38fe:	d0c1      	beq.n	3884 <_printf_float+0x15c>
    3900:	3501      	adds	r5, #1
    3902:	e7f0      	b.n	38e6 <_printf_float+0x1be>
    3904:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3906:	2b00      	cmp	r3, #0
    3908:	dc2b      	bgt.n	3962 <_printf_float+0x23a>
    390a:	2301      	movs	r3, #1
    390c:	4a61      	ldr	r2, [pc, #388]	; (3a94 <_printf_float+0x36c>)
    390e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3910:	9809      	ldr	r0, [sp, #36]	; 0x24
    3912:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3914:	47b0      	blx	r6
    3916:	1c43      	adds	r3, r0, #1
    3918:	d0b4      	beq.n	3884 <_printf_float+0x15c>
    391a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    391c:	2b00      	cmp	r3, #0
    391e:	d105      	bne.n	392c <_printf_float+0x204>
    3920:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3922:	2b00      	cmp	r3, #0
    3924:	d102      	bne.n	392c <_printf_float+0x204>
    3926:	6823      	ldr	r3, [r4, #0]
    3928:	07db      	lsls	r3, r3, #31
    392a:	d5cd      	bpl.n	38c8 <_printf_float+0x1a0>
    392c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    392e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3930:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3932:	990a      	ldr	r1, [sp, #40]	; 0x28
    3934:	9809      	ldr	r0, [sp, #36]	; 0x24
    3936:	47b0      	blx	r6
    3938:	2600      	movs	r6, #0
    393a:	1c43      	adds	r3, r0, #1
    393c:	d0a2      	beq.n	3884 <_printf_float+0x15c>
    393e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3940:	425b      	negs	r3, r3
    3942:	429e      	cmp	r6, r3
    3944:	da0a      	bge.n	395c <_printf_float+0x234>
    3946:	0022      	movs	r2, r4
    3948:	2301      	movs	r3, #1
    394a:	321a      	adds	r2, #26
    394c:	990a      	ldr	r1, [sp, #40]	; 0x28
    394e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3950:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3952:	47b8      	blx	r7
    3954:	1c43      	adds	r3, r0, #1
    3956:	d095      	beq.n	3884 <_printf_float+0x15c>
    3958:	3601      	adds	r6, #1
    395a:	e7f0      	b.n	393e <_printf_float+0x216>
    395c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    395e:	002a      	movs	r2, r5
    3960:	e0ac      	b.n	3abc <_printf_float+0x394>
    3962:	6da3      	ldr	r3, [r4, #88]	; 0x58
    3964:	9e12      	ldr	r6, [sp, #72]	; 0x48
    3966:	429e      	cmp	r6, r3
    3968:	dd00      	ble.n	396c <_printf_float+0x244>
    396a:	001e      	movs	r6, r3
    396c:	2e00      	cmp	r6, #0
    396e:	dc05      	bgt.n	397c <_printf_float+0x254>
    3970:	2300      	movs	r3, #0
    3972:	930c      	str	r3, [sp, #48]	; 0x30
    3974:	43f3      	mvns	r3, r6
    3976:	17db      	asrs	r3, r3, #31
    3978:	930f      	str	r3, [sp, #60]	; 0x3c
    397a:	e015      	b.n	39a8 <_printf_float+0x280>
    397c:	0033      	movs	r3, r6
    397e:	002a      	movs	r2, r5
    3980:	990a      	ldr	r1, [sp, #40]	; 0x28
    3982:	9809      	ldr	r0, [sp, #36]	; 0x24
    3984:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3986:	47b8      	blx	r7
    3988:	1c43      	adds	r3, r0, #1
    398a:	d1f1      	bne.n	3970 <_printf_float+0x248>
    398c:	e77a      	b.n	3884 <_printf_float+0x15c>
    398e:	0022      	movs	r2, r4
    3990:	2301      	movs	r3, #1
    3992:	321a      	adds	r2, #26
    3994:	990a      	ldr	r1, [sp, #40]	; 0x28
    3996:	9809      	ldr	r0, [sp, #36]	; 0x24
    3998:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    399a:	47b8      	blx	r7
    399c:	1c43      	adds	r3, r0, #1
    399e:	d100      	bne.n	39a2 <_printf_float+0x27a>
    39a0:	e770      	b.n	3884 <_printf_float+0x15c>
    39a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    39a4:	3301      	adds	r3, #1
    39a6:	930c      	str	r3, [sp, #48]	; 0x30
    39a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    39aa:	6da2      	ldr	r2, [r4, #88]	; 0x58
    39ac:	990c      	ldr	r1, [sp, #48]	; 0x30
    39ae:	4033      	ands	r3, r6
    39b0:	1ad3      	subs	r3, r2, r3
    39b2:	4299      	cmp	r1, r3
    39b4:	dbeb      	blt.n	398e <_printf_float+0x266>
    39b6:	18ae      	adds	r6, r5, r2
    39b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    39ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
    39bc:	4293      	cmp	r3, r2
    39be:	db0d      	blt.n	39dc <_printf_float+0x2b4>
    39c0:	6823      	ldr	r3, [r4, #0]
    39c2:	07db      	lsls	r3, r3, #31
    39c4:	d40a      	bmi.n	39dc <_printf_float+0x2b4>
    39c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    39c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    39ca:	18ed      	adds	r5, r5, r3
    39cc:	1bad      	subs	r5, r5, r6
    39ce:	1a9b      	subs	r3, r3, r2
    39d0:	429d      	cmp	r5, r3
    39d2:	dd00      	ble.n	39d6 <_printf_float+0x2ae>
    39d4:	001d      	movs	r5, r3
    39d6:	2d00      	cmp	r5, #0
    39d8:	dc09      	bgt.n	39ee <_printf_float+0x2c6>
    39da:	e011      	b.n	3a00 <_printf_float+0x2d8>
    39dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    39de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    39e0:	990a      	ldr	r1, [sp, #40]	; 0x28
    39e2:	9809      	ldr	r0, [sp, #36]	; 0x24
    39e4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    39e6:	47b8      	blx	r7
    39e8:	1c43      	adds	r3, r0, #1
    39ea:	d1ec      	bne.n	39c6 <_printf_float+0x29e>
    39ec:	e74a      	b.n	3884 <_printf_float+0x15c>
    39ee:	002b      	movs	r3, r5
    39f0:	0032      	movs	r2, r6
    39f2:	990a      	ldr	r1, [sp, #40]	; 0x28
    39f4:	9809      	ldr	r0, [sp, #36]	; 0x24
    39f6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    39f8:	47b0      	blx	r6
    39fa:	1c43      	adds	r3, r0, #1
    39fc:	d100      	bne.n	3a00 <_printf_float+0x2d8>
    39fe:	e741      	b.n	3884 <_printf_float+0x15c>
    3a00:	43ef      	mvns	r7, r5
    3a02:	17fb      	asrs	r3, r7, #31
    3a04:	2600      	movs	r6, #0
    3a06:	930c      	str	r3, [sp, #48]	; 0x30
    3a08:	e00a      	b.n	3a20 <_printf_float+0x2f8>
    3a0a:	0022      	movs	r2, r4
    3a0c:	2301      	movs	r3, #1
    3a0e:	321a      	adds	r2, #26
    3a10:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a12:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a14:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3a16:	47b8      	blx	r7
    3a18:	1c43      	adds	r3, r0, #1
    3a1a:	d100      	bne.n	3a1e <_printf_float+0x2f6>
    3a1c:	e732      	b.n	3884 <_printf_float+0x15c>
    3a1e:	3601      	adds	r6, #1
    3a20:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3a22:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3a24:	990c      	ldr	r1, [sp, #48]	; 0x30
    3a26:	1a9b      	subs	r3, r3, r2
    3a28:	002a      	movs	r2, r5
    3a2a:	400a      	ands	r2, r1
    3a2c:	1a9b      	subs	r3, r3, r2
    3a2e:	429e      	cmp	r6, r3
    3a30:	dbeb      	blt.n	3a0a <_printf_float+0x2e2>
    3a32:	e749      	b.n	38c8 <_printf_float+0x1a0>
    3a34:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3a36:	2b01      	cmp	r3, #1
    3a38:	dc02      	bgt.n	3a40 <_printf_float+0x318>
    3a3a:	2301      	movs	r3, #1
    3a3c:	421a      	tst	r2, r3
    3a3e:	d045      	beq.n	3acc <_printf_float+0x3a4>
    3a40:	2301      	movs	r3, #1
    3a42:	002a      	movs	r2, r5
    3a44:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a46:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a48:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3a4a:	47b8      	blx	r7
    3a4c:	1c43      	adds	r3, r0, #1
    3a4e:	d100      	bne.n	3a52 <_printf_float+0x32a>
    3a50:	e718      	b.n	3884 <_printf_float+0x15c>
    3a52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3a54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3a56:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a58:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a5a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3a5c:	47b8      	blx	r7
    3a5e:	1c43      	adds	r3, r0, #1
    3a60:	d100      	bne.n	3a64 <_printf_float+0x33c>
    3a62:	e70f      	b.n	3884 <_printf_float+0x15c>
    3a64:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    3a66:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    3a68:	2200      	movs	r2, #0
    3a6a:	2300      	movs	r3, #0
    3a6c:	f002 fbdc 	bl	6228 <__aeabi_dcmpeq>
    3a70:	2800      	cmp	r0, #0
    3a72:	d001      	beq.n	3a78 <_printf_float+0x350>
    3a74:	2500      	movs	r5, #0
    3a76:	e01a      	b.n	3aae <_printf_float+0x386>
    3a78:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3a7a:	1c6a      	adds	r2, r5, #1
    3a7c:	3b01      	subs	r3, #1
    3a7e:	e026      	b.n	3ace <_printf_float+0x3a6>
    3a80:	7fefffff 	.word	0x7fefffff
    3a84:	00008bcc 	.word	0x00008bcc
    3a88:	00008bc8 	.word	0x00008bc8
    3a8c:	00008bd4 	.word	0x00008bd4
    3a90:	00008bd0 	.word	0x00008bd0
    3a94:	00008bd8 	.word	0x00008bd8
    3a98:	0022      	movs	r2, r4
    3a9a:	2301      	movs	r3, #1
    3a9c:	321a      	adds	r2, #26
    3a9e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3aa0:	9809      	ldr	r0, [sp, #36]	; 0x24
    3aa2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3aa4:	47b8      	blx	r7
    3aa6:	1c43      	adds	r3, r0, #1
    3aa8:	d100      	bne.n	3aac <_printf_float+0x384>
    3aaa:	e6eb      	b.n	3884 <_printf_float+0x15c>
    3aac:	3501      	adds	r5, #1
    3aae:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3ab0:	3b01      	subs	r3, #1
    3ab2:	429d      	cmp	r5, r3
    3ab4:	dbf0      	blt.n	3a98 <_printf_float+0x370>
    3ab6:	0022      	movs	r2, r4
    3ab8:	0033      	movs	r3, r6
    3aba:	3250      	adds	r2, #80	; 0x50
    3abc:	990a      	ldr	r1, [sp, #40]	; 0x28
    3abe:	9809      	ldr	r0, [sp, #36]	; 0x24
    3ac0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3ac2:	47a8      	blx	r5
    3ac4:	1c43      	adds	r3, r0, #1
    3ac6:	d000      	beq.n	3aca <_printf_float+0x3a2>
    3ac8:	e6fe      	b.n	38c8 <_printf_float+0x1a0>
    3aca:	e6db      	b.n	3884 <_printf_float+0x15c>
    3acc:	002a      	movs	r2, r5
    3ace:	990a      	ldr	r1, [sp, #40]	; 0x28
    3ad0:	9809      	ldr	r0, [sp, #36]	; 0x24
    3ad2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3ad4:	47a8      	blx	r5
    3ad6:	1c43      	adds	r3, r0, #1
    3ad8:	d1ed      	bne.n	3ab6 <_printf_float+0x38e>
    3ada:	e6d3      	b.n	3884 <_printf_float+0x15c>
    3adc:	0022      	movs	r2, r4
    3ade:	2301      	movs	r3, #1
    3ae0:	3219      	adds	r2, #25
    3ae2:	990a      	ldr	r1, [sp, #40]	; 0x28
    3ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
    3ae6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3ae8:	47b0      	blx	r6
    3aea:	1c43      	adds	r3, r0, #1
    3aec:	d100      	bne.n	3af0 <_printf_float+0x3c8>
    3aee:	e6c9      	b.n	3884 <_printf_float+0x15c>
    3af0:	3501      	adds	r5, #1
    3af2:	68e3      	ldr	r3, [r4, #12]
    3af4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3af6:	1a9b      	subs	r3, r3, r2
    3af8:	429d      	cmp	r5, r3
    3afa:	dbef      	blt.n	3adc <_printf_float+0x3b4>
    3afc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3afe:	68e0      	ldr	r0, [r4, #12]
    3b00:	4298      	cmp	r0, r3
    3b02:	da5e      	bge.n	3bc2 <_printf_float+0x49a>
    3b04:	0018      	movs	r0, r3
    3b06:	e05c      	b.n	3bc2 <_printf_float+0x49a>
    3b08:	2380      	movs	r3, #128	; 0x80
    3b0a:	6862      	ldr	r2, [r4, #4]
    3b0c:	00db      	lsls	r3, r3, #3
    3b0e:	1c51      	adds	r1, r2, #1
    3b10:	d000      	beq.n	3b14 <_printf_float+0x3ec>
    3b12:	e66a      	b.n	37ea <_printf_float+0xc2>
    3b14:	3207      	adds	r2, #7
    3b16:	e002      	b.n	3b1e <_printf_float+0x3f6>
    3b18:	2a00      	cmp	r2, #0
    3b1a:	d102      	bne.n	3b22 <_printf_float+0x3fa>
    3b1c:	2201      	movs	r2, #1
    3b1e:	6062      	str	r2, [r4, #4]
    3b20:	e669      	b.n	37f6 <_printf_float+0xce>
    3b22:	990c      	ldr	r1, [sp, #48]	; 0x30
    3b24:	a808      	add	r0, sp, #32
    3b26:	430b      	orrs	r3, r1
    3b28:	2100      	movs	r1, #0
    3b2a:	9106      	str	r1, [sp, #24]
    3b2c:	a912      	add	r1, sp, #72	; 0x48
    3b2e:	9105      	str	r1, [sp, #20]
    3b30:	a911      	add	r1, sp, #68	; 0x44
    3b32:	9103      	str	r1, [sp, #12]
    3b34:	2123      	movs	r1, #35	; 0x23
    3b36:	1809      	adds	r1, r1, r0
    3b38:	6023      	str	r3, [r4, #0]
    3b3a:	9301      	str	r3, [sp, #4]
    3b3c:	9200      	str	r2, [sp, #0]
    3b3e:	002b      	movs	r3, r5
    3b40:	9704      	str	r7, [sp, #16]
    3b42:	9102      	str	r1, [sp, #8]
    3b44:	0032      	movs	r2, r6
    3b46:	9809      	ldr	r0, [sp, #36]	; 0x24
    3b48:	f7ff fd57 	bl	35fa <__cvt>
    3b4c:	0005      	movs	r5, r0
    3b4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3b50:	1cda      	adds	r2, r3, #3
    3b52:	db02      	blt.n	3b5a <_printf_float+0x432>
    3b54:	6862      	ldr	r2, [r4, #4]
    3b56:	4293      	cmp	r3, r2
    3b58:	dd1c      	ble.n	3b94 <_printf_float+0x46c>
    3b5a:	3f02      	subs	r7, #2
    3b5c:	b2ff      	uxtb	r7, r7
    3b5e:	e667      	b.n	3830 <_printf_float+0x108>
    3b60:	3301      	adds	r3, #1
    3b62:	6123      	str	r3, [r4, #16]
    3b64:	e67a      	b.n	385c <_printf_float+0x134>
    3b66:	2f66      	cmp	r7, #102	; 0x66
    3b68:	d115      	bne.n	3b96 <_printf_float+0x46e>
    3b6a:	6863      	ldr	r3, [r4, #4]
    3b6c:	2900      	cmp	r1, #0
    3b6e:	dd09      	ble.n	3b84 <_printf_float+0x45c>
    3b70:	6121      	str	r1, [r4, #16]
    3b72:	2b00      	cmp	r3, #0
    3b74:	d102      	bne.n	3b7c <_printf_float+0x454>
    3b76:	6822      	ldr	r2, [r4, #0]
    3b78:	07d2      	lsls	r2, r2, #31
    3b7a:	d51e      	bpl.n	3bba <_printf_float+0x492>
    3b7c:	3301      	adds	r3, #1
    3b7e:	1859      	adds	r1, r3, r1
    3b80:	6121      	str	r1, [r4, #16]
    3b82:	e01a      	b.n	3bba <_printf_float+0x492>
    3b84:	2b00      	cmp	r3, #0
    3b86:	d103      	bne.n	3b90 <_printf_float+0x468>
    3b88:	2201      	movs	r2, #1
    3b8a:	6821      	ldr	r1, [r4, #0]
    3b8c:	4211      	tst	r1, r2
    3b8e:	d013      	beq.n	3bb8 <_printf_float+0x490>
    3b90:	1c9a      	adds	r2, r3, #2
    3b92:	e011      	b.n	3bb8 <_printf_float+0x490>
    3b94:	2767      	movs	r7, #103	; 0x67
    3b96:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3b98:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3b9a:	4293      	cmp	r3, r2
    3b9c:	db06      	blt.n	3bac <_printf_float+0x484>
    3b9e:	6822      	ldr	r2, [r4, #0]
    3ba0:	6123      	str	r3, [r4, #16]
    3ba2:	07d2      	lsls	r2, r2, #31
    3ba4:	d509      	bpl.n	3bba <_printf_float+0x492>
    3ba6:	3301      	adds	r3, #1
    3ba8:	6123      	str	r3, [r4, #16]
    3baa:	e006      	b.n	3bba <_printf_float+0x492>
    3bac:	2101      	movs	r1, #1
    3bae:	2b00      	cmp	r3, #0
    3bb0:	dc01      	bgt.n	3bb6 <_printf_float+0x48e>
    3bb2:	1849      	adds	r1, r1, r1
    3bb4:	1ac9      	subs	r1, r1, r3
    3bb6:	188a      	adds	r2, r1, r2
    3bb8:	6122      	str	r2, [r4, #16]
    3bba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3bbc:	2600      	movs	r6, #0
    3bbe:	65a3      	str	r3, [r4, #88]	; 0x58
    3bc0:	e64c      	b.n	385c <_printf_float+0x134>
    3bc2:	b015      	add	sp, #84	; 0x54
    3bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bc6:	46c0      	nop			; (mov r8, r8)

00003bc8 <_printf_common>:
    3bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3bca:	0017      	movs	r7, r2
    3bcc:	9301      	str	r3, [sp, #4]
    3bce:	688a      	ldr	r2, [r1, #8]
    3bd0:	690b      	ldr	r3, [r1, #16]
    3bd2:	9000      	str	r0, [sp, #0]
    3bd4:	000c      	movs	r4, r1
    3bd6:	4293      	cmp	r3, r2
    3bd8:	da00      	bge.n	3bdc <_printf_common+0x14>
    3bda:	0013      	movs	r3, r2
    3bdc:	0022      	movs	r2, r4
    3bde:	603b      	str	r3, [r7, #0]
    3be0:	3243      	adds	r2, #67	; 0x43
    3be2:	7812      	ldrb	r2, [r2, #0]
    3be4:	2a00      	cmp	r2, #0
    3be6:	d001      	beq.n	3bec <_printf_common+0x24>
    3be8:	3301      	adds	r3, #1
    3bea:	603b      	str	r3, [r7, #0]
    3bec:	6823      	ldr	r3, [r4, #0]
    3bee:	069b      	lsls	r3, r3, #26
    3bf0:	d502      	bpl.n	3bf8 <_printf_common+0x30>
    3bf2:	683b      	ldr	r3, [r7, #0]
    3bf4:	3302      	adds	r3, #2
    3bf6:	603b      	str	r3, [r7, #0]
    3bf8:	2506      	movs	r5, #6
    3bfa:	6823      	ldr	r3, [r4, #0]
    3bfc:	401d      	ands	r5, r3
    3bfe:	d01e      	beq.n	3c3e <_printf_common+0x76>
    3c00:	0023      	movs	r3, r4
    3c02:	3343      	adds	r3, #67	; 0x43
    3c04:	781b      	ldrb	r3, [r3, #0]
    3c06:	1e5a      	subs	r2, r3, #1
    3c08:	4193      	sbcs	r3, r2
    3c0a:	6822      	ldr	r2, [r4, #0]
    3c0c:	0692      	lsls	r2, r2, #26
    3c0e:	d51c      	bpl.n	3c4a <_printf_common+0x82>
    3c10:	2030      	movs	r0, #48	; 0x30
    3c12:	18e1      	adds	r1, r4, r3
    3c14:	3143      	adds	r1, #67	; 0x43
    3c16:	7008      	strb	r0, [r1, #0]
    3c18:	0021      	movs	r1, r4
    3c1a:	1c5a      	adds	r2, r3, #1
    3c1c:	3145      	adds	r1, #69	; 0x45
    3c1e:	7809      	ldrb	r1, [r1, #0]
    3c20:	18a2      	adds	r2, r4, r2
    3c22:	3243      	adds	r2, #67	; 0x43
    3c24:	3302      	adds	r3, #2
    3c26:	7011      	strb	r1, [r2, #0]
    3c28:	e00f      	b.n	3c4a <_printf_common+0x82>
    3c2a:	0022      	movs	r2, r4
    3c2c:	2301      	movs	r3, #1
    3c2e:	3219      	adds	r2, #25
    3c30:	9901      	ldr	r1, [sp, #4]
    3c32:	9800      	ldr	r0, [sp, #0]
    3c34:	9e08      	ldr	r6, [sp, #32]
    3c36:	47b0      	blx	r6
    3c38:	1c43      	adds	r3, r0, #1
    3c3a:	d00e      	beq.n	3c5a <_printf_common+0x92>
    3c3c:	3501      	adds	r5, #1
    3c3e:	68e3      	ldr	r3, [r4, #12]
    3c40:	683a      	ldr	r2, [r7, #0]
    3c42:	1a9b      	subs	r3, r3, r2
    3c44:	429d      	cmp	r5, r3
    3c46:	dbf0      	blt.n	3c2a <_printf_common+0x62>
    3c48:	e7da      	b.n	3c00 <_printf_common+0x38>
    3c4a:	0022      	movs	r2, r4
    3c4c:	9901      	ldr	r1, [sp, #4]
    3c4e:	3243      	adds	r2, #67	; 0x43
    3c50:	9800      	ldr	r0, [sp, #0]
    3c52:	9d08      	ldr	r5, [sp, #32]
    3c54:	47a8      	blx	r5
    3c56:	1c43      	adds	r3, r0, #1
    3c58:	d102      	bne.n	3c60 <_printf_common+0x98>
    3c5a:	2001      	movs	r0, #1
    3c5c:	4240      	negs	r0, r0
    3c5e:	e020      	b.n	3ca2 <_printf_common+0xda>
    3c60:	2306      	movs	r3, #6
    3c62:	6820      	ldr	r0, [r4, #0]
    3c64:	68e1      	ldr	r1, [r4, #12]
    3c66:	683a      	ldr	r2, [r7, #0]
    3c68:	4003      	ands	r3, r0
    3c6a:	2500      	movs	r5, #0
    3c6c:	2b04      	cmp	r3, #4
    3c6e:	d103      	bne.n	3c78 <_printf_common+0xb0>
    3c70:	1a8d      	subs	r5, r1, r2
    3c72:	43eb      	mvns	r3, r5
    3c74:	17db      	asrs	r3, r3, #31
    3c76:	401d      	ands	r5, r3
    3c78:	68a3      	ldr	r3, [r4, #8]
    3c7a:	6922      	ldr	r2, [r4, #16]
    3c7c:	4293      	cmp	r3, r2
    3c7e:	dd01      	ble.n	3c84 <_printf_common+0xbc>
    3c80:	1a9b      	subs	r3, r3, r2
    3c82:	18ed      	adds	r5, r5, r3
    3c84:	2700      	movs	r7, #0
    3c86:	42bd      	cmp	r5, r7
    3c88:	d00a      	beq.n	3ca0 <_printf_common+0xd8>
    3c8a:	0022      	movs	r2, r4
    3c8c:	2301      	movs	r3, #1
    3c8e:	321a      	adds	r2, #26
    3c90:	9901      	ldr	r1, [sp, #4]
    3c92:	9800      	ldr	r0, [sp, #0]
    3c94:	9e08      	ldr	r6, [sp, #32]
    3c96:	47b0      	blx	r6
    3c98:	1c43      	adds	r3, r0, #1
    3c9a:	d0de      	beq.n	3c5a <_printf_common+0x92>
    3c9c:	3701      	adds	r7, #1
    3c9e:	e7f2      	b.n	3c86 <_printf_common+0xbe>
    3ca0:	2000      	movs	r0, #0
    3ca2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00003ca4 <_printf_i>:
    3ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ca6:	b08b      	sub	sp, #44	; 0x2c
    3ca8:	9206      	str	r2, [sp, #24]
    3caa:	000a      	movs	r2, r1
    3cac:	3243      	adds	r2, #67	; 0x43
    3cae:	9307      	str	r3, [sp, #28]
    3cb0:	9005      	str	r0, [sp, #20]
    3cb2:	9204      	str	r2, [sp, #16]
    3cb4:	7e0a      	ldrb	r2, [r1, #24]
    3cb6:	000c      	movs	r4, r1
    3cb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3cba:	2a6e      	cmp	r2, #110	; 0x6e
    3cbc:	d100      	bne.n	3cc0 <_printf_i+0x1c>
    3cbe:	e0ab      	b.n	3e18 <_printf_i+0x174>
    3cc0:	d811      	bhi.n	3ce6 <_printf_i+0x42>
    3cc2:	2a63      	cmp	r2, #99	; 0x63
    3cc4:	d022      	beq.n	3d0c <_printf_i+0x68>
    3cc6:	d809      	bhi.n	3cdc <_printf_i+0x38>
    3cc8:	2a00      	cmp	r2, #0
    3cca:	d100      	bne.n	3cce <_printf_i+0x2a>
    3ccc:	e0b5      	b.n	3e3a <_printf_i+0x196>
    3cce:	2a58      	cmp	r2, #88	; 0x58
    3cd0:	d000      	beq.n	3cd4 <_printf_i+0x30>
    3cd2:	e0c5      	b.n	3e60 <_printf_i+0x1bc>
    3cd4:	3145      	adds	r1, #69	; 0x45
    3cd6:	700a      	strb	r2, [r1, #0]
    3cd8:	4a81      	ldr	r2, [pc, #516]	; (3ee0 <_printf_i+0x23c>)
    3cda:	e04f      	b.n	3d7c <_printf_i+0xd8>
    3cdc:	2a64      	cmp	r2, #100	; 0x64
    3cde:	d01d      	beq.n	3d1c <_printf_i+0x78>
    3ce0:	2a69      	cmp	r2, #105	; 0x69
    3ce2:	d01b      	beq.n	3d1c <_printf_i+0x78>
    3ce4:	e0bc      	b.n	3e60 <_printf_i+0x1bc>
    3ce6:	2a73      	cmp	r2, #115	; 0x73
    3ce8:	d100      	bne.n	3cec <_printf_i+0x48>
    3cea:	e0aa      	b.n	3e42 <_printf_i+0x19e>
    3cec:	d809      	bhi.n	3d02 <_printf_i+0x5e>
    3cee:	2a6f      	cmp	r2, #111	; 0x6f
    3cf0:	d029      	beq.n	3d46 <_printf_i+0xa2>
    3cf2:	2a70      	cmp	r2, #112	; 0x70
    3cf4:	d000      	beq.n	3cf8 <_printf_i+0x54>
    3cf6:	e0b3      	b.n	3e60 <_printf_i+0x1bc>
    3cf8:	2220      	movs	r2, #32
    3cfa:	6809      	ldr	r1, [r1, #0]
    3cfc:	430a      	orrs	r2, r1
    3cfe:	6022      	str	r2, [r4, #0]
    3d00:	e037      	b.n	3d72 <_printf_i+0xce>
    3d02:	2a75      	cmp	r2, #117	; 0x75
    3d04:	d01f      	beq.n	3d46 <_printf_i+0xa2>
    3d06:	2a78      	cmp	r2, #120	; 0x78
    3d08:	d033      	beq.n	3d72 <_printf_i+0xce>
    3d0a:	e0a9      	b.n	3e60 <_printf_i+0x1bc>
    3d0c:	000e      	movs	r6, r1
    3d0e:	681a      	ldr	r2, [r3, #0]
    3d10:	3642      	adds	r6, #66	; 0x42
    3d12:	1d11      	adds	r1, r2, #4
    3d14:	6019      	str	r1, [r3, #0]
    3d16:	6813      	ldr	r3, [r2, #0]
    3d18:	7033      	strb	r3, [r6, #0]
    3d1a:	e0a4      	b.n	3e66 <_printf_i+0x1c2>
    3d1c:	6821      	ldr	r1, [r4, #0]
    3d1e:	681a      	ldr	r2, [r3, #0]
    3d20:	0608      	lsls	r0, r1, #24
    3d22:	d406      	bmi.n	3d32 <_printf_i+0x8e>
    3d24:	0649      	lsls	r1, r1, #25
    3d26:	d504      	bpl.n	3d32 <_printf_i+0x8e>
    3d28:	1d11      	adds	r1, r2, #4
    3d2a:	6019      	str	r1, [r3, #0]
    3d2c:	2300      	movs	r3, #0
    3d2e:	5ed5      	ldrsh	r5, [r2, r3]
    3d30:	e002      	b.n	3d38 <_printf_i+0x94>
    3d32:	1d11      	adds	r1, r2, #4
    3d34:	6019      	str	r1, [r3, #0]
    3d36:	6815      	ldr	r5, [r2, #0]
    3d38:	2d00      	cmp	r5, #0
    3d3a:	da3b      	bge.n	3db4 <_printf_i+0x110>
    3d3c:	232d      	movs	r3, #45	; 0x2d
    3d3e:	9a04      	ldr	r2, [sp, #16]
    3d40:	426d      	negs	r5, r5
    3d42:	7013      	strb	r3, [r2, #0]
    3d44:	e036      	b.n	3db4 <_printf_i+0x110>
    3d46:	6821      	ldr	r1, [r4, #0]
    3d48:	681a      	ldr	r2, [r3, #0]
    3d4a:	0608      	lsls	r0, r1, #24
    3d4c:	d406      	bmi.n	3d5c <_printf_i+0xb8>
    3d4e:	0649      	lsls	r1, r1, #25
    3d50:	d504      	bpl.n	3d5c <_printf_i+0xb8>
    3d52:	6815      	ldr	r5, [r2, #0]
    3d54:	1d11      	adds	r1, r2, #4
    3d56:	6019      	str	r1, [r3, #0]
    3d58:	b2ad      	uxth	r5, r5
    3d5a:	e002      	b.n	3d62 <_printf_i+0xbe>
    3d5c:	1d11      	adds	r1, r2, #4
    3d5e:	6019      	str	r1, [r3, #0]
    3d60:	6815      	ldr	r5, [r2, #0]
    3d62:	4b5f      	ldr	r3, [pc, #380]	; (3ee0 <_printf_i+0x23c>)
    3d64:	7e22      	ldrb	r2, [r4, #24]
    3d66:	9303      	str	r3, [sp, #12]
    3d68:	2708      	movs	r7, #8
    3d6a:	2a6f      	cmp	r2, #111	; 0x6f
    3d6c:	d01d      	beq.n	3daa <_printf_i+0x106>
    3d6e:	270a      	movs	r7, #10
    3d70:	e01b      	b.n	3daa <_printf_i+0x106>
    3d72:	0022      	movs	r2, r4
    3d74:	2178      	movs	r1, #120	; 0x78
    3d76:	3245      	adds	r2, #69	; 0x45
    3d78:	7011      	strb	r1, [r2, #0]
    3d7a:	4a5a      	ldr	r2, [pc, #360]	; (3ee4 <_printf_i+0x240>)
    3d7c:	6819      	ldr	r1, [r3, #0]
    3d7e:	9203      	str	r2, [sp, #12]
    3d80:	1d08      	adds	r0, r1, #4
    3d82:	6822      	ldr	r2, [r4, #0]
    3d84:	6018      	str	r0, [r3, #0]
    3d86:	680d      	ldr	r5, [r1, #0]
    3d88:	0610      	lsls	r0, r2, #24
    3d8a:	d402      	bmi.n	3d92 <_printf_i+0xee>
    3d8c:	0650      	lsls	r0, r2, #25
    3d8e:	d500      	bpl.n	3d92 <_printf_i+0xee>
    3d90:	b2ad      	uxth	r5, r5
    3d92:	07d3      	lsls	r3, r2, #31
    3d94:	d502      	bpl.n	3d9c <_printf_i+0xf8>
    3d96:	2320      	movs	r3, #32
    3d98:	431a      	orrs	r2, r3
    3d9a:	6022      	str	r2, [r4, #0]
    3d9c:	2710      	movs	r7, #16
    3d9e:	2d00      	cmp	r5, #0
    3da0:	d103      	bne.n	3daa <_printf_i+0x106>
    3da2:	2320      	movs	r3, #32
    3da4:	6822      	ldr	r2, [r4, #0]
    3da6:	439a      	bics	r2, r3
    3da8:	6022      	str	r2, [r4, #0]
    3daa:	0023      	movs	r3, r4
    3dac:	2200      	movs	r2, #0
    3dae:	3343      	adds	r3, #67	; 0x43
    3db0:	701a      	strb	r2, [r3, #0]
    3db2:	e002      	b.n	3dba <_printf_i+0x116>
    3db4:	270a      	movs	r7, #10
    3db6:	4b4a      	ldr	r3, [pc, #296]	; (3ee0 <_printf_i+0x23c>)
    3db8:	9303      	str	r3, [sp, #12]
    3dba:	6863      	ldr	r3, [r4, #4]
    3dbc:	60a3      	str	r3, [r4, #8]
    3dbe:	2b00      	cmp	r3, #0
    3dc0:	db09      	blt.n	3dd6 <_printf_i+0x132>
    3dc2:	2204      	movs	r2, #4
    3dc4:	6821      	ldr	r1, [r4, #0]
    3dc6:	4391      	bics	r1, r2
    3dc8:	6021      	str	r1, [r4, #0]
    3dca:	2d00      	cmp	r5, #0
    3dcc:	d105      	bne.n	3dda <_printf_i+0x136>
    3dce:	9e04      	ldr	r6, [sp, #16]
    3dd0:	2b00      	cmp	r3, #0
    3dd2:	d011      	beq.n	3df8 <_printf_i+0x154>
    3dd4:	e07b      	b.n	3ece <_printf_i+0x22a>
    3dd6:	2d00      	cmp	r5, #0
    3dd8:	d079      	beq.n	3ece <_printf_i+0x22a>
    3dda:	9e04      	ldr	r6, [sp, #16]
    3ddc:	0028      	movs	r0, r5
    3dde:	0039      	movs	r1, r7
    3de0:	f002 f922 	bl	6028 <__aeabi_uidivmod>
    3de4:	9b03      	ldr	r3, [sp, #12]
    3de6:	3e01      	subs	r6, #1
    3de8:	5c5b      	ldrb	r3, [r3, r1]
    3dea:	0028      	movs	r0, r5
    3dec:	7033      	strb	r3, [r6, #0]
    3dee:	0039      	movs	r1, r7
    3df0:	f002 f894 	bl	5f1c <__aeabi_uidiv>
    3df4:	1e05      	subs	r5, r0, #0
    3df6:	d1f1      	bne.n	3ddc <_printf_i+0x138>
    3df8:	2f08      	cmp	r7, #8
    3dfa:	d109      	bne.n	3e10 <_printf_i+0x16c>
    3dfc:	6823      	ldr	r3, [r4, #0]
    3dfe:	07db      	lsls	r3, r3, #31
    3e00:	d506      	bpl.n	3e10 <_printf_i+0x16c>
    3e02:	6863      	ldr	r3, [r4, #4]
    3e04:	6922      	ldr	r2, [r4, #16]
    3e06:	4293      	cmp	r3, r2
    3e08:	dc02      	bgt.n	3e10 <_printf_i+0x16c>
    3e0a:	2330      	movs	r3, #48	; 0x30
    3e0c:	3e01      	subs	r6, #1
    3e0e:	7033      	strb	r3, [r6, #0]
    3e10:	9b04      	ldr	r3, [sp, #16]
    3e12:	1b9b      	subs	r3, r3, r6
    3e14:	6123      	str	r3, [r4, #16]
    3e16:	e02b      	b.n	3e70 <_printf_i+0x1cc>
    3e18:	6809      	ldr	r1, [r1, #0]
    3e1a:	681a      	ldr	r2, [r3, #0]
    3e1c:	0608      	lsls	r0, r1, #24
    3e1e:	d407      	bmi.n	3e30 <_printf_i+0x18c>
    3e20:	0649      	lsls	r1, r1, #25
    3e22:	d505      	bpl.n	3e30 <_printf_i+0x18c>
    3e24:	1d11      	adds	r1, r2, #4
    3e26:	6019      	str	r1, [r3, #0]
    3e28:	6813      	ldr	r3, [r2, #0]
    3e2a:	8aa2      	ldrh	r2, [r4, #20]
    3e2c:	801a      	strh	r2, [r3, #0]
    3e2e:	e004      	b.n	3e3a <_printf_i+0x196>
    3e30:	1d11      	adds	r1, r2, #4
    3e32:	6019      	str	r1, [r3, #0]
    3e34:	6813      	ldr	r3, [r2, #0]
    3e36:	6962      	ldr	r2, [r4, #20]
    3e38:	601a      	str	r2, [r3, #0]
    3e3a:	2300      	movs	r3, #0
    3e3c:	9e04      	ldr	r6, [sp, #16]
    3e3e:	6123      	str	r3, [r4, #16]
    3e40:	e016      	b.n	3e70 <_printf_i+0x1cc>
    3e42:	681a      	ldr	r2, [r3, #0]
    3e44:	1d11      	adds	r1, r2, #4
    3e46:	6019      	str	r1, [r3, #0]
    3e48:	6816      	ldr	r6, [r2, #0]
    3e4a:	2100      	movs	r1, #0
    3e4c:	6862      	ldr	r2, [r4, #4]
    3e4e:	0030      	movs	r0, r6
    3e50:	f001 faa6 	bl	53a0 <memchr>
    3e54:	2800      	cmp	r0, #0
    3e56:	d001      	beq.n	3e5c <_printf_i+0x1b8>
    3e58:	1b80      	subs	r0, r0, r6
    3e5a:	6060      	str	r0, [r4, #4]
    3e5c:	6863      	ldr	r3, [r4, #4]
    3e5e:	e003      	b.n	3e68 <_printf_i+0x1c4>
    3e60:	0026      	movs	r6, r4
    3e62:	3642      	adds	r6, #66	; 0x42
    3e64:	7032      	strb	r2, [r6, #0]
    3e66:	2301      	movs	r3, #1
    3e68:	6123      	str	r3, [r4, #16]
    3e6a:	2300      	movs	r3, #0
    3e6c:	9a04      	ldr	r2, [sp, #16]
    3e6e:	7013      	strb	r3, [r2, #0]
    3e70:	9b07      	ldr	r3, [sp, #28]
    3e72:	aa09      	add	r2, sp, #36	; 0x24
    3e74:	9300      	str	r3, [sp, #0]
    3e76:	0021      	movs	r1, r4
    3e78:	9b06      	ldr	r3, [sp, #24]
    3e7a:	9805      	ldr	r0, [sp, #20]
    3e7c:	f7ff fea4 	bl	3bc8 <_printf_common>
    3e80:	1c43      	adds	r3, r0, #1
    3e82:	d102      	bne.n	3e8a <_printf_i+0x1e6>
    3e84:	2001      	movs	r0, #1
    3e86:	4240      	negs	r0, r0
    3e88:	e027      	b.n	3eda <_printf_i+0x236>
    3e8a:	6923      	ldr	r3, [r4, #16]
    3e8c:	0032      	movs	r2, r6
    3e8e:	9906      	ldr	r1, [sp, #24]
    3e90:	9805      	ldr	r0, [sp, #20]
    3e92:	9d07      	ldr	r5, [sp, #28]
    3e94:	47a8      	blx	r5
    3e96:	1c43      	adds	r3, r0, #1
    3e98:	d0f4      	beq.n	3e84 <_printf_i+0x1e0>
    3e9a:	6823      	ldr	r3, [r4, #0]
    3e9c:	2500      	movs	r5, #0
    3e9e:	079b      	lsls	r3, r3, #30
    3ea0:	d40f      	bmi.n	3ec2 <_printf_i+0x21e>
    3ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3ea4:	68e0      	ldr	r0, [r4, #12]
    3ea6:	4298      	cmp	r0, r3
    3ea8:	da17      	bge.n	3eda <_printf_i+0x236>
    3eaa:	0018      	movs	r0, r3
    3eac:	e015      	b.n	3eda <_printf_i+0x236>
    3eae:	0022      	movs	r2, r4
    3eb0:	2301      	movs	r3, #1
    3eb2:	3219      	adds	r2, #25
    3eb4:	9906      	ldr	r1, [sp, #24]
    3eb6:	9805      	ldr	r0, [sp, #20]
    3eb8:	9e07      	ldr	r6, [sp, #28]
    3eba:	47b0      	blx	r6
    3ebc:	1c43      	adds	r3, r0, #1
    3ebe:	d0e1      	beq.n	3e84 <_printf_i+0x1e0>
    3ec0:	3501      	adds	r5, #1
    3ec2:	68e3      	ldr	r3, [r4, #12]
    3ec4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3ec6:	1a9b      	subs	r3, r3, r2
    3ec8:	429d      	cmp	r5, r3
    3eca:	dbf0      	blt.n	3eae <_printf_i+0x20a>
    3ecc:	e7e9      	b.n	3ea2 <_printf_i+0x1fe>
    3ece:	0026      	movs	r6, r4
    3ed0:	9b03      	ldr	r3, [sp, #12]
    3ed2:	3642      	adds	r6, #66	; 0x42
    3ed4:	781b      	ldrb	r3, [r3, #0]
    3ed6:	7033      	strb	r3, [r6, #0]
    3ed8:	e78e      	b.n	3df8 <_printf_i+0x154>
    3eda:	b00b      	add	sp, #44	; 0x2c
    3edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ede:	46c0      	nop			; (mov r8, r8)
    3ee0:	00008bda 	.word	0x00008bda
    3ee4:	00008beb 	.word	0x00008beb

00003ee8 <iprintf>:
    3ee8:	b40f      	push	{r0, r1, r2, r3}
    3eea:	4b0b      	ldr	r3, [pc, #44]	; (3f18 <iprintf+0x30>)
    3eec:	b513      	push	{r0, r1, r4, lr}
    3eee:	681c      	ldr	r4, [r3, #0]
    3ef0:	2c00      	cmp	r4, #0
    3ef2:	d005      	beq.n	3f00 <iprintf+0x18>
    3ef4:	69a3      	ldr	r3, [r4, #24]
    3ef6:	2b00      	cmp	r3, #0
    3ef8:	d102      	bne.n	3f00 <iprintf+0x18>
    3efa:	0020      	movs	r0, r4
    3efc:	f001 f94a 	bl	5194 <__sinit>
    3f00:	ab05      	add	r3, sp, #20
    3f02:	9a04      	ldr	r2, [sp, #16]
    3f04:	68a1      	ldr	r1, [r4, #8]
    3f06:	0020      	movs	r0, r4
    3f08:	9301      	str	r3, [sp, #4]
    3f0a:	f001 fe11 	bl	5b30 <_vfiprintf_r>
    3f0e:	bc16      	pop	{r1, r2, r4}
    3f10:	bc08      	pop	{r3}
    3f12:	b004      	add	sp, #16
    3f14:	4718      	bx	r3
    3f16:	46c0      	nop			; (mov r8, r8)
    3f18:	2000006c 	.word	0x2000006c

00003f1c <_puts_r>:
    3f1c:	b570      	push	{r4, r5, r6, lr}
    3f1e:	0005      	movs	r5, r0
    3f20:	000e      	movs	r6, r1
    3f22:	2800      	cmp	r0, #0
    3f24:	d004      	beq.n	3f30 <_puts_r+0x14>
    3f26:	6983      	ldr	r3, [r0, #24]
    3f28:	2b00      	cmp	r3, #0
    3f2a:	d101      	bne.n	3f30 <_puts_r+0x14>
    3f2c:	f001 f932 	bl	5194 <__sinit>
    3f30:	69ab      	ldr	r3, [r5, #24]
    3f32:	68ac      	ldr	r4, [r5, #8]
    3f34:	2b00      	cmp	r3, #0
    3f36:	d102      	bne.n	3f3e <_puts_r+0x22>
    3f38:	0028      	movs	r0, r5
    3f3a:	f001 f92b 	bl	5194 <__sinit>
    3f3e:	4b25      	ldr	r3, [pc, #148]	; (3fd4 <_puts_r+0xb8>)
    3f40:	429c      	cmp	r4, r3
    3f42:	d101      	bne.n	3f48 <_puts_r+0x2c>
    3f44:	686c      	ldr	r4, [r5, #4]
    3f46:	e008      	b.n	3f5a <_puts_r+0x3e>
    3f48:	4b23      	ldr	r3, [pc, #140]	; (3fd8 <_puts_r+0xbc>)
    3f4a:	429c      	cmp	r4, r3
    3f4c:	d101      	bne.n	3f52 <_puts_r+0x36>
    3f4e:	68ac      	ldr	r4, [r5, #8]
    3f50:	e003      	b.n	3f5a <_puts_r+0x3e>
    3f52:	4b22      	ldr	r3, [pc, #136]	; (3fdc <_puts_r+0xc0>)
    3f54:	429c      	cmp	r4, r3
    3f56:	d100      	bne.n	3f5a <_puts_r+0x3e>
    3f58:	68ec      	ldr	r4, [r5, #12]
    3f5a:	89a3      	ldrh	r3, [r4, #12]
    3f5c:	071b      	lsls	r3, r3, #28
    3f5e:	d502      	bpl.n	3f66 <_puts_r+0x4a>
    3f60:	6923      	ldr	r3, [r4, #16]
    3f62:	2b00      	cmp	r3, #0
    3f64:	d111      	bne.n	3f8a <_puts_r+0x6e>
    3f66:	0021      	movs	r1, r4
    3f68:	0028      	movs	r0, r5
    3f6a:	f000 f95d 	bl	4228 <__swsetup_r>
    3f6e:	2800      	cmp	r0, #0
    3f70:	d00b      	beq.n	3f8a <_puts_r+0x6e>
    3f72:	2001      	movs	r0, #1
    3f74:	4240      	negs	r0, r0
    3f76:	e02b      	b.n	3fd0 <_puts_r+0xb4>
    3f78:	3b01      	subs	r3, #1
    3f7a:	3601      	adds	r6, #1
    3f7c:	60a3      	str	r3, [r4, #8]
    3f7e:	2b00      	cmp	r3, #0
    3f80:	db08      	blt.n	3f94 <_puts_r+0x78>
    3f82:	6823      	ldr	r3, [r4, #0]
    3f84:	1c5a      	adds	r2, r3, #1
    3f86:	6022      	str	r2, [r4, #0]
    3f88:	7019      	strb	r1, [r3, #0]
    3f8a:	7831      	ldrb	r1, [r6, #0]
    3f8c:	68a3      	ldr	r3, [r4, #8]
    3f8e:	2900      	cmp	r1, #0
    3f90:	d1f2      	bne.n	3f78 <_puts_r+0x5c>
    3f92:	e00b      	b.n	3fac <_puts_r+0x90>
    3f94:	69a2      	ldr	r2, [r4, #24]
    3f96:	4293      	cmp	r3, r2
    3f98:	db01      	blt.n	3f9e <_puts_r+0x82>
    3f9a:	290a      	cmp	r1, #10
    3f9c:	d1f1      	bne.n	3f82 <_puts_r+0x66>
    3f9e:	0022      	movs	r2, r4
    3fa0:	0028      	movs	r0, r5
    3fa2:	f000 f8e9 	bl	4178 <__swbuf_r>
    3fa6:	1c43      	adds	r3, r0, #1
    3fa8:	d1ef      	bne.n	3f8a <_puts_r+0x6e>
    3faa:	e7e2      	b.n	3f72 <_puts_r+0x56>
    3fac:	3b01      	subs	r3, #1
    3fae:	60a3      	str	r3, [r4, #8]
    3fb0:	2b00      	cmp	r3, #0
    3fb2:	da08      	bge.n	3fc6 <_puts_r+0xaa>
    3fb4:	0022      	movs	r2, r4
    3fb6:	310a      	adds	r1, #10
    3fb8:	0028      	movs	r0, r5
    3fba:	f000 f8dd 	bl	4178 <__swbuf_r>
    3fbe:	1c43      	adds	r3, r0, #1
    3fc0:	d0d7      	beq.n	3f72 <_puts_r+0x56>
    3fc2:	200a      	movs	r0, #10
    3fc4:	e004      	b.n	3fd0 <_puts_r+0xb4>
    3fc6:	200a      	movs	r0, #10
    3fc8:	6823      	ldr	r3, [r4, #0]
    3fca:	1c5a      	adds	r2, r3, #1
    3fcc:	6022      	str	r2, [r4, #0]
    3fce:	7018      	strb	r0, [r3, #0]
    3fd0:	bd70      	pop	{r4, r5, r6, pc}
    3fd2:	46c0      	nop			; (mov r8, r8)
    3fd4:	00008c0c 	.word	0x00008c0c
    3fd8:	00008c2c 	.word	0x00008c2c
    3fdc:	00008c4c 	.word	0x00008c4c

00003fe0 <puts>:
    3fe0:	b510      	push	{r4, lr}
    3fe2:	4b03      	ldr	r3, [pc, #12]	; (3ff0 <puts+0x10>)
    3fe4:	0001      	movs	r1, r0
    3fe6:	6818      	ldr	r0, [r3, #0]
    3fe8:	f7ff ff98 	bl	3f1c <_puts_r>
    3fec:	bd10      	pop	{r4, pc}
    3fee:	46c0      	nop			; (mov r8, r8)
    3ff0:	2000006c 	.word	0x2000006c

00003ff4 <setbuf>:
    3ff4:	424a      	negs	r2, r1
    3ff6:	414a      	adcs	r2, r1
    3ff8:	2380      	movs	r3, #128	; 0x80
    3ffa:	b510      	push	{r4, lr}
    3ffc:	0052      	lsls	r2, r2, #1
    3ffe:	00db      	lsls	r3, r3, #3
    4000:	f000 f802 	bl	4008 <setvbuf>
    4004:	bd10      	pop	{r4, pc}
	...

00004008 <setvbuf>:
    4008:	b5f0      	push	{r4, r5, r6, r7, lr}
    400a:	001d      	movs	r5, r3
    400c:	4b51      	ldr	r3, [pc, #324]	; (4154 <setvbuf+0x14c>)
    400e:	b085      	sub	sp, #20
    4010:	681e      	ldr	r6, [r3, #0]
    4012:	0004      	movs	r4, r0
    4014:	000f      	movs	r7, r1
    4016:	9200      	str	r2, [sp, #0]
    4018:	2e00      	cmp	r6, #0
    401a:	d005      	beq.n	4028 <setvbuf+0x20>
    401c:	69b3      	ldr	r3, [r6, #24]
    401e:	2b00      	cmp	r3, #0
    4020:	d102      	bne.n	4028 <setvbuf+0x20>
    4022:	0030      	movs	r0, r6
    4024:	f001 f8b6 	bl	5194 <__sinit>
    4028:	4b4b      	ldr	r3, [pc, #300]	; (4158 <setvbuf+0x150>)
    402a:	429c      	cmp	r4, r3
    402c:	d101      	bne.n	4032 <setvbuf+0x2a>
    402e:	6874      	ldr	r4, [r6, #4]
    4030:	e008      	b.n	4044 <setvbuf+0x3c>
    4032:	4b4a      	ldr	r3, [pc, #296]	; (415c <setvbuf+0x154>)
    4034:	429c      	cmp	r4, r3
    4036:	d101      	bne.n	403c <setvbuf+0x34>
    4038:	68b4      	ldr	r4, [r6, #8]
    403a:	e003      	b.n	4044 <setvbuf+0x3c>
    403c:	4b48      	ldr	r3, [pc, #288]	; (4160 <setvbuf+0x158>)
    403e:	429c      	cmp	r4, r3
    4040:	d100      	bne.n	4044 <setvbuf+0x3c>
    4042:	68f4      	ldr	r4, [r6, #12]
    4044:	9b00      	ldr	r3, [sp, #0]
    4046:	2b02      	cmp	r3, #2
    4048:	d005      	beq.n	4056 <setvbuf+0x4e>
    404a:	2b01      	cmp	r3, #1
    404c:	d900      	bls.n	4050 <setvbuf+0x48>
    404e:	e07c      	b.n	414a <setvbuf+0x142>
    4050:	2d00      	cmp	r5, #0
    4052:	da00      	bge.n	4056 <setvbuf+0x4e>
    4054:	e079      	b.n	414a <setvbuf+0x142>
    4056:	0021      	movs	r1, r4
    4058:	0030      	movs	r0, r6
    405a:	f001 f82d 	bl	50b8 <_fflush_r>
    405e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4060:	2900      	cmp	r1, #0
    4062:	d008      	beq.n	4076 <setvbuf+0x6e>
    4064:	0023      	movs	r3, r4
    4066:	3344      	adds	r3, #68	; 0x44
    4068:	4299      	cmp	r1, r3
    406a:	d002      	beq.n	4072 <setvbuf+0x6a>
    406c:	0030      	movs	r0, r6
    406e:	f001 fc9b 	bl	59a8 <_free_r>
    4072:	2300      	movs	r3, #0
    4074:	6363      	str	r3, [r4, #52]	; 0x34
    4076:	2300      	movs	r3, #0
    4078:	61a3      	str	r3, [r4, #24]
    407a:	6063      	str	r3, [r4, #4]
    407c:	89a3      	ldrh	r3, [r4, #12]
    407e:	061b      	lsls	r3, r3, #24
    4080:	d503      	bpl.n	408a <setvbuf+0x82>
    4082:	6921      	ldr	r1, [r4, #16]
    4084:	0030      	movs	r0, r6
    4086:	f001 fc8f 	bl	59a8 <_free_r>
    408a:	89a2      	ldrh	r2, [r4, #12]
    408c:	4b35      	ldr	r3, [pc, #212]	; (4164 <setvbuf+0x15c>)
    408e:	4013      	ands	r3, r2
    4090:	81a3      	strh	r3, [r4, #12]
    4092:	9b00      	ldr	r3, [sp, #0]
    4094:	2b02      	cmp	r3, #2
    4096:	d021      	beq.n	40dc <setvbuf+0xd4>
    4098:	ab03      	add	r3, sp, #12
    409a:	aa02      	add	r2, sp, #8
    409c:	0021      	movs	r1, r4
    409e:	0030      	movs	r0, r6
    40a0:	f001 f910 	bl	52c4 <__swhatbuf_r>
    40a4:	89a3      	ldrh	r3, [r4, #12]
    40a6:	4318      	orrs	r0, r3
    40a8:	81a0      	strh	r0, [r4, #12]
    40aa:	2d00      	cmp	r5, #0
    40ac:	d101      	bne.n	40b2 <setvbuf+0xaa>
    40ae:	9d02      	ldr	r5, [sp, #8]
    40b0:	e001      	b.n	40b6 <setvbuf+0xae>
    40b2:	2f00      	cmp	r7, #0
    40b4:	d125      	bne.n	4102 <setvbuf+0xfa>
    40b6:	0028      	movs	r0, r5
    40b8:	f001 f968 	bl	538c <malloc>
    40bc:	9501      	str	r5, [sp, #4]
    40be:	1e07      	subs	r7, r0, #0
    40c0:	d11a      	bne.n	40f8 <setvbuf+0xf0>
    40c2:	9b02      	ldr	r3, [sp, #8]
    40c4:	9301      	str	r3, [sp, #4]
    40c6:	42ab      	cmp	r3, r5
    40c8:	d102      	bne.n	40d0 <setvbuf+0xc8>
    40ca:	2001      	movs	r0, #1
    40cc:	4240      	negs	r0, r0
    40ce:	e006      	b.n	40de <setvbuf+0xd6>
    40d0:	9801      	ldr	r0, [sp, #4]
    40d2:	f001 f95b 	bl	538c <malloc>
    40d6:	1e07      	subs	r7, r0, #0
    40d8:	d10e      	bne.n	40f8 <setvbuf+0xf0>
    40da:	e7f6      	b.n	40ca <setvbuf+0xc2>
    40dc:	2000      	movs	r0, #0
    40de:	2202      	movs	r2, #2
    40e0:	89a3      	ldrh	r3, [r4, #12]
    40e2:	4313      	orrs	r3, r2
    40e4:	81a3      	strh	r3, [r4, #12]
    40e6:	2300      	movs	r3, #0
    40e8:	60a3      	str	r3, [r4, #8]
    40ea:	0023      	movs	r3, r4
    40ec:	3347      	adds	r3, #71	; 0x47
    40ee:	6023      	str	r3, [r4, #0]
    40f0:	6123      	str	r3, [r4, #16]
    40f2:	2301      	movs	r3, #1
    40f4:	6163      	str	r3, [r4, #20]
    40f6:	e02a      	b.n	414e <setvbuf+0x146>
    40f8:	2280      	movs	r2, #128	; 0x80
    40fa:	89a3      	ldrh	r3, [r4, #12]
    40fc:	9d01      	ldr	r5, [sp, #4]
    40fe:	4313      	orrs	r3, r2
    4100:	81a3      	strh	r3, [r4, #12]
    4102:	69b3      	ldr	r3, [r6, #24]
    4104:	2b00      	cmp	r3, #0
    4106:	d102      	bne.n	410e <setvbuf+0x106>
    4108:	0030      	movs	r0, r6
    410a:	f001 f843 	bl	5194 <__sinit>
    410e:	9b00      	ldr	r3, [sp, #0]
    4110:	2b01      	cmp	r3, #1
    4112:	d103      	bne.n	411c <setvbuf+0x114>
    4114:	89a3      	ldrh	r3, [r4, #12]
    4116:	9a00      	ldr	r2, [sp, #0]
    4118:	431a      	orrs	r2, r3
    411a:	81a2      	strh	r2, [r4, #12]
    411c:	2308      	movs	r3, #8
    411e:	89a2      	ldrh	r2, [r4, #12]
    4120:	6027      	str	r7, [r4, #0]
    4122:	4013      	ands	r3, r2
    4124:	6127      	str	r7, [r4, #16]
    4126:	6165      	str	r5, [r4, #20]
    4128:	1e18      	subs	r0, r3, #0
    412a:	d00c      	beq.n	4146 <setvbuf+0x13e>
    412c:	2301      	movs	r3, #1
    412e:	401a      	ands	r2, r3
    4130:	2300      	movs	r3, #0
    4132:	1e10      	subs	r0, r2, #0
    4134:	4298      	cmp	r0, r3
    4136:	d004      	beq.n	4142 <setvbuf+0x13a>
    4138:	426d      	negs	r5, r5
    413a:	60a3      	str	r3, [r4, #8]
    413c:	61a5      	str	r5, [r4, #24]
    413e:	0018      	movs	r0, r3
    4140:	e005      	b.n	414e <setvbuf+0x146>
    4142:	60a5      	str	r5, [r4, #8]
    4144:	e003      	b.n	414e <setvbuf+0x146>
    4146:	60a3      	str	r3, [r4, #8]
    4148:	e001      	b.n	414e <setvbuf+0x146>
    414a:	2001      	movs	r0, #1
    414c:	4240      	negs	r0, r0
    414e:	b005      	add	sp, #20
    4150:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4152:	46c0      	nop			; (mov r8, r8)
    4154:	2000006c 	.word	0x2000006c
    4158:	00008c0c 	.word	0x00008c0c
    415c:	00008c2c 	.word	0x00008c2c
    4160:	00008c4c 	.word	0x00008c4c
    4164:	fffff35c 	.word	0xfffff35c

00004168 <strlen>:
    4168:	2300      	movs	r3, #0
    416a:	5cc2      	ldrb	r2, [r0, r3]
    416c:	3301      	adds	r3, #1
    416e:	2a00      	cmp	r2, #0
    4170:	d1fb      	bne.n	416a <strlen+0x2>
    4172:	1e58      	subs	r0, r3, #1
    4174:	4770      	bx	lr
	...

00004178 <__swbuf_r>:
    4178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    417a:	0005      	movs	r5, r0
    417c:	000f      	movs	r7, r1
    417e:	0014      	movs	r4, r2
    4180:	2800      	cmp	r0, #0
    4182:	d004      	beq.n	418e <__swbuf_r+0x16>
    4184:	6983      	ldr	r3, [r0, #24]
    4186:	2b00      	cmp	r3, #0
    4188:	d101      	bne.n	418e <__swbuf_r+0x16>
    418a:	f001 f803 	bl	5194 <__sinit>
    418e:	4b23      	ldr	r3, [pc, #140]	; (421c <__swbuf_r+0xa4>)
    4190:	429c      	cmp	r4, r3
    4192:	d101      	bne.n	4198 <__swbuf_r+0x20>
    4194:	686c      	ldr	r4, [r5, #4]
    4196:	e008      	b.n	41aa <__swbuf_r+0x32>
    4198:	4b21      	ldr	r3, [pc, #132]	; (4220 <__swbuf_r+0xa8>)
    419a:	429c      	cmp	r4, r3
    419c:	d101      	bne.n	41a2 <__swbuf_r+0x2a>
    419e:	68ac      	ldr	r4, [r5, #8]
    41a0:	e003      	b.n	41aa <__swbuf_r+0x32>
    41a2:	4b20      	ldr	r3, [pc, #128]	; (4224 <__swbuf_r+0xac>)
    41a4:	429c      	cmp	r4, r3
    41a6:	d100      	bne.n	41aa <__swbuf_r+0x32>
    41a8:	68ec      	ldr	r4, [r5, #12]
    41aa:	69a3      	ldr	r3, [r4, #24]
    41ac:	60a3      	str	r3, [r4, #8]
    41ae:	89a3      	ldrh	r3, [r4, #12]
    41b0:	071b      	lsls	r3, r3, #28
    41b2:	d50a      	bpl.n	41ca <__swbuf_r+0x52>
    41b4:	6923      	ldr	r3, [r4, #16]
    41b6:	2b00      	cmp	r3, #0
    41b8:	d007      	beq.n	41ca <__swbuf_r+0x52>
    41ba:	6823      	ldr	r3, [r4, #0]
    41bc:	6922      	ldr	r2, [r4, #16]
    41be:	b2fe      	uxtb	r6, r7
    41c0:	1a98      	subs	r0, r3, r2
    41c2:	6963      	ldr	r3, [r4, #20]
    41c4:	4298      	cmp	r0, r3
    41c6:	db0f      	blt.n	41e8 <__swbuf_r+0x70>
    41c8:	e008      	b.n	41dc <__swbuf_r+0x64>
    41ca:	0021      	movs	r1, r4
    41cc:	0028      	movs	r0, r5
    41ce:	f000 f82b 	bl	4228 <__swsetup_r>
    41d2:	2800      	cmp	r0, #0
    41d4:	d0f1      	beq.n	41ba <__swbuf_r+0x42>
    41d6:	2001      	movs	r0, #1
    41d8:	4240      	negs	r0, r0
    41da:	e01d      	b.n	4218 <__swbuf_r+0xa0>
    41dc:	0021      	movs	r1, r4
    41de:	0028      	movs	r0, r5
    41e0:	f000 ff6a 	bl	50b8 <_fflush_r>
    41e4:	2800      	cmp	r0, #0
    41e6:	d1f6      	bne.n	41d6 <__swbuf_r+0x5e>
    41e8:	68a3      	ldr	r3, [r4, #8]
    41ea:	3001      	adds	r0, #1
    41ec:	3b01      	subs	r3, #1
    41ee:	60a3      	str	r3, [r4, #8]
    41f0:	6823      	ldr	r3, [r4, #0]
    41f2:	1c5a      	adds	r2, r3, #1
    41f4:	6022      	str	r2, [r4, #0]
    41f6:	701f      	strb	r7, [r3, #0]
    41f8:	6963      	ldr	r3, [r4, #20]
    41fa:	4298      	cmp	r0, r3
    41fc:	d005      	beq.n	420a <__swbuf_r+0x92>
    41fe:	89a3      	ldrh	r3, [r4, #12]
    4200:	0030      	movs	r0, r6
    4202:	07db      	lsls	r3, r3, #31
    4204:	d508      	bpl.n	4218 <__swbuf_r+0xa0>
    4206:	2e0a      	cmp	r6, #10
    4208:	d106      	bne.n	4218 <__swbuf_r+0xa0>
    420a:	0021      	movs	r1, r4
    420c:	0028      	movs	r0, r5
    420e:	f000 ff53 	bl	50b8 <_fflush_r>
    4212:	2800      	cmp	r0, #0
    4214:	d1df      	bne.n	41d6 <__swbuf_r+0x5e>
    4216:	0030      	movs	r0, r6
    4218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    421a:	46c0      	nop			; (mov r8, r8)
    421c:	00008c0c 	.word	0x00008c0c
    4220:	00008c2c 	.word	0x00008c2c
    4224:	00008c4c 	.word	0x00008c4c

00004228 <__swsetup_r>:
    4228:	4b36      	ldr	r3, [pc, #216]	; (4304 <__swsetup_r+0xdc>)
    422a:	b570      	push	{r4, r5, r6, lr}
    422c:	681d      	ldr	r5, [r3, #0]
    422e:	0006      	movs	r6, r0
    4230:	000c      	movs	r4, r1
    4232:	2d00      	cmp	r5, #0
    4234:	d005      	beq.n	4242 <__swsetup_r+0x1a>
    4236:	69ab      	ldr	r3, [r5, #24]
    4238:	2b00      	cmp	r3, #0
    423a:	d102      	bne.n	4242 <__swsetup_r+0x1a>
    423c:	0028      	movs	r0, r5
    423e:	f000 ffa9 	bl	5194 <__sinit>
    4242:	4b31      	ldr	r3, [pc, #196]	; (4308 <__swsetup_r+0xe0>)
    4244:	429c      	cmp	r4, r3
    4246:	d101      	bne.n	424c <__swsetup_r+0x24>
    4248:	686c      	ldr	r4, [r5, #4]
    424a:	e008      	b.n	425e <__swsetup_r+0x36>
    424c:	4b2f      	ldr	r3, [pc, #188]	; (430c <__swsetup_r+0xe4>)
    424e:	429c      	cmp	r4, r3
    4250:	d101      	bne.n	4256 <__swsetup_r+0x2e>
    4252:	68ac      	ldr	r4, [r5, #8]
    4254:	e003      	b.n	425e <__swsetup_r+0x36>
    4256:	4b2e      	ldr	r3, [pc, #184]	; (4310 <__swsetup_r+0xe8>)
    4258:	429c      	cmp	r4, r3
    425a:	d100      	bne.n	425e <__swsetup_r+0x36>
    425c:	68ec      	ldr	r4, [r5, #12]
    425e:	220c      	movs	r2, #12
    4260:	5ea3      	ldrsh	r3, [r4, r2]
    4262:	b29a      	uxth	r2, r3
    4264:	0711      	lsls	r1, r2, #28
    4266:	d423      	bmi.n	42b0 <__swsetup_r+0x88>
    4268:	06d1      	lsls	r1, r2, #27
    426a:	d407      	bmi.n	427c <__swsetup_r+0x54>
    426c:	2209      	movs	r2, #9
    426e:	2001      	movs	r0, #1
    4270:	6032      	str	r2, [r6, #0]
    4272:	3237      	adds	r2, #55	; 0x37
    4274:	4313      	orrs	r3, r2
    4276:	81a3      	strh	r3, [r4, #12]
    4278:	4240      	negs	r0, r0
    427a:	e042      	b.n	4302 <__swsetup_r+0xda>
    427c:	0753      	lsls	r3, r2, #29
    427e:	d513      	bpl.n	42a8 <__swsetup_r+0x80>
    4280:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4282:	2900      	cmp	r1, #0
    4284:	d008      	beq.n	4298 <__swsetup_r+0x70>
    4286:	0023      	movs	r3, r4
    4288:	3344      	adds	r3, #68	; 0x44
    428a:	4299      	cmp	r1, r3
    428c:	d002      	beq.n	4294 <__swsetup_r+0x6c>
    428e:	0030      	movs	r0, r6
    4290:	f001 fb8a 	bl	59a8 <_free_r>
    4294:	2300      	movs	r3, #0
    4296:	6363      	str	r3, [r4, #52]	; 0x34
    4298:	2224      	movs	r2, #36	; 0x24
    429a:	89a3      	ldrh	r3, [r4, #12]
    429c:	4393      	bics	r3, r2
    429e:	81a3      	strh	r3, [r4, #12]
    42a0:	2300      	movs	r3, #0
    42a2:	6063      	str	r3, [r4, #4]
    42a4:	6923      	ldr	r3, [r4, #16]
    42a6:	6023      	str	r3, [r4, #0]
    42a8:	2208      	movs	r2, #8
    42aa:	89a3      	ldrh	r3, [r4, #12]
    42ac:	4313      	orrs	r3, r2
    42ae:	81a3      	strh	r3, [r4, #12]
    42b0:	6923      	ldr	r3, [r4, #16]
    42b2:	2b00      	cmp	r3, #0
    42b4:	d10b      	bne.n	42ce <__swsetup_r+0xa6>
    42b6:	23a0      	movs	r3, #160	; 0xa0
    42b8:	89a2      	ldrh	r2, [r4, #12]
    42ba:	009b      	lsls	r3, r3, #2
    42bc:	4013      	ands	r3, r2
    42be:	2280      	movs	r2, #128	; 0x80
    42c0:	0092      	lsls	r2, r2, #2
    42c2:	4293      	cmp	r3, r2
    42c4:	d003      	beq.n	42ce <__swsetup_r+0xa6>
    42c6:	0021      	movs	r1, r4
    42c8:	0030      	movs	r0, r6
    42ca:	f001 f821 	bl	5310 <__smakebuf_r>
    42ce:	2301      	movs	r3, #1
    42d0:	89a2      	ldrh	r2, [r4, #12]
    42d2:	4013      	ands	r3, r2
    42d4:	d005      	beq.n	42e2 <__swsetup_r+0xba>
    42d6:	2300      	movs	r3, #0
    42d8:	60a3      	str	r3, [r4, #8]
    42da:	6963      	ldr	r3, [r4, #20]
    42dc:	425b      	negs	r3, r3
    42de:	61a3      	str	r3, [r4, #24]
    42e0:	e003      	b.n	42ea <__swsetup_r+0xc2>
    42e2:	0792      	lsls	r2, r2, #30
    42e4:	d400      	bmi.n	42e8 <__swsetup_r+0xc0>
    42e6:	6963      	ldr	r3, [r4, #20]
    42e8:	60a3      	str	r3, [r4, #8]
    42ea:	2000      	movs	r0, #0
    42ec:	6923      	ldr	r3, [r4, #16]
    42ee:	4283      	cmp	r3, r0
    42f0:	d107      	bne.n	4302 <__swsetup_r+0xda>
    42f2:	220c      	movs	r2, #12
    42f4:	5ea3      	ldrsh	r3, [r4, r2]
    42f6:	061a      	lsls	r2, r3, #24
    42f8:	d503      	bpl.n	4302 <__swsetup_r+0xda>
    42fa:	2240      	movs	r2, #64	; 0x40
    42fc:	4313      	orrs	r3, r2
    42fe:	81a3      	strh	r3, [r4, #12]
    4300:	3801      	subs	r0, #1
    4302:	bd70      	pop	{r4, r5, r6, pc}
    4304:	2000006c 	.word	0x2000006c
    4308:	00008c0c 	.word	0x00008c0c
    430c:	00008c2c 	.word	0x00008c2c
    4310:	00008c4c 	.word	0x00008c4c

00004314 <quorem>:
    4314:	b5f0      	push	{r4, r5, r6, r7, lr}
    4316:	6903      	ldr	r3, [r0, #16]
    4318:	690c      	ldr	r4, [r1, #16]
    431a:	b089      	sub	sp, #36	; 0x24
    431c:	0007      	movs	r7, r0
    431e:	9105      	str	r1, [sp, #20]
    4320:	2600      	movs	r6, #0
    4322:	429c      	cmp	r4, r3
    4324:	dc79      	bgt.n	441a <quorem+0x106>
    4326:	000b      	movs	r3, r1
    4328:	3c01      	subs	r4, #1
    432a:	3314      	adds	r3, #20
    432c:	00a5      	lsls	r5, r4, #2
    432e:	9303      	str	r3, [sp, #12]
    4330:	195b      	adds	r3, r3, r5
    4332:	9304      	str	r3, [sp, #16]
    4334:	0003      	movs	r3, r0
    4336:	3314      	adds	r3, #20
    4338:	9302      	str	r3, [sp, #8]
    433a:	195d      	adds	r5, r3, r5
    433c:	9b04      	ldr	r3, [sp, #16]
    433e:	6828      	ldr	r0, [r5, #0]
    4340:	681b      	ldr	r3, [r3, #0]
    4342:	1c59      	adds	r1, r3, #1
    4344:	9301      	str	r3, [sp, #4]
    4346:	f001 fde9 	bl	5f1c <__aeabi_uidiv>
    434a:	9001      	str	r0, [sp, #4]
    434c:	42b0      	cmp	r0, r6
    434e:	d033      	beq.n	43b8 <quorem+0xa4>
    4350:	9b03      	ldr	r3, [sp, #12]
    4352:	9802      	ldr	r0, [sp, #8]
    4354:	469c      	mov	ip, r3
    4356:	9606      	str	r6, [sp, #24]
    4358:	4663      	mov	r3, ip
    435a:	cb04      	ldmia	r3!, {r2}
    435c:	469c      	mov	ip, r3
    435e:	9b01      	ldr	r3, [sp, #4]
    4360:	b291      	uxth	r1, r2
    4362:	4359      	muls	r1, r3
    4364:	0c12      	lsrs	r2, r2, #16
    4366:	435a      	muls	r2, r3
    4368:	1989      	adds	r1, r1, r6
    436a:	0c0b      	lsrs	r3, r1, #16
    436c:	18d3      	adds	r3, r2, r3
    436e:	9307      	str	r3, [sp, #28]
    4370:	9a06      	ldr	r2, [sp, #24]
    4372:	0c1e      	lsrs	r6, r3, #16
    4374:	8803      	ldrh	r3, [r0, #0]
    4376:	b289      	uxth	r1, r1
    4378:	189b      	adds	r3, r3, r2
    437a:	6802      	ldr	r2, [r0, #0]
    437c:	1a5b      	subs	r3, r3, r1
    437e:	0c11      	lsrs	r1, r2, #16
    4380:	466a      	mov	r2, sp
    4382:	8b92      	ldrh	r2, [r2, #28]
    4384:	1a8a      	subs	r2, r1, r2
    4386:	1419      	asrs	r1, r3, #16
    4388:	1852      	adds	r2, r2, r1
    438a:	1411      	asrs	r1, r2, #16
    438c:	b29b      	uxth	r3, r3
    438e:	0412      	lsls	r2, r2, #16
    4390:	4313      	orrs	r3, r2
    4392:	c008      	stmia	r0!, {r3}
    4394:	9b04      	ldr	r3, [sp, #16]
    4396:	9106      	str	r1, [sp, #24]
    4398:	4563      	cmp	r3, ip
    439a:	d2dd      	bcs.n	4358 <quorem+0x44>
    439c:	682b      	ldr	r3, [r5, #0]
    439e:	2b00      	cmp	r3, #0
    43a0:	d10a      	bne.n	43b8 <quorem+0xa4>
    43a2:	9b02      	ldr	r3, [sp, #8]
    43a4:	3d04      	subs	r5, #4
    43a6:	42ab      	cmp	r3, r5
    43a8:	d301      	bcc.n	43ae <quorem+0x9a>
    43aa:	613c      	str	r4, [r7, #16]
    43ac:	e004      	b.n	43b8 <quorem+0xa4>
    43ae:	682b      	ldr	r3, [r5, #0]
    43b0:	2b00      	cmp	r3, #0
    43b2:	d1fa      	bne.n	43aa <quorem+0x96>
    43b4:	3c01      	subs	r4, #1
    43b6:	e7f4      	b.n	43a2 <quorem+0x8e>
    43b8:	9905      	ldr	r1, [sp, #20]
    43ba:	0038      	movs	r0, r7
    43bc:	f001 fa0c 	bl	57d8 <__mcmp>
    43c0:	2800      	cmp	r0, #0
    43c2:	db29      	blt.n	4418 <quorem+0x104>
    43c4:	2000      	movs	r0, #0
    43c6:	9b01      	ldr	r3, [sp, #4]
    43c8:	9902      	ldr	r1, [sp, #8]
    43ca:	3301      	adds	r3, #1
    43cc:	9a03      	ldr	r2, [sp, #12]
    43ce:	9301      	str	r3, [sp, #4]
    43d0:	ca40      	ldmia	r2!, {r6}
    43d2:	880b      	ldrh	r3, [r1, #0]
    43d4:	1818      	adds	r0, r3, r0
    43d6:	b2b3      	uxth	r3, r6
    43d8:	1ac3      	subs	r3, r0, r3
    43da:	6808      	ldr	r0, [r1, #0]
    43dc:	0c36      	lsrs	r6, r6, #16
    43de:	0c00      	lsrs	r0, r0, #16
    43e0:	1b80      	subs	r0, r0, r6
    43e2:	141d      	asrs	r5, r3, #16
    43e4:	1945      	adds	r5, r0, r5
    43e6:	1428      	asrs	r0, r5, #16
    43e8:	b29b      	uxth	r3, r3
    43ea:	042d      	lsls	r5, r5, #16
    43ec:	432b      	orrs	r3, r5
    43ee:	c108      	stmia	r1!, {r3}
    43f0:	9b04      	ldr	r3, [sp, #16]
    43f2:	4293      	cmp	r3, r2
    43f4:	d2ec      	bcs.n	43d0 <quorem+0xbc>
    43f6:	9a02      	ldr	r2, [sp, #8]
    43f8:	00a3      	lsls	r3, r4, #2
    43fa:	18d3      	adds	r3, r2, r3
    43fc:	681a      	ldr	r2, [r3, #0]
    43fe:	2a00      	cmp	r2, #0
    4400:	d10a      	bne.n	4418 <quorem+0x104>
    4402:	9a02      	ldr	r2, [sp, #8]
    4404:	3b04      	subs	r3, #4
    4406:	429a      	cmp	r2, r3
    4408:	d301      	bcc.n	440e <quorem+0xfa>
    440a:	613c      	str	r4, [r7, #16]
    440c:	e004      	b.n	4418 <quorem+0x104>
    440e:	681a      	ldr	r2, [r3, #0]
    4410:	2a00      	cmp	r2, #0
    4412:	d1fa      	bne.n	440a <quorem+0xf6>
    4414:	3c01      	subs	r4, #1
    4416:	e7f4      	b.n	4402 <quorem+0xee>
    4418:	9e01      	ldr	r6, [sp, #4]
    441a:	0030      	movs	r0, r6
    441c:	b009      	add	sp, #36	; 0x24
    441e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004420 <_dtoa_r>:
    4420:	b5f0      	push	{r4, r5, r6, r7, lr}
    4422:	0016      	movs	r6, r2
    4424:	001f      	movs	r7, r3
    4426:	6a44      	ldr	r4, [r0, #36]	; 0x24
    4428:	b09d      	sub	sp, #116	; 0x74
    442a:	9004      	str	r0, [sp, #16]
    442c:	9d25      	ldr	r5, [sp, #148]	; 0x94
    442e:	9606      	str	r6, [sp, #24]
    4430:	9707      	str	r7, [sp, #28]
    4432:	2c00      	cmp	r4, #0
    4434:	d108      	bne.n	4448 <_dtoa_r+0x28>
    4436:	2010      	movs	r0, #16
    4438:	f000 ffa8 	bl	538c <malloc>
    443c:	9b04      	ldr	r3, [sp, #16]
    443e:	6258      	str	r0, [r3, #36]	; 0x24
    4440:	6044      	str	r4, [r0, #4]
    4442:	6084      	str	r4, [r0, #8]
    4444:	6004      	str	r4, [r0, #0]
    4446:	60c4      	str	r4, [r0, #12]
    4448:	9b04      	ldr	r3, [sp, #16]
    444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    444c:	6819      	ldr	r1, [r3, #0]
    444e:	2900      	cmp	r1, #0
    4450:	d00b      	beq.n	446a <_dtoa_r+0x4a>
    4452:	685a      	ldr	r2, [r3, #4]
    4454:	2301      	movs	r3, #1
    4456:	4093      	lsls	r3, r2
    4458:	604a      	str	r2, [r1, #4]
    445a:	608b      	str	r3, [r1, #8]
    445c:	9804      	ldr	r0, [sp, #16]
    445e:	f000 ffe2 	bl	5426 <_Bfree>
    4462:	2200      	movs	r2, #0
    4464:	9b04      	ldr	r3, [sp, #16]
    4466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4468:	601a      	str	r2, [r3, #0]
    446a:	9b07      	ldr	r3, [sp, #28]
    446c:	2b00      	cmp	r3, #0
    446e:	da05      	bge.n	447c <_dtoa_r+0x5c>
    4470:	2301      	movs	r3, #1
    4472:	602b      	str	r3, [r5, #0]
    4474:	007b      	lsls	r3, r7, #1
    4476:	085b      	lsrs	r3, r3, #1
    4478:	9307      	str	r3, [sp, #28]
    447a:	e001      	b.n	4480 <_dtoa_r+0x60>
    447c:	2300      	movs	r3, #0
    447e:	602b      	str	r3, [r5, #0]
    4480:	9c07      	ldr	r4, [sp, #28]
    4482:	4bc8      	ldr	r3, [pc, #800]	; (47a4 <_dtoa_r+0x384>)
    4484:	0022      	movs	r2, r4
    4486:	9319      	str	r3, [sp, #100]	; 0x64
    4488:	401a      	ands	r2, r3
    448a:	429a      	cmp	r2, r3
    448c:	d119      	bne.n	44c2 <_dtoa_r+0xa2>
    448e:	4bc6      	ldr	r3, [pc, #792]	; (47a8 <_dtoa_r+0x388>)
    4490:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4492:	6013      	str	r3, [r2, #0]
    4494:	9a06      	ldr	r2, [sp, #24]
    4496:	4bc5      	ldr	r3, [pc, #788]	; (47ac <_dtoa_r+0x38c>)
    4498:	2a00      	cmp	r2, #0
    449a:	d102      	bne.n	44a2 <_dtoa_r+0x82>
    449c:	0324      	lsls	r4, r4, #12
    449e:	d100      	bne.n	44a2 <_dtoa_r+0x82>
    44a0:	4bc3      	ldr	r3, [pc, #780]	; (47b0 <_dtoa_r+0x390>)
    44a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    44a4:	0018      	movs	r0, r3
    44a6:	2a00      	cmp	r2, #0
    44a8:	d101      	bne.n	44ae <_dtoa_r+0x8e>
    44aa:	f000 fd7d 	bl	4fa8 <_dtoa_r+0xb88>
    44ae:	78d9      	ldrb	r1, [r3, #3]
    44b0:	1cda      	adds	r2, r3, #3
    44b2:	2900      	cmp	r1, #0
    44b4:	d000      	beq.n	44b8 <_dtoa_r+0x98>
    44b6:	3205      	adds	r2, #5
    44b8:	9926      	ldr	r1, [sp, #152]	; 0x98
    44ba:	0018      	movs	r0, r3
    44bc:	600a      	str	r2, [r1, #0]
    44be:	f000 fd73 	bl	4fa8 <_dtoa_r+0xb88>
    44c2:	9e06      	ldr	r6, [sp, #24]
    44c4:	9f07      	ldr	r7, [sp, #28]
    44c6:	2200      	movs	r2, #0
    44c8:	2300      	movs	r3, #0
    44ca:	0030      	movs	r0, r6
    44cc:	0039      	movs	r1, r7
    44ce:	f001 feab 	bl	6228 <__aeabi_dcmpeq>
    44d2:	1e05      	subs	r5, r0, #0
    44d4:	d00e      	beq.n	44f4 <_dtoa_r+0xd4>
    44d6:	2301      	movs	r3, #1
    44d8:	9a24      	ldr	r2, [sp, #144]	; 0x90
    44da:	6013      	str	r3, [r2, #0]
    44dc:	4bb5      	ldr	r3, [pc, #724]	; (47b4 <_dtoa_r+0x394>)
    44de:	9a26      	ldr	r2, [sp, #152]	; 0x98
    44e0:	0018      	movs	r0, r3
    44e2:	2a00      	cmp	r2, #0
    44e4:	d101      	bne.n	44ea <_dtoa_r+0xca>
    44e6:	f000 fd5f 	bl	4fa8 <_dtoa_r+0xb88>
    44ea:	4ab3      	ldr	r2, [pc, #716]	; (47b8 <_dtoa_r+0x398>)
    44ec:	9926      	ldr	r1, [sp, #152]	; 0x98
    44ee:	600a      	str	r2, [r1, #0]
    44f0:	f000 fd5a 	bl	4fa8 <_dtoa_r+0xb88>
    44f4:	ab1a      	add	r3, sp, #104	; 0x68
    44f6:	9301      	str	r3, [sp, #4]
    44f8:	ab1b      	add	r3, sp, #108	; 0x6c
    44fa:	9300      	str	r3, [sp, #0]
    44fc:	0032      	movs	r2, r6
    44fe:	003b      	movs	r3, r7
    4500:	9804      	ldr	r0, [sp, #16]
    4502:	f001 f9ef 	bl	58e4 <__d2b>
    4506:	0063      	lsls	r3, r4, #1
    4508:	9005      	str	r0, [sp, #20]
    450a:	0d5b      	lsrs	r3, r3, #21
    450c:	d009      	beq.n	4522 <_dtoa_r+0x102>
    450e:	033a      	lsls	r2, r7, #12
    4510:	4caa      	ldr	r4, [pc, #680]	; (47bc <_dtoa_r+0x39c>)
    4512:	0b12      	lsrs	r2, r2, #12
    4514:	4314      	orrs	r4, r2
    4516:	4aaa      	ldr	r2, [pc, #680]	; (47c0 <_dtoa_r+0x3a0>)
    4518:	0030      	movs	r0, r6
    451a:	0021      	movs	r1, r4
    451c:	189e      	adds	r6, r3, r2
    451e:	9517      	str	r5, [sp, #92]	; 0x5c
    4520:	e01a      	b.n	4558 <_dtoa_r+0x138>
    4522:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4524:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    4526:	189e      	adds	r6, r3, r2
    4528:	4ba6      	ldr	r3, [pc, #664]	; (47c4 <_dtoa_r+0x3a4>)
    452a:	18f3      	adds	r3, r6, r3
    452c:	2b20      	cmp	r3, #32
    452e:	dd08      	ble.n	4542 <_dtoa_r+0x122>
    4530:	4aa5      	ldr	r2, [pc, #660]	; (47c8 <_dtoa_r+0x3a8>)
    4532:	9806      	ldr	r0, [sp, #24]
    4534:	18b2      	adds	r2, r6, r2
    4536:	40d0      	lsrs	r0, r2
    4538:	2240      	movs	r2, #64	; 0x40
    453a:	1ad3      	subs	r3, r2, r3
    453c:	409c      	lsls	r4, r3
    453e:	4320      	orrs	r0, r4
    4540:	e003      	b.n	454a <_dtoa_r+0x12a>
    4542:	2220      	movs	r2, #32
    4544:	9806      	ldr	r0, [sp, #24]
    4546:	1ad3      	subs	r3, r2, r3
    4548:	4098      	lsls	r0, r3
    454a:	f004 f953 	bl	87f4 <__aeabi_ui2d>
    454e:	2301      	movs	r3, #1
    4550:	4c9e      	ldr	r4, [pc, #632]	; (47cc <_dtoa_r+0x3ac>)
    4552:	3e01      	subs	r6, #1
    4554:	1909      	adds	r1, r1, r4
    4556:	9317      	str	r3, [sp, #92]	; 0x5c
    4558:	2200      	movs	r2, #0
    455a:	4b9d      	ldr	r3, [pc, #628]	; (47d0 <_dtoa_r+0x3b0>)
    455c:	f003 fd5e 	bl	801c <__aeabi_dsub>
    4560:	4a9c      	ldr	r2, [pc, #624]	; (47d4 <_dtoa_r+0x3b4>)
    4562:	4b9d      	ldr	r3, [pc, #628]	; (47d8 <_dtoa_r+0x3b8>)
    4564:	f003 fae0 	bl	7b28 <__aeabi_dmul>
    4568:	4a9c      	ldr	r2, [pc, #624]	; (47dc <_dtoa_r+0x3bc>)
    456a:	4b9d      	ldr	r3, [pc, #628]	; (47e0 <_dtoa_r+0x3c0>)
    456c:	f002 fb8c 	bl	6c88 <__aeabi_dadd>
    4570:	0004      	movs	r4, r0
    4572:	0030      	movs	r0, r6
    4574:	000d      	movs	r5, r1
    4576:	f004 f8fb 	bl	8770 <__aeabi_i2d>
    457a:	4a9a      	ldr	r2, [pc, #616]	; (47e4 <_dtoa_r+0x3c4>)
    457c:	4b9a      	ldr	r3, [pc, #616]	; (47e8 <_dtoa_r+0x3c8>)
    457e:	f003 fad3 	bl	7b28 <__aeabi_dmul>
    4582:	0002      	movs	r2, r0
    4584:	000b      	movs	r3, r1
    4586:	0020      	movs	r0, r4
    4588:	0029      	movs	r1, r5
    458a:	f002 fb7d 	bl	6c88 <__aeabi_dadd>
    458e:	0004      	movs	r4, r0
    4590:	000d      	movs	r5, r1
    4592:	f004 f8b7 	bl	8704 <__aeabi_d2iz>
    4596:	2200      	movs	r2, #0
    4598:	9003      	str	r0, [sp, #12]
    459a:	2300      	movs	r3, #0
    459c:	0020      	movs	r0, r4
    459e:	0029      	movs	r1, r5
    45a0:	f001 fe48 	bl	6234 <__aeabi_dcmplt>
    45a4:	2800      	cmp	r0, #0
    45a6:	d00d      	beq.n	45c4 <_dtoa_r+0x1a4>
    45a8:	9803      	ldr	r0, [sp, #12]
    45aa:	f004 f8e1 	bl	8770 <__aeabi_i2d>
    45ae:	0002      	movs	r2, r0
    45b0:	000b      	movs	r3, r1
    45b2:	0020      	movs	r0, r4
    45b4:	0029      	movs	r1, r5
    45b6:	f001 fe37 	bl	6228 <__aeabi_dcmpeq>
    45ba:	4243      	negs	r3, r0
    45bc:	4143      	adcs	r3, r0
    45be:	9a03      	ldr	r2, [sp, #12]
    45c0:	1ad3      	subs	r3, r2, r3
    45c2:	9303      	str	r3, [sp, #12]
    45c4:	2301      	movs	r3, #1
    45c6:	9316      	str	r3, [sp, #88]	; 0x58
    45c8:	9b03      	ldr	r3, [sp, #12]
    45ca:	2b16      	cmp	r3, #22
    45cc:	d811      	bhi.n	45f2 <_dtoa_r+0x1d2>
    45ce:	4987      	ldr	r1, [pc, #540]	; (47ec <_dtoa_r+0x3cc>)
    45d0:	00db      	lsls	r3, r3, #3
    45d2:	18c9      	adds	r1, r1, r3
    45d4:	6808      	ldr	r0, [r1, #0]
    45d6:	6849      	ldr	r1, [r1, #4]
    45d8:	9a06      	ldr	r2, [sp, #24]
    45da:	9b07      	ldr	r3, [sp, #28]
    45dc:	f001 fe3e 	bl	625c <__aeabi_dcmpgt>
    45e0:	2800      	cmp	r0, #0
    45e2:	d005      	beq.n	45f0 <_dtoa_r+0x1d0>
    45e4:	9b03      	ldr	r3, [sp, #12]
    45e6:	3b01      	subs	r3, #1
    45e8:	9303      	str	r3, [sp, #12]
    45ea:	2300      	movs	r3, #0
    45ec:	9316      	str	r3, [sp, #88]	; 0x58
    45ee:	e000      	b.n	45f2 <_dtoa_r+0x1d2>
    45f0:	9016      	str	r0, [sp, #88]	; 0x58
    45f2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    45f4:	1b9e      	subs	r6, r3, r6
    45f6:	2300      	movs	r3, #0
    45f8:	930b      	str	r3, [sp, #44]	; 0x2c
    45fa:	3e01      	subs	r6, #1
    45fc:	960c      	str	r6, [sp, #48]	; 0x30
    45fe:	d504      	bpl.n	460a <_dtoa_r+0x1ea>
    4600:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4602:	425b      	negs	r3, r3
    4604:	930b      	str	r3, [sp, #44]	; 0x2c
    4606:	2300      	movs	r3, #0
    4608:	930c      	str	r3, [sp, #48]	; 0x30
    460a:	9b03      	ldr	r3, [sp, #12]
    460c:	2b00      	cmp	r3, #0
    460e:	db08      	blt.n	4622 <_dtoa_r+0x202>
    4610:	9a03      	ldr	r2, [sp, #12]
    4612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4614:	4694      	mov	ip, r2
    4616:	4463      	add	r3, ip
    4618:	930c      	str	r3, [sp, #48]	; 0x30
    461a:	2300      	movs	r3, #0
    461c:	9211      	str	r2, [sp, #68]	; 0x44
    461e:	9308      	str	r3, [sp, #32]
    4620:	e007      	b.n	4632 <_dtoa_r+0x212>
    4622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4624:	9a03      	ldr	r2, [sp, #12]
    4626:	1a9b      	subs	r3, r3, r2
    4628:	930b      	str	r3, [sp, #44]	; 0x2c
    462a:	4253      	negs	r3, r2
    462c:	9308      	str	r3, [sp, #32]
    462e:	2300      	movs	r3, #0
    4630:	9311      	str	r3, [sp, #68]	; 0x44
    4632:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4634:	2501      	movs	r5, #1
    4636:	2b09      	cmp	r3, #9
    4638:	d825      	bhi.n	4686 <_dtoa_r+0x266>
    463a:	2b05      	cmp	r3, #5
    463c:	dd02      	ble.n	4644 <_dtoa_r+0x224>
    463e:	2500      	movs	r5, #0
    4640:	3b04      	subs	r3, #4
    4642:	9322      	str	r3, [sp, #136]	; 0x88
    4644:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4646:	1e98      	subs	r0, r3, #2
    4648:	2803      	cmp	r0, #3
    464a:	d824      	bhi.n	4696 <_dtoa_r+0x276>
    464c:	f001 fc5c 	bl	5f08 <__gnu_thumb1_case_uqi>
    4650:	04020e06 	.word	0x04020e06
    4654:	2301      	movs	r3, #1
    4656:	e002      	b.n	465e <_dtoa_r+0x23e>
    4658:	2301      	movs	r3, #1
    465a:	e008      	b.n	466e <_dtoa_r+0x24e>
    465c:	2300      	movs	r3, #0
    465e:	9310      	str	r3, [sp, #64]	; 0x40
    4660:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    4662:	2b00      	cmp	r3, #0
    4664:	dd20      	ble.n	46a8 <_dtoa_r+0x288>
    4666:	001f      	movs	r7, r3
    4668:	930a      	str	r3, [sp, #40]	; 0x28
    466a:	e021      	b.n	46b0 <_dtoa_r+0x290>
    466c:	2300      	movs	r3, #0
    466e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    4670:	9310      	str	r3, [sp, #64]	; 0x40
    4672:	9b03      	ldr	r3, [sp, #12]
    4674:	189f      	adds	r7, r3, r2
    4676:	1c7b      	adds	r3, r7, #1
    4678:	930a      	str	r3, [sp, #40]	; 0x28
    467a:	2301      	movs	r3, #1
    467c:	18fa      	adds	r2, r7, r3
    467e:	2a00      	cmp	r2, #0
    4680:	dd16      	ble.n	46b0 <_dtoa_r+0x290>
    4682:	0013      	movs	r3, r2
    4684:	e014      	b.n	46b0 <_dtoa_r+0x290>
    4686:	2701      	movs	r7, #1
    4688:	2300      	movs	r3, #0
    468a:	427f      	negs	r7, r7
    468c:	9322      	str	r3, [sp, #136]	; 0x88
    468e:	9510      	str	r5, [sp, #64]	; 0x40
    4690:	970a      	str	r7, [sp, #40]	; 0x28
    4692:	3312      	adds	r3, #18
    4694:	e005      	b.n	46a2 <_dtoa_r+0x282>
    4696:	2701      	movs	r7, #1
    4698:	2301      	movs	r3, #1
    469a:	427f      	negs	r7, r7
    469c:	9310      	str	r3, [sp, #64]	; 0x40
    469e:	970a      	str	r7, [sp, #40]	; 0x28
    46a0:	3311      	adds	r3, #17
    46a2:	2200      	movs	r2, #0
    46a4:	9223      	str	r2, [sp, #140]	; 0x8c
    46a6:	e003      	b.n	46b0 <_dtoa_r+0x290>
    46a8:	2701      	movs	r7, #1
    46aa:	003b      	movs	r3, r7
    46ac:	970a      	str	r7, [sp, #40]	; 0x28
    46ae:	9723      	str	r7, [sp, #140]	; 0x8c
    46b0:	9a04      	ldr	r2, [sp, #16]
    46b2:	6a54      	ldr	r4, [r2, #36]	; 0x24
    46b4:	2200      	movs	r2, #0
    46b6:	6062      	str	r2, [r4, #4]
    46b8:	3204      	adds	r2, #4
    46ba:	0011      	movs	r1, r2
    46bc:	3114      	adds	r1, #20
    46be:	4299      	cmp	r1, r3
    46c0:	d804      	bhi.n	46cc <_dtoa_r+0x2ac>
    46c2:	6861      	ldr	r1, [r4, #4]
    46c4:	0052      	lsls	r2, r2, #1
    46c6:	3101      	adds	r1, #1
    46c8:	6061      	str	r1, [r4, #4]
    46ca:	e7f6      	b.n	46ba <_dtoa_r+0x29a>
    46cc:	6861      	ldr	r1, [r4, #4]
    46ce:	9804      	ldr	r0, [sp, #16]
    46d0:	f000 fe71 	bl	53b6 <_Balloc>
    46d4:	9b04      	ldr	r3, [sp, #16]
    46d6:	6020      	str	r0, [r4, #0]
    46d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    46da:	681b      	ldr	r3, [r3, #0]
    46dc:	930d      	str	r3, [sp, #52]	; 0x34
    46de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    46e0:	2b0e      	cmp	r3, #14
    46e2:	d900      	bls.n	46e6 <_dtoa_r+0x2c6>
    46e4:	e181      	b.n	49ea <_dtoa_r+0x5ca>
    46e6:	2d00      	cmp	r5, #0
    46e8:	d100      	bne.n	46ec <_dtoa_r+0x2cc>
    46ea:	e17e      	b.n	49ea <_dtoa_r+0x5ca>
    46ec:	9b06      	ldr	r3, [sp, #24]
    46ee:	9c07      	ldr	r4, [sp, #28]
    46f0:	9314      	str	r3, [sp, #80]	; 0x50
    46f2:	9415      	str	r4, [sp, #84]	; 0x54
    46f4:	9b03      	ldr	r3, [sp, #12]
    46f6:	2b00      	cmp	r3, #0
    46f8:	dd31      	ble.n	475e <_dtoa_r+0x33e>
    46fa:	220f      	movs	r2, #15
    46fc:	493b      	ldr	r1, [pc, #236]	; (47ec <_dtoa_r+0x3cc>)
    46fe:	4013      	ands	r3, r2
    4700:	00db      	lsls	r3, r3, #3
    4702:	18cb      	adds	r3, r1, r3
    4704:	685c      	ldr	r4, [r3, #4]
    4706:	681b      	ldr	r3, [r3, #0]
    4708:	930e      	str	r3, [sp, #56]	; 0x38
    470a:	940f      	str	r4, [sp, #60]	; 0x3c
    470c:	9b03      	ldr	r3, [sp, #12]
    470e:	2402      	movs	r4, #2
    4710:	111d      	asrs	r5, r3, #4
    4712:	06eb      	lsls	r3, r5, #27
    4714:	d50a      	bpl.n	472c <_dtoa_r+0x30c>
    4716:	9814      	ldr	r0, [sp, #80]	; 0x50
    4718:	9915      	ldr	r1, [sp, #84]	; 0x54
    471a:	4b35      	ldr	r3, [pc, #212]	; (47f0 <_dtoa_r+0x3d0>)
    471c:	4015      	ands	r5, r2
    471e:	6a1a      	ldr	r2, [r3, #32]
    4720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4722:	f002 fddd 	bl	72e0 <__aeabi_ddiv>
    4726:	9006      	str	r0, [sp, #24]
    4728:	9107      	str	r1, [sp, #28]
    472a:	3401      	adds	r4, #1
    472c:	4e30      	ldr	r6, [pc, #192]	; (47f0 <_dtoa_r+0x3d0>)
    472e:	2d00      	cmp	r5, #0
    4730:	d00e      	beq.n	4750 <_dtoa_r+0x330>
    4732:	2301      	movs	r3, #1
    4734:	421d      	tst	r5, r3
    4736:	d008      	beq.n	474a <_dtoa_r+0x32a>
    4738:	980e      	ldr	r0, [sp, #56]	; 0x38
    473a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    473c:	18e4      	adds	r4, r4, r3
    473e:	6832      	ldr	r2, [r6, #0]
    4740:	6873      	ldr	r3, [r6, #4]
    4742:	f003 f9f1 	bl	7b28 <__aeabi_dmul>
    4746:	900e      	str	r0, [sp, #56]	; 0x38
    4748:	910f      	str	r1, [sp, #60]	; 0x3c
    474a:	106d      	asrs	r5, r5, #1
    474c:	3608      	adds	r6, #8
    474e:	e7ee      	b.n	472e <_dtoa_r+0x30e>
    4750:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4752:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4754:	9806      	ldr	r0, [sp, #24]
    4756:	9907      	ldr	r1, [sp, #28]
    4758:	f002 fdc2 	bl	72e0 <__aeabi_ddiv>
    475c:	e04c      	b.n	47f8 <_dtoa_r+0x3d8>
    475e:	9b03      	ldr	r3, [sp, #12]
    4760:	2402      	movs	r4, #2
    4762:	425d      	negs	r5, r3
    4764:	2d00      	cmp	r5, #0
    4766:	d049      	beq.n	47fc <_dtoa_r+0x3dc>
    4768:	9814      	ldr	r0, [sp, #80]	; 0x50
    476a:	9915      	ldr	r1, [sp, #84]	; 0x54
    476c:	230f      	movs	r3, #15
    476e:	4a1f      	ldr	r2, [pc, #124]	; (47ec <_dtoa_r+0x3cc>)
    4770:	402b      	ands	r3, r5
    4772:	00db      	lsls	r3, r3, #3
    4774:	18d3      	adds	r3, r2, r3
    4776:	681a      	ldr	r2, [r3, #0]
    4778:	685b      	ldr	r3, [r3, #4]
    477a:	f003 f9d5 	bl	7b28 <__aeabi_dmul>
    477e:	2300      	movs	r3, #0
    4780:	9006      	str	r0, [sp, #24]
    4782:	9107      	str	r1, [sp, #28]
    4784:	4e1a      	ldr	r6, [pc, #104]	; (47f0 <_dtoa_r+0x3d0>)
    4786:	112d      	asrs	r5, r5, #4
    4788:	2d00      	cmp	r5, #0
    478a:	d033      	beq.n	47f4 <_dtoa_r+0x3d4>
    478c:	2201      	movs	r2, #1
    478e:	4215      	tst	r5, r2
    4790:	d005      	beq.n	479e <_dtoa_r+0x37e>
    4792:	18a4      	adds	r4, r4, r2
    4794:	6832      	ldr	r2, [r6, #0]
    4796:	6873      	ldr	r3, [r6, #4]
    4798:	f003 f9c6 	bl	7b28 <__aeabi_dmul>
    479c:	2301      	movs	r3, #1
    479e:	106d      	asrs	r5, r5, #1
    47a0:	3608      	adds	r6, #8
    47a2:	e7f1      	b.n	4788 <_dtoa_r+0x368>
    47a4:	7ff00000 	.word	0x7ff00000
    47a8:	0000270f 	.word	0x0000270f
    47ac:	00008c05 	.word	0x00008c05
    47b0:	00008bfc 	.word	0x00008bfc
    47b4:	00008bd8 	.word	0x00008bd8
    47b8:	00008bd9 	.word	0x00008bd9
    47bc:	3ff00000 	.word	0x3ff00000
    47c0:	fffffc01 	.word	0xfffffc01
    47c4:	00000432 	.word	0x00000432
    47c8:	00000412 	.word	0x00000412
    47cc:	fe100000 	.word	0xfe100000
    47d0:	3ff80000 	.word	0x3ff80000
    47d4:	636f4361 	.word	0x636f4361
    47d8:	3fd287a7 	.word	0x3fd287a7
    47dc:	8b60c8b3 	.word	0x8b60c8b3
    47e0:	3fc68a28 	.word	0x3fc68a28
    47e4:	509f79fb 	.word	0x509f79fb
    47e8:	3fd34413 	.word	0x3fd34413
    47ec:	00008c78 	.word	0x00008c78
    47f0:	00008d40 	.word	0x00008d40
    47f4:	2b00      	cmp	r3, #0
    47f6:	d001      	beq.n	47fc <_dtoa_r+0x3dc>
    47f8:	9006      	str	r0, [sp, #24]
    47fa:	9107      	str	r1, [sp, #28]
    47fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    47fe:	2b00      	cmp	r3, #0
    4800:	d01d      	beq.n	483e <_dtoa_r+0x41e>
    4802:	9d06      	ldr	r5, [sp, #24]
    4804:	9e07      	ldr	r6, [sp, #28]
    4806:	2200      	movs	r2, #0
    4808:	4bc7      	ldr	r3, [pc, #796]	; (4b28 <_dtoa_r+0x708>)
    480a:	0028      	movs	r0, r5
    480c:	0031      	movs	r1, r6
    480e:	f001 fd11 	bl	6234 <__aeabi_dcmplt>
    4812:	2800      	cmp	r0, #0
    4814:	d013      	beq.n	483e <_dtoa_r+0x41e>
    4816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4818:	2b00      	cmp	r3, #0
    481a:	d010      	beq.n	483e <_dtoa_r+0x41e>
    481c:	2f00      	cmp	r7, #0
    481e:	dc00      	bgt.n	4822 <_dtoa_r+0x402>
    4820:	e0df      	b.n	49e2 <_dtoa_r+0x5c2>
    4822:	9b03      	ldr	r3, [sp, #12]
    4824:	0031      	movs	r1, r6
    4826:	3b01      	subs	r3, #1
    4828:	930e      	str	r3, [sp, #56]	; 0x38
    482a:	2200      	movs	r2, #0
    482c:	4bbf      	ldr	r3, [pc, #764]	; (4b2c <_dtoa_r+0x70c>)
    482e:	0028      	movs	r0, r5
    4830:	f003 f97a 	bl	7b28 <__aeabi_dmul>
    4834:	3401      	adds	r4, #1
    4836:	9006      	str	r0, [sp, #24]
    4838:	9107      	str	r1, [sp, #28]
    483a:	003e      	movs	r6, r7
    483c:	e002      	b.n	4844 <_dtoa_r+0x424>
    483e:	9b03      	ldr	r3, [sp, #12]
    4840:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    4842:	930e      	str	r3, [sp, #56]	; 0x38
    4844:	0020      	movs	r0, r4
    4846:	f003 ff93 	bl	8770 <__aeabi_i2d>
    484a:	9a06      	ldr	r2, [sp, #24]
    484c:	9b07      	ldr	r3, [sp, #28]
    484e:	f003 f96b 	bl	7b28 <__aeabi_dmul>
    4852:	2200      	movs	r2, #0
    4854:	4bb6      	ldr	r3, [pc, #728]	; (4b30 <_dtoa_r+0x710>)
    4856:	f002 fa17 	bl	6c88 <__aeabi_dadd>
    485a:	4ab6      	ldr	r2, [pc, #728]	; (4b34 <_dtoa_r+0x714>)
    485c:	9012      	str	r0, [sp, #72]	; 0x48
    485e:	9113      	str	r1, [sp, #76]	; 0x4c
    4860:	9c12      	ldr	r4, [sp, #72]	; 0x48
    4862:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    4864:	4694      	mov	ip, r2
    4866:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4868:	4463      	add	r3, ip
    486a:	9318      	str	r3, [sp, #96]	; 0x60
    486c:	001d      	movs	r5, r3
    486e:	2e00      	cmp	r6, #0
    4870:	d11c      	bne.n	48ac <_dtoa_r+0x48c>
    4872:	9806      	ldr	r0, [sp, #24]
    4874:	9907      	ldr	r1, [sp, #28]
    4876:	2200      	movs	r2, #0
    4878:	4baf      	ldr	r3, [pc, #700]	; (4b38 <_dtoa_r+0x718>)
    487a:	f003 fbcf 	bl	801c <__aeabi_dsub>
    487e:	0022      	movs	r2, r4
    4880:	9b18      	ldr	r3, [sp, #96]	; 0x60
    4882:	9006      	str	r0, [sp, #24]
    4884:	9107      	str	r1, [sp, #28]
    4886:	f001 fce9 	bl	625c <__aeabi_dcmpgt>
    488a:	2800      	cmp	r0, #0
    488c:	d000      	beq.n	4890 <_dtoa_r+0x470>
    488e:	e254      	b.n	4d3a <_dtoa_r+0x91a>
    4890:	48aa      	ldr	r0, [pc, #680]	; (4b3c <_dtoa_r+0x71c>)
    4892:	9913      	ldr	r1, [sp, #76]	; 0x4c
    4894:	4684      	mov	ip, r0
    4896:	4461      	add	r1, ip
    4898:	000b      	movs	r3, r1
    489a:	9806      	ldr	r0, [sp, #24]
    489c:	9907      	ldr	r1, [sp, #28]
    489e:	0022      	movs	r2, r4
    48a0:	f001 fcc8 	bl	6234 <__aeabi_dcmplt>
    48a4:	2800      	cmp	r0, #0
    48a6:	d000      	beq.n	48aa <_dtoa_r+0x48a>
    48a8:	e23d      	b.n	4d26 <_dtoa_r+0x906>
    48aa:	e09a      	b.n	49e2 <_dtoa_r+0x5c2>
    48ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
    48ae:	1e73      	subs	r3, r6, #1
    48b0:	49a3      	ldr	r1, [pc, #652]	; (4b40 <_dtoa_r+0x720>)
    48b2:	00db      	lsls	r3, r3, #3
    48b4:	2a00      	cmp	r2, #0
    48b6:	d049      	beq.n	494c <_dtoa_r+0x52c>
    48b8:	18cb      	adds	r3, r1, r3
    48ba:	681a      	ldr	r2, [r3, #0]
    48bc:	685b      	ldr	r3, [r3, #4]
    48be:	2000      	movs	r0, #0
    48c0:	49a0      	ldr	r1, [pc, #640]	; (4b44 <_dtoa_r+0x724>)
    48c2:	f002 fd0d 	bl	72e0 <__aeabi_ddiv>
    48c6:	002b      	movs	r3, r5
    48c8:	0022      	movs	r2, r4
    48ca:	f003 fba7 	bl	801c <__aeabi_dsub>
    48ce:	9012      	str	r0, [sp, #72]	; 0x48
    48d0:	9113      	str	r1, [sp, #76]	; 0x4c
    48d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    48d4:	9806      	ldr	r0, [sp, #24]
    48d6:	9907      	ldr	r1, [sp, #28]
    48d8:	f003 ff14 	bl	8704 <__aeabi_d2iz>
    48dc:	0004      	movs	r4, r0
    48de:	f003 ff47 	bl	8770 <__aeabi_i2d>
    48e2:	0002      	movs	r2, r0
    48e4:	000b      	movs	r3, r1
    48e6:	9806      	ldr	r0, [sp, #24]
    48e8:	9907      	ldr	r1, [sp, #28]
    48ea:	f003 fb97 	bl	801c <__aeabi_dsub>
    48ee:	3501      	adds	r5, #1
    48f0:	1e6b      	subs	r3, r5, #1
    48f2:	3430      	adds	r4, #48	; 0x30
    48f4:	701c      	strb	r4, [r3, #0]
    48f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    48f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    48fa:	9006      	str	r0, [sp, #24]
    48fc:	9107      	str	r1, [sp, #28]
    48fe:	f001 fc99 	bl	6234 <__aeabi_dcmplt>
    4902:	2800      	cmp	r0, #0
    4904:	d000      	beq.n	4908 <_dtoa_r+0x4e8>
    4906:	e32e      	b.n	4f66 <_dtoa_r+0xb46>
    4908:	9a06      	ldr	r2, [sp, #24]
    490a:	9b07      	ldr	r3, [sp, #28]
    490c:	2000      	movs	r0, #0
    490e:	4986      	ldr	r1, [pc, #536]	; (4b28 <_dtoa_r+0x708>)
    4910:	f003 fb84 	bl	801c <__aeabi_dsub>
    4914:	9a12      	ldr	r2, [sp, #72]	; 0x48
    4916:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4918:	f001 fc8c 	bl	6234 <__aeabi_dcmplt>
    491c:	2800      	cmp	r0, #0
    491e:	d000      	beq.n	4922 <_dtoa_r+0x502>
    4920:	e0c7      	b.n	4ab2 <_dtoa_r+0x692>
    4922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4924:	1aeb      	subs	r3, r5, r3
    4926:	42b3      	cmp	r3, r6
    4928:	da5b      	bge.n	49e2 <_dtoa_r+0x5c2>
    492a:	9812      	ldr	r0, [sp, #72]	; 0x48
    492c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    492e:	2200      	movs	r2, #0
    4930:	4b7e      	ldr	r3, [pc, #504]	; (4b2c <_dtoa_r+0x70c>)
    4932:	f003 f8f9 	bl	7b28 <__aeabi_dmul>
    4936:	2200      	movs	r2, #0
    4938:	9012      	str	r0, [sp, #72]	; 0x48
    493a:	9113      	str	r1, [sp, #76]	; 0x4c
    493c:	9806      	ldr	r0, [sp, #24]
    493e:	9907      	ldr	r1, [sp, #28]
    4940:	4b7a      	ldr	r3, [pc, #488]	; (4b2c <_dtoa_r+0x70c>)
    4942:	f003 f8f1 	bl	7b28 <__aeabi_dmul>
    4946:	9006      	str	r0, [sp, #24]
    4948:	9107      	str	r1, [sp, #28]
    494a:	e7c3      	b.n	48d4 <_dtoa_r+0x4b4>
    494c:	18c9      	adds	r1, r1, r3
    494e:	0022      	movs	r2, r4
    4950:	6808      	ldr	r0, [r1, #0]
    4952:	6849      	ldr	r1, [r1, #4]
    4954:	002b      	movs	r3, r5
    4956:	f003 f8e7 	bl	7b28 <__aeabi_dmul>
    495a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    495c:	9012      	str	r0, [sp, #72]	; 0x48
    495e:	9113      	str	r1, [sp, #76]	; 0x4c
    4960:	19a5      	adds	r5, r4, r6
    4962:	9806      	ldr	r0, [sp, #24]
    4964:	9907      	ldr	r1, [sp, #28]
    4966:	f003 fecd 	bl	8704 <__aeabi_d2iz>
    496a:	0006      	movs	r6, r0
    496c:	f003 ff00 	bl	8770 <__aeabi_i2d>
    4970:	0002      	movs	r2, r0
    4972:	000b      	movs	r3, r1
    4974:	9806      	ldr	r0, [sp, #24]
    4976:	9907      	ldr	r1, [sp, #28]
    4978:	f003 fb50 	bl	801c <__aeabi_dsub>
    497c:	3630      	adds	r6, #48	; 0x30
    497e:	7026      	strb	r6, [r4, #0]
    4980:	3401      	adds	r4, #1
    4982:	9006      	str	r0, [sp, #24]
    4984:	9107      	str	r1, [sp, #28]
    4986:	2200      	movs	r2, #0
    4988:	42a5      	cmp	r5, r4
    498a:	d122      	bne.n	49d2 <_dtoa_r+0x5b2>
    498c:	4b6d      	ldr	r3, [pc, #436]	; (4b44 <_dtoa_r+0x724>)
    498e:	9812      	ldr	r0, [sp, #72]	; 0x48
    4990:	9913      	ldr	r1, [sp, #76]	; 0x4c
    4992:	f002 f979 	bl	6c88 <__aeabi_dadd>
    4996:	0002      	movs	r2, r0
    4998:	000b      	movs	r3, r1
    499a:	9806      	ldr	r0, [sp, #24]
    499c:	9907      	ldr	r1, [sp, #28]
    499e:	f001 fc5d 	bl	625c <__aeabi_dcmpgt>
    49a2:	2800      	cmp	r0, #0
    49a4:	d000      	beq.n	49a8 <_dtoa_r+0x588>
    49a6:	e084      	b.n	4ab2 <_dtoa_r+0x692>
    49a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    49aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    49ac:	2000      	movs	r0, #0
    49ae:	4965      	ldr	r1, [pc, #404]	; (4b44 <_dtoa_r+0x724>)
    49b0:	f003 fb34 	bl	801c <__aeabi_dsub>
    49b4:	0002      	movs	r2, r0
    49b6:	000b      	movs	r3, r1
    49b8:	9806      	ldr	r0, [sp, #24]
    49ba:	9907      	ldr	r1, [sp, #28]
    49bc:	f001 fc3a 	bl	6234 <__aeabi_dcmplt>
    49c0:	2800      	cmp	r0, #0
    49c2:	d00e      	beq.n	49e2 <_dtoa_r+0x5c2>
    49c4:	1e6b      	subs	r3, r5, #1
    49c6:	781a      	ldrb	r2, [r3, #0]
    49c8:	2a30      	cmp	r2, #48	; 0x30
    49ca:	d000      	beq.n	49ce <_dtoa_r+0x5ae>
    49cc:	e2cb      	b.n	4f66 <_dtoa_r+0xb46>
    49ce:	001d      	movs	r5, r3
    49d0:	e7f8      	b.n	49c4 <_dtoa_r+0x5a4>
    49d2:	9806      	ldr	r0, [sp, #24]
    49d4:	9907      	ldr	r1, [sp, #28]
    49d6:	4b55      	ldr	r3, [pc, #340]	; (4b2c <_dtoa_r+0x70c>)
    49d8:	f003 f8a6 	bl	7b28 <__aeabi_dmul>
    49dc:	9006      	str	r0, [sp, #24]
    49de:	9107      	str	r1, [sp, #28]
    49e0:	e7bf      	b.n	4962 <_dtoa_r+0x542>
    49e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    49e4:	9c15      	ldr	r4, [sp, #84]	; 0x54
    49e6:	9306      	str	r3, [sp, #24]
    49e8:	9407      	str	r4, [sp, #28]
    49ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    49ec:	2b00      	cmp	r3, #0
    49ee:	da00      	bge.n	49f2 <_dtoa_r+0x5d2>
    49f0:	e081      	b.n	4af6 <_dtoa_r+0x6d6>
    49f2:	9a03      	ldr	r2, [sp, #12]
    49f4:	2a0e      	cmp	r2, #14
    49f6:	dd00      	ble.n	49fa <_dtoa_r+0x5da>
    49f8:	e07d      	b.n	4af6 <_dtoa_r+0x6d6>
    49fa:	00d3      	lsls	r3, r2, #3
    49fc:	4a50      	ldr	r2, [pc, #320]	; (4b40 <_dtoa_r+0x720>)
    49fe:	18d3      	adds	r3, r2, r3
    4a00:	685c      	ldr	r4, [r3, #4]
    4a02:	681b      	ldr	r3, [r3, #0]
    4a04:	9308      	str	r3, [sp, #32]
    4a06:	9409      	str	r4, [sp, #36]	; 0x24
    4a08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    4a0a:	2b00      	cmp	r3, #0
    4a0c:	da15      	bge.n	4a3a <_dtoa_r+0x61a>
    4a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4a10:	2b00      	cmp	r3, #0
    4a12:	dc12      	bgt.n	4a3a <_dtoa_r+0x61a>
    4a14:	d000      	beq.n	4a18 <_dtoa_r+0x5f8>
    4a16:	e188      	b.n	4d2a <_dtoa_r+0x90a>
    4a18:	9808      	ldr	r0, [sp, #32]
    4a1a:	9909      	ldr	r1, [sp, #36]	; 0x24
    4a1c:	2200      	movs	r2, #0
    4a1e:	4b46      	ldr	r3, [pc, #280]	; (4b38 <_dtoa_r+0x718>)
    4a20:	f003 f882 	bl	7b28 <__aeabi_dmul>
    4a24:	9a06      	ldr	r2, [sp, #24]
    4a26:	9b07      	ldr	r3, [sp, #28]
    4a28:	f001 fc22 	bl	6270 <__aeabi_dcmpge>
    4a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4a2e:	9308      	str	r3, [sp, #32]
    4a30:	001e      	movs	r6, r3
    4a32:	2800      	cmp	r0, #0
    4a34:	d000      	beq.n	4a38 <_dtoa_r+0x618>
    4a36:	e17b      	b.n	4d30 <_dtoa_r+0x910>
    4a38:	e182      	b.n	4d40 <_dtoa_r+0x920>
    4a3a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4a3c:	9e06      	ldr	r6, [sp, #24]
    4a3e:	9f07      	ldr	r7, [sp, #28]
    4a40:	9a08      	ldr	r2, [sp, #32]
    4a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4a44:	0030      	movs	r0, r6
    4a46:	0039      	movs	r1, r7
    4a48:	f002 fc4a 	bl	72e0 <__aeabi_ddiv>
    4a4c:	f003 fe5a 	bl	8704 <__aeabi_d2iz>
    4a50:	0004      	movs	r4, r0
    4a52:	f003 fe8d 	bl	8770 <__aeabi_i2d>
    4a56:	9a08      	ldr	r2, [sp, #32]
    4a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4a5a:	f003 f865 	bl	7b28 <__aeabi_dmul>
    4a5e:	0002      	movs	r2, r0
    4a60:	000b      	movs	r3, r1
    4a62:	0030      	movs	r0, r6
    4a64:	0039      	movs	r1, r7
    4a66:	f003 fad9 	bl	801c <__aeabi_dsub>
    4a6a:	0022      	movs	r2, r4
    4a6c:	3501      	adds	r5, #1
    4a6e:	1e6b      	subs	r3, r5, #1
    4a70:	3230      	adds	r2, #48	; 0x30
    4a72:	701a      	strb	r2, [r3, #0]
    4a74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4a76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4a78:	1aeb      	subs	r3, r5, r3
    4a7a:	429a      	cmp	r2, r3
    4a7c:	d12e      	bne.n	4adc <_dtoa_r+0x6bc>
    4a7e:	0002      	movs	r2, r0
    4a80:	000b      	movs	r3, r1
    4a82:	f002 f901 	bl	6c88 <__aeabi_dadd>
    4a86:	0006      	movs	r6, r0
    4a88:	000f      	movs	r7, r1
    4a8a:	0002      	movs	r2, r0
    4a8c:	000b      	movs	r3, r1
    4a8e:	9808      	ldr	r0, [sp, #32]
    4a90:	9909      	ldr	r1, [sp, #36]	; 0x24
    4a92:	f001 fbcf 	bl	6234 <__aeabi_dcmplt>
    4a96:	2800      	cmp	r0, #0
    4a98:	d10f      	bne.n	4aba <_dtoa_r+0x69a>
    4a9a:	9808      	ldr	r0, [sp, #32]
    4a9c:	9909      	ldr	r1, [sp, #36]	; 0x24
    4a9e:	0032      	movs	r2, r6
    4aa0:	003b      	movs	r3, r7
    4aa2:	f001 fbc1 	bl	6228 <__aeabi_dcmpeq>
    4aa6:	2800      	cmp	r0, #0
    4aa8:	d100      	bne.n	4aac <_dtoa_r+0x68c>
    4aaa:	e25e      	b.n	4f6a <_dtoa_r+0xb4a>
    4aac:	07e3      	lsls	r3, r4, #31
    4aae:	d404      	bmi.n	4aba <_dtoa_r+0x69a>
    4ab0:	e25b      	b.n	4f6a <_dtoa_r+0xb4a>
    4ab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4ab4:	9303      	str	r3, [sp, #12]
    4ab6:	e000      	b.n	4aba <_dtoa_r+0x69a>
    4ab8:	001d      	movs	r5, r3
    4aba:	1e6b      	subs	r3, r5, #1
    4abc:	781a      	ldrb	r2, [r3, #0]
    4abe:	2a39      	cmp	r2, #57	; 0x39
    4ac0:	d108      	bne.n	4ad4 <_dtoa_r+0x6b4>
    4ac2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4ac4:	429a      	cmp	r2, r3
    4ac6:	d1f7      	bne.n	4ab8 <_dtoa_r+0x698>
    4ac8:	9a03      	ldr	r2, [sp, #12]
    4aca:	990d      	ldr	r1, [sp, #52]	; 0x34
    4acc:	3201      	adds	r2, #1
    4ace:	9203      	str	r2, [sp, #12]
    4ad0:	2230      	movs	r2, #48	; 0x30
    4ad2:	700a      	strb	r2, [r1, #0]
    4ad4:	781a      	ldrb	r2, [r3, #0]
    4ad6:	3201      	adds	r2, #1
    4ad8:	701a      	strb	r2, [r3, #0]
    4ada:	e246      	b.n	4f6a <_dtoa_r+0xb4a>
    4adc:	2200      	movs	r2, #0
    4ade:	4b13      	ldr	r3, [pc, #76]	; (4b2c <_dtoa_r+0x70c>)
    4ae0:	f003 f822 	bl	7b28 <__aeabi_dmul>
    4ae4:	2200      	movs	r2, #0
    4ae6:	2300      	movs	r3, #0
    4ae8:	0006      	movs	r6, r0
    4aea:	000f      	movs	r7, r1
    4aec:	f001 fb9c 	bl	6228 <__aeabi_dcmpeq>
    4af0:	2800      	cmp	r0, #0
    4af2:	d0a5      	beq.n	4a40 <_dtoa_r+0x620>
    4af4:	e239      	b.n	4f6a <_dtoa_r+0xb4a>
    4af6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4af8:	2a00      	cmp	r2, #0
    4afa:	d044      	beq.n	4b86 <_dtoa_r+0x766>
    4afc:	9a22      	ldr	r2, [sp, #136]	; 0x88
    4afe:	2a01      	cmp	r2, #1
    4b00:	dc0b      	bgt.n	4b1a <_dtoa_r+0x6fa>
    4b02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    4b04:	2a00      	cmp	r2, #0
    4b06:	d002      	beq.n	4b0e <_dtoa_r+0x6ee>
    4b08:	4a0f      	ldr	r2, [pc, #60]	; (4b48 <_dtoa_r+0x728>)
    4b0a:	189b      	adds	r3, r3, r2
    4b0c:	e002      	b.n	4b14 <_dtoa_r+0x6f4>
    4b0e:	2336      	movs	r3, #54	; 0x36
    4b10:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    4b12:	1a9b      	subs	r3, r3, r2
    4b14:	9d08      	ldr	r5, [sp, #32]
    4b16:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4b18:	e029      	b.n	4b6e <_dtoa_r+0x74e>
    4b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4b1c:	1e5d      	subs	r5, r3, #1
    4b1e:	9b08      	ldr	r3, [sp, #32]
    4b20:	42ab      	cmp	r3, r5
    4b22:	db13      	blt.n	4b4c <_dtoa_r+0x72c>
    4b24:	1b5d      	subs	r5, r3, r5
    4b26:	e018      	b.n	4b5a <_dtoa_r+0x73a>
    4b28:	3ff00000 	.word	0x3ff00000
    4b2c:	40240000 	.word	0x40240000
    4b30:	401c0000 	.word	0x401c0000
    4b34:	fcc00000 	.word	0xfcc00000
    4b38:	40140000 	.word	0x40140000
    4b3c:	7cc00000 	.word	0x7cc00000
    4b40:	00008c78 	.word	0x00008c78
    4b44:	3fe00000 	.word	0x3fe00000
    4b48:	00000433 	.word	0x00000433
    4b4c:	9b08      	ldr	r3, [sp, #32]
    4b4e:	9508      	str	r5, [sp, #32]
    4b50:	1aea      	subs	r2, r5, r3
    4b52:	2500      	movs	r5, #0
    4b54:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4b56:	189b      	adds	r3, r3, r2
    4b58:	9311      	str	r3, [sp, #68]	; 0x44
    4b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4b5c:	2b00      	cmp	r3, #0
    4b5e:	da04      	bge.n	4b6a <_dtoa_r+0x74a>
    4b60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4b62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4b64:	1a9c      	subs	r4, r3, r2
    4b66:	2300      	movs	r3, #0
    4b68:	e001      	b.n	4b6e <_dtoa_r+0x74e>
    4b6a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4b6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4b70:	2101      	movs	r1, #1
    4b72:	18d2      	adds	r2, r2, r3
    4b74:	920b      	str	r2, [sp, #44]	; 0x2c
    4b76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4b78:	9804      	ldr	r0, [sp, #16]
    4b7a:	18d3      	adds	r3, r2, r3
    4b7c:	930c      	str	r3, [sp, #48]	; 0x30
    4b7e:	f000 fcf2 	bl	5566 <__i2b>
    4b82:	0006      	movs	r6, r0
    4b84:	e002      	b.n	4b8c <_dtoa_r+0x76c>
    4b86:	9d08      	ldr	r5, [sp, #32]
    4b88:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4b8a:	9e10      	ldr	r6, [sp, #64]	; 0x40
    4b8c:	2c00      	cmp	r4, #0
    4b8e:	d00e      	beq.n	4bae <_dtoa_r+0x78e>
    4b90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4b92:	2b00      	cmp	r3, #0
    4b94:	dd0b      	ble.n	4bae <_dtoa_r+0x78e>
    4b96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4b98:	1e23      	subs	r3, r4, #0
    4b9a:	4293      	cmp	r3, r2
    4b9c:	dd00      	ble.n	4ba0 <_dtoa_r+0x780>
    4b9e:	0013      	movs	r3, r2
    4ba0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4ba2:	1ae4      	subs	r4, r4, r3
    4ba4:	1ad2      	subs	r2, r2, r3
    4ba6:	920b      	str	r2, [sp, #44]	; 0x2c
    4ba8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4baa:	1ad3      	subs	r3, r2, r3
    4bac:	930c      	str	r3, [sp, #48]	; 0x30
    4bae:	9b08      	ldr	r3, [sp, #32]
    4bb0:	2b00      	cmp	r3, #0
    4bb2:	dd20      	ble.n	4bf6 <_dtoa_r+0x7d6>
    4bb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4bb6:	2b00      	cmp	r3, #0
    4bb8:	d017      	beq.n	4bea <_dtoa_r+0x7ca>
    4bba:	2d00      	cmp	r5, #0
    4bbc:	d011      	beq.n	4be2 <_dtoa_r+0x7c2>
    4bbe:	0031      	movs	r1, r6
    4bc0:	002a      	movs	r2, r5
    4bc2:	9804      	ldr	r0, [sp, #16]
    4bc4:	f000 fd62 	bl	568c <__pow5mult>
    4bc8:	9a05      	ldr	r2, [sp, #20]
    4bca:	0001      	movs	r1, r0
    4bcc:	0006      	movs	r6, r0
    4bce:	9804      	ldr	r0, [sp, #16]
    4bd0:	f000 fcd2 	bl	5578 <__multiply>
    4bd4:	9905      	ldr	r1, [sp, #20]
    4bd6:	900e      	str	r0, [sp, #56]	; 0x38
    4bd8:	9804      	ldr	r0, [sp, #16]
    4bda:	f000 fc24 	bl	5426 <_Bfree>
    4bde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4be0:	9305      	str	r3, [sp, #20]
    4be2:	9b08      	ldr	r3, [sp, #32]
    4be4:	1b5a      	subs	r2, r3, r5
    4be6:	d006      	beq.n	4bf6 <_dtoa_r+0x7d6>
    4be8:	e000      	b.n	4bec <_dtoa_r+0x7cc>
    4bea:	9a08      	ldr	r2, [sp, #32]
    4bec:	9905      	ldr	r1, [sp, #20]
    4bee:	9804      	ldr	r0, [sp, #16]
    4bf0:	f000 fd4c 	bl	568c <__pow5mult>
    4bf4:	9005      	str	r0, [sp, #20]
    4bf6:	2101      	movs	r1, #1
    4bf8:	9804      	ldr	r0, [sp, #16]
    4bfa:	f000 fcb4 	bl	5566 <__i2b>
    4bfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4c00:	9008      	str	r0, [sp, #32]
    4c02:	2b00      	cmp	r3, #0
    4c04:	d100      	bne.n	4c08 <_dtoa_r+0x7e8>
    4c06:	e1c0      	b.n	4f8a <_dtoa_r+0xb6a>
    4c08:	001a      	movs	r2, r3
    4c0a:	0001      	movs	r1, r0
    4c0c:	9804      	ldr	r0, [sp, #16]
    4c0e:	f000 fd3d 	bl	568c <__pow5mult>
    4c12:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4c14:	9008      	str	r0, [sp, #32]
    4c16:	2b01      	cmp	r3, #1
    4c18:	dc17      	bgt.n	4c4a <_dtoa_r+0x82a>
    4c1a:	2500      	movs	r5, #0
    4c1c:	9b06      	ldr	r3, [sp, #24]
    4c1e:	42ab      	cmp	r3, r5
    4c20:	d10e      	bne.n	4c40 <_dtoa_r+0x820>
    4c22:	9b07      	ldr	r3, [sp, #28]
    4c24:	031b      	lsls	r3, r3, #12
    4c26:	42ab      	cmp	r3, r5
    4c28:	d10a      	bne.n	4c40 <_dtoa_r+0x820>
    4c2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4c2c:	9a07      	ldr	r2, [sp, #28]
    4c2e:	4213      	tst	r3, r2
    4c30:	d006      	beq.n	4c40 <_dtoa_r+0x820>
    4c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4c34:	3501      	adds	r5, #1
    4c36:	3301      	adds	r3, #1
    4c38:	930b      	str	r3, [sp, #44]	; 0x2c
    4c3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4c3c:	3301      	adds	r3, #1
    4c3e:	930c      	str	r3, [sp, #48]	; 0x30
    4c40:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4c42:	2001      	movs	r0, #1
    4c44:	2b00      	cmp	r3, #0
    4c46:	d00d      	beq.n	4c64 <_dtoa_r+0x844>
    4c48:	e000      	b.n	4c4c <_dtoa_r+0x82c>
    4c4a:	2500      	movs	r5, #0
    4c4c:	9b08      	ldr	r3, [sp, #32]
    4c4e:	9a08      	ldr	r2, [sp, #32]
    4c50:	691b      	ldr	r3, [r3, #16]
    4c52:	930e      	str	r3, [sp, #56]	; 0x38
    4c54:	3303      	adds	r3, #3
    4c56:	009b      	lsls	r3, r3, #2
    4c58:	18d3      	adds	r3, r2, r3
    4c5a:	6858      	ldr	r0, [r3, #4]
    4c5c:	f000 fc39 	bl	54d2 <__hi0bits>
    4c60:	2320      	movs	r3, #32
    4c62:	1a18      	subs	r0, r3, r0
    4c64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4c66:	18c0      	adds	r0, r0, r3
    4c68:	231f      	movs	r3, #31
    4c6a:	4018      	ands	r0, r3
    4c6c:	d009      	beq.n	4c82 <_dtoa_r+0x862>
    4c6e:	3301      	adds	r3, #1
    4c70:	1a1b      	subs	r3, r3, r0
    4c72:	2b04      	cmp	r3, #4
    4c74:	dd02      	ble.n	4c7c <_dtoa_r+0x85c>
    4c76:	231c      	movs	r3, #28
    4c78:	1a18      	subs	r0, r3, r0
    4c7a:	e003      	b.n	4c84 <_dtoa_r+0x864>
    4c7c:	2b04      	cmp	r3, #4
    4c7e:	d008      	beq.n	4c92 <_dtoa_r+0x872>
    4c80:	0018      	movs	r0, r3
    4c82:	301c      	adds	r0, #28
    4c84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4c86:	1824      	adds	r4, r4, r0
    4c88:	181b      	adds	r3, r3, r0
    4c8a:	930b      	str	r3, [sp, #44]	; 0x2c
    4c8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4c8e:	181b      	adds	r3, r3, r0
    4c90:	930c      	str	r3, [sp, #48]	; 0x30
    4c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4c94:	2b00      	cmp	r3, #0
    4c96:	dd05      	ble.n	4ca4 <_dtoa_r+0x884>
    4c98:	001a      	movs	r2, r3
    4c9a:	9905      	ldr	r1, [sp, #20]
    4c9c:	9804      	ldr	r0, [sp, #16]
    4c9e:	f000 fd49 	bl	5734 <__lshift>
    4ca2:	9005      	str	r0, [sp, #20]
    4ca4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4ca6:	2b00      	cmp	r3, #0
    4ca8:	dd05      	ble.n	4cb6 <_dtoa_r+0x896>
    4caa:	001a      	movs	r2, r3
    4cac:	9908      	ldr	r1, [sp, #32]
    4cae:	9804      	ldr	r0, [sp, #16]
    4cb0:	f000 fd40 	bl	5734 <__lshift>
    4cb4:	9008      	str	r0, [sp, #32]
    4cb6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4cb8:	2b00      	cmp	r3, #0
    4cba:	d01d      	beq.n	4cf8 <_dtoa_r+0x8d8>
    4cbc:	9908      	ldr	r1, [sp, #32]
    4cbe:	9805      	ldr	r0, [sp, #20]
    4cc0:	f000 fd8a 	bl	57d8 <__mcmp>
    4cc4:	2800      	cmp	r0, #0
    4cc6:	da17      	bge.n	4cf8 <_dtoa_r+0x8d8>
    4cc8:	9b03      	ldr	r3, [sp, #12]
    4cca:	220a      	movs	r2, #10
    4ccc:	3b01      	subs	r3, #1
    4cce:	9303      	str	r3, [sp, #12]
    4cd0:	9905      	ldr	r1, [sp, #20]
    4cd2:	2300      	movs	r3, #0
    4cd4:	9804      	ldr	r0, [sp, #16]
    4cd6:	f000 fbbf 	bl	5458 <__multadd>
    4cda:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4cdc:	9005      	str	r0, [sp, #20]
    4cde:	2b00      	cmp	r3, #0
    4ce0:	d100      	bne.n	4ce4 <_dtoa_r+0x8c4>
    4ce2:	e159      	b.n	4f98 <_dtoa_r+0xb78>
    4ce4:	0031      	movs	r1, r6
    4ce6:	2300      	movs	r3, #0
    4ce8:	220a      	movs	r2, #10
    4cea:	9804      	ldr	r0, [sp, #16]
    4cec:	f000 fbb4 	bl	5458 <__multadd>
    4cf0:	0006      	movs	r6, r0
    4cf2:	2f00      	cmp	r7, #0
    4cf4:	dc37      	bgt.n	4d66 <_dtoa_r+0x946>
    4cf6:	e033      	b.n	4d60 <_dtoa_r+0x940>
    4cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4cfa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    4cfc:	2b00      	cmp	r3, #0
    4cfe:	dc2a      	bgt.n	4d56 <_dtoa_r+0x936>
    4d00:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4d02:	2b02      	cmp	r3, #2
    4d04:	dd27      	ble.n	4d56 <_dtoa_r+0x936>
    4d06:	2f00      	cmp	r7, #0
    4d08:	d112      	bne.n	4d30 <_dtoa_r+0x910>
    4d0a:	9908      	ldr	r1, [sp, #32]
    4d0c:	003b      	movs	r3, r7
    4d0e:	2205      	movs	r2, #5
    4d10:	9804      	ldr	r0, [sp, #16]
    4d12:	f000 fba1 	bl	5458 <__multadd>
    4d16:	9008      	str	r0, [sp, #32]
    4d18:	0001      	movs	r1, r0
    4d1a:	9805      	ldr	r0, [sp, #20]
    4d1c:	f000 fd5c 	bl	57d8 <__mcmp>
    4d20:	2800      	cmp	r0, #0
    4d22:	dc0d      	bgt.n	4d40 <_dtoa_r+0x920>
    4d24:	e004      	b.n	4d30 <_dtoa_r+0x910>
    4d26:	9608      	str	r6, [sp, #32]
    4d28:	e002      	b.n	4d30 <_dtoa_r+0x910>
    4d2a:	2300      	movs	r3, #0
    4d2c:	001e      	movs	r6, r3
    4d2e:	9308      	str	r3, [sp, #32]
    4d30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    4d32:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4d34:	43db      	mvns	r3, r3
    4d36:	9303      	str	r3, [sp, #12]
    4d38:	e00a      	b.n	4d50 <_dtoa_r+0x930>
    4d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4d3c:	9608      	str	r6, [sp, #32]
    4d3e:	9303      	str	r3, [sp, #12]
    4d40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4d42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4d44:	1c5d      	adds	r5, r3, #1
    4d46:	2331      	movs	r3, #49	; 0x31
    4d48:	7013      	strb	r3, [r2, #0]
    4d4a:	9b03      	ldr	r3, [sp, #12]
    4d4c:	3301      	adds	r3, #1
    4d4e:	9303      	str	r3, [sp, #12]
    4d50:	960a      	str	r6, [sp, #40]	; 0x28
    4d52:	2600      	movs	r6, #0
    4d54:	e0f3      	b.n	4f3e <_dtoa_r+0xb1e>
    4d56:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4d58:	2b00      	cmp	r3, #0
    4d5a:	d104      	bne.n	4d66 <_dtoa_r+0x946>
    4d5c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4d5e:	e0b5      	b.n	4ecc <_dtoa_r+0xaac>
    4d60:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4d62:	2b02      	cmp	r3, #2
    4d64:	dccf      	bgt.n	4d06 <_dtoa_r+0x8e6>
    4d66:	2c00      	cmp	r4, #0
    4d68:	dd05      	ble.n	4d76 <_dtoa_r+0x956>
    4d6a:	0031      	movs	r1, r6
    4d6c:	0022      	movs	r2, r4
    4d6e:	9804      	ldr	r0, [sp, #16]
    4d70:	f000 fce0 	bl	5734 <__lshift>
    4d74:	0006      	movs	r6, r0
    4d76:	960a      	str	r6, [sp, #40]	; 0x28
    4d78:	2d00      	cmp	r5, #0
    4d7a:	d012      	beq.n	4da2 <_dtoa_r+0x982>
    4d7c:	6871      	ldr	r1, [r6, #4]
    4d7e:	9804      	ldr	r0, [sp, #16]
    4d80:	f000 fb19 	bl	53b6 <_Balloc>
    4d84:	0031      	movs	r1, r6
    4d86:	0004      	movs	r4, r0
    4d88:	6933      	ldr	r3, [r6, #16]
    4d8a:	310c      	adds	r1, #12
    4d8c:	1c9a      	adds	r2, r3, #2
    4d8e:	0092      	lsls	r2, r2, #2
    4d90:	300c      	adds	r0, #12
    4d92:	f7fe fc21 	bl	35d8 <memcpy>
    4d96:	2201      	movs	r2, #1
    4d98:	0021      	movs	r1, r4
    4d9a:	9804      	ldr	r0, [sp, #16]
    4d9c:	f000 fcca 	bl	5734 <__lshift>
    4da0:	900a      	str	r0, [sp, #40]	; 0x28
    4da2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4da4:	1e7d      	subs	r5, r7, #1
    4da6:	930b      	str	r3, [sp, #44]	; 0x2c
    4da8:	195b      	adds	r3, r3, r5
    4daa:	930e      	str	r3, [sp, #56]	; 0x38
    4dac:	9908      	ldr	r1, [sp, #32]
    4dae:	9805      	ldr	r0, [sp, #20]
    4db0:	f7ff fab0 	bl	4314 <quorem>
    4db4:	0031      	movs	r1, r6
    4db6:	9010      	str	r0, [sp, #64]	; 0x40
    4db8:	0004      	movs	r4, r0
    4dba:	9805      	ldr	r0, [sp, #20]
    4dbc:	f000 fd0c 	bl	57d8 <__mcmp>
    4dc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4dc2:	0005      	movs	r5, r0
    4dc4:	9908      	ldr	r1, [sp, #32]
    4dc6:	9804      	ldr	r0, [sp, #16]
    4dc8:	f000 fd21 	bl	580e <__mdiff>
    4dcc:	2301      	movs	r3, #1
    4dce:	930c      	str	r3, [sp, #48]	; 0x30
    4dd0:	68c3      	ldr	r3, [r0, #12]
    4dd2:	3430      	adds	r4, #48	; 0x30
    4dd4:	0007      	movs	r7, r0
    4dd6:	2b00      	cmp	r3, #0
    4dd8:	d104      	bne.n	4de4 <_dtoa_r+0x9c4>
    4dda:	0001      	movs	r1, r0
    4ddc:	9805      	ldr	r0, [sp, #20]
    4dde:	f000 fcfb 	bl	57d8 <__mcmp>
    4de2:	900c      	str	r0, [sp, #48]	; 0x30
    4de4:	0039      	movs	r1, r7
    4de6:	9804      	ldr	r0, [sp, #16]
    4de8:	f000 fb1d 	bl	5426 <_Bfree>
    4dec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4dee:	9a22      	ldr	r2, [sp, #136]	; 0x88
    4df0:	4313      	orrs	r3, r2
    4df2:	d108      	bne.n	4e06 <_dtoa_r+0x9e6>
    4df4:	9a06      	ldr	r2, [sp, #24]
    4df6:	3301      	adds	r3, #1
    4df8:	4213      	tst	r3, r2
    4dfa:	d104      	bne.n	4e06 <_dtoa_r+0x9e6>
    4dfc:	2c39      	cmp	r4, #57	; 0x39
    4dfe:	d02a      	beq.n	4e56 <_dtoa_r+0xa36>
    4e00:	2d00      	cmp	r5, #0
    4e02:	dc1c      	bgt.n	4e3e <_dtoa_r+0xa1e>
    4e04:	e01d      	b.n	4e42 <_dtoa_r+0xa22>
    4e06:	2d00      	cmp	r5, #0
    4e08:	db06      	blt.n	4e18 <_dtoa_r+0x9f8>
    4e0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4e0c:	431d      	orrs	r5, r3
    4e0e:	d11b      	bne.n	4e48 <_dtoa_r+0xa28>
    4e10:	2301      	movs	r3, #1
    4e12:	9a06      	ldr	r2, [sp, #24]
    4e14:	4213      	tst	r3, r2
    4e16:	d117      	bne.n	4e48 <_dtoa_r+0xa28>
    4e18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4e1a:	2b00      	cmp	r3, #0
    4e1c:	dd11      	ble.n	4e42 <_dtoa_r+0xa22>
    4e1e:	9905      	ldr	r1, [sp, #20]
    4e20:	2201      	movs	r2, #1
    4e22:	9804      	ldr	r0, [sp, #16]
    4e24:	f000 fc86 	bl	5734 <__lshift>
    4e28:	9908      	ldr	r1, [sp, #32]
    4e2a:	9005      	str	r0, [sp, #20]
    4e2c:	f000 fcd4 	bl	57d8 <__mcmp>
    4e30:	2800      	cmp	r0, #0
    4e32:	dc02      	bgt.n	4e3a <_dtoa_r+0xa1a>
    4e34:	d105      	bne.n	4e42 <_dtoa_r+0xa22>
    4e36:	07e3      	lsls	r3, r4, #31
    4e38:	d503      	bpl.n	4e42 <_dtoa_r+0xa22>
    4e3a:	2c39      	cmp	r4, #57	; 0x39
    4e3c:	d00b      	beq.n	4e56 <_dtoa_r+0xa36>
    4e3e:	9c10      	ldr	r4, [sp, #64]	; 0x40
    4e40:	3431      	adds	r4, #49	; 0x31
    4e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4e44:	1c5d      	adds	r5, r3, #1
    4e46:	e00f      	b.n	4e68 <_dtoa_r+0xa48>
    4e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4e4a:	1c5f      	adds	r7, r3, #1
    4e4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4e4e:	2b00      	cmp	r3, #0
    4e50:	dd0c      	ble.n	4e6c <_dtoa_r+0xa4c>
    4e52:	2c39      	cmp	r4, #57	; 0x39
    4e54:	d105      	bne.n	4e62 <_dtoa_r+0xa42>
    4e56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4e58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4e5a:	1c5d      	adds	r5, r3, #1
    4e5c:	2339      	movs	r3, #57	; 0x39
    4e5e:	7013      	strb	r3, [r2, #0]
    4e60:	e057      	b.n	4f12 <_dtoa_r+0xaf2>
    4e62:	003d      	movs	r5, r7
    4e64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4e66:	3401      	adds	r4, #1
    4e68:	701c      	strb	r4, [r3, #0]
    4e6a:	e068      	b.n	4f3e <_dtoa_r+0xb1e>
    4e6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4e6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4e70:	003d      	movs	r5, r7
    4e72:	701c      	strb	r4, [r3, #0]
    4e74:	4293      	cmp	r3, r2
    4e76:	d03c      	beq.n	4ef2 <_dtoa_r+0xad2>
    4e78:	2300      	movs	r3, #0
    4e7a:	220a      	movs	r2, #10
    4e7c:	9905      	ldr	r1, [sp, #20]
    4e7e:	9804      	ldr	r0, [sp, #16]
    4e80:	f000 faea 	bl	5458 <__multadd>
    4e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4e86:	9005      	str	r0, [sp, #20]
    4e88:	429e      	cmp	r6, r3
    4e8a:	d108      	bne.n	4e9e <_dtoa_r+0xa7e>
    4e8c:	0031      	movs	r1, r6
    4e8e:	2300      	movs	r3, #0
    4e90:	220a      	movs	r2, #10
    4e92:	9804      	ldr	r0, [sp, #16]
    4e94:	f000 fae0 	bl	5458 <__multadd>
    4e98:	0006      	movs	r6, r0
    4e9a:	900a      	str	r0, [sp, #40]	; 0x28
    4e9c:	e00d      	b.n	4eba <_dtoa_r+0xa9a>
    4e9e:	0031      	movs	r1, r6
    4ea0:	2300      	movs	r3, #0
    4ea2:	220a      	movs	r2, #10
    4ea4:	9804      	ldr	r0, [sp, #16]
    4ea6:	f000 fad7 	bl	5458 <__multadd>
    4eaa:	2300      	movs	r3, #0
    4eac:	0006      	movs	r6, r0
    4eae:	220a      	movs	r2, #10
    4eb0:	990a      	ldr	r1, [sp, #40]	; 0x28
    4eb2:	9804      	ldr	r0, [sp, #16]
    4eb4:	f000 fad0 	bl	5458 <__multadd>
    4eb8:	900a      	str	r0, [sp, #40]	; 0x28
    4eba:	970b      	str	r7, [sp, #44]	; 0x2c
    4ebc:	e776      	b.n	4dac <_dtoa_r+0x98c>
    4ebe:	2300      	movs	r3, #0
    4ec0:	220a      	movs	r2, #10
    4ec2:	9905      	ldr	r1, [sp, #20]
    4ec4:	9804      	ldr	r0, [sp, #16]
    4ec6:	f000 fac7 	bl	5458 <__multadd>
    4eca:	9005      	str	r0, [sp, #20]
    4ecc:	9908      	ldr	r1, [sp, #32]
    4ece:	9805      	ldr	r0, [sp, #20]
    4ed0:	f7ff fa20 	bl	4314 <quorem>
    4ed4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4ed6:	3030      	adds	r0, #48	; 0x30
    4ed8:	7028      	strb	r0, [r5, #0]
    4eda:	3501      	adds	r5, #1
    4edc:	0004      	movs	r4, r0
    4ede:	1aeb      	subs	r3, r5, r3
    4ee0:	42bb      	cmp	r3, r7
    4ee2:	dbec      	blt.n	4ebe <_dtoa_r+0xa9e>
    4ee4:	1e3d      	subs	r5, r7, #0
    4ee6:	dc00      	bgt.n	4eea <_dtoa_r+0xaca>
    4ee8:	2501      	movs	r5, #1
    4eea:	960a      	str	r6, [sp, #40]	; 0x28
    4eec:	2600      	movs	r6, #0
    4eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4ef0:	195d      	adds	r5, r3, r5
    4ef2:	9905      	ldr	r1, [sp, #20]
    4ef4:	2201      	movs	r2, #1
    4ef6:	9804      	ldr	r0, [sp, #16]
    4ef8:	f000 fc1c 	bl	5734 <__lshift>
    4efc:	9908      	ldr	r1, [sp, #32]
    4efe:	9005      	str	r0, [sp, #20]
    4f00:	f000 fc6a 	bl	57d8 <__mcmp>
    4f04:	2800      	cmp	r0, #0
    4f06:	dc04      	bgt.n	4f12 <_dtoa_r+0xaf2>
    4f08:	d113      	bne.n	4f32 <_dtoa_r+0xb12>
    4f0a:	07e3      	lsls	r3, r4, #31
    4f0c:	d401      	bmi.n	4f12 <_dtoa_r+0xaf2>
    4f0e:	e010      	b.n	4f32 <_dtoa_r+0xb12>
    4f10:	001d      	movs	r5, r3
    4f12:	1e6b      	subs	r3, r5, #1
    4f14:	781a      	ldrb	r2, [r3, #0]
    4f16:	2a39      	cmp	r2, #57	; 0x39
    4f18:	d108      	bne.n	4f2c <_dtoa_r+0xb0c>
    4f1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4f1c:	429a      	cmp	r2, r3
    4f1e:	d1f7      	bne.n	4f10 <_dtoa_r+0xaf0>
    4f20:	9b03      	ldr	r3, [sp, #12]
    4f22:	3301      	adds	r3, #1
    4f24:	9303      	str	r3, [sp, #12]
    4f26:	2331      	movs	r3, #49	; 0x31
    4f28:	7013      	strb	r3, [r2, #0]
    4f2a:	e008      	b.n	4f3e <_dtoa_r+0xb1e>
    4f2c:	3201      	adds	r2, #1
    4f2e:	701a      	strb	r2, [r3, #0]
    4f30:	e005      	b.n	4f3e <_dtoa_r+0xb1e>
    4f32:	1e6b      	subs	r3, r5, #1
    4f34:	781a      	ldrb	r2, [r3, #0]
    4f36:	2a30      	cmp	r2, #48	; 0x30
    4f38:	d101      	bne.n	4f3e <_dtoa_r+0xb1e>
    4f3a:	001d      	movs	r5, r3
    4f3c:	e7f9      	b.n	4f32 <_dtoa_r+0xb12>
    4f3e:	9908      	ldr	r1, [sp, #32]
    4f40:	9804      	ldr	r0, [sp, #16]
    4f42:	f000 fa70 	bl	5426 <_Bfree>
    4f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4f48:	2b00      	cmp	r3, #0
    4f4a:	d00e      	beq.n	4f6a <_dtoa_r+0xb4a>
    4f4c:	2e00      	cmp	r6, #0
    4f4e:	d005      	beq.n	4f5c <_dtoa_r+0xb3c>
    4f50:	429e      	cmp	r6, r3
    4f52:	d003      	beq.n	4f5c <_dtoa_r+0xb3c>
    4f54:	0031      	movs	r1, r6
    4f56:	9804      	ldr	r0, [sp, #16]
    4f58:	f000 fa65 	bl	5426 <_Bfree>
    4f5c:	990a      	ldr	r1, [sp, #40]	; 0x28
    4f5e:	9804      	ldr	r0, [sp, #16]
    4f60:	f000 fa61 	bl	5426 <_Bfree>
    4f64:	e001      	b.n	4f6a <_dtoa_r+0xb4a>
    4f66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4f68:	9303      	str	r3, [sp, #12]
    4f6a:	9804      	ldr	r0, [sp, #16]
    4f6c:	9905      	ldr	r1, [sp, #20]
    4f6e:	f000 fa5a 	bl	5426 <_Bfree>
    4f72:	2300      	movs	r3, #0
    4f74:	702b      	strb	r3, [r5, #0]
    4f76:	9b03      	ldr	r3, [sp, #12]
    4f78:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4f7a:	3301      	adds	r3, #1
    4f7c:	6013      	str	r3, [r2, #0]
    4f7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    4f80:	980d      	ldr	r0, [sp, #52]	; 0x34
    4f82:	2b00      	cmp	r3, #0
    4f84:	d010      	beq.n	4fa8 <_dtoa_r+0xb88>
    4f86:	601d      	str	r5, [r3, #0]
    4f88:	e00e      	b.n	4fa8 <_dtoa_r+0xb88>
    4f8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4f8c:	2b01      	cmp	r3, #1
    4f8e:	dc00      	bgt.n	4f92 <_dtoa_r+0xb72>
    4f90:	e643      	b.n	4c1a <_dtoa_r+0x7fa>
    4f92:	9d11      	ldr	r5, [sp, #68]	; 0x44
    4f94:	2001      	movs	r0, #1
    4f96:	e665      	b.n	4c64 <_dtoa_r+0x844>
    4f98:	2f00      	cmp	r7, #0
    4f9a:	dd00      	ble.n	4f9e <_dtoa_r+0xb7e>
    4f9c:	e6de      	b.n	4d5c <_dtoa_r+0x93c>
    4f9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4fa0:	2b02      	cmp	r3, #2
    4fa2:	dc00      	bgt.n	4fa6 <_dtoa_r+0xb86>
    4fa4:	e6da      	b.n	4d5c <_dtoa_r+0x93c>
    4fa6:	e6ae      	b.n	4d06 <_dtoa_r+0x8e6>
    4fa8:	b01d      	add	sp, #116	; 0x74
    4faa:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004fac <__sflush_r>:
    4fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4fae:	898a      	ldrh	r2, [r1, #12]
    4fb0:	0005      	movs	r5, r0
    4fb2:	000c      	movs	r4, r1
    4fb4:	0713      	lsls	r3, r2, #28
    4fb6:	d45a      	bmi.n	506e <__sflush_r+0xc2>
    4fb8:	684b      	ldr	r3, [r1, #4]
    4fba:	2b00      	cmp	r3, #0
    4fbc:	dc02      	bgt.n	4fc4 <__sflush_r+0x18>
    4fbe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4fc0:	2b00      	cmp	r3, #0
    4fc2:	dd19      	ble.n	4ff8 <__sflush_r+0x4c>
    4fc4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4fc6:	2f00      	cmp	r7, #0
    4fc8:	d016      	beq.n	4ff8 <__sflush_r+0x4c>
    4fca:	2300      	movs	r3, #0
    4fcc:	682e      	ldr	r6, [r5, #0]
    4fce:	602b      	str	r3, [r5, #0]
    4fd0:	2380      	movs	r3, #128	; 0x80
    4fd2:	015b      	lsls	r3, r3, #5
    4fd4:	401a      	ands	r2, r3
    4fd6:	d001      	beq.n	4fdc <__sflush_r+0x30>
    4fd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4fda:	e014      	b.n	5006 <__sflush_r+0x5a>
    4fdc:	2301      	movs	r3, #1
    4fde:	6a21      	ldr	r1, [r4, #32]
    4fe0:	0028      	movs	r0, r5
    4fe2:	47b8      	blx	r7
    4fe4:	1c43      	adds	r3, r0, #1
    4fe6:	d10e      	bne.n	5006 <__sflush_r+0x5a>
    4fe8:	682b      	ldr	r3, [r5, #0]
    4fea:	2b00      	cmp	r3, #0
    4fec:	d00b      	beq.n	5006 <__sflush_r+0x5a>
    4fee:	2b1d      	cmp	r3, #29
    4ff0:	d001      	beq.n	4ff6 <__sflush_r+0x4a>
    4ff2:	2b16      	cmp	r3, #22
    4ff4:	d102      	bne.n	4ffc <__sflush_r+0x50>
    4ff6:	602e      	str	r6, [r5, #0]
    4ff8:	2000      	movs	r0, #0
    4ffa:	e05a      	b.n	50b2 <__sflush_r+0x106>
    4ffc:	2240      	movs	r2, #64	; 0x40
    4ffe:	89a3      	ldrh	r3, [r4, #12]
    5000:	4313      	orrs	r3, r2
    5002:	81a3      	strh	r3, [r4, #12]
    5004:	e055      	b.n	50b2 <__sflush_r+0x106>
    5006:	89a3      	ldrh	r3, [r4, #12]
    5008:	075b      	lsls	r3, r3, #29
    500a:	d506      	bpl.n	501a <__sflush_r+0x6e>
    500c:	6863      	ldr	r3, [r4, #4]
    500e:	1ac0      	subs	r0, r0, r3
    5010:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5012:	2b00      	cmp	r3, #0
    5014:	d001      	beq.n	501a <__sflush_r+0x6e>
    5016:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5018:	1ac0      	subs	r0, r0, r3
    501a:	2300      	movs	r3, #0
    501c:	0002      	movs	r2, r0
    501e:	6a21      	ldr	r1, [r4, #32]
    5020:	0028      	movs	r0, r5
    5022:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5024:	47b8      	blx	r7
    5026:	89a3      	ldrh	r3, [r4, #12]
    5028:	1c42      	adds	r2, r0, #1
    502a:	d106      	bne.n	503a <__sflush_r+0x8e>
    502c:	6829      	ldr	r1, [r5, #0]
    502e:	291d      	cmp	r1, #29
    5030:	d83a      	bhi.n	50a8 <__sflush_r+0xfc>
    5032:	4a20      	ldr	r2, [pc, #128]	; (50b4 <__sflush_r+0x108>)
    5034:	40ca      	lsrs	r2, r1
    5036:	07d2      	lsls	r2, r2, #31
    5038:	d536      	bpl.n	50a8 <__sflush_r+0xfc>
    503a:	2200      	movs	r2, #0
    503c:	6062      	str	r2, [r4, #4]
    503e:	6922      	ldr	r2, [r4, #16]
    5040:	6022      	str	r2, [r4, #0]
    5042:	04db      	lsls	r3, r3, #19
    5044:	d505      	bpl.n	5052 <__sflush_r+0xa6>
    5046:	1c43      	adds	r3, r0, #1
    5048:	d102      	bne.n	5050 <__sflush_r+0xa4>
    504a:	682b      	ldr	r3, [r5, #0]
    504c:	2b00      	cmp	r3, #0
    504e:	d100      	bne.n	5052 <__sflush_r+0xa6>
    5050:	6560      	str	r0, [r4, #84]	; 0x54
    5052:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5054:	602e      	str	r6, [r5, #0]
    5056:	2900      	cmp	r1, #0
    5058:	d0ce      	beq.n	4ff8 <__sflush_r+0x4c>
    505a:	0023      	movs	r3, r4
    505c:	3344      	adds	r3, #68	; 0x44
    505e:	4299      	cmp	r1, r3
    5060:	d002      	beq.n	5068 <__sflush_r+0xbc>
    5062:	0028      	movs	r0, r5
    5064:	f000 fca0 	bl	59a8 <_free_r>
    5068:	2000      	movs	r0, #0
    506a:	6360      	str	r0, [r4, #52]	; 0x34
    506c:	e021      	b.n	50b2 <__sflush_r+0x106>
    506e:	690f      	ldr	r7, [r1, #16]
    5070:	2f00      	cmp	r7, #0
    5072:	d0c1      	beq.n	4ff8 <__sflush_r+0x4c>
    5074:	680b      	ldr	r3, [r1, #0]
    5076:	600f      	str	r7, [r1, #0]
    5078:	1bdb      	subs	r3, r3, r7
    507a:	9301      	str	r3, [sp, #4]
    507c:	2300      	movs	r3, #0
    507e:	0792      	lsls	r2, r2, #30
    5080:	d100      	bne.n	5084 <__sflush_r+0xd8>
    5082:	694b      	ldr	r3, [r1, #20]
    5084:	60a3      	str	r3, [r4, #8]
    5086:	e003      	b.n	5090 <__sflush_r+0xe4>
    5088:	9b01      	ldr	r3, [sp, #4]
    508a:	183f      	adds	r7, r7, r0
    508c:	1a1b      	subs	r3, r3, r0
    508e:	9301      	str	r3, [sp, #4]
    5090:	9b01      	ldr	r3, [sp, #4]
    5092:	2b00      	cmp	r3, #0
    5094:	ddb0      	ble.n	4ff8 <__sflush_r+0x4c>
    5096:	9b01      	ldr	r3, [sp, #4]
    5098:	003a      	movs	r2, r7
    509a:	6a21      	ldr	r1, [r4, #32]
    509c:	0028      	movs	r0, r5
    509e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    50a0:	47b0      	blx	r6
    50a2:	2800      	cmp	r0, #0
    50a4:	dcf0      	bgt.n	5088 <__sflush_r+0xdc>
    50a6:	89a3      	ldrh	r3, [r4, #12]
    50a8:	2240      	movs	r2, #64	; 0x40
    50aa:	2001      	movs	r0, #1
    50ac:	4313      	orrs	r3, r2
    50ae:	81a3      	strh	r3, [r4, #12]
    50b0:	4240      	negs	r0, r0
    50b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    50b4:	20400001 	.word	0x20400001

000050b8 <_fflush_r>:
    50b8:	690b      	ldr	r3, [r1, #16]
    50ba:	b570      	push	{r4, r5, r6, lr}
    50bc:	0005      	movs	r5, r0
    50be:	000c      	movs	r4, r1
    50c0:	2b00      	cmp	r3, #0
    50c2:	d101      	bne.n	50c8 <_fflush_r+0x10>
    50c4:	2000      	movs	r0, #0
    50c6:	e01c      	b.n	5102 <_fflush_r+0x4a>
    50c8:	2800      	cmp	r0, #0
    50ca:	d004      	beq.n	50d6 <_fflush_r+0x1e>
    50cc:	6983      	ldr	r3, [r0, #24]
    50ce:	2b00      	cmp	r3, #0
    50d0:	d101      	bne.n	50d6 <_fflush_r+0x1e>
    50d2:	f000 f85f 	bl	5194 <__sinit>
    50d6:	4b0b      	ldr	r3, [pc, #44]	; (5104 <_fflush_r+0x4c>)
    50d8:	429c      	cmp	r4, r3
    50da:	d101      	bne.n	50e0 <_fflush_r+0x28>
    50dc:	686c      	ldr	r4, [r5, #4]
    50de:	e008      	b.n	50f2 <_fflush_r+0x3a>
    50e0:	4b09      	ldr	r3, [pc, #36]	; (5108 <_fflush_r+0x50>)
    50e2:	429c      	cmp	r4, r3
    50e4:	d101      	bne.n	50ea <_fflush_r+0x32>
    50e6:	68ac      	ldr	r4, [r5, #8]
    50e8:	e003      	b.n	50f2 <_fflush_r+0x3a>
    50ea:	4b08      	ldr	r3, [pc, #32]	; (510c <_fflush_r+0x54>)
    50ec:	429c      	cmp	r4, r3
    50ee:	d100      	bne.n	50f2 <_fflush_r+0x3a>
    50f0:	68ec      	ldr	r4, [r5, #12]
    50f2:	220c      	movs	r2, #12
    50f4:	5ea3      	ldrsh	r3, [r4, r2]
    50f6:	2b00      	cmp	r3, #0
    50f8:	d0e4      	beq.n	50c4 <_fflush_r+0xc>
    50fa:	0021      	movs	r1, r4
    50fc:	0028      	movs	r0, r5
    50fe:	f7ff ff55 	bl	4fac <__sflush_r>
    5102:	bd70      	pop	{r4, r5, r6, pc}
    5104:	00008c0c 	.word	0x00008c0c
    5108:	00008c2c 	.word	0x00008c2c
    510c:	00008c4c 	.word	0x00008c4c

00005110 <_cleanup_r>:
    5110:	b510      	push	{r4, lr}
    5112:	4902      	ldr	r1, [pc, #8]	; (511c <_cleanup_r+0xc>)
    5114:	f000 f8b0 	bl	5278 <_fwalk_reent>
    5118:	bd10      	pop	{r4, pc}
    511a:	46c0      	nop			; (mov r8, r8)
    511c:	000050b9 	.word	0x000050b9

00005120 <std.isra.0>:
    5120:	2300      	movs	r3, #0
    5122:	b510      	push	{r4, lr}
    5124:	0004      	movs	r4, r0
    5126:	6003      	str	r3, [r0, #0]
    5128:	6043      	str	r3, [r0, #4]
    512a:	6083      	str	r3, [r0, #8]
    512c:	8181      	strh	r1, [r0, #12]
    512e:	6643      	str	r3, [r0, #100]	; 0x64
    5130:	81c2      	strh	r2, [r0, #14]
    5132:	6103      	str	r3, [r0, #16]
    5134:	6143      	str	r3, [r0, #20]
    5136:	6183      	str	r3, [r0, #24]
    5138:	0019      	movs	r1, r3
    513a:	2208      	movs	r2, #8
    513c:	305c      	adds	r0, #92	; 0x5c
    513e:	f7fe fa54 	bl	35ea <memset>
    5142:	4b05      	ldr	r3, [pc, #20]	; (5158 <std.isra.0+0x38>)
    5144:	6224      	str	r4, [r4, #32]
    5146:	6263      	str	r3, [r4, #36]	; 0x24
    5148:	4b04      	ldr	r3, [pc, #16]	; (515c <std.isra.0+0x3c>)
    514a:	62a3      	str	r3, [r4, #40]	; 0x28
    514c:	4b04      	ldr	r3, [pc, #16]	; (5160 <std.isra.0+0x40>)
    514e:	62e3      	str	r3, [r4, #44]	; 0x2c
    5150:	4b04      	ldr	r3, [pc, #16]	; (5164 <std.isra.0+0x44>)
    5152:	6323      	str	r3, [r4, #48]	; 0x30
    5154:	bd10      	pop	{r4, pc}
    5156:	46c0      	nop			; (mov r8, r8)
    5158:	00005d8d 	.word	0x00005d8d
    515c:	00005db5 	.word	0x00005db5
    5160:	00005ded 	.word	0x00005ded
    5164:	00005e19 	.word	0x00005e19

00005168 <__sfmoreglue>:
    5168:	b570      	push	{r4, r5, r6, lr}
    516a:	2568      	movs	r5, #104	; 0x68
    516c:	1e4b      	subs	r3, r1, #1
    516e:	435d      	muls	r5, r3
    5170:	000e      	movs	r6, r1
    5172:	0029      	movs	r1, r5
    5174:	3174      	adds	r1, #116	; 0x74
    5176:	f000 fc5d 	bl	5a34 <_malloc_r>
    517a:	1e04      	subs	r4, r0, #0
    517c:	d008      	beq.n	5190 <__sfmoreglue+0x28>
    517e:	2100      	movs	r1, #0
    5180:	002a      	movs	r2, r5
    5182:	6001      	str	r1, [r0, #0]
    5184:	6046      	str	r6, [r0, #4]
    5186:	300c      	adds	r0, #12
    5188:	60a0      	str	r0, [r4, #8]
    518a:	3268      	adds	r2, #104	; 0x68
    518c:	f7fe fa2d 	bl	35ea <memset>
    5190:	0020      	movs	r0, r4
    5192:	bd70      	pop	{r4, r5, r6, pc}

00005194 <__sinit>:
    5194:	6983      	ldr	r3, [r0, #24]
    5196:	b513      	push	{r0, r1, r4, lr}
    5198:	0004      	movs	r4, r0
    519a:	2b00      	cmp	r3, #0
    519c:	d128      	bne.n	51f0 <__sinit+0x5c>
    519e:	6483      	str	r3, [r0, #72]	; 0x48
    51a0:	64c3      	str	r3, [r0, #76]	; 0x4c
    51a2:	6503      	str	r3, [r0, #80]	; 0x50
    51a4:	4b13      	ldr	r3, [pc, #76]	; (51f4 <__sinit+0x60>)
    51a6:	4a14      	ldr	r2, [pc, #80]	; (51f8 <__sinit+0x64>)
    51a8:	681b      	ldr	r3, [r3, #0]
    51aa:	6282      	str	r2, [r0, #40]	; 0x28
    51ac:	9301      	str	r3, [sp, #4]
    51ae:	4298      	cmp	r0, r3
    51b0:	d101      	bne.n	51b6 <__sinit+0x22>
    51b2:	2301      	movs	r3, #1
    51b4:	6183      	str	r3, [r0, #24]
    51b6:	0020      	movs	r0, r4
    51b8:	f000 f820 	bl	51fc <__sfp>
    51bc:	6060      	str	r0, [r4, #4]
    51be:	0020      	movs	r0, r4
    51c0:	f000 f81c 	bl	51fc <__sfp>
    51c4:	60a0      	str	r0, [r4, #8]
    51c6:	0020      	movs	r0, r4
    51c8:	f000 f818 	bl	51fc <__sfp>
    51cc:	2200      	movs	r2, #0
    51ce:	60e0      	str	r0, [r4, #12]
    51d0:	2104      	movs	r1, #4
    51d2:	6860      	ldr	r0, [r4, #4]
    51d4:	f7ff ffa4 	bl	5120 <std.isra.0>
    51d8:	2201      	movs	r2, #1
    51da:	2109      	movs	r1, #9
    51dc:	68a0      	ldr	r0, [r4, #8]
    51de:	f7ff ff9f 	bl	5120 <std.isra.0>
    51e2:	2202      	movs	r2, #2
    51e4:	2112      	movs	r1, #18
    51e6:	68e0      	ldr	r0, [r4, #12]
    51e8:	f7ff ff9a 	bl	5120 <std.isra.0>
    51ec:	2301      	movs	r3, #1
    51ee:	61a3      	str	r3, [r4, #24]
    51f0:	bd13      	pop	{r0, r1, r4, pc}
    51f2:	46c0      	nop			; (mov r8, r8)
    51f4:	00008bc4 	.word	0x00008bc4
    51f8:	00005111 	.word	0x00005111

000051fc <__sfp>:
    51fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51fe:	4b1d      	ldr	r3, [pc, #116]	; (5274 <__sfp+0x78>)
    5200:	0006      	movs	r6, r0
    5202:	681d      	ldr	r5, [r3, #0]
    5204:	69ab      	ldr	r3, [r5, #24]
    5206:	2b00      	cmp	r3, #0
    5208:	d102      	bne.n	5210 <__sfp+0x14>
    520a:	0028      	movs	r0, r5
    520c:	f7ff ffc2 	bl	5194 <__sinit>
    5210:	3548      	adds	r5, #72	; 0x48
    5212:	68ac      	ldr	r4, [r5, #8]
    5214:	686b      	ldr	r3, [r5, #4]
    5216:	3b01      	subs	r3, #1
    5218:	d405      	bmi.n	5226 <__sfp+0x2a>
    521a:	220c      	movs	r2, #12
    521c:	5ea7      	ldrsh	r7, [r4, r2]
    521e:	2f00      	cmp	r7, #0
    5220:	d010      	beq.n	5244 <__sfp+0x48>
    5222:	3468      	adds	r4, #104	; 0x68
    5224:	e7f7      	b.n	5216 <__sfp+0x1a>
    5226:	682b      	ldr	r3, [r5, #0]
    5228:	2b00      	cmp	r3, #0
    522a:	d001      	beq.n	5230 <__sfp+0x34>
    522c:	682d      	ldr	r5, [r5, #0]
    522e:	e7f0      	b.n	5212 <__sfp+0x16>
    5230:	2104      	movs	r1, #4
    5232:	0030      	movs	r0, r6
    5234:	f7ff ff98 	bl	5168 <__sfmoreglue>
    5238:	6028      	str	r0, [r5, #0]
    523a:	2800      	cmp	r0, #0
    523c:	d1f6      	bne.n	522c <__sfp+0x30>
    523e:	230c      	movs	r3, #12
    5240:	6033      	str	r3, [r6, #0]
    5242:	e016      	b.n	5272 <__sfp+0x76>
    5244:	2301      	movs	r3, #1
    5246:	0020      	movs	r0, r4
    5248:	425b      	negs	r3, r3
    524a:	81e3      	strh	r3, [r4, #14]
    524c:	3302      	adds	r3, #2
    524e:	81a3      	strh	r3, [r4, #12]
    5250:	6667      	str	r7, [r4, #100]	; 0x64
    5252:	6027      	str	r7, [r4, #0]
    5254:	60a7      	str	r7, [r4, #8]
    5256:	6067      	str	r7, [r4, #4]
    5258:	6127      	str	r7, [r4, #16]
    525a:	6167      	str	r7, [r4, #20]
    525c:	61a7      	str	r7, [r4, #24]
    525e:	305c      	adds	r0, #92	; 0x5c
    5260:	2208      	movs	r2, #8
    5262:	0039      	movs	r1, r7
    5264:	f7fe f9c1 	bl	35ea <memset>
    5268:	0020      	movs	r0, r4
    526a:	6367      	str	r7, [r4, #52]	; 0x34
    526c:	63a7      	str	r7, [r4, #56]	; 0x38
    526e:	64a7      	str	r7, [r4, #72]	; 0x48
    5270:	64e7      	str	r7, [r4, #76]	; 0x4c
    5272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5274:	00008bc4 	.word	0x00008bc4

00005278 <_fwalk_reent>:
    5278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    527a:	0004      	movs	r4, r0
    527c:	0007      	movs	r7, r0
    527e:	2600      	movs	r6, #0
    5280:	9101      	str	r1, [sp, #4]
    5282:	3448      	adds	r4, #72	; 0x48
    5284:	2c00      	cmp	r4, #0
    5286:	d016      	beq.n	52b6 <_fwalk_reent+0x3e>
    5288:	6863      	ldr	r3, [r4, #4]
    528a:	68a5      	ldr	r5, [r4, #8]
    528c:	9300      	str	r3, [sp, #0]
    528e:	9b00      	ldr	r3, [sp, #0]
    5290:	3b01      	subs	r3, #1
    5292:	9300      	str	r3, [sp, #0]
    5294:	d40d      	bmi.n	52b2 <_fwalk_reent+0x3a>
    5296:	89ab      	ldrh	r3, [r5, #12]
    5298:	2b01      	cmp	r3, #1
    529a:	d908      	bls.n	52ae <_fwalk_reent+0x36>
    529c:	220e      	movs	r2, #14
    529e:	5eab      	ldrsh	r3, [r5, r2]
    52a0:	3301      	adds	r3, #1
    52a2:	d004      	beq.n	52ae <_fwalk_reent+0x36>
    52a4:	0029      	movs	r1, r5
    52a6:	0038      	movs	r0, r7
    52a8:	9b01      	ldr	r3, [sp, #4]
    52aa:	4798      	blx	r3
    52ac:	4306      	orrs	r6, r0
    52ae:	3568      	adds	r5, #104	; 0x68
    52b0:	e7ed      	b.n	528e <_fwalk_reent+0x16>
    52b2:	6824      	ldr	r4, [r4, #0]
    52b4:	e7e6      	b.n	5284 <_fwalk_reent+0xc>
    52b6:	0030      	movs	r0, r6
    52b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000052bc <_localeconv_r>:
    52bc:	4800      	ldr	r0, [pc, #0]	; (52c0 <_localeconv_r+0x4>)
    52be:	4770      	bx	lr
    52c0:	20000070 	.word	0x20000070

000052c4 <__swhatbuf_r>:
    52c4:	b570      	push	{r4, r5, r6, lr}
    52c6:	000e      	movs	r6, r1
    52c8:	001d      	movs	r5, r3
    52ca:	230e      	movs	r3, #14
    52cc:	5ec9      	ldrsh	r1, [r1, r3]
    52ce:	b090      	sub	sp, #64	; 0x40
    52d0:	0014      	movs	r4, r2
    52d2:	2900      	cmp	r1, #0
    52d4:	da06      	bge.n	52e4 <__swhatbuf_r+0x20>
    52d6:	2300      	movs	r3, #0
    52d8:	602b      	str	r3, [r5, #0]
    52da:	89b3      	ldrh	r3, [r6, #12]
    52dc:	061b      	lsls	r3, r3, #24
    52de:	d50f      	bpl.n	5300 <__swhatbuf_r+0x3c>
    52e0:	2340      	movs	r3, #64	; 0x40
    52e2:	e00f      	b.n	5304 <__swhatbuf_r+0x40>
    52e4:	aa01      	add	r2, sp, #4
    52e6:	f000 fdc3 	bl	5e70 <_fstat_r>
    52ea:	2800      	cmp	r0, #0
    52ec:	dbf3      	blt.n	52d6 <__swhatbuf_r+0x12>
    52ee:	23f0      	movs	r3, #240	; 0xf0
    52f0:	9a02      	ldr	r2, [sp, #8]
    52f2:	021b      	lsls	r3, r3, #8
    52f4:	4013      	ands	r3, r2
    52f6:	4a05      	ldr	r2, [pc, #20]	; (530c <__swhatbuf_r+0x48>)
    52f8:	189b      	adds	r3, r3, r2
    52fa:	425a      	negs	r2, r3
    52fc:	4153      	adcs	r3, r2
    52fe:	602b      	str	r3, [r5, #0]
    5300:	2380      	movs	r3, #128	; 0x80
    5302:	00db      	lsls	r3, r3, #3
    5304:	2000      	movs	r0, #0
    5306:	6023      	str	r3, [r4, #0]
    5308:	b010      	add	sp, #64	; 0x40
    530a:	bd70      	pop	{r4, r5, r6, pc}
    530c:	ffffe000 	.word	0xffffe000

00005310 <__smakebuf_r>:
    5310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5312:	2602      	movs	r6, #2
    5314:	898b      	ldrh	r3, [r1, #12]
    5316:	0005      	movs	r5, r0
    5318:	000c      	movs	r4, r1
    531a:	4233      	tst	r3, r6
    531c:	d110      	bne.n	5340 <__smakebuf_r+0x30>
    531e:	ab01      	add	r3, sp, #4
    5320:	466a      	mov	r2, sp
    5322:	f7ff ffcf 	bl	52c4 <__swhatbuf_r>
    5326:	9900      	ldr	r1, [sp, #0]
    5328:	0007      	movs	r7, r0
    532a:	0028      	movs	r0, r5
    532c:	f000 fb82 	bl	5a34 <_malloc_r>
    5330:	2800      	cmp	r0, #0
    5332:	d10c      	bne.n	534e <__smakebuf_r+0x3e>
    5334:	220c      	movs	r2, #12
    5336:	5ea3      	ldrsh	r3, [r4, r2]
    5338:	059a      	lsls	r2, r3, #22
    533a:	d423      	bmi.n	5384 <__smakebuf_r+0x74>
    533c:	4333      	orrs	r3, r6
    533e:	81a3      	strh	r3, [r4, #12]
    5340:	0023      	movs	r3, r4
    5342:	3347      	adds	r3, #71	; 0x47
    5344:	6023      	str	r3, [r4, #0]
    5346:	6123      	str	r3, [r4, #16]
    5348:	2301      	movs	r3, #1
    534a:	6163      	str	r3, [r4, #20]
    534c:	e01a      	b.n	5384 <__smakebuf_r+0x74>
    534e:	2280      	movs	r2, #128	; 0x80
    5350:	4b0d      	ldr	r3, [pc, #52]	; (5388 <__smakebuf_r+0x78>)
    5352:	62ab      	str	r3, [r5, #40]	; 0x28
    5354:	89a3      	ldrh	r3, [r4, #12]
    5356:	6020      	str	r0, [r4, #0]
    5358:	4313      	orrs	r3, r2
    535a:	81a3      	strh	r3, [r4, #12]
    535c:	9b00      	ldr	r3, [sp, #0]
    535e:	6120      	str	r0, [r4, #16]
    5360:	6163      	str	r3, [r4, #20]
    5362:	9b01      	ldr	r3, [sp, #4]
    5364:	2b00      	cmp	r3, #0
    5366:	d00a      	beq.n	537e <__smakebuf_r+0x6e>
    5368:	230e      	movs	r3, #14
    536a:	5ee1      	ldrsh	r1, [r4, r3]
    536c:	0028      	movs	r0, r5
    536e:	f000 fd91 	bl	5e94 <_isatty_r>
    5372:	2800      	cmp	r0, #0
    5374:	d003      	beq.n	537e <__smakebuf_r+0x6e>
    5376:	2201      	movs	r2, #1
    5378:	89a3      	ldrh	r3, [r4, #12]
    537a:	4313      	orrs	r3, r2
    537c:	81a3      	strh	r3, [r4, #12]
    537e:	89a3      	ldrh	r3, [r4, #12]
    5380:	431f      	orrs	r7, r3
    5382:	81a7      	strh	r7, [r4, #12]
    5384:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    5386:	46c0      	nop			; (mov r8, r8)
    5388:	00005111 	.word	0x00005111

0000538c <malloc>:
    538c:	b510      	push	{r4, lr}
    538e:	4b03      	ldr	r3, [pc, #12]	; (539c <malloc+0x10>)
    5390:	0001      	movs	r1, r0
    5392:	6818      	ldr	r0, [r3, #0]
    5394:	f000 fb4e 	bl	5a34 <_malloc_r>
    5398:	bd10      	pop	{r4, pc}
    539a:	46c0      	nop			; (mov r8, r8)
    539c:	2000006c 	.word	0x2000006c

000053a0 <memchr>:
    53a0:	b2c9      	uxtb	r1, r1
    53a2:	1882      	adds	r2, r0, r2
    53a4:	4290      	cmp	r0, r2
    53a6:	d004      	beq.n	53b2 <memchr+0x12>
    53a8:	7803      	ldrb	r3, [r0, #0]
    53aa:	428b      	cmp	r3, r1
    53ac:	d002      	beq.n	53b4 <memchr+0x14>
    53ae:	3001      	adds	r0, #1
    53b0:	e7f8      	b.n	53a4 <memchr+0x4>
    53b2:	2000      	movs	r0, #0
    53b4:	4770      	bx	lr

000053b6 <_Balloc>:
    53b6:	b570      	push	{r4, r5, r6, lr}
    53b8:	6a46      	ldr	r6, [r0, #36]	; 0x24
    53ba:	0004      	movs	r4, r0
    53bc:	000d      	movs	r5, r1
    53be:	2e00      	cmp	r6, #0
    53c0:	d107      	bne.n	53d2 <_Balloc+0x1c>
    53c2:	2010      	movs	r0, #16
    53c4:	f7ff ffe2 	bl	538c <malloc>
    53c8:	6260      	str	r0, [r4, #36]	; 0x24
    53ca:	6046      	str	r6, [r0, #4]
    53cc:	6086      	str	r6, [r0, #8]
    53ce:	6006      	str	r6, [r0, #0]
    53d0:	60c6      	str	r6, [r0, #12]
    53d2:	6a66      	ldr	r6, [r4, #36]	; 0x24
    53d4:	68f3      	ldr	r3, [r6, #12]
    53d6:	2b00      	cmp	r3, #0
    53d8:	d009      	beq.n	53ee <_Balloc+0x38>
    53da:	6a63      	ldr	r3, [r4, #36]	; 0x24
    53dc:	00aa      	lsls	r2, r5, #2
    53de:	68db      	ldr	r3, [r3, #12]
    53e0:	189b      	adds	r3, r3, r2
    53e2:	6818      	ldr	r0, [r3, #0]
    53e4:	2800      	cmp	r0, #0
    53e6:	d00e      	beq.n	5406 <_Balloc+0x50>
    53e8:	6802      	ldr	r2, [r0, #0]
    53ea:	601a      	str	r2, [r3, #0]
    53ec:	e017      	b.n	541e <_Balloc+0x68>
    53ee:	2221      	movs	r2, #33	; 0x21
    53f0:	2104      	movs	r1, #4
    53f2:	0020      	movs	r0, r4
    53f4:	f000 faca 	bl	598c <_calloc_r>
    53f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    53fa:	60f0      	str	r0, [r6, #12]
    53fc:	68db      	ldr	r3, [r3, #12]
    53fe:	2b00      	cmp	r3, #0
    5400:	d1eb      	bne.n	53da <_Balloc+0x24>
    5402:	2000      	movs	r0, #0
    5404:	e00e      	b.n	5424 <_Balloc+0x6e>
    5406:	2101      	movs	r1, #1
    5408:	000e      	movs	r6, r1
    540a:	40ae      	lsls	r6, r5
    540c:	1d72      	adds	r2, r6, #5
    540e:	0092      	lsls	r2, r2, #2
    5410:	0020      	movs	r0, r4
    5412:	f000 fabb 	bl	598c <_calloc_r>
    5416:	2800      	cmp	r0, #0
    5418:	d0f3      	beq.n	5402 <_Balloc+0x4c>
    541a:	6045      	str	r5, [r0, #4]
    541c:	6086      	str	r6, [r0, #8]
    541e:	2300      	movs	r3, #0
    5420:	6103      	str	r3, [r0, #16]
    5422:	60c3      	str	r3, [r0, #12]
    5424:	bd70      	pop	{r4, r5, r6, pc}

00005426 <_Bfree>:
    5426:	b570      	push	{r4, r5, r6, lr}
    5428:	6a45      	ldr	r5, [r0, #36]	; 0x24
    542a:	0006      	movs	r6, r0
    542c:	000c      	movs	r4, r1
    542e:	2d00      	cmp	r5, #0
    5430:	d107      	bne.n	5442 <_Bfree+0x1c>
    5432:	2010      	movs	r0, #16
    5434:	f7ff ffaa 	bl	538c <malloc>
    5438:	6270      	str	r0, [r6, #36]	; 0x24
    543a:	6045      	str	r5, [r0, #4]
    543c:	6085      	str	r5, [r0, #8]
    543e:	6005      	str	r5, [r0, #0]
    5440:	60c5      	str	r5, [r0, #12]
    5442:	2c00      	cmp	r4, #0
    5444:	d007      	beq.n	5456 <_Bfree+0x30>
    5446:	6a72      	ldr	r2, [r6, #36]	; 0x24
    5448:	6863      	ldr	r3, [r4, #4]
    544a:	68d2      	ldr	r2, [r2, #12]
    544c:	009b      	lsls	r3, r3, #2
    544e:	18d3      	adds	r3, r2, r3
    5450:	681a      	ldr	r2, [r3, #0]
    5452:	6022      	str	r2, [r4, #0]
    5454:	601c      	str	r4, [r3, #0]
    5456:	bd70      	pop	{r4, r5, r6, pc}

00005458 <__multadd>:
    5458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    545a:	0007      	movs	r7, r0
    545c:	0008      	movs	r0, r1
    545e:	000c      	movs	r4, r1
    5460:	690d      	ldr	r5, [r1, #16]
    5462:	001e      	movs	r6, r3
    5464:	2100      	movs	r1, #0
    5466:	9201      	str	r2, [sp, #4]
    5468:	3014      	adds	r0, #20
    546a:	9a01      	ldr	r2, [sp, #4]
    546c:	8803      	ldrh	r3, [r0, #0]
    546e:	3101      	adds	r1, #1
    5470:	4353      	muls	r3, r2
    5472:	199b      	adds	r3, r3, r6
    5474:	6806      	ldr	r6, [r0, #0]
    5476:	0c36      	lsrs	r6, r6, #16
    5478:	4356      	muls	r6, r2
    547a:	0c1a      	lsrs	r2, r3, #16
    547c:	4694      	mov	ip, r2
    547e:	44b4      	add	ip, r6
    5480:	4662      	mov	r2, ip
    5482:	0c16      	lsrs	r6, r2, #16
    5484:	0412      	lsls	r2, r2, #16
    5486:	4694      	mov	ip, r2
    5488:	b29b      	uxth	r3, r3
    548a:	4463      	add	r3, ip
    548c:	c008      	stmia	r0!, {r3}
    548e:	428d      	cmp	r5, r1
    5490:	dceb      	bgt.n	546a <__multadd+0x12>
    5492:	2e00      	cmp	r6, #0
    5494:	d01b      	beq.n	54ce <__multadd+0x76>
    5496:	68a3      	ldr	r3, [r4, #8]
    5498:	429d      	cmp	r5, r3
    549a:	db12      	blt.n	54c2 <__multadd+0x6a>
    549c:	6863      	ldr	r3, [r4, #4]
    549e:	0038      	movs	r0, r7
    54a0:	1c59      	adds	r1, r3, #1
    54a2:	f7ff ff88 	bl	53b6 <_Balloc>
    54a6:	0021      	movs	r1, r4
    54a8:	6923      	ldr	r3, [r4, #16]
    54aa:	9001      	str	r0, [sp, #4]
    54ac:	1c9a      	adds	r2, r3, #2
    54ae:	0092      	lsls	r2, r2, #2
    54b0:	310c      	adds	r1, #12
    54b2:	300c      	adds	r0, #12
    54b4:	f7fe f890 	bl	35d8 <memcpy>
    54b8:	0021      	movs	r1, r4
    54ba:	0038      	movs	r0, r7
    54bc:	f7ff ffb3 	bl	5426 <_Bfree>
    54c0:	9c01      	ldr	r4, [sp, #4]
    54c2:	1d2b      	adds	r3, r5, #4
    54c4:	009b      	lsls	r3, r3, #2
    54c6:	18e3      	adds	r3, r4, r3
    54c8:	3501      	adds	r5, #1
    54ca:	605e      	str	r6, [r3, #4]
    54cc:	6125      	str	r5, [r4, #16]
    54ce:	0020      	movs	r0, r4
    54d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000054d2 <__hi0bits>:
    54d2:	2200      	movs	r2, #0
    54d4:	0003      	movs	r3, r0
    54d6:	0c01      	lsrs	r1, r0, #16
    54d8:	4291      	cmp	r1, r2
    54da:	d101      	bne.n	54e0 <__hi0bits+0xe>
    54dc:	0403      	lsls	r3, r0, #16
    54de:	3210      	adds	r2, #16
    54e0:	0e19      	lsrs	r1, r3, #24
    54e2:	d101      	bne.n	54e8 <__hi0bits+0x16>
    54e4:	3208      	adds	r2, #8
    54e6:	021b      	lsls	r3, r3, #8
    54e8:	0f19      	lsrs	r1, r3, #28
    54ea:	d101      	bne.n	54f0 <__hi0bits+0x1e>
    54ec:	3204      	adds	r2, #4
    54ee:	011b      	lsls	r3, r3, #4
    54f0:	0f99      	lsrs	r1, r3, #30
    54f2:	d101      	bne.n	54f8 <__hi0bits+0x26>
    54f4:	3202      	adds	r2, #2
    54f6:	009b      	lsls	r3, r3, #2
    54f8:	0010      	movs	r0, r2
    54fa:	2b00      	cmp	r3, #0
    54fc:	db03      	blt.n	5506 <__hi0bits+0x34>
    54fe:	2020      	movs	r0, #32
    5500:	005b      	lsls	r3, r3, #1
    5502:	d500      	bpl.n	5506 <__hi0bits+0x34>
    5504:	1c50      	adds	r0, r2, #1
    5506:	4770      	bx	lr

00005508 <__lo0bits>:
    5508:	2207      	movs	r2, #7
    550a:	6803      	ldr	r3, [r0, #0]
    550c:	b510      	push	{r4, lr}
    550e:	0001      	movs	r1, r0
    5510:	401a      	ands	r2, r3
    5512:	d00c      	beq.n	552e <__lo0bits+0x26>
    5514:	2401      	movs	r4, #1
    5516:	2000      	movs	r0, #0
    5518:	4223      	tst	r3, r4
    551a:	d123      	bne.n	5564 <__lo0bits+0x5c>
    551c:	2202      	movs	r2, #2
    551e:	4213      	tst	r3, r2
    5520:	d003      	beq.n	552a <__lo0bits+0x22>
    5522:	40e3      	lsrs	r3, r4
    5524:	0020      	movs	r0, r4
    5526:	600b      	str	r3, [r1, #0]
    5528:	e01c      	b.n	5564 <__lo0bits+0x5c>
    552a:	089b      	lsrs	r3, r3, #2
    552c:	e018      	b.n	5560 <__lo0bits+0x58>
    552e:	b298      	uxth	r0, r3
    5530:	2800      	cmp	r0, #0
    5532:	d101      	bne.n	5538 <__lo0bits+0x30>
    5534:	2210      	movs	r2, #16
    5536:	0c1b      	lsrs	r3, r3, #16
    5538:	b2d8      	uxtb	r0, r3
    553a:	2800      	cmp	r0, #0
    553c:	d101      	bne.n	5542 <__lo0bits+0x3a>
    553e:	3208      	adds	r2, #8
    5540:	0a1b      	lsrs	r3, r3, #8
    5542:	0718      	lsls	r0, r3, #28
    5544:	d101      	bne.n	554a <__lo0bits+0x42>
    5546:	3204      	adds	r2, #4
    5548:	091b      	lsrs	r3, r3, #4
    554a:	0798      	lsls	r0, r3, #30
    554c:	d101      	bne.n	5552 <__lo0bits+0x4a>
    554e:	3202      	adds	r2, #2
    5550:	089b      	lsrs	r3, r3, #2
    5552:	07d8      	lsls	r0, r3, #31
    5554:	d404      	bmi.n	5560 <__lo0bits+0x58>
    5556:	085b      	lsrs	r3, r3, #1
    5558:	2020      	movs	r0, #32
    555a:	2b00      	cmp	r3, #0
    555c:	d002      	beq.n	5564 <__lo0bits+0x5c>
    555e:	3201      	adds	r2, #1
    5560:	0010      	movs	r0, r2
    5562:	600b      	str	r3, [r1, #0]
    5564:	bd10      	pop	{r4, pc}

00005566 <__i2b>:
    5566:	b510      	push	{r4, lr}
    5568:	000c      	movs	r4, r1
    556a:	2101      	movs	r1, #1
    556c:	f7ff ff23 	bl	53b6 <_Balloc>
    5570:	2301      	movs	r3, #1
    5572:	6144      	str	r4, [r0, #20]
    5574:	6103      	str	r3, [r0, #16]
    5576:	bd10      	pop	{r4, pc}

00005578 <__multiply>:
    5578:	b5f0      	push	{r4, r5, r6, r7, lr}
    557a:	690b      	ldr	r3, [r1, #16]
    557c:	0014      	movs	r4, r2
    557e:	6912      	ldr	r2, [r2, #16]
    5580:	b089      	sub	sp, #36	; 0x24
    5582:	000d      	movs	r5, r1
    5584:	4293      	cmp	r3, r2
    5586:	da01      	bge.n	558c <__multiply+0x14>
    5588:	0025      	movs	r5, r4
    558a:	000c      	movs	r4, r1
    558c:	692f      	ldr	r7, [r5, #16]
    558e:	6926      	ldr	r6, [r4, #16]
    5590:	68aa      	ldr	r2, [r5, #8]
    5592:	19bb      	adds	r3, r7, r6
    5594:	6869      	ldr	r1, [r5, #4]
    5596:	9301      	str	r3, [sp, #4]
    5598:	4293      	cmp	r3, r2
    559a:	dd00      	ble.n	559e <__multiply+0x26>
    559c:	3101      	adds	r1, #1
    559e:	f7ff ff0a 	bl	53b6 <_Balloc>
    55a2:	0002      	movs	r2, r0
    55a4:	19bb      	adds	r3, r7, r6
    55a6:	3214      	adds	r2, #20
    55a8:	009b      	lsls	r3, r3, #2
    55aa:	18d3      	adds	r3, r2, r3
    55ac:	469c      	mov	ip, r3
    55ae:	2100      	movs	r1, #0
    55b0:	0013      	movs	r3, r2
    55b2:	9002      	str	r0, [sp, #8]
    55b4:	4563      	cmp	r3, ip
    55b6:	d201      	bcs.n	55bc <__multiply+0x44>
    55b8:	c302      	stmia	r3!, {r1}
    55ba:	e7fb      	b.n	55b4 <__multiply+0x3c>
    55bc:	3514      	adds	r5, #20
    55be:	00bf      	lsls	r7, r7, #2
    55c0:	19eb      	adds	r3, r5, r7
    55c2:	3414      	adds	r4, #20
    55c4:	00b6      	lsls	r6, r6, #2
    55c6:	9305      	str	r3, [sp, #20]
    55c8:	19a3      	adds	r3, r4, r6
    55ca:	9503      	str	r5, [sp, #12]
    55cc:	9307      	str	r3, [sp, #28]
    55ce:	9b07      	ldr	r3, [sp, #28]
    55d0:	429c      	cmp	r4, r3
    55d2:	d251      	bcs.n	5678 <__multiply+0x100>
    55d4:	8820      	ldrh	r0, [r4, #0]
    55d6:	2800      	cmp	r0, #0
    55d8:	d01e      	beq.n	5618 <__multiply+0xa0>
    55da:	0015      	movs	r5, r2
    55dc:	2600      	movs	r6, #0
    55de:	9f03      	ldr	r7, [sp, #12]
    55e0:	cf08      	ldmia	r7!, {r3}
    55e2:	9506      	str	r5, [sp, #24]
    55e4:	9304      	str	r3, [sp, #16]
    55e6:	466b      	mov	r3, sp
    55e8:	8a1b      	ldrh	r3, [r3, #16]
    55ea:	4343      	muls	r3, r0
    55ec:	0019      	movs	r1, r3
    55ee:	882b      	ldrh	r3, [r5, #0]
    55f0:	18cb      	adds	r3, r1, r3
    55f2:	9904      	ldr	r1, [sp, #16]
    55f4:	199b      	adds	r3, r3, r6
    55f6:	0c09      	lsrs	r1, r1, #16
    55f8:	4341      	muls	r1, r0
    55fa:	682e      	ldr	r6, [r5, #0]
    55fc:	0c36      	lsrs	r6, r6, #16
    55fe:	1989      	adds	r1, r1, r6
    5600:	0c1e      	lsrs	r6, r3, #16
    5602:	1989      	adds	r1, r1, r6
    5604:	0c0e      	lsrs	r6, r1, #16
    5606:	b29b      	uxth	r3, r3
    5608:	0409      	lsls	r1, r1, #16
    560a:	430b      	orrs	r3, r1
    560c:	c508      	stmia	r5!, {r3}
    560e:	9b05      	ldr	r3, [sp, #20]
    5610:	42bb      	cmp	r3, r7
    5612:	d8e5      	bhi.n	55e0 <__multiply+0x68>
    5614:	9b06      	ldr	r3, [sp, #24]
    5616:	605e      	str	r6, [r3, #4]
    5618:	6823      	ldr	r3, [r4, #0]
    561a:	0c1d      	lsrs	r5, r3, #16
    561c:	d01f      	beq.n	565e <__multiply+0xe6>
    561e:	2100      	movs	r1, #0
    5620:	0010      	movs	r0, r2
    5622:	6813      	ldr	r3, [r2, #0]
    5624:	9f03      	ldr	r7, [sp, #12]
    5626:	9104      	str	r1, [sp, #16]
    5628:	883e      	ldrh	r6, [r7, #0]
    562a:	6801      	ldr	r1, [r0, #0]
    562c:	436e      	muls	r6, r5
    562e:	0c09      	lsrs	r1, r1, #16
    5630:	1871      	adds	r1, r6, r1
    5632:	9e04      	ldr	r6, [sp, #16]
    5634:	b29b      	uxth	r3, r3
    5636:	1989      	adds	r1, r1, r6
    5638:	040e      	lsls	r6, r1, #16
    563a:	4333      	orrs	r3, r6
    563c:	6003      	str	r3, [r0, #0]
    563e:	cf08      	ldmia	r7!, {r3}
    5640:	8886      	ldrh	r6, [r0, #4]
    5642:	0c1b      	lsrs	r3, r3, #16
    5644:	436b      	muls	r3, r5
    5646:	0c09      	lsrs	r1, r1, #16
    5648:	199b      	adds	r3, r3, r6
    564a:	185b      	adds	r3, r3, r1
    564c:	0c19      	lsrs	r1, r3, #16
    564e:	9104      	str	r1, [sp, #16]
    5650:	9905      	ldr	r1, [sp, #20]
    5652:	9006      	str	r0, [sp, #24]
    5654:	3004      	adds	r0, #4
    5656:	42b9      	cmp	r1, r7
    5658:	d8e6      	bhi.n	5628 <__multiply+0xb0>
    565a:	9906      	ldr	r1, [sp, #24]
    565c:	604b      	str	r3, [r1, #4]
    565e:	3404      	adds	r4, #4
    5660:	3204      	adds	r2, #4
    5662:	e7b4      	b.n	55ce <__multiply+0x56>
    5664:	2304      	movs	r3, #4
    5666:	425b      	negs	r3, r3
    5668:	449c      	add	ip, r3
    566a:	4663      	mov	r3, ip
    566c:	681b      	ldr	r3, [r3, #0]
    566e:	2b00      	cmp	r3, #0
    5670:	d105      	bne.n	567e <__multiply+0x106>
    5672:	9b01      	ldr	r3, [sp, #4]
    5674:	3b01      	subs	r3, #1
    5676:	9301      	str	r3, [sp, #4]
    5678:	9b01      	ldr	r3, [sp, #4]
    567a:	2b00      	cmp	r3, #0
    567c:	dcf2      	bgt.n	5664 <__multiply+0xec>
    567e:	9b02      	ldr	r3, [sp, #8]
    5680:	9a01      	ldr	r2, [sp, #4]
    5682:	0018      	movs	r0, r3
    5684:	611a      	str	r2, [r3, #16]
    5686:	b009      	add	sp, #36	; 0x24
    5688:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000568c <__pow5mult>:
    568c:	2303      	movs	r3, #3
    568e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5690:	4013      	ands	r3, r2
    5692:	0005      	movs	r5, r0
    5694:	000e      	movs	r6, r1
    5696:	0014      	movs	r4, r2
    5698:	2b00      	cmp	r3, #0
    569a:	d008      	beq.n	56ae <__pow5mult+0x22>
    569c:	4923      	ldr	r1, [pc, #140]	; (572c <__pow5mult+0xa0>)
    569e:	3b01      	subs	r3, #1
    56a0:	009a      	lsls	r2, r3, #2
    56a2:	5852      	ldr	r2, [r2, r1]
    56a4:	2300      	movs	r3, #0
    56a6:	0031      	movs	r1, r6
    56a8:	f7ff fed6 	bl	5458 <__multadd>
    56ac:	0006      	movs	r6, r0
    56ae:	10a3      	asrs	r3, r4, #2
    56b0:	9301      	str	r3, [sp, #4]
    56b2:	d038      	beq.n	5726 <__pow5mult+0x9a>
    56b4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    56b6:	2c00      	cmp	r4, #0
    56b8:	d107      	bne.n	56ca <__pow5mult+0x3e>
    56ba:	2010      	movs	r0, #16
    56bc:	f7ff fe66 	bl	538c <malloc>
    56c0:	6268      	str	r0, [r5, #36]	; 0x24
    56c2:	6044      	str	r4, [r0, #4]
    56c4:	6084      	str	r4, [r0, #8]
    56c6:	6004      	str	r4, [r0, #0]
    56c8:	60c4      	str	r4, [r0, #12]
    56ca:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    56cc:	68bc      	ldr	r4, [r7, #8]
    56ce:	2c00      	cmp	r4, #0
    56d0:	d110      	bne.n	56f4 <__pow5mult+0x68>
    56d2:	4917      	ldr	r1, [pc, #92]	; (5730 <__pow5mult+0xa4>)
    56d4:	0028      	movs	r0, r5
    56d6:	f7ff ff46 	bl	5566 <__i2b>
    56da:	2300      	movs	r3, #0
    56dc:	60b8      	str	r0, [r7, #8]
    56de:	0004      	movs	r4, r0
    56e0:	6003      	str	r3, [r0, #0]
    56e2:	e007      	b.n	56f4 <__pow5mult+0x68>
    56e4:	9b01      	ldr	r3, [sp, #4]
    56e6:	105b      	asrs	r3, r3, #1
    56e8:	9301      	str	r3, [sp, #4]
    56ea:	d01c      	beq.n	5726 <__pow5mult+0x9a>
    56ec:	6820      	ldr	r0, [r4, #0]
    56ee:	2800      	cmp	r0, #0
    56f0:	d010      	beq.n	5714 <__pow5mult+0x88>
    56f2:	0004      	movs	r4, r0
    56f4:	2201      	movs	r2, #1
    56f6:	9b01      	ldr	r3, [sp, #4]
    56f8:	4213      	tst	r3, r2
    56fa:	d0f3      	beq.n	56e4 <__pow5mult+0x58>
    56fc:	0031      	movs	r1, r6
    56fe:	0022      	movs	r2, r4
    5700:	0028      	movs	r0, r5
    5702:	f7ff ff39 	bl	5578 <__multiply>
    5706:	0007      	movs	r7, r0
    5708:	0031      	movs	r1, r6
    570a:	0028      	movs	r0, r5
    570c:	f7ff fe8b 	bl	5426 <_Bfree>
    5710:	003e      	movs	r6, r7
    5712:	e7e7      	b.n	56e4 <__pow5mult+0x58>
    5714:	0022      	movs	r2, r4
    5716:	0021      	movs	r1, r4
    5718:	0028      	movs	r0, r5
    571a:	f7ff ff2d 	bl	5578 <__multiply>
    571e:	2300      	movs	r3, #0
    5720:	6020      	str	r0, [r4, #0]
    5722:	6003      	str	r3, [r0, #0]
    5724:	e7e5      	b.n	56f2 <__pow5mult+0x66>
    5726:	0030      	movs	r0, r6
    5728:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    572a:	46c0      	nop			; (mov r8, r8)
    572c:	00008d68 	.word	0x00008d68
    5730:	00000271 	.word	0x00000271

00005734 <__lshift>:
    5734:	b5f0      	push	{r4, r5, r6, r7, lr}
    5736:	000c      	movs	r4, r1
    5738:	0017      	movs	r7, r2
    573a:	6923      	ldr	r3, [r4, #16]
    573c:	1155      	asrs	r5, r2, #5
    573e:	b085      	sub	sp, #20
    5740:	18eb      	adds	r3, r5, r3
    5742:	9301      	str	r3, [sp, #4]
    5744:	3301      	adds	r3, #1
    5746:	9300      	str	r3, [sp, #0]
    5748:	6849      	ldr	r1, [r1, #4]
    574a:	68a3      	ldr	r3, [r4, #8]
    574c:	9002      	str	r0, [sp, #8]
    574e:	9a00      	ldr	r2, [sp, #0]
    5750:	4293      	cmp	r3, r2
    5752:	da02      	bge.n	575a <__lshift+0x26>
    5754:	3101      	adds	r1, #1
    5756:	005b      	lsls	r3, r3, #1
    5758:	e7f9      	b.n	574e <__lshift+0x1a>
    575a:	9802      	ldr	r0, [sp, #8]
    575c:	f7ff fe2b 	bl	53b6 <_Balloc>
    5760:	2300      	movs	r3, #0
    5762:	0002      	movs	r2, r0
    5764:	0006      	movs	r6, r0
    5766:	0019      	movs	r1, r3
    5768:	3214      	adds	r2, #20
    576a:	42ab      	cmp	r3, r5
    576c:	da03      	bge.n	5776 <__lshift+0x42>
    576e:	0098      	lsls	r0, r3, #2
    5770:	5011      	str	r1, [r2, r0]
    5772:	3301      	adds	r3, #1
    5774:	e7f9      	b.n	576a <__lshift+0x36>
    5776:	43eb      	mvns	r3, r5
    5778:	17db      	asrs	r3, r3, #31
    577a:	401d      	ands	r5, r3
    577c:	0023      	movs	r3, r4
    577e:	00ad      	lsls	r5, r5, #2
    5780:	1955      	adds	r5, r2, r5
    5782:	6922      	ldr	r2, [r4, #16]
    5784:	3314      	adds	r3, #20
    5786:	0092      	lsls	r2, r2, #2
    5788:	189a      	adds	r2, r3, r2
    578a:	4694      	mov	ip, r2
    578c:	221f      	movs	r2, #31
    578e:	4017      	ands	r7, r2
    5790:	d014      	beq.n	57bc <__lshift+0x88>
    5792:	3201      	adds	r2, #1
    5794:	1bd2      	subs	r2, r2, r7
    5796:	9203      	str	r2, [sp, #12]
    5798:	2200      	movs	r2, #0
    579a:	6819      	ldr	r1, [r3, #0]
    579c:	0028      	movs	r0, r5
    579e:	40b9      	lsls	r1, r7
    57a0:	430a      	orrs	r2, r1
    57a2:	c504      	stmia	r5!, {r2}
    57a4:	cb04      	ldmia	r3!, {r2}
    57a6:	9903      	ldr	r1, [sp, #12]
    57a8:	40ca      	lsrs	r2, r1
    57aa:	459c      	cmp	ip, r3
    57ac:	d8f5      	bhi.n	579a <__lshift+0x66>
    57ae:	6042      	str	r2, [r0, #4]
    57b0:	2a00      	cmp	r2, #0
    57b2:	d007      	beq.n	57c4 <__lshift+0x90>
    57b4:	9b01      	ldr	r3, [sp, #4]
    57b6:	3302      	adds	r3, #2
    57b8:	9300      	str	r3, [sp, #0]
    57ba:	e003      	b.n	57c4 <__lshift+0x90>
    57bc:	cb04      	ldmia	r3!, {r2}
    57be:	c504      	stmia	r5!, {r2}
    57c0:	459c      	cmp	ip, r3
    57c2:	d8fb      	bhi.n	57bc <__lshift+0x88>
    57c4:	9b00      	ldr	r3, [sp, #0]
    57c6:	9802      	ldr	r0, [sp, #8]
    57c8:	3b01      	subs	r3, #1
    57ca:	6133      	str	r3, [r6, #16]
    57cc:	0021      	movs	r1, r4
    57ce:	f7ff fe2a 	bl	5426 <_Bfree>
    57d2:	0030      	movs	r0, r6
    57d4:	b005      	add	sp, #20
    57d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000057d8 <__mcmp>:
    57d8:	6903      	ldr	r3, [r0, #16]
    57da:	690a      	ldr	r2, [r1, #16]
    57dc:	b510      	push	{r4, lr}
    57de:	1a9b      	subs	r3, r3, r2
    57e0:	0004      	movs	r4, r0
    57e2:	1e18      	subs	r0, r3, #0
    57e4:	d112      	bne.n	580c <__mcmp+0x34>
    57e6:	0093      	lsls	r3, r2, #2
    57e8:	3414      	adds	r4, #20
    57ea:	3114      	adds	r1, #20
    57ec:	18e2      	adds	r2, r4, r3
    57ee:	18c9      	adds	r1, r1, r3
    57f0:	3a04      	subs	r2, #4
    57f2:	3904      	subs	r1, #4
    57f4:	6813      	ldr	r3, [r2, #0]
    57f6:	6808      	ldr	r0, [r1, #0]
    57f8:	4283      	cmp	r3, r0
    57fa:	d004      	beq.n	5806 <__mcmp+0x2e>
    57fc:	4283      	cmp	r3, r0
    57fe:	419b      	sbcs	r3, r3
    5800:	2001      	movs	r0, #1
    5802:	4318      	orrs	r0, r3
    5804:	e002      	b.n	580c <__mcmp+0x34>
    5806:	4294      	cmp	r4, r2
    5808:	d3f2      	bcc.n	57f0 <__mcmp+0x18>
    580a:	2000      	movs	r0, #0
    580c:	bd10      	pop	{r4, pc}

0000580e <__mdiff>:
    580e:	b5f0      	push	{r4, r5, r6, r7, lr}
    5810:	000c      	movs	r4, r1
    5812:	b085      	sub	sp, #20
    5814:	0007      	movs	r7, r0
    5816:	0011      	movs	r1, r2
    5818:	0020      	movs	r0, r4
    581a:	0015      	movs	r5, r2
    581c:	f7ff ffdc 	bl	57d8 <__mcmp>
    5820:	1e06      	subs	r6, r0, #0
    5822:	d107      	bne.n	5834 <__mdiff+0x26>
    5824:	0001      	movs	r1, r0
    5826:	0038      	movs	r0, r7
    5828:	f7ff fdc5 	bl	53b6 <_Balloc>
    582c:	2301      	movs	r3, #1
    582e:	6146      	str	r6, [r0, #20]
    5830:	6103      	str	r3, [r0, #16]
    5832:	e055      	b.n	58e0 <__mdiff+0xd2>
    5834:	2300      	movs	r3, #0
    5836:	9301      	str	r3, [sp, #4]
    5838:	4298      	cmp	r0, r3
    583a:	da04      	bge.n	5846 <__mdiff+0x38>
    583c:	0023      	movs	r3, r4
    583e:	002c      	movs	r4, r5
    5840:	001d      	movs	r5, r3
    5842:	2301      	movs	r3, #1
    5844:	9301      	str	r3, [sp, #4]
    5846:	6861      	ldr	r1, [r4, #4]
    5848:	0038      	movs	r0, r7
    584a:	f7ff fdb4 	bl	53b6 <_Balloc>
    584e:	9b01      	ldr	r3, [sp, #4]
    5850:	6926      	ldr	r6, [r4, #16]
    5852:	002f      	movs	r7, r5
    5854:	60c3      	str	r3, [r0, #12]
    5856:	3414      	adds	r4, #20
    5858:	00b3      	lsls	r3, r6, #2
    585a:	18e3      	adds	r3, r4, r3
    585c:	0002      	movs	r2, r0
    585e:	9302      	str	r3, [sp, #8]
    5860:	692b      	ldr	r3, [r5, #16]
    5862:	2500      	movs	r5, #0
    5864:	3714      	adds	r7, #20
    5866:	009b      	lsls	r3, r3, #2
    5868:	18fb      	adds	r3, r7, r3
    586a:	9303      	str	r3, [sp, #12]
    586c:	3214      	adds	r2, #20
    586e:	cc08      	ldmia	r4!, {r3}
    5870:	4669      	mov	r1, sp
    5872:	469c      	mov	ip, r3
    5874:	cf08      	ldmia	r7!, {r3}
    5876:	3204      	adds	r2, #4
    5878:	9300      	str	r3, [sp, #0]
    587a:	4663      	mov	r3, ip
    587c:	808b      	strh	r3, [r1, #4]
    587e:	888b      	ldrh	r3, [r1, #4]
    5880:	195d      	adds	r5, r3, r5
    5882:	9b00      	ldr	r3, [sp, #0]
    5884:	b29b      	uxth	r3, r3
    5886:	1aeb      	subs	r3, r5, r3
    5888:	4665      	mov	r5, ip
    588a:	9301      	str	r3, [sp, #4]
    588c:	9b00      	ldr	r3, [sp, #0]
    588e:	0c2d      	lsrs	r5, r5, #16
    5890:	0c19      	lsrs	r1, r3, #16
    5892:	9b01      	ldr	r3, [sp, #4]
    5894:	1a69      	subs	r1, r5, r1
    5896:	141d      	asrs	r5, r3, #16
    5898:	1f13      	subs	r3, r2, #4
    589a:	469c      	mov	ip, r3
    589c:	466b      	mov	r3, sp
    589e:	1949      	adds	r1, r1, r5
    58a0:	889b      	ldrh	r3, [r3, #4]
    58a2:	140d      	asrs	r5, r1, #16
    58a4:	0409      	lsls	r1, r1, #16
    58a6:	430b      	orrs	r3, r1
    58a8:	4661      	mov	r1, ip
    58aa:	600b      	str	r3, [r1, #0]
    58ac:	9b03      	ldr	r3, [sp, #12]
    58ae:	42bb      	cmp	r3, r7
    58b0:	d8dd      	bhi.n	586e <__mdiff+0x60>
    58b2:	9902      	ldr	r1, [sp, #8]
    58b4:	0013      	movs	r3, r2
    58b6:	428c      	cmp	r4, r1
    58b8:	d20b      	bcs.n	58d2 <__mdiff+0xc4>
    58ba:	cc02      	ldmia	r4!, {r1}
    58bc:	b28b      	uxth	r3, r1
    58be:	195b      	adds	r3, r3, r5
    58c0:	141d      	asrs	r5, r3, #16
    58c2:	0c09      	lsrs	r1, r1, #16
    58c4:	1949      	adds	r1, r1, r5
    58c6:	140d      	asrs	r5, r1, #16
    58c8:	b29b      	uxth	r3, r3
    58ca:	0409      	lsls	r1, r1, #16
    58cc:	430b      	orrs	r3, r1
    58ce:	c208      	stmia	r2!, {r3}
    58d0:	e7ef      	b.n	58b2 <__mdiff+0xa4>
    58d2:	3b04      	subs	r3, #4
    58d4:	681a      	ldr	r2, [r3, #0]
    58d6:	2a00      	cmp	r2, #0
    58d8:	d101      	bne.n	58de <__mdiff+0xd0>
    58da:	3e01      	subs	r6, #1
    58dc:	e7f9      	b.n	58d2 <__mdiff+0xc4>
    58de:	6106      	str	r6, [r0, #16]
    58e0:	b005      	add	sp, #20
    58e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000058e4 <__d2b>:
    58e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    58e6:	001d      	movs	r5, r3
    58e8:	2101      	movs	r1, #1
    58ea:	9f08      	ldr	r7, [sp, #32]
    58ec:	0014      	movs	r4, r2
    58ee:	f7ff fd62 	bl	53b6 <_Balloc>
    58f2:	032b      	lsls	r3, r5, #12
    58f4:	006d      	lsls	r5, r5, #1
    58f6:	0006      	movs	r6, r0
    58f8:	0b1b      	lsrs	r3, r3, #12
    58fa:	0d6d      	lsrs	r5, r5, #21
    58fc:	d002      	beq.n	5904 <__d2b+0x20>
    58fe:	2280      	movs	r2, #128	; 0x80
    5900:	0352      	lsls	r2, r2, #13
    5902:	4313      	orrs	r3, r2
    5904:	9301      	str	r3, [sp, #4]
    5906:	2c00      	cmp	r4, #0
    5908:	d018      	beq.n	593c <__d2b+0x58>
    590a:	4668      	mov	r0, sp
    590c:	9400      	str	r4, [sp, #0]
    590e:	f7ff fdfb 	bl	5508 <__lo0bits>
    5912:	9c00      	ldr	r4, [sp, #0]
    5914:	2800      	cmp	r0, #0
    5916:	d009      	beq.n	592c <__d2b+0x48>
    5918:	9b01      	ldr	r3, [sp, #4]
    591a:	2120      	movs	r1, #32
    591c:	001a      	movs	r2, r3
    591e:	1a09      	subs	r1, r1, r0
    5920:	408a      	lsls	r2, r1
    5922:	40c3      	lsrs	r3, r0
    5924:	4322      	orrs	r2, r4
    5926:	6172      	str	r2, [r6, #20]
    5928:	9301      	str	r3, [sp, #4]
    592a:	e000      	b.n	592e <__d2b+0x4a>
    592c:	6174      	str	r4, [r6, #20]
    592e:	9c01      	ldr	r4, [sp, #4]
    5930:	61b4      	str	r4, [r6, #24]
    5932:	1e63      	subs	r3, r4, #1
    5934:	419c      	sbcs	r4, r3
    5936:	3401      	adds	r4, #1
    5938:	6134      	str	r4, [r6, #16]
    593a:	e007      	b.n	594c <__d2b+0x68>
    593c:	a801      	add	r0, sp, #4
    593e:	f7ff fde3 	bl	5508 <__lo0bits>
    5942:	2401      	movs	r4, #1
    5944:	9b01      	ldr	r3, [sp, #4]
    5946:	6134      	str	r4, [r6, #16]
    5948:	6173      	str	r3, [r6, #20]
    594a:	3020      	adds	r0, #32
    594c:	2d00      	cmp	r5, #0
    594e:	d006      	beq.n	595e <__d2b+0x7a>
    5950:	4b0b      	ldr	r3, [pc, #44]	; (5980 <__d2b+0x9c>)
    5952:	18ed      	adds	r5, r5, r3
    5954:	2335      	movs	r3, #53	; 0x35
    5956:	182d      	adds	r5, r5, r0
    5958:	603d      	str	r5, [r7, #0]
    595a:	1a18      	subs	r0, r3, r0
    595c:	e00b      	b.n	5976 <__d2b+0x92>
    595e:	4b09      	ldr	r3, [pc, #36]	; (5984 <__d2b+0xa0>)
    5960:	18c0      	adds	r0, r0, r3
    5962:	4b09      	ldr	r3, [pc, #36]	; (5988 <__d2b+0xa4>)
    5964:	6038      	str	r0, [r7, #0]
    5966:	18e3      	adds	r3, r4, r3
    5968:	009b      	lsls	r3, r3, #2
    596a:	18f3      	adds	r3, r6, r3
    596c:	6958      	ldr	r0, [r3, #20]
    596e:	f7ff fdb0 	bl	54d2 <__hi0bits>
    5972:	0164      	lsls	r4, r4, #5
    5974:	1a20      	subs	r0, r4, r0
    5976:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5978:	6018      	str	r0, [r3, #0]
    597a:	0030      	movs	r0, r6
    597c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    597e:	46c0      	nop			; (mov r8, r8)
    5980:	fffffbcd 	.word	0xfffffbcd
    5984:	fffffbce 	.word	0xfffffbce
    5988:	3fffffff 	.word	0x3fffffff

0000598c <_calloc_r>:
    598c:	434a      	muls	r2, r1
    598e:	b570      	push	{r4, r5, r6, lr}
    5990:	0011      	movs	r1, r2
    5992:	0014      	movs	r4, r2
    5994:	f000 f84e 	bl	5a34 <_malloc_r>
    5998:	1e05      	subs	r5, r0, #0
    599a:	d003      	beq.n	59a4 <_calloc_r+0x18>
    599c:	0022      	movs	r2, r4
    599e:	2100      	movs	r1, #0
    59a0:	f7fd fe23 	bl	35ea <memset>
    59a4:	0028      	movs	r0, r5
    59a6:	bd70      	pop	{r4, r5, r6, pc}

000059a8 <_free_r>:
    59a8:	b530      	push	{r4, r5, lr}
    59aa:	2900      	cmp	r1, #0
    59ac:	d03e      	beq.n	5a2c <_free_r+0x84>
    59ae:	3904      	subs	r1, #4
    59b0:	680b      	ldr	r3, [r1, #0]
    59b2:	2b00      	cmp	r3, #0
    59b4:	da00      	bge.n	59b8 <_free_r+0x10>
    59b6:	18c9      	adds	r1, r1, r3
    59b8:	4a1d      	ldr	r2, [pc, #116]	; (5a30 <_free_r+0x88>)
    59ba:	6813      	ldr	r3, [r2, #0]
    59bc:	0014      	movs	r4, r2
    59be:	2b00      	cmp	r3, #0
    59c0:	d102      	bne.n	59c8 <_free_r+0x20>
    59c2:	604b      	str	r3, [r1, #4]
    59c4:	6011      	str	r1, [r2, #0]
    59c6:	e031      	b.n	5a2c <_free_r+0x84>
    59c8:	428b      	cmp	r3, r1
    59ca:	d90d      	bls.n	59e8 <_free_r+0x40>
    59cc:	680a      	ldr	r2, [r1, #0]
    59ce:	1888      	adds	r0, r1, r2
    59d0:	4283      	cmp	r3, r0
    59d2:	d103      	bne.n	59dc <_free_r+0x34>
    59d4:	6818      	ldr	r0, [r3, #0]
    59d6:	685b      	ldr	r3, [r3, #4]
    59d8:	1882      	adds	r2, r0, r2
    59da:	600a      	str	r2, [r1, #0]
    59dc:	604b      	str	r3, [r1, #4]
    59de:	6021      	str	r1, [r4, #0]
    59e0:	e024      	b.n	5a2c <_free_r+0x84>
    59e2:	428a      	cmp	r2, r1
    59e4:	d803      	bhi.n	59ee <_free_r+0x46>
    59e6:	0013      	movs	r3, r2
    59e8:	685a      	ldr	r2, [r3, #4]
    59ea:	2a00      	cmp	r2, #0
    59ec:	d1f9      	bne.n	59e2 <_free_r+0x3a>
    59ee:	681d      	ldr	r5, [r3, #0]
    59f0:	195c      	adds	r4, r3, r5
    59f2:	428c      	cmp	r4, r1
    59f4:	d10b      	bne.n	5a0e <_free_r+0x66>
    59f6:	6809      	ldr	r1, [r1, #0]
    59f8:	1869      	adds	r1, r5, r1
    59fa:	1858      	adds	r0, r3, r1
    59fc:	6019      	str	r1, [r3, #0]
    59fe:	4282      	cmp	r2, r0
    5a00:	d114      	bne.n	5a2c <_free_r+0x84>
    5a02:	6810      	ldr	r0, [r2, #0]
    5a04:	6852      	ldr	r2, [r2, #4]
    5a06:	1841      	adds	r1, r0, r1
    5a08:	6019      	str	r1, [r3, #0]
    5a0a:	605a      	str	r2, [r3, #4]
    5a0c:	e00e      	b.n	5a2c <_free_r+0x84>
    5a0e:	428c      	cmp	r4, r1
    5a10:	d902      	bls.n	5a18 <_free_r+0x70>
    5a12:	230c      	movs	r3, #12
    5a14:	6003      	str	r3, [r0, #0]
    5a16:	e009      	b.n	5a2c <_free_r+0x84>
    5a18:	6808      	ldr	r0, [r1, #0]
    5a1a:	180c      	adds	r4, r1, r0
    5a1c:	42a2      	cmp	r2, r4
    5a1e:	d103      	bne.n	5a28 <_free_r+0x80>
    5a20:	6814      	ldr	r4, [r2, #0]
    5a22:	6852      	ldr	r2, [r2, #4]
    5a24:	1820      	adds	r0, r4, r0
    5a26:	6008      	str	r0, [r1, #0]
    5a28:	604a      	str	r2, [r1, #4]
    5a2a:	6059      	str	r1, [r3, #4]
    5a2c:	bd30      	pop	{r4, r5, pc}
    5a2e:	46c0      	nop			; (mov r8, r8)
    5a30:	20000680 	.word	0x20000680

00005a34 <_malloc_r>:
    5a34:	2303      	movs	r3, #3
    5a36:	b570      	push	{r4, r5, r6, lr}
    5a38:	1ccd      	adds	r5, r1, #3
    5a3a:	439d      	bics	r5, r3
    5a3c:	3508      	adds	r5, #8
    5a3e:	0006      	movs	r6, r0
    5a40:	2d0c      	cmp	r5, #12
    5a42:	d201      	bcs.n	5a48 <_malloc_r+0x14>
    5a44:	250c      	movs	r5, #12
    5a46:	e005      	b.n	5a54 <_malloc_r+0x20>
    5a48:	2d00      	cmp	r5, #0
    5a4a:	da03      	bge.n	5a54 <_malloc_r+0x20>
    5a4c:	230c      	movs	r3, #12
    5a4e:	2000      	movs	r0, #0
    5a50:	6033      	str	r3, [r6, #0]
    5a52:	e040      	b.n	5ad6 <_malloc_r+0xa2>
    5a54:	42a9      	cmp	r1, r5
    5a56:	d8f9      	bhi.n	5a4c <_malloc_r+0x18>
    5a58:	4b1f      	ldr	r3, [pc, #124]	; (5ad8 <_malloc_r+0xa4>)
    5a5a:	681c      	ldr	r4, [r3, #0]
    5a5c:	001a      	movs	r2, r3
    5a5e:	0021      	movs	r1, r4
    5a60:	2900      	cmp	r1, #0
    5a62:	d013      	beq.n	5a8c <_malloc_r+0x58>
    5a64:	680b      	ldr	r3, [r1, #0]
    5a66:	1b5b      	subs	r3, r3, r5
    5a68:	d40d      	bmi.n	5a86 <_malloc_r+0x52>
    5a6a:	2b0b      	cmp	r3, #11
    5a6c:	d902      	bls.n	5a74 <_malloc_r+0x40>
    5a6e:	600b      	str	r3, [r1, #0]
    5a70:	18cc      	adds	r4, r1, r3
    5a72:	e01e      	b.n	5ab2 <_malloc_r+0x7e>
    5a74:	428c      	cmp	r4, r1
    5a76:	d102      	bne.n	5a7e <_malloc_r+0x4a>
    5a78:	6863      	ldr	r3, [r4, #4]
    5a7a:	6013      	str	r3, [r2, #0]
    5a7c:	e01a      	b.n	5ab4 <_malloc_r+0x80>
    5a7e:	684b      	ldr	r3, [r1, #4]
    5a80:	6063      	str	r3, [r4, #4]
    5a82:	000c      	movs	r4, r1
    5a84:	e016      	b.n	5ab4 <_malloc_r+0x80>
    5a86:	000c      	movs	r4, r1
    5a88:	6849      	ldr	r1, [r1, #4]
    5a8a:	e7e9      	b.n	5a60 <_malloc_r+0x2c>
    5a8c:	4c13      	ldr	r4, [pc, #76]	; (5adc <_malloc_r+0xa8>)
    5a8e:	6823      	ldr	r3, [r4, #0]
    5a90:	2b00      	cmp	r3, #0
    5a92:	d103      	bne.n	5a9c <_malloc_r+0x68>
    5a94:	0030      	movs	r0, r6
    5a96:	f000 f967 	bl	5d68 <_sbrk_r>
    5a9a:	6020      	str	r0, [r4, #0]
    5a9c:	0029      	movs	r1, r5
    5a9e:	0030      	movs	r0, r6
    5aa0:	f000 f962 	bl	5d68 <_sbrk_r>
    5aa4:	1c43      	adds	r3, r0, #1
    5aa6:	d0d1      	beq.n	5a4c <_malloc_r+0x18>
    5aa8:	2303      	movs	r3, #3
    5aaa:	1cc4      	adds	r4, r0, #3
    5aac:	439c      	bics	r4, r3
    5aae:	42a0      	cmp	r0, r4
    5ab0:	d10a      	bne.n	5ac8 <_malloc_r+0x94>
    5ab2:	6025      	str	r5, [r4, #0]
    5ab4:	0020      	movs	r0, r4
    5ab6:	2207      	movs	r2, #7
    5ab8:	300b      	adds	r0, #11
    5aba:	1d23      	adds	r3, r4, #4
    5abc:	4390      	bics	r0, r2
    5abe:	1ac3      	subs	r3, r0, r3
    5ac0:	d009      	beq.n	5ad6 <_malloc_r+0xa2>
    5ac2:	425a      	negs	r2, r3
    5ac4:	50e2      	str	r2, [r4, r3]
    5ac6:	e006      	b.n	5ad6 <_malloc_r+0xa2>
    5ac8:	1a21      	subs	r1, r4, r0
    5aca:	0030      	movs	r0, r6
    5acc:	f000 f94c 	bl	5d68 <_sbrk_r>
    5ad0:	1c43      	adds	r3, r0, #1
    5ad2:	d1ee      	bne.n	5ab2 <_malloc_r+0x7e>
    5ad4:	e7ba      	b.n	5a4c <_malloc_r+0x18>
    5ad6:	bd70      	pop	{r4, r5, r6, pc}
    5ad8:	20000680 	.word	0x20000680
    5adc:	2000067c 	.word	0x2000067c

00005ae0 <__sfputc_r>:
    5ae0:	6893      	ldr	r3, [r2, #8]
    5ae2:	b510      	push	{r4, lr}
    5ae4:	3b01      	subs	r3, #1
    5ae6:	6093      	str	r3, [r2, #8]
    5ae8:	2b00      	cmp	r3, #0
    5aea:	da05      	bge.n	5af8 <__sfputc_r+0x18>
    5aec:	6994      	ldr	r4, [r2, #24]
    5aee:	42a3      	cmp	r3, r4
    5af0:	db08      	blt.n	5b04 <__sfputc_r+0x24>
    5af2:	b2cb      	uxtb	r3, r1
    5af4:	2b0a      	cmp	r3, #10
    5af6:	d005      	beq.n	5b04 <__sfputc_r+0x24>
    5af8:	6813      	ldr	r3, [r2, #0]
    5afa:	1c58      	adds	r0, r3, #1
    5afc:	6010      	str	r0, [r2, #0]
    5afe:	7019      	strb	r1, [r3, #0]
    5b00:	b2c8      	uxtb	r0, r1
    5b02:	e001      	b.n	5b08 <__sfputc_r+0x28>
    5b04:	f7fe fb38 	bl	4178 <__swbuf_r>
    5b08:	bd10      	pop	{r4, pc}

00005b0a <__sfputs_r>:
    5b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b0c:	0006      	movs	r6, r0
    5b0e:	000f      	movs	r7, r1
    5b10:	0014      	movs	r4, r2
    5b12:	18d5      	adds	r5, r2, r3
    5b14:	42ac      	cmp	r4, r5
    5b16:	d008      	beq.n	5b2a <__sfputs_r+0x20>
    5b18:	7821      	ldrb	r1, [r4, #0]
    5b1a:	003a      	movs	r2, r7
    5b1c:	0030      	movs	r0, r6
    5b1e:	f7ff ffdf 	bl	5ae0 <__sfputc_r>
    5b22:	3401      	adds	r4, #1
    5b24:	1c43      	adds	r3, r0, #1
    5b26:	d1f5      	bne.n	5b14 <__sfputs_r+0xa>
    5b28:	e000      	b.n	5b2c <__sfputs_r+0x22>
    5b2a:	2000      	movs	r0, #0
    5b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005b30 <_vfiprintf_r>:
    5b30:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b32:	b09f      	sub	sp, #124	; 0x7c
    5b34:	0006      	movs	r6, r0
    5b36:	000f      	movs	r7, r1
    5b38:	9202      	str	r2, [sp, #8]
    5b3a:	9305      	str	r3, [sp, #20]
    5b3c:	2800      	cmp	r0, #0
    5b3e:	d004      	beq.n	5b4a <_vfiprintf_r+0x1a>
    5b40:	6983      	ldr	r3, [r0, #24]
    5b42:	2b00      	cmp	r3, #0
    5b44:	d101      	bne.n	5b4a <_vfiprintf_r+0x1a>
    5b46:	f7ff fb25 	bl	5194 <__sinit>
    5b4a:	4b7f      	ldr	r3, [pc, #508]	; (5d48 <_vfiprintf_r+0x218>)
    5b4c:	429f      	cmp	r7, r3
    5b4e:	d101      	bne.n	5b54 <_vfiprintf_r+0x24>
    5b50:	6877      	ldr	r7, [r6, #4]
    5b52:	e008      	b.n	5b66 <_vfiprintf_r+0x36>
    5b54:	4b7d      	ldr	r3, [pc, #500]	; (5d4c <_vfiprintf_r+0x21c>)
    5b56:	429f      	cmp	r7, r3
    5b58:	d101      	bne.n	5b5e <_vfiprintf_r+0x2e>
    5b5a:	68b7      	ldr	r7, [r6, #8]
    5b5c:	e003      	b.n	5b66 <_vfiprintf_r+0x36>
    5b5e:	4b7c      	ldr	r3, [pc, #496]	; (5d50 <_vfiprintf_r+0x220>)
    5b60:	429f      	cmp	r7, r3
    5b62:	d100      	bne.n	5b66 <_vfiprintf_r+0x36>
    5b64:	68f7      	ldr	r7, [r6, #12]
    5b66:	89bb      	ldrh	r3, [r7, #12]
    5b68:	071b      	lsls	r3, r3, #28
    5b6a:	d50a      	bpl.n	5b82 <_vfiprintf_r+0x52>
    5b6c:	693b      	ldr	r3, [r7, #16]
    5b6e:	2b00      	cmp	r3, #0
    5b70:	d007      	beq.n	5b82 <_vfiprintf_r+0x52>
    5b72:	2300      	movs	r3, #0
    5b74:	ad06      	add	r5, sp, #24
    5b76:	616b      	str	r3, [r5, #20]
    5b78:	3320      	adds	r3, #32
    5b7a:	766b      	strb	r3, [r5, #25]
    5b7c:	3310      	adds	r3, #16
    5b7e:	76ab      	strb	r3, [r5, #26]
    5b80:	e03d      	b.n	5bfe <_vfiprintf_r+0xce>
    5b82:	0039      	movs	r1, r7
    5b84:	0030      	movs	r0, r6
    5b86:	f7fe fb4f 	bl	4228 <__swsetup_r>
    5b8a:	2800      	cmp	r0, #0
    5b8c:	d0f1      	beq.n	5b72 <_vfiprintf_r+0x42>
    5b8e:	2001      	movs	r0, #1
    5b90:	4240      	negs	r0, r0
    5b92:	e0d6      	b.n	5d42 <_vfiprintf_r+0x212>
    5b94:	9a05      	ldr	r2, [sp, #20]
    5b96:	1d11      	adds	r1, r2, #4
    5b98:	6812      	ldr	r2, [r2, #0]
    5b9a:	9105      	str	r1, [sp, #20]
    5b9c:	2a00      	cmp	r2, #0
    5b9e:	da00      	bge.n	5ba2 <_vfiprintf_r+0x72>
    5ba0:	e07f      	b.n	5ca2 <_vfiprintf_r+0x172>
    5ba2:	9209      	str	r2, [sp, #36]	; 0x24
    5ba4:	3401      	adds	r4, #1
    5ba6:	7823      	ldrb	r3, [r4, #0]
    5ba8:	2b2e      	cmp	r3, #46	; 0x2e
    5baa:	d100      	bne.n	5bae <_vfiprintf_r+0x7e>
    5bac:	e08d      	b.n	5cca <_vfiprintf_r+0x19a>
    5bae:	7821      	ldrb	r1, [r4, #0]
    5bb0:	2203      	movs	r2, #3
    5bb2:	4868      	ldr	r0, [pc, #416]	; (5d54 <_vfiprintf_r+0x224>)
    5bb4:	f7ff fbf4 	bl	53a0 <memchr>
    5bb8:	2800      	cmp	r0, #0
    5bba:	d007      	beq.n	5bcc <_vfiprintf_r+0x9c>
    5bbc:	4b65      	ldr	r3, [pc, #404]	; (5d54 <_vfiprintf_r+0x224>)
    5bbe:	682a      	ldr	r2, [r5, #0]
    5bc0:	1ac0      	subs	r0, r0, r3
    5bc2:	2340      	movs	r3, #64	; 0x40
    5bc4:	4083      	lsls	r3, r0
    5bc6:	4313      	orrs	r3, r2
    5bc8:	602b      	str	r3, [r5, #0]
    5bca:	3401      	adds	r4, #1
    5bcc:	7821      	ldrb	r1, [r4, #0]
    5bce:	1c63      	adds	r3, r4, #1
    5bd0:	2206      	movs	r2, #6
    5bd2:	4861      	ldr	r0, [pc, #388]	; (5d58 <_vfiprintf_r+0x228>)
    5bd4:	9302      	str	r3, [sp, #8]
    5bd6:	7629      	strb	r1, [r5, #24]
    5bd8:	f7ff fbe2 	bl	53a0 <memchr>
    5bdc:	2800      	cmp	r0, #0
    5bde:	d100      	bne.n	5be2 <_vfiprintf_r+0xb2>
    5be0:	e09d      	b.n	5d1e <_vfiprintf_r+0x1ee>
    5be2:	4b5e      	ldr	r3, [pc, #376]	; (5d5c <_vfiprintf_r+0x22c>)
    5be4:	2b00      	cmp	r3, #0
    5be6:	d000      	beq.n	5bea <_vfiprintf_r+0xba>
    5be8:	e090      	b.n	5d0c <_vfiprintf_r+0x1dc>
    5bea:	2207      	movs	r2, #7
    5bec:	9b05      	ldr	r3, [sp, #20]
    5bee:	3307      	adds	r3, #7
    5bf0:	4393      	bics	r3, r2
    5bf2:	3308      	adds	r3, #8
    5bf4:	9305      	str	r3, [sp, #20]
    5bf6:	696b      	ldr	r3, [r5, #20]
    5bf8:	9a03      	ldr	r2, [sp, #12]
    5bfa:	189b      	adds	r3, r3, r2
    5bfc:	616b      	str	r3, [r5, #20]
    5bfe:	9c02      	ldr	r4, [sp, #8]
    5c00:	7823      	ldrb	r3, [r4, #0]
    5c02:	2b00      	cmp	r3, #0
    5c04:	d104      	bne.n	5c10 <_vfiprintf_r+0xe0>
    5c06:	9b02      	ldr	r3, [sp, #8]
    5c08:	1ae3      	subs	r3, r4, r3
    5c0a:	9304      	str	r3, [sp, #16]
    5c0c:	d012      	beq.n	5c34 <_vfiprintf_r+0x104>
    5c0e:	e003      	b.n	5c18 <_vfiprintf_r+0xe8>
    5c10:	2b25      	cmp	r3, #37	; 0x25
    5c12:	d0f8      	beq.n	5c06 <_vfiprintf_r+0xd6>
    5c14:	3401      	adds	r4, #1
    5c16:	e7f3      	b.n	5c00 <_vfiprintf_r+0xd0>
    5c18:	9b04      	ldr	r3, [sp, #16]
    5c1a:	9a02      	ldr	r2, [sp, #8]
    5c1c:	0039      	movs	r1, r7
    5c1e:	0030      	movs	r0, r6
    5c20:	f7ff ff73 	bl	5b0a <__sfputs_r>
    5c24:	1c43      	adds	r3, r0, #1
    5c26:	d100      	bne.n	5c2a <_vfiprintf_r+0xfa>
    5c28:	e086      	b.n	5d38 <_vfiprintf_r+0x208>
    5c2a:	696a      	ldr	r2, [r5, #20]
    5c2c:	9b04      	ldr	r3, [sp, #16]
    5c2e:	4694      	mov	ip, r2
    5c30:	4463      	add	r3, ip
    5c32:	616b      	str	r3, [r5, #20]
    5c34:	7823      	ldrb	r3, [r4, #0]
    5c36:	2b00      	cmp	r3, #0
    5c38:	d07e      	beq.n	5d38 <_vfiprintf_r+0x208>
    5c3a:	2201      	movs	r2, #1
    5c3c:	2300      	movs	r3, #0
    5c3e:	4252      	negs	r2, r2
    5c40:	606a      	str	r2, [r5, #4]
    5c42:	a902      	add	r1, sp, #8
    5c44:	3254      	adds	r2, #84	; 0x54
    5c46:	1852      	adds	r2, r2, r1
    5c48:	3401      	adds	r4, #1
    5c4a:	602b      	str	r3, [r5, #0]
    5c4c:	60eb      	str	r3, [r5, #12]
    5c4e:	60ab      	str	r3, [r5, #8]
    5c50:	7013      	strb	r3, [r2, #0]
    5c52:	65ab      	str	r3, [r5, #88]	; 0x58
    5c54:	7821      	ldrb	r1, [r4, #0]
    5c56:	2205      	movs	r2, #5
    5c58:	4841      	ldr	r0, [pc, #260]	; (5d60 <_vfiprintf_r+0x230>)
    5c5a:	f7ff fba1 	bl	53a0 <memchr>
    5c5e:	2800      	cmp	r0, #0
    5c60:	d008      	beq.n	5c74 <_vfiprintf_r+0x144>
    5c62:	4b3f      	ldr	r3, [pc, #252]	; (5d60 <_vfiprintf_r+0x230>)
    5c64:	682a      	ldr	r2, [r5, #0]
    5c66:	1ac0      	subs	r0, r0, r3
    5c68:	2301      	movs	r3, #1
    5c6a:	4083      	lsls	r3, r0
    5c6c:	4313      	orrs	r3, r2
    5c6e:	602b      	str	r3, [r5, #0]
    5c70:	3401      	adds	r4, #1
    5c72:	e7ef      	b.n	5c54 <_vfiprintf_r+0x124>
    5c74:	682b      	ldr	r3, [r5, #0]
    5c76:	06da      	lsls	r2, r3, #27
    5c78:	d504      	bpl.n	5c84 <_vfiprintf_r+0x154>
    5c7a:	2253      	movs	r2, #83	; 0x53
    5c7c:	2120      	movs	r1, #32
    5c7e:	a802      	add	r0, sp, #8
    5c80:	1812      	adds	r2, r2, r0
    5c82:	7011      	strb	r1, [r2, #0]
    5c84:	071a      	lsls	r2, r3, #28
    5c86:	d504      	bpl.n	5c92 <_vfiprintf_r+0x162>
    5c88:	2253      	movs	r2, #83	; 0x53
    5c8a:	212b      	movs	r1, #43	; 0x2b
    5c8c:	a802      	add	r0, sp, #8
    5c8e:	1812      	adds	r2, r2, r0
    5c90:	7011      	strb	r1, [r2, #0]
    5c92:	7822      	ldrb	r2, [r4, #0]
    5c94:	2a2a      	cmp	r2, #42	; 0x2a
    5c96:	d100      	bne.n	5c9a <_vfiprintf_r+0x16a>
    5c98:	e77c      	b.n	5b94 <_vfiprintf_r+0x64>
    5c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5c9c:	2000      	movs	r0, #0
    5c9e:	210a      	movs	r1, #10
    5ca0:	e005      	b.n	5cae <_vfiprintf_r+0x17e>
    5ca2:	4252      	negs	r2, r2
    5ca4:	60ea      	str	r2, [r5, #12]
    5ca6:	2202      	movs	r2, #2
    5ca8:	4313      	orrs	r3, r2
    5caa:	602b      	str	r3, [r5, #0]
    5cac:	e77a      	b.n	5ba4 <_vfiprintf_r+0x74>
    5cae:	7822      	ldrb	r2, [r4, #0]
    5cb0:	3a30      	subs	r2, #48	; 0x30
    5cb2:	2a09      	cmp	r2, #9
    5cb4:	d804      	bhi.n	5cc0 <_vfiprintf_r+0x190>
    5cb6:	434b      	muls	r3, r1
    5cb8:	3401      	adds	r4, #1
    5cba:	189b      	adds	r3, r3, r2
    5cbc:	2001      	movs	r0, #1
    5cbe:	e7f6      	b.n	5cae <_vfiprintf_r+0x17e>
    5cc0:	2800      	cmp	r0, #0
    5cc2:	d100      	bne.n	5cc6 <_vfiprintf_r+0x196>
    5cc4:	e76f      	b.n	5ba6 <_vfiprintf_r+0x76>
    5cc6:	9309      	str	r3, [sp, #36]	; 0x24
    5cc8:	e76d      	b.n	5ba6 <_vfiprintf_r+0x76>
    5cca:	7863      	ldrb	r3, [r4, #1]
    5ccc:	2b2a      	cmp	r3, #42	; 0x2a
    5cce:	d10a      	bne.n	5ce6 <_vfiprintf_r+0x1b6>
    5cd0:	9b05      	ldr	r3, [sp, #20]
    5cd2:	3402      	adds	r4, #2
    5cd4:	1d1a      	adds	r2, r3, #4
    5cd6:	681b      	ldr	r3, [r3, #0]
    5cd8:	9205      	str	r2, [sp, #20]
    5cda:	2b00      	cmp	r3, #0
    5cdc:	da01      	bge.n	5ce2 <_vfiprintf_r+0x1b2>
    5cde:	2301      	movs	r3, #1
    5ce0:	425b      	negs	r3, r3
    5ce2:	9307      	str	r3, [sp, #28]
    5ce4:	e763      	b.n	5bae <_vfiprintf_r+0x7e>
    5ce6:	2300      	movs	r3, #0
    5ce8:	200a      	movs	r0, #10
    5cea:	001a      	movs	r2, r3
    5cec:	3401      	adds	r4, #1
    5cee:	606b      	str	r3, [r5, #4]
    5cf0:	7821      	ldrb	r1, [r4, #0]
    5cf2:	3930      	subs	r1, #48	; 0x30
    5cf4:	2909      	cmp	r1, #9
    5cf6:	d804      	bhi.n	5d02 <_vfiprintf_r+0x1d2>
    5cf8:	4342      	muls	r2, r0
    5cfa:	3401      	adds	r4, #1
    5cfc:	1852      	adds	r2, r2, r1
    5cfe:	2301      	movs	r3, #1
    5d00:	e7f6      	b.n	5cf0 <_vfiprintf_r+0x1c0>
    5d02:	2b00      	cmp	r3, #0
    5d04:	d100      	bne.n	5d08 <_vfiprintf_r+0x1d8>
    5d06:	e752      	b.n	5bae <_vfiprintf_r+0x7e>
    5d08:	9207      	str	r2, [sp, #28]
    5d0a:	e750      	b.n	5bae <_vfiprintf_r+0x7e>
    5d0c:	ab05      	add	r3, sp, #20
    5d0e:	9300      	str	r3, [sp, #0]
    5d10:	003a      	movs	r2, r7
    5d12:	4b14      	ldr	r3, [pc, #80]	; (5d64 <_vfiprintf_r+0x234>)
    5d14:	0029      	movs	r1, r5
    5d16:	0030      	movs	r0, r6
    5d18:	f7fd fd06 	bl	3728 <_printf_float>
    5d1c:	e007      	b.n	5d2e <_vfiprintf_r+0x1fe>
    5d1e:	ab05      	add	r3, sp, #20
    5d20:	9300      	str	r3, [sp, #0]
    5d22:	003a      	movs	r2, r7
    5d24:	4b0f      	ldr	r3, [pc, #60]	; (5d64 <_vfiprintf_r+0x234>)
    5d26:	0029      	movs	r1, r5
    5d28:	0030      	movs	r0, r6
    5d2a:	f7fd ffbb 	bl	3ca4 <_printf_i>
    5d2e:	9003      	str	r0, [sp, #12]
    5d30:	9b03      	ldr	r3, [sp, #12]
    5d32:	3301      	adds	r3, #1
    5d34:	d000      	beq.n	5d38 <_vfiprintf_r+0x208>
    5d36:	e75e      	b.n	5bf6 <_vfiprintf_r+0xc6>
    5d38:	89bb      	ldrh	r3, [r7, #12]
    5d3a:	065b      	lsls	r3, r3, #25
    5d3c:	d500      	bpl.n	5d40 <_vfiprintf_r+0x210>
    5d3e:	e726      	b.n	5b8e <_vfiprintf_r+0x5e>
    5d40:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5d42:	b01f      	add	sp, #124	; 0x7c
    5d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d46:	46c0      	nop			; (mov r8, r8)
    5d48:	00008c0c 	.word	0x00008c0c
    5d4c:	00008c2c 	.word	0x00008c2c
    5d50:	00008c4c 	.word	0x00008c4c
    5d54:	00008d7a 	.word	0x00008d7a
    5d58:	00008d7e 	.word	0x00008d7e
    5d5c:	00003729 	.word	0x00003729
    5d60:	00008d74 	.word	0x00008d74
    5d64:	00005b0b 	.word	0x00005b0b

00005d68 <_sbrk_r>:
    5d68:	2300      	movs	r3, #0
    5d6a:	b570      	push	{r4, r5, r6, lr}
    5d6c:	4c06      	ldr	r4, [pc, #24]	; (5d88 <_sbrk_r+0x20>)
    5d6e:	0005      	movs	r5, r0
    5d70:	0008      	movs	r0, r1
    5d72:	6023      	str	r3, [r4, #0]
    5d74:	f7fc fe32 	bl	29dc <_sbrk>
    5d78:	1c43      	adds	r3, r0, #1
    5d7a:	d103      	bne.n	5d84 <_sbrk_r+0x1c>
    5d7c:	6823      	ldr	r3, [r4, #0]
    5d7e:	2b00      	cmp	r3, #0
    5d80:	d000      	beq.n	5d84 <_sbrk_r+0x1c>
    5d82:	602b      	str	r3, [r5, #0]
    5d84:	bd70      	pop	{r4, r5, r6, pc}
    5d86:	46c0      	nop			; (mov r8, r8)
    5d88:	200008fc 	.word	0x200008fc

00005d8c <__sread>:
    5d8c:	b570      	push	{r4, r5, r6, lr}
    5d8e:	000c      	movs	r4, r1
    5d90:	250e      	movs	r5, #14
    5d92:	5f49      	ldrsh	r1, [r1, r5]
    5d94:	f000 f8a4 	bl	5ee0 <_read_r>
    5d98:	2800      	cmp	r0, #0
    5d9a:	db03      	blt.n	5da4 <__sread+0x18>
    5d9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5d9e:	181b      	adds	r3, r3, r0
    5da0:	6563      	str	r3, [r4, #84]	; 0x54
    5da2:	e003      	b.n	5dac <__sread+0x20>
    5da4:	89a2      	ldrh	r2, [r4, #12]
    5da6:	4b02      	ldr	r3, [pc, #8]	; (5db0 <__sread+0x24>)
    5da8:	4013      	ands	r3, r2
    5daa:	81a3      	strh	r3, [r4, #12]
    5dac:	bd70      	pop	{r4, r5, r6, pc}
    5dae:	46c0      	nop			; (mov r8, r8)
    5db0:	ffffefff 	.word	0xffffefff

00005db4 <__swrite>:
    5db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5db6:	001f      	movs	r7, r3
    5db8:	898b      	ldrh	r3, [r1, #12]
    5dba:	0005      	movs	r5, r0
    5dbc:	000c      	movs	r4, r1
    5dbe:	0016      	movs	r6, r2
    5dc0:	05db      	lsls	r3, r3, #23
    5dc2:	d505      	bpl.n	5dd0 <__swrite+0x1c>
    5dc4:	230e      	movs	r3, #14
    5dc6:	5ec9      	ldrsh	r1, [r1, r3]
    5dc8:	2200      	movs	r2, #0
    5dca:	2302      	movs	r3, #2
    5dcc:	f000 f874 	bl	5eb8 <_lseek_r>
    5dd0:	89a2      	ldrh	r2, [r4, #12]
    5dd2:	4b05      	ldr	r3, [pc, #20]	; (5de8 <__swrite+0x34>)
    5dd4:	0028      	movs	r0, r5
    5dd6:	4013      	ands	r3, r2
    5dd8:	81a3      	strh	r3, [r4, #12]
    5dda:	0032      	movs	r2, r6
    5ddc:	230e      	movs	r3, #14
    5dde:	5ee1      	ldrsh	r1, [r4, r3]
    5de0:	003b      	movs	r3, r7
    5de2:	f000 f81f 	bl	5e24 <_write_r>
    5de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5de8:	ffffefff 	.word	0xffffefff

00005dec <__sseek>:
    5dec:	b570      	push	{r4, r5, r6, lr}
    5dee:	000c      	movs	r4, r1
    5df0:	250e      	movs	r5, #14
    5df2:	5f49      	ldrsh	r1, [r1, r5]
    5df4:	f000 f860 	bl	5eb8 <_lseek_r>
    5df8:	89a3      	ldrh	r3, [r4, #12]
    5dfa:	1c42      	adds	r2, r0, #1
    5dfc:	d103      	bne.n	5e06 <__sseek+0x1a>
    5dfe:	4a05      	ldr	r2, [pc, #20]	; (5e14 <__sseek+0x28>)
    5e00:	4013      	ands	r3, r2
    5e02:	81a3      	strh	r3, [r4, #12]
    5e04:	e004      	b.n	5e10 <__sseek+0x24>
    5e06:	2280      	movs	r2, #128	; 0x80
    5e08:	0152      	lsls	r2, r2, #5
    5e0a:	4313      	orrs	r3, r2
    5e0c:	81a3      	strh	r3, [r4, #12]
    5e0e:	6560      	str	r0, [r4, #84]	; 0x54
    5e10:	bd70      	pop	{r4, r5, r6, pc}
    5e12:	46c0      	nop			; (mov r8, r8)
    5e14:	ffffefff 	.word	0xffffefff

00005e18 <__sclose>:
    5e18:	b510      	push	{r4, lr}
    5e1a:	230e      	movs	r3, #14
    5e1c:	5ec9      	ldrsh	r1, [r1, r3]
    5e1e:	f000 f815 	bl	5e4c <_close_r>
    5e22:	bd10      	pop	{r4, pc}

00005e24 <_write_r>:
    5e24:	b570      	push	{r4, r5, r6, lr}
    5e26:	0005      	movs	r5, r0
    5e28:	0008      	movs	r0, r1
    5e2a:	0011      	movs	r1, r2
    5e2c:	2200      	movs	r2, #0
    5e2e:	4c06      	ldr	r4, [pc, #24]	; (5e48 <_write_r+0x24>)
    5e30:	6022      	str	r2, [r4, #0]
    5e32:	001a      	movs	r2, r3
    5e34:	f7fc fdaa 	bl	298c <_write>
    5e38:	1c43      	adds	r3, r0, #1
    5e3a:	d103      	bne.n	5e44 <_write_r+0x20>
    5e3c:	6823      	ldr	r3, [r4, #0]
    5e3e:	2b00      	cmp	r3, #0
    5e40:	d000      	beq.n	5e44 <_write_r+0x20>
    5e42:	602b      	str	r3, [r5, #0]
    5e44:	bd70      	pop	{r4, r5, r6, pc}
    5e46:	46c0      	nop			; (mov r8, r8)
    5e48:	200008fc 	.word	0x200008fc

00005e4c <_close_r>:
    5e4c:	2300      	movs	r3, #0
    5e4e:	b570      	push	{r4, r5, r6, lr}
    5e50:	4c06      	ldr	r4, [pc, #24]	; (5e6c <_close_r+0x20>)
    5e52:	0005      	movs	r5, r0
    5e54:	0008      	movs	r0, r1
    5e56:	6023      	str	r3, [r4, #0]
    5e58:	f7fc fdd2 	bl	2a00 <_close>
    5e5c:	1c43      	adds	r3, r0, #1
    5e5e:	d103      	bne.n	5e68 <_close_r+0x1c>
    5e60:	6823      	ldr	r3, [r4, #0]
    5e62:	2b00      	cmp	r3, #0
    5e64:	d000      	beq.n	5e68 <_close_r+0x1c>
    5e66:	602b      	str	r3, [r5, #0]
    5e68:	bd70      	pop	{r4, r5, r6, pc}
    5e6a:	46c0      	nop			; (mov r8, r8)
    5e6c:	200008fc 	.word	0x200008fc

00005e70 <_fstat_r>:
    5e70:	2300      	movs	r3, #0
    5e72:	b570      	push	{r4, r5, r6, lr}
    5e74:	4c06      	ldr	r4, [pc, #24]	; (5e90 <_fstat_r+0x20>)
    5e76:	0005      	movs	r5, r0
    5e78:	0008      	movs	r0, r1
    5e7a:	0011      	movs	r1, r2
    5e7c:	6023      	str	r3, [r4, #0]
    5e7e:	f7fc fdc3 	bl	2a08 <_fstat>
    5e82:	1c43      	adds	r3, r0, #1
    5e84:	d103      	bne.n	5e8e <_fstat_r+0x1e>
    5e86:	6823      	ldr	r3, [r4, #0]
    5e88:	2b00      	cmp	r3, #0
    5e8a:	d000      	beq.n	5e8e <_fstat_r+0x1e>
    5e8c:	602b      	str	r3, [r5, #0]
    5e8e:	bd70      	pop	{r4, r5, r6, pc}
    5e90:	200008fc 	.word	0x200008fc

00005e94 <_isatty_r>:
    5e94:	2300      	movs	r3, #0
    5e96:	b570      	push	{r4, r5, r6, lr}
    5e98:	4c06      	ldr	r4, [pc, #24]	; (5eb4 <_isatty_r+0x20>)
    5e9a:	0005      	movs	r5, r0
    5e9c:	0008      	movs	r0, r1
    5e9e:	6023      	str	r3, [r4, #0]
    5ea0:	f7fc fdb8 	bl	2a14 <_isatty>
    5ea4:	1c43      	adds	r3, r0, #1
    5ea6:	d103      	bne.n	5eb0 <_isatty_r+0x1c>
    5ea8:	6823      	ldr	r3, [r4, #0]
    5eaa:	2b00      	cmp	r3, #0
    5eac:	d000      	beq.n	5eb0 <_isatty_r+0x1c>
    5eae:	602b      	str	r3, [r5, #0]
    5eb0:	bd70      	pop	{r4, r5, r6, pc}
    5eb2:	46c0      	nop			; (mov r8, r8)
    5eb4:	200008fc 	.word	0x200008fc

00005eb8 <_lseek_r>:
    5eb8:	b570      	push	{r4, r5, r6, lr}
    5eba:	0005      	movs	r5, r0
    5ebc:	0008      	movs	r0, r1
    5ebe:	0011      	movs	r1, r2
    5ec0:	2200      	movs	r2, #0
    5ec2:	4c06      	ldr	r4, [pc, #24]	; (5edc <_lseek_r+0x24>)
    5ec4:	6022      	str	r2, [r4, #0]
    5ec6:	001a      	movs	r2, r3
    5ec8:	f7fc fda6 	bl	2a18 <_lseek>
    5ecc:	1c43      	adds	r3, r0, #1
    5ece:	d103      	bne.n	5ed8 <_lseek_r+0x20>
    5ed0:	6823      	ldr	r3, [r4, #0]
    5ed2:	2b00      	cmp	r3, #0
    5ed4:	d000      	beq.n	5ed8 <_lseek_r+0x20>
    5ed6:	602b      	str	r3, [r5, #0]
    5ed8:	bd70      	pop	{r4, r5, r6, pc}
    5eda:	46c0      	nop			; (mov r8, r8)
    5edc:	200008fc 	.word	0x200008fc

00005ee0 <_read_r>:
    5ee0:	b570      	push	{r4, r5, r6, lr}
    5ee2:	0005      	movs	r5, r0
    5ee4:	0008      	movs	r0, r1
    5ee6:	0011      	movs	r1, r2
    5ee8:	2200      	movs	r2, #0
    5eea:	4c06      	ldr	r4, [pc, #24]	; (5f04 <_read_r+0x24>)
    5eec:	6022      	str	r2, [r4, #0]
    5eee:	001a      	movs	r2, r3
    5ef0:	f7fc fd2c 	bl	294c <_read>
    5ef4:	1c43      	adds	r3, r0, #1
    5ef6:	d103      	bne.n	5f00 <_read_r+0x20>
    5ef8:	6823      	ldr	r3, [r4, #0]
    5efa:	2b00      	cmp	r3, #0
    5efc:	d000      	beq.n	5f00 <_read_r+0x20>
    5efe:	602b      	str	r3, [r5, #0]
    5f00:	bd70      	pop	{r4, r5, r6, pc}
    5f02:	46c0      	nop			; (mov r8, r8)
    5f04:	200008fc 	.word	0x200008fc

00005f08 <__gnu_thumb1_case_uqi>:
    5f08:	b402      	push	{r1}
    5f0a:	4671      	mov	r1, lr
    5f0c:	0849      	lsrs	r1, r1, #1
    5f0e:	0049      	lsls	r1, r1, #1
    5f10:	5c09      	ldrb	r1, [r1, r0]
    5f12:	0049      	lsls	r1, r1, #1
    5f14:	448e      	add	lr, r1
    5f16:	bc02      	pop	{r1}
    5f18:	4770      	bx	lr
    5f1a:	46c0      	nop			; (mov r8, r8)

00005f1c <__aeabi_uidiv>:
    5f1c:	2200      	movs	r2, #0
    5f1e:	0843      	lsrs	r3, r0, #1
    5f20:	428b      	cmp	r3, r1
    5f22:	d374      	bcc.n	600e <__aeabi_uidiv+0xf2>
    5f24:	0903      	lsrs	r3, r0, #4
    5f26:	428b      	cmp	r3, r1
    5f28:	d35f      	bcc.n	5fea <__aeabi_uidiv+0xce>
    5f2a:	0a03      	lsrs	r3, r0, #8
    5f2c:	428b      	cmp	r3, r1
    5f2e:	d344      	bcc.n	5fba <__aeabi_uidiv+0x9e>
    5f30:	0b03      	lsrs	r3, r0, #12
    5f32:	428b      	cmp	r3, r1
    5f34:	d328      	bcc.n	5f88 <__aeabi_uidiv+0x6c>
    5f36:	0c03      	lsrs	r3, r0, #16
    5f38:	428b      	cmp	r3, r1
    5f3a:	d30d      	bcc.n	5f58 <__aeabi_uidiv+0x3c>
    5f3c:	22ff      	movs	r2, #255	; 0xff
    5f3e:	0209      	lsls	r1, r1, #8
    5f40:	ba12      	rev	r2, r2
    5f42:	0c03      	lsrs	r3, r0, #16
    5f44:	428b      	cmp	r3, r1
    5f46:	d302      	bcc.n	5f4e <__aeabi_uidiv+0x32>
    5f48:	1212      	asrs	r2, r2, #8
    5f4a:	0209      	lsls	r1, r1, #8
    5f4c:	d065      	beq.n	601a <__aeabi_uidiv+0xfe>
    5f4e:	0b03      	lsrs	r3, r0, #12
    5f50:	428b      	cmp	r3, r1
    5f52:	d319      	bcc.n	5f88 <__aeabi_uidiv+0x6c>
    5f54:	e000      	b.n	5f58 <__aeabi_uidiv+0x3c>
    5f56:	0a09      	lsrs	r1, r1, #8
    5f58:	0bc3      	lsrs	r3, r0, #15
    5f5a:	428b      	cmp	r3, r1
    5f5c:	d301      	bcc.n	5f62 <__aeabi_uidiv+0x46>
    5f5e:	03cb      	lsls	r3, r1, #15
    5f60:	1ac0      	subs	r0, r0, r3
    5f62:	4152      	adcs	r2, r2
    5f64:	0b83      	lsrs	r3, r0, #14
    5f66:	428b      	cmp	r3, r1
    5f68:	d301      	bcc.n	5f6e <__aeabi_uidiv+0x52>
    5f6a:	038b      	lsls	r3, r1, #14
    5f6c:	1ac0      	subs	r0, r0, r3
    5f6e:	4152      	adcs	r2, r2
    5f70:	0b43      	lsrs	r3, r0, #13
    5f72:	428b      	cmp	r3, r1
    5f74:	d301      	bcc.n	5f7a <__aeabi_uidiv+0x5e>
    5f76:	034b      	lsls	r3, r1, #13
    5f78:	1ac0      	subs	r0, r0, r3
    5f7a:	4152      	adcs	r2, r2
    5f7c:	0b03      	lsrs	r3, r0, #12
    5f7e:	428b      	cmp	r3, r1
    5f80:	d301      	bcc.n	5f86 <__aeabi_uidiv+0x6a>
    5f82:	030b      	lsls	r3, r1, #12
    5f84:	1ac0      	subs	r0, r0, r3
    5f86:	4152      	adcs	r2, r2
    5f88:	0ac3      	lsrs	r3, r0, #11
    5f8a:	428b      	cmp	r3, r1
    5f8c:	d301      	bcc.n	5f92 <__aeabi_uidiv+0x76>
    5f8e:	02cb      	lsls	r3, r1, #11
    5f90:	1ac0      	subs	r0, r0, r3
    5f92:	4152      	adcs	r2, r2
    5f94:	0a83      	lsrs	r3, r0, #10
    5f96:	428b      	cmp	r3, r1
    5f98:	d301      	bcc.n	5f9e <__aeabi_uidiv+0x82>
    5f9a:	028b      	lsls	r3, r1, #10
    5f9c:	1ac0      	subs	r0, r0, r3
    5f9e:	4152      	adcs	r2, r2
    5fa0:	0a43      	lsrs	r3, r0, #9
    5fa2:	428b      	cmp	r3, r1
    5fa4:	d301      	bcc.n	5faa <__aeabi_uidiv+0x8e>
    5fa6:	024b      	lsls	r3, r1, #9
    5fa8:	1ac0      	subs	r0, r0, r3
    5faa:	4152      	adcs	r2, r2
    5fac:	0a03      	lsrs	r3, r0, #8
    5fae:	428b      	cmp	r3, r1
    5fb0:	d301      	bcc.n	5fb6 <__aeabi_uidiv+0x9a>
    5fb2:	020b      	lsls	r3, r1, #8
    5fb4:	1ac0      	subs	r0, r0, r3
    5fb6:	4152      	adcs	r2, r2
    5fb8:	d2cd      	bcs.n	5f56 <__aeabi_uidiv+0x3a>
    5fba:	09c3      	lsrs	r3, r0, #7
    5fbc:	428b      	cmp	r3, r1
    5fbe:	d301      	bcc.n	5fc4 <__aeabi_uidiv+0xa8>
    5fc0:	01cb      	lsls	r3, r1, #7
    5fc2:	1ac0      	subs	r0, r0, r3
    5fc4:	4152      	adcs	r2, r2
    5fc6:	0983      	lsrs	r3, r0, #6
    5fc8:	428b      	cmp	r3, r1
    5fca:	d301      	bcc.n	5fd0 <__aeabi_uidiv+0xb4>
    5fcc:	018b      	lsls	r3, r1, #6
    5fce:	1ac0      	subs	r0, r0, r3
    5fd0:	4152      	adcs	r2, r2
    5fd2:	0943      	lsrs	r3, r0, #5
    5fd4:	428b      	cmp	r3, r1
    5fd6:	d301      	bcc.n	5fdc <__aeabi_uidiv+0xc0>
    5fd8:	014b      	lsls	r3, r1, #5
    5fda:	1ac0      	subs	r0, r0, r3
    5fdc:	4152      	adcs	r2, r2
    5fde:	0903      	lsrs	r3, r0, #4
    5fe0:	428b      	cmp	r3, r1
    5fe2:	d301      	bcc.n	5fe8 <__aeabi_uidiv+0xcc>
    5fe4:	010b      	lsls	r3, r1, #4
    5fe6:	1ac0      	subs	r0, r0, r3
    5fe8:	4152      	adcs	r2, r2
    5fea:	08c3      	lsrs	r3, r0, #3
    5fec:	428b      	cmp	r3, r1
    5fee:	d301      	bcc.n	5ff4 <__aeabi_uidiv+0xd8>
    5ff0:	00cb      	lsls	r3, r1, #3
    5ff2:	1ac0      	subs	r0, r0, r3
    5ff4:	4152      	adcs	r2, r2
    5ff6:	0883      	lsrs	r3, r0, #2
    5ff8:	428b      	cmp	r3, r1
    5ffa:	d301      	bcc.n	6000 <__aeabi_uidiv+0xe4>
    5ffc:	008b      	lsls	r3, r1, #2
    5ffe:	1ac0      	subs	r0, r0, r3
    6000:	4152      	adcs	r2, r2
    6002:	0843      	lsrs	r3, r0, #1
    6004:	428b      	cmp	r3, r1
    6006:	d301      	bcc.n	600c <__aeabi_uidiv+0xf0>
    6008:	004b      	lsls	r3, r1, #1
    600a:	1ac0      	subs	r0, r0, r3
    600c:	4152      	adcs	r2, r2
    600e:	1a41      	subs	r1, r0, r1
    6010:	d200      	bcs.n	6014 <__aeabi_uidiv+0xf8>
    6012:	4601      	mov	r1, r0
    6014:	4152      	adcs	r2, r2
    6016:	4610      	mov	r0, r2
    6018:	4770      	bx	lr
    601a:	e7ff      	b.n	601c <__aeabi_uidiv+0x100>
    601c:	b501      	push	{r0, lr}
    601e:	2000      	movs	r0, #0
    6020:	f000 f8f0 	bl	6204 <__aeabi_idiv0>
    6024:	bd02      	pop	{r1, pc}
    6026:	46c0      	nop			; (mov r8, r8)

00006028 <__aeabi_uidivmod>:
    6028:	2900      	cmp	r1, #0
    602a:	d0f7      	beq.n	601c <__aeabi_uidiv+0x100>
    602c:	e776      	b.n	5f1c <__aeabi_uidiv>
    602e:	4770      	bx	lr

00006030 <__aeabi_idiv>:
    6030:	4603      	mov	r3, r0
    6032:	430b      	orrs	r3, r1
    6034:	d47f      	bmi.n	6136 <__aeabi_idiv+0x106>
    6036:	2200      	movs	r2, #0
    6038:	0843      	lsrs	r3, r0, #1
    603a:	428b      	cmp	r3, r1
    603c:	d374      	bcc.n	6128 <__aeabi_idiv+0xf8>
    603e:	0903      	lsrs	r3, r0, #4
    6040:	428b      	cmp	r3, r1
    6042:	d35f      	bcc.n	6104 <__aeabi_idiv+0xd4>
    6044:	0a03      	lsrs	r3, r0, #8
    6046:	428b      	cmp	r3, r1
    6048:	d344      	bcc.n	60d4 <__aeabi_idiv+0xa4>
    604a:	0b03      	lsrs	r3, r0, #12
    604c:	428b      	cmp	r3, r1
    604e:	d328      	bcc.n	60a2 <__aeabi_idiv+0x72>
    6050:	0c03      	lsrs	r3, r0, #16
    6052:	428b      	cmp	r3, r1
    6054:	d30d      	bcc.n	6072 <__aeabi_idiv+0x42>
    6056:	22ff      	movs	r2, #255	; 0xff
    6058:	0209      	lsls	r1, r1, #8
    605a:	ba12      	rev	r2, r2
    605c:	0c03      	lsrs	r3, r0, #16
    605e:	428b      	cmp	r3, r1
    6060:	d302      	bcc.n	6068 <__aeabi_idiv+0x38>
    6062:	1212      	asrs	r2, r2, #8
    6064:	0209      	lsls	r1, r1, #8
    6066:	d065      	beq.n	6134 <__aeabi_idiv+0x104>
    6068:	0b03      	lsrs	r3, r0, #12
    606a:	428b      	cmp	r3, r1
    606c:	d319      	bcc.n	60a2 <__aeabi_idiv+0x72>
    606e:	e000      	b.n	6072 <__aeabi_idiv+0x42>
    6070:	0a09      	lsrs	r1, r1, #8
    6072:	0bc3      	lsrs	r3, r0, #15
    6074:	428b      	cmp	r3, r1
    6076:	d301      	bcc.n	607c <__aeabi_idiv+0x4c>
    6078:	03cb      	lsls	r3, r1, #15
    607a:	1ac0      	subs	r0, r0, r3
    607c:	4152      	adcs	r2, r2
    607e:	0b83      	lsrs	r3, r0, #14
    6080:	428b      	cmp	r3, r1
    6082:	d301      	bcc.n	6088 <__aeabi_idiv+0x58>
    6084:	038b      	lsls	r3, r1, #14
    6086:	1ac0      	subs	r0, r0, r3
    6088:	4152      	adcs	r2, r2
    608a:	0b43      	lsrs	r3, r0, #13
    608c:	428b      	cmp	r3, r1
    608e:	d301      	bcc.n	6094 <__aeabi_idiv+0x64>
    6090:	034b      	lsls	r3, r1, #13
    6092:	1ac0      	subs	r0, r0, r3
    6094:	4152      	adcs	r2, r2
    6096:	0b03      	lsrs	r3, r0, #12
    6098:	428b      	cmp	r3, r1
    609a:	d301      	bcc.n	60a0 <__aeabi_idiv+0x70>
    609c:	030b      	lsls	r3, r1, #12
    609e:	1ac0      	subs	r0, r0, r3
    60a0:	4152      	adcs	r2, r2
    60a2:	0ac3      	lsrs	r3, r0, #11
    60a4:	428b      	cmp	r3, r1
    60a6:	d301      	bcc.n	60ac <__aeabi_idiv+0x7c>
    60a8:	02cb      	lsls	r3, r1, #11
    60aa:	1ac0      	subs	r0, r0, r3
    60ac:	4152      	adcs	r2, r2
    60ae:	0a83      	lsrs	r3, r0, #10
    60b0:	428b      	cmp	r3, r1
    60b2:	d301      	bcc.n	60b8 <__aeabi_idiv+0x88>
    60b4:	028b      	lsls	r3, r1, #10
    60b6:	1ac0      	subs	r0, r0, r3
    60b8:	4152      	adcs	r2, r2
    60ba:	0a43      	lsrs	r3, r0, #9
    60bc:	428b      	cmp	r3, r1
    60be:	d301      	bcc.n	60c4 <__aeabi_idiv+0x94>
    60c0:	024b      	lsls	r3, r1, #9
    60c2:	1ac0      	subs	r0, r0, r3
    60c4:	4152      	adcs	r2, r2
    60c6:	0a03      	lsrs	r3, r0, #8
    60c8:	428b      	cmp	r3, r1
    60ca:	d301      	bcc.n	60d0 <__aeabi_idiv+0xa0>
    60cc:	020b      	lsls	r3, r1, #8
    60ce:	1ac0      	subs	r0, r0, r3
    60d0:	4152      	adcs	r2, r2
    60d2:	d2cd      	bcs.n	6070 <__aeabi_idiv+0x40>
    60d4:	09c3      	lsrs	r3, r0, #7
    60d6:	428b      	cmp	r3, r1
    60d8:	d301      	bcc.n	60de <__aeabi_idiv+0xae>
    60da:	01cb      	lsls	r3, r1, #7
    60dc:	1ac0      	subs	r0, r0, r3
    60de:	4152      	adcs	r2, r2
    60e0:	0983      	lsrs	r3, r0, #6
    60e2:	428b      	cmp	r3, r1
    60e4:	d301      	bcc.n	60ea <__aeabi_idiv+0xba>
    60e6:	018b      	lsls	r3, r1, #6
    60e8:	1ac0      	subs	r0, r0, r3
    60ea:	4152      	adcs	r2, r2
    60ec:	0943      	lsrs	r3, r0, #5
    60ee:	428b      	cmp	r3, r1
    60f0:	d301      	bcc.n	60f6 <__aeabi_idiv+0xc6>
    60f2:	014b      	lsls	r3, r1, #5
    60f4:	1ac0      	subs	r0, r0, r3
    60f6:	4152      	adcs	r2, r2
    60f8:	0903      	lsrs	r3, r0, #4
    60fa:	428b      	cmp	r3, r1
    60fc:	d301      	bcc.n	6102 <__aeabi_idiv+0xd2>
    60fe:	010b      	lsls	r3, r1, #4
    6100:	1ac0      	subs	r0, r0, r3
    6102:	4152      	adcs	r2, r2
    6104:	08c3      	lsrs	r3, r0, #3
    6106:	428b      	cmp	r3, r1
    6108:	d301      	bcc.n	610e <__aeabi_idiv+0xde>
    610a:	00cb      	lsls	r3, r1, #3
    610c:	1ac0      	subs	r0, r0, r3
    610e:	4152      	adcs	r2, r2
    6110:	0883      	lsrs	r3, r0, #2
    6112:	428b      	cmp	r3, r1
    6114:	d301      	bcc.n	611a <__aeabi_idiv+0xea>
    6116:	008b      	lsls	r3, r1, #2
    6118:	1ac0      	subs	r0, r0, r3
    611a:	4152      	adcs	r2, r2
    611c:	0843      	lsrs	r3, r0, #1
    611e:	428b      	cmp	r3, r1
    6120:	d301      	bcc.n	6126 <__aeabi_idiv+0xf6>
    6122:	004b      	lsls	r3, r1, #1
    6124:	1ac0      	subs	r0, r0, r3
    6126:	4152      	adcs	r2, r2
    6128:	1a41      	subs	r1, r0, r1
    612a:	d200      	bcs.n	612e <__aeabi_idiv+0xfe>
    612c:	4601      	mov	r1, r0
    612e:	4152      	adcs	r2, r2
    6130:	4610      	mov	r0, r2
    6132:	4770      	bx	lr
    6134:	e05d      	b.n	61f2 <__aeabi_idiv+0x1c2>
    6136:	0fca      	lsrs	r2, r1, #31
    6138:	d000      	beq.n	613c <__aeabi_idiv+0x10c>
    613a:	4249      	negs	r1, r1
    613c:	1003      	asrs	r3, r0, #32
    613e:	d300      	bcc.n	6142 <__aeabi_idiv+0x112>
    6140:	4240      	negs	r0, r0
    6142:	4053      	eors	r3, r2
    6144:	2200      	movs	r2, #0
    6146:	469c      	mov	ip, r3
    6148:	0903      	lsrs	r3, r0, #4
    614a:	428b      	cmp	r3, r1
    614c:	d32d      	bcc.n	61aa <__aeabi_idiv+0x17a>
    614e:	0a03      	lsrs	r3, r0, #8
    6150:	428b      	cmp	r3, r1
    6152:	d312      	bcc.n	617a <__aeabi_idiv+0x14a>
    6154:	22fc      	movs	r2, #252	; 0xfc
    6156:	0189      	lsls	r1, r1, #6
    6158:	ba12      	rev	r2, r2
    615a:	0a03      	lsrs	r3, r0, #8
    615c:	428b      	cmp	r3, r1
    615e:	d30c      	bcc.n	617a <__aeabi_idiv+0x14a>
    6160:	0189      	lsls	r1, r1, #6
    6162:	1192      	asrs	r2, r2, #6
    6164:	428b      	cmp	r3, r1
    6166:	d308      	bcc.n	617a <__aeabi_idiv+0x14a>
    6168:	0189      	lsls	r1, r1, #6
    616a:	1192      	asrs	r2, r2, #6
    616c:	428b      	cmp	r3, r1
    616e:	d304      	bcc.n	617a <__aeabi_idiv+0x14a>
    6170:	0189      	lsls	r1, r1, #6
    6172:	d03a      	beq.n	61ea <__aeabi_idiv+0x1ba>
    6174:	1192      	asrs	r2, r2, #6
    6176:	e000      	b.n	617a <__aeabi_idiv+0x14a>
    6178:	0989      	lsrs	r1, r1, #6
    617a:	09c3      	lsrs	r3, r0, #7
    617c:	428b      	cmp	r3, r1
    617e:	d301      	bcc.n	6184 <__aeabi_idiv+0x154>
    6180:	01cb      	lsls	r3, r1, #7
    6182:	1ac0      	subs	r0, r0, r3
    6184:	4152      	adcs	r2, r2
    6186:	0983      	lsrs	r3, r0, #6
    6188:	428b      	cmp	r3, r1
    618a:	d301      	bcc.n	6190 <__aeabi_idiv+0x160>
    618c:	018b      	lsls	r3, r1, #6
    618e:	1ac0      	subs	r0, r0, r3
    6190:	4152      	adcs	r2, r2
    6192:	0943      	lsrs	r3, r0, #5
    6194:	428b      	cmp	r3, r1
    6196:	d301      	bcc.n	619c <__aeabi_idiv+0x16c>
    6198:	014b      	lsls	r3, r1, #5
    619a:	1ac0      	subs	r0, r0, r3
    619c:	4152      	adcs	r2, r2
    619e:	0903      	lsrs	r3, r0, #4
    61a0:	428b      	cmp	r3, r1
    61a2:	d301      	bcc.n	61a8 <__aeabi_idiv+0x178>
    61a4:	010b      	lsls	r3, r1, #4
    61a6:	1ac0      	subs	r0, r0, r3
    61a8:	4152      	adcs	r2, r2
    61aa:	08c3      	lsrs	r3, r0, #3
    61ac:	428b      	cmp	r3, r1
    61ae:	d301      	bcc.n	61b4 <__aeabi_idiv+0x184>
    61b0:	00cb      	lsls	r3, r1, #3
    61b2:	1ac0      	subs	r0, r0, r3
    61b4:	4152      	adcs	r2, r2
    61b6:	0883      	lsrs	r3, r0, #2
    61b8:	428b      	cmp	r3, r1
    61ba:	d301      	bcc.n	61c0 <__aeabi_idiv+0x190>
    61bc:	008b      	lsls	r3, r1, #2
    61be:	1ac0      	subs	r0, r0, r3
    61c0:	4152      	adcs	r2, r2
    61c2:	d2d9      	bcs.n	6178 <__aeabi_idiv+0x148>
    61c4:	0843      	lsrs	r3, r0, #1
    61c6:	428b      	cmp	r3, r1
    61c8:	d301      	bcc.n	61ce <__aeabi_idiv+0x19e>
    61ca:	004b      	lsls	r3, r1, #1
    61cc:	1ac0      	subs	r0, r0, r3
    61ce:	4152      	adcs	r2, r2
    61d0:	1a41      	subs	r1, r0, r1
    61d2:	d200      	bcs.n	61d6 <__aeabi_idiv+0x1a6>
    61d4:	4601      	mov	r1, r0
    61d6:	4663      	mov	r3, ip
    61d8:	4152      	adcs	r2, r2
    61da:	105b      	asrs	r3, r3, #1
    61dc:	4610      	mov	r0, r2
    61de:	d301      	bcc.n	61e4 <__aeabi_idiv+0x1b4>
    61e0:	4240      	negs	r0, r0
    61e2:	2b00      	cmp	r3, #0
    61e4:	d500      	bpl.n	61e8 <__aeabi_idiv+0x1b8>
    61e6:	4249      	negs	r1, r1
    61e8:	4770      	bx	lr
    61ea:	4663      	mov	r3, ip
    61ec:	105b      	asrs	r3, r3, #1
    61ee:	d300      	bcc.n	61f2 <__aeabi_idiv+0x1c2>
    61f0:	4240      	negs	r0, r0
    61f2:	b501      	push	{r0, lr}
    61f4:	2000      	movs	r0, #0
    61f6:	f000 f805 	bl	6204 <__aeabi_idiv0>
    61fa:	bd02      	pop	{r1, pc}

000061fc <__aeabi_idivmod>:
    61fc:	2900      	cmp	r1, #0
    61fe:	d0f8      	beq.n	61f2 <__aeabi_idiv+0x1c2>
    6200:	e716      	b.n	6030 <__aeabi_idiv>
    6202:	4770      	bx	lr

00006204 <__aeabi_idiv0>:
    6204:	4770      	bx	lr
    6206:	46c0      	nop			; (mov r8, r8)

00006208 <__aeabi_cdrcmple>:
    6208:	4684      	mov	ip, r0
    620a:	1c10      	adds	r0, r2, #0
    620c:	4662      	mov	r2, ip
    620e:	468c      	mov	ip, r1
    6210:	1c19      	adds	r1, r3, #0
    6212:	4663      	mov	r3, ip
    6214:	e000      	b.n	6218 <__aeabi_cdcmpeq>
    6216:	46c0      	nop			; (mov r8, r8)

00006218 <__aeabi_cdcmpeq>:
    6218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    621a:	f001 fc1b 	bl	7a54 <__ledf2>
    621e:	2800      	cmp	r0, #0
    6220:	d401      	bmi.n	6226 <__aeabi_cdcmpeq+0xe>
    6222:	2100      	movs	r1, #0
    6224:	42c8      	cmn	r0, r1
    6226:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006228 <__aeabi_dcmpeq>:
    6228:	b510      	push	{r4, lr}
    622a:	f001 fb6f 	bl	790c <__eqdf2>
    622e:	4240      	negs	r0, r0
    6230:	3001      	adds	r0, #1
    6232:	bd10      	pop	{r4, pc}

00006234 <__aeabi_dcmplt>:
    6234:	b510      	push	{r4, lr}
    6236:	f001 fc0d 	bl	7a54 <__ledf2>
    623a:	2800      	cmp	r0, #0
    623c:	db01      	blt.n	6242 <__aeabi_dcmplt+0xe>
    623e:	2000      	movs	r0, #0
    6240:	bd10      	pop	{r4, pc}
    6242:	2001      	movs	r0, #1
    6244:	bd10      	pop	{r4, pc}
    6246:	46c0      	nop			; (mov r8, r8)

00006248 <__aeabi_dcmple>:
    6248:	b510      	push	{r4, lr}
    624a:	f001 fc03 	bl	7a54 <__ledf2>
    624e:	2800      	cmp	r0, #0
    6250:	dd01      	ble.n	6256 <__aeabi_dcmple+0xe>
    6252:	2000      	movs	r0, #0
    6254:	bd10      	pop	{r4, pc}
    6256:	2001      	movs	r0, #1
    6258:	bd10      	pop	{r4, pc}
    625a:	46c0      	nop			; (mov r8, r8)

0000625c <__aeabi_dcmpgt>:
    625c:	b510      	push	{r4, lr}
    625e:	f001 fb95 	bl	798c <__gedf2>
    6262:	2800      	cmp	r0, #0
    6264:	dc01      	bgt.n	626a <__aeabi_dcmpgt+0xe>
    6266:	2000      	movs	r0, #0
    6268:	bd10      	pop	{r4, pc}
    626a:	2001      	movs	r0, #1
    626c:	bd10      	pop	{r4, pc}
    626e:	46c0      	nop			; (mov r8, r8)

00006270 <__aeabi_dcmpge>:
    6270:	b510      	push	{r4, lr}
    6272:	f001 fb8b 	bl	798c <__gedf2>
    6276:	2800      	cmp	r0, #0
    6278:	da01      	bge.n	627e <__aeabi_dcmpge+0xe>
    627a:	2000      	movs	r0, #0
    627c:	bd10      	pop	{r4, pc}
    627e:	2001      	movs	r0, #1
    6280:	bd10      	pop	{r4, pc}
    6282:	46c0      	nop			; (mov r8, r8)

00006284 <__aeabi_cfrcmple>:
    6284:	4684      	mov	ip, r0
    6286:	1c08      	adds	r0, r1, #0
    6288:	4661      	mov	r1, ip
    628a:	e7ff      	b.n	628c <__aeabi_cfcmpeq>

0000628c <__aeabi_cfcmpeq>:
    628c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    628e:	f000 fb5b 	bl	6948 <__lesf2>
    6292:	2800      	cmp	r0, #0
    6294:	d401      	bmi.n	629a <__aeabi_cfcmpeq+0xe>
    6296:	2100      	movs	r1, #0
    6298:	42c8      	cmn	r0, r1
    629a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000629c <__aeabi_fcmpeq>:
    629c:	b510      	push	{r4, lr}
    629e:	f000 fae7 	bl	6870 <__eqsf2>
    62a2:	4240      	negs	r0, r0
    62a4:	3001      	adds	r0, #1
    62a6:	bd10      	pop	{r4, pc}

000062a8 <__aeabi_fcmplt>:
    62a8:	b510      	push	{r4, lr}
    62aa:	f000 fb4d 	bl	6948 <__lesf2>
    62ae:	2800      	cmp	r0, #0
    62b0:	db01      	blt.n	62b6 <__aeabi_fcmplt+0xe>
    62b2:	2000      	movs	r0, #0
    62b4:	bd10      	pop	{r4, pc}
    62b6:	2001      	movs	r0, #1
    62b8:	bd10      	pop	{r4, pc}
    62ba:	46c0      	nop			; (mov r8, r8)

000062bc <__aeabi_fcmple>:
    62bc:	b510      	push	{r4, lr}
    62be:	f000 fb43 	bl	6948 <__lesf2>
    62c2:	2800      	cmp	r0, #0
    62c4:	dd01      	ble.n	62ca <__aeabi_fcmple+0xe>
    62c6:	2000      	movs	r0, #0
    62c8:	bd10      	pop	{r4, pc}
    62ca:	2001      	movs	r0, #1
    62cc:	bd10      	pop	{r4, pc}
    62ce:	46c0      	nop			; (mov r8, r8)

000062d0 <__aeabi_fcmpgt>:
    62d0:	b510      	push	{r4, lr}
    62d2:	f000 faf5 	bl	68c0 <__gesf2>
    62d6:	2800      	cmp	r0, #0
    62d8:	dc01      	bgt.n	62de <__aeabi_fcmpgt+0xe>
    62da:	2000      	movs	r0, #0
    62dc:	bd10      	pop	{r4, pc}
    62de:	2001      	movs	r0, #1
    62e0:	bd10      	pop	{r4, pc}
    62e2:	46c0      	nop			; (mov r8, r8)

000062e4 <__aeabi_fcmpge>:
    62e4:	b510      	push	{r4, lr}
    62e6:	f000 faeb 	bl	68c0 <__gesf2>
    62ea:	2800      	cmp	r0, #0
    62ec:	da01      	bge.n	62f2 <__aeabi_fcmpge+0xe>
    62ee:	2000      	movs	r0, #0
    62f0:	bd10      	pop	{r4, pc}
    62f2:	2001      	movs	r0, #1
    62f4:	bd10      	pop	{r4, pc}
    62f6:	46c0      	nop			; (mov r8, r8)

000062f8 <__aeabi_lmul>:
    62f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    62fa:	464f      	mov	r7, r9
    62fc:	4646      	mov	r6, r8
    62fe:	b4c0      	push	{r6, r7}
    6300:	0416      	lsls	r6, r2, #16
    6302:	0c36      	lsrs	r6, r6, #16
    6304:	4699      	mov	r9, r3
    6306:	0033      	movs	r3, r6
    6308:	0405      	lsls	r5, r0, #16
    630a:	0c2c      	lsrs	r4, r5, #16
    630c:	0c07      	lsrs	r7, r0, #16
    630e:	0c15      	lsrs	r5, r2, #16
    6310:	4363      	muls	r3, r4
    6312:	437e      	muls	r6, r7
    6314:	436f      	muls	r7, r5
    6316:	4365      	muls	r5, r4
    6318:	0c1c      	lsrs	r4, r3, #16
    631a:	19ad      	adds	r5, r5, r6
    631c:	1964      	adds	r4, r4, r5
    631e:	469c      	mov	ip, r3
    6320:	42a6      	cmp	r6, r4
    6322:	d903      	bls.n	632c <__aeabi_lmul+0x34>
    6324:	2380      	movs	r3, #128	; 0x80
    6326:	025b      	lsls	r3, r3, #9
    6328:	4698      	mov	r8, r3
    632a:	4447      	add	r7, r8
    632c:	4663      	mov	r3, ip
    632e:	0c25      	lsrs	r5, r4, #16
    6330:	19ef      	adds	r7, r5, r7
    6332:	041d      	lsls	r5, r3, #16
    6334:	464b      	mov	r3, r9
    6336:	434a      	muls	r2, r1
    6338:	4343      	muls	r3, r0
    633a:	0c2d      	lsrs	r5, r5, #16
    633c:	0424      	lsls	r4, r4, #16
    633e:	1964      	adds	r4, r4, r5
    6340:	1899      	adds	r1, r3, r2
    6342:	19c9      	adds	r1, r1, r7
    6344:	0020      	movs	r0, r4
    6346:	bc0c      	pop	{r2, r3}
    6348:	4690      	mov	r8, r2
    634a:	4699      	mov	r9, r3
    634c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    634e:	46c0      	nop			; (mov r8, r8)

00006350 <__aeabi_fadd>:
    6350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6352:	024a      	lsls	r2, r1, #9
    6354:	0243      	lsls	r3, r0, #9
    6356:	0044      	lsls	r4, r0, #1
    6358:	004e      	lsls	r6, r1, #1
    635a:	0fc5      	lsrs	r5, r0, #31
    635c:	0e24      	lsrs	r4, r4, #24
    635e:	0028      	movs	r0, r5
    6360:	099b      	lsrs	r3, r3, #6
    6362:	0e36      	lsrs	r6, r6, #24
    6364:	0fc9      	lsrs	r1, r1, #31
    6366:	0992      	lsrs	r2, r2, #6
    6368:	428d      	cmp	r5, r1
    636a:	d059      	beq.n	6420 <__aeabi_fadd+0xd0>
    636c:	1ba0      	subs	r0, r4, r6
    636e:	2800      	cmp	r0, #0
    6370:	dc00      	bgt.n	6374 <__aeabi_fadd+0x24>
    6372:	e08d      	b.n	6490 <__aeabi_fadd+0x140>
    6374:	2e00      	cmp	r6, #0
    6376:	d11a      	bne.n	63ae <__aeabi_fadd+0x5e>
    6378:	2a00      	cmp	r2, #0
    637a:	d000      	beq.n	637e <__aeabi_fadd+0x2e>
    637c:	e079      	b.n	6472 <__aeabi_fadd+0x122>
    637e:	075a      	lsls	r2, r3, #29
    6380:	d004      	beq.n	638c <__aeabi_fadd+0x3c>
    6382:	220f      	movs	r2, #15
    6384:	401a      	ands	r2, r3
    6386:	2a04      	cmp	r2, #4
    6388:	d000      	beq.n	638c <__aeabi_fadd+0x3c>
    638a:	3304      	adds	r3, #4
    638c:	015a      	lsls	r2, r3, #5
    638e:	d538      	bpl.n	6402 <__aeabi_fadd+0xb2>
    6390:	3401      	adds	r4, #1
    6392:	2cff      	cmp	r4, #255	; 0xff
    6394:	d100      	bne.n	6398 <__aeabi_fadd+0x48>
    6396:	e089      	b.n	64ac <__aeabi_fadd+0x15c>
    6398:	0028      	movs	r0, r5
    639a:	019b      	lsls	r3, r3, #6
    639c:	0a5b      	lsrs	r3, r3, #9
    639e:	b2e4      	uxtb	r4, r4
    63a0:	025b      	lsls	r3, r3, #9
    63a2:	05e4      	lsls	r4, r4, #23
    63a4:	0a5b      	lsrs	r3, r3, #9
    63a6:	4323      	orrs	r3, r4
    63a8:	07c0      	lsls	r0, r0, #31
    63aa:	4318      	orrs	r0, r3
    63ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    63ae:	2cff      	cmp	r4, #255	; 0xff
    63b0:	d0e5      	beq.n	637e <__aeabi_fadd+0x2e>
    63b2:	2180      	movs	r1, #128	; 0x80
    63b4:	04c9      	lsls	r1, r1, #19
    63b6:	430a      	orrs	r2, r1
    63b8:	281b      	cmp	r0, #27
    63ba:	dd00      	ble.n	63be <__aeabi_fadd+0x6e>
    63bc:	e089      	b.n	64d2 <__aeabi_fadd+0x182>
    63be:	0016      	movs	r6, r2
    63c0:	2120      	movs	r1, #32
    63c2:	40c6      	lsrs	r6, r0
    63c4:	1a08      	subs	r0, r1, r0
    63c6:	4082      	lsls	r2, r0
    63c8:	1e51      	subs	r1, r2, #1
    63ca:	418a      	sbcs	r2, r1
    63cc:	4332      	orrs	r2, r6
    63ce:	1a9b      	subs	r3, r3, r2
    63d0:	015a      	lsls	r2, r3, #5
    63d2:	d514      	bpl.n	63fe <__aeabi_fadd+0xae>
    63d4:	019b      	lsls	r3, r3, #6
    63d6:	099e      	lsrs	r6, r3, #6
    63d8:	0030      	movs	r0, r6
    63da:	f002 fb23 	bl	8a24 <__clzsi2>
    63de:	3805      	subs	r0, #5
    63e0:	4086      	lsls	r6, r0
    63e2:	4284      	cmp	r4, r0
    63e4:	dc65      	bgt.n	64b2 <__aeabi_fadd+0x162>
    63e6:	1b04      	subs	r4, r0, r4
    63e8:	0033      	movs	r3, r6
    63ea:	2020      	movs	r0, #32
    63ec:	3401      	adds	r4, #1
    63ee:	40e3      	lsrs	r3, r4
    63f0:	1b04      	subs	r4, r0, r4
    63f2:	40a6      	lsls	r6, r4
    63f4:	1e72      	subs	r2, r6, #1
    63f6:	4196      	sbcs	r6, r2
    63f8:	2400      	movs	r4, #0
    63fa:	4333      	orrs	r3, r6
    63fc:	e7bf      	b.n	637e <__aeabi_fadd+0x2e>
    63fe:	075a      	lsls	r2, r3, #29
    6400:	d1bf      	bne.n	6382 <__aeabi_fadd+0x32>
    6402:	08df      	lsrs	r7, r3, #3
    6404:	0028      	movs	r0, r5
    6406:	2cff      	cmp	r4, #255	; 0xff
    6408:	d12f      	bne.n	646a <__aeabi_fadd+0x11a>
    640a:	2f00      	cmp	r7, #0
    640c:	d100      	bne.n	6410 <__aeabi_fadd+0xc0>
    640e:	e087      	b.n	6520 <__aeabi_fadd+0x1d0>
    6410:	2280      	movs	r2, #128	; 0x80
    6412:	03d2      	lsls	r2, r2, #15
    6414:	0013      	movs	r3, r2
    6416:	433b      	orrs	r3, r7
    6418:	025b      	lsls	r3, r3, #9
    641a:	0a5b      	lsrs	r3, r3, #9
    641c:	24ff      	movs	r4, #255	; 0xff
    641e:	e7bf      	b.n	63a0 <__aeabi_fadd+0x50>
    6420:	1ba1      	subs	r1, r4, r6
    6422:	2900      	cmp	r1, #0
    6424:	dd49      	ble.n	64ba <__aeabi_fadd+0x16a>
    6426:	2e00      	cmp	r6, #0
    6428:	d029      	beq.n	647e <__aeabi_fadd+0x12e>
    642a:	2cff      	cmp	r4, #255	; 0xff
    642c:	d0a7      	beq.n	637e <__aeabi_fadd+0x2e>
    642e:	2680      	movs	r6, #128	; 0x80
    6430:	04f6      	lsls	r6, r6, #19
    6432:	4332      	orrs	r2, r6
    6434:	291b      	cmp	r1, #27
    6436:	dd00      	ble.n	643a <__aeabi_fadd+0xea>
    6438:	e08d      	b.n	6556 <__aeabi_fadd+0x206>
    643a:	0017      	movs	r7, r2
    643c:	2620      	movs	r6, #32
    643e:	40cf      	lsrs	r7, r1
    6440:	1a71      	subs	r1, r6, r1
    6442:	408a      	lsls	r2, r1
    6444:	1e51      	subs	r1, r2, #1
    6446:	418a      	sbcs	r2, r1
    6448:	433a      	orrs	r2, r7
    644a:	189b      	adds	r3, r3, r2
    644c:	015a      	lsls	r2, r3, #5
    644e:	d5d6      	bpl.n	63fe <__aeabi_fadd+0xae>
    6450:	3401      	adds	r4, #1
    6452:	2cff      	cmp	r4, #255	; 0xff
    6454:	d064      	beq.n	6520 <__aeabi_fadd+0x1d0>
    6456:	2201      	movs	r2, #1
    6458:	4976      	ldr	r1, [pc, #472]	; (6634 <__aeabi_fadd+0x2e4>)
    645a:	401a      	ands	r2, r3
    645c:	085b      	lsrs	r3, r3, #1
    645e:	400b      	ands	r3, r1
    6460:	4313      	orrs	r3, r2
    6462:	e78c      	b.n	637e <__aeabi_fadd+0x2e>
    6464:	1e03      	subs	r3, r0, #0
    6466:	d1ca      	bne.n	63fe <__aeabi_fadd+0xae>
    6468:	2000      	movs	r0, #0
    646a:	027b      	lsls	r3, r7, #9
    646c:	0a5b      	lsrs	r3, r3, #9
    646e:	b2e4      	uxtb	r4, r4
    6470:	e796      	b.n	63a0 <__aeabi_fadd+0x50>
    6472:	3801      	subs	r0, #1
    6474:	2800      	cmp	r0, #0
    6476:	d0aa      	beq.n	63ce <__aeabi_fadd+0x7e>
    6478:	2cff      	cmp	r4, #255	; 0xff
    647a:	d19d      	bne.n	63b8 <__aeabi_fadd+0x68>
    647c:	e77f      	b.n	637e <__aeabi_fadd+0x2e>
    647e:	2a00      	cmp	r2, #0
    6480:	d100      	bne.n	6484 <__aeabi_fadd+0x134>
    6482:	e77c      	b.n	637e <__aeabi_fadd+0x2e>
    6484:	3901      	subs	r1, #1
    6486:	2900      	cmp	r1, #0
    6488:	d0df      	beq.n	644a <__aeabi_fadd+0xfa>
    648a:	2cff      	cmp	r4, #255	; 0xff
    648c:	d1d2      	bne.n	6434 <__aeabi_fadd+0xe4>
    648e:	e776      	b.n	637e <__aeabi_fadd+0x2e>
    6490:	2800      	cmp	r0, #0
    6492:	d120      	bne.n	64d6 <__aeabi_fadd+0x186>
    6494:	1c60      	adds	r0, r4, #1
    6496:	b2c0      	uxtb	r0, r0
    6498:	2801      	cmp	r0, #1
    649a:	dd53      	ble.n	6544 <__aeabi_fadd+0x1f4>
    649c:	2780      	movs	r7, #128	; 0x80
    649e:	1a9e      	subs	r6, r3, r2
    64a0:	04ff      	lsls	r7, r7, #19
    64a2:	4037      	ands	r7, r6
    64a4:	d02f      	beq.n	6506 <__aeabi_fadd+0x1b6>
    64a6:	1ad6      	subs	r6, r2, r3
    64a8:	000d      	movs	r5, r1
    64aa:	e795      	b.n	63d8 <__aeabi_fadd+0x88>
    64ac:	0028      	movs	r0, r5
    64ae:	2300      	movs	r3, #0
    64b0:	e776      	b.n	63a0 <__aeabi_fadd+0x50>
    64b2:	4b61      	ldr	r3, [pc, #388]	; (6638 <__aeabi_fadd+0x2e8>)
    64b4:	1a24      	subs	r4, r4, r0
    64b6:	4033      	ands	r3, r6
    64b8:	e761      	b.n	637e <__aeabi_fadd+0x2e>
    64ba:	2900      	cmp	r1, #0
    64bc:	d14d      	bne.n	655a <__aeabi_fadd+0x20a>
    64be:	1c61      	adds	r1, r4, #1
    64c0:	b2ce      	uxtb	r6, r1
    64c2:	2e01      	cmp	r6, #1
    64c4:	dd2f      	ble.n	6526 <__aeabi_fadd+0x1d6>
    64c6:	29ff      	cmp	r1, #255	; 0xff
    64c8:	d02a      	beq.n	6520 <__aeabi_fadd+0x1d0>
    64ca:	189b      	adds	r3, r3, r2
    64cc:	085b      	lsrs	r3, r3, #1
    64ce:	000c      	movs	r4, r1
    64d0:	e755      	b.n	637e <__aeabi_fadd+0x2e>
    64d2:	2201      	movs	r2, #1
    64d4:	e77b      	b.n	63ce <__aeabi_fadd+0x7e>
    64d6:	2c00      	cmp	r4, #0
    64d8:	d11b      	bne.n	6512 <__aeabi_fadd+0x1c2>
    64da:	2b00      	cmp	r3, #0
    64dc:	d05b      	beq.n	6596 <__aeabi_fadd+0x246>
    64de:	43c0      	mvns	r0, r0
    64e0:	2800      	cmp	r0, #0
    64e2:	d00c      	beq.n	64fe <__aeabi_fadd+0x1ae>
    64e4:	2eff      	cmp	r6, #255	; 0xff
    64e6:	d07e      	beq.n	65e6 <__aeabi_fadd+0x296>
    64e8:	281b      	cmp	r0, #27
    64ea:	dd00      	ble.n	64ee <__aeabi_fadd+0x19e>
    64ec:	e092      	b.n	6614 <__aeabi_fadd+0x2c4>
    64ee:	001d      	movs	r5, r3
    64f0:	2420      	movs	r4, #32
    64f2:	40c5      	lsrs	r5, r0
    64f4:	1a20      	subs	r0, r4, r0
    64f6:	4083      	lsls	r3, r0
    64f8:	1e58      	subs	r0, r3, #1
    64fa:	4183      	sbcs	r3, r0
    64fc:	432b      	orrs	r3, r5
    64fe:	1ad3      	subs	r3, r2, r3
    6500:	0034      	movs	r4, r6
    6502:	000d      	movs	r5, r1
    6504:	e764      	b.n	63d0 <__aeabi_fadd+0x80>
    6506:	2e00      	cmp	r6, #0
    6508:	d000      	beq.n	650c <__aeabi_fadd+0x1bc>
    650a:	e765      	b.n	63d8 <__aeabi_fadd+0x88>
    650c:	2000      	movs	r0, #0
    650e:	2400      	movs	r4, #0
    6510:	e7ab      	b.n	646a <__aeabi_fadd+0x11a>
    6512:	2eff      	cmp	r6, #255	; 0xff
    6514:	d067      	beq.n	65e6 <__aeabi_fadd+0x296>
    6516:	2480      	movs	r4, #128	; 0x80
    6518:	04e4      	lsls	r4, r4, #19
    651a:	4240      	negs	r0, r0
    651c:	4323      	orrs	r3, r4
    651e:	e7e3      	b.n	64e8 <__aeabi_fadd+0x198>
    6520:	24ff      	movs	r4, #255	; 0xff
    6522:	2300      	movs	r3, #0
    6524:	e73c      	b.n	63a0 <__aeabi_fadd+0x50>
    6526:	2c00      	cmp	r4, #0
    6528:	d161      	bne.n	65ee <__aeabi_fadd+0x29e>
    652a:	2b00      	cmp	r3, #0
    652c:	d07e      	beq.n	662c <__aeabi_fadd+0x2dc>
    652e:	2a00      	cmp	r2, #0
    6530:	d100      	bne.n	6534 <__aeabi_fadd+0x1e4>
    6532:	e724      	b.n	637e <__aeabi_fadd+0x2e>
    6534:	189b      	adds	r3, r3, r2
    6536:	015a      	lsls	r2, r3, #5
    6538:	d400      	bmi.n	653c <__aeabi_fadd+0x1ec>
    653a:	e760      	b.n	63fe <__aeabi_fadd+0xae>
    653c:	4a3e      	ldr	r2, [pc, #248]	; (6638 <__aeabi_fadd+0x2e8>)
    653e:	000c      	movs	r4, r1
    6540:	4013      	ands	r3, r2
    6542:	e71c      	b.n	637e <__aeabi_fadd+0x2e>
    6544:	2c00      	cmp	r4, #0
    6546:	d11e      	bne.n	6586 <__aeabi_fadd+0x236>
    6548:	2b00      	cmp	r3, #0
    654a:	d12f      	bne.n	65ac <__aeabi_fadd+0x25c>
    654c:	2a00      	cmp	r2, #0
    654e:	d066      	beq.n	661e <__aeabi_fadd+0x2ce>
    6550:	0013      	movs	r3, r2
    6552:	000d      	movs	r5, r1
    6554:	e713      	b.n	637e <__aeabi_fadd+0x2e>
    6556:	2201      	movs	r2, #1
    6558:	e777      	b.n	644a <__aeabi_fadd+0xfa>
    655a:	2c00      	cmp	r4, #0
    655c:	d11f      	bne.n	659e <__aeabi_fadd+0x24e>
    655e:	2b00      	cmp	r3, #0
    6560:	d05a      	beq.n	6618 <__aeabi_fadd+0x2c8>
    6562:	43c9      	mvns	r1, r1
    6564:	2900      	cmp	r1, #0
    6566:	d00b      	beq.n	6580 <__aeabi_fadd+0x230>
    6568:	2eff      	cmp	r6, #255	; 0xff
    656a:	d050      	beq.n	660e <__aeabi_fadd+0x2be>
    656c:	291b      	cmp	r1, #27
    656e:	dc5f      	bgt.n	6630 <__aeabi_fadd+0x2e0>
    6570:	001f      	movs	r7, r3
    6572:	2420      	movs	r4, #32
    6574:	40cf      	lsrs	r7, r1
    6576:	1a61      	subs	r1, r4, r1
    6578:	408b      	lsls	r3, r1
    657a:	1e59      	subs	r1, r3, #1
    657c:	418b      	sbcs	r3, r1
    657e:	433b      	orrs	r3, r7
    6580:	189b      	adds	r3, r3, r2
    6582:	0034      	movs	r4, r6
    6584:	e762      	b.n	644c <__aeabi_fadd+0xfc>
    6586:	2b00      	cmp	r3, #0
    6588:	d11c      	bne.n	65c4 <__aeabi_fadd+0x274>
    658a:	2a00      	cmp	r2, #0
    658c:	d04a      	beq.n	6624 <__aeabi_fadd+0x2d4>
    658e:	0013      	movs	r3, r2
    6590:	000d      	movs	r5, r1
    6592:	24ff      	movs	r4, #255	; 0xff
    6594:	e6f3      	b.n	637e <__aeabi_fadd+0x2e>
    6596:	0013      	movs	r3, r2
    6598:	0034      	movs	r4, r6
    659a:	000d      	movs	r5, r1
    659c:	e6ef      	b.n	637e <__aeabi_fadd+0x2e>
    659e:	2eff      	cmp	r6, #255	; 0xff
    65a0:	d035      	beq.n	660e <__aeabi_fadd+0x2be>
    65a2:	2480      	movs	r4, #128	; 0x80
    65a4:	04e4      	lsls	r4, r4, #19
    65a6:	4249      	negs	r1, r1
    65a8:	4323      	orrs	r3, r4
    65aa:	e7df      	b.n	656c <__aeabi_fadd+0x21c>
    65ac:	2a00      	cmp	r2, #0
    65ae:	d100      	bne.n	65b2 <__aeabi_fadd+0x262>
    65b0:	e6e5      	b.n	637e <__aeabi_fadd+0x2e>
    65b2:	2780      	movs	r7, #128	; 0x80
    65b4:	1a98      	subs	r0, r3, r2
    65b6:	04ff      	lsls	r7, r7, #19
    65b8:	4007      	ands	r7, r0
    65ba:	d100      	bne.n	65be <__aeabi_fadd+0x26e>
    65bc:	e752      	b.n	6464 <__aeabi_fadd+0x114>
    65be:	1ad3      	subs	r3, r2, r3
    65c0:	000d      	movs	r5, r1
    65c2:	e6dc      	b.n	637e <__aeabi_fadd+0x2e>
    65c4:	24ff      	movs	r4, #255	; 0xff
    65c6:	2a00      	cmp	r2, #0
    65c8:	d100      	bne.n	65cc <__aeabi_fadd+0x27c>
    65ca:	e6d8      	b.n	637e <__aeabi_fadd+0x2e>
    65cc:	2080      	movs	r0, #128	; 0x80
    65ce:	08db      	lsrs	r3, r3, #3
    65d0:	03c0      	lsls	r0, r0, #15
    65d2:	4203      	tst	r3, r0
    65d4:	d004      	beq.n	65e0 <__aeabi_fadd+0x290>
    65d6:	08d2      	lsrs	r2, r2, #3
    65d8:	4202      	tst	r2, r0
    65da:	d101      	bne.n	65e0 <__aeabi_fadd+0x290>
    65dc:	0013      	movs	r3, r2
    65de:	000d      	movs	r5, r1
    65e0:	00db      	lsls	r3, r3, #3
    65e2:	24ff      	movs	r4, #255	; 0xff
    65e4:	e6cb      	b.n	637e <__aeabi_fadd+0x2e>
    65e6:	0013      	movs	r3, r2
    65e8:	24ff      	movs	r4, #255	; 0xff
    65ea:	000d      	movs	r5, r1
    65ec:	e6c7      	b.n	637e <__aeabi_fadd+0x2e>
    65ee:	2b00      	cmp	r3, #0
    65f0:	d00d      	beq.n	660e <__aeabi_fadd+0x2be>
    65f2:	24ff      	movs	r4, #255	; 0xff
    65f4:	2a00      	cmp	r2, #0
    65f6:	d100      	bne.n	65fa <__aeabi_fadd+0x2aa>
    65f8:	e6c1      	b.n	637e <__aeabi_fadd+0x2e>
    65fa:	2180      	movs	r1, #128	; 0x80
    65fc:	08db      	lsrs	r3, r3, #3
    65fe:	03c9      	lsls	r1, r1, #15
    6600:	420b      	tst	r3, r1
    6602:	d0ed      	beq.n	65e0 <__aeabi_fadd+0x290>
    6604:	08d2      	lsrs	r2, r2, #3
    6606:	420a      	tst	r2, r1
    6608:	d1ea      	bne.n	65e0 <__aeabi_fadd+0x290>
    660a:	0013      	movs	r3, r2
    660c:	e7e8      	b.n	65e0 <__aeabi_fadd+0x290>
    660e:	0013      	movs	r3, r2
    6610:	24ff      	movs	r4, #255	; 0xff
    6612:	e6b4      	b.n	637e <__aeabi_fadd+0x2e>
    6614:	2301      	movs	r3, #1
    6616:	e772      	b.n	64fe <__aeabi_fadd+0x1ae>
    6618:	0013      	movs	r3, r2
    661a:	0034      	movs	r4, r6
    661c:	e6af      	b.n	637e <__aeabi_fadd+0x2e>
    661e:	2700      	movs	r7, #0
    6620:	2000      	movs	r0, #0
    6622:	e722      	b.n	646a <__aeabi_fadd+0x11a>
    6624:	2780      	movs	r7, #128	; 0x80
    6626:	2000      	movs	r0, #0
    6628:	03ff      	lsls	r7, r7, #15
    662a:	e6f1      	b.n	6410 <__aeabi_fadd+0xc0>
    662c:	0013      	movs	r3, r2
    662e:	e6a6      	b.n	637e <__aeabi_fadd+0x2e>
    6630:	2301      	movs	r3, #1
    6632:	e7a5      	b.n	6580 <__aeabi_fadd+0x230>
    6634:	7dffffff 	.word	0x7dffffff
    6638:	fbffffff 	.word	0xfbffffff

0000663c <__aeabi_fdiv>:
    663c:	b5f0      	push	{r4, r5, r6, r7, lr}
    663e:	4656      	mov	r6, sl
    6640:	4644      	mov	r4, r8
    6642:	465f      	mov	r7, fp
    6644:	464d      	mov	r5, r9
    6646:	b4f0      	push	{r4, r5, r6, r7}
    6648:	0244      	lsls	r4, r0, #9
    664a:	0046      	lsls	r6, r0, #1
    664c:	0fc7      	lsrs	r7, r0, #31
    664e:	b083      	sub	sp, #12
    6650:	4688      	mov	r8, r1
    6652:	0a65      	lsrs	r5, r4, #9
    6654:	0e36      	lsrs	r6, r6, #24
    6656:	46ba      	mov	sl, r7
    6658:	d03d      	beq.n	66d6 <__aeabi_fdiv+0x9a>
    665a:	2eff      	cmp	r6, #255	; 0xff
    665c:	d022      	beq.n	66a4 <__aeabi_fdiv+0x68>
    665e:	2300      	movs	r3, #0
    6660:	00ec      	lsls	r4, r5, #3
    6662:	2580      	movs	r5, #128	; 0x80
    6664:	4699      	mov	r9, r3
    6666:	469b      	mov	fp, r3
    6668:	04ed      	lsls	r5, r5, #19
    666a:	4325      	orrs	r5, r4
    666c:	3e7f      	subs	r6, #127	; 0x7f
    666e:	4643      	mov	r3, r8
    6670:	025c      	lsls	r4, r3, #9
    6672:	0058      	lsls	r0, r3, #1
    6674:	0fdb      	lsrs	r3, r3, #31
    6676:	0a64      	lsrs	r4, r4, #9
    6678:	0e00      	lsrs	r0, r0, #24
    667a:	4698      	mov	r8, r3
    667c:	d036      	beq.n	66ec <__aeabi_fdiv+0xb0>
    667e:	28ff      	cmp	r0, #255	; 0xff
    6680:	d030      	beq.n	66e4 <__aeabi_fdiv+0xa8>
    6682:	2380      	movs	r3, #128	; 0x80
    6684:	2100      	movs	r1, #0
    6686:	00e4      	lsls	r4, r4, #3
    6688:	04db      	lsls	r3, r3, #19
    668a:	431c      	orrs	r4, r3
    668c:	387f      	subs	r0, #127	; 0x7f
    668e:	1a30      	subs	r0, r6, r0
    6690:	9001      	str	r0, [sp, #4]
    6692:	4648      	mov	r0, r9
    6694:	4642      	mov	r2, r8
    6696:	4308      	orrs	r0, r1
    6698:	4e72      	ldr	r6, [pc, #456]	; (6864 <__aeabi_fdiv+0x228>)
    669a:	0080      	lsls	r0, r0, #2
    669c:	5830      	ldr	r0, [r6, r0]
    669e:	407a      	eors	r2, r7
    66a0:	0013      	movs	r3, r2
    66a2:	4687      	mov	pc, r0
    66a4:	2d00      	cmp	r5, #0
    66a6:	d144      	bne.n	6732 <__aeabi_fdiv+0xf6>
    66a8:	2308      	movs	r3, #8
    66aa:	4699      	mov	r9, r3
    66ac:	3b06      	subs	r3, #6
    66ae:	469b      	mov	fp, r3
    66b0:	e7dd      	b.n	666e <__aeabi_fdiv+0x32>
    66b2:	2201      	movs	r2, #1
    66b4:	20ff      	movs	r0, #255	; 0xff
    66b6:	2400      	movs	r4, #0
    66b8:	401a      	ands	r2, r3
    66ba:	0264      	lsls	r4, r4, #9
    66bc:	05c3      	lsls	r3, r0, #23
    66be:	0a64      	lsrs	r4, r4, #9
    66c0:	07d2      	lsls	r2, r2, #31
    66c2:	431c      	orrs	r4, r3
    66c4:	4314      	orrs	r4, r2
    66c6:	0020      	movs	r0, r4
    66c8:	b003      	add	sp, #12
    66ca:	bc3c      	pop	{r2, r3, r4, r5}
    66cc:	4690      	mov	r8, r2
    66ce:	4699      	mov	r9, r3
    66d0:	46a2      	mov	sl, r4
    66d2:	46ab      	mov	fp, r5
    66d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    66d6:	2d00      	cmp	r5, #0
    66d8:	d120      	bne.n	671c <__aeabi_fdiv+0xe0>
    66da:	2304      	movs	r3, #4
    66dc:	4699      	mov	r9, r3
    66de:	3b03      	subs	r3, #3
    66e0:	469b      	mov	fp, r3
    66e2:	e7c4      	b.n	666e <__aeabi_fdiv+0x32>
    66e4:	2c00      	cmp	r4, #0
    66e6:	d117      	bne.n	6718 <__aeabi_fdiv+0xdc>
    66e8:	2102      	movs	r1, #2
    66ea:	e002      	b.n	66f2 <__aeabi_fdiv+0xb6>
    66ec:	2c00      	cmp	r4, #0
    66ee:	d10a      	bne.n	6706 <__aeabi_fdiv+0xca>
    66f0:	2101      	movs	r1, #1
    66f2:	1a32      	subs	r2, r6, r0
    66f4:	9201      	str	r2, [sp, #4]
    66f6:	464a      	mov	r2, r9
    66f8:	4643      	mov	r3, r8
    66fa:	430a      	orrs	r2, r1
    66fc:	485a      	ldr	r0, [pc, #360]	; (6868 <__aeabi_fdiv+0x22c>)
    66fe:	0092      	lsls	r2, r2, #2
    6700:	5882      	ldr	r2, [r0, r2]
    6702:	407b      	eors	r3, r7
    6704:	4697      	mov	pc, r2
    6706:	0020      	movs	r0, r4
    6708:	f002 f98c 	bl	8a24 <__clzsi2>
    670c:	1f43      	subs	r3, r0, #5
    670e:	3076      	adds	r0, #118	; 0x76
    6710:	409c      	lsls	r4, r3
    6712:	4240      	negs	r0, r0
    6714:	2100      	movs	r1, #0
    6716:	e7ba      	b.n	668e <__aeabi_fdiv+0x52>
    6718:	2103      	movs	r1, #3
    671a:	e7b8      	b.n	668e <__aeabi_fdiv+0x52>
    671c:	0028      	movs	r0, r5
    671e:	f002 f981 	bl	8a24 <__clzsi2>
    6722:	1f43      	subs	r3, r0, #5
    6724:	409d      	lsls	r5, r3
    6726:	2300      	movs	r3, #0
    6728:	3076      	adds	r0, #118	; 0x76
    672a:	4246      	negs	r6, r0
    672c:	4699      	mov	r9, r3
    672e:	469b      	mov	fp, r3
    6730:	e79d      	b.n	666e <__aeabi_fdiv+0x32>
    6732:	230c      	movs	r3, #12
    6734:	4699      	mov	r9, r3
    6736:	3b09      	subs	r3, #9
    6738:	469b      	mov	fp, r3
    673a:	e798      	b.n	666e <__aeabi_fdiv+0x32>
    673c:	2480      	movs	r4, #128	; 0x80
    673e:	2200      	movs	r2, #0
    6740:	03e4      	lsls	r4, r4, #15
    6742:	20ff      	movs	r0, #255	; 0xff
    6744:	e7b9      	b.n	66ba <__aeabi_fdiv+0x7e>
    6746:	2400      	movs	r4, #0
    6748:	46c2      	mov	sl, r8
    674a:	468b      	mov	fp, r1
    674c:	465a      	mov	r2, fp
    674e:	4653      	mov	r3, sl
    6750:	2a02      	cmp	r2, #2
    6752:	d0ae      	beq.n	66b2 <__aeabi_fdiv+0x76>
    6754:	2a03      	cmp	r2, #3
    6756:	d07d      	beq.n	6854 <__aeabi_fdiv+0x218>
    6758:	2a01      	cmp	r2, #1
    675a:	d131      	bne.n	67c0 <__aeabi_fdiv+0x184>
    675c:	2201      	movs	r2, #1
    675e:	2000      	movs	r0, #0
    6760:	401a      	ands	r2, r3
    6762:	2400      	movs	r4, #0
    6764:	e7a9      	b.n	66ba <__aeabi_fdiv+0x7e>
    6766:	2201      	movs	r2, #1
    6768:	1a10      	subs	r0, r2, r0
    676a:	281b      	cmp	r0, #27
    676c:	dd56      	ble.n	681c <__aeabi_fdiv+0x1e0>
    676e:	401a      	ands	r2, r3
    6770:	2000      	movs	r0, #0
    6772:	2400      	movs	r4, #0
    6774:	e7a1      	b.n	66ba <__aeabi_fdiv+0x7e>
    6776:	2380      	movs	r3, #128	; 0x80
    6778:	03db      	lsls	r3, r3, #15
    677a:	421d      	tst	r5, r3
    677c:	d14b      	bne.n	6816 <__aeabi_fdiv+0x1da>
    677e:	2380      	movs	r3, #128	; 0x80
    6780:	03db      	lsls	r3, r3, #15
    6782:	432b      	orrs	r3, r5
    6784:	025c      	lsls	r4, r3, #9
    6786:	0a64      	lsrs	r4, r4, #9
    6788:	003a      	movs	r2, r7
    678a:	20ff      	movs	r0, #255	; 0xff
    678c:	e795      	b.n	66ba <__aeabi_fdiv+0x7e>
    678e:	016d      	lsls	r5, r5, #5
    6790:	0160      	lsls	r0, r4, #5
    6792:	4285      	cmp	r5, r0
    6794:	d230      	bcs.n	67f8 <__aeabi_fdiv+0x1bc>
    6796:	9a01      	ldr	r2, [sp, #4]
    6798:	2400      	movs	r4, #0
    679a:	3a01      	subs	r2, #1
    679c:	9201      	str	r2, [sp, #4]
    679e:	221b      	movs	r2, #27
    67a0:	2701      	movs	r7, #1
    67a2:	0029      	movs	r1, r5
    67a4:	0064      	lsls	r4, r4, #1
    67a6:	006d      	lsls	r5, r5, #1
    67a8:	2900      	cmp	r1, #0
    67aa:	db01      	blt.n	67b0 <__aeabi_fdiv+0x174>
    67ac:	42a8      	cmp	r0, r5
    67ae:	d801      	bhi.n	67b4 <__aeabi_fdiv+0x178>
    67b0:	1a2d      	subs	r5, r5, r0
    67b2:	433c      	orrs	r4, r7
    67b4:	3a01      	subs	r2, #1
    67b6:	2a00      	cmp	r2, #0
    67b8:	d1f3      	bne.n	67a2 <__aeabi_fdiv+0x166>
    67ba:	1e6a      	subs	r2, r5, #1
    67bc:	4195      	sbcs	r5, r2
    67be:	432c      	orrs	r4, r5
    67c0:	9801      	ldr	r0, [sp, #4]
    67c2:	307f      	adds	r0, #127	; 0x7f
    67c4:	2800      	cmp	r0, #0
    67c6:	ddce      	ble.n	6766 <__aeabi_fdiv+0x12a>
    67c8:	0762      	lsls	r2, r4, #29
    67ca:	d004      	beq.n	67d6 <__aeabi_fdiv+0x19a>
    67cc:	220f      	movs	r2, #15
    67ce:	4022      	ands	r2, r4
    67d0:	2a04      	cmp	r2, #4
    67d2:	d000      	beq.n	67d6 <__aeabi_fdiv+0x19a>
    67d4:	3404      	adds	r4, #4
    67d6:	0122      	lsls	r2, r4, #4
    67d8:	d503      	bpl.n	67e2 <__aeabi_fdiv+0x1a6>
    67da:	4a24      	ldr	r2, [pc, #144]	; (686c <__aeabi_fdiv+0x230>)
    67dc:	9801      	ldr	r0, [sp, #4]
    67de:	4014      	ands	r4, r2
    67e0:	3080      	adds	r0, #128	; 0x80
    67e2:	28fe      	cmp	r0, #254	; 0xfe
    67e4:	dd00      	ble.n	67e8 <__aeabi_fdiv+0x1ac>
    67e6:	e764      	b.n	66b2 <__aeabi_fdiv+0x76>
    67e8:	2201      	movs	r2, #1
    67ea:	01a4      	lsls	r4, r4, #6
    67ec:	0a64      	lsrs	r4, r4, #9
    67ee:	b2c0      	uxtb	r0, r0
    67f0:	401a      	ands	r2, r3
    67f2:	e762      	b.n	66ba <__aeabi_fdiv+0x7e>
    67f4:	002c      	movs	r4, r5
    67f6:	e7a9      	b.n	674c <__aeabi_fdiv+0x110>
    67f8:	1a2d      	subs	r5, r5, r0
    67fa:	221a      	movs	r2, #26
    67fc:	2401      	movs	r4, #1
    67fe:	e7cf      	b.n	67a0 <__aeabi_fdiv+0x164>
    6800:	026b      	lsls	r3, r5, #9
    6802:	d5bc      	bpl.n	677e <__aeabi_fdiv+0x142>
    6804:	2400      	movs	r4, #0
    6806:	2380      	movs	r3, #128	; 0x80
    6808:	03db      	lsls	r3, r3, #15
    680a:	431c      	orrs	r4, r3
    680c:	0264      	lsls	r4, r4, #9
    680e:	0a64      	lsrs	r4, r4, #9
    6810:	4642      	mov	r2, r8
    6812:	20ff      	movs	r0, #255	; 0xff
    6814:	e751      	b.n	66ba <__aeabi_fdiv+0x7e>
    6816:	421c      	tst	r4, r3
    6818:	d1b3      	bne.n	6782 <__aeabi_fdiv+0x146>
    681a:	e7f4      	b.n	6806 <__aeabi_fdiv+0x1ca>
    681c:	0021      	movs	r1, r4
    681e:	2220      	movs	r2, #32
    6820:	40c1      	lsrs	r1, r0
    6822:	1a10      	subs	r0, r2, r0
    6824:	4084      	lsls	r4, r0
    6826:	1e62      	subs	r2, r4, #1
    6828:	4194      	sbcs	r4, r2
    682a:	430c      	orrs	r4, r1
    682c:	0762      	lsls	r2, r4, #29
    682e:	d004      	beq.n	683a <__aeabi_fdiv+0x1fe>
    6830:	220f      	movs	r2, #15
    6832:	4022      	ands	r2, r4
    6834:	2a04      	cmp	r2, #4
    6836:	d000      	beq.n	683a <__aeabi_fdiv+0x1fe>
    6838:	3404      	adds	r4, #4
    683a:	0162      	lsls	r2, r4, #5
    683c:	d504      	bpl.n	6848 <__aeabi_fdiv+0x20c>
    683e:	2201      	movs	r2, #1
    6840:	2001      	movs	r0, #1
    6842:	401a      	ands	r2, r3
    6844:	2400      	movs	r4, #0
    6846:	e738      	b.n	66ba <__aeabi_fdiv+0x7e>
    6848:	2201      	movs	r2, #1
    684a:	01a4      	lsls	r4, r4, #6
    684c:	0a64      	lsrs	r4, r4, #9
    684e:	401a      	ands	r2, r3
    6850:	2000      	movs	r0, #0
    6852:	e732      	b.n	66ba <__aeabi_fdiv+0x7e>
    6854:	2380      	movs	r3, #128	; 0x80
    6856:	03db      	lsls	r3, r3, #15
    6858:	431c      	orrs	r4, r3
    685a:	0264      	lsls	r4, r4, #9
    685c:	0a64      	lsrs	r4, r4, #9
    685e:	4652      	mov	r2, sl
    6860:	20ff      	movs	r0, #255	; 0xff
    6862:	e72a      	b.n	66ba <__aeabi_fdiv+0x7e>
    6864:	00008d88 	.word	0x00008d88
    6868:	00008dc8 	.word	0x00008dc8
    686c:	f7ffffff 	.word	0xf7ffffff

00006870 <__eqsf2>:
    6870:	0243      	lsls	r3, r0, #9
    6872:	b570      	push	{r4, r5, r6, lr}
    6874:	0042      	lsls	r2, r0, #1
    6876:	004c      	lsls	r4, r1, #1
    6878:	0a5d      	lsrs	r5, r3, #9
    687a:	0fc3      	lsrs	r3, r0, #31
    687c:	0248      	lsls	r0, r1, #9
    687e:	0e12      	lsrs	r2, r2, #24
    6880:	0a46      	lsrs	r6, r0, #9
    6882:	0e24      	lsrs	r4, r4, #24
    6884:	0fc9      	lsrs	r1, r1, #31
    6886:	2aff      	cmp	r2, #255	; 0xff
    6888:	d00f      	beq.n	68aa <__eqsf2+0x3a>
    688a:	2cff      	cmp	r4, #255	; 0xff
    688c:	d011      	beq.n	68b2 <__eqsf2+0x42>
    688e:	2001      	movs	r0, #1
    6890:	42a2      	cmp	r2, r4
    6892:	d000      	beq.n	6896 <__eqsf2+0x26>
    6894:	bd70      	pop	{r4, r5, r6, pc}
    6896:	42b5      	cmp	r5, r6
    6898:	d1fc      	bne.n	6894 <__eqsf2+0x24>
    689a:	428b      	cmp	r3, r1
    689c:	d00d      	beq.n	68ba <__eqsf2+0x4a>
    689e:	2a00      	cmp	r2, #0
    68a0:	d1f8      	bne.n	6894 <__eqsf2+0x24>
    68a2:	0028      	movs	r0, r5
    68a4:	1e43      	subs	r3, r0, #1
    68a6:	4198      	sbcs	r0, r3
    68a8:	e7f4      	b.n	6894 <__eqsf2+0x24>
    68aa:	2001      	movs	r0, #1
    68ac:	2d00      	cmp	r5, #0
    68ae:	d1f1      	bne.n	6894 <__eqsf2+0x24>
    68b0:	e7eb      	b.n	688a <__eqsf2+0x1a>
    68b2:	2001      	movs	r0, #1
    68b4:	2e00      	cmp	r6, #0
    68b6:	d1ed      	bne.n	6894 <__eqsf2+0x24>
    68b8:	e7e9      	b.n	688e <__eqsf2+0x1e>
    68ba:	2000      	movs	r0, #0
    68bc:	e7ea      	b.n	6894 <__eqsf2+0x24>
    68be:	46c0      	nop			; (mov r8, r8)

000068c0 <__gesf2>:
    68c0:	0243      	lsls	r3, r0, #9
    68c2:	b5f0      	push	{r4, r5, r6, r7, lr}
    68c4:	0042      	lsls	r2, r0, #1
    68c6:	0a5d      	lsrs	r5, r3, #9
    68c8:	0fc3      	lsrs	r3, r0, #31
    68ca:	0248      	lsls	r0, r1, #9
    68cc:	0a44      	lsrs	r4, r0, #9
    68ce:	0048      	lsls	r0, r1, #1
    68d0:	0e12      	lsrs	r2, r2, #24
    68d2:	0e00      	lsrs	r0, r0, #24
    68d4:	0fc9      	lsrs	r1, r1, #31
    68d6:	2aff      	cmp	r2, #255	; 0xff
    68d8:	d01f      	beq.n	691a <__gesf2+0x5a>
    68da:	28ff      	cmp	r0, #255	; 0xff
    68dc:	d022      	beq.n	6924 <__gesf2+0x64>
    68de:	2a00      	cmp	r2, #0
    68e0:	d109      	bne.n	68f6 <__gesf2+0x36>
    68e2:	426e      	negs	r6, r5
    68e4:	416e      	adcs	r6, r5
    68e6:	2800      	cmp	r0, #0
    68e8:	d10f      	bne.n	690a <__gesf2+0x4a>
    68ea:	2c00      	cmp	r4, #0
    68ec:	d10d      	bne.n	690a <__gesf2+0x4a>
    68ee:	2000      	movs	r0, #0
    68f0:	2d00      	cmp	r5, #0
    68f2:	d009      	beq.n	6908 <__gesf2+0x48>
    68f4:	e005      	b.n	6902 <__gesf2+0x42>
    68f6:	2800      	cmp	r0, #0
    68f8:	d101      	bne.n	68fe <__gesf2+0x3e>
    68fa:	2c00      	cmp	r4, #0
    68fc:	d001      	beq.n	6902 <__gesf2+0x42>
    68fe:	428b      	cmp	r3, r1
    6900:	d013      	beq.n	692a <__gesf2+0x6a>
    6902:	4258      	negs	r0, r3
    6904:	2301      	movs	r3, #1
    6906:	4318      	orrs	r0, r3
    6908:	bdf0      	pop	{r4, r5, r6, r7, pc}
    690a:	2e00      	cmp	r6, #0
    690c:	d0f7      	beq.n	68fe <__gesf2+0x3e>
    690e:	4248      	negs	r0, r1
    6910:	4141      	adcs	r1, r0
    6912:	2001      	movs	r0, #1
    6914:	4249      	negs	r1, r1
    6916:	4308      	orrs	r0, r1
    6918:	e7f6      	b.n	6908 <__gesf2+0x48>
    691a:	2d00      	cmp	r5, #0
    691c:	d0dd      	beq.n	68da <__gesf2+0x1a>
    691e:	2002      	movs	r0, #2
    6920:	4240      	negs	r0, r0
    6922:	e7f1      	b.n	6908 <__gesf2+0x48>
    6924:	2c00      	cmp	r4, #0
    6926:	d0da      	beq.n	68de <__gesf2+0x1e>
    6928:	e7f9      	b.n	691e <__gesf2+0x5e>
    692a:	4282      	cmp	r2, r0
    692c:	dce9      	bgt.n	6902 <__gesf2+0x42>
    692e:	db04      	blt.n	693a <__gesf2+0x7a>
    6930:	42a5      	cmp	r5, r4
    6932:	d8e6      	bhi.n	6902 <__gesf2+0x42>
    6934:	2000      	movs	r0, #0
    6936:	42a5      	cmp	r5, r4
    6938:	d2e6      	bcs.n	6908 <__gesf2+0x48>
    693a:	4258      	negs	r0, r3
    693c:	4143      	adcs	r3, r0
    693e:	2001      	movs	r0, #1
    6940:	425b      	negs	r3, r3
    6942:	4318      	orrs	r0, r3
    6944:	e7e0      	b.n	6908 <__gesf2+0x48>
    6946:	46c0      	nop			; (mov r8, r8)

00006948 <__lesf2>:
    6948:	0243      	lsls	r3, r0, #9
    694a:	b5f0      	push	{r4, r5, r6, r7, lr}
    694c:	0042      	lsls	r2, r0, #1
    694e:	004c      	lsls	r4, r1, #1
    6950:	0a5e      	lsrs	r6, r3, #9
    6952:	0fc3      	lsrs	r3, r0, #31
    6954:	0248      	lsls	r0, r1, #9
    6956:	0e12      	lsrs	r2, r2, #24
    6958:	0a45      	lsrs	r5, r0, #9
    695a:	0e24      	lsrs	r4, r4, #24
    695c:	0fc9      	lsrs	r1, r1, #31
    695e:	2aff      	cmp	r2, #255	; 0xff
    6960:	d017      	beq.n	6992 <__lesf2+0x4a>
    6962:	2cff      	cmp	r4, #255	; 0xff
    6964:	d019      	beq.n	699a <__lesf2+0x52>
    6966:	2a00      	cmp	r2, #0
    6968:	d10b      	bne.n	6982 <__lesf2+0x3a>
    696a:	4270      	negs	r0, r6
    696c:	4170      	adcs	r0, r6
    696e:	2c00      	cmp	r4, #0
    6970:	d017      	beq.n	69a2 <__lesf2+0x5a>
    6972:	2800      	cmp	r0, #0
    6974:	d007      	beq.n	6986 <__lesf2+0x3e>
    6976:	4248      	negs	r0, r1
    6978:	4141      	adcs	r1, r0
    697a:	2001      	movs	r0, #1
    697c:	4249      	negs	r1, r1
    697e:	4308      	orrs	r0, r1
    6980:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6982:	2c00      	cmp	r4, #0
    6984:	d013      	beq.n	69ae <__lesf2+0x66>
    6986:	428b      	cmp	r3, r1
    6988:	d014      	beq.n	69b4 <__lesf2+0x6c>
    698a:	4258      	negs	r0, r3
    698c:	2301      	movs	r3, #1
    698e:	4318      	orrs	r0, r3
    6990:	e7f6      	b.n	6980 <__lesf2+0x38>
    6992:	2002      	movs	r0, #2
    6994:	2e00      	cmp	r6, #0
    6996:	d1f3      	bne.n	6980 <__lesf2+0x38>
    6998:	e7e3      	b.n	6962 <__lesf2+0x1a>
    699a:	2002      	movs	r0, #2
    699c:	2d00      	cmp	r5, #0
    699e:	d1ef      	bne.n	6980 <__lesf2+0x38>
    69a0:	e7e1      	b.n	6966 <__lesf2+0x1e>
    69a2:	2d00      	cmp	r5, #0
    69a4:	d1e5      	bne.n	6972 <__lesf2+0x2a>
    69a6:	2000      	movs	r0, #0
    69a8:	2e00      	cmp	r6, #0
    69aa:	d0e9      	beq.n	6980 <__lesf2+0x38>
    69ac:	e7ed      	b.n	698a <__lesf2+0x42>
    69ae:	2d00      	cmp	r5, #0
    69b0:	d1e9      	bne.n	6986 <__lesf2+0x3e>
    69b2:	e7ea      	b.n	698a <__lesf2+0x42>
    69b4:	42a2      	cmp	r2, r4
    69b6:	dce8      	bgt.n	698a <__lesf2+0x42>
    69b8:	db04      	blt.n	69c4 <__lesf2+0x7c>
    69ba:	42ae      	cmp	r6, r5
    69bc:	d8e5      	bhi.n	698a <__lesf2+0x42>
    69be:	2000      	movs	r0, #0
    69c0:	42ae      	cmp	r6, r5
    69c2:	d2dd      	bcs.n	6980 <__lesf2+0x38>
    69c4:	4258      	negs	r0, r3
    69c6:	4143      	adcs	r3, r0
    69c8:	2001      	movs	r0, #1
    69ca:	425b      	negs	r3, r3
    69cc:	4318      	orrs	r0, r3
    69ce:	e7d7      	b.n	6980 <__lesf2+0x38>

000069d0 <__aeabi_fmul>:
    69d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    69d2:	4657      	mov	r7, sl
    69d4:	464e      	mov	r6, r9
    69d6:	4645      	mov	r5, r8
    69d8:	0043      	lsls	r3, r0, #1
    69da:	b4e0      	push	{r5, r6, r7}
    69dc:	0246      	lsls	r6, r0, #9
    69de:	4688      	mov	r8, r1
    69e0:	0a76      	lsrs	r6, r6, #9
    69e2:	0e1f      	lsrs	r7, r3, #24
    69e4:	0fc4      	lsrs	r4, r0, #31
    69e6:	2f00      	cmp	r7, #0
    69e8:	d047      	beq.n	6a7a <__aeabi_fmul+0xaa>
    69ea:	2fff      	cmp	r7, #255	; 0xff
    69ec:	d025      	beq.n	6a3a <__aeabi_fmul+0x6a>
    69ee:	2300      	movs	r3, #0
    69f0:	2580      	movs	r5, #128	; 0x80
    69f2:	469a      	mov	sl, r3
    69f4:	4699      	mov	r9, r3
    69f6:	00f6      	lsls	r6, r6, #3
    69f8:	04ed      	lsls	r5, r5, #19
    69fa:	432e      	orrs	r6, r5
    69fc:	3f7f      	subs	r7, #127	; 0x7f
    69fe:	4643      	mov	r3, r8
    6a00:	4642      	mov	r2, r8
    6a02:	025d      	lsls	r5, r3, #9
    6a04:	0fd2      	lsrs	r2, r2, #31
    6a06:	005b      	lsls	r3, r3, #1
    6a08:	0a6d      	lsrs	r5, r5, #9
    6a0a:	0e1b      	lsrs	r3, r3, #24
    6a0c:	4690      	mov	r8, r2
    6a0e:	d040      	beq.n	6a92 <__aeabi_fmul+0xc2>
    6a10:	2bff      	cmp	r3, #255	; 0xff
    6a12:	d039      	beq.n	6a88 <__aeabi_fmul+0xb8>
    6a14:	2280      	movs	r2, #128	; 0x80
    6a16:	2000      	movs	r0, #0
    6a18:	00ed      	lsls	r5, r5, #3
    6a1a:	04d2      	lsls	r2, r2, #19
    6a1c:	4315      	orrs	r5, r2
    6a1e:	3b7f      	subs	r3, #127	; 0x7f
    6a20:	18fb      	adds	r3, r7, r3
    6a22:	4642      	mov	r2, r8
    6a24:	4657      	mov	r7, sl
    6a26:	1c59      	adds	r1, r3, #1
    6a28:	4062      	eors	r2, r4
    6a2a:	468c      	mov	ip, r1
    6a2c:	4307      	orrs	r7, r0
    6a2e:	2f0f      	cmp	r7, #15
    6a30:	d85c      	bhi.n	6aec <__aeabi_fmul+0x11c>
    6a32:	496f      	ldr	r1, [pc, #444]	; (6bf0 <__aeabi_fmul+0x220>)
    6a34:	00bf      	lsls	r7, r7, #2
    6a36:	59c9      	ldr	r1, [r1, r7]
    6a38:	468f      	mov	pc, r1
    6a3a:	2e00      	cmp	r6, #0
    6a3c:	d145      	bne.n	6aca <__aeabi_fmul+0xfa>
    6a3e:	2308      	movs	r3, #8
    6a40:	469a      	mov	sl, r3
    6a42:	3b06      	subs	r3, #6
    6a44:	4699      	mov	r9, r3
    6a46:	e7da      	b.n	69fe <__aeabi_fmul+0x2e>
    6a48:	4642      	mov	r2, r8
    6a4a:	2802      	cmp	r0, #2
    6a4c:	d02d      	beq.n	6aaa <__aeabi_fmul+0xda>
    6a4e:	2803      	cmp	r0, #3
    6a50:	d100      	bne.n	6a54 <__aeabi_fmul+0x84>
    6a52:	e0c3      	b.n	6bdc <__aeabi_fmul+0x20c>
    6a54:	2801      	cmp	r0, #1
    6a56:	d000      	beq.n	6a5a <__aeabi_fmul+0x8a>
    6a58:	e0a2      	b.n	6ba0 <__aeabi_fmul+0x1d0>
    6a5a:	2500      	movs	r5, #0
    6a5c:	2600      	movs	r6, #0
    6a5e:	4002      	ands	r2, r0
    6a60:	b2d4      	uxtb	r4, r2
    6a62:	0276      	lsls	r6, r6, #9
    6a64:	05ed      	lsls	r5, r5, #23
    6a66:	0a76      	lsrs	r6, r6, #9
    6a68:	432e      	orrs	r6, r5
    6a6a:	07e4      	lsls	r4, r4, #31
    6a6c:	4326      	orrs	r6, r4
    6a6e:	0030      	movs	r0, r6
    6a70:	bc1c      	pop	{r2, r3, r4}
    6a72:	4690      	mov	r8, r2
    6a74:	4699      	mov	r9, r3
    6a76:	46a2      	mov	sl, r4
    6a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a7a:	2e00      	cmp	r6, #0
    6a7c:	d11a      	bne.n	6ab4 <__aeabi_fmul+0xe4>
    6a7e:	2304      	movs	r3, #4
    6a80:	469a      	mov	sl, r3
    6a82:	3b03      	subs	r3, #3
    6a84:	4699      	mov	r9, r3
    6a86:	e7ba      	b.n	69fe <__aeabi_fmul+0x2e>
    6a88:	002a      	movs	r2, r5
    6a8a:	1e51      	subs	r1, r2, #1
    6a8c:	418a      	sbcs	r2, r1
    6a8e:	1c90      	adds	r0, r2, #2
    6a90:	e7c6      	b.n	6a20 <__aeabi_fmul+0x50>
    6a92:	2001      	movs	r0, #1
    6a94:	2d00      	cmp	r5, #0
    6a96:	d0c3      	beq.n	6a20 <__aeabi_fmul+0x50>
    6a98:	0028      	movs	r0, r5
    6a9a:	f001 ffc3 	bl	8a24 <__clzsi2>
    6a9e:	1f43      	subs	r3, r0, #5
    6aa0:	3076      	adds	r0, #118	; 0x76
    6aa2:	409d      	lsls	r5, r3
    6aa4:	4243      	negs	r3, r0
    6aa6:	2000      	movs	r0, #0
    6aa8:	e7ba      	b.n	6a20 <__aeabi_fmul+0x50>
    6aaa:	2401      	movs	r4, #1
    6aac:	25ff      	movs	r5, #255	; 0xff
    6aae:	4014      	ands	r4, r2
    6ab0:	2600      	movs	r6, #0
    6ab2:	e7d6      	b.n	6a62 <__aeabi_fmul+0x92>
    6ab4:	0030      	movs	r0, r6
    6ab6:	f001 ffb5 	bl	8a24 <__clzsi2>
    6aba:	1f43      	subs	r3, r0, #5
    6abc:	409e      	lsls	r6, r3
    6abe:	2300      	movs	r3, #0
    6ac0:	3076      	adds	r0, #118	; 0x76
    6ac2:	4247      	negs	r7, r0
    6ac4:	469a      	mov	sl, r3
    6ac6:	4699      	mov	r9, r3
    6ac8:	e799      	b.n	69fe <__aeabi_fmul+0x2e>
    6aca:	230c      	movs	r3, #12
    6acc:	469a      	mov	sl, r3
    6ace:	3b09      	subs	r3, #9
    6ad0:	4699      	mov	r9, r3
    6ad2:	e794      	b.n	69fe <__aeabi_fmul+0x2e>
    6ad4:	2680      	movs	r6, #128	; 0x80
    6ad6:	2400      	movs	r4, #0
    6ad8:	03f6      	lsls	r6, r6, #15
    6ada:	25ff      	movs	r5, #255	; 0xff
    6adc:	e7c1      	b.n	6a62 <__aeabi_fmul+0x92>
    6ade:	0035      	movs	r5, r6
    6ae0:	4648      	mov	r0, r9
    6ae2:	e7b2      	b.n	6a4a <__aeabi_fmul+0x7a>
    6ae4:	0035      	movs	r5, r6
    6ae6:	0022      	movs	r2, r4
    6ae8:	4648      	mov	r0, r9
    6aea:	e7ae      	b.n	6a4a <__aeabi_fmul+0x7a>
    6aec:	0429      	lsls	r1, r5, #16
    6aee:	0c09      	lsrs	r1, r1, #16
    6af0:	0008      	movs	r0, r1
    6af2:	0c37      	lsrs	r7, r6, #16
    6af4:	0436      	lsls	r6, r6, #16
    6af6:	0c36      	lsrs	r6, r6, #16
    6af8:	0c2c      	lsrs	r4, r5, #16
    6afa:	4379      	muls	r1, r7
    6afc:	4370      	muls	r0, r6
    6afe:	4367      	muls	r7, r4
    6b00:	4374      	muls	r4, r6
    6b02:	0c06      	lsrs	r6, r0, #16
    6b04:	1864      	adds	r4, r4, r1
    6b06:	1936      	adds	r6, r6, r4
    6b08:	42b1      	cmp	r1, r6
    6b0a:	d903      	bls.n	6b14 <__aeabi_fmul+0x144>
    6b0c:	2180      	movs	r1, #128	; 0x80
    6b0e:	0249      	lsls	r1, r1, #9
    6b10:	4688      	mov	r8, r1
    6b12:	4447      	add	r7, r8
    6b14:	0400      	lsls	r0, r0, #16
    6b16:	0c00      	lsrs	r0, r0, #16
    6b18:	0431      	lsls	r1, r6, #16
    6b1a:	1809      	adds	r1, r1, r0
    6b1c:	018d      	lsls	r5, r1, #6
    6b1e:	1e68      	subs	r0, r5, #1
    6b20:	4185      	sbcs	r5, r0
    6b22:	0e89      	lsrs	r1, r1, #26
    6b24:	4329      	orrs	r1, r5
    6b26:	0c35      	lsrs	r5, r6, #16
    6b28:	19ed      	adds	r5, r5, r7
    6b2a:	01ad      	lsls	r5, r5, #6
    6b2c:	430d      	orrs	r5, r1
    6b2e:	0129      	lsls	r1, r5, #4
    6b30:	d504      	bpl.n	6b3c <__aeabi_fmul+0x16c>
    6b32:	2301      	movs	r3, #1
    6b34:	0869      	lsrs	r1, r5, #1
    6b36:	401d      	ands	r5, r3
    6b38:	4663      	mov	r3, ip
    6b3a:	430d      	orrs	r5, r1
    6b3c:	0019      	movs	r1, r3
    6b3e:	317f      	adds	r1, #127	; 0x7f
    6b40:	2900      	cmp	r1, #0
    6b42:	dd25      	ble.n	6b90 <__aeabi_fmul+0x1c0>
    6b44:	0768      	lsls	r0, r5, #29
    6b46:	d004      	beq.n	6b52 <__aeabi_fmul+0x182>
    6b48:	200f      	movs	r0, #15
    6b4a:	4028      	ands	r0, r5
    6b4c:	2804      	cmp	r0, #4
    6b4e:	d000      	beq.n	6b52 <__aeabi_fmul+0x182>
    6b50:	3504      	adds	r5, #4
    6b52:	0128      	lsls	r0, r5, #4
    6b54:	d503      	bpl.n	6b5e <__aeabi_fmul+0x18e>
    6b56:	4927      	ldr	r1, [pc, #156]	; (6bf4 <__aeabi_fmul+0x224>)
    6b58:	3380      	adds	r3, #128	; 0x80
    6b5a:	400d      	ands	r5, r1
    6b5c:	0019      	movs	r1, r3
    6b5e:	29fe      	cmp	r1, #254	; 0xfe
    6b60:	dca3      	bgt.n	6aaa <__aeabi_fmul+0xda>
    6b62:	2401      	movs	r4, #1
    6b64:	01ad      	lsls	r5, r5, #6
    6b66:	0a6e      	lsrs	r6, r5, #9
    6b68:	4014      	ands	r4, r2
    6b6a:	b2cd      	uxtb	r5, r1
    6b6c:	e779      	b.n	6a62 <__aeabi_fmul+0x92>
    6b6e:	2080      	movs	r0, #128	; 0x80
    6b70:	03c0      	lsls	r0, r0, #15
    6b72:	4206      	tst	r6, r0
    6b74:	d007      	beq.n	6b86 <__aeabi_fmul+0x1b6>
    6b76:	4205      	tst	r5, r0
    6b78:	d105      	bne.n	6b86 <__aeabi_fmul+0x1b6>
    6b7a:	4328      	orrs	r0, r5
    6b7c:	0246      	lsls	r6, r0, #9
    6b7e:	0a76      	lsrs	r6, r6, #9
    6b80:	4644      	mov	r4, r8
    6b82:	25ff      	movs	r5, #255	; 0xff
    6b84:	e76d      	b.n	6a62 <__aeabi_fmul+0x92>
    6b86:	4306      	orrs	r6, r0
    6b88:	0276      	lsls	r6, r6, #9
    6b8a:	0a76      	lsrs	r6, r6, #9
    6b8c:	25ff      	movs	r5, #255	; 0xff
    6b8e:	e768      	b.n	6a62 <__aeabi_fmul+0x92>
    6b90:	2401      	movs	r4, #1
    6b92:	1a61      	subs	r1, r4, r1
    6b94:	291b      	cmp	r1, #27
    6b96:	dd05      	ble.n	6ba4 <__aeabi_fmul+0x1d4>
    6b98:	4014      	ands	r4, r2
    6b9a:	2500      	movs	r5, #0
    6b9c:	2600      	movs	r6, #0
    6b9e:	e760      	b.n	6a62 <__aeabi_fmul+0x92>
    6ba0:	4663      	mov	r3, ip
    6ba2:	e7cb      	b.n	6b3c <__aeabi_fmul+0x16c>
    6ba4:	002e      	movs	r6, r5
    6ba6:	2320      	movs	r3, #32
    6ba8:	40ce      	lsrs	r6, r1
    6baa:	1a59      	subs	r1, r3, r1
    6bac:	408d      	lsls	r5, r1
    6bae:	1e6b      	subs	r3, r5, #1
    6bb0:	419d      	sbcs	r5, r3
    6bb2:	432e      	orrs	r6, r5
    6bb4:	0773      	lsls	r3, r6, #29
    6bb6:	d004      	beq.n	6bc2 <__aeabi_fmul+0x1f2>
    6bb8:	230f      	movs	r3, #15
    6bba:	4033      	ands	r3, r6
    6bbc:	2b04      	cmp	r3, #4
    6bbe:	d000      	beq.n	6bc2 <__aeabi_fmul+0x1f2>
    6bc0:	3604      	adds	r6, #4
    6bc2:	0173      	lsls	r3, r6, #5
    6bc4:	d504      	bpl.n	6bd0 <__aeabi_fmul+0x200>
    6bc6:	2401      	movs	r4, #1
    6bc8:	2501      	movs	r5, #1
    6bca:	4014      	ands	r4, r2
    6bcc:	2600      	movs	r6, #0
    6bce:	e748      	b.n	6a62 <__aeabi_fmul+0x92>
    6bd0:	2401      	movs	r4, #1
    6bd2:	01b6      	lsls	r6, r6, #6
    6bd4:	0a76      	lsrs	r6, r6, #9
    6bd6:	4014      	ands	r4, r2
    6bd8:	2500      	movs	r5, #0
    6bda:	e742      	b.n	6a62 <__aeabi_fmul+0x92>
    6bdc:	2680      	movs	r6, #128	; 0x80
    6bde:	2401      	movs	r4, #1
    6be0:	03f6      	lsls	r6, r6, #15
    6be2:	432e      	orrs	r6, r5
    6be4:	0276      	lsls	r6, r6, #9
    6be6:	0a76      	lsrs	r6, r6, #9
    6be8:	4014      	ands	r4, r2
    6bea:	25ff      	movs	r5, #255	; 0xff
    6bec:	e739      	b.n	6a62 <__aeabi_fmul+0x92>
    6bee:	46c0      	nop			; (mov r8, r8)
    6bf0:	00008e08 	.word	0x00008e08
    6bf4:	f7ffffff 	.word	0xf7ffffff

00006bf8 <__aeabi_i2f>:
    6bf8:	b570      	push	{r4, r5, r6, lr}
    6bfa:	2800      	cmp	r0, #0
    6bfc:	d030      	beq.n	6c60 <__aeabi_i2f+0x68>
    6bfe:	17c3      	asrs	r3, r0, #31
    6c00:	18c5      	adds	r5, r0, r3
    6c02:	405d      	eors	r5, r3
    6c04:	0fc4      	lsrs	r4, r0, #31
    6c06:	0028      	movs	r0, r5
    6c08:	f001 ff0c 	bl	8a24 <__clzsi2>
    6c0c:	239e      	movs	r3, #158	; 0x9e
    6c0e:	1a1b      	subs	r3, r3, r0
    6c10:	2b96      	cmp	r3, #150	; 0x96
    6c12:	dc0d      	bgt.n	6c30 <__aeabi_i2f+0x38>
    6c14:	2296      	movs	r2, #150	; 0x96
    6c16:	1ad2      	subs	r2, r2, r3
    6c18:	4095      	lsls	r5, r2
    6c1a:	026a      	lsls	r2, r5, #9
    6c1c:	0a52      	lsrs	r2, r2, #9
    6c1e:	b2d8      	uxtb	r0, r3
    6c20:	0252      	lsls	r2, r2, #9
    6c22:	05c0      	lsls	r0, r0, #23
    6c24:	0a52      	lsrs	r2, r2, #9
    6c26:	07e4      	lsls	r4, r4, #31
    6c28:	4302      	orrs	r2, r0
    6c2a:	4322      	orrs	r2, r4
    6c2c:	0010      	movs	r0, r2
    6c2e:	bd70      	pop	{r4, r5, r6, pc}
    6c30:	2b99      	cmp	r3, #153	; 0x99
    6c32:	dc19      	bgt.n	6c68 <__aeabi_i2f+0x70>
    6c34:	2299      	movs	r2, #153	; 0x99
    6c36:	1ad2      	subs	r2, r2, r3
    6c38:	4095      	lsls	r5, r2
    6c3a:	4a12      	ldr	r2, [pc, #72]	; (6c84 <__aeabi_i2f+0x8c>)
    6c3c:	402a      	ands	r2, r5
    6c3e:	0769      	lsls	r1, r5, #29
    6c40:	d004      	beq.n	6c4c <__aeabi_i2f+0x54>
    6c42:	210f      	movs	r1, #15
    6c44:	400d      	ands	r5, r1
    6c46:	2d04      	cmp	r5, #4
    6c48:	d000      	beq.n	6c4c <__aeabi_i2f+0x54>
    6c4a:	3204      	adds	r2, #4
    6c4c:	0151      	lsls	r1, r2, #5
    6c4e:	d503      	bpl.n	6c58 <__aeabi_i2f+0x60>
    6c50:	4b0c      	ldr	r3, [pc, #48]	; (6c84 <__aeabi_i2f+0x8c>)
    6c52:	401a      	ands	r2, r3
    6c54:	239f      	movs	r3, #159	; 0x9f
    6c56:	1a1b      	subs	r3, r3, r0
    6c58:	0192      	lsls	r2, r2, #6
    6c5a:	0a52      	lsrs	r2, r2, #9
    6c5c:	b2d8      	uxtb	r0, r3
    6c5e:	e7df      	b.n	6c20 <__aeabi_i2f+0x28>
    6c60:	2400      	movs	r4, #0
    6c62:	2000      	movs	r0, #0
    6c64:	2200      	movs	r2, #0
    6c66:	e7db      	b.n	6c20 <__aeabi_i2f+0x28>
    6c68:	2205      	movs	r2, #5
    6c6a:	002e      	movs	r6, r5
    6c6c:	1a12      	subs	r2, r2, r0
    6c6e:	21b9      	movs	r1, #185	; 0xb9
    6c70:	40d6      	lsrs	r6, r2
    6c72:	002a      	movs	r2, r5
    6c74:	1ac9      	subs	r1, r1, r3
    6c76:	408a      	lsls	r2, r1
    6c78:	1e55      	subs	r5, r2, #1
    6c7a:	41aa      	sbcs	r2, r5
    6c7c:	0035      	movs	r5, r6
    6c7e:	4315      	orrs	r5, r2
    6c80:	e7db      	b.n	6c3a <__aeabi_i2f+0x42>
    6c82:	46c0      	nop			; (mov r8, r8)
    6c84:	fbffffff 	.word	0xfbffffff

00006c88 <__aeabi_dadd>:
    6c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c8a:	4656      	mov	r6, sl
    6c8c:	465f      	mov	r7, fp
    6c8e:	464d      	mov	r5, r9
    6c90:	4644      	mov	r4, r8
    6c92:	b4f0      	push	{r4, r5, r6, r7}
    6c94:	000f      	movs	r7, r1
    6c96:	0ffd      	lsrs	r5, r7, #31
    6c98:	46aa      	mov	sl, r5
    6c9a:	0309      	lsls	r1, r1, #12
    6c9c:	007c      	lsls	r4, r7, #1
    6c9e:	002e      	movs	r6, r5
    6ca0:	005f      	lsls	r7, r3, #1
    6ca2:	0f45      	lsrs	r5, r0, #29
    6ca4:	0a49      	lsrs	r1, r1, #9
    6ca6:	0d7f      	lsrs	r7, r7, #21
    6ca8:	4329      	orrs	r1, r5
    6caa:	00c5      	lsls	r5, r0, #3
    6cac:	0318      	lsls	r0, r3, #12
    6cae:	46bc      	mov	ip, r7
    6cb0:	0a40      	lsrs	r0, r0, #9
    6cb2:	0f57      	lsrs	r7, r2, #29
    6cb4:	0d64      	lsrs	r4, r4, #21
    6cb6:	0fdb      	lsrs	r3, r3, #31
    6cb8:	4338      	orrs	r0, r7
    6cba:	00d2      	lsls	r2, r2, #3
    6cbc:	459a      	cmp	sl, r3
    6cbe:	d100      	bne.n	6cc2 <__aeabi_dadd+0x3a>
    6cc0:	e0aa      	b.n	6e18 <__aeabi_dadd+0x190>
    6cc2:	4666      	mov	r6, ip
    6cc4:	1ba6      	subs	r6, r4, r6
    6cc6:	2e00      	cmp	r6, #0
    6cc8:	dc00      	bgt.n	6ccc <__aeabi_dadd+0x44>
    6cca:	e0ff      	b.n	6ecc <__aeabi_dadd+0x244>
    6ccc:	4663      	mov	r3, ip
    6cce:	2b00      	cmp	r3, #0
    6cd0:	d139      	bne.n	6d46 <__aeabi_dadd+0xbe>
    6cd2:	0003      	movs	r3, r0
    6cd4:	4313      	orrs	r3, r2
    6cd6:	d000      	beq.n	6cda <__aeabi_dadd+0x52>
    6cd8:	e0d9      	b.n	6e8e <__aeabi_dadd+0x206>
    6cda:	076b      	lsls	r3, r5, #29
    6cdc:	d009      	beq.n	6cf2 <__aeabi_dadd+0x6a>
    6cde:	230f      	movs	r3, #15
    6ce0:	402b      	ands	r3, r5
    6ce2:	2b04      	cmp	r3, #4
    6ce4:	d005      	beq.n	6cf2 <__aeabi_dadd+0x6a>
    6ce6:	1d2b      	adds	r3, r5, #4
    6ce8:	42ab      	cmp	r3, r5
    6cea:	41ad      	sbcs	r5, r5
    6cec:	426d      	negs	r5, r5
    6cee:	1949      	adds	r1, r1, r5
    6cf0:	001d      	movs	r5, r3
    6cf2:	020b      	lsls	r3, r1, #8
    6cf4:	d400      	bmi.n	6cf8 <__aeabi_dadd+0x70>
    6cf6:	e082      	b.n	6dfe <__aeabi_dadd+0x176>
    6cf8:	4bca      	ldr	r3, [pc, #808]	; (7024 <__aeabi_dadd+0x39c>)
    6cfa:	3401      	adds	r4, #1
    6cfc:	429c      	cmp	r4, r3
    6cfe:	d100      	bne.n	6d02 <__aeabi_dadd+0x7a>
    6d00:	e0fe      	b.n	6f00 <__aeabi_dadd+0x278>
    6d02:	000a      	movs	r2, r1
    6d04:	4656      	mov	r6, sl
    6d06:	4bc8      	ldr	r3, [pc, #800]	; (7028 <__aeabi_dadd+0x3a0>)
    6d08:	08ed      	lsrs	r5, r5, #3
    6d0a:	401a      	ands	r2, r3
    6d0c:	0750      	lsls	r0, r2, #29
    6d0e:	0564      	lsls	r4, r4, #21
    6d10:	0252      	lsls	r2, r2, #9
    6d12:	4305      	orrs	r5, r0
    6d14:	0b12      	lsrs	r2, r2, #12
    6d16:	0d64      	lsrs	r4, r4, #21
    6d18:	2100      	movs	r1, #0
    6d1a:	0312      	lsls	r2, r2, #12
    6d1c:	0d0b      	lsrs	r3, r1, #20
    6d1e:	051b      	lsls	r3, r3, #20
    6d20:	0564      	lsls	r4, r4, #21
    6d22:	0b12      	lsrs	r2, r2, #12
    6d24:	431a      	orrs	r2, r3
    6d26:	0863      	lsrs	r3, r4, #1
    6d28:	4cc0      	ldr	r4, [pc, #768]	; (702c <__aeabi_dadd+0x3a4>)
    6d2a:	07f6      	lsls	r6, r6, #31
    6d2c:	4014      	ands	r4, r2
    6d2e:	431c      	orrs	r4, r3
    6d30:	0064      	lsls	r4, r4, #1
    6d32:	0864      	lsrs	r4, r4, #1
    6d34:	4334      	orrs	r4, r6
    6d36:	0028      	movs	r0, r5
    6d38:	0021      	movs	r1, r4
    6d3a:	bc3c      	pop	{r2, r3, r4, r5}
    6d3c:	4690      	mov	r8, r2
    6d3e:	4699      	mov	r9, r3
    6d40:	46a2      	mov	sl, r4
    6d42:	46ab      	mov	fp, r5
    6d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6d46:	4bb7      	ldr	r3, [pc, #732]	; (7024 <__aeabi_dadd+0x39c>)
    6d48:	429c      	cmp	r4, r3
    6d4a:	d0c6      	beq.n	6cda <__aeabi_dadd+0x52>
    6d4c:	2380      	movs	r3, #128	; 0x80
    6d4e:	041b      	lsls	r3, r3, #16
    6d50:	4318      	orrs	r0, r3
    6d52:	2e38      	cmp	r6, #56	; 0x38
    6d54:	dd00      	ble.n	6d58 <__aeabi_dadd+0xd0>
    6d56:	e0eb      	b.n	6f30 <__aeabi_dadd+0x2a8>
    6d58:	2e1f      	cmp	r6, #31
    6d5a:	dd00      	ble.n	6d5e <__aeabi_dadd+0xd6>
    6d5c:	e11e      	b.n	6f9c <__aeabi_dadd+0x314>
    6d5e:	2320      	movs	r3, #32
    6d60:	1b9b      	subs	r3, r3, r6
    6d62:	469c      	mov	ip, r3
    6d64:	0003      	movs	r3, r0
    6d66:	4667      	mov	r7, ip
    6d68:	40bb      	lsls	r3, r7
    6d6a:	4698      	mov	r8, r3
    6d6c:	0013      	movs	r3, r2
    6d6e:	4647      	mov	r7, r8
    6d70:	40f3      	lsrs	r3, r6
    6d72:	433b      	orrs	r3, r7
    6d74:	4667      	mov	r7, ip
    6d76:	40ba      	lsls	r2, r7
    6d78:	1e57      	subs	r7, r2, #1
    6d7a:	41ba      	sbcs	r2, r7
    6d7c:	4313      	orrs	r3, r2
    6d7e:	0002      	movs	r2, r0
    6d80:	40f2      	lsrs	r2, r6
    6d82:	1aeb      	subs	r3, r5, r3
    6d84:	429d      	cmp	r5, r3
    6d86:	41b6      	sbcs	r6, r6
    6d88:	001d      	movs	r5, r3
    6d8a:	1a8a      	subs	r2, r1, r2
    6d8c:	4276      	negs	r6, r6
    6d8e:	1b91      	subs	r1, r2, r6
    6d90:	020b      	lsls	r3, r1, #8
    6d92:	d531      	bpl.n	6df8 <__aeabi_dadd+0x170>
    6d94:	024a      	lsls	r2, r1, #9
    6d96:	0a56      	lsrs	r6, r2, #9
    6d98:	2e00      	cmp	r6, #0
    6d9a:	d100      	bne.n	6d9e <__aeabi_dadd+0x116>
    6d9c:	e0b4      	b.n	6f08 <__aeabi_dadd+0x280>
    6d9e:	0030      	movs	r0, r6
    6da0:	f001 fe40 	bl	8a24 <__clzsi2>
    6da4:	0003      	movs	r3, r0
    6da6:	3b08      	subs	r3, #8
    6da8:	2b1f      	cmp	r3, #31
    6daa:	dd00      	ble.n	6dae <__aeabi_dadd+0x126>
    6dac:	e0b5      	b.n	6f1a <__aeabi_dadd+0x292>
    6dae:	2220      	movs	r2, #32
    6db0:	0029      	movs	r1, r5
    6db2:	1ad2      	subs	r2, r2, r3
    6db4:	40d1      	lsrs	r1, r2
    6db6:	409e      	lsls	r6, r3
    6db8:	000a      	movs	r2, r1
    6dba:	409d      	lsls	r5, r3
    6dbc:	4332      	orrs	r2, r6
    6dbe:	429c      	cmp	r4, r3
    6dc0:	dd00      	ble.n	6dc4 <__aeabi_dadd+0x13c>
    6dc2:	e0b1      	b.n	6f28 <__aeabi_dadd+0x2a0>
    6dc4:	1b1c      	subs	r4, r3, r4
    6dc6:	1c63      	adds	r3, r4, #1
    6dc8:	2b1f      	cmp	r3, #31
    6dca:	dd00      	ble.n	6dce <__aeabi_dadd+0x146>
    6dcc:	e0d5      	b.n	6f7a <__aeabi_dadd+0x2f2>
    6dce:	2120      	movs	r1, #32
    6dd0:	0014      	movs	r4, r2
    6dd2:	0028      	movs	r0, r5
    6dd4:	1ac9      	subs	r1, r1, r3
    6dd6:	408c      	lsls	r4, r1
    6dd8:	40d8      	lsrs	r0, r3
    6dda:	408d      	lsls	r5, r1
    6ddc:	4304      	orrs	r4, r0
    6dde:	40da      	lsrs	r2, r3
    6de0:	1e68      	subs	r0, r5, #1
    6de2:	4185      	sbcs	r5, r0
    6de4:	0011      	movs	r1, r2
    6de6:	4325      	orrs	r5, r4
    6de8:	2400      	movs	r4, #0
    6dea:	e776      	b.n	6cda <__aeabi_dadd+0x52>
    6dec:	4641      	mov	r1, r8
    6dee:	4331      	orrs	r1, r6
    6df0:	d100      	bne.n	6df4 <__aeabi_dadd+0x16c>
    6df2:	e234      	b.n	725e <__aeabi_dadd+0x5d6>
    6df4:	0031      	movs	r1, r6
    6df6:	4645      	mov	r5, r8
    6df8:	076b      	lsls	r3, r5, #29
    6dfa:	d000      	beq.n	6dfe <__aeabi_dadd+0x176>
    6dfc:	e76f      	b.n	6cde <__aeabi_dadd+0x56>
    6dfe:	4656      	mov	r6, sl
    6e00:	0748      	lsls	r0, r1, #29
    6e02:	08ed      	lsrs	r5, r5, #3
    6e04:	08c9      	lsrs	r1, r1, #3
    6e06:	4305      	orrs	r5, r0
    6e08:	4b86      	ldr	r3, [pc, #536]	; (7024 <__aeabi_dadd+0x39c>)
    6e0a:	429c      	cmp	r4, r3
    6e0c:	d035      	beq.n	6e7a <__aeabi_dadd+0x1f2>
    6e0e:	030a      	lsls	r2, r1, #12
    6e10:	0564      	lsls	r4, r4, #21
    6e12:	0b12      	lsrs	r2, r2, #12
    6e14:	0d64      	lsrs	r4, r4, #21
    6e16:	e77f      	b.n	6d18 <__aeabi_dadd+0x90>
    6e18:	4663      	mov	r3, ip
    6e1a:	1ae3      	subs	r3, r4, r3
    6e1c:	469b      	mov	fp, r3
    6e1e:	2b00      	cmp	r3, #0
    6e20:	dc00      	bgt.n	6e24 <__aeabi_dadd+0x19c>
    6e22:	e08b      	b.n	6f3c <__aeabi_dadd+0x2b4>
    6e24:	4667      	mov	r7, ip
    6e26:	2f00      	cmp	r7, #0
    6e28:	d03c      	beq.n	6ea4 <__aeabi_dadd+0x21c>
    6e2a:	4f7e      	ldr	r7, [pc, #504]	; (7024 <__aeabi_dadd+0x39c>)
    6e2c:	42bc      	cmp	r4, r7
    6e2e:	d100      	bne.n	6e32 <__aeabi_dadd+0x1aa>
    6e30:	e753      	b.n	6cda <__aeabi_dadd+0x52>
    6e32:	2780      	movs	r7, #128	; 0x80
    6e34:	043f      	lsls	r7, r7, #16
    6e36:	4338      	orrs	r0, r7
    6e38:	465b      	mov	r3, fp
    6e3a:	2b38      	cmp	r3, #56	; 0x38
    6e3c:	dc00      	bgt.n	6e40 <__aeabi_dadd+0x1b8>
    6e3e:	e0f7      	b.n	7030 <__aeabi_dadd+0x3a8>
    6e40:	4302      	orrs	r2, r0
    6e42:	1e50      	subs	r0, r2, #1
    6e44:	4182      	sbcs	r2, r0
    6e46:	2000      	movs	r0, #0
    6e48:	b2d2      	uxtb	r2, r2
    6e4a:	1953      	adds	r3, r2, r5
    6e4c:	1842      	adds	r2, r0, r1
    6e4e:	42ab      	cmp	r3, r5
    6e50:	4189      	sbcs	r1, r1
    6e52:	001d      	movs	r5, r3
    6e54:	4249      	negs	r1, r1
    6e56:	1889      	adds	r1, r1, r2
    6e58:	020b      	lsls	r3, r1, #8
    6e5a:	d5cd      	bpl.n	6df8 <__aeabi_dadd+0x170>
    6e5c:	4b71      	ldr	r3, [pc, #452]	; (7024 <__aeabi_dadd+0x39c>)
    6e5e:	3401      	adds	r4, #1
    6e60:	429c      	cmp	r4, r3
    6e62:	d100      	bne.n	6e66 <__aeabi_dadd+0x1de>
    6e64:	e13d      	b.n	70e2 <__aeabi_dadd+0x45a>
    6e66:	2001      	movs	r0, #1
    6e68:	4a6f      	ldr	r2, [pc, #444]	; (7028 <__aeabi_dadd+0x3a0>)
    6e6a:	086b      	lsrs	r3, r5, #1
    6e6c:	400a      	ands	r2, r1
    6e6e:	4028      	ands	r0, r5
    6e70:	4318      	orrs	r0, r3
    6e72:	07d5      	lsls	r5, r2, #31
    6e74:	4305      	orrs	r5, r0
    6e76:	0851      	lsrs	r1, r2, #1
    6e78:	e72f      	b.n	6cda <__aeabi_dadd+0x52>
    6e7a:	002b      	movs	r3, r5
    6e7c:	430b      	orrs	r3, r1
    6e7e:	d100      	bne.n	6e82 <__aeabi_dadd+0x1fa>
    6e80:	e1cb      	b.n	721a <__aeabi_dadd+0x592>
    6e82:	2380      	movs	r3, #128	; 0x80
    6e84:	031b      	lsls	r3, r3, #12
    6e86:	430b      	orrs	r3, r1
    6e88:	031a      	lsls	r2, r3, #12
    6e8a:	0b12      	lsrs	r2, r2, #12
    6e8c:	e744      	b.n	6d18 <__aeabi_dadd+0x90>
    6e8e:	3e01      	subs	r6, #1
    6e90:	2e00      	cmp	r6, #0
    6e92:	d16d      	bne.n	6f70 <__aeabi_dadd+0x2e8>
    6e94:	1aae      	subs	r6, r5, r2
    6e96:	42b5      	cmp	r5, r6
    6e98:	419b      	sbcs	r3, r3
    6e9a:	1a09      	subs	r1, r1, r0
    6e9c:	425b      	negs	r3, r3
    6e9e:	1ac9      	subs	r1, r1, r3
    6ea0:	0035      	movs	r5, r6
    6ea2:	e775      	b.n	6d90 <__aeabi_dadd+0x108>
    6ea4:	0007      	movs	r7, r0
    6ea6:	4317      	orrs	r7, r2
    6ea8:	d100      	bne.n	6eac <__aeabi_dadd+0x224>
    6eaa:	e716      	b.n	6cda <__aeabi_dadd+0x52>
    6eac:	2301      	movs	r3, #1
    6eae:	425b      	negs	r3, r3
    6eb0:	469c      	mov	ip, r3
    6eb2:	44e3      	add	fp, ip
    6eb4:	465b      	mov	r3, fp
    6eb6:	2b00      	cmp	r3, #0
    6eb8:	d000      	beq.n	6ebc <__aeabi_dadd+0x234>
    6eba:	e0e0      	b.n	707e <__aeabi_dadd+0x3f6>
    6ebc:	18aa      	adds	r2, r5, r2
    6ebe:	42aa      	cmp	r2, r5
    6ec0:	419b      	sbcs	r3, r3
    6ec2:	1809      	adds	r1, r1, r0
    6ec4:	425b      	negs	r3, r3
    6ec6:	1859      	adds	r1, r3, r1
    6ec8:	0015      	movs	r5, r2
    6eca:	e7c5      	b.n	6e58 <__aeabi_dadd+0x1d0>
    6ecc:	2e00      	cmp	r6, #0
    6ece:	d175      	bne.n	6fbc <__aeabi_dadd+0x334>
    6ed0:	1c66      	adds	r6, r4, #1
    6ed2:	0576      	lsls	r6, r6, #21
    6ed4:	0d76      	lsrs	r6, r6, #21
    6ed6:	2e01      	cmp	r6, #1
    6ed8:	dc00      	bgt.n	6edc <__aeabi_dadd+0x254>
    6eda:	e0f3      	b.n	70c4 <__aeabi_dadd+0x43c>
    6edc:	1aae      	subs	r6, r5, r2
    6ede:	46b0      	mov	r8, r6
    6ee0:	4545      	cmp	r5, r8
    6ee2:	41bf      	sbcs	r7, r7
    6ee4:	1a0e      	subs	r6, r1, r0
    6ee6:	427f      	negs	r7, r7
    6ee8:	1bf6      	subs	r6, r6, r7
    6eea:	0237      	lsls	r7, r6, #8
    6eec:	d400      	bmi.n	6ef0 <__aeabi_dadd+0x268>
    6eee:	e08f      	b.n	7010 <__aeabi_dadd+0x388>
    6ef0:	1b55      	subs	r5, r2, r5
    6ef2:	42aa      	cmp	r2, r5
    6ef4:	41b6      	sbcs	r6, r6
    6ef6:	1a41      	subs	r1, r0, r1
    6ef8:	4276      	negs	r6, r6
    6efa:	1b8e      	subs	r6, r1, r6
    6efc:	469a      	mov	sl, r3
    6efe:	e74b      	b.n	6d98 <__aeabi_dadd+0x110>
    6f00:	4656      	mov	r6, sl
    6f02:	2200      	movs	r2, #0
    6f04:	2500      	movs	r5, #0
    6f06:	e707      	b.n	6d18 <__aeabi_dadd+0x90>
    6f08:	0028      	movs	r0, r5
    6f0a:	f001 fd8b 	bl	8a24 <__clzsi2>
    6f0e:	3020      	adds	r0, #32
    6f10:	0003      	movs	r3, r0
    6f12:	3b08      	subs	r3, #8
    6f14:	2b1f      	cmp	r3, #31
    6f16:	dc00      	bgt.n	6f1a <__aeabi_dadd+0x292>
    6f18:	e749      	b.n	6dae <__aeabi_dadd+0x126>
    6f1a:	002a      	movs	r2, r5
    6f1c:	3828      	subs	r0, #40	; 0x28
    6f1e:	4082      	lsls	r2, r0
    6f20:	2500      	movs	r5, #0
    6f22:	429c      	cmp	r4, r3
    6f24:	dc00      	bgt.n	6f28 <__aeabi_dadd+0x2a0>
    6f26:	e74d      	b.n	6dc4 <__aeabi_dadd+0x13c>
    6f28:	493f      	ldr	r1, [pc, #252]	; (7028 <__aeabi_dadd+0x3a0>)
    6f2a:	1ae4      	subs	r4, r4, r3
    6f2c:	4011      	ands	r1, r2
    6f2e:	e6d4      	b.n	6cda <__aeabi_dadd+0x52>
    6f30:	4302      	orrs	r2, r0
    6f32:	1e50      	subs	r0, r2, #1
    6f34:	4182      	sbcs	r2, r0
    6f36:	b2d3      	uxtb	r3, r2
    6f38:	2200      	movs	r2, #0
    6f3a:	e722      	b.n	6d82 <__aeabi_dadd+0xfa>
    6f3c:	2b00      	cmp	r3, #0
    6f3e:	d000      	beq.n	6f42 <__aeabi_dadd+0x2ba>
    6f40:	e0f3      	b.n	712a <__aeabi_dadd+0x4a2>
    6f42:	1c63      	adds	r3, r4, #1
    6f44:	469c      	mov	ip, r3
    6f46:	055b      	lsls	r3, r3, #21
    6f48:	0d5b      	lsrs	r3, r3, #21
    6f4a:	2b01      	cmp	r3, #1
    6f4c:	dc00      	bgt.n	6f50 <__aeabi_dadd+0x2c8>
    6f4e:	e09f      	b.n	7090 <__aeabi_dadd+0x408>
    6f50:	4b34      	ldr	r3, [pc, #208]	; (7024 <__aeabi_dadd+0x39c>)
    6f52:	459c      	cmp	ip, r3
    6f54:	d100      	bne.n	6f58 <__aeabi_dadd+0x2d0>
    6f56:	e0c3      	b.n	70e0 <__aeabi_dadd+0x458>
    6f58:	18aa      	adds	r2, r5, r2
    6f5a:	1809      	adds	r1, r1, r0
    6f5c:	42aa      	cmp	r2, r5
    6f5e:	4180      	sbcs	r0, r0
    6f60:	4240      	negs	r0, r0
    6f62:	1841      	adds	r1, r0, r1
    6f64:	07cd      	lsls	r5, r1, #31
    6f66:	0852      	lsrs	r2, r2, #1
    6f68:	4315      	orrs	r5, r2
    6f6a:	0849      	lsrs	r1, r1, #1
    6f6c:	4664      	mov	r4, ip
    6f6e:	e6b4      	b.n	6cda <__aeabi_dadd+0x52>
    6f70:	4b2c      	ldr	r3, [pc, #176]	; (7024 <__aeabi_dadd+0x39c>)
    6f72:	429c      	cmp	r4, r3
    6f74:	d000      	beq.n	6f78 <__aeabi_dadd+0x2f0>
    6f76:	e6ec      	b.n	6d52 <__aeabi_dadd+0xca>
    6f78:	e6af      	b.n	6cda <__aeabi_dadd+0x52>
    6f7a:	0011      	movs	r1, r2
    6f7c:	3c1f      	subs	r4, #31
    6f7e:	40e1      	lsrs	r1, r4
    6f80:	000c      	movs	r4, r1
    6f82:	2b20      	cmp	r3, #32
    6f84:	d100      	bne.n	6f88 <__aeabi_dadd+0x300>
    6f86:	e07f      	b.n	7088 <__aeabi_dadd+0x400>
    6f88:	2140      	movs	r1, #64	; 0x40
    6f8a:	1acb      	subs	r3, r1, r3
    6f8c:	409a      	lsls	r2, r3
    6f8e:	4315      	orrs	r5, r2
    6f90:	1e6a      	subs	r2, r5, #1
    6f92:	4195      	sbcs	r5, r2
    6f94:	2100      	movs	r1, #0
    6f96:	4325      	orrs	r5, r4
    6f98:	2400      	movs	r4, #0
    6f9a:	e72d      	b.n	6df8 <__aeabi_dadd+0x170>
    6f9c:	0033      	movs	r3, r6
    6f9e:	0007      	movs	r7, r0
    6fa0:	3b20      	subs	r3, #32
    6fa2:	40df      	lsrs	r7, r3
    6fa4:	003b      	movs	r3, r7
    6fa6:	2e20      	cmp	r6, #32
    6fa8:	d070      	beq.n	708c <__aeabi_dadd+0x404>
    6faa:	2740      	movs	r7, #64	; 0x40
    6fac:	1bbe      	subs	r6, r7, r6
    6fae:	40b0      	lsls	r0, r6
    6fb0:	4302      	orrs	r2, r0
    6fb2:	1e50      	subs	r0, r2, #1
    6fb4:	4182      	sbcs	r2, r0
    6fb6:	4313      	orrs	r3, r2
    6fb8:	2200      	movs	r2, #0
    6fba:	e6e2      	b.n	6d82 <__aeabi_dadd+0xfa>
    6fbc:	2c00      	cmp	r4, #0
    6fbe:	d04f      	beq.n	7060 <__aeabi_dadd+0x3d8>
    6fc0:	4c18      	ldr	r4, [pc, #96]	; (7024 <__aeabi_dadd+0x39c>)
    6fc2:	45a4      	cmp	ip, r4
    6fc4:	d100      	bne.n	6fc8 <__aeabi_dadd+0x340>
    6fc6:	e0ab      	b.n	7120 <__aeabi_dadd+0x498>
    6fc8:	2480      	movs	r4, #128	; 0x80
    6fca:	0424      	lsls	r4, r4, #16
    6fcc:	4276      	negs	r6, r6
    6fce:	4321      	orrs	r1, r4
    6fd0:	2e38      	cmp	r6, #56	; 0x38
    6fd2:	dd00      	ble.n	6fd6 <__aeabi_dadd+0x34e>
    6fd4:	e0df      	b.n	7196 <__aeabi_dadd+0x50e>
    6fd6:	2e1f      	cmp	r6, #31
    6fd8:	dd00      	ble.n	6fdc <__aeabi_dadd+0x354>
    6fda:	e143      	b.n	7264 <__aeabi_dadd+0x5dc>
    6fdc:	2720      	movs	r7, #32
    6fde:	1bbc      	subs	r4, r7, r6
    6fe0:	46a1      	mov	r9, r4
    6fe2:	000c      	movs	r4, r1
    6fe4:	464f      	mov	r7, r9
    6fe6:	40bc      	lsls	r4, r7
    6fe8:	46a0      	mov	r8, r4
    6fea:	002c      	movs	r4, r5
    6fec:	4647      	mov	r7, r8
    6fee:	40f4      	lsrs	r4, r6
    6ff0:	433c      	orrs	r4, r7
    6ff2:	464f      	mov	r7, r9
    6ff4:	40bd      	lsls	r5, r7
    6ff6:	1e6f      	subs	r7, r5, #1
    6ff8:	41bd      	sbcs	r5, r7
    6ffa:	40f1      	lsrs	r1, r6
    6ffc:	432c      	orrs	r4, r5
    6ffe:	1b15      	subs	r5, r2, r4
    7000:	42aa      	cmp	r2, r5
    7002:	4192      	sbcs	r2, r2
    7004:	1a41      	subs	r1, r0, r1
    7006:	4252      	negs	r2, r2
    7008:	1a89      	subs	r1, r1, r2
    700a:	4664      	mov	r4, ip
    700c:	469a      	mov	sl, r3
    700e:	e6bf      	b.n	6d90 <__aeabi_dadd+0x108>
    7010:	4641      	mov	r1, r8
    7012:	4645      	mov	r5, r8
    7014:	4331      	orrs	r1, r6
    7016:	d000      	beq.n	701a <__aeabi_dadd+0x392>
    7018:	e6be      	b.n	6d98 <__aeabi_dadd+0x110>
    701a:	2600      	movs	r6, #0
    701c:	2400      	movs	r4, #0
    701e:	2500      	movs	r5, #0
    7020:	e6f2      	b.n	6e08 <__aeabi_dadd+0x180>
    7022:	46c0      	nop			; (mov r8, r8)
    7024:	000007ff 	.word	0x000007ff
    7028:	ff7fffff 	.word	0xff7fffff
    702c:	800fffff 	.word	0x800fffff
    7030:	2b1f      	cmp	r3, #31
    7032:	dc59      	bgt.n	70e8 <__aeabi_dadd+0x460>
    7034:	2720      	movs	r7, #32
    7036:	1aff      	subs	r7, r7, r3
    7038:	46bc      	mov	ip, r7
    703a:	0007      	movs	r7, r0
    703c:	4663      	mov	r3, ip
    703e:	409f      	lsls	r7, r3
    7040:	465b      	mov	r3, fp
    7042:	46b9      	mov	r9, r7
    7044:	0017      	movs	r7, r2
    7046:	40df      	lsrs	r7, r3
    7048:	46b8      	mov	r8, r7
    704a:	464f      	mov	r7, r9
    704c:	4643      	mov	r3, r8
    704e:	431f      	orrs	r7, r3
    7050:	4663      	mov	r3, ip
    7052:	409a      	lsls	r2, r3
    7054:	1e53      	subs	r3, r2, #1
    7056:	419a      	sbcs	r2, r3
    7058:	465b      	mov	r3, fp
    705a:	433a      	orrs	r2, r7
    705c:	40d8      	lsrs	r0, r3
    705e:	e6f4      	b.n	6e4a <__aeabi_dadd+0x1c2>
    7060:	000c      	movs	r4, r1
    7062:	432c      	orrs	r4, r5
    7064:	d05c      	beq.n	7120 <__aeabi_dadd+0x498>
    7066:	43f6      	mvns	r6, r6
    7068:	2e00      	cmp	r6, #0
    706a:	d155      	bne.n	7118 <__aeabi_dadd+0x490>
    706c:	1b55      	subs	r5, r2, r5
    706e:	42aa      	cmp	r2, r5
    7070:	41a4      	sbcs	r4, r4
    7072:	1a41      	subs	r1, r0, r1
    7074:	4264      	negs	r4, r4
    7076:	1b09      	subs	r1, r1, r4
    7078:	469a      	mov	sl, r3
    707a:	4664      	mov	r4, ip
    707c:	e688      	b.n	6d90 <__aeabi_dadd+0x108>
    707e:	4f96      	ldr	r7, [pc, #600]	; (72d8 <__aeabi_dadd+0x650>)
    7080:	42bc      	cmp	r4, r7
    7082:	d000      	beq.n	7086 <__aeabi_dadd+0x3fe>
    7084:	e6d8      	b.n	6e38 <__aeabi_dadd+0x1b0>
    7086:	e628      	b.n	6cda <__aeabi_dadd+0x52>
    7088:	2200      	movs	r2, #0
    708a:	e780      	b.n	6f8e <__aeabi_dadd+0x306>
    708c:	2000      	movs	r0, #0
    708e:	e78f      	b.n	6fb0 <__aeabi_dadd+0x328>
    7090:	000b      	movs	r3, r1
    7092:	432b      	orrs	r3, r5
    7094:	2c00      	cmp	r4, #0
    7096:	d000      	beq.n	709a <__aeabi_dadd+0x412>
    7098:	e0c2      	b.n	7220 <__aeabi_dadd+0x598>
    709a:	2b00      	cmp	r3, #0
    709c:	d100      	bne.n	70a0 <__aeabi_dadd+0x418>
    709e:	e101      	b.n	72a4 <__aeabi_dadd+0x61c>
    70a0:	0003      	movs	r3, r0
    70a2:	4313      	orrs	r3, r2
    70a4:	d100      	bne.n	70a8 <__aeabi_dadd+0x420>
    70a6:	e618      	b.n	6cda <__aeabi_dadd+0x52>
    70a8:	18ab      	adds	r3, r5, r2
    70aa:	42ab      	cmp	r3, r5
    70ac:	41b6      	sbcs	r6, r6
    70ae:	1809      	adds	r1, r1, r0
    70b0:	4276      	negs	r6, r6
    70b2:	1871      	adds	r1, r6, r1
    70b4:	020a      	lsls	r2, r1, #8
    70b6:	d400      	bmi.n	70ba <__aeabi_dadd+0x432>
    70b8:	e109      	b.n	72ce <__aeabi_dadd+0x646>
    70ba:	4a88      	ldr	r2, [pc, #544]	; (72dc <__aeabi_dadd+0x654>)
    70bc:	001d      	movs	r5, r3
    70be:	4011      	ands	r1, r2
    70c0:	4664      	mov	r4, ip
    70c2:	e60a      	b.n	6cda <__aeabi_dadd+0x52>
    70c4:	2c00      	cmp	r4, #0
    70c6:	d15b      	bne.n	7180 <__aeabi_dadd+0x4f8>
    70c8:	000e      	movs	r6, r1
    70ca:	432e      	orrs	r6, r5
    70cc:	d000      	beq.n	70d0 <__aeabi_dadd+0x448>
    70ce:	e08a      	b.n	71e6 <__aeabi_dadd+0x55e>
    70d0:	0001      	movs	r1, r0
    70d2:	4311      	orrs	r1, r2
    70d4:	d100      	bne.n	70d8 <__aeabi_dadd+0x450>
    70d6:	e0c2      	b.n	725e <__aeabi_dadd+0x5d6>
    70d8:	0001      	movs	r1, r0
    70da:	0015      	movs	r5, r2
    70dc:	469a      	mov	sl, r3
    70de:	e5fc      	b.n	6cda <__aeabi_dadd+0x52>
    70e0:	4664      	mov	r4, ip
    70e2:	2100      	movs	r1, #0
    70e4:	2500      	movs	r5, #0
    70e6:	e68f      	b.n	6e08 <__aeabi_dadd+0x180>
    70e8:	2320      	movs	r3, #32
    70ea:	425b      	negs	r3, r3
    70ec:	469c      	mov	ip, r3
    70ee:	44dc      	add	ip, fp
    70f0:	4663      	mov	r3, ip
    70f2:	0007      	movs	r7, r0
    70f4:	40df      	lsrs	r7, r3
    70f6:	465b      	mov	r3, fp
    70f8:	46bc      	mov	ip, r7
    70fa:	2b20      	cmp	r3, #32
    70fc:	d100      	bne.n	7100 <__aeabi_dadd+0x478>
    70fe:	e0ac      	b.n	725a <__aeabi_dadd+0x5d2>
    7100:	2340      	movs	r3, #64	; 0x40
    7102:	465f      	mov	r7, fp
    7104:	1bdb      	subs	r3, r3, r7
    7106:	4098      	lsls	r0, r3
    7108:	4302      	orrs	r2, r0
    710a:	1e50      	subs	r0, r2, #1
    710c:	4182      	sbcs	r2, r0
    710e:	4663      	mov	r3, ip
    7110:	4313      	orrs	r3, r2
    7112:	001a      	movs	r2, r3
    7114:	2000      	movs	r0, #0
    7116:	e698      	b.n	6e4a <__aeabi_dadd+0x1c2>
    7118:	4c6f      	ldr	r4, [pc, #444]	; (72d8 <__aeabi_dadd+0x650>)
    711a:	45a4      	cmp	ip, r4
    711c:	d000      	beq.n	7120 <__aeabi_dadd+0x498>
    711e:	e757      	b.n	6fd0 <__aeabi_dadd+0x348>
    7120:	0001      	movs	r1, r0
    7122:	0015      	movs	r5, r2
    7124:	4664      	mov	r4, ip
    7126:	469a      	mov	sl, r3
    7128:	e5d7      	b.n	6cda <__aeabi_dadd+0x52>
    712a:	2c00      	cmp	r4, #0
    712c:	d139      	bne.n	71a2 <__aeabi_dadd+0x51a>
    712e:	000c      	movs	r4, r1
    7130:	432c      	orrs	r4, r5
    7132:	d06e      	beq.n	7212 <__aeabi_dadd+0x58a>
    7134:	43db      	mvns	r3, r3
    7136:	2b00      	cmp	r3, #0
    7138:	d01a      	beq.n	7170 <__aeabi_dadd+0x4e8>
    713a:	4c67      	ldr	r4, [pc, #412]	; (72d8 <__aeabi_dadd+0x650>)
    713c:	45a4      	cmp	ip, r4
    713e:	d068      	beq.n	7212 <__aeabi_dadd+0x58a>
    7140:	2b38      	cmp	r3, #56	; 0x38
    7142:	dd00      	ble.n	7146 <__aeabi_dadd+0x4be>
    7144:	e0a4      	b.n	7290 <__aeabi_dadd+0x608>
    7146:	2b1f      	cmp	r3, #31
    7148:	dd00      	ble.n	714c <__aeabi_dadd+0x4c4>
    714a:	e0ae      	b.n	72aa <__aeabi_dadd+0x622>
    714c:	2420      	movs	r4, #32
    714e:	000f      	movs	r7, r1
    7150:	1ae4      	subs	r4, r4, r3
    7152:	40a7      	lsls	r7, r4
    7154:	46b9      	mov	r9, r7
    7156:	002f      	movs	r7, r5
    7158:	40df      	lsrs	r7, r3
    715a:	46b8      	mov	r8, r7
    715c:	46a3      	mov	fp, r4
    715e:	464f      	mov	r7, r9
    7160:	4644      	mov	r4, r8
    7162:	4327      	orrs	r7, r4
    7164:	465c      	mov	r4, fp
    7166:	40a5      	lsls	r5, r4
    7168:	1e6c      	subs	r4, r5, #1
    716a:	41a5      	sbcs	r5, r4
    716c:	40d9      	lsrs	r1, r3
    716e:	433d      	orrs	r5, r7
    7170:	18ad      	adds	r5, r5, r2
    7172:	4295      	cmp	r5, r2
    7174:	419b      	sbcs	r3, r3
    7176:	1809      	adds	r1, r1, r0
    7178:	425b      	negs	r3, r3
    717a:	1859      	adds	r1, r3, r1
    717c:	4664      	mov	r4, ip
    717e:	e66b      	b.n	6e58 <__aeabi_dadd+0x1d0>
    7180:	000c      	movs	r4, r1
    7182:	432c      	orrs	r4, r5
    7184:	d115      	bne.n	71b2 <__aeabi_dadd+0x52a>
    7186:	0001      	movs	r1, r0
    7188:	4311      	orrs	r1, r2
    718a:	d07b      	beq.n	7284 <__aeabi_dadd+0x5fc>
    718c:	0001      	movs	r1, r0
    718e:	0015      	movs	r5, r2
    7190:	469a      	mov	sl, r3
    7192:	4c51      	ldr	r4, [pc, #324]	; (72d8 <__aeabi_dadd+0x650>)
    7194:	e5a1      	b.n	6cda <__aeabi_dadd+0x52>
    7196:	430d      	orrs	r5, r1
    7198:	1e69      	subs	r1, r5, #1
    719a:	418d      	sbcs	r5, r1
    719c:	2100      	movs	r1, #0
    719e:	b2ec      	uxtb	r4, r5
    71a0:	e72d      	b.n	6ffe <__aeabi_dadd+0x376>
    71a2:	4c4d      	ldr	r4, [pc, #308]	; (72d8 <__aeabi_dadd+0x650>)
    71a4:	45a4      	cmp	ip, r4
    71a6:	d034      	beq.n	7212 <__aeabi_dadd+0x58a>
    71a8:	2480      	movs	r4, #128	; 0x80
    71aa:	0424      	lsls	r4, r4, #16
    71ac:	425b      	negs	r3, r3
    71ae:	4321      	orrs	r1, r4
    71b0:	e7c6      	b.n	7140 <__aeabi_dadd+0x4b8>
    71b2:	0004      	movs	r4, r0
    71b4:	4314      	orrs	r4, r2
    71b6:	d04e      	beq.n	7256 <__aeabi_dadd+0x5ce>
    71b8:	08ed      	lsrs	r5, r5, #3
    71ba:	074c      	lsls	r4, r1, #29
    71bc:	432c      	orrs	r4, r5
    71be:	2580      	movs	r5, #128	; 0x80
    71c0:	08c9      	lsrs	r1, r1, #3
    71c2:	032d      	lsls	r5, r5, #12
    71c4:	4229      	tst	r1, r5
    71c6:	d008      	beq.n	71da <__aeabi_dadd+0x552>
    71c8:	08c6      	lsrs	r6, r0, #3
    71ca:	422e      	tst	r6, r5
    71cc:	d105      	bne.n	71da <__aeabi_dadd+0x552>
    71ce:	08d2      	lsrs	r2, r2, #3
    71d0:	0741      	lsls	r1, r0, #29
    71d2:	4311      	orrs	r1, r2
    71d4:	000c      	movs	r4, r1
    71d6:	469a      	mov	sl, r3
    71d8:	0031      	movs	r1, r6
    71da:	0f62      	lsrs	r2, r4, #29
    71dc:	00c9      	lsls	r1, r1, #3
    71de:	00e5      	lsls	r5, r4, #3
    71e0:	4311      	orrs	r1, r2
    71e2:	4c3d      	ldr	r4, [pc, #244]	; (72d8 <__aeabi_dadd+0x650>)
    71e4:	e579      	b.n	6cda <__aeabi_dadd+0x52>
    71e6:	0006      	movs	r6, r0
    71e8:	4316      	orrs	r6, r2
    71ea:	d100      	bne.n	71ee <__aeabi_dadd+0x566>
    71ec:	e575      	b.n	6cda <__aeabi_dadd+0x52>
    71ee:	1aae      	subs	r6, r5, r2
    71f0:	46b0      	mov	r8, r6
    71f2:	4545      	cmp	r5, r8
    71f4:	41bf      	sbcs	r7, r7
    71f6:	1a0e      	subs	r6, r1, r0
    71f8:	427f      	negs	r7, r7
    71fa:	1bf6      	subs	r6, r6, r7
    71fc:	0237      	lsls	r7, r6, #8
    71fe:	d400      	bmi.n	7202 <__aeabi_dadd+0x57a>
    7200:	e5f4      	b.n	6dec <__aeabi_dadd+0x164>
    7202:	1b55      	subs	r5, r2, r5
    7204:	42aa      	cmp	r2, r5
    7206:	41b6      	sbcs	r6, r6
    7208:	1a41      	subs	r1, r0, r1
    720a:	4276      	negs	r6, r6
    720c:	1b89      	subs	r1, r1, r6
    720e:	469a      	mov	sl, r3
    7210:	e563      	b.n	6cda <__aeabi_dadd+0x52>
    7212:	0001      	movs	r1, r0
    7214:	0015      	movs	r5, r2
    7216:	4664      	mov	r4, ip
    7218:	e55f      	b.n	6cda <__aeabi_dadd+0x52>
    721a:	2200      	movs	r2, #0
    721c:	2500      	movs	r5, #0
    721e:	e57b      	b.n	6d18 <__aeabi_dadd+0x90>
    7220:	2b00      	cmp	r3, #0
    7222:	d03b      	beq.n	729c <__aeabi_dadd+0x614>
    7224:	0003      	movs	r3, r0
    7226:	4313      	orrs	r3, r2
    7228:	d015      	beq.n	7256 <__aeabi_dadd+0x5ce>
    722a:	08ed      	lsrs	r5, r5, #3
    722c:	074b      	lsls	r3, r1, #29
    722e:	432b      	orrs	r3, r5
    7230:	2580      	movs	r5, #128	; 0x80
    7232:	08c9      	lsrs	r1, r1, #3
    7234:	032d      	lsls	r5, r5, #12
    7236:	4229      	tst	r1, r5
    7238:	d007      	beq.n	724a <__aeabi_dadd+0x5c2>
    723a:	08c4      	lsrs	r4, r0, #3
    723c:	422c      	tst	r4, r5
    723e:	d104      	bne.n	724a <__aeabi_dadd+0x5c2>
    7240:	0741      	lsls	r1, r0, #29
    7242:	000b      	movs	r3, r1
    7244:	0021      	movs	r1, r4
    7246:	08d2      	lsrs	r2, r2, #3
    7248:	4313      	orrs	r3, r2
    724a:	00c9      	lsls	r1, r1, #3
    724c:	0f5a      	lsrs	r2, r3, #29
    724e:	4311      	orrs	r1, r2
    7250:	00dd      	lsls	r5, r3, #3
    7252:	4c21      	ldr	r4, [pc, #132]	; (72d8 <__aeabi_dadd+0x650>)
    7254:	e541      	b.n	6cda <__aeabi_dadd+0x52>
    7256:	4c20      	ldr	r4, [pc, #128]	; (72d8 <__aeabi_dadd+0x650>)
    7258:	e53f      	b.n	6cda <__aeabi_dadd+0x52>
    725a:	2000      	movs	r0, #0
    725c:	e754      	b.n	7108 <__aeabi_dadd+0x480>
    725e:	2600      	movs	r6, #0
    7260:	2500      	movs	r5, #0
    7262:	e5d1      	b.n	6e08 <__aeabi_dadd+0x180>
    7264:	0034      	movs	r4, r6
    7266:	000f      	movs	r7, r1
    7268:	3c20      	subs	r4, #32
    726a:	40e7      	lsrs	r7, r4
    726c:	003c      	movs	r4, r7
    726e:	2e20      	cmp	r6, #32
    7270:	d02b      	beq.n	72ca <__aeabi_dadd+0x642>
    7272:	2740      	movs	r7, #64	; 0x40
    7274:	1bbe      	subs	r6, r7, r6
    7276:	40b1      	lsls	r1, r6
    7278:	430d      	orrs	r5, r1
    727a:	1e69      	subs	r1, r5, #1
    727c:	418d      	sbcs	r5, r1
    727e:	2100      	movs	r1, #0
    7280:	432c      	orrs	r4, r5
    7282:	e6bc      	b.n	6ffe <__aeabi_dadd+0x376>
    7284:	2180      	movs	r1, #128	; 0x80
    7286:	2600      	movs	r6, #0
    7288:	0309      	lsls	r1, r1, #12
    728a:	4c13      	ldr	r4, [pc, #76]	; (72d8 <__aeabi_dadd+0x650>)
    728c:	2500      	movs	r5, #0
    728e:	e5bb      	b.n	6e08 <__aeabi_dadd+0x180>
    7290:	430d      	orrs	r5, r1
    7292:	1e69      	subs	r1, r5, #1
    7294:	418d      	sbcs	r5, r1
    7296:	2100      	movs	r1, #0
    7298:	b2ed      	uxtb	r5, r5
    729a:	e769      	b.n	7170 <__aeabi_dadd+0x4e8>
    729c:	0001      	movs	r1, r0
    729e:	0015      	movs	r5, r2
    72a0:	4c0d      	ldr	r4, [pc, #52]	; (72d8 <__aeabi_dadd+0x650>)
    72a2:	e51a      	b.n	6cda <__aeabi_dadd+0x52>
    72a4:	0001      	movs	r1, r0
    72a6:	0015      	movs	r5, r2
    72a8:	e517      	b.n	6cda <__aeabi_dadd+0x52>
    72aa:	001c      	movs	r4, r3
    72ac:	000f      	movs	r7, r1
    72ae:	3c20      	subs	r4, #32
    72b0:	40e7      	lsrs	r7, r4
    72b2:	003c      	movs	r4, r7
    72b4:	2b20      	cmp	r3, #32
    72b6:	d00c      	beq.n	72d2 <__aeabi_dadd+0x64a>
    72b8:	2740      	movs	r7, #64	; 0x40
    72ba:	1afb      	subs	r3, r7, r3
    72bc:	4099      	lsls	r1, r3
    72be:	430d      	orrs	r5, r1
    72c0:	1e69      	subs	r1, r5, #1
    72c2:	418d      	sbcs	r5, r1
    72c4:	2100      	movs	r1, #0
    72c6:	4325      	orrs	r5, r4
    72c8:	e752      	b.n	7170 <__aeabi_dadd+0x4e8>
    72ca:	2100      	movs	r1, #0
    72cc:	e7d4      	b.n	7278 <__aeabi_dadd+0x5f0>
    72ce:	001d      	movs	r5, r3
    72d0:	e592      	b.n	6df8 <__aeabi_dadd+0x170>
    72d2:	2100      	movs	r1, #0
    72d4:	e7f3      	b.n	72be <__aeabi_dadd+0x636>
    72d6:	46c0      	nop			; (mov r8, r8)
    72d8:	000007ff 	.word	0x000007ff
    72dc:	ff7fffff 	.word	0xff7fffff

000072e0 <__aeabi_ddiv>:
    72e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    72e2:	4656      	mov	r6, sl
    72e4:	464d      	mov	r5, r9
    72e6:	4644      	mov	r4, r8
    72e8:	465f      	mov	r7, fp
    72ea:	b4f0      	push	{r4, r5, r6, r7}
    72ec:	001d      	movs	r5, r3
    72ee:	030e      	lsls	r6, r1, #12
    72f0:	004c      	lsls	r4, r1, #1
    72f2:	0fcb      	lsrs	r3, r1, #31
    72f4:	b087      	sub	sp, #28
    72f6:	0007      	movs	r7, r0
    72f8:	4692      	mov	sl, r2
    72fa:	4681      	mov	r9, r0
    72fc:	0b36      	lsrs	r6, r6, #12
    72fe:	0d64      	lsrs	r4, r4, #21
    7300:	4698      	mov	r8, r3
    7302:	d06a      	beq.n	73da <__aeabi_ddiv+0xfa>
    7304:	4b6d      	ldr	r3, [pc, #436]	; (74bc <__aeabi_ddiv+0x1dc>)
    7306:	429c      	cmp	r4, r3
    7308:	d035      	beq.n	7376 <__aeabi_ddiv+0x96>
    730a:	2280      	movs	r2, #128	; 0x80
    730c:	0f43      	lsrs	r3, r0, #29
    730e:	0412      	lsls	r2, r2, #16
    7310:	4313      	orrs	r3, r2
    7312:	00f6      	lsls	r6, r6, #3
    7314:	431e      	orrs	r6, r3
    7316:	00c3      	lsls	r3, r0, #3
    7318:	4699      	mov	r9, r3
    731a:	4b69      	ldr	r3, [pc, #420]	; (74c0 <__aeabi_ddiv+0x1e0>)
    731c:	2700      	movs	r7, #0
    731e:	469c      	mov	ip, r3
    7320:	2300      	movs	r3, #0
    7322:	4464      	add	r4, ip
    7324:	9302      	str	r3, [sp, #8]
    7326:	032b      	lsls	r3, r5, #12
    7328:	0068      	lsls	r0, r5, #1
    732a:	0b1b      	lsrs	r3, r3, #12
    732c:	0fed      	lsrs	r5, r5, #31
    732e:	4651      	mov	r1, sl
    7330:	469b      	mov	fp, r3
    7332:	0d40      	lsrs	r0, r0, #21
    7334:	9500      	str	r5, [sp, #0]
    7336:	d100      	bne.n	733a <__aeabi_ddiv+0x5a>
    7338:	e078      	b.n	742c <__aeabi_ddiv+0x14c>
    733a:	4b60      	ldr	r3, [pc, #384]	; (74bc <__aeabi_ddiv+0x1dc>)
    733c:	4298      	cmp	r0, r3
    733e:	d06c      	beq.n	741a <__aeabi_ddiv+0x13a>
    7340:	465b      	mov	r3, fp
    7342:	00da      	lsls	r2, r3, #3
    7344:	0f4b      	lsrs	r3, r1, #29
    7346:	2180      	movs	r1, #128	; 0x80
    7348:	0409      	lsls	r1, r1, #16
    734a:	430b      	orrs	r3, r1
    734c:	4313      	orrs	r3, r2
    734e:	469b      	mov	fp, r3
    7350:	4653      	mov	r3, sl
    7352:	00d9      	lsls	r1, r3, #3
    7354:	4b5a      	ldr	r3, [pc, #360]	; (74c0 <__aeabi_ddiv+0x1e0>)
    7356:	469c      	mov	ip, r3
    7358:	2300      	movs	r3, #0
    735a:	4460      	add	r0, ip
    735c:	4642      	mov	r2, r8
    735e:	1a20      	subs	r0, r4, r0
    7360:	406a      	eors	r2, r5
    7362:	4692      	mov	sl, r2
    7364:	9001      	str	r0, [sp, #4]
    7366:	431f      	orrs	r7, r3
    7368:	2f0f      	cmp	r7, #15
    736a:	d900      	bls.n	736e <__aeabi_ddiv+0x8e>
    736c:	e0b0      	b.n	74d0 <__aeabi_ddiv+0x1f0>
    736e:	4855      	ldr	r0, [pc, #340]	; (74c4 <__aeabi_ddiv+0x1e4>)
    7370:	00bf      	lsls	r7, r7, #2
    7372:	59c0      	ldr	r0, [r0, r7]
    7374:	4687      	mov	pc, r0
    7376:	4337      	orrs	r7, r6
    7378:	d000      	beq.n	737c <__aeabi_ddiv+0x9c>
    737a:	e088      	b.n	748e <__aeabi_ddiv+0x1ae>
    737c:	2300      	movs	r3, #0
    737e:	4699      	mov	r9, r3
    7380:	3302      	adds	r3, #2
    7382:	2708      	movs	r7, #8
    7384:	2600      	movs	r6, #0
    7386:	9302      	str	r3, [sp, #8]
    7388:	e7cd      	b.n	7326 <__aeabi_ddiv+0x46>
    738a:	4643      	mov	r3, r8
    738c:	46b3      	mov	fp, r6
    738e:	4649      	mov	r1, r9
    7390:	9300      	str	r3, [sp, #0]
    7392:	9b02      	ldr	r3, [sp, #8]
    7394:	9a00      	ldr	r2, [sp, #0]
    7396:	4692      	mov	sl, r2
    7398:	2b02      	cmp	r3, #2
    739a:	d000      	beq.n	739e <__aeabi_ddiv+0xbe>
    739c:	e1bf      	b.n	771e <__aeabi_ddiv+0x43e>
    739e:	2100      	movs	r1, #0
    73a0:	4653      	mov	r3, sl
    73a2:	2201      	movs	r2, #1
    73a4:	2600      	movs	r6, #0
    73a6:	4689      	mov	r9, r1
    73a8:	401a      	ands	r2, r3
    73aa:	4b44      	ldr	r3, [pc, #272]	; (74bc <__aeabi_ddiv+0x1dc>)
    73ac:	2100      	movs	r1, #0
    73ae:	0336      	lsls	r6, r6, #12
    73b0:	0d0c      	lsrs	r4, r1, #20
    73b2:	0524      	lsls	r4, r4, #20
    73b4:	0b36      	lsrs	r6, r6, #12
    73b6:	4326      	orrs	r6, r4
    73b8:	4c43      	ldr	r4, [pc, #268]	; (74c8 <__aeabi_ddiv+0x1e8>)
    73ba:	051b      	lsls	r3, r3, #20
    73bc:	4026      	ands	r6, r4
    73be:	431e      	orrs	r6, r3
    73c0:	0076      	lsls	r6, r6, #1
    73c2:	07d2      	lsls	r2, r2, #31
    73c4:	0876      	lsrs	r6, r6, #1
    73c6:	4316      	orrs	r6, r2
    73c8:	4648      	mov	r0, r9
    73ca:	0031      	movs	r1, r6
    73cc:	b007      	add	sp, #28
    73ce:	bc3c      	pop	{r2, r3, r4, r5}
    73d0:	4690      	mov	r8, r2
    73d2:	4699      	mov	r9, r3
    73d4:	46a2      	mov	sl, r4
    73d6:	46ab      	mov	fp, r5
    73d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    73da:	0033      	movs	r3, r6
    73dc:	4303      	orrs	r3, r0
    73de:	d04f      	beq.n	7480 <__aeabi_ddiv+0x1a0>
    73e0:	2e00      	cmp	r6, #0
    73e2:	d100      	bne.n	73e6 <__aeabi_ddiv+0x106>
    73e4:	e1bc      	b.n	7760 <__aeabi_ddiv+0x480>
    73e6:	0030      	movs	r0, r6
    73e8:	f001 fb1c 	bl	8a24 <__clzsi2>
    73ec:	0003      	movs	r3, r0
    73ee:	3b0b      	subs	r3, #11
    73f0:	2b1c      	cmp	r3, #28
    73f2:	dd00      	ble.n	73f6 <__aeabi_ddiv+0x116>
    73f4:	e1ad      	b.n	7752 <__aeabi_ddiv+0x472>
    73f6:	221d      	movs	r2, #29
    73f8:	0001      	movs	r1, r0
    73fa:	1ad3      	subs	r3, r2, r3
    73fc:	3908      	subs	r1, #8
    73fe:	003a      	movs	r2, r7
    7400:	408f      	lsls	r7, r1
    7402:	408e      	lsls	r6, r1
    7404:	40da      	lsrs	r2, r3
    7406:	46b9      	mov	r9, r7
    7408:	4316      	orrs	r6, r2
    740a:	4b30      	ldr	r3, [pc, #192]	; (74cc <__aeabi_ddiv+0x1ec>)
    740c:	2700      	movs	r7, #0
    740e:	469c      	mov	ip, r3
    7410:	2300      	movs	r3, #0
    7412:	4460      	add	r0, ip
    7414:	4244      	negs	r4, r0
    7416:	9302      	str	r3, [sp, #8]
    7418:	e785      	b.n	7326 <__aeabi_ddiv+0x46>
    741a:	4653      	mov	r3, sl
    741c:	465a      	mov	r2, fp
    741e:	4313      	orrs	r3, r2
    7420:	d12c      	bne.n	747c <__aeabi_ddiv+0x19c>
    7422:	2300      	movs	r3, #0
    7424:	2100      	movs	r1, #0
    7426:	469b      	mov	fp, r3
    7428:	3302      	adds	r3, #2
    742a:	e797      	b.n	735c <__aeabi_ddiv+0x7c>
    742c:	430b      	orrs	r3, r1
    742e:	d020      	beq.n	7472 <__aeabi_ddiv+0x192>
    7430:	465b      	mov	r3, fp
    7432:	2b00      	cmp	r3, #0
    7434:	d100      	bne.n	7438 <__aeabi_ddiv+0x158>
    7436:	e19e      	b.n	7776 <__aeabi_ddiv+0x496>
    7438:	4658      	mov	r0, fp
    743a:	f001 faf3 	bl	8a24 <__clzsi2>
    743e:	0003      	movs	r3, r0
    7440:	3b0b      	subs	r3, #11
    7442:	2b1c      	cmp	r3, #28
    7444:	dd00      	ble.n	7448 <__aeabi_ddiv+0x168>
    7446:	e18f      	b.n	7768 <__aeabi_ddiv+0x488>
    7448:	0002      	movs	r2, r0
    744a:	4659      	mov	r1, fp
    744c:	3a08      	subs	r2, #8
    744e:	4091      	lsls	r1, r2
    7450:	468b      	mov	fp, r1
    7452:	211d      	movs	r1, #29
    7454:	1acb      	subs	r3, r1, r3
    7456:	4651      	mov	r1, sl
    7458:	40d9      	lsrs	r1, r3
    745a:	000b      	movs	r3, r1
    745c:	4659      	mov	r1, fp
    745e:	430b      	orrs	r3, r1
    7460:	4651      	mov	r1, sl
    7462:	469b      	mov	fp, r3
    7464:	4091      	lsls	r1, r2
    7466:	4b19      	ldr	r3, [pc, #100]	; (74cc <__aeabi_ddiv+0x1ec>)
    7468:	469c      	mov	ip, r3
    746a:	4460      	add	r0, ip
    746c:	4240      	negs	r0, r0
    746e:	2300      	movs	r3, #0
    7470:	e774      	b.n	735c <__aeabi_ddiv+0x7c>
    7472:	2300      	movs	r3, #0
    7474:	2100      	movs	r1, #0
    7476:	469b      	mov	fp, r3
    7478:	3301      	adds	r3, #1
    747a:	e76f      	b.n	735c <__aeabi_ddiv+0x7c>
    747c:	2303      	movs	r3, #3
    747e:	e76d      	b.n	735c <__aeabi_ddiv+0x7c>
    7480:	2300      	movs	r3, #0
    7482:	4699      	mov	r9, r3
    7484:	3301      	adds	r3, #1
    7486:	2704      	movs	r7, #4
    7488:	2600      	movs	r6, #0
    748a:	9302      	str	r3, [sp, #8]
    748c:	e74b      	b.n	7326 <__aeabi_ddiv+0x46>
    748e:	2303      	movs	r3, #3
    7490:	270c      	movs	r7, #12
    7492:	9302      	str	r3, [sp, #8]
    7494:	e747      	b.n	7326 <__aeabi_ddiv+0x46>
    7496:	2201      	movs	r2, #1
    7498:	1ad5      	subs	r5, r2, r3
    749a:	2d38      	cmp	r5, #56	; 0x38
    749c:	dc00      	bgt.n	74a0 <__aeabi_ddiv+0x1c0>
    749e:	e1b0      	b.n	7802 <__aeabi_ddiv+0x522>
    74a0:	4653      	mov	r3, sl
    74a2:	401a      	ands	r2, r3
    74a4:	2100      	movs	r1, #0
    74a6:	2300      	movs	r3, #0
    74a8:	2600      	movs	r6, #0
    74aa:	4689      	mov	r9, r1
    74ac:	e77e      	b.n	73ac <__aeabi_ddiv+0xcc>
    74ae:	2300      	movs	r3, #0
    74b0:	2680      	movs	r6, #128	; 0x80
    74b2:	4699      	mov	r9, r3
    74b4:	2200      	movs	r2, #0
    74b6:	0336      	lsls	r6, r6, #12
    74b8:	4b00      	ldr	r3, [pc, #0]	; (74bc <__aeabi_ddiv+0x1dc>)
    74ba:	e777      	b.n	73ac <__aeabi_ddiv+0xcc>
    74bc:	000007ff 	.word	0x000007ff
    74c0:	fffffc01 	.word	0xfffffc01
    74c4:	00008e48 	.word	0x00008e48
    74c8:	800fffff 	.word	0x800fffff
    74cc:	000003f3 	.word	0x000003f3
    74d0:	455e      	cmp	r6, fp
    74d2:	d900      	bls.n	74d6 <__aeabi_ddiv+0x1f6>
    74d4:	e172      	b.n	77bc <__aeabi_ddiv+0x4dc>
    74d6:	d100      	bne.n	74da <__aeabi_ddiv+0x1fa>
    74d8:	e16d      	b.n	77b6 <__aeabi_ddiv+0x4d6>
    74da:	9b01      	ldr	r3, [sp, #4]
    74dc:	464d      	mov	r5, r9
    74de:	3b01      	subs	r3, #1
    74e0:	9301      	str	r3, [sp, #4]
    74e2:	2300      	movs	r3, #0
    74e4:	0034      	movs	r4, r6
    74e6:	9302      	str	r3, [sp, #8]
    74e8:	465b      	mov	r3, fp
    74ea:	021e      	lsls	r6, r3, #8
    74ec:	0e0b      	lsrs	r3, r1, #24
    74ee:	431e      	orrs	r6, r3
    74f0:	020b      	lsls	r3, r1, #8
    74f2:	9303      	str	r3, [sp, #12]
    74f4:	0c33      	lsrs	r3, r6, #16
    74f6:	4699      	mov	r9, r3
    74f8:	0433      	lsls	r3, r6, #16
    74fa:	0c1b      	lsrs	r3, r3, #16
    74fc:	4649      	mov	r1, r9
    74fe:	0020      	movs	r0, r4
    7500:	9300      	str	r3, [sp, #0]
    7502:	f7fe fd0b 	bl	5f1c <__aeabi_uidiv>
    7506:	9b00      	ldr	r3, [sp, #0]
    7508:	0037      	movs	r7, r6
    750a:	4343      	muls	r3, r0
    750c:	0006      	movs	r6, r0
    750e:	4649      	mov	r1, r9
    7510:	0020      	movs	r0, r4
    7512:	4698      	mov	r8, r3
    7514:	f7fe fd88 	bl	6028 <__aeabi_uidivmod>
    7518:	0c2c      	lsrs	r4, r5, #16
    751a:	0409      	lsls	r1, r1, #16
    751c:	430c      	orrs	r4, r1
    751e:	45a0      	cmp	r8, r4
    7520:	d909      	bls.n	7536 <__aeabi_ddiv+0x256>
    7522:	19e4      	adds	r4, r4, r7
    7524:	1e73      	subs	r3, r6, #1
    7526:	42a7      	cmp	r7, r4
    7528:	d900      	bls.n	752c <__aeabi_ddiv+0x24c>
    752a:	e15c      	b.n	77e6 <__aeabi_ddiv+0x506>
    752c:	45a0      	cmp	r8, r4
    752e:	d800      	bhi.n	7532 <__aeabi_ddiv+0x252>
    7530:	e159      	b.n	77e6 <__aeabi_ddiv+0x506>
    7532:	3e02      	subs	r6, #2
    7534:	19e4      	adds	r4, r4, r7
    7536:	4643      	mov	r3, r8
    7538:	1ae4      	subs	r4, r4, r3
    753a:	4649      	mov	r1, r9
    753c:	0020      	movs	r0, r4
    753e:	f7fe fced 	bl	5f1c <__aeabi_uidiv>
    7542:	0003      	movs	r3, r0
    7544:	9a00      	ldr	r2, [sp, #0]
    7546:	4680      	mov	r8, r0
    7548:	4353      	muls	r3, r2
    754a:	4649      	mov	r1, r9
    754c:	0020      	movs	r0, r4
    754e:	469b      	mov	fp, r3
    7550:	f7fe fd6a 	bl	6028 <__aeabi_uidivmod>
    7554:	042a      	lsls	r2, r5, #16
    7556:	0409      	lsls	r1, r1, #16
    7558:	0c12      	lsrs	r2, r2, #16
    755a:	430a      	orrs	r2, r1
    755c:	4593      	cmp	fp, r2
    755e:	d90d      	bls.n	757c <__aeabi_ddiv+0x29c>
    7560:	4643      	mov	r3, r8
    7562:	19d2      	adds	r2, r2, r7
    7564:	3b01      	subs	r3, #1
    7566:	4297      	cmp	r7, r2
    7568:	d900      	bls.n	756c <__aeabi_ddiv+0x28c>
    756a:	e13a      	b.n	77e2 <__aeabi_ddiv+0x502>
    756c:	4593      	cmp	fp, r2
    756e:	d800      	bhi.n	7572 <__aeabi_ddiv+0x292>
    7570:	e137      	b.n	77e2 <__aeabi_ddiv+0x502>
    7572:	2302      	movs	r3, #2
    7574:	425b      	negs	r3, r3
    7576:	469c      	mov	ip, r3
    7578:	19d2      	adds	r2, r2, r7
    757a:	44e0      	add	r8, ip
    757c:	465b      	mov	r3, fp
    757e:	1ad2      	subs	r2, r2, r3
    7580:	4643      	mov	r3, r8
    7582:	0436      	lsls	r6, r6, #16
    7584:	4333      	orrs	r3, r6
    7586:	469b      	mov	fp, r3
    7588:	9903      	ldr	r1, [sp, #12]
    758a:	0c18      	lsrs	r0, r3, #16
    758c:	0c0b      	lsrs	r3, r1, #16
    758e:	001d      	movs	r5, r3
    7590:	9305      	str	r3, [sp, #20]
    7592:	0409      	lsls	r1, r1, #16
    7594:	465b      	mov	r3, fp
    7596:	0c09      	lsrs	r1, r1, #16
    7598:	000c      	movs	r4, r1
    759a:	041b      	lsls	r3, r3, #16
    759c:	0c1b      	lsrs	r3, r3, #16
    759e:	4344      	muls	r4, r0
    75a0:	9104      	str	r1, [sp, #16]
    75a2:	4359      	muls	r1, r3
    75a4:	436b      	muls	r3, r5
    75a6:	4368      	muls	r0, r5
    75a8:	191b      	adds	r3, r3, r4
    75aa:	0c0d      	lsrs	r5, r1, #16
    75ac:	18eb      	adds	r3, r5, r3
    75ae:	429c      	cmp	r4, r3
    75b0:	d903      	bls.n	75ba <__aeabi_ddiv+0x2da>
    75b2:	2480      	movs	r4, #128	; 0x80
    75b4:	0264      	lsls	r4, r4, #9
    75b6:	46a4      	mov	ip, r4
    75b8:	4460      	add	r0, ip
    75ba:	0c1c      	lsrs	r4, r3, #16
    75bc:	0409      	lsls	r1, r1, #16
    75be:	041b      	lsls	r3, r3, #16
    75c0:	0c09      	lsrs	r1, r1, #16
    75c2:	1820      	adds	r0, r4, r0
    75c4:	185d      	adds	r5, r3, r1
    75c6:	4282      	cmp	r2, r0
    75c8:	d200      	bcs.n	75cc <__aeabi_ddiv+0x2ec>
    75ca:	e0de      	b.n	778a <__aeabi_ddiv+0x4aa>
    75cc:	d100      	bne.n	75d0 <__aeabi_ddiv+0x2f0>
    75ce:	e0d7      	b.n	7780 <__aeabi_ddiv+0x4a0>
    75d0:	1a16      	subs	r6, r2, r0
    75d2:	9b02      	ldr	r3, [sp, #8]
    75d4:	469c      	mov	ip, r3
    75d6:	1b5d      	subs	r5, r3, r5
    75d8:	45ac      	cmp	ip, r5
    75da:	419b      	sbcs	r3, r3
    75dc:	425b      	negs	r3, r3
    75de:	1af6      	subs	r6, r6, r3
    75e0:	42b7      	cmp	r7, r6
    75e2:	d100      	bne.n	75e6 <__aeabi_ddiv+0x306>
    75e4:	e106      	b.n	77f4 <__aeabi_ddiv+0x514>
    75e6:	4649      	mov	r1, r9
    75e8:	0030      	movs	r0, r6
    75ea:	f7fe fc97 	bl	5f1c <__aeabi_uidiv>
    75ee:	9b00      	ldr	r3, [sp, #0]
    75f0:	0004      	movs	r4, r0
    75f2:	4343      	muls	r3, r0
    75f4:	4649      	mov	r1, r9
    75f6:	0030      	movs	r0, r6
    75f8:	4698      	mov	r8, r3
    75fa:	f7fe fd15 	bl	6028 <__aeabi_uidivmod>
    75fe:	0c2e      	lsrs	r6, r5, #16
    7600:	0409      	lsls	r1, r1, #16
    7602:	430e      	orrs	r6, r1
    7604:	45b0      	cmp	r8, r6
    7606:	d909      	bls.n	761c <__aeabi_ddiv+0x33c>
    7608:	19f6      	adds	r6, r6, r7
    760a:	1e63      	subs	r3, r4, #1
    760c:	42b7      	cmp	r7, r6
    760e:	d900      	bls.n	7612 <__aeabi_ddiv+0x332>
    7610:	e0f3      	b.n	77fa <__aeabi_ddiv+0x51a>
    7612:	45b0      	cmp	r8, r6
    7614:	d800      	bhi.n	7618 <__aeabi_ddiv+0x338>
    7616:	e0f0      	b.n	77fa <__aeabi_ddiv+0x51a>
    7618:	3c02      	subs	r4, #2
    761a:	19f6      	adds	r6, r6, r7
    761c:	4643      	mov	r3, r8
    761e:	1af3      	subs	r3, r6, r3
    7620:	4649      	mov	r1, r9
    7622:	0018      	movs	r0, r3
    7624:	9302      	str	r3, [sp, #8]
    7626:	f7fe fc79 	bl	5f1c <__aeabi_uidiv>
    762a:	9b00      	ldr	r3, [sp, #0]
    762c:	0006      	movs	r6, r0
    762e:	4343      	muls	r3, r0
    7630:	4649      	mov	r1, r9
    7632:	9802      	ldr	r0, [sp, #8]
    7634:	4698      	mov	r8, r3
    7636:	f7fe fcf7 	bl	6028 <__aeabi_uidivmod>
    763a:	042d      	lsls	r5, r5, #16
    763c:	0409      	lsls	r1, r1, #16
    763e:	0c2d      	lsrs	r5, r5, #16
    7640:	430d      	orrs	r5, r1
    7642:	45a8      	cmp	r8, r5
    7644:	d909      	bls.n	765a <__aeabi_ddiv+0x37a>
    7646:	19ed      	adds	r5, r5, r7
    7648:	1e73      	subs	r3, r6, #1
    764a:	42af      	cmp	r7, r5
    764c:	d900      	bls.n	7650 <__aeabi_ddiv+0x370>
    764e:	e0d6      	b.n	77fe <__aeabi_ddiv+0x51e>
    7650:	45a8      	cmp	r8, r5
    7652:	d800      	bhi.n	7656 <__aeabi_ddiv+0x376>
    7654:	e0d3      	b.n	77fe <__aeabi_ddiv+0x51e>
    7656:	3e02      	subs	r6, #2
    7658:	19ed      	adds	r5, r5, r7
    765a:	0424      	lsls	r4, r4, #16
    765c:	0021      	movs	r1, r4
    765e:	4643      	mov	r3, r8
    7660:	4331      	orrs	r1, r6
    7662:	9e04      	ldr	r6, [sp, #16]
    7664:	9a05      	ldr	r2, [sp, #20]
    7666:	0030      	movs	r0, r6
    7668:	1aed      	subs	r5, r5, r3
    766a:	040b      	lsls	r3, r1, #16
    766c:	0c0c      	lsrs	r4, r1, #16
    766e:	0c1b      	lsrs	r3, r3, #16
    7670:	4358      	muls	r0, r3
    7672:	4366      	muls	r6, r4
    7674:	4353      	muls	r3, r2
    7676:	4354      	muls	r4, r2
    7678:	199a      	adds	r2, r3, r6
    767a:	0c03      	lsrs	r3, r0, #16
    767c:	189b      	adds	r3, r3, r2
    767e:	429e      	cmp	r6, r3
    7680:	d903      	bls.n	768a <__aeabi_ddiv+0x3aa>
    7682:	2280      	movs	r2, #128	; 0x80
    7684:	0252      	lsls	r2, r2, #9
    7686:	4694      	mov	ip, r2
    7688:	4464      	add	r4, ip
    768a:	0c1a      	lsrs	r2, r3, #16
    768c:	0400      	lsls	r0, r0, #16
    768e:	041b      	lsls	r3, r3, #16
    7690:	0c00      	lsrs	r0, r0, #16
    7692:	1914      	adds	r4, r2, r4
    7694:	181b      	adds	r3, r3, r0
    7696:	42a5      	cmp	r5, r4
    7698:	d350      	bcc.n	773c <__aeabi_ddiv+0x45c>
    769a:	d04d      	beq.n	7738 <__aeabi_ddiv+0x458>
    769c:	2301      	movs	r3, #1
    769e:	4319      	orrs	r1, r3
    76a0:	4a96      	ldr	r2, [pc, #600]	; (78fc <__aeabi_ddiv+0x61c>)
    76a2:	9b01      	ldr	r3, [sp, #4]
    76a4:	4694      	mov	ip, r2
    76a6:	4463      	add	r3, ip
    76a8:	2b00      	cmp	r3, #0
    76aa:	dc00      	bgt.n	76ae <__aeabi_ddiv+0x3ce>
    76ac:	e6f3      	b.n	7496 <__aeabi_ddiv+0x1b6>
    76ae:	074a      	lsls	r2, r1, #29
    76b0:	d009      	beq.n	76c6 <__aeabi_ddiv+0x3e6>
    76b2:	220f      	movs	r2, #15
    76b4:	400a      	ands	r2, r1
    76b6:	2a04      	cmp	r2, #4
    76b8:	d005      	beq.n	76c6 <__aeabi_ddiv+0x3e6>
    76ba:	1d0a      	adds	r2, r1, #4
    76bc:	428a      	cmp	r2, r1
    76be:	4189      	sbcs	r1, r1
    76c0:	4249      	negs	r1, r1
    76c2:	448b      	add	fp, r1
    76c4:	0011      	movs	r1, r2
    76c6:	465a      	mov	r2, fp
    76c8:	01d2      	lsls	r2, r2, #7
    76ca:	d508      	bpl.n	76de <__aeabi_ddiv+0x3fe>
    76cc:	465a      	mov	r2, fp
    76ce:	4b8c      	ldr	r3, [pc, #560]	; (7900 <__aeabi_ddiv+0x620>)
    76d0:	401a      	ands	r2, r3
    76d2:	4693      	mov	fp, r2
    76d4:	2280      	movs	r2, #128	; 0x80
    76d6:	00d2      	lsls	r2, r2, #3
    76d8:	4694      	mov	ip, r2
    76da:	9b01      	ldr	r3, [sp, #4]
    76dc:	4463      	add	r3, ip
    76de:	4a89      	ldr	r2, [pc, #548]	; (7904 <__aeabi_ddiv+0x624>)
    76e0:	4293      	cmp	r3, r2
    76e2:	dd00      	ble.n	76e6 <__aeabi_ddiv+0x406>
    76e4:	e65b      	b.n	739e <__aeabi_ddiv+0xbe>
    76e6:	465a      	mov	r2, fp
    76e8:	08c9      	lsrs	r1, r1, #3
    76ea:	0750      	lsls	r0, r2, #29
    76ec:	4308      	orrs	r0, r1
    76ee:	0256      	lsls	r6, r2, #9
    76f0:	4651      	mov	r1, sl
    76f2:	2201      	movs	r2, #1
    76f4:	055b      	lsls	r3, r3, #21
    76f6:	4681      	mov	r9, r0
    76f8:	0b36      	lsrs	r6, r6, #12
    76fa:	0d5b      	lsrs	r3, r3, #21
    76fc:	400a      	ands	r2, r1
    76fe:	e655      	b.n	73ac <__aeabi_ddiv+0xcc>
    7700:	2380      	movs	r3, #128	; 0x80
    7702:	031b      	lsls	r3, r3, #12
    7704:	421e      	tst	r6, r3
    7706:	d011      	beq.n	772c <__aeabi_ddiv+0x44c>
    7708:	465a      	mov	r2, fp
    770a:	421a      	tst	r2, r3
    770c:	d10e      	bne.n	772c <__aeabi_ddiv+0x44c>
    770e:	465e      	mov	r6, fp
    7710:	431e      	orrs	r6, r3
    7712:	0336      	lsls	r6, r6, #12
    7714:	0b36      	lsrs	r6, r6, #12
    7716:	002a      	movs	r2, r5
    7718:	4689      	mov	r9, r1
    771a:	4b7b      	ldr	r3, [pc, #492]	; (7908 <__aeabi_ddiv+0x628>)
    771c:	e646      	b.n	73ac <__aeabi_ddiv+0xcc>
    771e:	2b03      	cmp	r3, #3
    7720:	d100      	bne.n	7724 <__aeabi_ddiv+0x444>
    7722:	e0e1      	b.n	78e8 <__aeabi_ddiv+0x608>
    7724:	2b01      	cmp	r3, #1
    7726:	d1bb      	bne.n	76a0 <__aeabi_ddiv+0x3c0>
    7728:	401a      	ands	r2, r3
    772a:	e6bb      	b.n	74a4 <__aeabi_ddiv+0x1c4>
    772c:	431e      	orrs	r6, r3
    772e:	0336      	lsls	r6, r6, #12
    7730:	0b36      	lsrs	r6, r6, #12
    7732:	4642      	mov	r2, r8
    7734:	4b74      	ldr	r3, [pc, #464]	; (7908 <__aeabi_ddiv+0x628>)
    7736:	e639      	b.n	73ac <__aeabi_ddiv+0xcc>
    7738:	2b00      	cmp	r3, #0
    773a:	d0b1      	beq.n	76a0 <__aeabi_ddiv+0x3c0>
    773c:	197d      	adds	r5, r7, r5
    773e:	1e4a      	subs	r2, r1, #1
    7740:	42af      	cmp	r7, r5
    7742:	d952      	bls.n	77ea <__aeabi_ddiv+0x50a>
    7744:	0011      	movs	r1, r2
    7746:	42a5      	cmp	r5, r4
    7748:	d1a8      	bne.n	769c <__aeabi_ddiv+0x3bc>
    774a:	9a03      	ldr	r2, [sp, #12]
    774c:	429a      	cmp	r2, r3
    774e:	d1a5      	bne.n	769c <__aeabi_ddiv+0x3bc>
    7750:	e7a6      	b.n	76a0 <__aeabi_ddiv+0x3c0>
    7752:	0003      	movs	r3, r0
    7754:	003e      	movs	r6, r7
    7756:	3b28      	subs	r3, #40	; 0x28
    7758:	409e      	lsls	r6, r3
    775a:	2300      	movs	r3, #0
    775c:	4699      	mov	r9, r3
    775e:	e654      	b.n	740a <__aeabi_ddiv+0x12a>
    7760:	f001 f960 	bl	8a24 <__clzsi2>
    7764:	3020      	adds	r0, #32
    7766:	e641      	b.n	73ec <__aeabi_ddiv+0x10c>
    7768:	0003      	movs	r3, r0
    776a:	4652      	mov	r2, sl
    776c:	3b28      	subs	r3, #40	; 0x28
    776e:	409a      	lsls	r2, r3
    7770:	2100      	movs	r1, #0
    7772:	4693      	mov	fp, r2
    7774:	e677      	b.n	7466 <__aeabi_ddiv+0x186>
    7776:	4650      	mov	r0, sl
    7778:	f001 f954 	bl	8a24 <__clzsi2>
    777c:	3020      	adds	r0, #32
    777e:	e65e      	b.n	743e <__aeabi_ddiv+0x15e>
    7780:	9b02      	ldr	r3, [sp, #8]
    7782:	2600      	movs	r6, #0
    7784:	42ab      	cmp	r3, r5
    7786:	d300      	bcc.n	778a <__aeabi_ddiv+0x4aa>
    7788:	e723      	b.n	75d2 <__aeabi_ddiv+0x2f2>
    778a:	9e03      	ldr	r6, [sp, #12]
    778c:	9902      	ldr	r1, [sp, #8]
    778e:	46b4      	mov	ip, r6
    7790:	4461      	add	r1, ip
    7792:	4688      	mov	r8, r1
    7794:	45b0      	cmp	r8, r6
    7796:	41b6      	sbcs	r6, r6
    7798:	465b      	mov	r3, fp
    779a:	4276      	negs	r6, r6
    779c:	19f6      	adds	r6, r6, r7
    779e:	18b2      	adds	r2, r6, r2
    77a0:	3b01      	subs	r3, #1
    77a2:	9102      	str	r1, [sp, #8]
    77a4:	4297      	cmp	r7, r2
    77a6:	d213      	bcs.n	77d0 <__aeabi_ddiv+0x4f0>
    77a8:	4290      	cmp	r0, r2
    77aa:	d84f      	bhi.n	784c <__aeabi_ddiv+0x56c>
    77ac:	d100      	bne.n	77b0 <__aeabi_ddiv+0x4d0>
    77ae:	e08e      	b.n	78ce <__aeabi_ddiv+0x5ee>
    77b0:	1a16      	subs	r6, r2, r0
    77b2:	469b      	mov	fp, r3
    77b4:	e70d      	b.n	75d2 <__aeabi_ddiv+0x2f2>
    77b6:	4589      	cmp	r9, r1
    77b8:	d200      	bcs.n	77bc <__aeabi_ddiv+0x4dc>
    77ba:	e68e      	b.n	74da <__aeabi_ddiv+0x1fa>
    77bc:	0874      	lsrs	r4, r6, #1
    77be:	464b      	mov	r3, r9
    77c0:	07f6      	lsls	r6, r6, #31
    77c2:	0035      	movs	r5, r6
    77c4:	085b      	lsrs	r3, r3, #1
    77c6:	431d      	orrs	r5, r3
    77c8:	464b      	mov	r3, r9
    77ca:	07db      	lsls	r3, r3, #31
    77cc:	9302      	str	r3, [sp, #8]
    77ce:	e68b      	b.n	74e8 <__aeabi_ddiv+0x208>
    77d0:	4297      	cmp	r7, r2
    77d2:	d1ed      	bne.n	77b0 <__aeabi_ddiv+0x4d0>
    77d4:	9903      	ldr	r1, [sp, #12]
    77d6:	9c02      	ldr	r4, [sp, #8]
    77d8:	42a1      	cmp	r1, r4
    77da:	d9e5      	bls.n	77a8 <__aeabi_ddiv+0x4c8>
    77dc:	1a3e      	subs	r6, r7, r0
    77de:	469b      	mov	fp, r3
    77e0:	e6f7      	b.n	75d2 <__aeabi_ddiv+0x2f2>
    77e2:	4698      	mov	r8, r3
    77e4:	e6ca      	b.n	757c <__aeabi_ddiv+0x29c>
    77e6:	001e      	movs	r6, r3
    77e8:	e6a5      	b.n	7536 <__aeabi_ddiv+0x256>
    77ea:	42ac      	cmp	r4, r5
    77ec:	d83e      	bhi.n	786c <__aeabi_ddiv+0x58c>
    77ee:	d074      	beq.n	78da <__aeabi_ddiv+0x5fa>
    77f0:	0011      	movs	r1, r2
    77f2:	e753      	b.n	769c <__aeabi_ddiv+0x3bc>
    77f4:	2101      	movs	r1, #1
    77f6:	4249      	negs	r1, r1
    77f8:	e752      	b.n	76a0 <__aeabi_ddiv+0x3c0>
    77fa:	001c      	movs	r4, r3
    77fc:	e70e      	b.n	761c <__aeabi_ddiv+0x33c>
    77fe:	001e      	movs	r6, r3
    7800:	e72b      	b.n	765a <__aeabi_ddiv+0x37a>
    7802:	2d1f      	cmp	r5, #31
    7804:	dc3c      	bgt.n	7880 <__aeabi_ddiv+0x5a0>
    7806:	2320      	movs	r3, #32
    7808:	000a      	movs	r2, r1
    780a:	4658      	mov	r0, fp
    780c:	1b5b      	subs	r3, r3, r5
    780e:	4098      	lsls	r0, r3
    7810:	40ea      	lsrs	r2, r5
    7812:	4099      	lsls	r1, r3
    7814:	4302      	orrs	r2, r0
    7816:	1e48      	subs	r0, r1, #1
    7818:	4181      	sbcs	r1, r0
    781a:	465e      	mov	r6, fp
    781c:	4311      	orrs	r1, r2
    781e:	40ee      	lsrs	r6, r5
    7820:	074b      	lsls	r3, r1, #29
    7822:	d009      	beq.n	7838 <__aeabi_ddiv+0x558>
    7824:	230f      	movs	r3, #15
    7826:	400b      	ands	r3, r1
    7828:	2b04      	cmp	r3, #4
    782a:	d005      	beq.n	7838 <__aeabi_ddiv+0x558>
    782c:	000b      	movs	r3, r1
    782e:	1d19      	adds	r1, r3, #4
    7830:	4299      	cmp	r1, r3
    7832:	419b      	sbcs	r3, r3
    7834:	425b      	negs	r3, r3
    7836:	18f6      	adds	r6, r6, r3
    7838:	0233      	lsls	r3, r6, #8
    783a:	d53c      	bpl.n	78b6 <__aeabi_ddiv+0x5d6>
    783c:	4653      	mov	r3, sl
    783e:	2201      	movs	r2, #1
    7840:	2100      	movs	r1, #0
    7842:	401a      	ands	r2, r3
    7844:	2600      	movs	r6, #0
    7846:	2301      	movs	r3, #1
    7848:	4689      	mov	r9, r1
    784a:	e5af      	b.n	73ac <__aeabi_ddiv+0xcc>
    784c:	2302      	movs	r3, #2
    784e:	425b      	negs	r3, r3
    7850:	469c      	mov	ip, r3
    7852:	9c03      	ldr	r4, [sp, #12]
    7854:	44e3      	add	fp, ip
    7856:	46a4      	mov	ip, r4
    7858:	9b02      	ldr	r3, [sp, #8]
    785a:	4463      	add	r3, ip
    785c:	4698      	mov	r8, r3
    785e:	45a0      	cmp	r8, r4
    7860:	41b6      	sbcs	r6, r6
    7862:	4276      	negs	r6, r6
    7864:	19f6      	adds	r6, r6, r7
    7866:	9302      	str	r3, [sp, #8]
    7868:	18b2      	adds	r2, r6, r2
    786a:	e6b1      	b.n	75d0 <__aeabi_ddiv+0x2f0>
    786c:	9803      	ldr	r0, [sp, #12]
    786e:	1e8a      	subs	r2, r1, #2
    7870:	0041      	lsls	r1, r0, #1
    7872:	4281      	cmp	r1, r0
    7874:	41b6      	sbcs	r6, r6
    7876:	4276      	negs	r6, r6
    7878:	19f6      	adds	r6, r6, r7
    787a:	19ad      	adds	r5, r5, r6
    787c:	9103      	str	r1, [sp, #12]
    787e:	e761      	b.n	7744 <__aeabi_ddiv+0x464>
    7880:	221f      	movs	r2, #31
    7882:	4252      	negs	r2, r2
    7884:	1ad3      	subs	r3, r2, r3
    7886:	465a      	mov	r2, fp
    7888:	40da      	lsrs	r2, r3
    788a:	0013      	movs	r3, r2
    788c:	2d20      	cmp	r5, #32
    788e:	d029      	beq.n	78e4 <__aeabi_ddiv+0x604>
    7890:	2240      	movs	r2, #64	; 0x40
    7892:	4658      	mov	r0, fp
    7894:	1b55      	subs	r5, r2, r5
    7896:	40a8      	lsls	r0, r5
    7898:	4301      	orrs	r1, r0
    789a:	1e48      	subs	r0, r1, #1
    789c:	4181      	sbcs	r1, r0
    789e:	2007      	movs	r0, #7
    78a0:	430b      	orrs	r3, r1
    78a2:	4018      	ands	r0, r3
    78a4:	2600      	movs	r6, #0
    78a6:	2800      	cmp	r0, #0
    78a8:	d009      	beq.n	78be <__aeabi_ddiv+0x5de>
    78aa:	220f      	movs	r2, #15
    78ac:	2600      	movs	r6, #0
    78ae:	401a      	ands	r2, r3
    78b0:	0019      	movs	r1, r3
    78b2:	2a04      	cmp	r2, #4
    78b4:	d1bb      	bne.n	782e <__aeabi_ddiv+0x54e>
    78b6:	000b      	movs	r3, r1
    78b8:	0770      	lsls	r0, r6, #29
    78ba:	0276      	lsls	r6, r6, #9
    78bc:	0b36      	lsrs	r6, r6, #12
    78be:	08db      	lsrs	r3, r3, #3
    78c0:	4303      	orrs	r3, r0
    78c2:	4699      	mov	r9, r3
    78c4:	2201      	movs	r2, #1
    78c6:	4653      	mov	r3, sl
    78c8:	401a      	ands	r2, r3
    78ca:	2300      	movs	r3, #0
    78cc:	e56e      	b.n	73ac <__aeabi_ddiv+0xcc>
    78ce:	9902      	ldr	r1, [sp, #8]
    78d0:	428d      	cmp	r5, r1
    78d2:	d8bb      	bhi.n	784c <__aeabi_ddiv+0x56c>
    78d4:	469b      	mov	fp, r3
    78d6:	2600      	movs	r6, #0
    78d8:	e67b      	b.n	75d2 <__aeabi_ddiv+0x2f2>
    78da:	9803      	ldr	r0, [sp, #12]
    78dc:	4298      	cmp	r0, r3
    78de:	d3c5      	bcc.n	786c <__aeabi_ddiv+0x58c>
    78e0:	0011      	movs	r1, r2
    78e2:	e732      	b.n	774a <__aeabi_ddiv+0x46a>
    78e4:	2000      	movs	r0, #0
    78e6:	e7d7      	b.n	7898 <__aeabi_ddiv+0x5b8>
    78e8:	2680      	movs	r6, #128	; 0x80
    78ea:	465b      	mov	r3, fp
    78ec:	0336      	lsls	r6, r6, #12
    78ee:	431e      	orrs	r6, r3
    78f0:	0336      	lsls	r6, r6, #12
    78f2:	0b36      	lsrs	r6, r6, #12
    78f4:	9a00      	ldr	r2, [sp, #0]
    78f6:	4689      	mov	r9, r1
    78f8:	4b03      	ldr	r3, [pc, #12]	; (7908 <__aeabi_ddiv+0x628>)
    78fa:	e557      	b.n	73ac <__aeabi_ddiv+0xcc>
    78fc:	000003ff 	.word	0x000003ff
    7900:	feffffff 	.word	0xfeffffff
    7904:	000007fe 	.word	0x000007fe
    7908:	000007ff 	.word	0x000007ff

0000790c <__eqdf2>:
    790c:	b5f0      	push	{r4, r5, r6, r7, lr}
    790e:	465f      	mov	r7, fp
    7910:	4656      	mov	r6, sl
    7912:	464d      	mov	r5, r9
    7914:	4644      	mov	r4, r8
    7916:	b4f0      	push	{r4, r5, r6, r7}
    7918:	031f      	lsls	r7, r3, #12
    791a:	005c      	lsls	r4, r3, #1
    791c:	0fdb      	lsrs	r3, r3, #31
    791e:	469a      	mov	sl, r3
    7920:	4b19      	ldr	r3, [pc, #100]	; (7988 <__eqdf2+0x7c>)
    7922:	030e      	lsls	r6, r1, #12
    7924:	004d      	lsls	r5, r1, #1
    7926:	0fc9      	lsrs	r1, r1, #31
    7928:	4680      	mov	r8, r0
    792a:	0b36      	lsrs	r6, r6, #12
    792c:	0d6d      	lsrs	r5, r5, #21
    792e:	468b      	mov	fp, r1
    7930:	4691      	mov	r9, r2
    7932:	0b3f      	lsrs	r7, r7, #12
    7934:	0d64      	lsrs	r4, r4, #21
    7936:	429d      	cmp	r5, r3
    7938:	d019      	beq.n	796e <__eqdf2+0x62>
    793a:	4b13      	ldr	r3, [pc, #76]	; (7988 <__eqdf2+0x7c>)
    793c:	429c      	cmp	r4, r3
    793e:	d01b      	beq.n	7978 <__eqdf2+0x6c>
    7940:	2301      	movs	r3, #1
    7942:	42a5      	cmp	r5, r4
    7944:	d006      	beq.n	7954 <__eqdf2+0x48>
    7946:	0018      	movs	r0, r3
    7948:	bc3c      	pop	{r2, r3, r4, r5}
    794a:	4690      	mov	r8, r2
    794c:	4699      	mov	r9, r3
    794e:	46a2      	mov	sl, r4
    7950:	46ab      	mov	fp, r5
    7952:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7954:	42be      	cmp	r6, r7
    7956:	d1f6      	bne.n	7946 <__eqdf2+0x3a>
    7958:	45c8      	cmp	r8, r9
    795a:	d1f4      	bne.n	7946 <__eqdf2+0x3a>
    795c:	45d3      	cmp	fp, sl
    795e:	d010      	beq.n	7982 <__eqdf2+0x76>
    7960:	2d00      	cmp	r5, #0
    7962:	d1f0      	bne.n	7946 <__eqdf2+0x3a>
    7964:	4330      	orrs	r0, r6
    7966:	0003      	movs	r3, r0
    7968:	1e5a      	subs	r2, r3, #1
    796a:	4193      	sbcs	r3, r2
    796c:	e7eb      	b.n	7946 <__eqdf2+0x3a>
    796e:	0031      	movs	r1, r6
    7970:	2301      	movs	r3, #1
    7972:	4301      	orrs	r1, r0
    7974:	d1e7      	bne.n	7946 <__eqdf2+0x3a>
    7976:	e7e0      	b.n	793a <__eqdf2+0x2e>
    7978:	433a      	orrs	r2, r7
    797a:	2301      	movs	r3, #1
    797c:	2a00      	cmp	r2, #0
    797e:	d1e2      	bne.n	7946 <__eqdf2+0x3a>
    7980:	e7de      	b.n	7940 <__eqdf2+0x34>
    7982:	2300      	movs	r3, #0
    7984:	e7df      	b.n	7946 <__eqdf2+0x3a>
    7986:	46c0      	nop			; (mov r8, r8)
    7988:	000007ff 	.word	0x000007ff

0000798c <__gedf2>:
    798c:	b5f0      	push	{r4, r5, r6, r7, lr}
    798e:	465f      	mov	r7, fp
    7990:	4644      	mov	r4, r8
    7992:	4656      	mov	r6, sl
    7994:	464d      	mov	r5, r9
    7996:	b4f0      	push	{r4, r5, r6, r7}
    7998:	031f      	lsls	r7, r3, #12
    799a:	0b3c      	lsrs	r4, r7, #12
    799c:	4f2c      	ldr	r7, [pc, #176]	; (7a50 <__gedf2+0xc4>)
    799e:	030e      	lsls	r6, r1, #12
    79a0:	004d      	lsls	r5, r1, #1
    79a2:	46a3      	mov	fp, r4
    79a4:	005c      	lsls	r4, r3, #1
    79a6:	4684      	mov	ip, r0
    79a8:	0b36      	lsrs	r6, r6, #12
    79aa:	0d6d      	lsrs	r5, r5, #21
    79ac:	0fc9      	lsrs	r1, r1, #31
    79ae:	4690      	mov	r8, r2
    79b0:	0d64      	lsrs	r4, r4, #21
    79b2:	0fdb      	lsrs	r3, r3, #31
    79b4:	42bd      	cmp	r5, r7
    79b6:	d02b      	beq.n	7a10 <__gedf2+0x84>
    79b8:	4f25      	ldr	r7, [pc, #148]	; (7a50 <__gedf2+0xc4>)
    79ba:	42bc      	cmp	r4, r7
    79bc:	d02e      	beq.n	7a1c <__gedf2+0x90>
    79be:	2d00      	cmp	r5, #0
    79c0:	d10e      	bne.n	79e0 <__gedf2+0x54>
    79c2:	4330      	orrs	r0, r6
    79c4:	0007      	movs	r7, r0
    79c6:	4681      	mov	r9, r0
    79c8:	4278      	negs	r0, r7
    79ca:	4178      	adcs	r0, r7
    79cc:	2c00      	cmp	r4, #0
    79ce:	d117      	bne.n	7a00 <__gedf2+0x74>
    79d0:	465f      	mov	r7, fp
    79d2:	433a      	orrs	r2, r7
    79d4:	d114      	bne.n	7a00 <__gedf2+0x74>
    79d6:	464b      	mov	r3, r9
    79d8:	2000      	movs	r0, #0
    79da:	2b00      	cmp	r3, #0
    79dc:	d00a      	beq.n	79f4 <__gedf2+0x68>
    79de:	e006      	b.n	79ee <__gedf2+0x62>
    79e0:	2c00      	cmp	r4, #0
    79e2:	d102      	bne.n	79ea <__gedf2+0x5e>
    79e4:	4658      	mov	r0, fp
    79e6:	4302      	orrs	r2, r0
    79e8:	d001      	beq.n	79ee <__gedf2+0x62>
    79ea:	4299      	cmp	r1, r3
    79ec:	d01a      	beq.n	7a24 <__gedf2+0x98>
    79ee:	2301      	movs	r3, #1
    79f0:	4248      	negs	r0, r1
    79f2:	4318      	orrs	r0, r3
    79f4:	bc3c      	pop	{r2, r3, r4, r5}
    79f6:	4690      	mov	r8, r2
    79f8:	4699      	mov	r9, r3
    79fa:	46a2      	mov	sl, r4
    79fc:	46ab      	mov	fp, r5
    79fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a00:	2800      	cmp	r0, #0
    7a02:	d0f2      	beq.n	79ea <__gedf2+0x5e>
    7a04:	4258      	negs	r0, r3
    7a06:	4158      	adcs	r0, r3
    7a08:	2201      	movs	r2, #1
    7a0a:	4240      	negs	r0, r0
    7a0c:	4310      	orrs	r0, r2
    7a0e:	e7f1      	b.n	79f4 <__gedf2+0x68>
    7a10:	0037      	movs	r7, r6
    7a12:	4307      	orrs	r7, r0
    7a14:	d0d0      	beq.n	79b8 <__gedf2+0x2c>
    7a16:	2002      	movs	r0, #2
    7a18:	4240      	negs	r0, r0
    7a1a:	e7eb      	b.n	79f4 <__gedf2+0x68>
    7a1c:	465f      	mov	r7, fp
    7a1e:	4317      	orrs	r7, r2
    7a20:	d0cd      	beq.n	79be <__gedf2+0x32>
    7a22:	e7f8      	b.n	7a16 <__gedf2+0x8a>
    7a24:	42a5      	cmp	r5, r4
    7a26:	dce2      	bgt.n	79ee <__gedf2+0x62>
    7a28:	db05      	blt.n	7a36 <__gedf2+0xaa>
    7a2a:	455e      	cmp	r6, fp
    7a2c:	d8df      	bhi.n	79ee <__gedf2+0x62>
    7a2e:	d008      	beq.n	7a42 <__gedf2+0xb6>
    7a30:	2000      	movs	r0, #0
    7a32:	455e      	cmp	r6, fp
    7a34:	d2de      	bcs.n	79f4 <__gedf2+0x68>
    7a36:	4248      	negs	r0, r1
    7a38:	4148      	adcs	r0, r1
    7a3a:	2301      	movs	r3, #1
    7a3c:	4240      	negs	r0, r0
    7a3e:	4318      	orrs	r0, r3
    7a40:	e7d8      	b.n	79f4 <__gedf2+0x68>
    7a42:	45c4      	cmp	ip, r8
    7a44:	d8d3      	bhi.n	79ee <__gedf2+0x62>
    7a46:	2000      	movs	r0, #0
    7a48:	45c4      	cmp	ip, r8
    7a4a:	d3f4      	bcc.n	7a36 <__gedf2+0xaa>
    7a4c:	e7d2      	b.n	79f4 <__gedf2+0x68>
    7a4e:	46c0      	nop			; (mov r8, r8)
    7a50:	000007ff 	.word	0x000007ff

00007a54 <__ledf2>:
    7a54:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a56:	465f      	mov	r7, fp
    7a58:	464d      	mov	r5, r9
    7a5a:	4644      	mov	r4, r8
    7a5c:	4656      	mov	r6, sl
    7a5e:	b4f0      	push	{r4, r5, r6, r7}
    7a60:	031c      	lsls	r4, r3, #12
    7a62:	0b24      	lsrs	r4, r4, #12
    7a64:	46a4      	mov	ip, r4
    7a66:	4c2f      	ldr	r4, [pc, #188]	; (7b24 <__ledf2+0xd0>)
    7a68:	030f      	lsls	r7, r1, #12
    7a6a:	004d      	lsls	r5, r1, #1
    7a6c:	005e      	lsls	r6, r3, #1
    7a6e:	0fc9      	lsrs	r1, r1, #31
    7a70:	4680      	mov	r8, r0
    7a72:	0b3f      	lsrs	r7, r7, #12
    7a74:	0d6d      	lsrs	r5, r5, #21
    7a76:	468b      	mov	fp, r1
    7a78:	4691      	mov	r9, r2
    7a7a:	0d76      	lsrs	r6, r6, #21
    7a7c:	0fdb      	lsrs	r3, r3, #31
    7a7e:	42a5      	cmp	r5, r4
    7a80:	d020      	beq.n	7ac4 <__ledf2+0x70>
    7a82:	4c28      	ldr	r4, [pc, #160]	; (7b24 <__ledf2+0xd0>)
    7a84:	42a6      	cmp	r6, r4
    7a86:	d022      	beq.n	7ace <__ledf2+0x7a>
    7a88:	2d00      	cmp	r5, #0
    7a8a:	d112      	bne.n	7ab2 <__ledf2+0x5e>
    7a8c:	4338      	orrs	r0, r7
    7a8e:	4244      	negs	r4, r0
    7a90:	4144      	adcs	r4, r0
    7a92:	2e00      	cmp	r6, #0
    7a94:	d020      	beq.n	7ad8 <__ledf2+0x84>
    7a96:	2c00      	cmp	r4, #0
    7a98:	d00d      	beq.n	7ab6 <__ledf2+0x62>
    7a9a:	425c      	negs	r4, r3
    7a9c:	4163      	adcs	r3, r4
    7a9e:	2401      	movs	r4, #1
    7aa0:	425b      	negs	r3, r3
    7aa2:	431c      	orrs	r4, r3
    7aa4:	0020      	movs	r0, r4
    7aa6:	bc3c      	pop	{r2, r3, r4, r5}
    7aa8:	4690      	mov	r8, r2
    7aaa:	4699      	mov	r9, r3
    7aac:	46a2      	mov	sl, r4
    7aae:	46ab      	mov	fp, r5
    7ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ab2:	2e00      	cmp	r6, #0
    7ab4:	d017      	beq.n	7ae6 <__ledf2+0x92>
    7ab6:	455b      	cmp	r3, fp
    7ab8:	d019      	beq.n	7aee <__ledf2+0x9a>
    7aba:	465b      	mov	r3, fp
    7abc:	425c      	negs	r4, r3
    7abe:	2301      	movs	r3, #1
    7ac0:	431c      	orrs	r4, r3
    7ac2:	e7ef      	b.n	7aa4 <__ledf2+0x50>
    7ac4:	0039      	movs	r1, r7
    7ac6:	2402      	movs	r4, #2
    7ac8:	4301      	orrs	r1, r0
    7aca:	d1eb      	bne.n	7aa4 <__ledf2+0x50>
    7acc:	e7d9      	b.n	7a82 <__ledf2+0x2e>
    7ace:	4661      	mov	r1, ip
    7ad0:	2402      	movs	r4, #2
    7ad2:	4311      	orrs	r1, r2
    7ad4:	d1e6      	bne.n	7aa4 <__ledf2+0x50>
    7ad6:	e7d7      	b.n	7a88 <__ledf2+0x34>
    7ad8:	4661      	mov	r1, ip
    7ada:	430a      	orrs	r2, r1
    7adc:	d1db      	bne.n	7a96 <__ledf2+0x42>
    7ade:	2400      	movs	r4, #0
    7ae0:	2800      	cmp	r0, #0
    7ae2:	d0df      	beq.n	7aa4 <__ledf2+0x50>
    7ae4:	e7e9      	b.n	7aba <__ledf2+0x66>
    7ae6:	4661      	mov	r1, ip
    7ae8:	430a      	orrs	r2, r1
    7aea:	d1e4      	bne.n	7ab6 <__ledf2+0x62>
    7aec:	e7e5      	b.n	7aba <__ledf2+0x66>
    7aee:	42b5      	cmp	r5, r6
    7af0:	dd03      	ble.n	7afa <__ledf2+0xa6>
    7af2:	2201      	movs	r2, #1
    7af4:	425c      	negs	r4, r3
    7af6:	4314      	orrs	r4, r2
    7af8:	e7d4      	b.n	7aa4 <__ledf2+0x50>
    7afa:	42b5      	cmp	r5, r6
    7afc:	dbcd      	blt.n	7a9a <__ledf2+0x46>
    7afe:	4567      	cmp	r7, ip
    7b00:	d8db      	bhi.n	7aba <__ledf2+0x66>
    7b02:	d009      	beq.n	7b18 <__ledf2+0xc4>
    7b04:	2400      	movs	r4, #0
    7b06:	4567      	cmp	r7, ip
    7b08:	d2cc      	bcs.n	7aa4 <__ledf2+0x50>
    7b0a:	4659      	mov	r1, fp
    7b0c:	424c      	negs	r4, r1
    7b0e:	4161      	adcs	r1, r4
    7b10:	2401      	movs	r4, #1
    7b12:	4249      	negs	r1, r1
    7b14:	430c      	orrs	r4, r1
    7b16:	e7c5      	b.n	7aa4 <__ledf2+0x50>
    7b18:	45c8      	cmp	r8, r9
    7b1a:	d8ce      	bhi.n	7aba <__ledf2+0x66>
    7b1c:	2400      	movs	r4, #0
    7b1e:	45c8      	cmp	r8, r9
    7b20:	d3f3      	bcc.n	7b0a <__ledf2+0xb6>
    7b22:	e7bf      	b.n	7aa4 <__ledf2+0x50>
    7b24:	000007ff 	.word	0x000007ff

00007b28 <__aeabi_dmul>:
    7b28:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b2a:	465f      	mov	r7, fp
    7b2c:	4656      	mov	r6, sl
    7b2e:	464d      	mov	r5, r9
    7b30:	4644      	mov	r4, r8
    7b32:	b4f0      	push	{r4, r5, r6, r7}
    7b34:	030d      	lsls	r5, r1, #12
    7b36:	4699      	mov	r9, r3
    7b38:	004e      	lsls	r6, r1, #1
    7b3a:	0b2b      	lsrs	r3, r5, #12
    7b3c:	b087      	sub	sp, #28
    7b3e:	0007      	movs	r7, r0
    7b40:	4692      	mov	sl, r2
    7b42:	4680      	mov	r8, r0
    7b44:	469b      	mov	fp, r3
    7b46:	0d76      	lsrs	r6, r6, #21
    7b48:	0fcc      	lsrs	r4, r1, #31
    7b4a:	2e00      	cmp	r6, #0
    7b4c:	d069      	beq.n	7c22 <__aeabi_dmul+0xfa>
    7b4e:	4b6d      	ldr	r3, [pc, #436]	; (7d04 <__aeabi_dmul+0x1dc>)
    7b50:	429e      	cmp	r6, r3
    7b52:	d035      	beq.n	7bc0 <__aeabi_dmul+0x98>
    7b54:	465b      	mov	r3, fp
    7b56:	2280      	movs	r2, #128	; 0x80
    7b58:	00dd      	lsls	r5, r3, #3
    7b5a:	0412      	lsls	r2, r2, #16
    7b5c:	0f43      	lsrs	r3, r0, #29
    7b5e:	4313      	orrs	r3, r2
    7b60:	432b      	orrs	r3, r5
    7b62:	469b      	mov	fp, r3
    7b64:	00c3      	lsls	r3, r0, #3
    7b66:	4698      	mov	r8, r3
    7b68:	4b67      	ldr	r3, [pc, #412]	; (7d08 <__aeabi_dmul+0x1e0>)
    7b6a:	2700      	movs	r7, #0
    7b6c:	469c      	mov	ip, r3
    7b6e:	2300      	movs	r3, #0
    7b70:	4466      	add	r6, ip
    7b72:	9301      	str	r3, [sp, #4]
    7b74:	464a      	mov	r2, r9
    7b76:	0315      	lsls	r5, r2, #12
    7b78:	0050      	lsls	r0, r2, #1
    7b7a:	0fd2      	lsrs	r2, r2, #31
    7b7c:	4653      	mov	r3, sl
    7b7e:	0b2d      	lsrs	r5, r5, #12
    7b80:	0d40      	lsrs	r0, r0, #21
    7b82:	4691      	mov	r9, r2
    7b84:	d100      	bne.n	7b88 <__aeabi_dmul+0x60>
    7b86:	e076      	b.n	7c76 <__aeabi_dmul+0x14e>
    7b88:	4a5e      	ldr	r2, [pc, #376]	; (7d04 <__aeabi_dmul+0x1dc>)
    7b8a:	4290      	cmp	r0, r2
    7b8c:	d06c      	beq.n	7c68 <__aeabi_dmul+0x140>
    7b8e:	2280      	movs	r2, #128	; 0x80
    7b90:	0f5b      	lsrs	r3, r3, #29
    7b92:	0412      	lsls	r2, r2, #16
    7b94:	4313      	orrs	r3, r2
    7b96:	4a5c      	ldr	r2, [pc, #368]	; (7d08 <__aeabi_dmul+0x1e0>)
    7b98:	00ed      	lsls	r5, r5, #3
    7b9a:	4694      	mov	ip, r2
    7b9c:	431d      	orrs	r5, r3
    7b9e:	4653      	mov	r3, sl
    7ba0:	2200      	movs	r2, #0
    7ba2:	00db      	lsls	r3, r3, #3
    7ba4:	4460      	add	r0, ip
    7ba6:	4649      	mov	r1, r9
    7ba8:	1836      	adds	r6, r6, r0
    7baa:	1c70      	adds	r0, r6, #1
    7bac:	4061      	eors	r1, r4
    7bae:	9002      	str	r0, [sp, #8]
    7bb0:	4317      	orrs	r7, r2
    7bb2:	2f0f      	cmp	r7, #15
    7bb4:	d900      	bls.n	7bb8 <__aeabi_dmul+0x90>
    7bb6:	e0af      	b.n	7d18 <__aeabi_dmul+0x1f0>
    7bb8:	4854      	ldr	r0, [pc, #336]	; (7d0c <__aeabi_dmul+0x1e4>)
    7bba:	00bf      	lsls	r7, r7, #2
    7bbc:	59c7      	ldr	r7, [r0, r7]
    7bbe:	46bf      	mov	pc, r7
    7bc0:	465b      	mov	r3, fp
    7bc2:	431f      	orrs	r7, r3
    7bc4:	d000      	beq.n	7bc8 <__aeabi_dmul+0xa0>
    7bc6:	e088      	b.n	7cda <__aeabi_dmul+0x1b2>
    7bc8:	2300      	movs	r3, #0
    7bca:	469b      	mov	fp, r3
    7bcc:	4698      	mov	r8, r3
    7bce:	3302      	adds	r3, #2
    7bd0:	2708      	movs	r7, #8
    7bd2:	9301      	str	r3, [sp, #4]
    7bd4:	e7ce      	b.n	7b74 <__aeabi_dmul+0x4c>
    7bd6:	4649      	mov	r1, r9
    7bd8:	2a02      	cmp	r2, #2
    7bda:	d06a      	beq.n	7cb2 <__aeabi_dmul+0x18a>
    7bdc:	2a03      	cmp	r2, #3
    7bde:	d100      	bne.n	7be2 <__aeabi_dmul+0xba>
    7be0:	e209      	b.n	7ff6 <__aeabi_dmul+0x4ce>
    7be2:	2a01      	cmp	r2, #1
    7be4:	d000      	beq.n	7be8 <__aeabi_dmul+0xc0>
    7be6:	e1bb      	b.n	7f60 <__aeabi_dmul+0x438>
    7be8:	4011      	ands	r1, r2
    7bea:	2200      	movs	r2, #0
    7bec:	2300      	movs	r3, #0
    7bee:	2500      	movs	r5, #0
    7bf0:	4690      	mov	r8, r2
    7bf2:	b2cc      	uxtb	r4, r1
    7bf4:	2100      	movs	r1, #0
    7bf6:	032d      	lsls	r5, r5, #12
    7bf8:	0d0a      	lsrs	r2, r1, #20
    7bfa:	0512      	lsls	r2, r2, #20
    7bfc:	0b2d      	lsrs	r5, r5, #12
    7bfe:	4315      	orrs	r5, r2
    7c00:	4a43      	ldr	r2, [pc, #268]	; (7d10 <__aeabi_dmul+0x1e8>)
    7c02:	051b      	lsls	r3, r3, #20
    7c04:	4015      	ands	r5, r2
    7c06:	431d      	orrs	r5, r3
    7c08:	006d      	lsls	r5, r5, #1
    7c0a:	07e4      	lsls	r4, r4, #31
    7c0c:	086d      	lsrs	r5, r5, #1
    7c0e:	4325      	orrs	r5, r4
    7c10:	4640      	mov	r0, r8
    7c12:	0029      	movs	r1, r5
    7c14:	b007      	add	sp, #28
    7c16:	bc3c      	pop	{r2, r3, r4, r5}
    7c18:	4690      	mov	r8, r2
    7c1a:	4699      	mov	r9, r3
    7c1c:	46a2      	mov	sl, r4
    7c1e:	46ab      	mov	fp, r5
    7c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c22:	4303      	orrs	r3, r0
    7c24:	d052      	beq.n	7ccc <__aeabi_dmul+0x1a4>
    7c26:	465b      	mov	r3, fp
    7c28:	2b00      	cmp	r3, #0
    7c2a:	d100      	bne.n	7c2e <__aeabi_dmul+0x106>
    7c2c:	e18a      	b.n	7f44 <__aeabi_dmul+0x41c>
    7c2e:	4658      	mov	r0, fp
    7c30:	f000 fef8 	bl	8a24 <__clzsi2>
    7c34:	0003      	movs	r3, r0
    7c36:	3b0b      	subs	r3, #11
    7c38:	2b1c      	cmp	r3, #28
    7c3a:	dd00      	ble.n	7c3e <__aeabi_dmul+0x116>
    7c3c:	e17b      	b.n	7f36 <__aeabi_dmul+0x40e>
    7c3e:	221d      	movs	r2, #29
    7c40:	1ad3      	subs	r3, r2, r3
    7c42:	003a      	movs	r2, r7
    7c44:	0001      	movs	r1, r0
    7c46:	465d      	mov	r5, fp
    7c48:	40da      	lsrs	r2, r3
    7c4a:	3908      	subs	r1, #8
    7c4c:	408d      	lsls	r5, r1
    7c4e:	0013      	movs	r3, r2
    7c50:	408f      	lsls	r7, r1
    7c52:	432b      	orrs	r3, r5
    7c54:	469b      	mov	fp, r3
    7c56:	46b8      	mov	r8, r7
    7c58:	4b2e      	ldr	r3, [pc, #184]	; (7d14 <__aeabi_dmul+0x1ec>)
    7c5a:	2700      	movs	r7, #0
    7c5c:	469c      	mov	ip, r3
    7c5e:	2300      	movs	r3, #0
    7c60:	4460      	add	r0, ip
    7c62:	4246      	negs	r6, r0
    7c64:	9301      	str	r3, [sp, #4]
    7c66:	e785      	b.n	7b74 <__aeabi_dmul+0x4c>
    7c68:	4652      	mov	r2, sl
    7c6a:	432a      	orrs	r2, r5
    7c6c:	d12c      	bne.n	7cc8 <__aeabi_dmul+0x1a0>
    7c6e:	2500      	movs	r5, #0
    7c70:	2300      	movs	r3, #0
    7c72:	2202      	movs	r2, #2
    7c74:	e797      	b.n	7ba6 <__aeabi_dmul+0x7e>
    7c76:	4652      	mov	r2, sl
    7c78:	432a      	orrs	r2, r5
    7c7a:	d021      	beq.n	7cc0 <__aeabi_dmul+0x198>
    7c7c:	2d00      	cmp	r5, #0
    7c7e:	d100      	bne.n	7c82 <__aeabi_dmul+0x15a>
    7c80:	e154      	b.n	7f2c <__aeabi_dmul+0x404>
    7c82:	0028      	movs	r0, r5
    7c84:	f000 fece 	bl	8a24 <__clzsi2>
    7c88:	0003      	movs	r3, r0
    7c8a:	3b0b      	subs	r3, #11
    7c8c:	2b1c      	cmp	r3, #28
    7c8e:	dd00      	ble.n	7c92 <__aeabi_dmul+0x16a>
    7c90:	e146      	b.n	7f20 <__aeabi_dmul+0x3f8>
    7c92:	211d      	movs	r1, #29
    7c94:	1acb      	subs	r3, r1, r3
    7c96:	4651      	mov	r1, sl
    7c98:	0002      	movs	r2, r0
    7c9a:	40d9      	lsrs	r1, r3
    7c9c:	4653      	mov	r3, sl
    7c9e:	3a08      	subs	r2, #8
    7ca0:	4095      	lsls	r5, r2
    7ca2:	4093      	lsls	r3, r2
    7ca4:	430d      	orrs	r5, r1
    7ca6:	4a1b      	ldr	r2, [pc, #108]	; (7d14 <__aeabi_dmul+0x1ec>)
    7ca8:	4694      	mov	ip, r2
    7caa:	4460      	add	r0, ip
    7cac:	4240      	negs	r0, r0
    7cae:	2200      	movs	r2, #0
    7cb0:	e779      	b.n	7ba6 <__aeabi_dmul+0x7e>
    7cb2:	2401      	movs	r4, #1
    7cb4:	2200      	movs	r2, #0
    7cb6:	400c      	ands	r4, r1
    7cb8:	4b12      	ldr	r3, [pc, #72]	; (7d04 <__aeabi_dmul+0x1dc>)
    7cba:	2500      	movs	r5, #0
    7cbc:	4690      	mov	r8, r2
    7cbe:	e799      	b.n	7bf4 <__aeabi_dmul+0xcc>
    7cc0:	2500      	movs	r5, #0
    7cc2:	2300      	movs	r3, #0
    7cc4:	2201      	movs	r2, #1
    7cc6:	e76e      	b.n	7ba6 <__aeabi_dmul+0x7e>
    7cc8:	2203      	movs	r2, #3
    7cca:	e76c      	b.n	7ba6 <__aeabi_dmul+0x7e>
    7ccc:	2300      	movs	r3, #0
    7cce:	469b      	mov	fp, r3
    7cd0:	4698      	mov	r8, r3
    7cd2:	3301      	adds	r3, #1
    7cd4:	2704      	movs	r7, #4
    7cd6:	9301      	str	r3, [sp, #4]
    7cd8:	e74c      	b.n	7b74 <__aeabi_dmul+0x4c>
    7cda:	2303      	movs	r3, #3
    7cdc:	270c      	movs	r7, #12
    7cde:	9301      	str	r3, [sp, #4]
    7ce0:	e748      	b.n	7b74 <__aeabi_dmul+0x4c>
    7ce2:	2300      	movs	r3, #0
    7ce4:	2580      	movs	r5, #128	; 0x80
    7ce6:	4698      	mov	r8, r3
    7ce8:	2400      	movs	r4, #0
    7cea:	032d      	lsls	r5, r5, #12
    7cec:	4b05      	ldr	r3, [pc, #20]	; (7d04 <__aeabi_dmul+0x1dc>)
    7cee:	e781      	b.n	7bf4 <__aeabi_dmul+0xcc>
    7cf0:	465d      	mov	r5, fp
    7cf2:	4643      	mov	r3, r8
    7cf4:	9a01      	ldr	r2, [sp, #4]
    7cf6:	e76f      	b.n	7bd8 <__aeabi_dmul+0xb0>
    7cf8:	465d      	mov	r5, fp
    7cfa:	4643      	mov	r3, r8
    7cfc:	0021      	movs	r1, r4
    7cfe:	9a01      	ldr	r2, [sp, #4]
    7d00:	e76a      	b.n	7bd8 <__aeabi_dmul+0xb0>
    7d02:	46c0      	nop			; (mov r8, r8)
    7d04:	000007ff 	.word	0x000007ff
    7d08:	fffffc01 	.word	0xfffffc01
    7d0c:	00008e88 	.word	0x00008e88
    7d10:	800fffff 	.word	0x800fffff
    7d14:	000003f3 	.word	0x000003f3
    7d18:	4642      	mov	r2, r8
    7d1a:	0c12      	lsrs	r2, r2, #16
    7d1c:	4691      	mov	r9, r2
    7d1e:	0c1a      	lsrs	r2, r3, #16
    7d20:	4694      	mov	ip, r2
    7d22:	4642      	mov	r2, r8
    7d24:	0417      	lsls	r7, r2, #16
    7d26:	464a      	mov	r2, r9
    7d28:	041b      	lsls	r3, r3, #16
    7d2a:	0c1b      	lsrs	r3, r3, #16
    7d2c:	435a      	muls	r2, r3
    7d2e:	4660      	mov	r0, ip
    7d30:	4690      	mov	r8, r2
    7d32:	464a      	mov	r2, r9
    7d34:	4342      	muls	r2, r0
    7d36:	0010      	movs	r0, r2
    7d38:	9203      	str	r2, [sp, #12]
    7d3a:	4662      	mov	r2, ip
    7d3c:	001c      	movs	r4, r3
    7d3e:	0c3f      	lsrs	r7, r7, #16
    7d40:	437a      	muls	r2, r7
    7d42:	437c      	muls	r4, r7
    7d44:	4442      	add	r2, r8
    7d46:	9201      	str	r2, [sp, #4]
    7d48:	0c22      	lsrs	r2, r4, #16
    7d4a:	4692      	mov	sl, r2
    7d4c:	9a01      	ldr	r2, [sp, #4]
    7d4e:	4452      	add	r2, sl
    7d50:	4590      	cmp	r8, r2
    7d52:	d906      	bls.n	7d62 <__aeabi_dmul+0x23a>
    7d54:	4682      	mov	sl, r0
    7d56:	2080      	movs	r0, #128	; 0x80
    7d58:	0240      	lsls	r0, r0, #9
    7d5a:	4680      	mov	r8, r0
    7d5c:	44c2      	add	sl, r8
    7d5e:	4650      	mov	r0, sl
    7d60:	9003      	str	r0, [sp, #12]
    7d62:	0c10      	lsrs	r0, r2, #16
    7d64:	9004      	str	r0, [sp, #16]
    7d66:	4648      	mov	r0, r9
    7d68:	0424      	lsls	r4, r4, #16
    7d6a:	0c24      	lsrs	r4, r4, #16
    7d6c:	0412      	lsls	r2, r2, #16
    7d6e:	1912      	adds	r2, r2, r4
    7d70:	9205      	str	r2, [sp, #20]
    7d72:	0c2a      	lsrs	r2, r5, #16
    7d74:	042d      	lsls	r5, r5, #16
    7d76:	0c2d      	lsrs	r5, r5, #16
    7d78:	4368      	muls	r0, r5
    7d7a:	002c      	movs	r4, r5
    7d7c:	4682      	mov	sl, r0
    7d7e:	4648      	mov	r0, r9
    7d80:	437c      	muls	r4, r7
    7d82:	4350      	muls	r0, r2
    7d84:	4681      	mov	r9, r0
    7d86:	0c20      	lsrs	r0, r4, #16
    7d88:	4680      	mov	r8, r0
    7d8a:	4357      	muls	r7, r2
    7d8c:	4457      	add	r7, sl
    7d8e:	4447      	add	r7, r8
    7d90:	45ba      	cmp	sl, r7
    7d92:	d903      	bls.n	7d9c <__aeabi_dmul+0x274>
    7d94:	2080      	movs	r0, #128	; 0x80
    7d96:	0240      	lsls	r0, r0, #9
    7d98:	4680      	mov	r8, r0
    7d9a:	44c1      	add	r9, r8
    7d9c:	0c38      	lsrs	r0, r7, #16
    7d9e:	043f      	lsls	r7, r7, #16
    7da0:	46b8      	mov	r8, r7
    7da2:	4448      	add	r0, r9
    7da4:	0424      	lsls	r4, r4, #16
    7da6:	0c24      	lsrs	r4, r4, #16
    7da8:	9001      	str	r0, [sp, #4]
    7daa:	9804      	ldr	r0, [sp, #16]
    7dac:	44a0      	add	r8, r4
    7dae:	4440      	add	r0, r8
    7db0:	9004      	str	r0, [sp, #16]
    7db2:	4658      	mov	r0, fp
    7db4:	0c00      	lsrs	r0, r0, #16
    7db6:	4681      	mov	r9, r0
    7db8:	4658      	mov	r0, fp
    7dba:	0404      	lsls	r4, r0, #16
    7dbc:	0c20      	lsrs	r0, r4, #16
    7dbe:	4682      	mov	sl, r0
    7dc0:	0007      	movs	r7, r0
    7dc2:	4648      	mov	r0, r9
    7dc4:	435f      	muls	r7, r3
    7dc6:	464c      	mov	r4, r9
    7dc8:	4343      	muls	r3, r0
    7dca:	4660      	mov	r0, ip
    7dcc:	4360      	muls	r0, r4
    7dce:	4664      	mov	r4, ip
    7dd0:	4683      	mov	fp, r0
    7dd2:	4650      	mov	r0, sl
    7dd4:	4344      	muls	r4, r0
    7dd6:	0c38      	lsrs	r0, r7, #16
    7dd8:	4684      	mov	ip, r0
    7dda:	18e4      	adds	r4, r4, r3
    7ddc:	4464      	add	r4, ip
    7dde:	42a3      	cmp	r3, r4
    7de0:	d903      	bls.n	7dea <__aeabi_dmul+0x2c2>
    7de2:	2380      	movs	r3, #128	; 0x80
    7de4:	025b      	lsls	r3, r3, #9
    7de6:	469c      	mov	ip, r3
    7de8:	44e3      	add	fp, ip
    7dea:	4648      	mov	r0, r9
    7dec:	043f      	lsls	r7, r7, #16
    7dee:	0c23      	lsrs	r3, r4, #16
    7df0:	0c3f      	lsrs	r7, r7, #16
    7df2:	0424      	lsls	r4, r4, #16
    7df4:	19e4      	adds	r4, r4, r7
    7df6:	4657      	mov	r7, sl
    7df8:	4368      	muls	r0, r5
    7dfa:	436f      	muls	r7, r5
    7dfc:	4684      	mov	ip, r0
    7dfe:	464d      	mov	r5, r9
    7e00:	4650      	mov	r0, sl
    7e02:	4355      	muls	r5, r2
    7e04:	4342      	muls	r2, r0
    7e06:	0c38      	lsrs	r0, r7, #16
    7e08:	4681      	mov	r9, r0
    7e0a:	4462      	add	r2, ip
    7e0c:	444a      	add	r2, r9
    7e0e:	445b      	add	r3, fp
    7e10:	4594      	cmp	ip, r2
    7e12:	d903      	bls.n	7e1c <__aeabi_dmul+0x2f4>
    7e14:	2080      	movs	r0, #128	; 0x80
    7e16:	0240      	lsls	r0, r0, #9
    7e18:	4684      	mov	ip, r0
    7e1a:	4465      	add	r5, ip
    7e1c:	9803      	ldr	r0, [sp, #12]
    7e1e:	043f      	lsls	r7, r7, #16
    7e20:	4683      	mov	fp, r0
    7e22:	9804      	ldr	r0, [sp, #16]
    7e24:	0c3f      	lsrs	r7, r7, #16
    7e26:	4684      	mov	ip, r0
    7e28:	44e3      	add	fp, ip
    7e2a:	45c3      	cmp	fp, r8
    7e2c:	4180      	sbcs	r0, r0
    7e2e:	4240      	negs	r0, r0
    7e30:	4682      	mov	sl, r0
    7e32:	0410      	lsls	r0, r2, #16
    7e34:	4684      	mov	ip, r0
    7e36:	9801      	ldr	r0, [sp, #4]
    7e38:	4467      	add	r7, ip
    7e3a:	4684      	mov	ip, r0
    7e3c:	4467      	add	r7, ip
    7e3e:	44a3      	add	fp, r4
    7e40:	46bc      	mov	ip, r7
    7e42:	45a3      	cmp	fp, r4
    7e44:	41a4      	sbcs	r4, r4
    7e46:	4699      	mov	r9, r3
    7e48:	44d4      	add	ip, sl
    7e4a:	4264      	negs	r4, r4
    7e4c:	4287      	cmp	r7, r0
    7e4e:	41bf      	sbcs	r7, r7
    7e50:	45d4      	cmp	ip, sl
    7e52:	4180      	sbcs	r0, r0
    7e54:	44e1      	add	r9, ip
    7e56:	46a0      	mov	r8, r4
    7e58:	4599      	cmp	r9, r3
    7e5a:	419b      	sbcs	r3, r3
    7e5c:	427f      	negs	r7, r7
    7e5e:	4240      	negs	r0, r0
    7e60:	44c8      	add	r8, r9
    7e62:	4307      	orrs	r7, r0
    7e64:	0c12      	lsrs	r2, r2, #16
    7e66:	18ba      	adds	r2, r7, r2
    7e68:	45a0      	cmp	r8, r4
    7e6a:	41a4      	sbcs	r4, r4
    7e6c:	425f      	negs	r7, r3
    7e6e:	003b      	movs	r3, r7
    7e70:	4264      	negs	r4, r4
    7e72:	4323      	orrs	r3, r4
    7e74:	18d7      	adds	r7, r2, r3
    7e76:	4643      	mov	r3, r8
    7e78:	197d      	adds	r5, r7, r5
    7e7a:	0ddb      	lsrs	r3, r3, #23
    7e7c:	026d      	lsls	r5, r5, #9
    7e7e:	431d      	orrs	r5, r3
    7e80:	465b      	mov	r3, fp
    7e82:	025a      	lsls	r2, r3, #9
    7e84:	9b05      	ldr	r3, [sp, #20]
    7e86:	431a      	orrs	r2, r3
    7e88:	1e53      	subs	r3, r2, #1
    7e8a:	419a      	sbcs	r2, r3
    7e8c:	465b      	mov	r3, fp
    7e8e:	0ddb      	lsrs	r3, r3, #23
    7e90:	431a      	orrs	r2, r3
    7e92:	4643      	mov	r3, r8
    7e94:	025b      	lsls	r3, r3, #9
    7e96:	4313      	orrs	r3, r2
    7e98:	01ea      	lsls	r2, r5, #7
    7e9a:	d507      	bpl.n	7eac <__aeabi_dmul+0x384>
    7e9c:	2201      	movs	r2, #1
    7e9e:	085c      	lsrs	r4, r3, #1
    7ea0:	4013      	ands	r3, r2
    7ea2:	4323      	orrs	r3, r4
    7ea4:	07ea      	lsls	r2, r5, #31
    7ea6:	9e02      	ldr	r6, [sp, #8]
    7ea8:	4313      	orrs	r3, r2
    7eaa:	086d      	lsrs	r5, r5, #1
    7eac:	4a57      	ldr	r2, [pc, #348]	; (800c <__aeabi_dmul+0x4e4>)
    7eae:	18b2      	adds	r2, r6, r2
    7eb0:	2a00      	cmp	r2, #0
    7eb2:	dd4b      	ble.n	7f4c <__aeabi_dmul+0x424>
    7eb4:	0758      	lsls	r0, r3, #29
    7eb6:	d009      	beq.n	7ecc <__aeabi_dmul+0x3a4>
    7eb8:	200f      	movs	r0, #15
    7eba:	4018      	ands	r0, r3
    7ebc:	2804      	cmp	r0, #4
    7ebe:	d005      	beq.n	7ecc <__aeabi_dmul+0x3a4>
    7ec0:	1d18      	adds	r0, r3, #4
    7ec2:	4298      	cmp	r0, r3
    7ec4:	419b      	sbcs	r3, r3
    7ec6:	425b      	negs	r3, r3
    7ec8:	18ed      	adds	r5, r5, r3
    7eca:	0003      	movs	r3, r0
    7ecc:	01e8      	lsls	r0, r5, #7
    7ece:	d504      	bpl.n	7eda <__aeabi_dmul+0x3b2>
    7ed0:	4a4f      	ldr	r2, [pc, #316]	; (8010 <__aeabi_dmul+0x4e8>)
    7ed2:	4015      	ands	r5, r2
    7ed4:	2280      	movs	r2, #128	; 0x80
    7ed6:	00d2      	lsls	r2, r2, #3
    7ed8:	18b2      	adds	r2, r6, r2
    7eda:	484e      	ldr	r0, [pc, #312]	; (8014 <__aeabi_dmul+0x4ec>)
    7edc:	4282      	cmp	r2, r0
    7ede:	dd00      	ble.n	7ee2 <__aeabi_dmul+0x3ba>
    7ee0:	e6e7      	b.n	7cb2 <__aeabi_dmul+0x18a>
    7ee2:	2401      	movs	r4, #1
    7ee4:	08db      	lsrs	r3, r3, #3
    7ee6:	0768      	lsls	r0, r5, #29
    7ee8:	4318      	orrs	r0, r3
    7eea:	026d      	lsls	r5, r5, #9
    7eec:	0553      	lsls	r3, r2, #21
    7eee:	4680      	mov	r8, r0
    7ef0:	0b2d      	lsrs	r5, r5, #12
    7ef2:	0d5b      	lsrs	r3, r3, #21
    7ef4:	400c      	ands	r4, r1
    7ef6:	e67d      	b.n	7bf4 <__aeabi_dmul+0xcc>
    7ef8:	2280      	movs	r2, #128	; 0x80
    7efa:	4659      	mov	r1, fp
    7efc:	0312      	lsls	r2, r2, #12
    7efe:	4211      	tst	r1, r2
    7f00:	d008      	beq.n	7f14 <__aeabi_dmul+0x3ec>
    7f02:	4215      	tst	r5, r2
    7f04:	d106      	bne.n	7f14 <__aeabi_dmul+0x3ec>
    7f06:	4315      	orrs	r5, r2
    7f08:	032d      	lsls	r5, r5, #12
    7f0a:	4698      	mov	r8, r3
    7f0c:	0b2d      	lsrs	r5, r5, #12
    7f0e:	464c      	mov	r4, r9
    7f10:	4b41      	ldr	r3, [pc, #260]	; (8018 <__aeabi_dmul+0x4f0>)
    7f12:	e66f      	b.n	7bf4 <__aeabi_dmul+0xcc>
    7f14:	465d      	mov	r5, fp
    7f16:	4315      	orrs	r5, r2
    7f18:	032d      	lsls	r5, r5, #12
    7f1a:	0b2d      	lsrs	r5, r5, #12
    7f1c:	4b3e      	ldr	r3, [pc, #248]	; (8018 <__aeabi_dmul+0x4f0>)
    7f1e:	e669      	b.n	7bf4 <__aeabi_dmul+0xcc>
    7f20:	0003      	movs	r3, r0
    7f22:	4655      	mov	r5, sl
    7f24:	3b28      	subs	r3, #40	; 0x28
    7f26:	409d      	lsls	r5, r3
    7f28:	2300      	movs	r3, #0
    7f2a:	e6bc      	b.n	7ca6 <__aeabi_dmul+0x17e>
    7f2c:	4650      	mov	r0, sl
    7f2e:	f000 fd79 	bl	8a24 <__clzsi2>
    7f32:	3020      	adds	r0, #32
    7f34:	e6a8      	b.n	7c88 <__aeabi_dmul+0x160>
    7f36:	0003      	movs	r3, r0
    7f38:	3b28      	subs	r3, #40	; 0x28
    7f3a:	409f      	lsls	r7, r3
    7f3c:	2300      	movs	r3, #0
    7f3e:	46bb      	mov	fp, r7
    7f40:	4698      	mov	r8, r3
    7f42:	e689      	b.n	7c58 <__aeabi_dmul+0x130>
    7f44:	f000 fd6e 	bl	8a24 <__clzsi2>
    7f48:	3020      	adds	r0, #32
    7f4a:	e673      	b.n	7c34 <__aeabi_dmul+0x10c>
    7f4c:	2401      	movs	r4, #1
    7f4e:	1aa6      	subs	r6, r4, r2
    7f50:	2e38      	cmp	r6, #56	; 0x38
    7f52:	dd07      	ble.n	7f64 <__aeabi_dmul+0x43c>
    7f54:	2200      	movs	r2, #0
    7f56:	400c      	ands	r4, r1
    7f58:	2300      	movs	r3, #0
    7f5a:	2500      	movs	r5, #0
    7f5c:	4690      	mov	r8, r2
    7f5e:	e649      	b.n	7bf4 <__aeabi_dmul+0xcc>
    7f60:	9e02      	ldr	r6, [sp, #8]
    7f62:	e7a3      	b.n	7eac <__aeabi_dmul+0x384>
    7f64:	2e1f      	cmp	r6, #31
    7f66:	dc20      	bgt.n	7faa <__aeabi_dmul+0x482>
    7f68:	2220      	movs	r2, #32
    7f6a:	002c      	movs	r4, r5
    7f6c:	0018      	movs	r0, r3
    7f6e:	1b92      	subs	r2, r2, r6
    7f70:	40f0      	lsrs	r0, r6
    7f72:	4094      	lsls	r4, r2
    7f74:	4093      	lsls	r3, r2
    7f76:	4304      	orrs	r4, r0
    7f78:	1e58      	subs	r0, r3, #1
    7f7a:	4183      	sbcs	r3, r0
    7f7c:	431c      	orrs	r4, r3
    7f7e:	40f5      	lsrs	r5, r6
    7f80:	0763      	lsls	r3, r4, #29
    7f82:	d009      	beq.n	7f98 <__aeabi_dmul+0x470>
    7f84:	230f      	movs	r3, #15
    7f86:	4023      	ands	r3, r4
    7f88:	2b04      	cmp	r3, #4
    7f8a:	d005      	beq.n	7f98 <__aeabi_dmul+0x470>
    7f8c:	0023      	movs	r3, r4
    7f8e:	1d1c      	adds	r4, r3, #4
    7f90:	429c      	cmp	r4, r3
    7f92:	4192      	sbcs	r2, r2
    7f94:	4252      	negs	r2, r2
    7f96:	18ad      	adds	r5, r5, r2
    7f98:	022b      	lsls	r3, r5, #8
    7f9a:	d51f      	bpl.n	7fdc <__aeabi_dmul+0x4b4>
    7f9c:	2401      	movs	r4, #1
    7f9e:	2200      	movs	r2, #0
    7fa0:	400c      	ands	r4, r1
    7fa2:	2301      	movs	r3, #1
    7fa4:	2500      	movs	r5, #0
    7fa6:	4690      	mov	r8, r2
    7fa8:	e624      	b.n	7bf4 <__aeabi_dmul+0xcc>
    7faa:	201f      	movs	r0, #31
    7fac:	002c      	movs	r4, r5
    7fae:	4240      	negs	r0, r0
    7fb0:	1a82      	subs	r2, r0, r2
    7fb2:	40d4      	lsrs	r4, r2
    7fb4:	2e20      	cmp	r6, #32
    7fb6:	d01c      	beq.n	7ff2 <__aeabi_dmul+0x4ca>
    7fb8:	2240      	movs	r2, #64	; 0x40
    7fba:	1b96      	subs	r6, r2, r6
    7fbc:	40b5      	lsls	r5, r6
    7fbe:	432b      	orrs	r3, r5
    7fc0:	1e58      	subs	r0, r3, #1
    7fc2:	4183      	sbcs	r3, r0
    7fc4:	2007      	movs	r0, #7
    7fc6:	4323      	orrs	r3, r4
    7fc8:	4018      	ands	r0, r3
    7fca:	2500      	movs	r5, #0
    7fcc:	2800      	cmp	r0, #0
    7fce:	d009      	beq.n	7fe4 <__aeabi_dmul+0x4bc>
    7fd0:	220f      	movs	r2, #15
    7fd2:	2500      	movs	r5, #0
    7fd4:	401a      	ands	r2, r3
    7fd6:	001c      	movs	r4, r3
    7fd8:	2a04      	cmp	r2, #4
    7fda:	d1d8      	bne.n	7f8e <__aeabi_dmul+0x466>
    7fdc:	0023      	movs	r3, r4
    7fde:	0768      	lsls	r0, r5, #29
    7fe0:	026d      	lsls	r5, r5, #9
    7fe2:	0b2d      	lsrs	r5, r5, #12
    7fe4:	2401      	movs	r4, #1
    7fe6:	08db      	lsrs	r3, r3, #3
    7fe8:	4303      	orrs	r3, r0
    7fea:	4698      	mov	r8, r3
    7fec:	400c      	ands	r4, r1
    7fee:	2300      	movs	r3, #0
    7ff0:	e600      	b.n	7bf4 <__aeabi_dmul+0xcc>
    7ff2:	2500      	movs	r5, #0
    7ff4:	e7e3      	b.n	7fbe <__aeabi_dmul+0x496>
    7ff6:	2280      	movs	r2, #128	; 0x80
    7ff8:	2401      	movs	r4, #1
    7ffa:	0312      	lsls	r2, r2, #12
    7ffc:	4315      	orrs	r5, r2
    7ffe:	032d      	lsls	r5, r5, #12
    8000:	4698      	mov	r8, r3
    8002:	0b2d      	lsrs	r5, r5, #12
    8004:	400c      	ands	r4, r1
    8006:	4b04      	ldr	r3, [pc, #16]	; (8018 <__aeabi_dmul+0x4f0>)
    8008:	e5f4      	b.n	7bf4 <__aeabi_dmul+0xcc>
    800a:	46c0      	nop			; (mov r8, r8)
    800c:	000003ff 	.word	0x000003ff
    8010:	feffffff 	.word	0xfeffffff
    8014:	000007fe 	.word	0x000007fe
    8018:	000007ff 	.word	0x000007ff

0000801c <__aeabi_dsub>:
    801c:	b5f0      	push	{r4, r5, r6, r7, lr}
    801e:	4657      	mov	r7, sl
    8020:	464e      	mov	r6, r9
    8022:	4645      	mov	r5, r8
    8024:	b4e0      	push	{r5, r6, r7}
    8026:	000e      	movs	r6, r1
    8028:	0011      	movs	r1, r2
    802a:	0ff2      	lsrs	r2, r6, #31
    802c:	4692      	mov	sl, r2
    802e:	00c5      	lsls	r5, r0, #3
    8030:	0f42      	lsrs	r2, r0, #29
    8032:	0318      	lsls	r0, r3, #12
    8034:	0337      	lsls	r7, r6, #12
    8036:	0074      	lsls	r4, r6, #1
    8038:	0a40      	lsrs	r0, r0, #9
    803a:	0f4e      	lsrs	r6, r1, #29
    803c:	0a7f      	lsrs	r7, r7, #9
    803e:	4330      	orrs	r0, r6
    8040:	4ecf      	ldr	r6, [pc, #828]	; (8380 <__aeabi_dsub+0x364>)
    8042:	4317      	orrs	r7, r2
    8044:	005a      	lsls	r2, r3, #1
    8046:	0d64      	lsrs	r4, r4, #21
    8048:	0d52      	lsrs	r2, r2, #21
    804a:	0fdb      	lsrs	r3, r3, #31
    804c:	00c9      	lsls	r1, r1, #3
    804e:	42b2      	cmp	r2, r6
    8050:	d100      	bne.n	8054 <__aeabi_dsub+0x38>
    8052:	e0e5      	b.n	8220 <__aeabi_dsub+0x204>
    8054:	2601      	movs	r6, #1
    8056:	4073      	eors	r3, r6
    8058:	1aa6      	subs	r6, r4, r2
    805a:	46b4      	mov	ip, r6
    805c:	4553      	cmp	r3, sl
    805e:	d100      	bne.n	8062 <__aeabi_dsub+0x46>
    8060:	e0af      	b.n	81c2 <__aeabi_dsub+0x1a6>
    8062:	2e00      	cmp	r6, #0
    8064:	dc00      	bgt.n	8068 <__aeabi_dsub+0x4c>
    8066:	e10d      	b.n	8284 <__aeabi_dsub+0x268>
    8068:	2a00      	cmp	r2, #0
    806a:	d13a      	bne.n	80e2 <__aeabi_dsub+0xc6>
    806c:	0003      	movs	r3, r0
    806e:	430b      	orrs	r3, r1
    8070:	d000      	beq.n	8074 <__aeabi_dsub+0x58>
    8072:	e0e4      	b.n	823e <__aeabi_dsub+0x222>
    8074:	076b      	lsls	r3, r5, #29
    8076:	d009      	beq.n	808c <__aeabi_dsub+0x70>
    8078:	230f      	movs	r3, #15
    807a:	402b      	ands	r3, r5
    807c:	2b04      	cmp	r3, #4
    807e:	d005      	beq.n	808c <__aeabi_dsub+0x70>
    8080:	1d2b      	adds	r3, r5, #4
    8082:	42ab      	cmp	r3, r5
    8084:	41ad      	sbcs	r5, r5
    8086:	426d      	negs	r5, r5
    8088:	197f      	adds	r7, r7, r5
    808a:	001d      	movs	r5, r3
    808c:	023b      	lsls	r3, r7, #8
    808e:	d400      	bmi.n	8092 <__aeabi_dsub+0x76>
    8090:	e088      	b.n	81a4 <__aeabi_dsub+0x188>
    8092:	4bbb      	ldr	r3, [pc, #748]	; (8380 <__aeabi_dsub+0x364>)
    8094:	3401      	adds	r4, #1
    8096:	429c      	cmp	r4, r3
    8098:	d100      	bne.n	809c <__aeabi_dsub+0x80>
    809a:	e110      	b.n	82be <__aeabi_dsub+0x2a2>
    809c:	003a      	movs	r2, r7
    809e:	4bb9      	ldr	r3, [pc, #740]	; (8384 <__aeabi_dsub+0x368>)
    80a0:	4651      	mov	r1, sl
    80a2:	401a      	ands	r2, r3
    80a4:	2301      	movs	r3, #1
    80a6:	0750      	lsls	r0, r2, #29
    80a8:	08ed      	lsrs	r5, r5, #3
    80aa:	0252      	lsls	r2, r2, #9
    80ac:	0564      	lsls	r4, r4, #21
    80ae:	4305      	orrs	r5, r0
    80b0:	0b12      	lsrs	r2, r2, #12
    80b2:	0d64      	lsrs	r4, r4, #21
    80b4:	400b      	ands	r3, r1
    80b6:	2100      	movs	r1, #0
    80b8:	0028      	movs	r0, r5
    80ba:	0312      	lsls	r2, r2, #12
    80bc:	0d0d      	lsrs	r5, r1, #20
    80be:	0b12      	lsrs	r2, r2, #12
    80c0:	0564      	lsls	r4, r4, #21
    80c2:	052d      	lsls	r5, r5, #20
    80c4:	4315      	orrs	r5, r2
    80c6:	0862      	lsrs	r2, r4, #1
    80c8:	4caf      	ldr	r4, [pc, #700]	; (8388 <__aeabi_dsub+0x36c>)
    80ca:	07db      	lsls	r3, r3, #31
    80cc:	402c      	ands	r4, r5
    80ce:	4314      	orrs	r4, r2
    80d0:	0064      	lsls	r4, r4, #1
    80d2:	0864      	lsrs	r4, r4, #1
    80d4:	431c      	orrs	r4, r3
    80d6:	0021      	movs	r1, r4
    80d8:	bc1c      	pop	{r2, r3, r4}
    80da:	4690      	mov	r8, r2
    80dc:	4699      	mov	r9, r3
    80de:	46a2      	mov	sl, r4
    80e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80e2:	4ba7      	ldr	r3, [pc, #668]	; (8380 <__aeabi_dsub+0x364>)
    80e4:	429c      	cmp	r4, r3
    80e6:	d0c5      	beq.n	8074 <__aeabi_dsub+0x58>
    80e8:	2380      	movs	r3, #128	; 0x80
    80ea:	041b      	lsls	r3, r3, #16
    80ec:	4318      	orrs	r0, r3
    80ee:	4663      	mov	r3, ip
    80f0:	2b38      	cmp	r3, #56	; 0x38
    80f2:	dd00      	ble.n	80f6 <__aeabi_dsub+0xda>
    80f4:	e0fd      	b.n	82f2 <__aeabi_dsub+0x2d6>
    80f6:	2b1f      	cmp	r3, #31
    80f8:	dd00      	ble.n	80fc <__aeabi_dsub+0xe0>
    80fa:	e130      	b.n	835e <__aeabi_dsub+0x342>
    80fc:	4662      	mov	r2, ip
    80fe:	2320      	movs	r3, #32
    8100:	1a9b      	subs	r3, r3, r2
    8102:	0002      	movs	r2, r0
    8104:	409a      	lsls	r2, r3
    8106:	4666      	mov	r6, ip
    8108:	4690      	mov	r8, r2
    810a:	000a      	movs	r2, r1
    810c:	4099      	lsls	r1, r3
    810e:	40f2      	lsrs	r2, r6
    8110:	4646      	mov	r6, r8
    8112:	1e4b      	subs	r3, r1, #1
    8114:	4199      	sbcs	r1, r3
    8116:	4332      	orrs	r2, r6
    8118:	4311      	orrs	r1, r2
    811a:	4663      	mov	r3, ip
    811c:	0002      	movs	r2, r0
    811e:	40da      	lsrs	r2, r3
    8120:	1a69      	subs	r1, r5, r1
    8122:	428d      	cmp	r5, r1
    8124:	419b      	sbcs	r3, r3
    8126:	000d      	movs	r5, r1
    8128:	1aba      	subs	r2, r7, r2
    812a:	425b      	negs	r3, r3
    812c:	1ad7      	subs	r7, r2, r3
    812e:	023b      	lsls	r3, r7, #8
    8130:	d535      	bpl.n	819e <__aeabi_dsub+0x182>
    8132:	027a      	lsls	r2, r7, #9
    8134:	0a53      	lsrs	r3, r2, #9
    8136:	4698      	mov	r8, r3
    8138:	4643      	mov	r3, r8
    813a:	2b00      	cmp	r3, #0
    813c:	d100      	bne.n	8140 <__aeabi_dsub+0x124>
    813e:	e0c4      	b.n	82ca <__aeabi_dsub+0x2ae>
    8140:	4640      	mov	r0, r8
    8142:	f000 fc6f 	bl	8a24 <__clzsi2>
    8146:	0003      	movs	r3, r0
    8148:	3b08      	subs	r3, #8
    814a:	2b1f      	cmp	r3, #31
    814c:	dd00      	ble.n	8150 <__aeabi_dsub+0x134>
    814e:	e0c5      	b.n	82dc <__aeabi_dsub+0x2c0>
    8150:	2220      	movs	r2, #32
    8152:	0029      	movs	r1, r5
    8154:	1ad2      	subs	r2, r2, r3
    8156:	4647      	mov	r7, r8
    8158:	40d1      	lsrs	r1, r2
    815a:	409f      	lsls	r7, r3
    815c:	000a      	movs	r2, r1
    815e:	409d      	lsls	r5, r3
    8160:	433a      	orrs	r2, r7
    8162:	429c      	cmp	r4, r3
    8164:	dd00      	ble.n	8168 <__aeabi_dsub+0x14c>
    8166:	e0c0      	b.n	82ea <__aeabi_dsub+0x2ce>
    8168:	1b1c      	subs	r4, r3, r4
    816a:	1c63      	adds	r3, r4, #1
    816c:	2b1f      	cmp	r3, #31
    816e:	dd00      	ble.n	8172 <__aeabi_dsub+0x156>
    8170:	e0e4      	b.n	833c <__aeabi_dsub+0x320>
    8172:	2120      	movs	r1, #32
    8174:	0014      	movs	r4, r2
    8176:	0028      	movs	r0, r5
    8178:	1ac9      	subs	r1, r1, r3
    817a:	40d8      	lsrs	r0, r3
    817c:	408c      	lsls	r4, r1
    817e:	408d      	lsls	r5, r1
    8180:	4304      	orrs	r4, r0
    8182:	40da      	lsrs	r2, r3
    8184:	1e68      	subs	r0, r5, #1
    8186:	4185      	sbcs	r5, r0
    8188:	0017      	movs	r7, r2
    818a:	4325      	orrs	r5, r4
    818c:	2400      	movs	r4, #0
    818e:	e771      	b.n	8074 <__aeabi_dsub+0x58>
    8190:	4642      	mov	r2, r8
    8192:	4663      	mov	r3, ip
    8194:	431a      	orrs	r2, r3
    8196:	d100      	bne.n	819a <__aeabi_dsub+0x17e>
    8198:	e24c      	b.n	8634 <__aeabi_dsub+0x618>
    819a:	4667      	mov	r7, ip
    819c:	4645      	mov	r5, r8
    819e:	076b      	lsls	r3, r5, #29
    81a0:	d000      	beq.n	81a4 <__aeabi_dsub+0x188>
    81a2:	e769      	b.n	8078 <__aeabi_dsub+0x5c>
    81a4:	2301      	movs	r3, #1
    81a6:	4651      	mov	r1, sl
    81a8:	0778      	lsls	r0, r7, #29
    81aa:	08ed      	lsrs	r5, r5, #3
    81ac:	08fa      	lsrs	r2, r7, #3
    81ae:	400b      	ands	r3, r1
    81b0:	4305      	orrs	r5, r0
    81b2:	4973      	ldr	r1, [pc, #460]	; (8380 <__aeabi_dsub+0x364>)
    81b4:	428c      	cmp	r4, r1
    81b6:	d038      	beq.n	822a <__aeabi_dsub+0x20e>
    81b8:	0312      	lsls	r2, r2, #12
    81ba:	0564      	lsls	r4, r4, #21
    81bc:	0b12      	lsrs	r2, r2, #12
    81be:	0d64      	lsrs	r4, r4, #21
    81c0:	e779      	b.n	80b6 <__aeabi_dsub+0x9a>
    81c2:	2e00      	cmp	r6, #0
    81c4:	dc00      	bgt.n	81c8 <__aeabi_dsub+0x1ac>
    81c6:	e09a      	b.n	82fe <__aeabi_dsub+0x2e2>
    81c8:	2a00      	cmp	r2, #0
    81ca:	d047      	beq.n	825c <__aeabi_dsub+0x240>
    81cc:	4a6c      	ldr	r2, [pc, #432]	; (8380 <__aeabi_dsub+0x364>)
    81ce:	4294      	cmp	r4, r2
    81d0:	d100      	bne.n	81d4 <__aeabi_dsub+0x1b8>
    81d2:	e74f      	b.n	8074 <__aeabi_dsub+0x58>
    81d4:	2280      	movs	r2, #128	; 0x80
    81d6:	0412      	lsls	r2, r2, #16
    81d8:	4310      	orrs	r0, r2
    81da:	4662      	mov	r2, ip
    81dc:	2a38      	cmp	r2, #56	; 0x38
    81de:	dc00      	bgt.n	81e2 <__aeabi_dsub+0x1c6>
    81e0:	e108      	b.n	83f4 <__aeabi_dsub+0x3d8>
    81e2:	4301      	orrs	r1, r0
    81e4:	1e48      	subs	r0, r1, #1
    81e6:	4181      	sbcs	r1, r0
    81e8:	2200      	movs	r2, #0
    81ea:	b2c9      	uxtb	r1, r1
    81ec:	1949      	adds	r1, r1, r5
    81ee:	19d2      	adds	r2, r2, r7
    81f0:	42a9      	cmp	r1, r5
    81f2:	41bf      	sbcs	r7, r7
    81f4:	000d      	movs	r5, r1
    81f6:	427f      	negs	r7, r7
    81f8:	18bf      	adds	r7, r7, r2
    81fa:	023a      	lsls	r2, r7, #8
    81fc:	d400      	bmi.n	8200 <__aeabi_dsub+0x1e4>
    81fe:	e142      	b.n	8486 <__aeabi_dsub+0x46a>
    8200:	4a5f      	ldr	r2, [pc, #380]	; (8380 <__aeabi_dsub+0x364>)
    8202:	3401      	adds	r4, #1
    8204:	4294      	cmp	r4, r2
    8206:	d100      	bne.n	820a <__aeabi_dsub+0x1ee>
    8208:	e14e      	b.n	84a8 <__aeabi_dsub+0x48c>
    820a:	2001      	movs	r0, #1
    820c:	4a5d      	ldr	r2, [pc, #372]	; (8384 <__aeabi_dsub+0x368>)
    820e:	0869      	lsrs	r1, r5, #1
    8210:	403a      	ands	r2, r7
    8212:	4028      	ands	r0, r5
    8214:	4308      	orrs	r0, r1
    8216:	07d5      	lsls	r5, r2, #31
    8218:	4305      	orrs	r5, r0
    821a:	0857      	lsrs	r7, r2, #1
    821c:	469a      	mov	sl, r3
    821e:	e729      	b.n	8074 <__aeabi_dsub+0x58>
    8220:	0006      	movs	r6, r0
    8222:	430e      	orrs	r6, r1
    8224:	d000      	beq.n	8228 <__aeabi_dsub+0x20c>
    8226:	e717      	b.n	8058 <__aeabi_dsub+0x3c>
    8228:	e714      	b.n	8054 <__aeabi_dsub+0x38>
    822a:	0029      	movs	r1, r5
    822c:	4311      	orrs	r1, r2
    822e:	d100      	bne.n	8232 <__aeabi_dsub+0x216>
    8230:	e1f9      	b.n	8626 <__aeabi_dsub+0x60a>
    8232:	2180      	movs	r1, #128	; 0x80
    8234:	0309      	lsls	r1, r1, #12
    8236:	430a      	orrs	r2, r1
    8238:	0312      	lsls	r2, r2, #12
    823a:	0b12      	lsrs	r2, r2, #12
    823c:	e73b      	b.n	80b6 <__aeabi_dsub+0x9a>
    823e:	2301      	movs	r3, #1
    8240:	425b      	negs	r3, r3
    8242:	4698      	mov	r8, r3
    8244:	44c4      	add	ip, r8
    8246:	4663      	mov	r3, ip
    8248:	2b00      	cmp	r3, #0
    824a:	d172      	bne.n	8332 <__aeabi_dsub+0x316>
    824c:	1a69      	subs	r1, r5, r1
    824e:	428d      	cmp	r5, r1
    8250:	419b      	sbcs	r3, r3
    8252:	1a3f      	subs	r7, r7, r0
    8254:	425b      	negs	r3, r3
    8256:	1aff      	subs	r7, r7, r3
    8258:	000d      	movs	r5, r1
    825a:	e768      	b.n	812e <__aeabi_dsub+0x112>
    825c:	0002      	movs	r2, r0
    825e:	430a      	orrs	r2, r1
    8260:	d100      	bne.n	8264 <__aeabi_dsub+0x248>
    8262:	e707      	b.n	8074 <__aeabi_dsub+0x58>
    8264:	2201      	movs	r2, #1
    8266:	4252      	negs	r2, r2
    8268:	4690      	mov	r8, r2
    826a:	44c4      	add	ip, r8
    826c:	4662      	mov	r2, ip
    826e:	2a00      	cmp	r2, #0
    8270:	d000      	beq.n	8274 <__aeabi_dsub+0x258>
    8272:	e0e6      	b.n	8442 <__aeabi_dsub+0x426>
    8274:	1869      	adds	r1, r5, r1
    8276:	42a9      	cmp	r1, r5
    8278:	41b6      	sbcs	r6, r6
    827a:	183f      	adds	r7, r7, r0
    827c:	4276      	negs	r6, r6
    827e:	19f7      	adds	r7, r6, r7
    8280:	000d      	movs	r5, r1
    8282:	e7ba      	b.n	81fa <__aeabi_dsub+0x1de>
    8284:	2e00      	cmp	r6, #0
    8286:	d000      	beq.n	828a <__aeabi_dsub+0x26e>
    8288:	e080      	b.n	838c <__aeabi_dsub+0x370>
    828a:	1c62      	adds	r2, r4, #1
    828c:	0552      	lsls	r2, r2, #21
    828e:	0d52      	lsrs	r2, r2, #21
    8290:	2a01      	cmp	r2, #1
    8292:	dc00      	bgt.n	8296 <__aeabi_dsub+0x27a>
    8294:	e0f9      	b.n	848a <__aeabi_dsub+0x46e>
    8296:	1a6a      	subs	r2, r5, r1
    8298:	4691      	mov	r9, r2
    829a:	454d      	cmp	r5, r9
    829c:	41b6      	sbcs	r6, r6
    829e:	1a3a      	subs	r2, r7, r0
    82a0:	4276      	negs	r6, r6
    82a2:	1b92      	subs	r2, r2, r6
    82a4:	4690      	mov	r8, r2
    82a6:	0212      	lsls	r2, r2, #8
    82a8:	d400      	bmi.n	82ac <__aeabi_dsub+0x290>
    82aa:	e099      	b.n	83e0 <__aeabi_dsub+0x3c4>
    82ac:	1b4d      	subs	r5, r1, r5
    82ae:	42a9      	cmp	r1, r5
    82b0:	4189      	sbcs	r1, r1
    82b2:	1bc7      	subs	r7, r0, r7
    82b4:	4249      	negs	r1, r1
    82b6:	1a7a      	subs	r2, r7, r1
    82b8:	4690      	mov	r8, r2
    82ba:	469a      	mov	sl, r3
    82bc:	e73c      	b.n	8138 <__aeabi_dsub+0x11c>
    82be:	4652      	mov	r2, sl
    82c0:	2301      	movs	r3, #1
    82c2:	2500      	movs	r5, #0
    82c4:	4013      	ands	r3, r2
    82c6:	2200      	movs	r2, #0
    82c8:	e6f5      	b.n	80b6 <__aeabi_dsub+0x9a>
    82ca:	0028      	movs	r0, r5
    82cc:	f000 fbaa 	bl	8a24 <__clzsi2>
    82d0:	3020      	adds	r0, #32
    82d2:	0003      	movs	r3, r0
    82d4:	3b08      	subs	r3, #8
    82d6:	2b1f      	cmp	r3, #31
    82d8:	dc00      	bgt.n	82dc <__aeabi_dsub+0x2c0>
    82da:	e739      	b.n	8150 <__aeabi_dsub+0x134>
    82dc:	002a      	movs	r2, r5
    82de:	3828      	subs	r0, #40	; 0x28
    82e0:	4082      	lsls	r2, r0
    82e2:	2500      	movs	r5, #0
    82e4:	429c      	cmp	r4, r3
    82e6:	dc00      	bgt.n	82ea <__aeabi_dsub+0x2ce>
    82e8:	e73e      	b.n	8168 <__aeabi_dsub+0x14c>
    82ea:	4f26      	ldr	r7, [pc, #152]	; (8384 <__aeabi_dsub+0x368>)
    82ec:	1ae4      	subs	r4, r4, r3
    82ee:	4017      	ands	r7, r2
    82f0:	e6c0      	b.n	8074 <__aeabi_dsub+0x58>
    82f2:	4301      	orrs	r1, r0
    82f4:	1e48      	subs	r0, r1, #1
    82f6:	4181      	sbcs	r1, r0
    82f8:	2200      	movs	r2, #0
    82fa:	b2c9      	uxtb	r1, r1
    82fc:	e710      	b.n	8120 <__aeabi_dsub+0x104>
    82fe:	2e00      	cmp	r6, #0
    8300:	d000      	beq.n	8304 <__aeabi_dsub+0x2e8>
    8302:	e0f1      	b.n	84e8 <__aeabi_dsub+0x4cc>
    8304:	1c62      	adds	r2, r4, #1
    8306:	4694      	mov	ip, r2
    8308:	0552      	lsls	r2, r2, #21
    830a:	0d52      	lsrs	r2, r2, #21
    830c:	2a01      	cmp	r2, #1
    830e:	dc00      	bgt.n	8312 <__aeabi_dsub+0x2f6>
    8310:	e0a0      	b.n	8454 <__aeabi_dsub+0x438>
    8312:	4a1b      	ldr	r2, [pc, #108]	; (8380 <__aeabi_dsub+0x364>)
    8314:	4594      	cmp	ip, r2
    8316:	d100      	bne.n	831a <__aeabi_dsub+0x2fe>
    8318:	e0c5      	b.n	84a6 <__aeabi_dsub+0x48a>
    831a:	1869      	adds	r1, r5, r1
    831c:	42a9      	cmp	r1, r5
    831e:	4192      	sbcs	r2, r2
    8320:	183f      	adds	r7, r7, r0
    8322:	4252      	negs	r2, r2
    8324:	19d2      	adds	r2, r2, r7
    8326:	0849      	lsrs	r1, r1, #1
    8328:	07d5      	lsls	r5, r2, #31
    832a:	430d      	orrs	r5, r1
    832c:	0857      	lsrs	r7, r2, #1
    832e:	4664      	mov	r4, ip
    8330:	e6a0      	b.n	8074 <__aeabi_dsub+0x58>
    8332:	4b13      	ldr	r3, [pc, #76]	; (8380 <__aeabi_dsub+0x364>)
    8334:	429c      	cmp	r4, r3
    8336:	d000      	beq.n	833a <__aeabi_dsub+0x31e>
    8338:	e6d9      	b.n	80ee <__aeabi_dsub+0xd2>
    833a:	e69b      	b.n	8074 <__aeabi_dsub+0x58>
    833c:	0011      	movs	r1, r2
    833e:	3c1f      	subs	r4, #31
    8340:	40e1      	lsrs	r1, r4
    8342:	000c      	movs	r4, r1
    8344:	2b20      	cmp	r3, #32
    8346:	d100      	bne.n	834a <__aeabi_dsub+0x32e>
    8348:	e080      	b.n	844c <__aeabi_dsub+0x430>
    834a:	2140      	movs	r1, #64	; 0x40
    834c:	1acb      	subs	r3, r1, r3
    834e:	409a      	lsls	r2, r3
    8350:	4315      	orrs	r5, r2
    8352:	1e6a      	subs	r2, r5, #1
    8354:	4195      	sbcs	r5, r2
    8356:	2700      	movs	r7, #0
    8358:	4325      	orrs	r5, r4
    835a:	2400      	movs	r4, #0
    835c:	e71f      	b.n	819e <__aeabi_dsub+0x182>
    835e:	4663      	mov	r3, ip
    8360:	0002      	movs	r2, r0
    8362:	3b20      	subs	r3, #32
    8364:	40da      	lsrs	r2, r3
    8366:	4663      	mov	r3, ip
    8368:	2b20      	cmp	r3, #32
    836a:	d071      	beq.n	8450 <__aeabi_dsub+0x434>
    836c:	2340      	movs	r3, #64	; 0x40
    836e:	4666      	mov	r6, ip
    8370:	1b9b      	subs	r3, r3, r6
    8372:	4098      	lsls	r0, r3
    8374:	4301      	orrs	r1, r0
    8376:	1e48      	subs	r0, r1, #1
    8378:	4181      	sbcs	r1, r0
    837a:	4311      	orrs	r1, r2
    837c:	2200      	movs	r2, #0
    837e:	e6cf      	b.n	8120 <__aeabi_dsub+0x104>
    8380:	000007ff 	.word	0x000007ff
    8384:	ff7fffff 	.word	0xff7fffff
    8388:	800fffff 	.word	0x800fffff
    838c:	2c00      	cmp	r4, #0
    838e:	d048      	beq.n	8422 <__aeabi_dsub+0x406>
    8390:	4cca      	ldr	r4, [pc, #808]	; (86bc <__aeabi_dsub+0x6a0>)
    8392:	42a2      	cmp	r2, r4
    8394:	d100      	bne.n	8398 <__aeabi_dsub+0x37c>
    8396:	e0a2      	b.n	84de <__aeabi_dsub+0x4c2>
    8398:	4274      	negs	r4, r6
    839a:	46a1      	mov	r9, r4
    839c:	2480      	movs	r4, #128	; 0x80
    839e:	0424      	lsls	r4, r4, #16
    83a0:	4327      	orrs	r7, r4
    83a2:	464c      	mov	r4, r9
    83a4:	2c38      	cmp	r4, #56	; 0x38
    83a6:	dd00      	ble.n	83aa <__aeabi_dsub+0x38e>
    83a8:	e0db      	b.n	8562 <__aeabi_dsub+0x546>
    83aa:	2c1f      	cmp	r4, #31
    83ac:	dd00      	ble.n	83b0 <__aeabi_dsub+0x394>
    83ae:	e144      	b.n	863a <__aeabi_dsub+0x61e>
    83b0:	464e      	mov	r6, r9
    83b2:	2420      	movs	r4, #32
    83b4:	1ba4      	subs	r4, r4, r6
    83b6:	003e      	movs	r6, r7
    83b8:	40a6      	lsls	r6, r4
    83ba:	46a2      	mov	sl, r4
    83bc:	46b0      	mov	r8, r6
    83be:	464c      	mov	r4, r9
    83c0:	002e      	movs	r6, r5
    83c2:	40e6      	lsrs	r6, r4
    83c4:	46b4      	mov	ip, r6
    83c6:	4646      	mov	r6, r8
    83c8:	4664      	mov	r4, ip
    83ca:	4326      	orrs	r6, r4
    83cc:	4654      	mov	r4, sl
    83ce:	40a5      	lsls	r5, r4
    83d0:	1e6c      	subs	r4, r5, #1
    83d2:	41a5      	sbcs	r5, r4
    83d4:	0034      	movs	r4, r6
    83d6:	432c      	orrs	r4, r5
    83d8:	464d      	mov	r5, r9
    83da:	40ef      	lsrs	r7, r5
    83dc:	1b0d      	subs	r5, r1, r4
    83de:	e028      	b.n	8432 <__aeabi_dsub+0x416>
    83e0:	464a      	mov	r2, r9
    83e2:	4643      	mov	r3, r8
    83e4:	464d      	mov	r5, r9
    83e6:	431a      	orrs	r2, r3
    83e8:	d000      	beq.n	83ec <__aeabi_dsub+0x3d0>
    83ea:	e6a5      	b.n	8138 <__aeabi_dsub+0x11c>
    83ec:	2300      	movs	r3, #0
    83ee:	2400      	movs	r4, #0
    83f0:	2500      	movs	r5, #0
    83f2:	e6de      	b.n	81b2 <__aeabi_dsub+0x196>
    83f4:	2a1f      	cmp	r2, #31
    83f6:	dc5a      	bgt.n	84ae <__aeabi_dsub+0x492>
    83f8:	4666      	mov	r6, ip
    83fa:	2220      	movs	r2, #32
    83fc:	1b92      	subs	r2, r2, r6
    83fe:	0006      	movs	r6, r0
    8400:	4096      	lsls	r6, r2
    8402:	4691      	mov	r9, r2
    8404:	46b0      	mov	r8, r6
    8406:	4662      	mov	r2, ip
    8408:	000e      	movs	r6, r1
    840a:	40d6      	lsrs	r6, r2
    840c:	4642      	mov	r2, r8
    840e:	4316      	orrs	r6, r2
    8410:	464a      	mov	r2, r9
    8412:	4091      	lsls	r1, r2
    8414:	1e4a      	subs	r2, r1, #1
    8416:	4191      	sbcs	r1, r2
    8418:	0002      	movs	r2, r0
    841a:	4660      	mov	r0, ip
    841c:	4331      	orrs	r1, r6
    841e:	40c2      	lsrs	r2, r0
    8420:	e6e4      	b.n	81ec <__aeabi_dsub+0x1d0>
    8422:	003c      	movs	r4, r7
    8424:	432c      	orrs	r4, r5
    8426:	d05a      	beq.n	84de <__aeabi_dsub+0x4c2>
    8428:	43f4      	mvns	r4, r6
    842a:	46a1      	mov	r9, r4
    842c:	2c00      	cmp	r4, #0
    842e:	d152      	bne.n	84d6 <__aeabi_dsub+0x4ba>
    8430:	1b4d      	subs	r5, r1, r5
    8432:	42a9      	cmp	r1, r5
    8434:	4189      	sbcs	r1, r1
    8436:	1bc7      	subs	r7, r0, r7
    8438:	4249      	negs	r1, r1
    843a:	1a7f      	subs	r7, r7, r1
    843c:	0014      	movs	r4, r2
    843e:	469a      	mov	sl, r3
    8440:	e675      	b.n	812e <__aeabi_dsub+0x112>
    8442:	4a9e      	ldr	r2, [pc, #632]	; (86bc <__aeabi_dsub+0x6a0>)
    8444:	4294      	cmp	r4, r2
    8446:	d000      	beq.n	844a <__aeabi_dsub+0x42e>
    8448:	e6c7      	b.n	81da <__aeabi_dsub+0x1be>
    844a:	e613      	b.n	8074 <__aeabi_dsub+0x58>
    844c:	2200      	movs	r2, #0
    844e:	e77f      	b.n	8350 <__aeabi_dsub+0x334>
    8450:	2000      	movs	r0, #0
    8452:	e78f      	b.n	8374 <__aeabi_dsub+0x358>
    8454:	2c00      	cmp	r4, #0
    8456:	d000      	beq.n	845a <__aeabi_dsub+0x43e>
    8458:	e0c8      	b.n	85ec <__aeabi_dsub+0x5d0>
    845a:	003b      	movs	r3, r7
    845c:	432b      	orrs	r3, r5
    845e:	d100      	bne.n	8462 <__aeabi_dsub+0x446>
    8460:	e10f      	b.n	8682 <__aeabi_dsub+0x666>
    8462:	0003      	movs	r3, r0
    8464:	430b      	orrs	r3, r1
    8466:	d100      	bne.n	846a <__aeabi_dsub+0x44e>
    8468:	e604      	b.n	8074 <__aeabi_dsub+0x58>
    846a:	1869      	adds	r1, r5, r1
    846c:	42a9      	cmp	r1, r5
    846e:	419b      	sbcs	r3, r3
    8470:	183f      	adds	r7, r7, r0
    8472:	425b      	negs	r3, r3
    8474:	19df      	adds	r7, r3, r7
    8476:	023b      	lsls	r3, r7, #8
    8478:	d400      	bmi.n	847c <__aeabi_dsub+0x460>
    847a:	e11a      	b.n	86b2 <__aeabi_dsub+0x696>
    847c:	4b90      	ldr	r3, [pc, #576]	; (86c0 <__aeabi_dsub+0x6a4>)
    847e:	000d      	movs	r5, r1
    8480:	401f      	ands	r7, r3
    8482:	4664      	mov	r4, ip
    8484:	e5f6      	b.n	8074 <__aeabi_dsub+0x58>
    8486:	469a      	mov	sl, r3
    8488:	e689      	b.n	819e <__aeabi_dsub+0x182>
    848a:	003a      	movs	r2, r7
    848c:	432a      	orrs	r2, r5
    848e:	2c00      	cmp	r4, #0
    8490:	d15c      	bne.n	854c <__aeabi_dsub+0x530>
    8492:	2a00      	cmp	r2, #0
    8494:	d175      	bne.n	8582 <__aeabi_dsub+0x566>
    8496:	0002      	movs	r2, r0
    8498:	430a      	orrs	r2, r1
    849a:	d100      	bne.n	849e <__aeabi_dsub+0x482>
    849c:	e0ca      	b.n	8634 <__aeabi_dsub+0x618>
    849e:	0007      	movs	r7, r0
    84a0:	000d      	movs	r5, r1
    84a2:	469a      	mov	sl, r3
    84a4:	e5e6      	b.n	8074 <__aeabi_dsub+0x58>
    84a6:	4664      	mov	r4, ip
    84a8:	2200      	movs	r2, #0
    84aa:	2500      	movs	r5, #0
    84ac:	e681      	b.n	81b2 <__aeabi_dsub+0x196>
    84ae:	4662      	mov	r2, ip
    84b0:	0006      	movs	r6, r0
    84b2:	3a20      	subs	r2, #32
    84b4:	40d6      	lsrs	r6, r2
    84b6:	4662      	mov	r2, ip
    84b8:	46b0      	mov	r8, r6
    84ba:	2a20      	cmp	r2, #32
    84bc:	d100      	bne.n	84c0 <__aeabi_dsub+0x4a4>
    84be:	e0b7      	b.n	8630 <__aeabi_dsub+0x614>
    84c0:	2240      	movs	r2, #64	; 0x40
    84c2:	4666      	mov	r6, ip
    84c4:	1b92      	subs	r2, r2, r6
    84c6:	4090      	lsls	r0, r2
    84c8:	4301      	orrs	r1, r0
    84ca:	4642      	mov	r2, r8
    84cc:	1e48      	subs	r0, r1, #1
    84ce:	4181      	sbcs	r1, r0
    84d0:	4311      	orrs	r1, r2
    84d2:	2200      	movs	r2, #0
    84d4:	e68a      	b.n	81ec <__aeabi_dsub+0x1d0>
    84d6:	4c79      	ldr	r4, [pc, #484]	; (86bc <__aeabi_dsub+0x6a0>)
    84d8:	42a2      	cmp	r2, r4
    84da:	d000      	beq.n	84de <__aeabi_dsub+0x4c2>
    84dc:	e761      	b.n	83a2 <__aeabi_dsub+0x386>
    84de:	0007      	movs	r7, r0
    84e0:	000d      	movs	r5, r1
    84e2:	0014      	movs	r4, r2
    84e4:	469a      	mov	sl, r3
    84e6:	e5c5      	b.n	8074 <__aeabi_dsub+0x58>
    84e8:	2c00      	cmp	r4, #0
    84ea:	d141      	bne.n	8570 <__aeabi_dsub+0x554>
    84ec:	003c      	movs	r4, r7
    84ee:	432c      	orrs	r4, r5
    84f0:	d078      	beq.n	85e4 <__aeabi_dsub+0x5c8>
    84f2:	43f4      	mvns	r4, r6
    84f4:	46a1      	mov	r9, r4
    84f6:	2c00      	cmp	r4, #0
    84f8:	d020      	beq.n	853c <__aeabi_dsub+0x520>
    84fa:	4c70      	ldr	r4, [pc, #448]	; (86bc <__aeabi_dsub+0x6a0>)
    84fc:	42a2      	cmp	r2, r4
    84fe:	d071      	beq.n	85e4 <__aeabi_dsub+0x5c8>
    8500:	464c      	mov	r4, r9
    8502:	2c38      	cmp	r4, #56	; 0x38
    8504:	dd00      	ble.n	8508 <__aeabi_dsub+0x4ec>
    8506:	e0b2      	b.n	866e <__aeabi_dsub+0x652>
    8508:	2c1f      	cmp	r4, #31
    850a:	dd00      	ble.n	850e <__aeabi_dsub+0x4f2>
    850c:	e0bc      	b.n	8688 <__aeabi_dsub+0x66c>
    850e:	2620      	movs	r6, #32
    8510:	1b34      	subs	r4, r6, r4
    8512:	46a2      	mov	sl, r4
    8514:	003c      	movs	r4, r7
    8516:	4656      	mov	r6, sl
    8518:	40b4      	lsls	r4, r6
    851a:	464e      	mov	r6, r9
    851c:	46a0      	mov	r8, r4
    851e:	002c      	movs	r4, r5
    8520:	40f4      	lsrs	r4, r6
    8522:	46a4      	mov	ip, r4
    8524:	4644      	mov	r4, r8
    8526:	4666      	mov	r6, ip
    8528:	4334      	orrs	r4, r6
    852a:	46a4      	mov	ip, r4
    852c:	4654      	mov	r4, sl
    852e:	40a5      	lsls	r5, r4
    8530:	4664      	mov	r4, ip
    8532:	1e6e      	subs	r6, r5, #1
    8534:	41b5      	sbcs	r5, r6
    8536:	4325      	orrs	r5, r4
    8538:	464c      	mov	r4, r9
    853a:	40e7      	lsrs	r7, r4
    853c:	186d      	adds	r5, r5, r1
    853e:	428d      	cmp	r5, r1
    8540:	4189      	sbcs	r1, r1
    8542:	183f      	adds	r7, r7, r0
    8544:	4249      	negs	r1, r1
    8546:	19cf      	adds	r7, r1, r7
    8548:	0014      	movs	r4, r2
    854a:	e656      	b.n	81fa <__aeabi_dsub+0x1de>
    854c:	2a00      	cmp	r2, #0
    854e:	d12f      	bne.n	85b0 <__aeabi_dsub+0x594>
    8550:	0002      	movs	r2, r0
    8552:	430a      	orrs	r2, r1
    8554:	d100      	bne.n	8558 <__aeabi_dsub+0x53c>
    8556:	e084      	b.n	8662 <__aeabi_dsub+0x646>
    8558:	0007      	movs	r7, r0
    855a:	000d      	movs	r5, r1
    855c:	469a      	mov	sl, r3
    855e:	4c57      	ldr	r4, [pc, #348]	; (86bc <__aeabi_dsub+0x6a0>)
    8560:	e588      	b.n	8074 <__aeabi_dsub+0x58>
    8562:	433d      	orrs	r5, r7
    8564:	1e6f      	subs	r7, r5, #1
    8566:	41bd      	sbcs	r5, r7
    8568:	b2ec      	uxtb	r4, r5
    856a:	2700      	movs	r7, #0
    856c:	1b0d      	subs	r5, r1, r4
    856e:	e760      	b.n	8432 <__aeabi_dsub+0x416>
    8570:	4c52      	ldr	r4, [pc, #328]	; (86bc <__aeabi_dsub+0x6a0>)
    8572:	42a2      	cmp	r2, r4
    8574:	d036      	beq.n	85e4 <__aeabi_dsub+0x5c8>
    8576:	4274      	negs	r4, r6
    8578:	2680      	movs	r6, #128	; 0x80
    857a:	0436      	lsls	r6, r6, #16
    857c:	46a1      	mov	r9, r4
    857e:	4337      	orrs	r7, r6
    8580:	e7be      	b.n	8500 <__aeabi_dsub+0x4e4>
    8582:	0002      	movs	r2, r0
    8584:	430a      	orrs	r2, r1
    8586:	d100      	bne.n	858a <__aeabi_dsub+0x56e>
    8588:	e574      	b.n	8074 <__aeabi_dsub+0x58>
    858a:	1a6a      	subs	r2, r5, r1
    858c:	4690      	mov	r8, r2
    858e:	4545      	cmp	r5, r8
    8590:	41b6      	sbcs	r6, r6
    8592:	1a3a      	subs	r2, r7, r0
    8594:	4276      	negs	r6, r6
    8596:	1b92      	subs	r2, r2, r6
    8598:	4694      	mov	ip, r2
    859a:	0212      	lsls	r2, r2, #8
    859c:	d400      	bmi.n	85a0 <__aeabi_dsub+0x584>
    859e:	e5f7      	b.n	8190 <__aeabi_dsub+0x174>
    85a0:	1b4d      	subs	r5, r1, r5
    85a2:	42a9      	cmp	r1, r5
    85a4:	4189      	sbcs	r1, r1
    85a6:	1bc7      	subs	r7, r0, r7
    85a8:	4249      	negs	r1, r1
    85aa:	1a7f      	subs	r7, r7, r1
    85ac:	469a      	mov	sl, r3
    85ae:	e561      	b.n	8074 <__aeabi_dsub+0x58>
    85b0:	0002      	movs	r2, r0
    85b2:	430a      	orrs	r2, r1
    85b4:	d03a      	beq.n	862c <__aeabi_dsub+0x610>
    85b6:	08ed      	lsrs	r5, r5, #3
    85b8:	077c      	lsls	r4, r7, #29
    85ba:	432c      	orrs	r4, r5
    85bc:	2580      	movs	r5, #128	; 0x80
    85be:	08fa      	lsrs	r2, r7, #3
    85c0:	032d      	lsls	r5, r5, #12
    85c2:	422a      	tst	r2, r5
    85c4:	d008      	beq.n	85d8 <__aeabi_dsub+0x5bc>
    85c6:	08c7      	lsrs	r7, r0, #3
    85c8:	422f      	tst	r7, r5
    85ca:	d105      	bne.n	85d8 <__aeabi_dsub+0x5bc>
    85cc:	0745      	lsls	r5, r0, #29
    85ce:	002c      	movs	r4, r5
    85d0:	003a      	movs	r2, r7
    85d2:	469a      	mov	sl, r3
    85d4:	08c9      	lsrs	r1, r1, #3
    85d6:	430c      	orrs	r4, r1
    85d8:	0f67      	lsrs	r7, r4, #29
    85da:	00d2      	lsls	r2, r2, #3
    85dc:	00e5      	lsls	r5, r4, #3
    85de:	4317      	orrs	r7, r2
    85e0:	4c36      	ldr	r4, [pc, #216]	; (86bc <__aeabi_dsub+0x6a0>)
    85e2:	e547      	b.n	8074 <__aeabi_dsub+0x58>
    85e4:	0007      	movs	r7, r0
    85e6:	000d      	movs	r5, r1
    85e8:	0014      	movs	r4, r2
    85ea:	e543      	b.n	8074 <__aeabi_dsub+0x58>
    85ec:	003a      	movs	r2, r7
    85ee:	432a      	orrs	r2, r5
    85f0:	d043      	beq.n	867a <__aeabi_dsub+0x65e>
    85f2:	0002      	movs	r2, r0
    85f4:	430a      	orrs	r2, r1
    85f6:	d019      	beq.n	862c <__aeabi_dsub+0x610>
    85f8:	08ed      	lsrs	r5, r5, #3
    85fa:	077c      	lsls	r4, r7, #29
    85fc:	432c      	orrs	r4, r5
    85fe:	2580      	movs	r5, #128	; 0x80
    8600:	08fa      	lsrs	r2, r7, #3
    8602:	032d      	lsls	r5, r5, #12
    8604:	422a      	tst	r2, r5
    8606:	d007      	beq.n	8618 <__aeabi_dsub+0x5fc>
    8608:	08c6      	lsrs	r6, r0, #3
    860a:	422e      	tst	r6, r5
    860c:	d104      	bne.n	8618 <__aeabi_dsub+0x5fc>
    860e:	0747      	lsls	r7, r0, #29
    8610:	003c      	movs	r4, r7
    8612:	0032      	movs	r2, r6
    8614:	08c9      	lsrs	r1, r1, #3
    8616:	430c      	orrs	r4, r1
    8618:	00d7      	lsls	r7, r2, #3
    861a:	0f62      	lsrs	r2, r4, #29
    861c:	00e5      	lsls	r5, r4, #3
    861e:	4317      	orrs	r7, r2
    8620:	469a      	mov	sl, r3
    8622:	4c26      	ldr	r4, [pc, #152]	; (86bc <__aeabi_dsub+0x6a0>)
    8624:	e526      	b.n	8074 <__aeabi_dsub+0x58>
    8626:	2200      	movs	r2, #0
    8628:	2500      	movs	r5, #0
    862a:	e544      	b.n	80b6 <__aeabi_dsub+0x9a>
    862c:	4c23      	ldr	r4, [pc, #140]	; (86bc <__aeabi_dsub+0x6a0>)
    862e:	e521      	b.n	8074 <__aeabi_dsub+0x58>
    8630:	2000      	movs	r0, #0
    8632:	e749      	b.n	84c8 <__aeabi_dsub+0x4ac>
    8634:	2300      	movs	r3, #0
    8636:	2500      	movs	r5, #0
    8638:	e5bb      	b.n	81b2 <__aeabi_dsub+0x196>
    863a:	464c      	mov	r4, r9
    863c:	003e      	movs	r6, r7
    863e:	3c20      	subs	r4, #32
    8640:	40e6      	lsrs	r6, r4
    8642:	464c      	mov	r4, r9
    8644:	46b4      	mov	ip, r6
    8646:	2c20      	cmp	r4, #32
    8648:	d031      	beq.n	86ae <__aeabi_dsub+0x692>
    864a:	2440      	movs	r4, #64	; 0x40
    864c:	464e      	mov	r6, r9
    864e:	1ba6      	subs	r6, r4, r6
    8650:	40b7      	lsls	r7, r6
    8652:	433d      	orrs	r5, r7
    8654:	1e6c      	subs	r4, r5, #1
    8656:	41a5      	sbcs	r5, r4
    8658:	4664      	mov	r4, ip
    865a:	432c      	orrs	r4, r5
    865c:	2700      	movs	r7, #0
    865e:	1b0d      	subs	r5, r1, r4
    8660:	e6e7      	b.n	8432 <__aeabi_dsub+0x416>
    8662:	2280      	movs	r2, #128	; 0x80
    8664:	2300      	movs	r3, #0
    8666:	0312      	lsls	r2, r2, #12
    8668:	4c14      	ldr	r4, [pc, #80]	; (86bc <__aeabi_dsub+0x6a0>)
    866a:	2500      	movs	r5, #0
    866c:	e5a1      	b.n	81b2 <__aeabi_dsub+0x196>
    866e:	433d      	orrs	r5, r7
    8670:	1e6f      	subs	r7, r5, #1
    8672:	41bd      	sbcs	r5, r7
    8674:	2700      	movs	r7, #0
    8676:	b2ed      	uxtb	r5, r5
    8678:	e760      	b.n	853c <__aeabi_dsub+0x520>
    867a:	0007      	movs	r7, r0
    867c:	000d      	movs	r5, r1
    867e:	4c0f      	ldr	r4, [pc, #60]	; (86bc <__aeabi_dsub+0x6a0>)
    8680:	e4f8      	b.n	8074 <__aeabi_dsub+0x58>
    8682:	0007      	movs	r7, r0
    8684:	000d      	movs	r5, r1
    8686:	e4f5      	b.n	8074 <__aeabi_dsub+0x58>
    8688:	464e      	mov	r6, r9
    868a:	003c      	movs	r4, r7
    868c:	3e20      	subs	r6, #32
    868e:	40f4      	lsrs	r4, r6
    8690:	46a0      	mov	r8, r4
    8692:	464c      	mov	r4, r9
    8694:	2c20      	cmp	r4, #32
    8696:	d00e      	beq.n	86b6 <__aeabi_dsub+0x69a>
    8698:	2440      	movs	r4, #64	; 0x40
    869a:	464e      	mov	r6, r9
    869c:	1ba4      	subs	r4, r4, r6
    869e:	40a7      	lsls	r7, r4
    86a0:	433d      	orrs	r5, r7
    86a2:	1e6f      	subs	r7, r5, #1
    86a4:	41bd      	sbcs	r5, r7
    86a6:	4644      	mov	r4, r8
    86a8:	2700      	movs	r7, #0
    86aa:	4325      	orrs	r5, r4
    86ac:	e746      	b.n	853c <__aeabi_dsub+0x520>
    86ae:	2700      	movs	r7, #0
    86b0:	e7cf      	b.n	8652 <__aeabi_dsub+0x636>
    86b2:	000d      	movs	r5, r1
    86b4:	e573      	b.n	819e <__aeabi_dsub+0x182>
    86b6:	2700      	movs	r7, #0
    86b8:	e7f2      	b.n	86a0 <__aeabi_dsub+0x684>
    86ba:	46c0      	nop			; (mov r8, r8)
    86bc:	000007ff 	.word	0x000007ff
    86c0:	ff7fffff 	.word	0xff7fffff

000086c4 <__aeabi_dcmpun>:
    86c4:	b570      	push	{r4, r5, r6, lr}
    86c6:	4e0e      	ldr	r6, [pc, #56]	; (8700 <__aeabi_dcmpun+0x3c>)
    86c8:	030c      	lsls	r4, r1, #12
    86ca:	031d      	lsls	r5, r3, #12
    86cc:	0049      	lsls	r1, r1, #1
    86ce:	005b      	lsls	r3, r3, #1
    86d0:	0b24      	lsrs	r4, r4, #12
    86d2:	0d49      	lsrs	r1, r1, #21
    86d4:	0b2d      	lsrs	r5, r5, #12
    86d6:	0d5b      	lsrs	r3, r3, #21
    86d8:	42b1      	cmp	r1, r6
    86da:	d004      	beq.n	86e6 <__aeabi_dcmpun+0x22>
    86dc:	4908      	ldr	r1, [pc, #32]	; (8700 <__aeabi_dcmpun+0x3c>)
    86de:	2000      	movs	r0, #0
    86e0:	428b      	cmp	r3, r1
    86e2:	d008      	beq.n	86f6 <__aeabi_dcmpun+0x32>
    86e4:	bd70      	pop	{r4, r5, r6, pc}
    86e6:	4304      	orrs	r4, r0
    86e8:	2001      	movs	r0, #1
    86ea:	2c00      	cmp	r4, #0
    86ec:	d1fa      	bne.n	86e4 <__aeabi_dcmpun+0x20>
    86ee:	4904      	ldr	r1, [pc, #16]	; (8700 <__aeabi_dcmpun+0x3c>)
    86f0:	2000      	movs	r0, #0
    86f2:	428b      	cmp	r3, r1
    86f4:	d1f6      	bne.n	86e4 <__aeabi_dcmpun+0x20>
    86f6:	4315      	orrs	r5, r2
    86f8:	0028      	movs	r0, r5
    86fa:	1e45      	subs	r5, r0, #1
    86fc:	41a8      	sbcs	r0, r5
    86fe:	e7f1      	b.n	86e4 <__aeabi_dcmpun+0x20>
    8700:	000007ff 	.word	0x000007ff

00008704 <__aeabi_d2iz>:
    8704:	030b      	lsls	r3, r1, #12
    8706:	b530      	push	{r4, r5, lr}
    8708:	4d13      	ldr	r5, [pc, #76]	; (8758 <__aeabi_d2iz+0x54>)
    870a:	0b1a      	lsrs	r2, r3, #12
    870c:	004b      	lsls	r3, r1, #1
    870e:	0d5b      	lsrs	r3, r3, #21
    8710:	0fc9      	lsrs	r1, r1, #31
    8712:	2400      	movs	r4, #0
    8714:	42ab      	cmp	r3, r5
    8716:	dd11      	ble.n	873c <__aeabi_d2iz+0x38>
    8718:	4c10      	ldr	r4, [pc, #64]	; (875c <__aeabi_d2iz+0x58>)
    871a:	42a3      	cmp	r3, r4
    871c:	dc10      	bgt.n	8740 <__aeabi_d2iz+0x3c>
    871e:	2480      	movs	r4, #128	; 0x80
    8720:	0364      	lsls	r4, r4, #13
    8722:	4322      	orrs	r2, r4
    8724:	4c0e      	ldr	r4, [pc, #56]	; (8760 <__aeabi_d2iz+0x5c>)
    8726:	1ae4      	subs	r4, r4, r3
    8728:	2c1f      	cmp	r4, #31
    872a:	dd0c      	ble.n	8746 <__aeabi_d2iz+0x42>
    872c:	480d      	ldr	r0, [pc, #52]	; (8764 <__aeabi_d2iz+0x60>)
    872e:	1ac3      	subs	r3, r0, r3
    8730:	40da      	lsrs	r2, r3
    8732:	0013      	movs	r3, r2
    8734:	425c      	negs	r4, r3
    8736:	2900      	cmp	r1, #0
    8738:	d100      	bne.n	873c <__aeabi_d2iz+0x38>
    873a:	001c      	movs	r4, r3
    873c:	0020      	movs	r0, r4
    873e:	bd30      	pop	{r4, r5, pc}
    8740:	4b09      	ldr	r3, [pc, #36]	; (8768 <__aeabi_d2iz+0x64>)
    8742:	18cc      	adds	r4, r1, r3
    8744:	e7fa      	b.n	873c <__aeabi_d2iz+0x38>
    8746:	40e0      	lsrs	r0, r4
    8748:	4c08      	ldr	r4, [pc, #32]	; (876c <__aeabi_d2iz+0x68>)
    874a:	46a4      	mov	ip, r4
    874c:	4463      	add	r3, ip
    874e:	409a      	lsls	r2, r3
    8750:	0013      	movs	r3, r2
    8752:	4303      	orrs	r3, r0
    8754:	e7ee      	b.n	8734 <__aeabi_d2iz+0x30>
    8756:	46c0      	nop			; (mov r8, r8)
    8758:	000003fe 	.word	0x000003fe
    875c:	0000041d 	.word	0x0000041d
    8760:	00000433 	.word	0x00000433
    8764:	00000413 	.word	0x00000413
    8768:	7fffffff 	.word	0x7fffffff
    876c:	fffffbed 	.word	0xfffffbed

00008770 <__aeabi_i2d>:
    8770:	b570      	push	{r4, r5, r6, lr}
    8772:	2800      	cmp	r0, #0
    8774:	d030      	beq.n	87d8 <__aeabi_i2d+0x68>
    8776:	17c3      	asrs	r3, r0, #31
    8778:	18c4      	adds	r4, r0, r3
    877a:	405c      	eors	r4, r3
    877c:	0fc5      	lsrs	r5, r0, #31
    877e:	0020      	movs	r0, r4
    8780:	f000 f950 	bl	8a24 <__clzsi2>
    8784:	4b17      	ldr	r3, [pc, #92]	; (87e4 <__aeabi_i2d+0x74>)
    8786:	4a18      	ldr	r2, [pc, #96]	; (87e8 <__aeabi_i2d+0x78>)
    8788:	1a1b      	subs	r3, r3, r0
    878a:	1ad2      	subs	r2, r2, r3
    878c:	2a1f      	cmp	r2, #31
    878e:	dd18      	ble.n	87c2 <__aeabi_i2d+0x52>
    8790:	4a16      	ldr	r2, [pc, #88]	; (87ec <__aeabi_i2d+0x7c>)
    8792:	1ad2      	subs	r2, r2, r3
    8794:	4094      	lsls	r4, r2
    8796:	2200      	movs	r2, #0
    8798:	0324      	lsls	r4, r4, #12
    879a:	055b      	lsls	r3, r3, #21
    879c:	0b24      	lsrs	r4, r4, #12
    879e:	0d5b      	lsrs	r3, r3, #21
    87a0:	2100      	movs	r1, #0
    87a2:	0010      	movs	r0, r2
    87a4:	0324      	lsls	r4, r4, #12
    87a6:	0d0a      	lsrs	r2, r1, #20
    87a8:	0512      	lsls	r2, r2, #20
    87aa:	0b24      	lsrs	r4, r4, #12
    87ac:	4314      	orrs	r4, r2
    87ae:	4a10      	ldr	r2, [pc, #64]	; (87f0 <__aeabi_i2d+0x80>)
    87b0:	051b      	lsls	r3, r3, #20
    87b2:	4014      	ands	r4, r2
    87b4:	431c      	orrs	r4, r3
    87b6:	0064      	lsls	r4, r4, #1
    87b8:	07ed      	lsls	r5, r5, #31
    87ba:	0864      	lsrs	r4, r4, #1
    87bc:	432c      	orrs	r4, r5
    87be:	0021      	movs	r1, r4
    87c0:	bd70      	pop	{r4, r5, r6, pc}
    87c2:	0021      	movs	r1, r4
    87c4:	4091      	lsls	r1, r2
    87c6:	000a      	movs	r2, r1
    87c8:	210b      	movs	r1, #11
    87ca:	1a08      	subs	r0, r1, r0
    87cc:	40c4      	lsrs	r4, r0
    87ce:	055b      	lsls	r3, r3, #21
    87d0:	0324      	lsls	r4, r4, #12
    87d2:	0b24      	lsrs	r4, r4, #12
    87d4:	0d5b      	lsrs	r3, r3, #21
    87d6:	e7e3      	b.n	87a0 <__aeabi_i2d+0x30>
    87d8:	2500      	movs	r5, #0
    87da:	2300      	movs	r3, #0
    87dc:	2400      	movs	r4, #0
    87de:	2200      	movs	r2, #0
    87e0:	e7de      	b.n	87a0 <__aeabi_i2d+0x30>
    87e2:	46c0      	nop			; (mov r8, r8)
    87e4:	0000041e 	.word	0x0000041e
    87e8:	00000433 	.word	0x00000433
    87ec:	00000413 	.word	0x00000413
    87f0:	800fffff 	.word	0x800fffff

000087f4 <__aeabi_ui2d>:
    87f4:	b570      	push	{r4, r5, r6, lr}
    87f6:	1e05      	subs	r5, r0, #0
    87f8:	d028      	beq.n	884c <__aeabi_ui2d+0x58>
    87fa:	f000 f913 	bl	8a24 <__clzsi2>
    87fe:	4b15      	ldr	r3, [pc, #84]	; (8854 <__aeabi_ui2d+0x60>)
    8800:	4a15      	ldr	r2, [pc, #84]	; (8858 <__aeabi_ui2d+0x64>)
    8802:	1a1b      	subs	r3, r3, r0
    8804:	1ad2      	subs	r2, r2, r3
    8806:	2a1f      	cmp	r2, #31
    8808:	dd16      	ble.n	8838 <__aeabi_ui2d+0x44>
    880a:	002c      	movs	r4, r5
    880c:	4a13      	ldr	r2, [pc, #76]	; (885c <__aeabi_ui2d+0x68>)
    880e:	2500      	movs	r5, #0
    8810:	1ad2      	subs	r2, r2, r3
    8812:	4094      	lsls	r4, r2
    8814:	055a      	lsls	r2, r3, #21
    8816:	0324      	lsls	r4, r4, #12
    8818:	0b24      	lsrs	r4, r4, #12
    881a:	0d52      	lsrs	r2, r2, #21
    881c:	2100      	movs	r1, #0
    881e:	0324      	lsls	r4, r4, #12
    8820:	0d0b      	lsrs	r3, r1, #20
    8822:	0b24      	lsrs	r4, r4, #12
    8824:	051b      	lsls	r3, r3, #20
    8826:	4323      	orrs	r3, r4
    8828:	4c0d      	ldr	r4, [pc, #52]	; (8860 <__aeabi_ui2d+0x6c>)
    882a:	0512      	lsls	r2, r2, #20
    882c:	4023      	ands	r3, r4
    882e:	4313      	orrs	r3, r2
    8830:	005b      	lsls	r3, r3, #1
    8832:	0028      	movs	r0, r5
    8834:	0859      	lsrs	r1, r3, #1
    8836:	bd70      	pop	{r4, r5, r6, pc}
    8838:	210b      	movs	r1, #11
    883a:	002c      	movs	r4, r5
    883c:	1a08      	subs	r0, r1, r0
    883e:	40c4      	lsrs	r4, r0
    8840:	4095      	lsls	r5, r2
    8842:	0324      	lsls	r4, r4, #12
    8844:	055a      	lsls	r2, r3, #21
    8846:	0b24      	lsrs	r4, r4, #12
    8848:	0d52      	lsrs	r2, r2, #21
    884a:	e7e7      	b.n	881c <__aeabi_ui2d+0x28>
    884c:	2200      	movs	r2, #0
    884e:	2400      	movs	r4, #0
    8850:	e7e4      	b.n	881c <__aeabi_ui2d+0x28>
    8852:	46c0      	nop			; (mov r8, r8)
    8854:	0000041e 	.word	0x0000041e
    8858:	00000433 	.word	0x00000433
    885c:	00000413 	.word	0x00000413
    8860:	800fffff 	.word	0x800fffff

00008864 <__aeabi_f2d>:
    8864:	0042      	lsls	r2, r0, #1
    8866:	0e12      	lsrs	r2, r2, #24
    8868:	1c51      	adds	r1, r2, #1
    886a:	0243      	lsls	r3, r0, #9
    886c:	b2c9      	uxtb	r1, r1
    886e:	b570      	push	{r4, r5, r6, lr}
    8870:	0a5d      	lsrs	r5, r3, #9
    8872:	0fc4      	lsrs	r4, r0, #31
    8874:	2901      	cmp	r1, #1
    8876:	dd15      	ble.n	88a4 <__aeabi_f2d+0x40>
    8878:	21e0      	movs	r1, #224	; 0xe0
    887a:	0089      	lsls	r1, r1, #2
    887c:	468c      	mov	ip, r1
    887e:	076d      	lsls	r5, r5, #29
    8880:	0b1b      	lsrs	r3, r3, #12
    8882:	4462      	add	r2, ip
    8884:	2100      	movs	r1, #0
    8886:	0028      	movs	r0, r5
    8888:	0d0d      	lsrs	r5, r1, #20
    888a:	052d      	lsls	r5, r5, #20
    888c:	432b      	orrs	r3, r5
    888e:	4d1c      	ldr	r5, [pc, #112]	; (8900 <__aeabi_f2d+0x9c>)
    8890:	0552      	lsls	r2, r2, #21
    8892:	402b      	ands	r3, r5
    8894:	0852      	lsrs	r2, r2, #1
    8896:	4313      	orrs	r3, r2
    8898:	005b      	lsls	r3, r3, #1
    889a:	07e4      	lsls	r4, r4, #31
    889c:	085b      	lsrs	r3, r3, #1
    889e:	4323      	orrs	r3, r4
    88a0:	0019      	movs	r1, r3
    88a2:	bd70      	pop	{r4, r5, r6, pc}
    88a4:	2a00      	cmp	r2, #0
    88a6:	d115      	bne.n	88d4 <__aeabi_f2d+0x70>
    88a8:	2d00      	cmp	r5, #0
    88aa:	d01f      	beq.n	88ec <__aeabi_f2d+0x88>
    88ac:	0028      	movs	r0, r5
    88ae:	f000 f8b9 	bl	8a24 <__clzsi2>
    88b2:	280a      	cmp	r0, #10
    88b4:	dc1d      	bgt.n	88f2 <__aeabi_f2d+0x8e>
    88b6:	230b      	movs	r3, #11
    88b8:	002a      	movs	r2, r5
    88ba:	1a1b      	subs	r3, r3, r0
    88bc:	40da      	lsrs	r2, r3
    88be:	0013      	movs	r3, r2
    88c0:	0002      	movs	r2, r0
    88c2:	3215      	adds	r2, #21
    88c4:	4095      	lsls	r5, r2
    88c6:	4a0f      	ldr	r2, [pc, #60]	; (8904 <__aeabi_f2d+0xa0>)
    88c8:	031b      	lsls	r3, r3, #12
    88ca:	1a12      	subs	r2, r2, r0
    88cc:	0552      	lsls	r2, r2, #21
    88ce:	0b1b      	lsrs	r3, r3, #12
    88d0:	0d52      	lsrs	r2, r2, #21
    88d2:	e7d7      	b.n	8884 <__aeabi_f2d+0x20>
    88d4:	2d00      	cmp	r5, #0
    88d6:	d006      	beq.n	88e6 <__aeabi_f2d+0x82>
    88d8:	2280      	movs	r2, #128	; 0x80
    88da:	0b1b      	lsrs	r3, r3, #12
    88dc:	0312      	lsls	r2, r2, #12
    88de:	4313      	orrs	r3, r2
    88e0:	076d      	lsls	r5, r5, #29
    88e2:	4a09      	ldr	r2, [pc, #36]	; (8908 <__aeabi_f2d+0xa4>)
    88e4:	e7ce      	b.n	8884 <__aeabi_f2d+0x20>
    88e6:	4a08      	ldr	r2, [pc, #32]	; (8908 <__aeabi_f2d+0xa4>)
    88e8:	2300      	movs	r3, #0
    88ea:	e7cb      	b.n	8884 <__aeabi_f2d+0x20>
    88ec:	2200      	movs	r2, #0
    88ee:	2300      	movs	r3, #0
    88f0:	e7c8      	b.n	8884 <__aeabi_f2d+0x20>
    88f2:	0003      	movs	r3, r0
    88f4:	3b0b      	subs	r3, #11
    88f6:	409d      	lsls	r5, r3
    88f8:	002b      	movs	r3, r5
    88fa:	2500      	movs	r5, #0
    88fc:	e7e3      	b.n	88c6 <__aeabi_f2d+0x62>
    88fe:	46c0      	nop			; (mov r8, r8)
    8900:	800fffff 	.word	0x800fffff
    8904:	00000389 	.word	0x00000389
    8908:	000007ff 	.word	0x000007ff

0000890c <__aeabi_d2f>:
    890c:	004b      	lsls	r3, r1, #1
    890e:	b570      	push	{r4, r5, r6, lr}
    8910:	0d5e      	lsrs	r6, r3, #21
    8912:	030c      	lsls	r4, r1, #12
    8914:	1c75      	adds	r5, r6, #1
    8916:	0a64      	lsrs	r4, r4, #9
    8918:	0f42      	lsrs	r2, r0, #29
    891a:	056d      	lsls	r5, r5, #21
    891c:	4322      	orrs	r2, r4
    891e:	0fc9      	lsrs	r1, r1, #31
    8920:	00c4      	lsls	r4, r0, #3
    8922:	0d6d      	lsrs	r5, r5, #21
    8924:	2d01      	cmp	r5, #1
    8926:	dd2a      	ble.n	897e <__aeabi_d2f+0x72>
    8928:	4b3b      	ldr	r3, [pc, #236]	; (8a18 <__aeabi_d2f+0x10c>)
    892a:	18f3      	adds	r3, r6, r3
    892c:	2bfe      	cmp	r3, #254	; 0xfe
    892e:	dc1a      	bgt.n	8966 <__aeabi_d2f+0x5a>
    8930:	2b00      	cmp	r3, #0
    8932:	dd42      	ble.n	89ba <__aeabi_d2f+0xae>
    8934:	0180      	lsls	r0, r0, #6
    8936:	1e45      	subs	r5, r0, #1
    8938:	41a8      	sbcs	r0, r5
    893a:	00d2      	lsls	r2, r2, #3
    893c:	4310      	orrs	r0, r2
    893e:	0f62      	lsrs	r2, r4, #29
    8940:	4302      	orrs	r2, r0
    8942:	0750      	lsls	r0, r2, #29
    8944:	d004      	beq.n	8950 <__aeabi_d2f+0x44>
    8946:	200f      	movs	r0, #15
    8948:	4010      	ands	r0, r2
    894a:	2804      	cmp	r0, #4
    894c:	d000      	beq.n	8950 <__aeabi_d2f+0x44>
    894e:	3204      	adds	r2, #4
    8950:	2080      	movs	r0, #128	; 0x80
    8952:	04c0      	lsls	r0, r0, #19
    8954:	4010      	ands	r0, r2
    8956:	d021      	beq.n	899c <__aeabi_d2f+0x90>
    8958:	3301      	adds	r3, #1
    895a:	2bff      	cmp	r3, #255	; 0xff
    895c:	d003      	beq.n	8966 <__aeabi_d2f+0x5a>
    895e:	0192      	lsls	r2, r2, #6
    8960:	0a52      	lsrs	r2, r2, #9
    8962:	b2db      	uxtb	r3, r3
    8964:	e001      	b.n	896a <__aeabi_d2f+0x5e>
    8966:	23ff      	movs	r3, #255	; 0xff
    8968:	2200      	movs	r2, #0
    896a:	0252      	lsls	r2, r2, #9
    896c:	0a52      	lsrs	r2, r2, #9
    896e:	05db      	lsls	r3, r3, #23
    8970:	4313      	orrs	r3, r2
    8972:	005b      	lsls	r3, r3, #1
    8974:	07c9      	lsls	r1, r1, #31
    8976:	085b      	lsrs	r3, r3, #1
    8978:	430b      	orrs	r3, r1
    897a:	0018      	movs	r0, r3
    897c:	bd70      	pop	{r4, r5, r6, pc}
    897e:	2e00      	cmp	r6, #0
    8980:	d007      	beq.n	8992 <__aeabi_d2f+0x86>
    8982:	4314      	orrs	r4, r2
    8984:	d0ef      	beq.n	8966 <__aeabi_d2f+0x5a>
    8986:	2080      	movs	r0, #128	; 0x80
    8988:	00d2      	lsls	r2, r2, #3
    898a:	0480      	lsls	r0, r0, #18
    898c:	4302      	orrs	r2, r0
    898e:	23ff      	movs	r3, #255	; 0xff
    8990:	e7d7      	b.n	8942 <__aeabi_d2f+0x36>
    8992:	4322      	orrs	r2, r4
    8994:	2300      	movs	r3, #0
    8996:	2a00      	cmp	r2, #0
    8998:	d003      	beq.n	89a2 <__aeabi_d2f+0x96>
    899a:	2205      	movs	r2, #5
    899c:	08d2      	lsrs	r2, r2, #3
    899e:	2bff      	cmp	r3, #255	; 0xff
    89a0:	d003      	beq.n	89aa <__aeabi_d2f+0x9e>
    89a2:	0252      	lsls	r2, r2, #9
    89a4:	0a52      	lsrs	r2, r2, #9
    89a6:	b2db      	uxtb	r3, r3
    89a8:	e7df      	b.n	896a <__aeabi_d2f+0x5e>
    89aa:	2a00      	cmp	r2, #0
    89ac:	d032      	beq.n	8a14 <__aeabi_d2f+0x108>
    89ae:	2080      	movs	r0, #128	; 0x80
    89b0:	03c0      	lsls	r0, r0, #15
    89b2:	4302      	orrs	r2, r0
    89b4:	0252      	lsls	r2, r2, #9
    89b6:	0a52      	lsrs	r2, r2, #9
    89b8:	e7d7      	b.n	896a <__aeabi_d2f+0x5e>
    89ba:	0018      	movs	r0, r3
    89bc:	3017      	adds	r0, #23
    89be:	db14      	blt.n	89ea <__aeabi_d2f+0xde>
    89c0:	2080      	movs	r0, #128	; 0x80
    89c2:	0400      	lsls	r0, r0, #16
    89c4:	4302      	orrs	r2, r0
    89c6:	201e      	movs	r0, #30
    89c8:	1ac0      	subs	r0, r0, r3
    89ca:	281f      	cmp	r0, #31
    89cc:	dc0f      	bgt.n	89ee <__aeabi_d2f+0xe2>
    89ce:	0025      	movs	r5, r4
    89d0:	4b12      	ldr	r3, [pc, #72]	; (8a1c <__aeabi_d2f+0x110>)
    89d2:	18f3      	adds	r3, r6, r3
    89d4:	409d      	lsls	r5, r3
    89d6:	1e6e      	subs	r6, r5, #1
    89d8:	41b5      	sbcs	r5, r6
    89da:	409a      	lsls	r2, r3
    89dc:	002b      	movs	r3, r5
    89de:	4313      	orrs	r3, r2
    89e0:	0022      	movs	r2, r4
    89e2:	40c2      	lsrs	r2, r0
    89e4:	431a      	orrs	r2, r3
    89e6:	2300      	movs	r3, #0
    89e8:	e7ab      	b.n	8942 <__aeabi_d2f+0x36>
    89ea:	2300      	movs	r3, #0
    89ec:	e7d5      	b.n	899a <__aeabi_d2f+0x8e>
    89ee:	2502      	movs	r5, #2
    89f0:	426d      	negs	r5, r5
    89f2:	1aeb      	subs	r3, r5, r3
    89f4:	0015      	movs	r5, r2
    89f6:	40dd      	lsrs	r5, r3
    89f8:	2820      	cmp	r0, #32
    89fa:	d009      	beq.n	8a10 <__aeabi_d2f+0x104>
    89fc:	4b08      	ldr	r3, [pc, #32]	; (8a20 <__aeabi_d2f+0x114>)
    89fe:	18f3      	adds	r3, r6, r3
    8a00:	409a      	lsls	r2, r3
    8a02:	4314      	orrs	r4, r2
    8a04:	1e62      	subs	r2, r4, #1
    8a06:	4194      	sbcs	r4, r2
    8a08:	0022      	movs	r2, r4
    8a0a:	2300      	movs	r3, #0
    8a0c:	432a      	orrs	r2, r5
    8a0e:	e798      	b.n	8942 <__aeabi_d2f+0x36>
    8a10:	2200      	movs	r2, #0
    8a12:	e7f6      	b.n	8a02 <__aeabi_d2f+0xf6>
    8a14:	2200      	movs	r2, #0
    8a16:	e7a8      	b.n	896a <__aeabi_d2f+0x5e>
    8a18:	fffffc80 	.word	0xfffffc80
    8a1c:	fffffc82 	.word	0xfffffc82
    8a20:	fffffca2 	.word	0xfffffca2

00008a24 <__clzsi2>:
    8a24:	211c      	movs	r1, #28
    8a26:	2301      	movs	r3, #1
    8a28:	041b      	lsls	r3, r3, #16
    8a2a:	4298      	cmp	r0, r3
    8a2c:	d301      	bcc.n	8a32 <__clzsi2+0xe>
    8a2e:	0c00      	lsrs	r0, r0, #16
    8a30:	3910      	subs	r1, #16
    8a32:	0a1b      	lsrs	r3, r3, #8
    8a34:	4298      	cmp	r0, r3
    8a36:	d301      	bcc.n	8a3c <__clzsi2+0x18>
    8a38:	0a00      	lsrs	r0, r0, #8
    8a3a:	3908      	subs	r1, #8
    8a3c:	091b      	lsrs	r3, r3, #4
    8a3e:	4298      	cmp	r0, r3
    8a40:	d301      	bcc.n	8a46 <__clzsi2+0x22>
    8a42:	0900      	lsrs	r0, r0, #4
    8a44:	3904      	subs	r1, #4
    8a46:	a202      	add	r2, pc, #8	; (adr r2, 8a50 <__clzsi2+0x2c>)
    8a48:	5c10      	ldrb	r0, [r2, r0]
    8a4a:	1840      	adds	r0, r0, r1
    8a4c:	4770      	bx	lr
    8a4e:	46c0      	nop			; (mov r8, r8)
    8a50:	02020304 	.word	0x02020304
    8a54:	01010101 	.word	0x01010101
	...
    8a60:	00000204 	.word	0x00000204
    8a64:	00000212 	.word	0x00000212
    8a68:	00000220 	.word	0x00000220
    8a6c:	0000023c 	.word	0x0000023c
    8a70:	0000022e 	.word	0x0000022e
    8a74:	41525453 	.word	0x41525453
    8a78:	00000000 	.word	0x00000000
    8a7c:	5446454c 	.word	0x5446454c
    8a80:	00000000 	.word	0x00000000
    8a84:	48474952 	.word	0x48474952
    8a88:	00000000 	.word	0x00000000
    8a8c:	4b434142 	.word	0x4b434142
    8a90:	00000000 	.word	0x00000000
    8a94:	0000776d 	.word	0x0000776d
    8a98:	00000000 	.word	0x00000000
    8a9c:	0000616d 	.word	0x0000616d
    8aa0:	00000000 	.word	0x00000000
    8aa4:	0000646d 	.word	0x0000646d
    8aa8:	00000000 	.word	0x00000000
    8aac:	0000736d 	.word	0x0000736d
    8ab0:	00000000 	.word	0x00000000
    8ab4:	0000206d 	.word	0x0000206d
    8ab8:	00000000 	.word	0x00000000
    8abc:	322e3525 	.word	0x322e3525
    8ac0:	25202c66 	.word	0x25202c66
    8ac4:	66322e35 	.word	0x66322e35
    8ac8:	3525202c 	.word	0x3525202c
    8acc:	0a66322e 	.word	0x0a66322e
    8ad0:	00000000 	.word	0x00000000

00008ad4 <_tcc_intflag>:
    8ad4:	00000001 00000002 00000004 00000008     ................
    8ae4:	00001000 00002000 00004000 00008000     ..... ...@......
    8af4:	00010000 00020000 00040000 00080000     ................
    8b04:	0000776d 00000000 0000206d 00000000     mw......m ......
    8b14:	504f5453 00000000                       STOP....

00008b1c <tc_interrupt_vectors.12761>:
    8b1c:	00141312 42000800 42000c00 42001000     .......B...B...B
    8b2c:	42001400 42001800 42001c00 0c0b0a09     ...B...B...B....
    8b3c:	00000e0d 00001b96 00001b92 00001b92     ................
    8b4c:	00001bf0 00001bf0 00001baa 00001b9c     ................
    8b5c:	00001bb0 00001bde 00001e60 00001e40     ........`...@...
    8b6c:	00001e40 00001ecc 00001e52 00001e6e     @.......R...n...
    8b7c:	00001e44 00001e7c 00001ebc 42002c00     D...|........,.B
    8b8c:	42003000 42003400 001c1c1b 10000800     .0.B.4.B........
    8b9c:	00002000                                . ..

00008ba0 <tc_interrupt_vectors.11902>:
    8ba0:	00141312 6e6f7266 6f6e2074 73206564     ....front node s
    8bb0:	70757465 6d6f6320 74656c70 00000065     etup complete...
    8bc0:	00000043                                C...

00008bc4 <_global_impure_ptr>:
    8bc4:	2000000c 00464e49 00666e69 004e414e     ... INF.inf.NAN.
    8bd4:	006e616e 31300030 35343332 39383736     nan.0.0123456789
    8be4:	44434241 30004645 34333231 38373635     ABCDEF.012345678
    8bf4:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
    8c04:	4e614e00 00000000                       .NaN....

00008c0c <__sf_fake_stdin>:
	...

00008c2c <__sf_fake_stdout>:
	...

00008c4c <__sf_fake_stderr>:
	...
    8c6c:	49534f50 002e0058 00000000              POSIX.......

00008c78 <__mprec_tens>:
    8c78:	00000000 3ff00000 00000000 40240000     .......?......$@
    8c88:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    8c98:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    8ca8:	00000000 412e8480 00000000 416312d0     .......A......cA
    8cb8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    8cc8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    8cd8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    8ce8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    8cf8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    8d08:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    8d18:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    8d28:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    8d38:	79d99db4 44ea7843                       ...yCx.D

00008d40 <__mprec_bigtens>:
    8d40:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    8d50:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    8d60:	7f73bf3c 75154fdd                       <.s..O.u

00008d68 <p05.5385>:
    8d68:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    8d78:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....
    8d88:	0000678e 000066b2 00006770 00006748     .g...f..pg..Hg..
    8d98:	00006770 0000673c 00006770 00006748     pg..<g..pg..Hg..
    8da8:	000066b2 000066b2 0000673c 00006748     .f...f..<g..Hg..
    8db8:	000067f4 000067f4 000067f4 00006776     .g...g...g..vg..
    8dc8:	000066b2 000066b2 0000675c 00006746     .f...f..\g..Fg..
    8dd8:	0000675c 0000673c 0000675c 00006746     \g..<g..\g..Fg..
    8de8:	000066b2 000066b2 0000673c 00006746     .f...f..<g..Fg..
    8df8:	000067f4 000067f4 000067f4 00006800     .g...g...g...h..
    8e08:	00006aec 00006a4a 00006a4a 00006a48     .j..Jj..Jj..Hj..
    8e18:	00006ade 00006ade 00006ad4 00006a48     .j...j...j..Hj..
    8e28:	00006ade 00006ad4 00006ade 00006a48     .j...j...j..Hj..
    8e38:	00006ae4 00006ae4 00006ae4 00006b6e     .j...j...j..nk..
    8e48:	000074d0 0000739e 000074a4 00007394     .t...s...t...s..
    8e58:	000074a4 000074ae 000074a4 00007394     .t...t...t...s..
    8e68:	0000739e 0000739e 000074ae 00007394     .s...s...t...s..
    8e78:	0000738a 0000738a 0000738a 00007700     .s...s...s...w..
    8e88:	00007d18 00007bd8 00007bd8 00007bd6     .}...{...{...{..
    8e98:	00007cf0 00007cf0 00007ce2 00007bd6     .|...|...|...{..
    8ea8:	00007cf0 00007ce2 00007cf0 00007bd6     .|...|...|...{..
    8eb8:	00007cf8 00007cf8 00007cf8 00007ef8     .|...|...|...~..

00008ec8 <_init>:
    8ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8eca:	46c0      	nop			; (mov r8, r8)
    8ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8ece:	bc08      	pop	{r3}
    8ed0:	469e      	mov	lr, r3
    8ed2:	4770      	bx	lr

00008ed4 <__init_array_start>:
    8ed4:	000000dd 	.word	0x000000dd

00008ed8 <_fini>:
    8ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8eda:	46c0      	nop			; (mov r8, r8)
    8edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8ede:	bc08      	pop	{r3}
    8ee0:	469e      	mov	lr, r3
    8ee2:	4770      	bx	lr

00008ee4 <__fini_array_start>:
    8ee4:	000000b5 	.word	0x000000b5
