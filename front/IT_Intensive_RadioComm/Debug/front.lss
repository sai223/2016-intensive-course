
front.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a928  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001dc  20000000  0000a928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001558  200001dc  0000ab04  000201dc  2**2
                  ALLOC
  3 .stack        00002004  20001734  0000c05c  000201dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  5 .comment      0000008c  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
  6 .debug_info   0006726a  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00008a6e  00000000  00000000  000874fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e574  00000000  00000000  0008ff68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c70  00000000  00000000  0009e4dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001450  00000000  00000000  0009f14c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00023208  00000000  00000000  000a059c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001e603  00000000  00000000  000c37a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a30c  00000000  00000000  000e1da7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002e04  00000000  00000000  0016c0b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 37 00 20 75 26 00 00 71 26 00 00 71 26 00 00     87. u&..q&..q&..
	...
      2c:	71 26 00 00 00 00 00 00 00 00 00 00 71 26 00 00     q&..........q&..
      3c:	71 26 00 00 71 26 00 00 71 26 00 00 71 26 00 00     q&..q&..q&..q&..
      4c:	71 26 00 00 b5 09 00 00 71 26 00 00 71 26 00 00     q&......q&..q&..
      5c:	71 26 00 00 71 26 00 00 a1 0f 00 00 b1 0f 00 00     q&..q&..........
      6c:	c1 0f 00 00 d1 0f 00 00 e1 0f 00 00 f1 0f 00 00     ................
      7c:	fd 03 00 00 0d 04 00 00 1d 04 00 00 51 23 00 00     ............Q#..
      8c:	61 23 00 00 71 23 00 00 00 00 00 00 00 00 00 00     a#..q#..........
      9c:	71 26 00 00 71 26 00 00 00 00 00 00 71 26 00 00     q&..q&......q&..
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001dc 	.word	0x200001dc
      d4:	00000000 	.word	0x00000000
      d8:	0000a928 	.word	0x0000a928

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001e0 	.word	0x200001e0
     108:	0000a928 	.word	0x0000a928
     10c:	0000a928 	.word	0x0000a928
     110:	00000000 	.word	0x00000000

00000114 <artist_init_maze>:
*/

#include "Maze.h"

void artist_init_maze (void) {
	artist_front.maze_status = STOP;
     114:	2103      	movs	r1, #3
     116:	23d8      	movs	r3, #216	; 0xd8
     118:	4a01      	ldr	r2, [pc, #4]	; (120 <artist_init_maze+0xc>)
     11a:	54d1      	strb	r1, [r2, r3]
}
     11c:	4770      	bx	lr
     11e:	46c0      	nop			; (mov r8, r8)
     120:	20000880 	.word	0x20000880

00000124 <receivePKT>:
 */ 
#include "Radio.h"   

int line_num = 0;

 bool receivePKT(NWK_DataInd_t *ind) {
     124:	b510      	push	{r4, lr}
	}

	LED_Toggle(LED0);
	line_num++;
	*/  
	printf("packet received\n");  
     126:	4802      	ldr	r0, [pc, #8]	; (130 <receivePKT+0xc>)
     128:	4b02      	ldr	r3, [pc, #8]	; (134 <receivePKT+0x10>)
     12a:	4798      	blx	r3
	return true;
}
     12c:	2001      	movs	r0, #1
     12e:	bd10      	pop	{r4, pc}
     130:	0000a3e8 	.word	0x0000a3e8
     134:	00005841 	.word	0x00005841

00000138 <radioInit>:

 void radioInit(void) {
     138:	b510      	push	{r4, lr}
	NWK_SetAddr(9);  //주소 설정
     13a:	2009      	movs	r0, #9
     13c:	4b07      	ldr	r3, [pc, #28]	; (15c <radioInit+0x24>)
     13e:	4798      	blx	r3
	NWK_SetPanId(APP_PANID);  //PANID : Personal Area Network ID
     140:	4807      	ldr	r0, [pc, #28]	; (160 <radioInit+0x28>)
     142:	4b08      	ldr	r3, [pc, #32]	; (164 <radioInit+0x2c>)
     144:	4798      	blx	r3
	PHY_SetChannel(APP_CHANNEL);
     146:	200f      	movs	r0, #15
     148:	4b07      	ldr	r3, [pc, #28]	; (168 <radioInit+0x30>)
     14a:	4798      	blx	r3
	PHY_SetRxState(true);
     14c:	2001      	movs	r0, #1
     14e:	4b07      	ldr	r3, [pc, #28]	; (16c <radioInit+0x34>)
     150:	4798      	blx	r3
	NWK_OpenEndpoint(APP_ENDPOINT, receivePKT);
     152:	4907      	ldr	r1, [pc, #28]	; (170 <radioInit+0x38>)
     154:	2001      	movs	r0, #1
     156:	4b07      	ldr	r3, [pc, #28]	; (174 <radioInit+0x3c>)
     158:	4798      	blx	r3
}
     15a:	bd10      	pop	{r4, pc}
     15c:	0000287d 	.word	0x0000287d
     160:	00004567 	.word	0x00004567
     164:	00002891 	.word	0x00002891
     168:	00003ac5 	.word	0x00003ac5
     16c:	00003ab1 	.word	0x00003ab1
     170:	00000125 	.word	0x00000125
     174:	000028a5 	.word	0x000028a5

00000178 <artist_ultrasonic_configure>:
 */
#include "TheArtist.h"
#include "UltraSonic.h"

void artist_ultrasonic_configure (struct artist_ultrasonic_module * module, uint8_t echo, uint8_t trig) {
	module->echo_pin	= echo; 
     178:	7001      	strb	r1, [r0, #0]
	module->trigger_pin = trig;  
     17a:	7042      	strb	r2, [r0, #1]
	module->filter_large_change_counts = 0; 
     17c:	2300      	movs	r3, #0
     17e:	7083      	strb	r3, [r0, #2]
	module->fliter_old_val = 0; 
     180:	2300      	movs	r3, #0
     182:	6043      	str	r3, [r0, #4]
}
     184:	4770      	bx	lr
	...

00000188 <artist_ultrasonic_gpio_init>:

void artist_ultrasonic_gpio_init() {
     188:	b5f0      	push	{r4, r5, r6, r7, lr}
     18a:	b085      	sub	sp, #20
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     18c:	a903      	add	r1, sp, #12
     18e:	2201      	movs	r2, #1
     190:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     192:	2300      	movs	r3, #0
     194:	708b      	strb	r3, [r1, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     196:	ad02      	add	r5, sp, #8
     198:	702b      	strb	r3, [r5, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     19a:	706a      	strb	r2, [r5, #1]
	config->powersave  = false;
     19c:	70ab      	strb	r3, [r5, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     19e:	4668      	mov	r0, sp
     1a0:	7003      	strb	r3, [r0, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     1a2:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
     1a4:	7083      	strb	r3, [r0, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     1a6:	ac01      	add	r4, sp, #4
     1a8:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     1aa:	7062      	strb	r2, [r4, #1]
	config->powersave  = false;
     1ac:	70a3      	strb	r3, [r4, #2]
	port_get_config_defaults(&pin_config_trig);
	port_get_config_defaults(&pin_config_echo_center);
	port_get_config_defaults(&pin_config_echo_right);
	port_get_config_defaults(&pin_config_echo_left);

	pin_config_trig.direction			=	PORT_PIN_DIR_OUTPUT;
     1ae:	700a      	strb	r2, [r1, #0]
	
	pin_config_echo_right.direction		=	PORT_PIN_DIR_INPUT;
	pin_config_echo_right.input_pull	=	PORT_PIN_PULL_UP;
	
	
	port_pin_set_config(artist_front.us_instance_center.trigger_pin, &pin_config_trig);
     1b0:	4f09      	ldr	r7, [pc, #36]	; (1d8 <artist_ultrasonic_gpio_init+0x50>)
     1b2:	33b5      	adds	r3, #181	; 0xb5
     1b4:	5cf8      	ldrb	r0, [r7, r3]
     1b6:	4e09      	ldr	r6, [pc, #36]	; (1dc <artist_ultrasonic_gpio_init+0x54>)
     1b8:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_center.echo_pin, &pin_config_echo_center);
     1ba:	23b4      	movs	r3, #180	; 0xb4
     1bc:	5cf8      	ldrb	r0, [r7, r3]
     1be:	0029      	movs	r1, r5
     1c0:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_left.echo_pin, &pin_config_echo_left);
     1c2:	23bc      	movs	r3, #188	; 0xbc
     1c4:	5cf8      	ldrb	r0, [r7, r3]
     1c6:	0021      	movs	r1, r4
     1c8:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_right.echo_pin, &pin_config_echo_right); 
     1ca:	23c4      	movs	r3, #196	; 0xc4
     1cc:	5cf8      	ldrb	r0, [r7, r3]
     1ce:	4669      	mov	r1, sp
     1d0:	47b0      	blx	r6
}
     1d2:	b005      	add	sp, #20
     1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1d6:	46c0      	nop			; (mov r8, r8)
     1d8:	20000880 	.word	0x20000880
     1dc:	00000b19 	.word	0x00000b19

000001e0 <artist_ultrasonic_get_value>:
	printf("%5.2f, %5.2f, %5.2f\n", 
				artist_front.left_distance, 
				artist_front.center_distance, 
				artist_front.right_distance);  
}
float artist_ultrasonic_get_value(struct artist_ultrasonic_module * const module) {
     1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1e2:	b083      	sub	sp, #12
     1e4:	0004      	movs	r4, r0
	// TODO : use timer callback function!
	uint16_t start, end;
	uint16_t count = 0;
	
	port_pin_set_output_level(module->trigger_pin, false);
     1e6:	7842      	ldrb	r2, [r0, #1]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     1e8:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     1ea:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     1ec:	2900      	cmp	r1, #0
     1ee:	d104      	bne.n	1fa <artist_ultrasonic_get_value+0x1a>
		return &(ports[port_index]->Group[group_index]);
     1f0:	0953      	lsrs	r3, r2, #5
     1f2:	01db      	lsls	r3, r3, #7
     1f4:	495c      	ldr	r1, [pc, #368]	; (368 <artist_ultrasonic_get_value+0x188>)
     1f6:	468c      	mov	ip, r1
     1f8:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1fa:	211f      	movs	r1, #31
     1fc:	4011      	ands	r1, r2
     1fe:	2201      	movs	r2, #1
     200:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     202:	615a      	str	r2, [r3, #20]
	delay_us(40);
     204:	2028      	movs	r0, #40	; 0x28
     206:	4b59      	ldr	r3, [pc, #356]	; (36c <artist_ultrasonic_get_value+0x18c>)
     208:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, true);
     20a:	7862      	ldrb	r2, [r4, #1]
	if (port_index < PORT_INST_NUM) {
     20c:	09d1      	lsrs	r1, r2, #7
		return NULL;
     20e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     210:	2900      	cmp	r1, #0
     212:	d104      	bne.n	21e <artist_ultrasonic_get_value+0x3e>
		return &(ports[port_index]->Group[group_index]);
     214:	0953      	lsrs	r3, r2, #5
     216:	01db      	lsls	r3, r3, #7
     218:	4953      	ldr	r1, [pc, #332]	; (368 <artist_ultrasonic_get_value+0x188>)
     21a:	468c      	mov	ip, r1
     21c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     21e:	211f      	movs	r1, #31
     220:	4011      	ands	r1, r2
     222:	2201      	movs	r2, #1
     224:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     226:	619a      	str	r2, [r3, #24]
	delay_us(10);
     228:	200a      	movs	r0, #10
     22a:	4b50      	ldr	r3, [pc, #320]	; (36c <artist_ultrasonic_get_value+0x18c>)
     22c:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, false);
     22e:	7862      	ldrb	r2, [r4, #1]
	if (port_index < PORT_INST_NUM) {
     230:	09d1      	lsrs	r1, r2, #7
		return NULL;
     232:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     234:	2900      	cmp	r1, #0
     236:	d104      	bne.n	242 <artist_ultrasonic_get_value+0x62>
		return &(ports[port_index]->Group[group_index]);
     238:	0953      	lsrs	r3, r2, #5
     23a:	01db      	lsls	r3, r3, #7
     23c:	494a      	ldr	r1, [pc, #296]	; (368 <artist_ultrasonic_get_value+0x188>)
     23e:	468c      	mov	ip, r1
     240:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     242:	211f      	movs	r1, #31
     244:	4011      	ands	r1, r2
     246:	2201      	movs	r2, #1
     248:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     24a:	615a      	str	r2, [r3, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     24c:	4b48      	ldr	r3, [pc, #288]	; (370 <artist_ultrasonic_get_value+0x190>)
     24e:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     250:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     252:	b25b      	sxtb	r3, r3
     254:	2b00      	cmp	r3, #0
     256:	dbfb      	blt.n	250 <artist_ultrasonic_get_value+0x70>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
     258:	2300      	movs	r3, #0
     25a:	7113      	strb	r3, [r2, #4]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     25c:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     25e:	b25b      	sxtb	r3, r3
     260:	2b00      	cmp	r3, #0
     262:	dbfb      	blt.n	25c <artist_ultrasonic_get_value+0x7c>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
     264:	2340      	movs	r3, #64	; 0x40
     266:	7153      	strb	r3, [r2, #5]
	tc_start_counter(&(artist_front.tc_instance_ultrasonic)); 
	while (!(port_pin_get_input_level(module->echo_pin))) {
     268:	7823      	ldrb	r3, [r4, #0]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     26a:	221f      	movs	r2, #31
     26c:	401a      	ands	r2, r3
     26e:	2001      	movs	r0, #1
     270:	4090      	lsls	r0, r2
     272:	09da      	lsrs	r2, r3, #7
     274:	2100      	movs	r1, #0
     276:	2a00      	cmp	r2, #0
     278:	d104      	bne.n	284 <artist_ultrasonic_get_value+0xa4>
     27a:	0959      	lsrs	r1, r3, #5
     27c:	01c9      	lsls	r1, r1, #7
     27e:	4b3a      	ldr	r3, [pc, #232]	; (368 <artist_ultrasonic_get_value+0x188>)
     280:	469c      	mov	ip, r3
     282:	4461      	add	r1, ip
     284:	4b3b      	ldr	r3, [pc, #236]	; (374 <artist_ultrasonic_get_value+0x194>)
	return (port_base->IN.reg & pin_mask);
     286:	6a0a      	ldr	r2, [r1, #32]
     288:	4202      	tst	r2, r0
     28a:	d105      	bne.n	298 <artist_ultrasonic_get_value+0xb8>
     28c:	3b01      	subs	r3, #1
     28e:	b29b      	uxth	r3, r3
		count ++;
		if (count > 0xFF00) return module->fliter_old_val; 
     290:	2b00      	cmp	r3, #0
     292:	d1f8      	bne.n	286 <artist_ultrasonic_get_value+0xa6>
     294:	6860      	ldr	r0, [r4, #4]
     296:	e062      	b.n	35e <artist_ultrasonic_get_value+0x17e>
	}
	count =0; 
	start = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
     298:	4835      	ldr	r0, [pc, #212]	; (370 <artist_ultrasonic_get_value+0x190>)
     29a:	4b37      	ldr	r3, [pc, #220]	; (378 <artist_ultrasonic_get_value+0x198>)
     29c:	4798      	blx	r3
     29e:	0005      	movs	r5, r0
	while ((port_pin_get_input_level(module->echo_pin)))  {
     2a0:	7823      	ldrb	r3, [r4, #0]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2a2:	221f      	movs	r2, #31
     2a4:	401a      	ands	r2, r3
     2a6:	2001      	movs	r0, #1
     2a8:	4090      	lsls	r0, r2
     2aa:	09da      	lsrs	r2, r3, #7
     2ac:	2100      	movs	r1, #0
     2ae:	2a00      	cmp	r2, #0
     2b0:	d104      	bne.n	2bc <artist_ultrasonic_get_value+0xdc>
     2b2:	0959      	lsrs	r1, r3, #5
     2b4:	01c9      	lsls	r1, r1, #7
     2b6:	4b2c      	ldr	r3, [pc, #176]	; (368 <artist_ultrasonic_get_value+0x188>)
     2b8:	469c      	mov	ip, r3
     2ba:	4461      	add	r1, ip
     2bc:	4b2d      	ldr	r3, [pc, #180]	; (374 <artist_ultrasonic_get_value+0x194>)
	return (port_base->IN.reg & pin_mask);
     2be:	6a0a      	ldr	r2, [r1, #32]
     2c0:	4202      	tst	r2, r0
     2c2:	d005      	beq.n	2d0 <artist_ultrasonic_get_value+0xf0>
     2c4:	3b01      	subs	r3, #1
     2c6:	b29b      	uxth	r3, r3
		count ++;
		if (count > 0xFF00) return module->fliter_old_val;  
     2c8:	2b00      	cmp	r3, #0
     2ca:	d1f8      	bne.n	2be <artist_ultrasonic_get_value+0xde>
     2cc:	6860      	ldr	r0, [r4, #4]
     2ce:	e046      	b.n	35e <artist_ultrasonic_get_value+0x17e>
	}
	end = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
     2d0:	4e27      	ldr	r6, [pc, #156]	; (370 <artist_ultrasonic_get_value+0x190>)
     2d2:	0030      	movs	r0, r6
     2d4:	4b28      	ldr	r3, [pc, #160]	; (378 <artist_ultrasonic_get_value+0x198>)
     2d6:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2d8:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     2da:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     2dc:	b25b      	sxtb	r3, r3
     2de:	2b00      	cmp	r3, #0
     2e0:	dbfb      	blt.n	2da <artist_ultrasonic_get_value+0xfa>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
     2e2:	2380      	movs	r3, #128	; 0x80
     2e4:	7153      	strb	r3, [r2, #5]
	tc_stop_counter(&(artist_front.tc_instance_ultrasonic));

	float new = ((float)(end - start)) * 0.017;
     2e6:	0400      	lsls	r0, r0, #16
     2e8:	0c00      	lsrs	r0, r0, #16
     2ea:	042d      	lsls	r5, r5, #16
     2ec:	0c2d      	lsrs	r5, r5, #16
     2ee:	1b40      	subs	r0, r0, r5
     2f0:	4f22      	ldr	r7, [pc, #136]	; (37c <artist_ultrasonic_get_value+0x19c>)
     2f2:	47b8      	blx	r7
     2f4:	4b22      	ldr	r3, [pc, #136]	; (380 <artist_ultrasonic_get_value+0x1a0>)
     2f6:	4798      	blx	r3
     2f8:	4a22      	ldr	r2, [pc, #136]	; (384 <artist_ultrasonic_get_value+0x1a4>)
     2fa:	4b23      	ldr	r3, [pc, #140]	; (388 <artist_ultrasonic_get_value+0x1a8>)
     2fc:	4d23      	ldr	r5, [pc, #140]	; (38c <artist_ultrasonic_get_value+0x1ac>)
     2fe:	47a8      	blx	r5
     300:	4b23      	ldr	r3, [pc, #140]	; (390 <artist_ultrasonic_get_value+0x1b0>)
     302:	4798      	blx	r3
     304:	9001      	str	r0, [sp, #4]
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     306:	6865      	ldr	r5, [r4, #4]
	if (new > old * module->filter_large_change_counts ||
     308:	78a6      	ldrb	r6, [r4, #2]
     30a:	0030      	movs	r0, r6
     30c:	47b8      	blx	r7
     30e:	1c07      	adds	r7, r0, #0
     310:	1c01      	adds	r1, r0, #0
     312:	1c28      	adds	r0, r5, #0
     314:	4b1f      	ldr	r3, [pc, #124]	; (394 <artist_ultrasonic_get_value+0x1b4>)
     316:	4798      	blx	r3
     318:	1c01      	adds	r1, r0, #0
     31a:	9801      	ldr	r0, [sp, #4]
     31c:	4b1e      	ldr	r3, [pc, #120]	; (398 <artist_ultrasonic_get_value+0x1b8>)
     31e:	4798      	blx	r3
     320:	2800      	cmp	r0, #0
     322:	d109      	bne.n	338 <artist_ultrasonic_get_value+0x158>
	new < old * 1/module->filter_large_change_counts ) {
     324:	1c39      	adds	r1, r7, #0
     326:	1c28      	adds	r0, r5, #0
     328:	4b1c      	ldr	r3, [pc, #112]	; (39c <artist_ultrasonic_get_value+0x1bc>)
     32a:	4798      	blx	r3
     32c:	1c01      	adds	r1, r0, #0
	if (new > old * module->filter_large_change_counts ||
     32e:	9801      	ldr	r0, [sp, #4]
     330:	4b1b      	ldr	r3, [pc, #108]	; (3a0 <artist_ultrasonic_get_value+0x1c0>)
     332:	4798      	blx	r3
     334:	2800      	cmp	r0, #0
     336:	d005      	beq.n	344 <artist_ultrasonic_get_value+0x164>
		module->filter_large_change_counts ++;
     338:	1c73      	adds	r3, r6, #1
     33a:	b2db      	uxtb	r3, r3
		if (module->filter_large_change_counts > 3)		
     33c:	2b03      	cmp	r3, #3
     33e:	d810      	bhi.n	362 <artist_ultrasonic_get_value+0x182>
		module->filter_large_change_counts ++;
     340:	70a3      	strb	r3, [r4, #2]
			new = old;
     342:	9501      	str	r5, [sp, #4]
	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
     344:	4f13      	ldr	r7, [pc, #76]	; (394 <artist_ultrasonic_get_value+0x1b4>)
     346:	4917      	ldr	r1, [pc, #92]	; (3a4 <artist_ultrasonic_get_value+0x1c4>)
     348:	9801      	ldr	r0, [sp, #4]
     34a:	47b8      	blx	r7
     34c:	1c06      	adds	r6, r0, #0
     34e:	4916      	ldr	r1, [pc, #88]	; (3a8 <artist_ultrasonic_get_value+0x1c8>)
     350:	1c28      	adds	r0, r5, #0
     352:	47b8      	blx	r7
     354:	1c01      	adds	r1, r0, #0
     356:	1c30      	adds	r0, r6, #0
     358:	4b14      	ldr	r3, [pc, #80]	; (3ac <artist_ultrasonic_get_value+0x1cc>)
     35a:	4798      	blx	r3
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     35c:	6060      	str	r0, [r4, #4]
	return module->fliter_old_val;
}
     35e:	b003      	add	sp, #12
     360:	bdf0      	pop	{r4, r5, r6, r7, pc}
			module->filter_large_change_counts = 0;
     362:	2300      	movs	r3, #0
     364:	70a3      	strb	r3, [r4, #2]
     366:	e7ed      	b.n	344 <artist_ultrasonic_get_value+0x164>
     368:	41004400 	.word	0x41004400
     36c:	000007d9 	.word	0x000007d9
     370:	20000880 	.word	0x20000880
     374:	0000ff01 	.word	0x0000ff01
     378:	000025f5 	.word	0x000025f5
     37c:	00008605 	.word	0x00008605
     380:	0000a1f5 	.word	0x0000a1f5
     384:	b020c49c 	.word	0xb020c49c
     388:	3f916872 	.word	0x3f916872
     38c:	0000952d 	.word	0x0000952d
     390:	0000a299 	.word	0x0000a299
     394:	000083c5 	.word	0x000083c5
     398:	00007c45 	.word	0x00007c45
     39c:	00007fe5 	.word	0x00007fe5
     3a0:	00007c1d 	.word	0x00007c1d
     3a4:	3ecccccc 	.word	0x3ecccccc
     3a8:	3f19999a 	.word	0x3f19999a
     3ac:	00007cc1 	.word	0x00007cc1

000003b0 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3b2:	46c6      	mov	lr, r8
     3b4:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     3b6:	0080      	lsls	r0, r0, #2
     3b8:	4b0e      	ldr	r3, [pc, #56]	; (3f4 <_tcc_interrupt_handler+0x44>)
     3ba:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     3bc:	683b      	ldr	r3, [r7, #0]
     3be:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     3c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     3c4:	4013      	ands	r3, r2
     3c6:	401e      	ands	r6, r3
     3c8:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     3ca:	4b0b      	ldr	r3, [pc, #44]	; (3f8 <_tcc_interrupt_handler+0x48>)
     3cc:	4698      	mov	r8, r3
     3ce:	e002      	b.n	3d6 <_tcc_interrupt_handler+0x26>
     3d0:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     3d2:	2c30      	cmp	r4, #48	; 0x30
     3d4:	d00a      	beq.n	3ec <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     3d6:	4643      	mov	r3, r8
     3d8:	58e5      	ldr	r5, [r4, r3]
     3da:	4235      	tst	r5, r6
     3dc:	d0f8      	beq.n	3d0 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     3de:	193b      	adds	r3, r7, r4
     3e0:	685b      	ldr	r3, [r3, #4]
     3e2:	0038      	movs	r0, r7
     3e4:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     3e6:	683b      	ldr	r3, [r7, #0]
     3e8:	62dd      	str	r5, [r3, #44]	; 0x2c
     3ea:	e7f1      	b.n	3d0 <_tcc_interrupt_handler+0x20>
		}
	}
}
     3ec:	bc04      	pop	{r2}
     3ee:	4690      	mov	r8, r2
     3f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3f2:	46c0      	nop			; (mov r8, r8)
     3f4:	200015ac 	.word	0x200015ac
     3f8:	0000a3f8 	.word	0x0000a3f8

000003fc <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     3fc:	b510      	push	{r4, lr}
     3fe:	2000      	movs	r0, #0
     400:	4b01      	ldr	r3, [pc, #4]	; (408 <TCC0_Handler+0xc>)
     402:	4798      	blx	r3
     404:	bd10      	pop	{r4, pc}
     406:	46c0      	nop			; (mov r8, r8)
     408:	000003b1 	.word	0x000003b1

0000040c <TCC1_Handler>:
     40c:	b510      	push	{r4, lr}
     40e:	2001      	movs	r0, #1
     410:	4b01      	ldr	r3, [pc, #4]	; (418 <TCC1_Handler+0xc>)
     412:	4798      	blx	r3
     414:	bd10      	pop	{r4, pc}
     416:	46c0      	nop			; (mov r8, r8)
     418:	000003b1 	.word	0x000003b1

0000041c <TCC2_Handler>:
     41c:	b510      	push	{r4, lr}
     41e:	2002      	movs	r0, #2
     420:	4b01      	ldr	r3, [pc, #4]	; (428 <TCC2_Handler+0xc>)
     422:	4798      	blx	r3
     424:	bd10      	pop	{r4, pc}
     426:	46c0      	nop			; (mov r8, r8)
     428:	000003b1 	.word	0x000003b1

0000042c <usart_write_callback>:

}
void usart_write_callback(struct usart_module *const usart_module)
{
	
}
     42c:	4770      	bx	lr
	...

00000430 <usart_read_callback>:
{
     430:	b510      	push	{r4, lr}
     432:	0004      	movs	r4, r0
	printf("1test");  
     434:	480d      	ldr	r0, [pc, #52]	; (46c <usart_read_callback+0x3c>)
     436:	4b0e      	ldr	r3, [pc, #56]	; (470 <usart_read_callback+0x40>)
     438:	4798      	blx	r3
	switch(rx_buffer[0]) {
     43a:	4b0e      	ldr	r3, [pc, #56]	; (474 <usart_read_callback+0x44>)
     43c:	781b      	ldrb	r3, [r3, #0]
     43e:	b2db      	uxtb	r3, r3
     440:	2b20      	cmp	r3, #32
     442:	d00c      	beq.n	45e <usart_read_callback+0x2e>
     444:	2b77      	cmp	r3, #119	; 0x77
     446:	d104      	bne.n	452 <usart_read_callback+0x22>
		usart_write_buffer_job(usart_instance, "mw\0\0\0", MAX_RX_BUFFER_LENGTH);
     448:	2205      	movs	r2, #5
     44a:	490b      	ldr	r1, [pc, #44]	; (478 <usart_read_callback+0x48>)
     44c:	0020      	movs	r0, r4
     44e:	4b0b      	ldr	r3, [pc, #44]	; (47c <usart_read_callback+0x4c>)
     450:	4798      	blx	r3
	usart_read_buffer_job( usart_instance,
     452:	2205      	movs	r2, #5
     454:	4907      	ldr	r1, [pc, #28]	; (474 <usart_read_callback+0x44>)
     456:	0020      	movs	r0, r4
     458:	4b09      	ldr	r3, [pc, #36]	; (480 <usart_read_callback+0x50>)
     45a:	4798      	blx	r3
}
     45c:	bd10      	pop	{r4, pc}
		usart_write_buffer_job(usart_instance, "m \0\0\0", MAX_RX_BUFFER_LENGTH);
     45e:	2205      	movs	r2, #5
     460:	4905      	ldr	r1, [pc, #20]	; (478 <usart_read_callback+0x48>)
     462:	3108      	adds	r1, #8
     464:	0020      	movs	r0, r4
     466:	4b05      	ldr	r3, [pc, #20]	; (47c <usart_read_callback+0x4c>)
     468:	4798      	blx	r3
		break;
     46a:	e7f2      	b.n	452 <usart_read_callback+0x22>
     46c:	0000a43c 	.word	0x0000a43c
     470:	0000574d 	.word	0x0000574d
     474:	20001570 	.word	0x20001570
     478:	0000a428 	.word	0x0000a428
     47c:	00001839 	.word	0x00001839
     480:	00001859 	.word	0x00001859

00000484 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     484:	b570      	push	{r4, r5, r6, lr}
     486:	b082      	sub	sp, #8
     488:	0005      	movs	r5, r0
     48a:	000e      	movs	r6, r1
	uint16_t temp = 0;
     48c:	2200      	movs	r2, #0
     48e:	466b      	mov	r3, sp
     490:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     492:	4c06      	ldr	r4, [pc, #24]	; (4ac <usart_serial_getchar+0x28>)
     494:	466b      	mov	r3, sp
     496:	1d99      	adds	r1, r3, #6
     498:	0028      	movs	r0, r5
     49a:	47a0      	blx	r4
     49c:	2800      	cmp	r0, #0
     49e:	d1f9      	bne.n	494 <usart_serial_getchar+0x10>

	*c = temp;
     4a0:	466b      	mov	r3, sp
     4a2:	3306      	adds	r3, #6
     4a4:	881b      	ldrh	r3, [r3, #0]
     4a6:	7033      	strb	r3, [r6, #0]
}
     4a8:	b002      	add	sp, #8
     4aa:	bd70      	pop	{r4, r5, r6, pc}
     4ac:	00001725 	.word	0x00001725

000004b0 <usart_serial_putchar>:
{
     4b0:	b570      	push	{r4, r5, r6, lr}
     4b2:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     4b4:	b28c      	uxth	r4, r1
     4b6:	4e03      	ldr	r6, [pc, #12]	; (4c4 <usart_serial_putchar+0x14>)
     4b8:	0021      	movs	r1, r4
     4ba:	0028      	movs	r0, r5
     4bc:	47b0      	blx	r6
     4be:	2800      	cmp	r0, #0
     4c0:	d1fa      	bne.n	4b8 <usart_serial_putchar+0x8>
}
     4c2:	bd70      	pop	{r4, r5, r6, pc}
     4c4:	000016f9 	.word	0x000016f9

000004c8 <artist_ultrasonic_tc_configure>:
void artist_ultrasonic_tc_configure() {
     4c8:	b510      	push	{r4, lr}
     4ca:	b08e      	sub	sp, #56	; 0x38
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     4cc:	aa01      	add	r2, sp, #4
     4ce:	2300      	movs	r3, #0
     4d0:	2100      	movs	r1, #0
     4d2:	7093      	strb	r3, [r2, #2]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     4d4:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     4d6:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     4d8:	2000      	movs	r0, #0
     4da:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     4dc:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     4de:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     4e0:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     4e2:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     4e4:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     4e6:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     4e8:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     4ea:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     4ec:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     4ee:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
     4f0:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     4f2:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     4f4:	8593      	strh	r3, [r2, #44]	; 0x2c
	config.clock_source = GCLK_GENERATOR_3;
     4f6:	3303      	adds	r3, #3
     4f8:	7013      	strb	r3, [r2, #0]
	config.clock_prescaler = TC_CLOCK_PRESCALER_DIV8;
     4fa:	23c0      	movs	r3, #192	; 0xc0
     4fc:	009b      	lsls	r3, r3, #2
     4fe:	8093      	strh	r3, [r2, #4]
	config.enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = true;
     500:	2301      	movs	r3, #1
     502:	72d3      	strb	r3, [r2, #11]
	tc_init(&(artist_front.tc_instance_ultrasonic), TC4, &config);
     504:	4c07      	ldr	r4, [pc, #28]	; (524 <artist_ultrasonic_tc_configure+0x5c>)
     506:	4908      	ldr	r1, [pc, #32]	; (528 <artist_ultrasonic_tc_configure+0x60>)
     508:	0020      	movs	r0, r4
     50a:	4b08      	ldr	r3, [pc, #32]	; (52c <artist_ultrasonic_tc_configure+0x64>)
     50c:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     50e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     510:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     512:	b25b      	sxtb	r3, r3
     514:	2b00      	cmp	r3, #0
     516:	dbfb      	blt.n	510 <artist_ultrasonic_tc_configure+0x48>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     518:	8813      	ldrh	r3, [r2, #0]
     51a:	2102      	movs	r1, #2
     51c:	430b      	orrs	r3, r1
     51e:	8013      	strh	r3, [r2, #0]
}
     520:	b00e      	add	sp, #56	; 0x38
     522:	bd10      	pop	{r4, pc}
     524:	20000880 	.word	0x20000880
     528:	42003000 	.word	0x42003000
     52c:	000023b9 	.word	0x000023b9

00000530 <configure_usart_callbacks>:


void configure_usart_callbacks(struct usart_module * usart_instance)
{
     530:	b570      	push	{r4, r5, r6, lr}
     532:	0004      	movs	r4, r0
	//! [setup_register_callbacks]
	usart_register_callback(usart_instance,
     534:	2200      	movs	r2, #0
     536:	4906      	ldr	r1, [pc, #24]	; (550 <configure_usart_callbacks+0x20>)
     538:	4d06      	ldr	r5, [pc, #24]	; (554 <configure_usart_callbacks+0x24>)
     53a:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	
	usart_register_callback(usart_instance,
     53c:	2201      	movs	r2, #1
     53e:	4906      	ldr	r1, [pc, #24]	; (558 <configure_usart_callbacks+0x28>)
     540:	0020      	movs	r0, r4
     542:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     544:	2231      	movs	r2, #49	; 0x31
     546:	5ca3      	ldrb	r3, [r4, r2]
     548:	2103      	movs	r1, #3
     54a:	430b      	orrs	r3, r1
     54c:	54a3      	strb	r3, [r4, r2]

	//! [setup_enable_callbacks]
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
	//! [setup_enable_callbacks]
}
     54e:	bd70      	pop	{r4, r5, r6, pc}
     550:	0000042d 	.word	0x0000042d
     554:	00001821 	.word	0x00001821
     558:	00000431 	.word	0x00000431

0000055c <artist_usart_configure>:

void artist_usart_configure(struct usart_module * usart_instance) {
     55c:	b570      	push	{r4, r5, r6, lr}
     55e:	b090      	sub	sp, #64	; 0x40
     560:	0004      	movs	r4, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     562:	2380      	movs	r3, #128	; 0x80
     564:	05db      	lsls	r3, r3, #23
     566:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     568:	2300      	movs	r3, #0
     56a:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     56c:	22ff      	movs	r2, #255	; 0xff
     56e:	4669      	mov	r1, sp
     570:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     572:	2200      	movs	r2, #0
     574:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     576:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
     578:	2196      	movs	r1, #150	; 0x96
     57a:	0189      	lsls	r1, r1, #6
     57c:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
     57e:	2101      	movs	r1, #1
     580:	2024      	movs	r0, #36	; 0x24
     582:	466d      	mov	r5, sp
     584:	5429      	strb	r1, [r5, r0]
	config->transmitter_enable = true;
     586:	3001      	adds	r0, #1
     588:	5429      	strb	r1, [r5, r0]
	config->clock_polarity_inverted = false;
     58a:	3125      	adds	r1, #37	; 0x25
     58c:	546b      	strb	r3, [r5, r1]
	config->use_external_clock = false;
     58e:	3101      	adds	r1, #1
     590:	546b      	strb	r3, [r5, r1]
	config->ext_clock_freq   = 0;
     592:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     594:	3105      	adds	r1, #5
     596:	546b      	strb	r3, [r5, r1]
	config->generator_source = GCLK_GENERATOR_0;
     598:	3101      	adds	r1, #1
     59a:	546b      	strb	r3, [r5, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     59c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     59e:	822b      	strh	r3, [r5, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     5a0:	76eb      	strb	r3, [r5, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     5a2:	762a      	strb	r2, [r5, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     5a4:	772a      	strb	r2, [r5, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     5a6:	766a      	strb	r2, [r5, #25]
	config->receive_pulse_length                    = 19;
     5a8:	2313      	movs	r3, #19
     5aa:	76ab      	strb	r3, [r5, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     5ac:	776a      	strb	r2, [r5, #29]
	struct usart_config config;
	usart_get_config_defaults(&config);
	config.baudrate = CONF_ARTIST_BAUDRATE;
	config.mux_setting	= EDBG_CDC_SERCOM_MUX_SETTING;
     5ae:	2380      	movs	r3, #128	; 0x80
     5b0:	035b      	lsls	r3, r3, #13
     5b2:	9303      	str	r3, [sp, #12]
	config.pinmux_pad0	= EDBG_CDC_SERCOM_PINMUX_PAD0;
     5b4:	4b1e      	ldr	r3, [pc, #120]	; (630 <artist_usart_configure+0xd4>)
     5b6:	930c      	str	r3, [sp, #48]	; 0x30
	config.pinmux_pad1	= EDBG_CDC_SERCOM_PINMUX_PAD1;
     5b8:	4b1e      	ldr	r3, [pc, #120]	; (634 <artist_usart_configure+0xd8>)
     5ba:	930d      	str	r3, [sp, #52]	; 0x34
	config.pinmux_pad2	= EDBG_CDC_SERCOM_PINMUX_PAD2;
     5bc:	2301      	movs	r3, #1
     5be:	425b      	negs	r3, r3
     5c0:	930e      	str	r3, [sp, #56]	; 0x38
	config.pinmux_pad3	= EDBG_CDC_SERCOM_PINMUX_PAD3;
     5c2:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(usart_instance, EDBG_CDC_MODULE, &config) != STATUS_OK);
     5c4:	4e1c      	ldr	r6, [pc, #112]	; (638 <artist_usart_configure+0xdc>)
     5c6:	4d1d      	ldr	r5, [pc, #116]	; (63c <artist_usart_configure+0xe0>)
     5c8:	466a      	mov	r2, sp
     5ca:	0031      	movs	r1, r6
     5cc:	0020      	movs	r0, r4
     5ce:	47a8      	blx	r5
     5d0:	2800      	cmp	r0, #0
     5d2:	d1f9      	bne.n	5c8 <artist_usart_configure+0x6c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     5d4:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     5d6:	0028      	movs	r0, r5
     5d8:	4b19      	ldr	r3, [pc, #100]	; (640 <artist_usart_configure+0xe4>)
     5da:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     5dc:	231f      	movs	r3, #31
     5de:	4018      	ands	r0, r3
     5e0:	3b1e      	subs	r3, #30
     5e2:	4083      	lsls	r3, r0
     5e4:	4a17      	ldr	r2, [pc, #92]	; (644 <artist_usart_configure+0xe8>)
     5e6:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     5e8:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     5ea:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     5ec:	2b00      	cmp	r3, #0
     5ee:	d1fc      	bne.n	5ea <artist_usart_configure+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     5f0:	682b      	ldr	r3, [r5, #0]
     5f2:	2202      	movs	r2, #2
     5f4:	4313      	orrs	r3, r2
     5f6:	602b      	str	r3, [r5, #0]
	
	
	usart_enable(usart_instance);
	configure_usart_callbacks(usart_instance);
     5f8:	0020      	movs	r0, r4
     5fa:	4b13      	ldr	r3, [pc, #76]	; (648 <artist_usart_configure+0xec>)
     5fc:	4798      	blx	r3
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     5fe:	4b13      	ldr	r3, [pc, #76]	; (64c <artist_usart_configure+0xf0>)
     600:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     602:	4a13      	ldr	r2, [pc, #76]	; (650 <artist_usart_configure+0xf4>)
     604:	4b13      	ldr	r3, [pc, #76]	; (654 <artist_usart_configure+0xf8>)
     606:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     608:	4a13      	ldr	r2, [pc, #76]	; (658 <artist_usart_configure+0xfc>)
     60a:	4b14      	ldr	r3, [pc, #80]	; (65c <artist_usart_configure+0x100>)
     60c:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     60e:	466a      	mov	r2, sp
     610:	4909      	ldr	r1, [pc, #36]	; (638 <artist_usart_configure+0xdc>)
     612:	0020      	movs	r0, r4
     614:	4b09      	ldr	r3, [pc, #36]	; (63c <artist_usart_configure+0xe0>)
     616:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     618:	4d11      	ldr	r5, [pc, #68]	; (660 <artist_usart_configure+0x104>)
     61a:	682b      	ldr	r3, [r5, #0]
     61c:	6898      	ldr	r0, [r3, #8]
     61e:	2100      	movs	r1, #0
     620:	4c10      	ldr	r4, [pc, #64]	; (664 <artist_usart_configure+0x108>)
     622:	47a0      	blx	r4
	setbuf(stdin, NULL);
     624:	682b      	ldr	r3, [r5, #0]
     626:	6858      	ldr	r0, [r3, #4]
     628:	2100      	movs	r1, #0
     62a:	47a0      	blx	r4
	
	stdio_serial_init(usart_instance, EDBG_CDC_MODULE, &config);
}
     62c:	b010      	add	sp, #64	; 0x40
     62e:	bd70      	pop	{r4, r5, r6, pc}
     630:	00040003 	.word	0x00040003
     634:	00050003 	.word	0x00050003
     638:	42000800 	.word	0x42000800
     63c:	000013b9 	.word	0x000013b9
     640:	00000f71 	.word	0x00000f71
     644:	e000e100 	.word	0xe000e100
     648:	00000531 	.word	0x00000531
     64c:	20001628 	.word	0x20001628
     650:	000004b1 	.word	0x000004b1
     654:	20001624 	.word	0x20001624
     658:	00000485 	.word	0x00000485
     65c:	20001620 	.word	0x20001620
     660:	2000000c 	.word	0x2000000c
     664:	000058cd 	.word	0x000058cd

00000668 <artist_ultrasonic_update>:
	tcc_init(&(artist->tcc_instance), TCC0, &config);
	tcc_enable(&(artist->tcc_instance));
	*/
}

void artist_ultrasonic_update() {
     668:	b570      	push	{r4, r5, r6, lr}
	artist_front.center_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_center));
     66a:	4e09      	ldr	r6, [pc, #36]	; (690 <artist_ultrasonic_update+0x28>)
     66c:	0030      	movs	r0, r6
     66e:	4d09      	ldr	r5, [pc, #36]	; (694 <artist_ultrasonic_update+0x2c>)
     670:	47a8      	blx	r5
     672:	0034      	movs	r4, r6
     674:	3cb4      	subs	r4, #180	; 0xb4
     676:	61b0      	str	r0, [r6, #24]
	artist_front.right_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_right));
     678:	0020      	movs	r0, r4
     67a:	30c4      	adds	r0, #196	; 0xc4
     67c:	47a8      	blx	r5
     67e:	23d4      	movs	r3, #212	; 0xd4
     680:	50e0      	str	r0, [r4, r3]
	artist_front.left_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_left));
     682:	0020      	movs	r0, r4
     684:	30bc      	adds	r0, #188	; 0xbc
     686:	47a8      	blx	r5
     688:	23d0      	movs	r3, #208	; 0xd0
     68a:	50e0      	str	r0, [r4, r3]
}
     68c:	bd70      	pop	{r4, r5, r6, pc}
     68e:	46c0      	nop			; (mov r8, r8)
     690:	20000934 	.word	0x20000934
     694:	000001e1 	.word	0x000001e1

00000698 <callbacks>:
	//! [setup_enable]
	tc_enable(&(artist_front.tc_instance_timer));
	//! [setup_enable]
}

void callbacks (void) {
     698:	b510      	push	{r4, lr}
	// [ultra sonic]
	static uint16_t ultrasonic_counter		= 0;
	static uint16_t maze_counter			= 0; 
	ultrasonic_counter ++;
     69a:	4a0c      	ldr	r2, [pc, #48]	; (6cc <callbacks+0x34>)
     69c:	8813      	ldrh	r3, [r2, #0]
     69e:	3301      	adds	r3, #1
     6a0:	b29b      	uxth	r3, r3
     6a2:	8013      	strh	r3, [r2, #0]
	maze_counter ++; 
     6a4:	490a      	ldr	r1, [pc, #40]	; (6d0 <callbacks+0x38>)
     6a6:	880a      	ldrh	r2, [r1, #0]
     6a8:	3201      	adds	r2, #1
     6aa:	800a      	strh	r2, [r1, #0]
	
	if (ultrasonic_counter > 5) {
     6ac:	2b05      	cmp	r3, #5
     6ae:	d807      	bhi.n	6c0 <callbacks+0x28>
		artist_ultrasonic_update();
		ultrasonic_counter = 0; 
	}
	
	if (maze_counter > 10) {
     6b0:	4b07      	ldr	r3, [pc, #28]	; (6d0 <callbacks+0x38>)
     6b2:	881b      	ldrh	r3, [r3, #0]
     6b4:	2b0a      	cmp	r3, #10
     6b6:	d902      	bls.n	6be <callbacks+0x26>
	//	artist_do_maze(); 
		maze_counter = 0; 
     6b8:	2200      	movs	r2, #0
     6ba:	4b05      	ldr	r3, [pc, #20]	; (6d0 <callbacks+0x38>)
     6bc:	801a      	strh	r2, [r3, #0]
	}
	
	// ! [ultra sonic]
}
     6be:	bd10      	pop	{r4, pc}
		artist_ultrasonic_update();
     6c0:	4b04      	ldr	r3, [pc, #16]	; (6d4 <callbacks+0x3c>)
     6c2:	4798      	blx	r3
		ultrasonic_counter = 0; 
     6c4:	2200      	movs	r2, #0
     6c6:	4b01      	ldr	r3, [pc, #4]	; (6cc <callbacks+0x34>)
     6c8:	801a      	strh	r2, [r3, #0]
     6ca:	e7f1      	b.n	6b0 <callbacks+0x18>
     6cc:	200001fa 	.word	0x200001fa
     6d0:	200001f8 	.word	0x200001f8
     6d4:	00000669 	.word	0x00000669

000006d8 <artist_scheduler_tc_configure>:
void artist_scheduler_tc_configure() {
     6d8:	b510      	push	{r4, lr}
     6da:	b08e      	sub	sp, #56	; 0x38
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     6dc:	aa01      	add	r2, sp, #4
     6de:	2300      	movs	r3, #0
     6e0:	2100      	movs	r1, #0
     6e2:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     6e4:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     6e6:	2000      	movs	r0, #0
     6e8:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     6ea:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     6ec:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     6ee:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     6f0:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     6f2:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     6f4:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     6f6:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     6f8:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     6fa:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     6fc:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     6fe:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
     700:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     702:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     704:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
     706:	3304      	adds	r3, #4
     708:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source = GCLK_GENERATOR_3;
     70a:	3b01      	subs	r3, #1
     70c:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024; //
     70e:	23e0      	movs	r3, #224	; 0xe0
     710:	00db      	lsls	r3, r3, #3
     712:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period = 50;
     714:	2132      	movs	r1, #50	; 0x32
     716:	2329      	movs	r3, #41	; 0x29
     718:	54d1      	strb	r1, [r2, r3]
	tc_init(&(artist_front.tc_instance_timer), TC5, &config_tc);
     71a:	4c08      	ldr	r4, [pc, #32]	; (73c <artist_scheduler_tc_configure+0x64>)
     71c:	4908      	ldr	r1, [pc, #32]	; (740 <artist_scheduler_tc_configure+0x68>)
     71e:	0020      	movs	r0, r4
     720:	4b08      	ldr	r3, [pc, #32]	; (744 <artist_scheduler_tc_configure+0x6c>)
     722:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     724:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     726:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     728:	b25b      	sxtb	r3, r3
     72a:	2b00      	cmp	r3, #0
     72c:	dbfb      	blt.n	726 <artist_scheduler_tc_configure+0x4e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     72e:	8813      	ldrh	r3, [r2, #0]
     730:	2102      	movs	r1, #2
     732:	430b      	orrs	r3, r1
     734:	8013      	strh	r3, [r2, #0]
}
     736:	b00e      	add	sp, #56	; 0x38
     738:	bd10      	pop	{r4, pc}
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	2000089c 	.word	0x2000089c
     740:	42003400 	.word	0x42003400
     744:	000023b9 	.word	0x000023b9

00000748 <artist_configure_tc_callbacks>:
void artist_configure_tc_callbacks(void)
{
     748:	b510      	push	{r4, lr}
	tc_register_callback(&(artist_front.tc_instance_timer), callbacks ,
     74a:	4c0d      	ldr	r4, [pc, #52]	; (780 <artist_configure_tc_callbacks+0x38>)
     74c:	2200      	movs	r2, #0
     74e:	490d      	ldr	r1, [pc, #52]	; (784 <artist_configure_tc_callbacks+0x3c>)
     750:	0020      	movs	r0, r4
     752:	4b0d      	ldr	r3, [pc, #52]	; (788 <artist_configure_tc_callbacks+0x40>)
     754:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     756:	6820      	ldr	r0, [r4, #0]
     758:	3c1c      	subs	r4, #28
     75a:	4b0c      	ldr	r3, [pc, #48]	; (78c <artist_configure_tc_callbacks+0x44>)
     75c:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     75e:	4b0c      	ldr	r3, [pc, #48]	; (790 <artist_configure_tc_callbacks+0x48>)
     760:	5c1a      	ldrb	r2, [r3, r0]
     762:	231f      	movs	r3, #31
     764:	4013      	ands	r3, r2
     766:	2201      	movs	r2, #1
     768:	0011      	movs	r1, r2
     76a:	4099      	lsls	r1, r3
     76c:	4b09      	ldr	r3, [pc, #36]	; (794 <artist_configure_tc_callbacks+0x4c>)
     76e:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     770:	2135      	movs	r1, #53	; 0x35
     772:	5c63      	ldrb	r3, [r4, r1]
     774:	2001      	movs	r0, #1
     776:	4303      	orrs	r3, r0
     778:	5463      	strb	r3, [r4, r1]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     77a:	69e3      	ldr	r3, [r4, #28]
     77c:	735a      	strb	r2, [r3, #13]
	TC_CALLBACK_OVERFLOW);
	
	tc_enable_callback(&(artist_front.tc_instance_timer), TC_CALLBACK_OVERFLOW);
     77e:	bd10      	pop	{r4, pc}
     780:	2000089c 	.word	0x2000089c
     784:	00000699 	.word	0x00000699
     788:	000022b9 	.word	0x000022b9
     78c:	00002381 	.word	0x00002381
     790:	0000a438 	.word	0x0000a438
     794:	e000e100 	.word	0xe000e100

00000798 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     798:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     79a:	2000      	movs	r0, #0
     79c:	4b08      	ldr	r3, [pc, #32]	; (7c0 <delay_init+0x28>)
     79e:	4798      	blx	r3
     7a0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     7a2:	4c08      	ldr	r4, [pc, #32]	; (7c4 <delay_init+0x2c>)
     7a4:	21fa      	movs	r1, #250	; 0xfa
     7a6:	0089      	lsls	r1, r1, #2
     7a8:	47a0      	blx	r4
     7aa:	4b07      	ldr	r3, [pc, #28]	; (7c8 <delay_init+0x30>)
     7ac:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     7ae:	4907      	ldr	r1, [pc, #28]	; (7cc <delay_init+0x34>)
     7b0:	0028      	movs	r0, r5
     7b2:	47a0      	blx	r4
     7b4:	4b06      	ldr	r3, [pc, #24]	; (7d0 <delay_init+0x38>)
     7b6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     7b8:	2205      	movs	r2, #5
     7ba:	4b06      	ldr	r3, [pc, #24]	; (7d4 <delay_init+0x3c>)
     7bc:	601a      	str	r2, [r3, #0]
}
     7be:	bd70      	pop	{r4, r5, r6, pc}
     7c0:	00002049 	.word	0x00002049
     7c4:	00007891 	.word	0x00007891
     7c8:	20000000 	.word	0x20000000
     7cc:	000f4240 	.word	0x000f4240
     7d0:	20000004 	.word	0x20000004
     7d4:	e000e010 	.word	0xe000e010

000007d8 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     7d8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     7da:	4b08      	ldr	r3, [pc, #32]	; (7fc <delay_cycles_us+0x24>)
     7dc:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     7de:	4a08      	ldr	r2, [pc, #32]	; (800 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     7e0:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     7e2:	2180      	movs	r1, #128	; 0x80
     7e4:	0249      	lsls	r1, r1, #9
	while (n--) {
     7e6:	3801      	subs	r0, #1
     7e8:	d307      	bcc.n	7fa <delay_cycles_us+0x22>
	if (n > 0) {
     7ea:	2c00      	cmp	r4, #0
     7ec:	d0fb      	beq.n	7e6 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     7ee:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     7f0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     7f2:	6813      	ldr	r3, [r2, #0]
     7f4:	420b      	tst	r3, r1
     7f6:	d0fc      	beq.n	7f2 <delay_cycles_us+0x1a>
     7f8:	e7f5      	b.n	7e6 <delay_cycles_us+0xe>
	}
}
     7fa:	bd30      	pop	{r4, r5, pc}
     7fc:	20000004 	.word	0x20000004
     800:	e000e010 	.word	0xe000e010

00000804 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     804:	4b0c      	ldr	r3, [pc, #48]	; (838 <cpu_irq_enter_critical+0x34>)
     806:	681b      	ldr	r3, [r3, #0]
     808:	2b00      	cmp	r3, #0
     80a:	d106      	bne.n	81a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     80c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     810:	2b00      	cmp	r3, #0
     812:	d007      	beq.n	824 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     814:	2200      	movs	r2, #0
     816:	4b09      	ldr	r3, [pc, #36]	; (83c <cpu_irq_enter_critical+0x38>)
     818:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     81a:	4a07      	ldr	r2, [pc, #28]	; (838 <cpu_irq_enter_critical+0x34>)
     81c:	6813      	ldr	r3, [r2, #0]
     81e:	3301      	adds	r3, #1
     820:	6013      	str	r3, [r2, #0]
}
     822:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     824:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     826:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     82a:	2200      	movs	r2, #0
     82c:	4b04      	ldr	r3, [pc, #16]	; (840 <cpu_irq_enter_critical+0x3c>)
     82e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     830:	3201      	adds	r2, #1
     832:	4b02      	ldr	r3, [pc, #8]	; (83c <cpu_irq_enter_critical+0x38>)
     834:	701a      	strb	r2, [r3, #0]
     836:	e7f0      	b.n	81a <cpu_irq_enter_critical+0x16>
     838:	200001fc 	.word	0x200001fc
     83c:	20000200 	.word	0x20000200
     840:	20000008 	.word	0x20000008

00000844 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     844:	4b08      	ldr	r3, [pc, #32]	; (868 <cpu_irq_leave_critical+0x24>)
     846:	681a      	ldr	r2, [r3, #0]
     848:	3a01      	subs	r2, #1
     84a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     84c:	681b      	ldr	r3, [r3, #0]
     84e:	2b00      	cmp	r3, #0
     850:	d109      	bne.n	866 <cpu_irq_leave_critical+0x22>
     852:	4b06      	ldr	r3, [pc, #24]	; (86c <cpu_irq_leave_critical+0x28>)
     854:	781b      	ldrb	r3, [r3, #0]
     856:	2b00      	cmp	r3, #0
     858:	d005      	beq.n	866 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     85a:	2201      	movs	r2, #1
     85c:	4b04      	ldr	r3, [pc, #16]	; (870 <cpu_irq_leave_critical+0x2c>)
     85e:	701a      	strb	r2, [r3, #0]
     860:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     864:	b662      	cpsie	i
	}
}
     866:	4770      	bx	lr
     868:	200001fc 	.word	0x200001fc
     86c:	20000200 	.word	0x20000200
     870:	20000008 	.word	0x20000008

00000874 <system_board_init>:




void system_board_init(void)
{
     874:	b5f0      	push	{r4, r5, r6, r7, lr}
     876:	46c6      	mov	lr, r8
     878:	b500      	push	{lr}
     87a:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
     87c:	ac01      	add	r4, sp, #4
     87e:	2601      	movs	r6, #1
     880:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     882:	2700      	movs	r7, #0
     884:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     886:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     888:	0021      	movs	r1, r4
     88a:	2013      	movs	r0, #19
     88c:	4d27      	ldr	r5, [pc, #156]	; (92c <system_board_init+0xb8>)
     88e:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     890:	4b27      	ldr	r3, [pc, #156]	; (930 <system_board_init+0xbc>)
     892:	4698      	mov	r8, r3
     894:	2380      	movs	r3, #128	; 0x80
     896:	031b      	lsls	r3, r3, #12
     898:	4642      	mov	r2, r8
     89a:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     89c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     89e:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     8a0:	0021      	movs	r1, r4
     8a2:	201c      	movs	r0, #28
     8a4:	47a8      	blx	r5
	config->input_pull = PORT_PIN_PULL_UP;
     8a6:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     8a8:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     8aa:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     8ac:	0021      	movs	r1, r4
     8ae:	2052      	movs	r0, #82	; 0x52
     8b0:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     8b2:	0021      	movs	r1, r4
     8b4:	203e      	movs	r0, #62	; 0x3e
     8b6:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     8b8:	0021      	movs	r1, r4
     8ba:	203f      	movs	r0, #63	; 0x3f
     8bc:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     8be:	0021      	movs	r1, r4
     8c0:	202f      	movs	r0, #47	; 0x2f
     8c2:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     8c4:	0021      	movs	r1, r4
     8c6:	2014      	movs	r0, #20
     8c8:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     8ca:	2280      	movs	r2, #128	; 0x80
     8cc:	02d2      	lsls	r2, r2, #11
     8ce:	4b19      	ldr	r3, [pc, #100]	; (934 <system_board_init+0xc0>)
     8d0:	619a      	str	r2, [r3, #24]
     8d2:	4b19      	ldr	r3, [pc, #100]	; (938 <system_board_init+0xc4>)
     8d4:	2280      	movs	r2, #128	; 0x80
     8d6:	05d2      	lsls	r2, r2, #23
     8d8:	619a      	str	r2, [r3, #24]
     8da:	2280      	movs	r2, #128	; 0x80
     8dc:	0612      	lsls	r2, r2, #24
     8de:	619a      	str	r2, [r3, #24]
     8e0:	2280      	movs	r2, #128	; 0x80
     8e2:	0212      	lsls	r2, r2, #8
     8e4:	619a      	str	r2, [r3, #24]
     8e6:	2380      	movs	r3, #128	; 0x80
     8e8:	035b      	lsls	r3, r3, #13
     8ea:	4642      	mov	r2, r8
     8ec:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     8ee:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     8f0:	0021      	movs	r1, r4
     8f2:	2053      	movs	r0, #83	; 0x53
     8f4:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     8f6:	4a11      	ldr	r2, [pc, #68]	; (93c <system_board_init+0xc8>)
     8f8:	6a11      	ldr	r1, [r2, #32]
     8fa:	2380      	movs	r3, #128	; 0x80
     8fc:	039b      	lsls	r3, r3, #14
     8fe:	430b      	orrs	r3, r1
     900:	6213      	str	r3, [r2, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     902:	2204      	movs	r2, #4
     904:	4b0e      	ldr	r3, [pc, #56]	; (940 <system_board_init+0xcc>)
     906:	801a      	strh	r2, [r3, #0]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     908:	466b      	mov	r3, sp
     90a:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     90c:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     90e:	2305      	movs	r3, #5
     910:	466a      	mov	r2, sp
     912:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     914:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     916:	4669      	mov	r1, sp
     918:	2009      	movs	r0, #9
     91a:	4c0a      	ldr	r4, [pc, #40]	; (944 <system_board_init+0xd0>)
     91c:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     91e:	4669      	mov	r1, sp
     920:	200c      	movs	r0, #12
     922:	47a0      	blx	r4
#endif

}
     924:	b002      	add	sp, #8
     926:	bc04      	pop	{r2}
     928:	4690      	mov	r8, r2
     92a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     92c:	00000b19 	.word	0x00000b19
     930:	41004400 	.word	0x41004400
     934:	41004500 	.word	0x41004500
     938:	41004480 	.word	0x41004480
     93c:	40000400 	.word	0x40000400
     940:	42005400 	.word	0x42005400
     944:	00002259 	.word	0x00002259

00000948 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     948:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     94a:	2a00      	cmp	r2, #0
     94c:	d001      	beq.n	952 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     94e:	0018      	movs	r0, r3
     950:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     952:	008b      	lsls	r3, r1, #2
     954:	4a06      	ldr	r2, [pc, #24]	; (970 <extint_register_callback+0x28>)
     956:	589b      	ldr	r3, [r3, r2]
     958:	2b00      	cmp	r3, #0
     95a:	d003      	beq.n	964 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     95c:	4283      	cmp	r3, r0
     95e:	d005      	beq.n	96c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     960:	231d      	movs	r3, #29
     962:	e7f4      	b.n	94e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     964:	0089      	lsls	r1, r1, #2
     966:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     968:	2300      	movs	r3, #0
     96a:	e7f0      	b.n	94e <extint_register_callback+0x6>
		return STATUS_OK;
     96c:	2300      	movs	r3, #0
     96e:	e7ee      	b.n	94e <extint_register_callback+0x6>
     970:	200015bc 	.word	0x200015bc

00000974 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     974:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     976:	2900      	cmp	r1, #0
     978:	d001      	beq.n	97e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     97a:	0018      	movs	r0, r3
     97c:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     97e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     980:	281f      	cmp	r0, #31
     982:	d800      	bhi.n	986 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     984:	4a02      	ldr	r2, [pc, #8]	; (990 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     986:	2301      	movs	r3, #1
     988:	4083      	lsls	r3, r0
     98a:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     98c:	2300      	movs	r3, #0
     98e:	e7f4      	b.n	97a <extint_chan_enable_callback+0x6>
     990:	40001800 	.word	0x40001800

00000994 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     994:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     996:	2900      	cmp	r1, #0
     998:	d001      	beq.n	99e <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
     99a:	0018      	movs	r0, r3
     99c:	4770      	bx	lr
		return NULL;
     99e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     9a0:	281f      	cmp	r0, #31
     9a2:	d800      	bhi.n	9a6 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
     9a4:	4a02      	ldr	r2, [pc, #8]	; (9b0 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
     9a6:	2301      	movs	r3, #1
     9a8:	4083      	lsls	r3, r0
     9aa:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
     9ac:	2300      	movs	r3, #0
     9ae:	e7f4      	b.n	99a <extint_chan_disable_callback+0x6>
     9b0:	40001800 	.word	0x40001800

000009b4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     9b4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     9b6:	2200      	movs	r2, #0
     9b8:	4b10      	ldr	r3, [pc, #64]	; (9fc <EIC_Handler+0x48>)
     9ba:	701a      	strb	r2, [r3, #0]
     9bc:	2300      	movs	r3, #0
     9be:	4910      	ldr	r1, [pc, #64]	; (a00 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     9c0:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     9c2:	4e10      	ldr	r6, [pc, #64]	; (a04 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     9c4:	4c0d      	ldr	r4, [pc, #52]	; (9fc <EIC_Handler+0x48>)
     9c6:	e00a      	b.n	9de <EIC_Handler+0x2a>
		return eics[eic_index];
     9c8:	490d      	ldr	r1, [pc, #52]	; (a00 <EIC_Handler+0x4c>)
     9ca:	e008      	b.n	9de <EIC_Handler+0x2a>
     9cc:	7823      	ldrb	r3, [r4, #0]
     9ce:	3301      	adds	r3, #1
     9d0:	b2db      	uxtb	r3, r3
     9d2:	7023      	strb	r3, [r4, #0]
     9d4:	2b0f      	cmp	r3, #15
     9d6:	d810      	bhi.n	9fa <EIC_Handler+0x46>
		return NULL;
     9d8:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     9da:	2b1f      	cmp	r3, #31
     9dc:	d9f4      	bls.n	9c8 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     9de:	0028      	movs	r0, r5
     9e0:	4018      	ands	r0, r3
     9e2:	2201      	movs	r2, #1
     9e4:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     9e6:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     9e8:	4210      	tst	r0, r2
     9ea:	d0ef      	beq.n	9cc <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     9ec:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     9ee:	009b      	lsls	r3, r3, #2
     9f0:	599b      	ldr	r3, [r3, r6]
     9f2:	2b00      	cmp	r3, #0
     9f4:	d0ea      	beq.n	9cc <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     9f6:	4798      	blx	r3
     9f8:	e7e8      	b.n	9cc <EIC_Handler+0x18>
			}
		}
	}
}
     9fa:	bd70      	pop	{r4, r5, r6, pc}
     9fc:	200015b8 	.word	0x200015b8
     a00:	40001800 	.word	0x40001800
     a04:	200015bc 	.word	0x200015bc

00000a08 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     a08:	4a04      	ldr	r2, [pc, #16]	; (a1c <_extint_enable+0x14>)
     a0a:	7813      	ldrb	r3, [r2, #0]
     a0c:	2102      	movs	r1, #2
     a0e:	430b      	orrs	r3, r1
     a10:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     a12:	7853      	ldrb	r3, [r2, #1]
     a14:	b25b      	sxtb	r3, r3
     a16:	2b00      	cmp	r3, #0
     a18:	dbfb      	blt.n	a12 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     a1a:	4770      	bx	lr
     a1c:	40001800 	.word	0x40001800

00000a20 <_system_extint_init>:
{
     a20:	b500      	push	{lr}
     a22:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     a24:	4a12      	ldr	r2, [pc, #72]	; (a70 <_system_extint_init+0x50>)
     a26:	6993      	ldr	r3, [r2, #24]
     a28:	2140      	movs	r1, #64	; 0x40
     a2a:	430b      	orrs	r3, r1
     a2c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     a2e:	a901      	add	r1, sp, #4
     a30:	2300      	movs	r3, #0
     a32:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     a34:	2005      	movs	r0, #5
     a36:	4b0f      	ldr	r3, [pc, #60]	; (a74 <_system_extint_init+0x54>)
     a38:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     a3a:	2005      	movs	r0, #5
     a3c:	4b0e      	ldr	r3, [pc, #56]	; (a78 <_system_extint_init+0x58>)
     a3e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     a40:	4a0e      	ldr	r2, [pc, #56]	; (a7c <_system_extint_init+0x5c>)
     a42:	7813      	ldrb	r3, [r2, #0]
     a44:	2101      	movs	r1, #1
     a46:	430b      	orrs	r3, r1
     a48:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     a4a:	7853      	ldrb	r3, [r2, #1]
     a4c:	b25b      	sxtb	r3, r3
     a4e:	2b00      	cmp	r3, #0
     a50:	dbfb      	blt.n	a4a <_system_extint_init+0x2a>
     a52:	4b0b      	ldr	r3, [pc, #44]	; (a80 <_system_extint_init+0x60>)
     a54:	0019      	movs	r1, r3
     a56:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     a58:	2200      	movs	r2, #0
     a5a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     a5c:	4299      	cmp	r1, r3
     a5e:	d1fc      	bne.n	a5a <_system_extint_init+0x3a>
     a60:	2210      	movs	r2, #16
     a62:	4b08      	ldr	r3, [pc, #32]	; (a84 <_system_extint_init+0x64>)
     a64:	601a      	str	r2, [r3, #0]
	_extint_enable();
     a66:	4b08      	ldr	r3, [pc, #32]	; (a88 <_system_extint_init+0x68>)
     a68:	4798      	blx	r3
}
     a6a:	b003      	add	sp, #12
     a6c:	bd00      	pop	{pc}
     a6e:	46c0      	nop			; (mov r8, r8)
     a70:	40000400 	.word	0x40000400
     a74:	00002161 	.word	0x00002161
     a78:	000020d5 	.word	0x000020d5
     a7c:	40001800 	.word	0x40001800
     a80:	200015bc 	.word	0x200015bc
     a84:	e000e100 	.word	0xe000e100
     a88:	00000a09 	.word	0x00000a09

00000a8c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     a8c:	2300      	movs	r3, #0
     a8e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     a90:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     a92:	2201      	movs	r2, #1
     a94:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     a96:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     a98:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     a9a:	3302      	adds	r3, #2
     a9c:	72c3      	strb	r3, [r0, #11]
}
     a9e:	4770      	bx	lr

00000aa0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
     aa2:	b083      	sub	sp, #12
     aa4:	0005      	movs	r5, r0
     aa6:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     aa8:	a901      	add	r1, sp, #4
     aaa:	2300      	movs	r3, #0
     aac:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     aae:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     ab0:	7923      	ldrb	r3, [r4, #4]
     ab2:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     ab4:	7a23      	ldrb	r3, [r4, #8]
     ab6:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     ab8:	7820      	ldrb	r0, [r4, #0]
     aba:	4b15      	ldr	r3, [pc, #84]	; (b10 <extint_chan_set_config+0x70>)
     abc:	4798      	blx	r3
		return NULL;
     abe:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     ac0:	2d1f      	cmp	r5, #31
     ac2:	d800      	bhi.n	ac6 <extint_chan_set_config+0x26>
		return eics[eic_index];
     ac4:	4813      	ldr	r0, [pc, #76]	; (b14 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     ac6:	2207      	movs	r2, #7
     ac8:	402a      	ands	r2, r5
     aca:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     acc:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     ace:	7aa3      	ldrb	r3, [r4, #10]
     ad0:	2b00      	cmp	r3, #0
     ad2:	d001      	beq.n	ad8 <extint_chan_set_config+0x38>
     ad4:	2308      	movs	r3, #8
     ad6:	431f      	orrs	r7, r3
     ad8:	08eb      	lsrs	r3, r5, #3
     ada:	009b      	lsls	r3, r3, #2
     adc:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     ade:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     ae0:	260f      	movs	r6, #15
     ae2:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     ae4:	43b1      	bics	r1, r6
			(new_config << config_pos);
     ae6:	4097      	lsls	r7, r2
     ae8:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     aea:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     aec:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     aee:	7a63      	ldrb	r3, [r4, #9]
     af0:	2b00      	cmp	r3, #0
     af2:	d106      	bne.n	b02 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     af4:	6943      	ldr	r3, [r0, #20]
     af6:	2201      	movs	r2, #1
     af8:	40aa      	lsls	r2, r5
     afa:	4393      	bics	r3, r2
     afc:	6143      	str	r3, [r0, #20]
	}
}
     afe:	b003      	add	sp, #12
     b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     b02:	6942      	ldr	r2, [r0, #20]
     b04:	2301      	movs	r3, #1
     b06:	40ab      	lsls	r3, r5
     b08:	4313      	orrs	r3, r2
     b0a:	6143      	str	r3, [r0, #20]
     b0c:	e7f7      	b.n	afe <extint_chan_set_config+0x5e>
     b0e:	46c0      	nop			; (mov r8, r8)
     b10:	00002259 	.word	0x00002259
     b14:	40001800 	.word	0x40001800

00000b18 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     b18:	b500      	push	{lr}
     b1a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     b1c:	ab01      	add	r3, sp, #4
     b1e:	2280      	movs	r2, #128	; 0x80
     b20:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     b22:	780a      	ldrb	r2, [r1, #0]
     b24:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     b26:	784a      	ldrb	r2, [r1, #1]
     b28:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     b2a:	788a      	ldrb	r2, [r1, #2]
     b2c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     b2e:	0019      	movs	r1, r3
     b30:	4b01      	ldr	r3, [pc, #4]	; (b38 <port_pin_set_config+0x20>)
     b32:	4798      	blx	r3
}
     b34:	b003      	add	sp, #12
     b36:	bd00      	pop	{pc}
     b38:	00002259 	.word	0x00002259

00000b3c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     b3c:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     b3e:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b40:	2340      	movs	r3, #64	; 0x40
     b42:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     b44:	4281      	cmp	r1, r0
     b46:	d202      	bcs.n	b4e <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     b48:	0018      	movs	r0, r3
     b4a:	bd10      	pop	{r4, pc}
		baud_calculated++;
     b4c:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     b4e:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     b50:	1c63      	adds	r3, r4, #1
     b52:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     b54:	4288      	cmp	r0, r1
     b56:	d9f9      	bls.n	b4c <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b58:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     b5a:	2cff      	cmp	r4, #255	; 0xff
     b5c:	d8f4      	bhi.n	b48 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     b5e:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     b60:	2300      	movs	r3, #0
     b62:	e7f1      	b.n	b48 <_sercom_get_sync_baud_val+0xc>

00000b64 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     b64:	b5f0      	push	{r4, r5, r6, r7, lr}
     b66:	46de      	mov	lr, fp
     b68:	4657      	mov	r7, sl
     b6a:	464e      	mov	r6, r9
     b6c:	4645      	mov	r5, r8
     b6e:	b5e0      	push	{r5, r6, r7, lr}
     b70:	b089      	sub	sp, #36	; 0x24
     b72:	000c      	movs	r4, r1
     b74:	9205      	str	r2, [sp, #20]
     b76:	aa12      	add	r2, sp, #72	; 0x48
     b78:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     b7a:	0005      	movs	r5, r0
     b7c:	434d      	muls	r5, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b7e:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     b80:	42a5      	cmp	r5, r4
     b82:	d907      	bls.n	b94 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     b84:	0010      	movs	r0, r2
     b86:	b009      	add	sp, #36	; 0x24
     b88:	bc3c      	pop	{r2, r3, r4, r5}
     b8a:	4690      	mov	r8, r2
     b8c:	4699      	mov	r9, r3
     b8e:	46a2      	mov	sl, r4
     b90:	46ab      	mov	fp, r5
     b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     b94:	2b00      	cmp	r3, #0
     b96:	d155      	bne.n	c44 <_sercom_get_async_baud_val+0xe0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     b98:	0002      	movs	r2, r0
     b9a:	0008      	movs	r0, r1
     b9c:	2100      	movs	r1, #0
     b9e:	4d63      	ldr	r5, [pc, #396]	; (d2c <_sercom_get_async_baud_val+0x1c8>)
     ba0:	47a8      	blx	r5
     ba2:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     ba4:	0026      	movs	r6, r4
     ba6:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
     ba8:	2300      	movs	r3, #0
     baa:	2400      	movs	r4, #0
     bac:	9300      	str	r3, [sp, #0]
     bae:	9401      	str	r4, [sp, #4]
     bb0:	2200      	movs	r2, #0
     bb2:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     bb4:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     bb6:	2120      	movs	r1, #32
     bb8:	468c      	mov	ip, r1
     bba:	391f      	subs	r1, #31
     bbc:	9602      	str	r6, [sp, #8]
     bbe:	9703      	str	r7, [sp, #12]
     bc0:	e014      	b.n	bec <_sercom_get_async_baud_val+0x88>
     bc2:	4664      	mov	r4, ip
     bc4:	1a24      	subs	r4, r4, r0
     bc6:	000d      	movs	r5, r1
     bc8:	40e5      	lsrs	r5, r4
     bca:	46a8      	mov	r8, r5
     bcc:	e015      	b.n	bfa <_sercom_get_async_baud_val+0x96>
			r = r - d;
     bce:	9c02      	ldr	r4, [sp, #8]
     bd0:	9d03      	ldr	r5, [sp, #12]
     bd2:	1b12      	subs	r2, r2, r4
     bd4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     bd6:	464d      	mov	r5, r9
     bd8:	9e00      	ldr	r6, [sp, #0]
     bda:	9f01      	ldr	r7, [sp, #4]
     bdc:	4335      	orrs	r5, r6
     bde:	003c      	movs	r4, r7
     be0:	4646      	mov	r6, r8
     be2:	4334      	orrs	r4, r6
     be4:	9500      	str	r5, [sp, #0]
     be6:	9401      	str	r4, [sp, #4]
	for (i = 63; i >= 0; i--) {
     be8:	3801      	subs	r0, #1
     bea:	d31d      	bcc.n	c28 <_sercom_get_async_baud_val+0xc4>
		bit_shift = (uint64_t)1 << i;
     bec:	2420      	movs	r4, #32
     bee:	4264      	negs	r4, r4
     bf0:	1904      	adds	r4, r0, r4
     bf2:	d4e6      	bmi.n	bc2 <_sercom_get_async_baud_val+0x5e>
     bf4:	000d      	movs	r5, r1
     bf6:	40a5      	lsls	r5, r4
     bf8:	46a8      	mov	r8, r5
     bfa:	000c      	movs	r4, r1
     bfc:	4084      	lsls	r4, r0
     bfe:	46a1      	mov	r9, r4
		r = r << 1;
     c00:	1892      	adds	r2, r2, r2
     c02:	415b      	adcs	r3, r3
     c04:	0014      	movs	r4, r2
     c06:	001d      	movs	r5, r3
		if (n & bit_shift) {
     c08:	4646      	mov	r6, r8
     c0a:	465f      	mov	r7, fp
     c0c:	423e      	tst	r6, r7
     c0e:	d003      	beq.n	c18 <_sercom_get_async_baud_val+0xb4>
			r |= 0x01;
     c10:	000e      	movs	r6, r1
     c12:	4326      	orrs	r6, r4
     c14:	0032      	movs	r2, r6
     c16:	002b      	movs	r3, r5
		if (r >= d) {
     c18:	9c02      	ldr	r4, [sp, #8]
     c1a:	9d03      	ldr	r5, [sp, #12]
     c1c:	429d      	cmp	r5, r3
     c1e:	d8e3      	bhi.n	be8 <_sercom_get_async_baud_val+0x84>
     c20:	d1d5      	bne.n	bce <_sercom_get_async_baud_val+0x6a>
     c22:	4294      	cmp	r4, r2
     c24:	d8e0      	bhi.n	be8 <_sercom_get_async_baud_val+0x84>
     c26:	e7d2      	b.n	bce <_sercom_get_async_baud_val+0x6a>
		scale = ((uint64_t)1 << SHIFT) - ratio;
     c28:	2200      	movs	r2, #0
     c2a:	2301      	movs	r3, #1
     c2c:	9800      	ldr	r0, [sp, #0]
     c2e:	9901      	ldr	r1, [sp, #4]
     c30:	1a12      	subs	r2, r2, r0
     c32:	418b      	sbcs	r3, r1
     c34:	0019      	movs	r1, r3
		baud_calculated = (65536 * scale) >> SHIFT;
     c36:	0c13      	lsrs	r3, r2, #16
     c38:	040a      	lsls	r2, r1, #16
     c3a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     c3c:	9b05      	ldr	r3, [sp, #20]
     c3e:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     c40:	2200      	movs	r2, #0
     c42:	e79f      	b.n	b84 <_sercom_get_async_baud_val+0x20>
	uint64_t baud_calculated = 0;
     c44:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     c46:	2b01      	cmp	r3, #1
     c48:	d1f8      	bne.n	c3c <_sercom_get_async_baud_val+0xd8>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     c4a:	0f63      	lsrs	r3, r4, #29
     c4c:	9304      	str	r3, [sp, #16]
     c4e:	00e3      	lsls	r3, r4, #3
     c50:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     c52:	000a      	movs	r2, r1
     c54:	2300      	movs	r3, #0
     c56:	2100      	movs	r1, #0
     c58:	4c34      	ldr	r4, [pc, #208]	; (d2c <_sercom_get_async_baud_val+0x1c8>)
     c5a:	47a0      	blx	r4
     c5c:	0004      	movs	r4, r0
     c5e:	000d      	movs	r5, r1
     c60:	2300      	movs	r3, #0
     c62:	469c      	mov	ip, r3
     c64:	9306      	str	r3, [sp, #24]
		bit_shift = (uint64_t)1 << i;
     c66:	3320      	adds	r3, #32
     c68:	469b      	mov	fp, r3
     c6a:	2601      	movs	r6, #1
			if(baud_int < BAUD_INT_MAX) {
     c6c:	4663      	mov	r3, ip
     c6e:	9307      	str	r3, [sp, #28]
     c70:	e048      	b.n	d04 <_sercom_get_async_baud_val+0x1a0>
		bit_shift = (uint64_t)1 << i;
     c72:	4659      	mov	r1, fp
     c74:	1bc9      	subs	r1, r1, r7
     c76:	0030      	movs	r0, r6
     c78:	40c8      	lsrs	r0, r1
     c7a:	4682      	mov	sl, r0
     c7c:	e010      	b.n	ca0 <_sercom_get_async_baud_val+0x13c>
			r = r - d;
     c7e:	9800      	ldr	r0, [sp, #0]
     c80:	9901      	ldr	r1, [sp, #4]
     c82:	1a12      	subs	r2, r2, r0
     c84:	418b      	sbcs	r3, r1
			q |= bit_shift;
     c86:	9902      	ldr	r1, [sp, #8]
     c88:	4648      	mov	r0, r9
     c8a:	4301      	orrs	r1, r0
     c8c:	9102      	str	r1, [sp, #8]
	for (i = 63; i >= 0; i--) {
     c8e:	3f01      	subs	r7, #1
     c90:	d325      	bcc.n	cde <_sercom_get_async_baud_val+0x17a>
		bit_shift = (uint64_t)1 << i;
     c92:	2120      	movs	r1, #32
     c94:	4249      	negs	r1, r1
     c96:	1879      	adds	r1, r7, r1
     c98:	d4eb      	bmi.n	c72 <_sercom_get_async_baud_val+0x10e>
     c9a:	0030      	movs	r0, r6
     c9c:	4088      	lsls	r0, r1
     c9e:	4682      	mov	sl, r0
     ca0:	0031      	movs	r1, r6
     ca2:	40b9      	lsls	r1, r7
     ca4:	4689      	mov	r9, r1
		r = r << 1;
     ca6:	1892      	adds	r2, r2, r2
     ca8:	415b      	adcs	r3, r3
     caa:	0010      	movs	r0, r2
     cac:	0019      	movs	r1, r3
		if (n & bit_shift) {
     cae:	4644      	mov	r4, r8
     cb0:	464d      	mov	r5, r9
     cb2:	402c      	ands	r4, r5
     cb4:	46a4      	mov	ip, r4
     cb6:	4654      	mov	r4, sl
     cb8:	9d04      	ldr	r5, [sp, #16]
     cba:	402c      	ands	r4, r5
     cbc:	46a2      	mov	sl, r4
     cbe:	4664      	mov	r4, ip
     cc0:	4655      	mov	r5, sl
     cc2:	432c      	orrs	r4, r5
     cc4:	d003      	beq.n	cce <_sercom_get_async_baud_val+0x16a>
			r |= 0x01;
     cc6:	0034      	movs	r4, r6
     cc8:	4304      	orrs	r4, r0
     cca:	0022      	movs	r2, r4
     ccc:	000b      	movs	r3, r1
		if (r >= d) {
     cce:	9800      	ldr	r0, [sp, #0]
     cd0:	9901      	ldr	r1, [sp, #4]
     cd2:	4299      	cmp	r1, r3
     cd4:	d8db      	bhi.n	c8e <_sercom_get_async_baud_val+0x12a>
     cd6:	d1d2      	bne.n	c7e <_sercom_get_async_baud_val+0x11a>
     cd8:	4290      	cmp	r0, r2
     cda:	d8d8      	bhi.n	c8e <_sercom_get_async_baud_val+0x12a>
     cdc:	e7cf      	b.n	c7e <_sercom_get_async_baud_val+0x11a>
     cde:	9c00      	ldr	r4, [sp, #0]
     ce0:	9d01      	ldr	r5, [sp, #4]
			baud_int -= baud_fp;
     ce2:	9902      	ldr	r1, [sp, #8]
     ce4:	9a07      	ldr	r2, [sp, #28]
     ce6:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     ce8:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     cea:	4911      	ldr	r1, [pc, #68]	; (d30 <_sercom_get_async_baud_val+0x1cc>)
     cec:	428b      	cmp	r3, r1
     cee:	d914      	bls.n	d1a <_sercom_get_async_baud_val+0x1b6>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     cf0:	9b06      	ldr	r3, [sp, #24]
     cf2:	3301      	adds	r3, #1
     cf4:	b2db      	uxtb	r3, r3
     cf6:	0019      	movs	r1, r3
     cf8:	9306      	str	r3, [sp, #24]
     cfa:	0013      	movs	r3, r2
     cfc:	3301      	adds	r3, #1
     cfe:	9307      	str	r3, [sp, #28]
     d00:	2908      	cmp	r1, #8
     d02:	d008      	beq.n	d16 <_sercom_get_async_baud_val+0x1b2>
	uint64_t q = 0, r = 0, bit_shift;
     d04:	2300      	movs	r3, #0
     d06:	9302      	str	r3, [sp, #8]
     d08:	2200      	movs	r2, #0
     d0a:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     d0c:	213f      	movs	r1, #63	; 0x3f
     d0e:	9400      	str	r4, [sp, #0]
     d10:	9501      	str	r5, [sp, #4]
     d12:	000f      	movs	r7, r1
     d14:	e7bd      	b.n	c92 <_sercom_get_async_baud_val+0x12e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d16:	2240      	movs	r2, #64	; 0x40
     d18:	e734      	b.n	b84 <_sercom_get_async_baud_val+0x20>
     d1a:	2240      	movs	r2, #64	; 0x40
		if(baud_fp == BAUD_FP_MAX) {
     d1c:	9906      	ldr	r1, [sp, #24]
     d1e:	2908      	cmp	r1, #8
     d20:	d100      	bne.n	d24 <_sercom_get_async_baud_val+0x1c0>
     d22:	e72f      	b.n	b84 <_sercom_get_async_baud_val+0x20>
		baud_calculated = baud_int | (baud_fp << 13);
     d24:	034a      	lsls	r2, r1, #13
     d26:	431a      	orrs	r2, r3
     d28:	e788      	b.n	c3c <_sercom_get_async_baud_val+0xd8>
     d2a:	46c0      	nop			; (mov r8, r8)
     d2c:	00007c6d 	.word	0x00007c6d
     d30:	00001fff 	.word	0x00001fff

00000d34 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     d34:	b510      	push	{r4, lr}
     d36:	b082      	sub	sp, #8
     d38:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     d3a:	4b0e      	ldr	r3, [pc, #56]	; (d74 <sercom_set_gclk_generator+0x40>)
     d3c:	781b      	ldrb	r3, [r3, #0]
     d3e:	2b00      	cmp	r3, #0
     d40:	d007      	beq.n	d52 <sercom_set_gclk_generator+0x1e>
     d42:	2900      	cmp	r1, #0
     d44:	d105      	bne.n	d52 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     d46:	4b0b      	ldr	r3, [pc, #44]	; (d74 <sercom_set_gclk_generator+0x40>)
     d48:	785b      	ldrb	r3, [r3, #1]
     d4a:	4283      	cmp	r3, r0
     d4c:	d010      	beq.n	d70 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     d4e:	201d      	movs	r0, #29
     d50:	e00c      	b.n	d6c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     d52:	a901      	add	r1, sp, #4
     d54:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     d56:	2013      	movs	r0, #19
     d58:	4b07      	ldr	r3, [pc, #28]	; (d78 <sercom_set_gclk_generator+0x44>)
     d5a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     d5c:	2013      	movs	r0, #19
     d5e:	4b07      	ldr	r3, [pc, #28]	; (d7c <sercom_set_gclk_generator+0x48>)
     d60:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     d62:	4b04      	ldr	r3, [pc, #16]	; (d74 <sercom_set_gclk_generator+0x40>)
     d64:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     d66:	2201      	movs	r2, #1
     d68:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     d6a:	2000      	movs	r0, #0
}
     d6c:	b002      	add	sp, #8
     d6e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     d70:	2000      	movs	r0, #0
     d72:	e7fb      	b.n	d6c <sercom_set_gclk_generator+0x38>
     d74:	20000204 	.word	0x20000204
     d78:	00002161 	.word	0x00002161
     d7c:	000020d5 	.word	0x000020d5

00000d80 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     d80:	4b40      	ldr	r3, [pc, #256]	; (e84 <_sercom_get_default_pad+0x104>)
     d82:	4298      	cmp	r0, r3
     d84:	d031      	beq.n	dea <_sercom_get_default_pad+0x6a>
     d86:	d90a      	bls.n	d9e <_sercom_get_default_pad+0x1e>
     d88:	4b3f      	ldr	r3, [pc, #252]	; (e88 <_sercom_get_default_pad+0x108>)
     d8a:	4298      	cmp	r0, r3
     d8c:	d04d      	beq.n	e2a <_sercom_get_default_pad+0xaa>
     d8e:	4b3f      	ldr	r3, [pc, #252]	; (e8c <_sercom_get_default_pad+0x10c>)
     d90:	4298      	cmp	r0, r3
     d92:	d05a      	beq.n	e4a <_sercom_get_default_pad+0xca>
     d94:	4b3e      	ldr	r3, [pc, #248]	; (e90 <_sercom_get_default_pad+0x110>)
     d96:	4298      	cmp	r0, r3
     d98:	d037      	beq.n	e0a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     d9a:	2000      	movs	r0, #0
}
     d9c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     d9e:	4b3d      	ldr	r3, [pc, #244]	; (e94 <_sercom_get_default_pad+0x114>)
     da0:	4298      	cmp	r0, r3
     da2:	d00c      	beq.n	dbe <_sercom_get_default_pad+0x3e>
     da4:	4b3c      	ldr	r3, [pc, #240]	; (e98 <_sercom_get_default_pad+0x118>)
     da6:	4298      	cmp	r0, r3
     da8:	d1f7      	bne.n	d9a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     daa:	2901      	cmp	r1, #1
     dac:	d017      	beq.n	dde <_sercom_get_default_pad+0x5e>
     dae:	2900      	cmp	r1, #0
     db0:	d05d      	beq.n	e6e <_sercom_get_default_pad+0xee>
     db2:	2902      	cmp	r1, #2
     db4:	d015      	beq.n	de2 <_sercom_get_default_pad+0x62>
     db6:	2903      	cmp	r1, #3
     db8:	d015      	beq.n	de6 <_sercom_get_default_pad+0x66>
	return 0;
     dba:	2000      	movs	r0, #0
     dbc:	e7ee      	b.n	d9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dbe:	2901      	cmp	r1, #1
     dc0:	d007      	beq.n	dd2 <_sercom_get_default_pad+0x52>
     dc2:	2900      	cmp	r1, #0
     dc4:	d051      	beq.n	e6a <_sercom_get_default_pad+0xea>
     dc6:	2902      	cmp	r1, #2
     dc8:	d005      	beq.n	dd6 <_sercom_get_default_pad+0x56>
     dca:	2903      	cmp	r1, #3
     dcc:	d005      	beq.n	dda <_sercom_get_default_pad+0x5a>
	return 0;
     dce:	2000      	movs	r0, #0
     dd0:	e7e4      	b.n	d9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dd2:	4832      	ldr	r0, [pc, #200]	; (e9c <_sercom_get_default_pad+0x11c>)
     dd4:	e7e2      	b.n	d9c <_sercom_get_default_pad+0x1c>
     dd6:	4832      	ldr	r0, [pc, #200]	; (ea0 <_sercom_get_default_pad+0x120>)
     dd8:	e7e0      	b.n	d9c <_sercom_get_default_pad+0x1c>
     dda:	4832      	ldr	r0, [pc, #200]	; (ea4 <_sercom_get_default_pad+0x124>)
     ddc:	e7de      	b.n	d9c <_sercom_get_default_pad+0x1c>
     dde:	4832      	ldr	r0, [pc, #200]	; (ea8 <_sercom_get_default_pad+0x128>)
     de0:	e7dc      	b.n	d9c <_sercom_get_default_pad+0x1c>
     de2:	4832      	ldr	r0, [pc, #200]	; (eac <_sercom_get_default_pad+0x12c>)
     de4:	e7da      	b.n	d9c <_sercom_get_default_pad+0x1c>
     de6:	4832      	ldr	r0, [pc, #200]	; (eb0 <_sercom_get_default_pad+0x130>)
     de8:	e7d8      	b.n	d9c <_sercom_get_default_pad+0x1c>
     dea:	2901      	cmp	r1, #1
     dec:	d007      	beq.n	dfe <_sercom_get_default_pad+0x7e>
     dee:	2900      	cmp	r1, #0
     df0:	d03f      	beq.n	e72 <_sercom_get_default_pad+0xf2>
     df2:	2902      	cmp	r1, #2
     df4:	d005      	beq.n	e02 <_sercom_get_default_pad+0x82>
     df6:	2903      	cmp	r1, #3
     df8:	d005      	beq.n	e06 <_sercom_get_default_pad+0x86>
	return 0;
     dfa:	2000      	movs	r0, #0
     dfc:	e7ce      	b.n	d9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dfe:	482d      	ldr	r0, [pc, #180]	; (eb4 <_sercom_get_default_pad+0x134>)
     e00:	e7cc      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e02:	482d      	ldr	r0, [pc, #180]	; (eb8 <_sercom_get_default_pad+0x138>)
     e04:	e7ca      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e06:	482d      	ldr	r0, [pc, #180]	; (ebc <_sercom_get_default_pad+0x13c>)
     e08:	e7c8      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e0a:	2901      	cmp	r1, #1
     e0c:	d007      	beq.n	e1e <_sercom_get_default_pad+0x9e>
     e0e:	2900      	cmp	r1, #0
     e10:	d031      	beq.n	e76 <_sercom_get_default_pad+0xf6>
     e12:	2902      	cmp	r1, #2
     e14:	d005      	beq.n	e22 <_sercom_get_default_pad+0xa2>
     e16:	2903      	cmp	r1, #3
     e18:	d005      	beq.n	e26 <_sercom_get_default_pad+0xa6>
	return 0;
     e1a:	2000      	movs	r0, #0
     e1c:	e7be      	b.n	d9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e1e:	4828      	ldr	r0, [pc, #160]	; (ec0 <_sercom_get_default_pad+0x140>)
     e20:	e7bc      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e22:	4828      	ldr	r0, [pc, #160]	; (ec4 <_sercom_get_default_pad+0x144>)
     e24:	e7ba      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e26:	4828      	ldr	r0, [pc, #160]	; (ec8 <_sercom_get_default_pad+0x148>)
     e28:	e7b8      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e2a:	2901      	cmp	r1, #1
     e2c:	d007      	beq.n	e3e <_sercom_get_default_pad+0xbe>
     e2e:	2900      	cmp	r1, #0
     e30:	d023      	beq.n	e7a <_sercom_get_default_pad+0xfa>
     e32:	2902      	cmp	r1, #2
     e34:	d005      	beq.n	e42 <_sercom_get_default_pad+0xc2>
     e36:	2903      	cmp	r1, #3
     e38:	d005      	beq.n	e46 <_sercom_get_default_pad+0xc6>
	return 0;
     e3a:	2000      	movs	r0, #0
     e3c:	e7ae      	b.n	d9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e3e:	4823      	ldr	r0, [pc, #140]	; (ecc <_sercom_get_default_pad+0x14c>)
     e40:	e7ac      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e42:	4823      	ldr	r0, [pc, #140]	; (ed0 <_sercom_get_default_pad+0x150>)
     e44:	e7aa      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e46:	4823      	ldr	r0, [pc, #140]	; (ed4 <_sercom_get_default_pad+0x154>)
     e48:	e7a8      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e4a:	2901      	cmp	r1, #1
     e4c:	d007      	beq.n	e5e <_sercom_get_default_pad+0xde>
     e4e:	2900      	cmp	r1, #0
     e50:	d015      	beq.n	e7e <_sercom_get_default_pad+0xfe>
     e52:	2902      	cmp	r1, #2
     e54:	d005      	beq.n	e62 <_sercom_get_default_pad+0xe2>
     e56:	2903      	cmp	r1, #3
     e58:	d005      	beq.n	e66 <_sercom_get_default_pad+0xe6>
	return 0;
     e5a:	2000      	movs	r0, #0
     e5c:	e79e      	b.n	d9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e5e:	481e      	ldr	r0, [pc, #120]	; (ed8 <_sercom_get_default_pad+0x158>)
     e60:	e79c      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e62:	481e      	ldr	r0, [pc, #120]	; (edc <_sercom_get_default_pad+0x15c>)
     e64:	e79a      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e66:	481e      	ldr	r0, [pc, #120]	; (ee0 <_sercom_get_default_pad+0x160>)
     e68:	e798      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e6a:	481e      	ldr	r0, [pc, #120]	; (ee4 <_sercom_get_default_pad+0x164>)
     e6c:	e796      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e6e:	2003      	movs	r0, #3
     e70:	e794      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e72:	481d      	ldr	r0, [pc, #116]	; (ee8 <_sercom_get_default_pad+0x168>)
     e74:	e792      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e76:	481d      	ldr	r0, [pc, #116]	; (eec <_sercom_get_default_pad+0x16c>)
     e78:	e790      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e7a:	481d      	ldr	r0, [pc, #116]	; (ef0 <_sercom_get_default_pad+0x170>)
     e7c:	e78e      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e7e:	481d      	ldr	r0, [pc, #116]	; (ef4 <_sercom_get_default_pad+0x174>)
     e80:	e78c      	b.n	d9c <_sercom_get_default_pad+0x1c>
     e82:	46c0      	nop			; (mov r8, r8)
     e84:	42001000 	.word	0x42001000
     e88:	42001800 	.word	0x42001800
     e8c:	42001c00 	.word	0x42001c00
     e90:	42001400 	.word	0x42001400
     e94:	42000800 	.word	0x42000800
     e98:	42000c00 	.word	0x42000c00
     e9c:	00050003 	.word	0x00050003
     ea0:	00060003 	.word	0x00060003
     ea4:	00070003 	.word	0x00070003
     ea8:	00010003 	.word	0x00010003
     eac:	001e0003 	.word	0x001e0003
     eb0:	001f0003 	.word	0x001f0003
     eb4:	000d0002 	.word	0x000d0002
     eb8:	000e0002 	.word	0x000e0002
     ebc:	000f0002 	.word	0x000f0002
     ec0:	00110003 	.word	0x00110003
     ec4:	00120003 	.word	0x00120003
     ec8:	00130003 	.word	0x00130003
     ecc:	003f0005 	.word	0x003f0005
     ed0:	003e0005 	.word	0x003e0005
     ed4:	00520005 	.word	0x00520005
     ed8:	00170003 	.word	0x00170003
     edc:	00180003 	.word	0x00180003
     ee0:	00190003 	.word	0x00190003
     ee4:	00040003 	.word	0x00040003
     ee8:	000c0002 	.word	0x000c0002
     eec:	00100003 	.word	0x00100003
     ef0:	00530005 	.word	0x00530005
     ef4:	00160003 	.word	0x00160003

00000ef8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     ef8:	b530      	push	{r4, r5, lr}
     efa:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     efc:	4b0b      	ldr	r3, [pc, #44]	; (f2c <_sercom_get_sercom_inst_index+0x34>)
     efe:	466a      	mov	r2, sp
     f00:	cb32      	ldmia	r3!, {r1, r4, r5}
     f02:	c232      	stmia	r2!, {r1, r4, r5}
     f04:	cb32      	ldmia	r3!, {r1, r4, r5}
     f06:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     f08:	9b00      	ldr	r3, [sp, #0]
     f0a:	4283      	cmp	r3, r0
     f0c:	d00b      	beq.n	f26 <_sercom_get_sercom_inst_index+0x2e>
     f0e:	2301      	movs	r3, #1
     f10:	009a      	lsls	r2, r3, #2
     f12:	4669      	mov	r1, sp
     f14:	5852      	ldr	r2, [r2, r1]
     f16:	4282      	cmp	r2, r0
     f18:	d006      	beq.n	f28 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f1a:	3301      	adds	r3, #1
     f1c:	2b06      	cmp	r3, #6
     f1e:	d1f7      	bne.n	f10 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     f20:	2000      	movs	r0, #0
}
     f22:	b007      	add	sp, #28
     f24:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f26:	2300      	movs	r3, #0
			return i;
     f28:	b2d8      	uxtb	r0, r3
     f2a:	e7fa      	b.n	f22 <_sercom_get_sercom_inst_index+0x2a>
     f2c:	0000a444 	.word	0x0000a444

00000f30 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     f30:	4770      	bx	lr
	...

00000f34 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     f34:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     f36:	4b0a      	ldr	r3, [pc, #40]	; (f60 <_sercom_set_handler+0x2c>)
     f38:	781b      	ldrb	r3, [r3, #0]
     f3a:	2b00      	cmp	r3, #0
     f3c:	d10c      	bne.n	f58 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     f3e:	4f09      	ldr	r7, [pc, #36]	; (f64 <_sercom_set_handler+0x30>)
     f40:	4e09      	ldr	r6, [pc, #36]	; (f68 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     f42:	4d0a      	ldr	r5, [pc, #40]	; (f6c <_sercom_set_handler+0x38>)
     f44:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     f46:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     f48:	195a      	adds	r2, r3, r5
     f4a:	6014      	str	r4, [r2, #0]
     f4c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f4e:	2b18      	cmp	r3, #24
     f50:	d1f9      	bne.n	f46 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     f52:	2201      	movs	r2, #1
     f54:	4b02      	ldr	r3, [pc, #8]	; (f60 <_sercom_set_handler+0x2c>)
     f56:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     f58:	0080      	lsls	r0, r0, #2
     f5a:	4b02      	ldr	r3, [pc, #8]	; (f64 <_sercom_set_handler+0x30>)
     f5c:	50c1      	str	r1, [r0, r3]
}
     f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f60:	20000206 	.word	0x20000206
     f64:	20000208 	.word	0x20000208
     f68:	00000f31 	.word	0x00000f31
     f6c:	200015fc 	.word	0x200015fc

00000f70 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     f70:	b500      	push	{lr}
     f72:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     f74:	2309      	movs	r3, #9
     f76:	466a      	mov	r2, sp
     f78:	7013      	strb	r3, [r2, #0]
     f7a:	3301      	adds	r3, #1
     f7c:	7053      	strb	r3, [r2, #1]
     f7e:	3301      	adds	r3, #1
     f80:	7093      	strb	r3, [r2, #2]
     f82:	3301      	adds	r3, #1
     f84:	70d3      	strb	r3, [r2, #3]
     f86:	3301      	adds	r3, #1
     f88:	7113      	strb	r3, [r2, #4]
     f8a:	3301      	adds	r3, #1
     f8c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     f8e:	4b03      	ldr	r3, [pc, #12]	; (f9c <_sercom_get_interrupt_vector+0x2c>)
     f90:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     f92:	466b      	mov	r3, sp
     f94:	5618      	ldrsb	r0, [r3, r0]
}
     f96:	b003      	add	sp, #12
     f98:	bd00      	pop	{pc}
     f9a:	46c0      	nop			; (mov r8, r8)
     f9c:	00000ef9 	.word	0x00000ef9

00000fa0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     fa0:	b510      	push	{r4, lr}
     fa2:	4b02      	ldr	r3, [pc, #8]	; (fac <SERCOM0_Handler+0xc>)
     fa4:	681b      	ldr	r3, [r3, #0]
     fa6:	2000      	movs	r0, #0
     fa8:	4798      	blx	r3
     faa:	bd10      	pop	{r4, pc}
     fac:	20000208 	.word	0x20000208

00000fb0 <SERCOM1_Handler>:
     fb0:	b510      	push	{r4, lr}
     fb2:	4b02      	ldr	r3, [pc, #8]	; (fbc <SERCOM1_Handler+0xc>)
     fb4:	685b      	ldr	r3, [r3, #4]
     fb6:	2001      	movs	r0, #1
     fb8:	4798      	blx	r3
     fba:	bd10      	pop	{r4, pc}
     fbc:	20000208 	.word	0x20000208

00000fc0 <SERCOM2_Handler>:
     fc0:	b510      	push	{r4, lr}
     fc2:	4b02      	ldr	r3, [pc, #8]	; (fcc <SERCOM2_Handler+0xc>)
     fc4:	689b      	ldr	r3, [r3, #8]
     fc6:	2002      	movs	r0, #2
     fc8:	4798      	blx	r3
     fca:	bd10      	pop	{r4, pc}
     fcc:	20000208 	.word	0x20000208

00000fd0 <SERCOM3_Handler>:
     fd0:	b510      	push	{r4, lr}
     fd2:	4b02      	ldr	r3, [pc, #8]	; (fdc <SERCOM3_Handler+0xc>)
     fd4:	68db      	ldr	r3, [r3, #12]
     fd6:	2003      	movs	r0, #3
     fd8:	4798      	blx	r3
     fda:	bd10      	pop	{r4, pc}
     fdc:	20000208 	.word	0x20000208

00000fe0 <SERCOM4_Handler>:
     fe0:	b510      	push	{r4, lr}
     fe2:	4b02      	ldr	r3, [pc, #8]	; (fec <SERCOM4_Handler+0xc>)
     fe4:	691b      	ldr	r3, [r3, #16]
     fe6:	2004      	movs	r0, #4
     fe8:	4798      	blx	r3
     fea:	bd10      	pop	{r4, pc}
     fec:	20000208 	.word	0x20000208

00000ff0 <SERCOM5_Handler>:
     ff0:	b510      	push	{r4, lr}
     ff2:	4b02      	ldr	r3, [pc, #8]	; (ffc <SERCOM5_Handler+0xc>)
     ff4:	695b      	ldr	r3, [r3, #20]
     ff6:	2005      	movs	r0, #5
     ff8:	4798      	blx	r3
     ffa:	bd10      	pop	{r4, pc}
     ffc:	20000208 	.word	0x20000208

00001000 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1000:	b5f0      	push	{r4, r5, r6, r7, lr}
    1002:	46d6      	mov	lr, sl
    1004:	464f      	mov	r7, r9
    1006:	b580      	push	{r7, lr}
    1008:	b08b      	sub	sp, #44	; 0x2c
    100a:	4681      	mov	r9, r0
    100c:	000f      	movs	r7, r1
    100e:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1010:	0003      	movs	r3, r0
    1012:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1014:	680b      	ldr	r3, [r1, #0]
    1016:	079b      	lsls	r3, r3, #30
    1018:	d409      	bmi.n	102e <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    101a:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    101c:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    101e:	07db      	lsls	r3, r3, #31
    1020:	d400      	bmi.n	1024 <spi_init+0x24>
    1022:	e098      	b.n	1156 <spi_init+0x156>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1024:	b00b      	add	sp, #44	; 0x2c
    1026:	bc0c      	pop	{r2, r3}
    1028:	4691      	mov	r9, r2
    102a:	469a      	mov	sl, r3
    102c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    102e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1030:	9305      	str	r3, [sp, #20]
    1032:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1034:	9306      	str	r3, [sp, #24]
    1036:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1038:	9307      	str	r3, [sp, #28]
    103a:	6b53      	ldr	r3, [r2, #52]	; 0x34
    103c:	9308      	str	r3, [sp, #32]
    103e:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1040:	ab05      	add	r3, sp, #20
    1042:	9301      	str	r3, [sp, #4]
    1044:	e00a      	b.n	105c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1046:	0038      	movs	r0, r7
    1048:	4b93      	ldr	r3, [pc, #588]	; (1298 <spi_init+0x298>)
    104a:	4798      	blx	r3
    104c:	e00c      	b.n	1068 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    104e:	230f      	movs	r3, #15
    1050:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    1052:	4281      	cmp	r1, r0
    1054:	d12d      	bne.n	10b2 <spi_init+0xb2>
    1056:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1058:	2e04      	cmp	r6, #4
    105a:	d02f      	beq.n	10bc <spi_init+0xbc>
    105c:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    105e:	00b3      	lsls	r3, r6, #2
    1060:	9a01      	ldr	r2, [sp, #4]
    1062:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    1064:	2800      	cmp	r0, #0
    1066:	d0ee      	beq.n	1046 <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    1068:	1c43      	adds	r3, r0, #1
    106a:	d0f4      	beq.n	1056 <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    106c:	0401      	lsls	r1, r0, #16
    106e:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    1070:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    1072:	b2c3      	uxtb	r3, r0
    1074:	469c      	mov	ip, r3
		return NULL;
    1076:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1078:	0602      	lsls	r2, r0, #24
    107a:	d405      	bmi.n	1088 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    107c:	4663      	mov	r3, ip
    107e:	095b      	lsrs	r3, r3, #5
    1080:	01db      	lsls	r3, r3, #7
    1082:	4a86      	ldr	r2, [pc, #536]	; (129c <spi_init+0x29c>)
    1084:	4692      	mov	sl, r2
    1086:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    1088:	221f      	movs	r2, #31
    108a:	4660      	mov	r0, ip
    108c:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    108e:	1898      	adds	r0, r3, r2
    1090:	3040      	adds	r0, #64	; 0x40
    1092:	7800      	ldrb	r0, [r0, #0]
    1094:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    1096:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1098:	4655      	mov	r5, sl
    109a:	07ed      	lsls	r5, r5, #31
    109c:	d5d9      	bpl.n	1052 <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    109e:	0852      	lsrs	r2, r2, #1
    10a0:	189b      	adds	r3, r3, r2
    10a2:	3330      	adds	r3, #48	; 0x30
    10a4:	7818      	ldrb	r0, [r3, #0]
    10a6:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    10a8:	4663      	mov	r3, ip
    10aa:	07db      	lsls	r3, r3, #31
    10ac:	d5cf      	bpl.n	104e <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    10ae:	0900      	lsrs	r0, r0, #4
    10b0:	e7cf      	b.n	1052 <spi_init+0x52>
			module->hw = NULL;
    10b2:	2300      	movs	r3, #0
    10b4:	464a      	mov	r2, r9
    10b6:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    10b8:	201c      	movs	r0, #28
    10ba:	e7b3      	b.n	1024 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    10bc:	2013      	movs	r0, #19
    10be:	4b78      	ldr	r3, [pc, #480]	; (12a0 <spi_init+0x2a0>)
    10c0:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    10c2:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    10c4:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    10c6:	2a01      	cmp	r2, #1
    10c8:	d027      	beq.n	111a <spi_init+0x11a>
	ctrla |= config->mux_setting;
    10ca:	6863      	ldr	r3, [r4, #4]
    10cc:	68a2      	ldr	r2, [r4, #8]
    10ce:	4313      	orrs	r3, r2
    10d0:	68e2      	ldr	r2, [r4, #12]
    10d2:	4313      	orrs	r3, r2
    10d4:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    10d6:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    10d8:	7c61      	ldrb	r1, [r4, #17]
    10da:	2900      	cmp	r1, #0
    10dc:	d001      	beq.n	10e2 <spi_init+0xe2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    10de:	2180      	movs	r1, #128	; 0x80
    10e0:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    10e2:	7ca1      	ldrb	r1, [r4, #18]
    10e4:	2900      	cmp	r1, #0
    10e6:	d002      	beq.n	10ee <spi_init+0xee>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    10e8:	2180      	movs	r1, #128	; 0x80
    10ea:	0289      	lsls	r1, r1, #10
    10ec:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    10ee:	7ce1      	ldrb	r1, [r4, #19]
    10f0:	2900      	cmp	r1, #0
    10f2:	d002      	beq.n	10fa <spi_init+0xfa>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    10f4:	2180      	movs	r1, #128	; 0x80
    10f6:	0089      	lsls	r1, r1, #2
    10f8:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    10fa:	7d21      	ldrb	r1, [r4, #20]
    10fc:	2900      	cmp	r1, #0
    10fe:	d002      	beq.n	1106 <spi_init+0x106>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1100:	2180      	movs	r1, #128	; 0x80
    1102:	0189      	lsls	r1, r1, #6
    1104:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    1106:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    1108:	2002      	movs	r0, #2
    110a:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    110c:	428b      	cmp	r3, r1
    110e:	d018      	beq.n	1142 <spi_init+0x142>
	module->hw = NULL;
    1110:	2300      	movs	r3, #0
    1112:	464a      	mov	r2, r9
    1114:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    1116:	201c      	movs	r0, #28
    1118:	e784      	b.n	1024 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    111a:	aa04      	add	r2, sp, #16
    111c:	0001      	movs	r1, r0
    111e:	69a0      	ldr	r0, [r4, #24]
    1120:	4b60      	ldr	r3, [pc, #384]	; (12a4 <spi_init+0x2a4>)
    1122:	4798      	blx	r3
    1124:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    1126:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    1128:	2b00      	cmp	r3, #0
    112a:	d000      	beq.n	112e <spi_init+0x12e>
    112c:	e77a      	b.n	1024 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    112e:	7b3b      	ldrb	r3, [r7, #12]
    1130:	b2db      	uxtb	r3, r3
    1132:	aa04      	add	r2, sp, #16
    1134:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    1136:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    1138:	429a      	cmp	r2, r3
    113a:	d000      	beq.n	113e <spi_init+0x13e>
    113c:	e772      	b.n	1024 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    113e:	350c      	adds	r5, #12
    1140:	e7c3      	b.n	10ca <spi_init+0xca>
			spi_module->CTRLB.reg == ctrlb) {
    1142:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    1144:	4293      	cmp	r3, r2
    1146:	d1e3      	bne.n	1110 <spi_init+0x110>
		module->mode           = config->mode;
    1148:	7823      	ldrb	r3, [r4, #0]
    114a:	464a      	mov	r2, r9
    114c:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
    114e:	7c23      	ldrb	r3, [r4, #16]
    1150:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    1152:	2000      	movs	r0, #0
    1154:	e766      	b.n	1024 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1156:	0008      	movs	r0, r1
    1158:	4b53      	ldr	r3, [pc, #332]	; (12a8 <spi_init+0x2a8>)
    115a:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    115c:	4a53      	ldr	r2, [pc, #332]	; (12ac <spi_init+0x2ac>)
    115e:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1160:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1162:	2301      	movs	r3, #1
    1164:	40ab      	lsls	r3, r5
    1166:	430b      	orrs	r3, r1
    1168:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    116a:	a909      	add	r1, sp, #36	; 0x24
    116c:	2624      	movs	r6, #36	; 0x24
    116e:	5da3      	ldrb	r3, [r4, r6]
    1170:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1172:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1174:	b2c5      	uxtb	r5, r0
    1176:	0028      	movs	r0, r5
    1178:	4b4d      	ldr	r3, [pc, #308]	; (12b0 <spi_init+0x2b0>)
    117a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    117c:	0028      	movs	r0, r5
    117e:	4b4d      	ldr	r3, [pc, #308]	; (12b4 <spi_init+0x2b4>)
    1180:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1182:	5da0      	ldrb	r0, [r4, r6]
    1184:	2100      	movs	r1, #0
    1186:	4b4c      	ldr	r3, [pc, #304]	; (12b8 <spi_init+0x2b8>)
    1188:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    118a:	7823      	ldrb	r3, [r4, #0]
    118c:	2b01      	cmp	r3, #1
    118e:	d019      	beq.n	11c4 <spi_init+0x1c4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1190:	464b      	mov	r3, r9
    1192:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1194:	ab04      	add	r3, sp, #16
    1196:	2280      	movs	r2, #128	; 0x80
    1198:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    119a:	2200      	movs	r2, #0
    119c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    119e:	2101      	movs	r1, #1
    11a0:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    11a2:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    11a4:	7823      	ldrb	r3, [r4, #0]
    11a6:	2b00      	cmp	r3, #0
    11a8:	d101      	bne.n	11ae <spi_init+0x1ae>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    11aa:	ab04      	add	r3, sp, #16
    11ac:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    11ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    11b0:	9305      	str	r3, [sp, #20]
    11b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    11b4:	9306      	str	r3, [sp, #24]
    11b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    11b8:	9307      	str	r3, [sp, #28]
    11ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
    11bc:	9308      	str	r3, [sp, #32]
    11be:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    11c0:	ad05      	add	r5, sp, #20
    11c2:	e011      	b.n	11e8 <spi_init+0x1e8>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    11c4:	683b      	ldr	r3, [r7, #0]
    11c6:	220c      	movs	r2, #12
    11c8:	4313      	orrs	r3, r2
    11ca:	603b      	str	r3, [r7, #0]
    11cc:	e7e0      	b.n	1190 <spi_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    11ce:	0030      	movs	r0, r6
    11d0:	4b31      	ldr	r3, [pc, #196]	; (1298 <spi_init+0x298>)
    11d2:	4798      	blx	r3
    11d4:	e00d      	b.n	11f2 <spi_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    11d6:	a904      	add	r1, sp, #16
    11d8:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    11da:	0c00      	lsrs	r0, r0, #16
    11dc:	b2c0      	uxtb	r0, r0
    11de:	4b37      	ldr	r3, [pc, #220]	; (12bc <spi_init+0x2bc>)
    11e0:	4798      	blx	r3
    11e2:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    11e4:	2f04      	cmp	r7, #4
    11e6:	d007      	beq.n	11f8 <spi_init+0x1f8>
    11e8:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    11ea:	00bb      	lsls	r3, r7, #2
    11ec:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    11ee:	2800      	cmp	r0, #0
    11f0:	d0ed      	beq.n	11ce <spi_init+0x1ce>
		if (current_pinmux != PINMUX_UNUSED) {
    11f2:	1c43      	adds	r3, r0, #1
    11f4:	d1ef      	bne.n	11d6 <spi_init+0x1d6>
    11f6:	e7f4      	b.n	11e2 <spi_init+0x1e2>
	module->mode             = config->mode;
    11f8:	7823      	ldrb	r3, [r4, #0]
    11fa:	464a      	mov	r2, r9
    11fc:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    11fe:	7c23      	ldrb	r3, [r4, #16]
    1200:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    1202:	7ca3      	ldrb	r3, [r4, #18]
    1204:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    1206:	7d23      	ldrb	r3, [r4, #20]
    1208:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    120a:	2200      	movs	r2, #0
    120c:	ab02      	add	r3, sp, #8
    120e:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1210:	7823      	ldrb	r3, [r4, #0]
    1212:	2b01      	cmp	r3, #1
    1214:	d028      	beq.n	1268 <spi_init+0x268>
	ctrla |= config->transfer_mode;
    1216:	6863      	ldr	r3, [r4, #4]
    1218:	68a2      	ldr	r2, [r4, #8]
    121a:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    121c:	68e2      	ldr	r2, [r4, #12]
    121e:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    1220:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    1222:	7c62      	ldrb	r2, [r4, #17]
    1224:	2a00      	cmp	r2, #0
    1226:	d103      	bne.n	1230 <spi_init+0x230>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1228:	4a25      	ldr	r2, [pc, #148]	; (12c0 <spi_init+0x2c0>)
    122a:	7892      	ldrb	r2, [r2, #2]
    122c:	0792      	lsls	r2, r2, #30
    122e:	d501      	bpl.n	1234 <spi_init+0x234>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1230:	2280      	movs	r2, #128	; 0x80
    1232:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    1234:	7ca2      	ldrb	r2, [r4, #18]
    1236:	2a00      	cmp	r2, #0
    1238:	d002      	beq.n	1240 <spi_init+0x240>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    123a:	2280      	movs	r2, #128	; 0x80
    123c:	0292      	lsls	r2, r2, #10
    123e:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    1240:	7ce2      	ldrb	r2, [r4, #19]
    1242:	2a00      	cmp	r2, #0
    1244:	d002      	beq.n	124c <spi_init+0x24c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1246:	2280      	movs	r2, #128	; 0x80
    1248:	0092      	lsls	r2, r2, #2
    124a:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    124c:	7d22      	ldrb	r2, [r4, #20]
    124e:	2a00      	cmp	r2, #0
    1250:	d002      	beq.n	1258 <spi_init+0x258>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1252:	2280      	movs	r2, #128	; 0x80
    1254:	0192      	lsls	r2, r2, #6
    1256:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    1258:	6832      	ldr	r2, [r6, #0]
    125a:	4313      	orrs	r3, r2
    125c:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    125e:	6873      	ldr	r3, [r6, #4]
    1260:	430b      	orrs	r3, r1
    1262:	6073      	str	r3, [r6, #4]
	return STATUS_OK;
    1264:	2000      	movs	r0, #0
    1266:	e6dd      	b.n	1024 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1268:	464b      	mov	r3, r9
    126a:	6818      	ldr	r0, [r3, #0]
    126c:	4b0e      	ldr	r3, [pc, #56]	; (12a8 <spi_init+0x2a8>)
    126e:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1270:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1272:	b2c0      	uxtb	r0, r0
    1274:	4b0a      	ldr	r3, [pc, #40]	; (12a0 <spi_init+0x2a0>)
    1276:	4798      	blx	r3
    1278:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    127a:	ab02      	add	r3, sp, #8
    127c:	1d9a      	adds	r2, r3, #6
    127e:	69a0      	ldr	r0, [r4, #24]
    1280:	4b08      	ldr	r3, [pc, #32]	; (12a4 <spi_init+0x2a4>)
    1282:	4798      	blx	r3
    1284:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    1286:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    1288:	2b00      	cmp	r3, #0
    128a:	d000      	beq.n	128e <spi_init+0x28e>
    128c:	e6ca      	b.n	1024 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    128e:	ab02      	add	r3, sp, #8
    1290:	3306      	adds	r3, #6
    1292:	781b      	ldrb	r3, [r3, #0]
    1294:	7333      	strb	r3, [r6, #12]
    1296:	e7be      	b.n	1216 <spi_init+0x216>
    1298:	00000d81 	.word	0x00000d81
    129c:	41004400 	.word	0x41004400
    12a0:	0000217d 	.word	0x0000217d
    12a4:	00000b3d 	.word	0x00000b3d
    12a8:	00000ef9 	.word	0x00000ef9
    12ac:	40000400 	.word	0x40000400
    12b0:	00002161 	.word	0x00002161
    12b4:	000020d5 	.word	0x000020d5
    12b8:	00000d35 	.word	0x00000d35
    12bc:	00002259 	.word	0x00002259
    12c0:	41002000 	.word	0x41002000

000012c4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    12c4:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    12c6:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    12c8:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    12ca:	2c01      	cmp	r4, #1
    12cc:	d001      	beq.n	12d2 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    12ce:	0018      	movs	r0, r3
    12d0:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    12d2:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    12d4:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    12d6:	2c00      	cmp	r4, #0
    12d8:	d1f9      	bne.n	12ce <spi_select_slave+0xa>
		if (select) {
    12da:	2a00      	cmp	r2, #0
    12dc:	d058      	beq.n	1390 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    12de:	784b      	ldrb	r3, [r1, #1]
    12e0:	2b00      	cmp	r3, #0
    12e2:	d044      	beq.n	136e <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    12e4:	6803      	ldr	r3, [r0, #0]
    12e6:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    12e8:	07db      	lsls	r3, r3, #31
    12ea:	d410      	bmi.n	130e <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    12ec:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    12ee:	09d1      	lsrs	r1, r2, #7
		return NULL;
    12f0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    12f2:	2900      	cmp	r1, #0
    12f4:	d104      	bne.n	1300 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    12f6:	0953      	lsrs	r3, r2, #5
    12f8:	01db      	lsls	r3, r3, #7
    12fa:	492e      	ldr	r1, [pc, #184]	; (13b4 <spi_select_slave+0xf0>)
    12fc:	468c      	mov	ip, r1
    12fe:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1300:	211f      	movs	r1, #31
    1302:	4011      	ands	r1, r2
    1304:	2201      	movs	r2, #1
    1306:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1308:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    130a:	2305      	movs	r3, #5
    130c:	e7df      	b.n	12ce <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    130e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1310:	09d4      	lsrs	r4, r2, #7
		return NULL;
    1312:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1314:	2c00      	cmp	r4, #0
    1316:	d104      	bne.n	1322 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    1318:	0953      	lsrs	r3, r2, #5
    131a:	01db      	lsls	r3, r3, #7
    131c:	4c25      	ldr	r4, [pc, #148]	; (13b4 <spi_select_slave+0xf0>)
    131e:	46a4      	mov	ip, r4
    1320:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1322:	241f      	movs	r4, #31
    1324:	4014      	ands	r4, r2
    1326:	2201      	movs	r2, #1
    1328:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    132a:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    132c:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    132e:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1330:	07d2      	lsls	r2, r2, #31
    1332:	d501      	bpl.n	1338 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1334:	788a      	ldrb	r2, [r1, #2]
    1336:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    1338:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    133a:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    133c:	2a00      	cmp	r2, #0
    133e:	d1c6      	bne.n	12ce <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1340:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    1342:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1344:	7e13      	ldrb	r3, [r2, #24]
    1346:	420b      	tst	r3, r1
    1348:	d0fc      	beq.n	1344 <spi_select_slave+0x80>
    134a:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    134c:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    134e:	0749      	lsls	r1, r1, #29
    1350:	d5bd      	bpl.n	12ce <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1352:	8b53      	ldrh	r3, [r2, #26]
    1354:	075b      	lsls	r3, r3, #29
    1356:	d501      	bpl.n	135c <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1358:	2304      	movs	r3, #4
    135a:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    135c:	7983      	ldrb	r3, [r0, #6]
    135e:	2b01      	cmp	r3, #1
    1360:	d002      	beq.n	1368 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1362:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1364:	2300      	movs	r3, #0
    1366:	e7b2      	b.n	12ce <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1368:	6a93      	ldr	r3, [r2, #40]	; 0x28
    136a:	2300      	movs	r3, #0
    136c:	e7af      	b.n	12ce <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    136e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1370:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1372:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1374:	2900      	cmp	r1, #0
    1376:	d104      	bne.n	1382 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    1378:	0953      	lsrs	r3, r2, #5
    137a:	01db      	lsls	r3, r3, #7
    137c:	490d      	ldr	r1, [pc, #52]	; (13b4 <spi_select_slave+0xf0>)
    137e:	468c      	mov	ip, r1
    1380:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1382:	211f      	movs	r1, #31
    1384:	4011      	ands	r1, r2
    1386:	2201      	movs	r2, #1
    1388:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    138a:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    138c:	2300      	movs	r3, #0
    138e:	e79e      	b.n	12ce <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    1390:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1392:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1394:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1396:	2900      	cmp	r1, #0
    1398:	d104      	bne.n	13a4 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    139a:	0953      	lsrs	r3, r2, #5
    139c:	01db      	lsls	r3, r3, #7
    139e:	4905      	ldr	r1, [pc, #20]	; (13b4 <spi_select_slave+0xf0>)
    13a0:	468c      	mov	ip, r1
    13a2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    13a4:	211f      	movs	r1, #31
    13a6:	4011      	ands	r1, r2
    13a8:	2201      	movs	r2, #1
    13aa:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    13ac:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    13ae:	2300      	movs	r3, #0
    13b0:	e78d      	b.n	12ce <spi_select_slave+0xa>
    13b2:	46c0      	nop			; (mov r8, r8)
    13b4:	41004400 	.word	0x41004400

000013b8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    13b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13ba:	46de      	mov	lr, fp
    13bc:	4657      	mov	r7, sl
    13be:	464e      	mov	r6, r9
    13c0:	4645      	mov	r5, r8
    13c2:	b5e0      	push	{r5, r6, r7, lr}
    13c4:	b091      	sub	sp, #68	; 0x44
    13c6:	0005      	movs	r5, r0
    13c8:	000c      	movs	r4, r1
    13ca:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    13cc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    13ce:	0008      	movs	r0, r1
    13d0:	4bbb      	ldr	r3, [pc, #748]	; (16c0 <usart_init+0x308>)
    13d2:	4798      	blx	r3
    13d4:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    13d6:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    13d8:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    13da:	07db      	lsls	r3, r3, #31
    13dc:	d506      	bpl.n	13ec <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    13de:	b011      	add	sp, #68	; 0x44
    13e0:	bc3c      	pop	{r2, r3, r4, r5}
    13e2:	4690      	mov	r8, r2
    13e4:	4699      	mov	r9, r3
    13e6:	46a2      	mov	sl, r4
    13e8:	46ab      	mov	fp, r5
    13ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    13ec:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    13ee:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    13f0:	079b      	lsls	r3, r3, #30
    13f2:	d4f4      	bmi.n	13de <usart_init+0x26>
    13f4:	49b3      	ldr	r1, [pc, #716]	; (16c4 <usart_init+0x30c>)
    13f6:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    13f8:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    13fa:	2301      	movs	r3, #1
    13fc:	40bb      	lsls	r3, r7
    13fe:	4303      	orrs	r3, r0
    1400:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1402:	a90f      	add	r1, sp, #60	; 0x3c
    1404:	272d      	movs	r7, #45	; 0x2d
    1406:	5df3      	ldrb	r3, [r6, r7]
    1408:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    140a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    140c:	b2d3      	uxtb	r3, r2
    140e:	9302      	str	r3, [sp, #8]
    1410:	0018      	movs	r0, r3
    1412:	4bad      	ldr	r3, [pc, #692]	; (16c8 <usart_init+0x310>)
    1414:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1416:	9802      	ldr	r0, [sp, #8]
    1418:	4bac      	ldr	r3, [pc, #688]	; (16cc <usart_init+0x314>)
    141a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    141c:	5df0      	ldrb	r0, [r6, r7]
    141e:	2100      	movs	r1, #0
    1420:	4bab      	ldr	r3, [pc, #684]	; (16d0 <usart_init+0x318>)
    1422:	4798      	blx	r3
	module->character_size = config->character_size;
    1424:	7af3      	ldrb	r3, [r6, #11]
    1426:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1428:	2324      	movs	r3, #36	; 0x24
    142a:	5cf3      	ldrb	r3, [r6, r3]
    142c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    142e:	2325      	movs	r3, #37	; 0x25
    1430:	5cf3      	ldrb	r3, [r6, r3]
    1432:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1434:	7ef3      	ldrb	r3, [r6, #27]
    1436:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1438:	7f33      	ldrb	r3, [r6, #28]
    143a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    143c:	682b      	ldr	r3, [r5, #0]
    143e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1440:	0018      	movs	r0, r3
    1442:	4b9f      	ldr	r3, [pc, #636]	; (16c0 <usart_init+0x308>)
    1444:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1446:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1448:	2200      	movs	r2, #0
    144a:	230e      	movs	r3, #14
    144c:	a906      	add	r1, sp, #24
    144e:	468c      	mov	ip, r1
    1450:	4463      	add	r3, ip
    1452:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1454:	8a32      	ldrh	r2, [r6, #16]
    1456:	9202      	str	r2, [sp, #8]
    1458:	2380      	movs	r3, #128	; 0x80
    145a:	01db      	lsls	r3, r3, #7
    145c:	429a      	cmp	r2, r3
    145e:	d100      	bne.n	1462 <usart_init+0xaa>
    1460:	e09c      	b.n	159c <usart_init+0x1e4>
    1462:	d90f      	bls.n	1484 <usart_init+0xcc>
    1464:	23c0      	movs	r3, #192	; 0xc0
    1466:	01db      	lsls	r3, r3, #7
    1468:	9a02      	ldr	r2, [sp, #8]
    146a:	429a      	cmp	r2, r3
    146c:	d100      	bne.n	1470 <usart_init+0xb8>
    146e:	e090      	b.n	1592 <usart_init+0x1da>
    1470:	2380      	movs	r3, #128	; 0x80
    1472:	021b      	lsls	r3, r3, #8
    1474:	429a      	cmp	r2, r3
    1476:	d000      	beq.n	147a <usart_init+0xc2>
    1478:	e11d      	b.n	16b6 <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    147a:	2303      	movs	r3, #3
    147c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    147e:	2300      	movs	r3, #0
    1480:	9307      	str	r3, [sp, #28]
    1482:	e008      	b.n	1496 <usart_init+0xde>
	switch (config->sample_rate) {
    1484:	2380      	movs	r3, #128	; 0x80
    1486:	019b      	lsls	r3, r3, #6
    1488:	429a      	cmp	r2, r3
    148a:	d000      	beq.n	148e <usart_init+0xd6>
    148c:	e113      	b.n	16b6 <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    148e:	2310      	movs	r3, #16
    1490:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1492:	3b0f      	subs	r3, #15
    1494:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1496:	6833      	ldr	r3, [r6, #0]
    1498:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    149a:	68f3      	ldr	r3, [r6, #12]
    149c:	469b      	mov	fp, r3
		config->sample_adjustment |
    149e:	6973      	ldr	r3, [r6, #20]
    14a0:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    14a2:	7e33      	ldrb	r3, [r6, #24]
    14a4:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    14a6:	2326      	movs	r3, #38	; 0x26
    14a8:	5cf3      	ldrb	r3, [r6, r3]
    14aa:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    14ac:	6873      	ldr	r3, [r6, #4]
    14ae:	4699      	mov	r9, r3
	switch (transfer_mode)
    14b0:	2b00      	cmp	r3, #0
    14b2:	d100      	bne.n	14b6 <usart_init+0xfe>
    14b4:	e09e      	b.n	15f4 <usart_init+0x23c>
    14b6:	2380      	movs	r3, #128	; 0x80
    14b8:	055b      	lsls	r3, r3, #21
    14ba:	4599      	cmp	r9, r3
    14bc:	d100      	bne.n	14c0 <usart_init+0x108>
    14be:	e082      	b.n	15c6 <usart_init+0x20e>
	if(config->encoding_format_enable) {
    14c0:	7e73      	ldrb	r3, [r6, #25]
    14c2:	2b00      	cmp	r3, #0
    14c4:	d002      	beq.n	14cc <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    14c6:	7eb3      	ldrb	r3, [r6, #26]
    14c8:	4642      	mov	r2, r8
    14ca:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    14cc:	682a      	ldr	r2, [r5, #0]
    14ce:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    14d0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    14d2:	2b00      	cmp	r3, #0
    14d4:	d1fc      	bne.n	14d0 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    14d6:	330e      	adds	r3, #14
    14d8:	aa06      	add	r2, sp, #24
    14da:	4694      	mov	ip, r2
    14dc:	4463      	add	r3, ip
    14de:	881b      	ldrh	r3, [r3, #0]
    14e0:	4642      	mov	r2, r8
    14e2:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    14e4:	9b05      	ldr	r3, [sp, #20]
    14e6:	465a      	mov	r2, fp
    14e8:	4313      	orrs	r3, r2
    14ea:	9a03      	ldr	r2, [sp, #12]
    14ec:	4313      	orrs	r3, r2
    14ee:	464a      	mov	r2, r9
    14f0:	4313      	orrs	r3, r2
    14f2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    14f4:	9b04      	ldr	r3, [sp, #16]
    14f6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    14f8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    14fa:	4653      	mov	r3, sl
    14fc:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    14fe:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1500:	2327      	movs	r3, #39	; 0x27
    1502:	5cf3      	ldrb	r3, [r6, r3]
    1504:	2b00      	cmp	r3, #0
    1506:	d101      	bne.n	150c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1508:	3304      	adds	r3, #4
    150a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    150c:	7e73      	ldrb	r3, [r6, #25]
    150e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1510:	7f32      	ldrb	r2, [r6, #28]
    1512:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1514:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1516:	7f72      	ldrb	r2, [r6, #29]
    1518:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    151a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    151c:	2224      	movs	r2, #36	; 0x24
    151e:	5cb2      	ldrb	r2, [r6, r2]
    1520:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1522:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1524:	2225      	movs	r2, #37	; 0x25
    1526:	5cb2      	ldrb	r2, [r6, r2]
    1528:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    152a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    152c:	7af1      	ldrb	r1, [r6, #11]
    152e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1530:	8933      	ldrh	r3, [r6, #8]
    1532:	2bff      	cmp	r3, #255	; 0xff
    1534:	d100      	bne.n	1538 <usart_init+0x180>
    1536:	e081      	b.n	163c <usart_init+0x284>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1538:	2280      	movs	r2, #128	; 0x80
    153a:	0452      	lsls	r2, r2, #17
    153c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    153e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1540:	232c      	movs	r3, #44	; 0x2c
    1542:	5cf3      	ldrb	r3, [r6, r3]
    1544:	2b00      	cmp	r3, #0
    1546:	d103      	bne.n	1550 <usart_init+0x198>
    1548:	4b62      	ldr	r3, [pc, #392]	; (16d4 <usart_init+0x31c>)
    154a:	789b      	ldrb	r3, [r3, #2]
    154c:	079b      	lsls	r3, r3, #30
    154e:	d501      	bpl.n	1554 <usart_init+0x19c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1550:	2380      	movs	r3, #128	; 0x80
    1552:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1554:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1556:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1558:	2b00      	cmp	r3, #0
    155a:	d1fc      	bne.n	1556 <usart_init+0x19e>
	usart_hw->CTRLB.reg = ctrlb;
    155c:	4643      	mov	r3, r8
    155e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1560:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1562:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1564:	2b00      	cmp	r3, #0
    1566:	d1fc      	bne.n	1562 <usart_init+0x1aa>
	usart_hw->CTRLA.reg = ctrla;
    1568:	4643      	mov	r3, r8
    156a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    156c:	ab0e      	add	r3, sp, #56	; 0x38
    156e:	2280      	movs	r2, #128	; 0x80
    1570:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1572:	2200      	movs	r2, #0
    1574:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1576:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1578:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    157a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    157c:	930a      	str	r3, [sp, #40]	; 0x28
    157e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1580:	930b      	str	r3, [sp, #44]	; 0x2c
    1582:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1584:	930c      	str	r3, [sp, #48]	; 0x30
    1586:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1588:	9302      	str	r3, [sp, #8]
    158a:	930d      	str	r3, [sp, #52]	; 0x34
    158c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    158e:	ae0a      	add	r6, sp, #40	; 0x28
    1590:	e063      	b.n	165a <usart_init+0x2a2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1592:	2308      	movs	r3, #8
    1594:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1596:	3b07      	subs	r3, #7
    1598:	9307      	str	r3, [sp, #28]
    159a:	e77c      	b.n	1496 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    159c:	6833      	ldr	r3, [r6, #0]
    159e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    15a0:	68f3      	ldr	r3, [r6, #12]
    15a2:	469b      	mov	fp, r3
		config->sample_adjustment |
    15a4:	6973      	ldr	r3, [r6, #20]
    15a6:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    15a8:	7e33      	ldrb	r3, [r6, #24]
    15aa:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    15ac:	2326      	movs	r3, #38	; 0x26
    15ae:	5cf3      	ldrb	r3, [r6, r3]
    15b0:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    15b2:	6873      	ldr	r3, [r6, #4]
    15b4:	4699      	mov	r9, r3
	switch (transfer_mode)
    15b6:	2b00      	cmp	r3, #0
    15b8:	d018      	beq.n	15ec <usart_init+0x234>
    15ba:	2380      	movs	r3, #128	; 0x80
    15bc:	055b      	lsls	r3, r3, #21
    15be:	4599      	cmp	r9, r3
    15c0:	d001      	beq.n	15c6 <usart_init+0x20e>
	enum status_code status_code = STATUS_OK;
    15c2:	2000      	movs	r0, #0
    15c4:	e025      	b.n	1612 <usart_init+0x25a>
			if (!config->use_external_clock) {
    15c6:	2327      	movs	r3, #39	; 0x27
    15c8:	5cf3      	ldrb	r3, [r6, r3]
    15ca:	2b00      	cmp	r3, #0
    15cc:	d000      	beq.n	15d0 <usart_init+0x218>
    15ce:	e777      	b.n	14c0 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    15d0:	6a33      	ldr	r3, [r6, #32]
    15d2:	001f      	movs	r7, r3
    15d4:	b2c0      	uxtb	r0, r0
    15d6:	4b40      	ldr	r3, [pc, #256]	; (16d8 <usart_init+0x320>)
    15d8:	4798      	blx	r3
    15da:	0001      	movs	r1, r0
    15dc:	220e      	movs	r2, #14
    15de:	ab06      	add	r3, sp, #24
    15e0:	469c      	mov	ip, r3
    15e2:	4462      	add	r2, ip
    15e4:	0038      	movs	r0, r7
    15e6:	4b3d      	ldr	r3, [pc, #244]	; (16dc <usart_init+0x324>)
    15e8:	4798      	blx	r3
    15ea:	e012      	b.n	1612 <usart_init+0x25a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    15ec:	2308      	movs	r3, #8
    15ee:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    15f0:	2300      	movs	r3, #0
    15f2:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    15f4:	2327      	movs	r3, #39	; 0x27
    15f6:	5cf3      	ldrb	r3, [r6, r3]
    15f8:	2b00      	cmp	r3, #0
    15fa:	d00e      	beq.n	161a <usart_init+0x262>
				status_code =
    15fc:	9b06      	ldr	r3, [sp, #24]
    15fe:	9300      	str	r3, [sp, #0]
    1600:	9b07      	ldr	r3, [sp, #28]
    1602:	220e      	movs	r2, #14
    1604:	a906      	add	r1, sp, #24
    1606:	468c      	mov	ip, r1
    1608:	4462      	add	r2, ip
    160a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    160c:	6a30      	ldr	r0, [r6, #32]
    160e:	4f34      	ldr	r7, [pc, #208]	; (16e0 <usart_init+0x328>)
    1610:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1612:	2800      	cmp	r0, #0
    1614:	d000      	beq.n	1618 <usart_init+0x260>
    1616:	e6e2      	b.n	13de <usart_init+0x26>
    1618:	e752      	b.n	14c0 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    161a:	6a33      	ldr	r3, [r6, #32]
    161c:	001f      	movs	r7, r3
    161e:	b2c0      	uxtb	r0, r0
    1620:	4b2d      	ldr	r3, [pc, #180]	; (16d8 <usart_init+0x320>)
    1622:	4798      	blx	r3
    1624:	0001      	movs	r1, r0
				status_code =
    1626:	9b06      	ldr	r3, [sp, #24]
    1628:	9300      	str	r3, [sp, #0]
    162a:	9b07      	ldr	r3, [sp, #28]
    162c:	220e      	movs	r2, #14
    162e:	a806      	add	r0, sp, #24
    1630:	4684      	mov	ip, r0
    1632:	4462      	add	r2, ip
    1634:	0038      	movs	r0, r7
    1636:	4f2a      	ldr	r7, [pc, #168]	; (16e0 <usart_init+0x328>)
    1638:	47b8      	blx	r7
    163a:	e7ea      	b.n	1612 <usart_init+0x25a>
		if(config->lin_slave_enable) {
    163c:	7ef3      	ldrb	r3, [r6, #27]
    163e:	2b00      	cmp	r3, #0
    1640:	d100      	bne.n	1644 <usart_init+0x28c>
    1642:	e77d      	b.n	1540 <usart_init+0x188>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1644:	2380      	movs	r3, #128	; 0x80
    1646:	04db      	lsls	r3, r3, #19
    1648:	431f      	orrs	r7, r3
    164a:	e779      	b.n	1540 <usart_init+0x188>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    164c:	0020      	movs	r0, r4
    164e:	4b25      	ldr	r3, [pc, #148]	; (16e4 <usart_init+0x32c>)
    1650:	4798      	blx	r3
    1652:	e007      	b.n	1664 <usart_init+0x2ac>
    1654:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1656:	2f04      	cmp	r7, #4
    1658:	d00d      	beq.n	1676 <usart_init+0x2be>
    165a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    165c:	00bb      	lsls	r3, r7, #2
    165e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1660:	2800      	cmp	r0, #0
    1662:	d0f3      	beq.n	164c <usart_init+0x294>
		if (current_pinmux != PINMUX_UNUSED) {
    1664:	1c43      	adds	r3, r0, #1
    1666:	d0f5      	beq.n	1654 <usart_init+0x29c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1668:	a90e      	add	r1, sp, #56	; 0x38
    166a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    166c:	0c00      	lsrs	r0, r0, #16
    166e:	b2c0      	uxtb	r0, r0
    1670:	4b1d      	ldr	r3, [pc, #116]	; (16e8 <usart_init+0x330>)
    1672:	4798      	blx	r3
    1674:	e7ee      	b.n	1654 <usart_init+0x29c>
		module->callback[i]            = NULL;
    1676:	2300      	movs	r3, #0
    1678:	60eb      	str	r3, [r5, #12]
    167a:	612b      	str	r3, [r5, #16]
    167c:	616b      	str	r3, [r5, #20]
    167e:	61ab      	str	r3, [r5, #24]
    1680:	61eb      	str	r3, [r5, #28]
    1682:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1684:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1686:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1688:	2200      	movs	r2, #0
    168a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    168c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    168e:	3330      	adds	r3, #48	; 0x30
    1690:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1692:	3301      	adds	r3, #1
    1694:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1696:	3301      	adds	r3, #1
    1698:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    169a:	3301      	adds	r3, #1
    169c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    169e:	6828      	ldr	r0, [r5, #0]
    16a0:	4b07      	ldr	r3, [pc, #28]	; (16c0 <usart_init+0x308>)
    16a2:	4798      	blx	r3
    16a4:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    16a6:	4911      	ldr	r1, [pc, #68]	; (16ec <usart_init+0x334>)
    16a8:	4b11      	ldr	r3, [pc, #68]	; (16f0 <usart_init+0x338>)
    16aa:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    16ac:	00a4      	lsls	r4, r4, #2
    16ae:	4b11      	ldr	r3, [pc, #68]	; (16f4 <usart_init+0x33c>)
    16b0:	50e5      	str	r5, [r4, r3]
	return status_code;
    16b2:	2000      	movs	r0, #0
    16b4:	e693      	b.n	13de <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    16b6:	2310      	movs	r3, #16
    16b8:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    16ba:	2300      	movs	r3, #0
    16bc:	9307      	str	r3, [sp, #28]
    16be:	e6ea      	b.n	1496 <usart_init+0xde>
    16c0:	00000ef9 	.word	0x00000ef9
    16c4:	40000400 	.word	0x40000400
    16c8:	00002161 	.word	0x00002161
    16cc:	000020d5 	.word	0x000020d5
    16d0:	00000d35 	.word	0x00000d35
    16d4:	41002000 	.word	0x41002000
    16d8:	0000217d 	.word	0x0000217d
    16dc:	00000b3d 	.word	0x00000b3d
    16e0:	00000b65 	.word	0x00000b65
    16e4:	00000d81 	.word	0x00000d81
    16e8:	00002259 	.word	0x00002259
    16ec:	00001879 	.word	0x00001879
    16f0:	00000f35 	.word	0x00000f35
    16f4:	200015fc 	.word	0x200015fc

000016f8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    16f8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    16fa:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    16fc:	2a00      	cmp	r2, #0
    16fe:	d101      	bne.n	1704 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1700:	0018      	movs	r0, r3
    1702:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1704:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1706:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1708:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    170a:	2a00      	cmp	r2, #0
    170c:	d1f8      	bne.n	1700 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    170e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1710:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1712:	2a00      	cmp	r2, #0
    1714:	d1fc      	bne.n	1710 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    1716:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1718:	2102      	movs	r1, #2
    171a:	7e1a      	ldrb	r2, [r3, #24]
    171c:	420a      	tst	r2, r1
    171e:	d0fc      	beq.n	171a <usart_write_wait+0x22>
	return STATUS_OK;
    1720:	2300      	movs	r3, #0
    1722:	e7ed      	b.n	1700 <usart_write_wait+0x8>

00001724 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1724:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1726:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1728:	2a00      	cmp	r2, #0
    172a:	d101      	bne.n	1730 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    172c:	0018      	movs	r0, r3
    172e:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1730:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1732:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1734:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1736:	2a00      	cmp	r2, #0
    1738:	d1f8      	bne.n	172c <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    173a:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    173c:	7e10      	ldrb	r0, [r2, #24]
    173e:	0740      	lsls	r0, r0, #29
    1740:	d5f4      	bpl.n	172c <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    1742:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1744:	2b00      	cmp	r3, #0
    1746:	d1fc      	bne.n	1742 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1748:	8b53      	ldrh	r3, [r2, #26]
    174a:	b2db      	uxtb	r3, r3
	if (error_code) {
    174c:	0698      	lsls	r0, r3, #26
    174e:	d01d      	beq.n	178c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1750:	0798      	lsls	r0, r3, #30
    1752:	d503      	bpl.n	175c <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1754:	2302      	movs	r3, #2
    1756:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1758:	3318      	adds	r3, #24
    175a:	e7e7      	b.n	172c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    175c:	0758      	lsls	r0, r3, #29
    175e:	d503      	bpl.n	1768 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1760:	2304      	movs	r3, #4
    1762:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1764:	331a      	adds	r3, #26
    1766:	e7e1      	b.n	172c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1768:	07d8      	lsls	r0, r3, #31
    176a:	d503      	bpl.n	1774 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    176c:	2301      	movs	r3, #1
    176e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1770:	3312      	adds	r3, #18
    1772:	e7db      	b.n	172c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1774:	06d8      	lsls	r0, r3, #27
    1776:	d503      	bpl.n	1780 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1778:	2310      	movs	r3, #16
    177a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    177c:	3332      	adds	r3, #50	; 0x32
    177e:	e7d5      	b.n	172c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1780:	069b      	lsls	r3, r3, #26
    1782:	d503      	bpl.n	178c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1784:	2320      	movs	r3, #32
    1786:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1788:	3321      	adds	r3, #33	; 0x21
    178a:	e7cf      	b.n	172c <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    178c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    178e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1790:	2300      	movs	r3, #0
    1792:	e7cb      	b.n	172c <usart_read_wait+0x8>

00001794 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1796:	0006      	movs	r6, r0
    1798:	000c      	movs	r4, r1
    179a:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    179c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    179e:	4b0a      	ldr	r3, [pc, #40]	; (17c8 <_usart_write_buffer+0x34>)
    17a0:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    17a2:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    17a4:	b29b      	uxth	r3, r3
    17a6:	2b00      	cmp	r3, #0
    17a8:	d003      	beq.n	17b2 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    17aa:	4b08      	ldr	r3, [pc, #32]	; (17cc <_usart_write_buffer+0x38>)
    17ac:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    17ae:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    17b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    17b2:	85f5      	strh	r5, [r6, #46]	; 0x2e
    17b4:	4b05      	ldr	r3, [pc, #20]	; (17cc <_usart_write_buffer+0x38>)
    17b6:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    17b8:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    17ba:	2205      	movs	r2, #5
    17bc:	2333      	movs	r3, #51	; 0x33
    17be:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    17c0:	3b32      	subs	r3, #50	; 0x32
    17c2:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    17c4:	2000      	movs	r0, #0
    17c6:	e7f3      	b.n	17b0 <_usart_write_buffer+0x1c>
    17c8:	00000805 	.word	0x00000805
    17cc:	00000845 	.word	0x00000845

000017d0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    17d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17d2:	0004      	movs	r4, r0
    17d4:	000d      	movs	r5, r1
    17d6:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    17d8:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    17da:	4b0f      	ldr	r3, [pc, #60]	; (1818 <_usart_read_buffer+0x48>)
    17dc:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    17de:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    17e0:	b29b      	uxth	r3, r3
    17e2:	2b00      	cmp	r3, #0
    17e4:	d003      	beq.n	17ee <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    17e6:	4b0d      	ldr	r3, [pc, #52]	; (181c <_usart_read_buffer+0x4c>)
    17e8:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    17ea:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    17ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    17ee:	85a6      	strh	r6, [r4, #44]	; 0x2c
    17f0:	4b0a      	ldr	r3, [pc, #40]	; (181c <_usart_read_buffer+0x4c>)
    17f2:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    17f4:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    17f6:	2205      	movs	r2, #5
    17f8:	2332      	movs	r3, #50	; 0x32
    17fa:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    17fc:	3b2e      	subs	r3, #46	; 0x2e
    17fe:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    1800:	7a23      	ldrb	r3, [r4, #8]
    1802:	2b00      	cmp	r3, #0
    1804:	d001      	beq.n	180a <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    1806:	2320      	movs	r3, #32
    1808:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    180a:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    180c:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    180e:	2b00      	cmp	r3, #0
    1810:	d0ec      	beq.n	17ec <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    1812:	2308      	movs	r3, #8
    1814:	75bb      	strb	r3, [r7, #22]
    1816:	e7e9      	b.n	17ec <_usart_read_buffer+0x1c>
    1818:	00000805 	.word	0x00000805
    181c:	00000845 	.word	0x00000845

00001820 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1820:	1c93      	adds	r3, r2, #2
    1822:	009b      	lsls	r3, r3, #2
    1824:	18c3      	adds	r3, r0, r3
    1826:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    1828:	2130      	movs	r1, #48	; 0x30
    182a:	2301      	movs	r3, #1
    182c:	4093      	lsls	r3, r2
    182e:	001a      	movs	r2, r3
    1830:	5c43      	ldrb	r3, [r0, r1]
    1832:	4313      	orrs	r3, r2
    1834:	5443      	strb	r3, [r0, r1]
}
    1836:	4770      	bx	lr

00001838 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1838:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    183a:	2317      	movs	r3, #23
	if (length == 0) {
    183c:	2a00      	cmp	r2, #0
    183e:	d101      	bne.n	1844 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    1840:	0018      	movs	r0, r3
    1842:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    1844:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    1846:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    1848:	2c00      	cmp	r4, #0
    184a:	d0f9      	beq.n	1840 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    184c:	4b01      	ldr	r3, [pc, #4]	; (1854 <usart_write_buffer_job+0x1c>)
    184e:	4798      	blx	r3
    1850:	0003      	movs	r3, r0
    1852:	e7f5      	b.n	1840 <usart_write_buffer_job+0x8>
    1854:	00001795 	.word	0x00001795

00001858 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1858:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    185a:	2317      	movs	r3, #23
	if (length == 0) {
    185c:	2a00      	cmp	r2, #0
    185e:	d101      	bne.n	1864 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    1860:	0018      	movs	r0, r3
    1862:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    1864:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    1866:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    1868:	2c00      	cmp	r4, #0
    186a:	d0f9      	beq.n	1860 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    186c:	4b01      	ldr	r3, [pc, #4]	; (1874 <usart_read_buffer_job+0x1c>)
    186e:	4798      	blx	r3
    1870:	0003      	movs	r3, r0
    1872:	e7f5      	b.n	1860 <usart_read_buffer_job+0x8>
    1874:	000017d1 	.word	0x000017d1

00001878 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    187a:	0080      	lsls	r0, r0, #2
    187c:	4b62      	ldr	r3, [pc, #392]	; (1a08 <_usart_interrupt_handler+0x190>)
    187e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1880:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1882:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1884:	2b00      	cmp	r3, #0
    1886:	d1fc      	bne.n	1882 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1888:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    188a:	7da6      	ldrb	r6, [r4, #22]
    188c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    188e:	2330      	movs	r3, #48	; 0x30
    1890:	5ceb      	ldrb	r3, [r5, r3]
    1892:	2231      	movs	r2, #49	; 0x31
    1894:	5caf      	ldrb	r7, [r5, r2]
    1896:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1898:	07f3      	lsls	r3, r6, #31
    189a:	d522      	bpl.n	18e2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    189c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    189e:	b29b      	uxth	r3, r3
    18a0:	2b00      	cmp	r3, #0
    18a2:	d01c      	beq.n	18de <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    18a4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    18a6:	7813      	ldrb	r3, [r2, #0]
    18a8:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    18aa:	1c51      	adds	r1, r2, #1
    18ac:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    18ae:	7969      	ldrb	r1, [r5, #5]
    18b0:	2901      	cmp	r1, #1
    18b2:	d00e      	beq.n	18d2 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    18b4:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    18b6:	05db      	lsls	r3, r3, #23
    18b8:	0ddb      	lsrs	r3, r3, #23
    18ba:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    18bc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    18be:	3b01      	subs	r3, #1
    18c0:	b29b      	uxth	r3, r3
    18c2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    18c4:	2b00      	cmp	r3, #0
    18c6:	d10c      	bne.n	18e2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    18c8:	3301      	adds	r3, #1
    18ca:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    18cc:	3301      	adds	r3, #1
    18ce:	75a3      	strb	r3, [r4, #22]
    18d0:	e007      	b.n	18e2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    18d2:	7851      	ldrb	r1, [r2, #1]
    18d4:	0209      	lsls	r1, r1, #8
    18d6:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    18d8:	3202      	adds	r2, #2
    18da:	62aa      	str	r2, [r5, #40]	; 0x28
    18dc:	e7eb      	b.n	18b6 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    18de:	2301      	movs	r3, #1
    18e0:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    18e2:	07b3      	lsls	r3, r6, #30
    18e4:	d506      	bpl.n	18f4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    18e6:	2302      	movs	r3, #2
    18e8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    18ea:	2200      	movs	r2, #0
    18ec:	3331      	adds	r3, #49	; 0x31
    18ee:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    18f0:	07fb      	lsls	r3, r7, #31
    18f2:	d41a      	bmi.n	192a <_usart_interrupt_handler+0xb2>

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    18f4:	0773      	lsls	r3, r6, #29
    18f6:	d565      	bpl.n	19c4 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    18f8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    18fa:	b29b      	uxth	r3, r3
    18fc:	2b00      	cmp	r3, #0
    18fe:	d05f      	beq.n	19c0 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1900:	8b63      	ldrh	r3, [r4, #26]
    1902:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1904:	071a      	lsls	r2, r3, #28
    1906:	d414      	bmi.n	1932 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1908:	223f      	movs	r2, #63	; 0x3f
    190a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    190c:	2b00      	cmp	r3, #0
    190e:	d034      	beq.n	197a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1910:	079a      	lsls	r2, r3, #30
    1912:	d511      	bpl.n	1938 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1914:	221a      	movs	r2, #26
    1916:	2332      	movs	r3, #50	; 0x32
    1918:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    191a:	3b30      	subs	r3, #48	; 0x30
    191c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    191e:	077b      	lsls	r3, r7, #29
    1920:	d550      	bpl.n	19c4 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1922:	0028      	movs	r0, r5
    1924:	696b      	ldr	r3, [r5, #20]
    1926:	4798      	blx	r3
    1928:	e04c      	b.n	19c4 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    192a:	0028      	movs	r0, r5
    192c:	68eb      	ldr	r3, [r5, #12]
    192e:	4798      	blx	r3
    1930:	e7e0      	b.n	18f4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1932:	2237      	movs	r2, #55	; 0x37
    1934:	4013      	ands	r3, r2
    1936:	e7e9      	b.n	190c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1938:	075a      	lsls	r2, r3, #29
    193a:	d505      	bpl.n	1948 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    193c:	221e      	movs	r2, #30
    193e:	2332      	movs	r3, #50	; 0x32
    1940:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1942:	3b2e      	subs	r3, #46	; 0x2e
    1944:	8363      	strh	r3, [r4, #26]
    1946:	e7ea      	b.n	191e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1948:	07da      	lsls	r2, r3, #31
    194a:	d505      	bpl.n	1958 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    194c:	2213      	movs	r2, #19
    194e:	2332      	movs	r3, #50	; 0x32
    1950:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1952:	3b31      	subs	r3, #49	; 0x31
    1954:	8363      	strh	r3, [r4, #26]
    1956:	e7e2      	b.n	191e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1958:	06da      	lsls	r2, r3, #27
    195a:	d505      	bpl.n	1968 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    195c:	2242      	movs	r2, #66	; 0x42
    195e:	2332      	movs	r3, #50	; 0x32
    1960:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1962:	3b22      	subs	r3, #34	; 0x22
    1964:	8363      	strh	r3, [r4, #26]
    1966:	e7da      	b.n	191e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1968:	2220      	movs	r2, #32
    196a:	421a      	tst	r2, r3
    196c:	d0d7      	beq.n	191e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    196e:	3221      	adds	r2, #33	; 0x21
    1970:	2332      	movs	r3, #50	; 0x32
    1972:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1974:	3b12      	subs	r3, #18
    1976:	8363      	strh	r3, [r4, #26]
    1978:	e7d1      	b.n	191e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    197a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    197c:	05db      	lsls	r3, r3, #23
    197e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1980:	b2da      	uxtb	r2, r3
    1982:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1984:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1986:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1988:	1c51      	adds	r1, r2, #1
    198a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    198c:	7969      	ldrb	r1, [r5, #5]
    198e:	2901      	cmp	r1, #1
    1990:	d010      	beq.n	19b4 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1992:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1994:	3b01      	subs	r3, #1
    1996:	b29b      	uxth	r3, r3
    1998:	85ab      	strh	r3, [r5, #44]	; 0x2c
    199a:	2b00      	cmp	r3, #0
    199c:	d112      	bne.n	19c4 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    199e:	3304      	adds	r3, #4
    19a0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    19a2:	2200      	movs	r2, #0
    19a4:	332e      	adds	r3, #46	; 0x2e
    19a6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    19a8:	07bb      	lsls	r3, r7, #30
    19aa:	d50b      	bpl.n	19c4 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    19ac:	0028      	movs	r0, r5
    19ae:	692b      	ldr	r3, [r5, #16]
    19b0:	4798      	blx	r3
    19b2:	e007      	b.n	19c4 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    19b4:	0a1b      	lsrs	r3, r3, #8
    19b6:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    19b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    19ba:	3301      	adds	r3, #1
    19bc:	626b      	str	r3, [r5, #36]	; 0x24
    19be:	e7e8      	b.n	1992 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    19c0:	2304      	movs	r3, #4
    19c2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    19c4:	06f3      	lsls	r3, r6, #27
    19c6:	d504      	bpl.n	19d2 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    19c8:	2310      	movs	r3, #16
    19ca:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    19cc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    19ce:	06fb      	lsls	r3, r7, #27
    19d0:	d40e      	bmi.n	19f0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    19d2:	06b3      	lsls	r3, r6, #26
    19d4:	d504      	bpl.n	19e0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    19d6:	2320      	movs	r3, #32
    19d8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    19da:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    19dc:	073b      	lsls	r3, r7, #28
    19de:	d40b      	bmi.n	19f8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    19e0:	0733      	lsls	r3, r6, #28
    19e2:	d504      	bpl.n	19ee <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    19e4:	2308      	movs	r3, #8
    19e6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    19e8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    19ea:	06bb      	lsls	r3, r7, #26
    19ec:	d408      	bmi.n	1a00 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    19ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    19f0:	0028      	movs	r0, r5
    19f2:	69eb      	ldr	r3, [r5, #28]
    19f4:	4798      	blx	r3
    19f6:	e7ec      	b.n	19d2 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    19f8:	0028      	movs	r0, r5
    19fa:	69ab      	ldr	r3, [r5, #24]
    19fc:	4798      	blx	r3
    19fe:	e7ef      	b.n	19e0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1a00:	6a2b      	ldr	r3, [r5, #32]
    1a02:	0028      	movs	r0, r5
    1a04:	4798      	blx	r3
}
    1a06:	e7f2      	b.n	19ee <_usart_interrupt_handler+0x176>
    1a08:	200015fc 	.word	0x200015fc

00001a0c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1a0c:	b510      	push	{r4, lr}
	switch (clock_source) {
    1a0e:	2808      	cmp	r0, #8
    1a10:	d803      	bhi.n	1a1a <system_clock_source_get_hz+0xe>
    1a12:	0080      	lsls	r0, r0, #2
    1a14:	4b1b      	ldr	r3, [pc, #108]	; (1a84 <system_clock_source_get_hz+0x78>)
    1a16:	581b      	ldr	r3, [r3, r0]
    1a18:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1a1a:	2000      	movs	r0, #0
    1a1c:	e030      	b.n	1a80 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    1a1e:	4b1a      	ldr	r3, [pc, #104]	; (1a88 <system_clock_source_get_hz+0x7c>)
    1a20:	6918      	ldr	r0, [r3, #16]
    1a22:	e02d      	b.n	1a80 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1a24:	4b19      	ldr	r3, [pc, #100]	; (1a8c <system_clock_source_get_hz+0x80>)
    1a26:	6a1b      	ldr	r3, [r3, #32]
    1a28:	059b      	lsls	r3, r3, #22
    1a2a:	0f9b      	lsrs	r3, r3, #30
    1a2c:	4818      	ldr	r0, [pc, #96]	; (1a90 <system_clock_source_get_hz+0x84>)
    1a2e:	40d8      	lsrs	r0, r3
    1a30:	e026      	b.n	1a80 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    1a32:	4b15      	ldr	r3, [pc, #84]	; (1a88 <system_clock_source_get_hz+0x7c>)
    1a34:	6958      	ldr	r0, [r3, #20]
    1a36:	e023      	b.n	1a80 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1a38:	4b13      	ldr	r3, [pc, #76]	; (1a88 <system_clock_source_get_hz+0x7c>)
    1a3a:	681b      	ldr	r3, [r3, #0]
			return 0;
    1a3c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1a3e:	079b      	lsls	r3, r3, #30
    1a40:	d51e      	bpl.n	1a80 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1a42:	4912      	ldr	r1, [pc, #72]	; (1a8c <system_clock_source_get_hz+0x80>)
    1a44:	2210      	movs	r2, #16
    1a46:	68cb      	ldr	r3, [r1, #12]
    1a48:	421a      	tst	r2, r3
    1a4a:	d0fc      	beq.n	1a46 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1a4c:	4b0e      	ldr	r3, [pc, #56]	; (1a88 <system_clock_source_get_hz+0x7c>)
    1a4e:	681b      	ldr	r3, [r3, #0]
    1a50:	075b      	lsls	r3, r3, #29
    1a52:	d401      	bmi.n	1a58 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1a54:	480f      	ldr	r0, [pc, #60]	; (1a94 <system_clock_source_get_hz+0x88>)
    1a56:	e013      	b.n	1a80 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1a58:	2000      	movs	r0, #0
    1a5a:	4b0f      	ldr	r3, [pc, #60]	; (1a98 <system_clock_source_get_hz+0x8c>)
    1a5c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1a5e:	4b0a      	ldr	r3, [pc, #40]	; (1a88 <system_clock_source_get_hz+0x7c>)
    1a60:	689b      	ldr	r3, [r3, #8]
    1a62:	041b      	lsls	r3, r3, #16
    1a64:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1a66:	4358      	muls	r0, r3
    1a68:	e00a      	b.n	1a80 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1a6a:	2350      	movs	r3, #80	; 0x50
    1a6c:	4a07      	ldr	r2, [pc, #28]	; (1a8c <system_clock_source_get_hz+0x80>)
    1a6e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1a70:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1a72:	075b      	lsls	r3, r3, #29
    1a74:	d504      	bpl.n	1a80 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1a76:	4b04      	ldr	r3, [pc, #16]	; (1a88 <system_clock_source_get_hz+0x7c>)
    1a78:	68d8      	ldr	r0, [r3, #12]
    1a7a:	e001      	b.n	1a80 <system_clock_source_get_hz+0x74>
		return 32768UL;
    1a7c:	2080      	movs	r0, #128	; 0x80
    1a7e:	0200      	lsls	r0, r0, #8
	}
}
    1a80:	bd10      	pop	{r4, pc}
    1a82:	46c0      	nop			; (mov r8, r8)
    1a84:	0000a45c 	.word	0x0000a45c
    1a88:	20000220 	.word	0x20000220
    1a8c:	40000800 	.word	0x40000800
    1a90:	007a1200 	.word	0x007a1200
    1a94:	02dc6c00 	.word	0x02dc6c00
    1a98:	0000217d 	.word	0x0000217d

00001a9c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1a9c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1a9e:	490c      	ldr	r1, [pc, #48]	; (1ad0 <system_clock_source_osc8m_set_config+0x34>)
    1aa0:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1aa2:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1aa4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1aa6:	7840      	ldrb	r0, [r0, #1]
    1aa8:	2201      	movs	r2, #1
    1aaa:	4010      	ands	r0, r2
    1aac:	0180      	lsls	r0, r0, #6
    1aae:	2640      	movs	r6, #64	; 0x40
    1ab0:	43b3      	bics	r3, r6
    1ab2:	4303      	orrs	r3, r0
    1ab4:	402a      	ands	r2, r5
    1ab6:	01d2      	lsls	r2, r2, #7
    1ab8:	2080      	movs	r0, #128	; 0x80
    1aba:	4383      	bics	r3, r0
    1abc:	4313      	orrs	r3, r2
    1abe:	2203      	movs	r2, #3
    1ac0:	4022      	ands	r2, r4
    1ac2:	0212      	lsls	r2, r2, #8
    1ac4:	4803      	ldr	r0, [pc, #12]	; (1ad4 <system_clock_source_osc8m_set_config+0x38>)
    1ac6:	4003      	ands	r3, r0
    1ac8:	4313      	orrs	r3, r2
    1aca:	620b      	str	r3, [r1, #32]
}
    1acc:	bd70      	pop	{r4, r5, r6, pc}
    1ace:	46c0      	nop			; (mov r8, r8)
    1ad0:	40000800 	.word	0x40000800
    1ad4:	fffffcff 	.word	0xfffffcff

00001ad8 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ada:	46ce      	mov	lr, r9
    1adc:	4647      	mov	r7, r8
    1ade:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1ae0:	4b19      	ldr	r3, [pc, #100]	; (1b48 <system_clock_source_osc32k_set_config+0x70>)
    1ae2:	4699      	mov	r9, r3
    1ae4:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    1ae6:	7841      	ldrb	r1, [r0, #1]
    1ae8:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1aea:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1aec:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1aee:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    1af0:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    1af2:	7880      	ldrb	r0, [r0, #2]
    1af4:	2101      	movs	r1, #1
    1af6:	4008      	ands	r0, r1
    1af8:	0080      	lsls	r0, r0, #2
    1afa:	2204      	movs	r2, #4
    1afc:	4393      	bics	r3, r2
    1afe:	4303      	orrs	r3, r0
    1b00:	4660      	mov	r0, ip
    1b02:	4008      	ands	r0, r1
    1b04:	00c0      	lsls	r0, r0, #3
    1b06:	3204      	adds	r2, #4
    1b08:	4393      	bics	r3, r2
    1b0a:	4303      	orrs	r3, r0
    1b0c:	0038      	movs	r0, r7
    1b0e:	4008      	ands	r0, r1
    1b10:	0180      	lsls	r0, r0, #6
    1b12:	2740      	movs	r7, #64	; 0x40
    1b14:	43bb      	bics	r3, r7
    1b16:	4303      	orrs	r3, r0
    1b18:	0030      	movs	r0, r6
    1b1a:	4008      	ands	r0, r1
    1b1c:	01c0      	lsls	r0, r0, #7
    1b1e:	2680      	movs	r6, #128	; 0x80
    1b20:	43b3      	bics	r3, r6
    1b22:	4303      	orrs	r3, r0
    1b24:	2007      	movs	r0, #7
    1b26:	4005      	ands	r5, r0
    1b28:	022d      	lsls	r5, r5, #8
    1b2a:	4808      	ldr	r0, [pc, #32]	; (1b4c <system_clock_source_osc32k_set_config+0x74>)
    1b2c:	4003      	ands	r3, r0
    1b2e:	432b      	orrs	r3, r5
    1b30:	4021      	ands	r1, r4
    1b32:	0309      	lsls	r1, r1, #12
    1b34:	4806      	ldr	r0, [pc, #24]	; (1b50 <system_clock_source_osc32k_set_config+0x78>)
    1b36:	4003      	ands	r3, r0
    1b38:	430b      	orrs	r3, r1
    1b3a:	464a      	mov	r2, r9
    1b3c:	6193      	str	r3, [r2, #24]
}
    1b3e:	bc0c      	pop	{r2, r3}
    1b40:	4690      	mov	r8, r2
    1b42:	4699      	mov	r9, r3
    1b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b46:	46c0      	nop			; (mov r8, r8)
    1b48:	40000800 	.word	0x40000800
    1b4c:	fffff8ff 	.word	0xfffff8ff
    1b50:	ffffefff 	.word	0xffffefff

00001b54 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b56:	46de      	mov	lr, fp
    1b58:	4657      	mov	r7, sl
    1b5a:	464e      	mov	r6, r9
    1b5c:	4645      	mov	r5, r8
    1b5e:	b5e0      	push	{r5, r6, r7, lr}
    1b60:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1b62:	4b26      	ldr	r3, [pc, #152]	; (1bfc <system_clock_source_xosc32k_set_config+0xa8>)
    1b64:	469b      	mov	fp, r3
    1b66:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1b68:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1b6a:	7800      	ldrb	r0, [r0, #0]
    1b6c:	4242      	negs	r2, r0
    1b6e:	4142      	adcs	r2, r0
    1b70:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1b72:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1b74:	78ca      	ldrb	r2, [r1, #3]
    1b76:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1b78:	790a      	ldrb	r2, [r1, #4]
    1b7a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1b7c:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1b7e:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1b80:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1b82:	688a      	ldr	r2, [r1, #8]
    1b84:	491e      	ldr	r1, [pc, #120]	; (1c00 <system_clock_source_xosc32k_set_config+0xac>)
    1b86:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1b88:	2101      	movs	r1, #1
    1b8a:	464a      	mov	r2, r9
    1b8c:	0092      	lsls	r2, r2, #2
    1b8e:	4691      	mov	r9, r2
    1b90:	2204      	movs	r2, #4
    1b92:	4393      	bics	r3, r2
    1b94:	464a      	mov	r2, r9
    1b96:	4313      	orrs	r3, r2
    1b98:	4642      	mov	r2, r8
    1b9a:	400a      	ands	r2, r1
    1b9c:	00d2      	lsls	r2, r2, #3
    1b9e:	4690      	mov	r8, r2
    1ba0:	2208      	movs	r2, #8
    1ba2:	4393      	bics	r3, r2
    1ba4:	4642      	mov	r2, r8
    1ba6:	4313      	orrs	r3, r2
    1ba8:	4662      	mov	r2, ip
    1baa:	400a      	ands	r2, r1
    1bac:	0112      	lsls	r2, r2, #4
    1bae:	4694      	mov	ip, r2
    1bb0:	2210      	movs	r2, #16
    1bb2:	4393      	bics	r3, r2
    1bb4:	4662      	mov	r2, ip
    1bb6:	4313      	orrs	r3, r2
    1bb8:	4008      	ands	r0, r1
    1bba:	0140      	lsls	r0, r0, #5
    1bbc:	2220      	movs	r2, #32
    1bbe:	4393      	bics	r3, r2
    1bc0:	4303      	orrs	r3, r0
    1bc2:	400f      	ands	r7, r1
    1bc4:	01bf      	lsls	r7, r7, #6
    1bc6:	2040      	movs	r0, #64	; 0x40
    1bc8:	4383      	bics	r3, r0
    1bca:	433b      	orrs	r3, r7
    1bcc:	400e      	ands	r6, r1
    1bce:	01f6      	lsls	r6, r6, #7
    1bd0:	3040      	adds	r0, #64	; 0x40
    1bd2:	4383      	bics	r3, r0
    1bd4:	4333      	orrs	r3, r6
    1bd6:	3879      	subs	r0, #121	; 0x79
    1bd8:	4005      	ands	r5, r0
    1bda:	022d      	lsls	r5, r5, #8
    1bdc:	4809      	ldr	r0, [pc, #36]	; (1c04 <system_clock_source_xosc32k_set_config+0xb0>)
    1bde:	4003      	ands	r3, r0
    1be0:	432b      	orrs	r3, r5
    1be2:	4021      	ands	r1, r4
    1be4:	0309      	lsls	r1, r1, #12
    1be6:	4808      	ldr	r0, [pc, #32]	; (1c08 <system_clock_source_xosc32k_set_config+0xb4>)
    1be8:	4003      	ands	r3, r0
    1bea:	430b      	orrs	r3, r1
    1bec:	465a      	mov	r2, fp
    1bee:	8293      	strh	r3, [r2, #20]
}
    1bf0:	bc3c      	pop	{r2, r3, r4, r5}
    1bf2:	4690      	mov	r8, r2
    1bf4:	4699      	mov	r9, r3
    1bf6:	46a2      	mov	sl, r4
    1bf8:	46ab      	mov	fp, r5
    1bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bfc:	40000800 	.word	0x40000800
    1c00:	20000220 	.word	0x20000220
    1c04:	fffff8ff 	.word	0xfffff8ff
    1c08:	ffffefff 	.word	0xffffefff

00001c0c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1c0c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1c0e:	7a03      	ldrb	r3, [r0, #8]
    1c10:	069b      	lsls	r3, r3, #26
    1c12:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1c14:	8942      	ldrh	r2, [r0, #10]
    1c16:	0592      	lsls	r2, r2, #22
    1c18:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1c1a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1c1c:	4918      	ldr	r1, [pc, #96]	; (1c80 <system_clock_source_dfll_set_config+0x74>)
    1c1e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1c20:	7983      	ldrb	r3, [r0, #6]
    1c22:	79c2      	ldrb	r2, [r0, #7]
    1c24:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1c26:	8842      	ldrh	r2, [r0, #2]
    1c28:	8884      	ldrh	r4, [r0, #4]
    1c2a:	4322      	orrs	r2, r4
    1c2c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1c2e:	7842      	ldrb	r2, [r0, #1]
    1c30:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1c32:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1c34:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1c36:	7803      	ldrb	r3, [r0, #0]
    1c38:	2b04      	cmp	r3, #4
    1c3a:	d011      	beq.n	1c60 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1c3c:	2b20      	cmp	r3, #32
    1c3e:	d10e      	bne.n	1c5e <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1c40:	7b03      	ldrb	r3, [r0, #12]
    1c42:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1c44:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1c46:	4313      	orrs	r3, r2
    1c48:	89c2      	ldrh	r2, [r0, #14]
    1c4a:	0412      	lsls	r2, r2, #16
    1c4c:	490d      	ldr	r1, [pc, #52]	; (1c84 <system_clock_source_dfll_set_config+0x78>)
    1c4e:	400a      	ands	r2, r1
    1c50:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1c52:	4a0b      	ldr	r2, [pc, #44]	; (1c80 <system_clock_source_dfll_set_config+0x74>)
    1c54:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1c56:	6811      	ldr	r1, [r2, #0]
    1c58:	4b0b      	ldr	r3, [pc, #44]	; (1c88 <system_clock_source_dfll_set_config+0x7c>)
    1c5a:	430b      	orrs	r3, r1
    1c5c:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1c5e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1c60:	7b03      	ldrb	r3, [r0, #12]
    1c62:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1c64:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1c66:	4313      	orrs	r3, r2
    1c68:	89c2      	ldrh	r2, [r0, #14]
    1c6a:	0412      	lsls	r2, r2, #16
    1c6c:	4905      	ldr	r1, [pc, #20]	; (1c84 <system_clock_source_dfll_set_config+0x78>)
    1c6e:	400a      	ands	r2, r1
    1c70:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1c72:	4a03      	ldr	r2, [pc, #12]	; (1c80 <system_clock_source_dfll_set_config+0x74>)
    1c74:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1c76:	6813      	ldr	r3, [r2, #0]
    1c78:	2104      	movs	r1, #4
    1c7a:	430b      	orrs	r3, r1
    1c7c:	6013      	str	r3, [r2, #0]
    1c7e:	e7ee      	b.n	1c5e <system_clock_source_dfll_set_config+0x52>
    1c80:	20000220 	.word	0x20000220
    1c84:	03ff0000 	.word	0x03ff0000
    1c88:	00000424 	.word	0x00000424

00001c8c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1c8c:	2808      	cmp	r0, #8
    1c8e:	d803      	bhi.n	1c98 <system_clock_source_enable+0xc>
    1c90:	0080      	lsls	r0, r0, #2
    1c92:	4b25      	ldr	r3, [pc, #148]	; (1d28 <system_clock_source_enable+0x9c>)
    1c94:	581b      	ldr	r3, [r3, r0]
    1c96:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1c98:	2017      	movs	r0, #23
    1c9a:	e044      	b.n	1d26 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1c9c:	4a23      	ldr	r2, [pc, #140]	; (1d2c <system_clock_source_enable+0xa0>)
    1c9e:	6a13      	ldr	r3, [r2, #32]
    1ca0:	2102      	movs	r1, #2
    1ca2:	430b      	orrs	r3, r1
    1ca4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1ca6:	2000      	movs	r0, #0
    1ca8:	e03d      	b.n	1d26 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1caa:	4a20      	ldr	r2, [pc, #128]	; (1d2c <system_clock_source_enable+0xa0>)
    1cac:	6993      	ldr	r3, [r2, #24]
    1cae:	2102      	movs	r1, #2
    1cb0:	430b      	orrs	r3, r1
    1cb2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1cb4:	2000      	movs	r0, #0
		break;
    1cb6:	e036      	b.n	1d26 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1cb8:	4a1c      	ldr	r2, [pc, #112]	; (1d2c <system_clock_source_enable+0xa0>)
    1cba:	8a13      	ldrh	r3, [r2, #16]
    1cbc:	2102      	movs	r1, #2
    1cbe:	430b      	orrs	r3, r1
    1cc0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1cc2:	2000      	movs	r0, #0
		break;
    1cc4:	e02f      	b.n	1d26 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1cc6:	4a19      	ldr	r2, [pc, #100]	; (1d2c <system_clock_source_enable+0xa0>)
    1cc8:	8a93      	ldrh	r3, [r2, #20]
    1cca:	2102      	movs	r1, #2
    1ccc:	430b      	orrs	r3, r1
    1cce:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1cd0:	2000      	movs	r0, #0
		break;
    1cd2:	e028      	b.n	1d26 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1cd4:	4916      	ldr	r1, [pc, #88]	; (1d30 <system_clock_source_enable+0xa4>)
    1cd6:	680b      	ldr	r3, [r1, #0]
    1cd8:	2202      	movs	r2, #2
    1cda:	4313      	orrs	r3, r2
    1cdc:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1cde:	4b13      	ldr	r3, [pc, #76]	; (1d2c <system_clock_source_enable+0xa0>)
    1ce0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1ce2:	0019      	movs	r1, r3
    1ce4:	320e      	adds	r2, #14
    1ce6:	68cb      	ldr	r3, [r1, #12]
    1ce8:	421a      	tst	r2, r3
    1cea:	d0fc      	beq.n	1ce6 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1cec:	4a10      	ldr	r2, [pc, #64]	; (1d30 <system_clock_source_enable+0xa4>)
    1cee:	6891      	ldr	r1, [r2, #8]
    1cf0:	4b0e      	ldr	r3, [pc, #56]	; (1d2c <system_clock_source_enable+0xa0>)
    1cf2:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1cf4:	6852      	ldr	r2, [r2, #4]
    1cf6:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1cf8:	2200      	movs	r2, #0
    1cfa:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1cfc:	0019      	movs	r1, r3
    1cfe:	3210      	adds	r2, #16
    1d00:	68cb      	ldr	r3, [r1, #12]
    1d02:	421a      	tst	r2, r3
    1d04:	d0fc      	beq.n	1d00 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1d06:	4b0a      	ldr	r3, [pc, #40]	; (1d30 <system_clock_source_enable+0xa4>)
    1d08:	681b      	ldr	r3, [r3, #0]
    1d0a:	b29b      	uxth	r3, r3
    1d0c:	4a07      	ldr	r2, [pc, #28]	; (1d2c <system_clock_source_enable+0xa0>)
    1d0e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1d10:	2000      	movs	r0, #0
    1d12:	e008      	b.n	1d26 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1d14:	4905      	ldr	r1, [pc, #20]	; (1d2c <system_clock_source_enable+0xa0>)
    1d16:	2244      	movs	r2, #68	; 0x44
    1d18:	5c8b      	ldrb	r3, [r1, r2]
    1d1a:	2002      	movs	r0, #2
    1d1c:	4303      	orrs	r3, r0
    1d1e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1d20:	2000      	movs	r0, #0
		break;
    1d22:	e000      	b.n	1d26 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1d24:	2000      	movs	r0, #0
}
    1d26:	4770      	bx	lr
    1d28:	0000a480 	.word	0x0000a480
    1d2c:	40000800 	.word	0x40000800
    1d30:	20000220 	.word	0x20000220

00001d34 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1d34:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d36:	46d6      	mov	lr, sl
    1d38:	464f      	mov	r7, r9
    1d3a:	4646      	mov	r6, r8
    1d3c:	b5c0      	push	{r6, r7, lr}
    1d3e:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1d40:	22c2      	movs	r2, #194	; 0xc2
    1d42:	00d2      	lsls	r2, r2, #3
    1d44:	4b69      	ldr	r3, [pc, #420]	; (1eec <system_clock_init+0x1b8>)
    1d46:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1d48:	4a69      	ldr	r2, [pc, #420]	; (1ef0 <system_clock_init+0x1bc>)
    1d4a:	6853      	ldr	r3, [r2, #4]
    1d4c:	211e      	movs	r1, #30
    1d4e:	438b      	bics	r3, r1
    1d50:	391a      	subs	r1, #26
    1d52:	430b      	orrs	r3, r1
    1d54:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_5;
    1d56:	2205      	movs	r2, #5
    1d58:	ab01      	add	r3, sp, #4
    1d5a:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1d5c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1d5e:	4d65      	ldr	r5, [pc, #404]	; (1ef4 <system_clock_init+0x1c0>)
    1d60:	b2e0      	uxtb	r0, r4
    1d62:	a901      	add	r1, sp, #4
    1d64:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1d66:	3401      	adds	r4, #1
    1d68:	2c25      	cmp	r4, #37	; 0x25
    1d6a:	d1f9      	bne.n	1d60 <system_clock_init+0x2c>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1d6c:	a80c      	add	r0, sp, #48	; 0x30
    1d6e:	2300      	movs	r3, #0
    1d70:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    1d72:	2280      	movs	r2, #128	; 0x80
    1d74:	0212      	lsls	r2, r2, #8
    1d76:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1d78:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1d7a:	2201      	movs	r2, #1
    1d7c:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1d7e:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1d80:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1d82:	2106      	movs	r1, #6
    1d84:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    1d86:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1d88:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1d8a:	4b5b      	ldr	r3, [pc, #364]	; (1ef8 <system_clock_init+0x1c4>)
    1d8c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1d8e:	2005      	movs	r0, #5
    1d90:	4b5a      	ldr	r3, [pc, #360]	; (1efc <system_clock_init+0x1c8>)
    1d92:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1d94:	4955      	ldr	r1, [pc, #340]	; (1eec <system_clock_init+0x1b8>)
    1d96:	2202      	movs	r2, #2
    1d98:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1d9a:	421a      	tst	r2, r3
    1d9c:	d0fc      	beq.n	1d98 <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1d9e:	4953      	ldr	r1, [pc, #332]	; (1eec <system_clock_init+0x1b8>)
    1da0:	8a8b      	ldrh	r3, [r1, #20]
    1da2:	2280      	movs	r2, #128	; 0x80
    1da4:	4313      	orrs	r3, r2
    1da6:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    1da8:	4c55      	ldr	r4, [pc, #340]	; (1f00 <system_clock_init+0x1cc>)
	SYSCTRL->OSC32K.bit.CALIB =
    1daa:	6823      	ldr	r3, [r4, #0]
    1dac:	04db      	lsls	r3, r3, #19
    1dae:	698a      	ldr	r2, [r1, #24]
    1db0:	0e5b      	lsrs	r3, r3, #25
    1db2:	041b      	lsls	r3, r3, #16
    1db4:	4853      	ldr	r0, [pc, #332]	; (1f04 <system_clock_init+0x1d0>)
    1db6:	4002      	ands	r2, r0
    1db8:	4313      	orrs	r3, r2
    1dba:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    1dbc:	a80a      	add	r0, sp, #40	; 0x28
    1dbe:	2301      	movs	r3, #1
    1dc0:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    1dc2:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    1dc4:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1dc6:	2207      	movs	r2, #7
    1dc8:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    1dca:	2500      	movs	r5, #0
    1dcc:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1dce:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1dd0:	4b4d      	ldr	r3, [pc, #308]	; (1f08 <system_clock_init+0x1d4>)
    1dd2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1dd4:	2004      	movs	r0, #4
    1dd6:	4b49      	ldr	r3, [pc, #292]	; (1efc <system_clock_init+0x1c8>)
    1dd8:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1dda:	ab05      	add	r3, sp, #20
    1ddc:	2200      	movs	r2, #0
    1dde:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1de0:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1de2:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1de4:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1de6:	213f      	movs	r1, #63	; 0x3f
    1de8:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1dea:	393b      	subs	r1, #59	; 0x3b
    1dec:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1dee:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1df0:	6823      	ldr	r3, [r4, #0]
    1df2:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1df4:	2b3f      	cmp	r3, #63	; 0x3f
    1df6:	d100      	bne.n	1dfa <system_clock_init+0xc6>
    1df8:	e075      	b.n	1ee6 <system_clock_init+0x1b2>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1dfa:	a805      	add	r0, sp, #20
    1dfc:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1dfe:	23b7      	movs	r3, #183	; 0xb7
    1e00:	00db      	lsls	r3, r3, #3
    1e02:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1e04:	2307      	movs	r3, #7
    1e06:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1e08:	3338      	adds	r3, #56	; 0x38
    1e0a:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1e0c:	4b3f      	ldr	r3, [pc, #252]	; (1f0c <system_clock_init+0x1d8>)
    1e0e:	4798      	blx	r3
	config->run_in_standby  = false;
    1e10:	a804      	add	r0, sp, #16
    1e12:	2500      	movs	r5, #0
    1e14:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1e16:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1e18:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1e1a:	4b3d      	ldr	r3, [pc, #244]	; (1f10 <system_clock_init+0x1dc>)
    1e1c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1e1e:	2006      	movs	r0, #6
    1e20:	4b36      	ldr	r3, [pc, #216]	; (1efc <system_clock_init+0x1c8>)
    1e22:	4699      	mov	r9, r3
    1e24:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1e26:	4b3b      	ldr	r3, [pc, #236]	; (1f14 <system_clock_init+0x1e0>)
    1e28:	4798      	blx	r3
	config->division_factor    = 1;
    1e2a:	ac01      	add	r4, sp, #4
    1e2c:	2601      	movs	r6, #1
    1e2e:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1e30:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    1e32:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1e34:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1e36:	2305      	movs	r3, #5
    1e38:	7023      	strb	r3, [r4, #0]
    1e3a:	0021      	movs	r1, r4
    1e3c:	2001      	movs	r0, #1
    1e3e:	4b36      	ldr	r3, [pc, #216]	; (1f18 <system_clock_init+0x1e4>)
    1e40:	4698      	mov	r8, r3
    1e42:	4798      	blx	r3
    1e44:	2001      	movs	r0, #1
    1e46:	4f35      	ldr	r7, [pc, #212]	; (1f1c <system_clock_init+0x1e8>)
    1e48:	47b8      	blx	r7
	config->high_when_disabled = false;
    1e4a:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    1e4c:	7265      	strb	r5, [r4, #9]
    1e4e:	2304      	movs	r3, #4
    1e50:	7023      	strb	r3, [r4, #0]
    1e52:	331c      	adds	r3, #28
    1e54:	469a      	mov	sl, r3
    1e56:	6063      	str	r3, [r4, #4]
    1e58:	7226      	strb	r6, [r4, #8]
    1e5a:	0021      	movs	r1, r4
    1e5c:	2002      	movs	r0, #2
    1e5e:	47c0      	blx	r8
    1e60:	2002      	movs	r0, #2
    1e62:	47b8      	blx	r7
	config->division_factor    = 1;
    1e64:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1e66:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1e68:	2306      	movs	r3, #6
    1e6a:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    1e6c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1e6e:	7265      	strb	r5, [r4, #9]
    1e70:	0021      	movs	r1, r4
    1e72:	2003      	movs	r0, #3
    1e74:	47c0      	blx	r8
    1e76:	2003      	movs	r0, #3
    1e78:	47b8      	blx	r7
	config->high_when_disabled = false;
    1e7a:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    1e7c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1e7e:	7265      	strb	r5, [r4, #9]
    1e80:	2303      	movs	r3, #3
    1e82:	7023      	strb	r3, [r4, #0]
    1e84:	4653      	mov	r3, sl
    1e86:	6063      	str	r3, [r4, #4]
    1e88:	0021      	movs	r1, r4
    1e8a:	2004      	movs	r0, #4
    1e8c:	47c0      	blx	r8
    1e8e:	2004      	movs	r0, #4
    1e90:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1e92:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1e94:	0021      	movs	r1, r4
    1e96:	2000      	movs	r0, #0
    1e98:	4b16      	ldr	r3, [pc, #88]	; (1ef4 <system_clock_init+0x1c0>)
    1e9a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1e9c:	2000      	movs	r0, #0
    1e9e:	4b20      	ldr	r3, [pc, #128]	; (1f20 <system_clock_init+0x1ec>)
    1ea0:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1ea2:	2007      	movs	r0, #7
    1ea4:	47c8      	blx	r9
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1ea6:	4911      	ldr	r1, [pc, #68]	; (1eec <system_clock_init+0x1b8>)
    1ea8:	22d0      	movs	r2, #208	; 0xd0
    1eaa:	68cb      	ldr	r3, [r1, #12]
    1eac:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1eae:	2bd0      	cmp	r3, #208	; 0xd0
    1eb0:	d1fb      	bne.n	1eaa <system_clock_init+0x176>
	PM->CPUSEL.reg = (uint32_t)divider;
    1eb2:	4a1c      	ldr	r2, [pc, #112]	; (1f24 <system_clock_init+0x1f0>)
    1eb4:	2300      	movs	r3, #0
    1eb6:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1eb8:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1eba:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1ebc:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1ebe:	a901      	add	r1, sp, #4
    1ec0:	2201      	movs	r2, #1
    1ec2:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1ec4:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1ec6:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1ec8:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1eca:	3307      	adds	r3, #7
    1ecc:	700b      	strb	r3, [r1, #0]
    1ece:	2000      	movs	r0, #0
    1ed0:	4b11      	ldr	r3, [pc, #68]	; (1f18 <system_clock_init+0x1e4>)
    1ed2:	4798      	blx	r3
    1ed4:	2000      	movs	r0, #0
    1ed6:	4b11      	ldr	r3, [pc, #68]	; (1f1c <system_clock_init+0x1e8>)
    1ed8:	4798      	blx	r3
#endif
}
    1eda:	b010      	add	sp, #64	; 0x40
    1edc:	bc1c      	pop	{r2, r3, r4}
    1ede:	4690      	mov	r8, r2
    1ee0:	4699      	mov	r9, r3
    1ee2:	46a2      	mov	sl, r4
    1ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1ee6:	3b20      	subs	r3, #32
    1ee8:	e787      	b.n	1dfa <system_clock_init+0xc6>
    1eea:	46c0      	nop			; (mov r8, r8)
    1eec:	40000800 	.word	0x40000800
    1ef0:	41004000 	.word	0x41004000
    1ef4:	00002161 	.word	0x00002161
    1ef8:	00001b55 	.word	0x00001b55
    1efc:	00001c8d 	.word	0x00001c8d
    1f00:	00806024 	.word	0x00806024
    1f04:	ff80ffff 	.word	0xff80ffff
    1f08:	00001ad9 	.word	0x00001ad9
    1f0c:	00001c0d 	.word	0x00001c0d
    1f10:	00001a9d 	.word	0x00001a9d
    1f14:	00001f29 	.word	0x00001f29
    1f18:	00001f4d 	.word	0x00001f4d
    1f1c:	00002005 	.word	0x00002005
    1f20:	000020d5 	.word	0x000020d5
    1f24:	40000400 	.word	0x40000400

00001f28 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1f28:	4a06      	ldr	r2, [pc, #24]	; (1f44 <system_gclk_init+0x1c>)
    1f2a:	6993      	ldr	r3, [r2, #24]
    1f2c:	2108      	movs	r1, #8
    1f2e:	430b      	orrs	r3, r1
    1f30:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1f32:	2201      	movs	r2, #1
    1f34:	4b04      	ldr	r3, [pc, #16]	; (1f48 <system_gclk_init+0x20>)
    1f36:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1f38:	0019      	movs	r1, r3
    1f3a:	780b      	ldrb	r3, [r1, #0]
    1f3c:	4213      	tst	r3, r2
    1f3e:	d1fc      	bne.n	1f3a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1f40:	4770      	bx	lr
    1f42:	46c0      	nop			; (mov r8, r8)
    1f44:	40000400 	.word	0x40000400
    1f48:	40000c00 	.word	0x40000c00

00001f4c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1f4c:	b570      	push	{r4, r5, r6, lr}
    1f4e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1f50:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1f52:	780d      	ldrb	r5, [r1, #0]
    1f54:	022d      	lsls	r5, r5, #8
    1f56:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1f58:	784b      	ldrb	r3, [r1, #1]
    1f5a:	2b00      	cmp	r3, #0
    1f5c:	d002      	beq.n	1f64 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1f5e:	2380      	movs	r3, #128	; 0x80
    1f60:	02db      	lsls	r3, r3, #11
    1f62:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1f64:	7a4b      	ldrb	r3, [r1, #9]
    1f66:	2b00      	cmp	r3, #0
    1f68:	d002      	beq.n	1f70 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1f6a:	2380      	movs	r3, #128	; 0x80
    1f6c:	031b      	lsls	r3, r3, #12
    1f6e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1f70:	6848      	ldr	r0, [r1, #4]
    1f72:	2801      	cmp	r0, #1
    1f74:	d910      	bls.n	1f98 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1f76:	1e43      	subs	r3, r0, #1
    1f78:	4218      	tst	r0, r3
    1f7a:	d134      	bne.n	1fe6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1f7c:	2802      	cmp	r0, #2
    1f7e:	d930      	bls.n	1fe2 <system_gclk_gen_set_config+0x96>
    1f80:	2302      	movs	r3, #2
    1f82:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1f84:	3201      	adds	r2, #1
						mask <<= 1) {
    1f86:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1f88:	4298      	cmp	r0, r3
    1f8a:	d8fb      	bhi.n	1f84 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1f8c:	0212      	lsls	r2, r2, #8
    1f8e:	4332      	orrs	r2, r6
    1f90:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1f92:	2380      	movs	r3, #128	; 0x80
    1f94:	035b      	lsls	r3, r3, #13
    1f96:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1f98:	7a0b      	ldrb	r3, [r1, #8]
    1f9a:	2b00      	cmp	r3, #0
    1f9c:	d002      	beq.n	1fa4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1f9e:	2380      	movs	r3, #128	; 0x80
    1fa0:	039b      	lsls	r3, r3, #14
    1fa2:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fa4:	4a13      	ldr	r2, [pc, #76]	; (1ff4 <system_gclk_gen_set_config+0xa8>)
    1fa6:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1fa8:	b25b      	sxtb	r3, r3
    1faa:	2b00      	cmp	r3, #0
    1fac:	dbfb      	blt.n	1fa6 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1fae:	4b12      	ldr	r3, [pc, #72]	; (1ff8 <system_gclk_gen_set_config+0xac>)
    1fb0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1fb2:	4b12      	ldr	r3, [pc, #72]	; (1ffc <system_gclk_gen_set_config+0xb0>)
    1fb4:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fb6:	4a0f      	ldr	r2, [pc, #60]	; (1ff4 <system_gclk_gen_set_config+0xa8>)
    1fb8:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1fba:	b25b      	sxtb	r3, r3
    1fbc:	2b00      	cmp	r3, #0
    1fbe:	dbfb      	blt.n	1fb8 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1fc0:	4b0c      	ldr	r3, [pc, #48]	; (1ff4 <system_gclk_gen_set_config+0xa8>)
    1fc2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fc4:	001a      	movs	r2, r3
    1fc6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1fc8:	b25b      	sxtb	r3, r3
    1fca:	2b00      	cmp	r3, #0
    1fcc:	dbfb      	blt.n	1fc6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1fce:	4a09      	ldr	r2, [pc, #36]	; (1ff4 <system_gclk_gen_set_config+0xa8>)
    1fd0:	6853      	ldr	r3, [r2, #4]
    1fd2:	2180      	movs	r1, #128	; 0x80
    1fd4:	0249      	lsls	r1, r1, #9
    1fd6:	400b      	ands	r3, r1
    1fd8:	431d      	orrs	r5, r3
    1fda:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1fdc:	4b08      	ldr	r3, [pc, #32]	; (2000 <STACK_SIZE>)
    1fde:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1fe0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1fe2:	2200      	movs	r2, #0
    1fe4:	e7d2      	b.n	1f8c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1fe6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1fe8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1fea:	2380      	movs	r3, #128	; 0x80
    1fec:	029b      	lsls	r3, r3, #10
    1fee:	431d      	orrs	r5, r3
    1ff0:	e7d2      	b.n	1f98 <system_gclk_gen_set_config+0x4c>
    1ff2:	46c0      	nop			; (mov r8, r8)
    1ff4:	40000c00 	.word	0x40000c00
    1ff8:	00000805 	.word	0x00000805
    1ffc:	40000c08 	.word	0x40000c08
    2000:	00000845 	.word	0x00000845

00002004 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2004:	b510      	push	{r4, lr}
    2006:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2008:	4a0b      	ldr	r2, [pc, #44]	; (2038 <system_gclk_gen_enable+0x34>)
    200a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    200c:	b25b      	sxtb	r3, r3
    200e:	2b00      	cmp	r3, #0
    2010:	dbfb      	blt.n	200a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2012:	4b0a      	ldr	r3, [pc, #40]	; (203c <system_gclk_gen_enable+0x38>)
    2014:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2016:	4b0a      	ldr	r3, [pc, #40]	; (2040 <system_gclk_gen_enable+0x3c>)
    2018:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    201a:	4a07      	ldr	r2, [pc, #28]	; (2038 <system_gclk_gen_enable+0x34>)
    201c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    201e:	b25b      	sxtb	r3, r3
    2020:	2b00      	cmp	r3, #0
    2022:	dbfb      	blt.n	201c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2024:	4a04      	ldr	r2, [pc, #16]	; (2038 <system_gclk_gen_enable+0x34>)
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	2380      	movs	r3, #128	; 0x80
    202a:	025b      	lsls	r3, r3, #9
    202c:	430b      	orrs	r3, r1
    202e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2030:	4b04      	ldr	r3, [pc, #16]	; (2044 <system_gclk_gen_enable+0x40>)
    2032:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2034:	bd10      	pop	{r4, pc}
    2036:	46c0      	nop			; (mov r8, r8)
    2038:	40000c00 	.word	0x40000c00
    203c:	00000805 	.word	0x00000805
    2040:	40000c04 	.word	0x40000c04
    2044:	00000845 	.word	0x00000845

00002048 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2048:	b570      	push	{r4, r5, r6, lr}
    204a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    204c:	4a1a      	ldr	r2, [pc, #104]	; (20b8 <system_gclk_gen_get_hz+0x70>)
    204e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2050:	b25b      	sxtb	r3, r3
    2052:	2b00      	cmp	r3, #0
    2054:	dbfb      	blt.n	204e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2056:	4b19      	ldr	r3, [pc, #100]	; (20bc <system_gclk_gen_get_hz+0x74>)
    2058:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    205a:	4b19      	ldr	r3, [pc, #100]	; (20c0 <system_gclk_gen_get_hz+0x78>)
    205c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    205e:	4a16      	ldr	r2, [pc, #88]	; (20b8 <system_gclk_gen_get_hz+0x70>)
    2060:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2062:	b25b      	sxtb	r3, r3
    2064:	2b00      	cmp	r3, #0
    2066:	dbfb      	blt.n	2060 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2068:	4e13      	ldr	r6, [pc, #76]	; (20b8 <system_gclk_gen_get_hz+0x70>)
    206a:	6870      	ldr	r0, [r6, #4]
    206c:	04c0      	lsls	r0, r0, #19
    206e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2070:	4b14      	ldr	r3, [pc, #80]	; (20c4 <system_gclk_gen_get_hz+0x7c>)
    2072:	4798      	blx	r3
    2074:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2076:	4b12      	ldr	r3, [pc, #72]	; (20c0 <system_gclk_gen_get_hz+0x78>)
    2078:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    207a:	6876      	ldr	r6, [r6, #4]
    207c:	02f6      	lsls	r6, r6, #11
    207e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2080:	4b11      	ldr	r3, [pc, #68]	; (20c8 <system_gclk_gen_get_hz+0x80>)
    2082:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2084:	4a0c      	ldr	r2, [pc, #48]	; (20b8 <system_gclk_gen_get_hz+0x70>)
    2086:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2088:	b25b      	sxtb	r3, r3
    208a:	2b00      	cmp	r3, #0
    208c:	dbfb      	blt.n	2086 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    208e:	4b0a      	ldr	r3, [pc, #40]	; (20b8 <system_gclk_gen_get_hz+0x70>)
    2090:	689c      	ldr	r4, [r3, #8]
    2092:	0224      	lsls	r4, r4, #8
    2094:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2096:	4b0d      	ldr	r3, [pc, #52]	; (20cc <system_gclk_gen_get_hz+0x84>)
    2098:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    209a:	2e00      	cmp	r6, #0
    209c:	d107      	bne.n	20ae <system_gclk_gen_get_hz+0x66>
    209e:	2c01      	cmp	r4, #1
    20a0:	d907      	bls.n	20b2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    20a2:	0021      	movs	r1, r4
    20a4:	0028      	movs	r0, r5
    20a6:	4b0a      	ldr	r3, [pc, #40]	; (20d0 <system_gclk_gen_get_hz+0x88>)
    20a8:	4798      	blx	r3
    20aa:	0005      	movs	r5, r0
    20ac:	e001      	b.n	20b2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    20ae:	3401      	adds	r4, #1
    20b0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    20b2:	0028      	movs	r0, r5
    20b4:	bd70      	pop	{r4, r5, r6, pc}
    20b6:	46c0      	nop			; (mov r8, r8)
    20b8:	40000c00 	.word	0x40000c00
    20bc:	00000805 	.word	0x00000805
    20c0:	40000c04 	.word	0x40000c04
    20c4:	00001a0d 	.word	0x00001a0d
    20c8:	40000c08 	.word	0x40000c08
    20cc:	00000845 	.word	0x00000845
    20d0:	00007891 	.word	0x00007891

000020d4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    20d4:	b510      	push	{r4, lr}
    20d6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    20d8:	4b06      	ldr	r3, [pc, #24]	; (20f4 <system_gclk_chan_enable+0x20>)
    20da:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    20dc:	4b06      	ldr	r3, [pc, #24]	; (20f8 <system_gclk_chan_enable+0x24>)
    20de:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    20e0:	4a06      	ldr	r2, [pc, #24]	; (20fc <system_gclk_chan_enable+0x28>)
    20e2:	8853      	ldrh	r3, [r2, #2]
    20e4:	2180      	movs	r1, #128	; 0x80
    20e6:	01c9      	lsls	r1, r1, #7
    20e8:	430b      	orrs	r3, r1
    20ea:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    20ec:	4b04      	ldr	r3, [pc, #16]	; (2100 <system_gclk_chan_enable+0x2c>)
    20ee:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    20f0:	bd10      	pop	{r4, pc}
    20f2:	46c0      	nop			; (mov r8, r8)
    20f4:	00000805 	.word	0x00000805
    20f8:	40000c02 	.word	0x40000c02
    20fc:	40000c00 	.word	0x40000c00
    2100:	00000845 	.word	0x00000845

00002104 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2104:	b510      	push	{r4, lr}
    2106:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2108:	4b0f      	ldr	r3, [pc, #60]	; (2148 <system_gclk_chan_disable+0x44>)
    210a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    210c:	4b0f      	ldr	r3, [pc, #60]	; (214c <system_gclk_chan_disable+0x48>)
    210e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2110:	4a0f      	ldr	r2, [pc, #60]	; (2150 <system_gclk_chan_disable+0x4c>)
    2112:	8853      	ldrh	r3, [r2, #2]
    2114:	051b      	lsls	r3, r3, #20
    2116:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2118:	8853      	ldrh	r3, [r2, #2]
    211a:	490e      	ldr	r1, [pc, #56]	; (2154 <system_gclk_chan_disable+0x50>)
    211c:	400b      	ands	r3, r1
    211e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2120:	8853      	ldrh	r3, [r2, #2]
    2122:	490d      	ldr	r1, [pc, #52]	; (2158 <system_gclk_chan_disable+0x54>)
    2124:	400b      	ands	r3, r1
    2126:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2128:	0011      	movs	r1, r2
    212a:	2280      	movs	r2, #128	; 0x80
    212c:	01d2      	lsls	r2, r2, #7
    212e:	884b      	ldrh	r3, [r1, #2]
    2130:	4213      	tst	r3, r2
    2132:	d1fc      	bne.n	212e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2134:	4906      	ldr	r1, [pc, #24]	; (2150 <system_gclk_chan_disable+0x4c>)
    2136:	884a      	ldrh	r2, [r1, #2]
    2138:	0203      	lsls	r3, r0, #8
    213a:	4806      	ldr	r0, [pc, #24]	; (2154 <system_gclk_chan_disable+0x50>)
    213c:	4002      	ands	r2, r0
    213e:	4313      	orrs	r3, r2
    2140:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2142:	4b06      	ldr	r3, [pc, #24]	; (215c <system_gclk_chan_disable+0x58>)
    2144:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2146:	bd10      	pop	{r4, pc}
    2148:	00000805 	.word	0x00000805
    214c:	40000c02 	.word	0x40000c02
    2150:	40000c00 	.word	0x40000c00
    2154:	fffff0ff 	.word	0xfffff0ff
    2158:	ffffbfff 	.word	0xffffbfff
    215c:	00000845 	.word	0x00000845

00002160 <system_gclk_chan_set_config>:
{
    2160:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2162:	780c      	ldrb	r4, [r1, #0]
    2164:	0224      	lsls	r4, r4, #8
    2166:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2168:	4b02      	ldr	r3, [pc, #8]	; (2174 <system_gclk_chan_set_config+0x14>)
    216a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    216c:	b2a4      	uxth	r4, r4
    216e:	4b02      	ldr	r3, [pc, #8]	; (2178 <system_gclk_chan_set_config+0x18>)
    2170:	805c      	strh	r4, [r3, #2]
}
    2172:	bd10      	pop	{r4, pc}
    2174:	00002105 	.word	0x00002105
    2178:	40000c00 	.word	0x40000c00

0000217c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    217c:	b510      	push	{r4, lr}
    217e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2180:	4b06      	ldr	r3, [pc, #24]	; (219c <system_gclk_chan_get_hz+0x20>)
    2182:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2184:	4b06      	ldr	r3, [pc, #24]	; (21a0 <system_gclk_chan_get_hz+0x24>)
    2186:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2188:	4b06      	ldr	r3, [pc, #24]	; (21a4 <system_gclk_chan_get_hz+0x28>)
    218a:	885c      	ldrh	r4, [r3, #2]
    218c:	0524      	lsls	r4, r4, #20
    218e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2190:	4b05      	ldr	r3, [pc, #20]	; (21a8 <system_gclk_chan_get_hz+0x2c>)
    2192:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2194:	0020      	movs	r0, r4
    2196:	4b05      	ldr	r3, [pc, #20]	; (21ac <system_gclk_chan_get_hz+0x30>)
    2198:	4798      	blx	r3
}
    219a:	bd10      	pop	{r4, pc}
    219c:	00000805 	.word	0x00000805
    21a0:	40000c02 	.word	0x40000c02
    21a4:	40000c00 	.word	0x40000c00
    21a8:	00000845 	.word	0x00000845
    21ac:	00002049 	.word	0x00002049

000021b0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    21b0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    21b2:	78d3      	ldrb	r3, [r2, #3]
    21b4:	2b00      	cmp	r3, #0
    21b6:	d135      	bne.n	2224 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    21b8:	7813      	ldrb	r3, [r2, #0]
    21ba:	2b80      	cmp	r3, #128	; 0x80
    21bc:	d029      	beq.n	2212 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    21be:	061b      	lsls	r3, r3, #24
    21c0:	2480      	movs	r4, #128	; 0x80
    21c2:	0264      	lsls	r4, r4, #9
    21c4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    21c6:	7854      	ldrb	r4, [r2, #1]
    21c8:	2502      	movs	r5, #2
    21ca:	43ac      	bics	r4, r5
    21cc:	d106      	bne.n	21dc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    21ce:	7894      	ldrb	r4, [r2, #2]
    21d0:	2c00      	cmp	r4, #0
    21d2:	d120      	bne.n	2216 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    21d4:	2480      	movs	r4, #128	; 0x80
    21d6:	02a4      	lsls	r4, r4, #10
    21d8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    21da:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    21dc:	7854      	ldrb	r4, [r2, #1]
    21de:	3c01      	subs	r4, #1
    21e0:	2c01      	cmp	r4, #1
    21e2:	d91c      	bls.n	221e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    21e4:	040d      	lsls	r5, r1, #16
    21e6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    21e8:	24a0      	movs	r4, #160	; 0xa0
    21ea:	05e4      	lsls	r4, r4, #23
    21ec:	432c      	orrs	r4, r5
    21ee:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    21f0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    21f2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    21f4:	24d0      	movs	r4, #208	; 0xd0
    21f6:	0624      	lsls	r4, r4, #24
    21f8:	432c      	orrs	r4, r5
    21fa:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    21fc:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    21fe:	78d4      	ldrb	r4, [r2, #3]
    2200:	2c00      	cmp	r4, #0
    2202:	d122      	bne.n	224a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2204:	035b      	lsls	r3, r3, #13
    2206:	d51c      	bpl.n	2242 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2208:	7893      	ldrb	r3, [r2, #2]
    220a:	2b01      	cmp	r3, #1
    220c:	d01e      	beq.n	224c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    220e:	6141      	str	r1, [r0, #20]
    2210:	e017      	b.n	2242 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2212:	2300      	movs	r3, #0
    2214:	e7d7      	b.n	21c6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2216:	24c0      	movs	r4, #192	; 0xc0
    2218:	02e4      	lsls	r4, r4, #11
    221a:	4323      	orrs	r3, r4
    221c:	e7dd      	b.n	21da <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    221e:	4c0d      	ldr	r4, [pc, #52]	; (2254 <_system_pinmux_config+0xa4>)
    2220:	4023      	ands	r3, r4
    2222:	e7df      	b.n	21e4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2224:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2226:	040c      	lsls	r4, r1, #16
    2228:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    222a:	23a0      	movs	r3, #160	; 0xa0
    222c:	05db      	lsls	r3, r3, #23
    222e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2230:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2232:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2234:	23d0      	movs	r3, #208	; 0xd0
    2236:	061b      	lsls	r3, r3, #24
    2238:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    223a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    223c:	78d3      	ldrb	r3, [r2, #3]
    223e:	2b00      	cmp	r3, #0
    2240:	d103      	bne.n	224a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2242:	7853      	ldrb	r3, [r2, #1]
    2244:	3b01      	subs	r3, #1
    2246:	2b01      	cmp	r3, #1
    2248:	d902      	bls.n	2250 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    224a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    224c:	6181      	str	r1, [r0, #24]
    224e:	e7f8      	b.n	2242 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2250:	6081      	str	r1, [r0, #8]
}
    2252:	e7fa      	b.n	224a <_system_pinmux_config+0x9a>
    2254:	fffbffff 	.word	0xfffbffff

00002258 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2258:	b510      	push	{r4, lr}
    225a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    225c:	09c1      	lsrs	r1, r0, #7
		return NULL;
    225e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2260:	2900      	cmp	r1, #0
    2262:	d104      	bne.n	226e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2264:	0943      	lsrs	r3, r0, #5
    2266:	01db      	lsls	r3, r3, #7
    2268:	4905      	ldr	r1, [pc, #20]	; (2280 <system_pinmux_pin_set_config+0x28>)
    226a:	468c      	mov	ip, r1
    226c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    226e:	241f      	movs	r4, #31
    2270:	4020      	ands	r0, r4
    2272:	2101      	movs	r1, #1
    2274:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2276:	0018      	movs	r0, r3
    2278:	4b02      	ldr	r3, [pc, #8]	; (2284 <system_pinmux_pin_set_config+0x2c>)
    227a:	4798      	blx	r3
}
    227c:	bd10      	pop	{r4, pc}
    227e:	46c0      	nop			; (mov r8, r8)
    2280:	41004400 	.word	0x41004400
    2284:	000021b1 	.word	0x000021b1

00002288 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2288:	4770      	bx	lr
	...

0000228c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    228c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    228e:	4b05      	ldr	r3, [pc, #20]	; (22a4 <system_init+0x18>)
    2290:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2292:	4b05      	ldr	r3, [pc, #20]	; (22a8 <system_init+0x1c>)
    2294:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2296:	4b05      	ldr	r3, [pc, #20]	; (22ac <system_init+0x20>)
    2298:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    229a:	4b05      	ldr	r3, [pc, #20]	; (22b0 <system_init+0x24>)
    229c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    229e:	4b05      	ldr	r3, [pc, #20]	; (22b4 <system_init+0x28>)
    22a0:	4798      	blx	r3
}
    22a2:	bd10      	pop	{r4, pc}
    22a4:	00001d35 	.word	0x00001d35
    22a8:	00000875 	.word	0x00000875
    22ac:	00002289 	.word	0x00002289
    22b0:	00000a21 	.word	0x00000a21
    22b4:	00002289 	.word	0x00002289

000022b8 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    22b8:	1c93      	adds	r3, r2, #2
    22ba:	009b      	lsls	r3, r3, #2
    22bc:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    22be:	2a02      	cmp	r2, #2
    22c0:	d009      	beq.n	22d6 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    22c2:	2a03      	cmp	r2, #3
    22c4:	d00c      	beq.n	22e0 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    22c6:	2301      	movs	r3, #1
    22c8:	4093      	lsls	r3, r2
    22ca:	001a      	movs	r2, r3
    22cc:	7e03      	ldrb	r3, [r0, #24]
    22ce:	4313      	orrs	r3, r2
    22d0:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    22d2:	2000      	movs	r0, #0
    22d4:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    22d6:	7e03      	ldrb	r3, [r0, #24]
    22d8:	2210      	movs	r2, #16
    22da:	4313      	orrs	r3, r2
    22dc:	7603      	strb	r3, [r0, #24]
    22de:	e7f8      	b.n	22d2 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    22e0:	7e03      	ldrb	r3, [r0, #24]
    22e2:	2220      	movs	r2, #32
    22e4:	4313      	orrs	r3, r2
    22e6:	7603      	strb	r3, [r0, #24]
    22e8:	e7f3      	b.n	22d2 <tc_register_callback+0x1a>
	...

000022ec <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    22ec:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    22ee:	0080      	lsls	r0, r0, #2
    22f0:	4b16      	ldr	r3, [pc, #88]	; (234c <_tc_interrupt_handler+0x60>)
    22f2:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    22f4:	6823      	ldr	r3, [r4, #0]
    22f6:	7b9d      	ldrb	r5, [r3, #14]
    22f8:	7e22      	ldrb	r2, [r4, #24]
    22fa:	7e63      	ldrb	r3, [r4, #25]
    22fc:	4013      	ands	r3, r2
    22fe:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    2300:	07eb      	lsls	r3, r5, #31
    2302:	d406      	bmi.n	2312 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    2304:	07ab      	lsls	r3, r5, #30
    2306:	d40b      	bmi.n	2320 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2308:	06eb      	lsls	r3, r5, #27
    230a:	d410      	bmi.n	232e <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    230c:	06ab      	lsls	r3, r5, #26
    230e:	d415      	bmi.n	233c <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    2310:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    2312:	0020      	movs	r0, r4
    2314:	68a3      	ldr	r3, [r4, #8]
    2316:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2318:	2301      	movs	r3, #1
    231a:	6822      	ldr	r2, [r4, #0]
    231c:	7393      	strb	r3, [r2, #14]
    231e:	e7f1      	b.n	2304 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    2320:	0020      	movs	r0, r4
    2322:	68e3      	ldr	r3, [r4, #12]
    2324:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2326:	2302      	movs	r3, #2
    2328:	6822      	ldr	r2, [r4, #0]
    232a:	7393      	strb	r3, [r2, #14]
    232c:	e7ec      	b.n	2308 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    232e:	0020      	movs	r0, r4
    2330:	6923      	ldr	r3, [r4, #16]
    2332:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    2334:	2310      	movs	r3, #16
    2336:	6822      	ldr	r2, [r4, #0]
    2338:	7393      	strb	r3, [r2, #14]
    233a:	e7e7      	b.n	230c <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    233c:	0020      	movs	r0, r4
    233e:	6963      	ldr	r3, [r4, #20]
    2340:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    2342:	6823      	ldr	r3, [r4, #0]
    2344:	2220      	movs	r2, #32
    2346:	739a      	strb	r2, [r3, #14]
}
    2348:	e7e2      	b.n	2310 <_tc_interrupt_handler+0x24>
    234a:	46c0      	nop			; (mov r8, r8)
    234c:	20001614 	.word	0x20001614

00002350 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    2350:	b510      	push	{r4, lr}
    2352:	2000      	movs	r0, #0
    2354:	4b01      	ldr	r3, [pc, #4]	; (235c <TC3_Handler+0xc>)
    2356:	4798      	blx	r3
    2358:	bd10      	pop	{r4, pc}
    235a:	46c0      	nop			; (mov r8, r8)
    235c:	000022ed 	.word	0x000022ed

00002360 <TC4_Handler>:
    2360:	b510      	push	{r4, lr}
    2362:	2001      	movs	r0, #1
    2364:	4b01      	ldr	r3, [pc, #4]	; (236c <TC4_Handler+0xc>)
    2366:	4798      	blx	r3
    2368:	bd10      	pop	{r4, pc}
    236a:	46c0      	nop			; (mov r8, r8)
    236c:	000022ed 	.word	0x000022ed

00002370 <TC5_Handler>:
    2370:	b510      	push	{r4, lr}
    2372:	2002      	movs	r0, #2
    2374:	4b01      	ldr	r3, [pc, #4]	; (237c <TC5_Handler+0xc>)
    2376:	4798      	blx	r3
    2378:	bd10      	pop	{r4, pc}
    237a:	46c0      	nop			; (mov r8, r8)
    237c:	000022ed 	.word	0x000022ed

00002380 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    2380:	b530      	push	{r4, r5, lr}
    2382:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2384:	aa01      	add	r2, sp, #4
    2386:	4b0b      	ldr	r3, [pc, #44]	; (23b4 <_tc_get_inst_index+0x34>)
    2388:	cb32      	ldmia	r3!, {r1, r4, r5}
    238a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    238c:	9b01      	ldr	r3, [sp, #4]
    238e:	4298      	cmp	r0, r3
    2390:	d00d      	beq.n	23ae <_tc_get_inst_index+0x2e>
    2392:	9b02      	ldr	r3, [sp, #8]
    2394:	4298      	cmp	r0, r3
    2396:	d008      	beq.n	23aa <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    2398:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    239a:	9a03      	ldr	r2, [sp, #12]
    239c:	4282      	cmp	r2, r0
    239e:	d002      	beq.n	23a6 <_tc_get_inst_index+0x26>
}
    23a0:	0018      	movs	r0, r3
    23a2:	b005      	add	sp, #20
    23a4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    23a6:	3302      	adds	r3, #2
    23a8:	e002      	b.n	23b0 <_tc_get_inst_index+0x30>
    23aa:	2301      	movs	r3, #1
    23ac:	e000      	b.n	23b0 <_tc_get_inst_index+0x30>
    23ae:	2300      	movs	r3, #0
			return i;
    23b0:	b2db      	uxtb	r3, r3
    23b2:	e7f5      	b.n	23a0 <_tc_get_inst_index+0x20>
    23b4:	0000a4a4 	.word	0x0000a4a4

000023b8 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    23b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    23ba:	b087      	sub	sp, #28
    23bc:	0004      	movs	r4, r0
    23be:	000d      	movs	r5, r1
    23c0:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    23c2:	0008      	movs	r0, r1
    23c4:	4b85      	ldr	r3, [pc, #532]	; (25dc <tc_init+0x224>)
    23c6:	4798      	blx	r3
    23c8:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    23ca:	ab05      	add	r3, sp, #20
    23cc:	221b      	movs	r2, #27
    23ce:	701a      	strb	r2, [r3, #0]
    23d0:	3201      	adds	r2, #1
    23d2:	705a      	strb	r2, [r3, #1]
    23d4:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    23d6:	ab03      	add	r3, sp, #12
    23d8:	2280      	movs	r2, #128	; 0x80
    23da:	0112      	lsls	r2, r2, #4
    23dc:	801a      	strh	r2, [r3, #0]
    23de:	2280      	movs	r2, #128	; 0x80
    23e0:	0152      	lsls	r2, r2, #5
    23e2:	805a      	strh	r2, [r3, #2]
    23e4:	2280      	movs	r2, #128	; 0x80
    23e6:	0192      	lsls	r2, r2, #6
    23e8:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    23ea:	2300      	movs	r3, #0
    23ec:	60a3      	str	r3, [r4, #8]
    23ee:	60e3      	str	r3, [r4, #12]
    23f0:	6123      	str	r3, [r4, #16]
    23f2:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    23f4:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    23f6:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    23f8:	0082      	lsls	r2, r0, #2
    23fa:	4b79      	ldr	r3, [pc, #484]	; (25e0 <tc_init+0x228>)
    23fc:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    23fe:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2400:	78b3      	ldrb	r3, [r6, #2]
    2402:	2b08      	cmp	r3, #8
    2404:	d006      	beq.n	2414 <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    2406:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2408:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    240a:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    240c:	07db      	lsls	r3, r3, #31
    240e:	d505      	bpl.n	241c <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    2410:	b007      	add	sp, #28
    2412:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    2414:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2416:	07fa      	lsls	r2, r7, #31
    2418:	d5fa      	bpl.n	2410 <tc_init+0x58>
    241a:	e7f4      	b.n	2406 <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    241c:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    241e:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2420:	06db      	lsls	r3, r3, #27
    2422:	d4f5      	bmi.n	2410 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    2424:	882b      	ldrh	r3, [r5, #0]
    2426:	079b      	lsls	r3, r3, #30
    2428:	d4f2      	bmi.n	2410 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    242a:	7c33      	ldrb	r3, [r6, #16]
    242c:	2b00      	cmp	r3, #0
    242e:	d179      	bne.n	2524 <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    2430:	7f33      	ldrb	r3, [r6, #28]
    2432:	2b00      	cmp	r3, #0
    2434:	d000      	beq.n	2438 <tc_init+0x80>
    2436:	e081      	b.n	253c <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    2438:	496a      	ldr	r1, [pc, #424]	; (25e4 <tc_init+0x22c>)
    243a:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    243c:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    243e:	ab03      	add	r3, sp, #12
    2440:	5ad3      	ldrh	r3, [r2, r3]
    2442:	4303      	orrs	r3, r0
    2444:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    2446:	78b3      	ldrb	r3, [r6, #2]
    2448:	2b08      	cmp	r3, #8
    244a:	d100      	bne.n	244e <tc_init+0x96>
    244c:	e086      	b.n	255c <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    244e:	a901      	add	r1, sp, #4
    2450:	7833      	ldrb	r3, [r6, #0]
    2452:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    2454:	ab05      	add	r3, sp, #20
    2456:	5ddf      	ldrb	r7, [r3, r7]
    2458:	0038      	movs	r0, r7
    245a:	4b63      	ldr	r3, [pc, #396]	; (25e8 <tc_init+0x230>)
    245c:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    245e:	0038      	movs	r0, r7
    2460:	4b62      	ldr	r3, [pc, #392]	; (25ec <tc_init+0x234>)
    2462:	4798      	blx	r3
	ctrla_tmp =
    2464:	8931      	ldrh	r1, [r6, #8]
    2466:	88b3      	ldrh	r3, [r6, #4]
    2468:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    246a:	78b1      	ldrb	r1, [r6, #2]
    246c:	79b2      	ldrb	r2, [r6, #6]
    246e:	4311      	orrs	r1, r2
	ctrla_tmp =
    2470:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    2472:	7873      	ldrb	r3, [r6, #1]
    2474:	2b00      	cmp	r3, #0
    2476:	d002      	beq.n	247e <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    2478:	2380      	movs	r3, #128	; 0x80
    247a:	011b      	lsls	r3, r3, #4
    247c:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    247e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2480:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2482:	b25b      	sxtb	r3, r3
    2484:	2b00      	cmp	r3, #0
    2486:	dbfb      	blt.n	2480 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    2488:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    248a:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    248c:	1e4b      	subs	r3, r1, #1
    248e:	4199      	sbcs	r1, r3
    2490:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    2492:	7bb3      	ldrb	r3, [r6, #14]
    2494:	2b00      	cmp	r3, #0
    2496:	d001      	beq.n	249c <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    2498:	2301      	movs	r3, #1
    249a:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    249c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    249e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    24a0:	b25b      	sxtb	r3, r3
    24a2:	2b00      	cmp	r3, #0
    24a4:	dbfb      	blt.n	249e <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    24a6:	23ff      	movs	r3, #255	; 0xff
    24a8:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    24aa:	2900      	cmp	r1, #0
    24ac:	d005      	beq.n	24ba <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    24ae:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    24b0:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    24b2:	b25b      	sxtb	r3, r3
    24b4:	2b00      	cmp	r3, #0
    24b6:	dbfb      	blt.n	24b0 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    24b8:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    24ba:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    24bc:	7af3      	ldrb	r3, [r6, #11]
    24be:	2b00      	cmp	r3, #0
    24c0:	d001      	beq.n	24c6 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    24c2:	2310      	movs	r3, #16
    24c4:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    24c6:	7b33      	ldrb	r3, [r6, #12]
    24c8:	2b00      	cmp	r3, #0
    24ca:	d001      	beq.n	24d0 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    24cc:	2320      	movs	r3, #32
    24ce:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    24d0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    24d2:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    24d4:	b25b      	sxtb	r3, r3
    24d6:	2b00      	cmp	r3, #0
    24d8:	dbfb      	blt.n	24d2 <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    24da:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    24dc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    24de:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    24e0:	b25b      	sxtb	r3, r3
    24e2:	2b00      	cmp	r3, #0
    24e4:	dbfb      	blt.n	24de <tc_init+0x126>
	switch (module_inst->counter_size) {
    24e6:	7923      	ldrb	r3, [r4, #4]
    24e8:	2b04      	cmp	r3, #4
    24ea:	d03f      	beq.n	256c <tc_init+0x1b4>
    24ec:	2b08      	cmp	r3, #8
    24ee:	d05e      	beq.n	25ae <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    24f0:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    24f2:	2b00      	cmp	r3, #0
    24f4:	d000      	beq.n	24f8 <tc_init+0x140>
    24f6:	e78b      	b.n	2410 <tc_init+0x58>
    24f8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    24fa:	b25b      	sxtb	r3, r3
    24fc:	2b00      	cmp	r3, #0
    24fe:	dbfb      	blt.n	24f8 <tc_init+0x140>
				= config->counter_16_bit.value;
    2500:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    2502:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2504:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2506:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2508:	b25b      	sxtb	r3, r3
    250a:	2b00      	cmp	r3, #0
    250c:	dbfb      	blt.n	2506 <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    250e:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    2510:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2512:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2514:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2516:	b25b      	sxtb	r3, r3
    2518:	2b00      	cmp	r3, #0
    251a:	dbfb      	blt.n	2514 <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    251c:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    251e:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    2520:	2000      	movs	r0, #0
    2522:	e775      	b.n	2410 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2524:	a902      	add	r1, sp, #8
    2526:	2301      	movs	r3, #1
    2528:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    252a:	2200      	movs	r2, #0
    252c:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    252e:	7e32      	ldrb	r2, [r6, #24]
    2530:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2532:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2534:	7d30      	ldrb	r0, [r6, #20]
    2536:	4b2e      	ldr	r3, [pc, #184]	; (25f0 <tc_init+0x238>)
    2538:	4798      	blx	r3
    253a:	e779      	b.n	2430 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    253c:	a902      	add	r1, sp, #8
    253e:	2301      	movs	r3, #1
    2540:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2542:	2200      	movs	r2, #0
    2544:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    2546:	3224      	adds	r2, #36	; 0x24
    2548:	18b2      	adds	r2, r6, r2
    254a:	7812      	ldrb	r2, [r2, #0]
    254c:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    254e:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2550:	331f      	adds	r3, #31
    2552:	18f3      	adds	r3, r6, r3
    2554:	7818      	ldrb	r0, [r3, #0]
    2556:	4b26      	ldr	r3, [pc, #152]	; (25f0 <tc_init+0x238>)
    2558:	4798      	blx	r3
    255a:	e76d      	b.n	2438 <tc_init+0x80>
    255c:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    255e:	1c7a      	adds	r2, r7, #1
    2560:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2562:	ab03      	add	r3, sp, #12
    2564:	5ad3      	ldrh	r3, [r2, r3]
    2566:	4303      	orrs	r3, r0
    2568:	620b      	str	r3, [r1, #32]
    256a:	e770      	b.n	244e <tc_init+0x96>
    256c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    256e:	b25b      	sxtb	r3, r3
    2570:	2b00      	cmp	r3, #0
    2572:	dbfb      	blt.n	256c <tc_init+0x1b4>
					config->counter_8_bit.value;
    2574:	2328      	movs	r3, #40	; 0x28
    2576:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    2578:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    257a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    257c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    257e:	b25b      	sxtb	r3, r3
    2580:	2b00      	cmp	r3, #0
    2582:	dbfb      	blt.n	257c <tc_init+0x1c4>
					config->counter_8_bit.period;
    2584:	2329      	movs	r3, #41	; 0x29
    2586:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    2588:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    258a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    258c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    258e:	b25b      	sxtb	r3, r3
    2590:	2b00      	cmp	r3, #0
    2592:	dbfb      	blt.n	258c <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    2594:	232a      	movs	r3, #42	; 0x2a
    2596:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    2598:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    259a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    259c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    259e:	b25b      	sxtb	r3, r3
    25a0:	2b00      	cmp	r3, #0
    25a2:	dbfb      	blt.n	259c <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    25a4:	232b      	movs	r3, #43	; 0x2b
    25a6:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    25a8:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    25aa:	2000      	movs	r0, #0
    25ac:	e730      	b.n	2410 <tc_init+0x58>
    25ae:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    25b0:	b25b      	sxtb	r3, r3
    25b2:	2b00      	cmp	r3, #0
    25b4:	dbfb      	blt.n	25ae <tc_init+0x1f6>
				= config->counter_32_bit.value;
    25b6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    25b8:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25ba:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25bc:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    25be:	b25b      	sxtb	r3, r3
    25c0:	2b00      	cmp	r3, #0
    25c2:	dbfb      	blt.n	25bc <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    25c4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    25c6:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25c8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25ca:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    25cc:	b25b      	sxtb	r3, r3
    25ce:	2b00      	cmp	r3, #0
    25d0:	dbfb      	blt.n	25ca <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    25d2:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    25d4:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    25d6:	2000      	movs	r0, #0
    25d8:	e71a      	b.n	2410 <tc_init+0x58>
    25da:	46c0      	nop			; (mov r8, r8)
    25dc:	00002381 	.word	0x00002381
    25e0:	20001614 	.word	0x20001614
    25e4:	40000400 	.word	0x40000400
    25e8:	00002161 	.word	0x00002161
    25ec:	000020d5 	.word	0x000020d5
    25f0:	00002259 	.word	0x00002259

000025f4 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    25f4:	6802      	ldr	r2, [r0, #0]
    25f6:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    25f8:	b25b      	sxtb	r3, r3
    25fa:	2b00      	cmp	r3, #0
    25fc:	dbfb      	blt.n	25f6 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    25fe:	7903      	ldrb	r3, [r0, #4]
    2600:	2b04      	cmp	r3, #4
    2602:	d005      	beq.n	2610 <tc_get_count_value+0x1c>
    2604:	2b08      	cmp	r3, #8
    2606:	d009      	beq.n	261c <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    2608:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    260a:	2b00      	cmp	r3, #0
    260c:	d003      	beq.n	2616 <tc_get_count_value+0x22>
}
    260e:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    2610:	7c10      	ldrb	r0, [r2, #16]
    2612:	b2c0      	uxtb	r0, r0
    2614:	e7fb      	b.n	260e <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    2616:	8a10      	ldrh	r0, [r2, #16]
    2618:	b280      	uxth	r0, r0
    261a:	e7f8      	b.n	260e <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    261c:	6910      	ldr	r0, [r2, #16]
    261e:	e7f6      	b.n	260e <tc_get_count_value+0x1a>

00002620 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    2620:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    2622:	6804      	ldr	r4, [r0, #0]
    2624:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    2626:	b25b      	sxtb	r3, r3
    2628:	2b00      	cmp	r3, #0
    262a:	dbfb      	blt.n	2624 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    262c:	7903      	ldrb	r3, [r0, #4]
    262e:	2b04      	cmp	r3, #4
    2630:	d005      	beq.n	263e <tc_set_compare_value+0x1e>
    2632:	2b08      	cmp	r3, #8
    2634:	d014      	beq.n	2660 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    2636:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    2638:	2b00      	cmp	r3, #0
    263a:	d008      	beq.n	264e <tc_set_compare_value+0x2e>
}
    263c:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    263e:	2017      	movs	r0, #23
			if (channel_index <
    2640:	2901      	cmp	r1, #1
    2642:	d8fb      	bhi.n	263c <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    2644:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    2646:	1861      	adds	r1, r4, r1
    2648:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    264a:	2000      	movs	r0, #0
    264c:	e7f6      	b.n	263c <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    264e:	2017      	movs	r0, #23
			if (channel_index <
    2650:	2901      	cmp	r1, #1
    2652:	d8f3      	bhi.n	263c <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    2654:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    2656:	310c      	adds	r1, #12
    2658:	0049      	lsls	r1, r1, #1
    265a:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    265c:	2000      	movs	r0, #0
    265e:	e7ed      	b.n	263c <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    2660:	2017      	movs	r0, #23
			if (channel_index <
    2662:	2901      	cmp	r1, #1
    2664:	d8ea      	bhi.n	263c <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    2666:	3106      	adds	r1, #6
    2668:	0089      	lsls	r1, r1, #2
    266a:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    266c:	2000      	movs	r0, #0
    266e:	e7e5      	b.n	263c <tc_set_compare_value+0x1c>

00002670 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2670:	e7fe      	b.n	2670 <Dummy_Handler>
	...

00002674 <Reset_Handler>:
{
    2674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2676:	4a2a      	ldr	r2, [pc, #168]	; (2720 <Reset_Handler+0xac>)
    2678:	4b2a      	ldr	r3, [pc, #168]	; (2724 <Reset_Handler+0xb0>)
    267a:	429a      	cmp	r2, r3
    267c:	d011      	beq.n	26a2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    267e:	001a      	movs	r2, r3
    2680:	4b29      	ldr	r3, [pc, #164]	; (2728 <Reset_Handler+0xb4>)
    2682:	429a      	cmp	r2, r3
    2684:	d20d      	bcs.n	26a2 <Reset_Handler+0x2e>
    2686:	4a29      	ldr	r2, [pc, #164]	; (272c <Reset_Handler+0xb8>)
    2688:	3303      	adds	r3, #3
    268a:	1a9b      	subs	r3, r3, r2
    268c:	089b      	lsrs	r3, r3, #2
    268e:	3301      	adds	r3, #1
    2690:	009b      	lsls	r3, r3, #2
    2692:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2694:	4823      	ldr	r0, [pc, #140]	; (2724 <Reset_Handler+0xb0>)
    2696:	4922      	ldr	r1, [pc, #136]	; (2720 <Reset_Handler+0xac>)
    2698:	588c      	ldr	r4, [r1, r2]
    269a:	5084      	str	r4, [r0, r2]
    269c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    269e:	429a      	cmp	r2, r3
    26a0:	d1fa      	bne.n	2698 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    26a2:	4a23      	ldr	r2, [pc, #140]	; (2730 <Reset_Handler+0xbc>)
    26a4:	4b23      	ldr	r3, [pc, #140]	; (2734 <Reset_Handler+0xc0>)
    26a6:	429a      	cmp	r2, r3
    26a8:	d20a      	bcs.n	26c0 <Reset_Handler+0x4c>
    26aa:	43d3      	mvns	r3, r2
    26ac:	4921      	ldr	r1, [pc, #132]	; (2734 <Reset_Handler+0xc0>)
    26ae:	185b      	adds	r3, r3, r1
    26b0:	2103      	movs	r1, #3
    26b2:	438b      	bics	r3, r1
    26b4:	3304      	adds	r3, #4
    26b6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    26b8:	2100      	movs	r1, #0
    26ba:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    26bc:	4293      	cmp	r3, r2
    26be:	d1fc      	bne.n	26ba <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    26c0:	4a1d      	ldr	r2, [pc, #116]	; (2738 <Reset_Handler+0xc4>)
    26c2:	21ff      	movs	r1, #255	; 0xff
    26c4:	4b1d      	ldr	r3, [pc, #116]	; (273c <Reset_Handler+0xc8>)
    26c6:	438b      	bics	r3, r1
    26c8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    26ca:	39fd      	subs	r1, #253	; 0xfd
    26cc:	2390      	movs	r3, #144	; 0x90
    26ce:	005b      	lsls	r3, r3, #1
    26d0:	4a1b      	ldr	r2, [pc, #108]	; (2740 <Reset_Handler+0xcc>)
    26d2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    26d4:	4a1b      	ldr	r2, [pc, #108]	; (2744 <Reset_Handler+0xd0>)
    26d6:	78d3      	ldrb	r3, [r2, #3]
    26d8:	2503      	movs	r5, #3
    26da:	43ab      	bics	r3, r5
    26dc:	2402      	movs	r4, #2
    26de:	4323      	orrs	r3, r4
    26e0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    26e2:	78d3      	ldrb	r3, [r2, #3]
    26e4:	270c      	movs	r7, #12
    26e6:	43bb      	bics	r3, r7
    26e8:	2608      	movs	r6, #8
    26ea:	4333      	orrs	r3, r6
    26ec:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    26ee:	4b16      	ldr	r3, [pc, #88]	; (2748 <Reset_Handler+0xd4>)
    26f0:	7b98      	ldrb	r0, [r3, #14]
    26f2:	2230      	movs	r2, #48	; 0x30
    26f4:	4390      	bics	r0, r2
    26f6:	2220      	movs	r2, #32
    26f8:	4310      	orrs	r0, r2
    26fa:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    26fc:	7b99      	ldrb	r1, [r3, #14]
    26fe:	43b9      	bics	r1, r7
    2700:	4331      	orrs	r1, r6
    2702:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2704:	7b9a      	ldrb	r2, [r3, #14]
    2706:	43aa      	bics	r2, r5
    2708:	4322      	orrs	r2, r4
    270a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    270c:	4a0f      	ldr	r2, [pc, #60]	; (274c <Reset_Handler+0xd8>)
    270e:	6853      	ldr	r3, [r2, #4]
    2710:	2180      	movs	r1, #128	; 0x80
    2712:	430b      	orrs	r3, r1
    2714:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2716:	4b0e      	ldr	r3, [pc, #56]	; (2750 <Reset_Handler+0xdc>)
    2718:	4798      	blx	r3
        main();
    271a:	4b0e      	ldr	r3, [pc, #56]	; (2754 <Reset_Handler+0xe0>)
    271c:	4798      	blx	r3
    271e:	e7fe      	b.n	271e <Reset_Handler+0xaa>
    2720:	0000a928 	.word	0x0000a928
    2724:	20000000 	.word	0x20000000
    2728:	200001dc 	.word	0x200001dc
    272c:	20000004 	.word	0x20000004
    2730:	200001dc 	.word	0x200001dc
    2734:	20001734 	.word	0x20001734
    2738:	e000ed00 	.word	0xe000ed00
    273c:	00000000 	.word	0x00000000
    2740:	41007000 	.word	0x41007000
    2744:	41005000 	.word	0x41005000
    2748:	41004800 	.word	0x41004800
    274c:	41004000 	.word	0x41004000
    2750:	00004e01 	.word	0x00004e01
    2754:	00004cf1 	.word	0x00004cf1

00002758 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2758:	b5f0      	push	{r4, r5, r6, r7, lr}
    275a:	46c6      	mov	lr, r8
    275c:	b500      	push	{lr}
    275e:	000c      	movs	r4, r1
    2760:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2762:	2800      	cmp	r0, #0
    2764:	d10f      	bne.n	2786 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    2766:	2a00      	cmp	r2, #0
    2768:	dd11      	ble.n	278e <_read+0x36>
    276a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    276c:	4e09      	ldr	r6, [pc, #36]	; (2794 <_read+0x3c>)
    276e:	4d0a      	ldr	r5, [pc, #40]	; (2798 <_read+0x40>)
    2770:	6830      	ldr	r0, [r6, #0]
    2772:	0021      	movs	r1, r4
    2774:	682b      	ldr	r3, [r5, #0]
    2776:	4798      	blx	r3
		ptr++;
    2778:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    277a:	42bc      	cmp	r4, r7
    277c:	d1f8      	bne.n	2770 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    277e:	4640      	mov	r0, r8
    2780:	bc04      	pop	{r2}
    2782:	4690      	mov	r8, r2
    2784:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    2786:	2301      	movs	r3, #1
    2788:	425b      	negs	r3, r3
    278a:	4698      	mov	r8, r3
    278c:	e7f7      	b.n	277e <_read+0x26>
	for (; len > 0; --len) {
    278e:	4680      	mov	r8, r0
    2790:	e7f5      	b.n	277e <_read+0x26>
    2792:	46c0      	nop			; (mov r8, r8)
    2794:	20001628 	.word	0x20001628
    2798:	20001620 	.word	0x20001620

0000279c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    279c:	b5f0      	push	{r4, r5, r6, r7, lr}
    279e:	46c6      	mov	lr, r8
    27a0:	b500      	push	{lr}
    27a2:	000e      	movs	r6, r1
    27a4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    27a6:	3801      	subs	r0, #1
    27a8:	2802      	cmp	r0, #2
    27aa:	d810      	bhi.n	27ce <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    27ac:	2a00      	cmp	r2, #0
    27ae:	d011      	beq.n	27d4 <_write+0x38>
    27b0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    27b2:	4b0c      	ldr	r3, [pc, #48]	; (27e4 <_write+0x48>)
    27b4:	4698      	mov	r8, r3
    27b6:	4f0c      	ldr	r7, [pc, #48]	; (27e8 <_write+0x4c>)
    27b8:	4643      	mov	r3, r8
    27ba:	6818      	ldr	r0, [r3, #0]
    27bc:	5d31      	ldrb	r1, [r6, r4]
    27be:	683b      	ldr	r3, [r7, #0]
    27c0:	4798      	blx	r3
    27c2:	2800      	cmp	r0, #0
    27c4:	db08      	blt.n	27d8 <_write+0x3c>
			return -1;
		}
		++nChars;
    27c6:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    27c8:	42a5      	cmp	r5, r4
    27ca:	d1f5      	bne.n	27b8 <_write+0x1c>
    27cc:	e006      	b.n	27dc <_write+0x40>
		return -1;
    27ce:	2401      	movs	r4, #1
    27d0:	4264      	negs	r4, r4
    27d2:	e003      	b.n	27dc <_write+0x40>
	for (; len != 0; --len) {
    27d4:	0014      	movs	r4, r2
    27d6:	e001      	b.n	27dc <_write+0x40>
			return -1;
    27d8:	2401      	movs	r4, #1
    27da:	4264      	negs	r4, r4
	}
	return nChars;
}
    27dc:	0020      	movs	r0, r4
    27de:	bc04      	pop	{r2}
    27e0:	4690      	mov	r8, r2
    27e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27e4:	20001628 	.word	0x20001628
    27e8:	20001624 	.word	0x20001624

000027ec <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    27ec:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    27ee:	4a06      	ldr	r2, [pc, #24]	; (2808 <_sbrk+0x1c>)
    27f0:	6812      	ldr	r2, [r2, #0]
    27f2:	2a00      	cmp	r2, #0
    27f4:	d004      	beq.n	2800 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    27f6:	4a04      	ldr	r2, [pc, #16]	; (2808 <_sbrk+0x1c>)
    27f8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    27fa:	18c3      	adds	r3, r0, r3
    27fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    27fe:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2800:	4902      	ldr	r1, [pc, #8]	; (280c <_sbrk+0x20>)
    2802:	4a01      	ldr	r2, [pc, #4]	; (2808 <_sbrk+0x1c>)
    2804:	6011      	str	r1, [r2, #0]
    2806:	e7f6      	b.n	27f6 <_sbrk+0xa>
    2808:	20000238 	.word	0x20000238
    280c:	20003738 	.word	0x20003738

00002810 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2810:	2001      	movs	r0, #1
    2812:	4240      	negs	r0, r0
    2814:	4770      	bx	lr

00002816 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2816:	2380      	movs	r3, #128	; 0x80
    2818:	019b      	lsls	r3, r3, #6
    281a:	604b      	str	r3, [r1, #4]

	return 0;
}
    281c:	2000      	movs	r0, #0
    281e:	4770      	bx	lr

00002820 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2820:	2001      	movs	r0, #1
    2822:	4770      	bx	lr

00002824 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2824:	2000      	movs	r0, #0
    2826:	4770      	bx	lr

00002828 <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    2828:	b510      	push	{r4, lr}
	nwkIb.nwkSeqNum = 0;
    282a:	4a0d      	ldr	r2, [pc, #52]	; (2860 <NWK_Init+0x38>)
    282c:	2300      	movs	r3, #0
    282e:	7113      	strb	r3, [r2, #4]
	nwkIb.macSeqNum = 0;
    2830:	7153      	strb	r3, [r2, #5]
	nwkIb.addr = 0;
    2832:	8013      	strh	r3, [r2, #0]
	nwkIb.lock = 0;
    2834:	2158      	movs	r1, #88	; 0x58
    2836:	5253      	strh	r3, [r2, r1]
    2838:	0013      	movs	r3, r2
    283a:	3240      	adds	r2, #64	; 0x40

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    283c:	2100      	movs	r1, #0
    283e:	6099      	str	r1, [r3, #8]
    2840:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    2842:	4293      	cmp	r3, r2
    2844:	d1fb      	bne.n	283e <NWK_Init+0x16>
	}

	nwkTxInit();
    2846:	4b07      	ldr	r3, [pc, #28]	; (2864 <NWK_Init+0x3c>)
    2848:	4798      	blx	r3
	nwkRxInit();
    284a:	4b07      	ldr	r3, [pc, #28]	; (2868 <NWK_Init+0x40>)
    284c:	4798      	blx	r3
	nwkFrameInit();
    284e:	4b07      	ldr	r3, [pc, #28]	; (286c <NWK_Init+0x44>)
    2850:	4798      	blx	r3
	nwkDataReqInit();
    2852:	4b07      	ldr	r3, [pc, #28]	; (2870 <NWK_Init+0x48>)
    2854:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    2856:	4b07      	ldr	r3, [pc, #28]	; (2874 <NWK_Init+0x4c>)
    2858:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    285a:	4b07      	ldr	r3, [pc, #28]	; (2878 <NWK_Init+0x50>)
    285c:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
    285e:	bd10      	pop	{r4, pc}
    2860:	2000162c 	.word	0x2000162c
    2864:	000036e9 	.word	0x000036e9
    2868:	00002f41 	.word	0x00002f41
    286c:	00002a59 	.word	0x00002a59
    2870:	00002915 	.word	0x00002915
    2874:	00002b51 	.word	0x00002b51
    2878:	000033c9 	.word	0x000033c9

0000287c <NWK_SetAddr>:
/*************************************************************************//**
*  @brief Sets network address of the node
*  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
    287c:	b510      	push	{r4, lr}
	nwkIb.addr = addr;
    287e:	4b02      	ldr	r3, [pc, #8]	; (2888 <NWK_SetAddr+0xc>)
    2880:	8018      	strh	r0, [r3, #0]
	PHY_SetShortAddr(addr);
    2882:	4b02      	ldr	r3, [pc, #8]	; (288c <NWK_SetAddr+0x10>)
    2884:	4798      	blx	r3
}
    2886:	bd10      	pop	{r4, pc}
    2888:	2000162c 	.word	0x2000162c
    288c:	00003b09 	.word	0x00003b09

00002890 <NWK_SetPanId>:
/*************************************************************************//**
*  @brief Sets network identifier (PAN) of the node
*  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
    2890:	b510      	push	{r4, lr}
	nwkIb.panId = panId;
    2892:	4b02      	ldr	r3, [pc, #8]	; (289c <NWK_SetPanId+0xc>)
    2894:	8058      	strh	r0, [r3, #2]
	PHY_SetPanId(panId);
    2896:	4b02      	ldr	r3, [pc, #8]	; (28a0 <NWK_SetPanId+0x10>)
    2898:	4798      	blx	r3
}
    289a:	bd10      	pop	{r4, pc}
    289c:	2000162c 	.word	0x2000162c
    28a0:	00003ae9 	.word	0x00003ae9

000028a4 <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    28a4:	3002      	adds	r0, #2
    28a6:	0080      	lsls	r0, r0, #2
    28a8:	4b01      	ldr	r3, [pc, #4]	; (28b0 <NWK_OpenEndpoint+0xc>)
    28aa:	50c1      	str	r1, [r0, r3]
}
    28ac:	4770      	bx	lr
    28ae:	46c0      	nop			; (mov r8, r8)
    28b0:	2000162c 	.word	0x2000162c

000028b4 <NWK_TaskHandler>:

/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
    28b4:	b510      	push	{r4, lr}
	nwkRxTaskHandler();
    28b6:	4b04      	ldr	r3, [pc, #16]	; (28c8 <NWK_TaskHandler+0x14>)
    28b8:	4798      	blx	r3
	nwkTxTaskHandler();
    28ba:	4b04      	ldr	r3, [pc, #16]	; (28cc <NWK_TaskHandler+0x18>)
    28bc:	4798      	blx	r3
	nwkDataReqTaskHandler();
    28be:	4b04      	ldr	r3, [pc, #16]	; (28d0 <NWK_TaskHandler+0x1c>)
    28c0:	4798      	blx	r3
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
    28c2:	4b04      	ldr	r3, [pc, #16]	; (28d4 <NWK_TaskHandler+0x20>)
    28c4:	4798      	blx	r3
#endif
}
    28c6:	bd10      	pop	{r4, pc}
    28c8:	00002fe1 	.word	0x00002fe1
    28cc:	000038e5 	.word	0x000038e5
    28d0:	00002921 	.word	0x00002921
    28d4:	000034a9 	.word	0x000034a9

000028d8 <nwkDataReqTxConf>:
/*************************************************************************//**
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
    28d8:	b510      	push	{r4, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    28da:	4b0c      	ldr	r3, [pc, #48]	; (290c <nwkDataReqTxConf+0x34>)
    28dc:	681b      	ldr	r3, [r3, #0]
    28de:	2b00      	cmp	r3, #0
    28e0:	d010      	beq.n	2904 <nwkDataReqTxConf+0x2c>
		if (req->frame == frame) {
    28e2:	685a      	ldr	r2, [r3, #4]
    28e4:	4290      	cmp	r0, r2
    28e6:	d005      	beq.n	28f4 <nwkDataReqTxConf+0x1c>
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    28e8:	681b      	ldr	r3, [r3, #0]
    28ea:	2b00      	cmp	r3, #0
    28ec:	d00a      	beq.n	2904 <nwkDataReqTxConf+0x2c>
		if (req->frame == frame) {
    28ee:	685a      	ldr	r2, [r3, #4]
    28f0:	4282      	cmp	r2, r0
    28f2:	d1f9      	bne.n	28e8 <nwkDataReqTxConf+0x10>
			req->status = frame->tx.status;
    28f4:	2285      	movs	r2, #133	; 0x85
    28f6:	5c82      	ldrb	r2, [r0, r2]
    28f8:	771a      	strb	r2, [r3, #28]
			req->control = frame->tx.control;
    28fa:	2288      	movs	r2, #136	; 0x88
    28fc:	5c82      	ldrb	r2, [r0, r2]
    28fe:	775a      	strb	r2, [r3, #29]
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
    2900:	2202      	movs	r2, #2
    2902:	721a      	strb	r2, [r3, #8]
			break;
		}
	}

	nwkFrameFree(frame);
    2904:	4b02      	ldr	r3, [pc, #8]	; (2910 <nwkDataReqTxConf+0x38>)
    2906:	4798      	blx	r3
}
    2908:	bd10      	pop	{r4, pc}
    290a:	46c0      	nop			; (mov r8, r8)
    290c:	2000023c 	.word	0x2000023c
    2910:	00002ae1 	.word	0x00002ae1

00002914 <nwkDataReqInit>:
	nwkDataReqQueue = NULL;
    2914:	2200      	movs	r2, #0
    2916:	4b01      	ldr	r3, [pc, #4]	; (291c <nwkDataReqInit+0x8>)
    2918:	601a      	str	r2, [r3, #0]
}
    291a:	4770      	bx	lr
    291c:	2000023c 	.word	0x2000023c

00002920 <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    2920:	b570      	push	{r4, r5, r6, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2922:	4b47      	ldr	r3, [pc, #284]	; (2a40 <nwkDataReqTaskHandler+0x120>)
    2924:	681a      	ldr	r2, [r3, #0]
    2926:	2a00      	cmp	r2, #0
    2928:	d100      	bne.n	292c <nwkDataReqTaskHandler+0xc>
    292a:	e088      	b.n	2a3e <nwkDataReqTaskHandler+0x11e>
    292c:	0014      	movs	r4, r2
		switch (req->state) {
    292e:	7a23      	ldrb	r3, [r4, #8]
    2930:	2b00      	cmp	r3, #0
    2932:	d005      	beq.n	2940 <nwkDataReqTaskHandler+0x20>
    2934:	2b02      	cmp	r3, #2
    2936:	d06e      	beq.n	2a16 <nwkDataReqTaskHandler+0xf6>
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2938:	6824      	ldr	r4, [r4, #0]
    293a:	2c00      	cmp	r4, #0
    293c:	d1f7      	bne.n	292e <nwkDataReqTaskHandler+0xe>
    293e:	e07e      	b.n	2a3e <nwkDataReqTaskHandler+0x11e>
	if (NULL == (frame = nwkFrameAlloc())) {
    2940:	4b40      	ldr	r3, [pc, #256]	; (2a44 <nwkDataReqTaskHandler+0x124>)
    2942:	4798      	blx	r3
    2944:	1e05      	subs	r5, r0, #0
    2946:	d062      	beq.n	2a0e <nwkDataReqTaskHandler+0xee>
	req->frame = frame;
    2948:	6060      	str	r0, [r4, #4]
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    294a:	2001      	movs	r0, #1
    294c:	7220      	strb	r0, [r4, #8]
	frame->tx.confirm = nwkDataReqTxConf;
    294e:	4b3e      	ldr	r3, [pc, #248]	; (2a48 <nwkDataReqTaskHandler+0x128>)
    2950:	2289      	movs	r2, #137	; 0x89
    2952:	54ab      	strb	r3, [r5, r2]
    2954:	0a19      	lsrs	r1, r3, #8
    2956:	002a      	movs	r2, r5
    2958:	3289      	adds	r2, #137	; 0x89
    295a:	7051      	strb	r1, [r2, #1]
    295c:	0c19      	lsrs	r1, r3, #16
    295e:	7091      	strb	r1, [r2, #2]
    2960:	0e1b      	lsrs	r3, r3, #24
    2962:	70d3      	strb	r3, [r2, #3]
			: 0;
    2964:	7ba2      	ldrb	r2, [r4, #14]
    2966:	0892      	lsrs	r2, r2, #2
    2968:	2301      	movs	r3, #1
    296a:	401a      	ands	r2, r3
	frame->tx.control = req->options &
    296c:	2188      	movs	r1, #136	; 0x88
    296e:	546a      	strb	r2, [r5, r1]
			NWK_OPT_ACK_REQUEST ? 1 : 0;
    2970:	7ba1      	ldrb	r1, [r4, #14]
	frame->header.nwkFcf.ackRequest = req->options &
    2972:	4019      	ands	r1, r3
    2974:	7aea      	ldrb	r2, [r5, #11]
    2976:	4382      	bics	r2, r0
    2978:	430a      	orrs	r2, r1
    297a:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_LINK_LOCAL ? 1 : 0;
    297c:	7ba2      	ldrb	r2, [r4, #14]
    297e:	08d2      	lsrs	r2, r2, #3
	frame->header.nwkFcf.linkLocal = req->options &
    2980:	401a      	ands	r2, r3
    2982:	0092      	lsls	r2, r2, #2
    2984:	7ae9      	ldrb	r1, [r5, #11]
    2986:	3003      	adds	r0, #3
    2988:	4381      	bics	r1, r0
    298a:	430a      	orrs	r2, r1
    298c:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_ENABLE_SECURITY ? 1 : 0;
    298e:	7ba2      	ldrb	r2, [r4, #14]
    2990:	0852      	lsrs	r2, r2, #1
	frame->header.nwkFcf.security = req->options &
    2992:	4013      	ands	r3, r2
    2994:	005b      	lsls	r3, r3, #1
    2996:	7aea      	ldrb	r2, [r5, #11]
    2998:	2102      	movs	r1, #2
    299a:	438a      	bics	r2, r1
    299c:	4313      	orrs	r3, r2
    299e:	72eb      	strb	r3, [r5, #11]
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    29a0:	4a2a      	ldr	r2, [pc, #168]	; (2a4c <nwkDataReqTaskHandler+0x12c>)
    29a2:	7913      	ldrb	r3, [r2, #4]
    29a4:	3301      	adds	r3, #1
    29a6:	b2db      	uxtb	r3, r3
    29a8:	7113      	strb	r3, [r2, #4]
    29aa:	732b      	strb	r3, [r5, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    29ac:	7813      	ldrb	r3, [r2, #0]
    29ae:	736b      	strb	r3, [r5, #13]
    29b0:	7853      	ldrb	r3, [r2, #1]
    29b2:	73ab      	strb	r3, [r5, #14]
	frame->header.nwkDstAddr = req->dstAddr;
    29b4:	8963      	ldrh	r3, [r4, #10]
    29b6:	7aa2      	ldrb	r2, [r4, #10]
    29b8:	73ea      	strb	r2, [r5, #15]
    29ba:	0a1b      	lsrs	r3, r3, #8
    29bc:	742b      	strb	r3, [r5, #16]
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
    29be:	7b61      	ldrb	r1, [r4, #13]
    29c0:	230f      	movs	r3, #15
    29c2:	4019      	ands	r1, r3
    29c4:	7c6a      	ldrb	r2, [r5, #17]
    29c6:	300b      	adds	r0, #11
    29c8:	4382      	bics	r2, r0
    29ca:	430a      	orrs	r2, r1
    29cc:	746a      	strb	r2, [r5, #17]
	frame->header.nwkDstEndpoint = req->dstEndpoint;
    29ce:	7b22      	ldrb	r2, [r4, #12]
    29d0:	0112      	lsls	r2, r2, #4
    29d2:	7c69      	ldrb	r1, [r5, #17]
    29d4:	400b      	ands	r3, r1
    29d6:	4313      	orrs	r3, r2
    29d8:	746b      	strb	r3, [r5, #17]
	memcpy(frame->payload, req->data, req->size);
    29da:	2381      	movs	r3, #129	; 0x81
    29dc:	5ce8      	ldrb	r0, [r5, r3]
    29de:	3301      	adds	r3, #1
    29e0:	5ceb      	ldrb	r3, [r5, r3]
    29e2:	021b      	lsls	r3, r3, #8
    29e4:	4303      	orrs	r3, r0
    29e6:	2283      	movs	r2, #131	; 0x83
    29e8:	5ca8      	ldrb	r0, [r5, r2]
    29ea:	0400      	lsls	r0, r0, #16
    29ec:	4303      	orrs	r3, r0
    29ee:	3201      	adds	r2, #1
    29f0:	5ca8      	ldrb	r0, [r5, r2]
    29f2:	0600      	lsls	r0, r0, #24
    29f4:	4318      	orrs	r0, r3
    29f6:	7d22      	ldrb	r2, [r4, #20]
    29f8:	6921      	ldr	r1, [r4, #16]
    29fa:	4b15      	ldr	r3, [pc, #84]	; (2a50 <nwkDataReqTaskHandler+0x130>)
    29fc:	4798      	blx	r3
	frame->size += req->size;
    29fe:	786b      	ldrb	r3, [r5, #1]
    2a00:	7d22      	ldrb	r2, [r4, #20]
    2a02:	189b      	adds	r3, r3, r2
    2a04:	706b      	strb	r3, [r5, #1]
	nwkTxFrame(frame);
    2a06:	0028      	movs	r0, r5
    2a08:	4b12      	ldr	r3, [pc, #72]	; (2a54 <nwkDataReqTaskHandler+0x134>)
    2a0a:	4798      	blx	r3
    2a0c:	e017      	b.n	2a3e <nwkDataReqTaskHandler+0x11e>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
    2a0e:	2302      	movs	r3, #2
    2a10:	7223      	strb	r3, [r4, #8]
		req->status = NWK_OUT_OF_MEMORY_STATUS;
    2a12:	7723      	strb	r3, [r4, #28]
    2a14:	e013      	b.n	2a3e <nwkDataReqTaskHandler+0x11e>
	if (nwkDataReqQueue == req) {
    2a16:	42a2      	cmp	r2, r4
    2a18:	d104      	bne.n	2a24 <nwkDataReqTaskHandler+0x104>
		nwkDataReqQueue = nwkDataReqQueue->next;
    2a1a:	4b09      	ldr	r3, [pc, #36]	; (2a40 <nwkDataReqTaskHandler+0x120>)
    2a1c:	6822      	ldr	r2, [r4, #0]
    2a1e:	601a      	str	r2, [r3, #0]
    2a20:	e005      	b.n	2a2e <nwkDataReqTaskHandler+0x10e>
			prev = prev->next;
    2a22:	001a      	movs	r2, r3
		while (prev->next != req) {
    2a24:	6813      	ldr	r3, [r2, #0]
    2a26:	429c      	cmp	r4, r3
    2a28:	d1fb      	bne.n	2a22 <nwkDataReqTaskHandler+0x102>
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
    2a2a:	6823      	ldr	r3, [r4, #0]
    2a2c:	6013      	str	r3, [r2, #0]
	nwkIb.lock--;
    2a2e:	4907      	ldr	r1, [pc, #28]	; (2a4c <nwkDataReqTaskHandler+0x12c>)
    2a30:	2258      	movs	r2, #88	; 0x58
    2a32:	5a8b      	ldrh	r3, [r1, r2]
    2a34:	3b01      	subs	r3, #1
    2a36:	528b      	strh	r3, [r1, r2]
	req->confirm(req);
    2a38:	69a3      	ldr	r3, [r4, #24]
    2a3a:	0020      	movs	r0, r4
    2a3c:	4798      	blx	r3

		default:
			break;
		}
	}
}
    2a3e:	bd70      	pop	{r4, r5, r6, pc}
    2a40:	2000023c 	.word	0x2000023c
    2a44:	00002a6d 	.word	0x00002a6d
    2a48:	000028d9 	.word	0x000028d9
    2a4c:	2000162c 	.word	0x2000162c
    2a50:	00004e49 	.word	0x00004e49
    2a54:	0000371d 	.word	0x0000371d

00002a58 <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    2a58:	4b03      	ldr	r3, [pc, #12]	; (2a68 <nwkFrameInit+0x10>)
    2a5a:	2200      	movs	r2, #0
    2a5c:	701a      	strb	r2, [r3, #0]
    2a5e:	218d      	movs	r1, #141	; 0x8d
    2a60:	545a      	strb	r2, [r3, r1]
    2a62:	318d      	adds	r1, #141	; 0x8d
    2a64:	545a      	strb	r2, [r3, r1]
	}
}
    2a66:	4770      	bx	lr
    2a68:	20000240 	.word	0x20000240

00002a6c <nwkFrameAlloc>:
/*************************************************************************//**
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
    2a6c:	b570      	push	{r4, r5, r6, lr}
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    2a6e:	4b19      	ldr	r3, [pc, #100]	; (2ad4 <nwkFrameAlloc+0x68>)
    2a70:	781b      	ldrb	r3, [r3, #0]
    2a72:	2b00      	cmp	r3, #0
    2a74:	d010      	beq.n	2a98 <nwkFrameAlloc+0x2c>
    2a76:	238d      	movs	r3, #141	; 0x8d
    2a78:	4a16      	ldr	r2, [pc, #88]	; (2ad4 <nwkFrameAlloc+0x68>)
    2a7a:	5cd3      	ldrb	r3, [r2, r3]
    2a7c:	2b00      	cmp	r3, #0
    2a7e:	d009      	beq.n	2a94 <nwkFrameAlloc+0x28>
    2a80:	238d      	movs	r3, #141	; 0x8d
    2a82:	005b      	lsls	r3, r3, #1
    2a84:	5cd3      	ldrb	r3, [r2, r3]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
    2a86:	2400      	movs	r4, #0
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    2a88:	2b00      	cmp	r3, #0
    2a8a:	d001      	beq.n	2a90 <nwkFrameAlloc+0x24>
}
    2a8c:	0020      	movs	r0, r4
    2a8e:	bd70      	pop	{r4, r5, r6, pc}
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    2a90:	3302      	adds	r3, #2
    2a92:	e002      	b.n	2a9a <nwkFrameAlloc+0x2e>
    2a94:	2301      	movs	r3, #1
    2a96:	e000      	b.n	2a9a <nwkFrameAlloc+0x2e>
    2a98:	2300      	movs	r3, #0
    2a9a:	268d      	movs	r6, #141	; 0x8d
    2a9c:	435e      	muls	r6, r3
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    2a9e:	4d0d      	ldr	r5, [pc, #52]	; (2ad4 <nwkFrameAlloc+0x68>)
    2aa0:	19ac      	adds	r4, r5, r6
    2aa2:	228d      	movs	r2, #141	; 0x8d
    2aa4:	2100      	movs	r1, #0
    2aa6:	0020      	movs	r0, r4
    2aa8:	4b0b      	ldr	r3, [pc, #44]	; (2ad8 <nwkFrameAlloc+0x6c>)
    2aaa:	4798      	blx	r3
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    2aac:	2310      	movs	r3, #16
    2aae:	7063      	strb	r3, [r4, #1]
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
    2ab0:	0033      	movs	r3, r6
    2ab2:	3312      	adds	r3, #18
    2ab4:	18eb      	adds	r3, r5, r3
    2ab6:	0022      	movs	r2, r4
    2ab8:	3281      	adds	r2, #129	; 0x81
    2aba:	7013      	strb	r3, [r2, #0]
    2abc:	0a19      	lsrs	r1, r3, #8
    2abe:	7051      	strb	r1, [r2, #1]
    2ac0:	0c19      	lsrs	r1, r3, #16
    2ac2:	7091      	strb	r1, [r2, #2]
    2ac4:	0e1b      	lsrs	r3, r3, #24
    2ac6:	70d3      	strb	r3, [r2, #3]
			nwkIb.lock++;
    2ac8:	4904      	ldr	r1, [pc, #16]	; (2adc <nwkFrameAlloc+0x70>)
    2aca:	2258      	movs	r2, #88	; 0x58
    2acc:	5a8b      	ldrh	r3, [r1, r2]
    2ace:	3301      	adds	r3, #1
    2ad0:	528b      	strh	r3, [r1, r2]
			return &nwkFrameFrames[i];
    2ad2:	e7db      	b.n	2a8c <nwkFrameAlloc+0x20>
    2ad4:	20000240 	.word	0x20000240
    2ad8:	00004e5b 	.word	0x00004e5b
    2adc:	2000162c 	.word	0x2000162c

00002ae0 <nwkFrameFree>:
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
	frame->state = NWK_FRAME_STATE_FREE;
    2ae0:	2300      	movs	r3, #0
    2ae2:	7003      	strb	r3, [r0, #0]
	nwkIb.lock--;
    2ae4:	4902      	ldr	r1, [pc, #8]	; (2af0 <nwkFrameFree+0x10>)
    2ae6:	2258      	movs	r2, #88	; 0x58
    2ae8:	5a8b      	ldrh	r3, [r1, r2]
    2aea:	3b01      	subs	r3, #1
    2aec:	528b      	strh	r3, [r1, r2]
}
    2aee:	4770      	bx	lr
    2af0:	2000162c 	.word	0x2000162c

00002af4 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    2af4:	2800      	cmp	r0, #0
    2af6:	d012      	beq.n	2b1e <nwkFrameNext+0x2a>
		frame = nwkFrameFrames;
	} else {
		frame++;
    2af8:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2afa:	4b0c      	ldr	r3, [pc, #48]	; (2b2c <nwkFrameNext+0x38>)
    2afc:	33a8      	adds	r3, #168	; 0xa8
    2afe:	33ff      	adds	r3, #255	; 0xff
    2b00:	4298      	cmp	r0, r3
    2b02:	d210      	bcs.n	2b26 <nwkFrameNext+0x32>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2b04:	7803      	ldrb	r3, [r0, #0]
    2b06:	2b00      	cmp	r3, #0
    2b08:	d10c      	bne.n	2b24 <nwkFrameNext+0x30>
	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2b0a:	4a08      	ldr	r2, [pc, #32]	; (2b2c <nwkFrameNext+0x38>)
    2b0c:	32a8      	adds	r2, #168	; 0xa8
    2b0e:	32ff      	adds	r2, #255	; 0xff
    2b10:	308d      	adds	r0, #141	; 0x8d
    2b12:	4290      	cmp	r0, r2
    2b14:	d205      	bcs.n	2b22 <nwkFrameNext+0x2e>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2b16:	7803      	ldrb	r3, [r0, #0]
    2b18:	2b00      	cmp	r3, #0
    2b1a:	d0f9      	beq.n	2b10 <nwkFrameNext+0x1c>
    2b1c:	e002      	b.n	2b24 <nwkFrameNext+0x30>
		frame = nwkFrameFrames;
    2b1e:	4803      	ldr	r0, [pc, #12]	; (2b2c <nwkFrameNext+0x38>)
    2b20:	e7f0      	b.n	2b04 <nwkFrameNext+0x10>
			return frame;
		}
	}

	return NULL;
    2b22:	2000      	movs	r0, #0
}
    2b24:	4770      	bx	lr
	return NULL;
    2b26:	2000      	movs	r0, #0
    2b28:	e7fc      	b.n	2b24 <nwkFrameNext+0x30>
    2b2a:	46c0      	nop			; (mov r8, r8)
    2b2c:	20000240 	.word	0x20000240

00002b30 <nwkFrameCommandInit>:
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
	frame->tx.status = NWK_SUCCESS_STATUS;
    2b30:	2200      	movs	r2, #0
    2b32:	2385      	movs	r3, #133	; 0x85
    2b34:	54c2      	strb	r2, [r0, r3]
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    2b36:	4a05      	ldr	r2, [pc, #20]	; (2b4c <nwkFrameCommandInit+0x1c>)
    2b38:	7913      	ldrb	r3, [r2, #4]
    2b3a:	3301      	adds	r3, #1
    2b3c:	b2db      	uxtb	r3, r3
    2b3e:	7113      	strb	r3, [r2, #4]
    2b40:	7303      	strb	r3, [r0, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    2b42:	7813      	ldrb	r3, [r2, #0]
    2b44:	7343      	strb	r3, [r0, #13]
    2b46:	7853      	ldrb	r3, [r2, #1]
    2b48:	7383      	strb	r3, [r0, #14]
#ifdef NWK_ENABLE_SECURE_COMMANDS
	frame->header.nwkFcf.security = 1;
#endif
}
    2b4a:	4770      	bx	lr
    2b4c:	2000162c 	.word	0x2000162c

00002b50 <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    2b50:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b52:	4b09      	ldr	r3, [pc, #36]	; (2b78 <nwkRouteInit+0x28>)
    2b54:	3302      	adds	r3, #2
    2b56:	2200      	movs	r2, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2b58:	2701      	movs	r7, #1
    2b5a:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    2b5c:	4c06      	ldr	r4, [pc, #24]	; (2b78 <nwkRouteInit+0x28>)
    2b5e:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    2b60:	2500      	movs	r5, #0
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2b62:	801f      	strh	r7, [r3, #0]
		nwkRouteTable[i].fixed = 0;
    2b64:	00d0      	lsls	r0, r2, #3
    2b66:	5d01      	ldrb	r1, [r0, r4]
    2b68:	43b1      	bics	r1, r6
    2b6a:	5501      	strb	r1, [r0, r4]
		nwkRouteTable[i].rank = 0;
    2b6c:	711d      	strb	r5, [r3, #4]
    2b6e:	3201      	adds	r2, #1
    2b70:	3308      	adds	r3, #8
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2b72:	2a64      	cmp	r2, #100	; 0x64
    2b74:	d1f5      	bne.n	2b62 <nwkRouteInit+0x12>
	}
}
    2b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b78:	200003e8 	.word	0x200003e8

00002b7c <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    2b7c:	b530      	push	{r4, r5, lr}
    2b7e:	4a0c      	ldr	r2, [pc, #48]	; (2bb0 <NWK_RouteFindEntry+0x34>)
    2b80:	3202      	adds	r2, #2
    2b82:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    2b84:	4d0a      	ldr	r5, [pc, #40]	; (2bb0 <NWK_RouteFindEntry+0x34>)
    2b86:	e003      	b.n	2b90 <NWK_RouteFindEntry+0x14>
    2b88:	3301      	adds	r3, #1
    2b8a:	3208      	adds	r2, #8
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2b8c:	2b64      	cmp	r3, #100	; 0x64
    2b8e:	d00c      	beq.n	2baa <NWK_RouteFindEntry+0x2e>
		if (nwkRouteTable[i].dstAddr == dst &&
    2b90:	8814      	ldrh	r4, [r2, #0]
    2b92:	4284      	cmp	r4, r0
    2b94:	d1f8      	bne.n	2b88 <NWK_RouteFindEntry+0xc>
				nwkRouteTable[i].multicast == multicast) {
    2b96:	00dc      	lsls	r4, r3, #3
    2b98:	5d64      	ldrb	r4, [r4, r5]
    2b9a:	07a4      	lsls	r4, r4, #30
    2b9c:	0fe4      	lsrs	r4, r4, #31
		if (nwkRouteTable[i].dstAddr == dst &&
    2b9e:	428c      	cmp	r4, r1
    2ba0:	d1f2      	bne.n	2b88 <NWK_RouteFindEntry+0xc>
			return &nwkRouteTable[i];
    2ba2:	00db      	lsls	r3, r3, #3
    2ba4:	4802      	ldr	r0, [pc, #8]	; (2bb0 <NWK_RouteFindEntry+0x34>)
    2ba6:	18c0      	adds	r0, r0, r3
		}
	}

	return NULL;
}
    2ba8:	bd30      	pop	{r4, r5, pc}
	return NULL;
    2baa:	2000      	movs	r0, #0
    2bac:	e7fc      	b.n	2ba8 <NWK_RouteFindEntry+0x2c>
    2bae:	46c0      	nop			; (mov r8, r8)
    2bb0:	200003e8 	.word	0x200003e8

00002bb4 <NWK_RouteNewEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
    2bb4:	b530      	push	{r4, r5, lr}
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;
    2bb6:	2200      	movs	r2, #0
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
    2bb8:	4813      	ldr	r0, [pc, #76]	; (2c08 <NWK_RouteNewEntry+0x54>)

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
		if (iter->fixed) {
    2bba:	2401      	movs	r4, #1
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    2bbc:	0003      	movs	r3, r0
    2bbe:	25c8      	movs	r5, #200	; 0xc8
    2bc0:	00ad      	lsls	r5, r5, #2
    2bc2:	46ac      	mov	ip, r5
    2bc4:	4463      	add	r3, ip
    2bc6:	0019      	movs	r1, r3
    2bc8:	e003      	b.n	2bd2 <NWK_RouteNewEntry+0x1e>
    2bca:	0002      	movs	r2, r0
    2bcc:	3008      	adds	r0, #8
    2bce:	4288      	cmp	r0, r1
    2bd0:	d00c      	beq.n	2bec <NWK_RouteNewEntry+0x38>
		if (iter->fixed) {
    2bd2:	7803      	ldrb	r3, [r0, #0]
    2bd4:	421c      	tst	r4, r3
    2bd6:	d1f9      	bne.n	2bcc <NWK_RouteNewEntry+0x18>
			continue;
		}

		if (0 == iter->rank) {
    2bd8:	7983      	ldrb	r3, [r0, #6]
    2bda:	2b00      	cmp	r3, #0
    2bdc:	d007      	beq.n	2bee <NWK_RouteNewEntry+0x3a>
			entry = iter;
			break;
		}

		if (NULL == entry || iter->rank < entry->rank) {
    2bde:	2a00      	cmp	r2, #0
    2be0:	d0f3      	beq.n	2bca <NWK_RouteNewEntry+0x16>
    2be2:	7995      	ldrb	r5, [r2, #6]
    2be4:	429d      	cmp	r5, r3
    2be6:	d9f1      	bls.n	2bcc <NWK_RouteNewEntry+0x18>
    2be8:	0002      	movs	r2, r0
    2bea:	e7ef      	b.n	2bcc <NWK_RouteNewEntry+0x18>
    2bec:	0010      	movs	r0, r2
			entry = iter;
		}
	}

	entry->multicast = 0;
    2bee:	7803      	ldrb	r3, [r0, #0]
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    2bf0:	2202      	movs	r2, #2
    2bf2:	4393      	bics	r3, r2
    2bf4:	001a      	movs	r2, r3
    2bf6:	230f      	movs	r3, #15
    2bf8:	4013      	ands	r3, r2
    2bfa:	2230      	movs	r2, #48	; 0x30
    2bfc:	4313      	orrs	r3, r2
    2bfe:	7003      	strb	r3, [r0, #0]
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    2c00:	2380      	movs	r3, #128	; 0x80
    2c02:	7183      	strb	r3, [r0, #6]

	return entry;
}
    2c04:	bd30      	pop	{r4, r5, pc}
    2c06:	46c0      	nop			; (mov r8, r8)
    2c08:	200003e8 	.word	0x200003e8

00002c0c <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    2c0c:	7803      	ldrb	r3, [r0, #0]
    2c0e:	07db      	lsls	r3, r3, #31
    2c10:	d404      	bmi.n	2c1c <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    2c12:	2301      	movs	r3, #1
    2c14:	425b      	negs	r3, r3
    2c16:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    2c18:	2300      	movs	r3, #0
    2c1a:	7183      	strb	r3, [r0, #6]
}
    2c1c:	4770      	bx	lr
	...

00002c20 <NWK_RouteNextHop>:

/*************************************************************************//**
*****************************************************************************/
uint16_t NWK_RouteNextHop(uint16_t dst, uint8_t multicast)
{
    2c20:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    2c22:	4b04      	ldr	r3, [pc, #16]	; (2c34 <NWK_RouteNextHop+0x14>)
    2c24:	4798      	blx	r3
	if (entry) {
    2c26:	2800      	cmp	r0, #0
    2c28:	d001      	beq.n	2c2e <NWK_RouteNextHop+0xe>
		return entry->nextHopAddr;
    2c2a:	8880      	ldrh	r0, [r0, #4]
	}

	return NWK_ROUTE_UNKNOWN;
}
    2c2c:	bd10      	pop	{r4, pc}
	return NWK_ROUTE_UNKNOWN;
    2c2e:	4802      	ldr	r0, [pc, #8]	; (2c38 <NWK_RouteNextHop+0x18>)
    2c30:	e7fc      	b.n	2c2c <NWK_RouteNextHop+0xc>
    2c32:	46c0      	nop			; (mov r8, r8)
    2c34:	00002b7d 	.word	0x00002b7d
    2c38:	0000ffff 	.word	0x0000ffff

00002c3c <nwkRouteRemove>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    2c3c:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    2c3e:	4b03      	ldr	r3, [pc, #12]	; (2c4c <nwkRouteRemove+0x10>)
    2c40:	4798      	blx	r3
	if (entry) {
    2c42:	2800      	cmp	r0, #0
    2c44:	d001      	beq.n	2c4a <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    2c46:	4b02      	ldr	r3, [pc, #8]	; (2c50 <nwkRouteRemove+0x14>)
    2c48:	4798      	blx	r3
	}
}
    2c4a:	bd10      	pop	{r4, pc}
    2c4c:	00002b7d 	.word	0x00002b7d
    2c50:	00002c0d 	.word	0x00002c0d

00002c54 <nwkRouteFrameReceived>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    2c54:	b570      	push	{r4, r5, r6, lr}
    2c56:	0005      	movs	r5, r0
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    2c58:	7a42      	ldrb	r2, [r0, #9]
    2c5a:	7a84      	ldrb	r4, [r0, #10]
    2c5c:	0224      	lsls	r4, r4, #8
    2c5e:	4314      	orrs	r4, r2
    2c60:	b223      	sxth	r3, r4
    2c62:	2b00      	cmp	r3, #0
    2c64:	db29      	blt.n	2cba <nwkRouteFrameReceived+0x66>
			(header->macSrcAddr != header->nwkSrcAddr)) {
		return;
	}

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    2c66:	7969      	ldrb	r1, [r5, #5]
    2c68:	79ab      	ldrb	r3, [r5, #6]
    2c6a:	021b      	lsls	r3, r3, #8
    2c6c:	430b      	orrs	r3, r1
    2c6e:	4a21      	ldr	r2, [pc, #132]	; (2cf4 <nwkRouteFrameReceived+0xa0>)
    2c70:	4293      	cmp	r3, r2
    2c72:	d021      	beq.n	2cb8 <nwkRouteFrameReceived+0x64>
		return;
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    2c74:	7b6a      	ldrb	r2, [r5, #13]
    2c76:	7ba8      	ldrb	r0, [r5, #14]
    2c78:	0200      	lsls	r0, r0, #8
    2c7a:	4310      	orrs	r0, r2
    2c7c:	2100      	movs	r1, #0
    2c7e:	4b1e      	ldr	r3, [pc, #120]	; (2cf8 <nwkRouteFrameReceived+0xa4>)
    2c80:	4798      	blx	r3

	if (entry) {
    2c82:	2800      	cmp	r0, #0
    2c84:	d029      	beq.n	2cda <nwkRouteFrameReceived+0x86>
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    2c86:	79e9      	ldrb	r1, [r5, #7]
    2c88:	7a2b      	ldrb	r3, [r5, #8]
    2c8a:	021b      	lsls	r3, r3, #8
    2c8c:	430b      	orrs	r3, r1
    2c8e:	4a19      	ldr	r2, [pc, #100]	; (2cf4 <nwkRouteFrameReceived+0xa0>)
    2c90:	4293      	cmp	r3, r2
    2c92:	d019      	beq.n	2cc8 <nwkRouteFrameReceived+0x74>
				nwkIb.addr == header->nwkDstAddr);

		if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi >
    2c94:	8883      	ldrh	r3, [r0, #4]
    2c96:	42a3      	cmp	r3, r4
    2c98:	d00b      	beq.n	2cb2 <nwkRouteFrameReceived+0x5e>
    2c9a:	79c2      	ldrb	r2, [r0, #7]
    2c9c:	2385      	movs	r3, #133	; 0x85
    2c9e:	5ceb      	ldrb	r3, [r5, r3]
    2ca0:	429a      	cmp	r2, r3
    2ca2:	d206      	bcs.n	2cb2 <nwkRouteFrameReceived+0x5e>
				entry->lqi) || discovery) {
			entry->nextHopAddr = header->macSrcAddr;
    2ca4:	8084      	strh	r4, [r0, #4]
			entry->score = NWK_ROUTE_DEFAULT_SCORE;
    2ca6:	7802      	ldrb	r2, [r0, #0]
    2ca8:	230f      	movs	r3, #15
    2caa:	4013      	ands	r3, r2
    2cac:	2230      	movs	r2, #48	; 0x30
    2cae:	4313      	orrs	r3, r2
    2cb0:	7003      	strb	r3, [r0, #0]

		entry->dstAddr = header->nwkSrcAddr;
		entry->nextHopAddr = header->macSrcAddr;
	}

	entry->lqi = frame->rx.lqi;
    2cb2:	2385      	movs	r3, #133	; 0x85
    2cb4:	5ceb      	ldrb	r3, [r5, r3]
    2cb6:	71c3      	strb	r3, [r0, #7]
#else
	(void)frame;
#endif
}
    2cb8:	bd70      	pop	{r4, r5, r6, pc}
			(header->macSrcAddr != header->nwkSrcAddr)) {
    2cba:	7b41      	ldrb	r1, [r0, #13]
    2cbc:	7b83      	ldrb	r3, [r0, #14]
    2cbe:	021b      	lsls	r3, r3, #8
	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    2cc0:	430b      	orrs	r3, r1
    2cc2:	429c      	cmp	r4, r3
    2cc4:	d1f8      	bne.n	2cb8 <nwkRouteFrameReceived+0x64>
    2cc6:	e7ce      	b.n	2c66 <nwkRouteFrameReceived+0x12>
				nwkIb.addr == header->nwkDstAddr);
    2cc8:	7be9      	ldrb	r1, [r5, #15]
    2cca:	7c2b      	ldrb	r3, [r5, #16]
    2ccc:	021b      	lsls	r3, r3, #8
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    2cce:	4a0b      	ldr	r2, [pc, #44]	; (2cfc <nwkRouteFrameReceived+0xa8>)
    2cd0:	8812      	ldrh	r2, [r2, #0]
    2cd2:	430b      	orrs	r3, r1
    2cd4:	429a      	cmp	r2, r3
    2cd6:	d1dd      	bne.n	2c94 <nwkRouteFrameReceived+0x40>
    2cd8:	e7e4      	b.n	2ca4 <nwkRouteFrameReceived+0x50>
		entry = NWK_RouteNewEntry();
    2cda:	4b09      	ldr	r3, [pc, #36]	; (2d00 <nwkRouteFrameReceived+0xac>)
    2cdc:	4798      	blx	r3
		entry->dstAddr = header->nwkSrcAddr;
    2cde:	7b69      	ldrb	r1, [r5, #13]
    2ce0:	7bab      	ldrb	r3, [r5, #14]
    2ce2:	021b      	lsls	r3, r3, #8
    2ce4:	430b      	orrs	r3, r1
    2ce6:	8043      	strh	r3, [r0, #2]
		entry->nextHopAddr = header->macSrcAddr;
    2ce8:	7a69      	ldrb	r1, [r5, #9]
    2cea:	7aab      	ldrb	r3, [r5, #10]
    2cec:	021b      	lsls	r3, r3, #8
    2cee:	430b      	orrs	r3, r1
    2cf0:	8083      	strh	r3, [r0, #4]
    2cf2:	e7de      	b.n	2cb2 <nwkRouteFrameReceived+0x5e>
    2cf4:	0000ffff 	.word	0x0000ffff
    2cf8:	00002b7d 	.word	0x00002b7d
    2cfc:	2000162c 	.word	0x2000162c
    2d00:	00002bb5 	.word	0x00002bb5

00002d04 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    2d04:	b510      	push	{r4, lr}
    2d06:	0004      	movs	r4, r0
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
    2d08:	7bc3      	ldrb	r3, [r0, #15]
    2d0a:	7c00      	ldrb	r0, [r0, #16]
    2d0c:	0200      	lsls	r0, r0, #8
    2d0e:	4318      	orrs	r0, r3
    2d10:	4b1c      	ldr	r3, [pc, #112]	; (2d84 <nwkRouteFrameSent+0x80>)
    2d12:	4298      	cmp	r0, r3
    2d14:	d019      	beq.n	2d4a <nwkRouteFrameSent+0x46>
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);
    2d16:	7ae1      	ldrb	r1, [r4, #11]
    2d18:	0709      	lsls	r1, r1, #28
	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
    2d1a:	0fc9      	lsrs	r1, r1, #31
    2d1c:	4b1a      	ldr	r3, [pc, #104]	; (2d88 <nwkRouteFrameSent+0x84>)
    2d1e:	4798      	blx	r3

	if (NULL == entry || entry->fixed) {
    2d20:	2800      	cmp	r0, #0
    2d22:	d012      	beq.n	2d4a <nwkRouteFrameSent+0x46>
    2d24:	7803      	ldrb	r3, [r0, #0]
    2d26:	07db      	lsls	r3, r3, #31
    2d28:	d40f      	bmi.n	2d4a <nwkRouteFrameSent+0x46>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
    2d2a:	2385      	movs	r3, #133	; 0x85
    2d2c:	5ce3      	ldrb	r3, [r4, r3]
    2d2e:	2b00      	cmp	r3, #0
    2d30:	d119      	bne.n	2d66 <nwkRouteFrameSent+0x62>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
    2d32:	7802      	ldrb	r2, [r0, #0]
    2d34:	330f      	adds	r3, #15
    2d36:	4013      	ands	r3, r2
    2d38:	2230      	movs	r2, #48	; 0x30
    2d3a:	4313      	orrs	r3, r2
    2d3c:	7003      	strb	r3, [r0, #0]

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
    2d3e:	7983      	ldrb	r3, [r0, #6]
    2d40:	3301      	adds	r3, #1
    2d42:	b2db      	uxtb	r3, r3
    2d44:	7183      	strb	r3, [r0, #6]
    2d46:	2bff      	cmp	r3, #255	; 0xff
    2d48:	d000      	beq.n	2d4c <nwkRouteFrameSent+0x48>
	} else {
		if (0 == --entry->score) {
			NWK_RouteFreeEntry(entry);
		}
	}
}
    2d4a:	bd10      	pop	{r4, pc}
    2d4c:	490f      	ldr	r1, [pc, #60]	; (2d8c <nwkRouteFrameSent+0x88>)
    2d4e:	1d8a      	adds	r2, r1, #6
    2d50:	4b0f      	ldr	r3, [pc, #60]	; (2d90 <nwkRouteFrameSent+0x8c>)
    2d52:	469c      	mov	ip, r3
    2d54:	4461      	add	r1, ip
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    2d56:	7813      	ldrb	r3, [r2, #0]
    2d58:	085b      	lsrs	r3, r3, #1
    2d5a:	3301      	adds	r3, #1
    2d5c:	7013      	strb	r3, [r2, #0]
    2d5e:	3208      	adds	r2, #8
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2d60:	428a      	cmp	r2, r1
    2d62:	d1f8      	bne.n	2d56 <nwkRouteFrameSent+0x52>
    2d64:	e7f1      	b.n	2d4a <nwkRouteFrameSent+0x46>
		if (0 == --entry->score) {
    2d66:	7801      	ldrb	r1, [r0, #0]
    2d68:	090b      	lsrs	r3, r1, #4
    2d6a:	330f      	adds	r3, #15
    2d6c:	220f      	movs	r2, #15
    2d6e:	4013      	ands	r3, r2
    2d70:	011c      	lsls	r4, r3, #4
    2d72:	400a      	ands	r2, r1
    2d74:	4322      	orrs	r2, r4
    2d76:	7002      	strb	r2, [r0, #0]
    2d78:	2b00      	cmp	r3, #0
    2d7a:	d1e6      	bne.n	2d4a <nwkRouteFrameSent+0x46>
			NWK_RouteFreeEntry(entry);
    2d7c:	4b05      	ldr	r3, [pc, #20]	; (2d94 <nwkRouteFrameSent+0x90>)
    2d7e:	4798      	blx	r3
    2d80:	e7e3      	b.n	2d4a <nwkRouteFrameSent+0x46>
    2d82:	46c0      	nop			; (mov r8, r8)
    2d84:	0000ffff 	.word	0x0000ffff
    2d88:	00002b7d 	.word	0x00002b7d
    2d8c:	200003e8 	.word	0x200003e8
    2d90:	00000326 	.word	0x00000326
    2d94:	00002c0d 	.word	0x00002c0d

00002d98 <nwkRoutePrepareTx>:
{
    2d98:	b510      	push	{r4, lr}
    2d9a:	0004      	movs	r4, r0
	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
    2d9c:	7bc2      	ldrb	r2, [r0, #15]
    2d9e:	7c00      	ldrb	r0, [r0, #16]
    2da0:	0200      	lsls	r0, r0, #8
    2da2:	4310      	orrs	r0, r2
    2da4:	4b0b      	ldr	r3, [pc, #44]	; (2dd4 <nwkRoutePrepareTx+0x3c>)
    2da6:	4298      	cmp	r0, r3
    2da8:	d00b      	beq.n	2dc2 <nwkRoutePrepareTx+0x2a>
	} else if (header->nwkFcf.linkLocal) {
    2daa:	7ae3      	ldrb	r3, [r4, #11]
    2dac:	075b      	lsls	r3, r3, #29
    2dae:	d40d      	bmi.n	2dcc <nwkRoutePrepareTx+0x34>
				header->nwkFcf.multicast);
    2db0:	7ae1      	ldrb	r1, [r4, #11]
    2db2:	0709      	lsls	r1, r1, #28
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
    2db4:	0fc9      	lsrs	r1, r1, #31
    2db6:	4b08      	ldr	r3, [pc, #32]	; (2dd8 <nwkRoutePrepareTx+0x40>)
    2db8:	4798      	blx	r3
    2dba:	71e0      	strb	r0, [r4, #7]
    2dbc:	0a00      	lsrs	r0, r0, #8
    2dbe:	7220      	strb	r0, [r4, #8]
}
    2dc0:	bd10      	pop	{r4, pc}
		header->macDstAddr = NWK_BROADCAST_ADDR;
    2dc2:	2301      	movs	r3, #1
    2dc4:	425b      	negs	r3, r3
    2dc6:	71e3      	strb	r3, [r4, #7]
    2dc8:	7223      	strb	r3, [r4, #8]
    2dca:	e7f9      	b.n	2dc0 <nwkRoutePrepareTx+0x28>
		header->macDstAddr = header->nwkDstAddr;
    2dcc:	71e0      	strb	r0, [r4, #7]
    2dce:	0a00      	lsrs	r0, r0, #8
    2dd0:	7220      	strb	r0, [r4, #8]
    2dd2:	e7f5      	b.n	2dc0 <nwkRoutePrepareTx+0x28>
    2dd4:	0000ffff 	.word	0x0000ffff
    2dd8:	00002c21 	.word	0x00002c21

00002ddc <nwkRouteFrame>:
{
    2ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dde:	46c6      	mov	lr, r8
    2de0:	b500      	push	{lr}
    2de2:	0007      	movs	r7, r0
			NWK_RouteNextHop(header->nwkDstAddr,
    2de4:	7bc2      	ldrb	r2, [r0, #15]
    2de6:	7c04      	ldrb	r4, [r0, #16]
    2de8:	0224      	lsls	r4, r4, #8
    2dea:	4314      	orrs	r4, r2
			header->nwkFcf.multicast)) {
    2dec:	7ac5      	ldrb	r5, [r0, #11]
    2dee:	072d      	lsls	r5, r5, #28
    2df0:	0fed      	lsrs	r5, r5, #31
			NWK_RouteNextHop(header->nwkDstAddr,
    2df2:	b2e9      	uxtb	r1, r5
    2df4:	0020      	movs	r0, r4
    2df6:	4b27      	ldr	r3, [pc, #156]	; (2e94 <nwkRouteFrame+0xb8>)
    2df8:	4798      	blx	r3
	if (NWK_ROUTE_UNKNOWN !=
    2dfa:	4b27      	ldr	r3, [pc, #156]	; (2e98 <nwkRouteFrame+0xbc>)
    2dfc:	4298      	cmp	r0, r3
    2dfe:	d010      	beq.n	2e22 <nwkRouteFrame+0x46>
		frame->tx.confirm = NULL;
    2e00:	2200      	movs	r2, #0
    2e02:	2389      	movs	r3, #137	; 0x89
    2e04:	54fa      	strb	r2, [r7, r3]
    2e06:	003b      	movs	r3, r7
    2e08:	3389      	adds	r3, #137	; 0x89
    2e0a:	705a      	strb	r2, [r3, #1]
    2e0c:	709a      	strb	r2, [r3, #2]
    2e0e:	70da      	strb	r2, [r3, #3]
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
    2e10:	3202      	adds	r2, #2
    2e12:	2388      	movs	r3, #136	; 0x88
    2e14:	54fa      	strb	r2, [r7, r3]
		nwkTxFrame(frame);
    2e16:	0038      	movs	r0, r7
    2e18:	4b20      	ldr	r3, [pc, #128]	; (2e9c <nwkRouteFrame+0xc0>)
    2e1a:	4798      	blx	r3
}
    2e1c:	bc04      	pop	{r2}
    2e1e:	4690      	mov	r8, r2
    2e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
    2e22:	7b7a      	ldrb	r2, [r7, #13]
    2e24:	7bbb      	ldrb	r3, [r7, #14]
    2e26:	021b      	lsls	r3, r3, #8
    2e28:	4313      	orrs	r3, r2
    2e2a:	4698      	mov	r8, r3
	if (NULL == (frame = nwkFrameAlloc())) {
    2e2c:	4b1c      	ldr	r3, [pc, #112]	; (2ea0 <nwkRouteFrame+0xc4>)
    2e2e:	4798      	blx	r3
    2e30:	1e06      	subs	r6, r0, #0
    2e32:	d02b      	beq.n	2e8c <nwkRouteFrame+0xb0>
	nwkFrameCommandInit(frame);
    2e34:	4b1b      	ldr	r3, [pc, #108]	; (2ea4 <nwkRouteFrame+0xc8>)
    2e36:	4798      	blx	r3
	frame->size += sizeof(NwkCommandRouteError_t);
    2e38:	7873      	ldrb	r3, [r6, #1]
    2e3a:	3306      	adds	r3, #6
    2e3c:	7073      	strb	r3, [r6, #1]
	frame->tx.confirm = NULL;
    2e3e:	2200      	movs	r2, #0
    2e40:	2389      	movs	r3, #137	; 0x89
    2e42:	54f2      	strb	r2, [r6, r3]
    2e44:	0033      	movs	r3, r6
    2e46:	3389      	adds	r3, #137	; 0x89
    2e48:	705a      	strb	r2, [r3, #1]
    2e4a:	709a      	strb	r2, [r3, #2]
    2e4c:	70da      	strb	r2, [r3, #3]
	frame->header.nwkDstAddr = src;
    2e4e:	20ff      	movs	r0, #255	; 0xff
    2e50:	4643      	mov	r3, r8
    2e52:	4018      	ands	r0, r3
    2e54:	73f0      	strb	r0, [r6, #15]
    2e56:	0a1a      	lsrs	r2, r3, #8
    2e58:	7432      	strb	r2, [r6, #16]
	command = (NwkCommandRouteError_t *)frame->payload;
    2e5a:	2381      	movs	r3, #129	; 0x81
    2e5c:	5cf3      	ldrb	r3, [r6, r3]
    2e5e:	2182      	movs	r1, #130	; 0x82
    2e60:	5c71      	ldrb	r1, [r6, r1]
    2e62:	0209      	lsls	r1, r1, #8
    2e64:	4319      	orrs	r1, r3
    2e66:	2383      	movs	r3, #131	; 0x83
    2e68:	5cf3      	ldrb	r3, [r6, r3]
    2e6a:	041b      	lsls	r3, r3, #16
    2e6c:	4319      	orrs	r1, r3
    2e6e:	2384      	movs	r3, #132	; 0x84
    2e70:	5cf3      	ldrb	r3, [r6, r3]
    2e72:	061b      	lsls	r3, r3, #24
    2e74:	430b      	orrs	r3, r1
	command->id = NWK_COMMAND_ROUTE_ERROR;
    2e76:	2101      	movs	r1, #1
    2e78:	7019      	strb	r1, [r3, #0]
	command->srcAddr = src;
    2e7a:	7058      	strb	r0, [r3, #1]
    2e7c:	709a      	strb	r2, [r3, #2]
	command->dstAddr = dst;
    2e7e:	70dc      	strb	r4, [r3, #3]
    2e80:	0a24      	lsrs	r4, r4, #8
    2e82:	711c      	strb	r4, [r3, #4]
	command->multicast = multicast;
    2e84:	715d      	strb	r5, [r3, #5]
	nwkTxFrame(frame);
    2e86:	0030      	movs	r0, r6
    2e88:	4b04      	ldr	r3, [pc, #16]	; (2e9c <nwkRouteFrame+0xc0>)
    2e8a:	4798      	blx	r3
		nwkFrameFree(frame);
    2e8c:	0038      	movs	r0, r7
    2e8e:	4b06      	ldr	r3, [pc, #24]	; (2ea8 <nwkRouteFrame+0xcc>)
    2e90:	4798      	blx	r3
}
    2e92:	e7c3      	b.n	2e1c <nwkRouteFrame+0x40>
    2e94:	00002c21 	.word	0x00002c21
    2e98:	0000ffff 	.word	0x0000ffff
    2e9c:	0000371d 	.word	0x0000371d
    2ea0:	00002a6d 	.word	0x00002a6d
    2ea4:	00002b31 	.word	0x00002b31
    2ea8:	00002ae1 	.word	0x00002ae1

00002eac <nwkRouteErrorReceived>:
{
    2eac:	b510      	push	{r4, lr}
	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2eae:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2eb0:	2300      	movs	r3, #0
	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2eb2:	2a06      	cmp	r2, #6
    2eb4:	d001      	beq.n	2eba <nwkRouteErrorReceived+0xe>
}
    2eb6:	0018      	movs	r0, r3
    2eb8:	bd10      	pop	{r4, pc}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    2eba:	6883      	ldr	r3, [r0, #8]
	nwkRouteRemove(command->dstAddr, command->multicast);
    2ebc:	7959      	ldrb	r1, [r3, #5]
    2ebe:	78da      	ldrb	r2, [r3, #3]
    2ec0:	7918      	ldrb	r0, [r3, #4]
    2ec2:	0200      	lsls	r0, r0, #8
    2ec4:	4310      	orrs	r0, r2
    2ec6:	4b02      	ldr	r3, [pc, #8]	; (2ed0 <nwkRouteErrorReceived+0x24>)
    2ec8:	4798      	blx	r3
	return true;
    2eca:	2301      	movs	r3, #1
    2ecc:	e7f3      	b.n	2eb6 <nwkRouteErrorReceived+0xa>
    2ece:	46c0      	nop			; (mov r8, r8)
    2ed0:	00002c3d 	.word	0x00002c3d

00002ed4 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    2ed4:	b510      	push	{r4, lr}
	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
		return false;
	}
#endif

	if (ind->size < 1) {
    2ed6:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2ed8:	2300      	movs	r3, #0
	if (ind->size < 1) {
    2eda:	2a00      	cmp	r2, #0
    2edc:	d00a      	beq.n	2ef4 <nwkRxSeriveDataInd+0x20>
	}

	switch (ind->data[0]) {
    2ede:	6883      	ldr	r3, [r0, #8]
    2ee0:	781b      	ldrb	r3, [r3, #0]
    2ee2:	2b00      	cmp	r3, #0
    2ee4:	d003      	beq.n	2eee <nwkRxSeriveDataInd+0x1a>
    2ee6:	2b01      	cmp	r3, #1
    2ee8:	d006      	beq.n	2ef8 <nwkRxSeriveDataInd+0x24>
	case NWK_COMMAND_ROUTE_REPLY:
		return nwkRouteDiscoveryReplyReceived(ind);
#endif

	default:
		return false;
    2eea:	2300      	movs	r3, #0
    2eec:	e002      	b.n	2ef4 <nwkRxSeriveDataInd+0x20>
		return nwkTxAckReceived(ind);
    2eee:	4b04      	ldr	r3, [pc, #16]	; (2f00 <nwkRxSeriveDataInd+0x2c>)
    2ef0:	4798      	blx	r3
    2ef2:	0003      	movs	r3, r0
	}
}
    2ef4:	0018      	movs	r0, r3
    2ef6:	bd10      	pop	{r4, pc}
		return nwkRouteErrorReceived(ind);
    2ef8:	4b02      	ldr	r3, [pc, #8]	; (2f04 <nwkRxSeriveDataInd+0x30>)
    2efa:	4798      	blx	r3
    2efc:	0003      	movs	r3, r0
    2efe:	e7f9      	b.n	2ef4 <nwkRxSeriveDataInd+0x20>
    2f00:	00003861 	.word	0x00003861
    2f04:	00002ead 	.word	0x00002ead

00002f08 <nwkRxDuplicateRejectionTimerHandler>:
{
    2f08:	b570      	push	{r4, r5, r6, lr}
    2f0a:	490b      	ldr	r1, [pc, #44]	; (2f38 <nwkRxDuplicateRejectionTimerHandler+0x30>)
    2f0c:	1d0b      	adds	r3, r1, #4
    2f0e:	3140      	adds	r1, #64	; 0x40
	bool restart = false;
    2f10:	2400      	movs	r4, #0
			restart = true;
    2f12:	2501      	movs	r5, #1
    2f14:	e002      	b.n	2f1c <nwkRxDuplicateRejectionTimerHandler+0x14>
    2f16:	3306      	adds	r3, #6
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2f18:	428b      	cmp	r3, r1
    2f1a:	d006      	beq.n	2f2a <nwkRxDuplicateRejectionTimerHandler+0x22>
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    2f1c:	781a      	ldrb	r2, [r3, #0]
    2f1e:	2a00      	cmp	r2, #0
    2f20:	d0f9      	beq.n	2f16 <nwkRxDuplicateRejectionTimerHandler+0xe>
			nwkRxDuplicateRejectionTable[i].ttl--;
    2f22:	3a01      	subs	r2, #1
    2f24:	701a      	strb	r2, [r3, #0]
			restart = true;
    2f26:	002c      	movs	r4, r5
    2f28:	e7f5      	b.n	2f16 <nwkRxDuplicateRejectionTimerHandler+0xe>
	if (restart) {
    2f2a:	2c00      	cmp	r4, #0
    2f2c:	d100      	bne.n	2f30 <nwkRxDuplicateRejectionTimerHandler+0x28>
}
    2f2e:	bd70      	pop	{r4, r5, r6, pc}
		SYS_TimerStart(timer);
    2f30:	4b02      	ldr	r3, [pc, #8]	; (2f3c <nwkRxDuplicateRejectionTimerHandler+0x34>)
    2f32:	4798      	blx	r3
}
    2f34:	e7fb      	b.n	2f2e <nwkRxDuplicateRejectionTimerHandler+0x26>
    2f36:	46c0      	nop			; (mov r8, r8)
    2f38:	2000070c 	.word	0x2000070c
    2f3c:	00003d9d 	.word	0x00003d9d

00002f40 <nwkRxInit>:
{
    2f40:	b510      	push	{r4, lr}
    2f42:	4a0a      	ldr	r2, [pc, #40]	; (2f6c <nwkRxInit+0x2c>)
    2f44:	1d13      	adds	r3, r2, #4
    2f46:	3240      	adds	r2, #64	; 0x40
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    2f48:	2100      	movs	r1, #0
    2f4a:	7019      	strb	r1, [r3, #0]
    2f4c:	3306      	adds	r3, #6
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2f4e:	4293      	cmp	r3, r2
    2f50:	d1fb      	bne.n	2f4a <nwkRxInit+0xa>
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    2f52:	4b07      	ldr	r3, [pc, #28]	; (2f70 <nwkRxInit+0x30>)
    2f54:	2264      	movs	r2, #100	; 0x64
    2f56:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2f58:	2200      	movs	r2, #0
    2f5a:	731a      	strb	r2, [r3, #12]
		= nwkRxDuplicateRejectionTimerHandler;
    2f5c:	4a05      	ldr	r2, [pc, #20]	; (2f74 <nwkRxInit+0x34>)
    2f5e:	611a      	str	r2, [r3, #16]
	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    2f60:	4905      	ldr	r1, [pc, #20]	; (2f78 <nwkRxInit+0x38>)
    2f62:	2000      	movs	r0, #0
    2f64:	4b05      	ldr	r3, [pc, #20]	; (2f7c <nwkRxInit+0x3c>)
    2f66:	4798      	blx	r3
}
    2f68:	bd10      	pop	{r4, pc}
    2f6a:	46c0      	nop			; (mov r8, r8)
    2f6c:	2000070c 	.word	0x2000070c
    2f70:	20000748 	.word	0x20000748
    2f74:	00002f09 	.word	0x00002f09
    2f78:	00002ed5 	.word	0x00002ed5
    2f7c:	000028a5 	.word	0x000028a5

00002f80 <PHY_DataInd>:
{
    2f80:	b510      	push	{r4, lr}
    2f82:	0004      	movs	r4, r0
	if (0x88 != ind->data[1] ||
    2f84:	6803      	ldr	r3, [r0, #0]
    2f86:	785a      	ldrb	r2, [r3, #1]
    2f88:	2a88      	cmp	r2, #136	; 0x88
    2f8a:	d000      	beq.n	2f8e <PHY_DataInd+0xe>
}
    2f8c:	bd10      	pop	{r4, pc}
			(0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    2f8e:	781b      	ldrb	r3, [r3, #0]
    2f90:	3a68      	subs	r2, #104	; 0x68
    2f92:	4393      	bics	r3, r2
    2f94:	2b41      	cmp	r3, #65	; 0x41
    2f96:	d1f9      	bne.n	2f8c <PHY_DataInd+0xc>
    2f98:	7903      	ldrb	r3, [r0, #4]
    2f9a:	2b0f      	cmp	r3, #15
    2f9c:	d9f6      	bls.n	2f8c <PHY_DataInd+0xc>
	if (NULL == (frame = nwkFrameAlloc())) {
    2f9e:	4b0a      	ldr	r3, [pc, #40]	; (2fc8 <PHY_DataInd+0x48>)
    2fa0:	4798      	blx	r3
    2fa2:	2800      	cmp	r0, #0
    2fa4:	d0f2      	beq.n	2f8c <PHY_DataInd+0xc>
	frame->state = NWK_RX_STATE_RECEIVED;
    2fa6:	2320      	movs	r3, #32
    2fa8:	7003      	strb	r3, [r0, #0]
	frame->size = ind->size;
    2faa:	7923      	ldrb	r3, [r4, #4]
    2fac:	7043      	strb	r3, [r0, #1]
	frame->rx.lqi = ind->lqi;
    2fae:	7962      	ldrb	r2, [r4, #5]
    2fb0:	2385      	movs	r3, #133	; 0x85
    2fb2:	54c2      	strb	r2, [r0, r3]
	frame->rx.rssi = ind->rssi;
    2fb4:	2206      	movs	r2, #6
    2fb6:	56a2      	ldrsb	r2, [r4, r2]
    2fb8:	3301      	adds	r3, #1
    2fba:	54c2      	strb	r2, [r0, r3]
	memcpy(frame->data, ind->data, ind->size);
    2fbc:	3002      	adds	r0, #2
    2fbe:	7922      	ldrb	r2, [r4, #4]
    2fc0:	6821      	ldr	r1, [r4, #0]
    2fc2:	4b02      	ldr	r3, [pc, #8]	; (2fcc <PHY_DataInd+0x4c>)
    2fc4:	4798      	blx	r3
    2fc6:	e7e1      	b.n	2f8c <PHY_DataInd+0xc>
    2fc8:	00002a6d 	.word	0x00002a6d
    2fcc:	00004e49 	.word	0x00004e49

00002fd0 <nwkRxDecryptConf>:
	if (status) {
    2fd0:	2900      	cmp	r1, #0
    2fd2:	d102      	bne.n	2fda <nwkRxDecryptConf+0xa>
		frame->state = NWK_RX_STATE_FINISH;
    2fd4:	2324      	movs	r3, #36	; 0x24
    2fd6:	7003      	strb	r3, [r0, #0]
}
    2fd8:	4770      	bx	lr
		frame->state = NWK_RX_STATE_INDICATE;
    2fda:	2322      	movs	r3, #34	; 0x22
    2fdc:	7003      	strb	r3, [r0, #0]
    2fde:	e7fb      	b.n	2fd8 <nwkRxDecryptConf+0x8>

00002fe0 <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    2fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fe2:	46ce      	mov	lr, r9
    2fe4:	4647      	mov	r7, r8
    2fe6:	b580      	push	{r7, lr}
    2fe8:	b087      	sub	sp, #28
	NwkFrame_t *frame = NULL;
    2fea:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    2fec:	4dd5      	ldr	r5, [pc, #852]	; (3344 <nwkRxTaskHandler+0x364>)
		switch (frame->state) {
    2fee:	4ed6      	ldr	r6, [pc, #856]	; (3348 <nwkRxTaskHandler+0x368>)
	while (NULL != (frame = nwkFrameNext(frame))) {
    2ff0:	e0df      	b.n	31b2 <nwkRxTaskHandler+0x1d2>
	frame->state = NWK_RX_STATE_FINISH;
    2ff2:	2324      	movs	r3, #36	; 0x24
    2ff4:	7023      	strb	r3, [r4, #0]
	if (header->nwkFcf.multicast) {
    2ff6:	7ae2      	ldrb	r2, [r4, #11]
    2ff8:	0713      	lsls	r3, r2, #28
    2ffa:	d500      	bpl.n	2ffe <nwkRxTaskHandler+0x1e>
    2ffc:	e0d9      	b.n	31b2 <nwkRxTaskHandler+0x1d2>
	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    2ffe:	7960      	ldrb	r0, [r4, #5]
    3000:	79a3      	ldrb	r3, [r4, #6]
    3002:	021b      	lsls	r3, r3, #8
    3004:	4303      	orrs	r3, r0
    3006:	49d1      	ldr	r1, [pc, #836]	; (334c <nwkRxTaskHandler+0x36c>)
    3008:	428b      	cmp	r3, r1
    300a:	d018      	beq.n	303e <nwkRxTaskHandler+0x5e>
	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    300c:	7be0      	ldrb	r0, [r4, #15]
    300e:	7c23      	ldrb	r3, [r4, #16]
    3010:	021b      	lsls	r3, r3, #8
    3012:	4303      	orrs	r3, r0
    3014:	49cd      	ldr	r1, [pc, #820]	; (334c <nwkRxTaskHandler+0x36c>)
    3016:	428b      	cmp	r3, r1
    3018:	d025      	beq.n	3066 <nwkRxTaskHandler+0x86>
	if (nwkIb.addr == header->nwkSrcAddr) {
    301a:	7b61      	ldrb	r1, [r4, #13]
    301c:	7ba3      	ldrb	r3, [r4, #14]
    301e:	021b      	lsls	r3, r3, #8
    3020:	4acb      	ldr	r2, [pc, #812]	; (3350 <nwkRxTaskHandler+0x370>)
    3022:	8812      	ldrh	r2, [r2, #0]
    3024:	430b      	orrs	r3, r1
    3026:	429a      	cmp	r2, r3
    3028:	d100      	bne.n	302c <nwkRxTaskHandler+0x4c>
    302a:	e0c2      	b.n	31b2 <nwkRxTaskHandler+0x1d2>
	nwkRouteFrameReceived(frame);
    302c:	0020      	movs	r0, r4
    302e:	4bc9      	ldr	r3, [pc, #804]	; (3354 <nwkRxTaskHandler+0x374>)
    3030:	4798      	blx	r3
    3032:	49c9      	ldr	r1, [pc, #804]	; (3358 <nwkRxTaskHandler+0x378>)
    3034:	2000      	movs	r0, #0
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    3036:	2300      	movs	r3, #0
    3038:	469c      	mov	ip, r3
		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    303a:	1ca7      	adds	r7, r4, #2
    303c:	e039      	b.n	30b2 <nwkRxTaskHandler+0xd2>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    303e:	7be0      	ldrb	r0, [r4, #15]
    3040:	7c23      	ldrb	r3, [r4, #16]
    3042:	021b      	lsls	r3, r3, #8
    3044:	4303      	orrs	r3, r0
    3046:	49c2      	ldr	r1, [pc, #776]	; (3350 <nwkRxTaskHandler+0x370>)
    3048:	8809      	ldrh	r1, [r1, #0]
    304a:	4299      	cmp	r1, r3
    304c:	d003      	beq.n	3056 <nwkRxTaskHandler+0x76>
    304e:	49bf      	ldr	r1, [pc, #764]	; (334c <nwkRxTaskHandler+0x36c>)
    3050:	428b      	cmp	r3, r1
    3052:	d000      	beq.n	3056 <nwkRxTaskHandler+0x76>
    3054:	e0ad      	b.n	31b2 <nwkRxTaskHandler+0x1d2>
			if (header->nwkFcf.security) {
    3056:	0793      	lsls	r3, r2, #30
    3058:	d502      	bpl.n	3060 <nwkRxTaskHandler+0x80>
				frame->state = NWK_RX_STATE_DECRYPT;
    305a:	2321      	movs	r3, #33	; 0x21
    305c:	7023      	strb	r3, [r4, #0]
    305e:	e0a8      	b.n	31b2 <nwkRxTaskHandler+0x1d2>
			frame->state = NWK_RX_STATE_INDICATE;
    3060:	2322      	movs	r3, #34	; 0x22
    3062:	7023      	strb	r3, [r4, #0]
    3064:	e0a5      	b.n	31b2 <nwkRxTaskHandler+0x1d2>
	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    3066:	07d3      	lsls	r3, r2, #31
    3068:	d5d7      	bpl.n	301a <nwkRxTaskHandler+0x3a>
    306a:	e0a2      	b.n	31b2 <nwkRxTaskHandler+0x1d2>
				entry->mask |= (1 << diff);
    306c:	9a01      	ldr	r2, [sp, #4]
    306e:	0050      	lsls	r0, r2, #1
    3070:	1882      	adds	r2, r0, r2
    3072:	0052      	lsls	r2, r2, #1
    3074:	48b8      	ldr	r0, [pc, #736]	; (3358 <nwkRxTaskHandler+0x378>)
    3076:	1880      	adds	r0, r0, r2
    3078:	2201      	movs	r2, #1
    307a:	409a      	lsls	r2, r3
    307c:	4311      	orrs	r1, r2
    307e:	70c1      	strb	r1, [r0, #3]
    3080:	e060      	b.n	3144 <nwkRxTaskHandler+0x164>
				entry->seq = header->nwkSeq;
    3082:	4ab5      	ldr	r2, [pc, #724]	; (3358 <nwkRxTaskHandler+0x378>)
    3084:	4694      	mov	ip, r2
    3086:	9a01      	ldr	r2, [sp, #4]
    3088:	0057      	lsls	r7, r2, #1
    308a:	18b9      	adds	r1, r7, r2
    308c:	0049      	lsls	r1, r1, #1
    308e:	4461      	add	r1, ip
    3090:	7088      	strb	r0, [r1, #2]
				entry->mask = (entry->mask << shift) | 1;
    3092:	78c8      	ldrb	r0, [r1, #3]
				uint8_t shift = -(int8_t)diff;
    3094:	425b      	negs	r3, r3
				entry->mask = (entry->mask << shift) | 1;
    3096:	b2db      	uxtb	r3, r3
    3098:	4098      	lsls	r0, r3
    309a:	0003      	movs	r3, r0
    309c:	2001      	movs	r0, #1
    309e:	4303      	orrs	r3, r0
    30a0:	70cb      	strb	r3, [r1, #3]
				entry->ttl = DUPLICATE_REJECTION_TTL;
    30a2:	231f      	movs	r3, #31
    30a4:	710b      	strb	r3, [r1, #4]
    30a6:	e04d      	b.n	3144 <nwkRxTaskHandler+0x164>
			freeEntry = entry;
    30a8:	468c      	mov	ip, r1
    30aa:	3001      	adds	r0, #1
    30ac:	3106      	adds	r1, #6
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    30ae:	280a      	cmp	r0, #10
    30b0:	d036      	beq.n	3120 <nwkRxTaskHandler+0x140>
		entry = &nwkRxDuplicateRejectionTable[i];
    30b2:	9001      	str	r0, [sp, #4]
		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    30b4:	790b      	ldrb	r3, [r1, #4]
    30b6:	2b00      	cmp	r3, #0
    30b8:	d0f6      	beq.n	30a8 <nwkRxTaskHandler+0xc8>
    30ba:	7afb      	ldrb	r3, [r7, #11]
    30bc:	4699      	mov	r9, r3
    30be:	7b3b      	ldrb	r3, [r7, #12]
    30c0:	021b      	lsls	r3, r3, #8
    30c2:	880a      	ldrh	r2, [r1, #0]
    30c4:	4690      	mov	r8, r2
    30c6:	464a      	mov	r2, r9
    30c8:	4313      	orrs	r3, r2
    30ca:	4598      	cmp	r8, r3
    30cc:	d1ed      	bne.n	30aa <nwkRxTaskHandler+0xca>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    30ce:	7b20      	ldrb	r0, [r4, #12]
    30d0:	9f01      	ldr	r7, [sp, #4]
    30d2:	007b      	lsls	r3, r7, #1
    30d4:	46bc      	mov	ip, r7
    30d6:	4463      	add	r3, ip
    30d8:	005b      	lsls	r3, r3, #1
    30da:	499f      	ldr	r1, [pc, #636]	; (3358 <nwkRxTaskHandler+0x378>)
    30dc:	18cb      	adds	r3, r1, r3
    30de:	789b      	ldrb	r3, [r3, #2]
    30e0:	1a1b      	subs	r3, r3, r0
    30e2:	b2db      	uxtb	r3, r3
			if (diff < 8) {
    30e4:	2b07      	cmp	r3, #7
    30e6:	d8cc      	bhi.n	3082 <nwkRxTaskHandler+0xa2>
				if (entry->mask & (1 << diff)) {
    30e8:	0079      	lsls	r1, r7, #1
    30ea:	4461      	add	r1, ip
    30ec:	0049      	lsls	r1, r1, #1
    30ee:	489a      	ldr	r0, [pc, #616]	; (3358 <nwkRxTaskHandler+0x378>)
    30f0:	1841      	adds	r1, r0, r1
    30f2:	78c9      	ldrb	r1, [r1, #3]
    30f4:	0008      	movs	r0, r1
    30f6:	4118      	asrs	r0, r3
    30f8:	07c2      	lsls	r2, r0, #31
    30fa:	d5b7      	bpl.n	306c <nwkRxTaskHandler+0x8c>
					if (nwkIb.addr == header->macDstAddr) {
    30fc:	79e1      	ldrb	r1, [r4, #7]
    30fe:	7a23      	ldrb	r3, [r4, #8]
    3100:	021b      	lsls	r3, r3, #8
    3102:	4a93      	ldr	r2, [pc, #588]	; (3350 <nwkRxTaskHandler+0x370>)
    3104:	8812      	ldrh	r2, [r2, #0]
    3106:	430b      	orrs	r3, r1
    3108:	429a      	cmp	r2, r3
    310a:	d152      	bne.n	31b2 <nwkRxTaskHandler+0x1d2>
								header->nwkFcf.multicast);
    310c:	7ae1      	ldrb	r1, [r4, #11]
    310e:	0709      	lsls	r1, r1, #28
						nwkRouteRemove(
    3110:	0fc9      	lsrs	r1, r1, #31
    3112:	7be2      	ldrb	r2, [r4, #15]
    3114:	7c20      	ldrb	r0, [r4, #16]
    3116:	0200      	lsls	r0, r0, #8
    3118:	4310      	orrs	r0, r2
    311a:	4b90      	ldr	r3, [pc, #576]	; (335c <nwkRxTaskHandler+0x37c>)
    311c:	4798      	blx	r3
    311e:	e048      	b.n	31b2 <nwkRxTaskHandler+0x1d2>
	if (NULL == freeEntry) {
    3120:	4663      	mov	r3, ip
    3122:	2b00      	cmp	r3, #0
    3124:	d045      	beq.n	31b2 <nwkRxTaskHandler+0x1d2>
	freeEntry->src = header->nwkSrcAddr;
    3126:	7b61      	ldrb	r1, [r4, #13]
    3128:	7ba3      	ldrb	r3, [r4, #14]
    312a:	021b      	lsls	r3, r3, #8
    312c:	430b      	orrs	r3, r1
    312e:	4661      	mov	r1, ip
    3130:	800b      	strh	r3, [r1, #0]
	freeEntry->seq = header->nwkSeq;
    3132:	7b23      	ldrb	r3, [r4, #12]
    3134:	708b      	strb	r3, [r1, #2]
	freeEntry->mask = 1;
    3136:	2301      	movs	r3, #1
    3138:	70cb      	strb	r3, [r1, #3]
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    313a:	331e      	adds	r3, #30
    313c:	710b      	strb	r3, [r1, #4]
	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    313e:	4888      	ldr	r0, [pc, #544]	; (3360 <nwkRxTaskHandler+0x380>)
    3140:	4b88      	ldr	r3, [pc, #544]	; (3364 <nwkRxTaskHandler+0x384>)
    3142:	4798      	blx	r3
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    3144:	79e1      	ldrb	r1, [r4, #7]
    3146:	7a23      	ldrb	r3, [r4, #8]
    3148:	021b      	lsls	r3, r3, #8
    314a:	430b      	orrs	r3, r1
    314c:	4a7f      	ldr	r2, [pc, #508]	; (334c <nwkRxTaskHandler+0x36c>)
    314e:	4293      	cmp	r3, r2
    3150:	d013      	beq.n	317a <nwkRxTaskHandler+0x19a>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    3152:	4b7f      	ldr	r3, [pc, #508]	; (3350 <nwkRxTaskHandler+0x370>)
    3154:	881a      	ldrh	r2, [r3, #0]
    3156:	7be0      	ldrb	r0, [r4, #15]
    3158:	7c23      	ldrb	r3, [r4, #16]
    315a:	021b      	lsls	r3, r3, #8
    315c:	4303      	orrs	r3, r0
    315e:	429a      	cmp	r2, r3
    3160:	d01a      	beq.n	3198 <nwkRxTaskHandler+0x1b8>
    3162:	497a      	ldr	r1, [pc, #488]	; (334c <nwkRxTaskHandler+0x36c>)
    3164:	428b      	cmp	r3, r1
    3166:	d017      	beq.n	3198 <nwkRxTaskHandler+0x1b8>
		else if (nwkIb.addr == header->macDstAddr) {
    3168:	79e0      	ldrb	r0, [r4, #7]
    316a:	7a23      	ldrb	r3, [r4, #8]
    316c:	021b      	lsls	r3, r3, #8
    316e:	4303      	orrs	r3, r0
    3170:	4293      	cmp	r3, r2
    3172:	d11e      	bne.n	31b2 <nwkRxTaskHandler+0x1d2>
			frame->state = NWK_RX_STATE_ROUTE;
    3174:	2323      	movs	r3, #35	; 0x23
    3176:	7023      	strb	r3, [r4, #0]
    3178:	e01b      	b.n	31b2 <nwkRxTaskHandler+0x1d2>
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    317a:	4b75      	ldr	r3, [pc, #468]	; (3350 <nwkRxTaskHandler+0x370>)
    317c:	881a      	ldrh	r2, [r3, #0]
				header->nwkDstAddr &&
    317e:	7be0      	ldrb	r0, [r4, #15]
    3180:	7c23      	ldrb	r3, [r4, #16]
    3182:	021b      	lsls	r3, r3, #8
    3184:	4303      	orrs	r3, r0
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    3186:	429a      	cmp	r2, r3
    3188:	d006      	beq.n	3198 <nwkRxTaskHandler+0x1b8>
				0 == header->nwkFcf.linkLocal) {
    318a:	7ae1      	ldrb	r1, [r4, #11]
				header->nwkDstAddr &&
    318c:	0749      	lsls	r1, r1, #29
    318e:	d4e8      	bmi.n	3162 <nwkRxTaskHandler+0x182>
			nwkTxBroadcastFrame(frame);
    3190:	0020      	movs	r0, r4
    3192:	4b75      	ldr	r3, [pc, #468]	; (3368 <nwkRxTaskHandler+0x388>)
    3194:	4798      	blx	r3
    3196:	e7dc      	b.n	3152 <nwkRxTaskHandler+0x172>
			if (header->nwkFcf.security) {
    3198:	7ae3      	ldrb	r3, [r4, #11]
    319a:	079b      	lsls	r3, r3, #30
    319c:	d502      	bpl.n	31a4 <nwkRxTaskHandler+0x1c4>
				frame->state = NWK_RX_STATE_DECRYPT;
    319e:	2321      	movs	r3, #33	; 0x21
    31a0:	7023      	strb	r3, [r4, #0]
    31a2:	e006      	b.n	31b2 <nwkRxTaskHandler+0x1d2>
			frame->state = NWK_RX_STATE_INDICATE;
    31a4:	2322      	movs	r3, #34	; 0x22
    31a6:	7023      	strb	r3, [r4, #0]
    31a8:	e003      	b.n	31b2 <nwkRxTaskHandler+0x1d2>
		break;

#ifdef NWK_ENABLE_SECURITY
		case NWK_RX_STATE_DECRYPT:
		{
			nwkSecurityProcess(frame, false);
    31aa:	2100      	movs	r1, #0
    31ac:	0020      	movs	r0, r4
    31ae:	4b6f      	ldr	r3, [pc, #444]	; (336c <nwkRxTaskHandler+0x38c>)
    31b0:	4798      	blx	r3
	while (NULL != (frame = nwkFrameNext(frame))) {
    31b2:	0020      	movs	r0, r4
    31b4:	47a8      	blx	r5
    31b6:	1e04      	subs	r4, r0, #0
    31b8:	d100      	bne.n	31bc <nwkRxTaskHandler+0x1dc>
    31ba:	e0f9      	b.n	33b0 <nwkRxTaskHandler+0x3d0>
		switch (frame->state) {
    31bc:	7823      	ldrb	r3, [r4, #0]
    31be:	3b20      	subs	r3, #32
    31c0:	b2da      	uxtb	r2, r3
    31c2:	2a04      	cmp	r2, #4
    31c4:	d8f5      	bhi.n	31b2 <nwkRxTaskHandler+0x1d2>
    31c6:	0093      	lsls	r3, r2, #2
    31c8:	58f3      	ldr	r3, [r6, r3]
    31ca:	469f      	mov	pc, r3
	nwkRxAckControl = 0;
    31cc:	2200      	movs	r2, #0
    31ce:	4b68      	ldr	r3, [pc, #416]	; (3370 <nwkRxTaskHandler+0x390>)
    31d0:	701a      	strb	r2, [r3, #0]
	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    31d2:	7c63      	ldrb	r3, [r4, #17]
    31d4:	091b      	lsrs	r3, r3, #4
    31d6:	469c      	mov	ip, r3
    31d8:	466a      	mov	r2, sp
    31da:	7113      	strb	r3, [r2, #4]
    31dc:	7913      	ldrb	r3, [r2, #4]
    31de:	3302      	adds	r3, #2
    31e0:	009b      	lsls	r3, r3, #2
    31e2:	4a5b      	ldr	r2, [pc, #364]	; (3350 <nwkRxTaskHandler+0x370>)
    31e4:	5899      	ldr	r1, [r3, r2]
    31e6:	2900      	cmp	r1, #0
    31e8:	d100      	bne.n	31ec <nwkRxTaskHandler+0x20c>
    31ea:	e0cb      	b.n	3384 <nwkRxTaskHandler+0x3a4>
	ind.srcAddr = header->nwkSrcAddr;
    31ec:	1ca0      	adds	r0, r4, #2
    31ee:	7b62      	ldrb	r2, [r4, #13]
    31f0:	7ba3      	ldrb	r3, [r4, #14]
    31f2:	021b      	lsls	r3, r3, #8
    31f4:	4313      	orrs	r3, r2
    31f6:	4699      	mov	r9, r3
    31f8:	ab02      	add	r3, sp, #8
    31fa:	464a      	mov	r2, r9
    31fc:	801a      	strh	r2, [r3, #0]
	ind.dstAddr = header->nwkDstAddr;
    31fe:	7be2      	ldrb	r2, [r4, #15]
    3200:	7c27      	ldrb	r7, [r4, #16]
    3202:	023f      	lsls	r7, r7, #8
    3204:	4317      	orrs	r7, r2
    3206:	805f      	strh	r7, [r3, #2]
	ind.srcEndpoint = header->nwkSrcEndpoint;
    3208:	7c62      	ldrb	r2, [r4, #17]
    320a:	0712      	lsls	r2, r2, #28
    320c:	0f12      	lsrs	r2, r2, #28
    320e:	711a      	strb	r2, [r3, #4]
	ind.dstEndpoint = header->nwkDstEndpoint;
    3210:	4662      	mov	r2, ip
    3212:	715a      	strb	r2, [r3, #5]
	ind.data = frame->payload;
    3214:	2281      	movs	r2, #129	; 0x81
    3216:	5ca3      	ldrb	r3, [r4, r2]
    3218:	3201      	adds	r2, #1
    321a:	5ca2      	ldrb	r2, [r4, r2]
    321c:	0212      	lsls	r2, r2, #8
    321e:	4313      	orrs	r3, r2
    3220:	2283      	movs	r2, #131	; 0x83
    3222:	5ca2      	ldrb	r2, [r4, r2]
    3224:	0412      	lsls	r2, r2, #16
    3226:	4313      	orrs	r3, r2
    3228:	2284      	movs	r2, #132	; 0x84
    322a:	5ca2      	ldrb	r2, [r4, r2]
    322c:	0612      	lsls	r2, r2, #24
    322e:	431a      	orrs	r2, r3
    3230:	9204      	str	r2, [sp, #16]

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
	return frame->size - (frame->payload - frame->data);
    3232:	1a12      	subs	r2, r2, r0
    3234:	7863      	ldrb	r3, [r4, #1]
    3236:	1a9a      	subs	r2, r3, r2
	ind.size = nwkFramePayloadSize(frame);
    3238:	ab02      	add	r3, sp, #8
    323a:	731a      	strb	r2, [r3, #12]
	ind.lqi = frame->rx.lqi;
    323c:	2285      	movs	r2, #133	; 0x85
    323e:	5ca2      	ldrb	r2, [r4, r2]
    3240:	735a      	strb	r2, [r3, #13]
	ind.rssi = frame->rx.rssi;
    3242:	2286      	movs	r2, #134	; 0x86
    3244:	5ca2      	ldrb	r2, [r4, r2]
    3246:	739a      	strb	r2, [r3, #14]
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    3248:	7ae0      	ldrb	r0, [r4, #11]
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    324a:	2203      	movs	r2, #3
    324c:	4002      	ands	r2, r0
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    324e:	0743      	lsls	r3, r0, #29
    3250:	0fdb      	lsrs	r3, r3, #31
    3252:	015b      	lsls	r3, r3, #5
    3254:	431a      	orrs	r2, r3
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    3256:	0700      	lsls	r0, r0, #28
    3258:	0fc0      	lsrs	r0, r0, #31
    325a:	0180      	lsls	r0, r0, #6
    325c:	4310      	orrs	r0, r2
		|= (NWK_BROADCAST_ADDR ==
    325e:	4b45      	ldr	r3, [pc, #276]	; (3374 <nwkRxTaskHandler+0x394>)
    3260:	469c      	mov	ip, r3
    3262:	4467      	add	r7, ip
    3264:	427a      	negs	r2, r7
    3266:	4157      	adcs	r7, r2
    3268:	00bf      	lsls	r7, r7, #2
    326a:	4338      	orrs	r0, r7
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    326c:	1ca7      	adds	r7, r4, #2
    326e:	7a63      	ldrb	r3, [r4, #9]
    3270:	7aa2      	ldrb	r2, [r4, #10]
    3272:	0212      	lsls	r2, r2, #8
		|= (header->nwkSrcAddr ==
    3274:	431a      	orrs	r2, r3
    3276:	464b      	mov	r3, r9
    3278:	1a9b      	subs	r3, r3, r2
    327a:	425a      	negs	r2, r3
    327c:	4153      	adcs	r3, r2
    327e:	00db      	lsls	r3, r3, #3
    3280:	4303      	orrs	r3, r0
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    3282:	0038      	movs	r0, r7
    3284:	78ff      	ldrb	r7, [r7, #3]
    3286:	7902      	ldrb	r2, [r0, #4]
    3288:	0212      	lsls	r2, r2, #8
		|= (NWK_BROADCAST_PANID ==
    328a:	433a      	orrs	r2, r7
    328c:	4839      	ldr	r0, [pc, #228]	; (3374 <nwkRxTaskHandler+0x394>)
    328e:	4684      	mov	ip, r0
    3290:	4462      	add	r2, ip
    3292:	4250      	negs	r0, r2
    3294:	4142      	adcs	r2, r0
    3296:	0112      	lsls	r2, r2, #4
    3298:	431a      	orrs	r2, r3
    329a:	ab02      	add	r3, sp, #8
    329c:	719a      	strb	r2, [r3, #6]
	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    329e:	0018      	movs	r0, r3
    32a0:	4788      	blx	r1
	if (0 == frame->header.nwkFcf.ackRequest) {
    32a2:	7ae2      	ldrb	r2, [r4, #11]
		ack = false;
    32a4:	07d3      	lsls	r3, r2, #31
    32a6:	17db      	asrs	r3, r3, #31
    32a8:	4018      	ands	r0, r3
	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    32aa:	79e1      	ldrb	r1, [r4, #7]
    32ac:	7a23      	ldrb	r3, [r4, #8]
    32ae:	021b      	lsls	r3, r3, #8
    32b0:	430b      	orrs	r3, r1
    32b2:	4926      	ldr	r1, [pc, #152]	; (334c <nwkRxTaskHandler+0x36c>)
    32b4:	428b      	cmp	r3, r1
    32b6:	d067      	beq.n	3388 <nwkRxTaskHandler+0x3a8>
	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    32b8:	7962      	ldrb	r2, [r4, #5]
    32ba:	79a3      	ldrb	r3, [r4, #6]
    32bc:	021b      	lsls	r3, r3, #8
    32be:	4313      	orrs	r3, r2
    32c0:	4a22      	ldr	r2, [pc, #136]	; (334c <nwkRxTaskHandler+0x36c>)
    32c2:	4293      	cmp	r3, r2
    32c4:	d03b      	beq.n	333e <nwkRxTaskHandler+0x35e>
	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    32c6:	4b22      	ldr	r3, [pc, #136]	; (3350 <nwkRxTaskHandler+0x370>)
    32c8:	881a      	ldrh	r2, [r3, #0]
    32ca:	4b20      	ldr	r3, [pc, #128]	; (334c <nwkRxTaskHandler+0x36c>)
    32cc:	429a      	cmp	r2, r3
    32ce:	d036      	beq.n	333e <nwkRxTaskHandler+0x35e>
	if (ack) {
    32d0:	2800      	cmp	r0, #0
    32d2:	d034      	beq.n	333e <nwkRxTaskHandler+0x35e>
	if (NULL == (ack = nwkFrameAlloc())) {
    32d4:	4b28      	ldr	r3, [pc, #160]	; (3378 <nwkRxTaskHandler+0x398>)
    32d6:	4798      	blx	r3
    32d8:	1e07      	subs	r7, r0, #0
    32da:	d030      	beq.n	333e <nwkRxTaskHandler+0x35e>
	nwkFrameCommandInit(ack);
    32dc:	4b27      	ldr	r3, [pc, #156]	; (337c <nwkRxTaskHandler+0x39c>)
    32de:	4798      	blx	r3
	ack->size += sizeof(NwkCommandAck_t);
    32e0:	787b      	ldrb	r3, [r7, #1]
    32e2:	3303      	adds	r3, #3
    32e4:	707b      	strb	r3, [r7, #1]
	ack->tx.confirm = NULL;
    32e6:	2200      	movs	r2, #0
    32e8:	2389      	movs	r3, #137	; 0x89
    32ea:	54fa      	strb	r2, [r7, r3]
    32ec:	003b      	movs	r3, r7
    32ee:	3389      	adds	r3, #137	; 0x89
    32f0:	705a      	strb	r2, [r3, #1]
    32f2:	709a      	strb	r2, [r3, #2]
    32f4:	70da      	strb	r2, [r3, #3]
	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    32f6:	7ae3      	ldrb	r3, [r4, #11]
    32f8:	3202      	adds	r2, #2
    32fa:	401a      	ands	r2, r3
    32fc:	7afb      	ldrb	r3, [r7, #11]
    32fe:	2102      	movs	r1, #2
    3300:	438b      	bics	r3, r1
    3302:	4313      	orrs	r3, r2
    3304:	72fb      	strb	r3, [r7, #11]
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    3306:	7b62      	ldrb	r2, [r4, #13]
    3308:	7ba3      	ldrb	r3, [r4, #14]
    330a:	73fa      	strb	r2, [r7, #15]
    330c:	743b      	strb	r3, [r7, #16]
	command = (NwkCommandAck_t *)ack->payload;
    330e:	2381      	movs	r3, #129	; 0x81
    3310:	5cfb      	ldrb	r3, [r7, r3]
    3312:	2282      	movs	r2, #130	; 0x82
    3314:	5cba      	ldrb	r2, [r7, r2]
    3316:	0212      	lsls	r2, r2, #8
    3318:	431a      	orrs	r2, r3
    331a:	2383      	movs	r3, #131	; 0x83
    331c:	5cfb      	ldrb	r3, [r7, r3]
    331e:	041b      	lsls	r3, r3, #16
    3320:	431a      	orrs	r2, r3
    3322:	2384      	movs	r3, #132	; 0x84
    3324:	5cfb      	ldrb	r3, [r7, r3]
    3326:	061b      	lsls	r3, r3, #24
    3328:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ACK;
    332a:	2200      	movs	r2, #0
    332c:	701a      	strb	r2, [r3, #0]
	command->control = nwkRxAckControl;
    332e:	4a10      	ldr	r2, [pc, #64]	; (3370 <nwkRxTaskHandler+0x390>)
    3330:	7812      	ldrb	r2, [r2, #0]
    3332:	709a      	strb	r2, [r3, #2]
	command->seq = frame->header.nwkSeq;
    3334:	7b22      	ldrb	r2, [r4, #12]
    3336:	705a      	strb	r2, [r3, #1]
	nwkTxFrame(ack);
    3338:	0038      	movs	r0, r7
    333a:	4b11      	ldr	r3, [pc, #68]	; (3380 <nwkRxTaskHandler+0x3a0>)
    333c:	4798      	blx	r3
	frame->state = NWK_RX_STATE_FINISH;
    333e:	2324      	movs	r3, #36	; 0x24
    3340:	7023      	strb	r3, [r4, #0]
    3342:	e736      	b.n	31b2 <nwkRxTaskHandler+0x1d2>
    3344:	00002af5 	.word	0x00002af5
    3348:	0000a4b0 	.word	0x0000a4b0
    334c:	0000ffff 	.word	0x0000ffff
    3350:	2000162c 	.word	0x2000162c
    3354:	00002c55 	.word	0x00002c55
    3358:	2000070c 	.word	0x2000070c
    335c:	00002c3d 	.word	0x00002c3d
    3360:	20000748 	.word	0x20000748
    3364:	00003d9d 	.word	0x00003d9d
    3368:	000037d9 	.word	0x000037d9
    336c:	000033dd 	.word	0x000033dd
    3370:	20000708 	.word	0x20000708
    3374:	ffff0001 	.word	0xffff0001
    3378:	00002a6d 	.word	0x00002a6d
    337c:	00002b31 	.word	0x00002b31
    3380:	0000371d 	.word	0x0000371d
		return false;
    3384:	2000      	movs	r0, #0
    3386:	e78c      	b.n	32a2 <nwkRxTaskHandler+0x2c2>
			nwkIb.addr == frame->header.nwkDstAddr &&
    3388:	7be7      	ldrb	r7, [r4, #15]
    338a:	7c23      	ldrb	r3, [r4, #16]
    338c:	021b      	lsls	r3, r3, #8
	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    338e:	490b      	ldr	r1, [pc, #44]	; (33bc <nwkRxTaskHandler+0x3dc>)
    3390:	8809      	ldrh	r1, [r1, #0]
    3392:	433b      	orrs	r3, r7
    3394:	4299      	cmp	r1, r3
    3396:	d18f      	bne.n	32b8 <nwkRxTaskHandler+0x2d8>
			nwkIb.addr == frame->header.nwkDstAddr &&
    3398:	0713      	lsls	r3, r2, #28
    339a:	d48d      	bmi.n	32b8 <nwkRxTaskHandler+0x2d8>
		ack = true;
    339c:	2001      	movs	r0, #1
    339e:	e78b      	b.n	32b8 <nwkRxTaskHandler+0x2d8>
		break;

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    33a0:	0020      	movs	r0, r4
    33a2:	4b07      	ldr	r3, [pc, #28]	; (33c0 <nwkRxTaskHandler+0x3e0>)
    33a4:	4798      	blx	r3
		}
		break;
    33a6:	e704      	b.n	31b2 <nwkRxTaskHandler+0x1d2>
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    33a8:	0020      	movs	r0, r4
    33aa:	4b06      	ldr	r3, [pc, #24]	; (33c4 <nwkRxTaskHandler+0x3e4>)
    33ac:	4798      	blx	r3
		}
		break;
    33ae:	e700      	b.n	31b2 <nwkRxTaskHandler+0x1d2>
		}
	}
}
    33b0:	b007      	add	sp, #28
    33b2:	bc0c      	pop	{r2, r3}
    33b4:	4690      	mov	r8, r2
    33b6:	4699      	mov	r9, r3
    33b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33ba:	46c0      	nop			; (mov r8, r8)
    33bc:	2000162c 	.word	0x2000162c
    33c0:	00002ddd 	.word	0x00002ddd
    33c4:	00002ae1 	.word	0x00002ae1

000033c8 <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    33c8:	2300      	movs	r3, #0
    33ca:	4a02      	ldr	r2, [pc, #8]	; (33d4 <nwkSecurityInit+0xc>)
    33cc:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    33ce:	4a02      	ldr	r2, [pc, #8]	; (33d8 <nwkSecurityInit+0x10>)
    33d0:	6013      	str	r3, [r2, #0]
}
    33d2:	4770      	bx	lr
    33d4:	20000760 	.word	0x20000760
    33d8:	2000075c 	.word	0x2000075c

000033dc <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
	if (encrypt) {
    33dc:	2900      	cmp	r1, #0
    33de:	d106      	bne.n	33ee <nwkSecurityProcess+0x12>
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
	} else {
		frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    33e0:	2331      	movs	r3, #49	; 0x31
    33e2:	7003      	strb	r3, [r0, #0]
	}

	++nwkSecurityActiveFrames;
    33e4:	4a03      	ldr	r2, [pc, #12]	; (33f4 <nwkSecurityProcess+0x18>)
    33e6:	7813      	ldrb	r3, [r2, #0]
    33e8:	3301      	adds	r3, #1
    33ea:	7013      	strb	r3, [r2, #0]
}
    33ec:	4770      	bx	lr
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    33ee:	2330      	movs	r3, #48	; 0x30
    33f0:	7003      	strb	r3, [r0, #0]
    33f2:	e7f7      	b.n	33e4 <nwkSecurityProcess+0x8>
    33f4:	20000760 	.word	0x20000760

000033f8 <SYS_EncryptConf>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    33f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    33fa:	46c6      	mov	lr, r8
    33fc:	b500      	push	{lr}
	uint8_t *vector = (uint8_t *)nwkSecurityVector;
	uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    33fe:	4b25      	ldr	r3, [pc, #148]	; (3494 <SYS_EncryptConf+0x9c>)
    3400:	681b      	ldr	r3, [r3, #0]
    3402:	469c      	mov	ip, r3
    3404:	2381      	movs	r3, #129	; 0x81
    3406:	4662      	mov	r2, ip
    3408:	5cd1      	ldrb	r1, [r2, r3]
    340a:	3301      	adds	r3, #1
    340c:	5cd3      	ldrb	r3, [r2, r3]
    340e:	021b      	lsls	r3, r3, #8
    3410:	4319      	orrs	r1, r3
    3412:	2383      	movs	r3, #131	; 0x83
    3414:	5cd3      	ldrb	r3, [r2, r3]
    3416:	041b      	lsls	r3, r3, #16
    3418:	430b      	orrs	r3, r1
    341a:	2284      	movs	r2, #132	; 0x84
    341c:	4661      	mov	r1, ip
    341e:	5c89      	ldrb	r1, [r1, r2]
    3420:	0609      	lsls	r1, r1, #24
    3422:	4319      	orrs	r1, r3
    3424:	4b1c      	ldr	r3, [pc, #112]	; (3498 <SYS_EncryptConf+0xa0>)
    3426:	781b      	ldrb	r3, [r3, #0]
    3428:	4698      	mov	r8, r3
	uint8_t block;

	block
		= (nwkSecuritySize <
    342a:	4b1c      	ldr	r3, [pc, #112]	; (349c <SYS_EncryptConf+0xa4>)
    342c:	781e      	ldrb	r6, [r3, #0]
    342e:	1c37      	adds	r7, r6, #0
    3430:	2e10      	cmp	r6, #16
    3432:	d900      	bls.n	3436 <SYS_EncryptConf+0x3e>
    3434:	2710      	movs	r7, #16
    3436:	b2ff      	uxtb	r7, r7
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    3438:	2f00      	cmp	r7, #0
    343a:	d017      	beq.n	346c <SYS_EncryptConf+0x74>
		text[i] ^= vector[i];

		if (nwkSecurityEncrypt) {
    343c:	4b18      	ldr	r3, [pc, #96]	; (34a0 <SYS_EncryptConf+0xa8>)
    343e:	781d      	ldrb	r5, [r3, #0]
    3440:	4441      	add	r1, r8
    3442:	4a18      	ldr	r2, [pc, #96]	; (34a4 <SYS_EncryptConf+0xac>)
    3444:	1e7c      	subs	r4, r7, #1
    3446:	b2e4      	uxtb	r4, r4
    3448:	3401      	adds	r4, #1
    344a:	1914      	adds	r4, r2, r4
    344c:	e006      	b.n	345c <SYS_EncryptConf+0x64>
			vector[i] = text[i];
		} else {
			vector[i] ^= text[i];
    344e:	7810      	ldrb	r0, [r2, #0]
    3450:	4043      	eors	r3, r0
    3452:	7013      	strb	r3, [r2, #0]
    3454:	3101      	adds	r1, #1
    3456:	3201      	adds	r2, #1
	for (uint8_t i = 0; i < block; i++) {
    3458:	42a2      	cmp	r2, r4
    345a:	d007      	beq.n	346c <SYS_EncryptConf+0x74>
		text[i] ^= vector[i];
    345c:	780b      	ldrb	r3, [r1, #0]
    345e:	7810      	ldrb	r0, [r2, #0]
    3460:	4043      	eors	r3, r0
    3462:	700b      	strb	r3, [r1, #0]
		if (nwkSecurityEncrypt) {
    3464:	2d00      	cmp	r5, #0
    3466:	d0f2      	beq.n	344e <SYS_EncryptConf+0x56>
			vector[i] = text[i];
    3468:	7013      	strb	r3, [r2, #0]
    346a:	e7f3      	b.n	3454 <SYS_EncryptConf+0x5c>
		}
	}

	nwkSecurityOffset += block;
    346c:	4643      	mov	r3, r8
    346e:	19db      	adds	r3, r3, r7
    3470:	4a09      	ldr	r2, [pc, #36]	; (3498 <SYS_EncryptConf+0xa0>)
    3472:	7013      	strb	r3, [r2, #0]
	nwkSecuritySize -= block;
    3474:	1bf6      	subs	r6, r6, r7
    3476:	b2f6      	uxtb	r6, r6
    3478:	4b08      	ldr	r3, [pc, #32]	; (349c <SYS_EncryptConf+0xa4>)
    347a:	701e      	strb	r6, [r3, #0]

	if (nwkSecuritySize > 0) {
    347c:	2e00      	cmp	r6, #0
    347e:	d105      	bne.n	348c <SYS_EncryptConf+0x94>
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    3480:	2334      	movs	r3, #52	; 0x34
    3482:	4662      	mov	r2, ip
    3484:	7013      	strb	r3, [r2, #0]
	}
}
    3486:	bc04      	pop	{r2}
    3488:	4690      	mov	r8, r2
    348a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    348c:	2332      	movs	r3, #50	; 0x32
    348e:	4662      	mov	r2, ip
    3490:	7013      	strb	r3, [r2, #0]
    3492:	e7f8      	b.n	3486 <SYS_EncryptConf+0x8e>
    3494:	2000075c 	.word	0x2000075c
    3498:	20000762 	.word	0x20000762
    349c:	20000763 	.word	0x20000763
    34a0:	20000761 	.word	0x20000761
    34a4:	20000764 	.word	0x20000764

000034a8 <nwkSecurityTaskHandler>:

/*************************************************************************//**
*  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    34a8:	b570      	push	{r4, r5, r6, lr}
    34aa:	b082      	sub	sp, #8
	NwkFrame_t *frame = NULL;

	if (0 == nwkSecurityActiveFrames) {
    34ac:	4b55      	ldr	r3, [pc, #340]	; (3604 <nwkSecurityTaskHandler+0x15c>)
    34ae:	781b      	ldrb	r3, [r3, #0]
    34b0:	2b00      	cmp	r3, #0
    34b2:	d008      	beq.n	34c6 <nwkSecurityTaskHandler+0x1e>
		return;
	}

	if (nwkSecurityActiveFrame) {
    34b4:	4b54      	ldr	r3, [pc, #336]	; (3608 <nwkSecurityTaskHandler+0x160>)
    34b6:	681c      	ldr	r4, [r3, #0]
    34b8:	2c00      	cmp	r4, #0
    34ba:	d057      	beq.n	356c <nwkSecurityTaskHandler+0xc4>
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
    34bc:	7823      	ldrb	r3, [r4, #0]
		if (NWK_SECURITY_STATE_CONFIRM ==
    34be:	2b34      	cmp	r3, #52	; 0x34
    34c0:	d003      	beq.n	34ca <nwkSecurityTaskHandler+0x22>
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
			--nwkSecurityActiveFrames;
		} else if (NWK_SECURITY_STATE_PROCESS ==
    34c2:	2b32      	cmp	r3, #50	; 0x32
    34c4:	d047      	beq.n	3556 <nwkSecurityTaskHandler+0xae>
			nwkSecurityActiveFrame = frame;
			nwkSecurityStart();
			return;
		}
	}
}
    34c6:	b002      	add	sp, #8
    34c8:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    34ca:	334d      	adds	r3, #77	; 0x4d
    34cc:	5ce0      	ldrb	r0, [r4, r3]
    34ce:	3301      	adds	r3, #1
    34d0:	5ce3      	ldrb	r3, [r4, r3]
    34d2:	021b      	lsls	r3, r3, #8
    34d4:	4303      	orrs	r3, r0
    34d6:	2283      	movs	r2, #131	; 0x83
    34d8:	5ca0      	ldrb	r0, [r4, r2]
    34da:	0400      	lsls	r0, r0, #16
    34dc:	4303      	orrs	r3, r0
    34de:	3201      	adds	r2, #1
    34e0:	5ca0      	ldrb	r0, [r4, r2]
    34e2:	0600      	lsls	r0, r0, #24
    34e4:	4318      	orrs	r0, r3
    34e6:	4b49      	ldr	r3, [pc, #292]	; (360c <nwkSecurityTaskHandler+0x164>)
    34e8:	781b      	ldrb	r3, [r3, #0]
    34ea:	18c0      	adds	r0, r0, r3
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    34ec:	4b48      	ldr	r3, [pc, #288]	; (3610 <nwkSecurityTaskHandler+0x168>)
    34ee:	681d      	ldr	r5, [r3, #0]
    34f0:	685a      	ldr	r2, [r3, #4]
    34f2:	4055      	eors	r5, r2
    34f4:	689a      	ldr	r2, [r3, #8]
    34f6:	4055      	eors	r5, r2
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    34f8:	68db      	ldr	r3, [r3, #12]
    34fa:	405d      	eors	r5, r3
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    34fc:	9500      	str	r5, [sp, #0]
	if (nwkSecurityEncrypt) {
    34fe:	4b45      	ldr	r3, [pc, #276]	; (3614 <nwkSecurityTaskHandler+0x16c>)
    3500:	781e      	ldrb	r6, [r3, #0]
    3502:	2e00      	cmp	r6, #0
    3504:	d119      	bne.n	353a <nwkSecurityTaskHandler+0x92>
		memcpy((uint8_t *)&tmic, mic, NWK_SECURITY_MIC_SIZE);
    3506:	2204      	movs	r2, #4
    3508:	0001      	movs	r1, r0
    350a:	a801      	add	r0, sp, #4
    350c:	4b42      	ldr	r3, [pc, #264]	; (3618 <nwkSecurityTaskHandler+0x170>)
    350e:	4798      	blx	r3
		return vmic == tmic;
    3510:	9b01      	ldr	r3, [sp, #4]
    3512:	1b5d      	subs	r5, r3, r5
    3514:	426e      	negs	r6, r5
    3516:	416e      	adcs	r6, r5
    3518:	b2f6      	uxtb	r6, r6
			if (nwkSecurityEncrypt) {
    351a:	4b3e      	ldr	r3, [pc, #248]	; (3614 <nwkSecurityTaskHandler+0x16c>)
    351c:	781b      	ldrb	r3, [r3, #0]
    351e:	2b00      	cmp	r3, #0
    3520:	d013      	beq.n	354a <nwkSecurityTaskHandler+0xa2>
				nwkTxEncryptConf(nwkSecurityActiveFrame);
    3522:	4b39      	ldr	r3, [pc, #228]	; (3608 <nwkSecurityTaskHandler+0x160>)
    3524:	6818      	ldr	r0, [r3, #0]
    3526:	4b3d      	ldr	r3, [pc, #244]	; (361c <nwkSecurityTaskHandler+0x174>)
    3528:	4798      	blx	r3
			nwkSecurityActiveFrame = NULL;
    352a:	2200      	movs	r2, #0
    352c:	4b36      	ldr	r3, [pc, #216]	; (3608 <nwkSecurityTaskHandler+0x160>)
    352e:	601a      	str	r2, [r3, #0]
			--nwkSecurityActiveFrames;
    3530:	4a34      	ldr	r2, [pc, #208]	; (3604 <nwkSecurityTaskHandler+0x15c>)
    3532:	7813      	ldrb	r3, [r2, #0]
    3534:	3b01      	subs	r3, #1
    3536:	7013      	strb	r3, [r2, #0]
    3538:	e7c5      	b.n	34c6 <nwkSecurityTaskHandler+0x1e>
		memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    353a:	2204      	movs	r2, #4
    353c:	4669      	mov	r1, sp
    353e:	4b36      	ldr	r3, [pc, #216]	; (3618 <nwkSecurityTaskHandler+0x170>)
    3540:	4798      	blx	r3
		nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    3542:	7863      	ldrb	r3, [r4, #1]
    3544:	3304      	adds	r3, #4
    3546:	7063      	strb	r3, [r4, #1]
    3548:	e7e7      	b.n	351a <nwkSecurityTaskHandler+0x72>
				nwkRxDecryptConf(nwkSecurityActiveFrame,
    354a:	4b2f      	ldr	r3, [pc, #188]	; (3608 <nwkSecurityTaskHandler+0x160>)
    354c:	6818      	ldr	r0, [r3, #0]
    354e:	0031      	movs	r1, r6
    3550:	4b33      	ldr	r3, [pc, #204]	; (3620 <nwkSecurityTaskHandler+0x178>)
    3552:	4798      	blx	r3
    3554:	e7e9      	b.n	352a <nwkSecurityTaskHandler+0x82>
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    3556:	3301      	adds	r3, #1
    3558:	7023      	strb	r3, [r4, #0]
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
    355a:	4932      	ldr	r1, [pc, #200]	; (3624 <nwkSecurityTaskHandler+0x17c>)
    355c:	482c      	ldr	r0, [pc, #176]	; (3610 <nwkSecurityTaskHandler+0x168>)
    355e:	4b32      	ldr	r3, [pc, #200]	; (3628 <nwkSecurityTaskHandler+0x180>)
    3560:	4798      	blx	r3
    3562:	e7b0      	b.n	34c6 <nwkSecurityTaskHandler+0x1e>
		nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    3564:	7863      	ldrb	r3, [r4, #1]
    3566:	3b04      	subs	r3, #4
    3568:	7063      	strb	r3, [r4, #1]
    356a:	e02b      	b.n	35c4 <nwkSecurityTaskHandler+0x11c>
	while (NULL != (frame = nwkFrameNext(frame))) {
    356c:	4d2f      	ldr	r5, [pc, #188]	; (362c <nwkSecurityTaskHandler+0x184>)
    356e:	0020      	movs	r0, r4
    3570:	47a8      	blx	r5
    3572:	1e04      	subs	r4, r0, #0
    3574:	d0a7      	beq.n	34c6 <nwkSecurityTaskHandler+0x1e>
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    3576:	7823      	ldrb	r3, [r4, #0]
    3578:	3b30      	subs	r3, #48	; 0x30
    357a:	2b01      	cmp	r3, #1
    357c:	d8f7      	bhi.n	356e <nwkSecurityTaskHandler+0xc6>
			nwkSecurityActiveFrame = frame;
    357e:	4b22      	ldr	r3, [pc, #136]	; (3608 <nwkSecurityTaskHandler+0x160>)
    3580:	601c      	str	r4, [r3, #0]
	nwkSecurityVector[0] = header->nwkSeq;
    3582:	4923      	ldr	r1, [pc, #140]	; (3610 <nwkSecurityTaskHandler+0x168>)
    3584:	7b23      	ldrb	r3, [r4, #12]
    3586:	600b      	str	r3, [r1, #0]
		= ((uint32_t)header->nwkDstAddr <<
    3588:	7be0      	ldrb	r0, [r4, #15]
    358a:	7c23      	ldrb	r3, [r4, #16]
    358c:	021b      	lsls	r3, r3, #8
    358e:	4303      	orrs	r3, r0
    3590:	041b      	lsls	r3, r3, #16
			16) | header->nwkDstEndpoint;
    3592:	7c60      	ldrb	r0, [r4, #17]
    3594:	0900      	lsrs	r0, r0, #4
    3596:	4303      	orrs	r3, r0
		= ((uint32_t)header->nwkDstAddr <<
    3598:	604b      	str	r3, [r1, #4]
		= ((uint32_t)header->nwkSrcAddr <<
    359a:	7b60      	ldrb	r0, [r4, #13]
    359c:	7ba3      	ldrb	r3, [r4, #14]
    359e:	021b      	lsls	r3, r3, #8
    35a0:	4303      	orrs	r3, r0
    35a2:	041b      	lsls	r3, r3, #16
			16) | header->nwkSrcEndpoint;
    35a4:	7c60      	ldrb	r0, [r4, #17]
    35a6:	0700      	lsls	r0, r0, #28
    35a8:	0f00      	lsrs	r0, r0, #28
    35aa:	4303      	orrs	r3, r0
		= ((uint32_t)header->nwkSrcAddr <<
    35ac:	608b      	str	r3, [r1, #8]
		= ((uint32_t)header->macDstPanId <<
    35ae:	7960      	ldrb	r0, [r4, #5]
    35b0:	79a3      	ldrb	r3, [r4, #6]
    35b2:	021b      	lsls	r3, r3, #8
    35b4:	4303      	orrs	r3, r0
    35b6:	041b      	lsls	r3, r3, #16
			16) | *(uint8_t *)&header->nwkFcf;
    35b8:	7ae2      	ldrb	r2, [r4, #11]
    35ba:	4313      	orrs	r3, r2
		= ((uint32_t)header->macDstPanId <<
    35bc:	60cb      	str	r3, [r1, #12]
			nwkSecurityActiveFrame->state) {
    35be:	7820      	ldrb	r0, [r4, #0]
	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
    35c0:	2831      	cmp	r0, #49	; 0x31
    35c2:	d0cf      	beq.n	3564 <nwkSecurityTaskHandler+0xbc>
    35c4:	2381      	movs	r3, #129	; 0x81
    35c6:	5ce1      	ldrb	r1, [r4, r3]
    35c8:	3301      	adds	r3, #1
    35ca:	5ce2      	ldrb	r2, [r4, r3]
    35cc:	0212      	lsls	r2, r2, #8
    35ce:	4311      	orrs	r1, r2
    35d0:	3301      	adds	r3, #1
    35d2:	5ce2      	ldrb	r2, [r4, r3]
    35d4:	0412      	lsls	r2, r2, #16
    35d6:	4311      	orrs	r1, r2
    35d8:	3301      	adds	r3, #1
    35da:	5ce3      	ldrb	r3, [r4, r3]
    35dc:	061b      	lsls	r3, r3, #24
    35de:	430b      	orrs	r3, r1
    35e0:	1ca2      	adds	r2, r4, #2
    35e2:	1a9b      	subs	r3, r3, r2
    35e4:	7862      	ldrb	r2, [r4, #1]
    35e6:	1ad3      	subs	r3, r2, r3
	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    35e8:	4a11      	ldr	r2, [pc, #68]	; (3630 <nwkSecurityTaskHandler+0x188>)
    35ea:	7013      	strb	r3, [r2, #0]
	nwkSecurityOffset = 0;
    35ec:	2200      	movs	r2, #0
    35ee:	4b07      	ldr	r3, [pc, #28]	; (360c <nwkSecurityTaskHandler+0x164>)
    35f0:	701a      	strb	r2, [r3, #0]
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
    35f2:	0003      	movs	r3, r0
    35f4:	3b30      	subs	r3, #48	; 0x30
    35f6:	4259      	negs	r1, r3
    35f8:	4159      	adcs	r1, r3
    35fa:	4a06      	ldr	r2, [pc, #24]	; (3614 <nwkSecurityTaskHandler+0x16c>)
    35fc:	7011      	strb	r1, [r2, #0]
	nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    35fe:	2332      	movs	r3, #50	; 0x32
    3600:	7023      	strb	r3, [r4, #0]
    3602:	e760      	b.n	34c6 <nwkSecurityTaskHandler+0x1e>
    3604:	20000760 	.word	0x20000760
    3608:	2000075c 	.word	0x2000075c
    360c:	20000762 	.word	0x20000762
    3610:	20000764 	.word	0x20000764
    3614:	20000761 	.word	0x20000761
    3618:	00004e49 	.word	0x00004e49
    361c:	000038a1 	.word	0x000038a1
    3620:	00002fd1 	.word	0x00002fd1
    3624:	20001674 	.word	0x20001674
    3628:	00003ca9 	.word	0x00003ca9
    362c:	00002af5 	.word	0x00002af5
    3630:	20000763 	.word	0x20000763

00003634 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    3634:	b5f0      	push	{r4, r5, r6, r7, lr}
    3636:	b083      	sub	sp, #12
    3638:	9001      	str	r0, [sp, #4]
	NwkFrame_t *frame = NULL;
	bool restart = false;
    363a:	2400      	movs	r4, #0
	NwkFrame_t *frame = NULL;
    363c:	2000      	movs	r0, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    363e:	4d11      	ldr	r5, [pc, #68]	; (3684 <nwkTxDelayTimerHandler+0x50>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    3640:	2686      	movs	r6, #134	; 0x86
    3642:	2787      	movs	r7, #135	; 0x87
	while (NULL != (frame = nwkFrameNext(frame))) {
    3644:	47a8      	blx	r5
    3646:	2800      	cmp	r0, #0
    3648:	d013      	beq.n	3672 <nwkTxDelayTimerHandler+0x3e>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    364a:	7803      	ldrb	r3, [r0, #0]
    364c:	2b11      	cmp	r3, #17
    364e:	d1f9      	bne.n	3644 <nwkTxDelayTimerHandler+0x10>
			if (0 == --frame->tx.timeout) {
    3650:	5d82      	ldrb	r2, [r0, r6]
    3652:	5dc3      	ldrb	r3, [r0, r7]
    3654:	021b      	lsls	r3, r3, #8
    3656:	4313      	orrs	r3, r2
    3658:	3b01      	subs	r3, #1
    365a:	b29b      	uxth	r3, r3
    365c:	5583      	strb	r3, [r0, r6]
    365e:	0a19      	lsrs	r1, r3, #8
    3660:	0002      	movs	r2, r0
    3662:	3286      	adds	r2, #134	; 0x86
    3664:	7051      	strb	r1, [r2, #1]
			restart = true;
    3666:	2401      	movs	r4, #1
			if (0 == --frame->tx.timeout) {
    3668:	2b00      	cmp	r3, #0
    366a:	d1eb      	bne.n	3644 <nwkTxDelayTimerHandler+0x10>
				frame->state = NWK_TX_STATE_SEND;
    366c:	3313      	adds	r3, #19
    366e:	7003      	strb	r3, [r0, #0]
    3670:	e7e8      	b.n	3644 <nwkTxDelayTimerHandler+0x10>
			}
		}
	}

	if (restart) {
    3672:	2c00      	cmp	r4, #0
    3674:	d101      	bne.n	367a <nwkTxDelayTimerHandler+0x46>
		SYS_TimerStart(timer);
	}
}
    3676:	b003      	add	sp, #12
    3678:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SYS_TimerStart(timer);
    367a:	9801      	ldr	r0, [sp, #4]
    367c:	4b02      	ldr	r3, [pc, #8]	; (3688 <nwkTxDelayTimerHandler+0x54>)
    367e:	4798      	blx	r3
}
    3680:	e7f9      	b.n	3676 <nwkTxDelayTimerHandler+0x42>
    3682:	46c0      	nop			; (mov r8, r8)
    3684:	00002af5 	.word	0x00002af5
    3688:	00003d9d 	.word	0x00003d9d

0000368c <nwkTxAckWaitTimerHandler>:
{
    368c:	b5f0      	push	{r4, r5, r6, r7, lr}
    368e:	b083      	sub	sp, #12
    3690:	9001      	str	r0, [sp, #4]
	bool restart = false;
    3692:	2400      	movs	r4, #0
	NwkFrame_t *frame = NULL;
    3694:	2000      	movs	r0, #0
	while (NULL != (frame = nwkFrameNext(frame))) {
    3696:	4d12      	ldr	r5, [pc, #72]	; (36e0 <nwkTxAckWaitTimerHandler+0x54>)
			if (0 == --frame->tx.timeout) {
    3698:	2686      	movs	r6, #134	; 0x86
    369a:	2787      	movs	r7, #135	; 0x87
	while (NULL != (frame = nwkFrameNext(frame))) {
    369c:	47a8      	blx	r5
    369e:	2800      	cmp	r0, #0
    36a0:	d016      	beq.n	36d0 <nwkTxAckWaitTimerHandler+0x44>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    36a2:	7803      	ldrb	r3, [r0, #0]
    36a4:	2b16      	cmp	r3, #22
    36a6:	d1f9      	bne.n	369c <nwkTxAckWaitTimerHandler+0x10>
			if (0 == --frame->tx.timeout) {
    36a8:	5d82      	ldrb	r2, [r0, r6]
    36aa:	5dc3      	ldrb	r3, [r0, r7]
    36ac:	021b      	lsls	r3, r3, #8
    36ae:	4313      	orrs	r3, r2
    36b0:	3b01      	subs	r3, #1
    36b2:	b29b      	uxth	r3, r3
    36b4:	5583      	strb	r3, [r0, r6]
    36b6:	0a19      	lsrs	r1, r3, #8
    36b8:	0002      	movs	r2, r0
    36ba:	3286      	adds	r2, #134	; 0x86
    36bc:	7051      	strb	r1, [r2, #1]
			restart = true;
    36be:	2401      	movs	r4, #1
			if (0 == --frame->tx.timeout) {
    36c0:	2b00      	cmp	r3, #0
    36c2:	d1eb      	bne.n	369c <nwkTxAckWaitTimerHandler+0x10>
	frame->state = NWK_TX_STATE_CONFIRM;
    36c4:	3317      	adds	r3, #23
    36c6:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    36c8:	2210      	movs	r2, #16
    36ca:	336e      	adds	r3, #110	; 0x6e
    36cc:	54c2      	strb	r2, [r0, r3]
    36ce:	e7e5      	b.n	369c <nwkTxAckWaitTimerHandler+0x10>
	if (restart) {
    36d0:	2c00      	cmp	r4, #0
    36d2:	d101      	bne.n	36d8 <nwkTxAckWaitTimerHandler+0x4c>
}
    36d4:	b003      	add	sp, #12
    36d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SYS_TimerStart(timer);
    36d8:	9801      	ldr	r0, [sp, #4]
    36da:	4b02      	ldr	r3, [pc, #8]	; (36e4 <nwkTxAckWaitTimerHandler+0x58>)
    36dc:	4798      	blx	r3
}
    36de:	e7f9      	b.n	36d4 <nwkTxAckWaitTimerHandler+0x48>
    36e0:	00002af5 	.word	0x00002af5
    36e4:	00003d9d 	.word	0x00003d9d

000036e8 <nwkTxInit>:
	nwkTxPhyActiveFrame = NULL;
    36e8:	2200      	movs	r2, #0
    36ea:	4b07      	ldr	r3, [pc, #28]	; (3708 <nwkTxInit+0x20>)
    36ec:	601a      	str	r2, [r3, #0]
	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    36ee:	4b07      	ldr	r3, [pc, #28]	; (370c <nwkTxInit+0x24>)
    36f0:	2132      	movs	r1, #50	; 0x32
    36f2:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    36f4:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    36f6:	4906      	ldr	r1, [pc, #24]	; (3710 <nwkTxInit+0x28>)
    36f8:	6119      	str	r1, [r3, #16]
	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    36fa:	4b06      	ldr	r3, [pc, #24]	; (3714 <nwkTxInit+0x2c>)
    36fc:	210a      	movs	r1, #10
    36fe:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3700:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    3702:	4a05      	ldr	r2, [pc, #20]	; (3718 <nwkTxInit+0x30>)
    3704:	611a      	str	r2, [r3, #16]
}
    3706:	4770      	bx	lr
    3708:	2000079c 	.word	0x2000079c
    370c:	20000774 	.word	0x20000774
    3710:	0000368d 	.word	0x0000368d
    3714:	20000788 	.word	0x20000788
    3718:	00003635 	.word	0x00003635

0000371c <nwkTxFrame>:
{
    371c:	b510      	push	{r4, lr}
    371e:	0004      	movs	r4, r0
	if (frame->tx.control & NWK_TX_CONTROL_ROUTING) {
    3720:	2388      	movs	r3, #136	; 0x88
    3722:	5cc3      	ldrb	r3, [r0, r3]
    3724:	079a      	lsls	r2, r3, #30
    3726:	d52d      	bpl.n	3784 <nwkTxFrame+0x68>
		frame->state = NWK_TX_STATE_DELAY;
    3728:	2212      	movs	r2, #18
    372a:	7002      	strb	r2, [r0, #0]
	frame->tx.status = NWK_SUCCESS_STATUS;
    372c:	2100      	movs	r1, #0
    372e:	2285      	movs	r2, #133	; 0x85
    3730:	54a1      	strb	r1, [r4, r2]
	if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID) {
    3732:	07da      	lsls	r2, r3, #31
    3734:	d52f      	bpl.n	3796 <nwkTxFrame+0x7a>
		header->macDstPanId = NWK_BROADCAST_PANID;
    3736:	2201      	movs	r2, #1
    3738:	4252      	negs	r2, r2
    373a:	7162      	strb	r2, [r4, #5]
    373c:	71a2      	strb	r2, [r4, #6]
	if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) &&
    373e:	2205      	movs	r2, #5
    3740:	421a      	tst	r2, r3
    3742:	d02e      	beq.n	37a2 <nwkTxFrame+0x86>
	header->macDstAddr = header->nwkDstAddr;
    3744:	7be2      	ldrb	r2, [r4, #15]
    3746:	7c23      	ldrb	r3, [r4, #16]
    3748:	71e2      	strb	r2, [r4, #7]
    374a:	7223      	strb	r3, [r4, #8]
	header->macSrcAddr = nwkIb.addr;
    374c:	491e      	ldr	r1, [pc, #120]	; (37c8 <nwkTxFrame+0xac>)
    374e:	780b      	ldrb	r3, [r1, #0]
    3750:	7263      	strb	r3, [r4, #9]
    3752:	784b      	ldrb	r3, [r1, #1]
    3754:	72a3      	strb	r3, [r4, #10]
	header->macSeq = ++nwkIb.macSeqNum;
    3756:	794b      	ldrb	r3, [r1, #5]
    3758:	3301      	adds	r3, #1
    375a:	b2db      	uxtb	r3, r3
    375c:	714b      	strb	r3, [r1, #5]
    375e:	7123      	strb	r3, [r4, #4]
	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
    3760:	79e1      	ldrb	r1, [r4, #7]
    3762:	7a23      	ldrb	r3, [r4, #8]
    3764:	021b      	lsls	r3, r3, #8
    3766:	430b      	orrs	r3, r1
    3768:	4a18      	ldr	r2, [pc, #96]	; (37cc <nwkTxFrame+0xb0>)
    376a:	4293      	cmp	r3, r2
    376c:	d01d      	beq.n	37aa <nwkTxFrame+0x8e>
		header->macFcf = 0x8861;
    376e:	2361      	movs	r3, #97	; 0x61
    3770:	70a3      	strb	r3, [r4, #2]
    3772:	3bd9      	subs	r3, #217	; 0xd9
    3774:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = 0;
    3776:	2200      	movs	r2, #0
    3778:	33fe      	adds	r3, #254	; 0xfe
    377a:	54e2      	strb	r2, [r4, r3]
    377c:	3486      	adds	r4, #134	; 0x86
    377e:	2300      	movs	r3, #0
    3780:	7063      	strb	r3, [r4, #1]
}
    3782:	bd10      	pop	{r4, pc}
		if (header->nwkFcf.security) {
    3784:	7ac2      	ldrb	r2, [r0, #11]
    3786:	0792      	lsls	r2, r2, #30
    3788:	d502      	bpl.n	3790 <nwkTxFrame+0x74>
			frame->state = NWK_TX_STATE_ENCRYPT;
    378a:	2210      	movs	r2, #16
    378c:	7002      	strb	r2, [r0, #0]
    378e:	e7cd      	b.n	372c <nwkTxFrame+0x10>
		frame->state = NWK_TX_STATE_DELAY;
    3790:	2212      	movs	r2, #18
    3792:	7002      	strb	r2, [r0, #0]
    3794:	e7ca      	b.n	372c <nwkTxFrame+0x10>
		header->macDstPanId = nwkIb.panId;
    3796:	4a0c      	ldr	r2, [pc, #48]	; (37c8 <nwkTxFrame+0xac>)
    3798:	7891      	ldrb	r1, [r2, #2]
    379a:	7161      	strb	r1, [r4, #5]
    379c:	78d2      	ldrb	r2, [r2, #3]
    379e:	71a2      	strb	r2, [r4, #6]
    37a0:	e7cd      	b.n	373e <nwkTxFrame+0x22>
		nwkRoutePrepareTx(frame);
    37a2:	0020      	movs	r0, r4
    37a4:	4b0a      	ldr	r3, [pc, #40]	; (37d0 <nwkTxFrame+0xb4>)
    37a6:	4798      	blx	r3
    37a8:	e7d0      	b.n	374c <nwkTxFrame+0x30>
		header->macFcf = 0x8841;
    37aa:	2341      	movs	r3, #65	; 0x41
    37ac:	70a3      	strb	r3, [r4, #2]
    37ae:	3bb9      	subs	r3, #185	; 0xb9
    37b0:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    37b2:	4b08      	ldr	r3, [pc, #32]	; (37d4 <nwkTxFrame+0xb8>)
    37b4:	4798      	blx	r3
    37b6:	2307      	movs	r3, #7
    37b8:	4018      	ands	r0, r3
    37ba:	3001      	adds	r0, #1
    37bc:	337f      	adds	r3, #127	; 0x7f
    37be:	54e0      	strb	r0, [r4, r3]
    37c0:	3486      	adds	r4, #134	; 0x86
    37c2:	2300      	movs	r3, #0
    37c4:	7063      	strb	r3, [r4, #1]
    37c6:	e7dc      	b.n	3782 <nwkTxFrame+0x66>
    37c8:	2000162c 	.word	0x2000162c
    37cc:	0000ffff 	.word	0x0000ffff
    37d0:	00002d99 	.word	0x00002d99
    37d4:	00005855 	.word	0x00005855

000037d8 <nwkTxBroadcastFrame>:
{
    37d8:	b570      	push	{r4, r5, r6, lr}
    37da:	0005      	movs	r5, r0
	if (NULL == (newFrame = nwkFrameAlloc())) {
    37dc:	4b1c      	ldr	r3, [pc, #112]	; (3850 <nwkTxBroadcastFrame+0x78>)
    37de:	4798      	blx	r3
    37e0:	1e04      	subs	r4, r0, #0
    37e2:	d033      	beq.n	384c <nwkTxBroadcastFrame+0x74>
	newFrame->state = NWK_TX_STATE_DELAY;
    37e4:	2312      	movs	r3, #18
    37e6:	7003      	strb	r3, [r0, #0]
	newFrame->size = frame->size;
    37e8:	786b      	ldrb	r3, [r5, #1]
    37ea:	7043      	strb	r3, [r0, #1]
	newFrame->tx.status = NWK_SUCCESS_STATUS;
    37ec:	2200      	movs	r2, #0
    37ee:	2385      	movs	r3, #133	; 0x85
    37f0:	54c2      	strb	r2, [r0, r3]
	newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    37f2:	4b18      	ldr	r3, [pc, #96]	; (3854 <nwkTxBroadcastFrame+0x7c>)
    37f4:	4798      	blx	r3
    37f6:	2307      	movs	r3, #7
    37f8:	4018      	ands	r0, r3
    37fa:	3001      	adds	r0, #1
    37fc:	337f      	adds	r3, #127	; 0x7f
    37fe:	54e0      	strb	r0, [r4, r3]
    3800:	0c00      	lsrs	r0, r0, #16
    3802:	0023      	movs	r3, r4
    3804:	3386      	adds	r3, #134	; 0x86
    3806:	7058      	strb	r0, [r3, #1]
	newFrame->tx.confirm = NULL;
    3808:	2200      	movs	r2, #0
    380a:	2389      	movs	r3, #137	; 0x89
    380c:	54e2      	strb	r2, [r4, r3]
    380e:	0023      	movs	r3, r4
    3810:	3389      	adds	r3, #137	; 0x89
    3812:	705a      	strb	r2, [r3, #1]
    3814:	709a      	strb	r2, [r3, #2]
    3816:	70da      	strb	r2, [r3, #3]
	memcpy(newFrame->data, frame->data, frame->size);
    3818:	1ca0      	adds	r0, r4, #2
    381a:	786a      	ldrb	r2, [r5, #1]
    381c:	1ca9      	adds	r1, r5, #2
    381e:	4b0e      	ldr	r3, [pc, #56]	; (3858 <nwkTxBroadcastFrame+0x80>)
    3820:	4798      	blx	r3
	newFrame->header.macFcf = 0x8841;
    3822:	2341      	movs	r3, #65	; 0x41
    3824:	70a3      	strb	r3, [r4, #2]
    3826:	3bb9      	subs	r3, #185	; 0xb9
    3828:	70e3      	strb	r3, [r4, #3]
	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    382a:	3377      	adds	r3, #119	; 0x77
    382c:	71e3      	strb	r3, [r4, #7]
    382e:	7223      	strb	r3, [r4, #8]
	newFrame->header.macDstPanId = frame->header.macDstPanId;
    3830:	796a      	ldrb	r2, [r5, #5]
    3832:	79ab      	ldrb	r3, [r5, #6]
    3834:	7162      	strb	r2, [r4, #5]
    3836:	71a3      	strb	r3, [r4, #6]
	newFrame->header.macSrcAddr = nwkIb.addr;
    3838:	4a08      	ldr	r2, [pc, #32]	; (385c <nwkTxBroadcastFrame+0x84>)
    383a:	7813      	ldrb	r3, [r2, #0]
    383c:	7263      	strb	r3, [r4, #9]
    383e:	7853      	ldrb	r3, [r2, #1]
    3840:	72a3      	strb	r3, [r4, #10]
	newFrame->header.macSeq = ++nwkIb.macSeqNum;
    3842:	7953      	ldrb	r3, [r2, #5]
    3844:	3301      	adds	r3, #1
    3846:	b2db      	uxtb	r3, r3
    3848:	7153      	strb	r3, [r2, #5]
    384a:	7123      	strb	r3, [r4, #4]
}
    384c:	bd70      	pop	{r4, r5, r6, pc}
    384e:	46c0      	nop			; (mov r8, r8)
    3850:	00002a6d 	.word	0x00002a6d
    3854:	00005855 	.word	0x00005855
    3858:	00004e49 	.word	0x00004e49
    385c:	2000162c 	.word	0x2000162c

00003860 <nwkTxAckReceived>:
{
    3860:	b570      	push	{r4, r5, r6, lr}
	if (sizeof(NwkCommandAck_t) != ind->size) {
    3862:	7b02      	ldrb	r2, [r0, #12]
		return false;
    3864:	2300      	movs	r3, #0
	if (sizeof(NwkCommandAck_t) != ind->size) {
    3866:	2a03      	cmp	r2, #3
    3868:	d001      	beq.n	386e <nwkTxAckReceived+0xe>
}
    386a:	0018      	movs	r0, r3
    386c:	bd70      	pop	{r4, r5, r6, pc}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    386e:	6885      	ldr	r5, [r0, #8]
    3870:	2000      	movs	r0, #0
	while (NULL != (frame = nwkFrameNext(frame))) {
    3872:	4c0a      	ldr	r4, [pc, #40]	; (389c <nwkTxAckReceived+0x3c>)
    3874:	47a0      	blx	r4
    3876:	2800      	cmp	r0, #0
    3878:	d00d      	beq.n	3896 <nwkTxAckReceived+0x36>
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    387a:	7803      	ldrb	r3, [r0, #0]
    387c:	2b16      	cmp	r3, #22
    387e:	d1f9      	bne.n	3874 <nwkTxAckReceived+0x14>
    3880:	7b02      	ldrb	r2, [r0, #12]
    3882:	786b      	ldrb	r3, [r5, #1]
    3884:	429a      	cmp	r2, r3
    3886:	d1f5      	bne.n	3874 <nwkTxAckReceived+0x14>
			frame->state = NWK_TX_STATE_CONFIRM;
    3888:	2317      	movs	r3, #23
    388a:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    388c:	78aa      	ldrb	r2, [r5, #2]
    388e:	3371      	adds	r3, #113	; 0x71
    3890:	54c2      	strb	r2, [r0, r3]
			return true;
    3892:	3b87      	subs	r3, #135	; 0x87
    3894:	e7e9      	b.n	386a <nwkTxAckReceived+0xa>
	return false;
    3896:	2300      	movs	r3, #0
    3898:	e7e7      	b.n	386a <nwkTxAckReceived+0xa>
    389a:	46c0      	nop			; (mov r8, r8)
    389c:	00002af5 	.word	0x00002af5

000038a0 <nwkTxEncryptConf>:
	frame->state = NWK_TX_STATE_DELAY;
    38a0:	2312      	movs	r3, #18
    38a2:	7003      	strb	r3, [r0, #0]
}
    38a4:	4770      	bx	lr
	...

000038a8 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    38a8:	4b0c      	ldr	r3, [pc, #48]	; (38dc <PHY_DataConf+0x34>)
    38aa:	681b      	ldr	r3, [r3, #0]
	switch (status) {
    38ac:	2801      	cmp	r0, #1
    38ae:	d005      	beq.n	38bc <PHY_DataConf+0x14>
    38b0:	2800      	cmp	r0, #0
    38b2:	d004      	beq.n	38be <PHY_DataConf+0x16>
    38b4:	2802      	cmp	r0, #2
    38b6:	d00f      	beq.n	38d8 <PHY_DataConf+0x30>
		return NWK_ERROR_STATUS;
    38b8:	2001      	movs	r0, #1
    38ba:	e000      	b.n	38be <PHY_DataConf+0x16>
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    38bc:	2020      	movs	r0, #32
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    38be:	2285      	movs	r2, #133	; 0x85
    38c0:	5498      	strb	r0, [r3, r2]
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    38c2:	3a70      	subs	r2, #112	; 0x70
    38c4:	701a      	strb	r2, [r3, #0]
	nwkTxPhyActiveFrame = NULL;
    38c6:	2200      	movs	r2, #0
    38c8:	4b04      	ldr	r3, [pc, #16]	; (38dc <PHY_DataConf+0x34>)
    38ca:	601a      	str	r2, [r3, #0]
	nwkIb.lock--;
    38cc:	4904      	ldr	r1, [pc, #16]	; (38e0 <PHY_DataConf+0x38>)
    38ce:	3258      	adds	r2, #88	; 0x58
    38d0:	5a8b      	ldrh	r3, [r1, r2]
    38d2:	3b01      	subs	r3, #1
    38d4:	528b      	strh	r3, [r1, r2]
}
    38d6:	4770      	bx	lr
		return NWK_PHY_NO_ACK_STATUS;
    38d8:	2021      	movs	r0, #33	; 0x21
    38da:	e7f0      	b.n	38be <PHY_DataConf+0x16>
    38dc:	2000079c 	.word	0x2000079c
    38e0:	2000162c 	.word	0x2000162c

000038e4 <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    38e4:	b570      	push	{r4, r5, r6, lr}
	NwkFrame_t *frame = NULL;
    38e6:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    38e8:	4d37      	ldr	r5, [pc, #220]	; (39c8 <nwkTxTaskHandler+0xe4>)
		switch (frame->state) {
    38ea:	4e38      	ldr	r6, [pc, #224]	; (39cc <nwkTxTaskHandler+0xe8>)
	while (NULL != (frame = nwkFrameNext(frame))) {
    38ec:	e003      	b.n	38f6 <nwkTxTaskHandler+0x12>
#ifdef NWK_ENABLE_SECURITY
		case NWK_TX_STATE_ENCRYPT:
		{
			nwkSecurityProcess(frame, true);
    38ee:	2101      	movs	r1, #1
    38f0:	0020      	movs	r0, r4
    38f2:	4b37      	ldr	r3, [pc, #220]	; (39d0 <nwkTxTaskHandler+0xec>)
    38f4:	4798      	blx	r3
	while (NULL != (frame = nwkFrameNext(frame))) {
    38f6:	0020      	movs	r0, r4
    38f8:	47a8      	blx	r5
    38fa:	1e04      	subs	r4, r0, #0
    38fc:	d063      	beq.n	39c6 <nwkTxTaskHandler+0xe2>
		switch (frame->state) {
    38fe:	7823      	ldrb	r3, [r4, #0]
    3900:	3b10      	subs	r3, #16
    3902:	b2da      	uxtb	r2, r3
    3904:	2a07      	cmp	r2, #7
    3906:	d8f6      	bhi.n	38f6 <nwkTxTaskHandler+0x12>
    3908:	0093      	lsls	r3, r2, #2
    390a:	58f3      	ldr	r3, [r6, r3]
    390c:	469f      	mov	pc, r3
		break;
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    390e:	2386      	movs	r3, #134	; 0x86
    3910:	5ce2      	ldrb	r2, [r4, r3]
    3912:	3301      	adds	r3, #1
    3914:	5ce3      	ldrb	r3, [r4, r3]
    3916:	021b      	lsls	r3, r3, #8
    3918:	4313      	orrs	r3, r2
    391a:	d102      	bne.n	3922 <nwkTxTaskHandler+0x3e>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
				SYS_TimerStart(&nwkTxDelayTimer);
			} else {
				frame->state = NWK_TX_STATE_SEND;
    391c:	2313      	movs	r3, #19
    391e:	7023      	strb	r3, [r4, #0]
    3920:	e7e9      	b.n	38f6 <nwkTxTaskHandler+0x12>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    3922:	2311      	movs	r3, #17
    3924:	7023      	strb	r3, [r4, #0]
				SYS_TimerStart(&nwkTxDelayTimer);
    3926:	482b      	ldr	r0, [pc, #172]	; (39d4 <nwkTxTaskHandler+0xf0>)
    3928:	4b2b      	ldr	r3, [pc, #172]	; (39d8 <nwkTxTaskHandler+0xf4>)
    392a:	4798      	blx	r3
    392c:	e7e3      	b.n	38f6 <nwkTxTaskHandler+0x12>
		}
		break;

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    392e:	4b2b      	ldr	r3, [pc, #172]	; (39dc <nwkTxTaskHandler+0xf8>)
    3930:	681b      	ldr	r3, [r3, #0]
    3932:	2b00      	cmp	r3, #0
    3934:	d1df      	bne.n	38f6 <nwkTxTaskHandler+0x12>
				nwkTxPhyActiveFrame = frame;
    3936:	4b29      	ldr	r3, [pc, #164]	; (39dc <nwkTxTaskHandler+0xf8>)
    3938:	601c      	str	r4, [r3, #0]
				frame->state = NWK_TX_STATE_WAIT_CONF;
    393a:	2314      	movs	r3, #20
    393c:	7023      	strb	r3, [r4, #0]
				PHY_DataReq(&(frame->size));
    393e:	1c60      	adds	r0, r4, #1
    3940:	4b27      	ldr	r3, [pc, #156]	; (39e0 <nwkTxTaskHandler+0xfc>)
    3942:	4798      	blx	r3
				nwkIb.lock++;
    3944:	4927      	ldr	r1, [pc, #156]	; (39e4 <nwkTxTaskHandler+0x100>)
    3946:	2258      	movs	r2, #88	; 0x58
    3948:	5a8b      	ldrh	r3, [r1, r2]
    394a:	3301      	adds	r3, #1
    394c:	528b      	strh	r3, [r1, r2]
    394e:	e7d2      	b.n	38f6 <nwkTxTaskHandler+0x12>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    3950:	2385      	movs	r3, #133	; 0x85
    3952:	5ce3      	ldrb	r3, [r4, r3]
    3954:	2b00      	cmp	r3, #0
    3956:	d11a      	bne.n	398e <nwkTxTaskHandler+0xaa>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    3958:	7b61      	ldrb	r1, [r4, #13]
    395a:	7ba3      	ldrb	r3, [r4, #14]
    395c:	021b      	lsls	r3, r3, #8
    395e:	4a21      	ldr	r2, [pc, #132]	; (39e4 <nwkTxTaskHandler+0x100>)
    3960:	8812      	ldrh	r2, [r2, #0]
    3962:	430b      	orrs	r3, r1
    3964:	429a      	cmp	r2, r3
    3966:	d002      	beq.n	396e <nwkTxTaskHandler+0x8a>
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    3968:	2317      	movs	r3, #23
    396a:	7023      	strb	r3, [r4, #0]
    396c:	e7c3      	b.n	38f6 <nwkTxTaskHandler+0x12>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    396e:	7ae3      	ldrb	r3, [r4, #11]
    3970:	07db      	lsls	r3, r3, #31
    3972:	d5f9      	bpl.n	3968 <nwkTxTaskHandler+0x84>
					frame->state = NWK_TX_STATE_WAIT_ACK;
    3974:	2316      	movs	r3, #22
    3976:	7023      	strb	r3, [r4, #0]
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    3978:	2215      	movs	r2, #21
    397a:	3370      	adds	r3, #112	; 0x70
    397c:	54e2      	strb	r2, [r4, r3]
    397e:	2200      	movs	r2, #0
    3980:	0023      	movs	r3, r4
    3982:	3386      	adds	r3, #134	; 0x86
    3984:	705a      	strb	r2, [r3, #1]
					SYS_TimerStart(&nwkTxAckWaitTimer);
    3986:	4818      	ldr	r0, [pc, #96]	; (39e8 <nwkTxTaskHandler+0x104>)
    3988:	4b13      	ldr	r3, [pc, #76]	; (39d8 <nwkTxTaskHandler+0xf4>)
    398a:	4798      	blx	r3
    398c:	e7b3      	b.n	38f6 <nwkTxTaskHandler+0x12>
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    398e:	2317      	movs	r3, #23
    3990:	7023      	strb	r3, [r4, #0]
    3992:	e7b0      	b.n	38f6 <nwkTxTaskHandler+0x12>
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    3994:	0020      	movs	r0, r4
    3996:	4b15      	ldr	r3, [pc, #84]	; (39ec <nwkTxTaskHandler+0x108>)
    3998:	4798      	blx	r3
#endif
			if (NULL == frame->tx.confirm) {
    399a:	2389      	movs	r3, #137	; 0x89
    399c:	5ce3      	ldrb	r3, [r4, r3]
    399e:	228a      	movs	r2, #138	; 0x8a
    39a0:	5ca2      	ldrb	r2, [r4, r2]
    39a2:	0212      	lsls	r2, r2, #8
    39a4:	431a      	orrs	r2, r3
    39a6:	238b      	movs	r3, #139	; 0x8b
    39a8:	5ce3      	ldrb	r3, [r4, r3]
    39aa:	041b      	lsls	r3, r3, #16
    39ac:	431a      	orrs	r2, r3
    39ae:	238c      	movs	r3, #140	; 0x8c
    39b0:	5ce3      	ldrb	r3, [r4, r3]
    39b2:	061b      	lsls	r3, r3, #24
    39b4:	4313      	orrs	r3, r2
    39b6:	d002      	beq.n	39be <nwkTxTaskHandler+0xda>
				nwkFrameFree(frame);
			} else {
				frame->tx.confirm(frame);
    39b8:	0020      	movs	r0, r4
    39ba:	4798      	blx	r3
    39bc:	e79b      	b.n	38f6 <nwkTxTaskHandler+0x12>
				nwkFrameFree(frame);
    39be:	0020      	movs	r0, r4
    39c0:	4b0b      	ldr	r3, [pc, #44]	; (39f0 <nwkTxTaskHandler+0x10c>)
    39c2:	4798      	blx	r3
    39c4:	e797      	b.n	38f6 <nwkTxTaskHandler+0x12>

		default:
			break;
		}
	}
}
    39c6:	bd70      	pop	{r4, r5, r6, pc}
    39c8:	00002af5 	.word	0x00002af5
    39cc:	0000a4c4 	.word	0x0000a4c4
    39d0:	000033dd 	.word	0x000033dd
    39d4:	20000788 	.word	0x20000788
    39d8:	00003d9d 	.word	0x00003d9d
    39dc:	2000079c 	.word	0x2000079c
    39e0:	00003b35 	.word	0x00003b35
    39e4:	2000162c 	.word	0x2000162c
    39e8:	20000774 	.word	0x20000774
    39ec:	00002d05 	.word	0x00002d05
    39f0:	00002ae1 	.word	0x00002ae1

000039f4 <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    39f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39f6:	0004      	movs	r4, r0
	trx_reg_write(reg, value);
    39f8:	4f0b      	ldr	r7, [pc, #44]	; (3a28 <phyTrxSetState+0x34>)
	value = trx_reg_read(reg);
    39fa:	4e0c      	ldr	r6, [pc, #48]	; (3a2c <phyTrxSetState+0x38>)
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    39fc:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    39fe:	2103      	movs	r1, #3
    3a00:	2002      	movs	r0, #2
    3a02:	47b8      	blx	r7
	value = trx_reg_read(reg);
    3a04:	2001      	movs	r0, #1
    3a06:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3a08:	4028      	ands	r0, r5
    3a0a:	2808      	cmp	r0, #8
    3a0c:	d1f7      	bne.n	39fe <phyTrxSetState+0xa>
	trx_reg_write(reg, value);
    3a0e:	4f06      	ldr	r7, [pc, #24]	; (3a28 <phyTrxSetState+0x34>)
	value = trx_reg_read(reg);
    3a10:	4e06      	ldr	r6, [pc, #24]	; (3a2c <phyTrxSetState+0x38>)

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3a12:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    3a14:	0021      	movs	r1, r4
    3a16:	2002      	movs	r0, #2
    3a18:	47b8      	blx	r7
	value = trx_reg_read(reg);
    3a1a:	2001      	movs	r0, #1
    3a1c:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3a1e:	4028      	ands	r0, r5
    3a20:	4284      	cmp	r4, r0
    3a22:	d1f7      	bne.n	3a14 <phyTrxSetState+0x20>
}
    3a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a26:	46c0      	nop			; (mov r8, r8)
    3a28:	000043f1 	.word	0x000043f1
    3a2c:	000042f5 	.word	0x000042f5

00003a30 <phySetRxState>:
{
    3a30:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    3a32:	2008      	movs	r0, #8
    3a34:	4b06      	ldr	r3, [pc, #24]	; (3a50 <phySetRxState+0x20>)
    3a36:	4798      	blx	r3
	value = trx_reg_read(reg);
    3a38:	200f      	movs	r0, #15
    3a3a:	4b06      	ldr	r3, [pc, #24]	; (3a54 <phySetRxState+0x24>)
    3a3c:	4798      	blx	r3
	if (phyRxState) {
    3a3e:	4b06      	ldr	r3, [pc, #24]	; (3a58 <phySetRxState+0x28>)
    3a40:	781b      	ldrb	r3, [r3, #0]
    3a42:	2b00      	cmp	r3, #0
    3a44:	d100      	bne.n	3a48 <phySetRxState+0x18>
}
    3a46:	bd10      	pop	{r4, pc}
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    3a48:	2016      	movs	r0, #22
    3a4a:	4b01      	ldr	r3, [pc, #4]	; (3a50 <phySetRxState+0x20>)
    3a4c:	4798      	blx	r3
}
    3a4e:	e7fa      	b.n	3a46 <phySetRxState+0x16>
    3a50:	000039f5 	.word	0x000039f5
    3a54:	000042f5 	.word	0x000042f5
    3a58:	20000820 	.word	0x20000820

00003a5c <PHY_Init>:
{
    3a5c:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    3a5e:	4b0e      	ldr	r3, [pc, #56]	; (3a98 <PHY_Init+0x3c>)
    3a60:	4798      	blx	r3
	PhyReset();
    3a62:	4b0e      	ldr	r3, [pc, #56]	; (3a9c <PHY_Init+0x40>)
    3a64:	4798      	blx	r3
	phyRxState = false;
    3a66:	2200      	movs	r2, #0
    3a68:	4b0d      	ldr	r3, [pc, #52]	; (3aa0 <PHY_Init+0x44>)
    3a6a:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    3a6c:	3201      	adds	r2, #1
    3a6e:	4b0d      	ldr	r3, [pc, #52]	; (3aa4 <PHY_Init+0x48>)
    3a70:	701a      	strb	r2, [r3, #0]
	trx_reg_write(reg, value);
    3a72:	4e0d      	ldr	r6, [pc, #52]	; (3aa8 <PHY_Init+0x4c>)
	value = trx_reg_read(reg);
    3a74:	4d0d      	ldr	r5, [pc, #52]	; (3aac <PHY_Init+0x50>)
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3a76:	241f      	movs	r4, #31
	trx_reg_write(reg, value);
    3a78:	2108      	movs	r1, #8
    3a7a:	2002      	movs	r0, #2
    3a7c:	47b0      	blx	r6
	value = trx_reg_read(reg);
    3a7e:	2001      	movs	r0, #1
    3a80:	47a8      	blx	r5
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3a82:	4020      	ands	r0, r4
    3a84:	2808      	cmp	r0, #8
    3a86:	d1f7      	bne.n	3a78 <PHY_Init+0x1c>
	trx_reg_write(reg, value);
    3a88:	212e      	movs	r1, #46	; 0x2e
    3a8a:	3804      	subs	r0, #4
    3a8c:	4c06      	ldr	r4, [pc, #24]	; (3aa8 <PHY_Init+0x4c>)
    3a8e:	47a0      	blx	r4
    3a90:	21a0      	movs	r1, #160	; 0xa0
    3a92:	200c      	movs	r0, #12
    3a94:	47a0      	blx	r4
}
    3a96:	bd70      	pop	{r4, r5, r6, pc}
    3a98:	000041a9 	.word	0x000041a9
    3a9c:	000042c5 	.word	0x000042c5
    3aa0:	20000820 	.word	0x20000820
    3aa4:	20000821 	.word	0x20000821
    3aa8:	000043f1 	.word	0x000043f1
    3aac:	000042f5 	.word	0x000042f5

00003ab0 <PHY_SetRxState>:
{
    3ab0:	b510      	push	{r4, lr}
	phyRxState = rx;
    3ab2:	4b02      	ldr	r3, [pc, #8]	; (3abc <PHY_SetRxState+0xc>)
    3ab4:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    3ab6:	4b02      	ldr	r3, [pc, #8]	; (3ac0 <PHY_SetRxState+0x10>)
    3ab8:	4798      	blx	r3
}
    3aba:	bd10      	pop	{r4, pc}
    3abc:	20000820 	.word	0x20000820
    3ac0:	00003a31 	.word	0x00003a31

00003ac4 <PHY_SetChannel>:
{
    3ac4:	b510      	push	{r4, lr}
    3ac6:	0004      	movs	r4, r0
	value = trx_reg_read(reg);
    3ac8:	2008      	movs	r0, #8
    3aca:	4b05      	ldr	r3, [pc, #20]	; (3ae0 <PHY_SetChannel+0x1c>)
    3acc:	4798      	blx	r3
	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    3ace:	231f      	movs	r3, #31
    3ad0:	0001      	movs	r1, r0
    3ad2:	4399      	bics	r1, r3
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    3ad4:	4321      	orrs	r1, r4
	trx_reg_write(reg, value);
    3ad6:	b2c9      	uxtb	r1, r1
    3ad8:	2008      	movs	r0, #8
    3ada:	4b02      	ldr	r3, [pc, #8]	; (3ae4 <PHY_SetChannel+0x20>)
    3adc:	4798      	blx	r3
}
    3ade:	bd10      	pop	{r4, pc}
    3ae0:	000042f5 	.word	0x000042f5
    3ae4:	000043f1 	.word	0x000043f1

00003ae8 <PHY_SetPanId>:
{
    3ae8:	b530      	push	{r4, r5, lr}
    3aea:	b083      	sub	sp, #12
    3aec:	466b      	mov	r3, sp
    3aee:	1d9d      	adds	r5, r3, #6
    3af0:	80d8      	strh	r0, [r3, #6]
	trx_reg_write(reg, value);
    3af2:	b2c1      	uxtb	r1, r0
    3af4:	2022      	movs	r0, #34	; 0x22
    3af6:	4c03      	ldr	r4, [pc, #12]	; (3b04 <PHY_SetPanId+0x1c>)
    3af8:	47a0      	blx	r4
    3afa:	7869      	ldrb	r1, [r5, #1]
    3afc:	2023      	movs	r0, #35	; 0x23
    3afe:	47a0      	blx	r4
}
    3b00:	b003      	add	sp, #12
    3b02:	bd30      	pop	{r4, r5, pc}
    3b04:	000043f1 	.word	0x000043f1

00003b08 <PHY_SetShortAddr>:
{
    3b08:	b570      	push	{r4, r5, r6, lr}
    3b0a:	b082      	sub	sp, #8
    3b0c:	466b      	mov	r3, sp
    3b0e:	1d9e      	adds	r6, r3, #6
    3b10:	80d8      	strh	r0, [r3, #6]
	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    3b12:	b2c4      	uxtb	r4, r0
	trx_reg_write(reg, value);
    3b14:	0021      	movs	r1, r4
    3b16:	2020      	movs	r0, #32
    3b18:	4d05      	ldr	r5, [pc, #20]	; (3b30 <PHY_SetShortAddr+0x28>)
    3b1a:	47a8      	blx	r5
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    3b1c:	7876      	ldrb	r6, [r6, #1]
	trx_reg_write(reg, value);
    3b1e:	0031      	movs	r1, r6
    3b20:	2021      	movs	r0, #33	; 0x21
    3b22:	47a8      	blx	r5
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    3b24:	19a4      	adds	r4, r4, r6
	trx_reg_write(reg, value);
    3b26:	b2e1      	uxtb	r1, r4
    3b28:	202d      	movs	r0, #45	; 0x2d
    3b2a:	47a8      	blx	r5
}
    3b2c:	b002      	add	sp, #8
    3b2e:	bd70      	pop	{r4, r5, r6, pc}
    3b30:	000043f1 	.word	0x000043f1

00003b34 <PHY_DataReq>:
{
    3b34:	b510      	push	{r4, lr}
    3b36:	0004      	movs	r4, r0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    3b38:	2019      	movs	r0, #25
    3b3a:	4b0c      	ldr	r3, [pc, #48]	; (3b6c <PHY_DataReq+0x38>)
    3b3c:	4798      	blx	r3
	value = trx_reg_read(reg);
    3b3e:	200f      	movs	r0, #15
    3b40:	4b0b      	ldr	r3, [pc, #44]	; (3b70 <PHY_DataReq+0x3c>)
    3b42:	4798      	blx	r3
	data[0] += 2;
    3b44:	7821      	ldrb	r1, [r4, #0]
    3b46:	1c8b      	adds	r3, r1, #2
    3b48:	7023      	strb	r3, [r4, #0]
	trx_frame_write(data, (data[0] - 1) /* length value*/);
    3b4a:	3101      	adds	r1, #1
    3b4c:	b2c9      	uxtb	r1, r1
    3b4e:	0020      	movs	r0, r4
    3b50:	4b08      	ldr	r3, [pc, #32]	; (3b74 <PHY_DataReq+0x40>)
    3b52:	4798      	blx	r3
	phyState = PHY_STATE_TX_WAIT_END;
    3b54:	2203      	movs	r2, #3
    3b56:	4b08      	ldr	r3, [pc, #32]	; (3b78 <PHY_DataReq+0x44>)
    3b58:	701a      	strb	r2, [r3, #0]
    3b5a:	4b08      	ldr	r3, [pc, #32]	; (3b7c <PHY_DataReq+0x48>)
    3b5c:	2280      	movs	r2, #128	; 0x80
    3b5e:	0352      	lsls	r2, r2, #13
    3b60:	619a      	str	r2, [r3, #24]
  __ASM volatile ("nop");
    3b62:	46c0      	nop			; (mov r8, r8)
    3b64:	46c0      	nop			; (mov r8, r8)
		port_base->OUTCLR.reg = pin_mask;
    3b66:	615a      	str	r2, [r3, #20]
}
    3b68:	bd10      	pop	{r4, pc}
    3b6a:	46c0      	nop			; (mov r8, r8)
    3b6c:	000039f5 	.word	0x000039f5
    3b70:	000042f5 	.word	0x000042f5
    3b74:	00004621 	.word	0x00004621
    3b78:	20000821 	.word	0x20000821
    3b7c:	41004400 	.word	0x41004400

00003b80 <PHY_EncryptReq>:
{
    3b80:	b510      	push	{r4, lr}
    3b82:	0004      	movs	r4, r0
    3b84:	0008      	movs	r0, r1
	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    3b86:	2200      	movs	r2, #0
    3b88:	2100      	movs	r1, #0
    3b8a:	4b05      	ldr	r3, [pc, #20]	; (3ba0 <PHY_EncryptReq+0x20>)
    3b8c:	4798      	blx	r3
	sal_aes_wrrd(text, NULL);
    3b8e:	2100      	movs	r1, #0
    3b90:	0020      	movs	r0, r4
    3b92:	4b04      	ldr	r3, [pc, #16]	; (3ba4 <PHY_EncryptReq+0x24>)
    3b94:	4798      	blx	r3
	sal_aes_read(text);
    3b96:	0020      	movs	r0, r4
    3b98:	4b03      	ldr	r3, [pc, #12]	; (3ba8 <PHY_EncryptReq+0x28>)
    3b9a:	4798      	blx	r3
}
    3b9c:	bd10      	pop	{r4, pc}
    3b9e:	46c0      	nop			; (mov r8, r8)
    3ba0:	00004041 	.word	0x00004041
    3ba4:	00003fd5 	.word	0x00003fd5
    3ba8:	00004179 	.word	0x00004179

00003bac <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    3bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bae:	b085      	sub	sp, #20
	if (PHY_STATE_SLEEP == phyState) {
    3bb0:	4b26      	ldr	r3, [pc, #152]	; (3c4c <PHY_TaskHandler+0xa0>)
    3bb2:	781b      	ldrb	r3, [r3, #0]
    3bb4:	2b02      	cmp	r3, #2
    3bb6:	d00a      	beq.n	3bce <PHY_TaskHandler+0x22>
	value = trx_reg_read(reg);
    3bb8:	200f      	movs	r0, #15
    3bba:	4b25      	ldr	r3, [pc, #148]	; (3c50 <PHY_TaskHandler+0xa4>)
    3bbc:	4798      	blx	r3
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END)) {
    3bbe:	0703      	lsls	r3, r0, #28
    3bc0:	d505      	bpl.n	3bce <PHY_TaskHandler+0x22>
		if (PHY_STATE_IDLE == phyState) {
    3bc2:	4b22      	ldr	r3, [pc, #136]	; (3c4c <PHY_TaskHandler+0xa0>)
    3bc4:	781b      	ldrb	r3, [r3, #0]
    3bc6:	2b01      	cmp	r3, #1
    3bc8:	d003      	beq.n	3bd2 <PHY_TaskHandler+0x26>
			ind.lqi  = phyRxBuffer[size + 1];
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
    3bca:	2b03      	cmp	r3, #3
    3bcc:	d026      	beq.n	3c1c <PHY_TaskHandler+0x70>
			phyState = PHY_STATE_IDLE;

			PHY_DataConf(status);
		}
	}
}
    3bce:	b005      	add	sp, #20
    3bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	value = trx_reg_read(reg);
    3bd2:	2007      	movs	r0, #7
    3bd4:	4b1e      	ldr	r3, [pc, #120]	; (3c50 <PHY_TaskHandler+0xa4>)
    3bd6:	4798      	blx	r3
    3bd8:	0006      	movs	r6, r0
			trx_frame_read(&size, 1);
    3bda:	466b      	mov	r3, sp
    3bdc:	1ddd      	adds	r5, r3, #7
    3bde:	2101      	movs	r1, #1
    3be0:	0028      	movs	r0, r5
    3be2:	4f1c      	ldr	r7, [pc, #112]	; (3c54 <PHY_TaskHandler+0xa8>)
    3be4:	47b8      	blx	r7
			trx_frame_read(phyRxBuffer, size + 2);
    3be6:	7829      	ldrb	r1, [r5, #0]
    3be8:	3102      	adds	r1, #2
    3bea:	b2c9      	uxtb	r1, r1
    3bec:	4c1a      	ldr	r4, [pc, #104]	; (3c58 <PHY_TaskHandler+0xac>)
    3bee:	0020      	movs	r0, r4
    3bf0:	47b8      	blx	r7
			ind.data = phyRxBuffer + 1;
    3bf2:	a802      	add	r0, sp, #8
    3bf4:	1c63      	adds	r3, r4, #1
    3bf6:	9302      	str	r3, [sp, #8]
			ind.size = size - PHY_CRC_SIZE;
    3bf8:	782b      	ldrb	r3, [r5, #0]
    3bfa:	1e9a      	subs	r2, r3, #2
    3bfc:	7102      	strb	r2, [r0, #4]
			ind.lqi  = phyRxBuffer[size + 1];
    3bfe:	18e4      	adds	r4, r4, r3
    3c00:	7863      	ldrb	r3, [r4, #1]
    3c02:	7143      	strb	r3, [r0, #5]
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
    3c04:	3e5b      	subs	r6, #91	; 0x5b
    3c06:	7186      	strb	r6, [r0, #6]
			PHY_DataInd(&ind);
    3c08:	4b14      	ldr	r3, [pc, #80]	; (3c5c <PHY_TaskHandler+0xb0>)
    3c0a:	4798      	blx	r3
	value = trx_reg_read(reg);
    3c0c:	4d10      	ldr	r5, [pc, #64]	; (3c50 <PHY_TaskHandler+0xa4>)
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    3c0e:	241f      	movs	r4, #31
	value = trx_reg_read(reg);
    3c10:	2001      	movs	r0, #1
    3c12:	47a8      	blx	r5
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    3c14:	4020      	ands	r0, r4
    3c16:	2816      	cmp	r0, #22
    3c18:	d1fa      	bne.n	3c10 <PHY_TaskHandler+0x64>
    3c1a:	e7d8      	b.n	3bce <PHY_TaskHandler+0x22>
	value = trx_reg_read(reg);
    3c1c:	2002      	movs	r0, #2
    3c1e:	4b0c      	ldr	r3, [pc, #48]	; (3c50 <PHY_TaskHandler+0xa4>)
    3c20:	4798      	blx	r3
					TRAC_STATUS) & 7;
    3c22:	0940      	lsrs	r0, r0, #5
    3c24:	b2c4      	uxtb	r4, r0
			if (TRAC_STATUS_SUCCESS == status) {
    3c26:	2c00      	cmp	r4, #0
    3c28:	d005      	beq.n	3c36 <PHY_TaskHandler+0x8a>
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    3c2a:	2c03      	cmp	r4, #3
    3c2c:	d00c      	beq.n	3c48 <PHY_TaskHandler+0x9c>
				status = PHY_STATUS_ERROR;
    3c2e:	3c05      	subs	r4, #5
    3c30:	1e63      	subs	r3, r4, #1
    3c32:	419c      	sbcs	r4, r3
    3c34:	3402      	adds	r4, #2
			phySetRxState();
    3c36:	4b0a      	ldr	r3, [pc, #40]	; (3c60 <PHY_TaskHandler+0xb4>)
    3c38:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    3c3a:	2201      	movs	r2, #1
    3c3c:	4b03      	ldr	r3, [pc, #12]	; (3c4c <PHY_TaskHandler+0xa0>)
    3c3e:	701a      	strb	r2, [r3, #0]
			PHY_DataConf(status);
    3c40:	0020      	movs	r0, r4
    3c42:	4b08      	ldr	r3, [pc, #32]	; (3c64 <PHY_TaskHandler+0xb8>)
    3c44:	4798      	blx	r3
    3c46:	e7c2      	b.n	3bce <PHY_TaskHandler+0x22>
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    3c48:	2401      	movs	r4, #1
    3c4a:	e7f4      	b.n	3c36 <PHY_TaskHandler+0x8a>
    3c4c:	20000821 	.word	0x20000821
    3c50:	000042f5 	.word	0x000042f5
    3c54:	000044f1 	.word	0x000044f1
    3c58:	200007a0 	.word	0x200007a0
    3c5c:	00002f81 	.word	0x00002f81
    3c60:	00003a31 	.word	0x00003a31
    3c64:	000038a9 	.word	0x000038a9

00003c68 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    3c68:	b510      	push	{r4, lr}
	SYS_TimerInit();
    3c6a:	4b04      	ldr	r3, [pc, #16]	; (3c7c <SYS_Init+0x14>)
    3c6c:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    3c6e:	4b04      	ldr	r3, [pc, #16]	; (3c80 <SYS_Init+0x18>)
    3c70:	4798      	blx	r3
#endif
	PHY_Init();
    3c72:	4b04      	ldr	r3, [pc, #16]	; (3c84 <SYS_Init+0x1c>)
    3c74:	4798      	blx	r3
	NWK_Init();
    3c76:	4b04      	ldr	r3, [pc, #16]	; (3c88 <SYS_Init+0x20>)
    3c78:	4798      	blx	r3
}
    3c7a:	bd10      	pop	{r4, pc}
    3c7c:	00003d35 	.word	0x00003d35
    3c80:	00003fd1 	.word	0x00003fd1
    3c84:	00003a5d 	.word	0x00003a5d
    3c88:	00002829 	.word	0x00002829

00003c8c <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
    3c8c:	b510      	push	{r4, lr}
	PHY_TaskHandler();
    3c8e:	4b03      	ldr	r3, [pc, #12]	; (3c9c <SYS_TaskHandler+0x10>)
    3c90:	4798      	blx	r3
	NWK_TaskHandler();
    3c92:	4b03      	ldr	r3, [pc, #12]	; (3ca0 <SYS_TaskHandler+0x14>)
    3c94:	4798      	blx	r3
	SYS_TimerTaskHandler();
    3c96:	4b03      	ldr	r3, [pc, #12]	; (3ca4 <SYS_TaskHandler+0x18>)
    3c98:	4798      	blx	r3
}
    3c9a:	bd10      	pop	{r4, pc}
    3c9c:	00003bad 	.word	0x00003bad
    3ca0:	000028b5 	.word	0x000028b5
    3ca4:	00003dbd 	.word	0x00003dbd

00003ca8 <SYS_EncryptReq>:
#endif

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint32_t *text, uint32_t *key)
{
    3ca8:	b510      	push	{r4, lr}
#if SYS_SECURITY_MODE == 0
	PHY_EncryptReq((uint8_t *)text, (uint8_t *)key);
    3caa:	4b02      	ldr	r3, [pc, #8]	; (3cb4 <SYS_EncryptReq+0xc>)
    3cac:	4798      	blx	r3
	text[2] ^= text[0];
	text[3] ^= text[1];
	xtea(&text[2], key);
#endif

	SYS_EncryptConf();
    3cae:	4b02      	ldr	r3, [pc, #8]	; (3cb8 <SYS_EncryptReq+0x10>)
    3cb0:	4798      	blx	r3
}
    3cb2:	bd10      	pop	{r4, pc}
    3cb4:	00003b81 	.word	0x00003b81
    3cb8:	000033f9 	.word	0x000033f9

00003cbc <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    3cbc:	b530      	push	{r4, r5, lr}
	if (timers) {
    3cbe:	4b14      	ldr	r3, [pc, #80]	; (3d10 <placeTimer+0x54>)
    3cc0:	681d      	ldr	r5, [r3, #0]
    3cc2:	2d00      	cmp	r5, #0
    3cc4:	d01c      	beq.n	3d00 <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    3cc6:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    3cc8:	6869      	ldr	r1, [r5, #4]
    3cca:	428a      	cmp	r2, r1
    3ccc:	d309      	bcc.n	3ce2 <placeTimer+0x26>
    3cce:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    3cd0:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3cd2:	6823      	ldr	r3, [r4, #0]
    3cd4:	2b00      	cmp	r3, #0
    3cd6:	d008      	beq.n	3cea <placeTimer+0x2e>
			if (timeout < t->timeout) {
    3cd8:	6859      	ldr	r1, [r3, #4]
    3cda:	4291      	cmp	r1, r2
    3cdc:	d803      	bhi.n	3ce6 <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3cde:	001c      	movs	r4, r3
    3ce0:	e7f6      	b.n	3cd0 <placeTimer+0x14>
    3ce2:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    3ce4:	2400      	movs	r4, #0
				t->timeout -= timeout;
    3ce6:	1a89      	subs	r1, r1, r2
    3ce8:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    3cea:	6042      	str	r2, [r0, #4]

		if (prev) {
    3cec:	2c00      	cmp	r4, #0
    3cee:	d003      	beq.n	3cf8 <placeTimer+0x3c>
			timer->next = prev->next;
    3cf0:	6823      	ldr	r3, [r4, #0]
    3cf2:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    3cf4:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    3cf6:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    3cf8:	6005      	str	r5, [r0, #0]
			timers = timer;
    3cfa:	4b05      	ldr	r3, [pc, #20]	; (3d10 <placeTimer+0x54>)
    3cfc:	6018      	str	r0, [r3, #0]
    3cfe:	e7fa      	b.n	3cf6 <placeTimer+0x3a>
		timer->next = NULL;
    3d00:	2300      	movs	r3, #0
    3d02:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    3d04:	6883      	ldr	r3, [r0, #8]
    3d06:	6043      	str	r3, [r0, #4]
		timers = timer;
    3d08:	4b01      	ldr	r3, [pc, #4]	; (3d10 <placeTimer+0x54>)
    3d0a:	6018      	str	r0, [r3, #0]
}
    3d0c:	e7f3      	b.n	3cf6 <placeTimer+0x3a>
    3d0e:	46c0      	nop			; (mov r8, r8)
    3d10:	20000824 	.word	0x20000824

00003d14 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    3d14:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    3d16:	4a04      	ldr	r2, [pc, #16]	; (3d28 <SYS_HwExpiry_Cb+0x14>)
    3d18:	7813      	ldrb	r3, [r2, #0]
    3d1a:	3301      	adds	r3, #1
    3d1c:	b2db      	uxtb	r3, r3
    3d1e:	7013      	strb	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    3d20:	4802      	ldr	r0, [pc, #8]	; (3d2c <SYS_HwExpiry_Cb+0x18>)
    3d22:	4b03      	ldr	r3, [pc, #12]	; (3d30 <SYS_HwExpiry_Cb+0x1c>)
    3d24:	4798      	blx	r3
}
    3d26:	bd10      	pop	{r4, pc}
    3d28:	20001688 	.word	0x20001688
    3d2c:	00002710 	.word	0x00002710
    3d30:	00004d05 	.word	0x00004d05

00003d34 <SYS_TimerInit>:
{
    3d34:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    3d36:	2400      	movs	r4, #0
    3d38:	4b06      	ldr	r3, [pc, #24]	; (3d54 <SYS_TimerInit+0x20>)
    3d3a:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    3d3c:	4806      	ldr	r0, [pc, #24]	; (3d58 <SYS_TimerInit+0x24>)
    3d3e:	4b07      	ldr	r3, [pc, #28]	; (3d5c <SYS_TimerInit+0x28>)
    3d40:	4798      	blx	r3
	common_tc_init();
    3d42:	4b07      	ldr	r3, [pc, #28]	; (3d60 <SYS_TimerInit+0x2c>)
    3d44:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    3d46:	4807      	ldr	r0, [pc, #28]	; (3d64 <SYS_TimerInit+0x30>)
    3d48:	4b07      	ldr	r3, [pc, #28]	; (3d68 <SYS_TimerInit+0x34>)
    3d4a:	4798      	blx	r3
	timers = NULL;
    3d4c:	4b07      	ldr	r3, [pc, #28]	; (3d6c <SYS_TimerInit+0x38>)
    3d4e:	601c      	str	r4, [r3, #0]
}
    3d50:	bd10      	pop	{r4, pc}
    3d52:	46c0      	nop			; (mov r8, r8)
    3d54:	20001688 	.word	0x20001688
    3d58:	00003d15 	.word	0x00003d15
    3d5c:	00004df5 	.word	0x00004df5
    3d60:	00004d71 	.word	0x00004d71
    3d64:	00002710 	.word	0x00002710
    3d68:	00004d05 	.word	0x00004d05
    3d6c:	20000824 	.word	0x20000824

00003d70 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3d70:	4b09      	ldr	r3, [pc, #36]	; (3d98 <SYS_TimerStarted+0x28>)
    3d72:	681b      	ldr	r3, [r3, #0]
    3d74:	2b00      	cmp	r3, #0
    3d76:	d00a      	beq.n	3d8e <SYS_TimerStarted+0x1e>
		if (t == timer) {
    3d78:	4283      	cmp	r3, r0
    3d7a:	d00a      	beq.n	3d92 <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3d7c:	681b      	ldr	r3, [r3, #0]
    3d7e:	2b00      	cmp	r3, #0
    3d80:	d003      	beq.n	3d8a <SYS_TimerStarted+0x1a>
		if (t == timer) {
    3d82:	4298      	cmp	r0, r3
    3d84:	d1fa      	bne.n	3d7c <SYS_TimerStarted+0xc>
			return true;
    3d86:	2001      	movs	r0, #1
    3d88:	e000      	b.n	3d8c <SYS_TimerStarted+0x1c>
	return false;
    3d8a:	2000      	movs	r0, #0
}
    3d8c:	4770      	bx	lr
	return false;
    3d8e:	2000      	movs	r0, #0
    3d90:	e7fc      	b.n	3d8c <SYS_TimerStarted+0x1c>
			return true;
    3d92:	2001      	movs	r0, #1
    3d94:	e7fa      	b.n	3d8c <SYS_TimerStarted+0x1c>
    3d96:	46c0      	nop			; (mov r8, r8)
    3d98:	20000824 	.word	0x20000824

00003d9c <SYS_TimerStart>:
{
    3d9c:	b510      	push	{r4, lr}
    3d9e:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    3da0:	4b04      	ldr	r3, [pc, #16]	; (3db4 <SYS_TimerStart+0x18>)
    3da2:	4798      	blx	r3
    3da4:	2800      	cmp	r0, #0
    3da6:	d000      	beq.n	3daa <SYS_TimerStart+0xe>
}
    3da8:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    3daa:	0020      	movs	r0, r4
    3dac:	4b02      	ldr	r3, [pc, #8]	; (3db8 <SYS_TimerStart+0x1c>)
    3dae:	4798      	blx	r3
}
    3db0:	e7fa      	b.n	3da8 <SYS_TimerStart+0xc>
    3db2:	46c0      	nop			; (mov r8, r8)
    3db4:	00003d71 	.word	0x00003d71
    3db8:	00003cbd 	.word	0x00003cbd

00003dbc <SYS_TimerTaskHandler>:
{
    3dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dbe:	b083      	sub	sp, #12
	if (0 == SysTimerIrqCount) {
    3dc0:	4b1d      	ldr	r3, [pc, #116]	; (3e38 <SYS_TimerTaskHandler+0x7c>)
    3dc2:	781b      	ldrb	r3, [r3, #0]
    3dc4:	2b00      	cmp	r3, #0
    3dc6:	d035      	beq.n	3e34 <SYS_TimerTaskHandler+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3dc8:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3dcc:	4253      	negs	r3, r2
    3dce:	4153      	adcs	r3, r2
    3dd0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3dd2:	b672      	cpsid	i
  __ASM volatile ("dmb");
    3dd4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3dd8:	2100      	movs	r1, #0
    3dda:	4b18      	ldr	r3, [pc, #96]	; (3e3c <SYS_TimerTaskHandler+0x80>)
    3ddc:	7019      	strb	r1, [r3, #0]
	return flags;
    3dde:	9801      	ldr	r0, [sp, #4]
	cnt = SysTimerIrqCount;
    3de0:	4a15      	ldr	r2, [pc, #84]	; (3e38 <SYS_TimerTaskHandler+0x7c>)
    3de2:	7813      	ldrb	r3, [r2, #0]
    3de4:	b2db      	uxtb	r3, r3
	SysTimerIrqCount = 0;
    3de6:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3de8:	2800      	cmp	r0, #0
    3dea:	d005      	beq.n	3df8 <SYS_TimerTaskHandler+0x3c>
		cpu_irq_enable();
    3dec:	3101      	adds	r1, #1
    3dee:	4a13      	ldr	r2, [pc, #76]	; (3e3c <SYS_TimerTaskHandler+0x80>)
    3df0:	7011      	strb	r1, [r2, #0]
    3df2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3df6:	b662      	cpsie	i
	elapsed = cnt * SYS_TIMER_INTERVAL;
    3df8:	009d      	lsls	r5, r3, #2
    3dfa:	18ed      	adds	r5, r5, r3
    3dfc:	006d      	lsls	r5, r5, #1
	while (timers && (timers->timeout <= elapsed)) {
    3dfe:	4e10      	ldr	r6, [pc, #64]	; (3e40 <SYS_TimerTaskHandler+0x84>)
		timers = timers->next;
    3e00:	0037      	movs	r7, r6
	while (timers && (timers->timeout <= elapsed)) {
    3e02:	e005      	b.n	3e10 <SYS_TimerTaskHandler+0x54>
			placeTimer(timer);
    3e04:	0020      	movs	r0, r4
    3e06:	4b0f      	ldr	r3, [pc, #60]	; (3e44 <SYS_TimerTaskHandler+0x88>)
    3e08:	4798      	blx	r3
    3e0a:	e00d      	b.n	3e28 <SYS_TimerTaskHandler+0x6c>
			timer->handler(timer);
    3e0c:	0020      	movs	r0, r4
    3e0e:	4798      	blx	r3
	while (timers && (timers->timeout <= elapsed)) {
    3e10:	6834      	ldr	r4, [r6, #0]
    3e12:	2c00      	cmp	r4, #0
    3e14:	d00e      	beq.n	3e34 <SYS_TimerTaskHandler+0x78>
    3e16:	6863      	ldr	r3, [r4, #4]
    3e18:	429d      	cmp	r5, r3
    3e1a:	d309      	bcc.n	3e30 <SYS_TimerTaskHandler+0x74>
		elapsed -= timers->timeout;
    3e1c:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    3e1e:	6823      	ldr	r3, [r4, #0]
    3e20:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    3e22:	7b23      	ldrb	r3, [r4, #12]
    3e24:	2b01      	cmp	r3, #1
    3e26:	d0ed      	beq.n	3e04 <SYS_TimerTaskHandler+0x48>
		if (timer->handler) {
    3e28:	6923      	ldr	r3, [r4, #16]
    3e2a:	2b00      	cmp	r3, #0
    3e2c:	d1ee      	bne.n	3e0c <SYS_TimerTaskHandler+0x50>
    3e2e:	e7ef      	b.n	3e10 <SYS_TimerTaskHandler+0x54>
		timers->timeout -= elapsed;
    3e30:	1b5d      	subs	r5, r3, r5
    3e32:	6065      	str	r5, [r4, #4]
}
    3e34:	b003      	add	sp, #12
    3e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e38:	20001688 	.word	0x20001688
    3e3c:	20000008 	.word	0x20000008
    3e40:	20000824 	.word	0x20000824
    3e44:	00003cbd 	.word	0x00003cbd

00003e48 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    3e48:	b510      	push	{r4, lr}
	tmr_cca_callback();
    3e4a:	4b01      	ldr	r3, [pc, #4]	; (3e50 <tc_cca_callback+0x8>)
    3e4c:	4798      	blx	r3
}
    3e4e:	bd10      	pop	{r4, pc}
    3e50:	00004dd9 	.word	0x00004dd9

00003e54 <tc_ovf_callback>:
{
    3e54:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    3e56:	4b01      	ldr	r3, [pc, #4]	; (3e5c <tc_ovf_callback+0x8>)
    3e58:	4798      	blx	r3
}
    3e5a:	bd10      	pop	{r4, pc}
    3e5c:	00004d91 	.word	0x00004d91

00003e60 <tmr_read_count>:
{
    3e60:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    3e62:	4802      	ldr	r0, [pc, #8]	; (3e6c <tmr_read_count+0xc>)
    3e64:	4b02      	ldr	r3, [pc, #8]	; (3e70 <tmr_read_count+0x10>)
    3e66:	4798      	blx	r3
    3e68:	b280      	uxth	r0, r0
}
    3e6a:	bd10      	pop	{r4, pc}
    3e6c:	200016c0 	.word	0x200016c0
    3e70:	000025f5 	.word	0x000025f5

00003e74 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    3e74:	4b03      	ldr	r3, [pc, #12]	; (3e84 <tmr_disable_cc_interrupt+0x10>)
    3e76:	2110      	movs	r1, #16
    3e78:	681a      	ldr	r2, [r3, #0]
    3e7a:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    3e7c:	7e5a      	ldrb	r2, [r3, #25]
    3e7e:	438a      	bics	r2, r1
    3e80:	765a      	strb	r2, [r3, #25]
}
    3e82:	4770      	bx	lr
    3e84:	200016c0 	.word	0x200016c0

00003e88 <tmr_enable_cc_interrupt>:
{
    3e88:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3e8a:	4c0a      	ldr	r4, [pc, #40]	; (3eb4 <tmr_enable_cc_interrupt+0x2c>)
    3e8c:	6820      	ldr	r0, [r4, #0]
    3e8e:	4b0a      	ldr	r3, [pc, #40]	; (3eb8 <tmr_enable_cc_interrupt+0x30>)
    3e90:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    3e92:	4b0a      	ldr	r3, [pc, #40]	; (3ebc <tmr_enable_cc_interrupt+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3e94:	5c1b      	ldrb	r3, [r3, r0]
    3e96:	221f      	movs	r2, #31
    3e98:	401a      	ands	r2, r3
    3e9a:	2301      	movs	r3, #1
    3e9c:	4093      	lsls	r3, r2
    3e9e:	4a08      	ldr	r2, [pc, #32]	; (3ec0 <tmr_enable_cc_interrupt+0x38>)
    3ea0:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    3ea2:	7e63      	ldrb	r3, [r4, #25]
    3ea4:	2210      	movs	r2, #16
    3ea6:	4313      	orrs	r3, r2
    3ea8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    3eaa:	6823      	ldr	r3, [r4, #0]
    3eac:	2210      	movs	r2, #16
    3eae:	735a      	strb	r2, [r3, #13]
}
    3eb0:	bd10      	pop	{r4, pc}
    3eb2:	46c0      	nop			; (mov r8, r8)
    3eb4:	200016c0 	.word	0x200016c0
    3eb8:	00002381 	.word	0x00002381
    3ebc:	0000a4e4 	.word	0x0000a4e4
    3ec0:	e000e100 	.word	0xe000e100

00003ec4 <tmr_write_cmpreg>:
{
    3ec4:	b510      	push	{r4, lr}
    3ec6:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    3ec8:	2100      	movs	r1, #0
    3eca:	4802      	ldr	r0, [pc, #8]	; (3ed4 <tmr_write_cmpreg+0x10>)
    3ecc:	4b02      	ldr	r3, [pc, #8]	; (3ed8 <tmr_write_cmpreg+0x14>)
    3ece:	4798      	blx	r3
}
    3ed0:	bd10      	pop	{r4, pc}
    3ed2:	46c0      	nop			; (mov r8, r8)
    3ed4:	200016c0 	.word	0x200016c0
    3ed8:	00002621 	.word	0x00002621

00003edc <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    3edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ede:	46ce      	mov	lr, r9
    3ee0:	4647      	mov	r7, r8
    3ee2:	b580      	push	{r7, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    3ee4:	4a2d      	ldr	r2, [pc, #180]	; (3f9c <tmr_init+0xc0>)
    3ee6:	2300      	movs	r3, #0
    3ee8:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    3eea:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    3eec:	2100      	movs	r1, #0
    3eee:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    3ef0:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    3ef2:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    3ef4:	7051      	strb	r1, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    3ef6:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    3ef8:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    3efa:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    3efc:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    3efe:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    3f00:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    3f02:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    3f04:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    3f06:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    3f08:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    3f0a:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    3f0c:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    3f0e:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    3f10:	3b01      	subs	r3, #1
    3f12:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    3f14:	4c22      	ldr	r4, [pc, #136]	; (3fa0 <tmr_init+0xc4>)
    3f16:	4923      	ldr	r1, [pc, #140]	; (3fa4 <tmr_init+0xc8>)
    3f18:	0020      	movs	r0, r4
    3f1a:	4b23      	ldr	r3, [pc, #140]	; (3fa8 <tmr_init+0xcc>)
    3f1c:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    3f1e:	2200      	movs	r2, #0
    3f20:	4922      	ldr	r1, [pc, #136]	; (3fac <tmr_init+0xd0>)
    3f22:	0020      	movs	r0, r4
    3f24:	4d22      	ldr	r5, [pc, #136]	; (3fb0 <tmr_init+0xd4>)
    3f26:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    3f28:	2202      	movs	r2, #2
    3f2a:	4922      	ldr	r1, [pc, #136]	; (3fb4 <tmr_init+0xd8>)
    3f2c:	0020      	movs	r0, r4
    3f2e:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3f30:	6820      	ldr	r0, [r4, #0]
    3f32:	4b21      	ldr	r3, [pc, #132]	; (3fb8 <tmr_init+0xdc>)
    3f34:	4699      	mov	r9, r3
    3f36:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    3f38:	4b20      	ldr	r3, [pc, #128]	; (3fbc <tmr_init+0xe0>)
    3f3a:	4698      	mov	r8, r3
    3f3c:	5c1b      	ldrb	r3, [r3, r0]
    3f3e:	261f      	movs	r6, #31
    3f40:	4033      	ands	r3, r6
    3f42:	2501      	movs	r5, #1
    3f44:	002a      	movs	r2, r5
    3f46:	409a      	lsls	r2, r3
    3f48:	4f1d      	ldr	r7, [pc, #116]	; (3fc0 <tmr_init+0xe4>)
    3f4a:	603a      	str	r2, [r7, #0]
		module->enable_callback_mask |= (1 << callback_type);
    3f4c:	7e63      	ldrb	r3, [r4, #25]
    3f4e:	2201      	movs	r2, #1
    3f50:	4313      	orrs	r3, r2
    3f52:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    3f54:	6823      	ldr	r3, [r4, #0]
    3f56:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3f58:	0018      	movs	r0, r3
    3f5a:	47c8      	blx	r9
    3f5c:	4643      	mov	r3, r8
    3f5e:	5c1b      	ldrb	r3, [r3, r0]
    3f60:	401e      	ands	r6, r3
    3f62:	40b5      	lsls	r5, r6
    3f64:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    3f66:	7e63      	ldrb	r3, [r4, #25]
    3f68:	2210      	movs	r2, #16
    3f6a:	4313      	orrs	r3, r2
    3f6c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    3f6e:	6822      	ldr	r2, [r4, #0]
    3f70:	2310      	movs	r3, #16
    3f72:	7353      	strb	r3, [r2, #13]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3f74:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    3f76:	b25b      	sxtb	r3, r3
    3f78:	2b00      	cmp	r3, #0
    3f7a:	dbfb      	blt.n	3f74 <tmr_init+0x98>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3f7c:	8813      	ldrh	r3, [r2, #0]
    3f7e:	2102      	movs	r1, #2
    3f80:	430b      	orrs	r3, r1
    3f82:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    3f84:	2000      	movs	r0, #0
    3f86:	4b0f      	ldr	r3, [pc, #60]	; (3fc4 <tmr_init+0xe8>)
    3f88:	4798      	blx	r3
    3f8a:	490f      	ldr	r1, [pc, #60]	; (3fc8 <tmr_init+0xec>)
    3f8c:	4b0f      	ldr	r3, [pc, #60]	; (3fcc <tmr_init+0xf0>)
    3f8e:	4798      	blx	r3
	#endif
	return timer_multiplier;
    3f90:	b2c0      	uxtb	r0, r0
}
    3f92:	bc0c      	pop	{r2, r3}
    3f94:	4690      	mov	r8, r2
    3f96:	4699      	mov	r9, r3
    3f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f9a:	46c0      	nop			; (mov r8, r8)
    3f9c:	2000168c 	.word	0x2000168c
    3fa0:	200016c0 	.word	0x200016c0
    3fa4:	42002c00 	.word	0x42002c00
    3fa8:	000023b9 	.word	0x000023b9
    3fac:	00003e55 	.word	0x00003e55
    3fb0:	000022b9 	.word	0x000022b9
    3fb4:	00003e49 	.word	0x00003e49
    3fb8:	00002381 	.word	0x00002381
    3fbc:	0000a4e4 	.word	0x0000a4e4
    3fc0:	e000e100 	.word	0xe000e100
    3fc4:	00002049 	.word	0x00002049
    3fc8:	000f4240 	.word	0x000f4240
    3fcc:	00007891 	.word	0x00007891

00003fd0 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    3fd0:	4770      	bx	lr
	...

00003fd4 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    3fd4:	b570      	push	{r4, r5, r6, lr}
    3fd6:	0003      	movs	r3, r0
    3fd8:	000d      	movs	r5, r1
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    3fda:	4c14      	ldr	r4, [pc, #80]	; (402c <sal_aes_wrrd+0x58>)
    3fdc:	1c60      	adds	r0, r4, #1
    3fde:	2210      	movs	r2, #16
    3fe0:	0019      	movs	r1, r3
    3fe2:	4b13      	ldr	r3, [pc, #76]	; (4030 <sal_aes_wrrd+0x5c>)
    3fe4:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    3fe6:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    3fe8:	4b12      	ldr	r3, [pc, #72]	; (4034 <sal_aes_wrrd+0x60>)
    3fea:	781b      	ldrb	r3, [r3, #0]
    3fec:	2b00      	cmp	r3, #0
    3fee:	d015      	beq.n	401c <sal_aes_wrrd+0x48>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    3ff0:	2212      	movs	r2, #18
    3ff2:	490e      	ldr	r1, [pc, #56]	; (402c <sal_aes_wrrd+0x58>)
    3ff4:	2083      	movs	r0, #131	; 0x83
    3ff6:	4b10      	ldr	r3, [pc, #64]	; (4038 <sal_aes_wrrd+0x64>)
    3ff8:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    3ffa:	2200      	movs	r2, #0
    3ffc:	4b0d      	ldr	r3, [pc, #52]	; (4034 <sal_aes_wrrd+0x60>)
    3ffe:	701a      	strb	r2, [r3, #0]
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    4000:	2d00      	cmp	r5, #0
    4002:	d005      	beq.n	4010 <sal_aes_wrrd+0x3c>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    4004:	2210      	movs	r2, #16
    4006:	4909      	ldr	r1, [pc, #36]	; (402c <sal_aes_wrrd+0x58>)
    4008:	3101      	adds	r1, #1
    400a:	0028      	movs	r0, r5
    400c:	4b08      	ldr	r3, [pc, #32]	; (4030 <sal_aes_wrrd+0x5c>)
    400e:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    4010:	4b06      	ldr	r3, [pc, #24]	; (402c <sal_aes_wrrd+0x58>)
    4012:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    4014:	2018      	movs	r0, #24
    4016:	4b09      	ldr	r3, [pc, #36]	; (403c <sal_aes_wrrd+0x68>)
    4018:	4798      	blx	r3
}
    401a:	bd70      	pop	{r4, r5, r6, pc}
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    401c:	2211      	movs	r2, #17
    401e:	4903      	ldr	r1, [pc, #12]	; (402c <sal_aes_wrrd+0x58>)
    4020:	3101      	adds	r1, #1
    4022:	2084      	movs	r0, #132	; 0x84
    4024:	4b04      	ldr	r3, [pc, #16]	; (4038 <sal_aes_wrrd+0x64>)
    4026:	4798      	blx	r3
    4028:	e7ea      	b.n	4000 <sal_aes_wrrd+0x2c>
    402a:	46c0      	nop			; (mov r8, r8)
    402c:	20000828 	.word	0x20000828
    4030:	00004e49 	.word	0x00004e49
    4034:	2000085c 	.word	0x2000085c
    4038:	00004a31 	.word	0x00004a31
    403c:	000007d9 	.word	0x000007d9

00004040 <sal_aes_setup>:
{
    4040:	b5f0      	push	{r4, r5, r6, r7, lr}
    4042:	46c6      	mov	lr, r8
    4044:	b500      	push	{lr}
    4046:	b084      	sub	sp, #16
    4048:	0005      	movs	r5, r0
    404a:	000e      	movs	r6, r1
    404c:	0014      	movs	r4, r2
	if (key != NULL) {
    404e:	2800      	cmp	r0, #0
    4050:	d017      	beq.n	4082 <sal_aes_setup+0x42>
		dec_initialized = false;
    4052:	2200      	movs	r2, #0
    4054:	4b3e      	ldr	r3, [pc, #248]	; (4150 <sal_aes_setup+0x110>)
    4056:	701a      	strb	r2, [r3, #0]
		last_dir = AES_DIR_VOID;
    4058:	3202      	adds	r2, #2
    405a:	4b3e      	ldr	r3, [pc, #248]	; (4154 <sal_aes_setup+0x114>)
    405c:	701a      	strb	r2, [r3, #0]
		memcpy(enc_key, key, AES_KEYSIZE);
    405e:	320e      	adds	r2, #14
    4060:	0001      	movs	r1, r0
    4062:	483d      	ldr	r0, [pc, #244]	; (4158 <sal_aes_setup+0x118>)
    4064:	4b3d      	ldr	r3, [pc, #244]	; (415c <sal_aes_setup+0x11c>)
    4066:	4698      	mov	r8, r3
    4068:	4798      	blx	r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    406a:	4f3d      	ldr	r7, [pc, #244]	; (4160 <sal_aes_setup+0x120>)
    406c:	2310      	movs	r3, #16
    406e:	703b      	strb	r3, [r7, #0]
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    4070:	1c78      	adds	r0, r7, #1
    4072:	2210      	movs	r2, #16
    4074:	0029      	movs	r1, r5
    4076:	47c0      	blx	r8
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    4078:	2211      	movs	r2, #17
    407a:	0039      	movs	r1, r7
    407c:	2083      	movs	r0, #131	; 0x83
    407e:	4b39      	ldr	r3, [pc, #228]	; (4164 <sal_aes_setup+0x124>)
    4080:	4798      	blx	r3
	switch (dir) {
    4082:	2c00      	cmp	r4, #0
    4084:	d003      	beq.n	408e <sal_aes_setup+0x4e>
    4086:	2c01      	cmp	r4, #1
    4088:	d02f      	beq.n	40ea <sal_aes_setup+0xaa>
		return false;
    408a:	2000      	movs	r0, #0
    408c:	e01b      	b.n	40c6 <sal_aes_setup+0x86>
		if (last_dir == AES_DIR_DECRYPT) {
    408e:	4b31      	ldr	r3, [pc, #196]	; (4154 <sal_aes_setup+0x114>)
    4090:	781b      	ldrb	r3, [r3, #0]
    4092:	2b01      	cmp	r3, #1
    4094:	d01b      	beq.n	40ce <sal_aes_setup+0x8e>
	last_dir = dir;
    4096:	4b2f      	ldr	r3, [pc, #188]	; (4154 <sal_aes_setup+0x114>)
    4098:	701c      	strb	r4, [r3, #0]
	switch (enc_mode) {
    409a:	2e00      	cmp	r6, #0
    409c:	d002      	beq.n	40a4 <sal_aes_setup+0x64>
		return (false);
    409e:	2000      	movs	r0, #0
	switch (enc_mode) {
    40a0:	2e02      	cmp	r6, #2
    40a2:	d110      	bne.n	40c6 <sal_aes_setup+0x86>
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    40a4:	0136      	lsls	r6, r6, #4
    40a6:	2370      	movs	r3, #112	; 0x70
    40a8:	401e      	ands	r6, r3
				SR_MASK(SR_AES_DIR, dir);
    40aa:	00e4      	lsls	r4, r4, #3
    40ac:	3b68      	subs	r3, #104	; 0x68
    40ae:	401c      	ands	r4, r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    40b0:	4334      	orrs	r4, r6
    40b2:	4b2b      	ldr	r3, [pc, #172]	; (4160 <sal_aes_setup+0x120>)
    40b4:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir) |
    40b6:	2680      	movs	r6, #128	; 0x80
    40b8:	4276      	negs	r6, r6
    40ba:	4334      	orrs	r4, r6
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    40bc:	745c      	strb	r4, [r3, #17]
	setup_flag = true;
    40be:	2201      	movs	r2, #1
    40c0:	4b29      	ldr	r3, [pc, #164]	; (4168 <sal_aes_setup+0x128>)
    40c2:	701a      	strb	r2, [r3, #0]
	return (true);
    40c4:	2001      	movs	r0, #1
}
    40c6:	b004      	add	sp, #16
    40c8:	bc04      	pop	{r2}
    40ca:	4690      	mov	r8, r2
    40cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    40ce:	4d24      	ldr	r5, [pc, #144]	; (4160 <sal_aes_setup+0x120>)
    40d0:	330f      	adds	r3, #15
    40d2:	702b      	strb	r3, [r5, #0]
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    40d4:	1c68      	adds	r0, r5, #1
    40d6:	2210      	movs	r2, #16
    40d8:	491f      	ldr	r1, [pc, #124]	; (4158 <sal_aes_setup+0x118>)
    40da:	4b20      	ldr	r3, [pc, #128]	; (415c <sal_aes_setup+0x11c>)
    40dc:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    40de:	2211      	movs	r2, #17
    40e0:	0029      	movs	r1, r5
    40e2:	2083      	movs	r0, #131	; 0x83
    40e4:	4b1f      	ldr	r3, [pc, #124]	; (4164 <sal_aes_setup+0x124>)
    40e6:	4798      	blx	r3
    40e8:	e7d5      	b.n	4096 <sal_aes_setup+0x56>
		if (last_dir != AES_DIR_DECRYPT) {
    40ea:	4b1a      	ldr	r3, [pc, #104]	; (4154 <sal_aes_setup+0x114>)
    40ec:	781b      	ldrb	r3, [r3, #0]
    40ee:	2b01      	cmp	r3, #1
    40f0:	d0d1      	beq.n	4096 <sal_aes_setup+0x56>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    40f2:	2210      	movs	r2, #16
    40f4:	4b1a      	ldr	r3, [pc, #104]	; (4160 <sal_aes_setup+0x120>)
    40f6:	701a      	strb	r2, [r3, #0]
			if (!dec_initialized) {
    40f8:	4b15      	ldr	r3, [pc, #84]	; (4150 <sal_aes_setup+0x110>)
    40fa:	781b      	ldrb	r3, [r3, #0]
    40fc:	2b00      	cmp	r3, #0
    40fe:	d00e      	beq.n	411e <sal_aes_setup+0xde>
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    4100:	4d17      	ldr	r5, [pc, #92]	; (4160 <sal_aes_setup+0x120>)
    4102:	1c68      	adds	r0, r5, #1
    4104:	2210      	movs	r2, #16
    4106:	4919      	ldr	r1, [pc, #100]	; (416c <sal_aes_setup+0x12c>)
    4108:	4b14      	ldr	r3, [pc, #80]	; (415c <sal_aes_setup+0x11c>)
    410a:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    410c:	2211      	movs	r2, #17
    410e:	0029      	movs	r1, r5
    4110:	2083      	movs	r0, #131	; 0x83
    4112:	4b14      	ldr	r3, [pc, #80]	; (4164 <sal_aes_setup+0x124>)
    4114:	4798      	blx	r3
			dec_initialized = true;
    4116:	4b0e      	ldr	r3, [pc, #56]	; (4150 <sal_aes_setup+0x110>)
    4118:	2201      	movs	r2, #1
    411a:	701a      	strb	r2, [r3, #0]
    411c:	e7bb      	b.n	4096 <sal_aes_setup+0x56>
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    411e:	4d10      	ldr	r5, [pc, #64]	; (4160 <sal_aes_setup+0x120>)
    4120:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    4122:	3380      	adds	r3, #128	; 0x80
    4124:	746b      	strb	r3, [r5, #17]
				setup_flag = true; /* Needed in sal_aes_wrrd().
    4126:	3a0f      	subs	r2, #15
    4128:	4b0f      	ldr	r3, [pc, #60]	; (4168 <sal_aes_setup+0x128>)
    412a:	701a      	strb	r2, [r3, #0]
				sal_aes_wrrd(dummy, NULL);
    412c:	2100      	movs	r1, #0
    412e:	4668      	mov	r0, sp
    4130:	4b0f      	ldr	r3, [pc, #60]	; (4170 <sal_aes_setup+0x130>)
    4132:	4798      	blx	r3
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    4134:	2310      	movs	r3, #16
    4136:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
    4138:	2201      	movs	r2, #1
    413a:	0029      	movs	r1, r5
    413c:	2083      	movs	r0, #131	; 0x83
    413e:	4b09      	ldr	r3, [pc, #36]	; (4164 <sal_aes_setup+0x124>)
    4140:	4798      	blx	r3
				trx_sram_read((AES_BASE_ADDR +
    4142:	2210      	movs	r2, #16
    4144:	4909      	ldr	r1, [pc, #36]	; (416c <sal_aes_setup+0x12c>)
    4146:	2084      	movs	r0, #132	; 0x84
    4148:	4b0a      	ldr	r3, [pc, #40]	; (4174 <sal_aes_setup+0x134>)
    414a:	4798      	blx	r3
    414c:	e7d8      	b.n	4100 <sal_aes_setup+0xc0>
    414e:	46c0      	nop			; (mov r8, r8)
    4150:	2000083a 	.word	0x2000083a
    4154:	20000009 	.word	0x20000009
    4158:	2000084c 	.word	0x2000084c
    415c:	00004e49 	.word	0x00004e49
    4160:	20000828 	.word	0x20000828
    4164:	0000473d 	.word	0x0000473d
    4168:	2000085c 	.word	0x2000085c
    416c:	2000083c 	.word	0x2000083c
    4170:	00003fd5 	.word	0x00003fd5
    4174:	000048a9 	.word	0x000048a9

00004178 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    4178:	b510      	push	{r4, lr}
    417a:	0001      	movs	r1, r0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    417c:	2210      	movs	r2, #16
    417e:	2084      	movs	r0, #132	; 0x84
    4180:	4b01      	ldr	r3, [pc, #4]	; (4188 <sal_aes_read+0x10>)
    4182:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    4184:	bd10      	pop	{r4, pc}
    4186:	46c0      	nop			; (mov r8, r8)
    4188:	000048a9 	.word	0x000048a9

0000418c <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    418c:	b510      	push	{r4, lr}
	eic_module->INTFLAG.reg = eic_mask;
    418e:	2201      	movs	r2, #1
    4190:	4b03      	ldr	r3, [pc, #12]	; (41a0 <AT86RFX_ISR+0x14>)
    4192:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    4194:	4b03      	ldr	r3, [pc, #12]	; (41a4 <AT86RFX_ISR+0x18>)
    4196:	681b      	ldr	r3, [r3, #0]
    4198:	2b00      	cmp	r3, #0
    419a:	d000      	beq.n	419e <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    419c:	4798      	blx	r3
	}
}
    419e:	bd10      	pop	{r4, pc}
    41a0:	40001800 	.word	0x40001800
    41a4:	20000860 	.word	0x20000860

000041a8 <trx_spi_init>:

void trx_spi_init(void)
{
    41a8:	b530      	push	{r4, r5, lr}
    41aa:	b085      	sub	sp, #20
	config->address_enabled = false;
    41ac:	4a34      	ldr	r2, [pc, #208]	; (4280 <trx_spi_init+0xd8>)
    41ae:	2300      	movs	r3, #0
    41b0:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    41b2:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    41b4:	213f      	movs	r1, #63	; 0x3f
    41b6:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    41b8:	4c32      	ldr	r4, [pc, #200]	; (4284 <trx_spi_init+0xdc>)
    41ba:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    41bc:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    41be:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    41c0:	2201      	movs	r2, #1
    41c2:	4669      	mov	r1, sp
    41c4:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    41c6:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    41c8:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    41ca:	203f      	movs	r0, #63	; 0x3f
    41cc:	4b2e      	ldr	r3, [pc, #184]	; (4288 <trx_spi_init+0xe0>)
    41ce:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    41d0:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    41d2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    41d4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    41d6:	2900      	cmp	r1, #0
    41d8:	d104      	bne.n	41e4 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    41da:	0953      	lsrs	r3, r2, #5
    41dc:	01db      	lsls	r3, r3, #7
    41de:	492b      	ldr	r1, [pc, #172]	; (428c <trx_spi_init+0xe4>)
    41e0:	468c      	mov	ip, r1
    41e2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    41e4:	211f      	movs	r1, #31
    41e6:	4011      	ands	r1, r2
    41e8:	2201      	movs	r2, #1
    41ea:	0010      	movs	r0, r2
    41ec:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    41ee:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    41f0:	4c27      	ldr	r4, [pc, #156]	; (4290 <trx_spi_init+0xe8>)
    41f2:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    41f4:	2300      	movs	r3, #0
    41f6:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    41f8:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    41fa:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    41fc:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    41fe:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    4200:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    4202:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    4204:	3223      	adds	r2, #35	; 0x23
    4206:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    4208:	0020      	movs	r0, r4
    420a:	3018      	adds	r0, #24
    420c:	3a18      	subs	r2, #24
    420e:	2100      	movs	r1, #0
    4210:	4b20      	ldr	r3, [pc, #128]	; (4294 <trx_spi_init+0xec>)
    4212:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    4214:	2380      	movs	r3, #128	; 0x80
    4216:	025b      	lsls	r3, r3, #9
    4218:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    421a:	4b1f      	ldr	r3, [pc, #124]	; (4298 <trx_spi_init+0xf0>)
    421c:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    421e:	4b1f      	ldr	r3, [pc, #124]	; (429c <trx_spi_init+0xf4>)
    4220:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    4222:	2301      	movs	r3, #1
    4224:	425b      	negs	r3, r3
    4226:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    4228:	4b1d      	ldr	r3, [pc, #116]	; (42a0 <trx_spi_init+0xf8>)
    422a:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    422c:	4b1d      	ldr	r3, [pc, #116]	; (42a4 <trx_spi_init+0xfc>)
    422e:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    4230:	4d1d      	ldr	r5, [pc, #116]	; (42a8 <trx_spi_init+0x100>)
    4232:	0022      	movs	r2, r4
    4234:	491d      	ldr	r1, [pc, #116]	; (42ac <trx_spi_init+0x104>)
    4236:	0028      	movs	r0, r5
    4238:	4b1d      	ldr	r3, [pc, #116]	; (42b0 <trx_spi_init+0x108>)
    423a:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    423c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    423e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    4240:	2b00      	cmp	r3, #0
    4242:	d1fc      	bne.n	423e <trx_spi_init+0x96>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    4244:	6813      	ldr	r3, [r2, #0]
    4246:	2502      	movs	r5, #2
    4248:	432b      	orrs	r3, r5
    424a:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    424c:	ac01      	add	r4, sp, #4
    424e:	0020      	movs	r0, r4
    4250:	4b18      	ldr	r3, [pc, #96]	; (42b4 <trx_spi_init+0x10c>)
    4252:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    4254:	2320      	movs	r3, #32
    4256:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    4258:	2380      	movs	r3, #128	; 0x80
    425a:	039b      	lsls	r3, r3, #14
    425c:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    425e:	7225      	strb	r5, [r4, #8]
	#if (SAML21)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    4260:	2301      	movs	r3, #1
    4262:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    4264:	2200      	movs	r2, #0
    4266:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    4268:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    426a:	0021      	movs	r1, r4
    426c:	2000      	movs	r0, #0
    426e:	4b12      	ldr	r3, [pc, #72]	; (42b8 <trx_spi_init+0x110>)
    4270:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    4272:	2200      	movs	r2, #0
    4274:	2100      	movs	r1, #0
    4276:	4811      	ldr	r0, [pc, #68]	; (42bc <trx_spi_init+0x114>)
    4278:	4b11      	ldr	r3, [pc, #68]	; (42c0 <trx_spi_init+0x118>)
    427a:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    427c:	b005      	add	sp, #20
    427e:	bd30      	pop	{r4, r5, pc}
    4280:	200016e0 	.word	0x200016e0
    4284:	200016e4 	.word	0x200016e4
    4288:	00000b19 	.word	0x00000b19
    428c:	41004400 	.word	0x41004400
    4290:	200016e8 	.word	0x200016e8
    4294:	00004e5b 	.word	0x00004e5b
    4298:	004c4b40 	.word	0x004c4b40
    429c:	00530005 	.word	0x00530005
    42a0:	003e0005 	.word	0x003e0005
    42a4:	00520005 	.word	0x00520005
    42a8:	20001720 	.word	0x20001720
    42ac:	42001800 	.word	0x42001800
    42b0:	00001001 	.word	0x00001001
    42b4:	00000a8d 	.word	0x00000a8d
    42b8:	00000aa1 	.word	0x00000aa1
    42bc:	0000418d 	.word	0x0000418d
    42c0:	00000949 	.word	0x00000949

000042c4 <PhyReset>:

void PhyReset(void)
{
    42c4:	b570      	push	{r4, r5, r6, lr}
    42c6:	4c08      	ldr	r4, [pc, #32]	; (42e8 <PhyReset+0x24>)
    42c8:	2580      	movs	r5, #128	; 0x80
    42ca:	022d      	lsls	r5, r5, #8
    42cc:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    42ce:	2280      	movs	r2, #128	; 0x80
    42d0:	0352      	lsls	r2, r2, #13
    42d2:	4b06      	ldr	r3, [pc, #24]	; (42ec <PhyReset+0x28>)
    42d4:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    42d6:	20a5      	movs	r0, #165	; 0xa5
    42d8:	0040      	lsls	r0, r0, #1
    42da:	4e05      	ldr	r6, [pc, #20]	; (42f0 <PhyReset+0x2c>)
    42dc:	47b0      	blx	r6
    42de:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    42e0:	200a      	movs	r0, #10
    42e2:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    42e4:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    42e6:	bd70      	pop	{r4, r5, r6, pc}
    42e8:	41004480 	.word	0x41004480
    42ec:	41004400 	.word	0x41004400
    42f0:	000007d9 	.word	0x000007d9

000042f4 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    42f4:	b570      	push	{r4, r5, r6, lr}
    42f6:	b082      	sub	sp, #8
    42f8:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    42fa:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    42fe:	425a      	negs	r2, r3
    4300:	4153      	adcs	r3, r2
    4302:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    4304:	b672      	cpsid	i
    4306:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    430a:	2200      	movs	r2, #0
    430c:	4b33      	ldr	r3, [pc, #204]	; (43dc <trx_reg_read+0xe8>)
    430e:	701a      	strb	r2, [r3, #0]
	return flags;
    4310:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4312:	4e33      	ldr	r6, [pc, #204]	; (43e0 <trx_reg_read+0xec>)
    4314:	3201      	adds	r2, #1
    4316:	4933      	ldr	r1, [pc, #204]	; (43e4 <trx_reg_read+0xf0>)
    4318:	0030      	movs	r0, r6
    431a:	4b33      	ldr	r3, [pc, #204]	; (43e8 <trx_reg_read+0xf4>)
    431c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    431e:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    4320:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4322:	7e1a      	ldrb	r2, [r3, #24]
    4324:	420a      	tst	r2, r1
    4326:	d0fc      	beq.n	4322 <trx_reg_read+0x2e>
    4328:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    432a:	07d2      	lsls	r2, r2, #31
    432c:	d502      	bpl.n	4334 <trx_reg_read+0x40>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    432e:	2280      	movs	r2, #128	; 0x80
    4330:	4315      	orrs	r5, r2
    4332:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4334:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4336:	7e1a      	ldrb	r2, [r3, #24]
    4338:	420a      	tst	r2, r1
    433a:	d0fc      	beq.n	4336 <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    433c:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    433e:	7e1a      	ldrb	r2, [r3, #24]
    4340:	420a      	tst	r2, r1
    4342:	d0fc      	beq.n	433e <trx_reg_read+0x4a>
    4344:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4346:	0752      	lsls	r2, r2, #29
    4348:	d50c      	bpl.n	4364 <trx_reg_read+0x70>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    434a:	8b5a      	ldrh	r2, [r3, #26]
    434c:	0752      	lsls	r2, r2, #29
    434e:	d501      	bpl.n	4354 <trx_reg_read+0x60>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4350:	2204      	movs	r2, #4
    4352:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4354:	4a22      	ldr	r2, [pc, #136]	; (43e0 <trx_reg_read+0xec>)
    4356:	7992      	ldrb	r2, [r2, #6]
    4358:	2a01      	cmp	r2, #1
    435a:	d034      	beq.n	43c6 <trx_reg_read+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    435c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    435e:	b2d2      	uxtb	r2, r2
    4360:	4922      	ldr	r1, [pc, #136]	; (43ec <trx_reg_read+0xf8>)
    4362:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    4364:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4366:	7e1a      	ldrb	r2, [r3, #24]
    4368:	420a      	tst	r2, r1
    436a:	d0fc      	beq.n	4366 <trx_reg_read+0x72>
    436c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    436e:	07d2      	lsls	r2, r2, #31
    4370:	d501      	bpl.n	4376 <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4372:	2200      	movs	r2, #0
    4374:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    4376:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4378:	7e1a      	ldrb	r2, [r3, #24]
    437a:	420a      	tst	r2, r1
    437c:	d0fc      	beq.n	4378 <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    437e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4380:	7e1a      	ldrb	r2, [r3, #24]
    4382:	420a      	tst	r2, r1
    4384:	d0fc      	beq.n	4380 <trx_reg_read+0x8c>
    4386:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    4388:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    438a:	0752      	lsls	r2, r2, #29
    438c:	d50a      	bpl.n	43a4 <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    438e:	8b5a      	ldrh	r2, [r3, #26]
    4390:	0752      	lsls	r2, r2, #29
    4392:	d501      	bpl.n	4398 <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4394:	2204      	movs	r2, #4
    4396:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4398:	4a11      	ldr	r2, [pc, #68]	; (43e0 <trx_reg_read+0xec>)
    439a:	7992      	ldrb	r2, [r2, #6]
    439c:	2a01      	cmp	r2, #1
    439e:	d018      	beq.n	43d2 <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    43a0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    43a2:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    43a4:	2200      	movs	r2, #0
    43a6:	490f      	ldr	r1, [pc, #60]	; (43e4 <trx_reg_read+0xf0>)
    43a8:	480d      	ldr	r0, [pc, #52]	; (43e0 <trx_reg_read+0xec>)
    43aa:	4b0f      	ldr	r3, [pc, #60]	; (43e8 <trx_reg_read+0xf4>)
    43ac:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    43ae:	23ff      	movs	r3, #255	; 0xff
    43b0:	4223      	tst	r3, r4
    43b2:	d005      	beq.n	43c0 <trx_reg_read+0xcc>
		cpu_irq_enable();
    43b4:	2201      	movs	r2, #1
    43b6:	4b09      	ldr	r3, [pc, #36]	; (43dc <trx_reg_read+0xe8>)
    43b8:	701a      	strb	r2, [r3, #0]
    43ba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    43be:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    43c0:	b2e8      	uxtb	r0, r5
}
    43c2:	b002      	add	sp, #8
    43c4:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    43c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    43c8:	05d2      	lsls	r2, r2, #23
    43ca:	0dd2      	lsrs	r2, r2, #23
    43cc:	4907      	ldr	r1, [pc, #28]	; (43ec <trx_reg_read+0xf8>)
    43ce:	800a      	strh	r2, [r1, #0]
    43d0:	e7c8      	b.n	4364 <trx_reg_read+0x70>
    43d2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    43d4:	05ed      	lsls	r5, r5, #23
    43d6:	0ded      	lsrs	r5, r5, #23
    43d8:	e7e4      	b.n	43a4 <trx_reg_read+0xb0>
    43da:	46c0      	nop			; (mov r8, r8)
    43dc:	20000008 	.word	0x20000008
    43e0:	20001720 	.word	0x20001720
    43e4:	200016e4 	.word	0x200016e4
    43e8:	000012c5 	.word	0x000012c5
    43ec:	200016dc 	.word	0x200016dc

000043f0 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    43f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    43f2:	b083      	sub	sp, #12
    43f4:	0006      	movs	r6, r0
    43f6:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    43f8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    43fc:	425a      	negs	r2, r3
    43fe:	4153      	adcs	r3, r2
    4400:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    4402:	b672      	cpsid	i
    4404:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4408:	2200      	movs	r2, #0
    440a:	4b34      	ldr	r3, [pc, #208]	; (44dc <trx_reg_write+0xec>)
    440c:	701a      	strb	r2, [r3, #0]
	return flags;
    440e:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4410:	4f33      	ldr	r7, [pc, #204]	; (44e0 <trx_reg_write+0xf0>)
    4412:	3201      	adds	r2, #1
    4414:	4933      	ldr	r1, [pc, #204]	; (44e4 <trx_reg_write+0xf4>)
    4416:	0038      	movs	r0, r7
    4418:	4b33      	ldr	r3, [pc, #204]	; (44e8 <trx_reg_write+0xf8>)
    441a:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    441c:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    441e:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4420:	7e1a      	ldrb	r2, [r3, #24]
    4422:	420a      	tst	r2, r1
    4424:	d0fc      	beq.n	4420 <trx_reg_write+0x30>
    4426:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4428:	07d2      	lsls	r2, r2, #31
    442a:	d502      	bpl.n	4432 <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    442c:	22c0      	movs	r2, #192	; 0xc0
    442e:	4316      	orrs	r6, r2
    4430:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4432:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4434:	7e1a      	ldrb	r2, [r3, #24]
    4436:	420a      	tst	r2, r1
    4438:	d0fc      	beq.n	4434 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    443a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    443c:	7e1a      	ldrb	r2, [r3, #24]
    443e:	420a      	tst	r2, r1
    4440:	d0fc      	beq.n	443c <trx_reg_write+0x4c>
    4442:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4444:	0752      	lsls	r2, r2, #29
    4446:	d50c      	bpl.n	4462 <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4448:	8b5a      	ldrh	r2, [r3, #26]
    444a:	0752      	lsls	r2, r2, #29
    444c:	d501      	bpl.n	4452 <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    444e:	2204      	movs	r2, #4
    4450:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4452:	4a23      	ldr	r2, [pc, #140]	; (44e0 <trx_reg_write+0xf0>)
    4454:	7992      	ldrb	r2, [r2, #6]
    4456:	2a01      	cmp	r2, #1
    4458:	d033      	beq.n	44c2 <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    445a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    445c:	b2d2      	uxtb	r2, r2
    445e:	4923      	ldr	r1, [pc, #140]	; (44ec <trx_reg_write+0xfc>)
    4460:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    4462:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4464:	7e1a      	ldrb	r2, [r3, #24]
    4466:	420a      	tst	r2, r1
    4468:	d0fc      	beq.n	4464 <trx_reg_write+0x74>
    446a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    446c:	07d2      	lsls	r2, r2, #31
    446e:	d500      	bpl.n	4472 <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4470:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    4472:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4474:	7e1a      	ldrb	r2, [r3, #24]
    4476:	420a      	tst	r2, r1
    4478:	d0fc      	beq.n	4474 <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    447a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    447c:	7e1a      	ldrb	r2, [r3, #24]
    447e:	420a      	tst	r2, r1
    4480:	d0fc      	beq.n	447c <trx_reg_write+0x8c>
    4482:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4484:	0752      	lsls	r2, r2, #29
    4486:	d50c      	bpl.n	44a2 <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4488:	8b5a      	ldrh	r2, [r3, #26]
    448a:	0752      	lsls	r2, r2, #29
    448c:	d501      	bpl.n	4492 <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    448e:	2204      	movs	r2, #4
    4490:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4492:	4a13      	ldr	r2, [pc, #76]	; (44e0 <trx_reg_write+0xf0>)
    4494:	7992      	ldrb	r2, [r2, #6]
    4496:	2a01      	cmp	r2, #1
    4498:	d019      	beq.n	44ce <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    449c:	b2db      	uxtb	r3, r3
    449e:	4a13      	ldr	r2, [pc, #76]	; (44ec <trx_reg_write+0xfc>)
    44a0:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    44a2:	2200      	movs	r2, #0
    44a4:	490f      	ldr	r1, [pc, #60]	; (44e4 <trx_reg_write+0xf4>)
    44a6:	480e      	ldr	r0, [pc, #56]	; (44e0 <trx_reg_write+0xf0>)
    44a8:	4b0f      	ldr	r3, [pc, #60]	; (44e8 <trx_reg_write+0xf8>)
    44aa:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    44ac:	23ff      	movs	r3, #255	; 0xff
    44ae:	422b      	tst	r3, r5
    44b0:	d005      	beq.n	44be <trx_reg_write+0xce>
		cpu_irq_enable();
    44b2:	2201      	movs	r2, #1
    44b4:	4b09      	ldr	r3, [pc, #36]	; (44dc <trx_reg_write+0xec>)
    44b6:	701a      	strb	r2, [r3, #0]
    44b8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    44bc:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    44be:	b003      	add	sp, #12
    44c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    44c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    44c4:	05d2      	lsls	r2, r2, #23
    44c6:	0dd2      	lsrs	r2, r2, #23
    44c8:	4908      	ldr	r1, [pc, #32]	; (44ec <trx_reg_write+0xfc>)
    44ca:	800a      	strh	r2, [r1, #0]
    44cc:	e7c9      	b.n	4462 <trx_reg_write+0x72>
    44ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    44d0:	05db      	lsls	r3, r3, #23
    44d2:	0ddb      	lsrs	r3, r3, #23
    44d4:	4a05      	ldr	r2, [pc, #20]	; (44ec <trx_reg_write+0xfc>)
    44d6:	8013      	strh	r3, [r2, #0]
    44d8:	e7e3      	b.n	44a2 <trx_reg_write+0xb2>
    44da:	46c0      	nop			; (mov r8, r8)
    44dc:	20000008 	.word	0x20000008
    44e0:	20001720 	.word	0x20001720
    44e4:	200016e4 	.word	0x200016e4
    44e8:	000012c5 	.word	0x000012c5
    44ec:	200016dc 	.word	0x200016dc

000044f0 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    44f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    44f2:	46d6      	mov	lr, sl
    44f4:	464f      	mov	r7, r9
    44f6:	4646      	mov	r6, r8
    44f8:	b5c0      	push	{r6, r7, lr}
    44fa:	b082      	sub	sp, #8
    44fc:	0005      	movs	r5, r0
    44fe:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4500:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    4504:	425a      	negs	r2, r3
    4506:	4153      	adcs	r3, r2
    4508:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    450a:	b672      	cpsid	i
    450c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4510:	2200      	movs	r2, #0
    4512:	4b3e      	ldr	r3, [pc, #248]	; (460c <trx_frame_read+0x11c>)
    4514:	701a      	strb	r2, [r3, #0]
	return flags;
    4516:	9b01      	ldr	r3, [sp, #4]
    4518:	4698      	mov	r8, r3
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    451a:	4f3d      	ldr	r7, [pc, #244]	; (4610 <trx_frame_read+0x120>)
    451c:	3201      	adds	r2, #1
    451e:	493d      	ldr	r1, [pc, #244]	; (4614 <trx_frame_read+0x124>)
    4520:	0038      	movs	r0, r7
    4522:	4b3d      	ldr	r3, [pc, #244]	; (4618 <trx_frame_read+0x128>)
    4524:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    4526:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4528:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    452a:	7e1a      	ldrb	r2, [r3, #24]
    452c:	420a      	tst	r2, r1
    452e:	d0fc      	beq.n	452a <trx_frame_read+0x3a>
    4530:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4532:	07d2      	lsls	r2, r2, #31
    4534:	d501      	bpl.n	453a <trx_frame_read+0x4a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4536:	2220      	movs	r2, #32
    4538:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    453a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    453c:	7e1a      	ldrb	r2, [r3, #24]
    453e:	420a      	tst	r2, r1
    4540:	d0fc      	beq.n	453c <trx_frame_read+0x4c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4542:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4544:	7e1a      	ldrb	r2, [r3, #24]
    4546:	420a      	tst	r2, r1
    4548:	d0fc      	beq.n	4544 <trx_frame_read+0x54>
    454a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    454c:	0752      	lsls	r2, r2, #29
    454e:	d50c      	bpl.n	456a <trx_frame_read+0x7a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4550:	8b5a      	ldrh	r2, [r3, #26]
    4552:	0752      	lsls	r2, r2, #29
    4554:	d501      	bpl.n	455a <trx_frame_read+0x6a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4556:	2204      	movs	r2, #4
    4558:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    455a:	4a2d      	ldr	r2, [pc, #180]	; (4610 <trx_frame_read+0x120>)
    455c:	7992      	ldrb	r2, [r2, #6]
    455e:	2a01      	cmp	r2, #1
    4560:	d013      	beq.n	458a <trx_frame_read+0x9a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4564:	b2db      	uxtb	r3, r3
    4566:	4a2d      	ldr	r2, [pc, #180]	; (461c <trx_frame_read+0x12c>)
    4568:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    456a:	1e63      	subs	r3, r4, #1
    456c:	b2db      	uxtb	r3, r3
    456e:	2c00      	cmp	r4, #0
    4570:	d036      	beq.n	45e0 <trx_frame_read+0xf0>
    4572:	3301      	adds	r3, #1
    4574:	469c      	mov	ip, r3
    4576:	44ac      	add	ip, r5
    4578:	2720      	movs	r7, #32
	SercomSpi *const spi_module = &(module->hw->SPI);
    457a:	4e25      	ldr	r6, [pc, #148]	; (4610 <trx_frame_read+0x120>)
		while (!spi_is_ready_to_write(&master)) {
    457c:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    457e:	2300      	movs	r3, #0
    4580:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    4582:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4584:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4586:	46b1      	mov	r9, r6
    4588:	e00f      	b.n	45aa <trx_frame_read+0xba>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    458c:	05db      	lsls	r3, r3, #23
    458e:	0ddb      	lsrs	r3, r3, #23
    4590:	4a22      	ldr	r2, [pc, #136]	; (461c <trx_frame_read+0x12c>)
    4592:	8013      	strh	r3, [r2, #0]
    4594:	e7e9      	b.n	456a <trx_frame_read+0x7a>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4596:	464a      	mov	r2, r9
    4598:	7992      	ldrb	r2, [r2, #6]
    459a:	2a01      	cmp	r2, #1
    459c:	d01c      	beq.n	45d8 <trx_frame_read+0xe8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    459e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    45a0:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    45a2:	702f      	strb	r7, [r5, #0]
		data++;
    45a4:	3501      	adds	r5, #1
	while (length--) {
    45a6:	4565      	cmp	r5, ip
    45a8:	d01a      	beq.n	45e0 <trx_frame_read+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    45aa:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    45ac:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    45ae:	4202      	tst	r2, r0
    45b0:	d0fc      	beq.n	45ac <trx_frame_read+0xbc>
    45b2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    45b4:	4202      	tst	r2, r0
    45b6:	d001      	beq.n	45bc <trx_frame_read+0xcc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    45b8:	4652      	mov	r2, sl
    45ba:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    45bc:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    45be:	4222      	tst	r2, r4
    45c0:	d0fc      	beq.n	45bc <trx_frame_read+0xcc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    45c2:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    45c4:	420a      	tst	r2, r1
    45c6:	d0fc      	beq.n	45c2 <trx_frame_read+0xd2>
    45c8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    45ca:	420a      	tst	r2, r1
    45cc:	d0e9      	beq.n	45a2 <trx_frame_read+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    45ce:	8b5a      	ldrh	r2, [r3, #26]
    45d0:	420a      	tst	r2, r1
    45d2:	d0e0      	beq.n	4596 <trx_frame_read+0xa6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    45d4:	8359      	strh	r1, [r3, #26]
    45d6:	e7de      	b.n	4596 <trx_frame_read+0xa6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    45d8:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    45da:	05ff      	lsls	r7, r7, #23
    45dc:	0dff      	lsrs	r7, r7, #23
    45de:	e7e0      	b.n	45a2 <trx_frame_read+0xb2>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    45e0:	2200      	movs	r2, #0
    45e2:	490c      	ldr	r1, [pc, #48]	; (4614 <trx_frame_read+0x124>)
    45e4:	480a      	ldr	r0, [pc, #40]	; (4610 <trx_frame_read+0x120>)
    45e6:	4b0c      	ldr	r3, [pc, #48]	; (4618 <trx_frame_read+0x128>)
    45e8:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    45ea:	23ff      	movs	r3, #255	; 0xff
    45ec:	4642      	mov	r2, r8
    45ee:	4213      	tst	r3, r2
    45f0:	d005      	beq.n	45fe <trx_frame_read+0x10e>
		cpu_irq_enable();
    45f2:	2201      	movs	r2, #1
    45f4:	4b05      	ldr	r3, [pc, #20]	; (460c <trx_frame_read+0x11c>)
    45f6:	701a      	strb	r2, [r3, #0]
    45f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    45fc:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    45fe:	b002      	add	sp, #8
    4600:	bc1c      	pop	{r2, r3, r4}
    4602:	4690      	mov	r8, r2
    4604:	4699      	mov	r9, r3
    4606:	46a2      	mov	sl, r4
    4608:	bdf0      	pop	{r4, r5, r6, r7, pc}
    460a:	46c0      	nop			; (mov r8, r8)
    460c:	20000008 	.word	0x20000008
    4610:	20001720 	.word	0x20001720
    4614:	200016e4 	.word	0x200016e4
    4618:	000012c5 	.word	0x000012c5
    461c:	200016dc 	.word	0x200016dc

00004620 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    4620:	b5f0      	push	{r4, r5, r6, r7, lr}
    4622:	46c6      	mov	lr, r8
    4624:	b500      	push	{lr}
    4626:	b082      	sub	sp, #8
    4628:	0004      	movs	r4, r0
    462a:	000d      	movs	r5, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    462c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    4630:	425a      	negs	r2, r3
    4632:	4153      	adcs	r3, r2
    4634:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    4636:	b672      	cpsid	i
    4638:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    463c:	2200      	movs	r2, #0
    463e:	4b3a      	ldr	r3, [pc, #232]	; (4728 <trx_frame_write+0x108>)
    4640:	701a      	strb	r2, [r3, #0]
	return flags;
    4642:	9b01      	ldr	r3, [sp, #4]
    4644:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4646:	4f39      	ldr	r7, [pc, #228]	; (472c <trx_frame_write+0x10c>)
    4648:	3201      	adds	r2, #1
    464a:	4939      	ldr	r1, [pc, #228]	; (4730 <trx_frame_write+0x110>)
    464c:	0038      	movs	r0, r7
    464e:	4b39      	ldr	r3, [pc, #228]	; (4734 <trx_frame_write+0x114>)
    4650:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    4652:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4654:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4656:	7e1a      	ldrb	r2, [r3, #24]
    4658:	420a      	tst	r2, r1
    465a:	d0fc      	beq.n	4656 <trx_frame_write+0x36>
    465c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    465e:	07d2      	lsls	r2, r2, #31
    4660:	d501      	bpl.n	4666 <trx_frame_write+0x46>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4662:	2260      	movs	r2, #96	; 0x60
    4664:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4666:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4668:	7e1a      	ldrb	r2, [r3, #24]
    466a:	420a      	tst	r2, r1
    466c:	d0fc      	beq.n	4668 <trx_frame_write+0x48>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    466e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4670:	7e1a      	ldrb	r2, [r3, #24]
    4672:	420a      	tst	r2, r1
    4674:	d0fc      	beq.n	4670 <trx_frame_write+0x50>
    4676:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4678:	0752      	lsls	r2, r2, #29
    467a:	d50c      	bpl.n	4696 <trx_frame_write+0x76>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    467c:	8b5a      	ldrh	r2, [r3, #26]
    467e:	0752      	lsls	r2, r2, #29
    4680:	d501      	bpl.n	4686 <trx_frame_write+0x66>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4682:	2204      	movs	r2, #4
    4684:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4686:	4a29      	ldr	r2, [pc, #164]	; (472c <trx_frame_write+0x10c>)
    4688:	7992      	ldrb	r2, [r2, #6]
    468a:	2a01      	cmp	r2, #1
    468c:	d00b      	beq.n	46a6 <trx_frame_write+0x86>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    468e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4690:	b2d2      	uxtb	r2, r2
    4692:	4929      	ldr	r1, [pc, #164]	; (4738 <trx_frame_write+0x118>)
    4694:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4696:	4a25      	ldr	r2, [pc, #148]	; (472c <trx_frame_write+0x10c>)
    4698:	7992      	ldrb	r2, [r2, #6]
    469a:	4694      	mov	ip, r2
    469c:	0021      	movs	r1, r4
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    469e:	2701      	movs	r7, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    46a0:	2002      	movs	r0, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    46a2:	2404      	movs	r4, #4
    46a4:	e00d      	b.n	46c2 <trx_frame_write+0xa2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    46a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    46a8:	05d2      	lsls	r2, r2, #23
    46aa:	0dd2      	lsrs	r2, r2, #23
    46ac:	4922      	ldr	r1, [pc, #136]	; (4738 <trx_frame_write+0x118>)
    46ae:	800a      	strh	r2, [r1, #0]
    46b0:	e7f1      	b.n	4696 <trx_frame_write+0x76>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    46b2:	4662      	mov	r2, ip
    46b4:	2a01      	cmp	r2, #1
    46b6:	d01e      	beq.n	46f6 <trx_frame_write+0xd6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    46b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    46ba:	b2d2      	uxtb	r2, r2
    46bc:	4e1e      	ldr	r6, [pc, #120]	; (4738 <trx_frame_write+0x118>)
    46be:	8032      	strh	r2, [r6, #0]
    46c0:	3101      	adds	r1, #1
	while (length--) {
    46c2:	3d01      	subs	r5, #1
    46c4:	b2ed      	uxtb	r5, r5
    46c6:	2dff      	cmp	r5, #255	; 0xff
    46c8:	d01b      	beq.n	4702 <trx_frame_write+0xe2>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    46ca:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    46cc:	423a      	tst	r2, r7
    46ce:	d0fc      	beq.n	46ca <trx_frame_write+0xaa>
    46d0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    46d2:	423a      	tst	r2, r7
    46d4:	d001      	beq.n	46da <trx_frame_write+0xba>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    46d6:	780a      	ldrb	r2, [r1, #0]
    46d8:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    46da:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    46dc:	4202      	tst	r2, r0
    46de:	d0fc      	beq.n	46da <trx_frame_write+0xba>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    46e0:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    46e2:	4222      	tst	r2, r4
    46e4:	d0fc      	beq.n	46e0 <trx_frame_write+0xc0>
    46e6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    46e8:	4222      	tst	r2, r4
    46ea:	d0e9      	beq.n	46c0 <trx_frame_write+0xa0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    46ec:	8b5a      	ldrh	r2, [r3, #26]
    46ee:	4222      	tst	r2, r4
    46f0:	d0df      	beq.n	46b2 <trx_frame_write+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    46f2:	835c      	strh	r4, [r3, #26]
    46f4:	e7dd      	b.n	46b2 <trx_frame_write+0x92>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    46f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    46f8:	05d2      	lsls	r2, r2, #23
    46fa:	0dd2      	lsrs	r2, r2, #23
    46fc:	4e0e      	ldr	r6, [pc, #56]	; (4738 <trx_frame_write+0x118>)
    46fe:	8032      	strh	r2, [r6, #0]
    4700:	e7de      	b.n	46c0 <trx_frame_write+0xa0>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4702:	2200      	movs	r2, #0
    4704:	490a      	ldr	r1, [pc, #40]	; (4730 <trx_frame_write+0x110>)
    4706:	4809      	ldr	r0, [pc, #36]	; (472c <trx_frame_write+0x10c>)
    4708:	4b0a      	ldr	r3, [pc, #40]	; (4734 <trx_frame_write+0x114>)
    470a:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    470c:	23ff      	movs	r3, #255	; 0xff
    470e:	4642      	mov	r2, r8
    4710:	4213      	tst	r3, r2
    4712:	d005      	beq.n	4720 <trx_frame_write+0x100>
		cpu_irq_enable();
    4714:	2201      	movs	r2, #1
    4716:	4b04      	ldr	r3, [pc, #16]	; (4728 <trx_frame_write+0x108>)
    4718:	701a      	strb	r2, [r3, #0]
    471a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    471e:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4720:	b002      	add	sp, #8
    4722:	bc04      	pop	{r2}
    4724:	4690      	mov	r8, r2
    4726:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4728:	20000008 	.word	0x20000008
    472c:	20001720 	.word	0x20001720
    4730:	200016e4 	.word	0x200016e4
    4734:	000012c5 	.word	0x000012c5
    4738:	200016dc 	.word	0x200016dc

0000473c <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    473c:	b5f0      	push	{r4, r5, r6, r7, lr}
    473e:	46c6      	mov	lr, r8
    4740:	b500      	push	{lr}
    4742:	b082      	sub	sp, #8
    4744:	0006      	movs	r6, r0
    4746:	000d      	movs	r5, r1
    4748:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    474a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    474e:	425a      	negs	r2, r3
    4750:	4153      	adcs	r3, r2
    4752:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    4754:	b672      	cpsid	i
    4756:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    475a:	2200      	movs	r2, #0
    475c:	4b4d      	ldr	r3, [pc, #308]	; (4894 <trx_sram_write+0x158>)
    475e:	701a      	strb	r2, [r3, #0]
	return flags;
    4760:	9b01      	ldr	r3, [sp, #4]
    4762:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4764:	4f4c      	ldr	r7, [pc, #304]	; (4898 <trx_sram_write+0x15c>)
    4766:	3201      	adds	r2, #1
    4768:	494c      	ldr	r1, [pc, #304]	; (489c <trx_sram_write+0x160>)
    476a:	0038      	movs	r0, r7
    476c:	4b4c      	ldr	r3, [pc, #304]	; (48a0 <trx_sram_write+0x164>)
    476e:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    4770:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4772:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4774:	7e1a      	ldrb	r2, [r3, #24]
    4776:	420a      	tst	r2, r1
    4778:	d0fc      	beq.n	4774 <trx_sram_write+0x38>
    477a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    477c:	07d2      	lsls	r2, r2, #31
    477e:	d501      	bpl.n	4784 <trx_sram_write+0x48>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4780:	2240      	movs	r2, #64	; 0x40
    4782:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4784:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4786:	7e1a      	ldrb	r2, [r3, #24]
    4788:	420a      	tst	r2, r1
    478a:	d0fc      	beq.n	4786 <trx_sram_write+0x4a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    478c:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    478e:	7e1a      	ldrb	r2, [r3, #24]
    4790:	420a      	tst	r2, r1
    4792:	d0fc      	beq.n	478e <trx_sram_write+0x52>
    4794:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4796:	0752      	lsls	r2, r2, #29
    4798:	d50c      	bpl.n	47b4 <trx_sram_write+0x78>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    479a:	8b5a      	ldrh	r2, [r3, #26]
    479c:	0752      	lsls	r2, r2, #29
    479e:	d501      	bpl.n	47a4 <trx_sram_write+0x68>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    47a0:	2204      	movs	r2, #4
    47a2:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    47a4:	4a3c      	ldr	r2, [pc, #240]	; (4898 <trx_sram_write+0x15c>)
    47a6:	7992      	ldrb	r2, [r2, #6]
    47a8:	2a01      	cmp	r2, #1
    47aa:	d02b      	beq.n	4804 <trx_sram_write+0xc8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    47ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    47ae:	b2d2      	uxtb	r2, r2
    47b0:	493c      	ldr	r1, [pc, #240]	; (48a4 <trx_sram_write+0x168>)
    47b2:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    47b4:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    47b6:	7e1a      	ldrb	r2, [r3, #24]
    47b8:	420a      	tst	r2, r1
    47ba:	d0fc      	beq.n	47b6 <trx_sram_write+0x7a>
    47bc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    47be:	07d2      	lsls	r2, r2, #31
    47c0:	d500      	bpl.n	47c4 <trx_sram_write+0x88>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    47c2:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    47c4:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    47c6:	7e1a      	ldrb	r2, [r3, #24]
    47c8:	420a      	tst	r2, r1
    47ca:	d0fc      	beq.n	47c6 <trx_sram_write+0x8a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    47cc:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    47ce:	7e1a      	ldrb	r2, [r3, #24]
    47d0:	420a      	tst	r2, r1
    47d2:	d0fc      	beq.n	47ce <trx_sram_write+0x92>
    47d4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    47d6:	0752      	lsls	r2, r2, #29
    47d8:	d50c      	bpl.n	47f4 <trx_sram_write+0xb8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    47da:	8b5a      	ldrh	r2, [r3, #26]
    47dc:	0752      	lsls	r2, r2, #29
    47de:	d501      	bpl.n	47e4 <trx_sram_write+0xa8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    47e0:	2204      	movs	r2, #4
    47e2:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    47e4:	4a2c      	ldr	r2, [pc, #176]	; (4898 <trx_sram_write+0x15c>)
    47e6:	7992      	ldrb	r2, [r2, #6]
    47e8:	2a01      	cmp	r2, #1
    47ea:	d011      	beq.n	4810 <trx_sram_write+0xd4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    47ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    47ee:	b2d2      	uxtb	r2, r2
    47f0:	492c      	ldr	r1, [pc, #176]	; (48a4 <trx_sram_write+0x168>)
    47f2:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    47f4:	4a28      	ldr	r2, [pc, #160]	; (4898 <trx_sram_write+0x15c>)
    47f6:	7992      	ldrb	r2, [r2, #6]
    47f8:	4694      	mov	ip, r2
    47fa:	0028      	movs	r0, r5
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    47fc:	2601      	movs	r6, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    47fe:	2502      	movs	r5, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4800:	2104      	movs	r1, #4
    4802:	e013      	b.n	482c <trx_sram_write+0xf0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4806:	05d2      	lsls	r2, r2, #23
    4808:	0dd2      	lsrs	r2, r2, #23
    480a:	4926      	ldr	r1, [pc, #152]	; (48a4 <trx_sram_write+0x168>)
    480c:	800a      	strh	r2, [r1, #0]
    480e:	e7d1      	b.n	47b4 <trx_sram_write+0x78>
    4810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4812:	05d2      	lsls	r2, r2, #23
    4814:	0dd2      	lsrs	r2, r2, #23
    4816:	4923      	ldr	r1, [pc, #140]	; (48a4 <trx_sram_write+0x168>)
    4818:	800a      	strh	r2, [r1, #0]
    481a:	e7eb      	b.n	47f4 <trx_sram_write+0xb8>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    481c:	4662      	mov	r2, ip
    481e:	2a01      	cmp	r2, #1
    4820:	d01e      	beq.n	4860 <trx_sram_write+0x124>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4824:	b2d2      	uxtb	r2, r2
    4826:	4f1f      	ldr	r7, [pc, #124]	; (48a4 <trx_sram_write+0x168>)
    4828:	803a      	strh	r2, [r7, #0]
    482a:	3001      	adds	r0, #1
	while (length--) {
    482c:	3c01      	subs	r4, #1
    482e:	b2e4      	uxtb	r4, r4
    4830:	2cff      	cmp	r4, #255	; 0xff
    4832:	d01b      	beq.n	486c <trx_sram_write+0x130>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4834:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    4836:	4232      	tst	r2, r6
    4838:	d0fc      	beq.n	4834 <trx_sram_write+0xf8>
    483a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    483c:	4232      	tst	r2, r6
    483e:	d001      	beq.n	4844 <trx_sram_write+0x108>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4840:	7802      	ldrb	r2, [r0, #0]
    4842:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4844:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    4846:	422a      	tst	r2, r5
    4848:	d0fc      	beq.n	4844 <trx_sram_write+0x108>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    484a:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    484c:	420a      	tst	r2, r1
    484e:	d0fc      	beq.n	484a <trx_sram_write+0x10e>
    4850:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4852:	420a      	tst	r2, r1
    4854:	d0e9      	beq.n	482a <trx_sram_write+0xee>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4856:	8b5a      	ldrh	r2, [r3, #26]
    4858:	420a      	tst	r2, r1
    485a:	d0df      	beq.n	481c <trx_sram_write+0xe0>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    485c:	8359      	strh	r1, [r3, #26]
    485e:	e7dd      	b.n	481c <trx_sram_write+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4862:	05d2      	lsls	r2, r2, #23
    4864:	0dd2      	lsrs	r2, r2, #23
    4866:	4f0f      	ldr	r7, [pc, #60]	; (48a4 <trx_sram_write+0x168>)
    4868:	803a      	strh	r2, [r7, #0]
    486a:	e7de      	b.n	482a <trx_sram_write+0xee>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    486c:	2200      	movs	r2, #0
    486e:	490b      	ldr	r1, [pc, #44]	; (489c <trx_sram_write+0x160>)
    4870:	4809      	ldr	r0, [pc, #36]	; (4898 <trx_sram_write+0x15c>)
    4872:	4b0b      	ldr	r3, [pc, #44]	; (48a0 <trx_sram_write+0x164>)
    4874:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    4876:	23ff      	movs	r3, #255	; 0xff
    4878:	4642      	mov	r2, r8
    487a:	4213      	tst	r3, r2
    487c:	d005      	beq.n	488a <trx_sram_write+0x14e>
		cpu_irq_enable();
    487e:	2201      	movs	r2, #1
    4880:	4b04      	ldr	r3, [pc, #16]	; (4894 <trx_sram_write+0x158>)
    4882:	701a      	strb	r2, [r3, #0]
    4884:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4888:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    488a:	b002      	add	sp, #8
    488c:	bc04      	pop	{r2}
    488e:	4690      	mov	r8, r2
    4890:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4892:	46c0      	nop			; (mov r8, r8)
    4894:	20000008 	.word	0x20000008
    4898:	20001720 	.word	0x20001720
    489c:	200016e4 	.word	0x200016e4
    48a0:	000012c5 	.word	0x000012c5
    48a4:	200016dc 	.word	0x200016dc

000048a8 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    48a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    48aa:	46d6      	mov	lr, sl
    48ac:	464f      	mov	r7, r9
    48ae:	4646      	mov	r6, r8
    48b0:	b5c0      	push	{r6, r7, lr}
    48b2:	b082      	sub	sp, #8
    48b4:	0004      	movs	r4, r0
    48b6:	000d      	movs	r5, r1
    48b8:	0017      	movs	r7, r2
	delay_us(1); /* wap_rf4ce */
    48ba:	2001      	movs	r0, #1
    48bc:	4b56      	ldr	r3, [pc, #344]	; (4a18 <trx_sram_read+0x170>)
    48be:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    48c0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    48c4:	425a      	negs	r2, r3
    48c6:	4153      	adcs	r3, r2
    48c8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    48ca:	b672      	cpsid	i
    48cc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    48d0:	2200      	movs	r2, #0
    48d2:	4b52      	ldr	r3, [pc, #328]	; (4a1c <trx_sram_read+0x174>)
    48d4:	701a      	strb	r2, [r3, #0]
	return flags;
    48d6:	9b01      	ldr	r3, [sp, #4]
    48d8:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21 || SAML21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    48da:	4e51      	ldr	r6, [pc, #324]	; (4a20 <trx_sram_read+0x178>)
    48dc:	3201      	adds	r2, #1
    48de:	4951      	ldr	r1, [pc, #324]	; (4a24 <trx_sram_read+0x17c>)
    48e0:	0030      	movs	r0, r6
    48e2:	4b51      	ldr	r3, [pc, #324]	; (4a28 <trx_sram_read+0x180>)
    48e4:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    48e6:	6833      	ldr	r3, [r6, #0]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    48e8:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    48ea:	7e1a      	ldrb	r2, [r3, #24]
    48ec:	420a      	tst	r2, r1
    48ee:	d0fc      	beq.n	48ea <trx_sram_read+0x42>
    48f0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    48f2:	07d2      	lsls	r2, r2, #31
    48f4:	d501      	bpl.n	48fa <trx_sram_read+0x52>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    48f6:	2200      	movs	r2, #0
    48f8:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    48fa:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    48fc:	7e1a      	ldrb	r2, [r3, #24]
    48fe:	420a      	tst	r2, r1
    4900:	d0fc      	beq.n	48fc <trx_sram_read+0x54>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4902:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4904:	7e1a      	ldrb	r2, [r3, #24]
    4906:	420a      	tst	r2, r1
    4908:	d0fc      	beq.n	4904 <trx_sram_read+0x5c>
    490a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    490c:	0752      	lsls	r2, r2, #29
    490e:	d50c      	bpl.n	492a <trx_sram_read+0x82>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4910:	8b5a      	ldrh	r2, [r3, #26]
    4912:	0752      	lsls	r2, r2, #29
    4914:	d501      	bpl.n	491a <trx_sram_read+0x72>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4916:	2204      	movs	r2, #4
    4918:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    491a:	4a41      	ldr	r2, [pc, #260]	; (4a20 <trx_sram_read+0x178>)
    491c:	7992      	ldrb	r2, [r2, #6]
    491e:	2a01      	cmp	r2, #1
    4920:	d033      	beq.n	498a <trx_sram_read+0xe2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4922:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4924:	b2d2      	uxtb	r2, r2
    4926:	4941      	ldr	r1, [pc, #260]	; (4a2c <trx_sram_read+0x184>)
    4928:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    492a:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    492c:	7e1a      	ldrb	r2, [r3, #24]
    492e:	420a      	tst	r2, r1
    4930:	d0fc      	beq.n	492c <trx_sram_read+0x84>
    4932:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4934:	07d2      	lsls	r2, r2, #31
    4936:	d500      	bpl.n	493a <trx_sram_read+0x92>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4938:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    493a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    493c:	7e1a      	ldrb	r2, [r3, #24]
    493e:	420a      	tst	r2, r1
    4940:	d0fc      	beq.n	493c <trx_sram_read+0x94>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4942:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4944:	7e1a      	ldrb	r2, [r3, #24]
    4946:	420a      	tst	r2, r1
    4948:	d0fc      	beq.n	4944 <trx_sram_read+0x9c>
    494a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    494c:	0752      	lsls	r2, r2, #29
    494e:	d50c      	bpl.n	496a <trx_sram_read+0xc2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4950:	8b5a      	ldrh	r2, [r3, #26]
    4952:	0752      	lsls	r2, r2, #29
    4954:	d501      	bpl.n	495a <trx_sram_read+0xb2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4956:	2204      	movs	r2, #4
    4958:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    495a:	4a31      	ldr	r2, [pc, #196]	; (4a20 <trx_sram_read+0x178>)
    495c:	7992      	ldrb	r2, [r2, #6]
    495e:	2a01      	cmp	r2, #1
    4960:	d019      	beq.n	4996 <trx_sram_read+0xee>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4964:	b2db      	uxtb	r3, r3
    4966:	4a31      	ldr	r2, [pc, #196]	; (4a2c <trx_sram_read+0x184>)
    4968:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    496a:	1e7b      	subs	r3, r7, #1
    496c:	b2db      	uxtb	r3, r3
    496e:	2f00      	cmp	r7, #0
    4970:	d03c      	beq.n	49ec <trx_sram_read+0x144>
    4972:	3301      	adds	r3, #1
    4974:	469c      	mov	ip, r3
    4976:	44ac      	add	ip, r5
    4978:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    497a:	4e29      	ldr	r6, [pc, #164]	; (4a20 <trx_sram_read+0x178>)
		while (!spi_is_ready_to_write(&master)) {
    497c:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    497e:	2300      	movs	r3, #0
    4980:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    4982:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4984:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4986:	46b1      	mov	r9, r6
    4988:	e015      	b.n	49b6 <trx_sram_read+0x10e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    498a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    498c:	05d2      	lsls	r2, r2, #23
    498e:	0dd2      	lsrs	r2, r2, #23
    4990:	4926      	ldr	r1, [pc, #152]	; (4a2c <trx_sram_read+0x184>)
    4992:	800a      	strh	r2, [r1, #0]
    4994:	e7c9      	b.n	492a <trx_sram_read+0x82>
    4996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4998:	05db      	lsls	r3, r3, #23
    499a:	0ddb      	lsrs	r3, r3, #23
    499c:	4a23      	ldr	r2, [pc, #140]	; (4a2c <trx_sram_read+0x184>)
    499e:	8013      	strh	r3, [r2, #0]
    49a0:	e7e3      	b.n	496a <trx_sram_read+0xc2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    49a2:	464a      	mov	r2, r9
    49a4:	7992      	ldrb	r2, [r2, #6]
    49a6:	2a01      	cmp	r2, #1
    49a8:	d01c      	beq.n	49e4 <trx_sram_read+0x13c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    49aa:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    49ac:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    49ae:	702f      	strb	r7, [r5, #0]
		data++;
    49b0:	3501      	adds	r5, #1
	while (length--) {
    49b2:	4565      	cmp	r5, ip
    49b4:	d01a      	beq.n	49ec <trx_sram_read+0x144>
	SercomSpi *const spi_module = &(module->hw->SPI);
    49b6:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    49b8:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    49ba:	4202      	tst	r2, r0
    49bc:	d0fc      	beq.n	49b8 <trx_sram_read+0x110>
    49be:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    49c0:	4202      	tst	r2, r0
    49c2:	d001      	beq.n	49c8 <trx_sram_read+0x120>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    49c4:	4652      	mov	r2, sl
    49c6:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    49c8:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    49ca:	4222      	tst	r2, r4
    49cc:	d0fc      	beq.n	49c8 <trx_sram_read+0x120>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    49ce:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    49d0:	420a      	tst	r2, r1
    49d2:	d0fc      	beq.n	49ce <trx_sram_read+0x126>
    49d4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    49d6:	420a      	tst	r2, r1
    49d8:	d0e9      	beq.n	49ae <trx_sram_read+0x106>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    49da:	8b5a      	ldrh	r2, [r3, #26]
    49dc:	420a      	tst	r2, r1
    49de:	d0e0      	beq.n	49a2 <trx_sram_read+0xfa>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    49e0:	8359      	strh	r1, [r3, #26]
    49e2:	e7de      	b.n	49a2 <trx_sram_read+0xfa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    49e4:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    49e6:	05ff      	lsls	r7, r7, #23
    49e8:	0dff      	lsrs	r7, r7, #23
    49ea:	e7e0      	b.n	49ae <trx_sram_read+0x106>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    49ec:	2200      	movs	r2, #0
    49ee:	490d      	ldr	r1, [pc, #52]	; (4a24 <trx_sram_read+0x17c>)
    49f0:	480b      	ldr	r0, [pc, #44]	; (4a20 <trx_sram_read+0x178>)
    49f2:	4b0d      	ldr	r3, [pc, #52]	; (4a28 <trx_sram_read+0x180>)
    49f4:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    49f6:	23ff      	movs	r3, #255	; 0xff
    49f8:	4642      	mov	r2, r8
    49fa:	4213      	tst	r3, r2
    49fc:	d005      	beq.n	4a0a <trx_sram_read+0x162>
		cpu_irq_enable();
    49fe:	2201      	movs	r2, #1
    4a00:	4b06      	ldr	r3, [pc, #24]	; (4a1c <trx_sram_read+0x174>)
    4a02:	701a      	strb	r2, [r3, #0]
    4a04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4a08:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4a0a:	b002      	add	sp, #8
    4a0c:	bc1c      	pop	{r2, r3, r4}
    4a0e:	4690      	mov	r8, r2
    4a10:	4699      	mov	r9, r3
    4a12:	46a2      	mov	sl, r4
    4a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a16:	46c0      	nop			; (mov r8, r8)
    4a18:	000007d9 	.word	0x000007d9
    4a1c:	20000008 	.word	0x20000008
    4a20:	20001720 	.word	0x20001720
    4a24:	200016e4 	.word	0x200016e4
    4a28:	000012c5 	.word	0x000012c5
    4a2c:	200016dc 	.word	0x200016dc

00004a30 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    4a30:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a32:	46d6      	mov	lr, sl
    4a34:	464f      	mov	r7, r9
    4a36:	4646      	mov	r6, r8
    4a38:	b5c0      	push	{r6, r7, lr}
    4a3a:	0006      	movs	r6, r0
    4a3c:	468a      	mov	sl, r1
    4a3e:	0014      	movs	r4, r2
#if SAMD || SAMR21 || SAML21
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    4a40:	2001      	movs	r0, #1
    4a42:	4b76      	ldr	r3, [pc, #472]	; (4c1c <trx_aes_wrrd+0x1ec>)
    4a44:	4798      	blx	r3

	ENTER_TRX_REGION();
    4a46:	2100      	movs	r1, #0
    4a48:	2000      	movs	r0, #0
    4a4a:	4b75      	ldr	r3, [pc, #468]	; (4c20 <trx_aes_wrrd+0x1f0>)
    4a4c:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4a4e:	4f75      	ldr	r7, [pc, #468]	; (4c24 <trx_aes_wrrd+0x1f4>)
    4a50:	2201      	movs	r2, #1
    4a52:	4975      	ldr	r1, [pc, #468]	; (4c28 <trx_aes_wrrd+0x1f8>)
    4a54:	0038      	movs	r0, r7
    4a56:	4b75      	ldr	r3, [pc, #468]	; (4c2c <trx_aes_wrrd+0x1fc>)
    4a58:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    4a5a:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    4a5c:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4a5e:	7e1a      	ldrb	r2, [r3, #24]
    4a60:	420a      	tst	r2, r1
    4a62:	d0fc      	beq.n	4a5e <trx_aes_wrrd+0x2e>
    4a64:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4a66:	07d2      	lsls	r2, r2, #31
    4a68:	d501      	bpl.n	4a6e <trx_aes_wrrd+0x3e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4a6a:	2240      	movs	r2, #64	; 0x40
    4a6c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4a6e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4a70:	7e1a      	ldrb	r2, [r3, #24]
    4a72:	420a      	tst	r2, r1
    4a74:	d0fc      	beq.n	4a70 <trx_aes_wrrd+0x40>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4a76:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4a78:	7e1a      	ldrb	r2, [r3, #24]
    4a7a:	420a      	tst	r2, r1
    4a7c:	d0fc      	beq.n	4a78 <trx_aes_wrrd+0x48>
    4a7e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4a80:	0752      	lsls	r2, r2, #29
    4a82:	d50c      	bpl.n	4a9e <trx_aes_wrrd+0x6e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4a84:	8b5a      	ldrh	r2, [r3, #26]
    4a86:	0752      	lsls	r2, r2, #29
    4a88:	d501      	bpl.n	4a8e <trx_aes_wrrd+0x5e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4a8a:	2204      	movs	r2, #4
    4a8c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4a8e:	4a65      	ldr	r2, [pc, #404]	; (4c24 <trx_aes_wrrd+0x1f4>)
    4a90:	7992      	ldrb	r2, [r2, #6]
    4a92:	2a01      	cmp	r2, #1
    4a94:	d055      	beq.n	4b42 <trx_aes_wrrd+0x112>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4a96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4a98:	b2d2      	uxtb	r2, r2
    4a9a:	4965      	ldr	r1, [pc, #404]	; (4c30 <trx_aes_wrrd+0x200>)
    4a9c:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    4a9e:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4aa0:	7e1a      	ldrb	r2, [r3, #24]
    4aa2:	420a      	tst	r2, r1
    4aa4:	d0fc      	beq.n	4aa0 <trx_aes_wrrd+0x70>
    4aa6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4aa8:	07d2      	lsls	r2, r2, #31
    4aaa:	d500      	bpl.n	4aae <trx_aes_wrrd+0x7e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4aac:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4aae:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4ab0:	7e1a      	ldrb	r2, [r3, #24]
    4ab2:	420a      	tst	r2, r1
    4ab4:	d0fc      	beq.n	4ab0 <trx_aes_wrrd+0x80>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4ab6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4ab8:	7e1a      	ldrb	r2, [r3, #24]
    4aba:	420a      	tst	r2, r1
    4abc:	d0fc      	beq.n	4ab8 <trx_aes_wrrd+0x88>
    4abe:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4ac0:	0752      	lsls	r2, r2, #29
    4ac2:	d50c      	bpl.n	4ade <trx_aes_wrrd+0xae>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4ac4:	8b5a      	ldrh	r2, [r3, #26]
    4ac6:	0752      	lsls	r2, r2, #29
    4ac8:	d501      	bpl.n	4ace <trx_aes_wrrd+0x9e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4aca:	2204      	movs	r2, #4
    4acc:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4ace:	4a55      	ldr	r2, [pc, #340]	; (4c24 <trx_aes_wrrd+0x1f4>)
    4ad0:	7992      	ldrb	r2, [r2, #6]
    4ad2:	2a01      	cmp	r2, #1
    4ad4:	d03b      	beq.n	4b4e <trx_aes_wrrd+0x11e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4ad6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4ad8:	b2d2      	uxtb	r2, r2
    4ada:	4955      	ldr	r1, [pc, #340]	; (4c30 <trx_aes_wrrd+0x200>)
    4adc:	800a      	strh	r2, [r1, #0]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    4ade:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4ae0:	7e1a      	ldrb	r2, [r3, #24]
    4ae2:	420a      	tst	r2, r1
    4ae4:	d0fc      	beq.n	4ae0 <trx_aes_wrrd+0xb0>
    4ae6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4ae8:	07d2      	lsls	r2, r2, #31
    4aea:	d502      	bpl.n	4af2 <trx_aes_wrrd+0xc2>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4aec:	4652      	mov	r2, sl
    4aee:	7812      	ldrb	r2, [r2, #0]
    4af0:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, *idata++);
	while (!spi_is_write_complete(&master)) {
    4af2:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4af4:	7e1a      	ldrb	r2, [r3, #24]
    4af6:	420a      	tst	r2, r1
    4af8:	d0fc      	beq.n	4af4 <trx_aes_wrrd+0xc4>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4afa:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4afc:	7e1a      	ldrb	r2, [r3, #24]
    4afe:	420a      	tst	r2, r1
    4b00:	d0fc      	beq.n	4afc <trx_aes_wrrd+0xcc>
    4b02:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4b04:	0752      	lsls	r2, r2, #29
    4b06:	d50c      	bpl.n	4b22 <trx_aes_wrrd+0xf2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4b08:	8b5a      	ldrh	r2, [r3, #26]
    4b0a:	0752      	lsls	r2, r2, #29
    4b0c:	d501      	bpl.n	4b12 <trx_aes_wrrd+0xe2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4b0e:	2204      	movs	r2, #4
    4b10:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4b12:	4a44      	ldr	r2, [pc, #272]	; (4c24 <trx_aes_wrrd+0x1f4>)
    4b14:	7992      	ldrb	r2, [r2, #6]
    4b16:	2a01      	cmp	r2, #1
    4b18:	d01f      	beq.n	4b5a <trx_aes_wrrd+0x12a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4b1c:	b2db      	uxtb	r3, r3
    4b1e:	4a44      	ldr	r2, [pc, #272]	; (4c30 <trx_aes_wrrd+0x200>)
    4b20:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    4b22:	2700      	movs	r7, #0
    4b24:	2c00      	cmp	r4, #0
    4b26:	d043      	beq.n	4bb0 <trx_aes_wrrd+0x180>
    4b28:	4656      	mov	r6, sl
    4b2a:	3c01      	subs	r4, #1
    4b2c:	b2e4      	uxtb	r4, r4
    4b2e:	3401      	adds	r4, #1
    4b30:	44a2      	add	sl, r4
    4b32:	46d0      	mov	r8, sl
    4b34:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    4b36:	4d3b      	ldr	r5, [pc, #236]	; (4c24 <trx_aes_wrrd+0x1f4>)
		while (!spi_is_ready_to_write(&master)) {
    4b38:	2001      	movs	r0, #1
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    4b3a:	2402      	movs	r4, #2
		}
		while (!spi_is_ready_to_read(&master)) {
    4b3c:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4b3e:	46a9      	mov	r9, r5
    4b40:	e01b      	b.n	4b7a <trx_aes_wrrd+0x14a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4b42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4b44:	05d2      	lsls	r2, r2, #23
    4b46:	0dd2      	lsrs	r2, r2, #23
    4b48:	4939      	ldr	r1, [pc, #228]	; (4c30 <trx_aes_wrrd+0x200>)
    4b4a:	800a      	strh	r2, [r1, #0]
    4b4c:	e7a7      	b.n	4a9e <trx_aes_wrrd+0x6e>
    4b4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4b50:	05d2      	lsls	r2, r2, #23
    4b52:	0dd2      	lsrs	r2, r2, #23
    4b54:	4936      	ldr	r1, [pc, #216]	; (4c30 <trx_aes_wrrd+0x200>)
    4b56:	800a      	strh	r2, [r1, #0]
    4b58:	e7c1      	b.n	4ade <trx_aes_wrrd+0xae>
    4b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4b5c:	05db      	lsls	r3, r3, #23
    4b5e:	0ddb      	lsrs	r3, r3, #23
    4b60:	4a33      	ldr	r2, [pc, #204]	; (4c30 <trx_aes_wrrd+0x200>)
    4b62:	8013      	strh	r3, [r2, #0]
    4b64:	e7dd      	b.n	4b22 <trx_aes_wrrd+0xf2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4b66:	464a      	mov	r2, r9
    4b68:	7992      	ldrb	r2, [r2, #6]
    4b6a:	2a01      	cmp	r2, #1
    4b6c:	d01c      	beq.n	4ba8 <trx_aes_wrrd+0x178>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4b6e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4b70:	b2ff      	uxtb	r7, r7
		}

#if SAMD || SAMR21 || SAML21
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    4b72:	7037      	strb	r7, [r6, #0]
    4b74:	3601      	adds	r6, #1
	while (length > 0) {
    4b76:	45b0      	cmp	r8, r6
    4b78:	d01a      	beq.n	4bb0 <trx_aes_wrrd+0x180>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4b7a:	682b      	ldr	r3, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4b7c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    4b7e:	4202      	tst	r2, r0
    4b80:	d0fc      	beq.n	4b7c <trx_aes_wrrd+0x14c>
    4b82:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4b84:	4202      	tst	r2, r0
    4b86:	d001      	beq.n	4b8c <trx_aes_wrrd+0x15c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4b88:	7872      	ldrb	r2, [r6, #1]
    4b8a:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4b8c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    4b8e:	4222      	tst	r2, r4
    4b90:	d0fc      	beq.n	4b8c <trx_aes_wrrd+0x15c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4b92:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    4b94:	420a      	tst	r2, r1
    4b96:	d0fc      	beq.n	4b92 <trx_aes_wrrd+0x162>
    4b98:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4b9a:	420a      	tst	r2, r1
    4b9c:	d0e9      	beq.n	4b72 <trx_aes_wrrd+0x142>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4b9e:	8b5a      	ldrh	r2, [r3, #26]
    4ba0:	420a      	tst	r2, r1
    4ba2:	d0e0      	beq.n	4b66 <trx_aes_wrrd+0x136>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4ba4:	8359      	strh	r1, [r3, #26]
    4ba6:	e7de      	b.n	4b66 <trx_aes_wrrd+0x136>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4ba8:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4baa:	05ff      	lsls	r7, r7, #23
    4bac:	0dff      	lsrs	r7, r7, #23
    4bae:	e7e0      	b.n	4b72 <trx_aes_wrrd+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4bb0:	4b1c      	ldr	r3, [pc, #112]	; (4c24 <trx_aes_wrrd+0x1f4>)
    4bb2:	681b      	ldr	r3, [r3, #0]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    4bb4:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4bb6:	7e1a      	ldrb	r2, [r3, #24]
    4bb8:	420a      	tst	r2, r1
    4bba:	d0fc      	beq.n	4bb6 <trx_aes_wrrd+0x186>
    4bbc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4bbe:	07d2      	lsls	r2, r2, #31
    4bc0:	d501      	bpl.n	4bc6 <trx_aes_wrrd+0x196>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4bc2:	2200      	movs	r2, #0
    4bc4:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    4bc6:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4bc8:	7e1a      	ldrb	r2, [r3, #24]
    4bca:	420a      	tst	r2, r1
    4bcc:	d0fc      	beq.n	4bc8 <trx_aes_wrrd+0x198>
	}
	while (!spi_is_ready_to_read(&master)) {
    4bce:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4bd0:	7e1a      	ldrb	r2, [r3, #24]
    4bd2:	420a      	tst	r2, r1
    4bd4:	d0fc      	beq.n	4bd0 <trx_aes_wrrd+0x1a0>
    4bd6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4bd8:	0752      	lsls	r2, r2, #29
    4bda:	d50a      	bpl.n	4bf2 <trx_aes_wrrd+0x1c2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4bdc:	8b5a      	ldrh	r2, [r3, #26]
    4bde:	0752      	lsls	r2, r2, #29
    4be0:	d501      	bpl.n	4be6 <trx_aes_wrrd+0x1b6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4be2:	2204      	movs	r2, #4
    4be4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4be6:	4a0f      	ldr	r2, [pc, #60]	; (4c24 <trx_aes_wrrd+0x1f4>)
    4be8:	7992      	ldrb	r2, [r2, #6]
    4bea:	2a01      	cmp	r2, #1
    4bec:	d011      	beq.n	4c12 <trx_aes_wrrd+0x1e2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4bee:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4bf0:	b2ff      	uxtb	r7, r7
	}
#if SAMD || SAMR21 || SAML21
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    4bf2:	4653      	mov	r3, sl
    4bf4:	701f      	strb	r7, [r3, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4bf6:	2200      	movs	r2, #0
    4bf8:	490b      	ldr	r1, [pc, #44]	; (4c28 <trx_aes_wrrd+0x1f8>)
    4bfa:	480a      	ldr	r0, [pc, #40]	; (4c24 <trx_aes_wrrd+0x1f4>)
    4bfc:	4b0b      	ldr	r3, [pc, #44]	; (4c2c <trx_aes_wrrd+0x1fc>)
    4bfe:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    4c00:	2100      	movs	r1, #0
    4c02:	2000      	movs	r0, #0
    4c04:	4b0b      	ldr	r3, [pc, #44]	; (4c34 <trx_aes_wrrd+0x204>)
    4c06:	4798      	blx	r3
}
    4c08:	bc1c      	pop	{r2, r3, r4}
    4c0a:	4690      	mov	r8, r2
    4c0c:	4699      	mov	r9, r3
    4c0e:	46a2      	mov	sl, r4
    4c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4c12:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4c14:	05ff      	lsls	r7, r7, #23
    4c16:	0dff      	lsrs	r7, r7, #23
    4c18:	e7eb      	b.n	4bf2 <trx_aes_wrrd+0x1c2>
    4c1a:	46c0      	nop			; (mov r8, r8)
    4c1c:	000007d9 	.word	0x000007d9
    4c20:	00000995 	.word	0x00000995
    4c24:	20001720 	.word	0x20001720
    4c28:	200016e4 	.word	0x200016e4
    4c2c:	000012c5 	.word	0x000012c5
    4c30:	200016dc 	.word	0x200016dc
    4c34:	00000975 	.word	0x00000975

00004c38 <setup>:

#include "TheArtist.h"
/************************************************************************/
/*                                                                      */
/************************************************************************/
void setup(void) {
    4c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// [SYSTEM INITIALIZE]
	// [NOTICE!]!! sequence of this calls is important!
	irq_initialize_vectors();
	system_init();
    4c3a:	4b1c      	ldr	r3, [pc, #112]	; (4cac <setup+0x74>)
    4c3c:	4798      	blx	r3
	delay_init();
    4c3e:	4b1c      	ldr	r3, [pc, #112]	; (4cb0 <setup+0x78>)
    4c40:	4798      	blx	r3
	SYS_Init();	
    4c42:	4b1c      	ldr	r3, [pc, #112]	; (4cb4 <setup+0x7c>)
    4c44:	4798      	blx	r3
	
	artist_ultrasonic_tc_configure();
    4c46:	4b1c      	ldr	r3, [pc, #112]	; (4cb8 <setup+0x80>)
    4c48:	4798      	blx	r3
	artist_scheduler_tc_configure();
    4c4a:	4b1c      	ldr	r3, [pc, #112]	; (4cbc <setup+0x84>)
    4c4c:	4798      	blx	r3
	artist_configure_tc_callbacks();  
    4c4e:	4b1c      	ldr	r3, [pc, #112]	; (4cc0 <setup+0x88>)
    4c50:	4798      	blx	r3
	artist_init_maze(); 
    4c52:	4b1c      	ldr	r3, [pc, #112]	; (4cc4 <setup+0x8c>)
    4c54:	4798      	blx	r3

	cpu_irq_enable();
    4c56:	4e1c      	ldr	r6, [pc, #112]	; (4cc8 <setup+0x90>)
    4c58:	2701      	movs	r7, #1
    4c5a:	7037      	strb	r7, [r6, #0]
    4c5c:	f3bf 8f5f 	dmb	sy
    4c60:	b662      	cpsie	i
	
	// [ultrasonic]
	artist_ultrasonic_configure(&(artist_front.us_instance_right),
    4c62:	4c1a      	ldr	r4, [pc, #104]	; (4ccc <setup+0x94>)
    4c64:	220f      	movs	r2, #15
    4c66:	211c      	movs	r1, #28
    4c68:	0020      	movs	r0, r4
    4c6a:	4d19      	ldr	r5, [pc, #100]	; (4cd0 <setup+0x98>)
    4c6c:	47a8      	blx	r5
	CONF_ARTIST_RIGHT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_center),
    4c6e:	0020      	movs	r0, r4
    4c70:	3810      	subs	r0, #16
    4c72:	220f      	movs	r2, #15
    4c74:	210d      	movs	r1, #13
    4c76:	47a8      	blx	r5
	CONF_ARTIST_CENTER_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_left),
    4c78:	0020      	movs	r0, r4
    4c7a:	3808      	subs	r0, #8
    4c7c:	220f      	movs	r2, #15
    4c7e:	2117      	movs	r1, #23
    4c80:	47a8      	blx	r5
	CONF_ARTIST_LEFT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_gpio_init();
    4c82:	4b14      	ldr	r3, [pc, #80]	; (4cd4 <setup+0x9c>)
    4c84:	4798      	blx	r3
	
	//! [ultrasonic]
	
	
	artist_usart_configure(&(artist_front.usart_instance));
    4c86:	3c4c      	subs	r4, #76	; 0x4c
    4c88:	0020      	movs	r0, r4
    4c8a:	4b13      	ldr	r3, [pc, #76]	; (4cd8 <setup+0xa0>)
    4c8c:	4798      	blx	r3
	cpu_irq_enable();
    4c8e:	7037      	strb	r7, [r6, #0]
    4c90:	f3bf 8f5f 	dmb	sy
    4c94:	b662      	cpsie	i
	
	system_interrupt_enable_global();

	
	usart_read_buffer_job( &(artist_front.usart_instance),
    4c96:	2205      	movs	r2, #5
    4c98:	4910      	ldr	r1, [pc, #64]	; (4cdc <setup+0xa4>)
    4c9a:	0020      	movs	r0, r4
    4c9c:	4b10      	ldr	r3, [pc, #64]	; (4ce0 <setup+0xa8>)
    4c9e:	4798      	blx	r3
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
	
	radioInit();  
    4ca0:	4b10      	ldr	r3, [pc, #64]	; (4ce4 <setup+0xac>)
    4ca2:	4798      	blx	r3
	
	printf("front node setup complete\n"); 
    4ca4:	4810      	ldr	r0, [pc, #64]	; (4ce8 <setup+0xb0>)
    4ca6:	4b11      	ldr	r3, [pc, #68]	; (4cec <setup+0xb4>)
    4ca8:	4798      	blx	r3
	
}
    4caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4cac:	0000228d 	.word	0x0000228d
    4cb0:	00000799 	.word	0x00000799
    4cb4:	00003c69 	.word	0x00003c69
    4cb8:	000004c9 	.word	0x000004c9
    4cbc:	000006d9 	.word	0x000006d9
    4cc0:	00000749 	.word	0x00000749
    4cc4:	00000115 	.word	0x00000115
    4cc8:	20000008 	.word	0x20000008
    4ccc:	20000944 	.word	0x20000944
    4cd0:	00000179 	.word	0x00000179
    4cd4:	00000189 	.word	0x00000189
    4cd8:	0000055d 	.word	0x0000055d
    4cdc:	20001570 	.word	0x20001570
    4ce0:	00001859 	.word	0x00001859
    4ce4:	00000139 	.word	0x00000139
    4ce8:	0000a4e8 	.word	0x0000a4e8
    4cec:	00005841 	.word	0x00005841

00004cf0 <main>:
	SYS_TaskHandler();  
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
int main (void) {
    4cf0:	b510      	push	{r4, lr}
	setup();
    4cf2:	4b02      	ldr	r3, [pc, #8]	; (4cfc <main+0xc>)
    4cf4:	4798      	blx	r3
	SYS_TaskHandler();  
    4cf6:	4c02      	ldr	r4, [pc, #8]	; (4d00 <main+0x10>)
    4cf8:	47a0      	blx	r4
    4cfa:	e7fd      	b.n	4cf8 <main+0x8>
    4cfc:	00004c39 	.word	0x00004c39
    4d00:	00003c8d 	.word	0x00003c8d

00004d04 <common_tc_delay>:
    4d04:	b510      	push	{r4, lr}
    4d06:	1c04      	adds	r4, r0, #0
    4d08:	4b13      	ldr	r3, [pc, #76]	; (4d58 <common_tc_delay+0x54>)
    4d0a:	4798      	blx	r3
    4d0c:	4b13      	ldr	r3, [pc, #76]	; (4d5c <common_tc_delay+0x58>)
    4d0e:	781a      	ldrb	r2, [r3, #0]
    4d10:	4362      	muls	r2, r4
    4d12:	1881      	adds	r1, r0, r2
    4d14:	4b12      	ldr	r3, [pc, #72]	; (4d60 <common_tc_delay+0x5c>)
    4d16:	6059      	str	r1, [r3, #4]
    4d18:	6859      	ldr	r1, [r3, #4]
    4d1a:	0c09      	lsrs	r1, r1, #16
    4d1c:	6059      	str	r1, [r3, #4]
    4d1e:	685b      	ldr	r3, [r3, #4]
    4d20:	2b00      	cmp	r3, #0
    4d22:	d007      	beq.n	4d34 <common_tc_delay+0x30>
    4d24:	4b0e      	ldr	r3, [pc, #56]	; (4d60 <common_tc_delay+0x5c>)
    4d26:	6859      	ldr	r1, [r3, #4]
    4d28:	3201      	adds	r2, #1
    4d2a:	1880      	adds	r0, r0, r2
    4d2c:	8118      	strh	r0, [r3, #8]
    4d2e:	4b0d      	ldr	r3, [pc, #52]	; (4d64 <common_tc_delay+0x60>)
    4d30:	4798      	blx	r3
    4d32:	e004      	b.n	4d3e <common_tc_delay+0x3a>
    4d34:	1882      	adds	r2, r0, r2
    4d36:	4b0a      	ldr	r3, [pc, #40]	; (4d60 <common_tc_delay+0x5c>)
    4d38:	811a      	strh	r2, [r3, #8]
    4d3a:	4b0b      	ldr	r3, [pc, #44]	; (4d68 <common_tc_delay+0x64>)
    4d3c:	4798      	blx	r3
    4d3e:	4b08      	ldr	r3, [pc, #32]	; (4d60 <common_tc_delay+0x5c>)
    4d40:	891b      	ldrh	r3, [r3, #8]
    4d42:	2b63      	cmp	r3, #99	; 0x63
    4d44:	d802      	bhi.n	4d4c <common_tc_delay+0x48>
    4d46:	3364      	adds	r3, #100	; 0x64
    4d48:	4a05      	ldr	r2, [pc, #20]	; (4d60 <common_tc_delay+0x5c>)
    4d4a:	8113      	strh	r3, [r2, #8]
    4d4c:	4b04      	ldr	r3, [pc, #16]	; (4d60 <common_tc_delay+0x5c>)
    4d4e:	8918      	ldrh	r0, [r3, #8]
    4d50:	4b06      	ldr	r3, [pc, #24]	; (4d6c <common_tc_delay+0x68>)
    4d52:	4798      	blx	r3
    4d54:	bd10      	pop	{r4, pc}
    4d56:	46c0      	nop			; (mov r8, r8)
    4d58:	00003e61 	.word	0x00003e61
    4d5c:	2000172c 	.word	0x2000172c
    4d60:	20000864 	.word	0x20000864
    4d64:	00003e75 	.word	0x00003e75
    4d68:	00003e89 	.word	0x00003e89
    4d6c:	00003ec5 	.word	0x00003ec5

00004d70 <common_tc_init>:
    4d70:	b508      	push	{r3, lr}
    4d72:	2200      	movs	r2, #0
    4d74:	4b03      	ldr	r3, [pc, #12]	; (4d84 <common_tc_init+0x14>)
    4d76:	701a      	strb	r2, [r3, #0]
    4d78:	4b03      	ldr	r3, [pc, #12]	; (4d88 <common_tc_init+0x18>)
    4d7a:	4798      	blx	r3
    4d7c:	4b03      	ldr	r3, [pc, #12]	; (4d8c <common_tc_init+0x1c>)
    4d7e:	7018      	strb	r0, [r3, #0]
    4d80:	bd08      	pop	{r3, pc}
    4d82:	46c0      	nop			; (mov r8, r8)
    4d84:	20000864 	.word	0x20000864
    4d88:	00003edd 	.word	0x00003edd
    4d8c:	2000172c 	.word	0x2000172c

00004d90 <tmr_ovf_callback>:
    4d90:	b508      	push	{r3, lr}
    4d92:	4b0e      	ldr	r3, [pc, #56]	; (4dcc <tmr_ovf_callback+0x3c>)
    4d94:	685b      	ldr	r3, [r3, #4]
    4d96:	2b00      	cmp	r3, #0
    4d98:	d007      	beq.n	4daa <tmr_ovf_callback+0x1a>
    4d9a:	4a0c      	ldr	r2, [pc, #48]	; (4dcc <tmr_ovf_callback+0x3c>)
    4d9c:	6853      	ldr	r3, [r2, #4]
    4d9e:	3b01      	subs	r3, #1
    4da0:	6053      	str	r3, [r2, #4]
    4da2:	2b00      	cmp	r3, #0
    4da4:	d101      	bne.n	4daa <tmr_ovf_callback+0x1a>
    4da6:	4b0a      	ldr	r3, [pc, #40]	; (4dd0 <tmr_ovf_callback+0x40>)
    4da8:	4798      	blx	r3
    4daa:	4a08      	ldr	r2, [pc, #32]	; (4dcc <tmr_ovf_callback+0x3c>)
    4dac:	7813      	ldrb	r3, [r2, #0]
    4dae:	3301      	adds	r3, #1
    4db0:	b2db      	uxtb	r3, r3
    4db2:	7013      	strb	r3, [r2, #0]
    4db4:	4a07      	ldr	r2, [pc, #28]	; (4dd4 <tmr_ovf_callback+0x44>)
    4db6:	7812      	ldrb	r2, [r2, #0]
    4db8:	429a      	cmp	r2, r3
    4dba:	d806      	bhi.n	4dca <tmr_ovf_callback+0x3a>
    4dbc:	4b03      	ldr	r3, [pc, #12]	; (4dcc <tmr_ovf_callback+0x3c>)
    4dbe:	2200      	movs	r2, #0
    4dc0:	701a      	strb	r2, [r3, #0]
    4dc2:	68db      	ldr	r3, [r3, #12]
    4dc4:	2b00      	cmp	r3, #0
    4dc6:	d000      	beq.n	4dca <tmr_ovf_callback+0x3a>
    4dc8:	4798      	blx	r3
    4dca:	bd08      	pop	{r3, pc}
    4dcc:	20000864 	.word	0x20000864
    4dd0:	00003e89 	.word	0x00003e89
    4dd4:	2000172c 	.word	0x2000172c

00004dd8 <tmr_cca_callback>:
    4dd8:	b508      	push	{r3, lr}
    4dda:	4b04      	ldr	r3, [pc, #16]	; (4dec <tmr_cca_callback+0x14>)
    4ddc:	4798      	blx	r3
    4dde:	4b04      	ldr	r3, [pc, #16]	; (4df0 <tmr_cca_callback+0x18>)
    4de0:	691b      	ldr	r3, [r3, #16]
    4de2:	2b00      	cmp	r3, #0
    4de4:	d000      	beq.n	4de8 <tmr_cca_callback+0x10>
    4de6:	4798      	blx	r3
    4de8:	bd08      	pop	{r3, pc}
    4dea:	46c0      	nop			; (mov r8, r8)
    4dec:	00003e75 	.word	0x00003e75
    4df0:	20000864 	.word	0x20000864

00004df4 <set_common_tc_expiry_callback>:
    4df4:	4b01      	ldr	r3, [pc, #4]	; (4dfc <set_common_tc_expiry_callback+0x8>)
    4df6:	6118      	str	r0, [r3, #16]
    4df8:	4770      	bx	lr
    4dfa:	46c0      	nop			; (mov r8, r8)
    4dfc:	20000864 	.word	0x20000864

00004e00 <__libc_init_array>:
    4e00:	b570      	push	{r4, r5, r6, lr}
    4e02:	2600      	movs	r6, #0
    4e04:	4d0c      	ldr	r5, [pc, #48]	; (4e38 <__libc_init_array+0x38>)
    4e06:	4c0d      	ldr	r4, [pc, #52]	; (4e3c <__libc_init_array+0x3c>)
    4e08:	1b64      	subs	r4, r4, r5
    4e0a:	10a4      	asrs	r4, r4, #2
    4e0c:	42a6      	cmp	r6, r4
    4e0e:	d109      	bne.n	4e24 <__libc_init_array+0x24>
    4e10:	2600      	movs	r6, #0
    4e12:	f005 fd79 	bl	a908 <_init>
    4e16:	4d0a      	ldr	r5, [pc, #40]	; (4e40 <__libc_init_array+0x40>)
    4e18:	4c0a      	ldr	r4, [pc, #40]	; (4e44 <__libc_init_array+0x44>)
    4e1a:	1b64      	subs	r4, r4, r5
    4e1c:	10a4      	asrs	r4, r4, #2
    4e1e:	42a6      	cmp	r6, r4
    4e20:	d105      	bne.n	4e2e <__libc_init_array+0x2e>
    4e22:	bd70      	pop	{r4, r5, r6, pc}
    4e24:	00b3      	lsls	r3, r6, #2
    4e26:	58eb      	ldr	r3, [r5, r3]
    4e28:	4798      	blx	r3
    4e2a:	3601      	adds	r6, #1
    4e2c:	e7ee      	b.n	4e0c <__libc_init_array+0xc>
    4e2e:	00b3      	lsls	r3, r6, #2
    4e30:	58eb      	ldr	r3, [r5, r3]
    4e32:	4798      	blx	r3
    4e34:	3601      	adds	r6, #1
    4e36:	e7f2      	b.n	4e1e <__libc_init_array+0x1e>
    4e38:	0000a914 	.word	0x0000a914
    4e3c:	0000a914 	.word	0x0000a914
    4e40:	0000a914 	.word	0x0000a914
    4e44:	0000a918 	.word	0x0000a918

00004e48 <memcpy>:
    4e48:	2300      	movs	r3, #0
    4e4a:	b510      	push	{r4, lr}
    4e4c:	429a      	cmp	r2, r3
    4e4e:	d100      	bne.n	4e52 <memcpy+0xa>
    4e50:	bd10      	pop	{r4, pc}
    4e52:	5ccc      	ldrb	r4, [r1, r3]
    4e54:	54c4      	strb	r4, [r0, r3]
    4e56:	3301      	adds	r3, #1
    4e58:	e7f8      	b.n	4e4c <memcpy+0x4>

00004e5a <memset>:
    4e5a:	0003      	movs	r3, r0
    4e5c:	1882      	adds	r2, r0, r2
    4e5e:	4293      	cmp	r3, r2
    4e60:	d100      	bne.n	4e64 <memset+0xa>
    4e62:	4770      	bx	lr
    4e64:	7019      	strb	r1, [r3, #0]
    4e66:	3301      	adds	r3, #1
    4e68:	e7f9      	b.n	4e5e <memset+0x4>

00004e6a <__cvt>:
    4e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e6c:	b08b      	sub	sp, #44	; 0x2c
    4e6e:	0014      	movs	r4, r2
    4e70:	1e1d      	subs	r5, r3, #0
    4e72:	9912      	ldr	r1, [sp, #72]	; 0x48
    4e74:	da53      	bge.n	4f1e <__cvt+0xb4>
    4e76:	2480      	movs	r4, #128	; 0x80
    4e78:	0624      	lsls	r4, r4, #24
    4e7a:	191b      	adds	r3, r3, r4
    4e7c:	001d      	movs	r5, r3
    4e7e:	0014      	movs	r4, r2
    4e80:	232d      	movs	r3, #45	; 0x2d
    4e82:	700b      	strb	r3, [r1, #0]
    4e84:	2320      	movs	r3, #32
    4e86:	9e14      	ldr	r6, [sp, #80]	; 0x50
    4e88:	2203      	movs	r2, #3
    4e8a:	439e      	bics	r6, r3
    4e8c:	2e46      	cmp	r6, #70	; 0x46
    4e8e:	d007      	beq.n	4ea0 <__cvt+0x36>
    4e90:	0033      	movs	r3, r6
    4e92:	3b45      	subs	r3, #69	; 0x45
    4e94:	4259      	negs	r1, r3
    4e96:	414b      	adcs	r3, r1
    4e98:	9910      	ldr	r1, [sp, #64]	; 0x40
    4e9a:	3a01      	subs	r2, #1
    4e9c:	18cb      	adds	r3, r1, r3
    4e9e:	9310      	str	r3, [sp, #64]	; 0x40
    4ea0:	ab09      	add	r3, sp, #36	; 0x24
    4ea2:	9304      	str	r3, [sp, #16]
    4ea4:	ab08      	add	r3, sp, #32
    4ea6:	9303      	str	r3, [sp, #12]
    4ea8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4eaa:	9200      	str	r2, [sp, #0]
    4eac:	9302      	str	r3, [sp, #8]
    4eae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4eb0:	0022      	movs	r2, r4
    4eb2:	9301      	str	r3, [sp, #4]
    4eb4:	002b      	movs	r3, r5
    4eb6:	f000 ff17 	bl	5ce8 <_dtoa_r>
    4eba:	0007      	movs	r7, r0
    4ebc:	2e47      	cmp	r6, #71	; 0x47
    4ebe:	d102      	bne.n	4ec6 <__cvt+0x5c>
    4ec0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4ec2:	07db      	lsls	r3, r3, #31
    4ec4:	d524      	bpl.n	4f10 <__cvt+0xa6>
    4ec6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4ec8:	18fb      	adds	r3, r7, r3
    4eca:	9307      	str	r3, [sp, #28]
    4ecc:	2e46      	cmp	r6, #70	; 0x46
    4ece:	d114      	bne.n	4efa <__cvt+0x90>
    4ed0:	783b      	ldrb	r3, [r7, #0]
    4ed2:	2b30      	cmp	r3, #48	; 0x30
    4ed4:	d10c      	bne.n	4ef0 <__cvt+0x86>
    4ed6:	2200      	movs	r2, #0
    4ed8:	2300      	movs	r3, #0
    4eda:	0020      	movs	r0, r4
    4edc:	0029      	movs	r1, r5
    4ede:	f002 fe5d 	bl	7b9c <__aeabi_dcmpeq>
    4ee2:	2800      	cmp	r0, #0
    4ee4:	d104      	bne.n	4ef0 <__cvt+0x86>
    4ee6:	2301      	movs	r3, #1
    4ee8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4eea:	1a9b      	subs	r3, r3, r2
    4eec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    4eee:	6013      	str	r3, [r2, #0]
    4ef0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4ef2:	9a07      	ldr	r2, [sp, #28]
    4ef4:	681b      	ldr	r3, [r3, #0]
    4ef6:	18d3      	adds	r3, r2, r3
    4ef8:	9307      	str	r3, [sp, #28]
    4efa:	2200      	movs	r2, #0
    4efc:	2300      	movs	r3, #0
    4efe:	0020      	movs	r0, r4
    4f00:	0029      	movs	r1, r5
    4f02:	f002 fe4b 	bl	7b9c <__aeabi_dcmpeq>
    4f06:	2230      	movs	r2, #48	; 0x30
    4f08:	2800      	cmp	r0, #0
    4f0a:	d00d      	beq.n	4f28 <__cvt+0xbe>
    4f0c:	9b07      	ldr	r3, [sp, #28]
    4f0e:	9309      	str	r3, [sp, #36]	; 0x24
    4f10:	0038      	movs	r0, r7
    4f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4f14:	9a15      	ldr	r2, [sp, #84]	; 0x54
    4f16:	1bdb      	subs	r3, r3, r7
    4f18:	6013      	str	r3, [r2, #0]
    4f1a:	b00b      	add	sp, #44	; 0x2c
    4f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f1e:	2300      	movs	r3, #0
    4f20:	e7af      	b.n	4e82 <__cvt+0x18>
    4f22:	1c59      	adds	r1, r3, #1
    4f24:	9109      	str	r1, [sp, #36]	; 0x24
    4f26:	701a      	strb	r2, [r3, #0]
    4f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4f2a:	9907      	ldr	r1, [sp, #28]
    4f2c:	4299      	cmp	r1, r3
    4f2e:	d8f8      	bhi.n	4f22 <__cvt+0xb8>
    4f30:	e7ee      	b.n	4f10 <__cvt+0xa6>

00004f32 <__exponent>:
    4f32:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f34:	232b      	movs	r3, #43	; 0x2b
    4f36:	b085      	sub	sp, #20
    4f38:	0007      	movs	r7, r0
    4f3a:	000c      	movs	r4, r1
    4f3c:	7002      	strb	r2, [r0, #0]
    4f3e:	1c86      	adds	r6, r0, #2
    4f40:	2900      	cmp	r1, #0
    4f42:	da01      	bge.n	4f48 <__exponent+0x16>
    4f44:	232d      	movs	r3, #45	; 0x2d
    4f46:	424c      	negs	r4, r1
    4f48:	707b      	strb	r3, [r7, #1]
    4f4a:	2c09      	cmp	r4, #9
    4f4c:	dd23      	ble.n	4f96 <__exponent+0x64>
    4f4e:	ab02      	add	r3, sp, #8
    4f50:	1ddd      	adds	r5, r3, #7
    4f52:	1e6b      	subs	r3, r5, #1
    4f54:	0020      	movs	r0, r4
    4f56:	210a      	movs	r1, #10
    4f58:	9301      	str	r3, [sp, #4]
    4f5a:	f002 fe09 	bl	7b70 <__aeabi_idivmod>
    4f5e:	1e6b      	subs	r3, r5, #1
    4f60:	3130      	adds	r1, #48	; 0x30
    4f62:	7019      	strb	r1, [r3, #0]
    4f64:	0020      	movs	r0, r4
    4f66:	210a      	movs	r1, #10
    4f68:	f002 fd1c 	bl	79a4 <__divsi3>
    4f6c:	0004      	movs	r4, r0
    4f6e:	2809      	cmp	r0, #9
    4f70:	dc0a      	bgt.n	4f88 <__exponent+0x56>
    4f72:	3d02      	subs	r5, #2
    4f74:	3430      	adds	r4, #48	; 0x30
    4f76:	702c      	strb	r4, [r5, #0]
    4f78:	ab02      	add	r3, sp, #8
    4f7a:	3307      	adds	r3, #7
    4f7c:	0030      	movs	r0, r6
    4f7e:	42ab      	cmp	r3, r5
    4f80:	d804      	bhi.n	4f8c <__exponent+0x5a>
    4f82:	1bc0      	subs	r0, r0, r7
    4f84:	b005      	add	sp, #20
    4f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f88:	9d01      	ldr	r5, [sp, #4]
    4f8a:	e7e2      	b.n	4f52 <__exponent+0x20>
    4f8c:	782b      	ldrb	r3, [r5, #0]
    4f8e:	3501      	adds	r5, #1
    4f90:	7033      	strb	r3, [r6, #0]
    4f92:	3601      	adds	r6, #1
    4f94:	e7f0      	b.n	4f78 <__exponent+0x46>
    4f96:	2330      	movs	r3, #48	; 0x30
    4f98:	18e4      	adds	r4, r4, r3
    4f9a:	7033      	strb	r3, [r6, #0]
    4f9c:	1cb0      	adds	r0, r6, #2
    4f9e:	7074      	strb	r4, [r6, #1]
    4fa0:	e7ef      	b.n	4f82 <__exponent+0x50>
	...

00004fa4 <_printf_float>:
    4fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fa6:	b095      	sub	sp, #84	; 0x54
    4fa8:	000c      	movs	r4, r1
    4faa:	920a      	str	r2, [sp, #40]	; 0x28
    4fac:	930b      	str	r3, [sp, #44]	; 0x2c
    4fae:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    4fb0:	9009      	str	r0, [sp, #36]	; 0x24
    4fb2:	f001 fe0f 	bl	6bd4 <_localeconv_r>
    4fb6:	6803      	ldr	r3, [r0, #0]
    4fb8:	0018      	movs	r0, r3
    4fba:	930d      	str	r3, [sp, #52]	; 0x34
    4fbc:	f000 fd3c 	bl	5a38 <strlen>
    4fc0:	2300      	movs	r3, #0
    4fc2:	9312      	str	r3, [sp, #72]	; 0x48
    4fc4:	6823      	ldr	r3, [r4, #0]
    4fc6:	900e      	str	r0, [sp, #56]	; 0x38
    4fc8:	930c      	str	r3, [sp, #48]	; 0x30
    4fca:	990c      	ldr	r1, [sp, #48]	; 0x30
    4fcc:	7e27      	ldrb	r7, [r4, #24]
    4fce:	682b      	ldr	r3, [r5, #0]
    4fd0:	2207      	movs	r2, #7
    4fd2:	05c9      	lsls	r1, r1, #23
    4fd4:	d547      	bpl.n	5066 <_printf_float+0xc2>
    4fd6:	189b      	adds	r3, r3, r2
    4fd8:	4393      	bics	r3, r2
    4fda:	001a      	movs	r2, r3
    4fdc:	3208      	adds	r2, #8
    4fde:	602a      	str	r2, [r5, #0]
    4fe0:	681a      	ldr	r2, [r3, #0]
    4fe2:	685b      	ldr	r3, [r3, #4]
    4fe4:	64a2      	str	r2, [r4, #72]	; 0x48
    4fe6:	64e3      	str	r3, [r4, #76]	; 0x4c
    4fe8:	2201      	movs	r2, #1
    4fea:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    4fec:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    4fee:	006b      	lsls	r3, r5, #1
    4ff0:	085b      	lsrs	r3, r3, #1
    4ff2:	930f      	str	r3, [sp, #60]	; 0x3c
    4ff4:	4252      	negs	r2, r2
    4ff6:	4ba7      	ldr	r3, [pc, #668]	; (5294 <_printf_float+0x2f0>)
    4ff8:	0030      	movs	r0, r6
    4ffa:	990f      	ldr	r1, [sp, #60]	; 0x3c
    4ffc:	f005 f82c 	bl	a058 <__aeabi_dcmpun>
    5000:	2800      	cmp	r0, #0
    5002:	d000      	beq.n	5006 <_printf_float+0x62>
    5004:	e206      	b.n	5414 <_printf_float+0x470>
    5006:	2201      	movs	r2, #1
    5008:	4ba2      	ldr	r3, [pc, #648]	; (5294 <_printf_float+0x2f0>)
    500a:	4252      	negs	r2, r2
    500c:	0030      	movs	r0, r6
    500e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    5010:	f002 fdd4 	bl	7bbc <__aeabi_dcmple>
    5014:	2800      	cmp	r0, #0
    5016:	d000      	beq.n	501a <_printf_float+0x76>
    5018:	e1fc      	b.n	5414 <_printf_float+0x470>
    501a:	2200      	movs	r2, #0
    501c:	2300      	movs	r3, #0
    501e:	0030      	movs	r0, r6
    5020:	0029      	movs	r1, r5
    5022:	f002 fdc1 	bl	7ba8 <__aeabi_dcmplt>
    5026:	2800      	cmp	r0, #0
    5028:	d003      	beq.n	5032 <_printf_float+0x8e>
    502a:	0023      	movs	r3, r4
    502c:	222d      	movs	r2, #45	; 0x2d
    502e:	3343      	adds	r3, #67	; 0x43
    5030:	701a      	strb	r2, [r3, #0]
    5032:	4d99      	ldr	r5, [pc, #612]	; (5298 <_printf_float+0x2f4>)
    5034:	2f47      	cmp	r7, #71	; 0x47
    5036:	d800      	bhi.n	503a <_printf_float+0x96>
    5038:	4d98      	ldr	r5, [pc, #608]	; (529c <_printf_float+0x2f8>)
    503a:	2303      	movs	r3, #3
    503c:	2600      	movs	r6, #0
    503e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5040:	6123      	str	r3, [r4, #16]
    5042:	3301      	adds	r3, #1
    5044:	439a      	bics	r2, r3
    5046:	6022      	str	r2, [r4, #0]
    5048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    504a:	aa13      	add	r2, sp, #76	; 0x4c
    504c:	9300      	str	r3, [sp, #0]
    504e:	0021      	movs	r1, r4
    5050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5052:	9809      	ldr	r0, [sp, #36]	; 0x24
    5054:	f000 f9f2 	bl	543c <_printf_common>
    5058:	1c43      	adds	r3, r0, #1
    505a:	d000      	beq.n	505e <_printf_float+0xba>
    505c:	e09c      	b.n	5198 <_printf_float+0x1f4>
    505e:	2001      	movs	r0, #1
    5060:	4240      	negs	r0, r0
    5062:	b015      	add	sp, #84	; 0x54
    5064:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5066:	3307      	adds	r3, #7
    5068:	e7b6      	b.n	4fd8 <_printf_float+0x34>
    506a:	2380      	movs	r3, #128	; 0x80
    506c:	6862      	ldr	r2, [r4, #4]
    506e:	00db      	lsls	r3, r3, #3
    5070:	1c51      	adds	r1, r2, #1
    5072:	d145      	bne.n	5100 <_printf_float+0x15c>
    5074:	3207      	adds	r2, #7
    5076:	6062      	str	r2, [r4, #4]
    5078:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    507a:	2100      	movs	r1, #0
    507c:	4313      	orrs	r3, r2
    507e:	aa12      	add	r2, sp, #72	; 0x48
    5080:	9205      	str	r2, [sp, #20]
    5082:	aa11      	add	r2, sp, #68	; 0x44
    5084:	9203      	str	r2, [sp, #12]
    5086:	2223      	movs	r2, #35	; 0x23
    5088:	6023      	str	r3, [r4, #0]
    508a:	9106      	str	r1, [sp, #24]
    508c:	9301      	str	r3, [sp, #4]
    508e:	a908      	add	r1, sp, #32
    5090:	6863      	ldr	r3, [r4, #4]
    5092:	1852      	adds	r2, r2, r1
    5094:	9202      	str	r2, [sp, #8]
    5096:	9300      	str	r3, [sp, #0]
    5098:	0032      	movs	r2, r6
    509a:	002b      	movs	r3, r5
    509c:	9704      	str	r7, [sp, #16]
    509e:	9809      	ldr	r0, [sp, #36]	; 0x24
    50a0:	f7ff fee3 	bl	4e6a <__cvt>
    50a4:	2320      	movs	r3, #32
    50a6:	003a      	movs	r2, r7
    50a8:	0005      	movs	r5, r0
    50aa:	439a      	bics	r2, r3
    50ac:	2a47      	cmp	r2, #71	; 0x47
    50ae:	d107      	bne.n	50c0 <_printf_float+0x11c>
    50b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    50b2:	1cda      	adds	r2, r3, #3
    50b4:	db02      	blt.n	50bc <_printf_float+0x118>
    50b6:	6862      	ldr	r2, [r4, #4]
    50b8:	4293      	cmp	r3, r2
    50ba:	dd5b      	ble.n	5174 <_printf_float+0x1d0>
    50bc:	3f02      	subs	r7, #2
    50be:	b2ff      	uxtb	r7, r7
    50c0:	9911      	ldr	r1, [sp, #68]	; 0x44
    50c2:	2f65      	cmp	r7, #101	; 0x65
    50c4:	d83b      	bhi.n	513e <_printf_float+0x19a>
    50c6:	0020      	movs	r0, r4
    50c8:	3901      	subs	r1, #1
    50ca:	003a      	movs	r2, r7
    50cc:	3050      	adds	r0, #80	; 0x50
    50ce:	9111      	str	r1, [sp, #68]	; 0x44
    50d0:	f7ff ff2f 	bl	4f32 <__exponent>
    50d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    50d6:	0006      	movs	r6, r0
    50d8:	1883      	adds	r3, r0, r2
    50da:	6123      	str	r3, [r4, #16]
    50dc:	2a01      	cmp	r2, #1
    50de:	dc02      	bgt.n	50e6 <_printf_float+0x142>
    50e0:	6822      	ldr	r2, [r4, #0]
    50e2:	07d2      	lsls	r2, r2, #31
    50e4:	d501      	bpl.n	50ea <_printf_float+0x146>
    50e6:	3301      	adds	r3, #1
    50e8:	6123      	str	r3, [r4, #16]
    50ea:	2323      	movs	r3, #35	; 0x23
    50ec:	aa08      	add	r2, sp, #32
    50ee:	189b      	adds	r3, r3, r2
    50f0:	781b      	ldrb	r3, [r3, #0]
    50f2:	2b00      	cmp	r3, #0
    50f4:	d0a8      	beq.n	5048 <_printf_float+0xa4>
    50f6:	0023      	movs	r3, r4
    50f8:	222d      	movs	r2, #45	; 0x2d
    50fa:	3343      	adds	r3, #67	; 0x43
    50fc:	701a      	strb	r2, [r3, #0]
    50fe:	e7a3      	b.n	5048 <_printf_float+0xa4>
    5100:	2f67      	cmp	r7, #103	; 0x67
    5102:	d001      	beq.n	5108 <_printf_float+0x164>
    5104:	2f47      	cmp	r7, #71	; 0x47
    5106:	d1b7      	bne.n	5078 <_printf_float+0xd4>
    5108:	2a00      	cmp	r2, #0
    510a:	d016      	beq.n	513a <_printf_float+0x196>
    510c:	990c      	ldr	r1, [sp, #48]	; 0x30
    510e:	a808      	add	r0, sp, #32
    5110:	430b      	orrs	r3, r1
    5112:	2100      	movs	r1, #0
    5114:	9106      	str	r1, [sp, #24]
    5116:	a912      	add	r1, sp, #72	; 0x48
    5118:	9105      	str	r1, [sp, #20]
    511a:	a911      	add	r1, sp, #68	; 0x44
    511c:	9103      	str	r1, [sp, #12]
    511e:	2123      	movs	r1, #35	; 0x23
    5120:	1809      	adds	r1, r1, r0
    5122:	6023      	str	r3, [r4, #0]
    5124:	9301      	str	r3, [sp, #4]
    5126:	9200      	str	r2, [sp, #0]
    5128:	002b      	movs	r3, r5
    512a:	9704      	str	r7, [sp, #16]
    512c:	9102      	str	r1, [sp, #8]
    512e:	0032      	movs	r2, r6
    5130:	9809      	ldr	r0, [sp, #36]	; 0x24
    5132:	f7ff fe9a 	bl	4e6a <__cvt>
    5136:	0005      	movs	r5, r0
    5138:	e7ba      	b.n	50b0 <_printf_float+0x10c>
    513a:	2201      	movs	r2, #1
    513c:	e79b      	b.n	5076 <_printf_float+0xd2>
    513e:	2f66      	cmp	r7, #102	; 0x66
    5140:	d119      	bne.n	5176 <_printf_float+0x1d2>
    5142:	6863      	ldr	r3, [r4, #4]
    5144:	2900      	cmp	r1, #0
    5146:	dd0c      	ble.n	5162 <_printf_float+0x1be>
    5148:	6121      	str	r1, [r4, #16]
    514a:	2b00      	cmp	r3, #0
    514c:	d102      	bne.n	5154 <_printf_float+0x1b0>
    514e:	6822      	ldr	r2, [r4, #0]
    5150:	07d2      	lsls	r2, r2, #31
    5152:	d502      	bpl.n	515a <_printf_float+0x1b6>
    5154:	3301      	adds	r3, #1
    5156:	185b      	adds	r3, r3, r1
    5158:	6123      	str	r3, [r4, #16]
    515a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    515c:	2600      	movs	r6, #0
    515e:	65a3      	str	r3, [r4, #88]	; 0x58
    5160:	e7c3      	b.n	50ea <_printf_float+0x146>
    5162:	2b00      	cmp	r3, #0
    5164:	d103      	bne.n	516e <_printf_float+0x1ca>
    5166:	2201      	movs	r2, #1
    5168:	6821      	ldr	r1, [r4, #0]
    516a:	4211      	tst	r1, r2
    516c:	d000      	beq.n	5170 <_printf_float+0x1cc>
    516e:	1c9a      	adds	r2, r3, #2
    5170:	6122      	str	r2, [r4, #16]
    5172:	e7f2      	b.n	515a <_printf_float+0x1b6>
    5174:	2767      	movs	r7, #103	; 0x67
    5176:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5178:	9812      	ldr	r0, [sp, #72]	; 0x48
    517a:	4283      	cmp	r3, r0
    517c:	db05      	blt.n	518a <_printf_float+0x1e6>
    517e:	6822      	ldr	r2, [r4, #0]
    5180:	6123      	str	r3, [r4, #16]
    5182:	07d2      	lsls	r2, r2, #31
    5184:	d5e9      	bpl.n	515a <_printf_float+0x1b6>
    5186:	3301      	adds	r3, #1
    5188:	e7e6      	b.n	5158 <_printf_float+0x1b4>
    518a:	2201      	movs	r2, #1
    518c:	2b00      	cmp	r3, #0
    518e:	dc01      	bgt.n	5194 <_printf_float+0x1f0>
    5190:	1892      	adds	r2, r2, r2
    5192:	1ad2      	subs	r2, r2, r3
    5194:	1812      	adds	r2, r2, r0
    5196:	e7eb      	b.n	5170 <_printf_float+0x1cc>
    5198:	6822      	ldr	r2, [r4, #0]
    519a:	0553      	lsls	r3, r2, #21
    519c:	d408      	bmi.n	51b0 <_printf_float+0x20c>
    519e:	6923      	ldr	r3, [r4, #16]
    51a0:	002a      	movs	r2, r5
    51a2:	990a      	ldr	r1, [sp, #40]	; 0x28
    51a4:	9809      	ldr	r0, [sp, #36]	; 0x24
    51a6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    51a8:	47a8      	blx	r5
    51aa:	1c43      	adds	r3, r0, #1
    51ac:	d129      	bne.n	5202 <_printf_float+0x25e>
    51ae:	e756      	b.n	505e <_printf_float+0xba>
    51b0:	2f65      	cmp	r7, #101	; 0x65
    51b2:	d800      	bhi.n	51b6 <_printf_float+0x212>
    51b4:	e0dc      	b.n	5370 <_printf_float+0x3cc>
    51b6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    51b8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    51ba:	2200      	movs	r2, #0
    51bc:	2300      	movs	r3, #0
    51be:	f002 fced 	bl	7b9c <__aeabi_dcmpeq>
    51c2:	2800      	cmp	r0, #0
    51c4:	d035      	beq.n	5232 <_printf_float+0x28e>
    51c6:	2301      	movs	r3, #1
    51c8:	4a35      	ldr	r2, [pc, #212]	; (52a0 <_printf_float+0x2fc>)
    51ca:	990a      	ldr	r1, [sp, #40]	; 0x28
    51cc:	9809      	ldr	r0, [sp, #36]	; 0x24
    51ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    51d0:	47a8      	blx	r5
    51d2:	1c43      	adds	r3, r0, #1
    51d4:	d100      	bne.n	51d8 <_printf_float+0x234>
    51d6:	e742      	b.n	505e <_printf_float+0xba>
    51d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    51da:	9a12      	ldr	r2, [sp, #72]	; 0x48
    51dc:	4293      	cmp	r3, r2
    51de:	db02      	blt.n	51e6 <_printf_float+0x242>
    51e0:	6823      	ldr	r3, [r4, #0]
    51e2:	07db      	lsls	r3, r3, #31
    51e4:	d50d      	bpl.n	5202 <_printf_float+0x25e>
    51e6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    51e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    51ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    51ec:	990a      	ldr	r1, [sp, #40]	; 0x28
    51ee:	9809      	ldr	r0, [sp, #36]	; 0x24
    51f0:	47a8      	blx	r5
    51f2:	2500      	movs	r5, #0
    51f4:	1c43      	adds	r3, r0, #1
    51f6:	d100      	bne.n	51fa <_printf_float+0x256>
    51f8:	e731      	b.n	505e <_printf_float+0xba>
    51fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    51fc:	3b01      	subs	r3, #1
    51fe:	429d      	cmp	r5, r3
    5200:	db0b      	blt.n	521a <_printf_float+0x276>
    5202:	6823      	ldr	r3, [r4, #0]
    5204:	2500      	movs	r5, #0
    5206:	079b      	lsls	r3, r3, #30
    5208:	d500      	bpl.n	520c <_printf_float+0x268>
    520a:	e0fd      	b.n	5408 <_printf_float+0x464>
    520c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    520e:	68e0      	ldr	r0, [r4, #12]
    5210:	4298      	cmp	r0, r3
    5212:	db00      	blt.n	5216 <_printf_float+0x272>
    5214:	e725      	b.n	5062 <_printf_float+0xbe>
    5216:	0018      	movs	r0, r3
    5218:	e723      	b.n	5062 <_printf_float+0xbe>
    521a:	0022      	movs	r2, r4
    521c:	2301      	movs	r3, #1
    521e:	321a      	adds	r2, #26
    5220:	990a      	ldr	r1, [sp, #40]	; 0x28
    5222:	9809      	ldr	r0, [sp, #36]	; 0x24
    5224:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    5226:	47b0      	blx	r6
    5228:	1c43      	adds	r3, r0, #1
    522a:	d100      	bne.n	522e <_printf_float+0x28a>
    522c:	e717      	b.n	505e <_printf_float+0xba>
    522e:	3501      	adds	r5, #1
    5230:	e7e3      	b.n	51fa <_printf_float+0x256>
    5232:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5234:	2b00      	cmp	r3, #0
    5236:	dc35      	bgt.n	52a4 <_printf_float+0x300>
    5238:	2301      	movs	r3, #1
    523a:	4a19      	ldr	r2, [pc, #100]	; (52a0 <_printf_float+0x2fc>)
    523c:	990a      	ldr	r1, [sp, #40]	; 0x28
    523e:	9809      	ldr	r0, [sp, #36]	; 0x24
    5240:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    5242:	47b0      	blx	r6
    5244:	1c43      	adds	r3, r0, #1
    5246:	d100      	bne.n	524a <_printf_float+0x2a6>
    5248:	e709      	b.n	505e <_printf_float+0xba>
    524a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    524c:	2b00      	cmp	r3, #0
    524e:	d105      	bne.n	525c <_printf_float+0x2b8>
    5250:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5252:	2b00      	cmp	r3, #0
    5254:	d102      	bne.n	525c <_printf_float+0x2b8>
    5256:	6823      	ldr	r3, [r4, #0]
    5258:	07db      	lsls	r3, r3, #31
    525a:	d5d2      	bpl.n	5202 <_printf_float+0x25e>
    525c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    525e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5260:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5262:	990a      	ldr	r1, [sp, #40]	; 0x28
    5264:	9809      	ldr	r0, [sp, #36]	; 0x24
    5266:	47b0      	blx	r6
    5268:	2600      	movs	r6, #0
    526a:	1c43      	adds	r3, r0, #1
    526c:	d100      	bne.n	5270 <_printf_float+0x2cc>
    526e:	e6f6      	b.n	505e <_printf_float+0xba>
    5270:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5272:	425b      	negs	r3, r3
    5274:	429e      	cmp	r6, r3
    5276:	db01      	blt.n	527c <_printf_float+0x2d8>
    5278:	9b12      	ldr	r3, [sp, #72]	; 0x48
    527a:	e791      	b.n	51a0 <_printf_float+0x1fc>
    527c:	0022      	movs	r2, r4
    527e:	2301      	movs	r3, #1
    5280:	321a      	adds	r2, #26
    5282:	990a      	ldr	r1, [sp, #40]	; 0x28
    5284:	9809      	ldr	r0, [sp, #36]	; 0x24
    5286:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    5288:	47b8      	blx	r7
    528a:	1c43      	adds	r3, r0, #1
    528c:	d100      	bne.n	5290 <_printf_float+0x2ec>
    528e:	e6e6      	b.n	505e <_printf_float+0xba>
    5290:	3601      	adds	r6, #1
    5292:	e7ed      	b.n	5270 <_printf_float+0x2cc>
    5294:	7fefffff 	.word	0x7fefffff
    5298:	0000a50c 	.word	0x0000a50c
    529c:	0000a508 	.word	0x0000a508
    52a0:	0000a518 	.word	0x0000a518
    52a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
    52a6:	9e12      	ldr	r6, [sp, #72]	; 0x48
    52a8:	429e      	cmp	r6, r3
    52aa:	dd00      	ble.n	52ae <_printf_float+0x30a>
    52ac:	001e      	movs	r6, r3
    52ae:	2e00      	cmp	r6, #0
    52b0:	dc35      	bgt.n	531e <_printf_float+0x37a>
    52b2:	2300      	movs	r3, #0
    52b4:	930c      	str	r3, [sp, #48]	; 0x30
    52b6:	43f3      	mvns	r3, r6
    52b8:	17db      	asrs	r3, r3, #31
    52ba:	930f      	str	r3, [sp, #60]	; 0x3c
    52bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    52be:	6da7      	ldr	r7, [r4, #88]	; 0x58
    52c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    52c2:	4033      	ands	r3, r6
    52c4:	1afb      	subs	r3, r7, r3
    52c6:	429a      	cmp	r2, r3
    52c8:	db32      	blt.n	5330 <_printf_float+0x38c>
    52ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
    52cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    52ce:	4293      	cmp	r3, r2
    52d0:	db3c      	blt.n	534c <_printf_float+0x3a8>
    52d2:	6823      	ldr	r3, [r4, #0]
    52d4:	07db      	lsls	r3, r3, #31
    52d6:	d439      	bmi.n	534c <_printf_float+0x3a8>
    52d8:	9e12      	ldr	r6, [sp, #72]	; 0x48
    52da:	9a11      	ldr	r2, [sp, #68]	; 0x44
    52dc:	1bf3      	subs	r3, r6, r7
    52de:	1ab6      	subs	r6, r6, r2
    52e0:	429e      	cmp	r6, r3
    52e2:	dd00      	ble.n	52e6 <_printf_float+0x342>
    52e4:	001e      	movs	r6, r3
    52e6:	2e00      	cmp	r6, #0
    52e8:	dc39      	bgt.n	535e <_printf_float+0x3ba>
    52ea:	43f7      	mvns	r7, r6
    52ec:	2500      	movs	r5, #0
    52ee:	17fb      	asrs	r3, r7, #31
    52f0:	930c      	str	r3, [sp, #48]	; 0x30
    52f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    52f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    52f6:	990c      	ldr	r1, [sp, #48]	; 0x30
    52f8:	1a9b      	subs	r3, r3, r2
    52fa:	0032      	movs	r2, r6
    52fc:	400a      	ands	r2, r1
    52fe:	1a9b      	subs	r3, r3, r2
    5300:	429d      	cmp	r5, r3
    5302:	db00      	blt.n	5306 <_printf_float+0x362>
    5304:	e77d      	b.n	5202 <_printf_float+0x25e>
    5306:	0022      	movs	r2, r4
    5308:	2301      	movs	r3, #1
    530a:	321a      	adds	r2, #26
    530c:	990a      	ldr	r1, [sp, #40]	; 0x28
    530e:	9809      	ldr	r0, [sp, #36]	; 0x24
    5310:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    5312:	47b8      	blx	r7
    5314:	1c43      	adds	r3, r0, #1
    5316:	d100      	bne.n	531a <_printf_float+0x376>
    5318:	e6a1      	b.n	505e <_printf_float+0xba>
    531a:	3501      	adds	r5, #1
    531c:	e7e9      	b.n	52f2 <_printf_float+0x34e>
    531e:	0033      	movs	r3, r6
    5320:	002a      	movs	r2, r5
    5322:	990a      	ldr	r1, [sp, #40]	; 0x28
    5324:	9809      	ldr	r0, [sp, #36]	; 0x24
    5326:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    5328:	47b8      	blx	r7
    532a:	1c43      	adds	r3, r0, #1
    532c:	d1c1      	bne.n	52b2 <_printf_float+0x30e>
    532e:	e696      	b.n	505e <_printf_float+0xba>
    5330:	0022      	movs	r2, r4
    5332:	2301      	movs	r3, #1
    5334:	321a      	adds	r2, #26
    5336:	990a      	ldr	r1, [sp, #40]	; 0x28
    5338:	9809      	ldr	r0, [sp, #36]	; 0x24
    533a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    533c:	47b8      	blx	r7
    533e:	1c43      	adds	r3, r0, #1
    5340:	d100      	bne.n	5344 <_printf_float+0x3a0>
    5342:	e68c      	b.n	505e <_printf_float+0xba>
    5344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5346:	3301      	adds	r3, #1
    5348:	930c      	str	r3, [sp, #48]	; 0x30
    534a:	e7b7      	b.n	52bc <_printf_float+0x318>
    534c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    534e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5350:	990a      	ldr	r1, [sp, #40]	; 0x28
    5352:	9809      	ldr	r0, [sp, #36]	; 0x24
    5354:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    5356:	47b0      	blx	r6
    5358:	1c43      	adds	r3, r0, #1
    535a:	d1bd      	bne.n	52d8 <_printf_float+0x334>
    535c:	e67f      	b.n	505e <_printf_float+0xba>
    535e:	19ea      	adds	r2, r5, r7
    5360:	0033      	movs	r3, r6
    5362:	990a      	ldr	r1, [sp, #40]	; 0x28
    5364:	9809      	ldr	r0, [sp, #36]	; 0x24
    5366:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    5368:	47a8      	blx	r5
    536a:	1c43      	adds	r3, r0, #1
    536c:	d1bd      	bne.n	52ea <_printf_float+0x346>
    536e:	e676      	b.n	505e <_printf_float+0xba>
    5370:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5372:	2b01      	cmp	r3, #1
    5374:	dc02      	bgt.n	537c <_printf_float+0x3d8>
    5376:	2301      	movs	r3, #1
    5378:	421a      	tst	r2, r3
    537a:	d038      	beq.n	53ee <_printf_float+0x44a>
    537c:	2301      	movs	r3, #1
    537e:	002a      	movs	r2, r5
    5380:	990a      	ldr	r1, [sp, #40]	; 0x28
    5382:	9809      	ldr	r0, [sp, #36]	; 0x24
    5384:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    5386:	47b8      	blx	r7
    5388:	1c43      	adds	r3, r0, #1
    538a:	d100      	bne.n	538e <_printf_float+0x3ea>
    538c:	e667      	b.n	505e <_printf_float+0xba>
    538e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5390:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5392:	990a      	ldr	r1, [sp, #40]	; 0x28
    5394:	9809      	ldr	r0, [sp, #36]	; 0x24
    5396:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    5398:	47b8      	blx	r7
    539a:	1c43      	adds	r3, r0, #1
    539c:	d100      	bne.n	53a0 <_printf_float+0x3fc>
    539e:	e65e      	b.n	505e <_printf_float+0xba>
    53a0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    53a2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    53a4:	2200      	movs	r2, #0
    53a6:	2300      	movs	r3, #0
    53a8:	f002 fbf8 	bl	7b9c <__aeabi_dcmpeq>
    53ac:	2800      	cmp	r0, #0
    53ae:	d008      	beq.n	53c2 <_printf_float+0x41e>
    53b0:	2500      	movs	r5, #0
    53b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    53b4:	3b01      	subs	r3, #1
    53b6:	429d      	cmp	r5, r3
    53b8:	db0d      	blt.n	53d6 <_printf_float+0x432>
    53ba:	0022      	movs	r2, r4
    53bc:	0033      	movs	r3, r6
    53be:	3250      	adds	r2, #80	; 0x50
    53c0:	e6ef      	b.n	51a2 <_printf_float+0x1fe>
    53c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    53c4:	1c6a      	adds	r2, r5, #1
    53c6:	3b01      	subs	r3, #1
    53c8:	990a      	ldr	r1, [sp, #40]	; 0x28
    53ca:	9809      	ldr	r0, [sp, #36]	; 0x24
    53cc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    53ce:	47a8      	blx	r5
    53d0:	1c43      	adds	r3, r0, #1
    53d2:	d1f2      	bne.n	53ba <_printf_float+0x416>
    53d4:	e643      	b.n	505e <_printf_float+0xba>
    53d6:	0022      	movs	r2, r4
    53d8:	2301      	movs	r3, #1
    53da:	321a      	adds	r2, #26
    53dc:	990a      	ldr	r1, [sp, #40]	; 0x28
    53de:	9809      	ldr	r0, [sp, #36]	; 0x24
    53e0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    53e2:	47b8      	blx	r7
    53e4:	1c43      	adds	r3, r0, #1
    53e6:	d100      	bne.n	53ea <_printf_float+0x446>
    53e8:	e639      	b.n	505e <_printf_float+0xba>
    53ea:	3501      	adds	r5, #1
    53ec:	e7e1      	b.n	53b2 <_printf_float+0x40e>
    53ee:	002a      	movs	r2, r5
    53f0:	e7ea      	b.n	53c8 <_printf_float+0x424>
    53f2:	0022      	movs	r2, r4
    53f4:	2301      	movs	r3, #1
    53f6:	3219      	adds	r2, #25
    53f8:	990a      	ldr	r1, [sp, #40]	; 0x28
    53fa:	9809      	ldr	r0, [sp, #36]	; 0x24
    53fc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    53fe:	47b0      	blx	r6
    5400:	1c43      	adds	r3, r0, #1
    5402:	d100      	bne.n	5406 <_printf_float+0x462>
    5404:	e62b      	b.n	505e <_printf_float+0xba>
    5406:	3501      	adds	r5, #1
    5408:	68e3      	ldr	r3, [r4, #12]
    540a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    540c:	1a9b      	subs	r3, r3, r2
    540e:	429d      	cmp	r5, r3
    5410:	dbef      	blt.n	53f2 <_printf_float+0x44e>
    5412:	e6fb      	b.n	520c <_printf_float+0x268>
    5414:	0032      	movs	r2, r6
    5416:	002b      	movs	r3, r5
    5418:	0030      	movs	r0, r6
    541a:	0029      	movs	r1, r5
    541c:	f004 fe1c 	bl	a058 <__aeabi_dcmpun>
    5420:	2800      	cmp	r0, #0
    5422:	d100      	bne.n	5426 <_printf_float+0x482>
    5424:	e621      	b.n	506a <_printf_float+0xc6>
    5426:	4d03      	ldr	r5, [pc, #12]	; (5434 <_printf_float+0x490>)
    5428:	2f47      	cmp	r7, #71	; 0x47
    542a:	d900      	bls.n	542e <_printf_float+0x48a>
    542c:	e605      	b.n	503a <_printf_float+0x96>
    542e:	4d02      	ldr	r5, [pc, #8]	; (5438 <_printf_float+0x494>)
    5430:	e603      	b.n	503a <_printf_float+0x96>
    5432:	46c0      	nop			; (mov r8, r8)
    5434:	0000a514 	.word	0x0000a514
    5438:	0000a510 	.word	0x0000a510

0000543c <_printf_common>:
    543c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    543e:	0015      	movs	r5, r2
    5440:	9301      	str	r3, [sp, #4]
    5442:	688a      	ldr	r2, [r1, #8]
    5444:	690b      	ldr	r3, [r1, #16]
    5446:	9000      	str	r0, [sp, #0]
    5448:	000c      	movs	r4, r1
    544a:	4293      	cmp	r3, r2
    544c:	da00      	bge.n	5450 <_printf_common+0x14>
    544e:	0013      	movs	r3, r2
    5450:	0022      	movs	r2, r4
    5452:	602b      	str	r3, [r5, #0]
    5454:	3243      	adds	r2, #67	; 0x43
    5456:	7812      	ldrb	r2, [r2, #0]
    5458:	2a00      	cmp	r2, #0
    545a:	d001      	beq.n	5460 <_printf_common+0x24>
    545c:	3301      	adds	r3, #1
    545e:	602b      	str	r3, [r5, #0]
    5460:	6823      	ldr	r3, [r4, #0]
    5462:	069b      	lsls	r3, r3, #26
    5464:	d502      	bpl.n	546c <_printf_common+0x30>
    5466:	682b      	ldr	r3, [r5, #0]
    5468:	3302      	adds	r3, #2
    546a:	602b      	str	r3, [r5, #0]
    546c:	2706      	movs	r7, #6
    546e:	6823      	ldr	r3, [r4, #0]
    5470:	401f      	ands	r7, r3
    5472:	d027      	beq.n	54c4 <_printf_common+0x88>
    5474:	0023      	movs	r3, r4
    5476:	3343      	adds	r3, #67	; 0x43
    5478:	781b      	ldrb	r3, [r3, #0]
    547a:	1e5a      	subs	r2, r3, #1
    547c:	4193      	sbcs	r3, r2
    547e:	6822      	ldr	r2, [r4, #0]
    5480:	0692      	lsls	r2, r2, #26
    5482:	d430      	bmi.n	54e6 <_printf_common+0xaa>
    5484:	0022      	movs	r2, r4
    5486:	9901      	ldr	r1, [sp, #4]
    5488:	3243      	adds	r2, #67	; 0x43
    548a:	9800      	ldr	r0, [sp, #0]
    548c:	9e08      	ldr	r6, [sp, #32]
    548e:	47b0      	blx	r6
    5490:	1c43      	adds	r3, r0, #1
    5492:	d025      	beq.n	54e0 <_printf_common+0xa4>
    5494:	2306      	movs	r3, #6
    5496:	6820      	ldr	r0, [r4, #0]
    5498:	682a      	ldr	r2, [r5, #0]
    549a:	68e1      	ldr	r1, [r4, #12]
    549c:	4003      	ands	r3, r0
    549e:	2500      	movs	r5, #0
    54a0:	2b04      	cmp	r3, #4
    54a2:	d103      	bne.n	54ac <_printf_common+0x70>
    54a4:	1a8d      	subs	r5, r1, r2
    54a6:	43eb      	mvns	r3, r5
    54a8:	17db      	asrs	r3, r3, #31
    54aa:	401d      	ands	r5, r3
    54ac:	68a3      	ldr	r3, [r4, #8]
    54ae:	6922      	ldr	r2, [r4, #16]
    54b0:	4293      	cmp	r3, r2
    54b2:	dd01      	ble.n	54b8 <_printf_common+0x7c>
    54b4:	1a9b      	subs	r3, r3, r2
    54b6:	18ed      	adds	r5, r5, r3
    54b8:	2700      	movs	r7, #0
    54ba:	42bd      	cmp	r5, r7
    54bc:	d120      	bne.n	5500 <_printf_common+0xc4>
    54be:	2000      	movs	r0, #0
    54c0:	e010      	b.n	54e4 <_printf_common+0xa8>
    54c2:	3701      	adds	r7, #1
    54c4:	68e3      	ldr	r3, [r4, #12]
    54c6:	682a      	ldr	r2, [r5, #0]
    54c8:	1a9b      	subs	r3, r3, r2
    54ca:	429f      	cmp	r7, r3
    54cc:	dad2      	bge.n	5474 <_printf_common+0x38>
    54ce:	0022      	movs	r2, r4
    54d0:	2301      	movs	r3, #1
    54d2:	3219      	adds	r2, #25
    54d4:	9901      	ldr	r1, [sp, #4]
    54d6:	9800      	ldr	r0, [sp, #0]
    54d8:	9e08      	ldr	r6, [sp, #32]
    54da:	47b0      	blx	r6
    54dc:	1c43      	adds	r3, r0, #1
    54de:	d1f0      	bne.n	54c2 <_printf_common+0x86>
    54e0:	2001      	movs	r0, #1
    54e2:	4240      	negs	r0, r0
    54e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    54e6:	2030      	movs	r0, #48	; 0x30
    54e8:	18e1      	adds	r1, r4, r3
    54ea:	3143      	adds	r1, #67	; 0x43
    54ec:	7008      	strb	r0, [r1, #0]
    54ee:	0021      	movs	r1, r4
    54f0:	1c5a      	adds	r2, r3, #1
    54f2:	3145      	adds	r1, #69	; 0x45
    54f4:	7809      	ldrb	r1, [r1, #0]
    54f6:	18a2      	adds	r2, r4, r2
    54f8:	3243      	adds	r2, #67	; 0x43
    54fa:	3302      	adds	r3, #2
    54fc:	7011      	strb	r1, [r2, #0]
    54fe:	e7c1      	b.n	5484 <_printf_common+0x48>
    5500:	0022      	movs	r2, r4
    5502:	2301      	movs	r3, #1
    5504:	321a      	adds	r2, #26
    5506:	9901      	ldr	r1, [sp, #4]
    5508:	9800      	ldr	r0, [sp, #0]
    550a:	9e08      	ldr	r6, [sp, #32]
    550c:	47b0      	blx	r6
    550e:	1c43      	adds	r3, r0, #1
    5510:	d0e6      	beq.n	54e0 <_printf_common+0xa4>
    5512:	3701      	adds	r7, #1
    5514:	e7d1      	b.n	54ba <_printf_common+0x7e>
	...

00005518 <_printf_i>:
    5518:	b5f0      	push	{r4, r5, r6, r7, lr}
    551a:	b08b      	sub	sp, #44	; 0x2c
    551c:	9206      	str	r2, [sp, #24]
    551e:	000a      	movs	r2, r1
    5520:	3243      	adds	r2, #67	; 0x43
    5522:	9307      	str	r3, [sp, #28]
    5524:	9005      	str	r0, [sp, #20]
    5526:	9204      	str	r2, [sp, #16]
    5528:	7e0a      	ldrb	r2, [r1, #24]
    552a:	000c      	movs	r4, r1
    552c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    552e:	2a6e      	cmp	r2, #110	; 0x6e
    5530:	d100      	bne.n	5534 <_printf_i+0x1c>
    5532:	e08f      	b.n	5654 <_printf_i+0x13c>
    5534:	d817      	bhi.n	5566 <_printf_i+0x4e>
    5536:	2a63      	cmp	r2, #99	; 0x63
    5538:	d02c      	beq.n	5594 <_printf_i+0x7c>
    553a:	d808      	bhi.n	554e <_printf_i+0x36>
    553c:	2a00      	cmp	r2, #0
    553e:	d100      	bne.n	5542 <_printf_i+0x2a>
    5540:	e099      	b.n	5676 <_printf_i+0x15e>
    5542:	2a58      	cmp	r2, #88	; 0x58
    5544:	d054      	beq.n	55f0 <_printf_i+0xd8>
    5546:	0026      	movs	r6, r4
    5548:	3642      	adds	r6, #66	; 0x42
    554a:	7032      	strb	r2, [r6, #0]
    554c:	e029      	b.n	55a2 <_printf_i+0x8a>
    554e:	2a64      	cmp	r2, #100	; 0x64
    5550:	d001      	beq.n	5556 <_printf_i+0x3e>
    5552:	2a69      	cmp	r2, #105	; 0x69
    5554:	d1f7      	bne.n	5546 <_printf_i+0x2e>
    5556:	6821      	ldr	r1, [r4, #0]
    5558:	681a      	ldr	r2, [r3, #0]
    555a:	0608      	lsls	r0, r1, #24
    555c:	d523      	bpl.n	55a6 <_printf_i+0x8e>
    555e:	1d11      	adds	r1, r2, #4
    5560:	6019      	str	r1, [r3, #0]
    5562:	6815      	ldr	r5, [r2, #0]
    5564:	e025      	b.n	55b2 <_printf_i+0x9a>
    5566:	2a73      	cmp	r2, #115	; 0x73
    5568:	d100      	bne.n	556c <_printf_i+0x54>
    556a:	e088      	b.n	567e <_printf_i+0x166>
    556c:	d808      	bhi.n	5580 <_printf_i+0x68>
    556e:	2a6f      	cmp	r2, #111	; 0x6f
    5570:	d029      	beq.n	55c6 <_printf_i+0xae>
    5572:	2a70      	cmp	r2, #112	; 0x70
    5574:	d1e7      	bne.n	5546 <_printf_i+0x2e>
    5576:	2220      	movs	r2, #32
    5578:	6809      	ldr	r1, [r1, #0]
    557a:	430a      	orrs	r2, r1
    557c:	6022      	str	r2, [r4, #0]
    557e:	e003      	b.n	5588 <_printf_i+0x70>
    5580:	2a75      	cmp	r2, #117	; 0x75
    5582:	d020      	beq.n	55c6 <_printf_i+0xae>
    5584:	2a78      	cmp	r2, #120	; 0x78
    5586:	d1de      	bne.n	5546 <_printf_i+0x2e>
    5588:	0022      	movs	r2, r4
    558a:	2178      	movs	r1, #120	; 0x78
    558c:	3245      	adds	r2, #69	; 0x45
    558e:	7011      	strb	r1, [r2, #0]
    5590:	4a6c      	ldr	r2, [pc, #432]	; (5744 <_printf_i+0x22c>)
    5592:	e030      	b.n	55f6 <_printf_i+0xde>
    5594:	000e      	movs	r6, r1
    5596:	681a      	ldr	r2, [r3, #0]
    5598:	3642      	adds	r6, #66	; 0x42
    559a:	1d11      	adds	r1, r2, #4
    559c:	6019      	str	r1, [r3, #0]
    559e:	6813      	ldr	r3, [r2, #0]
    55a0:	7033      	strb	r3, [r6, #0]
    55a2:	2301      	movs	r3, #1
    55a4:	e079      	b.n	569a <_printf_i+0x182>
    55a6:	0649      	lsls	r1, r1, #25
    55a8:	d5d9      	bpl.n	555e <_printf_i+0x46>
    55aa:	1d11      	adds	r1, r2, #4
    55ac:	6019      	str	r1, [r3, #0]
    55ae:	2300      	movs	r3, #0
    55b0:	5ed5      	ldrsh	r5, [r2, r3]
    55b2:	2d00      	cmp	r5, #0
    55b4:	da03      	bge.n	55be <_printf_i+0xa6>
    55b6:	232d      	movs	r3, #45	; 0x2d
    55b8:	9a04      	ldr	r2, [sp, #16]
    55ba:	426d      	negs	r5, r5
    55bc:	7013      	strb	r3, [r2, #0]
    55be:	4b62      	ldr	r3, [pc, #392]	; (5748 <_printf_i+0x230>)
    55c0:	270a      	movs	r7, #10
    55c2:	9303      	str	r3, [sp, #12]
    55c4:	e02f      	b.n	5626 <_printf_i+0x10e>
    55c6:	6820      	ldr	r0, [r4, #0]
    55c8:	6819      	ldr	r1, [r3, #0]
    55ca:	0605      	lsls	r5, r0, #24
    55cc:	d503      	bpl.n	55d6 <_printf_i+0xbe>
    55ce:	1d08      	adds	r0, r1, #4
    55d0:	6018      	str	r0, [r3, #0]
    55d2:	680d      	ldr	r5, [r1, #0]
    55d4:	e005      	b.n	55e2 <_printf_i+0xca>
    55d6:	0640      	lsls	r0, r0, #25
    55d8:	d5f9      	bpl.n	55ce <_printf_i+0xb6>
    55da:	680d      	ldr	r5, [r1, #0]
    55dc:	1d08      	adds	r0, r1, #4
    55de:	6018      	str	r0, [r3, #0]
    55e0:	b2ad      	uxth	r5, r5
    55e2:	4b59      	ldr	r3, [pc, #356]	; (5748 <_printf_i+0x230>)
    55e4:	2708      	movs	r7, #8
    55e6:	9303      	str	r3, [sp, #12]
    55e8:	2a6f      	cmp	r2, #111	; 0x6f
    55ea:	d018      	beq.n	561e <_printf_i+0x106>
    55ec:	270a      	movs	r7, #10
    55ee:	e016      	b.n	561e <_printf_i+0x106>
    55f0:	3145      	adds	r1, #69	; 0x45
    55f2:	700a      	strb	r2, [r1, #0]
    55f4:	4a54      	ldr	r2, [pc, #336]	; (5748 <_printf_i+0x230>)
    55f6:	9203      	str	r2, [sp, #12]
    55f8:	681a      	ldr	r2, [r3, #0]
    55fa:	6821      	ldr	r1, [r4, #0]
    55fc:	1d10      	adds	r0, r2, #4
    55fe:	6018      	str	r0, [r3, #0]
    5600:	6815      	ldr	r5, [r2, #0]
    5602:	0608      	lsls	r0, r1, #24
    5604:	d522      	bpl.n	564c <_printf_i+0x134>
    5606:	07cb      	lsls	r3, r1, #31
    5608:	d502      	bpl.n	5610 <_printf_i+0xf8>
    560a:	2320      	movs	r3, #32
    560c:	4319      	orrs	r1, r3
    560e:	6021      	str	r1, [r4, #0]
    5610:	2710      	movs	r7, #16
    5612:	2d00      	cmp	r5, #0
    5614:	d103      	bne.n	561e <_printf_i+0x106>
    5616:	2320      	movs	r3, #32
    5618:	6822      	ldr	r2, [r4, #0]
    561a:	439a      	bics	r2, r3
    561c:	6022      	str	r2, [r4, #0]
    561e:	0023      	movs	r3, r4
    5620:	2200      	movs	r2, #0
    5622:	3343      	adds	r3, #67	; 0x43
    5624:	701a      	strb	r2, [r3, #0]
    5626:	6863      	ldr	r3, [r4, #4]
    5628:	60a3      	str	r3, [r4, #8]
    562a:	2b00      	cmp	r3, #0
    562c:	db5c      	blt.n	56e8 <_printf_i+0x1d0>
    562e:	2204      	movs	r2, #4
    5630:	6821      	ldr	r1, [r4, #0]
    5632:	4391      	bics	r1, r2
    5634:	6021      	str	r1, [r4, #0]
    5636:	2d00      	cmp	r5, #0
    5638:	d158      	bne.n	56ec <_printf_i+0x1d4>
    563a:	9e04      	ldr	r6, [sp, #16]
    563c:	2b00      	cmp	r3, #0
    563e:	d064      	beq.n	570a <_printf_i+0x1f2>
    5640:	0026      	movs	r6, r4
    5642:	9b03      	ldr	r3, [sp, #12]
    5644:	3642      	adds	r6, #66	; 0x42
    5646:	781b      	ldrb	r3, [r3, #0]
    5648:	7033      	strb	r3, [r6, #0]
    564a:	e05e      	b.n	570a <_printf_i+0x1f2>
    564c:	0648      	lsls	r0, r1, #25
    564e:	d5da      	bpl.n	5606 <_printf_i+0xee>
    5650:	b2ad      	uxth	r5, r5
    5652:	e7d8      	b.n	5606 <_printf_i+0xee>
    5654:	6809      	ldr	r1, [r1, #0]
    5656:	681a      	ldr	r2, [r3, #0]
    5658:	0608      	lsls	r0, r1, #24
    565a:	d505      	bpl.n	5668 <_printf_i+0x150>
    565c:	1d11      	adds	r1, r2, #4
    565e:	6019      	str	r1, [r3, #0]
    5660:	6813      	ldr	r3, [r2, #0]
    5662:	6962      	ldr	r2, [r4, #20]
    5664:	601a      	str	r2, [r3, #0]
    5666:	e006      	b.n	5676 <_printf_i+0x15e>
    5668:	0649      	lsls	r1, r1, #25
    566a:	d5f7      	bpl.n	565c <_printf_i+0x144>
    566c:	1d11      	adds	r1, r2, #4
    566e:	6019      	str	r1, [r3, #0]
    5670:	6813      	ldr	r3, [r2, #0]
    5672:	8aa2      	ldrh	r2, [r4, #20]
    5674:	801a      	strh	r2, [r3, #0]
    5676:	2300      	movs	r3, #0
    5678:	9e04      	ldr	r6, [sp, #16]
    567a:	6123      	str	r3, [r4, #16]
    567c:	e054      	b.n	5728 <_printf_i+0x210>
    567e:	681a      	ldr	r2, [r3, #0]
    5680:	1d11      	adds	r1, r2, #4
    5682:	6019      	str	r1, [r3, #0]
    5684:	6816      	ldr	r6, [r2, #0]
    5686:	2100      	movs	r1, #0
    5688:	6862      	ldr	r2, [r4, #4]
    568a:	0030      	movs	r0, r6
    568c:	f001 fb1e 	bl	6ccc <memchr>
    5690:	2800      	cmp	r0, #0
    5692:	d001      	beq.n	5698 <_printf_i+0x180>
    5694:	1b80      	subs	r0, r0, r6
    5696:	6060      	str	r0, [r4, #4]
    5698:	6863      	ldr	r3, [r4, #4]
    569a:	6123      	str	r3, [r4, #16]
    569c:	2300      	movs	r3, #0
    569e:	9a04      	ldr	r2, [sp, #16]
    56a0:	7013      	strb	r3, [r2, #0]
    56a2:	e041      	b.n	5728 <_printf_i+0x210>
    56a4:	6923      	ldr	r3, [r4, #16]
    56a6:	0032      	movs	r2, r6
    56a8:	9906      	ldr	r1, [sp, #24]
    56aa:	9805      	ldr	r0, [sp, #20]
    56ac:	9d07      	ldr	r5, [sp, #28]
    56ae:	47a8      	blx	r5
    56b0:	1c43      	adds	r3, r0, #1
    56b2:	d043      	beq.n	573c <_printf_i+0x224>
    56b4:	6823      	ldr	r3, [r4, #0]
    56b6:	2500      	movs	r5, #0
    56b8:	079b      	lsls	r3, r3, #30
    56ba:	d40f      	bmi.n	56dc <_printf_i+0x1c4>
    56bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    56be:	68e0      	ldr	r0, [r4, #12]
    56c0:	4298      	cmp	r0, r3
    56c2:	da3d      	bge.n	5740 <_printf_i+0x228>
    56c4:	0018      	movs	r0, r3
    56c6:	e03b      	b.n	5740 <_printf_i+0x228>
    56c8:	0022      	movs	r2, r4
    56ca:	2301      	movs	r3, #1
    56cc:	3219      	adds	r2, #25
    56ce:	9906      	ldr	r1, [sp, #24]
    56d0:	9805      	ldr	r0, [sp, #20]
    56d2:	9e07      	ldr	r6, [sp, #28]
    56d4:	47b0      	blx	r6
    56d6:	1c43      	adds	r3, r0, #1
    56d8:	d030      	beq.n	573c <_printf_i+0x224>
    56da:	3501      	adds	r5, #1
    56dc:	68e3      	ldr	r3, [r4, #12]
    56de:	9a09      	ldr	r2, [sp, #36]	; 0x24
    56e0:	1a9b      	subs	r3, r3, r2
    56e2:	429d      	cmp	r5, r3
    56e4:	dbf0      	blt.n	56c8 <_printf_i+0x1b0>
    56e6:	e7e9      	b.n	56bc <_printf_i+0x1a4>
    56e8:	2d00      	cmp	r5, #0
    56ea:	d0a9      	beq.n	5640 <_printf_i+0x128>
    56ec:	9e04      	ldr	r6, [sp, #16]
    56ee:	0028      	movs	r0, r5
    56f0:	0039      	movs	r1, r7
    56f2:	f002 f953 	bl	799c <__aeabi_uidivmod>
    56f6:	9b03      	ldr	r3, [sp, #12]
    56f8:	3e01      	subs	r6, #1
    56fa:	5c5b      	ldrb	r3, [r3, r1]
    56fc:	0028      	movs	r0, r5
    56fe:	7033      	strb	r3, [r6, #0]
    5700:	0039      	movs	r1, r7
    5702:	f002 f8c5 	bl	7890 <__udivsi3>
    5706:	1e05      	subs	r5, r0, #0
    5708:	d1f1      	bne.n	56ee <_printf_i+0x1d6>
    570a:	2f08      	cmp	r7, #8
    570c:	d109      	bne.n	5722 <_printf_i+0x20a>
    570e:	6823      	ldr	r3, [r4, #0]
    5710:	07db      	lsls	r3, r3, #31
    5712:	d506      	bpl.n	5722 <_printf_i+0x20a>
    5714:	6863      	ldr	r3, [r4, #4]
    5716:	6922      	ldr	r2, [r4, #16]
    5718:	4293      	cmp	r3, r2
    571a:	dc02      	bgt.n	5722 <_printf_i+0x20a>
    571c:	2330      	movs	r3, #48	; 0x30
    571e:	3e01      	subs	r6, #1
    5720:	7033      	strb	r3, [r6, #0]
    5722:	9b04      	ldr	r3, [sp, #16]
    5724:	1b9b      	subs	r3, r3, r6
    5726:	6123      	str	r3, [r4, #16]
    5728:	9b07      	ldr	r3, [sp, #28]
    572a:	aa09      	add	r2, sp, #36	; 0x24
    572c:	9300      	str	r3, [sp, #0]
    572e:	0021      	movs	r1, r4
    5730:	9b06      	ldr	r3, [sp, #24]
    5732:	9805      	ldr	r0, [sp, #20]
    5734:	f7ff fe82 	bl	543c <_printf_common>
    5738:	1c43      	adds	r3, r0, #1
    573a:	d1b3      	bne.n	56a4 <_printf_i+0x18c>
    573c:	2001      	movs	r0, #1
    573e:	4240      	negs	r0, r0
    5740:	b00b      	add	sp, #44	; 0x2c
    5742:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5744:	0000a52b 	.word	0x0000a52b
    5748:	0000a51a 	.word	0x0000a51a

0000574c <iprintf>:
    574c:	b40f      	push	{r0, r1, r2, r3}
    574e:	4b0b      	ldr	r3, [pc, #44]	; (577c <iprintf+0x30>)
    5750:	b513      	push	{r0, r1, r4, lr}
    5752:	681c      	ldr	r4, [r3, #0]
    5754:	2c00      	cmp	r4, #0
    5756:	d005      	beq.n	5764 <iprintf+0x18>
    5758:	69a3      	ldr	r3, [r4, #24]
    575a:	2b00      	cmp	r3, #0
    575c:	d102      	bne.n	5764 <iprintf+0x18>
    575e:	0020      	movs	r0, r4
    5760:	f001 f9a2 	bl	6aa8 <__sinit>
    5764:	ab05      	add	r3, sp, #20
    5766:	9a04      	ldr	r2, [sp, #16]
    5768:	68a1      	ldr	r1, [r4, #8]
    576a:	0020      	movs	r0, r4
    576c:	9301      	str	r3, [sp, #4]
    576e:	f001 fe79 	bl	7464 <_vfiprintf_r>
    5772:	bc16      	pop	{r1, r2, r4}
    5774:	bc08      	pop	{r3}
    5776:	b004      	add	sp, #16
    5778:	4718      	bx	r3
    577a:	46c0      	nop			; (mov r8, r8)
    577c:	2000000c 	.word	0x2000000c

00005780 <_puts_r>:
    5780:	b570      	push	{r4, r5, r6, lr}
    5782:	0005      	movs	r5, r0
    5784:	000e      	movs	r6, r1
    5786:	2800      	cmp	r0, #0
    5788:	d004      	beq.n	5794 <_puts_r+0x14>
    578a:	6983      	ldr	r3, [r0, #24]
    578c:	2b00      	cmp	r3, #0
    578e:	d101      	bne.n	5794 <_puts_r+0x14>
    5790:	f001 f98a 	bl	6aa8 <__sinit>
    5794:	69ab      	ldr	r3, [r5, #24]
    5796:	68ac      	ldr	r4, [r5, #8]
    5798:	2b00      	cmp	r3, #0
    579a:	d102      	bne.n	57a2 <_puts_r+0x22>
    579c:	0028      	movs	r0, r5
    579e:	f001 f983 	bl	6aa8 <__sinit>
    57a2:	4b24      	ldr	r3, [pc, #144]	; (5834 <_puts_r+0xb4>)
    57a4:	429c      	cmp	r4, r3
    57a6:	d10f      	bne.n	57c8 <_puts_r+0x48>
    57a8:	686c      	ldr	r4, [r5, #4]
    57aa:	89a3      	ldrh	r3, [r4, #12]
    57ac:	071b      	lsls	r3, r3, #28
    57ae:	d502      	bpl.n	57b6 <_puts_r+0x36>
    57b0:	6923      	ldr	r3, [r4, #16]
    57b2:	2b00      	cmp	r3, #0
    57b4:	d120      	bne.n	57f8 <_puts_r+0x78>
    57b6:	0021      	movs	r1, r4
    57b8:	0028      	movs	r0, r5
    57ba:	f000 f99b 	bl	5af4 <__swsetup_r>
    57be:	2800      	cmp	r0, #0
    57c0:	d01a      	beq.n	57f8 <_puts_r+0x78>
    57c2:	2001      	movs	r0, #1
    57c4:	4240      	negs	r0, r0
    57c6:	bd70      	pop	{r4, r5, r6, pc}
    57c8:	4b1b      	ldr	r3, [pc, #108]	; (5838 <_puts_r+0xb8>)
    57ca:	429c      	cmp	r4, r3
    57cc:	d101      	bne.n	57d2 <_puts_r+0x52>
    57ce:	68ac      	ldr	r4, [r5, #8]
    57d0:	e7eb      	b.n	57aa <_puts_r+0x2a>
    57d2:	4b1a      	ldr	r3, [pc, #104]	; (583c <_puts_r+0xbc>)
    57d4:	429c      	cmp	r4, r3
    57d6:	d1e8      	bne.n	57aa <_puts_r+0x2a>
    57d8:	68ec      	ldr	r4, [r5, #12]
    57da:	e7e6      	b.n	57aa <_puts_r+0x2a>
    57dc:	3b01      	subs	r3, #1
    57de:	3601      	adds	r6, #1
    57e0:	60a3      	str	r3, [r4, #8]
    57e2:	2b00      	cmp	r3, #0
    57e4:	da04      	bge.n	57f0 <_puts_r+0x70>
    57e6:	69a2      	ldr	r2, [r4, #24]
    57e8:	4293      	cmp	r3, r2
    57ea:	db16      	blt.n	581a <_puts_r+0x9a>
    57ec:	290a      	cmp	r1, #10
    57ee:	d014      	beq.n	581a <_puts_r+0x9a>
    57f0:	6823      	ldr	r3, [r4, #0]
    57f2:	1c5a      	adds	r2, r3, #1
    57f4:	6022      	str	r2, [r4, #0]
    57f6:	7019      	strb	r1, [r3, #0]
    57f8:	7831      	ldrb	r1, [r6, #0]
    57fa:	68a3      	ldr	r3, [r4, #8]
    57fc:	2900      	cmp	r1, #0
    57fe:	d1ed      	bne.n	57dc <_puts_r+0x5c>
    5800:	3b01      	subs	r3, #1
    5802:	60a3      	str	r3, [r4, #8]
    5804:	2b00      	cmp	r3, #0
    5806:	da0f      	bge.n	5828 <_puts_r+0xa8>
    5808:	0022      	movs	r2, r4
    580a:	310a      	adds	r1, #10
    580c:	0028      	movs	r0, r5
    580e:	f000 f91b 	bl	5a48 <__swbuf_r>
    5812:	1c43      	adds	r3, r0, #1
    5814:	d0d5      	beq.n	57c2 <_puts_r+0x42>
    5816:	200a      	movs	r0, #10
    5818:	e7d5      	b.n	57c6 <_puts_r+0x46>
    581a:	0022      	movs	r2, r4
    581c:	0028      	movs	r0, r5
    581e:	f000 f913 	bl	5a48 <__swbuf_r>
    5822:	1c43      	adds	r3, r0, #1
    5824:	d1e8      	bne.n	57f8 <_puts_r+0x78>
    5826:	e7cc      	b.n	57c2 <_puts_r+0x42>
    5828:	200a      	movs	r0, #10
    582a:	6823      	ldr	r3, [r4, #0]
    582c:	1c5a      	adds	r2, r3, #1
    582e:	6022      	str	r2, [r4, #0]
    5830:	7018      	strb	r0, [r3, #0]
    5832:	e7c8      	b.n	57c6 <_puts_r+0x46>
    5834:	0000a56c 	.word	0x0000a56c
    5838:	0000a58c 	.word	0x0000a58c
    583c:	0000a54c 	.word	0x0000a54c

00005840 <puts>:
    5840:	b510      	push	{r4, lr}
    5842:	4b03      	ldr	r3, [pc, #12]	; (5850 <puts+0x10>)
    5844:	0001      	movs	r1, r0
    5846:	6818      	ldr	r0, [r3, #0]
    5848:	f7ff ff9a 	bl	5780 <_puts_r>
    584c:	bd10      	pop	{r4, pc}
    584e:	46c0      	nop			; (mov r8, r8)
    5850:	2000000c 	.word	0x2000000c

00005854 <rand>:
    5854:	4b15      	ldr	r3, [pc, #84]	; (58ac <rand+0x58>)
    5856:	b510      	push	{r4, lr}
    5858:	681c      	ldr	r4, [r3, #0]
    585a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    585c:	2b00      	cmp	r3, #0
    585e:	d115      	bne.n	588c <rand+0x38>
    5860:	2018      	movs	r0, #24
    5862:	f001 fa29 	bl	6cb8 <malloc>
    5866:	4b12      	ldr	r3, [pc, #72]	; (58b0 <rand+0x5c>)
    5868:	63a0      	str	r0, [r4, #56]	; 0x38
    586a:	8003      	strh	r3, [r0, #0]
    586c:	4b11      	ldr	r3, [pc, #68]	; (58b4 <rand+0x60>)
    586e:	2201      	movs	r2, #1
    5870:	8043      	strh	r3, [r0, #2]
    5872:	4b11      	ldr	r3, [pc, #68]	; (58b8 <rand+0x64>)
    5874:	8083      	strh	r3, [r0, #4]
    5876:	4b11      	ldr	r3, [pc, #68]	; (58bc <rand+0x68>)
    5878:	80c3      	strh	r3, [r0, #6]
    587a:	4b11      	ldr	r3, [pc, #68]	; (58c0 <rand+0x6c>)
    587c:	8103      	strh	r3, [r0, #8]
    587e:	2305      	movs	r3, #5
    5880:	8143      	strh	r3, [r0, #10]
    5882:	3306      	adds	r3, #6
    5884:	8183      	strh	r3, [r0, #12]
    5886:	2300      	movs	r3, #0
    5888:	6102      	str	r2, [r0, #16]
    588a:	6143      	str	r3, [r0, #20]
    588c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    588e:	4a0d      	ldr	r2, [pc, #52]	; (58c4 <rand+0x70>)
    5890:	6920      	ldr	r0, [r4, #16]
    5892:	6961      	ldr	r1, [r4, #20]
    5894:	4b0c      	ldr	r3, [pc, #48]	; (58c8 <rand+0x74>)
    5896:	f002 f9e9 	bl	7c6c <__aeabi_lmul>
    589a:	2201      	movs	r2, #1
    589c:	2300      	movs	r3, #0
    589e:	1880      	adds	r0, r0, r2
    58a0:	4159      	adcs	r1, r3
    58a2:	6120      	str	r0, [r4, #16]
    58a4:	6161      	str	r1, [r4, #20]
    58a6:	0048      	lsls	r0, r1, #1
    58a8:	0840      	lsrs	r0, r0, #1
    58aa:	bd10      	pop	{r4, pc}
    58ac:	2000000c 	.word	0x2000000c
    58b0:	0000330e 	.word	0x0000330e
    58b4:	ffffabcd 	.word	0xffffabcd
    58b8:	00001234 	.word	0x00001234
    58bc:	ffffe66d 	.word	0xffffe66d
    58c0:	ffffdeec 	.word	0xffffdeec
    58c4:	4c957f2d 	.word	0x4c957f2d
    58c8:	5851f42d 	.word	0x5851f42d

000058cc <setbuf>:
    58cc:	424a      	negs	r2, r1
    58ce:	414a      	adcs	r2, r1
    58d0:	2380      	movs	r3, #128	; 0x80
    58d2:	b510      	push	{r4, lr}
    58d4:	0052      	lsls	r2, r2, #1
    58d6:	00db      	lsls	r3, r3, #3
    58d8:	f000 f802 	bl	58e0 <setvbuf>
    58dc:	bd10      	pop	{r4, pc}
	...

000058e0 <setvbuf>:
    58e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    58e2:	001d      	movs	r5, r3
    58e4:	4b4f      	ldr	r3, [pc, #316]	; (5a24 <setvbuf+0x144>)
    58e6:	b085      	sub	sp, #20
    58e8:	681e      	ldr	r6, [r3, #0]
    58ea:	0004      	movs	r4, r0
    58ec:	000f      	movs	r7, r1
    58ee:	9200      	str	r2, [sp, #0]
    58f0:	2e00      	cmp	r6, #0
    58f2:	d005      	beq.n	5900 <setvbuf+0x20>
    58f4:	69b3      	ldr	r3, [r6, #24]
    58f6:	2b00      	cmp	r3, #0
    58f8:	d102      	bne.n	5900 <setvbuf+0x20>
    58fa:	0030      	movs	r0, r6
    58fc:	f001 f8d4 	bl	6aa8 <__sinit>
    5900:	4b49      	ldr	r3, [pc, #292]	; (5a28 <setvbuf+0x148>)
    5902:	429c      	cmp	r4, r3
    5904:	d150      	bne.n	59a8 <setvbuf+0xc8>
    5906:	6874      	ldr	r4, [r6, #4]
    5908:	9b00      	ldr	r3, [sp, #0]
    590a:	2b02      	cmp	r3, #2
    590c:	d005      	beq.n	591a <setvbuf+0x3a>
    590e:	2b01      	cmp	r3, #1
    5910:	d900      	bls.n	5914 <setvbuf+0x34>
    5912:	e084      	b.n	5a1e <setvbuf+0x13e>
    5914:	2d00      	cmp	r5, #0
    5916:	da00      	bge.n	591a <setvbuf+0x3a>
    5918:	e081      	b.n	5a1e <setvbuf+0x13e>
    591a:	0021      	movs	r1, r4
    591c:	0030      	movs	r0, r6
    591e:	f001 f855 	bl	69cc <_fflush_r>
    5922:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5924:	2900      	cmp	r1, #0
    5926:	d008      	beq.n	593a <setvbuf+0x5a>
    5928:	0023      	movs	r3, r4
    592a:	3344      	adds	r3, #68	; 0x44
    592c:	4299      	cmp	r1, r3
    592e:	d002      	beq.n	5936 <setvbuf+0x56>
    5930:	0030      	movs	r0, r6
    5932:	f001 fcc7 	bl	72c4 <_free_r>
    5936:	2300      	movs	r3, #0
    5938:	6363      	str	r3, [r4, #52]	; 0x34
    593a:	2300      	movs	r3, #0
    593c:	61a3      	str	r3, [r4, #24]
    593e:	6063      	str	r3, [r4, #4]
    5940:	89a3      	ldrh	r3, [r4, #12]
    5942:	061b      	lsls	r3, r3, #24
    5944:	d503      	bpl.n	594e <setvbuf+0x6e>
    5946:	6921      	ldr	r1, [r4, #16]
    5948:	0030      	movs	r0, r6
    594a:	f001 fcbb 	bl	72c4 <_free_r>
    594e:	89a3      	ldrh	r3, [r4, #12]
    5950:	4a36      	ldr	r2, [pc, #216]	; (5a2c <setvbuf+0x14c>)
    5952:	4013      	ands	r3, r2
    5954:	81a3      	strh	r3, [r4, #12]
    5956:	9b00      	ldr	r3, [sp, #0]
    5958:	2b02      	cmp	r3, #2
    595a:	d05a      	beq.n	5a12 <setvbuf+0x132>
    595c:	ab03      	add	r3, sp, #12
    595e:	aa02      	add	r2, sp, #8
    5960:	0021      	movs	r1, r4
    5962:	0030      	movs	r0, r6
    5964:	f001 f942 	bl	6bec <__swhatbuf_r>
    5968:	89a3      	ldrh	r3, [r4, #12]
    596a:	4318      	orrs	r0, r3
    596c:	81a0      	strh	r0, [r4, #12]
    596e:	2d00      	cmp	r5, #0
    5970:	d124      	bne.n	59bc <setvbuf+0xdc>
    5972:	9d02      	ldr	r5, [sp, #8]
    5974:	0028      	movs	r0, r5
    5976:	f001 f99f 	bl	6cb8 <malloc>
    597a:	9501      	str	r5, [sp, #4]
    597c:	1e07      	subs	r7, r0, #0
    597e:	d142      	bne.n	5a06 <setvbuf+0x126>
    5980:	9b02      	ldr	r3, [sp, #8]
    5982:	9301      	str	r3, [sp, #4]
    5984:	42ab      	cmp	r3, r5
    5986:	d139      	bne.n	59fc <setvbuf+0x11c>
    5988:	2001      	movs	r0, #1
    598a:	4240      	negs	r0, r0
    598c:	2302      	movs	r3, #2
    598e:	89a2      	ldrh	r2, [r4, #12]
    5990:	4313      	orrs	r3, r2
    5992:	81a3      	strh	r3, [r4, #12]
    5994:	2300      	movs	r3, #0
    5996:	60a3      	str	r3, [r4, #8]
    5998:	0023      	movs	r3, r4
    599a:	3347      	adds	r3, #71	; 0x47
    599c:	6023      	str	r3, [r4, #0]
    599e:	6123      	str	r3, [r4, #16]
    59a0:	2301      	movs	r3, #1
    59a2:	6163      	str	r3, [r4, #20]
    59a4:	b005      	add	sp, #20
    59a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59a8:	4b21      	ldr	r3, [pc, #132]	; (5a30 <setvbuf+0x150>)
    59aa:	429c      	cmp	r4, r3
    59ac:	d101      	bne.n	59b2 <setvbuf+0xd2>
    59ae:	68b4      	ldr	r4, [r6, #8]
    59b0:	e7aa      	b.n	5908 <setvbuf+0x28>
    59b2:	4b20      	ldr	r3, [pc, #128]	; (5a34 <setvbuf+0x154>)
    59b4:	429c      	cmp	r4, r3
    59b6:	d1a7      	bne.n	5908 <setvbuf+0x28>
    59b8:	68f4      	ldr	r4, [r6, #12]
    59ba:	e7a5      	b.n	5908 <setvbuf+0x28>
    59bc:	2f00      	cmp	r7, #0
    59be:	d0d9      	beq.n	5974 <setvbuf+0x94>
    59c0:	69b3      	ldr	r3, [r6, #24]
    59c2:	2b00      	cmp	r3, #0
    59c4:	d102      	bne.n	59cc <setvbuf+0xec>
    59c6:	0030      	movs	r0, r6
    59c8:	f001 f86e 	bl	6aa8 <__sinit>
    59cc:	9b00      	ldr	r3, [sp, #0]
    59ce:	2b01      	cmp	r3, #1
    59d0:	d103      	bne.n	59da <setvbuf+0xfa>
    59d2:	89a3      	ldrh	r3, [r4, #12]
    59d4:	9a00      	ldr	r2, [sp, #0]
    59d6:	431a      	orrs	r2, r3
    59d8:	81a2      	strh	r2, [r4, #12]
    59da:	2008      	movs	r0, #8
    59dc:	89a3      	ldrh	r3, [r4, #12]
    59de:	6027      	str	r7, [r4, #0]
    59e0:	6127      	str	r7, [r4, #16]
    59e2:	6165      	str	r5, [r4, #20]
    59e4:	4018      	ands	r0, r3
    59e6:	d018      	beq.n	5a1a <setvbuf+0x13a>
    59e8:	2001      	movs	r0, #1
    59ea:	4018      	ands	r0, r3
    59ec:	2300      	movs	r3, #0
    59ee:	4298      	cmp	r0, r3
    59f0:	d011      	beq.n	5a16 <setvbuf+0x136>
    59f2:	426d      	negs	r5, r5
    59f4:	60a3      	str	r3, [r4, #8]
    59f6:	61a5      	str	r5, [r4, #24]
    59f8:	0018      	movs	r0, r3
    59fa:	e7d3      	b.n	59a4 <setvbuf+0xc4>
    59fc:	9801      	ldr	r0, [sp, #4]
    59fe:	f001 f95b 	bl	6cb8 <malloc>
    5a02:	1e07      	subs	r7, r0, #0
    5a04:	d0c0      	beq.n	5988 <setvbuf+0xa8>
    5a06:	2380      	movs	r3, #128	; 0x80
    5a08:	89a2      	ldrh	r2, [r4, #12]
    5a0a:	9d01      	ldr	r5, [sp, #4]
    5a0c:	4313      	orrs	r3, r2
    5a0e:	81a3      	strh	r3, [r4, #12]
    5a10:	e7d6      	b.n	59c0 <setvbuf+0xe0>
    5a12:	2000      	movs	r0, #0
    5a14:	e7ba      	b.n	598c <setvbuf+0xac>
    5a16:	60a5      	str	r5, [r4, #8]
    5a18:	e7c4      	b.n	59a4 <setvbuf+0xc4>
    5a1a:	60a0      	str	r0, [r4, #8]
    5a1c:	e7c2      	b.n	59a4 <setvbuf+0xc4>
    5a1e:	2001      	movs	r0, #1
    5a20:	4240      	negs	r0, r0
    5a22:	e7bf      	b.n	59a4 <setvbuf+0xc4>
    5a24:	2000000c 	.word	0x2000000c
    5a28:	0000a56c 	.word	0x0000a56c
    5a2c:	fffff35c 	.word	0xfffff35c
    5a30:	0000a58c 	.word	0x0000a58c
    5a34:	0000a54c 	.word	0x0000a54c

00005a38 <strlen>:
    5a38:	2300      	movs	r3, #0
    5a3a:	5cc2      	ldrb	r2, [r0, r3]
    5a3c:	3301      	adds	r3, #1
    5a3e:	2a00      	cmp	r2, #0
    5a40:	d1fb      	bne.n	5a3a <strlen+0x2>
    5a42:	1e58      	subs	r0, r3, #1
    5a44:	4770      	bx	lr
	...

00005a48 <__swbuf_r>:
    5a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a4a:	0005      	movs	r5, r0
    5a4c:	000e      	movs	r6, r1
    5a4e:	0014      	movs	r4, r2
    5a50:	2800      	cmp	r0, #0
    5a52:	d004      	beq.n	5a5e <__swbuf_r+0x16>
    5a54:	6983      	ldr	r3, [r0, #24]
    5a56:	2b00      	cmp	r3, #0
    5a58:	d101      	bne.n	5a5e <__swbuf_r+0x16>
    5a5a:	f001 f825 	bl	6aa8 <__sinit>
    5a5e:	4b22      	ldr	r3, [pc, #136]	; (5ae8 <__swbuf_r+0xa0>)
    5a60:	429c      	cmp	r4, r3
    5a62:	d12d      	bne.n	5ac0 <__swbuf_r+0x78>
    5a64:	686c      	ldr	r4, [r5, #4]
    5a66:	69a3      	ldr	r3, [r4, #24]
    5a68:	60a3      	str	r3, [r4, #8]
    5a6a:	89a3      	ldrh	r3, [r4, #12]
    5a6c:	071b      	lsls	r3, r3, #28
    5a6e:	d531      	bpl.n	5ad4 <__swbuf_r+0x8c>
    5a70:	6923      	ldr	r3, [r4, #16]
    5a72:	2b00      	cmp	r3, #0
    5a74:	d02e      	beq.n	5ad4 <__swbuf_r+0x8c>
    5a76:	6823      	ldr	r3, [r4, #0]
    5a78:	6922      	ldr	r2, [r4, #16]
    5a7a:	b2f7      	uxtb	r7, r6
    5a7c:	1a98      	subs	r0, r3, r2
    5a7e:	6963      	ldr	r3, [r4, #20]
    5a80:	b2f6      	uxtb	r6, r6
    5a82:	4298      	cmp	r0, r3
    5a84:	db05      	blt.n	5a92 <__swbuf_r+0x4a>
    5a86:	0021      	movs	r1, r4
    5a88:	0028      	movs	r0, r5
    5a8a:	f000 ff9f 	bl	69cc <_fflush_r>
    5a8e:	2800      	cmp	r0, #0
    5a90:	d126      	bne.n	5ae0 <__swbuf_r+0x98>
    5a92:	68a3      	ldr	r3, [r4, #8]
    5a94:	3001      	adds	r0, #1
    5a96:	3b01      	subs	r3, #1
    5a98:	60a3      	str	r3, [r4, #8]
    5a9a:	6823      	ldr	r3, [r4, #0]
    5a9c:	1c5a      	adds	r2, r3, #1
    5a9e:	6022      	str	r2, [r4, #0]
    5aa0:	701f      	strb	r7, [r3, #0]
    5aa2:	6963      	ldr	r3, [r4, #20]
    5aa4:	4298      	cmp	r0, r3
    5aa6:	d004      	beq.n	5ab2 <__swbuf_r+0x6a>
    5aa8:	89a3      	ldrh	r3, [r4, #12]
    5aaa:	07db      	lsls	r3, r3, #31
    5aac:	d51a      	bpl.n	5ae4 <__swbuf_r+0x9c>
    5aae:	2e0a      	cmp	r6, #10
    5ab0:	d118      	bne.n	5ae4 <__swbuf_r+0x9c>
    5ab2:	0021      	movs	r1, r4
    5ab4:	0028      	movs	r0, r5
    5ab6:	f000 ff89 	bl	69cc <_fflush_r>
    5aba:	2800      	cmp	r0, #0
    5abc:	d012      	beq.n	5ae4 <__swbuf_r+0x9c>
    5abe:	e00f      	b.n	5ae0 <__swbuf_r+0x98>
    5ac0:	4b0a      	ldr	r3, [pc, #40]	; (5aec <__swbuf_r+0xa4>)
    5ac2:	429c      	cmp	r4, r3
    5ac4:	d101      	bne.n	5aca <__swbuf_r+0x82>
    5ac6:	68ac      	ldr	r4, [r5, #8]
    5ac8:	e7cd      	b.n	5a66 <__swbuf_r+0x1e>
    5aca:	4b09      	ldr	r3, [pc, #36]	; (5af0 <__swbuf_r+0xa8>)
    5acc:	429c      	cmp	r4, r3
    5ace:	d1ca      	bne.n	5a66 <__swbuf_r+0x1e>
    5ad0:	68ec      	ldr	r4, [r5, #12]
    5ad2:	e7c8      	b.n	5a66 <__swbuf_r+0x1e>
    5ad4:	0021      	movs	r1, r4
    5ad6:	0028      	movs	r0, r5
    5ad8:	f000 f80c 	bl	5af4 <__swsetup_r>
    5adc:	2800      	cmp	r0, #0
    5ade:	d0ca      	beq.n	5a76 <__swbuf_r+0x2e>
    5ae0:	2601      	movs	r6, #1
    5ae2:	4276      	negs	r6, r6
    5ae4:	0030      	movs	r0, r6
    5ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ae8:	0000a56c 	.word	0x0000a56c
    5aec:	0000a58c 	.word	0x0000a58c
    5af0:	0000a54c 	.word	0x0000a54c

00005af4 <__swsetup_r>:
    5af4:	4b36      	ldr	r3, [pc, #216]	; (5bd0 <__swsetup_r+0xdc>)
    5af6:	b570      	push	{r4, r5, r6, lr}
    5af8:	681d      	ldr	r5, [r3, #0]
    5afa:	0006      	movs	r6, r0
    5afc:	000c      	movs	r4, r1
    5afe:	2d00      	cmp	r5, #0
    5b00:	d005      	beq.n	5b0e <__swsetup_r+0x1a>
    5b02:	69ab      	ldr	r3, [r5, #24]
    5b04:	2b00      	cmp	r3, #0
    5b06:	d102      	bne.n	5b0e <__swsetup_r+0x1a>
    5b08:	0028      	movs	r0, r5
    5b0a:	f000 ffcd 	bl	6aa8 <__sinit>
    5b0e:	4b31      	ldr	r3, [pc, #196]	; (5bd4 <__swsetup_r+0xe0>)
    5b10:	429c      	cmp	r4, r3
    5b12:	d10f      	bne.n	5b34 <__swsetup_r+0x40>
    5b14:	686c      	ldr	r4, [r5, #4]
    5b16:	230c      	movs	r3, #12
    5b18:	5ee2      	ldrsh	r2, [r4, r3]
    5b1a:	b293      	uxth	r3, r2
    5b1c:	0719      	lsls	r1, r3, #28
    5b1e:	d42d      	bmi.n	5b7c <__swsetup_r+0x88>
    5b20:	06d9      	lsls	r1, r3, #27
    5b22:	d411      	bmi.n	5b48 <__swsetup_r+0x54>
    5b24:	2309      	movs	r3, #9
    5b26:	2001      	movs	r0, #1
    5b28:	6033      	str	r3, [r6, #0]
    5b2a:	3337      	adds	r3, #55	; 0x37
    5b2c:	4313      	orrs	r3, r2
    5b2e:	81a3      	strh	r3, [r4, #12]
    5b30:	4240      	negs	r0, r0
    5b32:	bd70      	pop	{r4, r5, r6, pc}
    5b34:	4b28      	ldr	r3, [pc, #160]	; (5bd8 <__swsetup_r+0xe4>)
    5b36:	429c      	cmp	r4, r3
    5b38:	d101      	bne.n	5b3e <__swsetup_r+0x4a>
    5b3a:	68ac      	ldr	r4, [r5, #8]
    5b3c:	e7eb      	b.n	5b16 <__swsetup_r+0x22>
    5b3e:	4b27      	ldr	r3, [pc, #156]	; (5bdc <__swsetup_r+0xe8>)
    5b40:	429c      	cmp	r4, r3
    5b42:	d1e8      	bne.n	5b16 <__swsetup_r+0x22>
    5b44:	68ec      	ldr	r4, [r5, #12]
    5b46:	e7e6      	b.n	5b16 <__swsetup_r+0x22>
    5b48:	075b      	lsls	r3, r3, #29
    5b4a:	d513      	bpl.n	5b74 <__swsetup_r+0x80>
    5b4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5b4e:	2900      	cmp	r1, #0
    5b50:	d008      	beq.n	5b64 <__swsetup_r+0x70>
    5b52:	0023      	movs	r3, r4
    5b54:	3344      	adds	r3, #68	; 0x44
    5b56:	4299      	cmp	r1, r3
    5b58:	d002      	beq.n	5b60 <__swsetup_r+0x6c>
    5b5a:	0030      	movs	r0, r6
    5b5c:	f001 fbb2 	bl	72c4 <_free_r>
    5b60:	2300      	movs	r3, #0
    5b62:	6363      	str	r3, [r4, #52]	; 0x34
    5b64:	2224      	movs	r2, #36	; 0x24
    5b66:	89a3      	ldrh	r3, [r4, #12]
    5b68:	4393      	bics	r3, r2
    5b6a:	81a3      	strh	r3, [r4, #12]
    5b6c:	2300      	movs	r3, #0
    5b6e:	6063      	str	r3, [r4, #4]
    5b70:	6923      	ldr	r3, [r4, #16]
    5b72:	6023      	str	r3, [r4, #0]
    5b74:	2308      	movs	r3, #8
    5b76:	89a2      	ldrh	r2, [r4, #12]
    5b78:	4313      	orrs	r3, r2
    5b7a:	81a3      	strh	r3, [r4, #12]
    5b7c:	6923      	ldr	r3, [r4, #16]
    5b7e:	2b00      	cmp	r3, #0
    5b80:	d10b      	bne.n	5b9a <__swsetup_r+0xa6>
    5b82:	21a0      	movs	r1, #160	; 0xa0
    5b84:	2280      	movs	r2, #128	; 0x80
    5b86:	89a3      	ldrh	r3, [r4, #12]
    5b88:	0089      	lsls	r1, r1, #2
    5b8a:	0092      	lsls	r2, r2, #2
    5b8c:	400b      	ands	r3, r1
    5b8e:	4293      	cmp	r3, r2
    5b90:	d003      	beq.n	5b9a <__swsetup_r+0xa6>
    5b92:	0021      	movs	r1, r4
    5b94:	0030      	movs	r0, r6
    5b96:	f001 f851 	bl	6c3c <__smakebuf_r>
    5b9a:	2301      	movs	r3, #1
    5b9c:	89a2      	ldrh	r2, [r4, #12]
    5b9e:	4013      	ands	r3, r2
    5ba0:	d011      	beq.n	5bc6 <__swsetup_r+0xd2>
    5ba2:	2300      	movs	r3, #0
    5ba4:	60a3      	str	r3, [r4, #8]
    5ba6:	6963      	ldr	r3, [r4, #20]
    5ba8:	425b      	negs	r3, r3
    5baa:	61a3      	str	r3, [r4, #24]
    5bac:	2000      	movs	r0, #0
    5bae:	6923      	ldr	r3, [r4, #16]
    5bb0:	4283      	cmp	r3, r0
    5bb2:	d1be      	bne.n	5b32 <__swsetup_r+0x3e>
    5bb4:	230c      	movs	r3, #12
    5bb6:	5ee2      	ldrsh	r2, [r4, r3]
    5bb8:	0613      	lsls	r3, r2, #24
    5bba:	d5ba      	bpl.n	5b32 <__swsetup_r+0x3e>
    5bbc:	2340      	movs	r3, #64	; 0x40
    5bbe:	4313      	orrs	r3, r2
    5bc0:	81a3      	strh	r3, [r4, #12]
    5bc2:	3801      	subs	r0, #1
    5bc4:	e7b5      	b.n	5b32 <__swsetup_r+0x3e>
    5bc6:	0792      	lsls	r2, r2, #30
    5bc8:	d400      	bmi.n	5bcc <__swsetup_r+0xd8>
    5bca:	6963      	ldr	r3, [r4, #20]
    5bcc:	60a3      	str	r3, [r4, #8]
    5bce:	e7ed      	b.n	5bac <__swsetup_r+0xb8>
    5bd0:	2000000c 	.word	0x2000000c
    5bd4:	0000a56c 	.word	0x0000a56c
    5bd8:	0000a58c 	.word	0x0000a58c
    5bdc:	0000a54c 	.word	0x0000a54c

00005be0 <quorem>:
    5be0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5be2:	6903      	ldr	r3, [r0, #16]
    5be4:	690c      	ldr	r4, [r1, #16]
    5be6:	b089      	sub	sp, #36	; 0x24
    5be8:	0007      	movs	r7, r0
    5bea:	9105      	str	r1, [sp, #20]
    5bec:	2600      	movs	r6, #0
    5bee:	429c      	cmp	r4, r3
    5bf0:	dc6d      	bgt.n	5cce <quorem+0xee>
    5bf2:	000b      	movs	r3, r1
    5bf4:	3c01      	subs	r4, #1
    5bf6:	3314      	adds	r3, #20
    5bf8:	00a5      	lsls	r5, r4, #2
    5bfa:	9303      	str	r3, [sp, #12]
    5bfc:	195b      	adds	r3, r3, r5
    5bfe:	9304      	str	r3, [sp, #16]
    5c00:	0003      	movs	r3, r0
    5c02:	3314      	adds	r3, #20
    5c04:	9302      	str	r3, [sp, #8]
    5c06:	195d      	adds	r5, r3, r5
    5c08:	9b04      	ldr	r3, [sp, #16]
    5c0a:	6828      	ldr	r0, [r5, #0]
    5c0c:	681b      	ldr	r3, [r3, #0]
    5c0e:	1c59      	adds	r1, r3, #1
    5c10:	9301      	str	r3, [sp, #4]
    5c12:	f001 fe3d 	bl	7890 <__udivsi3>
    5c16:	9001      	str	r0, [sp, #4]
    5c18:	42b0      	cmp	r0, r6
    5c1a:	d02d      	beq.n	5c78 <quorem+0x98>
    5c1c:	9b03      	ldr	r3, [sp, #12]
    5c1e:	9802      	ldr	r0, [sp, #8]
    5c20:	469c      	mov	ip, r3
    5c22:	9606      	str	r6, [sp, #24]
    5c24:	4662      	mov	r2, ip
    5c26:	ca08      	ldmia	r2!, {r3}
    5c28:	4694      	mov	ip, r2
    5c2a:	9a01      	ldr	r2, [sp, #4]
    5c2c:	b299      	uxth	r1, r3
    5c2e:	4351      	muls	r1, r2
    5c30:	0c1b      	lsrs	r3, r3, #16
    5c32:	4353      	muls	r3, r2
    5c34:	1989      	adds	r1, r1, r6
    5c36:	0c0a      	lsrs	r2, r1, #16
    5c38:	189b      	adds	r3, r3, r2
    5c3a:	9307      	str	r3, [sp, #28]
    5c3c:	8802      	ldrh	r2, [r0, #0]
    5c3e:	0c1e      	lsrs	r6, r3, #16
    5c40:	9b06      	ldr	r3, [sp, #24]
    5c42:	b289      	uxth	r1, r1
    5c44:	18d2      	adds	r2, r2, r3
    5c46:	6803      	ldr	r3, [r0, #0]
    5c48:	1a52      	subs	r2, r2, r1
    5c4a:	0c19      	lsrs	r1, r3, #16
    5c4c:	466b      	mov	r3, sp
    5c4e:	8b9b      	ldrh	r3, [r3, #28]
    5c50:	1acb      	subs	r3, r1, r3
    5c52:	1411      	asrs	r1, r2, #16
    5c54:	185b      	adds	r3, r3, r1
    5c56:	1419      	asrs	r1, r3, #16
    5c58:	b292      	uxth	r2, r2
    5c5a:	041b      	lsls	r3, r3, #16
    5c5c:	431a      	orrs	r2, r3
    5c5e:	9b04      	ldr	r3, [sp, #16]
    5c60:	9106      	str	r1, [sp, #24]
    5c62:	c004      	stmia	r0!, {r2}
    5c64:	4563      	cmp	r3, ip
    5c66:	d2dd      	bcs.n	5c24 <quorem+0x44>
    5c68:	682b      	ldr	r3, [r5, #0]
    5c6a:	2b00      	cmp	r3, #0
    5c6c:	d104      	bne.n	5c78 <quorem+0x98>
    5c6e:	9b02      	ldr	r3, [sp, #8]
    5c70:	3d04      	subs	r5, #4
    5c72:	42ab      	cmp	r3, r5
    5c74:	d32e      	bcc.n	5cd4 <quorem+0xf4>
    5c76:	613c      	str	r4, [r7, #16]
    5c78:	9905      	ldr	r1, [sp, #20]
    5c7a:	0038      	movs	r0, r7
    5c7c:	f001 fa43 	bl	7106 <__mcmp>
    5c80:	2800      	cmp	r0, #0
    5c82:	db23      	blt.n	5ccc <quorem+0xec>
    5c84:	2500      	movs	r5, #0
    5c86:	9b01      	ldr	r3, [sp, #4]
    5c88:	9802      	ldr	r0, [sp, #8]
    5c8a:	3301      	adds	r3, #1
    5c8c:	9903      	ldr	r1, [sp, #12]
    5c8e:	9301      	str	r3, [sp, #4]
    5c90:	c908      	ldmia	r1!, {r3}
    5c92:	8802      	ldrh	r2, [r0, #0]
    5c94:	1955      	adds	r5, r2, r5
    5c96:	b29a      	uxth	r2, r3
    5c98:	1aaa      	subs	r2, r5, r2
    5c9a:	6805      	ldr	r5, [r0, #0]
    5c9c:	0c1b      	lsrs	r3, r3, #16
    5c9e:	0c2d      	lsrs	r5, r5, #16
    5ca0:	1aeb      	subs	r3, r5, r3
    5ca2:	1415      	asrs	r5, r2, #16
    5ca4:	195b      	adds	r3, r3, r5
    5ca6:	141d      	asrs	r5, r3, #16
    5ca8:	b292      	uxth	r2, r2
    5caa:	041b      	lsls	r3, r3, #16
    5cac:	4313      	orrs	r3, r2
    5cae:	c008      	stmia	r0!, {r3}
    5cb0:	9b04      	ldr	r3, [sp, #16]
    5cb2:	428b      	cmp	r3, r1
    5cb4:	d2ec      	bcs.n	5c90 <quorem+0xb0>
    5cb6:	9a02      	ldr	r2, [sp, #8]
    5cb8:	00a3      	lsls	r3, r4, #2
    5cba:	18d3      	adds	r3, r2, r3
    5cbc:	681a      	ldr	r2, [r3, #0]
    5cbe:	2a00      	cmp	r2, #0
    5cc0:	d104      	bne.n	5ccc <quorem+0xec>
    5cc2:	9a02      	ldr	r2, [sp, #8]
    5cc4:	3b04      	subs	r3, #4
    5cc6:	429a      	cmp	r2, r3
    5cc8:	d309      	bcc.n	5cde <quorem+0xfe>
    5cca:	613c      	str	r4, [r7, #16]
    5ccc:	9e01      	ldr	r6, [sp, #4]
    5cce:	0030      	movs	r0, r6
    5cd0:	b009      	add	sp, #36	; 0x24
    5cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5cd4:	682b      	ldr	r3, [r5, #0]
    5cd6:	2b00      	cmp	r3, #0
    5cd8:	d1cd      	bne.n	5c76 <quorem+0x96>
    5cda:	3c01      	subs	r4, #1
    5cdc:	e7c7      	b.n	5c6e <quorem+0x8e>
    5cde:	681a      	ldr	r2, [r3, #0]
    5ce0:	2a00      	cmp	r2, #0
    5ce2:	d1f2      	bne.n	5cca <quorem+0xea>
    5ce4:	3c01      	subs	r4, #1
    5ce6:	e7ec      	b.n	5cc2 <quorem+0xe2>

00005ce8 <_dtoa_r>:
    5ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cea:	0016      	movs	r6, r2
    5cec:	001f      	movs	r7, r3
    5cee:	6a44      	ldr	r4, [r0, #36]	; 0x24
    5cf0:	b09d      	sub	sp, #116	; 0x74
    5cf2:	9004      	str	r0, [sp, #16]
    5cf4:	9d25      	ldr	r5, [sp, #148]	; 0x94
    5cf6:	9606      	str	r6, [sp, #24]
    5cf8:	9707      	str	r7, [sp, #28]
    5cfa:	2c00      	cmp	r4, #0
    5cfc:	d108      	bne.n	5d10 <_dtoa_r+0x28>
    5cfe:	2010      	movs	r0, #16
    5d00:	f000 ffda 	bl	6cb8 <malloc>
    5d04:	9b04      	ldr	r3, [sp, #16]
    5d06:	6258      	str	r0, [r3, #36]	; 0x24
    5d08:	6044      	str	r4, [r0, #4]
    5d0a:	6084      	str	r4, [r0, #8]
    5d0c:	6004      	str	r4, [r0, #0]
    5d0e:	60c4      	str	r4, [r0, #12]
    5d10:	9b04      	ldr	r3, [sp, #16]
    5d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5d14:	6819      	ldr	r1, [r3, #0]
    5d16:	2900      	cmp	r1, #0
    5d18:	d00b      	beq.n	5d32 <_dtoa_r+0x4a>
    5d1a:	685a      	ldr	r2, [r3, #4]
    5d1c:	2301      	movs	r3, #1
    5d1e:	4093      	lsls	r3, r2
    5d20:	604a      	str	r2, [r1, #4]
    5d22:	608b      	str	r3, [r1, #8]
    5d24:	9804      	ldr	r0, [sp, #16]
    5d26:	f001 f814 	bl	6d52 <_Bfree>
    5d2a:	2200      	movs	r2, #0
    5d2c:	9b04      	ldr	r3, [sp, #16]
    5d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5d30:	601a      	str	r2, [r3, #0]
    5d32:	9b07      	ldr	r3, [sp, #28]
    5d34:	2b00      	cmp	r3, #0
    5d36:	da1f      	bge.n	5d78 <_dtoa_r+0x90>
    5d38:	2301      	movs	r3, #1
    5d3a:	602b      	str	r3, [r5, #0]
    5d3c:	007b      	lsls	r3, r7, #1
    5d3e:	085b      	lsrs	r3, r3, #1
    5d40:	9307      	str	r3, [sp, #28]
    5d42:	9c07      	ldr	r4, [sp, #28]
    5d44:	4bb7      	ldr	r3, [pc, #732]	; (6024 <_dtoa_r+0x33c>)
    5d46:	0022      	movs	r2, r4
    5d48:	9319      	str	r3, [sp, #100]	; 0x64
    5d4a:	401a      	ands	r2, r3
    5d4c:	429a      	cmp	r2, r3
    5d4e:	d116      	bne.n	5d7e <_dtoa_r+0x96>
    5d50:	4bb5      	ldr	r3, [pc, #724]	; (6028 <_dtoa_r+0x340>)
    5d52:	9a24      	ldr	r2, [sp, #144]	; 0x90
    5d54:	6013      	str	r3, [r2, #0]
    5d56:	9b06      	ldr	r3, [sp, #24]
    5d58:	2b00      	cmp	r3, #0
    5d5a:	d103      	bne.n	5d64 <_dtoa_r+0x7c>
    5d5c:	0324      	lsls	r4, r4, #12
    5d5e:	d101      	bne.n	5d64 <_dtoa_r+0x7c>
    5d60:	f000 fd91 	bl	6886 <_dtoa_r+0xb9e>
    5d64:	4bb1      	ldr	r3, [pc, #708]	; (602c <_dtoa_r+0x344>)
    5d66:	9a26      	ldr	r2, [sp, #152]	; 0x98
    5d68:	930a      	str	r3, [sp, #40]	; 0x28
    5d6a:	4bb1      	ldr	r3, [pc, #708]	; (6030 <_dtoa_r+0x348>)
    5d6c:	2a00      	cmp	r2, #0
    5d6e:	d001      	beq.n	5d74 <_dtoa_r+0x8c>
    5d70:	f000 fd8f 	bl	6892 <_dtoa_r+0xbaa>
    5d74:	f000 fd8f 	bl	6896 <_dtoa_r+0xbae>
    5d78:	2300      	movs	r3, #0
    5d7a:	602b      	str	r3, [r5, #0]
    5d7c:	e7e1      	b.n	5d42 <_dtoa_r+0x5a>
    5d7e:	9e06      	ldr	r6, [sp, #24]
    5d80:	9f07      	ldr	r7, [sp, #28]
    5d82:	2200      	movs	r2, #0
    5d84:	2300      	movs	r3, #0
    5d86:	0030      	movs	r0, r6
    5d88:	0039      	movs	r1, r7
    5d8a:	f001 ff07 	bl	7b9c <__aeabi_dcmpeq>
    5d8e:	1e05      	subs	r5, r0, #0
    5d90:	d00e      	beq.n	5db0 <_dtoa_r+0xc8>
    5d92:	2301      	movs	r3, #1
    5d94:	9a24      	ldr	r2, [sp, #144]	; 0x90
    5d96:	6013      	str	r3, [r2, #0]
    5d98:	4ba6      	ldr	r3, [pc, #664]	; (6034 <_dtoa_r+0x34c>)
    5d9a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    5d9c:	930a      	str	r3, [sp, #40]	; 0x28
    5d9e:	2a00      	cmp	r2, #0
    5da0:	d101      	bne.n	5da6 <_dtoa_r+0xbe>
    5da2:	f000 fd78 	bl	6896 <_dtoa_r+0xbae>
    5da6:	4aa4      	ldr	r2, [pc, #656]	; (6038 <_dtoa_r+0x350>)
    5da8:	9926      	ldr	r1, [sp, #152]	; 0x98
    5daa:	600a      	str	r2, [r1, #0]
    5dac:	f000 fd73 	bl	6896 <_dtoa_r+0xbae>
    5db0:	ab1a      	add	r3, sp, #104	; 0x68
    5db2:	9301      	str	r3, [sp, #4]
    5db4:	ab1b      	add	r3, sp, #108	; 0x6c
    5db6:	9300      	str	r3, [sp, #0]
    5db8:	0032      	movs	r2, r6
    5dba:	003b      	movs	r3, r7
    5dbc:	9804      	ldr	r0, [sp, #16]
    5dbe:	f001 fa1f 	bl	7200 <__d2b>
    5dc2:	0063      	lsls	r3, r4, #1
    5dc4:	9005      	str	r0, [sp, #20]
    5dc6:	0d5b      	lsrs	r3, r3, #21
    5dc8:	d100      	bne.n	5dcc <_dtoa_r+0xe4>
    5dca:	e07f      	b.n	5ecc <_dtoa_r+0x1e4>
    5dcc:	033a      	lsls	r2, r7, #12
    5dce:	4c9b      	ldr	r4, [pc, #620]	; (603c <_dtoa_r+0x354>)
    5dd0:	0b12      	lsrs	r2, r2, #12
    5dd2:	4314      	orrs	r4, r2
    5dd4:	0021      	movs	r1, r4
    5dd6:	4a9a      	ldr	r2, [pc, #616]	; (6040 <_dtoa_r+0x358>)
    5dd8:	0030      	movs	r0, r6
    5dda:	9518      	str	r5, [sp, #96]	; 0x60
    5ddc:	189e      	adds	r6, r3, r2
    5dde:	2200      	movs	r2, #0
    5de0:	4b98      	ldr	r3, [pc, #608]	; (6044 <_dtoa_r+0x35c>)
    5de2:	f003 fe23 	bl	9a2c <__aeabi_dsub>
    5de6:	4a98      	ldr	r2, [pc, #608]	; (6048 <_dtoa_r+0x360>)
    5de8:	4b98      	ldr	r3, [pc, #608]	; (604c <_dtoa_r+0x364>)
    5dea:	f003 fb9f 	bl	952c <__aeabi_dmul>
    5dee:	4a98      	ldr	r2, [pc, #608]	; (6050 <_dtoa_r+0x368>)
    5df0:	4b98      	ldr	r3, [pc, #608]	; (6054 <_dtoa_r+0x36c>)
    5df2:	f002 fc57 	bl	86a4 <__aeabi_dadd>
    5df6:	0004      	movs	r4, r0
    5df8:	0030      	movs	r0, r6
    5dfa:	000d      	movs	r5, r1
    5dfc:	f004 f980 	bl	a100 <__aeabi_i2d>
    5e00:	4a95      	ldr	r2, [pc, #596]	; (6058 <_dtoa_r+0x370>)
    5e02:	4b96      	ldr	r3, [pc, #600]	; (605c <_dtoa_r+0x374>)
    5e04:	f003 fb92 	bl	952c <__aeabi_dmul>
    5e08:	0002      	movs	r2, r0
    5e0a:	000b      	movs	r3, r1
    5e0c:	0020      	movs	r0, r4
    5e0e:	0029      	movs	r1, r5
    5e10:	f002 fc48 	bl	86a4 <__aeabi_dadd>
    5e14:	0004      	movs	r4, r0
    5e16:	000d      	movs	r5, r1
    5e18:	f004 f93e 	bl	a098 <__aeabi_d2iz>
    5e1c:	2200      	movs	r2, #0
    5e1e:	9003      	str	r0, [sp, #12]
    5e20:	2300      	movs	r3, #0
    5e22:	0020      	movs	r0, r4
    5e24:	0029      	movs	r1, r5
    5e26:	f001 febf 	bl	7ba8 <__aeabi_dcmplt>
    5e2a:	2800      	cmp	r0, #0
    5e2c:	d00e      	beq.n	5e4c <_dtoa_r+0x164>
    5e2e:	9803      	ldr	r0, [sp, #12]
    5e30:	f004 f966 	bl	a100 <__aeabi_i2d>
    5e34:	000b      	movs	r3, r1
    5e36:	0002      	movs	r2, r0
    5e38:	0029      	movs	r1, r5
    5e3a:	0020      	movs	r0, r4
    5e3c:	f001 feae 	bl	7b9c <__aeabi_dcmpeq>
    5e40:	0003      	movs	r3, r0
    5e42:	4258      	negs	r0, r3
    5e44:	4158      	adcs	r0, r3
    5e46:	9b03      	ldr	r3, [sp, #12]
    5e48:	1a1b      	subs	r3, r3, r0
    5e4a:	9303      	str	r3, [sp, #12]
    5e4c:	2301      	movs	r3, #1
    5e4e:	9316      	str	r3, [sp, #88]	; 0x58
    5e50:	9b03      	ldr	r3, [sp, #12]
    5e52:	2b16      	cmp	r3, #22
    5e54:	d80f      	bhi.n	5e76 <_dtoa_r+0x18e>
    5e56:	4982      	ldr	r1, [pc, #520]	; (6060 <_dtoa_r+0x378>)
    5e58:	00db      	lsls	r3, r3, #3
    5e5a:	18c9      	adds	r1, r1, r3
    5e5c:	6808      	ldr	r0, [r1, #0]
    5e5e:	6849      	ldr	r1, [r1, #4]
    5e60:	9a06      	ldr	r2, [sp, #24]
    5e62:	9b07      	ldr	r3, [sp, #28]
    5e64:	f001 feb4 	bl	7bd0 <__aeabi_dcmpgt>
    5e68:	2800      	cmp	r0, #0
    5e6a:	d04b      	beq.n	5f04 <_dtoa_r+0x21c>
    5e6c:	9b03      	ldr	r3, [sp, #12]
    5e6e:	3b01      	subs	r3, #1
    5e70:	9303      	str	r3, [sp, #12]
    5e72:	2300      	movs	r3, #0
    5e74:	9316      	str	r3, [sp, #88]	; 0x58
    5e76:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    5e78:	1b9e      	subs	r6, r3, r6
    5e7a:	2300      	movs	r3, #0
    5e7c:	930b      	str	r3, [sp, #44]	; 0x2c
    5e7e:	0033      	movs	r3, r6
    5e80:	3b01      	subs	r3, #1
    5e82:	930c      	str	r3, [sp, #48]	; 0x30
    5e84:	d504      	bpl.n	5e90 <_dtoa_r+0x1a8>
    5e86:	2301      	movs	r3, #1
    5e88:	1b9b      	subs	r3, r3, r6
    5e8a:	930b      	str	r3, [sp, #44]	; 0x2c
    5e8c:	2300      	movs	r3, #0
    5e8e:	930c      	str	r3, [sp, #48]	; 0x30
    5e90:	9b03      	ldr	r3, [sp, #12]
    5e92:	2b00      	cmp	r3, #0
    5e94:	db38      	blt.n	5f08 <_dtoa_r+0x220>
    5e96:	9a03      	ldr	r2, [sp, #12]
    5e98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5e9a:	4694      	mov	ip, r2
    5e9c:	4463      	add	r3, ip
    5e9e:	930c      	str	r3, [sp, #48]	; 0x30
    5ea0:	2300      	movs	r3, #0
    5ea2:	920f      	str	r2, [sp, #60]	; 0x3c
    5ea4:	9308      	str	r3, [sp, #32]
    5ea6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    5ea8:	2501      	movs	r5, #1
    5eaa:	2b09      	cmp	r3, #9
    5eac:	d900      	bls.n	5eb0 <_dtoa_r+0x1c8>
    5eae:	e091      	b.n	5fd4 <_dtoa_r+0x2ec>
    5eb0:	2b05      	cmp	r3, #5
    5eb2:	dd02      	ble.n	5eba <_dtoa_r+0x1d2>
    5eb4:	2500      	movs	r5, #0
    5eb6:	3b04      	subs	r3, #4
    5eb8:	9322      	str	r3, [sp, #136]	; 0x88
    5eba:	9b22      	ldr	r3, [sp, #136]	; 0x88
    5ebc:	1e98      	subs	r0, r3, #2
    5ebe:	2803      	cmp	r0, #3
    5ec0:	d900      	bls.n	5ec4 <_dtoa_r+0x1dc>
    5ec2:	e091      	b.n	5fe8 <_dtoa_r+0x300>
    5ec4:	f001 fcda 	bl	787c <__gnu_thumb1_case_uqi>
    5ec8:	76298482 	.word	0x76298482
    5ecc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    5ece:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    5ed0:	189e      	adds	r6, r3, r2
    5ed2:	4b64      	ldr	r3, [pc, #400]	; (6064 <_dtoa_r+0x37c>)
    5ed4:	18f2      	adds	r2, r6, r3
    5ed6:	2a20      	cmp	r2, #32
    5ed8:	dd0f      	ble.n	5efa <_dtoa_r+0x212>
    5eda:	4b63      	ldr	r3, [pc, #396]	; (6068 <_dtoa_r+0x380>)
    5edc:	9806      	ldr	r0, [sp, #24]
    5ede:	18f3      	adds	r3, r6, r3
    5ee0:	40d8      	lsrs	r0, r3
    5ee2:	2340      	movs	r3, #64	; 0x40
    5ee4:	1a9b      	subs	r3, r3, r2
    5ee6:	409c      	lsls	r4, r3
    5ee8:	4320      	orrs	r0, r4
    5eea:	f004 f94b 	bl	a184 <__aeabi_ui2d>
    5eee:	2301      	movs	r3, #1
    5ef0:	4c5e      	ldr	r4, [pc, #376]	; (606c <_dtoa_r+0x384>)
    5ef2:	3e01      	subs	r6, #1
    5ef4:	1909      	adds	r1, r1, r4
    5ef6:	9318      	str	r3, [sp, #96]	; 0x60
    5ef8:	e771      	b.n	5dde <_dtoa_r+0xf6>
    5efa:	2320      	movs	r3, #32
    5efc:	9806      	ldr	r0, [sp, #24]
    5efe:	1a9b      	subs	r3, r3, r2
    5f00:	4098      	lsls	r0, r3
    5f02:	e7f2      	b.n	5eea <_dtoa_r+0x202>
    5f04:	9016      	str	r0, [sp, #88]	; 0x58
    5f06:	e7b6      	b.n	5e76 <_dtoa_r+0x18e>
    5f08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5f0a:	9a03      	ldr	r2, [sp, #12]
    5f0c:	1a9b      	subs	r3, r3, r2
    5f0e:	930b      	str	r3, [sp, #44]	; 0x2c
    5f10:	4253      	negs	r3, r2
    5f12:	9308      	str	r3, [sp, #32]
    5f14:	2300      	movs	r3, #0
    5f16:	930f      	str	r3, [sp, #60]	; 0x3c
    5f18:	e7c5      	b.n	5ea6 <_dtoa_r+0x1be>
    5f1a:	2301      	movs	r3, #1
    5f1c:	930e      	str	r3, [sp, #56]	; 0x38
    5f1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    5f20:	2b00      	cmp	r3, #0
    5f22:	dd65      	ble.n	5ff0 <_dtoa_r+0x308>
    5f24:	001f      	movs	r7, r3
    5f26:	930d      	str	r3, [sp, #52]	; 0x34
    5f28:	9a04      	ldr	r2, [sp, #16]
    5f2a:	6a54      	ldr	r4, [r2, #36]	; 0x24
    5f2c:	2200      	movs	r2, #0
    5f2e:	6062      	str	r2, [r4, #4]
    5f30:	3204      	adds	r2, #4
    5f32:	0011      	movs	r1, r2
    5f34:	3114      	adds	r1, #20
    5f36:	4299      	cmp	r1, r3
    5f38:	d95f      	bls.n	5ffa <_dtoa_r+0x312>
    5f3a:	6861      	ldr	r1, [r4, #4]
    5f3c:	9804      	ldr	r0, [sp, #16]
    5f3e:	f000 fed0 	bl	6ce2 <_Balloc>
    5f42:	9b04      	ldr	r3, [sp, #16]
    5f44:	6020      	str	r0, [r4, #0]
    5f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5f48:	681b      	ldr	r3, [r3, #0]
    5f4a:	930a      	str	r3, [sp, #40]	; 0x28
    5f4c:	2f0e      	cmp	r7, #14
    5f4e:	d900      	bls.n	5f52 <_dtoa_r+0x26a>
    5f50:	e105      	b.n	615e <_dtoa_r+0x476>
    5f52:	2d00      	cmp	r5, #0
    5f54:	d100      	bne.n	5f58 <_dtoa_r+0x270>
    5f56:	e102      	b.n	615e <_dtoa_r+0x476>
    5f58:	9b06      	ldr	r3, [sp, #24]
    5f5a:	9c07      	ldr	r4, [sp, #28]
    5f5c:	9314      	str	r3, [sp, #80]	; 0x50
    5f5e:	9415      	str	r4, [sp, #84]	; 0x54
    5f60:	9b03      	ldr	r3, [sp, #12]
    5f62:	2b00      	cmp	r3, #0
    5f64:	dc00      	bgt.n	5f68 <_dtoa_r+0x280>
    5f66:	e085      	b.n	6074 <_dtoa_r+0x38c>
    5f68:	001a      	movs	r2, r3
    5f6a:	210f      	movs	r1, #15
    5f6c:	4b3c      	ldr	r3, [pc, #240]	; (6060 <_dtoa_r+0x378>)
    5f6e:	400a      	ands	r2, r1
    5f70:	00d2      	lsls	r2, r2, #3
    5f72:	189b      	adds	r3, r3, r2
    5f74:	685c      	ldr	r4, [r3, #4]
    5f76:	681b      	ldr	r3, [r3, #0]
    5f78:	9310      	str	r3, [sp, #64]	; 0x40
    5f7a:	9411      	str	r4, [sp, #68]	; 0x44
    5f7c:	9b03      	ldr	r3, [sp, #12]
    5f7e:	2402      	movs	r4, #2
    5f80:	111d      	asrs	r5, r3, #4
    5f82:	06eb      	lsls	r3, r5, #27
    5f84:	d50a      	bpl.n	5f9c <_dtoa_r+0x2b4>
    5f86:	4b3a      	ldr	r3, [pc, #232]	; (6070 <_dtoa_r+0x388>)
    5f88:	400d      	ands	r5, r1
    5f8a:	6a1a      	ldr	r2, [r3, #32]
    5f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5f8e:	9814      	ldr	r0, [sp, #80]	; 0x50
    5f90:	9915      	ldr	r1, [sp, #84]	; 0x54
    5f92:	f002 fe97 	bl	8cc4 <__aeabi_ddiv>
    5f96:	9006      	str	r0, [sp, #24]
    5f98:	9107      	str	r1, [sp, #28]
    5f9a:	3401      	adds	r4, #1
    5f9c:	4e34      	ldr	r6, [pc, #208]	; (6070 <_dtoa_r+0x388>)
    5f9e:	2d00      	cmp	r5, #0
    5fa0:	d130      	bne.n	6004 <_dtoa_r+0x31c>
    5fa2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5fa4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5fa6:	9806      	ldr	r0, [sp, #24]
    5fa8:	9907      	ldr	r1, [sp, #28]
    5faa:	f002 fe8b 	bl	8cc4 <__aeabi_ddiv>
    5fae:	9006      	str	r0, [sp, #24]
    5fb0:	9107      	str	r1, [sp, #28]
    5fb2:	e07a      	b.n	60aa <_dtoa_r+0x3c2>
    5fb4:	2301      	movs	r3, #1
    5fb6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    5fb8:	930e      	str	r3, [sp, #56]	; 0x38
    5fba:	4694      	mov	ip, r2
    5fbc:	9b03      	ldr	r3, [sp, #12]
    5fbe:	4463      	add	r3, ip
    5fc0:	1c5f      	adds	r7, r3, #1
    5fc2:	930d      	str	r3, [sp, #52]	; 0x34
    5fc4:	1e3b      	subs	r3, r7, #0
    5fc6:	dcaf      	bgt.n	5f28 <_dtoa_r+0x240>
    5fc8:	2301      	movs	r3, #1
    5fca:	e7ad      	b.n	5f28 <_dtoa_r+0x240>
    5fcc:	2300      	movs	r3, #0
    5fce:	e7a5      	b.n	5f1c <_dtoa_r+0x234>
    5fd0:	2300      	movs	r3, #0
    5fd2:	e7f0      	b.n	5fb6 <_dtoa_r+0x2ce>
    5fd4:	2300      	movs	r3, #0
    5fd6:	950e      	str	r5, [sp, #56]	; 0x38
    5fd8:	9322      	str	r3, [sp, #136]	; 0x88
    5fda:	3b01      	subs	r3, #1
    5fdc:	2200      	movs	r2, #0
    5fde:	930d      	str	r3, [sp, #52]	; 0x34
    5fe0:	001f      	movs	r7, r3
    5fe2:	3313      	adds	r3, #19
    5fe4:	9223      	str	r2, [sp, #140]	; 0x8c
    5fe6:	e79f      	b.n	5f28 <_dtoa_r+0x240>
    5fe8:	2301      	movs	r3, #1
    5fea:	930e      	str	r3, [sp, #56]	; 0x38
    5fec:	3b02      	subs	r3, #2
    5fee:	e7f5      	b.n	5fdc <_dtoa_r+0x2f4>
    5ff0:	2301      	movs	r3, #1
    5ff2:	930d      	str	r3, [sp, #52]	; 0x34
    5ff4:	001f      	movs	r7, r3
    5ff6:	001a      	movs	r2, r3
    5ff8:	e7f4      	b.n	5fe4 <_dtoa_r+0x2fc>
    5ffa:	6861      	ldr	r1, [r4, #4]
    5ffc:	0052      	lsls	r2, r2, #1
    5ffe:	3101      	adds	r1, #1
    6000:	6061      	str	r1, [r4, #4]
    6002:	e796      	b.n	5f32 <_dtoa_r+0x24a>
    6004:	2301      	movs	r3, #1
    6006:	421d      	tst	r5, r3
    6008:	d008      	beq.n	601c <_dtoa_r+0x334>
    600a:	9810      	ldr	r0, [sp, #64]	; 0x40
    600c:	9911      	ldr	r1, [sp, #68]	; 0x44
    600e:	18e4      	adds	r4, r4, r3
    6010:	6832      	ldr	r2, [r6, #0]
    6012:	6873      	ldr	r3, [r6, #4]
    6014:	f003 fa8a 	bl	952c <__aeabi_dmul>
    6018:	9010      	str	r0, [sp, #64]	; 0x40
    601a:	9111      	str	r1, [sp, #68]	; 0x44
    601c:	106d      	asrs	r5, r5, #1
    601e:	3608      	adds	r6, #8
    6020:	e7bd      	b.n	5f9e <_dtoa_r+0x2b6>
    6022:	46c0      	nop			; (mov r8, r8)
    6024:	7ff00000 	.word	0x7ff00000
    6028:	0000270f 	.word	0x0000270f
    602c:	0000a545 	.word	0x0000a545
    6030:	0000a548 	.word	0x0000a548
    6034:	0000a518 	.word	0x0000a518
    6038:	0000a519 	.word	0x0000a519
    603c:	3ff00000 	.word	0x3ff00000
    6040:	fffffc01 	.word	0xfffffc01
    6044:	3ff80000 	.word	0x3ff80000
    6048:	636f4361 	.word	0x636f4361
    604c:	3fd287a7 	.word	0x3fd287a7
    6050:	8b60c8b3 	.word	0x8b60c8b3
    6054:	3fc68a28 	.word	0x3fc68a28
    6058:	509f79fb 	.word	0x509f79fb
    605c:	3fd34413 	.word	0x3fd34413
    6060:	0000a5d8 	.word	0x0000a5d8
    6064:	00000432 	.word	0x00000432
    6068:	00000412 	.word	0x00000412
    606c:	fe100000 	.word	0xfe100000
    6070:	0000a5b0 	.word	0x0000a5b0
    6074:	9b03      	ldr	r3, [sp, #12]
    6076:	2402      	movs	r4, #2
    6078:	2b00      	cmp	r3, #0
    607a:	d016      	beq.n	60aa <_dtoa_r+0x3c2>
    607c:	9814      	ldr	r0, [sp, #80]	; 0x50
    607e:	9915      	ldr	r1, [sp, #84]	; 0x54
    6080:	425d      	negs	r5, r3
    6082:	230f      	movs	r3, #15
    6084:	4aca      	ldr	r2, [pc, #808]	; (63b0 <_dtoa_r+0x6c8>)
    6086:	402b      	ands	r3, r5
    6088:	00db      	lsls	r3, r3, #3
    608a:	18d3      	adds	r3, r2, r3
    608c:	681a      	ldr	r2, [r3, #0]
    608e:	685b      	ldr	r3, [r3, #4]
    6090:	f003 fa4c 	bl	952c <__aeabi_dmul>
    6094:	2300      	movs	r3, #0
    6096:	9006      	str	r0, [sp, #24]
    6098:	9107      	str	r1, [sp, #28]
    609a:	4ec6      	ldr	r6, [pc, #792]	; (63b4 <_dtoa_r+0x6cc>)
    609c:	112d      	asrs	r5, r5, #4
    609e:	2d00      	cmp	r5, #0
    60a0:	d000      	beq.n	60a4 <_dtoa_r+0x3bc>
    60a2:	e08c      	b.n	61be <_dtoa_r+0x4d6>
    60a4:	2b00      	cmp	r3, #0
    60a6:	d000      	beq.n	60aa <_dtoa_r+0x3c2>
    60a8:	e781      	b.n	5fae <_dtoa_r+0x2c6>
    60aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
    60ac:	2b00      	cmp	r3, #0
    60ae:	d100      	bne.n	60b2 <_dtoa_r+0x3ca>
    60b0:	e091      	b.n	61d6 <_dtoa_r+0x4ee>
    60b2:	9a06      	ldr	r2, [sp, #24]
    60b4:	9b07      	ldr	r3, [sp, #28]
    60b6:	9210      	str	r2, [sp, #64]	; 0x40
    60b8:	9311      	str	r3, [sp, #68]	; 0x44
    60ba:	9810      	ldr	r0, [sp, #64]	; 0x40
    60bc:	9911      	ldr	r1, [sp, #68]	; 0x44
    60be:	2200      	movs	r2, #0
    60c0:	4bbd      	ldr	r3, [pc, #756]	; (63b8 <_dtoa_r+0x6d0>)
    60c2:	f001 fd71 	bl	7ba8 <__aeabi_dcmplt>
    60c6:	2800      	cmp	r0, #0
    60c8:	d100      	bne.n	60cc <_dtoa_r+0x3e4>
    60ca:	e084      	b.n	61d6 <_dtoa_r+0x4ee>
    60cc:	2f00      	cmp	r7, #0
    60ce:	d100      	bne.n	60d2 <_dtoa_r+0x3ea>
    60d0:	e081      	b.n	61d6 <_dtoa_r+0x4ee>
    60d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    60d4:	2b00      	cmp	r3, #0
    60d6:	dd3e      	ble.n	6156 <_dtoa_r+0x46e>
    60d8:	9810      	ldr	r0, [sp, #64]	; 0x40
    60da:	9911      	ldr	r1, [sp, #68]	; 0x44
    60dc:	9b03      	ldr	r3, [sp, #12]
    60de:	2200      	movs	r2, #0
    60e0:	1e5e      	subs	r6, r3, #1
    60e2:	4bb6      	ldr	r3, [pc, #728]	; (63bc <_dtoa_r+0x6d4>)
    60e4:	f003 fa22 	bl	952c <__aeabi_dmul>
    60e8:	9006      	str	r0, [sp, #24]
    60ea:	9107      	str	r1, [sp, #28]
    60ec:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    60ee:	3401      	adds	r4, #1
    60f0:	0020      	movs	r0, r4
    60f2:	f004 f805 	bl	a100 <__aeabi_i2d>
    60f6:	9a06      	ldr	r2, [sp, #24]
    60f8:	9b07      	ldr	r3, [sp, #28]
    60fa:	f003 fa17 	bl	952c <__aeabi_dmul>
    60fe:	2200      	movs	r2, #0
    6100:	4baf      	ldr	r3, [pc, #700]	; (63c0 <_dtoa_r+0x6d8>)
    6102:	f002 facf 	bl	86a4 <__aeabi_dadd>
    6106:	9012      	str	r0, [sp, #72]	; 0x48
    6108:	9113      	str	r1, [sp, #76]	; 0x4c
    610a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    610c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    610e:	4aad      	ldr	r2, [pc, #692]	; (63c4 <_dtoa_r+0x6dc>)
    6110:	9310      	str	r3, [sp, #64]	; 0x40
    6112:	9411      	str	r4, [sp, #68]	; 0x44
    6114:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6116:	189c      	adds	r4, r3, r2
    6118:	9411      	str	r4, [sp, #68]	; 0x44
    611a:	2d00      	cmp	r5, #0
    611c:	d15e      	bne.n	61dc <_dtoa_r+0x4f4>
    611e:	9806      	ldr	r0, [sp, #24]
    6120:	9907      	ldr	r1, [sp, #28]
    6122:	2200      	movs	r2, #0
    6124:	4ba8      	ldr	r3, [pc, #672]	; (63c8 <_dtoa_r+0x6e0>)
    6126:	f003 fc81 	bl	9a2c <__aeabi_dsub>
    612a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    612c:	0023      	movs	r3, r4
    612e:	9006      	str	r0, [sp, #24]
    6130:	9107      	str	r1, [sp, #28]
    6132:	f001 fd4d 	bl	7bd0 <__aeabi_dcmpgt>
    6136:	2800      	cmp	r0, #0
    6138:	d000      	beq.n	613c <_dtoa_r+0x454>
    613a:	e301      	b.n	6740 <_dtoa_r+0xa58>
    613c:	48a3      	ldr	r0, [pc, #652]	; (63cc <_dtoa_r+0x6e4>)
    613e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    6140:	4684      	mov	ip, r0
    6142:	4461      	add	r1, ip
    6144:	000b      	movs	r3, r1
    6146:	9806      	ldr	r0, [sp, #24]
    6148:	9907      	ldr	r1, [sp, #28]
    614a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    614c:	f001 fd2c 	bl	7ba8 <__aeabi_dcmplt>
    6150:	2800      	cmp	r0, #0
    6152:	d000      	beq.n	6156 <_dtoa_r+0x46e>
    6154:	e2e8      	b.n	6728 <_dtoa_r+0xa40>
    6156:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6158:	9c15      	ldr	r4, [sp, #84]	; 0x54
    615a:	9306      	str	r3, [sp, #24]
    615c:	9407      	str	r4, [sp, #28]
    615e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    6160:	2b00      	cmp	r3, #0
    6162:	da00      	bge.n	6166 <_dtoa_r+0x47e>
    6164:	e157      	b.n	6416 <_dtoa_r+0x72e>
    6166:	9a03      	ldr	r2, [sp, #12]
    6168:	2a0e      	cmp	r2, #14
    616a:	dd00      	ble.n	616e <_dtoa_r+0x486>
    616c:	e153      	b.n	6416 <_dtoa_r+0x72e>
    616e:	4b90      	ldr	r3, [pc, #576]	; (63b0 <_dtoa_r+0x6c8>)
    6170:	00d2      	lsls	r2, r2, #3
    6172:	189b      	adds	r3, r3, r2
    6174:	685c      	ldr	r4, [r3, #4]
    6176:	681b      	ldr	r3, [r3, #0]
    6178:	9308      	str	r3, [sp, #32]
    617a:	9409      	str	r4, [sp, #36]	; 0x24
    617c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    617e:	2b00      	cmp	r3, #0
    6180:	db00      	blt.n	6184 <_dtoa_r+0x49c>
    6182:	e0ce      	b.n	6322 <_dtoa_r+0x63a>
    6184:	2f00      	cmp	r7, #0
    6186:	dd00      	ble.n	618a <_dtoa_r+0x4a2>
    6188:	e0cb      	b.n	6322 <_dtoa_r+0x63a>
    618a:	d000      	beq.n	618e <_dtoa_r+0x4a6>
    618c:	e2cf      	b.n	672e <_dtoa_r+0xa46>
    618e:	9808      	ldr	r0, [sp, #32]
    6190:	9909      	ldr	r1, [sp, #36]	; 0x24
    6192:	2200      	movs	r2, #0
    6194:	4b8c      	ldr	r3, [pc, #560]	; (63c8 <_dtoa_r+0x6e0>)
    6196:	f003 f9c9 	bl	952c <__aeabi_dmul>
    619a:	9a06      	ldr	r2, [sp, #24]
    619c:	9b07      	ldr	r3, [sp, #28]
    619e:	f001 fd21 	bl	7be4 <__aeabi_dcmpge>
    61a2:	003e      	movs	r6, r7
    61a4:	9708      	str	r7, [sp, #32]
    61a6:	2800      	cmp	r0, #0
    61a8:	d000      	beq.n	61ac <_dtoa_r+0x4c4>
    61aa:	e2a4      	b.n	66f6 <_dtoa_r+0xa0e>
    61ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    61ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    61b0:	1c5d      	adds	r5, r3, #1
    61b2:	2331      	movs	r3, #49	; 0x31
    61b4:	7013      	strb	r3, [r2, #0]
    61b6:	9b03      	ldr	r3, [sp, #12]
    61b8:	3301      	adds	r3, #1
    61ba:	9303      	str	r3, [sp, #12]
    61bc:	e29f      	b.n	66fe <_dtoa_r+0xa16>
    61be:	2201      	movs	r2, #1
    61c0:	4215      	tst	r5, r2
    61c2:	d005      	beq.n	61d0 <_dtoa_r+0x4e8>
    61c4:	18a4      	adds	r4, r4, r2
    61c6:	6832      	ldr	r2, [r6, #0]
    61c8:	6873      	ldr	r3, [r6, #4]
    61ca:	f003 f9af 	bl	952c <__aeabi_dmul>
    61ce:	2301      	movs	r3, #1
    61d0:	106d      	asrs	r5, r5, #1
    61d2:	3608      	adds	r6, #8
    61d4:	e763      	b.n	609e <_dtoa_r+0x3b6>
    61d6:	9e03      	ldr	r6, [sp, #12]
    61d8:	003d      	movs	r5, r7
    61da:	e789      	b.n	60f0 <_dtoa_r+0x408>
    61dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    61de:	1e69      	subs	r1, r5, #1
    61e0:	1952      	adds	r2, r2, r5
    61e2:	9217      	str	r2, [sp, #92]	; 0x5c
    61e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    61e6:	4b72      	ldr	r3, [pc, #456]	; (63b0 <_dtoa_r+0x6c8>)
    61e8:	00c9      	lsls	r1, r1, #3
    61ea:	2a00      	cmp	r2, #0
    61ec:	d04a      	beq.n	6284 <_dtoa_r+0x59c>
    61ee:	185b      	adds	r3, r3, r1
    61f0:	681a      	ldr	r2, [r3, #0]
    61f2:	685b      	ldr	r3, [r3, #4]
    61f4:	2000      	movs	r0, #0
    61f6:	4976      	ldr	r1, [pc, #472]	; (63d0 <_dtoa_r+0x6e8>)
    61f8:	f002 fd64 	bl	8cc4 <__aeabi_ddiv>
    61fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    61fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6200:	f003 fc14 	bl	9a2c <__aeabi_dsub>
    6204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6206:	9010      	str	r0, [sp, #64]	; 0x40
    6208:	9111      	str	r1, [sp, #68]	; 0x44
    620a:	9312      	str	r3, [sp, #72]	; 0x48
    620c:	9806      	ldr	r0, [sp, #24]
    620e:	9907      	ldr	r1, [sp, #28]
    6210:	f003 ff42 	bl	a098 <__aeabi_d2iz>
    6214:	0004      	movs	r4, r0
    6216:	f003 ff73 	bl	a100 <__aeabi_i2d>
    621a:	0002      	movs	r2, r0
    621c:	000b      	movs	r3, r1
    621e:	9806      	ldr	r0, [sp, #24]
    6220:	9907      	ldr	r1, [sp, #28]
    6222:	f003 fc03 	bl	9a2c <__aeabi_dsub>
    6226:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6228:	3430      	adds	r4, #48	; 0x30
    622a:	1c5d      	adds	r5, r3, #1
    622c:	701c      	strb	r4, [r3, #0]
    622e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6230:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6232:	9006      	str	r0, [sp, #24]
    6234:	9107      	str	r1, [sp, #28]
    6236:	f001 fcb7 	bl	7ba8 <__aeabi_dcmplt>
    623a:	2800      	cmp	r0, #0
    623c:	d165      	bne.n	630a <_dtoa_r+0x622>
    623e:	9a06      	ldr	r2, [sp, #24]
    6240:	9b07      	ldr	r3, [sp, #28]
    6242:	2000      	movs	r0, #0
    6244:	495c      	ldr	r1, [pc, #368]	; (63b8 <_dtoa_r+0x6d0>)
    6246:	f003 fbf1 	bl	9a2c <__aeabi_dsub>
    624a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    624c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    624e:	f001 fcab 	bl	7ba8 <__aeabi_dcmplt>
    6252:	2800      	cmp	r0, #0
    6254:	d000      	beq.n	6258 <_dtoa_r+0x570>
    6256:	e0be      	b.n	63d6 <_dtoa_r+0x6ee>
    6258:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    625a:	429d      	cmp	r5, r3
    625c:	d100      	bne.n	6260 <_dtoa_r+0x578>
    625e:	e77a      	b.n	6156 <_dtoa_r+0x46e>
    6260:	9810      	ldr	r0, [sp, #64]	; 0x40
    6262:	9911      	ldr	r1, [sp, #68]	; 0x44
    6264:	2200      	movs	r2, #0
    6266:	4b55      	ldr	r3, [pc, #340]	; (63bc <_dtoa_r+0x6d4>)
    6268:	f003 f960 	bl	952c <__aeabi_dmul>
    626c:	2200      	movs	r2, #0
    626e:	9010      	str	r0, [sp, #64]	; 0x40
    6270:	9111      	str	r1, [sp, #68]	; 0x44
    6272:	9806      	ldr	r0, [sp, #24]
    6274:	9907      	ldr	r1, [sp, #28]
    6276:	4b51      	ldr	r3, [pc, #324]	; (63bc <_dtoa_r+0x6d4>)
    6278:	f003 f958 	bl	952c <__aeabi_dmul>
    627c:	9512      	str	r5, [sp, #72]	; 0x48
    627e:	9006      	str	r0, [sp, #24]
    6280:	9107      	str	r1, [sp, #28]
    6282:	e7c3      	b.n	620c <_dtoa_r+0x524>
    6284:	1859      	adds	r1, r3, r1
    6286:	6808      	ldr	r0, [r1, #0]
    6288:	6849      	ldr	r1, [r1, #4]
    628a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    628c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    628e:	f003 f94d 	bl	952c <__aeabi_dmul>
    6292:	9010      	str	r0, [sp, #64]	; 0x40
    6294:	9111      	str	r1, [sp, #68]	; 0x44
    6296:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    6298:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    629a:	9806      	ldr	r0, [sp, #24]
    629c:	9907      	ldr	r1, [sp, #28]
    629e:	f003 fefb 	bl	a098 <__aeabi_d2iz>
    62a2:	9012      	str	r0, [sp, #72]	; 0x48
    62a4:	f003 ff2c 	bl	a100 <__aeabi_i2d>
    62a8:	0002      	movs	r2, r0
    62aa:	000b      	movs	r3, r1
    62ac:	9806      	ldr	r0, [sp, #24]
    62ae:	9907      	ldr	r1, [sp, #28]
    62b0:	f003 fbbc 	bl	9a2c <__aeabi_dsub>
    62b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    62b6:	9006      	str	r0, [sp, #24]
    62b8:	9107      	str	r1, [sp, #28]
    62ba:	3330      	adds	r3, #48	; 0x30
    62bc:	7023      	strb	r3, [r4, #0]
    62be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    62c0:	3401      	adds	r4, #1
    62c2:	2200      	movs	r2, #0
    62c4:	42a3      	cmp	r3, r4
    62c6:	d124      	bne.n	6312 <_dtoa_r+0x62a>
    62c8:	4b41      	ldr	r3, [pc, #260]	; (63d0 <_dtoa_r+0x6e8>)
    62ca:	9810      	ldr	r0, [sp, #64]	; 0x40
    62cc:	9911      	ldr	r1, [sp, #68]	; 0x44
    62ce:	f002 f9e9 	bl	86a4 <__aeabi_dadd>
    62d2:	0002      	movs	r2, r0
    62d4:	000b      	movs	r3, r1
    62d6:	9806      	ldr	r0, [sp, #24]
    62d8:	9907      	ldr	r1, [sp, #28]
    62da:	f001 fc79 	bl	7bd0 <__aeabi_dcmpgt>
    62de:	2800      	cmp	r0, #0
    62e0:	d000      	beq.n	62e4 <_dtoa_r+0x5fc>
    62e2:	e078      	b.n	63d6 <_dtoa_r+0x6ee>
    62e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    62e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    62e8:	2000      	movs	r0, #0
    62ea:	4939      	ldr	r1, [pc, #228]	; (63d0 <_dtoa_r+0x6e8>)
    62ec:	f003 fb9e 	bl	9a2c <__aeabi_dsub>
    62f0:	0002      	movs	r2, r0
    62f2:	000b      	movs	r3, r1
    62f4:	9806      	ldr	r0, [sp, #24]
    62f6:	9907      	ldr	r1, [sp, #28]
    62f8:	f001 fc56 	bl	7ba8 <__aeabi_dcmplt>
    62fc:	2800      	cmp	r0, #0
    62fe:	d100      	bne.n	6302 <_dtoa_r+0x61a>
    6300:	e729      	b.n	6156 <_dtoa_r+0x46e>
    6302:	1e6b      	subs	r3, r5, #1
    6304:	781a      	ldrb	r2, [r3, #0]
    6306:	2a30      	cmp	r2, #48	; 0x30
    6308:	d001      	beq.n	630e <_dtoa_r+0x626>
    630a:	9603      	str	r6, [sp, #12]
    630c:	e03f      	b.n	638e <_dtoa_r+0x6a6>
    630e:	001d      	movs	r5, r3
    6310:	e7f7      	b.n	6302 <_dtoa_r+0x61a>
    6312:	9806      	ldr	r0, [sp, #24]
    6314:	9907      	ldr	r1, [sp, #28]
    6316:	4b29      	ldr	r3, [pc, #164]	; (63bc <_dtoa_r+0x6d4>)
    6318:	f003 f908 	bl	952c <__aeabi_dmul>
    631c:	9006      	str	r0, [sp, #24]
    631e:	9107      	str	r1, [sp, #28]
    6320:	e7bb      	b.n	629a <_dtoa_r+0x5b2>
    6322:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    6324:	9a08      	ldr	r2, [sp, #32]
    6326:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6328:	9806      	ldr	r0, [sp, #24]
    632a:	9907      	ldr	r1, [sp, #28]
    632c:	f002 fcca 	bl	8cc4 <__aeabi_ddiv>
    6330:	f003 feb2 	bl	a098 <__aeabi_d2iz>
    6334:	0004      	movs	r4, r0
    6336:	f003 fee3 	bl	a100 <__aeabi_i2d>
    633a:	9a08      	ldr	r2, [sp, #32]
    633c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    633e:	f003 f8f5 	bl	952c <__aeabi_dmul>
    6342:	000b      	movs	r3, r1
    6344:	0002      	movs	r2, r0
    6346:	9806      	ldr	r0, [sp, #24]
    6348:	9907      	ldr	r1, [sp, #28]
    634a:	f003 fb6f 	bl	9a2c <__aeabi_dsub>
    634e:	0023      	movs	r3, r4
    6350:	3330      	adds	r3, #48	; 0x30
    6352:	7033      	strb	r3, [r6, #0]
    6354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6356:	1c75      	adds	r5, r6, #1
    6358:	1aeb      	subs	r3, r5, r3
    635a:	429f      	cmp	r7, r3
    635c:	d14c      	bne.n	63f8 <_dtoa_r+0x710>
    635e:	0002      	movs	r2, r0
    6360:	000b      	movs	r3, r1
    6362:	f002 f99f 	bl	86a4 <__aeabi_dadd>
    6366:	0006      	movs	r6, r0
    6368:	000f      	movs	r7, r1
    636a:	0002      	movs	r2, r0
    636c:	000b      	movs	r3, r1
    636e:	9808      	ldr	r0, [sp, #32]
    6370:	9909      	ldr	r1, [sp, #36]	; 0x24
    6372:	f001 fc19 	bl	7ba8 <__aeabi_dcmplt>
    6376:	2800      	cmp	r0, #0
    6378:	d12c      	bne.n	63d4 <_dtoa_r+0x6ec>
    637a:	9808      	ldr	r0, [sp, #32]
    637c:	9909      	ldr	r1, [sp, #36]	; 0x24
    637e:	0032      	movs	r2, r6
    6380:	003b      	movs	r3, r7
    6382:	f001 fc0b 	bl	7b9c <__aeabi_dcmpeq>
    6386:	2800      	cmp	r0, #0
    6388:	d001      	beq.n	638e <_dtoa_r+0x6a6>
    638a:	07e3      	lsls	r3, r4, #31
    638c:	d422      	bmi.n	63d4 <_dtoa_r+0x6ec>
    638e:	9905      	ldr	r1, [sp, #20]
    6390:	9804      	ldr	r0, [sp, #16]
    6392:	f000 fcde 	bl	6d52 <_Bfree>
    6396:	2300      	movs	r3, #0
    6398:	702b      	strb	r3, [r5, #0]
    639a:	9b03      	ldr	r3, [sp, #12]
    639c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    639e:	3301      	adds	r3, #1
    63a0:	6013      	str	r3, [r2, #0]
    63a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
    63a4:	2b00      	cmp	r3, #0
    63a6:	d100      	bne.n	63aa <_dtoa_r+0x6c2>
    63a8:	e275      	b.n	6896 <_dtoa_r+0xbae>
    63aa:	601d      	str	r5, [r3, #0]
    63ac:	e273      	b.n	6896 <_dtoa_r+0xbae>
    63ae:	46c0      	nop			; (mov r8, r8)
    63b0:	0000a5d8 	.word	0x0000a5d8
    63b4:	0000a5b0 	.word	0x0000a5b0
    63b8:	3ff00000 	.word	0x3ff00000
    63bc:	40240000 	.word	0x40240000
    63c0:	401c0000 	.word	0x401c0000
    63c4:	fcc00000 	.word	0xfcc00000
    63c8:	40140000 	.word	0x40140000
    63cc:	7cc00000 	.word	0x7cc00000
    63d0:	3fe00000 	.word	0x3fe00000
    63d4:	9e03      	ldr	r6, [sp, #12]
    63d6:	1e6b      	subs	r3, r5, #1
    63d8:	781a      	ldrb	r2, [r3, #0]
    63da:	2a39      	cmp	r2, #57	; 0x39
    63dc:	d106      	bne.n	63ec <_dtoa_r+0x704>
    63de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    63e0:	429a      	cmp	r2, r3
    63e2:	d107      	bne.n	63f4 <_dtoa_r+0x70c>
    63e4:	2330      	movs	r3, #48	; 0x30
    63e6:	7013      	strb	r3, [r2, #0]
    63e8:	0013      	movs	r3, r2
    63ea:	3601      	adds	r6, #1
    63ec:	781a      	ldrb	r2, [r3, #0]
    63ee:	3201      	adds	r2, #1
    63f0:	701a      	strb	r2, [r3, #0]
    63f2:	e78a      	b.n	630a <_dtoa_r+0x622>
    63f4:	001d      	movs	r5, r3
    63f6:	e7ee      	b.n	63d6 <_dtoa_r+0x6ee>
    63f8:	2200      	movs	r2, #0
    63fa:	4bcf      	ldr	r3, [pc, #828]	; (6738 <_dtoa_r+0xa50>)
    63fc:	f003 f896 	bl	952c <__aeabi_dmul>
    6400:	2200      	movs	r2, #0
    6402:	2300      	movs	r3, #0
    6404:	9006      	str	r0, [sp, #24]
    6406:	9107      	str	r1, [sp, #28]
    6408:	002e      	movs	r6, r5
    640a:	f001 fbc7 	bl	7b9c <__aeabi_dcmpeq>
    640e:	2800      	cmp	r0, #0
    6410:	d100      	bne.n	6414 <_dtoa_r+0x72c>
    6412:	e787      	b.n	6324 <_dtoa_r+0x63c>
    6414:	e7bb      	b.n	638e <_dtoa_r+0x6a6>
    6416:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6418:	2a00      	cmp	r2, #0
    641a:	d100      	bne.n	641e <_dtoa_r+0x736>
    641c:	e087      	b.n	652e <_dtoa_r+0x846>
    641e:	9a22      	ldr	r2, [sp, #136]	; 0x88
    6420:	2a01      	cmp	r2, #1
    6422:	dc6e      	bgt.n	6502 <_dtoa_r+0x81a>
    6424:	9a18      	ldr	r2, [sp, #96]	; 0x60
    6426:	2a00      	cmp	r2, #0
    6428:	d067      	beq.n	64fa <_dtoa_r+0x812>
    642a:	4ac4      	ldr	r2, [pc, #784]	; (673c <_dtoa_r+0xa54>)
    642c:	189b      	adds	r3, r3, r2
    642e:	9d08      	ldr	r5, [sp, #32]
    6430:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    6432:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6434:	2101      	movs	r1, #1
    6436:	18d2      	adds	r2, r2, r3
    6438:	920b      	str	r2, [sp, #44]	; 0x2c
    643a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    643c:	9804      	ldr	r0, [sp, #16]
    643e:	18d3      	adds	r3, r2, r3
    6440:	930c      	str	r3, [sp, #48]	; 0x30
    6442:	f000 fd24 	bl	6e8e <__i2b>
    6446:	0006      	movs	r6, r0
    6448:	2c00      	cmp	r4, #0
    644a:	dd0e      	ble.n	646a <_dtoa_r+0x782>
    644c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    644e:	2b00      	cmp	r3, #0
    6450:	dd0b      	ble.n	646a <_dtoa_r+0x782>
    6452:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6454:	0023      	movs	r3, r4
    6456:	4294      	cmp	r4, r2
    6458:	dd00      	ble.n	645c <_dtoa_r+0x774>
    645a:	0013      	movs	r3, r2
    645c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    645e:	1ae4      	subs	r4, r4, r3
    6460:	1ad2      	subs	r2, r2, r3
    6462:	920b      	str	r2, [sp, #44]	; 0x2c
    6464:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6466:	1ad3      	subs	r3, r2, r3
    6468:	930c      	str	r3, [sp, #48]	; 0x30
    646a:	9b08      	ldr	r3, [sp, #32]
    646c:	2b00      	cmp	r3, #0
    646e:	d01e      	beq.n	64ae <_dtoa_r+0x7c6>
    6470:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6472:	2b00      	cmp	r3, #0
    6474:	d05f      	beq.n	6536 <_dtoa_r+0x84e>
    6476:	2d00      	cmp	r5, #0
    6478:	dd11      	ble.n	649e <_dtoa_r+0x7b6>
    647a:	0031      	movs	r1, r6
    647c:	002a      	movs	r2, r5
    647e:	9804      	ldr	r0, [sp, #16]
    6480:	f000 fd9e 	bl	6fc0 <__pow5mult>
    6484:	9a05      	ldr	r2, [sp, #20]
    6486:	0001      	movs	r1, r0
    6488:	0006      	movs	r6, r0
    648a:	9804      	ldr	r0, [sp, #16]
    648c:	f000 fd08 	bl	6ea0 <__multiply>
    6490:	9905      	ldr	r1, [sp, #20]
    6492:	9010      	str	r0, [sp, #64]	; 0x40
    6494:	9804      	ldr	r0, [sp, #16]
    6496:	f000 fc5c 	bl	6d52 <_Bfree>
    649a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    649c:	9305      	str	r3, [sp, #20]
    649e:	9b08      	ldr	r3, [sp, #32]
    64a0:	1b5a      	subs	r2, r3, r5
    64a2:	d004      	beq.n	64ae <_dtoa_r+0x7c6>
    64a4:	9905      	ldr	r1, [sp, #20]
    64a6:	9804      	ldr	r0, [sp, #16]
    64a8:	f000 fd8a 	bl	6fc0 <__pow5mult>
    64ac:	9005      	str	r0, [sp, #20]
    64ae:	2101      	movs	r1, #1
    64b0:	9804      	ldr	r0, [sp, #16]
    64b2:	f000 fcec 	bl	6e8e <__i2b>
    64b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    64b8:	9008      	str	r0, [sp, #32]
    64ba:	2b00      	cmp	r3, #0
    64bc:	dd3d      	ble.n	653a <_dtoa_r+0x852>
    64be:	001a      	movs	r2, r3
    64c0:	0001      	movs	r1, r0
    64c2:	9804      	ldr	r0, [sp, #16]
    64c4:	f000 fd7c 	bl	6fc0 <__pow5mult>
    64c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    64ca:	9008      	str	r0, [sp, #32]
    64cc:	2500      	movs	r5, #0
    64ce:	2b01      	cmp	r3, #1
    64d0:	dc3b      	bgt.n	654a <_dtoa_r+0x862>
    64d2:	2500      	movs	r5, #0
    64d4:	9b06      	ldr	r3, [sp, #24]
    64d6:	42ab      	cmp	r3, r5
    64d8:	d133      	bne.n	6542 <_dtoa_r+0x85a>
    64da:	9b07      	ldr	r3, [sp, #28]
    64dc:	031b      	lsls	r3, r3, #12
    64de:	42ab      	cmp	r3, r5
    64e0:	d12f      	bne.n	6542 <_dtoa_r+0x85a>
    64e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    64e4:	9a07      	ldr	r2, [sp, #28]
    64e6:	4213      	tst	r3, r2
    64e8:	d02b      	beq.n	6542 <_dtoa_r+0x85a>
    64ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    64ec:	3501      	adds	r5, #1
    64ee:	3301      	adds	r3, #1
    64f0:	930b      	str	r3, [sp, #44]	; 0x2c
    64f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    64f4:	3301      	adds	r3, #1
    64f6:	930c      	str	r3, [sp, #48]	; 0x30
    64f8:	e023      	b.n	6542 <_dtoa_r+0x85a>
    64fa:	2336      	movs	r3, #54	; 0x36
    64fc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    64fe:	1a9b      	subs	r3, r3, r2
    6500:	e795      	b.n	642e <_dtoa_r+0x746>
    6502:	9b08      	ldr	r3, [sp, #32]
    6504:	1e7d      	subs	r5, r7, #1
    6506:	42ab      	cmp	r3, r5
    6508:	db06      	blt.n	6518 <_dtoa_r+0x830>
    650a:	1b5d      	subs	r5, r3, r5
    650c:	2f00      	cmp	r7, #0
    650e:	da0b      	bge.n	6528 <_dtoa_r+0x840>
    6510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6512:	1bdc      	subs	r4, r3, r7
    6514:	2300      	movs	r3, #0
    6516:	e78c      	b.n	6432 <_dtoa_r+0x74a>
    6518:	9b08      	ldr	r3, [sp, #32]
    651a:	9508      	str	r5, [sp, #32]
    651c:	1aea      	subs	r2, r5, r3
    651e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6520:	2500      	movs	r5, #0
    6522:	189b      	adds	r3, r3, r2
    6524:	930f      	str	r3, [sp, #60]	; 0x3c
    6526:	e7f1      	b.n	650c <_dtoa_r+0x824>
    6528:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    652a:	003b      	movs	r3, r7
    652c:	e781      	b.n	6432 <_dtoa_r+0x74a>
    652e:	9d08      	ldr	r5, [sp, #32]
    6530:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    6532:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    6534:	e788      	b.n	6448 <_dtoa_r+0x760>
    6536:	9a08      	ldr	r2, [sp, #32]
    6538:	e7b4      	b.n	64a4 <_dtoa_r+0x7bc>
    653a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    653c:	2500      	movs	r5, #0
    653e:	2b01      	cmp	r3, #1
    6540:	ddc7      	ble.n	64d2 <_dtoa_r+0x7ea>
    6542:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6544:	2001      	movs	r0, #1
    6546:	2b00      	cmp	r3, #0
    6548:	d00b      	beq.n	6562 <_dtoa_r+0x87a>
    654a:	9b08      	ldr	r3, [sp, #32]
    654c:	9a08      	ldr	r2, [sp, #32]
    654e:	691b      	ldr	r3, [r3, #16]
    6550:	930f      	str	r3, [sp, #60]	; 0x3c
    6552:	3303      	adds	r3, #3
    6554:	009b      	lsls	r3, r3, #2
    6556:	18d3      	adds	r3, r2, r3
    6558:	6858      	ldr	r0, [r3, #4]
    655a:	f000 fc4f 	bl	6dfc <__hi0bits>
    655e:	2320      	movs	r3, #32
    6560:	1a18      	subs	r0, r3, r0
    6562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6564:	18c0      	adds	r0, r0, r3
    6566:	231f      	movs	r3, #31
    6568:	4018      	ands	r0, r3
    656a:	d100      	bne.n	656e <_dtoa_r+0x886>
    656c:	e0ab      	b.n	66c6 <_dtoa_r+0x9de>
    656e:	3301      	adds	r3, #1
    6570:	1a1b      	subs	r3, r3, r0
    6572:	2b04      	cmp	r3, #4
    6574:	dc00      	bgt.n	6578 <_dtoa_r+0x890>
    6576:	e09b      	b.n	66b0 <_dtoa_r+0x9c8>
    6578:	231c      	movs	r3, #28
    657a:	1a18      	subs	r0, r3, r0
    657c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    657e:	1824      	adds	r4, r4, r0
    6580:	181b      	adds	r3, r3, r0
    6582:	930b      	str	r3, [sp, #44]	; 0x2c
    6584:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6586:	181b      	adds	r3, r3, r0
    6588:	930c      	str	r3, [sp, #48]	; 0x30
    658a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    658c:	2b00      	cmp	r3, #0
    658e:	dd05      	ble.n	659c <_dtoa_r+0x8b4>
    6590:	001a      	movs	r2, r3
    6592:	9905      	ldr	r1, [sp, #20]
    6594:	9804      	ldr	r0, [sp, #16]
    6596:	f000 fd65 	bl	7064 <__lshift>
    659a:	9005      	str	r0, [sp, #20]
    659c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    659e:	2b00      	cmp	r3, #0
    65a0:	dd05      	ble.n	65ae <_dtoa_r+0x8c6>
    65a2:	001a      	movs	r2, r3
    65a4:	9908      	ldr	r1, [sp, #32]
    65a6:	9804      	ldr	r0, [sp, #16]
    65a8:	f000 fd5c 	bl	7064 <__lshift>
    65ac:	9008      	str	r0, [sp, #32]
    65ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
    65b0:	2b00      	cmp	r3, #0
    65b2:	d100      	bne.n	65b6 <_dtoa_r+0x8ce>
    65b4:	e089      	b.n	66ca <_dtoa_r+0x9e2>
    65b6:	9908      	ldr	r1, [sp, #32]
    65b8:	9805      	ldr	r0, [sp, #20]
    65ba:	f000 fda4 	bl	7106 <__mcmp>
    65be:	2800      	cmp	r0, #0
    65c0:	db00      	blt.n	65c4 <_dtoa_r+0x8dc>
    65c2:	e082      	b.n	66ca <_dtoa_r+0x9e2>
    65c4:	9b03      	ldr	r3, [sp, #12]
    65c6:	220a      	movs	r2, #10
    65c8:	3b01      	subs	r3, #1
    65ca:	9303      	str	r3, [sp, #12]
    65cc:	9905      	ldr	r1, [sp, #20]
    65ce:	2300      	movs	r3, #0
    65d0:	9804      	ldr	r0, [sp, #16]
    65d2:	f000 fbd7 	bl	6d84 <__multadd>
    65d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    65d8:	9005      	str	r0, [sp, #20]
    65da:	2b00      	cmp	r3, #0
    65dc:	d100      	bne.n	65e0 <_dtoa_r+0x8f8>
    65de:	e15d      	b.n	689c <_dtoa_r+0xbb4>
    65e0:	2300      	movs	r3, #0
    65e2:	0031      	movs	r1, r6
    65e4:	220a      	movs	r2, #10
    65e6:	9804      	ldr	r0, [sp, #16]
    65e8:	f000 fbcc 	bl	6d84 <__multadd>
    65ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    65ee:	0006      	movs	r6, r0
    65f0:	2b00      	cmp	r3, #0
    65f2:	dc02      	bgt.n	65fa <_dtoa_r+0x912>
    65f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    65f6:	2b02      	cmp	r3, #2
    65f8:	dc6d      	bgt.n	66d6 <_dtoa_r+0x9ee>
    65fa:	2c00      	cmp	r4, #0
    65fc:	dd05      	ble.n	660a <_dtoa_r+0x922>
    65fe:	0031      	movs	r1, r6
    6600:	0022      	movs	r2, r4
    6602:	9804      	ldr	r0, [sp, #16]
    6604:	f000 fd2e 	bl	7064 <__lshift>
    6608:	0006      	movs	r6, r0
    660a:	0030      	movs	r0, r6
    660c:	2d00      	cmp	r5, #0
    660e:	d011      	beq.n	6634 <_dtoa_r+0x94c>
    6610:	6871      	ldr	r1, [r6, #4]
    6612:	9804      	ldr	r0, [sp, #16]
    6614:	f000 fb65 	bl	6ce2 <_Balloc>
    6618:	0031      	movs	r1, r6
    661a:	0004      	movs	r4, r0
    661c:	6933      	ldr	r3, [r6, #16]
    661e:	310c      	adds	r1, #12
    6620:	1c9a      	adds	r2, r3, #2
    6622:	0092      	lsls	r2, r2, #2
    6624:	300c      	adds	r0, #12
    6626:	f7fe fc0f 	bl	4e48 <memcpy>
    662a:	2201      	movs	r2, #1
    662c:	0021      	movs	r1, r4
    662e:	9804      	ldr	r0, [sp, #16]
    6630:	f000 fd18 	bl	7064 <__lshift>
    6634:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    6636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6638:	3f01      	subs	r7, #1
    663a:	930b      	str	r3, [sp, #44]	; 0x2c
    663c:	19db      	adds	r3, r3, r7
    663e:	0037      	movs	r7, r6
    6640:	0006      	movs	r6, r0
    6642:	930f      	str	r3, [sp, #60]	; 0x3c
    6644:	9908      	ldr	r1, [sp, #32]
    6646:	9805      	ldr	r0, [sp, #20]
    6648:	f7ff faca 	bl	5be0 <quorem>
    664c:	0039      	movs	r1, r7
    664e:	900d      	str	r0, [sp, #52]	; 0x34
    6650:	0004      	movs	r4, r0
    6652:	9805      	ldr	r0, [sp, #20]
    6654:	f000 fd57 	bl	7106 <__mcmp>
    6658:	0032      	movs	r2, r6
    665a:	900e      	str	r0, [sp, #56]	; 0x38
    665c:	9908      	ldr	r1, [sp, #32]
    665e:	9804      	ldr	r0, [sp, #16]
    6660:	f000 fd6a 	bl	7138 <__mdiff>
    6664:	2301      	movs	r3, #1
    6666:	930c      	str	r3, [sp, #48]	; 0x30
    6668:	68c3      	ldr	r3, [r0, #12]
    666a:	3430      	adds	r4, #48	; 0x30
    666c:	0005      	movs	r5, r0
    666e:	2b00      	cmp	r3, #0
    6670:	d104      	bne.n	667c <_dtoa_r+0x994>
    6672:	0001      	movs	r1, r0
    6674:	9805      	ldr	r0, [sp, #20]
    6676:	f000 fd46 	bl	7106 <__mcmp>
    667a:	900c      	str	r0, [sp, #48]	; 0x30
    667c:	0029      	movs	r1, r5
    667e:	9804      	ldr	r0, [sp, #16]
    6680:	f000 fb67 	bl	6d52 <_Bfree>
    6684:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6686:	9a22      	ldr	r2, [sp, #136]	; 0x88
    6688:	4313      	orrs	r3, r2
    668a:	d000      	beq.n	668e <_dtoa_r+0x9a6>
    668c:	e089      	b.n	67a2 <_dtoa_r+0xaba>
    668e:	9a06      	ldr	r2, [sp, #24]
    6690:	3301      	adds	r3, #1
    6692:	4213      	tst	r3, r2
    6694:	d000      	beq.n	6698 <_dtoa_r+0x9b0>
    6696:	e084      	b.n	67a2 <_dtoa_r+0xaba>
    6698:	2c39      	cmp	r4, #57	; 0x39
    669a:	d100      	bne.n	669e <_dtoa_r+0x9b6>
    669c:	e0a3      	b.n	67e6 <_dtoa_r+0xafe>
    669e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    66a0:	2b00      	cmp	r3, #0
    66a2:	dd01      	ble.n	66a8 <_dtoa_r+0x9c0>
    66a4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    66a6:	3431      	adds	r4, #49	; 0x31
    66a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    66aa:	1c5d      	adds	r5, r3, #1
    66ac:	701c      	strb	r4, [r3, #0]
    66ae:	e027      	b.n	6700 <_dtoa_r+0xa18>
    66b0:	2b04      	cmp	r3, #4
    66b2:	d100      	bne.n	66b6 <_dtoa_r+0x9ce>
    66b4:	e769      	b.n	658a <_dtoa_r+0x8a2>
    66b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    66b8:	331c      	adds	r3, #28
    66ba:	18d2      	adds	r2, r2, r3
    66bc:	920b      	str	r2, [sp, #44]	; 0x2c
    66be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    66c0:	18e4      	adds	r4, r4, r3
    66c2:	18d3      	adds	r3, r2, r3
    66c4:	e760      	b.n	6588 <_dtoa_r+0x8a0>
    66c6:	0003      	movs	r3, r0
    66c8:	e7f5      	b.n	66b6 <_dtoa_r+0x9ce>
    66ca:	2f00      	cmp	r7, #0
    66cc:	dc3c      	bgt.n	6748 <_dtoa_r+0xa60>
    66ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
    66d0:	2b02      	cmp	r3, #2
    66d2:	dd39      	ble.n	6748 <_dtoa_r+0xa60>
    66d4:	970d      	str	r7, [sp, #52]	; 0x34
    66d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    66d8:	2b00      	cmp	r3, #0
    66da:	d10c      	bne.n	66f6 <_dtoa_r+0xa0e>
    66dc:	9908      	ldr	r1, [sp, #32]
    66de:	2205      	movs	r2, #5
    66e0:	9804      	ldr	r0, [sp, #16]
    66e2:	f000 fb4f 	bl	6d84 <__multadd>
    66e6:	9008      	str	r0, [sp, #32]
    66e8:	0001      	movs	r1, r0
    66ea:	9805      	ldr	r0, [sp, #20]
    66ec:	f000 fd0b 	bl	7106 <__mcmp>
    66f0:	2800      	cmp	r0, #0
    66f2:	dd00      	ble.n	66f6 <_dtoa_r+0xa0e>
    66f4:	e55a      	b.n	61ac <_dtoa_r+0x4c4>
    66f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    66f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    66fa:	43db      	mvns	r3, r3
    66fc:	9303      	str	r3, [sp, #12]
    66fe:	2700      	movs	r7, #0
    6700:	9908      	ldr	r1, [sp, #32]
    6702:	9804      	ldr	r0, [sp, #16]
    6704:	f000 fb25 	bl	6d52 <_Bfree>
    6708:	2e00      	cmp	r6, #0
    670a:	d100      	bne.n	670e <_dtoa_r+0xa26>
    670c:	e63f      	b.n	638e <_dtoa_r+0x6a6>
    670e:	2f00      	cmp	r7, #0
    6710:	d005      	beq.n	671e <_dtoa_r+0xa36>
    6712:	42b7      	cmp	r7, r6
    6714:	d003      	beq.n	671e <_dtoa_r+0xa36>
    6716:	0039      	movs	r1, r7
    6718:	9804      	ldr	r0, [sp, #16]
    671a:	f000 fb1a 	bl	6d52 <_Bfree>
    671e:	0031      	movs	r1, r6
    6720:	9804      	ldr	r0, [sp, #16]
    6722:	f000 fb16 	bl	6d52 <_Bfree>
    6726:	e632      	b.n	638e <_dtoa_r+0x6a6>
    6728:	9508      	str	r5, [sp, #32]
    672a:	002e      	movs	r6, r5
    672c:	e7e3      	b.n	66f6 <_dtoa_r+0xa0e>
    672e:	2300      	movs	r3, #0
    6730:	9308      	str	r3, [sp, #32]
    6732:	001e      	movs	r6, r3
    6734:	e7df      	b.n	66f6 <_dtoa_r+0xa0e>
    6736:	46c0      	nop			; (mov r8, r8)
    6738:	40240000 	.word	0x40240000
    673c:	00000433 	.word	0x00000433
    6740:	9603      	str	r6, [sp, #12]
    6742:	9508      	str	r5, [sp, #32]
    6744:	002e      	movs	r6, r5
    6746:	e531      	b.n	61ac <_dtoa_r+0x4c4>
    6748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    674a:	970d      	str	r7, [sp, #52]	; 0x34
    674c:	2b00      	cmp	r3, #0
    674e:	d000      	beq.n	6752 <_dtoa_r+0xa6a>
    6750:	e753      	b.n	65fa <_dtoa_r+0x912>
    6752:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    6754:	9908      	ldr	r1, [sp, #32]
    6756:	9805      	ldr	r0, [sp, #20]
    6758:	f7ff fa42 	bl	5be0 <quorem>
    675c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    675e:	3030      	adds	r0, #48	; 0x30
    6760:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6762:	7028      	strb	r0, [r5, #0]
    6764:	3501      	adds	r5, #1
    6766:	0004      	movs	r4, r0
    6768:	1aeb      	subs	r3, r5, r3
    676a:	429a      	cmp	r2, r3
    676c:	dc78      	bgt.n	6860 <_dtoa_r+0xb78>
    676e:	1e15      	subs	r5, r2, #0
    6770:	dc00      	bgt.n	6774 <_dtoa_r+0xa8c>
    6772:	2501      	movs	r5, #1
    6774:	2700      	movs	r7, #0
    6776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6778:	195d      	adds	r5, r3, r5
    677a:	9905      	ldr	r1, [sp, #20]
    677c:	2201      	movs	r2, #1
    677e:	9804      	ldr	r0, [sp, #16]
    6780:	f000 fc70 	bl	7064 <__lshift>
    6784:	9908      	ldr	r1, [sp, #32]
    6786:	9005      	str	r0, [sp, #20]
    6788:	f000 fcbd 	bl	7106 <__mcmp>
    678c:	2800      	cmp	r0, #0
    678e:	dc2f      	bgt.n	67f0 <_dtoa_r+0xb08>
    6790:	d101      	bne.n	6796 <_dtoa_r+0xaae>
    6792:	07e3      	lsls	r3, r4, #31
    6794:	d42c      	bmi.n	67f0 <_dtoa_r+0xb08>
    6796:	1e6b      	subs	r3, r5, #1
    6798:	781a      	ldrb	r2, [r3, #0]
    679a:	2a30      	cmp	r2, #48	; 0x30
    679c:	d1b0      	bne.n	6700 <_dtoa_r+0xa18>
    679e:	001d      	movs	r5, r3
    67a0:	e7f9      	b.n	6796 <_dtoa_r+0xaae>
    67a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    67a4:	2b00      	cmp	r3, #0
    67a6:	db07      	blt.n	67b8 <_dtoa_r+0xad0>
    67a8:	001d      	movs	r5, r3
    67aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
    67ac:	431d      	orrs	r5, r3
    67ae:	d126      	bne.n	67fe <_dtoa_r+0xb16>
    67b0:	2301      	movs	r3, #1
    67b2:	9a06      	ldr	r2, [sp, #24]
    67b4:	4213      	tst	r3, r2
    67b6:	d122      	bne.n	67fe <_dtoa_r+0xb16>
    67b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    67ba:	2b00      	cmp	r3, #0
    67bc:	dc00      	bgt.n	67c0 <_dtoa_r+0xad8>
    67be:	e773      	b.n	66a8 <_dtoa_r+0x9c0>
    67c0:	9905      	ldr	r1, [sp, #20]
    67c2:	2201      	movs	r2, #1
    67c4:	9804      	ldr	r0, [sp, #16]
    67c6:	f000 fc4d 	bl	7064 <__lshift>
    67ca:	9908      	ldr	r1, [sp, #32]
    67cc:	9005      	str	r0, [sp, #20]
    67ce:	f000 fc9a 	bl	7106 <__mcmp>
    67d2:	2800      	cmp	r0, #0
    67d4:	dc04      	bgt.n	67e0 <_dtoa_r+0xaf8>
    67d6:	d000      	beq.n	67da <_dtoa_r+0xaf2>
    67d8:	e766      	b.n	66a8 <_dtoa_r+0x9c0>
    67da:	07e3      	lsls	r3, r4, #31
    67dc:	d400      	bmi.n	67e0 <_dtoa_r+0xaf8>
    67de:	e763      	b.n	66a8 <_dtoa_r+0x9c0>
    67e0:	2c39      	cmp	r4, #57	; 0x39
    67e2:	d000      	beq.n	67e6 <_dtoa_r+0xafe>
    67e4:	e75e      	b.n	66a4 <_dtoa_r+0x9bc>
    67e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    67e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    67ea:	1c5d      	adds	r5, r3, #1
    67ec:	2339      	movs	r3, #57	; 0x39
    67ee:	7013      	strb	r3, [r2, #0]
    67f0:	1e6b      	subs	r3, r5, #1
    67f2:	781a      	ldrb	r2, [r3, #0]
    67f4:	2a39      	cmp	r2, #57	; 0x39
    67f6:	d03b      	beq.n	6870 <_dtoa_r+0xb88>
    67f8:	3201      	adds	r2, #1
    67fa:	701a      	strb	r2, [r3, #0]
    67fc:	e780      	b.n	6700 <_dtoa_r+0xa18>
    67fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6800:	3301      	adds	r3, #1
    6802:	930d      	str	r3, [sp, #52]	; 0x34
    6804:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6806:	2b00      	cmp	r3, #0
    6808:	dd05      	ble.n	6816 <_dtoa_r+0xb2e>
    680a:	2c39      	cmp	r4, #57	; 0x39
    680c:	d0eb      	beq.n	67e6 <_dtoa_r+0xafe>
    680e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    6810:	3401      	adds	r4, #1
    6812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6814:	e74a      	b.n	66ac <_dtoa_r+0x9c4>
    6816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6818:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    681a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    681c:	701c      	strb	r4, [r3, #0]
    681e:	4293      	cmp	r3, r2
    6820:	d0ab      	beq.n	677a <_dtoa_r+0xa92>
    6822:	2300      	movs	r3, #0
    6824:	220a      	movs	r2, #10
    6826:	9905      	ldr	r1, [sp, #20]
    6828:	9804      	ldr	r0, [sp, #16]
    682a:	f000 faab 	bl	6d84 <__multadd>
    682e:	2300      	movs	r3, #0
    6830:	9005      	str	r0, [sp, #20]
    6832:	220a      	movs	r2, #10
    6834:	0039      	movs	r1, r7
    6836:	9804      	ldr	r0, [sp, #16]
    6838:	42b7      	cmp	r7, r6
    683a:	d106      	bne.n	684a <_dtoa_r+0xb62>
    683c:	f000 faa2 	bl	6d84 <__multadd>
    6840:	0007      	movs	r7, r0
    6842:	0006      	movs	r6, r0
    6844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6846:	930b      	str	r3, [sp, #44]	; 0x2c
    6848:	e6fc      	b.n	6644 <_dtoa_r+0x95c>
    684a:	f000 fa9b 	bl	6d84 <__multadd>
    684e:	0031      	movs	r1, r6
    6850:	0007      	movs	r7, r0
    6852:	2300      	movs	r3, #0
    6854:	220a      	movs	r2, #10
    6856:	9804      	ldr	r0, [sp, #16]
    6858:	f000 fa94 	bl	6d84 <__multadd>
    685c:	0006      	movs	r6, r0
    685e:	e7f1      	b.n	6844 <_dtoa_r+0xb5c>
    6860:	2300      	movs	r3, #0
    6862:	220a      	movs	r2, #10
    6864:	9905      	ldr	r1, [sp, #20]
    6866:	9804      	ldr	r0, [sp, #16]
    6868:	f000 fa8c 	bl	6d84 <__multadd>
    686c:	9005      	str	r0, [sp, #20]
    686e:	e771      	b.n	6754 <_dtoa_r+0xa6c>
    6870:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6872:	429a      	cmp	r2, r3
    6874:	d105      	bne.n	6882 <_dtoa_r+0xb9a>
    6876:	9b03      	ldr	r3, [sp, #12]
    6878:	3301      	adds	r3, #1
    687a:	9303      	str	r3, [sp, #12]
    687c:	2331      	movs	r3, #49	; 0x31
    687e:	7013      	strb	r3, [r2, #0]
    6880:	e73e      	b.n	6700 <_dtoa_r+0xa18>
    6882:	001d      	movs	r5, r3
    6884:	e7b4      	b.n	67f0 <_dtoa_r+0xb08>
    6886:	4b0a      	ldr	r3, [pc, #40]	; (68b0 <_dtoa_r+0xbc8>)
    6888:	9a26      	ldr	r2, [sp, #152]	; 0x98
    688a:	930a      	str	r3, [sp, #40]	; 0x28
    688c:	4b09      	ldr	r3, [pc, #36]	; (68b4 <_dtoa_r+0xbcc>)
    688e:	2a00      	cmp	r2, #0
    6890:	d001      	beq.n	6896 <_dtoa_r+0xbae>
    6892:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6894:	6013      	str	r3, [r2, #0]
    6896:	980a      	ldr	r0, [sp, #40]	; 0x28
    6898:	b01d      	add	sp, #116	; 0x74
    689a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    689c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    689e:	2b00      	cmp	r3, #0
    68a0:	dd00      	ble.n	68a4 <_dtoa_r+0xbbc>
    68a2:	e756      	b.n	6752 <_dtoa_r+0xa6a>
    68a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    68a6:	2b02      	cmp	r3, #2
    68a8:	dc00      	bgt.n	68ac <_dtoa_r+0xbc4>
    68aa:	e752      	b.n	6752 <_dtoa_r+0xa6a>
    68ac:	e713      	b.n	66d6 <_dtoa_r+0x9ee>
    68ae:	46c0      	nop			; (mov r8, r8)
    68b0:	0000a53c 	.word	0x0000a53c
    68b4:	0000a544 	.word	0x0000a544

000068b8 <__sflush_r>:
    68b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    68ba:	898a      	ldrh	r2, [r1, #12]
    68bc:	0005      	movs	r5, r0
    68be:	000c      	movs	r4, r1
    68c0:	0713      	lsls	r3, r2, #28
    68c2:	d460      	bmi.n	6986 <__sflush_r+0xce>
    68c4:	684b      	ldr	r3, [r1, #4]
    68c6:	2b00      	cmp	r3, #0
    68c8:	dc04      	bgt.n	68d4 <__sflush_r+0x1c>
    68ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    68cc:	2b00      	cmp	r3, #0
    68ce:	dc01      	bgt.n	68d4 <__sflush_r+0x1c>
    68d0:	2000      	movs	r0, #0
    68d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    68d4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    68d6:	2f00      	cmp	r7, #0
    68d8:	d0fa      	beq.n	68d0 <__sflush_r+0x18>
    68da:	2300      	movs	r3, #0
    68dc:	682e      	ldr	r6, [r5, #0]
    68de:	602b      	str	r3, [r5, #0]
    68e0:	2380      	movs	r3, #128	; 0x80
    68e2:	015b      	lsls	r3, r3, #5
    68e4:	401a      	ands	r2, r3
    68e6:	d034      	beq.n	6952 <__sflush_r+0x9a>
    68e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    68ea:	89a3      	ldrh	r3, [r4, #12]
    68ec:	075b      	lsls	r3, r3, #29
    68ee:	d506      	bpl.n	68fe <__sflush_r+0x46>
    68f0:	6863      	ldr	r3, [r4, #4]
    68f2:	1ac0      	subs	r0, r0, r3
    68f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    68f6:	2b00      	cmp	r3, #0
    68f8:	d001      	beq.n	68fe <__sflush_r+0x46>
    68fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
    68fc:	1ac0      	subs	r0, r0, r3
    68fe:	0002      	movs	r2, r0
    6900:	6a21      	ldr	r1, [r4, #32]
    6902:	2300      	movs	r3, #0
    6904:	0028      	movs	r0, r5
    6906:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6908:	47b8      	blx	r7
    690a:	89a1      	ldrh	r1, [r4, #12]
    690c:	1c43      	adds	r3, r0, #1
    690e:	d106      	bne.n	691e <__sflush_r+0x66>
    6910:	682b      	ldr	r3, [r5, #0]
    6912:	2b1d      	cmp	r3, #29
    6914:	d831      	bhi.n	697a <__sflush_r+0xc2>
    6916:	4a2c      	ldr	r2, [pc, #176]	; (69c8 <__sflush_r+0x110>)
    6918:	40da      	lsrs	r2, r3
    691a:	07d3      	lsls	r3, r2, #31
    691c:	d52d      	bpl.n	697a <__sflush_r+0xc2>
    691e:	2300      	movs	r3, #0
    6920:	6063      	str	r3, [r4, #4]
    6922:	6923      	ldr	r3, [r4, #16]
    6924:	6023      	str	r3, [r4, #0]
    6926:	04cb      	lsls	r3, r1, #19
    6928:	d505      	bpl.n	6936 <__sflush_r+0x7e>
    692a:	1c43      	adds	r3, r0, #1
    692c:	d102      	bne.n	6934 <__sflush_r+0x7c>
    692e:	682b      	ldr	r3, [r5, #0]
    6930:	2b00      	cmp	r3, #0
    6932:	d100      	bne.n	6936 <__sflush_r+0x7e>
    6934:	6560      	str	r0, [r4, #84]	; 0x54
    6936:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6938:	602e      	str	r6, [r5, #0]
    693a:	2900      	cmp	r1, #0
    693c:	d0c8      	beq.n	68d0 <__sflush_r+0x18>
    693e:	0023      	movs	r3, r4
    6940:	3344      	adds	r3, #68	; 0x44
    6942:	4299      	cmp	r1, r3
    6944:	d002      	beq.n	694c <__sflush_r+0x94>
    6946:	0028      	movs	r0, r5
    6948:	f000 fcbc 	bl	72c4 <_free_r>
    694c:	2000      	movs	r0, #0
    694e:	6360      	str	r0, [r4, #52]	; 0x34
    6950:	e7bf      	b.n	68d2 <__sflush_r+0x1a>
    6952:	2301      	movs	r3, #1
    6954:	6a21      	ldr	r1, [r4, #32]
    6956:	0028      	movs	r0, r5
    6958:	47b8      	blx	r7
    695a:	1c43      	adds	r3, r0, #1
    695c:	d1c5      	bne.n	68ea <__sflush_r+0x32>
    695e:	682b      	ldr	r3, [r5, #0]
    6960:	2b00      	cmp	r3, #0
    6962:	d0c2      	beq.n	68ea <__sflush_r+0x32>
    6964:	2b1d      	cmp	r3, #29
    6966:	d001      	beq.n	696c <__sflush_r+0xb4>
    6968:	2b16      	cmp	r3, #22
    696a:	d101      	bne.n	6970 <__sflush_r+0xb8>
    696c:	602e      	str	r6, [r5, #0]
    696e:	e7af      	b.n	68d0 <__sflush_r+0x18>
    6970:	2340      	movs	r3, #64	; 0x40
    6972:	89a2      	ldrh	r2, [r4, #12]
    6974:	4313      	orrs	r3, r2
    6976:	81a3      	strh	r3, [r4, #12]
    6978:	e7ab      	b.n	68d2 <__sflush_r+0x1a>
    697a:	2340      	movs	r3, #64	; 0x40
    697c:	430b      	orrs	r3, r1
    697e:	2001      	movs	r0, #1
    6980:	81a3      	strh	r3, [r4, #12]
    6982:	4240      	negs	r0, r0
    6984:	e7a5      	b.n	68d2 <__sflush_r+0x1a>
    6986:	690f      	ldr	r7, [r1, #16]
    6988:	2f00      	cmp	r7, #0
    698a:	d0a1      	beq.n	68d0 <__sflush_r+0x18>
    698c:	680b      	ldr	r3, [r1, #0]
    698e:	600f      	str	r7, [r1, #0]
    6990:	1bdb      	subs	r3, r3, r7
    6992:	9301      	str	r3, [sp, #4]
    6994:	2300      	movs	r3, #0
    6996:	0792      	lsls	r2, r2, #30
    6998:	d100      	bne.n	699c <__sflush_r+0xe4>
    699a:	694b      	ldr	r3, [r1, #20]
    699c:	60a3      	str	r3, [r4, #8]
    699e:	9b01      	ldr	r3, [sp, #4]
    69a0:	2b00      	cmp	r3, #0
    69a2:	dc00      	bgt.n	69a6 <__sflush_r+0xee>
    69a4:	e794      	b.n	68d0 <__sflush_r+0x18>
    69a6:	9b01      	ldr	r3, [sp, #4]
    69a8:	003a      	movs	r2, r7
    69aa:	6a21      	ldr	r1, [r4, #32]
    69ac:	0028      	movs	r0, r5
    69ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    69b0:	47b0      	blx	r6
    69b2:	2800      	cmp	r0, #0
    69b4:	dc03      	bgt.n	69be <__sflush_r+0x106>
    69b6:	2340      	movs	r3, #64	; 0x40
    69b8:	89a2      	ldrh	r2, [r4, #12]
    69ba:	4313      	orrs	r3, r2
    69bc:	e7df      	b.n	697e <__sflush_r+0xc6>
    69be:	9b01      	ldr	r3, [sp, #4]
    69c0:	183f      	adds	r7, r7, r0
    69c2:	1a1b      	subs	r3, r3, r0
    69c4:	9301      	str	r3, [sp, #4]
    69c6:	e7ea      	b.n	699e <__sflush_r+0xe6>
    69c8:	20400001 	.word	0x20400001

000069cc <_fflush_r>:
    69cc:	690b      	ldr	r3, [r1, #16]
    69ce:	b570      	push	{r4, r5, r6, lr}
    69d0:	0005      	movs	r5, r0
    69d2:	000c      	movs	r4, r1
    69d4:	2b00      	cmp	r3, #0
    69d6:	d101      	bne.n	69dc <_fflush_r+0x10>
    69d8:	2000      	movs	r0, #0
    69da:	bd70      	pop	{r4, r5, r6, pc}
    69dc:	2800      	cmp	r0, #0
    69de:	d004      	beq.n	69ea <_fflush_r+0x1e>
    69e0:	6983      	ldr	r3, [r0, #24]
    69e2:	2b00      	cmp	r3, #0
    69e4:	d101      	bne.n	69ea <_fflush_r+0x1e>
    69e6:	f000 f85f 	bl	6aa8 <__sinit>
    69ea:	4b0b      	ldr	r3, [pc, #44]	; (6a18 <_fflush_r+0x4c>)
    69ec:	429c      	cmp	r4, r3
    69ee:	d109      	bne.n	6a04 <_fflush_r+0x38>
    69f0:	686c      	ldr	r4, [r5, #4]
    69f2:	220c      	movs	r2, #12
    69f4:	5ea3      	ldrsh	r3, [r4, r2]
    69f6:	2b00      	cmp	r3, #0
    69f8:	d0ee      	beq.n	69d8 <_fflush_r+0xc>
    69fa:	0021      	movs	r1, r4
    69fc:	0028      	movs	r0, r5
    69fe:	f7ff ff5b 	bl	68b8 <__sflush_r>
    6a02:	e7ea      	b.n	69da <_fflush_r+0xe>
    6a04:	4b05      	ldr	r3, [pc, #20]	; (6a1c <_fflush_r+0x50>)
    6a06:	429c      	cmp	r4, r3
    6a08:	d101      	bne.n	6a0e <_fflush_r+0x42>
    6a0a:	68ac      	ldr	r4, [r5, #8]
    6a0c:	e7f1      	b.n	69f2 <_fflush_r+0x26>
    6a0e:	4b04      	ldr	r3, [pc, #16]	; (6a20 <_fflush_r+0x54>)
    6a10:	429c      	cmp	r4, r3
    6a12:	d1ee      	bne.n	69f2 <_fflush_r+0x26>
    6a14:	68ec      	ldr	r4, [r5, #12]
    6a16:	e7ec      	b.n	69f2 <_fflush_r+0x26>
    6a18:	0000a56c 	.word	0x0000a56c
    6a1c:	0000a58c 	.word	0x0000a58c
    6a20:	0000a54c 	.word	0x0000a54c

00006a24 <_cleanup_r>:
    6a24:	b510      	push	{r4, lr}
    6a26:	4902      	ldr	r1, [pc, #8]	; (6a30 <_cleanup_r+0xc>)
    6a28:	f000 f8b2 	bl	6b90 <_fwalk_reent>
    6a2c:	bd10      	pop	{r4, pc}
    6a2e:	46c0      	nop			; (mov r8, r8)
    6a30:	000069cd 	.word	0x000069cd

00006a34 <std.isra.0>:
    6a34:	2300      	movs	r3, #0
    6a36:	b510      	push	{r4, lr}
    6a38:	0004      	movs	r4, r0
    6a3a:	6003      	str	r3, [r0, #0]
    6a3c:	6043      	str	r3, [r0, #4]
    6a3e:	6083      	str	r3, [r0, #8]
    6a40:	8181      	strh	r1, [r0, #12]
    6a42:	6643      	str	r3, [r0, #100]	; 0x64
    6a44:	81c2      	strh	r2, [r0, #14]
    6a46:	6103      	str	r3, [r0, #16]
    6a48:	6143      	str	r3, [r0, #20]
    6a4a:	6183      	str	r3, [r0, #24]
    6a4c:	0019      	movs	r1, r3
    6a4e:	2208      	movs	r2, #8
    6a50:	305c      	adds	r0, #92	; 0x5c
    6a52:	f7fe fa02 	bl	4e5a <memset>
    6a56:	4b05      	ldr	r3, [pc, #20]	; (6a6c <std.isra.0+0x38>)
    6a58:	6224      	str	r4, [r4, #32]
    6a5a:	6263      	str	r3, [r4, #36]	; 0x24
    6a5c:	4b04      	ldr	r3, [pc, #16]	; (6a70 <std.isra.0+0x3c>)
    6a5e:	62a3      	str	r3, [r4, #40]	; 0x28
    6a60:	4b04      	ldr	r3, [pc, #16]	; (6a74 <std.isra.0+0x40>)
    6a62:	62e3      	str	r3, [r4, #44]	; 0x2c
    6a64:	4b04      	ldr	r3, [pc, #16]	; (6a78 <std.isra.0+0x44>)
    6a66:	6323      	str	r3, [r4, #48]	; 0x30
    6a68:	bd10      	pop	{r4, pc}
    6a6a:	46c0      	nop			; (mov r8, r8)
    6a6c:	000076c1 	.word	0x000076c1
    6a70:	000076e9 	.word	0x000076e9
    6a74:	00007721 	.word	0x00007721
    6a78:	0000774d 	.word	0x0000774d

00006a7c <__sfmoreglue>:
    6a7c:	b570      	push	{r4, r5, r6, lr}
    6a7e:	2568      	movs	r5, #104	; 0x68
    6a80:	1e4a      	subs	r2, r1, #1
    6a82:	4355      	muls	r5, r2
    6a84:	000e      	movs	r6, r1
    6a86:	0029      	movs	r1, r5
    6a88:	3174      	adds	r1, #116	; 0x74
    6a8a:	f000 fc65 	bl	7358 <_malloc_r>
    6a8e:	1e04      	subs	r4, r0, #0
    6a90:	d008      	beq.n	6aa4 <__sfmoreglue+0x28>
    6a92:	2100      	movs	r1, #0
    6a94:	002a      	movs	r2, r5
    6a96:	6001      	str	r1, [r0, #0]
    6a98:	6046      	str	r6, [r0, #4]
    6a9a:	300c      	adds	r0, #12
    6a9c:	60a0      	str	r0, [r4, #8]
    6a9e:	3268      	adds	r2, #104	; 0x68
    6aa0:	f7fe f9db 	bl	4e5a <memset>
    6aa4:	0020      	movs	r0, r4
    6aa6:	bd70      	pop	{r4, r5, r6, pc}

00006aa8 <__sinit>:
    6aa8:	6983      	ldr	r3, [r0, #24]
    6aaa:	b513      	push	{r0, r1, r4, lr}
    6aac:	0004      	movs	r4, r0
    6aae:	2b00      	cmp	r3, #0
    6ab0:	d128      	bne.n	6b04 <__sinit+0x5c>
    6ab2:	6483      	str	r3, [r0, #72]	; 0x48
    6ab4:	64c3      	str	r3, [r0, #76]	; 0x4c
    6ab6:	6503      	str	r3, [r0, #80]	; 0x50
    6ab8:	4b13      	ldr	r3, [pc, #76]	; (6b08 <__sinit+0x60>)
    6aba:	4a14      	ldr	r2, [pc, #80]	; (6b0c <__sinit+0x64>)
    6abc:	681b      	ldr	r3, [r3, #0]
    6abe:	6282      	str	r2, [r0, #40]	; 0x28
    6ac0:	9301      	str	r3, [sp, #4]
    6ac2:	4298      	cmp	r0, r3
    6ac4:	d101      	bne.n	6aca <__sinit+0x22>
    6ac6:	2301      	movs	r3, #1
    6ac8:	6183      	str	r3, [r0, #24]
    6aca:	0020      	movs	r0, r4
    6acc:	f000 f820 	bl	6b10 <__sfp>
    6ad0:	6060      	str	r0, [r4, #4]
    6ad2:	0020      	movs	r0, r4
    6ad4:	f000 f81c 	bl	6b10 <__sfp>
    6ad8:	60a0      	str	r0, [r4, #8]
    6ada:	0020      	movs	r0, r4
    6adc:	f000 f818 	bl	6b10 <__sfp>
    6ae0:	2200      	movs	r2, #0
    6ae2:	60e0      	str	r0, [r4, #12]
    6ae4:	2104      	movs	r1, #4
    6ae6:	6860      	ldr	r0, [r4, #4]
    6ae8:	f7ff ffa4 	bl	6a34 <std.isra.0>
    6aec:	2201      	movs	r2, #1
    6aee:	2109      	movs	r1, #9
    6af0:	68a0      	ldr	r0, [r4, #8]
    6af2:	f7ff ff9f 	bl	6a34 <std.isra.0>
    6af6:	2202      	movs	r2, #2
    6af8:	2112      	movs	r1, #18
    6afa:	68e0      	ldr	r0, [r4, #12]
    6afc:	f7ff ff9a 	bl	6a34 <std.isra.0>
    6b00:	2301      	movs	r3, #1
    6b02:	61a3      	str	r3, [r4, #24]
    6b04:	bd13      	pop	{r0, r1, r4, pc}
    6b06:	46c0      	nop			; (mov r8, r8)
    6b08:	0000a504 	.word	0x0000a504
    6b0c:	00006a25 	.word	0x00006a25

00006b10 <__sfp>:
    6b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b12:	4b1e      	ldr	r3, [pc, #120]	; (6b8c <__sfp+0x7c>)
    6b14:	0007      	movs	r7, r0
    6b16:	681e      	ldr	r6, [r3, #0]
    6b18:	69b3      	ldr	r3, [r6, #24]
    6b1a:	2b00      	cmp	r3, #0
    6b1c:	d102      	bne.n	6b24 <__sfp+0x14>
    6b1e:	0030      	movs	r0, r6
    6b20:	f7ff ffc2 	bl	6aa8 <__sinit>
    6b24:	3648      	adds	r6, #72	; 0x48
    6b26:	68b4      	ldr	r4, [r6, #8]
    6b28:	6873      	ldr	r3, [r6, #4]
    6b2a:	3b01      	subs	r3, #1
    6b2c:	d504      	bpl.n	6b38 <__sfp+0x28>
    6b2e:	6833      	ldr	r3, [r6, #0]
    6b30:	2b00      	cmp	r3, #0
    6b32:	d007      	beq.n	6b44 <__sfp+0x34>
    6b34:	6836      	ldr	r6, [r6, #0]
    6b36:	e7f6      	b.n	6b26 <__sfp+0x16>
    6b38:	220c      	movs	r2, #12
    6b3a:	5ea5      	ldrsh	r5, [r4, r2]
    6b3c:	2d00      	cmp	r5, #0
    6b3e:	d00d      	beq.n	6b5c <__sfp+0x4c>
    6b40:	3468      	adds	r4, #104	; 0x68
    6b42:	e7f2      	b.n	6b2a <__sfp+0x1a>
    6b44:	2104      	movs	r1, #4
    6b46:	0038      	movs	r0, r7
    6b48:	f7ff ff98 	bl	6a7c <__sfmoreglue>
    6b4c:	6030      	str	r0, [r6, #0]
    6b4e:	2800      	cmp	r0, #0
    6b50:	d1f0      	bne.n	6b34 <__sfp+0x24>
    6b52:	230c      	movs	r3, #12
    6b54:	0004      	movs	r4, r0
    6b56:	603b      	str	r3, [r7, #0]
    6b58:	0020      	movs	r0, r4
    6b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b5c:	2301      	movs	r3, #1
    6b5e:	0020      	movs	r0, r4
    6b60:	425b      	negs	r3, r3
    6b62:	81e3      	strh	r3, [r4, #14]
    6b64:	3302      	adds	r3, #2
    6b66:	81a3      	strh	r3, [r4, #12]
    6b68:	6665      	str	r5, [r4, #100]	; 0x64
    6b6a:	6025      	str	r5, [r4, #0]
    6b6c:	60a5      	str	r5, [r4, #8]
    6b6e:	6065      	str	r5, [r4, #4]
    6b70:	6125      	str	r5, [r4, #16]
    6b72:	6165      	str	r5, [r4, #20]
    6b74:	61a5      	str	r5, [r4, #24]
    6b76:	2208      	movs	r2, #8
    6b78:	0029      	movs	r1, r5
    6b7a:	305c      	adds	r0, #92	; 0x5c
    6b7c:	f7fe f96d 	bl	4e5a <memset>
    6b80:	6365      	str	r5, [r4, #52]	; 0x34
    6b82:	63a5      	str	r5, [r4, #56]	; 0x38
    6b84:	64a5      	str	r5, [r4, #72]	; 0x48
    6b86:	64e5      	str	r5, [r4, #76]	; 0x4c
    6b88:	e7e6      	b.n	6b58 <__sfp+0x48>
    6b8a:	46c0      	nop			; (mov r8, r8)
    6b8c:	0000a504 	.word	0x0000a504

00006b90 <_fwalk_reent>:
    6b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6b92:	0004      	movs	r4, r0
    6b94:	0007      	movs	r7, r0
    6b96:	2600      	movs	r6, #0
    6b98:	9101      	str	r1, [sp, #4]
    6b9a:	3448      	adds	r4, #72	; 0x48
    6b9c:	2c00      	cmp	r4, #0
    6b9e:	d101      	bne.n	6ba4 <_fwalk_reent+0x14>
    6ba0:	0030      	movs	r0, r6
    6ba2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6ba4:	6863      	ldr	r3, [r4, #4]
    6ba6:	68a5      	ldr	r5, [r4, #8]
    6ba8:	9300      	str	r3, [sp, #0]
    6baa:	9b00      	ldr	r3, [sp, #0]
    6bac:	3b01      	subs	r3, #1
    6bae:	9300      	str	r3, [sp, #0]
    6bb0:	d501      	bpl.n	6bb6 <_fwalk_reent+0x26>
    6bb2:	6824      	ldr	r4, [r4, #0]
    6bb4:	e7f2      	b.n	6b9c <_fwalk_reent+0xc>
    6bb6:	89ab      	ldrh	r3, [r5, #12]
    6bb8:	2b01      	cmp	r3, #1
    6bba:	d908      	bls.n	6bce <_fwalk_reent+0x3e>
    6bbc:	220e      	movs	r2, #14
    6bbe:	5eab      	ldrsh	r3, [r5, r2]
    6bc0:	3301      	adds	r3, #1
    6bc2:	d004      	beq.n	6bce <_fwalk_reent+0x3e>
    6bc4:	0029      	movs	r1, r5
    6bc6:	0038      	movs	r0, r7
    6bc8:	9b01      	ldr	r3, [sp, #4]
    6bca:	4798      	blx	r3
    6bcc:	4306      	orrs	r6, r0
    6bce:	3568      	adds	r5, #104	; 0x68
    6bd0:	e7eb      	b.n	6baa <_fwalk_reent+0x1a>
	...

00006bd4 <_localeconv_r>:
    6bd4:	4b03      	ldr	r3, [pc, #12]	; (6be4 <_localeconv_r+0x10>)
    6bd6:	681b      	ldr	r3, [r3, #0]
    6bd8:	6a18      	ldr	r0, [r3, #32]
    6bda:	2800      	cmp	r0, #0
    6bdc:	d100      	bne.n	6be0 <_localeconv_r+0xc>
    6bde:	4802      	ldr	r0, [pc, #8]	; (6be8 <_localeconv_r+0x14>)
    6be0:	30f0      	adds	r0, #240	; 0xf0
    6be2:	4770      	bx	lr
    6be4:	2000000c 	.word	0x2000000c
    6be8:	20000070 	.word	0x20000070

00006bec <__swhatbuf_r>:
    6bec:	b570      	push	{r4, r5, r6, lr}
    6bee:	000e      	movs	r6, r1
    6bf0:	001d      	movs	r5, r3
    6bf2:	230e      	movs	r3, #14
    6bf4:	5ec9      	ldrsh	r1, [r1, r3]
    6bf6:	b090      	sub	sp, #64	; 0x40
    6bf8:	0014      	movs	r4, r2
    6bfa:	2900      	cmp	r1, #0
    6bfc:	da07      	bge.n	6c0e <__swhatbuf_r+0x22>
    6bfe:	2300      	movs	r3, #0
    6c00:	602b      	str	r3, [r5, #0]
    6c02:	89b3      	ldrh	r3, [r6, #12]
    6c04:	061b      	lsls	r3, r3, #24
    6c06:	d411      	bmi.n	6c2c <__swhatbuf_r+0x40>
    6c08:	2380      	movs	r3, #128	; 0x80
    6c0a:	00db      	lsls	r3, r3, #3
    6c0c:	e00f      	b.n	6c2e <__swhatbuf_r+0x42>
    6c0e:	aa01      	add	r2, sp, #4
    6c10:	f000 fdc8 	bl	77a4 <_fstat_r>
    6c14:	2800      	cmp	r0, #0
    6c16:	dbf2      	blt.n	6bfe <__swhatbuf_r+0x12>
    6c18:	22f0      	movs	r2, #240	; 0xf0
    6c1a:	9b02      	ldr	r3, [sp, #8]
    6c1c:	0212      	lsls	r2, r2, #8
    6c1e:	4013      	ands	r3, r2
    6c20:	4a05      	ldr	r2, [pc, #20]	; (6c38 <__swhatbuf_r+0x4c>)
    6c22:	189b      	adds	r3, r3, r2
    6c24:	425a      	negs	r2, r3
    6c26:	4153      	adcs	r3, r2
    6c28:	602b      	str	r3, [r5, #0]
    6c2a:	e7ed      	b.n	6c08 <__swhatbuf_r+0x1c>
    6c2c:	2340      	movs	r3, #64	; 0x40
    6c2e:	2000      	movs	r0, #0
    6c30:	6023      	str	r3, [r4, #0]
    6c32:	b010      	add	sp, #64	; 0x40
    6c34:	bd70      	pop	{r4, r5, r6, pc}
    6c36:	46c0      	nop			; (mov r8, r8)
    6c38:	ffffe000 	.word	0xffffe000

00006c3c <__smakebuf_r>:
    6c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6c3e:	2602      	movs	r6, #2
    6c40:	898b      	ldrh	r3, [r1, #12]
    6c42:	0005      	movs	r5, r0
    6c44:	000c      	movs	r4, r1
    6c46:	4233      	tst	r3, r6
    6c48:	d006      	beq.n	6c58 <__smakebuf_r+0x1c>
    6c4a:	0023      	movs	r3, r4
    6c4c:	3347      	adds	r3, #71	; 0x47
    6c4e:	6023      	str	r3, [r4, #0]
    6c50:	6123      	str	r3, [r4, #16]
    6c52:	2301      	movs	r3, #1
    6c54:	6163      	str	r3, [r4, #20]
    6c56:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    6c58:	ab01      	add	r3, sp, #4
    6c5a:	466a      	mov	r2, sp
    6c5c:	f7ff ffc6 	bl	6bec <__swhatbuf_r>
    6c60:	9900      	ldr	r1, [sp, #0]
    6c62:	0007      	movs	r7, r0
    6c64:	0028      	movs	r0, r5
    6c66:	f000 fb77 	bl	7358 <_malloc_r>
    6c6a:	2800      	cmp	r0, #0
    6c6c:	d106      	bne.n	6c7c <__smakebuf_r+0x40>
    6c6e:	220c      	movs	r2, #12
    6c70:	5ea3      	ldrsh	r3, [r4, r2]
    6c72:	059a      	lsls	r2, r3, #22
    6c74:	d4ef      	bmi.n	6c56 <__smakebuf_r+0x1a>
    6c76:	431e      	orrs	r6, r3
    6c78:	81a6      	strh	r6, [r4, #12]
    6c7a:	e7e6      	b.n	6c4a <__smakebuf_r+0xe>
    6c7c:	4b0d      	ldr	r3, [pc, #52]	; (6cb4 <__smakebuf_r+0x78>)
    6c7e:	62ab      	str	r3, [r5, #40]	; 0x28
    6c80:	2380      	movs	r3, #128	; 0x80
    6c82:	89a2      	ldrh	r2, [r4, #12]
    6c84:	6020      	str	r0, [r4, #0]
    6c86:	4313      	orrs	r3, r2
    6c88:	81a3      	strh	r3, [r4, #12]
    6c8a:	9b00      	ldr	r3, [sp, #0]
    6c8c:	6120      	str	r0, [r4, #16]
    6c8e:	6163      	str	r3, [r4, #20]
    6c90:	9b01      	ldr	r3, [sp, #4]
    6c92:	2b00      	cmp	r3, #0
    6c94:	d00a      	beq.n	6cac <__smakebuf_r+0x70>
    6c96:	230e      	movs	r3, #14
    6c98:	5ee1      	ldrsh	r1, [r4, r3]
    6c9a:	0028      	movs	r0, r5
    6c9c:	f000 fd94 	bl	77c8 <_isatty_r>
    6ca0:	2800      	cmp	r0, #0
    6ca2:	d003      	beq.n	6cac <__smakebuf_r+0x70>
    6ca4:	2301      	movs	r3, #1
    6ca6:	89a2      	ldrh	r2, [r4, #12]
    6ca8:	4313      	orrs	r3, r2
    6caa:	81a3      	strh	r3, [r4, #12]
    6cac:	89a0      	ldrh	r0, [r4, #12]
    6cae:	4338      	orrs	r0, r7
    6cb0:	81a0      	strh	r0, [r4, #12]
    6cb2:	e7d0      	b.n	6c56 <__smakebuf_r+0x1a>
    6cb4:	00006a25 	.word	0x00006a25

00006cb8 <malloc>:
    6cb8:	b510      	push	{r4, lr}
    6cba:	4b03      	ldr	r3, [pc, #12]	; (6cc8 <malloc+0x10>)
    6cbc:	0001      	movs	r1, r0
    6cbe:	6818      	ldr	r0, [r3, #0]
    6cc0:	f000 fb4a 	bl	7358 <_malloc_r>
    6cc4:	bd10      	pop	{r4, pc}
    6cc6:	46c0      	nop			; (mov r8, r8)
    6cc8:	2000000c 	.word	0x2000000c

00006ccc <memchr>:
    6ccc:	b2c9      	uxtb	r1, r1
    6cce:	1882      	adds	r2, r0, r2
    6cd0:	4290      	cmp	r0, r2
    6cd2:	d101      	bne.n	6cd8 <memchr+0xc>
    6cd4:	2000      	movs	r0, #0
    6cd6:	4770      	bx	lr
    6cd8:	7803      	ldrb	r3, [r0, #0]
    6cda:	428b      	cmp	r3, r1
    6cdc:	d0fb      	beq.n	6cd6 <memchr+0xa>
    6cde:	3001      	adds	r0, #1
    6ce0:	e7f6      	b.n	6cd0 <memchr+0x4>

00006ce2 <_Balloc>:
    6ce2:	b570      	push	{r4, r5, r6, lr}
    6ce4:	6a46      	ldr	r6, [r0, #36]	; 0x24
    6ce6:	0004      	movs	r4, r0
    6ce8:	000d      	movs	r5, r1
    6cea:	2e00      	cmp	r6, #0
    6cec:	d107      	bne.n	6cfe <_Balloc+0x1c>
    6cee:	2010      	movs	r0, #16
    6cf0:	f7ff ffe2 	bl	6cb8 <malloc>
    6cf4:	6260      	str	r0, [r4, #36]	; 0x24
    6cf6:	6046      	str	r6, [r0, #4]
    6cf8:	6086      	str	r6, [r0, #8]
    6cfa:	6006      	str	r6, [r0, #0]
    6cfc:	60c6      	str	r6, [r0, #12]
    6cfe:	6a66      	ldr	r6, [r4, #36]	; 0x24
    6d00:	68f3      	ldr	r3, [r6, #12]
    6d02:	2b00      	cmp	r3, #0
    6d04:	d013      	beq.n	6d2e <_Balloc+0x4c>
    6d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6d08:	00aa      	lsls	r2, r5, #2
    6d0a:	68db      	ldr	r3, [r3, #12]
    6d0c:	189b      	adds	r3, r3, r2
    6d0e:	6818      	ldr	r0, [r3, #0]
    6d10:	2800      	cmp	r0, #0
    6d12:	d118      	bne.n	6d46 <_Balloc+0x64>
    6d14:	2101      	movs	r1, #1
    6d16:	000e      	movs	r6, r1
    6d18:	40ae      	lsls	r6, r5
    6d1a:	1d72      	adds	r2, r6, #5
    6d1c:	0092      	lsls	r2, r2, #2
    6d1e:	0020      	movs	r0, r4
    6d20:	f000 fac2 	bl	72a8 <_calloc_r>
    6d24:	2800      	cmp	r0, #0
    6d26:	d00c      	beq.n	6d42 <_Balloc+0x60>
    6d28:	6045      	str	r5, [r0, #4]
    6d2a:	6086      	str	r6, [r0, #8]
    6d2c:	e00d      	b.n	6d4a <_Balloc+0x68>
    6d2e:	2221      	movs	r2, #33	; 0x21
    6d30:	2104      	movs	r1, #4
    6d32:	0020      	movs	r0, r4
    6d34:	f000 fab8 	bl	72a8 <_calloc_r>
    6d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6d3a:	60f0      	str	r0, [r6, #12]
    6d3c:	68db      	ldr	r3, [r3, #12]
    6d3e:	2b00      	cmp	r3, #0
    6d40:	d1e1      	bne.n	6d06 <_Balloc+0x24>
    6d42:	2000      	movs	r0, #0
    6d44:	bd70      	pop	{r4, r5, r6, pc}
    6d46:	6802      	ldr	r2, [r0, #0]
    6d48:	601a      	str	r2, [r3, #0]
    6d4a:	2300      	movs	r3, #0
    6d4c:	6103      	str	r3, [r0, #16]
    6d4e:	60c3      	str	r3, [r0, #12]
    6d50:	e7f8      	b.n	6d44 <_Balloc+0x62>

00006d52 <_Bfree>:
    6d52:	b570      	push	{r4, r5, r6, lr}
    6d54:	6a44      	ldr	r4, [r0, #36]	; 0x24
    6d56:	0006      	movs	r6, r0
    6d58:	000d      	movs	r5, r1
    6d5a:	2c00      	cmp	r4, #0
    6d5c:	d107      	bne.n	6d6e <_Bfree+0x1c>
    6d5e:	2010      	movs	r0, #16
    6d60:	f7ff ffaa 	bl	6cb8 <malloc>
    6d64:	6270      	str	r0, [r6, #36]	; 0x24
    6d66:	6044      	str	r4, [r0, #4]
    6d68:	6084      	str	r4, [r0, #8]
    6d6a:	6004      	str	r4, [r0, #0]
    6d6c:	60c4      	str	r4, [r0, #12]
    6d6e:	2d00      	cmp	r5, #0
    6d70:	d007      	beq.n	6d82 <_Bfree+0x30>
    6d72:	6a73      	ldr	r3, [r6, #36]	; 0x24
    6d74:	686a      	ldr	r2, [r5, #4]
    6d76:	68db      	ldr	r3, [r3, #12]
    6d78:	0092      	lsls	r2, r2, #2
    6d7a:	189b      	adds	r3, r3, r2
    6d7c:	681a      	ldr	r2, [r3, #0]
    6d7e:	602a      	str	r2, [r5, #0]
    6d80:	601d      	str	r5, [r3, #0]
    6d82:	bd70      	pop	{r4, r5, r6, pc}

00006d84 <__multadd>:
    6d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6d86:	001e      	movs	r6, r3
    6d88:	2314      	movs	r3, #20
    6d8a:	469c      	mov	ip, r3
    6d8c:	0007      	movs	r7, r0
    6d8e:	000c      	movs	r4, r1
    6d90:	2000      	movs	r0, #0
    6d92:	690d      	ldr	r5, [r1, #16]
    6d94:	448c      	add	ip, r1
    6d96:	4663      	mov	r3, ip
    6d98:	8819      	ldrh	r1, [r3, #0]
    6d9a:	681b      	ldr	r3, [r3, #0]
    6d9c:	4351      	muls	r1, r2
    6d9e:	0c1b      	lsrs	r3, r3, #16
    6da0:	4353      	muls	r3, r2
    6da2:	1989      	adds	r1, r1, r6
    6da4:	0c0e      	lsrs	r6, r1, #16
    6da6:	199b      	adds	r3, r3, r6
    6da8:	b289      	uxth	r1, r1
    6daa:	0c1e      	lsrs	r6, r3, #16
    6dac:	041b      	lsls	r3, r3, #16
    6dae:	185b      	adds	r3, r3, r1
    6db0:	4661      	mov	r1, ip
    6db2:	3001      	adds	r0, #1
    6db4:	c108      	stmia	r1!, {r3}
    6db6:	468c      	mov	ip, r1
    6db8:	4285      	cmp	r5, r0
    6dba:	dcec      	bgt.n	6d96 <__multadd+0x12>
    6dbc:	2e00      	cmp	r6, #0
    6dbe:	d01b      	beq.n	6df8 <__multadd+0x74>
    6dc0:	68a3      	ldr	r3, [r4, #8]
    6dc2:	429d      	cmp	r5, r3
    6dc4:	db12      	blt.n	6dec <__multadd+0x68>
    6dc6:	6863      	ldr	r3, [r4, #4]
    6dc8:	0038      	movs	r0, r7
    6dca:	1c59      	adds	r1, r3, #1
    6dcc:	f7ff ff89 	bl	6ce2 <_Balloc>
    6dd0:	0021      	movs	r1, r4
    6dd2:	6923      	ldr	r3, [r4, #16]
    6dd4:	9001      	str	r0, [sp, #4]
    6dd6:	1c9a      	adds	r2, r3, #2
    6dd8:	0092      	lsls	r2, r2, #2
    6dda:	310c      	adds	r1, #12
    6ddc:	300c      	adds	r0, #12
    6dde:	f7fe f833 	bl	4e48 <memcpy>
    6de2:	0021      	movs	r1, r4
    6de4:	0038      	movs	r0, r7
    6de6:	f7ff ffb4 	bl	6d52 <_Bfree>
    6dea:	9c01      	ldr	r4, [sp, #4]
    6dec:	1d2b      	adds	r3, r5, #4
    6dee:	009b      	lsls	r3, r3, #2
    6df0:	18e3      	adds	r3, r4, r3
    6df2:	3501      	adds	r5, #1
    6df4:	605e      	str	r6, [r3, #4]
    6df6:	6125      	str	r5, [r4, #16]
    6df8:	0020      	movs	r0, r4
    6dfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00006dfc <__hi0bits>:
    6dfc:	0003      	movs	r3, r0
    6dfe:	0c02      	lsrs	r2, r0, #16
    6e00:	2000      	movs	r0, #0
    6e02:	4282      	cmp	r2, r0
    6e04:	d101      	bne.n	6e0a <__hi0bits+0xe>
    6e06:	041b      	lsls	r3, r3, #16
    6e08:	3010      	adds	r0, #16
    6e0a:	0e1a      	lsrs	r2, r3, #24
    6e0c:	d101      	bne.n	6e12 <__hi0bits+0x16>
    6e0e:	3008      	adds	r0, #8
    6e10:	021b      	lsls	r3, r3, #8
    6e12:	0f1a      	lsrs	r2, r3, #28
    6e14:	d101      	bne.n	6e1a <__hi0bits+0x1e>
    6e16:	3004      	adds	r0, #4
    6e18:	011b      	lsls	r3, r3, #4
    6e1a:	0f9a      	lsrs	r2, r3, #30
    6e1c:	d101      	bne.n	6e22 <__hi0bits+0x26>
    6e1e:	3002      	adds	r0, #2
    6e20:	009b      	lsls	r3, r3, #2
    6e22:	2b00      	cmp	r3, #0
    6e24:	db03      	blt.n	6e2e <__hi0bits+0x32>
    6e26:	3001      	adds	r0, #1
    6e28:	005b      	lsls	r3, r3, #1
    6e2a:	d400      	bmi.n	6e2e <__hi0bits+0x32>
    6e2c:	2020      	movs	r0, #32
    6e2e:	4770      	bx	lr

00006e30 <__lo0bits>:
    6e30:	2207      	movs	r2, #7
    6e32:	6803      	ldr	r3, [r0, #0]
    6e34:	b510      	push	{r4, lr}
    6e36:	0001      	movs	r1, r0
    6e38:	401a      	ands	r2, r3
    6e3a:	d00d      	beq.n	6e58 <__lo0bits+0x28>
    6e3c:	2401      	movs	r4, #1
    6e3e:	2000      	movs	r0, #0
    6e40:	4223      	tst	r3, r4
    6e42:	d105      	bne.n	6e50 <__lo0bits+0x20>
    6e44:	3002      	adds	r0, #2
    6e46:	4203      	tst	r3, r0
    6e48:	d003      	beq.n	6e52 <__lo0bits+0x22>
    6e4a:	40e3      	lsrs	r3, r4
    6e4c:	0020      	movs	r0, r4
    6e4e:	600b      	str	r3, [r1, #0]
    6e50:	bd10      	pop	{r4, pc}
    6e52:	089b      	lsrs	r3, r3, #2
    6e54:	600b      	str	r3, [r1, #0]
    6e56:	e7fb      	b.n	6e50 <__lo0bits+0x20>
    6e58:	b29c      	uxth	r4, r3
    6e5a:	0010      	movs	r0, r2
    6e5c:	2c00      	cmp	r4, #0
    6e5e:	d101      	bne.n	6e64 <__lo0bits+0x34>
    6e60:	2010      	movs	r0, #16
    6e62:	0c1b      	lsrs	r3, r3, #16
    6e64:	b2da      	uxtb	r2, r3
    6e66:	2a00      	cmp	r2, #0
    6e68:	d101      	bne.n	6e6e <__lo0bits+0x3e>
    6e6a:	3008      	adds	r0, #8
    6e6c:	0a1b      	lsrs	r3, r3, #8
    6e6e:	071a      	lsls	r2, r3, #28
    6e70:	d101      	bne.n	6e76 <__lo0bits+0x46>
    6e72:	3004      	adds	r0, #4
    6e74:	091b      	lsrs	r3, r3, #4
    6e76:	079a      	lsls	r2, r3, #30
    6e78:	d101      	bne.n	6e7e <__lo0bits+0x4e>
    6e7a:	3002      	adds	r0, #2
    6e7c:	089b      	lsrs	r3, r3, #2
    6e7e:	07da      	lsls	r2, r3, #31
    6e80:	d4e8      	bmi.n	6e54 <__lo0bits+0x24>
    6e82:	085b      	lsrs	r3, r3, #1
    6e84:	d001      	beq.n	6e8a <__lo0bits+0x5a>
    6e86:	3001      	adds	r0, #1
    6e88:	e7e4      	b.n	6e54 <__lo0bits+0x24>
    6e8a:	2020      	movs	r0, #32
    6e8c:	e7e0      	b.n	6e50 <__lo0bits+0x20>

00006e8e <__i2b>:
    6e8e:	b510      	push	{r4, lr}
    6e90:	000c      	movs	r4, r1
    6e92:	2101      	movs	r1, #1
    6e94:	f7ff ff25 	bl	6ce2 <_Balloc>
    6e98:	2301      	movs	r3, #1
    6e9a:	6144      	str	r4, [r0, #20]
    6e9c:	6103      	str	r3, [r0, #16]
    6e9e:	bd10      	pop	{r4, pc}

00006ea0 <__multiply>:
    6ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ea2:	690b      	ldr	r3, [r1, #16]
    6ea4:	0015      	movs	r5, r2
    6ea6:	6912      	ldr	r2, [r2, #16]
    6ea8:	b089      	sub	sp, #36	; 0x24
    6eaa:	000c      	movs	r4, r1
    6eac:	4293      	cmp	r3, r2
    6eae:	da01      	bge.n	6eb4 <__multiply+0x14>
    6eb0:	002c      	movs	r4, r5
    6eb2:	000d      	movs	r5, r1
    6eb4:	6927      	ldr	r7, [r4, #16]
    6eb6:	692e      	ldr	r6, [r5, #16]
    6eb8:	68a2      	ldr	r2, [r4, #8]
    6eba:	19bb      	adds	r3, r7, r6
    6ebc:	6861      	ldr	r1, [r4, #4]
    6ebe:	9301      	str	r3, [sp, #4]
    6ec0:	4293      	cmp	r3, r2
    6ec2:	dd00      	ble.n	6ec6 <__multiply+0x26>
    6ec4:	3101      	adds	r1, #1
    6ec6:	f7ff ff0c 	bl	6ce2 <_Balloc>
    6eca:	0003      	movs	r3, r0
    6ecc:	3314      	adds	r3, #20
    6ece:	9300      	str	r3, [sp, #0]
    6ed0:	9a00      	ldr	r2, [sp, #0]
    6ed2:	19bb      	adds	r3, r7, r6
    6ed4:	4694      	mov	ip, r2
    6ed6:	009b      	lsls	r3, r3, #2
    6ed8:	449c      	add	ip, r3
    6eda:	0013      	movs	r3, r2
    6edc:	2200      	movs	r2, #0
    6ede:	9004      	str	r0, [sp, #16]
    6ee0:	4563      	cmp	r3, ip
    6ee2:	d31c      	bcc.n	6f1e <__multiply+0x7e>
    6ee4:	002a      	movs	r2, r5
    6ee6:	3414      	adds	r4, #20
    6ee8:	00bf      	lsls	r7, r7, #2
    6eea:	19e3      	adds	r3, r4, r7
    6eec:	3214      	adds	r2, #20
    6eee:	00b6      	lsls	r6, r6, #2
    6ef0:	9305      	str	r3, [sp, #20]
    6ef2:	1993      	adds	r3, r2, r6
    6ef4:	9402      	str	r4, [sp, #8]
    6ef6:	9306      	str	r3, [sp, #24]
    6ef8:	9b06      	ldr	r3, [sp, #24]
    6efa:	429a      	cmp	r2, r3
    6efc:	d311      	bcc.n	6f22 <__multiply+0x82>
    6efe:	9b01      	ldr	r3, [sp, #4]
    6f00:	2b00      	cmp	r3, #0
    6f02:	dd06      	ble.n	6f12 <__multiply+0x72>
    6f04:	2304      	movs	r3, #4
    6f06:	425b      	negs	r3, r3
    6f08:	449c      	add	ip, r3
    6f0a:	4663      	mov	r3, ip
    6f0c:	681b      	ldr	r3, [r3, #0]
    6f0e:	2b00      	cmp	r3, #0
    6f10:	d051      	beq.n	6fb6 <__multiply+0x116>
    6f12:	9b04      	ldr	r3, [sp, #16]
    6f14:	9a01      	ldr	r2, [sp, #4]
    6f16:	0018      	movs	r0, r3
    6f18:	611a      	str	r2, [r3, #16]
    6f1a:	b009      	add	sp, #36	; 0x24
    6f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f1e:	c304      	stmia	r3!, {r2}
    6f20:	e7de      	b.n	6ee0 <__multiply+0x40>
    6f22:	8814      	ldrh	r4, [r2, #0]
    6f24:	2c00      	cmp	r4, #0
    6f26:	d01e      	beq.n	6f66 <__multiply+0xc6>
    6f28:	2600      	movs	r6, #0
    6f2a:	9d00      	ldr	r5, [sp, #0]
    6f2c:	9f02      	ldr	r7, [sp, #8]
    6f2e:	cf01      	ldmia	r7!, {r0}
    6f30:	9507      	str	r5, [sp, #28]
    6f32:	cd08      	ldmia	r5!, {r3}
    6f34:	9303      	str	r3, [sp, #12]
    6f36:	b283      	uxth	r3, r0
    6f38:	4363      	muls	r3, r4
    6f3a:	0019      	movs	r1, r3
    6f3c:	466b      	mov	r3, sp
    6f3e:	0c00      	lsrs	r0, r0, #16
    6f40:	899b      	ldrh	r3, [r3, #12]
    6f42:	4360      	muls	r0, r4
    6f44:	18cb      	adds	r3, r1, r3
    6f46:	9903      	ldr	r1, [sp, #12]
    6f48:	199b      	adds	r3, r3, r6
    6f4a:	0c09      	lsrs	r1, r1, #16
    6f4c:	1841      	adds	r1, r0, r1
    6f4e:	0c18      	lsrs	r0, r3, #16
    6f50:	1809      	adds	r1, r1, r0
    6f52:	0c0e      	lsrs	r6, r1, #16
    6f54:	b29b      	uxth	r3, r3
    6f56:	0409      	lsls	r1, r1, #16
    6f58:	430b      	orrs	r3, r1
    6f5a:	9907      	ldr	r1, [sp, #28]
    6f5c:	600b      	str	r3, [r1, #0]
    6f5e:	9b05      	ldr	r3, [sp, #20]
    6f60:	42bb      	cmp	r3, r7
    6f62:	d8e4      	bhi.n	6f2e <__multiply+0x8e>
    6f64:	602e      	str	r6, [r5, #0]
    6f66:	6813      	ldr	r3, [r2, #0]
    6f68:	0c1b      	lsrs	r3, r3, #16
    6f6a:	9303      	str	r3, [sp, #12]
    6f6c:	d01e      	beq.n	6fac <__multiply+0x10c>
    6f6e:	2600      	movs	r6, #0
    6f70:	9b00      	ldr	r3, [sp, #0]
    6f72:	9c02      	ldr	r4, [sp, #8]
    6f74:	681b      	ldr	r3, [r3, #0]
    6f76:	9800      	ldr	r0, [sp, #0]
    6f78:	0007      	movs	r7, r0
    6f7a:	8821      	ldrh	r1, [r4, #0]
    6f7c:	9d03      	ldr	r5, [sp, #12]
    6f7e:	b29b      	uxth	r3, r3
    6f80:	4369      	muls	r1, r5
    6f82:	c820      	ldmia	r0!, {r5}
    6f84:	0c2d      	lsrs	r5, r5, #16
    6f86:	1949      	adds	r1, r1, r5
    6f88:	198e      	adds	r6, r1, r6
    6f8a:	0431      	lsls	r1, r6, #16
    6f8c:	430b      	orrs	r3, r1
    6f8e:	603b      	str	r3, [r7, #0]
    6f90:	cc08      	ldmia	r4!, {r3}
    6f92:	9903      	ldr	r1, [sp, #12]
    6f94:	0c1b      	lsrs	r3, r3, #16
    6f96:	434b      	muls	r3, r1
    6f98:	6879      	ldr	r1, [r7, #4]
    6f9a:	0c36      	lsrs	r6, r6, #16
    6f9c:	b289      	uxth	r1, r1
    6f9e:	185b      	adds	r3, r3, r1
    6fa0:	9905      	ldr	r1, [sp, #20]
    6fa2:	199b      	adds	r3, r3, r6
    6fa4:	0c1e      	lsrs	r6, r3, #16
    6fa6:	42a1      	cmp	r1, r4
    6fa8:	d8e6      	bhi.n	6f78 <__multiply+0xd8>
    6faa:	6003      	str	r3, [r0, #0]
    6fac:	9b00      	ldr	r3, [sp, #0]
    6fae:	3204      	adds	r2, #4
    6fb0:	3304      	adds	r3, #4
    6fb2:	9300      	str	r3, [sp, #0]
    6fb4:	e7a0      	b.n	6ef8 <__multiply+0x58>
    6fb6:	9b01      	ldr	r3, [sp, #4]
    6fb8:	3b01      	subs	r3, #1
    6fba:	9301      	str	r3, [sp, #4]
    6fbc:	e79f      	b.n	6efe <__multiply+0x5e>
	...

00006fc0 <__pow5mult>:
    6fc0:	2303      	movs	r3, #3
    6fc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6fc4:	4013      	ands	r3, r2
    6fc6:	0005      	movs	r5, r0
    6fc8:	000e      	movs	r6, r1
    6fca:	0014      	movs	r4, r2
    6fcc:	2b00      	cmp	r3, #0
    6fce:	d008      	beq.n	6fe2 <__pow5mult+0x22>
    6fd0:	4922      	ldr	r1, [pc, #136]	; (705c <__pow5mult+0x9c>)
    6fd2:	3b01      	subs	r3, #1
    6fd4:	009a      	lsls	r2, r3, #2
    6fd6:	5852      	ldr	r2, [r2, r1]
    6fd8:	2300      	movs	r3, #0
    6fda:	0031      	movs	r1, r6
    6fdc:	f7ff fed2 	bl	6d84 <__multadd>
    6fe0:	0006      	movs	r6, r0
    6fe2:	10a3      	asrs	r3, r4, #2
    6fe4:	9301      	str	r3, [sp, #4]
    6fe6:	d036      	beq.n	7056 <__pow5mult+0x96>
    6fe8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    6fea:	2c00      	cmp	r4, #0
    6fec:	d107      	bne.n	6ffe <__pow5mult+0x3e>
    6fee:	2010      	movs	r0, #16
    6ff0:	f7ff fe62 	bl	6cb8 <malloc>
    6ff4:	6268      	str	r0, [r5, #36]	; 0x24
    6ff6:	6044      	str	r4, [r0, #4]
    6ff8:	6084      	str	r4, [r0, #8]
    6ffa:	6004      	str	r4, [r0, #0]
    6ffc:	60c4      	str	r4, [r0, #12]
    6ffe:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    7000:	68bc      	ldr	r4, [r7, #8]
    7002:	2c00      	cmp	r4, #0
    7004:	d107      	bne.n	7016 <__pow5mult+0x56>
    7006:	4916      	ldr	r1, [pc, #88]	; (7060 <__pow5mult+0xa0>)
    7008:	0028      	movs	r0, r5
    700a:	f7ff ff40 	bl	6e8e <__i2b>
    700e:	2300      	movs	r3, #0
    7010:	0004      	movs	r4, r0
    7012:	60b8      	str	r0, [r7, #8]
    7014:	6003      	str	r3, [r0, #0]
    7016:	2201      	movs	r2, #1
    7018:	9b01      	ldr	r3, [sp, #4]
    701a:	4213      	tst	r3, r2
    701c:	d00a      	beq.n	7034 <__pow5mult+0x74>
    701e:	0031      	movs	r1, r6
    7020:	0022      	movs	r2, r4
    7022:	0028      	movs	r0, r5
    7024:	f7ff ff3c 	bl	6ea0 <__multiply>
    7028:	0007      	movs	r7, r0
    702a:	0031      	movs	r1, r6
    702c:	0028      	movs	r0, r5
    702e:	f7ff fe90 	bl	6d52 <_Bfree>
    7032:	003e      	movs	r6, r7
    7034:	9b01      	ldr	r3, [sp, #4]
    7036:	105b      	asrs	r3, r3, #1
    7038:	9301      	str	r3, [sp, #4]
    703a:	d00c      	beq.n	7056 <__pow5mult+0x96>
    703c:	6820      	ldr	r0, [r4, #0]
    703e:	2800      	cmp	r0, #0
    7040:	d107      	bne.n	7052 <__pow5mult+0x92>
    7042:	0022      	movs	r2, r4
    7044:	0021      	movs	r1, r4
    7046:	0028      	movs	r0, r5
    7048:	f7ff ff2a 	bl	6ea0 <__multiply>
    704c:	2300      	movs	r3, #0
    704e:	6020      	str	r0, [r4, #0]
    7050:	6003      	str	r3, [r0, #0]
    7052:	0004      	movs	r4, r0
    7054:	e7df      	b.n	7016 <__pow5mult+0x56>
    7056:	0030      	movs	r0, r6
    7058:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    705a:	46c0      	nop			; (mov r8, r8)
    705c:	0000a6a0 	.word	0x0000a6a0
    7060:	00000271 	.word	0x00000271

00007064 <__lshift>:
    7064:	b5f0      	push	{r4, r5, r6, r7, lr}
    7066:	000d      	movs	r5, r1
    7068:	0017      	movs	r7, r2
    706a:	692b      	ldr	r3, [r5, #16]
    706c:	1154      	asrs	r4, r2, #5
    706e:	b085      	sub	sp, #20
    7070:	18e3      	adds	r3, r4, r3
    7072:	9302      	str	r3, [sp, #8]
    7074:	3301      	adds	r3, #1
    7076:	9301      	str	r3, [sp, #4]
    7078:	6849      	ldr	r1, [r1, #4]
    707a:	68ab      	ldr	r3, [r5, #8]
    707c:	9003      	str	r0, [sp, #12]
    707e:	9a01      	ldr	r2, [sp, #4]
    7080:	4293      	cmp	r3, r2
    7082:	db34      	blt.n	70ee <__lshift+0x8a>
    7084:	9803      	ldr	r0, [sp, #12]
    7086:	f7ff fe2c 	bl	6ce2 <_Balloc>
    708a:	2300      	movs	r3, #0
    708c:	0002      	movs	r2, r0
    708e:	0006      	movs	r6, r0
    7090:	0019      	movs	r1, r3
    7092:	3214      	adds	r2, #20
    7094:	42a3      	cmp	r3, r4
    7096:	db2d      	blt.n	70f4 <__lshift+0x90>
    7098:	43e3      	mvns	r3, r4
    709a:	17db      	asrs	r3, r3, #31
    709c:	401c      	ands	r4, r3
    709e:	002b      	movs	r3, r5
    70a0:	211f      	movs	r1, #31
    70a2:	00a4      	lsls	r4, r4, #2
    70a4:	1914      	adds	r4, r2, r4
    70a6:	692a      	ldr	r2, [r5, #16]
    70a8:	3314      	adds	r3, #20
    70aa:	0092      	lsls	r2, r2, #2
    70ac:	189a      	adds	r2, r3, r2
    70ae:	400f      	ands	r7, r1
    70b0:	d024      	beq.n	70fc <__lshift+0x98>
    70b2:	3101      	adds	r1, #1
    70b4:	1bc9      	subs	r1, r1, r7
    70b6:	468c      	mov	ip, r1
    70b8:	2100      	movs	r1, #0
    70ba:	6818      	ldr	r0, [r3, #0]
    70bc:	40b8      	lsls	r0, r7
    70be:	4301      	orrs	r1, r0
    70c0:	4660      	mov	r0, ip
    70c2:	6021      	str	r1, [r4, #0]
    70c4:	cb02      	ldmia	r3!, {r1}
    70c6:	3404      	adds	r4, #4
    70c8:	40c1      	lsrs	r1, r0
    70ca:	429a      	cmp	r2, r3
    70cc:	d8f5      	bhi.n	70ba <__lshift+0x56>
    70ce:	6021      	str	r1, [r4, #0]
    70d0:	2900      	cmp	r1, #0
    70d2:	d002      	beq.n	70da <__lshift+0x76>
    70d4:	9b02      	ldr	r3, [sp, #8]
    70d6:	3302      	adds	r3, #2
    70d8:	9301      	str	r3, [sp, #4]
    70da:	9b01      	ldr	r3, [sp, #4]
    70dc:	9803      	ldr	r0, [sp, #12]
    70de:	3b01      	subs	r3, #1
    70e0:	6133      	str	r3, [r6, #16]
    70e2:	0029      	movs	r1, r5
    70e4:	f7ff fe35 	bl	6d52 <_Bfree>
    70e8:	0030      	movs	r0, r6
    70ea:	b005      	add	sp, #20
    70ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70ee:	3101      	adds	r1, #1
    70f0:	005b      	lsls	r3, r3, #1
    70f2:	e7c4      	b.n	707e <__lshift+0x1a>
    70f4:	0098      	lsls	r0, r3, #2
    70f6:	5011      	str	r1, [r2, r0]
    70f8:	3301      	adds	r3, #1
    70fa:	e7cb      	b.n	7094 <__lshift+0x30>
    70fc:	cb02      	ldmia	r3!, {r1}
    70fe:	c402      	stmia	r4!, {r1}
    7100:	429a      	cmp	r2, r3
    7102:	d8fb      	bhi.n	70fc <__lshift+0x98>
    7104:	e7e9      	b.n	70da <__lshift+0x76>

00007106 <__mcmp>:
    7106:	690a      	ldr	r2, [r1, #16]
    7108:	6903      	ldr	r3, [r0, #16]
    710a:	b530      	push	{r4, r5, lr}
    710c:	1a9b      	subs	r3, r3, r2
    710e:	d10e      	bne.n	712e <__mcmp+0x28>
    7110:	0092      	lsls	r2, r2, #2
    7112:	3014      	adds	r0, #20
    7114:	3114      	adds	r1, #20
    7116:	1884      	adds	r4, r0, r2
    7118:	1889      	adds	r1, r1, r2
    711a:	3c04      	subs	r4, #4
    711c:	3904      	subs	r1, #4
    711e:	6822      	ldr	r2, [r4, #0]
    7120:	680d      	ldr	r5, [r1, #0]
    7122:	42aa      	cmp	r2, r5
    7124:	d005      	beq.n	7132 <__mcmp+0x2c>
    7126:	42aa      	cmp	r2, r5
    7128:	4192      	sbcs	r2, r2
    712a:	2301      	movs	r3, #1
    712c:	4313      	orrs	r3, r2
    712e:	0018      	movs	r0, r3
    7130:	bd30      	pop	{r4, r5, pc}
    7132:	42a0      	cmp	r0, r4
    7134:	d3f1      	bcc.n	711a <__mcmp+0x14>
    7136:	e7fa      	b.n	712e <__mcmp+0x28>

00007138 <__mdiff>:
    7138:	b5f0      	push	{r4, r5, r6, r7, lr}
    713a:	000d      	movs	r5, r1
    713c:	b085      	sub	sp, #20
    713e:	0007      	movs	r7, r0
    7140:	0011      	movs	r1, r2
    7142:	0028      	movs	r0, r5
    7144:	0014      	movs	r4, r2
    7146:	f7ff ffde 	bl	7106 <__mcmp>
    714a:	1e06      	subs	r6, r0, #0
    714c:	d108      	bne.n	7160 <__mdiff+0x28>
    714e:	0001      	movs	r1, r0
    7150:	0038      	movs	r0, r7
    7152:	f7ff fdc6 	bl	6ce2 <_Balloc>
    7156:	2301      	movs	r3, #1
    7158:	6146      	str	r6, [r0, #20]
    715a:	6103      	str	r3, [r0, #16]
    715c:	b005      	add	sp, #20
    715e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7160:	2301      	movs	r3, #1
    7162:	9301      	str	r3, [sp, #4]
    7164:	2800      	cmp	r0, #0
    7166:	db04      	blt.n	7172 <__mdiff+0x3a>
    7168:	0023      	movs	r3, r4
    716a:	002c      	movs	r4, r5
    716c:	001d      	movs	r5, r3
    716e:	2300      	movs	r3, #0
    7170:	9301      	str	r3, [sp, #4]
    7172:	6861      	ldr	r1, [r4, #4]
    7174:	0038      	movs	r0, r7
    7176:	f7ff fdb4 	bl	6ce2 <_Balloc>
    717a:	002f      	movs	r7, r5
    717c:	2200      	movs	r2, #0
    717e:	9b01      	ldr	r3, [sp, #4]
    7180:	6926      	ldr	r6, [r4, #16]
    7182:	60c3      	str	r3, [r0, #12]
    7184:	3414      	adds	r4, #20
    7186:	00b3      	lsls	r3, r6, #2
    7188:	18e3      	adds	r3, r4, r3
    718a:	9302      	str	r3, [sp, #8]
    718c:	692b      	ldr	r3, [r5, #16]
    718e:	3714      	adds	r7, #20
    7190:	009b      	lsls	r3, r3, #2
    7192:	18fb      	adds	r3, r7, r3
    7194:	9303      	str	r3, [sp, #12]
    7196:	0003      	movs	r3, r0
    7198:	4694      	mov	ip, r2
    719a:	3314      	adds	r3, #20
    719c:	cc20      	ldmia	r4!, {r5}
    719e:	cf04      	ldmia	r7!, {r2}
    71a0:	9201      	str	r2, [sp, #4]
    71a2:	b2aa      	uxth	r2, r5
    71a4:	4494      	add	ip, r2
    71a6:	466a      	mov	r2, sp
    71a8:	4661      	mov	r1, ip
    71aa:	8892      	ldrh	r2, [r2, #4]
    71ac:	0c2d      	lsrs	r5, r5, #16
    71ae:	1a8a      	subs	r2, r1, r2
    71b0:	9901      	ldr	r1, [sp, #4]
    71b2:	0c09      	lsrs	r1, r1, #16
    71b4:	1a69      	subs	r1, r5, r1
    71b6:	1415      	asrs	r5, r2, #16
    71b8:	1949      	adds	r1, r1, r5
    71ba:	140d      	asrs	r5, r1, #16
    71bc:	b292      	uxth	r2, r2
    71be:	0409      	lsls	r1, r1, #16
    71c0:	430a      	orrs	r2, r1
    71c2:	601a      	str	r2, [r3, #0]
    71c4:	9a03      	ldr	r2, [sp, #12]
    71c6:	46ac      	mov	ip, r5
    71c8:	3304      	adds	r3, #4
    71ca:	42ba      	cmp	r2, r7
    71cc:	d8e6      	bhi.n	719c <__mdiff+0x64>
    71ce:	9902      	ldr	r1, [sp, #8]
    71d0:	001a      	movs	r2, r3
    71d2:	428c      	cmp	r4, r1
    71d4:	d305      	bcc.n	71e2 <__mdiff+0xaa>
    71d6:	3a04      	subs	r2, #4
    71d8:	6813      	ldr	r3, [r2, #0]
    71da:	2b00      	cmp	r3, #0
    71dc:	d00e      	beq.n	71fc <__mdiff+0xc4>
    71de:	6106      	str	r6, [r0, #16]
    71e0:	e7bc      	b.n	715c <__mdiff+0x24>
    71e2:	cc04      	ldmia	r4!, {r2}
    71e4:	b291      	uxth	r1, r2
    71e6:	4461      	add	r1, ip
    71e8:	140d      	asrs	r5, r1, #16
    71ea:	0c12      	lsrs	r2, r2, #16
    71ec:	1952      	adds	r2, r2, r5
    71ee:	1415      	asrs	r5, r2, #16
    71f0:	b289      	uxth	r1, r1
    71f2:	0412      	lsls	r2, r2, #16
    71f4:	430a      	orrs	r2, r1
    71f6:	46ac      	mov	ip, r5
    71f8:	c304      	stmia	r3!, {r2}
    71fa:	e7e8      	b.n	71ce <__mdiff+0x96>
    71fc:	3e01      	subs	r6, #1
    71fe:	e7ea      	b.n	71d6 <__mdiff+0x9e>

00007200 <__d2b>:
    7200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7202:	001d      	movs	r5, r3
    7204:	2101      	movs	r1, #1
    7206:	9f08      	ldr	r7, [sp, #32]
    7208:	0014      	movs	r4, r2
    720a:	f7ff fd6a 	bl	6ce2 <_Balloc>
    720e:	032b      	lsls	r3, r5, #12
    7210:	006d      	lsls	r5, r5, #1
    7212:	0006      	movs	r6, r0
    7214:	0b1b      	lsrs	r3, r3, #12
    7216:	0d6d      	lsrs	r5, r5, #21
    7218:	d124      	bne.n	7264 <__d2b+0x64>
    721a:	9301      	str	r3, [sp, #4]
    721c:	2c00      	cmp	r4, #0
    721e:	d027      	beq.n	7270 <__d2b+0x70>
    7220:	4668      	mov	r0, sp
    7222:	9400      	str	r4, [sp, #0]
    7224:	f7ff fe04 	bl	6e30 <__lo0bits>
    7228:	9c00      	ldr	r4, [sp, #0]
    722a:	2800      	cmp	r0, #0
    722c:	d01e      	beq.n	726c <__d2b+0x6c>
    722e:	9b01      	ldr	r3, [sp, #4]
    7230:	2120      	movs	r1, #32
    7232:	001a      	movs	r2, r3
    7234:	1a09      	subs	r1, r1, r0
    7236:	408a      	lsls	r2, r1
    7238:	40c3      	lsrs	r3, r0
    723a:	4322      	orrs	r2, r4
    723c:	6172      	str	r2, [r6, #20]
    723e:	9301      	str	r3, [sp, #4]
    7240:	9c01      	ldr	r4, [sp, #4]
    7242:	61b4      	str	r4, [r6, #24]
    7244:	1e63      	subs	r3, r4, #1
    7246:	419c      	sbcs	r4, r3
    7248:	3401      	adds	r4, #1
    724a:	6134      	str	r4, [r6, #16]
    724c:	2d00      	cmp	r5, #0
    724e:	d018      	beq.n	7282 <__d2b+0x82>
    7250:	4b12      	ldr	r3, [pc, #72]	; (729c <__d2b+0x9c>)
    7252:	18ed      	adds	r5, r5, r3
    7254:	2335      	movs	r3, #53	; 0x35
    7256:	182d      	adds	r5, r5, r0
    7258:	603d      	str	r5, [r7, #0]
    725a:	1a18      	subs	r0, r3, r0
    725c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    725e:	6018      	str	r0, [r3, #0]
    7260:	0030      	movs	r0, r6
    7262:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7264:	2280      	movs	r2, #128	; 0x80
    7266:	0352      	lsls	r2, r2, #13
    7268:	4313      	orrs	r3, r2
    726a:	e7d6      	b.n	721a <__d2b+0x1a>
    726c:	6174      	str	r4, [r6, #20]
    726e:	e7e7      	b.n	7240 <__d2b+0x40>
    7270:	a801      	add	r0, sp, #4
    7272:	f7ff fddd 	bl	6e30 <__lo0bits>
    7276:	2401      	movs	r4, #1
    7278:	9b01      	ldr	r3, [sp, #4]
    727a:	6134      	str	r4, [r6, #16]
    727c:	6173      	str	r3, [r6, #20]
    727e:	3020      	adds	r0, #32
    7280:	e7e4      	b.n	724c <__d2b+0x4c>
    7282:	4b07      	ldr	r3, [pc, #28]	; (72a0 <__d2b+0xa0>)
    7284:	18c0      	adds	r0, r0, r3
    7286:	4b07      	ldr	r3, [pc, #28]	; (72a4 <__d2b+0xa4>)
    7288:	6038      	str	r0, [r7, #0]
    728a:	18e3      	adds	r3, r4, r3
    728c:	009b      	lsls	r3, r3, #2
    728e:	18f3      	adds	r3, r6, r3
    7290:	6958      	ldr	r0, [r3, #20]
    7292:	f7ff fdb3 	bl	6dfc <__hi0bits>
    7296:	0164      	lsls	r4, r4, #5
    7298:	1a20      	subs	r0, r4, r0
    729a:	e7df      	b.n	725c <__d2b+0x5c>
    729c:	fffffbcd 	.word	0xfffffbcd
    72a0:	fffffbce 	.word	0xfffffbce
    72a4:	3fffffff 	.word	0x3fffffff

000072a8 <_calloc_r>:
    72a8:	434a      	muls	r2, r1
    72aa:	b570      	push	{r4, r5, r6, lr}
    72ac:	0011      	movs	r1, r2
    72ae:	0014      	movs	r4, r2
    72b0:	f000 f852 	bl	7358 <_malloc_r>
    72b4:	1e05      	subs	r5, r0, #0
    72b6:	d003      	beq.n	72c0 <_calloc_r+0x18>
    72b8:	0022      	movs	r2, r4
    72ba:	2100      	movs	r1, #0
    72bc:	f7fd fdcd 	bl	4e5a <memset>
    72c0:	0028      	movs	r0, r5
    72c2:	bd70      	pop	{r4, r5, r6, pc}

000072c4 <_free_r>:
    72c4:	b570      	push	{r4, r5, r6, lr}
    72c6:	0005      	movs	r5, r0
    72c8:	2900      	cmp	r1, #0
    72ca:	d010      	beq.n	72ee <_free_r+0x2a>
    72cc:	1f0c      	subs	r4, r1, #4
    72ce:	6823      	ldr	r3, [r4, #0]
    72d0:	2b00      	cmp	r3, #0
    72d2:	da00      	bge.n	72d6 <_free_r+0x12>
    72d4:	18e4      	adds	r4, r4, r3
    72d6:	0028      	movs	r0, r5
    72d8:	f000 faae 	bl	7838 <__malloc_lock>
    72dc:	4a1d      	ldr	r2, [pc, #116]	; (7354 <_free_r+0x90>)
    72de:	6813      	ldr	r3, [r2, #0]
    72e0:	2b00      	cmp	r3, #0
    72e2:	d105      	bne.n	72f0 <_free_r+0x2c>
    72e4:	6063      	str	r3, [r4, #4]
    72e6:	6014      	str	r4, [r2, #0]
    72e8:	0028      	movs	r0, r5
    72ea:	f000 faa6 	bl	783a <__malloc_unlock>
    72ee:	bd70      	pop	{r4, r5, r6, pc}
    72f0:	42a3      	cmp	r3, r4
    72f2:	d909      	bls.n	7308 <_free_r+0x44>
    72f4:	6821      	ldr	r1, [r4, #0]
    72f6:	1860      	adds	r0, r4, r1
    72f8:	4283      	cmp	r3, r0
    72fa:	d1f3      	bne.n	72e4 <_free_r+0x20>
    72fc:	6818      	ldr	r0, [r3, #0]
    72fe:	685b      	ldr	r3, [r3, #4]
    7300:	1841      	adds	r1, r0, r1
    7302:	6021      	str	r1, [r4, #0]
    7304:	e7ee      	b.n	72e4 <_free_r+0x20>
    7306:	0013      	movs	r3, r2
    7308:	685a      	ldr	r2, [r3, #4]
    730a:	2a00      	cmp	r2, #0
    730c:	d001      	beq.n	7312 <_free_r+0x4e>
    730e:	42a2      	cmp	r2, r4
    7310:	d9f9      	bls.n	7306 <_free_r+0x42>
    7312:	6819      	ldr	r1, [r3, #0]
    7314:	1858      	adds	r0, r3, r1
    7316:	42a0      	cmp	r0, r4
    7318:	d10b      	bne.n	7332 <_free_r+0x6e>
    731a:	6820      	ldr	r0, [r4, #0]
    731c:	1809      	adds	r1, r1, r0
    731e:	1858      	adds	r0, r3, r1
    7320:	6019      	str	r1, [r3, #0]
    7322:	4282      	cmp	r2, r0
    7324:	d1e0      	bne.n	72e8 <_free_r+0x24>
    7326:	6810      	ldr	r0, [r2, #0]
    7328:	6852      	ldr	r2, [r2, #4]
    732a:	1841      	adds	r1, r0, r1
    732c:	6019      	str	r1, [r3, #0]
    732e:	605a      	str	r2, [r3, #4]
    7330:	e7da      	b.n	72e8 <_free_r+0x24>
    7332:	42a0      	cmp	r0, r4
    7334:	d902      	bls.n	733c <_free_r+0x78>
    7336:	230c      	movs	r3, #12
    7338:	602b      	str	r3, [r5, #0]
    733a:	e7d5      	b.n	72e8 <_free_r+0x24>
    733c:	6821      	ldr	r1, [r4, #0]
    733e:	1860      	adds	r0, r4, r1
    7340:	4282      	cmp	r2, r0
    7342:	d103      	bne.n	734c <_free_r+0x88>
    7344:	6810      	ldr	r0, [r2, #0]
    7346:	6852      	ldr	r2, [r2, #4]
    7348:	1841      	adds	r1, r0, r1
    734a:	6021      	str	r1, [r4, #0]
    734c:	6062      	str	r2, [r4, #4]
    734e:	605c      	str	r4, [r3, #4]
    7350:	e7ca      	b.n	72e8 <_free_r+0x24>
    7352:	46c0      	nop			; (mov r8, r8)
    7354:	20000878 	.word	0x20000878

00007358 <_malloc_r>:
    7358:	2303      	movs	r3, #3
    735a:	b570      	push	{r4, r5, r6, lr}
    735c:	1ccd      	adds	r5, r1, #3
    735e:	439d      	bics	r5, r3
    7360:	3508      	adds	r5, #8
    7362:	0006      	movs	r6, r0
    7364:	2d0c      	cmp	r5, #12
    7366:	d21e      	bcs.n	73a6 <_malloc_r+0x4e>
    7368:	250c      	movs	r5, #12
    736a:	42a9      	cmp	r1, r5
    736c:	d81d      	bhi.n	73aa <_malloc_r+0x52>
    736e:	0030      	movs	r0, r6
    7370:	f000 fa62 	bl	7838 <__malloc_lock>
    7374:	4a25      	ldr	r2, [pc, #148]	; (740c <_malloc_r+0xb4>)
    7376:	6814      	ldr	r4, [r2, #0]
    7378:	0021      	movs	r1, r4
    737a:	2900      	cmp	r1, #0
    737c:	d119      	bne.n	73b2 <_malloc_r+0x5a>
    737e:	4c24      	ldr	r4, [pc, #144]	; (7410 <_malloc_r+0xb8>)
    7380:	6823      	ldr	r3, [r4, #0]
    7382:	2b00      	cmp	r3, #0
    7384:	d103      	bne.n	738e <_malloc_r+0x36>
    7386:	0030      	movs	r0, r6
    7388:	f000 f988 	bl	769c <_sbrk_r>
    738c:	6020      	str	r0, [r4, #0]
    738e:	0029      	movs	r1, r5
    7390:	0030      	movs	r0, r6
    7392:	f000 f983 	bl	769c <_sbrk_r>
    7396:	1c43      	adds	r3, r0, #1
    7398:	d12c      	bne.n	73f4 <_malloc_r+0x9c>
    739a:	230c      	movs	r3, #12
    739c:	0030      	movs	r0, r6
    739e:	6033      	str	r3, [r6, #0]
    73a0:	f000 fa4b 	bl	783a <__malloc_unlock>
    73a4:	e003      	b.n	73ae <_malloc_r+0x56>
    73a6:	2d00      	cmp	r5, #0
    73a8:	dadf      	bge.n	736a <_malloc_r+0x12>
    73aa:	230c      	movs	r3, #12
    73ac:	6033      	str	r3, [r6, #0]
    73ae:	2000      	movs	r0, #0
    73b0:	bd70      	pop	{r4, r5, r6, pc}
    73b2:	680b      	ldr	r3, [r1, #0]
    73b4:	1b5b      	subs	r3, r3, r5
    73b6:	d41a      	bmi.n	73ee <_malloc_r+0x96>
    73b8:	2b0b      	cmp	r3, #11
    73ba:	d903      	bls.n	73c4 <_malloc_r+0x6c>
    73bc:	600b      	str	r3, [r1, #0]
    73be:	18cc      	adds	r4, r1, r3
    73c0:	6025      	str	r5, [r4, #0]
    73c2:	e003      	b.n	73cc <_malloc_r+0x74>
    73c4:	428c      	cmp	r4, r1
    73c6:	d10e      	bne.n	73e6 <_malloc_r+0x8e>
    73c8:	6863      	ldr	r3, [r4, #4]
    73ca:	6013      	str	r3, [r2, #0]
    73cc:	0030      	movs	r0, r6
    73ce:	f000 fa34 	bl	783a <__malloc_unlock>
    73d2:	0020      	movs	r0, r4
    73d4:	2207      	movs	r2, #7
    73d6:	300b      	adds	r0, #11
    73d8:	1d23      	adds	r3, r4, #4
    73da:	4390      	bics	r0, r2
    73dc:	1ac3      	subs	r3, r0, r3
    73de:	d0e7      	beq.n	73b0 <_malloc_r+0x58>
    73e0:	425a      	negs	r2, r3
    73e2:	50e2      	str	r2, [r4, r3]
    73e4:	e7e4      	b.n	73b0 <_malloc_r+0x58>
    73e6:	684b      	ldr	r3, [r1, #4]
    73e8:	6063      	str	r3, [r4, #4]
    73ea:	000c      	movs	r4, r1
    73ec:	e7ee      	b.n	73cc <_malloc_r+0x74>
    73ee:	000c      	movs	r4, r1
    73f0:	6849      	ldr	r1, [r1, #4]
    73f2:	e7c2      	b.n	737a <_malloc_r+0x22>
    73f4:	2303      	movs	r3, #3
    73f6:	1cc4      	adds	r4, r0, #3
    73f8:	439c      	bics	r4, r3
    73fa:	42a0      	cmp	r0, r4
    73fc:	d0e0      	beq.n	73c0 <_malloc_r+0x68>
    73fe:	1a21      	subs	r1, r4, r0
    7400:	0030      	movs	r0, r6
    7402:	f000 f94b 	bl	769c <_sbrk_r>
    7406:	1c43      	adds	r3, r0, #1
    7408:	d1da      	bne.n	73c0 <_malloc_r+0x68>
    740a:	e7c6      	b.n	739a <_malloc_r+0x42>
    740c:	20000878 	.word	0x20000878
    7410:	2000087c 	.word	0x2000087c

00007414 <__sfputc_r>:
    7414:	6893      	ldr	r3, [r2, #8]
    7416:	b510      	push	{r4, lr}
    7418:	3b01      	subs	r3, #1
    741a:	6093      	str	r3, [r2, #8]
    741c:	2b00      	cmp	r3, #0
    741e:	da05      	bge.n	742c <__sfputc_r+0x18>
    7420:	6994      	ldr	r4, [r2, #24]
    7422:	42a3      	cmp	r3, r4
    7424:	db08      	blt.n	7438 <__sfputc_r+0x24>
    7426:	b2cb      	uxtb	r3, r1
    7428:	2b0a      	cmp	r3, #10
    742a:	d005      	beq.n	7438 <__sfputc_r+0x24>
    742c:	6813      	ldr	r3, [r2, #0]
    742e:	1c58      	adds	r0, r3, #1
    7430:	6010      	str	r0, [r2, #0]
    7432:	7019      	strb	r1, [r3, #0]
    7434:	b2c8      	uxtb	r0, r1
    7436:	bd10      	pop	{r4, pc}
    7438:	f7fe fb06 	bl	5a48 <__swbuf_r>
    743c:	e7fb      	b.n	7436 <__sfputc_r+0x22>

0000743e <__sfputs_r>:
    743e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7440:	0006      	movs	r6, r0
    7442:	000f      	movs	r7, r1
    7444:	0014      	movs	r4, r2
    7446:	18d5      	adds	r5, r2, r3
    7448:	42ac      	cmp	r4, r5
    744a:	d101      	bne.n	7450 <__sfputs_r+0x12>
    744c:	2000      	movs	r0, #0
    744e:	e007      	b.n	7460 <__sfputs_r+0x22>
    7450:	7821      	ldrb	r1, [r4, #0]
    7452:	003a      	movs	r2, r7
    7454:	0030      	movs	r0, r6
    7456:	f7ff ffdd 	bl	7414 <__sfputc_r>
    745a:	3401      	adds	r4, #1
    745c:	1c43      	adds	r3, r0, #1
    745e:	d1f3      	bne.n	7448 <__sfputs_r+0xa>
    7460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00007464 <_vfiprintf_r>:
    7464:	b5f0      	push	{r4, r5, r6, r7, lr}
    7466:	b09f      	sub	sp, #124	; 0x7c
    7468:	0006      	movs	r6, r0
    746a:	000f      	movs	r7, r1
    746c:	0014      	movs	r4, r2
    746e:	9305      	str	r3, [sp, #20]
    7470:	2800      	cmp	r0, #0
    7472:	d004      	beq.n	747e <_vfiprintf_r+0x1a>
    7474:	6983      	ldr	r3, [r0, #24]
    7476:	2b00      	cmp	r3, #0
    7478:	d101      	bne.n	747e <_vfiprintf_r+0x1a>
    747a:	f7ff fb15 	bl	6aa8 <__sinit>
    747e:	4b7f      	ldr	r3, [pc, #508]	; (767c <_vfiprintf_r+0x218>)
    7480:	429f      	cmp	r7, r3
    7482:	d15c      	bne.n	753e <_vfiprintf_r+0xda>
    7484:	6877      	ldr	r7, [r6, #4]
    7486:	89bb      	ldrh	r3, [r7, #12]
    7488:	071b      	lsls	r3, r3, #28
    748a:	d562      	bpl.n	7552 <_vfiprintf_r+0xee>
    748c:	693b      	ldr	r3, [r7, #16]
    748e:	2b00      	cmp	r3, #0
    7490:	d05f      	beq.n	7552 <_vfiprintf_r+0xee>
    7492:	2300      	movs	r3, #0
    7494:	ad06      	add	r5, sp, #24
    7496:	616b      	str	r3, [r5, #20]
    7498:	3320      	adds	r3, #32
    749a:	766b      	strb	r3, [r5, #25]
    749c:	3310      	adds	r3, #16
    749e:	76ab      	strb	r3, [r5, #26]
    74a0:	9402      	str	r4, [sp, #8]
    74a2:	9c02      	ldr	r4, [sp, #8]
    74a4:	7823      	ldrb	r3, [r4, #0]
    74a6:	2b00      	cmp	r3, #0
    74a8:	d15d      	bne.n	7566 <_vfiprintf_r+0x102>
    74aa:	9b02      	ldr	r3, [sp, #8]
    74ac:	1ae3      	subs	r3, r4, r3
    74ae:	9304      	str	r3, [sp, #16]
    74b0:	d00d      	beq.n	74ce <_vfiprintf_r+0x6a>
    74b2:	9b04      	ldr	r3, [sp, #16]
    74b4:	9a02      	ldr	r2, [sp, #8]
    74b6:	0039      	movs	r1, r7
    74b8:	0030      	movs	r0, r6
    74ba:	f7ff ffc0 	bl	743e <__sfputs_r>
    74be:	1c43      	adds	r3, r0, #1
    74c0:	d100      	bne.n	74c4 <_vfiprintf_r+0x60>
    74c2:	e0cc      	b.n	765e <_vfiprintf_r+0x1fa>
    74c4:	696a      	ldr	r2, [r5, #20]
    74c6:	9b04      	ldr	r3, [sp, #16]
    74c8:	4694      	mov	ip, r2
    74ca:	4463      	add	r3, ip
    74cc:	616b      	str	r3, [r5, #20]
    74ce:	7823      	ldrb	r3, [r4, #0]
    74d0:	2b00      	cmp	r3, #0
    74d2:	d100      	bne.n	74d6 <_vfiprintf_r+0x72>
    74d4:	e0c3      	b.n	765e <_vfiprintf_r+0x1fa>
    74d6:	2201      	movs	r2, #1
    74d8:	2300      	movs	r3, #0
    74da:	4252      	negs	r2, r2
    74dc:	606a      	str	r2, [r5, #4]
    74de:	a902      	add	r1, sp, #8
    74e0:	3254      	adds	r2, #84	; 0x54
    74e2:	1852      	adds	r2, r2, r1
    74e4:	3401      	adds	r4, #1
    74e6:	602b      	str	r3, [r5, #0]
    74e8:	60eb      	str	r3, [r5, #12]
    74ea:	60ab      	str	r3, [r5, #8]
    74ec:	7013      	strb	r3, [r2, #0]
    74ee:	65ab      	str	r3, [r5, #88]	; 0x58
    74f0:	7821      	ldrb	r1, [r4, #0]
    74f2:	2205      	movs	r2, #5
    74f4:	4862      	ldr	r0, [pc, #392]	; (7680 <_vfiprintf_r+0x21c>)
    74f6:	f7ff fbe9 	bl	6ccc <memchr>
    74fa:	1c63      	adds	r3, r4, #1
    74fc:	469c      	mov	ip, r3
    74fe:	2800      	cmp	r0, #0
    7500:	d135      	bne.n	756e <_vfiprintf_r+0x10a>
    7502:	6829      	ldr	r1, [r5, #0]
    7504:	06cb      	lsls	r3, r1, #27
    7506:	d504      	bpl.n	7512 <_vfiprintf_r+0xae>
    7508:	2353      	movs	r3, #83	; 0x53
    750a:	aa02      	add	r2, sp, #8
    750c:	3020      	adds	r0, #32
    750e:	189b      	adds	r3, r3, r2
    7510:	7018      	strb	r0, [r3, #0]
    7512:	070b      	lsls	r3, r1, #28
    7514:	d504      	bpl.n	7520 <_vfiprintf_r+0xbc>
    7516:	2353      	movs	r3, #83	; 0x53
    7518:	202b      	movs	r0, #43	; 0x2b
    751a:	aa02      	add	r2, sp, #8
    751c:	189b      	adds	r3, r3, r2
    751e:	7018      	strb	r0, [r3, #0]
    7520:	7823      	ldrb	r3, [r4, #0]
    7522:	2b2a      	cmp	r3, #42	; 0x2a
    7524:	d02c      	beq.n	7580 <_vfiprintf_r+0x11c>
    7526:	2000      	movs	r0, #0
    7528:	210a      	movs	r1, #10
    752a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    752c:	7822      	ldrb	r2, [r4, #0]
    752e:	3a30      	subs	r2, #48	; 0x30
    7530:	2a09      	cmp	r2, #9
    7532:	d800      	bhi.n	7536 <_vfiprintf_r+0xd2>
    7534:	e06b      	b.n	760e <_vfiprintf_r+0x1aa>
    7536:	2800      	cmp	r0, #0
    7538:	d02a      	beq.n	7590 <_vfiprintf_r+0x12c>
    753a:	9309      	str	r3, [sp, #36]	; 0x24
    753c:	e028      	b.n	7590 <_vfiprintf_r+0x12c>
    753e:	4b51      	ldr	r3, [pc, #324]	; (7684 <_vfiprintf_r+0x220>)
    7540:	429f      	cmp	r7, r3
    7542:	d101      	bne.n	7548 <_vfiprintf_r+0xe4>
    7544:	68b7      	ldr	r7, [r6, #8]
    7546:	e79e      	b.n	7486 <_vfiprintf_r+0x22>
    7548:	4b4f      	ldr	r3, [pc, #316]	; (7688 <_vfiprintf_r+0x224>)
    754a:	429f      	cmp	r7, r3
    754c:	d19b      	bne.n	7486 <_vfiprintf_r+0x22>
    754e:	68f7      	ldr	r7, [r6, #12]
    7550:	e799      	b.n	7486 <_vfiprintf_r+0x22>
    7552:	0039      	movs	r1, r7
    7554:	0030      	movs	r0, r6
    7556:	f7fe facd 	bl	5af4 <__swsetup_r>
    755a:	2800      	cmp	r0, #0
    755c:	d099      	beq.n	7492 <_vfiprintf_r+0x2e>
    755e:	2001      	movs	r0, #1
    7560:	4240      	negs	r0, r0
    7562:	b01f      	add	sp, #124	; 0x7c
    7564:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7566:	2b25      	cmp	r3, #37	; 0x25
    7568:	d09f      	beq.n	74aa <_vfiprintf_r+0x46>
    756a:	3401      	adds	r4, #1
    756c:	e79a      	b.n	74a4 <_vfiprintf_r+0x40>
    756e:	4b44      	ldr	r3, [pc, #272]	; (7680 <_vfiprintf_r+0x21c>)
    7570:	6829      	ldr	r1, [r5, #0]
    7572:	1ac0      	subs	r0, r0, r3
    7574:	2301      	movs	r3, #1
    7576:	4083      	lsls	r3, r0
    7578:	430b      	orrs	r3, r1
    757a:	602b      	str	r3, [r5, #0]
    757c:	4664      	mov	r4, ip
    757e:	e7b7      	b.n	74f0 <_vfiprintf_r+0x8c>
    7580:	9b05      	ldr	r3, [sp, #20]
    7582:	1d18      	adds	r0, r3, #4
    7584:	681b      	ldr	r3, [r3, #0]
    7586:	9005      	str	r0, [sp, #20]
    7588:	2b00      	cmp	r3, #0
    758a:	db3a      	blt.n	7602 <_vfiprintf_r+0x19e>
    758c:	9309      	str	r3, [sp, #36]	; 0x24
    758e:	4664      	mov	r4, ip
    7590:	7823      	ldrb	r3, [r4, #0]
    7592:	2b2e      	cmp	r3, #46	; 0x2e
    7594:	d10b      	bne.n	75ae <_vfiprintf_r+0x14a>
    7596:	7863      	ldrb	r3, [r4, #1]
    7598:	1c62      	adds	r2, r4, #1
    759a:	2b2a      	cmp	r3, #42	; 0x2a
    759c:	d13f      	bne.n	761e <_vfiprintf_r+0x1ba>
    759e:	9b05      	ldr	r3, [sp, #20]
    75a0:	3402      	adds	r4, #2
    75a2:	1d1a      	adds	r2, r3, #4
    75a4:	681b      	ldr	r3, [r3, #0]
    75a6:	9205      	str	r2, [sp, #20]
    75a8:	2b00      	cmp	r3, #0
    75aa:	db35      	blt.n	7618 <_vfiprintf_r+0x1b4>
    75ac:	9307      	str	r3, [sp, #28]
    75ae:	7821      	ldrb	r1, [r4, #0]
    75b0:	2203      	movs	r2, #3
    75b2:	4836      	ldr	r0, [pc, #216]	; (768c <_vfiprintf_r+0x228>)
    75b4:	f7ff fb8a 	bl	6ccc <memchr>
    75b8:	2800      	cmp	r0, #0
    75ba:	d007      	beq.n	75cc <_vfiprintf_r+0x168>
    75bc:	4b33      	ldr	r3, [pc, #204]	; (768c <_vfiprintf_r+0x228>)
    75be:	682a      	ldr	r2, [r5, #0]
    75c0:	1ac0      	subs	r0, r0, r3
    75c2:	2340      	movs	r3, #64	; 0x40
    75c4:	4083      	lsls	r3, r0
    75c6:	4313      	orrs	r3, r2
    75c8:	602b      	str	r3, [r5, #0]
    75ca:	3401      	adds	r4, #1
    75cc:	7821      	ldrb	r1, [r4, #0]
    75ce:	1c63      	adds	r3, r4, #1
    75d0:	2206      	movs	r2, #6
    75d2:	482f      	ldr	r0, [pc, #188]	; (7690 <_vfiprintf_r+0x22c>)
    75d4:	9302      	str	r3, [sp, #8]
    75d6:	7629      	strb	r1, [r5, #24]
    75d8:	f7ff fb78 	bl	6ccc <memchr>
    75dc:	2800      	cmp	r0, #0
    75de:	d044      	beq.n	766a <_vfiprintf_r+0x206>
    75e0:	4b2c      	ldr	r3, [pc, #176]	; (7694 <_vfiprintf_r+0x230>)
    75e2:	2b00      	cmp	r3, #0
    75e4:	d12f      	bne.n	7646 <_vfiprintf_r+0x1e2>
    75e6:	6829      	ldr	r1, [r5, #0]
    75e8:	9b05      	ldr	r3, [sp, #20]
    75ea:	2207      	movs	r2, #7
    75ec:	05c9      	lsls	r1, r1, #23
    75ee:	d528      	bpl.n	7642 <_vfiprintf_r+0x1de>
    75f0:	189b      	adds	r3, r3, r2
    75f2:	4393      	bics	r3, r2
    75f4:	3308      	adds	r3, #8
    75f6:	9305      	str	r3, [sp, #20]
    75f8:	696b      	ldr	r3, [r5, #20]
    75fa:	9a03      	ldr	r2, [sp, #12]
    75fc:	189b      	adds	r3, r3, r2
    75fe:	616b      	str	r3, [r5, #20]
    7600:	e74f      	b.n	74a2 <_vfiprintf_r+0x3e>
    7602:	425b      	negs	r3, r3
    7604:	60eb      	str	r3, [r5, #12]
    7606:	2302      	movs	r3, #2
    7608:	430b      	orrs	r3, r1
    760a:	602b      	str	r3, [r5, #0]
    760c:	e7bf      	b.n	758e <_vfiprintf_r+0x12a>
    760e:	434b      	muls	r3, r1
    7610:	3401      	adds	r4, #1
    7612:	189b      	adds	r3, r3, r2
    7614:	2001      	movs	r0, #1
    7616:	e789      	b.n	752c <_vfiprintf_r+0xc8>
    7618:	2301      	movs	r3, #1
    761a:	425b      	negs	r3, r3
    761c:	e7c6      	b.n	75ac <_vfiprintf_r+0x148>
    761e:	2300      	movs	r3, #0
    7620:	0014      	movs	r4, r2
    7622:	200a      	movs	r0, #10
    7624:	001a      	movs	r2, r3
    7626:	606b      	str	r3, [r5, #4]
    7628:	7821      	ldrb	r1, [r4, #0]
    762a:	3930      	subs	r1, #48	; 0x30
    762c:	2909      	cmp	r1, #9
    762e:	d903      	bls.n	7638 <_vfiprintf_r+0x1d4>
    7630:	2b00      	cmp	r3, #0
    7632:	d0bc      	beq.n	75ae <_vfiprintf_r+0x14a>
    7634:	9207      	str	r2, [sp, #28]
    7636:	e7ba      	b.n	75ae <_vfiprintf_r+0x14a>
    7638:	4342      	muls	r2, r0
    763a:	3401      	adds	r4, #1
    763c:	1852      	adds	r2, r2, r1
    763e:	2301      	movs	r3, #1
    7640:	e7f2      	b.n	7628 <_vfiprintf_r+0x1c4>
    7642:	3307      	adds	r3, #7
    7644:	e7d5      	b.n	75f2 <_vfiprintf_r+0x18e>
    7646:	ab05      	add	r3, sp, #20
    7648:	9300      	str	r3, [sp, #0]
    764a:	003a      	movs	r2, r7
    764c:	4b12      	ldr	r3, [pc, #72]	; (7698 <_vfiprintf_r+0x234>)
    764e:	0029      	movs	r1, r5
    7650:	0030      	movs	r0, r6
    7652:	f7fd fca7 	bl	4fa4 <_printf_float>
    7656:	9003      	str	r0, [sp, #12]
    7658:	9b03      	ldr	r3, [sp, #12]
    765a:	3301      	adds	r3, #1
    765c:	d1cc      	bne.n	75f8 <_vfiprintf_r+0x194>
    765e:	89bb      	ldrh	r3, [r7, #12]
    7660:	065b      	lsls	r3, r3, #25
    7662:	d500      	bpl.n	7666 <_vfiprintf_r+0x202>
    7664:	e77b      	b.n	755e <_vfiprintf_r+0xfa>
    7666:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7668:	e77b      	b.n	7562 <_vfiprintf_r+0xfe>
    766a:	ab05      	add	r3, sp, #20
    766c:	9300      	str	r3, [sp, #0]
    766e:	003a      	movs	r2, r7
    7670:	4b09      	ldr	r3, [pc, #36]	; (7698 <_vfiprintf_r+0x234>)
    7672:	0029      	movs	r1, r5
    7674:	0030      	movs	r0, r6
    7676:	f7fd ff4f 	bl	5518 <_printf_i>
    767a:	e7ec      	b.n	7656 <_vfiprintf_r+0x1f2>
    767c:	0000a56c 	.word	0x0000a56c
    7680:	0000a6ac 	.word	0x0000a6ac
    7684:	0000a58c 	.word	0x0000a58c
    7688:	0000a54c 	.word	0x0000a54c
    768c:	0000a6b2 	.word	0x0000a6b2
    7690:	0000a6b6 	.word	0x0000a6b6
    7694:	00004fa5 	.word	0x00004fa5
    7698:	0000743f 	.word	0x0000743f

0000769c <_sbrk_r>:
    769c:	2300      	movs	r3, #0
    769e:	b570      	push	{r4, r5, r6, lr}
    76a0:	4c06      	ldr	r4, [pc, #24]	; (76bc <_sbrk_r+0x20>)
    76a2:	0005      	movs	r5, r0
    76a4:	0008      	movs	r0, r1
    76a6:	6023      	str	r3, [r4, #0]
    76a8:	f7fb f8a0 	bl	27ec <_sbrk>
    76ac:	1c43      	adds	r3, r0, #1
    76ae:	d103      	bne.n	76b8 <_sbrk_r+0x1c>
    76b0:	6823      	ldr	r3, [r4, #0]
    76b2:	2b00      	cmp	r3, #0
    76b4:	d000      	beq.n	76b8 <_sbrk_r+0x1c>
    76b6:	602b      	str	r3, [r5, #0]
    76b8:	bd70      	pop	{r4, r5, r6, pc}
    76ba:	46c0      	nop			; (mov r8, r8)
    76bc:	20001730 	.word	0x20001730

000076c0 <__sread>:
    76c0:	b570      	push	{r4, r5, r6, lr}
    76c2:	000c      	movs	r4, r1
    76c4:	250e      	movs	r5, #14
    76c6:	5f49      	ldrsh	r1, [r1, r5]
    76c8:	f000 f8b8 	bl	783c <_read_r>
    76cc:	2800      	cmp	r0, #0
    76ce:	db03      	blt.n	76d8 <__sread+0x18>
    76d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    76d2:	181b      	adds	r3, r3, r0
    76d4:	6563      	str	r3, [r4, #84]	; 0x54
    76d6:	bd70      	pop	{r4, r5, r6, pc}
    76d8:	89a3      	ldrh	r3, [r4, #12]
    76da:	4a02      	ldr	r2, [pc, #8]	; (76e4 <__sread+0x24>)
    76dc:	4013      	ands	r3, r2
    76de:	81a3      	strh	r3, [r4, #12]
    76e0:	e7f9      	b.n	76d6 <__sread+0x16>
    76e2:	46c0      	nop			; (mov r8, r8)
    76e4:	ffffefff 	.word	0xffffefff

000076e8 <__swrite>:
    76e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    76ea:	001f      	movs	r7, r3
    76ec:	898b      	ldrh	r3, [r1, #12]
    76ee:	0005      	movs	r5, r0
    76f0:	000c      	movs	r4, r1
    76f2:	0016      	movs	r6, r2
    76f4:	05db      	lsls	r3, r3, #23
    76f6:	d505      	bpl.n	7704 <__swrite+0x1c>
    76f8:	230e      	movs	r3, #14
    76fa:	5ec9      	ldrsh	r1, [r1, r3]
    76fc:	2200      	movs	r2, #0
    76fe:	2302      	movs	r3, #2
    7700:	f000 f874 	bl	77ec <_lseek_r>
    7704:	89a3      	ldrh	r3, [r4, #12]
    7706:	4a05      	ldr	r2, [pc, #20]	; (771c <__swrite+0x34>)
    7708:	0028      	movs	r0, r5
    770a:	4013      	ands	r3, r2
    770c:	81a3      	strh	r3, [r4, #12]
    770e:	0032      	movs	r2, r6
    7710:	230e      	movs	r3, #14
    7712:	5ee1      	ldrsh	r1, [r4, r3]
    7714:	003b      	movs	r3, r7
    7716:	f000 f81f 	bl	7758 <_write_r>
    771a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    771c:	ffffefff 	.word	0xffffefff

00007720 <__sseek>:
    7720:	b570      	push	{r4, r5, r6, lr}
    7722:	000c      	movs	r4, r1
    7724:	250e      	movs	r5, #14
    7726:	5f49      	ldrsh	r1, [r1, r5]
    7728:	f000 f860 	bl	77ec <_lseek_r>
    772c:	89a3      	ldrh	r3, [r4, #12]
    772e:	1c42      	adds	r2, r0, #1
    7730:	d103      	bne.n	773a <__sseek+0x1a>
    7732:	4a05      	ldr	r2, [pc, #20]	; (7748 <__sseek+0x28>)
    7734:	4013      	ands	r3, r2
    7736:	81a3      	strh	r3, [r4, #12]
    7738:	bd70      	pop	{r4, r5, r6, pc}
    773a:	2280      	movs	r2, #128	; 0x80
    773c:	0152      	lsls	r2, r2, #5
    773e:	4313      	orrs	r3, r2
    7740:	81a3      	strh	r3, [r4, #12]
    7742:	6560      	str	r0, [r4, #84]	; 0x54
    7744:	e7f8      	b.n	7738 <__sseek+0x18>
    7746:	46c0      	nop			; (mov r8, r8)
    7748:	ffffefff 	.word	0xffffefff

0000774c <__sclose>:
    774c:	b510      	push	{r4, lr}
    774e:	230e      	movs	r3, #14
    7750:	5ec9      	ldrsh	r1, [r1, r3]
    7752:	f000 f815 	bl	7780 <_close_r>
    7756:	bd10      	pop	{r4, pc}

00007758 <_write_r>:
    7758:	b570      	push	{r4, r5, r6, lr}
    775a:	0005      	movs	r5, r0
    775c:	0008      	movs	r0, r1
    775e:	0011      	movs	r1, r2
    7760:	2200      	movs	r2, #0
    7762:	4c06      	ldr	r4, [pc, #24]	; (777c <_write_r+0x24>)
    7764:	6022      	str	r2, [r4, #0]
    7766:	001a      	movs	r2, r3
    7768:	f7fb f818 	bl	279c <_write>
    776c:	1c43      	adds	r3, r0, #1
    776e:	d103      	bne.n	7778 <_write_r+0x20>
    7770:	6823      	ldr	r3, [r4, #0]
    7772:	2b00      	cmp	r3, #0
    7774:	d000      	beq.n	7778 <_write_r+0x20>
    7776:	602b      	str	r3, [r5, #0]
    7778:	bd70      	pop	{r4, r5, r6, pc}
    777a:	46c0      	nop			; (mov r8, r8)
    777c:	20001730 	.word	0x20001730

00007780 <_close_r>:
    7780:	2300      	movs	r3, #0
    7782:	b570      	push	{r4, r5, r6, lr}
    7784:	4c06      	ldr	r4, [pc, #24]	; (77a0 <_close_r+0x20>)
    7786:	0005      	movs	r5, r0
    7788:	0008      	movs	r0, r1
    778a:	6023      	str	r3, [r4, #0]
    778c:	f7fb f840 	bl	2810 <_close>
    7790:	1c43      	adds	r3, r0, #1
    7792:	d103      	bne.n	779c <_close_r+0x1c>
    7794:	6823      	ldr	r3, [r4, #0]
    7796:	2b00      	cmp	r3, #0
    7798:	d000      	beq.n	779c <_close_r+0x1c>
    779a:	602b      	str	r3, [r5, #0]
    779c:	bd70      	pop	{r4, r5, r6, pc}
    779e:	46c0      	nop			; (mov r8, r8)
    77a0:	20001730 	.word	0x20001730

000077a4 <_fstat_r>:
    77a4:	2300      	movs	r3, #0
    77a6:	b570      	push	{r4, r5, r6, lr}
    77a8:	4c06      	ldr	r4, [pc, #24]	; (77c4 <_fstat_r+0x20>)
    77aa:	0005      	movs	r5, r0
    77ac:	0008      	movs	r0, r1
    77ae:	0011      	movs	r1, r2
    77b0:	6023      	str	r3, [r4, #0]
    77b2:	f7fb f830 	bl	2816 <_fstat>
    77b6:	1c43      	adds	r3, r0, #1
    77b8:	d103      	bne.n	77c2 <_fstat_r+0x1e>
    77ba:	6823      	ldr	r3, [r4, #0]
    77bc:	2b00      	cmp	r3, #0
    77be:	d000      	beq.n	77c2 <_fstat_r+0x1e>
    77c0:	602b      	str	r3, [r5, #0]
    77c2:	bd70      	pop	{r4, r5, r6, pc}
    77c4:	20001730 	.word	0x20001730

000077c8 <_isatty_r>:
    77c8:	2300      	movs	r3, #0
    77ca:	b570      	push	{r4, r5, r6, lr}
    77cc:	4c06      	ldr	r4, [pc, #24]	; (77e8 <_isatty_r+0x20>)
    77ce:	0005      	movs	r5, r0
    77d0:	0008      	movs	r0, r1
    77d2:	6023      	str	r3, [r4, #0]
    77d4:	f7fb f824 	bl	2820 <_isatty>
    77d8:	1c43      	adds	r3, r0, #1
    77da:	d103      	bne.n	77e4 <_isatty_r+0x1c>
    77dc:	6823      	ldr	r3, [r4, #0]
    77de:	2b00      	cmp	r3, #0
    77e0:	d000      	beq.n	77e4 <_isatty_r+0x1c>
    77e2:	602b      	str	r3, [r5, #0]
    77e4:	bd70      	pop	{r4, r5, r6, pc}
    77e6:	46c0      	nop			; (mov r8, r8)
    77e8:	20001730 	.word	0x20001730

000077ec <_lseek_r>:
    77ec:	b570      	push	{r4, r5, r6, lr}
    77ee:	0005      	movs	r5, r0
    77f0:	0008      	movs	r0, r1
    77f2:	0011      	movs	r1, r2
    77f4:	2200      	movs	r2, #0
    77f6:	4c06      	ldr	r4, [pc, #24]	; (7810 <_lseek_r+0x24>)
    77f8:	6022      	str	r2, [r4, #0]
    77fa:	001a      	movs	r2, r3
    77fc:	f7fb f812 	bl	2824 <_lseek>
    7800:	1c43      	adds	r3, r0, #1
    7802:	d103      	bne.n	780c <_lseek_r+0x20>
    7804:	6823      	ldr	r3, [r4, #0]
    7806:	2b00      	cmp	r3, #0
    7808:	d000      	beq.n	780c <_lseek_r+0x20>
    780a:	602b      	str	r3, [r5, #0]
    780c:	bd70      	pop	{r4, r5, r6, pc}
    780e:	46c0      	nop			; (mov r8, r8)
    7810:	20001730 	.word	0x20001730

00007814 <__ascii_mbtowc>:
    7814:	b082      	sub	sp, #8
    7816:	2900      	cmp	r1, #0
    7818:	d100      	bne.n	781c <__ascii_mbtowc+0x8>
    781a:	a901      	add	r1, sp, #4
    781c:	1e10      	subs	r0, r2, #0
    781e:	d006      	beq.n	782e <__ascii_mbtowc+0x1a>
    7820:	2b00      	cmp	r3, #0
    7822:	d006      	beq.n	7832 <__ascii_mbtowc+0x1e>
    7824:	7813      	ldrb	r3, [r2, #0]
    7826:	600b      	str	r3, [r1, #0]
    7828:	7810      	ldrb	r0, [r2, #0]
    782a:	1e43      	subs	r3, r0, #1
    782c:	4198      	sbcs	r0, r3
    782e:	b002      	add	sp, #8
    7830:	4770      	bx	lr
    7832:	2002      	movs	r0, #2
    7834:	4240      	negs	r0, r0
    7836:	e7fa      	b.n	782e <__ascii_mbtowc+0x1a>

00007838 <__malloc_lock>:
    7838:	4770      	bx	lr

0000783a <__malloc_unlock>:
    783a:	4770      	bx	lr

0000783c <_read_r>:
    783c:	b570      	push	{r4, r5, r6, lr}
    783e:	0005      	movs	r5, r0
    7840:	0008      	movs	r0, r1
    7842:	0011      	movs	r1, r2
    7844:	2200      	movs	r2, #0
    7846:	4c06      	ldr	r4, [pc, #24]	; (7860 <_read_r+0x24>)
    7848:	6022      	str	r2, [r4, #0]
    784a:	001a      	movs	r2, r3
    784c:	f7fa ff84 	bl	2758 <_read>
    7850:	1c43      	adds	r3, r0, #1
    7852:	d103      	bne.n	785c <_read_r+0x20>
    7854:	6823      	ldr	r3, [r4, #0]
    7856:	2b00      	cmp	r3, #0
    7858:	d000      	beq.n	785c <_read_r+0x20>
    785a:	602b      	str	r3, [r5, #0]
    785c:	bd70      	pop	{r4, r5, r6, pc}
    785e:	46c0      	nop			; (mov r8, r8)
    7860:	20001730 	.word	0x20001730

00007864 <__ascii_wctomb>:
    7864:	1e0b      	subs	r3, r1, #0
    7866:	d004      	beq.n	7872 <__ascii_wctomb+0xe>
    7868:	2aff      	cmp	r2, #255	; 0xff
    786a:	d904      	bls.n	7876 <__ascii_wctomb+0x12>
    786c:	238a      	movs	r3, #138	; 0x8a
    786e:	6003      	str	r3, [r0, #0]
    7870:	3b8b      	subs	r3, #139	; 0x8b
    7872:	0018      	movs	r0, r3
    7874:	4770      	bx	lr
    7876:	700a      	strb	r2, [r1, #0]
    7878:	2301      	movs	r3, #1
    787a:	e7fa      	b.n	7872 <__ascii_wctomb+0xe>

0000787c <__gnu_thumb1_case_uqi>:
    787c:	b402      	push	{r1}
    787e:	4671      	mov	r1, lr
    7880:	0849      	lsrs	r1, r1, #1
    7882:	0049      	lsls	r1, r1, #1
    7884:	5c09      	ldrb	r1, [r1, r0]
    7886:	0049      	lsls	r1, r1, #1
    7888:	448e      	add	lr, r1
    788a:	bc02      	pop	{r1}
    788c:	4770      	bx	lr
    788e:	46c0      	nop			; (mov r8, r8)

00007890 <__udivsi3>:
    7890:	2200      	movs	r2, #0
    7892:	0843      	lsrs	r3, r0, #1
    7894:	428b      	cmp	r3, r1
    7896:	d374      	bcc.n	7982 <__udivsi3+0xf2>
    7898:	0903      	lsrs	r3, r0, #4
    789a:	428b      	cmp	r3, r1
    789c:	d35f      	bcc.n	795e <__udivsi3+0xce>
    789e:	0a03      	lsrs	r3, r0, #8
    78a0:	428b      	cmp	r3, r1
    78a2:	d344      	bcc.n	792e <__udivsi3+0x9e>
    78a4:	0b03      	lsrs	r3, r0, #12
    78a6:	428b      	cmp	r3, r1
    78a8:	d328      	bcc.n	78fc <__udivsi3+0x6c>
    78aa:	0c03      	lsrs	r3, r0, #16
    78ac:	428b      	cmp	r3, r1
    78ae:	d30d      	bcc.n	78cc <__udivsi3+0x3c>
    78b0:	22ff      	movs	r2, #255	; 0xff
    78b2:	0209      	lsls	r1, r1, #8
    78b4:	ba12      	rev	r2, r2
    78b6:	0c03      	lsrs	r3, r0, #16
    78b8:	428b      	cmp	r3, r1
    78ba:	d302      	bcc.n	78c2 <__udivsi3+0x32>
    78bc:	1212      	asrs	r2, r2, #8
    78be:	0209      	lsls	r1, r1, #8
    78c0:	d065      	beq.n	798e <__udivsi3+0xfe>
    78c2:	0b03      	lsrs	r3, r0, #12
    78c4:	428b      	cmp	r3, r1
    78c6:	d319      	bcc.n	78fc <__udivsi3+0x6c>
    78c8:	e000      	b.n	78cc <__udivsi3+0x3c>
    78ca:	0a09      	lsrs	r1, r1, #8
    78cc:	0bc3      	lsrs	r3, r0, #15
    78ce:	428b      	cmp	r3, r1
    78d0:	d301      	bcc.n	78d6 <__udivsi3+0x46>
    78d2:	03cb      	lsls	r3, r1, #15
    78d4:	1ac0      	subs	r0, r0, r3
    78d6:	4152      	adcs	r2, r2
    78d8:	0b83      	lsrs	r3, r0, #14
    78da:	428b      	cmp	r3, r1
    78dc:	d301      	bcc.n	78e2 <__udivsi3+0x52>
    78de:	038b      	lsls	r3, r1, #14
    78e0:	1ac0      	subs	r0, r0, r3
    78e2:	4152      	adcs	r2, r2
    78e4:	0b43      	lsrs	r3, r0, #13
    78e6:	428b      	cmp	r3, r1
    78e8:	d301      	bcc.n	78ee <__udivsi3+0x5e>
    78ea:	034b      	lsls	r3, r1, #13
    78ec:	1ac0      	subs	r0, r0, r3
    78ee:	4152      	adcs	r2, r2
    78f0:	0b03      	lsrs	r3, r0, #12
    78f2:	428b      	cmp	r3, r1
    78f4:	d301      	bcc.n	78fa <__udivsi3+0x6a>
    78f6:	030b      	lsls	r3, r1, #12
    78f8:	1ac0      	subs	r0, r0, r3
    78fa:	4152      	adcs	r2, r2
    78fc:	0ac3      	lsrs	r3, r0, #11
    78fe:	428b      	cmp	r3, r1
    7900:	d301      	bcc.n	7906 <__udivsi3+0x76>
    7902:	02cb      	lsls	r3, r1, #11
    7904:	1ac0      	subs	r0, r0, r3
    7906:	4152      	adcs	r2, r2
    7908:	0a83      	lsrs	r3, r0, #10
    790a:	428b      	cmp	r3, r1
    790c:	d301      	bcc.n	7912 <__udivsi3+0x82>
    790e:	028b      	lsls	r3, r1, #10
    7910:	1ac0      	subs	r0, r0, r3
    7912:	4152      	adcs	r2, r2
    7914:	0a43      	lsrs	r3, r0, #9
    7916:	428b      	cmp	r3, r1
    7918:	d301      	bcc.n	791e <__udivsi3+0x8e>
    791a:	024b      	lsls	r3, r1, #9
    791c:	1ac0      	subs	r0, r0, r3
    791e:	4152      	adcs	r2, r2
    7920:	0a03      	lsrs	r3, r0, #8
    7922:	428b      	cmp	r3, r1
    7924:	d301      	bcc.n	792a <__udivsi3+0x9a>
    7926:	020b      	lsls	r3, r1, #8
    7928:	1ac0      	subs	r0, r0, r3
    792a:	4152      	adcs	r2, r2
    792c:	d2cd      	bcs.n	78ca <__udivsi3+0x3a>
    792e:	09c3      	lsrs	r3, r0, #7
    7930:	428b      	cmp	r3, r1
    7932:	d301      	bcc.n	7938 <__udivsi3+0xa8>
    7934:	01cb      	lsls	r3, r1, #7
    7936:	1ac0      	subs	r0, r0, r3
    7938:	4152      	adcs	r2, r2
    793a:	0983      	lsrs	r3, r0, #6
    793c:	428b      	cmp	r3, r1
    793e:	d301      	bcc.n	7944 <__udivsi3+0xb4>
    7940:	018b      	lsls	r3, r1, #6
    7942:	1ac0      	subs	r0, r0, r3
    7944:	4152      	adcs	r2, r2
    7946:	0943      	lsrs	r3, r0, #5
    7948:	428b      	cmp	r3, r1
    794a:	d301      	bcc.n	7950 <__udivsi3+0xc0>
    794c:	014b      	lsls	r3, r1, #5
    794e:	1ac0      	subs	r0, r0, r3
    7950:	4152      	adcs	r2, r2
    7952:	0903      	lsrs	r3, r0, #4
    7954:	428b      	cmp	r3, r1
    7956:	d301      	bcc.n	795c <__udivsi3+0xcc>
    7958:	010b      	lsls	r3, r1, #4
    795a:	1ac0      	subs	r0, r0, r3
    795c:	4152      	adcs	r2, r2
    795e:	08c3      	lsrs	r3, r0, #3
    7960:	428b      	cmp	r3, r1
    7962:	d301      	bcc.n	7968 <__udivsi3+0xd8>
    7964:	00cb      	lsls	r3, r1, #3
    7966:	1ac0      	subs	r0, r0, r3
    7968:	4152      	adcs	r2, r2
    796a:	0883      	lsrs	r3, r0, #2
    796c:	428b      	cmp	r3, r1
    796e:	d301      	bcc.n	7974 <__udivsi3+0xe4>
    7970:	008b      	lsls	r3, r1, #2
    7972:	1ac0      	subs	r0, r0, r3
    7974:	4152      	adcs	r2, r2
    7976:	0843      	lsrs	r3, r0, #1
    7978:	428b      	cmp	r3, r1
    797a:	d301      	bcc.n	7980 <__udivsi3+0xf0>
    797c:	004b      	lsls	r3, r1, #1
    797e:	1ac0      	subs	r0, r0, r3
    7980:	4152      	adcs	r2, r2
    7982:	1a41      	subs	r1, r0, r1
    7984:	d200      	bcs.n	7988 <__udivsi3+0xf8>
    7986:	4601      	mov	r1, r0
    7988:	4152      	adcs	r2, r2
    798a:	4610      	mov	r0, r2
    798c:	4770      	bx	lr
    798e:	e7ff      	b.n	7990 <__udivsi3+0x100>
    7990:	b501      	push	{r0, lr}
    7992:	2000      	movs	r0, #0
    7994:	f000 f8f0 	bl	7b78 <__aeabi_idiv0>
    7998:	bd02      	pop	{r1, pc}
    799a:	46c0      	nop			; (mov r8, r8)

0000799c <__aeabi_uidivmod>:
    799c:	2900      	cmp	r1, #0
    799e:	d0f7      	beq.n	7990 <__udivsi3+0x100>
    79a0:	e776      	b.n	7890 <__udivsi3>
    79a2:	4770      	bx	lr

000079a4 <__divsi3>:
    79a4:	4603      	mov	r3, r0
    79a6:	430b      	orrs	r3, r1
    79a8:	d47f      	bmi.n	7aaa <__divsi3+0x106>
    79aa:	2200      	movs	r2, #0
    79ac:	0843      	lsrs	r3, r0, #1
    79ae:	428b      	cmp	r3, r1
    79b0:	d374      	bcc.n	7a9c <__divsi3+0xf8>
    79b2:	0903      	lsrs	r3, r0, #4
    79b4:	428b      	cmp	r3, r1
    79b6:	d35f      	bcc.n	7a78 <__divsi3+0xd4>
    79b8:	0a03      	lsrs	r3, r0, #8
    79ba:	428b      	cmp	r3, r1
    79bc:	d344      	bcc.n	7a48 <__divsi3+0xa4>
    79be:	0b03      	lsrs	r3, r0, #12
    79c0:	428b      	cmp	r3, r1
    79c2:	d328      	bcc.n	7a16 <__divsi3+0x72>
    79c4:	0c03      	lsrs	r3, r0, #16
    79c6:	428b      	cmp	r3, r1
    79c8:	d30d      	bcc.n	79e6 <__divsi3+0x42>
    79ca:	22ff      	movs	r2, #255	; 0xff
    79cc:	0209      	lsls	r1, r1, #8
    79ce:	ba12      	rev	r2, r2
    79d0:	0c03      	lsrs	r3, r0, #16
    79d2:	428b      	cmp	r3, r1
    79d4:	d302      	bcc.n	79dc <__divsi3+0x38>
    79d6:	1212      	asrs	r2, r2, #8
    79d8:	0209      	lsls	r1, r1, #8
    79da:	d065      	beq.n	7aa8 <__divsi3+0x104>
    79dc:	0b03      	lsrs	r3, r0, #12
    79de:	428b      	cmp	r3, r1
    79e0:	d319      	bcc.n	7a16 <__divsi3+0x72>
    79e2:	e000      	b.n	79e6 <__divsi3+0x42>
    79e4:	0a09      	lsrs	r1, r1, #8
    79e6:	0bc3      	lsrs	r3, r0, #15
    79e8:	428b      	cmp	r3, r1
    79ea:	d301      	bcc.n	79f0 <__divsi3+0x4c>
    79ec:	03cb      	lsls	r3, r1, #15
    79ee:	1ac0      	subs	r0, r0, r3
    79f0:	4152      	adcs	r2, r2
    79f2:	0b83      	lsrs	r3, r0, #14
    79f4:	428b      	cmp	r3, r1
    79f6:	d301      	bcc.n	79fc <__divsi3+0x58>
    79f8:	038b      	lsls	r3, r1, #14
    79fa:	1ac0      	subs	r0, r0, r3
    79fc:	4152      	adcs	r2, r2
    79fe:	0b43      	lsrs	r3, r0, #13
    7a00:	428b      	cmp	r3, r1
    7a02:	d301      	bcc.n	7a08 <__divsi3+0x64>
    7a04:	034b      	lsls	r3, r1, #13
    7a06:	1ac0      	subs	r0, r0, r3
    7a08:	4152      	adcs	r2, r2
    7a0a:	0b03      	lsrs	r3, r0, #12
    7a0c:	428b      	cmp	r3, r1
    7a0e:	d301      	bcc.n	7a14 <__divsi3+0x70>
    7a10:	030b      	lsls	r3, r1, #12
    7a12:	1ac0      	subs	r0, r0, r3
    7a14:	4152      	adcs	r2, r2
    7a16:	0ac3      	lsrs	r3, r0, #11
    7a18:	428b      	cmp	r3, r1
    7a1a:	d301      	bcc.n	7a20 <__divsi3+0x7c>
    7a1c:	02cb      	lsls	r3, r1, #11
    7a1e:	1ac0      	subs	r0, r0, r3
    7a20:	4152      	adcs	r2, r2
    7a22:	0a83      	lsrs	r3, r0, #10
    7a24:	428b      	cmp	r3, r1
    7a26:	d301      	bcc.n	7a2c <__divsi3+0x88>
    7a28:	028b      	lsls	r3, r1, #10
    7a2a:	1ac0      	subs	r0, r0, r3
    7a2c:	4152      	adcs	r2, r2
    7a2e:	0a43      	lsrs	r3, r0, #9
    7a30:	428b      	cmp	r3, r1
    7a32:	d301      	bcc.n	7a38 <__divsi3+0x94>
    7a34:	024b      	lsls	r3, r1, #9
    7a36:	1ac0      	subs	r0, r0, r3
    7a38:	4152      	adcs	r2, r2
    7a3a:	0a03      	lsrs	r3, r0, #8
    7a3c:	428b      	cmp	r3, r1
    7a3e:	d301      	bcc.n	7a44 <__divsi3+0xa0>
    7a40:	020b      	lsls	r3, r1, #8
    7a42:	1ac0      	subs	r0, r0, r3
    7a44:	4152      	adcs	r2, r2
    7a46:	d2cd      	bcs.n	79e4 <__divsi3+0x40>
    7a48:	09c3      	lsrs	r3, r0, #7
    7a4a:	428b      	cmp	r3, r1
    7a4c:	d301      	bcc.n	7a52 <__divsi3+0xae>
    7a4e:	01cb      	lsls	r3, r1, #7
    7a50:	1ac0      	subs	r0, r0, r3
    7a52:	4152      	adcs	r2, r2
    7a54:	0983      	lsrs	r3, r0, #6
    7a56:	428b      	cmp	r3, r1
    7a58:	d301      	bcc.n	7a5e <__divsi3+0xba>
    7a5a:	018b      	lsls	r3, r1, #6
    7a5c:	1ac0      	subs	r0, r0, r3
    7a5e:	4152      	adcs	r2, r2
    7a60:	0943      	lsrs	r3, r0, #5
    7a62:	428b      	cmp	r3, r1
    7a64:	d301      	bcc.n	7a6a <__divsi3+0xc6>
    7a66:	014b      	lsls	r3, r1, #5
    7a68:	1ac0      	subs	r0, r0, r3
    7a6a:	4152      	adcs	r2, r2
    7a6c:	0903      	lsrs	r3, r0, #4
    7a6e:	428b      	cmp	r3, r1
    7a70:	d301      	bcc.n	7a76 <__divsi3+0xd2>
    7a72:	010b      	lsls	r3, r1, #4
    7a74:	1ac0      	subs	r0, r0, r3
    7a76:	4152      	adcs	r2, r2
    7a78:	08c3      	lsrs	r3, r0, #3
    7a7a:	428b      	cmp	r3, r1
    7a7c:	d301      	bcc.n	7a82 <__divsi3+0xde>
    7a7e:	00cb      	lsls	r3, r1, #3
    7a80:	1ac0      	subs	r0, r0, r3
    7a82:	4152      	adcs	r2, r2
    7a84:	0883      	lsrs	r3, r0, #2
    7a86:	428b      	cmp	r3, r1
    7a88:	d301      	bcc.n	7a8e <__divsi3+0xea>
    7a8a:	008b      	lsls	r3, r1, #2
    7a8c:	1ac0      	subs	r0, r0, r3
    7a8e:	4152      	adcs	r2, r2
    7a90:	0843      	lsrs	r3, r0, #1
    7a92:	428b      	cmp	r3, r1
    7a94:	d301      	bcc.n	7a9a <__divsi3+0xf6>
    7a96:	004b      	lsls	r3, r1, #1
    7a98:	1ac0      	subs	r0, r0, r3
    7a9a:	4152      	adcs	r2, r2
    7a9c:	1a41      	subs	r1, r0, r1
    7a9e:	d200      	bcs.n	7aa2 <__divsi3+0xfe>
    7aa0:	4601      	mov	r1, r0
    7aa2:	4152      	adcs	r2, r2
    7aa4:	4610      	mov	r0, r2
    7aa6:	4770      	bx	lr
    7aa8:	e05d      	b.n	7b66 <__divsi3+0x1c2>
    7aaa:	0fca      	lsrs	r2, r1, #31
    7aac:	d000      	beq.n	7ab0 <__divsi3+0x10c>
    7aae:	4249      	negs	r1, r1
    7ab0:	1003      	asrs	r3, r0, #32
    7ab2:	d300      	bcc.n	7ab6 <__divsi3+0x112>
    7ab4:	4240      	negs	r0, r0
    7ab6:	4053      	eors	r3, r2
    7ab8:	2200      	movs	r2, #0
    7aba:	469c      	mov	ip, r3
    7abc:	0903      	lsrs	r3, r0, #4
    7abe:	428b      	cmp	r3, r1
    7ac0:	d32d      	bcc.n	7b1e <__divsi3+0x17a>
    7ac2:	0a03      	lsrs	r3, r0, #8
    7ac4:	428b      	cmp	r3, r1
    7ac6:	d312      	bcc.n	7aee <__divsi3+0x14a>
    7ac8:	22fc      	movs	r2, #252	; 0xfc
    7aca:	0189      	lsls	r1, r1, #6
    7acc:	ba12      	rev	r2, r2
    7ace:	0a03      	lsrs	r3, r0, #8
    7ad0:	428b      	cmp	r3, r1
    7ad2:	d30c      	bcc.n	7aee <__divsi3+0x14a>
    7ad4:	0189      	lsls	r1, r1, #6
    7ad6:	1192      	asrs	r2, r2, #6
    7ad8:	428b      	cmp	r3, r1
    7ada:	d308      	bcc.n	7aee <__divsi3+0x14a>
    7adc:	0189      	lsls	r1, r1, #6
    7ade:	1192      	asrs	r2, r2, #6
    7ae0:	428b      	cmp	r3, r1
    7ae2:	d304      	bcc.n	7aee <__divsi3+0x14a>
    7ae4:	0189      	lsls	r1, r1, #6
    7ae6:	d03a      	beq.n	7b5e <__divsi3+0x1ba>
    7ae8:	1192      	asrs	r2, r2, #6
    7aea:	e000      	b.n	7aee <__divsi3+0x14a>
    7aec:	0989      	lsrs	r1, r1, #6
    7aee:	09c3      	lsrs	r3, r0, #7
    7af0:	428b      	cmp	r3, r1
    7af2:	d301      	bcc.n	7af8 <__divsi3+0x154>
    7af4:	01cb      	lsls	r3, r1, #7
    7af6:	1ac0      	subs	r0, r0, r3
    7af8:	4152      	adcs	r2, r2
    7afa:	0983      	lsrs	r3, r0, #6
    7afc:	428b      	cmp	r3, r1
    7afe:	d301      	bcc.n	7b04 <__divsi3+0x160>
    7b00:	018b      	lsls	r3, r1, #6
    7b02:	1ac0      	subs	r0, r0, r3
    7b04:	4152      	adcs	r2, r2
    7b06:	0943      	lsrs	r3, r0, #5
    7b08:	428b      	cmp	r3, r1
    7b0a:	d301      	bcc.n	7b10 <__divsi3+0x16c>
    7b0c:	014b      	lsls	r3, r1, #5
    7b0e:	1ac0      	subs	r0, r0, r3
    7b10:	4152      	adcs	r2, r2
    7b12:	0903      	lsrs	r3, r0, #4
    7b14:	428b      	cmp	r3, r1
    7b16:	d301      	bcc.n	7b1c <__divsi3+0x178>
    7b18:	010b      	lsls	r3, r1, #4
    7b1a:	1ac0      	subs	r0, r0, r3
    7b1c:	4152      	adcs	r2, r2
    7b1e:	08c3      	lsrs	r3, r0, #3
    7b20:	428b      	cmp	r3, r1
    7b22:	d301      	bcc.n	7b28 <__divsi3+0x184>
    7b24:	00cb      	lsls	r3, r1, #3
    7b26:	1ac0      	subs	r0, r0, r3
    7b28:	4152      	adcs	r2, r2
    7b2a:	0883      	lsrs	r3, r0, #2
    7b2c:	428b      	cmp	r3, r1
    7b2e:	d301      	bcc.n	7b34 <__divsi3+0x190>
    7b30:	008b      	lsls	r3, r1, #2
    7b32:	1ac0      	subs	r0, r0, r3
    7b34:	4152      	adcs	r2, r2
    7b36:	d2d9      	bcs.n	7aec <__divsi3+0x148>
    7b38:	0843      	lsrs	r3, r0, #1
    7b3a:	428b      	cmp	r3, r1
    7b3c:	d301      	bcc.n	7b42 <__divsi3+0x19e>
    7b3e:	004b      	lsls	r3, r1, #1
    7b40:	1ac0      	subs	r0, r0, r3
    7b42:	4152      	adcs	r2, r2
    7b44:	1a41      	subs	r1, r0, r1
    7b46:	d200      	bcs.n	7b4a <__divsi3+0x1a6>
    7b48:	4601      	mov	r1, r0
    7b4a:	4663      	mov	r3, ip
    7b4c:	4152      	adcs	r2, r2
    7b4e:	105b      	asrs	r3, r3, #1
    7b50:	4610      	mov	r0, r2
    7b52:	d301      	bcc.n	7b58 <__divsi3+0x1b4>
    7b54:	4240      	negs	r0, r0
    7b56:	2b00      	cmp	r3, #0
    7b58:	d500      	bpl.n	7b5c <__divsi3+0x1b8>
    7b5a:	4249      	negs	r1, r1
    7b5c:	4770      	bx	lr
    7b5e:	4663      	mov	r3, ip
    7b60:	105b      	asrs	r3, r3, #1
    7b62:	d300      	bcc.n	7b66 <__divsi3+0x1c2>
    7b64:	4240      	negs	r0, r0
    7b66:	b501      	push	{r0, lr}
    7b68:	2000      	movs	r0, #0
    7b6a:	f000 f805 	bl	7b78 <__aeabi_idiv0>
    7b6e:	bd02      	pop	{r1, pc}

00007b70 <__aeabi_idivmod>:
    7b70:	2900      	cmp	r1, #0
    7b72:	d0f8      	beq.n	7b66 <__divsi3+0x1c2>
    7b74:	e716      	b.n	79a4 <__divsi3>
    7b76:	4770      	bx	lr

00007b78 <__aeabi_idiv0>:
    7b78:	4770      	bx	lr
    7b7a:	46c0      	nop			; (mov r8, r8)

00007b7c <__aeabi_cdrcmple>:
    7b7c:	4684      	mov	ip, r0
    7b7e:	1c10      	adds	r0, r2, #0
    7b80:	4662      	mov	r2, ip
    7b82:	468c      	mov	ip, r1
    7b84:	1c19      	adds	r1, r3, #0
    7b86:	4663      	mov	r3, ip
    7b88:	e000      	b.n	7b8c <__aeabi_cdcmpeq>
    7b8a:	46c0      	nop			; (mov r8, r8)

00007b8c <__aeabi_cdcmpeq>:
    7b8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7b8e:	f001 fc6b 	bl	9468 <__ledf2>
    7b92:	2800      	cmp	r0, #0
    7b94:	d401      	bmi.n	7b9a <__aeabi_cdcmpeq+0xe>
    7b96:	2100      	movs	r1, #0
    7b98:	42c8      	cmn	r0, r1
    7b9a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00007b9c <__aeabi_dcmpeq>:
    7b9c:	b510      	push	{r4, lr}
    7b9e:	f001 fbc5 	bl	932c <__eqdf2>
    7ba2:	4240      	negs	r0, r0
    7ba4:	3001      	adds	r0, #1
    7ba6:	bd10      	pop	{r4, pc}

00007ba8 <__aeabi_dcmplt>:
    7ba8:	b510      	push	{r4, lr}
    7baa:	f001 fc5d 	bl	9468 <__ledf2>
    7bae:	2800      	cmp	r0, #0
    7bb0:	db01      	blt.n	7bb6 <__aeabi_dcmplt+0xe>
    7bb2:	2000      	movs	r0, #0
    7bb4:	bd10      	pop	{r4, pc}
    7bb6:	2001      	movs	r0, #1
    7bb8:	bd10      	pop	{r4, pc}
    7bba:	46c0      	nop			; (mov r8, r8)

00007bbc <__aeabi_dcmple>:
    7bbc:	b510      	push	{r4, lr}
    7bbe:	f001 fc53 	bl	9468 <__ledf2>
    7bc2:	2800      	cmp	r0, #0
    7bc4:	dd01      	ble.n	7bca <__aeabi_dcmple+0xe>
    7bc6:	2000      	movs	r0, #0
    7bc8:	bd10      	pop	{r4, pc}
    7bca:	2001      	movs	r0, #1
    7bcc:	bd10      	pop	{r4, pc}
    7bce:	46c0      	nop			; (mov r8, r8)

00007bd0 <__aeabi_dcmpgt>:
    7bd0:	b510      	push	{r4, lr}
    7bd2:	f001 fbe5 	bl	93a0 <__gedf2>
    7bd6:	2800      	cmp	r0, #0
    7bd8:	dc01      	bgt.n	7bde <__aeabi_dcmpgt+0xe>
    7bda:	2000      	movs	r0, #0
    7bdc:	bd10      	pop	{r4, pc}
    7bde:	2001      	movs	r0, #1
    7be0:	bd10      	pop	{r4, pc}
    7be2:	46c0      	nop			; (mov r8, r8)

00007be4 <__aeabi_dcmpge>:
    7be4:	b510      	push	{r4, lr}
    7be6:	f001 fbdb 	bl	93a0 <__gedf2>
    7bea:	2800      	cmp	r0, #0
    7bec:	da01      	bge.n	7bf2 <__aeabi_dcmpge+0xe>
    7bee:	2000      	movs	r0, #0
    7bf0:	bd10      	pop	{r4, pc}
    7bf2:	2001      	movs	r0, #1
    7bf4:	bd10      	pop	{r4, pc}
    7bf6:	46c0      	nop			; (mov r8, r8)

00007bf8 <__aeabi_cfrcmple>:
    7bf8:	4684      	mov	ip, r0
    7bfa:	1c08      	adds	r0, r1, #0
    7bfc:	4661      	mov	r1, ip
    7bfe:	e7ff      	b.n	7c00 <__aeabi_cfcmpeq>

00007c00 <__aeabi_cfcmpeq>:
    7c00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7c02:	f000 fb9d 	bl	8340 <__lesf2>
    7c06:	2800      	cmp	r0, #0
    7c08:	d401      	bmi.n	7c0e <__aeabi_cfcmpeq+0xe>
    7c0a:	2100      	movs	r1, #0
    7c0c:	42c8      	cmn	r0, r1
    7c0e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00007c10 <__aeabi_fcmpeq>:
    7c10:	b510      	push	{r4, lr}
    7c12:	f000 fb2f 	bl	8274 <__eqsf2>
    7c16:	4240      	negs	r0, r0
    7c18:	3001      	adds	r0, #1
    7c1a:	bd10      	pop	{r4, pc}

00007c1c <__aeabi_fcmplt>:
    7c1c:	b510      	push	{r4, lr}
    7c1e:	f000 fb8f 	bl	8340 <__lesf2>
    7c22:	2800      	cmp	r0, #0
    7c24:	db01      	blt.n	7c2a <__aeabi_fcmplt+0xe>
    7c26:	2000      	movs	r0, #0
    7c28:	bd10      	pop	{r4, pc}
    7c2a:	2001      	movs	r0, #1
    7c2c:	bd10      	pop	{r4, pc}
    7c2e:	46c0      	nop			; (mov r8, r8)

00007c30 <__aeabi_fcmple>:
    7c30:	b510      	push	{r4, lr}
    7c32:	f000 fb85 	bl	8340 <__lesf2>
    7c36:	2800      	cmp	r0, #0
    7c38:	dd01      	ble.n	7c3e <__aeabi_fcmple+0xe>
    7c3a:	2000      	movs	r0, #0
    7c3c:	bd10      	pop	{r4, pc}
    7c3e:	2001      	movs	r0, #1
    7c40:	bd10      	pop	{r4, pc}
    7c42:	46c0      	nop			; (mov r8, r8)

00007c44 <__aeabi_fcmpgt>:
    7c44:	b510      	push	{r4, lr}
    7c46:	f000 fb3b 	bl	82c0 <__gesf2>
    7c4a:	2800      	cmp	r0, #0
    7c4c:	dc01      	bgt.n	7c52 <__aeabi_fcmpgt+0xe>
    7c4e:	2000      	movs	r0, #0
    7c50:	bd10      	pop	{r4, pc}
    7c52:	2001      	movs	r0, #1
    7c54:	bd10      	pop	{r4, pc}
    7c56:	46c0      	nop			; (mov r8, r8)

00007c58 <__aeabi_fcmpge>:
    7c58:	b510      	push	{r4, lr}
    7c5a:	f000 fb31 	bl	82c0 <__gesf2>
    7c5e:	2800      	cmp	r0, #0
    7c60:	da01      	bge.n	7c66 <__aeabi_fcmpge+0xe>
    7c62:	2000      	movs	r0, #0
    7c64:	bd10      	pop	{r4, pc}
    7c66:	2001      	movs	r0, #1
    7c68:	bd10      	pop	{r4, pc}
    7c6a:	46c0      	nop			; (mov r8, r8)

00007c6c <__aeabi_lmul>:
    7c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c6e:	46ce      	mov	lr, r9
    7c70:	4647      	mov	r7, r8
    7c72:	0415      	lsls	r5, r2, #16
    7c74:	0c2d      	lsrs	r5, r5, #16
    7c76:	002e      	movs	r6, r5
    7c78:	b580      	push	{r7, lr}
    7c7a:	0407      	lsls	r7, r0, #16
    7c7c:	0c14      	lsrs	r4, r2, #16
    7c7e:	0c3f      	lsrs	r7, r7, #16
    7c80:	4699      	mov	r9, r3
    7c82:	0c03      	lsrs	r3, r0, #16
    7c84:	437e      	muls	r6, r7
    7c86:	435d      	muls	r5, r3
    7c88:	4367      	muls	r7, r4
    7c8a:	4363      	muls	r3, r4
    7c8c:	197f      	adds	r7, r7, r5
    7c8e:	0c34      	lsrs	r4, r6, #16
    7c90:	19e4      	adds	r4, r4, r7
    7c92:	469c      	mov	ip, r3
    7c94:	42a5      	cmp	r5, r4
    7c96:	d903      	bls.n	7ca0 <__aeabi_lmul+0x34>
    7c98:	2380      	movs	r3, #128	; 0x80
    7c9a:	025b      	lsls	r3, r3, #9
    7c9c:	4698      	mov	r8, r3
    7c9e:	44c4      	add	ip, r8
    7ca0:	464b      	mov	r3, r9
    7ca2:	4351      	muls	r1, r2
    7ca4:	4343      	muls	r3, r0
    7ca6:	0436      	lsls	r6, r6, #16
    7ca8:	0c36      	lsrs	r6, r6, #16
    7caa:	0c25      	lsrs	r5, r4, #16
    7cac:	0424      	lsls	r4, r4, #16
    7cae:	4465      	add	r5, ip
    7cb0:	19a4      	adds	r4, r4, r6
    7cb2:	1859      	adds	r1, r3, r1
    7cb4:	1949      	adds	r1, r1, r5
    7cb6:	0020      	movs	r0, r4
    7cb8:	bc0c      	pop	{r2, r3}
    7cba:	4690      	mov	r8, r2
    7cbc:	4699      	mov	r9, r3
    7cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007cc0 <__aeabi_fadd>:
    7cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7cc2:	46c6      	mov	lr, r8
    7cc4:	024e      	lsls	r6, r1, #9
    7cc6:	0247      	lsls	r7, r0, #9
    7cc8:	0a76      	lsrs	r6, r6, #9
    7cca:	0a7b      	lsrs	r3, r7, #9
    7ccc:	0044      	lsls	r4, r0, #1
    7cce:	0fc5      	lsrs	r5, r0, #31
    7cd0:	00f7      	lsls	r7, r6, #3
    7cd2:	0048      	lsls	r0, r1, #1
    7cd4:	4698      	mov	r8, r3
    7cd6:	b500      	push	{lr}
    7cd8:	0e24      	lsrs	r4, r4, #24
    7cda:	002a      	movs	r2, r5
    7cdc:	00db      	lsls	r3, r3, #3
    7cde:	0e00      	lsrs	r0, r0, #24
    7ce0:	0fc9      	lsrs	r1, r1, #31
    7ce2:	46bc      	mov	ip, r7
    7ce4:	428d      	cmp	r5, r1
    7ce6:	d067      	beq.n	7db8 <__aeabi_fadd+0xf8>
    7ce8:	1a22      	subs	r2, r4, r0
    7cea:	2a00      	cmp	r2, #0
    7cec:	dc00      	bgt.n	7cf0 <__aeabi_fadd+0x30>
    7cee:	e0a5      	b.n	7e3c <__aeabi_fadd+0x17c>
    7cf0:	2800      	cmp	r0, #0
    7cf2:	d13a      	bne.n	7d6a <__aeabi_fadd+0xaa>
    7cf4:	2f00      	cmp	r7, #0
    7cf6:	d100      	bne.n	7cfa <__aeabi_fadd+0x3a>
    7cf8:	e093      	b.n	7e22 <__aeabi_fadd+0x162>
    7cfa:	1e51      	subs	r1, r2, #1
    7cfc:	2900      	cmp	r1, #0
    7cfe:	d000      	beq.n	7d02 <__aeabi_fadd+0x42>
    7d00:	e0bc      	b.n	7e7c <__aeabi_fadd+0x1bc>
    7d02:	2401      	movs	r4, #1
    7d04:	1bdb      	subs	r3, r3, r7
    7d06:	015a      	lsls	r2, r3, #5
    7d08:	d546      	bpl.n	7d98 <__aeabi_fadd+0xd8>
    7d0a:	019b      	lsls	r3, r3, #6
    7d0c:	099e      	lsrs	r6, r3, #6
    7d0e:	0030      	movs	r0, r6
    7d10:	f002 fb4c 	bl	a3ac <__clzsi2>
    7d14:	3805      	subs	r0, #5
    7d16:	4086      	lsls	r6, r0
    7d18:	4284      	cmp	r4, r0
    7d1a:	dd00      	ble.n	7d1e <__aeabi_fadd+0x5e>
    7d1c:	e09d      	b.n	7e5a <__aeabi_fadd+0x19a>
    7d1e:	1b04      	subs	r4, r0, r4
    7d20:	0032      	movs	r2, r6
    7d22:	2020      	movs	r0, #32
    7d24:	3401      	adds	r4, #1
    7d26:	40e2      	lsrs	r2, r4
    7d28:	1b04      	subs	r4, r0, r4
    7d2a:	40a6      	lsls	r6, r4
    7d2c:	0033      	movs	r3, r6
    7d2e:	1e5e      	subs	r6, r3, #1
    7d30:	41b3      	sbcs	r3, r6
    7d32:	2400      	movs	r4, #0
    7d34:	4313      	orrs	r3, r2
    7d36:	075a      	lsls	r2, r3, #29
    7d38:	d004      	beq.n	7d44 <__aeabi_fadd+0x84>
    7d3a:	220f      	movs	r2, #15
    7d3c:	401a      	ands	r2, r3
    7d3e:	2a04      	cmp	r2, #4
    7d40:	d000      	beq.n	7d44 <__aeabi_fadd+0x84>
    7d42:	3304      	adds	r3, #4
    7d44:	015a      	lsls	r2, r3, #5
    7d46:	d529      	bpl.n	7d9c <__aeabi_fadd+0xdc>
    7d48:	3401      	adds	r4, #1
    7d4a:	2cff      	cmp	r4, #255	; 0xff
    7d4c:	d100      	bne.n	7d50 <__aeabi_fadd+0x90>
    7d4e:	e081      	b.n	7e54 <__aeabi_fadd+0x194>
    7d50:	002a      	movs	r2, r5
    7d52:	019b      	lsls	r3, r3, #6
    7d54:	0a5b      	lsrs	r3, r3, #9
    7d56:	b2e4      	uxtb	r4, r4
    7d58:	025b      	lsls	r3, r3, #9
    7d5a:	05e4      	lsls	r4, r4, #23
    7d5c:	0a58      	lsrs	r0, r3, #9
    7d5e:	07d2      	lsls	r2, r2, #31
    7d60:	4320      	orrs	r0, r4
    7d62:	4310      	orrs	r0, r2
    7d64:	bc04      	pop	{r2}
    7d66:	4690      	mov	r8, r2
    7d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7d6a:	2cff      	cmp	r4, #255	; 0xff
    7d6c:	d0e3      	beq.n	7d36 <__aeabi_fadd+0x76>
    7d6e:	2180      	movs	r1, #128	; 0x80
    7d70:	0038      	movs	r0, r7
    7d72:	04c9      	lsls	r1, r1, #19
    7d74:	4308      	orrs	r0, r1
    7d76:	4684      	mov	ip, r0
    7d78:	2a1b      	cmp	r2, #27
    7d7a:	dd00      	ble.n	7d7e <__aeabi_fadd+0xbe>
    7d7c:	e082      	b.n	7e84 <__aeabi_fadd+0x1c4>
    7d7e:	2020      	movs	r0, #32
    7d80:	4661      	mov	r1, ip
    7d82:	40d1      	lsrs	r1, r2
    7d84:	1a82      	subs	r2, r0, r2
    7d86:	4660      	mov	r0, ip
    7d88:	4090      	lsls	r0, r2
    7d8a:	0002      	movs	r2, r0
    7d8c:	1e50      	subs	r0, r2, #1
    7d8e:	4182      	sbcs	r2, r0
    7d90:	430a      	orrs	r2, r1
    7d92:	1a9b      	subs	r3, r3, r2
    7d94:	015a      	lsls	r2, r3, #5
    7d96:	d4b8      	bmi.n	7d0a <__aeabi_fadd+0x4a>
    7d98:	075a      	lsls	r2, r3, #29
    7d9a:	d1ce      	bne.n	7d3a <__aeabi_fadd+0x7a>
    7d9c:	08de      	lsrs	r6, r3, #3
    7d9e:	002a      	movs	r2, r5
    7da0:	2cff      	cmp	r4, #255	; 0xff
    7da2:	d13a      	bne.n	7e1a <__aeabi_fadd+0x15a>
    7da4:	2e00      	cmp	r6, #0
    7da6:	d100      	bne.n	7daa <__aeabi_fadd+0xea>
    7da8:	e0ae      	b.n	7f08 <__aeabi_fadd+0x248>
    7daa:	2380      	movs	r3, #128	; 0x80
    7dac:	03db      	lsls	r3, r3, #15
    7dae:	4333      	orrs	r3, r6
    7db0:	025b      	lsls	r3, r3, #9
    7db2:	0a5b      	lsrs	r3, r3, #9
    7db4:	24ff      	movs	r4, #255	; 0xff
    7db6:	e7cf      	b.n	7d58 <__aeabi_fadd+0x98>
    7db8:	1a21      	subs	r1, r4, r0
    7dba:	2900      	cmp	r1, #0
    7dbc:	dd52      	ble.n	7e64 <__aeabi_fadd+0x1a4>
    7dbe:	2800      	cmp	r0, #0
    7dc0:	d031      	beq.n	7e26 <__aeabi_fadd+0x166>
    7dc2:	2cff      	cmp	r4, #255	; 0xff
    7dc4:	d0b7      	beq.n	7d36 <__aeabi_fadd+0x76>
    7dc6:	2080      	movs	r0, #128	; 0x80
    7dc8:	003e      	movs	r6, r7
    7dca:	04c0      	lsls	r0, r0, #19
    7dcc:	4306      	orrs	r6, r0
    7dce:	46b4      	mov	ip, r6
    7dd0:	291b      	cmp	r1, #27
    7dd2:	dd00      	ble.n	7dd6 <__aeabi_fadd+0x116>
    7dd4:	e0aa      	b.n	7f2c <__aeabi_fadd+0x26c>
    7dd6:	2620      	movs	r6, #32
    7dd8:	4660      	mov	r0, ip
    7dda:	40c8      	lsrs	r0, r1
    7ddc:	1a71      	subs	r1, r6, r1
    7dde:	4666      	mov	r6, ip
    7de0:	408e      	lsls	r6, r1
    7de2:	0031      	movs	r1, r6
    7de4:	1e4e      	subs	r6, r1, #1
    7de6:	41b1      	sbcs	r1, r6
    7de8:	4301      	orrs	r1, r0
    7dea:	185b      	adds	r3, r3, r1
    7dec:	0159      	lsls	r1, r3, #5
    7dee:	d5d3      	bpl.n	7d98 <__aeabi_fadd+0xd8>
    7df0:	3401      	adds	r4, #1
    7df2:	2cff      	cmp	r4, #255	; 0xff
    7df4:	d100      	bne.n	7df8 <__aeabi_fadd+0x138>
    7df6:	e087      	b.n	7f08 <__aeabi_fadd+0x248>
    7df8:	2201      	movs	r2, #1
    7dfa:	4978      	ldr	r1, [pc, #480]	; (7fdc <__aeabi_fadd+0x31c>)
    7dfc:	401a      	ands	r2, r3
    7dfe:	085b      	lsrs	r3, r3, #1
    7e00:	400b      	ands	r3, r1
    7e02:	4313      	orrs	r3, r2
    7e04:	e797      	b.n	7d36 <__aeabi_fadd+0x76>
    7e06:	2c00      	cmp	r4, #0
    7e08:	d000      	beq.n	7e0c <__aeabi_fadd+0x14c>
    7e0a:	e0a7      	b.n	7f5c <__aeabi_fadd+0x29c>
    7e0c:	2b00      	cmp	r3, #0
    7e0e:	d000      	beq.n	7e12 <__aeabi_fadd+0x152>
    7e10:	e0b6      	b.n	7f80 <__aeabi_fadd+0x2c0>
    7e12:	1e3b      	subs	r3, r7, #0
    7e14:	d162      	bne.n	7edc <__aeabi_fadd+0x21c>
    7e16:	2600      	movs	r6, #0
    7e18:	2200      	movs	r2, #0
    7e1a:	0273      	lsls	r3, r6, #9
    7e1c:	0a5b      	lsrs	r3, r3, #9
    7e1e:	b2e4      	uxtb	r4, r4
    7e20:	e79a      	b.n	7d58 <__aeabi_fadd+0x98>
    7e22:	0014      	movs	r4, r2
    7e24:	e787      	b.n	7d36 <__aeabi_fadd+0x76>
    7e26:	2f00      	cmp	r7, #0
    7e28:	d04d      	beq.n	7ec6 <__aeabi_fadd+0x206>
    7e2a:	1e48      	subs	r0, r1, #1
    7e2c:	2800      	cmp	r0, #0
    7e2e:	d157      	bne.n	7ee0 <__aeabi_fadd+0x220>
    7e30:	4463      	add	r3, ip
    7e32:	2401      	movs	r4, #1
    7e34:	015a      	lsls	r2, r3, #5
    7e36:	d5af      	bpl.n	7d98 <__aeabi_fadd+0xd8>
    7e38:	2402      	movs	r4, #2
    7e3a:	e7dd      	b.n	7df8 <__aeabi_fadd+0x138>
    7e3c:	2a00      	cmp	r2, #0
    7e3e:	d124      	bne.n	7e8a <__aeabi_fadd+0x1ca>
    7e40:	1c62      	adds	r2, r4, #1
    7e42:	b2d2      	uxtb	r2, r2
    7e44:	2a01      	cmp	r2, #1
    7e46:	ddde      	ble.n	7e06 <__aeabi_fadd+0x146>
    7e48:	1bde      	subs	r6, r3, r7
    7e4a:	0172      	lsls	r2, r6, #5
    7e4c:	d535      	bpl.n	7eba <__aeabi_fadd+0x1fa>
    7e4e:	1afe      	subs	r6, r7, r3
    7e50:	000d      	movs	r5, r1
    7e52:	e75c      	b.n	7d0e <__aeabi_fadd+0x4e>
    7e54:	002a      	movs	r2, r5
    7e56:	2300      	movs	r3, #0
    7e58:	e77e      	b.n	7d58 <__aeabi_fadd+0x98>
    7e5a:	0033      	movs	r3, r6
    7e5c:	4a60      	ldr	r2, [pc, #384]	; (7fe0 <__aeabi_fadd+0x320>)
    7e5e:	1a24      	subs	r4, r4, r0
    7e60:	4013      	ands	r3, r2
    7e62:	e768      	b.n	7d36 <__aeabi_fadd+0x76>
    7e64:	2900      	cmp	r1, #0
    7e66:	d163      	bne.n	7f30 <__aeabi_fadd+0x270>
    7e68:	1c61      	adds	r1, r4, #1
    7e6a:	b2c8      	uxtb	r0, r1
    7e6c:	2801      	cmp	r0, #1
    7e6e:	dd4e      	ble.n	7f0e <__aeabi_fadd+0x24e>
    7e70:	29ff      	cmp	r1, #255	; 0xff
    7e72:	d049      	beq.n	7f08 <__aeabi_fadd+0x248>
    7e74:	4463      	add	r3, ip
    7e76:	085b      	lsrs	r3, r3, #1
    7e78:	000c      	movs	r4, r1
    7e7a:	e75c      	b.n	7d36 <__aeabi_fadd+0x76>
    7e7c:	2aff      	cmp	r2, #255	; 0xff
    7e7e:	d041      	beq.n	7f04 <__aeabi_fadd+0x244>
    7e80:	000a      	movs	r2, r1
    7e82:	e779      	b.n	7d78 <__aeabi_fadd+0xb8>
    7e84:	2201      	movs	r2, #1
    7e86:	1a9b      	subs	r3, r3, r2
    7e88:	e784      	b.n	7d94 <__aeabi_fadd+0xd4>
    7e8a:	2c00      	cmp	r4, #0
    7e8c:	d01d      	beq.n	7eca <__aeabi_fadd+0x20a>
    7e8e:	28ff      	cmp	r0, #255	; 0xff
    7e90:	d022      	beq.n	7ed8 <__aeabi_fadd+0x218>
    7e92:	2480      	movs	r4, #128	; 0x80
    7e94:	04e4      	lsls	r4, r4, #19
    7e96:	4252      	negs	r2, r2
    7e98:	4323      	orrs	r3, r4
    7e9a:	2a1b      	cmp	r2, #27
    7e9c:	dd00      	ble.n	7ea0 <__aeabi_fadd+0x1e0>
    7e9e:	e08a      	b.n	7fb6 <__aeabi_fadd+0x2f6>
    7ea0:	001c      	movs	r4, r3
    7ea2:	2520      	movs	r5, #32
    7ea4:	40d4      	lsrs	r4, r2
    7ea6:	1aaa      	subs	r2, r5, r2
    7ea8:	4093      	lsls	r3, r2
    7eaa:	1e5a      	subs	r2, r3, #1
    7eac:	4193      	sbcs	r3, r2
    7eae:	4323      	orrs	r3, r4
    7eb0:	4662      	mov	r2, ip
    7eb2:	0004      	movs	r4, r0
    7eb4:	1ad3      	subs	r3, r2, r3
    7eb6:	000d      	movs	r5, r1
    7eb8:	e725      	b.n	7d06 <__aeabi_fadd+0x46>
    7eba:	2e00      	cmp	r6, #0
    7ebc:	d000      	beq.n	7ec0 <__aeabi_fadd+0x200>
    7ebe:	e726      	b.n	7d0e <__aeabi_fadd+0x4e>
    7ec0:	2200      	movs	r2, #0
    7ec2:	2400      	movs	r4, #0
    7ec4:	e7a9      	b.n	7e1a <__aeabi_fadd+0x15a>
    7ec6:	000c      	movs	r4, r1
    7ec8:	e735      	b.n	7d36 <__aeabi_fadd+0x76>
    7eca:	2b00      	cmp	r3, #0
    7ecc:	d04d      	beq.n	7f6a <__aeabi_fadd+0x2aa>
    7ece:	43d2      	mvns	r2, r2
    7ed0:	2a00      	cmp	r2, #0
    7ed2:	d0ed      	beq.n	7eb0 <__aeabi_fadd+0x1f0>
    7ed4:	28ff      	cmp	r0, #255	; 0xff
    7ed6:	d1e0      	bne.n	7e9a <__aeabi_fadd+0x1da>
    7ed8:	4663      	mov	r3, ip
    7eda:	24ff      	movs	r4, #255	; 0xff
    7edc:	000d      	movs	r5, r1
    7ede:	e72a      	b.n	7d36 <__aeabi_fadd+0x76>
    7ee0:	29ff      	cmp	r1, #255	; 0xff
    7ee2:	d00f      	beq.n	7f04 <__aeabi_fadd+0x244>
    7ee4:	0001      	movs	r1, r0
    7ee6:	e773      	b.n	7dd0 <__aeabi_fadd+0x110>
    7ee8:	2b00      	cmp	r3, #0
    7eea:	d061      	beq.n	7fb0 <__aeabi_fadd+0x2f0>
    7eec:	24ff      	movs	r4, #255	; 0xff
    7eee:	2f00      	cmp	r7, #0
    7ef0:	d100      	bne.n	7ef4 <__aeabi_fadd+0x234>
    7ef2:	e720      	b.n	7d36 <__aeabi_fadd+0x76>
    7ef4:	2280      	movs	r2, #128	; 0x80
    7ef6:	4641      	mov	r1, r8
    7ef8:	03d2      	lsls	r2, r2, #15
    7efa:	4211      	tst	r1, r2
    7efc:	d002      	beq.n	7f04 <__aeabi_fadd+0x244>
    7efe:	4216      	tst	r6, r2
    7f00:	d100      	bne.n	7f04 <__aeabi_fadd+0x244>
    7f02:	003b      	movs	r3, r7
    7f04:	24ff      	movs	r4, #255	; 0xff
    7f06:	e716      	b.n	7d36 <__aeabi_fadd+0x76>
    7f08:	24ff      	movs	r4, #255	; 0xff
    7f0a:	2300      	movs	r3, #0
    7f0c:	e724      	b.n	7d58 <__aeabi_fadd+0x98>
    7f0e:	2c00      	cmp	r4, #0
    7f10:	d1ea      	bne.n	7ee8 <__aeabi_fadd+0x228>
    7f12:	2b00      	cmp	r3, #0
    7f14:	d058      	beq.n	7fc8 <__aeabi_fadd+0x308>
    7f16:	2f00      	cmp	r7, #0
    7f18:	d100      	bne.n	7f1c <__aeabi_fadd+0x25c>
    7f1a:	e70c      	b.n	7d36 <__aeabi_fadd+0x76>
    7f1c:	4463      	add	r3, ip
    7f1e:	015a      	lsls	r2, r3, #5
    7f20:	d400      	bmi.n	7f24 <__aeabi_fadd+0x264>
    7f22:	e739      	b.n	7d98 <__aeabi_fadd+0xd8>
    7f24:	4a2e      	ldr	r2, [pc, #184]	; (7fe0 <__aeabi_fadd+0x320>)
    7f26:	000c      	movs	r4, r1
    7f28:	4013      	ands	r3, r2
    7f2a:	e704      	b.n	7d36 <__aeabi_fadd+0x76>
    7f2c:	2101      	movs	r1, #1
    7f2e:	e75c      	b.n	7dea <__aeabi_fadd+0x12a>
    7f30:	2c00      	cmp	r4, #0
    7f32:	d11e      	bne.n	7f72 <__aeabi_fadd+0x2b2>
    7f34:	2b00      	cmp	r3, #0
    7f36:	d040      	beq.n	7fba <__aeabi_fadd+0x2fa>
    7f38:	43c9      	mvns	r1, r1
    7f3a:	2900      	cmp	r1, #0
    7f3c:	d00b      	beq.n	7f56 <__aeabi_fadd+0x296>
    7f3e:	28ff      	cmp	r0, #255	; 0xff
    7f40:	d036      	beq.n	7fb0 <__aeabi_fadd+0x2f0>
    7f42:	291b      	cmp	r1, #27
    7f44:	dc47      	bgt.n	7fd6 <__aeabi_fadd+0x316>
    7f46:	001c      	movs	r4, r3
    7f48:	2620      	movs	r6, #32
    7f4a:	40cc      	lsrs	r4, r1
    7f4c:	1a71      	subs	r1, r6, r1
    7f4e:	408b      	lsls	r3, r1
    7f50:	1e59      	subs	r1, r3, #1
    7f52:	418b      	sbcs	r3, r1
    7f54:	4323      	orrs	r3, r4
    7f56:	4463      	add	r3, ip
    7f58:	0004      	movs	r4, r0
    7f5a:	e747      	b.n	7dec <__aeabi_fadd+0x12c>
    7f5c:	2b00      	cmp	r3, #0
    7f5e:	d118      	bne.n	7f92 <__aeabi_fadd+0x2d2>
    7f60:	1e3b      	subs	r3, r7, #0
    7f62:	d02d      	beq.n	7fc0 <__aeabi_fadd+0x300>
    7f64:	000d      	movs	r5, r1
    7f66:	24ff      	movs	r4, #255	; 0xff
    7f68:	e6e5      	b.n	7d36 <__aeabi_fadd+0x76>
    7f6a:	003b      	movs	r3, r7
    7f6c:	0004      	movs	r4, r0
    7f6e:	000d      	movs	r5, r1
    7f70:	e6e1      	b.n	7d36 <__aeabi_fadd+0x76>
    7f72:	28ff      	cmp	r0, #255	; 0xff
    7f74:	d01c      	beq.n	7fb0 <__aeabi_fadd+0x2f0>
    7f76:	2480      	movs	r4, #128	; 0x80
    7f78:	04e4      	lsls	r4, r4, #19
    7f7a:	4249      	negs	r1, r1
    7f7c:	4323      	orrs	r3, r4
    7f7e:	e7e0      	b.n	7f42 <__aeabi_fadd+0x282>
    7f80:	2f00      	cmp	r7, #0
    7f82:	d100      	bne.n	7f86 <__aeabi_fadd+0x2c6>
    7f84:	e6d7      	b.n	7d36 <__aeabi_fadd+0x76>
    7f86:	1bde      	subs	r6, r3, r7
    7f88:	0172      	lsls	r2, r6, #5
    7f8a:	d51f      	bpl.n	7fcc <__aeabi_fadd+0x30c>
    7f8c:	1afb      	subs	r3, r7, r3
    7f8e:	000d      	movs	r5, r1
    7f90:	e6d1      	b.n	7d36 <__aeabi_fadd+0x76>
    7f92:	24ff      	movs	r4, #255	; 0xff
    7f94:	2f00      	cmp	r7, #0
    7f96:	d100      	bne.n	7f9a <__aeabi_fadd+0x2da>
    7f98:	e6cd      	b.n	7d36 <__aeabi_fadd+0x76>
    7f9a:	2280      	movs	r2, #128	; 0x80
    7f9c:	4640      	mov	r0, r8
    7f9e:	03d2      	lsls	r2, r2, #15
    7fa0:	4210      	tst	r0, r2
    7fa2:	d0af      	beq.n	7f04 <__aeabi_fadd+0x244>
    7fa4:	4216      	tst	r6, r2
    7fa6:	d1ad      	bne.n	7f04 <__aeabi_fadd+0x244>
    7fa8:	003b      	movs	r3, r7
    7faa:	000d      	movs	r5, r1
    7fac:	24ff      	movs	r4, #255	; 0xff
    7fae:	e6c2      	b.n	7d36 <__aeabi_fadd+0x76>
    7fb0:	4663      	mov	r3, ip
    7fb2:	24ff      	movs	r4, #255	; 0xff
    7fb4:	e6bf      	b.n	7d36 <__aeabi_fadd+0x76>
    7fb6:	2301      	movs	r3, #1
    7fb8:	e77a      	b.n	7eb0 <__aeabi_fadd+0x1f0>
    7fba:	003b      	movs	r3, r7
    7fbc:	0004      	movs	r4, r0
    7fbe:	e6ba      	b.n	7d36 <__aeabi_fadd+0x76>
    7fc0:	2680      	movs	r6, #128	; 0x80
    7fc2:	2200      	movs	r2, #0
    7fc4:	03f6      	lsls	r6, r6, #15
    7fc6:	e6f0      	b.n	7daa <__aeabi_fadd+0xea>
    7fc8:	003b      	movs	r3, r7
    7fca:	e6b4      	b.n	7d36 <__aeabi_fadd+0x76>
    7fcc:	1e33      	subs	r3, r6, #0
    7fce:	d000      	beq.n	7fd2 <__aeabi_fadd+0x312>
    7fd0:	e6e2      	b.n	7d98 <__aeabi_fadd+0xd8>
    7fd2:	2200      	movs	r2, #0
    7fd4:	e721      	b.n	7e1a <__aeabi_fadd+0x15a>
    7fd6:	2301      	movs	r3, #1
    7fd8:	e7bd      	b.n	7f56 <__aeabi_fadd+0x296>
    7fda:	46c0      	nop			; (mov r8, r8)
    7fdc:	7dffffff 	.word	0x7dffffff
    7fe0:	fbffffff 	.word	0xfbffffff

00007fe4 <__aeabi_fdiv>:
    7fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fe6:	4657      	mov	r7, sl
    7fe8:	464e      	mov	r6, r9
    7fea:	46de      	mov	lr, fp
    7fec:	4645      	mov	r5, r8
    7fee:	b5e0      	push	{r5, r6, r7, lr}
    7ff0:	0244      	lsls	r4, r0, #9
    7ff2:	0043      	lsls	r3, r0, #1
    7ff4:	0fc6      	lsrs	r6, r0, #31
    7ff6:	b083      	sub	sp, #12
    7ff8:	1c0f      	adds	r7, r1, #0
    7ffa:	0a64      	lsrs	r4, r4, #9
    7ffc:	0e1b      	lsrs	r3, r3, #24
    7ffe:	46b2      	mov	sl, r6
    8000:	d053      	beq.n	80aa <__aeabi_fdiv+0xc6>
    8002:	2bff      	cmp	r3, #255	; 0xff
    8004:	d027      	beq.n	8056 <__aeabi_fdiv+0x72>
    8006:	2280      	movs	r2, #128	; 0x80
    8008:	00e4      	lsls	r4, r4, #3
    800a:	04d2      	lsls	r2, r2, #19
    800c:	4314      	orrs	r4, r2
    800e:	227f      	movs	r2, #127	; 0x7f
    8010:	4252      	negs	r2, r2
    8012:	4690      	mov	r8, r2
    8014:	4498      	add	r8, r3
    8016:	2300      	movs	r3, #0
    8018:	4699      	mov	r9, r3
    801a:	469b      	mov	fp, r3
    801c:	027d      	lsls	r5, r7, #9
    801e:	0078      	lsls	r0, r7, #1
    8020:	0ffb      	lsrs	r3, r7, #31
    8022:	0a6d      	lsrs	r5, r5, #9
    8024:	0e00      	lsrs	r0, r0, #24
    8026:	9300      	str	r3, [sp, #0]
    8028:	d024      	beq.n	8074 <__aeabi_fdiv+0x90>
    802a:	28ff      	cmp	r0, #255	; 0xff
    802c:	d046      	beq.n	80bc <__aeabi_fdiv+0xd8>
    802e:	2380      	movs	r3, #128	; 0x80
    8030:	2100      	movs	r1, #0
    8032:	00ed      	lsls	r5, r5, #3
    8034:	04db      	lsls	r3, r3, #19
    8036:	431d      	orrs	r5, r3
    8038:	387f      	subs	r0, #127	; 0x7f
    803a:	4647      	mov	r7, r8
    803c:	1a38      	subs	r0, r7, r0
    803e:	464f      	mov	r7, r9
    8040:	430f      	orrs	r7, r1
    8042:	00bf      	lsls	r7, r7, #2
    8044:	46b9      	mov	r9, r7
    8046:	0033      	movs	r3, r6
    8048:	9a00      	ldr	r2, [sp, #0]
    804a:	4f87      	ldr	r7, [pc, #540]	; (8268 <__aeabi_fdiv+0x284>)
    804c:	4053      	eors	r3, r2
    804e:	464a      	mov	r2, r9
    8050:	58ba      	ldr	r2, [r7, r2]
    8052:	9301      	str	r3, [sp, #4]
    8054:	4697      	mov	pc, r2
    8056:	2c00      	cmp	r4, #0
    8058:	d14e      	bne.n	80f8 <__aeabi_fdiv+0x114>
    805a:	2308      	movs	r3, #8
    805c:	4699      	mov	r9, r3
    805e:	33f7      	adds	r3, #247	; 0xf7
    8060:	4698      	mov	r8, r3
    8062:	3bfd      	subs	r3, #253	; 0xfd
    8064:	469b      	mov	fp, r3
    8066:	027d      	lsls	r5, r7, #9
    8068:	0078      	lsls	r0, r7, #1
    806a:	0ffb      	lsrs	r3, r7, #31
    806c:	0a6d      	lsrs	r5, r5, #9
    806e:	0e00      	lsrs	r0, r0, #24
    8070:	9300      	str	r3, [sp, #0]
    8072:	d1da      	bne.n	802a <__aeabi_fdiv+0x46>
    8074:	2d00      	cmp	r5, #0
    8076:	d126      	bne.n	80c6 <__aeabi_fdiv+0xe2>
    8078:	2000      	movs	r0, #0
    807a:	2101      	movs	r1, #1
    807c:	0033      	movs	r3, r6
    807e:	9a00      	ldr	r2, [sp, #0]
    8080:	4f7a      	ldr	r7, [pc, #488]	; (826c <__aeabi_fdiv+0x288>)
    8082:	4053      	eors	r3, r2
    8084:	4642      	mov	r2, r8
    8086:	1a10      	subs	r0, r2, r0
    8088:	464a      	mov	r2, r9
    808a:	430a      	orrs	r2, r1
    808c:	0092      	lsls	r2, r2, #2
    808e:	58ba      	ldr	r2, [r7, r2]
    8090:	001d      	movs	r5, r3
    8092:	4697      	mov	pc, r2
    8094:	9b00      	ldr	r3, [sp, #0]
    8096:	002c      	movs	r4, r5
    8098:	469a      	mov	sl, r3
    809a:	468b      	mov	fp, r1
    809c:	465b      	mov	r3, fp
    809e:	2b02      	cmp	r3, #2
    80a0:	d131      	bne.n	8106 <__aeabi_fdiv+0x122>
    80a2:	4653      	mov	r3, sl
    80a4:	21ff      	movs	r1, #255	; 0xff
    80a6:	2400      	movs	r4, #0
    80a8:	e038      	b.n	811c <__aeabi_fdiv+0x138>
    80aa:	2c00      	cmp	r4, #0
    80ac:	d117      	bne.n	80de <__aeabi_fdiv+0xfa>
    80ae:	2304      	movs	r3, #4
    80b0:	4699      	mov	r9, r3
    80b2:	2300      	movs	r3, #0
    80b4:	4698      	mov	r8, r3
    80b6:	3301      	adds	r3, #1
    80b8:	469b      	mov	fp, r3
    80ba:	e7af      	b.n	801c <__aeabi_fdiv+0x38>
    80bc:	20ff      	movs	r0, #255	; 0xff
    80be:	2d00      	cmp	r5, #0
    80c0:	d10b      	bne.n	80da <__aeabi_fdiv+0xf6>
    80c2:	2102      	movs	r1, #2
    80c4:	e7da      	b.n	807c <__aeabi_fdiv+0x98>
    80c6:	0028      	movs	r0, r5
    80c8:	f002 f970 	bl	a3ac <__clzsi2>
    80cc:	1f43      	subs	r3, r0, #5
    80ce:	409d      	lsls	r5, r3
    80d0:	2376      	movs	r3, #118	; 0x76
    80d2:	425b      	negs	r3, r3
    80d4:	1a18      	subs	r0, r3, r0
    80d6:	2100      	movs	r1, #0
    80d8:	e7af      	b.n	803a <__aeabi_fdiv+0x56>
    80da:	2103      	movs	r1, #3
    80dc:	e7ad      	b.n	803a <__aeabi_fdiv+0x56>
    80de:	0020      	movs	r0, r4
    80e0:	f002 f964 	bl	a3ac <__clzsi2>
    80e4:	1f43      	subs	r3, r0, #5
    80e6:	409c      	lsls	r4, r3
    80e8:	2376      	movs	r3, #118	; 0x76
    80ea:	425b      	negs	r3, r3
    80ec:	1a1b      	subs	r3, r3, r0
    80ee:	4698      	mov	r8, r3
    80f0:	2300      	movs	r3, #0
    80f2:	4699      	mov	r9, r3
    80f4:	469b      	mov	fp, r3
    80f6:	e791      	b.n	801c <__aeabi_fdiv+0x38>
    80f8:	230c      	movs	r3, #12
    80fa:	4699      	mov	r9, r3
    80fc:	33f3      	adds	r3, #243	; 0xf3
    80fe:	4698      	mov	r8, r3
    8100:	3bfc      	subs	r3, #252	; 0xfc
    8102:	469b      	mov	fp, r3
    8104:	e78a      	b.n	801c <__aeabi_fdiv+0x38>
    8106:	2b03      	cmp	r3, #3
    8108:	d100      	bne.n	810c <__aeabi_fdiv+0x128>
    810a:	e0a5      	b.n	8258 <__aeabi_fdiv+0x274>
    810c:	4655      	mov	r5, sl
    810e:	2b01      	cmp	r3, #1
    8110:	d000      	beq.n	8114 <__aeabi_fdiv+0x130>
    8112:	e081      	b.n	8218 <__aeabi_fdiv+0x234>
    8114:	2301      	movs	r3, #1
    8116:	2100      	movs	r1, #0
    8118:	2400      	movs	r4, #0
    811a:	402b      	ands	r3, r5
    811c:	0264      	lsls	r4, r4, #9
    811e:	05c9      	lsls	r1, r1, #23
    8120:	0a60      	lsrs	r0, r4, #9
    8122:	07db      	lsls	r3, r3, #31
    8124:	4308      	orrs	r0, r1
    8126:	4318      	orrs	r0, r3
    8128:	b003      	add	sp, #12
    812a:	bc3c      	pop	{r2, r3, r4, r5}
    812c:	4690      	mov	r8, r2
    812e:	4699      	mov	r9, r3
    8130:	46a2      	mov	sl, r4
    8132:	46ab      	mov	fp, r5
    8134:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8136:	2480      	movs	r4, #128	; 0x80
    8138:	2300      	movs	r3, #0
    813a:	03e4      	lsls	r4, r4, #15
    813c:	21ff      	movs	r1, #255	; 0xff
    813e:	e7ed      	b.n	811c <__aeabi_fdiv+0x138>
    8140:	21ff      	movs	r1, #255	; 0xff
    8142:	2400      	movs	r4, #0
    8144:	e7ea      	b.n	811c <__aeabi_fdiv+0x138>
    8146:	2301      	movs	r3, #1
    8148:	1a59      	subs	r1, r3, r1
    814a:	291b      	cmp	r1, #27
    814c:	dd66      	ble.n	821c <__aeabi_fdiv+0x238>
    814e:	9a01      	ldr	r2, [sp, #4]
    8150:	4013      	ands	r3, r2
    8152:	2100      	movs	r1, #0
    8154:	2400      	movs	r4, #0
    8156:	e7e1      	b.n	811c <__aeabi_fdiv+0x138>
    8158:	2380      	movs	r3, #128	; 0x80
    815a:	03db      	lsls	r3, r3, #15
    815c:	421c      	tst	r4, r3
    815e:	d038      	beq.n	81d2 <__aeabi_fdiv+0x1ee>
    8160:	421d      	tst	r5, r3
    8162:	d051      	beq.n	8208 <__aeabi_fdiv+0x224>
    8164:	431c      	orrs	r4, r3
    8166:	0264      	lsls	r4, r4, #9
    8168:	0a64      	lsrs	r4, r4, #9
    816a:	0033      	movs	r3, r6
    816c:	21ff      	movs	r1, #255	; 0xff
    816e:	e7d5      	b.n	811c <__aeabi_fdiv+0x138>
    8170:	0163      	lsls	r3, r4, #5
    8172:	016c      	lsls	r4, r5, #5
    8174:	42a3      	cmp	r3, r4
    8176:	d23b      	bcs.n	81f0 <__aeabi_fdiv+0x20c>
    8178:	261b      	movs	r6, #27
    817a:	2100      	movs	r1, #0
    817c:	3801      	subs	r0, #1
    817e:	2501      	movs	r5, #1
    8180:	001f      	movs	r7, r3
    8182:	0049      	lsls	r1, r1, #1
    8184:	005b      	lsls	r3, r3, #1
    8186:	2f00      	cmp	r7, #0
    8188:	db01      	blt.n	818e <__aeabi_fdiv+0x1aa>
    818a:	429c      	cmp	r4, r3
    818c:	d801      	bhi.n	8192 <__aeabi_fdiv+0x1ae>
    818e:	1b1b      	subs	r3, r3, r4
    8190:	4329      	orrs	r1, r5
    8192:	3e01      	subs	r6, #1
    8194:	2e00      	cmp	r6, #0
    8196:	d1f3      	bne.n	8180 <__aeabi_fdiv+0x19c>
    8198:	001c      	movs	r4, r3
    819a:	1e63      	subs	r3, r4, #1
    819c:	419c      	sbcs	r4, r3
    819e:	430c      	orrs	r4, r1
    81a0:	0001      	movs	r1, r0
    81a2:	317f      	adds	r1, #127	; 0x7f
    81a4:	2900      	cmp	r1, #0
    81a6:	ddce      	ble.n	8146 <__aeabi_fdiv+0x162>
    81a8:	0763      	lsls	r3, r4, #29
    81aa:	d004      	beq.n	81b6 <__aeabi_fdiv+0x1d2>
    81ac:	230f      	movs	r3, #15
    81ae:	4023      	ands	r3, r4
    81b0:	2b04      	cmp	r3, #4
    81b2:	d000      	beq.n	81b6 <__aeabi_fdiv+0x1d2>
    81b4:	3404      	adds	r4, #4
    81b6:	0123      	lsls	r3, r4, #4
    81b8:	d503      	bpl.n	81c2 <__aeabi_fdiv+0x1de>
    81ba:	0001      	movs	r1, r0
    81bc:	4b2c      	ldr	r3, [pc, #176]	; (8270 <__aeabi_fdiv+0x28c>)
    81be:	3180      	adds	r1, #128	; 0x80
    81c0:	401c      	ands	r4, r3
    81c2:	29fe      	cmp	r1, #254	; 0xfe
    81c4:	dd0d      	ble.n	81e2 <__aeabi_fdiv+0x1fe>
    81c6:	2301      	movs	r3, #1
    81c8:	9a01      	ldr	r2, [sp, #4]
    81ca:	21ff      	movs	r1, #255	; 0xff
    81cc:	4013      	ands	r3, r2
    81ce:	2400      	movs	r4, #0
    81d0:	e7a4      	b.n	811c <__aeabi_fdiv+0x138>
    81d2:	2380      	movs	r3, #128	; 0x80
    81d4:	03db      	lsls	r3, r3, #15
    81d6:	431c      	orrs	r4, r3
    81d8:	0264      	lsls	r4, r4, #9
    81da:	0a64      	lsrs	r4, r4, #9
    81dc:	0033      	movs	r3, r6
    81de:	21ff      	movs	r1, #255	; 0xff
    81e0:	e79c      	b.n	811c <__aeabi_fdiv+0x138>
    81e2:	2301      	movs	r3, #1
    81e4:	9a01      	ldr	r2, [sp, #4]
    81e6:	01a4      	lsls	r4, r4, #6
    81e8:	0a64      	lsrs	r4, r4, #9
    81ea:	b2c9      	uxtb	r1, r1
    81ec:	4013      	ands	r3, r2
    81ee:	e795      	b.n	811c <__aeabi_fdiv+0x138>
    81f0:	1b1b      	subs	r3, r3, r4
    81f2:	261a      	movs	r6, #26
    81f4:	2101      	movs	r1, #1
    81f6:	e7c2      	b.n	817e <__aeabi_fdiv+0x19a>
    81f8:	9b00      	ldr	r3, [sp, #0]
    81fa:	468b      	mov	fp, r1
    81fc:	469a      	mov	sl, r3
    81fe:	2400      	movs	r4, #0
    8200:	e74c      	b.n	809c <__aeabi_fdiv+0xb8>
    8202:	0263      	lsls	r3, r4, #9
    8204:	d5e5      	bpl.n	81d2 <__aeabi_fdiv+0x1ee>
    8206:	2500      	movs	r5, #0
    8208:	2480      	movs	r4, #128	; 0x80
    820a:	03e4      	lsls	r4, r4, #15
    820c:	432c      	orrs	r4, r5
    820e:	0264      	lsls	r4, r4, #9
    8210:	0a64      	lsrs	r4, r4, #9
    8212:	9b00      	ldr	r3, [sp, #0]
    8214:	21ff      	movs	r1, #255	; 0xff
    8216:	e781      	b.n	811c <__aeabi_fdiv+0x138>
    8218:	9501      	str	r5, [sp, #4]
    821a:	e7c1      	b.n	81a0 <__aeabi_fdiv+0x1bc>
    821c:	0023      	movs	r3, r4
    821e:	2020      	movs	r0, #32
    8220:	40cb      	lsrs	r3, r1
    8222:	1a41      	subs	r1, r0, r1
    8224:	408c      	lsls	r4, r1
    8226:	1e61      	subs	r1, r4, #1
    8228:	418c      	sbcs	r4, r1
    822a:	431c      	orrs	r4, r3
    822c:	0763      	lsls	r3, r4, #29
    822e:	d004      	beq.n	823a <__aeabi_fdiv+0x256>
    8230:	230f      	movs	r3, #15
    8232:	4023      	ands	r3, r4
    8234:	2b04      	cmp	r3, #4
    8236:	d000      	beq.n	823a <__aeabi_fdiv+0x256>
    8238:	3404      	adds	r4, #4
    823a:	0163      	lsls	r3, r4, #5
    823c:	d505      	bpl.n	824a <__aeabi_fdiv+0x266>
    823e:	2301      	movs	r3, #1
    8240:	9a01      	ldr	r2, [sp, #4]
    8242:	2101      	movs	r1, #1
    8244:	4013      	ands	r3, r2
    8246:	2400      	movs	r4, #0
    8248:	e768      	b.n	811c <__aeabi_fdiv+0x138>
    824a:	2301      	movs	r3, #1
    824c:	9a01      	ldr	r2, [sp, #4]
    824e:	01a4      	lsls	r4, r4, #6
    8250:	0a64      	lsrs	r4, r4, #9
    8252:	4013      	ands	r3, r2
    8254:	2100      	movs	r1, #0
    8256:	e761      	b.n	811c <__aeabi_fdiv+0x138>
    8258:	2380      	movs	r3, #128	; 0x80
    825a:	03db      	lsls	r3, r3, #15
    825c:	431c      	orrs	r4, r3
    825e:	0264      	lsls	r4, r4, #9
    8260:	0a64      	lsrs	r4, r4, #9
    8262:	4653      	mov	r3, sl
    8264:	21ff      	movs	r1, #255	; 0xff
    8266:	e759      	b.n	811c <__aeabi_fdiv+0x138>
    8268:	0000a7c8 	.word	0x0000a7c8
    826c:	0000a808 	.word	0x0000a808
    8270:	f7ffffff 	.word	0xf7ffffff

00008274 <__eqsf2>:
    8274:	b570      	push	{r4, r5, r6, lr}
    8276:	0042      	lsls	r2, r0, #1
    8278:	0245      	lsls	r5, r0, #9
    827a:	024e      	lsls	r6, r1, #9
    827c:	004c      	lsls	r4, r1, #1
    827e:	0fc3      	lsrs	r3, r0, #31
    8280:	0a6d      	lsrs	r5, r5, #9
    8282:	0e12      	lsrs	r2, r2, #24
    8284:	0a76      	lsrs	r6, r6, #9
    8286:	0e24      	lsrs	r4, r4, #24
    8288:	0fc9      	lsrs	r1, r1, #31
    828a:	2001      	movs	r0, #1
    828c:	2aff      	cmp	r2, #255	; 0xff
    828e:	d006      	beq.n	829e <__eqsf2+0x2a>
    8290:	2cff      	cmp	r4, #255	; 0xff
    8292:	d003      	beq.n	829c <__eqsf2+0x28>
    8294:	42a2      	cmp	r2, r4
    8296:	d101      	bne.n	829c <__eqsf2+0x28>
    8298:	42b5      	cmp	r5, r6
    829a:	d006      	beq.n	82aa <__eqsf2+0x36>
    829c:	bd70      	pop	{r4, r5, r6, pc}
    829e:	2d00      	cmp	r5, #0
    82a0:	d1fc      	bne.n	829c <__eqsf2+0x28>
    82a2:	2cff      	cmp	r4, #255	; 0xff
    82a4:	d1fa      	bne.n	829c <__eqsf2+0x28>
    82a6:	2e00      	cmp	r6, #0
    82a8:	d1f8      	bne.n	829c <__eqsf2+0x28>
    82aa:	428b      	cmp	r3, r1
    82ac:	d006      	beq.n	82bc <__eqsf2+0x48>
    82ae:	2001      	movs	r0, #1
    82b0:	2a00      	cmp	r2, #0
    82b2:	d1f3      	bne.n	829c <__eqsf2+0x28>
    82b4:	0028      	movs	r0, r5
    82b6:	1e45      	subs	r5, r0, #1
    82b8:	41a8      	sbcs	r0, r5
    82ba:	e7ef      	b.n	829c <__eqsf2+0x28>
    82bc:	2000      	movs	r0, #0
    82be:	e7ed      	b.n	829c <__eqsf2+0x28>

000082c0 <__gesf2>:
    82c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    82c2:	0042      	lsls	r2, r0, #1
    82c4:	0245      	lsls	r5, r0, #9
    82c6:	024c      	lsls	r4, r1, #9
    82c8:	0fc3      	lsrs	r3, r0, #31
    82ca:	0048      	lsls	r0, r1, #1
    82cc:	0a6d      	lsrs	r5, r5, #9
    82ce:	0e12      	lsrs	r2, r2, #24
    82d0:	0a64      	lsrs	r4, r4, #9
    82d2:	0e00      	lsrs	r0, r0, #24
    82d4:	0fc9      	lsrs	r1, r1, #31
    82d6:	2aff      	cmp	r2, #255	; 0xff
    82d8:	d01e      	beq.n	8318 <__gesf2+0x58>
    82da:	28ff      	cmp	r0, #255	; 0xff
    82dc:	d021      	beq.n	8322 <__gesf2+0x62>
    82de:	2a00      	cmp	r2, #0
    82e0:	d10a      	bne.n	82f8 <__gesf2+0x38>
    82e2:	426e      	negs	r6, r5
    82e4:	416e      	adcs	r6, r5
    82e6:	b2f6      	uxtb	r6, r6
    82e8:	2800      	cmp	r0, #0
    82ea:	d10f      	bne.n	830c <__gesf2+0x4c>
    82ec:	2c00      	cmp	r4, #0
    82ee:	d10d      	bne.n	830c <__gesf2+0x4c>
    82f0:	2000      	movs	r0, #0
    82f2:	2d00      	cmp	r5, #0
    82f4:	d009      	beq.n	830a <__gesf2+0x4a>
    82f6:	e005      	b.n	8304 <__gesf2+0x44>
    82f8:	2800      	cmp	r0, #0
    82fa:	d101      	bne.n	8300 <__gesf2+0x40>
    82fc:	2c00      	cmp	r4, #0
    82fe:	d001      	beq.n	8304 <__gesf2+0x44>
    8300:	428b      	cmp	r3, r1
    8302:	d011      	beq.n	8328 <__gesf2+0x68>
    8304:	2101      	movs	r1, #1
    8306:	4258      	negs	r0, r3
    8308:	4308      	orrs	r0, r1
    830a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    830c:	2e00      	cmp	r6, #0
    830e:	d0f7      	beq.n	8300 <__gesf2+0x40>
    8310:	2001      	movs	r0, #1
    8312:	3901      	subs	r1, #1
    8314:	4308      	orrs	r0, r1
    8316:	e7f8      	b.n	830a <__gesf2+0x4a>
    8318:	2d00      	cmp	r5, #0
    831a:	d0de      	beq.n	82da <__gesf2+0x1a>
    831c:	2002      	movs	r0, #2
    831e:	4240      	negs	r0, r0
    8320:	e7f3      	b.n	830a <__gesf2+0x4a>
    8322:	2c00      	cmp	r4, #0
    8324:	d0db      	beq.n	82de <__gesf2+0x1e>
    8326:	e7f9      	b.n	831c <__gesf2+0x5c>
    8328:	4282      	cmp	r2, r0
    832a:	dceb      	bgt.n	8304 <__gesf2+0x44>
    832c:	db04      	blt.n	8338 <__gesf2+0x78>
    832e:	42a5      	cmp	r5, r4
    8330:	d8e8      	bhi.n	8304 <__gesf2+0x44>
    8332:	2000      	movs	r0, #0
    8334:	42a5      	cmp	r5, r4
    8336:	d2e8      	bcs.n	830a <__gesf2+0x4a>
    8338:	2101      	movs	r1, #1
    833a:	1e58      	subs	r0, r3, #1
    833c:	4308      	orrs	r0, r1
    833e:	e7e4      	b.n	830a <__gesf2+0x4a>

00008340 <__lesf2>:
    8340:	b5f0      	push	{r4, r5, r6, r7, lr}
    8342:	0042      	lsls	r2, r0, #1
    8344:	024d      	lsls	r5, r1, #9
    8346:	004c      	lsls	r4, r1, #1
    8348:	0246      	lsls	r6, r0, #9
    834a:	0a76      	lsrs	r6, r6, #9
    834c:	0e12      	lsrs	r2, r2, #24
    834e:	0fc3      	lsrs	r3, r0, #31
    8350:	0a6d      	lsrs	r5, r5, #9
    8352:	0e24      	lsrs	r4, r4, #24
    8354:	0fc9      	lsrs	r1, r1, #31
    8356:	2aff      	cmp	r2, #255	; 0xff
    8358:	d016      	beq.n	8388 <__lesf2+0x48>
    835a:	2cff      	cmp	r4, #255	; 0xff
    835c:	d018      	beq.n	8390 <__lesf2+0x50>
    835e:	2a00      	cmp	r2, #0
    8360:	d10a      	bne.n	8378 <__lesf2+0x38>
    8362:	4270      	negs	r0, r6
    8364:	4170      	adcs	r0, r6
    8366:	b2c0      	uxtb	r0, r0
    8368:	2c00      	cmp	r4, #0
    836a:	d015      	beq.n	8398 <__lesf2+0x58>
    836c:	2800      	cmp	r0, #0
    836e:	d005      	beq.n	837c <__lesf2+0x3c>
    8370:	2001      	movs	r0, #1
    8372:	3901      	subs	r1, #1
    8374:	4308      	orrs	r0, r1
    8376:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8378:	2c00      	cmp	r4, #0
    837a:	d013      	beq.n	83a4 <__lesf2+0x64>
    837c:	4299      	cmp	r1, r3
    837e:	d014      	beq.n	83aa <__lesf2+0x6a>
    8380:	2001      	movs	r0, #1
    8382:	425b      	negs	r3, r3
    8384:	4318      	orrs	r0, r3
    8386:	e7f6      	b.n	8376 <__lesf2+0x36>
    8388:	2002      	movs	r0, #2
    838a:	2e00      	cmp	r6, #0
    838c:	d1f3      	bne.n	8376 <__lesf2+0x36>
    838e:	e7e4      	b.n	835a <__lesf2+0x1a>
    8390:	2002      	movs	r0, #2
    8392:	2d00      	cmp	r5, #0
    8394:	d1ef      	bne.n	8376 <__lesf2+0x36>
    8396:	e7e2      	b.n	835e <__lesf2+0x1e>
    8398:	2d00      	cmp	r5, #0
    839a:	d1e7      	bne.n	836c <__lesf2+0x2c>
    839c:	2000      	movs	r0, #0
    839e:	2e00      	cmp	r6, #0
    83a0:	d0e9      	beq.n	8376 <__lesf2+0x36>
    83a2:	e7ed      	b.n	8380 <__lesf2+0x40>
    83a4:	2d00      	cmp	r5, #0
    83a6:	d1e9      	bne.n	837c <__lesf2+0x3c>
    83a8:	e7ea      	b.n	8380 <__lesf2+0x40>
    83aa:	42a2      	cmp	r2, r4
    83ac:	dc06      	bgt.n	83bc <__lesf2+0x7c>
    83ae:	dbdf      	blt.n	8370 <__lesf2+0x30>
    83b0:	42ae      	cmp	r6, r5
    83b2:	d803      	bhi.n	83bc <__lesf2+0x7c>
    83b4:	2000      	movs	r0, #0
    83b6:	42ae      	cmp	r6, r5
    83b8:	d3da      	bcc.n	8370 <__lesf2+0x30>
    83ba:	e7dc      	b.n	8376 <__lesf2+0x36>
    83bc:	2001      	movs	r0, #1
    83be:	4249      	negs	r1, r1
    83c0:	4308      	orrs	r0, r1
    83c2:	e7d8      	b.n	8376 <__lesf2+0x36>

000083c4 <__aeabi_fmul>:
    83c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    83c6:	4657      	mov	r7, sl
    83c8:	464e      	mov	r6, r9
    83ca:	4645      	mov	r5, r8
    83cc:	46de      	mov	lr, fp
    83ce:	b5e0      	push	{r5, r6, r7, lr}
    83d0:	0247      	lsls	r7, r0, #9
    83d2:	0046      	lsls	r6, r0, #1
    83d4:	4688      	mov	r8, r1
    83d6:	0a7f      	lsrs	r7, r7, #9
    83d8:	0e36      	lsrs	r6, r6, #24
    83da:	0fc4      	lsrs	r4, r0, #31
    83dc:	2e00      	cmp	r6, #0
    83de:	d047      	beq.n	8470 <__aeabi_fmul+0xac>
    83e0:	2eff      	cmp	r6, #255	; 0xff
    83e2:	d024      	beq.n	842e <__aeabi_fmul+0x6a>
    83e4:	00fb      	lsls	r3, r7, #3
    83e6:	2780      	movs	r7, #128	; 0x80
    83e8:	04ff      	lsls	r7, r7, #19
    83ea:	431f      	orrs	r7, r3
    83ec:	2300      	movs	r3, #0
    83ee:	4699      	mov	r9, r3
    83f0:	469a      	mov	sl, r3
    83f2:	3e7f      	subs	r6, #127	; 0x7f
    83f4:	4643      	mov	r3, r8
    83f6:	025d      	lsls	r5, r3, #9
    83f8:	0058      	lsls	r0, r3, #1
    83fa:	0fdb      	lsrs	r3, r3, #31
    83fc:	0a6d      	lsrs	r5, r5, #9
    83fe:	0e00      	lsrs	r0, r0, #24
    8400:	4698      	mov	r8, r3
    8402:	d043      	beq.n	848c <__aeabi_fmul+0xc8>
    8404:	28ff      	cmp	r0, #255	; 0xff
    8406:	d03b      	beq.n	8480 <__aeabi_fmul+0xbc>
    8408:	00eb      	lsls	r3, r5, #3
    840a:	2580      	movs	r5, #128	; 0x80
    840c:	2200      	movs	r2, #0
    840e:	04ed      	lsls	r5, r5, #19
    8410:	431d      	orrs	r5, r3
    8412:	387f      	subs	r0, #127	; 0x7f
    8414:	1836      	adds	r6, r6, r0
    8416:	1c73      	adds	r3, r6, #1
    8418:	4641      	mov	r1, r8
    841a:	469b      	mov	fp, r3
    841c:	464b      	mov	r3, r9
    841e:	4061      	eors	r1, r4
    8420:	4313      	orrs	r3, r2
    8422:	2b0f      	cmp	r3, #15
    8424:	d864      	bhi.n	84f0 <__aeabi_fmul+0x12c>
    8426:	4875      	ldr	r0, [pc, #468]	; (85fc <__aeabi_fmul+0x238>)
    8428:	009b      	lsls	r3, r3, #2
    842a:	58c3      	ldr	r3, [r0, r3]
    842c:	469f      	mov	pc, r3
    842e:	2f00      	cmp	r7, #0
    8430:	d142      	bne.n	84b8 <__aeabi_fmul+0xf4>
    8432:	2308      	movs	r3, #8
    8434:	4699      	mov	r9, r3
    8436:	3b06      	subs	r3, #6
    8438:	26ff      	movs	r6, #255	; 0xff
    843a:	469a      	mov	sl, r3
    843c:	e7da      	b.n	83f4 <__aeabi_fmul+0x30>
    843e:	4641      	mov	r1, r8
    8440:	2a02      	cmp	r2, #2
    8442:	d028      	beq.n	8496 <__aeabi_fmul+0xd2>
    8444:	2a03      	cmp	r2, #3
    8446:	d100      	bne.n	844a <__aeabi_fmul+0x86>
    8448:	e0ce      	b.n	85e8 <__aeabi_fmul+0x224>
    844a:	2a01      	cmp	r2, #1
    844c:	d000      	beq.n	8450 <__aeabi_fmul+0x8c>
    844e:	e0ac      	b.n	85aa <__aeabi_fmul+0x1e6>
    8450:	4011      	ands	r1, r2
    8452:	2000      	movs	r0, #0
    8454:	2200      	movs	r2, #0
    8456:	b2cc      	uxtb	r4, r1
    8458:	0240      	lsls	r0, r0, #9
    845a:	05d2      	lsls	r2, r2, #23
    845c:	0a40      	lsrs	r0, r0, #9
    845e:	07e4      	lsls	r4, r4, #31
    8460:	4310      	orrs	r0, r2
    8462:	4320      	orrs	r0, r4
    8464:	bc3c      	pop	{r2, r3, r4, r5}
    8466:	4690      	mov	r8, r2
    8468:	4699      	mov	r9, r3
    846a:	46a2      	mov	sl, r4
    846c:	46ab      	mov	fp, r5
    846e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8470:	2f00      	cmp	r7, #0
    8472:	d115      	bne.n	84a0 <__aeabi_fmul+0xdc>
    8474:	2304      	movs	r3, #4
    8476:	4699      	mov	r9, r3
    8478:	3b03      	subs	r3, #3
    847a:	2600      	movs	r6, #0
    847c:	469a      	mov	sl, r3
    847e:	e7b9      	b.n	83f4 <__aeabi_fmul+0x30>
    8480:	20ff      	movs	r0, #255	; 0xff
    8482:	2202      	movs	r2, #2
    8484:	2d00      	cmp	r5, #0
    8486:	d0c5      	beq.n	8414 <__aeabi_fmul+0x50>
    8488:	2203      	movs	r2, #3
    848a:	e7c3      	b.n	8414 <__aeabi_fmul+0x50>
    848c:	2d00      	cmp	r5, #0
    848e:	d119      	bne.n	84c4 <__aeabi_fmul+0x100>
    8490:	2000      	movs	r0, #0
    8492:	2201      	movs	r2, #1
    8494:	e7be      	b.n	8414 <__aeabi_fmul+0x50>
    8496:	2401      	movs	r4, #1
    8498:	22ff      	movs	r2, #255	; 0xff
    849a:	400c      	ands	r4, r1
    849c:	2000      	movs	r0, #0
    849e:	e7db      	b.n	8458 <__aeabi_fmul+0x94>
    84a0:	0038      	movs	r0, r7
    84a2:	f001 ff83 	bl	a3ac <__clzsi2>
    84a6:	2676      	movs	r6, #118	; 0x76
    84a8:	1f43      	subs	r3, r0, #5
    84aa:	409f      	lsls	r7, r3
    84ac:	2300      	movs	r3, #0
    84ae:	4276      	negs	r6, r6
    84b0:	1a36      	subs	r6, r6, r0
    84b2:	4699      	mov	r9, r3
    84b4:	469a      	mov	sl, r3
    84b6:	e79d      	b.n	83f4 <__aeabi_fmul+0x30>
    84b8:	230c      	movs	r3, #12
    84ba:	4699      	mov	r9, r3
    84bc:	3b09      	subs	r3, #9
    84be:	26ff      	movs	r6, #255	; 0xff
    84c0:	469a      	mov	sl, r3
    84c2:	e797      	b.n	83f4 <__aeabi_fmul+0x30>
    84c4:	0028      	movs	r0, r5
    84c6:	f001 ff71 	bl	a3ac <__clzsi2>
    84ca:	1f43      	subs	r3, r0, #5
    84cc:	409d      	lsls	r5, r3
    84ce:	2376      	movs	r3, #118	; 0x76
    84d0:	425b      	negs	r3, r3
    84d2:	1a18      	subs	r0, r3, r0
    84d4:	2200      	movs	r2, #0
    84d6:	e79d      	b.n	8414 <__aeabi_fmul+0x50>
    84d8:	2080      	movs	r0, #128	; 0x80
    84da:	2400      	movs	r4, #0
    84dc:	03c0      	lsls	r0, r0, #15
    84de:	22ff      	movs	r2, #255	; 0xff
    84e0:	e7ba      	b.n	8458 <__aeabi_fmul+0x94>
    84e2:	003d      	movs	r5, r7
    84e4:	4652      	mov	r2, sl
    84e6:	e7ab      	b.n	8440 <__aeabi_fmul+0x7c>
    84e8:	003d      	movs	r5, r7
    84ea:	0021      	movs	r1, r4
    84ec:	4652      	mov	r2, sl
    84ee:	e7a7      	b.n	8440 <__aeabi_fmul+0x7c>
    84f0:	0c3b      	lsrs	r3, r7, #16
    84f2:	469c      	mov	ip, r3
    84f4:	042a      	lsls	r2, r5, #16
    84f6:	0c12      	lsrs	r2, r2, #16
    84f8:	0c2b      	lsrs	r3, r5, #16
    84fa:	0014      	movs	r4, r2
    84fc:	4660      	mov	r0, ip
    84fe:	4665      	mov	r5, ip
    8500:	043f      	lsls	r7, r7, #16
    8502:	0c3f      	lsrs	r7, r7, #16
    8504:	437c      	muls	r4, r7
    8506:	4342      	muls	r2, r0
    8508:	435d      	muls	r5, r3
    850a:	437b      	muls	r3, r7
    850c:	0c27      	lsrs	r7, r4, #16
    850e:	189b      	adds	r3, r3, r2
    8510:	18ff      	adds	r7, r7, r3
    8512:	42ba      	cmp	r2, r7
    8514:	d903      	bls.n	851e <__aeabi_fmul+0x15a>
    8516:	2380      	movs	r3, #128	; 0x80
    8518:	025b      	lsls	r3, r3, #9
    851a:	469c      	mov	ip, r3
    851c:	4465      	add	r5, ip
    851e:	0424      	lsls	r4, r4, #16
    8520:	043a      	lsls	r2, r7, #16
    8522:	0c24      	lsrs	r4, r4, #16
    8524:	1912      	adds	r2, r2, r4
    8526:	0193      	lsls	r3, r2, #6
    8528:	1e5c      	subs	r4, r3, #1
    852a:	41a3      	sbcs	r3, r4
    852c:	0c3f      	lsrs	r7, r7, #16
    852e:	0e92      	lsrs	r2, r2, #26
    8530:	197d      	adds	r5, r7, r5
    8532:	431a      	orrs	r2, r3
    8534:	01ad      	lsls	r5, r5, #6
    8536:	4315      	orrs	r5, r2
    8538:	012b      	lsls	r3, r5, #4
    853a:	d504      	bpl.n	8546 <__aeabi_fmul+0x182>
    853c:	2301      	movs	r3, #1
    853e:	465e      	mov	r6, fp
    8540:	086a      	lsrs	r2, r5, #1
    8542:	401d      	ands	r5, r3
    8544:	4315      	orrs	r5, r2
    8546:	0032      	movs	r2, r6
    8548:	327f      	adds	r2, #127	; 0x7f
    854a:	2a00      	cmp	r2, #0
    854c:	dd25      	ble.n	859a <__aeabi_fmul+0x1d6>
    854e:	076b      	lsls	r3, r5, #29
    8550:	d004      	beq.n	855c <__aeabi_fmul+0x198>
    8552:	230f      	movs	r3, #15
    8554:	402b      	ands	r3, r5
    8556:	2b04      	cmp	r3, #4
    8558:	d000      	beq.n	855c <__aeabi_fmul+0x198>
    855a:	3504      	adds	r5, #4
    855c:	012b      	lsls	r3, r5, #4
    855e:	d503      	bpl.n	8568 <__aeabi_fmul+0x1a4>
    8560:	0032      	movs	r2, r6
    8562:	4b27      	ldr	r3, [pc, #156]	; (8600 <__aeabi_fmul+0x23c>)
    8564:	3280      	adds	r2, #128	; 0x80
    8566:	401d      	ands	r5, r3
    8568:	2afe      	cmp	r2, #254	; 0xfe
    856a:	dc94      	bgt.n	8496 <__aeabi_fmul+0xd2>
    856c:	2401      	movs	r4, #1
    856e:	01a8      	lsls	r0, r5, #6
    8570:	0a40      	lsrs	r0, r0, #9
    8572:	b2d2      	uxtb	r2, r2
    8574:	400c      	ands	r4, r1
    8576:	e76f      	b.n	8458 <__aeabi_fmul+0x94>
    8578:	2080      	movs	r0, #128	; 0x80
    857a:	03c0      	lsls	r0, r0, #15
    857c:	4207      	tst	r7, r0
    857e:	d007      	beq.n	8590 <__aeabi_fmul+0x1cc>
    8580:	4205      	tst	r5, r0
    8582:	d105      	bne.n	8590 <__aeabi_fmul+0x1cc>
    8584:	4328      	orrs	r0, r5
    8586:	0240      	lsls	r0, r0, #9
    8588:	0a40      	lsrs	r0, r0, #9
    858a:	4644      	mov	r4, r8
    858c:	22ff      	movs	r2, #255	; 0xff
    858e:	e763      	b.n	8458 <__aeabi_fmul+0x94>
    8590:	4338      	orrs	r0, r7
    8592:	0240      	lsls	r0, r0, #9
    8594:	0a40      	lsrs	r0, r0, #9
    8596:	22ff      	movs	r2, #255	; 0xff
    8598:	e75e      	b.n	8458 <__aeabi_fmul+0x94>
    859a:	2401      	movs	r4, #1
    859c:	1aa3      	subs	r3, r4, r2
    859e:	2b1b      	cmp	r3, #27
    85a0:	dd05      	ble.n	85ae <__aeabi_fmul+0x1ea>
    85a2:	400c      	ands	r4, r1
    85a4:	2200      	movs	r2, #0
    85a6:	2000      	movs	r0, #0
    85a8:	e756      	b.n	8458 <__aeabi_fmul+0x94>
    85aa:	465e      	mov	r6, fp
    85ac:	e7cb      	b.n	8546 <__aeabi_fmul+0x182>
    85ae:	002a      	movs	r2, r5
    85b0:	2020      	movs	r0, #32
    85b2:	40da      	lsrs	r2, r3
    85b4:	1ac3      	subs	r3, r0, r3
    85b6:	409d      	lsls	r5, r3
    85b8:	002b      	movs	r3, r5
    85ba:	1e5d      	subs	r5, r3, #1
    85bc:	41ab      	sbcs	r3, r5
    85be:	4313      	orrs	r3, r2
    85c0:	075a      	lsls	r2, r3, #29
    85c2:	d004      	beq.n	85ce <__aeabi_fmul+0x20a>
    85c4:	220f      	movs	r2, #15
    85c6:	401a      	ands	r2, r3
    85c8:	2a04      	cmp	r2, #4
    85ca:	d000      	beq.n	85ce <__aeabi_fmul+0x20a>
    85cc:	3304      	adds	r3, #4
    85ce:	015a      	lsls	r2, r3, #5
    85d0:	d504      	bpl.n	85dc <__aeabi_fmul+0x218>
    85d2:	2401      	movs	r4, #1
    85d4:	2201      	movs	r2, #1
    85d6:	400c      	ands	r4, r1
    85d8:	2000      	movs	r0, #0
    85da:	e73d      	b.n	8458 <__aeabi_fmul+0x94>
    85dc:	2401      	movs	r4, #1
    85de:	019b      	lsls	r3, r3, #6
    85e0:	0a58      	lsrs	r0, r3, #9
    85e2:	400c      	ands	r4, r1
    85e4:	2200      	movs	r2, #0
    85e6:	e737      	b.n	8458 <__aeabi_fmul+0x94>
    85e8:	2080      	movs	r0, #128	; 0x80
    85ea:	2401      	movs	r4, #1
    85ec:	03c0      	lsls	r0, r0, #15
    85ee:	4328      	orrs	r0, r5
    85f0:	0240      	lsls	r0, r0, #9
    85f2:	0a40      	lsrs	r0, r0, #9
    85f4:	400c      	ands	r4, r1
    85f6:	22ff      	movs	r2, #255	; 0xff
    85f8:	e72e      	b.n	8458 <__aeabi_fmul+0x94>
    85fa:	46c0      	nop			; (mov r8, r8)
    85fc:	0000a848 	.word	0x0000a848
    8600:	f7ffffff 	.word	0xf7ffffff

00008604 <__aeabi_i2f>:
    8604:	b570      	push	{r4, r5, r6, lr}
    8606:	2800      	cmp	r0, #0
    8608:	d030      	beq.n	866c <__aeabi_i2f+0x68>
    860a:	17c3      	asrs	r3, r0, #31
    860c:	18c4      	adds	r4, r0, r3
    860e:	405c      	eors	r4, r3
    8610:	0fc5      	lsrs	r5, r0, #31
    8612:	0020      	movs	r0, r4
    8614:	f001 feca 	bl	a3ac <__clzsi2>
    8618:	239e      	movs	r3, #158	; 0x9e
    861a:	1a1b      	subs	r3, r3, r0
    861c:	2b96      	cmp	r3, #150	; 0x96
    861e:	dc0d      	bgt.n	863c <__aeabi_i2f+0x38>
    8620:	2296      	movs	r2, #150	; 0x96
    8622:	1ad2      	subs	r2, r2, r3
    8624:	4094      	lsls	r4, r2
    8626:	002a      	movs	r2, r5
    8628:	0264      	lsls	r4, r4, #9
    862a:	0a64      	lsrs	r4, r4, #9
    862c:	b2db      	uxtb	r3, r3
    862e:	0264      	lsls	r4, r4, #9
    8630:	05db      	lsls	r3, r3, #23
    8632:	0a60      	lsrs	r0, r4, #9
    8634:	07d2      	lsls	r2, r2, #31
    8636:	4318      	orrs	r0, r3
    8638:	4310      	orrs	r0, r2
    863a:	bd70      	pop	{r4, r5, r6, pc}
    863c:	2b99      	cmp	r3, #153	; 0x99
    863e:	dc19      	bgt.n	8674 <__aeabi_i2f+0x70>
    8640:	2299      	movs	r2, #153	; 0x99
    8642:	1ad2      	subs	r2, r2, r3
    8644:	2a00      	cmp	r2, #0
    8646:	dd29      	ble.n	869c <__aeabi_i2f+0x98>
    8648:	4094      	lsls	r4, r2
    864a:	0022      	movs	r2, r4
    864c:	4c14      	ldr	r4, [pc, #80]	; (86a0 <__aeabi_i2f+0x9c>)
    864e:	4014      	ands	r4, r2
    8650:	0751      	lsls	r1, r2, #29
    8652:	d004      	beq.n	865e <__aeabi_i2f+0x5a>
    8654:	210f      	movs	r1, #15
    8656:	400a      	ands	r2, r1
    8658:	2a04      	cmp	r2, #4
    865a:	d000      	beq.n	865e <__aeabi_i2f+0x5a>
    865c:	3404      	adds	r4, #4
    865e:	0162      	lsls	r2, r4, #5
    8660:	d413      	bmi.n	868a <__aeabi_i2f+0x86>
    8662:	01a4      	lsls	r4, r4, #6
    8664:	0a64      	lsrs	r4, r4, #9
    8666:	b2db      	uxtb	r3, r3
    8668:	002a      	movs	r2, r5
    866a:	e7e0      	b.n	862e <__aeabi_i2f+0x2a>
    866c:	2200      	movs	r2, #0
    866e:	2300      	movs	r3, #0
    8670:	2400      	movs	r4, #0
    8672:	e7dc      	b.n	862e <__aeabi_i2f+0x2a>
    8674:	2205      	movs	r2, #5
    8676:	0021      	movs	r1, r4
    8678:	1a12      	subs	r2, r2, r0
    867a:	40d1      	lsrs	r1, r2
    867c:	22b9      	movs	r2, #185	; 0xb9
    867e:	1ad2      	subs	r2, r2, r3
    8680:	4094      	lsls	r4, r2
    8682:	1e62      	subs	r2, r4, #1
    8684:	4194      	sbcs	r4, r2
    8686:	430c      	orrs	r4, r1
    8688:	e7da      	b.n	8640 <__aeabi_i2f+0x3c>
    868a:	4b05      	ldr	r3, [pc, #20]	; (86a0 <__aeabi_i2f+0x9c>)
    868c:	002a      	movs	r2, r5
    868e:	401c      	ands	r4, r3
    8690:	239f      	movs	r3, #159	; 0x9f
    8692:	01a4      	lsls	r4, r4, #6
    8694:	1a1b      	subs	r3, r3, r0
    8696:	0a64      	lsrs	r4, r4, #9
    8698:	b2db      	uxtb	r3, r3
    869a:	e7c8      	b.n	862e <__aeabi_i2f+0x2a>
    869c:	0022      	movs	r2, r4
    869e:	e7d5      	b.n	864c <__aeabi_i2f+0x48>
    86a0:	fbffffff 	.word	0xfbffffff

000086a4 <__aeabi_dadd>:
    86a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    86a6:	4645      	mov	r5, r8
    86a8:	46de      	mov	lr, fp
    86aa:	4657      	mov	r7, sl
    86ac:	464e      	mov	r6, r9
    86ae:	030c      	lsls	r4, r1, #12
    86b0:	b5e0      	push	{r5, r6, r7, lr}
    86b2:	004e      	lsls	r6, r1, #1
    86b4:	0fc9      	lsrs	r1, r1, #31
    86b6:	4688      	mov	r8, r1
    86b8:	000d      	movs	r5, r1
    86ba:	0a61      	lsrs	r1, r4, #9
    86bc:	0f44      	lsrs	r4, r0, #29
    86be:	430c      	orrs	r4, r1
    86c0:	00c7      	lsls	r7, r0, #3
    86c2:	0319      	lsls	r1, r3, #12
    86c4:	0058      	lsls	r0, r3, #1
    86c6:	0fdb      	lsrs	r3, r3, #31
    86c8:	469b      	mov	fp, r3
    86ca:	0a4b      	lsrs	r3, r1, #9
    86cc:	0f51      	lsrs	r1, r2, #29
    86ce:	430b      	orrs	r3, r1
    86d0:	0d76      	lsrs	r6, r6, #21
    86d2:	0d40      	lsrs	r0, r0, #21
    86d4:	0019      	movs	r1, r3
    86d6:	00d2      	lsls	r2, r2, #3
    86d8:	45d8      	cmp	r8, fp
    86da:	d100      	bne.n	86de <__aeabi_dadd+0x3a>
    86dc:	e0ae      	b.n	883c <__aeabi_dadd+0x198>
    86de:	1a35      	subs	r5, r6, r0
    86e0:	2d00      	cmp	r5, #0
    86e2:	dc00      	bgt.n	86e6 <__aeabi_dadd+0x42>
    86e4:	e0f6      	b.n	88d4 <__aeabi_dadd+0x230>
    86e6:	2800      	cmp	r0, #0
    86e8:	d10f      	bne.n	870a <__aeabi_dadd+0x66>
    86ea:	4313      	orrs	r3, r2
    86ec:	d100      	bne.n	86f0 <__aeabi_dadd+0x4c>
    86ee:	e0db      	b.n	88a8 <__aeabi_dadd+0x204>
    86f0:	1e6b      	subs	r3, r5, #1
    86f2:	2b00      	cmp	r3, #0
    86f4:	d000      	beq.n	86f8 <__aeabi_dadd+0x54>
    86f6:	e137      	b.n	8968 <__aeabi_dadd+0x2c4>
    86f8:	1aba      	subs	r2, r7, r2
    86fa:	4297      	cmp	r7, r2
    86fc:	41bf      	sbcs	r7, r7
    86fe:	1a64      	subs	r4, r4, r1
    8700:	427f      	negs	r7, r7
    8702:	1be4      	subs	r4, r4, r7
    8704:	2601      	movs	r6, #1
    8706:	0017      	movs	r7, r2
    8708:	e024      	b.n	8754 <__aeabi_dadd+0xb0>
    870a:	4bc6      	ldr	r3, [pc, #792]	; (8a24 <__aeabi_dadd+0x380>)
    870c:	429e      	cmp	r6, r3
    870e:	d04d      	beq.n	87ac <__aeabi_dadd+0x108>
    8710:	2380      	movs	r3, #128	; 0x80
    8712:	041b      	lsls	r3, r3, #16
    8714:	4319      	orrs	r1, r3
    8716:	2d38      	cmp	r5, #56	; 0x38
    8718:	dd00      	ble.n	871c <__aeabi_dadd+0x78>
    871a:	e107      	b.n	892c <__aeabi_dadd+0x288>
    871c:	2d1f      	cmp	r5, #31
    871e:	dd00      	ble.n	8722 <__aeabi_dadd+0x7e>
    8720:	e138      	b.n	8994 <__aeabi_dadd+0x2f0>
    8722:	2020      	movs	r0, #32
    8724:	1b43      	subs	r3, r0, r5
    8726:	469a      	mov	sl, r3
    8728:	000b      	movs	r3, r1
    872a:	4650      	mov	r0, sl
    872c:	4083      	lsls	r3, r0
    872e:	4699      	mov	r9, r3
    8730:	0013      	movs	r3, r2
    8732:	4648      	mov	r0, r9
    8734:	40eb      	lsrs	r3, r5
    8736:	4318      	orrs	r0, r3
    8738:	0003      	movs	r3, r0
    873a:	4650      	mov	r0, sl
    873c:	4082      	lsls	r2, r0
    873e:	1e50      	subs	r0, r2, #1
    8740:	4182      	sbcs	r2, r0
    8742:	40e9      	lsrs	r1, r5
    8744:	431a      	orrs	r2, r3
    8746:	1aba      	subs	r2, r7, r2
    8748:	1a61      	subs	r1, r4, r1
    874a:	4297      	cmp	r7, r2
    874c:	41a4      	sbcs	r4, r4
    874e:	0017      	movs	r7, r2
    8750:	4264      	negs	r4, r4
    8752:	1b0c      	subs	r4, r1, r4
    8754:	0223      	lsls	r3, r4, #8
    8756:	d562      	bpl.n	881e <__aeabi_dadd+0x17a>
    8758:	0264      	lsls	r4, r4, #9
    875a:	0a65      	lsrs	r5, r4, #9
    875c:	2d00      	cmp	r5, #0
    875e:	d100      	bne.n	8762 <__aeabi_dadd+0xbe>
    8760:	e0df      	b.n	8922 <__aeabi_dadd+0x27e>
    8762:	0028      	movs	r0, r5
    8764:	f001 fe22 	bl	a3ac <__clzsi2>
    8768:	0003      	movs	r3, r0
    876a:	3b08      	subs	r3, #8
    876c:	2b1f      	cmp	r3, #31
    876e:	dd00      	ble.n	8772 <__aeabi_dadd+0xce>
    8770:	e0d2      	b.n	8918 <__aeabi_dadd+0x274>
    8772:	2220      	movs	r2, #32
    8774:	003c      	movs	r4, r7
    8776:	1ad2      	subs	r2, r2, r3
    8778:	409d      	lsls	r5, r3
    877a:	40d4      	lsrs	r4, r2
    877c:	409f      	lsls	r7, r3
    877e:	4325      	orrs	r5, r4
    8780:	429e      	cmp	r6, r3
    8782:	dd00      	ble.n	8786 <__aeabi_dadd+0xe2>
    8784:	e0c4      	b.n	8910 <__aeabi_dadd+0x26c>
    8786:	1b9e      	subs	r6, r3, r6
    8788:	1c73      	adds	r3, r6, #1
    878a:	2b1f      	cmp	r3, #31
    878c:	dd00      	ble.n	8790 <__aeabi_dadd+0xec>
    878e:	e0f1      	b.n	8974 <__aeabi_dadd+0x2d0>
    8790:	2220      	movs	r2, #32
    8792:	0038      	movs	r0, r7
    8794:	0029      	movs	r1, r5
    8796:	1ad2      	subs	r2, r2, r3
    8798:	40d8      	lsrs	r0, r3
    879a:	4091      	lsls	r1, r2
    879c:	4097      	lsls	r7, r2
    879e:	002c      	movs	r4, r5
    87a0:	4301      	orrs	r1, r0
    87a2:	1e78      	subs	r0, r7, #1
    87a4:	4187      	sbcs	r7, r0
    87a6:	40dc      	lsrs	r4, r3
    87a8:	2600      	movs	r6, #0
    87aa:	430f      	orrs	r7, r1
    87ac:	077b      	lsls	r3, r7, #29
    87ae:	d009      	beq.n	87c4 <__aeabi_dadd+0x120>
    87b0:	230f      	movs	r3, #15
    87b2:	403b      	ands	r3, r7
    87b4:	2b04      	cmp	r3, #4
    87b6:	d005      	beq.n	87c4 <__aeabi_dadd+0x120>
    87b8:	1d3b      	adds	r3, r7, #4
    87ba:	42bb      	cmp	r3, r7
    87bc:	41bf      	sbcs	r7, r7
    87be:	427f      	negs	r7, r7
    87c0:	19e4      	adds	r4, r4, r7
    87c2:	001f      	movs	r7, r3
    87c4:	0223      	lsls	r3, r4, #8
    87c6:	d52c      	bpl.n	8822 <__aeabi_dadd+0x17e>
    87c8:	4b96      	ldr	r3, [pc, #600]	; (8a24 <__aeabi_dadd+0x380>)
    87ca:	3601      	adds	r6, #1
    87cc:	429e      	cmp	r6, r3
    87ce:	d100      	bne.n	87d2 <__aeabi_dadd+0x12e>
    87d0:	e09a      	b.n	8908 <__aeabi_dadd+0x264>
    87d2:	4645      	mov	r5, r8
    87d4:	4b94      	ldr	r3, [pc, #592]	; (8a28 <__aeabi_dadd+0x384>)
    87d6:	08ff      	lsrs	r7, r7, #3
    87d8:	401c      	ands	r4, r3
    87da:	0760      	lsls	r0, r4, #29
    87dc:	0576      	lsls	r6, r6, #21
    87de:	0264      	lsls	r4, r4, #9
    87e0:	4307      	orrs	r7, r0
    87e2:	0b24      	lsrs	r4, r4, #12
    87e4:	0d76      	lsrs	r6, r6, #21
    87e6:	2100      	movs	r1, #0
    87e8:	0324      	lsls	r4, r4, #12
    87ea:	0b23      	lsrs	r3, r4, #12
    87ec:	0d0c      	lsrs	r4, r1, #20
    87ee:	4a8f      	ldr	r2, [pc, #572]	; (8a2c <__aeabi_dadd+0x388>)
    87f0:	0524      	lsls	r4, r4, #20
    87f2:	431c      	orrs	r4, r3
    87f4:	4014      	ands	r4, r2
    87f6:	0533      	lsls	r3, r6, #20
    87f8:	4323      	orrs	r3, r4
    87fa:	005b      	lsls	r3, r3, #1
    87fc:	07ed      	lsls	r5, r5, #31
    87fe:	085b      	lsrs	r3, r3, #1
    8800:	432b      	orrs	r3, r5
    8802:	0038      	movs	r0, r7
    8804:	0019      	movs	r1, r3
    8806:	bc3c      	pop	{r2, r3, r4, r5}
    8808:	4690      	mov	r8, r2
    880a:	4699      	mov	r9, r3
    880c:	46a2      	mov	sl, r4
    880e:	46ab      	mov	fp, r5
    8810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8812:	4664      	mov	r4, ip
    8814:	4304      	orrs	r4, r0
    8816:	d100      	bne.n	881a <__aeabi_dadd+0x176>
    8818:	e211      	b.n	8c3e <__aeabi_dadd+0x59a>
    881a:	0004      	movs	r4, r0
    881c:	4667      	mov	r7, ip
    881e:	077b      	lsls	r3, r7, #29
    8820:	d1c6      	bne.n	87b0 <__aeabi_dadd+0x10c>
    8822:	4645      	mov	r5, r8
    8824:	0760      	lsls	r0, r4, #29
    8826:	08ff      	lsrs	r7, r7, #3
    8828:	4307      	orrs	r7, r0
    882a:	08e4      	lsrs	r4, r4, #3
    882c:	4b7d      	ldr	r3, [pc, #500]	; (8a24 <__aeabi_dadd+0x380>)
    882e:	429e      	cmp	r6, r3
    8830:	d030      	beq.n	8894 <__aeabi_dadd+0x1f0>
    8832:	0324      	lsls	r4, r4, #12
    8834:	0576      	lsls	r6, r6, #21
    8836:	0b24      	lsrs	r4, r4, #12
    8838:	0d76      	lsrs	r6, r6, #21
    883a:	e7d4      	b.n	87e6 <__aeabi_dadd+0x142>
    883c:	1a33      	subs	r3, r6, r0
    883e:	469a      	mov	sl, r3
    8840:	2b00      	cmp	r3, #0
    8842:	dd78      	ble.n	8936 <__aeabi_dadd+0x292>
    8844:	2800      	cmp	r0, #0
    8846:	d031      	beq.n	88ac <__aeabi_dadd+0x208>
    8848:	4876      	ldr	r0, [pc, #472]	; (8a24 <__aeabi_dadd+0x380>)
    884a:	4286      	cmp	r6, r0
    884c:	d0ae      	beq.n	87ac <__aeabi_dadd+0x108>
    884e:	2080      	movs	r0, #128	; 0x80
    8850:	0400      	lsls	r0, r0, #16
    8852:	4301      	orrs	r1, r0
    8854:	4653      	mov	r3, sl
    8856:	2b38      	cmp	r3, #56	; 0x38
    8858:	dc00      	bgt.n	885c <__aeabi_dadd+0x1b8>
    885a:	e0e9      	b.n	8a30 <__aeabi_dadd+0x38c>
    885c:	430a      	orrs	r2, r1
    885e:	1e51      	subs	r1, r2, #1
    8860:	418a      	sbcs	r2, r1
    8862:	2100      	movs	r1, #0
    8864:	19d2      	adds	r2, r2, r7
    8866:	42ba      	cmp	r2, r7
    8868:	41bf      	sbcs	r7, r7
    886a:	1909      	adds	r1, r1, r4
    886c:	427c      	negs	r4, r7
    886e:	0017      	movs	r7, r2
    8870:	190c      	adds	r4, r1, r4
    8872:	0223      	lsls	r3, r4, #8
    8874:	d5d3      	bpl.n	881e <__aeabi_dadd+0x17a>
    8876:	4b6b      	ldr	r3, [pc, #428]	; (8a24 <__aeabi_dadd+0x380>)
    8878:	3601      	adds	r6, #1
    887a:	429e      	cmp	r6, r3
    887c:	d100      	bne.n	8880 <__aeabi_dadd+0x1dc>
    887e:	e13a      	b.n	8af6 <__aeabi_dadd+0x452>
    8880:	2001      	movs	r0, #1
    8882:	4b69      	ldr	r3, [pc, #420]	; (8a28 <__aeabi_dadd+0x384>)
    8884:	401c      	ands	r4, r3
    8886:	087b      	lsrs	r3, r7, #1
    8888:	4007      	ands	r7, r0
    888a:	431f      	orrs	r7, r3
    888c:	07e0      	lsls	r0, r4, #31
    888e:	4307      	orrs	r7, r0
    8890:	0864      	lsrs	r4, r4, #1
    8892:	e78b      	b.n	87ac <__aeabi_dadd+0x108>
    8894:	0023      	movs	r3, r4
    8896:	433b      	orrs	r3, r7
    8898:	d100      	bne.n	889c <__aeabi_dadd+0x1f8>
    889a:	e1cb      	b.n	8c34 <__aeabi_dadd+0x590>
    889c:	2280      	movs	r2, #128	; 0x80
    889e:	0312      	lsls	r2, r2, #12
    88a0:	4314      	orrs	r4, r2
    88a2:	0324      	lsls	r4, r4, #12
    88a4:	0b24      	lsrs	r4, r4, #12
    88a6:	e79e      	b.n	87e6 <__aeabi_dadd+0x142>
    88a8:	002e      	movs	r6, r5
    88aa:	e77f      	b.n	87ac <__aeabi_dadd+0x108>
    88ac:	0008      	movs	r0, r1
    88ae:	4310      	orrs	r0, r2
    88b0:	d100      	bne.n	88b4 <__aeabi_dadd+0x210>
    88b2:	e0b4      	b.n	8a1e <__aeabi_dadd+0x37a>
    88b4:	1e58      	subs	r0, r3, #1
    88b6:	2800      	cmp	r0, #0
    88b8:	d000      	beq.n	88bc <__aeabi_dadd+0x218>
    88ba:	e0de      	b.n	8a7a <__aeabi_dadd+0x3d6>
    88bc:	18ba      	adds	r2, r7, r2
    88be:	42ba      	cmp	r2, r7
    88c0:	419b      	sbcs	r3, r3
    88c2:	1864      	adds	r4, r4, r1
    88c4:	425b      	negs	r3, r3
    88c6:	18e4      	adds	r4, r4, r3
    88c8:	0017      	movs	r7, r2
    88ca:	2601      	movs	r6, #1
    88cc:	0223      	lsls	r3, r4, #8
    88ce:	d5a6      	bpl.n	881e <__aeabi_dadd+0x17a>
    88d0:	2602      	movs	r6, #2
    88d2:	e7d5      	b.n	8880 <__aeabi_dadd+0x1dc>
    88d4:	2d00      	cmp	r5, #0
    88d6:	d16e      	bne.n	89b6 <__aeabi_dadd+0x312>
    88d8:	1c70      	adds	r0, r6, #1
    88da:	0540      	lsls	r0, r0, #21
    88dc:	0d40      	lsrs	r0, r0, #21
    88de:	2801      	cmp	r0, #1
    88e0:	dc00      	bgt.n	88e4 <__aeabi_dadd+0x240>
    88e2:	e0f9      	b.n	8ad8 <__aeabi_dadd+0x434>
    88e4:	1ab8      	subs	r0, r7, r2
    88e6:	4684      	mov	ip, r0
    88e8:	4287      	cmp	r7, r0
    88ea:	4180      	sbcs	r0, r0
    88ec:	1ae5      	subs	r5, r4, r3
    88ee:	4240      	negs	r0, r0
    88f0:	1a2d      	subs	r5, r5, r0
    88f2:	0228      	lsls	r0, r5, #8
    88f4:	d400      	bmi.n	88f8 <__aeabi_dadd+0x254>
    88f6:	e089      	b.n	8a0c <__aeabi_dadd+0x368>
    88f8:	1bd7      	subs	r7, r2, r7
    88fa:	42ba      	cmp	r2, r7
    88fc:	4192      	sbcs	r2, r2
    88fe:	1b1c      	subs	r4, r3, r4
    8900:	4252      	negs	r2, r2
    8902:	1aa5      	subs	r5, r4, r2
    8904:	46d8      	mov	r8, fp
    8906:	e729      	b.n	875c <__aeabi_dadd+0xb8>
    8908:	4645      	mov	r5, r8
    890a:	2400      	movs	r4, #0
    890c:	2700      	movs	r7, #0
    890e:	e76a      	b.n	87e6 <__aeabi_dadd+0x142>
    8910:	4c45      	ldr	r4, [pc, #276]	; (8a28 <__aeabi_dadd+0x384>)
    8912:	1af6      	subs	r6, r6, r3
    8914:	402c      	ands	r4, r5
    8916:	e749      	b.n	87ac <__aeabi_dadd+0x108>
    8918:	003d      	movs	r5, r7
    891a:	3828      	subs	r0, #40	; 0x28
    891c:	4085      	lsls	r5, r0
    891e:	2700      	movs	r7, #0
    8920:	e72e      	b.n	8780 <__aeabi_dadd+0xdc>
    8922:	0038      	movs	r0, r7
    8924:	f001 fd42 	bl	a3ac <__clzsi2>
    8928:	3020      	adds	r0, #32
    892a:	e71d      	b.n	8768 <__aeabi_dadd+0xc4>
    892c:	430a      	orrs	r2, r1
    892e:	1e51      	subs	r1, r2, #1
    8930:	418a      	sbcs	r2, r1
    8932:	2100      	movs	r1, #0
    8934:	e707      	b.n	8746 <__aeabi_dadd+0xa2>
    8936:	2b00      	cmp	r3, #0
    8938:	d000      	beq.n	893c <__aeabi_dadd+0x298>
    893a:	e0f3      	b.n	8b24 <__aeabi_dadd+0x480>
    893c:	1c70      	adds	r0, r6, #1
    893e:	0543      	lsls	r3, r0, #21
    8940:	0d5b      	lsrs	r3, r3, #21
    8942:	2b01      	cmp	r3, #1
    8944:	dc00      	bgt.n	8948 <__aeabi_dadd+0x2a4>
    8946:	e0ad      	b.n	8aa4 <__aeabi_dadd+0x400>
    8948:	4b36      	ldr	r3, [pc, #216]	; (8a24 <__aeabi_dadd+0x380>)
    894a:	4298      	cmp	r0, r3
    894c:	d100      	bne.n	8950 <__aeabi_dadd+0x2ac>
    894e:	e0d1      	b.n	8af4 <__aeabi_dadd+0x450>
    8950:	18ba      	adds	r2, r7, r2
    8952:	42ba      	cmp	r2, r7
    8954:	41bf      	sbcs	r7, r7
    8956:	1864      	adds	r4, r4, r1
    8958:	427f      	negs	r7, r7
    895a:	19e4      	adds	r4, r4, r7
    895c:	07e7      	lsls	r7, r4, #31
    895e:	0852      	lsrs	r2, r2, #1
    8960:	4317      	orrs	r7, r2
    8962:	0864      	lsrs	r4, r4, #1
    8964:	0006      	movs	r6, r0
    8966:	e721      	b.n	87ac <__aeabi_dadd+0x108>
    8968:	482e      	ldr	r0, [pc, #184]	; (8a24 <__aeabi_dadd+0x380>)
    896a:	4285      	cmp	r5, r0
    896c:	d100      	bne.n	8970 <__aeabi_dadd+0x2cc>
    896e:	e093      	b.n	8a98 <__aeabi_dadd+0x3f4>
    8970:	001d      	movs	r5, r3
    8972:	e6d0      	b.n	8716 <__aeabi_dadd+0x72>
    8974:	0029      	movs	r1, r5
    8976:	3e1f      	subs	r6, #31
    8978:	40f1      	lsrs	r1, r6
    897a:	2b20      	cmp	r3, #32
    897c:	d100      	bne.n	8980 <__aeabi_dadd+0x2dc>
    897e:	e08d      	b.n	8a9c <__aeabi_dadd+0x3f8>
    8980:	2240      	movs	r2, #64	; 0x40
    8982:	1ad3      	subs	r3, r2, r3
    8984:	409d      	lsls	r5, r3
    8986:	432f      	orrs	r7, r5
    8988:	1e7d      	subs	r5, r7, #1
    898a:	41af      	sbcs	r7, r5
    898c:	2400      	movs	r4, #0
    898e:	430f      	orrs	r7, r1
    8990:	2600      	movs	r6, #0
    8992:	e744      	b.n	881e <__aeabi_dadd+0x17a>
    8994:	002b      	movs	r3, r5
    8996:	0008      	movs	r0, r1
    8998:	3b20      	subs	r3, #32
    899a:	40d8      	lsrs	r0, r3
    899c:	0003      	movs	r3, r0
    899e:	2d20      	cmp	r5, #32
    89a0:	d100      	bne.n	89a4 <__aeabi_dadd+0x300>
    89a2:	e07d      	b.n	8aa0 <__aeabi_dadd+0x3fc>
    89a4:	2040      	movs	r0, #64	; 0x40
    89a6:	1b45      	subs	r5, r0, r5
    89a8:	40a9      	lsls	r1, r5
    89aa:	430a      	orrs	r2, r1
    89ac:	1e51      	subs	r1, r2, #1
    89ae:	418a      	sbcs	r2, r1
    89b0:	2100      	movs	r1, #0
    89b2:	431a      	orrs	r2, r3
    89b4:	e6c7      	b.n	8746 <__aeabi_dadd+0xa2>
    89b6:	2e00      	cmp	r6, #0
    89b8:	d050      	beq.n	8a5c <__aeabi_dadd+0x3b8>
    89ba:	4e1a      	ldr	r6, [pc, #104]	; (8a24 <__aeabi_dadd+0x380>)
    89bc:	42b0      	cmp	r0, r6
    89be:	d057      	beq.n	8a70 <__aeabi_dadd+0x3cc>
    89c0:	2680      	movs	r6, #128	; 0x80
    89c2:	426b      	negs	r3, r5
    89c4:	4699      	mov	r9, r3
    89c6:	0436      	lsls	r6, r6, #16
    89c8:	4334      	orrs	r4, r6
    89ca:	464b      	mov	r3, r9
    89cc:	2b38      	cmp	r3, #56	; 0x38
    89ce:	dd00      	ble.n	89d2 <__aeabi_dadd+0x32e>
    89d0:	e0d6      	b.n	8b80 <__aeabi_dadd+0x4dc>
    89d2:	2b1f      	cmp	r3, #31
    89d4:	dd00      	ble.n	89d8 <__aeabi_dadd+0x334>
    89d6:	e135      	b.n	8c44 <__aeabi_dadd+0x5a0>
    89d8:	2620      	movs	r6, #32
    89da:	1af5      	subs	r5, r6, r3
    89dc:	0026      	movs	r6, r4
    89de:	40ae      	lsls	r6, r5
    89e0:	46b2      	mov	sl, r6
    89e2:	003e      	movs	r6, r7
    89e4:	40de      	lsrs	r6, r3
    89e6:	46ac      	mov	ip, r5
    89e8:	0035      	movs	r5, r6
    89ea:	4656      	mov	r6, sl
    89ec:	432e      	orrs	r6, r5
    89ee:	4665      	mov	r5, ip
    89f0:	40af      	lsls	r7, r5
    89f2:	1e7d      	subs	r5, r7, #1
    89f4:	41af      	sbcs	r7, r5
    89f6:	40dc      	lsrs	r4, r3
    89f8:	4337      	orrs	r7, r6
    89fa:	1bd7      	subs	r7, r2, r7
    89fc:	42ba      	cmp	r2, r7
    89fe:	4192      	sbcs	r2, r2
    8a00:	1b0c      	subs	r4, r1, r4
    8a02:	4252      	negs	r2, r2
    8a04:	1aa4      	subs	r4, r4, r2
    8a06:	0006      	movs	r6, r0
    8a08:	46d8      	mov	r8, fp
    8a0a:	e6a3      	b.n	8754 <__aeabi_dadd+0xb0>
    8a0c:	4664      	mov	r4, ip
    8a0e:	4667      	mov	r7, ip
    8a10:	432c      	orrs	r4, r5
    8a12:	d000      	beq.n	8a16 <__aeabi_dadd+0x372>
    8a14:	e6a2      	b.n	875c <__aeabi_dadd+0xb8>
    8a16:	2500      	movs	r5, #0
    8a18:	2600      	movs	r6, #0
    8a1a:	2700      	movs	r7, #0
    8a1c:	e706      	b.n	882c <__aeabi_dadd+0x188>
    8a1e:	001e      	movs	r6, r3
    8a20:	e6c4      	b.n	87ac <__aeabi_dadd+0x108>
    8a22:	46c0      	nop			; (mov r8, r8)
    8a24:	000007ff 	.word	0x000007ff
    8a28:	ff7fffff 	.word	0xff7fffff
    8a2c:	800fffff 	.word	0x800fffff
    8a30:	2b1f      	cmp	r3, #31
    8a32:	dc63      	bgt.n	8afc <__aeabi_dadd+0x458>
    8a34:	2020      	movs	r0, #32
    8a36:	1ac3      	subs	r3, r0, r3
    8a38:	0008      	movs	r0, r1
    8a3a:	4098      	lsls	r0, r3
    8a3c:	469c      	mov	ip, r3
    8a3e:	4683      	mov	fp, r0
    8a40:	4653      	mov	r3, sl
    8a42:	0010      	movs	r0, r2
    8a44:	40d8      	lsrs	r0, r3
    8a46:	0003      	movs	r3, r0
    8a48:	4658      	mov	r0, fp
    8a4a:	4318      	orrs	r0, r3
    8a4c:	4663      	mov	r3, ip
    8a4e:	409a      	lsls	r2, r3
    8a50:	1e53      	subs	r3, r2, #1
    8a52:	419a      	sbcs	r2, r3
    8a54:	4653      	mov	r3, sl
    8a56:	4302      	orrs	r2, r0
    8a58:	40d9      	lsrs	r1, r3
    8a5a:	e703      	b.n	8864 <__aeabi_dadd+0x1c0>
    8a5c:	0026      	movs	r6, r4
    8a5e:	433e      	orrs	r6, r7
    8a60:	d006      	beq.n	8a70 <__aeabi_dadd+0x3cc>
    8a62:	43eb      	mvns	r3, r5
    8a64:	4699      	mov	r9, r3
    8a66:	2b00      	cmp	r3, #0
    8a68:	d0c7      	beq.n	89fa <__aeabi_dadd+0x356>
    8a6a:	4e94      	ldr	r6, [pc, #592]	; (8cbc <__aeabi_dadd+0x618>)
    8a6c:	42b0      	cmp	r0, r6
    8a6e:	d1ac      	bne.n	89ca <__aeabi_dadd+0x326>
    8a70:	000c      	movs	r4, r1
    8a72:	0017      	movs	r7, r2
    8a74:	0006      	movs	r6, r0
    8a76:	46d8      	mov	r8, fp
    8a78:	e698      	b.n	87ac <__aeabi_dadd+0x108>
    8a7a:	4b90      	ldr	r3, [pc, #576]	; (8cbc <__aeabi_dadd+0x618>)
    8a7c:	459a      	cmp	sl, r3
    8a7e:	d00b      	beq.n	8a98 <__aeabi_dadd+0x3f4>
    8a80:	4682      	mov	sl, r0
    8a82:	e6e7      	b.n	8854 <__aeabi_dadd+0x1b0>
    8a84:	2800      	cmp	r0, #0
    8a86:	d000      	beq.n	8a8a <__aeabi_dadd+0x3e6>
    8a88:	e09e      	b.n	8bc8 <__aeabi_dadd+0x524>
    8a8a:	0018      	movs	r0, r3
    8a8c:	4310      	orrs	r0, r2
    8a8e:	d100      	bne.n	8a92 <__aeabi_dadd+0x3ee>
    8a90:	e0e9      	b.n	8c66 <__aeabi_dadd+0x5c2>
    8a92:	001c      	movs	r4, r3
    8a94:	0017      	movs	r7, r2
    8a96:	46d8      	mov	r8, fp
    8a98:	4e88      	ldr	r6, [pc, #544]	; (8cbc <__aeabi_dadd+0x618>)
    8a9a:	e687      	b.n	87ac <__aeabi_dadd+0x108>
    8a9c:	2500      	movs	r5, #0
    8a9e:	e772      	b.n	8986 <__aeabi_dadd+0x2e2>
    8aa0:	2100      	movs	r1, #0
    8aa2:	e782      	b.n	89aa <__aeabi_dadd+0x306>
    8aa4:	0023      	movs	r3, r4
    8aa6:	433b      	orrs	r3, r7
    8aa8:	2e00      	cmp	r6, #0
    8aaa:	d000      	beq.n	8aae <__aeabi_dadd+0x40a>
    8aac:	e0ab      	b.n	8c06 <__aeabi_dadd+0x562>
    8aae:	2b00      	cmp	r3, #0
    8ab0:	d100      	bne.n	8ab4 <__aeabi_dadd+0x410>
    8ab2:	e0e7      	b.n	8c84 <__aeabi_dadd+0x5e0>
    8ab4:	000b      	movs	r3, r1
    8ab6:	4313      	orrs	r3, r2
    8ab8:	d100      	bne.n	8abc <__aeabi_dadd+0x418>
    8aba:	e677      	b.n	87ac <__aeabi_dadd+0x108>
    8abc:	18ba      	adds	r2, r7, r2
    8abe:	42ba      	cmp	r2, r7
    8ac0:	41bf      	sbcs	r7, r7
    8ac2:	1864      	adds	r4, r4, r1
    8ac4:	427f      	negs	r7, r7
    8ac6:	19e4      	adds	r4, r4, r7
    8ac8:	0223      	lsls	r3, r4, #8
    8aca:	d400      	bmi.n	8ace <__aeabi_dadd+0x42a>
    8acc:	e0f2      	b.n	8cb4 <__aeabi_dadd+0x610>
    8ace:	4b7c      	ldr	r3, [pc, #496]	; (8cc0 <__aeabi_dadd+0x61c>)
    8ad0:	0017      	movs	r7, r2
    8ad2:	401c      	ands	r4, r3
    8ad4:	0006      	movs	r6, r0
    8ad6:	e669      	b.n	87ac <__aeabi_dadd+0x108>
    8ad8:	0020      	movs	r0, r4
    8ada:	4338      	orrs	r0, r7
    8adc:	2e00      	cmp	r6, #0
    8ade:	d1d1      	bne.n	8a84 <__aeabi_dadd+0x3e0>
    8ae0:	2800      	cmp	r0, #0
    8ae2:	d15b      	bne.n	8b9c <__aeabi_dadd+0x4f8>
    8ae4:	001c      	movs	r4, r3
    8ae6:	4314      	orrs	r4, r2
    8ae8:	d100      	bne.n	8aec <__aeabi_dadd+0x448>
    8aea:	e0a8      	b.n	8c3e <__aeabi_dadd+0x59a>
    8aec:	001c      	movs	r4, r3
    8aee:	0017      	movs	r7, r2
    8af0:	46d8      	mov	r8, fp
    8af2:	e65b      	b.n	87ac <__aeabi_dadd+0x108>
    8af4:	0006      	movs	r6, r0
    8af6:	2400      	movs	r4, #0
    8af8:	2700      	movs	r7, #0
    8afa:	e697      	b.n	882c <__aeabi_dadd+0x188>
    8afc:	4650      	mov	r0, sl
    8afe:	000b      	movs	r3, r1
    8b00:	3820      	subs	r0, #32
    8b02:	40c3      	lsrs	r3, r0
    8b04:	4699      	mov	r9, r3
    8b06:	4653      	mov	r3, sl
    8b08:	2b20      	cmp	r3, #32
    8b0a:	d100      	bne.n	8b0e <__aeabi_dadd+0x46a>
    8b0c:	e095      	b.n	8c3a <__aeabi_dadd+0x596>
    8b0e:	2340      	movs	r3, #64	; 0x40
    8b10:	4650      	mov	r0, sl
    8b12:	1a1b      	subs	r3, r3, r0
    8b14:	4099      	lsls	r1, r3
    8b16:	430a      	orrs	r2, r1
    8b18:	1e51      	subs	r1, r2, #1
    8b1a:	418a      	sbcs	r2, r1
    8b1c:	464b      	mov	r3, r9
    8b1e:	2100      	movs	r1, #0
    8b20:	431a      	orrs	r2, r3
    8b22:	e69f      	b.n	8864 <__aeabi_dadd+0x1c0>
    8b24:	2e00      	cmp	r6, #0
    8b26:	d130      	bne.n	8b8a <__aeabi_dadd+0x4e6>
    8b28:	0026      	movs	r6, r4
    8b2a:	433e      	orrs	r6, r7
    8b2c:	d067      	beq.n	8bfe <__aeabi_dadd+0x55a>
    8b2e:	43db      	mvns	r3, r3
    8b30:	469a      	mov	sl, r3
    8b32:	2b00      	cmp	r3, #0
    8b34:	d01c      	beq.n	8b70 <__aeabi_dadd+0x4cc>
    8b36:	4e61      	ldr	r6, [pc, #388]	; (8cbc <__aeabi_dadd+0x618>)
    8b38:	42b0      	cmp	r0, r6
    8b3a:	d060      	beq.n	8bfe <__aeabi_dadd+0x55a>
    8b3c:	4653      	mov	r3, sl
    8b3e:	2b38      	cmp	r3, #56	; 0x38
    8b40:	dd00      	ble.n	8b44 <__aeabi_dadd+0x4a0>
    8b42:	e096      	b.n	8c72 <__aeabi_dadd+0x5ce>
    8b44:	2b1f      	cmp	r3, #31
    8b46:	dd00      	ble.n	8b4a <__aeabi_dadd+0x4a6>
    8b48:	e09f      	b.n	8c8a <__aeabi_dadd+0x5e6>
    8b4a:	2620      	movs	r6, #32
    8b4c:	1af3      	subs	r3, r6, r3
    8b4e:	0026      	movs	r6, r4
    8b50:	409e      	lsls	r6, r3
    8b52:	469c      	mov	ip, r3
    8b54:	46b3      	mov	fp, r6
    8b56:	4653      	mov	r3, sl
    8b58:	003e      	movs	r6, r7
    8b5a:	40de      	lsrs	r6, r3
    8b5c:	0033      	movs	r3, r6
    8b5e:	465e      	mov	r6, fp
    8b60:	431e      	orrs	r6, r3
    8b62:	4663      	mov	r3, ip
    8b64:	409f      	lsls	r7, r3
    8b66:	1e7b      	subs	r3, r7, #1
    8b68:	419f      	sbcs	r7, r3
    8b6a:	4653      	mov	r3, sl
    8b6c:	40dc      	lsrs	r4, r3
    8b6e:	4337      	orrs	r7, r6
    8b70:	18bf      	adds	r7, r7, r2
    8b72:	4297      	cmp	r7, r2
    8b74:	4192      	sbcs	r2, r2
    8b76:	1864      	adds	r4, r4, r1
    8b78:	4252      	negs	r2, r2
    8b7a:	18a4      	adds	r4, r4, r2
    8b7c:	0006      	movs	r6, r0
    8b7e:	e678      	b.n	8872 <__aeabi_dadd+0x1ce>
    8b80:	4327      	orrs	r7, r4
    8b82:	1e7c      	subs	r4, r7, #1
    8b84:	41a7      	sbcs	r7, r4
    8b86:	2400      	movs	r4, #0
    8b88:	e737      	b.n	89fa <__aeabi_dadd+0x356>
    8b8a:	4e4c      	ldr	r6, [pc, #304]	; (8cbc <__aeabi_dadd+0x618>)
    8b8c:	42b0      	cmp	r0, r6
    8b8e:	d036      	beq.n	8bfe <__aeabi_dadd+0x55a>
    8b90:	2680      	movs	r6, #128	; 0x80
    8b92:	425b      	negs	r3, r3
    8b94:	0436      	lsls	r6, r6, #16
    8b96:	469a      	mov	sl, r3
    8b98:	4334      	orrs	r4, r6
    8b9a:	e7cf      	b.n	8b3c <__aeabi_dadd+0x498>
    8b9c:	0018      	movs	r0, r3
    8b9e:	4310      	orrs	r0, r2
    8ba0:	d100      	bne.n	8ba4 <__aeabi_dadd+0x500>
    8ba2:	e603      	b.n	87ac <__aeabi_dadd+0x108>
    8ba4:	1ab8      	subs	r0, r7, r2
    8ba6:	4684      	mov	ip, r0
    8ba8:	4567      	cmp	r7, ip
    8baa:	41ad      	sbcs	r5, r5
    8bac:	1ae0      	subs	r0, r4, r3
    8bae:	426d      	negs	r5, r5
    8bb0:	1b40      	subs	r0, r0, r5
    8bb2:	0205      	lsls	r5, r0, #8
    8bb4:	d400      	bmi.n	8bb8 <__aeabi_dadd+0x514>
    8bb6:	e62c      	b.n	8812 <__aeabi_dadd+0x16e>
    8bb8:	1bd7      	subs	r7, r2, r7
    8bba:	42ba      	cmp	r2, r7
    8bbc:	4192      	sbcs	r2, r2
    8bbe:	1b1c      	subs	r4, r3, r4
    8bc0:	4252      	negs	r2, r2
    8bc2:	1aa4      	subs	r4, r4, r2
    8bc4:	46d8      	mov	r8, fp
    8bc6:	e5f1      	b.n	87ac <__aeabi_dadd+0x108>
    8bc8:	0018      	movs	r0, r3
    8bca:	4310      	orrs	r0, r2
    8bcc:	d100      	bne.n	8bd0 <__aeabi_dadd+0x52c>
    8bce:	e763      	b.n	8a98 <__aeabi_dadd+0x3f4>
    8bd0:	08f8      	lsrs	r0, r7, #3
    8bd2:	0767      	lsls	r7, r4, #29
    8bd4:	4307      	orrs	r7, r0
    8bd6:	2080      	movs	r0, #128	; 0x80
    8bd8:	08e4      	lsrs	r4, r4, #3
    8bda:	0300      	lsls	r0, r0, #12
    8bdc:	4204      	tst	r4, r0
    8bde:	d008      	beq.n	8bf2 <__aeabi_dadd+0x54e>
    8be0:	08dd      	lsrs	r5, r3, #3
    8be2:	4205      	tst	r5, r0
    8be4:	d105      	bne.n	8bf2 <__aeabi_dadd+0x54e>
    8be6:	08d2      	lsrs	r2, r2, #3
    8be8:	0759      	lsls	r1, r3, #29
    8bea:	4311      	orrs	r1, r2
    8bec:	000f      	movs	r7, r1
    8bee:	002c      	movs	r4, r5
    8bf0:	46d8      	mov	r8, fp
    8bf2:	0f7b      	lsrs	r3, r7, #29
    8bf4:	00e4      	lsls	r4, r4, #3
    8bf6:	431c      	orrs	r4, r3
    8bf8:	00ff      	lsls	r7, r7, #3
    8bfa:	4e30      	ldr	r6, [pc, #192]	; (8cbc <__aeabi_dadd+0x618>)
    8bfc:	e5d6      	b.n	87ac <__aeabi_dadd+0x108>
    8bfe:	000c      	movs	r4, r1
    8c00:	0017      	movs	r7, r2
    8c02:	0006      	movs	r6, r0
    8c04:	e5d2      	b.n	87ac <__aeabi_dadd+0x108>
    8c06:	2b00      	cmp	r3, #0
    8c08:	d038      	beq.n	8c7c <__aeabi_dadd+0x5d8>
    8c0a:	000b      	movs	r3, r1
    8c0c:	4313      	orrs	r3, r2
    8c0e:	d100      	bne.n	8c12 <__aeabi_dadd+0x56e>
    8c10:	e742      	b.n	8a98 <__aeabi_dadd+0x3f4>
    8c12:	08f8      	lsrs	r0, r7, #3
    8c14:	0767      	lsls	r7, r4, #29
    8c16:	4307      	orrs	r7, r0
    8c18:	2080      	movs	r0, #128	; 0x80
    8c1a:	08e4      	lsrs	r4, r4, #3
    8c1c:	0300      	lsls	r0, r0, #12
    8c1e:	4204      	tst	r4, r0
    8c20:	d0e7      	beq.n	8bf2 <__aeabi_dadd+0x54e>
    8c22:	08cb      	lsrs	r3, r1, #3
    8c24:	4203      	tst	r3, r0
    8c26:	d1e4      	bne.n	8bf2 <__aeabi_dadd+0x54e>
    8c28:	08d2      	lsrs	r2, r2, #3
    8c2a:	0749      	lsls	r1, r1, #29
    8c2c:	4311      	orrs	r1, r2
    8c2e:	000f      	movs	r7, r1
    8c30:	001c      	movs	r4, r3
    8c32:	e7de      	b.n	8bf2 <__aeabi_dadd+0x54e>
    8c34:	2700      	movs	r7, #0
    8c36:	2400      	movs	r4, #0
    8c38:	e5d5      	b.n	87e6 <__aeabi_dadd+0x142>
    8c3a:	2100      	movs	r1, #0
    8c3c:	e76b      	b.n	8b16 <__aeabi_dadd+0x472>
    8c3e:	2500      	movs	r5, #0
    8c40:	2700      	movs	r7, #0
    8c42:	e5f3      	b.n	882c <__aeabi_dadd+0x188>
    8c44:	464e      	mov	r6, r9
    8c46:	0025      	movs	r5, r4
    8c48:	3e20      	subs	r6, #32
    8c4a:	40f5      	lsrs	r5, r6
    8c4c:	464b      	mov	r3, r9
    8c4e:	002e      	movs	r6, r5
    8c50:	2b20      	cmp	r3, #32
    8c52:	d02d      	beq.n	8cb0 <__aeabi_dadd+0x60c>
    8c54:	2540      	movs	r5, #64	; 0x40
    8c56:	1aed      	subs	r5, r5, r3
    8c58:	40ac      	lsls	r4, r5
    8c5a:	4327      	orrs	r7, r4
    8c5c:	1e7c      	subs	r4, r7, #1
    8c5e:	41a7      	sbcs	r7, r4
    8c60:	2400      	movs	r4, #0
    8c62:	4337      	orrs	r7, r6
    8c64:	e6c9      	b.n	89fa <__aeabi_dadd+0x356>
    8c66:	2480      	movs	r4, #128	; 0x80
    8c68:	2500      	movs	r5, #0
    8c6a:	0324      	lsls	r4, r4, #12
    8c6c:	4e13      	ldr	r6, [pc, #76]	; (8cbc <__aeabi_dadd+0x618>)
    8c6e:	2700      	movs	r7, #0
    8c70:	e5dc      	b.n	882c <__aeabi_dadd+0x188>
    8c72:	4327      	orrs	r7, r4
    8c74:	1e7c      	subs	r4, r7, #1
    8c76:	41a7      	sbcs	r7, r4
    8c78:	2400      	movs	r4, #0
    8c7a:	e779      	b.n	8b70 <__aeabi_dadd+0x4cc>
    8c7c:	000c      	movs	r4, r1
    8c7e:	0017      	movs	r7, r2
    8c80:	4e0e      	ldr	r6, [pc, #56]	; (8cbc <__aeabi_dadd+0x618>)
    8c82:	e593      	b.n	87ac <__aeabi_dadd+0x108>
    8c84:	000c      	movs	r4, r1
    8c86:	0017      	movs	r7, r2
    8c88:	e590      	b.n	87ac <__aeabi_dadd+0x108>
    8c8a:	4656      	mov	r6, sl
    8c8c:	0023      	movs	r3, r4
    8c8e:	3e20      	subs	r6, #32
    8c90:	40f3      	lsrs	r3, r6
    8c92:	4699      	mov	r9, r3
    8c94:	4653      	mov	r3, sl
    8c96:	2b20      	cmp	r3, #32
    8c98:	d00e      	beq.n	8cb8 <__aeabi_dadd+0x614>
    8c9a:	2340      	movs	r3, #64	; 0x40
    8c9c:	4656      	mov	r6, sl
    8c9e:	1b9b      	subs	r3, r3, r6
    8ca0:	409c      	lsls	r4, r3
    8ca2:	4327      	orrs	r7, r4
    8ca4:	1e7c      	subs	r4, r7, #1
    8ca6:	41a7      	sbcs	r7, r4
    8ca8:	464b      	mov	r3, r9
    8caa:	2400      	movs	r4, #0
    8cac:	431f      	orrs	r7, r3
    8cae:	e75f      	b.n	8b70 <__aeabi_dadd+0x4cc>
    8cb0:	2400      	movs	r4, #0
    8cb2:	e7d2      	b.n	8c5a <__aeabi_dadd+0x5b6>
    8cb4:	0017      	movs	r7, r2
    8cb6:	e5b2      	b.n	881e <__aeabi_dadd+0x17a>
    8cb8:	2400      	movs	r4, #0
    8cba:	e7f2      	b.n	8ca2 <__aeabi_dadd+0x5fe>
    8cbc:	000007ff 	.word	0x000007ff
    8cc0:	ff7fffff 	.word	0xff7fffff

00008cc4 <__aeabi_ddiv>:
    8cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8cc6:	4657      	mov	r7, sl
    8cc8:	4645      	mov	r5, r8
    8cca:	46de      	mov	lr, fp
    8ccc:	464e      	mov	r6, r9
    8cce:	b5e0      	push	{r5, r6, r7, lr}
    8cd0:	004c      	lsls	r4, r1, #1
    8cd2:	030e      	lsls	r6, r1, #12
    8cd4:	b087      	sub	sp, #28
    8cd6:	4683      	mov	fp, r0
    8cd8:	4692      	mov	sl, r2
    8cda:	001d      	movs	r5, r3
    8cdc:	4680      	mov	r8, r0
    8cde:	0b36      	lsrs	r6, r6, #12
    8ce0:	0d64      	lsrs	r4, r4, #21
    8ce2:	0fcf      	lsrs	r7, r1, #31
    8ce4:	2c00      	cmp	r4, #0
    8ce6:	d04f      	beq.n	8d88 <__aeabi_ddiv+0xc4>
    8ce8:	4b6f      	ldr	r3, [pc, #444]	; (8ea8 <__aeabi_ddiv+0x1e4>)
    8cea:	429c      	cmp	r4, r3
    8cec:	d035      	beq.n	8d5a <__aeabi_ddiv+0x96>
    8cee:	2380      	movs	r3, #128	; 0x80
    8cf0:	0f42      	lsrs	r2, r0, #29
    8cf2:	041b      	lsls	r3, r3, #16
    8cf4:	00f6      	lsls	r6, r6, #3
    8cf6:	4313      	orrs	r3, r2
    8cf8:	4333      	orrs	r3, r6
    8cfa:	4699      	mov	r9, r3
    8cfc:	00c3      	lsls	r3, r0, #3
    8cfe:	4698      	mov	r8, r3
    8d00:	4b6a      	ldr	r3, [pc, #424]	; (8eac <__aeabi_ddiv+0x1e8>)
    8d02:	2600      	movs	r6, #0
    8d04:	469c      	mov	ip, r3
    8d06:	2300      	movs	r3, #0
    8d08:	4464      	add	r4, ip
    8d0a:	9303      	str	r3, [sp, #12]
    8d0c:	032b      	lsls	r3, r5, #12
    8d0e:	0b1b      	lsrs	r3, r3, #12
    8d10:	469b      	mov	fp, r3
    8d12:	006b      	lsls	r3, r5, #1
    8d14:	0fed      	lsrs	r5, r5, #31
    8d16:	4650      	mov	r0, sl
    8d18:	0d5b      	lsrs	r3, r3, #21
    8d1a:	9501      	str	r5, [sp, #4]
    8d1c:	d05e      	beq.n	8ddc <__aeabi_ddiv+0x118>
    8d1e:	4a62      	ldr	r2, [pc, #392]	; (8ea8 <__aeabi_ddiv+0x1e4>)
    8d20:	4293      	cmp	r3, r2
    8d22:	d053      	beq.n	8dcc <__aeabi_ddiv+0x108>
    8d24:	465a      	mov	r2, fp
    8d26:	00d1      	lsls	r1, r2, #3
    8d28:	2280      	movs	r2, #128	; 0x80
    8d2a:	0f40      	lsrs	r0, r0, #29
    8d2c:	0412      	lsls	r2, r2, #16
    8d2e:	4302      	orrs	r2, r0
    8d30:	430a      	orrs	r2, r1
    8d32:	4693      	mov	fp, r2
    8d34:	4652      	mov	r2, sl
    8d36:	00d1      	lsls	r1, r2, #3
    8d38:	4a5c      	ldr	r2, [pc, #368]	; (8eac <__aeabi_ddiv+0x1e8>)
    8d3a:	4694      	mov	ip, r2
    8d3c:	2200      	movs	r2, #0
    8d3e:	4463      	add	r3, ip
    8d40:	0038      	movs	r0, r7
    8d42:	4068      	eors	r0, r5
    8d44:	4684      	mov	ip, r0
    8d46:	9002      	str	r0, [sp, #8]
    8d48:	1ae4      	subs	r4, r4, r3
    8d4a:	4316      	orrs	r6, r2
    8d4c:	2e0f      	cmp	r6, #15
    8d4e:	d900      	bls.n	8d52 <__aeabi_ddiv+0x8e>
    8d50:	e0b4      	b.n	8ebc <__aeabi_ddiv+0x1f8>
    8d52:	4b57      	ldr	r3, [pc, #348]	; (8eb0 <__aeabi_ddiv+0x1ec>)
    8d54:	00b6      	lsls	r6, r6, #2
    8d56:	599b      	ldr	r3, [r3, r6]
    8d58:	469f      	mov	pc, r3
    8d5a:	0003      	movs	r3, r0
    8d5c:	4333      	orrs	r3, r6
    8d5e:	4699      	mov	r9, r3
    8d60:	d16c      	bne.n	8e3c <__aeabi_ddiv+0x178>
    8d62:	2300      	movs	r3, #0
    8d64:	4698      	mov	r8, r3
    8d66:	3302      	adds	r3, #2
    8d68:	2608      	movs	r6, #8
    8d6a:	9303      	str	r3, [sp, #12]
    8d6c:	e7ce      	b.n	8d0c <__aeabi_ddiv+0x48>
    8d6e:	46cb      	mov	fp, r9
    8d70:	4641      	mov	r1, r8
    8d72:	9a03      	ldr	r2, [sp, #12]
    8d74:	9701      	str	r7, [sp, #4]
    8d76:	2a02      	cmp	r2, #2
    8d78:	d165      	bne.n	8e46 <__aeabi_ddiv+0x182>
    8d7a:	9b01      	ldr	r3, [sp, #4]
    8d7c:	4c4a      	ldr	r4, [pc, #296]	; (8ea8 <__aeabi_ddiv+0x1e4>)
    8d7e:	469c      	mov	ip, r3
    8d80:	2300      	movs	r3, #0
    8d82:	2200      	movs	r2, #0
    8d84:	4698      	mov	r8, r3
    8d86:	e06b      	b.n	8e60 <__aeabi_ddiv+0x19c>
    8d88:	0003      	movs	r3, r0
    8d8a:	4333      	orrs	r3, r6
    8d8c:	4699      	mov	r9, r3
    8d8e:	d04e      	beq.n	8e2e <__aeabi_ddiv+0x16a>
    8d90:	2e00      	cmp	r6, #0
    8d92:	d100      	bne.n	8d96 <__aeabi_ddiv+0xd2>
    8d94:	e1bc      	b.n	9110 <__aeabi_ddiv+0x44c>
    8d96:	0030      	movs	r0, r6
    8d98:	f001 fb08 	bl	a3ac <__clzsi2>
    8d9c:	0003      	movs	r3, r0
    8d9e:	3b0b      	subs	r3, #11
    8da0:	2b1c      	cmp	r3, #28
    8da2:	dd00      	ble.n	8da6 <__aeabi_ddiv+0xe2>
    8da4:	e1ac      	b.n	9100 <__aeabi_ddiv+0x43c>
    8da6:	221d      	movs	r2, #29
    8da8:	1ad3      	subs	r3, r2, r3
    8daa:	465a      	mov	r2, fp
    8dac:	0001      	movs	r1, r0
    8dae:	40da      	lsrs	r2, r3
    8db0:	3908      	subs	r1, #8
    8db2:	408e      	lsls	r6, r1
    8db4:	0013      	movs	r3, r2
    8db6:	4333      	orrs	r3, r6
    8db8:	4699      	mov	r9, r3
    8dba:	465b      	mov	r3, fp
    8dbc:	408b      	lsls	r3, r1
    8dbe:	4698      	mov	r8, r3
    8dc0:	2300      	movs	r3, #0
    8dc2:	4c3c      	ldr	r4, [pc, #240]	; (8eb4 <__aeabi_ddiv+0x1f0>)
    8dc4:	2600      	movs	r6, #0
    8dc6:	1a24      	subs	r4, r4, r0
    8dc8:	9303      	str	r3, [sp, #12]
    8dca:	e79f      	b.n	8d0c <__aeabi_ddiv+0x48>
    8dcc:	4651      	mov	r1, sl
    8dce:	465a      	mov	r2, fp
    8dd0:	4311      	orrs	r1, r2
    8dd2:	d129      	bne.n	8e28 <__aeabi_ddiv+0x164>
    8dd4:	2200      	movs	r2, #0
    8dd6:	4693      	mov	fp, r2
    8dd8:	3202      	adds	r2, #2
    8dda:	e7b1      	b.n	8d40 <__aeabi_ddiv+0x7c>
    8ddc:	4659      	mov	r1, fp
    8dde:	4301      	orrs	r1, r0
    8de0:	d01e      	beq.n	8e20 <__aeabi_ddiv+0x15c>
    8de2:	465b      	mov	r3, fp
    8de4:	2b00      	cmp	r3, #0
    8de6:	d100      	bne.n	8dea <__aeabi_ddiv+0x126>
    8de8:	e19e      	b.n	9128 <__aeabi_ddiv+0x464>
    8dea:	4658      	mov	r0, fp
    8dec:	f001 fade 	bl	a3ac <__clzsi2>
    8df0:	0003      	movs	r3, r0
    8df2:	3b0b      	subs	r3, #11
    8df4:	2b1c      	cmp	r3, #28
    8df6:	dd00      	ble.n	8dfa <__aeabi_ddiv+0x136>
    8df8:	e18f      	b.n	911a <__aeabi_ddiv+0x456>
    8dfa:	0002      	movs	r2, r0
    8dfc:	4659      	mov	r1, fp
    8dfe:	3a08      	subs	r2, #8
    8e00:	4091      	lsls	r1, r2
    8e02:	468b      	mov	fp, r1
    8e04:	211d      	movs	r1, #29
    8e06:	1acb      	subs	r3, r1, r3
    8e08:	4651      	mov	r1, sl
    8e0a:	40d9      	lsrs	r1, r3
    8e0c:	000b      	movs	r3, r1
    8e0e:	4659      	mov	r1, fp
    8e10:	430b      	orrs	r3, r1
    8e12:	4651      	mov	r1, sl
    8e14:	469b      	mov	fp, r3
    8e16:	4091      	lsls	r1, r2
    8e18:	4b26      	ldr	r3, [pc, #152]	; (8eb4 <__aeabi_ddiv+0x1f0>)
    8e1a:	2200      	movs	r2, #0
    8e1c:	1a1b      	subs	r3, r3, r0
    8e1e:	e78f      	b.n	8d40 <__aeabi_ddiv+0x7c>
    8e20:	2300      	movs	r3, #0
    8e22:	2201      	movs	r2, #1
    8e24:	469b      	mov	fp, r3
    8e26:	e78b      	b.n	8d40 <__aeabi_ddiv+0x7c>
    8e28:	4651      	mov	r1, sl
    8e2a:	2203      	movs	r2, #3
    8e2c:	e788      	b.n	8d40 <__aeabi_ddiv+0x7c>
    8e2e:	2300      	movs	r3, #0
    8e30:	4698      	mov	r8, r3
    8e32:	3301      	adds	r3, #1
    8e34:	2604      	movs	r6, #4
    8e36:	2400      	movs	r4, #0
    8e38:	9303      	str	r3, [sp, #12]
    8e3a:	e767      	b.n	8d0c <__aeabi_ddiv+0x48>
    8e3c:	2303      	movs	r3, #3
    8e3e:	46b1      	mov	r9, r6
    8e40:	9303      	str	r3, [sp, #12]
    8e42:	260c      	movs	r6, #12
    8e44:	e762      	b.n	8d0c <__aeabi_ddiv+0x48>
    8e46:	2a03      	cmp	r2, #3
    8e48:	d100      	bne.n	8e4c <__aeabi_ddiv+0x188>
    8e4a:	e25c      	b.n	9306 <__aeabi_ddiv+0x642>
    8e4c:	9b01      	ldr	r3, [sp, #4]
    8e4e:	2a01      	cmp	r2, #1
    8e50:	d000      	beq.n	8e54 <__aeabi_ddiv+0x190>
    8e52:	e1e4      	b.n	921e <__aeabi_ddiv+0x55a>
    8e54:	4013      	ands	r3, r2
    8e56:	469c      	mov	ip, r3
    8e58:	2300      	movs	r3, #0
    8e5a:	2400      	movs	r4, #0
    8e5c:	2200      	movs	r2, #0
    8e5e:	4698      	mov	r8, r3
    8e60:	2100      	movs	r1, #0
    8e62:	0312      	lsls	r2, r2, #12
    8e64:	0b13      	lsrs	r3, r2, #12
    8e66:	0d0a      	lsrs	r2, r1, #20
    8e68:	0512      	lsls	r2, r2, #20
    8e6a:	431a      	orrs	r2, r3
    8e6c:	0523      	lsls	r3, r4, #20
    8e6e:	4c12      	ldr	r4, [pc, #72]	; (8eb8 <__aeabi_ddiv+0x1f4>)
    8e70:	4640      	mov	r0, r8
    8e72:	4022      	ands	r2, r4
    8e74:	4313      	orrs	r3, r2
    8e76:	4662      	mov	r2, ip
    8e78:	005b      	lsls	r3, r3, #1
    8e7a:	07d2      	lsls	r2, r2, #31
    8e7c:	085b      	lsrs	r3, r3, #1
    8e7e:	4313      	orrs	r3, r2
    8e80:	0019      	movs	r1, r3
    8e82:	b007      	add	sp, #28
    8e84:	bc3c      	pop	{r2, r3, r4, r5}
    8e86:	4690      	mov	r8, r2
    8e88:	4699      	mov	r9, r3
    8e8a:	46a2      	mov	sl, r4
    8e8c:	46ab      	mov	fp, r5
    8e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e90:	2300      	movs	r3, #0
    8e92:	2280      	movs	r2, #128	; 0x80
    8e94:	469c      	mov	ip, r3
    8e96:	0312      	lsls	r2, r2, #12
    8e98:	4698      	mov	r8, r3
    8e9a:	4c03      	ldr	r4, [pc, #12]	; (8ea8 <__aeabi_ddiv+0x1e4>)
    8e9c:	e7e0      	b.n	8e60 <__aeabi_ddiv+0x19c>
    8e9e:	2300      	movs	r3, #0
    8ea0:	4c01      	ldr	r4, [pc, #4]	; (8ea8 <__aeabi_ddiv+0x1e4>)
    8ea2:	2200      	movs	r2, #0
    8ea4:	4698      	mov	r8, r3
    8ea6:	e7db      	b.n	8e60 <__aeabi_ddiv+0x19c>
    8ea8:	000007ff 	.word	0x000007ff
    8eac:	fffffc01 	.word	0xfffffc01
    8eb0:	0000a888 	.word	0x0000a888
    8eb4:	fffffc0d 	.word	0xfffffc0d
    8eb8:	800fffff 	.word	0x800fffff
    8ebc:	45d9      	cmp	r9, fp
    8ebe:	d900      	bls.n	8ec2 <__aeabi_ddiv+0x1fe>
    8ec0:	e139      	b.n	9136 <__aeabi_ddiv+0x472>
    8ec2:	d100      	bne.n	8ec6 <__aeabi_ddiv+0x202>
    8ec4:	e134      	b.n	9130 <__aeabi_ddiv+0x46c>
    8ec6:	2300      	movs	r3, #0
    8ec8:	4646      	mov	r6, r8
    8eca:	464d      	mov	r5, r9
    8ecc:	469a      	mov	sl, r3
    8ece:	3c01      	subs	r4, #1
    8ed0:	465b      	mov	r3, fp
    8ed2:	0e0a      	lsrs	r2, r1, #24
    8ed4:	021b      	lsls	r3, r3, #8
    8ed6:	431a      	orrs	r2, r3
    8ed8:	020b      	lsls	r3, r1, #8
    8eda:	0c17      	lsrs	r7, r2, #16
    8edc:	9303      	str	r3, [sp, #12]
    8ede:	0413      	lsls	r3, r2, #16
    8ee0:	0c1b      	lsrs	r3, r3, #16
    8ee2:	0039      	movs	r1, r7
    8ee4:	0028      	movs	r0, r5
    8ee6:	4690      	mov	r8, r2
    8ee8:	9301      	str	r3, [sp, #4]
    8eea:	f7fe fcd1 	bl	7890 <__udivsi3>
    8eee:	0002      	movs	r2, r0
    8ef0:	9b01      	ldr	r3, [sp, #4]
    8ef2:	4683      	mov	fp, r0
    8ef4:	435a      	muls	r2, r3
    8ef6:	0028      	movs	r0, r5
    8ef8:	0039      	movs	r1, r7
    8efa:	4691      	mov	r9, r2
    8efc:	f7fe fd4e 	bl	799c <__aeabi_uidivmod>
    8f00:	0c35      	lsrs	r5, r6, #16
    8f02:	0409      	lsls	r1, r1, #16
    8f04:	430d      	orrs	r5, r1
    8f06:	45a9      	cmp	r9, r5
    8f08:	d90d      	bls.n	8f26 <__aeabi_ddiv+0x262>
    8f0a:	465b      	mov	r3, fp
    8f0c:	4445      	add	r5, r8
    8f0e:	3b01      	subs	r3, #1
    8f10:	45a8      	cmp	r8, r5
    8f12:	d900      	bls.n	8f16 <__aeabi_ddiv+0x252>
    8f14:	e13a      	b.n	918c <__aeabi_ddiv+0x4c8>
    8f16:	45a9      	cmp	r9, r5
    8f18:	d800      	bhi.n	8f1c <__aeabi_ddiv+0x258>
    8f1a:	e137      	b.n	918c <__aeabi_ddiv+0x4c8>
    8f1c:	2302      	movs	r3, #2
    8f1e:	425b      	negs	r3, r3
    8f20:	469c      	mov	ip, r3
    8f22:	4445      	add	r5, r8
    8f24:	44e3      	add	fp, ip
    8f26:	464b      	mov	r3, r9
    8f28:	1aeb      	subs	r3, r5, r3
    8f2a:	0039      	movs	r1, r7
    8f2c:	0018      	movs	r0, r3
    8f2e:	9304      	str	r3, [sp, #16]
    8f30:	f7fe fcae 	bl	7890 <__udivsi3>
    8f34:	9b01      	ldr	r3, [sp, #4]
    8f36:	0005      	movs	r5, r0
    8f38:	4343      	muls	r3, r0
    8f3a:	0039      	movs	r1, r7
    8f3c:	9804      	ldr	r0, [sp, #16]
    8f3e:	4699      	mov	r9, r3
    8f40:	f7fe fd2c 	bl	799c <__aeabi_uidivmod>
    8f44:	0433      	lsls	r3, r6, #16
    8f46:	0409      	lsls	r1, r1, #16
    8f48:	0c1b      	lsrs	r3, r3, #16
    8f4a:	430b      	orrs	r3, r1
    8f4c:	4599      	cmp	r9, r3
    8f4e:	d909      	bls.n	8f64 <__aeabi_ddiv+0x2a0>
    8f50:	4443      	add	r3, r8
    8f52:	1e6a      	subs	r2, r5, #1
    8f54:	4598      	cmp	r8, r3
    8f56:	d900      	bls.n	8f5a <__aeabi_ddiv+0x296>
    8f58:	e11a      	b.n	9190 <__aeabi_ddiv+0x4cc>
    8f5a:	4599      	cmp	r9, r3
    8f5c:	d800      	bhi.n	8f60 <__aeabi_ddiv+0x29c>
    8f5e:	e117      	b.n	9190 <__aeabi_ddiv+0x4cc>
    8f60:	3d02      	subs	r5, #2
    8f62:	4443      	add	r3, r8
    8f64:	464a      	mov	r2, r9
    8f66:	1a9b      	subs	r3, r3, r2
    8f68:	465a      	mov	r2, fp
    8f6a:	0412      	lsls	r2, r2, #16
    8f6c:	432a      	orrs	r2, r5
    8f6e:	9903      	ldr	r1, [sp, #12]
    8f70:	4693      	mov	fp, r2
    8f72:	0c10      	lsrs	r0, r2, #16
    8f74:	0c0a      	lsrs	r2, r1, #16
    8f76:	4691      	mov	r9, r2
    8f78:	0409      	lsls	r1, r1, #16
    8f7a:	465a      	mov	r2, fp
    8f7c:	0c09      	lsrs	r1, r1, #16
    8f7e:	464e      	mov	r6, r9
    8f80:	000d      	movs	r5, r1
    8f82:	0412      	lsls	r2, r2, #16
    8f84:	0c12      	lsrs	r2, r2, #16
    8f86:	4345      	muls	r5, r0
    8f88:	9105      	str	r1, [sp, #20]
    8f8a:	4351      	muls	r1, r2
    8f8c:	4372      	muls	r2, r6
    8f8e:	4370      	muls	r0, r6
    8f90:	1952      	adds	r2, r2, r5
    8f92:	0c0e      	lsrs	r6, r1, #16
    8f94:	18b2      	adds	r2, r6, r2
    8f96:	4295      	cmp	r5, r2
    8f98:	d903      	bls.n	8fa2 <__aeabi_ddiv+0x2de>
    8f9a:	2580      	movs	r5, #128	; 0x80
    8f9c:	026d      	lsls	r5, r5, #9
    8f9e:	46ac      	mov	ip, r5
    8fa0:	4460      	add	r0, ip
    8fa2:	0c15      	lsrs	r5, r2, #16
    8fa4:	0409      	lsls	r1, r1, #16
    8fa6:	0412      	lsls	r2, r2, #16
    8fa8:	0c09      	lsrs	r1, r1, #16
    8faa:	1828      	adds	r0, r5, r0
    8fac:	1852      	adds	r2, r2, r1
    8fae:	4283      	cmp	r3, r0
    8fb0:	d200      	bcs.n	8fb4 <__aeabi_ddiv+0x2f0>
    8fb2:	e0ce      	b.n	9152 <__aeabi_ddiv+0x48e>
    8fb4:	d100      	bne.n	8fb8 <__aeabi_ddiv+0x2f4>
    8fb6:	e0c8      	b.n	914a <__aeabi_ddiv+0x486>
    8fb8:	1a1d      	subs	r5, r3, r0
    8fba:	4653      	mov	r3, sl
    8fbc:	1a9e      	subs	r6, r3, r2
    8fbe:	45b2      	cmp	sl, r6
    8fc0:	4192      	sbcs	r2, r2
    8fc2:	4252      	negs	r2, r2
    8fc4:	1aab      	subs	r3, r5, r2
    8fc6:	469a      	mov	sl, r3
    8fc8:	4598      	cmp	r8, r3
    8fca:	d100      	bne.n	8fce <__aeabi_ddiv+0x30a>
    8fcc:	e117      	b.n	91fe <__aeabi_ddiv+0x53a>
    8fce:	0039      	movs	r1, r7
    8fd0:	0018      	movs	r0, r3
    8fd2:	f7fe fc5d 	bl	7890 <__udivsi3>
    8fd6:	9b01      	ldr	r3, [sp, #4]
    8fd8:	0005      	movs	r5, r0
    8fda:	4343      	muls	r3, r0
    8fdc:	0039      	movs	r1, r7
    8fde:	4650      	mov	r0, sl
    8fe0:	9304      	str	r3, [sp, #16]
    8fe2:	f7fe fcdb 	bl	799c <__aeabi_uidivmod>
    8fe6:	9804      	ldr	r0, [sp, #16]
    8fe8:	040b      	lsls	r3, r1, #16
    8fea:	0c31      	lsrs	r1, r6, #16
    8fec:	4319      	orrs	r1, r3
    8fee:	4288      	cmp	r0, r1
    8ff0:	d909      	bls.n	9006 <__aeabi_ddiv+0x342>
    8ff2:	4441      	add	r1, r8
    8ff4:	1e6b      	subs	r3, r5, #1
    8ff6:	4588      	cmp	r8, r1
    8ff8:	d900      	bls.n	8ffc <__aeabi_ddiv+0x338>
    8ffa:	e107      	b.n	920c <__aeabi_ddiv+0x548>
    8ffc:	4288      	cmp	r0, r1
    8ffe:	d800      	bhi.n	9002 <__aeabi_ddiv+0x33e>
    9000:	e104      	b.n	920c <__aeabi_ddiv+0x548>
    9002:	3d02      	subs	r5, #2
    9004:	4441      	add	r1, r8
    9006:	9b04      	ldr	r3, [sp, #16]
    9008:	1acb      	subs	r3, r1, r3
    900a:	0018      	movs	r0, r3
    900c:	0039      	movs	r1, r7
    900e:	9304      	str	r3, [sp, #16]
    9010:	f7fe fc3e 	bl	7890 <__udivsi3>
    9014:	9b01      	ldr	r3, [sp, #4]
    9016:	4682      	mov	sl, r0
    9018:	4343      	muls	r3, r0
    901a:	0039      	movs	r1, r7
    901c:	9804      	ldr	r0, [sp, #16]
    901e:	9301      	str	r3, [sp, #4]
    9020:	f7fe fcbc 	bl	799c <__aeabi_uidivmod>
    9024:	9801      	ldr	r0, [sp, #4]
    9026:	040b      	lsls	r3, r1, #16
    9028:	0431      	lsls	r1, r6, #16
    902a:	0c09      	lsrs	r1, r1, #16
    902c:	4319      	orrs	r1, r3
    902e:	4288      	cmp	r0, r1
    9030:	d90d      	bls.n	904e <__aeabi_ddiv+0x38a>
    9032:	4653      	mov	r3, sl
    9034:	4441      	add	r1, r8
    9036:	3b01      	subs	r3, #1
    9038:	4588      	cmp	r8, r1
    903a:	d900      	bls.n	903e <__aeabi_ddiv+0x37a>
    903c:	e0e8      	b.n	9210 <__aeabi_ddiv+0x54c>
    903e:	4288      	cmp	r0, r1
    9040:	d800      	bhi.n	9044 <__aeabi_ddiv+0x380>
    9042:	e0e5      	b.n	9210 <__aeabi_ddiv+0x54c>
    9044:	2302      	movs	r3, #2
    9046:	425b      	negs	r3, r3
    9048:	469c      	mov	ip, r3
    904a:	4441      	add	r1, r8
    904c:	44e2      	add	sl, ip
    904e:	9b01      	ldr	r3, [sp, #4]
    9050:	042d      	lsls	r5, r5, #16
    9052:	1ace      	subs	r6, r1, r3
    9054:	4651      	mov	r1, sl
    9056:	4329      	orrs	r1, r5
    9058:	9d05      	ldr	r5, [sp, #20]
    905a:	464f      	mov	r7, r9
    905c:	002a      	movs	r2, r5
    905e:	040b      	lsls	r3, r1, #16
    9060:	0c08      	lsrs	r0, r1, #16
    9062:	0c1b      	lsrs	r3, r3, #16
    9064:	435a      	muls	r2, r3
    9066:	4345      	muls	r5, r0
    9068:	437b      	muls	r3, r7
    906a:	4378      	muls	r0, r7
    906c:	195b      	adds	r3, r3, r5
    906e:	0c17      	lsrs	r7, r2, #16
    9070:	18fb      	adds	r3, r7, r3
    9072:	429d      	cmp	r5, r3
    9074:	d903      	bls.n	907e <__aeabi_ddiv+0x3ba>
    9076:	2580      	movs	r5, #128	; 0x80
    9078:	026d      	lsls	r5, r5, #9
    907a:	46ac      	mov	ip, r5
    907c:	4460      	add	r0, ip
    907e:	0c1d      	lsrs	r5, r3, #16
    9080:	0412      	lsls	r2, r2, #16
    9082:	041b      	lsls	r3, r3, #16
    9084:	0c12      	lsrs	r2, r2, #16
    9086:	1828      	adds	r0, r5, r0
    9088:	189b      	adds	r3, r3, r2
    908a:	4286      	cmp	r6, r0
    908c:	d200      	bcs.n	9090 <__aeabi_ddiv+0x3cc>
    908e:	e093      	b.n	91b8 <__aeabi_ddiv+0x4f4>
    9090:	d100      	bne.n	9094 <__aeabi_ddiv+0x3d0>
    9092:	e08e      	b.n	91b2 <__aeabi_ddiv+0x4ee>
    9094:	2301      	movs	r3, #1
    9096:	4319      	orrs	r1, r3
    9098:	4ba0      	ldr	r3, [pc, #640]	; (931c <__aeabi_ddiv+0x658>)
    909a:	18e3      	adds	r3, r4, r3
    909c:	2b00      	cmp	r3, #0
    909e:	dc00      	bgt.n	90a2 <__aeabi_ddiv+0x3de>
    90a0:	e099      	b.n	91d6 <__aeabi_ddiv+0x512>
    90a2:	074a      	lsls	r2, r1, #29
    90a4:	d000      	beq.n	90a8 <__aeabi_ddiv+0x3e4>
    90a6:	e09e      	b.n	91e6 <__aeabi_ddiv+0x522>
    90a8:	465a      	mov	r2, fp
    90aa:	01d2      	lsls	r2, r2, #7
    90ac:	d506      	bpl.n	90bc <__aeabi_ddiv+0x3f8>
    90ae:	465a      	mov	r2, fp
    90b0:	4b9b      	ldr	r3, [pc, #620]	; (9320 <__aeabi_ddiv+0x65c>)
    90b2:	401a      	ands	r2, r3
    90b4:	2380      	movs	r3, #128	; 0x80
    90b6:	4693      	mov	fp, r2
    90b8:	00db      	lsls	r3, r3, #3
    90ba:	18e3      	adds	r3, r4, r3
    90bc:	4a99      	ldr	r2, [pc, #612]	; (9324 <__aeabi_ddiv+0x660>)
    90be:	4293      	cmp	r3, r2
    90c0:	dd68      	ble.n	9194 <__aeabi_ddiv+0x4d0>
    90c2:	2301      	movs	r3, #1
    90c4:	9a02      	ldr	r2, [sp, #8]
    90c6:	4c98      	ldr	r4, [pc, #608]	; (9328 <__aeabi_ddiv+0x664>)
    90c8:	401a      	ands	r2, r3
    90ca:	2300      	movs	r3, #0
    90cc:	4694      	mov	ip, r2
    90ce:	4698      	mov	r8, r3
    90d0:	2200      	movs	r2, #0
    90d2:	e6c5      	b.n	8e60 <__aeabi_ddiv+0x19c>
    90d4:	2280      	movs	r2, #128	; 0x80
    90d6:	464b      	mov	r3, r9
    90d8:	0312      	lsls	r2, r2, #12
    90da:	4213      	tst	r3, r2
    90dc:	d00a      	beq.n	90f4 <__aeabi_ddiv+0x430>
    90de:	465b      	mov	r3, fp
    90e0:	4213      	tst	r3, r2
    90e2:	d106      	bne.n	90f2 <__aeabi_ddiv+0x42e>
    90e4:	431a      	orrs	r2, r3
    90e6:	0312      	lsls	r2, r2, #12
    90e8:	0b12      	lsrs	r2, r2, #12
    90ea:	46ac      	mov	ip, r5
    90ec:	4688      	mov	r8, r1
    90ee:	4c8e      	ldr	r4, [pc, #568]	; (9328 <__aeabi_ddiv+0x664>)
    90f0:	e6b6      	b.n	8e60 <__aeabi_ddiv+0x19c>
    90f2:	464b      	mov	r3, r9
    90f4:	431a      	orrs	r2, r3
    90f6:	0312      	lsls	r2, r2, #12
    90f8:	0b12      	lsrs	r2, r2, #12
    90fa:	46bc      	mov	ip, r7
    90fc:	4c8a      	ldr	r4, [pc, #552]	; (9328 <__aeabi_ddiv+0x664>)
    90fe:	e6af      	b.n	8e60 <__aeabi_ddiv+0x19c>
    9100:	0003      	movs	r3, r0
    9102:	465a      	mov	r2, fp
    9104:	3b28      	subs	r3, #40	; 0x28
    9106:	409a      	lsls	r2, r3
    9108:	2300      	movs	r3, #0
    910a:	4691      	mov	r9, r2
    910c:	4698      	mov	r8, r3
    910e:	e657      	b.n	8dc0 <__aeabi_ddiv+0xfc>
    9110:	4658      	mov	r0, fp
    9112:	f001 f94b 	bl	a3ac <__clzsi2>
    9116:	3020      	adds	r0, #32
    9118:	e640      	b.n	8d9c <__aeabi_ddiv+0xd8>
    911a:	0003      	movs	r3, r0
    911c:	4652      	mov	r2, sl
    911e:	3b28      	subs	r3, #40	; 0x28
    9120:	409a      	lsls	r2, r3
    9122:	2100      	movs	r1, #0
    9124:	4693      	mov	fp, r2
    9126:	e677      	b.n	8e18 <__aeabi_ddiv+0x154>
    9128:	f001 f940 	bl	a3ac <__clzsi2>
    912c:	3020      	adds	r0, #32
    912e:	e65f      	b.n	8df0 <__aeabi_ddiv+0x12c>
    9130:	4588      	cmp	r8, r1
    9132:	d200      	bcs.n	9136 <__aeabi_ddiv+0x472>
    9134:	e6c7      	b.n	8ec6 <__aeabi_ddiv+0x202>
    9136:	464b      	mov	r3, r9
    9138:	07de      	lsls	r6, r3, #31
    913a:	085d      	lsrs	r5, r3, #1
    913c:	4643      	mov	r3, r8
    913e:	085b      	lsrs	r3, r3, #1
    9140:	431e      	orrs	r6, r3
    9142:	4643      	mov	r3, r8
    9144:	07db      	lsls	r3, r3, #31
    9146:	469a      	mov	sl, r3
    9148:	e6c2      	b.n	8ed0 <__aeabi_ddiv+0x20c>
    914a:	2500      	movs	r5, #0
    914c:	4592      	cmp	sl, r2
    914e:	d300      	bcc.n	9152 <__aeabi_ddiv+0x48e>
    9150:	e733      	b.n	8fba <__aeabi_ddiv+0x2f6>
    9152:	9e03      	ldr	r6, [sp, #12]
    9154:	4659      	mov	r1, fp
    9156:	46b4      	mov	ip, r6
    9158:	44e2      	add	sl, ip
    915a:	45b2      	cmp	sl, r6
    915c:	41ad      	sbcs	r5, r5
    915e:	426d      	negs	r5, r5
    9160:	4445      	add	r5, r8
    9162:	18eb      	adds	r3, r5, r3
    9164:	3901      	subs	r1, #1
    9166:	4598      	cmp	r8, r3
    9168:	d207      	bcs.n	917a <__aeabi_ddiv+0x4b6>
    916a:	4298      	cmp	r0, r3
    916c:	d900      	bls.n	9170 <__aeabi_ddiv+0x4ac>
    916e:	e07f      	b.n	9270 <__aeabi_ddiv+0x5ac>
    9170:	d100      	bne.n	9174 <__aeabi_ddiv+0x4b0>
    9172:	e0bc      	b.n	92ee <__aeabi_ddiv+0x62a>
    9174:	1a1d      	subs	r5, r3, r0
    9176:	468b      	mov	fp, r1
    9178:	e71f      	b.n	8fba <__aeabi_ddiv+0x2f6>
    917a:	4598      	cmp	r8, r3
    917c:	d1fa      	bne.n	9174 <__aeabi_ddiv+0x4b0>
    917e:	9d03      	ldr	r5, [sp, #12]
    9180:	4555      	cmp	r5, sl
    9182:	d9f2      	bls.n	916a <__aeabi_ddiv+0x4a6>
    9184:	4643      	mov	r3, r8
    9186:	468b      	mov	fp, r1
    9188:	1a1d      	subs	r5, r3, r0
    918a:	e716      	b.n	8fba <__aeabi_ddiv+0x2f6>
    918c:	469b      	mov	fp, r3
    918e:	e6ca      	b.n	8f26 <__aeabi_ddiv+0x262>
    9190:	0015      	movs	r5, r2
    9192:	e6e7      	b.n	8f64 <__aeabi_ddiv+0x2a0>
    9194:	465a      	mov	r2, fp
    9196:	08c9      	lsrs	r1, r1, #3
    9198:	0752      	lsls	r2, r2, #29
    919a:	430a      	orrs	r2, r1
    919c:	055b      	lsls	r3, r3, #21
    919e:	4690      	mov	r8, r2
    91a0:	0d5c      	lsrs	r4, r3, #21
    91a2:	465a      	mov	r2, fp
    91a4:	2301      	movs	r3, #1
    91a6:	9902      	ldr	r1, [sp, #8]
    91a8:	0252      	lsls	r2, r2, #9
    91aa:	4019      	ands	r1, r3
    91ac:	0b12      	lsrs	r2, r2, #12
    91ae:	468c      	mov	ip, r1
    91b0:	e656      	b.n	8e60 <__aeabi_ddiv+0x19c>
    91b2:	2b00      	cmp	r3, #0
    91b4:	d100      	bne.n	91b8 <__aeabi_ddiv+0x4f4>
    91b6:	e76f      	b.n	9098 <__aeabi_ddiv+0x3d4>
    91b8:	4446      	add	r6, r8
    91ba:	1e4a      	subs	r2, r1, #1
    91bc:	45b0      	cmp	r8, r6
    91be:	d929      	bls.n	9214 <__aeabi_ddiv+0x550>
    91c0:	0011      	movs	r1, r2
    91c2:	4286      	cmp	r6, r0
    91c4:	d000      	beq.n	91c8 <__aeabi_ddiv+0x504>
    91c6:	e765      	b.n	9094 <__aeabi_ddiv+0x3d0>
    91c8:	9a03      	ldr	r2, [sp, #12]
    91ca:	4293      	cmp	r3, r2
    91cc:	d000      	beq.n	91d0 <__aeabi_ddiv+0x50c>
    91ce:	e761      	b.n	9094 <__aeabi_ddiv+0x3d0>
    91d0:	e762      	b.n	9098 <__aeabi_ddiv+0x3d4>
    91d2:	2101      	movs	r1, #1
    91d4:	4249      	negs	r1, r1
    91d6:	2001      	movs	r0, #1
    91d8:	1ac2      	subs	r2, r0, r3
    91da:	2a38      	cmp	r2, #56	; 0x38
    91dc:	dd21      	ble.n	9222 <__aeabi_ddiv+0x55e>
    91de:	9b02      	ldr	r3, [sp, #8]
    91e0:	4003      	ands	r3, r0
    91e2:	469c      	mov	ip, r3
    91e4:	e638      	b.n	8e58 <__aeabi_ddiv+0x194>
    91e6:	220f      	movs	r2, #15
    91e8:	400a      	ands	r2, r1
    91ea:	2a04      	cmp	r2, #4
    91ec:	d100      	bne.n	91f0 <__aeabi_ddiv+0x52c>
    91ee:	e75b      	b.n	90a8 <__aeabi_ddiv+0x3e4>
    91f0:	000a      	movs	r2, r1
    91f2:	1d11      	adds	r1, r2, #4
    91f4:	4291      	cmp	r1, r2
    91f6:	4192      	sbcs	r2, r2
    91f8:	4252      	negs	r2, r2
    91fa:	4493      	add	fp, r2
    91fc:	e754      	b.n	90a8 <__aeabi_ddiv+0x3e4>
    91fe:	4b47      	ldr	r3, [pc, #284]	; (931c <__aeabi_ddiv+0x658>)
    9200:	18e3      	adds	r3, r4, r3
    9202:	2b00      	cmp	r3, #0
    9204:	dde5      	ble.n	91d2 <__aeabi_ddiv+0x50e>
    9206:	2201      	movs	r2, #1
    9208:	4252      	negs	r2, r2
    920a:	e7f2      	b.n	91f2 <__aeabi_ddiv+0x52e>
    920c:	001d      	movs	r5, r3
    920e:	e6fa      	b.n	9006 <__aeabi_ddiv+0x342>
    9210:	469a      	mov	sl, r3
    9212:	e71c      	b.n	904e <__aeabi_ddiv+0x38a>
    9214:	42b0      	cmp	r0, r6
    9216:	d839      	bhi.n	928c <__aeabi_ddiv+0x5c8>
    9218:	d06e      	beq.n	92f8 <__aeabi_ddiv+0x634>
    921a:	0011      	movs	r1, r2
    921c:	e73a      	b.n	9094 <__aeabi_ddiv+0x3d0>
    921e:	9302      	str	r3, [sp, #8]
    9220:	e73a      	b.n	9098 <__aeabi_ddiv+0x3d4>
    9222:	2a1f      	cmp	r2, #31
    9224:	dc3c      	bgt.n	92a0 <__aeabi_ddiv+0x5dc>
    9226:	2320      	movs	r3, #32
    9228:	1a9b      	subs	r3, r3, r2
    922a:	000c      	movs	r4, r1
    922c:	4658      	mov	r0, fp
    922e:	4099      	lsls	r1, r3
    9230:	4098      	lsls	r0, r3
    9232:	1e4b      	subs	r3, r1, #1
    9234:	4199      	sbcs	r1, r3
    9236:	465b      	mov	r3, fp
    9238:	40d4      	lsrs	r4, r2
    923a:	40d3      	lsrs	r3, r2
    923c:	4320      	orrs	r0, r4
    923e:	4308      	orrs	r0, r1
    9240:	001a      	movs	r2, r3
    9242:	0743      	lsls	r3, r0, #29
    9244:	d009      	beq.n	925a <__aeabi_ddiv+0x596>
    9246:	230f      	movs	r3, #15
    9248:	4003      	ands	r3, r0
    924a:	2b04      	cmp	r3, #4
    924c:	d005      	beq.n	925a <__aeabi_ddiv+0x596>
    924e:	0001      	movs	r1, r0
    9250:	1d08      	adds	r0, r1, #4
    9252:	4288      	cmp	r0, r1
    9254:	419b      	sbcs	r3, r3
    9256:	425b      	negs	r3, r3
    9258:	18d2      	adds	r2, r2, r3
    925a:	0213      	lsls	r3, r2, #8
    925c:	d53a      	bpl.n	92d4 <__aeabi_ddiv+0x610>
    925e:	2301      	movs	r3, #1
    9260:	9a02      	ldr	r2, [sp, #8]
    9262:	2401      	movs	r4, #1
    9264:	401a      	ands	r2, r3
    9266:	2300      	movs	r3, #0
    9268:	4694      	mov	ip, r2
    926a:	4698      	mov	r8, r3
    926c:	2200      	movs	r2, #0
    926e:	e5f7      	b.n	8e60 <__aeabi_ddiv+0x19c>
    9270:	2102      	movs	r1, #2
    9272:	4249      	negs	r1, r1
    9274:	468c      	mov	ip, r1
    9276:	9d03      	ldr	r5, [sp, #12]
    9278:	44e3      	add	fp, ip
    927a:	46ac      	mov	ip, r5
    927c:	44e2      	add	sl, ip
    927e:	45aa      	cmp	sl, r5
    9280:	41ad      	sbcs	r5, r5
    9282:	426d      	negs	r5, r5
    9284:	4445      	add	r5, r8
    9286:	18ed      	adds	r5, r5, r3
    9288:	1a2d      	subs	r5, r5, r0
    928a:	e696      	b.n	8fba <__aeabi_ddiv+0x2f6>
    928c:	1e8a      	subs	r2, r1, #2
    928e:	9903      	ldr	r1, [sp, #12]
    9290:	004d      	lsls	r5, r1, #1
    9292:	428d      	cmp	r5, r1
    9294:	4189      	sbcs	r1, r1
    9296:	4249      	negs	r1, r1
    9298:	4441      	add	r1, r8
    929a:	1876      	adds	r6, r6, r1
    929c:	9503      	str	r5, [sp, #12]
    929e:	e78f      	b.n	91c0 <__aeabi_ddiv+0x4fc>
    92a0:	201f      	movs	r0, #31
    92a2:	4240      	negs	r0, r0
    92a4:	1ac3      	subs	r3, r0, r3
    92a6:	4658      	mov	r0, fp
    92a8:	40d8      	lsrs	r0, r3
    92aa:	0003      	movs	r3, r0
    92ac:	2a20      	cmp	r2, #32
    92ae:	d028      	beq.n	9302 <__aeabi_ddiv+0x63e>
    92b0:	2040      	movs	r0, #64	; 0x40
    92b2:	465d      	mov	r5, fp
    92b4:	1a82      	subs	r2, r0, r2
    92b6:	4095      	lsls	r5, r2
    92b8:	4329      	orrs	r1, r5
    92ba:	1e4a      	subs	r2, r1, #1
    92bc:	4191      	sbcs	r1, r2
    92be:	4319      	orrs	r1, r3
    92c0:	2307      	movs	r3, #7
    92c2:	2200      	movs	r2, #0
    92c4:	400b      	ands	r3, r1
    92c6:	d009      	beq.n	92dc <__aeabi_ddiv+0x618>
    92c8:	230f      	movs	r3, #15
    92ca:	2200      	movs	r2, #0
    92cc:	400b      	ands	r3, r1
    92ce:	0008      	movs	r0, r1
    92d0:	2b04      	cmp	r3, #4
    92d2:	d1bd      	bne.n	9250 <__aeabi_ddiv+0x58c>
    92d4:	0001      	movs	r1, r0
    92d6:	0753      	lsls	r3, r2, #29
    92d8:	0252      	lsls	r2, r2, #9
    92da:	0b12      	lsrs	r2, r2, #12
    92dc:	08c9      	lsrs	r1, r1, #3
    92de:	4319      	orrs	r1, r3
    92e0:	2301      	movs	r3, #1
    92e2:	4688      	mov	r8, r1
    92e4:	9902      	ldr	r1, [sp, #8]
    92e6:	2400      	movs	r4, #0
    92e8:	4019      	ands	r1, r3
    92ea:	468c      	mov	ip, r1
    92ec:	e5b8      	b.n	8e60 <__aeabi_ddiv+0x19c>
    92ee:	4552      	cmp	r2, sl
    92f0:	d8be      	bhi.n	9270 <__aeabi_ddiv+0x5ac>
    92f2:	468b      	mov	fp, r1
    92f4:	2500      	movs	r5, #0
    92f6:	e660      	b.n	8fba <__aeabi_ddiv+0x2f6>
    92f8:	9d03      	ldr	r5, [sp, #12]
    92fa:	429d      	cmp	r5, r3
    92fc:	d3c6      	bcc.n	928c <__aeabi_ddiv+0x5c8>
    92fe:	0011      	movs	r1, r2
    9300:	e762      	b.n	91c8 <__aeabi_ddiv+0x504>
    9302:	2500      	movs	r5, #0
    9304:	e7d8      	b.n	92b8 <__aeabi_ddiv+0x5f4>
    9306:	2280      	movs	r2, #128	; 0x80
    9308:	465b      	mov	r3, fp
    930a:	0312      	lsls	r2, r2, #12
    930c:	431a      	orrs	r2, r3
    930e:	9b01      	ldr	r3, [sp, #4]
    9310:	0312      	lsls	r2, r2, #12
    9312:	0b12      	lsrs	r2, r2, #12
    9314:	469c      	mov	ip, r3
    9316:	4688      	mov	r8, r1
    9318:	4c03      	ldr	r4, [pc, #12]	; (9328 <__aeabi_ddiv+0x664>)
    931a:	e5a1      	b.n	8e60 <__aeabi_ddiv+0x19c>
    931c:	000003ff 	.word	0x000003ff
    9320:	feffffff 	.word	0xfeffffff
    9324:	000007fe 	.word	0x000007fe
    9328:	000007ff 	.word	0x000007ff

0000932c <__eqdf2>:
    932c:	b5f0      	push	{r4, r5, r6, r7, lr}
    932e:	464f      	mov	r7, r9
    9330:	4646      	mov	r6, r8
    9332:	46d6      	mov	lr, sl
    9334:	005c      	lsls	r4, r3, #1
    9336:	b5c0      	push	{r6, r7, lr}
    9338:	031f      	lsls	r7, r3, #12
    933a:	0fdb      	lsrs	r3, r3, #31
    933c:	469a      	mov	sl, r3
    933e:	4b17      	ldr	r3, [pc, #92]	; (939c <__eqdf2+0x70>)
    9340:	030e      	lsls	r6, r1, #12
    9342:	004d      	lsls	r5, r1, #1
    9344:	4684      	mov	ip, r0
    9346:	4680      	mov	r8, r0
    9348:	0b36      	lsrs	r6, r6, #12
    934a:	0d6d      	lsrs	r5, r5, #21
    934c:	0fc9      	lsrs	r1, r1, #31
    934e:	4691      	mov	r9, r2
    9350:	0b3f      	lsrs	r7, r7, #12
    9352:	0d64      	lsrs	r4, r4, #21
    9354:	2001      	movs	r0, #1
    9356:	429d      	cmp	r5, r3
    9358:	d008      	beq.n	936c <__eqdf2+0x40>
    935a:	429c      	cmp	r4, r3
    935c:	d001      	beq.n	9362 <__eqdf2+0x36>
    935e:	42a5      	cmp	r5, r4
    9360:	d00b      	beq.n	937a <__eqdf2+0x4e>
    9362:	bc1c      	pop	{r2, r3, r4}
    9364:	4690      	mov	r8, r2
    9366:	4699      	mov	r9, r3
    9368:	46a2      	mov	sl, r4
    936a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    936c:	4663      	mov	r3, ip
    936e:	4333      	orrs	r3, r6
    9370:	d1f7      	bne.n	9362 <__eqdf2+0x36>
    9372:	42ac      	cmp	r4, r5
    9374:	d1f5      	bne.n	9362 <__eqdf2+0x36>
    9376:	433a      	orrs	r2, r7
    9378:	d1f3      	bne.n	9362 <__eqdf2+0x36>
    937a:	2001      	movs	r0, #1
    937c:	42be      	cmp	r6, r7
    937e:	d1f0      	bne.n	9362 <__eqdf2+0x36>
    9380:	45c8      	cmp	r8, r9
    9382:	d1ee      	bne.n	9362 <__eqdf2+0x36>
    9384:	4551      	cmp	r1, sl
    9386:	d007      	beq.n	9398 <__eqdf2+0x6c>
    9388:	2d00      	cmp	r5, #0
    938a:	d1ea      	bne.n	9362 <__eqdf2+0x36>
    938c:	4663      	mov	r3, ip
    938e:	431e      	orrs	r6, r3
    9390:	0030      	movs	r0, r6
    9392:	1e46      	subs	r6, r0, #1
    9394:	41b0      	sbcs	r0, r6
    9396:	e7e4      	b.n	9362 <__eqdf2+0x36>
    9398:	2000      	movs	r0, #0
    939a:	e7e2      	b.n	9362 <__eqdf2+0x36>
    939c:	000007ff 	.word	0x000007ff

000093a0 <__gedf2>:
    93a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    93a2:	4645      	mov	r5, r8
    93a4:	46de      	mov	lr, fp
    93a6:	4657      	mov	r7, sl
    93a8:	464e      	mov	r6, r9
    93aa:	b5e0      	push	{r5, r6, r7, lr}
    93ac:	031f      	lsls	r7, r3, #12
    93ae:	0b3d      	lsrs	r5, r7, #12
    93b0:	4f2c      	ldr	r7, [pc, #176]	; (9464 <__gedf2+0xc4>)
    93b2:	030e      	lsls	r6, r1, #12
    93b4:	004c      	lsls	r4, r1, #1
    93b6:	46ab      	mov	fp, r5
    93b8:	005d      	lsls	r5, r3, #1
    93ba:	4684      	mov	ip, r0
    93bc:	0b36      	lsrs	r6, r6, #12
    93be:	0d64      	lsrs	r4, r4, #21
    93c0:	0fc9      	lsrs	r1, r1, #31
    93c2:	4690      	mov	r8, r2
    93c4:	0d6d      	lsrs	r5, r5, #21
    93c6:	0fdb      	lsrs	r3, r3, #31
    93c8:	42bc      	cmp	r4, r7
    93ca:	d02a      	beq.n	9422 <__gedf2+0x82>
    93cc:	4f25      	ldr	r7, [pc, #148]	; (9464 <__gedf2+0xc4>)
    93ce:	42bd      	cmp	r5, r7
    93d0:	d02d      	beq.n	942e <__gedf2+0x8e>
    93d2:	2c00      	cmp	r4, #0
    93d4:	d10f      	bne.n	93f6 <__gedf2+0x56>
    93d6:	4330      	orrs	r0, r6
    93d8:	0007      	movs	r7, r0
    93da:	4681      	mov	r9, r0
    93dc:	4278      	negs	r0, r7
    93de:	4178      	adcs	r0, r7
    93e0:	b2c0      	uxtb	r0, r0
    93e2:	2d00      	cmp	r5, #0
    93e4:	d117      	bne.n	9416 <__gedf2+0x76>
    93e6:	465f      	mov	r7, fp
    93e8:	433a      	orrs	r2, r7
    93ea:	d114      	bne.n	9416 <__gedf2+0x76>
    93ec:	464b      	mov	r3, r9
    93ee:	2000      	movs	r0, #0
    93f0:	2b00      	cmp	r3, #0
    93f2:	d00a      	beq.n	940a <__gedf2+0x6a>
    93f4:	e006      	b.n	9404 <__gedf2+0x64>
    93f6:	2d00      	cmp	r5, #0
    93f8:	d102      	bne.n	9400 <__gedf2+0x60>
    93fa:	4658      	mov	r0, fp
    93fc:	4302      	orrs	r2, r0
    93fe:	d001      	beq.n	9404 <__gedf2+0x64>
    9400:	4299      	cmp	r1, r3
    9402:	d018      	beq.n	9436 <__gedf2+0x96>
    9404:	4248      	negs	r0, r1
    9406:	2101      	movs	r1, #1
    9408:	4308      	orrs	r0, r1
    940a:	bc3c      	pop	{r2, r3, r4, r5}
    940c:	4690      	mov	r8, r2
    940e:	4699      	mov	r9, r3
    9410:	46a2      	mov	sl, r4
    9412:	46ab      	mov	fp, r5
    9414:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9416:	2800      	cmp	r0, #0
    9418:	d0f2      	beq.n	9400 <__gedf2+0x60>
    941a:	2001      	movs	r0, #1
    941c:	3b01      	subs	r3, #1
    941e:	4318      	orrs	r0, r3
    9420:	e7f3      	b.n	940a <__gedf2+0x6a>
    9422:	0037      	movs	r7, r6
    9424:	4307      	orrs	r7, r0
    9426:	d0d1      	beq.n	93cc <__gedf2+0x2c>
    9428:	2002      	movs	r0, #2
    942a:	4240      	negs	r0, r0
    942c:	e7ed      	b.n	940a <__gedf2+0x6a>
    942e:	465f      	mov	r7, fp
    9430:	4317      	orrs	r7, r2
    9432:	d0ce      	beq.n	93d2 <__gedf2+0x32>
    9434:	e7f8      	b.n	9428 <__gedf2+0x88>
    9436:	42ac      	cmp	r4, r5
    9438:	dce4      	bgt.n	9404 <__gedf2+0x64>
    943a:	da03      	bge.n	9444 <__gedf2+0xa4>
    943c:	1e48      	subs	r0, r1, #1
    943e:	2101      	movs	r1, #1
    9440:	4308      	orrs	r0, r1
    9442:	e7e2      	b.n	940a <__gedf2+0x6a>
    9444:	455e      	cmp	r6, fp
    9446:	d8dd      	bhi.n	9404 <__gedf2+0x64>
    9448:	d006      	beq.n	9458 <__gedf2+0xb8>
    944a:	2000      	movs	r0, #0
    944c:	455e      	cmp	r6, fp
    944e:	d2dc      	bcs.n	940a <__gedf2+0x6a>
    9450:	2301      	movs	r3, #1
    9452:	1e48      	subs	r0, r1, #1
    9454:	4318      	orrs	r0, r3
    9456:	e7d8      	b.n	940a <__gedf2+0x6a>
    9458:	45c4      	cmp	ip, r8
    945a:	d8d3      	bhi.n	9404 <__gedf2+0x64>
    945c:	2000      	movs	r0, #0
    945e:	45c4      	cmp	ip, r8
    9460:	d3f6      	bcc.n	9450 <__gedf2+0xb0>
    9462:	e7d2      	b.n	940a <__gedf2+0x6a>
    9464:	000007ff 	.word	0x000007ff

00009468 <__ledf2>:
    9468:	b5f0      	push	{r4, r5, r6, r7, lr}
    946a:	464e      	mov	r6, r9
    946c:	4645      	mov	r5, r8
    946e:	46de      	mov	lr, fp
    9470:	4657      	mov	r7, sl
    9472:	005c      	lsls	r4, r3, #1
    9474:	b5e0      	push	{r5, r6, r7, lr}
    9476:	031f      	lsls	r7, r3, #12
    9478:	0fdb      	lsrs	r3, r3, #31
    947a:	4699      	mov	r9, r3
    947c:	4b2a      	ldr	r3, [pc, #168]	; (9528 <__ledf2+0xc0>)
    947e:	030e      	lsls	r6, r1, #12
    9480:	004d      	lsls	r5, r1, #1
    9482:	0fc9      	lsrs	r1, r1, #31
    9484:	4684      	mov	ip, r0
    9486:	0b36      	lsrs	r6, r6, #12
    9488:	0d6d      	lsrs	r5, r5, #21
    948a:	468b      	mov	fp, r1
    948c:	4690      	mov	r8, r2
    948e:	0b3f      	lsrs	r7, r7, #12
    9490:	0d64      	lsrs	r4, r4, #21
    9492:	429d      	cmp	r5, r3
    9494:	d020      	beq.n	94d8 <__ledf2+0x70>
    9496:	4b24      	ldr	r3, [pc, #144]	; (9528 <__ledf2+0xc0>)
    9498:	429c      	cmp	r4, r3
    949a:	d022      	beq.n	94e2 <__ledf2+0x7a>
    949c:	2d00      	cmp	r5, #0
    949e:	d112      	bne.n	94c6 <__ledf2+0x5e>
    94a0:	4330      	orrs	r0, r6
    94a2:	4243      	negs	r3, r0
    94a4:	4143      	adcs	r3, r0
    94a6:	b2db      	uxtb	r3, r3
    94a8:	2c00      	cmp	r4, #0
    94aa:	d01f      	beq.n	94ec <__ledf2+0x84>
    94ac:	2b00      	cmp	r3, #0
    94ae:	d00c      	beq.n	94ca <__ledf2+0x62>
    94b0:	464b      	mov	r3, r9
    94b2:	2001      	movs	r0, #1
    94b4:	3b01      	subs	r3, #1
    94b6:	4303      	orrs	r3, r0
    94b8:	0018      	movs	r0, r3
    94ba:	bc3c      	pop	{r2, r3, r4, r5}
    94bc:	4690      	mov	r8, r2
    94be:	4699      	mov	r9, r3
    94c0:	46a2      	mov	sl, r4
    94c2:	46ab      	mov	fp, r5
    94c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    94c6:	2c00      	cmp	r4, #0
    94c8:	d016      	beq.n	94f8 <__ledf2+0x90>
    94ca:	45cb      	cmp	fp, r9
    94cc:	d017      	beq.n	94fe <__ledf2+0x96>
    94ce:	465b      	mov	r3, fp
    94d0:	4259      	negs	r1, r3
    94d2:	2301      	movs	r3, #1
    94d4:	430b      	orrs	r3, r1
    94d6:	e7ef      	b.n	94b8 <__ledf2+0x50>
    94d8:	0031      	movs	r1, r6
    94da:	2302      	movs	r3, #2
    94dc:	4301      	orrs	r1, r0
    94de:	d1eb      	bne.n	94b8 <__ledf2+0x50>
    94e0:	e7d9      	b.n	9496 <__ledf2+0x2e>
    94e2:	0039      	movs	r1, r7
    94e4:	2302      	movs	r3, #2
    94e6:	4311      	orrs	r1, r2
    94e8:	d1e6      	bne.n	94b8 <__ledf2+0x50>
    94ea:	e7d7      	b.n	949c <__ledf2+0x34>
    94ec:	433a      	orrs	r2, r7
    94ee:	d1dd      	bne.n	94ac <__ledf2+0x44>
    94f0:	2300      	movs	r3, #0
    94f2:	2800      	cmp	r0, #0
    94f4:	d0e0      	beq.n	94b8 <__ledf2+0x50>
    94f6:	e7ea      	b.n	94ce <__ledf2+0x66>
    94f8:	433a      	orrs	r2, r7
    94fa:	d1e6      	bne.n	94ca <__ledf2+0x62>
    94fc:	e7e7      	b.n	94ce <__ledf2+0x66>
    94fe:	42a5      	cmp	r5, r4
    9500:	dce5      	bgt.n	94ce <__ledf2+0x66>
    9502:	db05      	blt.n	9510 <__ledf2+0xa8>
    9504:	42be      	cmp	r6, r7
    9506:	d8e2      	bhi.n	94ce <__ledf2+0x66>
    9508:	d007      	beq.n	951a <__ledf2+0xb2>
    950a:	2300      	movs	r3, #0
    950c:	42be      	cmp	r6, r7
    950e:	d2d3      	bcs.n	94b8 <__ledf2+0x50>
    9510:	4659      	mov	r1, fp
    9512:	2301      	movs	r3, #1
    9514:	3901      	subs	r1, #1
    9516:	430b      	orrs	r3, r1
    9518:	e7ce      	b.n	94b8 <__ledf2+0x50>
    951a:	45c4      	cmp	ip, r8
    951c:	d8d7      	bhi.n	94ce <__ledf2+0x66>
    951e:	2300      	movs	r3, #0
    9520:	45c4      	cmp	ip, r8
    9522:	d3f5      	bcc.n	9510 <__ledf2+0xa8>
    9524:	e7c8      	b.n	94b8 <__ledf2+0x50>
    9526:	46c0      	nop			; (mov r8, r8)
    9528:	000007ff 	.word	0x000007ff

0000952c <__aeabi_dmul>:
    952c:	b5f0      	push	{r4, r5, r6, r7, lr}
    952e:	4657      	mov	r7, sl
    9530:	4645      	mov	r5, r8
    9532:	46de      	mov	lr, fp
    9534:	464e      	mov	r6, r9
    9536:	b5e0      	push	{r5, r6, r7, lr}
    9538:	030c      	lsls	r4, r1, #12
    953a:	4698      	mov	r8, r3
    953c:	004e      	lsls	r6, r1, #1
    953e:	0b23      	lsrs	r3, r4, #12
    9540:	b087      	sub	sp, #28
    9542:	0007      	movs	r7, r0
    9544:	4692      	mov	sl, r2
    9546:	469b      	mov	fp, r3
    9548:	0d76      	lsrs	r6, r6, #21
    954a:	0fcd      	lsrs	r5, r1, #31
    954c:	2e00      	cmp	r6, #0
    954e:	d06b      	beq.n	9628 <__aeabi_dmul+0xfc>
    9550:	4b6d      	ldr	r3, [pc, #436]	; (9708 <__aeabi_dmul+0x1dc>)
    9552:	429e      	cmp	r6, r3
    9554:	d035      	beq.n	95c2 <__aeabi_dmul+0x96>
    9556:	2480      	movs	r4, #128	; 0x80
    9558:	465b      	mov	r3, fp
    955a:	0f42      	lsrs	r2, r0, #29
    955c:	0424      	lsls	r4, r4, #16
    955e:	00db      	lsls	r3, r3, #3
    9560:	4314      	orrs	r4, r2
    9562:	431c      	orrs	r4, r3
    9564:	00c3      	lsls	r3, r0, #3
    9566:	4699      	mov	r9, r3
    9568:	4b68      	ldr	r3, [pc, #416]	; (970c <__aeabi_dmul+0x1e0>)
    956a:	46a3      	mov	fp, r4
    956c:	469c      	mov	ip, r3
    956e:	2300      	movs	r3, #0
    9570:	2700      	movs	r7, #0
    9572:	4466      	add	r6, ip
    9574:	9302      	str	r3, [sp, #8]
    9576:	4643      	mov	r3, r8
    9578:	031c      	lsls	r4, r3, #12
    957a:	005a      	lsls	r2, r3, #1
    957c:	0fdb      	lsrs	r3, r3, #31
    957e:	4650      	mov	r0, sl
    9580:	0b24      	lsrs	r4, r4, #12
    9582:	0d52      	lsrs	r2, r2, #21
    9584:	4698      	mov	r8, r3
    9586:	d100      	bne.n	958a <__aeabi_dmul+0x5e>
    9588:	e076      	b.n	9678 <__aeabi_dmul+0x14c>
    958a:	4b5f      	ldr	r3, [pc, #380]	; (9708 <__aeabi_dmul+0x1dc>)
    958c:	429a      	cmp	r2, r3
    958e:	d06d      	beq.n	966c <__aeabi_dmul+0x140>
    9590:	2380      	movs	r3, #128	; 0x80
    9592:	0f41      	lsrs	r1, r0, #29
    9594:	041b      	lsls	r3, r3, #16
    9596:	430b      	orrs	r3, r1
    9598:	495c      	ldr	r1, [pc, #368]	; (970c <__aeabi_dmul+0x1e0>)
    959a:	00e4      	lsls	r4, r4, #3
    959c:	468c      	mov	ip, r1
    959e:	431c      	orrs	r4, r3
    95a0:	00c3      	lsls	r3, r0, #3
    95a2:	2000      	movs	r0, #0
    95a4:	4462      	add	r2, ip
    95a6:	4641      	mov	r1, r8
    95a8:	18b6      	adds	r6, r6, r2
    95aa:	4069      	eors	r1, r5
    95ac:	1c72      	adds	r2, r6, #1
    95ae:	9101      	str	r1, [sp, #4]
    95b0:	4694      	mov	ip, r2
    95b2:	4307      	orrs	r7, r0
    95b4:	2f0f      	cmp	r7, #15
    95b6:	d900      	bls.n	95ba <__aeabi_dmul+0x8e>
    95b8:	e0b0      	b.n	971c <__aeabi_dmul+0x1f0>
    95ba:	4a55      	ldr	r2, [pc, #340]	; (9710 <__aeabi_dmul+0x1e4>)
    95bc:	00bf      	lsls	r7, r7, #2
    95be:	59d2      	ldr	r2, [r2, r7]
    95c0:	4697      	mov	pc, r2
    95c2:	465b      	mov	r3, fp
    95c4:	4303      	orrs	r3, r0
    95c6:	4699      	mov	r9, r3
    95c8:	d000      	beq.n	95cc <__aeabi_dmul+0xa0>
    95ca:	e087      	b.n	96dc <__aeabi_dmul+0x1b0>
    95cc:	2300      	movs	r3, #0
    95ce:	469b      	mov	fp, r3
    95d0:	3302      	adds	r3, #2
    95d2:	2708      	movs	r7, #8
    95d4:	9302      	str	r3, [sp, #8]
    95d6:	e7ce      	b.n	9576 <__aeabi_dmul+0x4a>
    95d8:	4642      	mov	r2, r8
    95da:	9201      	str	r2, [sp, #4]
    95dc:	2802      	cmp	r0, #2
    95de:	d067      	beq.n	96b0 <__aeabi_dmul+0x184>
    95e0:	2803      	cmp	r0, #3
    95e2:	d100      	bne.n	95e6 <__aeabi_dmul+0xba>
    95e4:	e20e      	b.n	9a04 <__aeabi_dmul+0x4d8>
    95e6:	2801      	cmp	r0, #1
    95e8:	d000      	beq.n	95ec <__aeabi_dmul+0xc0>
    95ea:	e162      	b.n	98b2 <__aeabi_dmul+0x386>
    95ec:	2300      	movs	r3, #0
    95ee:	2400      	movs	r4, #0
    95f0:	2200      	movs	r2, #0
    95f2:	4699      	mov	r9, r3
    95f4:	9901      	ldr	r1, [sp, #4]
    95f6:	4001      	ands	r1, r0
    95f8:	b2cd      	uxtb	r5, r1
    95fa:	2100      	movs	r1, #0
    95fc:	0312      	lsls	r2, r2, #12
    95fe:	0d0b      	lsrs	r3, r1, #20
    9600:	0b12      	lsrs	r2, r2, #12
    9602:	051b      	lsls	r3, r3, #20
    9604:	4313      	orrs	r3, r2
    9606:	4a43      	ldr	r2, [pc, #268]	; (9714 <__aeabi_dmul+0x1e8>)
    9608:	0524      	lsls	r4, r4, #20
    960a:	4013      	ands	r3, r2
    960c:	431c      	orrs	r4, r3
    960e:	0064      	lsls	r4, r4, #1
    9610:	07ed      	lsls	r5, r5, #31
    9612:	0864      	lsrs	r4, r4, #1
    9614:	432c      	orrs	r4, r5
    9616:	4648      	mov	r0, r9
    9618:	0021      	movs	r1, r4
    961a:	b007      	add	sp, #28
    961c:	bc3c      	pop	{r2, r3, r4, r5}
    961e:	4690      	mov	r8, r2
    9620:	4699      	mov	r9, r3
    9622:	46a2      	mov	sl, r4
    9624:	46ab      	mov	fp, r5
    9626:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9628:	4303      	orrs	r3, r0
    962a:	4699      	mov	r9, r3
    962c:	d04f      	beq.n	96ce <__aeabi_dmul+0x1a2>
    962e:	465b      	mov	r3, fp
    9630:	2b00      	cmp	r3, #0
    9632:	d100      	bne.n	9636 <__aeabi_dmul+0x10a>
    9634:	e189      	b.n	994a <__aeabi_dmul+0x41e>
    9636:	4658      	mov	r0, fp
    9638:	f000 feb8 	bl	a3ac <__clzsi2>
    963c:	0003      	movs	r3, r0
    963e:	3b0b      	subs	r3, #11
    9640:	2b1c      	cmp	r3, #28
    9642:	dd00      	ble.n	9646 <__aeabi_dmul+0x11a>
    9644:	e17a      	b.n	993c <__aeabi_dmul+0x410>
    9646:	221d      	movs	r2, #29
    9648:	1ad3      	subs	r3, r2, r3
    964a:	003a      	movs	r2, r7
    964c:	0001      	movs	r1, r0
    964e:	465c      	mov	r4, fp
    9650:	40da      	lsrs	r2, r3
    9652:	3908      	subs	r1, #8
    9654:	408c      	lsls	r4, r1
    9656:	0013      	movs	r3, r2
    9658:	408f      	lsls	r7, r1
    965a:	4323      	orrs	r3, r4
    965c:	469b      	mov	fp, r3
    965e:	46b9      	mov	r9, r7
    9660:	2300      	movs	r3, #0
    9662:	4e2d      	ldr	r6, [pc, #180]	; (9718 <__aeabi_dmul+0x1ec>)
    9664:	2700      	movs	r7, #0
    9666:	1a36      	subs	r6, r6, r0
    9668:	9302      	str	r3, [sp, #8]
    966a:	e784      	b.n	9576 <__aeabi_dmul+0x4a>
    966c:	4653      	mov	r3, sl
    966e:	4323      	orrs	r3, r4
    9670:	d12a      	bne.n	96c8 <__aeabi_dmul+0x19c>
    9672:	2400      	movs	r4, #0
    9674:	2002      	movs	r0, #2
    9676:	e796      	b.n	95a6 <__aeabi_dmul+0x7a>
    9678:	4653      	mov	r3, sl
    967a:	4323      	orrs	r3, r4
    967c:	d020      	beq.n	96c0 <__aeabi_dmul+0x194>
    967e:	2c00      	cmp	r4, #0
    9680:	d100      	bne.n	9684 <__aeabi_dmul+0x158>
    9682:	e157      	b.n	9934 <__aeabi_dmul+0x408>
    9684:	0020      	movs	r0, r4
    9686:	f000 fe91 	bl	a3ac <__clzsi2>
    968a:	0003      	movs	r3, r0
    968c:	3b0b      	subs	r3, #11
    968e:	2b1c      	cmp	r3, #28
    9690:	dd00      	ble.n	9694 <__aeabi_dmul+0x168>
    9692:	e149      	b.n	9928 <__aeabi_dmul+0x3fc>
    9694:	211d      	movs	r1, #29
    9696:	1acb      	subs	r3, r1, r3
    9698:	4651      	mov	r1, sl
    969a:	0002      	movs	r2, r0
    969c:	40d9      	lsrs	r1, r3
    969e:	4653      	mov	r3, sl
    96a0:	3a08      	subs	r2, #8
    96a2:	4094      	lsls	r4, r2
    96a4:	4093      	lsls	r3, r2
    96a6:	430c      	orrs	r4, r1
    96a8:	4a1b      	ldr	r2, [pc, #108]	; (9718 <__aeabi_dmul+0x1ec>)
    96aa:	1a12      	subs	r2, r2, r0
    96ac:	2000      	movs	r0, #0
    96ae:	e77a      	b.n	95a6 <__aeabi_dmul+0x7a>
    96b0:	2501      	movs	r5, #1
    96b2:	9b01      	ldr	r3, [sp, #4]
    96b4:	4c14      	ldr	r4, [pc, #80]	; (9708 <__aeabi_dmul+0x1dc>)
    96b6:	401d      	ands	r5, r3
    96b8:	2300      	movs	r3, #0
    96ba:	2200      	movs	r2, #0
    96bc:	4699      	mov	r9, r3
    96be:	e79c      	b.n	95fa <__aeabi_dmul+0xce>
    96c0:	2400      	movs	r4, #0
    96c2:	2200      	movs	r2, #0
    96c4:	2001      	movs	r0, #1
    96c6:	e76e      	b.n	95a6 <__aeabi_dmul+0x7a>
    96c8:	4653      	mov	r3, sl
    96ca:	2003      	movs	r0, #3
    96cc:	e76b      	b.n	95a6 <__aeabi_dmul+0x7a>
    96ce:	2300      	movs	r3, #0
    96d0:	469b      	mov	fp, r3
    96d2:	3301      	adds	r3, #1
    96d4:	2704      	movs	r7, #4
    96d6:	2600      	movs	r6, #0
    96d8:	9302      	str	r3, [sp, #8]
    96da:	e74c      	b.n	9576 <__aeabi_dmul+0x4a>
    96dc:	2303      	movs	r3, #3
    96de:	4681      	mov	r9, r0
    96e0:	270c      	movs	r7, #12
    96e2:	9302      	str	r3, [sp, #8]
    96e4:	e747      	b.n	9576 <__aeabi_dmul+0x4a>
    96e6:	2280      	movs	r2, #128	; 0x80
    96e8:	2300      	movs	r3, #0
    96ea:	2500      	movs	r5, #0
    96ec:	0312      	lsls	r2, r2, #12
    96ee:	4699      	mov	r9, r3
    96f0:	4c05      	ldr	r4, [pc, #20]	; (9708 <__aeabi_dmul+0x1dc>)
    96f2:	e782      	b.n	95fa <__aeabi_dmul+0xce>
    96f4:	465c      	mov	r4, fp
    96f6:	464b      	mov	r3, r9
    96f8:	9802      	ldr	r0, [sp, #8]
    96fa:	e76f      	b.n	95dc <__aeabi_dmul+0xb0>
    96fc:	465c      	mov	r4, fp
    96fe:	464b      	mov	r3, r9
    9700:	9501      	str	r5, [sp, #4]
    9702:	9802      	ldr	r0, [sp, #8]
    9704:	e76a      	b.n	95dc <__aeabi_dmul+0xb0>
    9706:	46c0      	nop			; (mov r8, r8)
    9708:	000007ff 	.word	0x000007ff
    970c:	fffffc01 	.word	0xfffffc01
    9710:	0000a8c8 	.word	0x0000a8c8
    9714:	800fffff 	.word	0x800fffff
    9718:	fffffc0d 	.word	0xfffffc0d
    971c:	464a      	mov	r2, r9
    971e:	4649      	mov	r1, r9
    9720:	0c17      	lsrs	r7, r2, #16
    9722:	0c1a      	lsrs	r2, r3, #16
    9724:	041b      	lsls	r3, r3, #16
    9726:	0c1b      	lsrs	r3, r3, #16
    9728:	0408      	lsls	r0, r1, #16
    972a:	0019      	movs	r1, r3
    972c:	0c00      	lsrs	r0, r0, #16
    972e:	4341      	muls	r1, r0
    9730:	0015      	movs	r5, r2
    9732:	4688      	mov	r8, r1
    9734:	0019      	movs	r1, r3
    9736:	437d      	muls	r5, r7
    9738:	4379      	muls	r1, r7
    973a:	9503      	str	r5, [sp, #12]
    973c:	4689      	mov	r9, r1
    973e:	0029      	movs	r1, r5
    9740:	0015      	movs	r5, r2
    9742:	4345      	muls	r5, r0
    9744:	444d      	add	r5, r9
    9746:	9502      	str	r5, [sp, #8]
    9748:	4645      	mov	r5, r8
    974a:	0c2d      	lsrs	r5, r5, #16
    974c:	46aa      	mov	sl, r5
    974e:	9d02      	ldr	r5, [sp, #8]
    9750:	4455      	add	r5, sl
    9752:	45a9      	cmp	r9, r5
    9754:	d906      	bls.n	9764 <__aeabi_dmul+0x238>
    9756:	468a      	mov	sl, r1
    9758:	2180      	movs	r1, #128	; 0x80
    975a:	0249      	lsls	r1, r1, #9
    975c:	4689      	mov	r9, r1
    975e:	44ca      	add	sl, r9
    9760:	4651      	mov	r1, sl
    9762:	9103      	str	r1, [sp, #12]
    9764:	0c29      	lsrs	r1, r5, #16
    9766:	9104      	str	r1, [sp, #16]
    9768:	4641      	mov	r1, r8
    976a:	0409      	lsls	r1, r1, #16
    976c:	042d      	lsls	r5, r5, #16
    976e:	0c09      	lsrs	r1, r1, #16
    9770:	4688      	mov	r8, r1
    9772:	0029      	movs	r1, r5
    9774:	0c25      	lsrs	r5, r4, #16
    9776:	0424      	lsls	r4, r4, #16
    9778:	4441      	add	r1, r8
    977a:	0c24      	lsrs	r4, r4, #16
    977c:	9105      	str	r1, [sp, #20]
    977e:	0021      	movs	r1, r4
    9780:	4341      	muls	r1, r0
    9782:	4688      	mov	r8, r1
    9784:	0021      	movs	r1, r4
    9786:	4379      	muls	r1, r7
    9788:	468a      	mov	sl, r1
    978a:	4368      	muls	r0, r5
    978c:	4641      	mov	r1, r8
    978e:	4450      	add	r0, sl
    9790:	4681      	mov	r9, r0
    9792:	0c08      	lsrs	r0, r1, #16
    9794:	4448      	add	r0, r9
    9796:	436f      	muls	r7, r5
    9798:	4582      	cmp	sl, r0
    979a:	d903      	bls.n	97a4 <__aeabi_dmul+0x278>
    979c:	2180      	movs	r1, #128	; 0x80
    979e:	0249      	lsls	r1, r1, #9
    97a0:	4689      	mov	r9, r1
    97a2:	444f      	add	r7, r9
    97a4:	0c01      	lsrs	r1, r0, #16
    97a6:	4689      	mov	r9, r1
    97a8:	0039      	movs	r1, r7
    97aa:	4449      	add	r1, r9
    97ac:	9102      	str	r1, [sp, #8]
    97ae:	4641      	mov	r1, r8
    97b0:	040f      	lsls	r7, r1, #16
    97b2:	9904      	ldr	r1, [sp, #16]
    97b4:	0c3f      	lsrs	r7, r7, #16
    97b6:	4688      	mov	r8, r1
    97b8:	0400      	lsls	r0, r0, #16
    97ba:	19c0      	adds	r0, r0, r7
    97bc:	4480      	add	r8, r0
    97be:	4641      	mov	r1, r8
    97c0:	9104      	str	r1, [sp, #16]
    97c2:	4659      	mov	r1, fp
    97c4:	0c0f      	lsrs	r7, r1, #16
    97c6:	0409      	lsls	r1, r1, #16
    97c8:	0c09      	lsrs	r1, r1, #16
    97ca:	4688      	mov	r8, r1
    97cc:	4359      	muls	r1, r3
    97ce:	468a      	mov	sl, r1
    97d0:	0039      	movs	r1, r7
    97d2:	4351      	muls	r1, r2
    97d4:	4689      	mov	r9, r1
    97d6:	4641      	mov	r1, r8
    97d8:	434a      	muls	r2, r1
    97da:	4651      	mov	r1, sl
    97dc:	0c09      	lsrs	r1, r1, #16
    97de:	468b      	mov	fp, r1
    97e0:	437b      	muls	r3, r7
    97e2:	18d2      	adds	r2, r2, r3
    97e4:	445a      	add	r2, fp
    97e6:	4293      	cmp	r3, r2
    97e8:	d903      	bls.n	97f2 <__aeabi_dmul+0x2c6>
    97ea:	2380      	movs	r3, #128	; 0x80
    97ec:	025b      	lsls	r3, r3, #9
    97ee:	469b      	mov	fp, r3
    97f0:	44d9      	add	r9, fp
    97f2:	4651      	mov	r1, sl
    97f4:	0409      	lsls	r1, r1, #16
    97f6:	0c09      	lsrs	r1, r1, #16
    97f8:	468a      	mov	sl, r1
    97fa:	4641      	mov	r1, r8
    97fc:	4361      	muls	r1, r4
    97fe:	437c      	muls	r4, r7
    9800:	0c13      	lsrs	r3, r2, #16
    9802:	0412      	lsls	r2, r2, #16
    9804:	444b      	add	r3, r9
    9806:	4452      	add	r2, sl
    9808:	46a1      	mov	r9, r4
    980a:	468a      	mov	sl, r1
    980c:	003c      	movs	r4, r7
    980e:	4641      	mov	r1, r8
    9810:	436c      	muls	r4, r5
    9812:	434d      	muls	r5, r1
    9814:	4651      	mov	r1, sl
    9816:	444d      	add	r5, r9
    9818:	0c0f      	lsrs	r7, r1, #16
    981a:	197d      	adds	r5, r7, r5
    981c:	45a9      	cmp	r9, r5
    981e:	d903      	bls.n	9828 <__aeabi_dmul+0x2fc>
    9820:	2180      	movs	r1, #128	; 0x80
    9822:	0249      	lsls	r1, r1, #9
    9824:	4688      	mov	r8, r1
    9826:	4444      	add	r4, r8
    9828:	9f04      	ldr	r7, [sp, #16]
    982a:	9903      	ldr	r1, [sp, #12]
    982c:	46b8      	mov	r8, r7
    982e:	4441      	add	r1, r8
    9830:	468b      	mov	fp, r1
    9832:	4583      	cmp	fp, r0
    9834:	4180      	sbcs	r0, r0
    9836:	4241      	negs	r1, r0
    9838:	4688      	mov	r8, r1
    983a:	4651      	mov	r1, sl
    983c:	0408      	lsls	r0, r1, #16
    983e:	042f      	lsls	r7, r5, #16
    9840:	0c00      	lsrs	r0, r0, #16
    9842:	183f      	adds	r7, r7, r0
    9844:	4658      	mov	r0, fp
    9846:	9902      	ldr	r1, [sp, #8]
    9848:	1810      	adds	r0, r2, r0
    984a:	4689      	mov	r9, r1
    984c:	4290      	cmp	r0, r2
    984e:	4192      	sbcs	r2, r2
    9850:	444f      	add	r7, r9
    9852:	46ba      	mov	sl, r7
    9854:	4252      	negs	r2, r2
    9856:	4699      	mov	r9, r3
    9858:	4693      	mov	fp, r2
    985a:	44c2      	add	sl, r8
    985c:	44d1      	add	r9, sl
    985e:	44cb      	add	fp, r9
    9860:	428f      	cmp	r7, r1
    9862:	41bf      	sbcs	r7, r7
    9864:	45c2      	cmp	sl, r8
    9866:	4189      	sbcs	r1, r1
    9868:	4599      	cmp	r9, r3
    986a:	419b      	sbcs	r3, r3
    986c:	4593      	cmp	fp, r2
    986e:	4192      	sbcs	r2, r2
    9870:	427f      	negs	r7, r7
    9872:	4249      	negs	r1, r1
    9874:	0c2d      	lsrs	r5, r5, #16
    9876:	4252      	negs	r2, r2
    9878:	430f      	orrs	r7, r1
    987a:	425b      	negs	r3, r3
    987c:	4313      	orrs	r3, r2
    987e:	197f      	adds	r7, r7, r5
    9880:	18ff      	adds	r7, r7, r3
    9882:	465b      	mov	r3, fp
    9884:	193c      	adds	r4, r7, r4
    9886:	0ddb      	lsrs	r3, r3, #23
    9888:	9a05      	ldr	r2, [sp, #20]
    988a:	0264      	lsls	r4, r4, #9
    988c:	431c      	orrs	r4, r3
    988e:	0243      	lsls	r3, r0, #9
    9890:	4313      	orrs	r3, r2
    9892:	1e5d      	subs	r5, r3, #1
    9894:	41ab      	sbcs	r3, r5
    9896:	465a      	mov	r2, fp
    9898:	0dc0      	lsrs	r0, r0, #23
    989a:	4303      	orrs	r3, r0
    989c:	0252      	lsls	r2, r2, #9
    989e:	4313      	orrs	r3, r2
    98a0:	01e2      	lsls	r2, r4, #7
    98a2:	d556      	bpl.n	9952 <__aeabi_dmul+0x426>
    98a4:	2001      	movs	r0, #1
    98a6:	085a      	lsrs	r2, r3, #1
    98a8:	4003      	ands	r3, r0
    98aa:	4313      	orrs	r3, r2
    98ac:	07e2      	lsls	r2, r4, #31
    98ae:	4313      	orrs	r3, r2
    98b0:	0864      	lsrs	r4, r4, #1
    98b2:	485a      	ldr	r0, [pc, #360]	; (9a1c <__aeabi_dmul+0x4f0>)
    98b4:	4460      	add	r0, ip
    98b6:	2800      	cmp	r0, #0
    98b8:	dd4d      	ble.n	9956 <__aeabi_dmul+0x42a>
    98ba:	075a      	lsls	r2, r3, #29
    98bc:	d009      	beq.n	98d2 <__aeabi_dmul+0x3a6>
    98be:	220f      	movs	r2, #15
    98c0:	401a      	ands	r2, r3
    98c2:	2a04      	cmp	r2, #4
    98c4:	d005      	beq.n	98d2 <__aeabi_dmul+0x3a6>
    98c6:	1d1a      	adds	r2, r3, #4
    98c8:	429a      	cmp	r2, r3
    98ca:	419b      	sbcs	r3, r3
    98cc:	425b      	negs	r3, r3
    98ce:	18e4      	adds	r4, r4, r3
    98d0:	0013      	movs	r3, r2
    98d2:	01e2      	lsls	r2, r4, #7
    98d4:	d504      	bpl.n	98e0 <__aeabi_dmul+0x3b4>
    98d6:	2080      	movs	r0, #128	; 0x80
    98d8:	4a51      	ldr	r2, [pc, #324]	; (9a20 <__aeabi_dmul+0x4f4>)
    98da:	00c0      	lsls	r0, r0, #3
    98dc:	4014      	ands	r4, r2
    98de:	4460      	add	r0, ip
    98e0:	4a50      	ldr	r2, [pc, #320]	; (9a24 <__aeabi_dmul+0x4f8>)
    98e2:	4290      	cmp	r0, r2
    98e4:	dd00      	ble.n	98e8 <__aeabi_dmul+0x3bc>
    98e6:	e6e3      	b.n	96b0 <__aeabi_dmul+0x184>
    98e8:	2501      	movs	r5, #1
    98ea:	08db      	lsrs	r3, r3, #3
    98ec:	0762      	lsls	r2, r4, #29
    98ee:	431a      	orrs	r2, r3
    98f0:	0264      	lsls	r4, r4, #9
    98f2:	9b01      	ldr	r3, [sp, #4]
    98f4:	4691      	mov	r9, r2
    98f6:	0b22      	lsrs	r2, r4, #12
    98f8:	0544      	lsls	r4, r0, #21
    98fa:	0d64      	lsrs	r4, r4, #21
    98fc:	401d      	ands	r5, r3
    98fe:	e67c      	b.n	95fa <__aeabi_dmul+0xce>
    9900:	2280      	movs	r2, #128	; 0x80
    9902:	4659      	mov	r1, fp
    9904:	0312      	lsls	r2, r2, #12
    9906:	4211      	tst	r1, r2
    9908:	d008      	beq.n	991c <__aeabi_dmul+0x3f0>
    990a:	4214      	tst	r4, r2
    990c:	d106      	bne.n	991c <__aeabi_dmul+0x3f0>
    990e:	4322      	orrs	r2, r4
    9910:	0312      	lsls	r2, r2, #12
    9912:	0b12      	lsrs	r2, r2, #12
    9914:	4645      	mov	r5, r8
    9916:	4699      	mov	r9, r3
    9918:	4c43      	ldr	r4, [pc, #268]	; (9a28 <__aeabi_dmul+0x4fc>)
    991a:	e66e      	b.n	95fa <__aeabi_dmul+0xce>
    991c:	465b      	mov	r3, fp
    991e:	431a      	orrs	r2, r3
    9920:	0312      	lsls	r2, r2, #12
    9922:	0b12      	lsrs	r2, r2, #12
    9924:	4c40      	ldr	r4, [pc, #256]	; (9a28 <__aeabi_dmul+0x4fc>)
    9926:	e668      	b.n	95fa <__aeabi_dmul+0xce>
    9928:	0003      	movs	r3, r0
    992a:	4654      	mov	r4, sl
    992c:	3b28      	subs	r3, #40	; 0x28
    992e:	409c      	lsls	r4, r3
    9930:	2300      	movs	r3, #0
    9932:	e6b9      	b.n	96a8 <__aeabi_dmul+0x17c>
    9934:	f000 fd3a 	bl	a3ac <__clzsi2>
    9938:	3020      	adds	r0, #32
    993a:	e6a6      	b.n	968a <__aeabi_dmul+0x15e>
    993c:	0003      	movs	r3, r0
    993e:	3b28      	subs	r3, #40	; 0x28
    9940:	409f      	lsls	r7, r3
    9942:	2300      	movs	r3, #0
    9944:	46bb      	mov	fp, r7
    9946:	4699      	mov	r9, r3
    9948:	e68a      	b.n	9660 <__aeabi_dmul+0x134>
    994a:	f000 fd2f 	bl	a3ac <__clzsi2>
    994e:	3020      	adds	r0, #32
    9950:	e674      	b.n	963c <__aeabi_dmul+0x110>
    9952:	46b4      	mov	ip, r6
    9954:	e7ad      	b.n	98b2 <__aeabi_dmul+0x386>
    9956:	2501      	movs	r5, #1
    9958:	1a2a      	subs	r2, r5, r0
    995a:	2a38      	cmp	r2, #56	; 0x38
    995c:	dd06      	ble.n	996c <__aeabi_dmul+0x440>
    995e:	9b01      	ldr	r3, [sp, #4]
    9960:	2400      	movs	r4, #0
    9962:	401d      	ands	r5, r3
    9964:	2300      	movs	r3, #0
    9966:	2200      	movs	r2, #0
    9968:	4699      	mov	r9, r3
    996a:	e646      	b.n	95fa <__aeabi_dmul+0xce>
    996c:	2a1f      	cmp	r2, #31
    996e:	dc21      	bgt.n	99b4 <__aeabi_dmul+0x488>
    9970:	2520      	movs	r5, #32
    9972:	0020      	movs	r0, r4
    9974:	1aad      	subs	r5, r5, r2
    9976:	001e      	movs	r6, r3
    9978:	40ab      	lsls	r3, r5
    997a:	40a8      	lsls	r0, r5
    997c:	40d6      	lsrs	r6, r2
    997e:	1e5d      	subs	r5, r3, #1
    9980:	41ab      	sbcs	r3, r5
    9982:	4330      	orrs	r0, r6
    9984:	4318      	orrs	r0, r3
    9986:	40d4      	lsrs	r4, r2
    9988:	0743      	lsls	r3, r0, #29
    998a:	d009      	beq.n	99a0 <__aeabi_dmul+0x474>
    998c:	230f      	movs	r3, #15
    998e:	4003      	ands	r3, r0
    9990:	2b04      	cmp	r3, #4
    9992:	d005      	beq.n	99a0 <__aeabi_dmul+0x474>
    9994:	0003      	movs	r3, r0
    9996:	1d18      	adds	r0, r3, #4
    9998:	4298      	cmp	r0, r3
    999a:	419b      	sbcs	r3, r3
    999c:	425b      	negs	r3, r3
    999e:	18e4      	adds	r4, r4, r3
    99a0:	0223      	lsls	r3, r4, #8
    99a2:	d521      	bpl.n	99e8 <__aeabi_dmul+0x4bc>
    99a4:	2501      	movs	r5, #1
    99a6:	9b01      	ldr	r3, [sp, #4]
    99a8:	2401      	movs	r4, #1
    99aa:	401d      	ands	r5, r3
    99ac:	2300      	movs	r3, #0
    99ae:	2200      	movs	r2, #0
    99b0:	4699      	mov	r9, r3
    99b2:	e622      	b.n	95fa <__aeabi_dmul+0xce>
    99b4:	251f      	movs	r5, #31
    99b6:	0021      	movs	r1, r4
    99b8:	426d      	negs	r5, r5
    99ba:	1a28      	subs	r0, r5, r0
    99bc:	40c1      	lsrs	r1, r0
    99be:	0008      	movs	r0, r1
    99c0:	2a20      	cmp	r2, #32
    99c2:	d01d      	beq.n	9a00 <__aeabi_dmul+0x4d4>
    99c4:	355f      	adds	r5, #95	; 0x5f
    99c6:	1aaa      	subs	r2, r5, r2
    99c8:	4094      	lsls	r4, r2
    99ca:	4323      	orrs	r3, r4
    99cc:	1e5c      	subs	r4, r3, #1
    99ce:	41a3      	sbcs	r3, r4
    99d0:	2507      	movs	r5, #7
    99d2:	4303      	orrs	r3, r0
    99d4:	401d      	ands	r5, r3
    99d6:	2200      	movs	r2, #0
    99d8:	2d00      	cmp	r5, #0
    99da:	d009      	beq.n	99f0 <__aeabi_dmul+0x4c4>
    99dc:	220f      	movs	r2, #15
    99de:	2400      	movs	r4, #0
    99e0:	401a      	ands	r2, r3
    99e2:	0018      	movs	r0, r3
    99e4:	2a04      	cmp	r2, #4
    99e6:	d1d6      	bne.n	9996 <__aeabi_dmul+0x46a>
    99e8:	0003      	movs	r3, r0
    99ea:	0765      	lsls	r5, r4, #29
    99ec:	0264      	lsls	r4, r4, #9
    99ee:	0b22      	lsrs	r2, r4, #12
    99f0:	08db      	lsrs	r3, r3, #3
    99f2:	432b      	orrs	r3, r5
    99f4:	2501      	movs	r5, #1
    99f6:	4699      	mov	r9, r3
    99f8:	9b01      	ldr	r3, [sp, #4]
    99fa:	2400      	movs	r4, #0
    99fc:	401d      	ands	r5, r3
    99fe:	e5fc      	b.n	95fa <__aeabi_dmul+0xce>
    9a00:	2400      	movs	r4, #0
    9a02:	e7e2      	b.n	99ca <__aeabi_dmul+0x49e>
    9a04:	2280      	movs	r2, #128	; 0x80
    9a06:	2501      	movs	r5, #1
    9a08:	0312      	lsls	r2, r2, #12
    9a0a:	4322      	orrs	r2, r4
    9a0c:	9901      	ldr	r1, [sp, #4]
    9a0e:	0312      	lsls	r2, r2, #12
    9a10:	0b12      	lsrs	r2, r2, #12
    9a12:	400d      	ands	r5, r1
    9a14:	4699      	mov	r9, r3
    9a16:	4c04      	ldr	r4, [pc, #16]	; (9a28 <__aeabi_dmul+0x4fc>)
    9a18:	e5ef      	b.n	95fa <__aeabi_dmul+0xce>
    9a1a:	46c0      	nop			; (mov r8, r8)
    9a1c:	000003ff 	.word	0x000003ff
    9a20:	feffffff 	.word	0xfeffffff
    9a24:	000007fe 	.word	0x000007fe
    9a28:	000007ff 	.word	0x000007ff

00009a2c <__aeabi_dsub>:
    9a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a2e:	4646      	mov	r6, r8
    9a30:	46d6      	mov	lr, sl
    9a32:	464f      	mov	r7, r9
    9a34:	030c      	lsls	r4, r1, #12
    9a36:	b5c0      	push	{r6, r7, lr}
    9a38:	0fcd      	lsrs	r5, r1, #31
    9a3a:	004e      	lsls	r6, r1, #1
    9a3c:	0a61      	lsrs	r1, r4, #9
    9a3e:	0f44      	lsrs	r4, r0, #29
    9a40:	430c      	orrs	r4, r1
    9a42:	00c1      	lsls	r1, r0, #3
    9a44:	0058      	lsls	r0, r3, #1
    9a46:	0d40      	lsrs	r0, r0, #21
    9a48:	4684      	mov	ip, r0
    9a4a:	468a      	mov	sl, r1
    9a4c:	000f      	movs	r7, r1
    9a4e:	0319      	lsls	r1, r3, #12
    9a50:	0f50      	lsrs	r0, r2, #29
    9a52:	0a49      	lsrs	r1, r1, #9
    9a54:	4301      	orrs	r1, r0
    9a56:	48c6      	ldr	r0, [pc, #792]	; (9d70 <__aeabi_dsub+0x344>)
    9a58:	0d76      	lsrs	r6, r6, #21
    9a5a:	46a8      	mov	r8, r5
    9a5c:	0fdb      	lsrs	r3, r3, #31
    9a5e:	00d2      	lsls	r2, r2, #3
    9a60:	4584      	cmp	ip, r0
    9a62:	d100      	bne.n	9a66 <__aeabi_dsub+0x3a>
    9a64:	e0d8      	b.n	9c18 <__aeabi_dsub+0x1ec>
    9a66:	2001      	movs	r0, #1
    9a68:	4043      	eors	r3, r0
    9a6a:	42ab      	cmp	r3, r5
    9a6c:	d100      	bne.n	9a70 <__aeabi_dsub+0x44>
    9a6e:	e0a6      	b.n	9bbe <__aeabi_dsub+0x192>
    9a70:	4660      	mov	r0, ip
    9a72:	1a35      	subs	r5, r6, r0
    9a74:	2d00      	cmp	r5, #0
    9a76:	dc00      	bgt.n	9a7a <__aeabi_dsub+0x4e>
    9a78:	e105      	b.n	9c86 <__aeabi_dsub+0x25a>
    9a7a:	2800      	cmp	r0, #0
    9a7c:	d110      	bne.n	9aa0 <__aeabi_dsub+0x74>
    9a7e:	000b      	movs	r3, r1
    9a80:	4313      	orrs	r3, r2
    9a82:	d100      	bne.n	9a86 <__aeabi_dsub+0x5a>
    9a84:	e0d7      	b.n	9c36 <__aeabi_dsub+0x20a>
    9a86:	1e6b      	subs	r3, r5, #1
    9a88:	2b00      	cmp	r3, #0
    9a8a:	d000      	beq.n	9a8e <__aeabi_dsub+0x62>
    9a8c:	e14b      	b.n	9d26 <__aeabi_dsub+0x2fa>
    9a8e:	4653      	mov	r3, sl
    9a90:	1a9f      	subs	r7, r3, r2
    9a92:	45ba      	cmp	sl, r7
    9a94:	4180      	sbcs	r0, r0
    9a96:	1a64      	subs	r4, r4, r1
    9a98:	4240      	negs	r0, r0
    9a9a:	1a24      	subs	r4, r4, r0
    9a9c:	2601      	movs	r6, #1
    9a9e:	e01e      	b.n	9ade <__aeabi_dsub+0xb2>
    9aa0:	4bb3      	ldr	r3, [pc, #716]	; (9d70 <__aeabi_dsub+0x344>)
    9aa2:	429e      	cmp	r6, r3
    9aa4:	d048      	beq.n	9b38 <__aeabi_dsub+0x10c>
    9aa6:	2380      	movs	r3, #128	; 0x80
    9aa8:	041b      	lsls	r3, r3, #16
    9aaa:	4319      	orrs	r1, r3
    9aac:	2d38      	cmp	r5, #56	; 0x38
    9aae:	dd00      	ble.n	9ab2 <__aeabi_dsub+0x86>
    9ab0:	e119      	b.n	9ce6 <__aeabi_dsub+0x2ba>
    9ab2:	2d1f      	cmp	r5, #31
    9ab4:	dd00      	ble.n	9ab8 <__aeabi_dsub+0x8c>
    9ab6:	e14c      	b.n	9d52 <__aeabi_dsub+0x326>
    9ab8:	2320      	movs	r3, #32
    9aba:	000f      	movs	r7, r1
    9abc:	1b5b      	subs	r3, r3, r5
    9abe:	0010      	movs	r0, r2
    9ac0:	409a      	lsls	r2, r3
    9ac2:	409f      	lsls	r7, r3
    9ac4:	40e8      	lsrs	r0, r5
    9ac6:	1e53      	subs	r3, r2, #1
    9ac8:	419a      	sbcs	r2, r3
    9aca:	40e9      	lsrs	r1, r5
    9acc:	4307      	orrs	r7, r0
    9ace:	4317      	orrs	r7, r2
    9ad0:	4653      	mov	r3, sl
    9ad2:	1bdf      	subs	r7, r3, r7
    9ad4:	1a61      	subs	r1, r4, r1
    9ad6:	45ba      	cmp	sl, r7
    9ad8:	41a4      	sbcs	r4, r4
    9ada:	4264      	negs	r4, r4
    9adc:	1b0c      	subs	r4, r1, r4
    9ade:	0223      	lsls	r3, r4, #8
    9ae0:	d400      	bmi.n	9ae4 <__aeabi_dsub+0xb8>
    9ae2:	e0c5      	b.n	9c70 <__aeabi_dsub+0x244>
    9ae4:	0264      	lsls	r4, r4, #9
    9ae6:	0a65      	lsrs	r5, r4, #9
    9ae8:	2d00      	cmp	r5, #0
    9aea:	d100      	bne.n	9aee <__aeabi_dsub+0xc2>
    9aec:	e0f6      	b.n	9cdc <__aeabi_dsub+0x2b0>
    9aee:	0028      	movs	r0, r5
    9af0:	f000 fc5c 	bl	a3ac <__clzsi2>
    9af4:	0003      	movs	r3, r0
    9af6:	3b08      	subs	r3, #8
    9af8:	2b1f      	cmp	r3, #31
    9afa:	dd00      	ble.n	9afe <__aeabi_dsub+0xd2>
    9afc:	e0e9      	b.n	9cd2 <__aeabi_dsub+0x2a6>
    9afe:	2220      	movs	r2, #32
    9b00:	003c      	movs	r4, r7
    9b02:	1ad2      	subs	r2, r2, r3
    9b04:	409d      	lsls	r5, r3
    9b06:	40d4      	lsrs	r4, r2
    9b08:	409f      	lsls	r7, r3
    9b0a:	4325      	orrs	r5, r4
    9b0c:	429e      	cmp	r6, r3
    9b0e:	dd00      	ble.n	9b12 <__aeabi_dsub+0xe6>
    9b10:	e0db      	b.n	9cca <__aeabi_dsub+0x29e>
    9b12:	1b9e      	subs	r6, r3, r6
    9b14:	1c73      	adds	r3, r6, #1
    9b16:	2b1f      	cmp	r3, #31
    9b18:	dd00      	ble.n	9b1c <__aeabi_dsub+0xf0>
    9b1a:	e10a      	b.n	9d32 <__aeabi_dsub+0x306>
    9b1c:	2220      	movs	r2, #32
    9b1e:	0038      	movs	r0, r7
    9b20:	1ad2      	subs	r2, r2, r3
    9b22:	0029      	movs	r1, r5
    9b24:	4097      	lsls	r7, r2
    9b26:	002c      	movs	r4, r5
    9b28:	4091      	lsls	r1, r2
    9b2a:	40d8      	lsrs	r0, r3
    9b2c:	1e7a      	subs	r2, r7, #1
    9b2e:	4197      	sbcs	r7, r2
    9b30:	40dc      	lsrs	r4, r3
    9b32:	2600      	movs	r6, #0
    9b34:	4301      	orrs	r1, r0
    9b36:	430f      	orrs	r7, r1
    9b38:	077b      	lsls	r3, r7, #29
    9b3a:	d009      	beq.n	9b50 <__aeabi_dsub+0x124>
    9b3c:	230f      	movs	r3, #15
    9b3e:	403b      	ands	r3, r7
    9b40:	2b04      	cmp	r3, #4
    9b42:	d005      	beq.n	9b50 <__aeabi_dsub+0x124>
    9b44:	1d3b      	adds	r3, r7, #4
    9b46:	42bb      	cmp	r3, r7
    9b48:	41bf      	sbcs	r7, r7
    9b4a:	427f      	negs	r7, r7
    9b4c:	19e4      	adds	r4, r4, r7
    9b4e:	001f      	movs	r7, r3
    9b50:	0223      	lsls	r3, r4, #8
    9b52:	d525      	bpl.n	9ba0 <__aeabi_dsub+0x174>
    9b54:	4b86      	ldr	r3, [pc, #536]	; (9d70 <__aeabi_dsub+0x344>)
    9b56:	3601      	adds	r6, #1
    9b58:	429e      	cmp	r6, r3
    9b5a:	d100      	bne.n	9b5e <__aeabi_dsub+0x132>
    9b5c:	e0af      	b.n	9cbe <__aeabi_dsub+0x292>
    9b5e:	4b85      	ldr	r3, [pc, #532]	; (9d74 <__aeabi_dsub+0x348>)
    9b60:	2501      	movs	r5, #1
    9b62:	401c      	ands	r4, r3
    9b64:	4643      	mov	r3, r8
    9b66:	0762      	lsls	r2, r4, #29
    9b68:	08ff      	lsrs	r7, r7, #3
    9b6a:	0264      	lsls	r4, r4, #9
    9b6c:	0576      	lsls	r6, r6, #21
    9b6e:	4317      	orrs	r7, r2
    9b70:	0b24      	lsrs	r4, r4, #12
    9b72:	0d76      	lsrs	r6, r6, #21
    9b74:	401d      	ands	r5, r3
    9b76:	2100      	movs	r1, #0
    9b78:	0324      	lsls	r4, r4, #12
    9b7a:	0b23      	lsrs	r3, r4, #12
    9b7c:	0d0c      	lsrs	r4, r1, #20
    9b7e:	4a7e      	ldr	r2, [pc, #504]	; (9d78 <__aeabi_dsub+0x34c>)
    9b80:	0524      	lsls	r4, r4, #20
    9b82:	431c      	orrs	r4, r3
    9b84:	4014      	ands	r4, r2
    9b86:	0533      	lsls	r3, r6, #20
    9b88:	4323      	orrs	r3, r4
    9b8a:	005b      	lsls	r3, r3, #1
    9b8c:	07ed      	lsls	r5, r5, #31
    9b8e:	085b      	lsrs	r3, r3, #1
    9b90:	432b      	orrs	r3, r5
    9b92:	0038      	movs	r0, r7
    9b94:	0019      	movs	r1, r3
    9b96:	bc1c      	pop	{r2, r3, r4}
    9b98:	4690      	mov	r8, r2
    9b9a:	4699      	mov	r9, r3
    9b9c:	46a2      	mov	sl, r4
    9b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9ba0:	2501      	movs	r5, #1
    9ba2:	4643      	mov	r3, r8
    9ba4:	0762      	lsls	r2, r4, #29
    9ba6:	08ff      	lsrs	r7, r7, #3
    9ba8:	4317      	orrs	r7, r2
    9baa:	08e4      	lsrs	r4, r4, #3
    9bac:	401d      	ands	r5, r3
    9bae:	4b70      	ldr	r3, [pc, #448]	; (9d70 <__aeabi_dsub+0x344>)
    9bb0:	429e      	cmp	r6, r3
    9bb2:	d036      	beq.n	9c22 <__aeabi_dsub+0x1f6>
    9bb4:	0324      	lsls	r4, r4, #12
    9bb6:	0576      	lsls	r6, r6, #21
    9bb8:	0b24      	lsrs	r4, r4, #12
    9bba:	0d76      	lsrs	r6, r6, #21
    9bbc:	e7db      	b.n	9b76 <__aeabi_dsub+0x14a>
    9bbe:	4663      	mov	r3, ip
    9bc0:	1af3      	subs	r3, r6, r3
    9bc2:	2b00      	cmp	r3, #0
    9bc4:	dc00      	bgt.n	9bc8 <__aeabi_dsub+0x19c>
    9bc6:	e094      	b.n	9cf2 <__aeabi_dsub+0x2c6>
    9bc8:	4660      	mov	r0, ip
    9bca:	2800      	cmp	r0, #0
    9bcc:	d035      	beq.n	9c3a <__aeabi_dsub+0x20e>
    9bce:	4868      	ldr	r0, [pc, #416]	; (9d70 <__aeabi_dsub+0x344>)
    9bd0:	4286      	cmp	r6, r0
    9bd2:	d0b1      	beq.n	9b38 <__aeabi_dsub+0x10c>
    9bd4:	2780      	movs	r7, #128	; 0x80
    9bd6:	043f      	lsls	r7, r7, #16
    9bd8:	4339      	orrs	r1, r7
    9bda:	2b38      	cmp	r3, #56	; 0x38
    9bdc:	dc00      	bgt.n	9be0 <__aeabi_dsub+0x1b4>
    9bde:	e0fd      	b.n	9ddc <__aeabi_dsub+0x3b0>
    9be0:	430a      	orrs	r2, r1
    9be2:	0017      	movs	r7, r2
    9be4:	2100      	movs	r1, #0
    9be6:	1e7a      	subs	r2, r7, #1
    9be8:	4197      	sbcs	r7, r2
    9bea:	4457      	add	r7, sl
    9bec:	4557      	cmp	r7, sl
    9bee:	4180      	sbcs	r0, r0
    9bf0:	1909      	adds	r1, r1, r4
    9bf2:	4244      	negs	r4, r0
    9bf4:	190c      	adds	r4, r1, r4
    9bf6:	0223      	lsls	r3, r4, #8
    9bf8:	d53a      	bpl.n	9c70 <__aeabi_dsub+0x244>
    9bfa:	4b5d      	ldr	r3, [pc, #372]	; (9d70 <__aeabi_dsub+0x344>)
    9bfc:	3601      	adds	r6, #1
    9bfe:	429e      	cmp	r6, r3
    9c00:	d100      	bne.n	9c04 <__aeabi_dsub+0x1d8>
    9c02:	e14b      	b.n	9e9c <__aeabi_dsub+0x470>
    9c04:	2201      	movs	r2, #1
    9c06:	4b5b      	ldr	r3, [pc, #364]	; (9d74 <__aeabi_dsub+0x348>)
    9c08:	401c      	ands	r4, r3
    9c0a:	087b      	lsrs	r3, r7, #1
    9c0c:	4017      	ands	r7, r2
    9c0e:	431f      	orrs	r7, r3
    9c10:	07e2      	lsls	r2, r4, #31
    9c12:	4317      	orrs	r7, r2
    9c14:	0864      	lsrs	r4, r4, #1
    9c16:	e78f      	b.n	9b38 <__aeabi_dsub+0x10c>
    9c18:	0008      	movs	r0, r1
    9c1a:	4310      	orrs	r0, r2
    9c1c:	d000      	beq.n	9c20 <__aeabi_dsub+0x1f4>
    9c1e:	e724      	b.n	9a6a <__aeabi_dsub+0x3e>
    9c20:	e721      	b.n	9a66 <__aeabi_dsub+0x3a>
    9c22:	0023      	movs	r3, r4
    9c24:	433b      	orrs	r3, r7
    9c26:	d100      	bne.n	9c2a <__aeabi_dsub+0x1fe>
    9c28:	e1b9      	b.n	9f9e <__aeabi_dsub+0x572>
    9c2a:	2280      	movs	r2, #128	; 0x80
    9c2c:	0312      	lsls	r2, r2, #12
    9c2e:	4314      	orrs	r4, r2
    9c30:	0324      	lsls	r4, r4, #12
    9c32:	0b24      	lsrs	r4, r4, #12
    9c34:	e79f      	b.n	9b76 <__aeabi_dsub+0x14a>
    9c36:	002e      	movs	r6, r5
    9c38:	e77e      	b.n	9b38 <__aeabi_dsub+0x10c>
    9c3a:	0008      	movs	r0, r1
    9c3c:	4310      	orrs	r0, r2
    9c3e:	d100      	bne.n	9c42 <__aeabi_dsub+0x216>
    9c40:	e0ca      	b.n	9dd8 <__aeabi_dsub+0x3ac>
    9c42:	1e58      	subs	r0, r3, #1
    9c44:	4684      	mov	ip, r0
    9c46:	2800      	cmp	r0, #0
    9c48:	d000      	beq.n	9c4c <__aeabi_dsub+0x220>
    9c4a:	e0e7      	b.n	9e1c <__aeabi_dsub+0x3f0>
    9c4c:	4452      	add	r2, sl
    9c4e:	4552      	cmp	r2, sl
    9c50:	4180      	sbcs	r0, r0
    9c52:	1864      	adds	r4, r4, r1
    9c54:	4240      	negs	r0, r0
    9c56:	1824      	adds	r4, r4, r0
    9c58:	0017      	movs	r7, r2
    9c5a:	2601      	movs	r6, #1
    9c5c:	0223      	lsls	r3, r4, #8
    9c5e:	d507      	bpl.n	9c70 <__aeabi_dsub+0x244>
    9c60:	2602      	movs	r6, #2
    9c62:	e7cf      	b.n	9c04 <__aeabi_dsub+0x1d8>
    9c64:	4664      	mov	r4, ip
    9c66:	432c      	orrs	r4, r5
    9c68:	d100      	bne.n	9c6c <__aeabi_dsub+0x240>
    9c6a:	e1b3      	b.n	9fd4 <__aeabi_dsub+0x5a8>
    9c6c:	002c      	movs	r4, r5
    9c6e:	4667      	mov	r7, ip
    9c70:	077b      	lsls	r3, r7, #29
    9c72:	d000      	beq.n	9c76 <__aeabi_dsub+0x24a>
    9c74:	e762      	b.n	9b3c <__aeabi_dsub+0x110>
    9c76:	0763      	lsls	r3, r4, #29
    9c78:	08ff      	lsrs	r7, r7, #3
    9c7a:	431f      	orrs	r7, r3
    9c7c:	2501      	movs	r5, #1
    9c7e:	4643      	mov	r3, r8
    9c80:	08e4      	lsrs	r4, r4, #3
    9c82:	401d      	ands	r5, r3
    9c84:	e793      	b.n	9bae <__aeabi_dsub+0x182>
    9c86:	2d00      	cmp	r5, #0
    9c88:	d178      	bne.n	9d7c <__aeabi_dsub+0x350>
    9c8a:	1c75      	adds	r5, r6, #1
    9c8c:	056d      	lsls	r5, r5, #21
    9c8e:	0d6d      	lsrs	r5, r5, #21
    9c90:	2d01      	cmp	r5, #1
    9c92:	dc00      	bgt.n	9c96 <__aeabi_dsub+0x26a>
    9c94:	e0f2      	b.n	9e7c <__aeabi_dsub+0x450>
    9c96:	4650      	mov	r0, sl
    9c98:	1a80      	subs	r0, r0, r2
    9c9a:	4582      	cmp	sl, r0
    9c9c:	41bf      	sbcs	r7, r7
    9c9e:	1a65      	subs	r5, r4, r1
    9ca0:	427f      	negs	r7, r7
    9ca2:	1bed      	subs	r5, r5, r7
    9ca4:	4684      	mov	ip, r0
    9ca6:	0228      	lsls	r0, r5, #8
    9ca8:	d400      	bmi.n	9cac <__aeabi_dsub+0x280>
    9caa:	e08c      	b.n	9dc6 <__aeabi_dsub+0x39a>
    9cac:	4650      	mov	r0, sl
    9cae:	1a17      	subs	r7, r2, r0
    9cb0:	42ba      	cmp	r2, r7
    9cb2:	4192      	sbcs	r2, r2
    9cb4:	1b0c      	subs	r4, r1, r4
    9cb6:	4255      	negs	r5, r2
    9cb8:	1b65      	subs	r5, r4, r5
    9cba:	4698      	mov	r8, r3
    9cbc:	e714      	b.n	9ae8 <__aeabi_dsub+0xbc>
    9cbe:	2501      	movs	r5, #1
    9cc0:	4643      	mov	r3, r8
    9cc2:	2400      	movs	r4, #0
    9cc4:	401d      	ands	r5, r3
    9cc6:	2700      	movs	r7, #0
    9cc8:	e755      	b.n	9b76 <__aeabi_dsub+0x14a>
    9cca:	4c2a      	ldr	r4, [pc, #168]	; (9d74 <__aeabi_dsub+0x348>)
    9ccc:	1af6      	subs	r6, r6, r3
    9cce:	402c      	ands	r4, r5
    9cd0:	e732      	b.n	9b38 <__aeabi_dsub+0x10c>
    9cd2:	003d      	movs	r5, r7
    9cd4:	3828      	subs	r0, #40	; 0x28
    9cd6:	4085      	lsls	r5, r0
    9cd8:	2700      	movs	r7, #0
    9cda:	e717      	b.n	9b0c <__aeabi_dsub+0xe0>
    9cdc:	0038      	movs	r0, r7
    9cde:	f000 fb65 	bl	a3ac <__clzsi2>
    9ce2:	3020      	adds	r0, #32
    9ce4:	e706      	b.n	9af4 <__aeabi_dsub+0xc8>
    9ce6:	430a      	orrs	r2, r1
    9ce8:	0017      	movs	r7, r2
    9cea:	2100      	movs	r1, #0
    9cec:	1e7a      	subs	r2, r7, #1
    9cee:	4197      	sbcs	r7, r2
    9cf0:	e6ee      	b.n	9ad0 <__aeabi_dsub+0xa4>
    9cf2:	2b00      	cmp	r3, #0
    9cf4:	d000      	beq.n	9cf8 <__aeabi_dsub+0x2cc>
    9cf6:	e0e5      	b.n	9ec4 <__aeabi_dsub+0x498>
    9cf8:	1c73      	adds	r3, r6, #1
    9cfa:	469c      	mov	ip, r3
    9cfc:	055b      	lsls	r3, r3, #21
    9cfe:	0d5b      	lsrs	r3, r3, #21
    9d00:	2b01      	cmp	r3, #1
    9d02:	dc00      	bgt.n	9d06 <__aeabi_dsub+0x2da>
    9d04:	e09f      	b.n	9e46 <__aeabi_dsub+0x41a>
    9d06:	4b1a      	ldr	r3, [pc, #104]	; (9d70 <__aeabi_dsub+0x344>)
    9d08:	459c      	cmp	ip, r3
    9d0a:	d100      	bne.n	9d0e <__aeabi_dsub+0x2e2>
    9d0c:	e0c5      	b.n	9e9a <__aeabi_dsub+0x46e>
    9d0e:	4452      	add	r2, sl
    9d10:	4552      	cmp	r2, sl
    9d12:	4180      	sbcs	r0, r0
    9d14:	1864      	adds	r4, r4, r1
    9d16:	4240      	negs	r0, r0
    9d18:	1824      	adds	r4, r4, r0
    9d1a:	07e7      	lsls	r7, r4, #31
    9d1c:	0852      	lsrs	r2, r2, #1
    9d1e:	4317      	orrs	r7, r2
    9d20:	0864      	lsrs	r4, r4, #1
    9d22:	4666      	mov	r6, ip
    9d24:	e708      	b.n	9b38 <__aeabi_dsub+0x10c>
    9d26:	4812      	ldr	r0, [pc, #72]	; (9d70 <__aeabi_dsub+0x344>)
    9d28:	4285      	cmp	r5, r0
    9d2a:	d100      	bne.n	9d2e <__aeabi_dsub+0x302>
    9d2c:	e085      	b.n	9e3a <__aeabi_dsub+0x40e>
    9d2e:	001d      	movs	r5, r3
    9d30:	e6bc      	b.n	9aac <__aeabi_dsub+0x80>
    9d32:	0029      	movs	r1, r5
    9d34:	3e1f      	subs	r6, #31
    9d36:	40f1      	lsrs	r1, r6
    9d38:	2b20      	cmp	r3, #32
    9d3a:	d100      	bne.n	9d3e <__aeabi_dsub+0x312>
    9d3c:	e07f      	b.n	9e3e <__aeabi_dsub+0x412>
    9d3e:	2240      	movs	r2, #64	; 0x40
    9d40:	1ad3      	subs	r3, r2, r3
    9d42:	409d      	lsls	r5, r3
    9d44:	432f      	orrs	r7, r5
    9d46:	1e7d      	subs	r5, r7, #1
    9d48:	41af      	sbcs	r7, r5
    9d4a:	2400      	movs	r4, #0
    9d4c:	430f      	orrs	r7, r1
    9d4e:	2600      	movs	r6, #0
    9d50:	e78e      	b.n	9c70 <__aeabi_dsub+0x244>
    9d52:	002b      	movs	r3, r5
    9d54:	000f      	movs	r7, r1
    9d56:	3b20      	subs	r3, #32
    9d58:	40df      	lsrs	r7, r3
    9d5a:	2d20      	cmp	r5, #32
    9d5c:	d071      	beq.n	9e42 <__aeabi_dsub+0x416>
    9d5e:	2340      	movs	r3, #64	; 0x40
    9d60:	1b5d      	subs	r5, r3, r5
    9d62:	40a9      	lsls	r1, r5
    9d64:	430a      	orrs	r2, r1
    9d66:	1e51      	subs	r1, r2, #1
    9d68:	418a      	sbcs	r2, r1
    9d6a:	2100      	movs	r1, #0
    9d6c:	4317      	orrs	r7, r2
    9d6e:	e6af      	b.n	9ad0 <__aeabi_dsub+0xa4>
    9d70:	000007ff 	.word	0x000007ff
    9d74:	ff7fffff 	.word	0xff7fffff
    9d78:	800fffff 	.word	0x800fffff
    9d7c:	2e00      	cmp	r6, #0
    9d7e:	d03e      	beq.n	9dfe <__aeabi_dsub+0x3d2>
    9d80:	4eb3      	ldr	r6, [pc, #716]	; (a050 <__aeabi_dsub+0x624>)
    9d82:	45b4      	cmp	ip, r6
    9d84:	d045      	beq.n	9e12 <__aeabi_dsub+0x3e6>
    9d86:	2680      	movs	r6, #128	; 0x80
    9d88:	0436      	lsls	r6, r6, #16
    9d8a:	426d      	negs	r5, r5
    9d8c:	4334      	orrs	r4, r6
    9d8e:	2d38      	cmp	r5, #56	; 0x38
    9d90:	dd00      	ble.n	9d94 <__aeabi_dsub+0x368>
    9d92:	e0a8      	b.n	9ee6 <__aeabi_dsub+0x4ba>
    9d94:	2d1f      	cmp	r5, #31
    9d96:	dd00      	ble.n	9d9a <__aeabi_dsub+0x36e>
    9d98:	e11f      	b.n	9fda <__aeabi_dsub+0x5ae>
    9d9a:	2620      	movs	r6, #32
    9d9c:	0027      	movs	r7, r4
    9d9e:	4650      	mov	r0, sl
    9da0:	1b76      	subs	r6, r6, r5
    9da2:	40b7      	lsls	r7, r6
    9da4:	40e8      	lsrs	r0, r5
    9da6:	4307      	orrs	r7, r0
    9da8:	4650      	mov	r0, sl
    9daa:	40b0      	lsls	r0, r6
    9dac:	1e46      	subs	r6, r0, #1
    9dae:	41b0      	sbcs	r0, r6
    9db0:	40ec      	lsrs	r4, r5
    9db2:	4338      	orrs	r0, r7
    9db4:	1a17      	subs	r7, r2, r0
    9db6:	42ba      	cmp	r2, r7
    9db8:	4192      	sbcs	r2, r2
    9dba:	1b0c      	subs	r4, r1, r4
    9dbc:	4252      	negs	r2, r2
    9dbe:	1aa4      	subs	r4, r4, r2
    9dc0:	4666      	mov	r6, ip
    9dc2:	4698      	mov	r8, r3
    9dc4:	e68b      	b.n	9ade <__aeabi_dsub+0xb2>
    9dc6:	4664      	mov	r4, ip
    9dc8:	4667      	mov	r7, ip
    9dca:	432c      	orrs	r4, r5
    9dcc:	d000      	beq.n	9dd0 <__aeabi_dsub+0x3a4>
    9dce:	e68b      	b.n	9ae8 <__aeabi_dsub+0xbc>
    9dd0:	2500      	movs	r5, #0
    9dd2:	2600      	movs	r6, #0
    9dd4:	2700      	movs	r7, #0
    9dd6:	e6ea      	b.n	9bae <__aeabi_dsub+0x182>
    9dd8:	001e      	movs	r6, r3
    9dda:	e6ad      	b.n	9b38 <__aeabi_dsub+0x10c>
    9ddc:	2b1f      	cmp	r3, #31
    9dde:	dc60      	bgt.n	9ea2 <__aeabi_dsub+0x476>
    9de0:	2720      	movs	r7, #32
    9de2:	1af8      	subs	r0, r7, r3
    9de4:	000f      	movs	r7, r1
    9de6:	4684      	mov	ip, r0
    9de8:	4087      	lsls	r7, r0
    9dea:	0010      	movs	r0, r2
    9dec:	40d8      	lsrs	r0, r3
    9dee:	4307      	orrs	r7, r0
    9df0:	4660      	mov	r0, ip
    9df2:	4082      	lsls	r2, r0
    9df4:	1e50      	subs	r0, r2, #1
    9df6:	4182      	sbcs	r2, r0
    9df8:	40d9      	lsrs	r1, r3
    9dfa:	4317      	orrs	r7, r2
    9dfc:	e6f5      	b.n	9bea <__aeabi_dsub+0x1be>
    9dfe:	0026      	movs	r6, r4
    9e00:	4650      	mov	r0, sl
    9e02:	4306      	orrs	r6, r0
    9e04:	d005      	beq.n	9e12 <__aeabi_dsub+0x3e6>
    9e06:	43ed      	mvns	r5, r5
    9e08:	2d00      	cmp	r5, #0
    9e0a:	d0d3      	beq.n	9db4 <__aeabi_dsub+0x388>
    9e0c:	4e90      	ldr	r6, [pc, #576]	; (a050 <__aeabi_dsub+0x624>)
    9e0e:	45b4      	cmp	ip, r6
    9e10:	d1bd      	bne.n	9d8e <__aeabi_dsub+0x362>
    9e12:	000c      	movs	r4, r1
    9e14:	0017      	movs	r7, r2
    9e16:	4666      	mov	r6, ip
    9e18:	4698      	mov	r8, r3
    9e1a:	e68d      	b.n	9b38 <__aeabi_dsub+0x10c>
    9e1c:	488c      	ldr	r0, [pc, #560]	; (a050 <__aeabi_dsub+0x624>)
    9e1e:	4283      	cmp	r3, r0
    9e20:	d00b      	beq.n	9e3a <__aeabi_dsub+0x40e>
    9e22:	4663      	mov	r3, ip
    9e24:	e6d9      	b.n	9bda <__aeabi_dsub+0x1ae>
    9e26:	2d00      	cmp	r5, #0
    9e28:	d000      	beq.n	9e2c <__aeabi_dsub+0x400>
    9e2a:	e096      	b.n	9f5a <__aeabi_dsub+0x52e>
    9e2c:	0008      	movs	r0, r1
    9e2e:	4310      	orrs	r0, r2
    9e30:	d100      	bne.n	9e34 <__aeabi_dsub+0x408>
    9e32:	e0e2      	b.n	9ffa <__aeabi_dsub+0x5ce>
    9e34:	000c      	movs	r4, r1
    9e36:	0017      	movs	r7, r2
    9e38:	4698      	mov	r8, r3
    9e3a:	4e85      	ldr	r6, [pc, #532]	; (a050 <__aeabi_dsub+0x624>)
    9e3c:	e67c      	b.n	9b38 <__aeabi_dsub+0x10c>
    9e3e:	2500      	movs	r5, #0
    9e40:	e780      	b.n	9d44 <__aeabi_dsub+0x318>
    9e42:	2100      	movs	r1, #0
    9e44:	e78e      	b.n	9d64 <__aeabi_dsub+0x338>
    9e46:	0023      	movs	r3, r4
    9e48:	4650      	mov	r0, sl
    9e4a:	4303      	orrs	r3, r0
    9e4c:	2e00      	cmp	r6, #0
    9e4e:	d000      	beq.n	9e52 <__aeabi_dsub+0x426>
    9e50:	e0a8      	b.n	9fa4 <__aeabi_dsub+0x578>
    9e52:	2b00      	cmp	r3, #0
    9e54:	d100      	bne.n	9e58 <__aeabi_dsub+0x42c>
    9e56:	e0de      	b.n	a016 <__aeabi_dsub+0x5ea>
    9e58:	000b      	movs	r3, r1
    9e5a:	4313      	orrs	r3, r2
    9e5c:	d100      	bne.n	9e60 <__aeabi_dsub+0x434>
    9e5e:	e66b      	b.n	9b38 <__aeabi_dsub+0x10c>
    9e60:	4452      	add	r2, sl
    9e62:	4552      	cmp	r2, sl
    9e64:	4180      	sbcs	r0, r0
    9e66:	1864      	adds	r4, r4, r1
    9e68:	4240      	negs	r0, r0
    9e6a:	1824      	adds	r4, r4, r0
    9e6c:	0017      	movs	r7, r2
    9e6e:	0223      	lsls	r3, r4, #8
    9e70:	d400      	bmi.n	9e74 <__aeabi_dsub+0x448>
    9e72:	e6fd      	b.n	9c70 <__aeabi_dsub+0x244>
    9e74:	4b77      	ldr	r3, [pc, #476]	; (a054 <__aeabi_dsub+0x628>)
    9e76:	4666      	mov	r6, ip
    9e78:	401c      	ands	r4, r3
    9e7a:	e65d      	b.n	9b38 <__aeabi_dsub+0x10c>
    9e7c:	0025      	movs	r5, r4
    9e7e:	4650      	mov	r0, sl
    9e80:	4305      	orrs	r5, r0
    9e82:	2e00      	cmp	r6, #0
    9e84:	d1cf      	bne.n	9e26 <__aeabi_dsub+0x3fa>
    9e86:	2d00      	cmp	r5, #0
    9e88:	d14f      	bne.n	9f2a <__aeabi_dsub+0x4fe>
    9e8a:	000c      	movs	r4, r1
    9e8c:	4314      	orrs	r4, r2
    9e8e:	d100      	bne.n	9e92 <__aeabi_dsub+0x466>
    9e90:	e0a0      	b.n	9fd4 <__aeabi_dsub+0x5a8>
    9e92:	000c      	movs	r4, r1
    9e94:	0017      	movs	r7, r2
    9e96:	4698      	mov	r8, r3
    9e98:	e64e      	b.n	9b38 <__aeabi_dsub+0x10c>
    9e9a:	4666      	mov	r6, ip
    9e9c:	2400      	movs	r4, #0
    9e9e:	2700      	movs	r7, #0
    9ea0:	e685      	b.n	9bae <__aeabi_dsub+0x182>
    9ea2:	001f      	movs	r7, r3
    9ea4:	0008      	movs	r0, r1
    9ea6:	3f20      	subs	r7, #32
    9ea8:	40f8      	lsrs	r0, r7
    9eaa:	0007      	movs	r7, r0
    9eac:	2b20      	cmp	r3, #32
    9eae:	d100      	bne.n	9eb2 <__aeabi_dsub+0x486>
    9eb0:	e08e      	b.n	9fd0 <__aeabi_dsub+0x5a4>
    9eb2:	2040      	movs	r0, #64	; 0x40
    9eb4:	1ac3      	subs	r3, r0, r3
    9eb6:	4099      	lsls	r1, r3
    9eb8:	430a      	orrs	r2, r1
    9eba:	1e51      	subs	r1, r2, #1
    9ebc:	418a      	sbcs	r2, r1
    9ebe:	2100      	movs	r1, #0
    9ec0:	4317      	orrs	r7, r2
    9ec2:	e692      	b.n	9bea <__aeabi_dsub+0x1be>
    9ec4:	2e00      	cmp	r6, #0
    9ec6:	d114      	bne.n	9ef2 <__aeabi_dsub+0x4c6>
    9ec8:	0026      	movs	r6, r4
    9eca:	4650      	mov	r0, sl
    9ecc:	4306      	orrs	r6, r0
    9ece:	d062      	beq.n	9f96 <__aeabi_dsub+0x56a>
    9ed0:	43db      	mvns	r3, r3
    9ed2:	2b00      	cmp	r3, #0
    9ed4:	d15c      	bne.n	9f90 <__aeabi_dsub+0x564>
    9ed6:	1887      	adds	r7, r0, r2
    9ed8:	4297      	cmp	r7, r2
    9eda:	4192      	sbcs	r2, r2
    9edc:	1864      	adds	r4, r4, r1
    9ede:	4252      	negs	r2, r2
    9ee0:	18a4      	adds	r4, r4, r2
    9ee2:	4666      	mov	r6, ip
    9ee4:	e687      	b.n	9bf6 <__aeabi_dsub+0x1ca>
    9ee6:	4650      	mov	r0, sl
    9ee8:	4320      	orrs	r0, r4
    9eea:	1e44      	subs	r4, r0, #1
    9eec:	41a0      	sbcs	r0, r4
    9eee:	2400      	movs	r4, #0
    9ef0:	e760      	b.n	9db4 <__aeabi_dsub+0x388>
    9ef2:	4e57      	ldr	r6, [pc, #348]	; (a050 <__aeabi_dsub+0x624>)
    9ef4:	45b4      	cmp	ip, r6
    9ef6:	d04e      	beq.n	9f96 <__aeabi_dsub+0x56a>
    9ef8:	2680      	movs	r6, #128	; 0x80
    9efa:	0436      	lsls	r6, r6, #16
    9efc:	425b      	negs	r3, r3
    9efe:	4334      	orrs	r4, r6
    9f00:	2b38      	cmp	r3, #56	; 0x38
    9f02:	dd00      	ble.n	9f06 <__aeabi_dsub+0x4da>
    9f04:	e07f      	b.n	a006 <__aeabi_dsub+0x5da>
    9f06:	2b1f      	cmp	r3, #31
    9f08:	dd00      	ble.n	9f0c <__aeabi_dsub+0x4e0>
    9f0a:	e08b      	b.n	a024 <__aeabi_dsub+0x5f8>
    9f0c:	2620      	movs	r6, #32
    9f0e:	0027      	movs	r7, r4
    9f10:	4650      	mov	r0, sl
    9f12:	1af6      	subs	r6, r6, r3
    9f14:	40b7      	lsls	r7, r6
    9f16:	40d8      	lsrs	r0, r3
    9f18:	4307      	orrs	r7, r0
    9f1a:	4650      	mov	r0, sl
    9f1c:	40b0      	lsls	r0, r6
    9f1e:	1e46      	subs	r6, r0, #1
    9f20:	41b0      	sbcs	r0, r6
    9f22:	4307      	orrs	r7, r0
    9f24:	40dc      	lsrs	r4, r3
    9f26:	18bf      	adds	r7, r7, r2
    9f28:	e7d6      	b.n	9ed8 <__aeabi_dsub+0x4ac>
    9f2a:	000d      	movs	r5, r1
    9f2c:	4315      	orrs	r5, r2
    9f2e:	d100      	bne.n	9f32 <__aeabi_dsub+0x506>
    9f30:	e602      	b.n	9b38 <__aeabi_dsub+0x10c>
    9f32:	4650      	mov	r0, sl
    9f34:	1a80      	subs	r0, r0, r2
    9f36:	4582      	cmp	sl, r0
    9f38:	41bf      	sbcs	r7, r7
    9f3a:	1a65      	subs	r5, r4, r1
    9f3c:	427f      	negs	r7, r7
    9f3e:	1bed      	subs	r5, r5, r7
    9f40:	4684      	mov	ip, r0
    9f42:	0228      	lsls	r0, r5, #8
    9f44:	d400      	bmi.n	9f48 <__aeabi_dsub+0x51c>
    9f46:	e68d      	b.n	9c64 <__aeabi_dsub+0x238>
    9f48:	4650      	mov	r0, sl
    9f4a:	1a17      	subs	r7, r2, r0
    9f4c:	42ba      	cmp	r2, r7
    9f4e:	4192      	sbcs	r2, r2
    9f50:	1b0c      	subs	r4, r1, r4
    9f52:	4252      	negs	r2, r2
    9f54:	1aa4      	subs	r4, r4, r2
    9f56:	4698      	mov	r8, r3
    9f58:	e5ee      	b.n	9b38 <__aeabi_dsub+0x10c>
    9f5a:	000d      	movs	r5, r1
    9f5c:	4315      	orrs	r5, r2
    9f5e:	d100      	bne.n	9f62 <__aeabi_dsub+0x536>
    9f60:	e76b      	b.n	9e3a <__aeabi_dsub+0x40e>
    9f62:	4650      	mov	r0, sl
    9f64:	0767      	lsls	r7, r4, #29
    9f66:	08c0      	lsrs	r0, r0, #3
    9f68:	4307      	orrs	r7, r0
    9f6a:	2080      	movs	r0, #128	; 0x80
    9f6c:	08e4      	lsrs	r4, r4, #3
    9f6e:	0300      	lsls	r0, r0, #12
    9f70:	4204      	tst	r4, r0
    9f72:	d007      	beq.n	9f84 <__aeabi_dsub+0x558>
    9f74:	08cd      	lsrs	r5, r1, #3
    9f76:	4205      	tst	r5, r0
    9f78:	d104      	bne.n	9f84 <__aeabi_dsub+0x558>
    9f7a:	002c      	movs	r4, r5
    9f7c:	4698      	mov	r8, r3
    9f7e:	08d7      	lsrs	r7, r2, #3
    9f80:	0749      	lsls	r1, r1, #29
    9f82:	430f      	orrs	r7, r1
    9f84:	0f7b      	lsrs	r3, r7, #29
    9f86:	00e4      	lsls	r4, r4, #3
    9f88:	431c      	orrs	r4, r3
    9f8a:	00ff      	lsls	r7, r7, #3
    9f8c:	4e30      	ldr	r6, [pc, #192]	; (a050 <__aeabi_dsub+0x624>)
    9f8e:	e5d3      	b.n	9b38 <__aeabi_dsub+0x10c>
    9f90:	4e2f      	ldr	r6, [pc, #188]	; (a050 <__aeabi_dsub+0x624>)
    9f92:	45b4      	cmp	ip, r6
    9f94:	d1b4      	bne.n	9f00 <__aeabi_dsub+0x4d4>
    9f96:	000c      	movs	r4, r1
    9f98:	0017      	movs	r7, r2
    9f9a:	4666      	mov	r6, ip
    9f9c:	e5cc      	b.n	9b38 <__aeabi_dsub+0x10c>
    9f9e:	2700      	movs	r7, #0
    9fa0:	2400      	movs	r4, #0
    9fa2:	e5e8      	b.n	9b76 <__aeabi_dsub+0x14a>
    9fa4:	2b00      	cmp	r3, #0
    9fa6:	d039      	beq.n	a01c <__aeabi_dsub+0x5f0>
    9fa8:	000b      	movs	r3, r1
    9faa:	4313      	orrs	r3, r2
    9fac:	d100      	bne.n	9fb0 <__aeabi_dsub+0x584>
    9fae:	e744      	b.n	9e3a <__aeabi_dsub+0x40e>
    9fb0:	08c0      	lsrs	r0, r0, #3
    9fb2:	0767      	lsls	r7, r4, #29
    9fb4:	4307      	orrs	r7, r0
    9fb6:	2080      	movs	r0, #128	; 0x80
    9fb8:	08e4      	lsrs	r4, r4, #3
    9fba:	0300      	lsls	r0, r0, #12
    9fbc:	4204      	tst	r4, r0
    9fbe:	d0e1      	beq.n	9f84 <__aeabi_dsub+0x558>
    9fc0:	08cb      	lsrs	r3, r1, #3
    9fc2:	4203      	tst	r3, r0
    9fc4:	d1de      	bne.n	9f84 <__aeabi_dsub+0x558>
    9fc6:	08d7      	lsrs	r7, r2, #3
    9fc8:	0749      	lsls	r1, r1, #29
    9fca:	430f      	orrs	r7, r1
    9fcc:	001c      	movs	r4, r3
    9fce:	e7d9      	b.n	9f84 <__aeabi_dsub+0x558>
    9fd0:	2100      	movs	r1, #0
    9fd2:	e771      	b.n	9eb8 <__aeabi_dsub+0x48c>
    9fd4:	2500      	movs	r5, #0
    9fd6:	2700      	movs	r7, #0
    9fd8:	e5e9      	b.n	9bae <__aeabi_dsub+0x182>
    9fda:	002e      	movs	r6, r5
    9fdc:	0027      	movs	r7, r4
    9fde:	3e20      	subs	r6, #32
    9fe0:	40f7      	lsrs	r7, r6
    9fe2:	2d20      	cmp	r5, #32
    9fe4:	d02f      	beq.n	a046 <__aeabi_dsub+0x61a>
    9fe6:	2640      	movs	r6, #64	; 0x40
    9fe8:	1b75      	subs	r5, r6, r5
    9fea:	40ac      	lsls	r4, r5
    9fec:	4650      	mov	r0, sl
    9fee:	4320      	orrs	r0, r4
    9ff0:	1e44      	subs	r4, r0, #1
    9ff2:	41a0      	sbcs	r0, r4
    9ff4:	2400      	movs	r4, #0
    9ff6:	4338      	orrs	r0, r7
    9ff8:	e6dc      	b.n	9db4 <__aeabi_dsub+0x388>
    9ffa:	2480      	movs	r4, #128	; 0x80
    9ffc:	2500      	movs	r5, #0
    9ffe:	0324      	lsls	r4, r4, #12
    a000:	4e13      	ldr	r6, [pc, #76]	; (a050 <__aeabi_dsub+0x624>)
    a002:	2700      	movs	r7, #0
    a004:	e5d3      	b.n	9bae <__aeabi_dsub+0x182>
    a006:	4650      	mov	r0, sl
    a008:	4320      	orrs	r0, r4
    a00a:	0007      	movs	r7, r0
    a00c:	1e78      	subs	r0, r7, #1
    a00e:	4187      	sbcs	r7, r0
    a010:	2400      	movs	r4, #0
    a012:	18bf      	adds	r7, r7, r2
    a014:	e760      	b.n	9ed8 <__aeabi_dsub+0x4ac>
    a016:	000c      	movs	r4, r1
    a018:	0017      	movs	r7, r2
    a01a:	e58d      	b.n	9b38 <__aeabi_dsub+0x10c>
    a01c:	000c      	movs	r4, r1
    a01e:	0017      	movs	r7, r2
    a020:	4e0b      	ldr	r6, [pc, #44]	; (a050 <__aeabi_dsub+0x624>)
    a022:	e589      	b.n	9b38 <__aeabi_dsub+0x10c>
    a024:	001e      	movs	r6, r3
    a026:	0027      	movs	r7, r4
    a028:	3e20      	subs	r6, #32
    a02a:	40f7      	lsrs	r7, r6
    a02c:	2b20      	cmp	r3, #32
    a02e:	d00c      	beq.n	a04a <__aeabi_dsub+0x61e>
    a030:	2640      	movs	r6, #64	; 0x40
    a032:	1af3      	subs	r3, r6, r3
    a034:	409c      	lsls	r4, r3
    a036:	4650      	mov	r0, sl
    a038:	4320      	orrs	r0, r4
    a03a:	1e44      	subs	r4, r0, #1
    a03c:	41a0      	sbcs	r0, r4
    a03e:	4307      	orrs	r7, r0
    a040:	2400      	movs	r4, #0
    a042:	18bf      	adds	r7, r7, r2
    a044:	e748      	b.n	9ed8 <__aeabi_dsub+0x4ac>
    a046:	2400      	movs	r4, #0
    a048:	e7d0      	b.n	9fec <__aeabi_dsub+0x5c0>
    a04a:	2400      	movs	r4, #0
    a04c:	e7f3      	b.n	a036 <__aeabi_dsub+0x60a>
    a04e:	46c0      	nop			; (mov r8, r8)
    a050:	000007ff 	.word	0x000007ff
    a054:	ff7fffff 	.word	0xff7fffff

0000a058 <__aeabi_dcmpun>:
    a058:	b570      	push	{r4, r5, r6, lr}
    a05a:	4e0e      	ldr	r6, [pc, #56]	; (a094 <__aeabi_dcmpun+0x3c>)
    a05c:	030d      	lsls	r5, r1, #12
    a05e:	031c      	lsls	r4, r3, #12
    a060:	0049      	lsls	r1, r1, #1
    a062:	005b      	lsls	r3, r3, #1
    a064:	0b2d      	lsrs	r5, r5, #12
    a066:	0d49      	lsrs	r1, r1, #21
    a068:	0b24      	lsrs	r4, r4, #12
    a06a:	0d5b      	lsrs	r3, r3, #21
    a06c:	42b1      	cmp	r1, r6
    a06e:	d004      	beq.n	a07a <__aeabi_dcmpun+0x22>
    a070:	4908      	ldr	r1, [pc, #32]	; (a094 <__aeabi_dcmpun+0x3c>)
    a072:	2000      	movs	r0, #0
    a074:	428b      	cmp	r3, r1
    a076:	d008      	beq.n	a08a <__aeabi_dcmpun+0x32>
    a078:	bd70      	pop	{r4, r5, r6, pc}
    a07a:	4305      	orrs	r5, r0
    a07c:	2001      	movs	r0, #1
    a07e:	2d00      	cmp	r5, #0
    a080:	d1fa      	bne.n	a078 <__aeabi_dcmpun+0x20>
    a082:	4904      	ldr	r1, [pc, #16]	; (a094 <__aeabi_dcmpun+0x3c>)
    a084:	2000      	movs	r0, #0
    a086:	428b      	cmp	r3, r1
    a088:	d1f6      	bne.n	a078 <__aeabi_dcmpun+0x20>
    a08a:	4314      	orrs	r4, r2
    a08c:	0020      	movs	r0, r4
    a08e:	1e44      	subs	r4, r0, #1
    a090:	41a0      	sbcs	r0, r4
    a092:	e7f1      	b.n	a078 <__aeabi_dcmpun+0x20>
    a094:	000007ff 	.word	0x000007ff

0000a098 <__aeabi_d2iz>:
    a098:	b530      	push	{r4, r5, lr}
    a09a:	4d13      	ldr	r5, [pc, #76]	; (a0e8 <__aeabi_d2iz+0x50>)
    a09c:	030a      	lsls	r2, r1, #12
    a09e:	004b      	lsls	r3, r1, #1
    a0a0:	0b12      	lsrs	r2, r2, #12
    a0a2:	0d5b      	lsrs	r3, r3, #21
    a0a4:	0fc9      	lsrs	r1, r1, #31
    a0a6:	2400      	movs	r4, #0
    a0a8:	42ab      	cmp	r3, r5
    a0aa:	dd10      	ble.n	a0ce <__aeabi_d2iz+0x36>
    a0ac:	4c0f      	ldr	r4, [pc, #60]	; (a0ec <__aeabi_d2iz+0x54>)
    a0ae:	42a3      	cmp	r3, r4
    a0b0:	dc0f      	bgt.n	a0d2 <__aeabi_d2iz+0x3a>
    a0b2:	2480      	movs	r4, #128	; 0x80
    a0b4:	4d0e      	ldr	r5, [pc, #56]	; (a0f0 <__aeabi_d2iz+0x58>)
    a0b6:	0364      	lsls	r4, r4, #13
    a0b8:	4322      	orrs	r2, r4
    a0ba:	1aed      	subs	r5, r5, r3
    a0bc:	2d1f      	cmp	r5, #31
    a0be:	dd0b      	ble.n	a0d8 <__aeabi_d2iz+0x40>
    a0c0:	480c      	ldr	r0, [pc, #48]	; (a0f4 <__aeabi_d2iz+0x5c>)
    a0c2:	1ac3      	subs	r3, r0, r3
    a0c4:	40da      	lsrs	r2, r3
    a0c6:	4254      	negs	r4, r2
    a0c8:	2900      	cmp	r1, #0
    a0ca:	d100      	bne.n	a0ce <__aeabi_d2iz+0x36>
    a0cc:	0014      	movs	r4, r2
    a0ce:	0020      	movs	r0, r4
    a0d0:	bd30      	pop	{r4, r5, pc}
    a0d2:	4b09      	ldr	r3, [pc, #36]	; (a0f8 <__aeabi_d2iz+0x60>)
    a0d4:	18cc      	adds	r4, r1, r3
    a0d6:	e7fa      	b.n	a0ce <__aeabi_d2iz+0x36>
    a0d8:	4c08      	ldr	r4, [pc, #32]	; (a0fc <__aeabi_d2iz+0x64>)
    a0da:	40e8      	lsrs	r0, r5
    a0dc:	46a4      	mov	ip, r4
    a0de:	4463      	add	r3, ip
    a0e0:	409a      	lsls	r2, r3
    a0e2:	4302      	orrs	r2, r0
    a0e4:	e7ef      	b.n	a0c6 <__aeabi_d2iz+0x2e>
    a0e6:	46c0      	nop			; (mov r8, r8)
    a0e8:	000003fe 	.word	0x000003fe
    a0ec:	0000041d 	.word	0x0000041d
    a0f0:	00000433 	.word	0x00000433
    a0f4:	00000413 	.word	0x00000413
    a0f8:	7fffffff 	.word	0x7fffffff
    a0fc:	fffffbed 	.word	0xfffffbed

0000a100 <__aeabi_i2d>:
    a100:	b570      	push	{r4, r5, r6, lr}
    a102:	2800      	cmp	r0, #0
    a104:	d030      	beq.n	a168 <__aeabi_i2d+0x68>
    a106:	17c3      	asrs	r3, r0, #31
    a108:	18c4      	adds	r4, r0, r3
    a10a:	405c      	eors	r4, r3
    a10c:	0fc5      	lsrs	r5, r0, #31
    a10e:	0020      	movs	r0, r4
    a110:	f000 f94c 	bl	a3ac <__clzsi2>
    a114:	4b17      	ldr	r3, [pc, #92]	; (a174 <__aeabi_i2d+0x74>)
    a116:	4a18      	ldr	r2, [pc, #96]	; (a178 <__aeabi_i2d+0x78>)
    a118:	1a1b      	subs	r3, r3, r0
    a11a:	1ad2      	subs	r2, r2, r3
    a11c:	2a1f      	cmp	r2, #31
    a11e:	dd18      	ble.n	a152 <__aeabi_i2d+0x52>
    a120:	4a16      	ldr	r2, [pc, #88]	; (a17c <__aeabi_i2d+0x7c>)
    a122:	1ad2      	subs	r2, r2, r3
    a124:	4094      	lsls	r4, r2
    a126:	2200      	movs	r2, #0
    a128:	0324      	lsls	r4, r4, #12
    a12a:	055b      	lsls	r3, r3, #21
    a12c:	0b24      	lsrs	r4, r4, #12
    a12e:	0d5b      	lsrs	r3, r3, #21
    a130:	2100      	movs	r1, #0
    a132:	0010      	movs	r0, r2
    a134:	0324      	lsls	r4, r4, #12
    a136:	0d0a      	lsrs	r2, r1, #20
    a138:	0b24      	lsrs	r4, r4, #12
    a13a:	0512      	lsls	r2, r2, #20
    a13c:	4322      	orrs	r2, r4
    a13e:	4c10      	ldr	r4, [pc, #64]	; (a180 <__aeabi_i2d+0x80>)
    a140:	051b      	lsls	r3, r3, #20
    a142:	4022      	ands	r2, r4
    a144:	4313      	orrs	r3, r2
    a146:	005b      	lsls	r3, r3, #1
    a148:	07ed      	lsls	r5, r5, #31
    a14a:	085b      	lsrs	r3, r3, #1
    a14c:	432b      	orrs	r3, r5
    a14e:	0019      	movs	r1, r3
    a150:	bd70      	pop	{r4, r5, r6, pc}
    a152:	0021      	movs	r1, r4
    a154:	4091      	lsls	r1, r2
    a156:	000a      	movs	r2, r1
    a158:	210b      	movs	r1, #11
    a15a:	1a08      	subs	r0, r1, r0
    a15c:	40c4      	lsrs	r4, r0
    a15e:	055b      	lsls	r3, r3, #21
    a160:	0324      	lsls	r4, r4, #12
    a162:	0b24      	lsrs	r4, r4, #12
    a164:	0d5b      	lsrs	r3, r3, #21
    a166:	e7e3      	b.n	a130 <__aeabi_i2d+0x30>
    a168:	2500      	movs	r5, #0
    a16a:	2300      	movs	r3, #0
    a16c:	2400      	movs	r4, #0
    a16e:	2200      	movs	r2, #0
    a170:	e7de      	b.n	a130 <__aeabi_i2d+0x30>
    a172:	46c0      	nop			; (mov r8, r8)
    a174:	0000041e 	.word	0x0000041e
    a178:	00000433 	.word	0x00000433
    a17c:	00000413 	.word	0x00000413
    a180:	800fffff 	.word	0x800fffff

0000a184 <__aeabi_ui2d>:
    a184:	b510      	push	{r4, lr}
    a186:	1e04      	subs	r4, r0, #0
    a188:	d028      	beq.n	a1dc <__aeabi_ui2d+0x58>
    a18a:	f000 f90f 	bl	a3ac <__clzsi2>
    a18e:	4b15      	ldr	r3, [pc, #84]	; (a1e4 <__aeabi_ui2d+0x60>)
    a190:	4a15      	ldr	r2, [pc, #84]	; (a1e8 <__aeabi_ui2d+0x64>)
    a192:	1a1b      	subs	r3, r3, r0
    a194:	1ad2      	subs	r2, r2, r3
    a196:	2a1f      	cmp	r2, #31
    a198:	dd15      	ble.n	a1c6 <__aeabi_ui2d+0x42>
    a19a:	4a14      	ldr	r2, [pc, #80]	; (a1ec <__aeabi_ui2d+0x68>)
    a19c:	1ad2      	subs	r2, r2, r3
    a19e:	4094      	lsls	r4, r2
    a1a0:	2200      	movs	r2, #0
    a1a2:	0324      	lsls	r4, r4, #12
    a1a4:	055b      	lsls	r3, r3, #21
    a1a6:	0b24      	lsrs	r4, r4, #12
    a1a8:	0d5b      	lsrs	r3, r3, #21
    a1aa:	2100      	movs	r1, #0
    a1ac:	0010      	movs	r0, r2
    a1ae:	0324      	lsls	r4, r4, #12
    a1b0:	0d0a      	lsrs	r2, r1, #20
    a1b2:	0b24      	lsrs	r4, r4, #12
    a1b4:	0512      	lsls	r2, r2, #20
    a1b6:	4322      	orrs	r2, r4
    a1b8:	4c0d      	ldr	r4, [pc, #52]	; (a1f0 <__aeabi_ui2d+0x6c>)
    a1ba:	051b      	lsls	r3, r3, #20
    a1bc:	4022      	ands	r2, r4
    a1be:	4313      	orrs	r3, r2
    a1c0:	005b      	lsls	r3, r3, #1
    a1c2:	0859      	lsrs	r1, r3, #1
    a1c4:	bd10      	pop	{r4, pc}
    a1c6:	0021      	movs	r1, r4
    a1c8:	4091      	lsls	r1, r2
    a1ca:	000a      	movs	r2, r1
    a1cc:	210b      	movs	r1, #11
    a1ce:	1a08      	subs	r0, r1, r0
    a1d0:	40c4      	lsrs	r4, r0
    a1d2:	055b      	lsls	r3, r3, #21
    a1d4:	0324      	lsls	r4, r4, #12
    a1d6:	0b24      	lsrs	r4, r4, #12
    a1d8:	0d5b      	lsrs	r3, r3, #21
    a1da:	e7e6      	b.n	a1aa <__aeabi_ui2d+0x26>
    a1dc:	2300      	movs	r3, #0
    a1de:	2400      	movs	r4, #0
    a1e0:	2200      	movs	r2, #0
    a1e2:	e7e2      	b.n	a1aa <__aeabi_ui2d+0x26>
    a1e4:	0000041e 	.word	0x0000041e
    a1e8:	00000433 	.word	0x00000433
    a1ec:	00000413 	.word	0x00000413
    a1f0:	800fffff 	.word	0x800fffff

0000a1f4 <__aeabi_f2d>:
    a1f4:	0041      	lsls	r1, r0, #1
    a1f6:	0e09      	lsrs	r1, r1, #24
    a1f8:	1c4b      	adds	r3, r1, #1
    a1fa:	b570      	push	{r4, r5, r6, lr}
    a1fc:	b2db      	uxtb	r3, r3
    a1fe:	0246      	lsls	r6, r0, #9
    a200:	0a75      	lsrs	r5, r6, #9
    a202:	0fc4      	lsrs	r4, r0, #31
    a204:	2b01      	cmp	r3, #1
    a206:	dd14      	ble.n	a232 <__aeabi_f2d+0x3e>
    a208:	23e0      	movs	r3, #224	; 0xe0
    a20a:	009b      	lsls	r3, r3, #2
    a20c:	076d      	lsls	r5, r5, #29
    a20e:	0b36      	lsrs	r6, r6, #12
    a210:	18cb      	adds	r3, r1, r3
    a212:	2100      	movs	r1, #0
    a214:	0d0a      	lsrs	r2, r1, #20
    a216:	0028      	movs	r0, r5
    a218:	0512      	lsls	r2, r2, #20
    a21a:	4d1c      	ldr	r5, [pc, #112]	; (a28c <__aeabi_f2d+0x98>)
    a21c:	4332      	orrs	r2, r6
    a21e:	055b      	lsls	r3, r3, #21
    a220:	402a      	ands	r2, r5
    a222:	085b      	lsrs	r3, r3, #1
    a224:	4313      	orrs	r3, r2
    a226:	005b      	lsls	r3, r3, #1
    a228:	07e4      	lsls	r4, r4, #31
    a22a:	085b      	lsrs	r3, r3, #1
    a22c:	4323      	orrs	r3, r4
    a22e:	0019      	movs	r1, r3
    a230:	bd70      	pop	{r4, r5, r6, pc}
    a232:	2900      	cmp	r1, #0
    a234:	d114      	bne.n	a260 <__aeabi_f2d+0x6c>
    a236:	2d00      	cmp	r5, #0
    a238:	d01e      	beq.n	a278 <__aeabi_f2d+0x84>
    a23a:	0028      	movs	r0, r5
    a23c:	f000 f8b6 	bl	a3ac <__clzsi2>
    a240:	280a      	cmp	r0, #10
    a242:	dc1c      	bgt.n	a27e <__aeabi_f2d+0x8a>
    a244:	230b      	movs	r3, #11
    a246:	002a      	movs	r2, r5
    a248:	1a1b      	subs	r3, r3, r0
    a24a:	40da      	lsrs	r2, r3
    a24c:	0003      	movs	r3, r0
    a24e:	3315      	adds	r3, #21
    a250:	409d      	lsls	r5, r3
    a252:	4b0f      	ldr	r3, [pc, #60]	; (a290 <__aeabi_f2d+0x9c>)
    a254:	0312      	lsls	r2, r2, #12
    a256:	1a1b      	subs	r3, r3, r0
    a258:	055b      	lsls	r3, r3, #21
    a25a:	0b16      	lsrs	r6, r2, #12
    a25c:	0d5b      	lsrs	r3, r3, #21
    a25e:	e7d8      	b.n	a212 <__aeabi_f2d+0x1e>
    a260:	2d00      	cmp	r5, #0
    a262:	d006      	beq.n	a272 <__aeabi_f2d+0x7e>
    a264:	0b32      	lsrs	r2, r6, #12
    a266:	2680      	movs	r6, #128	; 0x80
    a268:	0336      	lsls	r6, r6, #12
    a26a:	076d      	lsls	r5, r5, #29
    a26c:	4316      	orrs	r6, r2
    a26e:	4b09      	ldr	r3, [pc, #36]	; (a294 <__aeabi_f2d+0xa0>)
    a270:	e7cf      	b.n	a212 <__aeabi_f2d+0x1e>
    a272:	4b08      	ldr	r3, [pc, #32]	; (a294 <__aeabi_f2d+0xa0>)
    a274:	2600      	movs	r6, #0
    a276:	e7cc      	b.n	a212 <__aeabi_f2d+0x1e>
    a278:	2300      	movs	r3, #0
    a27a:	2600      	movs	r6, #0
    a27c:	e7c9      	b.n	a212 <__aeabi_f2d+0x1e>
    a27e:	0003      	movs	r3, r0
    a280:	002a      	movs	r2, r5
    a282:	3b0b      	subs	r3, #11
    a284:	409a      	lsls	r2, r3
    a286:	2500      	movs	r5, #0
    a288:	e7e3      	b.n	a252 <__aeabi_f2d+0x5e>
    a28a:	46c0      	nop			; (mov r8, r8)
    a28c:	800fffff 	.word	0x800fffff
    a290:	00000389 	.word	0x00000389
    a294:	000007ff 	.word	0x000007ff

0000a298 <__aeabi_d2f>:
    a298:	b5f0      	push	{r4, r5, r6, r7, lr}
    a29a:	004c      	lsls	r4, r1, #1
    a29c:	0d64      	lsrs	r4, r4, #21
    a29e:	030b      	lsls	r3, r1, #12
    a2a0:	1c62      	adds	r2, r4, #1
    a2a2:	0f45      	lsrs	r5, r0, #29
    a2a4:	0a5b      	lsrs	r3, r3, #9
    a2a6:	0552      	lsls	r2, r2, #21
    a2a8:	432b      	orrs	r3, r5
    a2aa:	0fc9      	lsrs	r1, r1, #31
    a2ac:	00c5      	lsls	r5, r0, #3
    a2ae:	0d52      	lsrs	r2, r2, #21
    a2b0:	2a01      	cmp	r2, #1
    a2b2:	dd28      	ble.n	a306 <__aeabi_d2f+0x6e>
    a2b4:	4a3a      	ldr	r2, [pc, #232]	; (a3a0 <__aeabi_d2f+0x108>)
    a2b6:	18a6      	adds	r6, r4, r2
    a2b8:	2efe      	cmp	r6, #254	; 0xfe
    a2ba:	dc1b      	bgt.n	a2f4 <__aeabi_d2f+0x5c>
    a2bc:	2e00      	cmp	r6, #0
    a2be:	dd3e      	ble.n	a33e <__aeabi_d2f+0xa6>
    a2c0:	0180      	lsls	r0, r0, #6
    a2c2:	0002      	movs	r2, r0
    a2c4:	1e50      	subs	r0, r2, #1
    a2c6:	4182      	sbcs	r2, r0
    a2c8:	0f6d      	lsrs	r5, r5, #29
    a2ca:	432a      	orrs	r2, r5
    a2cc:	00db      	lsls	r3, r3, #3
    a2ce:	4313      	orrs	r3, r2
    a2d0:	075a      	lsls	r2, r3, #29
    a2d2:	d004      	beq.n	a2de <__aeabi_d2f+0x46>
    a2d4:	220f      	movs	r2, #15
    a2d6:	401a      	ands	r2, r3
    a2d8:	2a04      	cmp	r2, #4
    a2da:	d000      	beq.n	a2de <__aeabi_d2f+0x46>
    a2dc:	3304      	adds	r3, #4
    a2de:	2280      	movs	r2, #128	; 0x80
    a2e0:	04d2      	lsls	r2, r2, #19
    a2e2:	401a      	ands	r2, r3
    a2e4:	d05a      	beq.n	a39c <__aeabi_d2f+0x104>
    a2e6:	3601      	adds	r6, #1
    a2e8:	2eff      	cmp	r6, #255	; 0xff
    a2ea:	d003      	beq.n	a2f4 <__aeabi_d2f+0x5c>
    a2ec:	019b      	lsls	r3, r3, #6
    a2ee:	0a5b      	lsrs	r3, r3, #9
    a2f0:	b2f4      	uxtb	r4, r6
    a2f2:	e001      	b.n	a2f8 <__aeabi_d2f+0x60>
    a2f4:	24ff      	movs	r4, #255	; 0xff
    a2f6:	2300      	movs	r3, #0
    a2f8:	0258      	lsls	r0, r3, #9
    a2fa:	05e4      	lsls	r4, r4, #23
    a2fc:	0a40      	lsrs	r0, r0, #9
    a2fe:	07c9      	lsls	r1, r1, #31
    a300:	4320      	orrs	r0, r4
    a302:	4308      	orrs	r0, r1
    a304:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a306:	2c00      	cmp	r4, #0
    a308:	d007      	beq.n	a31a <__aeabi_d2f+0x82>
    a30a:	431d      	orrs	r5, r3
    a30c:	d0f2      	beq.n	a2f4 <__aeabi_d2f+0x5c>
    a30e:	2080      	movs	r0, #128	; 0x80
    a310:	00db      	lsls	r3, r3, #3
    a312:	0480      	lsls	r0, r0, #18
    a314:	4303      	orrs	r3, r0
    a316:	26ff      	movs	r6, #255	; 0xff
    a318:	e7da      	b.n	a2d0 <__aeabi_d2f+0x38>
    a31a:	432b      	orrs	r3, r5
    a31c:	d003      	beq.n	a326 <__aeabi_d2f+0x8e>
    a31e:	2305      	movs	r3, #5
    a320:	08db      	lsrs	r3, r3, #3
    a322:	2cff      	cmp	r4, #255	; 0xff
    a324:	d003      	beq.n	a32e <__aeabi_d2f+0x96>
    a326:	025b      	lsls	r3, r3, #9
    a328:	0a5b      	lsrs	r3, r3, #9
    a32a:	b2e4      	uxtb	r4, r4
    a32c:	e7e4      	b.n	a2f8 <__aeabi_d2f+0x60>
    a32e:	2b00      	cmp	r3, #0
    a330:	d032      	beq.n	a398 <__aeabi_d2f+0x100>
    a332:	2080      	movs	r0, #128	; 0x80
    a334:	03c0      	lsls	r0, r0, #15
    a336:	4303      	orrs	r3, r0
    a338:	025b      	lsls	r3, r3, #9
    a33a:	0a5b      	lsrs	r3, r3, #9
    a33c:	e7dc      	b.n	a2f8 <__aeabi_d2f+0x60>
    a33e:	0032      	movs	r2, r6
    a340:	3217      	adds	r2, #23
    a342:	db14      	blt.n	a36e <__aeabi_d2f+0xd6>
    a344:	2280      	movs	r2, #128	; 0x80
    a346:	271e      	movs	r7, #30
    a348:	0412      	lsls	r2, r2, #16
    a34a:	4313      	orrs	r3, r2
    a34c:	1bbf      	subs	r7, r7, r6
    a34e:	2f1f      	cmp	r7, #31
    a350:	dc0f      	bgt.n	a372 <__aeabi_d2f+0xda>
    a352:	4a14      	ldr	r2, [pc, #80]	; (a3a4 <__aeabi_d2f+0x10c>)
    a354:	4694      	mov	ip, r2
    a356:	4464      	add	r4, ip
    a358:	002a      	movs	r2, r5
    a35a:	40a5      	lsls	r5, r4
    a35c:	002e      	movs	r6, r5
    a35e:	40a3      	lsls	r3, r4
    a360:	1e75      	subs	r5, r6, #1
    a362:	41ae      	sbcs	r6, r5
    a364:	40fa      	lsrs	r2, r7
    a366:	4333      	orrs	r3, r6
    a368:	4313      	orrs	r3, r2
    a36a:	2600      	movs	r6, #0
    a36c:	e7b0      	b.n	a2d0 <__aeabi_d2f+0x38>
    a36e:	2400      	movs	r4, #0
    a370:	e7d5      	b.n	a31e <__aeabi_d2f+0x86>
    a372:	2202      	movs	r2, #2
    a374:	4252      	negs	r2, r2
    a376:	1b96      	subs	r6, r2, r6
    a378:	001a      	movs	r2, r3
    a37a:	40f2      	lsrs	r2, r6
    a37c:	2f20      	cmp	r7, #32
    a37e:	d009      	beq.n	a394 <__aeabi_d2f+0xfc>
    a380:	4809      	ldr	r0, [pc, #36]	; (a3a8 <__aeabi_d2f+0x110>)
    a382:	4684      	mov	ip, r0
    a384:	4464      	add	r4, ip
    a386:	40a3      	lsls	r3, r4
    a388:	432b      	orrs	r3, r5
    a38a:	1e5d      	subs	r5, r3, #1
    a38c:	41ab      	sbcs	r3, r5
    a38e:	2600      	movs	r6, #0
    a390:	4313      	orrs	r3, r2
    a392:	e79d      	b.n	a2d0 <__aeabi_d2f+0x38>
    a394:	2300      	movs	r3, #0
    a396:	e7f7      	b.n	a388 <__aeabi_d2f+0xf0>
    a398:	2300      	movs	r3, #0
    a39a:	e7ad      	b.n	a2f8 <__aeabi_d2f+0x60>
    a39c:	0034      	movs	r4, r6
    a39e:	e7bf      	b.n	a320 <__aeabi_d2f+0x88>
    a3a0:	fffffc80 	.word	0xfffffc80
    a3a4:	fffffc82 	.word	0xfffffc82
    a3a8:	fffffca2 	.word	0xfffffca2

0000a3ac <__clzsi2>:
    a3ac:	211c      	movs	r1, #28
    a3ae:	2301      	movs	r3, #1
    a3b0:	041b      	lsls	r3, r3, #16
    a3b2:	4298      	cmp	r0, r3
    a3b4:	d301      	bcc.n	a3ba <__clzsi2+0xe>
    a3b6:	0c00      	lsrs	r0, r0, #16
    a3b8:	3910      	subs	r1, #16
    a3ba:	0a1b      	lsrs	r3, r3, #8
    a3bc:	4298      	cmp	r0, r3
    a3be:	d301      	bcc.n	a3c4 <__clzsi2+0x18>
    a3c0:	0a00      	lsrs	r0, r0, #8
    a3c2:	3908      	subs	r1, #8
    a3c4:	091b      	lsrs	r3, r3, #4
    a3c6:	4298      	cmp	r0, r3
    a3c8:	d301      	bcc.n	a3ce <__clzsi2+0x22>
    a3ca:	0900      	lsrs	r0, r0, #4
    a3cc:	3904      	subs	r1, #4
    a3ce:	a202      	add	r2, pc, #8	; (adr r2, a3d8 <__clzsi2+0x2c>)
    a3d0:	5c10      	ldrb	r0, [r2, r0]
    a3d2:	1840      	adds	r0, r0, r1
    a3d4:	4770      	bx	lr
    a3d6:	46c0      	nop			; (mov r8, r8)
    a3d8:	02020304 	.word	0x02020304
    a3dc:	01010101 	.word	0x01010101
	...
    a3e8:	6b636170 	.word	0x6b636170
    a3ec:	72207465 	.word	0x72207465
    a3f0:	69656365 	.word	0x69656365
    a3f4:	00646576 	.word	0x00646576

0000a3f8 <_tcc_intflag>:
    a3f8:	00000001 00000002 00000004 00000008     ................
    a408:	00001000 00002000 00004000 00008000     ..... ...@......
    a418:	00010000 00020000 00040000 00080000     ................
    a428:	0000776d 00000000 0000206d 00000000     mw......m ......

0000a438 <tc_interrupt_vectors.12756>:
    a438:	00141312 73657431 00000074 42000800     ....1test......B
    a448:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    a458:	42001c00 00001a1e 00001a1a 00001a1a     ...B............
    a468:	00001a7c 00001a7c 00001a32 00001a24     |...|...2...$...
    a478:	00001a38 00001a6a 00001cb8 00001c98     8...j...........
    a488:	00001c98 00001d24 00001caa 00001cc6     ....$...........
    a498:	00001c9c 00001cd4 00001d14 42002c00     .............,.B
    a4a8:	42003000 42003400 00002ff2 000031aa     .0.B.4.B./...1..
    a4b8:	000031cc 000033a0 000033a8 000038ee     .1...3...3...8..
    a4c8:	000038f6 0000390e 0000392e 000038f6     .8...9...9...8..
    a4d8:	00003950 000038f6 00003994              P9...8...9..

0000a4e4 <tc_interrupt_vectors.11884>:
    a4e4:	00141312 6e6f7266 6f6e2074 73206564     ....front node s
    a4f4:	70757465 6d6f6320 74656c70 00000065     etup complete...

0000a504 <_global_impure_ptr>:
    a504:	20000010 00464e49 00666e69 004e414e     ... INF.inf.NAN.
    a514:	006e616e 31300030 35343332 39383736     nan.0.0123456789
    a524:	44434241 30004645 34333231 38373635     ABCDEF.012345678
    a534:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
    a544:	4e614e00 00000000                       .NaN....

0000a54c <__sf_fake_stderr>:
	...

0000a56c <__sf_fake_stdin>:
	...

0000a58c <__sf_fake_stdout>:
	...

0000a5b0 <__mprec_bigtens>:
    a5b0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    a5c0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    a5d0:	7f73bf3c 75154fdd                       <.s..O.u

0000a5d8 <__mprec_tens>:
    a5d8:	00000000 3ff00000 00000000 40240000     .......?......$@
    a5e8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    a5f8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    a608:	00000000 412e8480 00000000 416312d0     .......A......cA
    a618:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    a628:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    a638:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    a648:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    a658:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    a668:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    a678:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    a688:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    a698:	79d99db4 44ea7843                       ...yCx.D

0000a6a0 <p05.6052>:
    a6a0:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    a6b0:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
    a6c0:	5849534f 00002e00                                OSIX...

0000a6c7 <_ctype_>:
    a6c7:	20202000 20202020 28282020 20282828     .         ((((( 
    a6d7:	20202020 20202020 20202020 20202020                     
    a6e7:	10108820 10101010 10101010 10101010      ...............
    a6f7:	04040410 04040404 10040404 10101010     ................
    a707:	41411010 41414141 01010101 01010101     ..AAAAAA........
    a717:	01010101 01010101 01010101 10101010     ................
    a727:	42421010 42424242 02020202 02020202     ..BBBBBB........
    a737:	02020202 02020202 02020202 10101010     ................
    a747:	00000020 00000000 00000000 00000000      ...............
	...
    a7c7:	00817000 00814000 00815200 00809400     .p...@...R......
    a7d7:	00815200 00813600 00815200 00809400     .R...6...R......
    a7e7:	00814000 00814000 00813600 00809400     .@...@...6......
    a7f7:	00809c00 00809c00 00809c00 00815800     .............X..
    a807:	00814000 00814000 00811400 0081f800     .@...@..........
    a817:	00811400 00813600 00811400 0081f800     .....6..........
    a827:	00814000 00814000 00813600 0081f800     .@...@...6......
    a837:	00809c00 00809c00 00809c00 00820200     ................
    a847:	0084f000 00844000 00844000 00843e00     .....@...@...>..
    a857:	0084e200 0084e200 0084d800 00843e00     .............>..
    a867:	0084e200 0084d800 0084e200 00843e00     .............>..
    a877:	0084e800 0084e800 0084e800 00857800     .............x..
    a887:	008ebc00 008e9e00 008e5800 008d7600     .........X...v..
    a897:	008e5800 008e9000 008e5800 008d7600     .X.......X...v..
    a8a7:	008e9e00 008e9e00 008e9000 008d7600     .............v..
    a8b7:	008d6e00 008d6e00 008d6e00 0090d400     .n...n...n......
    a8c7:	00971c00 0095dc00 0095dc00 0095d800     ................
    a8d7:	0096f400 0096f400 0096e600 0095d800     ................
    a8e7:	0096f400 0096e600 0096f400 0095d800     ................
    a8f7:	0096fc00 0096fc00 0096fc00 00990000     ................
	...

0000a908 <_init>:
    a908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a90a:	46c0      	nop			; (mov r8, r8)
    a90c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a90e:	bc08      	pop	{r3}
    a910:	469e      	mov	lr, r3
    a912:	4770      	bx	lr

0000a914 <__init_array_start>:
    a914:	000000dd 	.word	0x000000dd

0000a918 <_fini>:
    a918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a91a:	46c0      	nop			; (mov r8, r8)
    a91c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a91e:	bc08      	pop	{r3}
    a920:	469e      	mov	lr, r3
    a922:	4770      	bx	lr

0000a924 <__fini_array_start>:
    a924:	000000b5 	.word	0x000000b5
