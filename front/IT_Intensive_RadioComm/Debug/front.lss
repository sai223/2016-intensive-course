
front.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008dc0  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e0  20000000  00008dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000848  200001e0  00008fa0  000201e0  2**2
                  ALLOC
  3 .stack        00002000  20000a28  000097e8  000201e0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  5 .comment      0000008c  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005ff61  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00008562  00000000  00000000  000801f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e471  00000000  00000000  00088757  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c18  00000000  00000000  00096bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001418  00000000  00000000  000977e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000226ba  00000000  00000000  00098bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001cdd9  00000000  00000000  000bb2b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a235  00000000  00000000  000d808b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002ce4  00000000  00000000  001622c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	28 2a 00 20 f9 26 00 00 f5 26 00 00 f5 26 00 00     (*. .&...&...&..
	...
      2c:	f5 26 00 00 00 00 00 00 00 00 00 00 f5 26 00 00     .&...........&..
      3c:	f5 26 00 00 f5 26 00 00 f5 26 00 00 f5 26 00 00     .&...&...&...&..
      4c:	f5 26 00 00 39 0a 00 00 f5 26 00 00 f5 26 00 00     .&..9....&...&..
      5c:	f5 26 00 00 f5 26 00 00 25 10 00 00 35 10 00 00     .&...&..%...5...
      6c:	45 10 00 00 55 10 00 00 65 10 00 00 75 10 00 00     E...U...e...u...
      7c:	b5 04 00 00 c5 04 00 00 d5 04 00 00 d5 23 00 00     .............#..
      8c:	e5 23 00 00 f5 23 00 00 00 00 00 00 00 00 00 00     .#...#..........
      9c:	f5 26 00 00 f5 26 00 00 00 00 00 00 f5 26 00 00     .&...&.......&..
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001e0 	.word	0x200001e0
      d4:	00000000 	.word	0x00000000
      d8:	00008dc0 	.word	0x00008dc0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001e4 	.word	0x200001e4
     108:	00008dc0 	.word	0x00008dc0
     10c:	00008dc0 	.word	0x00008dc0
     110:	00000000 	.word	0x00000000

00000114 <artist_init_maze>:
*/

#include "Maze.h"

void artist_init_maze (void) {
	artist_front.maze_status = STOP;
     114:	2103      	movs	r1, #3
     116:	23d8      	movs	r3, #216	; 0xd8
     118:	4a01      	ldr	r2, [pc, #4]	; (120 <artist_init_maze+0xc>)
     11a:	54d1      	strb	r1, [r2, r3]
}
     11c:	4770      	bx	lr
     11e:	46c0      	nop			; (mov r8, r8)
     120:	200007bc 	.word	0x200007bc

00000124 <artist_do_maze>:
void artist_do_maze (void) {
     124:	b510      	push	{r4, lr}
	usart_write_buffer_job(&(artist_front.usart_instance), "ms\0\0\0", MAX_RX_BUFFER_LENGTH);
	break;
	}
	*/
	static uint16_t count =0;
	count ++;
     126:	493c      	ldr	r1, [pc, #240]	; (218 <artist_do_maze+0xf4>)
     128:	880a      	ldrh	r2, [r1, #0]
     12a:	1c53      	adds	r3, r2, #1
     12c:	b29b      	uxth	r3, r3
     12e:	800b      	strh	r3, [r1, #0]
	static bool goStraight = true;
	
	if (count > 72) {
     130:	2b48      	cmp	r3, #72	; 0x48
     132:	d933      	bls.n	19c <artist_do_maze+0x78>
		if ( count > 72 && count <= 74)
     134:	0011      	movs	r1, r2
     136:	3948      	subs	r1, #72	; 0x48
     138:	b289      	uxth	r1, r1
     13a:	2901      	cmp	r1, #1
     13c:	d922      	bls.n	184 <artist_do_maze+0x60>
		usart_write_buffer_job(&(artist_front.usart_instance), "md\0\0\0", MAX_RX_BUFFER_LENGTH);
		else if (count > 74 && count <= 82)
     13e:	0011      	movs	r1, r2
     140:	394a      	subs	r1, #74	; 0x4a
     142:	b289      	uxth	r1, r1
     144:	2907      	cmp	r1, #7
     146:	d923      	bls.n	190 <artist_do_maze+0x6c>
		usart_write_buffer_job(&(artist_front.usart_instance), "m \0\0\0", MAX_RX_BUFFER_LENGTH);
		else if (count > 82 && count <= 84)
     148:	0011      	movs	r1, r2
     14a:	3952      	subs	r1, #82	; 0x52
     14c:	b289      	uxth	r1, r1
     14e:	2901      	cmp	r1, #1
     150:	d937      	bls.n	1c2 <artist_do_maze+0x9e>
		usart_write_buffer_job(&(artist_front.usart_instance), "mw\0\0\0", MAX_RX_BUFFER_LENGTH);
		else if (count > 84 && count <= 92)
     152:	0011      	movs	r1, r2
     154:	3954      	subs	r1, #84	; 0x54
     156:	b289      	uxth	r1, r1
     158:	2907      	cmp	r1, #7
     15a:	d939      	bls.n	1d0 <artist_do_maze+0xac>
		usart_write_buffer_job(&(artist_front.usart_instance), "m \0\0\0", MAX_RX_BUFFER_LENGTH);
		else if (count > 92 && count <= 95)
     15c:	0011      	movs	r1, r2
     15e:	395c      	subs	r1, #92	; 0x5c
     160:	b289      	uxth	r1, r1
     162:	2902      	cmp	r1, #2
     164:	d93b      	bls.n	1de <artist_do_maze+0xba>
		usart_write_buffer_job(&(artist_front.usart_instance), "ma\0\0\0", MAX_RX_BUFFER_LENGTH);
		else if (count > 95 && count <= 103)
     166:	3a5f      	subs	r2, #95	; 0x5f
     168:	b292      	uxth	r2, r2
     16a:	2a07      	cmp	r2, #7
     16c:	d93e      	bls.n	1ec <artist_do_maze+0xc8>
		usart_write_buffer_job(&(artist_front.usart_instance), "m \0\0\0", MAX_RX_BUFFER_LENGTH);
		else if (count > 103)
     16e:	2b67      	cmp	r3, #103	; 0x67
     170:	d914      	bls.n	19c <artist_do_maze+0x78>
		{
			count = 0;
     172:	2200      	movs	r2, #0
     174:	4b28      	ldr	r3, [pc, #160]	; (218 <artist_do_maze+0xf4>)
     176:	801a      	strh	r2, [r3, #0]
			goStraight = !goStraight;
     178:	4a28      	ldr	r2, [pc, #160]	; (21c <artist_do_maze+0xf8>)
     17a:	7813      	ldrb	r3, [r2, #0]
     17c:	2101      	movs	r1, #1
     17e:	404b      	eors	r3, r1
     180:	7013      	strb	r3, [r2, #0]
     182:	e013      	b.n	1ac <artist_do_maze+0x88>
		usart_write_buffer_job(&(artist_front.usart_instance), "md\0\0\0", MAX_RX_BUFFER_LENGTH);
     184:	2205      	movs	r2, #5
     186:	4926      	ldr	r1, [pc, #152]	; (220 <artist_do_maze+0xfc>)
     188:	4826      	ldr	r0, [pc, #152]	; (224 <artist_do_maze+0x100>)
     18a:	4b27      	ldr	r3, [pc, #156]	; (228 <artist_do_maze+0x104>)
     18c:	4798      	blx	r3
     18e:	e005      	b.n	19c <artist_do_maze+0x78>
		usart_write_buffer_job(&(artist_front.usart_instance), "m \0\0\0", MAX_RX_BUFFER_LENGTH);
     190:	2205      	movs	r2, #5
     192:	4923      	ldr	r1, [pc, #140]	; (220 <artist_do_maze+0xfc>)
     194:	3108      	adds	r1, #8
     196:	4823      	ldr	r0, [pc, #140]	; (224 <artist_do_maze+0x100>)
     198:	4b23      	ldr	r3, [pc, #140]	; (228 <artist_do_maze+0x104>)
     19a:	4798      	blx	r3
		}
	}
	if (count % 12 == 0) {
     19c:	4b1e      	ldr	r3, [pc, #120]	; (218 <artist_do_maze+0xf4>)
     19e:	8818      	ldrh	r0, [r3, #0]
     1a0:	210c      	movs	r1, #12
     1a2:	4b22      	ldr	r3, [pc, #136]	; (22c <artist_do_maze+0x108>)
     1a4:	4798      	blx	r3
     1a6:	b289      	uxth	r1, r1
     1a8:	2900      	cmp	r1, #0
     1aa:	d12d      	bne.n	208 <artist_do_maze+0xe4>
		if (goStraight)	usart_write_buffer_job(&(artist_front.usart_instance), "mw\0\0\0", MAX_RX_BUFFER_LENGTH);
     1ac:	4b1b      	ldr	r3, [pc, #108]	; (21c <artist_do_maze+0xf8>)
     1ae:	781b      	ldrb	r3, [r3, #0]
     1b0:	2b00      	cmp	r3, #0
     1b2:	d022      	beq.n	1fa <artist_do_maze+0xd6>
     1b4:	2205      	movs	r2, #5
     1b6:	491a      	ldr	r1, [pc, #104]	; (220 <artist_do_maze+0xfc>)
     1b8:	3110      	adds	r1, #16
     1ba:	481a      	ldr	r0, [pc, #104]	; (224 <artist_do_maze+0x100>)
     1bc:	4b1a      	ldr	r3, [pc, #104]	; (228 <artist_do_maze+0x104>)
     1be:	4798      	blx	r3
		usart_write_buffer_job(&(artist_front.usart_instance), "m \0\0\0", MAX_RX_BUFFER_LENGTH);
	}
	
	

}
     1c0:	bd10      	pop	{r4, pc}
		usart_write_buffer_job(&(artist_front.usart_instance), "mw\0\0\0", MAX_RX_BUFFER_LENGTH);
     1c2:	2205      	movs	r2, #5
     1c4:	4916      	ldr	r1, [pc, #88]	; (220 <artist_do_maze+0xfc>)
     1c6:	3110      	adds	r1, #16
     1c8:	4816      	ldr	r0, [pc, #88]	; (224 <artist_do_maze+0x100>)
     1ca:	4b17      	ldr	r3, [pc, #92]	; (228 <artist_do_maze+0x104>)
     1cc:	4798      	blx	r3
     1ce:	e7e5      	b.n	19c <artist_do_maze+0x78>
		usart_write_buffer_job(&(artist_front.usart_instance), "m \0\0\0", MAX_RX_BUFFER_LENGTH);
     1d0:	2205      	movs	r2, #5
     1d2:	4913      	ldr	r1, [pc, #76]	; (220 <artist_do_maze+0xfc>)
     1d4:	3108      	adds	r1, #8
     1d6:	4813      	ldr	r0, [pc, #76]	; (224 <artist_do_maze+0x100>)
     1d8:	4b13      	ldr	r3, [pc, #76]	; (228 <artist_do_maze+0x104>)
     1da:	4798      	blx	r3
     1dc:	e7de      	b.n	19c <artist_do_maze+0x78>
		usart_write_buffer_job(&(artist_front.usart_instance), "ma\0\0\0", MAX_RX_BUFFER_LENGTH);
     1de:	2205      	movs	r2, #5
     1e0:	490f      	ldr	r1, [pc, #60]	; (220 <artist_do_maze+0xfc>)
     1e2:	3118      	adds	r1, #24
     1e4:	480f      	ldr	r0, [pc, #60]	; (224 <artist_do_maze+0x100>)
     1e6:	4b10      	ldr	r3, [pc, #64]	; (228 <artist_do_maze+0x104>)
     1e8:	4798      	blx	r3
     1ea:	e7d7      	b.n	19c <artist_do_maze+0x78>
		usart_write_buffer_job(&(artist_front.usart_instance), "m \0\0\0", MAX_RX_BUFFER_LENGTH);
     1ec:	2205      	movs	r2, #5
     1ee:	490c      	ldr	r1, [pc, #48]	; (220 <artist_do_maze+0xfc>)
     1f0:	3108      	adds	r1, #8
     1f2:	480c      	ldr	r0, [pc, #48]	; (224 <artist_do_maze+0x100>)
     1f4:	4b0c      	ldr	r3, [pc, #48]	; (228 <artist_do_maze+0x104>)
     1f6:	4798      	blx	r3
     1f8:	e7d0      	b.n	19c <artist_do_maze+0x78>
		else			usart_write_buffer_job(&(artist_front.usart_instance), "ms\0\0\0", MAX_RX_BUFFER_LENGTH);
     1fa:	2205      	movs	r2, #5
     1fc:	4908      	ldr	r1, [pc, #32]	; (220 <artist_do_maze+0xfc>)
     1fe:	3120      	adds	r1, #32
     200:	4808      	ldr	r0, [pc, #32]	; (224 <artist_do_maze+0x100>)
     202:	4b09      	ldr	r3, [pc, #36]	; (228 <artist_do_maze+0x104>)
     204:	4798      	blx	r3
     206:	e7db      	b.n	1c0 <artist_do_maze+0x9c>
		usart_write_buffer_job(&(artist_front.usart_instance), "m \0\0\0", MAX_RX_BUFFER_LENGTH);
     208:	2205      	movs	r2, #5
     20a:	4905      	ldr	r1, [pc, #20]	; (220 <artist_do_maze+0xfc>)
     20c:	3108      	adds	r1, #8
     20e:	4805      	ldr	r0, [pc, #20]	; (224 <artist_do_maze+0x100>)
     210:	4b05      	ldr	r3, [pc, #20]	; (228 <artist_do_maze+0x104>)
     212:	4798      	blx	r3
}
     214:	e7d4      	b.n	1c0 <artist_do_maze+0x9c>
     216:	46c0      	nop			; (mov r8, r8)
     218:	200001fc 	.word	0x200001fc
     21c:	20000000 	.word	0x20000000
     220:	000088bc 	.word	0x000088bc
     224:	20000834 	.word	0x20000834
     228:	000018bd 	.word	0x000018bd
     22c:	00005e71 	.word	0x00005e71

00000230 <artist_ultrasonic_configure>:
 */
#include "TheArtist.h"
#include "UltraSonic.h"

void artist_ultrasonic_configure (struct artist_ultrasonic_module * module, uint8_t echo, uint8_t trig) {
	module->echo_pin	= echo; 
     230:	7001      	strb	r1, [r0, #0]
	module->trigger_pin = trig;  
     232:	7042      	strb	r2, [r0, #1]
	module->filter_large_change_counts = 0; 
     234:	2300      	movs	r3, #0
     236:	7083      	strb	r3, [r0, #2]
	module->fliter_old_val = 0; 
     238:	2300      	movs	r3, #0
     23a:	6043      	str	r3, [r0, #4]
}
     23c:	4770      	bx	lr
	...

00000240 <artist_ultrasonic_gpio_init>:

void artist_ultrasonic_gpio_init() {
     240:	b5f0      	push	{r4, r5, r6, r7, lr}
     242:	b085      	sub	sp, #20
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     244:	a903      	add	r1, sp, #12
     246:	2201      	movs	r2, #1
     248:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     24a:	2300      	movs	r3, #0
     24c:	708b      	strb	r3, [r1, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     24e:	ad02      	add	r5, sp, #8
     250:	702b      	strb	r3, [r5, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     252:	706a      	strb	r2, [r5, #1]
	config->powersave  = false;
     254:	70ab      	strb	r3, [r5, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     256:	4668      	mov	r0, sp
     258:	7003      	strb	r3, [r0, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     25a:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
     25c:	7083      	strb	r3, [r0, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     25e:	ac01      	add	r4, sp, #4
     260:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     262:	7062      	strb	r2, [r4, #1]
	config->powersave  = false;
     264:	70a3      	strb	r3, [r4, #2]
	port_get_config_defaults(&pin_config_trig);
	port_get_config_defaults(&pin_config_echo_center);
	port_get_config_defaults(&pin_config_echo_right);
	port_get_config_defaults(&pin_config_echo_left);

	pin_config_trig.direction			=	PORT_PIN_DIR_OUTPUT;
     266:	700a      	strb	r2, [r1, #0]
	
	pin_config_echo_right.direction		=	PORT_PIN_DIR_INPUT;
	pin_config_echo_right.input_pull	=	PORT_PIN_PULL_UP;
	
	
	port_pin_set_config(artist_front.us_instance_center.trigger_pin, &pin_config_trig);
     268:	4f09      	ldr	r7, [pc, #36]	; (290 <artist_ultrasonic_gpio_init+0x50>)
     26a:	33b5      	adds	r3, #181	; 0xb5
     26c:	5cf8      	ldrb	r0, [r7, r3]
     26e:	4e09      	ldr	r6, [pc, #36]	; (294 <artist_ultrasonic_gpio_init+0x54>)
     270:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_center.echo_pin, &pin_config_echo_center);
     272:	23b4      	movs	r3, #180	; 0xb4
     274:	5cf8      	ldrb	r0, [r7, r3]
     276:	0029      	movs	r1, r5
     278:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_left.echo_pin, &pin_config_echo_left);
     27a:	23bc      	movs	r3, #188	; 0xbc
     27c:	5cf8      	ldrb	r0, [r7, r3]
     27e:	0021      	movs	r1, r4
     280:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_right.echo_pin, &pin_config_echo_right); 
     282:	23c4      	movs	r3, #196	; 0xc4
     284:	5cf8      	ldrb	r0, [r7, r3]
     286:	4669      	mov	r1, sp
     288:	47b0      	blx	r6
}
     28a:	b005      	add	sp, #20
     28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     28e:	46c0      	nop			; (mov r8, r8)
     290:	200007bc 	.word	0x200007bc
     294:	00000b9d 	.word	0x00000b9d

00000298 <artist_ultrasonic_get_value>:
	printf("%5.2f, %5.2f, %5.2f\n", 
				artist_front.left_distance, 
				artist_front.center_distance, 
				artist_front.right_distance);  
}
float artist_ultrasonic_get_value(struct artist_ultrasonic_module * const module) {
     298:	b5f0      	push	{r4, r5, r6, r7, lr}
     29a:	b083      	sub	sp, #12
     29c:	0004      	movs	r4, r0
	// TODO : use timer callback function!
	uint16_t start, end;
	uint16_t count = 0;
	
	port_pin_set_output_level(module->trigger_pin, false);
     29e:	7842      	ldrb	r2, [r0, #1]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2a0:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     2a2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     2a4:	2900      	cmp	r1, #0
     2a6:	d104      	bne.n	2b2 <artist_ultrasonic_get_value+0x1a>
		return &(ports[port_index]->Group[group_index]);
     2a8:	0953      	lsrs	r3, r2, #5
     2aa:	01db      	lsls	r3, r3, #7
     2ac:	495c      	ldr	r1, [pc, #368]	; (420 <artist_ultrasonic_get_value+0x188>)
     2ae:	468c      	mov	ip, r1
     2b0:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2b2:	211f      	movs	r1, #31
     2b4:	4011      	ands	r1, r2
     2b6:	2201      	movs	r2, #1
     2b8:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     2ba:	615a      	str	r2, [r3, #20]
	delay_us(40);
     2bc:	2028      	movs	r0, #40	; 0x28
     2be:	4b59      	ldr	r3, [pc, #356]	; (424 <artist_ultrasonic_get_value+0x18c>)
     2c0:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, true);
     2c2:	7862      	ldrb	r2, [r4, #1]
	if (port_index < PORT_INST_NUM) {
     2c4:	09d1      	lsrs	r1, r2, #7
		return NULL;
     2c6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     2c8:	2900      	cmp	r1, #0
     2ca:	d104      	bne.n	2d6 <artist_ultrasonic_get_value+0x3e>
		return &(ports[port_index]->Group[group_index]);
     2cc:	0953      	lsrs	r3, r2, #5
     2ce:	01db      	lsls	r3, r3, #7
     2d0:	4953      	ldr	r1, [pc, #332]	; (420 <artist_ultrasonic_get_value+0x188>)
     2d2:	468c      	mov	ip, r1
     2d4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2d6:	211f      	movs	r1, #31
     2d8:	4011      	ands	r1, r2
     2da:	2201      	movs	r2, #1
     2dc:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     2de:	619a      	str	r2, [r3, #24]
	delay_us(10);
     2e0:	200a      	movs	r0, #10
     2e2:	4b50      	ldr	r3, [pc, #320]	; (424 <artist_ultrasonic_get_value+0x18c>)
     2e4:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, false);
     2e6:	7862      	ldrb	r2, [r4, #1]
	if (port_index < PORT_INST_NUM) {
     2e8:	09d1      	lsrs	r1, r2, #7
		return NULL;
     2ea:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     2ec:	2900      	cmp	r1, #0
     2ee:	d104      	bne.n	2fa <artist_ultrasonic_get_value+0x62>
		return &(ports[port_index]->Group[group_index]);
     2f0:	0953      	lsrs	r3, r2, #5
     2f2:	01db      	lsls	r3, r3, #7
     2f4:	494a      	ldr	r1, [pc, #296]	; (420 <artist_ultrasonic_get_value+0x188>)
     2f6:	468c      	mov	ip, r1
     2f8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2fa:	211f      	movs	r1, #31
     2fc:	4011      	ands	r1, r2
     2fe:	2201      	movs	r2, #1
     300:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     302:	615a      	str	r2, [r3, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     304:	4b48      	ldr	r3, [pc, #288]	; (428 <artist_ultrasonic_get_value+0x190>)
     306:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     308:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     30a:	b25b      	sxtb	r3, r3
     30c:	2b00      	cmp	r3, #0
     30e:	dbfb      	blt.n	308 <artist_ultrasonic_get_value+0x70>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
     310:	2300      	movs	r3, #0
     312:	7113      	strb	r3, [r2, #4]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     314:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     316:	b25b      	sxtb	r3, r3
     318:	2b00      	cmp	r3, #0
     31a:	dbfb      	blt.n	314 <artist_ultrasonic_get_value+0x7c>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
     31c:	2340      	movs	r3, #64	; 0x40
     31e:	7153      	strb	r3, [r2, #5]
	tc_start_counter(&(artist_front.tc_instance_ultrasonic)); 
	while (!(port_pin_get_input_level(module->echo_pin))) {
     320:	7823      	ldrb	r3, [r4, #0]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     322:	221f      	movs	r2, #31
     324:	401a      	ands	r2, r3
     326:	2001      	movs	r0, #1
     328:	4090      	lsls	r0, r2
     32a:	09da      	lsrs	r2, r3, #7
     32c:	2100      	movs	r1, #0
     32e:	2a00      	cmp	r2, #0
     330:	d104      	bne.n	33c <artist_ultrasonic_get_value+0xa4>
     332:	0959      	lsrs	r1, r3, #5
     334:	01c9      	lsls	r1, r1, #7
     336:	4b3a      	ldr	r3, [pc, #232]	; (420 <artist_ultrasonic_get_value+0x188>)
     338:	469c      	mov	ip, r3
     33a:	4461      	add	r1, ip
     33c:	4b3b      	ldr	r3, [pc, #236]	; (42c <artist_ultrasonic_get_value+0x194>)
	return (port_base->IN.reg & pin_mask);
     33e:	6a0a      	ldr	r2, [r1, #32]
     340:	4202      	tst	r2, r0
     342:	d105      	bne.n	350 <artist_ultrasonic_get_value+0xb8>
     344:	3b01      	subs	r3, #1
     346:	b29b      	uxth	r3, r3
		count ++;
		if (count > 0xFF00) return module->fliter_old_val; 
     348:	2b00      	cmp	r3, #0
     34a:	d1f8      	bne.n	33e <artist_ultrasonic_get_value+0xa6>
     34c:	6860      	ldr	r0, [r4, #4]
     34e:	e062      	b.n	416 <artist_ultrasonic_get_value+0x17e>
	}
	count =0; 
	start = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
     350:	4835      	ldr	r0, [pc, #212]	; (428 <artist_ultrasonic_get_value+0x190>)
     352:	4b37      	ldr	r3, [pc, #220]	; (430 <artist_ultrasonic_get_value+0x198>)
     354:	4798      	blx	r3
     356:	0005      	movs	r5, r0
	while ((port_pin_get_input_level(module->echo_pin)))  {
     358:	7823      	ldrb	r3, [r4, #0]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     35a:	221f      	movs	r2, #31
     35c:	401a      	ands	r2, r3
     35e:	2001      	movs	r0, #1
     360:	4090      	lsls	r0, r2
     362:	09da      	lsrs	r2, r3, #7
     364:	2100      	movs	r1, #0
     366:	2a00      	cmp	r2, #0
     368:	d104      	bne.n	374 <artist_ultrasonic_get_value+0xdc>
     36a:	0959      	lsrs	r1, r3, #5
     36c:	01c9      	lsls	r1, r1, #7
     36e:	4b2c      	ldr	r3, [pc, #176]	; (420 <artist_ultrasonic_get_value+0x188>)
     370:	469c      	mov	ip, r3
     372:	4461      	add	r1, ip
     374:	4b2d      	ldr	r3, [pc, #180]	; (42c <artist_ultrasonic_get_value+0x194>)
	return (port_base->IN.reg & pin_mask);
     376:	6a0a      	ldr	r2, [r1, #32]
     378:	4202      	tst	r2, r0
     37a:	d005      	beq.n	388 <artist_ultrasonic_get_value+0xf0>
     37c:	3b01      	subs	r3, #1
     37e:	b29b      	uxth	r3, r3
		count ++;
		if (count > 0xFF00) return module->fliter_old_val;  
     380:	2b00      	cmp	r3, #0
     382:	d1f8      	bne.n	376 <artist_ultrasonic_get_value+0xde>
     384:	6860      	ldr	r0, [r4, #4]
     386:	e046      	b.n	416 <artist_ultrasonic_get_value+0x17e>
	}
	end = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
     388:	4e27      	ldr	r6, [pc, #156]	; (428 <artist_ultrasonic_get_value+0x190>)
     38a:	0030      	movs	r0, r6
     38c:	4b28      	ldr	r3, [pc, #160]	; (430 <artist_ultrasonic_get_value+0x198>)
     38e:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     390:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     392:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     394:	b25b      	sxtb	r3, r3
     396:	2b00      	cmp	r3, #0
     398:	dbfb      	blt.n	392 <artist_ultrasonic_get_value+0xfa>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
     39a:	2380      	movs	r3, #128	; 0x80
     39c:	7153      	strb	r3, [r2, #5]
	tc_stop_counter(&(artist_front.tc_instance_ultrasonic));

	float new = ((float)(end - start)) * 0.017;
     39e:	0400      	lsls	r0, r0, #16
     3a0:	0c00      	lsrs	r0, r0, #16
     3a2:	042d      	lsls	r5, r5, #16
     3a4:	0c2d      	lsrs	r5, r5, #16
     3a6:	1b40      	subs	r0, r0, r5
     3a8:	4f22      	ldr	r7, [pc, #136]	; (434 <artist_ultrasonic_get_value+0x19c>)
     3aa:	47b8      	blx	r7
     3ac:	4b22      	ldr	r3, [pc, #136]	; (438 <artist_ultrasonic_get_value+0x1a0>)
     3ae:	4798      	blx	r3
     3b0:	4a22      	ldr	r2, [pc, #136]	; (43c <artist_ultrasonic_get_value+0x1a4>)
     3b2:	4b23      	ldr	r3, [pc, #140]	; (440 <artist_ultrasonic_get_value+0x1a8>)
     3b4:	4d23      	ldr	r5, [pc, #140]	; (444 <artist_ultrasonic_get_value+0x1ac>)
     3b6:	47a8      	blx	r5
     3b8:	4b23      	ldr	r3, [pc, #140]	; (448 <artist_ultrasonic_get_value+0x1b0>)
     3ba:	4798      	blx	r3
     3bc:	9001      	str	r0, [sp, #4]
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     3be:	6865      	ldr	r5, [r4, #4]
	if (new > old * module->filter_large_change_counts ||
     3c0:	78a6      	ldrb	r6, [r4, #2]
     3c2:	0030      	movs	r0, r6
     3c4:	47b8      	blx	r7
     3c6:	1c07      	adds	r7, r0, #0
     3c8:	1c01      	adds	r1, r0, #0
     3ca:	1c28      	adds	r0, r5, #0
     3cc:	4b1f      	ldr	r3, [pc, #124]	; (44c <artist_ultrasonic_get_value+0x1b4>)
     3ce:	4798      	blx	r3
     3d0:	1c01      	adds	r1, r0, #0
     3d2:	9801      	ldr	r0, [sp, #4]
     3d4:	4b1e      	ldr	r3, [pc, #120]	; (450 <artist_ultrasonic_get_value+0x1b8>)
     3d6:	4798      	blx	r3
     3d8:	2800      	cmp	r0, #0
     3da:	d109      	bne.n	3f0 <artist_ultrasonic_get_value+0x158>
	new < old * 1/module->filter_large_change_counts ) {
     3dc:	1c39      	adds	r1, r7, #0
     3de:	1c28      	adds	r0, r5, #0
     3e0:	4b1c      	ldr	r3, [pc, #112]	; (454 <artist_ultrasonic_get_value+0x1bc>)
     3e2:	4798      	blx	r3
     3e4:	1c01      	adds	r1, r0, #0
	if (new > old * module->filter_large_change_counts ||
     3e6:	9801      	ldr	r0, [sp, #4]
     3e8:	4b1b      	ldr	r3, [pc, #108]	; (458 <artist_ultrasonic_get_value+0x1c0>)
     3ea:	4798      	blx	r3
     3ec:	2800      	cmp	r0, #0
     3ee:	d005      	beq.n	3fc <artist_ultrasonic_get_value+0x164>
		module->filter_large_change_counts ++;
     3f0:	1c73      	adds	r3, r6, #1
     3f2:	b2db      	uxtb	r3, r3
		if (module->filter_large_change_counts > 3)		
     3f4:	2b03      	cmp	r3, #3
     3f6:	d810      	bhi.n	41a <artist_ultrasonic_get_value+0x182>
		module->filter_large_change_counts ++;
     3f8:	70a3      	strb	r3, [r4, #2]
			new = old;
     3fa:	9501      	str	r5, [sp, #4]
	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
     3fc:	4f13      	ldr	r7, [pc, #76]	; (44c <artist_ultrasonic_get_value+0x1b4>)
     3fe:	4917      	ldr	r1, [pc, #92]	; (45c <artist_ultrasonic_get_value+0x1c4>)
     400:	9801      	ldr	r0, [sp, #4]
     402:	47b8      	blx	r7
     404:	1c06      	adds	r6, r0, #0
     406:	4916      	ldr	r1, [pc, #88]	; (460 <artist_ultrasonic_get_value+0x1c8>)
     408:	1c28      	adds	r0, r5, #0
     40a:	47b8      	blx	r7
     40c:	1c01      	adds	r1, r0, #0
     40e:	1c30      	adds	r0, r6, #0
     410:	4b14      	ldr	r3, [pc, #80]	; (464 <artist_ultrasonic_get_value+0x1cc>)
     412:	4798      	blx	r3
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     414:	6060      	str	r0, [r4, #4]
	return module->fliter_old_val;
}
     416:	b003      	add	sp, #12
     418:	bdf0      	pop	{r4, r5, r6, r7, pc}
			module->filter_large_change_counts = 0;
     41a:	2300      	movs	r3, #0
     41c:	70a3      	strb	r3, [r4, #2]
     41e:	e7ed      	b.n	3fc <artist_ultrasonic_get_value+0x164>
     420:	41004400 	.word	0x41004400
     424:	0000089d 	.word	0x0000089d
     428:	200007bc 	.word	0x200007bc
     42c:	0000ff01 	.word	0x0000ff01
     430:	00002679 	.word	0x00002679
     434:	00006ad9 	.word	0x00006ad9
     438:	000086c9 	.word	0x000086c9
     43c:	b020c49c 	.word	0xb020c49c
     440:	3f916872 	.word	0x3f916872
     444:	00007a01 	.word	0x00007a01
     448:	0000876d 	.word	0x0000876d
     44c:	00006899 	.word	0x00006899
     450:	00006119 	.word	0x00006119
     454:	000064b9 	.word	0x000064b9
     458:	000060f1 	.word	0x000060f1
     45c:	3ecccccc 	.word	0x3ecccccc
     460:	3f19999a 	.word	0x3f19999a
     464:	00006195 	.word	0x00006195

00000468 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     468:	b5f0      	push	{r4, r5, r6, r7, lr}
     46a:	46c6      	mov	lr, r8
     46c:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     46e:	0080      	lsls	r0, r0, #2
     470:	4b0e      	ldr	r3, [pc, #56]	; (4ac <_tcc_interrupt_handler+0x44>)
     472:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     474:	683b      	ldr	r3, [r7, #0]
     476:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     47a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     47c:	4013      	ands	r3, r2
     47e:	401e      	ands	r6, r3
     480:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     482:	4b0b      	ldr	r3, [pc, #44]	; (4b0 <_tcc_interrupt_handler+0x48>)
     484:	4698      	mov	r8, r3
     486:	e002      	b.n	48e <_tcc_interrupt_handler+0x26>
     488:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     48a:	2c30      	cmp	r4, #48	; 0x30
     48c:	d00a      	beq.n	4a4 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     48e:	4643      	mov	r3, r8
     490:	58e5      	ldr	r5, [r4, r3]
     492:	4235      	tst	r5, r6
     494:	d0f8      	beq.n	488 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     496:	193b      	adds	r3, r7, r4
     498:	685b      	ldr	r3, [r3, #4]
     49a:	0038      	movs	r0, r7
     49c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     49e:	683b      	ldr	r3, [r7, #0]
     4a0:	62dd      	str	r5, [r3, #44]	; 0x2c
     4a2:	e7f1      	b.n	488 <_tcc_interrupt_handler+0x20>
		}
	}
}
     4a4:	bc04      	pop	{r2}
     4a6:	4690      	mov	r8, r2
     4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4aa:	46c0      	nop			; (mov r8, r8)
     4ac:	200008a0 	.word	0x200008a0
     4b0:	000088e4 	.word	0x000088e4

000004b4 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     4b4:	b510      	push	{r4, lr}
     4b6:	2000      	movs	r0, #0
     4b8:	4b01      	ldr	r3, [pc, #4]	; (4c0 <TCC0_Handler+0xc>)
     4ba:	4798      	blx	r3
     4bc:	bd10      	pop	{r4, pc}
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	00000469 	.word	0x00000469

000004c4 <TCC1_Handler>:
     4c4:	b510      	push	{r4, lr}
     4c6:	2001      	movs	r0, #1
     4c8:	4b01      	ldr	r3, [pc, #4]	; (4d0 <TCC1_Handler+0xc>)
     4ca:	4798      	blx	r3
     4cc:	bd10      	pop	{r4, pc}
     4ce:	46c0      	nop			; (mov r8, r8)
     4d0:	00000469 	.word	0x00000469

000004d4 <TCC2_Handler>:
     4d4:	b510      	push	{r4, lr}
     4d6:	2002      	movs	r0, #2
     4d8:	4b01      	ldr	r3, [pc, #4]	; (4e0 <TCC2_Handler+0xc>)
     4da:	4798      	blx	r3
     4dc:	bd10      	pop	{r4, pc}
     4de:	46c0      	nop			; (mov r8, r8)
     4e0:	00000469 	.word	0x00000469

000004e4 <usart_write_callback>:

}
void usart_write_callback(struct usart_module *const usart_module)
{
	
}
     4e4:	4770      	bx	lr
	...

000004e8 <usart_read_callback>:
{
     4e8:	b510      	push	{r4, lr}
     4ea:	0004      	movs	r4, r0
	printf("1test");  
     4ec:	480d      	ldr	r0, [pc, #52]	; (524 <usart_read_callback+0x3c>)
     4ee:	4b0e      	ldr	r3, [pc, #56]	; (528 <usart_read_callback+0x40>)
     4f0:	4798      	blx	r3
	switch(rx_buffer[0]) {
     4f2:	4b0e      	ldr	r3, [pc, #56]	; (52c <usart_read_callback+0x44>)
     4f4:	781b      	ldrb	r3, [r3, #0]
     4f6:	b2db      	uxtb	r3, r3
     4f8:	2b20      	cmp	r3, #32
     4fa:	d00c      	beq.n	516 <usart_read_callback+0x2e>
     4fc:	2b77      	cmp	r3, #119	; 0x77
     4fe:	d104      	bne.n	50a <usart_read_callback+0x22>
		usart_write_buffer_job(usart_instance, "mw\0\0\0", MAX_RX_BUFFER_LENGTH);
     500:	2205      	movs	r2, #5
     502:	490b      	ldr	r1, [pc, #44]	; (530 <usart_read_callback+0x48>)
     504:	0020      	movs	r0, r4
     506:	4b0b      	ldr	r3, [pc, #44]	; (534 <usart_read_callback+0x4c>)
     508:	4798      	blx	r3
	usart_read_buffer_job( usart_instance,
     50a:	2205      	movs	r2, #5
     50c:	4907      	ldr	r1, [pc, #28]	; (52c <usart_read_callback+0x44>)
     50e:	0020      	movs	r0, r4
     510:	4b09      	ldr	r3, [pc, #36]	; (538 <usart_read_callback+0x50>)
     512:	4798      	blx	r3
}
     514:	bd10      	pop	{r4, pc}
		usart_write_buffer_job(usart_instance, "m \0\0\0", MAX_RX_BUFFER_LENGTH);
     516:	2205      	movs	r2, #5
     518:	4905      	ldr	r1, [pc, #20]	; (530 <usart_read_callback+0x48>)
     51a:	3108      	adds	r1, #8
     51c:	0020      	movs	r0, r4
     51e:	4b05      	ldr	r3, [pc, #20]	; (534 <usart_read_callback+0x4c>)
     520:	4798      	blx	r3
		break;
     522:	e7f2      	b.n	50a <usart_read_callback+0x22>
     524:	00008928 	.word	0x00008928
     528:	00003d6d 	.word	0x00003d6d
     52c:	20000898 	.word	0x20000898
     530:	00008914 	.word	0x00008914
     534:	000018bd 	.word	0x000018bd
     538:	000018dd 	.word	0x000018dd

0000053c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     53c:	b570      	push	{r4, r5, r6, lr}
     53e:	b082      	sub	sp, #8
     540:	0005      	movs	r5, r0
     542:	000e      	movs	r6, r1
	uint16_t temp = 0;
     544:	2200      	movs	r2, #0
     546:	466b      	mov	r3, sp
     548:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     54a:	4c06      	ldr	r4, [pc, #24]	; (564 <usart_serial_getchar+0x28>)
     54c:	466b      	mov	r3, sp
     54e:	1d99      	adds	r1, r3, #6
     550:	0028      	movs	r0, r5
     552:	47a0      	blx	r4
     554:	2800      	cmp	r0, #0
     556:	d1f9      	bne.n	54c <usart_serial_getchar+0x10>

	*c = temp;
     558:	466b      	mov	r3, sp
     55a:	3306      	adds	r3, #6
     55c:	881b      	ldrh	r3, [r3, #0]
     55e:	7033      	strb	r3, [r6, #0]
}
     560:	b002      	add	sp, #8
     562:	bd70      	pop	{r4, r5, r6, pc}
     564:	000017a9 	.word	0x000017a9

00000568 <usart_serial_putchar>:
{
     568:	b570      	push	{r4, r5, r6, lr}
     56a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     56c:	b28c      	uxth	r4, r1
     56e:	4e03      	ldr	r6, [pc, #12]	; (57c <usart_serial_putchar+0x14>)
     570:	0021      	movs	r1, r4
     572:	0028      	movs	r0, r5
     574:	47b0      	blx	r6
     576:	2800      	cmp	r0, #0
     578:	d1fa      	bne.n	570 <usart_serial_putchar+0x8>
}
     57a:	bd70      	pop	{r4, r5, r6, pc}
     57c:	0000177d 	.word	0x0000177d

00000580 <artist_ultrasonic_tc_configure>:
void artist_ultrasonic_tc_configure() {
     580:	b510      	push	{r4, lr}
     582:	b08e      	sub	sp, #56	; 0x38
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     584:	aa01      	add	r2, sp, #4
     586:	2300      	movs	r3, #0
     588:	2100      	movs	r1, #0
     58a:	7093      	strb	r3, [r2, #2]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     58c:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     58e:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     590:	2000      	movs	r0, #0
     592:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     594:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     596:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     598:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     59a:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     59c:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     59e:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     5a0:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     5a2:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     5a4:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     5a6:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
     5a8:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     5aa:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     5ac:	8593      	strh	r3, [r2, #44]	; 0x2c
	config.clock_source = GCLK_GENERATOR_3;
     5ae:	3303      	adds	r3, #3
     5b0:	7013      	strb	r3, [r2, #0]
	config.clock_prescaler = TC_CLOCK_PRESCALER_DIV8;
     5b2:	23c0      	movs	r3, #192	; 0xc0
     5b4:	009b      	lsls	r3, r3, #2
     5b6:	8093      	strh	r3, [r2, #4]
	config.enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = true;
     5b8:	2301      	movs	r3, #1
     5ba:	72d3      	strb	r3, [r2, #11]
	tc_init(&(artist_front.tc_instance_ultrasonic), TC4, &config);
     5bc:	4c07      	ldr	r4, [pc, #28]	; (5dc <artist_ultrasonic_tc_configure+0x5c>)
     5be:	4908      	ldr	r1, [pc, #32]	; (5e0 <artist_ultrasonic_tc_configure+0x60>)
     5c0:	0020      	movs	r0, r4
     5c2:	4b08      	ldr	r3, [pc, #32]	; (5e4 <artist_ultrasonic_tc_configure+0x64>)
     5c4:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     5c6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     5c8:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     5ca:	b25b      	sxtb	r3, r3
     5cc:	2b00      	cmp	r3, #0
     5ce:	dbfb      	blt.n	5c8 <artist_ultrasonic_tc_configure+0x48>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     5d0:	8813      	ldrh	r3, [r2, #0]
     5d2:	2102      	movs	r1, #2
     5d4:	430b      	orrs	r3, r1
     5d6:	8013      	strh	r3, [r2, #0]
}
     5d8:	b00e      	add	sp, #56	; 0x38
     5da:	bd10      	pop	{r4, pc}
     5dc:	200007bc 	.word	0x200007bc
     5e0:	42003000 	.word	0x42003000
     5e4:	0000243d 	.word	0x0000243d

000005e8 <configure_usart_callbacks>:


void configure_usart_callbacks(struct usart_module * usart_instance)
{
     5e8:	b570      	push	{r4, r5, r6, lr}
     5ea:	0004      	movs	r4, r0
	//! [setup_register_callbacks]
	usart_register_callback(usart_instance,
     5ec:	2200      	movs	r2, #0
     5ee:	4906      	ldr	r1, [pc, #24]	; (608 <configure_usart_callbacks+0x20>)
     5f0:	4d06      	ldr	r5, [pc, #24]	; (60c <configure_usart_callbacks+0x24>)
     5f2:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	
	usart_register_callback(usart_instance,
     5f4:	2201      	movs	r2, #1
     5f6:	4906      	ldr	r1, [pc, #24]	; (610 <configure_usart_callbacks+0x28>)
     5f8:	0020      	movs	r0, r4
     5fa:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     5fc:	2231      	movs	r2, #49	; 0x31
     5fe:	5ca3      	ldrb	r3, [r4, r2]
     600:	2103      	movs	r1, #3
     602:	430b      	orrs	r3, r1
     604:	54a3      	strb	r3, [r4, r2]

	//! [setup_enable_callbacks]
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
	//! [setup_enable_callbacks]
}
     606:	bd70      	pop	{r4, r5, r6, pc}
     608:	000004e5 	.word	0x000004e5
     60c:	000018a5 	.word	0x000018a5
     610:	000004e9 	.word	0x000004e9

00000614 <artist_usart_configure>:

void artist_usart_configure(struct usart_module * usart_instance) {
     614:	b570      	push	{r4, r5, r6, lr}
     616:	b090      	sub	sp, #64	; 0x40
     618:	0004      	movs	r4, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     61a:	2380      	movs	r3, #128	; 0x80
     61c:	05db      	lsls	r3, r3, #23
     61e:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     620:	2300      	movs	r3, #0
     622:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     624:	22ff      	movs	r2, #255	; 0xff
     626:	4669      	mov	r1, sp
     628:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     62a:	2200      	movs	r2, #0
     62c:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     62e:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
     630:	2196      	movs	r1, #150	; 0x96
     632:	0189      	lsls	r1, r1, #6
     634:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
     636:	2101      	movs	r1, #1
     638:	2024      	movs	r0, #36	; 0x24
     63a:	466d      	mov	r5, sp
     63c:	5429      	strb	r1, [r5, r0]
	config->transmitter_enable = true;
     63e:	3001      	adds	r0, #1
     640:	5429      	strb	r1, [r5, r0]
	config->clock_polarity_inverted = false;
     642:	3125      	adds	r1, #37	; 0x25
     644:	546b      	strb	r3, [r5, r1]
	config->use_external_clock = false;
     646:	3101      	adds	r1, #1
     648:	546b      	strb	r3, [r5, r1]
	config->ext_clock_freq   = 0;
     64a:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     64c:	3105      	adds	r1, #5
     64e:	546b      	strb	r3, [r5, r1]
	config->generator_source = GCLK_GENERATOR_0;
     650:	3101      	adds	r1, #1
     652:	546b      	strb	r3, [r5, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     654:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     656:	822b      	strh	r3, [r5, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     658:	76eb      	strb	r3, [r5, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     65a:	762a      	strb	r2, [r5, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     65c:	772a      	strb	r2, [r5, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     65e:	766a      	strb	r2, [r5, #25]
	config->receive_pulse_length                    = 19;
     660:	2313      	movs	r3, #19
     662:	76ab      	strb	r3, [r5, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     664:	776a      	strb	r2, [r5, #29]
	struct usart_config config;
	usart_get_config_defaults(&config);
	config.baudrate = CONF_ARTIST_BAUDRATE;
	config.mux_setting	= EDBG_CDC_SERCOM_MUX_SETTING;
     666:	2380      	movs	r3, #128	; 0x80
     668:	035b      	lsls	r3, r3, #13
     66a:	9303      	str	r3, [sp, #12]
	config.pinmux_pad0	= EDBG_CDC_SERCOM_PINMUX_PAD0;
     66c:	4b1e      	ldr	r3, [pc, #120]	; (6e8 <artist_usart_configure+0xd4>)
     66e:	930c      	str	r3, [sp, #48]	; 0x30
	config.pinmux_pad1	= EDBG_CDC_SERCOM_PINMUX_PAD1;
     670:	4b1e      	ldr	r3, [pc, #120]	; (6ec <artist_usart_configure+0xd8>)
     672:	930d      	str	r3, [sp, #52]	; 0x34
	config.pinmux_pad2	= EDBG_CDC_SERCOM_PINMUX_PAD2;
     674:	2301      	movs	r3, #1
     676:	425b      	negs	r3, r3
     678:	930e      	str	r3, [sp, #56]	; 0x38
	config.pinmux_pad3	= EDBG_CDC_SERCOM_PINMUX_PAD3;
     67a:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(usart_instance, EDBG_CDC_MODULE, &config) != STATUS_OK);
     67c:	4e1c      	ldr	r6, [pc, #112]	; (6f0 <artist_usart_configure+0xdc>)
     67e:	4d1d      	ldr	r5, [pc, #116]	; (6f4 <artist_usart_configure+0xe0>)
     680:	466a      	mov	r2, sp
     682:	0031      	movs	r1, r6
     684:	0020      	movs	r0, r4
     686:	47a8      	blx	r5
     688:	2800      	cmp	r0, #0
     68a:	d1f9      	bne.n	680 <artist_usart_configure+0x6c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     68c:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     68e:	0028      	movs	r0, r5
     690:	4b19      	ldr	r3, [pc, #100]	; (6f8 <artist_usart_configure+0xe4>)
     692:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     694:	231f      	movs	r3, #31
     696:	4018      	ands	r0, r3
     698:	3b1e      	subs	r3, #30
     69a:	4083      	lsls	r3, r0
     69c:	4a17      	ldr	r2, [pc, #92]	; (6fc <artist_usart_configure+0xe8>)
     69e:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     6a0:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     6a2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     6a4:	2b00      	cmp	r3, #0
     6a6:	d1fc      	bne.n	6a2 <artist_usart_configure+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     6a8:	682b      	ldr	r3, [r5, #0]
     6aa:	2202      	movs	r2, #2
     6ac:	4313      	orrs	r3, r2
     6ae:	602b      	str	r3, [r5, #0]
	
	
	usart_enable(usart_instance);
	configure_usart_callbacks(usart_instance);
     6b0:	0020      	movs	r0, r4
     6b2:	4b13      	ldr	r3, [pc, #76]	; (700 <artist_usart_configure+0xec>)
     6b4:	4798      	blx	r3
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     6b6:	4b13      	ldr	r3, [pc, #76]	; (704 <artist_usart_configure+0xf0>)
     6b8:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     6ba:	4a13      	ldr	r2, [pc, #76]	; (708 <artist_usart_configure+0xf4>)
     6bc:	4b13      	ldr	r3, [pc, #76]	; (70c <artist_usart_configure+0xf8>)
     6be:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     6c0:	4a13      	ldr	r2, [pc, #76]	; (710 <artist_usart_configure+0xfc>)
     6c2:	4b14      	ldr	r3, [pc, #80]	; (714 <artist_usart_configure+0x100>)
     6c4:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     6c6:	466a      	mov	r2, sp
     6c8:	4909      	ldr	r1, [pc, #36]	; (6f0 <artist_usart_configure+0xdc>)
     6ca:	0020      	movs	r0, r4
     6cc:	4b09      	ldr	r3, [pc, #36]	; (6f4 <artist_usart_configure+0xe0>)
     6ce:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     6d0:	4d11      	ldr	r5, [pc, #68]	; (718 <artist_usart_configure+0x104>)
     6d2:	682b      	ldr	r3, [r5, #0]
     6d4:	6898      	ldr	r0, [r3, #8]
     6d6:	2100      	movs	r1, #0
     6d8:	4c10      	ldr	r4, [pc, #64]	; (71c <artist_usart_configure+0x108>)
     6da:	47a0      	blx	r4
	setbuf(stdin, NULL);
     6dc:	682b      	ldr	r3, [r5, #0]
     6de:	6858      	ldr	r0, [r3, #4]
     6e0:	2100      	movs	r1, #0
     6e2:	47a0      	blx	r4
	
	stdio_serial_init(usart_instance, EDBG_CDC_MODULE, &config);
}
     6e4:	b010      	add	sp, #64	; 0x40
     6e6:	bd70      	pop	{r4, r5, r6, pc}
     6e8:	00040003 	.word	0x00040003
     6ec:	00050003 	.word	0x00050003
     6f0:	42000800 	.word	0x42000800
     6f4:	0000143d 	.word	0x0000143d
     6f8:	00000ff5 	.word	0x00000ff5
     6fc:	e000e100 	.word	0xe000e100
     700:	000005e9 	.word	0x000005e9
     704:	2000091c 	.word	0x2000091c
     708:	00000569 	.word	0x00000569
     70c:	20000918 	.word	0x20000918
     710:	0000053d 	.word	0x0000053d
     714:	20000914 	.word	0x20000914
     718:	20000010 	.word	0x20000010
     71c:	00003da1 	.word	0x00003da1

00000720 <artist_ultrasonic_update>:
	tcc_init(&(artist->tcc_instance), TCC0, &config);
	tcc_enable(&(artist->tcc_instance));
	*/
}

void artist_ultrasonic_update() {
     720:	b570      	push	{r4, r5, r6, lr}
	artist_front.center_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_center));
     722:	4e09      	ldr	r6, [pc, #36]	; (748 <artist_ultrasonic_update+0x28>)
     724:	0030      	movs	r0, r6
     726:	4d09      	ldr	r5, [pc, #36]	; (74c <artist_ultrasonic_update+0x2c>)
     728:	47a8      	blx	r5
     72a:	0034      	movs	r4, r6
     72c:	3cb4      	subs	r4, #180	; 0xb4
     72e:	61b0      	str	r0, [r6, #24]
	artist_front.right_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_right));
     730:	0020      	movs	r0, r4
     732:	30c4      	adds	r0, #196	; 0xc4
     734:	47a8      	blx	r5
     736:	23d4      	movs	r3, #212	; 0xd4
     738:	50e0      	str	r0, [r4, r3]
	artist_front.left_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_left));
     73a:	0020      	movs	r0, r4
     73c:	30bc      	adds	r0, #188	; 0xbc
     73e:	47a8      	blx	r5
     740:	23d0      	movs	r3, #208	; 0xd0
     742:	50e0      	str	r0, [r4, r3]
}
     744:	bd70      	pop	{r4, r5, r6, pc}
     746:	46c0      	nop			; (mov r8, r8)
     748:	20000870 	.word	0x20000870
     74c:	00000299 	.word	0x00000299

00000750 <callbacks>:
	//! [setup_enable]
	tc_enable(&(artist_front.tc_instance_timer));
	//! [setup_enable]
}

void callbacks (void) {
     750:	b510      	push	{r4, lr}
	// [ultra sonic]
	static uint16_t ultrasonic_counter		= 0;
	static uint16_t maze_counter			= 0; 
	ultrasonic_counter ++;
     752:	4a0e      	ldr	r2, [pc, #56]	; (78c <callbacks+0x3c>)
     754:	8813      	ldrh	r3, [r2, #0]
     756:	3301      	adds	r3, #1
     758:	b29b      	uxth	r3, r3
     75a:	8013      	strh	r3, [r2, #0]
	maze_counter ++; 
     75c:	490c      	ldr	r1, [pc, #48]	; (790 <callbacks+0x40>)
     75e:	880a      	ldrh	r2, [r1, #0]
     760:	3201      	adds	r2, #1
     762:	800a      	strh	r2, [r1, #0]
	
	if (ultrasonic_counter > 5) {
     764:	2b05      	cmp	r3, #5
     766:	d804      	bhi.n	772 <callbacks+0x22>
		artist_ultrasonic_update();
		ultrasonic_counter = 0; 
	}
	
	if (maze_counter > 10) {
     768:	4b09      	ldr	r3, [pc, #36]	; (790 <callbacks+0x40>)
     76a:	881b      	ldrh	r3, [r3, #0]
     76c:	2b0a      	cmp	r3, #10
     76e:	d806      	bhi.n	77e <callbacks+0x2e>
		artist_do_maze(); 
		maze_counter = 0; 
	}
	
	// ! [ultra sonic]
}
     770:	bd10      	pop	{r4, pc}
		artist_ultrasonic_update();
     772:	4b08      	ldr	r3, [pc, #32]	; (794 <callbacks+0x44>)
     774:	4798      	blx	r3
		ultrasonic_counter = 0; 
     776:	2200      	movs	r2, #0
     778:	4b04      	ldr	r3, [pc, #16]	; (78c <callbacks+0x3c>)
     77a:	801a      	strh	r2, [r3, #0]
     77c:	e7f4      	b.n	768 <callbacks+0x18>
		artist_do_maze(); 
     77e:	4b06      	ldr	r3, [pc, #24]	; (798 <callbacks+0x48>)
     780:	4798      	blx	r3
		maze_counter = 0; 
     782:	2200      	movs	r2, #0
     784:	4b02      	ldr	r3, [pc, #8]	; (790 <callbacks+0x40>)
     786:	801a      	strh	r2, [r3, #0]
}
     788:	e7f2      	b.n	770 <callbacks+0x20>
     78a:	46c0      	nop			; (mov r8, r8)
     78c:	20000200 	.word	0x20000200
     790:	200001fe 	.word	0x200001fe
     794:	00000721 	.word	0x00000721
     798:	00000125 	.word	0x00000125

0000079c <artist_scheduler_tc_configure>:
void artist_scheduler_tc_configure() {
     79c:	b510      	push	{r4, lr}
     79e:	b08e      	sub	sp, #56	; 0x38
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     7a0:	aa01      	add	r2, sp, #4
     7a2:	2300      	movs	r3, #0
     7a4:	2100      	movs	r1, #0
     7a6:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     7a8:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     7aa:	2000      	movs	r0, #0
     7ac:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     7ae:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     7b0:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     7b2:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     7b4:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     7b6:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     7b8:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     7ba:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     7bc:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     7be:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     7c0:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     7c2:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
     7c4:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     7c6:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     7c8:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
     7ca:	3304      	adds	r3, #4
     7cc:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source = GCLK_GENERATOR_3;
     7ce:	3b01      	subs	r3, #1
     7d0:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024; //
     7d2:	23e0      	movs	r3, #224	; 0xe0
     7d4:	00db      	lsls	r3, r3, #3
     7d6:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period = 50;
     7d8:	2132      	movs	r1, #50	; 0x32
     7da:	2329      	movs	r3, #41	; 0x29
     7dc:	54d1      	strb	r1, [r2, r3]
	tc_init(&(artist_front.tc_instance_timer), TC5, &config_tc);
     7de:	4c08      	ldr	r4, [pc, #32]	; (800 <artist_scheduler_tc_configure+0x64>)
     7e0:	4908      	ldr	r1, [pc, #32]	; (804 <artist_scheduler_tc_configure+0x68>)
     7e2:	0020      	movs	r0, r4
     7e4:	4b08      	ldr	r3, [pc, #32]	; (808 <artist_scheduler_tc_configure+0x6c>)
     7e6:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     7e8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     7ea:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     7ec:	b25b      	sxtb	r3, r3
     7ee:	2b00      	cmp	r3, #0
     7f0:	dbfb      	blt.n	7ea <artist_scheduler_tc_configure+0x4e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     7f2:	8813      	ldrh	r3, [r2, #0]
     7f4:	2102      	movs	r1, #2
     7f6:	430b      	orrs	r3, r1
     7f8:	8013      	strh	r3, [r2, #0]
}
     7fa:	b00e      	add	sp, #56	; 0x38
     7fc:	bd10      	pop	{r4, pc}
     7fe:	46c0      	nop			; (mov r8, r8)
     800:	200007d8 	.word	0x200007d8
     804:	42003400 	.word	0x42003400
     808:	0000243d 	.word	0x0000243d

0000080c <artist_configure_tc_callbacks>:
void artist_configure_tc_callbacks(void)
{
     80c:	b510      	push	{r4, lr}
	tc_register_callback(&(artist_front.tc_instance_timer), callbacks ,
     80e:	4c0d      	ldr	r4, [pc, #52]	; (844 <artist_configure_tc_callbacks+0x38>)
     810:	2200      	movs	r2, #0
     812:	490d      	ldr	r1, [pc, #52]	; (848 <artist_configure_tc_callbacks+0x3c>)
     814:	0020      	movs	r0, r4
     816:	4b0d      	ldr	r3, [pc, #52]	; (84c <artist_configure_tc_callbacks+0x40>)
     818:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     81a:	6820      	ldr	r0, [r4, #0]
     81c:	3c1c      	subs	r4, #28
     81e:	4b0c      	ldr	r3, [pc, #48]	; (850 <artist_configure_tc_callbacks+0x44>)
     820:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     822:	4b0c      	ldr	r3, [pc, #48]	; (854 <artist_configure_tc_callbacks+0x48>)
     824:	5c1a      	ldrb	r2, [r3, r0]
     826:	231f      	movs	r3, #31
     828:	4013      	ands	r3, r2
     82a:	2201      	movs	r2, #1
     82c:	0011      	movs	r1, r2
     82e:	4099      	lsls	r1, r3
     830:	4b09      	ldr	r3, [pc, #36]	; (858 <artist_configure_tc_callbacks+0x4c>)
     832:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     834:	2135      	movs	r1, #53	; 0x35
     836:	5c63      	ldrb	r3, [r4, r1]
     838:	2001      	movs	r0, #1
     83a:	4303      	orrs	r3, r0
     83c:	5463      	strb	r3, [r4, r1]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     83e:	69e3      	ldr	r3, [r4, #28]
     840:	735a      	strb	r2, [r3, #13]
	TC_CALLBACK_OVERFLOW);
	
	tc_enable_callback(&(artist_front.tc_instance_timer), TC_CALLBACK_OVERFLOW);
     842:	bd10      	pop	{r4, pc}
     844:	200007d8 	.word	0x200007d8
     848:	00000751 	.word	0x00000751
     84c:	0000233d 	.word	0x0000233d
     850:	00002405 	.word	0x00002405
     854:	00008924 	.word	0x00008924
     858:	e000e100 	.word	0xe000e100

0000085c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     85c:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     85e:	2000      	movs	r0, #0
     860:	4b08      	ldr	r3, [pc, #32]	; (884 <delay_init+0x28>)
     862:	4798      	blx	r3
     864:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     866:	4c08      	ldr	r4, [pc, #32]	; (888 <delay_init+0x2c>)
     868:	21fa      	movs	r1, #250	; 0xfa
     86a:	0089      	lsls	r1, r1, #2
     86c:	47a0      	blx	r4
     86e:	4b07      	ldr	r3, [pc, #28]	; (88c <delay_init+0x30>)
     870:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     872:	4907      	ldr	r1, [pc, #28]	; (890 <delay_init+0x34>)
     874:	0028      	movs	r0, r5
     876:	47a0      	blx	r4
     878:	4b06      	ldr	r3, [pc, #24]	; (894 <delay_init+0x38>)
     87a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     87c:	2205      	movs	r2, #5
     87e:	4b06      	ldr	r3, [pc, #24]	; (898 <delay_init+0x3c>)
     880:	601a      	str	r2, [r3, #0]
}
     882:	bd70      	pop	{r4, r5, r6, pc}
     884:	000020cd 	.word	0x000020cd
     888:	00005d65 	.word	0x00005d65
     88c:	20000004 	.word	0x20000004
     890:	000f4240 	.word	0x000f4240
     894:	20000008 	.word	0x20000008
     898:	e000e010 	.word	0xe000e010

0000089c <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     89c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     89e:	4b08      	ldr	r3, [pc, #32]	; (8c0 <delay_cycles_us+0x24>)
     8a0:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     8a2:	4a08      	ldr	r2, [pc, #32]	; (8c4 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     8a4:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     8a6:	2180      	movs	r1, #128	; 0x80
     8a8:	0249      	lsls	r1, r1, #9
	while (n--) {
     8aa:	3801      	subs	r0, #1
     8ac:	d307      	bcc.n	8be <delay_cycles_us+0x22>
	if (n > 0) {
     8ae:	2c00      	cmp	r4, #0
     8b0:	d0fb      	beq.n	8aa <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     8b2:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     8b4:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     8b6:	6813      	ldr	r3, [r2, #0]
     8b8:	420b      	tst	r3, r1
     8ba:	d0fc      	beq.n	8b6 <delay_cycles_us+0x1a>
     8bc:	e7f5      	b.n	8aa <delay_cycles_us+0xe>
	}
}
     8be:	bd30      	pop	{r4, r5, pc}
     8c0:	20000008 	.word	0x20000008
     8c4:	e000e010 	.word	0xe000e010

000008c8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     8c8:	4b0c      	ldr	r3, [pc, #48]	; (8fc <cpu_irq_enter_critical+0x34>)
     8ca:	681b      	ldr	r3, [r3, #0]
     8cc:	2b00      	cmp	r3, #0
     8ce:	d106      	bne.n	8de <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     8d0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     8d4:	2b00      	cmp	r3, #0
     8d6:	d007      	beq.n	8e8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     8d8:	2200      	movs	r2, #0
     8da:	4b09      	ldr	r3, [pc, #36]	; (900 <cpu_irq_enter_critical+0x38>)
     8dc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     8de:	4a07      	ldr	r2, [pc, #28]	; (8fc <cpu_irq_enter_critical+0x34>)
     8e0:	6813      	ldr	r3, [r2, #0]
     8e2:	3301      	adds	r3, #1
     8e4:	6013      	str	r3, [r2, #0]
}
     8e6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     8e8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     8ea:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     8ee:	2200      	movs	r2, #0
     8f0:	4b04      	ldr	r3, [pc, #16]	; (904 <cpu_irq_enter_critical+0x3c>)
     8f2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     8f4:	3201      	adds	r2, #1
     8f6:	4b02      	ldr	r3, [pc, #8]	; (900 <cpu_irq_enter_critical+0x38>)
     8f8:	701a      	strb	r2, [r3, #0]
     8fa:	e7f0      	b.n	8de <cpu_irq_enter_critical+0x16>
     8fc:	20000204 	.word	0x20000204
     900:	20000208 	.word	0x20000208
     904:	2000000c 	.word	0x2000000c

00000908 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     908:	4b08      	ldr	r3, [pc, #32]	; (92c <cpu_irq_leave_critical+0x24>)
     90a:	681a      	ldr	r2, [r3, #0]
     90c:	3a01      	subs	r2, #1
     90e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     910:	681b      	ldr	r3, [r3, #0]
     912:	2b00      	cmp	r3, #0
     914:	d109      	bne.n	92a <cpu_irq_leave_critical+0x22>
     916:	4b06      	ldr	r3, [pc, #24]	; (930 <cpu_irq_leave_critical+0x28>)
     918:	781b      	ldrb	r3, [r3, #0]
     91a:	2b00      	cmp	r3, #0
     91c:	d005      	beq.n	92a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     91e:	2201      	movs	r2, #1
     920:	4b04      	ldr	r3, [pc, #16]	; (934 <cpu_irq_leave_critical+0x2c>)
     922:	701a      	strb	r2, [r3, #0]
     924:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     928:	b662      	cpsie	i
	}
}
     92a:	4770      	bx	lr
     92c:	20000204 	.word	0x20000204
     930:	20000208 	.word	0x20000208
     934:	2000000c 	.word	0x2000000c

00000938 <system_board_init>:




void system_board_init(void)
{
     938:	b5f0      	push	{r4, r5, r6, r7, lr}
     93a:	46c6      	mov	lr, r8
     93c:	b500      	push	{lr}
     93e:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
     940:	ac01      	add	r4, sp, #4
     942:	2601      	movs	r6, #1
     944:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     946:	2700      	movs	r7, #0
     948:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     94a:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     94c:	0021      	movs	r1, r4
     94e:	2013      	movs	r0, #19
     950:	4d27      	ldr	r5, [pc, #156]	; (9f0 <system_board_init+0xb8>)
     952:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     954:	4b27      	ldr	r3, [pc, #156]	; (9f4 <system_board_init+0xbc>)
     956:	4698      	mov	r8, r3
     958:	2380      	movs	r3, #128	; 0x80
     95a:	031b      	lsls	r3, r3, #12
     95c:	4642      	mov	r2, r8
     95e:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     960:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     962:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     964:	0021      	movs	r1, r4
     966:	201c      	movs	r0, #28
     968:	47a8      	blx	r5
	config->input_pull = PORT_PIN_PULL_UP;
     96a:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     96c:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     96e:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     970:	0021      	movs	r1, r4
     972:	2052      	movs	r0, #82	; 0x52
     974:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     976:	0021      	movs	r1, r4
     978:	203e      	movs	r0, #62	; 0x3e
     97a:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     97c:	0021      	movs	r1, r4
     97e:	203f      	movs	r0, #63	; 0x3f
     980:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     982:	0021      	movs	r1, r4
     984:	202f      	movs	r0, #47	; 0x2f
     986:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     988:	0021      	movs	r1, r4
     98a:	2014      	movs	r0, #20
     98c:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     98e:	2280      	movs	r2, #128	; 0x80
     990:	02d2      	lsls	r2, r2, #11
     992:	4b19      	ldr	r3, [pc, #100]	; (9f8 <system_board_init+0xc0>)
     994:	619a      	str	r2, [r3, #24]
     996:	4b19      	ldr	r3, [pc, #100]	; (9fc <system_board_init+0xc4>)
     998:	2280      	movs	r2, #128	; 0x80
     99a:	05d2      	lsls	r2, r2, #23
     99c:	619a      	str	r2, [r3, #24]
     99e:	2280      	movs	r2, #128	; 0x80
     9a0:	0612      	lsls	r2, r2, #24
     9a2:	619a      	str	r2, [r3, #24]
     9a4:	2280      	movs	r2, #128	; 0x80
     9a6:	0212      	lsls	r2, r2, #8
     9a8:	619a      	str	r2, [r3, #24]
     9aa:	2380      	movs	r3, #128	; 0x80
     9ac:	035b      	lsls	r3, r3, #13
     9ae:	4642      	mov	r2, r8
     9b0:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     9b2:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     9b4:	0021      	movs	r1, r4
     9b6:	2053      	movs	r0, #83	; 0x53
     9b8:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     9ba:	4a11      	ldr	r2, [pc, #68]	; (a00 <system_board_init+0xc8>)
     9bc:	6a11      	ldr	r1, [r2, #32]
     9be:	2380      	movs	r3, #128	; 0x80
     9c0:	039b      	lsls	r3, r3, #14
     9c2:	430b      	orrs	r3, r1
     9c4:	6213      	str	r3, [r2, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     9c6:	2204      	movs	r2, #4
     9c8:	4b0e      	ldr	r3, [pc, #56]	; (a04 <system_board_init+0xcc>)
     9ca:	801a      	strh	r2, [r3, #0]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     9cc:	466b      	mov	r3, sp
     9ce:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     9d0:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     9d2:	2305      	movs	r3, #5
     9d4:	466a      	mov	r2, sp
     9d6:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     9d8:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     9da:	4669      	mov	r1, sp
     9dc:	2009      	movs	r0, #9
     9de:	4c0a      	ldr	r4, [pc, #40]	; (a08 <system_board_init+0xd0>)
     9e0:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     9e2:	4669      	mov	r1, sp
     9e4:	200c      	movs	r0, #12
     9e6:	47a0      	blx	r4
#endif

}
     9e8:	b002      	add	sp, #8
     9ea:	bc04      	pop	{r2}
     9ec:	4690      	mov	r8, r2
     9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9f0:	00000b9d 	.word	0x00000b9d
     9f4:	41004400 	.word	0x41004400
     9f8:	41004500 	.word	0x41004500
     9fc:	41004480 	.word	0x41004480
     a00:	40000400 	.word	0x40000400
     a04:	42005400 	.word	0x42005400
     a08:	000022dd 	.word	0x000022dd

00000a0c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     a0c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     a0e:	2a00      	cmp	r2, #0
     a10:	d001      	beq.n	a16 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     a12:	0018      	movs	r0, r3
     a14:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     a16:	008b      	lsls	r3, r1, #2
     a18:	4a06      	ldr	r2, [pc, #24]	; (a34 <extint_register_callback+0x28>)
     a1a:	589b      	ldr	r3, [r3, r2]
     a1c:	2b00      	cmp	r3, #0
     a1e:	d003      	beq.n	a28 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     a20:	4283      	cmp	r3, r0
     a22:	d005      	beq.n	a30 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     a24:	231d      	movs	r3, #29
     a26:	e7f4      	b.n	a12 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     a28:	0089      	lsls	r1, r1, #2
     a2a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     a2c:	2300      	movs	r3, #0
     a2e:	e7f0      	b.n	a12 <extint_register_callback+0x6>
		return STATUS_OK;
     a30:	2300      	movs	r3, #0
     a32:	e7ee      	b.n	a12 <extint_register_callback+0x6>
     a34:	200008b0 	.word	0x200008b0

00000a38 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     a38:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     a3a:	2200      	movs	r2, #0
     a3c:	4b10      	ldr	r3, [pc, #64]	; (a80 <EIC_Handler+0x48>)
     a3e:	701a      	strb	r2, [r3, #0]
     a40:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     a42:	4910      	ldr	r1, [pc, #64]	; (a84 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     a44:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     a46:	4e10      	ldr	r6, [pc, #64]	; (a88 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     a48:	4c0d      	ldr	r4, [pc, #52]	; (a80 <EIC_Handler+0x48>)
     a4a:	e00a      	b.n	a62 <EIC_Handler+0x2a>
		return eics[eic_index];
     a4c:	490d      	ldr	r1, [pc, #52]	; (a84 <EIC_Handler+0x4c>)
     a4e:	e008      	b.n	a62 <EIC_Handler+0x2a>
     a50:	7823      	ldrb	r3, [r4, #0]
     a52:	3301      	adds	r3, #1
     a54:	b2db      	uxtb	r3, r3
     a56:	7023      	strb	r3, [r4, #0]
     a58:	2b0f      	cmp	r3, #15
     a5a:	d810      	bhi.n	a7e <EIC_Handler+0x46>
		return NULL;
     a5c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     a5e:	2b1f      	cmp	r3, #31
     a60:	d9f4      	bls.n	a4c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     a62:	0028      	movs	r0, r5
     a64:	4018      	ands	r0, r3
     a66:	2201      	movs	r2, #1
     a68:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     a6a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     a6c:	4210      	tst	r0, r2
     a6e:	d0ef      	beq.n	a50 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     a70:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     a72:	009b      	lsls	r3, r3, #2
     a74:	599b      	ldr	r3, [r3, r6]
     a76:	2b00      	cmp	r3, #0
     a78:	d0ea      	beq.n	a50 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     a7a:	4798      	blx	r3
     a7c:	e7e8      	b.n	a50 <EIC_Handler+0x18>
			}
		}
	}
}
     a7e:	bd70      	pop	{r4, r5, r6, pc}
     a80:	200008ac 	.word	0x200008ac
     a84:	40001800 	.word	0x40001800
     a88:	200008b0 	.word	0x200008b0

00000a8c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     a8c:	4a04      	ldr	r2, [pc, #16]	; (aa0 <_extint_enable+0x14>)
     a8e:	7813      	ldrb	r3, [r2, #0]
     a90:	2102      	movs	r1, #2
     a92:	430b      	orrs	r3, r1
     a94:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     a96:	7853      	ldrb	r3, [r2, #1]
     a98:	b25b      	sxtb	r3, r3
     a9a:	2b00      	cmp	r3, #0
     a9c:	dbfb      	blt.n	a96 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     a9e:	4770      	bx	lr
     aa0:	40001800 	.word	0x40001800

00000aa4 <_system_extint_init>:
{
     aa4:	b500      	push	{lr}
     aa6:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     aa8:	4a12      	ldr	r2, [pc, #72]	; (af4 <_system_extint_init+0x50>)
     aaa:	6993      	ldr	r3, [r2, #24]
     aac:	2140      	movs	r1, #64	; 0x40
     aae:	430b      	orrs	r3, r1
     ab0:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     ab2:	a901      	add	r1, sp, #4
     ab4:	2300      	movs	r3, #0
     ab6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     ab8:	2005      	movs	r0, #5
     aba:	4b0f      	ldr	r3, [pc, #60]	; (af8 <_system_extint_init+0x54>)
     abc:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     abe:	2005      	movs	r0, #5
     ac0:	4b0e      	ldr	r3, [pc, #56]	; (afc <_system_extint_init+0x58>)
     ac2:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     ac4:	4a0e      	ldr	r2, [pc, #56]	; (b00 <_system_extint_init+0x5c>)
     ac6:	7813      	ldrb	r3, [r2, #0]
     ac8:	2101      	movs	r1, #1
     aca:	430b      	orrs	r3, r1
     acc:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     ace:	7853      	ldrb	r3, [r2, #1]
     ad0:	b25b      	sxtb	r3, r3
     ad2:	2b00      	cmp	r3, #0
     ad4:	dbfb      	blt.n	ace <_system_extint_init+0x2a>
     ad6:	4b0b      	ldr	r3, [pc, #44]	; (b04 <_system_extint_init+0x60>)
     ad8:	0019      	movs	r1, r3
     ada:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     adc:	2200      	movs	r2, #0
     ade:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     ae0:	4299      	cmp	r1, r3
     ae2:	d1fc      	bne.n	ade <_system_extint_init+0x3a>
     ae4:	2210      	movs	r2, #16
     ae6:	4b08      	ldr	r3, [pc, #32]	; (b08 <_system_extint_init+0x64>)
     ae8:	601a      	str	r2, [r3, #0]
	_extint_enable();
     aea:	4b08      	ldr	r3, [pc, #32]	; (b0c <_system_extint_init+0x68>)
     aec:	4798      	blx	r3
}
     aee:	b003      	add	sp, #12
     af0:	bd00      	pop	{pc}
     af2:	46c0      	nop			; (mov r8, r8)
     af4:	40000400 	.word	0x40000400
     af8:	000021e5 	.word	0x000021e5
     afc:	00002159 	.word	0x00002159
     b00:	40001800 	.word	0x40001800
     b04:	200008b0 	.word	0x200008b0
     b08:	e000e100 	.word	0xe000e100
     b0c:	00000a8d 	.word	0x00000a8d

00000b10 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     b10:	2300      	movs	r3, #0
     b12:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     b14:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     b16:	2201      	movs	r2, #1
     b18:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     b1a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     b1c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     b1e:	3302      	adds	r3, #2
     b20:	72c3      	strb	r3, [r0, #11]
}
     b22:	4770      	bx	lr

00000b24 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     b24:	b5f0      	push	{r4, r5, r6, r7, lr}
     b26:	b083      	sub	sp, #12
     b28:	0005      	movs	r5, r0
     b2a:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b2c:	a901      	add	r1, sp, #4
     b2e:	2300      	movs	r3, #0
     b30:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     b32:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     b34:	7923      	ldrb	r3, [r4, #4]
     b36:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     b38:	7a23      	ldrb	r3, [r4, #8]
     b3a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     b3c:	7820      	ldrb	r0, [r4, #0]
     b3e:	4b15      	ldr	r3, [pc, #84]	; (b94 <extint_chan_set_config+0x70>)
     b40:	4798      	blx	r3
		return NULL;
     b42:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     b44:	2d1f      	cmp	r5, #31
     b46:	d800      	bhi.n	b4a <extint_chan_set_config+0x26>
		return eics[eic_index];
     b48:	4813      	ldr	r0, [pc, #76]	; (b98 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     b4a:	2207      	movs	r2, #7
     b4c:	402a      	ands	r2, r5
     b4e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     b50:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     b52:	7aa3      	ldrb	r3, [r4, #10]
     b54:	2b00      	cmp	r3, #0
     b56:	d001      	beq.n	b5c <extint_chan_set_config+0x38>
     b58:	2308      	movs	r3, #8
     b5a:	431f      	orrs	r7, r3
     b5c:	08eb      	lsrs	r3, r5, #3
     b5e:	009b      	lsls	r3, r3, #2
     b60:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     b62:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     b64:	260f      	movs	r6, #15
     b66:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     b68:	43b1      	bics	r1, r6
			(new_config << config_pos);
     b6a:	4097      	lsls	r7, r2
     b6c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     b6e:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     b70:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     b72:	7a63      	ldrb	r3, [r4, #9]
     b74:	2b00      	cmp	r3, #0
     b76:	d106      	bne.n	b86 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     b78:	6943      	ldr	r3, [r0, #20]
     b7a:	2201      	movs	r2, #1
     b7c:	40aa      	lsls	r2, r5
     b7e:	4393      	bics	r3, r2
     b80:	6143      	str	r3, [r0, #20]
	}
}
     b82:	b003      	add	sp, #12
     b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     b86:	6942      	ldr	r2, [r0, #20]
     b88:	2301      	movs	r3, #1
     b8a:	40ab      	lsls	r3, r5
     b8c:	4313      	orrs	r3, r2
     b8e:	6143      	str	r3, [r0, #20]
     b90:	e7f7      	b.n	b82 <extint_chan_set_config+0x5e>
     b92:	46c0      	nop			; (mov r8, r8)
     b94:	000022dd 	.word	0x000022dd
     b98:	40001800 	.word	0x40001800

00000b9c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     b9c:	b500      	push	{lr}
     b9e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     ba0:	ab01      	add	r3, sp, #4
     ba2:	2280      	movs	r2, #128	; 0x80
     ba4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     ba6:	780a      	ldrb	r2, [r1, #0]
     ba8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     baa:	784a      	ldrb	r2, [r1, #1]
     bac:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     bae:	788a      	ldrb	r2, [r1, #2]
     bb0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     bb2:	0019      	movs	r1, r3
     bb4:	4b01      	ldr	r3, [pc, #4]	; (bbc <port_pin_set_config+0x20>)
     bb6:	4798      	blx	r3
}
     bb8:	b003      	add	sp, #12
     bba:	bd00      	pop	{pc}
     bbc:	000022dd 	.word	0x000022dd

00000bc0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     bc0:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     bc2:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     bc4:	2340      	movs	r3, #64	; 0x40
     bc6:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     bc8:	4281      	cmp	r1, r0
     bca:	d202      	bcs.n	bd2 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     bcc:	0018      	movs	r0, r3
     bce:	bd10      	pop	{r4, pc}
		baud_calculated++;
     bd0:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     bd2:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     bd4:	1c63      	adds	r3, r4, #1
     bd6:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     bd8:	4288      	cmp	r0, r1
     bda:	d9f9      	bls.n	bd0 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     bdc:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     bde:	2cff      	cmp	r4, #255	; 0xff
     be0:	d8f4      	bhi.n	bcc <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     be2:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     be4:	2300      	movs	r3, #0
     be6:	e7f1      	b.n	bcc <_sercom_get_sync_baud_val+0xc>

00000be8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     be8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bea:	46de      	mov	lr, fp
     bec:	4657      	mov	r7, sl
     bee:	464e      	mov	r6, r9
     bf0:	4645      	mov	r5, r8
     bf2:	b5e0      	push	{r5, r6, r7, lr}
     bf4:	b089      	sub	sp, #36	; 0x24
     bf6:	000c      	movs	r4, r1
     bf8:	9205      	str	r2, [sp, #20]
     bfa:	aa12      	add	r2, sp, #72	; 0x48
     bfc:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     bfe:	0005      	movs	r5, r0
     c00:	434d      	muls	r5, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c02:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     c04:	42a5      	cmp	r5, r4
     c06:	d907      	bls.n	c18 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     c08:	0010      	movs	r0, r2
     c0a:	b009      	add	sp, #36	; 0x24
     c0c:	bc3c      	pop	{r2, r3, r4, r5}
     c0e:	4690      	mov	r8, r2
     c10:	4699      	mov	r9, r3
     c12:	46a2      	mov	sl, r4
     c14:	46ab      	mov	fp, r5
     c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     c18:	2b00      	cmp	r3, #0
     c1a:	d155      	bne.n	cc8 <_sercom_get_async_baud_val+0xe0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     c1c:	0002      	movs	r2, r0
     c1e:	0008      	movs	r0, r1
     c20:	2100      	movs	r1, #0
     c22:	4d63      	ldr	r5, [pc, #396]	; (db0 <_sercom_get_async_baud_val+0x1c8>)
     c24:	47a8      	blx	r5
     c26:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     c28:	0026      	movs	r6, r4
     c2a:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
     c2c:	2300      	movs	r3, #0
     c2e:	2400      	movs	r4, #0
     c30:	9300      	str	r3, [sp, #0]
     c32:	9401      	str	r4, [sp, #4]
     c34:	2200      	movs	r2, #0
     c36:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     c38:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     c3a:	2120      	movs	r1, #32
     c3c:	468c      	mov	ip, r1
     c3e:	391f      	subs	r1, #31
     c40:	9602      	str	r6, [sp, #8]
     c42:	9703      	str	r7, [sp, #12]
     c44:	e014      	b.n	c70 <_sercom_get_async_baud_val+0x88>
     c46:	4664      	mov	r4, ip
     c48:	1a24      	subs	r4, r4, r0
     c4a:	000d      	movs	r5, r1
     c4c:	40e5      	lsrs	r5, r4
     c4e:	46a8      	mov	r8, r5
     c50:	e015      	b.n	c7e <_sercom_get_async_baud_val+0x96>
			r = r - d;
     c52:	9c02      	ldr	r4, [sp, #8]
     c54:	9d03      	ldr	r5, [sp, #12]
     c56:	1b12      	subs	r2, r2, r4
     c58:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     c5a:	464d      	mov	r5, r9
     c5c:	9e00      	ldr	r6, [sp, #0]
     c5e:	9f01      	ldr	r7, [sp, #4]
     c60:	4335      	orrs	r5, r6
     c62:	003c      	movs	r4, r7
     c64:	4646      	mov	r6, r8
     c66:	4334      	orrs	r4, r6
     c68:	9500      	str	r5, [sp, #0]
     c6a:	9401      	str	r4, [sp, #4]
	for (i = 63; i >= 0; i--) {
     c6c:	3801      	subs	r0, #1
     c6e:	d31d      	bcc.n	cac <_sercom_get_async_baud_val+0xc4>
		bit_shift = (uint64_t)1 << i;
     c70:	2420      	movs	r4, #32
     c72:	4264      	negs	r4, r4
     c74:	1904      	adds	r4, r0, r4
     c76:	d4e6      	bmi.n	c46 <_sercom_get_async_baud_val+0x5e>
     c78:	000d      	movs	r5, r1
     c7a:	40a5      	lsls	r5, r4
     c7c:	46a8      	mov	r8, r5
     c7e:	000c      	movs	r4, r1
     c80:	4084      	lsls	r4, r0
     c82:	46a1      	mov	r9, r4
		r = r << 1;
     c84:	1892      	adds	r2, r2, r2
     c86:	415b      	adcs	r3, r3
     c88:	0014      	movs	r4, r2
     c8a:	001d      	movs	r5, r3
		if (n & bit_shift) {
     c8c:	4646      	mov	r6, r8
     c8e:	465f      	mov	r7, fp
     c90:	423e      	tst	r6, r7
     c92:	d003      	beq.n	c9c <_sercom_get_async_baud_val+0xb4>
			r |= 0x01;
     c94:	000e      	movs	r6, r1
     c96:	4326      	orrs	r6, r4
     c98:	0032      	movs	r2, r6
     c9a:	002b      	movs	r3, r5
		if (r >= d) {
     c9c:	9c02      	ldr	r4, [sp, #8]
     c9e:	9d03      	ldr	r5, [sp, #12]
     ca0:	429d      	cmp	r5, r3
     ca2:	d8e3      	bhi.n	c6c <_sercom_get_async_baud_val+0x84>
     ca4:	d1d5      	bne.n	c52 <_sercom_get_async_baud_val+0x6a>
     ca6:	4294      	cmp	r4, r2
     ca8:	d8e0      	bhi.n	c6c <_sercom_get_async_baud_val+0x84>
     caa:	e7d2      	b.n	c52 <_sercom_get_async_baud_val+0x6a>
		scale = ((uint64_t)1 << SHIFT) - ratio;
     cac:	2200      	movs	r2, #0
     cae:	2301      	movs	r3, #1
     cb0:	9800      	ldr	r0, [sp, #0]
     cb2:	9901      	ldr	r1, [sp, #4]
     cb4:	1a12      	subs	r2, r2, r0
     cb6:	418b      	sbcs	r3, r1
     cb8:	0019      	movs	r1, r3
		baud_calculated = (65536 * scale) >> SHIFT;
     cba:	0c13      	lsrs	r3, r2, #16
     cbc:	040a      	lsls	r2, r1, #16
     cbe:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     cc0:	9b05      	ldr	r3, [sp, #20]
     cc2:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     cc4:	2200      	movs	r2, #0
     cc6:	e79f      	b.n	c08 <_sercom_get_async_baud_val+0x20>
	uint64_t baud_calculated = 0;
     cc8:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     cca:	2b01      	cmp	r3, #1
     ccc:	d1f8      	bne.n	cc0 <_sercom_get_async_baud_val+0xd8>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     cce:	0f63      	lsrs	r3, r4, #29
     cd0:	9304      	str	r3, [sp, #16]
     cd2:	00e3      	lsls	r3, r4, #3
     cd4:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     cd6:	000a      	movs	r2, r1
     cd8:	2300      	movs	r3, #0
     cda:	2100      	movs	r1, #0
     cdc:	4c34      	ldr	r4, [pc, #208]	; (db0 <_sercom_get_async_baud_val+0x1c8>)
     cde:	47a0      	blx	r4
     ce0:	0004      	movs	r4, r0
     ce2:	000d      	movs	r5, r1
     ce4:	2300      	movs	r3, #0
     ce6:	469c      	mov	ip, r3
     ce8:	9306      	str	r3, [sp, #24]
		bit_shift = (uint64_t)1 << i;
     cea:	3320      	adds	r3, #32
     cec:	469b      	mov	fp, r3
     cee:	2601      	movs	r6, #1
			if(baud_int < BAUD_INT_MAX) {
     cf0:	4663      	mov	r3, ip
     cf2:	9307      	str	r3, [sp, #28]
     cf4:	e048      	b.n	d88 <_sercom_get_async_baud_val+0x1a0>
		bit_shift = (uint64_t)1 << i;
     cf6:	4659      	mov	r1, fp
     cf8:	1bc9      	subs	r1, r1, r7
     cfa:	0030      	movs	r0, r6
     cfc:	40c8      	lsrs	r0, r1
     cfe:	4682      	mov	sl, r0
     d00:	e010      	b.n	d24 <_sercom_get_async_baud_val+0x13c>
			r = r - d;
     d02:	9800      	ldr	r0, [sp, #0]
     d04:	9901      	ldr	r1, [sp, #4]
     d06:	1a12      	subs	r2, r2, r0
     d08:	418b      	sbcs	r3, r1
			q |= bit_shift;
     d0a:	9902      	ldr	r1, [sp, #8]
     d0c:	4648      	mov	r0, r9
     d0e:	4301      	orrs	r1, r0
     d10:	9102      	str	r1, [sp, #8]
	for (i = 63; i >= 0; i--) {
     d12:	3f01      	subs	r7, #1
     d14:	d325      	bcc.n	d62 <_sercom_get_async_baud_val+0x17a>
		bit_shift = (uint64_t)1 << i;
     d16:	2120      	movs	r1, #32
     d18:	4249      	negs	r1, r1
     d1a:	1879      	adds	r1, r7, r1
     d1c:	d4eb      	bmi.n	cf6 <_sercom_get_async_baud_val+0x10e>
     d1e:	0030      	movs	r0, r6
     d20:	4088      	lsls	r0, r1
     d22:	4682      	mov	sl, r0
     d24:	0031      	movs	r1, r6
     d26:	40b9      	lsls	r1, r7
     d28:	4689      	mov	r9, r1
		r = r << 1;
     d2a:	1892      	adds	r2, r2, r2
     d2c:	415b      	adcs	r3, r3
     d2e:	0010      	movs	r0, r2
     d30:	0019      	movs	r1, r3
		if (n & bit_shift) {
     d32:	4644      	mov	r4, r8
     d34:	464d      	mov	r5, r9
     d36:	402c      	ands	r4, r5
     d38:	46a4      	mov	ip, r4
     d3a:	4654      	mov	r4, sl
     d3c:	9d04      	ldr	r5, [sp, #16]
     d3e:	402c      	ands	r4, r5
     d40:	46a2      	mov	sl, r4
     d42:	4664      	mov	r4, ip
     d44:	4655      	mov	r5, sl
     d46:	432c      	orrs	r4, r5
     d48:	d003      	beq.n	d52 <_sercom_get_async_baud_val+0x16a>
			r |= 0x01;
     d4a:	0034      	movs	r4, r6
     d4c:	4304      	orrs	r4, r0
     d4e:	0022      	movs	r2, r4
     d50:	000b      	movs	r3, r1
		if (r >= d) {
     d52:	9800      	ldr	r0, [sp, #0]
     d54:	9901      	ldr	r1, [sp, #4]
     d56:	4299      	cmp	r1, r3
     d58:	d8db      	bhi.n	d12 <_sercom_get_async_baud_val+0x12a>
     d5a:	d1d2      	bne.n	d02 <_sercom_get_async_baud_val+0x11a>
     d5c:	4290      	cmp	r0, r2
     d5e:	d8d8      	bhi.n	d12 <_sercom_get_async_baud_val+0x12a>
     d60:	e7cf      	b.n	d02 <_sercom_get_async_baud_val+0x11a>
     d62:	9c00      	ldr	r4, [sp, #0]
     d64:	9d01      	ldr	r5, [sp, #4]
			baud_int -= baud_fp;
     d66:	9902      	ldr	r1, [sp, #8]
     d68:	9a07      	ldr	r2, [sp, #28]
     d6a:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     d6c:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     d6e:	4911      	ldr	r1, [pc, #68]	; (db4 <_sercom_get_async_baud_val+0x1cc>)
     d70:	428b      	cmp	r3, r1
     d72:	d914      	bls.n	d9e <_sercom_get_async_baud_val+0x1b6>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     d74:	9b06      	ldr	r3, [sp, #24]
     d76:	3301      	adds	r3, #1
     d78:	b2db      	uxtb	r3, r3
     d7a:	0019      	movs	r1, r3
     d7c:	9306      	str	r3, [sp, #24]
     d7e:	0013      	movs	r3, r2
     d80:	3301      	adds	r3, #1
     d82:	9307      	str	r3, [sp, #28]
     d84:	2908      	cmp	r1, #8
     d86:	d008      	beq.n	d9a <_sercom_get_async_baud_val+0x1b2>
	uint64_t q = 0, r = 0, bit_shift;
     d88:	2300      	movs	r3, #0
     d8a:	9302      	str	r3, [sp, #8]
     d8c:	2200      	movs	r2, #0
     d8e:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     d90:	213f      	movs	r1, #63	; 0x3f
     d92:	9400      	str	r4, [sp, #0]
     d94:	9501      	str	r5, [sp, #4]
     d96:	000f      	movs	r7, r1
     d98:	e7bd      	b.n	d16 <_sercom_get_async_baud_val+0x12e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d9a:	2240      	movs	r2, #64	; 0x40
     d9c:	e734      	b.n	c08 <_sercom_get_async_baud_val+0x20>
     d9e:	2240      	movs	r2, #64	; 0x40
		if(baud_fp == BAUD_FP_MAX) {
     da0:	9906      	ldr	r1, [sp, #24]
     da2:	2908      	cmp	r1, #8
     da4:	d100      	bne.n	da8 <_sercom_get_async_baud_val+0x1c0>
     da6:	e72f      	b.n	c08 <_sercom_get_async_baud_val+0x20>
		baud_calculated = baud_int | (baud_fp << 13);
     da8:	034a      	lsls	r2, r1, #13
     daa:	431a      	orrs	r2, r3
     dac:	e788      	b.n	cc0 <_sercom_get_async_baud_val+0xd8>
     dae:	46c0      	nop			; (mov r8, r8)
     db0:	00006141 	.word	0x00006141
     db4:	00001fff 	.word	0x00001fff

00000db8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     db8:	b510      	push	{r4, lr}
     dba:	b082      	sub	sp, #8
     dbc:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     dbe:	4b0e      	ldr	r3, [pc, #56]	; (df8 <sercom_set_gclk_generator+0x40>)
     dc0:	781b      	ldrb	r3, [r3, #0]
     dc2:	2b00      	cmp	r3, #0
     dc4:	d007      	beq.n	dd6 <sercom_set_gclk_generator+0x1e>
     dc6:	2900      	cmp	r1, #0
     dc8:	d105      	bne.n	dd6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     dca:	4b0b      	ldr	r3, [pc, #44]	; (df8 <sercom_set_gclk_generator+0x40>)
     dcc:	785b      	ldrb	r3, [r3, #1]
     dce:	4283      	cmp	r3, r0
     dd0:	d010      	beq.n	df4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     dd2:	201d      	movs	r0, #29
     dd4:	e00c      	b.n	df0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     dd6:	a901      	add	r1, sp, #4
     dd8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     dda:	2013      	movs	r0, #19
     ddc:	4b07      	ldr	r3, [pc, #28]	; (dfc <sercom_set_gclk_generator+0x44>)
     dde:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     de0:	2013      	movs	r0, #19
     de2:	4b07      	ldr	r3, [pc, #28]	; (e00 <sercom_set_gclk_generator+0x48>)
     de4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     de6:	4b04      	ldr	r3, [pc, #16]	; (df8 <sercom_set_gclk_generator+0x40>)
     de8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     dea:	2201      	movs	r2, #1
     dec:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     dee:	2000      	movs	r0, #0
}
     df0:	b002      	add	sp, #8
     df2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     df4:	2000      	movs	r0, #0
     df6:	e7fb      	b.n	df0 <sercom_set_gclk_generator+0x38>
     df8:	2000020c 	.word	0x2000020c
     dfc:	000021e5 	.word	0x000021e5
     e00:	00002159 	.word	0x00002159

00000e04 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     e04:	4b40      	ldr	r3, [pc, #256]	; (f08 <_sercom_get_default_pad+0x104>)
     e06:	4298      	cmp	r0, r3
     e08:	d031      	beq.n	e6e <_sercom_get_default_pad+0x6a>
     e0a:	d90a      	bls.n	e22 <_sercom_get_default_pad+0x1e>
     e0c:	4b3f      	ldr	r3, [pc, #252]	; (f0c <_sercom_get_default_pad+0x108>)
     e0e:	4298      	cmp	r0, r3
     e10:	d04d      	beq.n	eae <_sercom_get_default_pad+0xaa>
     e12:	4b3f      	ldr	r3, [pc, #252]	; (f10 <_sercom_get_default_pad+0x10c>)
     e14:	4298      	cmp	r0, r3
     e16:	d05a      	beq.n	ece <_sercom_get_default_pad+0xca>
     e18:	4b3e      	ldr	r3, [pc, #248]	; (f14 <_sercom_get_default_pad+0x110>)
     e1a:	4298      	cmp	r0, r3
     e1c:	d037      	beq.n	e8e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     e1e:	2000      	movs	r0, #0
}
     e20:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     e22:	4b3d      	ldr	r3, [pc, #244]	; (f18 <_sercom_get_default_pad+0x114>)
     e24:	4298      	cmp	r0, r3
     e26:	d00c      	beq.n	e42 <_sercom_get_default_pad+0x3e>
     e28:	4b3c      	ldr	r3, [pc, #240]	; (f1c <_sercom_get_default_pad+0x118>)
     e2a:	4298      	cmp	r0, r3
     e2c:	d1f7      	bne.n	e1e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e2e:	2901      	cmp	r1, #1
     e30:	d017      	beq.n	e62 <_sercom_get_default_pad+0x5e>
     e32:	2900      	cmp	r1, #0
     e34:	d05d      	beq.n	ef2 <_sercom_get_default_pad+0xee>
     e36:	2902      	cmp	r1, #2
     e38:	d015      	beq.n	e66 <_sercom_get_default_pad+0x62>
     e3a:	2903      	cmp	r1, #3
     e3c:	d015      	beq.n	e6a <_sercom_get_default_pad+0x66>
	return 0;
     e3e:	2000      	movs	r0, #0
     e40:	e7ee      	b.n	e20 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e42:	2901      	cmp	r1, #1
     e44:	d007      	beq.n	e56 <_sercom_get_default_pad+0x52>
     e46:	2900      	cmp	r1, #0
     e48:	d051      	beq.n	eee <_sercom_get_default_pad+0xea>
     e4a:	2902      	cmp	r1, #2
     e4c:	d005      	beq.n	e5a <_sercom_get_default_pad+0x56>
     e4e:	2903      	cmp	r1, #3
     e50:	d005      	beq.n	e5e <_sercom_get_default_pad+0x5a>
	return 0;
     e52:	2000      	movs	r0, #0
     e54:	e7e4      	b.n	e20 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e56:	4832      	ldr	r0, [pc, #200]	; (f20 <_sercom_get_default_pad+0x11c>)
     e58:	e7e2      	b.n	e20 <_sercom_get_default_pad+0x1c>
     e5a:	4832      	ldr	r0, [pc, #200]	; (f24 <_sercom_get_default_pad+0x120>)
     e5c:	e7e0      	b.n	e20 <_sercom_get_default_pad+0x1c>
     e5e:	4832      	ldr	r0, [pc, #200]	; (f28 <_sercom_get_default_pad+0x124>)
     e60:	e7de      	b.n	e20 <_sercom_get_default_pad+0x1c>
     e62:	4832      	ldr	r0, [pc, #200]	; (f2c <_sercom_get_default_pad+0x128>)
     e64:	e7dc      	b.n	e20 <_sercom_get_default_pad+0x1c>
     e66:	4832      	ldr	r0, [pc, #200]	; (f30 <_sercom_get_default_pad+0x12c>)
     e68:	e7da      	b.n	e20 <_sercom_get_default_pad+0x1c>
     e6a:	4832      	ldr	r0, [pc, #200]	; (f34 <_sercom_get_default_pad+0x130>)
     e6c:	e7d8      	b.n	e20 <_sercom_get_default_pad+0x1c>
     e6e:	2901      	cmp	r1, #1
     e70:	d007      	beq.n	e82 <_sercom_get_default_pad+0x7e>
     e72:	2900      	cmp	r1, #0
     e74:	d03f      	beq.n	ef6 <_sercom_get_default_pad+0xf2>
     e76:	2902      	cmp	r1, #2
     e78:	d005      	beq.n	e86 <_sercom_get_default_pad+0x82>
     e7a:	2903      	cmp	r1, #3
     e7c:	d005      	beq.n	e8a <_sercom_get_default_pad+0x86>
	return 0;
     e7e:	2000      	movs	r0, #0
     e80:	e7ce      	b.n	e20 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e82:	482d      	ldr	r0, [pc, #180]	; (f38 <_sercom_get_default_pad+0x134>)
     e84:	e7cc      	b.n	e20 <_sercom_get_default_pad+0x1c>
     e86:	482d      	ldr	r0, [pc, #180]	; (f3c <_sercom_get_default_pad+0x138>)
     e88:	e7ca      	b.n	e20 <_sercom_get_default_pad+0x1c>
     e8a:	482d      	ldr	r0, [pc, #180]	; (f40 <_sercom_get_default_pad+0x13c>)
     e8c:	e7c8      	b.n	e20 <_sercom_get_default_pad+0x1c>
     e8e:	2901      	cmp	r1, #1
     e90:	d007      	beq.n	ea2 <_sercom_get_default_pad+0x9e>
     e92:	2900      	cmp	r1, #0
     e94:	d031      	beq.n	efa <_sercom_get_default_pad+0xf6>
     e96:	2902      	cmp	r1, #2
     e98:	d005      	beq.n	ea6 <_sercom_get_default_pad+0xa2>
     e9a:	2903      	cmp	r1, #3
     e9c:	d005      	beq.n	eaa <_sercom_get_default_pad+0xa6>
	return 0;
     e9e:	2000      	movs	r0, #0
     ea0:	e7be      	b.n	e20 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ea2:	4828      	ldr	r0, [pc, #160]	; (f44 <_sercom_get_default_pad+0x140>)
     ea4:	e7bc      	b.n	e20 <_sercom_get_default_pad+0x1c>
     ea6:	4828      	ldr	r0, [pc, #160]	; (f48 <_sercom_get_default_pad+0x144>)
     ea8:	e7ba      	b.n	e20 <_sercom_get_default_pad+0x1c>
     eaa:	4828      	ldr	r0, [pc, #160]	; (f4c <_sercom_get_default_pad+0x148>)
     eac:	e7b8      	b.n	e20 <_sercom_get_default_pad+0x1c>
     eae:	2901      	cmp	r1, #1
     eb0:	d007      	beq.n	ec2 <_sercom_get_default_pad+0xbe>
     eb2:	2900      	cmp	r1, #0
     eb4:	d023      	beq.n	efe <_sercom_get_default_pad+0xfa>
     eb6:	2902      	cmp	r1, #2
     eb8:	d005      	beq.n	ec6 <_sercom_get_default_pad+0xc2>
     eba:	2903      	cmp	r1, #3
     ebc:	d005      	beq.n	eca <_sercom_get_default_pad+0xc6>
	return 0;
     ebe:	2000      	movs	r0, #0
     ec0:	e7ae      	b.n	e20 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ec2:	4823      	ldr	r0, [pc, #140]	; (f50 <_sercom_get_default_pad+0x14c>)
     ec4:	e7ac      	b.n	e20 <_sercom_get_default_pad+0x1c>
     ec6:	4823      	ldr	r0, [pc, #140]	; (f54 <_sercom_get_default_pad+0x150>)
     ec8:	e7aa      	b.n	e20 <_sercom_get_default_pad+0x1c>
     eca:	4823      	ldr	r0, [pc, #140]	; (f58 <_sercom_get_default_pad+0x154>)
     ecc:	e7a8      	b.n	e20 <_sercom_get_default_pad+0x1c>
     ece:	2901      	cmp	r1, #1
     ed0:	d007      	beq.n	ee2 <_sercom_get_default_pad+0xde>
     ed2:	2900      	cmp	r1, #0
     ed4:	d015      	beq.n	f02 <_sercom_get_default_pad+0xfe>
     ed6:	2902      	cmp	r1, #2
     ed8:	d005      	beq.n	ee6 <_sercom_get_default_pad+0xe2>
     eda:	2903      	cmp	r1, #3
     edc:	d005      	beq.n	eea <_sercom_get_default_pad+0xe6>
	return 0;
     ede:	2000      	movs	r0, #0
     ee0:	e79e      	b.n	e20 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ee2:	481e      	ldr	r0, [pc, #120]	; (f5c <_sercom_get_default_pad+0x158>)
     ee4:	e79c      	b.n	e20 <_sercom_get_default_pad+0x1c>
     ee6:	481e      	ldr	r0, [pc, #120]	; (f60 <_sercom_get_default_pad+0x15c>)
     ee8:	e79a      	b.n	e20 <_sercom_get_default_pad+0x1c>
     eea:	481e      	ldr	r0, [pc, #120]	; (f64 <_sercom_get_default_pad+0x160>)
     eec:	e798      	b.n	e20 <_sercom_get_default_pad+0x1c>
     eee:	481e      	ldr	r0, [pc, #120]	; (f68 <_sercom_get_default_pad+0x164>)
     ef0:	e796      	b.n	e20 <_sercom_get_default_pad+0x1c>
     ef2:	2003      	movs	r0, #3
     ef4:	e794      	b.n	e20 <_sercom_get_default_pad+0x1c>
     ef6:	481d      	ldr	r0, [pc, #116]	; (f6c <_sercom_get_default_pad+0x168>)
     ef8:	e792      	b.n	e20 <_sercom_get_default_pad+0x1c>
     efa:	481d      	ldr	r0, [pc, #116]	; (f70 <_sercom_get_default_pad+0x16c>)
     efc:	e790      	b.n	e20 <_sercom_get_default_pad+0x1c>
     efe:	481d      	ldr	r0, [pc, #116]	; (f74 <_sercom_get_default_pad+0x170>)
     f00:	e78e      	b.n	e20 <_sercom_get_default_pad+0x1c>
     f02:	481d      	ldr	r0, [pc, #116]	; (f78 <_sercom_get_default_pad+0x174>)
     f04:	e78c      	b.n	e20 <_sercom_get_default_pad+0x1c>
     f06:	46c0      	nop			; (mov r8, r8)
     f08:	42001000 	.word	0x42001000
     f0c:	42001800 	.word	0x42001800
     f10:	42001c00 	.word	0x42001c00
     f14:	42001400 	.word	0x42001400
     f18:	42000800 	.word	0x42000800
     f1c:	42000c00 	.word	0x42000c00
     f20:	00050003 	.word	0x00050003
     f24:	00060003 	.word	0x00060003
     f28:	00070003 	.word	0x00070003
     f2c:	00010003 	.word	0x00010003
     f30:	001e0003 	.word	0x001e0003
     f34:	001f0003 	.word	0x001f0003
     f38:	000d0002 	.word	0x000d0002
     f3c:	000e0002 	.word	0x000e0002
     f40:	000f0002 	.word	0x000f0002
     f44:	00110003 	.word	0x00110003
     f48:	00120003 	.word	0x00120003
     f4c:	00130003 	.word	0x00130003
     f50:	003f0005 	.word	0x003f0005
     f54:	003e0005 	.word	0x003e0005
     f58:	00520005 	.word	0x00520005
     f5c:	00170003 	.word	0x00170003
     f60:	00180003 	.word	0x00180003
     f64:	00190003 	.word	0x00190003
     f68:	00040003 	.word	0x00040003
     f6c:	000c0002 	.word	0x000c0002
     f70:	00100003 	.word	0x00100003
     f74:	00530005 	.word	0x00530005
     f78:	00160003 	.word	0x00160003

00000f7c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     f7c:	b530      	push	{r4, r5, lr}
     f7e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     f80:	4b0b      	ldr	r3, [pc, #44]	; (fb0 <_sercom_get_sercom_inst_index+0x34>)
     f82:	466a      	mov	r2, sp
     f84:	cb32      	ldmia	r3!, {r1, r4, r5}
     f86:	c232      	stmia	r2!, {r1, r4, r5}
     f88:	cb32      	ldmia	r3!, {r1, r4, r5}
     f8a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     f8c:	9b00      	ldr	r3, [sp, #0]
     f8e:	4283      	cmp	r3, r0
     f90:	d00b      	beq.n	faa <_sercom_get_sercom_inst_index+0x2e>
     f92:	2301      	movs	r3, #1
     f94:	009a      	lsls	r2, r3, #2
     f96:	4669      	mov	r1, sp
     f98:	5852      	ldr	r2, [r2, r1]
     f9a:	4282      	cmp	r2, r0
     f9c:	d006      	beq.n	fac <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f9e:	3301      	adds	r3, #1
     fa0:	2b06      	cmp	r3, #6
     fa2:	d1f7      	bne.n	f94 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     fa4:	2000      	movs	r0, #0
}
     fa6:	b007      	add	sp, #28
     fa8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     faa:	2300      	movs	r3, #0
			return i;
     fac:	b2d8      	uxtb	r0, r3
     fae:	e7fa      	b.n	fa6 <_sercom_get_sercom_inst_index+0x2a>
     fb0:	00008930 	.word	0x00008930

00000fb4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     fb4:	4770      	bx	lr
	...

00000fb8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     fba:	4b0a      	ldr	r3, [pc, #40]	; (fe4 <_sercom_set_handler+0x2c>)
     fbc:	781b      	ldrb	r3, [r3, #0]
     fbe:	2b00      	cmp	r3, #0
     fc0:	d10c      	bne.n	fdc <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     fc2:	4f09      	ldr	r7, [pc, #36]	; (fe8 <_sercom_set_handler+0x30>)
     fc4:	4e09      	ldr	r6, [pc, #36]	; (fec <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     fc6:	4d0a      	ldr	r5, [pc, #40]	; (ff0 <_sercom_set_handler+0x38>)
     fc8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     fca:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     fcc:	195a      	adds	r2, r3, r5
     fce:	6014      	str	r4, [r2, #0]
     fd0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     fd2:	2b18      	cmp	r3, #24
     fd4:	d1f9      	bne.n	fca <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     fd6:	2201      	movs	r2, #1
     fd8:	4b02      	ldr	r3, [pc, #8]	; (fe4 <_sercom_set_handler+0x2c>)
     fda:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     fdc:	0080      	lsls	r0, r0, #2
     fde:	4b02      	ldr	r3, [pc, #8]	; (fe8 <_sercom_set_handler+0x30>)
     fe0:	50c1      	str	r1, [r0, r3]
}
     fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fe4:	2000020e 	.word	0x2000020e
     fe8:	20000210 	.word	0x20000210
     fec:	00000fb5 	.word	0x00000fb5
     ff0:	200008f0 	.word	0x200008f0

00000ff4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     ff4:	b500      	push	{lr}
     ff6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     ff8:	2309      	movs	r3, #9
     ffa:	466a      	mov	r2, sp
     ffc:	7013      	strb	r3, [r2, #0]
     ffe:	3301      	adds	r3, #1
    1000:	7053      	strb	r3, [r2, #1]
    1002:	3301      	adds	r3, #1
    1004:	7093      	strb	r3, [r2, #2]
    1006:	3301      	adds	r3, #1
    1008:	70d3      	strb	r3, [r2, #3]
    100a:	3301      	adds	r3, #1
    100c:	7113      	strb	r3, [r2, #4]
    100e:	3301      	adds	r3, #1
    1010:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1012:	4b03      	ldr	r3, [pc, #12]	; (1020 <_sercom_get_interrupt_vector+0x2c>)
    1014:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1016:	466b      	mov	r3, sp
    1018:	5618      	ldrsb	r0, [r3, r0]
}
    101a:	b003      	add	sp, #12
    101c:	bd00      	pop	{pc}
    101e:	46c0      	nop			; (mov r8, r8)
    1020:	00000f7d 	.word	0x00000f7d

00001024 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1024:	b510      	push	{r4, lr}
    1026:	4b02      	ldr	r3, [pc, #8]	; (1030 <SERCOM0_Handler+0xc>)
    1028:	681b      	ldr	r3, [r3, #0]
    102a:	2000      	movs	r0, #0
    102c:	4798      	blx	r3
    102e:	bd10      	pop	{r4, pc}
    1030:	20000210 	.word	0x20000210

00001034 <SERCOM1_Handler>:
    1034:	b510      	push	{r4, lr}
    1036:	4b02      	ldr	r3, [pc, #8]	; (1040 <SERCOM1_Handler+0xc>)
    1038:	685b      	ldr	r3, [r3, #4]
    103a:	2001      	movs	r0, #1
    103c:	4798      	blx	r3
    103e:	bd10      	pop	{r4, pc}
    1040:	20000210 	.word	0x20000210

00001044 <SERCOM2_Handler>:
    1044:	b510      	push	{r4, lr}
    1046:	4b02      	ldr	r3, [pc, #8]	; (1050 <SERCOM2_Handler+0xc>)
    1048:	689b      	ldr	r3, [r3, #8]
    104a:	2002      	movs	r0, #2
    104c:	4798      	blx	r3
    104e:	bd10      	pop	{r4, pc}
    1050:	20000210 	.word	0x20000210

00001054 <SERCOM3_Handler>:
    1054:	b510      	push	{r4, lr}
    1056:	4b02      	ldr	r3, [pc, #8]	; (1060 <SERCOM3_Handler+0xc>)
    1058:	68db      	ldr	r3, [r3, #12]
    105a:	2003      	movs	r0, #3
    105c:	4798      	blx	r3
    105e:	bd10      	pop	{r4, pc}
    1060:	20000210 	.word	0x20000210

00001064 <SERCOM4_Handler>:
    1064:	b510      	push	{r4, lr}
    1066:	4b02      	ldr	r3, [pc, #8]	; (1070 <SERCOM4_Handler+0xc>)
    1068:	691b      	ldr	r3, [r3, #16]
    106a:	2004      	movs	r0, #4
    106c:	4798      	blx	r3
    106e:	bd10      	pop	{r4, pc}
    1070:	20000210 	.word	0x20000210

00001074 <SERCOM5_Handler>:
    1074:	b510      	push	{r4, lr}
    1076:	4b02      	ldr	r3, [pc, #8]	; (1080 <SERCOM5_Handler+0xc>)
    1078:	695b      	ldr	r3, [r3, #20]
    107a:	2005      	movs	r0, #5
    107c:	4798      	blx	r3
    107e:	bd10      	pop	{r4, pc}
    1080:	20000210 	.word	0x20000210

00001084 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1084:	b5f0      	push	{r4, r5, r6, r7, lr}
    1086:	46d6      	mov	lr, sl
    1088:	464f      	mov	r7, r9
    108a:	b580      	push	{r7, lr}
    108c:	b08b      	sub	sp, #44	; 0x2c
    108e:	4681      	mov	r9, r0
    1090:	000f      	movs	r7, r1
    1092:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1094:	0003      	movs	r3, r0
    1096:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1098:	680b      	ldr	r3, [r1, #0]
    109a:	079b      	lsls	r3, r3, #30
    109c:	d409      	bmi.n	10b2 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    109e:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    10a0:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    10a2:	07db      	lsls	r3, r3, #31
    10a4:	d400      	bmi.n	10a8 <spi_init+0x24>
    10a6:	e098      	b.n	11da <spi_init+0x156>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    10a8:	b00b      	add	sp, #44	; 0x2c
    10aa:	bc0c      	pop	{r2, r3}
    10ac:	4691      	mov	r9, r2
    10ae:	469a      	mov	sl, r3
    10b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    10b2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    10b4:	9305      	str	r3, [sp, #20]
    10b6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    10b8:	9306      	str	r3, [sp, #24]
    10ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
    10bc:	9307      	str	r3, [sp, #28]
    10be:	6b53      	ldr	r3, [r2, #52]	; 0x34
    10c0:	9308      	str	r3, [sp, #32]
    10c2:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    10c4:	ab05      	add	r3, sp, #20
    10c6:	9301      	str	r3, [sp, #4]
    10c8:	e00a      	b.n	10e0 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    10ca:	0038      	movs	r0, r7
    10cc:	4b93      	ldr	r3, [pc, #588]	; (131c <spi_init+0x298>)
    10ce:	4798      	blx	r3
    10d0:	e00c      	b.n	10ec <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    10d2:	230f      	movs	r3, #15
    10d4:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    10d6:	4281      	cmp	r1, r0
    10d8:	d12d      	bne.n	1136 <spi_init+0xb2>
    10da:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    10dc:	2e04      	cmp	r6, #4
    10de:	d02f      	beq.n	1140 <spi_init+0xbc>
    10e0:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    10e2:	00b3      	lsls	r3, r6, #2
    10e4:	9a01      	ldr	r2, [sp, #4]
    10e6:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    10e8:	2800      	cmp	r0, #0
    10ea:	d0ee      	beq.n	10ca <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    10ec:	1c43      	adds	r3, r0, #1
    10ee:	d0f4      	beq.n	10da <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    10f0:	0401      	lsls	r1, r0, #16
    10f2:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    10f4:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    10f6:	b2c3      	uxtb	r3, r0
    10f8:	469c      	mov	ip, r3
		return NULL;
    10fa:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    10fc:	0602      	lsls	r2, r0, #24
    10fe:	d405      	bmi.n	110c <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    1100:	4663      	mov	r3, ip
    1102:	095b      	lsrs	r3, r3, #5
    1104:	01db      	lsls	r3, r3, #7
    1106:	4a86      	ldr	r2, [pc, #536]	; (1320 <spi_init+0x29c>)
    1108:	4692      	mov	sl, r2
    110a:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    110c:	221f      	movs	r2, #31
    110e:	4660      	mov	r0, ip
    1110:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1112:	1898      	adds	r0, r3, r2
    1114:	3040      	adds	r0, #64	; 0x40
    1116:	7800      	ldrb	r0, [r0, #0]
    1118:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    111a:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    111c:	4655      	mov	r5, sl
    111e:	07ed      	lsls	r5, r5, #31
    1120:	d5d9      	bpl.n	10d6 <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    1122:	0852      	lsrs	r2, r2, #1
    1124:	189b      	adds	r3, r3, r2
    1126:	3330      	adds	r3, #48	; 0x30
    1128:	7818      	ldrb	r0, [r3, #0]
    112a:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    112c:	4663      	mov	r3, ip
    112e:	07db      	lsls	r3, r3, #31
    1130:	d5cf      	bpl.n	10d2 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    1132:	0900      	lsrs	r0, r0, #4
    1134:	e7cf      	b.n	10d6 <spi_init+0x52>
			module->hw = NULL;
    1136:	2300      	movs	r3, #0
    1138:	464a      	mov	r2, r9
    113a:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    113c:	201c      	movs	r0, #28
    113e:	e7b3      	b.n	10a8 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    1140:	2013      	movs	r0, #19
    1142:	4b78      	ldr	r3, [pc, #480]	; (1324 <spi_init+0x2a0>)
    1144:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1146:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    1148:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    114a:	2a01      	cmp	r2, #1
    114c:	d027      	beq.n	119e <spi_init+0x11a>
	ctrla |= config->mux_setting;
    114e:	6863      	ldr	r3, [r4, #4]
    1150:	68a2      	ldr	r2, [r4, #8]
    1152:	4313      	orrs	r3, r2
    1154:	68e2      	ldr	r2, [r4, #12]
    1156:	4313      	orrs	r3, r2
    1158:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    115a:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    115c:	7c61      	ldrb	r1, [r4, #17]
    115e:	2900      	cmp	r1, #0
    1160:	d001      	beq.n	1166 <spi_init+0xe2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1162:	2180      	movs	r1, #128	; 0x80
    1164:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    1166:	7ca1      	ldrb	r1, [r4, #18]
    1168:	2900      	cmp	r1, #0
    116a:	d002      	beq.n	1172 <spi_init+0xee>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    116c:	2180      	movs	r1, #128	; 0x80
    116e:	0289      	lsls	r1, r1, #10
    1170:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    1172:	7ce1      	ldrb	r1, [r4, #19]
    1174:	2900      	cmp	r1, #0
    1176:	d002      	beq.n	117e <spi_init+0xfa>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1178:	2180      	movs	r1, #128	; 0x80
    117a:	0089      	lsls	r1, r1, #2
    117c:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    117e:	7d21      	ldrb	r1, [r4, #20]
    1180:	2900      	cmp	r1, #0
    1182:	d002      	beq.n	118a <spi_init+0x106>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1184:	2180      	movs	r1, #128	; 0x80
    1186:	0189      	lsls	r1, r1, #6
    1188:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    118a:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    118c:	2002      	movs	r0, #2
    118e:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    1190:	428b      	cmp	r3, r1
    1192:	d018      	beq.n	11c6 <spi_init+0x142>
	module->hw = NULL;
    1194:	2300      	movs	r3, #0
    1196:	464a      	mov	r2, r9
    1198:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    119a:	201c      	movs	r0, #28
    119c:	e784      	b.n	10a8 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    119e:	aa04      	add	r2, sp, #16
    11a0:	0001      	movs	r1, r0
    11a2:	69a0      	ldr	r0, [r4, #24]
    11a4:	4b60      	ldr	r3, [pc, #384]	; (1328 <spi_init+0x2a4>)
    11a6:	4798      	blx	r3
    11a8:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    11aa:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    11ac:	2b00      	cmp	r3, #0
    11ae:	d000      	beq.n	11b2 <spi_init+0x12e>
    11b0:	e77a      	b.n	10a8 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    11b2:	7b3b      	ldrb	r3, [r7, #12]
    11b4:	b2db      	uxtb	r3, r3
    11b6:	aa04      	add	r2, sp, #16
    11b8:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    11ba:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    11bc:	429a      	cmp	r2, r3
    11be:	d000      	beq.n	11c2 <spi_init+0x13e>
    11c0:	e772      	b.n	10a8 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    11c2:	350c      	adds	r5, #12
    11c4:	e7c3      	b.n	114e <spi_init+0xca>
			spi_module->CTRLB.reg == ctrlb) {
    11c6:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    11c8:	4293      	cmp	r3, r2
    11ca:	d1e3      	bne.n	1194 <spi_init+0x110>
		module->mode           = config->mode;
    11cc:	7823      	ldrb	r3, [r4, #0]
    11ce:	464a      	mov	r2, r9
    11d0:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
    11d2:	7c23      	ldrb	r3, [r4, #16]
    11d4:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    11d6:	2000      	movs	r0, #0
    11d8:	e766      	b.n	10a8 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    11da:	0008      	movs	r0, r1
    11dc:	4b53      	ldr	r3, [pc, #332]	; (132c <spi_init+0x2a8>)
    11de:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    11e0:	4a53      	ldr	r2, [pc, #332]	; (1330 <spi_init+0x2ac>)
    11e2:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    11e4:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    11e6:	2301      	movs	r3, #1
    11e8:	40ab      	lsls	r3, r5
    11ea:	430b      	orrs	r3, r1
    11ec:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    11ee:	a909      	add	r1, sp, #36	; 0x24
    11f0:	2624      	movs	r6, #36	; 0x24
    11f2:	5da3      	ldrb	r3, [r4, r6]
    11f4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    11f6:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    11f8:	b2c5      	uxtb	r5, r0
    11fa:	0028      	movs	r0, r5
    11fc:	4b4d      	ldr	r3, [pc, #308]	; (1334 <spi_init+0x2b0>)
    11fe:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1200:	0028      	movs	r0, r5
    1202:	4b4d      	ldr	r3, [pc, #308]	; (1338 <spi_init+0x2b4>)
    1204:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1206:	5da0      	ldrb	r0, [r4, r6]
    1208:	2100      	movs	r1, #0
    120a:	4b4c      	ldr	r3, [pc, #304]	; (133c <spi_init+0x2b8>)
    120c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    120e:	7823      	ldrb	r3, [r4, #0]
    1210:	2b01      	cmp	r3, #1
    1212:	d019      	beq.n	1248 <spi_init+0x1c4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1214:	464b      	mov	r3, r9
    1216:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1218:	ab04      	add	r3, sp, #16
    121a:	2280      	movs	r2, #128	; 0x80
    121c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    121e:	2200      	movs	r2, #0
    1220:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1222:	2101      	movs	r1, #1
    1224:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    1226:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    1228:	7823      	ldrb	r3, [r4, #0]
    122a:	2b00      	cmp	r3, #0
    122c:	d101      	bne.n	1232 <spi_init+0x1ae>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    122e:	ab04      	add	r3, sp, #16
    1230:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1232:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1234:	9305      	str	r3, [sp, #20]
    1236:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1238:	9306      	str	r3, [sp, #24]
    123a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    123c:	9307      	str	r3, [sp, #28]
    123e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1240:	9308      	str	r3, [sp, #32]
    1242:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1244:	ad05      	add	r5, sp, #20
    1246:	e011      	b.n	126c <spi_init+0x1e8>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1248:	683b      	ldr	r3, [r7, #0]
    124a:	220c      	movs	r2, #12
    124c:	4313      	orrs	r3, r2
    124e:	603b      	str	r3, [r7, #0]
    1250:	e7e0      	b.n	1214 <spi_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1252:	0030      	movs	r0, r6
    1254:	4b31      	ldr	r3, [pc, #196]	; (131c <spi_init+0x298>)
    1256:	4798      	blx	r3
    1258:	e00d      	b.n	1276 <spi_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    125a:	a904      	add	r1, sp, #16
    125c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    125e:	0c00      	lsrs	r0, r0, #16
    1260:	b2c0      	uxtb	r0, r0
    1262:	4b37      	ldr	r3, [pc, #220]	; (1340 <spi_init+0x2bc>)
    1264:	4798      	blx	r3
    1266:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1268:	2f04      	cmp	r7, #4
    126a:	d007      	beq.n	127c <spi_init+0x1f8>
    126c:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    126e:	00bb      	lsls	r3, r7, #2
    1270:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    1272:	2800      	cmp	r0, #0
    1274:	d0ed      	beq.n	1252 <spi_init+0x1ce>
		if (current_pinmux != PINMUX_UNUSED) {
    1276:	1c43      	adds	r3, r0, #1
    1278:	d1ef      	bne.n	125a <spi_init+0x1d6>
    127a:	e7f4      	b.n	1266 <spi_init+0x1e2>
	module->mode             = config->mode;
    127c:	7823      	ldrb	r3, [r4, #0]
    127e:	464a      	mov	r2, r9
    1280:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    1282:	7c23      	ldrb	r3, [r4, #16]
    1284:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    1286:	7ca3      	ldrb	r3, [r4, #18]
    1288:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    128a:	7d23      	ldrb	r3, [r4, #20]
    128c:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    128e:	2200      	movs	r2, #0
    1290:	ab02      	add	r3, sp, #8
    1292:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1294:	7823      	ldrb	r3, [r4, #0]
    1296:	2b01      	cmp	r3, #1
    1298:	d028      	beq.n	12ec <spi_init+0x268>
	ctrla |= config->transfer_mode;
    129a:	6863      	ldr	r3, [r4, #4]
    129c:	68a2      	ldr	r2, [r4, #8]
    129e:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    12a0:	68e2      	ldr	r2, [r4, #12]
    12a2:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    12a4:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    12a6:	7c62      	ldrb	r2, [r4, #17]
    12a8:	2a00      	cmp	r2, #0
    12aa:	d103      	bne.n	12b4 <spi_init+0x230>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    12ac:	4a25      	ldr	r2, [pc, #148]	; (1344 <spi_init+0x2c0>)
    12ae:	7892      	ldrb	r2, [r2, #2]
    12b0:	0792      	lsls	r2, r2, #30
    12b2:	d501      	bpl.n	12b8 <spi_init+0x234>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    12b4:	2280      	movs	r2, #128	; 0x80
    12b6:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    12b8:	7ca2      	ldrb	r2, [r4, #18]
    12ba:	2a00      	cmp	r2, #0
    12bc:	d002      	beq.n	12c4 <spi_init+0x240>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    12be:	2280      	movs	r2, #128	; 0x80
    12c0:	0292      	lsls	r2, r2, #10
    12c2:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    12c4:	7ce2      	ldrb	r2, [r4, #19]
    12c6:	2a00      	cmp	r2, #0
    12c8:	d002      	beq.n	12d0 <spi_init+0x24c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    12ca:	2280      	movs	r2, #128	; 0x80
    12cc:	0092      	lsls	r2, r2, #2
    12ce:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    12d0:	7d22      	ldrb	r2, [r4, #20]
    12d2:	2a00      	cmp	r2, #0
    12d4:	d002      	beq.n	12dc <spi_init+0x258>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    12d6:	2280      	movs	r2, #128	; 0x80
    12d8:	0192      	lsls	r2, r2, #6
    12da:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    12dc:	6832      	ldr	r2, [r6, #0]
    12de:	4313      	orrs	r3, r2
    12e0:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    12e2:	6873      	ldr	r3, [r6, #4]
    12e4:	430b      	orrs	r3, r1
    12e6:	6073      	str	r3, [r6, #4]
	return STATUS_OK;
    12e8:	2000      	movs	r0, #0
    12ea:	e6dd      	b.n	10a8 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    12ec:	464b      	mov	r3, r9
    12ee:	6818      	ldr	r0, [r3, #0]
    12f0:	4b0e      	ldr	r3, [pc, #56]	; (132c <spi_init+0x2a8>)
    12f2:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    12f4:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    12f6:	b2c0      	uxtb	r0, r0
    12f8:	4b0a      	ldr	r3, [pc, #40]	; (1324 <spi_init+0x2a0>)
    12fa:	4798      	blx	r3
    12fc:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    12fe:	ab02      	add	r3, sp, #8
    1300:	1d9a      	adds	r2, r3, #6
    1302:	69a0      	ldr	r0, [r4, #24]
    1304:	4b08      	ldr	r3, [pc, #32]	; (1328 <spi_init+0x2a4>)
    1306:	4798      	blx	r3
    1308:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    130a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    130c:	2b00      	cmp	r3, #0
    130e:	d000      	beq.n	1312 <spi_init+0x28e>
    1310:	e6ca      	b.n	10a8 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    1312:	ab02      	add	r3, sp, #8
    1314:	3306      	adds	r3, #6
    1316:	781b      	ldrb	r3, [r3, #0]
    1318:	7333      	strb	r3, [r6, #12]
    131a:	e7be      	b.n	129a <spi_init+0x216>
    131c:	00000e05 	.word	0x00000e05
    1320:	41004400 	.word	0x41004400
    1324:	00002201 	.word	0x00002201
    1328:	00000bc1 	.word	0x00000bc1
    132c:	00000f7d 	.word	0x00000f7d
    1330:	40000400 	.word	0x40000400
    1334:	000021e5 	.word	0x000021e5
    1338:	00002159 	.word	0x00002159
    133c:	00000db9 	.word	0x00000db9
    1340:	000022dd 	.word	0x000022dd
    1344:	41002000 	.word	0x41002000

00001348 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1348:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    134a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    134c:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    134e:	2c01      	cmp	r4, #1
    1350:	d001      	beq.n	1356 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    1352:	0018      	movs	r0, r3
    1354:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    1356:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    1358:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    135a:	2c00      	cmp	r4, #0
    135c:	d1f9      	bne.n	1352 <spi_select_slave+0xa>
		if (select) {
    135e:	2a00      	cmp	r2, #0
    1360:	d058      	beq.n	1414 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    1362:	784b      	ldrb	r3, [r1, #1]
    1364:	2b00      	cmp	r3, #0
    1366:	d044      	beq.n	13f2 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1368:	6803      	ldr	r3, [r0, #0]
    136a:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    136c:	07db      	lsls	r3, r3, #31
    136e:	d410      	bmi.n	1392 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    1370:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1372:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1374:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1376:	2900      	cmp	r1, #0
    1378:	d104      	bne.n	1384 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    137a:	0953      	lsrs	r3, r2, #5
    137c:	01db      	lsls	r3, r3, #7
    137e:	492e      	ldr	r1, [pc, #184]	; (1438 <spi_select_slave+0xf0>)
    1380:	468c      	mov	ip, r1
    1382:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1384:	211f      	movs	r1, #31
    1386:	4011      	ands	r1, r2
    1388:	2201      	movs	r2, #1
    138a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    138c:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    138e:	2305      	movs	r3, #5
    1390:	e7df      	b.n	1352 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1392:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1394:	09d4      	lsrs	r4, r2, #7
		return NULL;
    1396:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1398:	2c00      	cmp	r4, #0
    139a:	d104      	bne.n	13a6 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    139c:	0953      	lsrs	r3, r2, #5
    139e:	01db      	lsls	r3, r3, #7
    13a0:	4c25      	ldr	r4, [pc, #148]	; (1438 <spi_select_slave+0xf0>)
    13a2:	46a4      	mov	ip, r4
    13a4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    13a6:	241f      	movs	r4, #31
    13a8:	4014      	ands	r4, r2
    13aa:	2201      	movs	r2, #1
    13ac:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    13ae:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    13b0:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    13b2:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    13b4:	07d2      	lsls	r2, r2, #31
    13b6:	d501      	bpl.n	13bc <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    13b8:	788a      	ldrb	r2, [r1, #2]
    13ba:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    13bc:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    13be:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    13c0:	2a00      	cmp	r2, #0
    13c2:	d1c6      	bne.n	1352 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    13c4:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    13c6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    13c8:	7e13      	ldrb	r3, [r2, #24]
    13ca:	420b      	tst	r3, r1
    13cc:	d0fc      	beq.n	13c8 <spi_select_slave+0x80>
    13ce:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    13d0:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    13d2:	0749      	lsls	r1, r1, #29
    13d4:	d5bd      	bpl.n	1352 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    13d6:	8b53      	ldrh	r3, [r2, #26]
    13d8:	075b      	lsls	r3, r3, #29
    13da:	d501      	bpl.n	13e0 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    13dc:	2304      	movs	r3, #4
    13de:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    13e0:	7983      	ldrb	r3, [r0, #6]
    13e2:	2b01      	cmp	r3, #1
    13e4:	d002      	beq.n	13ec <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    13e6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    13e8:	2300      	movs	r3, #0
    13ea:	e7b2      	b.n	1352 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    13ec:	6a93      	ldr	r3, [r2, #40]	; 0x28
    13ee:	2300      	movs	r3, #0
    13f0:	e7af      	b.n	1352 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    13f2:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    13f4:	09d1      	lsrs	r1, r2, #7
		return NULL;
    13f6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    13f8:	2900      	cmp	r1, #0
    13fa:	d104      	bne.n	1406 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    13fc:	0953      	lsrs	r3, r2, #5
    13fe:	01db      	lsls	r3, r3, #7
    1400:	490d      	ldr	r1, [pc, #52]	; (1438 <spi_select_slave+0xf0>)
    1402:	468c      	mov	ip, r1
    1404:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1406:	211f      	movs	r1, #31
    1408:	4011      	ands	r1, r2
    140a:	2201      	movs	r2, #1
    140c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    140e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    1410:	2300      	movs	r3, #0
    1412:	e79e      	b.n	1352 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    1414:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1416:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1418:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    141a:	2900      	cmp	r1, #0
    141c:	d104      	bne.n	1428 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    141e:	0953      	lsrs	r3, r2, #5
    1420:	01db      	lsls	r3, r3, #7
    1422:	4905      	ldr	r1, [pc, #20]	; (1438 <spi_select_slave+0xf0>)
    1424:	468c      	mov	ip, r1
    1426:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1428:	211f      	movs	r1, #31
    142a:	4011      	ands	r1, r2
    142c:	2201      	movs	r2, #1
    142e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1430:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    1432:	2300      	movs	r3, #0
    1434:	e78d      	b.n	1352 <spi_select_slave+0xa>
    1436:	46c0      	nop			; (mov r8, r8)
    1438:	41004400 	.word	0x41004400

0000143c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    143c:	b5f0      	push	{r4, r5, r6, r7, lr}
    143e:	46de      	mov	lr, fp
    1440:	4657      	mov	r7, sl
    1442:	464e      	mov	r6, r9
    1444:	4645      	mov	r5, r8
    1446:	b5e0      	push	{r5, r6, r7, lr}
    1448:	b091      	sub	sp, #68	; 0x44
    144a:	0005      	movs	r5, r0
    144c:	000c      	movs	r4, r1
    144e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1450:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1452:	0008      	movs	r0, r1
    1454:	4bbb      	ldr	r3, [pc, #748]	; (1744 <usart_init+0x308>)
    1456:	4798      	blx	r3
    1458:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    145a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    145c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    145e:	07db      	lsls	r3, r3, #31
    1460:	d506      	bpl.n	1470 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1462:	b011      	add	sp, #68	; 0x44
    1464:	bc3c      	pop	{r2, r3, r4, r5}
    1466:	4690      	mov	r8, r2
    1468:	4699      	mov	r9, r3
    146a:	46a2      	mov	sl, r4
    146c:	46ab      	mov	fp, r5
    146e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1470:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1472:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1474:	079b      	lsls	r3, r3, #30
    1476:	d4f4      	bmi.n	1462 <usart_init+0x26>
    1478:	49b3      	ldr	r1, [pc, #716]	; (1748 <usart_init+0x30c>)
    147a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    147c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    147e:	2301      	movs	r3, #1
    1480:	40bb      	lsls	r3, r7
    1482:	4303      	orrs	r3, r0
    1484:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1486:	a90f      	add	r1, sp, #60	; 0x3c
    1488:	272d      	movs	r7, #45	; 0x2d
    148a:	5df3      	ldrb	r3, [r6, r7]
    148c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    148e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1490:	b2d3      	uxtb	r3, r2
    1492:	9302      	str	r3, [sp, #8]
    1494:	0018      	movs	r0, r3
    1496:	4bad      	ldr	r3, [pc, #692]	; (174c <usart_init+0x310>)
    1498:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    149a:	9802      	ldr	r0, [sp, #8]
    149c:	4bac      	ldr	r3, [pc, #688]	; (1750 <usart_init+0x314>)
    149e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    14a0:	5df0      	ldrb	r0, [r6, r7]
    14a2:	2100      	movs	r1, #0
    14a4:	4bab      	ldr	r3, [pc, #684]	; (1754 <usart_init+0x318>)
    14a6:	4798      	blx	r3
	module->character_size = config->character_size;
    14a8:	7af3      	ldrb	r3, [r6, #11]
    14aa:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    14ac:	2324      	movs	r3, #36	; 0x24
    14ae:	5cf3      	ldrb	r3, [r6, r3]
    14b0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    14b2:	2325      	movs	r3, #37	; 0x25
    14b4:	5cf3      	ldrb	r3, [r6, r3]
    14b6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    14b8:	7ef3      	ldrb	r3, [r6, #27]
    14ba:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    14bc:	7f33      	ldrb	r3, [r6, #28]
    14be:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    14c0:	682b      	ldr	r3, [r5, #0]
    14c2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    14c4:	0018      	movs	r0, r3
    14c6:	4b9f      	ldr	r3, [pc, #636]	; (1744 <usart_init+0x308>)
    14c8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    14ca:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    14cc:	2200      	movs	r2, #0
    14ce:	230e      	movs	r3, #14
    14d0:	a906      	add	r1, sp, #24
    14d2:	468c      	mov	ip, r1
    14d4:	4463      	add	r3, ip
    14d6:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    14d8:	8a32      	ldrh	r2, [r6, #16]
    14da:	9202      	str	r2, [sp, #8]
    14dc:	2380      	movs	r3, #128	; 0x80
    14de:	01db      	lsls	r3, r3, #7
    14e0:	429a      	cmp	r2, r3
    14e2:	d100      	bne.n	14e6 <usart_init+0xaa>
    14e4:	e09c      	b.n	1620 <usart_init+0x1e4>
    14e6:	d90f      	bls.n	1508 <usart_init+0xcc>
    14e8:	23c0      	movs	r3, #192	; 0xc0
    14ea:	01db      	lsls	r3, r3, #7
    14ec:	9a02      	ldr	r2, [sp, #8]
    14ee:	429a      	cmp	r2, r3
    14f0:	d100      	bne.n	14f4 <usart_init+0xb8>
    14f2:	e090      	b.n	1616 <usart_init+0x1da>
    14f4:	2380      	movs	r3, #128	; 0x80
    14f6:	021b      	lsls	r3, r3, #8
    14f8:	429a      	cmp	r2, r3
    14fa:	d000      	beq.n	14fe <usart_init+0xc2>
    14fc:	e11d      	b.n	173a <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    14fe:	2303      	movs	r3, #3
    1500:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1502:	2300      	movs	r3, #0
    1504:	9307      	str	r3, [sp, #28]
    1506:	e008      	b.n	151a <usart_init+0xde>
	switch (config->sample_rate) {
    1508:	2380      	movs	r3, #128	; 0x80
    150a:	019b      	lsls	r3, r3, #6
    150c:	429a      	cmp	r2, r3
    150e:	d000      	beq.n	1512 <usart_init+0xd6>
    1510:	e113      	b.n	173a <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1512:	2310      	movs	r3, #16
    1514:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1516:	3b0f      	subs	r3, #15
    1518:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    151a:	6833      	ldr	r3, [r6, #0]
    151c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    151e:	68f3      	ldr	r3, [r6, #12]
    1520:	469b      	mov	fp, r3
		config->sample_adjustment |
    1522:	6973      	ldr	r3, [r6, #20]
    1524:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1526:	7e33      	ldrb	r3, [r6, #24]
    1528:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    152a:	2326      	movs	r3, #38	; 0x26
    152c:	5cf3      	ldrb	r3, [r6, r3]
    152e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1530:	6873      	ldr	r3, [r6, #4]
    1532:	4699      	mov	r9, r3
	switch (transfer_mode)
    1534:	2b00      	cmp	r3, #0
    1536:	d100      	bne.n	153a <usart_init+0xfe>
    1538:	e09e      	b.n	1678 <usart_init+0x23c>
    153a:	2380      	movs	r3, #128	; 0x80
    153c:	055b      	lsls	r3, r3, #21
    153e:	4599      	cmp	r9, r3
    1540:	d100      	bne.n	1544 <usart_init+0x108>
    1542:	e082      	b.n	164a <usart_init+0x20e>
	if(config->encoding_format_enable) {
    1544:	7e73      	ldrb	r3, [r6, #25]
    1546:	2b00      	cmp	r3, #0
    1548:	d002      	beq.n	1550 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    154a:	7eb3      	ldrb	r3, [r6, #26]
    154c:	4642      	mov	r2, r8
    154e:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1550:	682a      	ldr	r2, [r5, #0]
    1552:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    1554:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1556:	2b00      	cmp	r3, #0
    1558:	d1fc      	bne.n	1554 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    155a:	330e      	adds	r3, #14
    155c:	aa06      	add	r2, sp, #24
    155e:	4694      	mov	ip, r2
    1560:	4463      	add	r3, ip
    1562:	881b      	ldrh	r3, [r3, #0]
    1564:	4642      	mov	r2, r8
    1566:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1568:	9b05      	ldr	r3, [sp, #20]
    156a:	465a      	mov	r2, fp
    156c:	4313      	orrs	r3, r2
    156e:	9a03      	ldr	r2, [sp, #12]
    1570:	4313      	orrs	r3, r2
    1572:	464a      	mov	r2, r9
    1574:	4313      	orrs	r3, r2
    1576:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1578:	9b04      	ldr	r3, [sp, #16]
    157a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    157c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    157e:	4653      	mov	r3, sl
    1580:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1582:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1584:	2327      	movs	r3, #39	; 0x27
    1586:	5cf3      	ldrb	r3, [r6, r3]
    1588:	2b00      	cmp	r3, #0
    158a:	d101      	bne.n	1590 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    158c:	3304      	adds	r3, #4
    158e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1590:	7e73      	ldrb	r3, [r6, #25]
    1592:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1594:	7f32      	ldrb	r2, [r6, #28]
    1596:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1598:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    159a:	7f72      	ldrb	r2, [r6, #29]
    159c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    159e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    15a0:	2224      	movs	r2, #36	; 0x24
    15a2:	5cb2      	ldrb	r2, [r6, r2]
    15a4:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    15a6:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    15a8:	2225      	movs	r2, #37	; 0x25
    15aa:	5cb2      	ldrb	r2, [r6, r2]
    15ac:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    15ae:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    15b0:	7af1      	ldrb	r1, [r6, #11]
    15b2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    15b4:	8933      	ldrh	r3, [r6, #8]
    15b6:	2bff      	cmp	r3, #255	; 0xff
    15b8:	d100      	bne.n	15bc <usart_init+0x180>
    15ba:	e081      	b.n	16c0 <usart_init+0x284>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    15bc:	2280      	movs	r2, #128	; 0x80
    15be:	0452      	lsls	r2, r2, #17
    15c0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    15c2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    15c4:	232c      	movs	r3, #44	; 0x2c
    15c6:	5cf3      	ldrb	r3, [r6, r3]
    15c8:	2b00      	cmp	r3, #0
    15ca:	d103      	bne.n	15d4 <usart_init+0x198>
    15cc:	4b62      	ldr	r3, [pc, #392]	; (1758 <usart_init+0x31c>)
    15ce:	789b      	ldrb	r3, [r3, #2]
    15d0:	079b      	lsls	r3, r3, #30
    15d2:	d501      	bpl.n	15d8 <usart_init+0x19c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    15d4:	2380      	movs	r3, #128	; 0x80
    15d6:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    15d8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    15da:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    15dc:	2b00      	cmp	r3, #0
    15de:	d1fc      	bne.n	15da <usart_init+0x19e>
	usart_hw->CTRLB.reg = ctrlb;
    15e0:	4643      	mov	r3, r8
    15e2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    15e4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    15e6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    15e8:	2b00      	cmp	r3, #0
    15ea:	d1fc      	bne.n	15e6 <usart_init+0x1aa>
	usart_hw->CTRLA.reg = ctrla;
    15ec:	4643      	mov	r3, r8
    15ee:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    15f0:	ab0e      	add	r3, sp, #56	; 0x38
    15f2:	2280      	movs	r2, #128	; 0x80
    15f4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    15f6:	2200      	movs	r2, #0
    15f8:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    15fa:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    15fc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    15fe:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1600:	930a      	str	r3, [sp, #40]	; 0x28
    1602:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1604:	930b      	str	r3, [sp, #44]	; 0x2c
    1606:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1608:	930c      	str	r3, [sp, #48]	; 0x30
    160a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    160c:	9302      	str	r3, [sp, #8]
    160e:	930d      	str	r3, [sp, #52]	; 0x34
    1610:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1612:	ae0a      	add	r6, sp, #40	; 0x28
    1614:	e063      	b.n	16de <usart_init+0x2a2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1616:	2308      	movs	r3, #8
    1618:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    161a:	3b07      	subs	r3, #7
    161c:	9307      	str	r3, [sp, #28]
    161e:	e77c      	b.n	151a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1620:	6833      	ldr	r3, [r6, #0]
    1622:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1624:	68f3      	ldr	r3, [r6, #12]
    1626:	469b      	mov	fp, r3
		config->sample_adjustment |
    1628:	6973      	ldr	r3, [r6, #20]
    162a:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    162c:	7e33      	ldrb	r3, [r6, #24]
    162e:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1630:	2326      	movs	r3, #38	; 0x26
    1632:	5cf3      	ldrb	r3, [r6, r3]
    1634:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1636:	6873      	ldr	r3, [r6, #4]
    1638:	4699      	mov	r9, r3
	switch (transfer_mode)
    163a:	2b00      	cmp	r3, #0
    163c:	d018      	beq.n	1670 <usart_init+0x234>
    163e:	2380      	movs	r3, #128	; 0x80
    1640:	055b      	lsls	r3, r3, #21
    1642:	4599      	cmp	r9, r3
    1644:	d001      	beq.n	164a <usart_init+0x20e>
	enum status_code status_code = STATUS_OK;
    1646:	2000      	movs	r0, #0
    1648:	e025      	b.n	1696 <usart_init+0x25a>
			if (!config->use_external_clock) {
    164a:	2327      	movs	r3, #39	; 0x27
    164c:	5cf3      	ldrb	r3, [r6, r3]
    164e:	2b00      	cmp	r3, #0
    1650:	d000      	beq.n	1654 <usart_init+0x218>
    1652:	e777      	b.n	1544 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1654:	6a33      	ldr	r3, [r6, #32]
    1656:	001f      	movs	r7, r3
    1658:	b2c0      	uxtb	r0, r0
    165a:	4b40      	ldr	r3, [pc, #256]	; (175c <usart_init+0x320>)
    165c:	4798      	blx	r3
    165e:	0001      	movs	r1, r0
    1660:	220e      	movs	r2, #14
    1662:	ab06      	add	r3, sp, #24
    1664:	469c      	mov	ip, r3
    1666:	4462      	add	r2, ip
    1668:	0038      	movs	r0, r7
    166a:	4b3d      	ldr	r3, [pc, #244]	; (1760 <usart_init+0x324>)
    166c:	4798      	blx	r3
    166e:	e012      	b.n	1696 <usart_init+0x25a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1670:	2308      	movs	r3, #8
    1672:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1674:	2300      	movs	r3, #0
    1676:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1678:	2327      	movs	r3, #39	; 0x27
    167a:	5cf3      	ldrb	r3, [r6, r3]
    167c:	2b00      	cmp	r3, #0
    167e:	d00e      	beq.n	169e <usart_init+0x262>
				status_code =
    1680:	9b06      	ldr	r3, [sp, #24]
    1682:	9300      	str	r3, [sp, #0]
    1684:	9b07      	ldr	r3, [sp, #28]
    1686:	220e      	movs	r2, #14
    1688:	a906      	add	r1, sp, #24
    168a:	468c      	mov	ip, r1
    168c:	4462      	add	r2, ip
    168e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1690:	6a30      	ldr	r0, [r6, #32]
    1692:	4f34      	ldr	r7, [pc, #208]	; (1764 <usart_init+0x328>)
    1694:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1696:	2800      	cmp	r0, #0
    1698:	d000      	beq.n	169c <usart_init+0x260>
    169a:	e6e2      	b.n	1462 <usart_init+0x26>
    169c:	e752      	b.n	1544 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    169e:	6a33      	ldr	r3, [r6, #32]
    16a0:	001f      	movs	r7, r3
    16a2:	b2c0      	uxtb	r0, r0
    16a4:	4b2d      	ldr	r3, [pc, #180]	; (175c <usart_init+0x320>)
    16a6:	4798      	blx	r3
    16a8:	0001      	movs	r1, r0
				status_code =
    16aa:	9b06      	ldr	r3, [sp, #24]
    16ac:	9300      	str	r3, [sp, #0]
    16ae:	9b07      	ldr	r3, [sp, #28]
    16b0:	220e      	movs	r2, #14
    16b2:	a806      	add	r0, sp, #24
    16b4:	4684      	mov	ip, r0
    16b6:	4462      	add	r2, ip
    16b8:	0038      	movs	r0, r7
    16ba:	4f2a      	ldr	r7, [pc, #168]	; (1764 <usart_init+0x328>)
    16bc:	47b8      	blx	r7
    16be:	e7ea      	b.n	1696 <usart_init+0x25a>
		if(config->lin_slave_enable) {
    16c0:	7ef3      	ldrb	r3, [r6, #27]
    16c2:	2b00      	cmp	r3, #0
    16c4:	d100      	bne.n	16c8 <usart_init+0x28c>
    16c6:	e77d      	b.n	15c4 <usart_init+0x188>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    16c8:	2380      	movs	r3, #128	; 0x80
    16ca:	04db      	lsls	r3, r3, #19
    16cc:	431f      	orrs	r7, r3
    16ce:	e779      	b.n	15c4 <usart_init+0x188>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    16d0:	0020      	movs	r0, r4
    16d2:	4b25      	ldr	r3, [pc, #148]	; (1768 <usart_init+0x32c>)
    16d4:	4798      	blx	r3
    16d6:	e007      	b.n	16e8 <usart_init+0x2ac>
    16d8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    16da:	2f04      	cmp	r7, #4
    16dc:	d00d      	beq.n	16fa <usart_init+0x2be>
    16de:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    16e0:	00bb      	lsls	r3, r7, #2
    16e2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    16e4:	2800      	cmp	r0, #0
    16e6:	d0f3      	beq.n	16d0 <usart_init+0x294>
		if (current_pinmux != PINMUX_UNUSED) {
    16e8:	1c43      	adds	r3, r0, #1
    16ea:	d0f5      	beq.n	16d8 <usart_init+0x29c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    16ec:	a90e      	add	r1, sp, #56	; 0x38
    16ee:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    16f0:	0c00      	lsrs	r0, r0, #16
    16f2:	b2c0      	uxtb	r0, r0
    16f4:	4b1d      	ldr	r3, [pc, #116]	; (176c <usart_init+0x330>)
    16f6:	4798      	blx	r3
    16f8:	e7ee      	b.n	16d8 <usart_init+0x29c>
		module->callback[i]            = NULL;
    16fa:	2300      	movs	r3, #0
    16fc:	60eb      	str	r3, [r5, #12]
    16fe:	612b      	str	r3, [r5, #16]
    1700:	616b      	str	r3, [r5, #20]
    1702:	61ab      	str	r3, [r5, #24]
    1704:	61eb      	str	r3, [r5, #28]
    1706:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1708:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    170a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    170c:	2200      	movs	r2, #0
    170e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1710:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1712:	3330      	adds	r3, #48	; 0x30
    1714:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1716:	3301      	adds	r3, #1
    1718:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    171a:	3301      	adds	r3, #1
    171c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    171e:	3301      	adds	r3, #1
    1720:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1722:	6828      	ldr	r0, [r5, #0]
    1724:	4b07      	ldr	r3, [pc, #28]	; (1744 <usart_init+0x308>)
    1726:	4798      	blx	r3
    1728:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    172a:	4911      	ldr	r1, [pc, #68]	; (1770 <usart_init+0x334>)
    172c:	4b11      	ldr	r3, [pc, #68]	; (1774 <usart_init+0x338>)
    172e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1730:	00a4      	lsls	r4, r4, #2
    1732:	4b11      	ldr	r3, [pc, #68]	; (1778 <usart_init+0x33c>)
    1734:	50e5      	str	r5, [r4, r3]
	return status_code;
    1736:	2000      	movs	r0, #0
    1738:	e693      	b.n	1462 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    173a:	2310      	movs	r3, #16
    173c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    173e:	2300      	movs	r3, #0
    1740:	9307      	str	r3, [sp, #28]
    1742:	e6ea      	b.n	151a <usart_init+0xde>
    1744:	00000f7d 	.word	0x00000f7d
    1748:	40000400 	.word	0x40000400
    174c:	000021e5 	.word	0x000021e5
    1750:	00002159 	.word	0x00002159
    1754:	00000db9 	.word	0x00000db9
    1758:	41002000 	.word	0x41002000
    175c:	00002201 	.word	0x00002201
    1760:	00000bc1 	.word	0x00000bc1
    1764:	00000be9 	.word	0x00000be9
    1768:	00000e05 	.word	0x00000e05
    176c:	000022dd 	.word	0x000022dd
    1770:	000018fd 	.word	0x000018fd
    1774:	00000fb9 	.word	0x00000fb9
    1778:	200008f0 	.word	0x200008f0

0000177c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    177c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    177e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1780:	2a00      	cmp	r2, #0
    1782:	d101      	bne.n	1788 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1784:	0018      	movs	r0, r3
    1786:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1788:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    178a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    178c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    178e:	2a00      	cmp	r2, #0
    1790:	d1f8      	bne.n	1784 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1792:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1794:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1796:	2a00      	cmp	r2, #0
    1798:	d1fc      	bne.n	1794 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    179a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    179c:	2102      	movs	r1, #2
    179e:	7e1a      	ldrb	r2, [r3, #24]
    17a0:	420a      	tst	r2, r1
    17a2:	d0fc      	beq.n	179e <usart_write_wait+0x22>
	return STATUS_OK;
    17a4:	2300      	movs	r3, #0
    17a6:	e7ed      	b.n	1784 <usart_write_wait+0x8>

000017a8 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    17a8:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    17aa:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    17ac:	2a00      	cmp	r2, #0
    17ae:	d101      	bne.n	17b4 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    17b0:	0018      	movs	r0, r3
    17b2:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    17b4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    17b6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    17b8:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    17ba:	2a00      	cmp	r2, #0
    17bc:	d1f8      	bne.n	17b0 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    17be:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    17c0:	7e10      	ldrb	r0, [r2, #24]
    17c2:	0740      	lsls	r0, r0, #29
    17c4:	d5f4      	bpl.n	17b0 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    17c6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    17c8:	2b00      	cmp	r3, #0
    17ca:	d1fc      	bne.n	17c6 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    17cc:	8b53      	ldrh	r3, [r2, #26]
    17ce:	b2db      	uxtb	r3, r3
	if (error_code) {
    17d0:	0698      	lsls	r0, r3, #26
    17d2:	d01d      	beq.n	1810 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    17d4:	0798      	lsls	r0, r3, #30
    17d6:	d503      	bpl.n	17e0 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    17d8:	2302      	movs	r3, #2
    17da:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    17dc:	3318      	adds	r3, #24
    17de:	e7e7      	b.n	17b0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    17e0:	0758      	lsls	r0, r3, #29
    17e2:	d503      	bpl.n	17ec <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    17e4:	2304      	movs	r3, #4
    17e6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    17e8:	331a      	adds	r3, #26
    17ea:	e7e1      	b.n	17b0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    17ec:	07d8      	lsls	r0, r3, #31
    17ee:	d503      	bpl.n	17f8 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    17f0:	2301      	movs	r3, #1
    17f2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    17f4:	3312      	adds	r3, #18
    17f6:	e7db      	b.n	17b0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    17f8:	06d8      	lsls	r0, r3, #27
    17fa:	d503      	bpl.n	1804 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    17fc:	2310      	movs	r3, #16
    17fe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1800:	3332      	adds	r3, #50	; 0x32
    1802:	e7d5      	b.n	17b0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1804:	069b      	lsls	r3, r3, #26
    1806:	d503      	bpl.n	1810 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1808:	2320      	movs	r3, #32
    180a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    180c:	3321      	adds	r3, #33	; 0x21
    180e:	e7cf      	b.n	17b0 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1810:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1812:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1814:	2300      	movs	r3, #0
    1816:	e7cb      	b.n	17b0 <usart_read_wait+0x8>

00001818 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    181a:	0006      	movs	r6, r0
    181c:	000c      	movs	r4, r1
    181e:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1820:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    1822:	4b0a      	ldr	r3, [pc, #40]	; (184c <_usart_write_buffer+0x34>)
    1824:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    1826:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    1828:	b29b      	uxth	r3, r3
    182a:	2b00      	cmp	r3, #0
    182c:	d003      	beq.n	1836 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    182e:	4b08      	ldr	r3, [pc, #32]	; (1850 <_usart_write_buffer+0x38>)
    1830:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1832:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    1834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    1836:	85f5      	strh	r5, [r6, #46]	; 0x2e
    1838:	4b05      	ldr	r3, [pc, #20]	; (1850 <_usart_write_buffer+0x38>)
    183a:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    183c:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    183e:	2205      	movs	r2, #5
    1840:	2333      	movs	r3, #51	; 0x33
    1842:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    1844:	3b32      	subs	r3, #50	; 0x32
    1846:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    1848:	2000      	movs	r0, #0
    184a:	e7f3      	b.n	1834 <_usart_write_buffer+0x1c>
    184c:	000008c9 	.word	0x000008c9
    1850:	00000909 	.word	0x00000909

00001854 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1856:	0004      	movs	r4, r0
    1858:	000d      	movs	r5, r1
    185a:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    185c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    185e:	4b0f      	ldr	r3, [pc, #60]	; (189c <_usart_read_buffer+0x48>)
    1860:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    1862:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1864:	b29b      	uxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	d003      	beq.n	1872 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    186a:	4b0d      	ldr	r3, [pc, #52]	; (18a0 <_usart_read_buffer+0x4c>)
    186c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    186e:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    1870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    1872:	85a6      	strh	r6, [r4, #44]	; 0x2c
    1874:	4b0a      	ldr	r3, [pc, #40]	; (18a0 <_usart_read_buffer+0x4c>)
    1876:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    1878:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    187a:	2205      	movs	r2, #5
    187c:	2332      	movs	r3, #50	; 0x32
    187e:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1880:	3b2e      	subs	r3, #46	; 0x2e
    1882:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    1884:	7a23      	ldrb	r3, [r4, #8]
    1886:	2b00      	cmp	r3, #0
    1888:	d001      	beq.n	188e <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    188a:	2320      	movs	r3, #32
    188c:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    188e:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    1890:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    1892:	2b00      	cmp	r3, #0
    1894:	d0ec      	beq.n	1870 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    1896:	2308      	movs	r3, #8
    1898:	75bb      	strb	r3, [r7, #22]
    189a:	e7e9      	b.n	1870 <_usart_read_buffer+0x1c>
    189c:	000008c9 	.word	0x000008c9
    18a0:	00000909 	.word	0x00000909

000018a4 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    18a4:	1c93      	adds	r3, r2, #2
    18a6:	009b      	lsls	r3, r3, #2
    18a8:	18c3      	adds	r3, r0, r3
    18aa:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    18ac:	2130      	movs	r1, #48	; 0x30
    18ae:	2301      	movs	r3, #1
    18b0:	4093      	lsls	r3, r2
    18b2:	001a      	movs	r2, r3
    18b4:	5c43      	ldrb	r3, [r0, r1]
    18b6:	4313      	orrs	r3, r2
    18b8:	5443      	strb	r3, [r0, r1]
}
    18ba:	4770      	bx	lr

000018bc <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    18bc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    18be:	2317      	movs	r3, #23
	if (length == 0) {
    18c0:	2a00      	cmp	r2, #0
    18c2:	d101      	bne.n	18c8 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    18c4:	0018      	movs	r0, r3
    18c6:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    18c8:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    18ca:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    18cc:	2c00      	cmp	r4, #0
    18ce:	d0f9      	beq.n	18c4 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    18d0:	4b01      	ldr	r3, [pc, #4]	; (18d8 <usart_write_buffer_job+0x1c>)
    18d2:	4798      	blx	r3
    18d4:	0003      	movs	r3, r0
    18d6:	e7f5      	b.n	18c4 <usart_write_buffer_job+0x8>
    18d8:	00001819 	.word	0x00001819

000018dc <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    18dc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    18de:	2317      	movs	r3, #23
	if (length == 0) {
    18e0:	2a00      	cmp	r2, #0
    18e2:	d101      	bne.n	18e8 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    18e4:	0018      	movs	r0, r3
    18e6:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    18e8:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    18ea:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    18ec:	2c00      	cmp	r4, #0
    18ee:	d0f9      	beq.n	18e4 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    18f0:	4b01      	ldr	r3, [pc, #4]	; (18f8 <usart_read_buffer_job+0x1c>)
    18f2:	4798      	blx	r3
    18f4:	0003      	movs	r3, r0
    18f6:	e7f5      	b.n	18e4 <usart_read_buffer_job+0x8>
    18f8:	00001855 	.word	0x00001855

000018fc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    18fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    18fe:	0080      	lsls	r0, r0, #2
    1900:	4b62      	ldr	r3, [pc, #392]	; (1a8c <_usart_interrupt_handler+0x190>)
    1902:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1904:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1906:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1908:	2b00      	cmp	r3, #0
    190a:	d1fc      	bne.n	1906 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    190c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    190e:	7da6      	ldrb	r6, [r4, #22]
    1910:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1912:	2330      	movs	r3, #48	; 0x30
    1914:	5ceb      	ldrb	r3, [r5, r3]
    1916:	2231      	movs	r2, #49	; 0x31
    1918:	5caf      	ldrb	r7, [r5, r2]
    191a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    191c:	07f3      	lsls	r3, r6, #31
    191e:	d522      	bpl.n	1966 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1920:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1922:	b29b      	uxth	r3, r3
    1924:	2b00      	cmp	r3, #0
    1926:	d01c      	beq.n	1962 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1928:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    192a:	7813      	ldrb	r3, [r2, #0]
    192c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    192e:	1c51      	adds	r1, r2, #1
    1930:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1932:	7969      	ldrb	r1, [r5, #5]
    1934:	2901      	cmp	r1, #1
    1936:	d00e      	beq.n	1956 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1938:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    193a:	05db      	lsls	r3, r3, #23
    193c:	0ddb      	lsrs	r3, r3, #23
    193e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1940:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1942:	3b01      	subs	r3, #1
    1944:	b29b      	uxth	r3, r3
    1946:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1948:	2b00      	cmp	r3, #0
    194a:	d10c      	bne.n	1966 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    194c:	3301      	adds	r3, #1
    194e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1950:	3301      	adds	r3, #1
    1952:	75a3      	strb	r3, [r4, #22]
    1954:	e007      	b.n	1966 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1956:	7851      	ldrb	r1, [r2, #1]
    1958:	0209      	lsls	r1, r1, #8
    195a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    195c:	3202      	adds	r2, #2
    195e:	62aa      	str	r2, [r5, #40]	; 0x28
    1960:	e7eb      	b.n	193a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1962:	2301      	movs	r3, #1
    1964:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1966:	07b3      	lsls	r3, r6, #30
    1968:	d506      	bpl.n	1978 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    196a:	2302      	movs	r3, #2
    196c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    196e:	2200      	movs	r2, #0
    1970:	3331      	adds	r3, #49	; 0x31
    1972:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1974:	07fb      	lsls	r3, r7, #31
    1976:	d41a      	bmi.n	19ae <_usart_interrupt_handler+0xb2>

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1978:	0773      	lsls	r3, r6, #29
    197a:	d565      	bpl.n	1a48 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    197c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    197e:	b29b      	uxth	r3, r3
    1980:	2b00      	cmp	r3, #0
    1982:	d05f      	beq.n	1a44 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1984:	8b63      	ldrh	r3, [r4, #26]
    1986:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1988:	071a      	lsls	r2, r3, #28
    198a:	d414      	bmi.n	19b6 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    198c:	223f      	movs	r2, #63	; 0x3f
    198e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1990:	2b00      	cmp	r3, #0
    1992:	d034      	beq.n	19fe <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1994:	079a      	lsls	r2, r3, #30
    1996:	d511      	bpl.n	19bc <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1998:	221a      	movs	r2, #26
    199a:	2332      	movs	r3, #50	; 0x32
    199c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    199e:	3b30      	subs	r3, #48	; 0x30
    19a0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    19a2:	077b      	lsls	r3, r7, #29
    19a4:	d550      	bpl.n	1a48 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    19a6:	0028      	movs	r0, r5
    19a8:	696b      	ldr	r3, [r5, #20]
    19aa:	4798      	blx	r3
    19ac:	e04c      	b.n	1a48 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    19ae:	0028      	movs	r0, r5
    19b0:	68eb      	ldr	r3, [r5, #12]
    19b2:	4798      	blx	r3
    19b4:	e7e0      	b.n	1978 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    19b6:	2237      	movs	r2, #55	; 0x37
    19b8:	4013      	ands	r3, r2
    19ba:	e7e9      	b.n	1990 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    19bc:	075a      	lsls	r2, r3, #29
    19be:	d505      	bpl.n	19cc <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    19c0:	221e      	movs	r2, #30
    19c2:	2332      	movs	r3, #50	; 0x32
    19c4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    19c6:	3b2e      	subs	r3, #46	; 0x2e
    19c8:	8363      	strh	r3, [r4, #26]
    19ca:	e7ea      	b.n	19a2 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    19cc:	07da      	lsls	r2, r3, #31
    19ce:	d505      	bpl.n	19dc <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    19d0:	2213      	movs	r2, #19
    19d2:	2332      	movs	r3, #50	; 0x32
    19d4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    19d6:	3b31      	subs	r3, #49	; 0x31
    19d8:	8363      	strh	r3, [r4, #26]
    19da:	e7e2      	b.n	19a2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    19dc:	06da      	lsls	r2, r3, #27
    19de:	d505      	bpl.n	19ec <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    19e0:	2242      	movs	r2, #66	; 0x42
    19e2:	2332      	movs	r3, #50	; 0x32
    19e4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    19e6:	3b22      	subs	r3, #34	; 0x22
    19e8:	8363      	strh	r3, [r4, #26]
    19ea:	e7da      	b.n	19a2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    19ec:	2220      	movs	r2, #32
    19ee:	421a      	tst	r2, r3
    19f0:	d0d7      	beq.n	19a2 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    19f2:	3221      	adds	r2, #33	; 0x21
    19f4:	2332      	movs	r3, #50	; 0x32
    19f6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    19f8:	3b12      	subs	r3, #18
    19fa:	8363      	strh	r3, [r4, #26]
    19fc:	e7d1      	b.n	19a2 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    19fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1a00:	05db      	lsls	r3, r3, #23
    1a02:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1a04:	b2da      	uxtb	r2, r3
    1a06:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1a08:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1a0a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1a0c:	1c51      	adds	r1, r2, #1
    1a0e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1a10:	7969      	ldrb	r1, [r5, #5]
    1a12:	2901      	cmp	r1, #1
    1a14:	d010      	beq.n	1a38 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1a16:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1a18:	3b01      	subs	r3, #1
    1a1a:	b29b      	uxth	r3, r3
    1a1c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1a1e:	2b00      	cmp	r3, #0
    1a20:	d112      	bne.n	1a48 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1a22:	3304      	adds	r3, #4
    1a24:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1a26:	2200      	movs	r2, #0
    1a28:	332e      	adds	r3, #46	; 0x2e
    1a2a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1a2c:	07bb      	lsls	r3, r7, #30
    1a2e:	d50b      	bpl.n	1a48 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1a30:	0028      	movs	r0, r5
    1a32:	692b      	ldr	r3, [r5, #16]
    1a34:	4798      	blx	r3
    1a36:	e007      	b.n	1a48 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1a38:	0a1b      	lsrs	r3, r3, #8
    1a3a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1a3c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1a3e:	3301      	adds	r3, #1
    1a40:	626b      	str	r3, [r5, #36]	; 0x24
    1a42:	e7e8      	b.n	1a16 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1a44:	2304      	movs	r3, #4
    1a46:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1a48:	06f3      	lsls	r3, r6, #27
    1a4a:	d504      	bpl.n	1a56 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1a4c:	2310      	movs	r3, #16
    1a4e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1a50:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1a52:	06fb      	lsls	r3, r7, #27
    1a54:	d40e      	bmi.n	1a74 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1a56:	06b3      	lsls	r3, r6, #26
    1a58:	d504      	bpl.n	1a64 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1a5a:	2320      	movs	r3, #32
    1a5c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1a5e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1a60:	073b      	lsls	r3, r7, #28
    1a62:	d40b      	bmi.n	1a7c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1a64:	0733      	lsls	r3, r6, #28
    1a66:	d504      	bpl.n	1a72 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1a68:	2308      	movs	r3, #8
    1a6a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1a6c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1a6e:	06bb      	lsls	r3, r7, #26
    1a70:	d408      	bmi.n	1a84 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1a74:	0028      	movs	r0, r5
    1a76:	69eb      	ldr	r3, [r5, #28]
    1a78:	4798      	blx	r3
    1a7a:	e7ec      	b.n	1a56 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1a7c:	0028      	movs	r0, r5
    1a7e:	69ab      	ldr	r3, [r5, #24]
    1a80:	4798      	blx	r3
    1a82:	e7ef      	b.n	1a64 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1a84:	6a2b      	ldr	r3, [r5, #32]
    1a86:	0028      	movs	r0, r5
    1a88:	4798      	blx	r3
}
    1a8a:	e7f2      	b.n	1a72 <_usart_interrupt_handler+0x176>
    1a8c:	200008f0 	.word	0x200008f0

00001a90 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1a90:	b510      	push	{r4, lr}
	switch (clock_source) {
    1a92:	2808      	cmp	r0, #8
    1a94:	d803      	bhi.n	1a9e <system_clock_source_get_hz+0xe>
    1a96:	0080      	lsls	r0, r0, #2
    1a98:	4b1b      	ldr	r3, [pc, #108]	; (1b08 <system_clock_source_get_hz+0x78>)
    1a9a:	581b      	ldr	r3, [r3, r0]
    1a9c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1a9e:	2000      	movs	r0, #0
    1aa0:	e030      	b.n	1b04 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    1aa2:	4b1a      	ldr	r3, [pc, #104]	; (1b0c <system_clock_source_get_hz+0x7c>)
    1aa4:	6918      	ldr	r0, [r3, #16]
    1aa6:	e02d      	b.n	1b04 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1aa8:	4b19      	ldr	r3, [pc, #100]	; (1b10 <system_clock_source_get_hz+0x80>)
    1aaa:	6a1b      	ldr	r3, [r3, #32]
    1aac:	059b      	lsls	r3, r3, #22
    1aae:	0f9b      	lsrs	r3, r3, #30
    1ab0:	4818      	ldr	r0, [pc, #96]	; (1b14 <system_clock_source_get_hz+0x84>)
    1ab2:	40d8      	lsrs	r0, r3
    1ab4:	e026      	b.n	1b04 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    1ab6:	4b15      	ldr	r3, [pc, #84]	; (1b0c <system_clock_source_get_hz+0x7c>)
    1ab8:	6958      	ldr	r0, [r3, #20]
    1aba:	e023      	b.n	1b04 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1abc:	4b13      	ldr	r3, [pc, #76]	; (1b0c <system_clock_source_get_hz+0x7c>)
    1abe:	681b      	ldr	r3, [r3, #0]
			return 0;
    1ac0:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1ac2:	079b      	lsls	r3, r3, #30
    1ac4:	d51e      	bpl.n	1b04 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1ac6:	4912      	ldr	r1, [pc, #72]	; (1b10 <system_clock_source_get_hz+0x80>)
    1ac8:	2210      	movs	r2, #16
    1aca:	68cb      	ldr	r3, [r1, #12]
    1acc:	421a      	tst	r2, r3
    1ace:	d0fc      	beq.n	1aca <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1ad0:	4b0e      	ldr	r3, [pc, #56]	; (1b0c <system_clock_source_get_hz+0x7c>)
    1ad2:	681b      	ldr	r3, [r3, #0]
    1ad4:	075b      	lsls	r3, r3, #29
    1ad6:	d401      	bmi.n	1adc <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1ad8:	480f      	ldr	r0, [pc, #60]	; (1b18 <system_clock_source_get_hz+0x88>)
    1ada:	e013      	b.n	1b04 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1adc:	2000      	movs	r0, #0
    1ade:	4b0f      	ldr	r3, [pc, #60]	; (1b1c <system_clock_source_get_hz+0x8c>)
    1ae0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1ae2:	4b0a      	ldr	r3, [pc, #40]	; (1b0c <system_clock_source_get_hz+0x7c>)
    1ae4:	689b      	ldr	r3, [r3, #8]
    1ae6:	041b      	lsls	r3, r3, #16
    1ae8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1aea:	4358      	muls	r0, r3
    1aec:	e00a      	b.n	1b04 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1aee:	2350      	movs	r3, #80	; 0x50
    1af0:	4a07      	ldr	r2, [pc, #28]	; (1b10 <system_clock_source_get_hz+0x80>)
    1af2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1af4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1af6:	075b      	lsls	r3, r3, #29
    1af8:	d504      	bpl.n	1b04 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1afa:	4b04      	ldr	r3, [pc, #16]	; (1b0c <system_clock_source_get_hz+0x7c>)
    1afc:	68d8      	ldr	r0, [r3, #12]
    1afe:	e001      	b.n	1b04 <system_clock_source_get_hz+0x74>
		return 32768UL;
    1b00:	2080      	movs	r0, #128	; 0x80
    1b02:	0200      	lsls	r0, r0, #8
	}
}
    1b04:	bd10      	pop	{r4, pc}
    1b06:	46c0      	nop			; (mov r8, r8)
    1b08:	00008948 	.word	0x00008948
    1b0c:	20000228 	.word	0x20000228
    1b10:	40000800 	.word	0x40000800
    1b14:	007a1200 	.word	0x007a1200
    1b18:	02dc6c00 	.word	0x02dc6c00
    1b1c:	00002201 	.word	0x00002201

00001b20 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1b20:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1b22:	490c      	ldr	r1, [pc, #48]	; (1b54 <system_clock_source_osc8m_set_config+0x34>)
    1b24:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1b26:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1b28:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1b2a:	7840      	ldrb	r0, [r0, #1]
    1b2c:	2201      	movs	r2, #1
    1b2e:	4010      	ands	r0, r2
    1b30:	0180      	lsls	r0, r0, #6
    1b32:	2640      	movs	r6, #64	; 0x40
    1b34:	43b3      	bics	r3, r6
    1b36:	4303      	orrs	r3, r0
    1b38:	402a      	ands	r2, r5
    1b3a:	01d2      	lsls	r2, r2, #7
    1b3c:	2080      	movs	r0, #128	; 0x80
    1b3e:	4383      	bics	r3, r0
    1b40:	4313      	orrs	r3, r2
    1b42:	2203      	movs	r2, #3
    1b44:	4022      	ands	r2, r4
    1b46:	0212      	lsls	r2, r2, #8
    1b48:	4803      	ldr	r0, [pc, #12]	; (1b58 <system_clock_source_osc8m_set_config+0x38>)
    1b4a:	4003      	ands	r3, r0
    1b4c:	4313      	orrs	r3, r2
    1b4e:	620b      	str	r3, [r1, #32]
}
    1b50:	bd70      	pop	{r4, r5, r6, pc}
    1b52:	46c0      	nop			; (mov r8, r8)
    1b54:	40000800 	.word	0x40000800
    1b58:	fffffcff 	.word	0xfffffcff

00001b5c <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b5e:	46ce      	mov	lr, r9
    1b60:	4647      	mov	r7, r8
    1b62:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1b64:	4b19      	ldr	r3, [pc, #100]	; (1bcc <system_clock_source_osc32k_set_config+0x70>)
    1b66:	4699      	mov	r9, r3
    1b68:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    1b6a:	7841      	ldrb	r1, [r0, #1]
    1b6c:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1b6e:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1b70:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1b72:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    1b74:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    1b76:	7880      	ldrb	r0, [r0, #2]
    1b78:	2101      	movs	r1, #1
    1b7a:	4008      	ands	r0, r1
    1b7c:	0080      	lsls	r0, r0, #2
    1b7e:	2204      	movs	r2, #4
    1b80:	4393      	bics	r3, r2
    1b82:	4303      	orrs	r3, r0
    1b84:	4660      	mov	r0, ip
    1b86:	4008      	ands	r0, r1
    1b88:	00c0      	lsls	r0, r0, #3
    1b8a:	3204      	adds	r2, #4
    1b8c:	4393      	bics	r3, r2
    1b8e:	4303      	orrs	r3, r0
    1b90:	0038      	movs	r0, r7
    1b92:	4008      	ands	r0, r1
    1b94:	0180      	lsls	r0, r0, #6
    1b96:	2740      	movs	r7, #64	; 0x40
    1b98:	43bb      	bics	r3, r7
    1b9a:	4303      	orrs	r3, r0
    1b9c:	0030      	movs	r0, r6
    1b9e:	4008      	ands	r0, r1
    1ba0:	01c0      	lsls	r0, r0, #7
    1ba2:	2680      	movs	r6, #128	; 0x80
    1ba4:	43b3      	bics	r3, r6
    1ba6:	4303      	orrs	r3, r0
    1ba8:	2007      	movs	r0, #7
    1baa:	4005      	ands	r5, r0
    1bac:	022d      	lsls	r5, r5, #8
    1bae:	4808      	ldr	r0, [pc, #32]	; (1bd0 <system_clock_source_osc32k_set_config+0x74>)
    1bb0:	4003      	ands	r3, r0
    1bb2:	432b      	orrs	r3, r5
    1bb4:	4021      	ands	r1, r4
    1bb6:	0309      	lsls	r1, r1, #12
    1bb8:	4806      	ldr	r0, [pc, #24]	; (1bd4 <system_clock_source_osc32k_set_config+0x78>)
    1bba:	4003      	ands	r3, r0
    1bbc:	430b      	orrs	r3, r1
    1bbe:	464a      	mov	r2, r9
    1bc0:	6193      	str	r3, [r2, #24]
}
    1bc2:	bc0c      	pop	{r2, r3}
    1bc4:	4690      	mov	r8, r2
    1bc6:	4699      	mov	r9, r3
    1bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bca:	46c0      	nop			; (mov r8, r8)
    1bcc:	40000800 	.word	0x40000800
    1bd0:	fffff8ff 	.word	0xfffff8ff
    1bd4:	ffffefff 	.word	0xffffefff

00001bd8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bda:	46de      	mov	lr, fp
    1bdc:	4657      	mov	r7, sl
    1bde:	464e      	mov	r6, r9
    1be0:	4645      	mov	r5, r8
    1be2:	b5e0      	push	{r5, r6, r7, lr}
    1be4:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1be6:	4b26      	ldr	r3, [pc, #152]	; (1c80 <system_clock_source_xosc32k_set_config+0xa8>)
    1be8:	469b      	mov	fp, r3
    1bea:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1bec:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1bee:	7800      	ldrb	r0, [r0, #0]
    1bf0:	4242      	negs	r2, r0
    1bf2:	4142      	adcs	r2, r0
    1bf4:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1bf6:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1bf8:	78ca      	ldrb	r2, [r1, #3]
    1bfa:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1bfc:	790a      	ldrb	r2, [r1, #4]
    1bfe:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1c00:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1c02:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1c04:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1c06:	688a      	ldr	r2, [r1, #8]
    1c08:	491e      	ldr	r1, [pc, #120]	; (1c84 <system_clock_source_xosc32k_set_config+0xac>)
    1c0a:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1c0c:	2101      	movs	r1, #1
    1c0e:	464a      	mov	r2, r9
    1c10:	0092      	lsls	r2, r2, #2
    1c12:	4691      	mov	r9, r2
    1c14:	2204      	movs	r2, #4
    1c16:	4393      	bics	r3, r2
    1c18:	464a      	mov	r2, r9
    1c1a:	4313      	orrs	r3, r2
    1c1c:	4642      	mov	r2, r8
    1c1e:	400a      	ands	r2, r1
    1c20:	00d2      	lsls	r2, r2, #3
    1c22:	4690      	mov	r8, r2
    1c24:	2208      	movs	r2, #8
    1c26:	4393      	bics	r3, r2
    1c28:	4642      	mov	r2, r8
    1c2a:	4313      	orrs	r3, r2
    1c2c:	4662      	mov	r2, ip
    1c2e:	400a      	ands	r2, r1
    1c30:	0112      	lsls	r2, r2, #4
    1c32:	4694      	mov	ip, r2
    1c34:	2210      	movs	r2, #16
    1c36:	4393      	bics	r3, r2
    1c38:	4662      	mov	r2, ip
    1c3a:	4313      	orrs	r3, r2
    1c3c:	4008      	ands	r0, r1
    1c3e:	0140      	lsls	r0, r0, #5
    1c40:	2220      	movs	r2, #32
    1c42:	4393      	bics	r3, r2
    1c44:	4303      	orrs	r3, r0
    1c46:	400f      	ands	r7, r1
    1c48:	01bf      	lsls	r7, r7, #6
    1c4a:	2040      	movs	r0, #64	; 0x40
    1c4c:	4383      	bics	r3, r0
    1c4e:	433b      	orrs	r3, r7
    1c50:	400e      	ands	r6, r1
    1c52:	01f6      	lsls	r6, r6, #7
    1c54:	3040      	adds	r0, #64	; 0x40
    1c56:	4383      	bics	r3, r0
    1c58:	4333      	orrs	r3, r6
    1c5a:	3879      	subs	r0, #121	; 0x79
    1c5c:	4005      	ands	r5, r0
    1c5e:	022d      	lsls	r5, r5, #8
    1c60:	4809      	ldr	r0, [pc, #36]	; (1c88 <system_clock_source_xosc32k_set_config+0xb0>)
    1c62:	4003      	ands	r3, r0
    1c64:	432b      	orrs	r3, r5
    1c66:	4021      	ands	r1, r4
    1c68:	0309      	lsls	r1, r1, #12
    1c6a:	4808      	ldr	r0, [pc, #32]	; (1c8c <system_clock_source_xosc32k_set_config+0xb4>)
    1c6c:	4003      	ands	r3, r0
    1c6e:	430b      	orrs	r3, r1
    1c70:	465a      	mov	r2, fp
    1c72:	8293      	strh	r3, [r2, #20]
}
    1c74:	bc3c      	pop	{r2, r3, r4, r5}
    1c76:	4690      	mov	r8, r2
    1c78:	4699      	mov	r9, r3
    1c7a:	46a2      	mov	sl, r4
    1c7c:	46ab      	mov	fp, r5
    1c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c80:	40000800 	.word	0x40000800
    1c84:	20000228 	.word	0x20000228
    1c88:	fffff8ff 	.word	0xfffff8ff
    1c8c:	ffffefff 	.word	0xffffefff

00001c90 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1c90:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1c92:	7a03      	ldrb	r3, [r0, #8]
    1c94:	069b      	lsls	r3, r3, #26
    1c96:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1c98:	8942      	ldrh	r2, [r0, #10]
    1c9a:	0592      	lsls	r2, r2, #22
    1c9c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1c9e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1ca0:	4918      	ldr	r1, [pc, #96]	; (1d04 <system_clock_source_dfll_set_config+0x74>)
    1ca2:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1ca4:	7983      	ldrb	r3, [r0, #6]
    1ca6:	79c2      	ldrb	r2, [r0, #7]
    1ca8:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1caa:	8842      	ldrh	r2, [r0, #2]
    1cac:	8884      	ldrh	r4, [r0, #4]
    1cae:	4322      	orrs	r2, r4
    1cb0:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1cb2:	7842      	ldrb	r2, [r0, #1]
    1cb4:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1cb6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1cb8:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1cba:	7803      	ldrb	r3, [r0, #0]
    1cbc:	2b04      	cmp	r3, #4
    1cbe:	d011      	beq.n	1ce4 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1cc0:	2b20      	cmp	r3, #32
    1cc2:	d10e      	bne.n	1ce2 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1cc4:	7b03      	ldrb	r3, [r0, #12]
    1cc6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1cc8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1cca:	4313      	orrs	r3, r2
    1ccc:	89c2      	ldrh	r2, [r0, #14]
    1cce:	0412      	lsls	r2, r2, #16
    1cd0:	490d      	ldr	r1, [pc, #52]	; (1d08 <system_clock_source_dfll_set_config+0x78>)
    1cd2:	400a      	ands	r2, r1
    1cd4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1cd6:	4a0b      	ldr	r2, [pc, #44]	; (1d04 <system_clock_source_dfll_set_config+0x74>)
    1cd8:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1cda:	6811      	ldr	r1, [r2, #0]
    1cdc:	4b0b      	ldr	r3, [pc, #44]	; (1d0c <system_clock_source_dfll_set_config+0x7c>)
    1cde:	430b      	orrs	r3, r1
    1ce0:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1ce2:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1ce4:	7b03      	ldrb	r3, [r0, #12]
    1ce6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1ce8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1cea:	4313      	orrs	r3, r2
    1cec:	89c2      	ldrh	r2, [r0, #14]
    1cee:	0412      	lsls	r2, r2, #16
    1cf0:	4905      	ldr	r1, [pc, #20]	; (1d08 <system_clock_source_dfll_set_config+0x78>)
    1cf2:	400a      	ands	r2, r1
    1cf4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1cf6:	4a03      	ldr	r2, [pc, #12]	; (1d04 <system_clock_source_dfll_set_config+0x74>)
    1cf8:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1cfa:	6813      	ldr	r3, [r2, #0]
    1cfc:	2104      	movs	r1, #4
    1cfe:	430b      	orrs	r3, r1
    1d00:	6013      	str	r3, [r2, #0]
    1d02:	e7ee      	b.n	1ce2 <system_clock_source_dfll_set_config+0x52>
    1d04:	20000228 	.word	0x20000228
    1d08:	03ff0000 	.word	0x03ff0000
    1d0c:	00000424 	.word	0x00000424

00001d10 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1d10:	2808      	cmp	r0, #8
    1d12:	d803      	bhi.n	1d1c <system_clock_source_enable+0xc>
    1d14:	0080      	lsls	r0, r0, #2
    1d16:	4b25      	ldr	r3, [pc, #148]	; (1dac <system_clock_source_enable+0x9c>)
    1d18:	581b      	ldr	r3, [r3, r0]
    1d1a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1d1c:	2017      	movs	r0, #23
    1d1e:	e044      	b.n	1daa <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1d20:	4a23      	ldr	r2, [pc, #140]	; (1db0 <system_clock_source_enable+0xa0>)
    1d22:	6a13      	ldr	r3, [r2, #32]
    1d24:	2102      	movs	r1, #2
    1d26:	430b      	orrs	r3, r1
    1d28:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1d2a:	2000      	movs	r0, #0
    1d2c:	e03d      	b.n	1daa <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1d2e:	4a20      	ldr	r2, [pc, #128]	; (1db0 <system_clock_source_enable+0xa0>)
    1d30:	6993      	ldr	r3, [r2, #24]
    1d32:	2102      	movs	r1, #2
    1d34:	430b      	orrs	r3, r1
    1d36:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1d38:	2000      	movs	r0, #0
		break;
    1d3a:	e036      	b.n	1daa <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1d3c:	4a1c      	ldr	r2, [pc, #112]	; (1db0 <system_clock_source_enable+0xa0>)
    1d3e:	8a13      	ldrh	r3, [r2, #16]
    1d40:	2102      	movs	r1, #2
    1d42:	430b      	orrs	r3, r1
    1d44:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1d46:	2000      	movs	r0, #0
		break;
    1d48:	e02f      	b.n	1daa <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1d4a:	4a19      	ldr	r2, [pc, #100]	; (1db0 <system_clock_source_enable+0xa0>)
    1d4c:	8a93      	ldrh	r3, [r2, #20]
    1d4e:	2102      	movs	r1, #2
    1d50:	430b      	orrs	r3, r1
    1d52:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1d54:	2000      	movs	r0, #0
		break;
    1d56:	e028      	b.n	1daa <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1d58:	4916      	ldr	r1, [pc, #88]	; (1db4 <system_clock_source_enable+0xa4>)
    1d5a:	680b      	ldr	r3, [r1, #0]
    1d5c:	2202      	movs	r2, #2
    1d5e:	4313      	orrs	r3, r2
    1d60:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1d62:	4b13      	ldr	r3, [pc, #76]	; (1db0 <system_clock_source_enable+0xa0>)
    1d64:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d66:	0019      	movs	r1, r3
    1d68:	320e      	adds	r2, #14
    1d6a:	68cb      	ldr	r3, [r1, #12]
    1d6c:	421a      	tst	r2, r3
    1d6e:	d0fc      	beq.n	1d6a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1d70:	4a10      	ldr	r2, [pc, #64]	; (1db4 <system_clock_source_enable+0xa4>)
    1d72:	6891      	ldr	r1, [r2, #8]
    1d74:	4b0e      	ldr	r3, [pc, #56]	; (1db0 <system_clock_source_enable+0xa0>)
    1d76:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1d78:	6852      	ldr	r2, [r2, #4]
    1d7a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1d7c:	2200      	movs	r2, #0
    1d7e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d80:	0019      	movs	r1, r3
    1d82:	3210      	adds	r2, #16
    1d84:	68cb      	ldr	r3, [r1, #12]
    1d86:	421a      	tst	r2, r3
    1d88:	d0fc      	beq.n	1d84 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1d8a:	4b0a      	ldr	r3, [pc, #40]	; (1db4 <system_clock_source_enable+0xa4>)
    1d8c:	681b      	ldr	r3, [r3, #0]
    1d8e:	b29b      	uxth	r3, r3
    1d90:	4a07      	ldr	r2, [pc, #28]	; (1db0 <system_clock_source_enable+0xa0>)
    1d92:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1d94:	2000      	movs	r0, #0
    1d96:	e008      	b.n	1daa <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1d98:	4905      	ldr	r1, [pc, #20]	; (1db0 <system_clock_source_enable+0xa0>)
    1d9a:	2244      	movs	r2, #68	; 0x44
    1d9c:	5c8b      	ldrb	r3, [r1, r2]
    1d9e:	2002      	movs	r0, #2
    1da0:	4303      	orrs	r3, r0
    1da2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1da4:	2000      	movs	r0, #0
		break;
    1da6:	e000      	b.n	1daa <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1da8:	2000      	movs	r0, #0
}
    1daa:	4770      	bx	lr
    1dac:	0000896c 	.word	0x0000896c
    1db0:	40000800 	.word	0x40000800
    1db4:	20000228 	.word	0x20000228

00001db8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1db8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dba:	46d6      	mov	lr, sl
    1dbc:	464f      	mov	r7, r9
    1dbe:	4646      	mov	r6, r8
    1dc0:	b5c0      	push	{r6, r7, lr}
    1dc2:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1dc4:	22c2      	movs	r2, #194	; 0xc2
    1dc6:	00d2      	lsls	r2, r2, #3
    1dc8:	4b69      	ldr	r3, [pc, #420]	; (1f70 <system_clock_init+0x1b8>)
    1dca:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1dcc:	4a69      	ldr	r2, [pc, #420]	; (1f74 <system_clock_init+0x1bc>)
    1dce:	6853      	ldr	r3, [r2, #4]
    1dd0:	211e      	movs	r1, #30
    1dd2:	438b      	bics	r3, r1
    1dd4:	391a      	subs	r1, #26
    1dd6:	430b      	orrs	r3, r1
    1dd8:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_5;
    1dda:	2205      	movs	r2, #5
    1ddc:	ab01      	add	r3, sp, #4
    1dde:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1de0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1de2:	4d65      	ldr	r5, [pc, #404]	; (1f78 <system_clock_init+0x1c0>)
    1de4:	b2e0      	uxtb	r0, r4
    1de6:	a901      	add	r1, sp, #4
    1de8:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1dea:	3401      	adds	r4, #1
    1dec:	2c25      	cmp	r4, #37	; 0x25
    1dee:	d1f9      	bne.n	1de4 <system_clock_init+0x2c>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1df0:	a80c      	add	r0, sp, #48	; 0x30
    1df2:	2300      	movs	r3, #0
    1df4:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    1df6:	2280      	movs	r2, #128	; 0x80
    1df8:	0212      	lsls	r2, r2, #8
    1dfa:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1dfc:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1dfe:	2201      	movs	r2, #1
    1e00:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1e02:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1e04:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1e06:	2106      	movs	r1, #6
    1e08:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    1e0a:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1e0c:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1e0e:	4b5b      	ldr	r3, [pc, #364]	; (1f7c <system_clock_init+0x1c4>)
    1e10:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1e12:	2005      	movs	r0, #5
    1e14:	4b5a      	ldr	r3, [pc, #360]	; (1f80 <system_clock_init+0x1c8>)
    1e16:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1e18:	4955      	ldr	r1, [pc, #340]	; (1f70 <system_clock_init+0x1b8>)
    1e1a:	2202      	movs	r2, #2
    1e1c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1e1e:	421a      	tst	r2, r3
    1e20:	d0fc      	beq.n	1e1c <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1e22:	4953      	ldr	r1, [pc, #332]	; (1f70 <system_clock_init+0x1b8>)
    1e24:	8a8b      	ldrh	r3, [r1, #20]
    1e26:	2280      	movs	r2, #128	; 0x80
    1e28:	4313      	orrs	r3, r2
    1e2a:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    1e2c:	4c55      	ldr	r4, [pc, #340]	; (1f84 <system_clock_init+0x1cc>)
	SYSCTRL->OSC32K.bit.CALIB =
    1e2e:	6823      	ldr	r3, [r4, #0]
    1e30:	04db      	lsls	r3, r3, #19
    1e32:	698a      	ldr	r2, [r1, #24]
    1e34:	0e5b      	lsrs	r3, r3, #25
    1e36:	041b      	lsls	r3, r3, #16
    1e38:	4853      	ldr	r0, [pc, #332]	; (1f88 <system_clock_init+0x1d0>)
    1e3a:	4002      	ands	r2, r0
    1e3c:	4313      	orrs	r3, r2
    1e3e:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    1e40:	a80a      	add	r0, sp, #40	; 0x28
    1e42:	2301      	movs	r3, #1
    1e44:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    1e46:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    1e48:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1e4a:	2207      	movs	r2, #7
    1e4c:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    1e4e:	2500      	movs	r5, #0
    1e50:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1e52:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1e54:	4b4d      	ldr	r3, [pc, #308]	; (1f8c <system_clock_init+0x1d4>)
    1e56:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1e58:	2004      	movs	r0, #4
    1e5a:	4b49      	ldr	r3, [pc, #292]	; (1f80 <system_clock_init+0x1c8>)
    1e5c:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1e5e:	ab05      	add	r3, sp, #20
    1e60:	2200      	movs	r2, #0
    1e62:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1e64:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1e66:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1e68:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1e6a:	213f      	movs	r1, #63	; 0x3f
    1e6c:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1e6e:	393b      	subs	r1, #59	; 0x3b
    1e70:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1e72:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1e74:	6823      	ldr	r3, [r4, #0]
    1e76:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1e78:	2b3f      	cmp	r3, #63	; 0x3f
    1e7a:	d100      	bne.n	1e7e <system_clock_init+0xc6>
    1e7c:	e075      	b.n	1f6a <system_clock_init+0x1b2>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1e7e:	a805      	add	r0, sp, #20
    1e80:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1e82:	23b7      	movs	r3, #183	; 0xb7
    1e84:	00db      	lsls	r3, r3, #3
    1e86:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1e88:	2307      	movs	r3, #7
    1e8a:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1e8c:	3338      	adds	r3, #56	; 0x38
    1e8e:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1e90:	4b3f      	ldr	r3, [pc, #252]	; (1f90 <system_clock_init+0x1d8>)
    1e92:	4798      	blx	r3
	config->run_in_standby  = false;
    1e94:	a804      	add	r0, sp, #16
    1e96:	2500      	movs	r5, #0
    1e98:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1e9a:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1e9c:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1e9e:	4b3d      	ldr	r3, [pc, #244]	; (1f94 <system_clock_init+0x1dc>)
    1ea0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1ea2:	2006      	movs	r0, #6
    1ea4:	4b36      	ldr	r3, [pc, #216]	; (1f80 <system_clock_init+0x1c8>)
    1ea6:	4699      	mov	r9, r3
    1ea8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1eaa:	4b3b      	ldr	r3, [pc, #236]	; (1f98 <system_clock_init+0x1e0>)
    1eac:	4798      	blx	r3
	config->division_factor    = 1;
    1eae:	ac01      	add	r4, sp, #4
    1eb0:	2601      	movs	r6, #1
    1eb2:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1eb4:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    1eb6:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1eb8:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1eba:	2305      	movs	r3, #5
    1ebc:	7023      	strb	r3, [r4, #0]
    1ebe:	0021      	movs	r1, r4
    1ec0:	2001      	movs	r0, #1
    1ec2:	4b36      	ldr	r3, [pc, #216]	; (1f9c <system_clock_init+0x1e4>)
    1ec4:	4698      	mov	r8, r3
    1ec6:	4798      	blx	r3
    1ec8:	2001      	movs	r0, #1
    1eca:	4f35      	ldr	r7, [pc, #212]	; (1fa0 <system_clock_init+0x1e8>)
    1ecc:	47b8      	blx	r7
	config->high_when_disabled = false;
    1ece:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    1ed0:	7265      	strb	r5, [r4, #9]
    1ed2:	2304      	movs	r3, #4
    1ed4:	7023      	strb	r3, [r4, #0]
    1ed6:	331c      	adds	r3, #28
    1ed8:	469a      	mov	sl, r3
    1eda:	6063      	str	r3, [r4, #4]
    1edc:	7226      	strb	r6, [r4, #8]
    1ede:	0021      	movs	r1, r4
    1ee0:	2002      	movs	r0, #2
    1ee2:	47c0      	blx	r8
    1ee4:	2002      	movs	r0, #2
    1ee6:	47b8      	blx	r7
	config->division_factor    = 1;
    1ee8:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1eea:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1eec:	2306      	movs	r3, #6
    1eee:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    1ef0:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1ef2:	7265      	strb	r5, [r4, #9]
    1ef4:	0021      	movs	r1, r4
    1ef6:	2003      	movs	r0, #3
    1ef8:	47c0      	blx	r8
    1efa:	2003      	movs	r0, #3
    1efc:	47b8      	blx	r7
	config->high_when_disabled = false;
    1efe:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    1f00:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1f02:	7265      	strb	r5, [r4, #9]
    1f04:	2303      	movs	r3, #3
    1f06:	7023      	strb	r3, [r4, #0]
    1f08:	4653      	mov	r3, sl
    1f0a:	6063      	str	r3, [r4, #4]
    1f0c:	0021      	movs	r1, r4
    1f0e:	2004      	movs	r0, #4
    1f10:	47c0      	blx	r8
    1f12:	2004      	movs	r0, #4
    1f14:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1f16:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1f18:	0021      	movs	r1, r4
    1f1a:	2000      	movs	r0, #0
    1f1c:	4b16      	ldr	r3, [pc, #88]	; (1f78 <system_clock_init+0x1c0>)
    1f1e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1f20:	2000      	movs	r0, #0
    1f22:	4b20      	ldr	r3, [pc, #128]	; (1fa4 <system_clock_init+0x1ec>)
    1f24:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1f26:	2007      	movs	r0, #7
    1f28:	47c8      	blx	r9
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1f2a:	4911      	ldr	r1, [pc, #68]	; (1f70 <system_clock_init+0x1b8>)
    1f2c:	22d0      	movs	r2, #208	; 0xd0
    1f2e:	68cb      	ldr	r3, [r1, #12]
    1f30:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1f32:	2bd0      	cmp	r3, #208	; 0xd0
    1f34:	d1fb      	bne.n	1f2e <system_clock_init+0x176>
	PM->CPUSEL.reg = (uint32_t)divider;
    1f36:	4a1c      	ldr	r2, [pc, #112]	; (1fa8 <system_clock_init+0x1f0>)
    1f38:	2300      	movs	r3, #0
    1f3a:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1f3c:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1f3e:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1f40:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1f42:	a901      	add	r1, sp, #4
    1f44:	2201      	movs	r2, #1
    1f46:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1f48:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1f4a:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1f4c:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1f4e:	3307      	adds	r3, #7
    1f50:	700b      	strb	r3, [r1, #0]
    1f52:	2000      	movs	r0, #0
    1f54:	4b11      	ldr	r3, [pc, #68]	; (1f9c <system_clock_init+0x1e4>)
    1f56:	4798      	blx	r3
    1f58:	2000      	movs	r0, #0
    1f5a:	4b11      	ldr	r3, [pc, #68]	; (1fa0 <system_clock_init+0x1e8>)
    1f5c:	4798      	blx	r3
#endif
}
    1f5e:	b010      	add	sp, #64	; 0x40
    1f60:	bc1c      	pop	{r2, r3, r4}
    1f62:	4690      	mov	r8, r2
    1f64:	4699      	mov	r9, r3
    1f66:	46a2      	mov	sl, r4
    1f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1f6a:	3b20      	subs	r3, #32
    1f6c:	e787      	b.n	1e7e <system_clock_init+0xc6>
    1f6e:	46c0      	nop			; (mov r8, r8)
    1f70:	40000800 	.word	0x40000800
    1f74:	41004000 	.word	0x41004000
    1f78:	000021e5 	.word	0x000021e5
    1f7c:	00001bd9 	.word	0x00001bd9
    1f80:	00001d11 	.word	0x00001d11
    1f84:	00806024 	.word	0x00806024
    1f88:	ff80ffff 	.word	0xff80ffff
    1f8c:	00001b5d 	.word	0x00001b5d
    1f90:	00001c91 	.word	0x00001c91
    1f94:	00001b21 	.word	0x00001b21
    1f98:	00001fad 	.word	0x00001fad
    1f9c:	00001fd1 	.word	0x00001fd1
    1fa0:	00002089 	.word	0x00002089
    1fa4:	00002159 	.word	0x00002159
    1fa8:	40000400 	.word	0x40000400

00001fac <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1fac:	4a06      	ldr	r2, [pc, #24]	; (1fc8 <system_gclk_init+0x1c>)
    1fae:	6993      	ldr	r3, [r2, #24]
    1fb0:	2108      	movs	r1, #8
    1fb2:	430b      	orrs	r3, r1
    1fb4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1fb6:	2201      	movs	r2, #1
    1fb8:	4b04      	ldr	r3, [pc, #16]	; (1fcc <system_gclk_init+0x20>)
    1fba:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1fbc:	0019      	movs	r1, r3
    1fbe:	780b      	ldrb	r3, [r1, #0]
    1fc0:	4213      	tst	r3, r2
    1fc2:	d1fc      	bne.n	1fbe <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1fc4:	4770      	bx	lr
    1fc6:	46c0      	nop			; (mov r8, r8)
    1fc8:	40000400 	.word	0x40000400
    1fcc:	40000c00 	.word	0x40000c00

00001fd0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1fd0:	b570      	push	{r4, r5, r6, lr}
    1fd2:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1fd4:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1fd6:	780d      	ldrb	r5, [r1, #0]
    1fd8:	022d      	lsls	r5, r5, #8
    1fda:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1fdc:	784b      	ldrb	r3, [r1, #1]
    1fde:	2b00      	cmp	r3, #0
    1fe0:	d002      	beq.n	1fe8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1fe2:	2380      	movs	r3, #128	; 0x80
    1fe4:	02db      	lsls	r3, r3, #11
    1fe6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1fe8:	7a4b      	ldrb	r3, [r1, #9]
    1fea:	2b00      	cmp	r3, #0
    1fec:	d002      	beq.n	1ff4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1fee:	2380      	movs	r3, #128	; 0x80
    1ff0:	031b      	lsls	r3, r3, #12
    1ff2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1ff4:	6848      	ldr	r0, [r1, #4]
    1ff6:	2801      	cmp	r0, #1
    1ff8:	d910      	bls.n	201c <STACK_SIZE+0x1c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1ffa:	1e43      	subs	r3, r0, #1
    1ffc:	4218      	tst	r0, r3
    1ffe:	d134      	bne.n	206a <STACK_SIZE+0x6a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2000:	2802      	cmp	r0, #2
    2002:	d930      	bls.n	2066 <STACK_SIZE+0x66>
    2004:	2302      	movs	r3, #2
    2006:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2008:	3201      	adds	r2, #1
						mask <<= 1) {
    200a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    200c:	4298      	cmp	r0, r3
    200e:	d8fb      	bhi.n	2008 <STACK_SIZE+0x8>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2010:	0212      	lsls	r2, r2, #8
    2012:	4332      	orrs	r2, r6
    2014:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2016:	2380      	movs	r3, #128	; 0x80
    2018:	035b      	lsls	r3, r3, #13
    201a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    201c:	7a0b      	ldrb	r3, [r1, #8]
    201e:	2b00      	cmp	r3, #0
    2020:	d002      	beq.n	2028 <STACK_SIZE+0x28>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2022:	2380      	movs	r3, #128	; 0x80
    2024:	039b      	lsls	r3, r3, #14
    2026:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2028:	4a13      	ldr	r2, [pc, #76]	; (2078 <STACK_SIZE+0x78>)
    202a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    202c:	b25b      	sxtb	r3, r3
    202e:	2b00      	cmp	r3, #0
    2030:	dbfb      	blt.n	202a <STACK_SIZE+0x2a>
	cpu_irq_enter_critical();
    2032:	4b12      	ldr	r3, [pc, #72]	; (207c <STACK_SIZE+0x7c>)
    2034:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2036:	4b12      	ldr	r3, [pc, #72]	; (2080 <STACK_SIZE+0x80>)
    2038:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    203a:	4a0f      	ldr	r2, [pc, #60]	; (2078 <STACK_SIZE+0x78>)
    203c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    203e:	b25b      	sxtb	r3, r3
    2040:	2b00      	cmp	r3, #0
    2042:	dbfb      	blt.n	203c <STACK_SIZE+0x3c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2044:	4b0c      	ldr	r3, [pc, #48]	; (2078 <STACK_SIZE+0x78>)
    2046:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2048:	001a      	movs	r2, r3
    204a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    204c:	b25b      	sxtb	r3, r3
    204e:	2b00      	cmp	r3, #0
    2050:	dbfb      	blt.n	204a <STACK_SIZE+0x4a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2052:	4a09      	ldr	r2, [pc, #36]	; (2078 <STACK_SIZE+0x78>)
    2054:	6853      	ldr	r3, [r2, #4]
    2056:	2180      	movs	r1, #128	; 0x80
    2058:	0249      	lsls	r1, r1, #9
    205a:	400b      	ands	r3, r1
    205c:	431d      	orrs	r5, r3
    205e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2060:	4b08      	ldr	r3, [pc, #32]	; (2084 <STACK_SIZE+0x84>)
    2062:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2064:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2066:	2200      	movs	r2, #0
    2068:	e7d2      	b.n	2010 <STACK_SIZE+0x10>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    206a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    206c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    206e:	2380      	movs	r3, #128	; 0x80
    2070:	029b      	lsls	r3, r3, #10
    2072:	431d      	orrs	r5, r3
    2074:	e7d2      	b.n	201c <STACK_SIZE+0x1c>
    2076:	46c0      	nop			; (mov r8, r8)
    2078:	40000c00 	.word	0x40000c00
    207c:	000008c9 	.word	0x000008c9
    2080:	40000c08 	.word	0x40000c08
    2084:	00000909 	.word	0x00000909

00002088 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2088:	b510      	push	{r4, lr}
    208a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    208c:	4a0b      	ldr	r2, [pc, #44]	; (20bc <system_gclk_gen_enable+0x34>)
    208e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2090:	b25b      	sxtb	r3, r3
    2092:	2b00      	cmp	r3, #0
    2094:	dbfb      	blt.n	208e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2096:	4b0a      	ldr	r3, [pc, #40]	; (20c0 <system_gclk_gen_enable+0x38>)
    2098:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    209a:	4b0a      	ldr	r3, [pc, #40]	; (20c4 <system_gclk_gen_enable+0x3c>)
    209c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    209e:	4a07      	ldr	r2, [pc, #28]	; (20bc <system_gclk_gen_enable+0x34>)
    20a0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    20a2:	b25b      	sxtb	r3, r3
    20a4:	2b00      	cmp	r3, #0
    20a6:	dbfb      	blt.n	20a0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    20a8:	4a04      	ldr	r2, [pc, #16]	; (20bc <system_gclk_gen_enable+0x34>)
    20aa:	6851      	ldr	r1, [r2, #4]
    20ac:	2380      	movs	r3, #128	; 0x80
    20ae:	025b      	lsls	r3, r3, #9
    20b0:	430b      	orrs	r3, r1
    20b2:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    20b4:	4b04      	ldr	r3, [pc, #16]	; (20c8 <system_gclk_gen_enable+0x40>)
    20b6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    20b8:	bd10      	pop	{r4, pc}
    20ba:	46c0      	nop			; (mov r8, r8)
    20bc:	40000c00 	.word	0x40000c00
    20c0:	000008c9 	.word	0x000008c9
    20c4:	40000c04 	.word	0x40000c04
    20c8:	00000909 	.word	0x00000909

000020cc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    20cc:	b570      	push	{r4, r5, r6, lr}
    20ce:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20d0:	4a1a      	ldr	r2, [pc, #104]	; (213c <system_gclk_gen_get_hz+0x70>)
    20d2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    20d4:	b25b      	sxtb	r3, r3
    20d6:	2b00      	cmp	r3, #0
    20d8:	dbfb      	blt.n	20d2 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    20da:	4b19      	ldr	r3, [pc, #100]	; (2140 <system_gclk_gen_get_hz+0x74>)
    20dc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    20de:	4b19      	ldr	r3, [pc, #100]	; (2144 <system_gclk_gen_get_hz+0x78>)
    20e0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20e2:	4a16      	ldr	r2, [pc, #88]	; (213c <system_gclk_gen_get_hz+0x70>)
    20e4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    20e6:	b25b      	sxtb	r3, r3
    20e8:	2b00      	cmp	r3, #0
    20ea:	dbfb      	blt.n	20e4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    20ec:	4e13      	ldr	r6, [pc, #76]	; (213c <system_gclk_gen_get_hz+0x70>)
    20ee:	6870      	ldr	r0, [r6, #4]
    20f0:	04c0      	lsls	r0, r0, #19
    20f2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    20f4:	4b14      	ldr	r3, [pc, #80]	; (2148 <system_gclk_gen_get_hz+0x7c>)
    20f6:	4798      	blx	r3
    20f8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    20fa:	4b12      	ldr	r3, [pc, #72]	; (2144 <system_gclk_gen_get_hz+0x78>)
    20fc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    20fe:	6876      	ldr	r6, [r6, #4]
    2100:	02f6      	lsls	r6, r6, #11
    2102:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2104:	4b11      	ldr	r3, [pc, #68]	; (214c <system_gclk_gen_get_hz+0x80>)
    2106:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2108:	4a0c      	ldr	r2, [pc, #48]	; (213c <system_gclk_gen_get_hz+0x70>)
    210a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    210c:	b25b      	sxtb	r3, r3
    210e:	2b00      	cmp	r3, #0
    2110:	dbfb      	blt.n	210a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2112:	4b0a      	ldr	r3, [pc, #40]	; (213c <system_gclk_gen_get_hz+0x70>)
    2114:	689c      	ldr	r4, [r3, #8]
    2116:	0224      	lsls	r4, r4, #8
    2118:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    211a:	4b0d      	ldr	r3, [pc, #52]	; (2150 <system_gclk_gen_get_hz+0x84>)
    211c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    211e:	2e00      	cmp	r6, #0
    2120:	d107      	bne.n	2132 <system_gclk_gen_get_hz+0x66>
    2122:	2c01      	cmp	r4, #1
    2124:	d907      	bls.n	2136 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2126:	0021      	movs	r1, r4
    2128:	0028      	movs	r0, r5
    212a:	4b0a      	ldr	r3, [pc, #40]	; (2154 <system_gclk_gen_get_hz+0x88>)
    212c:	4798      	blx	r3
    212e:	0005      	movs	r5, r0
    2130:	e001      	b.n	2136 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2132:	3401      	adds	r4, #1
    2134:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2136:	0028      	movs	r0, r5
    2138:	bd70      	pop	{r4, r5, r6, pc}
    213a:	46c0      	nop			; (mov r8, r8)
    213c:	40000c00 	.word	0x40000c00
    2140:	000008c9 	.word	0x000008c9
    2144:	40000c04 	.word	0x40000c04
    2148:	00001a91 	.word	0x00001a91
    214c:	40000c08 	.word	0x40000c08
    2150:	00000909 	.word	0x00000909
    2154:	00005d65 	.word	0x00005d65

00002158 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2158:	b510      	push	{r4, lr}
    215a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    215c:	4b06      	ldr	r3, [pc, #24]	; (2178 <system_gclk_chan_enable+0x20>)
    215e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2160:	4b06      	ldr	r3, [pc, #24]	; (217c <system_gclk_chan_enable+0x24>)
    2162:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2164:	4a06      	ldr	r2, [pc, #24]	; (2180 <system_gclk_chan_enable+0x28>)
    2166:	8853      	ldrh	r3, [r2, #2]
    2168:	2180      	movs	r1, #128	; 0x80
    216a:	01c9      	lsls	r1, r1, #7
    216c:	430b      	orrs	r3, r1
    216e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2170:	4b04      	ldr	r3, [pc, #16]	; (2184 <system_gclk_chan_enable+0x2c>)
    2172:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2174:	bd10      	pop	{r4, pc}
    2176:	46c0      	nop			; (mov r8, r8)
    2178:	000008c9 	.word	0x000008c9
    217c:	40000c02 	.word	0x40000c02
    2180:	40000c00 	.word	0x40000c00
    2184:	00000909 	.word	0x00000909

00002188 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2188:	b510      	push	{r4, lr}
    218a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    218c:	4b0f      	ldr	r3, [pc, #60]	; (21cc <system_gclk_chan_disable+0x44>)
    218e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2190:	4b0f      	ldr	r3, [pc, #60]	; (21d0 <system_gclk_chan_disable+0x48>)
    2192:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2194:	4a0f      	ldr	r2, [pc, #60]	; (21d4 <system_gclk_chan_disable+0x4c>)
    2196:	8853      	ldrh	r3, [r2, #2]
    2198:	051b      	lsls	r3, r3, #20
    219a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    219c:	8853      	ldrh	r3, [r2, #2]
    219e:	490e      	ldr	r1, [pc, #56]	; (21d8 <system_gclk_chan_disable+0x50>)
    21a0:	400b      	ands	r3, r1
    21a2:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    21a4:	8853      	ldrh	r3, [r2, #2]
    21a6:	490d      	ldr	r1, [pc, #52]	; (21dc <system_gclk_chan_disable+0x54>)
    21a8:	400b      	ands	r3, r1
    21aa:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    21ac:	0011      	movs	r1, r2
    21ae:	2280      	movs	r2, #128	; 0x80
    21b0:	01d2      	lsls	r2, r2, #7
    21b2:	884b      	ldrh	r3, [r1, #2]
    21b4:	4213      	tst	r3, r2
    21b6:	d1fc      	bne.n	21b2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    21b8:	4906      	ldr	r1, [pc, #24]	; (21d4 <system_gclk_chan_disable+0x4c>)
    21ba:	884a      	ldrh	r2, [r1, #2]
    21bc:	0203      	lsls	r3, r0, #8
    21be:	4806      	ldr	r0, [pc, #24]	; (21d8 <system_gclk_chan_disable+0x50>)
    21c0:	4002      	ands	r2, r0
    21c2:	4313      	orrs	r3, r2
    21c4:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    21c6:	4b06      	ldr	r3, [pc, #24]	; (21e0 <system_gclk_chan_disable+0x58>)
    21c8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    21ca:	bd10      	pop	{r4, pc}
    21cc:	000008c9 	.word	0x000008c9
    21d0:	40000c02 	.word	0x40000c02
    21d4:	40000c00 	.word	0x40000c00
    21d8:	fffff0ff 	.word	0xfffff0ff
    21dc:	ffffbfff 	.word	0xffffbfff
    21e0:	00000909 	.word	0x00000909

000021e4 <system_gclk_chan_set_config>:
{
    21e4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    21e6:	780c      	ldrb	r4, [r1, #0]
    21e8:	0224      	lsls	r4, r4, #8
    21ea:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    21ec:	4b02      	ldr	r3, [pc, #8]	; (21f8 <system_gclk_chan_set_config+0x14>)
    21ee:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    21f0:	b2a4      	uxth	r4, r4
    21f2:	4b02      	ldr	r3, [pc, #8]	; (21fc <system_gclk_chan_set_config+0x18>)
    21f4:	805c      	strh	r4, [r3, #2]
}
    21f6:	bd10      	pop	{r4, pc}
    21f8:	00002189 	.word	0x00002189
    21fc:	40000c00 	.word	0x40000c00

00002200 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2200:	b510      	push	{r4, lr}
    2202:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2204:	4b06      	ldr	r3, [pc, #24]	; (2220 <system_gclk_chan_get_hz+0x20>)
    2206:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2208:	4b06      	ldr	r3, [pc, #24]	; (2224 <system_gclk_chan_get_hz+0x24>)
    220a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    220c:	4b06      	ldr	r3, [pc, #24]	; (2228 <system_gclk_chan_get_hz+0x28>)
    220e:	885c      	ldrh	r4, [r3, #2]
    2210:	0524      	lsls	r4, r4, #20
    2212:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2214:	4b05      	ldr	r3, [pc, #20]	; (222c <system_gclk_chan_get_hz+0x2c>)
    2216:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2218:	0020      	movs	r0, r4
    221a:	4b05      	ldr	r3, [pc, #20]	; (2230 <system_gclk_chan_get_hz+0x30>)
    221c:	4798      	blx	r3
}
    221e:	bd10      	pop	{r4, pc}
    2220:	000008c9 	.word	0x000008c9
    2224:	40000c02 	.word	0x40000c02
    2228:	40000c00 	.word	0x40000c00
    222c:	00000909 	.word	0x00000909
    2230:	000020cd 	.word	0x000020cd

00002234 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2234:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2236:	78d3      	ldrb	r3, [r2, #3]
    2238:	2b00      	cmp	r3, #0
    223a:	d135      	bne.n	22a8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    223c:	7813      	ldrb	r3, [r2, #0]
    223e:	2b80      	cmp	r3, #128	; 0x80
    2240:	d029      	beq.n	2296 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2242:	061b      	lsls	r3, r3, #24
    2244:	2480      	movs	r4, #128	; 0x80
    2246:	0264      	lsls	r4, r4, #9
    2248:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    224a:	7854      	ldrb	r4, [r2, #1]
    224c:	2502      	movs	r5, #2
    224e:	43ac      	bics	r4, r5
    2250:	d106      	bne.n	2260 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2252:	7894      	ldrb	r4, [r2, #2]
    2254:	2c00      	cmp	r4, #0
    2256:	d120      	bne.n	229a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2258:	2480      	movs	r4, #128	; 0x80
    225a:	02a4      	lsls	r4, r4, #10
    225c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    225e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2260:	7854      	ldrb	r4, [r2, #1]
    2262:	3c01      	subs	r4, #1
    2264:	2c01      	cmp	r4, #1
    2266:	d91c      	bls.n	22a2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2268:	040d      	lsls	r5, r1, #16
    226a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    226c:	24a0      	movs	r4, #160	; 0xa0
    226e:	05e4      	lsls	r4, r4, #23
    2270:	432c      	orrs	r4, r5
    2272:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2274:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2276:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2278:	24d0      	movs	r4, #208	; 0xd0
    227a:	0624      	lsls	r4, r4, #24
    227c:	432c      	orrs	r4, r5
    227e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2280:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2282:	78d4      	ldrb	r4, [r2, #3]
    2284:	2c00      	cmp	r4, #0
    2286:	d122      	bne.n	22ce <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2288:	035b      	lsls	r3, r3, #13
    228a:	d51c      	bpl.n	22c6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    228c:	7893      	ldrb	r3, [r2, #2]
    228e:	2b01      	cmp	r3, #1
    2290:	d01e      	beq.n	22d0 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2292:	6141      	str	r1, [r0, #20]
    2294:	e017      	b.n	22c6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2296:	2300      	movs	r3, #0
    2298:	e7d7      	b.n	224a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    229a:	24c0      	movs	r4, #192	; 0xc0
    229c:	02e4      	lsls	r4, r4, #11
    229e:	4323      	orrs	r3, r4
    22a0:	e7dd      	b.n	225e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    22a2:	4c0d      	ldr	r4, [pc, #52]	; (22d8 <_system_pinmux_config+0xa4>)
    22a4:	4023      	ands	r3, r4
    22a6:	e7df      	b.n	2268 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    22a8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    22aa:	040c      	lsls	r4, r1, #16
    22ac:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    22ae:	23a0      	movs	r3, #160	; 0xa0
    22b0:	05db      	lsls	r3, r3, #23
    22b2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    22b4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    22b6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    22b8:	23d0      	movs	r3, #208	; 0xd0
    22ba:	061b      	lsls	r3, r3, #24
    22bc:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    22be:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    22c0:	78d3      	ldrb	r3, [r2, #3]
    22c2:	2b00      	cmp	r3, #0
    22c4:	d103      	bne.n	22ce <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    22c6:	7853      	ldrb	r3, [r2, #1]
    22c8:	3b01      	subs	r3, #1
    22ca:	2b01      	cmp	r3, #1
    22cc:	d902      	bls.n	22d4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    22ce:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    22d0:	6181      	str	r1, [r0, #24]
    22d2:	e7f8      	b.n	22c6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    22d4:	6081      	str	r1, [r0, #8]
}
    22d6:	e7fa      	b.n	22ce <_system_pinmux_config+0x9a>
    22d8:	fffbffff 	.word	0xfffbffff

000022dc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    22dc:	b510      	push	{r4, lr}
    22de:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    22e0:	09c1      	lsrs	r1, r0, #7
		return NULL;
    22e2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    22e4:	2900      	cmp	r1, #0
    22e6:	d104      	bne.n	22f2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    22e8:	0943      	lsrs	r3, r0, #5
    22ea:	01db      	lsls	r3, r3, #7
    22ec:	4905      	ldr	r1, [pc, #20]	; (2304 <system_pinmux_pin_set_config+0x28>)
    22ee:	468c      	mov	ip, r1
    22f0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    22f2:	241f      	movs	r4, #31
    22f4:	4020      	ands	r0, r4
    22f6:	2101      	movs	r1, #1
    22f8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    22fa:	0018      	movs	r0, r3
    22fc:	4b02      	ldr	r3, [pc, #8]	; (2308 <system_pinmux_pin_set_config+0x2c>)
    22fe:	4798      	blx	r3
}
    2300:	bd10      	pop	{r4, pc}
    2302:	46c0      	nop			; (mov r8, r8)
    2304:	41004400 	.word	0x41004400
    2308:	00002235 	.word	0x00002235

0000230c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    230c:	4770      	bx	lr
	...

00002310 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2310:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2312:	4b05      	ldr	r3, [pc, #20]	; (2328 <system_init+0x18>)
    2314:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2316:	4b05      	ldr	r3, [pc, #20]	; (232c <system_init+0x1c>)
    2318:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    231a:	4b05      	ldr	r3, [pc, #20]	; (2330 <system_init+0x20>)
    231c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    231e:	4b05      	ldr	r3, [pc, #20]	; (2334 <system_init+0x24>)
    2320:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2322:	4b05      	ldr	r3, [pc, #20]	; (2338 <system_init+0x28>)
    2324:	4798      	blx	r3
}
    2326:	bd10      	pop	{r4, pc}
    2328:	00001db9 	.word	0x00001db9
    232c:	00000939 	.word	0x00000939
    2330:	0000230d 	.word	0x0000230d
    2334:	00000aa5 	.word	0x00000aa5
    2338:	0000230d 	.word	0x0000230d

0000233c <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    233c:	1c93      	adds	r3, r2, #2
    233e:	009b      	lsls	r3, r3, #2
    2340:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    2342:	2a02      	cmp	r2, #2
    2344:	d009      	beq.n	235a <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    2346:	2a03      	cmp	r2, #3
    2348:	d00c      	beq.n	2364 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    234a:	2301      	movs	r3, #1
    234c:	4093      	lsls	r3, r2
    234e:	001a      	movs	r2, r3
    2350:	7e03      	ldrb	r3, [r0, #24]
    2352:	4313      	orrs	r3, r2
    2354:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    2356:	2000      	movs	r0, #0
    2358:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    235a:	7e03      	ldrb	r3, [r0, #24]
    235c:	2210      	movs	r2, #16
    235e:	4313      	orrs	r3, r2
    2360:	7603      	strb	r3, [r0, #24]
    2362:	e7f8      	b.n	2356 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    2364:	7e03      	ldrb	r3, [r0, #24]
    2366:	2220      	movs	r2, #32
    2368:	4313      	orrs	r3, r2
    236a:	7603      	strb	r3, [r0, #24]
    236c:	e7f3      	b.n	2356 <tc_register_callback+0x1a>
	...

00002370 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    2370:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    2372:	0080      	lsls	r0, r0, #2
    2374:	4b16      	ldr	r3, [pc, #88]	; (23d0 <_tc_interrupt_handler+0x60>)
    2376:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2378:	6823      	ldr	r3, [r4, #0]
    237a:	7b9d      	ldrb	r5, [r3, #14]
    237c:	7e22      	ldrb	r2, [r4, #24]
    237e:	7e63      	ldrb	r3, [r4, #25]
    2380:	4013      	ands	r3, r2
    2382:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    2384:	07eb      	lsls	r3, r5, #31
    2386:	d406      	bmi.n	2396 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    2388:	07ab      	lsls	r3, r5, #30
    238a:	d40b      	bmi.n	23a4 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    238c:	06eb      	lsls	r3, r5, #27
    238e:	d410      	bmi.n	23b2 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    2390:	06ab      	lsls	r3, r5, #26
    2392:	d415      	bmi.n	23c0 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    2394:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    2396:	0020      	movs	r0, r4
    2398:	68a3      	ldr	r3, [r4, #8]
    239a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    239c:	2301      	movs	r3, #1
    239e:	6822      	ldr	r2, [r4, #0]
    23a0:	7393      	strb	r3, [r2, #14]
    23a2:	e7f1      	b.n	2388 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    23a4:	0020      	movs	r0, r4
    23a6:	68e3      	ldr	r3, [r4, #12]
    23a8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    23aa:	2302      	movs	r3, #2
    23ac:	6822      	ldr	r2, [r4, #0]
    23ae:	7393      	strb	r3, [r2, #14]
    23b0:	e7ec      	b.n	238c <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    23b2:	0020      	movs	r0, r4
    23b4:	6923      	ldr	r3, [r4, #16]
    23b6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    23b8:	2310      	movs	r3, #16
    23ba:	6822      	ldr	r2, [r4, #0]
    23bc:	7393      	strb	r3, [r2, #14]
    23be:	e7e7      	b.n	2390 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    23c0:	0020      	movs	r0, r4
    23c2:	6963      	ldr	r3, [r4, #20]
    23c4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    23c6:	6823      	ldr	r3, [r4, #0]
    23c8:	2220      	movs	r2, #32
    23ca:	739a      	strb	r2, [r3, #14]
}
    23cc:	e7e2      	b.n	2394 <_tc_interrupt_handler+0x24>
    23ce:	46c0      	nop			; (mov r8, r8)
    23d0:	20000908 	.word	0x20000908

000023d4 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    23d4:	b510      	push	{r4, lr}
    23d6:	2000      	movs	r0, #0
    23d8:	4b01      	ldr	r3, [pc, #4]	; (23e0 <TC3_Handler+0xc>)
    23da:	4798      	blx	r3
    23dc:	bd10      	pop	{r4, pc}
    23de:	46c0      	nop			; (mov r8, r8)
    23e0:	00002371 	.word	0x00002371

000023e4 <TC4_Handler>:
    23e4:	b510      	push	{r4, lr}
    23e6:	2001      	movs	r0, #1
    23e8:	4b01      	ldr	r3, [pc, #4]	; (23f0 <TC4_Handler+0xc>)
    23ea:	4798      	blx	r3
    23ec:	bd10      	pop	{r4, pc}
    23ee:	46c0      	nop			; (mov r8, r8)
    23f0:	00002371 	.word	0x00002371

000023f4 <TC5_Handler>:
    23f4:	b510      	push	{r4, lr}
    23f6:	2002      	movs	r0, #2
    23f8:	4b01      	ldr	r3, [pc, #4]	; (2400 <TC5_Handler+0xc>)
    23fa:	4798      	blx	r3
    23fc:	bd10      	pop	{r4, pc}
    23fe:	46c0      	nop			; (mov r8, r8)
    2400:	00002371 	.word	0x00002371

00002404 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    2404:	b530      	push	{r4, r5, lr}
    2406:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2408:	aa01      	add	r2, sp, #4
    240a:	4b0b      	ldr	r3, [pc, #44]	; (2438 <_tc_get_inst_index+0x34>)
    240c:	cb32      	ldmia	r3!, {r1, r4, r5}
    240e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    2410:	9b01      	ldr	r3, [sp, #4]
    2412:	4298      	cmp	r0, r3
    2414:	d00d      	beq.n	2432 <_tc_get_inst_index+0x2e>
    2416:	9b02      	ldr	r3, [sp, #8]
    2418:	4298      	cmp	r0, r3
    241a:	d008      	beq.n	242e <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    241c:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    241e:	9a03      	ldr	r2, [sp, #12]
    2420:	4282      	cmp	r2, r0
    2422:	d002      	beq.n	242a <_tc_get_inst_index+0x26>
}
    2424:	0018      	movs	r0, r3
    2426:	b005      	add	sp, #20
    2428:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    242a:	3302      	adds	r3, #2
    242c:	e002      	b.n	2434 <_tc_get_inst_index+0x30>
    242e:	2301      	movs	r3, #1
    2430:	e000      	b.n	2434 <_tc_get_inst_index+0x30>
    2432:	2300      	movs	r3, #0
			return i;
    2434:	b2db      	uxtb	r3, r3
    2436:	e7f5      	b.n	2424 <_tc_get_inst_index+0x20>
    2438:	00008990 	.word	0x00008990

0000243c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    243c:	b5f0      	push	{r4, r5, r6, r7, lr}
    243e:	b087      	sub	sp, #28
    2440:	0004      	movs	r4, r0
    2442:	000d      	movs	r5, r1
    2444:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    2446:	0008      	movs	r0, r1
    2448:	4b85      	ldr	r3, [pc, #532]	; (2660 <tc_init+0x224>)
    244a:	4798      	blx	r3
    244c:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    244e:	ab05      	add	r3, sp, #20
    2450:	221b      	movs	r2, #27
    2452:	701a      	strb	r2, [r3, #0]
    2454:	3201      	adds	r2, #1
    2456:	705a      	strb	r2, [r3, #1]
    2458:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    245a:	ab03      	add	r3, sp, #12
    245c:	2280      	movs	r2, #128	; 0x80
    245e:	0112      	lsls	r2, r2, #4
    2460:	801a      	strh	r2, [r3, #0]
    2462:	2280      	movs	r2, #128	; 0x80
    2464:	0152      	lsls	r2, r2, #5
    2466:	805a      	strh	r2, [r3, #2]
    2468:	2280      	movs	r2, #128	; 0x80
    246a:	0192      	lsls	r2, r2, #6
    246c:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    246e:	2300      	movs	r3, #0
    2470:	60a3      	str	r3, [r4, #8]
    2472:	60e3      	str	r3, [r4, #12]
    2474:	6123      	str	r3, [r4, #16]
    2476:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    2478:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    247a:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    247c:	0082      	lsls	r2, r0, #2
    247e:	4b79      	ldr	r3, [pc, #484]	; (2664 <tc_init+0x228>)
    2480:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    2482:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2484:	78b3      	ldrb	r3, [r6, #2]
    2486:	2b08      	cmp	r3, #8
    2488:	d006      	beq.n	2498 <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    248a:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    248c:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    248e:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2490:	07db      	lsls	r3, r3, #31
    2492:	d505      	bpl.n	24a0 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    2494:	b007      	add	sp, #28
    2496:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    2498:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    249a:	07fa      	lsls	r2, r7, #31
    249c:	d5fa      	bpl.n	2494 <tc_init+0x58>
    249e:	e7f4      	b.n	248a <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    24a0:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    24a2:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    24a4:	06db      	lsls	r3, r3, #27
    24a6:	d4f5      	bmi.n	2494 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    24a8:	882b      	ldrh	r3, [r5, #0]
    24aa:	079b      	lsls	r3, r3, #30
    24ac:	d4f2      	bmi.n	2494 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    24ae:	7c33      	ldrb	r3, [r6, #16]
    24b0:	2b00      	cmp	r3, #0
    24b2:	d179      	bne.n	25a8 <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    24b4:	7f33      	ldrb	r3, [r6, #28]
    24b6:	2b00      	cmp	r3, #0
    24b8:	d000      	beq.n	24bc <tc_init+0x80>
    24ba:	e081      	b.n	25c0 <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    24bc:	496a      	ldr	r1, [pc, #424]	; (2668 <tc_init+0x22c>)
    24be:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    24c0:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    24c2:	ab03      	add	r3, sp, #12
    24c4:	5ad3      	ldrh	r3, [r2, r3]
    24c6:	4303      	orrs	r3, r0
    24c8:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    24ca:	78b3      	ldrb	r3, [r6, #2]
    24cc:	2b08      	cmp	r3, #8
    24ce:	d100      	bne.n	24d2 <tc_init+0x96>
    24d0:	e086      	b.n	25e0 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    24d2:	a901      	add	r1, sp, #4
    24d4:	7833      	ldrb	r3, [r6, #0]
    24d6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    24d8:	ab05      	add	r3, sp, #20
    24da:	5ddf      	ldrb	r7, [r3, r7]
    24dc:	0038      	movs	r0, r7
    24de:	4b63      	ldr	r3, [pc, #396]	; (266c <tc_init+0x230>)
    24e0:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    24e2:	0038      	movs	r0, r7
    24e4:	4b62      	ldr	r3, [pc, #392]	; (2670 <tc_init+0x234>)
    24e6:	4798      	blx	r3
	ctrla_tmp =
    24e8:	8931      	ldrh	r1, [r6, #8]
    24ea:	88b3      	ldrh	r3, [r6, #4]
    24ec:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    24ee:	78b1      	ldrb	r1, [r6, #2]
    24f0:	79b2      	ldrb	r2, [r6, #6]
    24f2:	4311      	orrs	r1, r2
	ctrla_tmp =
    24f4:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    24f6:	7873      	ldrb	r3, [r6, #1]
    24f8:	2b00      	cmp	r3, #0
    24fa:	d002      	beq.n	2502 <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    24fc:	2380      	movs	r3, #128	; 0x80
    24fe:	011b      	lsls	r3, r3, #4
    2500:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2502:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2504:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2506:	b25b      	sxtb	r3, r3
    2508:	2b00      	cmp	r3, #0
    250a:	dbfb      	blt.n	2504 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    250c:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    250e:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    2510:	1e4b      	subs	r3, r1, #1
    2512:	4199      	sbcs	r1, r3
    2514:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    2516:	7bb3      	ldrb	r3, [r6, #14]
    2518:	2b00      	cmp	r3, #0
    251a:	d001      	beq.n	2520 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    251c:	2301      	movs	r3, #1
    251e:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2520:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2522:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2524:	b25b      	sxtb	r3, r3
    2526:	2b00      	cmp	r3, #0
    2528:	dbfb      	blt.n	2522 <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    252a:	23ff      	movs	r3, #255	; 0xff
    252c:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    252e:	2900      	cmp	r1, #0
    2530:	d005      	beq.n	253e <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2532:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2534:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    2536:	b25b      	sxtb	r3, r3
    2538:	2b00      	cmp	r3, #0
    253a:	dbfb      	blt.n	2534 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    253c:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    253e:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    2540:	7af3      	ldrb	r3, [r6, #11]
    2542:	2b00      	cmp	r3, #0
    2544:	d001      	beq.n	254a <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2546:	2310      	movs	r3, #16
    2548:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    254a:	7b33      	ldrb	r3, [r6, #12]
    254c:	2b00      	cmp	r3, #0
    254e:	d001      	beq.n	2554 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2550:	2320      	movs	r3, #32
    2552:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2554:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2556:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2558:	b25b      	sxtb	r3, r3
    255a:	2b00      	cmp	r3, #0
    255c:	dbfb      	blt.n	2556 <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    255e:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2560:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2562:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2564:	b25b      	sxtb	r3, r3
    2566:	2b00      	cmp	r3, #0
    2568:	dbfb      	blt.n	2562 <tc_init+0x126>
	switch (module_inst->counter_size) {
    256a:	7923      	ldrb	r3, [r4, #4]
    256c:	2b04      	cmp	r3, #4
    256e:	d03f      	beq.n	25f0 <tc_init+0x1b4>
    2570:	2b08      	cmp	r3, #8
    2572:	d05e      	beq.n	2632 <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    2574:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    2576:	2b00      	cmp	r3, #0
    2578:	d000      	beq.n	257c <tc_init+0x140>
    257a:	e78b      	b.n	2494 <tc_init+0x58>
    257c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    257e:	b25b      	sxtb	r3, r3
    2580:	2b00      	cmp	r3, #0
    2582:	dbfb      	blt.n	257c <tc_init+0x140>
				= config->counter_16_bit.value;
    2584:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    2586:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2588:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    258a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    258c:	b25b      	sxtb	r3, r3
    258e:	2b00      	cmp	r3, #0
    2590:	dbfb      	blt.n	258a <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    2592:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    2594:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2596:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2598:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    259a:	b25b      	sxtb	r3, r3
    259c:	2b00      	cmp	r3, #0
    259e:	dbfb      	blt.n	2598 <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    25a0:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    25a2:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    25a4:	2000      	movs	r0, #0
    25a6:	e775      	b.n	2494 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    25a8:	a902      	add	r1, sp, #8
    25aa:	2301      	movs	r3, #1
    25ac:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    25ae:	2200      	movs	r2, #0
    25b0:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    25b2:	7e32      	ldrb	r2, [r6, #24]
    25b4:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    25b6:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    25b8:	7d30      	ldrb	r0, [r6, #20]
    25ba:	4b2e      	ldr	r3, [pc, #184]	; (2674 <tc_init+0x238>)
    25bc:	4798      	blx	r3
    25be:	e779      	b.n	24b4 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    25c0:	a902      	add	r1, sp, #8
    25c2:	2301      	movs	r3, #1
    25c4:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    25c6:	2200      	movs	r2, #0
    25c8:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    25ca:	3224      	adds	r2, #36	; 0x24
    25cc:	18b2      	adds	r2, r6, r2
    25ce:	7812      	ldrb	r2, [r2, #0]
    25d0:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    25d2:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    25d4:	331f      	adds	r3, #31
    25d6:	18f3      	adds	r3, r6, r3
    25d8:	7818      	ldrb	r0, [r3, #0]
    25da:	4b26      	ldr	r3, [pc, #152]	; (2674 <tc_init+0x238>)
    25dc:	4798      	blx	r3
    25de:	e76d      	b.n	24bc <tc_init+0x80>
    25e0:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    25e2:	1c7a      	adds	r2, r7, #1
    25e4:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    25e6:	ab03      	add	r3, sp, #12
    25e8:	5ad3      	ldrh	r3, [r2, r3]
    25ea:	4303      	orrs	r3, r0
    25ec:	620b      	str	r3, [r1, #32]
    25ee:	e770      	b.n	24d2 <tc_init+0x96>
    25f0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    25f2:	b25b      	sxtb	r3, r3
    25f4:	2b00      	cmp	r3, #0
    25f6:	dbfb      	blt.n	25f0 <tc_init+0x1b4>
					config->counter_8_bit.value;
    25f8:	2328      	movs	r3, #40	; 0x28
    25fa:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    25fc:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25fe:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2600:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2602:	b25b      	sxtb	r3, r3
    2604:	2b00      	cmp	r3, #0
    2606:	dbfb      	blt.n	2600 <tc_init+0x1c4>
					config->counter_8_bit.period;
    2608:	2329      	movs	r3, #41	; 0x29
    260a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    260c:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    260e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2610:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2612:	b25b      	sxtb	r3, r3
    2614:	2b00      	cmp	r3, #0
    2616:	dbfb      	blt.n	2610 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    2618:	232a      	movs	r3, #42	; 0x2a
    261a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    261c:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    261e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2620:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2622:	b25b      	sxtb	r3, r3
    2624:	2b00      	cmp	r3, #0
    2626:	dbfb      	blt.n	2620 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    2628:	232b      	movs	r3, #43	; 0x2b
    262a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    262c:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    262e:	2000      	movs	r0, #0
    2630:	e730      	b.n	2494 <tc_init+0x58>
    2632:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2634:	b25b      	sxtb	r3, r3
    2636:	2b00      	cmp	r3, #0
    2638:	dbfb      	blt.n	2632 <tc_init+0x1f6>
				= config->counter_32_bit.value;
    263a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    263c:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    263e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2640:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2642:	b25b      	sxtb	r3, r3
    2644:	2b00      	cmp	r3, #0
    2646:	dbfb      	blt.n	2640 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    2648:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    264a:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    264c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    264e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2650:	b25b      	sxtb	r3, r3
    2652:	2b00      	cmp	r3, #0
    2654:	dbfb      	blt.n	264e <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    2656:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    2658:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    265a:	2000      	movs	r0, #0
    265c:	e71a      	b.n	2494 <tc_init+0x58>
    265e:	46c0      	nop			; (mov r8, r8)
    2660:	00002405 	.word	0x00002405
    2664:	20000908 	.word	0x20000908
    2668:	40000400 	.word	0x40000400
    266c:	000021e5 	.word	0x000021e5
    2670:	00002159 	.word	0x00002159
    2674:	000022dd 	.word	0x000022dd

00002678 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    2678:	6802      	ldr	r2, [r0, #0]
    267a:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    267c:	b25b      	sxtb	r3, r3
    267e:	2b00      	cmp	r3, #0
    2680:	dbfb      	blt.n	267a <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    2682:	7903      	ldrb	r3, [r0, #4]
    2684:	2b04      	cmp	r3, #4
    2686:	d005      	beq.n	2694 <tc_get_count_value+0x1c>
    2688:	2b08      	cmp	r3, #8
    268a:	d009      	beq.n	26a0 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    268c:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    268e:	2b00      	cmp	r3, #0
    2690:	d003      	beq.n	269a <tc_get_count_value+0x22>
}
    2692:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    2694:	7c10      	ldrb	r0, [r2, #16]
    2696:	b2c0      	uxtb	r0, r0
    2698:	e7fb      	b.n	2692 <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    269a:	8a10      	ldrh	r0, [r2, #16]
    269c:	b280      	uxth	r0, r0
    269e:	e7f8      	b.n	2692 <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    26a0:	6910      	ldr	r0, [r2, #16]
    26a2:	e7f6      	b.n	2692 <tc_get_count_value+0x1a>

000026a4 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    26a4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    26a6:	6804      	ldr	r4, [r0, #0]
    26a8:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    26aa:	b25b      	sxtb	r3, r3
    26ac:	2b00      	cmp	r3, #0
    26ae:	dbfb      	blt.n	26a8 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    26b0:	7903      	ldrb	r3, [r0, #4]
    26b2:	2b04      	cmp	r3, #4
    26b4:	d005      	beq.n	26c2 <tc_set_compare_value+0x1e>
    26b6:	2b08      	cmp	r3, #8
    26b8:	d014      	beq.n	26e4 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    26ba:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    26bc:	2b00      	cmp	r3, #0
    26be:	d008      	beq.n	26d2 <tc_set_compare_value+0x2e>
}
    26c0:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    26c2:	2017      	movs	r0, #23
			if (channel_index <
    26c4:	2901      	cmp	r1, #1
    26c6:	d8fb      	bhi.n	26c0 <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    26c8:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    26ca:	1861      	adds	r1, r4, r1
    26cc:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    26ce:	2000      	movs	r0, #0
    26d0:	e7f6      	b.n	26c0 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    26d2:	2017      	movs	r0, #23
			if (channel_index <
    26d4:	2901      	cmp	r1, #1
    26d6:	d8f3      	bhi.n	26c0 <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    26d8:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    26da:	310c      	adds	r1, #12
    26dc:	0049      	lsls	r1, r1, #1
    26de:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    26e0:	2000      	movs	r0, #0
    26e2:	e7ed      	b.n	26c0 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    26e4:	2017      	movs	r0, #23
			if (channel_index <
    26e6:	2901      	cmp	r1, #1
    26e8:	d8ea      	bhi.n	26c0 <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    26ea:	3106      	adds	r1, #6
    26ec:	0089      	lsls	r1, r1, #2
    26ee:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    26f0:	2000      	movs	r0, #0
    26f2:	e7e5      	b.n	26c0 <tc_set_compare_value+0x1c>

000026f4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    26f4:	e7fe      	b.n	26f4 <Dummy_Handler>
	...

000026f8 <Reset_Handler>:
{
    26f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    26fa:	4a2a      	ldr	r2, [pc, #168]	; (27a4 <Reset_Handler+0xac>)
    26fc:	4b2a      	ldr	r3, [pc, #168]	; (27a8 <Reset_Handler+0xb0>)
    26fe:	429a      	cmp	r2, r3
    2700:	d011      	beq.n	2726 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2702:	001a      	movs	r2, r3
    2704:	4b29      	ldr	r3, [pc, #164]	; (27ac <Reset_Handler+0xb4>)
    2706:	429a      	cmp	r2, r3
    2708:	d20d      	bcs.n	2726 <Reset_Handler+0x2e>
    270a:	4a29      	ldr	r2, [pc, #164]	; (27b0 <Reset_Handler+0xb8>)
    270c:	3303      	adds	r3, #3
    270e:	1a9b      	subs	r3, r3, r2
    2710:	089b      	lsrs	r3, r3, #2
    2712:	3301      	adds	r3, #1
    2714:	009b      	lsls	r3, r3, #2
    2716:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2718:	4823      	ldr	r0, [pc, #140]	; (27a8 <Reset_Handler+0xb0>)
    271a:	4922      	ldr	r1, [pc, #136]	; (27a4 <Reset_Handler+0xac>)
    271c:	588c      	ldr	r4, [r1, r2]
    271e:	5084      	str	r4, [r0, r2]
    2720:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2722:	429a      	cmp	r2, r3
    2724:	d1fa      	bne.n	271c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2726:	4a23      	ldr	r2, [pc, #140]	; (27b4 <Reset_Handler+0xbc>)
    2728:	4b23      	ldr	r3, [pc, #140]	; (27b8 <Reset_Handler+0xc0>)
    272a:	429a      	cmp	r2, r3
    272c:	d20a      	bcs.n	2744 <Reset_Handler+0x4c>
    272e:	43d3      	mvns	r3, r2
    2730:	4921      	ldr	r1, [pc, #132]	; (27b8 <Reset_Handler+0xc0>)
    2732:	185b      	adds	r3, r3, r1
    2734:	2103      	movs	r1, #3
    2736:	438b      	bics	r3, r1
    2738:	3304      	adds	r3, #4
    273a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    273c:	2100      	movs	r1, #0
    273e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2740:	4293      	cmp	r3, r2
    2742:	d1fc      	bne.n	273e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2744:	4a1d      	ldr	r2, [pc, #116]	; (27bc <Reset_Handler+0xc4>)
    2746:	21ff      	movs	r1, #255	; 0xff
    2748:	4b1d      	ldr	r3, [pc, #116]	; (27c0 <Reset_Handler+0xc8>)
    274a:	438b      	bics	r3, r1
    274c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    274e:	39fd      	subs	r1, #253	; 0xfd
    2750:	2390      	movs	r3, #144	; 0x90
    2752:	005b      	lsls	r3, r3, #1
    2754:	4a1b      	ldr	r2, [pc, #108]	; (27c4 <Reset_Handler+0xcc>)
    2756:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2758:	4a1b      	ldr	r2, [pc, #108]	; (27c8 <Reset_Handler+0xd0>)
    275a:	78d3      	ldrb	r3, [r2, #3]
    275c:	2503      	movs	r5, #3
    275e:	43ab      	bics	r3, r5
    2760:	2402      	movs	r4, #2
    2762:	4323      	orrs	r3, r4
    2764:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2766:	78d3      	ldrb	r3, [r2, #3]
    2768:	270c      	movs	r7, #12
    276a:	43bb      	bics	r3, r7
    276c:	2608      	movs	r6, #8
    276e:	4333      	orrs	r3, r6
    2770:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2772:	4b16      	ldr	r3, [pc, #88]	; (27cc <Reset_Handler+0xd4>)
    2774:	7b98      	ldrb	r0, [r3, #14]
    2776:	2230      	movs	r2, #48	; 0x30
    2778:	4390      	bics	r0, r2
    277a:	2220      	movs	r2, #32
    277c:	4310      	orrs	r0, r2
    277e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2780:	7b99      	ldrb	r1, [r3, #14]
    2782:	43b9      	bics	r1, r7
    2784:	4331      	orrs	r1, r6
    2786:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2788:	7b9a      	ldrb	r2, [r3, #14]
    278a:	43aa      	bics	r2, r5
    278c:	4322      	orrs	r2, r4
    278e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2790:	4a0f      	ldr	r2, [pc, #60]	; (27d0 <Reset_Handler+0xd8>)
    2792:	6853      	ldr	r3, [r2, #4]
    2794:	2180      	movs	r1, #128	; 0x80
    2796:	430b      	orrs	r3, r1
    2798:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    279a:	4b0e      	ldr	r3, [pc, #56]	; (27d4 <Reset_Handler+0xdc>)
    279c:	4798      	blx	r3
        main();
    279e:	4b0e      	ldr	r3, [pc, #56]	; (27d8 <Reset_Handler+0xe0>)
    27a0:	4798      	blx	r3
    27a2:	e7fe      	b.n	27a2 <Reset_Handler+0xaa>
    27a4:	00008dc0 	.word	0x00008dc0
    27a8:	20000000 	.word	0x20000000
    27ac:	200001e0 	.word	0x200001e0
    27b0:	20000004 	.word	0x20000004
    27b4:	200001e0 	.word	0x200001e0
    27b8:	20000a28 	.word	0x20000a28
    27bc:	e000ed00 	.word	0xe000ed00
    27c0:	00000000 	.word	0x00000000
    27c4:	41007000 	.word	0x41007000
    27c8:	41005000 	.word	0x41005000
    27cc:	41004800 	.word	0x41004800
    27d0:	41004000 	.word	0x41004000
    27d4:	00003421 	.word	0x00003421
    27d8:	00003319 	.word	0x00003319

000027dc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    27dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    27de:	46c6      	mov	lr, r8
    27e0:	b500      	push	{lr}
    27e2:	000c      	movs	r4, r1
    27e4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    27e6:	2800      	cmp	r0, #0
    27e8:	d10f      	bne.n	280a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    27ea:	2a00      	cmp	r2, #0
    27ec:	dd11      	ble.n	2812 <_read+0x36>
    27ee:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    27f0:	4e09      	ldr	r6, [pc, #36]	; (2818 <_read+0x3c>)
    27f2:	4d0a      	ldr	r5, [pc, #40]	; (281c <_read+0x40>)
    27f4:	6830      	ldr	r0, [r6, #0]
    27f6:	0021      	movs	r1, r4
    27f8:	682b      	ldr	r3, [r5, #0]
    27fa:	4798      	blx	r3
		ptr++;
    27fc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    27fe:	42bc      	cmp	r4, r7
    2800:	d1f8      	bne.n	27f4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    2802:	4640      	mov	r0, r8
    2804:	bc04      	pop	{r2}
    2806:	4690      	mov	r8, r2
    2808:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    280a:	2301      	movs	r3, #1
    280c:	425b      	negs	r3, r3
    280e:	4698      	mov	r8, r3
    2810:	e7f7      	b.n	2802 <_read+0x26>
	for (; len > 0; --len) {
    2812:	4680      	mov	r8, r0
    2814:	e7f5      	b.n	2802 <_read+0x26>
    2816:	46c0      	nop			; (mov r8, r8)
    2818:	2000091c 	.word	0x2000091c
    281c:	20000914 	.word	0x20000914

00002820 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2820:	b5f0      	push	{r4, r5, r6, r7, lr}
    2822:	46c6      	mov	lr, r8
    2824:	b500      	push	{lr}
    2826:	000e      	movs	r6, r1
    2828:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    282a:	3801      	subs	r0, #1
    282c:	2802      	cmp	r0, #2
    282e:	d810      	bhi.n	2852 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2830:	2a00      	cmp	r2, #0
    2832:	d011      	beq.n	2858 <_write+0x38>
    2834:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2836:	4b0c      	ldr	r3, [pc, #48]	; (2868 <_write+0x48>)
    2838:	4698      	mov	r8, r3
    283a:	4f0c      	ldr	r7, [pc, #48]	; (286c <_write+0x4c>)
    283c:	4643      	mov	r3, r8
    283e:	6818      	ldr	r0, [r3, #0]
    2840:	5d31      	ldrb	r1, [r6, r4]
    2842:	683b      	ldr	r3, [r7, #0]
    2844:	4798      	blx	r3
    2846:	2800      	cmp	r0, #0
    2848:	db08      	blt.n	285c <_write+0x3c>
			return -1;
		}
		++nChars;
    284a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    284c:	42a5      	cmp	r5, r4
    284e:	d1f5      	bne.n	283c <_write+0x1c>
    2850:	e006      	b.n	2860 <_write+0x40>
		return -1;
    2852:	2401      	movs	r4, #1
    2854:	4264      	negs	r4, r4
    2856:	e003      	b.n	2860 <_write+0x40>
	for (; len != 0; --len) {
    2858:	0014      	movs	r4, r2
    285a:	e001      	b.n	2860 <_write+0x40>
			return -1;
    285c:	2401      	movs	r4, #1
    285e:	4264      	negs	r4, r4
	}
	return nChars;
}
    2860:	0020      	movs	r0, r4
    2862:	bc04      	pop	{r2}
    2864:	4690      	mov	r8, r2
    2866:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2868:	2000091c 	.word	0x2000091c
    286c:	20000918 	.word	0x20000918

00002870 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2870:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2872:	4a06      	ldr	r2, [pc, #24]	; (288c <_sbrk+0x1c>)
    2874:	6812      	ldr	r2, [r2, #0]
    2876:	2a00      	cmp	r2, #0
    2878:	d004      	beq.n	2884 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    287a:	4a04      	ldr	r2, [pc, #16]	; (288c <_sbrk+0x1c>)
    287c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    287e:	18c3      	adds	r3, r0, r3
    2880:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2882:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2884:	4902      	ldr	r1, [pc, #8]	; (2890 <_sbrk+0x20>)
    2886:	4a01      	ldr	r2, [pc, #4]	; (288c <_sbrk+0x1c>)
    2888:	6011      	str	r1, [r2, #0]
    288a:	e7f6      	b.n	287a <_sbrk+0xa>
    288c:	20000240 	.word	0x20000240
    2890:	20002a28 	.word	0x20002a28

00002894 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2894:	2001      	movs	r0, #1
    2896:	4240      	negs	r0, r0
    2898:	4770      	bx	lr

0000289a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    289a:	2380      	movs	r3, #128	; 0x80
    289c:	019b      	lsls	r3, r3, #6
    289e:	604b      	str	r3, [r1, #4]

	return 0;
}
    28a0:	2000      	movs	r0, #0
    28a2:	4770      	bx	lr

000028a4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    28a4:	2001      	movs	r0, #1
    28a6:	4770      	bx	lr

000028a8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    28a8:	2000      	movs	r0, #0
    28aa:	4770      	bx	lr

000028ac <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    28ac:	b510      	push	{r4, lr}
	nwkIb.nwkSeqNum = 0;
    28ae:	4a0d      	ldr	r2, [pc, #52]	; (28e4 <NWK_Init+0x38>)
    28b0:	2300      	movs	r3, #0
    28b2:	7113      	strb	r3, [r2, #4]
	nwkIb.macSeqNum = 0;
    28b4:	7153      	strb	r3, [r2, #5]
	nwkIb.addr = 0;
    28b6:	8013      	strh	r3, [r2, #0]
	nwkIb.lock = 0;
    28b8:	2158      	movs	r1, #88	; 0x58
    28ba:	5253      	strh	r3, [r2, r1]
    28bc:	0013      	movs	r3, r2
    28be:	3240      	adds	r2, #64	; 0x40

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    28c0:	2100      	movs	r1, #0
    28c2:	6099      	str	r1, [r3, #8]
    28c4:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    28c6:	4293      	cmp	r3, r2
    28c8:	d1fb      	bne.n	28c2 <NWK_Init+0x16>
	}

	nwkTxInit();
    28ca:	4b07      	ldr	r3, [pc, #28]	; (28e8 <NWK_Init+0x3c>)
    28cc:	4798      	blx	r3
	nwkRxInit();
    28ce:	4b07      	ldr	r3, [pc, #28]	; (28ec <NWK_Init+0x40>)
    28d0:	4798      	blx	r3
	nwkFrameInit();
    28d2:	4b07      	ldr	r3, [pc, #28]	; (28f0 <NWK_Init+0x44>)
    28d4:	4798      	blx	r3
	nwkDataReqInit();
    28d6:	4b07      	ldr	r3, [pc, #28]	; (28f4 <NWK_Init+0x48>)
    28d8:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    28da:	4b07      	ldr	r3, [pc, #28]	; (28f8 <NWK_Init+0x4c>)
    28dc:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    28de:	4b07      	ldr	r3, [pc, #28]	; (28fc <NWK_Init+0x50>)
    28e0:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
    28e2:	bd10      	pop	{r4, pc}
    28e4:	20000920 	.word	0x20000920
    28e8:	00002b99 	.word	0x00002b99
    28ec:	00002a91 	.word	0x00002a91
    28f0:	0000291d 	.word	0x0000291d
    28f4:	00002911 	.word	0x00002911
    28f8:	0000296d 	.word	0x0000296d
    28fc:	00002ad1 	.word	0x00002ad1

00002900 <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    2900:	3002      	adds	r0, #2
    2902:	0080      	lsls	r0, r0, #2
    2904:	4b01      	ldr	r3, [pc, #4]	; (290c <NWK_OpenEndpoint+0xc>)
    2906:	50c1      	str	r1, [r0, r3]
}
    2908:	4770      	bx	lr
    290a:	46c0      	nop			; (mov r8, r8)
    290c:	20000920 	.word	0x20000920

00002910 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    2910:	2200      	movs	r2, #0
    2912:	4b01      	ldr	r3, [pc, #4]	; (2918 <nwkDataReqInit+0x8>)
    2914:	601a      	str	r2, [r3, #0]
}
    2916:	4770      	bx	lr
    2918:	20000244 	.word	0x20000244

0000291c <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    291c:	4b03      	ldr	r3, [pc, #12]	; (292c <nwkFrameInit+0x10>)
    291e:	2200      	movs	r2, #0
    2920:	701a      	strb	r2, [r3, #0]
    2922:	218d      	movs	r1, #141	; 0x8d
    2924:	545a      	strb	r2, [r3, r1]
    2926:	318d      	adds	r1, #141	; 0x8d
    2928:	545a      	strb	r2, [r3, r1]
	}
}
    292a:	4770      	bx	lr
    292c:	20000248 	.word	0x20000248

00002930 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    2930:	2800      	cmp	r0, #0
    2932:	d012      	beq.n	295a <nwkFrameNext+0x2a>
		frame = nwkFrameFrames;
	} else {
		frame++;
    2934:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2936:	4b0c      	ldr	r3, [pc, #48]	; (2968 <nwkFrameNext+0x38>)
    2938:	33a8      	adds	r3, #168	; 0xa8
    293a:	33ff      	adds	r3, #255	; 0xff
    293c:	4298      	cmp	r0, r3
    293e:	d210      	bcs.n	2962 <nwkFrameNext+0x32>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2940:	7803      	ldrb	r3, [r0, #0]
    2942:	2b00      	cmp	r3, #0
    2944:	d10c      	bne.n	2960 <nwkFrameNext+0x30>
	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2946:	4a08      	ldr	r2, [pc, #32]	; (2968 <nwkFrameNext+0x38>)
    2948:	32a8      	adds	r2, #168	; 0xa8
    294a:	32ff      	adds	r2, #255	; 0xff
    294c:	308d      	adds	r0, #141	; 0x8d
    294e:	4290      	cmp	r0, r2
    2950:	d205      	bcs.n	295e <nwkFrameNext+0x2e>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2952:	7803      	ldrb	r3, [r0, #0]
    2954:	2b00      	cmp	r3, #0
    2956:	d0f9      	beq.n	294c <nwkFrameNext+0x1c>
    2958:	e002      	b.n	2960 <nwkFrameNext+0x30>
		frame = nwkFrameFrames;
    295a:	4803      	ldr	r0, [pc, #12]	; (2968 <nwkFrameNext+0x38>)
    295c:	e7f0      	b.n	2940 <nwkFrameNext+0x10>
			return frame;
		}
	}

	return NULL;
    295e:	2000      	movs	r0, #0
}
    2960:	4770      	bx	lr
	return NULL;
    2962:	2000      	movs	r0, #0
    2964:	e7fc      	b.n	2960 <nwkFrameNext+0x30>
    2966:	46c0      	nop			; (mov r8, r8)
    2968:	20000248 	.word	0x20000248

0000296c <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    296c:	b5f0      	push	{r4, r5, r6, r7, lr}
    296e:	4b09      	ldr	r3, [pc, #36]	; (2994 <nwkRouteInit+0x28>)
    2970:	3302      	adds	r3, #2
    2972:	2200      	movs	r2, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2974:	2701      	movs	r7, #1
    2976:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    2978:	4c06      	ldr	r4, [pc, #24]	; (2994 <nwkRouteInit+0x28>)
    297a:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    297c:	2500      	movs	r5, #0
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    297e:	801f      	strh	r7, [r3, #0]
		nwkRouteTable[i].fixed = 0;
    2980:	00d0      	lsls	r0, r2, #3
    2982:	5d01      	ldrb	r1, [r0, r4]
    2984:	43b1      	bics	r1, r6
    2986:	5501      	strb	r1, [r0, r4]
		nwkRouteTable[i].rank = 0;
    2988:	711d      	strb	r5, [r3, #4]
    298a:	3201      	adds	r2, #1
    298c:	3308      	adds	r3, #8
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    298e:	2a64      	cmp	r2, #100	; 0x64
    2990:	d1f5      	bne.n	297e <nwkRouteInit+0x12>
	}
}
    2992:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2994:	200003f0 	.word	0x200003f0

00002998 <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    2998:	b530      	push	{r4, r5, lr}
    299a:	4a0c      	ldr	r2, [pc, #48]	; (29cc <NWK_RouteFindEntry+0x34>)
    299c:	3202      	adds	r2, #2
    299e:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    29a0:	4d0a      	ldr	r5, [pc, #40]	; (29cc <NWK_RouteFindEntry+0x34>)
    29a2:	e003      	b.n	29ac <NWK_RouteFindEntry+0x14>
    29a4:	3301      	adds	r3, #1
    29a6:	3208      	adds	r2, #8
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    29a8:	2b64      	cmp	r3, #100	; 0x64
    29aa:	d00c      	beq.n	29c6 <NWK_RouteFindEntry+0x2e>
		if (nwkRouteTable[i].dstAddr == dst &&
    29ac:	8814      	ldrh	r4, [r2, #0]
    29ae:	4284      	cmp	r4, r0
    29b0:	d1f8      	bne.n	29a4 <NWK_RouteFindEntry+0xc>
				nwkRouteTable[i].multicast == multicast) {
    29b2:	00dc      	lsls	r4, r3, #3
    29b4:	5d64      	ldrb	r4, [r4, r5]
    29b6:	07a4      	lsls	r4, r4, #30
    29b8:	0fe4      	lsrs	r4, r4, #31
		if (nwkRouteTable[i].dstAddr == dst &&
    29ba:	428c      	cmp	r4, r1
    29bc:	d1f2      	bne.n	29a4 <NWK_RouteFindEntry+0xc>
			return &nwkRouteTable[i];
    29be:	00db      	lsls	r3, r3, #3
    29c0:	4802      	ldr	r0, [pc, #8]	; (29cc <NWK_RouteFindEntry+0x34>)
    29c2:	18c0      	adds	r0, r0, r3
		}
	}

	return NULL;
}
    29c4:	bd30      	pop	{r4, r5, pc}
	return NULL;
    29c6:	2000      	movs	r0, #0
    29c8:	e7fc      	b.n	29c4 <NWK_RouteFindEntry+0x2c>
    29ca:	46c0      	nop			; (mov r8, r8)
    29cc:	200003f0 	.word	0x200003f0

000029d0 <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    29d0:	7803      	ldrb	r3, [r0, #0]
    29d2:	07db      	lsls	r3, r3, #31
    29d4:	d404      	bmi.n	29e0 <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    29d6:	2301      	movs	r3, #1
    29d8:	425b      	negs	r3, r3
    29da:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    29dc:	2300      	movs	r3, #0
    29de:	7183      	strb	r3, [r0, #6]
}
    29e0:	4770      	bx	lr
	...

000029e4 <nwkRouteRemove>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    29e4:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    29e6:	4b03      	ldr	r3, [pc, #12]	; (29f4 <nwkRouteRemove+0x10>)
    29e8:	4798      	blx	r3
	if (entry) {
    29ea:	2800      	cmp	r0, #0
    29ec:	d001      	beq.n	29f2 <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    29ee:	4b02      	ldr	r3, [pc, #8]	; (29f8 <nwkRouteRemove+0x14>)
    29f0:	4798      	blx	r3
	}
}
    29f2:	bd10      	pop	{r4, pc}
    29f4:	00002999 	.word	0x00002999
    29f8:	000029d1 	.word	0x000029d1

000029fc <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    29fc:	b510      	push	{r4, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    29fe:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2a00:	2300      	movs	r3, #0
	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2a02:	2a06      	cmp	r2, #6
    2a04:	d001      	beq.n	2a0a <nwkRouteErrorReceived+0xe>
	}

	nwkRouteRemove(command->dstAddr, command->multicast);

	return true;
}
    2a06:	0018      	movs	r0, r3
    2a08:	bd10      	pop	{r4, pc}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    2a0a:	6883      	ldr	r3, [r0, #8]
	nwkRouteRemove(command->dstAddr, command->multicast);
    2a0c:	7959      	ldrb	r1, [r3, #5]
    2a0e:	78da      	ldrb	r2, [r3, #3]
    2a10:	7918      	ldrb	r0, [r3, #4]
    2a12:	0200      	lsls	r0, r0, #8
    2a14:	4310      	orrs	r0, r2
    2a16:	4b02      	ldr	r3, [pc, #8]	; (2a20 <nwkRouteErrorReceived+0x24>)
    2a18:	4798      	blx	r3
	return true;
    2a1a:	2301      	movs	r3, #1
    2a1c:	e7f3      	b.n	2a06 <nwkRouteErrorReceived+0xa>
    2a1e:	46c0      	nop			; (mov r8, r8)
    2a20:	000029e5 	.word	0x000029e5

00002a24 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    2a24:	b510      	push	{r4, lr}
	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
		return false;
	}
#endif

	if (ind->size < 1) {
    2a26:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2a28:	2300      	movs	r3, #0
	if (ind->size < 1) {
    2a2a:	2a00      	cmp	r2, #0
    2a2c:	d00a      	beq.n	2a44 <nwkRxSeriveDataInd+0x20>
	}

	switch (ind->data[0]) {
    2a2e:	6883      	ldr	r3, [r0, #8]
    2a30:	781b      	ldrb	r3, [r3, #0]
    2a32:	2b00      	cmp	r3, #0
    2a34:	d003      	beq.n	2a3e <nwkRxSeriveDataInd+0x1a>
    2a36:	2b01      	cmp	r3, #1
    2a38:	d006      	beq.n	2a48 <nwkRxSeriveDataInd+0x24>
	case NWK_COMMAND_ROUTE_REPLY:
		return nwkRouteDiscoveryReplyReceived(ind);
#endif

	default:
		return false;
    2a3a:	2300      	movs	r3, #0
    2a3c:	e002      	b.n	2a44 <nwkRxSeriveDataInd+0x20>
		return nwkTxAckReceived(ind);
    2a3e:	4b04      	ldr	r3, [pc, #16]	; (2a50 <nwkRxSeriveDataInd+0x2c>)
    2a40:	4798      	blx	r3
    2a42:	0003      	movs	r3, r0
	}
}
    2a44:	0018      	movs	r0, r3
    2a46:	bd10      	pop	{r4, pc}
		return nwkRouteErrorReceived(ind);
    2a48:	4b02      	ldr	r3, [pc, #8]	; (2a54 <nwkRxSeriveDataInd+0x30>)
    2a4a:	4798      	blx	r3
    2a4c:	0003      	movs	r3, r0
    2a4e:	e7f9      	b.n	2a44 <nwkRxSeriveDataInd+0x20>
    2a50:	00002bcd 	.word	0x00002bcd
    2a54:	000029fd 	.word	0x000029fd

00002a58 <nwkRxDuplicateRejectionTimerHandler>:
{
    2a58:	b570      	push	{r4, r5, r6, lr}
    2a5a:	490b      	ldr	r1, [pc, #44]	; (2a88 <nwkRxDuplicateRejectionTimerHandler+0x30>)
    2a5c:	1d0b      	adds	r3, r1, #4
    2a5e:	3140      	adds	r1, #64	; 0x40
	bool restart = false;
    2a60:	2400      	movs	r4, #0
			restart = true;
    2a62:	2501      	movs	r5, #1
    2a64:	e002      	b.n	2a6c <nwkRxDuplicateRejectionTimerHandler+0x14>
    2a66:	3306      	adds	r3, #6
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2a68:	428b      	cmp	r3, r1
    2a6a:	d006      	beq.n	2a7a <nwkRxDuplicateRejectionTimerHandler+0x22>
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    2a6c:	781a      	ldrb	r2, [r3, #0]
    2a6e:	2a00      	cmp	r2, #0
    2a70:	d0f9      	beq.n	2a66 <nwkRxDuplicateRejectionTimerHandler+0xe>
			nwkRxDuplicateRejectionTable[i].ttl--;
    2a72:	3a01      	subs	r2, #1
    2a74:	701a      	strb	r2, [r3, #0]
			restart = true;
    2a76:	002c      	movs	r4, r5
    2a78:	e7f5      	b.n	2a66 <nwkRxDuplicateRejectionTimerHandler+0xe>
	if (restart) {
    2a7a:	2c00      	cmp	r4, #0
    2a7c:	d100      	bne.n	2a80 <nwkRxDuplicateRejectionTimerHandler+0x28>
}
    2a7e:	bd70      	pop	{r4, r5, r6, pc}
		SYS_TimerStart(timer);
    2a80:	4b02      	ldr	r3, [pc, #8]	; (2a8c <nwkRxDuplicateRejectionTimerHandler+0x34>)
    2a82:	4798      	blx	r3
}
    2a84:	e7fb      	b.n	2a7e <nwkRxDuplicateRejectionTimerHandler+0x26>
    2a86:	46c0      	nop			; (mov r8, r8)
    2a88:	20000710 	.word	0x20000710
    2a8c:	00002d65 	.word	0x00002d65

00002a90 <nwkRxInit>:
{
    2a90:	b510      	push	{r4, lr}
    2a92:	4a0a      	ldr	r2, [pc, #40]	; (2abc <nwkRxInit+0x2c>)
    2a94:	1d13      	adds	r3, r2, #4
    2a96:	3240      	adds	r2, #64	; 0x40
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    2a98:	2100      	movs	r1, #0
    2a9a:	7019      	strb	r1, [r3, #0]
    2a9c:	3306      	adds	r3, #6
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2a9e:	4293      	cmp	r3, r2
    2aa0:	d1fb      	bne.n	2a9a <nwkRxInit+0xa>
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    2aa2:	4b07      	ldr	r3, [pc, #28]	; (2ac0 <nwkRxInit+0x30>)
    2aa4:	2264      	movs	r2, #100	; 0x64
    2aa6:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2aa8:	2200      	movs	r2, #0
    2aaa:	731a      	strb	r2, [r3, #12]
		= nwkRxDuplicateRejectionTimerHandler;
    2aac:	4a05      	ldr	r2, [pc, #20]	; (2ac4 <nwkRxInit+0x34>)
    2aae:	611a      	str	r2, [r3, #16]
	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    2ab0:	4905      	ldr	r1, [pc, #20]	; (2ac8 <nwkRxInit+0x38>)
    2ab2:	2000      	movs	r0, #0
    2ab4:	4b05      	ldr	r3, [pc, #20]	; (2acc <nwkRxInit+0x3c>)
    2ab6:	4798      	blx	r3
}
    2ab8:	bd10      	pop	{r4, pc}
    2aba:	46c0      	nop			; (mov r8, r8)
    2abc:	20000710 	.word	0x20000710
    2ac0:	2000074c 	.word	0x2000074c
    2ac4:	00002a59 	.word	0x00002a59
    2ac8:	00002a25 	.word	0x00002a25
    2acc:	00002901 	.word	0x00002901

00002ad0 <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    2ad0:	2300      	movs	r3, #0
    2ad2:	4a02      	ldr	r2, [pc, #8]	; (2adc <nwkSecurityInit+0xc>)
    2ad4:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    2ad6:	4a02      	ldr	r2, [pc, #8]	; (2ae0 <nwkSecurityInit+0x10>)
    2ad8:	6013      	str	r3, [r2, #0]
}
    2ada:	4770      	bx	lr
    2adc:	20000764 	.word	0x20000764
    2ae0:	20000760 	.word	0x20000760

00002ae4 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    2ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ae6:	b083      	sub	sp, #12
    2ae8:	9001      	str	r0, [sp, #4]
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2aea:	2400      	movs	r4, #0
	NwkFrame_t *frame = NULL;
    2aec:	2000      	movs	r0, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    2aee:	4d11      	ldr	r5, [pc, #68]	; (2b34 <nwkTxDelayTimerHandler+0x50>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2af0:	2686      	movs	r6, #134	; 0x86
    2af2:	2787      	movs	r7, #135	; 0x87
	while (NULL != (frame = nwkFrameNext(frame))) {
    2af4:	47a8      	blx	r5
    2af6:	2800      	cmp	r0, #0
    2af8:	d013      	beq.n	2b22 <nwkTxDelayTimerHandler+0x3e>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    2afa:	7803      	ldrb	r3, [r0, #0]
    2afc:	2b11      	cmp	r3, #17
    2afe:	d1f9      	bne.n	2af4 <nwkTxDelayTimerHandler+0x10>
			if (0 == --frame->tx.timeout) {
    2b00:	5d82      	ldrb	r2, [r0, r6]
    2b02:	5dc3      	ldrb	r3, [r0, r7]
    2b04:	021b      	lsls	r3, r3, #8
    2b06:	4313      	orrs	r3, r2
    2b08:	3b01      	subs	r3, #1
    2b0a:	b29b      	uxth	r3, r3
    2b0c:	5583      	strb	r3, [r0, r6]
    2b0e:	0a19      	lsrs	r1, r3, #8
    2b10:	0002      	movs	r2, r0
    2b12:	3286      	adds	r2, #134	; 0x86
    2b14:	7051      	strb	r1, [r2, #1]
			restart = true;
    2b16:	2401      	movs	r4, #1
			if (0 == --frame->tx.timeout) {
    2b18:	2b00      	cmp	r3, #0
    2b1a:	d1eb      	bne.n	2af4 <nwkTxDelayTimerHandler+0x10>
				frame->state = NWK_TX_STATE_SEND;
    2b1c:	3313      	adds	r3, #19
    2b1e:	7003      	strb	r3, [r0, #0]
    2b20:	e7e8      	b.n	2af4 <nwkTxDelayTimerHandler+0x10>
			}
		}
	}

	if (restart) {
    2b22:	2c00      	cmp	r4, #0
    2b24:	d101      	bne.n	2b2a <nwkTxDelayTimerHandler+0x46>
		SYS_TimerStart(timer);
	}
}
    2b26:	b003      	add	sp, #12
    2b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SYS_TimerStart(timer);
    2b2a:	9801      	ldr	r0, [sp, #4]
    2b2c:	4b02      	ldr	r3, [pc, #8]	; (2b38 <nwkTxDelayTimerHandler+0x54>)
    2b2e:	4798      	blx	r3
}
    2b30:	e7f9      	b.n	2b26 <nwkTxDelayTimerHandler+0x42>
    2b32:	46c0      	nop			; (mov r8, r8)
    2b34:	00002931 	.word	0x00002931
    2b38:	00002d65 	.word	0x00002d65

00002b3c <nwkTxAckWaitTimerHandler>:
{
    2b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b3e:	b083      	sub	sp, #12
    2b40:	9001      	str	r0, [sp, #4]
	bool restart = false;
    2b42:	2400      	movs	r4, #0
	NwkFrame_t *frame = NULL;
    2b44:	2000      	movs	r0, #0
	while (NULL != (frame = nwkFrameNext(frame))) {
    2b46:	4d12      	ldr	r5, [pc, #72]	; (2b90 <nwkTxAckWaitTimerHandler+0x54>)
			if (0 == --frame->tx.timeout) {
    2b48:	2686      	movs	r6, #134	; 0x86
    2b4a:	2787      	movs	r7, #135	; 0x87
	while (NULL != (frame = nwkFrameNext(frame))) {
    2b4c:	47a8      	blx	r5
    2b4e:	2800      	cmp	r0, #0
    2b50:	d016      	beq.n	2b80 <nwkTxAckWaitTimerHandler+0x44>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    2b52:	7803      	ldrb	r3, [r0, #0]
    2b54:	2b16      	cmp	r3, #22
    2b56:	d1f9      	bne.n	2b4c <nwkTxAckWaitTimerHandler+0x10>
			if (0 == --frame->tx.timeout) {
    2b58:	5d82      	ldrb	r2, [r0, r6]
    2b5a:	5dc3      	ldrb	r3, [r0, r7]
    2b5c:	021b      	lsls	r3, r3, #8
    2b5e:	4313      	orrs	r3, r2
    2b60:	3b01      	subs	r3, #1
    2b62:	b29b      	uxth	r3, r3
    2b64:	5583      	strb	r3, [r0, r6]
    2b66:	0a19      	lsrs	r1, r3, #8
    2b68:	0002      	movs	r2, r0
    2b6a:	3286      	adds	r2, #134	; 0x86
    2b6c:	7051      	strb	r1, [r2, #1]
			restart = true;
    2b6e:	2401      	movs	r4, #1
			if (0 == --frame->tx.timeout) {
    2b70:	2b00      	cmp	r3, #0
    2b72:	d1eb      	bne.n	2b4c <nwkTxAckWaitTimerHandler+0x10>
	frame->state = NWK_TX_STATE_CONFIRM;
    2b74:	3317      	adds	r3, #23
    2b76:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    2b78:	2210      	movs	r2, #16
    2b7a:	336e      	adds	r3, #110	; 0x6e
    2b7c:	54c2      	strb	r2, [r0, r3]
    2b7e:	e7e5      	b.n	2b4c <nwkTxAckWaitTimerHandler+0x10>
	if (restart) {
    2b80:	2c00      	cmp	r4, #0
    2b82:	d101      	bne.n	2b88 <nwkTxAckWaitTimerHandler+0x4c>
}
    2b84:	b003      	add	sp, #12
    2b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SYS_TimerStart(timer);
    2b88:	9801      	ldr	r0, [sp, #4]
    2b8a:	4b02      	ldr	r3, [pc, #8]	; (2b94 <nwkTxAckWaitTimerHandler+0x58>)
    2b8c:	4798      	blx	r3
}
    2b8e:	e7f9      	b.n	2b84 <nwkTxAckWaitTimerHandler+0x48>
    2b90:	00002931 	.word	0x00002931
    2b94:	00002d65 	.word	0x00002d65

00002b98 <nwkTxInit>:
	nwkTxPhyActiveFrame = NULL;
    2b98:	2200      	movs	r2, #0
    2b9a:	4b07      	ldr	r3, [pc, #28]	; (2bb8 <nwkTxInit+0x20>)
    2b9c:	601a      	str	r2, [r3, #0]
	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    2b9e:	4b07      	ldr	r3, [pc, #28]	; (2bbc <nwkTxInit+0x24>)
    2ba0:	2132      	movs	r1, #50	; 0x32
    2ba2:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2ba4:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    2ba6:	4906      	ldr	r1, [pc, #24]	; (2bc0 <nwkTxInit+0x28>)
    2ba8:	6119      	str	r1, [r3, #16]
	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    2baa:	4b06      	ldr	r3, [pc, #24]	; (2bc4 <nwkTxInit+0x2c>)
    2bac:	210a      	movs	r1, #10
    2bae:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2bb0:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    2bb2:	4a05      	ldr	r2, [pc, #20]	; (2bc8 <nwkTxInit+0x30>)
    2bb4:	611a      	str	r2, [r3, #16]
}
    2bb6:	4770      	bx	lr
    2bb8:	20000790 	.word	0x20000790
    2bbc:	20000768 	.word	0x20000768
    2bc0:	00002b3d 	.word	0x00002b3d
    2bc4:	2000077c 	.word	0x2000077c
    2bc8:	00002ae5 	.word	0x00002ae5

00002bcc <nwkTxAckReceived>:
{
    2bcc:	b570      	push	{r4, r5, r6, lr}
	if (sizeof(NwkCommandAck_t) != ind->size) {
    2bce:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2bd0:	2300      	movs	r3, #0
	if (sizeof(NwkCommandAck_t) != ind->size) {
    2bd2:	2a03      	cmp	r2, #3
    2bd4:	d001      	beq.n	2bda <nwkTxAckReceived+0xe>
}
    2bd6:	0018      	movs	r0, r3
    2bd8:	bd70      	pop	{r4, r5, r6, pc}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    2bda:	6885      	ldr	r5, [r0, #8]
    2bdc:	2000      	movs	r0, #0
	while (NULL != (frame = nwkFrameNext(frame))) {
    2bde:	4c0a      	ldr	r4, [pc, #40]	; (2c08 <nwkTxAckReceived+0x3c>)
    2be0:	47a0      	blx	r4
    2be2:	2800      	cmp	r0, #0
    2be4:	d00d      	beq.n	2c02 <nwkTxAckReceived+0x36>
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    2be6:	7803      	ldrb	r3, [r0, #0]
    2be8:	2b16      	cmp	r3, #22
    2bea:	d1f9      	bne.n	2be0 <nwkTxAckReceived+0x14>
    2bec:	7b02      	ldrb	r2, [r0, #12]
    2bee:	786b      	ldrb	r3, [r5, #1]
    2bf0:	429a      	cmp	r2, r3
    2bf2:	d1f5      	bne.n	2be0 <nwkTxAckReceived+0x14>
			frame->state = NWK_TX_STATE_CONFIRM;
    2bf4:	2317      	movs	r3, #23
    2bf6:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    2bf8:	78aa      	ldrb	r2, [r5, #2]
    2bfa:	3371      	adds	r3, #113	; 0x71
    2bfc:	54c2      	strb	r2, [r0, r3]
			return true;
    2bfe:	3b87      	subs	r3, #135	; 0x87
    2c00:	e7e9      	b.n	2bd6 <nwkTxAckReceived+0xa>
	return false;
    2c02:	2300      	movs	r3, #0
    2c04:	e7e7      	b.n	2bd6 <nwkTxAckReceived+0xa>
    2c06:	46c0      	nop			; (mov r8, r8)
    2c08:	00002931 	.word	0x00002931

00002c0c <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    2c0c:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    2c0e:	4b0e      	ldr	r3, [pc, #56]	; (2c48 <PHY_Init+0x3c>)
    2c10:	4798      	blx	r3
	PhyReset();
    2c12:	4b0e      	ldr	r3, [pc, #56]	; (2c4c <PHY_Init+0x40>)
    2c14:	4798      	blx	r3
	phyRxState = false;
    2c16:	2200      	movs	r2, #0
    2c18:	4b0d      	ldr	r3, [pc, #52]	; (2c50 <PHY_Init+0x44>)
    2c1a:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    2c1c:	3201      	adds	r2, #1
    2c1e:	4b0d      	ldr	r3, [pc, #52]	; (2c54 <PHY_Init+0x48>)
    2c20:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2c22:	4e0d      	ldr	r6, [pc, #52]	; (2c58 <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2c24:	4d0d      	ldr	r5, [pc, #52]	; (2c5c <PHY_Init+0x50>)
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2c26:	241f      	movs	r4, #31
	trx_reg_write(reg, value);
    2c28:	2108      	movs	r1, #8
    2c2a:	2002      	movs	r0, #2
    2c2c:	47b0      	blx	r6
	value = trx_reg_read(reg);
    2c2e:	2001      	movs	r0, #1
    2c30:	47a8      	blx	r5
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2c32:	4020      	ands	r0, r4
    2c34:	2808      	cmp	r0, #8
    2c36:	d1f7      	bne.n	2c28 <PHY_Init+0x1c>
	trx_reg_write(reg, value);
    2c38:	212e      	movs	r1, #46	; 0x2e
    2c3a:	3804      	subs	r0, #4
    2c3c:	4c06      	ldr	r4, [pc, #24]	; (2c58 <PHY_Init+0x4c>)
    2c3e:	47a0      	blx	r4
    2c40:	21a0      	movs	r1, #160	; 0xa0
    2c42:	200c      	movs	r0, #12
    2c44:	47a0      	blx	r4
}
    2c46:	bd70      	pop	{r4, r5, r6, pc}
    2c48:	00002f2d 	.word	0x00002f2d
    2c4c:	00003049 	.word	0x00003049
    2c50:	20000794 	.word	0x20000794
    2c54:	20000795 	.word	0x20000795
    2c58:	00003175 	.word	0x00003175
    2c5c:	00003079 	.word	0x00003079

00002c60 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    2c60:	b510      	push	{r4, lr}
	SYS_TimerInit();
    2c62:	4b04      	ldr	r3, [pc, #16]	; (2c74 <SYS_Init+0x14>)
    2c64:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    2c66:	4b04      	ldr	r3, [pc, #16]	; (2c78 <SYS_Init+0x18>)
    2c68:	4798      	blx	r3
#endif
	PHY_Init();
    2c6a:	4b04      	ldr	r3, [pc, #16]	; (2c7c <SYS_Init+0x1c>)
    2c6c:	4798      	blx	r3
	NWK_Init();
    2c6e:	4b04      	ldr	r3, [pc, #16]	; (2c80 <SYS_Init+0x20>)
    2c70:	4798      	blx	r3
}
    2c72:	bd10      	pop	{r4, pc}
    2c74:	00002cfd 	.word	0x00002cfd
    2c78:	00002f0d 	.word	0x00002f0d
    2c7c:	00002c0d 	.word	0x00002c0d
    2c80:	000028ad 	.word	0x000028ad

00002c84 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    2c84:	b530      	push	{r4, r5, lr}
	if (timers) {
    2c86:	4b14      	ldr	r3, [pc, #80]	; (2cd8 <placeTimer+0x54>)
    2c88:	681d      	ldr	r5, [r3, #0]
    2c8a:	2d00      	cmp	r5, #0
    2c8c:	d01c      	beq.n	2cc8 <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    2c8e:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    2c90:	6869      	ldr	r1, [r5, #4]
    2c92:	428a      	cmp	r2, r1
    2c94:	d309      	bcc.n	2caa <placeTimer+0x26>
    2c96:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    2c98:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2c9a:	6823      	ldr	r3, [r4, #0]
    2c9c:	2b00      	cmp	r3, #0
    2c9e:	d008      	beq.n	2cb2 <placeTimer+0x2e>
			if (timeout < t->timeout) {
    2ca0:	6859      	ldr	r1, [r3, #4]
    2ca2:	4291      	cmp	r1, r2
    2ca4:	d803      	bhi.n	2cae <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2ca6:	001c      	movs	r4, r3
    2ca8:	e7f6      	b.n	2c98 <placeTimer+0x14>
    2caa:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    2cac:	2400      	movs	r4, #0
				t->timeout -= timeout;
    2cae:	1a89      	subs	r1, r1, r2
    2cb0:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    2cb2:	6042      	str	r2, [r0, #4]

		if (prev) {
    2cb4:	2c00      	cmp	r4, #0
    2cb6:	d003      	beq.n	2cc0 <placeTimer+0x3c>
			timer->next = prev->next;
    2cb8:	6823      	ldr	r3, [r4, #0]
    2cba:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    2cbc:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    2cbe:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    2cc0:	6005      	str	r5, [r0, #0]
			timers = timer;
    2cc2:	4b05      	ldr	r3, [pc, #20]	; (2cd8 <placeTimer+0x54>)
    2cc4:	6018      	str	r0, [r3, #0]
    2cc6:	e7fa      	b.n	2cbe <placeTimer+0x3a>
		timer->next = NULL;
    2cc8:	2300      	movs	r3, #0
    2cca:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    2ccc:	6883      	ldr	r3, [r0, #8]
    2cce:	6043      	str	r3, [r0, #4]
		timers = timer;
    2cd0:	4b01      	ldr	r3, [pc, #4]	; (2cd8 <placeTimer+0x54>)
    2cd2:	6018      	str	r0, [r3, #0]
}
    2cd4:	e7f3      	b.n	2cbe <placeTimer+0x3a>
    2cd6:	46c0      	nop			; (mov r8, r8)
    2cd8:	20000798 	.word	0x20000798

00002cdc <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    2cdc:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    2cde:	4a04      	ldr	r2, [pc, #16]	; (2cf0 <SYS_HwExpiry_Cb+0x14>)
    2ce0:	7813      	ldrb	r3, [r2, #0]
    2ce2:	3301      	adds	r3, #1
    2ce4:	b2db      	uxtb	r3, r3
    2ce6:	7013      	strb	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2ce8:	4802      	ldr	r0, [pc, #8]	; (2cf4 <SYS_HwExpiry_Cb+0x18>)
    2cea:	4b03      	ldr	r3, [pc, #12]	; (2cf8 <SYS_HwExpiry_Cb+0x1c>)
    2cec:	4798      	blx	r3
}
    2cee:	bd10      	pop	{r4, pc}
    2cf0:	2000097c 	.word	0x2000097c
    2cf4:	00002710 	.word	0x00002710
    2cf8:	00003325 	.word	0x00003325

00002cfc <SYS_TimerInit>:
{
    2cfc:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    2cfe:	2400      	movs	r4, #0
    2d00:	4b06      	ldr	r3, [pc, #24]	; (2d1c <SYS_TimerInit+0x20>)
    2d02:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    2d04:	4806      	ldr	r0, [pc, #24]	; (2d20 <SYS_TimerInit+0x24>)
    2d06:	4b07      	ldr	r3, [pc, #28]	; (2d24 <SYS_TimerInit+0x28>)
    2d08:	4798      	blx	r3
	common_tc_init();
    2d0a:	4b07      	ldr	r3, [pc, #28]	; (2d28 <SYS_TimerInit+0x2c>)
    2d0c:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2d0e:	4807      	ldr	r0, [pc, #28]	; (2d2c <SYS_TimerInit+0x30>)
    2d10:	4b07      	ldr	r3, [pc, #28]	; (2d30 <SYS_TimerInit+0x34>)
    2d12:	4798      	blx	r3
	timers = NULL;
    2d14:	4b07      	ldr	r3, [pc, #28]	; (2d34 <SYS_TimerInit+0x38>)
    2d16:	601c      	str	r4, [r3, #0]
}
    2d18:	bd10      	pop	{r4, pc}
    2d1a:	46c0      	nop			; (mov r8, r8)
    2d1c:	2000097c 	.word	0x2000097c
    2d20:	00002cdd 	.word	0x00002cdd
    2d24:	00003415 	.word	0x00003415
    2d28:	00003391 	.word	0x00003391
    2d2c:	00002710 	.word	0x00002710
    2d30:	00003325 	.word	0x00003325
    2d34:	20000798 	.word	0x20000798

00002d38 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2d38:	4b09      	ldr	r3, [pc, #36]	; (2d60 <SYS_TimerStarted+0x28>)
    2d3a:	681b      	ldr	r3, [r3, #0]
    2d3c:	2b00      	cmp	r3, #0
    2d3e:	d00a      	beq.n	2d56 <SYS_TimerStarted+0x1e>
		if (t == timer) {
    2d40:	4283      	cmp	r3, r0
    2d42:	d00a      	beq.n	2d5a <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2d44:	681b      	ldr	r3, [r3, #0]
    2d46:	2b00      	cmp	r3, #0
    2d48:	d003      	beq.n	2d52 <SYS_TimerStarted+0x1a>
		if (t == timer) {
    2d4a:	4298      	cmp	r0, r3
    2d4c:	d1fa      	bne.n	2d44 <SYS_TimerStarted+0xc>
			return true;
    2d4e:	2001      	movs	r0, #1
    2d50:	e000      	b.n	2d54 <SYS_TimerStarted+0x1c>
	return false;
    2d52:	2000      	movs	r0, #0
}
    2d54:	4770      	bx	lr
	return false;
    2d56:	2000      	movs	r0, #0
    2d58:	e7fc      	b.n	2d54 <SYS_TimerStarted+0x1c>
			return true;
    2d5a:	2001      	movs	r0, #1
    2d5c:	e7fa      	b.n	2d54 <SYS_TimerStarted+0x1c>
    2d5e:	46c0      	nop			; (mov r8, r8)
    2d60:	20000798 	.word	0x20000798

00002d64 <SYS_TimerStart>:
{
    2d64:	b510      	push	{r4, lr}
    2d66:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    2d68:	4b04      	ldr	r3, [pc, #16]	; (2d7c <SYS_TimerStart+0x18>)
    2d6a:	4798      	blx	r3
    2d6c:	2800      	cmp	r0, #0
    2d6e:	d000      	beq.n	2d72 <SYS_TimerStart+0xe>
}
    2d70:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    2d72:	0020      	movs	r0, r4
    2d74:	4b02      	ldr	r3, [pc, #8]	; (2d80 <SYS_TimerStart+0x1c>)
    2d76:	4798      	blx	r3
}
    2d78:	e7fa      	b.n	2d70 <SYS_TimerStart+0xc>
    2d7a:	46c0      	nop			; (mov r8, r8)
    2d7c:	00002d39 	.word	0x00002d39
    2d80:	00002c85 	.word	0x00002c85

00002d84 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    2d84:	b510      	push	{r4, lr}
	tmr_cca_callback();
    2d86:	4b01      	ldr	r3, [pc, #4]	; (2d8c <tc_cca_callback+0x8>)
    2d88:	4798      	blx	r3
}
    2d8a:	bd10      	pop	{r4, pc}
    2d8c:	000033f9 	.word	0x000033f9

00002d90 <tc_ovf_callback>:
{
    2d90:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    2d92:	4b01      	ldr	r3, [pc, #4]	; (2d98 <tc_ovf_callback+0x8>)
    2d94:	4798      	blx	r3
}
    2d96:	bd10      	pop	{r4, pc}
    2d98:	000033b1 	.word	0x000033b1

00002d9c <tmr_read_count>:
{
    2d9c:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    2d9e:	4802      	ldr	r0, [pc, #8]	; (2da8 <tmr_read_count+0xc>)
    2da0:	4b02      	ldr	r3, [pc, #8]	; (2dac <tmr_read_count+0x10>)
    2da2:	4798      	blx	r3
    2da4:	b280      	uxth	r0, r0
}
    2da6:	bd10      	pop	{r4, pc}
    2da8:	200009b4 	.word	0x200009b4
    2dac:	00002679 	.word	0x00002679

00002db0 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    2db0:	4b03      	ldr	r3, [pc, #12]	; (2dc0 <tmr_disable_cc_interrupt+0x10>)
    2db2:	2110      	movs	r1, #16
    2db4:	681a      	ldr	r2, [r3, #0]
    2db6:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    2db8:	7e5a      	ldrb	r2, [r3, #25]
    2dba:	438a      	bics	r2, r1
    2dbc:	765a      	strb	r2, [r3, #25]
}
    2dbe:	4770      	bx	lr
    2dc0:	200009b4 	.word	0x200009b4

00002dc4 <tmr_enable_cc_interrupt>:
{
    2dc4:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2dc6:	4c0a      	ldr	r4, [pc, #40]	; (2df0 <tmr_enable_cc_interrupt+0x2c>)
    2dc8:	6820      	ldr	r0, [r4, #0]
    2dca:	4b0a      	ldr	r3, [pc, #40]	; (2df4 <tmr_enable_cc_interrupt+0x30>)
    2dcc:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2dce:	4b0a      	ldr	r3, [pc, #40]	; (2df8 <tmr_enable_cc_interrupt+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2dd0:	5c1b      	ldrb	r3, [r3, r0]
    2dd2:	221f      	movs	r2, #31
    2dd4:	401a      	ands	r2, r3
    2dd6:	2301      	movs	r3, #1
    2dd8:	4093      	lsls	r3, r2
    2dda:	4a08      	ldr	r2, [pc, #32]	; (2dfc <tmr_enable_cc_interrupt+0x38>)
    2ddc:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2dde:	7e63      	ldrb	r3, [r4, #25]
    2de0:	2210      	movs	r2, #16
    2de2:	4313      	orrs	r3, r2
    2de4:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2de6:	6823      	ldr	r3, [r4, #0]
    2de8:	2210      	movs	r2, #16
    2dea:	735a      	strb	r2, [r3, #13]
}
    2dec:	bd10      	pop	{r4, pc}
    2dee:	46c0      	nop			; (mov r8, r8)
    2df0:	200009b4 	.word	0x200009b4
    2df4:	00002405 	.word	0x00002405
    2df8:	0000899c 	.word	0x0000899c
    2dfc:	e000e100 	.word	0xe000e100

00002e00 <tmr_write_cmpreg>:
{
    2e00:	b510      	push	{r4, lr}
    2e02:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    2e04:	2100      	movs	r1, #0
    2e06:	4802      	ldr	r0, [pc, #8]	; (2e10 <tmr_write_cmpreg+0x10>)
    2e08:	4b02      	ldr	r3, [pc, #8]	; (2e14 <tmr_write_cmpreg+0x14>)
    2e0a:	4798      	blx	r3
}
    2e0c:	bd10      	pop	{r4, pc}
    2e0e:	46c0      	nop			; (mov r8, r8)
    2e10:	200009b4 	.word	0x200009b4
    2e14:	000026a5 	.word	0x000026a5

00002e18 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    2e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e1a:	46ce      	mov	lr, r9
    2e1c:	4647      	mov	r7, r8
    2e1e:	b580      	push	{r7, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    2e20:	4a2d      	ldr	r2, [pc, #180]	; (2ed8 <tmr_init+0xc0>)
    2e22:	2300      	movs	r3, #0
    2e24:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    2e26:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    2e28:	2100      	movs	r1, #0
    2e2a:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    2e2c:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2e2e:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2e30:	7051      	strb	r1, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2e32:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2e34:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2e36:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2e38:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    2e3a:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2e3c:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2e3e:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2e40:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2e42:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2e44:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2e46:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    2e48:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2e4a:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    2e4c:	3b01      	subs	r3, #1
    2e4e:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    2e50:	4c22      	ldr	r4, [pc, #136]	; (2edc <tmr_init+0xc4>)
    2e52:	4923      	ldr	r1, [pc, #140]	; (2ee0 <tmr_init+0xc8>)
    2e54:	0020      	movs	r0, r4
    2e56:	4b23      	ldr	r3, [pc, #140]	; (2ee4 <tmr_init+0xcc>)
    2e58:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    2e5a:	2200      	movs	r2, #0
    2e5c:	4922      	ldr	r1, [pc, #136]	; (2ee8 <tmr_init+0xd0>)
    2e5e:	0020      	movs	r0, r4
    2e60:	4d22      	ldr	r5, [pc, #136]	; (2eec <tmr_init+0xd4>)
    2e62:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    2e64:	2202      	movs	r2, #2
    2e66:	4922      	ldr	r1, [pc, #136]	; (2ef0 <tmr_init+0xd8>)
    2e68:	0020      	movs	r0, r4
    2e6a:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2e6c:	6820      	ldr	r0, [r4, #0]
    2e6e:	4b21      	ldr	r3, [pc, #132]	; (2ef4 <tmr_init+0xdc>)
    2e70:	4699      	mov	r9, r3
    2e72:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2e74:	4b20      	ldr	r3, [pc, #128]	; (2ef8 <tmr_init+0xe0>)
    2e76:	4698      	mov	r8, r3
    2e78:	5c1b      	ldrb	r3, [r3, r0]
    2e7a:	261f      	movs	r6, #31
    2e7c:	4033      	ands	r3, r6
    2e7e:	2501      	movs	r5, #1
    2e80:	002a      	movs	r2, r5
    2e82:	409a      	lsls	r2, r3
    2e84:	4f1d      	ldr	r7, [pc, #116]	; (2efc <tmr_init+0xe4>)
    2e86:	603a      	str	r2, [r7, #0]
		module->enable_callback_mask |= (1 << callback_type);
    2e88:	7e63      	ldrb	r3, [r4, #25]
    2e8a:	2201      	movs	r2, #1
    2e8c:	4313      	orrs	r3, r2
    2e8e:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    2e90:	6823      	ldr	r3, [r4, #0]
    2e92:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2e94:	0018      	movs	r0, r3
    2e96:	47c8      	blx	r9
    2e98:	4643      	mov	r3, r8
    2e9a:	5c1b      	ldrb	r3, [r3, r0]
    2e9c:	401e      	ands	r6, r3
    2e9e:	40b5      	lsls	r5, r6
    2ea0:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2ea2:	7e63      	ldrb	r3, [r4, #25]
    2ea4:	2210      	movs	r2, #16
    2ea6:	4313      	orrs	r3, r2
    2ea8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2eaa:	6822      	ldr	r2, [r4, #0]
    2eac:	2310      	movs	r3, #16
    2eae:	7353      	strb	r3, [r2, #13]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2eb0:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2eb2:	b25b      	sxtb	r3, r3
    2eb4:	2b00      	cmp	r3, #0
    2eb6:	dbfb      	blt.n	2eb0 <tmr_init+0x98>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2eb8:	8813      	ldrh	r3, [r2, #0]
    2eba:	2102      	movs	r1, #2
    2ebc:	430b      	orrs	r3, r1
    2ebe:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    2ec0:	2000      	movs	r0, #0
    2ec2:	4b0f      	ldr	r3, [pc, #60]	; (2f00 <tmr_init+0xe8>)
    2ec4:	4798      	blx	r3
    2ec6:	490f      	ldr	r1, [pc, #60]	; (2f04 <tmr_init+0xec>)
    2ec8:	4b0f      	ldr	r3, [pc, #60]	; (2f08 <tmr_init+0xf0>)
    2eca:	4798      	blx	r3
	#endif
	return timer_multiplier;
    2ecc:	b2c0      	uxtb	r0, r0
}
    2ece:	bc0c      	pop	{r2, r3}
    2ed0:	4690      	mov	r8, r2
    2ed2:	4699      	mov	r9, r3
    2ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ed6:	46c0      	nop			; (mov r8, r8)
    2ed8:	20000980 	.word	0x20000980
    2edc:	200009b4 	.word	0x200009b4
    2ee0:	42002c00 	.word	0x42002c00
    2ee4:	0000243d 	.word	0x0000243d
    2ee8:	00002d91 	.word	0x00002d91
    2eec:	0000233d 	.word	0x0000233d
    2ef0:	00002d85 	.word	0x00002d85
    2ef4:	00002405 	.word	0x00002405
    2ef8:	0000899c 	.word	0x0000899c
    2efc:	e000e100 	.word	0xe000e100
    2f00:	000020cd 	.word	0x000020cd
    2f04:	000f4240 	.word	0x000f4240
    2f08:	00005d65 	.word	0x00005d65

00002f0c <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    2f0c:	4770      	bx	lr
	...

00002f10 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    2f10:	b510      	push	{r4, lr}
	eic_module->INTFLAG.reg = eic_mask;
    2f12:	2201      	movs	r2, #1
    2f14:	4b03      	ldr	r3, [pc, #12]	; (2f24 <AT86RFX_ISR+0x14>)
    2f16:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    2f18:	4b03      	ldr	r3, [pc, #12]	; (2f28 <AT86RFX_ISR+0x18>)
    2f1a:	681b      	ldr	r3, [r3, #0]
    2f1c:	2b00      	cmp	r3, #0
    2f1e:	d000      	beq.n	2f22 <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    2f20:	4798      	blx	r3
	}
}
    2f22:	bd10      	pop	{r4, pc}
    2f24:	40001800 	.word	0x40001800
    2f28:	2000079c 	.word	0x2000079c

00002f2c <trx_spi_init>:

void trx_spi_init(void)
{
    2f2c:	b530      	push	{r4, r5, lr}
    2f2e:	b085      	sub	sp, #20
	config->address_enabled = false;
    2f30:	4a34      	ldr	r2, [pc, #208]	; (3004 <trx_spi_init+0xd8>)
    2f32:	2300      	movs	r3, #0
    2f34:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    2f36:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    2f38:	213f      	movs	r1, #63	; 0x3f
    2f3a:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    2f3c:	4c32      	ldr	r4, [pc, #200]	; (3008 <trx_spi_init+0xdc>)
    2f3e:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    2f40:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    2f42:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    2f44:	2201      	movs	r2, #1
    2f46:	4669      	mov	r1, sp
    2f48:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    2f4a:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2f4c:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2f4e:	203f      	movs	r0, #63	; 0x3f
    2f50:	4b2e      	ldr	r3, [pc, #184]	; (300c <trx_spi_init+0xe0>)
    2f52:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2f54:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    2f56:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2f58:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2f5a:	2900      	cmp	r1, #0
    2f5c:	d104      	bne.n	2f68 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    2f5e:	0953      	lsrs	r3, r2, #5
    2f60:	01db      	lsls	r3, r3, #7
    2f62:	492b      	ldr	r1, [pc, #172]	; (3010 <trx_spi_init+0xe4>)
    2f64:	468c      	mov	ip, r1
    2f66:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2f68:	211f      	movs	r1, #31
    2f6a:	4011      	ands	r1, r2
    2f6c:	2201      	movs	r2, #1
    2f6e:	0010      	movs	r0, r2
    2f70:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    2f72:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    2f74:	4c27      	ldr	r4, [pc, #156]	; (3014 <trx_spi_init+0xe8>)
    2f76:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2f78:	2300      	movs	r3, #0
    2f7a:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2f7c:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2f7e:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    2f80:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    2f82:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    2f84:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    2f86:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    2f88:	3223      	adds	r2, #35	; 0x23
    2f8a:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2f8c:	0020      	movs	r0, r4
    2f8e:	3018      	adds	r0, #24
    2f90:	3a18      	subs	r2, #24
    2f92:	2100      	movs	r1, #0
    2f94:	4b20      	ldr	r3, [pc, #128]	; (3018 <trx_spi_init+0xec>)
    2f96:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    2f98:	2380      	movs	r3, #128	; 0x80
    2f9a:	025b      	lsls	r3, r3, #9
    2f9c:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    2f9e:	4b1f      	ldr	r3, [pc, #124]	; (301c <trx_spi_init+0xf0>)
    2fa0:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    2fa2:	4b1f      	ldr	r3, [pc, #124]	; (3020 <trx_spi_init+0xf4>)
    2fa4:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    2fa6:	2301      	movs	r3, #1
    2fa8:	425b      	negs	r3, r3
    2faa:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    2fac:	4b1d      	ldr	r3, [pc, #116]	; (3024 <trx_spi_init+0xf8>)
    2fae:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    2fb0:	4b1d      	ldr	r3, [pc, #116]	; (3028 <trx_spi_init+0xfc>)
    2fb2:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    2fb4:	4d1d      	ldr	r5, [pc, #116]	; (302c <trx_spi_init+0x100>)
    2fb6:	0022      	movs	r2, r4
    2fb8:	491d      	ldr	r1, [pc, #116]	; (3030 <trx_spi_init+0x104>)
    2fba:	0028      	movs	r0, r5
    2fbc:	4b1d      	ldr	r3, [pc, #116]	; (3034 <trx_spi_init+0x108>)
    2fbe:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    2fc0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2fc2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2fc4:	2b00      	cmp	r3, #0
    2fc6:	d1fc      	bne.n	2fc2 <trx_spi_init+0x96>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2fc8:	6813      	ldr	r3, [r2, #0]
    2fca:	2502      	movs	r5, #2
    2fcc:	432b      	orrs	r3, r5
    2fce:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    2fd0:	ac01      	add	r4, sp, #4
    2fd2:	0020      	movs	r0, r4
    2fd4:	4b18      	ldr	r3, [pc, #96]	; (3038 <trx_spi_init+0x10c>)
    2fd6:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    2fd8:	2320      	movs	r3, #32
    2fda:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    2fdc:	2380      	movs	r3, #128	; 0x80
    2fde:	039b      	lsls	r3, r3, #14
    2fe0:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    2fe2:	7225      	strb	r5, [r4, #8]
	#if (SAML21)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    2fe4:	2301      	movs	r3, #1
    2fe6:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    2fe8:	2200      	movs	r2, #0
    2fea:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    2fec:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    2fee:	0021      	movs	r1, r4
    2ff0:	2000      	movs	r0, #0
    2ff2:	4b12      	ldr	r3, [pc, #72]	; (303c <trx_spi_init+0x110>)
    2ff4:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    2ff6:	2200      	movs	r2, #0
    2ff8:	2100      	movs	r1, #0
    2ffa:	4811      	ldr	r0, [pc, #68]	; (3040 <trx_spi_init+0x114>)
    2ffc:	4b11      	ldr	r3, [pc, #68]	; (3044 <trx_spi_init+0x118>)
    2ffe:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    3000:	b005      	add	sp, #20
    3002:	bd30      	pop	{r4, r5, pc}
    3004:	200009d4 	.word	0x200009d4
    3008:	200009d8 	.word	0x200009d8
    300c:	00000b9d 	.word	0x00000b9d
    3010:	41004400 	.word	0x41004400
    3014:	200009dc 	.word	0x200009dc
    3018:	0000347b 	.word	0x0000347b
    301c:	004c4b40 	.word	0x004c4b40
    3020:	00530005 	.word	0x00530005
    3024:	003e0005 	.word	0x003e0005
    3028:	00520005 	.word	0x00520005
    302c:	20000a14 	.word	0x20000a14
    3030:	42001800 	.word	0x42001800
    3034:	00001085 	.word	0x00001085
    3038:	00000b11 	.word	0x00000b11
    303c:	00000b25 	.word	0x00000b25
    3040:	00002f11 	.word	0x00002f11
    3044:	00000a0d 	.word	0x00000a0d

00003048 <PhyReset>:

void PhyReset(void)
{
    3048:	b570      	push	{r4, r5, r6, lr}
    304a:	4c08      	ldr	r4, [pc, #32]	; (306c <PhyReset+0x24>)
    304c:	2580      	movs	r5, #128	; 0x80
    304e:	022d      	lsls	r5, r5, #8
    3050:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    3052:	2280      	movs	r2, #128	; 0x80
    3054:	0352      	lsls	r2, r2, #13
    3056:	4b06      	ldr	r3, [pc, #24]	; (3070 <PhyReset+0x28>)
    3058:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    305a:	20a5      	movs	r0, #165	; 0xa5
    305c:	0040      	lsls	r0, r0, #1
    305e:	4e05      	ldr	r6, [pc, #20]	; (3074 <PhyReset+0x2c>)
    3060:	47b0      	blx	r6
    3062:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    3064:	200a      	movs	r0, #10
    3066:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    3068:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    306a:	bd70      	pop	{r4, r5, r6, pc}
    306c:	41004480 	.word	0x41004480
    3070:	41004400 	.word	0x41004400
    3074:	0000089d 	.word	0x0000089d

00003078 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    3078:	b570      	push	{r4, r5, r6, lr}
    307a:	b082      	sub	sp, #8
    307c:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    307e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3082:	425a      	negs	r2, r3
    3084:	4153      	adcs	r3, r2
    3086:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3088:	b672      	cpsid	i
    308a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    308e:	2200      	movs	r2, #0
    3090:	4b33      	ldr	r3, [pc, #204]	; (3160 <trx_reg_read+0xe8>)
    3092:	701a      	strb	r2, [r3, #0]
	return flags;
    3094:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3096:	4e33      	ldr	r6, [pc, #204]	; (3164 <trx_reg_read+0xec>)
    3098:	3201      	adds	r2, #1
    309a:	4933      	ldr	r1, [pc, #204]	; (3168 <trx_reg_read+0xf0>)
    309c:	0030      	movs	r0, r6
    309e:	4b33      	ldr	r3, [pc, #204]	; (316c <trx_reg_read+0xf4>)
    30a0:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    30a2:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    30a4:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    30a6:	7e1a      	ldrb	r2, [r3, #24]
    30a8:	420a      	tst	r2, r1
    30aa:	d0fc      	beq.n	30a6 <trx_reg_read+0x2e>
    30ac:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    30ae:	07d2      	lsls	r2, r2, #31
    30b0:	d502      	bpl.n	30b8 <trx_reg_read+0x40>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    30b2:	2280      	movs	r2, #128	; 0x80
    30b4:	4315      	orrs	r5, r2
    30b6:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    30b8:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    30ba:	7e1a      	ldrb	r2, [r3, #24]
    30bc:	420a      	tst	r2, r1
    30be:	d0fc      	beq.n	30ba <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    30c0:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    30c2:	7e1a      	ldrb	r2, [r3, #24]
    30c4:	420a      	tst	r2, r1
    30c6:	d0fc      	beq.n	30c2 <trx_reg_read+0x4a>
    30c8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    30ca:	0752      	lsls	r2, r2, #29
    30cc:	d50c      	bpl.n	30e8 <trx_reg_read+0x70>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    30ce:	8b5a      	ldrh	r2, [r3, #26]
    30d0:	0752      	lsls	r2, r2, #29
    30d2:	d501      	bpl.n	30d8 <trx_reg_read+0x60>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    30d4:	2204      	movs	r2, #4
    30d6:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    30d8:	4a22      	ldr	r2, [pc, #136]	; (3164 <trx_reg_read+0xec>)
    30da:	7992      	ldrb	r2, [r2, #6]
    30dc:	2a01      	cmp	r2, #1
    30de:	d034      	beq.n	314a <trx_reg_read+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    30e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    30e2:	b2d2      	uxtb	r2, r2
    30e4:	4922      	ldr	r1, [pc, #136]	; (3170 <trx_reg_read+0xf8>)
    30e6:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    30e8:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    30ea:	7e1a      	ldrb	r2, [r3, #24]
    30ec:	420a      	tst	r2, r1
    30ee:	d0fc      	beq.n	30ea <trx_reg_read+0x72>
    30f0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    30f2:	07d2      	lsls	r2, r2, #31
    30f4:	d501      	bpl.n	30fa <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    30f6:	2200      	movs	r2, #0
    30f8:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    30fa:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    30fc:	7e1a      	ldrb	r2, [r3, #24]
    30fe:	420a      	tst	r2, r1
    3100:	d0fc      	beq.n	30fc <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    3102:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3104:	7e1a      	ldrb	r2, [r3, #24]
    3106:	420a      	tst	r2, r1
    3108:	d0fc      	beq.n	3104 <trx_reg_read+0x8c>
    310a:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    310c:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    310e:	0752      	lsls	r2, r2, #29
    3110:	d50a      	bpl.n	3128 <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3112:	8b5a      	ldrh	r2, [r3, #26]
    3114:	0752      	lsls	r2, r2, #29
    3116:	d501      	bpl.n	311c <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3118:	2204      	movs	r2, #4
    311a:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    311c:	4a11      	ldr	r2, [pc, #68]	; (3164 <trx_reg_read+0xec>)
    311e:	7992      	ldrb	r2, [r2, #6]
    3120:	2a01      	cmp	r2, #1
    3122:	d018      	beq.n	3156 <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3124:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3126:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3128:	2200      	movs	r2, #0
    312a:	490f      	ldr	r1, [pc, #60]	; (3168 <trx_reg_read+0xf0>)
    312c:	480d      	ldr	r0, [pc, #52]	; (3164 <trx_reg_read+0xec>)
    312e:	4b0f      	ldr	r3, [pc, #60]	; (316c <trx_reg_read+0xf4>)
    3130:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3132:	23ff      	movs	r3, #255	; 0xff
    3134:	4223      	tst	r3, r4
    3136:	d005      	beq.n	3144 <trx_reg_read+0xcc>
		cpu_irq_enable();
    3138:	2201      	movs	r2, #1
    313a:	4b09      	ldr	r3, [pc, #36]	; (3160 <trx_reg_read+0xe8>)
    313c:	701a      	strb	r2, [r3, #0]
    313e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3142:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    3144:	b2e8      	uxtb	r0, r5
}
    3146:	b002      	add	sp, #8
    3148:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    314a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    314c:	05d2      	lsls	r2, r2, #23
    314e:	0dd2      	lsrs	r2, r2, #23
    3150:	4907      	ldr	r1, [pc, #28]	; (3170 <trx_reg_read+0xf8>)
    3152:	800a      	strh	r2, [r1, #0]
    3154:	e7c8      	b.n	30e8 <trx_reg_read+0x70>
    3156:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3158:	05ed      	lsls	r5, r5, #23
    315a:	0ded      	lsrs	r5, r5, #23
    315c:	e7e4      	b.n	3128 <trx_reg_read+0xb0>
    315e:	46c0      	nop			; (mov r8, r8)
    3160:	2000000c 	.word	0x2000000c
    3164:	20000a14 	.word	0x20000a14
    3168:	200009d8 	.word	0x200009d8
    316c:	00001349 	.word	0x00001349
    3170:	200009d0 	.word	0x200009d0

00003174 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    3174:	b5f0      	push	{r4, r5, r6, r7, lr}
    3176:	b083      	sub	sp, #12
    3178:	0006      	movs	r6, r0
    317a:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    317c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3180:	425a      	negs	r2, r3
    3182:	4153      	adcs	r3, r2
    3184:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3186:	b672      	cpsid	i
    3188:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    318c:	2200      	movs	r2, #0
    318e:	4b34      	ldr	r3, [pc, #208]	; (3260 <trx_reg_write+0xec>)
    3190:	701a      	strb	r2, [r3, #0]
	return flags;
    3192:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3194:	4f33      	ldr	r7, [pc, #204]	; (3264 <trx_reg_write+0xf0>)
    3196:	3201      	adds	r2, #1
    3198:	4933      	ldr	r1, [pc, #204]	; (3268 <trx_reg_write+0xf4>)
    319a:	0038      	movs	r0, r7
    319c:	4b33      	ldr	r3, [pc, #204]	; (326c <trx_reg_write+0xf8>)
    319e:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    31a0:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    31a2:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    31a4:	7e1a      	ldrb	r2, [r3, #24]
    31a6:	420a      	tst	r2, r1
    31a8:	d0fc      	beq.n	31a4 <trx_reg_write+0x30>
    31aa:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    31ac:	07d2      	lsls	r2, r2, #31
    31ae:	d502      	bpl.n	31b6 <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    31b0:	22c0      	movs	r2, #192	; 0xc0
    31b2:	4316      	orrs	r6, r2
    31b4:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    31b6:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    31b8:	7e1a      	ldrb	r2, [r3, #24]
    31ba:	420a      	tst	r2, r1
    31bc:	d0fc      	beq.n	31b8 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    31be:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    31c0:	7e1a      	ldrb	r2, [r3, #24]
    31c2:	420a      	tst	r2, r1
    31c4:	d0fc      	beq.n	31c0 <trx_reg_write+0x4c>
    31c6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    31c8:	0752      	lsls	r2, r2, #29
    31ca:	d50c      	bpl.n	31e6 <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    31cc:	8b5a      	ldrh	r2, [r3, #26]
    31ce:	0752      	lsls	r2, r2, #29
    31d0:	d501      	bpl.n	31d6 <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    31d2:	2204      	movs	r2, #4
    31d4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    31d6:	4a23      	ldr	r2, [pc, #140]	; (3264 <trx_reg_write+0xf0>)
    31d8:	7992      	ldrb	r2, [r2, #6]
    31da:	2a01      	cmp	r2, #1
    31dc:	d033      	beq.n	3246 <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    31de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    31e0:	b2d2      	uxtb	r2, r2
    31e2:	4923      	ldr	r1, [pc, #140]	; (3270 <trx_reg_write+0xfc>)
    31e4:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    31e6:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    31e8:	7e1a      	ldrb	r2, [r3, #24]
    31ea:	420a      	tst	r2, r1
    31ec:	d0fc      	beq.n	31e8 <trx_reg_write+0x74>
    31ee:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    31f0:	07d2      	lsls	r2, r2, #31
    31f2:	d500      	bpl.n	31f6 <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    31f4:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    31f6:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    31f8:	7e1a      	ldrb	r2, [r3, #24]
    31fa:	420a      	tst	r2, r1
    31fc:	d0fc      	beq.n	31f8 <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    31fe:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3200:	7e1a      	ldrb	r2, [r3, #24]
    3202:	420a      	tst	r2, r1
    3204:	d0fc      	beq.n	3200 <trx_reg_write+0x8c>
    3206:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3208:	0752      	lsls	r2, r2, #29
    320a:	d50c      	bpl.n	3226 <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    320c:	8b5a      	ldrh	r2, [r3, #26]
    320e:	0752      	lsls	r2, r2, #29
    3210:	d501      	bpl.n	3216 <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3212:	2204      	movs	r2, #4
    3214:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3216:	4a13      	ldr	r2, [pc, #76]	; (3264 <trx_reg_write+0xf0>)
    3218:	7992      	ldrb	r2, [r2, #6]
    321a:	2a01      	cmp	r2, #1
    321c:	d019      	beq.n	3252 <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3220:	b2db      	uxtb	r3, r3
    3222:	4a13      	ldr	r2, [pc, #76]	; (3270 <trx_reg_write+0xfc>)
    3224:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3226:	2200      	movs	r2, #0
    3228:	490f      	ldr	r1, [pc, #60]	; (3268 <trx_reg_write+0xf4>)
    322a:	480e      	ldr	r0, [pc, #56]	; (3264 <trx_reg_write+0xf0>)
    322c:	4b0f      	ldr	r3, [pc, #60]	; (326c <trx_reg_write+0xf8>)
    322e:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    3230:	23ff      	movs	r3, #255	; 0xff
    3232:	422b      	tst	r3, r5
    3234:	d005      	beq.n	3242 <trx_reg_write+0xce>
		cpu_irq_enable();
    3236:	2201      	movs	r2, #1
    3238:	4b09      	ldr	r3, [pc, #36]	; (3260 <trx_reg_write+0xec>)
    323a:	701a      	strb	r2, [r3, #0]
    323c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3240:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3242:	b003      	add	sp, #12
    3244:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3246:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3248:	05d2      	lsls	r2, r2, #23
    324a:	0dd2      	lsrs	r2, r2, #23
    324c:	4908      	ldr	r1, [pc, #32]	; (3270 <trx_reg_write+0xfc>)
    324e:	800a      	strh	r2, [r1, #0]
    3250:	e7c9      	b.n	31e6 <trx_reg_write+0x72>
    3252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3254:	05db      	lsls	r3, r3, #23
    3256:	0ddb      	lsrs	r3, r3, #23
    3258:	4a05      	ldr	r2, [pc, #20]	; (3270 <trx_reg_write+0xfc>)
    325a:	8013      	strh	r3, [r2, #0]
    325c:	e7e3      	b.n	3226 <trx_reg_write+0xb2>
    325e:	46c0      	nop			; (mov r8, r8)
    3260:	2000000c 	.word	0x2000000c
    3264:	20000a14 	.word	0x20000a14
    3268:	200009d8 	.word	0x200009d8
    326c:	00001349 	.word	0x00001349
    3270:	200009d0 	.word	0x200009d0

00003274 <setup>:
#include "sys.h"
#include "TheArtist.h"
/************************************************************************/
/*                                                                      */
/************************************************************************/
void setup(void) {
    3274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// [SYSTEM INITIALIZE]
	// [NOTICE!]!! sequence of this calls is important!
	irq_initialize_vectors();
	system_init();
    3276:	4b1a      	ldr	r3, [pc, #104]	; (32e0 <setup+0x6c>)
    3278:	4798      	blx	r3
	delay_init();
    327a:	4b1a      	ldr	r3, [pc, #104]	; (32e4 <setup+0x70>)
    327c:	4798      	blx	r3
	SYS_Init();	
    327e:	4b1a      	ldr	r3, [pc, #104]	; (32e8 <setup+0x74>)
    3280:	4798      	blx	r3
	
	artist_ultrasonic_tc_configure();
    3282:	4b1a      	ldr	r3, [pc, #104]	; (32ec <setup+0x78>)
    3284:	4798      	blx	r3
	artist_scheduler_tc_configure();
    3286:	4b1a      	ldr	r3, [pc, #104]	; (32f0 <setup+0x7c>)
    3288:	4798      	blx	r3
	artist_configure_tc_callbacks();  
    328a:	4b1a      	ldr	r3, [pc, #104]	; (32f4 <setup+0x80>)
    328c:	4798      	blx	r3
	artist_init_maze(); 
    328e:	4b1a      	ldr	r3, [pc, #104]	; (32f8 <setup+0x84>)
    3290:	4798      	blx	r3

	cpu_irq_enable();
    3292:	4e1a      	ldr	r6, [pc, #104]	; (32fc <setup+0x88>)
    3294:	2701      	movs	r7, #1
    3296:	7037      	strb	r7, [r6, #0]
    3298:	f3bf 8f5f 	dmb	sy
    329c:	b662      	cpsie	i
	
	// [ultrasonic]
	artist_ultrasonic_configure(&(artist_front.us_instance_right),
    329e:	4c18      	ldr	r4, [pc, #96]	; (3300 <setup+0x8c>)
    32a0:	220f      	movs	r2, #15
    32a2:	211c      	movs	r1, #28
    32a4:	0020      	movs	r0, r4
    32a6:	4d17      	ldr	r5, [pc, #92]	; (3304 <setup+0x90>)
    32a8:	47a8      	blx	r5
	CONF_ARTIST_RIGHT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_center),
    32aa:	0020      	movs	r0, r4
    32ac:	3810      	subs	r0, #16
    32ae:	220f      	movs	r2, #15
    32b0:	210d      	movs	r1, #13
    32b2:	47a8      	blx	r5
	CONF_ARTIST_CENTER_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_left),
    32b4:	0020      	movs	r0, r4
    32b6:	3808      	subs	r0, #8
    32b8:	220f      	movs	r2, #15
    32ba:	2117      	movs	r1, #23
    32bc:	47a8      	blx	r5
	CONF_ARTIST_LEFT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_gpio_init();
    32be:	4b12      	ldr	r3, [pc, #72]	; (3308 <setup+0x94>)
    32c0:	4798      	blx	r3
	
	//! [ultrasonic]
	
	
	artist_usart_configure(&(artist_front.usart_instance));
    32c2:	3c4c      	subs	r4, #76	; 0x4c
    32c4:	0020      	movs	r0, r4
    32c6:	4b11      	ldr	r3, [pc, #68]	; (330c <setup+0x98>)
    32c8:	4798      	blx	r3
	cpu_irq_enable();
    32ca:	7037      	strb	r7, [r6, #0]
    32cc:	f3bf 8f5f 	dmb	sy
    32d0:	b662      	cpsie	i
	
	system_interrupt_enable_global();

	
	usart_read_buffer_job( &(artist_front.usart_instance),
    32d2:	2205      	movs	r2, #5
    32d4:	490e      	ldr	r1, [pc, #56]	; (3310 <setup+0x9c>)
    32d6:	0020      	movs	r0, r4
    32d8:	4b0e      	ldr	r3, [pc, #56]	; (3314 <setup+0xa0>)
    32da:	4798      	blx	r3
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
	
	//printf("front node setup complete\n"); 
	
}
    32dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32de:	46c0      	nop			; (mov r8, r8)
    32e0:	00002311 	.word	0x00002311
    32e4:	0000085d 	.word	0x0000085d
    32e8:	00002c61 	.word	0x00002c61
    32ec:	00000581 	.word	0x00000581
    32f0:	0000079d 	.word	0x0000079d
    32f4:	0000080d 	.word	0x0000080d
    32f8:	00000115 	.word	0x00000115
    32fc:	2000000c 	.word	0x2000000c
    3300:	20000880 	.word	0x20000880
    3304:	00000231 	.word	0x00000231
    3308:	00000241 	.word	0x00000241
    330c:	00000615 	.word	0x00000615
    3310:	20000898 	.word	0x20000898
    3314:	000018dd 	.word	0x000018dd

00003318 <main>:
	
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
int main (void) {
    3318:	b510      	push	{r4, lr}
	setup();
    331a:	4b01      	ldr	r3, [pc, #4]	; (3320 <main+0x8>)
    331c:	4798      	blx	r3
    331e:	e7fe      	b.n	331e <main+0x6>
    3320:	00003275 	.word	0x00003275

00003324 <common_tc_delay>:
    3324:	b510      	push	{r4, lr}
    3326:	1c04      	adds	r4, r0, #0
    3328:	4b13      	ldr	r3, [pc, #76]	; (3378 <common_tc_delay+0x54>)
    332a:	4798      	blx	r3
    332c:	4b13      	ldr	r3, [pc, #76]	; (337c <common_tc_delay+0x58>)
    332e:	781a      	ldrb	r2, [r3, #0]
    3330:	4362      	muls	r2, r4
    3332:	1881      	adds	r1, r0, r2
    3334:	4b12      	ldr	r3, [pc, #72]	; (3380 <common_tc_delay+0x5c>)
    3336:	6059      	str	r1, [r3, #4]
    3338:	6859      	ldr	r1, [r3, #4]
    333a:	0c09      	lsrs	r1, r1, #16
    333c:	6059      	str	r1, [r3, #4]
    333e:	685b      	ldr	r3, [r3, #4]
    3340:	2b00      	cmp	r3, #0
    3342:	d007      	beq.n	3354 <common_tc_delay+0x30>
    3344:	4b0e      	ldr	r3, [pc, #56]	; (3380 <common_tc_delay+0x5c>)
    3346:	6859      	ldr	r1, [r3, #4]
    3348:	3201      	adds	r2, #1
    334a:	1880      	adds	r0, r0, r2
    334c:	8118      	strh	r0, [r3, #8]
    334e:	4b0d      	ldr	r3, [pc, #52]	; (3384 <common_tc_delay+0x60>)
    3350:	4798      	blx	r3
    3352:	e004      	b.n	335e <common_tc_delay+0x3a>
    3354:	1882      	adds	r2, r0, r2
    3356:	4b0a      	ldr	r3, [pc, #40]	; (3380 <common_tc_delay+0x5c>)
    3358:	811a      	strh	r2, [r3, #8]
    335a:	4b0b      	ldr	r3, [pc, #44]	; (3388 <common_tc_delay+0x64>)
    335c:	4798      	blx	r3
    335e:	4b08      	ldr	r3, [pc, #32]	; (3380 <common_tc_delay+0x5c>)
    3360:	891b      	ldrh	r3, [r3, #8]
    3362:	2b63      	cmp	r3, #99	; 0x63
    3364:	d802      	bhi.n	336c <common_tc_delay+0x48>
    3366:	3364      	adds	r3, #100	; 0x64
    3368:	4a05      	ldr	r2, [pc, #20]	; (3380 <common_tc_delay+0x5c>)
    336a:	8113      	strh	r3, [r2, #8]
    336c:	4b04      	ldr	r3, [pc, #16]	; (3380 <common_tc_delay+0x5c>)
    336e:	8918      	ldrh	r0, [r3, #8]
    3370:	4b06      	ldr	r3, [pc, #24]	; (338c <common_tc_delay+0x68>)
    3372:	4798      	blx	r3
    3374:	bd10      	pop	{r4, pc}
    3376:	46c0      	nop			; (mov r8, r8)
    3378:	00002d9d 	.word	0x00002d9d
    337c:	20000a20 	.word	0x20000a20
    3380:	200007a0 	.word	0x200007a0
    3384:	00002db1 	.word	0x00002db1
    3388:	00002dc5 	.word	0x00002dc5
    338c:	00002e01 	.word	0x00002e01

00003390 <common_tc_init>:
    3390:	b508      	push	{r3, lr}
    3392:	2200      	movs	r2, #0
    3394:	4b03      	ldr	r3, [pc, #12]	; (33a4 <common_tc_init+0x14>)
    3396:	701a      	strb	r2, [r3, #0]
    3398:	4b03      	ldr	r3, [pc, #12]	; (33a8 <common_tc_init+0x18>)
    339a:	4798      	blx	r3
    339c:	4b03      	ldr	r3, [pc, #12]	; (33ac <common_tc_init+0x1c>)
    339e:	7018      	strb	r0, [r3, #0]
    33a0:	bd08      	pop	{r3, pc}
    33a2:	46c0      	nop			; (mov r8, r8)
    33a4:	200007a0 	.word	0x200007a0
    33a8:	00002e19 	.word	0x00002e19
    33ac:	20000a20 	.word	0x20000a20

000033b0 <tmr_ovf_callback>:
    33b0:	b508      	push	{r3, lr}
    33b2:	4b0e      	ldr	r3, [pc, #56]	; (33ec <tmr_ovf_callback+0x3c>)
    33b4:	685b      	ldr	r3, [r3, #4]
    33b6:	2b00      	cmp	r3, #0
    33b8:	d007      	beq.n	33ca <tmr_ovf_callback+0x1a>
    33ba:	4a0c      	ldr	r2, [pc, #48]	; (33ec <tmr_ovf_callback+0x3c>)
    33bc:	6853      	ldr	r3, [r2, #4]
    33be:	3b01      	subs	r3, #1
    33c0:	6053      	str	r3, [r2, #4]
    33c2:	2b00      	cmp	r3, #0
    33c4:	d101      	bne.n	33ca <tmr_ovf_callback+0x1a>
    33c6:	4b0a      	ldr	r3, [pc, #40]	; (33f0 <tmr_ovf_callback+0x40>)
    33c8:	4798      	blx	r3
    33ca:	4a08      	ldr	r2, [pc, #32]	; (33ec <tmr_ovf_callback+0x3c>)
    33cc:	7813      	ldrb	r3, [r2, #0]
    33ce:	3301      	adds	r3, #1
    33d0:	b2db      	uxtb	r3, r3
    33d2:	7013      	strb	r3, [r2, #0]
    33d4:	4a07      	ldr	r2, [pc, #28]	; (33f4 <tmr_ovf_callback+0x44>)
    33d6:	7812      	ldrb	r2, [r2, #0]
    33d8:	429a      	cmp	r2, r3
    33da:	d806      	bhi.n	33ea <tmr_ovf_callback+0x3a>
    33dc:	4b03      	ldr	r3, [pc, #12]	; (33ec <tmr_ovf_callback+0x3c>)
    33de:	2200      	movs	r2, #0
    33e0:	701a      	strb	r2, [r3, #0]
    33e2:	68db      	ldr	r3, [r3, #12]
    33e4:	2b00      	cmp	r3, #0
    33e6:	d000      	beq.n	33ea <tmr_ovf_callback+0x3a>
    33e8:	4798      	blx	r3
    33ea:	bd08      	pop	{r3, pc}
    33ec:	200007a0 	.word	0x200007a0
    33f0:	00002dc5 	.word	0x00002dc5
    33f4:	20000a20 	.word	0x20000a20

000033f8 <tmr_cca_callback>:
    33f8:	b508      	push	{r3, lr}
    33fa:	4b04      	ldr	r3, [pc, #16]	; (340c <tmr_cca_callback+0x14>)
    33fc:	4798      	blx	r3
    33fe:	4b04      	ldr	r3, [pc, #16]	; (3410 <tmr_cca_callback+0x18>)
    3400:	691b      	ldr	r3, [r3, #16]
    3402:	2b00      	cmp	r3, #0
    3404:	d000      	beq.n	3408 <tmr_cca_callback+0x10>
    3406:	4798      	blx	r3
    3408:	bd08      	pop	{r3, pc}
    340a:	46c0      	nop			; (mov r8, r8)
    340c:	00002db1 	.word	0x00002db1
    3410:	200007a0 	.word	0x200007a0

00003414 <set_common_tc_expiry_callback>:
    3414:	4b01      	ldr	r3, [pc, #4]	; (341c <set_common_tc_expiry_callback+0x8>)
    3416:	6118      	str	r0, [r3, #16]
    3418:	4770      	bx	lr
    341a:	46c0      	nop			; (mov r8, r8)
    341c:	200007a0 	.word	0x200007a0

00003420 <__libc_init_array>:
    3420:	b570      	push	{r4, r5, r6, lr}
    3422:	2600      	movs	r6, #0
    3424:	4d0c      	ldr	r5, [pc, #48]	; (3458 <__libc_init_array+0x38>)
    3426:	4c0d      	ldr	r4, [pc, #52]	; (345c <__libc_init_array+0x3c>)
    3428:	1b64      	subs	r4, r4, r5
    342a:	10a4      	asrs	r4, r4, #2
    342c:	42a6      	cmp	r6, r4
    342e:	d109      	bne.n	3444 <__libc_init_array+0x24>
    3430:	2600      	movs	r6, #0
    3432:	f005 fcb5 	bl	8da0 <_init>
    3436:	4d0a      	ldr	r5, [pc, #40]	; (3460 <__libc_init_array+0x40>)
    3438:	4c0a      	ldr	r4, [pc, #40]	; (3464 <__libc_init_array+0x44>)
    343a:	1b64      	subs	r4, r4, r5
    343c:	10a4      	asrs	r4, r4, #2
    343e:	42a6      	cmp	r6, r4
    3440:	d105      	bne.n	344e <__libc_init_array+0x2e>
    3442:	bd70      	pop	{r4, r5, r6, pc}
    3444:	00b3      	lsls	r3, r6, #2
    3446:	58eb      	ldr	r3, [r5, r3]
    3448:	4798      	blx	r3
    344a:	3601      	adds	r6, #1
    344c:	e7ee      	b.n	342c <__libc_init_array+0xc>
    344e:	00b3      	lsls	r3, r6, #2
    3450:	58eb      	ldr	r3, [r5, r3]
    3452:	4798      	blx	r3
    3454:	3601      	adds	r6, #1
    3456:	e7f2      	b.n	343e <__libc_init_array+0x1e>
    3458:	00008dac 	.word	0x00008dac
    345c:	00008dac 	.word	0x00008dac
    3460:	00008dac 	.word	0x00008dac
    3464:	00008db0 	.word	0x00008db0

00003468 <memcpy>:
    3468:	2300      	movs	r3, #0
    346a:	b510      	push	{r4, lr}
    346c:	429a      	cmp	r2, r3
    346e:	d100      	bne.n	3472 <memcpy+0xa>
    3470:	bd10      	pop	{r4, pc}
    3472:	5ccc      	ldrb	r4, [r1, r3]
    3474:	54c4      	strb	r4, [r0, r3]
    3476:	3301      	adds	r3, #1
    3478:	e7f8      	b.n	346c <memcpy+0x4>

0000347a <memset>:
    347a:	0003      	movs	r3, r0
    347c:	1882      	adds	r2, r0, r2
    347e:	4293      	cmp	r3, r2
    3480:	d100      	bne.n	3484 <memset+0xa>
    3482:	4770      	bx	lr
    3484:	7019      	strb	r1, [r3, #0]
    3486:	3301      	adds	r3, #1
    3488:	e7f9      	b.n	347e <memset+0x4>

0000348a <__cvt>:
    348a:	b5f0      	push	{r4, r5, r6, r7, lr}
    348c:	b08b      	sub	sp, #44	; 0x2c
    348e:	0014      	movs	r4, r2
    3490:	1e1d      	subs	r5, r3, #0
    3492:	9912      	ldr	r1, [sp, #72]	; 0x48
    3494:	da53      	bge.n	353e <__cvt+0xb4>
    3496:	2480      	movs	r4, #128	; 0x80
    3498:	0624      	lsls	r4, r4, #24
    349a:	191b      	adds	r3, r3, r4
    349c:	001d      	movs	r5, r3
    349e:	0014      	movs	r4, r2
    34a0:	232d      	movs	r3, #45	; 0x2d
    34a2:	700b      	strb	r3, [r1, #0]
    34a4:	2320      	movs	r3, #32
    34a6:	9e14      	ldr	r6, [sp, #80]	; 0x50
    34a8:	2203      	movs	r2, #3
    34aa:	439e      	bics	r6, r3
    34ac:	2e46      	cmp	r6, #70	; 0x46
    34ae:	d007      	beq.n	34c0 <__cvt+0x36>
    34b0:	0033      	movs	r3, r6
    34b2:	3b45      	subs	r3, #69	; 0x45
    34b4:	4259      	negs	r1, r3
    34b6:	414b      	adcs	r3, r1
    34b8:	9910      	ldr	r1, [sp, #64]	; 0x40
    34ba:	3a01      	subs	r2, #1
    34bc:	18cb      	adds	r3, r1, r3
    34be:	9310      	str	r3, [sp, #64]	; 0x40
    34c0:	ab09      	add	r3, sp, #36	; 0x24
    34c2:	9304      	str	r3, [sp, #16]
    34c4:	ab08      	add	r3, sp, #32
    34c6:	9303      	str	r3, [sp, #12]
    34c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    34ca:	9200      	str	r2, [sp, #0]
    34cc:	9302      	str	r3, [sp, #8]
    34ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
    34d0:	0022      	movs	r2, r4
    34d2:	9301      	str	r3, [sp, #4]
    34d4:	002b      	movs	r3, r5
    34d6:	f000 fda5 	bl	4024 <_dtoa_r>
    34da:	0007      	movs	r7, r0
    34dc:	2e47      	cmp	r6, #71	; 0x47
    34de:	d102      	bne.n	34e6 <__cvt+0x5c>
    34e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    34e2:	07db      	lsls	r3, r3, #31
    34e4:	d524      	bpl.n	3530 <__cvt+0xa6>
    34e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    34e8:	18fb      	adds	r3, r7, r3
    34ea:	9307      	str	r3, [sp, #28]
    34ec:	2e46      	cmp	r6, #70	; 0x46
    34ee:	d114      	bne.n	351a <__cvt+0x90>
    34f0:	783b      	ldrb	r3, [r7, #0]
    34f2:	2b30      	cmp	r3, #48	; 0x30
    34f4:	d10c      	bne.n	3510 <__cvt+0x86>
    34f6:	2200      	movs	r2, #0
    34f8:	2300      	movs	r3, #0
    34fa:	0020      	movs	r0, r4
    34fc:	0029      	movs	r1, r5
    34fe:	f002 fdb7 	bl	6070 <__aeabi_dcmpeq>
    3502:	2800      	cmp	r0, #0
    3504:	d104      	bne.n	3510 <__cvt+0x86>
    3506:	2301      	movs	r3, #1
    3508:	9a10      	ldr	r2, [sp, #64]	; 0x40
    350a:	1a9b      	subs	r3, r3, r2
    350c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    350e:	6013      	str	r3, [r2, #0]
    3510:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3512:	9a07      	ldr	r2, [sp, #28]
    3514:	681b      	ldr	r3, [r3, #0]
    3516:	18d3      	adds	r3, r2, r3
    3518:	9307      	str	r3, [sp, #28]
    351a:	2200      	movs	r2, #0
    351c:	2300      	movs	r3, #0
    351e:	0020      	movs	r0, r4
    3520:	0029      	movs	r1, r5
    3522:	f002 fda5 	bl	6070 <__aeabi_dcmpeq>
    3526:	2230      	movs	r2, #48	; 0x30
    3528:	2800      	cmp	r0, #0
    352a:	d00d      	beq.n	3548 <__cvt+0xbe>
    352c:	9b07      	ldr	r3, [sp, #28]
    352e:	9309      	str	r3, [sp, #36]	; 0x24
    3530:	0038      	movs	r0, r7
    3532:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3534:	9a15      	ldr	r2, [sp, #84]	; 0x54
    3536:	1bdb      	subs	r3, r3, r7
    3538:	6013      	str	r3, [r2, #0]
    353a:	b00b      	add	sp, #44	; 0x2c
    353c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    353e:	2300      	movs	r3, #0
    3540:	e7af      	b.n	34a2 <__cvt+0x18>
    3542:	1c59      	adds	r1, r3, #1
    3544:	9109      	str	r1, [sp, #36]	; 0x24
    3546:	701a      	strb	r2, [r3, #0]
    3548:	9b09      	ldr	r3, [sp, #36]	; 0x24
    354a:	9907      	ldr	r1, [sp, #28]
    354c:	4299      	cmp	r1, r3
    354e:	d8f8      	bhi.n	3542 <__cvt+0xb8>
    3550:	e7ee      	b.n	3530 <__cvt+0xa6>

00003552 <__exponent>:
    3552:	b5f0      	push	{r4, r5, r6, r7, lr}
    3554:	232b      	movs	r3, #43	; 0x2b
    3556:	b085      	sub	sp, #20
    3558:	0007      	movs	r7, r0
    355a:	000c      	movs	r4, r1
    355c:	7002      	strb	r2, [r0, #0]
    355e:	1c86      	adds	r6, r0, #2
    3560:	2900      	cmp	r1, #0
    3562:	da01      	bge.n	3568 <__exponent+0x16>
    3564:	232d      	movs	r3, #45	; 0x2d
    3566:	424c      	negs	r4, r1
    3568:	707b      	strb	r3, [r7, #1]
    356a:	2c09      	cmp	r4, #9
    356c:	dd23      	ble.n	35b6 <__exponent+0x64>
    356e:	ab02      	add	r3, sp, #8
    3570:	1ddd      	adds	r5, r3, #7
    3572:	1e6b      	subs	r3, r5, #1
    3574:	0020      	movs	r0, r4
    3576:	210a      	movs	r1, #10
    3578:	9301      	str	r3, [sp, #4]
    357a:	f002 fd63 	bl	6044 <__aeabi_idivmod>
    357e:	1e6b      	subs	r3, r5, #1
    3580:	3130      	adds	r1, #48	; 0x30
    3582:	7019      	strb	r1, [r3, #0]
    3584:	0020      	movs	r0, r4
    3586:	210a      	movs	r1, #10
    3588:	f002 fc76 	bl	5e78 <__divsi3>
    358c:	0004      	movs	r4, r0
    358e:	2809      	cmp	r0, #9
    3590:	dc0a      	bgt.n	35a8 <__exponent+0x56>
    3592:	3d02      	subs	r5, #2
    3594:	3430      	adds	r4, #48	; 0x30
    3596:	702c      	strb	r4, [r5, #0]
    3598:	ab02      	add	r3, sp, #8
    359a:	3307      	adds	r3, #7
    359c:	0030      	movs	r0, r6
    359e:	42ab      	cmp	r3, r5
    35a0:	d804      	bhi.n	35ac <__exponent+0x5a>
    35a2:	1bc0      	subs	r0, r0, r7
    35a4:	b005      	add	sp, #20
    35a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35a8:	9d01      	ldr	r5, [sp, #4]
    35aa:	e7e2      	b.n	3572 <__exponent+0x20>
    35ac:	782b      	ldrb	r3, [r5, #0]
    35ae:	3501      	adds	r5, #1
    35b0:	7033      	strb	r3, [r6, #0]
    35b2:	3601      	adds	r6, #1
    35b4:	e7f0      	b.n	3598 <__exponent+0x46>
    35b6:	2330      	movs	r3, #48	; 0x30
    35b8:	18e4      	adds	r4, r4, r3
    35ba:	7033      	strb	r3, [r6, #0]
    35bc:	1cb0      	adds	r0, r6, #2
    35be:	7074      	strb	r4, [r6, #1]
    35c0:	e7ef      	b.n	35a2 <__exponent+0x50>
	...

000035c4 <_printf_float>:
    35c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    35c6:	b095      	sub	sp, #84	; 0x54
    35c8:	000c      	movs	r4, r1
    35ca:	920a      	str	r2, [sp, #40]	; 0x28
    35cc:	930b      	str	r3, [sp, #44]	; 0x2c
    35ce:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    35d0:	9009      	str	r0, [sp, #36]	; 0x24
    35d2:	f001 fc9d 	bl	4f10 <_localeconv_r>
    35d6:	6803      	ldr	r3, [r0, #0]
    35d8:	0018      	movs	r0, r3
    35da:	930d      	str	r3, [sp, #52]	; 0x34
    35dc:	f000 fc96 	bl	3f0c <strlen>
    35e0:	2300      	movs	r3, #0
    35e2:	9312      	str	r3, [sp, #72]	; 0x48
    35e4:	6823      	ldr	r3, [r4, #0]
    35e6:	900e      	str	r0, [sp, #56]	; 0x38
    35e8:	930c      	str	r3, [sp, #48]	; 0x30
    35ea:	990c      	ldr	r1, [sp, #48]	; 0x30
    35ec:	7e27      	ldrb	r7, [r4, #24]
    35ee:	682b      	ldr	r3, [r5, #0]
    35f0:	2207      	movs	r2, #7
    35f2:	05c9      	lsls	r1, r1, #23
    35f4:	d547      	bpl.n	3686 <_printf_float+0xc2>
    35f6:	189b      	adds	r3, r3, r2
    35f8:	4393      	bics	r3, r2
    35fa:	001a      	movs	r2, r3
    35fc:	3208      	adds	r2, #8
    35fe:	602a      	str	r2, [r5, #0]
    3600:	681a      	ldr	r2, [r3, #0]
    3602:	685b      	ldr	r3, [r3, #4]
    3604:	64a2      	str	r2, [r4, #72]	; 0x48
    3606:	64e3      	str	r3, [r4, #76]	; 0x4c
    3608:	2201      	movs	r2, #1
    360a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    360c:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    360e:	006b      	lsls	r3, r5, #1
    3610:	085b      	lsrs	r3, r3, #1
    3612:	930f      	str	r3, [sp, #60]	; 0x3c
    3614:	4252      	negs	r2, r2
    3616:	4ba7      	ldr	r3, [pc, #668]	; (38b4 <_printf_float+0x2f0>)
    3618:	0030      	movs	r0, r6
    361a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    361c:	f004 ff86 	bl	852c <__aeabi_dcmpun>
    3620:	2800      	cmp	r0, #0
    3622:	d000      	beq.n	3626 <_printf_float+0x62>
    3624:	e206      	b.n	3a34 <_printf_float+0x470>
    3626:	2201      	movs	r2, #1
    3628:	4ba2      	ldr	r3, [pc, #648]	; (38b4 <_printf_float+0x2f0>)
    362a:	4252      	negs	r2, r2
    362c:	0030      	movs	r0, r6
    362e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    3630:	f002 fd2e 	bl	6090 <__aeabi_dcmple>
    3634:	2800      	cmp	r0, #0
    3636:	d000      	beq.n	363a <_printf_float+0x76>
    3638:	e1fc      	b.n	3a34 <_printf_float+0x470>
    363a:	2200      	movs	r2, #0
    363c:	2300      	movs	r3, #0
    363e:	0030      	movs	r0, r6
    3640:	0029      	movs	r1, r5
    3642:	f002 fd1b 	bl	607c <__aeabi_dcmplt>
    3646:	2800      	cmp	r0, #0
    3648:	d003      	beq.n	3652 <_printf_float+0x8e>
    364a:	0023      	movs	r3, r4
    364c:	222d      	movs	r2, #45	; 0x2d
    364e:	3343      	adds	r3, #67	; 0x43
    3650:	701a      	strb	r2, [r3, #0]
    3652:	4d99      	ldr	r5, [pc, #612]	; (38b8 <_printf_float+0x2f4>)
    3654:	2f47      	cmp	r7, #71	; 0x47
    3656:	d800      	bhi.n	365a <_printf_float+0x96>
    3658:	4d98      	ldr	r5, [pc, #608]	; (38bc <_printf_float+0x2f8>)
    365a:	2303      	movs	r3, #3
    365c:	2600      	movs	r6, #0
    365e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3660:	6123      	str	r3, [r4, #16]
    3662:	3301      	adds	r3, #1
    3664:	439a      	bics	r2, r3
    3666:	6022      	str	r2, [r4, #0]
    3668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    366a:	aa13      	add	r2, sp, #76	; 0x4c
    366c:	9300      	str	r3, [sp, #0]
    366e:	0021      	movs	r1, r4
    3670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3672:	9809      	ldr	r0, [sp, #36]	; 0x24
    3674:	f000 f9f2 	bl	3a5c <_printf_common>
    3678:	1c43      	adds	r3, r0, #1
    367a:	d000      	beq.n	367e <_printf_float+0xba>
    367c:	e09c      	b.n	37b8 <_printf_float+0x1f4>
    367e:	2001      	movs	r0, #1
    3680:	4240      	negs	r0, r0
    3682:	b015      	add	sp, #84	; 0x54
    3684:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3686:	3307      	adds	r3, #7
    3688:	e7b6      	b.n	35f8 <_printf_float+0x34>
    368a:	2380      	movs	r3, #128	; 0x80
    368c:	6862      	ldr	r2, [r4, #4]
    368e:	00db      	lsls	r3, r3, #3
    3690:	1c51      	adds	r1, r2, #1
    3692:	d145      	bne.n	3720 <_printf_float+0x15c>
    3694:	3207      	adds	r2, #7
    3696:	6062      	str	r2, [r4, #4]
    3698:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    369a:	2100      	movs	r1, #0
    369c:	4313      	orrs	r3, r2
    369e:	aa12      	add	r2, sp, #72	; 0x48
    36a0:	9205      	str	r2, [sp, #20]
    36a2:	aa11      	add	r2, sp, #68	; 0x44
    36a4:	9203      	str	r2, [sp, #12]
    36a6:	2223      	movs	r2, #35	; 0x23
    36a8:	6023      	str	r3, [r4, #0]
    36aa:	9106      	str	r1, [sp, #24]
    36ac:	9301      	str	r3, [sp, #4]
    36ae:	a908      	add	r1, sp, #32
    36b0:	6863      	ldr	r3, [r4, #4]
    36b2:	1852      	adds	r2, r2, r1
    36b4:	9202      	str	r2, [sp, #8]
    36b6:	9300      	str	r3, [sp, #0]
    36b8:	0032      	movs	r2, r6
    36ba:	002b      	movs	r3, r5
    36bc:	9704      	str	r7, [sp, #16]
    36be:	9809      	ldr	r0, [sp, #36]	; 0x24
    36c0:	f7ff fee3 	bl	348a <__cvt>
    36c4:	2320      	movs	r3, #32
    36c6:	003a      	movs	r2, r7
    36c8:	0005      	movs	r5, r0
    36ca:	439a      	bics	r2, r3
    36cc:	2a47      	cmp	r2, #71	; 0x47
    36ce:	d107      	bne.n	36e0 <_printf_float+0x11c>
    36d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    36d2:	1cda      	adds	r2, r3, #3
    36d4:	db02      	blt.n	36dc <_printf_float+0x118>
    36d6:	6862      	ldr	r2, [r4, #4]
    36d8:	4293      	cmp	r3, r2
    36da:	dd5b      	ble.n	3794 <_printf_float+0x1d0>
    36dc:	3f02      	subs	r7, #2
    36de:	b2ff      	uxtb	r7, r7
    36e0:	9911      	ldr	r1, [sp, #68]	; 0x44
    36e2:	2f65      	cmp	r7, #101	; 0x65
    36e4:	d83b      	bhi.n	375e <_printf_float+0x19a>
    36e6:	0020      	movs	r0, r4
    36e8:	3901      	subs	r1, #1
    36ea:	003a      	movs	r2, r7
    36ec:	3050      	adds	r0, #80	; 0x50
    36ee:	9111      	str	r1, [sp, #68]	; 0x44
    36f0:	f7ff ff2f 	bl	3552 <__exponent>
    36f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    36f6:	0006      	movs	r6, r0
    36f8:	1883      	adds	r3, r0, r2
    36fa:	6123      	str	r3, [r4, #16]
    36fc:	2a01      	cmp	r2, #1
    36fe:	dc02      	bgt.n	3706 <_printf_float+0x142>
    3700:	6822      	ldr	r2, [r4, #0]
    3702:	07d2      	lsls	r2, r2, #31
    3704:	d501      	bpl.n	370a <_printf_float+0x146>
    3706:	3301      	adds	r3, #1
    3708:	6123      	str	r3, [r4, #16]
    370a:	2323      	movs	r3, #35	; 0x23
    370c:	aa08      	add	r2, sp, #32
    370e:	189b      	adds	r3, r3, r2
    3710:	781b      	ldrb	r3, [r3, #0]
    3712:	2b00      	cmp	r3, #0
    3714:	d0a8      	beq.n	3668 <_printf_float+0xa4>
    3716:	0023      	movs	r3, r4
    3718:	222d      	movs	r2, #45	; 0x2d
    371a:	3343      	adds	r3, #67	; 0x43
    371c:	701a      	strb	r2, [r3, #0]
    371e:	e7a3      	b.n	3668 <_printf_float+0xa4>
    3720:	2f67      	cmp	r7, #103	; 0x67
    3722:	d001      	beq.n	3728 <_printf_float+0x164>
    3724:	2f47      	cmp	r7, #71	; 0x47
    3726:	d1b7      	bne.n	3698 <_printf_float+0xd4>
    3728:	2a00      	cmp	r2, #0
    372a:	d016      	beq.n	375a <_printf_float+0x196>
    372c:	990c      	ldr	r1, [sp, #48]	; 0x30
    372e:	a808      	add	r0, sp, #32
    3730:	430b      	orrs	r3, r1
    3732:	2100      	movs	r1, #0
    3734:	9106      	str	r1, [sp, #24]
    3736:	a912      	add	r1, sp, #72	; 0x48
    3738:	9105      	str	r1, [sp, #20]
    373a:	a911      	add	r1, sp, #68	; 0x44
    373c:	9103      	str	r1, [sp, #12]
    373e:	2123      	movs	r1, #35	; 0x23
    3740:	1809      	adds	r1, r1, r0
    3742:	6023      	str	r3, [r4, #0]
    3744:	9301      	str	r3, [sp, #4]
    3746:	9200      	str	r2, [sp, #0]
    3748:	002b      	movs	r3, r5
    374a:	9704      	str	r7, [sp, #16]
    374c:	9102      	str	r1, [sp, #8]
    374e:	0032      	movs	r2, r6
    3750:	9809      	ldr	r0, [sp, #36]	; 0x24
    3752:	f7ff fe9a 	bl	348a <__cvt>
    3756:	0005      	movs	r5, r0
    3758:	e7ba      	b.n	36d0 <_printf_float+0x10c>
    375a:	2201      	movs	r2, #1
    375c:	e79b      	b.n	3696 <_printf_float+0xd2>
    375e:	2f66      	cmp	r7, #102	; 0x66
    3760:	d119      	bne.n	3796 <_printf_float+0x1d2>
    3762:	6863      	ldr	r3, [r4, #4]
    3764:	2900      	cmp	r1, #0
    3766:	dd0c      	ble.n	3782 <_printf_float+0x1be>
    3768:	6121      	str	r1, [r4, #16]
    376a:	2b00      	cmp	r3, #0
    376c:	d102      	bne.n	3774 <_printf_float+0x1b0>
    376e:	6822      	ldr	r2, [r4, #0]
    3770:	07d2      	lsls	r2, r2, #31
    3772:	d502      	bpl.n	377a <_printf_float+0x1b6>
    3774:	3301      	adds	r3, #1
    3776:	185b      	adds	r3, r3, r1
    3778:	6123      	str	r3, [r4, #16]
    377a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    377c:	2600      	movs	r6, #0
    377e:	65a3      	str	r3, [r4, #88]	; 0x58
    3780:	e7c3      	b.n	370a <_printf_float+0x146>
    3782:	2b00      	cmp	r3, #0
    3784:	d103      	bne.n	378e <_printf_float+0x1ca>
    3786:	2201      	movs	r2, #1
    3788:	6821      	ldr	r1, [r4, #0]
    378a:	4211      	tst	r1, r2
    378c:	d000      	beq.n	3790 <_printf_float+0x1cc>
    378e:	1c9a      	adds	r2, r3, #2
    3790:	6122      	str	r2, [r4, #16]
    3792:	e7f2      	b.n	377a <_printf_float+0x1b6>
    3794:	2767      	movs	r7, #103	; 0x67
    3796:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3798:	9812      	ldr	r0, [sp, #72]	; 0x48
    379a:	4283      	cmp	r3, r0
    379c:	db05      	blt.n	37aa <_printf_float+0x1e6>
    379e:	6822      	ldr	r2, [r4, #0]
    37a0:	6123      	str	r3, [r4, #16]
    37a2:	07d2      	lsls	r2, r2, #31
    37a4:	d5e9      	bpl.n	377a <_printf_float+0x1b6>
    37a6:	3301      	adds	r3, #1
    37a8:	e7e6      	b.n	3778 <_printf_float+0x1b4>
    37aa:	2201      	movs	r2, #1
    37ac:	2b00      	cmp	r3, #0
    37ae:	dc01      	bgt.n	37b4 <_printf_float+0x1f0>
    37b0:	1892      	adds	r2, r2, r2
    37b2:	1ad2      	subs	r2, r2, r3
    37b4:	1812      	adds	r2, r2, r0
    37b6:	e7eb      	b.n	3790 <_printf_float+0x1cc>
    37b8:	6822      	ldr	r2, [r4, #0]
    37ba:	0553      	lsls	r3, r2, #21
    37bc:	d408      	bmi.n	37d0 <_printf_float+0x20c>
    37be:	6923      	ldr	r3, [r4, #16]
    37c0:	002a      	movs	r2, r5
    37c2:	990a      	ldr	r1, [sp, #40]	; 0x28
    37c4:	9809      	ldr	r0, [sp, #36]	; 0x24
    37c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    37c8:	47a8      	blx	r5
    37ca:	1c43      	adds	r3, r0, #1
    37cc:	d129      	bne.n	3822 <_printf_float+0x25e>
    37ce:	e756      	b.n	367e <_printf_float+0xba>
    37d0:	2f65      	cmp	r7, #101	; 0x65
    37d2:	d800      	bhi.n	37d6 <_printf_float+0x212>
    37d4:	e0dc      	b.n	3990 <_printf_float+0x3cc>
    37d6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    37d8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    37da:	2200      	movs	r2, #0
    37dc:	2300      	movs	r3, #0
    37de:	f002 fc47 	bl	6070 <__aeabi_dcmpeq>
    37e2:	2800      	cmp	r0, #0
    37e4:	d035      	beq.n	3852 <_printf_float+0x28e>
    37e6:	2301      	movs	r3, #1
    37e8:	4a35      	ldr	r2, [pc, #212]	; (38c0 <_printf_float+0x2fc>)
    37ea:	990a      	ldr	r1, [sp, #40]	; 0x28
    37ec:	9809      	ldr	r0, [sp, #36]	; 0x24
    37ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    37f0:	47a8      	blx	r5
    37f2:	1c43      	adds	r3, r0, #1
    37f4:	d100      	bne.n	37f8 <_printf_float+0x234>
    37f6:	e742      	b.n	367e <_printf_float+0xba>
    37f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    37fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
    37fc:	4293      	cmp	r3, r2
    37fe:	db02      	blt.n	3806 <_printf_float+0x242>
    3800:	6823      	ldr	r3, [r4, #0]
    3802:	07db      	lsls	r3, r3, #31
    3804:	d50d      	bpl.n	3822 <_printf_float+0x25e>
    3806:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    380a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    380c:	990a      	ldr	r1, [sp, #40]	; 0x28
    380e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3810:	47a8      	blx	r5
    3812:	2500      	movs	r5, #0
    3814:	1c43      	adds	r3, r0, #1
    3816:	d100      	bne.n	381a <_printf_float+0x256>
    3818:	e731      	b.n	367e <_printf_float+0xba>
    381a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    381c:	3b01      	subs	r3, #1
    381e:	429d      	cmp	r5, r3
    3820:	db0b      	blt.n	383a <_printf_float+0x276>
    3822:	6823      	ldr	r3, [r4, #0]
    3824:	2500      	movs	r5, #0
    3826:	079b      	lsls	r3, r3, #30
    3828:	d500      	bpl.n	382c <_printf_float+0x268>
    382a:	e0fd      	b.n	3a28 <_printf_float+0x464>
    382c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    382e:	68e0      	ldr	r0, [r4, #12]
    3830:	4298      	cmp	r0, r3
    3832:	db00      	blt.n	3836 <_printf_float+0x272>
    3834:	e725      	b.n	3682 <_printf_float+0xbe>
    3836:	0018      	movs	r0, r3
    3838:	e723      	b.n	3682 <_printf_float+0xbe>
    383a:	0022      	movs	r2, r4
    383c:	2301      	movs	r3, #1
    383e:	321a      	adds	r2, #26
    3840:	990a      	ldr	r1, [sp, #40]	; 0x28
    3842:	9809      	ldr	r0, [sp, #36]	; 0x24
    3844:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3846:	47b0      	blx	r6
    3848:	1c43      	adds	r3, r0, #1
    384a:	d100      	bne.n	384e <_printf_float+0x28a>
    384c:	e717      	b.n	367e <_printf_float+0xba>
    384e:	3501      	adds	r5, #1
    3850:	e7e3      	b.n	381a <_printf_float+0x256>
    3852:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3854:	2b00      	cmp	r3, #0
    3856:	dc35      	bgt.n	38c4 <_printf_float+0x300>
    3858:	2301      	movs	r3, #1
    385a:	4a19      	ldr	r2, [pc, #100]	; (38c0 <_printf_float+0x2fc>)
    385c:	990a      	ldr	r1, [sp, #40]	; 0x28
    385e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3860:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3862:	47b0      	blx	r6
    3864:	1c43      	adds	r3, r0, #1
    3866:	d100      	bne.n	386a <_printf_float+0x2a6>
    3868:	e709      	b.n	367e <_printf_float+0xba>
    386a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    386c:	2b00      	cmp	r3, #0
    386e:	d105      	bne.n	387c <_printf_float+0x2b8>
    3870:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3872:	2b00      	cmp	r3, #0
    3874:	d102      	bne.n	387c <_printf_float+0x2b8>
    3876:	6823      	ldr	r3, [r4, #0]
    3878:	07db      	lsls	r3, r3, #31
    387a:	d5d2      	bpl.n	3822 <_printf_float+0x25e>
    387c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    387e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3880:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3882:	990a      	ldr	r1, [sp, #40]	; 0x28
    3884:	9809      	ldr	r0, [sp, #36]	; 0x24
    3886:	47b0      	blx	r6
    3888:	2600      	movs	r6, #0
    388a:	1c43      	adds	r3, r0, #1
    388c:	d100      	bne.n	3890 <_printf_float+0x2cc>
    388e:	e6f6      	b.n	367e <_printf_float+0xba>
    3890:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3892:	425b      	negs	r3, r3
    3894:	429e      	cmp	r6, r3
    3896:	db01      	blt.n	389c <_printf_float+0x2d8>
    3898:	9b12      	ldr	r3, [sp, #72]	; 0x48
    389a:	e791      	b.n	37c0 <_printf_float+0x1fc>
    389c:	0022      	movs	r2, r4
    389e:	2301      	movs	r3, #1
    38a0:	321a      	adds	r2, #26
    38a2:	990a      	ldr	r1, [sp, #40]	; 0x28
    38a4:	9809      	ldr	r0, [sp, #36]	; 0x24
    38a6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    38a8:	47b8      	blx	r7
    38aa:	1c43      	adds	r3, r0, #1
    38ac:	d100      	bne.n	38b0 <_printf_float+0x2ec>
    38ae:	e6e6      	b.n	367e <_printf_float+0xba>
    38b0:	3601      	adds	r6, #1
    38b2:	e7ed      	b.n	3890 <_printf_float+0x2cc>
    38b4:	7fefffff 	.word	0x7fefffff
    38b8:	000089a8 	.word	0x000089a8
    38bc:	000089a4 	.word	0x000089a4
    38c0:	000089b4 	.word	0x000089b4
    38c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
    38c6:	9e12      	ldr	r6, [sp, #72]	; 0x48
    38c8:	429e      	cmp	r6, r3
    38ca:	dd00      	ble.n	38ce <_printf_float+0x30a>
    38cc:	001e      	movs	r6, r3
    38ce:	2e00      	cmp	r6, #0
    38d0:	dc35      	bgt.n	393e <_printf_float+0x37a>
    38d2:	2300      	movs	r3, #0
    38d4:	930c      	str	r3, [sp, #48]	; 0x30
    38d6:	43f3      	mvns	r3, r6
    38d8:	17db      	asrs	r3, r3, #31
    38da:	930f      	str	r3, [sp, #60]	; 0x3c
    38dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    38de:	6da7      	ldr	r7, [r4, #88]	; 0x58
    38e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    38e2:	4033      	ands	r3, r6
    38e4:	1afb      	subs	r3, r7, r3
    38e6:	429a      	cmp	r2, r3
    38e8:	db32      	blt.n	3950 <_printf_float+0x38c>
    38ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
    38ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
    38ee:	4293      	cmp	r3, r2
    38f0:	db3c      	blt.n	396c <_printf_float+0x3a8>
    38f2:	6823      	ldr	r3, [r4, #0]
    38f4:	07db      	lsls	r3, r3, #31
    38f6:	d439      	bmi.n	396c <_printf_float+0x3a8>
    38f8:	9e12      	ldr	r6, [sp, #72]	; 0x48
    38fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
    38fc:	1bf3      	subs	r3, r6, r7
    38fe:	1ab6      	subs	r6, r6, r2
    3900:	429e      	cmp	r6, r3
    3902:	dd00      	ble.n	3906 <_printf_float+0x342>
    3904:	001e      	movs	r6, r3
    3906:	2e00      	cmp	r6, #0
    3908:	dc39      	bgt.n	397e <_printf_float+0x3ba>
    390a:	43f7      	mvns	r7, r6
    390c:	2500      	movs	r5, #0
    390e:	17fb      	asrs	r3, r7, #31
    3910:	930c      	str	r3, [sp, #48]	; 0x30
    3912:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3914:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3916:	990c      	ldr	r1, [sp, #48]	; 0x30
    3918:	1a9b      	subs	r3, r3, r2
    391a:	0032      	movs	r2, r6
    391c:	400a      	ands	r2, r1
    391e:	1a9b      	subs	r3, r3, r2
    3920:	429d      	cmp	r5, r3
    3922:	db00      	blt.n	3926 <_printf_float+0x362>
    3924:	e77d      	b.n	3822 <_printf_float+0x25e>
    3926:	0022      	movs	r2, r4
    3928:	2301      	movs	r3, #1
    392a:	321a      	adds	r2, #26
    392c:	990a      	ldr	r1, [sp, #40]	; 0x28
    392e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3930:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3932:	47b8      	blx	r7
    3934:	1c43      	adds	r3, r0, #1
    3936:	d100      	bne.n	393a <_printf_float+0x376>
    3938:	e6a1      	b.n	367e <_printf_float+0xba>
    393a:	3501      	adds	r5, #1
    393c:	e7e9      	b.n	3912 <_printf_float+0x34e>
    393e:	0033      	movs	r3, r6
    3940:	002a      	movs	r2, r5
    3942:	990a      	ldr	r1, [sp, #40]	; 0x28
    3944:	9809      	ldr	r0, [sp, #36]	; 0x24
    3946:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3948:	47b8      	blx	r7
    394a:	1c43      	adds	r3, r0, #1
    394c:	d1c1      	bne.n	38d2 <_printf_float+0x30e>
    394e:	e696      	b.n	367e <_printf_float+0xba>
    3950:	0022      	movs	r2, r4
    3952:	2301      	movs	r3, #1
    3954:	321a      	adds	r2, #26
    3956:	990a      	ldr	r1, [sp, #40]	; 0x28
    3958:	9809      	ldr	r0, [sp, #36]	; 0x24
    395a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    395c:	47b8      	blx	r7
    395e:	1c43      	adds	r3, r0, #1
    3960:	d100      	bne.n	3964 <_printf_float+0x3a0>
    3962:	e68c      	b.n	367e <_printf_float+0xba>
    3964:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3966:	3301      	adds	r3, #1
    3968:	930c      	str	r3, [sp, #48]	; 0x30
    396a:	e7b7      	b.n	38dc <_printf_float+0x318>
    396c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    396e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3970:	990a      	ldr	r1, [sp, #40]	; 0x28
    3972:	9809      	ldr	r0, [sp, #36]	; 0x24
    3974:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3976:	47b0      	blx	r6
    3978:	1c43      	adds	r3, r0, #1
    397a:	d1bd      	bne.n	38f8 <_printf_float+0x334>
    397c:	e67f      	b.n	367e <_printf_float+0xba>
    397e:	19ea      	adds	r2, r5, r7
    3980:	0033      	movs	r3, r6
    3982:	990a      	ldr	r1, [sp, #40]	; 0x28
    3984:	9809      	ldr	r0, [sp, #36]	; 0x24
    3986:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3988:	47a8      	blx	r5
    398a:	1c43      	adds	r3, r0, #1
    398c:	d1bd      	bne.n	390a <_printf_float+0x346>
    398e:	e676      	b.n	367e <_printf_float+0xba>
    3990:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3992:	2b01      	cmp	r3, #1
    3994:	dc02      	bgt.n	399c <_printf_float+0x3d8>
    3996:	2301      	movs	r3, #1
    3998:	421a      	tst	r2, r3
    399a:	d038      	beq.n	3a0e <_printf_float+0x44a>
    399c:	2301      	movs	r3, #1
    399e:	002a      	movs	r2, r5
    39a0:	990a      	ldr	r1, [sp, #40]	; 0x28
    39a2:	9809      	ldr	r0, [sp, #36]	; 0x24
    39a4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    39a6:	47b8      	blx	r7
    39a8:	1c43      	adds	r3, r0, #1
    39aa:	d100      	bne.n	39ae <_printf_float+0x3ea>
    39ac:	e667      	b.n	367e <_printf_float+0xba>
    39ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    39b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    39b2:	990a      	ldr	r1, [sp, #40]	; 0x28
    39b4:	9809      	ldr	r0, [sp, #36]	; 0x24
    39b6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    39b8:	47b8      	blx	r7
    39ba:	1c43      	adds	r3, r0, #1
    39bc:	d100      	bne.n	39c0 <_printf_float+0x3fc>
    39be:	e65e      	b.n	367e <_printf_float+0xba>
    39c0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    39c2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    39c4:	2200      	movs	r2, #0
    39c6:	2300      	movs	r3, #0
    39c8:	f002 fb52 	bl	6070 <__aeabi_dcmpeq>
    39cc:	2800      	cmp	r0, #0
    39ce:	d008      	beq.n	39e2 <_printf_float+0x41e>
    39d0:	2500      	movs	r5, #0
    39d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    39d4:	3b01      	subs	r3, #1
    39d6:	429d      	cmp	r5, r3
    39d8:	db0d      	blt.n	39f6 <_printf_float+0x432>
    39da:	0022      	movs	r2, r4
    39dc:	0033      	movs	r3, r6
    39de:	3250      	adds	r2, #80	; 0x50
    39e0:	e6ef      	b.n	37c2 <_printf_float+0x1fe>
    39e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    39e4:	1c6a      	adds	r2, r5, #1
    39e6:	3b01      	subs	r3, #1
    39e8:	990a      	ldr	r1, [sp, #40]	; 0x28
    39ea:	9809      	ldr	r0, [sp, #36]	; 0x24
    39ec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    39ee:	47a8      	blx	r5
    39f0:	1c43      	adds	r3, r0, #1
    39f2:	d1f2      	bne.n	39da <_printf_float+0x416>
    39f4:	e643      	b.n	367e <_printf_float+0xba>
    39f6:	0022      	movs	r2, r4
    39f8:	2301      	movs	r3, #1
    39fa:	321a      	adds	r2, #26
    39fc:	990a      	ldr	r1, [sp, #40]	; 0x28
    39fe:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a00:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3a02:	47b8      	blx	r7
    3a04:	1c43      	adds	r3, r0, #1
    3a06:	d100      	bne.n	3a0a <_printf_float+0x446>
    3a08:	e639      	b.n	367e <_printf_float+0xba>
    3a0a:	3501      	adds	r5, #1
    3a0c:	e7e1      	b.n	39d2 <_printf_float+0x40e>
    3a0e:	002a      	movs	r2, r5
    3a10:	e7ea      	b.n	39e8 <_printf_float+0x424>
    3a12:	0022      	movs	r2, r4
    3a14:	2301      	movs	r3, #1
    3a16:	3219      	adds	r2, #25
    3a18:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a1a:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a1c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3a1e:	47b0      	blx	r6
    3a20:	1c43      	adds	r3, r0, #1
    3a22:	d100      	bne.n	3a26 <_printf_float+0x462>
    3a24:	e62b      	b.n	367e <_printf_float+0xba>
    3a26:	3501      	adds	r5, #1
    3a28:	68e3      	ldr	r3, [r4, #12]
    3a2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3a2c:	1a9b      	subs	r3, r3, r2
    3a2e:	429d      	cmp	r5, r3
    3a30:	dbef      	blt.n	3a12 <_printf_float+0x44e>
    3a32:	e6fb      	b.n	382c <_printf_float+0x268>
    3a34:	0032      	movs	r2, r6
    3a36:	002b      	movs	r3, r5
    3a38:	0030      	movs	r0, r6
    3a3a:	0029      	movs	r1, r5
    3a3c:	f004 fd76 	bl	852c <__aeabi_dcmpun>
    3a40:	2800      	cmp	r0, #0
    3a42:	d100      	bne.n	3a46 <_printf_float+0x482>
    3a44:	e621      	b.n	368a <_printf_float+0xc6>
    3a46:	4d03      	ldr	r5, [pc, #12]	; (3a54 <_printf_float+0x490>)
    3a48:	2f47      	cmp	r7, #71	; 0x47
    3a4a:	d900      	bls.n	3a4e <_printf_float+0x48a>
    3a4c:	e605      	b.n	365a <_printf_float+0x96>
    3a4e:	4d02      	ldr	r5, [pc, #8]	; (3a58 <_printf_float+0x494>)
    3a50:	e603      	b.n	365a <_printf_float+0x96>
    3a52:	46c0      	nop			; (mov r8, r8)
    3a54:	000089b0 	.word	0x000089b0
    3a58:	000089ac 	.word	0x000089ac

00003a5c <_printf_common>:
    3a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3a5e:	0015      	movs	r5, r2
    3a60:	9301      	str	r3, [sp, #4]
    3a62:	688a      	ldr	r2, [r1, #8]
    3a64:	690b      	ldr	r3, [r1, #16]
    3a66:	9000      	str	r0, [sp, #0]
    3a68:	000c      	movs	r4, r1
    3a6a:	4293      	cmp	r3, r2
    3a6c:	da00      	bge.n	3a70 <_printf_common+0x14>
    3a6e:	0013      	movs	r3, r2
    3a70:	0022      	movs	r2, r4
    3a72:	602b      	str	r3, [r5, #0]
    3a74:	3243      	adds	r2, #67	; 0x43
    3a76:	7812      	ldrb	r2, [r2, #0]
    3a78:	2a00      	cmp	r2, #0
    3a7a:	d001      	beq.n	3a80 <_printf_common+0x24>
    3a7c:	3301      	adds	r3, #1
    3a7e:	602b      	str	r3, [r5, #0]
    3a80:	6823      	ldr	r3, [r4, #0]
    3a82:	069b      	lsls	r3, r3, #26
    3a84:	d502      	bpl.n	3a8c <_printf_common+0x30>
    3a86:	682b      	ldr	r3, [r5, #0]
    3a88:	3302      	adds	r3, #2
    3a8a:	602b      	str	r3, [r5, #0]
    3a8c:	2706      	movs	r7, #6
    3a8e:	6823      	ldr	r3, [r4, #0]
    3a90:	401f      	ands	r7, r3
    3a92:	d027      	beq.n	3ae4 <_printf_common+0x88>
    3a94:	0023      	movs	r3, r4
    3a96:	3343      	adds	r3, #67	; 0x43
    3a98:	781b      	ldrb	r3, [r3, #0]
    3a9a:	1e5a      	subs	r2, r3, #1
    3a9c:	4193      	sbcs	r3, r2
    3a9e:	6822      	ldr	r2, [r4, #0]
    3aa0:	0692      	lsls	r2, r2, #26
    3aa2:	d430      	bmi.n	3b06 <_printf_common+0xaa>
    3aa4:	0022      	movs	r2, r4
    3aa6:	9901      	ldr	r1, [sp, #4]
    3aa8:	3243      	adds	r2, #67	; 0x43
    3aaa:	9800      	ldr	r0, [sp, #0]
    3aac:	9e08      	ldr	r6, [sp, #32]
    3aae:	47b0      	blx	r6
    3ab0:	1c43      	adds	r3, r0, #1
    3ab2:	d025      	beq.n	3b00 <_printf_common+0xa4>
    3ab4:	2306      	movs	r3, #6
    3ab6:	6820      	ldr	r0, [r4, #0]
    3ab8:	682a      	ldr	r2, [r5, #0]
    3aba:	68e1      	ldr	r1, [r4, #12]
    3abc:	4003      	ands	r3, r0
    3abe:	2500      	movs	r5, #0
    3ac0:	2b04      	cmp	r3, #4
    3ac2:	d103      	bne.n	3acc <_printf_common+0x70>
    3ac4:	1a8d      	subs	r5, r1, r2
    3ac6:	43eb      	mvns	r3, r5
    3ac8:	17db      	asrs	r3, r3, #31
    3aca:	401d      	ands	r5, r3
    3acc:	68a3      	ldr	r3, [r4, #8]
    3ace:	6922      	ldr	r2, [r4, #16]
    3ad0:	4293      	cmp	r3, r2
    3ad2:	dd01      	ble.n	3ad8 <_printf_common+0x7c>
    3ad4:	1a9b      	subs	r3, r3, r2
    3ad6:	18ed      	adds	r5, r5, r3
    3ad8:	2700      	movs	r7, #0
    3ada:	42bd      	cmp	r5, r7
    3adc:	d120      	bne.n	3b20 <_printf_common+0xc4>
    3ade:	2000      	movs	r0, #0
    3ae0:	e010      	b.n	3b04 <_printf_common+0xa8>
    3ae2:	3701      	adds	r7, #1
    3ae4:	68e3      	ldr	r3, [r4, #12]
    3ae6:	682a      	ldr	r2, [r5, #0]
    3ae8:	1a9b      	subs	r3, r3, r2
    3aea:	429f      	cmp	r7, r3
    3aec:	dad2      	bge.n	3a94 <_printf_common+0x38>
    3aee:	0022      	movs	r2, r4
    3af0:	2301      	movs	r3, #1
    3af2:	3219      	adds	r2, #25
    3af4:	9901      	ldr	r1, [sp, #4]
    3af6:	9800      	ldr	r0, [sp, #0]
    3af8:	9e08      	ldr	r6, [sp, #32]
    3afa:	47b0      	blx	r6
    3afc:	1c43      	adds	r3, r0, #1
    3afe:	d1f0      	bne.n	3ae2 <_printf_common+0x86>
    3b00:	2001      	movs	r0, #1
    3b02:	4240      	negs	r0, r0
    3b04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3b06:	2030      	movs	r0, #48	; 0x30
    3b08:	18e1      	adds	r1, r4, r3
    3b0a:	3143      	adds	r1, #67	; 0x43
    3b0c:	7008      	strb	r0, [r1, #0]
    3b0e:	0021      	movs	r1, r4
    3b10:	1c5a      	adds	r2, r3, #1
    3b12:	3145      	adds	r1, #69	; 0x45
    3b14:	7809      	ldrb	r1, [r1, #0]
    3b16:	18a2      	adds	r2, r4, r2
    3b18:	3243      	adds	r2, #67	; 0x43
    3b1a:	3302      	adds	r3, #2
    3b1c:	7011      	strb	r1, [r2, #0]
    3b1e:	e7c1      	b.n	3aa4 <_printf_common+0x48>
    3b20:	0022      	movs	r2, r4
    3b22:	2301      	movs	r3, #1
    3b24:	321a      	adds	r2, #26
    3b26:	9901      	ldr	r1, [sp, #4]
    3b28:	9800      	ldr	r0, [sp, #0]
    3b2a:	9e08      	ldr	r6, [sp, #32]
    3b2c:	47b0      	blx	r6
    3b2e:	1c43      	adds	r3, r0, #1
    3b30:	d0e6      	beq.n	3b00 <_printf_common+0xa4>
    3b32:	3701      	adds	r7, #1
    3b34:	e7d1      	b.n	3ada <_printf_common+0x7e>
	...

00003b38 <_printf_i>:
    3b38:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b3a:	b08b      	sub	sp, #44	; 0x2c
    3b3c:	9206      	str	r2, [sp, #24]
    3b3e:	000a      	movs	r2, r1
    3b40:	3243      	adds	r2, #67	; 0x43
    3b42:	9307      	str	r3, [sp, #28]
    3b44:	9005      	str	r0, [sp, #20]
    3b46:	9204      	str	r2, [sp, #16]
    3b48:	7e0a      	ldrb	r2, [r1, #24]
    3b4a:	000c      	movs	r4, r1
    3b4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3b4e:	2a6e      	cmp	r2, #110	; 0x6e
    3b50:	d100      	bne.n	3b54 <_printf_i+0x1c>
    3b52:	e08f      	b.n	3c74 <_printf_i+0x13c>
    3b54:	d817      	bhi.n	3b86 <_printf_i+0x4e>
    3b56:	2a63      	cmp	r2, #99	; 0x63
    3b58:	d02c      	beq.n	3bb4 <_printf_i+0x7c>
    3b5a:	d808      	bhi.n	3b6e <_printf_i+0x36>
    3b5c:	2a00      	cmp	r2, #0
    3b5e:	d100      	bne.n	3b62 <_printf_i+0x2a>
    3b60:	e099      	b.n	3c96 <_printf_i+0x15e>
    3b62:	2a58      	cmp	r2, #88	; 0x58
    3b64:	d054      	beq.n	3c10 <_printf_i+0xd8>
    3b66:	0026      	movs	r6, r4
    3b68:	3642      	adds	r6, #66	; 0x42
    3b6a:	7032      	strb	r2, [r6, #0]
    3b6c:	e029      	b.n	3bc2 <_printf_i+0x8a>
    3b6e:	2a64      	cmp	r2, #100	; 0x64
    3b70:	d001      	beq.n	3b76 <_printf_i+0x3e>
    3b72:	2a69      	cmp	r2, #105	; 0x69
    3b74:	d1f7      	bne.n	3b66 <_printf_i+0x2e>
    3b76:	6821      	ldr	r1, [r4, #0]
    3b78:	681a      	ldr	r2, [r3, #0]
    3b7a:	0608      	lsls	r0, r1, #24
    3b7c:	d523      	bpl.n	3bc6 <_printf_i+0x8e>
    3b7e:	1d11      	adds	r1, r2, #4
    3b80:	6019      	str	r1, [r3, #0]
    3b82:	6815      	ldr	r5, [r2, #0]
    3b84:	e025      	b.n	3bd2 <_printf_i+0x9a>
    3b86:	2a73      	cmp	r2, #115	; 0x73
    3b88:	d100      	bne.n	3b8c <_printf_i+0x54>
    3b8a:	e088      	b.n	3c9e <_printf_i+0x166>
    3b8c:	d808      	bhi.n	3ba0 <_printf_i+0x68>
    3b8e:	2a6f      	cmp	r2, #111	; 0x6f
    3b90:	d029      	beq.n	3be6 <_printf_i+0xae>
    3b92:	2a70      	cmp	r2, #112	; 0x70
    3b94:	d1e7      	bne.n	3b66 <_printf_i+0x2e>
    3b96:	2220      	movs	r2, #32
    3b98:	6809      	ldr	r1, [r1, #0]
    3b9a:	430a      	orrs	r2, r1
    3b9c:	6022      	str	r2, [r4, #0]
    3b9e:	e003      	b.n	3ba8 <_printf_i+0x70>
    3ba0:	2a75      	cmp	r2, #117	; 0x75
    3ba2:	d020      	beq.n	3be6 <_printf_i+0xae>
    3ba4:	2a78      	cmp	r2, #120	; 0x78
    3ba6:	d1de      	bne.n	3b66 <_printf_i+0x2e>
    3ba8:	0022      	movs	r2, r4
    3baa:	2178      	movs	r1, #120	; 0x78
    3bac:	3245      	adds	r2, #69	; 0x45
    3bae:	7011      	strb	r1, [r2, #0]
    3bb0:	4a6c      	ldr	r2, [pc, #432]	; (3d64 <_printf_i+0x22c>)
    3bb2:	e030      	b.n	3c16 <_printf_i+0xde>
    3bb4:	000e      	movs	r6, r1
    3bb6:	681a      	ldr	r2, [r3, #0]
    3bb8:	3642      	adds	r6, #66	; 0x42
    3bba:	1d11      	adds	r1, r2, #4
    3bbc:	6019      	str	r1, [r3, #0]
    3bbe:	6813      	ldr	r3, [r2, #0]
    3bc0:	7033      	strb	r3, [r6, #0]
    3bc2:	2301      	movs	r3, #1
    3bc4:	e079      	b.n	3cba <_printf_i+0x182>
    3bc6:	0649      	lsls	r1, r1, #25
    3bc8:	d5d9      	bpl.n	3b7e <_printf_i+0x46>
    3bca:	1d11      	adds	r1, r2, #4
    3bcc:	6019      	str	r1, [r3, #0]
    3bce:	2300      	movs	r3, #0
    3bd0:	5ed5      	ldrsh	r5, [r2, r3]
    3bd2:	2d00      	cmp	r5, #0
    3bd4:	da03      	bge.n	3bde <_printf_i+0xa6>
    3bd6:	232d      	movs	r3, #45	; 0x2d
    3bd8:	9a04      	ldr	r2, [sp, #16]
    3bda:	426d      	negs	r5, r5
    3bdc:	7013      	strb	r3, [r2, #0]
    3bde:	4b62      	ldr	r3, [pc, #392]	; (3d68 <_printf_i+0x230>)
    3be0:	270a      	movs	r7, #10
    3be2:	9303      	str	r3, [sp, #12]
    3be4:	e02f      	b.n	3c46 <_printf_i+0x10e>
    3be6:	6820      	ldr	r0, [r4, #0]
    3be8:	6819      	ldr	r1, [r3, #0]
    3bea:	0605      	lsls	r5, r0, #24
    3bec:	d503      	bpl.n	3bf6 <_printf_i+0xbe>
    3bee:	1d08      	adds	r0, r1, #4
    3bf0:	6018      	str	r0, [r3, #0]
    3bf2:	680d      	ldr	r5, [r1, #0]
    3bf4:	e005      	b.n	3c02 <_printf_i+0xca>
    3bf6:	0640      	lsls	r0, r0, #25
    3bf8:	d5f9      	bpl.n	3bee <_printf_i+0xb6>
    3bfa:	680d      	ldr	r5, [r1, #0]
    3bfc:	1d08      	adds	r0, r1, #4
    3bfe:	6018      	str	r0, [r3, #0]
    3c00:	b2ad      	uxth	r5, r5
    3c02:	4b59      	ldr	r3, [pc, #356]	; (3d68 <_printf_i+0x230>)
    3c04:	2708      	movs	r7, #8
    3c06:	9303      	str	r3, [sp, #12]
    3c08:	2a6f      	cmp	r2, #111	; 0x6f
    3c0a:	d018      	beq.n	3c3e <_printf_i+0x106>
    3c0c:	270a      	movs	r7, #10
    3c0e:	e016      	b.n	3c3e <_printf_i+0x106>
    3c10:	3145      	adds	r1, #69	; 0x45
    3c12:	700a      	strb	r2, [r1, #0]
    3c14:	4a54      	ldr	r2, [pc, #336]	; (3d68 <_printf_i+0x230>)
    3c16:	9203      	str	r2, [sp, #12]
    3c18:	681a      	ldr	r2, [r3, #0]
    3c1a:	6821      	ldr	r1, [r4, #0]
    3c1c:	1d10      	adds	r0, r2, #4
    3c1e:	6018      	str	r0, [r3, #0]
    3c20:	6815      	ldr	r5, [r2, #0]
    3c22:	0608      	lsls	r0, r1, #24
    3c24:	d522      	bpl.n	3c6c <_printf_i+0x134>
    3c26:	07cb      	lsls	r3, r1, #31
    3c28:	d502      	bpl.n	3c30 <_printf_i+0xf8>
    3c2a:	2320      	movs	r3, #32
    3c2c:	4319      	orrs	r1, r3
    3c2e:	6021      	str	r1, [r4, #0]
    3c30:	2710      	movs	r7, #16
    3c32:	2d00      	cmp	r5, #0
    3c34:	d103      	bne.n	3c3e <_printf_i+0x106>
    3c36:	2320      	movs	r3, #32
    3c38:	6822      	ldr	r2, [r4, #0]
    3c3a:	439a      	bics	r2, r3
    3c3c:	6022      	str	r2, [r4, #0]
    3c3e:	0023      	movs	r3, r4
    3c40:	2200      	movs	r2, #0
    3c42:	3343      	adds	r3, #67	; 0x43
    3c44:	701a      	strb	r2, [r3, #0]
    3c46:	6863      	ldr	r3, [r4, #4]
    3c48:	60a3      	str	r3, [r4, #8]
    3c4a:	2b00      	cmp	r3, #0
    3c4c:	db5c      	blt.n	3d08 <_printf_i+0x1d0>
    3c4e:	2204      	movs	r2, #4
    3c50:	6821      	ldr	r1, [r4, #0]
    3c52:	4391      	bics	r1, r2
    3c54:	6021      	str	r1, [r4, #0]
    3c56:	2d00      	cmp	r5, #0
    3c58:	d158      	bne.n	3d0c <_printf_i+0x1d4>
    3c5a:	9e04      	ldr	r6, [sp, #16]
    3c5c:	2b00      	cmp	r3, #0
    3c5e:	d064      	beq.n	3d2a <_printf_i+0x1f2>
    3c60:	0026      	movs	r6, r4
    3c62:	9b03      	ldr	r3, [sp, #12]
    3c64:	3642      	adds	r6, #66	; 0x42
    3c66:	781b      	ldrb	r3, [r3, #0]
    3c68:	7033      	strb	r3, [r6, #0]
    3c6a:	e05e      	b.n	3d2a <_printf_i+0x1f2>
    3c6c:	0648      	lsls	r0, r1, #25
    3c6e:	d5da      	bpl.n	3c26 <_printf_i+0xee>
    3c70:	b2ad      	uxth	r5, r5
    3c72:	e7d8      	b.n	3c26 <_printf_i+0xee>
    3c74:	6809      	ldr	r1, [r1, #0]
    3c76:	681a      	ldr	r2, [r3, #0]
    3c78:	0608      	lsls	r0, r1, #24
    3c7a:	d505      	bpl.n	3c88 <_printf_i+0x150>
    3c7c:	1d11      	adds	r1, r2, #4
    3c7e:	6019      	str	r1, [r3, #0]
    3c80:	6813      	ldr	r3, [r2, #0]
    3c82:	6962      	ldr	r2, [r4, #20]
    3c84:	601a      	str	r2, [r3, #0]
    3c86:	e006      	b.n	3c96 <_printf_i+0x15e>
    3c88:	0649      	lsls	r1, r1, #25
    3c8a:	d5f7      	bpl.n	3c7c <_printf_i+0x144>
    3c8c:	1d11      	adds	r1, r2, #4
    3c8e:	6019      	str	r1, [r3, #0]
    3c90:	6813      	ldr	r3, [r2, #0]
    3c92:	8aa2      	ldrh	r2, [r4, #20]
    3c94:	801a      	strh	r2, [r3, #0]
    3c96:	2300      	movs	r3, #0
    3c98:	9e04      	ldr	r6, [sp, #16]
    3c9a:	6123      	str	r3, [r4, #16]
    3c9c:	e054      	b.n	3d48 <_printf_i+0x210>
    3c9e:	681a      	ldr	r2, [r3, #0]
    3ca0:	1d11      	adds	r1, r2, #4
    3ca2:	6019      	str	r1, [r3, #0]
    3ca4:	6816      	ldr	r6, [r2, #0]
    3ca6:	2100      	movs	r1, #0
    3ca8:	6862      	ldr	r2, [r4, #4]
    3caa:	0030      	movs	r0, r6
    3cac:	f001 f9ac 	bl	5008 <memchr>
    3cb0:	2800      	cmp	r0, #0
    3cb2:	d001      	beq.n	3cb8 <_printf_i+0x180>
    3cb4:	1b80      	subs	r0, r0, r6
    3cb6:	6060      	str	r0, [r4, #4]
    3cb8:	6863      	ldr	r3, [r4, #4]
    3cba:	6123      	str	r3, [r4, #16]
    3cbc:	2300      	movs	r3, #0
    3cbe:	9a04      	ldr	r2, [sp, #16]
    3cc0:	7013      	strb	r3, [r2, #0]
    3cc2:	e041      	b.n	3d48 <_printf_i+0x210>
    3cc4:	6923      	ldr	r3, [r4, #16]
    3cc6:	0032      	movs	r2, r6
    3cc8:	9906      	ldr	r1, [sp, #24]
    3cca:	9805      	ldr	r0, [sp, #20]
    3ccc:	9d07      	ldr	r5, [sp, #28]
    3cce:	47a8      	blx	r5
    3cd0:	1c43      	adds	r3, r0, #1
    3cd2:	d043      	beq.n	3d5c <_printf_i+0x224>
    3cd4:	6823      	ldr	r3, [r4, #0]
    3cd6:	2500      	movs	r5, #0
    3cd8:	079b      	lsls	r3, r3, #30
    3cda:	d40f      	bmi.n	3cfc <_printf_i+0x1c4>
    3cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3cde:	68e0      	ldr	r0, [r4, #12]
    3ce0:	4298      	cmp	r0, r3
    3ce2:	da3d      	bge.n	3d60 <_printf_i+0x228>
    3ce4:	0018      	movs	r0, r3
    3ce6:	e03b      	b.n	3d60 <_printf_i+0x228>
    3ce8:	0022      	movs	r2, r4
    3cea:	2301      	movs	r3, #1
    3cec:	3219      	adds	r2, #25
    3cee:	9906      	ldr	r1, [sp, #24]
    3cf0:	9805      	ldr	r0, [sp, #20]
    3cf2:	9e07      	ldr	r6, [sp, #28]
    3cf4:	47b0      	blx	r6
    3cf6:	1c43      	adds	r3, r0, #1
    3cf8:	d030      	beq.n	3d5c <_printf_i+0x224>
    3cfa:	3501      	adds	r5, #1
    3cfc:	68e3      	ldr	r3, [r4, #12]
    3cfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3d00:	1a9b      	subs	r3, r3, r2
    3d02:	429d      	cmp	r5, r3
    3d04:	dbf0      	blt.n	3ce8 <_printf_i+0x1b0>
    3d06:	e7e9      	b.n	3cdc <_printf_i+0x1a4>
    3d08:	2d00      	cmp	r5, #0
    3d0a:	d0a9      	beq.n	3c60 <_printf_i+0x128>
    3d0c:	9e04      	ldr	r6, [sp, #16]
    3d0e:	0028      	movs	r0, r5
    3d10:	0039      	movs	r1, r7
    3d12:	f002 f8ad 	bl	5e70 <__aeabi_uidivmod>
    3d16:	9b03      	ldr	r3, [sp, #12]
    3d18:	3e01      	subs	r6, #1
    3d1a:	5c5b      	ldrb	r3, [r3, r1]
    3d1c:	0028      	movs	r0, r5
    3d1e:	7033      	strb	r3, [r6, #0]
    3d20:	0039      	movs	r1, r7
    3d22:	f002 f81f 	bl	5d64 <__udivsi3>
    3d26:	1e05      	subs	r5, r0, #0
    3d28:	d1f1      	bne.n	3d0e <_printf_i+0x1d6>
    3d2a:	2f08      	cmp	r7, #8
    3d2c:	d109      	bne.n	3d42 <_printf_i+0x20a>
    3d2e:	6823      	ldr	r3, [r4, #0]
    3d30:	07db      	lsls	r3, r3, #31
    3d32:	d506      	bpl.n	3d42 <_printf_i+0x20a>
    3d34:	6863      	ldr	r3, [r4, #4]
    3d36:	6922      	ldr	r2, [r4, #16]
    3d38:	4293      	cmp	r3, r2
    3d3a:	dc02      	bgt.n	3d42 <_printf_i+0x20a>
    3d3c:	2330      	movs	r3, #48	; 0x30
    3d3e:	3e01      	subs	r6, #1
    3d40:	7033      	strb	r3, [r6, #0]
    3d42:	9b04      	ldr	r3, [sp, #16]
    3d44:	1b9b      	subs	r3, r3, r6
    3d46:	6123      	str	r3, [r4, #16]
    3d48:	9b07      	ldr	r3, [sp, #28]
    3d4a:	aa09      	add	r2, sp, #36	; 0x24
    3d4c:	9300      	str	r3, [sp, #0]
    3d4e:	0021      	movs	r1, r4
    3d50:	9b06      	ldr	r3, [sp, #24]
    3d52:	9805      	ldr	r0, [sp, #20]
    3d54:	f7ff fe82 	bl	3a5c <_printf_common>
    3d58:	1c43      	adds	r3, r0, #1
    3d5a:	d1b3      	bne.n	3cc4 <_printf_i+0x18c>
    3d5c:	2001      	movs	r0, #1
    3d5e:	4240      	negs	r0, r0
    3d60:	b00b      	add	sp, #44	; 0x2c
    3d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d64:	000089c7 	.word	0x000089c7
    3d68:	000089b6 	.word	0x000089b6

00003d6c <iprintf>:
    3d6c:	b40f      	push	{r0, r1, r2, r3}
    3d6e:	4b0b      	ldr	r3, [pc, #44]	; (3d9c <iprintf+0x30>)
    3d70:	b513      	push	{r0, r1, r4, lr}
    3d72:	681c      	ldr	r4, [r3, #0]
    3d74:	2c00      	cmp	r4, #0
    3d76:	d005      	beq.n	3d84 <iprintf+0x18>
    3d78:	69a3      	ldr	r3, [r4, #24]
    3d7a:	2b00      	cmp	r3, #0
    3d7c:	d102      	bne.n	3d84 <iprintf+0x18>
    3d7e:	0020      	movs	r0, r4
    3d80:	f001 f830 	bl	4de4 <__sinit>
    3d84:	ab05      	add	r3, sp, #20
    3d86:	9a04      	ldr	r2, [sp, #16]
    3d88:	68a1      	ldr	r1, [r4, #8]
    3d8a:	0020      	movs	r0, r4
    3d8c:	9301      	str	r3, [sp, #4]
    3d8e:	f001 fd07 	bl	57a0 <_vfiprintf_r>
    3d92:	bc16      	pop	{r1, r2, r4}
    3d94:	bc08      	pop	{r3}
    3d96:	b004      	add	sp, #16
    3d98:	4718      	bx	r3
    3d9a:	46c0      	nop			; (mov r8, r8)
    3d9c:	20000010 	.word	0x20000010

00003da0 <setbuf>:
    3da0:	424a      	negs	r2, r1
    3da2:	414a      	adcs	r2, r1
    3da4:	2380      	movs	r3, #128	; 0x80
    3da6:	b510      	push	{r4, lr}
    3da8:	0052      	lsls	r2, r2, #1
    3daa:	00db      	lsls	r3, r3, #3
    3dac:	f000 f802 	bl	3db4 <setvbuf>
    3db0:	bd10      	pop	{r4, pc}
	...

00003db4 <setvbuf>:
    3db4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3db6:	001d      	movs	r5, r3
    3db8:	4b4f      	ldr	r3, [pc, #316]	; (3ef8 <setvbuf+0x144>)
    3dba:	b085      	sub	sp, #20
    3dbc:	681e      	ldr	r6, [r3, #0]
    3dbe:	0004      	movs	r4, r0
    3dc0:	000f      	movs	r7, r1
    3dc2:	9200      	str	r2, [sp, #0]
    3dc4:	2e00      	cmp	r6, #0
    3dc6:	d005      	beq.n	3dd4 <setvbuf+0x20>
    3dc8:	69b3      	ldr	r3, [r6, #24]
    3dca:	2b00      	cmp	r3, #0
    3dcc:	d102      	bne.n	3dd4 <setvbuf+0x20>
    3dce:	0030      	movs	r0, r6
    3dd0:	f001 f808 	bl	4de4 <__sinit>
    3dd4:	4b49      	ldr	r3, [pc, #292]	; (3efc <setvbuf+0x148>)
    3dd6:	429c      	cmp	r4, r3
    3dd8:	d150      	bne.n	3e7c <setvbuf+0xc8>
    3dda:	6874      	ldr	r4, [r6, #4]
    3ddc:	9b00      	ldr	r3, [sp, #0]
    3dde:	2b02      	cmp	r3, #2
    3de0:	d005      	beq.n	3dee <setvbuf+0x3a>
    3de2:	2b01      	cmp	r3, #1
    3de4:	d900      	bls.n	3de8 <setvbuf+0x34>
    3de6:	e084      	b.n	3ef2 <setvbuf+0x13e>
    3de8:	2d00      	cmp	r5, #0
    3dea:	da00      	bge.n	3dee <setvbuf+0x3a>
    3dec:	e081      	b.n	3ef2 <setvbuf+0x13e>
    3dee:	0021      	movs	r1, r4
    3df0:	0030      	movs	r0, r6
    3df2:	f000 ff89 	bl	4d08 <_fflush_r>
    3df6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3df8:	2900      	cmp	r1, #0
    3dfa:	d008      	beq.n	3e0e <setvbuf+0x5a>
    3dfc:	0023      	movs	r3, r4
    3dfe:	3344      	adds	r3, #68	; 0x44
    3e00:	4299      	cmp	r1, r3
    3e02:	d002      	beq.n	3e0a <setvbuf+0x56>
    3e04:	0030      	movs	r0, r6
    3e06:	f001 fbfb 	bl	5600 <_free_r>
    3e0a:	2300      	movs	r3, #0
    3e0c:	6363      	str	r3, [r4, #52]	; 0x34
    3e0e:	2300      	movs	r3, #0
    3e10:	61a3      	str	r3, [r4, #24]
    3e12:	6063      	str	r3, [r4, #4]
    3e14:	89a3      	ldrh	r3, [r4, #12]
    3e16:	061b      	lsls	r3, r3, #24
    3e18:	d503      	bpl.n	3e22 <setvbuf+0x6e>
    3e1a:	6921      	ldr	r1, [r4, #16]
    3e1c:	0030      	movs	r0, r6
    3e1e:	f001 fbef 	bl	5600 <_free_r>
    3e22:	89a3      	ldrh	r3, [r4, #12]
    3e24:	4a36      	ldr	r2, [pc, #216]	; (3f00 <setvbuf+0x14c>)
    3e26:	4013      	ands	r3, r2
    3e28:	81a3      	strh	r3, [r4, #12]
    3e2a:	9b00      	ldr	r3, [sp, #0]
    3e2c:	2b02      	cmp	r3, #2
    3e2e:	d05a      	beq.n	3ee6 <setvbuf+0x132>
    3e30:	ab03      	add	r3, sp, #12
    3e32:	aa02      	add	r2, sp, #8
    3e34:	0021      	movs	r1, r4
    3e36:	0030      	movs	r0, r6
    3e38:	f001 f876 	bl	4f28 <__swhatbuf_r>
    3e3c:	89a3      	ldrh	r3, [r4, #12]
    3e3e:	4318      	orrs	r0, r3
    3e40:	81a0      	strh	r0, [r4, #12]
    3e42:	2d00      	cmp	r5, #0
    3e44:	d124      	bne.n	3e90 <setvbuf+0xdc>
    3e46:	9d02      	ldr	r5, [sp, #8]
    3e48:	0028      	movs	r0, r5
    3e4a:	f001 f8d3 	bl	4ff4 <malloc>
    3e4e:	9501      	str	r5, [sp, #4]
    3e50:	1e07      	subs	r7, r0, #0
    3e52:	d142      	bne.n	3eda <setvbuf+0x126>
    3e54:	9b02      	ldr	r3, [sp, #8]
    3e56:	9301      	str	r3, [sp, #4]
    3e58:	42ab      	cmp	r3, r5
    3e5a:	d139      	bne.n	3ed0 <setvbuf+0x11c>
    3e5c:	2001      	movs	r0, #1
    3e5e:	4240      	negs	r0, r0
    3e60:	2302      	movs	r3, #2
    3e62:	89a2      	ldrh	r2, [r4, #12]
    3e64:	4313      	orrs	r3, r2
    3e66:	81a3      	strh	r3, [r4, #12]
    3e68:	2300      	movs	r3, #0
    3e6a:	60a3      	str	r3, [r4, #8]
    3e6c:	0023      	movs	r3, r4
    3e6e:	3347      	adds	r3, #71	; 0x47
    3e70:	6023      	str	r3, [r4, #0]
    3e72:	6123      	str	r3, [r4, #16]
    3e74:	2301      	movs	r3, #1
    3e76:	6163      	str	r3, [r4, #20]
    3e78:	b005      	add	sp, #20
    3e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e7c:	4b21      	ldr	r3, [pc, #132]	; (3f04 <setvbuf+0x150>)
    3e7e:	429c      	cmp	r4, r3
    3e80:	d101      	bne.n	3e86 <setvbuf+0xd2>
    3e82:	68b4      	ldr	r4, [r6, #8]
    3e84:	e7aa      	b.n	3ddc <setvbuf+0x28>
    3e86:	4b20      	ldr	r3, [pc, #128]	; (3f08 <setvbuf+0x154>)
    3e88:	429c      	cmp	r4, r3
    3e8a:	d1a7      	bne.n	3ddc <setvbuf+0x28>
    3e8c:	68f4      	ldr	r4, [r6, #12]
    3e8e:	e7a5      	b.n	3ddc <setvbuf+0x28>
    3e90:	2f00      	cmp	r7, #0
    3e92:	d0d9      	beq.n	3e48 <setvbuf+0x94>
    3e94:	69b3      	ldr	r3, [r6, #24]
    3e96:	2b00      	cmp	r3, #0
    3e98:	d102      	bne.n	3ea0 <setvbuf+0xec>
    3e9a:	0030      	movs	r0, r6
    3e9c:	f000 ffa2 	bl	4de4 <__sinit>
    3ea0:	9b00      	ldr	r3, [sp, #0]
    3ea2:	2b01      	cmp	r3, #1
    3ea4:	d103      	bne.n	3eae <setvbuf+0xfa>
    3ea6:	89a3      	ldrh	r3, [r4, #12]
    3ea8:	9a00      	ldr	r2, [sp, #0]
    3eaa:	431a      	orrs	r2, r3
    3eac:	81a2      	strh	r2, [r4, #12]
    3eae:	2008      	movs	r0, #8
    3eb0:	89a3      	ldrh	r3, [r4, #12]
    3eb2:	6027      	str	r7, [r4, #0]
    3eb4:	6127      	str	r7, [r4, #16]
    3eb6:	6165      	str	r5, [r4, #20]
    3eb8:	4018      	ands	r0, r3
    3eba:	d018      	beq.n	3eee <setvbuf+0x13a>
    3ebc:	2001      	movs	r0, #1
    3ebe:	4018      	ands	r0, r3
    3ec0:	2300      	movs	r3, #0
    3ec2:	4298      	cmp	r0, r3
    3ec4:	d011      	beq.n	3eea <setvbuf+0x136>
    3ec6:	426d      	negs	r5, r5
    3ec8:	60a3      	str	r3, [r4, #8]
    3eca:	61a5      	str	r5, [r4, #24]
    3ecc:	0018      	movs	r0, r3
    3ece:	e7d3      	b.n	3e78 <setvbuf+0xc4>
    3ed0:	9801      	ldr	r0, [sp, #4]
    3ed2:	f001 f88f 	bl	4ff4 <malloc>
    3ed6:	1e07      	subs	r7, r0, #0
    3ed8:	d0c0      	beq.n	3e5c <setvbuf+0xa8>
    3eda:	2380      	movs	r3, #128	; 0x80
    3edc:	89a2      	ldrh	r2, [r4, #12]
    3ede:	9d01      	ldr	r5, [sp, #4]
    3ee0:	4313      	orrs	r3, r2
    3ee2:	81a3      	strh	r3, [r4, #12]
    3ee4:	e7d6      	b.n	3e94 <setvbuf+0xe0>
    3ee6:	2000      	movs	r0, #0
    3ee8:	e7ba      	b.n	3e60 <setvbuf+0xac>
    3eea:	60a5      	str	r5, [r4, #8]
    3eec:	e7c4      	b.n	3e78 <setvbuf+0xc4>
    3eee:	60a0      	str	r0, [r4, #8]
    3ef0:	e7c2      	b.n	3e78 <setvbuf+0xc4>
    3ef2:	2001      	movs	r0, #1
    3ef4:	4240      	negs	r0, r0
    3ef6:	e7bf      	b.n	3e78 <setvbuf+0xc4>
    3ef8:	20000010 	.word	0x20000010
    3efc:	00008a08 	.word	0x00008a08
    3f00:	fffff35c 	.word	0xfffff35c
    3f04:	00008a28 	.word	0x00008a28
    3f08:	000089e8 	.word	0x000089e8

00003f0c <strlen>:
    3f0c:	2300      	movs	r3, #0
    3f0e:	5cc2      	ldrb	r2, [r0, r3]
    3f10:	3301      	adds	r3, #1
    3f12:	2a00      	cmp	r2, #0
    3f14:	d1fb      	bne.n	3f0e <strlen+0x2>
    3f16:	1e58      	subs	r0, r3, #1
    3f18:	4770      	bx	lr

00003f1a <quorem>:
    3f1a:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f1c:	6903      	ldr	r3, [r0, #16]
    3f1e:	690c      	ldr	r4, [r1, #16]
    3f20:	b089      	sub	sp, #36	; 0x24
    3f22:	0007      	movs	r7, r0
    3f24:	9105      	str	r1, [sp, #20]
    3f26:	2600      	movs	r6, #0
    3f28:	429c      	cmp	r4, r3
    3f2a:	dc6d      	bgt.n	4008 <quorem+0xee>
    3f2c:	000b      	movs	r3, r1
    3f2e:	3c01      	subs	r4, #1
    3f30:	3314      	adds	r3, #20
    3f32:	00a5      	lsls	r5, r4, #2
    3f34:	9303      	str	r3, [sp, #12]
    3f36:	195b      	adds	r3, r3, r5
    3f38:	9304      	str	r3, [sp, #16]
    3f3a:	0003      	movs	r3, r0
    3f3c:	3314      	adds	r3, #20
    3f3e:	9302      	str	r3, [sp, #8]
    3f40:	195d      	adds	r5, r3, r5
    3f42:	9b04      	ldr	r3, [sp, #16]
    3f44:	6828      	ldr	r0, [r5, #0]
    3f46:	681b      	ldr	r3, [r3, #0]
    3f48:	1c59      	adds	r1, r3, #1
    3f4a:	9301      	str	r3, [sp, #4]
    3f4c:	f001 ff0a 	bl	5d64 <__udivsi3>
    3f50:	9001      	str	r0, [sp, #4]
    3f52:	42b0      	cmp	r0, r6
    3f54:	d02d      	beq.n	3fb2 <quorem+0x98>
    3f56:	9b03      	ldr	r3, [sp, #12]
    3f58:	9802      	ldr	r0, [sp, #8]
    3f5a:	469c      	mov	ip, r3
    3f5c:	9606      	str	r6, [sp, #24]
    3f5e:	4662      	mov	r2, ip
    3f60:	ca08      	ldmia	r2!, {r3}
    3f62:	4694      	mov	ip, r2
    3f64:	9a01      	ldr	r2, [sp, #4]
    3f66:	b299      	uxth	r1, r3
    3f68:	4351      	muls	r1, r2
    3f6a:	0c1b      	lsrs	r3, r3, #16
    3f6c:	4353      	muls	r3, r2
    3f6e:	1989      	adds	r1, r1, r6
    3f70:	0c0a      	lsrs	r2, r1, #16
    3f72:	189b      	adds	r3, r3, r2
    3f74:	9307      	str	r3, [sp, #28]
    3f76:	8802      	ldrh	r2, [r0, #0]
    3f78:	0c1e      	lsrs	r6, r3, #16
    3f7a:	9b06      	ldr	r3, [sp, #24]
    3f7c:	b289      	uxth	r1, r1
    3f7e:	18d2      	adds	r2, r2, r3
    3f80:	6803      	ldr	r3, [r0, #0]
    3f82:	1a52      	subs	r2, r2, r1
    3f84:	0c19      	lsrs	r1, r3, #16
    3f86:	466b      	mov	r3, sp
    3f88:	8b9b      	ldrh	r3, [r3, #28]
    3f8a:	1acb      	subs	r3, r1, r3
    3f8c:	1411      	asrs	r1, r2, #16
    3f8e:	185b      	adds	r3, r3, r1
    3f90:	1419      	asrs	r1, r3, #16
    3f92:	b292      	uxth	r2, r2
    3f94:	041b      	lsls	r3, r3, #16
    3f96:	431a      	orrs	r2, r3
    3f98:	9b04      	ldr	r3, [sp, #16]
    3f9a:	9106      	str	r1, [sp, #24]
    3f9c:	c004      	stmia	r0!, {r2}
    3f9e:	4563      	cmp	r3, ip
    3fa0:	d2dd      	bcs.n	3f5e <quorem+0x44>
    3fa2:	682b      	ldr	r3, [r5, #0]
    3fa4:	2b00      	cmp	r3, #0
    3fa6:	d104      	bne.n	3fb2 <quorem+0x98>
    3fa8:	9b02      	ldr	r3, [sp, #8]
    3faa:	3d04      	subs	r5, #4
    3fac:	42ab      	cmp	r3, r5
    3fae:	d32e      	bcc.n	400e <quorem+0xf4>
    3fb0:	613c      	str	r4, [r7, #16]
    3fb2:	9905      	ldr	r1, [sp, #20]
    3fb4:	0038      	movs	r0, r7
    3fb6:	f001 fa44 	bl	5442 <__mcmp>
    3fba:	2800      	cmp	r0, #0
    3fbc:	db23      	blt.n	4006 <quorem+0xec>
    3fbe:	2500      	movs	r5, #0
    3fc0:	9b01      	ldr	r3, [sp, #4]
    3fc2:	9802      	ldr	r0, [sp, #8]
    3fc4:	3301      	adds	r3, #1
    3fc6:	9903      	ldr	r1, [sp, #12]
    3fc8:	9301      	str	r3, [sp, #4]
    3fca:	c908      	ldmia	r1!, {r3}
    3fcc:	8802      	ldrh	r2, [r0, #0]
    3fce:	1955      	adds	r5, r2, r5
    3fd0:	b29a      	uxth	r2, r3
    3fd2:	1aaa      	subs	r2, r5, r2
    3fd4:	6805      	ldr	r5, [r0, #0]
    3fd6:	0c1b      	lsrs	r3, r3, #16
    3fd8:	0c2d      	lsrs	r5, r5, #16
    3fda:	1aeb      	subs	r3, r5, r3
    3fdc:	1415      	asrs	r5, r2, #16
    3fde:	195b      	adds	r3, r3, r5
    3fe0:	141d      	asrs	r5, r3, #16
    3fe2:	b292      	uxth	r2, r2
    3fe4:	041b      	lsls	r3, r3, #16
    3fe6:	4313      	orrs	r3, r2
    3fe8:	c008      	stmia	r0!, {r3}
    3fea:	9b04      	ldr	r3, [sp, #16]
    3fec:	428b      	cmp	r3, r1
    3fee:	d2ec      	bcs.n	3fca <quorem+0xb0>
    3ff0:	9a02      	ldr	r2, [sp, #8]
    3ff2:	00a3      	lsls	r3, r4, #2
    3ff4:	18d3      	adds	r3, r2, r3
    3ff6:	681a      	ldr	r2, [r3, #0]
    3ff8:	2a00      	cmp	r2, #0
    3ffa:	d104      	bne.n	4006 <quorem+0xec>
    3ffc:	9a02      	ldr	r2, [sp, #8]
    3ffe:	3b04      	subs	r3, #4
    4000:	429a      	cmp	r2, r3
    4002:	d309      	bcc.n	4018 <quorem+0xfe>
    4004:	613c      	str	r4, [r7, #16]
    4006:	9e01      	ldr	r6, [sp, #4]
    4008:	0030      	movs	r0, r6
    400a:	b009      	add	sp, #36	; 0x24
    400c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    400e:	682b      	ldr	r3, [r5, #0]
    4010:	2b00      	cmp	r3, #0
    4012:	d1cd      	bne.n	3fb0 <quorem+0x96>
    4014:	3c01      	subs	r4, #1
    4016:	e7c7      	b.n	3fa8 <quorem+0x8e>
    4018:	681a      	ldr	r2, [r3, #0]
    401a:	2a00      	cmp	r2, #0
    401c:	d1f2      	bne.n	4004 <quorem+0xea>
    401e:	3c01      	subs	r4, #1
    4020:	e7ec      	b.n	3ffc <quorem+0xe2>
	...

00004024 <_dtoa_r>:
    4024:	b5f0      	push	{r4, r5, r6, r7, lr}
    4026:	0016      	movs	r6, r2
    4028:	001f      	movs	r7, r3
    402a:	6a44      	ldr	r4, [r0, #36]	; 0x24
    402c:	b09d      	sub	sp, #116	; 0x74
    402e:	9004      	str	r0, [sp, #16]
    4030:	9d25      	ldr	r5, [sp, #148]	; 0x94
    4032:	9606      	str	r6, [sp, #24]
    4034:	9707      	str	r7, [sp, #28]
    4036:	2c00      	cmp	r4, #0
    4038:	d108      	bne.n	404c <_dtoa_r+0x28>
    403a:	2010      	movs	r0, #16
    403c:	f000 ffda 	bl	4ff4 <malloc>
    4040:	9b04      	ldr	r3, [sp, #16]
    4042:	6258      	str	r0, [r3, #36]	; 0x24
    4044:	6044      	str	r4, [r0, #4]
    4046:	6084      	str	r4, [r0, #8]
    4048:	6004      	str	r4, [r0, #0]
    404a:	60c4      	str	r4, [r0, #12]
    404c:	9b04      	ldr	r3, [sp, #16]
    404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4050:	6819      	ldr	r1, [r3, #0]
    4052:	2900      	cmp	r1, #0
    4054:	d00b      	beq.n	406e <_dtoa_r+0x4a>
    4056:	685a      	ldr	r2, [r3, #4]
    4058:	2301      	movs	r3, #1
    405a:	4093      	lsls	r3, r2
    405c:	604a      	str	r2, [r1, #4]
    405e:	608b      	str	r3, [r1, #8]
    4060:	9804      	ldr	r0, [sp, #16]
    4062:	f001 f814 	bl	508e <_Bfree>
    4066:	2200      	movs	r2, #0
    4068:	9b04      	ldr	r3, [sp, #16]
    406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    406c:	601a      	str	r2, [r3, #0]
    406e:	9b07      	ldr	r3, [sp, #28]
    4070:	2b00      	cmp	r3, #0
    4072:	da1f      	bge.n	40b4 <_dtoa_r+0x90>
    4074:	2301      	movs	r3, #1
    4076:	602b      	str	r3, [r5, #0]
    4078:	007b      	lsls	r3, r7, #1
    407a:	085b      	lsrs	r3, r3, #1
    407c:	9307      	str	r3, [sp, #28]
    407e:	9c07      	ldr	r4, [sp, #28]
    4080:	4bb7      	ldr	r3, [pc, #732]	; (4360 <_dtoa_r+0x33c>)
    4082:	0022      	movs	r2, r4
    4084:	9319      	str	r3, [sp, #100]	; 0x64
    4086:	401a      	ands	r2, r3
    4088:	429a      	cmp	r2, r3
    408a:	d116      	bne.n	40ba <_dtoa_r+0x96>
    408c:	4bb5      	ldr	r3, [pc, #724]	; (4364 <_dtoa_r+0x340>)
    408e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4090:	6013      	str	r3, [r2, #0]
    4092:	9b06      	ldr	r3, [sp, #24]
    4094:	2b00      	cmp	r3, #0
    4096:	d103      	bne.n	40a0 <_dtoa_r+0x7c>
    4098:	0324      	lsls	r4, r4, #12
    409a:	d101      	bne.n	40a0 <_dtoa_r+0x7c>
    409c:	f000 fd91 	bl	4bc2 <_dtoa_r+0xb9e>
    40a0:	4bb1      	ldr	r3, [pc, #708]	; (4368 <_dtoa_r+0x344>)
    40a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    40a4:	930a      	str	r3, [sp, #40]	; 0x28
    40a6:	4bb1      	ldr	r3, [pc, #708]	; (436c <_dtoa_r+0x348>)
    40a8:	2a00      	cmp	r2, #0
    40aa:	d001      	beq.n	40b0 <_dtoa_r+0x8c>
    40ac:	f000 fd8f 	bl	4bce <_dtoa_r+0xbaa>
    40b0:	f000 fd8f 	bl	4bd2 <_dtoa_r+0xbae>
    40b4:	2300      	movs	r3, #0
    40b6:	602b      	str	r3, [r5, #0]
    40b8:	e7e1      	b.n	407e <_dtoa_r+0x5a>
    40ba:	9e06      	ldr	r6, [sp, #24]
    40bc:	9f07      	ldr	r7, [sp, #28]
    40be:	2200      	movs	r2, #0
    40c0:	2300      	movs	r3, #0
    40c2:	0030      	movs	r0, r6
    40c4:	0039      	movs	r1, r7
    40c6:	f001 ffd3 	bl	6070 <__aeabi_dcmpeq>
    40ca:	1e05      	subs	r5, r0, #0
    40cc:	d00e      	beq.n	40ec <_dtoa_r+0xc8>
    40ce:	2301      	movs	r3, #1
    40d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
    40d2:	6013      	str	r3, [r2, #0]
    40d4:	4ba6      	ldr	r3, [pc, #664]	; (4370 <_dtoa_r+0x34c>)
    40d6:	9a26      	ldr	r2, [sp, #152]	; 0x98
    40d8:	930a      	str	r3, [sp, #40]	; 0x28
    40da:	2a00      	cmp	r2, #0
    40dc:	d101      	bne.n	40e2 <_dtoa_r+0xbe>
    40de:	f000 fd78 	bl	4bd2 <_dtoa_r+0xbae>
    40e2:	4aa4      	ldr	r2, [pc, #656]	; (4374 <_dtoa_r+0x350>)
    40e4:	9926      	ldr	r1, [sp, #152]	; 0x98
    40e6:	600a      	str	r2, [r1, #0]
    40e8:	f000 fd73 	bl	4bd2 <_dtoa_r+0xbae>
    40ec:	ab1a      	add	r3, sp, #104	; 0x68
    40ee:	9301      	str	r3, [sp, #4]
    40f0:	ab1b      	add	r3, sp, #108	; 0x6c
    40f2:	9300      	str	r3, [sp, #0]
    40f4:	0032      	movs	r2, r6
    40f6:	003b      	movs	r3, r7
    40f8:	9804      	ldr	r0, [sp, #16]
    40fa:	f001 fa1f 	bl	553c <__d2b>
    40fe:	0063      	lsls	r3, r4, #1
    4100:	9005      	str	r0, [sp, #20]
    4102:	0d5b      	lsrs	r3, r3, #21
    4104:	d100      	bne.n	4108 <_dtoa_r+0xe4>
    4106:	e07f      	b.n	4208 <_dtoa_r+0x1e4>
    4108:	033a      	lsls	r2, r7, #12
    410a:	4c9b      	ldr	r4, [pc, #620]	; (4378 <_dtoa_r+0x354>)
    410c:	0b12      	lsrs	r2, r2, #12
    410e:	4314      	orrs	r4, r2
    4110:	0021      	movs	r1, r4
    4112:	4a9a      	ldr	r2, [pc, #616]	; (437c <_dtoa_r+0x358>)
    4114:	0030      	movs	r0, r6
    4116:	9518      	str	r5, [sp, #96]	; 0x60
    4118:	189e      	adds	r6, r3, r2
    411a:	2200      	movs	r2, #0
    411c:	4b98      	ldr	r3, [pc, #608]	; (4380 <_dtoa_r+0x35c>)
    411e:	f003 feef 	bl	7f00 <__aeabi_dsub>
    4122:	4a98      	ldr	r2, [pc, #608]	; (4384 <_dtoa_r+0x360>)
    4124:	4b98      	ldr	r3, [pc, #608]	; (4388 <_dtoa_r+0x364>)
    4126:	f003 fc6b 	bl	7a00 <__aeabi_dmul>
    412a:	4a98      	ldr	r2, [pc, #608]	; (438c <_dtoa_r+0x368>)
    412c:	4b98      	ldr	r3, [pc, #608]	; (4390 <_dtoa_r+0x36c>)
    412e:	f002 fd23 	bl	6b78 <__aeabi_dadd>
    4132:	0004      	movs	r4, r0
    4134:	0030      	movs	r0, r6
    4136:	000d      	movs	r5, r1
    4138:	f004 fa4c 	bl	85d4 <__aeabi_i2d>
    413c:	4a95      	ldr	r2, [pc, #596]	; (4394 <_dtoa_r+0x370>)
    413e:	4b96      	ldr	r3, [pc, #600]	; (4398 <_dtoa_r+0x374>)
    4140:	f003 fc5e 	bl	7a00 <__aeabi_dmul>
    4144:	0002      	movs	r2, r0
    4146:	000b      	movs	r3, r1
    4148:	0020      	movs	r0, r4
    414a:	0029      	movs	r1, r5
    414c:	f002 fd14 	bl	6b78 <__aeabi_dadd>
    4150:	0004      	movs	r4, r0
    4152:	000d      	movs	r5, r1
    4154:	f004 fa0a 	bl	856c <__aeabi_d2iz>
    4158:	2200      	movs	r2, #0
    415a:	9003      	str	r0, [sp, #12]
    415c:	2300      	movs	r3, #0
    415e:	0020      	movs	r0, r4
    4160:	0029      	movs	r1, r5
    4162:	f001 ff8b 	bl	607c <__aeabi_dcmplt>
    4166:	2800      	cmp	r0, #0
    4168:	d00e      	beq.n	4188 <_dtoa_r+0x164>
    416a:	9803      	ldr	r0, [sp, #12]
    416c:	f004 fa32 	bl	85d4 <__aeabi_i2d>
    4170:	000b      	movs	r3, r1
    4172:	0002      	movs	r2, r0
    4174:	0029      	movs	r1, r5
    4176:	0020      	movs	r0, r4
    4178:	f001 ff7a 	bl	6070 <__aeabi_dcmpeq>
    417c:	0003      	movs	r3, r0
    417e:	4258      	negs	r0, r3
    4180:	4158      	adcs	r0, r3
    4182:	9b03      	ldr	r3, [sp, #12]
    4184:	1a1b      	subs	r3, r3, r0
    4186:	9303      	str	r3, [sp, #12]
    4188:	2301      	movs	r3, #1
    418a:	9316      	str	r3, [sp, #88]	; 0x58
    418c:	9b03      	ldr	r3, [sp, #12]
    418e:	2b16      	cmp	r3, #22
    4190:	d80f      	bhi.n	41b2 <_dtoa_r+0x18e>
    4192:	4982      	ldr	r1, [pc, #520]	; (439c <_dtoa_r+0x378>)
    4194:	00db      	lsls	r3, r3, #3
    4196:	18c9      	adds	r1, r1, r3
    4198:	6808      	ldr	r0, [r1, #0]
    419a:	6849      	ldr	r1, [r1, #4]
    419c:	9a06      	ldr	r2, [sp, #24]
    419e:	9b07      	ldr	r3, [sp, #28]
    41a0:	f001 ff80 	bl	60a4 <__aeabi_dcmpgt>
    41a4:	2800      	cmp	r0, #0
    41a6:	d04b      	beq.n	4240 <_dtoa_r+0x21c>
    41a8:	9b03      	ldr	r3, [sp, #12]
    41aa:	3b01      	subs	r3, #1
    41ac:	9303      	str	r3, [sp, #12]
    41ae:	2300      	movs	r3, #0
    41b0:	9316      	str	r3, [sp, #88]	; 0x58
    41b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    41b4:	1b9e      	subs	r6, r3, r6
    41b6:	2300      	movs	r3, #0
    41b8:	930b      	str	r3, [sp, #44]	; 0x2c
    41ba:	0033      	movs	r3, r6
    41bc:	3b01      	subs	r3, #1
    41be:	930c      	str	r3, [sp, #48]	; 0x30
    41c0:	d504      	bpl.n	41cc <_dtoa_r+0x1a8>
    41c2:	2301      	movs	r3, #1
    41c4:	1b9b      	subs	r3, r3, r6
    41c6:	930b      	str	r3, [sp, #44]	; 0x2c
    41c8:	2300      	movs	r3, #0
    41ca:	930c      	str	r3, [sp, #48]	; 0x30
    41cc:	9b03      	ldr	r3, [sp, #12]
    41ce:	2b00      	cmp	r3, #0
    41d0:	db38      	blt.n	4244 <_dtoa_r+0x220>
    41d2:	9a03      	ldr	r2, [sp, #12]
    41d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    41d6:	4694      	mov	ip, r2
    41d8:	4463      	add	r3, ip
    41da:	930c      	str	r3, [sp, #48]	; 0x30
    41dc:	2300      	movs	r3, #0
    41de:	920f      	str	r2, [sp, #60]	; 0x3c
    41e0:	9308      	str	r3, [sp, #32]
    41e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    41e4:	2501      	movs	r5, #1
    41e6:	2b09      	cmp	r3, #9
    41e8:	d900      	bls.n	41ec <_dtoa_r+0x1c8>
    41ea:	e091      	b.n	4310 <_dtoa_r+0x2ec>
    41ec:	2b05      	cmp	r3, #5
    41ee:	dd02      	ble.n	41f6 <_dtoa_r+0x1d2>
    41f0:	2500      	movs	r5, #0
    41f2:	3b04      	subs	r3, #4
    41f4:	9322      	str	r3, [sp, #136]	; 0x88
    41f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    41f8:	1e98      	subs	r0, r3, #2
    41fa:	2803      	cmp	r0, #3
    41fc:	d900      	bls.n	4200 <_dtoa_r+0x1dc>
    41fe:	e091      	b.n	4324 <_dtoa_r+0x300>
    4200:	f001 fda6 	bl	5d50 <__gnu_thumb1_case_uqi>
    4204:	76298482 	.word	0x76298482
    4208:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    420a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    420c:	189e      	adds	r6, r3, r2
    420e:	4b64      	ldr	r3, [pc, #400]	; (43a0 <_dtoa_r+0x37c>)
    4210:	18f2      	adds	r2, r6, r3
    4212:	2a20      	cmp	r2, #32
    4214:	dd0f      	ble.n	4236 <_dtoa_r+0x212>
    4216:	4b63      	ldr	r3, [pc, #396]	; (43a4 <_dtoa_r+0x380>)
    4218:	9806      	ldr	r0, [sp, #24]
    421a:	18f3      	adds	r3, r6, r3
    421c:	40d8      	lsrs	r0, r3
    421e:	2340      	movs	r3, #64	; 0x40
    4220:	1a9b      	subs	r3, r3, r2
    4222:	409c      	lsls	r4, r3
    4224:	4320      	orrs	r0, r4
    4226:	f004 fa17 	bl	8658 <__aeabi_ui2d>
    422a:	2301      	movs	r3, #1
    422c:	4c5e      	ldr	r4, [pc, #376]	; (43a8 <_dtoa_r+0x384>)
    422e:	3e01      	subs	r6, #1
    4230:	1909      	adds	r1, r1, r4
    4232:	9318      	str	r3, [sp, #96]	; 0x60
    4234:	e771      	b.n	411a <_dtoa_r+0xf6>
    4236:	2320      	movs	r3, #32
    4238:	9806      	ldr	r0, [sp, #24]
    423a:	1a9b      	subs	r3, r3, r2
    423c:	4098      	lsls	r0, r3
    423e:	e7f2      	b.n	4226 <_dtoa_r+0x202>
    4240:	9016      	str	r0, [sp, #88]	; 0x58
    4242:	e7b6      	b.n	41b2 <_dtoa_r+0x18e>
    4244:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4246:	9a03      	ldr	r2, [sp, #12]
    4248:	1a9b      	subs	r3, r3, r2
    424a:	930b      	str	r3, [sp, #44]	; 0x2c
    424c:	4253      	negs	r3, r2
    424e:	9308      	str	r3, [sp, #32]
    4250:	2300      	movs	r3, #0
    4252:	930f      	str	r3, [sp, #60]	; 0x3c
    4254:	e7c5      	b.n	41e2 <_dtoa_r+0x1be>
    4256:	2301      	movs	r3, #1
    4258:	930e      	str	r3, [sp, #56]	; 0x38
    425a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    425c:	2b00      	cmp	r3, #0
    425e:	dd65      	ble.n	432c <_dtoa_r+0x308>
    4260:	001f      	movs	r7, r3
    4262:	930d      	str	r3, [sp, #52]	; 0x34
    4264:	9a04      	ldr	r2, [sp, #16]
    4266:	6a54      	ldr	r4, [r2, #36]	; 0x24
    4268:	2200      	movs	r2, #0
    426a:	6062      	str	r2, [r4, #4]
    426c:	3204      	adds	r2, #4
    426e:	0011      	movs	r1, r2
    4270:	3114      	adds	r1, #20
    4272:	4299      	cmp	r1, r3
    4274:	d95f      	bls.n	4336 <_dtoa_r+0x312>
    4276:	6861      	ldr	r1, [r4, #4]
    4278:	9804      	ldr	r0, [sp, #16]
    427a:	f000 fed0 	bl	501e <_Balloc>
    427e:	9b04      	ldr	r3, [sp, #16]
    4280:	6020      	str	r0, [r4, #0]
    4282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4284:	681b      	ldr	r3, [r3, #0]
    4286:	930a      	str	r3, [sp, #40]	; 0x28
    4288:	2f0e      	cmp	r7, #14
    428a:	d900      	bls.n	428e <_dtoa_r+0x26a>
    428c:	e105      	b.n	449a <_dtoa_r+0x476>
    428e:	2d00      	cmp	r5, #0
    4290:	d100      	bne.n	4294 <_dtoa_r+0x270>
    4292:	e102      	b.n	449a <_dtoa_r+0x476>
    4294:	9b06      	ldr	r3, [sp, #24]
    4296:	9c07      	ldr	r4, [sp, #28]
    4298:	9314      	str	r3, [sp, #80]	; 0x50
    429a:	9415      	str	r4, [sp, #84]	; 0x54
    429c:	9b03      	ldr	r3, [sp, #12]
    429e:	2b00      	cmp	r3, #0
    42a0:	dc00      	bgt.n	42a4 <_dtoa_r+0x280>
    42a2:	e085      	b.n	43b0 <_dtoa_r+0x38c>
    42a4:	001a      	movs	r2, r3
    42a6:	210f      	movs	r1, #15
    42a8:	4b3c      	ldr	r3, [pc, #240]	; (439c <_dtoa_r+0x378>)
    42aa:	400a      	ands	r2, r1
    42ac:	00d2      	lsls	r2, r2, #3
    42ae:	189b      	adds	r3, r3, r2
    42b0:	685c      	ldr	r4, [r3, #4]
    42b2:	681b      	ldr	r3, [r3, #0]
    42b4:	9310      	str	r3, [sp, #64]	; 0x40
    42b6:	9411      	str	r4, [sp, #68]	; 0x44
    42b8:	9b03      	ldr	r3, [sp, #12]
    42ba:	2402      	movs	r4, #2
    42bc:	111d      	asrs	r5, r3, #4
    42be:	06eb      	lsls	r3, r5, #27
    42c0:	d50a      	bpl.n	42d8 <_dtoa_r+0x2b4>
    42c2:	4b3a      	ldr	r3, [pc, #232]	; (43ac <_dtoa_r+0x388>)
    42c4:	400d      	ands	r5, r1
    42c6:	6a1a      	ldr	r2, [r3, #32]
    42c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    42ca:	9814      	ldr	r0, [sp, #80]	; 0x50
    42cc:	9915      	ldr	r1, [sp, #84]	; 0x54
    42ce:	f002 ff63 	bl	7198 <__aeabi_ddiv>
    42d2:	9006      	str	r0, [sp, #24]
    42d4:	9107      	str	r1, [sp, #28]
    42d6:	3401      	adds	r4, #1
    42d8:	4e34      	ldr	r6, [pc, #208]	; (43ac <_dtoa_r+0x388>)
    42da:	2d00      	cmp	r5, #0
    42dc:	d130      	bne.n	4340 <_dtoa_r+0x31c>
    42de:	9a10      	ldr	r2, [sp, #64]	; 0x40
    42e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    42e2:	9806      	ldr	r0, [sp, #24]
    42e4:	9907      	ldr	r1, [sp, #28]
    42e6:	f002 ff57 	bl	7198 <__aeabi_ddiv>
    42ea:	9006      	str	r0, [sp, #24]
    42ec:	9107      	str	r1, [sp, #28]
    42ee:	e07a      	b.n	43e6 <_dtoa_r+0x3c2>
    42f0:	2301      	movs	r3, #1
    42f2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    42f4:	930e      	str	r3, [sp, #56]	; 0x38
    42f6:	4694      	mov	ip, r2
    42f8:	9b03      	ldr	r3, [sp, #12]
    42fa:	4463      	add	r3, ip
    42fc:	1c5f      	adds	r7, r3, #1
    42fe:	930d      	str	r3, [sp, #52]	; 0x34
    4300:	1e3b      	subs	r3, r7, #0
    4302:	dcaf      	bgt.n	4264 <_dtoa_r+0x240>
    4304:	2301      	movs	r3, #1
    4306:	e7ad      	b.n	4264 <_dtoa_r+0x240>
    4308:	2300      	movs	r3, #0
    430a:	e7a5      	b.n	4258 <_dtoa_r+0x234>
    430c:	2300      	movs	r3, #0
    430e:	e7f0      	b.n	42f2 <_dtoa_r+0x2ce>
    4310:	2300      	movs	r3, #0
    4312:	950e      	str	r5, [sp, #56]	; 0x38
    4314:	9322      	str	r3, [sp, #136]	; 0x88
    4316:	3b01      	subs	r3, #1
    4318:	2200      	movs	r2, #0
    431a:	930d      	str	r3, [sp, #52]	; 0x34
    431c:	001f      	movs	r7, r3
    431e:	3313      	adds	r3, #19
    4320:	9223      	str	r2, [sp, #140]	; 0x8c
    4322:	e79f      	b.n	4264 <_dtoa_r+0x240>
    4324:	2301      	movs	r3, #1
    4326:	930e      	str	r3, [sp, #56]	; 0x38
    4328:	3b02      	subs	r3, #2
    432a:	e7f5      	b.n	4318 <_dtoa_r+0x2f4>
    432c:	2301      	movs	r3, #1
    432e:	930d      	str	r3, [sp, #52]	; 0x34
    4330:	001f      	movs	r7, r3
    4332:	001a      	movs	r2, r3
    4334:	e7f4      	b.n	4320 <_dtoa_r+0x2fc>
    4336:	6861      	ldr	r1, [r4, #4]
    4338:	0052      	lsls	r2, r2, #1
    433a:	3101      	adds	r1, #1
    433c:	6061      	str	r1, [r4, #4]
    433e:	e796      	b.n	426e <_dtoa_r+0x24a>
    4340:	2301      	movs	r3, #1
    4342:	421d      	tst	r5, r3
    4344:	d008      	beq.n	4358 <_dtoa_r+0x334>
    4346:	9810      	ldr	r0, [sp, #64]	; 0x40
    4348:	9911      	ldr	r1, [sp, #68]	; 0x44
    434a:	18e4      	adds	r4, r4, r3
    434c:	6832      	ldr	r2, [r6, #0]
    434e:	6873      	ldr	r3, [r6, #4]
    4350:	f003 fb56 	bl	7a00 <__aeabi_dmul>
    4354:	9010      	str	r0, [sp, #64]	; 0x40
    4356:	9111      	str	r1, [sp, #68]	; 0x44
    4358:	106d      	asrs	r5, r5, #1
    435a:	3608      	adds	r6, #8
    435c:	e7bd      	b.n	42da <_dtoa_r+0x2b6>
    435e:	46c0      	nop			; (mov r8, r8)
    4360:	7ff00000 	.word	0x7ff00000
    4364:	0000270f 	.word	0x0000270f
    4368:	000089e1 	.word	0x000089e1
    436c:	000089e4 	.word	0x000089e4
    4370:	000089b4 	.word	0x000089b4
    4374:	000089b5 	.word	0x000089b5
    4378:	3ff00000 	.word	0x3ff00000
    437c:	fffffc01 	.word	0xfffffc01
    4380:	3ff80000 	.word	0x3ff80000
    4384:	636f4361 	.word	0x636f4361
    4388:	3fd287a7 	.word	0x3fd287a7
    438c:	8b60c8b3 	.word	0x8b60c8b3
    4390:	3fc68a28 	.word	0x3fc68a28
    4394:	509f79fb 	.word	0x509f79fb
    4398:	3fd34413 	.word	0x3fd34413
    439c:	00008a70 	.word	0x00008a70
    43a0:	00000432 	.word	0x00000432
    43a4:	00000412 	.word	0x00000412
    43a8:	fe100000 	.word	0xfe100000
    43ac:	00008a48 	.word	0x00008a48
    43b0:	9b03      	ldr	r3, [sp, #12]
    43b2:	2402      	movs	r4, #2
    43b4:	2b00      	cmp	r3, #0
    43b6:	d016      	beq.n	43e6 <_dtoa_r+0x3c2>
    43b8:	9814      	ldr	r0, [sp, #80]	; 0x50
    43ba:	9915      	ldr	r1, [sp, #84]	; 0x54
    43bc:	425d      	negs	r5, r3
    43be:	230f      	movs	r3, #15
    43c0:	4aca      	ldr	r2, [pc, #808]	; (46ec <_dtoa_r+0x6c8>)
    43c2:	402b      	ands	r3, r5
    43c4:	00db      	lsls	r3, r3, #3
    43c6:	18d3      	adds	r3, r2, r3
    43c8:	681a      	ldr	r2, [r3, #0]
    43ca:	685b      	ldr	r3, [r3, #4]
    43cc:	f003 fb18 	bl	7a00 <__aeabi_dmul>
    43d0:	2300      	movs	r3, #0
    43d2:	9006      	str	r0, [sp, #24]
    43d4:	9107      	str	r1, [sp, #28]
    43d6:	4ec6      	ldr	r6, [pc, #792]	; (46f0 <_dtoa_r+0x6cc>)
    43d8:	112d      	asrs	r5, r5, #4
    43da:	2d00      	cmp	r5, #0
    43dc:	d000      	beq.n	43e0 <_dtoa_r+0x3bc>
    43de:	e08c      	b.n	44fa <_dtoa_r+0x4d6>
    43e0:	2b00      	cmp	r3, #0
    43e2:	d000      	beq.n	43e6 <_dtoa_r+0x3c2>
    43e4:	e781      	b.n	42ea <_dtoa_r+0x2c6>
    43e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    43e8:	2b00      	cmp	r3, #0
    43ea:	d100      	bne.n	43ee <_dtoa_r+0x3ca>
    43ec:	e091      	b.n	4512 <_dtoa_r+0x4ee>
    43ee:	9a06      	ldr	r2, [sp, #24]
    43f0:	9b07      	ldr	r3, [sp, #28]
    43f2:	9210      	str	r2, [sp, #64]	; 0x40
    43f4:	9311      	str	r3, [sp, #68]	; 0x44
    43f6:	9810      	ldr	r0, [sp, #64]	; 0x40
    43f8:	9911      	ldr	r1, [sp, #68]	; 0x44
    43fa:	2200      	movs	r2, #0
    43fc:	4bbd      	ldr	r3, [pc, #756]	; (46f4 <_dtoa_r+0x6d0>)
    43fe:	f001 fe3d 	bl	607c <__aeabi_dcmplt>
    4402:	2800      	cmp	r0, #0
    4404:	d100      	bne.n	4408 <_dtoa_r+0x3e4>
    4406:	e084      	b.n	4512 <_dtoa_r+0x4ee>
    4408:	2f00      	cmp	r7, #0
    440a:	d100      	bne.n	440e <_dtoa_r+0x3ea>
    440c:	e081      	b.n	4512 <_dtoa_r+0x4ee>
    440e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4410:	2b00      	cmp	r3, #0
    4412:	dd3e      	ble.n	4492 <_dtoa_r+0x46e>
    4414:	9810      	ldr	r0, [sp, #64]	; 0x40
    4416:	9911      	ldr	r1, [sp, #68]	; 0x44
    4418:	9b03      	ldr	r3, [sp, #12]
    441a:	2200      	movs	r2, #0
    441c:	1e5e      	subs	r6, r3, #1
    441e:	4bb6      	ldr	r3, [pc, #728]	; (46f8 <_dtoa_r+0x6d4>)
    4420:	f003 faee 	bl	7a00 <__aeabi_dmul>
    4424:	9006      	str	r0, [sp, #24]
    4426:	9107      	str	r1, [sp, #28]
    4428:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    442a:	3401      	adds	r4, #1
    442c:	0020      	movs	r0, r4
    442e:	f004 f8d1 	bl	85d4 <__aeabi_i2d>
    4432:	9a06      	ldr	r2, [sp, #24]
    4434:	9b07      	ldr	r3, [sp, #28]
    4436:	f003 fae3 	bl	7a00 <__aeabi_dmul>
    443a:	2200      	movs	r2, #0
    443c:	4baf      	ldr	r3, [pc, #700]	; (46fc <_dtoa_r+0x6d8>)
    443e:	f002 fb9b 	bl	6b78 <__aeabi_dadd>
    4442:	9012      	str	r0, [sp, #72]	; 0x48
    4444:	9113      	str	r1, [sp, #76]	; 0x4c
    4446:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4448:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    444a:	4aad      	ldr	r2, [pc, #692]	; (4700 <_dtoa_r+0x6dc>)
    444c:	9310      	str	r3, [sp, #64]	; 0x40
    444e:	9411      	str	r4, [sp, #68]	; 0x44
    4450:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4452:	189c      	adds	r4, r3, r2
    4454:	9411      	str	r4, [sp, #68]	; 0x44
    4456:	2d00      	cmp	r5, #0
    4458:	d15e      	bne.n	4518 <_dtoa_r+0x4f4>
    445a:	9806      	ldr	r0, [sp, #24]
    445c:	9907      	ldr	r1, [sp, #28]
    445e:	2200      	movs	r2, #0
    4460:	4ba8      	ldr	r3, [pc, #672]	; (4704 <_dtoa_r+0x6e0>)
    4462:	f003 fd4d 	bl	7f00 <__aeabi_dsub>
    4466:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4468:	0023      	movs	r3, r4
    446a:	9006      	str	r0, [sp, #24]
    446c:	9107      	str	r1, [sp, #28]
    446e:	f001 fe19 	bl	60a4 <__aeabi_dcmpgt>
    4472:	2800      	cmp	r0, #0
    4474:	d000      	beq.n	4478 <_dtoa_r+0x454>
    4476:	e301      	b.n	4a7c <_dtoa_r+0xa58>
    4478:	48a3      	ldr	r0, [pc, #652]	; (4708 <_dtoa_r+0x6e4>)
    447a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    447c:	4684      	mov	ip, r0
    447e:	4461      	add	r1, ip
    4480:	000b      	movs	r3, r1
    4482:	9806      	ldr	r0, [sp, #24]
    4484:	9907      	ldr	r1, [sp, #28]
    4486:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4488:	f001 fdf8 	bl	607c <__aeabi_dcmplt>
    448c:	2800      	cmp	r0, #0
    448e:	d000      	beq.n	4492 <_dtoa_r+0x46e>
    4490:	e2e8      	b.n	4a64 <_dtoa_r+0xa40>
    4492:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4494:	9c15      	ldr	r4, [sp, #84]	; 0x54
    4496:	9306      	str	r3, [sp, #24]
    4498:	9407      	str	r4, [sp, #28]
    449a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    449c:	2b00      	cmp	r3, #0
    449e:	da00      	bge.n	44a2 <_dtoa_r+0x47e>
    44a0:	e157      	b.n	4752 <_dtoa_r+0x72e>
    44a2:	9a03      	ldr	r2, [sp, #12]
    44a4:	2a0e      	cmp	r2, #14
    44a6:	dd00      	ble.n	44aa <_dtoa_r+0x486>
    44a8:	e153      	b.n	4752 <_dtoa_r+0x72e>
    44aa:	4b90      	ldr	r3, [pc, #576]	; (46ec <_dtoa_r+0x6c8>)
    44ac:	00d2      	lsls	r2, r2, #3
    44ae:	189b      	adds	r3, r3, r2
    44b0:	685c      	ldr	r4, [r3, #4]
    44b2:	681b      	ldr	r3, [r3, #0]
    44b4:	9308      	str	r3, [sp, #32]
    44b6:	9409      	str	r4, [sp, #36]	; 0x24
    44b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    44ba:	2b00      	cmp	r3, #0
    44bc:	db00      	blt.n	44c0 <_dtoa_r+0x49c>
    44be:	e0ce      	b.n	465e <_dtoa_r+0x63a>
    44c0:	2f00      	cmp	r7, #0
    44c2:	dd00      	ble.n	44c6 <_dtoa_r+0x4a2>
    44c4:	e0cb      	b.n	465e <_dtoa_r+0x63a>
    44c6:	d000      	beq.n	44ca <_dtoa_r+0x4a6>
    44c8:	e2cf      	b.n	4a6a <_dtoa_r+0xa46>
    44ca:	9808      	ldr	r0, [sp, #32]
    44cc:	9909      	ldr	r1, [sp, #36]	; 0x24
    44ce:	2200      	movs	r2, #0
    44d0:	4b8c      	ldr	r3, [pc, #560]	; (4704 <_dtoa_r+0x6e0>)
    44d2:	f003 fa95 	bl	7a00 <__aeabi_dmul>
    44d6:	9a06      	ldr	r2, [sp, #24]
    44d8:	9b07      	ldr	r3, [sp, #28]
    44da:	f001 fded 	bl	60b8 <__aeabi_dcmpge>
    44de:	003e      	movs	r6, r7
    44e0:	9708      	str	r7, [sp, #32]
    44e2:	2800      	cmp	r0, #0
    44e4:	d000      	beq.n	44e8 <_dtoa_r+0x4c4>
    44e6:	e2a4      	b.n	4a32 <_dtoa_r+0xa0e>
    44e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    44ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    44ec:	1c5d      	adds	r5, r3, #1
    44ee:	2331      	movs	r3, #49	; 0x31
    44f0:	7013      	strb	r3, [r2, #0]
    44f2:	9b03      	ldr	r3, [sp, #12]
    44f4:	3301      	adds	r3, #1
    44f6:	9303      	str	r3, [sp, #12]
    44f8:	e29f      	b.n	4a3a <_dtoa_r+0xa16>
    44fa:	2201      	movs	r2, #1
    44fc:	4215      	tst	r5, r2
    44fe:	d005      	beq.n	450c <_dtoa_r+0x4e8>
    4500:	18a4      	adds	r4, r4, r2
    4502:	6832      	ldr	r2, [r6, #0]
    4504:	6873      	ldr	r3, [r6, #4]
    4506:	f003 fa7b 	bl	7a00 <__aeabi_dmul>
    450a:	2301      	movs	r3, #1
    450c:	106d      	asrs	r5, r5, #1
    450e:	3608      	adds	r6, #8
    4510:	e763      	b.n	43da <_dtoa_r+0x3b6>
    4512:	9e03      	ldr	r6, [sp, #12]
    4514:	003d      	movs	r5, r7
    4516:	e789      	b.n	442c <_dtoa_r+0x408>
    4518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    451a:	1e69      	subs	r1, r5, #1
    451c:	1952      	adds	r2, r2, r5
    451e:	9217      	str	r2, [sp, #92]	; 0x5c
    4520:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4522:	4b72      	ldr	r3, [pc, #456]	; (46ec <_dtoa_r+0x6c8>)
    4524:	00c9      	lsls	r1, r1, #3
    4526:	2a00      	cmp	r2, #0
    4528:	d04a      	beq.n	45c0 <_dtoa_r+0x59c>
    452a:	185b      	adds	r3, r3, r1
    452c:	681a      	ldr	r2, [r3, #0]
    452e:	685b      	ldr	r3, [r3, #4]
    4530:	2000      	movs	r0, #0
    4532:	4976      	ldr	r1, [pc, #472]	; (470c <_dtoa_r+0x6e8>)
    4534:	f002 fe30 	bl	7198 <__aeabi_ddiv>
    4538:	9a10      	ldr	r2, [sp, #64]	; 0x40
    453a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    453c:	f003 fce0 	bl	7f00 <__aeabi_dsub>
    4540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4542:	9010      	str	r0, [sp, #64]	; 0x40
    4544:	9111      	str	r1, [sp, #68]	; 0x44
    4546:	9312      	str	r3, [sp, #72]	; 0x48
    4548:	9806      	ldr	r0, [sp, #24]
    454a:	9907      	ldr	r1, [sp, #28]
    454c:	f004 f80e 	bl	856c <__aeabi_d2iz>
    4550:	0004      	movs	r4, r0
    4552:	f004 f83f 	bl	85d4 <__aeabi_i2d>
    4556:	0002      	movs	r2, r0
    4558:	000b      	movs	r3, r1
    455a:	9806      	ldr	r0, [sp, #24]
    455c:	9907      	ldr	r1, [sp, #28]
    455e:	f003 fccf 	bl	7f00 <__aeabi_dsub>
    4562:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4564:	3430      	adds	r4, #48	; 0x30
    4566:	1c5d      	adds	r5, r3, #1
    4568:	701c      	strb	r4, [r3, #0]
    456a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    456c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    456e:	9006      	str	r0, [sp, #24]
    4570:	9107      	str	r1, [sp, #28]
    4572:	f001 fd83 	bl	607c <__aeabi_dcmplt>
    4576:	2800      	cmp	r0, #0
    4578:	d165      	bne.n	4646 <_dtoa_r+0x622>
    457a:	9a06      	ldr	r2, [sp, #24]
    457c:	9b07      	ldr	r3, [sp, #28]
    457e:	2000      	movs	r0, #0
    4580:	495c      	ldr	r1, [pc, #368]	; (46f4 <_dtoa_r+0x6d0>)
    4582:	f003 fcbd 	bl	7f00 <__aeabi_dsub>
    4586:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4588:	9b11      	ldr	r3, [sp, #68]	; 0x44
    458a:	f001 fd77 	bl	607c <__aeabi_dcmplt>
    458e:	2800      	cmp	r0, #0
    4590:	d000      	beq.n	4594 <_dtoa_r+0x570>
    4592:	e0be      	b.n	4712 <_dtoa_r+0x6ee>
    4594:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    4596:	429d      	cmp	r5, r3
    4598:	d100      	bne.n	459c <_dtoa_r+0x578>
    459a:	e77a      	b.n	4492 <_dtoa_r+0x46e>
    459c:	9810      	ldr	r0, [sp, #64]	; 0x40
    459e:	9911      	ldr	r1, [sp, #68]	; 0x44
    45a0:	2200      	movs	r2, #0
    45a2:	4b55      	ldr	r3, [pc, #340]	; (46f8 <_dtoa_r+0x6d4>)
    45a4:	f003 fa2c 	bl	7a00 <__aeabi_dmul>
    45a8:	2200      	movs	r2, #0
    45aa:	9010      	str	r0, [sp, #64]	; 0x40
    45ac:	9111      	str	r1, [sp, #68]	; 0x44
    45ae:	9806      	ldr	r0, [sp, #24]
    45b0:	9907      	ldr	r1, [sp, #28]
    45b2:	4b51      	ldr	r3, [pc, #324]	; (46f8 <_dtoa_r+0x6d4>)
    45b4:	f003 fa24 	bl	7a00 <__aeabi_dmul>
    45b8:	9512      	str	r5, [sp, #72]	; 0x48
    45ba:	9006      	str	r0, [sp, #24]
    45bc:	9107      	str	r1, [sp, #28]
    45be:	e7c3      	b.n	4548 <_dtoa_r+0x524>
    45c0:	1859      	adds	r1, r3, r1
    45c2:	6808      	ldr	r0, [r1, #0]
    45c4:	6849      	ldr	r1, [r1, #4]
    45c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    45c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    45ca:	f003 fa19 	bl	7a00 <__aeabi_dmul>
    45ce:	9010      	str	r0, [sp, #64]	; 0x40
    45d0:	9111      	str	r1, [sp, #68]	; 0x44
    45d2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    45d4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    45d6:	9806      	ldr	r0, [sp, #24]
    45d8:	9907      	ldr	r1, [sp, #28]
    45da:	f003 ffc7 	bl	856c <__aeabi_d2iz>
    45de:	9012      	str	r0, [sp, #72]	; 0x48
    45e0:	f003 fff8 	bl	85d4 <__aeabi_i2d>
    45e4:	0002      	movs	r2, r0
    45e6:	000b      	movs	r3, r1
    45e8:	9806      	ldr	r0, [sp, #24]
    45ea:	9907      	ldr	r1, [sp, #28]
    45ec:	f003 fc88 	bl	7f00 <__aeabi_dsub>
    45f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    45f2:	9006      	str	r0, [sp, #24]
    45f4:	9107      	str	r1, [sp, #28]
    45f6:	3330      	adds	r3, #48	; 0x30
    45f8:	7023      	strb	r3, [r4, #0]
    45fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    45fc:	3401      	adds	r4, #1
    45fe:	2200      	movs	r2, #0
    4600:	42a3      	cmp	r3, r4
    4602:	d124      	bne.n	464e <_dtoa_r+0x62a>
    4604:	4b41      	ldr	r3, [pc, #260]	; (470c <_dtoa_r+0x6e8>)
    4606:	9810      	ldr	r0, [sp, #64]	; 0x40
    4608:	9911      	ldr	r1, [sp, #68]	; 0x44
    460a:	f002 fab5 	bl	6b78 <__aeabi_dadd>
    460e:	0002      	movs	r2, r0
    4610:	000b      	movs	r3, r1
    4612:	9806      	ldr	r0, [sp, #24]
    4614:	9907      	ldr	r1, [sp, #28]
    4616:	f001 fd45 	bl	60a4 <__aeabi_dcmpgt>
    461a:	2800      	cmp	r0, #0
    461c:	d000      	beq.n	4620 <_dtoa_r+0x5fc>
    461e:	e078      	b.n	4712 <_dtoa_r+0x6ee>
    4620:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4622:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4624:	2000      	movs	r0, #0
    4626:	4939      	ldr	r1, [pc, #228]	; (470c <_dtoa_r+0x6e8>)
    4628:	f003 fc6a 	bl	7f00 <__aeabi_dsub>
    462c:	0002      	movs	r2, r0
    462e:	000b      	movs	r3, r1
    4630:	9806      	ldr	r0, [sp, #24]
    4632:	9907      	ldr	r1, [sp, #28]
    4634:	f001 fd22 	bl	607c <__aeabi_dcmplt>
    4638:	2800      	cmp	r0, #0
    463a:	d100      	bne.n	463e <_dtoa_r+0x61a>
    463c:	e729      	b.n	4492 <_dtoa_r+0x46e>
    463e:	1e6b      	subs	r3, r5, #1
    4640:	781a      	ldrb	r2, [r3, #0]
    4642:	2a30      	cmp	r2, #48	; 0x30
    4644:	d001      	beq.n	464a <_dtoa_r+0x626>
    4646:	9603      	str	r6, [sp, #12]
    4648:	e03f      	b.n	46ca <_dtoa_r+0x6a6>
    464a:	001d      	movs	r5, r3
    464c:	e7f7      	b.n	463e <_dtoa_r+0x61a>
    464e:	9806      	ldr	r0, [sp, #24]
    4650:	9907      	ldr	r1, [sp, #28]
    4652:	4b29      	ldr	r3, [pc, #164]	; (46f8 <_dtoa_r+0x6d4>)
    4654:	f003 f9d4 	bl	7a00 <__aeabi_dmul>
    4658:	9006      	str	r0, [sp, #24]
    465a:	9107      	str	r1, [sp, #28]
    465c:	e7bb      	b.n	45d6 <_dtoa_r+0x5b2>
    465e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    4660:	9a08      	ldr	r2, [sp, #32]
    4662:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4664:	9806      	ldr	r0, [sp, #24]
    4666:	9907      	ldr	r1, [sp, #28]
    4668:	f002 fd96 	bl	7198 <__aeabi_ddiv>
    466c:	f003 ff7e 	bl	856c <__aeabi_d2iz>
    4670:	0004      	movs	r4, r0
    4672:	f003 ffaf 	bl	85d4 <__aeabi_i2d>
    4676:	9a08      	ldr	r2, [sp, #32]
    4678:	9b09      	ldr	r3, [sp, #36]	; 0x24
    467a:	f003 f9c1 	bl	7a00 <__aeabi_dmul>
    467e:	000b      	movs	r3, r1
    4680:	0002      	movs	r2, r0
    4682:	9806      	ldr	r0, [sp, #24]
    4684:	9907      	ldr	r1, [sp, #28]
    4686:	f003 fc3b 	bl	7f00 <__aeabi_dsub>
    468a:	0023      	movs	r3, r4
    468c:	3330      	adds	r3, #48	; 0x30
    468e:	7033      	strb	r3, [r6, #0]
    4690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4692:	1c75      	adds	r5, r6, #1
    4694:	1aeb      	subs	r3, r5, r3
    4696:	429f      	cmp	r7, r3
    4698:	d14c      	bne.n	4734 <_dtoa_r+0x710>
    469a:	0002      	movs	r2, r0
    469c:	000b      	movs	r3, r1
    469e:	f002 fa6b 	bl	6b78 <__aeabi_dadd>
    46a2:	0006      	movs	r6, r0
    46a4:	000f      	movs	r7, r1
    46a6:	0002      	movs	r2, r0
    46a8:	000b      	movs	r3, r1
    46aa:	9808      	ldr	r0, [sp, #32]
    46ac:	9909      	ldr	r1, [sp, #36]	; 0x24
    46ae:	f001 fce5 	bl	607c <__aeabi_dcmplt>
    46b2:	2800      	cmp	r0, #0
    46b4:	d12c      	bne.n	4710 <_dtoa_r+0x6ec>
    46b6:	9808      	ldr	r0, [sp, #32]
    46b8:	9909      	ldr	r1, [sp, #36]	; 0x24
    46ba:	0032      	movs	r2, r6
    46bc:	003b      	movs	r3, r7
    46be:	f001 fcd7 	bl	6070 <__aeabi_dcmpeq>
    46c2:	2800      	cmp	r0, #0
    46c4:	d001      	beq.n	46ca <_dtoa_r+0x6a6>
    46c6:	07e3      	lsls	r3, r4, #31
    46c8:	d422      	bmi.n	4710 <_dtoa_r+0x6ec>
    46ca:	9905      	ldr	r1, [sp, #20]
    46cc:	9804      	ldr	r0, [sp, #16]
    46ce:	f000 fcde 	bl	508e <_Bfree>
    46d2:	2300      	movs	r3, #0
    46d4:	702b      	strb	r3, [r5, #0]
    46d6:	9b03      	ldr	r3, [sp, #12]
    46d8:	9a24      	ldr	r2, [sp, #144]	; 0x90
    46da:	3301      	adds	r3, #1
    46dc:	6013      	str	r3, [r2, #0]
    46de:	9b26      	ldr	r3, [sp, #152]	; 0x98
    46e0:	2b00      	cmp	r3, #0
    46e2:	d100      	bne.n	46e6 <_dtoa_r+0x6c2>
    46e4:	e275      	b.n	4bd2 <_dtoa_r+0xbae>
    46e6:	601d      	str	r5, [r3, #0]
    46e8:	e273      	b.n	4bd2 <_dtoa_r+0xbae>
    46ea:	46c0      	nop			; (mov r8, r8)
    46ec:	00008a70 	.word	0x00008a70
    46f0:	00008a48 	.word	0x00008a48
    46f4:	3ff00000 	.word	0x3ff00000
    46f8:	40240000 	.word	0x40240000
    46fc:	401c0000 	.word	0x401c0000
    4700:	fcc00000 	.word	0xfcc00000
    4704:	40140000 	.word	0x40140000
    4708:	7cc00000 	.word	0x7cc00000
    470c:	3fe00000 	.word	0x3fe00000
    4710:	9e03      	ldr	r6, [sp, #12]
    4712:	1e6b      	subs	r3, r5, #1
    4714:	781a      	ldrb	r2, [r3, #0]
    4716:	2a39      	cmp	r2, #57	; 0x39
    4718:	d106      	bne.n	4728 <_dtoa_r+0x704>
    471a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    471c:	429a      	cmp	r2, r3
    471e:	d107      	bne.n	4730 <_dtoa_r+0x70c>
    4720:	2330      	movs	r3, #48	; 0x30
    4722:	7013      	strb	r3, [r2, #0]
    4724:	0013      	movs	r3, r2
    4726:	3601      	adds	r6, #1
    4728:	781a      	ldrb	r2, [r3, #0]
    472a:	3201      	adds	r2, #1
    472c:	701a      	strb	r2, [r3, #0]
    472e:	e78a      	b.n	4646 <_dtoa_r+0x622>
    4730:	001d      	movs	r5, r3
    4732:	e7ee      	b.n	4712 <_dtoa_r+0x6ee>
    4734:	2200      	movs	r2, #0
    4736:	4bcf      	ldr	r3, [pc, #828]	; (4a74 <_dtoa_r+0xa50>)
    4738:	f003 f962 	bl	7a00 <__aeabi_dmul>
    473c:	2200      	movs	r2, #0
    473e:	2300      	movs	r3, #0
    4740:	9006      	str	r0, [sp, #24]
    4742:	9107      	str	r1, [sp, #28]
    4744:	002e      	movs	r6, r5
    4746:	f001 fc93 	bl	6070 <__aeabi_dcmpeq>
    474a:	2800      	cmp	r0, #0
    474c:	d100      	bne.n	4750 <_dtoa_r+0x72c>
    474e:	e787      	b.n	4660 <_dtoa_r+0x63c>
    4750:	e7bb      	b.n	46ca <_dtoa_r+0x6a6>
    4752:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4754:	2a00      	cmp	r2, #0
    4756:	d100      	bne.n	475a <_dtoa_r+0x736>
    4758:	e087      	b.n	486a <_dtoa_r+0x846>
    475a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    475c:	2a01      	cmp	r2, #1
    475e:	dc6e      	bgt.n	483e <_dtoa_r+0x81a>
    4760:	9a18      	ldr	r2, [sp, #96]	; 0x60
    4762:	2a00      	cmp	r2, #0
    4764:	d067      	beq.n	4836 <_dtoa_r+0x812>
    4766:	4ac4      	ldr	r2, [pc, #784]	; (4a78 <_dtoa_r+0xa54>)
    4768:	189b      	adds	r3, r3, r2
    476a:	9d08      	ldr	r5, [sp, #32]
    476c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    476e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4770:	2101      	movs	r1, #1
    4772:	18d2      	adds	r2, r2, r3
    4774:	920b      	str	r2, [sp, #44]	; 0x2c
    4776:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4778:	9804      	ldr	r0, [sp, #16]
    477a:	18d3      	adds	r3, r2, r3
    477c:	930c      	str	r3, [sp, #48]	; 0x30
    477e:	f000 fd24 	bl	51ca <__i2b>
    4782:	0006      	movs	r6, r0
    4784:	2c00      	cmp	r4, #0
    4786:	dd0e      	ble.n	47a6 <_dtoa_r+0x782>
    4788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    478a:	2b00      	cmp	r3, #0
    478c:	dd0b      	ble.n	47a6 <_dtoa_r+0x782>
    478e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4790:	0023      	movs	r3, r4
    4792:	4294      	cmp	r4, r2
    4794:	dd00      	ble.n	4798 <_dtoa_r+0x774>
    4796:	0013      	movs	r3, r2
    4798:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    479a:	1ae4      	subs	r4, r4, r3
    479c:	1ad2      	subs	r2, r2, r3
    479e:	920b      	str	r2, [sp, #44]	; 0x2c
    47a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    47a2:	1ad3      	subs	r3, r2, r3
    47a4:	930c      	str	r3, [sp, #48]	; 0x30
    47a6:	9b08      	ldr	r3, [sp, #32]
    47a8:	2b00      	cmp	r3, #0
    47aa:	d01e      	beq.n	47ea <_dtoa_r+0x7c6>
    47ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    47ae:	2b00      	cmp	r3, #0
    47b0:	d05f      	beq.n	4872 <_dtoa_r+0x84e>
    47b2:	2d00      	cmp	r5, #0
    47b4:	dd11      	ble.n	47da <_dtoa_r+0x7b6>
    47b6:	0031      	movs	r1, r6
    47b8:	002a      	movs	r2, r5
    47ba:	9804      	ldr	r0, [sp, #16]
    47bc:	f000 fd9e 	bl	52fc <__pow5mult>
    47c0:	9a05      	ldr	r2, [sp, #20]
    47c2:	0001      	movs	r1, r0
    47c4:	0006      	movs	r6, r0
    47c6:	9804      	ldr	r0, [sp, #16]
    47c8:	f000 fd08 	bl	51dc <__multiply>
    47cc:	9905      	ldr	r1, [sp, #20]
    47ce:	9010      	str	r0, [sp, #64]	; 0x40
    47d0:	9804      	ldr	r0, [sp, #16]
    47d2:	f000 fc5c 	bl	508e <_Bfree>
    47d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    47d8:	9305      	str	r3, [sp, #20]
    47da:	9b08      	ldr	r3, [sp, #32]
    47dc:	1b5a      	subs	r2, r3, r5
    47de:	d004      	beq.n	47ea <_dtoa_r+0x7c6>
    47e0:	9905      	ldr	r1, [sp, #20]
    47e2:	9804      	ldr	r0, [sp, #16]
    47e4:	f000 fd8a 	bl	52fc <__pow5mult>
    47e8:	9005      	str	r0, [sp, #20]
    47ea:	2101      	movs	r1, #1
    47ec:	9804      	ldr	r0, [sp, #16]
    47ee:	f000 fcec 	bl	51ca <__i2b>
    47f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    47f4:	9008      	str	r0, [sp, #32]
    47f6:	2b00      	cmp	r3, #0
    47f8:	dd3d      	ble.n	4876 <_dtoa_r+0x852>
    47fa:	001a      	movs	r2, r3
    47fc:	0001      	movs	r1, r0
    47fe:	9804      	ldr	r0, [sp, #16]
    4800:	f000 fd7c 	bl	52fc <__pow5mult>
    4804:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4806:	9008      	str	r0, [sp, #32]
    4808:	2500      	movs	r5, #0
    480a:	2b01      	cmp	r3, #1
    480c:	dc3b      	bgt.n	4886 <_dtoa_r+0x862>
    480e:	2500      	movs	r5, #0
    4810:	9b06      	ldr	r3, [sp, #24]
    4812:	42ab      	cmp	r3, r5
    4814:	d133      	bne.n	487e <_dtoa_r+0x85a>
    4816:	9b07      	ldr	r3, [sp, #28]
    4818:	031b      	lsls	r3, r3, #12
    481a:	42ab      	cmp	r3, r5
    481c:	d12f      	bne.n	487e <_dtoa_r+0x85a>
    481e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4820:	9a07      	ldr	r2, [sp, #28]
    4822:	4213      	tst	r3, r2
    4824:	d02b      	beq.n	487e <_dtoa_r+0x85a>
    4826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4828:	3501      	adds	r5, #1
    482a:	3301      	adds	r3, #1
    482c:	930b      	str	r3, [sp, #44]	; 0x2c
    482e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4830:	3301      	adds	r3, #1
    4832:	930c      	str	r3, [sp, #48]	; 0x30
    4834:	e023      	b.n	487e <_dtoa_r+0x85a>
    4836:	2336      	movs	r3, #54	; 0x36
    4838:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    483a:	1a9b      	subs	r3, r3, r2
    483c:	e795      	b.n	476a <_dtoa_r+0x746>
    483e:	9b08      	ldr	r3, [sp, #32]
    4840:	1e7d      	subs	r5, r7, #1
    4842:	42ab      	cmp	r3, r5
    4844:	db06      	blt.n	4854 <_dtoa_r+0x830>
    4846:	1b5d      	subs	r5, r3, r5
    4848:	2f00      	cmp	r7, #0
    484a:	da0b      	bge.n	4864 <_dtoa_r+0x840>
    484c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    484e:	1bdc      	subs	r4, r3, r7
    4850:	2300      	movs	r3, #0
    4852:	e78c      	b.n	476e <_dtoa_r+0x74a>
    4854:	9b08      	ldr	r3, [sp, #32]
    4856:	9508      	str	r5, [sp, #32]
    4858:	1aea      	subs	r2, r5, r3
    485a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    485c:	2500      	movs	r5, #0
    485e:	189b      	adds	r3, r3, r2
    4860:	930f      	str	r3, [sp, #60]	; 0x3c
    4862:	e7f1      	b.n	4848 <_dtoa_r+0x824>
    4864:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4866:	003b      	movs	r3, r7
    4868:	e781      	b.n	476e <_dtoa_r+0x74a>
    486a:	9d08      	ldr	r5, [sp, #32]
    486c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    486e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4870:	e788      	b.n	4784 <_dtoa_r+0x760>
    4872:	9a08      	ldr	r2, [sp, #32]
    4874:	e7b4      	b.n	47e0 <_dtoa_r+0x7bc>
    4876:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4878:	2500      	movs	r5, #0
    487a:	2b01      	cmp	r3, #1
    487c:	ddc7      	ble.n	480e <_dtoa_r+0x7ea>
    487e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4880:	2001      	movs	r0, #1
    4882:	2b00      	cmp	r3, #0
    4884:	d00b      	beq.n	489e <_dtoa_r+0x87a>
    4886:	9b08      	ldr	r3, [sp, #32]
    4888:	9a08      	ldr	r2, [sp, #32]
    488a:	691b      	ldr	r3, [r3, #16]
    488c:	930f      	str	r3, [sp, #60]	; 0x3c
    488e:	3303      	adds	r3, #3
    4890:	009b      	lsls	r3, r3, #2
    4892:	18d3      	adds	r3, r2, r3
    4894:	6858      	ldr	r0, [r3, #4]
    4896:	f000 fc4f 	bl	5138 <__hi0bits>
    489a:	2320      	movs	r3, #32
    489c:	1a18      	subs	r0, r3, r0
    489e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    48a0:	18c0      	adds	r0, r0, r3
    48a2:	231f      	movs	r3, #31
    48a4:	4018      	ands	r0, r3
    48a6:	d100      	bne.n	48aa <_dtoa_r+0x886>
    48a8:	e0ab      	b.n	4a02 <_dtoa_r+0x9de>
    48aa:	3301      	adds	r3, #1
    48ac:	1a1b      	subs	r3, r3, r0
    48ae:	2b04      	cmp	r3, #4
    48b0:	dc00      	bgt.n	48b4 <_dtoa_r+0x890>
    48b2:	e09b      	b.n	49ec <_dtoa_r+0x9c8>
    48b4:	231c      	movs	r3, #28
    48b6:	1a18      	subs	r0, r3, r0
    48b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    48ba:	1824      	adds	r4, r4, r0
    48bc:	181b      	adds	r3, r3, r0
    48be:	930b      	str	r3, [sp, #44]	; 0x2c
    48c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    48c2:	181b      	adds	r3, r3, r0
    48c4:	930c      	str	r3, [sp, #48]	; 0x30
    48c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    48c8:	2b00      	cmp	r3, #0
    48ca:	dd05      	ble.n	48d8 <_dtoa_r+0x8b4>
    48cc:	001a      	movs	r2, r3
    48ce:	9905      	ldr	r1, [sp, #20]
    48d0:	9804      	ldr	r0, [sp, #16]
    48d2:	f000 fd65 	bl	53a0 <__lshift>
    48d6:	9005      	str	r0, [sp, #20]
    48d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    48da:	2b00      	cmp	r3, #0
    48dc:	dd05      	ble.n	48ea <_dtoa_r+0x8c6>
    48de:	001a      	movs	r2, r3
    48e0:	9908      	ldr	r1, [sp, #32]
    48e2:	9804      	ldr	r0, [sp, #16]
    48e4:	f000 fd5c 	bl	53a0 <__lshift>
    48e8:	9008      	str	r0, [sp, #32]
    48ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
    48ec:	2b00      	cmp	r3, #0
    48ee:	d100      	bne.n	48f2 <_dtoa_r+0x8ce>
    48f0:	e089      	b.n	4a06 <_dtoa_r+0x9e2>
    48f2:	9908      	ldr	r1, [sp, #32]
    48f4:	9805      	ldr	r0, [sp, #20]
    48f6:	f000 fda4 	bl	5442 <__mcmp>
    48fa:	2800      	cmp	r0, #0
    48fc:	db00      	blt.n	4900 <_dtoa_r+0x8dc>
    48fe:	e082      	b.n	4a06 <_dtoa_r+0x9e2>
    4900:	9b03      	ldr	r3, [sp, #12]
    4902:	220a      	movs	r2, #10
    4904:	3b01      	subs	r3, #1
    4906:	9303      	str	r3, [sp, #12]
    4908:	9905      	ldr	r1, [sp, #20]
    490a:	2300      	movs	r3, #0
    490c:	9804      	ldr	r0, [sp, #16]
    490e:	f000 fbd7 	bl	50c0 <__multadd>
    4912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4914:	9005      	str	r0, [sp, #20]
    4916:	2b00      	cmp	r3, #0
    4918:	d100      	bne.n	491c <_dtoa_r+0x8f8>
    491a:	e15d      	b.n	4bd8 <_dtoa_r+0xbb4>
    491c:	2300      	movs	r3, #0
    491e:	0031      	movs	r1, r6
    4920:	220a      	movs	r2, #10
    4922:	9804      	ldr	r0, [sp, #16]
    4924:	f000 fbcc 	bl	50c0 <__multadd>
    4928:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    492a:	0006      	movs	r6, r0
    492c:	2b00      	cmp	r3, #0
    492e:	dc02      	bgt.n	4936 <_dtoa_r+0x912>
    4930:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4932:	2b02      	cmp	r3, #2
    4934:	dc6d      	bgt.n	4a12 <_dtoa_r+0x9ee>
    4936:	2c00      	cmp	r4, #0
    4938:	dd05      	ble.n	4946 <_dtoa_r+0x922>
    493a:	0031      	movs	r1, r6
    493c:	0022      	movs	r2, r4
    493e:	9804      	ldr	r0, [sp, #16]
    4940:	f000 fd2e 	bl	53a0 <__lshift>
    4944:	0006      	movs	r6, r0
    4946:	0030      	movs	r0, r6
    4948:	2d00      	cmp	r5, #0
    494a:	d011      	beq.n	4970 <_dtoa_r+0x94c>
    494c:	6871      	ldr	r1, [r6, #4]
    494e:	9804      	ldr	r0, [sp, #16]
    4950:	f000 fb65 	bl	501e <_Balloc>
    4954:	0031      	movs	r1, r6
    4956:	0004      	movs	r4, r0
    4958:	6933      	ldr	r3, [r6, #16]
    495a:	310c      	adds	r1, #12
    495c:	1c9a      	adds	r2, r3, #2
    495e:	0092      	lsls	r2, r2, #2
    4960:	300c      	adds	r0, #12
    4962:	f7fe fd81 	bl	3468 <memcpy>
    4966:	2201      	movs	r2, #1
    4968:	0021      	movs	r1, r4
    496a:	9804      	ldr	r0, [sp, #16]
    496c:	f000 fd18 	bl	53a0 <__lshift>
    4970:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4974:	3f01      	subs	r7, #1
    4976:	930b      	str	r3, [sp, #44]	; 0x2c
    4978:	19db      	adds	r3, r3, r7
    497a:	0037      	movs	r7, r6
    497c:	0006      	movs	r6, r0
    497e:	930f      	str	r3, [sp, #60]	; 0x3c
    4980:	9908      	ldr	r1, [sp, #32]
    4982:	9805      	ldr	r0, [sp, #20]
    4984:	f7ff fac9 	bl	3f1a <quorem>
    4988:	0039      	movs	r1, r7
    498a:	900d      	str	r0, [sp, #52]	; 0x34
    498c:	0004      	movs	r4, r0
    498e:	9805      	ldr	r0, [sp, #20]
    4990:	f000 fd57 	bl	5442 <__mcmp>
    4994:	0032      	movs	r2, r6
    4996:	900e      	str	r0, [sp, #56]	; 0x38
    4998:	9908      	ldr	r1, [sp, #32]
    499a:	9804      	ldr	r0, [sp, #16]
    499c:	f000 fd6a 	bl	5474 <__mdiff>
    49a0:	2301      	movs	r3, #1
    49a2:	930c      	str	r3, [sp, #48]	; 0x30
    49a4:	68c3      	ldr	r3, [r0, #12]
    49a6:	3430      	adds	r4, #48	; 0x30
    49a8:	0005      	movs	r5, r0
    49aa:	2b00      	cmp	r3, #0
    49ac:	d104      	bne.n	49b8 <_dtoa_r+0x994>
    49ae:	0001      	movs	r1, r0
    49b0:	9805      	ldr	r0, [sp, #20]
    49b2:	f000 fd46 	bl	5442 <__mcmp>
    49b6:	900c      	str	r0, [sp, #48]	; 0x30
    49b8:	0029      	movs	r1, r5
    49ba:	9804      	ldr	r0, [sp, #16]
    49bc:	f000 fb67 	bl	508e <_Bfree>
    49c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    49c2:	9a22      	ldr	r2, [sp, #136]	; 0x88
    49c4:	4313      	orrs	r3, r2
    49c6:	d000      	beq.n	49ca <_dtoa_r+0x9a6>
    49c8:	e089      	b.n	4ade <_dtoa_r+0xaba>
    49ca:	9a06      	ldr	r2, [sp, #24]
    49cc:	3301      	adds	r3, #1
    49ce:	4213      	tst	r3, r2
    49d0:	d000      	beq.n	49d4 <_dtoa_r+0x9b0>
    49d2:	e084      	b.n	4ade <_dtoa_r+0xaba>
    49d4:	2c39      	cmp	r4, #57	; 0x39
    49d6:	d100      	bne.n	49da <_dtoa_r+0x9b6>
    49d8:	e0a3      	b.n	4b22 <_dtoa_r+0xafe>
    49da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    49dc:	2b00      	cmp	r3, #0
    49de:	dd01      	ble.n	49e4 <_dtoa_r+0x9c0>
    49e0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    49e2:	3431      	adds	r4, #49	; 0x31
    49e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    49e6:	1c5d      	adds	r5, r3, #1
    49e8:	701c      	strb	r4, [r3, #0]
    49ea:	e027      	b.n	4a3c <_dtoa_r+0xa18>
    49ec:	2b04      	cmp	r3, #4
    49ee:	d100      	bne.n	49f2 <_dtoa_r+0x9ce>
    49f0:	e769      	b.n	48c6 <_dtoa_r+0x8a2>
    49f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    49f4:	331c      	adds	r3, #28
    49f6:	18d2      	adds	r2, r2, r3
    49f8:	920b      	str	r2, [sp, #44]	; 0x2c
    49fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    49fc:	18e4      	adds	r4, r4, r3
    49fe:	18d3      	adds	r3, r2, r3
    4a00:	e760      	b.n	48c4 <_dtoa_r+0x8a0>
    4a02:	0003      	movs	r3, r0
    4a04:	e7f5      	b.n	49f2 <_dtoa_r+0x9ce>
    4a06:	2f00      	cmp	r7, #0
    4a08:	dc3c      	bgt.n	4a84 <_dtoa_r+0xa60>
    4a0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4a0c:	2b02      	cmp	r3, #2
    4a0e:	dd39      	ble.n	4a84 <_dtoa_r+0xa60>
    4a10:	970d      	str	r7, [sp, #52]	; 0x34
    4a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4a14:	2b00      	cmp	r3, #0
    4a16:	d10c      	bne.n	4a32 <_dtoa_r+0xa0e>
    4a18:	9908      	ldr	r1, [sp, #32]
    4a1a:	2205      	movs	r2, #5
    4a1c:	9804      	ldr	r0, [sp, #16]
    4a1e:	f000 fb4f 	bl	50c0 <__multadd>
    4a22:	9008      	str	r0, [sp, #32]
    4a24:	0001      	movs	r1, r0
    4a26:	9805      	ldr	r0, [sp, #20]
    4a28:	f000 fd0b 	bl	5442 <__mcmp>
    4a2c:	2800      	cmp	r0, #0
    4a2e:	dd00      	ble.n	4a32 <_dtoa_r+0xa0e>
    4a30:	e55a      	b.n	44e8 <_dtoa_r+0x4c4>
    4a32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    4a34:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    4a36:	43db      	mvns	r3, r3
    4a38:	9303      	str	r3, [sp, #12]
    4a3a:	2700      	movs	r7, #0
    4a3c:	9908      	ldr	r1, [sp, #32]
    4a3e:	9804      	ldr	r0, [sp, #16]
    4a40:	f000 fb25 	bl	508e <_Bfree>
    4a44:	2e00      	cmp	r6, #0
    4a46:	d100      	bne.n	4a4a <_dtoa_r+0xa26>
    4a48:	e63f      	b.n	46ca <_dtoa_r+0x6a6>
    4a4a:	2f00      	cmp	r7, #0
    4a4c:	d005      	beq.n	4a5a <_dtoa_r+0xa36>
    4a4e:	42b7      	cmp	r7, r6
    4a50:	d003      	beq.n	4a5a <_dtoa_r+0xa36>
    4a52:	0039      	movs	r1, r7
    4a54:	9804      	ldr	r0, [sp, #16]
    4a56:	f000 fb1a 	bl	508e <_Bfree>
    4a5a:	0031      	movs	r1, r6
    4a5c:	9804      	ldr	r0, [sp, #16]
    4a5e:	f000 fb16 	bl	508e <_Bfree>
    4a62:	e632      	b.n	46ca <_dtoa_r+0x6a6>
    4a64:	9508      	str	r5, [sp, #32]
    4a66:	002e      	movs	r6, r5
    4a68:	e7e3      	b.n	4a32 <_dtoa_r+0xa0e>
    4a6a:	2300      	movs	r3, #0
    4a6c:	9308      	str	r3, [sp, #32]
    4a6e:	001e      	movs	r6, r3
    4a70:	e7df      	b.n	4a32 <_dtoa_r+0xa0e>
    4a72:	46c0      	nop			; (mov r8, r8)
    4a74:	40240000 	.word	0x40240000
    4a78:	00000433 	.word	0x00000433
    4a7c:	9603      	str	r6, [sp, #12]
    4a7e:	9508      	str	r5, [sp, #32]
    4a80:	002e      	movs	r6, r5
    4a82:	e531      	b.n	44e8 <_dtoa_r+0x4c4>
    4a84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4a86:	970d      	str	r7, [sp, #52]	; 0x34
    4a88:	2b00      	cmp	r3, #0
    4a8a:	d000      	beq.n	4a8e <_dtoa_r+0xa6a>
    4a8c:	e753      	b.n	4936 <_dtoa_r+0x912>
    4a8e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    4a90:	9908      	ldr	r1, [sp, #32]
    4a92:	9805      	ldr	r0, [sp, #20]
    4a94:	f7ff fa41 	bl	3f1a <quorem>
    4a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4a9a:	3030      	adds	r0, #48	; 0x30
    4a9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4a9e:	7028      	strb	r0, [r5, #0]
    4aa0:	3501      	adds	r5, #1
    4aa2:	0004      	movs	r4, r0
    4aa4:	1aeb      	subs	r3, r5, r3
    4aa6:	429a      	cmp	r2, r3
    4aa8:	dc78      	bgt.n	4b9c <_dtoa_r+0xb78>
    4aaa:	1e15      	subs	r5, r2, #0
    4aac:	dc00      	bgt.n	4ab0 <_dtoa_r+0xa8c>
    4aae:	2501      	movs	r5, #1
    4ab0:	2700      	movs	r7, #0
    4ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4ab4:	195d      	adds	r5, r3, r5
    4ab6:	9905      	ldr	r1, [sp, #20]
    4ab8:	2201      	movs	r2, #1
    4aba:	9804      	ldr	r0, [sp, #16]
    4abc:	f000 fc70 	bl	53a0 <__lshift>
    4ac0:	9908      	ldr	r1, [sp, #32]
    4ac2:	9005      	str	r0, [sp, #20]
    4ac4:	f000 fcbd 	bl	5442 <__mcmp>
    4ac8:	2800      	cmp	r0, #0
    4aca:	dc2f      	bgt.n	4b2c <_dtoa_r+0xb08>
    4acc:	d101      	bne.n	4ad2 <_dtoa_r+0xaae>
    4ace:	07e3      	lsls	r3, r4, #31
    4ad0:	d42c      	bmi.n	4b2c <_dtoa_r+0xb08>
    4ad2:	1e6b      	subs	r3, r5, #1
    4ad4:	781a      	ldrb	r2, [r3, #0]
    4ad6:	2a30      	cmp	r2, #48	; 0x30
    4ad8:	d1b0      	bne.n	4a3c <_dtoa_r+0xa18>
    4ada:	001d      	movs	r5, r3
    4adc:	e7f9      	b.n	4ad2 <_dtoa_r+0xaae>
    4ade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4ae0:	2b00      	cmp	r3, #0
    4ae2:	db07      	blt.n	4af4 <_dtoa_r+0xad0>
    4ae4:	001d      	movs	r5, r3
    4ae6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4ae8:	431d      	orrs	r5, r3
    4aea:	d126      	bne.n	4b3a <_dtoa_r+0xb16>
    4aec:	2301      	movs	r3, #1
    4aee:	9a06      	ldr	r2, [sp, #24]
    4af0:	4213      	tst	r3, r2
    4af2:	d122      	bne.n	4b3a <_dtoa_r+0xb16>
    4af4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4af6:	2b00      	cmp	r3, #0
    4af8:	dc00      	bgt.n	4afc <_dtoa_r+0xad8>
    4afa:	e773      	b.n	49e4 <_dtoa_r+0x9c0>
    4afc:	9905      	ldr	r1, [sp, #20]
    4afe:	2201      	movs	r2, #1
    4b00:	9804      	ldr	r0, [sp, #16]
    4b02:	f000 fc4d 	bl	53a0 <__lshift>
    4b06:	9908      	ldr	r1, [sp, #32]
    4b08:	9005      	str	r0, [sp, #20]
    4b0a:	f000 fc9a 	bl	5442 <__mcmp>
    4b0e:	2800      	cmp	r0, #0
    4b10:	dc04      	bgt.n	4b1c <_dtoa_r+0xaf8>
    4b12:	d000      	beq.n	4b16 <_dtoa_r+0xaf2>
    4b14:	e766      	b.n	49e4 <_dtoa_r+0x9c0>
    4b16:	07e3      	lsls	r3, r4, #31
    4b18:	d400      	bmi.n	4b1c <_dtoa_r+0xaf8>
    4b1a:	e763      	b.n	49e4 <_dtoa_r+0x9c0>
    4b1c:	2c39      	cmp	r4, #57	; 0x39
    4b1e:	d000      	beq.n	4b22 <_dtoa_r+0xafe>
    4b20:	e75e      	b.n	49e0 <_dtoa_r+0x9bc>
    4b22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4b24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4b26:	1c5d      	adds	r5, r3, #1
    4b28:	2339      	movs	r3, #57	; 0x39
    4b2a:	7013      	strb	r3, [r2, #0]
    4b2c:	1e6b      	subs	r3, r5, #1
    4b2e:	781a      	ldrb	r2, [r3, #0]
    4b30:	2a39      	cmp	r2, #57	; 0x39
    4b32:	d03b      	beq.n	4bac <_dtoa_r+0xb88>
    4b34:	3201      	adds	r2, #1
    4b36:	701a      	strb	r2, [r3, #0]
    4b38:	e780      	b.n	4a3c <_dtoa_r+0xa18>
    4b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4b3c:	3301      	adds	r3, #1
    4b3e:	930d      	str	r3, [sp, #52]	; 0x34
    4b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4b42:	2b00      	cmp	r3, #0
    4b44:	dd05      	ble.n	4b52 <_dtoa_r+0xb2e>
    4b46:	2c39      	cmp	r4, #57	; 0x39
    4b48:	d0eb      	beq.n	4b22 <_dtoa_r+0xafe>
    4b4a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4b4c:	3401      	adds	r4, #1
    4b4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4b50:	e74a      	b.n	49e8 <_dtoa_r+0x9c4>
    4b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4b54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4b56:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4b58:	701c      	strb	r4, [r3, #0]
    4b5a:	4293      	cmp	r3, r2
    4b5c:	d0ab      	beq.n	4ab6 <_dtoa_r+0xa92>
    4b5e:	2300      	movs	r3, #0
    4b60:	220a      	movs	r2, #10
    4b62:	9905      	ldr	r1, [sp, #20]
    4b64:	9804      	ldr	r0, [sp, #16]
    4b66:	f000 faab 	bl	50c0 <__multadd>
    4b6a:	2300      	movs	r3, #0
    4b6c:	9005      	str	r0, [sp, #20]
    4b6e:	220a      	movs	r2, #10
    4b70:	0039      	movs	r1, r7
    4b72:	9804      	ldr	r0, [sp, #16]
    4b74:	42b7      	cmp	r7, r6
    4b76:	d106      	bne.n	4b86 <_dtoa_r+0xb62>
    4b78:	f000 faa2 	bl	50c0 <__multadd>
    4b7c:	0007      	movs	r7, r0
    4b7e:	0006      	movs	r6, r0
    4b80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4b82:	930b      	str	r3, [sp, #44]	; 0x2c
    4b84:	e6fc      	b.n	4980 <_dtoa_r+0x95c>
    4b86:	f000 fa9b 	bl	50c0 <__multadd>
    4b8a:	0031      	movs	r1, r6
    4b8c:	0007      	movs	r7, r0
    4b8e:	2300      	movs	r3, #0
    4b90:	220a      	movs	r2, #10
    4b92:	9804      	ldr	r0, [sp, #16]
    4b94:	f000 fa94 	bl	50c0 <__multadd>
    4b98:	0006      	movs	r6, r0
    4b9a:	e7f1      	b.n	4b80 <_dtoa_r+0xb5c>
    4b9c:	2300      	movs	r3, #0
    4b9e:	220a      	movs	r2, #10
    4ba0:	9905      	ldr	r1, [sp, #20]
    4ba2:	9804      	ldr	r0, [sp, #16]
    4ba4:	f000 fa8c 	bl	50c0 <__multadd>
    4ba8:	9005      	str	r0, [sp, #20]
    4baa:	e771      	b.n	4a90 <_dtoa_r+0xa6c>
    4bac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4bae:	429a      	cmp	r2, r3
    4bb0:	d105      	bne.n	4bbe <_dtoa_r+0xb9a>
    4bb2:	9b03      	ldr	r3, [sp, #12]
    4bb4:	3301      	adds	r3, #1
    4bb6:	9303      	str	r3, [sp, #12]
    4bb8:	2331      	movs	r3, #49	; 0x31
    4bba:	7013      	strb	r3, [r2, #0]
    4bbc:	e73e      	b.n	4a3c <_dtoa_r+0xa18>
    4bbe:	001d      	movs	r5, r3
    4bc0:	e7b4      	b.n	4b2c <_dtoa_r+0xb08>
    4bc2:	4b0a      	ldr	r3, [pc, #40]	; (4bec <_dtoa_r+0xbc8>)
    4bc4:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4bc6:	930a      	str	r3, [sp, #40]	; 0x28
    4bc8:	4b09      	ldr	r3, [pc, #36]	; (4bf0 <_dtoa_r+0xbcc>)
    4bca:	2a00      	cmp	r2, #0
    4bcc:	d001      	beq.n	4bd2 <_dtoa_r+0xbae>
    4bce:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4bd0:	6013      	str	r3, [r2, #0]
    4bd2:	980a      	ldr	r0, [sp, #40]	; 0x28
    4bd4:	b01d      	add	sp, #116	; 0x74
    4bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4bd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4bda:	2b00      	cmp	r3, #0
    4bdc:	dd00      	ble.n	4be0 <_dtoa_r+0xbbc>
    4bde:	e756      	b.n	4a8e <_dtoa_r+0xa6a>
    4be0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4be2:	2b02      	cmp	r3, #2
    4be4:	dc00      	bgt.n	4be8 <_dtoa_r+0xbc4>
    4be6:	e752      	b.n	4a8e <_dtoa_r+0xa6a>
    4be8:	e713      	b.n	4a12 <_dtoa_r+0x9ee>
    4bea:	46c0      	nop			; (mov r8, r8)
    4bec:	000089d8 	.word	0x000089d8
    4bf0:	000089e0 	.word	0x000089e0

00004bf4 <__sflush_r>:
    4bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4bf6:	898a      	ldrh	r2, [r1, #12]
    4bf8:	0005      	movs	r5, r0
    4bfa:	000c      	movs	r4, r1
    4bfc:	0713      	lsls	r3, r2, #28
    4bfe:	d460      	bmi.n	4cc2 <__sflush_r+0xce>
    4c00:	684b      	ldr	r3, [r1, #4]
    4c02:	2b00      	cmp	r3, #0
    4c04:	dc04      	bgt.n	4c10 <__sflush_r+0x1c>
    4c06:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4c08:	2b00      	cmp	r3, #0
    4c0a:	dc01      	bgt.n	4c10 <__sflush_r+0x1c>
    4c0c:	2000      	movs	r0, #0
    4c0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4c10:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4c12:	2f00      	cmp	r7, #0
    4c14:	d0fa      	beq.n	4c0c <__sflush_r+0x18>
    4c16:	2300      	movs	r3, #0
    4c18:	682e      	ldr	r6, [r5, #0]
    4c1a:	602b      	str	r3, [r5, #0]
    4c1c:	2380      	movs	r3, #128	; 0x80
    4c1e:	015b      	lsls	r3, r3, #5
    4c20:	401a      	ands	r2, r3
    4c22:	d034      	beq.n	4c8e <__sflush_r+0x9a>
    4c24:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4c26:	89a3      	ldrh	r3, [r4, #12]
    4c28:	075b      	lsls	r3, r3, #29
    4c2a:	d506      	bpl.n	4c3a <__sflush_r+0x46>
    4c2c:	6863      	ldr	r3, [r4, #4]
    4c2e:	1ac0      	subs	r0, r0, r3
    4c30:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4c32:	2b00      	cmp	r3, #0
    4c34:	d001      	beq.n	4c3a <__sflush_r+0x46>
    4c36:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4c38:	1ac0      	subs	r0, r0, r3
    4c3a:	0002      	movs	r2, r0
    4c3c:	6a21      	ldr	r1, [r4, #32]
    4c3e:	2300      	movs	r3, #0
    4c40:	0028      	movs	r0, r5
    4c42:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4c44:	47b8      	blx	r7
    4c46:	89a1      	ldrh	r1, [r4, #12]
    4c48:	1c43      	adds	r3, r0, #1
    4c4a:	d106      	bne.n	4c5a <__sflush_r+0x66>
    4c4c:	682b      	ldr	r3, [r5, #0]
    4c4e:	2b1d      	cmp	r3, #29
    4c50:	d831      	bhi.n	4cb6 <__sflush_r+0xc2>
    4c52:	4a2c      	ldr	r2, [pc, #176]	; (4d04 <__sflush_r+0x110>)
    4c54:	40da      	lsrs	r2, r3
    4c56:	07d3      	lsls	r3, r2, #31
    4c58:	d52d      	bpl.n	4cb6 <__sflush_r+0xc2>
    4c5a:	2300      	movs	r3, #0
    4c5c:	6063      	str	r3, [r4, #4]
    4c5e:	6923      	ldr	r3, [r4, #16]
    4c60:	6023      	str	r3, [r4, #0]
    4c62:	04cb      	lsls	r3, r1, #19
    4c64:	d505      	bpl.n	4c72 <__sflush_r+0x7e>
    4c66:	1c43      	adds	r3, r0, #1
    4c68:	d102      	bne.n	4c70 <__sflush_r+0x7c>
    4c6a:	682b      	ldr	r3, [r5, #0]
    4c6c:	2b00      	cmp	r3, #0
    4c6e:	d100      	bne.n	4c72 <__sflush_r+0x7e>
    4c70:	6560      	str	r0, [r4, #84]	; 0x54
    4c72:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4c74:	602e      	str	r6, [r5, #0]
    4c76:	2900      	cmp	r1, #0
    4c78:	d0c8      	beq.n	4c0c <__sflush_r+0x18>
    4c7a:	0023      	movs	r3, r4
    4c7c:	3344      	adds	r3, #68	; 0x44
    4c7e:	4299      	cmp	r1, r3
    4c80:	d002      	beq.n	4c88 <__sflush_r+0x94>
    4c82:	0028      	movs	r0, r5
    4c84:	f000 fcbc 	bl	5600 <_free_r>
    4c88:	2000      	movs	r0, #0
    4c8a:	6360      	str	r0, [r4, #52]	; 0x34
    4c8c:	e7bf      	b.n	4c0e <__sflush_r+0x1a>
    4c8e:	2301      	movs	r3, #1
    4c90:	6a21      	ldr	r1, [r4, #32]
    4c92:	0028      	movs	r0, r5
    4c94:	47b8      	blx	r7
    4c96:	1c43      	adds	r3, r0, #1
    4c98:	d1c5      	bne.n	4c26 <__sflush_r+0x32>
    4c9a:	682b      	ldr	r3, [r5, #0]
    4c9c:	2b00      	cmp	r3, #0
    4c9e:	d0c2      	beq.n	4c26 <__sflush_r+0x32>
    4ca0:	2b1d      	cmp	r3, #29
    4ca2:	d001      	beq.n	4ca8 <__sflush_r+0xb4>
    4ca4:	2b16      	cmp	r3, #22
    4ca6:	d101      	bne.n	4cac <__sflush_r+0xb8>
    4ca8:	602e      	str	r6, [r5, #0]
    4caa:	e7af      	b.n	4c0c <__sflush_r+0x18>
    4cac:	2340      	movs	r3, #64	; 0x40
    4cae:	89a2      	ldrh	r2, [r4, #12]
    4cb0:	4313      	orrs	r3, r2
    4cb2:	81a3      	strh	r3, [r4, #12]
    4cb4:	e7ab      	b.n	4c0e <__sflush_r+0x1a>
    4cb6:	2340      	movs	r3, #64	; 0x40
    4cb8:	430b      	orrs	r3, r1
    4cba:	2001      	movs	r0, #1
    4cbc:	81a3      	strh	r3, [r4, #12]
    4cbe:	4240      	negs	r0, r0
    4cc0:	e7a5      	b.n	4c0e <__sflush_r+0x1a>
    4cc2:	690f      	ldr	r7, [r1, #16]
    4cc4:	2f00      	cmp	r7, #0
    4cc6:	d0a1      	beq.n	4c0c <__sflush_r+0x18>
    4cc8:	680b      	ldr	r3, [r1, #0]
    4cca:	600f      	str	r7, [r1, #0]
    4ccc:	1bdb      	subs	r3, r3, r7
    4cce:	9301      	str	r3, [sp, #4]
    4cd0:	2300      	movs	r3, #0
    4cd2:	0792      	lsls	r2, r2, #30
    4cd4:	d100      	bne.n	4cd8 <__sflush_r+0xe4>
    4cd6:	694b      	ldr	r3, [r1, #20]
    4cd8:	60a3      	str	r3, [r4, #8]
    4cda:	9b01      	ldr	r3, [sp, #4]
    4cdc:	2b00      	cmp	r3, #0
    4cde:	dc00      	bgt.n	4ce2 <__sflush_r+0xee>
    4ce0:	e794      	b.n	4c0c <__sflush_r+0x18>
    4ce2:	9b01      	ldr	r3, [sp, #4]
    4ce4:	003a      	movs	r2, r7
    4ce6:	6a21      	ldr	r1, [r4, #32]
    4ce8:	0028      	movs	r0, r5
    4cea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4cec:	47b0      	blx	r6
    4cee:	2800      	cmp	r0, #0
    4cf0:	dc03      	bgt.n	4cfa <__sflush_r+0x106>
    4cf2:	2340      	movs	r3, #64	; 0x40
    4cf4:	89a2      	ldrh	r2, [r4, #12]
    4cf6:	4313      	orrs	r3, r2
    4cf8:	e7df      	b.n	4cba <__sflush_r+0xc6>
    4cfa:	9b01      	ldr	r3, [sp, #4]
    4cfc:	183f      	adds	r7, r7, r0
    4cfe:	1a1b      	subs	r3, r3, r0
    4d00:	9301      	str	r3, [sp, #4]
    4d02:	e7ea      	b.n	4cda <__sflush_r+0xe6>
    4d04:	20400001 	.word	0x20400001

00004d08 <_fflush_r>:
    4d08:	690b      	ldr	r3, [r1, #16]
    4d0a:	b570      	push	{r4, r5, r6, lr}
    4d0c:	0005      	movs	r5, r0
    4d0e:	000c      	movs	r4, r1
    4d10:	2b00      	cmp	r3, #0
    4d12:	d101      	bne.n	4d18 <_fflush_r+0x10>
    4d14:	2000      	movs	r0, #0
    4d16:	bd70      	pop	{r4, r5, r6, pc}
    4d18:	2800      	cmp	r0, #0
    4d1a:	d004      	beq.n	4d26 <_fflush_r+0x1e>
    4d1c:	6983      	ldr	r3, [r0, #24]
    4d1e:	2b00      	cmp	r3, #0
    4d20:	d101      	bne.n	4d26 <_fflush_r+0x1e>
    4d22:	f000 f85f 	bl	4de4 <__sinit>
    4d26:	4b0b      	ldr	r3, [pc, #44]	; (4d54 <_fflush_r+0x4c>)
    4d28:	429c      	cmp	r4, r3
    4d2a:	d109      	bne.n	4d40 <_fflush_r+0x38>
    4d2c:	686c      	ldr	r4, [r5, #4]
    4d2e:	220c      	movs	r2, #12
    4d30:	5ea3      	ldrsh	r3, [r4, r2]
    4d32:	2b00      	cmp	r3, #0
    4d34:	d0ee      	beq.n	4d14 <_fflush_r+0xc>
    4d36:	0021      	movs	r1, r4
    4d38:	0028      	movs	r0, r5
    4d3a:	f7ff ff5b 	bl	4bf4 <__sflush_r>
    4d3e:	e7ea      	b.n	4d16 <_fflush_r+0xe>
    4d40:	4b05      	ldr	r3, [pc, #20]	; (4d58 <_fflush_r+0x50>)
    4d42:	429c      	cmp	r4, r3
    4d44:	d101      	bne.n	4d4a <_fflush_r+0x42>
    4d46:	68ac      	ldr	r4, [r5, #8]
    4d48:	e7f1      	b.n	4d2e <_fflush_r+0x26>
    4d4a:	4b04      	ldr	r3, [pc, #16]	; (4d5c <_fflush_r+0x54>)
    4d4c:	429c      	cmp	r4, r3
    4d4e:	d1ee      	bne.n	4d2e <_fflush_r+0x26>
    4d50:	68ec      	ldr	r4, [r5, #12]
    4d52:	e7ec      	b.n	4d2e <_fflush_r+0x26>
    4d54:	00008a08 	.word	0x00008a08
    4d58:	00008a28 	.word	0x00008a28
    4d5c:	000089e8 	.word	0x000089e8

00004d60 <_cleanup_r>:
    4d60:	b510      	push	{r4, lr}
    4d62:	4902      	ldr	r1, [pc, #8]	; (4d6c <_cleanup_r+0xc>)
    4d64:	f000 f8b2 	bl	4ecc <_fwalk_reent>
    4d68:	bd10      	pop	{r4, pc}
    4d6a:	46c0      	nop			; (mov r8, r8)
    4d6c:	00004d09 	.word	0x00004d09

00004d70 <std.isra.0>:
    4d70:	2300      	movs	r3, #0
    4d72:	b510      	push	{r4, lr}
    4d74:	0004      	movs	r4, r0
    4d76:	6003      	str	r3, [r0, #0]
    4d78:	6043      	str	r3, [r0, #4]
    4d7a:	6083      	str	r3, [r0, #8]
    4d7c:	8181      	strh	r1, [r0, #12]
    4d7e:	6643      	str	r3, [r0, #100]	; 0x64
    4d80:	81c2      	strh	r2, [r0, #14]
    4d82:	6103      	str	r3, [r0, #16]
    4d84:	6143      	str	r3, [r0, #20]
    4d86:	6183      	str	r3, [r0, #24]
    4d88:	0019      	movs	r1, r3
    4d8a:	2208      	movs	r2, #8
    4d8c:	305c      	adds	r0, #92	; 0x5c
    4d8e:	f7fe fb74 	bl	347a <memset>
    4d92:	4b05      	ldr	r3, [pc, #20]	; (4da8 <std.isra.0+0x38>)
    4d94:	6224      	str	r4, [r4, #32]
    4d96:	6263      	str	r3, [r4, #36]	; 0x24
    4d98:	4b04      	ldr	r3, [pc, #16]	; (4dac <std.isra.0+0x3c>)
    4d9a:	62a3      	str	r3, [r4, #40]	; 0x28
    4d9c:	4b04      	ldr	r3, [pc, #16]	; (4db0 <std.isra.0+0x40>)
    4d9e:	62e3      	str	r3, [r4, #44]	; 0x2c
    4da0:	4b04      	ldr	r3, [pc, #16]	; (4db4 <std.isra.0+0x44>)
    4da2:	6323      	str	r3, [r4, #48]	; 0x30
    4da4:	bd10      	pop	{r4, pc}
    4da6:	46c0      	nop			; (mov r8, r8)
    4da8:	000059fd 	.word	0x000059fd
    4dac:	00005a25 	.word	0x00005a25
    4db0:	00005a5d 	.word	0x00005a5d
    4db4:	00005a89 	.word	0x00005a89

00004db8 <__sfmoreglue>:
    4db8:	b570      	push	{r4, r5, r6, lr}
    4dba:	2568      	movs	r5, #104	; 0x68
    4dbc:	1e4a      	subs	r2, r1, #1
    4dbe:	4355      	muls	r5, r2
    4dc0:	000e      	movs	r6, r1
    4dc2:	0029      	movs	r1, r5
    4dc4:	3174      	adds	r1, #116	; 0x74
    4dc6:	f000 fc65 	bl	5694 <_malloc_r>
    4dca:	1e04      	subs	r4, r0, #0
    4dcc:	d008      	beq.n	4de0 <__sfmoreglue+0x28>
    4dce:	2100      	movs	r1, #0
    4dd0:	002a      	movs	r2, r5
    4dd2:	6001      	str	r1, [r0, #0]
    4dd4:	6046      	str	r6, [r0, #4]
    4dd6:	300c      	adds	r0, #12
    4dd8:	60a0      	str	r0, [r4, #8]
    4dda:	3268      	adds	r2, #104	; 0x68
    4ddc:	f7fe fb4d 	bl	347a <memset>
    4de0:	0020      	movs	r0, r4
    4de2:	bd70      	pop	{r4, r5, r6, pc}

00004de4 <__sinit>:
    4de4:	6983      	ldr	r3, [r0, #24]
    4de6:	b513      	push	{r0, r1, r4, lr}
    4de8:	0004      	movs	r4, r0
    4dea:	2b00      	cmp	r3, #0
    4dec:	d128      	bne.n	4e40 <__sinit+0x5c>
    4dee:	6483      	str	r3, [r0, #72]	; 0x48
    4df0:	64c3      	str	r3, [r0, #76]	; 0x4c
    4df2:	6503      	str	r3, [r0, #80]	; 0x50
    4df4:	4b13      	ldr	r3, [pc, #76]	; (4e44 <__sinit+0x60>)
    4df6:	4a14      	ldr	r2, [pc, #80]	; (4e48 <__sinit+0x64>)
    4df8:	681b      	ldr	r3, [r3, #0]
    4dfa:	6282      	str	r2, [r0, #40]	; 0x28
    4dfc:	9301      	str	r3, [sp, #4]
    4dfe:	4298      	cmp	r0, r3
    4e00:	d101      	bne.n	4e06 <__sinit+0x22>
    4e02:	2301      	movs	r3, #1
    4e04:	6183      	str	r3, [r0, #24]
    4e06:	0020      	movs	r0, r4
    4e08:	f000 f820 	bl	4e4c <__sfp>
    4e0c:	6060      	str	r0, [r4, #4]
    4e0e:	0020      	movs	r0, r4
    4e10:	f000 f81c 	bl	4e4c <__sfp>
    4e14:	60a0      	str	r0, [r4, #8]
    4e16:	0020      	movs	r0, r4
    4e18:	f000 f818 	bl	4e4c <__sfp>
    4e1c:	2200      	movs	r2, #0
    4e1e:	60e0      	str	r0, [r4, #12]
    4e20:	2104      	movs	r1, #4
    4e22:	6860      	ldr	r0, [r4, #4]
    4e24:	f7ff ffa4 	bl	4d70 <std.isra.0>
    4e28:	2201      	movs	r2, #1
    4e2a:	2109      	movs	r1, #9
    4e2c:	68a0      	ldr	r0, [r4, #8]
    4e2e:	f7ff ff9f 	bl	4d70 <std.isra.0>
    4e32:	2202      	movs	r2, #2
    4e34:	2112      	movs	r1, #18
    4e36:	68e0      	ldr	r0, [r4, #12]
    4e38:	f7ff ff9a 	bl	4d70 <std.isra.0>
    4e3c:	2301      	movs	r3, #1
    4e3e:	61a3      	str	r3, [r4, #24]
    4e40:	bd13      	pop	{r0, r1, r4, pc}
    4e42:	46c0      	nop			; (mov r8, r8)
    4e44:	000089a0 	.word	0x000089a0
    4e48:	00004d61 	.word	0x00004d61

00004e4c <__sfp>:
    4e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e4e:	4b1e      	ldr	r3, [pc, #120]	; (4ec8 <__sfp+0x7c>)
    4e50:	0007      	movs	r7, r0
    4e52:	681e      	ldr	r6, [r3, #0]
    4e54:	69b3      	ldr	r3, [r6, #24]
    4e56:	2b00      	cmp	r3, #0
    4e58:	d102      	bne.n	4e60 <__sfp+0x14>
    4e5a:	0030      	movs	r0, r6
    4e5c:	f7ff ffc2 	bl	4de4 <__sinit>
    4e60:	3648      	adds	r6, #72	; 0x48
    4e62:	68b4      	ldr	r4, [r6, #8]
    4e64:	6873      	ldr	r3, [r6, #4]
    4e66:	3b01      	subs	r3, #1
    4e68:	d504      	bpl.n	4e74 <__sfp+0x28>
    4e6a:	6833      	ldr	r3, [r6, #0]
    4e6c:	2b00      	cmp	r3, #0
    4e6e:	d007      	beq.n	4e80 <__sfp+0x34>
    4e70:	6836      	ldr	r6, [r6, #0]
    4e72:	e7f6      	b.n	4e62 <__sfp+0x16>
    4e74:	220c      	movs	r2, #12
    4e76:	5ea5      	ldrsh	r5, [r4, r2]
    4e78:	2d00      	cmp	r5, #0
    4e7a:	d00d      	beq.n	4e98 <__sfp+0x4c>
    4e7c:	3468      	adds	r4, #104	; 0x68
    4e7e:	e7f2      	b.n	4e66 <__sfp+0x1a>
    4e80:	2104      	movs	r1, #4
    4e82:	0038      	movs	r0, r7
    4e84:	f7ff ff98 	bl	4db8 <__sfmoreglue>
    4e88:	6030      	str	r0, [r6, #0]
    4e8a:	2800      	cmp	r0, #0
    4e8c:	d1f0      	bne.n	4e70 <__sfp+0x24>
    4e8e:	230c      	movs	r3, #12
    4e90:	0004      	movs	r4, r0
    4e92:	603b      	str	r3, [r7, #0]
    4e94:	0020      	movs	r0, r4
    4e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e98:	2301      	movs	r3, #1
    4e9a:	0020      	movs	r0, r4
    4e9c:	425b      	negs	r3, r3
    4e9e:	81e3      	strh	r3, [r4, #14]
    4ea0:	3302      	adds	r3, #2
    4ea2:	81a3      	strh	r3, [r4, #12]
    4ea4:	6665      	str	r5, [r4, #100]	; 0x64
    4ea6:	6025      	str	r5, [r4, #0]
    4ea8:	60a5      	str	r5, [r4, #8]
    4eaa:	6065      	str	r5, [r4, #4]
    4eac:	6125      	str	r5, [r4, #16]
    4eae:	6165      	str	r5, [r4, #20]
    4eb0:	61a5      	str	r5, [r4, #24]
    4eb2:	2208      	movs	r2, #8
    4eb4:	0029      	movs	r1, r5
    4eb6:	305c      	adds	r0, #92	; 0x5c
    4eb8:	f7fe fadf 	bl	347a <memset>
    4ebc:	6365      	str	r5, [r4, #52]	; 0x34
    4ebe:	63a5      	str	r5, [r4, #56]	; 0x38
    4ec0:	64a5      	str	r5, [r4, #72]	; 0x48
    4ec2:	64e5      	str	r5, [r4, #76]	; 0x4c
    4ec4:	e7e6      	b.n	4e94 <__sfp+0x48>
    4ec6:	46c0      	nop			; (mov r8, r8)
    4ec8:	000089a0 	.word	0x000089a0

00004ecc <_fwalk_reent>:
    4ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4ece:	0004      	movs	r4, r0
    4ed0:	0007      	movs	r7, r0
    4ed2:	2600      	movs	r6, #0
    4ed4:	9101      	str	r1, [sp, #4]
    4ed6:	3448      	adds	r4, #72	; 0x48
    4ed8:	2c00      	cmp	r4, #0
    4eda:	d101      	bne.n	4ee0 <_fwalk_reent+0x14>
    4edc:	0030      	movs	r0, r6
    4ede:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4ee0:	6863      	ldr	r3, [r4, #4]
    4ee2:	68a5      	ldr	r5, [r4, #8]
    4ee4:	9300      	str	r3, [sp, #0]
    4ee6:	9b00      	ldr	r3, [sp, #0]
    4ee8:	3b01      	subs	r3, #1
    4eea:	9300      	str	r3, [sp, #0]
    4eec:	d501      	bpl.n	4ef2 <_fwalk_reent+0x26>
    4eee:	6824      	ldr	r4, [r4, #0]
    4ef0:	e7f2      	b.n	4ed8 <_fwalk_reent+0xc>
    4ef2:	89ab      	ldrh	r3, [r5, #12]
    4ef4:	2b01      	cmp	r3, #1
    4ef6:	d908      	bls.n	4f0a <_fwalk_reent+0x3e>
    4ef8:	220e      	movs	r2, #14
    4efa:	5eab      	ldrsh	r3, [r5, r2]
    4efc:	3301      	adds	r3, #1
    4efe:	d004      	beq.n	4f0a <_fwalk_reent+0x3e>
    4f00:	0029      	movs	r1, r5
    4f02:	0038      	movs	r0, r7
    4f04:	9b01      	ldr	r3, [sp, #4]
    4f06:	4798      	blx	r3
    4f08:	4306      	orrs	r6, r0
    4f0a:	3568      	adds	r5, #104	; 0x68
    4f0c:	e7eb      	b.n	4ee6 <_fwalk_reent+0x1a>
	...

00004f10 <_localeconv_r>:
    4f10:	4b03      	ldr	r3, [pc, #12]	; (4f20 <_localeconv_r+0x10>)
    4f12:	681b      	ldr	r3, [r3, #0]
    4f14:	6a18      	ldr	r0, [r3, #32]
    4f16:	2800      	cmp	r0, #0
    4f18:	d100      	bne.n	4f1c <_localeconv_r+0xc>
    4f1a:	4802      	ldr	r0, [pc, #8]	; (4f24 <_localeconv_r+0x14>)
    4f1c:	30f0      	adds	r0, #240	; 0xf0
    4f1e:	4770      	bx	lr
    4f20:	20000010 	.word	0x20000010
    4f24:	20000074 	.word	0x20000074

00004f28 <__swhatbuf_r>:
    4f28:	b570      	push	{r4, r5, r6, lr}
    4f2a:	000e      	movs	r6, r1
    4f2c:	001d      	movs	r5, r3
    4f2e:	230e      	movs	r3, #14
    4f30:	5ec9      	ldrsh	r1, [r1, r3]
    4f32:	b090      	sub	sp, #64	; 0x40
    4f34:	0014      	movs	r4, r2
    4f36:	2900      	cmp	r1, #0
    4f38:	da07      	bge.n	4f4a <__swhatbuf_r+0x22>
    4f3a:	2300      	movs	r3, #0
    4f3c:	602b      	str	r3, [r5, #0]
    4f3e:	89b3      	ldrh	r3, [r6, #12]
    4f40:	061b      	lsls	r3, r3, #24
    4f42:	d411      	bmi.n	4f68 <__swhatbuf_r+0x40>
    4f44:	2380      	movs	r3, #128	; 0x80
    4f46:	00db      	lsls	r3, r3, #3
    4f48:	e00f      	b.n	4f6a <__swhatbuf_r+0x42>
    4f4a:	aa01      	add	r2, sp, #4
    4f4c:	f000 fe94 	bl	5c78 <_fstat_r>
    4f50:	2800      	cmp	r0, #0
    4f52:	dbf2      	blt.n	4f3a <__swhatbuf_r+0x12>
    4f54:	22f0      	movs	r2, #240	; 0xf0
    4f56:	9b02      	ldr	r3, [sp, #8]
    4f58:	0212      	lsls	r2, r2, #8
    4f5a:	4013      	ands	r3, r2
    4f5c:	4a05      	ldr	r2, [pc, #20]	; (4f74 <__swhatbuf_r+0x4c>)
    4f5e:	189b      	adds	r3, r3, r2
    4f60:	425a      	negs	r2, r3
    4f62:	4153      	adcs	r3, r2
    4f64:	602b      	str	r3, [r5, #0]
    4f66:	e7ed      	b.n	4f44 <__swhatbuf_r+0x1c>
    4f68:	2340      	movs	r3, #64	; 0x40
    4f6a:	2000      	movs	r0, #0
    4f6c:	6023      	str	r3, [r4, #0]
    4f6e:	b010      	add	sp, #64	; 0x40
    4f70:	bd70      	pop	{r4, r5, r6, pc}
    4f72:	46c0      	nop			; (mov r8, r8)
    4f74:	ffffe000 	.word	0xffffe000

00004f78 <__smakebuf_r>:
    4f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4f7a:	2602      	movs	r6, #2
    4f7c:	898b      	ldrh	r3, [r1, #12]
    4f7e:	0005      	movs	r5, r0
    4f80:	000c      	movs	r4, r1
    4f82:	4233      	tst	r3, r6
    4f84:	d006      	beq.n	4f94 <__smakebuf_r+0x1c>
    4f86:	0023      	movs	r3, r4
    4f88:	3347      	adds	r3, #71	; 0x47
    4f8a:	6023      	str	r3, [r4, #0]
    4f8c:	6123      	str	r3, [r4, #16]
    4f8e:	2301      	movs	r3, #1
    4f90:	6163      	str	r3, [r4, #20]
    4f92:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4f94:	ab01      	add	r3, sp, #4
    4f96:	466a      	mov	r2, sp
    4f98:	f7ff ffc6 	bl	4f28 <__swhatbuf_r>
    4f9c:	9900      	ldr	r1, [sp, #0]
    4f9e:	0007      	movs	r7, r0
    4fa0:	0028      	movs	r0, r5
    4fa2:	f000 fb77 	bl	5694 <_malloc_r>
    4fa6:	2800      	cmp	r0, #0
    4fa8:	d106      	bne.n	4fb8 <__smakebuf_r+0x40>
    4faa:	220c      	movs	r2, #12
    4fac:	5ea3      	ldrsh	r3, [r4, r2]
    4fae:	059a      	lsls	r2, r3, #22
    4fb0:	d4ef      	bmi.n	4f92 <__smakebuf_r+0x1a>
    4fb2:	431e      	orrs	r6, r3
    4fb4:	81a6      	strh	r6, [r4, #12]
    4fb6:	e7e6      	b.n	4f86 <__smakebuf_r+0xe>
    4fb8:	4b0d      	ldr	r3, [pc, #52]	; (4ff0 <__smakebuf_r+0x78>)
    4fba:	62ab      	str	r3, [r5, #40]	; 0x28
    4fbc:	2380      	movs	r3, #128	; 0x80
    4fbe:	89a2      	ldrh	r2, [r4, #12]
    4fc0:	6020      	str	r0, [r4, #0]
    4fc2:	4313      	orrs	r3, r2
    4fc4:	81a3      	strh	r3, [r4, #12]
    4fc6:	9b00      	ldr	r3, [sp, #0]
    4fc8:	6120      	str	r0, [r4, #16]
    4fca:	6163      	str	r3, [r4, #20]
    4fcc:	9b01      	ldr	r3, [sp, #4]
    4fce:	2b00      	cmp	r3, #0
    4fd0:	d00a      	beq.n	4fe8 <__smakebuf_r+0x70>
    4fd2:	230e      	movs	r3, #14
    4fd4:	5ee1      	ldrsh	r1, [r4, r3]
    4fd6:	0028      	movs	r0, r5
    4fd8:	f000 fe60 	bl	5c9c <_isatty_r>
    4fdc:	2800      	cmp	r0, #0
    4fde:	d003      	beq.n	4fe8 <__smakebuf_r+0x70>
    4fe0:	2301      	movs	r3, #1
    4fe2:	89a2      	ldrh	r2, [r4, #12]
    4fe4:	4313      	orrs	r3, r2
    4fe6:	81a3      	strh	r3, [r4, #12]
    4fe8:	89a0      	ldrh	r0, [r4, #12]
    4fea:	4338      	orrs	r0, r7
    4fec:	81a0      	strh	r0, [r4, #12]
    4fee:	e7d0      	b.n	4f92 <__smakebuf_r+0x1a>
    4ff0:	00004d61 	.word	0x00004d61

00004ff4 <malloc>:
    4ff4:	b510      	push	{r4, lr}
    4ff6:	4b03      	ldr	r3, [pc, #12]	; (5004 <malloc+0x10>)
    4ff8:	0001      	movs	r1, r0
    4ffa:	6818      	ldr	r0, [r3, #0]
    4ffc:	f000 fb4a 	bl	5694 <_malloc_r>
    5000:	bd10      	pop	{r4, pc}
    5002:	46c0      	nop			; (mov r8, r8)
    5004:	20000010 	.word	0x20000010

00005008 <memchr>:
    5008:	b2c9      	uxtb	r1, r1
    500a:	1882      	adds	r2, r0, r2
    500c:	4290      	cmp	r0, r2
    500e:	d101      	bne.n	5014 <memchr+0xc>
    5010:	2000      	movs	r0, #0
    5012:	4770      	bx	lr
    5014:	7803      	ldrb	r3, [r0, #0]
    5016:	428b      	cmp	r3, r1
    5018:	d0fb      	beq.n	5012 <memchr+0xa>
    501a:	3001      	adds	r0, #1
    501c:	e7f6      	b.n	500c <memchr+0x4>

0000501e <_Balloc>:
    501e:	b570      	push	{r4, r5, r6, lr}
    5020:	6a46      	ldr	r6, [r0, #36]	; 0x24
    5022:	0004      	movs	r4, r0
    5024:	000d      	movs	r5, r1
    5026:	2e00      	cmp	r6, #0
    5028:	d107      	bne.n	503a <_Balloc+0x1c>
    502a:	2010      	movs	r0, #16
    502c:	f7ff ffe2 	bl	4ff4 <malloc>
    5030:	6260      	str	r0, [r4, #36]	; 0x24
    5032:	6046      	str	r6, [r0, #4]
    5034:	6086      	str	r6, [r0, #8]
    5036:	6006      	str	r6, [r0, #0]
    5038:	60c6      	str	r6, [r0, #12]
    503a:	6a66      	ldr	r6, [r4, #36]	; 0x24
    503c:	68f3      	ldr	r3, [r6, #12]
    503e:	2b00      	cmp	r3, #0
    5040:	d013      	beq.n	506a <_Balloc+0x4c>
    5042:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5044:	00aa      	lsls	r2, r5, #2
    5046:	68db      	ldr	r3, [r3, #12]
    5048:	189b      	adds	r3, r3, r2
    504a:	6818      	ldr	r0, [r3, #0]
    504c:	2800      	cmp	r0, #0
    504e:	d118      	bne.n	5082 <_Balloc+0x64>
    5050:	2101      	movs	r1, #1
    5052:	000e      	movs	r6, r1
    5054:	40ae      	lsls	r6, r5
    5056:	1d72      	adds	r2, r6, #5
    5058:	0092      	lsls	r2, r2, #2
    505a:	0020      	movs	r0, r4
    505c:	f000 fac2 	bl	55e4 <_calloc_r>
    5060:	2800      	cmp	r0, #0
    5062:	d00c      	beq.n	507e <_Balloc+0x60>
    5064:	6045      	str	r5, [r0, #4]
    5066:	6086      	str	r6, [r0, #8]
    5068:	e00d      	b.n	5086 <_Balloc+0x68>
    506a:	2221      	movs	r2, #33	; 0x21
    506c:	2104      	movs	r1, #4
    506e:	0020      	movs	r0, r4
    5070:	f000 fab8 	bl	55e4 <_calloc_r>
    5074:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5076:	60f0      	str	r0, [r6, #12]
    5078:	68db      	ldr	r3, [r3, #12]
    507a:	2b00      	cmp	r3, #0
    507c:	d1e1      	bne.n	5042 <_Balloc+0x24>
    507e:	2000      	movs	r0, #0
    5080:	bd70      	pop	{r4, r5, r6, pc}
    5082:	6802      	ldr	r2, [r0, #0]
    5084:	601a      	str	r2, [r3, #0]
    5086:	2300      	movs	r3, #0
    5088:	6103      	str	r3, [r0, #16]
    508a:	60c3      	str	r3, [r0, #12]
    508c:	e7f8      	b.n	5080 <_Balloc+0x62>

0000508e <_Bfree>:
    508e:	b570      	push	{r4, r5, r6, lr}
    5090:	6a44      	ldr	r4, [r0, #36]	; 0x24
    5092:	0006      	movs	r6, r0
    5094:	000d      	movs	r5, r1
    5096:	2c00      	cmp	r4, #0
    5098:	d107      	bne.n	50aa <_Bfree+0x1c>
    509a:	2010      	movs	r0, #16
    509c:	f7ff ffaa 	bl	4ff4 <malloc>
    50a0:	6270      	str	r0, [r6, #36]	; 0x24
    50a2:	6044      	str	r4, [r0, #4]
    50a4:	6084      	str	r4, [r0, #8]
    50a6:	6004      	str	r4, [r0, #0]
    50a8:	60c4      	str	r4, [r0, #12]
    50aa:	2d00      	cmp	r5, #0
    50ac:	d007      	beq.n	50be <_Bfree+0x30>
    50ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
    50b0:	686a      	ldr	r2, [r5, #4]
    50b2:	68db      	ldr	r3, [r3, #12]
    50b4:	0092      	lsls	r2, r2, #2
    50b6:	189b      	adds	r3, r3, r2
    50b8:	681a      	ldr	r2, [r3, #0]
    50ba:	602a      	str	r2, [r5, #0]
    50bc:	601d      	str	r5, [r3, #0]
    50be:	bd70      	pop	{r4, r5, r6, pc}

000050c0 <__multadd>:
    50c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    50c2:	001e      	movs	r6, r3
    50c4:	2314      	movs	r3, #20
    50c6:	469c      	mov	ip, r3
    50c8:	0007      	movs	r7, r0
    50ca:	000c      	movs	r4, r1
    50cc:	2000      	movs	r0, #0
    50ce:	690d      	ldr	r5, [r1, #16]
    50d0:	448c      	add	ip, r1
    50d2:	4663      	mov	r3, ip
    50d4:	8819      	ldrh	r1, [r3, #0]
    50d6:	681b      	ldr	r3, [r3, #0]
    50d8:	4351      	muls	r1, r2
    50da:	0c1b      	lsrs	r3, r3, #16
    50dc:	4353      	muls	r3, r2
    50de:	1989      	adds	r1, r1, r6
    50e0:	0c0e      	lsrs	r6, r1, #16
    50e2:	199b      	adds	r3, r3, r6
    50e4:	b289      	uxth	r1, r1
    50e6:	0c1e      	lsrs	r6, r3, #16
    50e8:	041b      	lsls	r3, r3, #16
    50ea:	185b      	adds	r3, r3, r1
    50ec:	4661      	mov	r1, ip
    50ee:	3001      	adds	r0, #1
    50f0:	c108      	stmia	r1!, {r3}
    50f2:	468c      	mov	ip, r1
    50f4:	4285      	cmp	r5, r0
    50f6:	dcec      	bgt.n	50d2 <__multadd+0x12>
    50f8:	2e00      	cmp	r6, #0
    50fa:	d01b      	beq.n	5134 <__multadd+0x74>
    50fc:	68a3      	ldr	r3, [r4, #8]
    50fe:	429d      	cmp	r5, r3
    5100:	db12      	blt.n	5128 <__multadd+0x68>
    5102:	6863      	ldr	r3, [r4, #4]
    5104:	0038      	movs	r0, r7
    5106:	1c59      	adds	r1, r3, #1
    5108:	f7ff ff89 	bl	501e <_Balloc>
    510c:	0021      	movs	r1, r4
    510e:	6923      	ldr	r3, [r4, #16]
    5110:	9001      	str	r0, [sp, #4]
    5112:	1c9a      	adds	r2, r3, #2
    5114:	0092      	lsls	r2, r2, #2
    5116:	310c      	adds	r1, #12
    5118:	300c      	adds	r0, #12
    511a:	f7fe f9a5 	bl	3468 <memcpy>
    511e:	0021      	movs	r1, r4
    5120:	0038      	movs	r0, r7
    5122:	f7ff ffb4 	bl	508e <_Bfree>
    5126:	9c01      	ldr	r4, [sp, #4]
    5128:	1d2b      	adds	r3, r5, #4
    512a:	009b      	lsls	r3, r3, #2
    512c:	18e3      	adds	r3, r4, r3
    512e:	3501      	adds	r5, #1
    5130:	605e      	str	r6, [r3, #4]
    5132:	6125      	str	r5, [r4, #16]
    5134:	0020      	movs	r0, r4
    5136:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00005138 <__hi0bits>:
    5138:	0003      	movs	r3, r0
    513a:	0c02      	lsrs	r2, r0, #16
    513c:	2000      	movs	r0, #0
    513e:	4282      	cmp	r2, r0
    5140:	d101      	bne.n	5146 <__hi0bits+0xe>
    5142:	041b      	lsls	r3, r3, #16
    5144:	3010      	adds	r0, #16
    5146:	0e1a      	lsrs	r2, r3, #24
    5148:	d101      	bne.n	514e <__hi0bits+0x16>
    514a:	3008      	adds	r0, #8
    514c:	021b      	lsls	r3, r3, #8
    514e:	0f1a      	lsrs	r2, r3, #28
    5150:	d101      	bne.n	5156 <__hi0bits+0x1e>
    5152:	3004      	adds	r0, #4
    5154:	011b      	lsls	r3, r3, #4
    5156:	0f9a      	lsrs	r2, r3, #30
    5158:	d101      	bne.n	515e <__hi0bits+0x26>
    515a:	3002      	adds	r0, #2
    515c:	009b      	lsls	r3, r3, #2
    515e:	2b00      	cmp	r3, #0
    5160:	db03      	blt.n	516a <__hi0bits+0x32>
    5162:	3001      	adds	r0, #1
    5164:	005b      	lsls	r3, r3, #1
    5166:	d400      	bmi.n	516a <__hi0bits+0x32>
    5168:	2020      	movs	r0, #32
    516a:	4770      	bx	lr

0000516c <__lo0bits>:
    516c:	2207      	movs	r2, #7
    516e:	6803      	ldr	r3, [r0, #0]
    5170:	b510      	push	{r4, lr}
    5172:	0001      	movs	r1, r0
    5174:	401a      	ands	r2, r3
    5176:	d00d      	beq.n	5194 <__lo0bits+0x28>
    5178:	2401      	movs	r4, #1
    517a:	2000      	movs	r0, #0
    517c:	4223      	tst	r3, r4
    517e:	d105      	bne.n	518c <__lo0bits+0x20>
    5180:	3002      	adds	r0, #2
    5182:	4203      	tst	r3, r0
    5184:	d003      	beq.n	518e <__lo0bits+0x22>
    5186:	40e3      	lsrs	r3, r4
    5188:	0020      	movs	r0, r4
    518a:	600b      	str	r3, [r1, #0]
    518c:	bd10      	pop	{r4, pc}
    518e:	089b      	lsrs	r3, r3, #2
    5190:	600b      	str	r3, [r1, #0]
    5192:	e7fb      	b.n	518c <__lo0bits+0x20>
    5194:	b29c      	uxth	r4, r3
    5196:	0010      	movs	r0, r2
    5198:	2c00      	cmp	r4, #0
    519a:	d101      	bne.n	51a0 <__lo0bits+0x34>
    519c:	2010      	movs	r0, #16
    519e:	0c1b      	lsrs	r3, r3, #16
    51a0:	b2da      	uxtb	r2, r3
    51a2:	2a00      	cmp	r2, #0
    51a4:	d101      	bne.n	51aa <__lo0bits+0x3e>
    51a6:	3008      	adds	r0, #8
    51a8:	0a1b      	lsrs	r3, r3, #8
    51aa:	071a      	lsls	r2, r3, #28
    51ac:	d101      	bne.n	51b2 <__lo0bits+0x46>
    51ae:	3004      	adds	r0, #4
    51b0:	091b      	lsrs	r3, r3, #4
    51b2:	079a      	lsls	r2, r3, #30
    51b4:	d101      	bne.n	51ba <__lo0bits+0x4e>
    51b6:	3002      	adds	r0, #2
    51b8:	089b      	lsrs	r3, r3, #2
    51ba:	07da      	lsls	r2, r3, #31
    51bc:	d4e8      	bmi.n	5190 <__lo0bits+0x24>
    51be:	085b      	lsrs	r3, r3, #1
    51c0:	d001      	beq.n	51c6 <__lo0bits+0x5a>
    51c2:	3001      	adds	r0, #1
    51c4:	e7e4      	b.n	5190 <__lo0bits+0x24>
    51c6:	2020      	movs	r0, #32
    51c8:	e7e0      	b.n	518c <__lo0bits+0x20>

000051ca <__i2b>:
    51ca:	b510      	push	{r4, lr}
    51cc:	000c      	movs	r4, r1
    51ce:	2101      	movs	r1, #1
    51d0:	f7ff ff25 	bl	501e <_Balloc>
    51d4:	2301      	movs	r3, #1
    51d6:	6144      	str	r4, [r0, #20]
    51d8:	6103      	str	r3, [r0, #16]
    51da:	bd10      	pop	{r4, pc}

000051dc <__multiply>:
    51dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    51de:	690b      	ldr	r3, [r1, #16]
    51e0:	0015      	movs	r5, r2
    51e2:	6912      	ldr	r2, [r2, #16]
    51e4:	b089      	sub	sp, #36	; 0x24
    51e6:	000c      	movs	r4, r1
    51e8:	4293      	cmp	r3, r2
    51ea:	da01      	bge.n	51f0 <__multiply+0x14>
    51ec:	002c      	movs	r4, r5
    51ee:	000d      	movs	r5, r1
    51f0:	6927      	ldr	r7, [r4, #16]
    51f2:	692e      	ldr	r6, [r5, #16]
    51f4:	68a2      	ldr	r2, [r4, #8]
    51f6:	19bb      	adds	r3, r7, r6
    51f8:	6861      	ldr	r1, [r4, #4]
    51fa:	9301      	str	r3, [sp, #4]
    51fc:	4293      	cmp	r3, r2
    51fe:	dd00      	ble.n	5202 <__multiply+0x26>
    5200:	3101      	adds	r1, #1
    5202:	f7ff ff0c 	bl	501e <_Balloc>
    5206:	0003      	movs	r3, r0
    5208:	3314      	adds	r3, #20
    520a:	9300      	str	r3, [sp, #0]
    520c:	9a00      	ldr	r2, [sp, #0]
    520e:	19bb      	adds	r3, r7, r6
    5210:	4694      	mov	ip, r2
    5212:	009b      	lsls	r3, r3, #2
    5214:	449c      	add	ip, r3
    5216:	0013      	movs	r3, r2
    5218:	2200      	movs	r2, #0
    521a:	9004      	str	r0, [sp, #16]
    521c:	4563      	cmp	r3, ip
    521e:	d31c      	bcc.n	525a <__multiply+0x7e>
    5220:	002a      	movs	r2, r5
    5222:	3414      	adds	r4, #20
    5224:	00bf      	lsls	r7, r7, #2
    5226:	19e3      	adds	r3, r4, r7
    5228:	3214      	adds	r2, #20
    522a:	00b6      	lsls	r6, r6, #2
    522c:	9305      	str	r3, [sp, #20]
    522e:	1993      	adds	r3, r2, r6
    5230:	9402      	str	r4, [sp, #8]
    5232:	9306      	str	r3, [sp, #24]
    5234:	9b06      	ldr	r3, [sp, #24]
    5236:	429a      	cmp	r2, r3
    5238:	d311      	bcc.n	525e <__multiply+0x82>
    523a:	9b01      	ldr	r3, [sp, #4]
    523c:	2b00      	cmp	r3, #0
    523e:	dd06      	ble.n	524e <__multiply+0x72>
    5240:	2304      	movs	r3, #4
    5242:	425b      	negs	r3, r3
    5244:	449c      	add	ip, r3
    5246:	4663      	mov	r3, ip
    5248:	681b      	ldr	r3, [r3, #0]
    524a:	2b00      	cmp	r3, #0
    524c:	d051      	beq.n	52f2 <__multiply+0x116>
    524e:	9b04      	ldr	r3, [sp, #16]
    5250:	9a01      	ldr	r2, [sp, #4]
    5252:	0018      	movs	r0, r3
    5254:	611a      	str	r2, [r3, #16]
    5256:	b009      	add	sp, #36	; 0x24
    5258:	bdf0      	pop	{r4, r5, r6, r7, pc}
    525a:	c304      	stmia	r3!, {r2}
    525c:	e7de      	b.n	521c <__multiply+0x40>
    525e:	8814      	ldrh	r4, [r2, #0]
    5260:	2c00      	cmp	r4, #0
    5262:	d01e      	beq.n	52a2 <__multiply+0xc6>
    5264:	2600      	movs	r6, #0
    5266:	9d00      	ldr	r5, [sp, #0]
    5268:	9f02      	ldr	r7, [sp, #8]
    526a:	cf01      	ldmia	r7!, {r0}
    526c:	9507      	str	r5, [sp, #28]
    526e:	cd08      	ldmia	r5!, {r3}
    5270:	9303      	str	r3, [sp, #12]
    5272:	b283      	uxth	r3, r0
    5274:	4363      	muls	r3, r4
    5276:	0019      	movs	r1, r3
    5278:	466b      	mov	r3, sp
    527a:	0c00      	lsrs	r0, r0, #16
    527c:	899b      	ldrh	r3, [r3, #12]
    527e:	4360      	muls	r0, r4
    5280:	18cb      	adds	r3, r1, r3
    5282:	9903      	ldr	r1, [sp, #12]
    5284:	199b      	adds	r3, r3, r6
    5286:	0c09      	lsrs	r1, r1, #16
    5288:	1841      	adds	r1, r0, r1
    528a:	0c18      	lsrs	r0, r3, #16
    528c:	1809      	adds	r1, r1, r0
    528e:	0c0e      	lsrs	r6, r1, #16
    5290:	b29b      	uxth	r3, r3
    5292:	0409      	lsls	r1, r1, #16
    5294:	430b      	orrs	r3, r1
    5296:	9907      	ldr	r1, [sp, #28]
    5298:	600b      	str	r3, [r1, #0]
    529a:	9b05      	ldr	r3, [sp, #20]
    529c:	42bb      	cmp	r3, r7
    529e:	d8e4      	bhi.n	526a <__multiply+0x8e>
    52a0:	602e      	str	r6, [r5, #0]
    52a2:	6813      	ldr	r3, [r2, #0]
    52a4:	0c1b      	lsrs	r3, r3, #16
    52a6:	9303      	str	r3, [sp, #12]
    52a8:	d01e      	beq.n	52e8 <__multiply+0x10c>
    52aa:	2600      	movs	r6, #0
    52ac:	9b00      	ldr	r3, [sp, #0]
    52ae:	9c02      	ldr	r4, [sp, #8]
    52b0:	681b      	ldr	r3, [r3, #0]
    52b2:	9800      	ldr	r0, [sp, #0]
    52b4:	0007      	movs	r7, r0
    52b6:	8821      	ldrh	r1, [r4, #0]
    52b8:	9d03      	ldr	r5, [sp, #12]
    52ba:	b29b      	uxth	r3, r3
    52bc:	4369      	muls	r1, r5
    52be:	c820      	ldmia	r0!, {r5}
    52c0:	0c2d      	lsrs	r5, r5, #16
    52c2:	1949      	adds	r1, r1, r5
    52c4:	198e      	adds	r6, r1, r6
    52c6:	0431      	lsls	r1, r6, #16
    52c8:	430b      	orrs	r3, r1
    52ca:	603b      	str	r3, [r7, #0]
    52cc:	cc08      	ldmia	r4!, {r3}
    52ce:	9903      	ldr	r1, [sp, #12]
    52d0:	0c1b      	lsrs	r3, r3, #16
    52d2:	434b      	muls	r3, r1
    52d4:	6879      	ldr	r1, [r7, #4]
    52d6:	0c36      	lsrs	r6, r6, #16
    52d8:	b289      	uxth	r1, r1
    52da:	185b      	adds	r3, r3, r1
    52dc:	9905      	ldr	r1, [sp, #20]
    52de:	199b      	adds	r3, r3, r6
    52e0:	0c1e      	lsrs	r6, r3, #16
    52e2:	42a1      	cmp	r1, r4
    52e4:	d8e6      	bhi.n	52b4 <__multiply+0xd8>
    52e6:	6003      	str	r3, [r0, #0]
    52e8:	9b00      	ldr	r3, [sp, #0]
    52ea:	3204      	adds	r2, #4
    52ec:	3304      	adds	r3, #4
    52ee:	9300      	str	r3, [sp, #0]
    52f0:	e7a0      	b.n	5234 <__multiply+0x58>
    52f2:	9b01      	ldr	r3, [sp, #4]
    52f4:	3b01      	subs	r3, #1
    52f6:	9301      	str	r3, [sp, #4]
    52f8:	e79f      	b.n	523a <__multiply+0x5e>
	...

000052fc <__pow5mult>:
    52fc:	2303      	movs	r3, #3
    52fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5300:	4013      	ands	r3, r2
    5302:	0005      	movs	r5, r0
    5304:	000e      	movs	r6, r1
    5306:	0014      	movs	r4, r2
    5308:	2b00      	cmp	r3, #0
    530a:	d008      	beq.n	531e <__pow5mult+0x22>
    530c:	4922      	ldr	r1, [pc, #136]	; (5398 <__pow5mult+0x9c>)
    530e:	3b01      	subs	r3, #1
    5310:	009a      	lsls	r2, r3, #2
    5312:	5852      	ldr	r2, [r2, r1]
    5314:	2300      	movs	r3, #0
    5316:	0031      	movs	r1, r6
    5318:	f7ff fed2 	bl	50c0 <__multadd>
    531c:	0006      	movs	r6, r0
    531e:	10a3      	asrs	r3, r4, #2
    5320:	9301      	str	r3, [sp, #4]
    5322:	d036      	beq.n	5392 <__pow5mult+0x96>
    5324:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    5326:	2c00      	cmp	r4, #0
    5328:	d107      	bne.n	533a <__pow5mult+0x3e>
    532a:	2010      	movs	r0, #16
    532c:	f7ff fe62 	bl	4ff4 <malloc>
    5330:	6268      	str	r0, [r5, #36]	; 0x24
    5332:	6044      	str	r4, [r0, #4]
    5334:	6084      	str	r4, [r0, #8]
    5336:	6004      	str	r4, [r0, #0]
    5338:	60c4      	str	r4, [r0, #12]
    533a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    533c:	68bc      	ldr	r4, [r7, #8]
    533e:	2c00      	cmp	r4, #0
    5340:	d107      	bne.n	5352 <__pow5mult+0x56>
    5342:	4916      	ldr	r1, [pc, #88]	; (539c <__pow5mult+0xa0>)
    5344:	0028      	movs	r0, r5
    5346:	f7ff ff40 	bl	51ca <__i2b>
    534a:	2300      	movs	r3, #0
    534c:	0004      	movs	r4, r0
    534e:	60b8      	str	r0, [r7, #8]
    5350:	6003      	str	r3, [r0, #0]
    5352:	2201      	movs	r2, #1
    5354:	9b01      	ldr	r3, [sp, #4]
    5356:	4213      	tst	r3, r2
    5358:	d00a      	beq.n	5370 <__pow5mult+0x74>
    535a:	0031      	movs	r1, r6
    535c:	0022      	movs	r2, r4
    535e:	0028      	movs	r0, r5
    5360:	f7ff ff3c 	bl	51dc <__multiply>
    5364:	0007      	movs	r7, r0
    5366:	0031      	movs	r1, r6
    5368:	0028      	movs	r0, r5
    536a:	f7ff fe90 	bl	508e <_Bfree>
    536e:	003e      	movs	r6, r7
    5370:	9b01      	ldr	r3, [sp, #4]
    5372:	105b      	asrs	r3, r3, #1
    5374:	9301      	str	r3, [sp, #4]
    5376:	d00c      	beq.n	5392 <__pow5mult+0x96>
    5378:	6820      	ldr	r0, [r4, #0]
    537a:	2800      	cmp	r0, #0
    537c:	d107      	bne.n	538e <__pow5mult+0x92>
    537e:	0022      	movs	r2, r4
    5380:	0021      	movs	r1, r4
    5382:	0028      	movs	r0, r5
    5384:	f7ff ff2a 	bl	51dc <__multiply>
    5388:	2300      	movs	r3, #0
    538a:	6020      	str	r0, [r4, #0]
    538c:	6003      	str	r3, [r0, #0]
    538e:	0004      	movs	r4, r0
    5390:	e7df      	b.n	5352 <__pow5mult+0x56>
    5392:	0030      	movs	r0, r6
    5394:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5396:	46c0      	nop			; (mov r8, r8)
    5398:	00008b38 	.word	0x00008b38
    539c:	00000271 	.word	0x00000271

000053a0 <__lshift>:
    53a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    53a2:	000d      	movs	r5, r1
    53a4:	0017      	movs	r7, r2
    53a6:	692b      	ldr	r3, [r5, #16]
    53a8:	1154      	asrs	r4, r2, #5
    53aa:	b085      	sub	sp, #20
    53ac:	18e3      	adds	r3, r4, r3
    53ae:	9302      	str	r3, [sp, #8]
    53b0:	3301      	adds	r3, #1
    53b2:	9301      	str	r3, [sp, #4]
    53b4:	6849      	ldr	r1, [r1, #4]
    53b6:	68ab      	ldr	r3, [r5, #8]
    53b8:	9003      	str	r0, [sp, #12]
    53ba:	9a01      	ldr	r2, [sp, #4]
    53bc:	4293      	cmp	r3, r2
    53be:	db34      	blt.n	542a <__lshift+0x8a>
    53c0:	9803      	ldr	r0, [sp, #12]
    53c2:	f7ff fe2c 	bl	501e <_Balloc>
    53c6:	2300      	movs	r3, #0
    53c8:	0002      	movs	r2, r0
    53ca:	0006      	movs	r6, r0
    53cc:	0019      	movs	r1, r3
    53ce:	3214      	adds	r2, #20
    53d0:	42a3      	cmp	r3, r4
    53d2:	db2d      	blt.n	5430 <__lshift+0x90>
    53d4:	43e3      	mvns	r3, r4
    53d6:	17db      	asrs	r3, r3, #31
    53d8:	401c      	ands	r4, r3
    53da:	002b      	movs	r3, r5
    53dc:	211f      	movs	r1, #31
    53de:	00a4      	lsls	r4, r4, #2
    53e0:	1914      	adds	r4, r2, r4
    53e2:	692a      	ldr	r2, [r5, #16]
    53e4:	3314      	adds	r3, #20
    53e6:	0092      	lsls	r2, r2, #2
    53e8:	189a      	adds	r2, r3, r2
    53ea:	400f      	ands	r7, r1
    53ec:	d024      	beq.n	5438 <__lshift+0x98>
    53ee:	3101      	adds	r1, #1
    53f0:	1bc9      	subs	r1, r1, r7
    53f2:	468c      	mov	ip, r1
    53f4:	2100      	movs	r1, #0
    53f6:	6818      	ldr	r0, [r3, #0]
    53f8:	40b8      	lsls	r0, r7
    53fa:	4301      	orrs	r1, r0
    53fc:	4660      	mov	r0, ip
    53fe:	6021      	str	r1, [r4, #0]
    5400:	cb02      	ldmia	r3!, {r1}
    5402:	3404      	adds	r4, #4
    5404:	40c1      	lsrs	r1, r0
    5406:	429a      	cmp	r2, r3
    5408:	d8f5      	bhi.n	53f6 <__lshift+0x56>
    540a:	6021      	str	r1, [r4, #0]
    540c:	2900      	cmp	r1, #0
    540e:	d002      	beq.n	5416 <__lshift+0x76>
    5410:	9b02      	ldr	r3, [sp, #8]
    5412:	3302      	adds	r3, #2
    5414:	9301      	str	r3, [sp, #4]
    5416:	9b01      	ldr	r3, [sp, #4]
    5418:	9803      	ldr	r0, [sp, #12]
    541a:	3b01      	subs	r3, #1
    541c:	6133      	str	r3, [r6, #16]
    541e:	0029      	movs	r1, r5
    5420:	f7ff fe35 	bl	508e <_Bfree>
    5424:	0030      	movs	r0, r6
    5426:	b005      	add	sp, #20
    5428:	bdf0      	pop	{r4, r5, r6, r7, pc}
    542a:	3101      	adds	r1, #1
    542c:	005b      	lsls	r3, r3, #1
    542e:	e7c4      	b.n	53ba <__lshift+0x1a>
    5430:	0098      	lsls	r0, r3, #2
    5432:	5011      	str	r1, [r2, r0]
    5434:	3301      	adds	r3, #1
    5436:	e7cb      	b.n	53d0 <__lshift+0x30>
    5438:	cb02      	ldmia	r3!, {r1}
    543a:	c402      	stmia	r4!, {r1}
    543c:	429a      	cmp	r2, r3
    543e:	d8fb      	bhi.n	5438 <__lshift+0x98>
    5440:	e7e9      	b.n	5416 <__lshift+0x76>

00005442 <__mcmp>:
    5442:	690a      	ldr	r2, [r1, #16]
    5444:	6903      	ldr	r3, [r0, #16]
    5446:	b530      	push	{r4, r5, lr}
    5448:	1a9b      	subs	r3, r3, r2
    544a:	d10e      	bne.n	546a <__mcmp+0x28>
    544c:	0092      	lsls	r2, r2, #2
    544e:	3014      	adds	r0, #20
    5450:	3114      	adds	r1, #20
    5452:	1884      	adds	r4, r0, r2
    5454:	1889      	adds	r1, r1, r2
    5456:	3c04      	subs	r4, #4
    5458:	3904      	subs	r1, #4
    545a:	6822      	ldr	r2, [r4, #0]
    545c:	680d      	ldr	r5, [r1, #0]
    545e:	42aa      	cmp	r2, r5
    5460:	d005      	beq.n	546e <__mcmp+0x2c>
    5462:	42aa      	cmp	r2, r5
    5464:	4192      	sbcs	r2, r2
    5466:	2301      	movs	r3, #1
    5468:	4313      	orrs	r3, r2
    546a:	0018      	movs	r0, r3
    546c:	bd30      	pop	{r4, r5, pc}
    546e:	42a0      	cmp	r0, r4
    5470:	d3f1      	bcc.n	5456 <__mcmp+0x14>
    5472:	e7fa      	b.n	546a <__mcmp+0x28>

00005474 <__mdiff>:
    5474:	b5f0      	push	{r4, r5, r6, r7, lr}
    5476:	000d      	movs	r5, r1
    5478:	b085      	sub	sp, #20
    547a:	0007      	movs	r7, r0
    547c:	0011      	movs	r1, r2
    547e:	0028      	movs	r0, r5
    5480:	0014      	movs	r4, r2
    5482:	f7ff ffde 	bl	5442 <__mcmp>
    5486:	1e06      	subs	r6, r0, #0
    5488:	d108      	bne.n	549c <__mdiff+0x28>
    548a:	0001      	movs	r1, r0
    548c:	0038      	movs	r0, r7
    548e:	f7ff fdc6 	bl	501e <_Balloc>
    5492:	2301      	movs	r3, #1
    5494:	6146      	str	r6, [r0, #20]
    5496:	6103      	str	r3, [r0, #16]
    5498:	b005      	add	sp, #20
    549a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    549c:	2301      	movs	r3, #1
    549e:	9301      	str	r3, [sp, #4]
    54a0:	2800      	cmp	r0, #0
    54a2:	db04      	blt.n	54ae <__mdiff+0x3a>
    54a4:	0023      	movs	r3, r4
    54a6:	002c      	movs	r4, r5
    54a8:	001d      	movs	r5, r3
    54aa:	2300      	movs	r3, #0
    54ac:	9301      	str	r3, [sp, #4]
    54ae:	6861      	ldr	r1, [r4, #4]
    54b0:	0038      	movs	r0, r7
    54b2:	f7ff fdb4 	bl	501e <_Balloc>
    54b6:	002f      	movs	r7, r5
    54b8:	2200      	movs	r2, #0
    54ba:	9b01      	ldr	r3, [sp, #4]
    54bc:	6926      	ldr	r6, [r4, #16]
    54be:	60c3      	str	r3, [r0, #12]
    54c0:	3414      	adds	r4, #20
    54c2:	00b3      	lsls	r3, r6, #2
    54c4:	18e3      	adds	r3, r4, r3
    54c6:	9302      	str	r3, [sp, #8]
    54c8:	692b      	ldr	r3, [r5, #16]
    54ca:	3714      	adds	r7, #20
    54cc:	009b      	lsls	r3, r3, #2
    54ce:	18fb      	adds	r3, r7, r3
    54d0:	9303      	str	r3, [sp, #12]
    54d2:	0003      	movs	r3, r0
    54d4:	4694      	mov	ip, r2
    54d6:	3314      	adds	r3, #20
    54d8:	cc20      	ldmia	r4!, {r5}
    54da:	cf04      	ldmia	r7!, {r2}
    54dc:	9201      	str	r2, [sp, #4]
    54de:	b2aa      	uxth	r2, r5
    54e0:	4494      	add	ip, r2
    54e2:	466a      	mov	r2, sp
    54e4:	4661      	mov	r1, ip
    54e6:	8892      	ldrh	r2, [r2, #4]
    54e8:	0c2d      	lsrs	r5, r5, #16
    54ea:	1a8a      	subs	r2, r1, r2
    54ec:	9901      	ldr	r1, [sp, #4]
    54ee:	0c09      	lsrs	r1, r1, #16
    54f0:	1a69      	subs	r1, r5, r1
    54f2:	1415      	asrs	r5, r2, #16
    54f4:	1949      	adds	r1, r1, r5
    54f6:	140d      	asrs	r5, r1, #16
    54f8:	b292      	uxth	r2, r2
    54fa:	0409      	lsls	r1, r1, #16
    54fc:	430a      	orrs	r2, r1
    54fe:	601a      	str	r2, [r3, #0]
    5500:	9a03      	ldr	r2, [sp, #12]
    5502:	46ac      	mov	ip, r5
    5504:	3304      	adds	r3, #4
    5506:	42ba      	cmp	r2, r7
    5508:	d8e6      	bhi.n	54d8 <__mdiff+0x64>
    550a:	9902      	ldr	r1, [sp, #8]
    550c:	001a      	movs	r2, r3
    550e:	428c      	cmp	r4, r1
    5510:	d305      	bcc.n	551e <__mdiff+0xaa>
    5512:	3a04      	subs	r2, #4
    5514:	6813      	ldr	r3, [r2, #0]
    5516:	2b00      	cmp	r3, #0
    5518:	d00e      	beq.n	5538 <__mdiff+0xc4>
    551a:	6106      	str	r6, [r0, #16]
    551c:	e7bc      	b.n	5498 <__mdiff+0x24>
    551e:	cc04      	ldmia	r4!, {r2}
    5520:	b291      	uxth	r1, r2
    5522:	4461      	add	r1, ip
    5524:	140d      	asrs	r5, r1, #16
    5526:	0c12      	lsrs	r2, r2, #16
    5528:	1952      	adds	r2, r2, r5
    552a:	1415      	asrs	r5, r2, #16
    552c:	b289      	uxth	r1, r1
    552e:	0412      	lsls	r2, r2, #16
    5530:	430a      	orrs	r2, r1
    5532:	46ac      	mov	ip, r5
    5534:	c304      	stmia	r3!, {r2}
    5536:	e7e8      	b.n	550a <__mdiff+0x96>
    5538:	3e01      	subs	r6, #1
    553a:	e7ea      	b.n	5512 <__mdiff+0x9e>

0000553c <__d2b>:
    553c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    553e:	001d      	movs	r5, r3
    5540:	2101      	movs	r1, #1
    5542:	9f08      	ldr	r7, [sp, #32]
    5544:	0014      	movs	r4, r2
    5546:	f7ff fd6a 	bl	501e <_Balloc>
    554a:	032b      	lsls	r3, r5, #12
    554c:	006d      	lsls	r5, r5, #1
    554e:	0006      	movs	r6, r0
    5550:	0b1b      	lsrs	r3, r3, #12
    5552:	0d6d      	lsrs	r5, r5, #21
    5554:	d124      	bne.n	55a0 <__d2b+0x64>
    5556:	9301      	str	r3, [sp, #4]
    5558:	2c00      	cmp	r4, #0
    555a:	d027      	beq.n	55ac <__d2b+0x70>
    555c:	4668      	mov	r0, sp
    555e:	9400      	str	r4, [sp, #0]
    5560:	f7ff fe04 	bl	516c <__lo0bits>
    5564:	9c00      	ldr	r4, [sp, #0]
    5566:	2800      	cmp	r0, #0
    5568:	d01e      	beq.n	55a8 <__d2b+0x6c>
    556a:	9b01      	ldr	r3, [sp, #4]
    556c:	2120      	movs	r1, #32
    556e:	001a      	movs	r2, r3
    5570:	1a09      	subs	r1, r1, r0
    5572:	408a      	lsls	r2, r1
    5574:	40c3      	lsrs	r3, r0
    5576:	4322      	orrs	r2, r4
    5578:	6172      	str	r2, [r6, #20]
    557a:	9301      	str	r3, [sp, #4]
    557c:	9c01      	ldr	r4, [sp, #4]
    557e:	61b4      	str	r4, [r6, #24]
    5580:	1e63      	subs	r3, r4, #1
    5582:	419c      	sbcs	r4, r3
    5584:	3401      	adds	r4, #1
    5586:	6134      	str	r4, [r6, #16]
    5588:	2d00      	cmp	r5, #0
    558a:	d018      	beq.n	55be <__d2b+0x82>
    558c:	4b12      	ldr	r3, [pc, #72]	; (55d8 <__d2b+0x9c>)
    558e:	18ed      	adds	r5, r5, r3
    5590:	2335      	movs	r3, #53	; 0x35
    5592:	182d      	adds	r5, r5, r0
    5594:	603d      	str	r5, [r7, #0]
    5596:	1a18      	subs	r0, r3, r0
    5598:	9b09      	ldr	r3, [sp, #36]	; 0x24
    559a:	6018      	str	r0, [r3, #0]
    559c:	0030      	movs	r0, r6
    559e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    55a0:	2280      	movs	r2, #128	; 0x80
    55a2:	0352      	lsls	r2, r2, #13
    55a4:	4313      	orrs	r3, r2
    55a6:	e7d6      	b.n	5556 <__d2b+0x1a>
    55a8:	6174      	str	r4, [r6, #20]
    55aa:	e7e7      	b.n	557c <__d2b+0x40>
    55ac:	a801      	add	r0, sp, #4
    55ae:	f7ff fddd 	bl	516c <__lo0bits>
    55b2:	2401      	movs	r4, #1
    55b4:	9b01      	ldr	r3, [sp, #4]
    55b6:	6134      	str	r4, [r6, #16]
    55b8:	6173      	str	r3, [r6, #20]
    55ba:	3020      	adds	r0, #32
    55bc:	e7e4      	b.n	5588 <__d2b+0x4c>
    55be:	4b07      	ldr	r3, [pc, #28]	; (55dc <__d2b+0xa0>)
    55c0:	18c0      	adds	r0, r0, r3
    55c2:	4b07      	ldr	r3, [pc, #28]	; (55e0 <__d2b+0xa4>)
    55c4:	6038      	str	r0, [r7, #0]
    55c6:	18e3      	adds	r3, r4, r3
    55c8:	009b      	lsls	r3, r3, #2
    55ca:	18f3      	adds	r3, r6, r3
    55cc:	6958      	ldr	r0, [r3, #20]
    55ce:	f7ff fdb3 	bl	5138 <__hi0bits>
    55d2:	0164      	lsls	r4, r4, #5
    55d4:	1a20      	subs	r0, r4, r0
    55d6:	e7df      	b.n	5598 <__d2b+0x5c>
    55d8:	fffffbcd 	.word	0xfffffbcd
    55dc:	fffffbce 	.word	0xfffffbce
    55e0:	3fffffff 	.word	0x3fffffff

000055e4 <_calloc_r>:
    55e4:	434a      	muls	r2, r1
    55e6:	b570      	push	{r4, r5, r6, lr}
    55e8:	0011      	movs	r1, r2
    55ea:	0014      	movs	r4, r2
    55ec:	f000 f852 	bl	5694 <_malloc_r>
    55f0:	1e05      	subs	r5, r0, #0
    55f2:	d003      	beq.n	55fc <_calloc_r+0x18>
    55f4:	0022      	movs	r2, r4
    55f6:	2100      	movs	r1, #0
    55f8:	f7fd ff3f 	bl	347a <memset>
    55fc:	0028      	movs	r0, r5
    55fe:	bd70      	pop	{r4, r5, r6, pc}

00005600 <_free_r>:
    5600:	b570      	push	{r4, r5, r6, lr}
    5602:	0005      	movs	r5, r0
    5604:	2900      	cmp	r1, #0
    5606:	d010      	beq.n	562a <_free_r+0x2a>
    5608:	1f0c      	subs	r4, r1, #4
    560a:	6823      	ldr	r3, [r4, #0]
    560c:	2b00      	cmp	r3, #0
    560e:	da00      	bge.n	5612 <_free_r+0x12>
    5610:	18e4      	adds	r4, r4, r3
    5612:	0028      	movs	r0, r5
    5614:	f000 fb7a 	bl	5d0c <__malloc_lock>
    5618:	4a1d      	ldr	r2, [pc, #116]	; (5690 <_free_r+0x90>)
    561a:	6813      	ldr	r3, [r2, #0]
    561c:	2b00      	cmp	r3, #0
    561e:	d105      	bne.n	562c <_free_r+0x2c>
    5620:	6063      	str	r3, [r4, #4]
    5622:	6014      	str	r4, [r2, #0]
    5624:	0028      	movs	r0, r5
    5626:	f000 fb72 	bl	5d0e <__malloc_unlock>
    562a:	bd70      	pop	{r4, r5, r6, pc}
    562c:	42a3      	cmp	r3, r4
    562e:	d909      	bls.n	5644 <_free_r+0x44>
    5630:	6821      	ldr	r1, [r4, #0]
    5632:	1860      	adds	r0, r4, r1
    5634:	4283      	cmp	r3, r0
    5636:	d1f3      	bne.n	5620 <_free_r+0x20>
    5638:	6818      	ldr	r0, [r3, #0]
    563a:	685b      	ldr	r3, [r3, #4]
    563c:	1841      	adds	r1, r0, r1
    563e:	6021      	str	r1, [r4, #0]
    5640:	e7ee      	b.n	5620 <_free_r+0x20>
    5642:	0013      	movs	r3, r2
    5644:	685a      	ldr	r2, [r3, #4]
    5646:	2a00      	cmp	r2, #0
    5648:	d001      	beq.n	564e <_free_r+0x4e>
    564a:	42a2      	cmp	r2, r4
    564c:	d9f9      	bls.n	5642 <_free_r+0x42>
    564e:	6819      	ldr	r1, [r3, #0]
    5650:	1858      	adds	r0, r3, r1
    5652:	42a0      	cmp	r0, r4
    5654:	d10b      	bne.n	566e <_free_r+0x6e>
    5656:	6820      	ldr	r0, [r4, #0]
    5658:	1809      	adds	r1, r1, r0
    565a:	1858      	adds	r0, r3, r1
    565c:	6019      	str	r1, [r3, #0]
    565e:	4282      	cmp	r2, r0
    5660:	d1e0      	bne.n	5624 <_free_r+0x24>
    5662:	6810      	ldr	r0, [r2, #0]
    5664:	6852      	ldr	r2, [r2, #4]
    5666:	1841      	adds	r1, r0, r1
    5668:	6019      	str	r1, [r3, #0]
    566a:	605a      	str	r2, [r3, #4]
    566c:	e7da      	b.n	5624 <_free_r+0x24>
    566e:	42a0      	cmp	r0, r4
    5670:	d902      	bls.n	5678 <_free_r+0x78>
    5672:	230c      	movs	r3, #12
    5674:	602b      	str	r3, [r5, #0]
    5676:	e7d5      	b.n	5624 <_free_r+0x24>
    5678:	6821      	ldr	r1, [r4, #0]
    567a:	1860      	adds	r0, r4, r1
    567c:	4282      	cmp	r2, r0
    567e:	d103      	bne.n	5688 <_free_r+0x88>
    5680:	6810      	ldr	r0, [r2, #0]
    5682:	6852      	ldr	r2, [r2, #4]
    5684:	1841      	adds	r1, r0, r1
    5686:	6021      	str	r1, [r4, #0]
    5688:	6062      	str	r2, [r4, #4]
    568a:	605c      	str	r4, [r3, #4]
    568c:	e7ca      	b.n	5624 <_free_r+0x24>
    568e:	46c0      	nop			; (mov r8, r8)
    5690:	200007b4 	.word	0x200007b4

00005694 <_malloc_r>:
    5694:	2303      	movs	r3, #3
    5696:	b570      	push	{r4, r5, r6, lr}
    5698:	1ccd      	adds	r5, r1, #3
    569a:	439d      	bics	r5, r3
    569c:	3508      	adds	r5, #8
    569e:	0006      	movs	r6, r0
    56a0:	2d0c      	cmp	r5, #12
    56a2:	d21e      	bcs.n	56e2 <_malloc_r+0x4e>
    56a4:	250c      	movs	r5, #12
    56a6:	42a9      	cmp	r1, r5
    56a8:	d81d      	bhi.n	56e6 <_malloc_r+0x52>
    56aa:	0030      	movs	r0, r6
    56ac:	f000 fb2e 	bl	5d0c <__malloc_lock>
    56b0:	4a25      	ldr	r2, [pc, #148]	; (5748 <_malloc_r+0xb4>)
    56b2:	6814      	ldr	r4, [r2, #0]
    56b4:	0021      	movs	r1, r4
    56b6:	2900      	cmp	r1, #0
    56b8:	d119      	bne.n	56ee <_malloc_r+0x5a>
    56ba:	4c24      	ldr	r4, [pc, #144]	; (574c <_malloc_r+0xb8>)
    56bc:	6823      	ldr	r3, [r4, #0]
    56be:	2b00      	cmp	r3, #0
    56c0:	d103      	bne.n	56ca <_malloc_r+0x36>
    56c2:	0030      	movs	r0, r6
    56c4:	f000 f988 	bl	59d8 <_sbrk_r>
    56c8:	6020      	str	r0, [r4, #0]
    56ca:	0029      	movs	r1, r5
    56cc:	0030      	movs	r0, r6
    56ce:	f000 f983 	bl	59d8 <_sbrk_r>
    56d2:	1c43      	adds	r3, r0, #1
    56d4:	d12c      	bne.n	5730 <_malloc_r+0x9c>
    56d6:	230c      	movs	r3, #12
    56d8:	0030      	movs	r0, r6
    56da:	6033      	str	r3, [r6, #0]
    56dc:	f000 fb17 	bl	5d0e <__malloc_unlock>
    56e0:	e003      	b.n	56ea <_malloc_r+0x56>
    56e2:	2d00      	cmp	r5, #0
    56e4:	dadf      	bge.n	56a6 <_malloc_r+0x12>
    56e6:	230c      	movs	r3, #12
    56e8:	6033      	str	r3, [r6, #0]
    56ea:	2000      	movs	r0, #0
    56ec:	bd70      	pop	{r4, r5, r6, pc}
    56ee:	680b      	ldr	r3, [r1, #0]
    56f0:	1b5b      	subs	r3, r3, r5
    56f2:	d41a      	bmi.n	572a <_malloc_r+0x96>
    56f4:	2b0b      	cmp	r3, #11
    56f6:	d903      	bls.n	5700 <_malloc_r+0x6c>
    56f8:	600b      	str	r3, [r1, #0]
    56fa:	18cc      	adds	r4, r1, r3
    56fc:	6025      	str	r5, [r4, #0]
    56fe:	e003      	b.n	5708 <_malloc_r+0x74>
    5700:	428c      	cmp	r4, r1
    5702:	d10e      	bne.n	5722 <_malloc_r+0x8e>
    5704:	6863      	ldr	r3, [r4, #4]
    5706:	6013      	str	r3, [r2, #0]
    5708:	0030      	movs	r0, r6
    570a:	f000 fb00 	bl	5d0e <__malloc_unlock>
    570e:	0020      	movs	r0, r4
    5710:	2207      	movs	r2, #7
    5712:	300b      	adds	r0, #11
    5714:	1d23      	adds	r3, r4, #4
    5716:	4390      	bics	r0, r2
    5718:	1ac3      	subs	r3, r0, r3
    571a:	d0e7      	beq.n	56ec <_malloc_r+0x58>
    571c:	425a      	negs	r2, r3
    571e:	50e2      	str	r2, [r4, r3]
    5720:	e7e4      	b.n	56ec <_malloc_r+0x58>
    5722:	684b      	ldr	r3, [r1, #4]
    5724:	6063      	str	r3, [r4, #4]
    5726:	000c      	movs	r4, r1
    5728:	e7ee      	b.n	5708 <_malloc_r+0x74>
    572a:	000c      	movs	r4, r1
    572c:	6849      	ldr	r1, [r1, #4]
    572e:	e7c2      	b.n	56b6 <_malloc_r+0x22>
    5730:	2303      	movs	r3, #3
    5732:	1cc4      	adds	r4, r0, #3
    5734:	439c      	bics	r4, r3
    5736:	42a0      	cmp	r0, r4
    5738:	d0e0      	beq.n	56fc <_malloc_r+0x68>
    573a:	1a21      	subs	r1, r4, r0
    573c:	0030      	movs	r0, r6
    573e:	f000 f94b 	bl	59d8 <_sbrk_r>
    5742:	1c43      	adds	r3, r0, #1
    5744:	d1da      	bne.n	56fc <_malloc_r+0x68>
    5746:	e7c6      	b.n	56d6 <_malloc_r+0x42>
    5748:	200007b4 	.word	0x200007b4
    574c:	200007b8 	.word	0x200007b8

00005750 <__sfputc_r>:
    5750:	6893      	ldr	r3, [r2, #8]
    5752:	b510      	push	{r4, lr}
    5754:	3b01      	subs	r3, #1
    5756:	6093      	str	r3, [r2, #8]
    5758:	2b00      	cmp	r3, #0
    575a:	da05      	bge.n	5768 <__sfputc_r+0x18>
    575c:	6994      	ldr	r4, [r2, #24]
    575e:	42a3      	cmp	r3, r4
    5760:	db08      	blt.n	5774 <__sfputc_r+0x24>
    5762:	b2cb      	uxtb	r3, r1
    5764:	2b0a      	cmp	r3, #10
    5766:	d005      	beq.n	5774 <__sfputc_r+0x24>
    5768:	6813      	ldr	r3, [r2, #0]
    576a:	1c58      	adds	r0, r3, #1
    576c:	6010      	str	r0, [r2, #0]
    576e:	7019      	strb	r1, [r3, #0]
    5770:	b2c8      	uxtb	r0, r1
    5772:	bd10      	pop	{r4, pc}
    5774:	f000 f98e 	bl	5a94 <__swbuf_r>
    5778:	e7fb      	b.n	5772 <__sfputc_r+0x22>

0000577a <__sfputs_r>:
    577a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    577c:	0006      	movs	r6, r0
    577e:	000f      	movs	r7, r1
    5780:	0014      	movs	r4, r2
    5782:	18d5      	adds	r5, r2, r3
    5784:	42ac      	cmp	r4, r5
    5786:	d101      	bne.n	578c <__sfputs_r+0x12>
    5788:	2000      	movs	r0, #0
    578a:	e007      	b.n	579c <__sfputs_r+0x22>
    578c:	7821      	ldrb	r1, [r4, #0]
    578e:	003a      	movs	r2, r7
    5790:	0030      	movs	r0, r6
    5792:	f7ff ffdd 	bl	5750 <__sfputc_r>
    5796:	3401      	adds	r4, #1
    5798:	1c43      	adds	r3, r0, #1
    579a:	d1f3      	bne.n	5784 <__sfputs_r+0xa>
    579c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000057a0 <_vfiprintf_r>:
    57a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    57a2:	b09f      	sub	sp, #124	; 0x7c
    57a4:	0006      	movs	r6, r0
    57a6:	000f      	movs	r7, r1
    57a8:	0014      	movs	r4, r2
    57aa:	9305      	str	r3, [sp, #20]
    57ac:	2800      	cmp	r0, #0
    57ae:	d004      	beq.n	57ba <_vfiprintf_r+0x1a>
    57b0:	6983      	ldr	r3, [r0, #24]
    57b2:	2b00      	cmp	r3, #0
    57b4:	d101      	bne.n	57ba <_vfiprintf_r+0x1a>
    57b6:	f7ff fb15 	bl	4de4 <__sinit>
    57ba:	4b7f      	ldr	r3, [pc, #508]	; (59b8 <_vfiprintf_r+0x218>)
    57bc:	429f      	cmp	r7, r3
    57be:	d15c      	bne.n	587a <_vfiprintf_r+0xda>
    57c0:	6877      	ldr	r7, [r6, #4]
    57c2:	89bb      	ldrh	r3, [r7, #12]
    57c4:	071b      	lsls	r3, r3, #28
    57c6:	d562      	bpl.n	588e <_vfiprintf_r+0xee>
    57c8:	693b      	ldr	r3, [r7, #16]
    57ca:	2b00      	cmp	r3, #0
    57cc:	d05f      	beq.n	588e <_vfiprintf_r+0xee>
    57ce:	2300      	movs	r3, #0
    57d0:	ad06      	add	r5, sp, #24
    57d2:	616b      	str	r3, [r5, #20]
    57d4:	3320      	adds	r3, #32
    57d6:	766b      	strb	r3, [r5, #25]
    57d8:	3310      	adds	r3, #16
    57da:	76ab      	strb	r3, [r5, #26]
    57dc:	9402      	str	r4, [sp, #8]
    57de:	9c02      	ldr	r4, [sp, #8]
    57e0:	7823      	ldrb	r3, [r4, #0]
    57e2:	2b00      	cmp	r3, #0
    57e4:	d15d      	bne.n	58a2 <_vfiprintf_r+0x102>
    57e6:	9b02      	ldr	r3, [sp, #8]
    57e8:	1ae3      	subs	r3, r4, r3
    57ea:	9304      	str	r3, [sp, #16]
    57ec:	d00d      	beq.n	580a <_vfiprintf_r+0x6a>
    57ee:	9b04      	ldr	r3, [sp, #16]
    57f0:	9a02      	ldr	r2, [sp, #8]
    57f2:	0039      	movs	r1, r7
    57f4:	0030      	movs	r0, r6
    57f6:	f7ff ffc0 	bl	577a <__sfputs_r>
    57fa:	1c43      	adds	r3, r0, #1
    57fc:	d100      	bne.n	5800 <_vfiprintf_r+0x60>
    57fe:	e0cc      	b.n	599a <_vfiprintf_r+0x1fa>
    5800:	696a      	ldr	r2, [r5, #20]
    5802:	9b04      	ldr	r3, [sp, #16]
    5804:	4694      	mov	ip, r2
    5806:	4463      	add	r3, ip
    5808:	616b      	str	r3, [r5, #20]
    580a:	7823      	ldrb	r3, [r4, #0]
    580c:	2b00      	cmp	r3, #0
    580e:	d100      	bne.n	5812 <_vfiprintf_r+0x72>
    5810:	e0c3      	b.n	599a <_vfiprintf_r+0x1fa>
    5812:	2201      	movs	r2, #1
    5814:	2300      	movs	r3, #0
    5816:	4252      	negs	r2, r2
    5818:	606a      	str	r2, [r5, #4]
    581a:	a902      	add	r1, sp, #8
    581c:	3254      	adds	r2, #84	; 0x54
    581e:	1852      	adds	r2, r2, r1
    5820:	3401      	adds	r4, #1
    5822:	602b      	str	r3, [r5, #0]
    5824:	60eb      	str	r3, [r5, #12]
    5826:	60ab      	str	r3, [r5, #8]
    5828:	7013      	strb	r3, [r2, #0]
    582a:	65ab      	str	r3, [r5, #88]	; 0x58
    582c:	7821      	ldrb	r1, [r4, #0]
    582e:	2205      	movs	r2, #5
    5830:	4862      	ldr	r0, [pc, #392]	; (59bc <_vfiprintf_r+0x21c>)
    5832:	f7ff fbe9 	bl	5008 <memchr>
    5836:	1c63      	adds	r3, r4, #1
    5838:	469c      	mov	ip, r3
    583a:	2800      	cmp	r0, #0
    583c:	d135      	bne.n	58aa <_vfiprintf_r+0x10a>
    583e:	6829      	ldr	r1, [r5, #0]
    5840:	06cb      	lsls	r3, r1, #27
    5842:	d504      	bpl.n	584e <_vfiprintf_r+0xae>
    5844:	2353      	movs	r3, #83	; 0x53
    5846:	aa02      	add	r2, sp, #8
    5848:	3020      	adds	r0, #32
    584a:	189b      	adds	r3, r3, r2
    584c:	7018      	strb	r0, [r3, #0]
    584e:	070b      	lsls	r3, r1, #28
    5850:	d504      	bpl.n	585c <_vfiprintf_r+0xbc>
    5852:	2353      	movs	r3, #83	; 0x53
    5854:	202b      	movs	r0, #43	; 0x2b
    5856:	aa02      	add	r2, sp, #8
    5858:	189b      	adds	r3, r3, r2
    585a:	7018      	strb	r0, [r3, #0]
    585c:	7823      	ldrb	r3, [r4, #0]
    585e:	2b2a      	cmp	r3, #42	; 0x2a
    5860:	d02c      	beq.n	58bc <_vfiprintf_r+0x11c>
    5862:	2000      	movs	r0, #0
    5864:	210a      	movs	r1, #10
    5866:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5868:	7822      	ldrb	r2, [r4, #0]
    586a:	3a30      	subs	r2, #48	; 0x30
    586c:	2a09      	cmp	r2, #9
    586e:	d800      	bhi.n	5872 <_vfiprintf_r+0xd2>
    5870:	e06b      	b.n	594a <_vfiprintf_r+0x1aa>
    5872:	2800      	cmp	r0, #0
    5874:	d02a      	beq.n	58cc <_vfiprintf_r+0x12c>
    5876:	9309      	str	r3, [sp, #36]	; 0x24
    5878:	e028      	b.n	58cc <_vfiprintf_r+0x12c>
    587a:	4b51      	ldr	r3, [pc, #324]	; (59c0 <_vfiprintf_r+0x220>)
    587c:	429f      	cmp	r7, r3
    587e:	d101      	bne.n	5884 <_vfiprintf_r+0xe4>
    5880:	68b7      	ldr	r7, [r6, #8]
    5882:	e79e      	b.n	57c2 <_vfiprintf_r+0x22>
    5884:	4b4f      	ldr	r3, [pc, #316]	; (59c4 <_vfiprintf_r+0x224>)
    5886:	429f      	cmp	r7, r3
    5888:	d19b      	bne.n	57c2 <_vfiprintf_r+0x22>
    588a:	68f7      	ldr	r7, [r6, #12]
    588c:	e799      	b.n	57c2 <_vfiprintf_r+0x22>
    588e:	0039      	movs	r1, r7
    5890:	0030      	movs	r0, r6
    5892:	f000 f969 	bl	5b68 <__swsetup_r>
    5896:	2800      	cmp	r0, #0
    5898:	d099      	beq.n	57ce <_vfiprintf_r+0x2e>
    589a:	2001      	movs	r0, #1
    589c:	4240      	negs	r0, r0
    589e:	b01f      	add	sp, #124	; 0x7c
    58a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    58a2:	2b25      	cmp	r3, #37	; 0x25
    58a4:	d09f      	beq.n	57e6 <_vfiprintf_r+0x46>
    58a6:	3401      	adds	r4, #1
    58a8:	e79a      	b.n	57e0 <_vfiprintf_r+0x40>
    58aa:	4b44      	ldr	r3, [pc, #272]	; (59bc <_vfiprintf_r+0x21c>)
    58ac:	6829      	ldr	r1, [r5, #0]
    58ae:	1ac0      	subs	r0, r0, r3
    58b0:	2301      	movs	r3, #1
    58b2:	4083      	lsls	r3, r0
    58b4:	430b      	orrs	r3, r1
    58b6:	602b      	str	r3, [r5, #0]
    58b8:	4664      	mov	r4, ip
    58ba:	e7b7      	b.n	582c <_vfiprintf_r+0x8c>
    58bc:	9b05      	ldr	r3, [sp, #20]
    58be:	1d18      	adds	r0, r3, #4
    58c0:	681b      	ldr	r3, [r3, #0]
    58c2:	9005      	str	r0, [sp, #20]
    58c4:	2b00      	cmp	r3, #0
    58c6:	db3a      	blt.n	593e <_vfiprintf_r+0x19e>
    58c8:	9309      	str	r3, [sp, #36]	; 0x24
    58ca:	4664      	mov	r4, ip
    58cc:	7823      	ldrb	r3, [r4, #0]
    58ce:	2b2e      	cmp	r3, #46	; 0x2e
    58d0:	d10b      	bne.n	58ea <_vfiprintf_r+0x14a>
    58d2:	7863      	ldrb	r3, [r4, #1]
    58d4:	1c62      	adds	r2, r4, #1
    58d6:	2b2a      	cmp	r3, #42	; 0x2a
    58d8:	d13f      	bne.n	595a <_vfiprintf_r+0x1ba>
    58da:	9b05      	ldr	r3, [sp, #20]
    58dc:	3402      	adds	r4, #2
    58de:	1d1a      	adds	r2, r3, #4
    58e0:	681b      	ldr	r3, [r3, #0]
    58e2:	9205      	str	r2, [sp, #20]
    58e4:	2b00      	cmp	r3, #0
    58e6:	db35      	blt.n	5954 <_vfiprintf_r+0x1b4>
    58e8:	9307      	str	r3, [sp, #28]
    58ea:	7821      	ldrb	r1, [r4, #0]
    58ec:	2203      	movs	r2, #3
    58ee:	4836      	ldr	r0, [pc, #216]	; (59c8 <_vfiprintf_r+0x228>)
    58f0:	f7ff fb8a 	bl	5008 <memchr>
    58f4:	2800      	cmp	r0, #0
    58f6:	d007      	beq.n	5908 <_vfiprintf_r+0x168>
    58f8:	4b33      	ldr	r3, [pc, #204]	; (59c8 <_vfiprintf_r+0x228>)
    58fa:	682a      	ldr	r2, [r5, #0]
    58fc:	1ac0      	subs	r0, r0, r3
    58fe:	2340      	movs	r3, #64	; 0x40
    5900:	4083      	lsls	r3, r0
    5902:	4313      	orrs	r3, r2
    5904:	602b      	str	r3, [r5, #0]
    5906:	3401      	adds	r4, #1
    5908:	7821      	ldrb	r1, [r4, #0]
    590a:	1c63      	adds	r3, r4, #1
    590c:	2206      	movs	r2, #6
    590e:	482f      	ldr	r0, [pc, #188]	; (59cc <_vfiprintf_r+0x22c>)
    5910:	9302      	str	r3, [sp, #8]
    5912:	7629      	strb	r1, [r5, #24]
    5914:	f7ff fb78 	bl	5008 <memchr>
    5918:	2800      	cmp	r0, #0
    591a:	d044      	beq.n	59a6 <_vfiprintf_r+0x206>
    591c:	4b2c      	ldr	r3, [pc, #176]	; (59d0 <_vfiprintf_r+0x230>)
    591e:	2b00      	cmp	r3, #0
    5920:	d12f      	bne.n	5982 <_vfiprintf_r+0x1e2>
    5922:	6829      	ldr	r1, [r5, #0]
    5924:	9b05      	ldr	r3, [sp, #20]
    5926:	2207      	movs	r2, #7
    5928:	05c9      	lsls	r1, r1, #23
    592a:	d528      	bpl.n	597e <_vfiprintf_r+0x1de>
    592c:	189b      	adds	r3, r3, r2
    592e:	4393      	bics	r3, r2
    5930:	3308      	adds	r3, #8
    5932:	9305      	str	r3, [sp, #20]
    5934:	696b      	ldr	r3, [r5, #20]
    5936:	9a03      	ldr	r2, [sp, #12]
    5938:	189b      	adds	r3, r3, r2
    593a:	616b      	str	r3, [r5, #20]
    593c:	e74f      	b.n	57de <_vfiprintf_r+0x3e>
    593e:	425b      	negs	r3, r3
    5940:	60eb      	str	r3, [r5, #12]
    5942:	2302      	movs	r3, #2
    5944:	430b      	orrs	r3, r1
    5946:	602b      	str	r3, [r5, #0]
    5948:	e7bf      	b.n	58ca <_vfiprintf_r+0x12a>
    594a:	434b      	muls	r3, r1
    594c:	3401      	adds	r4, #1
    594e:	189b      	adds	r3, r3, r2
    5950:	2001      	movs	r0, #1
    5952:	e789      	b.n	5868 <_vfiprintf_r+0xc8>
    5954:	2301      	movs	r3, #1
    5956:	425b      	negs	r3, r3
    5958:	e7c6      	b.n	58e8 <_vfiprintf_r+0x148>
    595a:	2300      	movs	r3, #0
    595c:	0014      	movs	r4, r2
    595e:	200a      	movs	r0, #10
    5960:	001a      	movs	r2, r3
    5962:	606b      	str	r3, [r5, #4]
    5964:	7821      	ldrb	r1, [r4, #0]
    5966:	3930      	subs	r1, #48	; 0x30
    5968:	2909      	cmp	r1, #9
    596a:	d903      	bls.n	5974 <_vfiprintf_r+0x1d4>
    596c:	2b00      	cmp	r3, #0
    596e:	d0bc      	beq.n	58ea <_vfiprintf_r+0x14a>
    5970:	9207      	str	r2, [sp, #28]
    5972:	e7ba      	b.n	58ea <_vfiprintf_r+0x14a>
    5974:	4342      	muls	r2, r0
    5976:	3401      	adds	r4, #1
    5978:	1852      	adds	r2, r2, r1
    597a:	2301      	movs	r3, #1
    597c:	e7f2      	b.n	5964 <_vfiprintf_r+0x1c4>
    597e:	3307      	adds	r3, #7
    5980:	e7d5      	b.n	592e <_vfiprintf_r+0x18e>
    5982:	ab05      	add	r3, sp, #20
    5984:	9300      	str	r3, [sp, #0]
    5986:	003a      	movs	r2, r7
    5988:	4b12      	ldr	r3, [pc, #72]	; (59d4 <_vfiprintf_r+0x234>)
    598a:	0029      	movs	r1, r5
    598c:	0030      	movs	r0, r6
    598e:	f7fd fe19 	bl	35c4 <_printf_float>
    5992:	9003      	str	r0, [sp, #12]
    5994:	9b03      	ldr	r3, [sp, #12]
    5996:	3301      	adds	r3, #1
    5998:	d1cc      	bne.n	5934 <_vfiprintf_r+0x194>
    599a:	89bb      	ldrh	r3, [r7, #12]
    599c:	065b      	lsls	r3, r3, #25
    599e:	d500      	bpl.n	59a2 <_vfiprintf_r+0x202>
    59a0:	e77b      	b.n	589a <_vfiprintf_r+0xfa>
    59a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    59a4:	e77b      	b.n	589e <_vfiprintf_r+0xfe>
    59a6:	ab05      	add	r3, sp, #20
    59a8:	9300      	str	r3, [sp, #0]
    59aa:	003a      	movs	r2, r7
    59ac:	4b09      	ldr	r3, [pc, #36]	; (59d4 <_vfiprintf_r+0x234>)
    59ae:	0029      	movs	r1, r5
    59b0:	0030      	movs	r0, r6
    59b2:	f7fe f8c1 	bl	3b38 <_printf_i>
    59b6:	e7ec      	b.n	5992 <_vfiprintf_r+0x1f2>
    59b8:	00008a08 	.word	0x00008a08
    59bc:	00008b44 	.word	0x00008b44
    59c0:	00008a28 	.word	0x00008a28
    59c4:	000089e8 	.word	0x000089e8
    59c8:	00008b4a 	.word	0x00008b4a
    59cc:	00008b4e 	.word	0x00008b4e
    59d0:	000035c5 	.word	0x000035c5
    59d4:	0000577b 	.word	0x0000577b

000059d8 <_sbrk_r>:
    59d8:	2300      	movs	r3, #0
    59da:	b570      	push	{r4, r5, r6, lr}
    59dc:	4c06      	ldr	r4, [pc, #24]	; (59f8 <_sbrk_r+0x20>)
    59de:	0005      	movs	r5, r0
    59e0:	0008      	movs	r0, r1
    59e2:	6023      	str	r3, [r4, #0]
    59e4:	f7fc ff44 	bl	2870 <_sbrk>
    59e8:	1c43      	adds	r3, r0, #1
    59ea:	d103      	bne.n	59f4 <_sbrk_r+0x1c>
    59ec:	6823      	ldr	r3, [r4, #0]
    59ee:	2b00      	cmp	r3, #0
    59f0:	d000      	beq.n	59f4 <_sbrk_r+0x1c>
    59f2:	602b      	str	r3, [r5, #0]
    59f4:	bd70      	pop	{r4, r5, r6, pc}
    59f6:	46c0      	nop			; (mov r8, r8)
    59f8:	20000a24 	.word	0x20000a24

000059fc <__sread>:
    59fc:	b570      	push	{r4, r5, r6, lr}
    59fe:	000c      	movs	r4, r1
    5a00:	250e      	movs	r5, #14
    5a02:	5f49      	ldrsh	r1, [r1, r5]
    5a04:	f000 f984 	bl	5d10 <_read_r>
    5a08:	2800      	cmp	r0, #0
    5a0a:	db03      	blt.n	5a14 <__sread+0x18>
    5a0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5a0e:	181b      	adds	r3, r3, r0
    5a10:	6563      	str	r3, [r4, #84]	; 0x54
    5a12:	bd70      	pop	{r4, r5, r6, pc}
    5a14:	89a3      	ldrh	r3, [r4, #12]
    5a16:	4a02      	ldr	r2, [pc, #8]	; (5a20 <__sread+0x24>)
    5a18:	4013      	ands	r3, r2
    5a1a:	81a3      	strh	r3, [r4, #12]
    5a1c:	e7f9      	b.n	5a12 <__sread+0x16>
    5a1e:	46c0      	nop			; (mov r8, r8)
    5a20:	ffffefff 	.word	0xffffefff

00005a24 <__swrite>:
    5a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a26:	001f      	movs	r7, r3
    5a28:	898b      	ldrh	r3, [r1, #12]
    5a2a:	0005      	movs	r5, r0
    5a2c:	000c      	movs	r4, r1
    5a2e:	0016      	movs	r6, r2
    5a30:	05db      	lsls	r3, r3, #23
    5a32:	d505      	bpl.n	5a40 <__swrite+0x1c>
    5a34:	230e      	movs	r3, #14
    5a36:	5ec9      	ldrsh	r1, [r1, r3]
    5a38:	2200      	movs	r2, #0
    5a3a:	2302      	movs	r3, #2
    5a3c:	f000 f940 	bl	5cc0 <_lseek_r>
    5a40:	89a3      	ldrh	r3, [r4, #12]
    5a42:	4a05      	ldr	r2, [pc, #20]	; (5a58 <__swrite+0x34>)
    5a44:	0028      	movs	r0, r5
    5a46:	4013      	ands	r3, r2
    5a48:	81a3      	strh	r3, [r4, #12]
    5a4a:	0032      	movs	r2, r6
    5a4c:	230e      	movs	r3, #14
    5a4e:	5ee1      	ldrsh	r1, [r4, r3]
    5a50:	003b      	movs	r3, r7
    5a52:	f000 f875 	bl	5b40 <_write_r>
    5a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a58:	ffffefff 	.word	0xffffefff

00005a5c <__sseek>:
    5a5c:	b570      	push	{r4, r5, r6, lr}
    5a5e:	000c      	movs	r4, r1
    5a60:	250e      	movs	r5, #14
    5a62:	5f49      	ldrsh	r1, [r1, r5]
    5a64:	f000 f92c 	bl	5cc0 <_lseek_r>
    5a68:	89a3      	ldrh	r3, [r4, #12]
    5a6a:	1c42      	adds	r2, r0, #1
    5a6c:	d103      	bne.n	5a76 <__sseek+0x1a>
    5a6e:	4a05      	ldr	r2, [pc, #20]	; (5a84 <__sseek+0x28>)
    5a70:	4013      	ands	r3, r2
    5a72:	81a3      	strh	r3, [r4, #12]
    5a74:	bd70      	pop	{r4, r5, r6, pc}
    5a76:	2280      	movs	r2, #128	; 0x80
    5a78:	0152      	lsls	r2, r2, #5
    5a7a:	4313      	orrs	r3, r2
    5a7c:	81a3      	strh	r3, [r4, #12]
    5a7e:	6560      	str	r0, [r4, #84]	; 0x54
    5a80:	e7f8      	b.n	5a74 <__sseek+0x18>
    5a82:	46c0      	nop			; (mov r8, r8)
    5a84:	ffffefff 	.word	0xffffefff

00005a88 <__sclose>:
    5a88:	b510      	push	{r4, lr}
    5a8a:	230e      	movs	r3, #14
    5a8c:	5ec9      	ldrsh	r1, [r1, r3]
    5a8e:	f000 f8e1 	bl	5c54 <_close_r>
    5a92:	bd10      	pop	{r4, pc}

00005a94 <__swbuf_r>:
    5a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a96:	0005      	movs	r5, r0
    5a98:	000e      	movs	r6, r1
    5a9a:	0014      	movs	r4, r2
    5a9c:	2800      	cmp	r0, #0
    5a9e:	d004      	beq.n	5aaa <__swbuf_r+0x16>
    5aa0:	6983      	ldr	r3, [r0, #24]
    5aa2:	2b00      	cmp	r3, #0
    5aa4:	d101      	bne.n	5aaa <__swbuf_r+0x16>
    5aa6:	f7ff f99d 	bl	4de4 <__sinit>
    5aaa:	4b22      	ldr	r3, [pc, #136]	; (5b34 <__swbuf_r+0xa0>)
    5aac:	429c      	cmp	r4, r3
    5aae:	d12d      	bne.n	5b0c <__swbuf_r+0x78>
    5ab0:	686c      	ldr	r4, [r5, #4]
    5ab2:	69a3      	ldr	r3, [r4, #24]
    5ab4:	60a3      	str	r3, [r4, #8]
    5ab6:	89a3      	ldrh	r3, [r4, #12]
    5ab8:	071b      	lsls	r3, r3, #28
    5aba:	d531      	bpl.n	5b20 <__swbuf_r+0x8c>
    5abc:	6923      	ldr	r3, [r4, #16]
    5abe:	2b00      	cmp	r3, #0
    5ac0:	d02e      	beq.n	5b20 <__swbuf_r+0x8c>
    5ac2:	6823      	ldr	r3, [r4, #0]
    5ac4:	6922      	ldr	r2, [r4, #16]
    5ac6:	b2f7      	uxtb	r7, r6
    5ac8:	1a98      	subs	r0, r3, r2
    5aca:	6963      	ldr	r3, [r4, #20]
    5acc:	b2f6      	uxtb	r6, r6
    5ace:	4298      	cmp	r0, r3
    5ad0:	db05      	blt.n	5ade <__swbuf_r+0x4a>
    5ad2:	0021      	movs	r1, r4
    5ad4:	0028      	movs	r0, r5
    5ad6:	f7ff f917 	bl	4d08 <_fflush_r>
    5ada:	2800      	cmp	r0, #0
    5adc:	d126      	bne.n	5b2c <__swbuf_r+0x98>
    5ade:	68a3      	ldr	r3, [r4, #8]
    5ae0:	3001      	adds	r0, #1
    5ae2:	3b01      	subs	r3, #1
    5ae4:	60a3      	str	r3, [r4, #8]
    5ae6:	6823      	ldr	r3, [r4, #0]
    5ae8:	1c5a      	adds	r2, r3, #1
    5aea:	6022      	str	r2, [r4, #0]
    5aec:	701f      	strb	r7, [r3, #0]
    5aee:	6963      	ldr	r3, [r4, #20]
    5af0:	4298      	cmp	r0, r3
    5af2:	d004      	beq.n	5afe <__swbuf_r+0x6a>
    5af4:	89a3      	ldrh	r3, [r4, #12]
    5af6:	07db      	lsls	r3, r3, #31
    5af8:	d51a      	bpl.n	5b30 <__swbuf_r+0x9c>
    5afa:	2e0a      	cmp	r6, #10
    5afc:	d118      	bne.n	5b30 <__swbuf_r+0x9c>
    5afe:	0021      	movs	r1, r4
    5b00:	0028      	movs	r0, r5
    5b02:	f7ff f901 	bl	4d08 <_fflush_r>
    5b06:	2800      	cmp	r0, #0
    5b08:	d012      	beq.n	5b30 <__swbuf_r+0x9c>
    5b0a:	e00f      	b.n	5b2c <__swbuf_r+0x98>
    5b0c:	4b0a      	ldr	r3, [pc, #40]	; (5b38 <__swbuf_r+0xa4>)
    5b0e:	429c      	cmp	r4, r3
    5b10:	d101      	bne.n	5b16 <__swbuf_r+0x82>
    5b12:	68ac      	ldr	r4, [r5, #8]
    5b14:	e7cd      	b.n	5ab2 <__swbuf_r+0x1e>
    5b16:	4b09      	ldr	r3, [pc, #36]	; (5b3c <__swbuf_r+0xa8>)
    5b18:	429c      	cmp	r4, r3
    5b1a:	d1ca      	bne.n	5ab2 <__swbuf_r+0x1e>
    5b1c:	68ec      	ldr	r4, [r5, #12]
    5b1e:	e7c8      	b.n	5ab2 <__swbuf_r+0x1e>
    5b20:	0021      	movs	r1, r4
    5b22:	0028      	movs	r0, r5
    5b24:	f000 f820 	bl	5b68 <__swsetup_r>
    5b28:	2800      	cmp	r0, #0
    5b2a:	d0ca      	beq.n	5ac2 <__swbuf_r+0x2e>
    5b2c:	2601      	movs	r6, #1
    5b2e:	4276      	negs	r6, r6
    5b30:	0030      	movs	r0, r6
    5b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b34:	00008a08 	.word	0x00008a08
    5b38:	00008a28 	.word	0x00008a28
    5b3c:	000089e8 	.word	0x000089e8

00005b40 <_write_r>:
    5b40:	b570      	push	{r4, r5, r6, lr}
    5b42:	0005      	movs	r5, r0
    5b44:	0008      	movs	r0, r1
    5b46:	0011      	movs	r1, r2
    5b48:	2200      	movs	r2, #0
    5b4a:	4c06      	ldr	r4, [pc, #24]	; (5b64 <_write_r+0x24>)
    5b4c:	6022      	str	r2, [r4, #0]
    5b4e:	001a      	movs	r2, r3
    5b50:	f7fc fe66 	bl	2820 <_write>
    5b54:	1c43      	adds	r3, r0, #1
    5b56:	d103      	bne.n	5b60 <_write_r+0x20>
    5b58:	6823      	ldr	r3, [r4, #0]
    5b5a:	2b00      	cmp	r3, #0
    5b5c:	d000      	beq.n	5b60 <_write_r+0x20>
    5b5e:	602b      	str	r3, [r5, #0]
    5b60:	bd70      	pop	{r4, r5, r6, pc}
    5b62:	46c0      	nop			; (mov r8, r8)
    5b64:	20000a24 	.word	0x20000a24

00005b68 <__swsetup_r>:
    5b68:	4b36      	ldr	r3, [pc, #216]	; (5c44 <__swsetup_r+0xdc>)
    5b6a:	b570      	push	{r4, r5, r6, lr}
    5b6c:	681d      	ldr	r5, [r3, #0]
    5b6e:	0006      	movs	r6, r0
    5b70:	000c      	movs	r4, r1
    5b72:	2d00      	cmp	r5, #0
    5b74:	d005      	beq.n	5b82 <__swsetup_r+0x1a>
    5b76:	69ab      	ldr	r3, [r5, #24]
    5b78:	2b00      	cmp	r3, #0
    5b7a:	d102      	bne.n	5b82 <__swsetup_r+0x1a>
    5b7c:	0028      	movs	r0, r5
    5b7e:	f7ff f931 	bl	4de4 <__sinit>
    5b82:	4b31      	ldr	r3, [pc, #196]	; (5c48 <__swsetup_r+0xe0>)
    5b84:	429c      	cmp	r4, r3
    5b86:	d10f      	bne.n	5ba8 <__swsetup_r+0x40>
    5b88:	686c      	ldr	r4, [r5, #4]
    5b8a:	230c      	movs	r3, #12
    5b8c:	5ee2      	ldrsh	r2, [r4, r3]
    5b8e:	b293      	uxth	r3, r2
    5b90:	0719      	lsls	r1, r3, #28
    5b92:	d42d      	bmi.n	5bf0 <__swsetup_r+0x88>
    5b94:	06d9      	lsls	r1, r3, #27
    5b96:	d411      	bmi.n	5bbc <__swsetup_r+0x54>
    5b98:	2309      	movs	r3, #9
    5b9a:	2001      	movs	r0, #1
    5b9c:	6033      	str	r3, [r6, #0]
    5b9e:	3337      	adds	r3, #55	; 0x37
    5ba0:	4313      	orrs	r3, r2
    5ba2:	81a3      	strh	r3, [r4, #12]
    5ba4:	4240      	negs	r0, r0
    5ba6:	bd70      	pop	{r4, r5, r6, pc}
    5ba8:	4b28      	ldr	r3, [pc, #160]	; (5c4c <__swsetup_r+0xe4>)
    5baa:	429c      	cmp	r4, r3
    5bac:	d101      	bne.n	5bb2 <__swsetup_r+0x4a>
    5bae:	68ac      	ldr	r4, [r5, #8]
    5bb0:	e7eb      	b.n	5b8a <__swsetup_r+0x22>
    5bb2:	4b27      	ldr	r3, [pc, #156]	; (5c50 <__swsetup_r+0xe8>)
    5bb4:	429c      	cmp	r4, r3
    5bb6:	d1e8      	bne.n	5b8a <__swsetup_r+0x22>
    5bb8:	68ec      	ldr	r4, [r5, #12]
    5bba:	e7e6      	b.n	5b8a <__swsetup_r+0x22>
    5bbc:	075b      	lsls	r3, r3, #29
    5bbe:	d513      	bpl.n	5be8 <__swsetup_r+0x80>
    5bc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5bc2:	2900      	cmp	r1, #0
    5bc4:	d008      	beq.n	5bd8 <__swsetup_r+0x70>
    5bc6:	0023      	movs	r3, r4
    5bc8:	3344      	adds	r3, #68	; 0x44
    5bca:	4299      	cmp	r1, r3
    5bcc:	d002      	beq.n	5bd4 <__swsetup_r+0x6c>
    5bce:	0030      	movs	r0, r6
    5bd0:	f7ff fd16 	bl	5600 <_free_r>
    5bd4:	2300      	movs	r3, #0
    5bd6:	6363      	str	r3, [r4, #52]	; 0x34
    5bd8:	2224      	movs	r2, #36	; 0x24
    5bda:	89a3      	ldrh	r3, [r4, #12]
    5bdc:	4393      	bics	r3, r2
    5bde:	81a3      	strh	r3, [r4, #12]
    5be0:	2300      	movs	r3, #0
    5be2:	6063      	str	r3, [r4, #4]
    5be4:	6923      	ldr	r3, [r4, #16]
    5be6:	6023      	str	r3, [r4, #0]
    5be8:	2308      	movs	r3, #8
    5bea:	89a2      	ldrh	r2, [r4, #12]
    5bec:	4313      	orrs	r3, r2
    5bee:	81a3      	strh	r3, [r4, #12]
    5bf0:	6923      	ldr	r3, [r4, #16]
    5bf2:	2b00      	cmp	r3, #0
    5bf4:	d10b      	bne.n	5c0e <__swsetup_r+0xa6>
    5bf6:	21a0      	movs	r1, #160	; 0xa0
    5bf8:	2280      	movs	r2, #128	; 0x80
    5bfa:	89a3      	ldrh	r3, [r4, #12]
    5bfc:	0089      	lsls	r1, r1, #2
    5bfe:	0092      	lsls	r2, r2, #2
    5c00:	400b      	ands	r3, r1
    5c02:	4293      	cmp	r3, r2
    5c04:	d003      	beq.n	5c0e <__swsetup_r+0xa6>
    5c06:	0021      	movs	r1, r4
    5c08:	0030      	movs	r0, r6
    5c0a:	f7ff f9b5 	bl	4f78 <__smakebuf_r>
    5c0e:	2301      	movs	r3, #1
    5c10:	89a2      	ldrh	r2, [r4, #12]
    5c12:	4013      	ands	r3, r2
    5c14:	d011      	beq.n	5c3a <__swsetup_r+0xd2>
    5c16:	2300      	movs	r3, #0
    5c18:	60a3      	str	r3, [r4, #8]
    5c1a:	6963      	ldr	r3, [r4, #20]
    5c1c:	425b      	negs	r3, r3
    5c1e:	61a3      	str	r3, [r4, #24]
    5c20:	2000      	movs	r0, #0
    5c22:	6923      	ldr	r3, [r4, #16]
    5c24:	4283      	cmp	r3, r0
    5c26:	d1be      	bne.n	5ba6 <__swsetup_r+0x3e>
    5c28:	230c      	movs	r3, #12
    5c2a:	5ee2      	ldrsh	r2, [r4, r3]
    5c2c:	0613      	lsls	r3, r2, #24
    5c2e:	d5ba      	bpl.n	5ba6 <__swsetup_r+0x3e>
    5c30:	2340      	movs	r3, #64	; 0x40
    5c32:	4313      	orrs	r3, r2
    5c34:	81a3      	strh	r3, [r4, #12]
    5c36:	3801      	subs	r0, #1
    5c38:	e7b5      	b.n	5ba6 <__swsetup_r+0x3e>
    5c3a:	0792      	lsls	r2, r2, #30
    5c3c:	d400      	bmi.n	5c40 <__swsetup_r+0xd8>
    5c3e:	6963      	ldr	r3, [r4, #20]
    5c40:	60a3      	str	r3, [r4, #8]
    5c42:	e7ed      	b.n	5c20 <__swsetup_r+0xb8>
    5c44:	20000010 	.word	0x20000010
    5c48:	00008a08 	.word	0x00008a08
    5c4c:	00008a28 	.word	0x00008a28
    5c50:	000089e8 	.word	0x000089e8

00005c54 <_close_r>:
    5c54:	2300      	movs	r3, #0
    5c56:	b570      	push	{r4, r5, r6, lr}
    5c58:	4c06      	ldr	r4, [pc, #24]	; (5c74 <_close_r+0x20>)
    5c5a:	0005      	movs	r5, r0
    5c5c:	0008      	movs	r0, r1
    5c5e:	6023      	str	r3, [r4, #0]
    5c60:	f7fc fe18 	bl	2894 <_close>
    5c64:	1c43      	adds	r3, r0, #1
    5c66:	d103      	bne.n	5c70 <_close_r+0x1c>
    5c68:	6823      	ldr	r3, [r4, #0]
    5c6a:	2b00      	cmp	r3, #0
    5c6c:	d000      	beq.n	5c70 <_close_r+0x1c>
    5c6e:	602b      	str	r3, [r5, #0]
    5c70:	bd70      	pop	{r4, r5, r6, pc}
    5c72:	46c0      	nop			; (mov r8, r8)
    5c74:	20000a24 	.word	0x20000a24

00005c78 <_fstat_r>:
    5c78:	2300      	movs	r3, #0
    5c7a:	b570      	push	{r4, r5, r6, lr}
    5c7c:	4c06      	ldr	r4, [pc, #24]	; (5c98 <_fstat_r+0x20>)
    5c7e:	0005      	movs	r5, r0
    5c80:	0008      	movs	r0, r1
    5c82:	0011      	movs	r1, r2
    5c84:	6023      	str	r3, [r4, #0]
    5c86:	f7fc fe08 	bl	289a <_fstat>
    5c8a:	1c43      	adds	r3, r0, #1
    5c8c:	d103      	bne.n	5c96 <_fstat_r+0x1e>
    5c8e:	6823      	ldr	r3, [r4, #0]
    5c90:	2b00      	cmp	r3, #0
    5c92:	d000      	beq.n	5c96 <_fstat_r+0x1e>
    5c94:	602b      	str	r3, [r5, #0]
    5c96:	bd70      	pop	{r4, r5, r6, pc}
    5c98:	20000a24 	.word	0x20000a24

00005c9c <_isatty_r>:
    5c9c:	2300      	movs	r3, #0
    5c9e:	b570      	push	{r4, r5, r6, lr}
    5ca0:	4c06      	ldr	r4, [pc, #24]	; (5cbc <_isatty_r+0x20>)
    5ca2:	0005      	movs	r5, r0
    5ca4:	0008      	movs	r0, r1
    5ca6:	6023      	str	r3, [r4, #0]
    5ca8:	f7fc fdfc 	bl	28a4 <_isatty>
    5cac:	1c43      	adds	r3, r0, #1
    5cae:	d103      	bne.n	5cb8 <_isatty_r+0x1c>
    5cb0:	6823      	ldr	r3, [r4, #0]
    5cb2:	2b00      	cmp	r3, #0
    5cb4:	d000      	beq.n	5cb8 <_isatty_r+0x1c>
    5cb6:	602b      	str	r3, [r5, #0]
    5cb8:	bd70      	pop	{r4, r5, r6, pc}
    5cba:	46c0      	nop			; (mov r8, r8)
    5cbc:	20000a24 	.word	0x20000a24

00005cc0 <_lseek_r>:
    5cc0:	b570      	push	{r4, r5, r6, lr}
    5cc2:	0005      	movs	r5, r0
    5cc4:	0008      	movs	r0, r1
    5cc6:	0011      	movs	r1, r2
    5cc8:	2200      	movs	r2, #0
    5cca:	4c06      	ldr	r4, [pc, #24]	; (5ce4 <_lseek_r+0x24>)
    5ccc:	6022      	str	r2, [r4, #0]
    5cce:	001a      	movs	r2, r3
    5cd0:	f7fc fdea 	bl	28a8 <_lseek>
    5cd4:	1c43      	adds	r3, r0, #1
    5cd6:	d103      	bne.n	5ce0 <_lseek_r+0x20>
    5cd8:	6823      	ldr	r3, [r4, #0]
    5cda:	2b00      	cmp	r3, #0
    5cdc:	d000      	beq.n	5ce0 <_lseek_r+0x20>
    5cde:	602b      	str	r3, [r5, #0]
    5ce0:	bd70      	pop	{r4, r5, r6, pc}
    5ce2:	46c0      	nop			; (mov r8, r8)
    5ce4:	20000a24 	.word	0x20000a24

00005ce8 <__ascii_mbtowc>:
    5ce8:	b082      	sub	sp, #8
    5cea:	2900      	cmp	r1, #0
    5cec:	d100      	bne.n	5cf0 <__ascii_mbtowc+0x8>
    5cee:	a901      	add	r1, sp, #4
    5cf0:	1e10      	subs	r0, r2, #0
    5cf2:	d006      	beq.n	5d02 <__ascii_mbtowc+0x1a>
    5cf4:	2b00      	cmp	r3, #0
    5cf6:	d006      	beq.n	5d06 <__ascii_mbtowc+0x1e>
    5cf8:	7813      	ldrb	r3, [r2, #0]
    5cfa:	600b      	str	r3, [r1, #0]
    5cfc:	7810      	ldrb	r0, [r2, #0]
    5cfe:	1e43      	subs	r3, r0, #1
    5d00:	4198      	sbcs	r0, r3
    5d02:	b002      	add	sp, #8
    5d04:	4770      	bx	lr
    5d06:	2002      	movs	r0, #2
    5d08:	4240      	negs	r0, r0
    5d0a:	e7fa      	b.n	5d02 <__ascii_mbtowc+0x1a>

00005d0c <__malloc_lock>:
    5d0c:	4770      	bx	lr

00005d0e <__malloc_unlock>:
    5d0e:	4770      	bx	lr

00005d10 <_read_r>:
    5d10:	b570      	push	{r4, r5, r6, lr}
    5d12:	0005      	movs	r5, r0
    5d14:	0008      	movs	r0, r1
    5d16:	0011      	movs	r1, r2
    5d18:	2200      	movs	r2, #0
    5d1a:	4c06      	ldr	r4, [pc, #24]	; (5d34 <_read_r+0x24>)
    5d1c:	6022      	str	r2, [r4, #0]
    5d1e:	001a      	movs	r2, r3
    5d20:	f7fc fd5c 	bl	27dc <_read>
    5d24:	1c43      	adds	r3, r0, #1
    5d26:	d103      	bne.n	5d30 <_read_r+0x20>
    5d28:	6823      	ldr	r3, [r4, #0]
    5d2a:	2b00      	cmp	r3, #0
    5d2c:	d000      	beq.n	5d30 <_read_r+0x20>
    5d2e:	602b      	str	r3, [r5, #0]
    5d30:	bd70      	pop	{r4, r5, r6, pc}
    5d32:	46c0      	nop			; (mov r8, r8)
    5d34:	20000a24 	.word	0x20000a24

00005d38 <__ascii_wctomb>:
    5d38:	1e0b      	subs	r3, r1, #0
    5d3a:	d004      	beq.n	5d46 <__ascii_wctomb+0xe>
    5d3c:	2aff      	cmp	r2, #255	; 0xff
    5d3e:	d904      	bls.n	5d4a <__ascii_wctomb+0x12>
    5d40:	238a      	movs	r3, #138	; 0x8a
    5d42:	6003      	str	r3, [r0, #0]
    5d44:	3b8b      	subs	r3, #139	; 0x8b
    5d46:	0018      	movs	r0, r3
    5d48:	4770      	bx	lr
    5d4a:	700a      	strb	r2, [r1, #0]
    5d4c:	2301      	movs	r3, #1
    5d4e:	e7fa      	b.n	5d46 <__ascii_wctomb+0xe>

00005d50 <__gnu_thumb1_case_uqi>:
    5d50:	b402      	push	{r1}
    5d52:	4671      	mov	r1, lr
    5d54:	0849      	lsrs	r1, r1, #1
    5d56:	0049      	lsls	r1, r1, #1
    5d58:	5c09      	ldrb	r1, [r1, r0]
    5d5a:	0049      	lsls	r1, r1, #1
    5d5c:	448e      	add	lr, r1
    5d5e:	bc02      	pop	{r1}
    5d60:	4770      	bx	lr
    5d62:	46c0      	nop			; (mov r8, r8)

00005d64 <__udivsi3>:
    5d64:	2200      	movs	r2, #0
    5d66:	0843      	lsrs	r3, r0, #1
    5d68:	428b      	cmp	r3, r1
    5d6a:	d374      	bcc.n	5e56 <__udivsi3+0xf2>
    5d6c:	0903      	lsrs	r3, r0, #4
    5d6e:	428b      	cmp	r3, r1
    5d70:	d35f      	bcc.n	5e32 <__udivsi3+0xce>
    5d72:	0a03      	lsrs	r3, r0, #8
    5d74:	428b      	cmp	r3, r1
    5d76:	d344      	bcc.n	5e02 <__udivsi3+0x9e>
    5d78:	0b03      	lsrs	r3, r0, #12
    5d7a:	428b      	cmp	r3, r1
    5d7c:	d328      	bcc.n	5dd0 <__udivsi3+0x6c>
    5d7e:	0c03      	lsrs	r3, r0, #16
    5d80:	428b      	cmp	r3, r1
    5d82:	d30d      	bcc.n	5da0 <__udivsi3+0x3c>
    5d84:	22ff      	movs	r2, #255	; 0xff
    5d86:	0209      	lsls	r1, r1, #8
    5d88:	ba12      	rev	r2, r2
    5d8a:	0c03      	lsrs	r3, r0, #16
    5d8c:	428b      	cmp	r3, r1
    5d8e:	d302      	bcc.n	5d96 <__udivsi3+0x32>
    5d90:	1212      	asrs	r2, r2, #8
    5d92:	0209      	lsls	r1, r1, #8
    5d94:	d065      	beq.n	5e62 <__udivsi3+0xfe>
    5d96:	0b03      	lsrs	r3, r0, #12
    5d98:	428b      	cmp	r3, r1
    5d9a:	d319      	bcc.n	5dd0 <__udivsi3+0x6c>
    5d9c:	e000      	b.n	5da0 <__udivsi3+0x3c>
    5d9e:	0a09      	lsrs	r1, r1, #8
    5da0:	0bc3      	lsrs	r3, r0, #15
    5da2:	428b      	cmp	r3, r1
    5da4:	d301      	bcc.n	5daa <__udivsi3+0x46>
    5da6:	03cb      	lsls	r3, r1, #15
    5da8:	1ac0      	subs	r0, r0, r3
    5daa:	4152      	adcs	r2, r2
    5dac:	0b83      	lsrs	r3, r0, #14
    5dae:	428b      	cmp	r3, r1
    5db0:	d301      	bcc.n	5db6 <__udivsi3+0x52>
    5db2:	038b      	lsls	r3, r1, #14
    5db4:	1ac0      	subs	r0, r0, r3
    5db6:	4152      	adcs	r2, r2
    5db8:	0b43      	lsrs	r3, r0, #13
    5dba:	428b      	cmp	r3, r1
    5dbc:	d301      	bcc.n	5dc2 <__udivsi3+0x5e>
    5dbe:	034b      	lsls	r3, r1, #13
    5dc0:	1ac0      	subs	r0, r0, r3
    5dc2:	4152      	adcs	r2, r2
    5dc4:	0b03      	lsrs	r3, r0, #12
    5dc6:	428b      	cmp	r3, r1
    5dc8:	d301      	bcc.n	5dce <__udivsi3+0x6a>
    5dca:	030b      	lsls	r3, r1, #12
    5dcc:	1ac0      	subs	r0, r0, r3
    5dce:	4152      	adcs	r2, r2
    5dd0:	0ac3      	lsrs	r3, r0, #11
    5dd2:	428b      	cmp	r3, r1
    5dd4:	d301      	bcc.n	5dda <__udivsi3+0x76>
    5dd6:	02cb      	lsls	r3, r1, #11
    5dd8:	1ac0      	subs	r0, r0, r3
    5dda:	4152      	adcs	r2, r2
    5ddc:	0a83      	lsrs	r3, r0, #10
    5dde:	428b      	cmp	r3, r1
    5de0:	d301      	bcc.n	5de6 <__udivsi3+0x82>
    5de2:	028b      	lsls	r3, r1, #10
    5de4:	1ac0      	subs	r0, r0, r3
    5de6:	4152      	adcs	r2, r2
    5de8:	0a43      	lsrs	r3, r0, #9
    5dea:	428b      	cmp	r3, r1
    5dec:	d301      	bcc.n	5df2 <__udivsi3+0x8e>
    5dee:	024b      	lsls	r3, r1, #9
    5df0:	1ac0      	subs	r0, r0, r3
    5df2:	4152      	adcs	r2, r2
    5df4:	0a03      	lsrs	r3, r0, #8
    5df6:	428b      	cmp	r3, r1
    5df8:	d301      	bcc.n	5dfe <__udivsi3+0x9a>
    5dfa:	020b      	lsls	r3, r1, #8
    5dfc:	1ac0      	subs	r0, r0, r3
    5dfe:	4152      	adcs	r2, r2
    5e00:	d2cd      	bcs.n	5d9e <__udivsi3+0x3a>
    5e02:	09c3      	lsrs	r3, r0, #7
    5e04:	428b      	cmp	r3, r1
    5e06:	d301      	bcc.n	5e0c <__udivsi3+0xa8>
    5e08:	01cb      	lsls	r3, r1, #7
    5e0a:	1ac0      	subs	r0, r0, r3
    5e0c:	4152      	adcs	r2, r2
    5e0e:	0983      	lsrs	r3, r0, #6
    5e10:	428b      	cmp	r3, r1
    5e12:	d301      	bcc.n	5e18 <__udivsi3+0xb4>
    5e14:	018b      	lsls	r3, r1, #6
    5e16:	1ac0      	subs	r0, r0, r3
    5e18:	4152      	adcs	r2, r2
    5e1a:	0943      	lsrs	r3, r0, #5
    5e1c:	428b      	cmp	r3, r1
    5e1e:	d301      	bcc.n	5e24 <__udivsi3+0xc0>
    5e20:	014b      	lsls	r3, r1, #5
    5e22:	1ac0      	subs	r0, r0, r3
    5e24:	4152      	adcs	r2, r2
    5e26:	0903      	lsrs	r3, r0, #4
    5e28:	428b      	cmp	r3, r1
    5e2a:	d301      	bcc.n	5e30 <__udivsi3+0xcc>
    5e2c:	010b      	lsls	r3, r1, #4
    5e2e:	1ac0      	subs	r0, r0, r3
    5e30:	4152      	adcs	r2, r2
    5e32:	08c3      	lsrs	r3, r0, #3
    5e34:	428b      	cmp	r3, r1
    5e36:	d301      	bcc.n	5e3c <__udivsi3+0xd8>
    5e38:	00cb      	lsls	r3, r1, #3
    5e3a:	1ac0      	subs	r0, r0, r3
    5e3c:	4152      	adcs	r2, r2
    5e3e:	0883      	lsrs	r3, r0, #2
    5e40:	428b      	cmp	r3, r1
    5e42:	d301      	bcc.n	5e48 <__udivsi3+0xe4>
    5e44:	008b      	lsls	r3, r1, #2
    5e46:	1ac0      	subs	r0, r0, r3
    5e48:	4152      	adcs	r2, r2
    5e4a:	0843      	lsrs	r3, r0, #1
    5e4c:	428b      	cmp	r3, r1
    5e4e:	d301      	bcc.n	5e54 <__udivsi3+0xf0>
    5e50:	004b      	lsls	r3, r1, #1
    5e52:	1ac0      	subs	r0, r0, r3
    5e54:	4152      	adcs	r2, r2
    5e56:	1a41      	subs	r1, r0, r1
    5e58:	d200      	bcs.n	5e5c <__udivsi3+0xf8>
    5e5a:	4601      	mov	r1, r0
    5e5c:	4152      	adcs	r2, r2
    5e5e:	4610      	mov	r0, r2
    5e60:	4770      	bx	lr
    5e62:	e7ff      	b.n	5e64 <__udivsi3+0x100>
    5e64:	b501      	push	{r0, lr}
    5e66:	2000      	movs	r0, #0
    5e68:	f000 f8f0 	bl	604c <__aeabi_idiv0>
    5e6c:	bd02      	pop	{r1, pc}
    5e6e:	46c0      	nop			; (mov r8, r8)

00005e70 <__aeabi_uidivmod>:
    5e70:	2900      	cmp	r1, #0
    5e72:	d0f7      	beq.n	5e64 <__udivsi3+0x100>
    5e74:	e776      	b.n	5d64 <__udivsi3>
    5e76:	4770      	bx	lr

00005e78 <__divsi3>:
    5e78:	4603      	mov	r3, r0
    5e7a:	430b      	orrs	r3, r1
    5e7c:	d47f      	bmi.n	5f7e <__divsi3+0x106>
    5e7e:	2200      	movs	r2, #0
    5e80:	0843      	lsrs	r3, r0, #1
    5e82:	428b      	cmp	r3, r1
    5e84:	d374      	bcc.n	5f70 <__divsi3+0xf8>
    5e86:	0903      	lsrs	r3, r0, #4
    5e88:	428b      	cmp	r3, r1
    5e8a:	d35f      	bcc.n	5f4c <__divsi3+0xd4>
    5e8c:	0a03      	lsrs	r3, r0, #8
    5e8e:	428b      	cmp	r3, r1
    5e90:	d344      	bcc.n	5f1c <__divsi3+0xa4>
    5e92:	0b03      	lsrs	r3, r0, #12
    5e94:	428b      	cmp	r3, r1
    5e96:	d328      	bcc.n	5eea <__divsi3+0x72>
    5e98:	0c03      	lsrs	r3, r0, #16
    5e9a:	428b      	cmp	r3, r1
    5e9c:	d30d      	bcc.n	5eba <__divsi3+0x42>
    5e9e:	22ff      	movs	r2, #255	; 0xff
    5ea0:	0209      	lsls	r1, r1, #8
    5ea2:	ba12      	rev	r2, r2
    5ea4:	0c03      	lsrs	r3, r0, #16
    5ea6:	428b      	cmp	r3, r1
    5ea8:	d302      	bcc.n	5eb0 <__divsi3+0x38>
    5eaa:	1212      	asrs	r2, r2, #8
    5eac:	0209      	lsls	r1, r1, #8
    5eae:	d065      	beq.n	5f7c <__divsi3+0x104>
    5eb0:	0b03      	lsrs	r3, r0, #12
    5eb2:	428b      	cmp	r3, r1
    5eb4:	d319      	bcc.n	5eea <__divsi3+0x72>
    5eb6:	e000      	b.n	5eba <__divsi3+0x42>
    5eb8:	0a09      	lsrs	r1, r1, #8
    5eba:	0bc3      	lsrs	r3, r0, #15
    5ebc:	428b      	cmp	r3, r1
    5ebe:	d301      	bcc.n	5ec4 <__divsi3+0x4c>
    5ec0:	03cb      	lsls	r3, r1, #15
    5ec2:	1ac0      	subs	r0, r0, r3
    5ec4:	4152      	adcs	r2, r2
    5ec6:	0b83      	lsrs	r3, r0, #14
    5ec8:	428b      	cmp	r3, r1
    5eca:	d301      	bcc.n	5ed0 <__divsi3+0x58>
    5ecc:	038b      	lsls	r3, r1, #14
    5ece:	1ac0      	subs	r0, r0, r3
    5ed0:	4152      	adcs	r2, r2
    5ed2:	0b43      	lsrs	r3, r0, #13
    5ed4:	428b      	cmp	r3, r1
    5ed6:	d301      	bcc.n	5edc <__divsi3+0x64>
    5ed8:	034b      	lsls	r3, r1, #13
    5eda:	1ac0      	subs	r0, r0, r3
    5edc:	4152      	adcs	r2, r2
    5ede:	0b03      	lsrs	r3, r0, #12
    5ee0:	428b      	cmp	r3, r1
    5ee2:	d301      	bcc.n	5ee8 <__divsi3+0x70>
    5ee4:	030b      	lsls	r3, r1, #12
    5ee6:	1ac0      	subs	r0, r0, r3
    5ee8:	4152      	adcs	r2, r2
    5eea:	0ac3      	lsrs	r3, r0, #11
    5eec:	428b      	cmp	r3, r1
    5eee:	d301      	bcc.n	5ef4 <__divsi3+0x7c>
    5ef0:	02cb      	lsls	r3, r1, #11
    5ef2:	1ac0      	subs	r0, r0, r3
    5ef4:	4152      	adcs	r2, r2
    5ef6:	0a83      	lsrs	r3, r0, #10
    5ef8:	428b      	cmp	r3, r1
    5efa:	d301      	bcc.n	5f00 <__divsi3+0x88>
    5efc:	028b      	lsls	r3, r1, #10
    5efe:	1ac0      	subs	r0, r0, r3
    5f00:	4152      	adcs	r2, r2
    5f02:	0a43      	lsrs	r3, r0, #9
    5f04:	428b      	cmp	r3, r1
    5f06:	d301      	bcc.n	5f0c <__divsi3+0x94>
    5f08:	024b      	lsls	r3, r1, #9
    5f0a:	1ac0      	subs	r0, r0, r3
    5f0c:	4152      	adcs	r2, r2
    5f0e:	0a03      	lsrs	r3, r0, #8
    5f10:	428b      	cmp	r3, r1
    5f12:	d301      	bcc.n	5f18 <__divsi3+0xa0>
    5f14:	020b      	lsls	r3, r1, #8
    5f16:	1ac0      	subs	r0, r0, r3
    5f18:	4152      	adcs	r2, r2
    5f1a:	d2cd      	bcs.n	5eb8 <__divsi3+0x40>
    5f1c:	09c3      	lsrs	r3, r0, #7
    5f1e:	428b      	cmp	r3, r1
    5f20:	d301      	bcc.n	5f26 <__divsi3+0xae>
    5f22:	01cb      	lsls	r3, r1, #7
    5f24:	1ac0      	subs	r0, r0, r3
    5f26:	4152      	adcs	r2, r2
    5f28:	0983      	lsrs	r3, r0, #6
    5f2a:	428b      	cmp	r3, r1
    5f2c:	d301      	bcc.n	5f32 <__divsi3+0xba>
    5f2e:	018b      	lsls	r3, r1, #6
    5f30:	1ac0      	subs	r0, r0, r3
    5f32:	4152      	adcs	r2, r2
    5f34:	0943      	lsrs	r3, r0, #5
    5f36:	428b      	cmp	r3, r1
    5f38:	d301      	bcc.n	5f3e <__divsi3+0xc6>
    5f3a:	014b      	lsls	r3, r1, #5
    5f3c:	1ac0      	subs	r0, r0, r3
    5f3e:	4152      	adcs	r2, r2
    5f40:	0903      	lsrs	r3, r0, #4
    5f42:	428b      	cmp	r3, r1
    5f44:	d301      	bcc.n	5f4a <__divsi3+0xd2>
    5f46:	010b      	lsls	r3, r1, #4
    5f48:	1ac0      	subs	r0, r0, r3
    5f4a:	4152      	adcs	r2, r2
    5f4c:	08c3      	lsrs	r3, r0, #3
    5f4e:	428b      	cmp	r3, r1
    5f50:	d301      	bcc.n	5f56 <__divsi3+0xde>
    5f52:	00cb      	lsls	r3, r1, #3
    5f54:	1ac0      	subs	r0, r0, r3
    5f56:	4152      	adcs	r2, r2
    5f58:	0883      	lsrs	r3, r0, #2
    5f5a:	428b      	cmp	r3, r1
    5f5c:	d301      	bcc.n	5f62 <__divsi3+0xea>
    5f5e:	008b      	lsls	r3, r1, #2
    5f60:	1ac0      	subs	r0, r0, r3
    5f62:	4152      	adcs	r2, r2
    5f64:	0843      	lsrs	r3, r0, #1
    5f66:	428b      	cmp	r3, r1
    5f68:	d301      	bcc.n	5f6e <__divsi3+0xf6>
    5f6a:	004b      	lsls	r3, r1, #1
    5f6c:	1ac0      	subs	r0, r0, r3
    5f6e:	4152      	adcs	r2, r2
    5f70:	1a41      	subs	r1, r0, r1
    5f72:	d200      	bcs.n	5f76 <__divsi3+0xfe>
    5f74:	4601      	mov	r1, r0
    5f76:	4152      	adcs	r2, r2
    5f78:	4610      	mov	r0, r2
    5f7a:	4770      	bx	lr
    5f7c:	e05d      	b.n	603a <__divsi3+0x1c2>
    5f7e:	0fca      	lsrs	r2, r1, #31
    5f80:	d000      	beq.n	5f84 <__divsi3+0x10c>
    5f82:	4249      	negs	r1, r1
    5f84:	1003      	asrs	r3, r0, #32
    5f86:	d300      	bcc.n	5f8a <__divsi3+0x112>
    5f88:	4240      	negs	r0, r0
    5f8a:	4053      	eors	r3, r2
    5f8c:	2200      	movs	r2, #0
    5f8e:	469c      	mov	ip, r3
    5f90:	0903      	lsrs	r3, r0, #4
    5f92:	428b      	cmp	r3, r1
    5f94:	d32d      	bcc.n	5ff2 <__divsi3+0x17a>
    5f96:	0a03      	lsrs	r3, r0, #8
    5f98:	428b      	cmp	r3, r1
    5f9a:	d312      	bcc.n	5fc2 <__divsi3+0x14a>
    5f9c:	22fc      	movs	r2, #252	; 0xfc
    5f9e:	0189      	lsls	r1, r1, #6
    5fa0:	ba12      	rev	r2, r2
    5fa2:	0a03      	lsrs	r3, r0, #8
    5fa4:	428b      	cmp	r3, r1
    5fa6:	d30c      	bcc.n	5fc2 <__divsi3+0x14a>
    5fa8:	0189      	lsls	r1, r1, #6
    5faa:	1192      	asrs	r2, r2, #6
    5fac:	428b      	cmp	r3, r1
    5fae:	d308      	bcc.n	5fc2 <__divsi3+0x14a>
    5fb0:	0189      	lsls	r1, r1, #6
    5fb2:	1192      	asrs	r2, r2, #6
    5fb4:	428b      	cmp	r3, r1
    5fb6:	d304      	bcc.n	5fc2 <__divsi3+0x14a>
    5fb8:	0189      	lsls	r1, r1, #6
    5fba:	d03a      	beq.n	6032 <__divsi3+0x1ba>
    5fbc:	1192      	asrs	r2, r2, #6
    5fbe:	e000      	b.n	5fc2 <__divsi3+0x14a>
    5fc0:	0989      	lsrs	r1, r1, #6
    5fc2:	09c3      	lsrs	r3, r0, #7
    5fc4:	428b      	cmp	r3, r1
    5fc6:	d301      	bcc.n	5fcc <__divsi3+0x154>
    5fc8:	01cb      	lsls	r3, r1, #7
    5fca:	1ac0      	subs	r0, r0, r3
    5fcc:	4152      	adcs	r2, r2
    5fce:	0983      	lsrs	r3, r0, #6
    5fd0:	428b      	cmp	r3, r1
    5fd2:	d301      	bcc.n	5fd8 <__divsi3+0x160>
    5fd4:	018b      	lsls	r3, r1, #6
    5fd6:	1ac0      	subs	r0, r0, r3
    5fd8:	4152      	adcs	r2, r2
    5fda:	0943      	lsrs	r3, r0, #5
    5fdc:	428b      	cmp	r3, r1
    5fde:	d301      	bcc.n	5fe4 <__divsi3+0x16c>
    5fe0:	014b      	lsls	r3, r1, #5
    5fe2:	1ac0      	subs	r0, r0, r3
    5fe4:	4152      	adcs	r2, r2
    5fe6:	0903      	lsrs	r3, r0, #4
    5fe8:	428b      	cmp	r3, r1
    5fea:	d301      	bcc.n	5ff0 <__divsi3+0x178>
    5fec:	010b      	lsls	r3, r1, #4
    5fee:	1ac0      	subs	r0, r0, r3
    5ff0:	4152      	adcs	r2, r2
    5ff2:	08c3      	lsrs	r3, r0, #3
    5ff4:	428b      	cmp	r3, r1
    5ff6:	d301      	bcc.n	5ffc <__divsi3+0x184>
    5ff8:	00cb      	lsls	r3, r1, #3
    5ffa:	1ac0      	subs	r0, r0, r3
    5ffc:	4152      	adcs	r2, r2
    5ffe:	0883      	lsrs	r3, r0, #2
    6000:	428b      	cmp	r3, r1
    6002:	d301      	bcc.n	6008 <__divsi3+0x190>
    6004:	008b      	lsls	r3, r1, #2
    6006:	1ac0      	subs	r0, r0, r3
    6008:	4152      	adcs	r2, r2
    600a:	d2d9      	bcs.n	5fc0 <__divsi3+0x148>
    600c:	0843      	lsrs	r3, r0, #1
    600e:	428b      	cmp	r3, r1
    6010:	d301      	bcc.n	6016 <__divsi3+0x19e>
    6012:	004b      	lsls	r3, r1, #1
    6014:	1ac0      	subs	r0, r0, r3
    6016:	4152      	adcs	r2, r2
    6018:	1a41      	subs	r1, r0, r1
    601a:	d200      	bcs.n	601e <__divsi3+0x1a6>
    601c:	4601      	mov	r1, r0
    601e:	4663      	mov	r3, ip
    6020:	4152      	adcs	r2, r2
    6022:	105b      	asrs	r3, r3, #1
    6024:	4610      	mov	r0, r2
    6026:	d301      	bcc.n	602c <__divsi3+0x1b4>
    6028:	4240      	negs	r0, r0
    602a:	2b00      	cmp	r3, #0
    602c:	d500      	bpl.n	6030 <__divsi3+0x1b8>
    602e:	4249      	negs	r1, r1
    6030:	4770      	bx	lr
    6032:	4663      	mov	r3, ip
    6034:	105b      	asrs	r3, r3, #1
    6036:	d300      	bcc.n	603a <__divsi3+0x1c2>
    6038:	4240      	negs	r0, r0
    603a:	b501      	push	{r0, lr}
    603c:	2000      	movs	r0, #0
    603e:	f000 f805 	bl	604c <__aeabi_idiv0>
    6042:	bd02      	pop	{r1, pc}

00006044 <__aeabi_idivmod>:
    6044:	2900      	cmp	r1, #0
    6046:	d0f8      	beq.n	603a <__divsi3+0x1c2>
    6048:	e716      	b.n	5e78 <__divsi3>
    604a:	4770      	bx	lr

0000604c <__aeabi_idiv0>:
    604c:	4770      	bx	lr
    604e:	46c0      	nop			; (mov r8, r8)

00006050 <__aeabi_cdrcmple>:
    6050:	4684      	mov	ip, r0
    6052:	1c10      	adds	r0, r2, #0
    6054:	4662      	mov	r2, ip
    6056:	468c      	mov	ip, r1
    6058:	1c19      	adds	r1, r3, #0
    605a:	4663      	mov	r3, ip
    605c:	e000      	b.n	6060 <__aeabi_cdcmpeq>
    605e:	46c0      	nop			; (mov r8, r8)

00006060 <__aeabi_cdcmpeq>:
    6060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6062:	f001 fc6b 	bl	793c <__ledf2>
    6066:	2800      	cmp	r0, #0
    6068:	d401      	bmi.n	606e <__aeabi_cdcmpeq+0xe>
    606a:	2100      	movs	r1, #0
    606c:	42c8      	cmn	r0, r1
    606e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006070 <__aeabi_dcmpeq>:
    6070:	b510      	push	{r4, lr}
    6072:	f001 fbc5 	bl	7800 <__eqdf2>
    6076:	4240      	negs	r0, r0
    6078:	3001      	adds	r0, #1
    607a:	bd10      	pop	{r4, pc}

0000607c <__aeabi_dcmplt>:
    607c:	b510      	push	{r4, lr}
    607e:	f001 fc5d 	bl	793c <__ledf2>
    6082:	2800      	cmp	r0, #0
    6084:	db01      	blt.n	608a <__aeabi_dcmplt+0xe>
    6086:	2000      	movs	r0, #0
    6088:	bd10      	pop	{r4, pc}
    608a:	2001      	movs	r0, #1
    608c:	bd10      	pop	{r4, pc}
    608e:	46c0      	nop			; (mov r8, r8)

00006090 <__aeabi_dcmple>:
    6090:	b510      	push	{r4, lr}
    6092:	f001 fc53 	bl	793c <__ledf2>
    6096:	2800      	cmp	r0, #0
    6098:	dd01      	ble.n	609e <__aeabi_dcmple+0xe>
    609a:	2000      	movs	r0, #0
    609c:	bd10      	pop	{r4, pc}
    609e:	2001      	movs	r0, #1
    60a0:	bd10      	pop	{r4, pc}
    60a2:	46c0      	nop			; (mov r8, r8)

000060a4 <__aeabi_dcmpgt>:
    60a4:	b510      	push	{r4, lr}
    60a6:	f001 fbe5 	bl	7874 <__gedf2>
    60aa:	2800      	cmp	r0, #0
    60ac:	dc01      	bgt.n	60b2 <__aeabi_dcmpgt+0xe>
    60ae:	2000      	movs	r0, #0
    60b0:	bd10      	pop	{r4, pc}
    60b2:	2001      	movs	r0, #1
    60b4:	bd10      	pop	{r4, pc}
    60b6:	46c0      	nop			; (mov r8, r8)

000060b8 <__aeabi_dcmpge>:
    60b8:	b510      	push	{r4, lr}
    60ba:	f001 fbdb 	bl	7874 <__gedf2>
    60be:	2800      	cmp	r0, #0
    60c0:	da01      	bge.n	60c6 <__aeabi_dcmpge+0xe>
    60c2:	2000      	movs	r0, #0
    60c4:	bd10      	pop	{r4, pc}
    60c6:	2001      	movs	r0, #1
    60c8:	bd10      	pop	{r4, pc}
    60ca:	46c0      	nop			; (mov r8, r8)

000060cc <__aeabi_cfrcmple>:
    60cc:	4684      	mov	ip, r0
    60ce:	1c08      	adds	r0, r1, #0
    60d0:	4661      	mov	r1, ip
    60d2:	e7ff      	b.n	60d4 <__aeabi_cfcmpeq>

000060d4 <__aeabi_cfcmpeq>:
    60d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    60d6:	f000 fb9d 	bl	6814 <__lesf2>
    60da:	2800      	cmp	r0, #0
    60dc:	d401      	bmi.n	60e2 <__aeabi_cfcmpeq+0xe>
    60de:	2100      	movs	r1, #0
    60e0:	42c8      	cmn	r0, r1
    60e2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000060e4 <__aeabi_fcmpeq>:
    60e4:	b510      	push	{r4, lr}
    60e6:	f000 fb2f 	bl	6748 <__eqsf2>
    60ea:	4240      	negs	r0, r0
    60ec:	3001      	adds	r0, #1
    60ee:	bd10      	pop	{r4, pc}

000060f0 <__aeabi_fcmplt>:
    60f0:	b510      	push	{r4, lr}
    60f2:	f000 fb8f 	bl	6814 <__lesf2>
    60f6:	2800      	cmp	r0, #0
    60f8:	db01      	blt.n	60fe <__aeabi_fcmplt+0xe>
    60fa:	2000      	movs	r0, #0
    60fc:	bd10      	pop	{r4, pc}
    60fe:	2001      	movs	r0, #1
    6100:	bd10      	pop	{r4, pc}
    6102:	46c0      	nop			; (mov r8, r8)

00006104 <__aeabi_fcmple>:
    6104:	b510      	push	{r4, lr}
    6106:	f000 fb85 	bl	6814 <__lesf2>
    610a:	2800      	cmp	r0, #0
    610c:	dd01      	ble.n	6112 <__aeabi_fcmple+0xe>
    610e:	2000      	movs	r0, #0
    6110:	bd10      	pop	{r4, pc}
    6112:	2001      	movs	r0, #1
    6114:	bd10      	pop	{r4, pc}
    6116:	46c0      	nop			; (mov r8, r8)

00006118 <__aeabi_fcmpgt>:
    6118:	b510      	push	{r4, lr}
    611a:	f000 fb3b 	bl	6794 <__gesf2>
    611e:	2800      	cmp	r0, #0
    6120:	dc01      	bgt.n	6126 <__aeabi_fcmpgt+0xe>
    6122:	2000      	movs	r0, #0
    6124:	bd10      	pop	{r4, pc}
    6126:	2001      	movs	r0, #1
    6128:	bd10      	pop	{r4, pc}
    612a:	46c0      	nop			; (mov r8, r8)

0000612c <__aeabi_fcmpge>:
    612c:	b510      	push	{r4, lr}
    612e:	f000 fb31 	bl	6794 <__gesf2>
    6132:	2800      	cmp	r0, #0
    6134:	da01      	bge.n	613a <__aeabi_fcmpge+0xe>
    6136:	2000      	movs	r0, #0
    6138:	bd10      	pop	{r4, pc}
    613a:	2001      	movs	r0, #1
    613c:	bd10      	pop	{r4, pc}
    613e:	46c0      	nop			; (mov r8, r8)

00006140 <__aeabi_lmul>:
    6140:	b5f0      	push	{r4, r5, r6, r7, lr}
    6142:	46ce      	mov	lr, r9
    6144:	4647      	mov	r7, r8
    6146:	0415      	lsls	r5, r2, #16
    6148:	0c2d      	lsrs	r5, r5, #16
    614a:	002e      	movs	r6, r5
    614c:	b580      	push	{r7, lr}
    614e:	0407      	lsls	r7, r0, #16
    6150:	0c14      	lsrs	r4, r2, #16
    6152:	0c3f      	lsrs	r7, r7, #16
    6154:	4699      	mov	r9, r3
    6156:	0c03      	lsrs	r3, r0, #16
    6158:	437e      	muls	r6, r7
    615a:	435d      	muls	r5, r3
    615c:	4367      	muls	r7, r4
    615e:	4363      	muls	r3, r4
    6160:	197f      	adds	r7, r7, r5
    6162:	0c34      	lsrs	r4, r6, #16
    6164:	19e4      	adds	r4, r4, r7
    6166:	469c      	mov	ip, r3
    6168:	42a5      	cmp	r5, r4
    616a:	d903      	bls.n	6174 <__aeabi_lmul+0x34>
    616c:	2380      	movs	r3, #128	; 0x80
    616e:	025b      	lsls	r3, r3, #9
    6170:	4698      	mov	r8, r3
    6172:	44c4      	add	ip, r8
    6174:	464b      	mov	r3, r9
    6176:	4351      	muls	r1, r2
    6178:	4343      	muls	r3, r0
    617a:	0436      	lsls	r6, r6, #16
    617c:	0c36      	lsrs	r6, r6, #16
    617e:	0c25      	lsrs	r5, r4, #16
    6180:	0424      	lsls	r4, r4, #16
    6182:	4465      	add	r5, ip
    6184:	19a4      	adds	r4, r4, r6
    6186:	1859      	adds	r1, r3, r1
    6188:	1949      	adds	r1, r1, r5
    618a:	0020      	movs	r0, r4
    618c:	bc0c      	pop	{r2, r3}
    618e:	4690      	mov	r8, r2
    6190:	4699      	mov	r9, r3
    6192:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006194 <__aeabi_fadd>:
    6194:	b5f0      	push	{r4, r5, r6, r7, lr}
    6196:	46c6      	mov	lr, r8
    6198:	024e      	lsls	r6, r1, #9
    619a:	0247      	lsls	r7, r0, #9
    619c:	0a76      	lsrs	r6, r6, #9
    619e:	0a7b      	lsrs	r3, r7, #9
    61a0:	0044      	lsls	r4, r0, #1
    61a2:	0fc5      	lsrs	r5, r0, #31
    61a4:	00f7      	lsls	r7, r6, #3
    61a6:	0048      	lsls	r0, r1, #1
    61a8:	4698      	mov	r8, r3
    61aa:	b500      	push	{lr}
    61ac:	0e24      	lsrs	r4, r4, #24
    61ae:	002a      	movs	r2, r5
    61b0:	00db      	lsls	r3, r3, #3
    61b2:	0e00      	lsrs	r0, r0, #24
    61b4:	0fc9      	lsrs	r1, r1, #31
    61b6:	46bc      	mov	ip, r7
    61b8:	428d      	cmp	r5, r1
    61ba:	d067      	beq.n	628c <__aeabi_fadd+0xf8>
    61bc:	1a22      	subs	r2, r4, r0
    61be:	2a00      	cmp	r2, #0
    61c0:	dc00      	bgt.n	61c4 <__aeabi_fadd+0x30>
    61c2:	e0a5      	b.n	6310 <__aeabi_fadd+0x17c>
    61c4:	2800      	cmp	r0, #0
    61c6:	d13a      	bne.n	623e <__aeabi_fadd+0xaa>
    61c8:	2f00      	cmp	r7, #0
    61ca:	d100      	bne.n	61ce <__aeabi_fadd+0x3a>
    61cc:	e093      	b.n	62f6 <__aeabi_fadd+0x162>
    61ce:	1e51      	subs	r1, r2, #1
    61d0:	2900      	cmp	r1, #0
    61d2:	d000      	beq.n	61d6 <__aeabi_fadd+0x42>
    61d4:	e0bc      	b.n	6350 <__aeabi_fadd+0x1bc>
    61d6:	2401      	movs	r4, #1
    61d8:	1bdb      	subs	r3, r3, r7
    61da:	015a      	lsls	r2, r3, #5
    61dc:	d546      	bpl.n	626c <__aeabi_fadd+0xd8>
    61de:	019b      	lsls	r3, r3, #6
    61e0:	099e      	lsrs	r6, r3, #6
    61e2:	0030      	movs	r0, r6
    61e4:	f002 fb4c 	bl	8880 <__clzsi2>
    61e8:	3805      	subs	r0, #5
    61ea:	4086      	lsls	r6, r0
    61ec:	4284      	cmp	r4, r0
    61ee:	dd00      	ble.n	61f2 <__aeabi_fadd+0x5e>
    61f0:	e09d      	b.n	632e <__aeabi_fadd+0x19a>
    61f2:	1b04      	subs	r4, r0, r4
    61f4:	0032      	movs	r2, r6
    61f6:	2020      	movs	r0, #32
    61f8:	3401      	adds	r4, #1
    61fa:	40e2      	lsrs	r2, r4
    61fc:	1b04      	subs	r4, r0, r4
    61fe:	40a6      	lsls	r6, r4
    6200:	0033      	movs	r3, r6
    6202:	1e5e      	subs	r6, r3, #1
    6204:	41b3      	sbcs	r3, r6
    6206:	2400      	movs	r4, #0
    6208:	4313      	orrs	r3, r2
    620a:	075a      	lsls	r2, r3, #29
    620c:	d004      	beq.n	6218 <__aeabi_fadd+0x84>
    620e:	220f      	movs	r2, #15
    6210:	401a      	ands	r2, r3
    6212:	2a04      	cmp	r2, #4
    6214:	d000      	beq.n	6218 <__aeabi_fadd+0x84>
    6216:	3304      	adds	r3, #4
    6218:	015a      	lsls	r2, r3, #5
    621a:	d529      	bpl.n	6270 <__aeabi_fadd+0xdc>
    621c:	3401      	adds	r4, #1
    621e:	2cff      	cmp	r4, #255	; 0xff
    6220:	d100      	bne.n	6224 <__aeabi_fadd+0x90>
    6222:	e081      	b.n	6328 <__aeabi_fadd+0x194>
    6224:	002a      	movs	r2, r5
    6226:	019b      	lsls	r3, r3, #6
    6228:	0a5b      	lsrs	r3, r3, #9
    622a:	b2e4      	uxtb	r4, r4
    622c:	025b      	lsls	r3, r3, #9
    622e:	05e4      	lsls	r4, r4, #23
    6230:	0a58      	lsrs	r0, r3, #9
    6232:	07d2      	lsls	r2, r2, #31
    6234:	4320      	orrs	r0, r4
    6236:	4310      	orrs	r0, r2
    6238:	bc04      	pop	{r2}
    623a:	4690      	mov	r8, r2
    623c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    623e:	2cff      	cmp	r4, #255	; 0xff
    6240:	d0e3      	beq.n	620a <__aeabi_fadd+0x76>
    6242:	2180      	movs	r1, #128	; 0x80
    6244:	0038      	movs	r0, r7
    6246:	04c9      	lsls	r1, r1, #19
    6248:	4308      	orrs	r0, r1
    624a:	4684      	mov	ip, r0
    624c:	2a1b      	cmp	r2, #27
    624e:	dd00      	ble.n	6252 <__aeabi_fadd+0xbe>
    6250:	e082      	b.n	6358 <__aeabi_fadd+0x1c4>
    6252:	2020      	movs	r0, #32
    6254:	4661      	mov	r1, ip
    6256:	40d1      	lsrs	r1, r2
    6258:	1a82      	subs	r2, r0, r2
    625a:	4660      	mov	r0, ip
    625c:	4090      	lsls	r0, r2
    625e:	0002      	movs	r2, r0
    6260:	1e50      	subs	r0, r2, #1
    6262:	4182      	sbcs	r2, r0
    6264:	430a      	orrs	r2, r1
    6266:	1a9b      	subs	r3, r3, r2
    6268:	015a      	lsls	r2, r3, #5
    626a:	d4b8      	bmi.n	61de <__aeabi_fadd+0x4a>
    626c:	075a      	lsls	r2, r3, #29
    626e:	d1ce      	bne.n	620e <__aeabi_fadd+0x7a>
    6270:	08de      	lsrs	r6, r3, #3
    6272:	002a      	movs	r2, r5
    6274:	2cff      	cmp	r4, #255	; 0xff
    6276:	d13a      	bne.n	62ee <__aeabi_fadd+0x15a>
    6278:	2e00      	cmp	r6, #0
    627a:	d100      	bne.n	627e <__aeabi_fadd+0xea>
    627c:	e0ae      	b.n	63dc <__aeabi_fadd+0x248>
    627e:	2380      	movs	r3, #128	; 0x80
    6280:	03db      	lsls	r3, r3, #15
    6282:	4333      	orrs	r3, r6
    6284:	025b      	lsls	r3, r3, #9
    6286:	0a5b      	lsrs	r3, r3, #9
    6288:	24ff      	movs	r4, #255	; 0xff
    628a:	e7cf      	b.n	622c <__aeabi_fadd+0x98>
    628c:	1a21      	subs	r1, r4, r0
    628e:	2900      	cmp	r1, #0
    6290:	dd52      	ble.n	6338 <__aeabi_fadd+0x1a4>
    6292:	2800      	cmp	r0, #0
    6294:	d031      	beq.n	62fa <__aeabi_fadd+0x166>
    6296:	2cff      	cmp	r4, #255	; 0xff
    6298:	d0b7      	beq.n	620a <__aeabi_fadd+0x76>
    629a:	2080      	movs	r0, #128	; 0x80
    629c:	003e      	movs	r6, r7
    629e:	04c0      	lsls	r0, r0, #19
    62a0:	4306      	orrs	r6, r0
    62a2:	46b4      	mov	ip, r6
    62a4:	291b      	cmp	r1, #27
    62a6:	dd00      	ble.n	62aa <__aeabi_fadd+0x116>
    62a8:	e0aa      	b.n	6400 <__aeabi_fadd+0x26c>
    62aa:	2620      	movs	r6, #32
    62ac:	4660      	mov	r0, ip
    62ae:	40c8      	lsrs	r0, r1
    62b0:	1a71      	subs	r1, r6, r1
    62b2:	4666      	mov	r6, ip
    62b4:	408e      	lsls	r6, r1
    62b6:	0031      	movs	r1, r6
    62b8:	1e4e      	subs	r6, r1, #1
    62ba:	41b1      	sbcs	r1, r6
    62bc:	4301      	orrs	r1, r0
    62be:	185b      	adds	r3, r3, r1
    62c0:	0159      	lsls	r1, r3, #5
    62c2:	d5d3      	bpl.n	626c <__aeabi_fadd+0xd8>
    62c4:	3401      	adds	r4, #1
    62c6:	2cff      	cmp	r4, #255	; 0xff
    62c8:	d100      	bne.n	62cc <__aeabi_fadd+0x138>
    62ca:	e087      	b.n	63dc <__aeabi_fadd+0x248>
    62cc:	2201      	movs	r2, #1
    62ce:	4978      	ldr	r1, [pc, #480]	; (64b0 <__aeabi_fadd+0x31c>)
    62d0:	401a      	ands	r2, r3
    62d2:	085b      	lsrs	r3, r3, #1
    62d4:	400b      	ands	r3, r1
    62d6:	4313      	orrs	r3, r2
    62d8:	e797      	b.n	620a <__aeabi_fadd+0x76>
    62da:	2c00      	cmp	r4, #0
    62dc:	d000      	beq.n	62e0 <__aeabi_fadd+0x14c>
    62de:	e0a7      	b.n	6430 <__aeabi_fadd+0x29c>
    62e0:	2b00      	cmp	r3, #0
    62e2:	d000      	beq.n	62e6 <__aeabi_fadd+0x152>
    62e4:	e0b6      	b.n	6454 <__aeabi_fadd+0x2c0>
    62e6:	1e3b      	subs	r3, r7, #0
    62e8:	d162      	bne.n	63b0 <__aeabi_fadd+0x21c>
    62ea:	2600      	movs	r6, #0
    62ec:	2200      	movs	r2, #0
    62ee:	0273      	lsls	r3, r6, #9
    62f0:	0a5b      	lsrs	r3, r3, #9
    62f2:	b2e4      	uxtb	r4, r4
    62f4:	e79a      	b.n	622c <__aeabi_fadd+0x98>
    62f6:	0014      	movs	r4, r2
    62f8:	e787      	b.n	620a <__aeabi_fadd+0x76>
    62fa:	2f00      	cmp	r7, #0
    62fc:	d04d      	beq.n	639a <__aeabi_fadd+0x206>
    62fe:	1e48      	subs	r0, r1, #1
    6300:	2800      	cmp	r0, #0
    6302:	d157      	bne.n	63b4 <__aeabi_fadd+0x220>
    6304:	4463      	add	r3, ip
    6306:	2401      	movs	r4, #1
    6308:	015a      	lsls	r2, r3, #5
    630a:	d5af      	bpl.n	626c <__aeabi_fadd+0xd8>
    630c:	2402      	movs	r4, #2
    630e:	e7dd      	b.n	62cc <__aeabi_fadd+0x138>
    6310:	2a00      	cmp	r2, #0
    6312:	d124      	bne.n	635e <__aeabi_fadd+0x1ca>
    6314:	1c62      	adds	r2, r4, #1
    6316:	b2d2      	uxtb	r2, r2
    6318:	2a01      	cmp	r2, #1
    631a:	ddde      	ble.n	62da <__aeabi_fadd+0x146>
    631c:	1bde      	subs	r6, r3, r7
    631e:	0172      	lsls	r2, r6, #5
    6320:	d535      	bpl.n	638e <__aeabi_fadd+0x1fa>
    6322:	1afe      	subs	r6, r7, r3
    6324:	000d      	movs	r5, r1
    6326:	e75c      	b.n	61e2 <__aeabi_fadd+0x4e>
    6328:	002a      	movs	r2, r5
    632a:	2300      	movs	r3, #0
    632c:	e77e      	b.n	622c <__aeabi_fadd+0x98>
    632e:	0033      	movs	r3, r6
    6330:	4a60      	ldr	r2, [pc, #384]	; (64b4 <__aeabi_fadd+0x320>)
    6332:	1a24      	subs	r4, r4, r0
    6334:	4013      	ands	r3, r2
    6336:	e768      	b.n	620a <__aeabi_fadd+0x76>
    6338:	2900      	cmp	r1, #0
    633a:	d163      	bne.n	6404 <__aeabi_fadd+0x270>
    633c:	1c61      	adds	r1, r4, #1
    633e:	b2c8      	uxtb	r0, r1
    6340:	2801      	cmp	r0, #1
    6342:	dd4e      	ble.n	63e2 <__aeabi_fadd+0x24e>
    6344:	29ff      	cmp	r1, #255	; 0xff
    6346:	d049      	beq.n	63dc <__aeabi_fadd+0x248>
    6348:	4463      	add	r3, ip
    634a:	085b      	lsrs	r3, r3, #1
    634c:	000c      	movs	r4, r1
    634e:	e75c      	b.n	620a <__aeabi_fadd+0x76>
    6350:	2aff      	cmp	r2, #255	; 0xff
    6352:	d041      	beq.n	63d8 <__aeabi_fadd+0x244>
    6354:	000a      	movs	r2, r1
    6356:	e779      	b.n	624c <__aeabi_fadd+0xb8>
    6358:	2201      	movs	r2, #1
    635a:	1a9b      	subs	r3, r3, r2
    635c:	e784      	b.n	6268 <__aeabi_fadd+0xd4>
    635e:	2c00      	cmp	r4, #0
    6360:	d01d      	beq.n	639e <__aeabi_fadd+0x20a>
    6362:	28ff      	cmp	r0, #255	; 0xff
    6364:	d022      	beq.n	63ac <__aeabi_fadd+0x218>
    6366:	2480      	movs	r4, #128	; 0x80
    6368:	04e4      	lsls	r4, r4, #19
    636a:	4252      	negs	r2, r2
    636c:	4323      	orrs	r3, r4
    636e:	2a1b      	cmp	r2, #27
    6370:	dd00      	ble.n	6374 <__aeabi_fadd+0x1e0>
    6372:	e08a      	b.n	648a <__aeabi_fadd+0x2f6>
    6374:	001c      	movs	r4, r3
    6376:	2520      	movs	r5, #32
    6378:	40d4      	lsrs	r4, r2
    637a:	1aaa      	subs	r2, r5, r2
    637c:	4093      	lsls	r3, r2
    637e:	1e5a      	subs	r2, r3, #1
    6380:	4193      	sbcs	r3, r2
    6382:	4323      	orrs	r3, r4
    6384:	4662      	mov	r2, ip
    6386:	0004      	movs	r4, r0
    6388:	1ad3      	subs	r3, r2, r3
    638a:	000d      	movs	r5, r1
    638c:	e725      	b.n	61da <__aeabi_fadd+0x46>
    638e:	2e00      	cmp	r6, #0
    6390:	d000      	beq.n	6394 <__aeabi_fadd+0x200>
    6392:	e726      	b.n	61e2 <__aeabi_fadd+0x4e>
    6394:	2200      	movs	r2, #0
    6396:	2400      	movs	r4, #0
    6398:	e7a9      	b.n	62ee <__aeabi_fadd+0x15a>
    639a:	000c      	movs	r4, r1
    639c:	e735      	b.n	620a <__aeabi_fadd+0x76>
    639e:	2b00      	cmp	r3, #0
    63a0:	d04d      	beq.n	643e <__aeabi_fadd+0x2aa>
    63a2:	43d2      	mvns	r2, r2
    63a4:	2a00      	cmp	r2, #0
    63a6:	d0ed      	beq.n	6384 <__aeabi_fadd+0x1f0>
    63a8:	28ff      	cmp	r0, #255	; 0xff
    63aa:	d1e0      	bne.n	636e <__aeabi_fadd+0x1da>
    63ac:	4663      	mov	r3, ip
    63ae:	24ff      	movs	r4, #255	; 0xff
    63b0:	000d      	movs	r5, r1
    63b2:	e72a      	b.n	620a <__aeabi_fadd+0x76>
    63b4:	29ff      	cmp	r1, #255	; 0xff
    63b6:	d00f      	beq.n	63d8 <__aeabi_fadd+0x244>
    63b8:	0001      	movs	r1, r0
    63ba:	e773      	b.n	62a4 <__aeabi_fadd+0x110>
    63bc:	2b00      	cmp	r3, #0
    63be:	d061      	beq.n	6484 <__aeabi_fadd+0x2f0>
    63c0:	24ff      	movs	r4, #255	; 0xff
    63c2:	2f00      	cmp	r7, #0
    63c4:	d100      	bne.n	63c8 <__aeabi_fadd+0x234>
    63c6:	e720      	b.n	620a <__aeabi_fadd+0x76>
    63c8:	2280      	movs	r2, #128	; 0x80
    63ca:	4641      	mov	r1, r8
    63cc:	03d2      	lsls	r2, r2, #15
    63ce:	4211      	tst	r1, r2
    63d0:	d002      	beq.n	63d8 <__aeabi_fadd+0x244>
    63d2:	4216      	tst	r6, r2
    63d4:	d100      	bne.n	63d8 <__aeabi_fadd+0x244>
    63d6:	003b      	movs	r3, r7
    63d8:	24ff      	movs	r4, #255	; 0xff
    63da:	e716      	b.n	620a <__aeabi_fadd+0x76>
    63dc:	24ff      	movs	r4, #255	; 0xff
    63de:	2300      	movs	r3, #0
    63e0:	e724      	b.n	622c <__aeabi_fadd+0x98>
    63e2:	2c00      	cmp	r4, #0
    63e4:	d1ea      	bne.n	63bc <__aeabi_fadd+0x228>
    63e6:	2b00      	cmp	r3, #0
    63e8:	d058      	beq.n	649c <__aeabi_fadd+0x308>
    63ea:	2f00      	cmp	r7, #0
    63ec:	d100      	bne.n	63f0 <__aeabi_fadd+0x25c>
    63ee:	e70c      	b.n	620a <__aeabi_fadd+0x76>
    63f0:	4463      	add	r3, ip
    63f2:	015a      	lsls	r2, r3, #5
    63f4:	d400      	bmi.n	63f8 <__aeabi_fadd+0x264>
    63f6:	e739      	b.n	626c <__aeabi_fadd+0xd8>
    63f8:	4a2e      	ldr	r2, [pc, #184]	; (64b4 <__aeabi_fadd+0x320>)
    63fa:	000c      	movs	r4, r1
    63fc:	4013      	ands	r3, r2
    63fe:	e704      	b.n	620a <__aeabi_fadd+0x76>
    6400:	2101      	movs	r1, #1
    6402:	e75c      	b.n	62be <__aeabi_fadd+0x12a>
    6404:	2c00      	cmp	r4, #0
    6406:	d11e      	bne.n	6446 <__aeabi_fadd+0x2b2>
    6408:	2b00      	cmp	r3, #0
    640a:	d040      	beq.n	648e <__aeabi_fadd+0x2fa>
    640c:	43c9      	mvns	r1, r1
    640e:	2900      	cmp	r1, #0
    6410:	d00b      	beq.n	642a <__aeabi_fadd+0x296>
    6412:	28ff      	cmp	r0, #255	; 0xff
    6414:	d036      	beq.n	6484 <__aeabi_fadd+0x2f0>
    6416:	291b      	cmp	r1, #27
    6418:	dc47      	bgt.n	64aa <__aeabi_fadd+0x316>
    641a:	001c      	movs	r4, r3
    641c:	2620      	movs	r6, #32
    641e:	40cc      	lsrs	r4, r1
    6420:	1a71      	subs	r1, r6, r1
    6422:	408b      	lsls	r3, r1
    6424:	1e59      	subs	r1, r3, #1
    6426:	418b      	sbcs	r3, r1
    6428:	4323      	orrs	r3, r4
    642a:	4463      	add	r3, ip
    642c:	0004      	movs	r4, r0
    642e:	e747      	b.n	62c0 <__aeabi_fadd+0x12c>
    6430:	2b00      	cmp	r3, #0
    6432:	d118      	bne.n	6466 <__aeabi_fadd+0x2d2>
    6434:	1e3b      	subs	r3, r7, #0
    6436:	d02d      	beq.n	6494 <__aeabi_fadd+0x300>
    6438:	000d      	movs	r5, r1
    643a:	24ff      	movs	r4, #255	; 0xff
    643c:	e6e5      	b.n	620a <__aeabi_fadd+0x76>
    643e:	003b      	movs	r3, r7
    6440:	0004      	movs	r4, r0
    6442:	000d      	movs	r5, r1
    6444:	e6e1      	b.n	620a <__aeabi_fadd+0x76>
    6446:	28ff      	cmp	r0, #255	; 0xff
    6448:	d01c      	beq.n	6484 <__aeabi_fadd+0x2f0>
    644a:	2480      	movs	r4, #128	; 0x80
    644c:	04e4      	lsls	r4, r4, #19
    644e:	4249      	negs	r1, r1
    6450:	4323      	orrs	r3, r4
    6452:	e7e0      	b.n	6416 <__aeabi_fadd+0x282>
    6454:	2f00      	cmp	r7, #0
    6456:	d100      	bne.n	645a <__aeabi_fadd+0x2c6>
    6458:	e6d7      	b.n	620a <__aeabi_fadd+0x76>
    645a:	1bde      	subs	r6, r3, r7
    645c:	0172      	lsls	r2, r6, #5
    645e:	d51f      	bpl.n	64a0 <__aeabi_fadd+0x30c>
    6460:	1afb      	subs	r3, r7, r3
    6462:	000d      	movs	r5, r1
    6464:	e6d1      	b.n	620a <__aeabi_fadd+0x76>
    6466:	24ff      	movs	r4, #255	; 0xff
    6468:	2f00      	cmp	r7, #0
    646a:	d100      	bne.n	646e <__aeabi_fadd+0x2da>
    646c:	e6cd      	b.n	620a <__aeabi_fadd+0x76>
    646e:	2280      	movs	r2, #128	; 0x80
    6470:	4640      	mov	r0, r8
    6472:	03d2      	lsls	r2, r2, #15
    6474:	4210      	tst	r0, r2
    6476:	d0af      	beq.n	63d8 <__aeabi_fadd+0x244>
    6478:	4216      	tst	r6, r2
    647a:	d1ad      	bne.n	63d8 <__aeabi_fadd+0x244>
    647c:	003b      	movs	r3, r7
    647e:	000d      	movs	r5, r1
    6480:	24ff      	movs	r4, #255	; 0xff
    6482:	e6c2      	b.n	620a <__aeabi_fadd+0x76>
    6484:	4663      	mov	r3, ip
    6486:	24ff      	movs	r4, #255	; 0xff
    6488:	e6bf      	b.n	620a <__aeabi_fadd+0x76>
    648a:	2301      	movs	r3, #1
    648c:	e77a      	b.n	6384 <__aeabi_fadd+0x1f0>
    648e:	003b      	movs	r3, r7
    6490:	0004      	movs	r4, r0
    6492:	e6ba      	b.n	620a <__aeabi_fadd+0x76>
    6494:	2680      	movs	r6, #128	; 0x80
    6496:	2200      	movs	r2, #0
    6498:	03f6      	lsls	r6, r6, #15
    649a:	e6f0      	b.n	627e <__aeabi_fadd+0xea>
    649c:	003b      	movs	r3, r7
    649e:	e6b4      	b.n	620a <__aeabi_fadd+0x76>
    64a0:	1e33      	subs	r3, r6, #0
    64a2:	d000      	beq.n	64a6 <__aeabi_fadd+0x312>
    64a4:	e6e2      	b.n	626c <__aeabi_fadd+0xd8>
    64a6:	2200      	movs	r2, #0
    64a8:	e721      	b.n	62ee <__aeabi_fadd+0x15a>
    64aa:	2301      	movs	r3, #1
    64ac:	e7bd      	b.n	642a <__aeabi_fadd+0x296>
    64ae:	46c0      	nop			; (mov r8, r8)
    64b0:	7dffffff 	.word	0x7dffffff
    64b4:	fbffffff 	.word	0xfbffffff

000064b8 <__aeabi_fdiv>:
    64b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    64ba:	4657      	mov	r7, sl
    64bc:	464e      	mov	r6, r9
    64be:	46de      	mov	lr, fp
    64c0:	4645      	mov	r5, r8
    64c2:	b5e0      	push	{r5, r6, r7, lr}
    64c4:	0244      	lsls	r4, r0, #9
    64c6:	0043      	lsls	r3, r0, #1
    64c8:	0fc6      	lsrs	r6, r0, #31
    64ca:	b083      	sub	sp, #12
    64cc:	1c0f      	adds	r7, r1, #0
    64ce:	0a64      	lsrs	r4, r4, #9
    64d0:	0e1b      	lsrs	r3, r3, #24
    64d2:	46b2      	mov	sl, r6
    64d4:	d053      	beq.n	657e <__aeabi_fdiv+0xc6>
    64d6:	2bff      	cmp	r3, #255	; 0xff
    64d8:	d027      	beq.n	652a <__aeabi_fdiv+0x72>
    64da:	2280      	movs	r2, #128	; 0x80
    64dc:	00e4      	lsls	r4, r4, #3
    64de:	04d2      	lsls	r2, r2, #19
    64e0:	4314      	orrs	r4, r2
    64e2:	227f      	movs	r2, #127	; 0x7f
    64e4:	4252      	negs	r2, r2
    64e6:	4690      	mov	r8, r2
    64e8:	4498      	add	r8, r3
    64ea:	2300      	movs	r3, #0
    64ec:	4699      	mov	r9, r3
    64ee:	469b      	mov	fp, r3
    64f0:	027d      	lsls	r5, r7, #9
    64f2:	0078      	lsls	r0, r7, #1
    64f4:	0ffb      	lsrs	r3, r7, #31
    64f6:	0a6d      	lsrs	r5, r5, #9
    64f8:	0e00      	lsrs	r0, r0, #24
    64fa:	9300      	str	r3, [sp, #0]
    64fc:	d024      	beq.n	6548 <__aeabi_fdiv+0x90>
    64fe:	28ff      	cmp	r0, #255	; 0xff
    6500:	d046      	beq.n	6590 <__aeabi_fdiv+0xd8>
    6502:	2380      	movs	r3, #128	; 0x80
    6504:	2100      	movs	r1, #0
    6506:	00ed      	lsls	r5, r5, #3
    6508:	04db      	lsls	r3, r3, #19
    650a:	431d      	orrs	r5, r3
    650c:	387f      	subs	r0, #127	; 0x7f
    650e:	4647      	mov	r7, r8
    6510:	1a38      	subs	r0, r7, r0
    6512:	464f      	mov	r7, r9
    6514:	430f      	orrs	r7, r1
    6516:	00bf      	lsls	r7, r7, #2
    6518:	46b9      	mov	r9, r7
    651a:	0033      	movs	r3, r6
    651c:	9a00      	ldr	r2, [sp, #0]
    651e:	4f87      	ldr	r7, [pc, #540]	; (673c <__aeabi_fdiv+0x284>)
    6520:	4053      	eors	r3, r2
    6522:	464a      	mov	r2, r9
    6524:	58ba      	ldr	r2, [r7, r2]
    6526:	9301      	str	r3, [sp, #4]
    6528:	4697      	mov	pc, r2
    652a:	2c00      	cmp	r4, #0
    652c:	d14e      	bne.n	65cc <__aeabi_fdiv+0x114>
    652e:	2308      	movs	r3, #8
    6530:	4699      	mov	r9, r3
    6532:	33f7      	adds	r3, #247	; 0xf7
    6534:	4698      	mov	r8, r3
    6536:	3bfd      	subs	r3, #253	; 0xfd
    6538:	469b      	mov	fp, r3
    653a:	027d      	lsls	r5, r7, #9
    653c:	0078      	lsls	r0, r7, #1
    653e:	0ffb      	lsrs	r3, r7, #31
    6540:	0a6d      	lsrs	r5, r5, #9
    6542:	0e00      	lsrs	r0, r0, #24
    6544:	9300      	str	r3, [sp, #0]
    6546:	d1da      	bne.n	64fe <__aeabi_fdiv+0x46>
    6548:	2d00      	cmp	r5, #0
    654a:	d126      	bne.n	659a <__aeabi_fdiv+0xe2>
    654c:	2000      	movs	r0, #0
    654e:	2101      	movs	r1, #1
    6550:	0033      	movs	r3, r6
    6552:	9a00      	ldr	r2, [sp, #0]
    6554:	4f7a      	ldr	r7, [pc, #488]	; (6740 <__aeabi_fdiv+0x288>)
    6556:	4053      	eors	r3, r2
    6558:	4642      	mov	r2, r8
    655a:	1a10      	subs	r0, r2, r0
    655c:	464a      	mov	r2, r9
    655e:	430a      	orrs	r2, r1
    6560:	0092      	lsls	r2, r2, #2
    6562:	58ba      	ldr	r2, [r7, r2]
    6564:	001d      	movs	r5, r3
    6566:	4697      	mov	pc, r2
    6568:	9b00      	ldr	r3, [sp, #0]
    656a:	002c      	movs	r4, r5
    656c:	469a      	mov	sl, r3
    656e:	468b      	mov	fp, r1
    6570:	465b      	mov	r3, fp
    6572:	2b02      	cmp	r3, #2
    6574:	d131      	bne.n	65da <__aeabi_fdiv+0x122>
    6576:	4653      	mov	r3, sl
    6578:	21ff      	movs	r1, #255	; 0xff
    657a:	2400      	movs	r4, #0
    657c:	e038      	b.n	65f0 <__aeabi_fdiv+0x138>
    657e:	2c00      	cmp	r4, #0
    6580:	d117      	bne.n	65b2 <__aeabi_fdiv+0xfa>
    6582:	2304      	movs	r3, #4
    6584:	4699      	mov	r9, r3
    6586:	2300      	movs	r3, #0
    6588:	4698      	mov	r8, r3
    658a:	3301      	adds	r3, #1
    658c:	469b      	mov	fp, r3
    658e:	e7af      	b.n	64f0 <__aeabi_fdiv+0x38>
    6590:	20ff      	movs	r0, #255	; 0xff
    6592:	2d00      	cmp	r5, #0
    6594:	d10b      	bne.n	65ae <__aeabi_fdiv+0xf6>
    6596:	2102      	movs	r1, #2
    6598:	e7da      	b.n	6550 <__aeabi_fdiv+0x98>
    659a:	0028      	movs	r0, r5
    659c:	f002 f970 	bl	8880 <__clzsi2>
    65a0:	1f43      	subs	r3, r0, #5
    65a2:	409d      	lsls	r5, r3
    65a4:	2376      	movs	r3, #118	; 0x76
    65a6:	425b      	negs	r3, r3
    65a8:	1a18      	subs	r0, r3, r0
    65aa:	2100      	movs	r1, #0
    65ac:	e7af      	b.n	650e <__aeabi_fdiv+0x56>
    65ae:	2103      	movs	r1, #3
    65b0:	e7ad      	b.n	650e <__aeabi_fdiv+0x56>
    65b2:	0020      	movs	r0, r4
    65b4:	f002 f964 	bl	8880 <__clzsi2>
    65b8:	1f43      	subs	r3, r0, #5
    65ba:	409c      	lsls	r4, r3
    65bc:	2376      	movs	r3, #118	; 0x76
    65be:	425b      	negs	r3, r3
    65c0:	1a1b      	subs	r3, r3, r0
    65c2:	4698      	mov	r8, r3
    65c4:	2300      	movs	r3, #0
    65c6:	4699      	mov	r9, r3
    65c8:	469b      	mov	fp, r3
    65ca:	e791      	b.n	64f0 <__aeabi_fdiv+0x38>
    65cc:	230c      	movs	r3, #12
    65ce:	4699      	mov	r9, r3
    65d0:	33f3      	adds	r3, #243	; 0xf3
    65d2:	4698      	mov	r8, r3
    65d4:	3bfc      	subs	r3, #252	; 0xfc
    65d6:	469b      	mov	fp, r3
    65d8:	e78a      	b.n	64f0 <__aeabi_fdiv+0x38>
    65da:	2b03      	cmp	r3, #3
    65dc:	d100      	bne.n	65e0 <__aeabi_fdiv+0x128>
    65de:	e0a5      	b.n	672c <__aeabi_fdiv+0x274>
    65e0:	4655      	mov	r5, sl
    65e2:	2b01      	cmp	r3, #1
    65e4:	d000      	beq.n	65e8 <__aeabi_fdiv+0x130>
    65e6:	e081      	b.n	66ec <__aeabi_fdiv+0x234>
    65e8:	2301      	movs	r3, #1
    65ea:	2100      	movs	r1, #0
    65ec:	2400      	movs	r4, #0
    65ee:	402b      	ands	r3, r5
    65f0:	0264      	lsls	r4, r4, #9
    65f2:	05c9      	lsls	r1, r1, #23
    65f4:	0a60      	lsrs	r0, r4, #9
    65f6:	07db      	lsls	r3, r3, #31
    65f8:	4308      	orrs	r0, r1
    65fa:	4318      	orrs	r0, r3
    65fc:	b003      	add	sp, #12
    65fe:	bc3c      	pop	{r2, r3, r4, r5}
    6600:	4690      	mov	r8, r2
    6602:	4699      	mov	r9, r3
    6604:	46a2      	mov	sl, r4
    6606:	46ab      	mov	fp, r5
    6608:	bdf0      	pop	{r4, r5, r6, r7, pc}
    660a:	2480      	movs	r4, #128	; 0x80
    660c:	2300      	movs	r3, #0
    660e:	03e4      	lsls	r4, r4, #15
    6610:	21ff      	movs	r1, #255	; 0xff
    6612:	e7ed      	b.n	65f0 <__aeabi_fdiv+0x138>
    6614:	21ff      	movs	r1, #255	; 0xff
    6616:	2400      	movs	r4, #0
    6618:	e7ea      	b.n	65f0 <__aeabi_fdiv+0x138>
    661a:	2301      	movs	r3, #1
    661c:	1a59      	subs	r1, r3, r1
    661e:	291b      	cmp	r1, #27
    6620:	dd66      	ble.n	66f0 <__aeabi_fdiv+0x238>
    6622:	9a01      	ldr	r2, [sp, #4]
    6624:	4013      	ands	r3, r2
    6626:	2100      	movs	r1, #0
    6628:	2400      	movs	r4, #0
    662a:	e7e1      	b.n	65f0 <__aeabi_fdiv+0x138>
    662c:	2380      	movs	r3, #128	; 0x80
    662e:	03db      	lsls	r3, r3, #15
    6630:	421c      	tst	r4, r3
    6632:	d038      	beq.n	66a6 <__aeabi_fdiv+0x1ee>
    6634:	421d      	tst	r5, r3
    6636:	d051      	beq.n	66dc <__aeabi_fdiv+0x224>
    6638:	431c      	orrs	r4, r3
    663a:	0264      	lsls	r4, r4, #9
    663c:	0a64      	lsrs	r4, r4, #9
    663e:	0033      	movs	r3, r6
    6640:	21ff      	movs	r1, #255	; 0xff
    6642:	e7d5      	b.n	65f0 <__aeabi_fdiv+0x138>
    6644:	0163      	lsls	r3, r4, #5
    6646:	016c      	lsls	r4, r5, #5
    6648:	42a3      	cmp	r3, r4
    664a:	d23b      	bcs.n	66c4 <__aeabi_fdiv+0x20c>
    664c:	261b      	movs	r6, #27
    664e:	2100      	movs	r1, #0
    6650:	3801      	subs	r0, #1
    6652:	2501      	movs	r5, #1
    6654:	001f      	movs	r7, r3
    6656:	0049      	lsls	r1, r1, #1
    6658:	005b      	lsls	r3, r3, #1
    665a:	2f00      	cmp	r7, #0
    665c:	db01      	blt.n	6662 <__aeabi_fdiv+0x1aa>
    665e:	429c      	cmp	r4, r3
    6660:	d801      	bhi.n	6666 <__aeabi_fdiv+0x1ae>
    6662:	1b1b      	subs	r3, r3, r4
    6664:	4329      	orrs	r1, r5
    6666:	3e01      	subs	r6, #1
    6668:	2e00      	cmp	r6, #0
    666a:	d1f3      	bne.n	6654 <__aeabi_fdiv+0x19c>
    666c:	001c      	movs	r4, r3
    666e:	1e63      	subs	r3, r4, #1
    6670:	419c      	sbcs	r4, r3
    6672:	430c      	orrs	r4, r1
    6674:	0001      	movs	r1, r0
    6676:	317f      	adds	r1, #127	; 0x7f
    6678:	2900      	cmp	r1, #0
    667a:	ddce      	ble.n	661a <__aeabi_fdiv+0x162>
    667c:	0763      	lsls	r3, r4, #29
    667e:	d004      	beq.n	668a <__aeabi_fdiv+0x1d2>
    6680:	230f      	movs	r3, #15
    6682:	4023      	ands	r3, r4
    6684:	2b04      	cmp	r3, #4
    6686:	d000      	beq.n	668a <__aeabi_fdiv+0x1d2>
    6688:	3404      	adds	r4, #4
    668a:	0123      	lsls	r3, r4, #4
    668c:	d503      	bpl.n	6696 <__aeabi_fdiv+0x1de>
    668e:	0001      	movs	r1, r0
    6690:	4b2c      	ldr	r3, [pc, #176]	; (6744 <__aeabi_fdiv+0x28c>)
    6692:	3180      	adds	r1, #128	; 0x80
    6694:	401c      	ands	r4, r3
    6696:	29fe      	cmp	r1, #254	; 0xfe
    6698:	dd0d      	ble.n	66b6 <__aeabi_fdiv+0x1fe>
    669a:	2301      	movs	r3, #1
    669c:	9a01      	ldr	r2, [sp, #4]
    669e:	21ff      	movs	r1, #255	; 0xff
    66a0:	4013      	ands	r3, r2
    66a2:	2400      	movs	r4, #0
    66a4:	e7a4      	b.n	65f0 <__aeabi_fdiv+0x138>
    66a6:	2380      	movs	r3, #128	; 0x80
    66a8:	03db      	lsls	r3, r3, #15
    66aa:	431c      	orrs	r4, r3
    66ac:	0264      	lsls	r4, r4, #9
    66ae:	0a64      	lsrs	r4, r4, #9
    66b0:	0033      	movs	r3, r6
    66b2:	21ff      	movs	r1, #255	; 0xff
    66b4:	e79c      	b.n	65f0 <__aeabi_fdiv+0x138>
    66b6:	2301      	movs	r3, #1
    66b8:	9a01      	ldr	r2, [sp, #4]
    66ba:	01a4      	lsls	r4, r4, #6
    66bc:	0a64      	lsrs	r4, r4, #9
    66be:	b2c9      	uxtb	r1, r1
    66c0:	4013      	ands	r3, r2
    66c2:	e795      	b.n	65f0 <__aeabi_fdiv+0x138>
    66c4:	1b1b      	subs	r3, r3, r4
    66c6:	261a      	movs	r6, #26
    66c8:	2101      	movs	r1, #1
    66ca:	e7c2      	b.n	6652 <__aeabi_fdiv+0x19a>
    66cc:	9b00      	ldr	r3, [sp, #0]
    66ce:	468b      	mov	fp, r1
    66d0:	469a      	mov	sl, r3
    66d2:	2400      	movs	r4, #0
    66d4:	e74c      	b.n	6570 <__aeabi_fdiv+0xb8>
    66d6:	0263      	lsls	r3, r4, #9
    66d8:	d5e5      	bpl.n	66a6 <__aeabi_fdiv+0x1ee>
    66da:	2500      	movs	r5, #0
    66dc:	2480      	movs	r4, #128	; 0x80
    66de:	03e4      	lsls	r4, r4, #15
    66e0:	432c      	orrs	r4, r5
    66e2:	0264      	lsls	r4, r4, #9
    66e4:	0a64      	lsrs	r4, r4, #9
    66e6:	9b00      	ldr	r3, [sp, #0]
    66e8:	21ff      	movs	r1, #255	; 0xff
    66ea:	e781      	b.n	65f0 <__aeabi_fdiv+0x138>
    66ec:	9501      	str	r5, [sp, #4]
    66ee:	e7c1      	b.n	6674 <__aeabi_fdiv+0x1bc>
    66f0:	0023      	movs	r3, r4
    66f2:	2020      	movs	r0, #32
    66f4:	40cb      	lsrs	r3, r1
    66f6:	1a41      	subs	r1, r0, r1
    66f8:	408c      	lsls	r4, r1
    66fa:	1e61      	subs	r1, r4, #1
    66fc:	418c      	sbcs	r4, r1
    66fe:	431c      	orrs	r4, r3
    6700:	0763      	lsls	r3, r4, #29
    6702:	d004      	beq.n	670e <__aeabi_fdiv+0x256>
    6704:	230f      	movs	r3, #15
    6706:	4023      	ands	r3, r4
    6708:	2b04      	cmp	r3, #4
    670a:	d000      	beq.n	670e <__aeabi_fdiv+0x256>
    670c:	3404      	adds	r4, #4
    670e:	0163      	lsls	r3, r4, #5
    6710:	d505      	bpl.n	671e <__aeabi_fdiv+0x266>
    6712:	2301      	movs	r3, #1
    6714:	9a01      	ldr	r2, [sp, #4]
    6716:	2101      	movs	r1, #1
    6718:	4013      	ands	r3, r2
    671a:	2400      	movs	r4, #0
    671c:	e768      	b.n	65f0 <__aeabi_fdiv+0x138>
    671e:	2301      	movs	r3, #1
    6720:	9a01      	ldr	r2, [sp, #4]
    6722:	01a4      	lsls	r4, r4, #6
    6724:	0a64      	lsrs	r4, r4, #9
    6726:	4013      	ands	r3, r2
    6728:	2100      	movs	r1, #0
    672a:	e761      	b.n	65f0 <__aeabi_fdiv+0x138>
    672c:	2380      	movs	r3, #128	; 0x80
    672e:	03db      	lsls	r3, r3, #15
    6730:	431c      	orrs	r4, r3
    6732:	0264      	lsls	r4, r4, #9
    6734:	0a64      	lsrs	r4, r4, #9
    6736:	4653      	mov	r3, sl
    6738:	21ff      	movs	r1, #255	; 0xff
    673a:	e759      	b.n	65f0 <__aeabi_fdiv+0x138>
    673c:	00008c60 	.word	0x00008c60
    6740:	00008ca0 	.word	0x00008ca0
    6744:	f7ffffff 	.word	0xf7ffffff

00006748 <__eqsf2>:
    6748:	b570      	push	{r4, r5, r6, lr}
    674a:	0042      	lsls	r2, r0, #1
    674c:	0245      	lsls	r5, r0, #9
    674e:	024e      	lsls	r6, r1, #9
    6750:	004c      	lsls	r4, r1, #1
    6752:	0fc3      	lsrs	r3, r0, #31
    6754:	0a6d      	lsrs	r5, r5, #9
    6756:	0e12      	lsrs	r2, r2, #24
    6758:	0a76      	lsrs	r6, r6, #9
    675a:	0e24      	lsrs	r4, r4, #24
    675c:	0fc9      	lsrs	r1, r1, #31
    675e:	2001      	movs	r0, #1
    6760:	2aff      	cmp	r2, #255	; 0xff
    6762:	d006      	beq.n	6772 <__eqsf2+0x2a>
    6764:	2cff      	cmp	r4, #255	; 0xff
    6766:	d003      	beq.n	6770 <__eqsf2+0x28>
    6768:	42a2      	cmp	r2, r4
    676a:	d101      	bne.n	6770 <__eqsf2+0x28>
    676c:	42b5      	cmp	r5, r6
    676e:	d006      	beq.n	677e <__eqsf2+0x36>
    6770:	bd70      	pop	{r4, r5, r6, pc}
    6772:	2d00      	cmp	r5, #0
    6774:	d1fc      	bne.n	6770 <__eqsf2+0x28>
    6776:	2cff      	cmp	r4, #255	; 0xff
    6778:	d1fa      	bne.n	6770 <__eqsf2+0x28>
    677a:	2e00      	cmp	r6, #0
    677c:	d1f8      	bne.n	6770 <__eqsf2+0x28>
    677e:	428b      	cmp	r3, r1
    6780:	d006      	beq.n	6790 <__eqsf2+0x48>
    6782:	2001      	movs	r0, #1
    6784:	2a00      	cmp	r2, #0
    6786:	d1f3      	bne.n	6770 <__eqsf2+0x28>
    6788:	0028      	movs	r0, r5
    678a:	1e45      	subs	r5, r0, #1
    678c:	41a8      	sbcs	r0, r5
    678e:	e7ef      	b.n	6770 <__eqsf2+0x28>
    6790:	2000      	movs	r0, #0
    6792:	e7ed      	b.n	6770 <__eqsf2+0x28>

00006794 <__gesf2>:
    6794:	b5f0      	push	{r4, r5, r6, r7, lr}
    6796:	0042      	lsls	r2, r0, #1
    6798:	0245      	lsls	r5, r0, #9
    679a:	024c      	lsls	r4, r1, #9
    679c:	0fc3      	lsrs	r3, r0, #31
    679e:	0048      	lsls	r0, r1, #1
    67a0:	0a6d      	lsrs	r5, r5, #9
    67a2:	0e12      	lsrs	r2, r2, #24
    67a4:	0a64      	lsrs	r4, r4, #9
    67a6:	0e00      	lsrs	r0, r0, #24
    67a8:	0fc9      	lsrs	r1, r1, #31
    67aa:	2aff      	cmp	r2, #255	; 0xff
    67ac:	d01e      	beq.n	67ec <__gesf2+0x58>
    67ae:	28ff      	cmp	r0, #255	; 0xff
    67b0:	d021      	beq.n	67f6 <__gesf2+0x62>
    67b2:	2a00      	cmp	r2, #0
    67b4:	d10a      	bne.n	67cc <__gesf2+0x38>
    67b6:	426e      	negs	r6, r5
    67b8:	416e      	adcs	r6, r5
    67ba:	b2f6      	uxtb	r6, r6
    67bc:	2800      	cmp	r0, #0
    67be:	d10f      	bne.n	67e0 <__gesf2+0x4c>
    67c0:	2c00      	cmp	r4, #0
    67c2:	d10d      	bne.n	67e0 <__gesf2+0x4c>
    67c4:	2000      	movs	r0, #0
    67c6:	2d00      	cmp	r5, #0
    67c8:	d009      	beq.n	67de <__gesf2+0x4a>
    67ca:	e005      	b.n	67d8 <__gesf2+0x44>
    67cc:	2800      	cmp	r0, #0
    67ce:	d101      	bne.n	67d4 <__gesf2+0x40>
    67d0:	2c00      	cmp	r4, #0
    67d2:	d001      	beq.n	67d8 <__gesf2+0x44>
    67d4:	428b      	cmp	r3, r1
    67d6:	d011      	beq.n	67fc <__gesf2+0x68>
    67d8:	2101      	movs	r1, #1
    67da:	4258      	negs	r0, r3
    67dc:	4308      	orrs	r0, r1
    67de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67e0:	2e00      	cmp	r6, #0
    67e2:	d0f7      	beq.n	67d4 <__gesf2+0x40>
    67e4:	2001      	movs	r0, #1
    67e6:	3901      	subs	r1, #1
    67e8:	4308      	orrs	r0, r1
    67ea:	e7f8      	b.n	67de <__gesf2+0x4a>
    67ec:	2d00      	cmp	r5, #0
    67ee:	d0de      	beq.n	67ae <__gesf2+0x1a>
    67f0:	2002      	movs	r0, #2
    67f2:	4240      	negs	r0, r0
    67f4:	e7f3      	b.n	67de <__gesf2+0x4a>
    67f6:	2c00      	cmp	r4, #0
    67f8:	d0db      	beq.n	67b2 <__gesf2+0x1e>
    67fa:	e7f9      	b.n	67f0 <__gesf2+0x5c>
    67fc:	4282      	cmp	r2, r0
    67fe:	dceb      	bgt.n	67d8 <__gesf2+0x44>
    6800:	db04      	blt.n	680c <__gesf2+0x78>
    6802:	42a5      	cmp	r5, r4
    6804:	d8e8      	bhi.n	67d8 <__gesf2+0x44>
    6806:	2000      	movs	r0, #0
    6808:	42a5      	cmp	r5, r4
    680a:	d2e8      	bcs.n	67de <__gesf2+0x4a>
    680c:	2101      	movs	r1, #1
    680e:	1e58      	subs	r0, r3, #1
    6810:	4308      	orrs	r0, r1
    6812:	e7e4      	b.n	67de <__gesf2+0x4a>

00006814 <__lesf2>:
    6814:	b5f0      	push	{r4, r5, r6, r7, lr}
    6816:	0042      	lsls	r2, r0, #1
    6818:	024d      	lsls	r5, r1, #9
    681a:	004c      	lsls	r4, r1, #1
    681c:	0246      	lsls	r6, r0, #9
    681e:	0a76      	lsrs	r6, r6, #9
    6820:	0e12      	lsrs	r2, r2, #24
    6822:	0fc3      	lsrs	r3, r0, #31
    6824:	0a6d      	lsrs	r5, r5, #9
    6826:	0e24      	lsrs	r4, r4, #24
    6828:	0fc9      	lsrs	r1, r1, #31
    682a:	2aff      	cmp	r2, #255	; 0xff
    682c:	d016      	beq.n	685c <__lesf2+0x48>
    682e:	2cff      	cmp	r4, #255	; 0xff
    6830:	d018      	beq.n	6864 <__lesf2+0x50>
    6832:	2a00      	cmp	r2, #0
    6834:	d10a      	bne.n	684c <__lesf2+0x38>
    6836:	4270      	negs	r0, r6
    6838:	4170      	adcs	r0, r6
    683a:	b2c0      	uxtb	r0, r0
    683c:	2c00      	cmp	r4, #0
    683e:	d015      	beq.n	686c <__lesf2+0x58>
    6840:	2800      	cmp	r0, #0
    6842:	d005      	beq.n	6850 <__lesf2+0x3c>
    6844:	2001      	movs	r0, #1
    6846:	3901      	subs	r1, #1
    6848:	4308      	orrs	r0, r1
    684a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    684c:	2c00      	cmp	r4, #0
    684e:	d013      	beq.n	6878 <__lesf2+0x64>
    6850:	4299      	cmp	r1, r3
    6852:	d014      	beq.n	687e <__lesf2+0x6a>
    6854:	2001      	movs	r0, #1
    6856:	425b      	negs	r3, r3
    6858:	4318      	orrs	r0, r3
    685a:	e7f6      	b.n	684a <__lesf2+0x36>
    685c:	2002      	movs	r0, #2
    685e:	2e00      	cmp	r6, #0
    6860:	d1f3      	bne.n	684a <__lesf2+0x36>
    6862:	e7e4      	b.n	682e <__lesf2+0x1a>
    6864:	2002      	movs	r0, #2
    6866:	2d00      	cmp	r5, #0
    6868:	d1ef      	bne.n	684a <__lesf2+0x36>
    686a:	e7e2      	b.n	6832 <__lesf2+0x1e>
    686c:	2d00      	cmp	r5, #0
    686e:	d1e7      	bne.n	6840 <__lesf2+0x2c>
    6870:	2000      	movs	r0, #0
    6872:	2e00      	cmp	r6, #0
    6874:	d0e9      	beq.n	684a <__lesf2+0x36>
    6876:	e7ed      	b.n	6854 <__lesf2+0x40>
    6878:	2d00      	cmp	r5, #0
    687a:	d1e9      	bne.n	6850 <__lesf2+0x3c>
    687c:	e7ea      	b.n	6854 <__lesf2+0x40>
    687e:	42a2      	cmp	r2, r4
    6880:	dc06      	bgt.n	6890 <__lesf2+0x7c>
    6882:	dbdf      	blt.n	6844 <__lesf2+0x30>
    6884:	42ae      	cmp	r6, r5
    6886:	d803      	bhi.n	6890 <__lesf2+0x7c>
    6888:	2000      	movs	r0, #0
    688a:	42ae      	cmp	r6, r5
    688c:	d3da      	bcc.n	6844 <__lesf2+0x30>
    688e:	e7dc      	b.n	684a <__lesf2+0x36>
    6890:	2001      	movs	r0, #1
    6892:	4249      	negs	r1, r1
    6894:	4308      	orrs	r0, r1
    6896:	e7d8      	b.n	684a <__lesf2+0x36>

00006898 <__aeabi_fmul>:
    6898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    689a:	4657      	mov	r7, sl
    689c:	464e      	mov	r6, r9
    689e:	4645      	mov	r5, r8
    68a0:	46de      	mov	lr, fp
    68a2:	b5e0      	push	{r5, r6, r7, lr}
    68a4:	0247      	lsls	r7, r0, #9
    68a6:	0046      	lsls	r6, r0, #1
    68a8:	4688      	mov	r8, r1
    68aa:	0a7f      	lsrs	r7, r7, #9
    68ac:	0e36      	lsrs	r6, r6, #24
    68ae:	0fc4      	lsrs	r4, r0, #31
    68b0:	2e00      	cmp	r6, #0
    68b2:	d047      	beq.n	6944 <__aeabi_fmul+0xac>
    68b4:	2eff      	cmp	r6, #255	; 0xff
    68b6:	d024      	beq.n	6902 <__aeabi_fmul+0x6a>
    68b8:	00fb      	lsls	r3, r7, #3
    68ba:	2780      	movs	r7, #128	; 0x80
    68bc:	04ff      	lsls	r7, r7, #19
    68be:	431f      	orrs	r7, r3
    68c0:	2300      	movs	r3, #0
    68c2:	4699      	mov	r9, r3
    68c4:	469a      	mov	sl, r3
    68c6:	3e7f      	subs	r6, #127	; 0x7f
    68c8:	4643      	mov	r3, r8
    68ca:	025d      	lsls	r5, r3, #9
    68cc:	0058      	lsls	r0, r3, #1
    68ce:	0fdb      	lsrs	r3, r3, #31
    68d0:	0a6d      	lsrs	r5, r5, #9
    68d2:	0e00      	lsrs	r0, r0, #24
    68d4:	4698      	mov	r8, r3
    68d6:	d043      	beq.n	6960 <__aeabi_fmul+0xc8>
    68d8:	28ff      	cmp	r0, #255	; 0xff
    68da:	d03b      	beq.n	6954 <__aeabi_fmul+0xbc>
    68dc:	00eb      	lsls	r3, r5, #3
    68de:	2580      	movs	r5, #128	; 0x80
    68e0:	2200      	movs	r2, #0
    68e2:	04ed      	lsls	r5, r5, #19
    68e4:	431d      	orrs	r5, r3
    68e6:	387f      	subs	r0, #127	; 0x7f
    68e8:	1836      	adds	r6, r6, r0
    68ea:	1c73      	adds	r3, r6, #1
    68ec:	4641      	mov	r1, r8
    68ee:	469b      	mov	fp, r3
    68f0:	464b      	mov	r3, r9
    68f2:	4061      	eors	r1, r4
    68f4:	4313      	orrs	r3, r2
    68f6:	2b0f      	cmp	r3, #15
    68f8:	d864      	bhi.n	69c4 <__aeabi_fmul+0x12c>
    68fa:	4875      	ldr	r0, [pc, #468]	; (6ad0 <__aeabi_fmul+0x238>)
    68fc:	009b      	lsls	r3, r3, #2
    68fe:	58c3      	ldr	r3, [r0, r3]
    6900:	469f      	mov	pc, r3
    6902:	2f00      	cmp	r7, #0
    6904:	d142      	bne.n	698c <__aeabi_fmul+0xf4>
    6906:	2308      	movs	r3, #8
    6908:	4699      	mov	r9, r3
    690a:	3b06      	subs	r3, #6
    690c:	26ff      	movs	r6, #255	; 0xff
    690e:	469a      	mov	sl, r3
    6910:	e7da      	b.n	68c8 <__aeabi_fmul+0x30>
    6912:	4641      	mov	r1, r8
    6914:	2a02      	cmp	r2, #2
    6916:	d028      	beq.n	696a <__aeabi_fmul+0xd2>
    6918:	2a03      	cmp	r2, #3
    691a:	d100      	bne.n	691e <__aeabi_fmul+0x86>
    691c:	e0ce      	b.n	6abc <__aeabi_fmul+0x224>
    691e:	2a01      	cmp	r2, #1
    6920:	d000      	beq.n	6924 <__aeabi_fmul+0x8c>
    6922:	e0ac      	b.n	6a7e <__aeabi_fmul+0x1e6>
    6924:	4011      	ands	r1, r2
    6926:	2000      	movs	r0, #0
    6928:	2200      	movs	r2, #0
    692a:	b2cc      	uxtb	r4, r1
    692c:	0240      	lsls	r0, r0, #9
    692e:	05d2      	lsls	r2, r2, #23
    6930:	0a40      	lsrs	r0, r0, #9
    6932:	07e4      	lsls	r4, r4, #31
    6934:	4310      	orrs	r0, r2
    6936:	4320      	orrs	r0, r4
    6938:	bc3c      	pop	{r2, r3, r4, r5}
    693a:	4690      	mov	r8, r2
    693c:	4699      	mov	r9, r3
    693e:	46a2      	mov	sl, r4
    6940:	46ab      	mov	fp, r5
    6942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6944:	2f00      	cmp	r7, #0
    6946:	d115      	bne.n	6974 <__aeabi_fmul+0xdc>
    6948:	2304      	movs	r3, #4
    694a:	4699      	mov	r9, r3
    694c:	3b03      	subs	r3, #3
    694e:	2600      	movs	r6, #0
    6950:	469a      	mov	sl, r3
    6952:	e7b9      	b.n	68c8 <__aeabi_fmul+0x30>
    6954:	20ff      	movs	r0, #255	; 0xff
    6956:	2202      	movs	r2, #2
    6958:	2d00      	cmp	r5, #0
    695a:	d0c5      	beq.n	68e8 <__aeabi_fmul+0x50>
    695c:	2203      	movs	r2, #3
    695e:	e7c3      	b.n	68e8 <__aeabi_fmul+0x50>
    6960:	2d00      	cmp	r5, #0
    6962:	d119      	bne.n	6998 <__aeabi_fmul+0x100>
    6964:	2000      	movs	r0, #0
    6966:	2201      	movs	r2, #1
    6968:	e7be      	b.n	68e8 <__aeabi_fmul+0x50>
    696a:	2401      	movs	r4, #1
    696c:	22ff      	movs	r2, #255	; 0xff
    696e:	400c      	ands	r4, r1
    6970:	2000      	movs	r0, #0
    6972:	e7db      	b.n	692c <__aeabi_fmul+0x94>
    6974:	0038      	movs	r0, r7
    6976:	f001 ff83 	bl	8880 <__clzsi2>
    697a:	2676      	movs	r6, #118	; 0x76
    697c:	1f43      	subs	r3, r0, #5
    697e:	409f      	lsls	r7, r3
    6980:	2300      	movs	r3, #0
    6982:	4276      	negs	r6, r6
    6984:	1a36      	subs	r6, r6, r0
    6986:	4699      	mov	r9, r3
    6988:	469a      	mov	sl, r3
    698a:	e79d      	b.n	68c8 <__aeabi_fmul+0x30>
    698c:	230c      	movs	r3, #12
    698e:	4699      	mov	r9, r3
    6990:	3b09      	subs	r3, #9
    6992:	26ff      	movs	r6, #255	; 0xff
    6994:	469a      	mov	sl, r3
    6996:	e797      	b.n	68c8 <__aeabi_fmul+0x30>
    6998:	0028      	movs	r0, r5
    699a:	f001 ff71 	bl	8880 <__clzsi2>
    699e:	1f43      	subs	r3, r0, #5
    69a0:	409d      	lsls	r5, r3
    69a2:	2376      	movs	r3, #118	; 0x76
    69a4:	425b      	negs	r3, r3
    69a6:	1a18      	subs	r0, r3, r0
    69a8:	2200      	movs	r2, #0
    69aa:	e79d      	b.n	68e8 <__aeabi_fmul+0x50>
    69ac:	2080      	movs	r0, #128	; 0x80
    69ae:	2400      	movs	r4, #0
    69b0:	03c0      	lsls	r0, r0, #15
    69b2:	22ff      	movs	r2, #255	; 0xff
    69b4:	e7ba      	b.n	692c <__aeabi_fmul+0x94>
    69b6:	003d      	movs	r5, r7
    69b8:	4652      	mov	r2, sl
    69ba:	e7ab      	b.n	6914 <__aeabi_fmul+0x7c>
    69bc:	003d      	movs	r5, r7
    69be:	0021      	movs	r1, r4
    69c0:	4652      	mov	r2, sl
    69c2:	e7a7      	b.n	6914 <__aeabi_fmul+0x7c>
    69c4:	0c3b      	lsrs	r3, r7, #16
    69c6:	469c      	mov	ip, r3
    69c8:	042a      	lsls	r2, r5, #16
    69ca:	0c12      	lsrs	r2, r2, #16
    69cc:	0c2b      	lsrs	r3, r5, #16
    69ce:	0014      	movs	r4, r2
    69d0:	4660      	mov	r0, ip
    69d2:	4665      	mov	r5, ip
    69d4:	043f      	lsls	r7, r7, #16
    69d6:	0c3f      	lsrs	r7, r7, #16
    69d8:	437c      	muls	r4, r7
    69da:	4342      	muls	r2, r0
    69dc:	435d      	muls	r5, r3
    69de:	437b      	muls	r3, r7
    69e0:	0c27      	lsrs	r7, r4, #16
    69e2:	189b      	adds	r3, r3, r2
    69e4:	18ff      	adds	r7, r7, r3
    69e6:	42ba      	cmp	r2, r7
    69e8:	d903      	bls.n	69f2 <__aeabi_fmul+0x15a>
    69ea:	2380      	movs	r3, #128	; 0x80
    69ec:	025b      	lsls	r3, r3, #9
    69ee:	469c      	mov	ip, r3
    69f0:	4465      	add	r5, ip
    69f2:	0424      	lsls	r4, r4, #16
    69f4:	043a      	lsls	r2, r7, #16
    69f6:	0c24      	lsrs	r4, r4, #16
    69f8:	1912      	adds	r2, r2, r4
    69fa:	0193      	lsls	r3, r2, #6
    69fc:	1e5c      	subs	r4, r3, #1
    69fe:	41a3      	sbcs	r3, r4
    6a00:	0c3f      	lsrs	r7, r7, #16
    6a02:	0e92      	lsrs	r2, r2, #26
    6a04:	197d      	adds	r5, r7, r5
    6a06:	431a      	orrs	r2, r3
    6a08:	01ad      	lsls	r5, r5, #6
    6a0a:	4315      	orrs	r5, r2
    6a0c:	012b      	lsls	r3, r5, #4
    6a0e:	d504      	bpl.n	6a1a <__aeabi_fmul+0x182>
    6a10:	2301      	movs	r3, #1
    6a12:	465e      	mov	r6, fp
    6a14:	086a      	lsrs	r2, r5, #1
    6a16:	401d      	ands	r5, r3
    6a18:	4315      	orrs	r5, r2
    6a1a:	0032      	movs	r2, r6
    6a1c:	327f      	adds	r2, #127	; 0x7f
    6a1e:	2a00      	cmp	r2, #0
    6a20:	dd25      	ble.n	6a6e <__aeabi_fmul+0x1d6>
    6a22:	076b      	lsls	r3, r5, #29
    6a24:	d004      	beq.n	6a30 <__aeabi_fmul+0x198>
    6a26:	230f      	movs	r3, #15
    6a28:	402b      	ands	r3, r5
    6a2a:	2b04      	cmp	r3, #4
    6a2c:	d000      	beq.n	6a30 <__aeabi_fmul+0x198>
    6a2e:	3504      	adds	r5, #4
    6a30:	012b      	lsls	r3, r5, #4
    6a32:	d503      	bpl.n	6a3c <__aeabi_fmul+0x1a4>
    6a34:	0032      	movs	r2, r6
    6a36:	4b27      	ldr	r3, [pc, #156]	; (6ad4 <__aeabi_fmul+0x23c>)
    6a38:	3280      	adds	r2, #128	; 0x80
    6a3a:	401d      	ands	r5, r3
    6a3c:	2afe      	cmp	r2, #254	; 0xfe
    6a3e:	dc94      	bgt.n	696a <__aeabi_fmul+0xd2>
    6a40:	2401      	movs	r4, #1
    6a42:	01a8      	lsls	r0, r5, #6
    6a44:	0a40      	lsrs	r0, r0, #9
    6a46:	b2d2      	uxtb	r2, r2
    6a48:	400c      	ands	r4, r1
    6a4a:	e76f      	b.n	692c <__aeabi_fmul+0x94>
    6a4c:	2080      	movs	r0, #128	; 0x80
    6a4e:	03c0      	lsls	r0, r0, #15
    6a50:	4207      	tst	r7, r0
    6a52:	d007      	beq.n	6a64 <__aeabi_fmul+0x1cc>
    6a54:	4205      	tst	r5, r0
    6a56:	d105      	bne.n	6a64 <__aeabi_fmul+0x1cc>
    6a58:	4328      	orrs	r0, r5
    6a5a:	0240      	lsls	r0, r0, #9
    6a5c:	0a40      	lsrs	r0, r0, #9
    6a5e:	4644      	mov	r4, r8
    6a60:	22ff      	movs	r2, #255	; 0xff
    6a62:	e763      	b.n	692c <__aeabi_fmul+0x94>
    6a64:	4338      	orrs	r0, r7
    6a66:	0240      	lsls	r0, r0, #9
    6a68:	0a40      	lsrs	r0, r0, #9
    6a6a:	22ff      	movs	r2, #255	; 0xff
    6a6c:	e75e      	b.n	692c <__aeabi_fmul+0x94>
    6a6e:	2401      	movs	r4, #1
    6a70:	1aa3      	subs	r3, r4, r2
    6a72:	2b1b      	cmp	r3, #27
    6a74:	dd05      	ble.n	6a82 <__aeabi_fmul+0x1ea>
    6a76:	400c      	ands	r4, r1
    6a78:	2200      	movs	r2, #0
    6a7a:	2000      	movs	r0, #0
    6a7c:	e756      	b.n	692c <__aeabi_fmul+0x94>
    6a7e:	465e      	mov	r6, fp
    6a80:	e7cb      	b.n	6a1a <__aeabi_fmul+0x182>
    6a82:	002a      	movs	r2, r5
    6a84:	2020      	movs	r0, #32
    6a86:	40da      	lsrs	r2, r3
    6a88:	1ac3      	subs	r3, r0, r3
    6a8a:	409d      	lsls	r5, r3
    6a8c:	002b      	movs	r3, r5
    6a8e:	1e5d      	subs	r5, r3, #1
    6a90:	41ab      	sbcs	r3, r5
    6a92:	4313      	orrs	r3, r2
    6a94:	075a      	lsls	r2, r3, #29
    6a96:	d004      	beq.n	6aa2 <__aeabi_fmul+0x20a>
    6a98:	220f      	movs	r2, #15
    6a9a:	401a      	ands	r2, r3
    6a9c:	2a04      	cmp	r2, #4
    6a9e:	d000      	beq.n	6aa2 <__aeabi_fmul+0x20a>
    6aa0:	3304      	adds	r3, #4
    6aa2:	015a      	lsls	r2, r3, #5
    6aa4:	d504      	bpl.n	6ab0 <__aeabi_fmul+0x218>
    6aa6:	2401      	movs	r4, #1
    6aa8:	2201      	movs	r2, #1
    6aaa:	400c      	ands	r4, r1
    6aac:	2000      	movs	r0, #0
    6aae:	e73d      	b.n	692c <__aeabi_fmul+0x94>
    6ab0:	2401      	movs	r4, #1
    6ab2:	019b      	lsls	r3, r3, #6
    6ab4:	0a58      	lsrs	r0, r3, #9
    6ab6:	400c      	ands	r4, r1
    6ab8:	2200      	movs	r2, #0
    6aba:	e737      	b.n	692c <__aeabi_fmul+0x94>
    6abc:	2080      	movs	r0, #128	; 0x80
    6abe:	2401      	movs	r4, #1
    6ac0:	03c0      	lsls	r0, r0, #15
    6ac2:	4328      	orrs	r0, r5
    6ac4:	0240      	lsls	r0, r0, #9
    6ac6:	0a40      	lsrs	r0, r0, #9
    6ac8:	400c      	ands	r4, r1
    6aca:	22ff      	movs	r2, #255	; 0xff
    6acc:	e72e      	b.n	692c <__aeabi_fmul+0x94>
    6ace:	46c0      	nop			; (mov r8, r8)
    6ad0:	00008ce0 	.word	0x00008ce0
    6ad4:	f7ffffff 	.word	0xf7ffffff

00006ad8 <__aeabi_i2f>:
    6ad8:	b570      	push	{r4, r5, r6, lr}
    6ada:	2800      	cmp	r0, #0
    6adc:	d030      	beq.n	6b40 <__aeabi_i2f+0x68>
    6ade:	17c3      	asrs	r3, r0, #31
    6ae0:	18c4      	adds	r4, r0, r3
    6ae2:	405c      	eors	r4, r3
    6ae4:	0fc5      	lsrs	r5, r0, #31
    6ae6:	0020      	movs	r0, r4
    6ae8:	f001 feca 	bl	8880 <__clzsi2>
    6aec:	239e      	movs	r3, #158	; 0x9e
    6aee:	1a1b      	subs	r3, r3, r0
    6af0:	2b96      	cmp	r3, #150	; 0x96
    6af2:	dc0d      	bgt.n	6b10 <__aeabi_i2f+0x38>
    6af4:	2296      	movs	r2, #150	; 0x96
    6af6:	1ad2      	subs	r2, r2, r3
    6af8:	4094      	lsls	r4, r2
    6afa:	002a      	movs	r2, r5
    6afc:	0264      	lsls	r4, r4, #9
    6afe:	0a64      	lsrs	r4, r4, #9
    6b00:	b2db      	uxtb	r3, r3
    6b02:	0264      	lsls	r4, r4, #9
    6b04:	05db      	lsls	r3, r3, #23
    6b06:	0a60      	lsrs	r0, r4, #9
    6b08:	07d2      	lsls	r2, r2, #31
    6b0a:	4318      	orrs	r0, r3
    6b0c:	4310      	orrs	r0, r2
    6b0e:	bd70      	pop	{r4, r5, r6, pc}
    6b10:	2b99      	cmp	r3, #153	; 0x99
    6b12:	dc19      	bgt.n	6b48 <__aeabi_i2f+0x70>
    6b14:	2299      	movs	r2, #153	; 0x99
    6b16:	1ad2      	subs	r2, r2, r3
    6b18:	2a00      	cmp	r2, #0
    6b1a:	dd29      	ble.n	6b70 <__aeabi_i2f+0x98>
    6b1c:	4094      	lsls	r4, r2
    6b1e:	0022      	movs	r2, r4
    6b20:	4c14      	ldr	r4, [pc, #80]	; (6b74 <__aeabi_i2f+0x9c>)
    6b22:	4014      	ands	r4, r2
    6b24:	0751      	lsls	r1, r2, #29
    6b26:	d004      	beq.n	6b32 <__aeabi_i2f+0x5a>
    6b28:	210f      	movs	r1, #15
    6b2a:	400a      	ands	r2, r1
    6b2c:	2a04      	cmp	r2, #4
    6b2e:	d000      	beq.n	6b32 <__aeabi_i2f+0x5a>
    6b30:	3404      	adds	r4, #4
    6b32:	0162      	lsls	r2, r4, #5
    6b34:	d413      	bmi.n	6b5e <__aeabi_i2f+0x86>
    6b36:	01a4      	lsls	r4, r4, #6
    6b38:	0a64      	lsrs	r4, r4, #9
    6b3a:	b2db      	uxtb	r3, r3
    6b3c:	002a      	movs	r2, r5
    6b3e:	e7e0      	b.n	6b02 <__aeabi_i2f+0x2a>
    6b40:	2200      	movs	r2, #0
    6b42:	2300      	movs	r3, #0
    6b44:	2400      	movs	r4, #0
    6b46:	e7dc      	b.n	6b02 <__aeabi_i2f+0x2a>
    6b48:	2205      	movs	r2, #5
    6b4a:	0021      	movs	r1, r4
    6b4c:	1a12      	subs	r2, r2, r0
    6b4e:	40d1      	lsrs	r1, r2
    6b50:	22b9      	movs	r2, #185	; 0xb9
    6b52:	1ad2      	subs	r2, r2, r3
    6b54:	4094      	lsls	r4, r2
    6b56:	1e62      	subs	r2, r4, #1
    6b58:	4194      	sbcs	r4, r2
    6b5a:	430c      	orrs	r4, r1
    6b5c:	e7da      	b.n	6b14 <__aeabi_i2f+0x3c>
    6b5e:	4b05      	ldr	r3, [pc, #20]	; (6b74 <__aeabi_i2f+0x9c>)
    6b60:	002a      	movs	r2, r5
    6b62:	401c      	ands	r4, r3
    6b64:	239f      	movs	r3, #159	; 0x9f
    6b66:	01a4      	lsls	r4, r4, #6
    6b68:	1a1b      	subs	r3, r3, r0
    6b6a:	0a64      	lsrs	r4, r4, #9
    6b6c:	b2db      	uxtb	r3, r3
    6b6e:	e7c8      	b.n	6b02 <__aeabi_i2f+0x2a>
    6b70:	0022      	movs	r2, r4
    6b72:	e7d5      	b.n	6b20 <__aeabi_i2f+0x48>
    6b74:	fbffffff 	.word	0xfbffffff

00006b78 <__aeabi_dadd>:
    6b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b7a:	4645      	mov	r5, r8
    6b7c:	46de      	mov	lr, fp
    6b7e:	4657      	mov	r7, sl
    6b80:	464e      	mov	r6, r9
    6b82:	030c      	lsls	r4, r1, #12
    6b84:	b5e0      	push	{r5, r6, r7, lr}
    6b86:	004e      	lsls	r6, r1, #1
    6b88:	0fc9      	lsrs	r1, r1, #31
    6b8a:	4688      	mov	r8, r1
    6b8c:	000d      	movs	r5, r1
    6b8e:	0a61      	lsrs	r1, r4, #9
    6b90:	0f44      	lsrs	r4, r0, #29
    6b92:	430c      	orrs	r4, r1
    6b94:	00c7      	lsls	r7, r0, #3
    6b96:	0319      	lsls	r1, r3, #12
    6b98:	0058      	lsls	r0, r3, #1
    6b9a:	0fdb      	lsrs	r3, r3, #31
    6b9c:	469b      	mov	fp, r3
    6b9e:	0a4b      	lsrs	r3, r1, #9
    6ba0:	0f51      	lsrs	r1, r2, #29
    6ba2:	430b      	orrs	r3, r1
    6ba4:	0d76      	lsrs	r6, r6, #21
    6ba6:	0d40      	lsrs	r0, r0, #21
    6ba8:	0019      	movs	r1, r3
    6baa:	00d2      	lsls	r2, r2, #3
    6bac:	45d8      	cmp	r8, fp
    6bae:	d100      	bne.n	6bb2 <__aeabi_dadd+0x3a>
    6bb0:	e0ae      	b.n	6d10 <__aeabi_dadd+0x198>
    6bb2:	1a35      	subs	r5, r6, r0
    6bb4:	2d00      	cmp	r5, #0
    6bb6:	dc00      	bgt.n	6bba <__aeabi_dadd+0x42>
    6bb8:	e0f6      	b.n	6da8 <__aeabi_dadd+0x230>
    6bba:	2800      	cmp	r0, #0
    6bbc:	d10f      	bne.n	6bde <__aeabi_dadd+0x66>
    6bbe:	4313      	orrs	r3, r2
    6bc0:	d100      	bne.n	6bc4 <__aeabi_dadd+0x4c>
    6bc2:	e0db      	b.n	6d7c <__aeabi_dadd+0x204>
    6bc4:	1e6b      	subs	r3, r5, #1
    6bc6:	2b00      	cmp	r3, #0
    6bc8:	d000      	beq.n	6bcc <__aeabi_dadd+0x54>
    6bca:	e137      	b.n	6e3c <__aeabi_dadd+0x2c4>
    6bcc:	1aba      	subs	r2, r7, r2
    6bce:	4297      	cmp	r7, r2
    6bd0:	41bf      	sbcs	r7, r7
    6bd2:	1a64      	subs	r4, r4, r1
    6bd4:	427f      	negs	r7, r7
    6bd6:	1be4      	subs	r4, r4, r7
    6bd8:	2601      	movs	r6, #1
    6bda:	0017      	movs	r7, r2
    6bdc:	e024      	b.n	6c28 <__aeabi_dadd+0xb0>
    6bde:	4bc6      	ldr	r3, [pc, #792]	; (6ef8 <__aeabi_dadd+0x380>)
    6be0:	429e      	cmp	r6, r3
    6be2:	d04d      	beq.n	6c80 <__aeabi_dadd+0x108>
    6be4:	2380      	movs	r3, #128	; 0x80
    6be6:	041b      	lsls	r3, r3, #16
    6be8:	4319      	orrs	r1, r3
    6bea:	2d38      	cmp	r5, #56	; 0x38
    6bec:	dd00      	ble.n	6bf0 <__aeabi_dadd+0x78>
    6bee:	e107      	b.n	6e00 <__aeabi_dadd+0x288>
    6bf0:	2d1f      	cmp	r5, #31
    6bf2:	dd00      	ble.n	6bf6 <__aeabi_dadd+0x7e>
    6bf4:	e138      	b.n	6e68 <__aeabi_dadd+0x2f0>
    6bf6:	2020      	movs	r0, #32
    6bf8:	1b43      	subs	r3, r0, r5
    6bfa:	469a      	mov	sl, r3
    6bfc:	000b      	movs	r3, r1
    6bfe:	4650      	mov	r0, sl
    6c00:	4083      	lsls	r3, r0
    6c02:	4699      	mov	r9, r3
    6c04:	0013      	movs	r3, r2
    6c06:	4648      	mov	r0, r9
    6c08:	40eb      	lsrs	r3, r5
    6c0a:	4318      	orrs	r0, r3
    6c0c:	0003      	movs	r3, r0
    6c0e:	4650      	mov	r0, sl
    6c10:	4082      	lsls	r2, r0
    6c12:	1e50      	subs	r0, r2, #1
    6c14:	4182      	sbcs	r2, r0
    6c16:	40e9      	lsrs	r1, r5
    6c18:	431a      	orrs	r2, r3
    6c1a:	1aba      	subs	r2, r7, r2
    6c1c:	1a61      	subs	r1, r4, r1
    6c1e:	4297      	cmp	r7, r2
    6c20:	41a4      	sbcs	r4, r4
    6c22:	0017      	movs	r7, r2
    6c24:	4264      	negs	r4, r4
    6c26:	1b0c      	subs	r4, r1, r4
    6c28:	0223      	lsls	r3, r4, #8
    6c2a:	d562      	bpl.n	6cf2 <__aeabi_dadd+0x17a>
    6c2c:	0264      	lsls	r4, r4, #9
    6c2e:	0a65      	lsrs	r5, r4, #9
    6c30:	2d00      	cmp	r5, #0
    6c32:	d100      	bne.n	6c36 <__aeabi_dadd+0xbe>
    6c34:	e0df      	b.n	6df6 <__aeabi_dadd+0x27e>
    6c36:	0028      	movs	r0, r5
    6c38:	f001 fe22 	bl	8880 <__clzsi2>
    6c3c:	0003      	movs	r3, r0
    6c3e:	3b08      	subs	r3, #8
    6c40:	2b1f      	cmp	r3, #31
    6c42:	dd00      	ble.n	6c46 <__aeabi_dadd+0xce>
    6c44:	e0d2      	b.n	6dec <__aeabi_dadd+0x274>
    6c46:	2220      	movs	r2, #32
    6c48:	003c      	movs	r4, r7
    6c4a:	1ad2      	subs	r2, r2, r3
    6c4c:	409d      	lsls	r5, r3
    6c4e:	40d4      	lsrs	r4, r2
    6c50:	409f      	lsls	r7, r3
    6c52:	4325      	orrs	r5, r4
    6c54:	429e      	cmp	r6, r3
    6c56:	dd00      	ble.n	6c5a <__aeabi_dadd+0xe2>
    6c58:	e0c4      	b.n	6de4 <__aeabi_dadd+0x26c>
    6c5a:	1b9e      	subs	r6, r3, r6
    6c5c:	1c73      	adds	r3, r6, #1
    6c5e:	2b1f      	cmp	r3, #31
    6c60:	dd00      	ble.n	6c64 <__aeabi_dadd+0xec>
    6c62:	e0f1      	b.n	6e48 <__aeabi_dadd+0x2d0>
    6c64:	2220      	movs	r2, #32
    6c66:	0038      	movs	r0, r7
    6c68:	0029      	movs	r1, r5
    6c6a:	1ad2      	subs	r2, r2, r3
    6c6c:	40d8      	lsrs	r0, r3
    6c6e:	4091      	lsls	r1, r2
    6c70:	4097      	lsls	r7, r2
    6c72:	002c      	movs	r4, r5
    6c74:	4301      	orrs	r1, r0
    6c76:	1e78      	subs	r0, r7, #1
    6c78:	4187      	sbcs	r7, r0
    6c7a:	40dc      	lsrs	r4, r3
    6c7c:	2600      	movs	r6, #0
    6c7e:	430f      	orrs	r7, r1
    6c80:	077b      	lsls	r3, r7, #29
    6c82:	d009      	beq.n	6c98 <__aeabi_dadd+0x120>
    6c84:	230f      	movs	r3, #15
    6c86:	403b      	ands	r3, r7
    6c88:	2b04      	cmp	r3, #4
    6c8a:	d005      	beq.n	6c98 <__aeabi_dadd+0x120>
    6c8c:	1d3b      	adds	r3, r7, #4
    6c8e:	42bb      	cmp	r3, r7
    6c90:	41bf      	sbcs	r7, r7
    6c92:	427f      	negs	r7, r7
    6c94:	19e4      	adds	r4, r4, r7
    6c96:	001f      	movs	r7, r3
    6c98:	0223      	lsls	r3, r4, #8
    6c9a:	d52c      	bpl.n	6cf6 <__aeabi_dadd+0x17e>
    6c9c:	4b96      	ldr	r3, [pc, #600]	; (6ef8 <__aeabi_dadd+0x380>)
    6c9e:	3601      	adds	r6, #1
    6ca0:	429e      	cmp	r6, r3
    6ca2:	d100      	bne.n	6ca6 <__aeabi_dadd+0x12e>
    6ca4:	e09a      	b.n	6ddc <__aeabi_dadd+0x264>
    6ca6:	4645      	mov	r5, r8
    6ca8:	4b94      	ldr	r3, [pc, #592]	; (6efc <__aeabi_dadd+0x384>)
    6caa:	08ff      	lsrs	r7, r7, #3
    6cac:	401c      	ands	r4, r3
    6cae:	0760      	lsls	r0, r4, #29
    6cb0:	0576      	lsls	r6, r6, #21
    6cb2:	0264      	lsls	r4, r4, #9
    6cb4:	4307      	orrs	r7, r0
    6cb6:	0b24      	lsrs	r4, r4, #12
    6cb8:	0d76      	lsrs	r6, r6, #21
    6cba:	2100      	movs	r1, #0
    6cbc:	0324      	lsls	r4, r4, #12
    6cbe:	0b23      	lsrs	r3, r4, #12
    6cc0:	0d0c      	lsrs	r4, r1, #20
    6cc2:	4a8f      	ldr	r2, [pc, #572]	; (6f00 <__aeabi_dadd+0x388>)
    6cc4:	0524      	lsls	r4, r4, #20
    6cc6:	431c      	orrs	r4, r3
    6cc8:	4014      	ands	r4, r2
    6cca:	0533      	lsls	r3, r6, #20
    6ccc:	4323      	orrs	r3, r4
    6cce:	005b      	lsls	r3, r3, #1
    6cd0:	07ed      	lsls	r5, r5, #31
    6cd2:	085b      	lsrs	r3, r3, #1
    6cd4:	432b      	orrs	r3, r5
    6cd6:	0038      	movs	r0, r7
    6cd8:	0019      	movs	r1, r3
    6cda:	bc3c      	pop	{r2, r3, r4, r5}
    6cdc:	4690      	mov	r8, r2
    6cde:	4699      	mov	r9, r3
    6ce0:	46a2      	mov	sl, r4
    6ce2:	46ab      	mov	fp, r5
    6ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ce6:	4664      	mov	r4, ip
    6ce8:	4304      	orrs	r4, r0
    6cea:	d100      	bne.n	6cee <__aeabi_dadd+0x176>
    6cec:	e211      	b.n	7112 <__aeabi_dadd+0x59a>
    6cee:	0004      	movs	r4, r0
    6cf0:	4667      	mov	r7, ip
    6cf2:	077b      	lsls	r3, r7, #29
    6cf4:	d1c6      	bne.n	6c84 <__aeabi_dadd+0x10c>
    6cf6:	4645      	mov	r5, r8
    6cf8:	0760      	lsls	r0, r4, #29
    6cfa:	08ff      	lsrs	r7, r7, #3
    6cfc:	4307      	orrs	r7, r0
    6cfe:	08e4      	lsrs	r4, r4, #3
    6d00:	4b7d      	ldr	r3, [pc, #500]	; (6ef8 <__aeabi_dadd+0x380>)
    6d02:	429e      	cmp	r6, r3
    6d04:	d030      	beq.n	6d68 <__aeabi_dadd+0x1f0>
    6d06:	0324      	lsls	r4, r4, #12
    6d08:	0576      	lsls	r6, r6, #21
    6d0a:	0b24      	lsrs	r4, r4, #12
    6d0c:	0d76      	lsrs	r6, r6, #21
    6d0e:	e7d4      	b.n	6cba <__aeabi_dadd+0x142>
    6d10:	1a33      	subs	r3, r6, r0
    6d12:	469a      	mov	sl, r3
    6d14:	2b00      	cmp	r3, #0
    6d16:	dd78      	ble.n	6e0a <__aeabi_dadd+0x292>
    6d18:	2800      	cmp	r0, #0
    6d1a:	d031      	beq.n	6d80 <__aeabi_dadd+0x208>
    6d1c:	4876      	ldr	r0, [pc, #472]	; (6ef8 <__aeabi_dadd+0x380>)
    6d1e:	4286      	cmp	r6, r0
    6d20:	d0ae      	beq.n	6c80 <__aeabi_dadd+0x108>
    6d22:	2080      	movs	r0, #128	; 0x80
    6d24:	0400      	lsls	r0, r0, #16
    6d26:	4301      	orrs	r1, r0
    6d28:	4653      	mov	r3, sl
    6d2a:	2b38      	cmp	r3, #56	; 0x38
    6d2c:	dc00      	bgt.n	6d30 <__aeabi_dadd+0x1b8>
    6d2e:	e0e9      	b.n	6f04 <__aeabi_dadd+0x38c>
    6d30:	430a      	orrs	r2, r1
    6d32:	1e51      	subs	r1, r2, #1
    6d34:	418a      	sbcs	r2, r1
    6d36:	2100      	movs	r1, #0
    6d38:	19d2      	adds	r2, r2, r7
    6d3a:	42ba      	cmp	r2, r7
    6d3c:	41bf      	sbcs	r7, r7
    6d3e:	1909      	adds	r1, r1, r4
    6d40:	427c      	negs	r4, r7
    6d42:	0017      	movs	r7, r2
    6d44:	190c      	adds	r4, r1, r4
    6d46:	0223      	lsls	r3, r4, #8
    6d48:	d5d3      	bpl.n	6cf2 <__aeabi_dadd+0x17a>
    6d4a:	4b6b      	ldr	r3, [pc, #428]	; (6ef8 <__aeabi_dadd+0x380>)
    6d4c:	3601      	adds	r6, #1
    6d4e:	429e      	cmp	r6, r3
    6d50:	d100      	bne.n	6d54 <__aeabi_dadd+0x1dc>
    6d52:	e13a      	b.n	6fca <__aeabi_dadd+0x452>
    6d54:	2001      	movs	r0, #1
    6d56:	4b69      	ldr	r3, [pc, #420]	; (6efc <__aeabi_dadd+0x384>)
    6d58:	401c      	ands	r4, r3
    6d5a:	087b      	lsrs	r3, r7, #1
    6d5c:	4007      	ands	r7, r0
    6d5e:	431f      	orrs	r7, r3
    6d60:	07e0      	lsls	r0, r4, #31
    6d62:	4307      	orrs	r7, r0
    6d64:	0864      	lsrs	r4, r4, #1
    6d66:	e78b      	b.n	6c80 <__aeabi_dadd+0x108>
    6d68:	0023      	movs	r3, r4
    6d6a:	433b      	orrs	r3, r7
    6d6c:	d100      	bne.n	6d70 <__aeabi_dadd+0x1f8>
    6d6e:	e1cb      	b.n	7108 <__aeabi_dadd+0x590>
    6d70:	2280      	movs	r2, #128	; 0x80
    6d72:	0312      	lsls	r2, r2, #12
    6d74:	4314      	orrs	r4, r2
    6d76:	0324      	lsls	r4, r4, #12
    6d78:	0b24      	lsrs	r4, r4, #12
    6d7a:	e79e      	b.n	6cba <__aeabi_dadd+0x142>
    6d7c:	002e      	movs	r6, r5
    6d7e:	e77f      	b.n	6c80 <__aeabi_dadd+0x108>
    6d80:	0008      	movs	r0, r1
    6d82:	4310      	orrs	r0, r2
    6d84:	d100      	bne.n	6d88 <__aeabi_dadd+0x210>
    6d86:	e0b4      	b.n	6ef2 <__aeabi_dadd+0x37a>
    6d88:	1e58      	subs	r0, r3, #1
    6d8a:	2800      	cmp	r0, #0
    6d8c:	d000      	beq.n	6d90 <__aeabi_dadd+0x218>
    6d8e:	e0de      	b.n	6f4e <__aeabi_dadd+0x3d6>
    6d90:	18ba      	adds	r2, r7, r2
    6d92:	42ba      	cmp	r2, r7
    6d94:	419b      	sbcs	r3, r3
    6d96:	1864      	adds	r4, r4, r1
    6d98:	425b      	negs	r3, r3
    6d9a:	18e4      	adds	r4, r4, r3
    6d9c:	0017      	movs	r7, r2
    6d9e:	2601      	movs	r6, #1
    6da0:	0223      	lsls	r3, r4, #8
    6da2:	d5a6      	bpl.n	6cf2 <__aeabi_dadd+0x17a>
    6da4:	2602      	movs	r6, #2
    6da6:	e7d5      	b.n	6d54 <__aeabi_dadd+0x1dc>
    6da8:	2d00      	cmp	r5, #0
    6daa:	d16e      	bne.n	6e8a <__aeabi_dadd+0x312>
    6dac:	1c70      	adds	r0, r6, #1
    6dae:	0540      	lsls	r0, r0, #21
    6db0:	0d40      	lsrs	r0, r0, #21
    6db2:	2801      	cmp	r0, #1
    6db4:	dc00      	bgt.n	6db8 <__aeabi_dadd+0x240>
    6db6:	e0f9      	b.n	6fac <__aeabi_dadd+0x434>
    6db8:	1ab8      	subs	r0, r7, r2
    6dba:	4684      	mov	ip, r0
    6dbc:	4287      	cmp	r7, r0
    6dbe:	4180      	sbcs	r0, r0
    6dc0:	1ae5      	subs	r5, r4, r3
    6dc2:	4240      	negs	r0, r0
    6dc4:	1a2d      	subs	r5, r5, r0
    6dc6:	0228      	lsls	r0, r5, #8
    6dc8:	d400      	bmi.n	6dcc <__aeabi_dadd+0x254>
    6dca:	e089      	b.n	6ee0 <__aeabi_dadd+0x368>
    6dcc:	1bd7      	subs	r7, r2, r7
    6dce:	42ba      	cmp	r2, r7
    6dd0:	4192      	sbcs	r2, r2
    6dd2:	1b1c      	subs	r4, r3, r4
    6dd4:	4252      	negs	r2, r2
    6dd6:	1aa5      	subs	r5, r4, r2
    6dd8:	46d8      	mov	r8, fp
    6dda:	e729      	b.n	6c30 <__aeabi_dadd+0xb8>
    6ddc:	4645      	mov	r5, r8
    6dde:	2400      	movs	r4, #0
    6de0:	2700      	movs	r7, #0
    6de2:	e76a      	b.n	6cba <__aeabi_dadd+0x142>
    6de4:	4c45      	ldr	r4, [pc, #276]	; (6efc <__aeabi_dadd+0x384>)
    6de6:	1af6      	subs	r6, r6, r3
    6de8:	402c      	ands	r4, r5
    6dea:	e749      	b.n	6c80 <__aeabi_dadd+0x108>
    6dec:	003d      	movs	r5, r7
    6dee:	3828      	subs	r0, #40	; 0x28
    6df0:	4085      	lsls	r5, r0
    6df2:	2700      	movs	r7, #0
    6df4:	e72e      	b.n	6c54 <__aeabi_dadd+0xdc>
    6df6:	0038      	movs	r0, r7
    6df8:	f001 fd42 	bl	8880 <__clzsi2>
    6dfc:	3020      	adds	r0, #32
    6dfe:	e71d      	b.n	6c3c <__aeabi_dadd+0xc4>
    6e00:	430a      	orrs	r2, r1
    6e02:	1e51      	subs	r1, r2, #1
    6e04:	418a      	sbcs	r2, r1
    6e06:	2100      	movs	r1, #0
    6e08:	e707      	b.n	6c1a <__aeabi_dadd+0xa2>
    6e0a:	2b00      	cmp	r3, #0
    6e0c:	d000      	beq.n	6e10 <__aeabi_dadd+0x298>
    6e0e:	e0f3      	b.n	6ff8 <__aeabi_dadd+0x480>
    6e10:	1c70      	adds	r0, r6, #1
    6e12:	0543      	lsls	r3, r0, #21
    6e14:	0d5b      	lsrs	r3, r3, #21
    6e16:	2b01      	cmp	r3, #1
    6e18:	dc00      	bgt.n	6e1c <__aeabi_dadd+0x2a4>
    6e1a:	e0ad      	b.n	6f78 <__aeabi_dadd+0x400>
    6e1c:	4b36      	ldr	r3, [pc, #216]	; (6ef8 <__aeabi_dadd+0x380>)
    6e1e:	4298      	cmp	r0, r3
    6e20:	d100      	bne.n	6e24 <__aeabi_dadd+0x2ac>
    6e22:	e0d1      	b.n	6fc8 <__aeabi_dadd+0x450>
    6e24:	18ba      	adds	r2, r7, r2
    6e26:	42ba      	cmp	r2, r7
    6e28:	41bf      	sbcs	r7, r7
    6e2a:	1864      	adds	r4, r4, r1
    6e2c:	427f      	negs	r7, r7
    6e2e:	19e4      	adds	r4, r4, r7
    6e30:	07e7      	lsls	r7, r4, #31
    6e32:	0852      	lsrs	r2, r2, #1
    6e34:	4317      	orrs	r7, r2
    6e36:	0864      	lsrs	r4, r4, #1
    6e38:	0006      	movs	r6, r0
    6e3a:	e721      	b.n	6c80 <__aeabi_dadd+0x108>
    6e3c:	482e      	ldr	r0, [pc, #184]	; (6ef8 <__aeabi_dadd+0x380>)
    6e3e:	4285      	cmp	r5, r0
    6e40:	d100      	bne.n	6e44 <__aeabi_dadd+0x2cc>
    6e42:	e093      	b.n	6f6c <__aeabi_dadd+0x3f4>
    6e44:	001d      	movs	r5, r3
    6e46:	e6d0      	b.n	6bea <__aeabi_dadd+0x72>
    6e48:	0029      	movs	r1, r5
    6e4a:	3e1f      	subs	r6, #31
    6e4c:	40f1      	lsrs	r1, r6
    6e4e:	2b20      	cmp	r3, #32
    6e50:	d100      	bne.n	6e54 <__aeabi_dadd+0x2dc>
    6e52:	e08d      	b.n	6f70 <__aeabi_dadd+0x3f8>
    6e54:	2240      	movs	r2, #64	; 0x40
    6e56:	1ad3      	subs	r3, r2, r3
    6e58:	409d      	lsls	r5, r3
    6e5a:	432f      	orrs	r7, r5
    6e5c:	1e7d      	subs	r5, r7, #1
    6e5e:	41af      	sbcs	r7, r5
    6e60:	2400      	movs	r4, #0
    6e62:	430f      	orrs	r7, r1
    6e64:	2600      	movs	r6, #0
    6e66:	e744      	b.n	6cf2 <__aeabi_dadd+0x17a>
    6e68:	002b      	movs	r3, r5
    6e6a:	0008      	movs	r0, r1
    6e6c:	3b20      	subs	r3, #32
    6e6e:	40d8      	lsrs	r0, r3
    6e70:	0003      	movs	r3, r0
    6e72:	2d20      	cmp	r5, #32
    6e74:	d100      	bne.n	6e78 <__aeabi_dadd+0x300>
    6e76:	e07d      	b.n	6f74 <__aeabi_dadd+0x3fc>
    6e78:	2040      	movs	r0, #64	; 0x40
    6e7a:	1b45      	subs	r5, r0, r5
    6e7c:	40a9      	lsls	r1, r5
    6e7e:	430a      	orrs	r2, r1
    6e80:	1e51      	subs	r1, r2, #1
    6e82:	418a      	sbcs	r2, r1
    6e84:	2100      	movs	r1, #0
    6e86:	431a      	orrs	r2, r3
    6e88:	e6c7      	b.n	6c1a <__aeabi_dadd+0xa2>
    6e8a:	2e00      	cmp	r6, #0
    6e8c:	d050      	beq.n	6f30 <__aeabi_dadd+0x3b8>
    6e8e:	4e1a      	ldr	r6, [pc, #104]	; (6ef8 <__aeabi_dadd+0x380>)
    6e90:	42b0      	cmp	r0, r6
    6e92:	d057      	beq.n	6f44 <__aeabi_dadd+0x3cc>
    6e94:	2680      	movs	r6, #128	; 0x80
    6e96:	426b      	negs	r3, r5
    6e98:	4699      	mov	r9, r3
    6e9a:	0436      	lsls	r6, r6, #16
    6e9c:	4334      	orrs	r4, r6
    6e9e:	464b      	mov	r3, r9
    6ea0:	2b38      	cmp	r3, #56	; 0x38
    6ea2:	dd00      	ble.n	6ea6 <__aeabi_dadd+0x32e>
    6ea4:	e0d6      	b.n	7054 <__aeabi_dadd+0x4dc>
    6ea6:	2b1f      	cmp	r3, #31
    6ea8:	dd00      	ble.n	6eac <__aeabi_dadd+0x334>
    6eaa:	e135      	b.n	7118 <__aeabi_dadd+0x5a0>
    6eac:	2620      	movs	r6, #32
    6eae:	1af5      	subs	r5, r6, r3
    6eb0:	0026      	movs	r6, r4
    6eb2:	40ae      	lsls	r6, r5
    6eb4:	46b2      	mov	sl, r6
    6eb6:	003e      	movs	r6, r7
    6eb8:	40de      	lsrs	r6, r3
    6eba:	46ac      	mov	ip, r5
    6ebc:	0035      	movs	r5, r6
    6ebe:	4656      	mov	r6, sl
    6ec0:	432e      	orrs	r6, r5
    6ec2:	4665      	mov	r5, ip
    6ec4:	40af      	lsls	r7, r5
    6ec6:	1e7d      	subs	r5, r7, #1
    6ec8:	41af      	sbcs	r7, r5
    6eca:	40dc      	lsrs	r4, r3
    6ecc:	4337      	orrs	r7, r6
    6ece:	1bd7      	subs	r7, r2, r7
    6ed0:	42ba      	cmp	r2, r7
    6ed2:	4192      	sbcs	r2, r2
    6ed4:	1b0c      	subs	r4, r1, r4
    6ed6:	4252      	negs	r2, r2
    6ed8:	1aa4      	subs	r4, r4, r2
    6eda:	0006      	movs	r6, r0
    6edc:	46d8      	mov	r8, fp
    6ede:	e6a3      	b.n	6c28 <__aeabi_dadd+0xb0>
    6ee0:	4664      	mov	r4, ip
    6ee2:	4667      	mov	r7, ip
    6ee4:	432c      	orrs	r4, r5
    6ee6:	d000      	beq.n	6eea <__aeabi_dadd+0x372>
    6ee8:	e6a2      	b.n	6c30 <__aeabi_dadd+0xb8>
    6eea:	2500      	movs	r5, #0
    6eec:	2600      	movs	r6, #0
    6eee:	2700      	movs	r7, #0
    6ef0:	e706      	b.n	6d00 <__aeabi_dadd+0x188>
    6ef2:	001e      	movs	r6, r3
    6ef4:	e6c4      	b.n	6c80 <__aeabi_dadd+0x108>
    6ef6:	46c0      	nop			; (mov r8, r8)
    6ef8:	000007ff 	.word	0x000007ff
    6efc:	ff7fffff 	.word	0xff7fffff
    6f00:	800fffff 	.word	0x800fffff
    6f04:	2b1f      	cmp	r3, #31
    6f06:	dc63      	bgt.n	6fd0 <__aeabi_dadd+0x458>
    6f08:	2020      	movs	r0, #32
    6f0a:	1ac3      	subs	r3, r0, r3
    6f0c:	0008      	movs	r0, r1
    6f0e:	4098      	lsls	r0, r3
    6f10:	469c      	mov	ip, r3
    6f12:	4683      	mov	fp, r0
    6f14:	4653      	mov	r3, sl
    6f16:	0010      	movs	r0, r2
    6f18:	40d8      	lsrs	r0, r3
    6f1a:	0003      	movs	r3, r0
    6f1c:	4658      	mov	r0, fp
    6f1e:	4318      	orrs	r0, r3
    6f20:	4663      	mov	r3, ip
    6f22:	409a      	lsls	r2, r3
    6f24:	1e53      	subs	r3, r2, #1
    6f26:	419a      	sbcs	r2, r3
    6f28:	4653      	mov	r3, sl
    6f2a:	4302      	orrs	r2, r0
    6f2c:	40d9      	lsrs	r1, r3
    6f2e:	e703      	b.n	6d38 <__aeabi_dadd+0x1c0>
    6f30:	0026      	movs	r6, r4
    6f32:	433e      	orrs	r6, r7
    6f34:	d006      	beq.n	6f44 <__aeabi_dadd+0x3cc>
    6f36:	43eb      	mvns	r3, r5
    6f38:	4699      	mov	r9, r3
    6f3a:	2b00      	cmp	r3, #0
    6f3c:	d0c7      	beq.n	6ece <__aeabi_dadd+0x356>
    6f3e:	4e94      	ldr	r6, [pc, #592]	; (7190 <__aeabi_dadd+0x618>)
    6f40:	42b0      	cmp	r0, r6
    6f42:	d1ac      	bne.n	6e9e <__aeabi_dadd+0x326>
    6f44:	000c      	movs	r4, r1
    6f46:	0017      	movs	r7, r2
    6f48:	0006      	movs	r6, r0
    6f4a:	46d8      	mov	r8, fp
    6f4c:	e698      	b.n	6c80 <__aeabi_dadd+0x108>
    6f4e:	4b90      	ldr	r3, [pc, #576]	; (7190 <__aeabi_dadd+0x618>)
    6f50:	459a      	cmp	sl, r3
    6f52:	d00b      	beq.n	6f6c <__aeabi_dadd+0x3f4>
    6f54:	4682      	mov	sl, r0
    6f56:	e6e7      	b.n	6d28 <__aeabi_dadd+0x1b0>
    6f58:	2800      	cmp	r0, #0
    6f5a:	d000      	beq.n	6f5e <__aeabi_dadd+0x3e6>
    6f5c:	e09e      	b.n	709c <__aeabi_dadd+0x524>
    6f5e:	0018      	movs	r0, r3
    6f60:	4310      	orrs	r0, r2
    6f62:	d100      	bne.n	6f66 <__aeabi_dadd+0x3ee>
    6f64:	e0e9      	b.n	713a <__aeabi_dadd+0x5c2>
    6f66:	001c      	movs	r4, r3
    6f68:	0017      	movs	r7, r2
    6f6a:	46d8      	mov	r8, fp
    6f6c:	4e88      	ldr	r6, [pc, #544]	; (7190 <__aeabi_dadd+0x618>)
    6f6e:	e687      	b.n	6c80 <__aeabi_dadd+0x108>
    6f70:	2500      	movs	r5, #0
    6f72:	e772      	b.n	6e5a <__aeabi_dadd+0x2e2>
    6f74:	2100      	movs	r1, #0
    6f76:	e782      	b.n	6e7e <__aeabi_dadd+0x306>
    6f78:	0023      	movs	r3, r4
    6f7a:	433b      	orrs	r3, r7
    6f7c:	2e00      	cmp	r6, #0
    6f7e:	d000      	beq.n	6f82 <__aeabi_dadd+0x40a>
    6f80:	e0ab      	b.n	70da <__aeabi_dadd+0x562>
    6f82:	2b00      	cmp	r3, #0
    6f84:	d100      	bne.n	6f88 <__aeabi_dadd+0x410>
    6f86:	e0e7      	b.n	7158 <__aeabi_dadd+0x5e0>
    6f88:	000b      	movs	r3, r1
    6f8a:	4313      	orrs	r3, r2
    6f8c:	d100      	bne.n	6f90 <__aeabi_dadd+0x418>
    6f8e:	e677      	b.n	6c80 <__aeabi_dadd+0x108>
    6f90:	18ba      	adds	r2, r7, r2
    6f92:	42ba      	cmp	r2, r7
    6f94:	41bf      	sbcs	r7, r7
    6f96:	1864      	adds	r4, r4, r1
    6f98:	427f      	negs	r7, r7
    6f9a:	19e4      	adds	r4, r4, r7
    6f9c:	0223      	lsls	r3, r4, #8
    6f9e:	d400      	bmi.n	6fa2 <__aeabi_dadd+0x42a>
    6fa0:	e0f2      	b.n	7188 <__aeabi_dadd+0x610>
    6fa2:	4b7c      	ldr	r3, [pc, #496]	; (7194 <__aeabi_dadd+0x61c>)
    6fa4:	0017      	movs	r7, r2
    6fa6:	401c      	ands	r4, r3
    6fa8:	0006      	movs	r6, r0
    6faa:	e669      	b.n	6c80 <__aeabi_dadd+0x108>
    6fac:	0020      	movs	r0, r4
    6fae:	4338      	orrs	r0, r7
    6fb0:	2e00      	cmp	r6, #0
    6fb2:	d1d1      	bne.n	6f58 <__aeabi_dadd+0x3e0>
    6fb4:	2800      	cmp	r0, #0
    6fb6:	d15b      	bne.n	7070 <__aeabi_dadd+0x4f8>
    6fb8:	001c      	movs	r4, r3
    6fba:	4314      	orrs	r4, r2
    6fbc:	d100      	bne.n	6fc0 <__aeabi_dadd+0x448>
    6fbe:	e0a8      	b.n	7112 <__aeabi_dadd+0x59a>
    6fc0:	001c      	movs	r4, r3
    6fc2:	0017      	movs	r7, r2
    6fc4:	46d8      	mov	r8, fp
    6fc6:	e65b      	b.n	6c80 <__aeabi_dadd+0x108>
    6fc8:	0006      	movs	r6, r0
    6fca:	2400      	movs	r4, #0
    6fcc:	2700      	movs	r7, #0
    6fce:	e697      	b.n	6d00 <__aeabi_dadd+0x188>
    6fd0:	4650      	mov	r0, sl
    6fd2:	000b      	movs	r3, r1
    6fd4:	3820      	subs	r0, #32
    6fd6:	40c3      	lsrs	r3, r0
    6fd8:	4699      	mov	r9, r3
    6fda:	4653      	mov	r3, sl
    6fdc:	2b20      	cmp	r3, #32
    6fde:	d100      	bne.n	6fe2 <__aeabi_dadd+0x46a>
    6fe0:	e095      	b.n	710e <__aeabi_dadd+0x596>
    6fe2:	2340      	movs	r3, #64	; 0x40
    6fe4:	4650      	mov	r0, sl
    6fe6:	1a1b      	subs	r3, r3, r0
    6fe8:	4099      	lsls	r1, r3
    6fea:	430a      	orrs	r2, r1
    6fec:	1e51      	subs	r1, r2, #1
    6fee:	418a      	sbcs	r2, r1
    6ff0:	464b      	mov	r3, r9
    6ff2:	2100      	movs	r1, #0
    6ff4:	431a      	orrs	r2, r3
    6ff6:	e69f      	b.n	6d38 <__aeabi_dadd+0x1c0>
    6ff8:	2e00      	cmp	r6, #0
    6ffa:	d130      	bne.n	705e <__aeabi_dadd+0x4e6>
    6ffc:	0026      	movs	r6, r4
    6ffe:	433e      	orrs	r6, r7
    7000:	d067      	beq.n	70d2 <__aeabi_dadd+0x55a>
    7002:	43db      	mvns	r3, r3
    7004:	469a      	mov	sl, r3
    7006:	2b00      	cmp	r3, #0
    7008:	d01c      	beq.n	7044 <__aeabi_dadd+0x4cc>
    700a:	4e61      	ldr	r6, [pc, #388]	; (7190 <__aeabi_dadd+0x618>)
    700c:	42b0      	cmp	r0, r6
    700e:	d060      	beq.n	70d2 <__aeabi_dadd+0x55a>
    7010:	4653      	mov	r3, sl
    7012:	2b38      	cmp	r3, #56	; 0x38
    7014:	dd00      	ble.n	7018 <__aeabi_dadd+0x4a0>
    7016:	e096      	b.n	7146 <__aeabi_dadd+0x5ce>
    7018:	2b1f      	cmp	r3, #31
    701a:	dd00      	ble.n	701e <__aeabi_dadd+0x4a6>
    701c:	e09f      	b.n	715e <__aeabi_dadd+0x5e6>
    701e:	2620      	movs	r6, #32
    7020:	1af3      	subs	r3, r6, r3
    7022:	0026      	movs	r6, r4
    7024:	409e      	lsls	r6, r3
    7026:	469c      	mov	ip, r3
    7028:	46b3      	mov	fp, r6
    702a:	4653      	mov	r3, sl
    702c:	003e      	movs	r6, r7
    702e:	40de      	lsrs	r6, r3
    7030:	0033      	movs	r3, r6
    7032:	465e      	mov	r6, fp
    7034:	431e      	orrs	r6, r3
    7036:	4663      	mov	r3, ip
    7038:	409f      	lsls	r7, r3
    703a:	1e7b      	subs	r3, r7, #1
    703c:	419f      	sbcs	r7, r3
    703e:	4653      	mov	r3, sl
    7040:	40dc      	lsrs	r4, r3
    7042:	4337      	orrs	r7, r6
    7044:	18bf      	adds	r7, r7, r2
    7046:	4297      	cmp	r7, r2
    7048:	4192      	sbcs	r2, r2
    704a:	1864      	adds	r4, r4, r1
    704c:	4252      	negs	r2, r2
    704e:	18a4      	adds	r4, r4, r2
    7050:	0006      	movs	r6, r0
    7052:	e678      	b.n	6d46 <__aeabi_dadd+0x1ce>
    7054:	4327      	orrs	r7, r4
    7056:	1e7c      	subs	r4, r7, #1
    7058:	41a7      	sbcs	r7, r4
    705a:	2400      	movs	r4, #0
    705c:	e737      	b.n	6ece <__aeabi_dadd+0x356>
    705e:	4e4c      	ldr	r6, [pc, #304]	; (7190 <__aeabi_dadd+0x618>)
    7060:	42b0      	cmp	r0, r6
    7062:	d036      	beq.n	70d2 <__aeabi_dadd+0x55a>
    7064:	2680      	movs	r6, #128	; 0x80
    7066:	425b      	negs	r3, r3
    7068:	0436      	lsls	r6, r6, #16
    706a:	469a      	mov	sl, r3
    706c:	4334      	orrs	r4, r6
    706e:	e7cf      	b.n	7010 <__aeabi_dadd+0x498>
    7070:	0018      	movs	r0, r3
    7072:	4310      	orrs	r0, r2
    7074:	d100      	bne.n	7078 <__aeabi_dadd+0x500>
    7076:	e603      	b.n	6c80 <__aeabi_dadd+0x108>
    7078:	1ab8      	subs	r0, r7, r2
    707a:	4684      	mov	ip, r0
    707c:	4567      	cmp	r7, ip
    707e:	41ad      	sbcs	r5, r5
    7080:	1ae0      	subs	r0, r4, r3
    7082:	426d      	negs	r5, r5
    7084:	1b40      	subs	r0, r0, r5
    7086:	0205      	lsls	r5, r0, #8
    7088:	d400      	bmi.n	708c <__aeabi_dadd+0x514>
    708a:	e62c      	b.n	6ce6 <__aeabi_dadd+0x16e>
    708c:	1bd7      	subs	r7, r2, r7
    708e:	42ba      	cmp	r2, r7
    7090:	4192      	sbcs	r2, r2
    7092:	1b1c      	subs	r4, r3, r4
    7094:	4252      	negs	r2, r2
    7096:	1aa4      	subs	r4, r4, r2
    7098:	46d8      	mov	r8, fp
    709a:	e5f1      	b.n	6c80 <__aeabi_dadd+0x108>
    709c:	0018      	movs	r0, r3
    709e:	4310      	orrs	r0, r2
    70a0:	d100      	bne.n	70a4 <__aeabi_dadd+0x52c>
    70a2:	e763      	b.n	6f6c <__aeabi_dadd+0x3f4>
    70a4:	08f8      	lsrs	r0, r7, #3
    70a6:	0767      	lsls	r7, r4, #29
    70a8:	4307      	orrs	r7, r0
    70aa:	2080      	movs	r0, #128	; 0x80
    70ac:	08e4      	lsrs	r4, r4, #3
    70ae:	0300      	lsls	r0, r0, #12
    70b0:	4204      	tst	r4, r0
    70b2:	d008      	beq.n	70c6 <__aeabi_dadd+0x54e>
    70b4:	08dd      	lsrs	r5, r3, #3
    70b6:	4205      	tst	r5, r0
    70b8:	d105      	bne.n	70c6 <__aeabi_dadd+0x54e>
    70ba:	08d2      	lsrs	r2, r2, #3
    70bc:	0759      	lsls	r1, r3, #29
    70be:	4311      	orrs	r1, r2
    70c0:	000f      	movs	r7, r1
    70c2:	002c      	movs	r4, r5
    70c4:	46d8      	mov	r8, fp
    70c6:	0f7b      	lsrs	r3, r7, #29
    70c8:	00e4      	lsls	r4, r4, #3
    70ca:	431c      	orrs	r4, r3
    70cc:	00ff      	lsls	r7, r7, #3
    70ce:	4e30      	ldr	r6, [pc, #192]	; (7190 <__aeabi_dadd+0x618>)
    70d0:	e5d6      	b.n	6c80 <__aeabi_dadd+0x108>
    70d2:	000c      	movs	r4, r1
    70d4:	0017      	movs	r7, r2
    70d6:	0006      	movs	r6, r0
    70d8:	e5d2      	b.n	6c80 <__aeabi_dadd+0x108>
    70da:	2b00      	cmp	r3, #0
    70dc:	d038      	beq.n	7150 <__aeabi_dadd+0x5d8>
    70de:	000b      	movs	r3, r1
    70e0:	4313      	orrs	r3, r2
    70e2:	d100      	bne.n	70e6 <__aeabi_dadd+0x56e>
    70e4:	e742      	b.n	6f6c <__aeabi_dadd+0x3f4>
    70e6:	08f8      	lsrs	r0, r7, #3
    70e8:	0767      	lsls	r7, r4, #29
    70ea:	4307      	orrs	r7, r0
    70ec:	2080      	movs	r0, #128	; 0x80
    70ee:	08e4      	lsrs	r4, r4, #3
    70f0:	0300      	lsls	r0, r0, #12
    70f2:	4204      	tst	r4, r0
    70f4:	d0e7      	beq.n	70c6 <__aeabi_dadd+0x54e>
    70f6:	08cb      	lsrs	r3, r1, #3
    70f8:	4203      	tst	r3, r0
    70fa:	d1e4      	bne.n	70c6 <__aeabi_dadd+0x54e>
    70fc:	08d2      	lsrs	r2, r2, #3
    70fe:	0749      	lsls	r1, r1, #29
    7100:	4311      	orrs	r1, r2
    7102:	000f      	movs	r7, r1
    7104:	001c      	movs	r4, r3
    7106:	e7de      	b.n	70c6 <__aeabi_dadd+0x54e>
    7108:	2700      	movs	r7, #0
    710a:	2400      	movs	r4, #0
    710c:	e5d5      	b.n	6cba <__aeabi_dadd+0x142>
    710e:	2100      	movs	r1, #0
    7110:	e76b      	b.n	6fea <__aeabi_dadd+0x472>
    7112:	2500      	movs	r5, #0
    7114:	2700      	movs	r7, #0
    7116:	e5f3      	b.n	6d00 <__aeabi_dadd+0x188>
    7118:	464e      	mov	r6, r9
    711a:	0025      	movs	r5, r4
    711c:	3e20      	subs	r6, #32
    711e:	40f5      	lsrs	r5, r6
    7120:	464b      	mov	r3, r9
    7122:	002e      	movs	r6, r5
    7124:	2b20      	cmp	r3, #32
    7126:	d02d      	beq.n	7184 <__aeabi_dadd+0x60c>
    7128:	2540      	movs	r5, #64	; 0x40
    712a:	1aed      	subs	r5, r5, r3
    712c:	40ac      	lsls	r4, r5
    712e:	4327      	orrs	r7, r4
    7130:	1e7c      	subs	r4, r7, #1
    7132:	41a7      	sbcs	r7, r4
    7134:	2400      	movs	r4, #0
    7136:	4337      	orrs	r7, r6
    7138:	e6c9      	b.n	6ece <__aeabi_dadd+0x356>
    713a:	2480      	movs	r4, #128	; 0x80
    713c:	2500      	movs	r5, #0
    713e:	0324      	lsls	r4, r4, #12
    7140:	4e13      	ldr	r6, [pc, #76]	; (7190 <__aeabi_dadd+0x618>)
    7142:	2700      	movs	r7, #0
    7144:	e5dc      	b.n	6d00 <__aeabi_dadd+0x188>
    7146:	4327      	orrs	r7, r4
    7148:	1e7c      	subs	r4, r7, #1
    714a:	41a7      	sbcs	r7, r4
    714c:	2400      	movs	r4, #0
    714e:	e779      	b.n	7044 <__aeabi_dadd+0x4cc>
    7150:	000c      	movs	r4, r1
    7152:	0017      	movs	r7, r2
    7154:	4e0e      	ldr	r6, [pc, #56]	; (7190 <__aeabi_dadd+0x618>)
    7156:	e593      	b.n	6c80 <__aeabi_dadd+0x108>
    7158:	000c      	movs	r4, r1
    715a:	0017      	movs	r7, r2
    715c:	e590      	b.n	6c80 <__aeabi_dadd+0x108>
    715e:	4656      	mov	r6, sl
    7160:	0023      	movs	r3, r4
    7162:	3e20      	subs	r6, #32
    7164:	40f3      	lsrs	r3, r6
    7166:	4699      	mov	r9, r3
    7168:	4653      	mov	r3, sl
    716a:	2b20      	cmp	r3, #32
    716c:	d00e      	beq.n	718c <__aeabi_dadd+0x614>
    716e:	2340      	movs	r3, #64	; 0x40
    7170:	4656      	mov	r6, sl
    7172:	1b9b      	subs	r3, r3, r6
    7174:	409c      	lsls	r4, r3
    7176:	4327      	orrs	r7, r4
    7178:	1e7c      	subs	r4, r7, #1
    717a:	41a7      	sbcs	r7, r4
    717c:	464b      	mov	r3, r9
    717e:	2400      	movs	r4, #0
    7180:	431f      	orrs	r7, r3
    7182:	e75f      	b.n	7044 <__aeabi_dadd+0x4cc>
    7184:	2400      	movs	r4, #0
    7186:	e7d2      	b.n	712e <__aeabi_dadd+0x5b6>
    7188:	0017      	movs	r7, r2
    718a:	e5b2      	b.n	6cf2 <__aeabi_dadd+0x17a>
    718c:	2400      	movs	r4, #0
    718e:	e7f2      	b.n	7176 <__aeabi_dadd+0x5fe>
    7190:	000007ff 	.word	0x000007ff
    7194:	ff7fffff 	.word	0xff7fffff

00007198 <__aeabi_ddiv>:
    7198:	b5f0      	push	{r4, r5, r6, r7, lr}
    719a:	4657      	mov	r7, sl
    719c:	4645      	mov	r5, r8
    719e:	46de      	mov	lr, fp
    71a0:	464e      	mov	r6, r9
    71a2:	b5e0      	push	{r5, r6, r7, lr}
    71a4:	004c      	lsls	r4, r1, #1
    71a6:	030e      	lsls	r6, r1, #12
    71a8:	b087      	sub	sp, #28
    71aa:	4683      	mov	fp, r0
    71ac:	4692      	mov	sl, r2
    71ae:	001d      	movs	r5, r3
    71b0:	4680      	mov	r8, r0
    71b2:	0b36      	lsrs	r6, r6, #12
    71b4:	0d64      	lsrs	r4, r4, #21
    71b6:	0fcf      	lsrs	r7, r1, #31
    71b8:	2c00      	cmp	r4, #0
    71ba:	d04f      	beq.n	725c <__aeabi_ddiv+0xc4>
    71bc:	4b6f      	ldr	r3, [pc, #444]	; (737c <__aeabi_ddiv+0x1e4>)
    71be:	429c      	cmp	r4, r3
    71c0:	d035      	beq.n	722e <__aeabi_ddiv+0x96>
    71c2:	2380      	movs	r3, #128	; 0x80
    71c4:	0f42      	lsrs	r2, r0, #29
    71c6:	041b      	lsls	r3, r3, #16
    71c8:	00f6      	lsls	r6, r6, #3
    71ca:	4313      	orrs	r3, r2
    71cc:	4333      	orrs	r3, r6
    71ce:	4699      	mov	r9, r3
    71d0:	00c3      	lsls	r3, r0, #3
    71d2:	4698      	mov	r8, r3
    71d4:	4b6a      	ldr	r3, [pc, #424]	; (7380 <__aeabi_ddiv+0x1e8>)
    71d6:	2600      	movs	r6, #0
    71d8:	469c      	mov	ip, r3
    71da:	2300      	movs	r3, #0
    71dc:	4464      	add	r4, ip
    71de:	9303      	str	r3, [sp, #12]
    71e0:	032b      	lsls	r3, r5, #12
    71e2:	0b1b      	lsrs	r3, r3, #12
    71e4:	469b      	mov	fp, r3
    71e6:	006b      	lsls	r3, r5, #1
    71e8:	0fed      	lsrs	r5, r5, #31
    71ea:	4650      	mov	r0, sl
    71ec:	0d5b      	lsrs	r3, r3, #21
    71ee:	9501      	str	r5, [sp, #4]
    71f0:	d05e      	beq.n	72b0 <__aeabi_ddiv+0x118>
    71f2:	4a62      	ldr	r2, [pc, #392]	; (737c <__aeabi_ddiv+0x1e4>)
    71f4:	4293      	cmp	r3, r2
    71f6:	d053      	beq.n	72a0 <__aeabi_ddiv+0x108>
    71f8:	465a      	mov	r2, fp
    71fa:	00d1      	lsls	r1, r2, #3
    71fc:	2280      	movs	r2, #128	; 0x80
    71fe:	0f40      	lsrs	r0, r0, #29
    7200:	0412      	lsls	r2, r2, #16
    7202:	4302      	orrs	r2, r0
    7204:	430a      	orrs	r2, r1
    7206:	4693      	mov	fp, r2
    7208:	4652      	mov	r2, sl
    720a:	00d1      	lsls	r1, r2, #3
    720c:	4a5c      	ldr	r2, [pc, #368]	; (7380 <__aeabi_ddiv+0x1e8>)
    720e:	4694      	mov	ip, r2
    7210:	2200      	movs	r2, #0
    7212:	4463      	add	r3, ip
    7214:	0038      	movs	r0, r7
    7216:	4068      	eors	r0, r5
    7218:	4684      	mov	ip, r0
    721a:	9002      	str	r0, [sp, #8]
    721c:	1ae4      	subs	r4, r4, r3
    721e:	4316      	orrs	r6, r2
    7220:	2e0f      	cmp	r6, #15
    7222:	d900      	bls.n	7226 <__aeabi_ddiv+0x8e>
    7224:	e0b4      	b.n	7390 <__aeabi_ddiv+0x1f8>
    7226:	4b57      	ldr	r3, [pc, #348]	; (7384 <__aeabi_ddiv+0x1ec>)
    7228:	00b6      	lsls	r6, r6, #2
    722a:	599b      	ldr	r3, [r3, r6]
    722c:	469f      	mov	pc, r3
    722e:	0003      	movs	r3, r0
    7230:	4333      	orrs	r3, r6
    7232:	4699      	mov	r9, r3
    7234:	d16c      	bne.n	7310 <__aeabi_ddiv+0x178>
    7236:	2300      	movs	r3, #0
    7238:	4698      	mov	r8, r3
    723a:	3302      	adds	r3, #2
    723c:	2608      	movs	r6, #8
    723e:	9303      	str	r3, [sp, #12]
    7240:	e7ce      	b.n	71e0 <__aeabi_ddiv+0x48>
    7242:	46cb      	mov	fp, r9
    7244:	4641      	mov	r1, r8
    7246:	9a03      	ldr	r2, [sp, #12]
    7248:	9701      	str	r7, [sp, #4]
    724a:	2a02      	cmp	r2, #2
    724c:	d165      	bne.n	731a <__aeabi_ddiv+0x182>
    724e:	9b01      	ldr	r3, [sp, #4]
    7250:	4c4a      	ldr	r4, [pc, #296]	; (737c <__aeabi_ddiv+0x1e4>)
    7252:	469c      	mov	ip, r3
    7254:	2300      	movs	r3, #0
    7256:	2200      	movs	r2, #0
    7258:	4698      	mov	r8, r3
    725a:	e06b      	b.n	7334 <__aeabi_ddiv+0x19c>
    725c:	0003      	movs	r3, r0
    725e:	4333      	orrs	r3, r6
    7260:	4699      	mov	r9, r3
    7262:	d04e      	beq.n	7302 <__aeabi_ddiv+0x16a>
    7264:	2e00      	cmp	r6, #0
    7266:	d100      	bne.n	726a <__aeabi_ddiv+0xd2>
    7268:	e1bc      	b.n	75e4 <__aeabi_ddiv+0x44c>
    726a:	0030      	movs	r0, r6
    726c:	f001 fb08 	bl	8880 <__clzsi2>
    7270:	0003      	movs	r3, r0
    7272:	3b0b      	subs	r3, #11
    7274:	2b1c      	cmp	r3, #28
    7276:	dd00      	ble.n	727a <__aeabi_ddiv+0xe2>
    7278:	e1ac      	b.n	75d4 <__aeabi_ddiv+0x43c>
    727a:	221d      	movs	r2, #29
    727c:	1ad3      	subs	r3, r2, r3
    727e:	465a      	mov	r2, fp
    7280:	0001      	movs	r1, r0
    7282:	40da      	lsrs	r2, r3
    7284:	3908      	subs	r1, #8
    7286:	408e      	lsls	r6, r1
    7288:	0013      	movs	r3, r2
    728a:	4333      	orrs	r3, r6
    728c:	4699      	mov	r9, r3
    728e:	465b      	mov	r3, fp
    7290:	408b      	lsls	r3, r1
    7292:	4698      	mov	r8, r3
    7294:	2300      	movs	r3, #0
    7296:	4c3c      	ldr	r4, [pc, #240]	; (7388 <__aeabi_ddiv+0x1f0>)
    7298:	2600      	movs	r6, #0
    729a:	1a24      	subs	r4, r4, r0
    729c:	9303      	str	r3, [sp, #12]
    729e:	e79f      	b.n	71e0 <__aeabi_ddiv+0x48>
    72a0:	4651      	mov	r1, sl
    72a2:	465a      	mov	r2, fp
    72a4:	4311      	orrs	r1, r2
    72a6:	d129      	bne.n	72fc <__aeabi_ddiv+0x164>
    72a8:	2200      	movs	r2, #0
    72aa:	4693      	mov	fp, r2
    72ac:	3202      	adds	r2, #2
    72ae:	e7b1      	b.n	7214 <__aeabi_ddiv+0x7c>
    72b0:	4659      	mov	r1, fp
    72b2:	4301      	orrs	r1, r0
    72b4:	d01e      	beq.n	72f4 <__aeabi_ddiv+0x15c>
    72b6:	465b      	mov	r3, fp
    72b8:	2b00      	cmp	r3, #0
    72ba:	d100      	bne.n	72be <__aeabi_ddiv+0x126>
    72bc:	e19e      	b.n	75fc <__aeabi_ddiv+0x464>
    72be:	4658      	mov	r0, fp
    72c0:	f001 fade 	bl	8880 <__clzsi2>
    72c4:	0003      	movs	r3, r0
    72c6:	3b0b      	subs	r3, #11
    72c8:	2b1c      	cmp	r3, #28
    72ca:	dd00      	ble.n	72ce <__aeabi_ddiv+0x136>
    72cc:	e18f      	b.n	75ee <__aeabi_ddiv+0x456>
    72ce:	0002      	movs	r2, r0
    72d0:	4659      	mov	r1, fp
    72d2:	3a08      	subs	r2, #8
    72d4:	4091      	lsls	r1, r2
    72d6:	468b      	mov	fp, r1
    72d8:	211d      	movs	r1, #29
    72da:	1acb      	subs	r3, r1, r3
    72dc:	4651      	mov	r1, sl
    72de:	40d9      	lsrs	r1, r3
    72e0:	000b      	movs	r3, r1
    72e2:	4659      	mov	r1, fp
    72e4:	430b      	orrs	r3, r1
    72e6:	4651      	mov	r1, sl
    72e8:	469b      	mov	fp, r3
    72ea:	4091      	lsls	r1, r2
    72ec:	4b26      	ldr	r3, [pc, #152]	; (7388 <__aeabi_ddiv+0x1f0>)
    72ee:	2200      	movs	r2, #0
    72f0:	1a1b      	subs	r3, r3, r0
    72f2:	e78f      	b.n	7214 <__aeabi_ddiv+0x7c>
    72f4:	2300      	movs	r3, #0
    72f6:	2201      	movs	r2, #1
    72f8:	469b      	mov	fp, r3
    72fa:	e78b      	b.n	7214 <__aeabi_ddiv+0x7c>
    72fc:	4651      	mov	r1, sl
    72fe:	2203      	movs	r2, #3
    7300:	e788      	b.n	7214 <__aeabi_ddiv+0x7c>
    7302:	2300      	movs	r3, #0
    7304:	4698      	mov	r8, r3
    7306:	3301      	adds	r3, #1
    7308:	2604      	movs	r6, #4
    730a:	2400      	movs	r4, #0
    730c:	9303      	str	r3, [sp, #12]
    730e:	e767      	b.n	71e0 <__aeabi_ddiv+0x48>
    7310:	2303      	movs	r3, #3
    7312:	46b1      	mov	r9, r6
    7314:	9303      	str	r3, [sp, #12]
    7316:	260c      	movs	r6, #12
    7318:	e762      	b.n	71e0 <__aeabi_ddiv+0x48>
    731a:	2a03      	cmp	r2, #3
    731c:	d100      	bne.n	7320 <__aeabi_ddiv+0x188>
    731e:	e25c      	b.n	77da <__aeabi_ddiv+0x642>
    7320:	9b01      	ldr	r3, [sp, #4]
    7322:	2a01      	cmp	r2, #1
    7324:	d000      	beq.n	7328 <__aeabi_ddiv+0x190>
    7326:	e1e4      	b.n	76f2 <__aeabi_ddiv+0x55a>
    7328:	4013      	ands	r3, r2
    732a:	469c      	mov	ip, r3
    732c:	2300      	movs	r3, #0
    732e:	2400      	movs	r4, #0
    7330:	2200      	movs	r2, #0
    7332:	4698      	mov	r8, r3
    7334:	2100      	movs	r1, #0
    7336:	0312      	lsls	r2, r2, #12
    7338:	0b13      	lsrs	r3, r2, #12
    733a:	0d0a      	lsrs	r2, r1, #20
    733c:	0512      	lsls	r2, r2, #20
    733e:	431a      	orrs	r2, r3
    7340:	0523      	lsls	r3, r4, #20
    7342:	4c12      	ldr	r4, [pc, #72]	; (738c <__aeabi_ddiv+0x1f4>)
    7344:	4640      	mov	r0, r8
    7346:	4022      	ands	r2, r4
    7348:	4313      	orrs	r3, r2
    734a:	4662      	mov	r2, ip
    734c:	005b      	lsls	r3, r3, #1
    734e:	07d2      	lsls	r2, r2, #31
    7350:	085b      	lsrs	r3, r3, #1
    7352:	4313      	orrs	r3, r2
    7354:	0019      	movs	r1, r3
    7356:	b007      	add	sp, #28
    7358:	bc3c      	pop	{r2, r3, r4, r5}
    735a:	4690      	mov	r8, r2
    735c:	4699      	mov	r9, r3
    735e:	46a2      	mov	sl, r4
    7360:	46ab      	mov	fp, r5
    7362:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7364:	2300      	movs	r3, #0
    7366:	2280      	movs	r2, #128	; 0x80
    7368:	469c      	mov	ip, r3
    736a:	0312      	lsls	r2, r2, #12
    736c:	4698      	mov	r8, r3
    736e:	4c03      	ldr	r4, [pc, #12]	; (737c <__aeabi_ddiv+0x1e4>)
    7370:	e7e0      	b.n	7334 <__aeabi_ddiv+0x19c>
    7372:	2300      	movs	r3, #0
    7374:	4c01      	ldr	r4, [pc, #4]	; (737c <__aeabi_ddiv+0x1e4>)
    7376:	2200      	movs	r2, #0
    7378:	4698      	mov	r8, r3
    737a:	e7db      	b.n	7334 <__aeabi_ddiv+0x19c>
    737c:	000007ff 	.word	0x000007ff
    7380:	fffffc01 	.word	0xfffffc01
    7384:	00008d20 	.word	0x00008d20
    7388:	fffffc0d 	.word	0xfffffc0d
    738c:	800fffff 	.word	0x800fffff
    7390:	45d9      	cmp	r9, fp
    7392:	d900      	bls.n	7396 <__aeabi_ddiv+0x1fe>
    7394:	e139      	b.n	760a <__aeabi_ddiv+0x472>
    7396:	d100      	bne.n	739a <__aeabi_ddiv+0x202>
    7398:	e134      	b.n	7604 <__aeabi_ddiv+0x46c>
    739a:	2300      	movs	r3, #0
    739c:	4646      	mov	r6, r8
    739e:	464d      	mov	r5, r9
    73a0:	469a      	mov	sl, r3
    73a2:	3c01      	subs	r4, #1
    73a4:	465b      	mov	r3, fp
    73a6:	0e0a      	lsrs	r2, r1, #24
    73a8:	021b      	lsls	r3, r3, #8
    73aa:	431a      	orrs	r2, r3
    73ac:	020b      	lsls	r3, r1, #8
    73ae:	0c17      	lsrs	r7, r2, #16
    73b0:	9303      	str	r3, [sp, #12]
    73b2:	0413      	lsls	r3, r2, #16
    73b4:	0c1b      	lsrs	r3, r3, #16
    73b6:	0039      	movs	r1, r7
    73b8:	0028      	movs	r0, r5
    73ba:	4690      	mov	r8, r2
    73bc:	9301      	str	r3, [sp, #4]
    73be:	f7fe fcd1 	bl	5d64 <__udivsi3>
    73c2:	0002      	movs	r2, r0
    73c4:	9b01      	ldr	r3, [sp, #4]
    73c6:	4683      	mov	fp, r0
    73c8:	435a      	muls	r2, r3
    73ca:	0028      	movs	r0, r5
    73cc:	0039      	movs	r1, r7
    73ce:	4691      	mov	r9, r2
    73d0:	f7fe fd4e 	bl	5e70 <__aeabi_uidivmod>
    73d4:	0c35      	lsrs	r5, r6, #16
    73d6:	0409      	lsls	r1, r1, #16
    73d8:	430d      	orrs	r5, r1
    73da:	45a9      	cmp	r9, r5
    73dc:	d90d      	bls.n	73fa <__aeabi_ddiv+0x262>
    73de:	465b      	mov	r3, fp
    73e0:	4445      	add	r5, r8
    73e2:	3b01      	subs	r3, #1
    73e4:	45a8      	cmp	r8, r5
    73e6:	d900      	bls.n	73ea <__aeabi_ddiv+0x252>
    73e8:	e13a      	b.n	7660 <__aeabi_ddiv+0x4c8>
    73ea:	45a9      	cmp	r9, r5
    73ec:	d800      	bhi.n	73f0 <__aeabi_ddiv+0x258>
    73ee:	e137      	b.n	7660 <__aeabi_ddiv+0x4c8>
    73f0:	2302      	movs	r3, #2
    73f2:	425b      	negs	r3, r3
    73f4:	469c      	mov	ip, r3
    73f6:	4445      	add	r5, r8
    73f8:	44e3      	add	fp, ip
    73fa:	464b      	mov	r3, r9
    73fc:	1aeb      	subs	r3, r5, r3
    73fe:	0039      	movs	r1, r7
    7400:	0018      	movs	r0, r3
    7402:	9304      	str	r3, [sp, #16]
    7404:	f7fe fcae 	bl	5d64 <__udivsi3>
    7408:	9b01      	ldr	r3, [sp, #4]
    740a:	0005      	movs	r5, r0
    740c:	4343      	muls	r3, r0
    740e:	0039      	movs	r1, r7
    7410:	9804      	ldr	r0, [sp, #16]
    7412:	4699      	mov	r9, r3
    7414:	f7fe fd2c 	bl	5e70 <__aeabi_uidivmod>
    7418:	0433      	lsls	r3, r6, #16
    741a:	0409      	lsls	r1, r1, #16
    741c:	0c1b      	lsrs	r3, r3, #16
    741e:	430b      	orrs	r3, r1
    7420:	4599      	cmp	r9, r3
    7422:	d909      	bls.n	7438 <__aeabi_ddiv+0x2a0>
    7424:	4443      	add	r3, r8
    7426:	1e6a      	subs	r2, r5, #1
    7428:	4598      	cmp	r8, r3
    742a:	d900      	bls.n	742e <__aeabi_ddiv+0x296>
    742c:	e11a      	b.n	7664 <__aeabi_ddiv+0x4cc>
    742e:	4599      	cmp	r9, r3
    7430:	d800      	bhi.n	7434 <__aeabi_ddiv+0x29c>
    7432:	e117      	b.n	7664 <__aeabi_ddiv+0x4cc>
    7434:	3d02      	subs	r5, #2
    7436:	4443      	add	r3, r8
    7438:	464a      	mov	r2, r9
    743a:	1a9b      	subs	r3, r3, r2
    743c:	465a      	mov	r2, fp
    743e:	0412      	lsls	r2, r2, #16
    7440:	432a      	orrs	r2, r5
    7442:	9903      	ldr	r1, [sp, #12]
    7444:	4693      	mov	fp, r2
    7446:	0c10      	lsrs	r0, r2, #16
    7448:	0c0a      	lsrs	r2, r1, #16
    744a:	4691      	mov	r9, r2
    744c:	0409      	lsls	r1, r1, #16
    744e:	465a      	mov	r2, fp
    7450:	0c09      	lsrs	r1, r1, #16
    7452:	464e      	mov	r6, r9
    7454:	000d      	movs	r5, r1
    7456:	0412      	lsls	r2, r2, #16
    7458:	0c12      	lsrs	r2, r2, #16
    745a:	4345      	muls	r5, r0
    745c:	9105      	str	r1, [sp, #20]
    745e:	4351      	muls	r1, r2
    7460:	4372      	muls	r2, r6
    7462:	4370      	muls	r0, r6
    7464:	1952      	adds	r2, r2, r5
    7466:	0c0e      	lsrs	r6, r1, #16
    7468:	18b2      	adds	r2, r6, r2
    746a:	4295      	cmp	r5, r2
    746c:	d903      	bls.n	7476 <__aeabi_ddiv+0x2de>
    746e:	2580      	movs	r5, #128	; 0x80
    7470:	026d      	lsls	r5, r5, #9
    7472:	46ac      	mov	ip, r5
    7474:	4460      	add	r0, ip
    7476:	0c15      	lsrs	r5, r2, #16
    7478:	0409      	lsls	r1, r1, #16
    747a:	0412      	lsls	r2, r2, #16
    747c:	0c09      	lsrs	r1, r1, #16
    747e:	1828      	adds	r0, r5, r0
    7480:	1852      	adds	r2, r2, r1
    7482:	4283      	cmp	r3, r0
    7484:	d200      	bcs.n	7488 <__aeabi_ddiv+0x2f0>
    7486:	e0ce      	b.n	7626 <__aeabi_ddiv+0x48e>
    7488:	d100      	bne.n	748c <__aeabi_ddiv+0x2f4>
    748a:	e0c8      	b.n	761e <__aeabi_ddiv+0x486>
    748c:	1a1d      	subs	r5, r3, r0
    748e:	4653      	mov	r3, sl
    7490:	1a9e      	subs	r6, r3, r2
    7492:	45b2      	cmp	sl, r6
    7494:	4192      	sbcs	r2, r2
    7496:	4252      	negs	r2, r2
    7498:	1aab      	subs	r3, r5, r2
    749a:	469a      	mov	sl, r3
    749c:	4598      	cmp	r8, r3
    749e:	d100      	bne.n	74a2 <__aeabi_ddiv+0x30a>
    74a0:	e117      	b.n	76d2 <__aeabi_ddiv+0x53a>
    74a2:	0039      	movs	r1, r7
    74a4:	0018      	movs	r0, r3
    74a6:	f7fe fc5d 	bl	5d64 <__udivsi3>
    74aa:	9b01      	ldr	r3, [sp, #4]
    74ac:	0005      	movs	r5, r0
    74ae:	4343      	muls	r3, r0
    74b0:	0039      	movs	r1, r7
    74b2:	4650      	mov	r0, sl
    74b4:	9304      	str	r3, [sp, #16]
    74b6:	f7fe fcdb 	bl	5e70 <__aeabi_uidivmod>
    74ba:	9804      	ldr	r0, [sp, #16]
    74bc:	040b      	lsls	r3, r1, #16
    74be:	0c31      	lsrs	r1, r6, #16
    74c0:	4319      	orrs	r1, r3
    74c2:	4288      	cmp	r0, r1
    74c4:	d909      	bls.n	74da <__aeabi_ddiv+0x342>
    74c6:	4441      	add	r1, r8
    74c8:	1e6b      	subs	r3, r5, #1
    74ca:	4588      	cmp	r8, r1
    74cc:	d900      	bls.n	74d0 <__aeabi_ddiv+0x338>
    74ce:	e107      	b.n	76e0 <__aeabi_ddiv+0x548>
    74d0:	4288      	cmp	r0, r1
    74d2:	d800      	bhi.n	74d6 <__aeabi_ddiv+0x33e>
    74d4:	e104      	b.n	76e0 <__aeabi_ddiv+0x548>
    74d6:	3d02      	subs	r5, #2
    74d8:	4441      	add	r1, r8
    74da:	9b04      	ldr	r3, [sp, #16]
    74dc:	1acb      	subs	r3, r1, r3
    74de:	0018      	movs	r0, r3
    74e0:	0039      	movs	r1, r7
    74e2:	9304      	str	r3, [sp, #16]
    74e4:	f7fe fc3e 	bl	5d64 <__udivsi3>
    74e8:	9b01      	ldr	r3, [sp, #4]
    74ea:	4682      	mov	sl, r0
    74ec:	4343      	muls	r3, r0
    74ee:	0039      	movs	r1, r7
    74f0:	9804      	ldr	r0, [sp, #16]
    74f2:	9301      	str	r3, [sp, #4]
    74f4:	f7fe fcbc 	bl	5e70 <__aeabi_uidivmod>
    74f8:	9801      	ldr	r0, [sp, #4]
    74fa:	040b      	lsls	r3, r1, #16
    74fc:	0431      	lsls	r1, r6, #16
    74fe:	0c09      	lsrs	r1, r1, #16
    7500:	4319      	orrs	r1, r3
    7502:	4288      	cmp	r0, r1
    7504:	d90d      	bls.n	7522 <__aeabi_ddiv+0x38a>
    7506:	4653      	mov	r3, sl
    7508:	4441      	add	r1, r8
    750a:	3b01      	subs	r3, #1
    750c:	4588      	cmp	r8, r1
    750e:	d900      	bls.n	7512 <__aeabi_ddiv+0x37a>
    7510:	e0e8      	b.n	76e4 <__aeabi_ddiv+0x54c>
    7512:	4288      	cmp	r0, r1
    7514:	d800      	bhi.n	7518 <__aeabi_ddiv+0x380>
    7516:	e0e5      	b.n	76e4 <__aeabi_ddiv+0x54c>
    7518:	2302      	movs	r3, #2
    751a:	425b      	negs	r3, r3
    751c:	469c      	mov	ip, r3
    751e:	4441      	add	r1, r8
    7520:	44e2      	add	sl, ip
    7522:	9b01      	ldr	r3, [sp, #4]
    7524:	042d      	lsls	r5, r5, #16
    7526:	1ace      	subs	r6, r1, r3
    7528:	4651      	mov	r1, sl
    752a:	4329      	orrs	r1, r5
    752c:	9d05      	ldr	r5, [sp, #20]
    752e:	464f      	mov	r7, r9
    7530:	002a      	movs	r2, r5
    7532:	040b      	lsls	r3, r1, #16
    7534:	0c08      	lsrs	r0, r1, #16
    7536:	0c1b      	lsrs	r3, r3, #16
    7538:	435a      	muls	r2, r3
    753a:	4345      	muls	r5, r0
    753c:	437b      	muls	r3, r7
    753e:	4378      	muls	r0, r7
    7540:	195b      	adds	r3, r3, r5
    7542:	0c17      	lsrs	r7, r2, #16
    7544:	18fb      	adds	r3, r7, r3
    7546:	429d      	cmp	r5, r3
    7548:	d903      	bls.n	7552 <__aeabi_ddiv+0x3ba>
    754a:	2580      	movs	r5, #128	; 0x80
    754c:	026d      	lsls	r5, r5, #9
    754e:	46ac      	mov	ip, r5
    7550:	4460      	add	r0, ip
    7552:	0c1d      	lsrs	r5, r3, #16
    7554:	0412      	lsls	r2, r2, #16
    7556:	041b      	lsls	r3, r3, #16
    7558:	0c12      	lsrs	r2, r2, #16
    755a:	1828      	adds	r0, r5, r0
    755c:	189b      	adds	r3, r3, r2
    755e:	4286      	cmp	r6, r0
    7560:	d200      	bcs.n	7564 <__aeabi_ddiv+0x3cc>
    7562:	e093      	b.n	768c <__aeabi_ddiv+0x4f4>
    7564:	d100      	bne.n	7568 <__aeabi_ddiv+0x3d0>
    7566:	e08e      	b.n	7686 <__aeabi_ddiv+0x4ee>
    7568:	2301      	movs	r3, #1
    756a:	4319      	orrs	r1, r3
    756c:	4ba0      	ldr	r3, [pc, #640]	; (77f0 <__aeabi_ddiv+0x658>)
    756e:	18e3      	adds	r3, r4, r3
    7570:	2b00      	cmp	r3, #0
    7572:	dc00      	bgt.n	7576 <__aeabi_ddiv+0x3de>
    7574:	e099      	b.n	76aa <__aeabi_ddiv+0x512>
    7576:	074a      	lsls	r2, r1, #29
    7578:	d000      	beq.n	757c <__aeabi_ddiv+0x3e4>
    757a:	e09e      	b.n	76ba <__aeabi_ddiv+0x522>
    757c:	465a      	mov	r2, fp
    757e:	01d2      	lsls	r2, r2, #7
    7580:	d506      	bpl.n	7590 <__aeabi_ddiv+0x3f8>
    7582:	465a      	mov	r2, fp
    7584:	4b9b      	ldr	r3, [pc, #620]	; (77f4 <__aeabi_ddiv+0x65c>)
    7586:	401a      	ands	r2, r3
    7588:	2380      	movs	r3, #128	; 0x80
    758a:	4693      	mov	fp, r2
    758c:	00db      	lsls	r3, r3, #3
    758e:	18e3      	adds	r3, r4, r3
    7590:	4a99      	ldr	r2, [pc, #612]	; (77f8 <__aeabi_ddiv+0x660>)
    7592:	4293      	cmp	r3, r2
    7594:	dd68      	ble.n	7668 <__aeabi_ddiv+0x4d0>
    7596:	2301      	movs	r3, #1
    7598:	9a02      	ldr	r2, [sp, #8]
    759a:	4c98      	ldr	r4, [pc, #608]	; (77fc <__aeabi_ddiv+0x664>)
    759c:	401a      	ands	r2, r3
    759e:	2300      	movs	r3, #0
    75a0:	4694      	mov	ip, r2
    75a2:	4698      	mov	r8, r3
    75a4:	2200      	movs	r2, #0
    75a6:	e6c5      	b.n	7334 <__aeabi_ddiv+0x19c>
    75a8:	2280      	movs	r2, #128	; 0x80
    75aa:	464b      	mov	r3, r9
    75ac:	0312      	lsls	r2, r2, #12
    75ae:	4213      	tst	r3, r2
    75b0:	d00a      	beq.n	75c8 <__aeabi_ddiv+0x430>
    75b2:	465b      	mov	r3, fp
    75b4:	4213      	tst	r3, r2
    75b6:	d106      	bne.n	75c6 <__aeabi_ddiv+0x42e>
    75b8:	431a      	orrs	r2, r3
    75ba:	0312      	lsls	r2, r2, #12
    75bc:	0b12      	lsrs	r2, r2, #12
    75be:	46ac      	mov	ip, r5
    75c0:	4688      	mov	r8, r1
    75c2:	4c8e      	ldr	r4, [pc, #568]	; (77fc <__aeabi_ddiv+0x664>)
    75c4:	e6b6      	b.n	7334 <__aeabi_ddiv+0x19c>
    75c6:	464b      	mov	r3, r9
    75c8:	431a      	orrs	r2, r3
    75ca:	0312      	lsls	r2, r2, #12
    75cc:	0b12      	lsrs	r2, r2, #12
    75ce:	46bc      	mov	ip, r7
    75d0:	4c8a      	ldr	r4, [pc, #552]	; (77fc <__aeabi_ddiv+0x664>)
    75d2:	e6af      	b.n	7334 <__aeabi_ddiv+0x19c>
    75d4:	0003      	movs	r3, r0
    75d6:	465a      	mov	r2, fp
    75d8:	3b28      	subs	r3, #40	; 0x28
    75da:	409a      	lsls	r2, r3
    75dc:	2300      	movs	r3, #0
    75de:	4691      	mov	r9, r2
    75e0:	4698      	mov	r8, r3
    75e2:	e657      	b.n	7294 <__aeabi_ddiv+0xfc>
    75e4:	4658      	mov	r0, fp
    75e6:	f001 f94b 	bl	8880 <__clzsi2>
    75ea:	3020      	adds	r0, #32
    75ec:	e640      	b.n	7270 <__aeabi_ddiv+0xd8>
    75ee:	0003      	movs	r3, r0
    75f0:	4652      	mov	r2, sl
    75f2:	3b28      	subs	r3, #40	; 0x28
    75f4:	409a      	lsls	r2, r3
    75f6:	2100      	movs	r1, #0
    75f8:	4693      	mov	fp, r2
    75fa:	e677      	b.n	72ec <__aeabi_ddiv+0x154>
    75fc:	f001 f940 	bl	8880 <__clzsi2>
    7600:	3020      	adds	r0, #32
    7602:	e65f      	b.n	72c4 <__aeabi_ddiv+0x12c>
    7604:	4588      	cmp	r8, r1
    7606:	d200      	bcs.n	760a <__aeabi_ddiv+0x472>
    7608:	e6c7      	b.n	739a <__aeabi_ddiv+0x202>
    760a:	464b      	mov	r3, r9
    760c:	07de      	lsls	r6, r3, #31
    760e:	085d      	lsrs	r5, r3, #1
    7610:	4643      	mov	r3, r8
    7612:	085b      	lsrs	r3, r3, #1
    7614:	431e      	orrs	r6, r3
    7616:	4643      	mov	r3, r8
    7618:	07db      	lsls	r3, r3, #31
    761a:	469a      	mov	sl, r3
    761c:	e6c2      	b.n	73a4 <__aeabi_ddiv+0x20c>
    761e:	2500      	movs	r5, #0
    7620:	4592      	cmp	sl, r2
    7622:	d300      	bcc.n	7626 <__aeabi_ddiv+0x48e>
    7624:	e733      	b.n	748e <__aeabi_ddiv+0x2f6>
    7626:	9e03      	ldr	r6, [sp, #12]
    7628:	4659      	mov	r1, fp
    762a:	46b4      	mov	ip, r6
    762c:	44e2      	add	sl, ip
    762e:	45b2      	cmp	sl, r6
    7630:	41ad      	sbcs	r5, r5
    7632:	426d      	negs	r5, r5
    7634:	4445      	add	r5, r8
    7636:	18eb      	adds	r3, r5, r3
    7638:	3901      	subs	r1, #1
    763a:	4598      	cmp	r8, r3
    763c:	d207      	bcs.n	764e <__aeabi_ddiv+0x4b6>
    763e:	4298      	cmp	r0, r3
    7640:	d900      	bls.n	7644 <__aeabi_ddiv+0x4ac>
    7642:	e07f      	b.n	7744 <__aeabi_ddiv+0x5ac>
    7644:	d100      	bne.n	7648 <__aeabi_ddiv+0x4b0>
    7646:	e0bc      	b.n	77c2 <__aeabi_ddiv+0x62a>
    7648:	1a1d      	subs	r5, r3, r0
    764a:	468b      	mov	fp, r1
    764c:	e71f      	b.n	748e <__aeabi_ddiv+0x2f6>
    764e:	4598      	cmp	r8, r3
    7650:	d1fa      	bne.n	7648 <__aeabi_ddiv+0x4b0>
    7652:	9d03      	ldr	r5, [sp, #12]
    7654:	4555      	cmp	r5, sl
    7656:	d9f2      	bls.n	763e <__aeabi_ddiv+0x4a6>
    7658:	4643      	mov	r3, r8
    765a:	468b      	mov	fp, r1
    765c:	1a1d      	subs	r5, r3, r0
    765e:	e716      	b.n	748e <__aeabi_ddiv+0x2f6>
    7660:	469b      	mov	fp, r3
    7662:	e6ca      	b.n	73fa <__aeabi_ddiv+0x262>
    7664:	0015      	movs	r5, r2
    7666:	e6e7      	b.n	7438 <__aeabi_ddiv+0x2a0>
    7668:	465a      	mov	r2, fp
    766a:	08c9      	lsrs	r1, r1, #3
    766c:	0752      	lsls	r2, r2, #29
    766e:	430a      	orrs	r2, r1
    7670:	055b      	lsls	r3, r3, #21
    7672:	4690      	mov	r8, r2
    7674:	0d5c      	lsrs	r4, r3, #21
    7676:	465a      	mov	r2, fp
    7678:	2301      	movs	r3, #1
    767a:	9902      	ldr	r1, [sp, #8]
    767c:	0252      	lsls	r2, r2, #9
    767e:	4019      	ands	r1, r3
    7680:	0b12      	lsrs	r2, r2, #12
    7682:	468c      	mov	ip, r1
    7684:	e656      	b.n	7334 <__aeabi_ddiv+0x19c>
    7686:	2b00      	cmp	r3, #0
    7688:	d100      	bne.n	768c <__aeabi_ddiv+0x4f4>
    768a:	e76f      	b.n	756c <__aeabi_ddiv+0x3d4>
    768c:	4446      	add	r6, r8
    768e:	1e4a      	subs	r2, r1, #1
    7690:	45b0      	cmp	r8, r6
    7692:	d929      	bls.n	76e8 <__aeabi_ddiv+0x550>
    7694:	0011      	movs	r1, r2
    7696:	4286      	cmp	r6, r0
    7698:	d000      	beq.n	769c <__aeabi_ddiv+0x504>
    769a:	e765      	b.n	7568 <__aeabi_ddiv+0x3d0>
    769c:	9a03      	ldr	r2, [sp, #12]
    769e:	4293      	cmp	r3, r2
    76a0:	d000      	beq.n	76a4 <__aeabi_ddiv+0x50c>
    76a2:	e761      	b.n	7568 <__aeabi_ddiv+0x3d0>
    76a4:	e762      	b.n	756c <__aeabi_ddiv+0x3d4>
    76a6:	2101      	movs	r1, #1
    76a8:	4249      	negs	r1, r1
    76aa:	2001      	movs	r0, #1
    76ac:	1ac2      	subs	r2, r0, r3
    76ae:	2a38      	cmp	r2, #56	; 0x38
    76b0:	dd21      	ble.n	76f6 <__aeabi_ddiv+0x55e>
    76b2:	9b02      	ldr	r3, [sp, #8]
    76b4:	4003      	ands	r3, r0
    76b6:	469c      	mov	ip, r3
    76b8:	e638      	b.n	732c <__aeabi_ddiv+0x194>
    76ba:	220f      	movs	r2, #15
    76bc:	400a      	ands	r2, r1
    76be:	2a04      	cmp	r2, #4
    76c0:	d100      	bne.n	76c4 <__aeabi_ddiv+0x52c>
    76c2:	e75b      	b.n	757c <__aeabi_ddiv+0x3e4>
    76c4:	000a      	movs	r2, r1
    76c6:	1d11      	adds	r1, r2, #4
    76c8:	4291      	cmp	r1, r2
    76ca:	4192      	sbcs	r2, r2
    76cc:	4252      	negs	r2, r2
    76ce:	4493      	add	fp, r2
    76d0:	e754      	b.n	757c <__aeabi_ddiv+0x3e4>
    76d2:	4b47      	ldr	r3, [pc, #284]	; (77f0 <__aeabi_ddiv+0x658>)
    76d4:	18e3      	adds	r3, r4, r3
    76d6:	2b00      	cmp	r3, #0
    76d8:	dde5      	ble.n	76a6 <__aeabi_ddiv+0x50e>
    76da:	2201      	movs	r2, #1
    76dc:	4252      	negs	r2, r2
    76de:	e7f2      	b.n	76c6 <__aeabi_ddiv+0x52e>
    76e0:	001d      	movs	r5, r3
    76e2:	e6fa      	b.n	74da <__aeabi_ddiv+0x342>
    76e4:	469a      	mov	sl, r3
    76e6:	e71c      	b.n	7522 <__aeabi_ddiv+0x38a>
    76e8:	42b0      	cmp	r0, r6
    76ea:	d839      	bhi.n	7760 <__aeabi_ddiv+0x5c8>
    76ec:	d06e      	beq.n	77cc <__aeabi_ddiv+0x634>
    76ee:	0011      	movs	r1, r2
    76f0:	e73a      	b.n	7568 <__aeabi_ddiv+0x3d0>
    76f2:	9302      	str	r3, [sp, #8]
    76f4:	e73a      	b.n	756c <__aeabi_ddiv+0x3d4>
    76f6:	2a1f      	cmp	r2, #31
    76f8:	dc3c      	bgt.n	7774 <__aeabi_ddiv+0x5dc>
    76fa:	2320      	movs	r3, #32
    76fc:	1a9b      	subs	r3, r3, r2
    76fe:	000c      	movs	r4, r1
    7700:	4658      	mov	r0, fp
    7702:	4099      	lsls	r1, r3
    7704:	4098      	lsls	r0, r3
    7706:	1e4b      	subs	r3, r1, #1
    7708:	4199      	sbcs	r1, r3
    770a:	465b      	mov	r3, fp
    770c:	40d4      	lsrs	r4, r2
    770e:	40d3      	lsrs	r3, r2
    7710:	4320      	orrs	r0, r4
    7712:	4308      	orrs	r0, r1
    7714:	001a      	movs	r2, r3
    7716:	0743      	lsls	r3, r0, #29
    7718:	d009      	beq.n	772e <__aeabi_ddiv+0x596>
    771a:	230f      	movs	r3, #15
    771c:	4003      	ands	r3, r0
    771e:	2b04      	cmp	r3, #4
    7720:	d005      	beq.n	772e <__aeabi_ddiv+0x596>
    7722:	0001      	movs	r1, r0
    7724:	1d08      	adds	r0, r1, #4
    7726:	4288      	cmp	r0, r1
    7728:	419b      	sbcs	r3, r3
    772a:	425b      	negs	r3, r3
    772c:	18d2      	adds	r2, r2, r3
    772e:	0213      	lsls	r3, r2, #8
    7730:	d53a      	bpl.n	77a8 <__aeabi_ddiv+0x610>
    7732:	2301      	movs	r3, #1
    7734:	9a02      	ldr	r2, [sp, #8]
    7736:	2401      	movs	r4, #1
    7738:	401a      	ands	r2, r3
    773a:	2300      	movs	r3, #0
    773c:	4694      	mov	ip, r2
    773e:	4698      	mov	r8, r3
    7740:	2200      	movs	r2, #0
    7742:	e5f7      	b.n	7334 <__aeabi_ddiv+0x19c>
    7744:	2102      	movs	r1, #2
    7746:	4249      	negs	r1, r1
    7748:	468c      	mov	ip, r1
    774a:	9d03      	ldr	r5, [sp, #12]
    774c:	44e3      	add	fp, ip
    774e:	46ac      	mov	ip, r5
    7750:	44e2      	add	sl, ip
    7752:	45aa      	cmp	sl, r5
    7754:	41ad      	sbcs	r5, r5
    7756:	426d      	negs	r5, r5
    7758:	4445      	add	r5, r8
    775a:	18ed      	adds	r5, r5, r3
    775c:	1a2d      	subs	r5, r5, r0
    775e:	e696      	b.n	748e <__aeabi_ddiv+0x2f6>
    7760:	1e8a      	subs	r2, r1, #2
    7762:	9903      	ldr	r1, [sp, #12]
    7764:	004d      	lsls	r5, r1, #1
    7766:	428d      	cmp	r5, r1
    7768:	4189      	sbcs	r1, r1
    776a:	4249      	negs	r1, r1
    776c:	4441      	add	r1, r8
    776e:	1876      	adds	r6, r6, r1
    7770:	9503      	str	r5, [sp, #12]
    7772:	e78f      	b.n	7694 <__aeabi_ddiv+0x4fc>
    7774:	201f      	movs	r0, #31
    7776:	4240      	negs	r0, r0
    7778:	1ac3      	subs	r3, r0, r3
    777a:	4658      	mov	r0, fp
    777c:	40d8      	lsrs	r0, r3
    777e:	0003      	movs	r3, r0
    7780:	2a20      	cmp	r2, #32
    7782:	d028      	beq.n	77d6 <__aeabi_ddiv+0x63e>
    7784:	2040      	movs	r0, #64	; 0x40
    7786:	465d      	mov	r5, fp
    7788:	1a82      	subs	r2, r0, r2
    778a:	4095      	lsls	r5, r2
    778c:	4329      	orrs	r1, r5
    778e:	1e4a      	subs	r2, r1, #1
    7790:	4191      	sbcs	r1, r2
    7792:	4319      	orrs	r1, r3
    7794:	2307      	movs	r3, #7
    7796:	2200      	movs	r2, #0
    7798:	400b      	ands	r3, r1
    779a:	d009      	beq.n	77b0 <__aeabi_ddiv+0x618>
    779c:	230f      	movs	r3, #15
    779e:	2200      	movs	r2, #0
    77a0:	400b      	ands	r3, r1
    77a2:	0008      	movs	r0, r1
    77a4:	2b04      	cmp	r3, #4
    77a6:	d1bd      	bne.n	7724 <__aeabi_ddiv+0x58c>
    77a8:	0001      	movs	r1, r0
    77aa:	0753      	lsls	r3, r2, #29
    77ac:	0252      	lsls	r2, r2, #9
    77ae:	0b12      	lsrs	r2, r2, #12
    77b0:	08c9      	lsrs	r1, r1, #3
    77b2:	4319      	orrs	r1, r3
    77b4:	2301      	movs	r3, #1
    77b6:	4688      	mov	r8, r1
    77b8:	9902      	ldr	r1, [sp, #8]
    77ba:	2400      	movs	r4, #0
    77bc:	4019      	ands	r1, r3
    77be:	468c      	mov	ip, r1
    77c0:	e5b8      	b.n	7334 <__aeabi_ddiv+0x19c>
    77c2:	4552      	cmp	r2, sl
    77c4:	d8be      	bhi.n	7744 <__aeabi_ddiv+0x5ac>
    77c6:	468b      	mov	fp, r1
    77c8:	2500      	movs	r5, #0
    77ca:	e660      	b.n	748e <__aeabi_ddiv+0x2f6>
    77cc:	9d03      	ldr	r5, [sp, #12]
    77ce:	429d      	cmp	r5, r3
    77d0:	d3c6      	bcc.n	7760 <__aeabi_ddiv+0x5c8>
    77d2:	0011      	movs	r1, r2
    77d4:	e762      	b.n	769c <__aeabi_ddiv+0x504>
    77d6:	2500      	movs	r5, #0
    77d8:	e7d8      	b.n	778c <__aeabi_ddiv+0x5f4>
    77da:	2280      	movs	r2, #128	; 0x80
    77dc:	465b      	mov	r3, fp
    77de:	0312      	lsls	r2, r2, #12
    77e0:	431a      	orrs	r2, r3
    77e2:	9b01      	ldr	r3, [sp, #4]
    77e4:	0312      	lsls	r2, r2, #12
    77e6:	0b12      	lsrs	r2, r2, #12
    77e8:	469c      	mov	ip, r3
    77ea:	4688      	mov	r8, r1
    77ec:	4c03      	ldr	r4, [pc, #12]	; (77fc <__aeabi_ddiv+0x664>)
    77ee:	e5a1      	b.n	7334 <__aeabi_ddiv+0x19c>
    77f0:	000003ff 	.word	0x000003ff
    77f4:	feffffff 	.word	0xfeffffff
    77f8:	000007fe 	.word	0x000007fe
    77fc:	000007ff 	.word	0x000007ff

00007800 <__eqdf2>:
    7800:	b5f0      	push	{r4, r5, r6, r7, lr}
    7802:	464f      	mov	r7, r9
    7804:	4646      	mov	r6, r8
    7806:	46d6      	mov	lr, sl
    7808:	005c      	lsls	r4, r3, #1
    780a:	b5c0      	push	{r6, r7, lr}
    780c:	031f      	lsls	r7, r3, #12
    780e:	0fdb      	lsrs	r3, r3, #31
    7810:	469a      	mov	sl, r3
    7812:	4b17      	ldr	r3, [pc, #92]	; (7870 <__eqdf2+0x70>)
    7814:	030e      	lsls	r6, r1, #12
    7816:	004d      	lsls	r5, r1, #1
    7818:	4684      	mov	ip, r0
    781a:	4680      	mov	r8, r0
    781c:	0b36      	lsrs	r6, r6, #12
    781e:	0d6d      	lsrs	r5, r5, #21
    7820:	0fc9      	lsrs	r1, r1, #31
    7822:	4691      	mov	r9, r2
    7824:	0b3f      	lsrs	r7, r7, #12
    7826:	0d64      	lsrs	r4, r4, #21
    7828:	2001      	movs	r0, #1
    782a:	429d      	cmp	r5, r3
    782c:	d008      	beq.n	7840 <__eqdf2+0x40>
    782e:	429c      	cmp	r4, r3
    7830:	d001      	beq.n	7836 <__eqdf2+0x36>
    7832:	42a5      	cmp	r5, r4
    7834:	d00b      	beq.n	784e <__eqdf2+0x4e>
    7836:	bc1c      	pop	{r2, r3, r4}
    7838:	4690      	mov	r8, r2
    783a:	4699      	mov	r9, r3
    783c:	46a2      	mov	sl, r4
    783e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7840:	4663      	mov	r3, ip
    7842:	4333      	orrs	r3, r6
    7844:	d1f7      	bne.n	7836 <__eqdf2+0x36>
    7846:	42ac      	cmp	r4, r5
    7848:	d1f5      	bne.n	7836 <__eqdf2+0x36>
    784a:	433a      	orrs	r2, r7
    784c:	d1f3      	bne.n	7836 <__eqdf2+0x36>
    784e:	2001      	movs	r0, #1
    7850:	42be      	cmp	r6, r7
    7852:	d1f0      	bne.n	7836 <__eqdf2+0x36>
    7854:	45c8      	cmp	r8, r9
    7856:	d1ee      	bne.n	7836 <__eqdf2+0x36>
    7858:	4551      	cmp	r1, sl
    785a:	d007      	beq.n	786c <__eqdf2+0x6c>
    785c:	2d00      	cmp	r5, #0
    785e:	d1ea      	bne.n	7836 <__eqdf2+0x36>
    7860:	4663      	mov	r3, ip
    7862:	431e      	orrs	r6, r3
    7864:	0030      	movs	r0, r6
    7866:	1e46      	subs	r6, r0, #1
    7868:	41b0      	sbcs	r0, r6
    786a:	e7e4      	b.n	7836 <__eqdf2+0x36>
    786c:	2000      	movs	r0, #0
    786e:	e7e2      	b.n	7836 <__eqdf2+0x36>
    7870:	000007ff 	.word	0x000007ff

00007874 <__gedf2>:
    7874:	b5f0      	push	{r4, r5, r6, r7, lr}
    7876:	4645      	mov	r5, r8
    7878:	46de      	mov	lr, fp
    787a:	4657      	mov	r7, sl
    787c:	464e      	mov	r6, r9
    787e:	b5e0      	push	{r5, r6, r7, lr}
    7880:	031f      	lsls	r7, r3, #12
    7882:	0b3d      	lsrs	r5, r7, #12
    7884:	4f2c      	ldr	r7, [pc, #176]	; (7938 <__gedf2+0xc4>)
    7886:	030e      	lsls	r6, r1, #12
    7888:	004c      	lsls	r4, r1, #1
    788a:	46ab      	mov	fp, r5
    788c:	005d      	lsls	r5, r3, #1
    788e:	4684      	mov	ip, r0
    7890:	0b36      	lsrs	r6, r6, #12
    7892:	0d64      	lsrs	r4, r4, #21
    7894:	0fc9      	lsrs	r1, r1, #31
    7896:	4690      	mov	r8, r2
    7898:	0d6d      	lsrs	r5, r5, #21
    789a:	0fdb      	lsrs	r3, r3, #31
    789c:	42bc      	cmp	r4, r7
    789e:	d02a      	beq.n	78f6 <__gedf2+0x82>
    78a0:	4f25      	ldr	r7, [pc, #148]	; (7938 <__gedf2+0xc4>)
    78a2:	42bd      	cmp	r5, r7
    78a4:	d02d      	beq.n	7902 <__gedf2+0x8e>
    78a6:	2c00      	cmp	r4, #0
    78a8:	d10f      	bne.n	78ca <__gedf2+0x56>
    78aa:	4330      	orrs	r0, r6
    78ac:	0007      	movs	r7, r0
    78ae:	4681      	mov	r9, r0
    78b0:	4278      	negs	r0, r7
    78b2:	4178      	adcs	r0, r7
    78b4:	b2c0      	uxtb	r0, r0
    78b6:	2d00      	cmp	r5, #0
    78b8:	d117      	bne.n	78ea <__gedf2+0x76>
    78ba:	465f      	mov	r7, fp
    78bc:	433a      	orrs	r2, r7
    78be:	d114      	bne.n	78ea <__gedf2+0x76>
    78c0:	464b      	mov	r3, r9
    78c2:	2000      	movs	r0, #0
    78c4:	2b00      	cmp	r3, #0
    78c6:	d00a      	beq.n	78de <__gedf2+0x6a>
    78c8:	e006      	b.n	78d8 <__gedf2+0x64>
    78ca:	2d00      	cmp	r5, #0
    78cc:	d102      	bne.n	78d4 <__gedf2+0x60>
    78ce:	4658      	mov	r0, fp
    78d0:	4302      	orrs	r2, r0
    78d2:	d001      	beq.n	78d8 <__gedf2+0x64>
    78d4:	4299      	cmp	r1, r3
    78d6:	d018      	beq.n	790a <__gedf2+0x96>
    78d8:	4248      	negs	r0, r1
    78da:	2101      	movs	r1, #1
    78dc:	4308      	orrs	r0, r1
    78de:	bc3c      	pop	{r2, r3, r4, r5}
    78e0:	4690      	mov	r8, r2
    78e2:	4699      	mov	r9, r3
    78e4:	46a2      	mov	sl, r4
    78e6:	46ab      	mov	fp, r5
    78e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    78ea:	2800      	cmp	r0, #0
    78ec:	d0f2      	beq.n	78d4 <__gedf2+0x60>
    78ee:	2001      	movs	r0, #1
    78f0:	3b01      	subs	r3, #1
    78f2:	4318      	orrs	r0, r3
    78f4:	e7f3      	b.n	78de <__gedf2+0x6a>
    78f6:	0037      	movs	r7, r6
    78f8:	4307      	orrs	r7, r0
    78fa:	d0d1      	beq.n	78a0 <__gedf2+0x2c>
    78fc:	2002      	movs	r0, #2
    78fe:	4240      	negs	r0, r0
    7900:	e7ed      	b.n	78de <__gedf2+0x6a>
    7902:	465f      	mov	r7, fp
    7904:	4317      	orrs	r7, r2
    7906:	d0ce      	beq.n	78a6 <__gedf2+0x32>
    7908:	e7f8      	b.n	78fc <__gedf2+0x88>
    790a:	42ac      	cmp	r4, r5
    790c:	dce4      	bgt.n	78d8 <__gedf2+0x64>
    790e:	da03      	bge.n	7918 <__gedf2+0xa4>
    7910:	1e48      	subs	r0, r1, #1
    7912:	2101      	movs	r1, #1
    7914:	4308      	orrs	r0, r1
    7916:	e7e2      	b.n	78de <__gedf2+0x6a>
    7918:	455e      	cmp	r6, fp
    791a:	d8dd      	bhi.n	78d8 <__gedf2+0x64>
    791c:	d006      	beq.n	792c <__gedf2+0xb8>
    791e:	2000      	movs	r0, #0
    7920:	455e      	cmp	r6, fp
    7922:	d2dc      	bcs.n	78de <__gedf2+0x6a>
    7924:	2301      	movs	r3, #1
    7926:	1e48      	subs	r0, r1, #1
    7928:	4318      	orrs	r0, r3
    792a:	e7d8      	b.n	78de <__gedf2+0x6a>
    792c:	45c4      	cmp	ip, r8
    792e:	d8d3      	bhi.n	78d8 <__gedf2+0x64>
    7930:	2000      	movs	r0, #0
    7932:	45c4      	cmp	ip, r8
    7934:	d3f6      	bcc.n	7924 <__gedf2+0xb0>
    7936:	e7d2      	b.n	78de <__gedf2+0x6a>
    7938:	000007ff 	.word	0x000007ff

0000793c <__ledf2>:
    793c:	b5f0      	push	{r4, r5, r6, r7, lr}
    793e:	464e      	mov	r6, r9
    7940:	4645      	mov	r5, r8
    7942:	46de      	mov	lr, fp
    7944:	4657      	mov	r7, sl
    7946:	005c      	lsls	r4, r3, #1
    7948:	b5e0      	push	{r5, r6, r7, lr}
    794a:	031f      	lsls	r7, r3, #12
    794c:	0fdb      	lsrs	r3, r3, #31
    794e:	4699      	mov	r9, r3
    7950:	4b2a      	ldr	r3, [pc, #168]	; (79fc <__ledf2+0xc0>)
    7952:	030e      	lsls	r6, r1, #12
    7954:	004d      	lsls	r5, r1, #1
    7956:	0fc9      	lsrs	r1, r1, #31
    7958:	4684      	mov	ip, r0
    795a:	0b36      	lsrs	r6, r6, #12
    795c:	0d6d      	lsrs	r5, r5, #21
    795e:	468b      	mov	fp, r1
    7960:	4690      	mov	r8, r2
    7962:	0b3f      	lsrs	r7, r7, #12
    7964:	0d64      	lsrs	r4, r4, #21
    7966:	429d      	cmp	r5, r3
    7968:	d020      	beq.n	79ac <__ledf2+0x70>
    796a:	4b24      	ldr	r3, [pc, #144]	; (79fc <__ledf2+0xc0>)
    796c:	429c      	cmp	r4, r3
    796e:	d022      	beq.n	79b6 <__ledf2+0x7a>
    7970:	2d00      	cmp	r5, #0
    7972:	d112      	bne.n	799a <__ledf2+0x5e>
    7974:	4330      	orrs	r0, r6
    7976:	4243      	negs	r3, r0
    7978:	4143      	adcs	r3, r0
    797a:	b2db      	uxtb	r3, r3
    797c:	2c00      	cmp	r4, #0
    797e:	d01f      	beq.n	79c0 <__ledf2+0x84>
    7980:	2b00      	cmp	r3, #0
    7982:	d00c      	beq.n	799e <__ledf2+0x62>
    7984:	464b      	mov	r3, r9
    7986:	2001      	movs	r0, #1
    7988:	3b01      	subs	r3, #1
    798a:	4303      	orrs	r3, r0
    798c:	0018      	movs	r0, r3
    798e:	bc3c      	pop	{r2, r3, r4, r5}
    7990:	4690      	mov	r8, r2
    7992:	4699      	mov	r9, r3
    7994:	46a2      	mov	sl, r4
    7996:	46ab      	mov	fp, r5
    7998:	bdf0      	pop	{r4, r5, r6, r7, pc}
    799a:	2c00      	cmp	r4, #0
    799c:	d016      	beq.n	79cc <__ledf2+0x90>
    799e:	45cb      	cmp	fp, r9
    79a0:	d017      	beq.n	79d2 <__ledf2+0x96>
    79a2:	465b      	mov	r3, fp
    79a4:	4259      	negs	r1, r3
    79a6:	2301      	movs	r3, #1
    79a8:	430b      	orrs	r3, r1
    79aa:	e7ef      	b.n	798c <__ledf2+0x50>
    79ac:	0031      	movs	r1, r6
    79ae:	2302      	movs	r3, #2
    79b0:	4301      	orrs	r1, r0
    79b2:	d1eb      	bne.n	798c <__ledf2+0x50>
    79b4:	e7d9      	b.n	796a <__ledf2+0x2e>
    79b6:	0039      	movs	r1, r7
    79b8:	2302      	movs	r3, #2
    79ba:	4311      	orrs	r1, r2
    79bc:	d1e6      	bne.n	798c <__ledf2+0x50>
    79be:	e7d7      	b.n	7970 <__ledf2+0x34>
    79c0:	433a      	orrs	r2, r7
    79c2:	d1dd      	bne.n	7980 <__ledf2+0x44>
    79c4:	2300      	movs	r3, #0
    79c6:	2800      	cmp	r0, #0
    79c8:	d0e0      	beq.n	798c <__ledf2+0x50>
    79ca:	e7ea      	b.n	79a2 <__ledf2+0x66>
    79cc:	433a      	orrs	r2, r7
    79ce:	d1e6      	bne.n	799e <__ledf2+0x62>
    79d0:	e7e7      	b.n	79a2 <__ledf2+0x66>
    79d2:	42a5      	cmp	r5, r4
    79d4:	dce5      	bgt.n	79a2 <__ledf2+0x66>
    79d6:	db05      	blt.n	79e4 <__ledf2+0xa8>
    79d8:	42be      	cmp	r6, r7
    79da:	d8e2      	bhi.n	79a2 <__ledf2+0x66>
    79dc:	d007      	beq.n	79ee <__ledf2+0xb2>
    79de:	2300      	movs	r3, #0
    79e0:	42be      	cmp	r6, r7
    79e2:	d2d3      	bcs.n	798c <__ledf2+0x50>
    79e4:	4659      	mov	r1, fp
    79e6:	2301      	movs	r3, #1
    79e8:	3901      	subs	r1, #1
    79ea:	430b      	orrs	r3, r1
    79ec:	e7ce      	b.n	798c <__ledf2+0x50>
    79ee:	45c4      	cmp	ip, r8
    79f0:	d8d7      	bhi.n	79a2 <__ledf2+0x66>
    79f2:	2300      	movs	r3, #0
    79f4:	45c4      	cmp	ip, r8
    79f6:	d3f5      	bcc.n	79e4 <__ledf2+0xa8>
    79f8:	e7c8      	b.n	798c <__ledf2+0x50>
    79fa:	46c0      	nop			; (mov r8, r8)
    79fc:	000007ff 	.word	0x000007ff

00007a00 <__aeabi_dmul>:
    7a00:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a02:	4657      	mov	r7, sl
    7a04:	4645      	mov	r5, r8
    7a06:	46de      	mov	lr, fp
    7a08:	464e      	mov	r6, r9
    7a0a:	b5e0      	push	{r5, r6, r7, lr}
    7a0c:	030c      	lsls	r4, r1, #12
    7a0e:	4698      	mov	r8, r3
    7a10:	004e      	lsls	r6, r1, #1
    7a12:	0b23      	lsrs	r3, r4, #12
    7a14:	b087      	sub	sp, #28
    7a16:	0007      	movs	r7, r0
    7a18:	4692      	mov	sl, r2
    7a1a:	469b      	mov	fp, r3
    7a1c:	0d76      	lsrs	r6, r6, #21
    7a1e:	0fcd      	lsrs	r5, r1, #31
    7a20:	2e00      	cmp	r6, #0
    7a22:	d06b      	beq.n	7afc <__aeabi_dmul+0xfc>
    7a24:	4b6d      	ldr	r3, [pc, #436]	; (7bdc <__aeabi_dmul+0x1dc>)
    7a26:	429e      	cmp	r6, r3
    7a28:	d035      	beq.n	7a96 <__aeabi_dmul+0x96>
    7a2a:	2480      	movs	r4, #128	; 0x80
    7a2c:	465b      	mov	r3, fp
    7a2e:	0f42      	lsrs	r2, r0, #29
    7a30:	0424      	lsls	r4, r4, #16
    7a32:	00db      	lsls	r3, r3, #3
    7a34:	4314      	orrs	r4, r2
    7a36:	431c      	orrs	r4, r3
    7a38:	00c3      	lsls	r3, r0, #3
    7a3a:	4699      	mov	r9, r3
    7a3c:	4b68      	ldr	r3, [pc, #416]	; (7be0 <__aeabi_dmul+0x1e0>)
    7a3e:	46a3      	mov	fp, r4
    7a40:	469c      	mov	ip, r3
    7a42:	2300      	movs	r3, #0
    7a44:	2700      	movs	r7, #0
    7a46:	4466      	add	r6, ip
    7a48:	9302      	str	r3, [sp, #8]
    7a4a:	4643      	mov	r3, r8
    7a4c:	031c      	lsls	r4, r3, #12
    7a4e:	005a      	lsls	r2, r3, #1
    7a50:	0fdb      	lsrs	r3, r3, #31
    7a52:	4650      	mov	r0, sl
    7a54:	0b24      	lsrs	r4, r4, #12
    7a56:	0d52      	lsrs	r2, r2, #21
    7a58:	4698      	mov	r8, r3
    7a5a:	d100      	bne.n	7a5e <__aeabi_dmul+0x5e>
    7a5c:	e076      	b.n	7b4c <__aeabi_dmul+0x14c>
    7a5e:	4b5f      	ldr	r3, [pc, #380]	; (7bdc <__aeabi_dmul+0x1dc>)
    7a60:	429a      	cmp	r2, r3
    7a62:	d06d      	beq.n	7b40 <__aeabi_dmul+0x140>
    7a64:	2380      	movs	r3, #128	; 0x80
    7a66:	0f41      	lsrs	r1, r0, #29
    7a68:	041b      	lsls	r3, r3, #16
    7a6a:	430b      	orrs	r3, r1
    7a6c:	495c      	ldr	r1, [pc, #368]	; (7be0 <__aeabi_dmul+0x1e0>)
    7a6e:	00e4      	lsls	r4, r4, #3
    7a70:	468c      	mov	ip, r1
    7a72:	431c      	orrs	r4, r3
    7a74:	00c3      	lsls	r3, r0, #3
    7a76:	2000      	movs	r0, #0
    7a78:	4462      	add	r2, ip
    7a7a:	4641      	mov	r1, r8
    7a7c:	18b6      	adds	r6, r6, r2
    7a7e:	4069      	eors	r1, r5
    7a80:	1c72      	adds	r2, r6, #1
    7a82:	9101      	str	r1, [sp, #4]
    7a84:	4694      	mov	ip, r2
    7a86:	4307      	orrs	r7, r0
    7a88:	2f0f      	cmp	r7, #15
    7a8a:	d900      	bls.n	7a8e <__aeabi_dmul+0x8e>
    7a8c:	e0b0      	b.n	7bf0 <__aeabi_dmul+0x1f0>
    7a8e:	4a55      	ldr	r2, [pc, #340]	; (7be4 <__aeabi_dmul+0x1e4>)
    7a90:	00bf      	lsls	r7, r7, #2
    7a92:	59d2      	ldr	r2, [r2, r7]
    7a94:	4697      	mov	pc, r2
    7a96:	465b      	mov	r3, fp
    7a98:	4303      	orrs	r3, r0
    7a9a:	4699      	mov	r9, r3
    7a9c:	d000      	beq.n	7aa0 <__aeabi_dmul+0xa0>
    7a9e:	e087      	b.n	7bb0 <__aeabi_dmul+0x1b0>
    7aa0:	2300      	movs	r3, #0
    7aa2:	469b      	mov	fp, r3
    7aa4:	3302      	adds	r3, #2
    7aa6:	2708      	movs	r7, #8
    7aa8:	9302      	str	r3, [sp, #8]
    7aaa:	e7ce      	b.n	7a4a <__aeabi_dmul+0x4a>
    7aac:	4642      	mov	r2, r8
    7aae:	9201      	str	r2, [sp, #4]
    7ab0:	2802      	cmp	r0, #2
    7ab2:	d067      	beq.n	7b84 <__aeabi_dmul+0x184>
    7ab4:	2803      	cmp	r0, #3
    7ab6:	d100      	bne.n	7aba <__aeabi_dmul+0xba>
    7ab8:	e20e      	b.n	7ed8 <__aeabi_dmul+0x4d8>
    7aba:	2801      	cmp	r0, #1
    7abc:	d000      	beq.n	7ac0 <__aeabi_dmul+0xc0>
    7abe:	e162      	b.n	7d86 <__aeabi_dmul+0x386>
    7ac0:	2300      	movs	r3, #0
    7ac2:	2400      	movs	r4, #0
    7ac4:	2200      	movs	r2, #0
    7ac6:	4699      	mov	r9, r3
    7ac8:	9901      	ldr	r1, [sp, #4]
    7aca:	4001      	ands	r1, r0
    7acc:	b2cd      	uxtb	r5, r1
    7ace:	2100      	movs	r1, #0
    7ad0:	0312      	lsls	r2, r2, #12
    7ad2:	0d0b      	lsrs	r3, r1, #20
    7ad4:	0b12      	lsrs	r2, r2, #12
    7ad6:	051b      	lsls	r3, r3, #20
    7ad8:	4313      	orrs	r3, r2
    7ada:	4a43      	ldr	r2, [pc, #268]	; (7be8 <__aeabi_dmul+0x1e8>)
    7adc:	0524      	lsls	r4, r4, #20
    7ade:	4013      	ands	r3, r2
    7ae0:	431c      	orrs	r4, r3
    7ae2:	0064      	lsls	r4, r4, #1
    7ae4:	07ed      	lsls	r5, r5, #31
    7ae6:	0864      	lsrs	r4, r4, #1
    7ae8:	432c      	orrs	r4, r5
    7aea:	4648      	mov	r0, r9
    7aec:	0021      	movs	r1, r4
    7aee:	b007      	add	sp, #28
    7af0:	bc3c      	pop	{r2, r3, r4, r5}
    7af2:	4690      	mov	r8, r2
    7af4:	4699      	mov	r9, r3
    7af6:	46a2      	mov	sl, r4
    7af8:	46ab      	mov	fp, r5
    7afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7afc:	4303      	orrs	r3, r0
    7afe:	4699      	mov	r9, r3
    7b00:	d04f      	beq.n	7ba2 <__aeabi_dmul+0x1a2>
    7b02:	465b      	mov	r3, fp
    7b04:	2b00      	cmp	r3, #0
    7b06:	d100      	bne.n	7b0a <__aeabi_dmul+0x10a>
    7b08:	e189      	b.n	7e1e <__aeabi_dmul+0x41e>
    7b0a:	4658      	mov	r0, fp
    7b0c:	f000 feb8 	bl	8880 <__clzsi2>
    7b10:	0003      	movs	r3, r0
    7b12:	3b0b      	subs	r3, #11
    7b14:	2b1c      	cmp	r3, #28
    7b16:	dd00      	ble.n	7b1a <__aeabi_dmul+0x11a>
    7b18:	e17a      	b.n	7e10 <__aeabi_dmul+0x410>
    7b1a:	221d      	movs	r2, #29
    7b1c:	1ad3      	subs	r3, r2, r3
    7b1e:	003a      	movs	r2, r7
    7b20:	0001      	movs	r1, r0
    7b22:	465c      	mov	r4, fp
    7b24:	40da      	lsrs	r2, r3
    7b26:	3908      	subs	r1, #8
    7b28:	408c      	lsls	r4, r1
    7b2a:	0013      	movs	r3, r2
    7b2c:	408f      	lsls	r7, r1
    7b2e:	4323      	orrs	r3, r4
    7b30:	469b      	mov	fp, r3
    7b32:	46b9      	mov	r9, r7
    7b34:	2300      	movs	r3, #0
    7b36:	4e2d      	ldr	r6, [pc, #180]	; (7bec <__aeabi_dmul+0x1ec>)
    7b38:	2700      	movs	r7, #0
    7b3a:	1a36      	subs	r6, r6, r0
    7b3c:	9302      	str	r3, [sp, #8]
    7b3e:	e784      	b.n	7a4a <__aeabi_dmul+0x4a>
    7b40:	4653      	mov	r3, sl
    7b42:	4323      	orrs	r3, r4
    7b44:	d12a      	bne.n	7b9c <__aeabi_dmul+0x19c>
    7b46:	2400      	movs	r4, #0
    7b48:	2002      	movs	r0, #2
    7b4a:	e796      	b.n	7a7a <__aeabi_dmul+0x7a>
    7b4c:	4653      	mov	r3, sl
    7b4e:	4323      	orrs	r3, r4
    7b50:	d020      	beq.n	7b94 <__aeabi_dmul+0x194>
    7b52:	2c00      	cmp	r4, #0
    7b54:	d100      	bne.n	7b58 <__aeabi_dmul+0x158>
    7b56:	e157      	b.n	7e08 <__aeabi_dmul+0x408>
    7b58:	0020      	movs	r0, r4
    7b5a:	f000 fe91 	bl	8880 <__clzsi2>
    7b5e:	0003      	movs	r3, r0
    7b60:	3b0b      	subs	r3, #11
    7b62:	2b1c      	cmp	r3, #28
    7b64:	dd00      	ble.n	7b68 <__aeabi_dmul+0x168>
    7b66:	e149      	b.n	7dfc <__aeabi_dmul+0x3fc>
    7b68:	211d      	movs	r1, #29
    7b6a:	1acb      	subs	r3, r1, r3
    7b6c:	4651      	mov	r1, sl
    7b6e:	0002      	movs	r2, r0
    7b70:	40d9      	lsrs	r1, r3
    7b72:	4653      	mov	r3, sl
    7b74:	3a08      	subs	r2, #8
    7b76:	4094      	lsls	r4, r2
    7b78:	4093      	lsls	r3, r2
    7b7a:	430c      	orrs	r4, r1
    7b7c:	4a1b      	ldr	r2, [pc, #108]	; (7bec <__aeabi_dmul+0x1ec>)
    7b7e:	1a12      	subs	r2, r2, r0
    7b80:	2000      	movs	r0, #0
    7b82:	e77a      	b.n	7a7a <__aeabi_dmul+0x7a>
    7b84:	2501      	movs	r5, #1
    7b86:	9b01      	ldr	r3, [sp, #4]
    7b88:	4c14      	ldr	r4, [pc, #80]	; (7bdc <__aeabi_dmul+0x1dc>)
    7b8a:	401d      	ands	r5, r3
    7b8c:	2300      	movs	r3, #0
    7b8e:	2200      	movs	r2, #0
    7b90:	4699      	mov	r9, r3
    7b92:	e79c      	b.n	7ace <__aeabi_dmul+0xce>
    7b94:	2400      	movs	r4, #0
    7b96:	2200      	movs	r2, #0
    7b98:	2001      	movs	r0, #1
    7b9a:	e76e      	b.n	7a7a <__aeabi_dmul+0x7a>
    7b9c:	4653      	mov	r3, sl
    7b9e:	2003      	movs	r0, #3
    7ba0:	e76b      	b.n	7a7a <__aeabi_dmul+0x7a>
    7ba2:	2300      	movs	r3, #0
    7ba4:	469b      	mov	fp, r3
    7ba6:	3301      	adds	r3, #1
    7ba8:	2704      	movs	r7, #4
    7baa:	2600      	movs	r6, #0
    7bac:	9302      	str	r3, [sp, #8]
    7bae:	e74c      	b.n	7a4a <__aeabi_dmul+0x4a>
    7bb0:	2303      	movs	r3, #3
    7bb2:	4681      	mov	r9, r0
    7bb4:	270c      	movs	r7, #12
    7bb6:	9302      	str	r3, [sp, #8]
    7bb8:	e747      	b.n	7a4a <__aeabi_dmul+0x4a>
    7bba:	2280      	movs	r2, #128	; 0x80
    7bbc:	2300      	movs	r3, #0
    7bbe:	2500      	movs	r5, #0
    7bc0:	0312      	lsls	r2, r2, #12
    7bc2:	4699      	mov	r9, r3
    7bc4:	4c05      	ldr	r4, [pc, #20]	; (7bdc <__aeabi_dmul+0x1dc>)
    7bc6:	e782      	b.n	7ace <__aeabi_dmul+0xce>
    7bc8:	465c      	mov	r4, fp
    7bca:	464b      	mov	r3, r9
    7bcc:	9802      	ldr	r0, [sp, #8]
    7bce:	e76f      	b.n	7ab0 <__aeabi_dmul+0xb0>
    7bd0:	465c      	mov	r4, fp
    7bd2:	464b      	mov	r3, r9
    7bd4:	9501      	str	r5, [sp, #4]
    7bd6:	9802      	ldr	r0, [sp, #8]
    7bd8:	e76a      	b.n	7ab0 <__aeabi_dmul+0xb0>
    7bda:	46c0      	nop			; (mov r8, r8)
    7bdc:	000007ff 	.word	0x000007ff
    7be0:	fffffc01 	.word	0xfffffc01
    7be4:	00008d60 	.word	0x00008d60
    7be8:	800fffff 	.word	0x800fffff
    7bec:	fffffc0d 	.word	0xfffffc0d
    7bf0:	464a      	mov	r2, r9
    7bf2:	4649      	mov	r1, r9
    7bf4:	0c17      	lsrs	r7, r2, #16
    7bf6:	0c1a      	lsrs	r2, r3, #16
    7bf8:	041b      	lsls	r3, r3, #16
    7bfa:	0c1b      	lsrs	r3, r3, #16
    7bfc:	0408      	lsls	r0, r1, #16
    7bfe:	0019      	movs	r1, r3
    7c00:	0c00      	lsrs	r0, r0, #16
    7c02:	4341      	muls	r1, r0
    7c04:	0015      	movs	r5, r2
    7c06:	4688      	mov	r8, r1
    7c08:	0019      	movs	r1, r3
    7c0a:	437d      	muls	r5, r7
    7c0c:	4379      	muls	r1, r7
    7c0e:	9503      	str	r5, [sp, #12]
    7c10:	4689      	mov	r9, r1
    7c12:	0029      	movs	r1, r5
    7c14:	0015      	movs	r5, r2
    7c16:	4345      	muls	r5, r0
    7c18:	444d      	add	r5, r9
    7c1a:	9502      	str	r5, [sp, #8]
    7c1c:	4645      	mov	r5, r8
    7c1e:	0c2d      	lsrs	r5, r5, #16
    7c20:	46aa      	mov	sl, r5
    7c22:	9d02      	ldr	r5, [sp, #8]
    7c24:	4455      	add	r5, sl
    7c26:	45a9      	cmp	r9, r5
    7c28:	d906      	bls.n	7c38 <__aeabi_dmul+0x238>
    7c2a:	468a      	mov	sl, r1
    7c2c:	2180      	movs	r1, #128	; 0x80
    7c2e:	0249      	lsls	r1, r1, #9
    7c30:	4689      	mov	r9, r1
    7c32:	44ca      	add	sl, r9
    7c34:	4651      	mov	r1, sl
    7c36:	9103      	str	r1, [sp, #12]
    7c38:	0c29      	lsrs	r1, r5, #16
    7c3a:	9104      	str	r1, [sp, #16]
    7c3c:	4641      	mov	r1, r8
    7c3e:	0409      	lsls	r1, r1, #16
    7c40:	042d      	lsls	r5, r5, #16
    7c42:	0c09      	lsrs	r1, r1, #16
    7c44:	4688      	mov	r8, r1
    7c46:	0029      	movs	r1, r5
    7c48:	0c25      	lsrs	r5, r4, #16
    7c4a:	0424      	lsls	r4, r4, #16
    7c4c:	4441      	add	r1, r8
    7c4e:	0c24      	lsrs	r4, r4, #16
    7c50:	9105      	str	r1, [sp, #20]
    7c52:	0021      	movs	r1, r4
    7c54:	4341      	muls	r1, r0
    7c56:	4688      	mov	r8, r1
    7c58:	0021      	movs	r1, r4
    7c5a:	4379      	muls	r1, r7
    7c5c:	468a      	mov	sl, r1
    7c5e:	4368      	muls	r0, r5
    7c60:	4641      	mov	r1, r8
    7c62:	4450      	add	r0, sl
    7c64:	4681      	mov	r9, r0
    7c66:	0c08      	lsrs	r0, r1, #16
    7c68:	4448      	add	r0, r9
    7c6a:	436f      	muls	r7, r5
    7c6c:	4582      	cmp	sl, r0
    7c6e:	d903      	bls.n	7c78 <__aeabi_dmul+0x278>
    7c70:	2180      	movs	r1, #128	; 0x80
    7c72:	0249      	lsls	r1, r1, #9
    7c74:	4689      	mov	r9, r1
    7c76:	444f      	add	r7, r9
    7c78:	0c01      	lsrs	r1, r0, #16
    7c7a:	4689      	mov	r9, r1
    7c7c:	0039      	movs	r1, r7
    7c7e:	4449      	add	r1, r9
    7c80:	9102      	str	r1, [sp, #8]
    7c82:	4641      	mov	r1, r8
    7c84:	040f      	lsls	r7, r1, #16
    7c86:	9904      	ldr	r1, [sp, #16]
    7c88:	0c3f      	lsrs	r7, r7, #16
    7c8a:	4688      	mov	r8, r1
    7c8c:	0400      	lsls	r0, r0, #16
    7c8e:	19c0      	adds	r0, r0, r7
    7c90:	4480      	add	r8, r0
    7c92:	4641      	mov	r1, r8
    7c94:	9104      	str	r1, [sp, #16]
    7c96:	4659      	mov	r1, fp
    7c98:	0c0f      	lsrs	r7, r1, #16
    7c9a:	0409      	lsls	r1, r1, #16
    7c9c:	0c09      	lsrs	r1, r1, #16
    7c9e:	4688      	mov	r8, r1
    7ca0:	4359      	muls	r1, r3
    7ca2:	468a      	mov	sl, r1
    7ca4:	0039      	movs	r1, r7
    7ca6:	4351      	muls	r1, r2
    7ca8:	4689      	mov	r9, r1
    7caa:	4641      	mov	r1, r8
    7cac:	434a      	muls	r2, r1
    7cae:	4651      	mov	r1, sl
    7cb0:	0c09      	lsrs	r1, r1, #16
    7cb2:	468b      	mov	fp, r1
    7cb4:	437b      	muls	r3, r7
    7cb6:	18d2      	adds	r2, r2, r3
    7cb8:	445a      	add	r2, fp
    7cba:	4293      	cmp	r3, r2
    7cbc:	d903      	bls.n	7cc6 <__aeabi_dmul+0x2c6>
    7cbe:	2380      	movs	r3, #128	; 0x80
    7cc0:	025b      	lsls	r3, r3, #9
    7cc2:	469b      	mov	fp, r3
    7cc4:	44d9      	add	r9, fp
    7cc6:	4651      	mov	r1, sl
    7cc8:	0409      	lsls	r1, r1, #16
    7cca:	0c09      	lsrs	r1, r1, #16
    7ccc:	468a      	mov	sl, r1
    7cce:	4641      	mov	r1, r8
    7cd0:	4361      	muls	r1, r4
    7cd2:	437c      	muls	r4, r7
    7cd4:	0c13      	lsrs	r3, r2, #16
    7cd6:	0412      	lsls	r2, r2, #16
    7cd8:	444b      	add	r3, r9
    7cda:	4452      	add	r2, sl
    7cdc:	46a1      	mov	r9, r4
    7cde:	468a      	mov	sl, r1
    7ce0:	003c      	movs	r4, r7
    7ce2:	4641      	mov	r1, r8
    7ce4:	436c      	muls	r4, r5
    7ce6:	434d      	muls	r5, r1
    7ce8:	4651      	mov	r1, sl
    7cea:	444d      	add	r5, r9
    7cec:	0c0f      	lsrs	r7, r1, #16
    7cee:	197d      	adds	r5, r7, r5
    7cf0:	45a9      	cmp	r9, r5
    7cf2:	d903      	bls.n	7cfc <__aeabi_dmul+0x2fc>
    7cf4:	2180      	movs	r1, #128	; 0x80
    7cf6:	0249      	lsls	r1, r1, #9
    7cf8:	4688      	mov	r8, r1
    7cfa:	4444      	add	r4, r8
    7cfc:	9f04      	ldr	r7, [sp, #16]
    7cfe:	9903      	ldr	r1, [sp, #12]
    7d00:	46b8      	mov	r8, r7
    7d02:	4441      	add	r1, r8
    7d04:	468b      	mov	fp, r1
    7d06:	4583      	cmp	fp, r0
    7d08:	4180      	sbcs	r0, r0
    7d0a:	4241      	negs	r1, r0
    7d0c:	4688      	mov	r8, r1
    7d0e:	4651      	mov	r1, sl
    7d10:	0408      	lsls	r0, r1, #16
    7d12:	042f      	lsls	r7, r5, #16
    7d14:	0c00      	lsrs	r0, r0, #16
    7d16:	183f      	adds	r7, r7, r0
    7d18:	4658      	mov	r0, fp
    7d1a:	9902      	ldr	r1, [sp, #8]
    7d1c:	1810      	adds	r0, r2, r0
    7d1e:	4689      	mov	r9, r1
    7d20:	4290      	cmp	r0, r2
    7d22:	4192      	sbcs	r2, r2
    7d24:	444f      	add	r7, r9
    7d26:	46ba      	mov	sl, r7
    7d28:	4252      	negs	r2, r2
    7d2a:	4699      	mov	r9, r3
    7d2c:	4693      	mov	fp, r2
    7d2e:	44c2      	add	sl, r8
    7d30:	44d1      	add	r9, sl
    7d32:	44cb      	add	fp, r9
    7d34:	428f      	cmp	r7, r1
    7d36:	41bf      	sbcs	r7, r7
    7d38:	45c2      	cmp	sl, r8
    7d3a:	4189      	sbcs	r1, r1
    7d3c:	4599      	cmp	r9, r3
    7d3e:	419b      	sbcs	r3, r3
    7d40:	4593      	cmp	fp, r2
    7d42:	4192      	sbcs	r2, r2
    7d44:	427f      	negs	r7, r7
    7d46:	4249      	negs	r1, r1
    7d48:	0c2d      	lsrs	r5, r5, #16
    7d4a:	4252      	negs	r2, r2
    7d4c:	430f      	orrs	r7, r1
    7d4e:	425b      	negs	r3, r3
    7d50:	4313      	orrs	r3, r2
    7d52:	197f      	adds	r7, r7, r5
    7d54:	18ff      	adds	r7, r7, r3
    7d56:	465b      	mov	r3, fp
    7d58:	193c      	adds	r4, r7, r4
    7d5a:	0ddb      	lsrs	r3, r3, #23
    7d5c:	9a05      	ldr	r2, [sp, #20]
    7d5e:	0264      	lsls	r4, r4, #9
    7d60:	431c      	orrs	r4, r3
    7d62:	0243      	lsls	r3, r0, #9
    7d64:	4313      	orrs	r3, r2
    7d66:	1e5d      	subs	r5, r3, #1
    7d68:	41ab      	sbcs	r3, r5
    7d6a:	465a      	mov	r2, fp
    7d6c:	0dc0      	lsrs	r0, r0, #23
    7d6e:	4303      	orrs	r3, r0
    7d70:	0252      	lsls	r2, r2, #9
    7d72:	4313      	orrs	r3, r2
    7d74:	01e2      	lsls	r2, r4, #7
    7d76:	d556      	bpl.n	7e26 <__aeabi_dmul+0x426>
    7d78:	2001      	movs	r0, #1
    7d7a:	085a      	lsrs	r2, r3, #1
    7d7c:	4003      	ands	r3, r0
    7d7e:	4313      	orrs	r3, r2
    7d80:	07e2      	lsls	r2, r4, #31
    7d82:	4313      	orrs	r3, r2
    7d84:	0864      	lsrs	r4, r4, #1
    7d86:	485a      	ldr	r0, [pc, #360]	; (7ef0 <__aeabi_dmul+0x4f0>)
    7d88:	4460      	add	r0, ip
    7d8a:	2800      	cmp	r0, #0
    7d8c:	dd4d      	ble.n	7e2a <__aeabi_dmul+0x42a>
    7d8e:	075a      	lsls	r2, r3, #29
    7d90:	d009      	beq.n	7da6 <__aeabi_dmul+0x3a6>
    7d92:	220f      	movs	r2, #15
    7d94:	401a      	ands	r2, r3
    7d96:	2a04      	cmp	r2, #4
    7d98:	d005      	beq.n	7da6 <__aeabi_dmul+0x3a6>
    7d9a:	1d1a      	adds	r2, r3, #4
    7d9c:	429a      	cmp	r2, r3
    7d9e:	419b      	sbcs	r3, r3
    7da0:	425b      	negs	r3, r3
    7da2:	18e4      	adds	r4, r4, r3
    7da4:	0013      	movs	r3, r2
    7da6:	01e2      	lsls	r2, r4, #7
    7da8:	d504      	bpl.n	7db4 <__aeabi_dmul+0x3b4>
    7daa:	2080      	movs	r0, #128	; 0x80
    7dac:	4a51      	ldr	r2, [pc, #324]	; (7ef4 <__aeabi_dmul+0x4f4>)
    7dae:	00c0      	lsls	r0, r0, #3
    7db0:	4014      	ands	r4, r2
    7db2:	4460      	add	r0, ip
    7db4:	4a50      	ldr	r2, [pc, #320]	; (7ef8 <__aeabi_dmul+0x4f8>)
    7db6:	4290      	cmp	r0, r2
    7db8:	dd00      	ble.n	7dbc <__aeabi_dmul+0x3bc>
    7dba:	e6e3      	b.n	7b84 <__aeabi_dmul+0x184>
    7dbc:	2501      	movs	r5, #1
    7dbe:	08db      	lsrs	r3, r3, #3
    7dc0:	0762      	lsls	r2, r4, #29
    7dc2:	431a      	orrs	r2, r3
    7dc4:	0264      	lsls	r4, r4, #9
    7dc6:	9b01      	ldr	r3, [sp, #4]
    7dc8:	4691      	mov	r9, r2
    7dca:	0b22      	lsrs	r2, r4, #12
    7dcc:	0544      	lsls	r4, r0, #21
    7dce:	0d64      	lsrs	r4, r4, #21
    7dd0:	401d      	ands	r5, r3
    7dd2:	e67c      	b.n	7ace <__aeabi_dmul+0xce>
    7dd4:	2280      	movs	r2, #128	; 0x80
    7dd6:	4659      	mov	r1, fp
    7dd8:	0312      	lsls	r2, r2, #12
    7dda:	4211      	tst	r1, r2
    7ddc:	d008      	beq.n	7df0 <__aeabi_dmul+0x3f0>
    7dde:	4214      	tst	r4, r2
    7de0:	d106      	bne.n	7df0 <__aeabi_dmul+0x3f0>
    7de2:	4322      	orrs	r2, r4
    7de4:	0312      	lsls	r2, r2, #12
    7de6:	0b12      	lsrs	r2, r2, #12
    7de8:	4645      	mov	r5, r8
    7dea:	4699      	mov	r9, r3
    7dec:	4c43      	ldr	r4, [pc, #268]	; (7efc <__aeabi_dmul+0x4fc>)
    7dee:	e66e      	b.n	7ace <__aeabi_dmul+0xce>
    7df0:	465b      	mov	r3, fp
    7df2:	431a      	orrs	r2, r3
    7df4:	0312      	lsls	r2, r2, #12
    7df6:	0b12      	lsrs	r2, r2, #12
    7df8:	4c40      	ldr	r4, [pc, #256]	; (7efc <__aeabi_dmul+0x4fc>)
    7dfa:	e668      	b.n	7ace <__aeabi_dmul+0xce>
    7dfc:	0003      	movs	r3, r0
    7dfe:	4654      	mov	r4, sl
    7e00:	3b28      	subs	r3, #40	; 0x28
    7e02:	409c      	lsls	r4, r3
    7e04:	2300      	movs	r3, #0
    7e06:	e6b9      	b.n	7b7c <__aeabi_dmul+0x17c>
    7e08:	f000 fd3a 	bl	8880 <__clzsi2>
    7e0c:	3020      	adds	r0, #32
    7e0e:	e6a6      	b.n	7b5e <__aeabi_dmul+0x15e>
    7e10:	0003      	movs	r3, r0
    7e12:	3b28      	subs	r3, #40	; 0x28
    7e14:	409f      	lsls	r7, r3
    7e16:	2300      	movs	r3, #0
    7e18:	46bb      	mov	fp, r7
    7e1a:	4699      	mov	r9, r3
    7e1c:	e68a      	b.n	7b34 <__aeabi_dmul+0x134>
    7e1e:	f000 fd2f 	bl	8880 <__clzsi2>
    7e22:	3020      	adds	r0, #32
    7e24:	e674      	b.n	7b10 <__aeabi_dmul+0x110>
    7e26:	46b4      	mov	ip, r6
    7e28:	e7ad      	b.n	7d86 <__aeabi_dmul+0x386>
    7e2a:	2501      	movs	r5, #1
    7e2c:	1a2a      	subs	r2, r5, r0
    7e2e:	2a38      	cmp	r2, #56	; 0x38
    7e30:	dd06      	ble.n	7e40 <__aeabi_dmul+0x440>
    7e32:	9b01      	ldr	r3, [sp, #4]
    7e34:	2400      	movs	r4, #0
    7e36:	401d      	ands	r5, r3
    7e38:	2300      	movs	r3, #0
    7e3a:	2200      	movs	r2, #0
    7e3c:	4699      	mov	r9, r3
    7e3e:	e646      	b.n	7ace <__aeabi_dmul+0xce>
    7e40:	2a1f      	cmp	r2, #31
    7e42:	dc21      	bgt.n	7e88 <__aeabi_dmul+0x488>
    7e44:	2520      	movs	r5, #32
    7e46:	0020      	movs	r0, r4
    7e48:	1aad      	subs	r5, r5, r2
    7e4a:	001e      	movs	r6, r3
    7e4c:	40ab      	lsls	r3, r5
    7e4e:	40a8      	lsls	r0, r5
    7e50:	40d6      	lsrs	r6, r2
    7e52:	1e5d      	subs	r5, r3, #1
    7e54:	41ab      	sbcs	r3, r5
    7e56:	4330      	orrs	r0, r6
    7e58:	4318      	orrs	r0, r3
    7e5a:	40d4      	lsrs	r4, r2
    7e5c:	0743      	lsls	r3, r0, #29
    7e5e:	d009      	beq.n	7e74 <__aeabi_dmul+0x474>
    7e60:	230f      	movs	r3, #15
    7e62:	4003      	ands	r3, r0
    7e64:	2b04      	cmp	r3, #4
    7e66:	d005      	beq.n	7e74 <__aeabi_dmul+0x474>
    7e68:	0003      	movs	r3, r0
    7e6a:	1d18      	adds	r0, r3, #4
    7e6c:	4298      	cmp	r0, r3
    7e6e:	419b      	sbcs	r3, r3
    7e70:	425b      	negs	r3, r3
    7e72:	18e4      	adds	r4, r4, r3
    7e74:	0223      	lsls	r3, r4, #8
    7e76:	d521      	bpl.n	7ebc <__aeabi_dmul+0x4bc>
    7e78:	2501      	movs	r5, #1
    7e7a:	9b01      	ldr	r3, [sp, #4]
    7e7c:	2401      	movs	r4, #1
    7e7e:	401d      	ands	r5, r3
    7e80:	2300      	movs	r3, #0
    7e82:	2200      	movs	r2, #0
    7e84:	4699      	mov	r9, r3
    7e86:	e622      	b.n	7ace <__aeabi_dmul+0xce>
    7e88:	251f      	movs	r5, #31
    7e8a:	0021      	movs	r1, r4
    7e8c:	426d      	negs	r5, r5
    7e8e:	1a28      	subs	r0, r5, r0
    7e90:	40c1      	lsrs	r1, r0
    7e92:	0008      	movs	r0, r1
    7e94:	2a20      	cmp	r2, #32
    7e96:	d01d      	beq.n	7ed4 <__aeabi_dmul+0x4d4>
    7e98:	355f      	adds	r5, #95	; 0x5f
    7e9a:	1aaa      	subs	r2, r5, r2
    7e9c:	4094      	lsls	r4, r2
    7e9e:	4323      	orrs	r3, r4
    7ea0:	1e5c      	subs	r4, r3, #1
    7ea2:	41a3      	sbcs	r3, r4
    7ea4:	2507      	movs	r5, #7
    7ea6:	4303      	orrs	r3, r0
    7ea8:	401d      	ands	r5, r3
    7eaa:	2200      	movs	r2, #0
    7eac:	2d00      	cmp	r5, #0
    7eae:	d009      	beq.n	7ec4 <__aeabi_dmul+0x4c4>
    7eb0:	220f      	movs	r2, #15
    7eb2:	2400      	movs	r4, #0
    7eb4:	401a      	ands	r2, r3
    7eb6:	0018      	movs	r0, r3
    7eb8:	2a04      	cmp	r2, #4
    7eba:	d1d6      	bne.n	7e6a <__aeabi_dmul+0x46a>
    7ebc:	0003      	movs	r3, r0
    7ebe:	0765      	lsls	r5, r4, #29
    7ec0:	0264      	lsls	r4, r4, #9
    7ec2:	0b22      	lsrs	r2, r4, #12
    7ec4:	08db      	lsrs	r3, r3, #3
    7ec6:	432b      	orrs	r3, r5
    7ec8:	2501      	movs	r5, #1
    7eca:	4699      	mov	r9, r3
    7ecc:	9b01      	ldr	r3, [sp, #4]
    7ece:	2400      	movs	r4, #0
    7ed0:	401d      	ands	r5, r3
    7ed2:	e5fc      	b.n	7ace <__aeabi_dmul+0xce>
    7ed4:	2400      	movs	r4, #0
    7ed6:	e7e2      	b.n	7e9e <__aeabi_dmul+0x49e>
    7ed8:	2280      	movs	r2, #128	; 0x80
    7eda:	2501      	movs	r5, #1
    7edc:	0312      	lsls	r2, r2, #12
    7ede:	4322      	orrs	r2, r4
    7ee0:	9901      	ldr	r1, [sp, #4]
    7ee2:	0312      	lsls	r2, r2, #12
    7ee4:	0b12      	lsrs	r2, r2, #12
    7ee6:	400d      	ands	r5, r1
    7ee8:	4699      	mov	r9, r3
    7eea:	4c04      	ldr	r4, [pc, #16]	; (7efc <__aeabi_dmul+0x4fc>)
    7eec:	e5ef      	b.n	7ace <__aeabi_dmul+0xce>
    7eee:	46c0      	nop			; (mov r8, r8)
    7ef0:	000003ff 	.word	0x000003ff
    7ef4:	feffffff 	.word	0xfeffffff
    7ef8:	000007fe 	.word	0x000007fe
    7efc:	000007ff 	.word	0x000007ff

00007f00 <__aeabi_dsub>:
    7f00:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f02:	4646      	mov	r6, r8
    7f04:	46d6      	mov	lr, sl
    7f06:	464f      	mov	r7, r9
    7f08:	030c      	lsls	r4, r1, #12
    7f0a:	b5c0      	push	{r6, r7, lr}
    7f0c:	0fcd      	lsrs	r5, r1, #31
    7f0e:	004e      	lsls	r6, r1, #1
    7f10:	0a61      	lsrs	r1, r4, #9
    7f12:	0f44      	lsrs	r4, r0, #29
    7f14:	430c      	orrs	r4, r1
    7f16:	00c1      	lsls	r1, r0, #3
    7f18:	0058      	lsls	r0, r3, #1
    7f1a:	0d40      	lsrs	r0, r0, #21
    7f1c:	4684      	mov	ip, r0
    7f1e:	468a      	mov	sl, r1
    7f20:	000f      	movs	r7, r1
    7f22:	0319      	lsls	r1, r3, #12
    7f24:	0f50      	lsrs	r0, r2, #29
    7f26:	0a49      	lsrs	r1, r1, #9
    7f28:	4301      	orrs	r1, r0
    7f2a:	48c6      	ldr	r0, [pc, #792]	; (8244 <__aeabi_dsub+0x344>)
    7f2c:	0d76      	lsrs	r6, r6, #21
    7f2e:	46a8      	mov	r8, r5
    7f30:	0fdb      	lsrs	r3, r3, #31
    7f32:	00d2      	lsls	r2, r2, #3
    7f34:	4584      	cmp	ip, r0
    7f36:	d100      	bne.n	7f3a <__aeabi_dsub+0x3a>
    7f38:	e0d8      	b.n	80ec <__aeabi_dsub+0x1ec>
    7f3a:	2001      	movs	r0, #1
    7f3c:	4043      	eors	r3, r0
    7f3e:	42ab      	cmp	r3, r5
    7f40:	d100      	bne.n	7f44 <__aeabi_dsub+0x44>
    7f42:	e0a6      	b.n	8092 <__aeabi_dsub+0x192>
    7f44:	4660      	mov	r0, ip
    7f46:	1a35      	subs	r5, r6, r0
    7f48:	2d00      	cmp	r5, #0
    7f4a:	dc00      	bgt.n	7f4e <__aeabi_dsub+0x4e>
    7f4c:	e105      	b.n	815a <__aeabi_dsub+0x25a>
    7f4e:	2800      	cmp	r0, #0
    7f50:	d110      	bne.n	7f74 <__aeabi_dsub+0x74>
    7f52:	000b      	movs	r3, r1
    7f54:	4313      	orrs	r3, r2
    7f56:	d100      	bne.n	7f5a <__aeabi_dsub+0x5a>
    7f58:	e0d7      	b.n	810a <__aeabi_dsub+0x20a>
    7f5a:	1e6b      	subs	r3, r5, #1
    7f5c:	2b00      	cmp	r3, #0
    7f5e:	d000      	beq.n	7f62 <__aeabi_dsub+0x62>
    7f60:	e14b      	b.n	81fa <__aeabi_dsub+0x2fa>
    7f62:	4653      	mov	r3, sl
    7f64:	1a9f      	subs	r7, r3, r2
    7f66:	45ba      	cmp	sl, r7
    7f68:	4180      	sbcs	r0, r0
    7f6a:	1a64      	subs	r4, r4, r1
    7f6c:	4240      	negs	r0, r0
    7f6e:	1a24      	subs	r4, r4, r0
    7f70:	2601      	movs	r6, #1
    7f72:	e01e      	b.n	7fb2 <__aeabi_dsub+0xb2>
    7f74:	4bb3      	ldr	r3, [pc, #716]	; (8244 <__aeabi_dsub+0x344>)
    7f76:	429e      	cmp	r6, r3
    7f78:	d048      	beq.n	800c <__aeabi_dsub+0x10c>
    7f7a:	2380      	movs	r3, #128	; 0x80
    7f7c:	041b      	lsls	r3, r3, #16
    7f7e:	4319      	orrs	r1, r3
    7f80:	2d38      	cmp	r5, #56	; 0x38
    7f82:	dd00      	ble.n	7f86 <__aeabi_dsub+0x86>
    7f84:	e119      	b.n	81ba <__aeabi_dsub+0x2ba>
    7f86:	2d1f      	cmp	r5, #31
    7f88:	dd00      	ble.n	7f8c <__aeabi_dsub+0x8c>
    7f8a:	e14c      	b.n	8226 <__aeabi_dsub+0x326>
    7f8c:	2320      	movs	r3, #32
    7f8e:	000f      	movs	r7, r1
    7f90:	1b5b      	subs	r3, r3, r5
    7f92:	0010      	movs	r0, r2
    7f94:	409a      	lsls	r2, r3
    7f96:	409f      	lsls	r7, r3
    7f98:	40e8      	lsrs	r0, r5
    7f9a:	1e53      	subs	r3, r2, #1
    7f9c:	419a      	sbcs	r2, r3
    7f9e:	40e9      	lsrs	r1, r5
    7fa0:	4307      	orrs	r7, r0
    7fa2:	4317      	orrs	r7, r2
    7fa4:	4653      	mov	r3, sl
    7fa6:	1bdf      	subs	r7, r3, r7
    7fa8:	1a61      	subs	r1, r4, r1
    7faa:	45ba      	cmp	sl, r7
    7fac:	41a4      	sbcs	r4, r4
    7fae:	4264      	negs	r4, r4
    7fb0:	1b0c      	subs	r4, r1, r4
    7fb2:	0223      	lsls	r3, r4, #8
    7fb4:	d400      	bmi.n	7fb8 <__aeabi_dsub+0xb8>
    7fb6:	e0c5      	b.n	8144 <__aeabi_dsub+0x244>
    7fb8:	0264      	lsls	r4, r4, #9
    7fba:	0a65      	lsrs	r5, r4, #9
    7fbc:	2d00      	cmp	r5, #0
    7fbe:	d100      	bne.n	7fc2 <__aeabi_dsub+0xc2>
    7fc0:	e0f6      	b.n	81b0 <__aeabi_dsub+0x2b0>
    7fc2:	0028      	movs	r0, r5
    7fc4:	f000 fc5c 	bl	8880 <__clzsi2>
    7fc8:	0003      	movs	r3, r0
    7fca:	3b08      	subs	r3, #8
    7fcc:	2b1f      	cmp	r3, #31
    7fce:	dd00      	ble.n	7fd2 <__aeabi_dsub+0xd2>
    7fd0:	e0e9      	b.n	81a6 <__aeabi_dsub+0x2a6>
    7fd2:	2220      	movs	r2, #32
    7fd4:	003c      	movs	r4, r7
    7fd6:	1ad2      	subs	r2, r2, r3
    7fd8:	409d      	lsls	r5, r3
    7fda:	40d4      	lsrs	r4, r2
    7fdc:	409f      	lsls	r7, r3
    7fde:	4325      	orrs	r5, r4
    7fe0:	429e      	cmp	r6, r3
    7fe2:	dd00      	ble.n	7fe6 <__aeabi_dsub+0xe6>
    7fe4:	e0db      	b.n	819e <__aeabi_dsub+0x29e>
    7fe6:	1b9e      	subs	r6, r3, r6
    7fe8:	1c73      	adds	r3, r6, #1
    7fea:	2b1f      	cmp	r3, #31
    7fec:	dd00      	ble.n	7ff0 <__aeabi_dsub+0xf0>
    7fee:	e10a      	b.n	8206 <__aeabi_dsub+0x306>
    7ff0:	2220      	movs	r2, #32
    7ff2:	0038      	movs	r0, r7
    7ff4:	1ad2      	subs	r2, r2, r3
    7ff6:	0029      	movs	r1, r5
    7ff8:	4097      	lsls	r7, r2
    7ffa:	002c      	movs	r4, r5
    7ffc:	4091      	lsls	r1, r2
    7ffe:	40d8      	lsrs	r0, r3
    8000:	1e7a      	subs	r2, r7, #1
    8002:	4197      	sbcs	r7, r2
    8004:	40dc      	lsrs	r4, r3
    8006:	2600      	movs	r6, #0
    8008:	4301      	orrs	r1, r0
    800a:	430f      	orrs	r7, r1
    800c:	077b      	lsls	r3, r7, #29
    800e:	d009      	beq.n	8024 <__aeabi_dsub+0x124>
    8010:	230f      	movs	r3, #15
    8012:	403b      	ands	r3, r7
    8014:	2b04      	cmp	r3, #4
    8016:	d005      	beq.n	8024 <__aeabi_dsub+0x124>
    8018:	1d3b      	adds	r3, r7, #4
    801a:	42bb      	cmp	r3, r7
    801c:	41bf      	sbcs	r7, r7
    801e:	427f      	negs	r7, r7
    8020:	19e4      	adds	r4, r4, r7
    8022:	001f      	movs	r7, r3
    8024:	0223      	lsls	r3, r4, #8
    8026:	d525      	bpl.n	8074 <__aeabi_dsub+0x174>
    8028:	4b86      	ldr	r3, [pc, #536]	; (8244 <__aeabi_dsub+0x344>)
    802a:	3601      	adds	r6, #1
    802c:	429e      	cmp	r6, r3
    802e:	d100      	bne.n	8032 <__aeabi_dsub+0x132>
    8030:	e0af      	b.n	8192 <__aeabi_dsub+0x292>
    8032:	4b85      	ldr	r3, [pc, #532]	; (8248 <__aeabi_dsub+0x348>)
    8034:	2501      	movs	r5, #1
    8036:	401c      	ands	r4, r3
    8038:	4643      	mov	r3, r8
    803a:	0762      	lsls	r2, r4, #29
    803c:	08ff      	lsrs	r7, r7, #3
    803e:	0264      	lsls	r4, r4, #9
    8040:	0576      	lsls	r6, r6, #21
    8042:	4317      	orrs	r7, r2
    8044:	0b24      	lsrs	r4, r4, #12
    8046:	0d76      	lsrs	r6, r6, #21
    8048:	401d      	ands	r5, r3
    804a:	2100      	movs	r1, #0
    804c:	0324      	lsls	r4, r4, #12
    804e:	0b23      	lsrs	r3, r4, #12
    8050:	0d0c      	lsrs	r4, r1, #20
    8052:	4a7e      	ldr	r2, [pc, #504]	; (824c <__aeabi_dsub+0x34c>)
    8054:	0524      	lsls	r4, r4, #20
    8056:	431c      	orrs	r4, r3
    8058:	4014      	ands	r4, r2
    805a:	0533      	lsls	r3, r6, #20
    805c:	4323      	orrs	r3, r4
    805e:	005b      	lsls	r3, r3, #1
    8060:	07ed      	lsls	r5, r5, #31
    8062:	085b      	lsrs	r3, r3, #1
    8064:	432b      	orrs	r3, r5
    8066:	0038      	movs	r0, r7
    8068:	0019      	movs	r1, r3
    806a:	bc1c      	pop	{r2, r3, r4}
    806c:	4690      	mov	r8, r2
    806e:	4699      	mov	r9, r3
    8070:	46a2      	mov	sl, r4
    8072:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8074:	2501      	movs	r5, #1
    8076:	4643      	mov	r3, r8
    8078:	0762      	lsls	r2, r4, #29
    807a:	08ff      	lsrs	r7, r7, #3
    807c:	4317      	orrs	r7, r2
    807e:	08e4      	lsrs	r4, r4, #3
    8080:	401d      	ands	r5, r3
    8082:	4b70      	ldr	r3, [pc, #448]	; (8244 <__aeabi_dsub+0x344>)
    8084:	429e      	cmp	r6, r3
    8086:	d036      	beq.n	80f6 <__aeabi_dsub+0x1f6>
    8088:	0324      	lsls	r4, r4, #12
    808a:	0576      	lsls	r6, r6, #21
    808c:	0b24      	lsrs	r4, r4, #12
    808e:	0d76      	lsrs	r6, r6, #21
    8090:	e7db      	b.n	804a <__aeabi_dsub+0x14a>
    8092:	4663      	mov	r3, ip
    8094:	1af3      	subs	r3, r6, r3
    8096:	2b00      	cmp	r3, #0
    8098:	dc00      	bgt.n	809c <__aeabi_dsub+0x19c>
    809a:	e094      	b.n	81c6 <__aeabi_dsub+0x2c6>
    809c:	4660      	mov	r0, ip
    809e:	2800      	cmp	r0, #0
    80a0:	d035      	beq.n	810e <__aeabi_dsub+0x20e>
    80a2:	4868      	ldr	r0, [pc, #416]	; (8244 <__aeabi_dsub+0x344>)
    80a4:	4286      	cmp	r6, r0
    80a6:	d0b1      	beq.n	800c <__aeabi_dsub+0x10c>
    80a8:	2780      	movs	r7, #128	; 0x80
    80aa:	043f      	lsls	r7, r7, #16
    80ac:	4339      	orrs	r1, r7
    80ae:	2b38      	cmp	r3, #56	; 0x38
    80b0:	dc00      	bgt.n	80b4 <__aeabi_dsub+0x1b4>
    80b2:	e0fd      	b.n	82b0 <__aeabi_dsub+0x3b0>
    80b4:	430a      	orrs	r2, r1
    80b6:	0017      	movs	r7, r2
    80b8:	2100      	movs	r1, #0
    80ba:	1e7a      	subs	r2, r7, #1
    80bc:	4197      	sbcs	r7, r2
    80be:	4457      	add	r7, sl
    80c0:	4557      	cmp	r7, sl
    80c2:	4180      	sbcs	r0, r0
    80c4:	1909      	adds	r1, r1, r4
    80c6:	4244      	negs	r4, r0
    80c8:	190c      	adds	r4, r1, r4
    80ca:	0223      	lsls	r3, r4, #8
    80cc:	d53a      	bpl.n	8144 <__aeabi_dsub+0x244>
    80ce:	4b5d      	ldr	r3, [pc, #372]	; (8244 <__aeabi_dsub+0x344>)
    80d0:	3601      	adds	r6, #1
    80d2:	429e      	cmp	r6, r3
    80d4:	d100      	bne.n	80d8 <__aeabi_dsub+0x1d8>
    80d6:	e14b      	b.n	8370 <__aeabi_dsub+0x470>
    80d8:	2201      	movs	r2, #1
    80da:	4b5b      	ldr	r3, [pc, #364]	; (8248 <__aeabi_dsub+0x348>)
    80dc:	401c      	ands	r4, r3
    80de:	087b      	lsrs	r3, r7, #1
    80e0:	4017      	ands	r7, r2
    80e2:	431f      	orrs	r7, r3
    80e4:	07e2      	lsls	r2, r4, #31
    80e6:	4317      	orrs	r7, r2
    80e8:	0864      	lsrs	r4, r4, #1
    80ea:	e78f      	b.n	800c <__aeabi_dsub+0x10c>
    80ec:	0008      	movs	r0, r1
    80ee:	4310      	orrs	r0, r2
    80f0:	d000      	beq.n	80f4 <__aeabi_dsub+0x1f4>
    80f2:	e724      	b.n	7f3e <__aeabi_dsub+0x3e>
    80f4:	e721      	b.n	7f3a <__aeabi_dsub+0x3a>
    80f6:	0023      	movs	r3, r4
    80f8:	433b      	orrs	r3, r7
    80fa:	d100      	bne.n	80fe <__aeabi_dsub+0x1fe>
    80fc:	e1b9      	b.n	8472 <__aeabi_dsub+0x572>
    80fe:	2280      	movs	r2, #128	; 0x80
    8100:	0312      	lsls	r2, r2, #12
    8102:	4314      	orrs	r4, r2
    8104:	0324      	lsls	r4, r4, #12
    8106:	0b24      	lsrs	r4, r4, #12
    8108:	e79f      	b.n	804a <__aeabi_dsub+0x14a>
    810a:	002e      	movs	r6, r5
    810c:	e77e      	b.n	800c <__aeabi_dsub+0x10c>
    810e:	0008      	movs	r0, r1
    8110:	4310      	orrs	r0, r2
    8112:	d100      	bne.n	8116 <__aeabi_dsub+0x216>
    8114:	e0ca      	b.n	82ac <__aeabi_dsub+0x3ac>
    8116:	1e58      	subs	r0, r3, #1
    8118:	4684      	mov	ip, r0
    811a:	2800      	cmp	r0, #0
    811c:	d000      	beq.n	8120 <__aeabi_dsub+0x220>
    811e:	e0e7      	b.n	82f0 <__aeabi_dsub+0x3f0>
    8120:	4452      	add	r2, sl
    8122:	4552      	cmp	r2, sl
    8124:	4180      	sbcs	r0, r0
    8126:	1864      	adds	r4, r4, r1
    8128:	4240      	negs	r0, r0
    812a:	1824      	adds	r4, r4, r0
    812c:	0017      	movs	r7, r2
    812e:	2601      	movs	r6, #1
    8130:	0223      	lsls	r3, r4, #8
    8132:	d507      	bpl.n	8144 <__aeabi_dsub+0x244>
    8134:	2602      	movs	r6, #2
    8136:	e7cf      	b.n	80d8 <__aeabi_dsub+0x1d8>
    8138:	4664      	mov	r4, ip
    813a:	432c      	orrs	r4, r5
    813c:	d100      	bne.n	8140 <__aeabi_dsub+0x240>
    813e:	e1b3      	b.n	84a8 <__aeabi_dsub+0x5a8>
    8140:	002c      	movs	r4, r5
    8142:	4667      	mov	r7, ip
    8144:	077b      	lsls	r3, r7, #29
    8146:	d000      	beq.n	814a <__aeabi_dsub+0x24a>
    8148:	e762      	b.n	8010 <__aeabi_dsub+0x110>
    814a:	0763      	lsls	r3, r4, #29
    814c:	08ff      	lsrs	r7, r7, #3
    814e:	431f      	orrs	r7, r3
    8150:	2501      	movs	r5, #1
    8152:	4643      	mov	r3, r8
    8154:	08e4      	lsrs	r4, r4, #3
    8156:	401d      	ands	r5, r3
    8158:	e793      	b.n	8082 <__aeabi_dsub+0x182>
    815a:	2d00      	cmp	r5, #0
    815c:	d178      	bne.n	8250 <__aeabi_dsub+0x350>
    815e:	1c75      	adds	r5, r6, #1
    8160:	056d      	lsls	r5, r5, #21
    8162:	0d6d      	lsrs	r5, r5, #21
    8164:	2d01      	cmp	r5, #1
    8166:	dc00      	bgt.n	816a <__aeabi_dsub+0x26a>
    8168:	e0f2      	b.n	8350 <__aeabi_dsub+0x450>
    816a:	4650      	mov	r0, sl
    816c:	1a80      	subs	r0, r0, r2
    816e:	4582      	cmp	sl, r0
    8170:	41bf      	sbcs	r7, r7
    8172:	1a65      	subs	r5, r4, r1
    8174:	427f      	negs	r7, r7
    8176:	1bed      	subs	r5, r5, r7
    8178:	4684      	mov	ip, r0
    817a:	0228      	lsls	r0, r5, #8
    817c:	d400      	bmi.n	8180 <__aeabi_dsub+0x280>
    817e:	e08c      	b.n	829a <__aeabi_dsub+0x39a>
    8180:	4650      	mov	r0, sl
    8182:	1a17      	subs	r7, r2, r0
    8184:	42ba      	cmp	r2, r7
    8186:	4192      	sbcs	r2, r2
    8188:	1b0c      	subs	r4, r1, r4
    818a:	4255      	negs	r5, r2
    818c:	1b65      	subs	r5, r4, r5
    818e:	4698      	mov	r8, r3
    8190:	e714      	b.n	7fbc <__aeabi_dsub+0xbc>
    8192:	2501      	movs	r5, #1
    8194:	4643      	mov	r3, r8
    8196:	2400      	movs	r4, #0
    8198:	401d      	ands	r5, r3
    819a:	2700      	movs	r7, #0
    819c:	e755      	b.n	804a <__aeabi_dsub+0x14a>
    819e:	4c2a      	ldr	r4, [pc, #168]	; (8248 <__aeabi_dsub+0x348>)
    81a0:	1af6      	subs	r6, r6, r3
    81a2:	402c      	ands	r4, r5
    81a4:	e732      	b.n	800c <__aeabi_dsub+0x10c>
    81a6:	003d      	movs	r5, r7
    81a8:	3828      	subs	r0, #40	; 0x28
    81aa:	4085      	lsls	r5, r0
    81ac:	2700      	movs	r7, #0
    81ae:	e717      	b.n	7fe0 <__aeabi_dsub+0xe0>
    81b0:	0038      	movs	r0, r7
    81b2:	f000 fb65 	bl	8880 <__clzsi2>
    81b6:	3020      	adds	r0, #32
    81b8:	e706      	b.n	7fc8 <__aeabi_dsub+0xc8>
    81ba:	430a      	orrs	r2, r1
    81bc:	0017      	movs	r7, r2
    81be:	2100      	movs	r1, #0
    81c0:	1e7a      	subs	r2, r7, #1
    81c2:	4197      	sbcs	r7, r2
    81c4:	e6ee      	b.n	7fa4 <__aeabi_dsub+0xa4>
    81c6:	2b00      	cmp	r3, #0
    81c8:	d000      	beq.n	81cc <__aeabi_dsub+0x2cc>
    81ca:	e0e5      	b.n	8398 <__aeabi_dsub+0x498>
    81cc:	1c73      	adds	r3, r6, #1
    81ce:	469c      	mov	ip, r3
    81d0:	055b      	lsls	r3, r3, #21
    81d2:	0d5b      	lsrs	r3, r3, #21
    81d4:	2b01      	cmp	r3, #1
    81d6:	dc00      	bgt.n	81da <__aeabi_dsub+0x2da>
    81d8:	e09f      	b.n	831a <__aeabi_dsub+0x41a>
    81da:	4b1a      	ldr	r3, [pc, #104]	; (8244 <__aeabi_dsub+0x344>)
    81dc:	459c      	cmp	ip, r3
    81de:	d100      	bne.n	81e2 <__aeabi_dsub+0x2e2>
    81e0:	e0c5      	b.n	836e <__aeabi_dsub+0x46e>
    81e2:	4452      	add	r2, sl
    81e4:	4552      	cmp	r2, sl
    81e6:	4180      	sbcs	r0, r0
    81e8:	1864      	adds	r4, r4, r1
    81ea:	4240      	negs	r0, r0
    81ec:	1824      	adds	r4, r4, r0
    81ee:	07e7      	lsls	r7, r4, #31
    81f0:	0852      	lsrs	r2, r2, #1
    81f2:	4317      	orrs	r7, r2
    81f4:	0864      	lsrs	r4, r4, #1
    81f6:	4666      	mov	r6, ip
    81f8:	e708      	b.n	800c <__aeabi_dsub+0x10c>
    81fa:	4812      	ldr	r0, [pc, #72]	; (8244 <__aeabi_dsub+0x344>)
    81fc:	4285      	cmp	r5, r0
    81fe:	d100      	bne.n	8202 <__aeabi_dsub+0x302>
    8200:	e085      	b.n	830e <__aeabi_dsub+0x40e>
    8202:	001d      	movs	r5, r3
    8204:	e6bc      	b.n	7f80 <__aeabi_dsub+0x80>
    8206:	0029      	movs	r1, r5
    8208:	3e1f      	subs	r6, #31
    820a:	40f1      	lsrs	r1, r6
    820c:	2b20      	cmp	r3, #32
    820e:	d100      	bne.n	8212 <__aeabi_dsub+0x312>
    8210:	e07f      	b.n	8312 <__aeabi_dsub+0x412>
    8212:	2240      	movs	r2, #64	; 0x40
    8214:	1ad3      	subs	r3, r2, r3
    8216:	409d      	lsls	r5, r3
    8218:	432f      	orrs	r7, r5
    821a:	1e7d      	subs	r5, r7, #1
    821c:	41af      	sbcs	r7, r5
    821e:	2400      	movs	r4, #0
    8220:	430f      	orrs	r7, r1
    8222:	2600      	movs	r6, #0
    8224:	e78e      	b.n	8144 <__aeabi_dsub+0x244>
    8226:	002b      	movs	r3, r5
    8228:	000f      	movs	r7, r1
    822a:	3b20      	subs	r3, #32
    822c:	40df      	lsrs	r7, r3
    822e:	2d20      	cmp	r5, #32
    8230:	d071      	beq.n	8316 <__aeabi_dsub+0x416>
    8232:	2340      	movs	r3, #64	; 0x40
    8234:	1b5d      	subs	r5, r3, r5
    8236:	40a9      	lsls	r1, r5
    8238:	430a      	orrs	r2, r1
    823a:	1e51      	subs	r1, r2, #1
    823c:	418a      	sbcs	r2, r1
    823e:	2100      	movs	r1, #0
    8240:	4317      	orrs	r7, r2
    8242:	e6af      	b.n	7fa4 <__aeabi_dsub+0xa4>
    8244:	000007ff 	.word	0x000007ff
    8248:	ff7fffff 	.word	0xff7fffff
    824c:	800fffff 	.word	0x800fffff
    8250:	2e00      	cmp	r6, #0
    8252:	d03e      	beq.n	82d2 <__aeabi_dsub+0x3d2>
    8254:	4eb3      	ldr	r6, [pc, #716]	; (8524 <__aeabi_dsub+0x624>)
    8256:	45b4      	cmp	ip, r6
    8258:	d045      	beq.n	82e6 <__aeabi_dsub+0x3e6>
    825a:	2680      	movs	r6, #128	; 0x80
    825c:	0436      	lsls	r6, r6, #16
    825e:	426d      	negs	r5, r5
    8260:	4334      	orrs	r4, r6
    8262:	2d38      	cmp	r5, #56	; 0x38
    8264:	dd00      	ble.n	8268 <__aeabi_dsub+0x368>
    8266:	e0a8      	b.n	83ba <__aeabi_dsub+0x4ba>
    8268:	2d1f      	cmp	r5, #31
    826a:	dd00      	ble.n	826e <__aeabi_dsub+0x36e>
    826c:	e11f      	b.n	84ae <__aeabi_dsub+0x5ae>
    826e:	2620      	movs	r6, #32
    8270:	0027      	movs	r7, r4
    8272:	4650      	mov	r0, sl
    8274:	1b76      	subs	r6, r6, r5
    8276:	40b7      	lsls	r7, r6
    8278:	40e8      	lsrs	r0, r5
    827a:	4307      	orrs	r7, r0
    827c:	4650      	mov	r0, sl
    827e:	40b0      	lsls	r0, r6
    8280:	1e46      	subs	r6, r0, #1
    8282:	41b0      	sbcs	r0, r6
    8284:	40ec      	lsrs	r4, r5
    8286:	4338      	orrs	r0, r7
    8288:	1a17      	subs	r7, r2, r0
    828a:	42ba      	cmp	r2, r7
    828c:	4192      	sbcs	r2, r2
    828e:	1b0c      	subs	r4, r1, r4
    8290:	4252      	negs	r2, r2
    8292:	1aa4      	subs	r4, r4, r2
    8294:	4666      	mov	r6, ip
    8296:	4698      	mov	r8, r3
    8298:	e68b      	b.n	7fb2 <__aeabi_dsub+0xb2>
    829a:	4664      	mov	r4, ip
    829c:	4667      	mov	r7, ip
    829e:	432c      	orrs	r4, r5
    82a0:	d000      	beq.n	82a4 <__aeabi_dsub+0x3a4>
    82a2:	e68b      	b.n	7fbc <__aeabi_dsub+0xbc>
    82a4:	2500      	movs	r5, #0
    82a6:	2600      	movs	r6, #0
    82a8:	2700      	movs	r7, #0
    82aa:	e6ea      	b.n	8082 <__aeabi_dsub+0x182>
    82ac:	001e      	movs	r6, r3
    82ae:	e6ad      	b.n	800c <__aeabi_dsub+0x10c>
    82b0:	2b1f      	cmp	r3, #31
    82b2:	dc60      	bgt.n	8376 <__aeabi_dsub+0x476>
    82b4:	2720      	movs	r7, #32
    82b6:	1af8      	subs	r0, r7, r3
    82b8:	000f      	movs	r7, r1
    82ba:	4684      	mov	ip, r0
    82bc:	4087      	lsls	r7, r0
    82be:	0010      	movs	r0, r2
    82c0:	40d8      	lsrs	r0, r3
    82c2:	4307      	orrs	r7, r0
    82c4:	4660      	mov	r0, ip
    82c6:	4082      	lsls	r2, r0
    82c8:	1e50      	subs	r0, r2, #1
    82ca:	4182      	sbcs	r2, r0
    82cc:	40d9      	lsrs	r1, r3
    82ce:	4317      	orrs	r7, r2
    82d0:	e6f5      	b.n	80be <__aeabi_dsub+0x1be>
    82d2:	0026      	movs	r6, r4
    82d4:	4650      	mov	r0, sl
    82d6:	4306      	orrs	r6, r0
    82d8:	d005      	beq.n	82e6 <__aeabi_dsub+0x3e6>
    82da:	43ed      	mvns	r5, r5
    82dc:	2d00      	cmp	r5, #0
    82de:	d0d3      	beq.n	8288 <__aeabi_dsub+0x388>
    82e0:	4e90      	ldr	r6, [pc, #576]	; (8524 <__aeabi_dsub+0x624>)
    82e2:	45b4      	cmp	ip, r6
    82e4:	d1bd      	bne.n	8262 <__aeabi_dsub+0x362>
    82e6:	000c      	movs	r4, r1
    82e8:	0017      	movs	r7, r2
    82ea:	4666      	mov	r6, ip
    82ec:	4698      	mov	r8, r3
    82ee:	e68d      	b.n	800c <__aeabi_dsub+0x10c>
    82f0:	488c      	ldr	r0, [pc, #560]	; (8524 <__aeabi_dsub+0x624>)
    82f2:	4283      	cmp	r3, r0
    82f4:	d00b      	beq.n	830e <__aeabi_dsub+0x40e>
    82f6:	4663      	mov	r3, ip
    82f8:	e6d9      	b.n	80ae <__aeabi_dsub+0x1ae>
    82fa:	2d00      	cmp	r5, #0
    82fc:	d000      	beq.n	8300 <__aeabi_dsub+0x400>
    82fe:	e096      	b.n	842e <__aeabi_dsub+0x52e>
    8300:	0008      	movs	r0, r1
    8302:	4310      	orrs	r0, r2
    8304:	d100      	bne.n	8308 <__aeabi_dsub+0x408>
    8306:	e0e2      	b.n	84ce <__aeabi_dsub+0x5ce>
    8308:	000c      	movs	r4, r1
    830a:	0017      	movs	r7, r2
    830c:	4698      	mov	r8, r3
    830e:	4e85      	ldr	r6, [pc, #532]	; (8524 <__aeabi_dsub+0x624>)
    8310:	e67c      	b.n	800c <__aeabi_dsub+0x10c>
    8312:	2500      	movs	r5, #0
    8314:	e780      	b.n	8218 <__aeabi_dsub+0x318>
    8316:	2100      	movs	r1, #0
    8318:	e78e      	b.n	8238 <__aeabi_dsub+0x338>
    831a:	0023      	movs	r3, r4
    831c:	4650      	mov	r0, sl
    831e:	4303      	orrs	r3, r0
    8320:	2e00      	cmp	r6, #0
    8322:	d000      	beq.n	8326 <__aeabi_dsub+0x426>
    8324:	e0a8      	b.n	8478 <__aeabi_dsub+0x578>
    8326:	2b00      	cmp	r3, #0
    8328:	d100      	bne.n	832c <__aeabi_dsub+0x42c>
    832a:	e0de      	b.n	84ea <__aeabi_dsub+0x5ea>
    832c:	000b      	movs	r3, r1
    832e:	4313      	orrs	r3, r2
    8330:	d100      	bne.n	8334 <__aeabi_dsub+0x434>
    8332:	e66b      	b.n	800c <__aeabi_dsub+0x10c>
    8334:	4452      	add	r2, sl
    8336:	4552      	cmp	r2, sl
    8338:	4180      	sbcs	r0, r0
    833a:	1864      	adds	r4, r4, r1
    833c:	4240      	negs	r0, r0
    833e:	1824      	adds	r4, r4, r0
    8340:	0017      	movs	r7, r2
    8342:	0223      	lsls	r3, r4, #8
    8344:	d400      	bmi.n	8348 <__aeabi_dsub+0x448>
    8346:	e6fd      	b.n	8144 <__aeabi_dsub+0x244>
    8348:	4b77      	ldr	r3, [pc, #476]	; (8528 <__aeabi_dsub+0x628>)
    834a:	4666      	mov	r6, ip
    834c:	401c      	ands	r4, r3
    834e:	e65d      	b.n	800c <__aeabi_dsub+0x10c>
    8350:	0025      	movs	r5, r4
    8352:	4650      	mov	r0, sl
    8354:	4305      	orrs	r5, r0
    8356:	2e00      	cmp	r6, #0
    8358:	d1cf      	bne.n	82fa <__aeabi_dsub+0x3fa>
    835a:	2d00      	cmp	r5, #0
    835c:	d14f      	bne.n	83fe <__aeabi_dsub+0x4fe>
    835e:	000c      	movs	r4, r1
    8360:	4314      	orrs	r4, r2
    8362:	d100      	bne.n	8366 <__aeabi_dsub+0x466>
    8364:	e0a0      	b.n	84a8 <__aeabi_dsub+0x5a8>
    8366:	000c      	movs	r4, r1
    8368:	0017      	movs	r7, r2
    836a:	4698      	mov	r8, r3
    836c:	e64e      	b.n	800c <__aeabi_dsub+0x10c>
    836e:	4666      	mov	r6, ip
    8370:	2400      	movs	r4, #0
    8372:	2700      	movs	r7, #0
    8374:	e685      	b.n	8082 <__aeabi_dsub+0x182>
    8376:	001f      	movs	r7, r3
    8378:	0008      	movs	r0, r1
    837a:	3f20      	subs	r7, #32
    837c:	40f8      	lsrs	r0, r7
    837e:	0007      	movs	r7, r0
    8380:	2b20      	cmp	r3, #32
    8382:	d100      	bne.n	8386 <__aeabi_dsub+0x486>
    8384:	e08e      	b.n	84a4 <__aeabi_dsub+0x5a4>
    8386:	2040      	movs	r0, #64	; 0x40
    8388:	1ac3      	subs	r3, r0, r3
    838a:	4099      	lsls	r1, r3
    838c:	430a      	orrs	r2, r1
    838e:	1e51      	subs	r1, r2, #1
    8390:	418a      	sbcs	r2, r1
    8392:	2100      	movs	r1, #0
    8394:	4317      	orrs	r7, r2
    8396:	e692      	b.n	80be <__aeabi_dsub+0x1be>
    8398:	2e00      	cmp	r6, #0
    839a:	d114      	bne.n	83c6 <__aeabi_dsub+0x4c6>
    839c:	0026      	movs	r6, r4
    839e:	4650      	mov	r0, sl
    83a0:	4306      	orrs	r6, r0
    83a2:	d062      	beq.n	846a <__aeabi_dsub+0x56a>
    83a4:	43db      	mvns	r3, r3
    83a6:	2b00      	cmp	r3, #0
    83a8:	d15c      	bne.n	8464 <__aeabi_dsub+0x564>
    83aa:	1887      	adds	r7, r0, r2
    83ac:	4297      	cmp	r7, r2
    83ae:	4192      	sbcs	r2, r2
    83b0:	1864      	adds	r4, r4, r1
    83b2:	4252      	negs	r2, r2
    83b4:	18a4      	adds	r4, r4, r2
    83b6:	4666      	mov	r6, ip
    83b8:	e687      	b.n	80ca <__aeabi_dsub+0x1ca>
    83ba:	4650      	mov	r0, sl
    83bc:	4320      	orrs	r0, r4
    83be:	1e44      	subs	r4, r0, #1
    83c0:	41a0      	sbcs	r0, r4
    83c2:	2400      	movs	r4, #0
    83c4:	e760      	b.n	8288 <__aeabi_dsub+0x388>
    83c6:	4e57      	ldr	r6, [pc, #348]	; (8524 <__aeabi_dsub+0x624>)
    83c8:	45b4      	cmp	ip, r6
    83ca:	d04e      	beq.n	846a <__aeabi_dsub+0x56a>
    83cc:	2680      	movs	r6, #128	; 0x80
    83ce:	0436      	lsls	r6, r6, #16
    83d0:	425b      	negs	r3, r3
    83d2:	4334      	orrs	r4, r6
    83d4:	2b38      	cmp	r3, #56	; 0x38
    83d6:	dd00      	ble.n	83da <__aeabi_dsub+0x4da>
    83d8:	e07f      	b.n	84da <__aeabi_dsub+0x5da>
    83da:	2b1f      	cmp	r3, #31
    83dc:	dd00      	ble.n	83e0 <__aeabi_dsub+0x4e0>
    83de:	e08b      	b.n	84f8 <__aeabi_dsub+0x5f8>
    83e0:	2620      	movs	r6, #32
    83e2:	0027      	movs	r7, r4
    83e4:	4650      	mov	r0, sl
    83e6:	1af6      	subs	r6, r6, r3
    83e8:	40b7      	lsls	r7, r6
    83ea:	40d8      	lsrs	r0, r3
    83ec:	4307      	orrs	r7, r0
    83ee:	4650      	mov	r0, sl
    83f0:	40b0      	lsls	r0, r6
    83f2:	1e46      	subs	r6, r0, #1
    83f4:	41b0      	sbcs	r0, r6
    83f6:	4307      	orrs	r7, r0
    83f8:	40dc      	lsrs	r4, r3
    83fa:	18bf      	adds	r7, r7, r2
    83fc:	e7d6      	b.n	83ac <__aeabi_dsub+0x4ac>
    83fe:	000d      	movs	r5, r1
    8400:	4315      	orrs	r5, r2
    8402:	d100      	bne.n	8406 <__aeabi_dsub+0x506>
    8404:	e602      	b.n	800c <__aeabi_dsub+0x10c>
    8406:	4650      	mov	r0, sl
    8408:	1a80      	subs	r0, r0, r2
    840a:	4582      	cmp	sl, r0
    840c:	41bf      	sbcs	r7, r7
    840e:	1a65      	subs	r5, r4, r1
    8410:	427f      	negs	r7, r7
    8412:	1bed      	subs	r5, r5, r7
    8414:	4684      	mov	ip, r0
    8416:	0228      	lsls	r0, r5, #8
    8418:	d400      	bmi.n	841c <__aeabi_dsub+0x51c>
    841a:	e68d      	b.n	8138 <__aeabi_dsub+0x238>
    841c:	4650      	mov	r0, sl
    841e:	1a17      	subs	r7, r2, r0
    8420:	42ba      	cmp	r2, r7
    8422:	4192      	sbcs	r2, r2
    8424:	1b0c      	subs	r4, r1, r4
    8426:	4252      	negs	r2, r2
    8428:	1aa4      	subs	r4, r4, r2
    842a:	4698      	mov	r8, r3
    842c:	e5ee      	b.n	800c <__aeabi_dsub+0x10c>
    842e:	000d      	movs	r5, r1
    8430:	4315      	orrs	r5, r2
    8432:	d100      	bne.n	8436 <__aeabi_dsub+0x536>
    8434:	e76b      	b.n	830e <__aeabi_dsub+0x40e>
    8436:	4650      	mov	r0, sl
    8438:	0767      	lsls	r7, r4, #29
    843a:	08c0      	lsrs	r0, r0, #3
    843c:	4307      	orrs	r7, r0
    843e:	2080      	movs	r0, #128	; 0x80
    8440:	08e4      	lsrs	r4, r4, #3
    8442:	0300      	lsls	r0, r0, #12
    8444:	4204      	tst	r4, r0
    8446:	d007      	beq.n	8458 <__aeabi_dsub+0x558>
    8448:	08cd      	lsrs	r5, r1, #3
    844a:	4205      	tst	r5, r0
    844c:	d104      	bne.n	8458 <__aeabi_dsub+0x558>
    844e:	002c      	movs	r4, r5
    8450:	4698      	mov	r8, r3
    8452:	08d7      	lsrs	r7, r2, #3
    8454:	0749      	lsls	r1, r1, #29
    8456:	430f      	orrs	r7, r1
    8458:	0f7b      	lsrs	r3, r7, #29
    845a:	00e4      	lsls	r4, r4, #3
    845c:	431c      	orrs	r4, r3
    845e:	00ff      	lsls	r7, r7, #3
    8460:	4e30      	ldr	r6, [pc, #192]	; (8524 <__aeabi_dsub+0x624>)
    8462:	e5d3      	b.n	800c <__aeabi_dsub+0x10c>
    8464:	4e2f      	ldr	r6, [pc, #188]	; (8524 <__aeabi_dsub+0x624>)
    8466:	45b4      	cmp	ip, r6
    8468:	d1b4      	bne.n	83d4 <__aeabi_dsub+0x4d4>
    846a:	000c      	movs	r4, r1
    846c:	0017      	movs	r7, r2
    846e:	4666      	mov	r6, ip
    8470:	e5cc      	b.n	800c <__aeabi_dsub+0x10c>
    8472:	2700      	movs	r7, #0
    8474:	2400      	movs	r4, #0
    8476:	e5e8      	b.n	804a <__aeabi_dsub+0x14a>
    8478:	2b00      	cmp	r3, #0
    847a:	d039      	beq.n	84f0 <__aeabi_dsub+0x5f0>
    847c:	000b      	movs	r3, r1
    847e:	4313      	orrs	r3, r2
    8480:	d100      	bne.n	8484 <__aeabi_dsub+0x584>
    8482:	e744      	b.n	830e <__aeabi_dsub+0x40e>
    8484:	08c0      	lsrs	r0, r0, #3
    8486:	0767      	lsls	r7, r4, #29
    8488:	4307      	orrs	r7, r0
    848a:	2080      	movs	r0, #128	; 0x80
    848c:	08e4      	lsrs	r4, r4, #3
    848e:	0300      	lsls	r0, r0, #12
    8490:	4204      	tst	r4, r0
    8492:	d0e1      	beq.n	8458 <__aeabi_dsub+0x558>
    8494:	08cb      	lsrs	r3, r1, #3
    8496:	4203      	tst	r3, r0
    8498:	d1de      	bne.n	8458 <__aeabi_dsub+0x558>
    849a:	08d7      	lsrs	r7, r2, #3
    849c:	0749      	lsls	r1, r1, #29
    849e:	430f      	orrs	r7, r1
    84a0:	001c      	movs	r4, r3
    84a2:	e7d9      	b.n	8458 <__aeabi_dsub+0x558>
    84a4:	2100      	movs	r1, #0
    84a6:	e771      	b.n	838c <__aeabi_dsub+0x48c>
    84a8:	2500      	movs	r5, #0
    84aa:	2700      	movs	r7, #0
    84ac:	e5e9      	b.n	8082 <__aeabi_dsub+0x182>
    84ae:	002e      	movs	r6, r5
    84b0:	0027      	movs	r7, r4
    84b2:	3e20      	subs	r6, #32
    84b4:	40f7      	lsrs	r7, r6
    84b6:	2d20      	cmp	r5, #32
    84b8:	d02f      	beq.n	851a <__aeabi_dsub+0x61a>
    84ba:	2640      	movs	r6, #64	; 0x40
    84bc:	1b75      	subs	r5, r6, r5
    84be:	40ac      	lsls	r4, r5
    84c0:	4650      	mov	r0, sl
    84c2:	4320      	orrs	r0, r4
    84c4:	1e44      	subs	r4, r0, #1
    84c6:	41a0      	sbcs	r0, r4
    84c8:	2400      	movs	r4, #0
    84ca:	4338      	orrs	r0, r7
    84cc:	e6dc      	b.n	8288 <__aeabi_dsub+0x388>
    84ce:	2480      	movs	r4, #128	; 0x80
    84d0:	2500      	movs	r5, #0
    84d2:	0324      	lsls	r4, r4, #12
    84d4:	4e13      	ldr	r6, [pc, #76]	; (8524 <__aeabi_dsub+0x624>)
    84d6:	2700      	movs	r7, #0
    84d8:	e5d3      	b.n	8082 <__aeabi_dsub+0x182>
    84da:	4650      	mov	r0, sl
    84dc:	4320      	orrs	r0, r4
    84de:	0007      	movs	r7, r0
    84e0:	1e78      	subs	r0, r7, #1
    84e2:	4187      	sbcs	r7, r0
    84e4:	2400      	movs	r4, #0
    84e6:	18bf      	adds	r7, r7, r2
    84e8:	e760      	b.n	83ac <__aeabi_dsub+0x4ac>
    84ea:	000c      	movs	r4, r1
    84ec:	0017      	movs	r7, r2
    84ee:	e58d      	b.n	800c <__aeabi_dsub+0x10c>
    84f0:	000c      	movs	r4, r1
    84f2:	0017      	movs	r7, r2
    84f4:	4e0b      	ldr	r6, [pc, #44]	; (8524 <__aeabi_dsub+0x624>)
    84f6:	e589      	b.n	800c <__aeabi_dsub+0x10c>
    84f8:	001e      	movs	r6, r3
    84fa:	0027      	movs	r7, r4
    84fc:	3e20      	subs	r6, #32
    84fe:	40f7      	lsrs	r7, r6
    8500:	2b20      	cmp	r3, #32
    8502:	d00c      	beq.n	851e <__aeabi_dsub+0x61e>
    8504:	2640      	movs	r6, #64	; 0x40
    8506:	1af3      	subs	r3, r6, r3
    8508:	409c      	lsls	r4, r3
    850a:	4650      	mov	r0, sl
    850c:	4320      	orrs	r0, r4
    850e:	1e44      	subs	r4, r0, #1
    8510:	41a0      	sbcs	r0, r4
    8512:	4307      	orrs	r7, r0
    8514:	2400      	movs	r4, #0
    8516:	18bf      	adds	r7, r7, r2
    8518:	e748      	b.n	83ac <__aeabi_dsub+0x4ac>
    851a:	2400      	movs	r4, #0
    851c:	e7d0      	b.n	84c0 <__aeabi_dsub+0x5c0>
    851e:	2400      	movs	r4, #0
    8520:	e7f3      	b.n	850a <__aeabi_dsub+0x60a>
    8522:	46c0      	nop			; (mov r8, r8)
    8524:	000007ff 	.word	0x000007ff
    8528:	ff7fffff 	.word	0xff7fffff

0000852c <__aeabi_dcmpun>:
    852c:	b570      	push	{r4, r5, r6, lr}
    852e:	4e0e      	ldr	r6, [pc, #56]	; (8568 <__aeabi_dcmpun+0x3c>)
    8530:	030d      	lsls	r5, r1, #12
    8532:	031c      	lsls	r4, r3, #12
    8534:	0049      	lsls	r1, r1, #1
    8536:	005b      	lsls	r3, r3, #1
    8538:	0b2d      	lsrs	r5, r5, #12
    853a:	0d49      	lsrs	r1, r1, #21
    853c:	0b24      	lsrs	r4, r4, #12
    853e:	0d5b      	lsrs	r3, r3, #21
    8540:	42b1      	cmp	r1, r6
    8542:	d004      	beq.n	854e <__aeabi_dcmpun+0x22>
    8544:	4908      	ldr	r1, [pc, #32]	; (8568 <__aeabi_dcmpun+0x3c>)
    8546:	2000      	movs	r0, #0
    8548:	428b      	cmp	r3, r1
    854a:	d008      	beq.n	855e <__aeabi_dcmpun+0x32>
    854c:	bd70      	pop	{r4, r5, r6, pc}
    854e:	4305      	orrs	r5, r0
    8550:	2001      	movs	r0, #1
    8552:	2d00      	cmp	r5, #0
    8554:	d1fa      	bne.n	854c <__aeabi_dcmpun+0x20>
    8556:	4904      	ldr	r1, [pc, #16]	; (8568 <__aeabi_dcmpun+0x3c>)
    8558:	2000      	movs	r0, #0
    855a:	428b      	cmp	r3, r1
    855c:	d1f6      	bne.n	854c <__aeabi_dcmpun+0x20>
    855e:	4314      	orrs	r4, r2
    8560:	0020      	movs	r0, r4
    8562:	1e44      	subs	r4, r0, #1
    8564:	41a0      	sbcs	r0, r4
    8566:	e7f1      	b.n	854c <__aeabi_dcmpun+0x20>
    8568:	000007ff 	.word	0x000007ff

0000856c <__aeabi_d2iz>:
    856c:	b530      	push	{r4, r5, lr}
    856e:	4d13      	ldr	r5, [pc, #76]	; (85bc <__aeabi_d2iz+0x50>)
    8570:	030a      	lsls	r2, r1, #12
    8572:	004b      	lsls	r3, r1, #1
    8574:	0b12      	lsrs	r2, r2, #12
    8576:	0d5b      	lsrs	r3, r3, #21
    8578:	0fc9      	lsrs	r1, r1, #31
    857a:	2400      	movs	r4, #0
    857c:	42ab      	cmp	r3, r5
    857e:	dd10      	ble.n	85a2 <__aeabi_d2iz+0x36>
    8580:	4c0f      	ldr	r4, [pc, #60]	; (85c0 <__aeabi_d2iz+0x54>)
    8582:	42a3      	cmp	r3, r4
    8584:	dc0f      	bgt.n	85a6 <__aeabi_d2iz+0x3a>
    8586:	2480      	movs	r4, #128	; 0x80
    8588:	4d0e      	ldr	r5, [pc, #56]	; (85c4 <__aeabi_d2iz+0x58>)
    858a:	0364      	lsls	r4, r4, #13
    858c:	4322      	orrs	r2, r4
    858e:	1aed      	subs	r5, r5, r3
    8590:	2d1f      	cmp	r5, #31
    8592:	dd0b      	ble.n	85ac <__aeabi_d2iz+0x40>
    8594:	480c      	ldr	r0, [pc, #48]	; (85c8 <__aeabi_d2iz+0x5c>)
    8596:	1ac3      	subs	r3, r0, r3
    8598:	40da      	lsrs	r2, r3
    859a:	4254      	negs	r4, r2
    859c:	2900      	cmp	r1, #0
    859e:	d100      	bne.n	85a2 <__aeabi_d2iz+0x36>
    85a0:	0014      	movs	r4, r2
    85a2:	0020      	movs	r0, r4
    85a4:	bd30      	pop	{r4, r5, pc}
    85a6:	4b09      	ldr	r3, [pc, #36]	; (85cc <__aeabi_d2iz+0x60>)
    85a8:	18cc      	adds	r4, r1, r3
    85aa:	e7fa      	b.n	85a2 <__aeabi_d2iz+0x36>
    85ac:	4c08      	ldr	r4, [pc, #32]	; (85d0 <__aeabi_d2iz+0x64>)
    85ae:	40e8      	lsrs	r0, r5
    85b0:	46a4      	mov	ip, r4
    85b2:	4463      	add	r3, ip
    85b4:	409a      	lsls	r2, r3
    85b6:	4302      	orrs	r2, r0
    85b8:	e7ef      	b.n	859a <__aeabi_d2iz+0x2e>
    85ba:	46c0      	nop			; (mov r8, r8)
    85bc:	000003fe 	.word	0x000003fe
    85c0:	0000041d 	.word	0x0000041d
    85c4:	00000433 	.word	0x00000433
    85c8:	00000413 	.word	0x00000413
    85cc:	7fffffff 	.word	0x7fffffff
    85d0:	fffffbed 	.word	0xfffffbed

000085d4 <__aeabi_i2d>:
    85d4:	b570      	push	{r4, r5, r6, lr}
    85d6:	2800      	cmp	r0, #0
    85d8:	d030      	beq.n	863c <__aeabi_i2d+0x68>
    85da:	17c3      	asrs	r3, r0, #31
    85dc:	18c4      	adds	r4, r0, r3
    85de:	405c      	eors	r4, r3
    85e0:	0fc5      	lsrs	r5, r0, #31
    85e2:	0020      	movs	r0, r4
    85e4:	f000 f94c 	bl	8880 <__clzsi2>
    85e8:	4b17      	ldr	r3, [pc, #92]	; (8648 <__aeabi_i2d+0x74>)
    85ea:	4a18      	ldr	r2, [pc, #96]	; (864c <__aeabi_i2d+0x78>)
    85ec:	1a1b      	subs	r3, r3, r0
    85ee:	1ad2      	subs	r2, r2, r3
    85f0:	2a1f      	cmp	r2, #31
    85f2:	dd18      	ble.n	8626 <__aeabi_i2d+0x52>
    85f4:	4a16      	ldr	r2, [pc, #88]	; (8650 <__aeabi_i2d+0x7c>)
    85f6:	1ad2      	subs	r2, r2, r3
    85f8:	4094      	lsls	r4, r2
    85fa:	2200      	movs	r2, #0
    85fc:	0324      	lsls	r4, r4, #12
    85fe:	055b      	lsls	r3, r3, #21
    8600:	0b24      	lsrs	r4, r4, #12
    8602:	0d5b      	lsrs	r3, r3, #21
    8604:	2100      	movs	r1, #0
    8606:	0010      	movs	r0, r2
    8608:	0324      	lsls	r4, r4, #12
    860a:	0d0a      	lsrs	r2, r1, #20
    860c:	0b24      	lsrs	r4, r4, #12
    860e:	0512      	lsls	r2, r2, #20
    8610:	4322      	orrs	r2, r4
    8612:	4c10      	ldr	r4, [pc, #64]	; (8654 <__aeabi_i2d+0x80>)
    8614:	051b      	lsls	r3, r3, #20
    8616:	4022      	ands	r2, r4
    8618:	4313      	orrs	r3, r2
    861a:	005b      	lsls	r3, r3, #1
    861c:	07ed      	lsls	r5, r5, #31
    861e:	085b      	lsrs	r3, r3, #1
    8620:	432b      	orrs	r3, r5
    8622:	0019      	movs	r1, r3
    8624:	bd70      	pop	{r4, r5, r6, pc}
    8626:	0021      	movs	r1, r4
    8628:	4091      	lsls	r1, r2
    862a:	000a      	movs	r2, r1
    862c:	210b      	movs	r1, #11
    862e:	1a08      	subs	r0, r1, r0
    8630:	40c4      	lsrs	r4, r0
    8632:	055b      	lsls	r3, r3, #21
    8634:	0324      	lsls	r4, r4, #12
    8636:	0b24      	lsrs	r4, r4, #12
    8638:	0d5b      	lsrs	r3, r3, #21
    863a:	e7e3      	b.n	8604 <__aeabi_i2d+0x30>
    863c:	2500      	movs	r5, #0
    863e:	2300      	movs	r3, #0
    8640:	2400      	movs	r4, #0
    8642:	2200      	movs	r2, #0
    8644:	e7de      	b.n	8604 <__aeabi_i2d+0x30>
    8646:	46c0      	nop			; (mov r8, r8)
    8648:	0000041e 	.word	0x0000041e
    864c:	00000433 	.word	0x00000433
    8650:	00000413 	.word	0x00000413
    8654:	800fffff 	.word	0x800fffff

00008658 <__aeabi_ui2d>:
    8658:	b510      	push	{r4, lr}
    865a:	1e04      	subs	r4, r0, #0
    865c:	d028      	beq.n	86b0 <__aeabi_ui2d+0x58>
    865e:	f000 f90f 	bl	8880 <__clzsi2>
    8662:	4b15      	ldr	r3, [pc, #84]	; (86b8 <__aeabi_ui2d+0x60>)
    8664:	4a15      	ldr	r2, [pc, #84]	; (86bc <__aeabi_ui2d+0x64>)
    8666:	1a1b      	subs	r3, r3, r0
    8668:	1ad2      	subs	r2, r2, r3
    866a:	2a1f      	cmp	r2, #31
    866c:	dd15      	ble.n	869a <__aeabi_ui2d+0x42>
    866e:	4a14      	ldr	r2, [pc, #80]	; (86c0 <__aeabi_ui2d+0x68>)
    8670:	1ad2      	subs	r2, r2, r3
    8672:	4094      	lsls	r4, r2
    8674:	2200      	movs	r2, #0
    8676:	0324      	lsls	r4, r4, #12
    8678:	055b      	lsls	r3, r3, #21
    867a:	0b24      	lsrs	r4, r4, #12
    867c:	0d5b      	lsrs	r3, r3, #21
    867e:	2100      	movs	r1, #0
    8680:	0010      	movs	r0, r2
    8682:	0324      	lsls	r4, r4, #12
    8684:	0d0a      	lsrs	r2, r1, #20
    8686:	0b24      	lsrs	r4, r4, #12
    8688:	0512      	lsls	r2, r2, #20
    868a:	4322      	orrs	r2, r4
    868c:	4c0d      	ldr	r4, [pc, #52]	; (86c4 <__aeabi_ui2d+0x6c>)
    868e:	051b      	lsls	r3, r3, #20
    8690:	4022      	ands	r2, r4
    8692:	4313      	orrs	r3, r2
    8694:	005b      	lsls	r3, r3, #1
    8696:	0859      	lsrs	r1, r3, #1
    8698:	bd10      	pop	{r4, pc}
    869a:	0021      	movs	r1, r4
    869c:	4091      	lsls	r1, r2
    869e:	000a      	movs	r2, r1
    86a0:	210b      	movs	r1, #11
    86a2:	1a08      	subs	r0, r1, r0
    86a4:	40c4      	lsrs	r4, r0
    86a6:	055b      	lsls	r3, r3, #21
    86a8:	0324      	lsls	r4, r4, #12
    86aa:	0b24      	lsrs	r4, r4, #12
    86ac:	0d5b      	lsrs	r3, r3, #21
    86ae:	e7e6      	b.n	867e <__aeabi_ui2d+0x26>
    86b0:	2300      	movs	r3, #0
    86b2:	2400      	movs	r4, #0
    86b4:	2200      	movs	r2, #0
    86b6:	e7e2      	b.n	867e <__aeabi_ui2d+0x26>
    86b8:	0000041e 	.word	0x0000041e
    86bc:	00000433 	.word	0x00000433
    86c0:	00000413 	.word	0x00000413
    86c4:	800fffff 	.word	0x800fffff

000086c8 <__aeabi_f2d>:
    86c8:	0041      	lsls	r1, r0, #1
    86ca:	0e09      	lsrs	r1, r1, #24
    86cc:	1c4b      	adds	r3, r1, #1
    86ce:	b570      	push	{r4, r5, r6, lr}
    86d0:	b2db      	uxtb	r3, r3
    86d2:	0246      	lsls	r6, r0, #9
    86d4:	0a75      	lsrs	r5, r6, #9
    86d6:	0fc4      	lsrs	r4, r0, #31
    86d8:	2b01      	cmp	r3, #1
    86da:	dd14      	ble.n	8706 <__aeabi_f2d+0x3e>
    86dc:	23e0      	movs	r3, #224	; 0xe0
    86de:	009b      	lsls	r3, r3, #2
    86e0:	076d      	lsls	r5, r5, #29
    86e2:	0b36      	lsrs	r6, r6, #12
    86e4:	18cb      	adds	r3, r1, r3
    86e6:	2100      	movs	r1, #0
    86e8:	0d0a      	lsrs	r2, r1, #20
    86ea:	0028      	movs	r0, r5
    86ec:	0512      	lsls	r2, r2, #20
    86ee:	4d1c      	ldr	r5, [pc, #112]	; (8760 <__aeabi_f2d+0x98>)
    86f0:	4332      	orrs	r2, r6
    86f2:	055b      	lsls	r3, r3, #21
    86f4:	402a      	ands	r2, r5
    86f6:	085b      	lsrs	r3, r3, #1
    86f8:	4313      	orrs	r3, r2
    86fa:	005b      	lsls	r3, r3, #1
    86fc:	07e4      	lsls	r4, r4, #31
    86fe:	085b      	lsrs	r3, r3, #1
    8700:	4323      	orrs	r3, r4
    8702:	0019      	movs	r1, r3
    8704:	bd70      	pop	{r4, r5, r6, pc}
    8706:	2900      	cmp	r1, #0
    8708:	d114      	bne.n	8734 <__aeabi_f2d+0x6c>
    870a:	2d00      	cmp	r5, #0
    870c:	d01e      	beq.n	874c <__aeabi_f2d+0x84>
    870e:	0028      	movs	r0, r5
    8710:	f000 f8b6 	bl	8880 <__clzsi2>
    8714:	280a      	cmp	r0, #10
    8716:	dc1c      	bgt.n	8752 <__aeabi_f2d+0x8a>
    8718:	230b      	movs	r3, #11
    871a:	002a      	movs	r2, r5
    871c:	1a1b      	subs	r3, r3, r0
    871e:	40da      	lsrs	r2, r3
    8720:	0003      	movs	r3, r0
    8722:	3315      	adds	r3, #21
    8724:	409d      	lsls	r5, r3
    8726:	4b0f      	ldr	r3, [pc, #60]	; (8764 <__aeabi_f2d+0x9c>)
    8728:	0312      	lsls	r2, r2, #12
    872a:	1a1b      	subs	r3, r3, r0
    872c:	055b      	lsls	r3, r3, #21
    872e:	0b16      	lsrs	r6, r2, #12
    8730:	0d5b      	lsrs	r3, r3, #21
    8732:	e7d8      	b.n	86e6 <__aeabi_f2d+0x1e>
    8734:	2d00      	cmp	r5, #0
    8736:	d006      	beq.n	8746 <__aeabi_f2d+0x7e>
    8738:	0b32      	lsrs	r2, r6, #12
    873a:	2680      	movs	r6, #128	; 0x80
    873c:	0336      	lsls	r6, r6, #12
    873e:	076d      	lsls	r5, r5, #29
    8740:	4316      	orrs	r6, r2
    8742:	4b09      	ldr	r3, [pc, #36]	; (8768 <__aeabi_f2d+0xa0>)
    8744:	e7cf      	b.n	86e6 <__aeabi_f2d+0x1e>
    8746:	4b08      	ldr	r3, [pc, #32]	; (8768 <__aeabi_f2d+0xa0>)
    8748:	2600      	movs	r6, #0
    874a:	e7cc      	b.n	86e6 <__aeabi_f2d+0x1e>
    874c:	2300      	movs	r3, #0
    874e:	2600      	movs	r6, #0
    8750:	e7c9      	b.n	86e6 <__aeabi_f2d+0x1e>
    8752:	0003      	movs	r3, r0
    8754:	002a      	movs	r2, r5
    8756:	3b0b      	subs	r3, #11
    8758:	409a      	lsls	r2, r3
    875a:	2500      	movs	r5, #0
    875c:	e7e3      	b.n	8726 <__aeabi_f2d+0x5e>
    875e:	46c0      	nop			; (mov r8, r8)
    8760:	800fffff 	.word	0x800fffff
    8764:	00000389 	.word	0x00000389
    8768:	000007ff 	.word	0x000007ff

0000876c <__aeabi_d2f>:
    876c:	b5f0      	push	{r4, r5, r6, r7, lr}
    876e:	004c      	lsls	r4, r1, #1
    8770:	0d64      	lsrs	r4, r4, #21
    8772:	030b      	lsls	r3, r1, #12
    8774:	1c62      	adds	r2, r4, #1
    8776:	0f45      	lsrs	r5, r0, #29
    8778:	0a5b      	lsrs	r3, r3, #9
    877a:	0552      	lsls	r2, r2, #21
    877c:	432b      	orrs	r3, r5
    877e:	0fc9      	lsrs	r1, r1, #31
    8780:	00c5      	lsls	r5, r0, #3
    8782:	0d52      	lsrs	r2, r2, #21
    8784:	2a01      	cmp	r2, #1
    8786:	dd28      	ble.n	87da <__aeabi_d2f+0x6e>
    8788:	4a3a      	ldr	r2, [pc, #232]	; (8874 <__aeabi_d2f+0x108>)
    878a:	18a6      	adds	r6, r4, r2
    878c:	2efe      	cmp	r6, #254	; 0xfe
    878e:	dc1b      	bgt.n	87c8 <__aeabi_d2f+0x5c>
    8790:	2e00      	cmp	r6, #0
    8792:	dd3e      	ble.n	8812 <__aeabi_d2f+0xa6>
    8794:	0180      	lsls	r0, r0, #6
    8796:	0002      	movs	r2, r0
    8798:	1e50      	subs	r0, r2, #1
    879a:	4182      	sbcs	r2, r0
    879c:	0f6d      	lsrs	r5, r5, #29
    879e:	432a      	orrs	r2, r5
    87a0:	00db      	lsls	r3, r3, #3
    87a2:	4313      	orrs	r3, r2
    87a4:	075a      	lsls	r2, r3, #29
    87a6:	d004      	beq.n	87b2 <__aeabi_d2f+0x46>
    87a8:	220f      	movs	r2, #15
    87aa:	401a      	ands	r2, r3
    87ac:	2a04      	cmp	r2, #4
    87ae:	d000      	beq.n	87b2 <__aeabi_d2f+0x46>
    87b0:	3304      	adds	r3, #4
    87b2:	2280      	movs	r2, #128	; 0x80
    87b4:	04d2      	lsls	r2, r2, #19
    87b6:	401a      	ands	r2, r3
    87b8:	d05a      	beq.n	8870 <__aeabi_d2f+0x104>
    87ba:	3601      	adds	r6, #1
    87bc:	2eff      	cmp	r6, #255	; 0xff
    87be:	d003      	beq.n	87c8 <__aeabi_d2f+0x5c>
    87c0:	019b      	lsls	r3, r3, #6
    87c2:	0a5b      	lsrs	r3, r3, #9
    87c4:	b2f4      	uxtb	r4, r6
    87c6:	e001      	b.n	87cc <__aeabi_d2f+0x60>
    87c8:	24ff      	movs	r4, #255	; 0xff
    87ca:	2300      	movs	r3, #0
    87cc:	0258      	lsls	r0, r3, #9
    87ce:	05e4      	lsls	r4, r4, #23
    87d0:	0a40      	lsrs	r0, r0, #9
    87d2:	07c9      	lsls	r1, r1, #31
    87d4:	4320      	orrs	r0, r4
    87d6:	4308      	orrs	r0, r1
    87d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    87da:	2c00      	cmp	r4, #0
    87dc:	d007      	beq.n	87ee <__aeabi_d2f+0x82>
    87de:	431d      	orrs	r5, r3
    87e0:	d0f2      	beq.n	87c8 <__aeabi_d2f+0x5c>
    87e2:	2080      	movs	r0, #128	; 0x80
    87e4:	00db      	lsls	r3, r3, #3
    87e6:	0480      	lsls	r0, r0, #18
    87e8:	4303      	orrs	r3, r0
    87ea:	26ff      	movs	r6, #255	; 0xff
    87ec:	e7da      	b.n	87a4 <__aeabi_d2f+0x38>
    87ee:	432b      	orrs	r3, r5
    87f0:	d003      	beq.n	87fa <__aeabi_d2f+0x8e>
    87f2:	2305      	movs	r3, #5
    87f4:	08db      	lsrs	r3, r3, #3
    87f6:	2cff      	cmp	r4, #255	; 0xff
    87f8:	d003      	beq.n	8802 <__aeabi_d2f+0x96>
    87fa:	025b      	lsls	r3, r3, #9
    87fc:	0a5b      	lsrs	r3, r3, #9
    87fe:	b2e4      	uxtb	r4, r4
    8800:	e7e4      	b.n	87cc <__aeabi_d2f+0x60>
    8802:	2b00      	cmp	r3, #0
    8804:	d032      	beq.n	886c <__aeabi_d2f+0x100>
    8806:	2080      	movs	r0, #128	; 0x80
    8808:	03c0      	lsls	r0, r0, #15
    880a:	4303      	orrs	r3, r0
    880c:	025b      	lsls	r3, r3, #9
    880e:	0a5b      	lsrs	r3, r3, #9
    8810:	e7dc      	b.n	87cc <__aeabi_d2f+0x60>
    8812:	0032      	movs	r2, r6
    8814:	3217      	adds	r2, #23
    8816:	db14      	blt.n	8842 <__aeabi_d2f+0xd6>
    8818:	2280      	movs	r2, #128	; 0x80
    881a:	271e      	movs	r7, #30
    881c:	0412      	lsls	r2, r2, #16
    881e:	4313      	orrs	r3, r2
    8820:	1bbf      	subs	r7, r7, r6
    8822:	2f1f      	cmp	r7, #31
    8824:	dc0f      	bgt.n	8846 <__aeabi_d2f+0xda>
    8826:	4a14      	ldr	r2, [pc, #80]	; (8878 <__aeabi_d2f+0x10c>)
    8828:	4694      	mov	ip, r2
    882a:	4464      	add	r4, ip
    882c:	002a      	movs	r2, r5
    882e:	40a5      	lsls	r5, r4
    8830:	002e      	movs	r6, r5
    8832:	40a3      	lsls	r3, r4
    8834:	1e75      	subs	r5, r6, #1
    8836:	41ae      	sbcs	r6, r5
    8838:	40fa      	lsrs	r2, r7
    883a:	4333      	orrs	r3, r6
    883c:	4313      	orrs	r3, r2
    883e:	2600      	movs	r6, #0
    8840:	e7b0      	b.n	87a4 <__aeabi_d2f+0x38>
    8842:	2400      	movs	r4, #0
    8844:	e7d5      	b.n	87f2 <__aeabi_d2f+0x86>
    8846:	2202      	movs	r2, #2
    8848:	4252      	negs	r2, r2
    884a:	1b96      	subs	r6, r2, r6
    884c:	001a      	movs	r2, r3
    884e:	40f2      	lsrs	r2, r6
    8850:	2f20      	cmp	r7, #32
    8852:	d009      	beq.n	8868 <__aeabi_d2f+0xfc>
    8854:	4809      	ldr	r0, [pc, #36]	; (887c <__aeabi_d2f+0x110>)
    8856:	4684      	mov	ip, r0
    8858:	4464      	add	r4, ip
    885a:	40a3      	lsls	r3, r4
    885c:	432b      	orrs	r3, r5
    885e:	1e5d      	subs	r5, r3, #1
    8860:	41ab      	sbcs	r3, r5
    8862:	2600      	movs	r6, #0
    8864:	4313      	orrs	r3, r2
    8866:	e79d      	b.n	87a4 <__aeabi_d2f+0x38>
    8868:	2300      	movs	r3, #0
    886a:	e7f7      	b.n	885c <__aeabi_d2f+0xf0>
    886c:	2300      	movs	r3, #0
    886e:	e7ad      	b.n	87cc <__aeabi_d2f+0x60>
    8870:	0034      	movs	r4, r6
    8872:	e7bf      	b.n	87f4 <__aeabi_d2f+0x88>
    8874:	fffffc80 	.word	0xfffffc80
    8878:	fffffc82 	.word	0xfffffc82
    887c:	fffffca2 	.word	0xfffffca2

00008880 <__clzsi2>:
    8880:	211c      	movs	r1, #28
    8882:	2301      	movs	r3, #1
    8884:	041b      	lsls	r3, r3, #16
    8886:	4298      	cmp	r0, r3
    8888:	d301      	bcc.n	888e <__clzsi2+0xe>
    888a:	0c00      	lsrs	r0, r0, #16
    888c:	3910      	subs	r1, #16
    888e:	0a1b      	lsrs	r3, r3, #8
    8890:	4298      	cmp	r0, r3
    8892:	d301      	bcc.n	8898 <__clzsi2+0x18>
    8894:	0a00      	lsrs	r0, r0, #8
    8896:	3908      	subs	r1, #8
    8898:	091b      	lsrs	r3, r3, #4
    889a:	4298      	cmp	r0, r3
    889c:	d301      	bcc.n	88a2 <__clzsi2+0x22>
    889e:	0900      	lsrs	r0, r0, #4
    88a0:	3904      	subs	r1, #4
    88a2:	a202      	add	r2, pc, #8	; (adr r2, 88ac <__clzsi2+0x2c>)
    88a4:	5c10      	ldrb	r0, [r2, r0]
    88a6:	1840      	adds	r0, r0, r1
    88a8:	4770      	bx	lr
    88aa:	46c0      	nop			; (mov r8, r8)
    88ac:	02020304 	.word	0x02020304
    88b0:	01010101 	.word	0x01010101
	...
    88bc:	0000646d 	.word	0x0000646d
    88c0:	00000000 	.word	0x00000000
    88c4:	0000206d 	.word	0x0000206d
    88c8:	00000000 	.word	0x00000000
    88cc:	0000776d 	.word	0x0000776d
    88d0:	00000000 	.word	0x00000000
    88d4:	0000616d 	.word	0x0000616d
    88d8:	00000000 	.word	0x00000000
    88dc:	0000736d 	.word	0x0000736d
    88e0:	00000000 	.word	0x00000000

000088e4 <_tcc_intflag>:
    88e4:	00000001 00000002 00000004 00000008     ................
    88f4:	00001000 00002000 00004000 00008000     ..... ...@......
    8904:	00010000 00020000 00040000 00080000     ................
    8914:	0000776d 00000000 0000206d 00000000     mw......m ......

00008924 <tc_interrupt_vectors.12756>:
    8924:	00141312 73657431 00000074 42000800     ....1test......B
    8934:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    8944:	42001c00 00001aa2 00001a9e 00001a9e     ...B............
    8954:	00001b00 00001b00 00001ab6 00001aa8     ................
    8964:	00001abc 00001aee 00001d3c 00001d1c     ........<.......
    8974:	00001d1c 00001da8 00001d2e 00001d4a     ............J...
    8984:	00001d20 00001d58 00001d98 42002c00      ...X........,.B
    8994:	42003000 42003400                       .0.B.4.B

0000899c <tc_interrupt_vectors.11884>:
    899c:	00141312                                ....

000089a0 <_global_impure_ptr>:
    89a0:	20000014 00464e49 00666e69 004e414e     ... INF.inf.NAN.
    89b0:	006e616e 31300030 35343332 39383736     nan.0.0123456789
    89c0:	44434241 30004645 34333231 38373635     ABCDEF.012345678
    89d0:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
    89e0:	4e614e00 00000000                       .NaN....

000089e8 <__sf_fake_stderr>:
	...

00008a08 <__sf_fake_stdin>:
	...

00008a28 <__sf_fake_stdout>:
	...

00008a48 <__mprec_bigtens>:
    8a48:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    8a58:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    8a68:	7f73bf3c 75154fdd                       <.s..O.u

00008a70 <__mprec_tens>:
    8a70:	00000000 3ff00000 00000000 40240000     .......?......$@
    8a80:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    8a90:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    8aa0:	00000000 412e8480 00000000 416312d0     .......A......cA
    8ab0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    8ac0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    8ad0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    8ae0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    8af0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    8b00:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    8b10:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    8b20:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    8b30:	79d99db4 44ea7843                       ...yCx.D

00008b38 <p05.6052>:
    8b38:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    8b48:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
    8b58:	5849534f 00002e00                                OSIX...

00008b5f <_ctype_>:
    8b5f:	20202000 20202020 28282020 20282828     .         ((((( 
    8b6f:	20202020 20202020 20202020 20202020                     
    8b7f:	10108820 10101010 10101010 10101010      ...............
    8b8f:	04040410 04040404 10040404 10101010     ................
    8b9f:	41411010 41414141 01010101 01010101     ..AAAAAA........
    8baf:	01010101 01010101 01010101 10101010     ................
    8bbf:	42421010 42424242 02020202 02020202     ..BBBBBB........
    8bcf:	02020202 02020202 02020202 10101010     ................
    8bdf:	00000020 00000000 00000000 00000000      ...............
	...
    8c5f:	00664400 00661400 00662600 00656800     .Df...f..&f..he.
    8c6f:	00662600 00660a00 00662600 00656800     .&f...f..&f..he.
    8c7f:	00661400 00661400 00660a00 00656800     ..f...f...f..he.
    8c8f:	00657000 00657000 00657000 00662c00     .pe..pe..pe..,f.
    8c9f:	00661400 00661400 0065e800 0066cc00     ..f...f...e...f.
    8caf:	0065e800 00660a00 0065e800 0066cc00     ..e...f...e...f.
    8cbf:	00661400 00661400 00660a00 0066cc00     ..f...f...f...f.
    8ccf:	00657000 00657000 00657000 0066d600     .pe..pe..pe...f.
    8cdf:	0069c400 00691400 00691400 00691200     ..i...i...i...i.
    8cef:	0069b600 0069b600 0069ac00 00691200     ..i...i...i...i.
    8cff:	0069b600 0069ac00 0069b600 00691200     ..i...i...i...i.
    8d0f:	0069bc00 0069bc00 0069bc00 006a4c00     ..i...i...i..Lj.
    8d1f:	00739000 00737200 00732c00 00724a00     ..s..rs..,s..Jr.
    8d2f:	00732c00 00736400 00732c00 00724a00     .,s..ds..,s..Jr.
    8d3f:	00737200 00737200 00736400 00724a00     .rs..rs..ds..Jr.
    8d4f:	00724200 00724200 00724200 0075a800     .Br..Br..Br...u.
    8d5f:	007bf000 007ab000 007ab000 007aac00     ..{...z...z...z.
    8d6f:	007bc800 007bc800 007bba00 007aac00     ..{...{...{...z.
    8d7f:	007bc800 007bba00 007bc800 007aac00     ..{...{...{...z.
    8d8f:	007bd000 007bd000 007bd000 007dd400     ..{...{...{...}.
	...

00008da0 <_init>:
    8da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8da2:	46c0      	nop			; (mov r8, r8)
    8da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8da6:	bc08      	pop	{r3}
    8da8:	469e      	mov	lr, r3
    8daa:	4770      	bx	lr

00008dac <__init_array_start>:
    8dac:	000000dd 	.word	0x000000dd

00008db0 <_fini>:
    8db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8db2:	46c0      	nop			; (mov r8, r8)
    8db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8db6:	bc08      	pop	{r3}
    8db8:	469e      	mov	lr, r3
    8dba:	4770      	bx	lr

00008dbc <__fini_array_start>:
    8dbc:	000000b5 	.word	0x000000b5
