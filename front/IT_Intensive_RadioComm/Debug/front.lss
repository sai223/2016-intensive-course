
front.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008fc0  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001dc  20000000  00008fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000914  200001dc  0000919c  000201dc  2**2
                  ALLOC
  3 .stack        00002000  20000af0  00009ab0  000201dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  5 .comment      0000008c  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005dc9e  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000086d0  00000000  00000000  0007df2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e9fb  00000000  00000000  000865fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c50  00000000  00000000  00094ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001438  00000000  00000000  00095c49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000226ad  00000000  00000000  00097081  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001cf56  00000000  00000000  000b972e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a579  00000000  00000000  000d6684  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002e04  00000000  00000000  00160c00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f0 2a 00 20 15 26 00 00 11 26 00 00 11 26 00 00     .*. .&...&...&..
	...
      2c:	11 26 00 00 00 00 00 00 00 00 00 00 11 26 00 00     .&...........&..
      3c:	11 26 00 00 11 26 00 00 11 26 00 00 11 26 00 00     .&...&...&...&..
      4c:	11 26 00 00 19 09 00 00 11 26 00 00 11 26 00 00     .&.......&...&..
      5c:	11 26 00 00 11 26 00 00 05 0f 00 00 15 0f 00 00     .&...&..........
      6c:	25 0f 00 00 35 0f 00 00 45 0f 00 00 55 0f 00 00     %...5...E...U...
      7c:	b9 03 00 00 c9 03 00 00 d9 03 00 00 f1 22 00 00     ............."..
      8c:	01 23 00 00 11 23 00 00 00 00 00 00 00 00 00 00     .#...#..........
      9c:	11 26 00 00 11 26 00 00 00 00 00 00 11 26 00 00     .&...&.......&..
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001dc 	.word	0x200001dc
      d4:	00000000 	.word	0x00000000
      d8:	00008fc0 	.word	0x00008fc0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001e0 	.word	0x200001e0
     108:	00008fc0 	.word	0x00008fc0
     10c:	00008fc0 	.word	0x00008fc0
     110:	00000000 	.word	0x00000000

00000114 <artist_ultrasonic_configure>:
 */
#include "TheArtist.h"
#include "UltraSonic.h"

void artist_ultrasonic_configure (struct artist_ultrasonic_module * module, uint8_t echo, uint8_t trig) {
	module->echo_pin	= echo; 
     114:	7001      	strb	r1, [r0, #0]
	module->trigger_pin = trig;  
     116:	7042      	strb	r2, [r0, #1]
	module->filter_large_change_counts = 0; 
     118:	2300      	movs	r3, #0
     11a:	7083      	strb	r3, [r0, #2]
	module->fliter_old_val = 0; 
     11c:	2300      	movs	r3, #0
     11e:	6043      	str	r3, [r0, #4]
	
}
     120:	4770      	bx	lr
	...

00000124 <artist_ultrasonic_gpio_init>:

void artist_ultrasonic_gpio_init() {
     124:	b5f0      	push	{r4, r5, r6, r7, lr}
     126:	b085      	sub	sp, #20
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     128:	a903      	add	r1, sp, #12
     12a:	2201      	movs	r2, #1
     12c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     12e:	2300      	movs	r3, #0
     130:	708b      	strb	r3, [r1, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     132:	ad02      	add	r5, sp, #8
     134:	702b      	strb	r3, [r5, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     136:	706a      	strb	r2, [r5, #1]
	config->powersave  = false;
     138:	70ab      	strb	r3, [r5, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     13a:	4668      	mov	r0, sp
     13c:	7003      	strb	r3, [r0, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     13e:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
     140:	7083      	strb	r3, [r0, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     142:	ac01      	add	r4, sp, #4
     144:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     146:	7062      	strb	r2, [r4, #1]
	config->powersave  = false;
     148:	70a3      	strb	r3, [r4, #2]
	port_get_config_defaults(&pin_config_trig);
	port_get_config_defaults(&pin_config_echo_center);
	port_get_config_defaults(&pin_config_echo_right);
	port_get_config_defaults(&pin_config_echo_left);

	pin_config_trig.direction			=	PORT_PIN_DIR_OUTPUT;
     14a:	700a      	strb	r2, [r1, #0]
	
	pin_config_echo_right.direction		=	PORT_PIN_DIR_INPUT;
	pin_config_echo_right.input_pull	=	PORT_PIN_PULL_UP;
	
	
	port_pin_set_config(artist_front.us_instance_center.trigger_pin, &pin_config_trig);
     14c:	4f09      	ldr	r7, [pc, #36]	; (174 <artist_ultrasonic_gpio_init+0x50>)
     14e:	33b5      	adds	r3, #181	; 0xb5
     150:	5cf8      	ldrb	r0, [r7, r3]
     152:	4e09      	ldr	r6, [pc, #36]	; (178 <artist_ultrasonic_gpio_init+0x54>)
     154:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_center.echo_pin, &pin_config_echo_center);
     156:	23b4      	movs	r3, #180	; 0xb4
     158:	5cf8      	ldrb	r0, [r7, r3]
     15a:	0029      	movs	r1, r5
     15c:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_left.echo_pin, &pin_config_echo_left);
     15e:	23bc      	movs	r3, #188	; 0xbc
     160:	5cf8      	ldrb	r0, [r7, r3]
     162:	0021      	movs	r1, r4
     164:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_right.echo_pin, &pin_config_echo_right); 
     166:	23c4      	movs	r3, #196	; 0xc4
     168:	5cf8      	ldrb	r0, [r7, r3]
     16a:	4669      	mov	r1, sp
     16c:	47b0      	blx	r6
}
     16e:	b005      	add	sp, #20
     170:	bdf0      	pop	{r4, r5, r6, r7, pc}
     172:	46c0      	nop			; (mov r8, r8)
     174:	20000888 	.word	0x20000888
     178:	00000a7d 	.word	0x00000a7d

0000017c <artist_print_ultrasonic_value>:
	else if (FILTER_VAL < 0)	FILTER_VAL = 0;

	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
}

float artist_print_ultrasonic_value() {
     17c:	b5f0      	push	{r4, r5, r6, r7, lr}
     17e:	b085      	sub	sp, #20
	printf("%5.2f, %5.2f, %5.2f\n", 
				artist_front.left_distance, 
     180:	4d0b      	ldr	r5, [pc, #44]	; (1b0 <artist_print_ultrasonic_value+0x34>)
	printf("%5.2f, %5.2f, %5.2f\n", 
     182:	4c0c      	ldr	r4, [pc, #48]	; (1b4 <artist_print_ultrasonic_value+0x38>)
     184:	23d0      	movs	r3, #208	; 0xd0
     186:	58e8      	ldr	r0, [r5, r3]
     188:	47a0      	blx	r4
     18a:	0006      	movs	r6, r0
     18c:	000f      	movs	r7, r1
				artist_front.center_distance, 
				artist_front.right_distance);  
     18e:	23d4      	movs	r3, #212	; 0xd4
	printf("%5.2f, %5.2f, %5.2f\n", 
     190:	58e8      	ldr	r0, [r5, r3]
     192:	47a0      	blx	r4
     194:	9002      	str	r0, [sp, #8]
     196:	9103      	str	r1, [sp, #12]
				artist_front.center_distance, 
     198:	23cc      	movs	r3, #204	; 0xcc
	printf("%5.2f, %5.2f, %5.2f\n", 
     19a:	58e8      	ldr	r0, [r5, r3]
     19c:	47a0      	blx	r4
     19e:	9000      	str	r0, [sp, #0]
     1a0:	9101      	str	r1, [sp, #4]
     1a2:	0032      	movs	r2, r6
     1a4:	003b      	movs	r3, r7
     1a6:	4804      	ldr	r0, [pc, #16]	; (1b8 <artist_print_ultrasonic_value+0x3c>)
     1a8:	4904      	ldr	r1, [pc, #16]	; (1bc <artist_print_ultrasonic_value+0x40>)
     1aa:	4788      	blx	r1
}
     1ac:	b005      	add	sp, #20
     1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1b0:	20000888 	.word	0x20000888
     1b4:	000088c1 	.word	0x000088c1
     1b8:	00008ab4 	.word	0x00008ab4
     1bc:	00003e91 	.word	0x00003e91

000001c0 <artist_ultrasonic_get_value>:
float artist_ultrasonic_get_value(struct artist_ultrasonic_module * const module) {
     1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1c2:	b083      	sub	sp, #12
     1c4:	0004      	movs	r4, r0
	// TODO : use timer callback function!
	uint16_t start, end;
	port_pin_set_output_level(module->trigger_pin, false);
     1c6:	7842      	ldrb	r2, [r0, #1]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     1c8:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     1ca:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     1cc:	2900      	cmp	r1, #0
     1ce:	d104      	bne.n	1da <artist_ultrasonic_get_value+0x1a>
		return &(ports[port_index]->Group[group_index]);
     1d0:	0953      	lsrs	r3, r2, #5
     1d2:	01db      	lsls	r3, r3, #7
     1d4:	4956      	ldr	r1, [pc, #344]	; (330 <artist_ultrasonic_get_value+0x170>)
     1d6:	468c      	mov	ip, r1
     1d8:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1da:	211f      	movs	r1, #31
     1dc:	4011      	ands	r1, r2
     1de:	2201      	movs	r2, #1
     1e0:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     1e2:	615a      	str	r2, [r3, #20]
	delay_us(40);
     1e4:	2028      	movs	r0, #40	; 0x28
     1e6:	4b53      	ldr	r3, [pc, #332]	; (334 <artist_ultrasonic_get_value+0x174>)
     1e8:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, true);
     1ea:	7862      	ldrb	r2, [r4, #1]
	if (port_index < PORT_INST_NUM) {
     1ec:	09d1      	lsrs	r1, r2, #7
		return NULL;
     1ee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     1f0:	2900      	cmp	r1, #0
     1f2:	d104      	bne.n	1fe <artist_ultrasonic_get_value+0x3e>
		return &(ports[port_index]->Group[group_index]);
     1f4:	0953      	lsrs	r3, r2, #5
     1f6:	01db      	lsls	r3, r3, #7
     1f8:	494d      	ldr	r1, [pc, #308]	; (330 <artist_ultrasonic_get_value+0x170>)
     1fa:	468c      	mov	ip, r1
     1fc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1fe:	211f      	movs	r1, #31
     200:	4011      	ands	r1, r2
     202:	2201      	movs	r2, #1
     204:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     206:	619a      	str	r2, [r3, #24]
	delay_us(10);
     208:	200a      	movs	r0, #10
     20a:	4b4a      	ldr	r3, [pc, #296]	; (334 <artist_ultrasonic_get_value+0x174>)
     20c:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, false);
     20e:	7862      	ldrb	r2, [r4, #1]
	if (port_index < PORT_INST_NUM) {
     210:	09d1      	lsrs	r1, r2, #7
		return NULL;
     212:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     214:	2900      	cmp	r1, #0
     216:	d104      	bne.n	222 <artist_ultrasonic_get_value+0x62>
		return &(ports[port_index]->Group[group_index]);
     218:	0953      	lsrs	r3, r2, #5
     21a:	01db      	lsls	r3, r3, #7
     21c:	4944      	ldr	r1, [pc, #272]	; (330 <artist_ultrasonic_get_value+0x170>)
     21e:	468c      	mov	ip, r1
     220:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     222:	211f      	movs	r1, #31
     224:	4011      	ands	r1, r2
     226:	2201      	movs	r2, #1
     228:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     22a:	615a      	str	r2, [r3, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     22c:	4b42      	ldr	r3, [pc, #264]	; (338 <artist_ultrasonic_get_value+0x178>)
     22e:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     230:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     232:	b25b      	sxtb	r3, r3
     234:	2b00      	cmp	r3, #0
     236:	dbfb      	blt.n	230 <artist_ultrasonic_get_value+0x70>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
     238:	2300      	movs	r3, #0
     23a:	7113      	strb	r3, [r2, #4]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     23c:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     23e:	b25b      	sxtb	r3, r3
     240:	2b00      	cmp	r3, #0
     242:	dbfb      	blt.n	23c <artist_ultrasonic_get_value+0x7c>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
     244:	2340      	movs	r3, #64	; 0x40
     246:	7153      	strb	r3, [r2, #5]
	tc_start_counter(&(artist_front.tc_instance_ultrasonic)); 
	while (!(port_pin_get_input_level(module->echo_pin)));
     248:	7823      	ldrb	r3, [r4, #0]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     24a:	221f      	movs	r2, #31
     24c:	401a      	ands	r2, r3
     24e:	2101      	movs	r1, #1
     250:	4091      	lsls	r1, r2
     252:	09d8      	lsrs	r0, r3, #7
     254:	2200      	movs	r2, #0
     256:	2800      	cmp	r0, #0
     258:	d104      	bne.n	264 <artist_ultrasonic_get_value+0xa4>
     25a:	095a      	lsrs	r2, r3, #5
     25c:	01d2      	lsls	r2, r2, #7
     25e:	4b34      	ldr	r3, [pc, #208]	; (330 <artist_ultrasonic_get_value+0x170>)
     260:	469c      	mov	ip, r3
     262:	4462      	add	r2, ip
	return (port_base->IN.reg & pin_mask);
     264:	6a13      	ldr	r3, [r2, #32]
     266:	420b      	tst	r3, r1
     268:	d0fc      	beq.n	264 <artist_ultrasonic_get_value+0xa4>
	start = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
     26a:	4833      	ldr	r0, [pc, #204]	; (338 <artist_ultrasonic_get_value+0x178>)
     26c:	4b33      	ldr	r3, [pc, #204]	; (33c <artist_ultrasonic_get_value+0x17c>)
     26e:	4798      	blx	r3
     270:	0005      	movs	r5, r0
	while ((port_pin_get_input_level(module->echo_pin)));
     272:	7823      	ldrb	r3, [r4, #0]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     274:	221f      	movs	r2, #31
     276:	401a      	ands	r2, r3
     278:	2101      	movs	r1, #1
     27a:	4091      	lsls	r1, r2
     27c:	09d8      	lsrs	r0, r3, #7
     27e:	2200      	movs	r2, #0
     280:	2800      	cmp	r0, #0
     282:	d104      	bne.n	28e <artist_ultrasonic_get_value+0xce>
     284:	095a      	lsrs	r2, r3, #5
     286:	01d2      	lsls	r2, r2, #7
     288:	4b29      	ldr	r3, [pc, #164]	; (330 <artist_ultrasonic_get_value+0x170>)
     28a:	469c      	mov	ip, r3
     28c:	4462      	add	r2, ip
	return (port_base->IN.reg & pin_mask);
     28e:	6a13      	ldr	r3, [r2, #32]
     290:	420b      	tst	r3, r1
     292:	d1fc      	bne.n	28e <artist_ultrasonic_get_value+0xce>
	end = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
     294:	4e28      	ldr	r6, [pc, #160]	; (338 <artist_ultrasonic_get_value+0x178>)
     296:	0030      	movs	r0, r6
     298:	4b28      	ldr	r3, [pc, #160]	; (33c <artist_ultrasonic_get_value+0x17c>)
     29a:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     29c:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     29e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     2a0:	b25b      	sxtb	r3, r3
     2a2:	2b00      	cmp	r3, #0
     2a4:	dbfb      	blt.n	29e <artist_ultrasonic_get_value+0xde>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
     2a6:	2380      	movs	r3, #128	; 0x80
     2a8:	7153      	strb	r3, [r2, #5]
	tc_stop_counter(&(artist_front.tc_instance_ultrasonic));

	float new = ((float)(end - start)) * 0.017;
     2aa:	0400      	lsls	r0, r0, #16
     2ac:	0c00      	lsrs	r0, r0, #16
     2ae:	042d      	lsls	r5, r5, #16
     2b0:	0c2d      	lsrs	r5, r5, #16
     2b2:	1b40      	subs	r0, r0, r5
     2b4:	4f22      	ldr	r7, [pc, #136]	; (340 <artist_ultrasonic_get_value+0x180>)
     2b6:	47b8      	blx	r7
     2b8:	4b22      	ldr	r3, [pc, #136]	; (344 <artist_ultrasonic_get_value+0x184>)
     2ba:	4798      	blx	r3
     2bc:	4a22      	ldr	r2, [pc, #136]	; (348 <artist_ultrasonic_get_value+0x188>)
     2be:	4b23      	ldr	r3, [pc, #140]	; (34c <artist_ultrasonic_get_value+0x18c>)
     2c0:	4d23      	ldr	r5, [pc, #140]	; (350 <artist_ultrasonic_get_value+0x190>)
     2c2:	47a8      	blx	r5
     2c4:	4b23      	ldr	r3, [pc, #140]	; (354 <artist_ultrasonic_get_value+0x194>)
     2c6:	4798      	blx	r3
     2c8:	9001      	str	r0, [sp, #4]
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     2ca:	6865      	ldr	r5, [r4, #4]
	if (new > old * module->filter_large_change_counts ||
     2cc:	78a6      	ldrb	r6, [r4, #2]
     2ce:	0030      	movs	r0, r6
     2d0:	47b8      	blx	r7
     2d2:	1c07      	adds	r7, r0, #0
     2d4:	1c01      	adds	r1, r0, #0
     2d6:	1c28      	adds	r0, r5, #0
     2d8:	4b1f      	ldr	r3, [pc, #124]	; (358 <artist_ultrasonic_get_value+0x198>)
     2da:	4798      	blx	r3
     2dc:	1c01      	adds	r1, r0, #0
     2de:	9801      	ldr	r0, [sp, #4]
     2e0:	4b1e      	ldr	r3, [pc, #120]	; (35c <artist_ultrasonic_get_value+0x19c>)
     2e2:	4798      	blx	r3
     2e4:	2800      	cmp	r0, #0
     2e6:	d109      	bne.n	2fc <artist_ultrasonic_get_value+0x13c>
	new < old * 1/module->filter_large_change_counts ) {
     2e8:	1c39      	adds	r1, r7, #0
     2ea:	1c28      	adds	r0, r5, #0
     2ec:	4b1c      	ldr	r3, [pc, #112]	; (360 <artist_ultrasonic_get_value+0x1a0>)
     2ee:	4798      	blx	r3
     2f0:	1c01      	adds	r1, r0, #0
	if (new > old * module->filter_large_change_counts ||
     2f2:	9801      	ldr	r0, [sp, #4]
     2f4:	4b1b      	ldr	r3, [pc, #108]	; (364 <artist_ultrasonic_get_value+0x1a4>)
     2f6:	4798      	blx	r3
     2f8:	2800      	cmp	r0, #0
     2fa:	d005      	beq.n	308 <artist_ultrasonic_get_value+0x148>
		module->filter_large_change_counts ++;
     2fc:	1c73      	adds	r3, r6, #1
     2fe:	b2db      	uxtb	r3, r3
		if (module->filter_large_change_counts > 3)		
     300:	2b03      	cmp	r3, #3
     302:	d812      	bhi.n	32a <artist_ultrasonic_get_value+0x16a>
		module->filter_large_change_counts ++;
     304:	70a3      	strb	r3, [r4, #2]
			new = old;
     306:	9501      	str	r5, [sp, #4]
	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
     308:	4f13      	ldr	r7, [pc, #76]	; (358 <artist_ultrasonic_get_value+0x198>)
     30a:	21fd      	movs	r1, #253	; 0xfd
     30c:	0589      	lsls	r1, r1, #22
     30e:	9801      	ldr	r0, [sp, #4]
     310:	47b8      	blx	r7
     312:	1c06      	adds	r6, r0, #0
     314:	21fa      	movs	r1, #250	; 0xfa
     316:	0589      	lsls	r1, r1, #22
     318:	1c28      	adds	r0, r5, #0
     31a:	47b8      	blx	r7
     31c:	1c01      	adds	r1, r0, #0
     31e:	1c30      	adds	r0, r6, #0
     320:	4b11      	ldr	r3, [pc, #68]	; (368 <artist_ultrasonic_get_value+0x1a8>)
     322:	4798      	blx	r3
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     324:	6060      	str	r0, [r4, #4]
	return module->fliter_old_val;
}
     326:	b003      	add	sp, #12
     328:	bdf0      	pop	{r4, r5, r6, r7, pc}
			module->filter_large_change_counts = 0;
     32a:	2300      	movs	r3, #0
     32c:	70a3      	strb	r3, [r4, #2]
     32e:	e7eb      	b.n	308 <artist_ultrasonic_get_value+0x148>
     330:	41004400 	.word	0x41004400
     334:	00000751 	.word	0x00000751
     338:	20000888 	.word	0x20000888
     33c:	00002595 	.word	0x00002595
     340:	00006cd1 	.word	0x00006cd1
     344:	000088c1 	.word	0x000088c1
     348:	b020c49c 	.word	0xb020c49c
     34c:	3f916872 	.word	0x3f916872
     350:	00007bf9 	.word	0x00007bf9
     354:	00008965 	.word	0x00008965
     358:	00006a91 	.word	0x00006a91
     35c:	00006311 	.word	0x00006311
     360:	000066b1 	.word	0x000066b1
     364:	000062e9 	.word	0x000062e9
     368:	0000638d 	.word	0x0000638d

0000036c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     36c:	b5f0      	push	{r4, r5, r6, r7, lr}
     36e:	46c6      	mov	lr, r8
     370:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     372:	0080      	lsls	r0, r0, #2
     374:	4b0e      	ldr	r3, [pc, #56]	; (3b0 <_tcc_interrupt_handler+0x44>)
     376:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     378:	683b      	ldr	r3, [r7, #0]
     37a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     37e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     380:	4013      	ands	r3, r2
     382:	401e      	ands	r6, r3
     384:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     386:	4b0b      	ldr	r3, [pc, #44]	; (3b4 <_tcc_interrupt_handler+0x48>)
     388:	4698      	mov	r8, r3
     38a:	e002      	b.n	392 <_tcc_interrupt_handler+0x26>
     38c:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     38e:	2c30      	cmp	r4, #48	; 0x30
     390:	d00a      	beq.n	3a8 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     392:	4643      	mov	r3, r8
     394:	58e5      	ldr	r5, [r4, r3]
     396:	4235      	tst	r5, r6
     398:	d0f8      	beq.n	38c <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     39a:	193b      	adds	r3, r7, r4
     39c:	685b      	ldr	r3, [r3, #4]
     39e:	0038      	movs	r0, r7
     3a0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     3a2:	683b      	ldr	r3, [r7, #0]
     3a4:	62dd      	str	r5, [r3, #44]	; 0x2c
     3a6:	e7f1      	b.n	38c <_tcc_interrupt_handler+0x20>
		}
	}
}
     3a8:	bc04      	pop	{r2}
     3aa:	4690      	mov	r8, r2
     3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3ae:	46c0      	nop			; (mov r8, r8)
     3b0:	20000968 	.word	0x20000968
     3b4:	00008acc 	.word	0x00008acc

000003b8 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     3b8:	b510      	push	{r4, lr}
     3ba:	2000      	movs	r0, #0
     3bc:	4b01      	ldr	r3, [pc, #4]	; (3c4 <TCC0_Handler+0xc>)
     3be:	4798      	blx	r3
     3c0:	bd10      	pop	{r4, pc}
     3c2:	46c0      	nop			; (mov r8, r8)
     3c4:	0000036d 	.word	0x0000036d

000003c8 <TCC1_Handler>:
     3c8:	b510      	push	{r4, lr}
     3ca:	2001      	movs	r0, #1
     3cc:	4b01      	ldr	r3, [pc, #4]	; (3d4 <TCC1_Handler+0xc>)
     3ce:	4798      	blx	r3
     3d0:	bd10      	pop	{r4, pc}
     3d2:	46c0      	nop			; (mov r8, r8)
     3d4:	0000036d 	.word	0x0000036d

000003d8 <TCC2_Handler>:
     3d8:	b510      	push	{r4, lr}
     3da:	2002      	movs	r0, #2
     3dc:	4b01      	ldr	r3, [pc, #4]	; (3e4 <TCC2_Handler+0xc>)
     3de:	4798      	blx	r3
     3e0:	bd10      	pop	{r4, pc}
     3e2:	46c0      	nop			; (mov r8, r8)
     3e4:	0000036d 	.word	0x0000036d

000003e8 <usart_write_callback>:

}
void usart_write_callback(struct usart_module *const usart_module)
{
	//port_pin_toggle_output_level(LED_0_PIN);
}
     3e8:	4770      	bx	lr
	...

000003ec <usart_read_callback>:
{
     3ec:	b510      	push	{r4, lr}
     3ee:	0004      	movs	r4, r0
	printf("Hello world!");
     3f0:	4804      	ldr	r0, [pc, #16]	; (404 <usart_read_callback+0x18>)
     3f2:	4b05      	ldr	r3, [pc, #20]	; (408 <usart_read_callback+0x1c>)
     3f4:	4798      	blx	r3
	usart_read_buffer_job( usart_instance,
     3f6:	2205      	movs	r2, #5
     3f8:	4904      	ldr	r1, [pc, #16]	; (40c <usart_read_callback+0x20>)
     3fa:	0020      	movs	r0, r4
     3fc:	4b04      	ldr	r3, [pc, #16]	; (410 <usart_read_callback+0x24>)
     3fe:	4798      	blx	r3
}
     400:	bd10      	pop	{r4, pc}
     402:	46c0      	nop			; (mov r8, r8)
     404:	00008b00 	.word	0x00008b00
     408:	00003e91 	.word	0x00003e91
     40c:	20000960 	.word	0x20000960
     410:	000017f9 	.word	0x000017f9

00000414 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     414:	b570      	push	{r4, r5, r6, lr}
     416:	b082      	sub	sp, #8
     418:	0005      	movs	r5, r0
     41a:	000e      	movs	r6, r1
	uint16_t temp = 0;
     41c:	2200      	movs	r2, #0
     41e:	466b      	mov	r3, sp
     420:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     422:	4c06      	ldr	r4, [pc, #24]	; (43c <usart_serial_getchar+0x28>)
     424:	466b      	mov	r3, sp
     426:	1d99      	adds	r1, r3, #6
     428:	0028      	movs	r0, r5
     42a:	47a0      	blx	r4
     42c:	2800      	cmp	r0, #0
     42e:	d1f9      	bne.n	424 <usart_serial_getchar+0x10>

	*c = temp;
     430:	466b      	mov	r3, sp
     432:	3306      	adds	r3, #6
     434:	881b      	ldrh	r3, [r3, #0]
     436:	7033      	strb	r3, [r6, #0]
}
     438:	b002      	add	sp, #8
     43a:	bd70      	pop	{r4, r5, r6, pc}
     43c:	00001689 	.word	0x00001689

00000440 <usart_serial_putchar>:
{
     440:	b570      	push	{r4, r5, r6, lr}
     442:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     444:	b28c      	uxth	r4, r1
     446:	4e03      	ldr	r6, [pc, #12]	; (454 <usart_serial_putchar+0x14>)
     448:	0021      	movs	r1, r4
     44a:	0028      	movs	r0, r5
     44c:	47b0      	blx	r6
     44e:	2800      	cmp	r0, #0
     450:	d1fa      	bne.n	448 <usart_serial_putchar+0x8>
}
     452:	bd70      	pop	{r4, r5, r6, pc}
     454:	0000165d 	.word	0x0000165d

00000458 <artist_ultrasonic_tc_configure>:
void artist_ultrasonic_tc_configure() {
     458:	b510      	push	{r4, lr}
     45a:	b08e      	sub	sp, #56	; 0x38
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     45c:	aa01      	add	r2, sp, #4
     45e:	2300      	movs	r3, #0
     460:	2100      	movs	r1, #0
     462:	7093      	strb	r3, [r2, #2]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     464:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     466:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     468:	2000      	movs	r0, #0
     46a:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     46c:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     46e:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     470:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     472:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     474:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     476:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     478:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     47a:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     47c:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     47e:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
     480:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     482:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     484:	8593      	strh	r3, [r2, #44]	; 0x2c
	config.clock_source = GCLK_GENERATOR_3;
     486:	3303      	adds	r3, #3
     488:	7013      	strb	r3, [r2, #0]
	config.clock_prescaler = TC_CLOCK_PRESCALER_DIV8;
     48a:	23c0      	movs	r3, #192	; 0xc0
     48c:	009b      	lsls	r3, r3, #2
     48e:	8093      	strh	r3, [r2, #4]
	config.enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = true;
     490:	2301      	movs	r3, #1
     492:	72d3      	strb	r3, [r2, #11]
	tc_init(&(artist_front.tc_instance_ultrasonic), TC3, &config);
     494:	4c07      	ldr	r4, [pc, #28]	; (4b4 <artist_ultrasonic_tc_configure+0x5c>)
     496:	4908      	ldr	r1, [pc, #32]	; (4b8 <artist_ultrasonic_tc_configure+0x60>)
     498:	0020      	movs	r0, r4
     49a:	4b08      	ldr	r3, [pc, #32]	; (4bc <artist_ultrasonic_tc_configure+0x64>)
     49c:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     49e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     4a0:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     4a2:	b25b      	sxtb	r3, r3
     4a4:	2b00      	cmp	r3, #0
     4a6:	dbfb      	blt.n	4a0 <artist_ultrasonic_tc_configure+0x48>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     4a8:	8813      	ldrh	r3, [r2, #0]
     4aa:	2102      	movs	r1, #2
     4ac:	430b      	orrs	r3, r1
     4ae:	8013      	strh	r3, [r2, #0]
}
     4b0:	b00e      	add	sp, #56	; 0x38
     4b2:	bd10      	pop	{r4, pc}
     4b4:	20000888 	.word	0x20000888
     4b8:	42002c00 	.word	0x42002c00
     4bc:	00002359 	.word	0x00002359

000004c0 <configure_usart_callbacks>:


void configure_usart_callbacks(struct usart_module * usart_instance)
{
     4c0:	b570      	push	{r4, r5, r6, lr}
     4c2:	0004      	movs	r4, r0
	//! [setup_register_callbacks]
	usart_register_callback(usart_instance,
     4c4:	2200      	movs	r2, #0
     4c6:	4906      	ldr	r1, [pc, #24]	; (4e0 <configure_usart_callbacks+0x20>)
     4c8:	4d06      	ldr	r5, [pc, #24]	; (4e4 <configure_usart_callbacks+0x24>)
     4ca:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	
	usart_register_callback(usart_instance,
     4cc:	2201      	movs	r2, #1
     4ce:	4906      	ldr	r1, [pc, #24]	; (4e8 <configure_usart_callbacks+0x28>)
     4d0:	0020      	movs	r0, r4
     4d2:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     4d4:	2231      	movs	r2, #49	; 0x31
     4d6:	5ca3      	ldrb	r3, [r4, r2]
     4d8:	2103      	movs	r1, #3
     4da:	430b      	orrs	r3, r1
     4dc:	54a3      	strb	r3, [r4, r2]

	//! [setup_enable_callbacks]
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
	//! [setup_enable_callbacks]
}
     4de:	bd70      	pop	{r4, r5, r6, pc}
     4e0:	000003e9 	.word	0x000003e9
     4e4:	000017e1 	.word	0x000017e1
     4e8:	000003ed 	.word	0x000003ed

000004ec <artist_usart_configure>:

void artist_usart_configure(struct usart_module * usart_instance) {
     4ec:	b570      	push	{r4, r5, r6, lr}
     4ee:	b090      	sub	sp, #64	; 0x40
     4f0:	0004      	movs	r4, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     4f2:	2380      	movs	r3, #128	; 0x80
     4f4:	05db      	lsls	r3, r3, #23
     4f6:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     4f8:	2300      	movs	r3, #0
     4fa:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     4fc:	22ff      	movs	r2, #255	; 0xff
     4fe:	4669      	mov	r1, sp
     500:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     502:	2200      	movs	r2, #0
     504:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     506:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
     508:	2196      	movs	r1, #150	; 0x96
     50a:	0189      	lsls	r1, r1, #6
     50c:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
     50e:	2101      	movs	r1, #1
     510:	2024      	movs	r0, #36	; 0x24
     512:	466d      	mov	r5, sp
     514:	5429      	strb	r1, [r5, r0]
	config->transmitter_enable = true;
     516:	3001      	adds	r0, #1
     518:	5429      	strb	r1, [r5, r0]
	config->clock_polarity_inverted = false;
     51a:	3125      	adds	r1, #37	; 0x25
     51c:	546b      	strb	r3, [r5, r1]
	config->use_external_clock = false;
     51e:	3101      	adds	r1, #1
     520:	546b      	strb	r3, [r5, r1]
	config->ext_clock_freq   = 0;
     522:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     524:	3105      	adds	r1, #5
     526:	546b      	strb	r3, [r5, r1]
	config->generator_source = GCLK_GENERATOR_0;
     528:	3101      	adds	r1, #1
     52a:	546b      	strb	r3, [r5, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     52c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     52e:	822b      	strh	r3, [r5, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     530:	76eb      	strb	r3, [r5, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     532:	762a      	strb	r2, [r5, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     534:	772a      	strb	r2, [r5, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     536:	766a      	strb	r2, [r5, #25]
	config->receive_pulse_length                    = 19;
     538:	2313      	movs	r3, #19
     53a:	76ab      	strb	r3, [r5, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     53c:	776a      	strb	r2, [r5, #29]
	struct usart_config config;
	usart_get_config_defaults(&config);
	config.baudrate = CONF_ARTIST_BAUDRATE;
	config.mux_setting	= EDBG_CDC_SERCOM_MUX_SETTING;
     53e:	2380      	movs	r3, #128	; 0x80
     540:	035b      	lsls	r3, r3, #13
     542:	9303      	str	r3, [sp, #12]
	config.pinmux_pad0	= EDBG_CDC_SERCOM_PINMUX_PAD0;
     544:	4b1e      	ldr	r3, [pc, #120]	; (5c0 <artist_usart_configure+0xd4>)
     546:	930c      	str	r3, [sp, #48]	; 0x30
	config.pinmux_pad1	= EDBG_CDC_SERCOM_PINMUX_PAD1;
     548:	4b1e      	ldr	r3, [pc, #120]	; (5c4 <artist_usart_configure+0xd8>)
     54a:	930d      	str	r3, [sp, #52]	; 0x34
	config.pinmux_pad2	= EDBG_CDC_SERCOM_PINMUX_PAD2;
     54c:	2301      	movs	r3, #1
     54e:	425b      	negs	r3, r3
     550:	930e      	str	r3, [sp, #56]	; 0x38
	config.pinmux_pad3	= EDBG_CDC_SERCOM_PINMUX_PAD3;
     552:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(usart_instance, EDBG_CDC_MODULE, &config) != STATUS_OK);
     554:	4e1c      	ldr	r6, [pc, #112]	; (5c8 <artist_usart_configure+0xdc>)
     556:	4d1d      	ldr	r5, [pc, #116]	; (5cc <artist_usart_configure+0xe0>)
     558:	466a      	mov	r2, sp
     55a:	0031      	movs	r1, r6
     55c:	0020      	movs	r0, r4
     55e:	47a8      	blx	r5
     560:	2800      	cmp	r0, #0
     562:	d1f9      	bne.n	558 <artist_usart_configure+0x6c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     564:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     566:	0028      	movs	r0, r5
     568:	4b19      	ldr	r3, [pc, #100]	; (5d0 <artist_usart_configure+0xe4>)
     56a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     56c:	231f      	movs	r3, #31
     56e:	4018      	ands	r0, r3
     570:	3b1e      	subs	r3, #30
     572:	4083      	lsls	r3, r0
     574:	4a17      	ldr	r2, [pc, #92]	; (5d4 <artist_usart_configure+0xe8>)
     576:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     578:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     57a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     57c:	2b00      	cmp	r3, #0
     57e:	d1fc      	bne.n	57a <artist_usart_configure+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     580:	682b      	ldr	r3, [r5, #0]
     582:	2202      	movs	r2, #2
     584:	4313      	orrs	r3, r2
     586:	602b      	str	r3, [r5, #0]
	
	
	usart_enable(usart_instance);
	configure_usart_callbacks(usart_instance);
     588:	0020      	movs	r0, r4
     58a:	4b13      	ldr	r3, [pc, #76]	; (5d8 <artist_usart_configure+0xec>)
     58c:	4798      	blx	r3
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     58e:	4b13      	ldr	r3, [pc, #76]	; (5dc <artist_usart_configure+0xf0>)
     590:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     592:	4a13      	ldr	r2, [pc, #76]	; (5e0 <artist_usart_configure+0xf4>)
     594:	4b13      	ldr	r3, [pc, #76]	; (5e4 <artist_usart_configure+0xf8>)
     596:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     598:	4a13      	ldr	r2, [pc, #76]	; (5e8 <artist_usart_configure+0xfc>)
     59a:	4b14      	ldr	r3, [pc, #80]	; (5ec <artist_usart_configure+0x100>)
     59c:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     59e:	466a      	mov	r2, sp
     5a0:	4909      	ldr	r1, [pc, #36]	; (5c8 <artist_usart_configure+0xdc>)
     5a2:	0020      	movs	r0, r4
     5a4:	4b09      	ldr	r3, [pc, #36]	; (5cc <artist_usart_configure+0xe0>)
     5a6:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     5a8:	4d11      	ldr	r5, [pc, #68]	; (5f0 <artist_usart_configure+0x104>)
     5aa:	682b      	ldr	r3, [r5, #0]
     5ac:	6898      	ldr	r0, [r3, #8]
     5ae:	2100      	movs	r1, #0
     5b0:	4c10      	ldr	r4, [pc, #64]	; (5f4 <artist_usart_configure+0x108>)
     5b2:	47a0      	blx	r4
	setbuf(stdin, NULL);
     5b4:	682b      	ldr	r3, [r5, #0]
     5b6:	6858      	ldr	r0, [r3, #4]
     5b8:	2100      	movs	r1, #0
     5ba:	47a0      	blx	r4
	
	stdio_serial_init(usart_instance, EDBG_CDC_MODULE, &config);
}
     5bc:	b010      	add	sp, #64	; 0x40
     5be:	bd70      	pop	{r4, r5, r6, pc}
     5c0:	00040003 	.word	0x00040003
     5c4:	00050003 	.word	0x00050003
     5c8:	42000800 	.word	0x42000800
     5cc:	0000131d 	.word	0x0000131d
     5d0:	00000ed5 	.word	0x00000ed5
     5d4:	e000e100 	.word	0xe000e100
     5d8:	000004c1 	.word	0x000004c1
     5dc:	200009e4 	.word	0x200009e4
     5e0:	00000441 	.word	0x00000441
     5e4:	200009e0 	.word	0x200009e0
     5e8:	00000415 	.word	0x00000415
     5ec:	200009dc 	.word	0x200009dc
     5f0:	2000000c 	.word	0x2000000c
     5f4:	00003f99 	.word	0x00003f99

000005f8 <artist_ultrasonic_update>:
	tcc_init(&(artist->tcc_instance), TCC0, &config);
	tcc_enable(&(artist->tcc_instance));
	*/
}

void artist_ultrasonic_update() {
     5f8:	b570      	push	{r4, r5, r6, lr}
	artist_front.center_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_center));
     5fa:	4e09      	ldr	r6, [pc, #36]	; (620 <artist_ultrasonic_update+0x28>)
     5fc:	0030      	movs	r0, r6
     5fe:	4d09      	ldr	r5, [pc, #36]	; (624 <artist_ultrasonic_update+0x2c>)
     600:	47a8      	blx	r5
     602:	0034      	movs	r4, r6
     604:	3cb4      	subs	r4, #180	; 0xb4
     606:	61b0      	str	r0, [r6, #24]
	artist_front.right_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_right));
     608:	0020      	movs	r0, r4
     60a:	30c4      	adds	r0, #196	; 0xc4
     60c:	47a8      	blx	r5
     60e:	23d4      	movs	r3, #212	; 0xd4
     610:	50e0      	str	r0, [r4, r3]
	artist_front.left_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_left));
     612:	0020      	movs	r0, r4
     614:	30bc      	adds	r0, #188	; 0xbc
     616:	47a8      	blx	r5
     618:	23d0      	movs	r3, #208	; 0xd0
     61a:	50e0      	str	r0, [r4, r3]
}
     61c:	bd70      	pop	{r4, r5, r6, pc}
     61e:	46c0      	nop			; (mov r8, r8)
     620:	2000093c 	.word	0x2000093c
     624:	000001c1 	.word	0x000001c1

00000628 <callbacks>:
}

/*
about 400Hz
*/
void callbacks (void) {
     628:	b510      	push	{r4, lr}
	// [ultra sonic]
	static uint16_t ultrasonic_counter = 0;
	ultrasonic_counter ++;
     62a:	4a07      	ldr	r2, [pc, #28]	; (648 <callbacks+0x20>)
     62c:	8813      	ldrh	r3, [r2, #0]
     62e:	3301      	adds	r3, #1
     630:	b29b      	uxth	r3, r3
     632:	8013      	strh	r3, [r2, #0]
	if (ultrasonic_counter > 20) {
     634:	2b14      	cmp	r3, #20
     636:	d800      	bhi.n	63a <callbacks+0x12>
		artist_ultrasonic_update();
		ultrasonic_counter = 0; 
	}
	// ! [ultra sonic]
}
     638:	bd10      	pop	{r4, pc}
		artist_ultrasonic_update();
     63a:	4b04      	ldr	r3, [pc, #16]	; (64c <callbacks+0x24>)
     63c:	4798      	blx	r3
		ultrasonic_counter = 0; 
     63e:	2200      	movs	r2, #0
     640:	4b01      	ldr	r3, [pc, #4]	; (648 <callbacks+0x20>)
     642:	801a      	strh	r2, [r3, #0]
}
     644:	e7f8      	b.n	638 <callbacks+0x10>
     646:	46c0      	nop			; (mov r8, r8)
     648:	200001f8 	.word	0x200001f8
     64c:	000005f9 	.word	0x000005f9

00000650 <artist_scheduler_tc_configure>:
void artist_scheduler_tc_configure() {
     650:	b510      	push	{r4, lr}
     652:	b08e      	sub	sp, #56	; 0x38
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     654:	aa01      	add	r2, sp, #4
     656:	2300      	movs	r3, #0
     658:	2100      	movs	r1, #0
     65a:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     65c:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     65e:	2000      	movs	r0, #0
     660:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     662:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     664:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     666:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     668:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     66a:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     66c:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     66e:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     670:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     672:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     674:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     676:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
     678:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     67a:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     67c:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
     67e:	3304      	adds	r3, #4
     680:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source = GCLK_GENERATOR_3;
     682:	3b01      	subs	r3, #1
     684:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV256; //
     686:	23c0      	movs	r3, #192	; 0xc0
     688:	00db      	lsls	r3, r3, #3
     68a:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period = 70;
     68c:	2146      	movs	r1, #70	; 0x46
     68e:	2329      	movs	r3, #41	; 0x29
     690:	54d1      	strb	r1, [r2, r3]
	tc_init(&(artist_front.tc_instance_timer), TC4, &config_tc);
     692:	4c08      	ldr	r4, [pc, #32]	; (6b4 <artist_scheduler_tc_configure+0x64>)
     694:	4908      	ldr	r1, [pc, #32]	; (6b8 <artist_scheduler_tc_configure+0x68>)
     696:	0020      	movs	r0, r4
     698:	4b08      	ldr	r3, [pc, #32]	; (6bc <artist_scheduler_tc_configure+0x6c>)
     69a:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     69c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     69e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     6a0:	b25b      	sxtb	r3, r3
     6a2:	2b00      	cmp	r3, #0
     6a4:	dbfb      	blt.n	69e <artist_scheduler_tc_configure+0x4e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     6a6:	8813      	ldrh	r3, [r2, #0]
     6a8:	2102      	movs	r1, #2
     6aa:	430b      	orrs	r3, r1
     6ac:	8013      	strh	r3, [r2, #0]
}
     6ae:	b00e      	add	sp, #56	; 0x38
     6b0:	bd10      	pop	{r4, pc}
     6b2:	46c0      	nop			; (mov r8, r8)
     6b4:	200008a4 	.word	0x200008a4
     6b8:	42003000 	.word	0x42003000
     6bc:	00002359 	.word	0x00002359

000006c0 <artist_configure_tc_callbacks>:
void artist_configure_tc_callbacks(void)
{
     6c0:	b510      	push	{r4, lr}
	tc_register_callback(&(artist_front.tc_instance_timer), callbacks ,
     6c2:	4c0d      	ldr	r4, [pc, #52]	; (6f8 <artist_configure_tc_callbacks+0x38>)
     6c4:	2200      	movs	r2, #0
     6c6:	490d      	ldr	r1, [pc, #52]	; (6fc <artist_configure_tc_callbacks+0x3c>)
     6c8:	0020      	movs	r0, r4
     6ca:	4b0d      	ldr	r3, [pc, #52]	; (700 <artist_configure_tc_callbacks+0x40>)
     6cc:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     6ce:	6820      	ldr	r0, [r4, #0]
     6d0:	3c1c      	subs	r4, #28
     6d2:	4b0c      	ldr	r3, [pc, #48]	; (704 <artist_configure_tc_callbacks+0x44>)
     6d4:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     6d6:	4b0c      	ldr	r3, [pc, #48]	; (708 <artist_configure_tc_callbacks+0x48>)
     6d8:	5c1a      	ldrb	r2, [r3, r0]
     6da:	231f      	movs	r3, #31
     6dc:	4013      	ands	r3, r2
     6de:	2201      	movs	r2, #1
     6e0:	0011      	movs	r1, r2
     6e2:	4099      	lsls	r1, r3
     6e4:	4b09      	ldr	r3, [pc, #36]	; (70c <artist_configure_tc_callbacks+0x4c>)
     6e6:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     6e8:	2135      	movs	r1, #53	; 0x35
     6ea:	5c63      	ldrb	r3, [r4, r1]
     6ec:	2001      	movs	r0, #1
     6ee:	4303      	orrs	r3, r0
     6f0:	5463      	strb	r3, [r4, r1]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     6f2:	69e3      	ldr	r3, [r4, #28]
     6f4:	735a      	strb	r2, [r3, #13]
	TC_CALLBACK_OVERFLOW);
	
	
	tc_enable_callback(&(artist_front.tc_instance_timer), TC_CALLBACK_OVERFLOW);
     6f6:	bd10      	pop	{r4, pc}
     6f8:	200008a4 	.word	0x200008a4
     6fc:	00000629 	.word	0x00000629
     700:	00002259 	.word	0x00002259
     704:	00002321 	.word	0x00002321
     708:	00008afc 	.word	0x00008afc
     70c:	e000e100 	.word	0xe000e100

00000710 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     710:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     712:	2000      	movs	r0, #0
     714:	4b08      	ldr	r3, [pc, #32]	; (738 <delay_init+0x28>)
     716:	4798      	blx	r3
     718:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     71a:	4c08      	ldr	r4, [pc, #32]	; (73c <delay_init+0x2c>)
     71c:	21fa      	movs	r1, #250	; 0xfa
     71e:	0089      	lsls	r1, r1, #2
     720:	47a0      	blx	r4
     722:	4b07      	ldr	r3, [pc, #28]	; (740 <delay_init+0x30>)
     724:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     726:	4907      	ldr	r1, [pc, #28]	; (744 <delay_init+0x34>)
     728:	0028      	movs	r0, r5
     72a:	47a0      	blx	r4
     72c:	4b06      	ldr	r3, [pc, #24]	; (748 <delay_init+0x38>)
     72e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     730:	2205      	movs	r2, #5
     732:	4b06      	ldr	r3, [pc, #24]	; (74c <delay_init+0x3c>)
     734:	601a      	str	r2, [r3, #0]
}
     736:	bd70      	pop	{r4, r5, r6, pc}
     738:	00001fe9 	.word	0x00001fe9
     73c:	00005f5d 	.word	0x00005f5d
     740:	20000000 	.word	0x20000000
     744:	000f4240 	.word	0x000f4240
     748:	20000004 	.word	0x20000004
     74c:	e000e010 	.word	0xe000e010

00000750 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     750:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     752:	4b08      	ldr	r3, [pc, #32]	; (774 <delay_cycles_us+0x24>)
     754:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     756:	4a08      	ldr	r2, [pc, #32]	; (778 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     758:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     75a:	2180      	movs	r1, #128	; 0x80
     75c:	0249      	lsls	r1, r1, #9
	while (n--) {
     75e:	3801      	subs	r0, #1
     760:	d307      	bcc.n	772 <delay_cycles_us+0x22>
	if (n > 0) {
     762:	2c00      	cmp	r4, #0
     764:	d0fb      	beq.n	75e <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     766:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     768:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     76a:	6813      	ldr	r3, [r2, #0]
     76c:	420b      	tst	r3, r1
     76e:	d0fc      	beq.n	76a <delay_cycles_us+0x1a>
     770:	e7f5      	b.n	75e <delay_cycles_us+0xe>
	}
}
     772:	bd30      	pop	{r4, r5, pc}
     774:	20000004 	.word	0x20000004
     778:	e000e010 	.word	0xe000e010

0000077c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     77c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     77e:	4b08      	ldr	r3, [pc, #32]	; (7a0 <delay_cycles_ms+0x24>)
     780:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     782:	4a08      	ldr	r2, [pc, #32]	; (7a4 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     784:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     786:	2180      	movs	r1, #128	; 0x80
     788:	0249      	lsls	r1, r1, #9
	while (n--) {
     78a:	3801      	subs	r0, #1
     78c:	d307      	bcc.n	79e <delay_cycles_ms+0x22>
	if (n > 0) {
     78e:	2c00      	cmp	r4, #0
     790:	d0fb      	beq.n	78a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     792:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     794:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     796:	6813      	ldr	r3, [r2, #0]
     798:	420b      	tst	r3, r1
     79a:	d0fc      	beq.n	796 <delay_cycles_ms+0x1a>
     79c:	e7f5      	b.n	78a <delay_cycles_ms+0xe>
	}
}
     79e:	bd30      	pop	{r4, r5, pc}
     7a0:	20000000 	.word	0x20000000
     7a4:	e000e010 	.word	0xe000e010

000007a8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     7a8:	4b0c      	ldr	r3, [pc, #48]	; (7dc <cpu_irq_enter_critical+0x34>)
     7aa:	681b      	ldr	r3, [r3, #0]
     7ac:	2b00      	cmp	r3, #0
     7ae:	d106      	bne.n	7be <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     7b0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     7b4:	2b00      	cmp	r3, #0
     7b6:	d007      	beq.n	7c8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     7b8:	2200      	movs	r2, #0
     7ba:	4b09      	ldr	r3, [pc, #36]	; (7e0 <cpu_irq_enter_critical+0x38>)
     7bc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     7be:	4a07      	ldr	r2, [pc, #28]	; (7dc <cpu_irq_enter_critical+0x34>)
     7c0:	6813      	ldr	r3, [r2, #0]
     7c2:	3301      	adds	r3, #1
     7c4:	6013      	str	r3, [r2, #0]
}
     7c6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     7c8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     7ca:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     7ce:	2200      	movs	r2, #0
     7d0:	4b04      	ldr	r3, [pc, #16]	; (7e4 <cpu_irq_enter_critical+0x3c>)
     7d2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     7d4:	3201      	adds	r2, #1
     7d6:	4b02      	ldr	r3, [pc, #8]	; (7e0 <cpu_irq_enter_critical+0x38>)
     7d8:	701a      	strb	r2, [r3, #0]
     7da:	e7f0      	b.n	7be <cpu_irq_enter_critical+0x16>
     7dc:	200001fc 	.word	0x200001fc
     7e0:	20000200 	.word	0x20000200
     7e4:	20000008 	.word	0x20000008

000007e8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     7e8:	4b08      	ldr	r3, [pc, #32]	; (80c <cpu_irq_leave_critical+0x24>)
     7ea:	681a      	ldr	r2, [r3, #0]
     7ec:	3a01      	subs	r2, #1
     7ee:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     7f0:	681b      	ldr	r3, [r3, #0]
     7f2:	2b00      	cmp	r3, #0
     7f4:	d109      	bne.n	80a <cpu_irq_leave_critical+0x22>
     7f6:	4b06      	ldr	r3, [pc, #24]	; (810 <cpu_irq_leave_critical+0x28>)
     7f8:	781b      	ldrb	r3, [r3, #0]
     7fa:	2b00      	cmp	r3, #0
     7fc:	d005      	beq.n	80a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     7fe:	2201      	movs	r2, #1
     800:	4b04      	ldr	r3, [pc, #16]	; (814 <cpu_irq_leave_critical+0x2c>)
     802:	701a      	strb	r2, [r3, #0]
     804:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     808:	b662      	cpsie	i
	}
}
     80a:	4770      	bx	lr
     80c:	200001fc 	.word	0x200001fc
     810:	20000200 	.word	0x20000200
     814:	20000008 	.word	0x20000008

00000818 <system_board_init>:




void system_board_init(void)
{
     818:	b5f0      	push	{r4, r5, r6, r7, lr}
     81a:	46c6      	mov	lr, r8
     81c:	b500      	push	{lr}
     81e:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
     820:	ac01      	add	r4, sp, #4
     822:	2601      	movs	r6, #1
     824:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     826:	2700      	movs	r7, #0
     828:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     82a:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     82c:	0021      	movs	r1, r4
     82e:	2013      	movs	r0, #19
     830:	4d27      	ldr	r5, [pc, #156]	; (8d0 <system_board_init+0xb8>)
     832:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     834:	4b27      	ldr	r3, [pc, #156]	; (8d4 <system_board_init+0xbc>)
     836:	4698      	mov	r8, r3
     838:	2380      	movs	r3, #128	; 0x80
     83a:	031b      	lsls	r3, r3, #12
     83c:	4642      	mov	r2, r8
     83e:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     840:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     842:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     844:	0021      	movs	r1, r4
     846:	201c      	movs	r0, #28
     848:	47a8      	blx	r5
	config->input_pull = PORT_PIN_PULL_UP;
     84a:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     84c:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     84e:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     850:	0021      	movs	r1, r4
     852:	2052      	movs	r0, #82	; 0x52
     854:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     856:	0021      	movs	r1, r4
     858:	203e      	movs	r0, #62	; 0x3e
     85a:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     85c:	0021      	movs	r1, r4
     85e:	203f      	movs	r0, #63	; 0x3f
     860:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     862:	0021      	movs	r1, r4
     864:	202f      	movs	r0, #47	; 0x2f
     866:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     868:	0021      	movs	r1, r4
     86a:	2014      	movs	r0, #20
     86c:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     86e:	2280      	movs	r2, #128	; 0x80
     870:	02d2      	lsls	r2, r2, #11
     872:	4b19      	ldr	r3, [pc, #100]	; (8d8 <system_board_init+0xc0>)
     874:	619a      	str	r2, [r3, #24]
     876:	4b19      	ldr	r3, [pc, #100]	; (8dc <system_board_init+0xc4>)
     878:	2280      	movs	r2, #128	; 0x80
     87a:	05d2      	lsls	r2, r2, #23
     87c:	619a      	str	r2, [r3, #24]
     87e:	2280      	movs	r2, #128	; 0x80
     880:	0612      	lsls	r2, r2, #24
     882:	619a      	str	r2, [r3, #24]
     884:	2280      	movs	r2, #128	; 0x80
     886:	0212      	lsls	r2, r2, #8
     888:	619a      	str	r2, [r3, #24]
     88a:	2380      	movs	r3, #128	; 0x80
     88c:	035b      	lsls	r3, r3, #13
     88e:	4642      	mov	r2, r8
     890:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     892:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     894:	0021      	movs	r1, r4
     896:	2053      	movs	r0, #83	; 0x53
     898:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     89a:	4a11      	ldr	r2, [pc, #68]	; (8e0 <system_board_init+0xc8>)
     89c:	6a11      	ldr	r1, [r2, #32]
     89e:	2380      	movs	r3, #128	; 0x80
     8a0:	039b      	lsls	r3, r3, #14
     8a2:	430b      	orrs	r3, r1
     8a4:	6213      	str	r3, [r2, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     8a6:	2204      	movs	r2, #4
     8a8:	4b0e      	ldr	r3, [pc, #56]	; (8e4 <system_board_init+0xcc>)
     8aa:	801a      	strh	r2, [r3, #0]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     8ac:	466b      	mov	r3, sp
     8ae:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     8b0:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     8b2:	2305      	movs	r3, #5
     8b4:	466a      	mov	r2, sp
     8b6:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     8b8:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     8ba:	4669      	mov	r1, sp
     8bc:	2009      	movs	r0, #9
     8be:	4c0a      	ldr	r4, [pc, #40]	; (8e8 <system_board_init+0xd0>)
     8c0:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     8c2:	4669      	mov	r1, sp
     8c4:	200c      	movs	r0, #12
     8c6:	47a0      	blx	r4
#endif

}
     8c8:	b002      	add	sp, #8
     8ca:	bc04      	pop	{r2}
     8cc:	4690      	mov	r8, r2
     8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8d0:	00000a7d 	.word	0x00000a7d
     8d4:	41004400 	.word	0x41004400
     8d8:	41004500 	.word	0x41004500
     8dc:	41004480 	.word	0x41004480
     8e0:	40000400 	.word	0x40000400
     8e4:	42005400 	.word	0x42005400
     8e8:	000021f9 	.word	0x000021f9

000008ec <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     8ec:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     8ee:	2a00      	cmp	r2, #0
     8f0:	d001      	beq.n	8f6 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     8f2:	0018      	movs	r0, r3
     8f4:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     8f6:	008b      	lsls	r3, r1, #2
     8f8:	4a06      	ldr	r2, [pc, #24]	; (914 <extint_register_callback+0x28>)
     8fa:	589b      	ldr	r3, [r3, r2]
     8fc:	2b00      	cmp	r3, #0
     8fe:	d003      	beq.n	908 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     900:	4283      	cmp	r3, r0
     902:	d005      	beq.n	910 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     904:	231d      	movs	r3, #29
     906:	e7f4      	b.n	8f2 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     908:	0089      	lsls	r1, r1, #2
     90a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     90c:	2300      	movs	r3, #0
     90e:	e7f0      	b.n	8f2 <extint_register_callback+0x6>
		return STATUS_OK;
     910:	2300      	movs	r3, #0
     912:	e7ee      	b.n	8f2 <extint_register_callback+0x6>
     914:	20000978 	.word	0x20000978

00000918 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     918:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     91a:	2200      	movs	r2, #0
     91c:	4b10      	ldr	r3, [pc, #64]	; (960 <EIC_Handler+0x48>)
     91e:	701a      	strb	r2, [r3, #0]
     920:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     922:	4910      	ldr	r1, [pc, #64]	; (964 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     924:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     926:	4e10      	ldr	r6, [pc, #64]	; (968 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     928:	4c0d      	ldr	r4, [pc, #52]	; (960 <EIC_Handler+0x48>)
     92a:	e00a      	b.n	942 <EIC_Handler+0x2a>
		return eics[eic_index];
     92c:	490d      	ldr	r1, [pc, #52]	; (964 <EIC_Handler+0x4c>)
     92e:	e008      	b.n	942 <EIC_Handler+0x2a>
     930:	7823      	ldrb	r3, [r4, #0]
     932:	3301      	adds	r3, #1
     934:	b2db      	uxtb	r3, r3
     936:	7023      	strb	r3, [r4, #0]
     938:	2b0f      	cmp	r3, #15
     93a:	d810      	bhi.n	95e <EIC_Handler+0x46>
		return NULL;
     93c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     93e:	2b1f      	cmp	r3, #31
     940:	d9f4      	bls.n	92c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     942:	0028      	movs	r0, r5
     944:	4018      	ands	r0, r3
     946:	2201      	movs	r2, #1
     948:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     94a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     94c:	4210      	tst	r0, r2
     94e:	d0ef      	beq.n	930 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     950:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     952:	009b      	lsls	r3, r3, #2
     954:	599b      	ldr	r3, [r3, r6]
     956:	2b00      	cmp	r3, #0
     958:	d0ea      	beq.n	930 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     95a:	4798      	blx	r3
     95c:	e7e8      	b.n	930 <EIC_Handler+0x18>
			}
		}
	}
}
     95e:	bd70      	pop	{r4, r5, r6, pc}
     960:	20000974 	.word	0x20000974
     964:	40001800 	.word	0x40001800
     968:	20000978 	.word	0x20000978

0000096c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     96c:	4a04      	ldr	r2, [pc, #16]	; (980 <_extint_enable+0x14>)
     96e:	7813      	ldrb	r3, [r2, #0]
     970:	2102      	movs	r1, #2
     972:	430b      	orrs	r3, r1
     974:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     976:	7853      	ldrb	r3, [r2, #1]
     978:	b25b      	sxtb	r3, r3
     97a:	2b00      	cmp	r3, #0
     97c:	dbfb      	blt.n	976 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     97e:	4770      	bx	lr
     980:	40001800 	.word	0x40001800

00000984 <_system_extint_init>:
{
     984:	b500      	push	{lr}
     986:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     988:	4a12      	ldr	r2, [pc, #72]	; (9d4 <_system_extint_init+0x50>)
     98a:	6993      	ldr	r3, [r2, #24]
     98c:	2140      	movs	r1, #64	; 0x40
     98e:	430b      	orrs	r3, r1
     990:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     992:	a901      	add	r1, sp, #4
     994:	2300      	movs	r3, #0
     996:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     998:	2005      	movs	r0, #5
     99a:	4b0f      	ldr	r3, [pc, #60]	; (9d8 <_system_extint_init+0x54>)
     99c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     99e:	2005      	movs	r0, #5
     9a0:	4b0e      	ldr	r3, [pc, #56]	; (9dc <_system_extint_init+0x58>)
     9a2:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     9a4:	4a0e      	ldr	r2, [pc, #56]	; (9e0 <_system_extint_init+0x5c>)
     9a6:	7813      	ldrb	r3, [r2, #0]
     9a8:	2101      	movs	r1, #1
     9aa:	430b      	orrs	r3, r1
     9ac:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     9ae:	7853      	ldrb	r3, [r2, #1]
     9b0:	b25b      	sxtb	r3, r3
     9b2:	2b00      	cmp	r3, #0
     9b4:	dbfb      	blt.n	9ae <_system_extint_init+0x2a>
     9b6:	4b0b      	ldr	r3, [pc, #44]	; (9e4 <_system_extint_init+0x60>)
     9b8:	0019      	movs	r1, r3
     9ba:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     9bc:	2200      	movs	r2, #0
     9be:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     9c0:	4299      	cmp	r1, r3
     9c2:	d1fc      	bne.n	9be <_system_extint_init+0x3a>
     9c4:	2210      	movs	r2, #16
     9c6:	4b08      	ldr	r3, [pc, #32]	; (9e8 <_system_extint_init+0x64>)
     9c8:	601a      	str	r2, [r3, #0]
	_extint_enable();
     9ca:	4b08      	ldr	r3, [pc, #32]	; (9ec <_system_extint_init+0x68>)
     9cc:	4798      	blx	r3
}
     9ce:	b003      	add	sp, #12
     9d0:	bd00      	pop	{pc}
     9d2:	46c0      	nop			; (mov r8, r8)
     9d4:	40000400 	.word	0x40000400
     9d8:	00002101 	.word	0x00002101
     9dc:	00002075 	.word	0x00002075
     9e0:	40001800 	.word	0x40001800
     9e4:	20000978 	.word	0x20000978
     9e8:	e000e100 	.word	0xe000e100
     9ec:	0000096d 	.word	0x0000096d

000009f0 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     9f0:	2300      	movs	r3, #0
     9f2:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     9f4:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     9f6:	2201      	movs	r2, #1
     9f8:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     9fa:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     9fc:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     9fe:	3302      	adds	r3, #2
     a00:	72c3      	strb	r3, [r0, #11]
}
     a02:	4770      	bx	lr

00000a04 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     a04:	b5f0      	push	{r4, r5, r6, r7, lr}
     a06:	b083      	sub	sp, #12
     a08:	0005      	movs	r5, r0
     a0a:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a0c:	a901      	add	r1, sp, #4
     a0e:	2300      	movs	r3, #0
     a10:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     a12:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     a14:	7923      	ldrb	r3, [r4, #4]
     a16:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     a18:	7a23      	ldrb	r3, [r4, #8]
     a1a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     a1c:	7820      	ldrb	r0, [r4, #0]
     a1e:	4b15      	ldr	r3, [pc, #84]	; (a74 <extint_chan_set_config+0x70>)
     a20:	4798      	blx	r3
		return NULL;
     a22:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     a24:	2d1f      	cmp	r5, #31
     a26:	d800      	bhi.n	a2a <extint_chan_set_config+0x26>
		return eics[eic_index];
     a28:	4813      	ldr	r0, [pc, #76]	; (a78 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     a2a:	2207      	movs	r2, #7
     a2c:	402a      	ands	r2, r5
     a2e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     a30:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     a32:	7aa3      	ldrb	r3, [r4, #10]
     a34:	2b00      	cmp	r3, #0
     a36:	d001      	beq.n	a3c <extint_chan_set_config+0x38>
     a38:	2308      	movs	r3, #8
     a3a:	431f      	orrs	r7, r3
     a3c:	08eb      	lsrs	r3, r5, #3
     a3e:	009b      	lsls	r3, r3, #2
     a40:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     a42:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     a44:	260f      	movs	r6, #15
     a46:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     a48:	43b1      	bics	r1, r6
			(new_config << config_pos);
     a4a:	4097      	lsls	r7, r2
     a4c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     a4e:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     a50:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     a52:	7a63      	ldrb	r3, [r4, #9]
     a54:	2b00      	cmp	r3, #0
     a56:	d106      	bne.n	a66 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     a58:	6943      	ldr	r3, [r0, #20]
     a5a:	2201      	movs	r2, #1
     a5c:	40aa      	lsls	r2, r5
     a5e:	4393      	bics	r3, r2
     a60:	6143      	str	r3, [r0, #20]
	}
}
     a62:	b003      	add	sp, #12
     a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     a66:	6942      	ldr	r2, [r0, #20]
     a68:	2301      	movs	r3, #1
     a6a:	40ab      	lsls	r3, r5
     a6c:	4313      	orrs	r3, r2
     a6e:	6143      	str	r3, [r0, #20]
     a70:	e7f7      	b.n	a62 <extint_chan_set_config+0x5e>
     a72:	46c0      	nop			; (mov r8, r8)
     a74:	000021f9 	.word	0x000021f9
     a78:	40001800 	.word	0x40001800

00000a7c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     a7c:	b500      	push	{lr}
     a7e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a80:	ab01      	add	r3, sp, #4
     a82:	2280      	movs	r2, #128	; 0x80
     a84:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     a86:	780a      	ldrb	r2, [r1, #0]
     a88:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     a8a:	784a      	ldrb	r2, [r1, #1]
     a8c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     a8e:	788a      	ldrb	r2, [r1, #2]
     a90:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     a92:	0019      	movs	r1, r3
     a94:	4b01      	ldr	r3, [pc, #4]	; (a9c <port_pin_set_config+0x20>)
     a96:	4798      	blx	r3
}
     a98:	b003      	add	sp, #12
     a9a:	bd00      	pop	{pc}
     a9c:	000021f9 	.word	0x000021f9

00000aa0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     aa0:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     aa2:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     aa4:	2340      	movs	r3, #64	; 0x40
     aa6:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     aa8:	4281      	cmp	r1, r0
     aaa:	d202      	bcs.n	ab2 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     aac:	0018      	movs	r0, r3
     aae:	bd10      	pop	{r4, pc}
		baud_calculated++;
     ab0:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     ab2:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     ab4:	1c63      	adds	r3, r4, #1
     ab6:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     ab8:	4288      	cmp	r0, r1
     aba:	d9f9      	bls.n	ab0 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     abc:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     abe:	2cff      	cmp	r4, #255	; 0xff
     ac0:	d8f4      	bhi.n	aac <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     ac2:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     ac4:	2300      	movs	r3, #0
     ac6:	e7f1      	b.n	aac <_sercom_get_sync_baud_val+0xc>

00000ac8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
     aca:	46de      	mov	lr, fp
     acc:	4657      	mov	r7, sl
     ace:	464e      	mov	r6, r9
     ad0:	4645      	mov	r5, r8
     ad2:	b5e0      	push	{r5, r6, r7, lr}
     ad4:	b089      	sub	sp, #36	; 0x24
     ad6:	000c      	movs	r4, r1
     ad8:	9205      	str	r2, [sp, #20]
     ada:	aa12      	add	r2, sp, #72	; 0x48
     adc:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     ade:	0005      	movs	r5, r0
     ae0:	434d      	muls	r5, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ae2:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     ae4:	42a5      	cmp	r5, r4
     ae6:	d907      	bls.n	af8 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     ae8:	0010      	movs	r0, r2
     aea:	b009      	add	sp, #36	; 0x24
     aec:	bc3c      	pop	{r2, r3, r4, r5}
     aee:	4690      	mov	r8, r2
     af0:	4699      	mov	r9, r3
     af2:	46a2      	mov	sl, r4
     af4:	46ab      	mov	fp, r5
     af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     af8:	2b00      	cmp	r3, #0
     afa:	d155      	bne.n	ba8 <_sercom_get_async_baud_val+0xe0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     afc:	0002      	movs	r2, r0
     afe:	0008      	movs	r0, r1
     b00:	2100      	movs	r1, #0
     b02:	4d63      	ldr	r5, [pc, #396]	; (c90 <_sercom_get_async_baud_val+0x1c8>)
     b04:	47a8      	blx	r5
     b06:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     b08:	0026      	movs	r6, r4
     b0a:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
     b0c:	2300      	movs	r3, #0
     b0e:	2400      	movs	r4, #0
     b10:	9300      	str	r3, [sp, #0]
     b12:	9401      	str	r4, [sp, #4]
     b14:	2200      	movs	r2, #0
     b16:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     b18:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     b1a:	2120      	movs	r1, #32
     b1c:	468c      	mov	ip, r1
     b1e:	391f      	subs	r1, #31
     b20:	9602      	str	r6, [sp, #8]
     b22:	9703      	str	r7, [sp, #12]
     b24:	e014      	b.n	b50 <_sercom_get_async_baud_val+0x88>
     b26:	4664      	mov	r4, ip
     b28:	1a24      	subs	r4, r4, r0
     b2a:	000d      	movs	r5, r1
     b2c:	40e5      	lsrs	r5, r4
     b2e:	46a8      	mov	r8, r5
     b30:	e015      	b.n	b5e <_sercom_get_async_baud_val+0x96>
			r = r - d;
     b32:	9c02      	ldr	r4, [sp, #8]
     b34:	9d03      	ldr	r5, [sp, #12]
     b36:	1b12      	subs	r2, r2, r4
     b38:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     b3a:	464d      	mov	r5, r9
     b3c:	9e00      	ldr	r6, [sp, #0]
     b3e:	9f01      	ldr	r7, [sp, #4]
     b40:	4335      	orrs	r5, r6
     b42:	003c      	movs	r4, r7
     b44:	4646      	mov	r6, r8
     b46:	4334      	orrs	r4, r6
     b48:	9500      	str	r5, [sp, #0]
     b4a:	9401      	str	r4, [sp, #4]
	for (i = 63; i >= 0; i--) {
     b4c:	3801      	subs	r0, #1
     b4e:	d31d      	bcc.n	b8c <_sercom_get_async_baud_val+0xc4>
		bit_shift = (uint64_t)1 << i;
     b50:	2420      	movs	r4, #32
     b52:	4264      	negs	r4, r4
     b54:	1904      	adds	r4, r0, r4
     b56:	d4e6      	bmi.n	b26 <_sercom_get_async_baud_val+0x5e>
     b58:	000d      	movs	r5, r1
     b5a:	40a5      	lsls	r5, r4
     b5c:	46a8      	mov	r8, r5
     b5e:	000c      	movs	r4, r1
     b60:	4084      	lsls	r4, r0
     b62:	46a1      	mov	r9, r4
		r = r << 1;
     b64:	1892      	adds	r2, r2, r2
     b66:	415b      	adcs	r3, r3
     b68:	0014      	movs	r4, r2
     b6a:	001d      	movs	r5, r3
		if (n & bit_shift) {
     b6c:	4646      	mov	r6, r8
     b6e:	465f      	mov	r7, fp
     b70:	423e      	tst	r6, r7
     b72:	d003      	beq.n	b7c <_sercom_get_async_baud_val+0xb4>
			r |= 0x01;
     b74:	000e      	movs	r6, r1
     b76:	4326      	orrs	r6, r4
     b78:	0032      	movs	r2, r6
     b7a:	002b      	movs	r3, r5
		if (r >= d) {
     b7c:	9c02      	ldr	r4, [sp, #8]
     b7e:	9d03      	ldr	r5, [sp, #12]
     b80:	429d      	cmp	r5, r3
     b82:	d8e3      	bhi.n	b4c <_sercom_get_async_baud_val+0x84>
     b84:	d1d5      	bne.n	b32 <_sercom_get_async_baud_val+0x6a>
     b86:	4294      	cmp	r4, r2
     b88:	d8e0      	bhi.n	b4c <_sercom_get_async_baud_val+0x84>
     b8a:	e7d2      	b.n	b32 <_sercom_get_async_baud_val+0x6a>
		scale = ((uint64_t)1 << SHIFT) - ratio;
     b8c:	2200      	movs	r2, #0
     b8e:	2301      	movs	r3, #1
     b90:	9800      	ldr	r0, [sp, #0]
     b92:	9901      	ldr	r1, [sp, #4]
     b94:	1a12      	subs	r2, r2, r0
     b96:	418b      	sbcs	r3, r1
     b98:	0019      	movs	r1, r3
		baud_calculated = (65536 * scale) >> SHIFT;
     b9a:	0c13      	lsrs	r3, r2, #16
     b9c:	040a      	lsls	r2, r1, #16
     b9e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     ba0:	9b05      	ldr	r3, [sp, #20]
     ba2:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     ba4:	2200      	movs	r2, #0
     ba6:	e79f      	b.n	ae8 <_sercom_get_async_baud_val+0x20>
	uint64_t baud_calculated = 0;
     ba8:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     baa:	2b01      	cmp	r3, #1
     bac:	d1f8      	bne.n	ba0 <_sercom_get_async_baud_val+0xd8>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     bae:	0f63      	lsrs	r3, r4, #29
     bb0:	9304      	str	r3, [sp, #16]
     bb2:	00e3      	lsls	r3, r4, #3
     bb4:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     bb6:	000a      	movs	r2, r1
     bb8:	2300      	movs	r3, #0
     bba:	2100      	movs	r1, #0
     bbc:	4c34      	ldr	r4, [pc, #208]	; (c90 <_sercom_get_async_baud_val+0x1c8>)
     bbe:	47a0      	blx	r4
     bc0:	0004      	movs	r4, r0
     bc2:	000d      	movs	r5, r1
     bc4:	2300      	movs	r3, #0
     bc6:	469c      	mov	ip, r3
     bc8:	9306      	str	r3, [sp, #24]
		bit_shift = (uint64_t)1 << i;
     bca:	3320      	adds	r3, #32
     bcc:	469b      	mov	fp, r3
     bce:	2601      	movs	r6, #1
			if(baud_int < BAUD_INT_MAX) {
     bd0:	4663      	mov	r3, ip
     bd2:	9307      	str	r3, [sp, #28]
     bd4:	e048      	b.n	c68 <_sercom_get_async_baud_val+0x1a0>
		bit_shift = (uint64_t)1 << i;
     bd6:	4659      	mov	r1, fp
     bd8:	1bc9      	subs	r1, r1, r7
     bda:	0030      	movs	r0, r6
     bdc:	40c8      	lsrs	r0, r1
     bde:	4682      	mov	sl, r0
     be0:	e010      	b.n	c04 <_sercom_get_async_baud_val+0x13c>
			r = r - d;
     be2:	9800      	ldr	r0, [sp, #0]
     be4:	9901      	ldr	r1, [sp, #4]
     be6:	1a12      	subs	r2, r2, r0
     be8:	418b      	sbcs	r3, r1
			q |= bit_shift;
     bea:	9902      	ldr	r1, [sp, #8]
     bec:	4648      	mov	r0, r9
     bee:	4301      	orrs	r1, r0
     bf0:	9102      	str	r1, [sp, #8]
	for (i = 63; i >= 0; i--) {
     bf2:	3f01      	subs	r7, #1
     bf4:	d325      	bcc.n	c42 <_sercom_get_async_baud_val+0x17a>
		bit_shift = (uint64_t)1 << i;
     bf6:	2120      	movs	r1, #32
     bf8:	4249      	negs	r1, r1
     bfa:	1879      	adds	r1, r7, r1
     bfc:	d4eb      	bmi.n	bd6 <_sercom_get_async_baud_val+0x10e>
     bfe:	0030      	movs	r0, r6
     c00:	4088      	lsls	r0, r1
     c02:	4682      	mov	sl, r0
     c04:	0031      	movs	r1, r6
     c06:	40b9      	lsls	r1, r7
     c08:	4689      	mov	r9, r1
		r = r << 1;
     c0a:	1892      	adds	r2, r2, r2
     c0c:	415b      	adcs	r3, r3
     c0e:	0010      	movs	r0, r2
     c10:	0019      	movs	r1, r3
		if (n & bit_shift) {
     c12:	4644      	mov	r4, r8
     c14:	464d      	mov	r5, r9
     c16:	402c      	ands	r4, r5
     c18:	46a4      	mov	ip, r4
     c1a:	4654      	mov	r4, sl
     c1c:	9d04      	ldr	r5, [sp, #16]
     c1e:	402c      	ands	r4, r5
     c20:	46a2      	mov	sl, r4
     c22:	4664      	mov	r4, ip
     c24:	4655      	mov	r5, sl
     c26:	432c      	orrs	r4, r5
     c28:	d003      	beq.n	c32 <_sercom_get_async_baud_val+0x16a>
			r |= 0x01;
     c2a:	0034      	movs	r4, r6
     c2c:	4304      	orrs	r4, r0
     c2e:	0022      	movs	r2, r4
     c30:	000b      	movs	r3, r1
		if (r >= d) {
     c32:	9800      	ldr	r0, [sp, #0]
     c34:	9901      	ldr	r1, [sp, #4]
     c36:	4299      	cmp	r1, r3
     c38:	d8db      	bhi.n	bf2 <_sercom_get_async_baud_val+0x12a>
     c3a:	d1d2      	bne.n	be2 <_sercom_get_async_baud_val+0x11a>
     c3c:	4290      	cmp	r0, r2
     c3e:	d8d8      	bhi.n	bf2 <_sercom_get_async_baud_val+0x12a>
     c40:	e7cf      	b.n	be2 <_sercom_get_async_baud_val+0x11a>
     c42:	9c00      	ldr	r4, [sp, #0]
     c44:	9d01      	ldr	r5, [sp, #4]
			baud_int -= baud_fp;
     c46:	9902      	ldr	r1, [sp, #8]
     c48:	9a07      	ldr	r2, [sp, #28]
     c4a:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     c4c:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     c4e:	4911      	ldr	r1, [pc, #68]	; (c94 <_sercom_get_async_baud_val+0x1cc>)
     c50:	428b      	cmp	r3, r1
     c52:	d914      	bls.n	c7e <_sercom_get_async_baud_val+0x1b6>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     c54:	9b06      	ldr	r3, [sp, #24]
     c56:	3301      	adds	r3, #1
     c58:	b2db      	uxtb	r3, r3
     c5a:	0019      	movs	r1, r3
     c5c:	9306      	str	r3, [sp, #24]
     c5e:	0013      	movs	r3, r2
     c60:	3301      	adds	r3, #1
     c62:	9307      	str	r3, [sp, #28]
     c64:	2908      	cmp	r1, #8
     c66:	d008      	beq.n	c7a <_sercom_get_async_baud_val+0x1b2>
	uint64_t q = 0, r = 0, bit_shift;
     c68:	2300      	movs	r3, #0
     c6a:	9302      	str	r3, [sp, #8]
     c6c:	2200      	movs	r2, #0
     c6e:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     c70:	213f      	movs	r1, #63	; 0x3f
     c72:	9400      	str	r4, [sp, #0]
     c74:	9501      	str	r5, [sp, #4]
     c76:	000f      	movs	r7, r1
     c78:	e7bd      	b.n	bf6 <_sercom_get_async_baud_val+0x12e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c7a:	2240      	movs	r2, #64	; 0x40
     c7c:	e734      	b.n	ae8 <_sercom_get_async_baud_val+0x20>
     c7e:	2240      	movs	r2, #64	; 0x40
		if(baud_fp == BAUD_FP_MAX) {
     c80:	9906      	ldr	r1, [sp, #24]
     c82:	2908      	cmp	r1, #8
     c84:	d100      	bne.n	c88 <_sercom_get_async_baud_val+0x1c0>
     c86:	e72f      	b.n	ae8 <_sercom_get_async_baud_val+0x20>
		baud_calculated = baud_int | (baud_fp << 13);
     c88:	034a      	lsls	r2, r1, #13
     c8a:	431a      	orrs	r2, r3
     c8c:	e788      	b.n	ba0 <_sercom_get_async_baud_val+0xd8>
     c8e:	46c0      	nop			; (mov r8, r8)
     c90:	00006339 	.word	0x00006339
     c94:	00001fff 	.word	0x00001fff

00000c98 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     c98:	b510      	push	{r4, lr}
     c9a:	b082      	sub	sp, #8
     c9c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     c9e:	4b0e      	ldr	r3, [pc, #56]	; (cd8 <sercom_set_gclk_generator+0x40>)
     ca0:	781b      	ldrb	r3, [r3, #0]
     ca2:	2b00      	cmp	r3, #0
     ca4:	d007      	beq.n	cb6 <sercom_set_gclk_generator+0x1e>
     ca6:	2900      	cmp	r1, #0
     ca8:	d105      	bne.n	cb6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     caa:	4b0b      	ldr	r3, [pc, #44]	; (cd8 <sercom_set_gclk_generator+0x40>)
     cac:	785b      	ldrb	r3, [r3, #1]
     cae:	4283      	cmp	r3, r0
     cb0:	d010      	beq.n	cd4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     cb2:	201d      	movs	r0, #29
     cb4:	e00c      	b.n	cd0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     cb6:	a901      	add	r1, sp, #4
     cb8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     cba:	2013      	movs	r0, #19
     cbc:	4b07      	ldr	r3, [pc, #28]	; (cdc <sercom_set_gclk_generator+0x44>)
     cbe:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     cc0:	2013      	movs	r0, #19
     cc2:	4b07      	ldr	r3, [pc, #28]	; (ce0 <sercom_set_gclk_generator+0x48>)
     cc4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     cc6:	4b04      	ldr	r3, [pc, #16]	; (cd8 <sercom_set_gclk_generator+0x40>)
     cc8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     cca:	2201      	movs	r2, #1
     ccc:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     cce:	2000      	movs	r0, #0
}
     cd0:	b002      	add	sp, #8
     cd2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     cd4:	2000      	movs	r0, #0
     cd6:	e7fb      	b.n	cd0 <sercom_set_gclk_generator+0x38>
     cd8:	20000204 	.word	0x20000204
     cdc:	00002101 	.word	0x00002101
     ce0:	00002075 	.word	0x00002075

00000ce4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     ce4:	4b40      	ldr	r3, [pc, #256]	; (de8 <_sercom_get_default_pad+0x104>)
     ce6:	4298      	cmp	r0, r3
     ce8:	d031      	beq.n	d4e <_sercom_get_default_pad+0x6a>
     cea:	d90a      	bls.n	d02 <_sercom_get_default_pad+0x1e>
     cec:	4b3f      	ldr	r3, [pc, #252]	; (dec <_sercom_get_default_pad+0x108>)
     cee:	4298      	cmp	r0, r3
     cf0:	d04d      	beq.n	d8e <_sercom_get_default_pad+0xaa>
     cf2:	4b3f      	ldr	r3, [pc, #252]	; (df0 <_sercom_get_default_pad+0x10c>)
     cf4:	4298      	cmp	r0, r3
     cf6:	d05a      	beq.n	dae <_sercom_get_default_pad+0xca>
     cf8:	4b3e      	ldr	r3, [pc, #248]	; (df4 <_sercom_get_default_pad+0x110>)
     cfa:	4298      	cmp	r0, r3
     cfc:	d037      	beq.n	d6e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     cfe:	2000      	movs	r0, #0
}
     d00:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     d02:	4b3d      	ldr	r3, [pc, #244]	; (df8 <_sercom_get_default_pad+0x114>)
     d04:	4298      	cmp	r0, r3
     d06:	d00c      	beq.n	d22 <_sercom_get_default_pad+0x3e>
     d08:	4b3c      	ldr	r3, [pc, #240]	; (dfc <_sercom_get_default_pad+0x118>)
     d0a:	4298      	cmp	r0, r3
     d0c:	d1f7      	bne.n	cfe <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d0e:	2901      	cmp	r1, #1
     d10:	d017      	beq.n	d42 <_sercom_get_default_pad+0x5e>
     d12:	2900      	cmp	r1, #0
     d14:	d05d      	beq.n	dd2 <_sercom_get_default_pad+0xee>
     d16:	2902      	cmp	r1, #2
     d18:	d015      	beq.n	d46 <_sercom_get_default_pad+0x62>
     d1a:	2903      	cmp	r1, #3
     d1c:	d015      	beq.n	d4a <_sercom_get_default_pad+0x66>
	return 0;
     d1e:	2000      	movs	r0, #0
     d20:	e7ee      	b.n	d00 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d22:	2901      	cmp	r1, #1
     d24:	d007      	beq.n	d36 <_sercom_get_default_pad+0x52>
     d26:	2900      	cmp	r1, #0
     d28:	d051      	beq.n	dce <_sercom_get_default_pad+0xea>
     d2a:	2902      	cmp	r1, #2
     d2c:	d005      	beq.n	d3a <_sercom_get_default_pad+0x56>
     d2e:	2903      	cmp	r1, #3
     d30:	d005      	beq.n	d3e <_sercom_get_default_pad+0x5a>
	return 0;
     d32:	2000      	movs	r0, #0
     d34:	e7e4      	b.n	d00 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d36:	4832      	ldr	r0, [pc, #200]	; (e00 <_sercom_get_default_pad+0x11c>)
     d38:	e7e2      	b.n	d00 <_sercom_get_default_pad+0x1c>
     d3a:	4832      	ldr	r0, [pc, #200]	; (e04 <_sercom_get_default_pad+0x120>)
     d3c:	e7e0      	b.n	d00 <_sercom_get_default_pad+0x1c>
     d3e:	4832      	ldr	r0, [pc, #200]	; (e08 <_sercom_get_default_pad+0x124>)
     d40:	e7de      	b.n	d00 <_sercom_get_default_pad+0x1c>
     d42:	4832      	ldr	r0, [pc, #200]	; (e0c <_sercom_get_default_pad+0x128>)
     d44:	e7dc      	b.n	d00 <_sercom_get_default_pad+0x1c>
     d46:	4832      	ldr	r0, [pc, #200]	; (e10 <_sercom_get_default_pad+0x12c>)
     d48:	e7da      	b.n	d00 <_sercom_get_default_pad+0x1c>
     d4a:	4832      	ldr	r0, [pc, #200]	; (e14 <_sercom_get_default_pad+0x130>)
     d4c:	e7d8      	b.n	d00 <_sercom_get_default_pad+0x1c>
     d4e:	2901      	cmp	r1, #1
     d50:	d007      	beq.n	d62 <_sercom_get_default_pad+0x7e>
     d52:	2900      	cmp	r1, #0
     d54:	d03f      	beq.n	dd6 <_sercom_get_default_pad+0xf2>
     d56:	2902      	cmp	r1, #2
     d58:	d005      	beq.n	d66 <_sercom_get_default_pad+0x82>
     d5a:	2903      	cmp	r1, #3
     d5c:	d005      	beq.n	d6a <_sercom_get_default_pad+0x86>
	return 0;
     d5e:	2000      	movs	r0, #0
     d60:	e7ce      	b.n	d00 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d62:	482d      	ldr	r0, [pc, #180]	; (e18 <_sercom_get_default_pad+0x134>)
     d64:	e7cc      	b.n	d00 <_sercom_get_default_pad+0x1c>
     d66:	482d      	ldr	r0, [pc, #180]	; (e1c <_sercom_get_default_pad+0x138>)
     d68:	e7ca      	b.n	d00 <_sercom_get_default_pad+0x1c>
     d6a:	482d      	ldr	r0, [pc, #180]	; (e20 <_sercom_get_default_pad+0x13c>)
     d6c:	e7c8      	b.n	d00 <_sercom_get_default_pad+0x1c>
     d6e:	2901      	cmp	r1, #1
     d70:	d007      	beq.n	d82 <_sercom_get_default_pad+0x9e>
     d72:	2900      	cmp	r1, #0
     d74:	d031      	beq.n	dda <_sercom_get_default_pad+0xf6>
     d76:	2902      	cmp	r1, #2
     d78:	d005      	beq.n	d86 <_sercom_get_default_pad+0xa2>
     d7a:	2903      	cmp	r1, #3
     d7c:	d005      	beq.n	d8a <_sercom_get_default_pad+0xa6>
	return 0;
     d7e:	2000      	movs	r0, #0
     d80:	e7be      	b.n	d00 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d82:	4828      	ldr	r0, [pc, #160]	; (e24 <_sercom_get_default_pad+0x140>)
     d84:	e7bc      	b.n	d00 <_sercom_get_default_pad+0x1c>
     d86:	4828      	ldr	r0, [pc, #160]	; (e28 <_sercom_get_default_pad+0x144>)
     d88:	e7ba      	b.n	d00 <_sercom_get_default_pad+0x1c>
     d8a:	4828      	ldr	r0, [pc, #160]	; (e2c <_sercom_get_default_pad+0x148>)
     d8c:	e7b8      	b.n	d00 <_sercom_get_default_pad+0x1c>
     d8e:	2901      	cmp	r1, #1
     d90:	d007      	beq.n	da2 <_sercom_get_default_pad+0xbe>
     d92:	2900      	cmp	r1, #0
     d94:	d023      	beq.n	dde <_sercom_get_default_pad+0xfa>
     d96:	2902      	cmp	r1, #2
     d98:	d005      	beq.n	da6 <_sercom_get_default_pad+0xc2>
     d9a:	2903      	cmp	r1, #3
     d9c:	d005      	beq.n	daa <_sercom_get_default_pad+0xc6>
	return 0;
     d9e:	2000      	movs	r0, #0
     da0:	e7ae      	b.n	d00 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     da2:	4823      	ldr	r0, [pc, #140]	; (e30 <_sercom_get_default_pad+0x14c>)
     da4:	e7ac      	b.n	d00 <_sercom_get_default_pad+0x1c>
     da6:	4823      	ldr	r0, [pc, #140]	; (e34 <_sercom_get_default_pad+0x150>)
     da8:	e7aa      	b.n	d00 <_sercom_get_default_pad+0x1c>
     daa:	4823      	ldr	r0, [pc, #140]	; (e38 <_sercom_get_default_pad+0x154>)
     dac:	e7a8      	b.n	d00 <_sercom_get_default_pad+0x1c>
     dae:	2901      	cmp	r1, #1
     db0:	d007      	beq.n	dc2 <_sercom_get_default_pad+0xde>
     db2:	2900      	cmp	r1, #0
     db4:	d015      	beq.n	de2 <_sercom_get_default_pad+0xfe>
     db6:	2902      	cmp	r1, #2
     db8:	d005      	beq.n	dc6 <_sercom_get_default_pad+0xe2>
     dba:	2903      	cmp	r1, #3
     dbc:	d005      	beq.n	dca <_sercom_get_default_pad+0xe6>
	return 0;
     dbe:	2000      	movs	r0, #0
     dc0:	e79e      	b.n	d00 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dc2:	481e      	ldr	r0, [pc, #120]	; (e3c <_sercom_get_default_pad+0x158>)
     dc4:	e79c      	b.n	d00 <_sercom_get_default_pad+0x1c>
     dc6:	481e      	ldr	r0, [pc, #120]	; (e40 <_sercom_get_default_pad+0x15c>)
     dc8:	e79a      	b.n	d00 <_sercom_get_default_pad+0x1c>
     dca:	481e      	ldr	r0, [pc, #120]	; (e44 <_sercom_get_default_pad+0x160>)
     dcc:	e798      	b.n	d00 <_sercom_get_default_pad+0x1c>
     dce:	481e      	ldr	r0, [pc, #120]	; (e48 <_sercom_get_default_pad+0x164>)
     dd0:	e796      	b.n	d00 <_sercom_get_default_pad+0x1c>
     dd2:	2003      	movs	r0, #3
     dd4:	e794      	b.n	d00 <_sercom_get_default_pad+0x1c>
     dd6:	481d      	ldr	r0, [pc, #116]	; (e4c <_sercom_get_default_pad+0x168>)
     dd8:	e792      	b.n	d00 <_sercom_get_default_pad+0x1c>
     dda:	481d      	ldr	r0, [pc, #116]	; (e50 <_sercom_get_default_pad+0x16c>)
     ddc:	e790      	b.n	d00 <_sercom_get_default_pad+0x1c>
     dde:	481d      	ldr	r0, [pc, #116]	; (e54 <_sercom_get_default_pad+0x170>)
     de0:	e78e      	b.n	d00 <_sercom_get_default_pad+0x1c>
     de2:	481d      	ldr	r0, [pc, #116]	; (e58 <_sercom_get_default_pad+0x174>)
     de4:	e78c      	b.n	d00 <_sercom_get_default_pad+0x1c>
     de6:	46c0      	nop			; (mov r8, r8)
     de8:	42001000 	.word	0x42001000
     dec:	42001800 	.word	0x42001800
     df0:	42001c00 	.word	0x42001c00
     df4:	42001400 	.word	0x42001400
     df8:	42000800 	.word	0x42000800
     dfc:	42000c00 	.word	0x42000c00
     e00:	00050003 	.word	0x00050003
     e04:	00060003 	.word	0x00060003
     e08:	00070003 	.word	0x00070003
     e0c:	00010003 	.word	0x00010003
     e10:	001e0003 	.word	0x001e0003
     e14:	001f0003 	.word	0x001f0003
     e18:	000d0002 	.word	0x000d0002
     e1c:	000e0002 	.word	0x000e0002
     e20:	000f0002 	.word	0x000f0002
     e24:	00110003 	.word	0x00110003
     e28:	00120003 	.word	0x00120003
     e2c:	00130003 	.word	0x00130003
     e30:	003f0005 	.word	0x003f0005
     e34:	003e0005 	.word	0x003e0005
     e38:	00520005 	.word	0x00520005
     e3c:	00170003 	.word	0x00170003
     e40:	00180003 	.word	0x00180003
     e44:	00190003 	.word	0x00190003
     e48:	00040003 	.word	0x00040003
     e4c:	000c0002 	.word	0x000c0002
     e50:	00100003 	.word	0x00100003
     e54:	00530005 	.word	0x00530005
     e58:	00160003 	.word	0x00160003

00000e5c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     e5c:	b530      	push	{r4, r5, lr}
     e5e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     e60:	4b0b      	ldr	r3, [pc, #44]	; (e90 <_sercom_get_sercom_inst_index+0x34>)
     e62:	466a      	mov	r2, sp
     e64:	cb32      	ldmia	r3!, {r1, r4, r5}
     e66:	c232      	stmia	r2!, {r1, r4, r5}
     e68:	cb32      	ldmia	r3!, {r1, r4, r5}
     e6a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     e6c:	9b00      	ldr	r3, [sp, #0]
     e6e:	4283      	cmp	r3, r0
     e70:	d00b      	beq.n	e8a <_sercom_get_sercom_inst_index+0x2e>
     e72:	2301      	movs	r3, #1
     e74:	009a      	lsls	r2, r3, #2
     e76:	4669      	mov	r1, sp
     e78:	5852      	ldr	r2, [r2, r1]
     e7a:	4282      	cmp	r2, r0
     e7c:	d006      	beq.n	e8c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e7e:	3301      	adds	r3, #1
     e80:	2b06      	cmp	r3, #6
     e82:	d1f7      	bne.n	e74 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     e84:	2000      	movs	r0, #0
}
     e86:	b007      	add	sp, #28
     e88:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e8a:	2300      	movs	r3, #0
			return i;
     e8c:	b2d8      	uxtb	r0, r3
     e8e:	e7fa      	b.n	e86 <_sercom_get_sercom_inst_index+0x2a>
     e90:	00008b10 	.word	0x00008b10

00000e94 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     e94:	4770      	bx	lr
	...

00000e98 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     e98:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     e9a:	4b0a      	ldr	r3, [pc, #40]	; (ec4 <_sercom_set_handler+0x2c>)
     e9c:	781b      	ldrb	r3, [r3, #0]
     e9e:	2b00      	cmp	r3, #0
     ea0:	d10c      	bne.n	ebc <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     ea2:	4f09      	ldr	r7, [pc, #36]	; (ec8 <_sercom_set_handler+0x30>)
     ea4:	4e09      	ldr	r6, [pc, #36]	; (ecc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     ea6:	4d0a      	ldr	r5, [pc, #40]	; (ed0 <_sercom_set_handler+0x38>)
     ea8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     eaa:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     eac:	195a      	adds	r2, r3, r5
     eae:	6014      	str	r4, [r2, #0]
     eb0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     eb2:	2b18      	cmp	r3, #24
     eb4:	d1f9      	bne.n	eaa <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     eb6:	2201      	movs	r2, #1
     eb8:	4b02      	ldr	r3, [pc, #8]	; (ec4 <_sercom_set_handler+0x2c>)
     eba:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     ebc:	0080      	lsls	r0, r0, #2
     ebe:	4b02      	ldr	r3, [pc, #8]	; (ec8 <_sercom_set_handler+0x30>)
     ec0:	50c1      	str	r1, [r0, r3]
}
     ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ec4:	20000206 	.word	0x20000206
     ec8:	20000208 	.word	0x20000208
     ecc:	00000e95 	.word	0x00000e95
     ed0:	200009b8 	.word	0x200009b8

00000ed4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     ed4:	b500      	push	{lr}
     ed6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     ed8:	2309      	movs	r3, #9
     eda:	466a      	mov	r2, sp
     edc:	7013      	strb	r3, [r2, #0]
     ede:	3301      	adds	r3, #1
     ee0:	7053      	strb	r3, [r2, #1]
     ee2:	3301      	adds	r3, #1
     ee4:	7093      	strb	r3, [r2, #2]
     ee6:	3301      	adds	r3, #1
     ee8:	70d3      	strb	r3, [r2, #3]
     eea:	3301      	adds	r3, #1
     eec:	7113      	strb	r3, [r2, #4]
     eee:	3301      	adds	r3, #1
     ef0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     ef2:	4b03      	ldr	r3, [pc, #12]	; (f00 <_sercom_get_interrupt_vector+0x2c>)
     ef4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     ef6:	466b      	mov	r3, sp
     ef8:	5618      	ldrsb	r0, [r3, r0]
}
     efa:	b003      	add	sp, #12
     efc:	bd00      	pop	{pc}
     efe:	46c0      	nop			; (mov r8, r8)
     f00:	00000e5d 	.word	0x00000e5d

00000f04 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     f04:	b510      	push	{r4, lr}
     f06:	4b02      	ldr	r3, [pc, #8]	; (f10 <SERCOM0_Handler+0xc>)
     f08:	681b      	ldr	r3, [r3, #0]
     f0a:	2000      	movs	r0, #0
     f0c:	4798      	blx	r3
     f0e:	bd10      	pop	{r4, pc}
     f10:	20000208 	.word	0x20000208

00000f14 <SERCOM1_Handler>:
     f14:	b510      	push	{r4, lr}
     f16:	4b02      	ldr	r3, [pc, #8]	; (f20 <SERCOM1_Handler+0xc>)
     f18:	685b      	ldr	r3, [r3, #4]
     f1a:	2001      	movs	r0, #1
     f1c:	4798      	blx	r3
     f1e:	bd10      	pop	{r4, pc}
     f20:	20000208 	.word	0x20000208

00000f24 <SERCOM2_Handler>:
     f24:	b510      	push	{r4, lr}
     f26:	4b02      	ldr	r3, [pc, #8]	; (f30 <SERCOM2_Handler+0xc>)
     f28:	689b      	ldr	r3, [r3, #8]
     f2a:	2002      	movs	r0, #2
     f2c:	4798      	blx	r3
     f2e:	bd10      	pop	{r4, pc}
     f30:	20000208 	.word	0x20000208

00000f34 <SERCOM3_Handler>:
     f34:	b510      	push	{r4, lr}
     f36:	4b02      	ldr	r3, [pc, #8]	; (f40 <SERCOM3_Handler+0xc>)
     f38:	68db      	ldr	r3, [r3, #12]
     f3a:	2003      	movs	r0, #3
     f3c:	4798      	blx	r3
     f3e:	bd10      	pop	{r4, pc}
     f40:	20000208 	.word	0x20000208

00000f44 <SERCOM4_Handler>:
     f44:	b510      	push	{r4, lr}
     f46:	4b02      	ldr	r3, [pc, #8]	; (f50 <SERCOM4_Handler+0xc>)
     f48:	691b      	ldr	r3, [r3, #16]
     f4a:	2004      	movs	r0, #4
     f4c:	4798      	blx	r3
     f4e:	bd10      	pop	{r4, pc}
     f50:	20000208 	.word	0x20000208

00000f54 <SERCOM5_Handler>:
     f54:	b510      	push	{r4, lr}
     f56:	4b02      	ldr	r3, [pc, #8]	; (f60 <SERCOM5_Handler+0xc>)
     f58:	695b      	ldr	r3, [r3, #20]
     f5a:	2005      	movs	r0, #5
     f5c:	4798      	blx	r3
     f5e:	bd10      	pop	{r4, pc}
     f60:	20000208 	.word	0x20000208

00000f64 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     f64:	b5f0      	push	{r4, r5, r6, r7, lr}
     f66:	46d6      	mov	lr, sl
     f68:	464f      	mov	r7, r9
     f6a:	b580      	push	{r7, lr}
     f6c:	b08b      	sub	sp, #44	; 0x2c
     f6e:	4681      	mov	r9, r0
     f70:	000f      	movs	r7, r1
     f72:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     f74:	0003      	movs	r3, r0
     f76:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     f78:	680b      	ldr	r3, [r1, #0]
     f7a:	079b      	lsls	r3, r3, #30
     f7c:	d409      	bmi.n	f92 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     f7e:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     f80:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     f82:	07db      	lsls	r3, r3, #31
     f84:	d400      	bmi.n	f88 <spi_init+0x24>
     f86:	e098      	b.n	10ba <spi_init+0x156>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     f88:	b00b      	add	sp, #44	; 0x2c
     f8a:	bc0c      	pop	{r2, r3}
     f8c:	4691      	mov	r9, r2
     f8e:	469a      	mov	sl, r3
     f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
     f92:	6a93      	ldr	r3, [r2, #40]	; 0x28
     f94:	9305      	str	r3, [sp, #20]
     f96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     f98:	9306      	str	r3, [sp, #24]
     f9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
     f9c:	9307      	str	r3, [sp, #28]
     f9e:	6b53      	ldr	r3, [r2, #52]	; 0x34
     fa0:	9308      	str	r3, [sp, #32]
     fa2:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     fa4:	ab05      	add	r3, sp, #20
     fa6:	9301      	str	r3, [sp, #4]
     fa8:	e00a      	b.n	fc0 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     faa:	0038      	movs	r0, r7
     fac:	4b93      	ldr	r3, [pc, #588]	; (11fc <spi_init+0x298>)
     fae:	4798      	blx	r3
     fb0:	e00c      	b.n	fcc <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     fb2:	230f      	movs	r3, #15
     fb4:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
     fb6:	4281      	cmp	r1, r0
     fb8:	d12d      	bne.n	1016 <spi_init+0xb2>
     fba:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     fbc:	2e04      	cmp	r6, #4
     fbe:	d02f      	beq.n	1020 <spi_init+0xbc>
     fc0:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
     fc2:	00b3      	lsls	r3, r6, #2
     fc4:	9a01      	ldr	r2, [sp, #4]
     fc6:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     fc8:	2800      	cmp	r0, #0
     fca:	d0ee      	beq.n	faa <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
     fcc:	1c43      	adds	r3, r0, #1
     fce:	d0f4      	beq.n	fba <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
     fd0:	0401      	lsls	r1, r0, #16
     fd2:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     fd4:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
     fd6:	b2c3      	uxtb	r3, r0
     fd8:	469c      	mov	ip, r3
		return NULL;
     fda:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     fdc:	0602      	lsls	r2, r0, #24
     fde:	d405      	bmi.n	fec <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
     fe0:	4663      	mov	r3, ip
     fe2:	095b      	lsrs	r3, r3, #5
     fe4:	01db      	lsls	r3, r3, #7
     fe6:	4a86      	ldr	r2, [pc, #536]	; (1200 <spi_init+0x29c>)
     fe8:	4692      	mov	sl, r2
     fea:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
     fec:	221f      	movs	r2, #31
     fee:	4660      	mov	r0, ip
     ff0:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     ff2:	1898      	adds	r0, r3, r2
     ff4:	3040      	adds	r0, #64	; 0x40
     ff6:	7800      	ldrb	r0, [r0, #0]
     ff8:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
     ffa:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     ffc:	4655      	mov	r5, sl
     ffe:	07ed      	lsls	r5, r5, #31
    1000:	d5d9      	bpl.n	fb6 <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    1002:	0852      	lsrs	r2, r2, #1
    1004:	189b      	adds	r3, r3, r2
    1006:	3330      	adds	r3, #48	; 0x30
    1008:	7818      	ldrb	r0, [r3, #0]
    100a:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    100c:	4663      	mov	r3, ip
    100e:	07db      	lsls	r3, r3, #31
    1010:	d5cf      	bpl.n	fb2 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    1012:	0900      	lsrs	r0, r0, #4
    1014:	e7cf      	b.n	fb6 <spi_init+0x52>
			module->hw = NULL;
    1016:	2300      	movs	r3, #0
    1018:	464a      	mov	r2, r9
    101a:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    101c:	201c      	movs	r0, #28
    101e:	e7b3      	b.n	f88 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    1020:	2013      	movs	r0, #19
    1022:	4b78      	ldr	r3, [pc, #480]	; (1204 <spi_init+0x2a0>)
    1024:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1026:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    1028:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    102a:	2a01      	cmp	r2, #1
    102c:	d027      	beq.n	107e <spi_init+0x11a>
	ctrla |= config->mux_setting;
    102e:	6863      	ldr	r3, [r4, #4]
    1030:	68a2      	ldr	r2, [r4, #8]
    1032:	4313      	orrs	r3, r2
    1034:	68e2      	ldr	r2, [r4, #12]
    1036:	4313      	orrs	r3, r2
    1038:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    103a:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    103c:	7c61      	ldrb	r1, [r4, #17]
    103e:	2900      	cmp	r1, #0
    1040:	d001      	beq.n	1046 <spi_init+0xe2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1042:	2180      	movs	r1, #128	; 0x80
    1044:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    1046:	7ca1      	ldrb	r1, [r4, #18]
    1048:	2900      	cmp	r1, #0
    104a:	d002      	beq.n	1052 <spi_init+0xee>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    104c:	2180      	movs	r1, #128	; 0x80
    104e:	0289      	lsls	r1, r1, #10
    1050:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    1052:	7ce1      	ldrb	r1, [r4, #19]
    1054:	2900      	cmp	r1, #0
    1056:	d002      	beq.n	105e <spi_init+0xfa>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1058:	2180      	movs	r1, #128	; 0x80
    105a:	0089      	lsls	r1, r1, #2
    105c:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    105e:	7d21      	ldrb	r1, [r4, #20]
    1060:	2900      	cmp	r1, #0
    1062:	d002      	beq.n	106a <spi_init+0x106>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1064:	2180      	movs	r1, #128	; 0x80
    1066:	0189      	lsls	r1, r1, #6
    1068:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    106a:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    106c:	2002      	movs	r0, #2
    106e:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    1070:	428b      	cmp	r3, r1
    1072:	d018      	beq.n	10a6 <spi_init+0x142>
	module->hw = NULL;
    1074:	2300      	movs	r3, #0
    1076:	464a      	mov	r2, r9
    1078:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    107a:	201c      	movs	r0, #28
    107c:	e784      	b.n	f88 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    107e:	aa04      	add	r2, sp, #16
    1080:	0001      	movs	r1, r0
    1082:	69a0      	ldr	r0, [r4, #24]
    1084:	4b60      	ldr	r3, [pc, #384]	; (1208 <spi_init+0x2a4>)
    1086:	4798      	blx	r3
    1088:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    108a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    108c:	2b00      	cmp	r3, #0
    108e:	d000      	beq.n	1092 <spi_init+0x12e>
    1090:	e77a      	b.n	f88 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    1092:	7b3b      	ldrb	r3, [r7, #12]
    1094:	b2db      	uxtb	r3, r3
    1096:	aa04      	add	r2, sp, #16
    1098:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    109a:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    109c:	429a      	cmp	r2, r3
    109e:	d000      	beq.n	10a2 <spi_init+0x13e>
    10a0:	e772      	b.n	f88 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    10a2:	350c      	adds	r5, #12
    10a4:	e7c3      	b.n	102e <spi_init+0xca>
			spi_module->CTRLB.reg == ctrlb) {
    10a6:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    10a8:	4293      	cmp	r3, r2
    10aa:	d1e3      	bne.n	1074 <spi_init+0x110>
		module->mode           = config->mode;
    10ac:	7823      	ldrb	r3, [r4, #0]
    10ae:	464a      	mov	r2, r9
    10b0:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
    10b2:	7c23      	ldrb	r3, [r4, #16]
    10b4:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    10b6:	2000      	movs	r0, #0
    10b8:	e766      	b.n	f88 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    10ba:	0008      	movs	r0, r1
    10bc:	4b53      	ldr	r3, [pc, #332]	; (120c <spi_init+0x2a8>)
    10be:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    10c0:	4a53      	ldr	r2, [pc, #332]	; (1210 <spi_init+0x2ac>)
    10c2:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    10c4:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    10c6:	2301      	movs	r3, #1
    10c8:	40ab      	lsls	r3, r5
    10ca:	430b      	orrs	r3, r1
    10cc:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    10ce:	a909      	add	r1, sp, #36	; 0x24
    10d0:	2624      	movs	r6, #36	; 0x24
    10d2:	5da3      	ldrb	r3, [r4, r6]
    10d4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    10d6:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    10d8:	b2c5      	uxtb	r5, r0
    10da:	0028      	movs	r0, r5
    10dc:	4b4d      	ldr	r3, [pc, #308]	; (1214 <spi_init+0x2b0>)
    10de:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    10e0:	0028      	movs	r0, r5
    10e2:	4b4d      	ldr	r3, [pc, #308]	; (1218 <spi_init+0x2b4>)
    10e4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    10e6:	5da0      	ldrb	r0, [r4, r6]
    10e8:	2100      	movs	r1, #0
    10ea:	4b4c      	ldr	r3, [pc, #304]	; (121c <spi_init+0x2b8>)
    10ec:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    10ee:	7823      	ldrb	r3, [r4, #0]
    10f0:	2b01      	cmp	r3, #1
    10f2:	d019      	beq.n	1128 <spi_init+0x1c4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    10f4:	464b      	mov	r3, r9
    10f6:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    10f8:	ab04      	add	r3, sp, #16
    10fa:	2280      	movs	r2, #128	; 0x80
    10fc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    10fe:	2200      	movs	r2, #0
    1100:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1102:	2101      	movs	r1, #1
    1104:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    1106:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    1108:	7823      	ldrb	r3, [r4, #0]
    110a:	2b00      	cmp	r3, #0
    110c:	d101      	bne.n	1112 <spi_init+0x1ae>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    110e:	ab04      	add	r3, sp, #16
    1110:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1112:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1114:	9305      	str	r3, [sp, #20]
    1116:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1118:	9306      	str	r3, [sp, #24]
    111a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    111c:	9307      	str	r3, [sp, #28]
    111e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1120:	9308      	str	r3, [sp, #32]
    1122:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1124:	ad05      	add	r5, sp, #20
    1126:	e011      	b.n	114c <spi_init+0x1e8>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1128:	683b      	ldr	r3, [r7, #0]
    112a:	220c      	movs	r2, #12
    112c:	4313      	orrs	r3, r2
    112e:	603b      	str	r3, [r7, #0]
    1130:	e7e0      	b.n	10f4 <spi_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1132:	0030      	movs	r0, r6
    1134:	4b31      	ldr	r3, [pc, #196]	; (11fc <spi_init+0x298>)
    1136:	4798      	blx	r3
    1138:	e00d      	b.n	1156 <spi_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    113a:	a904      	add	r1, sp, #16
    113c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    113e:	0c00      	lsrs	r0, r0, #16
    1140:	b2c0      	uxtb	r0, r0
    1142:	4b37      	ldr	r3, [pc, #220]	; (1220 <spi_init+0x2bc>)
    1144:	4798      	blx	r3
    1146:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1148:	2f04      	cmp	r7, #4
    114a:	d007      	beq.n	115c <spi_init+0x1f8>
    114c:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    114e:	00bb      	lsls	r3, r7, #2
    1150:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    1152:	2800      	cmp	r0, #0
    1154:	d0ed      	beq.n	1132 <spi_init+0x1ce>
		if (current_pinmux != PINMUX_UNUSED) {
    1156:	1c43      	adds	r3, r0, #1
    1158:	d1ef      	bne.n	113a <spi_init+0x1d6>
    115a:	e7f4      	b.n	1146 <spi_init+0x1e2>
	module->mode             = config->mode;
    115c:	7823      	ldrb	r3, [r4, #0]
    115e:	464a      	mov	r2, r9
    1160:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    1162:	7c23      	ldrb	r3, [r4, #16]
    1164:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    1166:	7ca3      	ldrb	r3, [r4, #18]
    1168:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    116a:	7d23      	ldrb	r3, [r4, #20]
    116c:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    116e:	2200      	movs	r2, #0
    1170:	ab02      	add	r3, sp, #8
    1172:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1174:	7823      	ldrb	r3, [r4, #0]
    1176:	2b01      	cmp	r3, #1
    1178:	d028      	beq.n	11cc <spi_init+0x268>
	ctrla |= config->transfer_mode;
    117a:	6863      	ldr	r3, [r4, #4]
    117c:	68a2      	ldr	r2, [r4, #8]
    117e:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    1180:	68e2      	ldr	r2, [r4, #12]
    1182:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    1184:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    1186:	7c62      	ldrb	r2, [r4, #17]
    1188:	2a00      	cmp	r2, #0
    118a:	d103      	bne.n	1194 <spi_init+0x230>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    118c:	4a25      	ldr	r2, [pc, #148]	; (1224 <spi_init+0x2c0>)
    118e:	7892      	ldrb	r2, [r2, #2]
    1190:	0792      	lsls	r2, r2, #30
    1192:	d501      	bpl.n	1198 <spi_init+0x234>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1194:	2280      	movs	r2, #128	; 0x80
    1196:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    1198:	7ca2      	ldrb	r2, [r4, #18]
    119a:	2a00      	cmp	r2, #0
    119c:	d002      	beq.n	11a4 <spi_init+0x240>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    119e:	2280      	movs	r2, #128	; 0x80
    11a0:	0292      	lsls	r2, r2, #10
    11a2:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    11a4:	7ce2      	ldrb	r2, [r4, #19]
    11a6:	2a00      	cmp	r2, #0
    11a8:	d002      	beq.n	11b0 <spi_init+0x24c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    11aa:	2280      	movs	r2, #128	; 0x80
    11ac:	0092      	lsls	r2, r2, #2
    11ae:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    11b0:	7d22      	ldrb	r2, [r4, #20]
    11b2:	2a00      	cmp	r2, #0
    11b4:	d002      	beq.n	11bc <spi_init+0x258>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    11b6:	2280      	movs	r2, #128	; 0x80
    11b8:	0192      	lsls	r2, r2, #6
    11ba:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    11bc:	6832      	ldr	r2, [r6, #0]
    11be:	4313      	orrs	r3, r2
    11c0:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    11c2:	6873      	ldr	r3, [r6, #4]
    11c4:	430b      	orrs	r3, r1
    11c6:	6073      	str	r3, [r6, #4]
	return STATUS_OK;
    11c8:	2000      	movs	r0, #0
    11ca:	e6dd      	b.n	f88 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    11cc:	464b      	mov	r3, r9
    11ce:	6818      	ldr	r0, [r3, #0]
    11d0:	4b0e      	ldr	r3, [pc, #56]	; (120c <spi_init+0x2a8>)
    11d2:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    11d4:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    11d6:	b2c0      	uxtb	r0, r0
    11d8:	4b0a      	ldr	r3, [pc, #40]	; (1204 <spi_init+0x2a0>)
    11da:	4798      	blx	r3
    11dc:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    11de:	ab02      	add	r3, sp, #8
    11e0:	1d9a      	adds	r2, r3, #6
    11e2:	69a0      	ldr	r0, [r4, #24]
    11e4:	4b08      	ldr	r3, [pc, #32]	; (1208 <spi_init+0x2a4>)
    11e6:	4798      	blx	r3
    11e8:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    11ea:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    11ec:	2b00      	cmp	r3, #0
    11ee:	d000      	beq.n	11f2 <spi_init+0x28e>
    11f0:	e6ca      	b.n	f88 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    11f2:	ab02      	add	r3, sp, #8
    11f4:	3306      	adds	r3, #6
    11f6:	781b      	ldrb	r3, [r3, #0]
    11f8:	7333      	strb	r3, [r6, #12]
    11fa:	e7be      	b.n	117a <spi_init+0x216>
    11fc:	00000ce5 	.word	0x00000ce5
    1200:	41004400 	.word	0x41004400
    1204:	0000211d 	.word	0x0000211d
    1208:	00000aa1 	.word	0x00000aa1
    120c:	00000e5d 	.word	0x00000e5d
    1210:	40000400 	.word	0x40000400
    1214:	00002101 	.word	0x00002101
    1218:	00002075 	.word	0x00002075
    121c:	00000c99 	.word	0x00000c99
    1220:	000021f9 	.word	0x000021f9
    1224:	41002000 	.word	0x41002000

00001228 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1228:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    122a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    122c:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    122e:	2c01      	cmp	r4, #1
    1230:	d001      	beq.n	1236 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    1232:	0018      	movs	r0, r3
    1234:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    1236:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    1238:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    123a:	2c00      	cmp	r4, #0
    123c:	d1f9      	bne.n	1232 <spi_select_slave+0xa>
		if (select) {
    123e:	2a00      	cmp	r2, #0
    1240:	d058      	beq.n	12f4 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    1242:	784b      	ldrb	r3, [r1, #1]
    1244:	2b00      	cmp	r3, #0
    1246:	d044      	beq.n	12d2 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1248:	6803      	ldr	r3, [r0, #0]
    124a:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    124c:	07db      	lsls	r3, r3, #31
    124e:	d410      	bmi.n	1272 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    1250:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1252:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1254:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1256:	2900      	cmp	r1, #0
    1258:	d104      	bne.n	1264 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    125a:	0953      	lsrs	r3, r2, #5
    125c:	01db      	lsls	r3, r3, #7
    125e:	492e      	ldr	r1, [pc, #184]	; (1318 <spi_select_slave+0xf0>)
    1260:	468c      	mov	ip, r1
    1262:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1264:	211f      	movs	r1, #31
    1266:	4011      	ands	r1, r2
    1268:	2201      	movs	r2, #1
    126a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    126c:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    126e:	2305      	movs	r3, #5
    1270:	e7df      	b.n	1232 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1272:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1274:	09d4      	lsrs	r4, r2, #7
		return NULL;
    1276:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1278:	2c00      	cmp	r4, #0
    127a:	d104      	bne.n	1286 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    127c:	0953      	lsrs	r3, r2, #5
    127e:	01db      	lsls	r3, r3, #7
    1280:	4c25      	ldr	r4, [pc, #148]	; (1318 <spi_select_slave+0xf0>)
    1282:	46a4      	mov	ip, r4
    1284:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1286:	241f      	movs	r4, #31
    1288:	4014      	ands	r4, r2
    128a:	2201      	movs	r2, #1
    128c:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    128e:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1290:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1292:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1294:	07d2      	lsls	r2, r2, #31
    1296:	d501      	bpl.n	129c <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1298:	788a      	ldrb	r2, [r1, #2]
    129a:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    129c:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    129e:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    12a0:	2a00      	cmp	r2, #0
    12a2:	d1c6      	bne.n	1232 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    12a4:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    12a6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    12a8:	7e13      	ldrb	r3, [r2, #24]
    12aa:	420b      	tst	r3, r1
    12ac:	d0fc      	beq.n	12a8 <spi_select_slave+0x80>
    12ae:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    12b0:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    12b2:	0749      	lsls	r1, r1, #29
    12b4:	d5bd      	bpl.n	1232 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    12b6:	8b53      	ldrh	r3, [r2, #26]
    12b8:	075b      	lsls	r3, r3, #29
    12ba:	d501      	bpl.n	12c0 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    12bc:	2304      	movs	r3, #4
    12be:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    12c0:	7983      	ldrb	r3, [r0, #6]
    12c2:	2b01      	cmp	r3, #1
    12c4:	d002      	beq.n	12cc <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    12c6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    12c8:	2300      	movs	r3, #0
    12ca:	e7b2      	b.n	1232 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    12cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    12ce:	2300      	movs	r3, #0
    12d0:	e7af      	b.n	1232 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    12d2:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    12d4:	09d1      	lsrs	r1, r2, #7
		return NULL;
    12d6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    12d8:	2900      	cmp	r1, #0
    12da:	d104      	bne.n	12e6 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    12dc:	0953      	lsrs	r3, r2, #5
    12de:	01db      	lsls	r3, r3, #7
    12e0:	490d      	ldr	r1, [pc, #52]	; (1318 <spi_select_slave+0xf0>)
    12e2:	468c      	mov	ip, r1
    12e4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    12e6:	211f      	movs	r1, #31
    12e8:	4011      	ands	r1, r2
    12ea:	2201      	movs	r2, #1
    12ec:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    12ee:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    12f0:	2300      	movs	r3, #0
    12f2:	e79e      	b.n	1232 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    12f4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    12f6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    12f8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    12fa:	2900      	cmp	r1, #0
    12fc:	d104      	bne.n	1308 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    12fe:	0953      	lsrs	r3, r2, #5
    1300:	01db      	lsls	r3, r3, #7
    1302:	4905      	ldr	r1, [pc, #20]	; (1318 <spi_select_slave+0xf0>)
    1304:	468c      	mov	ip, r1
    1306:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1308:	211f      	movs	r1, #31
    130a:	4011      	ands	r1, r2
    130c:	2201      	movs	r2, #1
    130e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1310:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    1312:	2300      	movs	r3, #0
    1314:	e78d      	b.n	1232 <spi_select_slave+0xa>
    1316:	46c0      	nop			; (mov r8, r8)
    1318:	41004400 	.word	0x41004400

0000131c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    131c:	b5f0      	push	{r4, r5, r6, r7, lr}
    131e:	46de      	mov	lr, fp
    1320:	4657      	mov	r7, sl
    1322:	464e      	mov	r6, r9
    1324:	4645      	mov	r5, r8
    1326:	b5e0      	push	{r5, r6, r7, lr}
    1328:	b091      	sub	sp, #68	; 0x44
    132a:	0005      	movs	r5, r0
    132c:	000c      	movs	r4, r1
    132e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1330:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1332:	0008      	movs	r0, r1
    1334:	4bbb      	ldr	r3, [pc, #748]	; (1624 <usart_init+0x308>)
    1336:	4798      	blx	r3
    1338:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    133a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    133c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    133e:	07db      	lsls	r3, r3, #31
    1340:	d506      	bpl.n	1350 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1342:	b011      	add	sp, #68	; 0x44
    1344:	bc3c      	pop	{r2, r3, r4, r5}
    1346:	4690      	mov	r8, r2
    1348:	4699      	mov	r9, r3
    134a:	46a2      	mov	sl, r4
    134c:	46ab      	mov	fp, r5
    134e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1350:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1352:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1354:	079b      	lsls	r3, r3, #30
    1356:	d4f4      	bmi.n	1342 <usart_init+0x26>
    1358:	49b3      	ldr	r1, [pc, #716]	; (1628 <usart_init+0x30c>)
    135a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    135c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    135e:	2301      	movs	r3, #1
    1360:	40bb      	lsls	r3, r7
    1362:	4303      	orrs	r3, r0
    1364:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1366:	a90f      	add	r1, sp, #60	; 0x3c
    1368:	272d      	movs	r7, #45	; 0x2d
    136a:	5df3      	ldrb	r3, [r6, r7]
    136c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    136e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1370:	b2d3      	uxtb	r3, r2
    1372:	9302      	str	r3, [sp, #8]
    1374:	0018      	movs	r0, r3
    1376:	4bad      	ldr	r3, [pc, #692]	; (162c <usart_init+0x310>)
    1378:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    137a:	9802      	ldr	r0, [sp, #8]
    137c:	4bac      	ldr	r3, [pc, #688]	; (1630 <usart_init+0x314>)
    137e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1380:	5df0      	ldrb	r0, [r6, r7]
    1382:	2100      	movs	r1, #0
    1384:	4bab      	ldr	r3, [pc, #684]	; (1634 <usart_init+0x318>)
    1386:	4798      	blx	r3
	module->character_size = config->character_size;
    1388:	7af3      	ldrb	r3, [r6, #11]
    138a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    138c:	2324      	movs	r3, #36	; 0x24
    138e:	5cf3      	ldrb	r3, [r6, r3]
    1390:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1392:	2325      	movs	r3, #37	; 0x25
    1394:	5cf3      	ldrb	r3, [r6, r3]
    1396:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1398:	7ef3      	ldrb	r3, [r6, #27]
    139a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    139c:	7f33      	ldrb	r3, [r6, #28]
    139e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    13a0:	682b      	ldr	r3, [r5, #0]
    13a2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    13a4:	0018      	movs	r0, r3
    13a6:	4b9f      	ldr	r3, [pc, #636]	; (1624 <usart_init+0x308>)
    13a8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    13aa:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    13ac:	2200      	movs	r2, #0
    13ae:	230e      	movs	r3, #14
    13b0:	a906      	add	r1, sp, #24
    13b2:	468c      	mov	ip, r1
    13b4:	4463      	add	r3, ip
    13b6:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    13b8:	8a32      	ldrh	r2, [r6, #16]
    13ba:	9202      	str	r2, [sp, #8]
    13bc:	2380      	movs	r3, #128	; 0x80
    13be:	01db      	lsls	r3, r3, #7
    13c0:	429a      	cmp	r2, r3
    13c2:	d100      	bne.n	13c6 <usart_init+0xaa>
    13c4:	e09c      	b.n	1500 <usart_init+0x1e4>
    13c6:	d90f      	bls.n	13e8 <usart_init+0xcc>
    13c8:	23c0      	movs	r3, #192	; 0xc0
    13ca:	01db      	lsls	r3, r3, #7
    13cc:	9a02      	ldr	r2, [sp, #8]
    13ce:	429a      	cmp	r2, r3
    13d0:	d100      	bne.n	13d4 <usart_init+0xb8>
    13d2:	e090      	b.n	14f6 <usart_init+0x1da>
    13d4:	2380      	movs	r3, #128	; 0x80
    13d6:	021b      	lsls	r3, r3, #8
    13d8:	429a      	cmp	r2, r3
    13da:	d000      	beq.n	13de <usart_init+0xc2>
    13dc:	e11d      	b.n	161a <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    13de:	2303      	movs	r3, #3
    13e0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    13e2:	2300      	movs	r3, #0
    13e4:	9307      	str	r3, [sp, #28]
    13e6:	e008      	b.n	13fa <usart_init+0xde>
	switch (config->sample_rate) {
    13e8:	2380      	movs	r3, #128	; 0x80
    13ea:	019b      	lsls	r3, r3, #6
    13ec:	429a      	cmp	r2, r3
    13ee:	d000      	beq.n	13f2 <usart_init+0xd6>
    13f0:	e113      	b.n	161a <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    13f2:	2310      	movs	r3, #16
    13f4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    13f6:	3b0f      	subs	r3, #15
    13f8:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    13fa:	6833      	ldr	r3, [r6, #0]
    13fc:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    13fe:	68f3      	ldr	r3, [r6, #12]
    1400:	469b      	mov	fp, r3
		config->sample_adjustment |
    1402:	6973      	ldr	r3, [r6, #20]
    1404:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1406:	7e33      	ldrb	r3, [r6, #24]
    1408:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    140a:	2326      	movs	r3, #38	; 0x26
    140c:	5cf3      	ldrb	r3, [r6, r3]
    140e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1410:	6873      	ldr	r3, [r6, #4]
    1412:	4699      	mov	r9, r3
	switch (transfer_mode)
    1414:	2b00      	cmp	r3, #0
    1416:	d100      	bne.n	141a <usart_init+0xfe>
    1418:	e09e      	b.n	1558 <usart_init+0x23c>
    141a:	2380      	movs	r3, #128	; 0x80
    141c:	055b      	lsls	r3, r3, #21
    141e:	4599      	cmp	r9, r3
    1420:	d100      	bne.n	1424 <usart_init+0x108>
    1422:	e082      	b.n	152a <usart_init+0x20e>
	if(config->encoding_format_enable) {
    1424:	7e73      	ldrb	r3, [r6, #25]
    1426:	2b00      	cmp	r3, #0
    1428:	d002      	beq.n	1430 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    142a:	7eb3      	ldrb	r3, [r6, #26]
    142c:	4642      	mov	r2, r8
    142e:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1430:	682a      	ldr	r2, [r5, #0]
    1432:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    1434:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1436:	2b00      	cmp	r3, #0
    1438:	d1fc      	bne.n	1434 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    143a:	330e      	adds	r3, #14
    143c:	aa06      	add	r2, sp, #24
    143e:	4694      	mov	ip, r2
    1440:	4463      	add	r3, ip
    1442:	881b      	ldrh	r3, [r3, #0]
    1444:	4642      	mov	r2, r8
    1446:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1448:	9b05      	ldr	r3, [sp, #20]
    144a:	465a      	mov	r2, fp
    144c:	4313      	orrs	r3, r2
    144e:	9a03      	ldr	r2, [sp, #12]
    1450:	4313      	orrs	r3, r2
    1452:	464a      	mov	r2, r9
    1454:	4313      	orrs	r3, r2
    1456:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1458:	9b04      	ldr	r3, [sp, #16]
    145a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    145c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    145e:	4653      	mov	r3, sl
    1460:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1462:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1464:	2327      	movs	r3, #39	; 0x27
    1466:	5cf3      	ldrb	r3, [r6, r3]
    1468:	2b00      	cmp	r3, #0
    146a:	d101      	bne.n	1470 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    146c:	3304      	adds	r3, #4
    146e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1470:	7e73      	ldrb	r3, [r6, #25]
    1472:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1474:	7f32      	ldrb	r2, [r6, #28]
    1476:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1478:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    147a:	7f72      	ldrb	r2, [r6, #29]
    147c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    147e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1480:	2224      	movs	r2, #36	; 0x24
    1482:	5cb2      	ldrb	r2, [r6, r2]
    1484:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1486:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1488:	2225      	movs	r2, #37	; 0x25
    148a:	5cb2      	ldrb	r2, [r6, r2]
    148c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    148e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1490:	7af1      	ldrb	r1, [r6, #11]
    1492:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1494:	8933      	ldrh	r3, [r6, #8]
    1496:	2bff      	cmp	r3, #255	; 0xff
    1498:	d100      	bne.n	149c <usart_init+0x180>
    149a:	e081      	b.n	15a0 <usart_init+0x284>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    149c:	2280      	movs	r2, #128	; 0x80
    149e:	0452      	lsls	r2, r2, #17
    14a0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    14a2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    14a4:	232c      	movs	r3, #44	; 0x2c
    14a6:	5cf3      	ldrb	r3, [r6, r3]
    14a8:	2b00      	cmp	r3, #0
    14aa:	d103      	bne.n	14b4 <usart_init+0x198>
    14ac:	4b62      	ldr	r3, [pc, #392]	; (1638 <usart_init+0x31c>)
    14ae:	789b      	ldrb	r3, [r3, #2]
    14b0:	079b      	lsls	r3, r3, #30
    14b2:	d501      	bpl.n	14b8 <usart_init+0x19c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    14b4:	2380      	movs	r3, #128	; 0x80
    14b6:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    14b8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    14ba:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    14bc:	2b00      	cmp	r3, #0
    14be:	d1fc      	bne.n	14ba <usart_init+0x19e>
	usart_hw->CTRLB.reg = ctrlb;
    14c0:	4643      	mov	r3, r8
    14c2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    14c4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    14c6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    14c8:	2b00      	cmp	r3, #0
    14ca:	d1fc      	bne.n	14c6 <usart_init+0x1aa>
	usart_hw->CTRLA.reg = ctrla;
    14cc:	4643      	mov	r3, r8
    14ce:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    14d0:	ab0e      	add	r3, sp, #56	; 0x38
    14d2:	2280      	movs	r2, #128	; 0x80
    14d4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    14d6:	2200      	movs	r2, #0
    14d8:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    14da:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    14dc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    14de:	6b33      	ldr	r3, [r6, #48]	; 0x30
    14e0:	930a      	str	r3, [sp, #40]	; 0x28
    14e2:	6b73      	ldr	r3, [r6, #52]	; 0x34
    14e4:	930b      	str	r3, [sp, #44]	; 0x2c
    14e6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    14e8:	930c      	str	r3, [sp, #48]	; 0x30
    14ea:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    14ec:	9302      	str	r3, [sp, #8]
    14ee:	930d      	str	r3, [sp, #52]	; 0x34
    14f0:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    14f2:	ae0a      	add	r6, sp, #40	; 0x28
    14f4:	e063      	b.n	15be <usart_init+0x2a2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    14f6:	2308      	movs	r3, #8
    14f8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    14fa:	3b07      	subs	r3, #7
    14fc:	9307      	str	r3, [sp, #28]
    14fe:	e77c      	b.n	13fa <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1500:	6833      	ldr	r3, [r6, #0]
    1502:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1504:	68f3      	ldr	r3, [r6, #12]
    1506:	469b      	mov	fp, r3
		config->sample_adjustment |
    1508:	6973      	ldr	r3, [r6, #20]
    150a:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    150c:	7e33      	ldrb	r3, [r6, #24]
    150e:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1510:	2326      	movs	r3, #38	; 0x26
    1512:	5cf3      	ldrb	r3, [r6, r3]
    1514:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1516:	6873      	ldr	r3, [r6, #4]
    1518:	4699      	mov	r9, r3
	switch (transfer_mode)
    151a:	2b00      	cmp	r3, #0
    151c:	d018      	beq.n	1550 <usart_init+0x234>
    151e:	2380      	movs	r3, #128	; 0x80
    1520:	055b      	lsls	r3, r3, #21
    1522:	4599      	cmp	r9, r3
    1524:	d001      	beq.n	152a <usart_init+0x20e>
	enum status_code status_code = STATUS_OK;
    1526:	2000      	movs	r0, #0
    1528:	e025      	b.n	1576 <usart_init+0x25a>
			if (!config->use_external_clock) {
    152a:	2327      	movs	r3, #39	; 0x27
    152c:	5cf3      	ldrb	r3, [r6, r3]
    152e:	2b00      	cmp	r3, #0
    1530:	d000      	beq.n	1534 <usart_init+0x218>
    1532:	e777      	b.n	1424 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1534:	6a33      	ldr	r3, [r6, #32]
    1536:	001f      	movs	r7, r3
    1538:	b2c0      	uxtb	r0, r0
    153a:	4b40      	ldr	r3, [pc, #256]	; (163c <usart_init+0x320>)
    153c:	4798      	blx	r3
    153e:	0001      	movs	r1, r0
    1540:	220e      	movs	r2, #14
    1542:	ab06      	add	r3, sp, #24
    1544:	469c      	mov	ip, r3
    1546:	4462      	add	r2, ip
    1548:	0038      	movs	r0, r7
    154a:	4b3d      	ldr	r3, [pc, #244]	; (1640 <usart_init+0x324>)
    154c:	4798      	blx	r3
    154e:	e012      	b.n	1576 <usart_init+0x25a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1550:	2308      	movs	r3, #8
    1552:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1554:	2300      	movs	r3, #0
    1556:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1558:	2327      	movs	r3, #39	; 0x27
    155a:	5cf3      	ldrb	r3, [r6, r3]
    155c:	2b00      	cmp	r3, #0
    155e:	d00e      	beq.n	157e <usart_init+0x262>
				status_code =
    1560:	9b06      	ldr	r3, [sp, #24]
    1562:	9300      	str	r3, [sp, #0]
    1564:	9b07      	ldr	r3, [sp, #28]
    1566:	220e      	movs	r2, #14
    1568:	a906      	add	r1, sp, #24
    156a:	468c      	mov	ip, r1
    156c:	4462      	add	r2, ip
    156e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1570:	6a30      	ldr	r0, [r6, #32]
    1572:	4f34      	ldr	r7, [pc, #208]	; (1644 <usart_init+0x328>)
    1574:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1576:	2800      	cmp	r0, #0
    1578:	d000      	beq.n	157c <usart_init+0x260>
    157a:	e6e2      	b.n	1342 <usart_init+0x26>
    157c:	e752      	b.n	1424 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    157e:	6a33      	ldr	r3, [r6, #32]
    1580:	001f      	movs	r7, r3
    1582:	b2c0      	uxtb	r0, r0
    1584:	4b2d      	ldr	r3, [pc, #180]	; (163c <usart_init+0x320>)
    1586:	4798      	blx	r3
    1588:	0001      	movs	r1, r0
				status_code =
    158a:	9b06      	ldr	r3, [sp, #24]
    158c:	9300      	str	r3, [sp, #0]
    158e:	9b07      	ldr	r3, [sp, #28]
    1590:	220e      	movs	r2, #14
    1592:	a806      	add	r0, sp, #24
    1594:	4684      	mov	ip, r0
    1596:	4462      	add	r2, ip
    1598:	0038      	movs	r0, r7
    159a:	4f2a      	ldr	r7, [pc, #168]	; (1644 <usart_init+0x328>)
    159c:	47b8      	blx	r7
    159e:	e7ea      	b.n	1576 <usart_init+0x25a>
		if(config->lin_slave_enable) {
    15a0:	7ef3      	ldrb	r3, [r6, #27]
    15a2:	2b00      	cmp	r3, #0
    15a4:	d100      	bne.n	15a8 <usart_init+0x28c>
    15a6:	e77d      	b.n	14a4 <usart_init+0x188>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    15a8:	2380      	movs	r3, #128	; 0x80
    15aa:	04db      	lsls	r3, r3, #19
    15ac:	431f      	orrs	r7, r3
    15ae:	e779      	b.n	14a4 <usart_init+0x188>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    15b0:	0020      	movs	r0, r4
    15b2:	4b25      	ldr	r3, [pc, #148]	; (1648 <usart_init+0x32c>)
    15b4:	4798      	blx	r3
    15b6:	e007      	b.n	15c8 <usart_init+0x2ac>
    15b8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    15ba:	2f04      	cmp	r7, #4
    15bc:	d00d      	beq.n	15da <usart_init+0x2be>
    15be:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    15c0:	00bb      	lsls	r3, r7, #2
    15c2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    15c4:	2800      	cmp	r0, #0
    15c6:	d0f3      	beq.n	15b0 <usart_init+0x294>
		if (current_pinmux != PINMUX_UNUSED) {
    15c8:	1c43      	adds	r3, r0, #1
    15ca:	d0f5      	beq.n	15b8 <usart_init+0x29c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    15cc:	a90e      	add	r1, sp, #56	; 0x38
    15ce:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    15d0:	0c00      	lsrs	r0, r0, #16
    15d2:	b2c0      	uxtb	r0, r0
    15d4:	4b1d      	ldr	r3, [pc, #116]	; (164c <usart_init+0x330>)
    15d6:	4798      	blx	r3
    15d8:	e7ee      	b.n	15b8 <usart_init+0x29c>
		module->callback[i]            = NULL;
    15da:	2300      	movs	r3, #0
    15dc:	60eb      	str	r3, [r5, #12]
    15de:	612b      	str	r3, [r5, #16]
    15e0:	616b      	str	r3, [r5, #20]
    15e2:	61ab      	str	r3, [r5, #24]
    15e4:	61eb      	str	r3, [r5, #28]
    15e6:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    15e8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    15ea:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    15ec:	2200      	movs	r2, #0
    15ee:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    15f0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    15f2:	3330      	adds	r3, #48	; 0x30
    15f4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    15f6:	3301      	adds	r3, #1
    15f8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    15fa:	3301      	adds	r3, #1
    15fc:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    15fe:	3301      	adds	r3, #1
    1600:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1602:	6828      	ldr	r0, [r5, #0]
    1604:	4b07      	ldr	r3, [pc, #28]	; (1624 <usart_init+0x308>)
    1606:	4798      	blx	r3
    1608:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    160a:	4911      	ldr	r1, [pc, #68]	; (1650 <usart_init+0x334>)
    160c:	4b11      	ldr	r3, [pc, #68]	; (1654 <usart_init+0x338>)
    160e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1610:	00a4      	lsls	r4, r4, #2
    1612:	4b11      	ldr	r3, [pc, #68]	; (1658 <usart_init+0x33c>)
    1614:	50e5      	str	r5, [r4, r3]
	return status_code;
    1616:	2000      	movs	r0, #0
    1618:	e693      	b.n	1342 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    161a:	2310      	movs	r3, #16
    161c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    161e:	2300      	movs	r3, #0
    1620:	9307      	str	r3, [sp, #28]
    1622:	e6ea      	b.n	13fa <usart_init+0xde>
    1624:	00000e5d 	.word	0x00000e5d
    1628:	40000400 	.word	0x40000400
    162c:	00002101 	.word	0x00002101
    1630:	00002075 	.word	0x00002075
    1634:	00000c99 	.word	0x00000c99
    1638:	41002000 	.word	0x41002000
    163c:	0000211d 	.word	0x0000211d
    1640:	00000aa1 	.word	0x00000aa1
    1644:	00000ac9 	.word	0x00000ac9
    1648:	00000ce5 	.word	0x00000ce5
    164c:	000021f9 	.word	0x000021f9
    1650:	00001819 	.word	0x00001819
    1654:	00000e99 	.word	0x00000e99
    1658:	200009b8 	.word	0x200009b8

0000165c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    165c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    165e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1660:	2a00      	cmp	r2, #0
    1662:	d101      	bne.n	1668 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1664:	0018      	movs	r0, r3
    1666:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1668:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    166a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    166c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    166e:	2a00      	cmp	r2, #0
    1670:	d1f8      	bne.n	1664 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1672:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1674:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1676:	2a00      	cmp	r2, #0
    1678:	d1fc      	bne.n	1674 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    167a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    167c:	2102      	movs	r1, #2
    167e:	7e1a      	ldrb	r2, [r3, #24]
    1680:	420a      	tst	r2, r1
    1682:	d0fc      	beq.n	167e <usart_write_wait+0x22>
	return STATUS_OK;
    1684:	2300      	movs	r3, #0
    1686:	e7ed      	b.n	1664 <usart_write_wait+0x8>

00001688 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1688:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    168a:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    168c:	2a00      	cmp	r2, #0
    168e:	d101      	bne.n	1694 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1690:	0018      	movs	r0, r3
    1692:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1694:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1696:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1698:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    169a:	2a00      	cmp	r2, #0
    169c:	d1f8      	bne.n	1690 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    169e:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    16a0:	7e10      	ldrb	r0, [r2, #24]
    16a2:	0740      	lsls	r0, r0, #29
    16a4:	d5f4      	bpl.n	1690 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    16a6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    16a8:	2b00      	cmp	r3, #0
    16aa:	d1fc      	bne.n	16a6 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    16ac:	8b53      	ldrh	r3, [r2, #26]
    16ae:	b2db      	uxtb	r3, r3
	if (error_code) {
    16b0:	0698      	lsls	r0, r3, #26
    16b2:	d01d      	beq.n	16f0 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    16b4:	0798      	lsls	r0, r3, #30
    16b6:	d503      	bpl.n	16c0 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    16b8:	2302      	movs	r3, #2
    16ba:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    16bc:	3318      	adds	r3, #24
    16be:	e7e7      	b.n	1690 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    16c0:	0758      	lsls	r0, r3, #29
    16c2:	d503      	bpl.n	16cc <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    16c4:	2304      	movs	r3, #4
    16c6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    16c8:	331a      	adds	r3, #26
    16ca:	e7e1      	b.n	1690 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    16cc:	07d8      	lsls	r0, r3, #31
    16ce:	d503      	bpl.n	16d8 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    16d0:	2301      	movs	r3, #1
    16d2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    16d4:	3312      	adds	r3, #18
    16d6:	e7db      	b.n	1690 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    16d8:	06d8      	lsls	r0, r3, #27
    16da:	d503      	bpl.n	16e4 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    16dc:	2310      	movs	r3, #16
    16de:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    16e0:	3332      	adds	r3, #50	; 0x32
    16e2:	e7d5      	b.n	1690 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    16e4:	069b      	lsls	r3, r3, #26
    16e6:	d503      	bpl.n	16f0 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    16e8:	2320      	movs	r3, #32
    16ea:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    16ec:	3321      	adds	r3, #33	; 0x21
    16ee:	e7cf      	b.n	1690 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    16f0:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    16f2:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    16f4:	2300      	movs	r3, #0
    16f6:	e7cb      	b.n	1690 <usart_read_wait+0x8>

000016f8 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    16f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    16fa:	46d6      	mov	lr, sl
    16fc:	b500      	push	{lr}
    16fe:	b084      	sub	sp, #16
    1700:	0004      	movs	r4, r0
    1702:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1704:	2017      	movs	r0, #23
	if (length == 0) {
    1706:	2a00      	cmp	r2, #0
    1708:	d103      	bne.n	1712 <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    170a:	b004      	add	sp, #16
    170c:	bc04      	pop	{r2}
    170e:	4692      	mov	sl, r2
    1710:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    1712:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    1714:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    1716:	2b00      	cmp	r3, #0
    1718:	d0f7      	beq.n	170a <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    171a:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    171c:	3a01      	subs	r2, #1
    171e:	b293      	uxth	r3, r2
    1720:	469a      	mov	sl, r3
    1722:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    1724:	2704      	movs	r7, #4
    1726:	e019      	b.n	175c <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    1728:	2300      	movs	r3, #0
    172a:	aa02      	add	r2, sp, #8
    172c:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    172e:	1d91      	adds	r1, r2, #6
    1730:	0020      	movs	r0, r4
    1732:	4b15      	ldr	r3, [pc, #84]	; (1788 <usart_read_buffer_wait+0x90>)
    1734:	4798      	blx	r3
		if (retval != STATUS_OK) {
    1736:	2800      	cmp	r0, #0
    1738:	d1e7      	bne.n	170a <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    173a:	1c69      	adds	r1, r5, #1
    173c:	b289      	uxth	r1, r1
    173e:	ab02      	add	r3, sp, #8
    1740:	88db      	ldrh	r3, [r3, #6]
    1742:	9a01      	ldr	r2, [sp, #4]
    1744:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1746:	7962      	ldrb	r2, [r4, #5]
    1748:	2a01      	cmp	r2, #1
    174a:	d014      	beq.n	1776 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    174c:	000d      	movs	r5, r1
	while (length--) {
    174e:	4653      	mov	r3, sl
    1750:	3b01      	subs	r3, #1
    1752:	b29b      	uxth	r3, r3
    1754:	469a      	mov	sl, r3
    1756:	4b0d      	ldr	r3, [pc, #52]	; (178c <usart_read_buffer_wait+0x94>)
    1758:	459a      	cmp	sl, r3
    175a:	d0d6      	beq.n	170a <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    175c:	7e33      	ldrb	r3, [r6, #24]
    175e:	423b      	tst	r3, r7
    1760:	d1e2      	bne.n	1728 <usart_read_buffer_wait+0x30>
    1762:	4b0a      	ldr	r3, [pc, #40]	; (178c <usart_read_buffer_wait+0x94>)
    1764:	7e32      	ldrb	r2, [r6, #24]
    1766:	423a      	tst	r2, r7
    1768:	d1de      	bne.n	1728 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    176a:	2b01      	cmp	r3, #1
    176c:	d009      	beq.n	1782 <usart_read_buffer_wait+0x8a>
    176e:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1770:	2b00      	cmp	r3, #0
    1772:	d1f7      	bne.n	1764 <usart_read_buffer_wait+0x6c>
    1774:	e7d8      	b.n	1728 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    1776:	3502      	adds	r5, #2
    1778:	b2ad      	uxth	r5, r5
    177a:	0a1b      	lsrs	r3, r3, #8
    177c:	9a01      	ldr	r2, [sp, #4]
    177e:	5453      	strb	r3, [r2, r1]
    1780:	e7e5      	b.n	174e <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    1782:	2012      	movs	r0, #18
    1784:	e7c1      	b.n	170a <usart_read_buffer_wait+0x12>
    1786:	46c0      	nop			; (mov r8, r8)
    1788:	00001689 	.word	0x00001689
    178c:	0000ffff 	.word	0x0000ffff

00001790 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1792:	0004      	movs	r4, r0
    1794:	000d      	movs	r5, r1
    1796:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1798:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    179a:	4b0f      	ldr	r3, [pc, #60]	; (17d8 <_usart_read_buffer+0x48>)
    179c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    179e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    17a0:	b29b      	uxth	r3, r3
    17a2:	2b00      	cmp	r3, #0
    17a4:	d003      	beq.n	17ae <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    17a6:	4b0d      	ldr	r3, [pc, #52]	; (17dc <_usart_read_buffer+0x4c>)
    17a8:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    17aa:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    17ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    17ae:	85a6      	strh	r6, [r4, #44]	; 0x2c
    17b0:	4b0a      	ldr	r3, [pc, #40]	; (17dc <_usart_read_buffer+0x4c>)
    17b2:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    17b4:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    17b6:	2205      	movs	r2, #5
    17b8:	2332      	movs	r3, #50	; 0x32
    17ba:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    17bc:	3b2e      	subs	r3, #46	; 0x2e
    17be:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    17c0:	7a23      	ldrb	r3, [r4, #8]
    17c2:	2b00      	cmp	r3, #0
    17c4:	d001      	beq.n	17ca <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    17c6:	2320      	movs	r3, #32
    17c8:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    17ca:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    17cc:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    17ce:	2b00      	cmp	r3, #0
    17d0:	d0ec      	beq.n	17ac <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    17d2:	2308      	movs	r3, #8
    17d4:	75bb      	strb	r3, [r7, #22]
    17d6:	e7e9      	b.n	17ac <_usart_read_buffer+0x1c>
    17d8:	000007a9 	.word	0x000007a9
    17dc:	000007e9 	.word	0x000007e9

000017e0 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    17e0:	1c93      	adds	r3, r2, #2
    17e2:	009b      	lsls	r3, r3, #2
    17e4:	18c3      	adds	r3, r0, r3
    17e6:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    17e8:	2130      	movs	r1, #48	; 0x30
    17ea:	2301      	movs	r3, #1
    17ec:	4093      	lsls	r3, r2
    17ee:	001a      	movs	r2, r3
    17f0:	5c43      	ldrb	r3, [r0, r1]
    17f2:	4313      	orrs	r3, r2
    17f4:	5443      	strb	r3, [r0, r1]
}
    17f6:	4770      	bx	lr

000017f8 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    17f8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    17fa:	2317      	movs	r3, #23
	if (length == 0) {
    17fc:	2a00      	cmp	r2, #0
    17fe:	d101      	bne.n	1804 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    1800:	0018      	movs	r0, r3
    1802:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    1804:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    1806:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    1808:	2c00      	cmp	r4, #0
    180a:	d0f9      	beq.n	1800 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    180c:	4b01      	ldr	r3, [pc, #4]	; (1814 <usart_read_buffer_job+0x1c>)
    180e:	4798      	blx	r3
    1810:	0003      	movs	r3, r0
    1812:	e7f5      	b.n	1800 <usart_read_buffer_job+0x8>
    1814:	00001791 	.word	0x00001791

00001818 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    181a:	0080      	lsls	r0, r0, #2
    181c:	4b62      	ldr	r3, [pc, #392]	; (19a8 <_usart_interrupt_handler+0x190>)
    181e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1820:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1822:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1824:	2b00      	cmp	r3, #0
    1826:	d1fc      	bne.n	1822 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1828:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    182a:	7da6      	ldrb	r6, [r4, #22]
    182c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    182e:	2330      	movs	r3, #48	; 0x30
    1830:	5ceb      	ldrb	r3, [r5, r3]
    1832:	2231      	movs	r2, #49	; 0x31
    1834:	5caf      	ldrb	r7, [r5, r2]
    1836:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1838:	07f3      	lsls	r3, r6, #31
    183a:	d522      	bpl.n	1882 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    183c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    183e:	b29b      	uxth	r3, r3
    1840:	2b00      	cmp	r3, #0
    1842:	d01c      	beq.n	187e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1844:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1846:	7813      	ldrb	r3, [r2, #0]
    1848:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    184a:	1c51      	adds	r1, r2, #1
    184c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    184e:	7969      	ldrb	r1, [r5, #5]
    1850:	2901      	cmp	r1, #1
    1852:	d00e      	beq.n	1872 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1854:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1856:	05db      	lsls	r3, r3, #23
    1858:	0ddb      	lsrs	r3, r3, #23
    185a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    185c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    185e:	3b01      	subs	r3, #1
    1860:	b29b      	uxth	r3, r3
    1862:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1864:	2b00      	cmp	r3, #0
    1866:	d10c      	bne.n	1882 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1868:	3301      	adds	r3, #1
    186a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    186c:	3301      	adds	r3, #1
    186e:	75a3      	strb	r3, [r4, #22]
    1870:	e007      	b.n	1882 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1872:	7851      	ldrb	r1, [r2, #1]
    1874:	0209      	lsls	r1, r1, #8
    1876:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1878:	3202      	adds	r2, #2
    187a:	62aa      	str	r2, [r5, #40]	; 0x28
    187c:	e7eb      	b.n	1856 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    187e:	2301      	movs	r3, #1
    1880:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1882:	07b3      	lsls	r3, r6, #30
    1884:	d506      	bpl.n	1894 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1886:	2302      	movs	r3, #2
    1888:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    188a:	2200      	movs	r2, #0
    188c:	3331      	adds	r3, #49	; 0x31
    188e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1890:	07fb      	lsls	r3, r7, #31
    1892:	d41a      	bmi.n	18ca <_usart_interrupt_handler+0xb2>

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1894:	0773      	lsls	r3, r6, #29
    1896:	d565      	bpl.n	1964 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1898:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    189a:	b29b      	uxth	r3, r3
    189c:	2b00      	cmp	r3, #0
    189e:	d05f      	beq.n	1960 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    18a0:	8b63      	ldrh	r3, [r4, #26]
    18a2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    18a4:	071a      	lsls	r2, r3, #28
    18a6:	d414      	bmi.n	18d2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    18a8:	223f      	movs	r2, #63	; 0x3f
    18aa:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    18ac:	2b00      	cmp	r3, #0
    18ae:	d034      	beq.n	191a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    18b0:	079a      	lsls	r2, r3, #30
    18b2:	d511      	bpl.n	18d8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    18b4:	221a      	movs	r2, #26
    18b6:	2332      	movs	r3, #50	; 0x32
    18b8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    18ba:	3b30      	subs	r3, #48	; 0x30
    18bc:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    18be:	077b      	lsls	r3, r7, #29
    18c0:	d550      	bpl.n	1964 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    18c2:	0028      	movs	r0, r5
    18c4:	696b      	ldr	r3, [r5, #20]
    18c6:	4798      	blx	r3
    18c8:	e04c      	b.n	1964 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    18ca:	0028      	movs	r0, r5
    18cc:	68eb      	ldr	r3, [r5, #12]
    18ce:	4798      	blx	r3
    18d0:	e7e0      	b.n	1894 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    18d2:	2237      	movs	r2, #55	; 0x37
    18d4:	4013      	ands	r3, r2
    18d6:	e7e9      	b.n	18ac <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    18d8:	075a      	lsls	r2, r3, #29
    18da:	d505      	bpl.n	18e8 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    18dc:	221e      	movs	r2, #30
    18de:	2332      	movs	r3, #50	; 0x32
    18e0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    18e2:	3b2e      	subs	r3, #46	; 0x2e
    18e4:	8363      	strh	r3, [r4, #26]
    18e6:	e7ea      	b.n	18be <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    18e8:	07da      	lsls	r2, r3, #31
    18ea:	d505      	bpl.n	18f8 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    18ec:	2213      	movs	r2, #19
    18ee:	2332      	movs	r3, #50	; 0x32
    18f0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    18f2:	3b31      	subs	r3, #49	; 0x31
    18f4:	8363      	strh	r3, [r4, #26]
    18f6:	e7e2      	b.n	18be <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    18f8:	06da      	lsls	r2, r3, #27
    18fa:	d505      	bpl.n	1908 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    18fc:	2242      	movs	r2, #66	; 0x42
    18fe:	2332      	movs	r3, #50	; 0x32
    1900:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1902:	3b22      	subs	r3, #34	; 0x22
    1904:	8363      	strh	r3, [r4, #26]
    1906:	e7da      	b.n	18be <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1908:	2220      	movs	r2, #32
    190a:	421a      	tst	r2, r3
    190c:	d0d7      	beq.n	18be <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    190e:	3221      	adds	r2, #33	; 0x21
    1910:	2332      	movs	r3, #50	; 0x32
    1912:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1914:	3b12      	subs	r3, #18
    1916:	8363      	strh	r3, [r4, #26]
    1918:	e7d1      	b.n	18be <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    191a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    191c:	05db      	lsls	r3, r3, #23
    191e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1920:	b2da      	uxtb	r2, r3
    1922:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1924:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1926:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1928:	1c51      	adds	r1, r2, #1
    192a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    192c:	7969      	ldrb	r1, [r5, #5]
    192e:	2901      	cmp	r1, #1
    1930:	d010      	beq.n	1954 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1932:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1934:	3b01      	subs	r3, #1
    1936:	b29b      	uxth	r3, r3
    1938:	85ab      	strh	r3, [r5, #44]	; 0x2c
    193a:	2b00      	cmp	r3, #0
    193c:	d112      	bne.n	1964 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    193e:	3304      	adds	r3, #4
    1940:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1942:	2200      	movs	r2, #0
    1944:	332e      	adds	r3, #46	; 0x2e
    1946:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1948:	07bb      	lsls	r3, r7, #30
    194a:	d50b      	bpl.n	1964 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    194c:	0028      	movs	r0, r5
    194e:	692b      	ldr	r3, [r5, #16]
    1950:	4798      	blx	r3
    1952:	e007      	b.n	1964 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1954:	0a1b      	lsrs	r3, r3, #8
    1956:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1958:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    195a:	3301      	adds	r3, #1
    195c:	626b      	str	r3, [r5, #36]	; 0x24
    195e:	e7e8      	b.n	1932 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1960:	2304      	movs	r3, #4
    1962:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1964:	06f3      	lsls	r3, r6, #27
    1966:	d504      	bpl.n	1972 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1968:	2310      	movs	r3, #16
    196a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    196c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    196e:	06fb      	lsls	r3, r7, #27
    1970:	d40e      	bmi.n	1990 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1972:	06b3      	lsls	r3, r6, #26
    1974:	d504      	bpl.n	1980 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1976:	2320      	movs	r3, #32
    1978:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    197a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    197c:	073b      	lsls	r3, r7, #28
    197e:	d40b      	bmi.n	1998 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1980:	0733      	lsls	r3, r6, #28
    1982:	d504      	bpl.n	198e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1984:	2308      	movs	r3, #8
    1986:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1988:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    198a:	06bb      	lsls	r3, r7, #26
    198c:	d408      	bmi.n	19a0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    198e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1990:	0028      	movs	r0, r5
    1992:	69eb      	ldr	r3, [r5, #28]
    1994:	4798      	blx	r3
    1996:	e7ec      	b.n	1972 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1998:	0028      	movs	r0, r5
    199a:	69ab      	ldr	r3, [r5, #24]
    199c:	4798      	blx	r3
    199e:	e7ef      	b.n	1980 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    19a0:	6a2b      	ldr	r3, [r5, #32]
    19a2:	0028      	movs	r0, r5
    19a4:	4798      	blx	r3
}
    19a6:	e7f2      	b.n	198e <_usart_interrupt_handler+0x176>
    19a8:	200009b8 	.word	0x200009b8

000019ac <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    19ac:	b510      	push	{r4, lr}
	switch (clock_source) {
    19ae:	2808      	cmp	r0, #8
    19b0:	d803      	bhi.n	19ba <system_clock_source_get_hz+0xe>
    19b2:	0080      	lsls	r0, r0, #2
    19b4:	4b1b      	ldr	r3, [pc, #108]	; (1a24 <system_clock_source_get_hz+0x78>)
    19b6:	581b      	ldr	r3, [r3, r0]
    19b8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    19ba:	2000      	movs	r0, #0
    19bc:	e030      	b.n	1a20 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    19be:	4b1a      	ldr	r3, [pc, #104]	; (1a28 <system_clock_source_get_hz+0x7c>)
    19c0:	6918      	ldr	r0, [r3, #16]
    19c2:	e02d      	b.n	1a20 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    19c4:	4b19      	ldr	r3, [pc, #100]	; (1a2c <system_clock_source_get_hz+0x80>)
    19c6:	6a1b      	ldr	r3, [r3, #32]
    19c8:	059b      	lsls	r3, r3, #22
    19ca:	0f9b      	lsrs	r3, r3, #30
    19cc:	4818      	ldr	r0, [pc, #96]	; (1a30 <system_clock_source_get_hz+0x84>)
    19ce:	40d8      	lsrs	r0, r3
    19d0:	e026      	b.n	1a20 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    19d2:	4b15      	ldr	r3, [pc, #84]	; (1a28 <system_clock_source_get_hz+0x7c>)
    19d4:	6958      	ldr	r0, [r3, #20]
    19d6:	e023      	b.n	1a20 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    19d8:	4b13      	ldr	r3, [pc, #76]	; (1a28 <system_clock_source_get_hz+0x7c>)
    19da:	681b      	ldr	r3, [r3, #0]
			return 0;
    19dc:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    19de:	079b      	lsls	r3, r3, #30
    19e0:	d51e      	bpl.n	1a20 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    19e2:	4912      	ldr	r1, [pc, #72]	; (1a2c <system_clock_source_get_hz+0x80>)
    19e4:	2210      	movs	r2, #16
    19e6:	68cb      	ldr	r3, [r1, #12]
    19e8:	421a      	tst	r2, r3
    19ea:	d0fc      	beq.n	19e6 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    19ec:	4b0e      	ldr	r3, [pc, #56]	; (1a28 <system_clock_source_get_hz+0x7c>)
    19ee:	681b      	ldr	r3, [r3, #0]
    19f0:	075b      	lsls	r3, r3, #29
    19f2:	d401      	bmi.n	19f8 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    19f4:	480f      	ldr	r0, [pc, #60]	; (1a34 <system_clock_source_get_hz+0x88>)
    19f6:	e013      	b.n	1a20 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    19f8:	2000      	movs	r0, #0
    19fa:	4b0f      	ldr	r3, [pc, #60]	; (1a38 <system_clock_source_get_hz+0x8c>)
    19fc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    19fe:	4b0a      	ldr	r3, [pc, #40]	; (1a28 <system_clock_source_get_hz+0x7c>)
    1a00:	689b      	ldr	r3, [r3, #8]
    1a02:	041b      	lsls	r3, r3, #16
    1a04:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1a06:	4358      	muls	r0, r3
    1a08:	e00a      	b.n	1a20 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1a0a:	2350      	movs	r3, #80	; 0x50
    1a0c:	4a07      	ldr	r2, [pc, #28]	; (1a2c <system_clock_source_get_hz+0x80>)
    1a0e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1a10:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1a12:	075b      	lsls	r3, r3, #29
    1a14:	d504      	bpl.n	1a20 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1a16:	4b04      	ldr	r3, [pc, #16]	; (1a28 <system_clock_source_get_hz+0x7c>)
    1a18:	68d8      	ldr	r0, [r3, #12]
    1a1a:	e001      	b.n	1a20 <system_clock_source_get_hz+0x74>
		return 32768UL;
    1a1c:	2080      	movs	r0, #128	; 0x80
    1a1e:	0200      	lsls	r0, r0, #8
	}
}
    1a20:	bd10      	pop	{r4, pc}
    1a22:	46c0      	nop			; (mov r8, r8)
    1a24:	00008b28 	.word	0x00008b28
    1a28:	20000220 	.word	0x20000220
    1a2c:	40000800 	.word	0x40000800
    1a30:	007a1200 	.word	0x007a1200
    1a34:	02dc6c00 	.word	0x02dc6c00
    1a38:	0000211d 	.word	0x0000211d

00001a3c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1a3c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1a3e:	490c      	ldr	r1, [pc, #48]	; (1a70 <system_clock_source_osc8m_set_config+0x34>)
    1a40:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1a42:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1a44:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1a46:	7840      	ldrb	r0, [r0, #1]
    1a48:	2201      	movs	r2, #1
    1a4a:	4010      	ands	r0, r2
    1a4c:	0180      	lsls	r0, r0, #6
    1a4e:	2640      	movs	r6, #64	; 0x40
    1a50:	43b3      	bics	r3, r6
    1a52:	4303      	orrs	r3, r0
    1a54:	402a      	ands	r2, r5
    1a56:	01d2      	lsls	r2, r2, #7
    1a58:	2080      	movs	r0, #128	; 0x80
    1a5a:	4383      	bics	r3, r0
    1a5c:	4313      	orrs	r3, r2
    1a5e:	2203      	movs	r2, #3
    1a60:	4022      	ands	r2, r4
    1a62:	0212      	lsls	r2, r2, #8
    1a64:	4803      	ldr	r0, [pc, #12]	; (1a74 <system_clock_source_osc8m_set_config+0x38>)
    1a66:	4003      	ands	r3, r0
    1a68:	4313      	orrs	r3, r2
    1a6a:	620b      	str	r3, [r1, #32]
}
    1a6c:	bd70      	pop	{r4, r5, r6, pc}
    1a6e:	46c0      	nop			; (mov r8, r8)
    1a70:	40000800 	.word	0x40000800
    1a74:	fffffcff 	.word	0xfffffcff

00001a78 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a7a:	46ce      	mov	lr, r9
    1a7c:	4647      	mov	r7, r8
    1a7e:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1a80:	4b19      	ldr	r3, [pc, #100]	; (1ae8 <system_clock_source_osc32k_set_config+0x70>)
    1a82:	4699      	mov	r9, r3
    1a84:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    1a86:	7841      	ldrb	r1, [r0, #1]
    1a88:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1a8a:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1a8c:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1a8e:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    1a90:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    1a92:	7880      	ldrb	r0, [r0, #2]
    1a94:	2101      	movs	r1, #1
    1a96:	4008      	ands	r0, r1
    1a98:	0080      	lsls	r0, r0, #2
    1a9a:	2204      	movs	r2, #4
    1a9c:	4393      	bics	r3, r2
    1a9e:	4303      	orrs	r3, r0
    1aa0:	4660      	mov	r0, ip
    1aa2:	4008      	ands	r0, r1
    1aa4:	00c0      	lsls	r0, r0, #3
    1aa6:	3204      	adds	r2, #4
    1aa8:	4393      	bics	r3, r2
    1aaa:	4303      	orrs	r3, r0
    1aac:	0038      	movs	r0, r7
    1aae:	4008      	ands	r0, r1
    1ab0:	0180      	lsls	r0, r0, #6
    1ab2:	2740      	movs	r7, #64	; 0x40
    1ab4:	43bb      	bics	r3, r7
    1ab6:	4303      	orrs	r3, r0
    1ab8:	0030      	movs	r0, r6
    1aba:	4008      	ands	r0, r1
    1abc:	01c0      	lsls	r0, r0, #7
    1abe:	2680      	movs	r6, #128	; 0x80
    1ac0:	43b3      	bics	r3, r6
    1ac2:	4303      	orrs	r3, r0
    1ac4:	2007      	movs	r0, #7
    1ac6:	4005      	ands	r5, r0
    1ac8:	022d      	lsls	r5, r5, #8
    1aca:	4808      	ldr	r0, [pc, #32]	; (1aec <system_clock_source_osc32k_set_config+0x74>)
    1acc:	4003      	ands	r3, r0
    1ace:	432b      	orrs	r3, r5
    1ad0:	4021      	ands	r1, r4
    1ad2:	0309      	lsls	r1, r1, #12
    1ad4:	4806      	ldr	r0, [pc, #24]	; (1af0 <system_clock_source_osc32k_set_config+0x78>)
    1ad6:	4003      	ands	r3, r0
    1ad8:	430b      	orrs	r3, r1
    1ada:	464a      	mov	r2, r9
    1adc:	6193      	str	r3, [r2, #24]
}
    1ade:	bc0c      	pop	{r2, r3}
    1ae0:	4690      	mov	r8, r2
    1ae2:	4699      	mov	r9, r3
    1ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ae6:	46c0      	nop			; (mov r8, r8)
    1ae8:	40000800 	.word	0x40000800
    1aec:	fffff8ff 	.word	0xfffff8ff
    1af0:	ffffefff 	.word	0xffffefff

00001af4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1af4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1af6:	46de      	mov	lr, fp
    1af8:	4657      	mov	r7, sl
    1afa:	464e      	mov	r6, r9
    1afc:	4645      	mov	r5, r8
    1afe:	b5e0      	push	{r5, r6, r7, lr}
    1b00:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1b02:	4b26      	ldr	r3, [pc, #152]	; (1b9c <system_clock_source_xosc32k_set_config+0xa8>)
    1b04:	469b      	mov	fp, r3
    1b06:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1b08:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1b0a:	7800      	ldrb	r0, [r0, #0]
    1b0c:	4242      	negs	r2, r0
    1b0e:	4142      	adcs	r2, r0
    1b10:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1b12:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1b14:	78ca      	ldrb	r2, [r1, #3]
    1b16:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1b18:	790a      	ldrb	r2, [r1, #4]
    1b1a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1b1c:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1b1e:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1b20:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1b22:	688a      	ldr	r2, [r1, #8]
    1b24:	491e      	ldr	r1, [pc, #120]	; (1ba0 <system_clock_source_xosc32k_set_config+0xac>)
    1b26:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1b28:	2101      	movs	r1, #1
    1b2a:	464a      	mov	r2, r9
    1b2c:	0092      	lsls	r2, r2, #2
    1b2e:	4691      	mov	r9, r2
    1b30:	2204      	movs	r2, #4
    1b32:	4393      	bics	r3, r2
    1b34:	464a      	mov	r2, r9
    1b36:	4313      	orrs	r3, r2
    1b38:	4642      	mov	r2, r8
    1b3a:	400a      	ands	r2, r1
    1b3c:	00d2      	lsls	r2, r2, #3
    1b3e:	4690      	mov	r8, r2
    1b40:	2208      	movs	r2, #8
    1b42:	4393      	bics	r3, r2
    1b44:	4642      	mov	r2, r8
    1b46:	4313      	orrs	r3, r2
    1b48:	4662      	mov	r2, ip
    1b4a:	400a      	ands	r2, r1
    1b4c:	0112      	lsls	r2, r2, #4
    1b4e:	4694      	mov	ip, r2
    1b50:	2210      	movs	r2, #16
    1b52:	4393      	bics	r3, r2
    1b54:	4662      	mov	r2, ip
    1b56:	4313      	orrs	r3, r2
    1b58:	4008      	ands	r0, r1
    1b5a:	0140      	lsls	r0, r0, #5
    1b5c:	2220      	movs	r2, #32
    1b5e:	4393      	bics	r3, r2
    1b60:	4303      	orrs	r3, r0
    1b62:	400f      	ands	r7, r1
    1b64:	01bf      	lsls	r7, r7, #6
    1b66:	2040      	movs	r0, #64	; 0x40
    1b68:	4383      	bics	r3, r0
    1b6a:	433b      	orrs	r3, r7
    1b6c:	400e      	ands	r6, r1
    1b6e:	01f6      	lsls	r6, r6, #7
    1b70:	3040      	adds	r0, #64	; 0x40
    1b72:	4383      	bics	r3, r0
    1b74:	4333      	orrs	r3, r6
    1b76:	3879      	subs	r0, #121	; 0x79
    1b78:	4005      	ands	r5, r0
    1b7a:	022d      	lsls	r5, r5, #8
    1b7c:	4809      	ldr	r0, [pc, #36]	; (1ba4 <system_clock_source_xosc32k_set_config+0xb0>)
    1b7e:	4003      	ands	r3, r0
    1b80:	432b      	orrs	r3, r5
    1b82:	4021      	ands	r1, r4
    1b84:	0309      	lsls	r1, r1, #12
    1b86:	4808      	ldr	r0, [pc, #32]	; (1ba8 <system_clock_source_xosc32k_set_config+0xb4>)
    1b88:	4003      	ands	r3, r0
    1b8a:	430b      	orrs	r3, r1
    1b8c:	465a      	mov	r2, fp
    1b8e:	8293      	strh	r3, [r2, #20]
}
    1b90:	bc3c      	pop	{r2, r3, r4, r5}
    1b92:	4690      	mov	r8, r2
    1b94:	4699      	mov	r9, r3
    1b96:	46a2      	mov	sl, r4
    1b98:	46ab      	mov	fp, r5
    1b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b9c:	40000800 	.word	0x40000800
    1ba0:	20000220 	.word	0x20000220
    1ba4:	fffff8ff 	.word	0xfffff8ff
    1ba8:	ffffefff 	.word	0xffffefff

00001bac <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1bac:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1bae:	7a03      	ldrb	r3, [r0, #8]
    1bb0:	069b      	lsls	r3, r3, #26
    1bb2:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1bb4:	8942      	ldrh	r2, [r0, #10]
    1bb6:	0592      	lsls	r2, r2, #22
    1bb8:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1bba:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1bbc:	4918      	ldr	r1, [pc, #96]	; (1c20 <system_clock_source_dfll_set_config+0x74>)
    1bbe:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1bc0:	7983      	ldrb	r3, [r0, #6]
    1bc2:	79c2      	ldrb	r2, [r0, #7]
    1bc4:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1bc6:	8842      	ldrh	r2, [r0, #2]
    1bc8:	8884      	ldrh	r4, [r0, #4]
    1bca:	4322      	orrs	r2, r4
    1bcc:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1bce:	7842      	ldrb	r2, [r0, #1]
    1bd0:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1bd2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1bd4:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1bd6:	7803      	ldrb	r3, [r0, #0]
    1bd8:	2b04      	cmp	r3, #4
    1bda:	d011      	beq.n	1c00 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1bdc:	2b20      	cmp	r3, #32
    1bde:	d10e      	bne.n	1bfe <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1be0:	7b03      	ldrb	r3, [r0, #12]
    1be2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1be4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1be6:	4313      	orrs	r3, r2
    1be8:	89c2      	ldrh	r2, [r0, #14]
    1bea:	0412      	lsls	r2, r2, #16
    1bec:	490d      	ldr	r1, [pc, #52]	; (1c24 <system_clock_source_dfll_set_config+0x78>)
    1bee:	400a      	ands	r2, r1
    1bf0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1bf2:	4a0b      	ldr	r2, [pc, #44]	; (1c20 <system_clock_source_dfll_set_config+0x74>)
    1bf4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1bf6:	6811      	ldr	r1, [r2, #0]
    1bf8:	4b0b      	ldr	r3, [pc, #44]	; (1c28 <system_clock_source_dfll_set_config+0x7c>)
    1bfa:	430b      	orrs	r3, r1
    1bfc:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1bfe:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1c00:	7b03      	ldrb	r3, [r0, #12]
    1c02:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1c04:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1c06:	4313      	orrs	r3, r2
    1c08:	89c2      	ldrh	r2, [r0, #14]
    1c0a:	0412      	lsls	r2, r2, #16
    1c0c:	4905      	ldr	r1, [pc, #20]	; (1c24 <system_clock_source_dfll_set_config+0x78>)
    1c0e:	400a      	ands	r2, r1
    1c10:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1c12:	4a03      	ldr	r2, [pc, #12]	; (1c20 <system_clock_source_dfll_set_config+0x74>)
    1c14:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1c16:	6813      	ldr	r3, [r2, #0]
    1c18:	2104      	movs	r1, #4
    1c1a:	430b      	orrs	r3, r1
    1c1c:	6013      	str	r3, [r2, #0]
    1c1e:	e7ee      	b.n	1bfe <system_clock_source_dfll_set_config+0x52>
    1c20:	20000220 	.word	0x20000220
    1c24:	03ff0000 	.word	0x03ff0000
    1c28:	00000424 	.word	0x00000424

00001c2c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1c2c:	2808      	cmp	r0, #8
    1c2e:	d803      	bhi.n	1c38 <system_clock_source_enable+0xc>
    1c30:	0080      	lsls	r0, r0, #2
    1c32:	4b25      	ldr	r3, [pc, #148]	; (1cc8 <system_clock_source_enable+0x9c>)
    1c34:	581b      	ldr	r3, [r3, r0]
    1c36:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1c38:	2017      	movs	r0, #23
    1c3a:	e044      	b.n	1cc6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1c3c:	4a23      	ldr	r2, [pc, #140]	; (1ccc <system_clock_source_enable+0xa0>)
    1c3e:	6a13      	ldr	r3, [r2, #32]
    1c40:	2102      	movs	r1, #2
    1c42:	430b      	orrs	r3, r1
    1c44:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1c46:	2000      	movs	r0, #0
    1c48:	e03d      	b.n	1cc6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1c4a:	4a20      	ldr	r2, [pc, #128]	; (1ccc <system_clock_source_enable+0xa0>)
    1c4c:	6993      	ldr	r3, [r2, #24]
    1c4e:	2102      	movs	r1, #2
    1c50:	430b      	orrs	r3, r1
    1c52:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1c54:	2000      	movs	r0, #0
		break;
    1c56:	e036      	b.n	1cc6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1c58:	4a1c      	ldr	r2, [pc, #112]	; (1ccc <system_clock_source_enable+0xa0>)
    1c5a:	8a13      	ldrh	r3, [r2, #16]
    1c5c:	2102      	movs	r1, #2
    1c5e:	430b      	orrs	r3, r1
    1c60:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1c62:	2000      	movs	r0, #0
		break;
    1c64:	e02f      	b.n	1cc6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1c66:	4a19      	ldr	r2, [pc, #100]	; (1ccc <system_clock_source_enable+0xa0>)
    1c68:	8a93      	ldrh	r3, [r2, #20]
    1c6a:	2102      	movs	r1, #2
    1c6c:	430b      	orrs	r3, r1
    1c6e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1c70:	2000      	movs	r0, #0
		break;
    1c72:	e028      	b.n	1cc6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1c74:	4916      	ldr	r1, [pc, #88]	; (1cd0 <system_clock_source_enable+0xa4>)
    1c76:	680b      	ldr	r3, [r1, #0]
    1c78:	2202      	movs	r2, #2
    1c7a:	4313      	orrs	r3, r2
    1c7c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1c7e:	4b13      	ldr	r3, [pc, #76]	; (1ccc <system_clock_source_enable+0xa0>)
    1c80:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1c82:	0019      	movs	r1, r3
    1c84:	320e      	adds	r2, #14
    1c86:	68cb      	ldr	r3, [r1, #12]
    1c88:	421a      	tst	r2, r3
    1c8a:	d0fc      	beq.n	1c86 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1c8c:	4a10      	ldr	r2, [pc, #64]	; (1cd0 <system_clock_source_enable+0xa4>)
    1c8e:	6891      	ldr	r1, [r2, #8]
    1c90:	4b0e      	ldr	r3, [pc, #56]	; (1ccc <system_clock_source_enable+0xa0>)
    1c92:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1c94:	6852      	ldr	r2, [r2, #4]
    1c96:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1c98:	2200      	movs	r2, #0
    1c9a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1c9c:	0019      	movs	r1, r3
    1c9e:	3210      	adds	r2, #16
    1ca0:	68cb      	ldr	r3, [r1, #12]
    1ca2:	421a      	tst	r2, r3
    1ca4:	d0fc      	beq.n	1ca0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1ca6:	4b0a      	ldr	r3, [pc, #40]	; (1cd0 <system_clock_source_enable+0xa4>)
    1ca8:	681b      	ldr	r3, [r3, #0]
    1caa:	b29b      	uxth	r3, r3
    1cac:	4a07      	ldr	r2, [pc, #28]	; (1ccc <system_clock_source_enable+0xa0>)
    1cae:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1cb0:	2000      	movs	r0, #0
    1cb2:	e008      	b.n	1cc6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1cb4:	4905      	ldr	r1, [pc, #20]	; (1ccc <system_clock_source_enable+0xa0>)
    1cb6:	2244      	movs	r2, #68	; 0x44
    1cb8:	5c8b      	ldrb	r3, [r1, r2]
    1cba:	2002      	movs	r0, #2
    1cbc:	4303      	orrs	r3, r0
    1cbe:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1cc0:	2000      	movs	r0, #0
		break;
    1cc2:	e000      	b.n	1cc6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1cc4:	2000      	movs	r0, #0
}
    1cc6:	4770      	bx	lr
    1cc8:	00008b4c 	.word	0x00008b4c
    1ccc:	40000800 	.word	0x40000800
    1cd0:	20000220 	.word	0x20000220

00001cd4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cd6:	46d6      	mov	lr, sl
    1cd8:	464f      	mov	r7, r9
    1cda:	4646      	mov	r6, r8
    1cdc:	b5c0      	push	{r6, r7, lr}
    1cde:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1ce0:	22c2      	movs	r2, #194	; 0xc2
    1ce2:	00d2      	lsls	r2, r2, #3
    1ce4:	4b69      	ldr	r3, [pc, #420]	; (1e8c <system_clock_init+0x1b8>)
    1ce6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1ce8:	4a69      	ldr	r2, [pc, #420]	; (1e90 <system_clock_init+0x1bc>)
    1cea:	6853      	ldr	r3, [r2, #4]
    1cec:	211e      	movs	r1, #30
    1cee:	438b      	bics	r3, r1
    1cf0:	391a      	subs	r1, #26
    1cf2:	430b      	orrs	r3, r1
    1cf4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_5;
    1cf6:	2205      	movs	r2, #5
    1cf8:	ab01      	add	r3, sp, #4
    1cfa:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1cfc:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1cfe:	4d65      	ldr	r5, [pc, #404]	; (1e94 <system_clock_init+0x1c0>)
    1d00:	b2e0      	uxtb	r0, r4
    1d02:	a901      	add	r1, sp, #4
    1d04:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1d06:	3401      	adds	r4, #1
    1d08:	2c25      	cmp	r4, #37	; 0x25
    1d0a:	d1f9      	bne.n	1d00 <system_clock_init+0x2c>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1d0c:	a80c      	add	r0, sp, #48	; 0x30
    1d0e:	2300      	movs	r3, #0
    1d10:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    1d12:	2280      	movs	r2, #128	; 0x80
    1d14:	0212      	lsls	r2, r2, #8
    1d16:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1d18:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1d1a:	2201      	movs	r2, #1
    1d1c:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1d1e:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1d20:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1d22:	2106      	movs	r1, #6
    1d24:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    1d26:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1d28:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1d2a:	4b5b      	ldr	r3, [pc, #364]	; (1e98 <system_clock_init+0x1c4>)
    1d2c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1d2e:	2005      	movs	r0, #5
    1d30:	4b5a      	ldr	r3, [pc, #360]	; (1e9c <system_clock_init+0x1c8>)
    1d32:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1d34:	4955      	ldr	r1, [pc, #340]	; (1e8c <system_clock_init+0x1b8>)
    1d36:	2202      	movs	r2, #2
    1d38:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1d3a:	421a      	tst	r2, r3
    1d3c:	d0fc      	beq.n	1d38 <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1d3e:	4953      	ldr	r1, [pc, #332]	; (1e8c <system_clock_init+0x1b8>)
    1d40:	8a8b      	ldrh	r3, [r1, #20]
    1d42:	2280      	movs	r2, #128	; 0x80
    1d44:	4313      	orrs	r3, r2
    1d46:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    1d48:	4c55      	ldr	r4, [pc, #340]	; (1ea0 <system_clock_init+0x1cc>)
	SYSCTRL->OSC32K.bit.CALIB =
    1d4a:	6823      	ldr	r3, [r4, #0]
    1d4c:	04db      	lsls	r3, r3, #19
    1d4e:	698a      	ldr	r2, [r1, #24]
    1d50:	0e5b      	lsrs	r3, r3, #25
    1d52:	041b      	lsls	r3, r3, #16
    1d54:	4853      	ldr	r0, [pc, #332]	; (1ea4 <system_clock_init+0x1d0>)
    1d56:	4002      	ands	r2, r0
    1d58:	4313      	orrs	r3, r2
    1d5a:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    1d5c:	a80a      	add	r0, sp, #40	; 0x28
    1d5e:	2301      	movs	r3, #1
    1d60:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    1d62:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    1d64:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1d66:	2207      	movs	r2, #7
    1d68:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    1d6a:	2500      	movs	r5, #0
    1d6c:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1d6e:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1d70:	4b4d      	ldr	r3, [pc, #308]	; (1ea8 <system_clock_init+0x1d4>)
    1d72:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1d74:	2004      	movs	r0, #4
    1d76:	4b49      	ldr	r3, [pc, #292]	; (1e9c <system_clock_init+0x1c8>)
    1d78:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1d7a:	ab05      	add	r3, sp, #20
    1d7c:	2200      	movs	r2, #0
    1d7e:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1d80:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1d82:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1d84:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1d86:	213f      	movs	r1, #63	; 0x3f
    1d88:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1d8a:	393b      	subs	r1, #59	; 0x3b
    1d8c:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1d8e:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1d90:	6823      	ldr	r3, [r4, #0]
    1d92:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1d94:	2b3f      	cmp	r3, #63	; 0x3f
    1d96:	d100      	bne.n	1d9a <system_clock_init+0xc6>
    1d98:	e075      	b.n	1e86 <system_clock_init+0x1b2>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1d9a:	a805      	add	r0, sp, #20
    1d9c:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1d9e:	23b7      	movs	r3, #183	; 0xb7
    1da0:	00db      	lsls	r3, r3, #3
    1da2:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1da4:	2307      	movs	r3, #7
    1da6:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1da8:	3338      	adds	r3, #56	; 0x38
    1daa:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1dac:	4b3f      	ldr	r3, [pc, #252]	; (1eac <system_clock_init+0x1d8>)
    1dae:	4798      	blx	r3
	config->run_in_standby  = false;
    1db0:	a804      	add	r0, sp, #16
    1db2:	2500      	movs	r5, #0
    1db4:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1db6:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1db8:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1dba:	4b3d      	ldr	r3, [pc, #244]	; (1eb0 <system_clock_init+0x1dc>)
    1dbc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1dbe:	2006      	movs	r0, #6
    1dc0:	4b36      	ldr	r3, [pc, #216]	; (1e9c <system_clock_init+0x1c8>)
    1dc2:	4699      	mov	r9, r3
    1dc4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1dc6:	4b3b      	ldr	r3, [pc, #236]	; (1eb4 <system_clock_init+0x1e0>)
    1dc8:	4798      	blx	r3
	config->division_factor    = 1;
    1dca:	ac01      	add	r4, sp, #4
    1dcc:	2601      	movs	r6, #1
    1dce:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1dd0:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    1dd2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1dd4:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1dd6:	2305      	movs	r3, #5
    1dd8:	7023      	strb	r3, [r4, #0]
    1dda:	0021      	movs	r1, r4
    1ddc:	2001      	movs	r0, #1
    1dde:	4b36      	ldr	r3, [pc, #216]	; (1eb8 <system_clock_init+0x1e4>)
    1de0:	4698      	mov	r8, r3
    1de2:	4798      	blx	r3
    1de4:	2001      	movs	r0, #1
    1de6:	4f35      	ldr	r7, [pc, #212]	; (1ebc <system_clock_init+0x1e8>)
    1de8:	47b8      	blx	r7
	config->high_when_disabled = false;
    1dea:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    1dec:	7265      	strb	r5, [r4, #9]
    1dee:	2304      	movs	r3, #4
    1df0:	7023      	strb	r3, [r4, #0]
    1df2:	331c      	adds	r3, #28
    1df4:	469a      	mov	sl, r3
    1df6:	6063      	str	r3, [r4, #4]
    1df8:	7226      	strb	r6, [r4, #8]
    1dfa:	0021      	movs	r1, r4
    1dfc:	2002      	movs	r0, #2
    1dfe:	47c0      	blx	r8
    1e00:	2002      	movs	r0, #2
    1e02:	47b8      	blx	r7
	config->division_factor    = 1;
    1e04:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1e06:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1e08:	2306      	movs	r3, #6
    1e0a:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    1e0c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1e0e:	7265      	strb	r5, [r4, #9]
    1e10:	0021      	movs	r1, r4
    1e12:	2003      	movs	r0, #3
    1e14:	47c0      	blx	r8
    1e16:	2003      	movs	r0, #3
    1e18:	47b8      	blx	r7
	config->high_when_disabled = false;
    1e1a:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    1e1c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1e1e:	7265      	strb	r5, [r4, #9]
    1e20:	2303      	movs	r3, #3
    1e22:	7023      	strb	r3, [r4, #0]
    1e24:	4653      	mov	r3, sl
    1e26:	6063      	str	r3, [r4, #4]
    1e28:	0021      	movs	r1, r4
    1e2a:	2004      	movs	r0, #4
    1e2c:	47c0      	blx	r8
    1e2e:	2004      	movs	r0, #4
    1e30:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1e32:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1e34:	0021      	movs	r1, r4
    1e36:	2000      	movs	r0, #0
    1e38:	4b16      	ldr	r3, [pc, #88]	; (1e94 <system_clock_init+0x1c0>)
    1e3a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1e3c:	2000      	movs	r0, #0
    1e3e:	4b20      	ldr	r3, [pc, #128]	; (1ec0 <system_clock_init+0x1ec>)
    1e40:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1e42:	2007      	movs	r0, #7
    1e44:	47c8      	blx	r9
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1e46:	4911      	ldr	r1, [pc, #68]	; (1e8c <system_clock_init+0x1b8>)
    1e48:	22d0      	movs	r2, #208	; 0xd0
    1e4a:	68cb      	ldr	r3, [r1, #12]
    1e4c:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1e4e:	2bd0      	cmp	r3, #208	; 0xd0
    1e50:	d1fb      	bne.n	1e4a <system_clock_init+0x176>
	PM->CPUSEL.reg = (uint32_t)divider;
    1e52:	4a1c      	ldr	r2, [pc, #112]	; (1ec4 <system_clock_init+0x1f0>)
    1e54:	2300      	movs	r3, #0
    1e56:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1e58:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1e5a:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1e5c:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1e5e:	a901      	add	r1, sp, #4
    1e60:	2201      	movs	r2, #1
    1e62:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1e64:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1e66:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1e68:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1e6a:	3307      	adds	r3, #7
    1e6c:	700b      	strb	r3, [r1, #0]
    1e6e:	2000      	movs	r0, #0
    1e70:	4b11      	ldr	r3, [pc, #68]	; (1eb8 <system_clock_init+0x1e4>)
    1e72:	4798      	blx	r3
    1e74:	2000      	movs	r0, #0
    1e76:	4b11      	ldr	r3, [pc, #68]	; (1ebc <system_clock_init+0x1e8>)
    1e78:	4798      	blx	r3
#endif
}
    1e7a:	b010      	add	sp, #64	; 0x40
    1e7c:	bc1c      	pop	{r2, r3, r4}
    1e7e:	4690      	mov	r8, r2
    1e80:	4699      	mov	r9, r3
    1e82:	46a2      	mov	sl, r4
    1e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1e86:	3b20      	subs	r3, #32
    1e88:	e787      	b.n	1d9a <system_clock_init+0xc6>
    1e8a:	46c0      	nop			; (mov r8, r8)
    1e8c:	40000800 	.word	0x40000800
    1e90:	41004000 	.word	0x41004000
    1e94:	00002101 	.word	0x00002101
    1e98:	00001af5 	.word	0x00001af5
    1e9c:	00001c2d 	.word	0x00001c2d
    1ea0:	00806024 	.word	0x00806024
    1ea4:	ff80ffff 	.word	0xff80ffff
    1ea8:	00001a79 	.word	0x00001a79
    1eac:	00001bad 	.word	0x00001bad
    1eb0:	00001a3d 	.word	0x00001a3d
    1eb4:	00001ec9 	.word	0x00001ec9
    1eb8:	00001eed 	.word	0x00001eed
    1ebc:	00001fa5 	.word	0x00001fa5
    1ec0:	00002075 	.word	0x00002075
    1ec4:	40000400 	.word	0x40000400

00001ec8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1ec8:	4a06      	ldr	r2, [pc, #24]	; (1ee4 <system_gclk_init+0x1c>)
    1eca:	6993      	ldr	r3, [r2, #24]
    1ecc:	2108      	movs	r1, #8
    1ece:	430b      	orrs	r3, r1
    1ed0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1ed2:	2201      	movs	r2, #1
    1ed4:	4b04      	ldr	r3, [pc, #16]	; (1ee8 <system_gclk_init+0x20>)
    1ed6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1ed8:	0019      	movs	r1, r3
    1eda:	780b      	ldrb	r3, [r1, #0]
    1edc:	4213      	tst	r3, r2
    1ede:	d1fc      	bne.n	1eda <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1ee0:	4770      	bx	lr
    1ee2:	46c0      	nop			; (mov r8, r8)
    1ee4:	40000400 	.word	0x40000400
    1ee8:	40000c00 	.word	0x40000c00

00001eec <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1eec:	b570      	push	{r4, r5, r6, lr}
    1eee:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1ef0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1ef2:	780d      	ldrb	r5, [r1, #0]
    1ef4:	022d      	lsls	r5, r5, #8
    1ef6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1ef8:	784b      	ldrb	r3, [r1, #1]
    1efa:	2b00      	cmp	r3, #0
    1efc:	d002      	beq.n	1f04 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1efe:	2380      	movs	r3, #128	; 0x80
    1f00:	02db      	lsls	r3, r3, #11
    1f02:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1f04:	7a4b      	ldrb	r3, [r1, #9]
    1f06:	2b00      	cmp	r3, #0
    1f08:	d002      	beq.n	1f10 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1f0a:	2380      	movs	r3, #128	; 0x80
    1f0c:	031b      	lsls	r3, r3, #12
    1f0e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1f10:	6848      	ldr	r0, [r1, #4]
    1f12:	2801      	cmp	r0, #1
    1f14:	d910      	bls.n	1f38 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1f16:	1e43      	subs	r3, r0, #1
    1f18:	4218      	tst	r0, r3
    1f1a:	d134      	bne.n	1f86 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1f1c:	2802      	cmp	r0, #2
    1f1e:	d930      	bls.n	1f82 <system_gclk_gen_set_config+0x96>
    1f20:	2302      	movs	r3, #2
    1f22:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1f24:	3201      	adds	r2, #1
						mask <<= 1) {
    1f26:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1f28:	4298      	cmp	r0, r3
    1f2a:	d8fb      	bhi.n	1f24 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1f2c:	0212      	lsls	r2, r2, #8
    1f2e:	4332      	orrs	r2, r6
    1f30:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1f32:	2380      	movs	r3, #128	; 0x80
    1f34:	035b      	lsls	r3, r3, #13
    1f36:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1f38:	7a0b      	ldrb	r3, [r1, #8]
    1f3a:	2b00      	cmp	r3, #0
    1f3c:	d002      	beq.n	1f44 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1f3e:	2380      	movs	r3, #128	; 0x80
    1f40:	039b      	lsls	r3, r3, #14
    1f42:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f44:	4a13      	ldr	r2, [pc, #76]	; (1f94 <system_gclk_gen_set_config+0xa8>)
    1f46:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1f48:	b25b      	sxtb	r3, r3
    1f4a:	2b00      	cmp	r3, #0
    1f4c:	dbfb      	blt.n	1f46 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1f4e:	4b12      	ldr	r3, [pc, #72]	; (1f98 <system_gclk_gen_set_config+0xac>)
    1f50:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1f52:	4b12      	ldr	r3, [pc, #72]	; (1f9c <system_gclk_gen_set_config+0xb0>)
    1f54:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f56:	4a0f      	ldr	r2, [pc, #60]	; (1f94 <system_gclk_gen_set_config+0xa8>)
    1f58:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1f5a:	b25b      	sxtb	r3, r3
    1f5c:	2b00      	cmp	r3, #0
    1f5e:	dbfb      	blt.n	1f58 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1f60:	4b0c      	ldr	r3, [pc, #48]	; (1f94 <system_gclk_gen_set_config+0xa8>)
    1f62:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f64:	001a      	movs	r2, r3
    1f66:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1f68:	b25b      	sxtb	r3, r3
    1f6a:	2b00      	cmp	r3, #0
    1f6c:	dbfb      	blt.n	1f66 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1f6e:	4a09      	ldr	r2, [pc, #36]	; (1f94 <system_gclk_gen_set_config+0xa8>)
    1f70:	6853      	ldr	r3, [r2, #4]
    1f72:	2180      	movs	r1, #128	; 0x80
    1f74:	0249      	lsls	r1, r1, #9
    1f76:	400b      	ands	r3, r1
    1f78:	431d      	orrs	r5, r3
    1f7a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1f7c:	4b08      	ldr	r3, [pc, #32]	; (1fa0 <system_gclk_gen_set_config+0xb4>)
    1f7e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1f80:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1f82:	2200      	movs	r2, #0
    1f84:	e7d2      	b.n	1f2c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1f86:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1f88:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1f8a:	2380      	movs	r3, #128	; 0x80
    1f8c:	029b      	lsls	r3, r3, #10
    1f8e:	431d      	orrs	r5, r3
    1f90:	e7d2      	b.n	1f38 <system_gclk_gen_set_config+0x4c>
    1f92:	46c0      	nop			; (mov r8, r8)
    1f94:	40000c00 	.word	0x40000c00
    1f98:	000007a9 	.word	0x000007a9
    1f9c:	40000c08 	.word	0x40000c08
    1fa0:	000007e9 	.word	0x000007e9

00001fa4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1fa4:	b510      	push	{r4, lr}
    1fa6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fa8:	4a0b      	ldr	r2, [pc, #44]	; (1fd8 <system_gclk_gen_enable+0x34>)
    1faa:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1fac:	b25b      	sxtb	r3, r3
    1fae:	2b00      	cmp	r3, #0
    1fb0:	dbfb      	blt.n	1faa <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1fb2:	4b0a      	ldr	r3, [pc, #40]	; (1fdc <system_gclk_gen_enable+0x38>)
    1fb4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1fb6:	4b0a      	ldr	r3, [pc, #40]	; (1fe0 <system_gclk_gen_enable+0x3c>)
    1fb8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fba:	4a07      	ldr	r2, [pc, #28]	; (1fd8 <system_gclk_gen_enable+0x34>)
    1fbc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1fbe:	b25b      	sxtb	r3, r3
    1fc0:	2b00      	cmp	r3, #0
    1fc2:	dbfb      	blt.n	1fbc <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1fc4:	4a04      	ldr	r2, [pc, #16]	; (1fd8 <system_gclk_gen_enable+0x34>)
    1fc6:	6851      	ldr	r1, [r2, #4]
    1fc8:	2380      	movs	r3, #128	; 0x80
    1fca:	025b      	lsls	r3, r3, #9
    1fcc:	430b      	orrs	r3, r1
    1fce:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1fd0:	4b04      	ldr	r3, [pc, #16]	; (1fe4 <system_gclk_gen_enable+0x40>)
    1fd2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1fd4:	bd10      	pop	{r4, pc}
    1fd6:	46c0      	nop			; (mov r8, r8)
    1fd8:	40000c00 	.word	0x40000c00
    1fdc:	000007a9 	.word	0x000007a9
    1fe0:	40000c04 	.word	0x40000c04
    1fe4:	000007e9 	.word	0x000007e9

00001fe8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1fe8:	b570      	push	{r4, r5, r6, lr}
    1fea:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fec:	4a1a      	ldr	r2, [pc, #104]	; (2058 <STACK_SIZE+0x58>)
    1fee:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1ff0:	b25b      	sxtb	r3, r3
    1ff2:	2b00      	cmp	r3, #0
    1ff4:	dbfb      	blt.n	1fee <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1ff6:	4b19      	ldr	r3, [pc, #100]	; (205c <STACK_SIZE+0x5c>)
    1ff8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1ffa:	4b19      	ldr	r3, [pc, #100]	; (2060 <STACK_SIZE+0x60>)
    1ffc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ffe:	4a16      	ldr	r2, [pc, #88]	; (2058 <STACK_SIZE+0x58>)
    2000:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2002:	b25b      	sxtb	r3, r3
    2004:	2b00      	cmp	r3, #0
    2006:	dbfb      	blt.n	2000 <STACK_SIZE>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2008:	4e13      	ldr	r6, [pc, #76]	; (2058 <STACK_SIZE+0x58>)
    200a:	6870      	ldr	r0, [r6, #4]
    200c:	04c0      	lsls	r0, r0, #19
    200e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2010:	4b14      	ldr	r3, [pc, #80]	; (2064 <STACK_SIZE+0x64>)
    2012:	4798      	blx	r3
    2014:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2016:	4b12      	ldr	r3, [pc, #72]	; (2060 <STACK_SIZE+0x60>)
    2018:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    201a:	6876      	ldr	r6, [r6, #4]
    201c:	02f6      	lsls	r6, r6, #11
    201e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2020:	4b11      	ldr	r3, [pc, #68]	; (2068 <STACK_SIZE+0x68>)
    2022:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2024:	4a0c      	ldr	r2, [pc, #48]	; (2058 <STACK_SIZE+0x58>)
    2026:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2028:	b25b      	sxtb	r3, r3
    202a:	2b00      	cmp	r3, #0
    202c:	dbfb      	blt.n	2026 <STACK_SIZE+0x26>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    202e:	4b0a      	ldr	r3, [pc, #40]	; (2058 <STACK_SIZE+0x58>)
    2030:	689c      	ldr	r4, [r3, #8]
    2032:	0224      	lsls	r4, r4, #8
    2034:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2036:	4b0d      	ldr	r3, [pc, #52]	; (206c <STACK_SIZE+0x6c>)
    2038:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    203a:	2e00      	cmp	r6, #0
    203c:	d107      	bne.n	204e <STACK_SIZE+0x4e>
    203e:	2c01      	cmp	r4, #1
    2040:	d907      	bls.n	2052 <STACK_SIZE+0x52>
		gen_input_hz /= divider;
    2042:	0021      	movs	r1, r4
    2044:	0028      	movs	r0, r5
    2046:	4b0a      	ldr	r3, [pc, #40]	; (2070 <STACK_SIZE+0x70>)
    2048:	4798      	blx	r3
    204a:	0005      	movs	r5, r0
    204c:	e001      	b.n	2052 <STACK_SIZE+0x52>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    204e:	3401      	adds	r4, #1
    2050:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2052:	0028      	movs	r0, r5
    2054:	bd70      	pop	{r4, r5, r6, pc}
    2056:	46c0      	nop			; (mov r8, r8)
    2058:	40000c00 	.word	0x40000c00
    205c:	000007a9 	.word	0x000007a9
    2060:	40000c04 	.word	0x40000c04
    2064:	000019ad 	.word	0x000019ad
    2068:	40000c08 	.word	0x40000c08
    206c:	000007e9 	.word	0x000007e9
    2070:	00005f5d 	.word	0x00005f5d

00002074 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2074:	b510      	push	{r4, lr}
    2076:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2078:	4b06      	ldr	r3, [pc, #24]	; (2094 <system_gclk_chan_enable+0x20>)
    207a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    207c:	4b06      	ldr	r3, [pc, #24]	; (2098 <system_gclk_chan_enable+0x24>)
    207e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2080:	4a06      	ldr	r2, [pc, #24]	; (209c <system_gclk_chan_enable+0x28>)
    2082:	8853      	ldrh	r3, [r2, #2]
    2084:	2180      	movs	r1, #128	; 0x80
    2086:	01c9      	lsls	r1, r1, #7
    2088:	430b      	orrs	r3, r1
    208a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    208c:	4b04      	ldr	r3, [pc, #16]	; (20a0 <system_gclk_chan_enable+0x2c>)
    208e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2090:	bd10      	pop	{r4, pc}
    2092:	46c0      	nop			; (mov r8, r8)
    2094:	000007a9 	.word	0x000007a9
    2098:	40000c02 	.word	0x40000c02
    209c:	40000c00 	.word	0x40000c00
    20a0:	000007e9 	.word	0x000007e9

000020a4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    20a4:	b510      	push	{r4, lr}
    20a6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    20a8:	4b0f      	ldr	r3, [pc, #60]	; (20e8 <system_gclk_chan_disable+0x44>)
    20aa:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    20ac:	4b0f      	ldr	r3, [pc, #60]	; (20ec <system_gclk_chan_disable+0x48>)
    20ae:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    20b0:	4a0f      	ldr	r2, [pc, #60]	; (20f0 <system_gclk_chan_disable+0x4c>)
    20b2:	8853      	ldrh	r3, [r2, #2]
    20b4:	051b      	lsls	r3, r3, #20
    20b6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    20b8:	8853      	ldrh	r3, [r2, #2]
    20ba:	490e      	ldr	r1, [pc, #56]	; (20f4 <system_gclk_chan_disable+0x50>)
    20bc:	400b      	ands	r3, r1
    20be:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    20c0:	8853      	ldrh	r3, [r2, #2]
    20c2:	490d      	ldr	r1, [pc, #52]	; (20f8 <system_gclk_chan_disable+0x54>)
    20c4:	400b      	ands	r3, r1
    20c6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    20c8:	0011      	movs	r1, r2
    20ca:	2280      	movs	r2, #128	; 0x80
    20cc:	01d2      	lsls	r2, r2, #7
    20ce:	884b      	ldrh	r3, [r1, #2]
    20d0:	4213      	tst	r3, r2
    20d2:	d1fc      	bne.n	20ce <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    20d4:	4906      	ldr	r1, [pc, #24]	; (20f0 <system_gclk_chan_disable+0x4c>)
    20d6:	884a      	ldrh	r2, [r1, #2]
    20d8:	0203      	lsls	r3, r0, #8
    20da:	4806      	ldr	r0, [pc, #24]	; (20f4 <system_gclk_chan_disable+0x50>)
    20dc:	4002      	ands	r2, r0
    20de:	4313      	orrs	r3, r2
    20e0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    20e2:	4b06      	ldr	r3, [pc, #24]	; (20fc <system_gclk_chan_disable+0x58>)
    20e4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    20e6:	bd10      	pop	{r4, pc}
    20e8:	000007a9 	.word	0x000007a9
    20ec:	40000c02 	.word	0x40000c02
    20f0:	40000c00 	.word	0x40000c00
    20f4:	fffff0ff 	.word	0xfffff0ff
    20f8:	ffffbfff 	.word	0xffffbfff
    20fc:	000007e9 	.word	0x000007e9

00002100 <system_gclk_chan_set_config>:
{
    2100:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2102:	780c      	ldrb	r4, [r1, #0]
    2104:	0224      	lsls	r4, r4, #8
    2106:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2108:	4b02      	ldr	r3, [pc, #8]	; (2114 <system_gclk_chan_set_config+0x14>)
    210a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    210c:	b2a4      	uxth	r4, r4
    210e:	4b02      	ldr	r3, [pc, #8]	; (2118 <system_gclk_chan_set_config+0x18>)
    2110:	805c      	strh	r4, [r3, #2]
}
    2112:	bd10      	pop	{r4, pc}
    2114:	000020a5 	.word	0x000020a5
    2118:	40000c00 	.word	0x40000c00

0000211c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    211c:	b510      	push	{r4, lr}
    211e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2120:	4b06      	ldr	r3, [pc, #24]	; (213c <system_gclk_chan_get_hz+0x20>)
    2122:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2124:	4b06      	ldr	r3, [pc, #24]	; (2140 <system_gclk_chan_get_hz+0x24>)
    2126:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2128:	4b06      	ldr	r3, [pc, #24]	; (2144 <system_gclk_chan_get_hz+0x28>)
    212a:	885c      	ldrh	r4, [r3, #2]
    212c:	0524      	lsls	r4, r4, #20
    212e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2130:	4b05      	ldr	r3, [pc, #20]	; (2148 <system_gclk_chan_get_hz+0x2c>)
    2132:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2134:	0020      	movs	r0, r4
    2136:	4b05      	ldr	r3, [pc, #20]	; (214c <system_gclk_chan_get_hz+0x30>)
    2138:	4798      	blx	r3
}
    213a:	bd10      	pop	{r4, pc}
    213c:	000007a9 	.word	0x000007a9
    2140:	40000c02 	.word	0x40000c02
    2144:	40000c00 	.word	0x40000c00
    2148:	000007e9 	.word	0x000007e9
    214c:	00001fe9 	.word	0x00001fe9

00002150 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2150:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2152:	78d3      	ldrb	r3, [r2, #3]
    2154:	2b00      	cmp	r3, #0
    2156:	d135      	bne.n	21c4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2158:	7813      	ldrb	r3, [r2, #0]
    215a:	2b80      	cmp	r3, #128	; 0x80
    215c:	d029      	beq.n	21b2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    215e:	061b      	lsls	r3, r3, #24
    2160:	2480      	movs	r4, #128	; 0x80
    2162:	0264      	lsls	r4, r4, #9
    2164:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2166:	7854      	ldrb	r4, [r2, #1]
    2168:	2502      	movs	r5, #2
    216a:	43ac      	bics	r4, r5
    216c:	d106      	bne.n	217c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    216e:	7894      	ldrb	r4, [r2, #2]
    2170:	2c00      	cmp	r4, #0
    2172:	d120      	bne.n	21b6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2174:	2480      	movs	r4, #128	; 0x80
    2176:	02a4      	lsls	r4, r4, #10
    2178:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    217a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    217c:	7854      	ldrb	r4, [r2, #1]
    217e:	3c01      	subs	r4, #1
    2180:	2c01      	cmp	r4, #1
    2182:	d91c      	bls.n	21be <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2184:	040d      	lsls	r5, r1, #16
    2186:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2188:	24a0      	movs	r4, #160	; 0xa0
    218a:	05e4      	lsls	r4, r4, #23
    218c:	432c      	orrs	r4, r5
    218e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2190:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2192:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2194:	24d0      	movs	r4, #208	; 0xd0
    2196:	0624      	lsls	r4, r4, #24
    2198:	432c      	orrs	r4, r5
    219a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    219c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    219e:	78d4      	ldrb	r4, [r2, #3]
    21a0:	2c00      	cmp	r4, #0
    21a2:	d122      	bne.n	21ea <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    21a4:	035b      	lsls	r3, r3, #13
    21a6:	d51c      	bpl.n	21e2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    21a8:	7893      	ldrb	r3, [r2, #2]
    21aa:	2b01      	cmp	r3, #1
    21ac:	d01e      	beq.n	21ec <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    21ae:	6141      	str	r1, [r0, #20]
    21b0:	e017      	b.n	21e2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    21b2:	2300      	movs	r3, #0
    21b4:	e7d7      	b.n	2166 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    21b6:	24c0      	movs	r4, #192	; 0xc0
    21b8:	02e4      	lsls	r4, r4, #11
    21ba:	4323      	orrs	r3, r4
    21bc:	e7dd      	b.n	217a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    21be:	4c0d      	ldr	r4, [pc, #52]	; (21f4 <_system_pinmux_config+0xa4>)
    21c0:	4023      	ands	r3, r4
    21c2:	e7df      	b.n	2184 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    21c4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    21c6:	040c      	lsls	r4, r1, #16
    21c8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    21ca:	23a0      	movs	r3, #160	; 0xa0
    21cc:	05db      	lsls	r3, r3, #23
    21ce:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    21d0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    21d2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    21d4:	23d0      	movs	r3, #208	; 0xd0
    21d6:	061b      	lsls	r3, r3, #24
    21d8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    21da:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    21dc:	78d3      	ldrb	r3, [r2, #3]
    21de:	2b00      	cmp	r3, #0
    21e0:	d103      	bne.n	21ea <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    21e2:	7853      	ldrb	r3, [r2, #1]
    21e4:	3b01      	subs	r3, #1
    21e6:	2b01      	cmp	r3, #1
    21e8:	d902      	bls.n	21f0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    21ea:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    21ec:	6181      	str	r1, [r0, #24]
    21ee:	e7f8      	b.n	21e2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    21f0:	6081      	str	r1, [r0, #8]
}
    21f2:	e7fa      	b.n	21ea <_system_pinmux_config+0x9a>
    21f4:	fffbffff 	.word	0xfffbffff

000021f8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    21f8:	b510      	push	{r4, lr}
    21fa:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    21fc:	09c1      	lsrs	r1, r0, #7
		return NULL;
    21fe:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2200:	2900      	cmp	r1, #0
    2202:	d104      	bne.n	220e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2204:	0943      	lsrs	r3, r0, #5
    2206:	01db      	lsls	r3, r3, #7
    2208:	4905      	ldr	r1, [pc, #20]	; (2220 <system_pinmux_pin_set_config+0x28>)
    220a:	468c      	mov	ip, r1
    220c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    220e:	241f      	movs	r4, #31
    2210:	4020      	ands	r0, r4
    2212:	2101      	movs	r1, #1
    2214:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2216:	0018      	movs	r0, r3
    2218:	4b02      	ldr	r3, [pc, #8]	; (2224 <system_pinmux_pin_set_config+0x2c>)
    221a:	4798      	blx	r3
}
    221c:	bd10      	pop	{r4, pc}
    221e:	46c0      	nop			; (mov r8, r8)
    2220:	41004400 	.word	0x41004400
    2224:	00002151 	.word	0x00002151

00002228 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2228:	4770      	bx	lr
	...

0000222c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    222c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    222e:	4b05      	ldr	r3, [pc, #20]	; (2244 <system_init+0x18>)
    2230:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2232:	4b05      	ldr	r3, [pc, #20]	; (2248 <system_init+0x1c>)
    2234:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2236:	4b05      	ldr	r3, [pc, #20]	; (224c <system_init+0x20>)
    2238:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    223a:	4b05      	ldr	r3, [pc, #20]	; (2250 <system_init+0x24>)
    223c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    223e:	4b05      	ldr	r3, [pc, #20]	; (2254 <system_init+0x28>)
    2240:	4798      	blx	r3
}
    2242:	bd10      	pop	{r4, pc}
    2244:	00001cd5 	.word	0x00001cd5
    2248:	00000819 	.word	0x00000819
    224c:	00002229 	.word	0x00002229
    2250:	00000985 	.word	0x00000985
    2254:	00002229 	.word	0x00002229

00002258 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2258:	1c93      	adds	r3, r2, #2
    225a:	009b      	lsls	r3, r3, #2
    225c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    225e:	2a02      	cmp	r2, #2
    2260:	d009      	beq.n	2276 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    2262:	2a03      	cmp	r2, #3
    2264:	d00c      	beq.n	2280 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    2266:	2301      	movs	r3, #1
    2268:	4093      	lsls	r3, r2
    226a:	001a      	movs	r2, r3
    226c:	7e03      	ldrb	r3, [r0, #24]
    226e:	4313      	orrs	r3, r2
    2270:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    2272:	2000      	movs	r0, #0
    2274:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    2276:	7e03      	ldrb	r3, [r0, #24]
    2278:	2210      	movs	r2, #16
    227a:	4313      	orrs	r3, r2
    227c:	7603      	strb	r3, [r0, #24]
    227e:	e7f8      	b.n	2272 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    2280:	7e03      	ldrb	r3, [r0, #24]
    2282:	2220      	movs	r2, #32
    2284:	4313      	orrs	r3, r2
    2286:	7603      	strb	r3, [r0, #24]
    2288:	e7f3      	b.n	2272 <tc_register_callback+0x1a>
	...

0000228c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    228c:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    228e:	0080      	lsls	r0, r0, #2
    2290:	4b16      	ldr	r3, [pc, #88]	; (22ec <_tc_interrupt_handler+0x60>)
    2292:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2294:	6823      	ldr	r3, [r4, #0]
    2296:	7b9d      	ldrb	r5, [r3, #14]
    2298:	7e22      	ldrb	r2, [r4, #24]
    229a:	7e63      	ldrb	r3, [r4, #25]
    229c:	4013      	ands	r3, r2
    229e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    22a0:	07eb      	lsls	r3, r5, #31
    22a2:	d406      	bmi.n	22b2 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    22a4:	07ab      	lsls	r3, r5, #30
    22a6:	d40b      	bmi.n	22c0 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    22a8:	06eb      	lsls	r3, r5, #27
    22aa:	d410      	bmi.n	22ce <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    22ac:	06ab      	lsls	r3, r5, #26
    22ae:	d415      	bmi.n	22dc <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    22b0:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    22b2:	0020      	movs	r0, r4
    22b4:	68a3      	ldr	r3, [r4, #8]
    22b6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    22b8:	2301      	movs	r3, #1
    22ba:	6822      	ldr	r2, [r4, #0]
    22bc:	7393      	strb	r3, [r2, #14]
    22be:	e7f1      	b.n	22a4 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    22c0:	0020      	movs	r0, r4
    22c2:	68e3      	ldr	r3, [r4, #12]
    22c4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    22c6:	2302      	movs	r3, #2
    22c8:	6822      	ldr	r2, [r4, #0]
    22ca:	7393      	strb	r3, [r2, #14]
    22cc:	e7ec      	b.n	22a8 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    22ce:	0020      	movs	r0, r4
    22d0:	6923      	ldr	r3, [r4, #16]
    22d2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    22d4:	2310      	movs	r3, #16
    22d6:	6822      	ldr	r2, [r4, #0]
    22d8:	7393      	strb	r3, [r2, #14]
    22da:	e7e7      	b.n	22ac <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    22dc:	0020      	movs	r0, r4
    22de:	6963      	ldr	r3, [r4, #20]
    22e0:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    22e2:	6823      	ldr	r3, [r4, #0]
    22e4:	2220      	movs	r2, #32
    22e6:	739a      	strb	r2, [r3, #14]
}
    22e8:	e7e2      	b.n	22b0 <_tc_interrupt_handler+0x24>
    22ea:	46c0      	nop			; (mov r8, r8)
    22ec:	200009d0 	.word	0x200009d0

000022f0 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    22f0:	b510      	push	{r4, lr}
    22f2:	2000      	movs	r0, #0
    22f4:	4b01      	ldr	r3, [pc, #4]	; (22fc <TC3_Handler+0xc>)
    22f6:	4798      	blx	r3
    22f8:	bd10      	pop	{r4, pc}
    22fa:	46c0      	nop			; (mov r8, r8)
    22fc:	0000228d 	.word	0x0000228d

00002300 <TC4_Handler>:
    2300:	b510      	push	{r4, lr}
    2302:	2001      	movs	r0, #1
    2304:	4b01      	ldr	r3, [pc, #4]	; (230c <TC4_Handler+0xc>)
    2306:	4798      	blx	r3
    2308:	bd10      	pop	{r4, pc}
    230a:	46c0      	nop			; (mov r8, r8)
    230c:	0000228d 	.word	0x0000228d

00002310 <TC5_Handler>:
    2310:	b510      	push	{r4, lr}
    2312:	2002      	movs	r0, #2
    2314:	4b01      	ldr	r3, [pc, #4]	; (231c <TC5_Handler+0xc>)
    2316:	4798      	blx	r3
    2318:	bd10      	pop	{r4, pc}
    231a:	46c0      	nop			; (mov r8, r8)
    231c:	0000228d 	.word	0x0000228d

00002320 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    2320:	b530      	push	{r4, r5, lr}
    2322:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2324:	aa01      	add	r2, sp, #4
    2326:	4b0b      	ldr	r3, [pc, #44]	; (2354 <_tc_get_inst_index+0x34>)
    2328:	cb32      	ldmia	r3!, {r1, r4, r5}
    232a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    232c:	9b01      	ldr	r3, [sp, #4]
    232e:	4298      	cmp	r0, r3
    2330:	d00d      	beq.n	234e <_tc_get_inst_index+0x2e>
    2332:	9b02      	ldr	r3, [sp, #8]
    2334:	4298      	cmp	r0, r3
    2336:	d008      	beq.n	234a <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    2338:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    233a:	9a03      	ldr	r2, [sp, #12]
    233c:	4282      	cmp	r2, r0
    233e:	d002      	beq.n	2346 <_tc_get_inst_index+0x26>
}
    2340:	0018      	movs	r0, r3
    2342:	b005      	add	sp, #20
    2344:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2346:	3302      	adds	r3, #2
    2348:	e002      	b.n	2350 <_tc_get_inst_index+0x30>
    234a:	2301      	movs	r3, #1
    234c:	e000      	b.n	2350 <_tc_get_inst_index+0x30>
    234e:	2300      	movs	r3, #0
			return i;
    2350:	b2db      	uxtb	r3, r3
    2352:	e7f5      	b.n	2340 <_tc_get_inst_index+0x20>
    2354:	00008b70 	.word	0x00008b70

00002358 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    2358:	b5f0      	push	{r4, r5, r6, r7, lr}
    235a:	b087      	sub	sp, #28
    235c:	0004      	movs	r4, r0
    235e:	000d      	movs	r5, r1
    2360:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    2362:	0008      	movs	r0, r1
    2364:	4b85      	ldr	r3, [pc, #532]	; (257c <tc_init+0x224>)
    2366:	4798      	blx	r3
    2368:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    236a:	ab05      	add	r3, sp, #20
    236c:	221b      	movs	r2, #27
    236e:	701a      	strb	r2, [r3, #0]
    2370:	3201      	adds	r2, #1
    2372:	705a      	strb	r2, [r3, #1]
    2374:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    2376:	ab03      	add	r3, sp, #12
    2378:	2280      	movs	r2, #128	; 0x80
    237a:	0112      	lsls	r2, r2, #4
    237c:	801a      	strh	r2, [r3, #0]
    237e:	2280      	movs	r2, #128	; 0x80
    2380:	0152      	lsls	r2, r2, #5
    2382:	805a      	strh	r2, [r3, #2]
    2384:	2280      	movs	r2, #128	; 0x80
    2386:	0192      	lsls	r2, r2, #6
    2388:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    238a:	2300      	movs	r3, #0
    238c:	60a3      	str	r3, [r4, #8]
    238e:	60e3      	str	r3, [r4, #12]
    2390:	6123      	str	r3, [r4, #16]
    2392:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    2394:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    2396:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    2398:	0082      	lsls	r2, r0, #2
    239a:	4b79      	ldr	r3, [pc, #484]	; (2580 <tc_init+0x228>)
    239c:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    239e:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    23a0:	78b3      	ldrb	r3, [r6, #2]
    23a2:	2b08      	cmp	r3, #8
    23a4:	d006      	beq.n	23b4 <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    23a6:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    23a8:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    23aa:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    23ac:	07db      	lsls	r3, r3, #31
    23ae:	d505      	bpl.n	23bc <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    23b0:	b007      	add	sp, #28
    23b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    23b4:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    23b6:	07fa      	lsls	r2, r7, #31
    23b8:	d5fa      	bpl.n	23b0 <tc_init+0x58>
    23ba:	e7f4      	b.n	23a6 <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    23bc:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    23be:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    23c0:	06db      	lsls	r3, r3, #27
    23c2:	d4f5      	bmi.n	23b0 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    23c4:	882b      	ldrh	r3, [r5, #0]
    23c6:	079b      	lsls	r3, r3, #30
    23c8:	d4f2      	bmi.n	23b0 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    23ca:	7c33      	ldrb	r3, [r6, #16]
    23cc:	2b00      	cmp	r3, #0
    23ce:	d179      	bne.n	24c4 <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    23d0:	7f33      	ldrb	r3, [r6, #28]
    23d2:	2b00      	cmp	r3, #0
    23d4:	d000      	beq.n	23d8 <tc_init+0x80>
    23d6:	e081      	b.n	24dc <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    23d8:	496a      	ldr	r1, [pc, #424]	; (2584 <tc_init+0x22c>)
    23da:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    23dc:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    23de:	ab03      	add	r3, sp, #12
    23e0:	5ad3      	ldrh	r3, [r2, r3]
    23e2:	4303      	orrs	r3, r0
    23e4:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    23e6:	78b3      	ldrb	r3, [r6, #2]
    23e8:	2b08      	cmp	r3, #8
    23ea:	d100      	bne.n	23ee <tc_init+0x96>
    23ec:	e086      	b.n	24fc <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    23ee:	a901      	add	r1, sp, #4
    23f0:	7833      	ldrb	r3, [r6, #0]
    23f2:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    23f4:	ab05      	add	r3, sp, #20
    23f6:	5ddf      	ldrb	r7, [r3, r7]
    23f8:	0038      	movs	r0, r7
    23fa:	4b63      	ldr	r3, [pc, #396]	; (2588 <tc_init+0x230>)
    23fc:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    23fe:	0038      	movs	r0, r7
    2400:	4b62      	ldr	r3, [pc, #392]	; (258c <tc_init+0x234>)
    2402:	4798      	blx	r3
	ctrla_tmp =
    2404:	8931      	ldrh	r1, [r6, #8]
    2406:	88b3      	ldrh	r3, [r6, #4]
    2408:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    240a:	78b1      	ldrb	r1, [r6, #2]
    240c:	79b2      	ldrb	r2, [r6, #6]
    240e:	4311      	orrs	r1, r2
	ctrla_tmp =
    2410:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    2412:	7873      	ldrb	r3, [r6, #1]
    2414:	2b00      	cmp	r3, #0
    2416:	d002      	beq.n	241e <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    2418:	2380      	movs	r3, #128	; 0x80
    241a:	011b      	lsls	r3, r3, #4
    241c:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    241e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2420:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2422:	b25b      	sxtb	r3, r3
    2424:	2b00      	cmp	r3, #0
    2426:	dbfb      	blt.n	2420 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    2428:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    242a:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    242c:	1e4b      	subs	r3, r1, #1
    242e:	4199      	sbcs	r1, r3
    2430:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    2432:	7bb3      	ldrb	r3, [r6, #14]
    2434:	2b00      	cmp	r3, #0
    2436:	d001      	beq.n	243c <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    2438:	2301      	movs	r3, #1
    243a:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    243c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    243e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2440:	b25b      	sxtb	r3, r3
    2442:	2b00      	cmp	r3, #0
    2444:	dbfb      	blt.n	243e <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    2446:	23ff      	movs	r3, #255	; 0xff
    2448:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    244a:	2900      	cmp	r1, #0
    244c:	d005      	beq.n	245a <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    244e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2450:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    2452:	b25b      	sxtb	r3, r3
    2454:	2b00      	cmp	r3, #0
    2456:	dbfb      	blt.n	2450 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    2458:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    245a:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    245c:	7af3      	ldrb	r3, [r6, #11]
    245e:	2b00      	cmp	r3, #0
    2460:	d001      	beq.n	2466 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2462:	2310      	movs	r3, #16
    2464:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    2466:	7b33      	ldrb	r3, [r6, #12]
    2468:	2b00      	cmp	r3, #0
    246a:	d001      	beq.n	2470 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    246c:	2320      	movs	r3, #32
    246e:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2470:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2472:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2474:	b25b      	sxtb	r3, r3
    2476:	2b00      	cmp	r3, #0
    2478:	dbfb      	blt.n	2472 <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    247a:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    247c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    247e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2480:	b25b      	sxtb	r3, r3
    2482:	2b00      	cmp	r3, #0
    2484:	dbfb      	blt.n	247e <tc_init+0x126>
	switch (module_inst->counter_size) {
    2486:	7923      	ldrb	r3, [r4, #4]
    2488:	2b04      	cmp	r3, #4
    248a:	d03f      	beq.n	250c <tc_init+0x1b4>
    248c:	2b08      	cmp	r3, #8
    248e:	d05e      	beq.n	254e <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    2490:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    2492:	2b00      	cmp	r3, #0
    2494:	d000      	beq.n	2498 <tc_init+0x140>
    2496:	e78b      	b.n	23b0 <tc_init+0x58>
    2498:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    249a:	b25b      	sxtb	r3, r3
    249c:	2b00      	cmp	r3, #0
    249e:	dbfb      	blt.n	2498 <tc_init+0x140>
				= config->counter_16_bit.value;
    24a0:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    24a2:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    24a4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    24a6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    24a8:	b25b      	sxtb	r3, r3
    24aa:	2b00      	cmp	r3, #0
    24ac:	dbfb      	blt.n	24a6 <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    24ae:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    24b0:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    24b2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    24b4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    24b6:	b25b      	sxtb	r3, r3
    24b8:	2b00      	cmp	r3, #0
    24ba:	dbfb      	blt.n	24b4 <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    24bc:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    24be:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    24c0:	2000      	movs	r0, #0
    24c2:	e775      	b.n	23b0 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    24c4:	a902      	add	r1, sp, #8
    24c6:	2301      	movs	r3, #1
    24c8:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    24ca:	2200      	movs	r2, #0
    24cc:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    24ce:	7e32      	ldrb	r2, [r6, #24]
    24d0:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    24d2:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    24d4:	7d30      	ldrb	r0, [r6, #20]
    24d6:	4b2e      	ldr	r3, [pc, #184]	; (2590 <tc_init+0x238>)
    24d8:	4798      	blx	r3
    24da:	e779      	b.n	23d0 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    24dc:	a902      	add	r1, sp, #8
    24de:	2301      	movs	r3, #1
    24e0:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    24e2:	2200      	movs	r2, #0
    24e4:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    24e6:	3224      	adds	r2, #36	; 0x24
    24e8:	18b2      	adds	r2, r6, r2
    24ea:	7812      	ldrb	r2, [r2, #0]
    24ec:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    24ee:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    24f0:	331f      	adds	r3, #31
    24f2:	18f3      	adds	r3, r6, r3
    24f4:	7818      	ldrb	r0, [r3, #0]
    24f6:	4b26      	ldr	r3, [pc, #152]	; (2590 <tc_init+0x238>)
    24f8:	4798      	blx	r3
    24fa:	e76d      	b.n	23d8 <tc_init+0x80>
    24fc:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    24fe:	1c7a      	adds	r2, r7, #1
    2500:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2502:	ab03      	add	r3, sp, #12
    2504:	5ad3      	ldrh	r3, [r2, r3]
    2506:	4303      	orrs	r3, r0
    2508:	620b      	str	r3, [r1, #32]
    250a:	e770      	b.n	23ee <tc_init+0x96>
    250c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    250e:	b25b      	sxtb	r3, r3
    2510:	2b00      	cmp	r3, #0
    2512:	dbfb      	blt.n	250c <tc_init+0x1b4>
					config->counter_8_bit.value;
    2514:	2328      	movs	r3, #40	; 0x28
    2516:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    2518:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    251a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    251c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    251e:	b25b      	sxtb	r3, r3
    2520:	2b00      	cmp	r3, #0
    2522:	dbfb      	blt.n	251c <tc_init+0x1c4>
					config->counter_8_bit.period;
    2524:	2329      	movs	r3, #41	; 0x29
    2526:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    2528:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    252a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    252c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    252e:	b25b      	sxtb	r3, r3
    2530:	2b00      	cmp	r3, #0
    2532:	dbfb      	blt.n	252c <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    2534:	232a      	movs	r3, #42	; 0x2a
    2536:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    2538:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    253a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    253c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    253e:	b25b      	sxtb	r3, r3
    2540:	2b00      	cmp	r3, #0
    2542:	dbfb      	blt.n	253c <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    2544:	232b      	movs	r3, #43	; 0x2b
    2546:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    2548:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    254a:	2000      	movs	r0, #0
    254c:	e730      	b.n	23b0 <tc_init+0x58>
    254e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2550:	b25b      	sxtb	r3, r3
    2552:	2b00      	cmp	r3, #0
    2554:	dbfb      	blt.n	254e <tc_init+0x1f6>
				= config->counter_32_bit.value;
    2556:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2558:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    255a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    255c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    255e:	b25b      	sxtb	r3, r3
    2560:	2b00      	cmp	r3, #0
    2562:	dbfb      	blt.n	255c <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    2564:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2566:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2568:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    256a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    256c:	b25b      	sxtb	r3, r3
    256e:	2b00      	cmp	r3, #0
    2570:	dbfb      	blt.n	256a <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    2572:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    2574:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    2576:	2000      	movs	r0, #0
    2578:	e71a      	b.n	23b0 <tc_init+0x58>
    257a:	46c0      	nop			; (mov r8, r8)
    257c:	00002321 	.word	0x00002321
    2580:	200009d0 	.word	0x200009d0
    2584:	40000400 	.word	0x40000400
    2588:	00002101 	.word	0x00002101
    258c:	00002075 	.word	0x00002075
    2590:	000021f9 	.word	0x000021f9

00002594 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    2594:	6802      	ldr	r2, [r0, #0]
    2596:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    2598:	b25b      	sxtb	r3, r3
    259a:	2b00      	cmp	r3, #0
    259c:	dbfb      	blt.n	2596 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    259e:	7903      	ldrb	r3, [r0, #4]
    25a0:	2b04      	cmp	r3, #4
    25a2:	d005      	beq.n	25b0 <tc_get_count_value+0x1c>
    25a4:	2b08      	cmp	r3, #8
    25a6:	d009      	beq.n	25bc <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    25a8:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    25aa:	2b00      	cmp	r3, #0
    25ac:	d003      	beq.n	25b6 <tc_get_count_value+0x22>
}
    25ae:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    25b0:	7c10      	ldrb	r0, [r2, #16]
    25b2:	b2c0      	uxtb	r0, r0
    25b4:	e7fb      	b.n	25ae <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    25b6:	8a10      	ldrh	r0, [r2, #16]
    25b8:	b280      	uxth	r0, r0
    25ba:	e7f8      	b.n	25ae <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    25bc:	6910      	ldr	r0, [r2, #16]
    25be:	e7f6      	b.n	25ae <tc_get_count_value+0x1a>

000025c0 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    25c0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    25c2:	6804      	ldr	r4, [r0, #0]
    25c4:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    25c6:	b25b      	sxtb	r3, r3
    25c8:	2b00      	cmp	r3, #0
    25ca:	dbfb      	blt.n	25c4 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    25cc:	7903      	ldrb	r3, [r0, #4]
    25ce:	2b04      	cmp	r3, #4
    25d0:	d005      	beq.n	25de <tc_set_compare_value+0x1e>
    25d2:	2b08      	cmp	r3, #8
    25d4:	d014      	beq.n	2600 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    25d6:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    25d8:	2b00      	cmp	r3, #0
    25da:	d008      	beq.n	25ee <tc_set_compare_value+0x2e>
}
    25dc:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    25de:	2017      	movs	r0, #23
			if (channel_index <
    25e0:	2901      	cmp	r1, #1
    25e2:	d8fb      	bhi.n	25dc <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    25e4:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    25e6:	1861      	adds	r1, r4, r1
    25e8:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    25ea:	2000      	movs	r0, #0
    25ec:	e7f6      	b.n	25dc <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    25ee:	2017      	movs	r0, #23
			if (channel_index <
    25f0:	2901      	cmp	r1, #1
    25f2:	d8f3      	bhi.n	25dc <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    25f4:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    25f6:	310c      	adds	r1, #12
    25f8:	0049      	lsls	r1, r1, #1
    25fa:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    25fc:	2000      	movs	r0, #0
    25fe:	e7ed      	b.n	25dc <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    2600:	2017      	movs	r0, #23
			if (channel_index <
    2602:	2901      	cmp	r1, #1
    2604:	d8ea      	bhi.n	25dc <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    2606:	3106      	adds	r1, #6
    2608:	0089      	lsls	r1, r1, #2
    260a:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    260c:	2000      	movs	r0, #0
    260e:	e7e5      	b.n	25dc <tc_set_compare_value+0x1c>

00002610 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2610:	e7fe      	b.n	2610 <Dummy_Handler>
	...

00002614 <Reset_Handler>:
{
    2614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2616:	4a2a      	ldr	r2, [pc, #168]	; (26c0 <Reset_Handler+0xac>)
    2618:	4b2a      	ldr	r3, [pc, #168]	; (26c4 <Reset_Handler+0xb0>)
    261a:	429a      	cmp	r2, r3
    261c:	d011      	beq.n	2642 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    261e:	001a      	movs	r2, r3
    2620:	4b29      	ldr	r3, [pc, #164]	; (26c8 <Reset_Handler+0xb4>)
    2622:	429a      	cmp	r2, r3
    2624:	d20d      	bcs.n	2642 <Reset_Handler+0x2e>
    2626:	4a29      	ldr	r2, [pc, #164]	; (26cc <Reset_Handler+0xb8>)
    2628:	3303      	adds	r3, #3
    262a:	1a9b      	subs	r3, r3, r2
    262c:	089b      	lsrs	r3, r3, #2
    262e:	3301      	adds	r3, #1
    2630:	009b      	lsls	r3, r3, #2
    2632:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2634:	4823      	ldr	r0, [pc, #140]	; (26c4 <Reset_Handler+0xb0>)
    2636:	4922      	ldr	r1, [pc, #136]	; (26c0 <Reset_Handler+0xac>)
    2638:	588c      	ldr	r4, [r1, r2]
    263a:	5084      	str	r4, [r0, r2]
    263c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    263e:	429a      	cmp	r2, r3
    2640:	d1fa      	bne.n	2638 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2642:	4a23      	ldr	r2, [pc, #140]	; (26d0 <Reset_Handler+0xbc>)
    2644:	4b23      	ldr	r3, [pc, #140]	; (26d4 <Reset_Handler+0xc0>)
    2646:	429a      	cmp	r2, r3
    2648:	d20a      	bcs.n	2660 <Reset_Handler+0x4c>
    264a:	43d3      	mvns	r3, r2
    264c:	4921      	ldr	r1, [pc, #132]	; (26d4 <Reset_Handler+0xc0>)
    264e:	185b      	adds	r3, r3, r1
    2650:	2103      	movs	r1, #3
    2652:	438b      	bics	r3, r1
    2654:	3304      	adds	r3, #4
    2656:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2658:	2100      	movs	r1, #0
    265a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    265c:	4293      	cmp	r3, r2
    265e:	d1fc      	bne.n	265a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2660:	4a1d      	ldr	r2, [pc, #116]	; (26d8 <Reset_Handler+0xc4>)
    2662:	21ff      	movs	r1, #255	; 0xff
    2664:	4b1d      	ldr	r3, [pc, #116]	; (26dc <Reset_Handler+0xc8>)
    2666:	438b      	bics	r3, r1
    2668:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    266a:	39fd      	subs	r1, #253	; 0xfd
    266c:	2390      	movs	r3, #144	; 0x90
    266e:	005b      	lsls	r3, r3, #1
    2670:	4a1b      	ldr	r2, [pc, #108]	; (26e0 <Reset_Handler+0xcc>)
    2672:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2674:	4a1b      	ldr	r2, [pc, #108]	; (26e4 <Reset_Handler+0xd0>)
    2676:	78d3      	ldrb	r3, [r2, #3]
    2678:	2503      	movs	r5, #3
    267a:	43ab      	bics	r3, r5
    267c:	2402      	movs	r4, #2
    267e:	4323      	orrs	r3, r4
    2680:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2682:	78d3      	ldrb	r3, [r2, #3]
    2684:	270c      	movs	r7, #12
    2686:	43bb      	bics	r3, r7
    2688:	2608      	movs	r6, #8
    268a:	4333      	orrs	r3, r6
    268c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    268e:	4b16      	ldr	r3, [pc, #88]	; (26e8 <Reset_Handler+0xd4>)
    2690:	7b98      	ldrb	r0, [r3, #14]
    2692:	2230      	movs	r2, #48	; 0x30
    2694:	4390      	bics	r0, r2
    2696:	2220      	movs	r2, #32
    2698:	4310      	orrs	r0, r2
    269a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    269c:	7b99      	ldrb	r1, [r3, #14]
    269e:	43b9      	bics	r1, r7
    26a0:	4331      	orrs	r1, r6
    26a2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    26a4:	7b9a      	ldrb	r2, [r3, #14]
    26a6:	43aa      	bics	r2, r5
    26a8:	4322      	orrs	r2, r4
    26aa:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    26ac:	4a0f      	ldr	r2, [pc, #60]	; (26ec <Reset_Handler+0xd8>)
    26ae:	6853      	ldr	r3, [r2, #4]
    26b0:	2180      	movs	r1, #128	; 0x80
    26b2:	430b      	orrs	r3, r1
    26b4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    26b6:	4b0e      	ldr	r3, [pc, #56]	; (26f0 <Reset_Handler+0xdc>)
    26b8:	4798      	blx	r3
        main();
    26ba:	4b0e      	ldr	r3, [pc, #56]	; (26f4 <Reset_Handler+0xe0>)
    26bc:	4798      	blx	r3
    26be:	e7fe      	b.n	26be <Reset_Handler+0xaa>
    26c0:	00008fc0 	.word	0x00008fc0
    26c4:	20000000 	.word	0x20000000
    26c8:	200001dc 	.word	0x200001dc
    26cc:	20000004 	.word	0x20000004
    26d0:	200001dc 	.word	0x200001dc
    26d4:	20000af0 	.word	0x20000af0
    26d8:	e000ed00 	.word	0xe000ed00
    26dc:	00000000 	.word	0x00000000
    26e0:	41007000 	.word	0x41007000
    26e4:	41005000 	.word	0x41005000
    26e8:	41004800 	.word	0x41004800
    26ec:	41004000 	.word	0x41004000
    26f0:	00003545 	.word	0x00003545
    26f4:	00003435 	.word	0x00003435

000026f8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    26f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    26fa:	46c6      	mov	lr, r8
    26fc:	b500      	push	{lr}
    26fe:	000c      	movs	r4, r1
    2700:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2702:	2800      	cmp	r0, #0
    2704:	d10f      	bne.n	2726 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    2706:	2a00      	cmp	r2, #0
    2708:	dd11      	ble.n	272e <_read+0x36>
    270a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    270c:	4e09      	ldr	r6, [pc, #36]	; (2734 <_read+0x3c>)
    270e:	4d0a      	ldr	r5, [pc, #40]	; (2738 <_read+0x40>)
    2710:	6830      	ldr	r0, [r6, #0]
    2712:	0021      	movs	r1, r4
    2714:	682b      	ldr	r3, [r5, #0]
    2716:	4798      	blx	r3
		ptr++;
    2718:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    271a:	42bc      	cmp	r4, r7
    271c:	d1f8      	bne.n	2710 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    271e:	4640      	mov	r0, r8
    2720:	bc04      	pop	{r2}
    2722:	4690      	mov	r8, r2
    2724:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    2726:	2301      	movs	r3, #1
    2728:	425b      	negs	r3, r3
    272a:	4698      	mov	r8, r3
    272c:	e7f7      	b.n	271e <_read+0x26>
	for (; len > 0; --len) {
    272e:	4680      	mov	r8, r0
    2730:	e7f5      	b.n	271e <_read+0x26>
    2732:	46c0      	nop			; (mov r8, r8)
    2734:	200009e4 	.word	0x200009e4
    2738:	200009dc 	.word	0x200009dc

0000273c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    273c:	b5f0      	push	{r4, r5, r6, r7, lr}
    273e:	46c6      	mov	lr, r8
    2740:	b500      	push	{lr}
    2742:	000e      	movs	r6, r1
    2744:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2746:	3801      	subs	r0, #1
    2748:	2802      	cmp	r0, #2
    274a:	d810      	bhi.n	276e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    274c:	2a00      	cmp	r2, #0
    274e:	d011      	beq.n	2774 <_write+0x38>
    2750:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2752:	4b0c      	ldr	r3, [pc, #48]	; (2784 <_write+0x48>)
    2754:	4698      	mov	r8, r3
    2756:	4f0c      	ldr	r7, [pc, #48]	; (2788 <_write+0x4c>)
    2758:	4643      	mov	r3, r8
    275a:	6818      	ldr	r0, [r3, #0]
    275c:	5d31      	ldrb	r1, [r6, r4]
    275e:	683b      	ldr	r3, [r7, #0]
    2760:	4798      	blx	r3
    2762:	2800      	cmp	r0, #0
    2764:	db08      	blt.n	2778 <_write+0x3c>
			return -1;
		}
		++nChars;
    2766:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2768:	42a5      	cmp	r5, r4
    276a:	d1f5      	bne.n	2758 <_write+0x1c>
    276c:	e006      	b.n	277c <_write+0x40>
		return -1;
    276e:	2401      	movs	r4, #1
    2770:	4264      	negs	r4, r4
    2772:	e003      	b.n	277c <_write+0x40>
	for (; len != 0; --len) {
    2774:	0014      	movs	r4, r2
    2776:	e001      	b.n	277c <_write+0x40>
			return -1;
    2778:	2401      	movs	r4, #1
    277a:	4264      	negs	r4, r4
	}
	return nChars;
}
    277c:	0020      	movs	r0, r4
    277e:	bc04      	pop	{r2}
    2780:	4690      	mov	r8, r2
    2782:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2784:	200009e4 	.word	0x200009e4
    2788:	200009e0 	.word	0x200009e0

0000278c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    278c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    278e:	4a06      	ldr	r2, [pc, #24]	; (27a8 <_sbrk+0x1c>)
    2790:	6812      	ldr	r2, [r2, #0]
    2792:	2a00      	cmp	r2, #0
    2794:	d004      	beq.n	27a0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2796:	4a04      	ldr	r2, [pc, #16]	; (27a8 <_sbrk+0x1c>)
    2798:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    279a:	18c3      	adds	r3, r0, r3
    279c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    279e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    27a0:	4902      	ldr	r1, [pc, #8]	; (27ac <_sbrk+0x20>)
    27a2:	4a01      	ldr	r2, [pc, #4]	; (27a8 <_sbrk+0x1c>)
    27a4:	6011      	str	r1, [r2, #0]
    27a6:	e7f6      	b.n	2796 <_sbrk+0xa>
    27a8:	20000238 	.word	0x20000238
    27ac:	20002af0 	.word	0x20002af0

000027b0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    27b0:	2001      	movs	r0, #1
    27b2:	4240      	negs	r0, r0
    27b4:	4770      	bx	lr

000027b6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    27b6:	2380      	movs	r3, #128	; 0x80
    27b8:	019b      	lsls	r3, r3, #6
    27ba:	604b      	str	r3, [r1, #4]

	return 0;
}
    27bc:	2000      	movs	r0, #0
    27be:	4770      	bx	lr

000027c0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    27c0:	2001      	movs	r0, #1
    27c2:	4770      	bx	lr

000027c4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    27c4:	2000      	movs	r0, #0
    27c6:	4770      	bx	lr

000027c8 <usart_serial_getchar>:
{
    27c8:	b570      	push	{r4, r5, r6, lr}
    27ca:	b082      	sub	sp, #8
    27cc:	0005      	movs	r5, r0
    27ce:	000e      	movs	r6, r1
	uint16_t temp = 0;
    27d0:	2200      	movs	r2, #0
    27d2:	466b      	mov	r3, sp
    27d4:	80da      	strh	r2, [r3, #6]
	while(STATUS_OK != usart_read_wait(module, &temp));
    27d6:	4c06      	ldr	r4, [pc, #24]	; (27f0 <usart_serial_getchar+0x28>)
    27d8:	466b      	mov	r3, sp
    27da:	1d99      	adds	r1, r3, #6
    27dc:	0028      	movs	r0, r5
    27de:	47a0      	blx	r4
    27e0:	2800      	cmp	r0, #0
    27e2:	d1f9      	bne.n	27d8 <usart_serial_getchar+0x10>
	*c = temp;
    27e4:	466b      	mov	r3, sp
    27e6:	3306      	adds	r3, #6
    27e8:	881b      	ldrh	r3, [r3, #0]
    27ea:	7033      	strb	r3, [r6, #0]
}
    27ec:	b002      	add	sp, #8
    27ee:	bd70      	pop	{r4, r5, r6, pc}
    27f0:	00001689 	.word	0x00001689

000027f4 <usart_serial_putchar>:
{
    27f4:	b570      	push	{r4, r5, r6, lr}
    27f6:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    27f8:	b28c      	uxth	r4, r1
    27fa:	4e03      	ldr	r6, [pc, #12]	; (2808 <usart_serial_putchar+0x14>)
    27fc:	0021      	movs	r1, r4
    27fe:	0028      	movs	r0, r5
    2800:	47b0      	blx	r6
    2802:	2800      	cmp	r0, #0
    2804:	d1fa      	bne.n	27fc <usart_serial_putchar+0x8>
}
    2806:	bd70      	pop	{r4, r5, r6, pc}
    2808:	0000165d 	.word	0x0000165d

0000280c <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    280c:	b510      	push	{r4, lr}
    280e:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    2810:	466b      	mov	r3, sp
    2812:	1ddc      	adds	r4, r3, #7
    2814:	2201      	movs	r2, #1
    2816:	0021      	movs	r1, r4
    2818:	480f      	ldr	r0, [pc, #60]	; (2858 <USART_HOST_ISR_VECT+0x4c>)
    281a:	4b10      	ldr	r3, [pc, #64]	; (285c <USART_HOST_ISR_VECT+0x50>)
    281c:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    281e:	b672      	cpsid	i
    2820:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    2824:	2200      	movs	r2, #0
    2826:	4b0e      	ldr	r3, [pc, #56]	; (2860 <USART_HOST_ISR_VECT+0x54>)
    2828:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    282a:	4b0e      	ldr	r3, [pc, #56]	; (2864 <USART_HOST_ISR_VECT+0x58>)
    282c:	781b      	ldrb	r3, [r3, #0]
    282e:	7821      	ldrb	r1, [r4, #0]
    2830:	4a0d      	ldr	r2, [pc, #52]	; (2868 <USART_HOST_ISR_VECT+0x5c>)
    2832:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    2834:	2b9b      	cmp	r3, #155	; 0x9b
    2836:	d00a      	beq.n	284e <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    2838:	3301      	adds	r3, #1
    283a:	4a0a      	ldr	r2, [pc, #40]	; (2864 <USART_HOST_ISR_VECT+0x58>)
    283c:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    283e:	2201      	movs	r2, #1
    2840:	4b07      	ldr	r3, [pc, #28]	; (2860 <USART_HOST_ISR_VECT+0x54>)
    2842:	701a      	strb	r2, [r3, #0]
    2844:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2848:	b662      	cpsie	i
}
    284a:	b002      	add	sp, #8
    284c:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    284e:	2200      	movs	r2, #0
    2850:	4b04      	ldr	r3, [pc, #16]	; (2864 <USART_HOST_ISR_VECT+0x58>)
    2852:	701a      	strb	r2, [r3, #0]
    2854:	e7f3      	b.n	283e <USART_HOST_ISR_VECT+0x32>
    2856:	46c0      	nop			; (mov r8, r8)
    2858:	2000023c 	.word	0x2000023c
    285c:	000016f9 	.word	0x000016f9
    2860:	20000008 	.word	0x20000008
    2864:	2000030c 	.word	0x2000030c
    2868:	20000270 	.word	0x20000270

0000286c <sio2host_init>:
{
    286c:	b5f0      	push	{r4, r5, r6, r7, lr}
    286e:	b091      	sub	sp, #68	; 0x44
	config->data_order       = USART_DATAORDER_LSB;
    2870:	2380      	movs	r3, #128	; 0x80
    2872:	05db      	lsls	r3, r3, #23
    2874:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2876:	2300      	movs	r3, #0
    2878:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    287a:	22ff      	movs	r2, #255	; 0xff
    287c:	4669      	mov	r1, sp
    287e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2880:	2200      	movs	r2, #0
    2882:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2884:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    2886:	2196      	movs	r1, #150	; 0x96
    2888:	0189      	lsls	r1, r1, #6
    288a:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    288c:	2401      	movs	r4, #1
    288e:	2124      	movs	r1, #36	; 0x24
    2890:	4668      	mov	r0, sp
    2892:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    2894:	3101      	adds	r1, #1
    2896:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    2898:	3101      	adds	r1, #1
    289a:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    289c:	3101      	adds	r1, #1
    289e:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    28a0:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    28a2:	3105      	adds	r1, #5
    28a4:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    28a6:	3101      	adds	r1, #1
    28a8:	5443      	strb	r3, [r0, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    28aa:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    28ac:	8203      	strh	r3, [r0, #16]
	config->lin_slave_enable      = false;
    28ae:	76c3      	strb	r3, [r0, #27]
	config->immediate_buffer_overflow_notification  = false;
    28b0:	7602      	strb	r2, [r0, #24]
	config->start_frame_detection_enable            = false;
    28b2:	7702      	strb	r2, [r0, #28]
	config->encoding_format_enable                  = false;
    28b4:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    28b6:	2313      	movs	r3, #19
    28b8:	7683      	strb	r3, [r0, #26]
	config->collision_detection_enable              = false;
    28ba:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    28bc:	2380      	movs	r3, #128	; 0x80
    28be:	035b      	lsls	r3, r3, #13
    28c0:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    28c2:	4b2e      	ldr	r3, [pc, #184]	; (297c <sio2host_init+0x110>)
    28c4:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    28c6:	4b2e      	ldr	r3, [pc, #184]	; (2980 <sio2host_init+0x114>)
    28c8:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    28ca:	2301      	movs	r3, #1
    28cc:	425b      	negs	r3, r3
    28ce:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    28d0:	930f      	str	r3, [sp, #60]	; 0x3c
	stdio_base = (void *)module;
    28d2:	4d2c      	ldr	r5, [pc, #176]	; (2984 <sio2host_init+0x118>)
    28d4:	4b2c      	ldr	r3, [pc, #176]	; (2988 <sio2host_init+0x11c>)
    28d6:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    28d8:	4a2c      	ldr	r2, [pc, #176]	; (298c <sio2host_init+0x120>)
    28da:	4b2d      	ldr	r3, [pc, #180]	; (2990 <sio2host_init+0x124>)
    28dc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    28de:	4a2d      	ldr	r2, [pc, #180]	; (2994 <sio2host_init+0x128>)
    28e0:	4b2d      	ldr	r3, [pc, #180]	; (2998 <sio2host_init+0x12c>)
    28e2:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    28e4:	466a      	mov	r2, sp
    28e6:	492d      	ldr	r1, [pc, #180]	; (299c <sio2host_init+0x130>)
    28e8:	0028      	movs	r0, r5
    28ea:	4b2d      	ldr	r3, [pc, #180]	; (29a0 <sio2host_init+0x134>)
    28ec:	4798      	blx	r3
	setbuf(stdout, NULL);
    28ee:	4f2d      	ldr	r7, [pc, #180]	; (29a4 <sio2host_init+0x138>)
    28f0:	683b      	ldr	r3, [r7, #0]
    28f2:	6898      	ldr	r0, [r3, #8]
    28f4:	2100      	movs	r1, #0
    28f6:	4e2c      	ldr	r6, [pc, #176]	; (29a8 <sio2host_init+0x13c>)
    28f8:	47b0      	blx	r6
	setbuf(stdin, NULL);
    28fa:	683b      	ldr	r3, [r7, #0]
    28fc:	6858      	ldr	r0, [r3, #4]
    28fe:	2100      	movs	r1, #0
    2900:	47b0      	blx	r6
	SercomUsart *const usart_hw = &(module->hw->USART);
    2902:	682e      	ldr	r6, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2904:	0030      	movs	r0, r6
    2906:	4b29      	ldr	r3, [pc, #164]	; (29ac <sio2host_init+0x140>)
    2908:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    290a:	231f      	movs	r3, #31
    290c:	4018      	ands	r0, r3
    290e:	4084      	lsls	r4, r0
    2910:	4b27      	ldr	r3, [pc, #156]	; (29b0 <sio2host_init+0x144>)
    2912:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2914:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2916:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2918:	2b00      	cmp	r3, #0
    291a:	d1fc      	bne.n	2916 <sio2host_init+0xaa>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    291c:	6833      	ldr	r3, [r6, #0]
    291e:	2202      	movs	r2, #2
    2920:	4313      	orrs	r3, r2
    2922:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2924:	4b17      	ldr	r3, [pc, #92]	; (2984 <sio2host_init+0x118>)
    2926:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    2928:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    292a:	2a00      	cmp	r2, #0
    292c:	d1fc      	bne.n	2928 <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    292e:	6859      	ldr	r1, [r3, #4]
    2930:	2280      	movs	r2, #128	; 0x80
    2932:	0252      	lsls	r2, r2, #9
    2934:	430a      	orrs	r2, r1
    2936:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    2938:	2101      	movs	r1, #1
    293a:	4a12      	ldr	r2, [pc, #72]	; (2984 <sio2host_init+0x118>)
    293c:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    293e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2940:	2a00      	cmp	r2, #0
    2942:	d1fc      	bne.n	293e <sio2host_init+0xd2>
	return (usart_hw->SYNCBUSY.reg);
    2944:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2946:	2a00      	cmp	r2, #0
    2948:	d1fc      	bne.n	2944 <sio2host_init+0xd8>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    294a:	6859      	ldr	r1, [r3, #4]
    294c:	2280      	movs	r2, #128	; 0x80
    294e:	0292      	lsls	r2, r2, #10
    2950:	430a      	orrs	r2, r1
    2952:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    2954:	2101      	movs	r1, #1
    2956:	4a0b      	ldr	r2, [pc, #44]	; (2984 <sio2host_init+0x118>)
    2958:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    295a:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    295c:	2a00      	cmp	r2, #0
    295e:	d1fc      	bne.n	295a <sio2host_init+0xee>
	USART_HOST_RX_ISR_ENABLE();
    2960:	4914      	ldr	r1, [pc, #80]	; (29b4 <sio2host_init+0x148>)
    2962:	2000      	movs	r0, #0
    2964:	4b14      	ldr	r3, [pc, #80]	; (29b8 <sio2host_init+0x14c>)
    2966:	4798      	blx	r3
    2968:	2204      	movs	r2, #4
    296a:	4b0c      	ldr	r3, [pc, #48]	; (299c <sio2host_init+0x130>)
    296c:	759a      	strb	r2, [r3, #22]
    296e:	32fd      	adds	r2, #253	; 0xfd
    2970:	32ff      	adds	r2, #255	; 0xff
    2972:	4b0f      	ldr	r3, [pc, #60]	; (29b0 <sio2host_init+0x144>)
    2974:	601a      	str	r2, [r3, #0]
}
    2976:	b011      	add	sp, #68	; 0x44
    2978:	bdf0      	pop	{r4, r5, r6, r7, pc}
    297a:	46c0      	nop			; (mov r8, r8)
    297c:	00040003 	.word	0x00040003
    2980:	00050003 	.word	0x00050003
    2984:	2000023c 	.word	0x2000023c
    2988:	200009e4 	.word	0x200009e4
    298c:	000027f5 	.word	0x000027f5
    2990:	200009e0 	.word	0x200009e0
    2994:	000027c9 	.word	0x000027c9
    2998:	200009dc 	.word	0x200009dc
    299c:	42000800 	.word	0x42000800
    29a0:	0000131d 	.word	0x0000131d
    29a4:	2000000c 	.word	0x2000000c
    29a8:	00003f99 	.word	0x00003f99
    29ac:	00000ed5 	.word	0x00000ed5
    29b0:	e000e100 	.word	0xe000e100
    29b4:	0000280d 	.word	0x0000280d
    29b8:	00000e99 	.word	0x00000e99

000029bc <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    29bc:	b510      	push	{r4, lr}
	nwkIb.nwkSeqNum = 0;
    29be:	4a0d      	ldr	r2, [pc, #52]	; (29f4 <NWK_Init+0x38>)
    29c0:	2300      	movs	r3, #0
    29c2:	7113      	strb	r3, [r2, #4]
	nwkIb.macSeqNum = 0;
    29c4:	7153      	strb	r3, [r2, #5]
	nwkIb.addr = 0;
    29c6:	8013      	strh	r3, [r2, #0]
	nwkIb.lock = 0;
    29c8:	2158      	movs	r1, #88	; 0x58
    29ca:	5253      	strh	r3, [r2, r1]
    29cc:	0013      	movs	r3, r2
    29ce:	3240      	adds	r2, #64	; 0x40

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    29d0:	2100      	movs	r1, #0
    29d2:	6099      	str	r1, [r3, #8]
    29d4:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    29d6:	4293      	cmp	r3, r2
    29d8:	d1fb      	bne.n	29d2 <NWK_Init+0x16>
	}

	nwkTxInit();
    29da:	4b07      	ldr	r3, [pc, #28]	; (29f8 <NWK_Init+0x3c>)
    29dc:	4798      	blx	r3
	nwkRxInit();
    29de:	4b07      	ldr	r3, [pc, #28]	; (29fc <NWK_Init+0x40>)
    29e0:	4798      	blx	r3
	nwkFrameInit();
    29e2:	4b07      	ldr	r3, [pc, #28]	; (2a00 <NWK_Init+0x44>)
    29e4:	4798      	blx	r3
	nwkDataReqInit();
    29e6:	4b07      	ldr	r3, [pc, #28]	; (2a04 <NWK_Init+0x48>)
    29e8:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    29ea:	4b07      	ldr	r3, [pc, #28]	; (2a08 <NWK_Init+0x4c>)
    29ec:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    29ee:	4b07      	ldr	r3, [pc, #28]	; (2a0c <NWK_Init+0x50>)
    29f0:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
    29f2:	bd10      	pop	{r4, pc}
    29f4:	200009e8 	.word	0x200009e8
    29f8:	00002ca9 	.word	0x00002ca9
    29fc:	00002ba1 	.word	0x00002ba1
    2a00:	00002a2d 	.word	0x00002a2d
    2a04:	00002a21 	.word	0x00002a21
    2a08:	00002a7d 	.word	0x00002a7d
    2a0c:	00002be1 	.word	0x00002be1

00002a10 <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    2a10:	3002      	adds	r0, #2
    2a12:	0080      	lsls	r0, r0, #2
    2a14:	4b01      	ldr	r3, [pc, #4]	; (2a1c <NWK_OpenEndpoint+0xc>)
    2a16:	50c1      	str	r1, [r0, r3]
}
    2a18:	4770      	bx	lr
    2a1a:	46c0      	nop			; (mov r8, r8)
    2a1c:	200009e8 	.word	0x200009e8

00002a20 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    2a20:	2200      	movs	r2, #0
    2a22:	4b01      	ldr	r3, [pc, #4]	; (2a28 <nwkDataReqInit+0x8>)
    2a24:	601a      	str	r2, [r3, #0]
}
    2a26:	4770      	bx	lr
    2a28:	20000310 	.word	0x20000310

00002a2c <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    2a2c:	4b03      	ldr	r3, [pc, #12]	; (2a3c <nwkFrameInit+0x10>)
    2a2e:	2200      	movs	r2, #0
    2a30:	701a      	strb	r2, [r3, #0]
    2a32:	218d      	movs	r1, #141	; 0x8d
    2a34:	545a      	strb	r2, [r3, r1]
    2a36:	318d      	adds	r1, #141	; 0x8d
    2a38:	545a      	strb	r2, [r3, r1]
	}
}
    2a3a:	4770      	bx	lr
    2a3c:	20000314 	.word	0x20000314

00002a40 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    2a40:	2800      	cmp	r0, #0
    2a42:	d012      	beq.n	2a6a <nwkFrameNext+0x2a>
		frame = nwkFrameFrames;
	} else {
		frame++;
    2a44:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2a46:	4b0c      	ldr	r3, [pc, #48]	; (2a78 <nwkFrameNext+0x38>)
    2a48:	33a8      	adds	r3, #168	; 0xa8
    2a4a:	33ff      	adds	r3, #255	; 0xff
    2a4c:	4298      	cmp	r0, r3
    2a4e:	d210      	bcs.n	2a72 <nwkFrameNext+0x32>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2a50:	7803      	ldrb	r3, [r0, #0]
    2a52:	2b00      	cmp	r3, #0
    2a54:	d10c      	bne.n	2a70 <nwkFrameNext+0x30>
	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2a56:	4a08      	ldr	r2, [pc, #32]	; (2a78 <nwkFrameNext+0x38>)
    2a58:	32a8      	adds	r2, #168	; 0xa8
    2a5a:	32ff      	adds	r2, #255	; 0xff
    2a5c:	308d      	adds	r0, #141	; 0x8d
    2a5e:	4290      	cmp	r0, r2
    2a60:	d205      	bcs.n	2a6e <nwkFrameNext+0x2e>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2a62:	7803      	ldrb	r3, [r0, #0]
    2a64:	2b00      	cmp	r3, #0
    2a66:	d0f9      	beq.n	2a5c <nwkFrameNext+0x1c>
    2a68:	e002      	b.n	2a70 <nwkFrameNext+0x30>
		frame = nwkFrameFrames;
    2a6a:	4803      	ldr	r0, [pc, #12]	; (2a78 <nwkFrameNext+0x38>)
    2a6c:	e7f0      	b.n	2a50 <nwkFrameNext+0x10>
			return frame;
		}
	}

	return NULL;
    2a6e:	2000      	movs	r0, #0
}
    2a70:	4770      	bx	lr
	return NULL;
    2a72:	2000      	movs	r0, #0
    2a74:	e7fc      	b.n	2a70 <nwkFrameNext+0x30>
    2a76:	46c0      	nop			; (mov r8, r8)
    2a78:	20000314 	.word	0x20000314

00002a7c <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    2a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a7e:	4b09      	ldr	r3, [pc, #36]	; (2aa4 <nwkRouteInit+0x28>)
    2a80:	3302      	adds	r3, #2
    2a82:	2200      	movs	r2, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2a84:	2701      	movs	r7, #1
    2a86:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    2a88:	4c06      	ldr	r4, [pc, #24]	; (2aa4 <nwkRouteInit+0x28>)
    2a8a:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    2a8c:	2500      	movs	r5, #0
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2a8e:	801f      	strh	r7, [r3, #0]
		nwkRouteTable[i].fixed = 0;
    2a90:	00d0      	lsls	r0, r2, #3
    2a92:	5d01      	ldrb	r1, [r0, r4]
    2a94:	43b1      	bics	r1, r6
    2a96:	5501      	strb	r1, [r0, r4]
		nwkRouteTable[i].rank = 0;
    2a98:	711d      	strb	r5, [r3, #4]
    2a9a:	3201      	adds	r2, #1
    2a9c:	3308      	adds	r3, #8
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2a9e:	2a64      	cmp	r2, #100	; 0x64
    2aa0:	d1f5      	bne.n	2a8e <nwkRouteInit+0x12>
	}
}
    2aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2aa4:	200004bc 	.word	0x200004bc

00002aa8 <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    2aa8:	b530      	push	{r4, r5, lr}
    2aaa:	4a0c      	ldr	r2, [pc, #48]	; (2adc <NWK_RouteFindEntry+0x34>)
    2aac:	3202      	adds	r2, #2
    2aae:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    2ab0:	4d0a      	ldr	r5, [pc, #40]	; (2adc <NWK_RouteFindEntry+0x34>)
    2ab2:	e003      	b.n	2abc <NWK_RouteFindEntry+0x14>
    2ab4:	3301      	adds	r3, #1
    2ab6:	3208      	adds	r2, #8
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2ab8:	2b64      	cmp	r3, #100	; 0x64
    2aba:	d00c      	beq.n	2ad6 <NWK_RouteFindEntry+0x2e>
		if (nwkRouteTable[i].dstAddr == dst &&
    2abc:	8814      	ldrh	r4, [r2, #0]
    2abe:	4284      	cmp	r4, r0
    2ac0:	d1f8      	bne.n	2ab4 <NWK_RouteFindEntry+0xc>
				nwkRouteTable[i].multicast == multicast) {
    2ac2:	00dc      	lsls	r4, r3, #3
    2ac4:	5d64      	ldrb	r4, [r4, r5]
    2ac6:	07a4      	lsls	r4, r4, #30
    2ac8:	0fe4      	lsrs	r4, r4, #31
		if (nwkRouteTable[i].dstAddr == dst &&
    2aca:	428c      	cmp	r4, r1
    2acc:	d1f2      	bne.n	2ab4 <NWK_RouteFindEntry+0xc>
			return &nwkRouteTable[i];
    2ace:	00db      	lsls	r3, r3, #3
    2ad0:	4802      	ldr	r0, [pc, #8]	; (2adc <NWK_RouteFindEntry+0x34>)
    2ad2:	18c0      	adds	r0, r0, r3
		}
	}

	return NULL;
}
    2ad4:	bd30      	pop	{r4, r5, pc}
	return NULL;
    2ad6:	2000      	movs	r0, #0
    2ad8:	e7fc      	b.n	2ad4 <NWK_RouteFindEntry+0x2c>
    2ada:	46c0      	nop			; (mov r8, r8)
    2adc:	200004bc 	.word	0x200004bc

00002ae0 <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    2ae0:	7803      	ldrb	r3, [r0, #0]
    2ae2:	07db      	lsls	r3, r3, #31
    2ae4:	d404      	bmi.n	2af0 <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    2ae6:	2301      	movs	r3, #1
    2ae8:	425b      	negs	r3, r3
    2aea:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    2aec:	2300      	movs	r3, #0
    2aee:	7183      	strb	r3, [r0, #6]
}
    2af0:	4770      	bx	lr
	...

00002af4 <nwkRouteRemove>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    2af4:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    2af6:	4b03      	ldr	r3, [pc, #12]	; (2b04 <nwkRouteRemove+0x10>)
    2af8:	4798      	blx	r3
	if (entry) {
    2afa:	2800      	cmp	r0, #0
    2afc:	d001      	beq.n	2b02 <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    2afe:	4b02      	ldr	r3, [pc, #8]	; (2b08 <nwkRouteRemove+0x14>)
    2b00:	4798      	blx	r3
	}
}
    2b02:	bd10      	pop	{r4, pc}
    2b04:	00002aa9 	.word	0x00002aa9
    2b08:	00002ae1 	.word	0x00002ae1

00002b0c <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    2b0c:	b510      	push	{r4, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2b0e:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2b10:	2300      	movs	r3, #0
	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2b12:	2a06      	cmp	r2, #6
    2b14:	d001      	beq.n	2b1a <nwkRouteErrorReceived+0xe>
	}

	nwkRouteRemove(command->dstAddr, command->multicast);

	return true;
}
    2b16:	0018      	movs	r0, r3
    2b18:	bd10      	pop	{r4, pc}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    2b1a:	6883      	ldr	r3, [r0, #8]
	nwkRouteRemove(command->dstAddr, command->multicast);
    2b1c:	7959      	ldrb	r1, [r3, #5]
    2b1e:	78da      	ldrb	r2, [r3, #3]
    2b20:	7918      	ldrb	r0, [r3, #4]
    2b22:	0200      	lsls	r0, r0, #8
    2b24:	4310      	orrs	r0, r2
    2b26:	4b02      	ldr	r3, [pc, #8]	; (2b30 <nwkRouteErrorReceived+0x24>)
    2b28:	4798      	blx	r3
	return true;
    2b2a:	2301      	movs	r3, #1
    2b2c:	e7f3      	b.n	2b16 <nwkRouteErrorReceived+0xa>
    2b2e:	46c0      	nop			; (mov r8, r8)
    2b30:	00002af5 	.word	0x00002af5

00002b34 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    2b34:	b510      	push	{r4, lr}
	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
		return false;
	}
#endif

	if (ind->size < 1) {
    2b36:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2b38:	2300      	movs	r3, #0
	if (ind->size < 1) {
    2b3a:	2a00      	cmp	r2, #0
    2b3c:	d00a      	beq.n	2b54 <nwkRxSeriveDataInd+0x20>
	}

	switch (ind->data[0]) {
    2b3e:	6883      	ldr	r3, [r0, #8]
    2b40:	781b      	ldrb	r3, [r3, #0]
    2b42:	2b00      	cmp	r3, #0
    2b44:	d003      	beq.n	2b4e <nwkRxSeriveDataInd+0x1a>
    2b46:	2b01      	cmp	r3, #1
    2b48:	d006      	beq.n	2b58 <nwkRxSeriveDataInd+0x24>
	case NWK_COMMAND_ROUTE_REPLY:
		return nwkRouteDiscoveryReplyReceived(ind);
#endif

	default:
		return false;
    2b4a:	2300      	movs	r3, #0
    2b4c:	e002      	b.n	2b54 <nwkRxSeriveDataInd+0x20>
		return nwkTxAckReceived(ind);
    2b4e:	4b04      	ldr	r3, [pc, #16]	; (2b60 <nwkRxSeriveDataInd+0x2c>)
    2b50:	4798      	blx	r3
    2b52:	0003      	movs	r3, r0
	}
}
    2b54:	0018      	movs	r0, r3
    2b56:	bd10      	pop	{r4, pc}
		return nwkRouteErrorReceived(ind);
    2b58:	4b02      	ldr	r3, [pc, #8]	; (2b64 <nwkRxSeriveDataInd+0x30>)
    2b5a:	4798      	blx	r3
    2b5c:	0003      	movs	r3, r0
    2b5e:	e7f9      	b.n	2b54 <nwkRxSeriveDataInd+0x20>
    2b60:	00002cdd 	.word	0x00002cdd
    2b64:	00002b0d 	.word	0x00002b0d

00002b68 <nwkRxDuplicateRejectionTimerHandler>:
{
    2b68:	b570      	push	{r4, r5, r6, lr}
    2b6a:	490b      	ldr	r1, [pc, #44]	; (2b98 <nwkRxDuplicateRejectionTimerHandler+0x30>)
    2b6c:	1d0b      	adds	r3, r1, #4
    2b6e:	3140      	adds	r1, #64	; 0x40
	bool restart = false;
    2b70:	2400      	movs	r4, #0
			restart = true;
    2b72:	2501      	movs	r5, #1
    2b74:	e002      	b.n	2b7c <nwkRxDuplicateRejectionTimerHandler+0x14>
    2b76:	3306      	adds	r3, #6
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2b78:	428b      	cmp	r3, r1
    2b7a:	d006      	beq.n	2b8a <nwkRxDuplicateRejectionTimerHandler+0x22>
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    2b7c:	781a      	ldrb	r2, [r3, #0]
    2b7e:	2a00      	cmp	r2, #0
    2b80:	d0f9      	beq.n	2b76 <nwkRxDuplicateRejectionTimerHandler+0xe>
			nwkRxDuplicateRejectionTable[i].ttl--;
    2b82:	3a01      	subs	r2, #1
    2b84:	701a      	strb	r2, [r3, #0]
			restart = true;
    2b86:	002c      	movs	r4, r5
    2b88:	e7f5      	b.n	2b76 <nwkRxDuplicateRejectionTimerHandler+0xe>
	if (restart) {
    2b8a:	2c00      	cmp	r4, #0
    2b8c:	d100      	bne.n	2b90 <nwkRxDuplicateRejectionTimerHandler+0x28>
}
    2b8e:	bd70      	pop	{r4, r5, r6, pc}
		SYS_TimerStart(timer);
    2b90:	4b02      	ldr	r3, [pc, #8]	; (2b9c <nwkRxDuplicateRejectionTimerHandler+0x34>)
    2b92:	4798      	blx	r3
}
    2b94:	e7fb      	b.n	2b8e <nwkRxDuplicateRejectionTimerHandler+0x26>
    2b96:	46c0      	nop			; (mov r8, r8)
    2b98:	200007dc 	.word	0x200007dc
    2b9c:	00002e75 	.word	0x00002e75

00002ba0 <nwkRxInit>:
{
    2ba0:	b510      	push	{r4, lr}
    2ba2:	4a0a      	ldr	r2, [pc, #40]	; (2bcc <nwkRxInit+0x2c>)
    2ba4:	1d13      	adds	r3, r2, #4
    2ba6:	3240      	adds	r2, #64	; 0x40
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    2ba8:	2100      	movs	r1, #0
    2baa:	7019      	strb	r1, [r3, #0]
    2bac:	3306      	adds	r3, #6
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2bae:	4293      	cmp	r3, r2
    2bb0:	d1fb      	bne.n	2baa <nwkRxInit+0xa>
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    2bb2:	4b07      	ldr	r3, [pc, #28]	; (2bd0 <nwkRxInit+0x30>)
    2bb4:	2264      	movs	r2, #100	; 0x64
    2bb6:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2bb8:	2200      	movs	r2, #0
    2bba:	731a      	strb	r2, [r3, #12]
		= nwkRxDuplicateRejectionTimerHandler;
    2bbc:	4a05      	ldr	r2, [pc, #20]	; (2bd4 <nwkRxInit+0x34>)
    2bbe:	611a      	str	r2, [r3, #16]
	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    2bc0:	4905      	ldr	r1, [pc, #20]	; (2bd8 <nwkRxInit+0x38>)
    2bc2:	2000      	movs	r0, #0
    2bc4:	4b05      	ldr	r3, [pc, #20]	; (2bdc <nwkRxInit+0x3c>)
    2bc6:	4798      	blx	r3
}
    2bc8:	bd10      	pop	{r4, pc}
    2bca:	46c0      	nop			; (mov r8, r8)
    2bcc:	200007dc 	.word	0x200007dc
    2bd0:	20000818 	.word	0x20000818
    2bd4:	00002b69 	.word	0x00002b69
    2bd8:	00002b35 	.word	0x00002b35
    2bdc:	00002a11 	.word	0x00002a11

00002be0 <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    2be0:	2300      	movs	r3, #0
    2be2:	4a02      	ldr	r2, [pc, #8]	; (2bec <nwkSecurityInit+0xc>)
    2be4:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    2be6:	4a02      	ldr	r2, [pc, #8]	; (2bf0 <nwkSecurityInit+0x10>)
    2be8:	6013      	str	r3, [r2, #0]
}
    2bea:	4770      	bx	lr
    2bec:	20000830 	.word	0x20000830
    2bf0:	2000082c 	.word	0x2000082c

00002bf4 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    2bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bf6:	b083      	sub	sp, #12
    2bf8:	9001      	str	r0, [sp, #4]
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2bfa:	2400      	movs	r4, #0
	NwkFrame_t *frame = NULL;
    2bfc:	2000      	movs	r0, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    2bfe:	4d11      	ldr	r5, [pc, #68]	; (2c44 <nwkTxDelayTimerHandler+0x50>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2c00:	2686      	movs	r6, #134	; 0x86
    2c02:	2787      	movs	r7, #135	; 0x87
	while (NULL != (frame = nwkFrameNext(frame))) {
    2c04:	47a8      	blx	r5
    2c06:	2800      	cmp	r0, #0
    2c08:	d013      	beq.n	2c32 <nwkTxDelayTimerHandler+0x3e>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    2c0a:	7803      	ldrb	r3, [r0, #0]
    2c0c:	2b11      	cmp	r3, #17
    2c0e:	d1f9      	bne.n	2c04 <nwkTxDelayTimerHandler+0x10>
			if (0 == --frame->tx.timeout) {
    2c10:	5d82      	ldrb	r2, [r0, r6]
    2c12:	5dc3      	ldrb	r3, [r0, r7]
    2c14:	021b      	lsls	r3, r3, #8
    2c16:	4313      	orrs	r3, r2
    2c18:	3b01      	subs	r3, #1
    2c1a:	b29b      	uxth	r3, r3
    2c1c:	5583      	strb	r3, [r0, r6]
    2c1e:	0a19      	lsrs	r1, r3, #8
    2c20:	0002      	movs	r2, r0
    2c22:	3286      	adds	r2, #134	; 0x86
    2c24:	7051      	strb	r1, [r2, #1]
			restart = true;
    2c26:	2401      	movs	r4, #1
			if (0 == --frame->tx.timeout) {
    2c28:	2b00      	cmp	r3, #0
    2c2a:	d1eb      	bne.n	2c04 <nwkTxDelayTimerHandler+0x10>
				frame->state = NWK_TX_STATE_SEND;
    2c2c:	3313      	adds	r3, #19
    2c2e:	7003      	strb	r3, [r0, #0]
    2c30:	e7e8      	b.n	2c04 <nwkTxDelayTimerHandler+0x10>
			}
		}
	}

	if (restart) {
    2c32:	2c00      	cmp	r4, #0
    2c34:	d101      	bne.n	2c3a <nwkTxDelayTimerHandler+0x46>
		SYS_TimerStart(timer);
	}
}
    2c36:	b003      	add	sp, #12
    2c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SYS_TimerStart(timer);
    2c3a:	9801      	ldr	r0, [sp, #4]
    2c3c:	4b02      	ldr	r3, [pc, #8]	; (2c48 <nwkTxDelayTimerHandler+0x54>)
    2c3e:	4798      	blx	r3
}
    2c40:	e7f9      	b.n	2c36 <nwkTxDelayTimerHandler+0x42>
    2c42:	46c0      	nop			; (mov r8, r8)
    2c44:	00002a41 	.word	0x00002a41
    2c48:	00002e75 	.word	0x00002e75

00002c4c <nwkTxAckWaitTimerHandler>:
{
    2c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c4e:	b083      	sub	sp, #12
    2c50:	9001      	str	r0, [sp, #4]
	bool restart = false;
    2c52:	2400      	movs	r4, #0
	NwkFrame_t *frame = NULL;
    2c54:	2000      	movs	r0, #0
	while (NULL != (frame = nwkFrameNext(frame))) {
    2c56:	4d12      	ldr	r5, [pc, #72]	; (2ca0 <nwkTxAckWaitTimerHandler+0x54>)
			if (0 == --frame->tx.timeout) {
    2c58:	2686      	movs	r6, #134	; 0x86
    2c5a:	2787      	movs	r7, #135	; 0x87
	while (NULL != (frame = nwkFrameNext(frame))) {
    2c5c:	47a8      	blx	r5
    2c5e:	2800      	cmp	r0, #0
    2c60:	d016      	beq.n	2c90 <nwkTxAckWaitTimerHandler+0x44>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    2c62:	7803      	ldrb	r3, [r0, #0]
    2c64:	2b16      	cmp	r3, #22
    2c66:	d1f9      	bne.n	2c5c <nwkTxAckWaitTimerHandler+0x10>
			if (0 == --frame->tx.timeout) {
    2c68:	5d82      	ldrb	r2, [r0, r6]
    2c6a:	5dc3      	ldrb	r3, [r0, r7]
    2c6c:	021b      	lsls	r3, r3, #8
    2c6e:	4313      	orrs	r3, r2
    2c70:	3b01      	subs	r3, #1
    2c72:	b29b      	uxth	r3, r3
    2c74:	5583      	strb	r3, [r0, r6]
    2c76:	0a19      	lsrs	r1, r3, #8
    2c78:	0002      	movs	r2, r0
    2c7a:	3286      	adds	r2, #134	; 0x86
    2c7c:	7051      	strb	r1, [r2, #1]
			restart = true;
    2c7e:	2401      	movs	r4, #1
			if (0 == --frame->tx.timeout) {
    2c80:	2b00      	cmp	r3, #0
    2c82:	d1eb      	bne.n	2c5c <nwkTxAckWaitTimerHandler+0x10>
	frame->state = NWK_TX_STATE_CONFIRM;
    2c84:	3317      	adds	r3, #23
    2c86:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    2c88:	2210      	movs	r2, #16
    2c8a:	336e      	adds	r3, #110	; 0x6e
    2c8c:	54c2      	strb	r2, [r0, r3]
    2c8e:	e7e5      	b.n	2c5c <nwkTxAckWaitTimerHandler+0x10>
	if (restart) {
    2c90:	2c00      	cmp	r4, #0
    2c92:	d101      	bne.n	2c98 <nwkTxAckWaitTimerHandler+0x4c>
}
    2c94:	b003      	add	sp, #12
    2c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SYS_TimerStart(timer);
    2c98:	9801      	ldr	r0, [sp, #4]
    2c9a:	4b02      	ldr	r3, [pc, #8]	; (2ca4 <nwkTxAckWaitTimerHandler+0x58>)
    2c9c:	4798      	blx	r3
}
    2c9e:	e7f9      	b.n	2c94 <nwkTxAckWaitTimerHandler+0x48>
    2ca0:	00002a41 	.word	0x00002a41
    2ca4:	00002e75 	.word	0x00002e75

00002ca8 <nwkTxInit>:
	nwkTxPhyActiveFrame = NULL;
    2ca8:	2200      	movs	r2, #0
    2caa:	4b07      	ldr	r3, [pc, #28]	; (2cc8 <nwkTxInit+0x20>)
    2cac:	601a      	str	r2, [r3, #0]
	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    2cae:	4b07      	ldr	r3, [pc, #28]	; (2ccc <nwkTxInit+0x24>)
    2cb0:	2132      	movs	r1, #50	; 0x32
    2cb2:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2cb4:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    2cb6:	4906      	ldr	r1, [pc, #24]	; (2cd0 <nwkTxInit+0x28>)
    2cb8:	6119      	str	r1, [r3, #16]
	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    2cba:	4b06      	ldr	r3, [pc, #24]	; (2cd4 <nwkTxInit+0x2c>)
    2cbc:	210a      	movs	r1, #10
    2cbe:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2cc0:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    2cc2:	4a05      	ldr	r2, [pc, #20]	; (2cd8 <nwkTxInit+0x30>)
    2cc4:	611a      	str	r2, [r3, #16]
}
    2cc6:	4770      	bx	lr
    2cc8:	2000085c 	.word	0x2000085c
    2ccc:	20000834 	.word	0x20000834
    2cd0:	00002c4d 	.word	0x00002c4d
    2cd4:	20000848 	.word	0x20000848
    2cd8:	00002bf5 	.word	0x00002bf5

00002cdc <nwkTxAckReceived>:
{
    2cdc:	b570      	push	{r4, r5, r6, lr}
	if (sizeof(NwkCommandAck_t) != ind->size) {
    2cde:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2ce0:	2300      	movs	r3, #0
	if (sizeof(NwkCommandAck_t) != ind->size) {
    2ce2:	2a03      	cmp	r2, #3
    2ce4:	d001      	beq.n	2cea <nwkTxAckReceived+0xe>
}
    2ce6:	0018      	movs	r0, r3
    2ce8:	bd70      	pop	{r4, r5, r6, pc}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    2cea:	6885      	ldr	r5, [r0, #8]
    2cec:	2000      	movs	r0, #0
	while (NULL != (frame = nwkFrameNext(frame))) {
    2cee:	4c0a      	ldr	r4, [pc, #40]	; (2d18 <nwkTxAckReceived+0x3c>)
    2cf0:	47a0      	blx	r4
    2cf2:	2800      	cmp	r0, #0
    2cf4:	d00d      	beq.n	2d12 <nwkTxAckReceived+0x36>
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    2cf6:	7803      	ldrb	r3, [r0, #0]
    2cf8:	2b16      	cmp	r3, #22
    2cfa:	d1f9      	bne.n	2cf0 <nwkTxAckReceived+0x14>
    2cfc:	7b02      	ldrb	r2, [r0, #12]
    2cfe:	786b      	ldrb	r3, [r5, #1]
    2d00:	429a      	cmp	r2, r3
    2d02:	d1f5      	bne.n	2cf0 <nwkTxAckReceived+0x14>
			frame->state = NWK_TX_STATE_CONFIRM;
    2d04:	2317      	movs	r3, #23
    2d06:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    2d08:	78aa      	ldrb	r2, [r5, #2]
    2d0a:	3371      	adds	r3, #113	; 0x71
    2d0c:	54c2      	strb	r2, [r0, r3]
			return true;
    2d0e:	3b87      	subs	r3, #135	; 0x87
    2d10:	e7e9      	b.n	2ce6 <nwkTxAckReceived+0xa>
	return false;
    2d12:	2300      	movs	r3, #0
    2d14:	e7e7      	b.n	2ce6 <nwkTxAckReceived+0xa>
    2d16:	46c0      	nop			; (mov r8, r8)
    2d18:	00002a41 	.word	0x00002a41

00002d1c <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    2d1c:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    2d1e:	4b0e      	ldr	r3, [pc, #56]	; (2d58 <PHY_Init+0x3c>)
    2d20:	4798      	blx	r3
	PhyReset();
    2d22:	4b0e      	ldr	r3, [pc, #56]	; (2d5c <PHY_Init+0x40>)
    2d24:	4798      	blx	r3
	phyRxState = false;
    2d26:	2200      	movs	r2, #0
    2d28:	4b0d      	ldr	r3, [pc, #52]	; (2d60 <PHY_Init+0x44>)
    2d2a:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    2d2c:	3201      	adds	r2, #1
    2d2e:	4b0d      	ldr	r3, [pc, #52]	; (2d64 <PHY_Init+0x48>)
    2d30:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2d32:	4e0d      	ldr	r6, [pc, #52]	; (2d68 <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2d34:	4d0d      	ldr	r5, [pc, #52]	; (2d6c <PHY_Init+0x50>)
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2d36:	241f      	movs	r4, #31
	trx_reg_write(reg, value);
    2d38:	2108      	movs	r1, #8
    2d3a:	2002      	movs	r0, #2
    2d3c:	47b0      	blx	r6
	value = trx_reg_read(reg);
    2d3e:	2001      	movs	r0, #1
    2d40:	47a8      	blx	r5
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2d42:	4020      	ands	r0, r4
    2d44:	2808      	cmp	r0, #8
    2d46:	d1f7      	bne.n	2d38 <PHY_Init+0x1c>
	trx_reg_write(reg, value);
    2d48:	212e      	movs	r1, #46	; 0x2e
    2d4a:	3804      	subs	r0, #4
    2d4c:	4c06      	ldr	r4, [pc, #24]	; (2d68 <PHY_Init+0x4c>)
    2d4e:	47a0      	blx	r4
    2d50:	21a0      	movs	r1, #160	; 0xa0
    2d52:	200c      	movs	r0, #12
    2d54:	47a0      	blx	r4
}
    2d56:	bd70      	pop	{r4, r5, r6, pc}
    2d58:	0000303d 	.word	0x0000303d
    2d5c:	00003159 	.word	0x00003159
    2d60:	20000860 	.word	0x20000860
    2d64:	20000861 	.word	0x20000861
    2d68:	00003285 	.word	0x00003285
    2d6c:	00003189 	.word	0x00003189

00002d70 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    2d70:	b510      	push	{r4, lr}
	SYS_TimerInit();
    2d72:	4b04      	ldr	r3, [pc, #16]	; (2d84 <SYS_Init+0x14>)
    2d74:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    2d76:	4b04      	ldr	r3, [pc, #16]	; (2d88 <SYS_Init+0x18>)
    2d78:	4798      	blx	r3
#endif
	PHY_Init();
    2d7a:	4b04      	ldr	r3, [pc, #16]	; (2d8c <SYS_Init+0x1c>)
    2d7c:	4798      	blx	r3
	NWK_Init();
    2d7e:	4b04      	ldr	r3, [pc, #16]	; (2d90 <SYS_Init+0x20>)
    2d80:	4798      	blx	r3
}
    2d82:	bd10      	pop	{r4, pc}
    2d84:	00002e0d 	.word	0x00002e0d
    2d88:	0000301d 	.word	0x0000301d
    2d8c:	00002d1d 	.word	0x00002d1d
    2d90:	000029bd 	.word	0x000029bd

00002d94 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    2d94:	b530      	push	{r4, r5, lr}
	if (timers) {
    2d96:	4b14      	ldr	r3, [pc, #80]	; (2de8 <placeTimer+0x54>)
    2d98:	681d      	ldr	r5, [r3, #0]
    2d9a:	2d00      	cmp	r5, #0
    2d9c:	d01c      	beq.n	2dd8 <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    2d9e:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    2da0:	6869      	ldr	r1, [r5, #4]
    2da2:	428a      	cmp	r2, r1
    2da4:	d309      	bcc.n	2dba <placeTimer+0x26>
    2da6:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    2da8:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2daa:	6823      	ldr	r3, [r4, #0]
    2dac:	2b00      	cmp	r3, #0
    2dae:	d008      	beq.n	2dc2 <placeTimer+0x2e>
			if (timeout < t->timeout) {
    2db0:	6859      	ldr	r1, [r3, #4]
    2db2:	4291      	cmp	r1, r2
    2db4:	d803      	bhi.n	2dbe <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2db6:	001c      	movs	r4, r3
    2db8:	e7f6      	b.n	2da8 <placeTimer+0x14>
    2dba:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    2dbc:	2400      	movs	r4, #0
				t->timeout -= timeout;
    2dbe:	1a89      	subs	r1, r1, r2
    2dc0:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    2dc2:	6042      	str	r2, [r0, #4]

		if (prev) {
    2dc4:	2c00      	cmp	r4, #0
    2dc6:	d003      	beq.n	2dd0 <placeTimer+0x3c>
			timer->next = prev->next;
    2dc8:	6823      	ldr	r3, [r4, #0]
    2dca:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    2dcc:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    2dce:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    2dd0:	6005      	str	r5, [r0, #0]
			timers = timer;
    2dd2:	4b05      	ldr	r3, [pc, #20]	; (2de8 <placeTimer+0x54>)
    2dd4:	6018      	str	r0, [r3, #0]
    2dd6:	e7fa      	b.n	2dce <placeTimer+0x3a>
		timer->next = NULL;
    2dd8:	2300      	movs	r3, #0
    2dda:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    2ddc:	6883      	ldr	r3, [r0, #8]
    2dde:	6043      	str	r3, [r0, #4]
		timers = timer;
    2de0:	4b01      	ldr	r3, [pc, #4]	; (2de8 <placeTimer+0x54>)
    2de2:	6018      	str	r0, [r3, #0]
}
    2de4:	e7f3      	b.n	2dce <placeTimer+0x3a>
    2de6:	46c0      	nop			; (mov r8, r8)
    2de8:	20000864 	.word	0x20000864

00002dec <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    2dec:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    2dee:	4a04      	ldr	r2, [pc, #16]	; (2e00 <SYS_HwExpiry_Cb+0x14>)
    2df0:	7813      	ldrb	r3, [r2, #0]
    2df2:	3301      	adds	r3, #1
    2df4:	b2db      	uxtb	r3, r3
    2df6:	7013      	strb	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2df8:	4802      	ldr	r0, [pc, #8]	; (2e04 <SYS_HwExpiry_Cb+0x18>)
    2dfa:	4b03      	ldr	r3, [pc, #12]	; (2e08 <SYS_HwExpiry_Cb+0x1c>)
    2dfc:	4798      	blx	r3
}
    2dfe:	bd10      	pop	{r4, pc}
    2e00:	20000a44 	.word	0x20000a44
    2e04:	00002710 	.word	0x00002710
    2e08:	00003449 	.word	0x00003449

00002e0c <SYS_TimerInit>:
{
    2e0c:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    2e0e:	2400      	movs	r4, #0
    2e10:	4b06      	ldr	r3, [pc, #24]	; (2e2c <SYS_TimerInit+0x20>)
    2e12:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    2e14:	4806      	ldr	r0, [pc, #24]	; (2e30 <SYS_TimerInit+0x24>)
    2e16:	4b07      	ldr	r3, [pc, #28]	; (2e34 <SYS_TimerInit+0x28>)
    2e18:	4798      	blx	r3
	common_tc_init();
    2e1a:	4b07      	ldr	r3, [pc, #28]	; (2e38 <SYS_TimerInit+0x2c>)
    2e1c:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2e1e:	4807      	ldr	r0, [pc, #28]	; (2e3c <SYS_TimerInit+0x30>)
    2e20:	4b07      	ldr	r3, [pc, #28]	; (2e40 <SYS_TimerInit+0x34>)
    2e22:	4798      	blx	r3
	timers = NULL;
    2e24:	4b07      	ldr	r3, [pc, #28]	; (2e44 <SYS_TimerInit+0x38>)
    2e26:	601c      	str	r4, [r3, #0]
}
    2e28:	bd10      	pop	{r4, pc}
    2e2a:	46c0      	nop			; (mov r8, r8)
    2e2c:	20000a44 	.word	0x20000a44
    2e30:	00002ded 	.word	0x00002ded
    2e34:	00003539 	.word	0x00003539
    2e38:	000034b5 	.word	0x000034b5
    2e3c:	00002710 	.word	0x00002710
    2e40:	00003449 	.word	0x00003449
    2e44:	20000864 	.word	0x20000864

00002e48 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2e48:	4b09      	ldr	r3, [pc, #36]	; (2e70 <SYS_TimerStarted+0x28>)
    2e4a:	681b      	ldr	r3, [r3, #0]
    2e4c:	2b00      	cmp	r3, #0
    2e4e:	d00a      	beq.n	2e66 <SYS_TimerStarted+0x1e>
		if (t == timer) {
    2e50:	4283      	cmp	r3, r0
    2e52:	d00a      	beq.n	2e6a <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2e54:	681b      	ldr	r3, [r3, #0]
    2e56:	2b00      	cmp	r3, #0
    2e58:	d003      	beq.n	2e62 <SYS_TimerStarted+0x1a>
		if (t == timer) {
    2e5a:	4298      	cmp	r0, r3
    2e5c:	d1fa      	bne.n	2e54 <SYS_TimerStarted+0xc>
			return true;
    2e5e:	2001      	movs	r0, #1
    2e60:	e000      	b.n	2e64 <SYS_TimerStarted+0x1c>
	return false;
    2e62:	2000      	movs	r0, #0
}
    2e64:	4770      	bx	lr
	return false;
    2e66:	2000      	movs	r0, #0
    2e68:	e7fc      	b.n	2e64 <SYS_TimerStarted+0x1c>
			return true;
    2e6a:	2001      	movs	r0, #1
    2e6c:	e7fa      	b.n	2e64 <SYS_TimerStarted+0x1c>
    2e6e:	46c0      	nop			; (mov r8, r8)
    2e70:	20000864 	.word	0x20000864

00002e74 <SYS_TimerStart>:
{
    2e74:	b510      	push	{r4, lr}
    2e76:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    2e78:	4b04      	ldr	r3, [pc, #16]	; (2e8c <SYS_TimerStart+0x18>)
    2e7a:	4798      	blx	r3
    2e7c:	2800      	cmp	r0, #0
    2e7e:	d000      	beq.n	2e82 <SYS_TimerStart+0xe>
}
    2e80:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    2e82:	0020      	movs	r0, r4
    2e84:	4b02      	ldr	r3, [pc, #8]	; (2e90 <SYS_TimerStart+0x1c>)
    2e86:	4798      	blx	r3
}
    2e88:	e7fa      	b.n	2e80 <SYS_TimerStart+0xc>
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	00002e49 	.word	0x00002e49
    2e90:	00002d95 	.word	0x00002d95

00002e94 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    2e94:	b510      	push	{r4, lr}
	tmr_cca_callback();
    2e96:	4b01      	ldr	r3, [pc, #4]	; (2e9c <tc_cca_callback+0x8>)
    2e98:	4798      	blx	r3
}
    2e9a:	bd10      	pop	{r4, pc}
    2e9c:	0000351d 	.word	0x0000351d

00002ea0 <tc_ovf_callback>:
{
    2ea0:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    2ea2:	4b01      	ldr	r3, [pc, #4]	; (2ea8 <tc_ovf_callback+0x8>)
    2ea4:	4798      	blx	r3
}
    2ea6:	bd10      	pop	{r4, pc}
    2ea8:	000034d5 	.word	0x000034d5

00002eac <tmr_read_count>:
{
    2eac:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    2eae:	4802      	ldr	r0, [pc, #8]	; (2eb8 <tmr_read_count+0xc>)
    2eb0:	4b02      	ldr	r3, [pc, #8]	; (2ebc <tmr_read_count+0x10>)
    2eb2:	4798      	blx	r3
    2eb4:	b280      	uxth	r0, r0
}
    2eb6:	bd10      	pop	{r4, pc}
    2eb8:	20000a7c 	.word	0x20000a7c
    2ebc:	00002595 	.word	0x00002595

00002ec0 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    2ec0:	4b03      	ldr	r3, [pc, #12]	; (2ed0 <tmr_disable_cc_interrupt+0x10>)
    2ec2:	2110      	movs	r1, #16
    2ec4:	681a      	ldr	r2, [r3, #0]
    2ec6:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    2ec8:	7e5a      	ldrb	r2, [r3, #25]
    2eca:	438a      	bics	r2, r1
    2ecc:	765a      	strb	r2, [r3, #25]
}
    2ece:	4770      	bx	lr
    2ed0:	20000a7c 	.word	0x20000a7c

00002ed4 <tmr_enable_cc_interrupt>:
{
    2ed4:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2ed6:	4c0a      	ldr	r4, [pc, #40]	; (2f00 <tmr_enable_cc_interrupt+0x2c>)
    2ed8:	6820      	ldr	r0, [r4, #0]
    2eda:	4b0a      	ldr	r3, [pc, #40]	; (2f04 <tmr_enable_cc_interrupt+0x30>)
    2edc:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2ede:	4b0a      	ldr	r3, [pc, #40]	; (2f08 <tmr_enable_cc_interrupt+0x34>)
    2ee0:	5c1b      	ldrb	r3, [r3, r0]
    2ee2:	221f      	movs	r2, #31
    2ee4:	401a      	ands	r2, r3
    2ee6:	2301      	movs	r3, #1
    2ee8:	4093      	lsls	r3, r2
    2eea:	4a08      	ldr	r2, [pc, #32]	; (2f0c <tmr_enable_cc_interrupt+0x38>)
    2eec:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2eee:	7e63      	ldrb	r3, [r4, #25]
    2ef0:	2210      	movs	r2, #16
    2ef2:	4313      	orrs	r3, r2
    2ef4:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2ef6:	6823      	ldr	r3, [r4, #0]
    2ef8:	2210      	movs	r2, #16
    2efa:	735a      	strb	r2, [r3, #13]
}
    2efc:	bd10      	pop	{r4, pc}
    2efe:	46c0      	nop			; (mov r8, r8)
    2f00:	20000a7c 	.word	0x20000a7c
    2f04:	00002321 	.word	0x00002321
    2f08:	00008b7c 	.word	0x00008b7c
    2f0c:	e000e100 	.word	0xe000e100

00002f10 <tmr_write_cmpreg>:
{
    2f10:	b510      	push	{r4, lr}
    2f12:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    2f14:	2100      	movs	r1, #0
    2f16:	4802      	ldr	r0, [pc, #8]	; (2f20 <tmr_write_cmpreg+0x10>)
    2f18:	4b02      	ldr	r3, [pc, #8]	; (2f24 <tmr_write_cmpreg+0x14>)
    2f1a:	4798      	blx	r3
}
    2f1c:	bd10      	pop	{r4, pc}
    2f1e:	46c0      	nop			; (mov r8, r8)
    2f20:	20000a7c 	.word	0x20000a7c
    2f24:	000025c1 	.word	0x000025c1

00002f28 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    2f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f2a:	46ce      	mov	lr, r9
    2f2c:	4647      	mov	r7, r8
    2f2e:	b580      	push	{r7, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    2f30:	4a2d      	ldr	r2, [pc, #180]	; (2fe8 <tmr_init+0xc0>)
    2f32:	2300      	movs	r3, #0
    2f34:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    2f36:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    2f38:	2100      	movs	r1, #0
    2f3a:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    2f3c:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2f3e:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2f40:	7051      	strb	r1, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2f42:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2f44:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2f46:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2f48:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    2f4a:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2f4c:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2f4e:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2f50:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2f52:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2f54:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2f56:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    2f58:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2f5a:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    2f5c:	3b01      	subs	r3, #1
    2f5e:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    2f60:	4c22      	ldr	r4, [pc, #136]	; (2fec <tmr_init+0xc4>)
    2f62:	4923      	ldr	r1, [pc, #140]	; (2ff0 <tmr_init+0xc8>)
    2f64:	0020      	movs	r0, r4
    2f66:	4b23      	ldr	r3, [pc, #140]	; (2ff4 <tmr_init+0xcc>)
    2f68:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    2f6a:	2200      	movs	r2, #0
    2f6c:	4922      	ldr	r1, [pc, #136]	; (2ff8 <tmr_init+0xd0>)
    2f6e:	0020      	movs	r0, r4
    2f70:	4d22      	ldr	r5, [pc, #136]	; (2ffc <tmr_init+0xd4>)
    2f72:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    2f74:	2202      	movs	r2, #2
    2f76:	4922      	ldr	r1, [pc, #136]	; (3000 <tmr_init+0xd8>)
    2f78:	0020      	movs	r0, r4
    2f7a:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2f7c:	6820      	ldr	r0, [r4, #0]
    2f7e:	4b21      	ldr	r3, [pc, #132]	; (3004 <tmr_init+0xdc>)
    2f80:	4699      	mov	r9, r3
    2f82:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2f84:	4b20      	ldr	r3, [pc, #128]	; (3008 <tmr_init+0xe0>)
    2f86:	4698      	mov	r8, r3
    2f88:	5c1b      	ldrb	r3, [r3, r0]
    2f8a:	261f      	movs	r6, #31
    2f8c:	4033      	ands	r3, r6
    2f8e:	2501      	movs	r5, #1
    2f90:	002a      	movs	r2, r5
    2f92:	409a      	lsls	r2, r3
    2f94:	4f1d      	ldr	r7, [pc, #116]	; (300c <tmr_init+0xe4>)
    2f96:	603a      	str	r2, [r7, #0]
		module->enable_callback_mask |= (1 << callback_type);
    2f98:	7e63      	ldrb	r3, [r4, #25]
    2f9a:	2201      	movs	r2, #1
    2f9c:	4313      	orrs	r3, r2
    2f9e:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    2fa0:	6823      	ldr	r3, [r4, #0]
    2fa2:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2fa4:	0018      	movs	r0, r3
    2fa6:	47c8      	blx	r9
    2fa8:	4643      	mov	r3, r8
    2faa:	5c1b      	ldrb	r3, [r3, r0]
    2fac:	401e      	ands	r6, r3
    2fae:	40b5      	lsls	r5, r6
    2fb0:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2fb2:	7e63      	ldrb	r3, [r4, #25]
    2fb4:	2210      	movs	r2, #16
    2fb6:	4313      	orrs	r3, r2
    2fb8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2fba:	6822      	ldr	r2, [r4, #0]
    2fbc:	2310      	movs	r3, #16
    2fbe:	7353      	strb	r3, [r2, #13]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2fc0:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2fc2:	b25b      	sxtb	r3, r3
    2fc4:	2b00      	cmp	r3, #0
    2fc6:	dbfb      	blt.n	2fc0 <tmr_init+0x98>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2fc8:	8813      	ldrh	r3, [r2, #0]
    2fca:	2102      	movs	r1, #2
    2fcc:	430b      	orrs	r3, r1
    2fce:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    2fd0:	2000      	movs	r0, #0
    2fd2:	4b0f      	ldr	r3, [pc, #60]	; (3010 <tmr_init+0xe8>)
    2fd4:	4798      	blx	r3
    2fd6:	490f      	ldr	r1, [pc, #60]	; (3014 <tmr_init+0xec>)
    2fd8:	4b0f      	ldr	r3, [pc, #60]	; (3018 <tmr_init+0xf0>)
    2fda:	4798      	blx	r3
	#endif
	return timer_multiplier;
    2fdc:	b2c0      	uxtb	r0, r0
}
    2fde:	bc0c      	pop	{r2, r3}
    2fe0:	4690      	mov	r8, r2
    2fe2:	4699      	mov	r9, r3
    2fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2fe6:	46c0      	nop			; (mov r8, r8)
    2fe8:	20000a48 	.word	0x20000a48
    2fec:	20000a7c 	.word	0x20000a7c
    2ff0:	42002c00 	.word	0x42002c00
    2ff4:	00002359 	.word	0x00002359
    2ff8:	00002ea1 	.word	0x00002ea1
    2ffc:	00002259 	.word	0x00002259
    3000:	00002e95 	.word	0x00002e95
    3004:	00002321 	.word	0x00002321
    3008:	00008b7c 	.word	0x00008b7c
    300c:	e000e100 	.word	0xe000e100
    3010:	00001fe9 	.word	0x00001fe9
    3014:	000f4240 	.word	0x000f4240
    3018:	00005f5d 	.word	0x00005f5d

0000301c <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    301c:	4770      	bx	lr
	...

00003020 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    3020:	b510      	push	{r4, lr}
	eic_module->INTFLAG.reg = eic_mask;
    3022:	2201      	movs	r2, #1
    3024:	4b03      	ldr	r3, [pc, #12]	; (3034 <AT86RFX_ISR+0x14>)
    3026:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    3028:	4b03      	ldr	r3, [pc, #12]	; (3038 <AT86RFX_ISR+0x18>)
    302a:	681b      	ldr	r3, [r3, #0]
    302c:	2b00      	cmp	r3, #0
    302e:	d000      	beq.n	3032 <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    3030:	4798      	blx	r3
	}
}
    3032:	bd10      	pop	{r4, pc}
    3034:	40001800 	.word	0x40001800
    3038:	20000868 	.word	0x20000868

0000303c <trx_spi_init>:

void trx_spi_init(void)
{
    303c:	b530      	push	{r4, r5, lr}
    303e:	b085      	sub	sp, #20
	config->address_enabled = false;
    3040:	4a34      	ldr	r2, [pc, #208]	; (3114 <trx_spi_init+0xd8>)
    3042:	2300      	movs	r3, #0
    3044:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    3046:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    3048:	213f      	movs	r1, #63	; 0x3f
    304a:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    304c:	4c32      	ldr	r4, [pc, #200]	; (3118 <trx_spi_init+0xdc>)
    304e:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    3050:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    3052:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    3054:	2201      	movs	r2, #1
    3056:	4669      	mov	r1, sp
    3058:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    305a:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    305c:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    305e:	203f      	movs	r0, #63	; 0x3f
    3060:	4b2e      	ldr	r3, [pc, #184]	; (311c <trx_spi_init+0xe0>)
    3062:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    3064:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    3066:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3068:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    306a:	2900      	cmp	r1, #0
    306c:	d104      	bne.n	3078 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    306e:	0953      	lsrs	r3, r2, #5
    3070:	01db      	lsls	r3, r3, #7
    3072:	492b      	ldr	r1, [pc, #172]	; (3120 <trx_spi_init+0xe4>)
    3074:	468c      	mov	ip, r1
    3076:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3078:	211f      	movs	r1, #31
    307a:	4011      	ands	r1, r2
    307c:	2201      	movs	r2, #1
    307e:	0010      	movs	r0, r2
    3080:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    3082:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    3084:	4c27      	ldr	r4, [pc, #156]	; (3124 <trx_spi_init+0xe8>)
    3086:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3088:	2300      	movs	r3, #0
    308a:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    308c:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    308e:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    3090:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    3092:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    3094:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    3096:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    3098:	3223      	adds	r2, #35	; 0x23
    309a:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    309c:	0020      	movs	r0, r4
    309e:	3018      	adds	r0, #24
    30a0:	3a18      	subs	r2, #24
    30a2:	2100      	movs	r1, #0
    30a4:	4b20      	ldr	r3, [pc, #128]	; (3128 <trx_spi_init+0xec>)
    30a6:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    30a8:	2380      	movs	r3, #128	; 0x80
    30aa:	025b      	lsls	r3, r3, #9
    30ac:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    30ae:	4b1f      	ldr	r3, [pc, #124]	; (312c <trx_spi_init+0xf0>)
    30b0:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    30b2:	4b1f      	ldr	r3, [pc, #124]	; (3130 <trx_spi_init+0xf4>)
    30b4:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    30b6:	2301      	movs	r3, #1
    30b8:	425b      	negs	r3, r3
    30ba:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    30bc:	4b1d      	ldr	r3, [pc, #116]	; (3134 <trx_spi_init+0xf8>)
    30be:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    30c0:	4b1d      	ldr	r3, [pc, #116]	; (3138 <trx_spi_init+0xfc>)
    30c2:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    30c4:	4d1d      	ldr	r5, [pc, #116]	; (313c <trx_spi_init+0x100>)
    30c6:	0022      	movs	r2, r4
    30c8:	491d      	ldr	r1, [pc, #116]	; (3140 <trx_spi_init+0x104>)
    30ca:	0028      	movs	r0, r5
    30cc:	4b1d      	ldr	r3, [pc, #116]	; (3144 <trx_spi_init+0x108>)
    30ce:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    30d0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    30d2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    30d4:	2b00      	cmp	r3, #0
    30d6:	d1fc      	bne.n	30d2 <trx_spi_init+0x96>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    30d8:	6813      	ldr	r3, [r2, #0]
    30da:	2502      	movs	r5, #2
    30dc:	432b      	orrs	r3, r5
    30de:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    30e0:	ac01      	add	r4, sp, #4
    30e2:	0020      	movs	r0, r4
    30e4:	4b18      	ldr	r3, [pc, #96]	; (3148 <trx_spi_init+0x10c>)
    30e6:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    30e8:	2320      	movs	r3, #32
    30ea:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    30ec:	2380      	movs	r3, #128	; 0x80
    30ee:	039b      	lsls	r3, r3, #14
    30f0:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    30f2:	7225      	strb	r5, [r4, #8]
	#if (SAML21)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    30f4:	2301      	movs	r3, #1
    30f6:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    30f8:	2200      	movs	r2, #0
    30fa:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    30fc:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    30fe:	0021      	movs	r1, r4
    3100:	2000      	movs	r0, #0
    3102:	4b12      	ldr	r3, [pc, #72]	; (314c <trx_spi_init+0x110>)
    3104:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    3106:	2200      	movs	r2, #0
    3108:	2100      	movs	r1, #0
    310a:	4811      	ldr	r0, [pc, #68]	; (3150 <trx_spi_init+0x114>)
    310c:	4b11      	ldr	r3, [pc, #68]	; (3154 <trx_spi_init+0x118>)
    310e:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    3110:	b005      	add	sp, #20
    3112:	bd30      	pop	{r4, r5, pc}
    3114:	20000a9c 	.word	0x20000a9c
    3118:	20000aa0 	.word	0x20000aa0
    311c:	00000a7d 	.word	0x00000a7d
    3120:	41004400 	.word	0x41004400
    3124:	20000aa4 	.word	0x20000aa4
    3128:	0000359f 	.word	0x0000359f
    312c:	004c4b40 	.word	0x004c4b40
    3130:	00530005 	.word	0x00530005
    3134:	003e0005 	.word	0x003e0005
    3138:	00520005 	.word	0x00520005
    313c:	20000adc 	.word	0x20000adc
    3140:	42001800 	.word	0x42001800
    3144:	00000f65 	.word	0x00000f65
    3148:	000009f1 	.word	0x000009f1
    314c:	00000a05 	.word	0x00000a05
    3150:	00003021 	.word	0x00003021
    3154:	000008ed 	.word	0x000008ed

00003158 <PhyReset>:

void PhyReset(void)
{
    3158:	b570      	push	{r4, r5, r6, lr}
    315a:	4c08      	ldr	r4, [pc, #32]	; (317c <PhyReset+0x24>)
    315c:	2580      	movs	r5, #128	; 0x80
    315e:	022d      	lsls	r5, r5, #8
    3160:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    3162:	2280      	movs	r2, #128	; 0x80
    3164:	0352      	lsls	r2, r2, #13
    3166:	4b06      	ldr	r3, [pc, #24]	; (3180 <PhyReset+0x28>)
    3168:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    316a:	20a5      	movs	r0, #165	; 0xa5
    316c:	0040      	lsls	r0, r0, #1
    316e:	4e05      	ldr	r6, [pc, #20]	; (3184 <PhyReset+0x2c>)
    3170:	47b0      	blx	r6
    3172:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    3174:	200a      	movs	r0, #10
    3176:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    3178:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    317a:	bd70      	pop	{r4, r5, r6, pc}
    317c:	41004480 	.word	0x41004480
    3180:	41004400 	.word	0x41004400
    3184:	00000751 	.word	0x00000751

00003188 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    3188:	b570      	push	{r4, r5, r6, lr}
    318a:	b082      	sub	sp, #8
    318c:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    318e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3192:	425a      	negs	r2, r3
    3194:	4153      	adcs	r3, r2
    3196:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3198:	b672      	cpsid	i
    319a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    319e:	2200      	movs	r2, #0
    31a0:	4b33      	ldr	r3, [pc, #204]	; (3270 <trx_reg_read+0xe8>)
    31a2:	701a      	strb	r2, [r3, #0]
	return flags;
    31a4:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    31a6:	4e33      	ldr	r6, [pc, #204]	; (3274 <trx_reg_read+0xec>)
    31a8:	3201      	adds	r2, #1
    31aa:	4933      	ldr	r1, [pc, #204]	; (3278 <trx_reg_read+0xf0>)
    31ac:	0030      	movs	r0, r6
    31ae:	4b33      	ldr	r3, [pc, #204]	; (327c <trx_reg_read+0xf4>)
    31b0:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    31b2:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    31b4:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    31b6:	7e1a      	ldrb	r2, [r3, #24]
    31b8:	420a      	tst	r2, r1
    31ba:	d0fc      	beq.n	31b6 <trx_reg_read+0x2e>
    31bc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    31be:	07d2      	lsls	r2, r2, #31
    31c0:	d502      	bpl.n	31c8 <trx_reg_read+0x40>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    31c2:	2280      	movs	r2, #128	; 0x80
    31c4:	4315      	orrs	r5, r2
    31c6:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    31c8:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    31ca:	7e1a      	ldrb	r2, [r3, #24]
    31cc:	420a      	tst	r2, r1
    31ce:	d0fc      	beq.n	31ca <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    31d0:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    31d2:	7e1a      	ldrb	r2, [r3, #24]
    31d4:	420a      	tst	r2, r1
    31d6:	d0fc      	beq.n	31d2 <trx_reg_read+0x4a>
    31d8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    31da:	0752      	lsls	r2, r2, #29
    31dc:	d50c      	bpl.n	31f8 <trx_reg_read+0x70>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    31de:	8b5a      	ldrh	r2, [r3, #26]
    31e0:	0752      	lsls	r2, r2, #29
    31e2:	d501      	bpl.n	31e8 <trx_reg_read+0x60>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    31e4:	2204      	movs	r2, #4
    31e6:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    31e8:	4a22      	ldr	r2, [pc, #136]	; (3274 <trx_reg_read+0xec>)
    31ea:	7992      	ldrb	r2, [r2, #6]
    31ec:	2a01      	cmp	r2, #1
    31ee:	d034      	beq.n	325a <trx_reg_read+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    31f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    31f2:	b2d2      	uxtb	r2, r2
    31f4:	4922      	ldr	r1, [pc, #136]	; (3280 <trx_reg_read+0xf8>)
    31f6:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    31f8:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    31fa:	7e1a      	ldrb	r2, [r3, #24]
    31fc:	420a      	tst	r2, r1
    31fe:	d0fc      	beq.n	31fa <trx_reg_read+0x72>
    3200:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3202:	07d2      	lsls	r2, r2, #31
    3204:	d501      	bpl.n	320a <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3206:	2200      	movs	r2, #0
    3208:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    320a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    320c:	7e1a      	ldrb	r2, [r3, #24]
    320e:	420a      	tst	r2, r1
    3210:	d0fc      	beq.n	320c <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    3212:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3214:	7e1a      	ldrb	r2, [r3, #24]
    3216:	420a      	tst	r2, r1
    3218:	d0fc      	beq.n	3214 <trx_reg_read+0x8c>
    321a:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    321c:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    321e:	0752      	lsls	r2, r2, #29
    3220:	d50a      	bpl.n	3238 <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3222:	8b5a      	ldrh	r2, [r3, #26]
    3224:	0752      	lsls	r2, r2, #29
    3226:	d501      	bpl.n	322c <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3228:	2204      	movs	r2, #4
    322a:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    322c:	4a11      	ldr	r2, [pc, #68]	; (3274 <trx_reg_read+0xec>)
    322e:	7992      	ldrb	r2, [r2, #6]
    3230:	2a01      	cmp	r2, #1
    3232:	d018      	beq.n	3266 <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3234:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3236:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3238:	2200      	movs	r2, #0
    323a:	490f      	ldr	r1, [pc, #60]	; (3278 <trx_reg_read+0xf0>)
    323c:	480d      	ldr	r0, [pc, #52]	; (3274 <trx_reg_read+0xec>)
    323e:	4b0f      	ldr	r3, [pc, #60]	; (327c <trx_reg_read+0xf4>)
    3240:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3242:	23ff      	movs	r3, #255	; 0xff
    3244:	4223      	tst	r3, r4
    3246:	d005      	beq.n	3254 <trx_reg_read+0xcc>
		cpu_irq_enable();
    3248:	2201      	movs	r2, #1
    324a:	4b09      	ldr	r3, [pc, #36]	; (3270 <trx_reg_read+0xe8>)
    324c:	701a      	strb	r2, [r3, #0]
    324e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3252:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    3254:	b2e8      	uxtb	r0, r5
}
    3256:	b002      	add	sp, #8
    3258:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    325a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    325c:	05d2      	lsls	r2, r2, #23
    325e:	0dd2      	lsrs	r2, r2, #23
    3260:	4907      	ldr	r1, [pc, #28]	; (3280 <trx_reg_read+0xf8>)
    3262:	800a      	strh	r2, [r1, #0]
    3264:	e7c8      	b.n	31f8 <trx_reg_read+0x70>
    3266:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3268:	05ed      	lsls	r5, r5, #23
    326a:	0ded      	lsrs	r5, r5, #23
    326c:	e7e4      	b.n	3238 <trx_reg_read+0xb0>
    326e:	46c0      	nop			; (mov r8, r8)
    3270:	20000008 	.word	0x20000008
    3274:	20000adc 	.word	0x20000adc
    3278:	20000aa0 	.word	0x20000aa0
    327c:	00001229 	.word	0x00001229
    3280:	20000a98 	.word	0x20000a98

00003284 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    3284:	b5f0      	push	{r4, r5, r6, r7, lr}
    3286:	b083      	sub	sp, #12
    3288:	0006      	movs	r6, r0
    328a:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    328c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3290:	425a      	negs	r2, r3
    3292:	4153      	adcs	r3, r2
    3294:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3296:	b672      	cpsid	i
    3298:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    329c:	2200      	movs	r2, #0
    329e:	4b34      	ldr	r3, [pc, #208]	; (3370 <trx_reg_write+0xec>)
    32a0:	701a      	strb	r2, [r3, #0]
	return flags;
    32a2:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    32a4:	4f33      	ldr	r7, [pc, #204]	; (3374 <trx_reg_write+0xf0>)
    32a6:	3201      	adds	r2, #1
    32a8:	4933      	ldr	r1, [pc, #204]	; (3378 <trx_reg_write+0xf4>)
    32aa:	0038      	movs	r0, r7
    32ac:	4b33      	ldr	r3, [pc, #204]	; (337c <trx_reg_write+0xf8>)
    32ae:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    32b0:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    32b2:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    32b4:	7e1a      	ldrb	r2, [r3, #24]
    32b6:	420a      	tst	r2, r1
    32b8:	d0fc      	beq.n	32b4 <trx_reg_write+0x30>
    32ba:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    32bc:	07d2      	lsls	r2, r2, #31
    32be:	d502      	bpl.n	32c6 <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    32c0:	22c0      	movs	r2, #192	; 0xc0
    32c2:	4316      	orrs	r6, r2
    32c4:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    32c6:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    32c8:	7e1a      	ldrb	r2, [r3, #24]
    32ca:	420a      	tst	r2, r1
    32cc:	d0fc      	beq.n	32c8 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    32ce:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    32d0:	7e1a      	ldrb	r2, [r3, #24]
    32d2:	420a      	tst	r2, r1
    32d4:	d0fc      	beq.n	32d0 <trx_reg_write+0x4c>
    32d6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    32d8:	0752      	lsls	r2, r2, #29
    32da:	d50c      	bpl.n	32f6 <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    32dc:	8b5a      	ldrh	r2, [r3, #26]
    32de:	0752      	lsls	r2, r2, #29
    32e0:	d501      	bpl.n	32e6 <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    32e2:	2204      	movs	r2, #4
    32e4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    32e6:	4a23      	ldr	r2, [pc, #140]	; (3374 <trx_reg_write+0xf0>)
    32e8:	7992      	ldrb	r2, [r2, #6]
    32ea:	2a01      	cmp	r2, #1
    32ec:	d033      	beq.n	3356 <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    32ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    32f0:	b2d2      	uxtb	r2, r2
    32f2:	4923      	ldr	r1, [pc, #140]	; (3380 <trx_reg_write+0xfc>)
    32f4:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    32f6:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    32f8:	7e1a      	ldrb	r2, [r3, #24]
    32fa:	420a      	tst	r2, r1
    32fc:	d0fc      	beq.n	32f8 <trx_reg_write+0x74>
    32fe:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3300:	07d2      	lsls	r2, r2, #31
    3302:	d500      	bpl.n	3306 <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3304:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    3306:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3308:	7e1a      	ldrb	r2, [r3, #24]
    330a:	420a      	tst	r2, r1
    330c:	d0fc      	beq.n	3308 <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    330e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3310:	7e1a      	ldrb	r2, [r3, #24]
    3312:	420a      	tst	r2, r1
    3314:	d0fc      	beq.n	3310 <trx_reg_write+0x8c>
    3316:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3318:	0752      	lsls	r2, r2, #29
    331a:	d50c      	bpl.n	3336 <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    331c:	8b5a      	ldrh	r2, [r3, #26]
    331e:	0752      	lsls	r2, r2, #29
    3320:	d501      	bpl.n	3326 <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3322:	2204      	movs	r2, #4
    3324:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3326:	4a13      	ldr	r2, [pc, #76]	; (3374 <trx_reg_write+0xf0>)
    3328:	7992      	ldrb	r2, [r2, #6]
    332a:	2a01      	cmp	r2, #1
    332c:	d019      	beq.n	3362 <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3330:	b2db      	uxtb	r3, r3
    3332:	4a13      	ldr	r2, [pc, #76]	; (3380 <trx_reg_write+0xfc>)
    3334:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3336:	2200      	movs	r2, #0
    3338:	490f      	ldr	r1, [pc, #60]	; (3378 <trx_reg_write+0xf4>)
    333a:	480e      	ldr	r0, [pc, #56]	; (3374 <trx_reg_write+0xf0>)
    333c:	4b0f      	ldr	r3, [pc, #60]	; (337c <trx_reg_write+0xf8>)
    333e:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    3340:	23ff      	movs	r3, #255	; 0xff
    3342:	422b      	tst	r3, r5
    3344:	d005      	beq.n	3352 <trx_reg_write+0xce>
		cpu_irq_enable();
    3346:	2201      	movs	r2, #1
    3348:	4b09      	ldr	r3, [pc, #36]	; (3370 <trx_reg_write+0xec>)
    334a:	701a      	strb	r2, [r3, #0]
    334c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3350:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3352:	b003      	add	sp, #12
    3354:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3356:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3358:	05d2      	lsls	r2, r2, #23
    335a:	0dd2      	lsrs	r2, r2, #23
    335c:	4908      	ldr	r1, [pc, #32]	; (3380 <trx_reg_write+0xfc>)
    335e:	800a      	strh	r2, [r1, #0]
    3360:	e7c9      	b.n	32f6 <trx_reg_write+0x72>
    3362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3364:	05db      	lsls	r3, r3, #23
    3366:	0ddb      	lsrs	r3, r3, #23
    3368:	4a05      	ldr	r2, [pc, #20]	; (3380 <trx_reg_write+0xfc>)
    336a:	8013      	strh	r3, [r2, #0]
    336c:	e7e3      	b.n	3336 <trx_reg_write+0xb2>
    336e:	46c0      	nop			; (mov r8, r8)
    3370:	20000008 	.word	0x20000008
    3374:	20000adc 	.word	0x20000adc
    3378:	20000aa0 	.word	0x20000aa0
    337c:	00001229 	.word	0x00001229
    3380:	20000a98 	.word	0x20000a98

00003384 <setup>:
#include "sio2host.h"
#include "TheArtist.h"
/************************************************************************/
/*                                                                      */
/************************************************************************/
void setup(void) {
    3384:	b570      	push	{r4, r5, r6, lr}
	// [SYSTEM INITIALIZE]
	// [NOTICE!]!! sequence of this calls is important!
	irq_initialize_vectors();
	system_init();
    3386:	4b17      	ldr	r3, [pc, #92]	; (33e4 <setup+0x60>)
    3388:	4798      	blx	r3
	artist_usart_configure(&(artist_front.usart_instance));
    338a:	4c17      	ldr	r4, [pc, #92]	; (33e8 <setup+0x64>)
    338c:	0020      	movs	r0, r4
    338e:	4b17      	ldr	r3, [pc, #92]	; (33ec <setup+0x68>)
    3390:	4798      	blx	r3
	artist_ultrasonic_tc_configure();
    3392:	4b17      	ldr	r3, [pc, #92]	; (33f0 <setup+0x6c>)
    3394:	4798      	blx	r3
	artist_scheduler_tc_configure(); 
    3396:	4b17      	ldr	r3, [pc, #92]	; (33f4 <setup+0x70>)
    3398:	4798      	blx	r3
	artist_configure_tc_callbacks(); 
    339a:	4b17      	ldr	r3, [pc, #92]	; (33f8 <setup+0x74>)
    339c:	4798      	blx	r3
	
	// [ultrasonic]
	artist_ultrasonic_configure(&(artist_front.us_instance_right),
    339e:	0020      	movs	r0, r4
    33a0:	304c      	adds	r0, #76	; 0x4c
    33a2:	220f      	movs	r2, #15
    33a4:	211c      	movs	r1, #28
    33a6:	4d15      	ldr	r5, [pc, #84]	; (33fc <setup+0x78>)
    33a8:	47a8      	blx	r5
	CONF_ARTIST_RIGHT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_center),
    33aa:	0020      	movs	r0, r4
    33ac:	303c      	adds	r0, #60	; 0x3c
    33ae:	220f      	movs	r2, #15
    33b0:	210d      	movs	r1, #13
    33b2:	47a8      	blx	r5
	CONF_ARTIST_CENTER_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_left),
    33b4:	0020      	movs	r0, r4
    33b6:	3044      	adds	r0, #68	; 0x44
    33b8:	220f      	movs	r2, #15
    33ba:	2117      	movs	r1, #23
    33bc:	47a8      	blx	r5
	CONF_ARTIST_LEFT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_gpio_init(); 	
    33be:	4b10      	ldr	r3, [pc, #64]	; (3400 <setup+0x7c>)
    33c0:	4798      	blx	r3
	//! [ultrasonic]
	
	
	delay_init();
    33c2:	4b10      	ldr	r3, [pc, #64]	; (3404 <setup+0x80>)
    33c4:	4798      	blx	r3
	SYS_Init();
    33c6:	4b10      	ldr	r3, [pc, #64]	; (3408 <setup+0x84>)
    33c8:	4798      	blx	r3
	sio2host_init();
    33ca:	4b10      	ldr	r3, [pc, #64]	; (340c <setup+0x88>)
    33cc:	4798      	blx	r3
	cpu_irq_enable();
    33ce:	2201      	movs	r2, #1
    33d0:	4b0f      	ldr	r3, [pc, #60]	; (3410 <setup+0x8c>)
    33d2:	701a      	strb	r2, [r3, #0]
    33d4:	f3bf 8f5f 	dmb	sy
    33d8:	b662      	cpsie	i
	// ![SYSTEM INITIALIZE]
	
	printf("Front board setup complete.\n"); 
    33da:	480e      	ldr	r0, [pc, #56]	; (3414 <setup+0x90>)
    33dc:	4b0e      	ldr	r3, [pc, #56]	; (3418 <setup+0x94>)
    33de:	4798      	blx	r3
}
    33e0:	bd70      	pop	{r4, r5, r6, pc}
    33e2:	46c0      	nop			; (mov r8, r8)
    33e4:	0000222d 	.word	0x0000222d
    33e8:	20000900 	.word	0x20000900
    33ec:	000004ed 	.word	0x000004ed
    33f0:	00000459 	.word	0x00000459
    33f4:	00000651 	.word	0x00000651
    33f8:	000006c1 	.word	0x000006c1
    33fc:	00000115 	.word	0x00000115
    3400:	00000125 	.word	0x00000125
    3404:	00000711 	.word	0x00000711
    3408:	00002d71 	.word	0x00002d71
    340c:	0000286d 	.word	0x0000286d
    3410:	20000008 	.word	0x20000008
    3414:	00008b80 	.word	0x00008b80
    3418:	00003f85 	.word	0x00003f85

0000341c <loop>:
/************************************************************************/
/*                                                                      */
/************************************************************************/
void loop( void) {
    341c:	b510      	push	{r4, lr}
	delay_ms(200);
    341e:	20c8      	movs	r0, #200	; 0xc8
    3420:	4b02      	ldr	r3, [pc, #8]	; (342c <loop+0x10>)
    3422:	4798      	blx	r3
	artist_print_ultrasonic_value(); 
    3424:	4b02      	ldr	r3, [pc, #8]	; (3430 <loop+0x14>)
    3426:	4798      	blx	r3
	
}
    3428:	bd10      	pop	{r4, pc}
    342a:	46c0      	nop			; (mov r8, r8)
    342c:	0000077d 	.word	0x0000077d
    3430:	0000017d 	.word	0x0000017d

00003434 <main>:
/************************************************************************/
/*                                                                      */
/************************************************************************/
int main (void) {
    3434:	b510      	push	{r4, lr}
	setup();
    3436:	4b02      	ldr	r3, [pc, #8]	; (3440 <main+0xc>)
    3438:	4798      	blx	r3
	while(true) loop();
    343a:	4c02      	ldr	r4, [pc, #8]	; (3444 <main+0x10>)
    343c:	47a0      	blx	r4
    343e:	e7fd      	b.n	343c <main+0x8>
    3440:	00003385 	.word	0x00003385
    3444:	0000341d 	.word	0x0000341d

00003448 <common_tc_delay>:
    3448:	b510      	push	{r4, lr}
    344a:	1c04      	adds	r4, r0, #0
    344c:	4b13      	ldr	r3, [pc, #76]	; (349c <common_tc_delay+0x54>)
    344e:	4798      	blx	r3
    3450:	4b13      	ldr	r3, [pc, #76]	; (34a0 <common_tc_delay+0x58>)
    3452:	781a      	ldrb	r2, [r3, #0]
    3454:	4362      	muls	r2, r4
    3456:	1881      	adds	r1, r0, r2
    3458:	4b12      	ldr	r3, [pc, #72]	; (34a4 <common_tc_delay+0x5c>)
    345a:	6059      	str	r1, [r3, #4]
    345c:	6859      	ldr	r1, [r3, #4]
    345e:	0c09      	lsrs	r1, r1, #16
    3460:	6059      	str	r1, [r3, #4]
    3462:	685b      	ldr	r3, [r3, #4]
    3464:	2b00      	cmp	r3, #0
    3466:	d007      	beq.n	3478 <common_tc_delay+0x30>
    3468:	4b0e      	ldr	r3, [pc, #56]	; (34a4 <common_tc_delay+0x5c>)
    346a:	6859      	ldr	r1, [r3, #4]
    346c:	3201      	adds	r2, #1
    346e:	1880      	adds	r0, r0, r2
    3470:	8118      	strh	r0, [r3, #8]
    3472:	4b0d      	ldr	r3, [pc, #52]	; (34a8 <common_tc_delay+0x60>)
    3474:	4798      	blx	r3
    3476:	e004      	b.n	3482 <common_tc_delay+0x3a>
    3478:	1882      	adds	r2, r0, r2
    347a:	4b0a      	ldr	r3, [pc, #40]	; (34a4 <common_tc_delay+0x5c>)
    347c:	811a      	strh	r2, [r3, #8]
    347e:	4b0b      	ldr	r3, [pc, #44]	; (34ac <common_tc_delay+0x64>)
    3480:	4798      	blx	r3
    3482:	4b08      	ldr	r3, [pc, #32]	; (34a4 <common_tc_delay+0x5c>)
    3484:	891b      	ldrh	r3, [r3, #8]
    3486:	2b63      	cmp	r3, #99	; 0x63
    3488:	d802      	bhi.n	3490 <common_tc_delay+0x48>
    348a:	3364      	adds	r3, #100	; 0x64
    348c:	4a05      	ldr	r2, [pc, #20]	; (34a4 <common_tc_delay+0x5c>)
    348e:	8113      	strh	r3, [r2, #8]
    3490:	4b04      	ldr	r3, [pc, #16]	; (34a4 <common_tc_delay+0x5c>)
    3492:	8918      	ldrh	r0, [r3, #8]
    3494:	4b06      	ldr	r3, [pc, #24]	; (34b0 <common_tc_delay+0x68>)
    3496:	4798      	blx	r3
    3498:	bd10      	pop	{r4, pc}
    349a:	46c0      	nop			; (mov r8, r8)
    349c:	00002ead 	.word	0x00002ead
    34a0:	20000ae8 	.word	0x20000ae8
    34a4:	2000086c 	.word	0x2000086c
    34a8:	00002ec1 	.word	0x00002ec1
    34ac:	00002ed5 	.word	0x00002ed5
    34b0:	00002f11 	.word	0x00002f11

000034b4 <common_tc_init>:
    34b4:	b508      	push	{r3, lr}
    34b6:	2200      	movs	r2, #0
    34b8:	4b03      	ldr	r3, [pc, #12]	; (34c8 <common_tc_init+0x14>)
    34ba:	701a      	strb	r2, [r3, #0]
    34bc:	4b03      	ldr	r3, [pc, #12]	; (34cc <common_tc_init+0x18>)
    34be:	4798      	blx	r3
    34c0:	4b03      	ldr	r3, [pc, #12]	; (34d0 <common_tc_init+0x1c>)
    34c2:	7018      	strb	r0, [r3, #0]
    34c4:	bd08      	pop	{r3, pc}
    34c6:	46c0      	nop			; (mov r8, r8)
    34c8:	2000086c 	.word	0x2000086c
    34cc:	00002f29 	.word	0x00002f29
    34d0:	20000ae8 	.word	0x20000ae8

000034d4 <tmr_ovf_callback>:
    34d4:	b508      	push	{r3, lr}
    34d6:	4b0e      	ldr	r3, [pc, #56]	; (3510 <tmr_ovf_callback+0x3c>)
    34d8:	685b      	ldr	r3, [r3, #4]
    34da:	2b00      	cmp	r3, #0
    34dc:	d007      	beq.n	34ee <tmr_ovf_callback+0x1a>
    34de:	4a0c      	ldr	r2, [pc, #48]	; (3510 <tmr_ovf_callback+0x3c>)
    34e0:	6853      	ldr	r3, [r2, #4]
    34e2:	3b01      	subs	r3, #1
    34e4:	6053      	str	r3, [r2, #4]
    34e6:	2b00      	cmp	r3, #0
    34e8:	d101      	bne.n	34ee <tmr_ovf_callback+0x1a>
    34ea:	4b0a      	ldr	r3, [pc, #40]	; (3514 <tmr_ovf_callback+0x40>)
    34ec:	4798      	blx	r3
    34ee:	4a08      	ldr	r2, [pc, #32]	; (3510 <tmr_ovf_callback+0x3c>)
    34f0:	7813      	ldrb	r3, [r2, #0]
    34f2:	3301      	adds	r3, #1
    34f4:	b2db      	uxtb	r3, r3
    34f6:	7013      	strb	r3, [r2, #0]
    34f8:	4a07      	ldr	r2, [pc, #28]	; (3518 <tmr_ovf_callback+0x44>)
    34fa:	7812      	ldrb	r2, [r2, #0]
    34fc:	429a      	cmp	r2, r3
    34fe:	d806      	bhi.n	350e <tmr_ovf_callback+0x3a>
    3500:	4b03      	ldr	r3, [pc, #12]	; (3510 <tmr_ovf_callback+0x3c>)
    3502:	2200      	movs	r2, #0
    3504:	701a      	strb	r2, [r3, #0]
    3506:	68db      	ldr	r3, [r3, #12]
    3508:	2b00      	cmp	r3, #0
    350a:	d000      	beq.n	350e <tmr_ovf_callback+0x3a>
    350c:	4798      	blx	r3
    350e:	bd08      	pop	{r3, pc}
    3510:	2000086c 	.word	0x2000086c
    3514:	00002ed5 	.word	0x00002ed5
    3518:	20000ae8 	.word	0x20000ae8

0000351c <tmr_cca_callback>:
    351c:	b508      	push	{r3, lr}
    351e:	4b04      	ldr	r3, [pc, #16]	; (3530 <tmr_cca_callback+0x14>)
    3520:	4798      	blx	r3
    3522:	4b04      	ldr	r3, [pc, #16]	; (3534 <tmr_cca_callback+0x18>)
    3524:	691b      	ldr	r3, [r3, #16]
    3526:	2b00      	cmp	r3, #0
    3528:	d000      	beq.n	352c <tmr_cca_callback+0x10>
    352a:	4798      	blx	r3
    352c:	bd08      	pop	{r3, pc}
    352e:	46c0      	nop			; (mov r8, r8)
    3530:	00002ec1 	.word	0x00002ec1
    3534:	2000086c 	.word	0x2000086c

00003538 <set_common_tc_expiry_callback>:
    3538:	4b01      	ldr	r3, [pc, #4]	; (3540 <set_common_tc_expiry_callback+0x8>)
    353a:	6118      	str	r0, [r3, #16]
    353c:	4770      	bx	lr
    353e:	46c0      	nop			; (mov r8, r8)
    3540:	2000086c 	.word	0x2000086c

00003544 <__libc_init_array>:
    3544:	b570      	push	{r4, r5, r6, lr}
    3546:	2600      	movs	r6, #0
    3548:	4d0c      	ldr	r5, [pc, #48]	; (357c <__libc_init_array+0x38>)
    354a:	4c0d      	ldr	r4, [pc, #52]	; (3580 <__libc_init_array+0x3c>)
    354c:	1b64      	subs	r4, r4, r5
    354e:	10a4      	asrs	r4, r4, #2
    3550:	42a6      	cmp	r6, r4
    3552:	d109      	bne.n	3568 <__libc_init_array+0x24>
    3554:	2600      	movs	r6, #0
    3556:	f005 fd23 	bl	8fa0 <_init>
    355a:	4d0a      	ldr	r5, [pc, #40]	; (3584 <__libc_init_array+0x40>)
    355c:	4c0a      	ldr	r4, [pc, #40]	; (3588 <__libc_init_array+0x44>)
    355e:	1b64      	subs	r4, r4, r5
    3560:	10a4      	asrs	r4, r4, #2
    3562:	42a6      	cmp	r6, r4
    3564:	d105      	bne.n	3572 <__libc_init_array+0x2e>
    3566:	bd70      	pop	{r4, r5, r6, pc}
    3568:	00b3      	lsls	r3, r6, #2
    356a:	58eb      	ldr	r3, [r5, r3]
    356c:	4798      	blx	r3
    356e:	3601      	adds	r6, #1
    3570:	e7ee      	b.n	3550 <__libc_init_array+0xc>
    3572:	00b3      	lsls	r3, r6, #2
    3574:	58eb      	ldr	r3, [r5, r3]
    3576:	4798      	blx	r3
    3578:	3601      	adds	r6, #1
    357a:	e7f2      	b.n	3562 <__libc_init_array+0x1e>
    357c:	00008fac 	.word	0x00008fac
    3580:	00008fac 	.word	0x00008fac
    3584:	00008fac 	.word	0x00008fac
    3588:	00008fb0 	.word	0x00008fb0

0000358c <memcpy>:
    358c:	2300      	movs	r3, #0
    358e:	b510      	push	{r4, lr}
    3590:	429a      	cmp	r2, r3
    3592:	d100      	bne.n	3596 <memcpy+0xa>
    3594:	bd10      	pop	{r4, pc}
    3596:	5ccc      	ldrb	r4, [r1, r3]
    3598:	54c4      	strb	r4, [r0, r3]
    359a:	3301      	adds	r3, #1
    359c:	e7f8      	b.n	3590 <memcpy+0x4>

0000359e <memset>:
    359e:	0003      	movs	r3, r0
    35a0:	1882      	adds	r2, r0, r2
    35a2:	4293      	cmp	r3, r2
    35a4:	d100      	bne.n	35a8 <memset+0xa>
    35a6:	4770      	bx	lr
    35a8:	7019      	strb	r1, [r3, #0]
    35aa:	3301      	adds	r3, #1
    35ac:	e7f9      	b.n	35a2 <memset+0x4>

000035ae <__cvt>:
    35ae:	b5f0      	push	{r4, r5, r6, r7, lr}
    35b0:	b08b      	sub	sp, #44	; 0x2c
    35b2:	0014      	movs	r4, r2
    35b4:	1e1d      	subs	r5, r3, #0
    35b6:	9912      	ldr	r1, [sp, #72]	; 0x48
    35b8:	da53      	bge.n	3662 <__cvt+0xb4>
    35ba:	2480      	movs	r4, #128	; 0x80
    35bc:	0624      	lsls	r4, r4, #24
    35be:	191b      	adds	r3, r3, r4
    35c0:	001d      	movs	r5, r3
    35c2:	0014      	movs	r4, r2
    35c4:	232d      	movs	r3, #45	; 0x2d
    35c6:	700b      	strb	r3, [r1, #0]
    35c8:	2320      	movs	r3, #32
    35ca:	9e14      	ldr	r6, [sp, #80]	; 0x50
    35cc:	2203      	movs	r2, #3
    35ce:	439e      	bics	r6, r3
    35d0:	2e46      	cmp	r6, #70	; 0x46
    35d2:	d007      	beq.n	35e4 <__cvt+0x36>
    35d4:	0033      	movs	r3, r6
    35d6:	3b45      	subs	r3, #69	; 0x45
    35d8:	4259      	negs	r1, r3
    35da:	414b      	adcs	r3, r1
    35dc:	9910      	ldr	r1, [sp, #64]	; 0x40
    35de:	3a01      	subs	r2, #1
    35e0:	18cb      	adds	r3, r1, r3
    35e2:	9310      	str	r3, [sp, #64]	; 0x40
    35e4:	ab09      	add	r3, sp, #36	; 0x24
    35e6:	9304      	str	r3, [sp, #16]
    35e8:	ab08      	add	r3, sp, #32
    35ea:	9303      	str	r3, [sp, #12]
    35ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    35ee:	9200      	str	r2, [sp, #0]
    35f0:	9302      	str	r3, [sp, #8]
    35f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    35f4:	0022      	movs	r2, r4
    35f6:	9301      	str	r3, [sp, #4]
    35f8:	002b      	movs	r3, r5
    35fa:	f000 fedb 	bl	43b4 <_dtoa_r>
    35fe:	0007      	movs	r7, r0
    3600:	2e47      	cmp	r6, #71	; 0x47
    3602:	d102      	bne.n	360a <__cvt+0x5c>
    3604:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3606:	07db      	lsls	r3, r3, #31
    3608:	d524      	bpl.n	3654 <__cvt+0xa6>
    360a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    360c:	18fb      	adds	r3, r7, r3
    360e:	9307      	str	r3, [sp, #28]
    3610:	2e46      	cmp	r6, #70	; 0x46
    3612:	d114      	bne.n	363e <__cvt+0x90>
    3614:	783b      	ldrb	r3, [r7, #0]
    3616:	2b30      	cmp	r3, #48	; 0x30
    3618:	d10c      	bne.n	3634 <__cvt+0x86>
    361a:	2200      	movs	r2, #0
    361c:	2300      	movs	r3, #0
    361e:	0020      	movs	r0, r4
    3620:	0029      	movs	r1, r5
    3622:	f002 fe21 	bl	6268 <__aeabi_dcmpeq>
    3626:	2800      	cmp	r0, #0
    3628:	d104      	bne.n	3634 <__cvt+0x86>
    362a:	2301      	movs	r3, #1
    362c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    362e:	1a9b      	subs	r3, r3, r2
    3630:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3632:	6013      	str	r3, [r2, #0]
    3634:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3636:	9a07      	ldr	r2, [sp, #28]
    3638:	681b      	ldr	r3, [r3, #0]
    363a:	18d3      	adds	r3, r2, r3
    363c:	9307      	str	r3, [sp, #28]
    363e:	2200      	movs	r2, #0
    3640:	2300      	movs	r3, #0
    3642:	0020      	movs	r0, r4
    3644:	0029      	movs	r1, r5
    3646:	f002 fe0f 	bl	6268 <__aeabi_dcmpeq>
    364a:	2230      	movs	r2, #48	; 0x30
    364c:	2800      	cmp	r0, #0
    364e:	d00d      	beq.n	366c <__cvt+0xbe>
    3650:	9b07      	ldr	r3, [sp, #28]
    3652:	9309      	str	r3, [sp, #36]	; 0x24
    3654:	0038      	movs	r0, r7
    3656:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3658:	9a15      	ldr	r2, [sp, #84]	; 0x54
    365a:	1bdb      	subs	r3, r3, r7
    365c:	6013      	str	r3, [r2, #0]
    365e:	b00b      	add	sp, #44	; 0x2c
    3660:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3662:	2300      	movs	r3, #0
    3664:	e7af      	b.n	35c6 <__cvt+0x18>
    3666:	1c59      	adds	r1, r3, #1
    3668:	9109      	str	r1, [sp, #36]	; 0x24
    366a:	701a      	strb	r2, [r3, #0]
    366c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    366e:	9907      	ldr	r1, [sp, #28]
    3670:	4299      	cmp	r1, r3
    3672:	d8f8      	bhi.n	3666 <__cvt+0xb8>
    3674:	e7ee      	b.n	3654 <__cvt+0xa6>

00003676 <__exponent>:
    3676:	b5f0      	push	{r4, r5, r6, r7, lr}
    3678:	232b      	movs	r3, #43	; 0x2b
    367a:	b085      	sub	sp, #20
    367c:	0007      	movs	r7, r0
    367e:	000c      	movs	r4, r1
    3680:	7002      	strb	r2, [r0, #0]
    3682:	1c86      	adds	r6, r0, #2
    3684:	2900      	cmp	r1, #0
    3686:	da01      	bge.n	368c <__exponent+0x16>
    3688:	232d      	movs	r3, #45	; 0x2d
    368a:	424c      	negs	r4, r1
    368c:	707b      	strb	r3, [r7, #1]
    368e:	2c09      	cmp	r4, #9
    3690:	dd23      	ble.n	36da <__exponent+0x64>
    3692:	ab02      	add	r3, sp, #8
    3694:	1ddd      	adds	r5, r3, #7
    3696:	1e6b      	subs	r3, r5, #1
    3698:	0020      	movs	r0, r4
    369a:	210a      	movs	r1, #10
    369c:	9301      	str	r3, [sp, #4]
    369e:	f002 fdcd 	bl	623c <__aeabi_idivmod>
    36a2:	1e6b      	subs	r3, r5, #1
    36a4:	3130      	adds	r1, #48	; 0x30
    36a6:	7019      	strb	r1, [r3, #0]
    36a8:	0020      	movs	r0, r4
    36aa:	210a      	movs	r1, #10
    36ac:	f002 fce0 	bl	6070 <__divsi3>
    36b0:	0004      	movs	r4, r0
    36b2:	2809      	cmp	r0, #9
    36b4:	dc0a      	bgt.n	36cc <__exponent+0x56>
    36b6:	3d02      	subs	r5, #2
    36b8:	3430      	adds	r4, #48	; 0x30
    36ba:	702c      	strb	r4, [r5, #0]
    36bc:	ab02      	add	r3, sp, #8
    36be:	3307      	adds	r3, #7
    36c0:	0030      	movs	r0, r6
    36c2:	42ab      	cmp	r3, r5
    36c4:	d804      	bhi.n	36d0 <__exponent+0x5a>
    36c6:	1bc0      	subs	r0, r0, r7
    36c8:	b005      	add	sp, #20
    36ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36cc:	9d01      	ldr	r5, [sp, #4]
    36ce:	e7e2      	b.n	3696 <__exponent+0x20>
    36d0:	782b      	ldrb	r3, [r5, #0]
    36d2:	3501      	adds	r5, #1
    36d4:	7033      	strb	r3, [r6, #0]
    36d6:	3601      	adds	r6, #1
    36d8:	e7f0      	b.n	36bc <__exponent+0x46>
    36da:	2330      	movs	r3, #48	; 0x30
    36dc:	18e4      	adds	r4, r4, r3
    36de:	7033      	strb	r3, [r6, #0]
    36e0:	1cb0      	adds	r0, r6, #2
    36e2:	7074      	strb	r4, [r6, #1]
    36e4:	e7ef      	b.n	36c6 <__exponent+0x50>
	...

000036e8 <_printf_float>:
    36e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    36ea:	b095      	sub	sp, #84	; 0x54
    36ec:	000c      	movs	r4, r1
    36ee:	920a      	str	r2, [sp, #40]	; 0x28
    36f0:	930b      	str	r3, [sp, #44]	; 0x2c
    36f2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    36f4:	9009      	str	r0, [sp, #36]	; 0x24
    36f6:	f001 fdd3 	bl	52a0 <_localeconv_r>
    36fa:	6803      	ldr	r3, [r0, #0]
    36fc:	0018      	movs	r0, r3
    36fe:	930d      	str	r3, [sp, #52]	; 0x34
    3700:	f000 fd00 	bl	4104 <strlen>
    3704:	2300      	movs	r3, #0
    3706:	9312      	str	r3, [sp, #72]	; 0x48
    3708:	6823      	ldr	r3, [r4, #0]
    370a:	900e      	str	r0, [sp, #56]	; 0x38
    370c:	930c      	str	r3, [sp, #48]	; 0x30
    370e:	990c      	ldr	r1, [sp, #48]	; 0x30
    3710:	7e27      	ldrb	r7, [r4, #24]
    3712:	682b      	ldr	r3, [r5, #0]
    3714:	2207      	movs	r2, #7
    3716:	05c9      	lsls	r1, r1, #23
    3718:	d547      	bpl.n	37aa <_printf_float+0xc2>
    371a:	189b      	adds	r3, r3, r2
    371c:	4393      	bics	r3, r2
    371e:	001a      	movs	r2, r3
    3720:	3208      	adds	r2, #8
    3722:	602a      	str	r2, [r5, #0]
    3724:	681a      	ldr	r2, [r3, #0]
    3726:	685b      	ldr	r3, [r3, #4]
    3728:	64a2      	str	r2, [r4, #72]	; 0x48
    372a:	64e3      	str	r3, [r4, #76]	; 0x4c
    372c:	2201      	movs	r2, #1
    372e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    3730:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    3732:	006b      	lsls	r3, r5, #1
    3734:	085b      	lsrs	r3, r3, #1
    3736:	930f      	str	r3, [sp, #60]	; 0x3c
    3738:	4252      	negs	r2, r2
    373a:	4ba7      	ldr	r3, [pc, #668]	; (39d8 <_printf_float+0x2f0>)
    373c:	0030      	movs	r0, r6
    373e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    3740:	f004 fff0 	bl	8724 <__aeabi_dcmpun>
    3744:	2800      	cmp	r0, #0
    3746:	d000      	beq.n	374a <_printf_float+0x62>
    3748:	e206      	b.n	3b58 <_printf_float+0x470>
    374a:	2201      	movs	r2, #1
    374c:	4ba2      	ldr	r3, [pc, #648]	; (39d8 <_printf_float+0x2f0>)
    374e:	4252      	negs	r2, r2
    3750:	0030      	movs	r0, r6
    3752:	990f      	ldr	r1, [sp, #60]	; 0x3c
    3754:	f002 fd98 	bl	6288 <__aeabi_dcmple>
    3758:	2800      	cmp	r0, #0
    375a:	d000      	beq.n	375e <_printf_float+0x76>
    375c:	e1fc      	b.n	3b58 <_printf_float+0x470>
    375e:	2200      	movs	r2, #0
    3760:	2300      	movs	r3, #0
    3762:	0030      	movs	r0, r6
    3764:	0029      	movs	r1, r5
    3766:	f002 fd85 	bl	6274 <__aeabi_dcmplt>
    376a:	2800      	cmp	r0, #0
    376c:	d003      	beq.n	3776 <_printf_float+0x8e>
    376e:	0023      	movs	r3, r4
    3770:	222d      	movs	r2, #45	; 0x2d
    3772:	3343      	adds	r3, #67	; 0x43
    3774:	701a      	strb	r2, [r3, #0]
    3776:	4d99      	ldr	r5, [pc, #612]	; (39dc <_printf_float+0x2f4>)
    3778:	2f47      	cmp	r7, #71	; 0x47
    377a:	d800      	bhi.n	377e <_printf_float+0x96>
    377c:	4d98      	ldr	r5, [pc, #608]	; (39e0 <_printf_float+0x2f8>)
    377e:	2303      	movs	r3, #3
    3780:	2600      	movs	r6, #0
    3782:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3784:	6123      	str	r3, [r4, #16]
    3786:	3301      	adds	r3, #1
    3788:	439a      	bics	r2, r3
    378a:	6022      	str	r2, [r4, #0]
    378c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    378e:	aa13      	add	r2, sp, #76	; 0x4c
    3790:	9300      	str	r3, [sp, #0]
    3792:	0021      	movs	r1, r4
    3794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3796:	9809      	ldr	r0, [sp, #36]	; 0x24
    3798:	f000 f9f2 	bl	3b80 <_printf_common>
    379c:	1c43      	adds	r3, r0, #1
    379e:	d000      	beq.n	37a2 <_printf_float+0xba>
    37a0:	e09c      	b.n	38dc <_printf_float+0x1f4>
    37a2:	2001      	movs	r0, #1
    37a4:	4240      	negs	r0, r0
    37a6:	b015      	add	sp, #84	; 0x54
    37a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37aa:	3307      	adds	r3, #7
    37ac:	e7b6      	b.n	371c <_printf_float+0x34>
    37ae:	2380      	movs	r3, #128	; 0x80
    37b0:	6862      	ldr	r2, [r4, #4]
    37b2:	00db      	lsls	r3, r3, #3
    37b4:	1c51      	adds	r1, r2, #1
    37b6:	d145      	bne.n	3844 <_printf_float+0x15c>
    37b8:	3207      	adds	r2, #7
    37ba:	6062      	str	r2, [r4, #4]
    37bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    37be:	2100      	movs	r1, #0
    37c0:	4313      	orrs	r3, r2
    37c2:	aa12      	add	r2, sp, #72	; 0x48
    37c4:	9205      	str	r2, [sp, #20]
    37c6:	aa11      	add	r2, sp, #68	; 0x44
    37c8:	9203      	str	r2, [sp, #12]
    37ca:	2223      	movs	r2, #35	; 0x23
    37cc:	6023      	str	r3, [r4, #0]
    37ce:	9106      	str	r1, [sp, #24]
    37d0:	9301      	str	r3, [sp, #4]
    37d2:	a908      	add	r1, sp, #32
    37d4:	6863      	ldr	r3, [r4, #4]
    37d6:	1852      	adds	r2, r2, r1
    37d8:	9202      	str	r2, [sp, #8]
    37da:	9300      	str	r3, [sp, #0]
    37dc:	0032      	movs	r2, r6
    37de:	002b      	movs	r3, r5
    37e0:	9704      	str	r7, [sp, #16]
    37e2:	9809      	ldr	r0, [sp, #36]	; 0x24
    37e4:	f7ff fee3 	bl	35ae <__cvt>
    37e8:	2320      	movs	r3, #32
    37ea:	003a      	movs	r2, r7
    37ec:	0005      	movs	r5, r0
    37ee:	439a      	bics	r2, r3
    37f0:	2a47      	cmp	r2, #71	; 0x47
    37f2:	d107      	bne.n	3804 <_printf_float+0x11c>
    37f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    37f6:	1cda      	adds	r2, r3, #3
    37f8:	db02      	blt.n	3800 <_printf_float+0x118>
    37fa:	6862      	ldr	r2, [r4, #4]
    37fc:	4293      	cmp	r3, r2
    37fe:	dd5b      	ble.n	38b8 <_printf_float+0x1d0>
    3800:	3f02      	subs	r7, #2
    3802:	b2ff      	uxtb	r7, r7
    3804:	9911      	ldr	r1, [sp, #68]	; 0x44
    3806:	2f65      	cmp	r7, #101	; 0x65
    3808:	d83b      	bhi.n	3882 <_printf_float+0x19a>
    380a:	0020      	movs	r0, r4
    380c:	3901      	subs	r1, #1
    380e:	003a      	movs	r2, r7
    3810:	3050      	adds	r0, #80	; 0x50
    3812:	9111      	str	r1, [sp, #68]	; 0x44
    3814:	f7ff ff2f 	bl	3676 <__exponent>
    3818:	9a12      	ldr	r2, [sp, #72]	; 0x48
    381a:	0006      	movs	r6, r0
    381c:	1883      	adds	r3, r0, r2
    381e:	6123      	str	r3, [r4, #16]
    3820:	2a01      	cmp	r2, #1
    3822:	dc02      	bgt.n	382a <_printf_float+0x142>
    3824:	6822      	ldr	r2, [r4, #0]
    3826:	07d2      	lsls	r2, r2, #31
    3828:	d501      	bpl.n	382e <_printf_float+0x146>
    382a:	3301      	adds	r3, #1
    382c:	6123      	str	r3, [r4, #16]
    382e:	2323      	movs	r3, #35	; 0x23
    3830:	aa08      	add	r2, sp, #32
    3832:	189b      	adds	r3, r3, r2
    3834:	781b      	ldrb	r3, [r3, #0]
    3836:	2b00      	cmp	r3, #0
    3838:	d0a8      	beq.n	378c <_printf_float+0xa4>
    383a:	0023      	movs	r3, r4
    383c:	222d      	movs	r2, #45	; 0x2d
    383e:	3343      	adds	r3, #67	; 0x43
    3840:	701a      	strb	r2, [r3, #0]
    3842:	e7a3      	b.n	378c <_printf_float+0xa4>
    3844:	2f67      	cmp	r7, #103	; 0x67
    3846:	d001      	beq.n	384c <_printf_float+0x164>
    3848:	2f47      	cmp	r7, #71	; 0x47
    384a:	d1b7      	bne.n	37bc <_printf_float+0xd4>
    384c:	2a00      	cmp	r2, #0
    384e:	d016      	beq.n	387e <_printf_float+0x196>
    3850:	990c      	ldr	r1, [sp, #48]	; 0x30
    3852:	a808      	add	r0, sp, #32
    3854:	430b      	orrs	r3, r1
    3856:	2100      	movs	r1, #0
    3858:	9106      	str	r1, [sp, #24]
    385a:	a912      	add	r1, sp, #72	; 0x48
    385c:	9105      	str	r1, [sp, #20]
    385e:	a911      	add	r1, sp, #68	; 0x44
    3860:	9103      	str	r1, [sp, #12]
    3862:	2123      	movs	r1, #35	; 0x23
    3864:	1809      	adds	r1, r1, r0
    3866:	6023      	str	r3, [r4, #0]
    3868:	9301      	str	r3, [sp, #4]
    386a:	9200      	str	r2, [sp, #0]
    386c:	002b      	movs	r3, r5
    386e:	9704      	str	r7, [sp, #16]
    3870:	9102      	str	r1, [sp, #8]
    3872:	0032      	movs	r2, r6
    3874:	9809      	ldr	r0, [sp, #36]	; 0x24
    3876:	f7ff fe9a 	bl	35ae <__cvt>
    387a:	0005      	movs	r5, r0
    387c:	e7ba      	b.n	37f4 <_printf_float+0x10c>
    387e:	2201      	movs	r2, #1
    3880:	e79b      	b.n	37ba <_printf_float+0xd2>
    3882:	2f66      	cmp	r7, #102	; 0x66
    3884:	d119      	bne.n	38ba <_printf_float+0x1d2>
    3886:	6863      	ldr	r3, [r4, #4]
    3888:	2900      	cmp	r1, #0
    388a:	dd0c      	ble.n	38a6 <_printf_float+0x1be>
    388c:	6121      	str	r1, [r4, #16]
    388e:	2b00      	cmp	r3, #0
    3890:	d102      	bne.n	3898 <_printf_float+0x1b0>
    3892:	6822      	ldr	r2, [r4, #0]
    3894:	07d2      	lsls	r2, r2, #31
    3896:	d502      	bpl.n	389e <_printf_float+0x1b6>
    3898:	3301      	adds	r3, #1
    389a:	185b      	adds	r3, r3, r1
    389c:	6123      	str	r3, [r4, #16]
    389e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    38a0:	2600      	movs	r6, #0
    38a2:	65a3      	str	r3, [r4, #88]	; 0x58
    38a4:	e7c3      	b.n	382e <_printf_float+0x146>
    38a6:	2b00      	cmp	r3, #0
    38a8:	d103      	bne.n	38b2 <_printf_float+0x1ca>
    38aa:	2201      	movs	r2, #1
    38ac:	6821      	ldr	r1, [r4, #0]
    38ae:	4211      	tst	r1, r2
    38b0:	d000      	beq.n	38b4 <_printf_float+0x1cc>
    38b2:	1c9a      	adds	r2, r3, #2
    38b4:	6122      	str	r2, [r4, #16]
    38b6:	e7f2      	b.n	389e <_printf_float+0x1b6>
    38b8:	2767      	movs	r7, #103	; 0x67
    38ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    38bc:	9812      	ldr	r0, [sp, #72]	; 0x48
    38be:	4283      	cmp	r3, r0
    38c0:	db05      	blt.n	38ce <_printf_float+0x1e6>
    38c2:	6822      	ldr	r2, [r4, #0]
    38c4:	6123      	str	r3, [r4, #16]
    38c6:	07d2      	lsls	r2, r2, #31
    38c8:	d5e9      	bpl.n	389e <_printf_float+0x1b6>
    38ca:	3301      	adds	r3, #1
    38cc:	e7e6      	b.n	389c <_printf_float+0x1b4>
    38ce:	2201      	movs	r2, #1
    38d0:	2b00      	cmp	r3, #0
    38d2:	dc01      	bgt.n	38d8 <_printf_float+0x1f0>
    38d4:	1892      	adds	r2, r2, r2
    38d6:	1ad2      	subs	r2, r2, r3
    38d8:	1812      	adds	r2, r2, r0
    38da:	e7eb      	b.n	38b4 <_printf_float+0x1cc>
    38dc:	6822      	ldr	r2, [r4, #0]
    38de:	0553      	lsls	r3, r2, #21
    38e0:	d408      	bmi.n	38f4 <_printf_float+0x20c>
    38e2:	6923      	ldr	r3, [r4, #16]
    38e4:	002a      	movs	r2, r5
    38e6:	990a      	ldr	r1, [sp, #40]	; 0x28
    38e8:	9809      	ldr	r0, [sp, #36]	; 0x24
    38ea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    38ec:	47a8      	blx	r5
    38ee:	1c43      	adds	r3, r0, #1
    38f0:	d129      	bne.n	3946 <_printf_float+0x25e>
    38f2:	e756      	b.n	37a2 <_printf_float+0xba>
    38f4:	2f65      	cmp	r7, #101	; 0x65
    38f6:	d800      	bhi.n	38fa <_printf_float+0x212>
    38f8:	e0dc      	b.n	3ab4 <_printf_float+0x3cc>
    38fa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    38fc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    38fe:	2200      	movs	r2, #0
    3900:	2300      	movs	r3, #0
    3902:	f002 fcb1 	bl	6268 <__aeabi_dcmpeq>
    3906:	2800      	cmp	r0, #0
    3908:	d035      	beq.n	3976 <_printf_float+0x28e>
    390a:	2301      	movs	r3, #1
    390c:	4a35      	ldr	r2, [pc, #212]	; (39e4 <_printf_float+0x2fc>)
    390e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3910:	9809      	ldr	r0, [sp, #36]	; 0x24
    3912:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3914:	47a8      	blx	r5
    3916:	1c43      	adds	r3, r0, #1
    3918:	d100      	bne.n	391c <_printf_float+0x234>
    391a:	e742      	b.n	37a2 <_printf_float+0xba>
    391c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    391e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3920:	4293      	cmp	r3, r2
    3922:	db02      	blt.n	392a <_printf_float+0x242>
    3924:	6823      	ldr	r3, [r4, #0]
    3926:	07db      	lsls	r3, r3, #31
    3928:	d50d      	bpl.n	3946 <_printf_float+0x25e>
    392a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    392c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    392e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3930:	990a      	ldr	r1, [sp, #40]	; 0x28
    3932:	9809      	ldr	r0, [sp, #36]	; 0x24
    3934:	47a8      	blx	r5
    3936:	2500      	movs	r5, #0
    3938:	1c43      	adds	r3, r0, #1
    393a:	d100      	bne.n	393e <_printf_float+0x256>
    393c:	e731      	b.n	37a2 <_printf_float+0xba>
    393e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3940:	3b01      	subs	r3, #1
    3942:	429d      	cmp	r5, r3
    3944:	db0b      	blt.n	395e <_printf_float+0x276>
    3946:	6823      	ldr	r3, [r4, #0]
    3948:	2500      	movs	r5, #0
    394a:	079b      	lsls	r3, r3, #30
    394c:	d500      	bpl.n	3950 <_printf_float+0x268>
    394e:	e0fd      	b.n	3b4c <_printf_float+0x464>
    3950:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3952:	68e0      	ldr	r0, [r4, #12]
    3954:	4298      	cmp	r0, r3
    3956:	db00      	blt.n	395a <_printf_float+0x272>
    3958:	e725      	b.n	37a6 <_printf_float+0xbe>
    395a:	0018      	movs	r0, r3
    395c:	e723      	b.n	37a6 <_printf_float+0xbe>
    395e:	0022      	movs	r2, r4
    3960:	2301      	movs	r3, #1
    3962:	321a      	adds	r2, #26
    3964:	990a      	ldr	r1, [sp, #40]	; 0x28
    3966:	9809      	ldr	r0, [sp, #36]	; 0x24
    3968:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    396a:	47b0      	blx	r6
    396c:	1c43      	adds	r3, r0, #1
    396e:	d100      	bne.n	3972 <_printf_float+0x28a>
    3970:	e717      	b.n	37a2 <_printf_float+0xba>
    3972:	3501      	adds	r5, #1
    3974:	e7e3      	b.n	393e <_printf_float+0x256>
    3976:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3978:	2b00      	cmp	r3, #0
    397a:	dc35      	bgt.n	39e8 <_printf_float+0x300>
    397c:	2301      	movs	r3, #1
    397e:	4a19      	ldr	r2, [pc, #100]	; (39e4 <_printf_float+0x2fc>)
    3980:	990a      	ldr	r1, [sp, #40]	; 0x28
    3982:	9809      	ldr	r0, [sp, #36]	; 0x24
    3984:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3986:	47b0      	blx	r6
    3988:	1c43      	adds	r3, r0, #1
    398a:	d100      	bne.n	398e <_printf_float+0x2a6>
    398c:	e709      	b.n	37a2 <_printf_float+0xba>
    398e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3990:	2b00      	cmp	r3, #0
    3992:	d105      	bne.n	39a0 <_printf_float+0x2b8>
    3994:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3996:	2b00      	cmp	r3, #0
    3998:	d102      	bne.n	39a0 <_printf_float+0x2b8>
    399a:	6823      	ldr	r3, [r4, #0]
    399c:	07db      	lsls	r3, r3, #31
    399e:	d5d2      	bpl.n	3946 <_printf_float+0x25e>
    39a0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    39a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    39a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    39a6:	990a      	ldr	r1, [sp, #40]	; 0x28
    39a8:	9809      	ldr	r0, [sp, #36]	; 0x24
    39aa:	47b0      	blx	r6
    39ac:	2600      	movs	r6, #0
    39ae:	1c43      	adds	r3, r0, #1
    39b0:	d100      	bne.n	39b4 <_printf_float+0x2cc>
    39b2:	e6f6      	b.n	37a2 <_printf_float+0xba>
    39b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    39b6:	425b      	negs	r3, r3
    39b8:	429e      	cmp	r6, r3
    39ba:	db01      	blt.n	39c0 <_printf_float+0x2d8>
    39bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    39be:	e791      	b.n	38e4 <_printf_float+0x1fc>
    39c0:	0022      	movs	r2, r4
    39c2:	2301      	movs	r3, #1
    39c4:	321a      	adds	r2, #26
    39c6:	990a      	ldr	r1, [sp, #40]	; 0x28
    39c8:	9809      	ldr	r0, [sp, #36]	; 0x24
    39ca:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    39cc:	47b8      	blx	r7
    39ce:	1c43      	adds	r3, r0, #1
    39d0:	d100      	bne.n	39d4 <_printf_float+0x2ec>
    39d2:	e6e6      	b.n	37a2 <_printf_float+0xba>
    39d4:	3601      	adds	r6, #1
    39d6:	e7ed      	b.n	39b4 <_printf_float+0x2cc>
    39d8:	7fefffff 	.word	0x7fefffff
    39dc:	00008ba4 	.word	0x00008ba4
    39e0:	00008ba0 	.word	0x00008ba0
    39e4:	00008bb0 	.word	0x00008bb0
    39e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
    39ea:	9e12      	ldr	r6, [sp, #72]	; 0x48
    39ec:	429e      	cmp	r6, r3
    39ee:	dd00      	ble.n	39f2 <_printf_float+0x30a>
    39f0:	001e      	movs	r6, r3
    39f2:	2e00      	cmp	r6, #0
    39f4:	dc35      	bgt.n	3a62 <_printf_float+0x37a>
    39f6:	2300      	movs	r3, #0
    39f8:	930c      	str	r3, [sp, #48]	; 0x30
    39fa:	43f3      	mvns	r3, r6
    39fc:	17db      	asrs	r3, r3, #31
    39fe:	930f      	str	r3, [sp, #60]	; 0x3c
    3a00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3a02:	6da7      	ldr	r7, [r4, #88]	; 0x58
    3a04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3a06:	4033      	ands	r3, r6
    3a08:	1afb      	subs	r3, r7, r3
    3a0a:	429a      	cmp	r2, r3
    3a0c:	db32      	blt.n	3a74 <_printf_float+0x38c>
    3a0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3a10:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3a12:	4293      	cmp	r3, r2
    3a14:	db3c      	blt.n	3a90 <_printf_float+0x3a8>
    3a16:	6823      	ldr	r3, [r4, #0]
    3a18:	07db      	lsls	r3, r3, #31
    3a1a:	d439      	bmi.n	3a90 <_printf_float+0x3a8>
    3a1c:	9e12      	ldr	r6, [sp, #72]	; 0x48
    3a1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3a20:	1bf3      	subs	r3, r6, r7
    3a22:	1ab6      	subs	r6, r6, r2
    3a24:	429e      	cmp	r6, r3
    3a26:	dd00      	ble.n	3a2a <_printf_float+0x342>
    3a28:	001e      	movs	r6, r3
    3a2a:	2e00      	cmp	r6, #0
    3a2c:	dc39      	bgt.n	3aa2 <_printf_float+0x3ba>
    3a2e:	43f7      	mvns	r7, r6
    3a30:	2500      	movs	r5, #0
    3a32:	17fb      	asrs	r3, r7, #31
    3a34:	930c      	str	r3, [sp, #48]	; 0x30
    3a36:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3a38:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3a3a:	990c      	ldr	r1, [sp, #48]	; 0x30
    3a3c:	1a9b      	subs	r3, r3, r2
    3a3e:	0032      	movs	r2, r6
    3a40:	400a      	ands	r2, r1
    3a42:	1a9b      	subs	r3, r3, r2
    3a44:	429d      	cmp	r5, r3
    3a46:	db00      	blt.n	3a4a <_printf_float+0x362>
    3a48:	e77d      	b.n	3946 <_printf_float+0x25e>
    3a4a:	0022      	movs	r2, r4
    3a4c:	2301      	movs	r3, #1
    3a4e:	321a      	adds	r2, #26
    3a50:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a52:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a54:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3a56:	47b8      	blx	r7
    3a58:	1c43      	adds	r3, r0, #1
    3a5a:	d100      	bne.n	3a5e <_printf_float+0x376>
    3a5c:	e6a1      	b.n	37a2 <_printf_float+0xba>
    3a5e:	3501      	adds	r5, #1
    3a60:	e7e9      	b.n	3a36 <_printf_float+0x34e>
    3a62:	0033      	movs	r3, r6
    3a64:	002a      	movs	r2, r5
    3a66:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a68:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a6a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3a6c:	47b8      	blx	r7
    3a6e:	1c43      	adds	r3, r0, #1
    3a70:	d1c1      	bne.n	39f6 <_printf_float+0x30e>
    3a72:	e696      	b.n	37a2 <_printf_float+0xba>
    3a74:	0022      	movs	r2, r4
    3a76:	2301      	movs	r3, #1
    3a78:	321a      	adds	r2, #26
    3a7a:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a7c:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a7e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3a80:	47b8      	blx	r7
    3a82:	1c43      	adds	r3, r0, #1
    3a84:	d100      	bne.n	3a88 <_printf_float+0x3a0>
    3a86:	e68c      	b.n	37a2 <_printf_float+0xba>
    3a88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3a8a:	3301      	adds	r3, #1
    3a8c:	930c      	str	r3, [sp, #48]	; 0x30
    3a8e:	e7b7      	b.n	3a00 <_printf_float+0x318>
    3a90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3a92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3a94:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a96:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a98:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3a9a:	47b0      	blx	r6
    3a9c:	1c43      	adds	r3, r0, #1
    3a9e:	d1bd      	bne.n	3a1c <_printf_float+0x334>
    3aa0:	e67f      	b.n	37a2 <_printf_float+0xba>
    3aa2:	19ea      	adds	r2, r5, r7
    3aa4:	0033      	movs	r3, r6
    3aa6:	990a      	ldr	r1, [sp, #40]	; 0x28
    3aa8:	9809      	ldr	r0, [sp, #36]	; 0x24
    3aaa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3aac:	47a8      	blx	r5
    3aae:	1c43      	adds	r3, r0, #1
    3ab0:	d1bd      	bne.n	3a2e <_printf_float+0x346>
    3ab2:	e676      	b.n	37a2 <_printf_float+0xba>
    3ab4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3ab6:	2b01      	cmp	r3, #1
    3ab8:	dc02      	bgt.n	3ac0 <_printf_float+0x3d8>
    3aba:	2301      	movs	r3, #1
    3abc:	421a      	tst	r2, r3
    3abe:	d038      	beq.n	3b32 <_printf_float+0x44a>
    3ac0:	2301      	movs	r3, #1
    3ac2:	002a      	movs	r2, r5
    3ac4:	990a      	ldr	r1, [sp, #40]	; 0x28
    3ac6:	9809      	ldr	r0, [sp, #36]	; 0x24
    3ac8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3aca:	47b8      	blx	r7
    3acc:	1c43      	adds	r3, r0, #1
    3ace:	d100      	bne.n	3ad2 <_printf_float+0x3ea>
    3ad0:	e667      	b.n	37a2 <_printf_float+0xba>
    3ad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3ad4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3ad6:	990a      	ldr	r1, [sp, #40]	; 0x28
    3ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
    3ada:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3adc:	47b8      	blx	r7
    3ade:	1c43      	adds	r3, r0, #1
    3ae0:	d100      	bne.n	3ae4 <_printf_float+0x3fc>
    3ae2:	e65e      	b.n	37a2 <_printf_float+0xba>
    3ae4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    3ae6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    3ae8:	2200      	movs	r2, #0
    3aea:	2300      	movs	r3, #0
    3aec:	f002 fbbc 	bl	6268 <__aeabi_dcmpeq>
    3af0:	2800      	cmp	r0, #0
    3af2:	d008      	beq.n	3b06 <_printf_float+0x41e>
    3af4:	2500      	movs	r5, #0
    3af6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3af8:	3b01      	subs	r3, #1
    3afa:	429d      	cmp	r5, r3
    3afc:	db0d      	blt.n	3b1a <_printf_float+0x432>
    3afe:	0022      	movs	r2, r4
    3b00:	0033      	movs	r3, r6
    3b02:	3250      	adds	r2, #80	; 0x50
    3b04:	e6ef      	b.n	38e6 <_printf_float+0x1fe>
    3b06:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3b08:	1c6a      	adds	r2, r5, #1
    3b0a:	3b01      	subs	r3, #1
    3b0c:	990a      	ldr	r1, [sp, #40]	; 0x28
    3b0e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3b10:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3b12:	47a8      	blx	r5
    3b14:	1c43      	adds	r3, r0, #1
    3b16:	d1f2      	bne.n	3afe <_printf_float+0x416>
    3b18:	e643      	b.n	37a2 <_printf_float+0xba>
    3b1a:	0022      	movs	r2, r4
    3b1c:	2301      	movs	r3, #1
    3b1e:	321a      	adds	r2, #26
    3b20:	990a      	ldr	r1, [sp, #40]	; 0x28
    3b22:	9809      	ldr	r0, [sp, #36]	; 0x24
    3b24:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3b26:	47b8      	blx	r7
    3b28:	1c43      	adds	r3, r0, #1
    3b2a:	d100      	bne.n	3b2e <_printf_float+0x446>
    3b2c:	e639      	b.n	37a2 <_printf_float+0xba>
    3b2e:	3501      	adds	r5, #1
    3b30:	e7e1      	b.n	3af6 <_printf_float+0x40e>
    3b32:	002a      	movs	r2, r5
    3b34:	e7ea      	b.n	3b0c <_printf_float+0x424>
    3b36:	0022      	movs	r2, r4
    3b38:	2301      	movs	r3, #1
    3b3a:	3219      	adds	r2, #25
    3b3c:	990a      	ldr	r1, [sp, #40]	; 0x28
    3b3e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3b40:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3b42:	47b0      	blx	r6
    3b44:	1c43      	adds	r3, r0, #1
    3b46:	d100      	bne.n	3b4a <_printf_float+0x462>
    3b48:	e62b      	b.n	37a2 <_printf_float+0xba>
    3b4a:	3501      	adds	r5, #1
    3b4c:	68e3      	ldr	r3, [r4, #12]
    3b4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3b50:	1a9b      	subs	r3, r3, r2
    3b52:	429d      	cmp	r5, r3
    3b54:	dbef      	blt.n	3b36 <_printf_float+0x44e>
    3b56:	e6fb      	b.n	3950 <_printf_float+0x268>
    3b58:	0032      	movs	r2, r6
    3b5a:	002b      	movs	r3, r5
    3b5c:	0030      	movs	r0, r6
    3b5e:	0029      	movs	r1, r5
    3b60:	f004 fde0 	bl	8724 <__aeabi_dcmpun>
    3b64:	2800      	cmp	r0, #0
    3b66:	d100      	bne.n	3b6a <_printf_float+0x482>
    3b68:	e621      	b.n	37ae <_printf_float+0xc6>
    3b6a:	4d03      	ldr	r5, [pc, #12]	; (3b78 <_printf_float+0x490>)
    3b6c:	2f47      	cmp	r7, #71	; 0x47
    3b6e:	d900      	bls.n	3b72 <_printf_float+0x48a>
    3b70:	e605      	b.n	377e <_printf_float+0x96>
    3b72:	4d02      	ldr	r5, [pc, #8]	; (3b7c <_printf_float+0x494>)
    3b74:	e603      	b.n	377e <_printf_float+0x96>
    3b76:	46c0      	nop			; (mov r8, r8)
    3b78:	00008bac 	.word	0x00008bac
    3b7c:	00008ba8 	.word	0x00008ba8

00003b80 <_printf_common>:
    3b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3b82:	0015      	movs	r5, r2
    3b84:	9301      	str	r3, [sp, #4]
    3b86:	688a      	ldr	r2, [r1, #8]
    3b88:	690b      	ldr	r3, [r1, #16]
    3b8a:	9000      	str	r0, [sp, #0]
    3b8c:	000c      	movs	r4, r1
    3b8e:	4293      	cmp	r3, r2
    3b90:	da00      	bge.n	3b94 <_printf_common+0x14>
    3b92:	0013      	movs	r3, r2
    3b94:	0022      	movs	r2, r4
    3b96:	602b      	str	r3, [r5, #0]
    3b98:	3243      	adds	r2, #67	; 0x43
    3b9a:	7812      	ldrb	r2, [r2, #0]
    3b9c:	2a00      	cmp	r2, #0
    3b9e:	d001      	beq.n	3ba4 <_printf_common+0x24>
    3ba0:	3301      	adds	r3, #1
    3ba2:	602b      	str	r3, [r5, #0]
    3ba4:	6823      	ldr	r3, [r4, #0]
    3ba6:	069b      	lsls	r3, r3, #26
    3ba8:	d502      	bpl.n	3bb0 <_printf_common+0x30>
    3baa:	682b      	ldr	r3, [r5, #0]
    3bac:	3302      	adds	r3, #2
    3bae:	602b      	str	r3, [r5, #0]
    3bb0:	2706      	movs	r7, #6
    3bb2:	6823      	ldr	r3, [r4, #0]
    3bb4:	401f      	ands	r7, r3
    3bb6:	d027      	beq.n	3c08 <_printf_common+0x88>
    3bb8:	0023      	movs	r3, r4
    3bba:	3343      	adds	r3, #67	; 0x43
    3bbc:	781b      	ldrb	r3, [r3, #0]
    3bbe:	1e5a      	subs	r2, r3, #1
    3bc0:	4193      	sbcs	r3, r2
    3bc2:	6822      	ldr	r2, [r4, #0]
    3bc4:	0692      	lsls	r2, r2, #26
    3bc6:	d430      	bmi.n	3c2a <_printf_common+0xaa>
    3bc8:	0022      	movs	r2, r4
    3bca:	9901      	ldr	r1, [sp, #4]
    3bcc:	3243      	adds	r2, #67	; 0x43
    3bce:	9800      	ldr	r0, [sp, #0]
    3bd0:	9e08      	ldr	r6, [sp, #32]
    3bd2:	47b0      	blx	r6
    3bd4:	1c43      	adds	r3, r0, #1
    3bd6:	d025      	beq.n	3c24 <_printf_common+0xa4>
    3bd8:	2306      	movs	r3, #6
    3bda:	6820      	ldr	r0, [r4, #0]
    3bdc:	682a      	ldr	r2, [r5, #0]
    3bde:	68e1      	ldr	r1, [r4, #12]
    3be0:	4003      	ands	r3, r0
    3be2:	2500      	movs	r5, #0
    3be4:	2b04      	cmp	r3, #4
    3be6:	d103      	bne.n	3bf0 <_printf_common+0x70>
    3be8:	1a8d      	subs	r5, r1, r2
    3bea:	43eb      	mvns	r3, r5
    3bec:	17db      	asrs	r3, r3, #31
    3bee:	401d      	ands	r5, r3
    3bf0:	68a3      	ldr	r3, [r4, #8]
    3bf2:	6922      	ldr	r2, [r4, #16]
    3bf4:	4293      	cmp	r3, r2
    3bf6:	dd01      	ble.n	3bfc <_printf_common+0x7c>
    3bf8:	1a9b      	subs	r3, r3, r2
    3bfa:	18ed      	adds	r5, r5, r3
    3bfc:	2700      	movs	r7, #0
    3bfe:	42bd      	cmp	r5, r7
    3c00:	d120      	bne.n	3c44 <_printf_common+0xc4>
    3c02:	2000      	movs	r0, #0
    3c04:	e010      	b.n	3c28 <_printf_common+0xa8>
    3c06:	3701      	adds	r7, #1
    3c08:	68e3      	ldr	r3, [r4, #12]
    3c0a:	682a      	ldr	r2, [r5, #0]
    3c0c:	1a9b      	subs	r3, r3, r2
    3c0e:	429f      	cmp	r7, r3
    3c10:	dad2      	bge.n	3bb8 <_printf_common+0x38>
    3c12:	0022      	movs	r2, r4
    3c14:	2301      	movs	r3, #1
    3c16:	3219      	adds	r2, #25
    3c18:	9901      	ldr	r1, [sp, #4]
    3c1a:	9800      	ldr	r0, [sp, #0]
    3c1c:	9e08      	ldr	r6, [sp, #32]
    3c1e:	47b0      	blx	r6
    3c20:	1c43      	adds	r3, r0, #1
    3c22:	d1f0      	bne.n	3c06 <_printf_common+0x86>
    3c24:	2001      	movs	r0, #1
    3c26:	4240      	negs	r0, r0
    3c28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3c2a:	2030      	movs	r0, #48	; 0x30
    3c2c:	18e1      	adds	r1, r4, r3
    3c2e:	3143      	adds	r1, #67	; 0x43
    3c30:	7008      	strb	r0, [r1, #0]
    3c32:	0021      	movs	r1, r4
    3c34:	1c5a      	adds	r2, r3, #1
    3c36:	3145      	adds	r1, #69	; 0x45
    3c38:	7809      	ldrb	r1, [r1, #0]
    3c3a:	18a2      	adds	r2, r4, r2
    3c3c:	3243      	adds	r2, #67	; 0x43
    3c3e:	3302      	adds	r3, #2
    3c40:	7011      	strb	r1, [r2, #0]
    3c42:	e7c1      	b.n	3bc8 <_printf_common+0x48>
    3c44:	0022      	movs	r2, r4
    3c46:	2301      	movs	r3, #1
    3c48:	321a      	adds	r2, #26
    3c4a:	9901      	ldr	r1, [sp, #4]
    3c4c:	9800      	ldr	r0, [sp, #0]
    3c4e:	9e08      	ldr	r6, [sp, #32]
    3c50:	47b0      	blx	r6
    3c52:	1c43      	adds	r3, r0, #1
    3c54:	d0e6      	beq.n	3c24 <_printf_common+0xa4>
    3c56:	3701      	adds	r7, #1
    3c58:	e7d1      	b.n	3bfe <_printf_common+0x7e>
	...

00003c5c <_printf_i>:
    3c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c5e:	b08b      	sub	sp, #44	; 0x2c
    3c60:	9206      	str	r2, [sp, #24]
    3c62:	000a      	movs	r2, r1
    3c64:	3243      	adds	r2, #67	; 0x43
    3c66:	9307      	str	r3, [sp, #28]
    3c68:	9005      	str	r0, [sp, #20]
    3c6a:	9204      	str	r2, [sp, #16]
    3c6c:	7e0a      	ldrb	r2, [r1, #24]
    3c6e:	000c      	movs	r4, r1
    3c70:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3c72:	2a6e      	cmp	r2, #110	; 0x6e
    3c74:	d100      	bne.n	3c78 <_printf_i+0x1c>
    3c76:	e08f      	b.n	3d98 <_printf_i+0x13c>
    3c78:	d817      	bhi.n	3caa <_printf_i+0x4e>
    3c7a:	2a63      	cmp	r2, #99	; 0x63
    3c7c:	d02c      	beq.n	3cd8 <_printf_i+0x7c>
    3c7e:	d808      	bhi.n	3c92 <_printf_i+0x36>
    3c80:	2a00      	cmp	r2, #0
    3c82:	d100      	bne.n	3c86 <_printf_i+0x2a>
    3c84:	e099      	b.n	3dba <_printf_i+0x15e>
    3c86:	2a58      	cmp	r2, #88	; 0x58
    3c88:	d054      	beq.n	3d34 <_printf_i+0xd8>
    3c8a:	0026      	movs	r6, r4
    3c8c:	3642      	adds	r6, #66	; 0x42
    3c8e:	7032      	strb	r2, [r6, #0]
    3c90:	e029      	b.n	3ce6 <_printf_i+0x8a>
    3c92:	2a64      	cmp	r2, #100	; 0x64
    3c94:	d001      	beq.n	3c9a <_printf_i+0x3e>
    3c96:	2a69      	cmp	r2, #105	; 0x69
    3c98:	d1f7      	bne.n	3c8a <_printf_i+0x2e>
    3c9a:	6821      	ldr	r1, [r4, #0]
    3c9c:	681a      	ldr	r2, [r3, #0]
    3c9e:	0608      	lsls	r0, r1, #24
    3ca0:	d523      	bpl.n	3cea <_printf_i+0x8e>
    3ca2:	1d11      	adds	r1, r2, #4
    3ca4:	6019      	str	r1, [r3, #0]
    3ca6:	6815      	ldr	r5, [r2, #0]
    3ca8:	e025      	b.n	3cf6 <_printf_i+0x9a>
    3caa:	2a73      	cmp	r2, #115	; 0x73
    3cac:	d100      	bne.n	3cb0 <_printf_i+0x54>
    3cae:	e088      	b.n	3dc2 <_printf_i+0x166>
    3cb0:	d808      	bhi.n	3cc4 <_printf_i+0x68>
    3cb2:	2a6f      	cmp	r2, #111	; 0x6f
    3cb4:	d029      	beq.n	3d0a <_printf_i+0xae>
    3cb6:	2a70      	cmp	r2, #112	; 0x70
    3cb8:	d1e7      	bne.n	3c8a <_printf_i+0x2e>
    3cba:	2220      	movs	r2, #32
    3cbc:	6809      	ldr	r1, [r1, #0]
    3cbe:	430a      	orrs	r2, r1
    3cc0:	6022      	str	r2, [r4, #0]
    3cc2:	e003      	b.n	3ccc <_printf_i+0x70>
    3cc4:	2a75      	cmp	r2, #117	; 0x75
    3cc6:	d020      	beq.n	3d0a <_printf_i+0xae>
    3cc8:	2a78      	cmp	r2, #120	; 0x78
    3cca:	d1de      	bne.n	3c8a <_printf_i+0x2e>
    3ccc:	0022      	movs	r2, r4
    3cce:	2178      	movs	r1, #120	; 0x78
    3cd0:	3245      	adds	r2, #69	; 0x45
    3cd2:	7011      	strb	r1, [r2, #0]
    3cd4:	4a6c      	ldr	r2, [pc, #432]	; (3e88 <_printf_i+0x22c>)
    3cd6:	e030      	b.n	3d3a <_printf_i+0xde>
    3cd8:	000e      	movs	r6, r1
    3cda:	681a      	ldr	r2, [r3, #0]
    3cdc:	3642      	adds	r6, #66	; 0x42
    3cde:	1d11      	adds	r1, r2, #4
    3ce0:	6019      	str	r1, [r3, #0]
    3ce2:	6813      	ldr	r3, [r2, #0]
    3ce4:	7033      	strb	r3, [r6, #0]
    3ce6:	2301      	movs	r3, #1
    3ce8:	e079      	b.n	3dde <_printf_i+0x182>
    3cea:	0649      	lsls	r1, r1, #25
    3cec:	d5d9      	bpl.n	3ca2 <_printf_i+0x46>
    3cee:	1d11      	adds	r1, r2, #4
    3cf0:	6019      	str	r1, [r3, #0]
    3cf2:	2300      	movs	r3, #0
    3cf4:	5ed5      	ldrsh	r5, [r2, r3]
    3cf6:	2d00      	cmp	r5, #0
    3cf8:	da03      	bge.n	3d02 <_printf_i+0xa6>
    3cfa:	232d      	movs	r3, #45	; 0x2d
    3cfc:	9a04      	ldr	r2, [sp, #16]
    3cfe:	426d      	negs	r5, r5
    3d00:	7013      	strb	r3, [r2, #0]
    3d02:	4b62      	ldr	r3, [pc, #392]	; (3e8c <_printf_i+0x230>)
    3d04:	270a      	movs	r7, #10
    3d06:	9303      	str	r3, [sp, #12]
    3d08:	e02f      	b.n	3d6a <_printf_i+0x10e>
    3d0a:	6820      	ldr	r0, [r4, #0]
    3d0c:	6819      	ldr	r1, [r3, #0]
    3d0e:	0605      	lsls	r5, r0, #24
    3d10:	d503      	bpl.n	3d1a <_printf_i+0xbe>
    3d12:	1d08      	adds	r0, r1, #4
    3d14:	6018      	str	r0, [r3, #0]
    3d16:	680d      	ldr	r5, [r1, #0]
    3d18:	e005      	b.n	3d26 <_printf_i+0xca>
    3d1a:	0640      	lsls	r0, r0, #25
    3d1c:	d5f9      	bpl.n	3d12 <_printf_i+0xb6>
    3d1e:	680d      	ldr	r5, [r1, #0]
    3d20:	1d08      	adds	r0, r1, #4
    3d22:	6018      	str	r0, [r3, #0]
    3d24:	b2ad      	uxth	r5, r5
    3d26:	4b59      	ldr	r3, [pc, #356]	; (3e8c <_printf_i+0x230>)
    3d28:	2708      	movs	r7, #8
    3d2a:	9303      	str	r3, [sp, #12]
    3d2c:	2a6f      	cmp	r2, #111	; 0x6f
    3d2e:	d018      	beq.n	3d62 <_printf_i+0x106>
    3d30:	270a      	movs	r7, #10
    3d32:	e016      	b.n	3d62 <_printf_i+0x106>
    3d34:	3145      	adds	r1, #69	; 0x45
    3d36:	700a      	strb	r2, [r1, #0]
    3d38:	4a54      	ldr	r2, [pc, #336]	; (3e8c <_printf_i+0x230>)
    3d3a:	9203      	str	r2, [sp, #12]
    3d3c:	681a      	ldr	r2, [r3, #0]
    3d3e:	6821      	ldr	r1, [r4, #0]
    3d40:	1d10      	adds	r0, r2, #4
    3d42:	6018      	str	r0, [r3, #0]
    3d44:	6815      	ldr	r5, [r2, #0]
    3d46:	0608      	lsls	r0, r1, #24
    3d48:	d522      	bpl.n	3d90 <_printf_i+0x134>
    3d4a:	07cb      	lsls	r3, r1, #31
    3d4c:	d502      	bpl.n	3d54 <_printf_i+0xf8>
    3d4e:	2320      	movs	r3, #32
    3d50:	4319      	orrs	r1, r3
    3d52:	6021      	str	r1, [r4, #0]
    3d54:	2710      	movs	r7, #16
    3d56:	2d00      	cmp	r5, #0
    3d58:	d103      	bne.n	3d62 <_printf_i+0x106>
    3d5a:	2320      	movs	r3, #32
    3d5c:	6822      	ldr	r2, [r4, #0]
    3d5e:	439a      	bics	r2, r3
    3d60:	6022      	str	r2, [r4, #0]
    3d62:	0023      	movs	r3, r4
    3d64:	2200      	movs	r2, #0
    3d66:	3343      	adds	r3, #67	; 0x43
    3d68:	701a      	strb	r2, [r3, #0]
    3d6a:	6863      	ldr	r3, [r4, #4]
    3d6c:	60a3      	str	r3, [r4, #8]
    3d6e:	2b00      	cmp	r3, #0
    3d70:	db5c      	blt.n	3e2c <_printf_i+0x1d0>
    3d72:	2204      	movs	r2, #4
    3d74:	6821      	ldr	r1, [r4, #0]
    3d76:	4391      	bics	r1, r2
    3d78:	6021      	str	r1, [r4, #0]
    3d7a:	2d00      	cmp	r5, #0
    3d7c:	d158      	bne.n	3e30 <_printf_i+0x1d4>
    3d7e:	9e04      	ldr	r6, [sp, #16]
    3d80:	2b00      	cmp	r3, #0
    3d82:	d064      	beq.n	3e4e <_printf_i+0x1f2>
    3d84:	0026      	movs	r6, r4
    3d86:	9b03      	ldr	r3, [sp, #12]
    3d88:	3642      	adds	r6, #66	; 0x42
    3d8a:	781b      	ldrb	r3, [r3, #0]
    3d8c:	7033      	strb	r3, [r6, #0]
    3d8e:	e05e      	b.n	3e4e <_printf_i+0x1f2>
    3d90:	0648      	lsls	r0, r1, #25
    3d92:	d5da      	bpl.n	3d4a <_printf_i+0xee>
    3d94:	b2ad      	uxth	r5, r5
    3d96:	e7d8      	b.n	3d4a <_printf_i+0xee>
    3d98:	6809      	ldr	r1, [r1, #0]
    3d9a:	681a      	ldr	r2, [r3, #0]
    3d9c:	0608      	lsls	r0, r1, #24
    3d9e:	d505      	bpl.n	3dac <_printf_i+0x150>
    3da0:	1d11      	adds	r1, r2, #4
    3da2:	6019      	str	r1, [r3, #0]
    3da4:	6813      	ldr	r3, [r2, #0]
    3da6:	6962      	ldr	r2, [r4, #20]
    3da8:	601a      	str	r2, [r3, #0]
    3daa:	e006      	b.n	3dba <_printf_i+0x15e>
    3dac:	0649      	lsls	r1, r1, #25
    3dae:	d5f7      	bpl.n	3da0 <_printf_i+0x144>
    3db0:	1d11      	adds	r1, r2, #4
    3db2:	6019      	str	r1, [r3, #0]
    3db4:	6813      	ldr	r3, [r2, #0]
    3db6:	8aa2      	ldrh	r2, [r4, #20]
    3db8:	801a      	strh	r2, [r3, #0]
    3dba:	2300      	movs	r3, #0
    3dbc:	9e04      	ldr	r6, [sp, #16]
    3dbe:	6123      	str	r3, [r4, #16]
    3dc0:	e054      	b.n	3e6c <_printf_i+0x210>
    3dc2:	681a      	ldr	r2, [r3, #0]
    3dc4:	1d11      	adds	r1, r2, #4
    3dc6:	6019      	str	r1, [r3, #0]
    3dc8:	6816      	ldr	r6, [r2, #0]
    3dca:	2100      	movs	r1, #0
    3dcc:	6862      	ldr	r2, [r4, #4]
    3dce:	0030      	movs	r0, r6
    3dd0:	f001 fae2 	bl	5398 <memchr>
    3dd4:	2800      	cmp	r0, #0
    3dd6:	d001      	beq.n	3ddc <_printf_i+0x180>
    3dd8:	1b80      	subs	r0, r0, r6
    3dda:	6060      	str	r0, [r4, #4]
    3ddc:	6863      	ldr	r3, [r4, #4]
    3dde:	6123      	str	r3, [r4, #16]
    3de0:	2300      	movs	r3, #0
    3de2:	9a04      	ldr	r2, [sp, #16]
    3de4:	7013      	strb	r3, [r2, #0]
    3de6:	e041      	b.n	3e6c <_printf_i+0x210>
    3de8:	6923      	ldr	r3, [r4, #16]
    3dea:	0032      	movs	r2, r6
    3dec:	9906      	ldr	r1, [sp, #24]
    3dee:	9805      	ldr	r0, [sp, #20]
    3df0:	9d07      	ldr	r5, [sp, #28]
    3df2:	47a8      	blx	r5
    3df4:	1c43      	adds	r3, r0, #1
    3df6:	d043      	beq.n	3e80 <_printf_i+0x224>
    3df8:	6823      	ldr	r3, [r4, #0]
    3dfa:	2500      	movs	r5, #0
    3dfc:	079b      	lsls	r3, r3, #30
    3dfe:	d40f      	bmi.n	3e20 <_printf_i+0x1c4>
    3e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3e02:	68e0      	ldr	r0, [r4, #12]
    3e04:	4298      	cmp	r0, r3
    3e06:	da3d      	bge.n	3e84 <_printf_i+0x228>
    3e08:	0018      	movs	r0, r3
    3e0a:	e03b      	b.n	3e84 <_printf_i+0x228>
    3e0c:	0022      	movs	r2, r4
    3e0e:	2301      	movs	r3, #1
    3e10:	3219      	adds	r2, #25
    3e12:	9906      	ldr	r1, [sp, #24]
    3e14:	9805      	ldr	r0, [sp, #20]
    3e16:	9e07      	ldr	r6, [sp, #28]
    3e18:	47b0      	blx	r6
    3e1a:	1c43      	adds	r3, r0, #1
    3e1c:	d030      	beq.n	3e80 <_printf_i+0x224>
    3e1e:	3501      	adds	r5, #1
    3e20:	68e3      	ldr	r3, [r4, #12]
    3e22:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3e24:	1a9b      	subs	r3, r3, r2
    3e26:	429d      	cmp	r5, r3
    3e28:	dbf0      	blt.n	3e0c <_printf_i+0x1b0>
    3e2a:	e7e9      	b.n	3e00 <_printf_i+0x1a4>
    3e2c:	2d00      	cmp	r5, #0
    3e2e:	d0a9      	beq.n	3d84 <_printf_i+0x128>
    3e30:	9e04      	ldr	r6, [sp, #16]
    3e32:	0028      	movs	r0, r5
    3e34:	0039      	movs	r1, r7
    3e36:	f002 f917 	bl	6068 <__aeabi_uidivmod>
    3e3a:	9b03      	ldr	r3, [sp, #12]
    3e3c:	3e01      	subs	r6, #1
    3e3e:	5c5b      	ldrb	r3, [r3, r1]
    3e40:	0028      	movs	r0, r5
    3e42:	7033      	strb	r3, [r6, #0]
    3e44:	0039      	movs	r1, r7
    3e46:	f002 f889 	bl	5f5c <__udivsi3>
    3e4a:	1e05      	subs	r5, r0, #0
    3e4c:	d1f1      	bne.n	3e32 <_printf_i+0x1d6>
    3e4e:	2f08      	cmp	r7, #8
    3e50:	d109      	bne.n	3e66 <_printf_i+0x20a>
    3e52:	6823      	ldr	r3, [r4, #0]
    3e54:	07db      	lsls	r3, r3, #31
    3e56:	d506      	bpl.n	3e66 <_printf_i+0x20a>
    3e58:	6863      	ldr	r3, [r4, #4]
    3e5a:	6922      	ldr	r2, [r4, #16]
    3e5c:	4293      	cmp	r3, r2
    3e5e:	dc02      	bgt.n	3e66 <_printf_i+0x20a>
    3e60:	2330      	movs	r3, #48	; 0x30
    3e62:	3e01      	subs	r6, #1
    3e64:	7033      	strb	r3, [r6, #0]
    3e66:	9b04      	ldr	r3, [sp, #16]
    3e68:	1b9b      	subs	r3, r3, r6
    3e6a:	6123      	str	r3, [r4, #16]
    3e6c:	9b07      	ldr	r3, [sp, #28]
    3e6e:	aa09      	add	r2, sp, #36	; 0x24
    3e70:	9300      	str	r3, [sp, #0]
    3e72:	0021      	movs	r1, r4
    3e74:	9b06      	ldr	r3, [sp, #24]
    3e76:	9805      	ldr	r0, [sp, #20]
    3e78:	f7ff fe82 	bl	3b80 <_printf_common>
    3e7c:	1c43      	adds	r3, r0, #1
    3e7e:	d1b3      	bne.n	3de8 <_printf_i+0x18c>
    3e80:	2001      	movs	r0, #1
    3e82:	4240      	negs	r0, r0
    3e84:	b00b      	add	sp, #44	; 0x2c
    3e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e88:	00008bc3 	.word	0x00008bc3
    3e8c:	00008bb2 	.word	0x00008bb2

00003e90 <iprintf>:
    3e90:	b40f      	push	{r0, r1, r2, r3}
    3e92:	4b0b      	ldr	r3, [pc, #44]	; (3ec0 <iprintf+0x30>)
    3e94:	b513      	push	{r0, r1, r4, lr}
    3e96:	681c      	ldr	r4, [r3, #0]
    3e98:	2c00      	cmp	r4, #0
    3e9a:	d005      	beq.n	3ea8 <iprintf+0x18>
    3e9c:	69a3      	ldr	r3, [r4, #24]
    3e9e:	2b00      	cmp	r3, #0
    3ea0:	d102      	bne.n	3ea8 <iprintf+0x18>
    3ea2:	0020      	movs	r0, r4
    3ea4:	f001 f966 	bl	5174 <__sinit>
    3ea8:	ab05      	add	r3, sp, #20
    3eaa:	9a04      	ldr	r2, [sp, #16]
    3eac:	68a1      	ldr	r1, [r4, #8]
    3eae:	0020      	movs	r0, r4
    3eb0:	9301      	str	r3, [sp, #4]
    3eb2:	f001 fe3d 	bl	5b30 <_vfiprintf_r>
    3eb6:	bc16      	pop	{r1, r2, r4}
    3eb8:	bc08      	pop	{r3}
    3eba:	b004      	add	sp, #16
    3ebc:	4718      	bx	r3
    3ebe:	46c0      	nop			; (mov r8, r8)
    3ec0:	2000000c 	.word	0x2000000c

00003ec4 <_puts_r>:
    3ec4:	b570      	push	{r4, r5, r6, lr}
    3ec6:	0005      	movs	r5, r0
    3ec8:	000e      	movs	r6, r1
    3eca:	2800      	cmp	r0, #0
    3ecc:	d004      	beq.n	3ed8 <_puts_r+0x14>
    3ece:	6983      	ldr	r3, [r0, #24]
    3ed0:	2b00      	cmp	r3, #0
    3ed2:	d101      	bne.n	3ed8 <_puts_r+0x14>
    3ed4:	f001 f94e 	bl	5174 <__sinit>
    3ed8:	69ab      	ldr	r3, [r5, #24]
    3eda:	68ac      	ldr	r4, [r5, #8]
    3edc:	2b00      	cmp	r3, #0
    3ede:	d102      	bne.n	3ee6 <_puts_r+0x22>
    3ee0:	0028      	movs	r0, r5
    3ee2:	f001 f947 	bl	5174 <__sinit>
    3ee6:	4b24      	ldr	r3, [pc, #144]	; (3f78 <_puts_r+0xb4>)
    3ee8:	429c      	cmp	r4, r3
    3eea:	d10f      	bne.n	3f0c <_puts_r+0x48>
    3eec:	686c      	ldr	r4, [r5, #4]
    3eee:	89a3      	ldrh	r3, [r4, #12]
    3ef0:	071b      	lsls	r3, r3, #28
    3ef2:	d502      	bpl.n	3efa <_puts_r+0x36>
    3ef4:	6923      	ldr	r3, [r4, #16]
    3ef6:	2b00      	cmp	r3, #0
    3ef8:	d120      	bne.n	3f3c <_puts_r+0x78>
    3efa:	0021      	movs	r1, r4
    3efc:	0028      	movs	r0, r5
    3efe:	f000 f95f 	bl	41c0 <__swsetup_r>
    3f02:	2800      	cmp	r0, #0
    3f04:	d01a      	beq.n	3f3c <_puts_r+0x78>
    3f06:	2001      	movs	r0, #1
    3f08:	4240      	negs	r0, r0
    3f0a:	bd70      	pop	{r4, r5, r6, pc}
    3f0c:	4b1b      	ldr	r3, [pc, #108]	; (3f7c <_puts_r+0xb8>)
    3f0e:	429c      	cmp	r4, r3
    3f10:	d101      	bne.n	3f16 <_puts_r+0x52>
    3f12:	68ac      	ldr	r4, [r5, #8]
    3f14:	e7eb      	b.n	3eee <_puts_r+0x2a>
    3f16:	4b1a      	ldr	r3, [pc, #104]	; (3f80 <_puts_r+0xbc>)
    3f18:	429c      	cmp	r4, r3
    3f1a:	d1e8      	bne.n	3eee <_puts_r+0x2a>
    3f1c:	68ec      	ldr	r4, [r5, #12]
    3f1e:	e7e6      	b.n	3eee <_puts_r+0x2a>
    3f20:	3b01      	subs	r3, #1
    3f22:	3601      	adds	r6, #1
    3f24:	60a3      	str	r3, [r4, #8]
    3f26:	2b00      	cmp	r3, #0
    3f28:	da04      	bge.n	3f34 <_puts_r+0x70>
    3f2a:	69a2      	ldr	r2, [r4, #24]
    3f2c:	4293      	cmp	r3, r2
    3f2e:	db16      	blt.n	3f5e <_puts_r+0x9a>
    3f30:	290a      	cmp	r1, #10
    3f32:	d014      	beq.n	3f5e <_puts_r+0x9a>
    3f34:	6823      	ldr	r3, [r4, #0]
    3f36:	1c5a      	adds	r2, r3, #1
    3f38:	6022      	str	r2, [r4, #0]
    3f3a:	7019      	strb	r1, [r3, #0]
    3f3c:	7831      	ldrb	r1, [r6, #0]
    3f3e:	68a3      	ldr	r3, [r4, #8]
    3f40:	2900      	cmp	r1, #0
    3f42:	d1ed      	bne.n	3f20 <_puts_r+0x5c>
    3f44:	3b01      	subs	r3, #1
    3f46:	60a3      	str	r3, [r4, #8]
    3f48:	2b00      	cmp	r3, #0
    3f4a:	da0f      	bge.n	3f6c <_puts_r+0xa8>
    3f4c:	0022      	movs	r2, r4
    3f4e:	310a      	adds	r1, #10
    3f50:	0028      	movs	r0, r5
    3f52:	f000 f8df 	bl	4114 <__swbuf_r>
    3f56:	1c43      	adds	r3, r0, #1
    3f58:	d0d5      	beq.n	3f06 <_puts_r+0x42>
    3f5a:	200a      	movs	r0, #10
    3f5c:	e7d5      	b.n	3f0a <_puts_r+0x46>
    3f5e:	0022      	movs	r2, r4
    3f60:	0028      	movs	r0, r5
    3f62:	f000 f8d7 	bl	4114 <__swbuf_r>
    3f66:	1c43      	adds	r3, r0, #1
    3f68:	d1e8      	bne.n	3f3c <_puts_r+0x78>
    3f6a:	e7cc      	b.n	3f06 <_puts_r+0x42>
    3f6c:	200a      	movs	r0, #10
    3f6e:	6823      	ldr	r3, [r4, #0]
    3f70:	1c5a      	adds	r2, r3, #1
    3f72:	6022      	str	r2, [r4, #0]
    3f74:	7018      	strb	r0, [r3, #0]
    3f76:	e7c8      	b.n	3f0a <_puts_r+0x46>
    3f78:	00008c04 	.word	0x00008c04
    3f7c:	00008c24 	.word	0x00008c24
    3f80:	00008be4 	.word	0x00008be4

00003f84 <puts>:
    3f84:	b510      	push	{r4, lr}
    3f86:	4b03      	ldr	r3, [pc, #12]	; (3f94 <puts+0x10>)
    3f88:	0001      	movs	r1, r0
    3f8a:	6818      	ldr	r0, [r3, #0]
    3f8c:	f7ff ff9a 	bl	3ec4 <_puts_r>
    3f90:	bd10      	pop	{r4, pc}
    3f92:	46c0      	nop			; (mov r8, r8)
    3f94:	2000000c 	.word	0x2000000c

00003f98 <setbuf>:
    3f98:	424a      	negs	r2, r1
    3f9a:	414a      	adcs	r2, r1
    3f9c:	2380      	movs	r3, #128	; 0x80
    3f9e:	b510      	push	{r4, lr}
    3fa0:	0052      	lsls	r2, r2, #1
    3fa2:	00db      	lsls	r3, r3, #3
    3fa4:	f000 f802 	bl	3fac <setvbuf>
    3fa8:	bd10      	pop	{r4, pc}
	...

00003fac <setvbuf>:
    3fac:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fae:	001d      	movs	r5, r3
    3fb0:	4b4f      	ldr	r3, [pc, #316]	; (40f0 <setvbuf+0x144>)
    3fb2:	b085      	sub	sp, #20
    3fb4:	681e      	ldr	r6, [r3, #0]
    3fb6:	0004      	movs	r4, r0
    3fb8:	000f      	movs	r7, r1
    3fba:	9200      	str	r2, [sp, #0]
    3fbc:	2e00      	cmp	r6, #0
    3fbe:	d005      	beq.n	3fcc <setvbuf+0x20>
    3fc0:	69b3      	ldr	r3, [r6, #24]
    3fc2:	2b00      	cmp	r3, #0
    3fc4:	d102      	bne.n	3fcc <setvbuf+0x20>
    3fc6:	0030      	movs	r0, r6
    3fc8:	f001 f8d4 	bl	5174 <__sinit>
    3fcc:	4b49      	ldr	r3, [pc, #292]	; (40f4 <setvbuf+0x148>)
    3fce:	429c      	cmp	r4, r3
    3fd0:	d150      	bne.n	4074 <setvbuf+0xc8>
    3fd2:	6874      	ldr	r4, [r6, #4]
    3fd4:	9b00      	ldr	r3, [sp, #0]
    3fd6:	2b02      	cmp	r3, #2
    3fd8:	d005      	beq.n	3fe6 <setvbuf+0x3a>
    3fda:	2b01      	cmp	r3, #1
    3fdc:	d900      	bls.n	3fe0 <setvbuf+0x34>
    3fde:	e084      	b.n	40ea <setvbuf+0x13e>
    3fe0:	2d00      	cmp	r5, #0
    3fe2:	da00      	bge.n	3fe6 <setvbuf+0x3a>
    3fe4:	e081      	b.n	40ea <setvbuf+0x13e>
    3fe6:	0021      	movs	r1, r4
    3fe8:	0030      	movs	r0, r6
    3fea:	f001 f855 	bl	5098 <_fflush_r>
    3fee:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3ff0:	2900      	cmp	r1, #0
    3ff2:	d008      	beq.n	4006 <setvbuf+0x5a>
    3ff4:	0023      	movs	r3, r4
    3ff6:	3344      	adds	r3, #68	; 0x44
    3ff8:	4299      	cmp	r1, r3
    3ffa:	d002      	beq.n	4002 <setvbuf+0x56>
    3ffc:	0030      	movs	r0, r6
    3ffe:	f001 fcc7 	bl	5990 <_free_r>
    4002:	2300      	movs	r3, #0
    4004:	6363      	str	r3, [r4, #52]	; 0x34
    4006:	2300      	movs	r3, #0
    4008:	61a3      	str	r3, [r4, #24]
    400a:	6063      	str	r3, [r4, #4]
    400c:	89a3      	ldrh	r3, [r4, #12]
    400e:	061b      	lsls	r3, r3, #24
    4010:	d503      	bpl.n	401a <setvbuf+0x6e>
    4012:	6921      	ldr	r1, [r4, #16]
    4014:	0030      	movs	r0, r6
    4016:	f001 fcbb 	bl	5990 <_free_r>
    401a:	89a3      	ldrh	r3, [r4, #12]
    401c:	4a36      	ldr	r2, [pc, #216]	; (40f8 <setvbuf+0x14c>)
    401e:	4013      	ands	r3, r2
    4020:	81a3      	strh	r3, [r4, #12]
    4022:	9b00      	ldr	r3, [sp, #0]
    4024:	2b02      	cmp	r3, #2
    4026:	d05a      	beq.n	40de <setvbuf+0x132>
    4028:	ab03      	add	r3, sp, #12
    402a:	aa02      	add	r2, sp, #8
    402c:	0021      	movs	r1, r4
    402e:	0030      	movs	r0, r6
    4030:	f001 f942 	bl	52b8 <__swhatbuf_r>
    4034:	89a3      	ldrh	r3, [r4, #12]
    4036:	4318      	orrs	r0, r3
    4038:	81a0      	strh	r0, [r4, #12]
    403a:	2d00      	cmp	r5, #0
    403c:	d124      	bne.n	4088 <setvbuf+0xdc>
    403e:	9d02      	ldr	r5, [sp, #8]
    4040:	0028      	movs	r0, r5
    4042:	f001 f99f 	bl	5384 <malloc>
    4046:	9501      	str	r5, [sp, #4]
    4048:	1e07      	subs	r7, r0, #0
    404a:	d142      	bne.n	40d2 <setvbuf+0x126>
    404c:	9b02      	ldr	r3, [sp, #8]
    404e:	9301      	str	r3, [sp, #4]
    4050:	42ab      	cmp	r3, r5
    4052:	d139      	bne.n	40c8 <setvbuf+0x11c>
    4054:	2001      	movs	r0, #1
    4056:	4240      	negs	r0, r0
    4058:	2302      	movs	r3, #2
    405a:	89a2      	ldrh	r2, [r4, #12]
    405c:	4313      	orrs	r3, r2
    405e:	81a3      	strh	r3, [r4, #12]
    4060:	2300      	movs	r3, #0
    4062:	60a3      	str	r3, [r4, #8]
    4064:	0023      	movs	r3, r4
    4066:	3347      	adds	r3, #71	; 0x47
    4068:	6023      	str	r3, [r4, #0]
    406a:	6123      	str	r3, [r4, #16]
    406c:	2301      	movs	r3, #1
    406e:	6163      	str	r3, [r4, #20]
    4070:	b005      	add	sp, #20
    4072:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4074:	4b21      	ldr	r3, [pc, #132]	; (40fc <setvbuf+0x150>)
    4076:	429c      	cmp	r4, r3
    4078:	d101      	bne.n	407e <setvbuf+0xd2>
    407a:	68b4      	ldr	r4, [r6, #8]
    407c:	e7aa      	b.n	3fd4 <setvbuf+0x28>
    407e:	4b20      	ldr	r3, [pc, #128]	; (4100 <setvbuf+0x154>)
    4080:	429c      	cmp	r4, r3
    4082:	d1a7      	bne.n	3fd4 <setvbuf+0x28>
    4084:	68f4      	ldr	r4, [r6, #12]
    4086:	e7a5      	b.n	3fd4 <setvbuf+0x28>
    4088:	2f00      	cmp	r7, #0
    408a:	d0d9      	beq.n	4040 <setvbuf+0x94>
    408c:	69b3      	ldr	r3, [r6, #24]
    408e:	2b00      	cmp	r3, #0
    4090:	d102      	bne.n	4098 <setvbuf+0xec>
    4092:	0030      	movs	r0, r6
    4094:	f001 f86e 	bl	5174 <__sinit>
    4098:	9b00      	ldr	r3, [sp, #0]
    409a:	2b01      	cmp	r3, #1
    409c:	d103      	bne.n	40a6 <setvbuf+0xfa>
    409e:	89a3      	ldrh	r3, [r4, #12]
    40a0:	9a00      	ldr	r2, [sp, #0]
    40a2:	431a      	orrs	r2, r3
    40a4:	81a2      	strh	r2, [r4, #12]
    40a6:	2008      	movs	r0, #8
    40a8:	89a3      	ldrh	r3, [r4, #12]
    40aa:	6027      	str	r7, [r4, #0]
    40ac:	6127      	str	r7, [r4, #16]
    40ae:	6165      	str	r5, [r4, #20]
    40b0:	4018      	ands	r0, r3
    40b2:	d018      	beq.n	40e6 <setvbuf+0x13a>
    40b4:	2001      	movs	r0, #1
    40b6:	4018      	ands	r0, r3
    40b8:	2300      	movs	r3, #0
    40ba:	4298      	cmp	r0, r3
    40bc:	d011      	beq.n	40e2 <setvbuf+0x136>
    40be:	426d      	negs	r5, r5
    40c0:	60a3      	str	r3, [r4, #8]
    40c2:	61a5      	str	r5, [r4, #24]
    40c4:	0018      	movs	r0, r3
    40c6:	e7d3      	b.n	4070 <setvbuf+0xc4>
    40c8:	9801      	ldr	r0, [sp, #4]
    40ca:	f001 f95b 	bl	5384 <malloc>
    40ce:	1e07      	subs	r7, r0, #0
    40d0:	d0c0      	beq.n	4054 <setvbuf+0xa8>
    40d2:	2380      	movs	r3, #128	; 0x80
    40d4:	89a2      	ldrh	r2, [r4, #12]
    40d6:	9d01      	ldr	r5, [sp, #4]
    40d8:	4313      	orrs	r3, r2
    40da:	81a3      	strh	r3, [r4, #12]
    40dc:	e7d6      	b.n	408c <setvbuf+0xe0>
    40de:	2000      	movs	r0, #0
    40e0:	e7ba      	b.n	4058 <setvbuf+0xac>
    40e2:	60a5      	str	r5, [r4, #8]
    40e4:	e7c4      	b.n	4070 <setvbuf+0xc4>
    40e6:	60a0      	str	r0, [r4, #8]
    40e8:	e7c2      	b.n	4070 <setvbuf+0xc4>
    40ea:	2001      	movs	r0, #1
    40ec:	4240      	negs	r0, r0
    40ee:	e7bf      	b.n	4070 <setvbuf+0xc4>
    40f0:	2000000c 	.word	0x2000000c
    40f4:	00008c04 	.word	0x00008c04
    40f8:	fffff35c 	.word	0xfffff35c
    40fc:	00008c24 	.word	0x00008c24
    4100:	00008be4 	.word	0x00008be4

00004104 <strlen>:
    4104:	2300      	movs	r3, #0
    4106:	5cc2      	ldrb	r2, [r0, r3]
    4108:	3301      	adds	r3, #1
    410a:	2a00      	cmp	r2, #0
    410c:	d1fb      	bne.n	4106 <strlen+0x2>
    410e:	1e58      	subs	r0, r3, #1
    4110:	4770      	bx	lr
	...

00004114 <__swbuf_r>:
    4114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4116:	0005      	movs	r5, r0
    4118:	000e      	movs	r6, r1
    411a:	0014      	movs	r4, r2
    411c:	2800      	cmp	r0, #0
    411e:	d004      	beq.n	412a <__swbuf_r+0x16>
    4120:	6983      	ldr	r3, [r0, #24]
    4122:	2b00      	cmp	r3, #0
    4124:	d101      	bne.n	412a <__swbuf_r+0x16>
    4126:	f001 f825 	bl	5174 <__sinit>
    412a:	4b22      	ldr	r3, [pc, #136]	; (41b4 <__swbuf_r+0xa0>)
    412c:	429c      	cmp	r4, r3
    412e:	d12d      	bne.n	418c <__swbuf_r+0x78>
    4130:	686c      	ldr	r4, [r5, #4]
    4132:	69a3      	ldr	r3, [r4, #24]
    4134:	60a3      	str	r3, [r4, #8]
    4136:	89a3      	ldrh	r3, [r4, #12]
    4138:	071b      	lsls	r3, r3, #28
    413a:	d531      	bpl.n	41a0 <__swbuf_r+0x8c>
    413c:	6923      	ldr	r3, [r4, #16]
    413e:	2b00      	cmp	r3, #0
    4140:	d02e      	beq.n	41a0 <__swbuf_r+0x8c>
    4142:	6823      	ldr	r3, [r4, #0]
    4144:	6922      	ldr	r2, [r4, #16]
    4146:	b2f7      	uxtb	r7, r6
    4148:	1a98      	subs	r0, r3, r2
    414a:	6963      	ldr	r3, [r4, #20]
    414c:	b2f6      	uxtb	r6, r6
    414e:	4298      	cmp	r0, r3
    4150:	db05      	blt.n	415e <__swbuf_r+0x4a>
    4152:	0021      	movs	r1, r4
    4154:	0028      	movs	r0, r5
    4156:	f000 ff9f 	bl	5098 <_fflush_r>
    415a:	2800      	cmp	r0, #0
    415c:	d126      	bne.n	41ac <__swbuf_r+0x98>
    415e:	68a3      	ldr	r3, [r4, #8]
    4160:	3001      	adds	r0, #1
    4162:	3b01      	subs	r3, #1
    4164:	60a3      	str	r3, [r4, #8]
    4166:	6823      	ldr	r3, [r4, #0]
    4168:	1c5a      	adds	r2, r3, #1
    416a:	6022      	str	r2, [r4, #0]
    416c:	701f      	strb	r7, [r3, #0]
    416e:	6963      	ldr	r3, [r4, #20]
    4170:	4298      	cmp	r0, r3
    4172:	d004      	beq.n	417e <__swbuf_r+0x6a>
    4174:	89a3      	ldrh	r3, [r4, #12]
    4176:	07db      	lsls	r3, r3, #31
    4178:	d51a      	bpl.n	41b0 <__swbuf_r+0x9c>
    417a:	2e0a      	cmp	r6, #10
    417c:	d118      	bne.n	41b0 <__swbuf_r+0x9c>
    417e:	0021      	movs	r1, r4
    4180:	0028      	movs	r0, r5
    4182:	f000 ff89 	bl	5098 <_fflush_r>
    4186:	2800      	cmp	r0, #0
    4188:	d012      	beq.n	41b0 <__swbuf_r+0x9c>
    418a:	e00f      	b.n	41ac <__swbuf_r+0x98>
    418c:	4b0a      	ldr	r3, [pc, #40]	; (41b8 <__swbuf_r+0xa4>)
    418e:	429c      	cmp	r4, r3
    4190:	d101      	bne.n	4196 <__swbuf_r+0x82>
    4192:	68ac      	ldr	r4, [r5, #8]
    4194:	e7cd      	b.n	4132 <__swbuf_r+0x1e>
    4196:	4b09      	ldr	r3, [pc, #36]	; (41bc <__swbuf_r+0xa8>)
    4198:	429c      	cmp	r4, r3
    419a:	d1ca      	bne.n	4132 <__swbuf_r+0x1e>
    419c:	68ec      	ldr	r4, [r5, #12]
    419e:	e7c8      	b.n	4132 <__swbuf_r+0x1e>
    41a0:	0021      	movs	r1, r4
    41a2:	0028      	movs	r0, r5
    41a4:	f000 f80c 	bl	41c0 <__swsetup_r>
    41a8:	2800      	cmp	r0, #0
    41aa:	d0ca      	beq.n	4142 <__swbuf_r+0x2e>
    41ac:	2601      	movs	r6, #1
    41ae:	4276      	negs	r6, r6
    41b0:	0030      	movs	r0, r6
    41b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41b4:	00008c04 	.word	0x00008c04
    41b8:	00008c24 	.word	0x00008c24
    41bc:	00008be4 	.word	0x00008be4

000041c0 <__swsetup_r>:
    41c0:	4b36      	ldr	r3, [pc, #216]	; (429c <__swsetup_r+0xdc>)
    41c2:	b570      	push	{r4, r5, r6, lr}
    41c4:	681d      	ldr	r5, [r3, #0]
    41c6:	0006      	movs	r6, r0
    41c8:	000c      	movs	r4, r1
    41ca:	2d00      	cmp	r5, #0
    41cc:	d005      	beq.n	41da <__swsetup_r+0x1a>
    41ce:	69ab      	ldr	r3, [r5, #24]
    41d0:	2b00      	cmp	r3, #0
    41d2:	d102      	bne.n	41da <__swsetup_r+0x1a>
    41d4:	0028      	movs	r0, r5
    41d6:	f000 ffcd 	bl	5174 <__sinit>
    41da:	4b31      	ldr	r3, [pc, #196]	; (42a0 <__swsetup_r+0xe0>)
    41dc:	429c      	cmp	r4, r3
    41de:	d10f      	bne.n	4200 <__swsetup_r+0x40>
    41e0:	686c      	ldr	r4, [r5, #4]
    41e2:	230c      	movs	r3, #12
    41e4:	5ee2      	ldrsh	r2, [r4, r3]
    41e6:	b293      	uxth	r3, r2
    41e8:	0719      	lsls	r1, r3, #28
    41ea:	d42d      	bmi.n	4248 <__swsetup_r+0x88>
    41ec:	06d9      	lsls	r1, r3, #27
    41ee:	d411      	bmi.n	4214 <__swsetup_r+0x54>
    41f0:	2309      	movs	r3, #9
    41f2:	2001      	movs	r0, #1
    41f4:	6033      	str	r3, [r6, #0]
    41f6:	3337      	adds	r3, #55	; 0x37
    41f8:	4313      	orrs	r3, r2
    41fa:	81a3      	strh	r3, [r4, #12]
    41fc:	4240      	negs	r0, r0
    41fe:	bd70      	pop	{r4, r5, r6, pc}
    4200:	4b28      	ldr	r3, [pc, #160]	; (42a4 <__swsetup_r+0xe4>)
    4202:	429c      	cmp	r4, r3
    4204:	d101      	bne.n	420a <__swsetup_r+0x4a>
    4206:	68ac      	ldr	r4, [r5, #8]
    4208:	e7eb      	b.n	41e2 <__swsetup_r+0x22>
    420a:	4b27      	ldr	r3, [pc, #156]	; (42a8 <__swsetup_r+0xe8>)
    420c:	429c      	cmp	r4, r3
    420e:	d1e8      	bne.n	41e2 <__swsetup_r+0x22>
    4210:	68ec      	ldr	r4, [r5, #12]
    4212:	e7e6      	b.n	41e2 <__swsetup_r+0x22>
    4214:	075b      	lsls	r3, r3, #29
    4216:	d513      	bpl.n	4240 <__swsetup_r+0x80>
    4218:	6b61      	ldr	r1, [r4, #52]	; 0x34
    421a:	2900      	cmp	r1, #0
    421c:	d008      	beq.n	4230 <__swsetup_r+0x70>
    421e:	0023      	movs	r3, r4
    4220:	3344      	adds	r3, #68	; 0x44
    4222:	4299      	cmp	r1, r3
    4224:	d002      	beq.n	422c <__swsetup_r+0x6c>
    4226:	0030      	movs	r0, r6
    4228:	f001 fbb2 	bl	5990 <_free_r>
    422c:	2300      	movs	r3, #0
    422e:	6363      	str	r3, [r4, #52]	; 0x34
    4230:	2224      	movs	r2, #36	; 0x24
    4232:	89a3      	ldrh	r3, [r4, #12]
    4234:	4393      	bics	r3, r2
    4236:	81a3      	strh	r3, [r4, #12]
    4238:	2300      	movs	r3, #0
    423a:	6063      	str	r3, [r4, #4]
    423c:	6923      	ldr	r3, [r4, #16]
    423e:	6023      	str	r3, [r4, #0]
    4240:	2308      	movs	r3, #8
    4242:	89a2      	ldrh	r2, [r4, #12]
    4244:	4313      	orrs	r3, r2
    4246:	81a3      	strh	r3, [r4, #12]
    4248:	6923      	ldr	r3, [r4, #16]
    424a:	2b00      	cmp	r3, #0
    424c:	d10b      	bne.n	4266 <__swsetup_r+0xa6>
    424e:	21a0      	movs	r1, #160	; 0xa0
    4250:	2280      	movs	r2, #128	; 0x80
    4252:	89a3      	ldrh	r3, [r4, #12]
    4254:	0089      	lsls	r1, r1, #2
    4256:	0092      	lsls	r2, r2, #2
    4258:	400b      	ands	r3, r1
    425a:	4293      	cmp	r3, r2
    425c:	d003      	beq.n	4266 <__swsetup_r+0xa6>
    425e:	0021      	movs	r1, r4
    4260:	0030      	movs	r0, r6
    4262:	f001 f851 	bl	5308 <__smakebuf_r>
    4266:	2301      	movs	r3, #1
    4268:	89a2      	ldrh	r2, [r4, #12]
    426a:	4013      	ands	r3, r2
    426c:	d011      	beq.n	4292 <__swsetup_r+0xd2>
    426e:	2300      	movs	r3, #0
    4270:	60a3      	str	r3, [r4, #8]
    4272:	6963      	ldr	r3, [r4, #20]
    4274:	425b      	negs	r3, r3
    4276:	61a3      	str	r3, [r4, #24]
    4278:	2000      	movs	r0, #0
    427a:	6923      	ldr	r3, [r4, #16]
    427c:	4283      	cmp	r3, r0
    427e:	d1be      	bne.n	41fe <__swsetup_r+0x3e>
    4280:	230c      	movs	r3, #12
    4282:	5ee2      	ldrsh	r2, [r4, r3]
    4284:	0613      	lsls	r3, r2, #24
    4286:	d5ba      	bpl.n	41fe <__swsetup_r+0x3e>
    4288:	2340      	movs	r3, #64	; 0x40
    428a:	4313      	orrs	r3, r2
    428c:	81a3      	strh	r3, [r4, #12]
    428e:	3801      	subs	r0, #1
    4290:	e7b5      	b.n	41fe <__swsetup_r+0x3e>
    4292:	0792      	lsls	r2, r2, #30
    4294:	d400      	bmi.n	4298 <__swsetup_r+0xd8>
    4296:	6963      	ldr	r3, [r4, #20]
    4298:	60a3      	str	r3, [r4, #8]
    429a:	e7ed      	b.n	4278 <__swsetup_r+0xb8>
    429c:	2000000c 	.word	0x2000000c
    42a0:	00008c04 	.word	0x00008c04
    42a4:	00008c24 	.word	0x00008c24
    42a8:	00008be4 	.word	0x00008be4

000042ac <quorem>:
    42ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    42ae:	6903      	ldr	r3, [r0, #16]
    42b0:	690c      	ldr	r4, [r1, #16]
    42b2:	b089      	sub	sp, #36	; 0x24
    42b4:	0007      	movs	r7, r0
    42b6:	9105      	str	r1, [sp, #20]
    42b8:	2600      	movs	r6, #0
    42ba:	429c      	cmp	r4, r3
    42bc:	dc6d      	bgt.n	439a <quorem+0xee>
    42be:	000b      	movs	r3, r1
    42c0:	3c01      	subs	r4, #1
    42c2:	3314      	adds	r3, #20
    42c4:	00a5      	lsls	r5, r4, #2
    42c6:	9303      	str	r3, [sp, #12]
    42c8:	195b      	adds	r3, r3, r5
    42ca:	9304      	str	r3, [sp, #16]
    42cc:	0003      	movs	r3, r0
    42ce:	3314      	adds	r3, #20
    42d0:	9302      	str	r3, [sp, #8]
    42d2:	195d      	adds	r5, r3, r5
    42d4:	9b04      	ldr	r3, [sp, #16]
    42d6:	6828      	ldr	r0, [r5, #0]
    42d8:	681b      	ldr	r3, [r3, #0]
    42da:	1c59      	adds	r1, r3, #1
    42dc:	9301      	str	r3, [sp, #4]
    42de:	f001 fe3d 	bl	5f5c <__udivsi3>
    42e2:	9001      	str	r0, [sp, #4]
    42e4:	42b0      	cmp	r0, r6
    42e6:	d02d      	beq.n	4344 <quorem+0x98>
    42e8:	9b03      	ldr	r3, [sp, #12]
    42ea:	9802      	ldr	r0, [sp, #8]
    42ec:	469c      	mov	ip, r3
    42ee:	9606      	str	r6, [sp, #24]
    42f0:	4662      	mov	r2, ip
    42f2:	ca08      	ldmia	r2!, {r3}
    42f4:	4694      	mov	ip, r2
    42f6:	9a01      	ldr	r2, [sp, #4]
    42f8:	b299      	uxth	r1, r3
    42fa:	4351      	muls	r1, r2
    42fc:	0c1b      	lsrs	r3, r3, #16
    42fe:	4353      	muls	r3, r2
    4300:	1989      	adds	r1, r1, r6
    4302:	0c0a      	lsrs	r2, r1, #16
    4304:	189b      	adds	r3, r3, r2
    4306:	9307      	str	r3, [sp, #28]
    4308:	8802      	ldrh	r2, [r0, #0]
    430a:	0c1e      	lsrs	r6, r3, #16
    430c:	9b06      	ldr	r3, [sp, #24]
    430e:	b289      	uxth	r1, r1
    4310:	18d2      	adds	r2, r2, r3
    4312:	6803      	ldr	r3, [r0, #0]
    4314:	1a52      	subs	r2, r2, r1
    4316:	0c19      	lsrs	r1, r3, #16
    4318:	466b      	mov	r3, sp
    431a:	8b9b      	ldrh	r3, [r3, #28]
    431c:	1acb      	subs	r3, r1, r3
    431e:	1411      	asrs	r1, r2, #16
    4320:	185b      	adds	r3, r3, r1
    4322:	1419      	asrs	r1, r3, #16
    4324:	b292      	uxth	r2, r2
    4326:	041b      	lsls	r3, r3, #16
    4328:	431a      	orrs	r2, r3
    432a:	9b04      	ldr	r3, [sp, #16]
    432c:	9106      	str	r1, [sp, #24]
    432e:	c004      	stmia	r0!, {r2}
    4330:	4563      	cmp	r3, ip
    4332:	d2dd      	bcs.n	42f0 <quorem+0x44>
    4334:	682b      	ldr	r3, [r5, #0]
    4336:	2b00      	cmp	r3, #0
    4338:	d104      	bne.n	4344 <quorem+0x98>
    433a:	9b02      	ldr	r3, [sp, #8]
    433c:	3d04      	subs	r5, #4
    433e:	42ab      	cmp	r3, r5
    4340:	d32e      	bcc.n	43a0 <quorem+0xf4>
    4342:	613c      	str	r4, [r7, #16]
    4344:	9905      	ldr	r1, [sp, #20]
    4346:	0038      	movs	r0, r7
    4348:	f001 fa43 	bl	57d2 <__mcmp>
    434c:	2800      	cmp	r0, #0
    434e:	db23      	blt.n	4398 <quorem+0xec>
    4350:	2500      	movs	r5, #0
    4352:	9b01      	ldr	r3, [sp, #4]
    4354:	9802      	ldr	r0, [sp, #8]
    4356:	3301      	adds	r3, #1
    4358:	9903      	ldr	r1, [sp, #12]
    435a:	9301      	str	r3, [sp, #4]
    435c:	c908      	ldmia	r1!, {r3}
    435e:	8802      	ldrh	r2, [r0, #0]
    4360:	1955      	adds	r5, r2, r5
    4362:	b29a      	uxth	r2, r3
    4364:	1aaa      	subs	r2, r5, r2
    4366:	6805      	ldr	r5, [r0, #0]
    4368:	0c1b      	lsrs	r3, r3, #16
    436a:	0c2d      	lsrs	r5, r5, #16
    436c:	1aeb      	subs	r3, r5, r3
    436e:	1415      	asrs	r5, r2, #16
    4370:	195b      	adds	r3, r3, r5
    4372:	141d      	asrs	r5, r3, #16
    4374:	b292      	uxth	r2, r2
    4376:	041b      	lsls	r3, r3, #16
    4378:	4313      	orrs	r3, r2
    437a:	c008      	stmia	r0!, {r3}
    437c:	9b04      	ldr	r3, [sp, #16]
    437e:	428b      	cmp	r3, r1
    4380:	d2ec      	bcs.n	435c <quorem+0xb0>
    4382:	9a02      	ldr	r2, [sp, #8]
    4384:	00a3      	lsls	r3, r4, #2
    4386:	18d3      	adds	r3, r2, r3
    4388:	681a      	ldr	r2, [r3, #0]
    438a:	2a00      	cmp	r2, #0
    438c:	d104      	bne.n	4398 <quorem+0xec>
    438e:	9a02      	ldr	r2, [sp, #8]
    4390:	3b04      	subs	r3, #4
    4392:	429a      	cmp	r2, r3
    4394:	d309      	bcc.n	43aa <quorem+0xfe>
    4396:	613c      	str	r4, [r7, #16]
    4398:	9e01      	ldr	r6, [sp, #4]
    439a:	0030      	movs	r0, r6
    439c:	b009      	add	sp, #36	; 0x24
    439e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43a0:	682b      	ldr	r3, [r5, #0]
    43a2:	2b00      	cmp	r3, #0
    43a4:	d1cd      	bne.n	4342 <quorem+0x96>
    43a6:	3c01      	subs	r4, #1
    43a8:	e7c7      	b.n	433a <quorem+0x8e>
    43aa:	681a      	ldr	r2, [r3, #0]
    43ac:	2a00      	cmp	r2, #0
    43ae:	d1f2      	bne.n	4396 <quorem+0xea>
    43b0:	3c01      	subs	r4, #1
    43b2:	e7ec      	b.n	438e <quorem+0xe2>

000043b4 <_dtoa_r>:
    43b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    43b6:	0016      	movs	r6, r2
    43b8:	001f      	movs	r7, r3
    43ba:	6a44      	ldr	r4, [r0, #36]	; 0x24
    43bc:	b09d      	sub	sp, #116	; 0x74
    43be:	9004      	str	r0, [sp, #16]
    43c0:	9d25      	ldr	r5, [sp, #148]	; 0x94
    43c2:	9606      	str	r6, [sp, #24]
    43c4:	9707      	str	r7, [sp, #28]
    43c6:	2c00      	cmp	r4, #0
    43c8:	d108      	bne.n	43dc <_dtoa_r+0x28>
    43ca:	2010      	movs	r0, #16
    43cc:	f000 ffda 	bl	5384 <malloc>
    43d0:	9b04      	ldr	r3, [sp, #16]
    43d2:	6258      	str	r0, [r3, #36]	; 0x24
    43d4:	6044      	str	r4, [r0, #4]
    43d6:	6084      	str	r4, [r0, #8]
    43d8:	6004      	str	r4, [r0, #0]
    43da:	60c4      	str	r4, [r0, #12]
    43dc:	9b04      	ldr	r3, [sp, #16]
    43de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    43e0:	6819      	ldr	r1, [r3, #0]
    43e2:	2900      	cmp	r1, #0
    43e4:	d00b      	beq.n	43fe <_dtoa_r+0x4a>
    43e6:	685a      	ldr	r2, [r3, #4]
    43e8:	2301      	movs	r3, #1
    43ea:	4093      	lsls	r3, r2
    43ec:	604a      	str	r2, [r1, #4]
    43ee:	608b      	str	r3, [r1, #8]
    43f0:	9804      	ldr	r0, [sp, #16]
    43f2:	f001 f814 	bl	541e <_Bfree>
    43f6:	2200      	movs	r2, #0
    43f8:	9b04      	ldr	r3, [sp, #16]
    43fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    43fc:	601a      	str	r2, [r3, #0]
    43fe:	9b07      	ldr	r3, [sp, #28]
    4400:	2b00      	cmp	r3, #0
    4402:	da1f      	bge.n	4444 <_dtoa_r+0x90>
    4404:	2301      	movs	r3, #1
    4406:	602b      	str	r3, [r5, #0]
    4408:	007b      	lsls	r3, r7, #1
    440a:	085b      	lsrs	r3, r3, #1
    440c:	9307      	str	r3, [sp, #28]
    440e:	9c07      	ldr	r4, [sp, #28]
    4410:	4bb7      	ldr	r3, [pc, #732]	; (46f0 <_dtoa_r+0x33c>)
    4412:	0022      	movs	r2, r4
    4414:	9319      	str	r3, [sp, #100]	; 0x64
    4416:	401a      	ands	r2, r3
    4418:	429a      	cmp	r2, r3
    441a:	d116      	bne.n	444a <_dtoa_r+0x96>
    441c:	4bb5      	ldr	r3, [pc, #724]	; (46f4 <_dtoa_r+0x340>)
    441e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4420:	6013      	str	r3, [r2, #0]
    4422:	9b06      	ldr	r3, [sp, #24]
    4424:	2b00      	cmp	r3, #0
    4426:	d103      	bne.n	4430 <_dtoa_r+0x7c>
    4428:	0324      	lsls	r4, r4, #12
    442a:	d101      	bne.n	4430 <_dtoa_r+0x7c>
    442c:	f000 fd91 	bl	4f52 <_dtoa_r+0xb9e>
    4430:	4bb1      	ldr	r3, [pc, #708]	; (46f8 <_dtoa_r+0x344>)
    4432:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4434:	930a      	str	r3, [sp, #40]	; 0x28
    4436:	4bb1      	ldr	r3, [pc, #708]	; (46fc <_dtoa_r+0x348>)
    4438:	2a00      	cmp	r2, #0
    443a:	d001      	beq.n	4440 <_dtoa_r+0x8c>
    443c:	f000 fd8f 	bl	4f5e <_dtoa_r+0xbaa>
    4440:	f000 fd8f 	bl	4f62 <_dtoa_r+0xbae>
    4444:	2300      	movs	r3, #0
    4446:	602b      	str	r3, [r5, #0]
    4448:	e7e1      	b.n	440e <_dtoa_r+0x5a>
    444a:	9e06      	ldr	r6, [sp, #24]
    444c:	9f07      	ldr	r7, [sp, #28]
    444e:	2200      	movs	r2, #0
    4450:	2300      	movs	r3, #0
    4452:	0030      	movs	r0, r6
    4454:	0039      	movs	r1, r7
    4456:	f001 ff07 	bl	6268 <__aeabi_dcmpeq>
    445a:	1e05      	subs	r5, r0, #0
    445c:	d00e      	beq.n	447c <_dtoa_r+0xc8>
    445e:	2301      	movs	r3, #1
    4460:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4462:	6013      	str	r3, [r2, #0]
    4464:	4ba6      	ldr	r3, [pc, #664]	; (4700 <_dtoa_r+0x34c>)
    4466:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4468:	930a      	str	r3, [sp, #40]	; 0x28
    446a:	2a00      	cmp	r2, #0
    446c:	d101      	bne.n	4472 <_dtoa_r+0xbe>
    446e:	f000 fd78 	bl	4f62 <_dtoa_r+0xbae>
    4472:	4aa4      	ldr	r2, [pc, #656]	; (4704 <_dtoa_r+0x350>)
    4474:	9926      	ldr	r1, [sp, #152]	; 0x98
    4476:	600a      	str	r2, [r1, #0]
    4478:	f000 fd73 	bl	4f62 <_dtoa_r+0xbae>
    447c:	ab1a      	add	r3, sp, #104	; 0x68
    447e:	9301      	str	r3, [sp, #4]
    4480:	ab1b      	add	r3, sp, #108	; 0x6c
    4482:	9300      	str	r3, [sp, #0]
    4484:	0032      	movs	r2, r6
    4486:	003b      	movs	r3, r7
    4488:	9804      	ldr	r0, [sp, #16]
    448a:	f001 fa1f 	bl	58cc <__d2b>
    448e:	0063      	lsls	r3, r4, #1
    4490:	9005      	str	r0, [sp, #20]
    4492:	0d5b      	lsrs	r3, r3, #21
    4494:	d100      	bne.n	4498 <_dtoa_r+0xe4>
    4496:	e07f      	b.n	4598 <_dtoa_r+0x1e4>
    4498:	033a      	lsls	r2, r7, #12
    449a:	4c9b      	ldr	r4, [pc, #620]	; (4708 <_dtoa_r+0x354>)
    449c:	0b12      	lsrs	r2, r2, #12
    449e:	4314      	orrs	r4, r2
    44a0:	0021      	movs	r1, r4
    44a2:	4a9a      	ldr	r2, [pc, #616]	; (470c <_dtoa_r+0x358>)
    44a4:	0030      	movs	r0, r6
    44a6:	9518      	str	r5, [sp, #96]	; 0x60
    44a8:	189e      	adds	r6, r3, r2
    44aa:	2200      	movs	r2, #0
    44ac:	4b98      	ldr	r3, [pc, #608]	; (4710 <_dtoa_r+0x35c>)
    44ae:	f003 fe23 	bl	80f8 <__aeabi_dsub>
    44b2:	4a98      	ldr	r2, [pc, #608]	; (4714 <_dtoa_r+0x360>)
    44b4:	4b98      	ldr	r3, [pc, #608]	; (4718 <_dtoa_r+0x364>)
    44b6:	f003 fb9f 	bl	7bf8 <__aeabi_dmul>
    44ba:	4a98      	ldr	r2, [pc, #608]	; (471c <_dtoa_r+0x368>)
    44bc:	4b98      	ldr	r3, [pc, #608]	; (4720 <_dtoa_r+0x36c>)
    44be:	f002 fc57 	bl	6d70 <__aeabi_dadd>
    44c2:	0004      	movs	r4, r0
    44c4:	0030      	movs	r0, r6
    44c6:	000d      	movs	r5, r1
    44c8:	f004 f980 	bl	87cc <__aeabi_i2d>
    44cc:	4a95      	ldr	r2, [pc, #596]	; (4724 <_dtoa_r+0x370>)
    44ce:	4b96      	ldr	r3, [pc, #600]	; (4728 <_dtoa_r+0x374>)
    44d0:	f003 fb92 	bl	7bf8 <__aeabi_dmul>
    44d4:	0002      	movs	r2, r0
    44d6:	000b      	movs	r3, r1
    44d8:	0020      	movs	r0, r4
    44da:	0029      	movs	r1, r5
    44dc:	f002 fc48 	bl	6d70 <__aeabi_dadd>
    44e0:	0004      	movs	r4, r0
    44e2:	000d      	movs	r5, r1
    44e4:	f004 f93e 	bl	8764 <__aeabi_d2iz>
    44e8:	2200      	movs	r2, #0
    44ea:	9003      	str	r0, [sp, #12]
    44ec:	2300      	movs	r3, #0
    44ee:	0020      	movs	r0, r4
    44f0:	0029      	movs	r1, r5
    44f2:	f001 febf 	bl	6274 <__aeabi_dcmplt>
    44f6:	2800      	cmp	r0, #0
    44f8:	d00e      	beq.n	4518 <_dtoa_r+0x164>
    44fa:	9803      	ldr	r0, [sp, #12]
    44fc:	f004 f966 	bl	87cc <__aeabi_i2d>
    4500:	000b      	movs	r3, r1
    4502:	0002      	movs	r2, r0
    4504:	0029      	movs	r1, r5
    4506:	0020      	movs	r0, r4
    4508:	f001 feae 	bl	6268 <__aeabi_dcmpeq>
    450c:	0003      	movs	r3, r0
    450e:	4258      	negs	r0, r3
    4510:	4158      	adcs	r0, r3
    4512:	9b03      	ldr	r3, [sp, #12]
    4514:	1a1b      	subs	r3, r3, r0
    4516:	9303      	str	r3, [sp, #12]
    4518:	2301      	movs	r3, #1
    451a:	9316      	str	r3, [sp, #88]	; 0x58
    451c:	9b03      	ldr	r3, [sp, #12]
    451e:	2b16      	cmp	r3, #22
    4520:	d80f      	bhi.n	4542 <_dtoa_r+0x18e>
    4522:	4982      	ldr	r1, [pc, #520]	; (472c <_dtoa_r+0x378>)
    4524:	00db      	lsls	r3, r3, #3
    4526:	18c9      	adds	r1, r1, r3
    4528:	6808      	ldr	r0, [r1, #0]
    452a:	6849      	ldr	r1, [r1, #4]
    452c:	9a06      	ldr	r2, [sp, #24]
    452e:	9b07      	ldr	r3, [sp, #28]
    4530:	f001 feb4 	bl	629c <__aeabi_dcmpgt>
    4534:	2800      	cmp	r0, #0
    4536:	d04b      	beq.n	45d0 <_dtoa_r+0x21c>
    4538:	9b03      	ldr	r3, [sp, #12]
    453a:	3b01      	subs	r3, #1
    453c:	9303      	str	r3, [sp, #12]
    453e:	2300      	movs	r3, #0
    4540:	9316      	str	r3, [sp, #88]	; 0x58
    4542:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4544:	1b9e      	subs	r6, r3, r6
    4546:	2300      	movs	r3, #0
    4548:	930b      	str	r3, [sp, #44]	; 0x2c
    454a:	0033      	movs	r3, r6
    454c:	3b01      	subs	r3, #1
    454e:	930c      	str	r3, [sp, #48]	; 0x30
    4550:	d504      	bpl.n	455c <_dtoa_r+0x1a8>
    4552:	2301      	movs	r3, #1
    4554:	1b9b      	subs	r3, r3, r6
    4556:	930b      	str	r3, [sp, #44]	; 0x2c
    4558:	2300      	movs	r3, #0
    455a:	930c      	str	r3, [sp, #48]	; 0x30
    455c:	9b03      	ldr	r3, [sp, #12]
    455e:	2b00      	cmp	r3, #0
    4560:	db38      	blt.n	45d4 <_dtoa_r+0x220>
    4562:	9a03      	ldr	r2, [sp, #12]
    4564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4566:	4694      	mov	ip, r2
    4568:	4463      	add	r3, ip
    456a:	930c      	str	r3, [sp, #48]	; 0x30
    456c:	2300      	movs	r3, #0
    456e:	920f      	str	r2, [sp, #60]	; 0x3c
    4570:	9308      	str	r3, [sp, #32]
    4572:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4574:	2501      	movs	r5, #1
    4576:	2b09      	cmp	r3, #9
    4578:	d900      	bls.n	457c <_dtoa_r+0x1c8>
    457a:	e091      	b.n	46a0 <_dtoa_r+0x2ec>
    457c:	2b05      	cmp	r3, #5
    457e:	dd02      	ble.n	4586 <_dtoa_r+0x1d2>
    4580:	2500      	movs	r5, #0
    4582:	3b04      	subs	r3, #4
    4584:	9322      	str	r3, [sp, #136]	; 0x88
    4586:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4588:	1e98      	subs	r0, r3, #2
    458a:	2803      	cmp	r0, #3
    458c:	d900      	bls.n	4590 <_dtoa_r+0x1dc>
    458e:	e091      	b.n	46b4 <_dtoa_r+0x300>
    4590:	f001 fcda 	bl	5f48 <__gnu_thumb1_case_uqi>
    4594:	76298482 	.word	0x76298482
    4598:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    459a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    459c:	189e      	adds	r6, r3, r2
    459e:	4b64      	ldr	r3, [pc, #400]	; (4730 <_dtoa_r+0x37c>)
    45a0:	18f2      	adds	r2, r6, r3
    45a2:	2a20      	cmp	r2, #32
    45a4:	dd0f      	ble.n	45c6 <_dtoa_r+0x212>
    45a6:	4b63      	ldr	r3, [pc, #396]	; (4734 <_dtoa_r+0x380>)
    45a8:	9806      	ldr	r0, [sp, #24]
    45aa:	18f3      	adds	r3, r6, r3
    45ac:	40d8      	lsrs	r0, r3
    45ae:	2340      	movs	r3, #64	; 0x40
    45b0:	1a9b      	subs	r3, r3, r2
    45b2:	409c      	lsls	r4, r3
    45b4:	4320      	orrs	r0, r4
    45b6:	f004 f94b 	bl	8850 <__aeabi_ui2d>
    45ba:	2301      	movs	r3, #1
    45bc:	4c5e      	ldr	r4, [pc, #376]	; (4738 <_dtoa_r+0x384>)
    45be:	3e01      	subs	r6, #1
    45c0:	1909      	adds	r1, r1, r4
    45c2:	9318      	str	r3, [sp, #96]	; 0x60
    45c4:	e771      	b.n	44aa <_dtoa_r+0xf6>
    45c6:	2320      	movs	r3, #32
    45c8:	9806      	ldr	r0, [sp, #24]
    45ca:	1a9b      	subs	r3, r3, r2
    45cc:	4098      	lsls	r0, r3
    45ce:	e7f2      	b.n	45b6 <_dtoa_r+0x202>
    45d0:	9016      	str	r0, [sp, #88]	; 0x58
    45d2:	e7b6      	b.n	4542 <_dtoa_r+0x18e>
    45d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    45d6:	9a03      	ldr	r2, [sp, #12]
    45d8:	1a9b      	subs	r3, r3, r2
    45da:	930b      	str	r3, [sp, #44]	; 0x2c
    45dc:	4253      	negs	r3, r2
    45de:	9308      	str	r3, [sp, #32]
    45e0:	2300      	movs	r3, #0
    45e2:	930f      	str	r3, [sp, #60]	; 0x3c
    45e4:	e7c5      	b.n	4572 <_dtoa_r+0x1be>
    45e6:	2301      	movs	r3, #1
    45e8:	930e      	str	r3, [sp, #56]	; 0x38
    45ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    45ec:	2b00      	cmp	r3, #0
    45ee:	dd65      	ble.n	46bc <_dtoa_r+0x308>
    45f0:	001f      	movs	r7, r3
    45f2:	930d      	str	r3, [sp, #52]	; 0x34
    45f4:	9a04      	ldr	r2, [sp, #16]
    45f6:	6a54      	ldr	r4, [r2, #36]	; 0x24
    45f8:	2200      	movs	r2, #0
    45fa:	6062      	str	r2, [r4, #4]
    45fc:	3204      	adds	r2, #4
    45fe:	0011      	movs	r1, r2
    4600:	3114      	adds	r1, #20
    4602:	4299      	cmp	r1, r3
    4604:	d95f      	bls.n	46c6 <_dtoa_r+0x312>
    4606:	6861      	ldr	r1, [r4, #4]
    4608:	9804      	ldr	r0, [sp, #16]
    460a:	f000 fed0 	bl	53ae <_Balloc>
    460e:	9b04      	ldr	r3, [sp, #16]
    4610:	6020      	str	r0, [r4, #0]
    4612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4614:	681b      	ldr	r3, [r3, #0]
    4616:	930a      	str	r3, [sp, #40]	; 0x28
    4618:	2f0e      	cmp	r7, #14
    461a:	d900      	bls.n	461e <_dtoa_r+0x26a>
    461c:	e105      	b.n	482a <_dtoa_r+0x476>
    461e:	2d00      	cmp	r5, #0
    4620:	d100      	bne.n	4624 <_dtoa_r+0x270>
    4622:	e102      	b.n	482a <_dtoa_r+0x476>
    4624:	9b06      	ldr	r3, [sp, #24]
    4626:	9c07      	ldr	r4, [sp, #28]
    4628:	9314      	str	r3, [sp, #80]	; 0x50
    462a:	9415      	str	r4, [sp, #84]	; 0x54
    462c:	9b03      	ldr	r3, [sp, #12]
    462e:	2b00      	cmp	r3, #0
    4630:	dc00      	bgt.n	4634 <_dtoa_r+0x280>
    4632:	e085      	b.n	4740 <_dtoa_r+0x38c>
    4634:	001a      	movs	r2, r3
    4636:	210f      	movs	r1, #15
    4638:	4b3c      	ldr	r3, [pc, #240]	; (472c <_dtoa_r+0x378>)
    463a:	400a      	ands	r2, r1
    463c:	00d2      	lsls	r2, r2, #3
    463e:	189b      	adds	r3, r3, r2
    4640:	685c      	ldr	r4, [r3, #4]
    4642:	681b      	ldr	r3, [r3, #0]
    4644:	9310      	str	r3, [sp, #64]	; 0x40
    4646:	9411      	str	r4, [sp, #68]	; 0x44
    4648:	9b03      	ldr	r3, [sp, #12]
    464a:	2402      	movs	r4, #2
    464c:	111d      	asrs	r5, r3, #4
    464e:	06eb      	lsls	r3, r5, #27
    4650:	d50a      	bpl.n	4668 <_dtoa_r+0x2b4>
    4652:	4b3a      	ldr	r3, [pc, #232]	; (473c <_dtoa_r+0x388>)
    4654:	400d      	ands	r5, r1
    4656:	6a1a      	ldr	r2, [r3, #32]
    4658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    465a:	9814      	ldr	r0, [sp, #80]	; 0x50
    465c:	9915      	ldr	r1, [sp, #84]	; 0x54
    465e:	f002 fe97 	bl	7390 <__aeabi_ddiv>
    4662:	9006      	str	r0, [sp, #24]
    4664:	9107      	str	r1, [sp, #28]
    4666:	3401      	adds	r4, #1
    4668:	4e34      	ldr	r6, [pc, #208]	; (473c <_dtoa_r+0x388>)
    466a:	2d00      	cmp	r5, #0
    466c:	d130      	bne.n	46d0 <_dtoa_r+0x31c>
    466e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4670:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4672:	9806      	ldr	r0, [sp, #24]
    4674:	9907      	ldr	r1, [sp, #28]
    4676:	f002 fe8b 	bl	7390 <__aeabi_ddiv>
    467a:	9006      	str	r0, [sp, #24]
    467c:	9107      	str	r1, [sp, #28]
    467e:	e07a      	b.n	4776 <_dtoa_r+0x3c2>
    4680:	2301      	movs	r3, #1
    4682:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    4684:	930e      	str	r3, [sp, #56]	; 0x38
    4686:	4694      	mov	ip, r2
    4688:	9b03      	ldr	r3, [sp, #12]
    468a:	4463      	add	r3, ip
    468c:	1c5f      	adds	r7, r3, #1
    468e:	930d      	str	r3, [sp, #52]	; 0x34
    4690:	1e3b      	subs	r3, r7, #0
    4692:	dcaf      	bgt.n	45f4 <_dtoa_r+0x240>
    4694:	2301      	movs	r3, #1
    4696:	e7ad      	b.n	45f4 <_dtoa_r+0x240>
    4698:	2300      	movs	r3, #0
    469a:	e7a5      	b.n	45e8 <_dtoa_r+0x234>
    469c:	2300      	movs	r3, #0
    469e:	e7f0      	b.n	4682 <_dtoa_r+0x2ce>
    46a0:	2300      	movs	r3, #0
    46a2:	950e      	str	r5, [sp, #56]	; 0x38
    46a4:	9322      	str	r3, [sp, #136]	; 0x88
    46a6:	3b01      	subs	r3, #1
    46a8:	2200      	movs	r2, #0
    46aa:	930d      	str	r3, [sp, #52]	; 0x34
    46ac:	001f      	movs	r7, r3
    46ae:	3313      	adds	r3, #19
    46b0:	9223      	str	r2, [sp, #140]	; 0x8c
    46b2:	e79f      	b.n	45f4 <_dtoa_r+0x240>
    46b4:	2301      	movs	r3, #1
    46b6:	930e      	str	r3, [sp, #56]	; 0x38
    46b8:	3b02      	subs	r3, #2
    46ba:	e7f5      	b.n	46a8 <_dtoa_r+0x2f4>
    46bc:	2301      	movs	r3, #1
    46be:	930d      	str	r3, [sp, #52]	; 0x34
    46c0:	001f      	movs	r7, r3
    46c2:	001a      	movs	r2, r3
    46c4:	e7f4      	b.n	46b0 <_dtoa_r+0x2fc>
    46c6:	6861      	ldr	r1, [r4, #4]
    46c8:	0052      	lsls	r2, r2, #1
    46ca:	3101      	adds	r1, #1
    46cc:	6061      	str	r1, [r4, #4]
    46ce:	e796      	b.n	45fe <_dtoa_r+0x24a>
    46d0:	2301      	movs	r3, #1
    46d2:	421d      	tst	r5, r3
    46d4:	d008      	beq.n	46e8 <_dtoa_r+0x334>
    46d6:	9810      	ldr	r0, [sp, #64]	; 0x40
    46d8:	9911      	ldr	r1, [sp, #68]	; 0x44
    46da:	18e4      	adds	r4, r4, r3
    46dc:	6832      	ldr	r2, [r6, #0]
    46de:	6873      	ldr	r3, [r6, #4]
    46e0:	f003 fa8a 	bl	7bf8 <__aeabi_dmul>
    46e4:	9010      	str	r0, [sp, #64]	; 0x40
    46e6:	9111      	str	r1, [sp, #68]	; 0x44
    46e8:	106d      	asrs	r5, r5, #1
    46ea:	3608      	adds	r6, #8
    46ec:	e7bd      	b.n	466a <_dtoa_r+0x2b6>
    46ee:	46c0      	nop			; (mov r8, r8)
    46f0:	7ff00000 	.word	0x7ff00000
    46f4:	0000270f 	.word	0x0000270f
    46f8:	00008bdd 	.word	0x00008bdd
    46fc:	00008be0 	.word	0x00008be0
    4700:	00008bb0 	.word	0x00008bb0
    4704:	00008bb1 	.word	0x00008bb1
    4708:	3ff00000 	.word	0x3ff00000
    470c:	fffffc01 	.word	0xfffffc01
    4710:	3ff80000 	.word	0x3ff80000
    4714:	636f4361 	.word	0x636f4361
    4718:	3fd287a7 	.word	0x3fd287a7
    471c:	8b60c8b3 	.word	0x8b60c8b3
    4720:	3fc68a28 	.word	0x3fc68a28
    4724:	509f79fb 	.word	0x509f79fb
    4728:	3fd34413 	.word	0x3fd34413
    472c:	00008c70 	.word	0x00008c70
    4730:	00000432 	.word	0x00000432
    4734:	00000412 	.word	0x00000412
    4738:	fe100000 	.word	0xfe100000
    473c:	00008c48 	.word	0x00008c48
    4740:	9b03      	ldr	r3, [sp, #12]
    4742:	2402      	movs	r4, #2
    4744:	2b00      	cmp	r3, #0
    4746:	d016      	beq.n	4776 <_dtoa_r+0x3c2>
    4748:	9814      	ldr	r0, [sp, #80]	; 0x50
    474a:	9915      	ldr	r1, [sp, #84]	; 0x54
    474c:	425d      	negs	r5, r3
    474e:	230f      	movs	r3, #15
    4750:	4aca      	ldr	r2, [pc, #808]	; (4a7c <_dtoa_r+0x6c8>)
    4752:	402b      	ands	r3, r5
    4754:	00db      	lsls	r3, r3, #3
    4756:	18d3      	adds	r3, r2, r3
    4758:	681a      	ldr	r2, [r3, #0]
    475a:	685b      	ldr	r3, [r3, #4]
    475c:	f003 fa4c 	bl	7bf8 <__aeabi_dmul>
    4760:	2300      	movs	r3, #0
    4762:	9006      	str	r0, [sp, #24]
    4764:	9107      	str	r1, [sp, #28]
    4766:	4ec6      	ldr	r6, [pc, #792]	; (4a80 <_dtoa_r+0x6cc>)
    4768:	112d      	asrs	r5, r5, #4
    476a:	2d00      	cmp	r5, #0
    476c:	d000      	beq.n	4770 <_dtoa_r+0x3bc>
    476e:	e08c      	b.n	488a <_dtoa_r+0x4d6>
    4770:	2b00      	cmp	r3, #0
    4772:	d000      	beq.n	4776 <_dtoa_r+0x3c2>
    4774:	e781      	b.n	467a <_dtoa_r+0x2c6>
    4776:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4778:	2b00      	cmp	r3, #0
    477a:	d100      	bne.n	477e <_dtoa_r+0x3ca>
    477c:	e091      	b.n	48a2 <_dtoa_r+0x4ee>
    477e:	9a06      	ldr	r2, [sp, #24]
    4780:	9b07      	ldr	r3, [sp, #28]
    4782:	9210      	str	r2, [sp, #64]	; 0x40
    4784:	9311      	str	r3, [sp, #68]	; 0x44
    4786:	9810      	ldr	r0, [sp, #64]	; 0x40
    4788:	9911      	ldr	r1, [sp, #68]	; 0x44
    478a:	2200      	movs	r2, #0
    478c:	4bbd      	ldr	r3, [pc, #756]	; (4a84 <_dtoa_r+0x6d0>)
    478e:	f001 fd71 	bl	6274 <__aeabi_dcmplt>
    4792:	2800      	cmp	r0, #0
    4794:	d100      	bne.n	4798 <_dtoa_r+0x3e4>
    4796:	e084      	b.n	48a2 <_dtoa_r+0x4ee>
    4798:	2f00      	cmp	r7, #0
    479a:	d100      	bne.n	479e <_dtoa_r+0x3ea>
    479c:	e081      	b.n	48a2 <_dtoa_r+0x4ee>
    479e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    47a0:	2b00      	cmp	r3, #0
    47a2:	dd3e      	ble.n	4822 <_dtoa_r+0x46e>
    47a4:	9810      	ldr	r0, [sp, #64]	; 0x40
    47a6:	9911      	ldr	r1, [sp, #68]	; 0x44
    47a8:	9b03      	ldr	r3, [sp, #12]
    47aa:	2200      	movs	r2, #0
    47ac:	1e5e      	subs	r6, r3, #1
    47ae:	4bb6      	ldr	r3, [pc, #728]	; (4a88 <_dtoa_r+0x6d4>)
    47b0:	f003 fa22 	bl	7bf8 <__aeabi_dmul>
    47b4:	9006      	str	r0, [sp, #24]
    47b6:	9107      	str	r1, [sp, #28]
    47b8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    47ba:	3401      	adds	r4, #1
    47bc:	0020      	movs	r0, r4
    47be:	f004 f805 	bl	87cc <__aeabi_i2d>
    47c2:	9a06      	ldr	r2, [sp, #24]
    47c4:	9b07      	ldr	r3, [sp, #28]
    47c6:	f003 fa17 	bl	7bf8 <__aeabi_dmul>
    47ca:	2200      	movs	r2, #0
    47cc:	4baf      	ldr	r3, [pc, #700]	; (4a8c <_dtoa_r+0x6d8>)
    47ce:	f002 facf 	bl	6d70 <__aeabi_dadd>
    47d2:	9012      	str	r0, [sp, #72]	; 0x48
    47d4:	9113      	str	r1, [sp, #76]	; 0x4c
    47d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    47d8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    47da:	4aad      	ldr	r2, [pc, #692]	; (4a90 <_dtoa_r+0x6dc>)
    47dc:	9310      	str	r3, [sp, #64]	; 0x40
    47de:	9411      	str	r4, [sp, #68]	; 0x44
    47e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    47e2:	189c      	adds	r4, r3, r2
    47e4:	9411      	str	r4, [sp, #68]	; 0x44
    47e6:	2d00      	cmp	r5, #0
    47e8:	d15e      	bne.n	48a8 <_dtoa_r+0x4f4>
    47ea:	9806      	ldr	r0, [sp, #24]
    47ec:	9907      	ldr	r1, [sp, #28]
    47ee:	2200      	movs	r2, #0
    47f0:	4ba8      	ldr	r3, [pc, #672]	; (4a94 <_dtoa_r+0x6e0>)
    47f2:	f003 fc81 	bl	80f8 <__aeabi_dsub>
    47f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    47f8:	0023      	movs	r3, r4
    47fa:	9006      	str	r0, [sp, #24]
    47fc:	9107      	str	r1, [sp, #28]
    47fe:	f001 fd4d 	bl	629c <__aeabi_dcmpgt>
    4802:	2800      	cmp	r0, #0
    4804:	d000      	beq.n	4808 <_dtoa_r+0x454>
    4806:	e301      	b.n	4e0c <_dtoa_r+0xa58>
    4808:	48a3      	ldr	r0, [pc, #652]	; (4a98 <_dtoa_r+0x6e4>)
    480a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    480c:	4684      	mov	ip, r0
    480e:	4461      	add	r1, ip
    4810:	000b      	movs	r3, r1
    4812:	9806      	ldr	r0, [sp, #24]
    4814:	9907      	ldr	r1, [sp, #28]
    4816:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4818:	f001 fd2c 	bl	6274 <__aeabi_dcmplt>
    481c:	2800      	cmp	r0, #0
    481e:	d000      	beq.n	4822 <_dtoa_r+0x46e>
    4820:	e2e8      	b.n	4df4 <_dtoa_r+0xa40>
    4822:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4824:	9c15      	ldr	r4, [sp, #84]	; 0x54
    4826:	9306      	str	r3, [sp, #24]
    4828:	9407      	str	r4, [sp, #28]
    482a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    482c:	2b00      	cmp	r3, #0
    482e:	da00      	bge.n	4832 <_dtoa_r+0x47e>
    4830:	e157      	b.n	4ae2 <_dtoa_r+0x72e>
    4832:	9a03      	ldr	r2, [sp, #12]
    4834:	2a0e      	cmp	r2, #14
    4836:	dd00      	ble.n	483a <_dtoa_r+0x486>
    4838:	e153      	b.n	4ae2 <_dtoa_r+0x72e>
    483a:	4b90      	ldr	r3, [pc, #576]	; (4a7c <_dtoa_r+0x6c8>)
    483c:	00d2      	lsls	r2, r2, #3
    483e:	189b      	adds	r3, r3, r2
    4840:	685c      	ldr	r4, [r3, #4]
    4842:	681b      	ldr	r3, [r3, #0]
    4844:	9308      	str	r3, [sp, #32]
    4846:	9409      	str	r4, [sp, #36]	; 0x24
    4848:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    484a:	2b00      	cmp	r3, #0
    484c:	db00      	blt.n	4850 <_dtoa_r+0x49c>
    484e:	e0ce      	b.n	49ee <_dtoa_r+0x63a>
    4850:	2f00      	cmp	r7, #0
    4852:	dd00      	ble.n	4856 <_dtoa_r+0x4a2>
    4854:	e0cb      	b.n	49ee <_dtoa_r+0x63a>
    4856:	d000      	beq.n	485a <_dtoa_r+0x4a6>
    4858:	e2cf      	b.n	4dfa <_dtoa_r+0xa46>
    485a:	9808      	ldr	r0, [sp, #32]
    485c:	9909      	ldr	r1, [sp, #36]	; 0x24
    485e:	2200      	movs	r2, #0
    4860:	4b8c      	ldr	r3, [pc, #560]	; (4a94 <_dtoa_r+0x6e0>)
    4862:	f003 f9c9 	bl	7bf8 <__aeabi_dmul>
    4866:	9a06      	ldr	r2, [sp, #24]
    4868:	9b07      	ldr	r3, [sp, #28]
    486a:	f001 fd21 	bl	62b0 <__aeabi_dcmpge>
    486e:	003e      	movs	r6, r7
    4870:	9708      	str	r7, [sp, #32]
    4872:	2800      	cmp	r0, #0
    4874:	d000      	beq.n	4878 <_dtoa_r+0x4c4>
    4876:	e2a4      	b.n	4dc2 <_dtoa_r+0xa0e>
    4878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    487a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    487c:	1c5d      	adds	r5, r3, #1
    487e:	2331      	movs	r3, #49	; 0x31
    4880:	7013      	strb	r3, [r2, #0]
    4882:	9b03      	ldr	r3, [sp, #12]
    4884:	3301      	adds	r3, #1
    4886:	9303      	str	r3, [sp, #12]
    4888:	e29f      	b.n	4dca <_dtoa_r+0xa16>
    488a:	2201      	movs	r2, #1
    488c:	4215      	tst	r5, r2
    488e:	d005      	beq.n	489c <_dtoa_r+0x4e8>
    4890:	18a4      	adds	r4, r4, r2
    4892:	6832      	ldr	r2, [r6, #0]
    4894:	6873      	ldr	r3, [r6, #4]
    4896:	f003 f9af 	bl	7bf8 <__aeabi_dmul>
    489a:	2301      	movs	r3, #1
    489c:	106d      	asrs	r5, r5, #1
    489e:	3608      	adds	r6, #8
    48a0:	e763      	b.n	476a <_dtoa_r+0x3b6>
    48a2:	9e03      	ldr	r6, [sp, #12]
    48a4:	003d      	movs	r5, r7
    48a6:	e789      	b.n	47bc <_dtoa_r+0x408>
    48a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    48aa:	1e69      	subs	r1, r5, #1
    48ac:	1952      	adds	r2, r2, r5
    48ae:	9217      	str	r2, [sp, #92]	; 0x5c
    48b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    48b2:	4b72      	ldr	r3, [pc, #456]	; (4a7c <_dtoa_r+0x6c8>)
    48b4:	00c9      	lsls	r1, r1, #3
    48b6:	2a00      	cmp	r2, #0
    48b8:	d04a      	beq.n	4950 <_dtoa_r+0x59c>
    48ba:	185b      	adds	r3, r3, r1
    48bc:	681a      	ldr	r2, [r3, #0]
    48be:	685b      	ldr	r3, [r3, #4]
    48c0:	2000      	movs	r0, #0
    48c2:	4976      	ldr	r1, [pc, #472]	; (4a9c <_dtoa_r+0x6e8>)
    48c4:	f002 fd64 	bl	7390 <__aeabi_ddiv>
    48c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    48ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
    48cc:	f003 fc14 	bl	80f8 <__aeabi_dsub>
    48d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    48d2:	9010      	str	r0, [sp, #64]	; 0x40
    48d4:	9111      	str	r1, [sp, #68]	; 0x44
    48d6:	9312      	str	r3, [sp, #72]	; 0x48
    48d8:	9806      	ldr	r0, [sp, #24]
    48da:	9907      	ldr	r1, [sp, #28]
    48dc:	f003 ff42 	bl	8764 <__aeabi_d2iz>
    48e0:	0004      	movs	r4, r0
    48e2:	f003 ff73 	bl	87cc <__aeabi_i2d>
    48e6:	0002      	movs	r2, r0
    48e8:	000b      	movs	r3, r1
    48ea:	9806      	ldr	r0, [sp, #24]
    48ec:	9907      	ldr	r1, [sp, #28]
    48ee:	f003 fc03 	bl	80f8 <__aeabi_dsub>
    48f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    48f4:	3430      	adds	r4, #48	; 0x30
    48f6:	1c5d      	adds	r5, r3, #1
    48f8:	701c      	strb	r4, [r3, #0]
    48fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    48fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    48fe:	9006      	str	r0, [sp, #24]
    4900:	9107      	str	r1, [sp, #28]
    4902:	f001 fcb7 	bl	6274 <__aeabi_dcmplt>
    4906:	2800      	cmp	r0, #0
    4908:	d165      	bne.n	49d6 <_dtoa_r+0x622>
    490a:	9a06      	ldr	r2, [sp, #24]
    490c:	9b07      	ldr	r3, [sp, #28]
    490e:	2000      	movs	r0, #0
    4910:	495c      	ldr	r1, [pc, #368]	; (4a84 <_dtoa_r+0x6d0>)
    4912:	f003 fbf1 	bl	80f8 <__aeabi_dsub>
    4916:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4918:	9b11      	ldr	r3, [sp, #68]	; 0x44
    491a:	f001 fcab 	bl	6274 <__aeabi_dcmplt>
    491e:	2800      	cmp	r0, #0
    4920:	d000      	beq.n	4924 <_dtoa_r+0x570>
    4922:	e0be      	b.n	4aa2 <_dtoa_r+0x6ee>
    4924:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    4926:	429d      	cmp	r5, r3
    4928:	d100      	bne.n	492c <_dtoa_r+0x578>
    492a:	e77a      	b.n	4822 <_dtoa_r+0x46e>
    492c:	9810      	ldr	r0, [sp, #64]	; 0x40
    492e:	9911      	ldr	r1, [sp, #68]	; 0x44
    4930:	2200      	movs	r2, #0
    4932:	4b55      	ldr	r3, [pc, #340]	; (4a88 <_dtoa_r+0x6d4>)
    4934:	f003 f960 	bl	7bf8 <__aeabi_dmul>
    4938:	2200      	movs	r2, #0
    493a:	9010      	str	r0, [sp, #64]	; 0x40
    493c:	9111      	str	r1, [sp, #68]	; 0x44
    493e:	9806      	ldr	r0, [sp, #24]
    4940:	9907      	ldr	r1, [sp, #28]
    4942:	4b51      	ldr	r3, [pc, #324]	; (4a88 <_dtoa_r+0x6d4>)
    4944:	f003 f958 	bl	7bf8 <__aeabi_dmul>
    4948:	9512      	str	r5, [sp, #72]	; 0x48
    494a:	9006      	str	r0, [sp, #24]
    494c:	9107      	str	r1, [sp, #28]
    494e:	e7c3      	b.n	48d8 <_dtoa_r+0x524>
    4950:	1859      	adds	r1, r3, r1
    4952:	6808      	ldr	r0, [r1, #0]
    4954:	6849      	ldr	r1, [r1, #4]
    4956:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4958:	9b11      	ldr	r3, [sp, #68]	; 0x44
    495a:	f003 f94d 	bl	7bf8 <__aeabi_dmul>
    495e:	9010      	str	r0, [sp, #64]	; 0x40
    4960:	9111      	str	r1, [sp, #68]	; 0x44
    4962:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4964:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    4966:	9806      	ldr	r0, [sp, #24]
    4968:	9907      	ldr	r1, [sp, #28]
    496a:	f003 fefb 	bl	8764 <__aeabi_d2iz>
    496e:	9012      	str	r0, [sp, #72]	; 0x48
    4970:	f003 ff2c 	bl	87cc <__aeabi_i2d>
    4974:	0002      	movs	r2, r0
    4976:	000b      	movs	r3, r1
    4978:	9806      	ldr	r0, [sp, #24]
    497a:	9907      	ldr	r1, [sp, #28]
    497c:	f003 fbbc 	bl	80f8 <__aeabi_dsub>
    4980:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4982:	9006      	str	r0, [sp, #24]
    4984:	9107      	str	r1, [sp, #28]
    4986:	3330      	adds	r3, #48	; 0x30
    4988:	7023      	strb	r3, [r4, #0]
    498a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    498c:	3401      	adds	r4, #1
    498e:	2200      	movs	r2, #0
    4990:	42a3      	cmp	r3, r4
    4992:	d124      	bne.n	49de <_dtoa_r+0x62a>
    4994:	4b41      	ldr	r3, [pc, #260]	; (4a9c <_dtoa_r+0x6e8>)
    4996:	9810      	ldr	r0, [sp, #64]	; 0x40
    4998:	9911      	ldr	r1, [sp, #68]	; 0x44
    499a:	f002 f9e9 	bl	6d70 <__aeabi_dadd>
    499e:	0002      	movs	r2, r0
    49a0:	000b      	movs	r3, r1
    49a2:	9806      	ldr	r0, [sp, #24]
    49a4:	9907      	ldr	r1, [sp, #28]
    49a6:	f001 fc79 	bl	629c <__aeabi_dcmpgt>
    49aa:	2800      	cmp	r0, #0
    49ac:	d000      	beq.n	49b0 <_dtoa_r+0x5fc>
    49ae:	e078      	b.n	4aa2 <_dtoa_r+0x6ee>
    49b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    49b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    49b4:	2000      	movs	r0, #0
    49b6:	4939      	ldr	r1, [pc, #228]	; (4a9c <_dtoa_r+0x6e8>)
    49b8:	f003 fb9e 	bl	80f8 <__aeabi_dsub>
    49bc:	0002      	movs	r2, r0
    49be:	000b      	movs	r3, r1
    49c0:	9806      	ldr	r0, [sp, #24]
    49c2:	9907      	ldr	r1, [sp, #28]
    49c4:	f001 fc56 	bl	6274 <__aeabi_dcmplt>
    49c8:	2800      	cmp	r0, #0
    49ca:	d100      	bne.n	49ce <_dtoa_r+0x61a>
    49cc:	e729      	b.n	4822 <_dtoa_r+0x46e>
    49ce:	1e6b      	subs	r3, r5, #1
    49d0:	781a      	ldrb	r2, [r3, #0]
    49d2:	2a30      	cmp	r2, #48	; 0x30
    49d4:	d001      	beq.n	49da <_dtoa_r+0x626>
    49d6:	9603      	str	r6, [sp, #12]
    49d8:	e03f      	b.n	4a5a <_dtoa_r+0x6a6>
    49da:	001d      	movs	r5, r3
    49dc:	e7f7      	b.n	49ce <_dtoa_r+0x61a>
    49de:	9806      	ldr	r0, [sp, #24]
    49e0:	9907      	ldr	r1, [sp, #28]
    49e2:	4b29      	ldr	r3, [pc, #164]	; (4a88 <_dtoa_r+0x6d4>)
    49e4:	f003 f908 	bl	7bf8 <__aeabi_dmul>
    49e8:	9006      	str	r0, [sp, #24]
    49ea:	9107      	str	r1, [sp, #28]
    49ec:	e7bb      	b.n	4966 <_dtoa_r+0x5b2>
    49ee:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    49f0:	9a08      	ldr	r2, [sp, #32]
    49f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    49f4:	9806      	ldr	r0, [sp, #24]
    49f6:	9907      	ldr	r1, [sp, #28]
    49f8:	f002 fcca 	bl	7390 <__aeabi_ddiv>
    49fc:	f003 feb2 	bl	8764 <__aeabi_d2iz>
    4a00:	0004      	movs	r4, r0
    4a02:	f003 fee3 	bl	87cc <__aeabi_i2d>
    4a06:	9a08      	ldr	r2, [sp, #32]
    4a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4a0a:	f003 f8f5 	bl	7bf8 <__aeabi_dmul>
    4a0e:	000b      	movs	r3, r1
    4a10:	0002      	movs	r2, r0
    4a12:	9806      	ldr	r0, [sp, #24]
    4a14:	9907      	ldr	r1, [sp, #28]
    4a16:	f003 fb6f 	bl	80f8 <__aeabi_dsub>
    4a1a:	0023      	movs	r3, r4
    4a1c:	3330      	adds	r3, #48	; 0x30
    4a1e:	7033      	strb	r3, [r6, #0]
    4a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4a22:	1c75      	adds	r5, r6, #1
    4a24:	1aeb      	subs	r3, r5, r3
    4a26:	429f      	cmp	r7, r3
    4a28:	d14c      	bne.n	4ac4 <_dtoa_r+0x710>
    4a2a:	0002      	movs	r2, r0
    4a2c:	000b      	movs	r3, r1
    4a2e:	f002 f99f 	bl	6d70 <__aeabi_dadd>
    4a32:	0006      	movs	r6, r0
    4a34:	000f      	movs	r7, r1
    4a36:	0002      	movs	r2, r0
    4a38:	000b      	movs	r3, r1
    4a3a:	9808      	ldr	r0, [sp, #32]
    4a3c:	9909      	ldr	r1, [sp, #36]	; 0x24
    4a3e:	f001 fc19 	bl	6274 <__aeabi_dcmplt>
    4a42:	2800      	cmp	r0, #0
    4a44:	d12c      	bne.n	4aa0 <_dtoa_r+0x6ec>
    4a46:	9808      	ldr	r0, [sp, #32]
    4a48:	9909      	ldr	r1, [sp, #36]	; 0x24
    4a4a:	0032      	movs	r2, r6
    4a4c:	003b      	movs	r3, r7
    4a4e:	f001 fc0b 	bl	6268 <__aeabi_dcmpeq>
    4a52:	2800      	cmp	r0, #0
    4a54:	d001      	beq.n	4a5a <_dtoa_r+0x6a6>
    4a56:	07e3      	lsls	r3, r4, #31
    4a58:	d422      	bmi.n	4aa0 <_dtoa_r+0x6ec>
    4a5a:	9905      	ldr	r1, [sp, #20]
    4a5c:	9804      	ldr	r0, [sp, #16]
    4a5e:	f000 fcde 	bl	541e <_Bfree>
    4a62:	2300      	movs	r3, #0
    4a64:	702b      	strb	r3, [r5, #0]
    4a66:	9b03      	ldr	r3, [sp, #12]
    4a68:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4a6a:	3301      	adds	r3, #1
    4a6c:	6013      	str	r3, [r2, #0]
    4a6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    4a70:	2b00      	cmp	r3, #0
    4a72:	d100      	bne.n	4a76 <_dtoa_r+0x6c2>
    4a74:	e275      	b.n	4f62 <_dtoa_r+0xbae>
    4a76:	601d      	str	r5, [r3, #0]
    4a78:	e273      	b.n	4f62 <_dtoa_r+0xbae>
    4a7a:	46c0      	nop			; (mov r8, r8)
    4a7c:	00008c70 	.word	0x00008c70
    4a80:	00008c48 	.word	0x00008c48
    4a84:	3ff00000 	.word	0x3ff00000
    4a88:	40240000 	.word	0x40240000
    4a8c:	401c0000 	.word	0x401c0000
    4a90:	fcc00000 	.word	0xfcc00000
    4a94:	40140000 	.word	0x40140000
    4a98:	7cc00000 	.word	0x7cc00000
    4a9c:	3fe00000 	.word	0x3fe00000
    4aa0:	9e03      	ldr	r6, [sp, #12]
    4aa2:	1e6b      	subs	r3, r5, #1
    4aa4:	781a      	ldrb	r2, [r3, #0]
    4aa6:	2a39      	cmp	r2, #57	; 0x39
    4aa8:	d106      	bne.n	4ab8 <_dtoa_r+0x704>
    4aaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4aac:	429a      	cmp	r2, r3
    4aae:	d107      	bne.n	4ac0 <_dtoa_r+0x70c>
    4ab0:	2330      	movs	r3, #48	; 0x30
    4ab2:	7013      	strb	r3, [r2, #0]
    4ab4:	0013      	movs	r3, r2
    4ab6:	3601      	adds	r6, #1
    4ab8:	781a      	ldrb	r2, [r3, #0]
    4aba:	3201      	adds	r2, #1
    4abc:	701a      	strb	r2, [r3, #0]
    4abe:	e78a      	b.n	49d6 <_dtoa_r+0x622>
    4ac0:	001d      	movs	r5, r3
    4ac2:	e7ee      	b.n	4aa2 <_dtoa_r+0x6ee>
    4ac4:	2200      	movs	r2, #0
    4ac6:	4bcf      	ldr	r3, [pc, #828]	; (4e04 <_dtoa_r+0xa50>)
    4ac8:	f003 f896 	bl	7bf8 <__aeabi_dmul>
    4acc:	2200      	movs	r2, #0
    4ace:	2300      	movs	r3, #0
    4ad0:	9006      	str	r0, [sp, #24]
    4ad2:	9107      	str	r1, [sp, #28]
    4ad4:	002e      	movs	r6, r5
    4ad6:	f001 fbc7 	bl	6268 <__aeabi_dcmpeq>
    4ada:	2800      	cmp	r0, #0
    4adc:	d100      	bne.n	4ae0 <_dtoa_r+0x72c>
    4ade:	e787      	b.n	49f0 <_dtoa_r+0x63c>
    4ae0:	e7bb      	b.n	4a5a <_dtoa_r+0x6a6>
    4ae2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4ae4:	2a00      	cmp	r2, #0
    4ae6:	d100      	bne.n	4aea <_dtoa_r+0x736>
    4ae8:	e087      	b.n	4bfa <_dtoa_r+0x846>
    4aea:	9a22      	ldr	r2, [sp, #136]	; 0x88
    4aec:	2a01      	cmp	r2, #1
    4aee:	dc6e      	bgt.n	4bce <_dtoa_r+0x81a>
    4af0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    4af2:	2a00      	cmp	r2, #0
    4af4:	d067      	beq.n	4bc6 <_dtoa_r+0x812>
    4af6:	4ac4      	ldr	r2, [pc, #784]	; (4e08 <_dtoa_r+0xa54>)
    4af8:	189b      	adds	r3, r3, r2
    4afa:	9d08      	ldr	r5, [sp, #32]
    4afc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4afe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4b00:	2101      	movs	r1, #1
    4b02:	18d2      	adds	r2, r2, r3
    4b04:	920b      	str	r2, [sp, #44]	; 0x2c
    4b06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4b08:	9804      	ldr	r0, [sp, #16]
    4b0a:	18d3      	adds	r3, r2, r3
    4b0c:	930c      	str	r3, [sp, #48]	; 0x30
    4b0e:	f000 fd24 	bl	555a <__i2b>
    4b12:	0006      	movs	r6, r0
    4b14:	2c00      	cmp	r4, #0
    4b16:	dd0e      	ble.n	4b36 <_dtoa_r+0x782>
    4b18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4b1a:	2b00      	cmp	r3, #0
    4b1c:	dd0b      	ble.n	4b36 <_dtoa_r+0x782>
    4b1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4b20:	0023      	movs	r3, r4
    4b22:	4294      	cmp	r4, r2
    4b24:	dd00      	ble.n	4b28 <_dtoa_r+0x774>
    4b26:	0013      	movs	r3, r2
    4b28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4b2a:	1ae4      	subs	r4, r4, r3
    4b2c:	1ad2      	subs	r2, r2, r3
    4b2e:	920b      	str	r2, [sp, #44]	; 0x2c
    4b30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4b32:	1ad3      	subs	r3, r2, r3
    4b34:	930c      	str	r3, [sp, #48]	; 0x30
    4b36:	9b08      	ldr	r3, [sp, #32]
    4b38:	2b00      	cmp	r3, #0
    4b3a:	d01e      	beq.n	4b7a <_dtoa_r+0x7c6>
    4b3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4b3e:	2b00      	cmp	r3, #0
    4b40:	d05f      	beq.n	4c02 <_dtoa_r+0x84e>
    4b42:	2d00      	cmp	r5, #0
    4b44:	dd11      	ble.n	4b6a <_dtoa_r+0x7b6>
    4b46:	0031      	movs	r1, r6
    4b48:	002a      	movs	r2, r5
    4b4a:	9804      	ldr	r0, [sp, #16]
    4b4c:	f000 fd9e 	bl	568c <__pow5mult>
    4b50:	9a05      	ldr	r2, [sp, #20]
    4b52:	0001      	movs	r1, r0
    4b54:	0006      	movs	r6, r0
    4b56:	9804      	ldr	r0, [sp, #16]
    4b58:	f000 fd08 	bl	556c <__multiply>
    4b5c:	9905      	ldr	r1, [sp, #20]
    4b5e:	9010      	str	r0, [sp, #64]	; 0x40
    4b60:	9804      	ldr	r0, [sp, #16]
    4b62:	f000 fc5c 	bl	541e <_Bfree>
    4b66:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4b68:	9305      	str	r3, [sp, #20]
    4b6a:	9b08      	ldr	r3, [sp, #32]
    4b6c:	1b5a      	subs	r2, r3, r5
    4b6e:	d004      	beq.n	4b7a <_dtoa_r+0x7c6>
    4b70:	9905      	ldr	r1, [sp, #20]
    4b72:	9804      	ldr	r0, [sp, #16]
    4b74:	f000 fd8a 	bl	568c <__pow5mult>
    4b78:	9005      	str	r0, [sp, #20]
    4b7a:	2101      	movs	r1, #1
    4b7c:	9804      	ldr	r0, [sp, #16]
    4b7e:	f000 fcec 	bl	555a <__i2b>
    4b82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4b84:	9008      	str	r0, [sp, #32]
    4b86:	2b00      	cmp	r3, #0
    4b88:	dd3d      	ble.n	4c06 <_dtoa_r+0x852>
    4b8a:	001a      	movs	r2, r3
    4b8c:	0001      	movs	r1, r0
    4b8e:	9804      	ldr	r0, [sp, #16]
    4b90:	f000 fd7c 	bl	568c <__pow5mult>
    4b94:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4b96:	9008      	str	r0, [sp, #32]
    4b98:	2500      	movs	r5, #0
    4b9a:	2b01      	cmp	r3, #1
    4b9c:	dc3b      	bgt.n	4c16 <_dtoa_r+0x862>
    4b9e:	2500      	movs	r5, #0
    4ba0:	9b06      	ldr	r3, [sp, #24]
    4ba2:	42ab      	cmp	r3, r5
    4ba4:	d133      	bne.n	4c0e <_dtoa_r+0x85a>
    4ba6:	9b07      	ldr	r3, [sp, #28]
    4ba8:	031b      	lsls	r3, r3, #12
    4baa:	42ab      	cmp	r3, r5
    4bac:	d12f      	bne.n	4c0e <_dtoa_r+0x85a>
    4bae:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4bb0:	9a07      	ldr	r2, [sp, #28]
    4bb2:	4213      	tst	r3, r2
    4bb4:	d02b      	beq.n	4c0e <_dtoa_r+0x85a>
    4bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4bb8:	3501      	adds	r5, #1
    4bba:	3301      	adds	r3, #1
    4bbc:	930b      	str	r3, [sp, #44]	; 0x2c
    4bbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4bc0:	3301      	adds	r3, #1
    4bc2:	930c      	str	r3, [sp, #48]	; 0x30
    4bc4:	e023      	b.n	4c0e <_dtoa_r+0x85a>
    4bc6:	2336      	movs	r3, #54	; 0x36
    4bc8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    4bca:	1a9b      	subs	r3, r3, r2
    4bcc:	e795      	b.n	4afa <_dtoa_r+0x746>
    4bce:	9b08      	ldr	r3, [sp, #32]
    4bd0:	1e7d      	subs	r5, r7, #1
    4bd2:	42ab      	cmp	r3, r5
    4bd4:	db06      	blt.n	4be4 <_dtoa_r+0x830>
    4bd6:	1b5d      	subs	r5, r3, r5
    4bd8:	2f00      	cmp	r7, #0
    4bda:	da0b      	bge.n	4bf4 <_dtoa_r+0x840>
    4bdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4bde:	1bdc      	subs	r4, r3, r7
    4be0:	2300      	movs	r3, #0
    4be2:	e78c      	b.n	4afe <_dtoa_r+0x74a>
    4be4:	9b08      	ldr	r3, [sp, #32]
    4be6:	9508      	str	r5, [sp, #32]
    4be8:	1aea      	subs	r2, r5, r3
    4bea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4bec:	2500      	movs	r5, #0
    4bee:	189b      	adds	r3, r3, r2
    4bf0:	930f      	str	r3, [sp, #60]	; 0x3c
    4bf2:	e7f1      	b.n	4bd8 <_dtoa_r+0x824>
    4bf4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4bf6:	003b      	movs	r3, r7
    4bf8:	e781      	b.n	4afe <_dtoa_r+0x74a>
    4bfa:	9d08      	ldr	r5, [sp, #32]
    4bfc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4bfe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4c00:	e788      	b.n	4b14 <_dtoa_r+0x760>
    4c02:	9a08      	ldr	r2, [sp, #32]
    4c04:	e7b4      	b.n	4b70 <_dtoa_r+0x7bc>
    4c06:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4c08:	2500      	movs	r5, #0
    4c0a:	2b01      	cmp	r3, #1
    4c0c:	ddc7      	ble.n	4b9e <_dtoa_r+0x7ea>
    4c0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4c10:	2001      	movs	r0, #1
    4c12:	2b00      	cmp	r3, #0
    4c14:	d00b      	beq.n	4c2e <_dtoa_r+0x87a>
    4c16:	9b08      	ldr	r3, [sp, #32]
    4c18:	9a08      	ldr	r2, [sp, #32]
    4c1a:	691b      	ldr	r3, [r3, #16]
    4c1c:	930f      	str	r3, [sp, #60]	; 0x3c
    4c1e:	3303      	adds	r3, #3
    4c20:	009b      	lsls	r3, r3, #2
    4c22:	18d3      	adds	r3, r2, r3
    4c24:	6858      	ldr	r0, [r3, #4]
    4c26:	f000 fc4f 	bl	54c8 <__hi0bits>
    4c2a:	2320      	movs	r3, #32
    4c2c:	1a18      	subs	r0, r3, r0
    4c2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4c30:	18c0      	adds	r0, r0, r3
    4c32:	231f      	movs	r3, #31
    4c34:	4018      	ands	r0, r3
    4c36:	d100      	bne.n	4c3a <_dtoa_r+0x886>
    4c38:	e0ab      	b.n	4d92 <_dtoa_r+0x9de>
    4c3a:	3301      	adds	r3, #1
    4c3c:	1a1b      	subs	r3, r3, r0
    4c3e:	2b04      	cmp	r3, #4
    4c40:	dc00      	bgt.n	4c44 <_dtoa_r+0x890>
    4c42:	e09b      	b.n	4d7c <_dtoa_r+0x9c8>
    4c44:	231c      	movs	r3, #28
    4c46:	1a18      	subs	r0, r3, r0
    4c48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4c4a:	1824      	adds	r4, r4, r0
    4c4c:	181b      	adds	r3, r3, r0
    4c4e:	930b      	str	r3, [sp, #44]	; 0x2c
    4c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4c52:	181b      	adds	r3, r3, r0
    4c54:	930c      	str	r3, [sp, #48]	; 0x30
    4c56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4c58:	2b00      	cmp	r3, #0
    4c5a:	dd05      	ble.n	4c68 <_dtoa_r+0x8b4>
    4c5c:	001a      	movs	r2, r3
    4c5e:	9905      	ldr	r1, [sp, #20]
    4c60:	9804      	ldr	r0, [sp, #16]
    4c62:	f000 fd65 	bl	5730 <__lshift>
    4c66:	9005      	str	r0, [sp, #20]
    4c68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4c6a:	2b00      	cmp	r3, #0
    4c6c:	dd05      	ble.n	4c7a <_dtoa_r+0x8c6>
    4c6e:	001a      	movs	r2, r3
    4c70:	9908      	ldr	r1, [sp, #32]
    4c72:	9804      	ldr	r0, [sp, #16]
    4c74:	f000 fd5c 	bl	5730 <__lshift>
    4c78:	9008      	str	r0, [sp, #32]
    4c7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4c7c:	2b00      	cmp	r3, #0
    4c7e:	d100      	bne.n	4c82 <_dtoa_r+0x8ce>
    4c80:	e089      	b.n	4d96 <_dtoa_r+0x9e2>
    4c82:	9908      	ldr	r1, [sp, #32]
    4c84:	9805      	ldr	r0, [sp, #20]
    4c86:	f000 fda4 	bl	57d2 <__mcmp>
    4c8a:	2800      	cmp	r0, #0
    4c8c:	db00      	blt.n	4c90 <_dtoa_r+0x8dc>
    4c8e:	e082      	b.n	4d96 <_dtoa_r+0x9e2>
    4c90:	9b03      	ldr	r3, [sp, #12]
    4c92:	220a      	movs	r2, #10
    4c94:	3b01      	subs	r3, #1
    4c96:	9303      	str	r3, [sp, #12]
    4c98:	9905      	ldr	r1, [sp, #20]
    4c9a:	2300      	movs	r3, #0
    4c9c:	9804      	ldr	r0, [sp, #16]
    4c9e:	f000 fbd7 	bl	5450 <__multadd>
    4ca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4ca4:	9005      	str	r0, [sp, #20]
    4ca6:	2b00      	cmp	r3, #0
    4ca8:	d100      	bne.n	4cac <_dtoa_r+0x8f8>
    4caa:	e15d      	b.n	4f68 <_dtoa_r+0xbb4>
    4cac:	2300      	movs	r3, #0
    4cae:	0031      	movs	r1, r6
    4cb0:	220a      	movs	r2, #10
    4cb2:	9804      	ldr	r0, [sp, #16]
    4cb4:	f000 fbcc 	bl	5450 <__multadd>
    4cb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4cba:	0006      	movs	r6, r0
    4cbc:	2b00      	cmp	r3, #0
    4cbe:	dc02      	bgt.n	4cc6 <_dtoa_r+0x912>
    4cc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4cc2:	2b02      	cmp	r3, #2
    4cc4:	dc6d      	bgt.n	4da2 <_dtoa_r+0x9ee>
    4cc6:	2c00      	cmp	r4, #0
    4cc8:	dd05      	ble.n	4cd6 <_dtoa_r+0x922>
    4cca:	0031      	movs	r1, r6
    4ccc:	0022      	movs	r2, r4
    4cce:	9804      	ldr	r0, [sp, #16]
    4cd0:	f000 fd2e 	bl	5730 <__lshift>
    4cd4:	0006      	movs	r6, r0
    4cd6:	0030      	movs	r0, r6
    4cd8:	2d00      	cmp	r5, #0
    4cda:	d011      	beq.n	4d00 <_dtoa_r+0x94c>
    4cdc:	6871      	ldr	r1, [r6, #4]
    4cde:	9804      	ldr	r0, [sp, #16]
    4ce0:	f000 fb65 	bl	53ae <_Balloc>
    4ce4:	0031      	movs	r1, r6
    4ce6:	0004      	movs	r4, r0
    4ce8:	6933      	ldr	r3, [r6, #16]
    4cea:	310c      	adds	r1, #12
    4cec:	1c9a      	adds	r2, r3, #2
    4cee:	0092      	lsls	r2, r2, #2
    4cf0:	300c      	adds	r0, #12
    4cf2:	f7fe fc4b 	bl	358c <memcpy>
    4cf6:	2201      	movs	r2, #1
    4cf8:	0021      	movs	r1, r4
    4cfa:	9804      	ldr	r0, [sp, #16]
    4cfc:	f000 fd18 	bl	5730 <__lshift>
    4d00:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4d04:	3f01      	subs	r7, #1
    4d06:	930b      	str	r3, [sp, #44]	; 0x2c
    4d08:	19db      	adds	r3, r3, r7
    4d0a:	0037      	movs	r7, r6
    4d0c:	0006      	movs	r6, r0
    4d0e:	930f      	str	r3, [sp, #60]	; 0x3c
    4d10:	9908      	ldr	r1, [sp, #32]
    4d12:	9805      	ldr	r0, [sp, #20]
    4d14:	f7ff faca 	bl	42ac <quorem>
    4d18:	0039      	movs	r1, r7
    4d1a:	900d      	str	r0, [sp, #52]	; 0x34
    4d1c:	0004      	movs	r4, r0
    4d1e:	9805      	ldr	r0, [sp, #20]
    4d20:	f000 fd57 	bl	57d2 <__mcmp>
    4d24:	0032      	movs	r2, r6
    4d26:	900e      	str	r0, [sp, #56]	; 0x38
    4d28:	9908      	ldr	r1, [sp, #32]
    4d2a:	9804      	ldr	r0, [sp, #16]
    4d2c:	f000 fd6a 	bl	5804 <__mdiff>
    4d30:	2301      	movs	r3, #1
    4d32:	930c      	str	r3, [sp, #48]	; 0x30
    4d34:	68c3      	ldr	r3, [r0, #12]
    4d36:	3430      	adds	r4, #48	; 0x30
    4d38:	0005      	movs	r5, r0
    4d3a:	2b00      	cmp	r3, #0
    4d3c:	d104      	bne.n	4d48 <_dtoa_r+0x994>
    4d3e:	0001      	movs	r1, r0
    4d40:	9805      	ldr	r0, [sp, #20]
    4d42:	f000 fd46 	bl	57d2 <__mcmp>
    4d46:	900c      	str	r0, [sp, #48]	; 0x30
    4d48:	0029      	movs	r1, r5
    4d4a:	9804      	ldr	r0, [sp, #16]
    4d4c:	f000 fb67 	bl	541e <_Bfree>
    4d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4d52:	9a22      	ldr	r2, [sp, #136]	; 0x88
    4d54:	4313      	orrs	r3, r2
    4d56:	d000      	beq.n	4d5a <_dtoa_r+0x9a6>
    4d58:	e089      	b.n	4e6e <_dtoa_r+0xaba>
    4d5a:	9a06      	ldr	r2, [sp, #24]
    4d5c:	3301      	adds	r3, #1
    4d5e:	4213      	tst	r3, r2
    4d60:	d000      	beq.n	4d64 <_dtoa_r+0x9b0>
    4d62:	e084      	b.n	4e6e <_dtoa_r+0xaba>
    4d64:	2c39      	cmp	r4, #57	; 0x39
    4d66:	d100      	bne.n	4d6a <_dtoa_r+0x9b6>
    4d68:	e0a3      	b.n	4eb2 <_dtoa_r+0xafe>
    4d6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4d6c:	2b00      	cmp	r3, #0
    4d6e:	dd01      	ble.n	4d74 <_dtoa_r+0x9c0>
    4d70:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    4d72:	3431      	adds	r4, #49	; 0x31
    4d74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4d76:	1c5d      	adds	r5, r3, #1
    4d78:	701c      	strb	r4, [r3, #0]
    4d7a:	e027      	b.n	4dcc <_dtoa_r+0xa18>
    4d7c:	2b04      	cmp	r3, #4
    4d7e:	d100      	bne.n	4d82 <_dtoa_r+0x9ce>
    4d80:	e769      	b.n	4c56 <_dtoa_r+0x8a2>
    4d82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4d84:	331c      	adds	r3, #28
    4d86:	18d2      	adds	r2, r2, r3
    4d88:	920b      	str	r2, [sp, #44]	; 0x2c
    4d8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4d8c:	18e4      	adds	r4, r4, r3
    4d8e:	18d3      	adds	r3, r2, r3
    4d90:	e760      	b.n	4c54 <_dtoa_r+0x8a0>
    4d92:	0003      	movs	r3, r0
    4d94:	e7f5      	b.n	4d82 <_dtoa_r+0x9ce>
    4d96:	2f00      	cmp	r7, #0
    4d98:	dc3c      	bgt.n	4e14 <_dtoa_r+0xa60>
    4d9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4d9c:	2b02      	cmp	r3, #2
    4d9e:	dd39      	ble.n	4e14 <_dtoa_r+0xa60>
    4da0:	970d      	str	r7, [sp, #52]	; 0x34
    4da2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4da4:	2b00      	cmp	r3, #0
    4da6:	d10c      	bne.n	4dc2 <_dtoa_r+0xa0e>
    4da8:	9908      	ldr	r1, [sp, #32]
    4daa:	2205      	movs	r2, #5
    4dac:	9804      	ldr	r0, [sp, #16]
    4dae:	f000 fb4f 	bl	5450 <__multadd>
    4db2:	9008      	str	r0, [sp, #32]
    4db4:	0001      	movs	r1, r0
    4db6:	9805      	ldr	r0, [sp, #20]
    4db8:	f000 fd0b 	bl	57d2 <__mcmp>
    4dbc:	2800      	cmp	r0, #0
    4dbe:	dd00      	ble.n	4dc2 <_dtoa_r+0xa0e>
    4dc0:	e55a      	b.n	4878 <_dtoa_r+0x4c4>
    4dc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    4dc4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    4dc6:	43db      	mvns	r3, r3
    4dc8:	9303      	str	r3, [sp, #12]
    4dca:	2700      	movs	r7, #0
    4dcc:	9908      	ldr	r1, [sp, #32]
    4dce:	9804      	ldr	r0, [sp, #16]
    4dd0:	f000 fb25 	bl	541e <_Bfree>
    4dd4:	2e00      	cmp	r6, #0
    4dd6:	d100      	bne.n	4dda <_dtoa_r+0xa26>
    4dd8:	e63f      	b.n	4a5a <_dtoa_r+0x6a6>
    4dda:	2f00      	cmp	r7, #0
    4ddc:	d005      	beq.n	4dea <_dtoa_r+0xa36>
    4dde:	42b7      	cmp	r7, r6
    4de0:	d003      	beq.n	4dea <_dtoa_r+0xa36>
    4de2:	0039      	movs	r1, r7
    4de4:	9804      	ldr	r0, [sp, #16]
    4de6:	f000 fb1a 	bl	541e <_Bfree>
    4dea:	0031      	movs	r1, r6
    4dec:	9804      	ldr	r0, [sp, #16]
    4dee:	f000 fb16 	bl	541e <_Bfree>
    4df2:	e632      	b.n	4a5a <_dtoa_r+0x6a6>
    4df4:	9508      	str	r5, [sp, #32]
    4df6:	002e      	movs	r6, r5
    4df8:	e7e3      	b.n	4dc2 <_dtoa_r+0xa0e>
    4dfa:	2300      	movs	r3, #0
    4dfc:	9308      	str	r3, [sp, #32]
    4dfe:	001e      	movs	r6, r3
    4e00:	e7df      	b.n	4dc2 <_dtoa_r+0xa0e>
    4e02:	46c0      	nop			; (mov r8, r8)
    4e04:	40240000 	.word	0x40240000
    4e08:	00000433 	.word	0x00000433
    4e0c:	9603      	str	r6, [sp, #12]
    4e0e:	9508      	str	r5, [sp, #32]
    4e10:	002e      	movs	r6, r5
    4e12:	e531      	b.n	4878 <_dtoa_r+0x4c4>
    4e14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4e16:	970d      	str	r7, [sp, #52]	; 0x34
    4e18:	2b00      	cmp	r3, #0
    4e1a:	d000      	beq.n	4e1e <_dtoa_r+0xa6a>
    4e1c:	e753      	b.n	4cc6 <_dtoa_r+0x912>
    4e1e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    4e20:	9908      	ldr	r1, [sp, #32]
    4e22:	9805      	ldr	r0, [sp, #20]
    4e24:	f7ff fa42 	bl	42ac <quorem>
    4e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4e2a:	3030      	adds	r0, #48	; 0x30
    4e2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4e2e:	7028      	strb	r0, [r5, #0]
    4e30:	3501      	adds	r5, #1
    4e32:	0004      	movs	r4, r0
    4e34:	1aeb      	subs	r3, r5, r3
    4e36:	429a      	cmp	r2, r3
    4e38:	dc78      	bgt.n	4f2c <_dtoa_r+0xb78>
    4e3a:	1e15      	subs	r5, r2, #0
    4e3c:	dc00      	bgt.n	4e40 <_dtoa_r+0xa8c>
    4e3e:	2501      	movs	r5, #1
    4e40:	2700      	movs	r7, #0
    4e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4e44:	195d      	adds	r5, r3, r5
    4e46:	9905      	ldr	r1, [sp, #20]
    4e48:	2201      	movs	r2, #1
    4e4a:	9804      	ldr	r0, [sp, #16]
    4e4c:	f000 fc70 	bl	5730 <__lshift>
    4e50:	9908      	ldr	r1, [sp, #32]
    4e52:	9005      	str	r0, [sp, #20]
    4e54:	f000 fcbd 	bl	57d2 <__mcmp>
    4e58:	2800      	cmp	r0, #0
    4e5a:	dc2f      	bgt.n	4ebc <_dtoa_r+0xb08>
    4e5c:	d101      	bne.n	4e62 <_dtoa_r+0xaae>
    4e5e:	07e3      	lsls	r3, r4, #31
    4e60:	d42c      	bmi.n	4ebc <_dtoa_r+0xb08>
    4e62:	1e6b      	subs	r3, r5, #1
    4e64:	781a      	ldrb	r2, [r3, #0]
    4e66:	2a30      	cmp	r2, #48	; 0x30
    4e68:	d1b0      	bne.n	4dcc <_dtoa_r+0xa18>
    4e6a:	001d      	movs	r5, r3
    4e6c:	e7f9      	b.n	4e62 <_dtoa_r+0xaae>
    4e6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4e70:	2b00      	cmp	r3, #0
    4e72:	db07      	blt.n	4e84 <_dtoa_r+0xad0>
    4e74:	001d      	movs	r5, r3
    4e76:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4e78:	431d      	orrs	r5, r3
    4e7a:	d126      	bne.n	4eca <_dtoa_r+0xb16>
    4e7c:	2301      	movs	r3, #1
    4e7e:	9a06      	ldr	r2, [sp, #24]
    4e80:	4213      	tst	r3, r2
    4e82:	d122      	bne.n	4eca <_dtoa_r+0xb16>
    4e84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4e86:	2b00      	cmp	r3, #0
    4e88:	dc00      	bgt.n	4e8c <_dtoa_r+0xad8>
    4e8a:	e773      	b.n	4d74 <_dtoa_r+0x9c0>
    4e8c:	9905      	ldr	r1, [sp, #20]
    4e8e:	2201      	movs	r2, #1
    4e90:	9804      	ldr	r0, [sp, #16]
    4e92:	f000 fc4d 	bl	5730 <__lshift>
    4e96:	9908      	ldr	r1, [sp, #32]
    4e98:	9005      	str	r0, [sp, #20]
    4e9a:	f000 fc9a 	bl	57d2 <__mcmp>
    4e9e:	2800      	cmp	r0, #0
    4ea0:	dc04      	bgt.n	4eac <_dtoa_r+0xaf8>
    4ea2:	d000      	beq.n	4ea6 <_dtoa_r+0xaf2>
    4ea4:	e766      	b.n	4d74 <_dtoa_r+0x9c0>
    4ea6:	07e3      	lsls	r3, r4, #31
    4ea8:	d400      	bmi.n	4eac <_dtoa_r+0xaf8>
    4eaa:	e763      	b.n	4d74 <_dtoa_r+0x9c0>
    4eac:	2c39      	cmp	r4, #57	; 0x39
    4eae:	d000      	beq.n	4eb2 <_dtoa_r+0xafe>
    4eb0:	e75e      	b.n	4d70 <_dtoa_r+0x9bc>
    4eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4eb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4eb6:	1c5d      	adds	r5, r3, #1
    4eb8:	2339      	movs	r3, #57	; 0x39
    4eba:	7013      	strb	r3, [r2, #0]
    4ebc:	1e6b      	subs	r3, r5, #1
    4ebe:	781a      	ldrb	r2, [r3, #0]
    4ec0:	2a39      	cmp	r2, #57	; 0x39
    4ec2:	d03b      	beq.n	4f3c <_dtoa_r+0xb88>
    4ec4:	3201      	adds	r2, #1
    4ec6:	701a      	strb	r2, [r3, #0]
    4ec8:	e780      	b.n	4dcc <_dtoa_r+0xa18>
    4eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4ecc:	3301      	adds	r3, #1
    4ece:	930d      	str	r3, [sp, #52]	; 0x34
    4ed0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4ed2:	2b00      	cmp	r3, #0
    4ed4:	dd05      	ble.n	4ee2 <_dtoa_r+0xb2e>
    4ed6:	2c39      	cmp	r4, #57	; 0x39
    4ed8:	d0eb      	beq.n	4eb2 <_dtoa_r+0xafe>
    4eda:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4edc:	3401      	adds	r4, #1
    4ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4ee0:	e74a      	b.n	4d78 <_dtoa_r+0x9c4>
    4ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4ee4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4ee6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4ee8:	701c      	strb	r4, [r3, #0]
    4eea:	4293      	cmp	r3, r2
    4eec:	d0ab      	beq.n	4e46 <_dtoa_r+0xa92>
    4eee:	2300      	movs	r3, #0
    4ef0:	220a      	movs	r2, #10
    4ef2:	9905      	ldr	r1, [sp, #20]
    4ef4:	9804      	ldr	r0, [sp, #16]
    4ef6:	f000 faab 	bl	5450 <__multadd>
    4efa:	2300      	movs	r3, #0
    4efc:	9005      	str	r0, [sp, #20]
    4efe:	220a      	movs	r2, #10
    4f00:	0039      	movs	r1, r7
    4f02:	9804      	ldr	r0, [sp, #16]
    4f04:	42b7      	cmp	r7, r6
    4f06:	d106      	bne.n	4f16 <_dtoa_r+0xb62>
    4f08:	f000 faa2 	bl	5450 <__multadd>
    4f0c:	0007      	movs	r7, r0
    4f0e:	0006      	movs	r6, r0
    4f10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4f12:	930b      	str	r3, [sp, #44]	; 0x2c
    4f14:	e6fc      	b.n	4d10 <_dtoa_r+0x95c>
    4f16:	f000 fa9b 	bl	5450 <__multadd>
    4f1a:	0031      	movs	r1, r6
    4f1c:	0007      	movs	r7, r0
    4f1e:	2300      	movs	r3, #0
    4f20:	220a      	movs	r2, #10
    4f22:	9804      	ldr	r0, [sp, #16]
    4f24:	f000 fa94 	bl	5450 <__multadd>
    4f28:	0006      	movs	r6, r0
    4f2a:	e7f1      	b.n	4f10 <_dtoa_r+0xb5c>
    4f2c:	2300      	movs	r3, #0
    4f2e:	220a      	movs	r2, #10
    4f30:	9905      	ldr	r1, [sp, #20]
    4f32:	9804      	ldr	r0, [sp, #16]
    4f34:	f000 fa8c 	bl	5450 <__multadd>
    4f38:	9005      	str	r0, [sp, #20]
    4f3a:	e771      	b.n	4e20 <_dtoa_r+0xa6c>
    4f3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4f3e:	429a      	cmp	r2, r3
    4f40:	d105      	bne.n	4f4e <_dtoa_r+0xb9a>
    4f42:	9b03      	ldr	r3, [sp, #12]
    4f44:	3301      	adds	r3, #1
    4f46:	9303      	str	r3, [sp, #12]
    4f48:	2331      	movs	r3, #49	; 0x31
    4f4a:	7013      	strb	r3, [r2, #0]
    4f4c:	e73e      	b.n	4dcc <_dtoa_r+0xa18>
    4f4e:	001d      	movs	r5, r3
    4f50:	e7b4      	b.n	4ebc <_dtoa_r+0xb08>
    4f52:	4b0a      	ldr	r3, [pc, #40]	; (4f7c <_dtoa_r+0xbc8>)
    4f54:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4f56:	930a      	str	r3, [sp, #40]	; 0x28
    4f58:	4b09      	ldr	r3, [pc, #36]	; (4f80 <_dtoa_r+0xbcc>)
    4f5a:	2a00      	cmp	r2, #0
    4f5c:	d001      	beq.n	4f62 <_dtoa_r+0xbae>
    4f5e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4f60:	6013      	str	r3, [r2, #0]
    4f62:	980a      	ldr	r0, [sp, #40]	; 0x28
    4f64:	b01d      	add	sp, #116	; 0x74
    4f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4f6a:	2b00      	cmp	r3, #0
    4f6c:	dd00      	ble.n	4f70 <_dtoa_r+0xbbc>
    4f6e:	e756      	b.n	4e1e <_dtoa_r+0xa6a>
    4f70:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4f72:	2b02      	cmp	r3, #2
    4f74:	dc00      	bgt.n	4f78 <_dtoa_r+0xbc4>
    4f76:	e752      	b.n	4e1e <_dtoa_r+0xa6a>
    4f78:	e713      	b.n	4da2 <_dtoa_r+0x9ee>
    4f7a:	46c0      	nop			; (mov r8, r8)
    4f7c:	00008bd4 	.word	0x00008bd4
    4f80:	00008bdc 	.word	0x00008bdc

00004f84 <__sflush_r>:
    4f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4f86:	898a      	ldrh	r2, [r1, #12]
    4f88:	0005      	movs	r5, r0
    4f8a:	000c      	movs	r4, r1
    4f8c:	0713      	lsls	r3, r2, #28
    4f8e:	d460      	bmi.n	5052 <__sflush_r+0xce>
    4f90:	684b      	ldr	r3, [r1, #4]
    4f92:	2b00      	cmp	r3, #0
    4f94:	dc04      	bgt.n	4fa0 <__sflush_r+0x1c>
    4f96:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4f98:	2b00      	cmp	r3, #0
    4f9a:	dc01      	bgt.n	4fa0 <__sflush_r+0x1c>
    4f9c:	2000      	movs	r0, #0
    4f9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4fa0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4fa2:	2f00      	cmp	r7, #0
    4fa4:	d0fa      	beq.n	4f9c <__sflush_r+0x18>
    4fa6:	2300      	movs	r3, #0
    4fa8:	682e      	ldr	r6, [r5, #0]
    4faa:	602b      	str	r3, [r5, #0]
    4fac:	2380      	movs	r3, #128	; 0x80
    4fae:	015b      	lsls	r3, r3, #5
    4fb0:	401a      	ands	r2, r3
    4fb2:	d034      	beq.n	501e <__sflush_r+0x9a>
    4fb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4fb6:	89a3      	ldrh	r3, [r4, #12]
    4fb8:	075b      	lsls	r3, r3, #29
    4fba:	d506      	bpl.n	4fca <__sflush_r+0x46>
    4fbc:	6863      	ldr	r3, [r4, #4]
    4fbe:	1ac0      	subs	r0, r0, r3
    4fc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4fc2:	2b00      	cmp	r3, #0
    4fc4:	d001      	beq.n	4fca <__sflush_r+0x46>
    4fc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4fc8:	1ac0      	subs	r0, r0, r3
    4fca:	0002      	movs	r2, r0
    4fcc:	6a21      	ldr	r1, [r4, #32]
    4fce:	2300      	movs	r3, #0
    4fd0:	0028      	movs	r0, r5
    4fd2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4fd4:	47b8      	blx	r7
    4fd6:	89a1      	ldrh	r1, [r4, #12]
    4fd8:	1c43      	adds	r3, r0, #1
    4fda:	d106      	bne.n	4fea <__sflush_r+0x66>
    4fdc:	682b      	ldr	r3, [r5, #0]
    4fde:	2b1d      	cmp	r3, #29
    4fe0:	d831      	bhi.n	5046 <__sflush_r+0xc2>
    4fe2:	4a2c      	ldr	r2, [pc, #176]	; (5094 <__sflush_r+0x110>)
    4fe4:	40da      	lsrs	r2, r3
    4fe6:	07d3      	lsls	r3, r2, #31
    4fe8:	d52d      	bpl.n	5046 <__sflush_r+0xc2>
    4fea:	2300      	movs	r3, #0
    4fec:	6063      	str	r3, [r4, #4]
    4fee:	6923      	ldr	r3, [r4, #16]
    4ff0:	6023      	str	r3, [r4, #0]
    4ff2:	04cb      	lsls	r3, r1, #19
    4ff4:	d505      	bpl.n	5002 <__sflush_r+0x7e>
    4ff6:	1c43      	adds	r3, r0, #1
    4ff8:	d102      	bne.n	5000 <__sflush_r+0x7c>
    4ffa:	682b      	ldr	r3, [r5, #0]
    4ffc:	2b00      	cmp	r3, #0
    4ffe:	d100      	bne.n	5002 <__sflush_r+0x7e>
    5000:	6560      	str	r0, [r4, #84]	; 0x54
    5002:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5004:	602e      	str	r6, [r5, #0]
    5006:	2900      	cmp	r1, #0
    5008:	d0c8      	beq.n	4f9c <__sflush_r+0x18>
    500a:	0023      	movs	r3, r4
    500c:	3344      	adds	r3, #68	; 0x44
    500e:	4299      	cmp	r1, r3
    5010:	d002      	beq.n	5018 <__sflush_r+0x94>
    5012:	0028      	movs	r0, r5
    5014:	f000 fcbc 	bl	5990 <_free_r>
    5018:	2000      	movs	r0, #0
    501a:	6360      	str	r0, [r4, #52]	; 0x34
    501c:	e7bf      	b.n	4f9e <__sflush_r+0x1a>
    501e:	2301      	movs	r3, #1
    5020:	6a21      	ldr	r1, [r4, #32]
    5022:	0028      	movs	r0, r5
    5024:	47b8      	blx	r7
    5026:	1c43      	adds	r3, r0, #1
    5028:	d1c5      	bne.n	4fb6 <__sflush_r+0x32>
    502a:	682b      	ldr	r3, [r5, #0]
    502c:	2b00      	cmp	r3, #0
    502e:	d0c2      	beq.n	4fb6 <__sflush_r+0x32>
    5030:	2b1d      	cmp	r3, #29
    5032:	d001      	beq.n	5038 <__sflush_r+0xb4>
    5034:	2b16      	cmp	r3, #22
    5036:	d101      	bne.n	503c <__sflush_r+0xb8>
    5038:	602e      	str	r6, [r5, #0]
    503a:	e7af      	b.n	4f9c <__sflush_r+0x18>
    503c:	2340      	movs	r3, #64	; 0x40
    503e:	89a2      	ldrh	r2, [r4, #12]
    5040:	4313      	orrs	r3, r2
    5042:	81a3      	strh	r3, [r4, #12]
    5044:	e7ab      	b.n	4f9e <__sflush_r+0x1a>
    5046:	2340      	movs	r3, #64	; 0x40
    5048:	430b      	orrs	r3, r1
    504a:	2001      	movs	r0, #1
    504c:	81a3      	strh	r3, [r4, #12]
    504e:	4240      	negs	r0, r0
    5050:	e7a5      	b.n	4f9e <__sflush_r+0x1a>
    5052:	690f      	ldr	r7, [r1, #16]
    5054:	2f00      	cmp	r7, #0
    5056:	d0a1      	beq.n	4f9c <__sflush_r+0x18>
    5058:	680b      	ldr	r3, [r1, #0]
    505a:	600f      	str	r7, [r1, #0]
    505c:	1bdb      	subs	r3, r3, r7
    505e:	9301      	str	r3, [sp, #4]
    5060:	2300      	movs	r3, #0
    5062:	0792      	lsls	r2, r2, #30
    5064:	d100      	bne.n	5068 <__sflush_r+0xe4>
    5066:	694b      	ldr	r3, [r1, #20]
    5068:	60a3      	str	r3, [r4, #8]
    506a:	9b01      	ldr	r3, [sp, #4]
    506c:	2b00      	cmp	r3, #0
    506e:	dc00      	bgt.n	5072 <__sflush_r+0xee>
    5070:	e794      	b.n	4f9c <__sflush_r+0x18>
    5072:	9b01      	ldr	r3, [sp, #4]
    5074:	003a      	movs	r2, r7
    5076:	6a21      	ldr	r1, [r4, #32]
    5078:	0028      	movs	r0, r5
    507a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    507c:	47b0      	blx	r6
    507e:	2800      	cmp	r0, #0
    5080:	dc03      	bgt.n	508a <__sflush_r+0x106>
    5082:	2340      	movs	r3, #64	; 0x40
    5084:	89a2      	ldrh	r2, [r4, #12]
    5086:	4313      	orrs	r3, r2
    5088:	e7df      	b.n	504a <__sflush_r+0xc6>
    508a:	9b01      	ldr	r3, [sp, #4]
    508c:	183f      	adds	r7, r7, r0
    508e:	1a1b      	subs	r3, r3, r0
    5090:	9301      	str	r3, [sp, #4]
    5092:	e7ea      	b.n	506a <__sflush_r+0xe6>
    5094:	20400001 	.word	0x20400001

00005098 <_fflush_r>:
    5098:	690b      	ldr	r3, [r1, #16]
    509a:	b570      	push	{r4, r5, r6, lr}
    509c:	0005      	movs	r5, r0
    509e:	000c      	movs	r4, r1
    50a0:	2b00      	cmp	r3, #0
    50a2:	d101      	bne.n	50a8 <_fflush_r+0x10>
    50a4:	2000      	movs	r0, #0
    50a6:	bd70      	pop	{r4, r5, r6, pc}
    50a8:	2800      	cmp	r0, #0
    50aa:	d004      	beq.n	50b6 <_fflush_r+0x1e>
    50ac:	6983      	ldr	r3, [r0, #24]
    50ae:	2b00      	cmp	r3, #0
    50b0:	d101      	bne.n	50b6 <_fflush_r+0x1e>
    50b2:	f000 f85f 	bl	5174 <__sinit>
    50b6:	4b0b      	ldr	r3, [pc, #44]	; (50e4 <_fflush_r+0x4c>)
    50b8:	429c      	cmp	r4, r3
    50ba:	d109      	bne.n	50d0 <_fflush_r+0x38>
    50bc:	686c      	ldr	r4, [r5, #4]
    50be:	220c      	movs	r2, #12
    50c0:	5ea3      	ldrsh	r3, [r4, r2]
    50c2:	2b00      	cmp	r3, #0
    50c4:	d0ee      	beq.n	50a4 <_fflush_r+0xc>
    50c6:	0021      	movs	r1, r4
    50c8:	0028      	movs	r0, r5
    50ca:	f7ff ff5b 	bl	4f84 <__sflush_r>
    50ce:	e7ea      	b.n	50a6 <_fflush_r+0xe>
    50d0:	4b05      	ldr	r3, [pc, #20]	; (50e8 <_fflush_r+0x50>)
    50d2:	429c      	cmp	r4, r3
    50d4:	d101      	bne.n	50da <_fflush_r+0x42>
    50d6:	68ac      	ldr	r4, [r5, #8]
    50d8:	e7f1      	b.n	50be <_fflush_r+0x26>
    50da:	4b04      	ldr	r3, [pc, #16]	; (50ec <_fflush_r+0x54>)
    50dc:	429c      	cmp	r4, r3
    50de:	d1ee      	bne.n	50be <_fflush_r+0x26>
    50e0:	68ec      	ldr	r4, [r5, #12]
    50e2:	e7ec      	b.n	50be <_fflush_r+0x26>
    50e4:	00008c04 	.word	0x00008c04
    50e8:	00008c24 	.word	0x00008c24
    50ec:	00008be4 	.word	0x00008be4

000050f0 <_cleanup_r>:
    50f0:	b510      	push	{r4, lr}
    50f2:	4902      	ldr	r1, [pc, #8]	; (50fc <_cleanup_r+0xc>)
    50f4:	f000 f8b2 	bl	525c <_fwalk_reent>
    50f8:	bd10      	pop	{r4, pc}
    50fa:	46c0      	nop			; (mov r8, r8)
    50fc:	00005099 	.word	0x00005099

00005100 <std.isra.0>:
    5100:	2300      	movs	r3, #0
    5102:	b510      	push	{r4, lr}
    5104:	0004      	movs	r4, r0
    5106:	6003      	str	r3, [r0, #0]
    5108:	6043      	str	r3, [r0, #4]
    510a:	6083      	str	r3, [r0, #8]
    510c:	8181      	strh	r1, [r0, #12]
    510e:	6643      	str	r3, [r0, #100]	; 0x64
    5110:	81c2      	strh	r2, [r0, #14]
    5112:	6103      	str	r3, [r0, #16]
    5114:	6143      	str	r3, [r0, #20]
    5116:	6183      	str	r3, [r0, #24]
    5118:	0019      	movs	r1, r3
    511a:	2208      	movs	r2, #8
    511c:	305c      	adds	r0, #92	; 0x5c
    511e:	f7fe fa3e 	bl	359e <memset>
    5122:	4b05      	ldr	r3, [pc, #20]	; (5138 <std.isra.0+0x38>)
    5124:	6224      	str	r4, [r4, #32]
    5126:	6263      	str	r3, [r4, #36]	; 0x24
    5128:	4b04      	ldr	r3, [pc, #16]	; (513c <std.isra.0+0x3c>)
    512a:	62a3      	str	r3, [r4, #40]	; 0x28
    512c:	4b04      	ldr	r3, [pc, #16]	; (5140 <std.isra.0+0x40>)
    512e:	62e3      	str	r3, [r4, #44]	; 0x2c
    5130:	4b04      	ldr	r3, [pc, #16]	; (5144 <std.isra.0+0x44>)
    5132:	6323      	str	r3, [r4, #48]	; 0x30
    5134:	bd10      	pop	{r4, pc}
    5136:	46c0      	nop			; (mov r8, r8)
    5138:	00005d8d 	.word	0x00005d8d
    513c:	00005db5 	.word	0x00005db5
    5140:	00005ded 	.word	0x00005ded
    5144:	00005e19 	.word	0x00005e19

00005148 <__sfmoreglue>:
    5148:	b570      	push	{r4, r5, r6, lr}
    514a:	2568      	movs	r5, #104	; 0x68
    514c:	1e4a      	subs	r2, r1, #1
    514e:	4355      	muls	r5, r2
    5150:	000e      	movs	r6, r1
    5152:	0029      	movs	r1, r5
    5154:	3174      	adds	r1, #116	; 0x74
    5156:	f000 fc65 	bl	5a24 <_malloc_r>
    515a:	1e04      	subs	r4, r0, #0
    515c:	d008      	beq.n	5170 <__sfmoreglue+0x28>
    515e:	2100      	movs	r1, #0
    5160:	002a      	movs	r2, r5
    5162:	6001      	str	r1, [r0, #0]
    5164:	6046      	str	r6, [r0, #4]
    5166:	300c      	adds	r0, #12
    5168:	60a0      	str	r0, [r4, #8]
    516a:	3268      	adds	r2, #104	; 0x68
    516c:	f7fe fa17 	bl	359e <memset>
    5170:	0020      	movs	r0, r4
    5172:	bd70      	pop	{r4, r5, r6, pc}

00005174 <__sinit>:
    5174:	6983      	ldr	r3, [r0, #24]
    5176:	b513      	push	{r0, r1, r4, lr}
    5178:	0004      	movs	r4, r0
    517a:	2b00      	cmp	r3, #0
    517c:	d128      	bne.n	51d0 <__sinit+0x5c>
    517e:	6483      	str	r3, [r0, #72]	; 0x48
    5180:	64c3      	str	r3, [r0, #76]	; 0x4c
    5182:	6503      	str	r3, [r0, #80]	; 0x50
    5184:	4b13      	ldr	r3, [pc, #76]	; (51d4 <__sinit+0x60>)
    5186:	4a14      	ldr	r2, [pc, #80]	; (51d8 <__sinit+0x64>)
    5188:	681b      	ldr	r3, [r3, #0]
    518a:	6282      	str	r2, [r0, #40]	; 0x28
    518c:	9301      	str	r3, [sp, #4]
    518e:	4298      	cmp	r0, r3
    5190:	d101      	bne.n	5196 <__sinit+0x22>
    5192:	2301      	movs	r3, #1
    5194:	6183      	str	r3, [r0, #24]
    5196:	0020      	movs	r0, r4
    5198:	f000 f820 	bl	51dc <__sfp>
    519c:	6060      	str	r0, [r4, #4]
    519e:	0020      	movs	r0, r4
    51a0:	f000 f81c 	bl	51dc <__sfp>
    51a4:	60a0      	str	r0, [r4, #8]
    51a6:	0020      	movs	r0, r4
    51a8:	f000 f818 	bl	51dc <__sfp>
    51ac:	2200      	movs	r2, #0
    51ae:	60e0      	str	r0, [r4, #12]
    51b0:	2104      	movs	r1, #4
    51b2:	6860      	ldr	r0, [r4, #4]
    51b4:	f7ff ffa4 	bl	5100 <std.isra.0>
    51b8:	2201      	movs	r2, #1
    51ba:	2109      	movs	r1, #9
    51bc:	68a0      	ldr	r0, [r4, #8]
    51be:	f7ff ff9f 	bl	5100 <std.isra.0>
    51c2:	2202      	movs	r2, #2
    51c4:	2112      	movs	r1, #18
    51c6:	68e0      	ldr	r0, [r4, #12]
    51c8:	f7ff ff9a 	bl	5100 <std.isra.0>
    51cc:	2301      	movs	r3, #1
    51ce:	61a3      	str	r3, [r4, #24]
    51d0:	bd13      	pop	{r0, r1, r4, pc}
    51d2:	46c0      	nop			; (mov r8, r8)
    51d4:	00008b9c 	.word	0x00008b9c
    51d8:	000050f1 	.word	0x000050f1

000051dc <__sfp>:
    51dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51de:	4b1e      	ldr	r3, [pc, #120]	; (5258 <__sfp+0x7c>)
    51e0:	0007      	movs	r7, r0
    51e2:	681e      	ldr	r6, [r3, #0]
    51e4:	69b3      	ldr	r3, [r6, #24]
    51e6:	2b00      	cmp	r3, #0
    51e8:	d102      	bne.n	51f0 <__sfp+0x14>
    51ea:	0030      	movs	r0, r6
    51ec:	f7ff ffc2 	bl	5174 <__sinit>
    51f0:	3648      	adds	r6, #72	; 0x48
    51f2:	68b4      	ldr	r4, [r6, #8]
    51f4:	6873      	ldr	r3, [r6, #4]
    51f6:	3b01      	subs	r3, #1
    51f8:	d504      	bpl.n	5204 <__sfp+0x28>
    51fa:	6833      	ldr	r3, [r6, #0]
    51fc:	2b00      	cmp	r3, #0
    51fe:	d007      	beq.n	5210 <__sfp+0x34>
    5200:	6836      	ldr	r6, [r6, #0]
    5202:	e7f6      	b.n	51f2 <__sfp+0x16>
    5204:	220c      	movs	r2, #12
    5206:	5ea5      	ldrsh	r5, [r4, r2]
    5208:	2d00      	cmp	r5, #0
    520a:	d00d      	beq.n	5228 <__sfp+0x4c>
    520c:	3468      	adds	r4, #104	; 0x68
    520e:	e7f2      	b.n	51f6 <__sfp+0x1a>
    5210:	2104      	movs	r1, #4
    5212:	0038      	movs	r0, r7
    5214:	f7ff ff98 	bl	5148 <__sfmoreglue>
    5218:	6030      	str	r0, [r6, #0]
    521a:	2800      	cmp	r0, #0
    521c:	d1f0      	bne.n	5200 <__sfp+0x24>
    521e:	230c      	movs	r3, #12
    5220:	0004      	movs	r4, r0
    5222:	603b      	str	r3, [r7, #0]
    5224:	0020      	movs	r0, r4
    5226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5228:	2301      	movs	r3, #1
    522a:	0020      	movs	r0, r4
    522c:	425b      	negs	r3, r3
    522e:	81e3      	strh	r3, [r4, #14]
    5230:	3302      	adds	r3, #2
    5232:	81a3      	strh	r3, [r4, #12]
    5234:	6665      	str	r5, [r4, #100]	; 0x64
    5236:	6025      	str	r5, [r4, #0]
    5238:	60a5      	str	r5, [r4, #8]
    523a:	6065      	str	r5, [r4, #4]
    523c:	6125      	str	r5, [r4, #16]
    523e:	6165      	str	r5, [r4, #20]
    5240:	61a5      	str	r5, [r4, #24]
    5242:	2208      	movs	r2, #8
    5244:	0029      	movs	r1, r5
    5246:	305c      	adds	r0, #92	; 0x5c
    5248:	f7fe f9a9 	bl	359e <memset>
    524c:	6365      	str	r5, [r4, #52]	; 0x34
    524e:	63a5      	str	r5, [r4, #56]	; 0x38
    5250:	64a5      	str	r5, [r4, #72]	; 0x48
    5252:	64e5      	str	r5, [r4, #76]	; 0x4c
    5254:	e7e6      	b.n	5224 <__sfp+0x48>
    5256:	46c0      	nop			; (mov r8, r8)
    5258:	00008b9c 	.word	0x00008b9c

0000525c <_fwalk_reent>:
    525c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    525e:	0004      	movs	r4, r0
    5260:	0007      	movs	r7, r0
    5262:	2600      	movs	r6, #0
    5264:	9101      	str	r1, [sp, #4]
    5266:	3448      	adds	r4, #72	; 0x48
    5268:	2c00      	cmp	r4, #0
    526a:	d101      	bne.n	5270 <_fwalk_reent+0x14>
    526c:	0030      	movs	r0, r6
    526e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5270:	6863      	ldr	r3, [r4, #4]
    5272:	68a5      	ldr	r5, [r4, #8]
    5274:	9300      	str	r3, [sp, #0]
    5276:	9b00      	ldr	r3, [sp, #0]
    5278:	3b01      	subs	r3, #1
    527a:	9300      	str	r3, [sp, #0]
    527c:	d501      	bpl.n	5282 <_fwalk_reent+0x26>
    527e:	6824      	ldr	r4, [r4, #0]
    5280:	e7f2      	b.n	5268 <_fwalk_reent+0xc>
    5282:	89ab      	ldrh	r3, [r5, #12]
    5284:	2b01      	cmp	r3, #1
    5286:	d908      	bls.n	529a <_fwalk_reent+0x3e>
    5288:	220e      	movs	r2, #14
    528a:	5eab      	ldrsh	r3, [r5, r2]
    528c:	3301      	adds	r3, #1
    528e:	d004      	beq.n	529a <_fwalk_reent+0x3e>
    5290:	0029      	movs	r1, r5
    5292:	0038      	movs	r0, r7
    5294:	9b01      	ldr	r3, [sp, #4]
    5296:	4798      	blx	r3
    5298:	4306      	orrs	r6, r0
    529a:	3568      	adds	r5, #104	; 0x68
    529c:	e7eb      	b.n	5276 <_fwalk_reent+0x1a>
	...

000052a0 <_localeconv_r>:
    52a0:	4b03      	ldr	r3, [pc, #12]	; (52b0 <_localeconv_r+0x10>)
    52a2:	681b      	ldr	r3, [r3, #0]
    52a4:	6a18      	ldr	r0, [r3, #32]
    52a6:	2800      	cmp	r0, #0
    52a8:	d100      	bne.n	52ac <_localeconv_r+0xc>
    52aa:	4802      	ldr	r0, [pc, #8]	; (52b4 <_localeconv_r+0x14>)
    52ac:	30f0      	adds	r0, #240	; 0xf0
    52ae:	4770      	bx	lr
    52b0:	2000000c 	.word	0x2000000c
    52b4:	20000070 	.word	0x20000070

000052b8 <__swhatbuf_r>:
    52b8:	b570      	push	{r4, r5, r6, lr}
    52ba:	000e      	movs	r6, r1
    52bc:	001d      	movs	r5, r3
    52be:	230e      	movs	r3, #14
    52c0:	5ec9      	ldrsh	r1, [r1, r3]
    52c2:	b090      	sub	sp, #64	; 0x40
    52c4:	0014      	movs	r4, r2
    52c6:	2900      	cmp	r1, #0
    52c8:	da07      	bge.n	52da <__swhatbuf_r+0x22>
    52ca:	2300      	movs	r3, #0
    52cc:	602b      	str	r3, [r5, #0]
    52ce:	89b3      	ldrh	r3, [r6, #12]
    52d0:	061b      	lsls	r3, r3, #24
    52d2:	d411      	bmi.n	52f8 <__swhatbuf_r+0x40>
    52d4:	2380      	movs	r3, #128	; 0x80
    52d6:	00db      	lsls	r3, r3, #3
    52d8:	e00f      	b.n	52fa <__swhatbuf_r+0x42>
    52da:	aa01      	add	r2, sp, #4
    52dc:	f000 fdc8 	bl	5e70 <_fstat_r>
    52e0:	2800      	cmp	r0, #0
    52e2:	dbf2      	blt.n	52ca <__swhatbuf_r+0x12>
    52e4:	22f0      	movs	r2, #240	; 0xf0
    52e6:	9b02      	ldr	r3, [sp, #8]
    52e8:	0212      	lsls	r2, r2, #8
    52ea:	4013      	ands	r3, r2
    52ec:	4a05      	ldr	r2, [pc, #20]	; (5304 <__swhatbuf_r+0x4c>)
    52ee:	189b      	adds	r3, r3, r2
    52f0:	425a      	negs	r2, r3
    52f2:	4153      	adcs	r3, r2
    52f4:	602b      	str	r3, [r5, #0]
    52f6:	e7ed      	b.n	52d4 <__swhatbuf_r+0x1c>
    52f8:	2340      	movs	r3, #64	; 0x40
    52fa:	2000      	movs	r0, #0
    52fc:	6023      	str	r3, [r4, #0]
    52fe:	b010      	add	sp, #64	; 0x40
    5300:	bd70      	pop	{r4, r5, r6, pc}
    5302:	46c0      	nop			; (mov r8, r8)
    5304:	ffffe000 	.word	0xffffe000

00005308 <__smakebuf_r>:
    5308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    530a:	2602      	movs	r6, #2
    530c:	898b      	ldrh	r3, [r1, #12]
    530e:	0005      	movs	r5, r0
    5310:	000c      	movs	r4, r1
    5312:	4233      	tst	r3, r6
    5314:	d006      	beq.n	5324 <__smakebuf_r+0x1c>
    5316:	0023      	movs	r3, r4
    5318:	3347      	adds	r3, #71	; 0x47
    531a:	6023      	str	r3, [r4, #0]
    531c:	6123      	str	r3, [r4, #16]
    531e:	2301      	movs	r3, #1
    5320:	6163      	str	r3, [r4, #20]
    5322:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    5324:	ab01      	add	r3, sp, #4
    5326:	466a      	mov	r2, sp
    5328:	f7ff ffc6 	bl	52b8 <__swhatbuf_r>
    532c:	9900      	ldr	r1, [sp, #0]
    532e:	0007      	movs	r7, r0
    5330:	0028      	movs	r0, r5
    5332:	f000 fb77 	bl	5a24 <_malloc_r>
    5336:	2800      	cmp	r0, #0
    5338:	d106      	bne.n	5348 <__smakebuf_r+0x40>
    533a:	220c      	movs	r2, #12
    533c:	5ea3      	ldrsh	r3, [r4, r2]
    533e:	059a      	lsls	r2, r3, #22
    5340:	d4ef      	bmi.n	5322 <__smakebuf_r+0x1a>
    5342:	431e      	orrs	r6, r3
    5344:	81a6      	strh	r6, [r4, #12]
    5346:	e7e6      	b.n	5316 <__smakebuf_r+0xe>
    5348:	4b0d      	ldr	r3, [pc, #52]	; (5380 <__smakebuf_r+0x78>)
    534a:	62ab      	str	r3, [r5, #40]	; 0x28
    534c:	2380      	movs	r3, #128	; 0x80
    534e:	89a2      	ldrh	r2, [r4, #12]
    5350:	6020      	str	r0, [r4, #0]
    5352:	4313      	orrs	r3, r2
    5354:	81a3      	strh	r3, [r4, #12]
    5356:	9b00      	ldr	r3, [sp, #0]
    5358:	6120      	str	r0, [r4, #16]
    535a:	6163      	str	r3, [r4, #20]
    535c:	9b01      	ldr	r3, [sp, #4]
    535e:	2b00      	cmp	r3, #0
    5360:	d00a      	beq.n	5378 <__smakebuf_r+0x70>
    5362:	230e      	movs	r3, #14
    5364:	5ee1      	ldrsh	r1, [r4, r3]
    5366:	0028      	movs	r0, r5
    5368:	f000 fd94 	bl	5e94 <_isatty_r>
    536c:	2800      	cmp	r0, #0
    536e:	d003      	beq.n	5378 <__smakebuf_r+0x70>
    5370:	2301      	movs	r3, #1
    5372:	89a2      	ldrh	r2, [r4, #12]
    5374:	4313      	orrs	r3, r2
    5376:	81a3      	strh	r3, [r4, #12]
    5378:	89a0      	ldrh	r0, [r4, #12]
    537a:	4338      	orrs	r0, r7
    537c:	81a0      	strh	r0, [r4, #12]
    537e:	e7d0      	b.n	5322 <__smakebuf_r+0x1a>
    5380:	000050f1 	.word	0x000050f1

00005384 <malloc>:
    5384:	b510      	push	{r4, lr}
    5386:	4b03      	ldr	r3, [pc, #12]	; (5394 <malloc+0x10>)
    5388:	0001      	movs	r1, r0
    538a:	6818      	ldr	r0, [r3, #0]
    538c:	f000 fb4a 	bl	5a24 <_malloc_r>
    5390:	bd10      	pop	{r4, pc}
    5392:	46c0      	nop			; (mov r8, r8)
    5394:	2000000c 	.word	0x2000000c

00005398 <memchr>:
    5398:	b2c9      	uxtb	r1, r1
    539a:	1882      	adds	r2, r0, r2
    539c:	4290      	cmp	r0, r2
    539e:	d101      	bne.n	53a4 <memchr+0xc>
    53a0:	2000      	movs	r0, #0
    53a2:	4770      	bx	lr
    53a4:	7803      	ldrb	r3, [r0, #0]
    53a6:	428b      	cmp	r3, r1
    53a8:	d0fb      	beq.n	53a2 <memchr+0xa>
    53aa:	3001      	adds	r0, #1
    53ac:	e7f6      	b.n	539c <memchr+0x4>

000053ae <_Balloc>:
    53ae:	b570      	push	{r4, r5, r6, lr}
    53b0:	6a46      	ldr	r6, [r0, #36]	; 0x24
    53b2:	0004      	movs	r4, r0
    53b4:	000d      	movs	r5, r1
    53b6:	2e00      	cmp	r6, #0
    53b8:	d107      	bne.n	53ca <_Balloc+0x1c>
    53ba:	2010      	movs	r0, #16
    53bc:	f7ff ffe2 	bl	5384 <malloc>
    53c0:	6260      	str	r0, [r4, #36]	; 0x24
    53c2:	6046      	str	r6, [r0, #4]
    53c4:	6086      	str	r6, [r0, #8]
    53c6:	6006      	str	r6, [r0, #0]
    53c8:	60c6      	str	r6, [r0, #12]
    53ca:	6a66      	ldr	r6, [r4, #36]	; 0x24
    53cc:	68f3      	ldr	r3, [r6, #12]
    53ce:	2b00      	cmp	r3, #0
    53d0:	d013      	beq.n	53fa <_Balloc+0x4c>
    53d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    53d4:	00aa      	lsls	r2, r5, #2
    53d6:	68db      	ldr	r3, [r3, #12]
    53d8:	189b      	adds	r3, r3, r2
    53da:	6818      	ldr	r0, [r3, #0]
    53dc:	2800      	cmp	r0, #0
    53de:	d118      	bne.n	5412 <_Balloc+0x64>
    53e0:	2101      	movs	r1, #1
    53e2:	000e      	movs	r6, r1
    53e4:	40ae      	lsls	r6, r5
    53e6:	1d72      	adds	r2, r6, #5
    53e8:	0092      	lsls	r2, r2, #2
    53ea:	0020      	movs	r0, r4
    53ec:	f000 fac2 	bl	5974 <_calloc_r>
    53f0:	2800      	cmp	r0, #0
    53f2:	d00c      	beq.n	540e <_Balloc+0x60>
    53f4:	6045      	str	r5, [r0, #4]
    53f6:	6086      	str	r6, [r0, #8]
    53f8:	e00d      	b.n	5416 <_Balloc+0x68>
    53fa:	2221      	movs	r2, #33	; 0x21
    53fc:	2104      	movs	r1, #4
    53fe:	0020      	movs	r0, r4
    5400:	f000 fab8 	bl	5974 <_calloc_r>
    5404:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5406:	60f0      	str	r0, [r6, #12]
    5408:	68db      	ldr	r3, [r3, #12]
    540a:	2b00      	cmp	r3, #0
    540c:	d1e1      	bne.n	53d2 <_Balloc+0x24>
    540e:	2000      	movs	r0, #0
    5410:	bd70      	pop	{r4, r5, r6, pc}
    5412:	6802      	ldr	r2, [r0, #0]
    5414:	601a      	str	r2, [r3, #0]
    5416:	2300      	movs	r3, #0
    5418:	6103      	str	r3, [r0, #16]
    541a:	60c3      	str	r3, [r0, #12]
    541c:	e7f8      	b.n	5410 <_Balloc+0x62>

0000541e <_Bfree>:
    541e:	b570      	push	{r4, r5, r6, lr}
    5420:	6a44      	ldr	r4, [r0, #36]	; 0x24
    5422:	0006      	movs	r6, r0
    5424:	000d      	movs	r5, r1
    5426:	2c00      	cmp	r4, #0
    5428:	d107      	bne.n	543a <_Bfree+0x1c>
    542a:	2010      	movs	r0, #16
    542c:	f7ff ffaa 	bl	5384 <malloc>
    5430:	6270      	str	r0, [r6, #36]	; 0x24
    5432:	6044      	str	r4, [r0, #4]
    5434:	6084      	str	r4, [r0, #8]
    5436:	6004      	str	r4, [r0, #0]
    5438:	60c4      	str	r4, [r0, #12]
    543a:	2d00      	cmp	r5, #0
    543c:	d007      	beq.n	544e <_Bfree+0x30>
    543e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    5440:	686a      	ldr	r2, [r5, #4]
    5442:	68db      	ldr	r3, [r3, #12]
    5444:	0092      	lsls	r2, r2, #2
    5446:	189b      	adds	r3, r3, r2
    5448:	681a      	ldr	r2, [r3, #0]
    544a:	602a      	str	r2, [r5, #0]
    544c:	601d      	str	r5, [r3, #0]
    544e:	bd70      	pop	{r4, r5, r6, pc}

00005450 <__multadd>:
    5450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5452:	001e      	movs	r6, r3
    5454:	2314      	movs	r3, #20
    5456:	469c      	mov	ip, r3
    5458:	0007      	movs	r7, r0
    545a:	000c      	movs	r4, r1
    545c:	2000      	movs	r0, #0
    545e:	690d      	ldr	r5, [r1, #16]
    5460:	448c      	add	ip, r1
    5462:	4663      	mov	r3, ip
    5464:	8819      	ldrh	r1, [r3, #0]
    5466:	681b      	ldr	r3, [r3, #0]
    5468:	4351      	muls	r1, r2
    546a:	0c1b      	lsrs	r3, r3, #16
    546c:	4353      	muls	r3, r2
    546e:	1989      	adds	r1, r1, r6
    5470:	0c0e      	lsrs	r6, r1, #16
    5472:	199b      	adds	r3, r3, r6
    5474:	b289      	uxth	r1, r1
    5476:	0c1e      	lsrs	r6, r3, #16
    5478:	041b      	lsls	r3, r3, #16
    547a:	185b      	adds	r3, r3, r1
    547c:	4661      	mov	r1, ip
    547e:	3001      	adds	r0, #1
    5480:	c108      	stmia	r1!, {r3}
    5482:	468c      	mov	ip, r1
    5484:	4285      	cmp	r5, r0
    5486:	dcec      	bgt.n	5462 <__multadd+0x12>
    5488:	2e00      	cmp	r6, #0
    548a:	d01b      	beq.n	54c4 <__multadd+0x74>
    548c:	68a3      	ldr	r3, [r4, #8]
    548e:	429d      	cmp	r5, r3
    5490:	db12      	blt.n	54b8 <__multadd+0x68>
    5492:	6863      	ldr	r3, [r4, #4]
    5494:	0038      	movs	r0, r7
    5496:	1c59      	adds	r1, r3, #1
    5498:	f7ff ff89 	bl	53ae <_Balloc>
    549c:	0021      	movs	r1, r4
    549e:	6923      	ldr	r3, [r4, #16]
    54a0:	9001      	str	r0, [sp, #4]
    54a2:	1c9a      	adds	r2, r3, #2
    54a4:	0092      	lsls	r2, r2, #2
    54a6:	310c      	adds	r1, #12
    54a8:	300c      	adds	r0, #12
    54aa:	f7fe f86f 	bl	358c <memcpy>
    54ae:	0021      	movs	r1, r4
    54b0:	0038      	movs	r0, r7
    54b2:	f7ff ffb4 	bl	541e <_Bfree>
    54b6:	9c01      	ldr	r4, [sp, #4]
    54b8:	1d2b      	adds	r3, r5, #4
    54ba:	009b      	lsls	r3, r3, #2
    54bc:	18e3      	adds	r3, r4, r3
    54be:	3501      	adds	r5, #1
    54c0:	605e      	str	r6, [r3, #4]
    54c2:	6125      	str	r5, [r4, #16]
    54c4:	0020      	movs	r0, r4
    54c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000054c8 <__hi0bits>:
    54c8:	0003      	movs	r3, r0
    54ca:	0c02      	lsrs	r2, r0, #16
    54cc:	2000      	movs	r0, #0
    54ce:	4282      	cmp	r2, r0
    54d0:	d101      	bne.n	54d6 <__hi0bits+0xe>
    54d2:	041b      	lsls	r3, r3, #16
    54d4:	3010      	adds	r0, #16
    54d6:	0e1a      	lsrs	r2, r3, #24
    54d8:	d101      	bne.n	54de <__hi0bits+0x16>
    54da:	3008      	adds	r0, #8
    54dc:	021b      	lsls	r3, r3, #8
    54de:	0f1a      	lsrs	r2, r3, #28
    54e0:	d101      	bne.n	54e6 <__hi0bits+0x1e>
    54e2:	3004      	adds	r0, #4
    54e4:	011b      	lsls	r3, r3, #4
    54e6:	0f9a      	lsrs	r2, r3, #30
    54e8:	d101      	bne.n	54ee <__hi0bits+0x26>
    54ea:	3002      	adds	r0, #2
    54ec:	009b      	lsls	r3, r3, #2
    54ee:	2b00      	cmp	r3, #0
    54f0:	db03      	blt.n	54fa <__hi0bits+0x32>
    54f2:	3001      	adds	r0, #1
    54f4:	005b      	lsls	r3, r3, #1
    54f6:	d400      	bmi.n	54fa <__hi0bits+0x32>
    54f8:	2020      	movs	r0, #32
    54fa:	4770      	bx	lr

000054fc <__lo0bits>:
    54fc:	2207      	movs	r2, #7
    54fe:	6803      	ldr	r3, [r0, #0]
    5500:	b510      	push	{r4, lr}
    5502:	0001      	movs	r1, r0
    5504:	401a      	ands	r2, r3
    5506:	d00d      	beq.n	5524 <__lo0bits+0x28>
    5508:	2401      	movs	r4, #1
    550a:	2000      	movs	r0, #0
    550c:	4223      	tst	r3, r4
    550e:	d105      	bne.n	551c <__lo0bits+0x20>
    5510:	3002      	adds	r0, #2
    5512:	4203      	tst	r3, r0
    5514:	d003      	beq.n	551e <__lo0bits+0x22>
    5516:	40e3      	lsrs	r3, r4
    5518:	0020      	movs	r0, r4
    551a:	600b      	str	r3, [r1, #0]
    551c:	bd10      	pop	{r4, pc}
    551e:	089b      	lsrs	r3, r3, #2
    5520:	600b      	str	r3, [r1, #0]
    5522:	e7fb      	b.n	551c <__lo0bits+0x20>
    5524:	b29c      	uxth	r4, r3
    5526:	0010      	movs	r0, r2
    5528:	2c00      	cmp	r4, #0
    552a:	d101      	bne.n	5530 <__lo0bits+0x34>
    552c:	2010      	movs	r0, #16
    552e:	0c1b      	lsrs	r3, r3, #16
    5530:	b2da      	uxtb	r2, r3
    5532:	2a00      	cmp	r2, #0
    5534:	d101      	bne.n	553a <__lo0bits+0x3e>
    5536:	3008      	adds	r0, #8
    5538:	0a1b      	lsrs	r3, r3, #8
    553a:	071a      	lsls	r2, r3, #28
    553c:	d101      	bne.n	5542 <__lo0bits+0x46>
    553e:	3004      	adds	r0, #4
    5540:	091b      	lsrs	r3, r3, #4
    5542:	079a      	lsls	r2, r3, #30
    5544:	d101      	bne.n	554a <__lo0bits+0x4e>
    5546:	3002      	adds	r0, #2
    5548:	089b      	lsrs	r3, r3, #2
    554a:	07da      	lsls	r2, r3, #31
    554c:	d4e8      	bmi.n	5520 <__lo0bits+0x24>
    554e:	085b      	lsrs	r3, r3, #1
    5550:	d001      	beq.n	5556 <__lo0bits+0x5a>
    5552:	3001      	adds	r0, #1
    5554:	e7e4      	b.n	5520 <__lo0bits+0x24>
    5556:	2020      	movs	r0, #32
    5558:	e7e0      	b.n	551c <__lo0bits+0x20>

0000555a <__i2b>:
    555a:	b510      	push	{r4, lr}
    555c:	000c      	movs	r4, r1
    555e:	2101      	movs	r1, #1
    5560:	f7ff ff25 	bl	53ae <_Balloc>
    5564:	2301      	movs	r3, #1
    5566:	6144      	str	r4, [r0, #20]
    5568:	6103      	str	r3, [r0, #16]
    556a:	bd10      	pop	{r4, pc}

0000556c <__multiply>:
    556c:	b5f0      	push	{r4, r5, r6, r7, lr}
    556e:	690b      	ldr	r3, [r1, #16]
    5570:	0015      	movs	r5, r2
    5572:	6912      	ldr	r2, [r2, #16]
    5574:	b089      	sub	sp, #36	; 0x24
    5576:	000c      	movs	r4, r1
    5578:	4293      	cmp	r3, r2
    557a:	da01      	bge.n	5580 <__multiply+0x14>
    557c:	002c      	movs	r4, r5
    557e:	000d      	movs	r5, r1
    5580:	6927      	ldr	r7, [r4, #16]
    5582:	692e      	ldr	r6, [r5, #16]
    5584:	68a2      	ldr	r2, [r4, #8]
    5586:	19bb      	adds	r3, r7, r6
    5588:	6861      	ldr	r1, [r4, #4]
    558a:	9301      	str	r3, [sp, #4]
    558c:	4293      	cmp	r3, r2
    558e:	dd00      	ble.n	5592 <__multiply+0x26>
    5590:	3101      	adds	r1, #1
    5592:	f7ff ff0c 	bl	53ae <_Balloc>
    5596:	0003      	movs	r3, r0
    5598:	3314      	adds	r3, #20
    559a:	9300      	str	r3, [sp, #0]
    559c:	9a00      	ldr	r2, [sp, #0]
    559e:	19bb      	adds	r3, r7, r6
    55a0:	4694      	mov	ip, r2
    55a2:	009b      	lsls	r3, r3, #2
    55a4:	449c      	add	ip, r3
    55a6:	0013      	movs	r3, r2
    55a8:	2200      	movs	r2, #0
    55aa:	9004      	str	r0, [sp, #16]
    55ac:	4563      	cmp	r3, ip
    55ae:	d31c      	bcc.n	55ea <__multiply+0x7e>
    55b0:	002a      	movs	r2, r5
    55b2:	3414      	adds	r4, #20
    55b4:	00bf      	lsls	r7, r7, #2
    55b6:	19e3      	adds	r3, r4, r7
    55b8:	3214      	adds	r2, #20
    55ba:	00b6      	lsls	r6, r6, #2
    55bc:	9305      	str	r3, [sp, #20]
    55be:	1993      	adds	r3, r2, r6
    55c0:	9402      	str	r4, [sp, #8]
    55c2:	9306      	str	r3, [sp, #24]
    55c4:	9b06      	ldr	r3, [sp, #24]
    55c6:	429a      	cmp	r2, r3
    55c8:	d311      	bcc.n	55ee <__multiply+0x82>
    55ca:	9b01      	ldr	r3, [sp, #4]
    55cc:	2b00      	cmp	r3, #0
    55ce:	dd06      	ble.n	55de <__multiply+0x72>
    55d0:	2304      	movs	r3, #4
    55d2:	425b      	negs	r3, r3
    55d4:	449c      	add	ip, r3
    55d6:	4663      	mov	r3, ip
    55d8:	681b      	ldr	r3, [r3, #0]
    55da:	2b00      	cmp	r3, #0
    55dc:	d051      	beq.n	5682 <__multiply+0x116>
    55de:	9b04      	ldr	r3, [sp, #16]
    55e0:	9a01      	ldr	r2, [sp, #4]
    55e2:	0018      	movs	r0, r3
    55e4:	611a      	str	r2, [r3, #16]
    55e6:	b009      	add	sp, #36	; 0x24
    55e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55ea:	c304      	stmia	r3!, {r2}
    55ec:	e7de      	b.n	55ac <__multiply+0x40>
    55ee:	8814      	ldrh	r4, [r2, #0]
    55f0:	2c00      	cmp	r4, #0
    55f2:	d01e      	beq.n	5632 <__multiply+0xc6>
    55f4:	2600      	movs	r6, #0
    55f6:	9d00      	ldr	r5, [sp, #0]
    55f8:	9f02      	ldr	r7, [sp, #8]
    55fa:	cf01      	ldmia	r7!, {r0}
    55fc:	9507      	str	r5, [sp, #28]
    55fe:	cd08      	ldmia	r5!, {r3}
    5600:	9303      	str	r3, [sp, #12]
    5602:	b283      	uxth	r3, r0
    5604:	4363      	muls	r3, r4
    5606:	0019      	movs	r1, r3
    5608:	466b      	mov	r3, sp
    560a:	0c00      	lsrs	r0, r0, #16
    560c:	899b      	ldrh	r3, [r3, #12]
    560e:	4360      	muls	r0, r4
    5610:	18cb      	adds	r3, r1, r3
    5612:	9903      	ldr	r1, [sp, #12]
    5614:	199b      	adds	r3, r3, r6
    5616:	0c09      	lsrs	r1, r1, #16
    5618:	1841      	adds	r1, r0, r1
    561a:	0c18      	lsrs	r0, r3, #16
    561c:	1809      	adds	r1, r1, r0
    561e:	0c0e      	lsrs	r6, r1, #16
    5620:	b29b      	uxth	r3, r3
    5622:	0409      	lsls	r1, r1, #16
    5624:	430b      	orrs	r3, r1
    5626:	9907      	ldr	r1, [sp, #28]
    5628:	600b      	str	r3, [r1, #0]
    562a:	9b05      	ldr	r3, [sp, #20]
    562c:	42bb      	cmp	r3, r7
    562e:	d8e4      	bhi.n	55fa <__multiply+0x8e>
    5630:	602e      	str	r6, [r5, #0]
    5632:	6813      	ldr	r3, [r2, #0]
    5634:	0c1b      	lsrs	r3, r3, #16
    5636:	9303      	str	r3, [sp, #12]
    5638:	d01e      	beq.n	5678 <__multiply+0x10c>
    563a:	2600      	movs	r6, #0
    563c:	9b00      	ldr	r3, [sp, #0]
    563e:	9c02      	ldr	r4, [sp, #8]
    5640:	681b      	ldr	r3, [r3, #0]
    5642:	9800      	ldr	r0, [sp, #0]
    5644:	0007      	movs	r7, r0
    5646:	8821      	ldrh	r1, [r4, #0]
    5648:	9d03      	ldr	r5, [sp, #12]
    564a:	b29b      	uxth	r3, r3
    564c:	4369      	muls	r1, r5
    564e:	c820      	ldmia	r0!, {r5}
    5650:	0c2d      	lsrs	r5, r5, #16
    5652:	1949      	adds	r1, r1, r5
    5654:	198e      	adds	r6, r1, r6
    5656:	0431      	lsls	r1, r6, #16
    5658:	430b      	orrs	r3, r1
    565a:	603b      	str	r3, [r7, #0]
    565c:	cc08      	ldmia	r4!, {r3}
    565e:	9903      	ldr	r1, [sp, #12]
    5660:	0c1b      	lsrs	r3, r3, #16
    5662:	434b      	muls	r3, r1
    5664:	6879      	ldr	r1, [r7, #4]
    5666:	0c36      	lsrs	r6, r6, #16
    5668:	b289      	uxth	r1, r1
    566a:	185b      	adds	r3, r3, r1
    566c:	9905      	ldr	r1, [sp, #20]
    566e:	199b      	adds	r3, r3, r6
    5670:	0c1e      	lsrs	r6, r3, #16
    5672:	42a1      	cmp	r1, r4
    5674:	d8e6      	bhi.n	5644 <__multiply+0xd8>
    5676:	6003      	str	r3, [r0, #0]
    5678:	9b00      	ldr	r3, [sp, #0]
    567a:	3204      	adds	r2, #4
    567c:	3304      	adds	r3, #4
    567e:	9300      	str	r3, [sp, #0]
    5680:	e7a0      	b.n	55c4 <__multiply+0x58>
    5682:	9b01      	ldr	r3, [sp, #4]
    5684:	3b01      	subs	r3, #1
    5686:	9301      	str	r3, [sp, #4]
    5688:	e79f      	b.n	55ca <__multiply+0x5e>
	...

0000568c <__pow5mult>:
    568c:	2303      	movs	r3, #3
    568e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5690:	4013      	ands	r3, r2
    5692:	0005      	movs	r5, r0
    5694:	000e      	movs	r6, r1
    5696:	0014      	movs	r4, r2
    5698:	2b00      	cmp	r3, #0
    569a:	d008      	beq.n	56ae <__pow5mult+0x22>
    569c:	4922      	ldr	r1, [pc, #136]	; (5728 <__pow5mult+0x9c>)
    569e:	3b01      	subs	r3, #1
    56a0:	009a      	lsls	r2, r3, #2
    56a2:	5852      	ldr	r2, [r2, r1]
    56a4:	2300      	movs	r3, #0
    56a6:	0031      	movs	r1, r6
    56a8:	f7ff fed2 	bl	5450 <__multadd>
    56ac:	0006      	movs	r6, r0
    56ae:	10a3      	asrs	r3, r4, #2
    56b0:	9301      	str	r3, [sp, #4]
    56b2:	d036      	beq.n	5722 <__pow5mult+0x96>
    56b4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    56b6:	2c00      	cmp	r4, #0
    56b8:	d107      	bne.n	56ca <__pow5mult+0x3e>
    56ba:	2010      	movs	r0, #16
    56bc:	f7ff fe62 	bl	5384 <malloc>
    56c0:	6268      	str	r0, [r5, #36]	; 0x24
    56c2:	6044      	str	r4, [r0, #4]
    56c4:	6084      	str	r4, [r0, #8]
    56c6:	6004      	str	r4, [r0, #0]
    56c8:	60c4      	str	r4, [r0, #12]
    56ca:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    56cc:	68bc      	ldr	r4, [r7, #8]
    56ce:	2c00      	cmp	r4, #0
    56d0:	d107      	bne.n	56e2 <__pow5mult+0x56>
    56d2:	4916      	ldr	r1, [pc, #88]	; (572c <__pow5mult+0xa0>)
    56d4:	0028      	movs	r0, r5
    56d6:	f7ff ff40 	bl	555a <__i2b>
    56da:	2300      	movs	r3, #0
    56dc:	0004      	movs	r4, r0
    56de:	60b8      	str	r0, [r7, #8]
    56e0:	6003      	str	r3, [r0, #0]
    56e2:	2201      	movs	r2, #1
    56e4:	9b01      	ldr	r3, [sp, #4]
    56e6:	4213      	tst	r3, r2
    56e8:	d00a      	beq.n	5700 <__pow5mult+0x74>
    56ea:	0031      	movs	r1, r6
    56ec:	0022      	movs	r2, r4
    56ee:	0028      	movs	r0, r5
    56f0:	f7ff ff3c 	bl	556c <__multiply>
    56f4:	0007      	movs	r7, r0
    56f6:	0031      	movs	r1, r6
    56f8:	0028      	movs	r0, r5
    56fa:	f7ff fe90 	bl	541e <_Bfree>
    56fe:	003e      	movs	r6, r7
    5700:	9b01      	ldr	r3, [sp, #4]
    5702:	105b      	asrs	r3, r3, #1
    5704:	9301      	str	r3, [sp, #4]
    5706:	d00c      	beq.n	5722 <__pow5mult+0x96>
    5708:	6820      	ldr	r0, [r4, #0]
    570a:	2800      	cmp	r0, #0
    570c:	d107      	bne.n	571e <__pow5mult+0x92>
    570e:	0022      	movs	r2, r4
    5710:	0021      	movs	r1, r4
    5712:	0028      	movs	r0, r5
    5714:	f7ff ff2a 	bl	556c <__multiply>
    5718:	2300      	movs	r3, #0
    571a:	6020      	str	r0, [r4, #0]
    571c:	6003      	str	r3, [r0, #0]
    571e:	0004      	movs	r4, r0
    5720:	e7df      	b.n	56e2 <__pow5mult+0x56>
    5722:	0030      	movs	r0, r6
    5724:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5726:	46c0      	nop			; (mov r8, r8)
    5728:	00008d38 	.word	0x00008d38
    572c:	00000271 	.word	0x00000271

00005730 <__lshift>:
    5730:	b5f0      	push	{r4, r5, r6, r7, lr}
    5732:	000d      	movs	r5, r1
    5734:	0017      	movs	r7, r2
    5736:	692b      	ldr	r3, [r5, #16]
    5738:	1154      	asrs	r4, r2, #5
    573a:	b085      	sub	sp, #20
    573c:	18e3      	adds	r3, r4, r3
    573e:	9302      	str	r3, [sp, #8]
    5740:	3301      	adds	r3, #1
    5742:	9301      	str	r3, [sp, #4]
    5744:	6849      	ldr	r1, [r1, #4]
    5746:	68ab      	ldr	r3, [r5, #8]
    5748:	9003      	str	r0, [sp, #12]
    574a:	9a01      	ldr	r2, [sp, #4]
    574c:	4293      	cmp	r3, r2
    574e:	db34      	blt.n	57ba <__lshift+0x8a>
    5750:	9803      	ldr	r0, [sp, #12]
    5752:	f7ff fe2c 	bl	53ae <_Balloc>
    5756:	2300      	movs	r3, #0
    5758:	0002      	movs	r2, r0
    575a:	0006      	movs	r6, r0
    575c:	0019      	movs	r1, r3
    575e:	3214      	adds	r2, #20
    5760:	42a3      	cmp	r3, r4
    5762:	db2d      	blt.n	57c0 <__lshift+0x90>
    5764:	43e3      	mvns	r3, r4
    5766:	17db      	asrs	r3, r3, #31
    5768:	401c      	ands	r4, r3
    576a:	002b      	movs	r3, r5
    576c:	211f      	movs	r1, #31
    576e:	00a4      	lsls	r4, r4, #2
    5770:	1914      	adds	r4, r2, r4
    5772:	692a      	ldr	r2, [r5, #16]
    5774:	3314      	adds	r3, #20
    5776:	0092      	lsls	r2, r2, #2
    5778:	189a      	adds	r2, r3, r2
    577a:	400f      	ands	r7, r1
    577c:	d024      	beq.n	57c8 <__lshift+0x98>
    577e:	3101      	adds	r1, #1
    5780:	1bc9      	subs	r1, r1, r7
    5782:	468c      	mov	ip, r1
    5784:	2100      	movs	r1, #0
    5786:	6818      	ldr	r0, [r3, #0]
    5788:	40b8      	lsls	r0, r7
    578a:	4301      	orrs	r1, r0
    578c:	4660      	mov	r0, ip
    578e:	6021      	str	r1, [r4, #0]
    5790:	cb02      	ldmia	r3!, {r1}
    5792:	3404      	adds	r4, #4
    5794:	40c1      	lsrs	r1, r0
    5796:	429a      	cmp	r2, r3
    5798:	d8f5      	bhi.n	5786 <__lshift+0x56>
    579a:	6021      	str	r1, [r4, #0]
    579c:	2900      	cmp	r1, #0
    579e:	d002      	beq.n	57a6 <__lshift+0x76>
    57a0:	9b02      	ldr	r3, [sp, #8]
    57a2:	3302      	adds	r3, #2
    57a4:	9301      	str	r3, [sp, #4]
    57a6:	9b01      	ldr	r3, [sp, #4]
    57a8:	9803      	ldr	r0, [sp, #12]
    57aa:	3b01      	subs	r3, #1
    57ac:	6133      	str	r3, [r6, #16]
    57ae:	0029      	movs	r1, r5
    57b0:	f7ff fe35 	bl	541e <_Bfree>
    57b4:	0030      	movs	r0, r6
    57b6:	b005      	add	sp, #20
    57b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57ba:	3101      	adds	r1, #1
    57bc:	005b      	lsls	r3, r3, #1
    57be:	e7c4      	b.n	574a <__lshift+0x1a>
    57c0:	0098      	lsls	r0, r3, #2
    57c2:	5011      	str	r1, [r2, r0]
    57c4:	3301      	adds	r3, #1
    57c6:	e7cb      	b.n	5760 <__lshift+0x30>
    57c8:	cb02      	ldmia	r3!, {r1}
    57ca:	c402      	stmia	r4!, {r1}
    57cc:	429a      	cmp	r2, r3
    57ce:	d8fb      	bhi.n	57c8 <__lshift+0x98>
    57d0:	e7e9      	b.n	57a6 <__lshift+0x76>

000057d2 <__mcmp>:
    57d2:	690a      	ldr	r2, [r1, #16]
    57d4:	6903      	ldr	r3, [r0, #16]
    57d6:	b530      	push	{r4, r5, lr}
    57d8:	1a9b      	subs	r3, r3, r2
    57da:	d10e      	bne.n	57fa <__mcmp+0x28>
    57dc:	0092      	lsls	r2, r2, #2
    57de:	3014      	adds	r0, #20
    57e0:	3114      	adds	r1, #20
    57e2:	1884      	adds	r4, r0, r2
    57e4:	1889      	adds	r1, r1, r2
    57e6:	3c04      	subs	r4, #4
    57e8:	3904      	subs	r1, #4
    57ea:	6822      	ldr	r2, [r4, #0]
    57ec:	680d      	ldr	r5, [r1, #0]
    57ee:	42aa      	cmp	r2, r5
    57f0:	d005      	beq.n	57fe <__mcmp+0x2c>
    57f2:	42aa      	cmp	r2, r5
    57f4:	4192      	sbcs	r2, r2
    57f6:	2301      	movs	r3, #1
    57f8:	4313      	orrs	r3, r2
    57fa:	0018      	movs	r0, r3
    57fc:	bd30      	pop	{r4, r5, pc}
    57fe:	42a0      	cmp	r0, r4
    5800:	d3f1      	bcc.n	57e6 <__mcmp+0x14>
    5802:	e7fa      	b.n	57fa <__mcmp+0x28>

00005804 <__mdiff>:
    5804:	b5f0      	push	{r4, r5, r6, r7, lr}
    5806:	000d      	movs	r5, r1
    5808:	b085      	sub	sp, #20
    580a:	0007      	movs	r7, r0
    580c:	0011      	movs	r1, r2
    580e:	0028      	movs	r0, r5
    5810:	0014      	movs	r4, r2
    5812:	f7ff ffde 	bl	57d2 <__mcmp>
    5816:	1e06      	subs	r6, r0, #0
    5818:	d108      	bne.n	582c <__mdiff+0x28>
    581a:	0001      	movs	r1, r0
    581c:	0038      	movs	r0, r7
    581e:	f7ff fdc6 	bl	53ae <_Balloc>
    5822:	2301      	movs	r3, #1
    5824:	6146      	str	r6, [r0, #20]
    5826:	6103      	str	r3, [r0, #16]
    5828:	b005      	add	sp, #20
    582a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    582c:	2301      	movs	r3, #1
    582e:	9301      	str	r3, [sp, #4]
    5830:	2800      	cmp	r0, #0
    5832:	db04      	blt.n	583e <__mdiff+0x3a>
    5834:	0023      	movs	r3, r4
    5836:	002c      	movs	r4, r5
    5838:	001d      	movs	r5, r3
    583a:	2300      	movs	r3, #0
    583c:	9301      	str	r3, [sp, #4]
    583e:	6861      	ldr	r1, [r4, #4]
    5840:	0038      	movs	r0, r7
    5842:	f7ff fdb4 	bl	53ae <_Balloc>
    5846:	002f      	movs	r7, r5
    5848:	2200      	movs	r2, #0
    584a:	9b01      	ldr	r3, [sp, #4]
    584c:	6926      	ldr	r6, [r4, #16]
    584e:	60c3      	str	r3, [r0, #12]
    5850:	3414      	adds	r4, #20
    5852:	00b3      	lsls	r3, r6, #2
    5854:	18e3      	adds	r3, r4, r3
    5856:	9302      	str	r3, [sp, #8]
    5858:	692b      	ldr	r3, [r5, #16]
    585a:	3714      	adds	r7, #20
    585c:	009b      	lsls	r3, r3, #2
    585e:	18fb      	adds	r3, r7, r3
    5860:	9303      	str	r3, [sp, #12]
    5862:	0003      	movs	r3, r0
    5864:	4694      	mov	ip, r2
    5866:	3314      	adds	r3, #20
    5868:	cc20      	ldmia	r4!, {r5}
    586a:	cf04      	ldmia	r7!, {r2}
    586c:	9201      	str	r2, [sp, #4]
    586e:	b2aa      	uxth	r2, r5
    5870:	4494      	add	ip, r2
    5872:	466a      	mov	r2, sp
    5874:	4661      	mov	r1, ip
    5876:	8892      	ldrh	r2, [r2, #4]
    5878:	0c2d      	lsrs	r5, r5, #16
    587a:	1a8a      	subs	r2, r1, r2
    587c:	9901      	ldr	r1, [sp, #4]
    587e:	0c09      	lsrs	r1, r1, #16
    5880:	1a69      	subs	r1, r5, r1
    5882:	1415      	asrs	r5, r2, #16
    5884:	1949      	adds	r1, r1, r5
    5886:	140d      	asrs	r5, r1, #16
    5888:	b292      	uxth	r2, r2
    588a:	0409      	lsls	r1, r1, #16
    588c:	430a      	orrs	r2, r1
    588e:	601a      	str	r2, [r3, #0]
    5890:	9a03      	ldr	r2, [sp, #12]
    5892:	46ac      	mov	ip, r5
    5894:	3304      	adds	r3, #4
    5896:	42ba      	cmp	r2, r7
    5898:	d8e6      	bhi.n	5868 <__mdiff+0x64>
    589a:	9902      	ldr	r1, [sp, #8]
    589c:	001a      	movs	r2, r3
    589e:	428c      	cmp	r4, r1
    58a0:	d305      	bcc.n	58ae <__mdiff+0xaa>
    58a2:	3a04      	subs	r2, #4
    58a4:	6813      	ldr	r3, [r2, #0]
    58a6:	2b00      	cmp	r3, #0
    58a8:	d00e      	beq.n	58c8 <__mdiff+0xc4>
    58aa:	6106      	str	r6, [r0, #16]
    58ac:	e7bc      	b.n	5828 <__mdiff+0x24>
    58ae:	cc04      	ldmia	r4!, {r2}
    58b0:	b291      	uxth	r1, r2
    58b2:	4461      	add	r1, ip
    58b4:	140d      	asrs	r5, r1, #16
    58b6:	0c12      	lsrs	r2, r2, #16
    58b8:	1952      	adds	r2, r2, r5
    58ba:	1415      	asrs	r5, r2, #16
    58bc:	b289      	uxth	r1, r1
    58be:	0412      	lsls	r2, r2, #16
    58c0:	430a      	orrs	r2, r1
    58c2:	46ac      	mov	ip, r5
    58c4:	c304      	stmia	r3!, {r2}
    58c6:	e7e8      	b.n	589a <__mdiff+0x96>
    58c8:	3e01      	subs	r6, #1
    58ca:	e7ea      	b.n	58a2 <__mdiff+0x9e>

000058cc <__d2b>:
    58cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    58ce:	001d      	movs	r5, r3
    58d0:	2101      	movs	r1, #1
    58d2:	9f08      	ldr	r7, [sp, #32]
    58d4:	0014      	movs	r4, r2
    58d6:	f7ff fd6a 	bl	53ae <_Balloc>
    58da:	032b      	lsls	r3, r5, #12
    58dc:	006d      	lsls	r5, r5, #1
    58de:	0006      	movs	r6, r0
    58e0:	0b1b      	lsrs	r3, r3, #12
    58e2:	0d6d      	lsrs	r5, r5, #21
    58e4:	d124      	bne.n	5930 <__d2b+0x64>
    58e6:	9301      	str	r3, [sp, #4]
    58e8:	2c00      	cmp	r4, #0
    58ea:	d027      	beq.n	593c <__d2b+0x70>
    58ec:	4668      	mov	r0, sp
    58ee:	9400      	str	r4, [sp, #0]
    58f0:	f7ff fe04 	bl	54fc <__lo0bits>
    58f4:	9c00      	ldr	r4, [sp, #0]
    58f6:	2800      	cmp	r0, #0
    58f8:	d01e      	beq.n	5938 <__d2b+0x6c>
    58fa:	9b01      	ldr	r3, [sp, #4]
    58fc:	2120      	movs	r1, #32
    58fe:	001a      	movs	r2, r3
    5900:	1a09      	subs	r1, r1, r0
    5902:	408a      	lsls	r2, r1
    5904:	40c3      	lsrs	r3, r0
    5906:	4322      	orrs	r2, r4
    5908:	6172      	str	r2, [r6, #20]
    590a:	9301      	str	r3, [sp, #4]
    590c:	9c01      	ldr	r4, [sp, #4]
    590e:	61b4      	str	r4, [r6, #24]
    5910:	1e63      	subs	r3, r4, #1
    5912:	419c      	sbcs	r4, r3
    5914:	3401      	adds	r4, #1
    5916:	6134      	str	r4, [r6, #16]
    5918:	2d00      	cmp	r5, #0
    591a:	d018      	beq.n	594e <__d2b+0x82>
    591c:	4b12      	ldr	r3, [pc, #72]	; (5968 <__d2b+0x9c>)
    591e:	18ed      	adds	r5, r5, r3
    5920:	2335      	movs	r3, #53	; 0x35
    5922:	182d      	adds	r5, r5, r0
    5924:	603d      	str	r5, [r7, #0]
    5926:	1a18      	subs	r0, r3, r0
    5928:	9b09      	ldr	r3, [sp, #36]	; 0x24
    592a:	6018      	str	r0, [r3, #0]
    592c:	0030      	movs	r0, r6
    592e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5930:	2280      	movs	r2, #128	; 0x80
    5932:	0352      	lsls	r2, r2, #13
    5934:	4313      	orrs	r3, r2
    5936:	e7d6      	b.n	58e6 <__d2b+0x1a>
    5938:	6174      	str	r4, [r6, #20]
    593a:	e7e7      	b.n	590c <__d2b+0x40>
    593c:	a801      	add	r0, sp, #4
    593e:	f7ff fddd 	bl	54fc <__lo0bits>
    5942:	2401      	movs	r4, #1
    5944:	9b01      	ldr	r3, [sp, #4]
    5946:	6134      	str	r4, [r6, #16]
    5948:	6173      	str	r3, [r6, #20]
    594a:	3020      	adds	r0, #32
    594c:	e7e4      	b.n	5918 <__d2b+0x4c>
    594e:	4b07      	ldr	r3, [pc, #28]	; (596c <__d2b+0xa0>)
    5950:	18c0      	adds	r0, r0, r3
    5952:	4b07      	ldr	r3, [pc, #28]	; (5970 <__d2b+0xa4>)
    5954:	6038      	str	r0, [r7, #0]
    5956:	18e3      	adds	r3, r4, r3
    5958:	009b      	lsls	r3, r3, #2
    595a:	18f3      	adds	r3, r6, r3
    595c:	6958      	ldr	r0, [r3, #20]
    595e:	f7ff fdb3 	bl	54c8 <__hi0bits>
    5962:	0164      	lsls	r4, r4, #5
    5964:	1a20      	subs	r0, r4, r0
    5966:	e7df      	b.n	5928 <__d2b+0x5c>
    5968:	fffffbcd 	.word	0xfffffbcd
    596c:	fffffbce 	.word	0xfffffbce
    5970:	3fffffff 	.word	0x3fffffff

00005974 <_calloc_r>:
    5974:	434a      	muls	r2, r1
    5976:	b570      	push	{r4, r5, r6, lr}
    5978:	0011      	movs	r1, r2
    597a:	0014      	movs	r4, r2
    597c:	f000 f852 	bl	5a24 <_malloc_r>
    5980:	1e05      	subs	r5, r0, #0
    5982:	d003      	beq.n	598c <_calloc_r+0x18>
    5984:	0022      	movs	r2, r4
    5986:	2100      	movs	r1, #0
    5988:	f7fd fe09 	bl	359e <memset>
    598c:	0028      	movs	r0, r5
    598e:	bd70      	pop	{r4, r5, r6, pc}

00005990 <_free_r>:
    5990:	b570      	push	{r4, r5, r6, lr}
    5992:	0005      	movs	r5, r0
    5994:	2900      	cmp	r1, #0
    5996:	d010      	beq.n	59ba <_free_r+0x2a>
    5998:	1f0c      	subs	r4, r1, #4
    599a:	6823      	ldr	r3, [r4, #0]
    599c:	2b00      	cmp	r3, #0
    599e:	da00      	bge.n	59a2 <_free_r+0x12>
    59a0:	18e4      	adds	r4, r4, r3
    59a2:	0028      	movs	r0, r5
    59a4:	f000 faae 	bl	5f04 <__malloc_lock>
    59a8:	4a1d      	ldr	r2, [pc, #116]	; (5a20 <_free_r+0x90>)
    59aa:	6813      	ldr	r3, [r2, #0]
    59ac:	2b00      	cmp	r3, #0
    59ae:	d105      	bne.n	59bc <_free_r+0x2c>
    59b0:	6063      	str	r3, [r4, #4]
    59b2:	6014      	str	r4, [r2, #0]
    59b4:	0028      	movs	r0, r5
    59b6:	f000 faa6 	bl	5f06 <__malloc_unlock>
    59ba:	bd70      	pop	{r4, r5, r6, pc}
    59bc:	42a3      	cmp	r3, r4
    59be:	d909      	bls.n	59d4 <_free_r+0x44>
    59c0:	6821      	ldr	r1, [r4, #0]
    59c2:	1860      	adds	r0, r4, r1
    59c4:	4283      	cmp	r3, r0
    59c6:	d1f3      	bne.n	59b0 <_free_r+0x20>
    59c8:	6818      	ldr	r0, [r3, #0]
    59ca:	685b      	ldr	r3, [r3, #4]
    59cc:	1841      	adds	r1, r0, r1
    59ce:	6021      	str	r1, [r4, #0]
    59d0:	e7ee      	b.n	59b0 <_free_r+0x20>
    59d2:	0013      	movs	r3, r2
    59d4:	685a      	ldr	r2, [r3, #4]
    59d6:	2a00      	cmp	r2, #0
    59d8:	d001      	beq.n	59de <_free_r+0x4e>
    59da:	42a2      	cmp	r2, r4
    59dc:	d9f9      	bls.n	59d2 <_free_r+0x42>
    59de:	6819      	ldr	r1, [r3, #0]
    59e0:	1858      	adds	r0, r3, r1
    59e2:	42a0      	cmp	r0, r4
    59e4:	d10b      	bne.n	59fe <_free_r+0x6e>
    59e6:	6820      	ldr	r0, [r4, #0]
    59e8:	1809      	adds	r1, r1, r0
    59ea:	1858      	adds	r0, r3, r1
    59ec:	6019      	str	r1, [r3, #0]
    59ee:	4282      	cmp	r2, r0
    59f0:	d1e0      	bne.n	59b4 <_free_r+0x24>
    59f2:	6810      	ldr	r0, [r2, #0]
    59f4:	6852      	ldr	r2, [r2, #4]
    59f6:	1841      	adds	r1, r0, r1
    59f8:	6019      	str	r1, [r3, #0]
    59fa:	605a      	str	r2, [r3, #4]
    59fc:	e7da      	b.n	59b4 <_free_r+0x24>
    59fe:	42a0      	cmp	r0, r4
    5a00:	d902      	bls.n	5a08 <_free_r+0x78>
    5a02:	230c      	movs	r3, #12
    5a04:	602b      	str	r3, [r5, #0]
    5a06:	e7d5      	b.n	59b4 <_free_r+0x24>
    5a08:	6821      	ldr	r1, [r4, #0]
    5a0a:	1860      	adds	r0, r4, r1
    5a0c:	4282      	cmp	r2, r0
    5a0e:	d103      	bne.n	5a18 <_free_r+0x88>
    5a10:	6810      	ldr	r0, [r2, #0]
    5a12:	6852      	ldr	r2, [r2, #4]
    5a14:	1841      	adds	r1, r0, r1
    5a16:	6021      	str	r1, [r4, #0]
    5a18:	6062      	str	r2, [r4, #4]
    5a1a:	605c      	str	r4, [r3, #4]
    5a1c:	e7ca      	b.n	59b4 <_free_r+0x24>
    5a1e:	46c0      	nop			; (mov r8, r8)
    5a20:	20000880 	.word	0x20000880

00005a24 <_malloc_r>:
    5a24:	2303      	movs	r3, #3
    5a26:	b570      	push	{r4, r5, r6, lr}
    5a28:	1ccd      	adds	r5, r1, #3
    5a2a:	439d      	bics	r5, r3
    5a2c:	3508      	adds	r5, #8
    5a2e:	0006      	movs	r6, r0
    5a30:	2d0c      	cmp	r5, #12
    5a32:	d21e      	bcs.n	5a72 <_malloc_r+0x4e>
    5a34:	250c      	movs	r5, #12
    5a36:	42a9      	cmp	r1, r5
    5a38:	d81d      	bhi.n	5a76 <_malloc_r+0x52>
    5a3a:	0030      	movs	r0, r6
    5a3c:	f000 fa62 	bl	5f04 <__malloc_lock>
    5a40:	4a25      	ldr	r2, [pc, #148]	; (5ad8 <_malloc_r+0xb4>)
    5a42:	6814      	ldr	r4, [r2, #0]
    5a44:	0021      	movs	r1, r4
    5a46:	2900      	cmp	r1, #0
    5a48:	d119      	bne.n	5a7e <_malloc_r+0x5a>
    5a4a:	4c24      	ldr	r4, [pc, #144]	; (5adc <_malloc_r+0xb8>)
    5a4c:	6823      	ldr	r3, [r4, #0]
    5a4e:	2b00      	cmp	r3, #0
    5a50:	d103      	bne.n	5a5a <_malloc_r+0x36>
    5a52:	0030      	movs	r0, r6
    5a54:	f000 f988 	bl	5d68 <_sbrk_r>
    5a58:	6020      	str	r0, [r4, #0]
    5a5a:	0029      	movs	r1, r5
    5a5c:	0030      	movs	r0, r6
    5a5e:	f000 f983 	bl	5d68 <_sbrk_r>
    5a62:	1c43      	adds	r3, r0, #1
    5a64:	d12c      	bne.n	5ac0 <_malloc_r+0x9c>
    5a66:	230c      	movs	r3, #12
    5a68:	0030      	movs	r0, r6
    5a6a:	6033      	str	r3, [r6, #0]
    5a6c:	f000 fa4b 	bl	5f06 <__malloc_unlock>
    5a70:	e003      	b.n	5a7a <_malloc_r+0x56>
    5a72:	2d00      	cmp	r5, #0
    5a74:	dadf      	bge.n	5a36 <_malloc_r+0x12>
    5a76:	230c      	movs	r3, #12
    5a78:	6033      	str	r3, [r6, #0]
    5a7a:	2000      	movs	r0, #0
    5a7c:	bd70      	pop	{r4, r5, r6, pc}
    5a7e:	680b      	ldr	r3, [r1, #0]
    5a80:	1b5b      	subs	r3, r3, r5
    5a82:	d41a      	bmi.n	5aba <_malloc_r+0x96>
    5a84:	2b0b      	cmp	r3, #11
    5a86:	d903      	bls.n	5a90 <_malloc_r+0x6c>
    5a88:	600b      	str	r3, [r1, #0]
    5a8a:	18cc      	adds	r4, r1, r3
    5a8c:	6025      	str	r5, [r4, #0]
    5a8e:	e003      	b.n	5a98 <_malloc_r+0x74>
    5a90:	428c      	cmp	r4, r1
    5a92:	d10e      	bne.n	5ab2 <_malloc_r+0x8e>
    5a94:	6863      	ldr	r3, [r4, #4]
    5a96:	6013      	str	r3, [r2, #0]
    5a98:	0030      	movs	r0, r6
    5a9a:	f000 fa34 	bl	5f06 <__malloc_unlock>
    5a9e:	0020      	movs	r0, r4
    5aa0:	2207      	movs	r2, #7
    5aa2:	300b      	adds	r0, #11
    5aa4:	1d23      	adds	r3, r4, #4
    5aa6:	4390      	bics	r0, r2
    5aa8:	1ac3      	subs	r3, r0, r3
    5aaa:	d0e7      	beq.n	5a7c <_malloc_r+0x58>
    5aac:	425a      	negs	r2, r3
    5aae:	50e2      	str	r2, [r4, r3]
    5ab0:	e7e4      	b.n	5a7c <_malloc_r+0x58>
    5ab2:	684b      	ldr	r3, [r1, #4]
    5ab4:	6063      	str	r3, [r4, #4]
    5ab6:	000c      	movs	r4, r1
    5ab8:	e7ee      	b.n	5a98 <_malloc_r+0x74>
    5aba:	000c      	movs	r4, r1
    5abc:	6849      	ldr	r1, [r1, #4]
    5abe:	e7c2      	b.n	5a46 <_malloc_r+0x22>
    5ac0:	2303      	movs	r3, #3
    5ac2:	1cc4      	adds	r4, r0, #3
    5ac4:	439c      	bics	r4, r3
    5ac6:	42a0      	cmp	r0, r4
    5ac8:	d0e0      	beq.n	5a8c <_malloc_r+0x68>
    5aca:	1a21      	subs	r1, r4, r0
    5acc:	0030      	movs	r0, r6
    5ace:	f000 f94b 	bl	5d68 <_sbrk_r>
    5ad2:	1c43      	adds	r3, r0, #1
    5ad4:	d1da      	bne.n	5a8c <_malloc_r+0x68>
    5ad6:	e7c6      	b.n	5a66 <_malloc_r+0x42>
    5ad8:	20000880 	.word	0x20000880
    5adc:	20000884 	.word	0x20000884

00005ae0 <__sfputc_r>:
    5ae0:	6893      	ldr	r3, [r2, #8]
    5ae2:	b510      	push	{r4, lr}
    5ae4:	3b01      	subs	r3, #1
    5ae6:	6093      	str	r3, [r2, #8]
    5ae8:	2b00      	cmp	r3, #0
    5aea:	da05      	bge.n	5af8 <__sfputc_r+0x18>
    5aec:	6994      	ldr	r4, [r2, #24]
    5aee:	42a3      	cmp	r3, r4
    5af0:	db08      	blt.n	5b04 <__sfputc_r+0x24>
    5af2:	b2cb      	uxtb	r3, r1
    5af4:	2b0a      	cmp	r3, #10
    5af6:	d005      	beq.n	5b04 <__sfputc_r+0x24>
    5af8:	6813      	ldr	r3, [r2, #0]
    5afa:	1c58      	adds	r0, r3, #1
    5afc:	6010      	str	r0, [r2, #0]
    5afe:	7019      	strb	r1, [r3, #0]
    5b00:	b2c8      	uxtb	r0, r1
    5b02:	bd10      	pop	{r4, pc}
    5b04:	f7fe fb06 	bl	4114 <__swbuf_r>
    5b08:	e7fb      	b.n	5b02 <__sfputc_r+0x22>

00005b0a <__sfputs_r>:
    5b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b0c:	0006      	movs	r6, r0
    5b0e:	000f      	movs	r7, r1
    5b10:	0014      	movs	r4, r2
    5b12:	18d5      	adds	r5, r2, r3
    5b14:	42ac      	cmp	r4, r5
    5b16:	d101      	bne.n	5b1c <__sfputs_r+0x12>
    5b18:	2000      	movs	r0, #0
    5b1a:	e007      	b.n	5b2c <__sfputs_r+0x22>
    5b1c:	7821      	ldrb	r1, [r4, #0]
    5b1e:	003a      	movs	r2, r7
    5b20:	0030      	movs	r0, r6
    5b22:	f7ff ffdd 	bl	5ae0 <__sfputc_r>
    5b26:	3401      	adds	r4, #1
    5b28:	1c43      	adds	r3, r0, #1
    5b2a:	d1f3      	bne.n	5b14 <__sfputs_r+0xa>
    5b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005b30 <_vfiprintf_r>:
    5b30:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b32:	b09f      	sub	sp, #124	; 0x7c
    5b34:	0006      	movs	r6, r0
    5b36:	000f      	movs	r7, r1
    5b38:	0014      	movs	r4, r2
    5b3a:	9305      	str	r3, [sp, #20]
    5b3c:	2800      	cmp	r0, #0
    5b3e:	d004      	beq.n	5b4a <_vfiprintf_r+0x1a>
    5b40:	6983      	ldr	r3, [r0, #24]
    5b42:	2b00      	cmp	r3, #0
    5b44:	d101      	bne.n	5b4a <_vfiprintf_r+0x1a>
    5b46:	f7ff fb15 	bl	5174 <__sinit>
    5b4a:	4b7f      	ldr	r3, [pc, #508]	; (5d48 <_vfiprintf_r+0x218>)
    5b4c:	429f      	cmp	r7, r3
    5b4e:	d15c      	bne.n	5c0a <_vfiprintf_r+0xda>
    5b50:	6877      	ldr	r7, [r6, #4]
    5b52:	89bb      	ldrh	r3, [r7, #12]
    5b54:	071b      	lsls	r3, r3, #28
    5b56:	d562      	bpl.n	5c1e <_vfiprintf_r+0xee>
    5b58:	693b      	ldr	r3, [r7, #16]
    5b5a:	2b00      	cmp	r3, #0
    5b5c:	d05f      	beq.n	5c1e <_vfiprintf_r+0xee>
    5b5e:	2300      	movs	r3, #0
    5b60:	ad06      	add	r5, sp, #24
    5b62:	616b      	str	r3, [r5, #20]
    5b64:	3320      	adds	r3, #32
    5b66:	766b      	strb	r3, [r5, #25]
    5b68:	3310      	adds	r3, #16
    5b6a:	76ab      	strb	r3, [r5, #26]
    5b6c:	9402      	str	r4, [sp, #8]
    5b6e:	9c02      	ldr	r4, [sp, #8]
    5b70:	7823      	ldrb	r3, [r4, #0]
    5b72:	2b00      	cmp	r3, #0
    5b74:	d15d      	bne.n	5c32 <_vfiprintf_r+0x102>
    5b76:	9b02      	ldr	r3, [sp, #8]
    5b78:	1ae3      	subs	r3, r4, r3
    5b7a:	9304      	str	r3, [sp, #16]
    5b7c:	d00d      	beq.n	5b9a <_vfiprintf_r+0x6a>
    5b7e:	9b04      	ldr	r3, [sp, #16]
    5b80:	9a02      	ldr	r2, [sp, #8]
    5b82:	0039      	movs	r1, r7
    5b84:	0030      	movs	r0, r6
    5b86:	f7ff ffc0 	bl	5b0a <__sfputs_r>
    5b8a:	1c43      	adds	r3, r0, #1
    5b8c:	d100      	bne.n	5b90 <_vfiprintf_r+0x60>
    5b8e:	e0cc      	b.n	5d2a <_vfiprintf_r+0x1fa>
    5b90:	696a      	ldr	r2, [r5, #20]
    5b92:	9b04      	ldr	r3, [sp, #16]
    5b94:	4694      	mov	ip, r2
    5b96:	4463      	add	r3, ip
    5b98:	616b      	str	r3, [r5, #20]
    5b9a:	7823      	ldrb	r3, [r4, #0]
    5b9c:	2b00      	cmp	r3, #0
    5b9e:	d100      	bne.n	5ba2 <_vfiprintf_r+0x72>
    5ba0:	e0c3      	b.n	5d2a <_vfiprintf_r+0x1fa>
    5ba2:	2201      	movs	r2, #1
    5ba4:	2300      	movs	r3, #0
    5ba6:	4252      	negs	r2, r2
    5ba8:	606a      	str	r2, [r5, #4]
    5baa:	a902      	add	r1, sp, #8
    5bac:	3254      	adds	r2, #84	; 0x54
    5bae:	1852      	adds	r2, r2, r1
    5bb0:	3401      	adds	r4, #1
    5bb2:	602b      	str	r3, [r5, #0]
    5bb4:	60eb      	str	r3, [r5, #12]
    5bb6:	60ab      	str	r3, [r5, #8]
    5bb8:	7013      	strb	r3, [r2, #0]
    5bba:	65ab      	str	r3, [r5, #88]	; 0x58
    5bbc:	7821      	ldrb	r1, [r4, #0]
    5bbe:	2205      	movs	r2, #5
    5bc0:	4862      	ldr	r0, [pc, #392]	; (5d4c <_vfiprintf_r+0x21c>)
    5bc2:	f7ff fbe9 	bl	5398 <memchr>
    5bc6:	1c63      	adds	r3, r4, #1
    5bc8:	469c      	mov	ip, r3
    5bca:	2800      	cmp	r0, #0
    5bcc:	d135      	bne.n	5c3a <_vfiprintf_r+0x10a>
    5bce:	6829      	ldr	r1, [r5, #0]
    5bd0:	06cb      	lsls	r3, r1, #27
    5bd2:	d504      	bpl.n	5bde <_vfiprintf_r+0xae>
    5bd4:	2353      	movs	r3, #83	; 0x53
    5bd6:	aa02      	add	r2, sp, #8
    5bd8:	3020      	adds	r0, #32
    5bda:	189b      	adds	r3, r3, r2
    5bdc:	7018      	strb	r0, [r3, #0]
    5bde:	070b      	lsls	r3, r1, #28
    5be0:	d504      	bpl.n	5bec <_vfiprintf_r+0xbc>
    5be2:	2353      	movs	r3, #83	; 0x53
    5be4:	202b      	movs	r0, #43	; 0x2b
    5be6:	aa02      	add	r2, sp, #8
    5be8:	189b      	adds	r3, r3, r2
    5bea:	7018      	strb	r0, [r3, #0]
    5bec:	7823      	ldrb	r3, [r4, #0]
    5bee:	2b2a      	cmp	r3, #42	; 0x2a
    5bf0:	d02c      	beq.n	5c4c <_vfiprintf_r+0x11c>
    5bf2:	2000      	movs	r0, #0
    5bf4:	210a      	movs	r1, #10
    5bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5bf8:	7822      	ldrb	r2, [r4, #0]
    5bfa:	3a30      	subs	r2, #48	; 0x30
    5bfc:	2a09      	cmp	r2, #9
    5bfe:	d800      	bhi.n	5c02 <_vfiprintf_r+0xd2>
    5c00:	e06b      	b.n	5cda <_vfiprintf_r+0x1aa>
    5c02:	2800      	cmp	r0, #0
    5c04:	d02a      	beq.n	5c5c <_vfiprintf_r+0x12c>
    5c06:	9309      	str	r3, [sp, #36]	; 0x24
    5c08:	e028      	b.n	5c5c <_vfiprintf_r+0x12c>
    5c0a:	4b51      	ldr	r3, [pc, #324]	; (5d50 <_vfiprintf_r+0x220>)
    5c0c:	429f      	cmp	r7, r3
    5c0e:	d101      	bne.n	5c14 <_vfiprintf_r+0xe4>
    5c10:	68b7      	ldr	r7, [r6, #8]
    5c12:	e79e      	b.n	5b52 <_vfiprintf_r+0x22>
    5c14:	4b4f      	ldr	r3, [pc, #316]	; (5d54 <_vfiprintf_r+0x224>)
    5c16:	429f      	cmp	r7, r3
    5c18:	d19b      	bne.n	5b52 <_vfiprintf_r+0x22>
    5c1a:	68f7      	ldr	r7, [r6, #12]
    5c1c:	e799      	b.n	5b52 <_vfiprintf_r+0x22>
    5c1e:	0039      	movs	r1, r7
    5c20:	0030      	movs	r0, r6
    5c22:	f7fe facd 	bl	41c0 <__swsetup_r>
    5c26:	2800      	cmp	r0, #0
    5c28:	d099      	beq.n	5b5e <_vfiprintf_r+0x2e>
    5c2a:	2001      	movs	r0, #1
    5c2c:	4240      	negs	r0, r0
    5c2e:	b01f      	add	sp, #124	; 0x7c
    5c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c32:	2b25      	cmp	r3, #37	; 0x25
    5c34:	d09f      	beq.n	5b76 <_vfiprintf_r+0x46>
    5c36:	3401      	adds	r4, #1
    5c38:	e79a      	b.n	5b70 <_vfiprintf_r+0x40>
    5c3a:	4b44      	ldr	r3, [pc, #272]	; (5d4c <_vfiprintf_r+0x21c>)
    5c3c:	6829      	ldr	r1, [r5, #0]
    5c3e:	1ac0      	subs	r0, r0, r3
    5c40:	2301      	movs	r3, #1
    5c42:	4083      	lsls	r3, r0
    5c44:	430b      	orrs	r3, r1
    5c46:	602b      	str	r3, [r5, #0]
    5c48:	4664      	mov	r4, ip
    5c4a:	e7b7      	b.n	5bbc <_vfiprintf_r+0x8c>
    5c4c:	9b05      	ldr	r3, [sp, #20]
    5c4e:	1d18      	adds	r0, r3, #4
    5c50:	681b      	ldr	r3, [r3, #0]
    5c52:	9005      	str	r0, [sp, #20]
    5c54:	2b00      	cmp	r3, #0
    5c56:	db3a      	blt.n	5cce <_vfiprintf_r+0x19e>
    5c58:	9309      	str	r3, [sp, #36]	; 0x24
    5c5a:	4664      	mov	r4, ip
    5c5c:	7823      	ldrb	r3, [r4, #0]
    5c5e:	2b2e      	cmp	r3, #46	; 0x2e
    5c60:	d10b      	bne.n	5c7a <_vfiprintf_r+0x14a>
    5c62:	7863      	ldrb	r3, [r4, #1]
    5c64:	1c62      	adds	r2, r4, #1
    5c66:	2b2a      	cmp	r3, #42	; 0x2a
    5c68:	d13f      	bne.n	5cea <_vfiprintf_r+0x1ba>
    5c6a:	9b05      	ldr	r3, [sp, #20]
    5c6c:	3402      	adds	r4, #2
    5c6e:	1d1a      	adds	r2, r3, #4
    5c70:	681b      	ldr	r3, [r3, #0]
    5c72:	9205      	str	r2, [sp, #20]
    5c74:	2b00      	cmp	r3, #0
    5c76:	db35      	blt.n	5ce4 <_vfiprintf_r+0x1b4>
    5c78:	9307      	str	r3, [sp, #28]
    5c7a:	7821      	ldrb	r1, [r4, #0]
    5c7c:	2203      	movs	r2, #3
    5c7e:	4836      	ldr	r0, [pc, #216]	; (5d58 <_vfiprintf_r+0x228>)
    5c80:	f7ff fb8a 	bl	5398 <memchr>
    5c84:	2800      	cmp	r0, #0
    5c86:	d007      	beq.n	5c98 <_vfiprintf_r+0x168>
    5c88:	4b33      	ldr	r3, [pc, #204]	; (5d58 <_vfiprintf_r+0x228>)
    5c8a:	682a      	ldr	r2, [r5, #0]
    5c8c:	1ac0      	subs	r0, r0, r3
    5c8e:	2340      	movs	r3, #64	; 0x40
    5c90:	4083      	lsls	r3, r0
    5c92:	4313      	orrs	r3, r2
    5c94:	602b      	str	r3, [r5, #0]
    5c96:	3401      	adds	r4, #1
    5c98:	7821      	ldrb	r1, [r4, #0]
    5c9a:	1c63      	adds	r3, r4, #1
    5c9c:	2206      	movs	r2, #6
    5c9e:	482f      	ldr	r0, [pc, #188]	; (5d5c <_vfiprintf_r+0x22c>)
    5ca0:	9302      	str	r3, [sp, #8]
    5ca2:	7629      	strb	r1, [r5, #24]
    5ca4:	f7ff fb78 	bl	5398 <memchr>
    5ca8:	2800      	cmp	r0, #0
    5caa:	d044      	beq.n	5d36 <_vfiprintf_r+0x206>
    5cac:	4b2c      	ldr	r3, [pc, #176]	; (5d60 <_vfiprintf_r+0x230>)
    5cae:	2b00      	cmp	r3, #0
    5cb0:	d12f      	bne.n	5d12 <_vfiprintf_r+0x1e2>
    5cb2:	6829      	ldr	r1, [r5, #0]
    5cb4:	9b05      	ldr	r3, [sp, #20]
    5cb6:	2207      	movs	r2, #7
    5cb8:	05c9      	lsls	r1, r1, #23
    5cba:	d528      	bpl.n	5d0e <_vfiprintf_r+0x1de>
    5cbc:	189b      	adds	r3, r3, r2
    5cbe:	4393      	bics	r3, r2
    5cc0:	3308      	adds	r3, #8
    5cc2:	9305      	str	r3, [sp, #20]
    5cc4:	696b      	ldr	r3, [r5, #20]
    5cc6:	9a03      	ldr	r2, [sp, #12]
    5cc8:	189b      	adds	r3, r3, r2
    5cca:	616b      	str	r3, [r5, #20]
    5ccc:	e74f      	b.n	5b6e <_vfiprintf_r+0x3e>
    5cce:	425b      	negs	r3, r3
    5cd0:	60eb      	str	r3, [r5, #12]
    5cd2:	2302      	movs	r3, #2
    5cd4:	430b      	orrs	r3, r1
    5cd6:	602b      	str	r3, [r5, #0]
    5cd8:	e7bf      	b.n	5c5a <_vfiprintf_r+0x12a>
    5cda:	434b      	muls	r3, r1
    5cdc:	3401      	adds	r4, #1
    5cde:	189b      	adds	r3, r3, r2
    5ce0:	2001      	movs	r0, #1
    5ce2:	e789      	b.n	5bf8 <_vfiprintf_r+0xc8>
    5ce4:	2301      	movs	r3, #1
    5ce6:	425b      	negs	r3, r3
    5ce8:	e7c6      	b.n	5c78 <_vfiprintf_r+0x148>
    5cea:	2300      	movs	r3, #0
    5cec:	0014      	movs	r4, r2
    5cee:	200a      	movs	r0, #10
    5cf0:	001a      	movs	r2, r3
    5cf2:	606b      	str	r3, [r5, #4]
    5cf4:	7821      	ldrb	r1, [r4, #0]
    5cf6:	3930      	subs	r1, #48	; 0x30
    5cf8:	2909      	cmp	r1, #9
    5cfa:	d903      	bls.n	5d04 <_vfiprintf_r+0x1d4>
    5cfc:	2b00      	cmp	r3, #0
    5cfe:	d0bc      	beq.n	5c7a <_vfiprintf_r+0x14a>
    5d00:	9207      	str	r2, [sp, #28]
    5d02:	e7ba      	b.n	5c7a <_vfiprintf_r+0x14a>
    5d04:	4342      	muls	r2, r0
    5d06:	3401      	adds	r4, #1
    5d08:	1852      	adds	r2, r2, r1
    5d0a:	2301      	movs	r3, #1
    5d0c:	e7f2      	b.n	5cf4 <_vfiprintf_r+0x1c4>
    5d0e:	3307      	adds	r3, #7
    5d10:	e7d5      	b.n	5cbe <_vfiprintf_r+0x18e>
    5d12:	ab05      	add	r3, sp, #20
    5d14:	9300      	str	r3, [sp, #0]
    5d16:	003a      	movs	r2, r7
    5d18:	4b12      	ldr	r3, [pc, #72]	; (5d64 <_vfiprintf_r+0x234>)
    5d1a:	0029      	movs	r1, r5
    5d1c:	0030      	movs	r0, r6
    5d1e:	f7fd fce3 	bl	36e8 <_printf_float>
    5d22:	9003      	str	r0, [sp, #12]
    5d24:	9b03      	ldr	r3, [sp, #12]
    5d26:	3301      	adds	r3, #1
    5d28:	d1cc      	bne.n	5cc4 <_vfiprintf_r+0x194>
    5d2a:	89bb      	ldrh	r3, [r7, #12]
    5d2c:	065b      	lsls	r3, r3, #25
    5d2e:	d500      	bpl.n	5d32 <_vfiprintf_r+0x202>
    5d30:	e77b      	b.n	5c2a <_vfiprintf_r+0xfa>
    5d32:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5d34:	e77b      	b.n	5c2e <_vfiprintf_r+0xfe>
    5d36:	ab05      	add	r3, sp, #20
    5d38:	9300      	str	r3, [sp, #0]
    5d3a:	003a      	movs	r2, r7
    5d3c:	4b09      	ldr	r3, [pc, #36]	; (5d64 <_vfiprintf_r+0x234>)
    5d3e:	0029      	movs	r1, r5
    5d40:	0030      	movs	r0, r6
    5d42:	f7fd ff8b 	bl	3c5c <_printf_i>
    5d46:	e7ec      	b.n	5d22 <_vfiprintf_r+0x1f2>
    5d48:	00008c04 	.word	0x00008c04
    5d4c:	00008d44 	.word	0x00008d44
    5d50:	00008c24 	.word	0x00008c24
    5d54:	00008be4 	.word	0x00008be4
    5d58:	00008d4a 	.word	0x00008d4a
    5d5c:	00008d4e 	.word	0x00008d4e
    5d60:	000036e9 	.word	0x000036e9
    5d64:	00005b0b 	.word	0x00005b0b

00005d68 <_sbrk_r>:
    5d68:	2300      	movs	r3, #0
    5d6a:	b570      	push	{r4, r5, r6, lr}
    5d6c:	4c06      	ldr	r4, [pc, #24]	; (5d88 <_sbrk_r+0x20>)
    5d6e:	0005      	movs	r5, r0
    5d70:	0008      	movs	r0, r1
    5d72:	6023      	str	r3, [r4, #0]
    5d74:	f7fc fd0a 	bl	278c <_sbrk>
    5d78:	1c43      	adds	r3, r0, #1
    5d7a:	d103      	bne.n	5d84 <_sbrk_r+0x1c>
    5d7c:	6823      	ldr	r3, [r4, #0]
    5d7e:	2b00      	cmp	r3, #0
    5d80:	d000      	beq.n	5d84 <_sbrk_r+0x1c>
    5d82:	602b      	str	r3, [r5, #0]
    5d84:	bd70      	pop	{r4, r5, r6, pc}
    5d86:	46c0      	nop			; (mov r8, r8)
    5d88:	20000aec 	.word	0x20000aec

00005d8c <__sread>:
    5d8c:	b570      	push	{r4, r5, r6, lr}
    5d8e:	000c      	movs	r4, r1
    5d90:	250e      	movs	r5, #14
    5d92:	5f49      	ldrsh	r1, [r1, r5]
    5d94:	f000 f8b8 	bl	5f08 <_read_r>
    5d98:	2800      	cmp	r0, #0
    5d9a:	db03      	blt.n	5da4 <__sread+0x18>
    5d9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5d9e:	181b      	adds	r3, r3, r0
    5da0:	6563      	str	r3, [r4, #84]	; 0x54
    5da2:	bd70      	pop	{r4, r5, r6, pc}
    5da4:	89a3      	ldrh	r3, [r4, #12]
    5da6:	4a02      	ldr	r2, [pc, #8]	; (5db0 <__sread+0x24>)
    5da8:	4013      	ands	r3, r2
    5daa:	81a3      	strh	r3, [r4, #12]
    5dac:	e7f9      	b.n	5da2 <__sread+0x16>
    5dae:	46c0      	nop			; (mov r8, r8)
    5db0:	ffffefff 	.word	0xffffefff

00005db4 <__swrite>:
    5db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5db6:	001f      	movs	r7, r3
    5db8:	898b      	ldrh	r3, [r1, #12]
    5dba:	0005      	movs	r5, r0
    5dbc:	000c      	movs	r4, r1
    5dbe:	0016      	movs	r6, r2
    5dc0:	05db      	lsls	r3, r3, #23
    5dc2:	d505      	bpl.n	5dd0 <__swrite+0x1c>
    5dc4:	230e      	movs	r3, #14
    5dc6:	5ec9      	ldrsh	r1, [r1, r3]
    5dc8:	2200      	movs	r2, #0
    5dca:	2302      	movs	r3, #2
    5dcc:	f000 f874 	bl	5eb8 <_lseek_r>
    5dd0:	89a3      	ldrh	r3, [r4, #12]
    5dd2:	4a05      	ldr	r2, [pc, #20]	; (5de8 <__swrite+0x34>)
    5dd4:	0028      	movs	r0, r5
    5dd6:	4013      	ands	r3, r2
    5dd8:	81a3      	strh	r3, [r4, #12]
    5dda:	0032      	movs	r2, r6
    5ddc:	230e      	movs	r3, #14
    5dde:	5ee1      	ldrsh	r1, [r4, r3]
    5de0:	003b      	movs	r3, r7
    5de2:	f000 f81f 	bl	5e24 <_write_r>
    5de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5de8:	ffffefff 	.word	0xffffefff

00005dec <__sseek>:
    5dec:	b570      	push	{r4, r5, r6, lr}
    5dee:	000c      	movs	r4, r1
    5df0:	250e      	movs	r5, #14
    5df2:	5f49      	ldrsh	r1, [r1, r5]
    5df4:	f000 f860 	bl	5eb8 <_lseek_r>
    5df8:	89a3      	ldrh	r3, [r4, #12]
    5dfa:	1c42      	adds	r2, r0, #1
    5dfc:	d103      	bne.n	5e06 <__sseek+0x1a>
    5dfe:	4a05      	ldr	r2, [pc, #20]	; (5e14 <__sseek+0x28>)
    5e00:	4013      	ands	r3, r2
    5e02:	81a3      	strh	r3, [r4, #12]
    5e04:	bd70      	pop	{r4, r5, r6, pc}
    5e06:	2280      	movs	r2, #128	; 0x80
    5e08:	0152      	lsls	r2, r2, #5
    5e0a:	4313      	orrs	r3, r2
    5e0c:	81a3      	strh	r3, [r4, #12]
    5e0e:	6560      	str	r0, [r4, #84]	; 0x54
    5e10:	e7f8      	b.n	5e04 <__sseek+0x18>
    5e12:	46c0      	nop			; (mov r8, r8)
    5e14:	ffffefff 	.word	0xffffefff

00005e18 <__sclose>:
    5e18:	b510      	push	{r4, lr}
    5e1a:	230e      	movs	r3, #14
    5e1c:	5ec9      	ldrsh	r1, [r1, r3]
    5e1e:	f000 f815 	bl	5e4c <_close_r>
    5e22:	bd10      	pop	{r4, pc}

00005e24 <_write_r>:
    5e24:	b570      	push	{r4, r5, r6, lr}
    5e26:	0005      	movs	r5, r0
    5e28:	0008      	movs	r0, r1
    5e2a:	0011      	movs	r1, r2
    5e2c:	2200      	movs	r2, #0
    5e2e:	4c06      	ldr	r4, [pc, #24]	; (5e48 <_write_r+0x24>)
    5e30:	6022      	str	r2, [r4, #0]
    5e32:	001a      	movs	r2, r3
    5e34:	f7fc fc82 	bl	273c <_write>
    5e38:	1c43      	adds	r3, r0, #1
    5e3a:	d103      	bne.n	5e44 <_write_r+0x20>
    5e3c:	6823      	ldr	r3, [r4, #0]
    5e3e:	2b00      	cmp	r3, #0
    5e40:	d000      	beq.n	5e44 <_write_r+0x20>
    5e42:	602b      	str	r3, [r5, #0]
    5e44:	bd70      	pop	{r4, r5, r6, pc}
    5e46:	46c0      	nop			; (mov r8, r8)
    5e48:	20000aec 	.word	0x20000aec

00005e4c <_close_r>:
    5e4c:	2300      	movs	r3, #0
    5e4e:	b570      	push	{r4, r5, r6, lr}
    5e50:	4c06      	ldr	r4, [pc, #24]	; (5e6c <_close_r+0x20>)
    5e52:	0005      	movs	r5, r0
    5e54:	0008      	movs	r0, r1
    5e56:	6023      	str	r3, [r4, #0]
    5e58:	f7fc fcaa 	bl	27b0 <_close>
    5e5c:	1c43      	adds	r3, r0, #1
    5e5e:	d103      	bne.n	5e68 <_close_r+0x1c>
    5e60:	6823      	ldr	r3, [r4, #0]
    5e62:	2b00      	cmp	r3, #0
    5e64:	d000      	beq.n	5e68 <_close_r+0x1c>
    5e66:	602b      	str	r3, [r5, #0]
    5e68:	bd70      	pop	{r4, r5, r6, pc}
    5e6a:	46c0      	nop			; (mov r8, r8)
    5e6c:	20000aec 	.word	0x20000aec

00005e70 <_fstat_r>:
    5e70:	2300      	movs	r3, #0
    5e72:	b570      	push	{r4, r5, r6, lr}
    5e74:	4c06      	ldr	r4, [pc, #24]	; (5e90 <_fstat_r+0x20>)
    5e76:	0005      	movs	r5, r0
    5e78:	0008      	movs	r0, r1
    5e7a:	0011      	movs	r1, r2
    5e7c:	6023      	str	r3, [r4, #0]
    5e7e:	f7fc fc9a 	bl	27b6 <_fstat>
    5e82:	1c43      	adds	r3, r0, #1
    5e84:	d103      	bne.n	5e8e <_fstat_r+0x1e>
    5e86:	6823      	ldr	r3, [r4, #0]
    5e88:	2b00      	cmp	r3, #0
    5e8a:	d000      	beq.n	5e8e <_fstat_r+0x1e>
    5e8c:	602b      	str	r3, [r5, #0]
    5e8e:	bd70      	pop	{r4, r5, r6, pc}
    5e90:	20000aec 	.word	0x20000aec

00005e94 <_isatty_r>:
    5e94:	2300      	movs	r3, #0
    5e96:	b570      	push	{r4, r5, r6, lr}
    5e98:	4c06      	ldr	r4, [pc, #24]	; (5eb4 <_isatty_r+0x20>)
    5e9a:	0005      	movs	r5, r0
    5e9c:	0008      	movs	r0, r1
    5e9e:	6023      	str	r3, [r4, #0]
    5ea0:	f7fc fc8e 	bl	27c0 <_isatty>
    5ea4:	1c43      	adds	r3, r0, #1
    5ea6:	d103      	bne.n	5eb0 <_isatty_r+0x1c>
    5ea8:	6823      	ldr	r3, [r4, #0]
    5eaa:	2b00      	cmp	r3, #0
    5eac:	d000      	beq.n	5eb0 <_isatty_r+0x1c>
    5eae:	602b      	str	r3, [r5, #0]
    5eb0:	bd70      	pop	{r4, r5, r6, pc}
    5eb2:	46c0      	nop			; (mov r8, r8)
    5eb4:	20000aec 	.word	0x20000aec

00005eb8 <_lseek_r>:
    5eb8:	b570      	push	{r4, r5, r6, lr}
    5eba:	0005      	movs	r5, r0
    5ebc:	0008      	movs	r0, r1
    5ebe:	0011      	movs	r1, r2
    5ec0:	2200      	movs	r2, #0
    5ec2:	4c06      	ldr	r4, [pc, #24]	; (5edc <_lseek_r+0x24>)
    5ec4:	6022      	str	r2, [r4, #0]
    5ec6:	001a      	movs	r2, r3
    5ec8:	f7fc fc7c 	bl	27c4 <_lseek>
    5ecc:	1c43      	adds	r3, r0, #1
    5ece:	d103      	bne.n	5ed8 <_lseek_r+0x20>
    5ed0:	6823      	ldr	r3, [r4, #0]
    5ed2:	2b00      	cmp	r3, #0
    5ed4:	d000      	beq.n	5ed8 <_lseek_r+0x20>
    5ed6:	602b      	str	r3, [r5, #0]
    5ed8:	bd70      	pop	{r4, r5, r6, pc}
    5eda:	46c0      	nop			; (mov r8, r8)
    5edc:	20000aec 	.word	0x20000aec

00005ee0 <__ascii_mbtowc>:
    5ee0:	b082      	sub	sp, #8
    5ee2:	2900      	cmp	r1, #0
    5ee4:	d100      	bne.n	5ee8 <__ascii_mbtowc+0x8>
    5ee6:	a901      	add	r1, sp, #4
    5ee8:	1e10      	subs	r0, r2, #0
    5eea:	d006      	beq.n	5efa <__ascii_mbtowc+0x1a>
    5eec:	2b00      	cmp	r3, #0
    5eee:	d006      	beq.n	5efe <__ascii_mbtowc+0x1e>
    5ef0:	7813      	ldrb	r3, [r2, #0]
    5ef2:	600b      	str	r3, [r1, #0]
    5ef4:	7810      	ldrb	r0, [r2, #0]
    5ef6:	1e43      	subs	r3, r0, #1
    5ef8:	4198      	sbcs	r0, r3
    5efa:	b002      	add	sp, #8
    5efc:	4770      	bx	lr
    5efe:	2002      	movs	r0, #2
    5f00:	4240      	negs	r0, r0
    5f02:	e7fa      	b.n	5efa <__ascii_mbtowc+0x1a>

00005f04 <__malloc_lock>:
    5f04:	4770      	bx	lr

00005f06 <__malloc_unlock>:
    5f06:	4770      	bx	lr

00005f08 <_read_r>:
    5f08:	b570      	push	{r4, r5, r6, lr}
    5f0a:	0005      	movs	r5, r0
    5f0c:	0008      	movs	r0, r1
    5f0e:	0011      	movs	r1, r2
    5f10:	2200      	movs	r2, #0
    5f12:	4c06      	ldr	r4, [pc, #24]	; (5f2c <_read_r+0x24>)
    5f14:	6022      	str	r2, [r4, #0]
    5f16:	001a      	movs	r2, r3
    5f18:	f7fc fbee 	bl	26f8 <_read>
    5f1c:	1c43      	adds	r3, r0, #1
    5f1e:	d103      	bne.n	5f28 <_read_r+0x20>
    5f20:	6823      	ldr	r3, [r4, #0]
    5f22:	2b00      	cmp	r3, #0
    5f24:	d000      	beq.n	5f28 <_read_r+0x20>
    5f26:	602b      	str	r3, [r5, #0]
    5f28:	bd70      	pop	{r4, r5, r6, pc}
    5f2a:	46c0      	nop			; (mov r8, r8)
    5f2c:	20000aec 	.word	0x20000aec

00005f30 <__ascii_wctomb>:
    5f30:	1e0b      	subs	r3, r1, #0
    5f32:	d004      	beq.n	5f3e <__ascii_wctomb+0xe>
    5f34:	2aff      	cmp	r2, #255	; 0xff
    5f36:	d904      	bls.n	5f42 <__ascii_wctomb+0x12>
    5f38:	238a      	movs	r3, #138	; 0x8a
    5f3a:	6003      	str	r3, [r0, #0]
    5f3c:	3b8b      	subs	r3, #139	; 0x8b
    5f3e:	0018      	movs	r0, r3
    5f40:	4770      	bx	lr
    5f42:	700a      	strb	r2, [r1, #0]
    5f44:	2301      	movs	r3, #1
    5f46:	e7fa      	b.n	5f3e <__ascii_wctomb+0xe>

00005f48 <__gnu_thumb1_case_uqi>:
    5f48:	b402      	push	{r1}
    5f4a:	4671      	mov	r1, lr
    5f4c:	0849      	lsrs	r1, r1, #1
    5f4e:	0049      	lsls	r1, r1, #1
    5f50:	5c09      	ldrb	r1, [r1, r0]
    5f52:	0049      	lsls	r1, r1, #1
    5f54:	448e      	add	lr, r1
    5f56:	bc02      	pop	{r1}
    5f58:	4770      	bx	lr
    5f5a:	46c0      	nop			; (mov r8, r8)

00005f5c <__udivsi3>:
    5f5c:	2200      	movs	r2, #0
    5f5e:	0843      	lsrs	r3, r0, #1
    5f60:	428b      	cmp	r3, r1
    5f62:	d374      	bcc.n	604e <__udivsi3+0xf2>
    5f64:	0903      	lsrs	r3, r0, #4
    5f66:	428b      	cmp	r3, r1
    5f68:	d35f      	bcc.n	602a <__udivsi3+0xce>
    5f6a:	0a03      	lsrs	r3, r0, #8
    5f6c:	428b      	cmp	r3, r1
    5f6e:	d344      	bcc.n	5ffa <__udivsi3+0x9e>
    5f70:	0b03      	lsrs	r3, r0, #12
    5f72:	428b      	cmp	r3, r1
    5f74:	d328      	bcc.n	5fc8 <__udivsi3+0x6c>
    5f76:	0c03      	lsrs	r3, r0, #16
    5f78:	428b      	cmp	r3, r1
    5f7a:	d30d      	bcc.n	5f98 <__udivsi3+0x3c>
    5f7c:	22ff      	movs	r2, #255	; 0xff
    5f7e:	0209      	lsls	r1, r1, #8
    5f80:	ba12      	rev	r2, r2
    5f82:	0c03      	lsrs	r3, r0, #16
    5f84:	428b      	cmp	r3, r1
    5f86:	d302      	bcc.n	5f8e <__udivsi3+0x32>
    5f88:	1212      	asrs	r2, r2, #8
    5f8a:	0209      	lsls	r1, r1, #8
    5f8c:	d065      	beq.n	605a <__udivsi3+0xfe>
    5f8e:	0b03      	lsrs	r3, r0, #12
    5f90:	428b      	cmp	r3, r1
    5f92:	d319      	bcc.n	5fc8 <__udivsi3+0x6c>
    5f94:	e000      	b.n	5f98 <__udivsi3+0x3c>
    5f96:	0a09      	lsrs	r1, r1, #8
    5f98:	0bc3      	lsrs	r3, r0, #15
    5f9a:	428b      	cmp	r3, r1
    5f9c:	d301      	bcc.n	5fa2 <__udivsi3+0x46>
    5f9e:	03cb      	lsls	r3, r1, #15
    5fa0:	1ac0      	subs	r0, r0, r3
    5fa2:	4152      	adcs	r2, r2
    5fa4:	0b83      	lsrs	r3, r0, #14
    5fa6:	428b      	cmp	r3, r1
    5fa8:	d301      	bcc.n	5fae <__udivsi3+0x52>
    5faa:	038b      	lsls	r3, r1, #14
    5fac:	1ac0      	subs	r0, r0, r3
    5fae:	4152      	adcs	r2, r2
    5fb0:	0b43      	lsrs	r3, r0, #13
    5fb2:	428b      	cmp	r3, r1
    5fb4:	d301      	bcc.n	5fba <__udivsi3+0x5e>
    5fb6:	034b      	lsls	r3, r1, #13
    5fb8:	1ac0      	subs	r0, r0, r3
    5fba:	4152      	adcs	r2, r2
    5fbc:	0b03      	lsrs	r3, r0, #12
    5fbe:	428b      	cmp	r3, r1
    5fc0:	d301      	bcc.n	5fc6 <__udivsi3+0x6a>
    5fc2:	030b      	lsls	r3, r1, #12
    5fc4:	1ac0      	subs	r0, r0, r3
    5fc6:	4152      	adcs	r2, r2
    5fc8:	0ac3      	lsrs	r3, r0, #11
    5fca:	428b      	cmp	r3, r1
    5fcc:	d301      	bcc.n	5fd2 <__udivsi3+0x76>
    5fce:	02cb      	lsls	r3, r1, #11
    5fd0:	1ac0      	subs	r0, r0, r3
    5fd2:	4152      	adcs	r2, r2
    5fd4:	0a83      	lsrs	r3, r0, #10
    5fd6:	428b      	cmp	r3, r1
    5fd8:	d301      	bcc.n	5fde <__udivsi3+0x82>
    5fda:	028b      	lsls	r3, r1, #10
    5fdc:	1ac0      	subs	r0, r0, r3
    5fde:	4152      	adcs	r2, r2
    5fe0:	0a43      	lsrs	r3, r0, #9
    5fe2:	428b      	cmp	r3, r1
    5fe4:	d301      	bcc.n	5fea <__udivsi3+0x8e>
    5fe6:	024b      	lsls	r3, r1, #9
    5fe8:	1ac0      	subs	r0, r0, r3
    5fea:	4152      	adcs	r2, r2
    5fec:	0a03      	lsrs	r3, r0, #8
    5fee:	428b      	cmp	r3, r1
    5ff0:	d301      	bcc.n	5ff6 <__udivsi3+0x9a>
    5ff2:	020b      	lsls	r3, r1, #8
    5ff4:	1ac0      	subs	r0, r0, r3
    5ff6:	4152      	adcs	r2, r2
    5ff8:	d2cd      	bcs.n	5f96 <__udivsi3+0x3a>
    5ffa:	09c3      	lsrs	r3, r0, #7
    5ffc:	428b      	cmp	r3, r1
    5ffe:	d301      	bcc.n	6004 <__udivsi3+0xa8>
    6000:	01cb      	lsls	r3, r1, #7
    6002:	1ac0      	subs	r0, r0, r3
    6004:	4152      	adcs	r2, r2
    6006:	0983      	lsrs	r3, r0, #6
    6008:	428b      	cmp	r3, r1
    600a:	d301      	bcc.n	6010 <__udivsi3+0xb4>
    600c:	018b      	lsls	r3, r1, #6
    600e:	1ac0      	subs	r0, r0, r3
    6010:	4152      	adcs	r2, r2
    6012:	0943      	lsrs	r3, r0, #5
    6014:	428b      	cmp	r3, r1
    6016:	d301      	bcc.n	601c <__udivsi3+0xc0>
    6018:	014b      	lsls	r3, r1, #5
    601a:	1ac0      	subs	r0, r0, r3
    601c:	4152      	adcs	r2, r2
    601e:	0903      	lsrs	r3, r0, #4
    6020:	428b      	cmp	r3, r1
    6022:	d301      	bcc.n	6028 <__udivsi3+0xcc>
    6024:	010b      	lsls	r3, r1, #4
    6026:	1ac0      	subs	r0, r0, r3
    6028:	4152      	adcs	r2, r2
    602a:	08c3      	lsrs	r3, r0, #3
    602c:	428b      	cmp	r3, r1
    602e:	d301      	bcc.n	6034 <__udivsi3+0xd8>
    6030:	00cb      	lsls	r3, r1, #3
    6032:	1ac0      	subs	r0, r0, r3
    6034:	4152      	adcs	r2, r2
    6036:	0883      	lsrs	r3, r0, #2
    6038:	428b      	cmp	r3, r1
    603a:	d301      	bcc.n	6040 <__udivsi3+0xe4>
    603c:	008b      	lsls	r3, r1, #2
    603e:	1ac0      	subs	r0, r0, r3
    6040:	4152      	adcs	r2, r2
    6042:	0843      	lsrs	r3, r0, #1
    6044:	428b      	cmp	r3, r1
    6046:	d301      	bcc.n	604c <__udivsi3+0xf0>
    6048:	004b      	lsls	r3, r1, #1
    604a:	1ac0      	subs	r0, r0, r3
    604c:	4152      	adcs	r2, r2
    604e:	1a41      	subs	r1, r0, r1
    6050:	d200      	bcs.n	6054 <__udivsi3+0xf8>
    6052:	4601      	mov	r1, r0
    6054:	4152      	adcs	r2, r2
    6056:	4610      	mov	r0, r2
    6058:	4770      	bx	lr
    605a:	e7ff      	b.n	605c <__udivsi3+0x100>
    605c:	b501      	push	{r0, lr}
    605e:	2000      	movs	r0, #0
    6060:	f000 f8f0 	bl	6244 <__aeabi_idiv0>
    6064:	bd02      	pop	{r1, pc}
    6066:	46c0      	nop			; (mov r8, r8)

00006068 <__aeabi_uidivmod>:
    6068:	2900      	cmp	r1, #0
    606a:	d0f7      	beq.n	605c <__udivsi3+0x100>
    606c:	e776      	b.n	5f5c <__udivsi3>
    606e:	4770      	bx	lr

00006070 <__divsi3>:
    6070:	4603      	mov	r3, r0
    6072:	430b      	orrs	r3, r1
    6074:	d47f      	bmi.n	6176 <__divsi3+0x106>
    6076:	2200      	movs	r2, #0
    6078:	0843      	lsrs	r3, r0, #1
    607a:	428b      	cmp	r3, r1
    607c:	d374      	bcc.n	6168 <__divsi3+0xf8>
    607e:	0903      	lsrs	r3, r0, #4
    6080:	428b      	cmp	r3, r1
    6082:	d35f      	bcc.n	6144 <__divsi3+0xd4>
    6084:	0a03      	lsrs	r3, r0, #8
    6086:	428b      	cmp	r3, r1
    6088:	d344      	bcc.n	6114 <__divsi3+0xa4>
    608a:	0b03      	lsrs	r3, r0, #12
    608c:	428b      	cmp	r3, r1
    608e:	d328      	bcc.n	60e2 <__divsi3+0x72>
    6090:	0c03      	lsrs	r3, r0, #16
    6092:	428b      	cmp	r3, r1
    6094:	d30d      	bcc.n	60b2 <__divsi3+0x42>
    6096:	22ff      	movs	r2, #255	; 0xff
    6098:	0209      	lsls	r1, r1, #8
    609a:	ba12      	rev	r2, r2
    609c:	0c03      	lsrs	r3, r0, #16
    609e:	428b      	cmp	r3, r1
    60a0:	d302      	bcc.n	60a8 <__divsi3+0x38>
    60a2:	1212      	asrs	r2, r2, #8
    60a4:	0209      	lsls	r1, r1, #8
    60a6:	d065      	beq.n	6174 <__divsi3+0x104>
    60a8:	0b03      	lsrs	r3, r0, #12
    60aa:	428b      	cmp	r3, r1
    60ac:	d319      	bcc.n	60e2 <__divsi3+0x72>
    60ae:	e000      	b.n	60b2 <__divsi3+0x42>
    60b0:	0a09      	lsrs	r1, r1, #8
    60b2:	0bc3      	lsrs	r3, r0, #15
    60b4:	428b      	cmp	r3, r1
    60b6:	d301      	bcc.n	60bc <__divsi3+0x4c>
    60b8:	03cb      	lsls	r3, r1, #15
    60ba:	1ac0      	subs	r0, r0, r3
    60bc:	4152      	adcs	r2, r2
    60be:	0b83      	lsrs	r3, r0, #14
    60c0:	428b      	cmp	r3, r1
    60c2:	d301      	bcc.n	60c8 <__divsi3+0x58>
    60c4:	038b      	lsls	r3, r1, #14
    60c6:	1ac0      	subs	r0, r0, r3
    60c8:	4152      	adcs	r2, r2
    60ca:	0b43      	lsrs	r3, r0, #13
    60cc:	428b      	cmp	r3, r1
    60ce:	d301      	bcc.n	60d4 <__divsi3+0x64>
    60d0:	034b      	lsls	r3, r1, #13
    60d2:	1ac0      	subs	r0, r0, r3
    60d4:	4152      	adcs	r2, r2
    60d6:	0b03      	lsrs	r3, r0, #12
    60d8:	428b      	cmp	r3, r1
    60da:	d301      	bcc.n	60e0 <__divsi3+0x70>
    60dc:	030b      	lsls	r3, r1, #12
    60de:	1ac0      	subs	r0, r0, r3
    60e0:	4152      	adcs	r2, r2
    60e2:	0ac3      	lsrs	r3, r0, #11
    60e4:	428b      	cmp	r3, r1
    60e6:	d301      	bcc.n	60ec <__divsi3+0x7c>
    60e8:	02cb      	lsls	r3, r1, #11
    60ea:	1ac0      	subs	r0, r0, r3
    60ec:	4152      	adcs	r2, r2
    60ee:	0a83      	lsrs	r3, r0, #10
    60f0:	428b      	cmp	r3, r1
    60f2:	d301      	bcc.n	60f8 <__divsi3+0x88>
    60f4:	028b      	lsls	r3, r1, #10
    60f6:	1ac0      	subs	r0, r0, r3
    60f8:	4152      	adcs	r2, r2
    60fa:	0a43      	lsrs	r3, r0, #9
    60fc:	428b      	cmp	r3, r1
    60fe:	d301      	bcc.n	6104 <__divsi3+0x94>
    6100:	024b      	lsls	r3, r1, #9
    6102:	1ac0      	subs	r0, r0, r3
    6104:	4152      	adcs	r2, r2
    6106:	0a03      	lsrs	r3, r0, #8
    6108:	428b      	cmp	r3, r1
    610a:	d301      	bcc.n	6110 <__divsi3+0xa0>
    610c:	020b      	lsls	r3, r1, #8
    610e:	1ac0      	subs	r0, r0, r3
    6110:	4152      	adcs	r2, r2
    6112:	d2cd      	bcs.n	60b0 <__divsi3+0x40>
    6114:	09c3      	lsrs	r3, r0, #7
    6116:	428b      	cmp	r3, r1
    6118:	d301      	bcc.n	611e <__divsi3+0xae>
    611a:	01cb      	lsls	r3, r1, #7
    611c:	1ac0      	subs	r0, r0, r3
    611e:	4152      	adcs	r2, r2
    6120:	0983      	lsrs	r3, r0, #6
    6122:	428b      	cmp	r3, r1
    6124:	d301      	bcc.n	612a <__divsi3+0xba>
    6126:	018b      	lsls	r3, r1, #6
    6128:	1ac0      	subs	r0, r0, r3
    612a:	4152      	adcs	r2, r2
    612c:	0943      	lsrs	r3, r0, #5
    612e:	428b      	cmp	r3, r1
    6130:	d301      	bcc.n	6136 <__divsi3+0xc6>
    6132:	014b      	lsls	r3, r1, #5
    6134:	1ac0      	subs	r0, r0, r3
    6136:	4152      	adcs	r2, r2
    6138:	0903      	lsrs	r3, r0, #4
    613a:	428b      	cmp	r3, r1
    613c:	d301      	bcc.n	6142 <__divsi3+0xd2>
    613e:	010b      	lsls	r3, r1, #4
    6140:	1ac0      	subs	r0, r0, r3
    6142:	4152      	adcs	r2, r2
    6144:	08c3      	lsrs	r3, r0, #3
    6146:	428b      	cmp	r3, r1
    6148:	d301      	bcc.n	614e <__divsi3+0xde>
    614a:	00cb      	lsls	r3, r1, #3
    614c:	1ac0      	subs	r0, r0, r3
    614e:	4152      	adcs	r2, r2
    6150:	0883      	lsrs	r3, r0, #2
    6152:	428b      	cmp	r3, r1
    6154:	d301      	bcc.n	615a <__divsi3+0xea>
    6156:	008b      	lsls	r3, r1, #2
    6158:	1ac0      	subs	r0, r0, r3
    615a:	4152      	adcs	r2, r2
    615c:	0843      	lsrs	r3, r0, #1
    615e:	428b      	cmp	r3, r1
    6160:	d301      	bcc.n	6166 <__divsi3+0xf6>
    6162:	004b      	lsls	r3, r1, #1
    6164:	1ac0      	subs	r0, r0, r3
    6166:	4152      	adcs	r2, r2
    6168:	1a41      	subs	r1, r0, r1
    616a:	d200      	bcs.n	616e <__divsi3+0xfe>
    616c:	4601      	mov	r1, r0
    616e:	4152      	adcs	r2, r2
    6170:	4610      	mov	r0, r2
    6172:	4770      	bx	lr
    6174:	e05d      	b.n	6232 <__divsi3+0x1c2>
    6176:	0fca      	lsrs	r2, r1, #31
    6178:	d000      	beq.n	617c <__divsi3+0x10c>
    617a:	4249      	negs	r1, r1
    617c:	1003      	asrs	r3, r0, #32
    617e:	d300      	bcc.n	6182 <__divsi3+0x112>
    6180:	4240      	negs	r0, r0
    6182:	4053      	eors	r3, r2
    6184:	2200      	movs	r2, #0
    6186:	469c      	mov	ip, r3
    6188:	0903      	lsrs	r3, r0, #4
    618a:	428b      	cmp	r3, r1
    618c:	d32d      	bcc.n	61ea <__divsi3+0x17a>
    618e:	0a03      	lsrs	r3, r0, #8
    6190:	428b      	cmp	r3, r1
    6192:	d312      	bcc.n	61ba <__divsi3+0x14a>
    6194:	22fc      	movs	r2, #252	; 0xfc
    6196:	0189      	lsls	r1, r1, #6
    6198:	ba12      	rev	r2, r2
    619a:	0a03      	lsrs	r3, r0, #8
    619c:	428b      	cmp	r3, r1
    619e:	d30c      	bcc.n	61ba <__divsi3+0x14a>
    61a0:	0189      	lsls	r1, r1, #6
    61a2:	1192      	asrs	r2, r2, #6
    61a4:	428b      	cmp	r3, r1
    61a6:	d308      	bcc.n	61ba <__divsi3+0x14a>
    61a8:	0189      	lsls	r1, r1, #6
    61aa:	1192      	asrs	r2, r2, #6
    61ac:	428b      	cmp	r3, r1
    61ae:	d304      	bcc.n	61ba <__divsi3+0x14a>
    61b0:	0189      	lsls	r1, r1, #6
    61b2:	d03a      	beq.n	622a <__divsi3+0x1ba>
    61b4:	1192      	asrs	r2, r2, #6
    61b6:	e000      	b.n	61ba <__divsi3+0x14a>
    61b8:	0989      	lsrs	r1, r1, #6
    61ba:	09c3      	lsrs	r3, r0, #7
    61bc:	428b      	cmp	r3, r1
    61be:	d301      	bcc.n	61c4 <__divsi3+0x154>
    61c0:	01cb      	lsls	r3, r1, #7
    61c2:	1ac0      	subs	r0, r0, r3
    61c4:	4152      	adcs	r2, r2
    61c6:	0983      	lsrs	r3, r0, #6
    61c8:	428b      	cmp	r3, r1
    61ca:	d301      	bcc.n	61d0 <__divsi3+0x160>
    61cc:	018b      	lsls	r3, r1, #6
    61ce:	1ac0      	subs	r0, r0, r3
    61d0:	4152      	adcs	r2, r2
    61d2:	0943      	lsrs	r3, r0, #5
    61d4:	428b      	cmp	r3, r1
    61d6:	d301      	bcc.n	61dc <__divsi3+0x16c>
    61d8:	014b      	lsls	r3, r1, #5
    61da:	1ac0      	subs	r0, r0, r3
    61dc:	4152      	adcs	r2, r2
    61de:	0903      	lsrs	r3, r0, #4
    61e0:	428b      	cmp	r3, r1
    61e2:	d301      	bcc.n	61e8 <__divsi3+0x178>
    61e4:	010b      	lsls	r3, r1, #4
    61e6:	1ac0      	subs	r0, r0, r3
    61e8:	4152      	adcs	r2, r2
    61ea:	08c3      	lsrs	r3, r0, #3
    61ec:	428b      	cmp	r3, r1
    61ee:	d301      	bcc.n	61f4 <__divsi3+0x184>
    61f0:	00cb      	lsls	r3, r1, #3
    61f2:	1ac0      	subs	r0, r0, r3
    61f4:	4152      	adcs	r2, r2
    61f6:	0883      	lsrs	r3, r0, #2
    61f8:	428b      	cmp	r3, r1
    61fa:	d301      	bcc.n	6200 <__divsi3+0x190>
    61fc:	008b      	lsls	r3, r1, #2
    61fe:	1ac0      	subs	r0, r0, r3
    6200:	4152      	adcs	r2, r2
    6202:	d2d9      	bcs.n	61b8 <__divsi3+0x148>
    6204:	0843      	lsrs	r3, r0, #1
    6206:	428b      	cmp	r3, r1
    6208:	d301      	bcc.n	620e <__divsi3+0x19e>
    620a:	004b      	lsls	r3, r1, #1
    620c:	1ac0      	subs	r0, r0, r3
    620e:	4152      	adcs	r2, r2
    6210:	1a41      	subs	r1, r0, r1
    6212:	d200      	bcs.n	6216 <__divsi3+0x1a6>
    6214:	4601      	mov	r1, r0
    6216:	4663      	mov	r3, ip
    6218:	4152      	adcs	r2, r2
    621a:	105b      	asrs	r3, r3, #1
    621c:	4610      	mov	r0, r2
    621e:	d301      	bcc.n	6224 <__divsi3+0x1b4>
    6220:	4240      	negs	r0, r0
    6222:	2b00      	cmp	r3, #0
    6224:	d500      	bpl.n	6228 <__divsi3+0x1b8>
    6226:	4249      	negs	r1, r1
    6228:	4770      	bx	lr
    622a:	4663      	mov	r3, ip
    622c:	105b      	asrs	r3, r3, #1
    622e:	d300      	bcc.n	6232 <__divsi3+0x1c2>
    6230:	4240      	negs	r0, r0
    6232:	b501      	push	{r0, lr}
    6234:	2000      	movs	r0, #0
    6236:	f000 f805 	bl	6244 <__aeabi_idiv0>
    623a:	bd02      	pop	{r1, pc}

0000623c <__aeabi_idivmod>:
    623c:	2900      	cmp	r1, #0
    623e:	d0f8      	beq.n	6232 <__divsi3+0x1c2>
    6240:	e716      	b.n	6070 <__divsi3>
    6242:	4770      	bx	lr

00006244 <__aeabi_idiv0>:
    6244:	4770      	bx	lr
    6246:	46c0      	nop			; (mov r8, r8)

00006248 <__aeabi_cdrcmple>:
    6248:	4684      	mov	ip, r0
    624a:	1c10      	adds	r0, r2, #0
    624c:	4662      	mov	r2, ip
    624e:	468c      	mov	ip, r1
    6250:	1c19      	adds	r1, r3, #0
    6252:	4663      	mov	r3, ip
    6254:	e000      	b.n	6258 <__aeabi_cdcmpeq>
    6256:	46c0      	nop			; (mov r8, r8)

00006258 <__aeabi_cdcmpeq>:
    6258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    625a:	f001 fc6b 	bl	7b34 <__ledf2>
    625e:	2800      	cmp	r0, #0
    6260:	d401      	bmi.n	6266 <__aeabi_cdcmpeq+0xe>
    6262:	2100      	movs	r1, #0
    6264:	42c8      	cmn	r0, r1
    6266:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006268 <__aeabi_dcmpeq>:
    6268:	b510      	push	{r4, lr}
    626a:	f001 fbc5 	bl	79f8 <__eqdf2>
    626e:	4240      	negs	r0, r0
    6270:	3001      	adds	r0, #1
    6272:	bd10      	pop	{r4, pc}

00006274 <__aeabi_dcmplt>:
    6274:	b510      	push	{r4, lr}
    6276:	f001 fc5d 	bl	7b34 <__ledf2>
    627a:	2800      	cmp	r0, #0
    627c:	db01      	blt.n	6282 <__aeabi_dcmplt+0xe>
    627e:	2000      	movs	r0, #0
    6280:	bd10      	pop	{r4, pc}
    6282:	2001      	movs	r0, #1
    6284:	bd10      	pop	{r4, pc}
    6286:	46c0      	nop			; (mov r8, r8)

00006288 <__aeabi_dcmple>:
    6288:	b510      	push	{r4, lr}
    628a:	f001 fc53 	bl	7b34 <__ledf2>
    628e:	2800      	cmp	r0, #0
    6290:	dd01      	ble.n	6296 <__aeabi_dcmple+0xe>
    6292:	2000      	movs	r0, #0
    6294:	bd10      	pop	{r4, pc}
    6296:	2001      	movs	r0, #1
    6298:	bd10      	pop	{r4, pc}
    629a:	46c0      	nop			; (mov r8, r8)

0000629c <__aeabi_dcmpgt>:
    629c:	b510      	push	{r4, lr}
    629e:	f001 fbe5 	bl	7a6c <__gedf2>
    62a2:	2800      	cmp	r0, #0
    62a4:	dc01      	bgt.n	62aa <__aeabi_dcmpgt+0xe>
    62a6:	2000      	movs	r0, #0
    62a8:	bd10      	pop	{r4, pc}
    62aa:	2001      	movs	r0, #1
    62ac:	bd10      	pop	{r4, pc}
    62ae:	46c0      	nop			; (mov r8, r8)

000062b0 <__aeabi_dcmpge>:
    62b0:	b510      	push	{r4, lr}
    62b2:	f001 fbdb 	bl	7a6c <__gedf2>
    62b6:	2800      	cmp	r0, #0
    62b8:	da01      	bge.n	62be <__aeabi_dcmpge+0xe>
    62ba:	2000      	movs	r0, #0
    62bc:	bd10      	pop	{r4, pc}
    62be:	2001      	movs	r0, #1
    62c0:	bd10      	pop	{r4, pc}
    62c2:	46c0      	nop			; (mov r8, r8)

000062c4 <__aeabi_cfrcmple>:
    62c4:	4684      	mov	ip, r0
    62c6:	1c08      	adds	r0, r1, #0
    62c8:	4661      	mov	r1, ip
    62ca:	e7ff      	b.n	62cc <__aeabi_cfcmpeq>

000062cc <__aeabi_cfcmpeq>:
    62cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    62ce:	f000 fb9d 	bl	6a0c <__lesf2>
    62d2:	2800      	cmp	r0, #0
    62d4:	d401      	bmi.n	62da <__aeabi_cfcmpeq+0xe>
    62d6:	2100      	movs	r1, #0
    62d8:	42c8      	cmn	r0, r1
    62da:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000062dc <__aeabi_fcmpeq>:
    62dc:	b510      	push	{r4, lr}
    62de:	f000 fb2f 	bl	6940 <__eqsf2>
    62e2:	4240      	negs	r0, r0
    62e4:	3001      	adds	r0, #1
    62e6:	bd10      	pop	{r4, pc}

000062e8 <__aeabi_fcmplt>:
    62e8:	b510      	push	{r4, lr}
    62ea:	f000 fb8f 	bl	6a0c <__lesf2>
    62ee:	2800      	cmp	r0, #0
    62f0:	db01      	blt.n	62f6 <__aeabi_fcmplt+0xe>
    62f2:	2000      	movs	r0, #0
    62f4:	bd10      	pop	{r4, pc}
    62f6:	2001      	movs	r0, #1
    62f8:	bd10      	pop	{r4, pc}
    62fa:	46c0      	nop			; (mov r8, r8)

000062fc <__aeabi_fcmple>:
    62fc:	b510      	push	{r4, lr}
    62fe:	f000 fb85 	bl	6a0c <__lesf2>
    6302:	2800      	cmp	r0, #0
    6304:	dd01      	ble.n	630a <__aeabi_fcmple+0xe>
    6306:	2000      	movs	r0, #0
    6308:	bd10      	pop	{r4, pc}
    630a:	2001      	movs	r0, #1
    630c:	bd10      	pop	{r4, pc}
    630e:	46c0      	nop			; (mov r8, r8)

00006310 <__aeabi_fcmpgt>:
    6310:	b510      	push	{r4, lr}
    6312:	f000 fb3b 	bl	698c <__gesf2>
    6316:	2800      	cmp	r0, #0
    6318:	dc01      	bgt.n	631e <__aeabi_fcmpgt+0xe>
    631a:	2000      	movs	r0, #0
    631c:	bd10      	pop	{r4, pc}
    631e:	2001      	movs	r0, #1
    6320:	bd10      	pop	{r4, pc}
    6322:	46c0      	nop			; (mov r8, r8)

00006324 <__aeabi_fcmpge>:
    6324:	b510      	push	{r4, lr}
    6326:	f000 fb31 	bl	698c <__gesf2>
    632a:	2800      	cmp	r0, #0
    632c:	da01      	bge.n	6332 <__aeabi_fcmpge+0xe>
    632e:	2000      	movs	r0, #0
    6330:	bd10      	pop	{r4, pc}
    6332:	2001      	movs	r0, #1
    6334:	bd10      	pop	{r4, pc}
    6336:	46c0      	nop			; (mov r8, r8)

00006338 <__aeabi_lmul>:
    6338:	b5f0      	push	{r4, r5, r6, r7, lr}
    633a:	46ce      	mov	lr, r9
    633c:	4647      	mov	r7, r8
    633e:	0415      	lsls	r5, r2, #16
    6340:	0c2d      	lsrs	r5, r5, #16
    6342:	002e      	movs	r6, r5
    6344:	b580      	push	{r7, lr}
    6346:	0407      	lsls	r7, r0, #16
    6348:	0c14      	lsrs	r4, r2, #16
    634a:	0c3f      	lsrs	r7, r7, #16
    634c:	4699      	mov	r9, r3
    634e:	0c03      	lsrs	r3, r0, #16
    6350:	437e      	muls	r6, r7
    6352:	435d      	muls	r5, r3
    6354:	4367      	muls	r7, r4
    6356:	4363      	muls	r3, r4
    6358:	197f      	adds	r7, r7, r5
    635a:	0c34      	lsrs	r4, r6, #16
    635c:	19e4      	adds	r4, r4, r7
    635e:	469c      	mov	ip, r3
    6360:	42a5      	cmp	r5, r4
    6362:	d903      	bls.n	636c <__aeabi_lmul+0x34>
    6364:	2380      	movs	r3, #128	; 0x80
    6366:	025b      	lsls	r3, r3, #9
    6368:	4698      	mov	r8, r3
    636a:	44c4      	add	ip, r8
    636c:	464b      	mov	r3, r9
    636e:	4351      	muls	r1, r2
    6370:	4343      	muls	r3, r0
    6372:	0436      	lsls	r6, r6, #16
    6374:	0c36      	lsrs	r6, r6, #16
    6376:	0c25      	lsrs	r5, r4, #16
    6378:	0424      	lsls	r4, r4, #16
    637a:	4465      	add	r5, ip
    637c:	19a4      	adds	r4, r4, r6
    637e:	1859      	adds	r1, r3, r1
    6380:	1949      	adds	r1, r1, r5
    6382:	0020      	movs	r0, r4
    6384:	bc0c      	pop	{r2, r3}
    6386:	4690      	mov	r8, r2
    6388:	4699      	mov	r9, r3
    638a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000638c <__aeabi_fadd>:
    638c:	b5f0      	push	{r4, r5, r6, r7, lr}
    638e:	46c6      	mov	lr, r8
    6390:	024e      	lsls	r6, r1, #9
    6392:	0247      	lsls	r7, r0, #9
    6394:	0a76      	lsrs	r6, r6, #9
    6396:	0a7b      	lsrs	r3, r7, #9
    6398:	0044      	lsls	r4, r0, #1
    639a:	0fc5      	lsrs	r5, r0, #31
    639c:	00f7      	lsls	r7, r6, #3
    639e:	0048      	lsls	r0, r1, #1
    63a0:	4698      	mov	r8, r3
    63a2:	b500      	push	{lr}
    63a4:	0e24      	lsrs	r4, r4, #24
    63a6:	002a      	movs	r2, r5
    63a8:	00db      	lsls	r3, r3, #3
    63aa:	0e00      	lsrs	r0, r0, #24
    63ac:	0fc9      	lsrs	r1, r1, #31
    63ae:	46bc      	mov	ip, r7
    63b0:	428d      	cmp	r5, r1
    63b2:	d067      	beq.n	6484 <__aeabi_fadd+0xf8>
    63b4:	1a22      	subs	r2, r4, r0
    63b6:	2a00      	cmp	r2, #0
    63b8:	dc00      	bgt.n	63bc <__aeabi_fadd+0x30>
    63ba:	e0a5      	b.n	6508 <__aeabi_fadd+0x17c>
    63bc:	2800      	cmp	r0, #0
    63be:	d13a      	bne.n	6436 <__aeabi_fadd+0xaa>
    63c0:	2f00      	cmp	r7, #0
    63c2:	d100      	bne.n	63c6 <__aeabi_fadd+0x3a>
    63c4:	e093      	b.n	64ee <__aeabi_fadd+0x162>
    63c6:	1e51      	subs	r1, r2, #1
    63c8:	2900      	cmp	r1, #0
    63ca:	d000      	beq.n	63ce <__aeabi_fadd+0x42>
    63cc:	e0bc      	b.n	6548 <__aeabi_fadd+0x1bc>
    63ce:	2401      	movs	r4, #1
    63d0:	1bdb      	subs	r3, r3, r7
    63d2:	015a      	lsls	r2, r3, #5
    63d4:	d546      	bpl.n	6464 <__aeabi_fadd+0xd8>
    63d6:	019b      	lsls	r3, r3, #6
    63d8:	099e      	lsrs	r6, r3, #6
    63da:	0030      	movs	r0, r6
    63dc:	f002 fb4c 	bl	8a78 <__clzsi2>
    63e0:	3805      	subs	r0, #5
    63e2:	4086      	lsls	r6, r0
    63e4:	4284      	cmp	r4, r0
    63e6:	dd00      	ble.n	63ea <__aeabi_fadd+0x5e>
    63e8:	e09d      	b.n	6526 <__aeabi_fadd+0x19a>
    63ea:	1b04      	subs	r4, r0, r4
    63ec:	0032      	movs	r2, r6
    63ee:	2020      	movs	r0, #32
    63f0:	3401      	adds	r4, #1
    63f2:	40e2      	lsrs	r2, r4
    63f4:	1b04      	subs	r4, r0, r4
    63f6:	40a6      	lsls	r6, r4
    63f8:	0033      	movs	r3, r6
    63fa:	1e5e      	subs	r6, r3, #1
    63fc:	41b3      	sbcs	r3, r6
    63fe:	2400      	movs	r4, #0
    6400:	4313      	orrs	r3, r2
    6402:	075a      	lsls	r2, r3, #29
    6404:	d004      	beq.n	6410 <__aeabi_fadd+0x84>
    6406:	220f      	movs	r2, #15
    6408:	401a      	ands	r2, r3
    640a:	2a04      	cmp	r2, #4
    640c:	d000      	beq.n	6410 <__aeabi_fadd+0x84>
    640e:	3304      	adds	r3, #4
    6410:	015a      	lsls	r2, r3, #5
    6412:	d529      	bpl.n	6468 <__aeabi_fadd+0xdc>
    6414:	3401      	adds	r4, #1
    6416:	2cff      	cmp	r4, #255	; 0xff
    6418:	d100      	bne.n	641c <__aeabi_fadd+0x90>
    641a:	e081      	b.n	6520 <__aeabi_fadd+0x194>
    641c:	002a      	movs	r2, r5
    641e:	019b      	lsls	r3, r3, #6
    6420:	0a5b      	lsrs	r3, r3, #9
    6422:	b2e4      	uxtb	r4, r4
    6424:	025b      	lsls	r3, r3, #9
    6426:	05e4      	lsls	r4, r4, #23
    6428:	0a58      	lsrs	r0, r3, #9
    642a:	07d2      	lsls	r2, r2, #31
    642c:	4320      	orrs	r0, r4
    642e:	4310      	orrs	r0, r2
    6430:	bc04      	pop	{r2}
    6432:	4690      	mov	r8, r2
    6434:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6436:	2cff      	cmp	r4, #255	; 0xff
    6438:	d0e3      	beq.n	6402 <__aeabi_fadd+0x76>
    643a:	2180      	movs	r1, #128	; 0x80
    643c:	0038      	movs	r0, r7
    643e:	04c9      	lsls	r1, r1, #19
    6440:	4308      	orrs	r0, r1
    6442:	4684      	mov	ip, r0
    6444:	2a1b      	cmp	r2, #27
    6446:	dd00      	ble.n	644a <__aeabi_fadd+0xbe>
    6448:	e082      	b.n	6550 <__aeabi_fadd+0x1c4>
    644a:	2020      	movs	r0, #32
    644c:	4661      	mov	r1, ip
    644e:	40d1      	lsrs	r1, r2
    6450:	1a82      	subs	r2, r0, r2
    6452:	4660      	mov	r0, ip
    6454:	4090      	lsls	r0, r2
    6456:	0002      	movs	r2, r0
    6458:	1e50      	subs	r0, r2, #1
    645a:	4182      	sbcs	r2, r0
    645c:	430a      	orrs	r2, r1
    645e:	1a9b      	subs	r3, r3, r2
    6460:	015a      	lsls	r2, r3, #5
    6462:	d4b8      	bmi.n	63d6 <__aeabi_fadd+0x4a>
    6464:	075a      	lsls	r2, r3, #29
    6466:	d1ce      	bne.n	6406 <__aeabi_fadd+0x7a>
    6468:	08de      	lsrs	r6, r3, #3
    646a:	002a      	movs	r2, r5
    646c:	2cff      	cmp	r4, #255	; 0xff
    646e:	d13a      	bne.n	64e6 <__aeabi_fadd+0x15a>
    6470:	2e00      	cmp	r6, #0
    6472:	d100      	bne.n	6476 <__aeabi_fadd+0xea>
    6474:	e0ae      	b.n	65d4 <__aeabi_fadd+0x248>
    6476:	2380      	movs	r3, #128	; 0x80
    6478:	03db      	lsls	r3, r3, #15
    647a:	4333      	orrs	r3, r6
    647c:	025b      	lsls	r3, r3, #9
    647e:	0a5b      	lsrs	r3, r3, #9
    6480:	24ff      	movs	r4, #255	; 0xff
    6482:	e7cf      	b.n	6424 <__aeabi_fadd+0x98>
    6484:	1a21      	subs	r1, r4, r0
    6486:	2900      	cmp	r1, #0
    6488:	dd52      	ble.n	6530 <__aeabi_fadd+0x1a4>
    648a:	2800      	cmp	r0, #0
    648c:	d031      	beq.n	64f2 <__aeabi_fadd+0x166>
    648e:	2cff      	cmp	r4, #255	; 0xff
    6490:	d0b7      	beq.n	6402 <__aeabi_fadd+0x76>
    6492:	2080      	movs	r0, #128	; 0x80
    6494:	003e      	movs	r6, r7
    6496:	04c0      	lsls	r0, r0, #19
    6498:	4306      	orrs	r6, r0
    649a:	46b4      	mov	ip, r6
    649c:	291b      	cmp	r1, #27
    649e:	dd00      	ble.n	64a2 <__aeabi_fadd+0x116>
    64a0:	e0aa      	b.n	65f8 <__aeabi_fadd+0x26c>
    64a2:	2620      	movs	r6, #32
    64a4:	4660      	mov	r0, ip
    64a6:	40c8      	lsrs	r0, r1
    64a8:	1a71      	subs	r1, r6, r1
    64aa:	4666      	mov	r6, ip
    64ac:	408e      	lsls	r6, r1
    64ae:	0031      	movs	r1, r6
    64b0:	1e4e      	subs	r6, r1, #1
    64b2:	41b1      	sbcs	r1, r6
    64b4:	4301      	orrs	r1, r0
    64b6:	185b      	adds	r3, r3, r1
    64b8:	0159      	lsls	r1, r3, #5
    64ba:	d5d3      	bpl.n	6464 <__aeabi_fadd+0xd8>
    64bc:	3401      	adds	r4, #1
    64be:	2cff      	cmp	r4, #255	; 0xff
    64c0:	d100      	bne.n	64c4 <__aeabi_fadd+0x138>
    64c2:	e087      	b.n	65d4 <__aeabi_fadd+0x248>
    64c4:	2201      	movs	r2, #1
    64c6:	4978      	ldr	r1, [pc, #480]	; (66a8 <__aeabi_fadd+0x31c>)
    64c8:	401a      	ands	r2, r3
    64ca:	085b      	lsrs	r3, r3, #1
    64cc:	400b      	ands	r3, r1
    64ce:	4313      	orrs	r3, r2
    64d0:	e797      	b.n	6402 <__aeabi_fadd+0x76>
    64d2:	2c00      	cmp	r4, #0
    64d4:	d000      	beq.n	64d8 <__aeabi_fadd+0x14c>
    64d6:	e0a7      	b.n	6628 <__aeabi_fadd+0x29c>
    64d8:	2b00      	cmp	r3, #0
    64da:	d000      	beq.n	64de <__aeabi_fadd+0x152>
    64dc:	e0b6      	b.n	664c <__aeabi_fadd+0x2c0>
    64de:	1e3b      	subs	r3, r7, #0
    64e0:	d162      	bne.n	65a8 <__aeabi_fadd+0x21c>
    64e2:	2600      	movs	r6, #0
    64e4:	2200      	movs	r2, #0
    64e6:	0273      	lsls	r3, r6, #9
    64e8:	0a5b      	lsrs	r3, r3, #9
    64ea:	b2e4      	uxtb	r4, r4
    64ec:	e79a      	b.n	6424 <__aeabi_fadd+0x98>
    64ee:	0014      	movs	r4, r2
    64f0:	e787      	b.n	6402 <__aeabi_fadd+0x76>
    64f2:	2f00      	cmp	r7, #0
    64f4:	d04d      	beq.n	6592 <__aeabi_fadd+0x206>
    64f6:	1e48      	subs	r0, r1, #1
    64f8:	2800      	cmp	r0, #0
    64fa:	d157      	bne.n	65ac <__aeabi_fadd+0x220>
    64fc:	4463      	add	r3, ip
    64fe:	2401      	movs	r4, #1
    6500:	015a      	lsls	r2, r3, #5
    6502:	d5af      	bpl.n	6464 <__aeabi_fadd+0xd8>
    6504:	2402      	movs	r4, #2
    6506:	e7dd      	b.n	64c4 <__aeabi_fadd+0x138>
    6508:	2a00      	cmp	r2, #0
    650a:	d124      	bne.n	6556 <__aeabi_fadd+0x1ca>
    650c:	1c62      	adds	r2, r4, #1
    650e:	b2d2      	uxtb	r2, r2
    6510:	2a01      	cmp	r2, #1
    6512:	ddde      	ble.n	64d2 <__aeabi_fadd+0x146>
    6514:	1bde      	subs	r6, r3, r7
    6516:	0172      	lsls	r2, r6, #5
    6518:	d535      	bpl.n	6586 <__aeabi_fadd+0x1fa>
    651a:	1afe      	subs	r6, r7, r3
    651c:	000d      	movs	r5, r1
    651e:	e75c      	b.n	63da <__aeabi_fadd+0x4e>
    6520:	002a      	movs	r2, r5
    6522:	2300      	movs	r3, #0
    6524:	e77e      	b.n	6424 <__aeabi_fadd+0x98>
    6526:	0033      	movs	r3, r6
    6528:	4a60      	ldr	r2, [pc, #384]	; (66ac <__aeabi_fadd+0x320>)
    652a:	1a24      	subs	r4, r4, r0
    652c:	4013      	ands	r3, r2
    652e:	e768      	b.n	6402 <__aeabi_fadd+0x76>
    6530:	2900      	cmp	r1, #0
    6532:	d163      	bne.n	65fc <__aeabi_fadd+0x270>
    6534:	1c61      	adds	r1, r4, #1
    6536:	b2c8      	uxtb	r0, r1
    6538:	2801      	cmp	r0, #1
    653a:	dd4e      	ble.n	65da <__aeabi_fadd+0x24e>
    653c:	29ff      	cmp	r1, #255	; 0xff
    653e:	d049      	beq.n	65d4 <__aeabi_fadd+0x248>
    6540:	4463      	add	r3, ip
    6542:	085b      	lsrs	r3, r3, #1
    6544:	000c      	movs	r4, r1
    6546:	e75c      	b.n	6402 <__aeabi_fadd+0x76>
    6548:	2aff      	cmp	r2, #255	; 0xff
    654a:	d041      	beq.n	65d0 <__aeabi_fadd+0x244>
    654c:	000a      	movs	r2, r1
    654e:	e779      	b.n	6444 <__aeabi_fadd+0xb8>
    6550:	2201      	movs	r2, #1
    6552:	1a9b      	subs	r3, r3, r2
    6554:	e784      	b.n	6460 <__aeabi_fadd+0xd4>
    6556:	2c00      	cmp	r4, #0
    6558:	d01d      	beq.n	6596 <__aeabi_fadd+0x20a>
    655a:	28ff      	cmp	r0, #255	; 0xff
    655c:	d022      	beq.n	65a4 <__aeabi_fadd+0x218>
    655e:	2480      	movs	r4, #128	; 0x80
    6560:	04e4      	lsls	r4, r4, #19
    6562:	4252      	negs	r2, r2
    6564:	4323      	orrs	r3, r4
    6566:	2a1b      	cmp	r2, #27
    6568:	dd00      	ble.n	656c <__aeabi_fadd+0x1e0>
    656a:	e08a      	b.n	6682 <__aeabi_fadd+0x2f6>
    656c:	001c      	movs	r4, r3
    656e:	2520      	movs	r5, #32
    6570:	40d4      	lsrs	r4, r2
    6572:	1aaa      	subs	r2, r5, r2
    6574:	4093      	lsls	r3, r2
    6576:	1e5a      	subs	r2, r3, #1
    6578:	4193      	sbcs	r3, r2
    657a:	4323      	orrs	r3, r4
    657c:	4662      	mov	r2, ip
    657e:	0004      	movs	r4, r0
    6580:	1ad3      	subs	r3, r2, r3
    6582:	000d      	movs	r5, r1
    6584:	e725      	b.n	63d2 <__aeabi_fadd+0x46>
    6586:	2e00      	cmp	r6, #0
    6588:	d000      	beq.n	658c <__aeabi_fadd+0x200>
    658a:	e726      	b.n	63da <__aeabi_fadd+0x4e>
    658c:	2200      	movs	r2, #0
    658e:	2400      	movs	r4, #0
    6590:	e7a9      	b.n	64e6 <__aeabi_fadd+0x15a>
    6592:	000c      	movs	r4, r1
    6594:	e735      	b.n	6402 <__aeabi_fadd+0x76>
    6596:	2b00      	cmp	r3, #0
    6598:	d04d      	beq.n	6636 <__aeabi_fadd+0x2aa>
    659a:	43d2      	mvns	r2, r2
    659c:	2a00      	cmp	r2, #0
    659e:	d0ed      	beq.n	657c <__aeabi_fadd+0x1f0>
    65a0:	28ff      	cmp	r0, #255	; 0xff
    65a2:	d1e0      	bne.n	6566 <__aeabi_fadd+0x1da>
    65a4:	4663      	mov	r3, ip
    65a6:	24ff      	movs	r4, #255	; 0xff
    65a8:	000d      	movs	r5, r1
    65aa:	e72a      	b.n	6402 <__aeabi_fadd+0x76>
    65ac:	29ff      	cmp	r1, #255	; 0xff
    65ae:	d00f      	beq.n	65d0 <__aeabi_fadd+0x244>
    65b0:	0001      	movs	r1, r0
    65b2:	e773      	b.n	649c <__aeabi_fadd+0x110>
    65b4:	2b00      	cmp	r3, #0
    65b6:	d061      	beq.n	667c <__aeabi_fadd+0x2f0>
    65b8:	24ff      	movs	r4, #255	; 0xff
    65ba:	2f00      	cmp	r7, #0
    65bc:	d100      	bne.n	65c0 <__aeabi_fadd+0x234>
    65be:	e720      	b.n	6402 <__aeabi_fadd+0x76>
    65c0:	2280      	movs	r2, #128	; 0x80
    65c2:	4641      	mov	r1, r8
    65c4:	03d2      	lsls	r2, r2, #15
    65c6:	4211      	tst	r1, r2
    65c8:	d002      	beq.n	65d0 <__aeabi_fadd+0x244>
    65ca:	4216      	tst	r6, r2
    65cc:	d100      	bne.n	65d0 <__aeabi_fadd+0x244>
    65ce:	003b      	movs	r3, r7
    65d0:	24ff      	movs	r4, #255	; 0xff
    65d2:	e716      	b.n	6402 <__aeabi_fadd+0x76>
    65d4:	24ff      	movs	r4, #255	; 0xff
    65d6:	2300      	movs	r3, #0
    65d8:	e724      	b.n	6424 <__aeabi_fadd+0x98>
    65da:	2c00      	cmp	r4, #0
    65dc:	d1ea      	bne.n	65b4 <__aeabi_fadd+0x228>
    65de:	2b00      	cmp	r3, #0
    65e0:	d058      	beq.n	6694 <__aeabi_fadd+0x308>
    65e2:	2f00      	cmp	r7, #0
    65e4:	d100      	bne.n	65e8 <__aeabi_fadd+0x25c>
    65e6:	e70c      	b.n	6402 <__aeabi_fadd+0x76>
    65e8:	4463      	add	r3, ip
    65ea:	015a      	lsls	r2, r3, #5
    65ec:	d400      	bmi.n	65f0 <__aeabi_fadd+0x264>
    65ee:	e739      	b.n	6464 <__aeabi_fadd+0xd8>
    65f0:	4a2e      	ldr	r2, [pc, #184]	; (66ac <__aeabi_fadd+0x320>)
    65f2:	000c      	movs	r4, r1
    65f4:	4013      	ands	r3, r2
    65f6:	e704      	b.n	6402 <__aeabi_fadd+0x76>
    65f8:	2101      	movs	r1, #1
    65fa:	e75c      	b.n	64b6 <__aeabi_fadd+0x12a>
    65fc:	2c00      	cmp	r4, #0
    65fe:	d11e      	bne.n	663e <__aeabi_fadd+0x2b2>
    6600:	2b00      	cmp	r3, #0
    6602:	d040      	beq.n	6686 <__aeabi_fadd+0x2fa>
    6604:	43c9      	mvns	r1, r1
    6606:	2900      	cmp	r1, #0
    6608:	d00b      	beq.n	6622 <__aeabi_fadd+0x296>
    660a:	28ff      	cmp	r0, #255	; 0xff
    660c:	d036      	beq.n	667c <__aeabi_fadd+0x2f0>
    660e:	291b      	cmp	r1, #27
    6610:	dc47      	bgt.n	66a2 <__aeabi_fadd+0x316>
    6612:	001c      	movs	r4, r3
    6614:	2620      	movs	r6, #32
    6616:	40cc      	lsrs	r4, r1
    6618:	1a71      	subs	r1, r6, r1
    661a:	408b      	lsls	r3, r1
    661c:	1e59      	subs	r1, r3, #1
    661e:	418b      	sbcs	r3, r1
    6620:	4323      	orrs	r3, r4
    6622:	4463      	add	r3, ip
    6624:	0004      	movs	r4, r0
    6626:	e747      	b.n	64b8 <__aeabi_fadd+0x12c>
    6628:	2b00      	cmp	r3, #0
    662a:	d118      	bne.n	665e <__aeabi_fadd+0x2d2>
    662c:	1e3b      	subs	r3, r7, #0
    662e:	d02d      	beq.n	668c <__aeabi_fadd+0x300>
    6630:	000d      	movs	r5, r1
    6632:	24ff      	movs	r4, #255	; 0xff
    6634:	e6e5      	b.n	6402 <__aeabi_fadd+0x76>
    6636:	003b      	movs	r3, r7
    6638:	0004      	movs	r4, r0
    663a:	000d      	movs	r5, r1
    663c:	e6e1      	b.n	6402 <__aeabi_fadd+0x76>
    663e:	28ff      	cmp	r0, #255	; 0xff
    6640:	d01c      	beq.n	667c <__aeabi_fadd+0x2f0>
    6642:	2480      	movs	r4, #128	; 0x80
    6644:	04e4      	lsls	r4, r4, #19
    6646:	4249      	negs	r1, r1
    6648:	4323      	orrs	r3, r4
    664a:	e7e0      	b.n	660e <__aeabi_fadd+0x282>
    664c:	2f00      	cmp	r7, #0
    664e:	d100      	bne.n	6652 <__aeabi_fadd+0x2c6>
    6650:	e6d7      	b.n	6402 <__aeabi_fadd+0x76>
    6652:	1bde      	subs	r6, r3, r7
    6654:	0172      	lsls	r2, r6, #5
    6656:	d51f      	bpl.n	6698 <__aeabi_fadd+0x30c>
    6658:	1afb      	subs	r3, r7, r3
    665a:	000d      	movs	r5, r1
    665c:	e6d1      	b.n	6402 <__aeabi_fadd+0x76>
    665e:	24ff      	movs	r4, #255	; 0xff
    6660:	2f00      	cmp	r7, #0
    6662:	d100      	bne.n	6666 <__aeabi_fadd+0x2da>
    6664:	e6cd      	b.n	6402 <__aeabi_fadd+0x76>
    6666:	2280      	movs	r2, #128	; 0x80
    6668:	4640      	mov	r0, r8
    666a:	03d2      	lsls	r2, r2, #15
    666c:	4210      	tst	r0, r2
    666e:	d0af      	beq.n	65d0 <__aeabi_fadd+0x244>
    6670:	4216      	tst	r6, r2
    6672:	d1ad      	bne.n	65d0 <__aeabi_fadd+0x244>
    6674:	003b      	movs	r3, r7
    6676:	000d      	movs	r5, r1
    6678:	24ff      	movs	r4, #255	; 0xff
    667a:	e6c2      	b.n	6402 <__aeabi_fadd+0x76>
    667c:	4663      	mov	r3, ip
    667e:	24ff      	movs	r4, #255	; 0xff
    6680:	e6bf      	b.n	6402 <__aeabi_fadd+0x76>
    6682:	2301      	movs	r3, #1
    6684:	e77a      	b.n	657c <__aeabi_fadd+0x1f0>
    6686:	003b      	movs	r3, r7
    6688:	0004      	movs	r4, r0
    668a:	e6ba      	b.n	6402 <__aeabi_fadd+0x76>
    668c:	2680      	movs	r6, #128	; 0x80
    668e:	2200      	movs	r2, #0
    6690:	03f6      	lsls	r6, r6, #15
    6692:	e6f0      	b.n	6476 <__aeabi_fadd+0xea>
    6694:	003b      	movs	r3, r7
    6696:	e6b4      	b.n	6402 <__aeabi_fadd+0x76>
    6698:	1e33      	subs	r3, r6, #0
    669a:	d000      	beq.n	669e <__aeabi_fadd+0x312>
    669c:	e6e2      	b.n	6464 <__aeabi_fadd+0xd8>
    669e:	2200      	movs	r2, #0
    66a0:	e721      	b.n	64e6 <__aeabi_fadd+0x15a>
    66a2:	2301      	movs	r3, #1
    66a4:	e7bd      	b.n	6622 <__aeabi_fadd+0x296>
    66a6:	46c0      	nop			; (mov r8, r8)
    66a8:	7dffffff 	.word	0x7dffffff
    66ac:	fbffffff 	.word	0xfbffffff

000066b0 <__aeabi_fdiv>:
    66b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    66b2:	4657      	mov	r7, sl
    66b4:	464e      	mov	r6, r9
    66b6:	46de      	mov	lr, fp
    66b8:	4645      	mov	r5, r8
    66ba:	b5e0      	push	{r5, r6, r7, lr}
    66bc:	0244      	lsls	r4, r0, #9
    66be:	0043      	lsls	r3, r0, #1
    66c0:	0fc6      	lsrs	r6, r0, #31
    66c2:	b083      	sub	sp, #12
    66c4:	1c0f      	adds	r7, r1, #0
    66c6:	0a64      	lsrs	r4, r4, #9
    66c8:	0e1b      	lsrs	r3, r3, #24
    66ca:	46b2      	mov	sl, r6
    66cc:	d053      	beq.n	6776 <__aeabi_fdiv+0xc6>
    66ce:	2bff      	cmp	r3, #255	; 0xff
    66d0:	d027      	beq.n	6722 <__aeabi_fdiv+0x72>
    66d2:	2280      	movs	r2, #128	; 0x80
    66d4:	00e4      	lsls	r4, r4, #3
    66d6:	04d2      	lsls	r2, r2, #19
    66d8:	4314      	orrs	r4, r2
    66da:	227f      	movs	r2, #127	; 0x7f
    66dc:	4252      	negs	r2, r2
    66de:	4690      	mov	r8, r2
    66e0:	4498      	add	r8, r3
    66e2:	2300      	movs	r3, #0
    66e4:	4699      	mov	r9, r3
    66e6:	469b      	mov	fp, r3
    66e8:	027d      	lsls	r5, r7, #9
    66ea:	0078      	lsls	r0, r7, #1
    66ec:	0ffb      	lsrs	r3, r7, #31
    66ee:	0a6d      	lsrs	r5, r5, #9
    66f0:	0e00      	lsrs	r0, r0, #24
    66f2:	9300      	str	r3, [sp, #0]
    66f4:	d024      	beq.n	6740 <__aeabi_fdiv+0x90>
    66f6:	28ff      	cmp	r0, #255	; 0xff
    66f8:	d046      	beq.n	6788 <__aeabi_fdiv+0xd8>
    66fa:	2380      	movs	r3, #128	; 0x80
    66fc:	2100      	movs	r1, #0
    66fe:	00ed      	lsls	r5, r5, #3
    6700:	04db      	lsls	r3, r3, #19
    6702:	431d      	orrs	r5, r3
    6704:	387f      	subs	r0, #127	; 0x7f
    6706:	4647      	mov	r7, r8
    6708:	1a38      	subs	r0, r7, r0
    670a:	464f      	mov	r7, r9
    670c:	430f      	orrs	r7, r1
    670e:	00bf      	lsls	r7, r7, #2
    6710:	46b9      	mov	r9, r7
    6712:	0033      	movs	r3, r6
    6714:	9a00      	ldr	r2, [sp, #0]
    6716:	4f87      	ldr	r7, [pc, #540]	; (6934 <__aeabi_fdiv+0x284>)
    6718:	4053      	eors	r3, r2
    671a:	464a      	mov	r2, r9
    671c:	58ba      	ldr	r2, [r7, r2]
    671e:	9301      	str	r3, [sp, #4]
    6720:	4697      	mov	pc, r2
    6722:	2c00      	cmp	r4, #0
    6724:	d14e      	bne.n	67c4 <__aeabi_fdiv+0x114>
    6726:	2308      	movs	r3, #8
    6728:	4699      	mov	r9, r3
    672a:	33f7      	adds	r3, #247	; 0xf7
    672c:	4698      	mov	r8, r3
    672e:	3bfd      	subs	r3, #253	; 0xfd
    6730:	469b      	mov	fp, r3
    6732:	027d      	lsls	r5, r7, #9
    6734:	0078      	lsls	r0, r7, #1
    6736:	0ffb      	lsrs	r3, r7, #31
    6738:	0a6d      	lsrs	r5, r5, #9
    673a:	0e00      	lsrs	r0, r0, #24
    673c:	9300      	str	r3, [sp, #0]
    673e:	d1da      	bne.n	66f6 <__aeabi_fdiv+0x46>
    6740:	2d00      	cmp	r5, #0
    6742:	d126      	bne.n	6792 <__aeabi_fdiv+0xe2>
    6744:	2000      	movs	r0, #0
    6746:	2101      	movs	r1, #1
    6748:	0033      	movs	r3, r6
    674a:	9a00      	ldr	r2, [sp, #0]
    674c:	4f7a      	ldr	r7, [pc, #488]	; (6938 <__aeabi_fdiv+0x288>)
    674e:	4053      	eors	r3, r2
    6750:	4642      	mov	r2, r8
    6752:	1a10      	subs	r0, r2, r0
    6754:	464a      	mov	r2, r9
    6756:	430a      	orrs	r2, r1
    6758:	0092      	lsls	r2, r2, #2
    675a:	58ba      	ldr	r2, [r7, r2]
    675c:	001d      	movs	r5, r3
    675e:	4697      	mov	pc, r2
    6760:	9b00      	ldr	r3, [sp, #0]
    6762:	002c      	movs	r4, r5
    6764:	469a      	mov	sl, r3
    6766:	468b      	mov	fp, r1
    6768:	465b      	mov	r3, fp
    676a:	2b02      	cmp	r3, #2
    676c:	d131      	bne.n	67d2 <__aeabi_fdiv+0x122>
    676e:	4653      	mov	r3, sl
    6770:	21ff      	movs	r1, #255	; 0xff
    6772:	2400      	movs	r4, #0
    6774:	e038      	b.n	67e8 <__aeabi_fdiv+0x138>
    6776:	2c00      	cmp	r4, #0
    6778:	d117      	bne.n	67aa <__aeabi_fdiv+0xfa>
    677a:	2304      	movs	r3, #4
    677c:	4699      	mov	r9, r3
    677e:	2300      	movs	r3, #0
    6780:	4698      	mov	r8, r3
    6782:	3301      	adds	r3, #1
    6784:	469b      	mov	fp, r3
    6786:	e7af      	b.n	66e8 <__aeabi_fdiv+0x38>
    6788:	20ff      	movs	r0, #255	; 0xff
    678a:	2d00      	cmp	r5, #0
    678c:	d10b      	bne.n	67a6 <__aeabi_fdiv+0xf6>
    678e:	2102      	movs	r1, #2
    6790:	e7da      	b.n	6748 <__aeabi_fdiv+0x98>
    6792:	0028      	movs	r0, r5
    6794:	f002 f970 	bl	8a78 <__clzsi2>
    6798:	1f43      	subs	r3, r0, #5
    679a:	409d      	lsls	r5, r3
    679c:	2376      	movs	r3, #118	; 0x76
    679e:	425b      	negs	r3, r3
    67a0:	1a18      	subs	r0, r3, r0
    67a2:	2100      	movs	r1, #0
    67a4:	e7af      	b.n	6706 <__aeabi_fdiv+0x56>
    67a6:	2103      	movs	r1, #3
    67a8:	e7ad      	b.n	6706 <__aeabi_fdiv+0x56>
    67aa:	0020      	movs	r0, r4
    67ac:	f002 f964 	bl	8a78 <__clzsi2>
    67b0:	1f43      	subs	r3, r0, #5
    67b2:	409c      	lsls	r4, r3
    67b4:	2376      	movs	r3, #118	; 0x76
    67b6:	425b      	negs	r3, r3
    67b8:	1a1b      	subs	r3, r3, r0
    67ba:	4698      	mov	r8, r3
    67bc:	2300      	movs	r3, #0
    67be:	4699      	mov	r9, r3
    67c0:	469b      	mov	fp, r3
    67c2:	e791      	b.n	66e8 <__aeabi_fdiv+0x38>
    67c4:	230c      	movs	r3, #12
    67c6:	4699      	mov	r9, r3
    67c8:	33f3      	adds	r3, #243	; 0xf3
    67ca:	4698      	mov	r8, r3
    67cc:	3bfc      	subs	r3, #252	; 0xfc
    67ce:	469b      	mov	fp, r3
    67d0:	e78a      	b.n	66e8 <__aeabi_fdiv+0x38>
    67d2:	2b03      	cmp	r3, #3
    67d4:	d100      	bne.n	67d8 <__aeabi_fdiv+0x128>
    67d6:	e0a5      	b.n	6924 <__aeabi_fdiv+0x274>
    67d8:	4655      	mov	r5, sl
    67da:	2b01      	cmp	r3, #1
    67dc:	d000      	beq.n	67e0 <__aeabi_fdiv+0x130>
    67de:	e081      	b.n	68e4 <__aeabi_fdiv+0x234>
    67e0:	2301      	movs	r3, #1
    67e2:	2100      	movs	r1, #0
    67e4:	2400      	movs	r4, #0
    67e6:	402b      	ands	r3, r5
    67e8:	0264      	lsls	r4, r4, #9
    67ea:	05c9      	lsls	r1, r1, #23
    67ec:	0a60      	lsrs	r0, r4, #9
    67ee:	07db      	lsls	r3, r3, #31
    67f0:	4308      	orrs	r0, r1
    67f2:	4318      	orrs	r0, r3
    67f4:	b003      	add	sp, #12
    67f6:	bc3c      	pop	{r2, r3, r4, r5}
    67f8:	4690      	mov	r8, r2
    67fa:	4699      	mov	r9, r3
    67fc:	46a2      	mov	sl, r4
    67fe:	46ab      	mov	fp, r5
    6800:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6802:	2480      	movs	r4, #128	; 0x80
    6804:	2300      	movs	r3, #0
    6806:	03e4      	lsls	r4, r4, #15
    6808:	21ff      	movs	r1, #255	; 0xff
    680a:	e7ed      	b.n	67e8 <__aeabi_fdiv+0x138>
    680c:	21ff      	movs	r1, #255	; 0xff
    680e:	2400      	movs	r4, #0
    6810:	e7ea      	b.n	67e8 <__aeabi_fdiv+0x138>
    6812:	2301      	movs	r3, #1
    6814:	1a59      	subs	r1, r3, r1
    6816:	291b      	cmp	r1, #27
    6818:	dd66      	ble.n	68e8 <__aeabi_fdiv+0x238>
    681a:	9a01      	ldr	r2, [sp, #4]
    681c:	4013      	ands	r3, r2
    681e:	2100      	movs	r1, #0
    6820:	2400      	movs	r4, #0
    6822:	e7e1      	b.n	67e8 <__aeabi_fdiv+0x138>
    6824:	2380      	movs	r3, #128	; 0x80
    6826:	03db      	lsls	r3, r3, #15
    6828:	421c      	tst	r4, r3
    682a:	d038      	beq.n	689e <__aeabi_fdiv+0x1ee>
    682c:	421d      	tst	r5, r3
    682e:	d051      	beq.n	68d4 <__aeabi_fdiv+0x224>
    6830:	431c      	orrs	r4, r3
    6832:	0264      	lsls	r4, r4, #9
    6834:	0a64      	lsrs	r4, r4, #9
    6836:	0033      	movs	r3, r6
    6838:	21ff      	movs	r1, #255	; 0xff
    683a:	e7d5      	b.n	67e8 <__aeabi_fdiv+0x138>
    683c:	0163      	lsls	r3, r4, #5
    683e:	016c      	lsls	r4, r5, #5
    6840:	42a3      	cmp	r3, r4
    6842:	d23b      	bcs.n	68bc <__aeabi_fdiv+0x20c>
    6844:	261b      	movs	r6, #27
    6846:	2100      	movs	r1, #0
    6848:	3801      	subs	r0, #1
    684a:	2501      	movs	r5, #1
    684c:	001f      	movs	r7, r3
    684e:	0049      	lsls	r1, r1, #1
    6850:	005b      	lsls	r3, r3, #1
    6852:	2f00      	cmp	r7, #0
    6854:	db01      	blt.n	685a <__aeabi_fdiv+0x1aa>
    6856:	429c      	cmp	r4, r3
    6858:	d801      	bhi.n	685e <__aeabi_fdiv+0x1ae>
    685a:	1b1b      	subs	r3, r3, r4
    685c:	4329      	orrs	r1, r5
    685e:	3e01      	subs	r6, #1
    6860:	2e00      	cmp	r6, #0
    6862:	d1f3      	bne.n	684c <__aeabi_fdiv+0x19c>
    6864:	001c      	movs	r4, r3
    6866:	1e63      	subs	r3, r4, #1
    6868:	419c      	sbcs	r4, r3
    686a:	430c      	orrs	r4, r1
    686c:	0001      	movs	r1, r0
    686e:	317f      	adds	r1, #127	; 0x7f
    6870:	2900      	cmp	r1, #0
    6872:	ddce      	ble.n	6812 <__aeabi_fdiv+0x162>
    6874:	0763      	lsls	r3, r4, #29
    6876:	d004      	beq.n	6882 <__aeabi_fdiv+0x1d2>
    6878:	230f      	movs	r3, #15
    687a:	4023      	ands	r3, r4
    687c:	2b04      	cmp	r3, #4
    687e:	d000      	beq.n	6882 <__aeabi_fdiv+0x1d2>
    6880:	3404      	adds	r4, #4
    6882:	0123      	lsls	r3, r4, #4
    6884:	d503      	bpl.n	688e <__aeabi_fdiv+0x1de>
    6886:	0001      	movs	r1, r0
    6888:	4b2c      	ldr	r3, [pc, #176]	; (693c <__aeabi_fdiv+0x28c>)
    688a:	3180      	adds	r1, #128	; 0x80
    688c:	401c      	ands	r4, r3
    688e:	29fe      	cmp	r1, #254	; 0xfe
    6890:	dd0d      	ble.n	68ae <__aeabi_fdiv+0x1fe>
    6892:	2301      	movs	r3, #1
    6894:	9a01      	ldr	r2, [sp, #4]
    6896:	21ff      	movs	r1, #255	; 0xff
    6898:	4013      	ands	r3, r2
    689a:	2400      	movs	r4, #0
    689c:	e7a4      	b.n	67e8 <__aeabi_fdiv+0x138>
    689e:	2380      	movs	r3, #128	; 0x80
    68a0:	03db      	lsls	r3, r3, #15
    68a2:	431c      	orrs	r4, r3
    68a4:	0264      	lsls	r4, r4, #9
    68a6:	0a64      	lsrs	r4, r4, #9
    68a8:	0033      	movs	r3, r6
    68aa:	21ff      	movs	r1, #255	; 0xff
    68ac:	e79c      	b.n	67e8 <__aeabi_fdiv+0x138>
    68ae:	2301      	movs	r3, #1
    68b0:	9a01      	ldr	r2, [sp, #4]
    68b2:	01a4      	lsls	r4, r4, #6
    68b4:	0a64      	lsrs	r4, r4, #9
    68b6:	b2c9      	uxtb	r1, r1
    68b8:	4013      	ands	r3, r2
    68ba:	e795      	b.n	67e8 <__aeabi_fdiv+0x138>
    68bc:	1b1b      	subs	r3, r3, r4
    68be:	261a      	movs	r6, #26
    68c0:	2101      	movs	r1, #1
    68c2:	e7c2      	b.n	684a <__aeabi_fdiv+0x19a>
    68c4:	9b00      	ldr	r3, [sp, #0]
    68c6:	468b      	mov	fp, r1
    68c8:	469a      	mov	sl, r3
    68ca:	2400      	movs	r4, #0
    68cc:	e74c      	b.n	6768 <__aeabi_fdiv+0xb8>
    68ce:	0263      	lsls	r3, r4, #9
    68d0:	d5e5      	bpl.n	689e <__aeabi_fdiv+0x1ee>
    68d2:	2500      	movs	r5, #0
    68d4:	2480      	movs	r4, #128	; 0x80
    68d6:	03e4      	lsls	r4, r4, #15
    68d8:	432c      	orrs	r4, r5
    68da:	0264      	lsls	r4, r4, #9
    68dc:	0a64      	lsrs	r4, r4, #9
    68de:	9b00      	ldr	r3, [sp, #0]
    68e0:	21ff      	movs	r1, #255	; 0xff
    68e2:	e781      	b.n	67e8 <__aeabi_fdiv+0x138>
    68e4:	9501      	str	r5, [sp, #4]
    68e6:	e7c1      	b.n	686c <__aeabi_fdiv+0x1bc>
    68e8:	0023      	movs	r3, r4
    68ea:	2020      	movs	r0, #32
    68ec:	40cb      	lsrs	r3, r1
    68ee:	1a41      	subs	r1, r0, r1
    68f0:	408c      	lsls	r4, r1
    68f2:	1e61      	subs	r1, r4, #1
    68f4:	418c      	sbcs	r4, r1
    68f6:	431c      	orrs	r4, r3
    68f8:	0763      	lsls	r3, r4, #29
    68fa:	d004      	beq.n	6906 <__aeabi_fdiv+0x256>
    68fc:	230f      	movs	r3, #15
    68fe:	4023      	ands	r3, r4
    6900:	2b04      	cmp	r3, #4
    6902:	d000      	beq.n	6906 <__aeabi_fdiv+0x256>
    6904:	3404      	adds	r4, #4
    6906:	0163      	lsls	r3, r4, #5
    6908:	d505      	bpl.n	6916 <__aeabi_fdiv+0x266>
    690a:	2301      	movs	r3, #1
    690c:	9a01      	ldr	r2, [sp, #4]
    690e:	2101      	movs	r1, #1
    6910:	4013      	ands	r3, r2
    6912:	2400      	movs	r4, #0
    6914:	e768      	b.n	67e8 <__aeabi_fdiv+0x138>
    6916:	2301      	movs	r3, #1
    6918:	9a01      	ldr	r2, [sp, #4]
    691a:	01a4      	lsls	r4, r4, #6
    691c:	0a64      	lsrs	r4, r4, #9
    691e:	4013      	ands	r3, r2
    6920:	2100      	movs	r1, #0
    6922:	e761      	b.n	67e8 <__aeabi_fdiv+0x138>
    6924:	2380      	movs	r3, #128	; 0x80
    6926:	03db      	lsls	r3, r3, #15
    6928:	431c      	orrs	r4, r3
    692a:	0264      	lsls	r4, r4, #9
    692c:	0a64      	lsrs	r4, r4, #9
    692e:	4653      	mov	r3, sl
    6930:	21ff      	movs	r1, #255	; 0xff
    6932:	e759      	b.n	67e8 <__aeabi_fdiv+0x138>
    6934:	00008e60 	.word	0x00008e60
    6938:	00008ea0 	.word	0x00008ea0
    693c:	f7ffffff 	.word	0xf7ffffff

00006940 <__eqsf2>:
    6940:	b570      	push	{r4, r5, r6, lr}
    6942:	0042      	lsls	r2, r0, #1
    6944:	0245      	lsls	r5, r0, #9
    6946:	024e      	lsls	r6, r1, #9
    6948:	004c      	lsls	r4, r1, #1
    694a:	0fc3      	lsrs	r3, r0, #31
    694c:	0a6d      	lsrs	r5, r5, #9
    694e:	0e12      	lsrs	r2, r2, #24
    6950:	0a76      	lsrs	r6, r6, #9
    6952:	0e24      	lsrs	r4, r4, #24
    6954:	0fc9      	lsrs	r1, r1, #31
    6956:	2001      	movs	r0, #1
    6958:	2aff      	cmp	r2, #255	; 0xff
    695a:	d006      	beq.n	696a <__eqsf2+0x2a>
    695c:	2cff      	cmp	r4, #255	; 0xff
    695e:	d003      	beq.n	6968 <__eqsf2+0x28>
    6960:	42a2      	cmp	r2, r4
    6962:	d101      	bne.n	6968 <__eqsf2+0x28>
    6964:	42b5      	cmp	r5, r6
    6966:	d006      	beq.n	6976 <__eqsf2+0x36>
    6968:	bd70      	pop	{r4, r5, r6, pc}
    696a:	2d00      	cmp	r5, #0
    696c:	d1fc      	bne.n	6968 <__eqsf2+0x28>
    696e:	2cff      	cmp	r4, #255	; 0xff
    6970:	d1fa      	bne.n	6968 <__eqsf2+0x28>
    6972:	2e00      	cmp	r6, #0
    6974:	d1f8      	bne.n	6968 <__eqsf2+0x28>
    6976:	428b      	cmp	r3, r1
    6978:	d006      	beq.n	6988 <__eqsf2+0x48>
    697a:	2001      	movs	r0, #1
    697c:	2a00      	cmp	r2, #0
    697e:	d1f3      	bne.n	6968 <__eqsf2+0x28>
    6980:	0028      	movs	r0, r5
    6982:	1e45      	subs	r5, r0, #1
    6984:	41a8      	sbcs	r0, r5
    6986:	e7ef      	b.n	6968 <__eqsf2+0x28>
    6988:	2000      	movs	r0, #0
    698a:	e7ed      	b.n	6968 <__eqsf2+0x28>

0000698c <__gesf2>:
    698c:	b5f0      	push	{r4, r5, r6, r7, lr}
    698e:	0042      	lsls	r2, r0, #1
    6990:	0245      	lsls	r5, r0, #9
    6992:	024c      	lsls	r4, r1, #9
    6994:	0fc3      	lsrs	r3, r0, #31
    6996:	0048      	lsls	r0, r1, #1
    6998:	0a6d      	lsrs	r5, r5, #9
    699a:	0e12      	lsrs	r2, r2, #24
    699c:	0a64      	lsrs	r4, r4, #9
    699e:	0e00      	lsrs	r0, r0, #24
    69a0:	0fc9      	lsrs	r1, r1, #31
    69a2:	2aff      	cmp	r2, #255	; 0xff
    69a4:	d01e      	beq.n	69e4 <__gesf2+0x58>
    69a6:	28ff      	cmp	r0, #255	; 0xff
    69a8:	d021      	beq.n	69ee <__gesf2+0x62>
    69aa:	2a00      	cmp	r2, #0
    69ac:	d10a      	bne.n	69c4 <__gesf2+0x38>
    69ae:	426e      	negs	r6, r5
    69b0:	416e      	adcs	r6, r5
    69b2:	b2f6      	uxtb	r6, r6
    69b4:	2800      	cmp	r0, #0
    69b6:	d10f      	bne.n	69d8 <__gesf2+0x4c>
    69b8:	2c00      	cmp	r4, #0
    69ba:	d10d      	bne.n	69d8 <__gesf2+0x4c>
    69bc:	2000      	movs	r0, #0
    69be:	2d00      	cmp	r5, #0
    69c0:	d009      	beq.n	69d6 <__gesf2+0x4a>
    69c2:	e005      	b.n	69d0 <__gesf2+0x44>
    69c4:	2800      	cmp	r0, #0
    69c6:	d101      	bne.n	69cc <__gesf2+0x40>
    69c8:	2c00      	cmp	r4, #0
    69ca:	d001      	beq.n	69d0 <__gesf2+0x44>
    69cc:	428b      	cmp	r3, r1
    69ce:	d011      	beq.n	69f4 <__gesf2+0x68>
    69d0:	2101      	movs	r1, #1
    69d2:	4258      	negs	r0, r3
    69d4:	4308      	orrs	r0, r1
    69d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69d8:	2e00      	cmp	r6, #0
    69da:	d0f7      	beq.n	69cc <__gesf2+0x40>
    69dc:	2001      	movs	r0, #1
    69de:	3901      	subs	r1, #1
    69e0:	4308      	orrs	r0, r1
    69e2:	e7f8      	b.n	69d6 <__gesf2+0x4a>
    69e4:	2d00      	cmp	r5, #0
    69e6:	d0de      	beq.n	69a6 <__gesf2+0x1a>
    69e8:	2002      	movs	r0, #2
    69ea:	4240      	negs	r0, r0
    69ec:	e7f3      	b.n	69d6 <__gesf2+0x4a>
    69ee:	2c00      	cmp	r4, #0
    69f0:	d0db      	beq.n	69aa <__gesf2+0x1e>
    69f2:	e7f9      	b.n	69e8 <__gesf2+0x5c>
    69f4:	4282      	cmp	r2, r0
    69f6:	dceb      	bgt.n	69d0 <__gesf2+0x44>
    69f8:	db04      	blt.n	6a04 <__gesf2+0x78>
    69fa:	42a5      	cmp	r5, r4
    69fc:	d8e8      	bhi.n	69d0 <__gesf2+0x44>
    69fe:	2000      	movs	r0, #0
    6a00:	42a5      	cmp	r5, r4
    6a02:	d2e8      	bcs.n	69d6 <__gesf2+0x4a>
    6a04:	2101      	movs	r1, #1
    6a06:	1e58      	subs	r0, r3, #1
    6a08:	4308      	orrs	r0, r1
    6a0a:	e7e4      	b.n	69d6 <__gesf2+0x4a>

00006a0c <__lesf2>:
    6a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a0e:	0042      	lsls	r2, r0, #1
    6a10:	024d      	lsls	r5, r1, #9
    6a12:	004c      	lsls	r4, r1, #1
    6a14:	0246      	lsls	r6, r0, #9
    6a16:	0a76      	lsrs	r6, r6, #9
    6a18:	0e12      	lsrs	r2, r2, #24
    6a1a:	0fc3      	lsrs	r3, r0, #31
    6a1c:	0a6d      	lsrs	r5, r5, #9
    6a1e:	0e24      	lsrs	r4, r4, #24
    6a20:	0fc9      	lsrs	r1, r1, #31
    6a22:	2aff      	cmp	r2, #255	; 0xff
    6a24:	d016      	beq.n	6a54 <__lesf2+0x48>
    6a26:	2cff      	cmp	r4, #255	; 0xff
    6a28:	d018      	beq.n	6a5c <__lesf2+0x50>
    6a2a:	2a00      	cmp	r2, #0
    6a2c:	d10a      	bne.n	6a44 <__lesf2+0x38>
    6a2e:	4270      	negs	r0, r6
    6a30:	4170      	adcs	r0, r6
    6a32:	b2c0      	uxtb	r0, r0
    6a34:	2c00      	cmp	r4, #0
    6a36:	d015      	beq.n	6a64 <__lesf2+0x58>
    6a38:	2800      	cmp	r0, #0
    6a3a:	d005      	beq.n	6a48 <__lesf2+0x3c>
    6a3c:	2001      	movs	r0, #1
    6a3e:	3901      	subs	r1, #1
    6a40:	4308      	orrs	r0, r1
    6a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a44:	2c00      	cmp	r4, #0
    6a46:	d013      	beq.n	6a70 <__lesf2+0x64>
    6a48:	4299      	cmp	r1, r3
    6a4a:	d014      	beq.n	6a76 <__lesf2+0x6a>
    6a4c:	2001      	movs	r0, #1
    6a4e:	425b      	negs	r3, r3
    6a50:	4318      	orrs	r0, r3
    6a52:	e7f6      	b.n	6a42 <__lesf2+0x36>
    6a54:	2002      	movs	r0, #2
    6a56:	2e00      	cmp	r6, #0
    6a58:	d1f3      	bne.n	6a42 <__lesf2+0x36>
    6a5a:	e7e4      	b.n	6a26 <__lesf2+0x1a>
    6a5c:	2002      	movs	r0, #2
    6a5e:	2d00      	cmp	r5, #0
    6a60:	d1ef      	bne.n	6a42 <__lesf2+0x36>
    6a62:	e7e2      	b.n	6a2a <__lesf2+0x1e>
    6a64:	2d00      	cmp	r5, #0
    6a66:	d1e7      	bne.n	6a38 <__lesf2+0x2c>
    6a68:	2000      	movs	r0, #0
    6a6a:	2e00      	cmp	r6, #0
    6a6c:	d0e9      	beq.n	6a42 <__lesf2+0x36>
    6a6e:	e7ed      	b.n	6a4c <__lesf2+0x40>
    6a70:	2d00      	cmp	r5, #0
    6a72:	d1e9      	bne.n	6a48 <__lesf2+0x3c>
    6a74:	e7ea      	b.n	6a4c <__lesf2+0x40>
    6a76:	42a2      	cmp	r2, r4
    6a78:	dc06      	bgt.n	6a88 <__lesf2+0x7c>
    6a7a:	dbdf      	blt.n	6a3c <__lesf2+0x30>
    6a7c:	42ae      	cmp	r6, r5
    6a7e:	d803      	bhi.n	6a88 <__lesf2+0x7c>
    6a80:	2000      	movs	r0, #0
    6a82:	42ae      	cmp	r6, r5
    6a84:	d3da      	bcc.n	6a3c <__lesf2+0x30>
    6a86:	e7dc      	b.n	6a42 <__lesf2+0x36>
    6a88:	2001      	movs	r0, #1
    6a8a:	4249      	negs	r1, r1
    6a8c:	4308      	orrs	r0, r1
    6a8e:	e7d8      	b.n	6a42 <__lesf2+0x36>

00006a90 <__aeabi_fmul>:
    6a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a92:	4657      	mov	r7, sl
    6a94:	464e      	mov	r6, r9
    6a96:	4645      	mov	r5, r8
    6a98:	46de      	mov	lr, fp
    6a9a:	b5e0      	push	{r5, r6, r7, lr}
    6a9c:	0247      	lsls	r7, r0, #9
    6a9e:	0046      	lsls	r6, r0, #1
    6aa0:	4688      	mov	r8, r1
    6aa2:	0a7f      	lsrs	r7, r7, #9
    6aa4:	0e36      	lsrs	r6, r6, #24
    6aa6:	0fc4      	lsrs	r4, r0, #31
    6aa8:	2e00      	cmp	r6, #0
    6aaa:	d047      	beq.n	6b3c <__aeabi_fmul+0xac>
    6aac:	2eff      	cmp	r6, #255	; 0xff
    6aae:	d024      	beq.n	6afa <__aeabi_fmul+0x6a>
    6ab0:	00fb      	lsls	r3, r7, #3
    6ab2:	2780      	movs	r7, #128	; 0x80
    6ab4:	04ff      	lsls	r7, r7, #19
    6ab6:	431f      	orrs	r7, r3
    6ab8:	2300      	movs	r3, #0
    6aba:	4699      	mov	r9, r3
    6abc:	469a      	mov	sl, r3
    6abe:	3e7f      	subs	r6, #127	; 0x7f
    6ac0:	4643      	mov	r3, r8
    6ac2:	025d      	lsls	r5, r3, #9
    6ac4:	0058      	lsls	r0, r3, #1
    6ac6:	0fdb      	lsrs	r3, r3, #31
    6ac8:	0a6d      	lsrs	r5, r5, #9
    6aca:	0e00      	lsrs	r0, r0, #24
    6acc:	4698      	mov	r8, r3
    6ace:	d043      	beq.n	6b58 <__aeabi_fmul+0xc8>
    6ad0:	28ff      	cmp	r0, #255	; 0xff
    6ad2:	d03b      	beq.n	6b4c <__aeabi_fmul+0xbc>
    6ad4:	00eb      	lsls	r3, r5, #3
    6ad6:	2580      	movs	r5, #128	; 0x80
    6ad8:	2200      	movs	r2, #0
    6ada:	04ed      	lsls	r5, r5, #19
    6adc:	431d      	orrs	r5, r3
    6ade:	387f      	subs	r0, #127	; 0x7f
    6ae0:	1836      	adds	r6, r6, r0
    6ae2:	1c73      	adds	r3, r6, #1
    6ae4:	4641      	mov	r1, r8
    6ae6:	469b      	mov	fp, r3
    6ae8:	464b      	mov	r3, r9
    6aea:	4061      	eors	r1, r4
    6aec:	4313      	orrs	r3, r2
    6aee:	2b0f      	cmp	r3, #15
    6af0:	d864      	bhi.n	6bbc <__aeabi_fmul+0x12c>
    6af2:	4875      	ldr	r0, [pc, #468]	; (6cc8 <__aeabi_fmul+0x238>)
    6af4:	009b      	lsls	r3, r3, #2
    6af6:	58c3      	ldr	r3, [r0, r3]
    6af8:	469f      	mov	pc, r3
    6afa:	2f00      	cmp	r7, #0
    6afc:	d142      	bne.n	6b84 <__aeabi_fmul+0xf4>
    6afe:	2308      	movs	r3, #8
    6b00:	4699      	mov	r9, r3
    6b02:	3b06      	subs	r3, #6
    6b04:	26ff      	movs	r6, #255	; 0xff
    6b06:	469a      	mov	sl, r3
    6b08:	e7da      	b.n	6ac0 <__aeabi_fmul+0x30>
    6b0a:	4641      	mov	r1, r8
    6b0c:	2a02      	cmp	r2, #2
    6b0e:	d028      	beq.n	6b62 <__aeabi_fmul+0xd2>
    6b10:	2a03      	cmp	r2, #3
    6b12:	d100      	bne.n	6b16 <__aeabi_fmul+0x86>
    6b14:	e0ce      	b.n	6cb4 <__aeabi_fmul+0x224>
    6b16:	2a01      	cmp	r2, #1
    6b18:	d000      	beq.n	6b1c <__aeabi_fmul+0x8c>
    6b1a:	e0ac      	b.n	6c76 <__aeabi_fmul+0x1e6>
    6b1c:	4011      	ands	r1, r2
    6b1e:	2000      	movs	r0, #0
    6b20:	2200      	movs	r2, #0
    6b22:	b2cc      	uxtb	r4, r1
    6b24:	0240      	lsls	r0, r0, #9
    6b26:	05d2      	lsls	r2, r2, #23
    6b28:	0a40      	lsrs	r0, r0, #9
    6b2a:	07e4      	lsls	r4, r4, #31
    6b2c:	4310      	orrs	r0, r2
    6b2e:	4320      	orrs	r0, r4
    6b30:	bc3c      	pop	{r2, r3, r4, r5}
    6b32:	4690      	mov	r8, r2
    6b34:	4699      	mov	r9, r3
    6b36:	46a2      	mov	sl, r4
    6b38:	46ab      	mov	fp, r5
    6b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b3c:	2f00      	cmp	r7, #0
    6b3e:	d115      	bne.n	6b6c <__aeabi_fmul+0xdc>
    6b40:	2304      	movs	r3, #4
    6b42:	4699      	mov	r9, r3
    6b44:	3b03      	subs	r3, #3
    6b46:	2600      	movs	r6, #0
    6b48:	469a      	mov	sl, r3
    6b4a:	e7b9      	b.n	6ac0 <__aeabi_fmul+0x30>
    6b4c:	20ff      	movs	r0, #255	; 0xff
    6b4e:	2202      	movs	r2, #2
    6b50:	2d00      	cmp	r5, #0
    6b52:	d0c5      	beq.n	6ae0 <__aeabi_fmul+0x50>
    6b54:	2203      	movs	r2, #3
    6b56:	e7c3      	b.n	6ae0 <__aeabi_fmul+0x50>
    6b58:	2d00      	cmp	r5, #0
    6b5a:	d119      	bne.n	6b90 <__aeabi_fmul+0x100>
    6b5c:	2000      	movs	r0, #0
    6b5e:	2201      	movs	r2, #1
    6b60:	e7be      	b.n	6ae0 <__aeabi_fmul+0x50>
    6b62:	2401      	movs	r4, #1
    6b64:	22ff      	movs	r2, #255	; 0xff
    6b66:	400c      	ands	r4, r1
    6b68:	2000      	movs	r0, #0
    6b6a:	e7db      	b.n	6b24 <__aeabi_fmul+0x94>
    6b6c:	0038      	movs	r0, r7
    6b6e:	f001 ff83 	bl	8a78 <__clzsi2>
    6b72:	2676      	movs	r6, #118	; 0x76
    6b74:	1f43      	subs	r3, r0, #5
    6b76:	409f      	lsls	r7, r3
    6b78:	2300      	movs	r3, #0
    6b7a:	4276      	negs	r6, r6
    6b7c:	1a36      	subs	r6, r6, r0
    6b7e:	4699      	mov	r9, r3
    6b80:	469a      	mov	sl, r3
    6b82:	e79d      	b.n	6ac0 <__aeabi_fmul+0x30>
    6b84:	230c      	movs	r3, #12
    6b86:	4699      	mov	r9, r3
    6b88:	3b09      	subs	r3, #9
    6b8a:	26ff      	movs	r6, #255	; 0xff
    6b8c:	469a      	mov	sl, r3
    6b8e:	e797      	b.n	6ac0 <__aeabi_fmul+0x30>
    6b90:	0028      	movs	r0, r5
    6b92:	f001 ff71 	bl	8a78 <__clzsi2>
    6b96:	1f43      	subs	r3, r0, #5
    6b98:	409d      	lsls	r5, r3
    6b9a:	2376      	movs	r3, #118	; 0x76
    6b9c:	425b      	negs	r3, r3
    6b9e:	1a18      	subs	r0, r3, r0
    6ba0:	2200      	movs	r2, #0
    6ba2:	e79d      	b.n	6ae0 <__aeabi_fmul+0x50>
    6ba4:	2080      	movs	r0, #128	; 0x80
    6ba6:	2400      	movs	r4, #0
    6ba8:	03c0      	lsls	r0, r0, #15
    6baa:	22ff      	movs	r2, #255	; 0xff
    6bac:	e7ba      	b.n	6b24 <__aeabi_fmul+0x94>
    6bae:	003d      	movs	r5, r7
    6bb0:	4652      	mov	r2, sl
    6bb2:	e7ab      	b.n	6b0c <__aeabi_fmul+0x7c>
    6bb4:	003d      	movs	r5, r7
    6bb6:	0021      	movs	r1, r4
    6bb8:	4652      	mov	r2, sl
    6bba:	e7a7      	b.n	6b0c <__aeabi_fmul+0x7c>
    6bbc:	0c3b      	lsrs	r3, r7, #16
    6bbe:	469c      	mov	ip, r3
    6bc0:	042a      	lsls	r2, r5, #16
    6bc2:	0c12      	lsrs	r2, r2, #16
    6bc4:	0c2b      	lsrs	r3, r5, #16
    6bc6:	0014      	movs	r4, r2
    6bc8:	4660      	mov	r0, ip
    6bca:	4665      	mov	r5, ip
    6bcc:	043f      	lsls	r7, r7, #16
    6bce:	0c3f      	lsrs	r7, r7, #16
    6bd0:	437c      	muls	r4, r7
    6bd2:	4342      	muls	r2, r0
    6bd4:	435d      	muls	r5, r3
    6bd6:	437b      	muls	r3, r7
    6bd8:	0c27      	lsrs	r7, r4, #16
    6bda:	189b      	adds	r3, r3, r2
    6bdc:	18ff      	adds	r7, r7, r3
    6bde:	42ba      	cmp	r2, r7
    6be0:	d903      	bls.n	6bea <__aeabi_fmul+0x15a>
    6be2:	2380      	movs	r3, #128	; 0x80
    6be4:	025b      	lsls	r3, r3, #9
    6be6:	469c      	mov	ip, r3
    6be8:	4465      	add	r5, ip
    6bea:	0424      	lsls	r4, r4, #16
    6bec:	043a      	lsls	r2, r7, #16
    6bee:	0c24      	lsrs	r4, r4, #16
    6bf0:	1912      	adds	r2, r2, r4
    6bf2:	0193      	lsls	r3, r2, #6
    6bf4:	1e5c      	subs	r4, r3, #1
    6bf6:	41a3      	sbcs	r3, r4
    6bf8:	0c3f      	lsrs	r7, r7, #16
    6bfa:	0e92      	lsrs	r2, r2, #26
    6bfc:	197d      	adds	r5, r7, r5
    6bfe:	431a      	orrs	r2, r3
    6c00:	01ad      	lsls	r5, r5, #6
    6c02:	4315      	orrs	r5, r2
    6c04:	012b      	lsls	r3, r5, #4
    6c06:	d504      	bpl.n	6c12 <__aeabi_fmul+0x182>
    6c08:	2301      	movs	r3, #1
    6c0a:	465e      	mov	r6, fp
    6c0c:	086a      	lsrs	r2, r5, #1
    6c0e:	401d      	ands	r5, r3
    6c10:	4315      	orrs	r5, r2
    6c12:	0032      	movs	r2, r6
    6c14:	327f      	adds	r2, #127	; 0x7f
    6c16:	2a00      	cmp	r2, #0
    6c18:	dd25      	ble.n	6c66 <__aeabi_fmul+0x1d6>
    6c1a:	076b      	lsls	r3, r5, #29
    6c1c:	d004      	beq.n	6c28 <__aeabi_fmul+0x198>
    6c1e:	230f      	movs	r3, #15
    6c20:	402b      	ands	r3, r5
    6c22:	2b04      	cmp	r3, #4
    6c24:	d000      	beq.n	6c28 <__aeabi_fmul+0x198>
    6c26:	3504      	adds	r5, #4
    6c28:	012b      	lsls	r3, r5, #4
    6c2a:	d503      	bpl.n	6c34 <__aeabi_fmul+0x1a4>
    6c2c:	0032      	movs	r2, r6
    6c2e:	4b27      	ldr	r3, [pc, #156]	; (6ccc <__aeabi_fmul+0x23c>)
    6c30:	3280      	adds	r2, #128	; 0x80
    6c32:	401d      	ands	r5, r3
    6c34:	2afe      	cmp	r2, #254	; 0xfe
    6c36:	dc94      	bgt.n	6b62 <__aeabi_fmul+0xd2>
    6c38:	2401      	movs	r4, #1
    6c3a:	01a8      	lsls	r0, r5, #6
    6c3c:	0a40      	lsrs	r0, r0, #9
    6c3e:	b2d2      	uxtb	r2, r2
    6c40:	400c      	ands	r4, r1
    6c42:	e76f      	b.n	6b24 <__aeabi_fmul+0x94>
    6c44:	2080      	movs	r0, #128	; 0x80
    6c46:	03c0      	lsls	r0, r0, #15
    6c48:	4207      	tst	r7, r0
    6c4a:	d007      	beq.n	6c5c <__aeabi_fmul+0x1cc>
    6c4c:	4205      	tst	r5, r0
    6c4e:	d105      	bne.n	6c5c <__aeabi_fmul+0x1cc>
    6c50:	4328      	orrs	r0, r5
    6c52:	0240      	lsls	r0, r0, #9
    6c54:	0a40      	lsrs	r0, r0, #9
    6c56:	4644      	mov	r4, r8
    6c58:	22ff      	movs	r2, #255	; 0xff
    6c5a:	e763      	b.n	6b24 <__aeabi_fmul+0x94>
    6c5c:	4338      	orrs	r0, r7
    6c5e:	0240      	lsls	r0, r0, #9
    6c60:	0a40      	lsrs	r0, r0, #9
    6c62:	22ff      	movs	r2, #255	; 0xff
    6c64:	e75e      	b.n	6b24 <__aeabi_fmul+0x94>
    6c66:	2401      	movs	r4, #1
    6c68:	1aa3      	subs	r3, r4, r2
    6c6a:	2b1b      	cmp	r3, #27
    6c6c:	dd05      	ble.n	6c7a <__aeabi_fmul+0x1ea>
    6c6e:	400c      	ands	r4, r1
    6c70:	2200      	movs	r2, #0
    6c72:	2000      	movs	r0, #0
    6c74:	e756      	b.n	6b24 <__aeabi_fmul+0x94>
    6c76:	465e      	mov	r6, fp
    6c78:	e7cb      	b.n	6c12 <__aeabi_fmul+0x182>
    6c7a:	002a      	movs	r2, r5
    6c7c:	2020      	movs	r0, #32
    6c7e:	40da      	lsrs	r2, r3
    6c80:	1ac3      	subs	r3, r0, r3
    6c82:	409d      	lsls	r5, r3
    6c84:	002b      	movs	r3, r5
    6c86:	1e5d      	subs	r5, r3, #1
    6c88:	41ab      	sbcs	r3, r5
    6c8a:	4313      	orrs	r3, r2
    6c8c:	075a      	lsls	r2, r3, #29
    6c8e:	d004      	beq.n	6c9a <__aeabi_fmul+0x20a>
    6c90:	220f      	movs	r2, #15
    6c92:	401a      	ands	r2, r3
    6c94:	2a04      	cmp	r2, #4
    6c96:	d000      	beq.n	6c9a <__aeabi_fmul+0x20a>
    6c98:	3304      	adds	r3, #4
    6c9a:	015a      	lsls	r2, r3, #5
    6c9c:	d504      	bpl.n	6ca8 <__aeabi_fmul+0x218>
    6c9e:	2401      	movs	r4, #1
    6ca0:	2201      	movs	r2, #1
    6ca2:	400c      	ands	r4, r1
    6ca4:	2000      	movs	r0, #0
    6ca6:	e73d      	b.n	6b24 <__aeabi_fmul+0x94>
    6ca8:	2401      	movs	r4, #1
    6caa:	019b      	lsls	r3, r3, #6
    6cac:	0a58      	lsrs	r0, r3, #9
    6cae:	400c      	ands	r4, r1
    6cb0:	2200      	movs	r2, #0
    6cb2:	e737      	b.n	6b24 <__aeabi_fmul+0x94>
    6cb4:	2080      	movs	r0, #128	; 0x80
    6cb6:	2401      	movs	r4, #1
    6cb8:	03c0      	lsls	r0, r0, #15
    6cba:	4328      	orrs	r0, r5
    6cbc:	0240      	lsls	r0, r0, #9
    6cbe:	0a40      	lsrs	r0, r0, #9
    6cc0:	400c      	ands	r4, r1
    6cc2:	22ff      	movs	r2, #255	; 0xff
    6cc4:	e72e      	b.n	6b24 <__aeabi_fmul+0x94>
    6cc6:	46c0      	nop			; (mov r8, r8)
    6cc8:	00008ee0 	.word	0x00008ee0
    6ccc:	f7ffffff 	.word	0xf7ffffff

00006cd0 <__aeabi_i2f>:
    6cd0:	b570      	push	{r4, r5, r6, lr}
    6cd2:	2800      	cmp	r0, #0
    6cd4:	d030      	beq.n	6d38 <__aeabi_i2f+0x68>
    6cd6:	17c3      	asrs	r3, r0, #31
    6cd8:	18c4      	adds	r4, r0, r3
    6cda:	405c      	eors	r4, r3
    6cdc:	0fc5      	lsrs	r5, r0, #31
    6cde:	0020      	movs	r0, r4
    6ce0:	f001 feca 	bl	8a78 <__clzsi2>
    6ce4:	239e      	movs	r3, #158	; 0x9e
    6ce6:	1a1b      	subs	r3, r3, r0
    6ce8:	2b96      	cmp	r3, #150	; 0x96
    6cea:	dc0d      	bgt.n	6d08 <__aeabi_i2f+0x38>
    6cec:	2296      	movs	r2, #150	; 0x96
    6cee:	1ad2      	subs	r2, r2, r3
    6cf0:	4094      	lsls	r4, r2
    6cf2:	002a      	movs	r2, r5
    6cf4:	0264      	lsls	r4, r4, #9
    6cf6:	0a64      	lsrs	r4, r4, #9
    6cf8:	b2db      	uxtb	r3, r3
    6cfa:	0264      	lsls	r4, r4, #9
    6cfc:	05db      	lsls	r3, r3, #23
    6cfe:	0a60      	lsrs	r0, r4, #9
    6d00:	07d2      	lsls	r2, r2, #31
    6d02:	4318      	orrs	r0, r3
    6d04:	4310      	orrs	r0, r2
    6d06:	bd70      	pop	{r4, r5, r6, pc}
    6d08:	2b99      	cmp	r3, #153	; 0x99
    6d0a:	dc19      	bgt.n	6d40 <__aeabi_i2f+0x70>
    6d0c:	2299      	movs	r2, #153	; 0x99
    6d0e:	1ad2      	subs	r2, r2, r3
    6d10:	2a00      	cmp	r2, #0
    6d12:	dd29      	ble.n	6d68 <__aeabi_i2f+0x98>
    6d14:	4094      	lsls	r4, r2
    6d16:	0022      	movs	r2, r4
    6d18:	4c14      	ldr	r4, [pc, #80]	; (6d6c <__aeabi_i2f+0x9c>)
    6d1a:	4014      	ands	r4, r2
    6d1c:	0751      	lsls	r1, r2, #29
    6d1e:	d004      	beq.n	6d2a <__aeabi_i2f+0x5a>
    6d20:	210f      	movs	r1, #15
    6d22:	400a      	ands	r2, r1
    6d24:	2a04      	cmp	r2, #4
    6d26:	d000      	beq.n	6d2a <__aeabi_i2f+0x5a>
    6d28:	3404      	adds	r4, #4
    6d2a:	0162      	lsls	r2, r4, #5
    6d2c:	d413      	bmi.n	6d56 <__aeabi_i2f+0x86>
    6d2e:	01a4      	lsls	r4, r4, #6
    6d30:	0a64      	lsrs	r4, r4, #9
    6d32:	b2db      	uxtb	r3, r3
    6d34:	002a      	movs	r2, r5
    6d36:	e7e0      	b.n	6cfa <__aeabi_i2f+0x2a>
    6d38:	2200      	movs	r2, #0
    6d3a:	2300      	movs	r3, #0
    6d3c:	2400      	movs	r4, #0
    6d3e:	e7dc      	b.n	6cfa <__aeabi_i2f+0x2a>
    6d40:	2205      	movs	r2, #5
    6d42:	0021      	movs	r1, r4
    6d44:	1a12      	subs	r2, r2, r0
    6d46:	40d1      	lsrs	r1, r2
    6d48:	22b9      	movs	r2, #185	; 0xb9
    6d4a:	1ad2      	subs	r2, r2, r3
    6d4c:	4094      	lsls	r4, r2
    6d4e:	1e62      	subs	r2, r4, #1
    6d50:	4194      	sbcs	r4, r2
    6d52:	430c      	orrs	r4, r1
    6d54:	e7da      	b.n	6d0c <__aeabi_i2f+0x3c>
    6d56:	4b05      	ldr	r3, [pc, #20]	; (6d6c <__aeabi_i2f+0x9c>)
    6d58:	002a      	movs	r2, r5
    6d5a:	401c      	ands	r4, r3
    6d5c:	239f      	movs	r3, #159	; 0x9f
    6d5e:	01a4      	lsls	r4, r4, #6
    6d60:	1a1b      	subs	r3, r3, r0
    6d62:	0a64      	lsrs	r4, r4, #9
    6d64:	b2db      	uxtb	r3, r3
    6d66:	e7c8      	b.n	6cfa <__aeabi_i2f+0x2a>
    6d68:	0022      	movs	r2, r4
    6d6a:	e7d5      	b.n	6d18 <__aeabi_i2f+0x48>
    6d6c:	fbffffff 	.word	0xfbffffff

00006d70 <__aeabi_dadd>:
    6d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d72:	4645      	mov	r5, r8
    6d74:	46de      	mov	lr, fp
    6d76:	4657      	mov	r7, sl
    6d78:	464e      	mov	r6, r9
    6d7a:	030c      	lsls	r4, r1, #12
    6d7c:	b5e0      	push	{r5, r6, r7, lr}
    6d7e:	004e      	lsls	r6, r1, #1
    6d80:	0fc9      	lsrs	r1, r1, #31
    6d82:	4688      	mov	r8, r1
    6d84:	000d      	movs	r5, r1
    6d86:	0a61      	lsrs	r1, r4, #9
    6d88:	0f44      	lsrs	r4, r0, #29
    6d8a:	430c      	orrs	r4, r1
    6d8c:	00c7      	lsls	r7, r0, #3
    6d8e:	0319      	lsls	r1, r3, #12
    6d90:	0058      	lsls	r0, r3, #1
    6d92:	0fdb      	lsrs	r3, r3, #31
    6d94:	469b      	mov	fp, r3
    6d96:	0a4b      	lsrs	r3, r1, #9
    6d98:	0f51      	lsrs	r1, r2, #29
    6d9a:	430b      	orrs	r3, r1
    6d9c:	0d76      	lsrs	r6, r6, #21
    6d9e:	0d40      	lsrs	r0, r0, #21
    6da0:	0019      	movs	r1, r3
    6da2:	00d2      	lsls	r2, r2, #3
    6da4:	45d8      	cmp	r8, fp
    6da6:	d100      	bne.n	6daa <__aeabi_dadd+0x3a>
    6da8:	e0ae      	b.n	6f08 <__aeabi_dadd+0x198>
    6daa:	1a35      	subs	r5, r6, r0
    6dac:	2d00      	cmp	r5, #0
    6dae:	dc00      	bgt.n	6db2 <__aeabi_dadd+0x42>
    6db0:	e0f6      	b.n	6fa0 <__aeabi_dadd+0x230>
    6db2:	2800      	cmp	r0, #0
    6db4:	d10f      	bne.n	6dd6 <__aeabi_dadd+0x66>
    6db6:	4313      	orrs	r3, r2
    6db8:	d100      	bne.n	6dbc <__aeabi_dadd+0x4c>
    6dba:	e0db      	b.n	6f74 <__aeabi_dadd+0x204>
    6dbc:	1e6b      	subs	r3, r5, #1
    6dbe:	2b00      	cmp	r3, #0
    6dc0:	d000      	beq.n	6dc4 <__aeabi_dadd+0x54>
    6dc2:	e137      	b.n	7034 <__aeabi_dadd+0x2c4>
    6dc4:	1aba      	subs	r2, r7, r2
    6dc6:	4297      	cmp	r7, r2
    6dc8:	41bf      	sbcs	r7, r7
    6dca:	1a64      	subs	r4, r4, r1
    6dcc:	427f      	negs	r7, r7
    6dce:	1be4      	subs	r4, r4, r7
    6dd0:	2601      	movs	r6, #1
    6dd2:	0017      	movs	r7, r2
    6dd4:	e024      	b.n	6e20 <__aeabi_dadd+0xb0>
    6dd6:	4bc6      	ldr	r3, [pc, #792]	; (70f0 <__aeabi_dadd+0x380>)
    6dd8:	429e      	cmp	r6, r3
    6dda:	d04d      	beq.n	6e78 <__aeabi_dadd+0x108>
    6ddc:	2380      	movs	r3, #128	; 0x80
    6dde:	041b      	lsls	r3, r3, #16
    6de0:	4319      	orrs	r1, r3
    6de2:	2d38      	cmp	r5, #56	; 0x38
    6de4:	dd00      	ble.n	6de8 <__aeabi_dadd+0x78>
    6de6:	e107      	b.n	6ff8 <__aeabi_dadd+0x288>
    6de8:	2d1f      	cmp	r5, #31
    6dea:	dd00      	ble.n	6dee <__aeabi_dadd+0x7e>
    6dec:	e138      	b.n	7060 <__aeabi_dadd+0x2f0>
    6dee:	2020      	movs	r0, #32
    6df0:	1b43      	subs	r3, r0, r5
    6df2:	469a      	mov	sl, r3
    6df4:	000b      	movs	r3, r1
    6df6:	4650      	mov	r0, sl
    6df8:	4083      	lsls	r3, r0
    6dfa:	4699      	mov	r9, r3
    6dfc:	0013      	movs	r3, r2
    6dfe:	4648      	mov	r0, r9
    6e00:	40eb      	lsrs	r3, r5
    6e02:	4318      	orrs	r0, r3
    6e04:	0003      	movs	r3, r0
    6e06:	4650      	mov	r0, sl
    6e08:	4082      	lsls	r2, r0
    6e0a:	1e50      	subs	r0, r2, #1
    6e0c:	4182      	sbcs	r2, r0
    6e0e:	40e9      	lsrs	r1, r5
    6e10:	431a      	orrs	r2, r3
    6e12:	1aba      	subs	r2, r7, r2
    6e14:	1a61      	subs	r1, r4, r1
    6e16:	4297      	cmp	r7, r2
    6e18:	41a4      	sbcs	r4, r4
    6e1a:	0017      	movs	r7, r2
    6e1c:	4264      	negs	r4, r4
    6e1e:	1b0c      	subs	r4, r1, r4
    6e20:	0223      	lsls	r3, r4, #8
    6e22:	d562      	bpl.n	6eea <__aeabi_dadd+0x17a>
    6e24:	0264      	lsls	r4, r4, #9
    6e26:	0a65      	lsrs	r5, r4, #9
    6e28:	2d00      	cmp	r5, #0
    6e2a:	d100      	bne.n	6e2e <__aeabi_dadd+0xbe>
    6e2c:	e0df      	b.n	6fee <__aeabi_dadd+0x27e>
    6e2e:	0028      	movs	r0, r5
    6e30:	f001 fe22 	bl	8a78 <__clzsi2>
    6e34:	0003      	movs	r3, r0
    6e36:	3b08      	subs	r3, #8
    6e38:	2b1f      	cmp	r3, #31
    6e3a:	dd00      	ble.n	6e3e <__aeabi_dadd+0xce>
    6e3c:	e0d2      	b.n	6fe4 <__aeabi_dadd+0x274>
    6e3e:	2220      	movs	r2, #32
    6e40:	003c      	movs	r4, r7
    6e42:	1ad2      	subs	r2, r2, r3
    6e44:	409d      	lsls	r5, r3
    6e46:	40d4      	lsrs	r4, r2
    6e48:	409f      	lsls	r7, r3
    6e4a:	4325      	orrs	r5, r4
    6e4c:	429e      	cmp	r6, r3
    6e4e:	dd00      	ble.n	6e52 <__aeabi_dadd+0xe2>
    6e50:	e0c4      	b.n	6fdc <__aeabi_dadd+0x26c>
    6e52:	1b9e      	subs	r6, r3, r6
    6e54:	1c73      	adds	r3, r6, #1
    6e56:	2b1f      	cmp	r3, #31
    6e58:	dd00      	ble.n	6e5c <__aeabi_dadd+0xec>
    6e5a:	e0f1      	b.n	7040 <__aeabi_dadd+0x2d0>
    6e5c:	2220      	movs	r2, #32
    6e5e:	0038      	movs	r0, r7
    6e60:	0029      	movs	r1, r5
    6e62:	1ad2      	subs	r2, r2, r3
    6e64:	40d8      	lsrs	r0, r3
    6e66:	4091      	lsls	r1, r2
    6e68:	4097      	lsls	r7, r2
    6e6a:	002c      	movs	r4, r5
    6e6c:	4301      	orrs	r1, r0
    6e6e:	1e78      	subs	r0, r7, #1
    6e70:	4187      	sbcs	r7, r0
    6e72:	40dc      	lsrs	r4, r3
    6e74:	2600      	movs	r6, #0
    6e76:	430f      	orrs	r7, r1
    6e78:	077b      	lsls	r3, r7, #29
    6e7a:	d009      	beq.n	6e90 <__aeabi_dadd+0x120>
    6e7c:	230f      	movs	r3, #15
    6e7e:	403b      	ands	r3, r7
    6e80:	2b04      	cmp	r3, #4
    6e82:	d005      	beq.n	6e90 <__aeabi_dadd+0x120>
    6e84:	1d3b      	adds	r3, r7, #4
    6e86:	42bb      	cmp	r3, r7
    6e88:	41bf      	sbcs	r7, r7
    6e8a:	427f      	negs	r7, r7
    6e8c:	19e4      	adds	r4, r4, r7
    6e8e:	001f      	movs	r7, r3
    6e90:	0223      	lsls	r3, r4, #8
    6e92:	d52c      	bpl.n	6eee <__aeabi_dadd+0x17e>
    6e94:	4b96      	ldr	r3, [pc, #600]	; (70f0 <__aeabi_dadd+0x380>)
    6e96:	3601      	adds	r6, #1
    6e98:	429e      	cmp	r6, r3
    6e9a:	d100      	bne.n	6e9e <__aeabi_dadd+0x12e>
    6e9c:	e09a      	b.n	6fd4 <__aeabi_dadd+0x264>
    6e9e:	4645      	mov	r5, r8
    6ea0:	4b94      	ldr	r3, [pc, #592]	; (70f4 <__aeabi_dadd+0x384>)
    6ea2:	08ff      	lsrs	r7, r7, #3
    6ea4:	401c      	ands	r4, r3
    6ea6:	0760      	lsls	r0, r4, #29
    6ea8:	0576      	lsls	r6, r6, #21
    6eaa:	0264      	lsls	r4, r4, #9
    6eac:	4307      	orrs	r7, r0
    6eae:	0b24      	lsrs	r4, r4, #12
    6eb0:	0d76      	lsrs	r6, r6, #21
    6eb2:	2100      	movs	r1, #0
    6eb4:	0324      	lsls	r4, r4, #12
    6eb6:	0b23      	lsrs	r3, r4, #12
    6eb8:	0d0c      	lsrs	r4, r1, #20
    6eba:	4a8f      	ldr	r2, [pc, #572]	; (70f8 <__aeabi_dadd+0x388>)
    6ebc:	0524      	lsls	r4, r4, #20
    6ebe:	431c      	orrs	r4, r3
    6ec0:	4014      	ands	r4, r2
    6ec2:	0533      	lsls	r3, r6, #20
    6ec4:	4323      	orrs	r3, r4
    6ec6:	005b      	lsls	r3, r3, #1
    6ec8:	07ed      	lsls	r5, r5, #31
    6eca:	085b      	lsrs	r3, r3, #1
    6ecc:	432b      	orrs	r3, r5
    6ece:	0038      	movs	r0, r7
    6ed0:	0019      	movs	r1, r3
    6ed2:	bc3c      	pop	{r2, r3, r4, r5}
    6ed4:	4690      	mov	r8, r2
    6ed6:	4699      	mov	r9, r3
    6ed8:	46a2      	mov	sl, r4
    6eda:	46ab      	mov	fp, r5
    6edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ede:	4664      	mov	r4, ip
    6ee0:	4304      	orrs	r4, r0
    6ee2:	d100      	bne.n	6ee6 <__aeabi_dadd+0x176>
    6ee4:	e211      	b.n	730a <__aeabi_dadd+0x59a>
    6ee6:	0004      	movs	r4, r0
    6ee8:	4667      	mov	r7, ip
    6eea:	077b      	lsls	r3, r7, #29
    6eec:	d1c6      	bne.n	6e7c <__aeabi_dadd+0x10c>
    6eee:	4645      	mov	r5, r8
    6ef0:	0760      	lsls	r0, r4, #29
    6ef2:	08ff      	lsrs	r7, r7, #3
    6ef4:	4307      	orrs	r7, r0
    6ef6:	08e4      	lsrs	r4, r4, #3
    6ef8:	4b7d      	ldr	r3, [pc, #500]	; (70f0 <__aeabi_dadd+0x380>)
    6efa:	429e      	cmp	r6, r3
    6efc:	d030      	beq.n	6f60 <__aeabi_dadd+0x1f0>
    6efe:	0324      	lsls	r4, r4, #12
    6f00:	0576      	lsls	r6, r6, #21
    6f02:	0b24      	lsrs	r4, r4, #12
    6f04:	0d76      	lsrs	r6, r6, #21
    6f06:	e7d4      	b.n	6eb2 <__aeabi_dadd+0x142>
    6f08:	1a33      	subs	r3, r6, r0
    6f0a:	469a      	mov	sl, r3
    6f0c:	2b00      	cmp	r3, #0
    6f0e:	dd78      	ble.n	7002 <__aeabi_dadd+0x292>
    6f10:	2800      	cmp	r0, #0
    6f12:	d031      	beq.n	6f78 <__aeabi_dadd+0x208>
    6f14:	4876      	ldr	r0, [pc, #472]	; (70f0 <__aeabi_dadd+0x380>)
    6f16:	4286      	cmp	r6, r0
    6f18:	d0ae      	beq.n	6e78 <__aeabi_dadd+0x108>
    6f1a:	2080      	movs	r0, #128	; 0x80
    6f1c:	0400      	lsls	r0, r0, #16
    6f1e:	4301      	orrs	r1, r0
    6f20:	4653      	mov	r3, sl
    6f22:	2b38      	cmp	r3, #56	; 0x38
    6f24:	dc00      	bgt.n	6f28 <__aeabi_dadd+0x1b8>
    6f26:	e0e9      	b.n	70fc <__aeabi_dadd+0x38c>
    6f28:	430a      	orrs	r2, r1
    6f2a:	1e51      	subs	r1, r2, #1
    6f2c:	418a      	sbcs	r2, r1
    6f2e:	2100      	movs	r1, #0
    6f30:	19d2      	adds	r2, r2, r7
    6f32:	42ba      	cmp	r2, r7
    6f34:	41bf      	sbcs	r7, r7
    6f36:	1909      	adds	r1, r1, r4
    6f38:	427c      	negs	r4, r7
    6f3a:	0017      	movs	r7, r2
    6f3c:	190c      	adds	r4, r1, r4
    6f3e:	0223      	lsls	r3, r4, #8
    6f40:	d5d3      	bpl.n	6eea <__aeabi_dadd+0x17a>
    6f42:	4b6b      	ldr	r3, [pc, #428]	; (70f0 <__aeabi_dadd+0x380>)
    6f44:	3601      	adds	r6, #1
    6f46:	429e      	cmp	r6, r3
    6f48:	d100      	bne.n	6f4c <__aeabi_dadd+0x1dc>
    6f4a:	e13a      	b.n	71c2 <__aeabi_dadd+0x452>
    6f4c:	2001      	movs	r0, #1
    6f4e:	4b69      	ldr	r3, [pc, #420]	; (70f4 <__aeabi_dadd+0x384>)
    6f50:	401c      	ands	r4, r3
    6f52:	087b      	lsrs	r3, r7, #1
    6f54:	4007      	ands	r7, r0
    6f56:	431f      	orrs	r7, r3
    6f58:	07e0      	lsls	r0, r4, #31
    6f5a:	4307      	orrs	r7, r0
    6f5c:	0864      	lsrs	r4, r4, #1
    6f5e:	e78b      	b.n	6e78 <__aeabi_dadd+0x108>
    6f60:	0023      	movs	r3, r4
    6f62:	433b      	orrs	r3, r7
    6f64:	d100      	bne.n	6f68 <__aeabi_dadd+0x1f8>
    6f66:	e1cb      	b.n	7300 <__aeabi_dadd+0x590>
    6f68:	2280      	movs	r2, #128	; 0x80
    6f6a:	0312      	lsls	r2, r2, #12
    6f6c:	4314      	orrs	r4, r2
    6f6e:	0324      	lsls	r4, r4, #12
    6f70:	0b24      	lsrs	r4, r4, #12
    6f72:	e79e      	b.n	6eb2 <__aeabi_dadd+0x142>
    6f74:	002e      	movs	r6, r5
    6f76:	e77f      	b.n	6e78 <__aeabi_dadd+0x108>
    6f78:	0008      	movs	r0, r1
    6f7a:	4310      	orrs	r0, r2
    6f7c:	d100      	bne.n	6f80 <__aeabi_dadd+0x210>
    6f7e:	e0b4      	b.n	70ea <__aeabi_dadd+0x37a>
    6f80:	1e58      	subs	r0, r3, #1
    6f82:	2800      	cmp	r0, #0
    6f84:	d000      	beq.n	6f88 <__aeabi_dadd+0x218>
    6f86:	e0de      	b.n	7146 <__aeabi_dadd+0x3d6>
    6f88:	18ba      	adds	r2, r7, r2
    6f8a:	42ba      	cmp	r2, r7
    6f8c:	419b      	sbcs	r3, r3
    6f8e:	1864      	adds	r4, r4, r1
    6f90:	425b      	negs	r3, r3
    6f92:	18e4      	adds	r4, r4, r3
    6f94:	0017      	movs	r7, r2
    6f96:	2601      	movs	r6, #1
    6f98:	0223      	lsls	r3, r4, #8
    6f9a:	d5a6      	bpl.n	6eea <__aeabi_dadd+0x17a>
    6f9c:	2602      	movs	r6, #2
    6f9e:	e7d5      	b.n	6f4c <__aeabi_dadd+0x1dc>
    6fa0:	2d00      	cmp	r5, #0
    6fa2:	d16e      	bne.n	7082 <__aeabi_dadd+0x312>
    6fa4:	1c70      	adds	r0, r6, #1
    6fa6:	0540      	lsls	r0, r0, #21
    6fa8:	0d40      	lsrs	r0, r0, #21
    6faa:	2801      	cmp	r0, #1
    6fac:	dc00      	bgt.n	6fb0 <__aeabi_dadd+0x240>
    6fae:	e0f9      	b.n	71a4 <__aeabi_dadd+0x434>
    6fb0:	1ab8      	subs	r0, r7, r2
    6fb2:	4684      	mov	ip, r0
    6fb4:	4287      	cmp	r7, r0
    6fb6:	4180      	sbcs	r0, r0
    6fb8:	1ae5      	subs	r5, r4, r3
    6fba:	4240      	negs	r0, r0
    6fbc:	1a2d      	subs	r5, r5, r0
    6fbe:	0228      	lsls	r0, r5, #8
    6fc0:	d400      	bmi.n	6fc4 <__aeabi_dadd+0x254>
    6fc2:	e089      	b.n	70d8 <__aeabi_dadd+0x368>
    6fc4:	1bd7      	subs	r7, r2, r7
    6fc6:	42ba      	cmp	r2, r7
    6fc8:	4192      	sbcs	r2, r2
    6fca:	1b1c      	subs	r4, r3, r4
    6fcc:	4252      	negs	r2, r2
    6fce:	1aa5      	subs	r5, r4, r2
    6fd0:	46d8      	mov	r8, fp
    6fd2:	e729      	b.n	6e28 <__aeabi_dadd+0xb8>
    6fd4:	4645      	mov	r5, r8
    6fd6:	2400      	movs	r4, #0
    6fd8:	2700      	movs	r7, #0
    6fda:	e76a      	b.n	6eb2 <__aeabi_dadd+0x142>
    6fdc:	4c45      	ldr	r4, [pc, #276]	; (70f4 <__aeabi_dadd+0x384>)
    6fde:	1af6      	subs	r6, r6, r3
    6fe0:	402c      	ands	r4, r5
    6fe2:	e749      	b.n	6e78 <__aeabi_dadd+0x108>
    6fe4:	003d      	movs	r5, r7
    6fe6:	3828      	subs	r0, #40	; 0x28
    6fe8:	4085      	lsls	r5, r0
    6fea:	2700      	movs	r7, #0
    6fec:	e72e      	b.n	6e4c <__aeabi_dadd+0xdc>
    6fee:	0038      	movs	r0, r7
    6ff0:	f001 fd42 	bl	8a78 <__clzsi2>
    6ff4:	3020      	adds	r0, #32
    6ff6:	e71d      	b.n	6e34 <__aeabi_dadd+0xc4>
    6ff8:	430a      	orrs	r2, r1
    6ffa:	1e51      	subs	r1, r2, #1
    6ffc:	418a      	sbcs	r2, r1
    6ffe:	2100      	movs	r1, #0
    7000:	e707      	b.n	6e12 <__aeabi_dadd+0xa2>
    7002:	2b00      	cmp	r3, #0
    7004:	d000      	beq.n	7008 <__aeabi_dadd+0x298>
    7006:	e0f3      	b.n	71f0 <__aeabi_dadd+0x480>
    7008:	1c70      	adds	r0, r6, #1
    700a:	0543      	lsls	r3, r0, #21
    700c:	0d5b      	lsrs	r3, r3, #21
    700e:	2b01      	cmp	r3, #1
    7010:	dc00      	bgt.n	7014 <__aeabi_dadd+0x2a4>
    7012:	e0ad      	b.n	7170 <__aeabi_dadd+0x400>
    7014:	4b36      	ldr	r3, [pc, #216]	; (70f0 <__aeabi_dadd+0x380>)
    7016:	4298      	cmp	r0, r3
    7018:	d100      	bne.n	701c <__aeabi_dadd+0x2ac>
    701a:	e0d1      	b.n	71c0 <__aeabi_dadd+0x450>
    701c:	18ba      	adds	r2, r7, r2
    701e:	42ba      	cmp	r2, r7
    7020:	41bf      	sbcs	r7, r7
    7022:	1864      	adds	r4, r4, r1
    7024:	427f      	negs	r7, r7
    7026:	19e4      	adds	r4, r4, r7
    7028:	07e7      	lsls	r7, r4, #31
    702a:	0852      	lsrs	r2, r2, #1
    702c:	4317      	orrs	r7, r2
    702e:	0864      	lsrs	r4, r4, #1
    7030:	0006      	movs	r6, r0
    7032:	e721      	b.n	6e78 <__aeabi_dadd+0x108>
    7034:	482e      	ldr	r0, [pc, #184]	; (70f0 <__aeabi_dadd+0x380>)
    7036:	4285      	cmp	r5, r0
    7038:	d100      	bne.n	703c <__aeabi_dadd+0x2cc>
    703a:	e093      	b.n	7164 <__aeabi_dadd+0x3f4>
    703c:	001d      	movs	r5, r3
    703e:	e6d0      	b.n	6de2 <__aeabi_dadd+0x72>
    7040:	0029      	movs	r1, r5
    7042:	3e1f      	subs	r6, #31
    7044:	40f1      	lsrs	r1, r6
    7046:	2b20      	cmp	r3, #32
    7048:	d100      	bne.n	704c <__aeabi_dadd+0x2dc>
    704a:	e08d      	b.n	7168 <__aeabi_dadd+0x3f8>
    704c:	2240      	movs	r2, #64	; 0x40
    704e:	1ad3      	subs	r3, r2, r3
    7050:	409d      	lsls	r5, r3
    7052:	432f      	orrs	r7, r5
    7054:	1e7d      	subs	r5, r7, #1
    7056:	41af      	sbcs	r7, r5
    7058:	2400      	movs	r4, #0
    705a:	430f      	orrs	r7, r1
    705c:	2600      	movs	r6, #0
    705e:	e744      	b.n	6eea <__aeabi_dadd+0x17a>
    7060:	002b      	movs	r3, r5
    7062:	0008      	movs	r0, r1
    7064:	3b20      	subs	r3, #32
    7066:	40d8      	lsrs	r0, r3
    7068:	0003      	movs	r3, r0
    706a:	2d20      	cmp	r5, #32
    706c:	d100      	bne.n	7070 <__aeabi_dadd+0x300>
    706e:	e07d      	b.n	716c <__aeabi_dadd+0x3fc>
    7070:	2040      	movs	r0, #64	; 0x40
    7072:	1b45      	subs	r5, r0, r5
    7074:	40a9      	lsls	r1, r5
    7076:	430a      	orrs	r2, r1
    7078:	1e51      	subs	r1, r2, #1
    707a:	418a      	sbcs	r2, r1
    707c:	2100      	movs	r1, #0
    707e:	431a      	orrs	r2, r3
    7080:	e6c7      	b.n	6e12 <__aeabi_dadd+0xa2>
    7082:	2e00      	cmp	r6, #0
    7084:	d050      	beq.n	7128 <__aeabi_dadd+0x3b8>
    7086:	4e1a      	ldr	r6, [pc, #104]	; (70f0 <__aeabi_dadd+0x380>)
    7088:	42b0      	cmp	r0, r6
    708a:	d057      	beq.n	713c <__aeabi_dadd+0x3cc>
    708c:	2680      	movs	r6, #128	; 0x80
    708e:	426b      	negs	r3, r5
    7090:	4699      	mov	r9, r3
    7092:	0436      	lsls	r6, r6, #16
    7094:	4334      	orrs	r4, r6
    7096:	464b      	mov	r3, r9
    7098:	2b38      	cmp	r3, #56	; 0x38
    709a:	dd00      	ble.n	709e <__aeabi_dadd+0x32e>
    709c:	e0d6      	b.n	724c <__aeabi_dadd+0x4dc>
    709e:	2b1f      	cmp	r3, #31
    70a0:	dd00      	ble.n	70a4 <__aeabi_dadd+0x334>
    70a2:	e135      	b.n	7310 <__aeabi_dadd+0x5a0>
    70a4:	2620      	movs	r6, #32
    70a6:	1af5      	subs	r5, r6, r3
    70a8:	0026      	movs	r6, r4
    70aa:	40ae      	lsls	r6, r5
    70ac:	46b2      	mov	sl, r6
    70ae:	003e      	movs	r6, r7
    70b0:	40de      	lsrs	r6, r3
    70b2:	46ac      	mov	ip, r5
    70b4:	0035      	movs	r5, r6
    70b6:	4656      	mov	r6, sl
    70b8:	432e      	orrs	r6, r5
    70ba:	4665      	mov	r5, ip
    70bc:	40af      	lsls	r7, r5
    70be:	1e7d      	subs	r5, r7, #1
    70c0:	41af      	sbcs	r7, r5
    70c2:	40dc      	lsrs	r4, r3
    70c4:	4337      	orrs	r7, r6
    70c6:	1bd7      	subs	r7, r2, r7
    70c8:	42ba      	cmp	r2, r7
    70ca:	4192      	sbcs	r2, r2
    70cc:	1b0c      	subs	r4, r1, r4
    70ce:	4252      	negs	r2, r2
    70d0:	1aa4      	subs	r4, r4, r2
    70d2:	0006      	movs	r6, r0
    70d4:	46d8      	mov	r8, fp
    70d6:	e6a3      	b.n	6e20 <__aeabi_dadd+0xb0>
    70d8:	4664      	mov	r4, ip
    70da:	4667      	mov	r7, ip
    70dc:	432c      	orrs	r4, r5
    70de:	d000      	beq.n	70e2 <__aeabi_dadd+0x372>
    70e0:	e6a2      	b.n	6e28 <__aeabi_dadd+0xb8>
    70e2:	2500      	movs	r5, #0
    70e4:	2600      	movs	r6, #0
    70e6:	2700      	movs	r7, #0
    70e8:	e706      	b.n	6ef8 <__aeabi_dadd+0x188>
    70ea:	001e      	movs	r6, r3
    70ec:	e6c4      	b.n	6e78 <__aeabi_dadd+0x108>
    70ee:	46c0      	nop			; (mov r8, r8)
    70f0:	000007ff 	.word	0x000007ff
    70f4:	ff7fffff 	.word	0xff7fffff
    70f8:	800fffff 	.word	0x800fffff
    70fc:	2b1f      	cmp	r3, #31
    70fe:	dc63      	bgt.n	71c8 <__aeabi_dadd+0x458>
    7100:	2020      	movs	r0, #32
    7102:	1ac3      	subs	r3, r0, r3
    7104:	0008      	movs	r0, r1
    7106:	4098      	lsls	r0, r3
    7108:	469c      	mov	ip, r3
    710a:	4683      	mov	fp, r0
    710c:	4653      	mov	r3, sl
    710e:	0010      	movs	r0, r2
    7110:	40d8      	lsrs	r0, r3
    7112:	0003      	movs	r3, r0
    7114:	4658      	mov	r0, fp
    7116:	4318      	orrs	r0, r3
    7118:	4663      	mov	r3, ip
    711a:	409a      	lsls	r2, r3
    711c:	1e53      	subs	r3, r2, #1
    711e:	419a      	sbcs	r2, r3
    7120:	4653      	mov	r3, sl
    7122:	4302      	orrs	r2, r0
    7124:	40d9      	lsrs	r1, r3
    7126:	e703      	b.n	6f30 <__aeabi_dadd+0x1c0>
    7128:	0026      	movs	r6, r4
    712a:	433e      	orrs	r6, r7
    712c:	d006      	beq.n	713c <__aeabi_dadd+0x3cc>
    712e:	43eb      	mvns	r3, r5
    7130:	4699      	mov	r9, r3
    7132:	2b00      	cmp	r3, #0
    7134:	d0c7      	beq.n	70c6 <__aeabi_dadd+0x356>
    7136:	4e94      	ldr	r6, [pc, #592]	; (7388 <__aeabi_dadd+0x618>)
    7138:	42b0      	cmp	r0, r6
    713a:	d1ac      	bne.n	7096 <__aeabi_dadd+0x326>
    713c:	000c      	movs	r4, r1
    713e:	0017      	movs	r7, r2
    7140:	0006      	movs	r6, r0
    7142:	46d8      	mov	r8, fp
    7144:	e698      	b.n	6e78 <__aeabi_dadd+0x108>
    7146:	4b90      	ldr	r3, [pc, #576]	; (7388 <__aeabi_dadd+0x618>)
    7148:	459a      	cmp	sl, r3
    714a:	d00b      	beq.n	7164 <__aeabi_dadd+0x3f4>
    714c:	4682      	mov	sl, r0
    714e:	e6e7      	b.n	6f20 <__aeabi_dadd+0x1b0>
    7150:	2800      	cmp	r0, #0
    7152:	d000      	beq.n	7156 <__aeabi_dadd+0x3e6>
    7154:	e09e      	b.n	7294 <__aeabi_dadd+0x524>
    7156:	0018      	movs	r0, r3
    7158:	4310      	orrs	r0, r2
    715a:	d100      	bne.n	715e <__aeabi_dadd+0x3ee>
    715c:	e0e9      	b.n	7332 <__aeabi_dadd+0x5c2>
    715e:	001c      	movs	r4, r3
    7160:	0017      	movs	r7, r2
    7162:	46d8      	mov	r8, fp
    7164:	4e88      	ldr	r6, [pc, #544]	; (7388 <__aeabi_dadd+0x618>)
    7166:	e687      	b.n	6e78 <__aeabi_dadd+0x108>
    7168:	2500      	movs	r5, #0
    716a:	e772      	b.n	7052 <__aeabi_dadd+0x2e2>
    716c:	2100      	movs	r1, #0
    716e:	e782      	b.n	7076 <__aeabi_dadd+0x306>
    7170:	0023      	movs	r3, r4
    7172:	433b      	orrs	r3, r7
    7174:	2e00      	cmp	r6, #0
    7176:	d000      	beq.n	717a <__aeabi_dadd+0x40a>
    7178:	e0ab      	b.n	72d2 <__aeabi_dadd+0x562>
    717a:	2b00      	cmp	r3, #0
    717c:	d100      	bne.n	7180 <__aeabi_dadd+0x410>
    717e:	e0e7      	b.n	7350 <__aeabi_dadd+0x5e0>
    7180:	000b      	movs	r3, r1
    7182:	4313      	orrs	r3, r2
    7184:	d100      	bne.n	7188 <__aeabi_dadd+0x418>
    7186:	e677      	b.n	6e78 <__aeabi_dadd+0x108>
    7188:	18ba      	adds	r2, r7, r2
    718a:	42ba      	cmp	r2, r7
    718c:	41bf      	sbcs	r7, r7
    718e:	1864      	adds	r4, r4, r1
    7190:	427f      	negs	r7, r7
    7192:	19e4      	adds	r4, r4, r7
    7194:	0223      	lsls	r3, r4, #8
    7196:	d400      	bmi.n	719a <__aeabi_dadd+0x42a>
    7198:	e0f2      	b.n	7380 <__aeabi_dadd+0x610>
    719a:	4b7c      	ldr	r3, [pc, #496]	; (738c <__aeabi_dadd+0x61c>)
    719c:	0017      	movs	r7, r2
    719e:	401c      	ands	r4, r3
    71a0:	0006      	movs	r6, r0
    71a2:	e669      	b.n	6e78 <__aeabi_dadd+0x108>
    71a4:	0020      	movs	r0, r4
    71a6:	4338      	orrs	r0, r7
    71a8:	2e00      	cmp	r6, #0
    71aa:	d1d1      	bne.n	7150 <__aeabi_dadd+0x3e0>
    71ac:	2800      	cmp	r0, #0
    71ae:	d15b      	bne.n	7268 <__aeabi_dadd+0x4f8>
    71b0:	001c      	movs	r4, r3
    71b2:	4314      	orrs	r4, r2
    71b4:	d100      	bne.n	71b8 <__aeabi_dadd+0x448>
    71b6:	e0a8      	b.n	730a <__aeabi_dadd+0x59a>
    71b8:	001c      	movs	r4, r3
    71ba:	0017      	movs	r7, r2
    71bc:	46d8      	mov	r8, fp
    71be:	e65b      	b.n	6e78 <__aeabi_dadd+0x108>
    71c0:	0006      	movs	r6, r0
    71c2:	2400      	movs	r4, #0
    71c4:	2700      	movs	r7, #0
    71c6:	e697      	b.n	6ef8 <__aeabi_dadd+0x188>
    71c8:	4650      	mov	r0, sl
    71ca:	000b      	movs	r3, r1
    71cc:	3820      	subs	r0, #32
    71ce:	40c3      	lsrs	r3, r0
    71d0:	4699      	mov	r9, r3
    71d2:	4653      	mov	r3, sl
    71d4:	2b20      	cmp	r3, #32
    71d6:	d100      	bne.n	71da <__aeabi_dadd+0x46a>
    71d8:	e095      	b.n	7306 <__aeabi_dadd+0x596>
    71da:	2340      	movs	r3, #64	; 0x40
    71dc:	4650      	mov	r0, sl
    71de:	1a1b      	subs	r3, r3, r0
    71e0:	4099      	lsls	r1, r3
    71e2:	430a      	orrs	r2, r1
    71e4:	1e51      	subs	r1, r2, #1
    71e6:	418a      	sbcs	r2, r1
    71e8:	464b      	mov	r3, r9
    71ea:	2100      	movs	r1, #0
    71ec:	431a      	orrs	r2, r3
    71ee:	e69f      	b.n	6f30 <__aeabi_dadd+0x1c0>
    71f0:	2e00      	cmp	r6, #0
    71f2:	d130      	bne.n	7256 <__aeabi_dadd+0x4e6>
    71f4:	0026      	movs	r6, r4
    71f6:	433e      	orrs	r6, r7
    71f8:	d067      	beq.n	72ca <__aeabi_dadd+0x55a>
    71fa:	43db      	mvns	r3, r3
    71fc:	469a      	mov	sl, r3
    71fe:	2b00      	cmp	r3, #0
    7200:	d01c      	beq.n	723c <__aeabi_dadd+0x4cc>
    7202:	4e61      	ldr	r6, [pc, #388]	; (7388 <__aeabi_dadd+0x618>)
    7204:	42b0      	cmp	r0, r6
    7206:	d060      	beq.n	72ca <__aeabi_dadd+0x55a>
    7208:	4653      	mov	r3, sl
    720a:	2b38      	cmp	r3, #56	; 0x38
    720c:	dd00      	ble.n	7210 <__aeabi_dadd+0x4a0>
    720e:	e096      	b.n	733e <__aeabi_dadd+0x5ce>
    7210:	2b1f      	cmp	r3, #31
    7212:	dd00      	ble.n	7216 <__aeabi_dadd+0x4a6>
    7214:	e09f      	b.n	7356 <__aeabi_dadd+0x5e6>
    7216:	2620      	movs	r6, #32
    7218:	1af3      	subs	r3, r6, r3
    721a:	0026      	movs	r6, r4
    721c:	409e      	lsls	r6, r3
    721e:	469c      	mov	ip, r3
    7220:	46b3      	mov	fp, r6
    7222:	4653      	mov	r3, sl
    7224:	003e      	movs	r6, r7
    7226:	40de      	lsrs	r6, r3
    7228:	0033      	movs	r3, r6
    722a:	465e      	mov	r6, fp
    722c:	431e      	orrs	r6, r3
    722e:	4663      	mov	r3, ip
    7230:	409f      	lsls	r7, r3
    7232:	1e7b      	subs	r3, r7, #1
    7234:	419f      	sbcs	r7, r3
    7236:	4653      	mov	r3, sl
    7238:	40dc      	lsrs	r4, r3
    723a:	4337      	orrs	r7, r6
    723c:	18bf      	adds	r7, r7, r2
    723e:	4297      	cmp	r7, r2
    7240:	4192      	sbcs	r2, r2
    7242:	1864      	adds	r4, r4, r1
    7244:	4252      	negs	r2, r2
    7246:	18a4      	adds	r4, r4, r2
    7248:	0006      	movs	r6, r0
    724a:	e678      	b.n	6f3e <__aeabi_dadd+0x1ce>
    724c:	4327      	orrs	r7, r4
    724e:	1e7c      	subs	r4, r7, #1
    7250:	41a7      	sbcs	r7, r4
    7252:	2400      	movs	r4, #0
    7254:	e737      	b.n	70c6 <__aeabi_dadd+0x356>
    7256:	4e4c      	ldr	r6, [pc, #304]	; (7388 <__aeabi_dadd+0x618>)
    7258:	42b0      	cmp	r0, r6
    725a:	d036      	beq.n	72ca <__aeabi_dadd+0x55a>
    725c:	2680      	movs	r6, #128	; 0x80
    725e:	425b      	negs	r3, r3
    7260:	0436      	lsls	r6, r6, #16
    7262:	469a      	mov	sl, r3
    7264:	4334      	orrs	r4, r6
    7266:	e7cf      	b.n	7208 <__aeabi_dadd+0x498>
    7268:	0018      	movs	r0, r3
    726a:	4310      	orrs	r0, r2
    726c:	d100      	bne.n	7270 <__aeabi_dadd+0x500>
    726e:	e603      	b.n	6e78 <__aeabi_dadd+0x108>
    7270:	1ab8      	subs	r0, r7, r2
    7272:	4684      	mov	ip, r0
    7274:	4567      	cmp	r7, ip
    7276:	41ad      	sbcs	r5, r5
    7278:	1ae0      	subs	r0, r4, r3
    727a:	426d      	negs	r5, r5
    727c:	1b40      	subs	r0, r0, r5
    727e:	0205      	lsls	r5, r0, #8
    7280:	d400      	bmi.n	7284 <__aeabi_dadd+0x514>
    7282:	e62c      	b.n	6ede <__aeabi_dadd+0x16e>
    7284:	1bd7      	subs	r7, r2, r7
    7286:	42ba      	cmp	r2, r7
    7288:	4192      	sbcs	r2, r2
    728a:	1b1c      	subs	r4, r3, r4
    728c:	4252      	negs	r2, r2
    728e:	1aa4      	subs	r4, r4, r2
    7290:	46d8      	mov	r8, fp
    7292:	e5f1      	b.n	6e78 <__aeabi_dadd+0x108>
    7294:	0018      	movs	r0, r3
    7296:	4310      	orrs	r0, r2
    7298:	d100      	bne.n	729c <__aeabi_dadd+0x52c>
    729a:	e763      	b.n	7164 <__aeabi_dadd+0x3f4>
    729c:	08f8      	lsrs	r0, r7, #3
    729e:	0767      	lsls	r7, r4, #29
    72a0:	4307      	orrs	r7, r0
    72a2:	2080      	movs	r0, #128	; 0x80
    72a4:	08e4      	lsrs	r4, r4, #3
    72a6:	0300      	lsls	r0, r0, #12
    72a8:	4204      	tst	r4, r0
    72aa:	d008      	beq.n	72be <__aeabi_dadd+0x54e>
    72ac:	08dd      	lsrs	r5, r3, #3
    72ae:	4205      	tst	r5, r0
    72b0:	d105      	bne.n	72be <__aeabi_dadd+0x54e>
    72b2:	08d2      	lsrs	r2, r2, #3
    72b4:	0759      	lsls	r1, r3, #29
    72b6:	4311      	orrs	r1, r2
    72b8:	000f      	movs	r7, r1
    72ba:	002c      	movs	r4, r5
    72bc:	46d8      	mov	r8, fp
    72be:	0f7b      	lsrs	r3, r7, #29
    72c0:	00e4      	lsls	r4, r4, #3
    72c2:	431c      	orrs	r4, r3
    72c4:	00ff      	lsls	r7, r7, #3
    72c6:	4e30      	ldr	r6, [pc, #192]	; (7388 <__aeabi_dadd+0x618>)
    72c8:	e5d6      	b.n	6e78 <__aeabi_dadd+0x108>
    72ca:	000c      	movs	r4, r1
    72cc:	0017      	movs	r7, r2
    72ce:	0006      	movs	r6, r0
    72d0:	e5d2      	b.n	6e78 <__aeabi_dadd+0x108>
    72d2:	2b00      	cmp	r3, #0
    72d4:	d038      	beq.n	7348 <__aeabi_dadd+0x5d8>
    72d6:	000b      	movs	r3, r1
    72d8:	4313      	orrs	r3, r2
    72da:	d100      	bne.n	72de <__aeabi_dadd+0x56e>
    72dc:	e742      	b.n	7164 <__aeabi_dadd+0x3f4>
    72de:	08f8      	lsrs	r0, r7, #3
    72e0:	0767      	lsls	r7, r4, #29
    72e2:	4307      	orrs	r7, r0
    72e4:	2080      	movs	r0, #128	; 0x80
    72e6:	08e4      	lsrs	r4, r4, #3
    72e8:	0300      	lsls	r0, r0, #12
    72ea:	4204      	tst	r4, r0
    72ec:	d0e7      	beq.n	72be <__aeabi_dadd+0x54e>
    72ee:	08cb      	lsrs	r3, r1, #3
    72f0:	4203      	tst	r3, r0
    72f2:	d1e4      	bne.n	72be <__aeabi_dadd+0x54e>
    72f4:	08d2      	lsrs	r2, r2, #3
    72f6:	0749      	lsls	r1, r1, #29
    72f8:	4311      	orrs	r1, r2
    72fa:	000f      	movs	r7, r1
    72fc:	001c      	movs	r4, r3
    72fe:	e7de      	b.n	72be <__aeabi_dadd+0x54e>
    7300:	2700      	movs	r7, #0
    7302:	2400      	movs	r4, #0
    7304:	e5d5      	b.n	6eb2 <__aeabi_dadd+0x142>
    7306:	2100      	movs	r1, #0
    7308:	e76b      	b.n	71e2 <__aeabi_dadd+0x472>
    730a:	2500      	movs	r5, #0
    730c:	2700      	movs	r7, #0
    730e:	e5f3      	b.n	6ef8 <__aeabi_dadd+0x188>
    7310:	464e      	mov	r6, r9
    7312:	0025      	movs	r5, r4
    7314:	3e20      	subs	r6, #32
    7316:	40f5      	lsrs	r5, r6
    7318:	464b      	mov	r3, r9
    731a:	002e      	movs	r6, r5
    731c:	2b20      	cmp	r3, #32
    731e:	d02d      	beq.n	737c <__aeabi_dadd+0x60c>
    7320:	2540      	movs	r5, #64	; 0x40
    7322:	1aed      	subs	r5, r5, r3
    7324:	40ac      	lsls	r4, r5
    7326:	4327      	orrs	r7, r4
    7328:	1e7c      	subs	r4, r7, #1
    732a:	41a7      	sbcs	r7, r4
    732c:	2400      	movs	r4, #0
    732e:	4337      	orrs	r7, r6
    7330:	e6c9      	b.n	70c6 <__aeabi_dadd+0x356>
    7332:	2480      	movs	r4, #128	; 0x80
    7334:	2500      	movs	r5, #0
    7336:	0324      	lsls	r4, r4, #12
    7338:	4e13      	ldr	r6, [pc, #76]	; (7388 <__aeabi_dadd+0x618>)
    733a:	2700      	movs	r7, #0
    733c:	e5dc      	b.n	6ef8 <__aeabi_dadd+0x188>
    733e:	4327      	orrs	r7, r4
    7340:	1e7c      	subs	r4, r7, #1
    7342:	41a7      	sbcs	r7, r4
    7344:	2400      	movs	r4, #0
    7346:	e779      	b.n	723c <__aeabi_dadd+0x4cc>
    7348:	000c      	movs	r4, r1
    734a:	0017      	movs	r7, r2
    734c:	4e0e      	ldr	r6, [pc, #56]	; (7388 <__aeabi_dadd+0x618>)
    734e:	e593      	b.n	6e78 <__aeabi_dadd+0x108>
    7350:	000c      	movs	r4, r1
    7352:	0017      	movs	r7, r2
    7354:	e590      	b.n	6e78 <__aeabi_dadd+0x108>
    7356:	4656      	mov	r6, sl
    7358:	0023      	movs	r3, r4
    735a:	3e20      	subs	r6, #32
    735c:	40f3      	lsrs	r3, r6
    735e:	4699      	mov	r9, r3
    7360:	4653      	mov	r3, sl
    7362:	2b20      	cmp	r3, #32
    7364:	d00e      	beq.n	7384 <__aeabi_dadd+0x614>
    7366:	2340      	movs	r3, #64	; 0x40
    7368:	4656      	mov	r6, sl
    736a:	1b9b      	subs	r3, r3, r6
    736c:	409c      	lsls	r4, r3
    736e:	4327      	orrs	r7, r4
    7370:	1e7c      	subs	r4, r7, #1
    7372:	41a7      	sbcs	r7, r4
    7374:	464b      	mov	r3, r9
    7376:	2400      	movs	r4, #0
    7378:	431f      	orrs	r7, r3
    737a:	e75f      	b.n	723c <__aeabi_dadd+0x4cc>
    737c:	2400      	movs	r4, #0
    737e:	e7d2      	b.n	7326 <__aeabi_dadd+0x5b6>
    7380:	0017      	movs	r7, r2
    7382:	e5b2      	b.n	6eea <__aeabi_dadd+0x17a>
    7384:	2400      	movs	r4, #0
    7386:	e7f2      	b.n	736e <__aeabi_dadd+0x5fe>
    7388:	000007ff 	.word	0x000007ff
    738c:	ff7fffff 	.word	0xff7fffff

00007390 <__aeabi_ddiv>:
    7390:	b5f0      	push	{r4, r5, r6, r7, lr}
    7392:	4657      	mov	r7, sl
    7394:	4645      	mov	r5, r8
    7396:	46de      	mov	lr, fp
    7398:	464e      	mov	r6, r9
    739a:	b5e0      	push	{r5, r6, r7, lr}
    739c:	004c      	lsls	r4, r1, #1
    739e:	030e      	lsls	r6, r1, #12
    73a0:	b087      	sub	sp, #28
    73a2:	4683      	mov	fp, r0
    73a4:	4692      	mov	sl, r2
    73a6:	001d      	movs	r5, r3
    73a8:	4680      	mov	r8, r0
    73aa:	0b36      	lsrs	r6, r6, #12
    73ac:	0d64      	lsrs	r4, r4, #21
    73ae:	0fcf      	lsrs	r7, r1, #31
    73b0:	2c00      	cmp	r4, #0
    73b2:	d04f      	beq.n	7454 <__aeabi_ddiv+0xc4>
    73b4:	4b6f      	ldr	r3, [pc, #444]	; (7574 <__aeabi_ddiv+0x1e4>)
    73b6:	429c      	cmp	r4, r3
    73b8:	d035      	beq.n	7426 <__aeabi_ddiv+0x96>
    73ba:	2380      	movs	r3, #128	; 0x80
    73bc:	0f42      	lsrs	r2, r0, #29
    73be:	041b      	lsls	r3, r3, #16
    73c0:	00f6      	lsls	r6, r6, #3
    73c2:	4313      	orrs	r3, r2
    73c4:	4333      	orrs	r3, r6
    73c6:	4699      	mov	r9, r3
    73c8:	00c3      	lsls	r3, r0, #3
    73ca:	4698      	mov	r8, r3
    73cc:	4b6a      	ldr	r3, [pc, #424]	; (7578 <__aeabi_ddiv+0x1e8>)
    73ce:	2600      	movs	r6, #0
    73d0:	469c      	mov	ip, r3
    73d2:	2300      	movs	r3, #0
    73d4:	4464      	add	r4, ip
    73d6:	9303      	str	r3, [sp, #12]
    73d8:	032b      	lsls	r3, r5, #12
    73da:	0b1b      	lsrs	r3, r3, #12
    73dc:	469b      	mov	fp, r3
    73de:	006b      	lsls	r3, r5, #1
    73e0:	0fed      	lsrs	r5, r5, #31
    73e2:	4650      	mov	r0, sl
    73e4:	0d5b      	lsrs	r3, r3, #21
    73e6:	9501      	str	r5, [sp, #4]
    73e8:	d05e      	beq.n	74a8 <__aeabi_ddiv+0x118>
    73ea:	4a62      	ldr	r2, [pc, #392]	; (7574 <__aeabi_ddiv+0x1e4>)
    73ec:	4293      	cmp	r3, r2
    73ee:	d053      	beq.n	7498 <__aeabi_ddiv+0x108>
    73f0:	465a      	mov	r2, fp
    73f2:	00d1      	lsls	r1, r2, #3
    73f4:	2280      	movs	r2, #128	; 0x80
    73f6:	0f40      	lsrs	r0, r0, #29
    73f8:	0412      	lsls	r2, r2, #16
    73fa:	4302      	orrs	r2, r0
    73fc:	430a      	orrs	r2, r1
    73fe:	4693      	mov	fp, r2
    7400:	4652      	mov	r2, sl
    7402:	00d1      	lsls	r1, r2, #3
    7404:	4a5c      	ldr	r2, [pc, #368]	; (7578 <__aeabi_ddiv+0x1e8>)
    7406:	4694      	mov	ip, r2
    7408:	2200      	movs	r2, #0
    740a:	4463      	add	r3, ip
    740c:	0038      	movs	r0, r7
    740e:	4068      	eors	r0, r5
    7410:	4684      	mov	ip, r0
    7412:	9002      	str	r0, [sp, #8]
    7414:	1ae4      	subs	r4, r4, r3
    7416:	4316      	orrs	r6, r2
    7418:	2e0f      	cmp	r6, #15
    741a:	d900      	bls.n	741e <__aeabi_ddiv+0x8e>
    741c:	e0b4      	b.n	7588 <__aeabi_ddiv+0x1f8>
    741e:	4b57      	ldr	r3, [pc, #348]	; (757c <__aeabi_ddiv+0x1ec>)
    7420:	00b6      	lsls	r6, r6, #2
    7422:	599b      	ldr	r3, [r3, r6]
    7424:	469f      	mov	pc, r3
    7426:	0003      	movs	r3, r0
    7428:	4333      	orrs	r3, r6
    742a:	4699      	mov	r9, r3
    742c:	d16c      	bne.n	7508 <__aeabi_ddiv+0x178>
    742e:	2300      	movs	r3, #0
    7430:	4698      	mov	r8, r3
    7432:	3302      	adds	r3, #2
    7434:	2608      	movs	r6, #8
    7436:	9303      	str	r3, [sp, #12]
    7438:	e7ce      	b.n	73d8 <__aeabi_ddiv+0x48>
    743a:	46cb      	mov	fp, r9
    743c:	4641      	mov	r1, r8
    743e:	9a03      	ldr	r2, [sp, #12]
    7440:	9701      	str	r7, [sp, #4]
    7442:	2a02      	cmp	r2, #2
    7444:	d165      	bne.n	7512 <__aeabi_ddiv+0x182>
    7446:	9b01      	ldr	r3, [sp, #4]
    7448:	4c4a      	ldr	r4, [pc, #296]	; (7574 <__aeabi_ddiv+0x1e4>)
    744a:	469c      	mov	ip, r3
    744c:	2300      	movs	r3, #0
    744e:	2200      	movs	r2, #0
    7450:	4698      	mov	r8, r3
    7452:	e06b      	b.n	752c <__aeabi_ddiv+0x19c>
    7454:	0003      	movs	r3, r0
    7456:	4333      	orrs	r3, r6
    7458:	4699      	mov	r9, r3
    745a:	d04e      	beq.n	74fa <__aeabi_ddiv+0x16a>
    745c:	2e00      	cmp	r6, #0
    745e:	d100      	bne.n	7462 <__aeabi_ddiv+0xd2>
    7460:	e1bc      	b.n	77dc <__aeabi_ddiv+0x44c>
    7462:	0030      	movs	r0, r6
    7464:	f001 fb08 	bl	8a78 <__clzsi2>
    7468:	0003      	movs	r3, r0
    746a:	3b0b      	subs	r3, #11
    746c:	2b1c      	cmp	r3, #28
    746e:	dd00      	ble.n	7472 <__aeabi_ddiv+0xe2>
    7470:	e1ac      	b.n	77cc <__aeabi_ddiv+0x43c>
    7472:	221d      	movs	r2, #29
    7474:	1ad3      	subs	r3, r2, r3
    7476:	465a      	mov	r2, fp
    7478:	0001      	movs	r1, r0
    747a:	40da      	lsrs	r2, r3
    747c:	3908      	subs	r1, #8
    747e:	408e      	lsls	r6, r1
    7480:	0013      	movs	r3, r2
    7482:	4333      	orrs	r3, r6
    7484:	4699      	mov	r9, r3
    7486:	465b      	mov	r3, fp
    7488:	408b      	lsls	r3, r1
    748a:	4698      	mov	r8, r3
    748c:	2300      	movs	r3, #0
    748e:	4c3c      	ldr	r4, [pc, #240]	; (7580 <__aeabi_ddiv+0x1f0>)
    7490:	2600      	movs	r6, #0
    7492:	1a24      	subs	r4, r4, r0
    7494:	9303      	str	r3, [sp, #12]
    7496:	e79f      	b.n	73d8 <__aeabi_ddiv+0x48>
    7498:	4651      	mov	r1, sl
    749a:	465a      	mov	r2, fp
    749c:	4311      	orrs	r1, r2
    749e:	d129      	bne.n	74f4 <__aeabi_ddiv+0x164>
    74a0:	2200      	movs	r2, #0
    74a2:	4693      	mov	fp, r2
    74a4:	3202      	adds	r2, #2
    74a6:	e7b1      	b.n	740c <__aeabi_ddiv+0x7c>
    74a8:	4659      	mov	r1, fp
    74aa:	4301      	orrs	r1, r0
    74ac:	d01e      	beq.n	74ec <__aeabi_ddiv+0x15c>
    74ae:	465b      	mov	r3, fp
    74b0:	2b00      	cmp	r3, #0
    74b2:	d100      	bne.n	74b6 <__aeabi_ddiv+0x126>
    74b4:	e19e      	b.n	77f4 <__aeabi_ddiv+0x464>
    74b6:	4658      	mov	r0, fp
    74b8:	f001 fade 	bl	8a78 <__clzsi2>
    74bc:	0003      	movs	r3, r0
    74be:	3b0b      	subs	r3, #11
    74c0:	2b1c      	cmp	r3, #28
    74c2:	dd00      	ble.n	74c6 <__aeabi_ddiv+0x136>
    74c4:	e18f      	b.n	77e6 <__aeabi_ddiv+0x456>
    74c6:	0002      	movs	r2, r0
    74c8:	4659      	mov	r1, fp
    74ca:	3a08      	subs	r2, #8
    74cc:	4091      	lsls	r1, r2
    74ce:	468b      	mov	fp, r1
    74d0:	211d      	movs	r1, #29
    74d2:	1acb      	subs	r3, r1, r3
    74d4:	4651      	mov	r1, sl
    74d6:	40d9      	lsrs	r1, r3
    74d8:	000b      	movs	r3, r1
    74da:	4659      	mov	r1, fp
    74dc:	430b      	orrs	r3, r1
    74de:	4651      	mov	r1, sl
    74e0:	469b      	mov	fp, r3
    74e2:	4091      	lsls	r1, r2
    74e4:	4b26      	ldr	r3, [pc, #152]	; (7580 <__aeabi_ddiv+0x1f0>)
    74e6:	2200      	movs	r2, #0
    74e8:	1a1b      	subs	r3, r3, r0
    74ea:	e78f      	b.n	740c <__aeabi_ddiv+0x7c>
    74ec:	2300      	movs	r3, #0
    74ee:	2201      	movs	r2, #1
    74f0:	469b      	mov	fp, r3
    74f2:	e78b      	b.n	740c <__aeabi_ddiv+0x7c>
    74f4:	4651      	mov	r1, sl
    74f6:	2203      	movs	r2, #3
    74f8:	e788      	b.n	740c <__aeabi_ddiv+0x7c>
    74fa:	2300      	movs	r3, #0
    74fc:	4698      	mov	r8, r3
    74fe:	3301      	adds	r3, #1
    7500:	2604      	movs	r6, #4
    7502:	2400      	movs	r4, #0
    7504:	9303      	str	r3, [sp, #12]
    7506:	e767      	b.n	73d8 <__aeabi_ddiv+0x48>
    7508:	2303      	movs	r3, #3
    750a:	46b1      	mov	r9, r6
    750c:	9303      	str	r3, [sp, #12]
    750e:	260c      	movs	r6, #12
    7510:	e762      	b.n	73d8 <__aeabi_ddiv+0x48>
    7512:	2a03      	cmp	r2, #3
    7514:	d100      	bne.n	7518 <__aeabi_ddiv+0x188>
    7516:	e25c      	b.n	79d2 <__aeabi_ddiv+0x642>
    7518:	9b01      	ldr	r3, [sp, #4]
    751a:	2a01      	cmp	r2, #1
    751c:	d000      	beq.n	7520 <__aeabi_ddiv+0x190>
    751e:	e1e4      	b.n	78ea <__aeabi_ddiv+0x55a>
    7520:	4013      	ands	r3, r2
    7522:	469c      	mov	ip, r3
    7524:	2300      	movs	r3, #0
    7526:	2400      	movs	r4, #0
    7528:	2200      	movs	r2, #0
    752a:	4698      	mov	r8, r3
    752c:	2100      	movs	r1, #0
    752e:	0312      	lsls	r2, r2, #12
    7530:	0b13      	lsrs	r3, r2, #12
    7532:	0d0a      	lsrs	r2, r1, #20
    7534:	0512      	lsls	r2, r2, #20
    7536:	431a      	orrs	r2, r3
    7538:	0523      	lsls	r3, r4, #20
    753a:	4c12      	ldr	r4, [pc, #72]	; (7584 <__aeabi_ddiv+0x1f4>)
    753c:	4640      	mov	r0, r8
    753e:	4022      	ands	r2, r4
    7540:	4313      	orrs	r3, r2
    7542:	4662      	mov	r2, ip
    7544:	005b      	lsls	r3, r3, #1
    7546:	07d2      	lsls	r2, r2, #31
    7548:	085b      	lsrs	r3, r3, #1
    754a:	4313      	orrs	r3, r2
    754c:	0019      	movs	r1, r3
    754e:	b007      	add	sp, #28
    7550:	bc3c      	pop	{r2, r3, r4, r5}
    7552:	4690      	mov	r8, r2
    7554:	4699      	mov	r9, r3
    7556:	46a2      	mov	sl, r4
    7558:	46ab      	mov	fp, r5
    755a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    755c:	2300      	movs	r3, #0
    755e:	2280      	movs	r2, #128	; 0x80
    7560:	469c      	mov	ip, r3
    7562:	0312      	lsls	r2, r2, #12
    7564:	4698      	mov	r8, r3
    7566:	4c03      	ldr	r4, [pc, #12]	; (7574 <__aeabi_ddiv+0x1e4>)
    7568:	e7e0      	b.n	752c <__aeabi_ddiv+0x19c>
    756a:	2300      	movs	r3, #0
    756c:	4c01      	ldr	r4, [pc, #4]	; (7574 <__aeabi_ddiv+0x1e4>)
    756e:	2200      	movs	r2, #0
    7570:	4698      	mov	r8, r3
    7572:	e7db      	b.n	752c <__aeabi_ddiv+0x19c>
    7574:	000007ff 	.word	0x000007ff
    7578:	fffffc01 	.word	0xfffffc01
    757c:	00008f20 	.word	0x00008f20
    7580:	fffffc0d 	.word	0xfffffc0d
    7584:	800fffff 	.word	0x800fffff
    7588:	45d9      	cmp	r9, fp
    758a:	d900      	bls.n	758e <__aeabi_ddiv+0x1fe>
    758c:	e139      	b.n	7802 <__aeabi_ddiv+0x472>
    758e:	d100      	bne.n	7592 <__aeabi_ddiv+0x202>
    7590:	e134      	b.n	77fc <__aeabi_ddiv+0x46c>
    7592:	2300      	movs	r3, #0
    7594:	4646      	mov	r6, r8
    7596:	464d      	mov	r5, r9
    7598:	469a      	mov	sl, r3
    759a:	3c01      	subs	r4, #1
    759c:	465b      	mov	r3, fp
    759e:	0e0a      	lsrs	r2, r1, #24
    75a0:	021b      	lsls	r3, r3, #8
    75a2:	431a      	orrs	r2, r3
    75a4:	020b      	lsls	r3, r1, #8
    75a6:	0c17      	lsrs	r7, r2, #16
    75a8:	9303      	str	r3, [sp, #12]
    75aa:	0413      	lsls	r3, r2, #16
    75ac:	0c1b      	lsrs	r3, r3, #16
    75ae:	0039      	movs	r1, r7
    75b0:	0028      	movs	r0, r5
    75b2:	4690      	mov	r8, r2
    75b4:	9301      	str	r3, [sp, #4]
    75b6:	f7fe fcd1 	bl	5f5c <__udivsi3>
    75ba:	0002      	movs	r2, r0
    75bc:	9b01      	ldr	r3, [sp, #4]
    75be:	4683      	mov	fp, r0
    75c0:	435a      	muls	r2, r3
    75c2:	0028      	movs	r0, r5
    75c4:	0039      	movs	r1, r7
    75c6:	4691      	mov	r9, r2
    75c8:	f7fe fd4e 	bl	6068 <__aeabi_uidivmod>
    75cc:	0c35      	lsrs	r5, r6, #16
    75ce:	0409      	lsls	r1, r1, #16
    75d0:	430d      	orrs	r5, r1
    75d2:	45a9      	cmp	r9, r5
    75d4:	d90d      	bls.n	75f2 <__aeabi_ddiv+0x262>
    75d6:	465b      	mov	r3, fp
    75d8:	4445      	add	r5, r8
    75da:	3b01      	subs	r3, #1
    75dc:	45a8      	cmp	r8, r5
    75de:	d900      	bls.n	75e2 <__aeabi_ddiv+0x252>
    75e0:	e13a      	b.n	7858 <__aeabi_ddiv+0x4c8>
    75e2:	45a9      	cmp	r9, r5
    75e4:	d800      	bhi.n	75e8 <__aeabi_ddiv+0x258>
    75e6:	e137      	b.n	7858 <__aeabi_ddiv+0x4c8>
    75e8:	2302      	movs	r3, #2
    75ea:	425b      	negs	r3, r3
    75ec:	469c      	mov	ip, r3
    75ee:	4445      	add	r5, r8
    75f0:	44e3      	add	fp, ip
    75f2:	464b      	mov	r3, r9
    75f4:	1aeb      	subs	r3, r5, r3
    75f6:	0039      	movs	r1, r7
    75f8:	0018      	movs	r0, r3
    75fa:	9304      	str	r3, [sp, #16]
    75fc:	f7fe fcae 	bl	5f5c <__udivsi3>
    7600:	9b01      	ldr	r3, [sp, #4]
    7602:	0005      	movs	r5, r0
    7604:	4343      	muls	r3, r0
    7606:	0039      	movs	r1, r7
    7608:	9804      	ldr	r0, [sp, #16]
    760a:	4699      	mov	r9, r3
    760c:	f7fe fd2c 	bl	6068 <__aeabi_uidivmod>
    7610:	0433      	lsls	r3, r6, #16
    7612:	0409      	lsls	r1, r1, #16
    7614:	0c1b      	lsrs	r3, r3, #16
    7616:	430b      	orrs	r3, r1
    7618:	4599      	cmp	r9, r3
    761a:	d909      	bls.n	7630 <__aeabi_ddiv+0x2a0>
    761c:	4443      	add	r3, r8
    761e:	1e6a      	subs	r2, r5, #1
    7620:	4598      	cmp	r8, r3
    7622:	d900      	bls.n	7626 <__aeabi_ddiv+0x296>
    7624:	e11a      	b.n	785c <__aeabi_ddiv+0x4cc>
    7626:	4599      	cmp	r9, r3
    7628:	d800      	bhi.n	762c <__aeabi_ddiv+0x29c>
    762a:	e117      	b.n	785c <__aeabi_ddiv+0x4cc>
    762c:	3d02      	subs	r5, #2
    762e:	4443      	add	r3, r8
    7630:	464a      	mov	r2, r9
    7632:	1a9b      	subs	r3, r3, r2
    7634:	465a      	mov	r2, fp
    7636:	0412      	lsls	r2, r2, #16
    7638:	432a      	orrs	r2, r5
    763a:	9903      	ldr	r1, [sp, #12]
    763c:	4693      	mov	fp, r2
    763e:	0c10      	lsrs	r0, r2, #16
    7640:	0c0a      	lsrs	r2, r1, #16
    7642:	4691      	mov	r9, r2
    7644:	0409      	lsls	r1, r1, #16
    7646:	465a      	mov	r2, fp
    7648:	0c09      	lsrs	r1, r1, #16
    764a:	464e      	mov	r6, r9
    764c:	000d      	movs	r5, r1
    764e:	0412      	lsls	r2, r2, #16
    7650:	0c12      	lsrs	r2, r2, #16
    7652:	4345      	muls	r5, r0
    7654:	9105      	str	r1, [sp, #20]
    7656:	4351      	muls	r1, r2
    7658:	4372      	muls	r2, r6
    765a:	4370      	muls	r0, r6
    765c:	1952      	adds	r2, r2, r5
    765e:	0c0e      	lsrs	r6, r1, #16
    7660:	18b2      	adds	r2, r6, r2
    7662:	4295      	cmp	r5, r2
    7664:	d903      	bls.n	766e <__aeabi_ddiv+0x2de>
    7666:	2580      	movs	r5, #128	; 0x80
    7668:	026d      	lsls	r5, r5, #9
    766a:	46ac      	mov	ip, r5
    766c:	4460      	add	r0, ip
    766e:	0c15      	lsrs	r5, r2, #16
    7670:	0409      	lsls	r1, r1, #16
    7672:	0412      	lsls	r2, r2, #16
    7674:	0c09      	lsrs	r1, r1, #16
    7676:	1828      	adds	r0, r5, r0
    7678:	1852      	adds	r2, r2, r1
    767a:	4283      	cmp	r3, r0
    767c:	d200      	bcs.n	7680 <__aeabi_ddiv+0x2f0>
    767e:	e0ce      	b.n	781e <__aeabi_ddiv+0x48e>
    7680:	d100      	bne.n	7684 <__aeabi_ddiv+0x2f4>
    7682:	e0c8      	b.n	7816 <__aeabi_ddiv+0x486>
    7684:	1a1d      	subs	r5, r3, r0
    7686:	4653      	mov	r3, sl
    7688:	1a9e      	subs	r6, r3, r2
    768a:	45b2      	cmp	sl, r6
    768c:	4192      	sbcs	r2, r2
    768e:	4252      	negs	r2, r2
    7690:	1aab      	subs	r3, r5, r2
    7692:	469a      	mov	sl, r3
    7694:	4598      	cmp	r8, r3
    7696:	d100      	bne.n	769a <__aeabi_ddiv+0x30a>
    7698:	e117      	b.n	78ca <__aeabi_ddiv+0x53a>
    769a:	0039      	movs	r1, r7
    769c:	0018      	movs	r0, r3
    769e:	f7fe fc5d 	bl	5f5c <__udivsi3>
    76a2:	9b01      	ldr	r3, [sp, #4]
    76a4:	0005      	movs	r5, r0
    76a6:	4343      	muls	r3, r0
    76a8:	0039      	movs	r1, r7
    76aa:	4650      	mov	r0, sl
    76ac:	9304      	str	r3, [sp, #16]
    76ae:	f7fe fcdb 	bl	6068 <__aeabi_uidivmod>
    76b2:	9804      	ldr	r0, [sp, #16]
    76b4:	040b      	lsls	r3, r1, #16
    76b6:	0c31      	lsrs	r1, r6, #16
    76b8:	4319      	orrs	r1, r3
    76ba:	4288      	cmp	r0, r1
    76bc:	d909      	bls.n	76d2 <__aeabi_ddiv+0x342>
    76be:	4441      	add	r1, r8
    76c0:	1e6b      	subs	r3, r5, #1
    76c2:	4588      	cmp	r8, r1
    76c4:	d900      	bls.n	76c8 <__aeabi_ddiv+0x338>
    76c6:	e107      	b.n	78d8 <__aeabi_ddiv+0x548>
    76c8:	4288      	cmp	r0, r1
    76ca:	d800      	bhi.n	76ce <__aeabi_ddiv+0x33e>
    76cc:	e104      	b.n	78d8 <__aeabi_ddiv+0x548>
    76ce:	3d02      	subs	r5, #2
    76d0:	4441      	add	r1, r8
    76d2:	9b04      	ldr	r3, [sp, #16]
    76d4:	1acb      	subs	r3, r1, r3
    76d6:	0018      	movs	r0, r3
    76d8:	0039      	movs	r1, r7
    76da:	9304      	str	r3, [sp, #16]
    76dc:	f7fe fc3e 	bl	5f5c <__udivsi3>
    76e0:	9b01      	ldr	r3, [sp, #4]
    76e2:	4682      	mov	sl, r0
    76e4:	4343      	muls	r3, r0
    76e6:	0039      	movs	r1, r7
    76e8:	9804      	ldr	r0, [sp, #16]
    76ea:	9301      	str	r3, [sp, #4]
    76ec:	f7fe fcbc 	bl	6068 <__aeabi_uidivmod>
    76f0:	9801      	ldr	r0, [sp, #4]
    76f2:	040b      	lsls	r3, r1, #16
    76f4:	0431      	lsls	r1, r6, #16
    76f6:	0c09      	lsrs	r1, r1, #16
    76f8:	4319      	orrs	r1, r3
    76fa:	4288      	cmp	r0, r1
    76fc:	d90d      	bls.n	771a <__aeabi_ddiv+0x38a>
    76fe:	4653      	mov	r3, sl
    7700:	4441      	add	r1, r8
    7702:	3b01      	subs	r3, #1
    7704:	4588      	cmp	r8, r1
    7706:	d900      	bls.n	770a <__aeabi_ddiv+0x37a>
    7708:	e0e8      	b.n	78dc <__aeabi_ddiv+0x54c>
    770a:	4288      	cmp	r0, r1
    770c:	d800      	bhi.n	7710 <__aeabi_ddiv+0x380>
    770e:	e0e5      	b.n	78dc <__aeabi_ddiv+0x54c>
    7710:	2302      	movs	r3, #2
    7712:	425b      	negs	r3, r3
    7714:	469c      	mov	ip, r3
    7716:	4441      	add	r1, r8
    7718:	44e2      	add	sl, ip
    771a:	9b01      	ldr	r3, [sp, #4]
    771c:	042d      	lsls	r5, r5, #16
    771e:	1ace      	subs	r6, r1, r3
    7720:	4651      	mov	r1, sl
    7722:	4329      	orrs	r1, r5
    7724:	9d05      	ldr	r5, [sp, #20]
    7726:	464f      	mov	r7, r9
    7728:	002a      	movs	r2, r5
    772a:	040b      	lsls	r3, r1, #16
    772c:	0c08      	lsrs	r0, r1, #16
    772e:	0c1b      	lsrs	r3, r3, #16
    7730:	435a      	muls	r2, r3
    7732:	4345      	muls	r5, r0
    7734:	437b      	muls	r3, r7
    7736:	4378      	muls	r0, r7
    7738:	195b      	adds	r3, r3, r5
    773a:	0c17      	lsrs	r7, r2, #16
    773c:	18fb      	adds	r3, r7, r3
    773e:	429d      	cmp	r5, r3
    7740:	d903      	bls.n	774a <__aeabi_ddiv+0x3ba>
    7742:	2580      	movs	r5, #128	; 0x80
    7744:	026d      	lsls	r5, r5, #9
    7746:	46ac      	mov	ip, r5
    7748:	4460      	add	r0, ip
    774a:	0c1d      	lsrs	r5, r3, #16
    774c:	0412      	lsls	r2, r2, #16
    774e:	041b      	lsls	r3, r3, #16
    7750:	0c12      	lsrs	r2, r2, #16
    7752:	1828      	adds	r0, r5, r0
    7754:	189b      	adds	r3, r3, r2
    7756:	4286      	cmp	r6, r0
    7758:	d200      	bcs.n	775c <__aeabi_ddiv+0x3cc>
    775a:	e093      	b.n	7884 <__aeabi_ddiv+0x4f4>
    775c:	d100      	bne.n	7760 <__aeabi_ddiv+0x3d0>
    775e:	e08e      	b.n	787e <__aeabi_ddiv+0x4ee>
    7760:	2301      	movs	r3, #1
    7762:	4319      	orrs	r1, r3
    7764:	4ba0      	ldr	r3, [pc, #640]	; (79e8 <__aeabi_ddiv+0x658>)
    7766:	18e3      	adds	r3, r4, r3
    7768:	2b00      	cmp	r3, #0
    776a:	dc00      	bgt.n	776e <__aeabi_ddiv+0x3de>
    776c:	e099      	b.n	78a2 <__aeabi_ddiv+0x512>
    776e:	074a      	lsls	r2, r1, #29
    7770:	d000      	beq.n	7774 <__aeabi_ddiv+0x3e4>
    7772:	e09e      	b.n	78b2 <__aeabi_ddiv+0x522>
    7774:	465a      	mov	r2, fp
    7776:	01d2      	lsls	r2, r2, #7
    7778:	d506      	bpl.n	7788 <__aeabi_ddiv+0x3f8>
    777a:	465a      	mov	r2, fp
    777c:	4b9b      	ldr	r3, [pc, #620]	; (79ec <__aeabi_ddiv+0x65c>)
    777e:	401a      	ands	r2, r3
    7780:	2380      	movs	r3, #128	; 0x80
    7782:	4693      	mov	fp, r2
    7784:	00db      	lsls	r3, r3, #3
    7786:	18e3      	adds	r3, r4, r3
    7788:	4a99      	ldr	r2, [pc, #612]	; (79f0 <__aeabi_ddiv+0x660>)
    778a:	4293      	cmp	r3, r2
    778c:	dd68      	ble.n	7860 <__aeabi_ddiv+0x4d0>
    778e:	2301      	movs	r3, #1
    7790:	9a02      	ldr	r2, [sp, #8]
    7792:	4c98      	ldr	r4, [pc, #608]	; (79f4 <__aeabi_ddiv+0x664>)
    7794:	401a      	ands	r2, r3
    7796:	2300      	movs	r3, #0
    7798:	4694      	mov	ip, r2
    779a:	4698      	mov	r8, r3
    779c:	2200      	movs	r2, #0
    779e:	e6c5      	b.n	752c <__aeabi_ddiv+0x19c>
    77a0:	2280      	movs	r2, #128	; 0x80
    77a2:	464b      	mov	r3, r9
    77a4:	0312      	lsls	r2, r2, #12
    77a6:	4213      	tst	r3, r2
    77a8:	d00a      	beq.n	77c0 <__aeabi_ddiv+0x430>
    77aa:	465b      	mov	r3, fp
    77ac:	4213      	tst	r3, r2
    77ae:	d106      	bne.n	77be <__aeabi_ddiv+0x42e>
    77b0:	431a      	orrs	r2, r3
    77b2:	0312      	lsls	r2, r2, #12
    77b4:	0b12      	lsrs	r2, r2, #12
    77b6:	46ac      	mov	ip, r5
    77b8:	4688      	mov	r8, r1
    77ba:	4c8e      	ldr	r4, [pc, #568]	; (79f4 <__aeabi_ddiv+0x664>)
    77bc:	e6b6      	b.n	752c <__aeabi_ddiv+0x19c>
    77be:	464b      	mov	r3, r9
    77c0:	431a      	orrs	r2, r3
    77c2:	0312      	lsls	r2, r2, #12
    77c4:	0b12      	lsrs	r2, r2, #12
    77c6:	46bc      	mov	ip, r7
    77c8:	4c8a      	ldr	r4, [pc, #552]	; (79f4 <__aeabi_ddiv+0x664>)
    77ca:	e6af      	b.n	752c <__aeabi_ddiv+0x19c>
    77cc:	0003      	movs	r3, r0
    77ce:	465a      	mov	r2, fp
    77d0:	3b28      	subs	r3, #40	; 0x28
    77d2:	409a      	lsls	r2, r3
    77d4:	2300      	movs	r3, #0
    77d6:	4691      	mov	r9, r2
    77d8:	4698      	mov	r8, r3
    77da:	e657      	b.n	748c <__aeabi_ddiv+0xfc>
    77dc:	4658      	mov	r0, fp
    77de:	f001 f94b 	bl	8a78 <__clzsi2>
    77e2:	3020      	adds	r0, #32
    77e4:	e640      	b.n	7468 <__aeabi_ddiv+0xd8>
    77e6:	0003      	movs	r3, r0
    77e8:	4652      	mov	r2, sl
    77ea:	3b28      	subs	r3, #40	; 0x28
    77ec:	409a      	lsls	r2, r3
    77ee:	2100      	movs	r1, #0
    77f0:	4693      	mov	fp, r2
    77f2:	e677      	b.n	74e4 <__aeabi_ddiv+0x154>
    77f4:	f001 f940 	bl	8a78 <__clzsi2>
    77f8:	3020      	adds	r0, #32
    77fa:	e65f      	b.n	74bc <__aeabi_ddiv+0x12c>
    77fc:	4588      	cmp	r8, r1
    77fe:	d200      	bcs.n	7802 <__aeabi_ddiv+0x472>
    7800:	e6c7      	b.n	7592 <__aeabi_ddiv+0x202>
    7802:	464b      	mov	r3, r9
    7804:	07de      	lsls	r6, r3, #31
    7806:	085d      	lsrs	r5, r3, #1
    7808:	4643      	mov	r3, r8
    780a:	085b      	lsrs	r3, r3, #1
    780c:	431e      	orrs	r6, r3
    780e:	4643      	mov	r3, r8
    7810:	07db      	lsls	r3, r3, #31
    7812:	469a      	mov	sl, r3
    7814:	e6c2      	b.n	759c <__aeabi_ddiv+0x20c>
    7816:	2500      	movs	r5, #0
    7818:	4592      	cmp	sl, r2
    781a:	d300      	bcc.n	781e <__aeabi_ddiv+0x48e>
    781c:	e733      	b.n	7686 <__aeabi_ddiv+0x2f6>
    781e:	9e03      	ldr	r6, [sp, #12]
    7820:	4659      	mov	r1, fp
    7822:	46b4      	mov	ip, r6
    7824:	44e2      	add	sl, ip
    7826:	45b2      	cmp	sl, r6
    7828:	41ad      	sbcs	r5, r5
    782a:	426d      	negs	r5, r5
    782c:	4445      	add	r5, r8
    782e:	18eb      	adds	r3, r5, r3
    7830:	3901      	subs	r1, #1
    7832:	4598      	cmp	r8, r3
    7834:	d207      	bcs.n	7846 <__aeabi_ddiv+0x4b6>
    7836:	4298      	cmp	r0, r3
    7838:	d900      	bls.n	783c <__aeabi_ddiv+0x4ac>
    783a:	e07f      	b.n	793c <__aeabi_ddiv+0x5ac>
    783c:	d100      	bne.n	7840 <__aeabi_ddiv+0x4b0>
    783e:	e0bc      	b.n	79ba <__aeabi_ddiv+0x62a>
    7840:	1a1d      	subs	r5, r3, r0
    7842:	468b      	mov	fp, r1
    7844:	e71f      	b.n	7686 <__aeabi_ddiv+0x2f6>
    7846:	4598      	cmp	r8, r3
    7848:	d1fa      	bne.n	7840 <__aeabi_ddiv+0x4b0>
    784a:	9d03      	ldr	r5, [sp, #12]
    784c:	4555      	cmp	r5, sl
    784e:	d9f2      	bls.n	7836 <__aeabi_ddiv+0x4a6>
    7850:	4643      	mov	r3, r8
    7852:	468b      	mov	fp, r1
    7854:	1a1d      	subs	r5, r3, r0
    7856:	e716      	b.n	7686 <__aeabi_ddiv+0x2f6>
    7858:	469b      	mov	fp, r3
    785a:	e6ca      	b.n	75f2 <__aeabi_ddiv+0x262>
    785c:	0015      	movs	r5, r2
    785e:	e6e7      	b.n	7630 <__aeabi_ddiv+0x2a0>
    7860:	465a      	mov	r2, fp
    7862:	08c9      	lsrs	r1, r1, #3
    7864:	0752      	lsls	r2, r2, #29
    7866:	430a      	orrs	r2, r1
    7868:	055b      	lsls	r3, r3, #21
    786a:	4690      	mov	r8, r2
    786c:	0d5c      	lsrs	r4, r3, #21
    786e:	465a      	mov	r2, fp
    7870:	2301      	movs	r3, #1
    7872:	9902      	ldr	r1, [sp, #8]
    7874:	0252      	lsls	r2, r2, #9
    7876:	4019      	ands	r1, r3
    7878:	0b12      	lsrs	r2, r2, #12
    787a:	468c      	mov	ip, r1
    787c:	e656      	b.n	752c <__aeabi_ddiv+0x19c>
    787e:	2b00      	cmp	r3, #0
    7880:	d100      	bne.n	7884 <__aeabi_ddiv+0x4f4>
    7882:	e76f      	b.n	7764 <__aeabi_ddiv+0x3d4>
    7884:	4446      	add	r6, r8
    7886:	1e4a      	subs	r2, r1, #1
    7888:	45b0      	cmp	r8, r6
    788a:	d929      	bls.n	78e0 <__aeabi_ddiv+0x550>
    788c:	0011      	movs	r1, r2
    788e:	4286      	cmp	r6, r0
    7890:	d000      	beq.n	7894 <__aeabi_ddiv+0x504>
    7892:	e765      	b.n	7760 <__aeabi_ddiv+0x3d0>
    7894:	9a03      	ldr	r2, [sp, #12]
    7896:	4293      	cmp	r3, r2
    7898:	d000      	beq.n	789c <__aeabi_ddiv+0x50c>
    789a:	e761      	b.n	7760 <__aeabi_ddiv+0x3d0>
    789c:	e762      	b.n	7764 <__aeabi_ddiv+0x3d4>
    789e:	2101      	movs	r1, #1
    78a0:	4249      	negs	r1, r1
    78a2:	2001      	movs	r0, #1
    78a4:	1ac2      	subs	r2, r0, r3
    78a6:	2a38      	cmp	r2, #56	; 0x38
    78a8:	dd21      	ble.n	78ee <__aeabi_ddiv+0x55e>
    78aa:	9b02      	ldr	r3, [sp, #8]
    78ac:	4003      	ands	r3, r0
    78ae:	469c      	mov	ip, r3
    78b0:	e638      	b.n	7524 <__aeabi_ddiv+0x194>
    78b2:	220f      	movs	r2, #15
    78b4:	400a      	ands	r2, r1
    78b6:	2a04      	cmp	r2, #4
    78b8:	d100      	bne.n	78bc <__aeabi_ddiv+0x52c>
    78ba:	e75b      	b.n	7774 <__aeabi_ddiv+0x3e4>
    78bc:	000a      	movs	r2, r1
    78be:	1d11      	adds	r1, r2, #4
    78c0:	4291      	cmp	r1, r2
    78c2:	4192      	sbcs	r2, r2
    78c4:	4252      	negs	r2, r2
    78c6:	4493      	add	fp, r2
    78c8:	e754      	b.n	7774 <__aeabi_ddiv+0x3e4>
    78ca:	4b47      	ldr	r3, [pc, #284]	; (79e8 <__aeabi_ddiv+0x658>)
    78cc:	18e3      	adds	r3, r4, r3
    78ce:	2b00      	cmp	r3, #0
    78d0:	dde5      	ble.n	789e <__aeabi_ddiv+0x50e>
    78d2:	2201      	movs	r2, #1
    78d4:	4252      	negs	r2, r2
    78d6:	e7f2      	b.n	78be <__aeabi_ddiv+0x52e>
    78d8:	001d      	movs	r5, r3
    78da:	e6fa      	b.n	76d2 <__aeabi_ddiv+0x342>
    78dc:	469a      	mov	sl, r3
    78de:	e71c      	b.n	771a <__aeabi_ddiv+0x38a>
    78e0:	42b0      	cmp	r0, r6
    78e2:	d839      	bhi.n	7958 <__aeabi_ddiv+0x5c8>
    78e4:	d06e      	beq.n	79c4 <__aeabi_ddiv+0x634>
    78e6:	0011      	movs	r1, r2
    78e8:	e73a      	b.n	7760 <__aeabi_ddiv+0x3d0>
    78ea:	9302      	str	r3, [sp, #8]
    78ec:	e73a      	b.n	7764 <__aeabi_ddiv+0x3d4>
    78ee:	2a1f      	cmp	r2, #31
    78f0:	dc3c      	bgt.n	796c <__aeabi_ddiv+0x5dc>
    78f2:	2320      	movs	r3, #32
    78f4:	1a9b      	subs	r3, r3, r2
    78f6:	000c      	movs	r4, r1
    78f8:	4658      	mov	r0, fp
    78fa:	4099      	lsls	r1, r3
    78fc:	4098      	lsls	r0, r3
    78fe:	1e4b      	subs	r3, r1, #1
    7900:	4199      	sbcs	r1, r3
    7902:	465b      	mov	r3, fp
    7904:	40d4      	lsrs	r4, r2
    7906:	40d3      	lsrs	r3, r2
    7908:	4320      	orrs	r0, r4
    790a:	4308      	orrs	r0, r1
    790c:	001a      	movs	r2, r3
    790e:	0743      	lsls	r3, r0, #29
    7910:	d009      	beq.n	7926 <__aeabi_ddiv+0x596>
    7912:	230f      	movs	r3, #15
    7914:	4003      	ands	r3, r0
    7916:	2b04      	cmp	r3, #4
    7918:	d005      	beq.n	7926 <__aeabi_ddiv+0x596>
    791a:	0001      	movs	r1, r0
    791c:	1d08      	adds	r0, r1, #4
    791e:	4288      	cmp	r0, r1
    7920:	419b      	sbcs	r3, r3
    7922:	425b      	negs	r3, r3
    7924:	18d2      	adds	r2, r2, r3
    7926:	0213      	lsls	r3, r2, #8
    7928:	d53a      	bpl.n	79a0 <__aeabi_ddiv+0x610>
    792a:	2301      	movs	r3, #1
    792c:	9a02      	ldr	r2, [sp, #8]
    792e:	2401      	movs	r4, #1
    7930:	401a      	ands	r2, r3
    7932:	2300      	movs	r3, #0
    7934:	4694      	mov	ip, r2
    7936:	4698      	mov	r8, r3
    7938:	2200      	movs	r2, #0
    793a:	e5f7      	b.n	752c <__aeabi_ddiv+0x19c>
    793c:	2102      	movs	r1, #2
    793e:	4249      	negs	r1, r1
    7940:	468c      	mov	ip, r1
    7942:	9d03      	ldr	r5, [sp, #12]
    7944:	44e3      	add	fp, ip
    7946:	46ac      	mov	ip, r5
    7948:	44e2      	add	sl, ip
    794a:	45aa      	cmp	sl, r5
    794c:	41ad      	sbcs	r5, r5
    794e:	426d      	negs	r5, r5
    7950:	4445      	add	r5, r8
    7952:	18ed      	adds	r5, r5, r3
    7954:	1a2d      	subs	r5, r5, r0
    7956:	e696      	b.n	7686 <__aeabi_ddiv+0x2f6>
    7958:	1e8a      	subs	r2, r1, #2
    795a:	9903      	ldr	r1, [sp, #12]
    795c:	004d      	lsls	r5, r1, #1
    795e:	428d      	cmp	r5, r1
    7960:	4189      	sbcs	r1, r1
    7962:	4249      	negs	r1, r1
    7964:	4441      	add	r1, r8
    7966:	1876      	adds	r6, r6, r1
    7968:	9503      	str	r5, [sp, #12]
    796a:	e78f      	b.n	788c <__aeabi_ddiv+0x4fc>
    796c:	201f      	movs	r0, #31
    796e:	4240      	negs	r0, r0
    7970:	1ac3      	subs	r3, r0, r3
    7972:	4658      	mov	r0, fp
    7974:	40d8      	lsrs	r0, r3
    7976:	0003      	movs	r3, r0
    7978:	2a20      	cmp	r2, #32
    797a:	d028      	beq.n	79ce <__aeabi_ddiv+0x63e>
    797c:	2040      	movs	r0, #64	; 0x40
    797e:	465d      	mov	r5, fp
    7980:	1a82      	subs	r2, r0, r2
    7982:	4095      	lsls	r5, r2
    7984:	4329      	orrs	r1, r5
    7986:	1e4a      	subs	r2, r1, #1
    7988:	4191      	sbcs	r1, r2
    798a:	4319      	orrs	r1, r3
    798c:	2307      	movs	r3, #7
    798e:	2200      	movs	r2, #0
    7990:	400b      	ands	r3, r1
    7992:	d009      	beq.n	79a8 <__aeabi_ddiv+0x618>
    7994:	230f      	movs	r3, #15
    7996:	2200      	movs	r2, #0
    7998:	400b      	ands	r3, r1
    799a:	0008      	movs	r0, r1
    799c:	2b04      	cmp	r3, #4
    799e:	d1bd      	bne.n	791c <__aeabi_ddiv+0x58c>
    79a0:	0001      	movs	r1, r0
    79a2:	0753      	lsls	r3, r2, #29
    79a4:	0252      	lsls	r2, r2, #9
    79a6:	0b12      	lsrs	r2, r2, #12
    79a8:	08c9      	lsrs	r1, r1, #3
    79aa:	4319      	orrs	r1, r3
    79ac:	2301      	movs	r3, #1
    79ae:	4688      	mov	r8, r1
    79b0:	9902      	ldr	r1, [sp, #8]
    79b2:	2400      	movs	r4, #0
    79b4:	4019      	ands	r1, r3
    79b6:	468c      	mov	ip, r1
    79b8:	e5b8      	b.n	752c <__aeabi_ddiv+0x19c>
    79ba:	4552      	cmp	r2, sl
    79bc:	d8be      	bhi.n	793c <__aeabi_ddiv+0x5ac>
    79be:	468b      	mov	fp, r1
    79c0:	2500      	movs	r5, #0
    79c2:	e660      	b.n	7686 <__aeabi_ddiv+0x2f6>
    79c4:	9d03      	ldr	r5, [sp, #12]
    79c6:	429d      	cmp	r5, r3
    79c8:	d3c6      	bcc.n	7958 <__aeabi_ddiv+0x5c8>
    79ca:	0011      	movs	r1, r2
    79cc:	e762      	b.n	7894 <__aeabi_ddiv+0x504>
    79ce:	2500      	movs	r5, #0
    79d0:	e7d8      	b.n	7984 <__aeabi_ddiv+0x5f4>
    79d2:	2280      	movs	r2, #128	; 0x80
    79d4:	465b      	mov	r3, fp
    79d6:	0312      	lsls	r2, r2, #12
    79d8:	431a      	orrs	r2, r3
    79da:	9b01      	ldr	r3, [sp, #4]
    79dc:	0312      	lsls	r2, r2, #12
    79de:	0b12      	lsrs	r2, r2, #12
    79e0:	469c      	mov	ip, r3
    79e2:	4688      	mov	r8, r1
    79e4:	4c03      	ldr	r4, [pc, #12]	; (79f4 <__aeabi_ddiv+0x664>)
    79e6:	e5a1      	b.n	752c <__aeabi_ddiv+0x19c>
    79e8:	000003ff 	.word	0x000003ff
    79ec:	feffffff 	.word	0xfeffffff
    79f0:	000007fe 	.word	0x000007fe
    79f4:	000007ff 	.word	0x000007ff

000079f8 <__eqdf2>:
    79f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    79fa:	464f      	mov	r7, r9
    79fc:	4646      	mov	r6, r8
    79fe:	46d6      	mov	lr, sl
    7a00:	005c      	lsls	r4, r3, #1
    7a02:	b5c0      	push	{r6, r7, lr}
    7a04:	031f      	lsls	r7, r3, #12
    7a06:	0fdb      	lsrs	r3, r3, #31
    7a08:	469a      	mov	sl, r3
    7a0a:	4b17      	ldr	r3, [pc, #92]	; (7a68 <__eqdf2+0x70>)
    7a0c:	030e      	lsls	r6, r1, #12
    7a0e:	004d      	lsls	r5, r1, #1
    7a10:	4684      	mov	ip, r0
    7a12:	4680      	mov	r8, r0
    7a14:	0b36      	lsrs	r6, r6, #12
    7a16:	0d6d      	lsrs	r5, r5, #21
    7a18:	0fc9      	lsrs	r1, r1, #31
    7a1a:	4691      	mov	r9, r2
    7a1c:	0b3f      	lsrs	r7, r7, #12
    7a1e:	0d64      	lsrs	r4, r4, #21
    7a20:	2001      	movs	r0, #1
    7a22:	429d      	cmp	r5, r3
    7a24:	d008      	beq.n	7a38 <__eqdf2+0x40>
    7a26:	429c      	cmp	r4, r3
    7a28:	d001      	beq.n	7a2e <__eqdf2+0x36>
    7a2a:	42a5      	cmp	r5, r4
    7a2c:	d00b      	beq.n	7a46 <__eqdf2+0x4e>
    7a2e:	bc1c      	pop	{r2, r3, r4}
    7a30:	4690      	mov	r8, r2
    7a32:	4699      	mov	r9, r3
    7a34:	46a2      	mov	sl, r4
    7a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a38:	4663      	mov	r3, ip
    7a3a:	4333      	orrs	r3, r6
    7a3c:	d1f7      	bne.n	7a2e <__eqdf2+0x36>
    7a3e:	42ac      	cmp	r4, r5
    7a40:	d1f5      	bne.n	7a2e <__eqdf2+0x36>
    7a42:	433a      	orrs	r2, r7
    7a44:	d1f3      	bne.n	7a2e <__eqdf2+0x36>
    7a46:	2001      	movs	r0, #1
    7a48:	42be      	cmp	r6, r7
    7a4a:	d1f0      	bne.n	7a2e <__eqdf2+0x36>
    7a4c:	45c8      	cmp	r8, r9
    7a4e:	d1ee      	bne.n	7a2e <__eqdf2+0x36>
    7a50:	4551      	cmp	r1, sl
    7a52:	d007      	beq.n	7a64 <__eqdf2+0x6c>
    7a54:	2d00      	cmp	r5, #0
    7a56:	d1ea      	bne.n	7a2e <__eqdf2+0x36>
    7a58:	4663      	mov	r3, ip
    7a5a:	431e      	orrs	r6, r3
    7a5c:	0030      	movs	r0, r6
    7a5e:	1e46      	subs	r6, r0, #1
    7a60:	41b0      	sbcs	r0, r6
    7a62:	e7e4      	b.n	7a2e <__eqdf2+0x36>
    7a64:	2000      	movs	r0, #0
    7a66:	e7e2      	b.n	7a2e <__eqdf2+0x36>
    7a68:	000007ff 	.word	0x000007ff

00007a6c <__gedf2>:
    7a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a6e:	4645      	mov	r5, r8
    7a70:	46de      	mov	lr, fp
    7a72:	4657      	mov	r7, sl
    7a74:	464e      	mov	r6, r9
    7a76:	b5e0      	push	{r5, r6, r7, lr}
    7a78:	031f      	lsls	r7, r3, #12
    7a7a:	0b3d      	lsrs	r5, r7, #12
    7a7c:	4f2c      	ldr	r7, [pc, #176]	; (7b30 <__gedf2+0xc4>)
    7a7e:	030e      	lsls	r6, r1, #12
    7a80:	004c      	lsls	r4, r1, #1
    7a82:	46ab      	mov	fp, r5
    7a84:	005d      	lsls	r5, r3, #1
    7a86:	4684      	mov	ip, r0
    7a88:	0b36      	lsrs	r6, r6, #12
    7a8a:	0d64      	lsrs	r4, r4, #21
    7a8c:	0fc9      	lsrs	r1, r1, #31
    7a8e:	4690      	mov	r8, r2
    7a90:	0d6d      	lsrs	r5, r5, #21
    7a92:	0fdb      	lsrs	r3, r3, #31
    7a94:	42bc      	cmp	r4, r7
    7a96:	d02a      	beq.n	7aee <__gedf2+0x82>
    7a98:	4f25      	ldr	r7, [pc, #148]	; (7b30 <__gedf2+0xc4>)
    7a9a:	42bd      	cmp	r5, r7
    7a9c:	d02d      	beq.n	7afa <__gedf2+0x8e>
    7a9e:	2c00      	cmp	r4, #0
    7aa0:	d10f      	bne.n	7ac2 <__gedf2+0x56>
    7aa2:	4330      	orrs	r0, r6
    7aa4:	0007      	movs	r7, r0
    7aa6:	4681      	mov	r9, r0
    7aa8:	4278      	negs	r0, r7
    7aaa:	4178      	adcs	r0, r7
    7aac:	b2c0      	uxtb	r0, r0
    7aae:	2d00      	cmp	r5, #0
    7ab0:	d117      	bne.n	7ae2 <__gedf2+0x76>
    7ab2:	465f      	mov	r7, fp
    7ab4:	433a      	orrs	r2, r7
    7ab6:	d114      	bne.n	7ae2 <__gedf2+0x76>
    7ab8:	464b      	mov	r3, r9
    7aba:	2000      	movs	r0, #0
    7abc:	2b00      	cmp	r3, #0
    7abe:	d00a      	beq.n	7ad6 <__gedf2+0x6a>
    7ac0:	e006      	b.n	7ad0 <__gedf2+0x64>
    7ac2:	2d00      	cmp	r5, #0
    7ac4:	d102      	bne.n	7acc <__gedf2+0x60>
    7ac6:	4658      	mov	r0, fp
    7ac8:	4302      	orrs	r2, r0
    7aca:	d001      	beq.n	7ad0 <__gedf2+0x64>
    7acc:	4299      	cmp	r1, r3
    7ace:	d018      	beq.n	7b02 <__gedf2+0x96>
    7ad0:	4248      	negs	r0, r1
    7ad2:	2101      	movs	r1, #1
    7ad4:	4308      	orrs	r0, r1
    7ad6:	bc3c      	pop	{r2, r3, r4, r5}
    7ad8:	4690      	mov	r8, r2
    7ada:	4699      	mov	r9, r3
    7adc:	46a2      	mov	sl, r4
    7ade:	46ab      	mov	fp, r5
    7ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ae2:	2800      	cmp	r0, #0
    7ae4:	d0f2      	beq.n	7acc <__gedf2+0x60>
    7ae6:	2001      	movs	r0, #1
    7ae8:	3b01      	subs	r3, #1
    7aea:	4318      	orrs	r0, r3
    7aec:	e7f3      	b.n	7ad6 <__gedf2+0x6a>
    7aee:	0037      	movs	r7, r6
    7af0:	4307      	orrs	r7, r0
    7af2:	d0d1      	beq.n	7a98 <__gedf2+0x2c>
    7af4:	2002      	movs	r0, #2
    7af6:	4240      	negs	r0, r0
    7af8:	e7ed      	b.n	7ad6 <__gedf2+0x6a>
    7afa:	465f      	mov	r7, fp
    7afc:	4317      	orrs	r7, r2
    7afe:	d0ce      	beq.n	7a9e <__gedf2+0x32>
    7b00:	e7f8      	b.n	7af4 <__gedf2+0x88>
    7b02:	42ac      	cmp	r4, r5
    7b04:	dce4      	bgt.n	7ad0 <__gedf2+0x64>
    7b06:	da03      	bge.n	7b10 <__gedf2+0xa4>
    7b08:	1e48      	subs	r0, r1, #1
    7b0a:	2101      	movs	r1, #1
    7b0c:	4308      	orrs	r0, r1
    7b0e:	e7e2      	b.n	7ad6 <__gedf2+0x6a>
    7b10:	455e      	cmp	r6, fp
    7b12:	d8dd      	bhi.n	7ad0 <__gedf2+0x64>
    7b14:	d006      	beq.n	7b24 <__gedf2+0xb8>
    7b16:	2000      	movs	r0, #0
    7b18:	455e      	cmp	r6, fp
    7b1a:	d2dc      	bcs.n	7ad6 <__gedf2+0x6a>
    7b1c:	2301      	movs	r3, #1
    7b1e:	1e48      	subs	r0, r1, #1
    7b20:	4318      	orrs	r0, r3
    7b22:	e7d8      	b.n	7ad6 <__gedf2+0x6a>
    7b24:	45c4      	cmp	ip, r8
    7b26:	d8d3      	bhi.n	7ad0 <__gedf2+0x64>
    7b28:	2000      	movs	r0, #0
    7b2a:	45c4      	cmp	ip, r8
    7b2c:	d3f6      	bcc.n	7b1c <__gedf2+0xb0>
    7b2e:	e7d2      	b.n	7ad6 <__gedf2+0x6a>
    7b30:	000007ff 	.word	0x000007ff

00007b34 <__ledf2>:
    7b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b36:	464e      	mov	r6, r9
    7b38:	4645      	mov	r5, r8
    7b3a:	46de      	mov	lr, fp
    7b3c:	4657      	mov	r7, sl
    7b3e:	005c      	lsls	r4, r3, #1
    7b40:	b5e0      	push	{r5, r6, r7, lr}
    7b42:	031f      	lsls	r7, r3, #12
    7b44:	0fdb      	lsrs	r3, r3, #31
    7b46:	4699      	mov	r9, r3
    7b48:	4b2a      	ldr	r3, [pc, #168]	; (7bf4 <__ledf2+0xc0>)
    7b4a:	030e      	lsls	r6, r1, #12
    7b4c:	004d      	lsls	r5, r1, #1
    7b4e:	0fc9      	lsrs	r1, r1, #31
    7b50:	4684      	mov	ip, r0
    7b52:	0b36      	lsrs	r6, r6, #12
    7b54:	0d6d      	lsrs	r5, r5, #21
    7b56:	468b      	mov	fp, r1
    7b58:	4690      	mov	r8, r2
    7b5a:	0b3f      	lsrs	r7, r7, #12
    7b5c:	0d64      	lsrs	r4, r4, #21
    7b5e:	429d      	cmp	r5, r3
    7b60:	d020      	beq.n	7ba4 <__ledf2+0x70>
    7b62:	4b24      	ldr	r3, [pc, #144]	; (7bf4 <__ledf2+0xc0>)
    7b64:	429c      	cmp	r4, r3
    7b66:	d022      	beq.n	7bae <__ledf2+0x7a>
    7b68:	2d00      	cmp	r5, #0
    7b6a:	d112      	bne.n	7b92 <__ledf2+0x5e>
    7b6c:	4330      	orrs	r0, r6
    7b6e:	4243      	negs	r3, r0
    7b70:	4143      	adcs	r3, r0
    7b72:	b2db      	uxtb	r3, r3
    7b74:	2c00      	cmp	r4, #0
    7b76:	d01f      	beq.n	7bb8 <__ledf2+0x84>
    7b78:	2b00      	cmp	r3, #0
    7b7a:	d00c      	beq.n	7b96 <__ledf2+0x62>
    7b7c:	464b      	mov	r3, r9
    7b7e:	2001      	movs	r0, #1
    7b80:	3b01      	subs	r3, #1
    7b82:	4303      	orrs	r3, r0
    7b84:	0018      	movs	r0, r3
    7b86:	bc3c      	pop	{r2, r3, r4, r5}
    7b88:	4690      	mov	r8, r2
    7b8a:	4699      	mov	r9, r3
    7b8c:	46a2      	mov	sl, r4
    7b8e:	46ab      	mov	fp, r5
    7b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b92:	2c00      	cmp	r4, #0
    7b94:	d016      	beq.n	7bc4 <__ledf2+0x90>
    7b96:	45cb      	cmp	fp, r9
    7b98:	d017      	beq.n	7bca <__ledf2+0x96>
    7b9a:	465b      	mov	r3, fp
    7b9c:	4259      	negs	r1, r3
    7b9e:	2301      	movs	r3, #1
    7ba0:	430b      	orrs	r3, r1
    7ba2:	e7ef      	b.n	7b84 <__ledf2+0x50>
    7ba4:	0031      	movs	r1, r6
    7ba6:	2302      	movs	r3, #2
    7ba8:	4301      	orrs	r1, r0
    7baa:	d1eb      	bne.n	7b84 <__ledf2+0x50>
    7bac:	e7d9      	b.n	7b62 <__ledf2+0x2e>
    7bae:	0039      	movs	r1, r7
    7bb0:	2302      	movs	r3, #2
    7bb2:	4311      	orrs	r1, r2
    7bb4:	d1e6      	bne.n	7b84 <__ledf2+0x50>
    7bb6:	e7d7      	b.n	7b68 <__ledf2+0x34>
    7bb8:	433a      	orrs	r2, r7
    7bba:	d1dd      	bne.n	7b78 <__ledf2+0x44>
    7bbc:	2300      	movs	r3, #0
    7bbe:	2800      	cmp	r0, #0
    7bc0:	d0e0      	beq.n	7b84 <__ledf2+0x50>
    7bc2:	e7ea      	b.n	7b9a <__ledf2+0x66>
    7bc4:	433a      	orrs	r2, r7
    7bc6:	d1e6      	bne.n	7b96 <__ledf2+0x62>
    7bc8:	e7e7      	b.n	7b9a <__ledf2+0x66>
    7bca:	42a5      	cmp	r5, r4
    7bcc:	dce5      	bgt.n	7b9a <__ledf2+0x66>
    7bce:	db05      	blt.n	7bdc <__ledf2+0xa8>
    7bd0:	42be      	cmp	r6, r7
    7bd2:	d8e2      	bhi.n	7b9a <__ledf2+0x66>
    7bd4:	d007      	beq.n	7be6 <__ledf2+0xb2>
    7bd6:	2300      	movs	r3, #0
    7bd8:	42be      	cmp	r6, r7
    7bda:	d2d3      	bcs.n	7b84 <__ledf2+0x50>
    7bdc:	4659      	mov	r1, fp
    7bde:	2301      	movs	r3, #1
    7be0:	3901      	subs	r1, #1
    7be2:	430b      	orrs	r3, r1
    7be4:	e7ce      	b.n	7b84 <__ledf2+0x50>
    7be6:	45c4      	cmp	ip, r8
    7be8:	d8d7      	bhi.n	7b9a <__ledf2+0x66>
    7bea:	2300      	movs	r3, #0
    7bec:	45c4      	cmp	ip, r8
    7bee:	d3f5      	bcc.n	7bdc <__ledf2+0xa8>
    7bf0:	e7c8      	b.n	7b84 <__ledf2+0x50>
    7bf2:	46c0      	nop			; (mov r8, r8)
    7bf4:	000007ff 	.word	0x000007ff

00007bf8 <__aeabi_dmul>:
    7bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7bfa:	4657      	mov	r7, sl
    7bfc:	4645      	mov	r5, r8
    7bfe:	46de      	mov	lr, fp
    7c00:	464e      	mov	r6, r9
    7c02:	b5e0      	push	{r5, r6, r7, lr}
    7c04:	030c      	lsls	r4, r1, #12
    7c06:	4698      	mov	r8, r3
    7c08:	004e      	lsls	r6, r1, #1
    7c0a:	0b23      	lsrs	r3, r4, #12
    7c0c:	b087      	sub	sp, #28
    7c0e:	0007      	movs	r7, r0
    7c10:	4692      	mov	sl, r2
    7c12:	469b      	mov	fp, r3
    7c14:	0d76      	lsrs	r6, r6, #21
    7c16:	0fcd      	lsrs	r5, r1, #31
    7c18:	2e00      	cmp	r6, #0
    7c1a:	d06b      	beq.n	7cf4 <__aeabi_dmul+0xfc>
    7c1c:	4b6d      	ldr	r3, [pc, #436]	; (7dd4 <__aeabi_dmul+0x1dc>)
    7c1e:	429e      	cmp	r6, r3
    7c20:	d035      	beq.n	7c8e <__aeabi_dmul+0x96>
    7c22:	2480      	movs	r4, #128	; 0x80
    7c24:	465b      	mov	r3, fp
    7c26:	0f42      	lsrs	r2, r0, #29
    7c28:	0424      	lsls	r4, r4, #16
    7c2a:	00db      	lsls	r3, r3, #3
    7c2c:	4314      	orrs	r4, r2
    7c2e:	431c      	orrs	r4, r3
    7c30:	00c3      	lsls	r3, r0, #3
    7c32:	4699      	mov	r9, r3
    7c34:	4b68      	ldr	r3, [pc, #416]	; (7dd8 <__aeabi_dmul+0x1e0>)
    7c36:	46a3      	mov	fp, r4
    7c38:	469c      	mov	ip, r3
    7c3a:	2300      	movs	r3, #0
    7c3c:	2700      	movs	r7, #0
    7c3e:	4466      	add	r6, ip
    7c40:	9302      	str	r3, [sp, #8]
    7c42:	4643      	mov	r3, r8
    7c44:	031c      	lsls	r4, r3, #12
    7c46:	005a      	lsls	r2, r3, #1
    7c48:	0fdb      	lsrs	r3, r3, #31
    7c4a:	4650      	mov	r0, sl
    7c4c:	0b24      	lsrs	r4, r4, #12
    7c4e:	0d52      	lsrs	r2, r2, #21
    7c50:	4698      	mov	r8, r3
    7c52:	d100      	bne.n	7c56 <__aeabi_dmul+0x5e>
    7c54:	e076      	b.n	7d44 <__aeabi_dmul+0x14c>
    7c56:	4b5f      	ldr	r3, [pc, #380]	; (7dd4 <__aeabi_dmul+0x1dc>)
    7c58:	429a      	cmp	r2, r3
    7c5a:	d06d      	beq.n	7d38 <__aeabi_dmul+0x140>
    7c5c:	2380      	movs	r3, #128	; 0x80
    7c5e:	0f41      	lsrs	r1, r0, #29
    7c60:	041b      	lsls	r3, r3, #16
    7c62:	430b      	orrs	r3, r1
    7c64:	495c      	ldr	r1, [pc, #368]	; (7dd8 <__aeabi_dmul+0x1e0>)
    7c66:	00e4      	lsls	r4, r4, #3
    7c68:	468c      	mov	ip, r1
    7c6a:	431c      	orrs	r4, r3
    7c6c:	00c3      	lsls	r3, r0, #3
    7c6e:	2000      	movs	r0, #0
    7c70:	4462      	add	r2, ip
    7c72:	4641      	mov	r1, r8
    7c74:	18b6      	adds	r6, r6, r2
    7c76:	4069      	eors	r1, r5
    7c78:	1c72      	adds	r2, r6, #1
    7c7a:	9101      	str	r1, [sp, #4]
    7c7c:	4694      	mov	ip, r2
    7c7e:	4307      	orrs	r7, r0
    7c80:	2f0f      	cmp	r7, #15
    7c82:	d900      	bls.n	7c86 <__aeabi_dmul+0x8e>
    7c84:	e0b0      	b.n	7de8 <__aeabi_dmul+0x1f0>
    7c86:	4a55      	ldr	r2, [pc, #340]	; (7ddc <__aeabi_dmul+0x1e4>)
    7c88:	00bf      	lsls	r7, r7, #2
    7c8a:	59d2      	ldr	r2, [r2, r7]
    7c8c:	4697      	mov	pc, r2
    7c8e:	465b      	mov	r3, fp
    7c90:	4303      	orrs	r3, r0
    7c92:	4699      	mov	r9, r3
    7c94:	d000      	beq.n	7c98 <__aeabi_dmul+0xa0>
    7c96:	e087      	b.n	7da8 <__aeabi_dmul+0x1b0>
    7c98:	2300      	movs	r3, #0
    7c9a:	469b      	mov	fp, r3
    7c9c:	3302      	adds	r3, #2
    7c9e:	2708      	movs	r7, #8
    7ca0:	9302      	str	r3, [sp, #8]
    7ca2:	e7ce      	b.n	7c42 <__aeabi_dmul+0x4a>
    7ca4:	4642      	mov	r2, r8
    7ca6:	9201      	str	r2, [sp, #4]
    7ca8:	2802      	cmp	r0, #2
    7caa:	d067      	beq.n	7d7c <__aeabi_dmul+0x184>
    7cac:	2803      	cmp	r0, #3
    7cae:	d100      	bne.n	7cb2 <__aeabi_dmul+0xba>
    7cb0:	e20e      	b.n	80d0 <__aeabi_dmul+0x4d8>
    7cb2:	2801      	cmp	r0, #1
    7cb4:	d000      	beq.n	7cb8 <__aeabi_dmul+0xc0>
    7cb6:	e162      	b.n	7f7e <__aeabi_dmul+0x386>
    7cb8:	2300      	movs	r3, #0
    7cba:	2400      	movs	r4, #0
    7cbc:	2200      	movs	r2, #0
    7cbe:	4699      	mov	r9, r3
    7cc0:	9901      	ldr	r1, [sp, #4]
    7cc2:	4001      	ands	r1, r0
    7cc4:	b2cd      	uxtb	r5, r1
    7cc6:	2100      	movs	r1, #0
    7cc8:	0312      	lsls	r2, r2, #12
    7cca:	0d0b      	lsrs	r3, r1, #20
    7ccc:	0b12      	lsrs	r2, r2, #12
    7cce:	051b      	lsls	r3, r3, #20
    7cd0:	4313      	orrs	r3, r2
    7cd2:	4a43      	ldr	r2, [pc, #268]	; (7de0 <__aeabi_dmul+0x1e8>)
    7cd4:	0524      	lsls	r4, r4, #20
    7cd6:	4013      	ands	r3, r2
    7cd8:	431c      	orrs	r4, r3
    7cda:	0064      	lsls	r4, r4, #1
    7cdc:	07ed      	lsls	r5, r5, #31
    7cde:	0864      	lsrs	r4, r4, #1
    7ce0:	432c      	orrs	r4, r5
    7ce2:	4648      	mov	r0, r9
    7ce4:	0021      	movs	r1, r4
    7ce6:	b007      	add	sp, #28
    7ce8:	bc3c      	pop	{r2, r3, r4, r5}
    7cea:	4690      	mov	r8, r2
    7cec:	4699      	mov	r9, r3
    7cee:	46a2      	mov	sl, r4
    7cf0:	46ab      	mov	fp, r5
    7cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7cf4:	4303      	orrs	r3, r0
    7cf6:	4699      	mov	r9, r3
    7cf8:	d04f      	beq.n	7d9a <__aeabi_dmul+0x1a2>
    7cfa:	465b      	mov	r3, fp
    7cfc:	2b00      	cmp	r3, #0
    7cfe:	d100      	bne.n	7d02 <__aeabi_dmul+0x10a>
    7d00:	e189      	b.n	8016 <__aeabi_dmul+0x41e>
    7d02:	4658      	mov	r0, fp
    7d04:	f000 feb8 	bl	8a78 <__clzsi2>
    7d08:	0003      	movs	r3, r0
    7d0a:	3b0b      	subs	r3, #11
    7d0c:	2b1c      	cmp	r3, #28
    7d0e:	dd00      	ble.n	7d12 <__aeabi_dmul+0x11a>
    7d10:	e17a      	b.n	8008 <__aeabi_dmul+0x410>
    7d12:	221d      	movs	r2, #29
    7d14:	1ad3      	subs	r3, r2, r3
    7d16:	003a      	movs	r2, r7
    7d18:	0001      	movs	r1, r0
    7d1a:	465c      	mov	r4, fp
    7d1c:	40da      	lsrs	r2, r3
    7d1e:	3908      	subs	r1, #8
    7d20:	408c      	lsls	r4, r1
    7d22:	0013      	movs	r3, r2
    7d24:	408f      	lsls	r7, r1
    7d26:	4323      	orrs	r3, r4
    7d28:	469b      	mov	fp, r3
    7d2a:	46b9      	mov	r9, r7
    7d2c:	2300      	movs	r3, #0
    7d2e:	4e2d      	ldr	r6, [pc, #180]	; (7de4 <__aeabi_dmul+0x1ec>)
    7d30:	2700      	movs	r7, #0
    7d32:	1a36      	subs	r6, r6, r0
    7d34:	9302      	str	r3, [sp, #8]
    7d36:	e784      	b.n	7c42 <__aeabi_dmul+0x4a>
    7d38:	4653      	mov	r3, sl
    7d3a:	4323      	orrs	r3, r4
    7d3c:	d12a      	bne.n	7d94 <__aeabi_dmul+0x19c>
    7d3e:	2400      	movs	r4, #0
    7d40:	2002      	movs	r0, #2
    7d42:	e796      	b.n	7c72 <__aeabi_dmul+0x7a>
    7d44:	4653      	mov	r3, sl
    7d46:	4323      	orrs	r3, r4
    7d48:	d020      	beq.n	7d8c <__aeabi_dmul+0x194>
    7d4a:	2c00      	cmp	r4, #0
    7d4c:	d100      	bne.n	7d50 <__aeabi_dmul+0x158>
    7d4e:	e157      	b.n	8000 <__aeabi_dmul+0x408>
    7d50:	0020      	movs	r0, r4
    7d52:	f000 fe91 	bl	8a78 <__clzsi2>
    7d56:	0003      	movs	r3, r0
    7d58:	3b0b      	subs	r3, #11
    7d5a:	2b1c      	cmp	r3, #28
    7d5c:	dd00      	ble.n	7d60 <__aeabi_dmul+0x168>
    7d5e:	e149      	b.n	7ff4 <__aeabi_dmul+0x3fc>
    7d60:	211d      	movs	r1, #29
    7d62:	1acb      	subs	r3, r1, r3
    7d64:	4651      	mov	r1, sl
    7d66:	0002      	movs	r2, r0
    7d68:	40d9      	lsrs	r1, r3
    7d6a:	4653      	mov	r3, sl
    7d6c:	3a08      	subs	r2, #8
    7d6e:	4094      	lsls	r4, r2
    7d70:	4093      	lsls	r3, r2
    7d72:	430c      	orrs	r4, r1
    7d74:	4a1b      	ldr	r2, [pc, #108]	; (7de4 <__aeabi_dmul+0x1ec>)
    7d76:	1a12      	subs	r2, r2, r0
    7d78:	2000      	movs	r0, #0
    7d7a:	e77a      	b.n	7c72 <__aeabi_dmul+0x7a>
    7d7c:	2501      	movs	r5, #1
    7d7e:	9b01      	ldr	r3, [sp, #4]
    7d80:	4c14      	ldr	r4, [pc, #80]	; (7dd4 <__aeabi_dmul+0x1dc>)
    7d82:	401d      	ands	r5, r3
    7d84:	2300      	movs	r3, #0
    7d86:	2200      	movs	r2, #0
    7d88:	4699      	mov	r9, r3
    7d8a:	e79c      	b.n	7cc6 <__aeabi_dmul+0xce>
    7d8c:	2400      	movs	r4, #0
    7d8e:	2200      	movs	r2, #0
    7d90:	2001      	movs	r0, #1
    7d92:	e76e      	b.n	7c72 <__aeabi_dmul+0x7a>
    7d94:	4653      	mov	r3, sl
    7d96:	2003      	movs	r0, #3
    7d98:	e76b      	b.n	7c72 <__aeabi_dmul+0x7a>
    7d9a:	2300      	movs	r3, #0
    7d9c:	469b      	mov	fp, r3
    7d9e:	3301      	adds	r3, #1
    7da0:	2704      	movs	r7, #4
    7da2:	2600      	movs	r6, #0
    7da4:	9302      	str	r3, [sp, #8]
    7da6:	e74c      	b.n	7c42 <__aeabi_dmul+0x4a>
    7da8:	2303      	movs	r3, #3
    7daa:	4681      	mov	r9, r0
    7dac:	270c      	movs	r7, #12
    7dae:	9302      	str	r3, [sp, #8]
    7db0:	e747      	b.n	7c42 <__aeabi_dmul+0x4a>
    7db2:	2280      	movs	r2, #128	; 0x80
    7db4:	2300      	movs	r3, #0
    7db6:	2500      	movs	r5, #0
    7db8:	0312      	lsls	r2, r2, #12
    7dba:	4699      	mov	r9, r3
    7dbc:	4c05      	ldr	r4, [pc, #20]	; (7dd4 <__aeabi_dmul+0x1dc>)
    7dbe:	e782      	b.n	7cc6 <__aeabi_dmul+0xce>
    7dc0:	465c      	mov	r4, fp
    7dc2:	464b      	mov	r3, r9
    7dc4:	9802      	ldr	r0, [sp, #8]
    7dc6:	e76f      	b.n	7ca8 <__aeabi_dmul+0xb0>
    7dc8:	465c      	mov	r4, fp
    7dca:	464b      	mov	r3, r9
    7dcc:	9501      	str	r5, [sp, #4]
    7dce:	9802      	ldr	r0, [sp, #8]
    7dd0:	e76a      	b.n	7ca8 <__aeabi_dmul+0xb0>
    7dd2:	46c0      	nop			; (mov r8, r8)
    7dd4:	000007ff 	.word	0x000007ff
    7dd8:	fffffc01 	.word	0xfffffc01
    7ddc:	00008f60 	.word	0x00008f60
    7de0:	800fffff 	.word	0x800fffff
    7de4:	fffffc0d 	.word	0xfffffc0d
    7de8:	464a      	mov	r2, r9
    7dea:	4649      	mov	r1, r9
    7dec:	0c17      	lsrs	r7, r2, #16
    7dee:	0c1a      	lsrs	r2, r3, #16
    7df0:	041b      	lsls	r3, r3, #16
    7df2:	0c1b      	lsrs	r3, r3, #16
    7df4:	0408      	lsls	r0, r1, #16
    7df6:	0019      	movs	r1, r3
    7df8:	0c00      	lsrs	r0, r0, #16
    7dfa:	4341      	muls	r1, r0
    7dfc:	0015      	movs	r5, r2
    7dfe:	4688      	mov	r8, r1
    7e00:	0019      	movs	r1, r3
    7e02:	437d      	muls	r5, r7
    7e04:	4379      	muls	r1, r7
    7e06:	9503      	str	r5, [sp, #12]
    7e08:	4689      	mov	r9, r1
    7e0a:	0029      	movs	r1, r5
    7e0c:	0015      	movs	r5, r2
    7e0e:	4345      	muls	r5, r0
    7e10:	444d      	add	r5, r9
    7e12:	9502      	str	r5, [sp, #8]
    7e14:	4645      	mov	r5, r8
    7e16:	0c2d      	lsrs	r5, r5, #16
    7e18:	46aa      	mov	sl, r5
    7e1a:	9d02      	ldr	r5, [sp, #8]
    7e1c:	4455      	add	r5, sl
    7e1e:	45a9      	cmp	r9, r5
    7e20:	d906      	bls.n	7e30 <__aeabi_dmul+0x238>
    7e22:	468a      	mov	sl, r1
    7e24:	2180      	movs	r1, #128	; 0x80
    7e26:	0249      	lsls	r1, r1, #9
    7e28:	4689      	mov	r9, r1
    7e2a:	44ca      	add	sl, r9
    7e2c:	4651      	mov	r1, sl
    7e2e:	9103      	str	r1, [sp, #12]
    7e30:	0c29      	lsrs	r1, r5, #16
    7e32:	9104      	str	r1, [sp, #16]
    7e34:	4641      	mov	r1, r8
    7e36:	0409      	lsls	r1, r1, #16
    7e38:	042d      	lsls	r5, r5, #16
    7e3a:	0c09      	lsrs	r1, r1, #16
    7e3c:	4688      	mov	r8, r1
    7e3e:	0029      	movs	r1, r5
    7e40:	0c25      	lsrs	r5, r4, #16
    7e42:	0424      	lsls	r4, r4, #16
    7e44:	4441      	add	r1, r8
    7e46:	0c24      	lsrs	r4, r4, #16
    7e48:	9105      	str	r1, [sp, #20]
    7e4a:	0021      	movs	r1, r4
    7e4c:	4341      	muls	r1, r0
    7e4e:	4688      	mov	r8, r1
    7e50:	0021      	movs	r1, r4
    7e52:	4379      	muls	r1, r7
    7e54:	468a      	mov	sl, r1
    7e56:	4368      	muls	r0, r5
    7e58:	4641      	mov	r1, r8
    7e5a:	4450      	add	r0, sl
    7e5c:	4681      	mov	r9, r0
    7e5e:	0c08      	lsrs	r0, r1, #16
    7e60:	4448      	add	r0, r9
    7e62:	436f      	muls	r7, r5
    7e64:	4582      	cmp	sl, r0
    7e66:	d903      	bls.n	7e70 <__aeabi_dmul+0x278>
    7e68:	2180      	movs	r1, #128	; 0x80
    7e6a:	0249      	lsls	r1, r1, #9
    7e6c:	4689      	mov	r9, r1
    7e6e:	444f      	add	r7, r9
    7e70:	0c01      	lsrs	r1, r0, #16
    7e72:	4689      	mov	r9, r1
    7e74:	0039      	movs	r1, r7
    7e76:	4449      	add	r1, r9
    7e78:	9102      	str	r1, [sp, #8]
    7e7a:	4641      	mov	r1, r8
    7e7c:	040f      	lsls	r7, r1, #16
    7e7e:	9904      	ldr	r1, [sp, #16]
    7e80:	0c3f      	lsrs	r7, r7, #16
    7e82:	4688      	mov	r8, r1
    7e84:	0400      	lsls	r0, r0, #16
    7e86:	19c0      	adds	r0, r0, r7
    7e88:	4480      	add	r8, r0
    7e8a:	4641      	mov	r1, r8
    7e8c:	9104      	str	r1, [sp, #16]
    7e8e:	4659      	mov	r1, fp
    7e90:	0c0f      	lsrs	r7, r1, #16
    7e92:	0409      	lsls	r1, r1, #16
    7e94:	0c09      	lsrs	r1, r1, #16
    7e96:	4688      	mov	r8, r1
    7e98:	4359      	muls	r1, r3
    7e9a:	468a      	mov	sl, r1
    7e9c:	0039      	movs	r1, r7
    7e9e:	4351      	muls	r1, r2
    7ea0:	4689      	mov	r9, r1
    7ea2:	4641      	mov	r1, r8
    7ea4:	434a      	muls	r2, r1
    7ea6:	4651      	mov	r1, sl
    7ea8:	0c09      	lsrs	r1, r1, #16
    7eaa:	468b      	mov	fp, r1
    7eac:	437b      	muls	r3, r7
    7eae:	18d2      	adds	r2, r2, r3
    7eb0:	445a      	add	r2, fp
    7eb2:	4293      	cmp	r3, r2
    7eb4:	d903      	bls.n	7ebe <__aeabi_dmul+0x2c6>
    7eb6:	2380      	movs	r3, #128	; 0x80
    7eb8:	025b      	lsls	r3, r3, #9
    7eba:	469b      	mov	fp, r3
    7ebc:	44d9      	add	r9, fp
    7ebe:	4651      	mov	r1, sl
    7ec0:	0409      	lsls	r1, r1, #16
    7ec2:	0c09      	lsrs	r1, r1, #16
    7ec4:	468a      	mov	sl, r1
    7ec6:	4641      	mov	r1, r8
    7ec8:	4361      	muls	r1, r4
    7eca:	437c      	muls	r4, r7
    7ecc:	0c13      	lsrs	r3, r2, #16
    7ece:	0412      	lsls	r2, r2, #16
    7ed0:	444b      	add	r3, r9
    7ed2:	4452      	add	r2, sl
    7ed4:	46a1      	mov	r9, r4
    7ed6:	468a      	mov	sl, r1
    7ed8:	003c      	movs	r4, r7
    7eda:	4641      	mov	r1, r8
    7edc:	436c      	muls	r4, r5
    7ede:	434d      	muls	r5, r1
    7ee0:	4651      	mov	r1, sl
    7ee2:	444d      	add	r5, r9
    7ee4:	0c0f      	lsrs	r7, r1, #16
    7ee6:	197d      	adds	r5, r7, r5
    7ee8:	45a9      	cmp	r9, r5
    7eea:	d903      	bls.n	7ef4 <__aeabi_dmul+0x2fc>
    7eec:	2180      	movs	r1, #128	; 0x80
    7eee:	0249      	lsls	r1, r1, #9
    7ef0:	4688      	mov	r8, r1
    7ef2:	4444      	add	r4, r8
    7ef4:	9f04      	ldr	r7, [sp, #16]
    7ef6:	9903      	ldr	r1, [sp, #12]
    7ef8:	46b8      	mov	r8, r7
    7efa:	4441      	add	r1, r8
    7efc:	468b      	mov	fp, r1
    7efe:	4583      	cmp	fp, r0
    7f00:	4180      	sbcs	r0, r0
    7f02:	4241      	negs	r1, r0
    7f04:	4688      	mov	r8, r1
    7f06:	4651      	mov	r1, sl
    7f08:	0408      	lsls	r0, r1, #16
    7f0a:	042f      	lsls	r7, r5, #16
    7f0c:	0c00      	lsrs	r0, r0, #16
    7f0e:	183f      	adds	r7, r7, r0
    7f10:	4658      	mov	r0, fp
    7f12:	9902      	ldr	r1, [sp, #8]
    7f14:	1810      	adds	r0, r2, r0
    7f16:	4689      	mov	r9, r1
    7f18:	4290      	cmp	r0, r2
    7f1a:	4192      	sbcs	r2, r2
    7f1c:	444f      	add	r7, r9
    7f1e:	46ba      	mov	sl, r7
    7f20:	4252      	negs	r2, r2
    7f22:	4699      	mov	r9, r3
    7f24:	4693      	mov	fp, r2
    7f26:	44c2      	add	sl, r8
    7f28:	44d1      	add	r9, sl
    7f2a:	44cb      	add	fp, r9
    7f2c:	428f      	cmp	r7, r1
    7f2e:	41bf      	sbcs	r7, r7
    7f30:	45c2      	cmp	sl, r8
    7f32:	4189      	sbcs	r1, r1
    7f34:	4599      	cmp	r9, r3
    7f36:	419b      	sbcs	r3, r3
    7f38:	4593      	cmp	fp, r2
    7f3a:	4192      	sbcs	r2, r2
    7f3c:	427f      	negs	r7, r7
    7f3e:	4249      	negs	r1, r1
    7f40:	0c2d      	lsrs	r5, r5, #16
    7f42:	4252      	negs	r2, r2
    7f44:	430f      	orrs	r7, r1
    7f46:	425b      	negs	r3, r3
    7f48:	4313      	orrs	r3, r2
    7f4a:	197f      	adds	r7, r7, r5
    7f4c:	18ff      	adds	r7, r7, r3
    7f4e:	465b      	mov	r3, fp
    7f50:	193c      	adds	r4, r7, r4
    7f52:	0ddb      	lsrs	r3, r3, #23
    7f54:	9a05      	ldr	r2, [sp, #20]
    7f56:	0264      	lsls	r4, r4, #9
    7f58:	431c      	orrs	r4, r3
    7f5a:	0243      	lsls	r3, r0, #9
    7f5c:	4313      	orrs	r3, r2
    7f5e:	1e5d      	subs	r5, r3, #1
    7f60:	41ab      	sbcs	r3, r5
    7f62:	465a      	mov	r2, fp
    7f64:	0dc0      	lsrs	r0, r0, #23
    7f66:	4303      	orrs	r3, r0
    7f68:	0252      	lsls	r2, r2, #9
    7f6a:	4313      	orrs	r3, r2
    7f6c:	01e2      	lsls	r2, r4, #7
    7f6e:	d556      	bpl.n	801e <__aeabi_dmul+0x426>
    7f70:	2001      	movs	r0, #1
    7f72:	085a      	lsrs	r2, r3, #1
    7f74:	4003      	ands	r3, r0
    7f76:	4313      	orrs	r3, r2
    7f78:	07e2      	lsls	r2, r4, #31
    7f7a:	4313      	orrs	r3, r2
    7f7c:	0864      	lsrs	r4, r4, #1
    7f7e:	485a      	ldr	r0, [pc, #360]	; (80e8 <__aeabi_dmul+0x4f0>)
    7f80:	4460      	add	r0, ip
    7f82:	2800      	cmp	r0, #0
    7f84:	dd4d      	ble.n	8022 <__aeabi_dmul+0x42a>
    7f86:	075a      	lsls	r2, r3, #29
    7f88:	d009      	beq.n	7f9e <__aeabi_dmul+0x3a6>
    7f8a:	220f      	movs	r2, #15
    7f8c:	401a      	ands	r2, r3
    7f8e:	2a04      	cmp	r2, #4
    7f90:	d005      	beq.n	7f9e <__aeabi_dmul+0x3a6>
    7f92:	1d1a      	adds	r2, r3, #4
    7f94:	429a      	cmp	r2, r3
    7f96:	419b      	sbcs	r3, r3
    7f98:	425b      	negs	r3, r3
    7f9a:	18e4      	adds	r4, r4, r3
    7f9c:	0013      	movs	r3, r2
    7f9e:	01e2      	lsls	r2, r4, #7
    7fa0:	d504      	bpl.n	7fac <__aeabi_dmul+0x3b4>
    7fa2:	2080      	movs	r0, #128	; 0x80
    7fa4:	4a51      	ldr	r2, [pc, #324]	; (80ec <__aeabi_dmul+0x4f4>)
    7fa6:	00c0      	lsls	r0, r0, #3
    7fa8:	4014      	ands	r4, r2
    7faa:	4460      	add	r0, ip
    7fac:	4a50      	ldr	r2, [pc, #320]	; (80f0 <__aeabi_dmul+0x4f8>)
    7fae:	4290      	cmp	r0, r2
    7fb0:	dd00      	ble.n	7fb4 <__aeabi_dmul+0x3bc>
    7fb2:	e6e3      	b.n	7d7c <__aeabi_dmul+0x184>
    7fb4:	2501      	movs	r5, #1
    7fb6:	08db      	lsrs	r3, r3, #3
    7fb8:	0762      	lsls	r2, r4, #29
    7fba:	431a      	orrs	r2, r3
    7fbc:	0264      	lsls	r4, r4, #9
    7fbe:	9b01      	ldr	r3, [sp, #4]
    7fc0:	4691      	mov	r9, r2
    7fc2:	0b22      	lsrs	r2, r4, #12
    7fc4:	0544      	lsls	r4, r0, #21
    7fc6:	0d64      	lsrs	r4, r4, #21
    7fc8:	401d      	ands	r5, r3
    7fca:	e67c      	b.n	7cc6 <__aeabi_dmul+0xce>
    7fcc:	2280      	movs	r2, #128	; 0x80
    7fce:	4659      	mov	r1, fp
    7fd0:	0312      	lsls	r2, r2, #12
    7fd2:	4211      	tst	r1, r2
    7fd4:	d008      	beq.n	7fe8 <__aeabi_dmul+0x3f0>
    7fd6:	4214      	tst	r4, r2
    7fd8:	d106      	bne.n	7fe8 <__aeabi_dmul+0x3f0>
    7fda:	4322      	orrs	r2, r4
    7fdc:	0312      	lsls	r2, r2, #12
    7fde:	0b12      	lsrs	r2, r2, #12
    7fe0:	4645      	mov	r5, r8
    7fe2:	4699      	mov	r9, r3
    7fe4:	4c43      	ldr	r4, [pc, #268]	; (80f4 <__aeabi_dmul+0x4fc>)
    7fe6:	e66e      	b.n	7cc6 <__aeabi_dmul+0xce>
    7fe8:	465b      	mov	r3, fp
    7fea:	431a      	orrs	r2, r3
    7fec:	0312      	lsls	r2, r2, #12
    7fee:	0b12      	lsrs	r2, r2, #12
    7ff0:	4c40      	ldr	r4, [pc, #256]	; (80f4 <__aeabi_dmul+0x4fc>)
    7ff2:	e668      	b.n	7cc6 <__aeabi_dmul+0xce>
    7ff4:	0003      	movs	r3, r0
    7ff6:	4654      	mov	r4, sl
    7ff8:	3b28      	subs	r3, #40	; 0x28
    7ffa:	409c      	lsls	r4, r3
    7ffc:	2300      	movs	r3, #0
    7ffe:	e6b9      	b.n	7d74 <__aeabi_dmul+0x17c>
    8000:	f000 fd3a 	bl	8a78 <__clzsi2>
    8004:	3020      	adds	r0, #32
    8006:	e6a6      	b.n	7d56 <__aeabi_dmul+0x15e>
    8008:	0003      	movs	r3, r0
    800a:	3b28      	subs	r3, #40	; 0x28
    800c:	409f      	lsls	r7, r3
    800e:	2300      	movs	r3, #0
    8010:	46bb      	mov	fp, r7
    8012:	4699      	mov	r9, r3
    8014:	e68a      	b.n	7d2c <__aeabi_dmul+0x134>
    8016:	f000 fd2f 	bl	8a78 <__clzsi2>
    801a:	3020      	adds	r0, #32
    801c:	e674      	b.n	7d08 <__aeabi_dmul+0x110>
    801e:	46b4      	mov	ip, r6
    8020:	e7ad      	b.n	7f7e <__aeabi_dmul+0x386>
    8022:	2501      	movs	r5, #1
    8024:	1a2a      	subs	r2, r5, r0
    8026:	2a38      	cmp	r2, #56	; 0x38
    8028:	dd06      	ble.n	8038 <__aeabi_dmul+0x440>
    802a:	9b01      	ldr	r3, [sp, #4]
    802c:	2400      	movs	r4, #0
    802e:	401d      	ands	r5, r3
    8030:	2300      	movs	r3, #0
    8032:	2200      	movs	r2, #0
    8034:	4699      	mov	r9, r3
    8036:	e646      	b.n	7cc6 <__aeabi_dmul+0xce>
    8038:	2a1f      	cmp	r2, #31
    803a:	dc21      	bgt.n	8080 <__aeabi_dmul+0x488>
    803c:	2520      	movs	r5, #32
    803e:	0020      	movs	r0, r4
    8040:	1aad      	subs	r5, r5, r2
    8042:	001e      	movs	r6, r3
    8044:	40ab      	lsls	r3, r5
    8046:	40a8      	lsls	r0, r5
    8048:	40d6      	lsrs	r6, r2
    804a:	1e5d      	subs	r5, r3, #1
    804c:	41ab      	sbcs	r3, r5
    804e:	4330      	orrs	r0, r6
    8050:	4318      	orrs	r0, r3
    8052:	40d4      	lsrs	r4, r2
    8054:	0743      	lsls	r3, r0, #29
    8056:	d009      	beq.n	806c <__aeabi_dmul+0x474>
    8058:	230f      	movs	r3, #15
    805a:	4003      	ands	r3, r0
    805c:	2b04      	cmp	r3, #4
    805e:	d005      	beq.n	806c <__aeabi_dmul+0x474>
    8060:	0003      	movs	r3, r0
    8062:	1d18      	adds	r0, r3, #4
    8064:	4298      	cmp	r0, r3
    8066:	419b      	sbcs	r3, r3
    8068:	425b      	negs	r3, r3
    806a:	18e4      	adds	r4, r4, r3
    806c:	0223      	lsls	r3, r4, #8
    806e:	d521      	bpl.n	80b4 <__aeabi_dmul+0x4bc>
    8070:	2501      	movs	r5, #1
    8072:	9b01      	ldr	r3, [sp, #4]
    8074:	2401      	movs	r4, #1
    8076:	401d      	ands	r5, r3
    8078:	2300      	movs	r3, #0
    807a:	2200      	movs	r2, #0
    807c:	4699      	mov	r9, r3
    807e:	e622      	b.n	7cc6 <__aeabi_dmul+0xce>
    8080:	251f      	movs	r5, #31
    8082:	0021      	movs	r1, r4
    8084:	426d      	negs	r5, r5
    8086:	1a28      	subs	r0, r5, r0
    8088:	40c1      	lsrs	r1, r0
    808a:	0008      	movs	r0, r1
    808c:	2a20      	cmp	r2, #32
    808e:	d01d      	beq.n	80cc <__aeabi_dmul+0x4d4>
    8090:	355f      	adds	r5, #95	; 0x5f
    8092:	1aaa      	subs	r2, r5, r2
    8094:	4094      	lsls	r4, r2
    8096:	4323      	orrs	r3, r4
    8098:	1e5c      	subs	r4, r3, #1
    809a:	41a3      	sbcs	r3, r4
    809c:	2507      	movs	r5, #7
    809e:	4303      	orrs	r3, r0
    80a0:	401d      	ands	r5, r3
    80a2:	2200      	movs	r2, #0
    80a4:	2d00      	cmp	r5, #0
    80a6:	d009      	beq.n	80bc <__aeabi_dmul+0x4c4>
    80a8:	220f      	movs	r2, #15
    80aa:	2400      	movs	r4, #0
    80ac:	401a      	ands	r2, r3
    80ae:	0018      	movs	r0, r3
    80b0:	2a04      	cmp	r2, #4
    80b2:	d1d6      	bne.n	8062 <__aeabi_dmul+0x46a>
    80b4:	0003      	movs	r3, r0
    80b6:	0765      	lsls	r5, r4, #29
    80b8:	0264      	lsls	r4, r4, #9
    80ba:	0b22      	lsrs	r2, r4, #12
    80bc:	08db      	lsrs	r3, r3, #3
    80be:	432b      	orrs	r3, r5
    80c0:	2501      	movs	r5, #1
    80c2:	4699      	mov	r9, r3
    80c4:	9b01      	ldr	r3, [sp, #4]
    80c6:	2400      	movs	r4, #0
    80c8:	401d      	ands	r5, r3
    80ca:	e5fc      	b.n	7cc6 <__aeabi_dmul+0xce>
    80cc:	2400      	movs	r4, #0
    80ce:	e7e2      	b.n	8096 <__aeabi_dmul+0x49e>
    80d0:	2280      	movs	r2, #128	; 0x80
    80d2:	2501      	movs	r5, #1
    80d4:	0312      	lsls	r2, r2, #12
    80d6:	4322      	orrs	r2, r4
    80d8:	9901      	ldr	r1, [sp, #4]
    80da:	0312      	lsls	r2, r2, #12
    80dc:	0b12      	lsrs	r2, r2, #12
    80de:	400d      	ands	r5, r1
    80e0:	4699      	mov	r9, r3
    80e2:	4c04      	ldr	r4, [pc, #16]	; (80f4 <__aeabi_dmul+0x4fc>)
    80e4:	e5ef      	b.n	7cc6 <__aeabi_dmul+0xce>
    80e6:	46c0      	nop			; (mov r8, r8)
    80e8:	000003ff 	.word	0x000003ff
    80ec:	feffffff 	.word	0xfeffffff
    80f0:	000007fe 	.word	0x000007fe
    80f4:	000007ff 	.word	0x000007ff

000080f8 <__aeabi_dsub>:
    80f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    80fa:	4646      	mov	r6, r8
    80fc:	46d6      	mov	lr, sl
    80fe:	464f      	mov	r7, r9
    8100:	030c      	lsls	r4, r1, #12
    8102:	b5c0      	push	{r6, r7, lr}
    8104:	0fcd      	lsrs	r5, r1, #31
    8106:	004e      	lsls	r6, r1, #1
    8108:	0a61      	lsrs	r1, r4, #9
    810a:	0f44      	lsrs	r4, r0, #29
    810c:	430c      	orrs	r4, r1
    810e:	00c1      	lsls	r1, r0, #3
    8110:	0058      	lsls	r0, r3, #1
    8112:	0d40      	lsrs	r0, r0, #21
    8114:	4684      	mov	ip, r0
    8116:	468a      	mov	sl, r1
    8118:	000f      	movs	r7, r1
    811a:	0319      	lsls	r1, r3, #12
    811c:	0f50      	lsrs	r0, r2, #29
    811e:	0a49      	lsrs	r1, r1, #9
    8120:	4301      	orrs	r1, r0
    8122:	48c6      	ldr	r0, [pc, #792]	; (843c <__aeabi_dsub+0x344>)
    8124:	0d76      	lsrs	r6, r6, #21
    8126:	46a8      	mov	r8, r5
    8128:	0fdb      	lsrs	r3, r3, #31
    812a:	00d2      	lsls	r2, r2, #3
    812c:	4584      	cmp	ip, r0
    812e:	d100      	bne.n	8132 <__aeabi_dsub+0x3a>
    8130:	e0d8      	b.n	82e4 <__aeabi_dsub+0x1ec>
    8132:	2001      	movs	r0, #1
    8134:	4043      	eors	r3, r0
    8136:	42ab      	cmp	r3, r5
    8138:	d100      	bne.n	813c <__aeabi_dsub+0x44>
    813a:	e0a6      	b.n	828a <__aeabi_dsub+0x192>
    813c:	4660      	mov	r0, ip
    813e:	1a35      	subs	r5, r6, r0
    8140:	2d00      	cmp	r5, #0
    8142:	dc00      	bgt.n	8146 <__aeabi_dsub+0x4e>
    8144:	e105      	b.n	8352 <__aeabi_dsub+0x25a>
    8146:	2800      	cmp	r0, #0
    8148:	d110      	bne.n	816c <__aeabi_dsub+0x74>
    814a:	000b      	movs	r3, r1
    814c:	4313      	orrs	r3, r2
    814e:	d100      	bne.n	8152 <__aeabi_dsub+0x5a>
    8150:	e0d7      	b.n	8302 <__aeabi_dsub+0x20a>
    8152:	1e6b      	subs	r3, r5, #1
    8154:	2b00      	cmp	r3, #0
    8156:	d000      	beq.n	815a <__aeabi_dsub+0x62>
    8158:	e14b      	b.n	83f2 <__aeabi_dsub+0x2fa>
    815a:	4653      	mov	r3, sl
    815c:	1a9f      	subs	r7, r3, r2
    815e:	45ba      	cmp	sl, r7
    8160:	4180      	sbcs	r0, r0
    8162:	1a64      	subs	r4, r4, r1
    8164:	4240      	negs	r0, r0
    8166:	1a24      	subs	r4, r4, r0
    8168:	2601      	movs	r6, #1
    816a:	e01e      	b.n	81aa <__aeabi_dsub+0xb2>
    816c:	4bb3      	ldr	r3, [pc, #716]	; (843c <__aeabi_dsub+0x344>)
    816e:	429e      	cmp	r6, r3
    8170:	d048      	beq.n	8204 <__aeabi_dsub+0x10c>
    8172:	2380      	movs	r3, #128	; 0x80
    8174:	041b      	lsls	r3, r3, #16
    8176:	4319      	orrs	r1, r3
    8178:	2d38      	cmp	r5, #56	; 0x38
    817a:	dd00      	ble.n	817e <__aeabi_dsub+0x86>
    817c:	e119      	b.n	83b2 <__aeabi_dsub+0x2ba>
    817e:	2d1f      	cmp	r5, #31
    8180:	dd00      	ble.n	8184 <__aeabi_dsub+0x8c>
    8182:	e14c      	b.n	841e <__aeabi_dsub+0x326>
    8184:	2320      	movs	r3, #32
    8186:	000f      	movs	r7, r1
    8188:	1b5b      	subs	r3, r3, r5
    818a:	0010      	movs	r0, r2
    818c:	409a      	lsls	r2, r3
    818e:	409f      	lsls	r7, r3
    8190:	40e8      	lsrs	r0, r5
    8192:	1e53      	subs	r3, r2, #1
    8194:	419a      	sbcs	r2, r3
    8196:	40e9      	lsrs	r1, r5
    8198:	4307      	orrs	r7, r0
    819a:	4317      	orrs	r7, r2
    819c:	4653      	mov	r3, sl
    819e:	1bdf      	subs	r7, r3, r7
    81a0:	1a61      	subs	r1, r4, r1
    81a2:	45ba      	cmp	sl, r7
    81a4:	41a4      	sbcs	r4, r4
    81a6:	4264      	negs	r4, r4
    81a8:	1b0c      	subs	r4, r1, r4
    81aa:	0223      	lsls	r3, r4, #8
    81ac:	d400      	bmi.n	81b0 <__aeabi_dsub+0xb8>
    81ae:	e0c5      	b.n	833c <__aeabi_dsub+0x244>
    81b0:	0264      	lsls	r4, r4, #9
    81b2:	0a65      	lsrs	r5, r4, #9
    81b4:	2d00      	cmp	r5, #0
    81b6:	d100      	bne.n	81ba <__aeabi_dsub+0xc2>
    81b8:	e0f6      	b.n	83a8 <__aeabi_dsub+0x2b0>
    81ba:	0028      	movs	r0, r5
    81bc:	f000 fc5c 	bl	8a78 <__clzsi2>
    81c0:	0003      	movs	r3, r0
    81c2:	3b08      	subs	r3, #8
    81c4:	2b1f      	cmp	r3, #31
    81c6:	dd00      	ble.n	81ca <__aeabi_dsub+0xd2>
    81c8:	e0e9      	b.n	839e <__aeabi_dsub+0x2a6>
    81ca:	2220      	movs	r2, #32
    81cc:	003c      	movs	r4, r7
    81ce:	1ad2      	subs	r2, r2, r3
    81d0:	409d      	lsls	r5, r3
    81d2:	40d4      	lsrs	r4, r2
    81d4:	409f      	lsls	r7, r3
    81d6:	4325      	orrs	r5, r4
    81d8:	429e      	cmp	r6, r3
    81da:	dd00      	ble.n	81de <__aeabi_dsub+0xe6>
    81dc:	e0db      	b.n	8396 <__aeabi_dsub+0x29e>
    81de:	1b9e      	subs	r6, r3, r6
    81e0:	1c73      	adds	r3, r6, #1
    81e2:	2b1f      	cmp	r3, #31
    81e4:	dd00      	ble.n	81e8 <__aeabi_dsub+0xf0>
    81e6:	e10a      	b.n	83fe <__aeabi_dsub+0x306>
    81e8:	2220      	movs	r2, #32
    81ea:	0038      	movs	r0, r7
    81ec:	1ad2      	subs	r2, r2, r3
    81ee:	0029      	movs	r1, r5
    81f0:	4097      	lsls	r7, r2
    81f2:	002c      	movs	r4, r5
    81f4:	4091      	lsls	r1, r2
    81f6:	40d8      	lsrs	r0, r3
    81f8:	1e7a      	subs	r2, r7, #1
    81fa:	4197      	sbcs	r7, r2
    81fc:	40dc      	lsrs	r4, r3
    81fe:	2600      	movs	r6, #0
    8200:	4301      	orrs	r1, r0
    8202:	430f      	orrs	r7, r1
    8204:	077b      	lsls	r3, r7, #29
    8206:	d009      	beq.n	821c <__aeabi_dsub+0x124>
    8208:	230f      	movs	r3, #15
    820a:	403b      	ands	r3, r7
    820c:	2b04      	cmp	r3, #4
    820e:	d005      	beq.n	821c <__aeabi_dsub+0x124>
    8210:	1d3b      	adds	r3, r7, #4
    8212:	42bb      	cmp	r3, r7
    8214:	41bf      	sbcs	r7, r7
    8216:	427f      	negs	r7, r7
    8218:	19e4      	adds	r4, r4, r7
    821a:	001f      	movs	r7, r3
    821c:	0223      	lsls	r3, r4, #8
    821e:	d525      	bpl.n	826c <__aeabi_dsub+0x174>
    8220:	4b86      	ldr	r3, [pc, #536]	; (843c <__aeabi_dsub+0x344>)
    8222:	3601      	adds	r6, #1
    8224:	429e      	cmp	r6, r3
    8226:	d100      	bne.n	822a <__aeabi_dsub+0x132>
    8228:	e0af      	b.n	838a <__aeabi_dsub+0x292>
    822a:	4b85      	ldr	r3, [pc, #532]	; (8440 <__aeabi_dsub+0x348>)
    822c:	2501      	movs	r5, #1
    822e:	401c      	ands	r4, r3
    8230:	4643      	mov	r3, r8
    8232:	0762      	lsls	r2, r4, #29
    8234:	08ff      	lsrs	r7, r7, #3
    8236:	0264      	lsls	r4, r4, #9
    8238:	0576      	lsls	r6, r6, #21
    823a:	4317      	orrs	r7, r2
    823c:	0b24      	lsrs	r4, r4, #12
    823e:	0d76      	lsrs	r6, r6, #21
    8240:	401d      	ands	r5, r3
    8242:	2100      	movs	r1, #0
    8244:	0324      	lsls	r4, r4, #12
    8246:	0b23      	lsrs	r3, r4, #12
    8248:	0d0c      	lsrs	r4, r1, #20
    824a:	4a7e      	ldr	r2, [pc, #504]	; (8444 <__aeabi_dsub+0x34c>)
    824c:	0524      	lsls	r4, r4, #20
    824e:	431c      	orrs	r4, r3
    8250:	4014      	ands	r4, r2
    8252:	0533      	lsls	r3, r6, #20
    8254:	4323      	orrs	r3, r4
    8256:	005b      	lsls	r3, r3, #1
    8258:	07ed      	lsls	r5, r5, #31
    825a:	085b      	lsrs	r3, r3, #1
    825c:	432b      	orrs	r3, r5
    825e:	0038      	movs	r0, r7
    8260:	0019      	movs	r1, r3
    8262:	bc1c      	pop	{r2, r3, r4}
    8264:	4690      	mov	r8, r2
    8266:	4699      	mov	r9, r3
    8268:	46a2      	mov	sl, r4
    826a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    826c:	2501      	movs	r5, #1
    826e:	4643      	mov	r3, r8
    8270:	0762      	lsls	r2, r4, #29
    8272:	08ff      	lsrs	r7, r7, #3
    8274:	4317      	orrs	r7, r2
    8276:	08e4      	lsrs	r4, r4, #3
    8278:	401d      	ands	r5, r3
    827a:	4b70      	ldr	r3, [pc, #448]	; (843c <__aeabi_dsub+0x344>)
    827c:	429e      	cmp	r6, r3
    827e:	d036      	beq.n	82ee <__aeabi_dsub+0x1f6>
    8280:	0324      	lsls	r4, r4, #12
    8282:	0576      	lsls	r6, r6, #21
    8284:	0b24      	lsrs	r4, r4, #12
    8286:	0d76      	lsrs	r6, r6, #21
    8288:	e7db      	b.n	8242 <__aeabi_dsub+0x14a>
    828a:	4663      	mov	r3, ip
    828c:	1af3      	subs	r3, r6, r3
    828e:	2b00      	cmp	r3, #0
    8290:	dc00      	bgt.n	8294 <__aeabi_dsub+0x19c>
    8292:	e094      	b.n	83be <__aeabi_dsub+0x2c6>
    8294:	4660      	mov	r0, ip
    8296:	2800      	cmp	r0, #0
    8298:	d035      	beq.n	8306 <__aeabi_dsub+0x20e>
    829a:	4868      	ldr	r0, [pc, #416]	; (843c <__aeabi_dsub+0x344>)
    829c:	4286      	cmp	r6, r0
    829e:	d0b1      	beq.n	8204 <__aeabi_dsub+0x10c>
    82a0:	2780      	movs	r7, #128	; 0x80
    82a2:	043f      	lsls	r7, r7, #16
    82a4:	4339      	orrs	r1, r7
    82a6:	2b38      	cmp	r3, #56	; 0x38
    82a8:	dc00      	bgt.n	82ac <__aeabi_dsub+0x1b4>
    82aa:	e0fd      	b.n	84a8 <__aeabi_dsub+0x3b0>
    82ac:	430a      	orrs	r2, r1
    82ae:	0017      	movs	r7, r2
    82b0:	2100      	movs	r1, #0
    82b2:	1e7a      	subs	r2, r7, #1
    82b4:	4197      	sbcs	r7, r2
    82b6:	4457      	add	r7, sl
    82b8:	4557      	cmp	r7, sl
    82ba:	4180      	sbcs	r0, r0
    82bc:	1909      	adds	r1, r1, r4
    82be:	4244      	negs	r4, r0
    82c0:	190c      	adds	r4, r1, r4
    82c2:	0223      	lsls	r3, r4, #8
    82c4:	d53a      	bpl.n	833c <__aeabi_dsub+0x244>
    82c6:	4b5d      	ldr	r3, [pc, #372]	; (843c <__aeabi_dsub+0x344>)
    82c8:	3601      	adds	r6, #1
    82ca:	429e      	cmp	r6, r3
    82cc:	d100      	bne.n	82d0 <__aeabi_dsub+0x1d8>
    82ce:	e14b      	b.n	8568 <__aeabi_dsub+0x470>
    82d0:	2201      	movs	r2, #1
    82d2:	4b5b      	ldr	r3, [pc, #364]	; (8440 <__aeabi_dsub+0x348>)
    82d4:	401c      	ands	r4, r3
    82d6:	087b      	lsrs	r3, r7, #1
    82d8:	4017      	ands	r7, r2
    82da:	431f      	orrs	r7, r3
    82dc:	07e2      	lsls	r2, r4, #31
    82de:	4317      	orrs	r7, r2
    82e0:	0864      	lsrs	r4, r4, #1
    82e2:	e78f      	b.n	8204 <__aeabi_dsub+0x10c>
    82e4:	0008      	movs	r0, r1
    82e6:	4310      	orrs	r0, r2
    82e8:	d000      	beq.n	82ec <__aeabi_dsub+0x1f4>
    82ea:	e724      	b.n	8136 <__aeabi_dsub+0x3e>
    82ec:	e721      	b.n	8132 <__aeabi_dsub+0x3a>
    82ee:	0023      	movs	r3, r4
    82f0:	433b      	orrs	r3, r7
    82f2:	d100      	bne.n	82f6 <__aeabi_dsub+0x1fe>
    82f4:	e1b9      	b.n	866a <__aeabi_dsub+0x572>
    82f6:	2280      	movs	r2, #128	; 0x80
    82f8:	0312      	lsls	r2, r2, #12
    82fa:	4314      	orrs	r4, r2
    82fc:	0324      	lsls	r4, r4, #12
    82fe:	0b24      	lsrs	r4, r4, #12
    8300:	e79f      	b.n	8242 <__aeabi_dsub+0x14a>
    8302:	002e      	movs	r6, r5
    8304:	e77e      	b.n	8204 <__aeabi_dsub+0x10c>
    8306:	0008      	movs	r0, r1
    8308:	4310      	orrs	r0, r2
    830a:	d100      	bne.n	830e <__aeabi_dsub+0x216>
    830c:	e0ca      	b.n	84a4 <__aeabi_dsub+0x3ac>
    830e:	1e58      	subs	r0, r3, #1
    8310:	4684      	mov	ip, r0
    8312:	2800      	cmp	r0, #0
    8314:	d000      	beq.n	8318 <__aeabi_dsub+0x220>
    8316:	e0e7      	b.n	84e8 <__aeabi_dsub+0x3f0>
    8318:	4452      	add	r2, sl
    831a:	4552      	cmp	r2, sl
    831c:	4180      	sbcs	r0, r0
    831e:	1864      	adds	r4, r4, r1
    8320:	4240      	negs	r0, r0
    8322:	1824      	adds	r4, r4, r0
    8324:	0017      	movs	r7, r2
    8326:	2601      	movs	r6, #1
    8328:	0223      	lsls	r3, r4, #8
    832a:	d507      	bpl.n	833c <__aeabi_dsub+0x244>
    832c:	2602      	movs	r6, #2
    832e:	e7cf      	b.n	82d0 <__aeabi_dsub+0x1d8>
    8330:	4664      	mov	r4, ip
    8332:	432c      	orrs	r4, r5
    8334:	d100      	bne.n	8338 <__aeabi_dsub+0x240>
    8336:	e1b3      	b.n	86a0 <__aeabi_dsub+0x5a8>
    8338:	002c      	movs	r4, r5
    833a:	4667      	mov	r7, ip
    833c:	077b      	lsls	r3, r7, #29
    833e:	d000      	beq.n	8342 <__aeabi_dsub+0x24a>
    8340:	e762      	b.n	8208 <__aeabi_dsub+0x110>
    8342:	0763      	lsls	r3, r4, #29
    8344:	08ff      	lsrs	r7, r7, #3
    8346:	431f      	orrs	r7, r3
    8348:	2501      	movs	r5, #1
    834a:	4643      	mov	r3, r8
    834c:	08e4      	lsrs	r4, r4, #3
    834e:	401d      	ands	r5, r3
    8350:	e793      	b.n	827a <__aeabi_dsub+0x182>
    8352:	2d00      	cmp	r5, #0
    8354:	d178      	bne.n	8448 <__aeabi_dsub+0x350>
    8356:	1c75      	adds	r5, r6, #1
    8358:	056d      	lsls	r5, r5, #21
    835a:	0d6d      	lsrs	r5, r5, #21
    835c:	2d01      	cmp	r5, #1
    835e:	dc00      	bgt.n	8362 <__aeabi_dsub+0x26a>
    8360:	e0f2      	b.n	8548 <__aeabi_dsub+0x450>
    8362:	4650      	mov	r0, sl
    8364:	1a80      	subs	r0, r0, r2
    8366:	4582      	cmp	sl, r0
    8368:	41bf      	sbcs	r7, r7
    836a:	1a65      	subs	r5, r4, r1
    836c:	427f      	negs	r7, r7
    836e:	1bed      	subs	r5, r5, r7
    8370:	4684      	mov	ip, r0
    8372:	0228      	lsls	r0, r5, #8
    8374:	d400      	bmi.n	8378 <__aeabi_dsub+0x280>
    8376:	e08c      	b.n	8492 <__aeabi_dsub+0x39a>
    8378:	4650      	mov	r0, sl
    837a:	1a17      	subs	r7, r2, r0
    837c:	42ba      	cmp	r2, r7
    837e:	4192      	sbcs	r2, r2
    8380:	1b0c      	subs	r4, r1, r4
    8382:	4255      	negs	r5, r2
    8384:	1b65      	subs	r5, r4, r5
    8386:	4698      	mov	r8, r3
    8388:	e714      	b.n	81b4 <__aeabi_dsub+0xbc>
    838a:	2501      	movs	r5, #1
    838c:	4643      	mov	r3, r8
    838e:	2400      	movs	r4, #0
    8390:	401d      	ands	r5, r3
    8392:	2700      	movs	r7, #0
    8394:	e755      	b.n	8242 <__aeabi_dsub+0x14a>
    8396:	4c2a      	ldr	r4, [pc, #168]	; (8440 <__aeabi_dsub+0x348>)
    8398:	1af6      	subs	r6, r6, r3
    839a:	402c      	ands	r4, r5
    839c:	e732      	b.n	8204 <__aeabi_dsub+0x10c>
    839e:	003d      	movs	r5, r7
    83a0:	3828      	subs	r0, #40	; 0x28
    83a2:	4085      	lsls	r5, r0
    83a4:	2700      	movs	r7, #0
    83a6:	e717      	b.n	81d8 <__aeabi_dsub+0xe0>
    83a8:	0038      	movs	r0, r7
    83aa:	f000 fb65 	bl	8a78 <__clzsi2>
    83ae:	3020      	adds	r0, #32
    83b0:	e706      	b.n	81c0 <__aeabi_dsub+0xc8>
    83b2:	430a      	orrs	r2, r1
    83b4:	0017      	movs	r7, r2
    83b6:	2100      	movs	r1, #0
    83b8:	1e7a      	subs	r2, r7, #1
    83ba:	4197      	sbcs	r7, r2
    83bc:	e6ee      	b.n	819c <__aeabi_dsub+0xa4>
    83be:	2b00      	cmp	r3, #0
    83c0:	d000      	beq.n	83c4 <__aeabi_dsub+0x2cc>
    83c2:	e0e5      	b.n	8590 <__aeabi_dsub+0x498>
    83c4:	1c73      	adds	r3, r6, #1
    83c6:	469c      	mov	ip, r3
    83c8:	055b      	lsls	r3, r3, #21
    83ca:	0d5b      	lsrs	r3, r3, #21
    83cc:	2b01      	cmp	r3, #1
    83ce:	dc00      	bgt.n	83d2 <__aeabi_dsub+0x2da>
    83d0:	e09f      	b.n	8512 <__aeabi_dsub+0x41a>
    83d2:	4b1a      	ldr	r3, [pc, #104]	; (843c <__aeabi_dsub+0x344>)
    83d4:	459c      	cmp	ip, r3
    83d6:	d100      	bne.n	83da <__aeabi_dsub+0x2e2>
    83d8:	e0c5      	b.n	8566 <__aeabi_dsub+0x46e>
    83da:	4452      	add	r2, sl
    83dc:	4552      	cmp	r2, sl
    83de:	4180      	sbcs	r0, r0
    83e0:	1864      	adds	r4, r4, r1
    83e2:	4240      	negs	r0, r0
    83e4:	1824      	adds	r4, r4, r0
    83e6:	07e7      	lsls	r7, r4, #31
    83e8:	0852      	lsrs	r2, r2, #1
    83ea:	4317      	orrs	r7, r2
    83ec:	0864      	lsrs	r4, r4, #1
    83ee:	4666      	mov	r6, ip
    83f0:	e708      	b.n	8204 <__aeabi_dsub+0x10c>
    83f2:	4812      	ldr	r0, [pc, #72]	; (843c <__aeabi_dsub+0x344>)
    83f4:	4285      	cmp	r5, r0
    83f6:	d100      	bne.n	83fa <__aeabi_dsub+0x302>
    83f8:	e085      	b.n	8506 <__aeabi_dsub+0x40e>
    83fa:	001d      	movs	r5, r3
    83fc:	e6bc      	b.n	8178 <__aeabi_dsub+0x80>
    83fe:	0029      	movs	r1, r5
    8400:	3e1f      	subs	r6, #31
    8402:	40f1      	lsrs	r1, r6
    8404:	2b20      	cmp	r3, #32
    8406:	d100      	bne.n	840a <__aeabi_dsub+0x312>
    8408:	e07f      	b.n	850a <__aeabi_dsub+0x412>
    840a:	2240      	movs	r2, #64	; 0x40
    840c:	1ad3      	subs	r3, r2, r3
    840e:	409d      	lsls	r5, r3
    8410:	432f      	orrs	r7, r5
    8412:	1e7d      	subs	r5, r7, #1
    8414:	41af      	sbcs	r7, r5
    8416:	2400      	movs	r4, #0
    8418:	430f      	orrs	r7, r1
    841a:	2600      	movs	r6, #0
    841c:	e78e      	b.n	833c <__aeabi_dsub+0x244>
    841e:	002b      	movs	r3, r5
    8420:	000f      	movs	r7, r1
    8422:	3b20      	subs	r3, #32
    8424:	40df      	lsrs	r7, r3
    8426:	2d20      	cmp	r5, #32
    8428:	d071      	beq.n	850e <__aeabi_dsub+0x416>
    842a:	2340      	movs	r3, #64	; 0x40
    842c:	1b5d      	subs	r5, r3, r5
    842e:	40a9      	lsls	r1, r5
    8430:	430a      	orrs	r2, r1
    8432:	1e51      	subs	r1, r2, #1
    8434:	418a      	sbcs	r2, r1
    8436:	2100      	movs	r1, #0
    8438:	4317      	orrs	r7, r2
    843a:	e6af      	b.n	819c <__aeabi_dsub+0xa4>
    843c:	000007ff 	.word	0x000007ff
    8440:	ff7fffff 	.word	0xff7fffff
    8444:	800fffff 	.word	0x800fffff
    8448:	2e00      	cmp	r6, #0
    844a:	d03e      	beq.n	84ca <__aeabi_dsub+0x3d2>
    844c:	4eb3      	ldr	r6, [pc, #716]	; (871c <__aeabi_dsub+0x624>)
    844e:	45b4      	cmp	ip, r6
    8450:	d045      	beq.n	84de <__aeabi_dsub+0x3e6>
    8452:	2680      	movs	r6, #128	; 0x80
    8454:	0436      	lsls	r6, r6, #16
    8456:	426d      	negs	r5, r5
    8458:	4334      	orrs	r4, r6
    845a:	2d38      	cmp	r5, #56	; 0x38
    845c:	dd00      	ble.n	8460 <__aeabi_dsub+0x368>
    845e:	e0a8      	b.n	85b2 <__aeabi_dsub+0x4ba>
    8460:	2d1f      	cmp	r5, #31
    8462:	dd00      	ble.n	8466 <__aeabi_dsub+0x36e>
    8464:	e11f      	b.n	86a6 <__aeabi_dsub+0x5ae>
    8466:	2620      	movs	r6, #32
    8468:	0027      	movs	r7, r4
    846a:	4650      	mov	r0, sl
    846c:	1b76      	subs	r6, r6, r5
    846e:	40b7      	lsls	r7, r6
    8470:	40e8      	lsrs	r0, r5
    8472:	4307      	orrs	r7, r0
    8474:	4650      	mov	r0, sl
    8476:	40b0      	lsls	r0, r6
    8478:	1e46      	subs	r6, r0, #1
    847a:	41b0      	sbcs	r0, r6
    847c:	40ec      	lsrs	r4, r5
    847e:	4338      	orrs	r0, r7
    8480:	1a17      	subs	r7, r2, r0
    8482:	42ba      	cmp	r2, r7
    8484:	4192      	sbcs	r2, r2
    8486:	1b0c      	subs	r4, r1, r4
    8488:	4252      	negs	r2, r2
    848a:	1aa4      	subs	r4, r4, r2
    848c:	4666      	mov	r6, ip
    848e:	4698      	mov	r8, r3
    8490:	e68b      	b.n	81aa <__aeabi_dsub+0xb2>
    8492:	4664      	mov	r4, ip
    8494:	4667      	mov	r7, ip
    8496:	432c      	orrs	r4, r5
    8498:	d000      	beq.n	849c <__aeabi_dsub+0x3a4>
    849a:	e68b      	b.n	81b4 <__aeabi_dsub+0xbc>
    849c:	2500      	movs	r5, #0
    849e:	2600      	movs	r6, #0
    84a0:	2700      	movs	r7, #0
    84a2:	e6ea      	b.n	827a <__aeabi_dsub+0x182>
    84a4:	001e      	movs	r6, r3
    84a6:	e6ad      	b.n	8204 <__aeabi_dsub+0x10c>
    84a8:	2b1f      	cmp	r3, #31
    84aa:	dc60      	bgt.n	856e <__aeabi_dsub+0x476>
    84ac:	2720      	movs	r7, #32
    84ae:	1af8      	subs	r0, r7, r3
    84b0:	000f      	movs	r7, r1
    84b2:	4684      	mov	ip, r0
    84b4:	4087      	lsls	r7, r0
    84b6:	0010      	movs	r0, r2
    84b8:	40d8      	lsrs	r0, r3
    84ba:	4307      	orrs	r7, r0
    84bc:	4660      	mov	r0, ip
    84be:	4082      	lsls	r2, r0
    84c0:	1e50      	subs	r0, r2, #1
    84c2:	4182      	sbcs	r2, r0
    84c4:	40d9      	lsrs	r1, r3
    84c6:	4317      	orrs	r7, r2
    84c8:	e6f5      	b.n	82b6 <__aeabi_dsub+0x1be>
    84ca:	0026      	movs	r6, r4
    84cc:	4650      	mov	r0, sl
    84ce:	4306      	orrs	r6, r0
    84d0:	d005      	beq.n	84de <__aeabi_dsub+0x3e6>
    84d2:	43ed      	mvns	r5, r5
    84d4:	2d00      	cmp	r5, #0
    84d6:	d0d3      	beq.n	8480 <__aeabi_dsub+0x388>
    84d8:	4e90      	ldr	r6, [pc, #576]	; (871c <__aeabi_dsub+0x624>)
    84da:	45b4      	cmp	ip, r6
    84dc:	d1bd      	bne.n	845a <__aeabi_dsub+0x362>
    84de:	000c      	movs	r4, r1
    84e0:	0017      	movs	r7, r2
    84e2:	4666      	mov	r6, ip
    84e4:	4698      	mov	r8, r3
    84e6:	e68d      	b.n	8204 <__aeabi_dsub+0x10c>
    84e8:	488c      	ldr	r0, [pc, #560]	; (871c <__aeabi_dsub+0x624>)
    84ea:	4283      	cmp	r3, r0
    84ec:	d00b      	beq.n	8506 <__aeabi_dsub+0x40e>
    84ee:	4663      	mov	r3, ip
    84f0:	e6d9      	b.n	82a6 <__aeabi_dsub+0x1ae>
    84f2:	2d00      	cmp	r5, #0
    84f4:	d000      	beq.n	84f8 <__aeabi_dsub+0x400>
    84f6:	e096      	b.n	8626 <__aeabi_dsub+0x52e>
    84f8:	0008      	movs	r0, r1
    84fa:	4310      	orrs	r0, r2
    84fc:	d100      	bne.n	8500 <__aeabi_dsub+0x408>
    84fe:	e0e2      	b.n	86c6 <__aeabi_dsub+0x5ce>
    8500:	000c      	movs	r4, r1
    8502:	0017      	movs	r7, r2
    8504:	4698      	mov	r8, r3
    8506:	4e85      	ldr	r6, [pc, #532]	; (871c <__aeabi_dsub+0x624>)
    8508:	e67c      	b.n	8204 <__aeabi_dsub+0x10c>
    850a:	2500      	movs	r5, #0
    850c:	e780      	b.n	8410 <__aeabi_dsub+0x318>
    850e:	2100      	movs	r1, #0
    8510:	e78e      	b.n	8430 <__aeabi_dsub+0x338>
    8512:	0023      	movs	r3, r4
    8514:	4650      	mov	r0, sl
    8516:	4303      	orrs	r3, r0
    8518:	2e00      	cmp	r6, #0
    851a:	d000      	beq.n	851e <__aeabi_dsub+0x426>
    851c:	e0a8      	b.n	8670 <__aeabi_dsub+0x578>
    851e:	2b00      	cmp	r3, #0
    8520:	d100      	bne.n	8524 <__aeabi_dsub+0x42c>
    8522:	e0de      	b.n	86e2 <__aeabi_dsub+0x5ea>
    8524:	000b      	movs	r3, r1
    8526:	4313      	orrs	r3, r2
    8528:	d100      	bne.n	852c <__aeabi_dsub+0x434>
    852a:	e66b      	b.n	8204 <__aeabi_dsub+0x10c>
    852c:	4452      	add	r2, sl
    852e:	4552      	cmp	r2, sl
    8530:	4180      	sbcs	r0, r0
    8532:	1864      	adds	r4, r4, r1
    8534:	4240      	negs	r0, r0
    8536:	1824      	adds	r4, r4, r0
    8538:	0017      	movs	r7, r2
    853a:	0223      	lsls	r3, r4, #8
    853c:	d400      	bmi.n	8540 <__aeabi_dsub+0x448>
    853e:	e6fd      	b.n	833c <__aeabi_dsub+0x244>
    8540:	4b77      	ldr	r3, [pc, #476]	; (8720 <__aeabi_dsub+0x628>)
    8542:	4666      	mov	r6, ip
    8544:	401c      	ands	r4, r3
    8546:	e65d      	b.n	8204 <__aeabi_dsub+0x10c>
    8548:	0025      	movs	r5, r4
    854a:	4650      	mov	r0, sl
    854c:	4305      	orrs	r5, r0
    854e:	2e00      	cmp	r6, #0
    8550:	d1cf      	bne.n	84f2 <__aeabi_dsub+0x3fa>
    8552:	2d00      	cmp	r5, #0
    8554:	d14f      	bne.n	85f6 <__aeabi_dsub+0x4fe>
    8556:	000c      	movs	r4, r1
    8558:	4314      	orrs	r4, r2
    855a:	d100      	bne.n	855e <__aeabi_dsub+0x466>
    855c:	e0a0      	b.n	86a0 <__aeabi_dsub+0x5a8>
    855e:	000c      	movs	r4, r1
    8560:	0017      	movs	r7, r2
    8562:	4698      	mov	r8, r3
    8564:	e64e      	b.n	8204 <__aeabi_dsub+0x10c>
    8566:	4666      	mov	r6, ip
    8568:	2400      	movs	r4, #0
    856a:	2700      	movs	r7, #0
    856c:	e685      	b.n	827a <__aeabi_dsub+0x182>
    856e:	001f      	movs	r7, r3
    8570:	0008      	movs	r0, r1
    8572:	3f20      	subs	r7, #32
    8574:	40f8      	lsrs	r0, r7
    8576:	0007      	movs	r7, r0
    8578:	2b20      	cmp	r3, #32
    857a:	d100      	bne.n	857e <__aeabi_dsub+0x486>
    857c:	e08e      	b.n	869c <__aeabi_dsub+0x5a4>
    857e:	2040      	movs	r0, #64	; 0x40
    8580:	1ac3      	subs	r3, r0, r3
    8582:	4099      	lsls	r1, r3
    8584:	430a      	orrs	r2, r1
    8586:	1e51      	subs	r1, r2, #1
    8588:	418a      	sbcs	r2, r1
    858a:	2100      	movs	r1, #0
    858c:	4317      	orrs	r7, r2
    858e:	e692      	b.n	82b6 <__aeabi_dsub+0x1be>
    8590:	2e00      	cmp	r6, #0
    8592:	d114      	bne.n	85be <__aeabi_dsub+0x4c6>
    8594:	0026      	movs	r6, r4
    8596:	4650      	mov	r0, sl
    8598:	4306      	orrs	r6, r0
    859a:	d062      	beq.n	8662 <__aeabi_dsub+0x56a>
    859c:	43db      	mvns	r3, r3
    859e:	2b00      	cmp	r3, #0
    85a0:	d15c      	bne.n	865c <__aeabi_dsub+0x564>
    85a2:	1887      	adds	r7, r0, r2
    85a4:	4297      	cmp	r7, r2
    85a6:	4192      	sbcs	r2, r2
    85a8:	1864      	adds	r4, r4, r1
    85aa:	4252      	negs	r2, r2
    85ac:	18a4      	adds	r4, r4, r2
    85ae:	4666      	mov	r6, ip
    85b0:	e687      	b.n	82c2 <__aeabi_dsub+0x1ca>
    85b2:	4650      	mov	r0, sl
    85b4:	4320      	orrs	r0, r4
    85b6:	1e44      	subs	r4, r0, #1
    85b8:	41a0      	sbcs	r0, r4
    85ba:	2400      	movs	r4, #0
    85bc:	e760      	b.n	8480 <__aeabi_dsub+0x388>
    85be:	4e57      	ldr	r6, [pc, #348]	; (871c <__aeabi_dsub+0x624>)
    85c0:	45b4      	cmp	ip, r6
    85c2:	d04e      	beq.n	8662 <__aeabi_dsub+0x56a>
    85c4:	2680      	movs	r6, #128	; 0x80
    85c6:	0436      	lsls	r6, r6, #16
    85c8:	425b      	negs	r3, r3
    85ca:	4334      	orrs	r4, r6
    85cc:	2b38      	cmp	r3, #56	; 0x38
    85ce:	dd00      	ble.n	85d2 <__aeabi_dsub+0x4da>
    85d0:	e07f      	b.n	86d2 <__aeabi_dsub+0x5da>
    85d2:	2b1f      	cmp	r3, #31
    85d4:	dd00      	ble.n	85d8 <__aeabi_dsub+0x4e0>
    85d6:	e08b      	b.n	86f0 <__aeabi_dsub+0x5f8>
    85d8:	2620      	movs	r6, #32
    85da:	0027      	movs	r7, r4
    85dc:	4650      	mov	r0, sl
    85de:	1af6      	subs	r6, r6, r3
    85e0:	40b7      	lsls	r7, r6
    85e2:	40d8      	lsrs	r0, r3
    85e4:	4307      	orrs	r7, r0
    85e6:	4650      	mov	r0, sl
    85e8:	40b0      	lsls	r0, r6
    85ea:	1e46      	subs	r6, r0, #1
    85ec:	41b0      	sbcs	r0, r6
    85ee:	4307      	orrs	r7, r0
    85f0:	40dc      	lsrs	r4, r3
    85f2:	18bf      	adds	r7, r7, r2
    85f4:	e7d6      	b.n	85a4 <__aeabi_dsub+0x4ac>
    85f6:	000d      	movs	r5, r1
    85f8:	4315      	orrs	r5, r2
    85fa:	d100      	bne.n	85fe <__aeabi_dsub+0x506>
    85fc:	e602      	b.n	8204 <__aeabi_dsub+0x10c>
    85fe:	4650      	mov	r0, sl
    8600:	1a80      	subs	r0, r0, r2
    8602:	4582      	cmp	sl, r0
    8604:	41bf      	sbcs	r7, r7
    8606:	1a65      	subs	r5, r4, r1
    8608:	427f      	negs	r7, r7
    860a:	1bed      	subs	r5, r5, r7
    860c:	4684      	mov	ip, r0
    860e:	0228      	lsls	r0, r5, #8
    8610:	d400      	bmi.n	8614 <__aeabi_dsub+0x51c>
    8612:	e68d      	b.n	8330 <__aeabi_dsub+0x238>
    8614:	4650      	mov	r0, sl
    8616:	1a17      	subs	r7, r2, r0
    8618:	42ba      	cmp	r2, r7
    861a:	4192      	sbcs	r2, r2
    861c:	1b0c      	subs	r4, r1, r4
    861e:	4252      	negs	r2, r2
    8620:	1aa4      	subs	r4, r4, r2
    8622:	4698      	mov	r8, r3
    8624:	e5ee      	b.n	8204 <__aeabi_dsub+0x10c>
    8626:	000d      	movs	r5, r1
    8628:	4315      	orrs	r5, r2
    862a:	d100      	bne.n	862e <__aeabi_dsub+0x536>
    862c:	e76b      	b.n	8506 <__aeabi_dsub+0x40e>
    862e:	4650      	mov	r0, sl
    8630:	0767      	lsls	r7, r4, #29
    8632:	08c0      	lsrs	r0, r0, #3
    8634:	4307      	orrs	r7, r0
    8636:	2080      	movs	r0, #128	; 0x80
    8638:	08e4      	lsrs	r4, r4, #3
    863a:	0300      	lsls	r0, r0, #12
    863c:	4204      	tst	r4, r0
    863e:	d007      	beq.n	8650 <__aeabi_dsub+0x558>
    8640:	08cd      	lsrs	r5, r1, #3
    8642:	4205      	tst	r5, r0
    8644:	d104      	bne.n	8650 <__aeabi_dsub+0x558>
    8646:	002c      	movs	r4, r5
    8648:	4698      	mov	r8, r3
    864a:	08d7      	lsrs	r7, r2, #3
    864c:	0749      	lsls	r1, r1, #29
    864e:	430f      	orrs	r7, r1
    8650:	0f7b      	lsrs	r3, r7, #29
    8652:	00e4      	lsls	r4, r4, #3
    8654:	431c      	orrs	r4, r3
    8656:	00ff      	lsls	r7, r7, #3
    8658:	4e30      	ldr	r6, [pc, #192]	; (871c <__aeabi_dsub+0x624>)
    865a:	e5d3      	b.n	8204 <__aeabi_dsub+0x10c>
    865c:	4e2f      	ldr	r6, [pc, #188]	; (871c <__aeabi_dsub+0x624>)
    865e:	45b4      	cmp	ip, r6
    8660:	d1b4      	bne.n	85cc <__aeabi_dsub+0x4d4>
    8662:	000c      	movs	r4, r1
    8664:	0017      	movs	r7, r2
    8666:	4666      	mov	r6, ip
    8668:	e5cc      	b.n	8204 <__aeabi_dsub+0x10c>
    866a:	2700      	movs	r7, #0
    866c:	2400      	movs	r4, #0
    866e:	e5e8      	b.n	8242 <__aeabi_dsub+0x14a>
    8670:	2b00      	cmp	r3, #0
    8672:	d039      	beq.n	86e8 <__aeabi_dsub+0x5f0>
    8674:	000b      	movs	r3, r1
    8676:	4313      	orrs	r3, r2
    8678:	d100      	bne.n	867c <__aeabi_dsub+0x584>
    867a:	e744      	b.n	8506 <__aeabi_dsub+0x40e>
    867c:	08c0      	lsrs	r0, r0, #3
    867e:	0767      	lsls	r7, r4, #29
    8680:	4307      	orrs	r7, r0
    8682:	2080      	movs	r0, #128	; 0x80
    8684:	08e4      	lsrs	r4, r4, #3
    8686:	0300      	lsls	r0, r0, #12
    8688:	4204      	tst	r4, r0
    868a:	d0e1      	beq.n	8650 <__aeabi_dsub+0x558>
    868c:	08cb      	lsrs	r3, r1, #3
    868e:	4203      	tst	r3, r0
    8690:	d1de      	bne.n	8650 <__aeabi_dsub+0x558>
    8692:	08d7      	lsrs	r7, r2, #3
    8694:	0749      	lsls	r1, r1, #29
    8696:	430f      	orrs	r7, r1
    8698:	001c      	movs	r4, r3
    869a:	e7d9      	b.n	8650 <__aeabi_dsub+0x558>
    869c:	2100      	movs	r1, #0
    869e:	e771      	b.n	8584 <__aeabi_dsub+0x48c>
    86a0:	2500      	movs	r5, #0
    86a2:	2700      	movs	r7, #0
    86a4:	e5e9      	b.n	827a <__aeabi_dsub+0x182>
    86a6:	002e      	movs	r6, r5
    86a8:	0027      	movs	r7, r4
    86aa:	3e20      	subs	r6, #32
    86ac:	40f7      	lsrs	r7, r6
    86ae:	2d20      	cmp	r5, #32
    86b0:	d02f      	beq.n	8712 <__aeabi_dsub+0x61a>
    86b2:	2640      	movs	r6, #64	; 0x40
    86b4:	1b75      	subs	r5, r6, r5
    86b6:	40ac      	lsls	r4, r5
    86b8:	4650      	mov	r0, sl
    86ba:	4320      	orrs	r0, r4
    86bc:	1e44      	subs	r4, r0, #1
    86be:	41a0      	sbcs	r0, r4
    86c0:	2400      	movs	r4, #0
    86c2:	4338      	orrs	r0, r7
    86c4:	e6dc      	b.n	8480 <__aeabi_dsub+0x388>
    86c6:	2480      	movs	r4, #128	; 0x80
    86c8:	2500      	movs	r5, #0
    86ca:	0324      	lsls	r4, r4, #12
    86cc:	4e13      	ldr	r6, [pc, #76]	; (871c <__aeabi_dsub+0x624>)
    86ce:	2700      	movs	r7, #0
    86d0:	e5d3      	b.n	827a <__aeabi_dsub+0x182>
    86d2:	4650      	mov	r0, sl
    86d4:	4320      	orrs	r0, r4
    86d6:	0007      	movs	r7, r0
    86d8:	1e78      	subs	r0, r7, #1
    86da:	4187      	sbcs	r7, r0
    86dc:	2400      	movs	r4, #0
    86de:	18bf      	adds	r7, r7, r2
    86e0:	e760      	b.n	85a4 <__aeabi_dsub+0x4ac>
    86e2:	000c      	movs	r4, r1
    86e4:	0017      	movs	r7, r2
    86e6:	e58d      	b.n	8204 <__aeabi_dsub+0x10c>
    86e8:	000c      	movs	r4, r1
    86ea:	0017      	movs	r7, r2
    86ec:	4e0b      	ldr	r6, [pc, #44]	; (871c <__aeabi_dsub+0x624>)
    86ee:	e589      	b.n	8204 <__aeabi_dsub+0x10c>
    86f0:	001e      	movs	r6, r3
    86f2:	0027      	movs	r7, r4
    86f4:	3e20      	subs	r6, #32
    86f6:	40f7      	lsrs	r7, r6
    86f8:	2b20      	cmp	r3, #32
    86fa:	d00c      	beq.n	8716 <__aeabi_dsub+0x61e>
    86fc:	2640      	movs	r6, #64	; 0x40
    86fe:	1af3      	subs	r3, r6, r3
    8700:	409c      	lsls	r4, r3
    8702:	4650      	mov	r0, sl
    8704:	4320      	orrs	r0, r4
    8706:	1e44      	subs	r4, r0, #1
    8708:	41a0      	sbcs	r0, r4
    870a:	4307      	orrs	r7, r0
    870c:	2400      	movs	r4, #0
    870e:	18bf      	adds	r7, r7, r2
    8710:	e748      	b.n	85a4 <__aeabi_dsub+0x4ac>
    8712:	2400      	movs	r4, #0
    8714:	e7d0      	b.n	86b8 <__aeabi_dsub+0x5c0>
    8716:	2400      	movs	r4, #0
    8718:	e7f3      	b.n	8702 <__aeabi_dsub+0x60a>
    871a:	46c0      	nop			; (mov r8, r8)
    871c:	000007ff 	.word	0x000007ff
    8720:	ff7fffff 	.word	0xff7fffff

00008724 <__aeabi_dcmpun>:
    8724:	b570      	push	{r4, r5, r6, lr}
    8726:	4e0e      	ldr	r6, [pc, #56]	; (8760 <__aeabi_dcmpun+0x3c>)
    8728:	030d      	lsls	r5, r1, #12
    872a:	031c      	lsls	r4, r3, #12
    872c:	0049      	lsls	r1, r1, #1
    872e:	005b      	lsls	r3, r3, #1
    8730:	0b2d      	lsrs	r5, r5, #12
    8732:	0d49      	lsrs	r1, r1, #21
    8734:	0b24      	lsrs	r4, r4, #12
    8736:	0d5b      	lsrs	r3, r3, #21
    8738:	42b1      	cmp	r1, r6
    873a:	d004      	beq.n	8746 <__aeabi_dcmpun+0x22>
    873c:	4908      	ldr	r1, [pc, #32]	; (8760 <__aeabi_dcmpun+0x3c>)
    873e:	2000      	movs	r0, #0
    8740:	428b      	cmp	r3, r1
    8742:	d008      	beq.n	8756 <__aeabi_dcmpun+0x32>
    8744:	bd70      	pop	{r4, r5, r6, pc}
    8746:	4305      	orrs	r5, r0
    8748:	2001      	movs	r0, #1
    874a:	2d00      	cmp	r5, #0
    874c:	d1fa      	bne.n	8744 <__aeabi_dcmpun+0x20>
    874e:	4904      	ldr	r1, [pc, #16]	; (8760 <__aeabi_dcmpun+0x3c>)
    8750:	2000      	movs	r0, #0
    8752:	428b      	cmp	r3, r1
    8754:	d1f6      	bne.n	8744 <__aeabi_dcmpun+0x20>
    8756:	4314      	orrs	r4, r2
    8758:	0020      	movs	r0, r4
    875a:	1e44      	subs	r4, r0, #1
    875c:	41a0      	sbcs	r0, r4
    875e:	e7f1      	b.n	8744 <__aeabi_dcmpun+0x20>
    8760:	000007ff 	.word	0x000007ff

00008764 <__aeabi_d2iz>:
    8764:	b530      	push	{r4, r5, lr}
    8766:	4d13      	ldr	r5, [pc, #76]	; (87b4 <__aeabi_d2iz+0x50>)
    8768:	030a      	lsls	r2, r1, #12
    876a:	004b      	lsls	r3, r1, #1
    876c:	0b12      	lsrs	r2, r2, #12
    876e:	0d5b      	lsrs	r3, r3, #21
    8770:	0fc9      	lsrs	r1, r1, #31
    8772:	2400      	movs	r4, #0
    8774:	42ab      	cmp	r3, r5
    8776:	dd10      	ble.n	879a <__aeabi_d2iz+0x36>
    8778:	4c0f      	ldr	r4, [pc, #60]	; (87b8 <__aeabi_d2iz+0x54>)
    877a:	42a3      	cmp	r3, r4
    877c:	dc0f      	bgt.n	879e <__aeabi_d2iz+0x3a>
    877e:	2480      	movs	r4, #128	; 0x80
    8780:	4d0e      	ldr	r5, [pc, #56]	; (87bc <__aeabi_d2iz+0x58>)
    8782:	0364      	lsls	r4, r4, #13
    8784:	4322      	orrs	r2, r4
    8786:	1aed      	subs	r5, r5, r3
    8788:	2d1f      	cmp	r5, #31
    878a:	dd0b      	ble.n	87a4 <__aeabi_d2iz+0x40>
    878c:	480c      	ldr	r0, [pc, #48]	; (87c0 <__aeabi_d2iz+0x5c>)
    878e:	1ac3      	subs	r3, r0, r3
    8790:	40da      	lsrs	r2, r3
    8792:	4254      	negs	r4, r2
    8794:	2900      	cmp	r1, #0
    8796:	d100      	bne.n	879a <__aeabi_d2iz+0x36>
    8798:	0014      	movs	r4, r2
    879a:	0020      	movs	r0, r4
    879c:	bd30      	pop	{r4, r5, pc}
    879e:	4b09      	ldr	r3, [pc, #36]	; (87c4 <__aeabi_d2iz+0x60>)
    87a0:	18cc      	adds	r4, r1, r3
    87a2:	e7fa      	b.n	879a <__aeabi_d2iz+0x36>
    87a4:	4c08      	ldr	r4, [pc, #32]	; (87c8 <__aeabi_d2iz+0x64>)
    87a6:	40e8      	lsrs	r0, r5
    87a8:	46a4      	mov	ip, r4
    87aa:	4463      	add	r3, ip
    87ac:	409a      	lsls	r2, r3
    87ae:	4302      	orrs	r2, r0
    87b0:	e7ef      	b.n	8792 <__aeabi_d2iz+0x2e>
    87b2:	46c0      	nop			; (mov r8, r8)
    87b4:	000003fe 	.word	0x000003fe
    87b8:	0000041d 	.word	0x0000041d
    87bc:	00000433 	.word	0x00000433
    87c0:	00000413 	.word	0x00000413
    87c4:	7fffffff 	.word	0x7fffffff
    87c8:	fffffbed 	.word	0xfffffbed

000087cc <__aeabi_i2d>:
    87cc:	b570      	push	{r4, r5, r6, lr}
    87ce:	2800      	cmp	r0, #0
    87d0:	d030      	beq.n	8834 <__aeabi_i2d+0x68>
    87d2:	17c3      	asrs	r3, r0, #31
    87d4:	18c4      	adds	r4, r0, r3
    87d6:	405c      	eors	r4, r3
    87d8:	0fc5      	lsrs	r5, r0, #31
    87da:	0020      	movs	r0, r4
    87dc:	f000 f94c 	bl	8a78 <__clzsi2>
    87e0:	4b17      	ldr	r3, [pc, #92]	; (8840 <__aeabi_i2d+0x74>)
    87e2:	4a18      	ldr	r2, [pc, #96]	; (8844 <__aeabi_i2d+0x78>)
    87e4:	1a1b      	subs	r3, r3, r0
    87e6:	1ad2      	subs	r2, r2, r3
    87e8:	2a1f      	cmp	r2, #31
    87ea:	dd18      	ble.n	881e <__aeabi_i2d+0x52>
    87ec:	4a16      	ldr	r2, [pc, #88]	; (8848 <__aeabi_i2d+0x7c>)
    87ee:	1ad2      	subs	r2, r2, r3
    87f0:	4094      	lsls	r4, r2
    87f2:	2200      	movs	r2, #0
    87f4:	0324      	lsls	r4, r4, #12
    87f6:	055b      	lsls	r3, r3, #21
    87f8:	0b24      	lsrs	r4, r4, #12
    87fa:	0d5b      	lsrs	r3, r3, #21
    87fc:	2100      	movs	r1, #0
    87fe:	0010      	movs	r0, r2
    8800:	0324      	lsls	r4, r4, #12
    8802:	0d0a      	lsrs	r2, r1, #20
    8804:	0b24      	lsrs	r4, r4, #12
    8806:	0512      	lsls	r2, r2, #20
    8808:	4322      	orrs	r2, r4
    880a:	4c10      	ldr	r4, [pc, #64]	; (884c <__aeabi_i2d+0x80>)
    880c:	051b      	lsls	r3, r3, #20
    880e:	4022      	ands	r2, r4
    8810:	4313      	orrs	r3, r2
    8812:	005b      	lsls	r3, r3, #1
    8814:	07ed      	lsls	r5, r5, #31
    8816:	085b      	lsrs	r3, r3, #1
    8818:	432b      	orrs	r3, r5
    881a:	0019      	movs	r1, r3
    881c:	bd70      	pop	{r4, r5, r6, pc}
    881e:	0021      	movs	r1, r4
    8820:	4091      	lsls	r1, r2
    8822:	000a      	movs	r2, r1
    8824:	210b      	movs	r1, #11
    8826:	1a08      	subs	r0, r1, r0
    8828:	40c4      	lsrs	r4, r0
    882a:	055b      	lsls	r3, r3, #21
    882c:	0324      	lsls	r4, r4, #12
    882e:	0b24      	lsrs	r4, r4, #12
    8830:	0d5b      	lsrs	r3, r3, #21
    8832:	e7e3      	b.n	87fc <__aeabi_i2d+0x30>
    8834:	2500      	movs	r5, #0
    8836:	2300      	movs	r3, #0
    8838:	2400      	movs	r4, #0
    883a:	2200      	movs	r2, #0
    883c:	e7de      	b.n	87fc <__aeabi_i2d+0x30>
    883e:	46c0      	nop			; (mov r8, r8)
    8840:	0000041e 	.word	0x0000041e
    8844:	00000433 	.word	0x00000433
    8848:	00000413 	.word	0x00000413
    884c:	800fffff 	.word	0x800fffff

00008850 <__aeabi_ui2d>:
    8850:	b510      	push	{r4, lr}
    8852:	1e04      	subs	r4, r0, #0
    8854:	d028      	beq.n	88a8 <__aeabi_ui2d+0x58>
    8856:	f000 f90f 	bl	8a78 <__clzsi2>
    885a:	4b15      	ldr	r3, [pc, #84]	; (88b0 <__aeabi_ui2d+0x60>)
    885c:	4a15      	ldr	r2, [pc, #84]	; (88b4 <__aeabi_ui2d+0x64>)
    885e:	1a1b      	subs	r3, r3, r0
    8860:	1ad2      	subs	r2, r2, r3
    8862:	2a1f      	cmp	r2, #31
    8864:	dd15      	ble.n	8892 <__aeabi_ui2d+0x42>
    8866:	4a14      	ldr	r2, [pc, #80]	; (88b8 <__aeabi_ui2d+0x68>)
    8868:	1ad2      	subs	r2, r2, r3
    886a:	4094      	lsls	r4, r2
    886c:	2200      	movs	r2, #0
    886e:	0324      	lsls	r4, r4, #12
    8870:	055b      	lsls	r3, r3, #21
    8872:	0b24      	lsrs	r4, r4, #12
    8874:	0d5b      	lsrs	r3, r3, #21
    8876:	2100      	movs	r1, #0
    8878:	0010      	movs	r0, r2
    887a:	0324      	lsls	r4, r4, #12
    887c:	0d0a      	lsrs	r2, r1, #20
    887e:	0b24      	lsrs	r4, r4, #12
    8880:	0512      	lsls	r2, r2, #20
    8882:	4322      	orrs	r2, r4
    8884:	4c0d      	ldr	r4, [pc, #52]	; (88bc <__aeabi_ui2d+0x6c>)
    8886:	051b      	lsls	r3, r3, #20
    8888:	4022      	ands	r2, r4
    888a:	4313      	orrs	r3, r2
    888c:	005b      	lsls	r3, r3, #1
    888e:	0859      	lsrs	r1, r3, #1
    8890:	bd10      	pop	{r4, pc}
    8892:	0021      	movs	r1, r4
    8894:	4091      	lsls	r1, r2
    8896:	000a      	movs	r2, r1
    8898:	210b      	movs	r1, #11
    889a:	1a08      	subs	r0, r1, r0
    889c:	40c4      	lsrs	r4, r0
    889e:	055b      	lsls	r3, r3, #21
    88a0:	0324      	lsls	r4, r4, #12
    88a2:	0b24      	lsrs	r4, r4, #12
    88a4:	0d5b      	lsrs	r3, r3, #21
    88a6:	e7e6      	b.n	8876 <__aeabi_ui2d+0x26>
    88a8:	2300      	movs	r3, #0
    88aa:	2400      	movs	r4, #0
    88ac:	2200      	movs	r2, #0
    88ae:	e7e2      	b.n	8876 <__aeabi_ui2d+0x26>
    88b0:	0000041e 	.word	0x0000041e
    88b4:	00000433 	.word	0x00000433
    88b8:	00000413 	.word	0x00000413
    88bc:	800fffff 	.word	0x800fffff

000088c0 <__aeabi_f2d>:
    88c0:	0041      	lsls	r1, r0, #1
    88c2:	0e09      	lsrs	r1, r1, #24
    88c4:	1c4b      	adds	r3, r1, #1
    88c6:	b570      	push	{r4, r5, r6, lr}
    88c8:	b2db      	uxtb	r3, r3
    88ca:	0246      	lsls	r6, r0, #9
    88cc:	0a75      	lsrs	r5, r6, #9
    88ce:	0fc4      	lsrs	r4, r0, #31
    88d0:	2b01      	cmp	r3, #1
    88d2:	dd14      	ble.n	88fe <__aeabi_f2d+0x3e>
    88d4:	23e0      	movs	r3, #224	; 0xe0
    88d6:	009b      	lsls	r3, r3, #2
    88d8:	076d      	lsls	r5, r5, #29
    88da:	0b36      	lsrs	r6, r6, #12
    88dc:	18cb      	adds	r3, r1, r3
    88de:	2100      	movs	r1, #0
    88e0:	0d0a      	lsrs	r2, r1, #20
    88e2:	0028      	movs	r0, r5
    88e4:	0512      	lsls	r2, r2, #20
    88e6:	4d1c      	ldr	r5, [pc, #112]	; (8958 <__aeabi_f2d+0x98>)
    88e8:	4332      	orrs	r2, r6
    88ea:	055b      	lsls	r3, r3, #21
    88ec:	402a      	ands	r2, r5
    88ee:	085b      	lsrs	r3, r3, #1
    88f0:	4313      	orrs	r3, r2
    88f2:	005b      	lsls	r3, r3, #1
    88f4:	07e4      	lsls	r4, r4, #31
    88f6:	085b      	lsrs	r3, r3, #1
    88f8:	4323      	orrs	r3, r4
    88fa:	0019      	movs	r1, r3
    88fc:	bd70      	pop	{r4, r5, r6, pc}
    88fe:	2900      	cmp	r1, #0
    8900:	d114      	bne.n	892c <__aeabi_f2d+0x6c>
    8902:	2d00      	cmp	r5, #0
    8904:	d01e      	beq.n	8944 <__aeabi_f2d+0x84>
    8906:	0028      	movs	r0, r5
    8908:	f000 f8b6 	bl	8a78 <__clzsi2>
    890c:	280a      	cmp	r0, #10
    890e:	dc1c      	bgt.n	894a <__aeabi_f2d+0x8a>
    8910:	230b      	movs	r3, #11
    8912:	002a      	movs	r2, r5
    8914:	1a1b      	subs	r3, r3, r0
    8916:	40da      	lsrs	r2, r3
    8918:	0003      	movs	r3, r0
    891a:	3315      	adds	r3, #21
    891c:	409d      	lsls	r5, r3
    891e:	4b0f      	ldr	r3, [pc, #60]	; (895c <__aeabi_f2d+0x9c>)
    8920:	0312      	lsls	r2, r2, #12
    8922:	1a1b      	subs	r3, r3, r0
    8924:	055b      	lsls	r3, r3, #21
    8926:	0b16      	lsrs	r6, r2, #12
    8928:	0d5b      	lsrs	r3, r3, #21
    892a:	e7d8      	b.n	88de <__aeabi_f2d+0x1e>
    892c:	2d00      	cmp	r5, #0
    892e:	d006      	beq.n	893e <__aeabi_f2d+0x7e>
    8930:	0b32      	lsrs	r2, r6, #12
    8932:	2680      	movs	r6, #128	; 0x80
    8934:	0336      	lsls	r6, r6, #12
    8936:	076d      	lsls	r5, r5, #29
    8938:	4316      	orrs	r6, r2
    893a:	4b09      	ldr	r3, [pc, #36]	; (8960 <__aeabi_f2d+0xa0>)
    893c:	e7cf      	b.n	88de <__aeabi_f2d+0x1e>
    893e:	4b08      	ldr	r3, [pc, #32]	; (8960 <__aeabi_f2d+0xa0>)
    8940:	2600      	movs	r6, #0
    8942:	e7cc      	b.n	88de <__aeabi_f2d+0x1e>
    8944:	2300      	movs	r3, #0
    8946:	2600      	movs	r6, #0
    8948:	e7c9      	b.n	88de <__aeabi_f2d+0x1e>
    894a:	0003      	movs	r3, r0
    894c:	002a      	movs	r2, r5
    894e:	3b0b      	subs	r3, #11
    8950:	409a      	lsls	r2, r3
    8952:	2500      	movs	r5, #0
    8954:	e7e3      	b.n	891e <__aeabi_f2d+0x5e>
    8956:	46c0      	nop			; (mov r8, r8)
    8958:	800fffff 	.word	0x800fffff
    895c:	00000389 	.word	0x00000389
    8960:	000007ff 	.word	0x000007ff

00008964 <__aeabi_d2f>:
    8964:	b5f0      	push	{r4, r5, r6, r7, lr}
    8966:	004c      	lsls	r4, r1, #1
    8968:	0d64      	lsrs	r4, r4, #21
    896a:	030b      	lsls	r3, r1, #12
    896c:	1c62      	adds	r2, r4, #1
    896e:	0f45      	lsrs	r5, r0, #29
    8970:	0a5b      	lsrs	r3, r3, #9
    8972:	0552      	lsls	r2, r2, #21
    8974:	432b      	orrs	r3, r5
    8976:	0fc9      	lsrs	r1, r1, #31
    8978:	00c5      	lsls	r5, r0, #3
    897a:	0d52      	lsrs	r2, r2, #21
    897c:	2a01      	cmp	r2, #1
    897e:	dd28      	ble.n	89d2 <__aeabi_d2f+0x6e>
    8980:	4a3a      	ldr	r2, [pc, #232]	; (8a6c <__aeabi_d2f+0x108>)
    8982:	18a6      	adds	r6, r4, r2
    8984:	2efe      	cmp	r6, #254	; 0xfe
    8986:	dc1b      	bgt.n	89c0 <__aeabi_d2f+0x5c>
    8988:	2e00      	cmp	r6, #0
    898a:	dd3e      	ble.n	8a0a <__aeabi_d2f+0xa6>
    898c:	0180      	lsls	r0, r0, #6
    898e:	0002      	movs	r2, r0
    8990:	1e50      	subs	r0, r2, #1
    8992:	4182      	sbcs	r2, r0
    8994:	0f6d      	lsrs	r5, r5, #29
    8996:	432a      	orrs	r2, r5
    8998:	00db      	lsls	r3, r3, #3
    899a:	4313      	orrs	r3, r2
    899c:	075a      	lsls	r2, r3, #29
    899e:	d004      	beq.n	89aa <__aeabi_d2f+0x46>
    89a0:	220f      	movs	r2, #15
    89a2:	401a      	ands	r2, r3
    89a4:	2a04      	cmp	r2, #4
    89a6:	d000      	beq.n	89aa <__aeabi_d2f+0x46>
    89a8:	3304      	adds	r3, #4
    89aa:	2280      	movs	r2, #128	; 0x80
    89ac:	04d2      	lsls	r2, r2, #19
    89ae:	401a      	ands	r2, r3
    89b0:	d05a      	beq.n	8a68 <__aeabi_d2f+0x104>
    89b2:	3601      	adds	r6, #1
    89b4:	2eff      	cmp	r6, #255	; 0xff
    89b6:	d003      	beq.n	89c0 <__aeabi_d2f+0x5c>
    89b8:	019b      	lsls	r3, r3, #6
    89ba:	0a5b      	lsrs	r3, r3, #9
    89bc:	b2f4      	uxtb	r4, r6
    89be:	e001      	b.n	89c4 <__aeabi_d2f+0x60>
    89c0:	24ff      	movs	r4, #255	; 0xff
    89c2:	2300      	movs	r3, #0
    89c4:	0258      	lsls	r0, r3, #9
    89c6:	05e4      	lsls	r4, r4, #23
    89c8:	0a40      	lsrs	r0, r0, #9
    89ca:	07c9      	lsls	r1, r1, #31
    89cc:	4320      	orrs	r0, r4
    89ce:	4308      	orrs	r0, r1
    89d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    89d2:	2c00      	cmp	r4, #0
    89d4:	d007      	beq.n	89e6 <__aeabi_d2f+0x82>
    89d6:	431d      	orrs	r5, r3
    89d8:	d0f2      	beq.n	89c0 <__aeabi_d2f+0x5c>
    89da:	2080      	movs	r0, #128	; 0x80
    89dc:	00db      	lsls	r3, r3, #3
    89de:	0480      	lsls	r0, r0, #18
    89e0:	4303      	orrs	r3, r0
    89e2:	26ff      	movs	r6, #255	; 0xff
    89e4:	e7da      	b.n	899c <__aeabi_d2f+0x38>
    89e6:	432b      	orrs	r3, r5
    89e8:	d003      	beq.n	89f2 <__aeabi_d2f+0x8e>
    89ea:	2305      	movs	r3, #5
    89ec:	08db      	lsrs	r3, r3, #3
    89ee:	2cff      	cmp	r4, #255	; 0xff
    89f0:	d003      	beq.n	89fa <__aeabi_d2f+0x96>
    89f2:	025b      	lsls	r3, r3, #9
    89f4:	0a5b      	lsrs	r3, r3, #9
    89f6:	b2e4      	uxtb	r4, r4
    89f8:	e7e4      	b.n	89c4 <__aeabi_d2f+0x60>
    89fa:	2b00      	cmp	r3, #0
    89fc:	d032      	beq.n	8a64 <__aeabi_d2f+0x100>
    89fe:	2080      	movs	r0, #128	; 0x80
    8a00:	03c0      	lsls	r0, r0, #15
    8a02:	4303      	orrs	r3, r0
    8a04:	025b      	lsls	r3, r3, #9
    8a06:	0a5b      	lsrs	r3, r3, #9
    8a08:	e7dc      	b.n	89c4 <__aeabi_d2f+0x60>
    8a0a:	0032      	movs	r2, r6
    8a0c:	3217      	adds	r2, #23
    8a0e:	db14      	blt.n	8a3a <__aeabi_d2f+0xd6>
    8a10:	2280      	movs	r2, #128	; 0x80
    8a12:	271e      	movs	r7, #30
    8a14:	0412      	lsls	r2, r2, #16
    8a16:	4313      	orrs	r3, r2
    8a18:	1bbf      	subs	r7, r7, r6
    8a1a:	2f1f      	cmp	r7, #31
    8a1c:	dc0f      	bgt.n	8a3e <__aeabi_d2f+0xda>
    8a1e:	4a14      	ldr	r2, [pc, #80]	; (8a70 <__aeabi_d2f+0x10c>)
    8a20:	4694      	mov	ip, r2
    8a22:	4464      	add	r4, ip
    8a24:	002a      	movs	r2, r5
    8a26:	40a5      	lsls	r5, r4
    8a28:	002e      	movs	r6, r5
    8a2a:	40a3      	lsls	r3, r4
    8a2c:	1e75      	subs	r5, r6, #1
    8a2e:	41ae      	sbcs	r6, r5
    8a30:	40fa      	lsrs	r2, r7
    8a32:	4333      	orrs	r3, r6
    8a34:	4313      	orrs	r3, r2
    8a36:	2600      	movs	r6, #0
    8a38:	e7b0      	b.n	899c <__aeabi_d2f+0x38>
    8a3a:	2400      	movs	r4, #0
    8a3c:	e7d5      	b.n	89ea <__aeabi_d2f+0x86>
    8a3e:	2202      	movs	r2, #2
    8a40:	4252      	negs	r2, r2
    8a42:	1b96      	subs	r6, r2, r6
    8a44:	001a      	movs	r2, r3
    8a46:	40f2      	lsrs	r2, r6
    8a48:	2f20      	cmp	r7, #32
    8a4a:	d009      	beq.n	8a60 <__aeabi_d2f+0xfc>
    8a4c:	4809      	ldr	r0, [pc, #36]	; (8a74 <__aeabi_d2f+0x110>)
    8a4e:	4684      	mov	ip, r0
    8a50:	4464      	add	r4, ip
    8a52:	40a3      	lsls	r3, r4
    8a54:	432b      	orrs	r3, r5
    8a56:	1e5d      	subs	r5, r3, #1
    8a58:	41ab      	sbcs	r3, r5
    8a5a:	2600      	movs	r6, #0
    8a5c:	4313      	orrs	r3, r2
    8a5e:	e79d      	b.n	899c <__aeabi_d2f+0x38>
    8a60:	2300      	movs	r3, #0
    8a62:	e7f7      	b.n	8a54 <__aeabi_d2f+0xf0>
    8a64:	2300      	movs	r3, #0
    8a66:	e7ad      	b.n	89c4 <__aeabi_d2f+0x60>
    8a68:	0034      	movs	r4, r6
    8a6a:	e7bf      	b.n	89ec <__aeabi_d2f+0x88>
    8a6c:	fffffc80 	.word	0xfffffc80
    8a70:	fffffc82 	.word	0xfffffc82
    8a74:	fffffca2 	.word	0xfffffca2

00008a78 <__clzsi2>:
    8a78:	211c      	movs	r1, #28
    8a7a:	2301      	movs	r3, #1
    8a7c:	041b      	lsls	r3, r3, #16
    8a7e:	4298      	cmp	r0, r3
    8a80:	d301      	bcc.n	8a86 <__clzsi2+0xe>
    8a82:	0c00      	lsrs	r0, r0, #16
    8a84:	3910      	subs	r1, #16
    8a86:	0a1b      	lsrs	r3, r3, #8
    8a88:	4298      	cmp	r0, r3
    8a8a:	d301      	bcc.n	8a90 <__clzsi2+0x18>
    8a8c:	0a00      	lsrs	r0, r0, #8
    8a8e:	3908      	subs	r1, #8
    8a90:	091b      	lsrs	r3, r3, #4
    8a92:	4298      	cmp	r0, r3
    8a94:	d301      	bcc.n	8a9a <__clzsi2+0x22>
    8a96:	0900      	lsrs	r0, r0, #4
    8a98:	3904      	subs	r1, #4
    8a9a:	a202      	add	r2, pc, #8	; (adr r2, 8aa4 <__clzsi2+0x2c>)
    8a9c:	5c10      	ldrb	r0, [r2, r0]
    8a9e:	1840      	adds	r0, r0, r1
    8aa0:	4770      	bx	lr
    8aa2:	46c0      	nop			; (mov r8, r8)
    8aa4:	02020304 	.word	0x02020304
    8aa8:	01010101 	.word	0x01010101
	...
    8ab4:	322e3525 	.word	0x322e3525
    8ab8:	25202c66 	.word	0x25202c66
    8abc:	66322e35 	.word	0x66322e35
    8ac0:	3525202c 	.word	0x3525202c
    8ac4:	0a66322e 	.word	0x0a66322e
    8ac8:	00000000 	.word	0x00000000

00008acc <_tcc_intflag>:
    8acc:	00000001 00000002 00000004 00000008     ................
    8adc:	00001000 00002000 00004000 00008000     ..... ...@......
    8aec:	00010000 00020000 00040000 00080000     ................

00008afc <tc_interrupt_vectors.12756>:
    8afc:	00141312 6c6c6548 6f77206f 21646c72     ....Hello world!
    8b0c:	00000000 42000800 42000c00 42001000     .......B...B...B
    8b1c:	42001400 42001800 42001c00 000019be     ...B...B...B....
    8b2c:	000019ba 000019ba 00001a1c 00001a1c     ................
    8b3c:	000019d2 000019c4 000019d8 00001a0a     ................
    8b4c:	00001c58 00001c38 00001c38 00001cc4     X...8...8.......
    8b5c:	00001c4a 00001c66 00001c3c 00001c74     J...f...<...t...
    8b6c:	00001cb4 42002c00 42003000 42003400     .....,.B.0.B.4.B

00008b7c <tc_interrupt_vectors.11884>:
    8b7c:	00141312 6e6f7246 6f622074 20647261     ....Front board 
    8b8c:	75746573 6f632070 656c706d 002e6574     setup complete..

00008b9c <_global_impure_ptr>:
    8b9c:	20000010 00464e49 00666e69 004e414e     ... INF.inf.NAN.
    8bac:	006e616e 31300030 35343332 39383736     nan.0.0123456789
    8bbc:	44434241 30004645 34333231 38373635     ABCDEF.012345678
    8bcc:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
    8bdc:	4e614e00 00000000                       .NaN....

00008be4 <__sf_fake_stderr>:
	...

00008c04 <__sf_fake_stdin>:
	...

00008c24 <__sf_fake_stdout>:
	...

00008c48 <__mprec_bigtens>:
    8c48:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    8c58:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    8c68:	7f73bf3c 75154fdd                       <.s..O.u

00008c70 <__mprec_tens>:
    8c70:	00000000 3ff00000 00000000 40240000     .......?......$@
    8c80:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    8c90:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    8ca0:	00000000 412e8480 00000000 416312d0     .......A......cA
    8cb0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    8cc0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    8cd0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    8ce0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    8cf0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    8d00:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    8d10:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    8d20:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    8d30:	79d99db4 44ea7843                       ...yCx.D

00008d38 <p05.6052>:
    8d38:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    8d48:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
    8d58:	5849534f 00002e00                                OSIX...

00008d5f <_ctype_>:
    8d5f:	20202000 20202020 28282020 20282828     .         ((((( 
    8d6f:	20202020 20202020 20202020 20202020                     
    8d7f:	10108820 10101010 10101010 10101010      ...............
    8d8f:	04040410 04040404 10040404 10101010     ................
    8d9f:	41411010 41414141 01010101 01010101     ..AAAAAA........
    8daf:	01010101 01010101 01010101 10101010     ................
    8dbf:	42421010 42424242 02020202 02020202     ..BBBBBB........
    8dcf:	02020202 02020202 02020202 10101010     ................
    8ddf:	00000020 00000000 00000000 00000000      ...............
	...
    8e5f:	00683c00 00680c00 00681e00 00676000     .<h...h...h..`g.
    8e6f:	00681e00 00680200 00681e00 00676000     ..h...h...h..`g.
    8e7f:	00680c00 00680c00 00680200 00676000     ..h...h...h..`g.
    8e8f:	00676800 00676800 00676800 00682400     .hg..hg..hg..$h.
    8e9f:	00680c00 00680c00 0067e000 0068c400     ..h...h...g...h.
    8eaf:	0067e000 00680200 0067e000 0068c400     ..g...h...g...h.
    8ebf:	00680c00 00680c00 00680200 0068c400     ..h...h...h...h.
    8ecf:	00676800 00676800 00676800 0068ce00     .hg..hg..hg...h.
    8edf:	006bbc00 006b0c00 006b0c00 006b0a00     ..k...k...k...k.
    8eef:	006bae00 006bae00 006ba400 006b0a00     ..k...k...k...k.
    8eff:	006bae00 006ba400 006bae00 006b0a00     ..k...k...k...k.
    8f0f:	006bb400 006bb400 006bb400 006c4400     ..k...k...k..Dl.
    8f1f:	00758800 00756a00 00752400 00744200     ..u..ju..$u..Bt.
    8f2f:	00752400 00755c00 00752400 00744200     .$u..\u..$u..Bt.
    8f3f:	00756a00 00756a00 00755c00 00744200     .ju..ju..\u..Bt.
    8f4f:	00743a00 00743a00 00743a00 0077a000     .:t..:t..:t...w.
    8f5f:	007de800 007ca800 007ca800 007ca400     ..}...|...|...|.
    8f6f:	007dc000 007dc000 007db200 007ca400     ..}...}...}...|.
    8f7f:	007dc000 007db200 007dc000 007ca400     ..}...}...}...|.
    8f8f:	007dc800 007dc800 007dc800 007fcc00     ..}...}...}.....
	...

00008fa0 <_init>:
    8fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8fa2:	46c0      	nop			; (mov r8, r8)
    8fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8fa6:	bc08      	pop	{r3}
    8fa8:	469e      	mov	lr, r3
    8faa:	4770      	bx	lr

00008fac <__init_array_start>:
    8fac:	000000dd 	.word	0x000000dd

00008fb0 <_fini>:
    8fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8fb2:	46c0      	nop			; (mov r8, r8)
    8fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8fb6:	bc08      	pop	{r3}
    8fb8:	469e      	mov	lr, r3
    8fba:	4770      	bx	lr

00008fbc <__fini_array_start>:
    8fbc:	000000b5 	.word	0x000000b5
