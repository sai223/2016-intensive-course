
front.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008ec0  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001dc  20000000  00008ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000148c  200001dc  0000909c  000201dc  2**2
                  ALLOC
  3 .stack        00002000  20001668  0000a528  000201dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  5 .comment      0000008c  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
  6 .debug_info   000608fe  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000859d  00000000  00000000  00080b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e49c  00000000  00000000  0008912b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c38  00000000  00000000  000975c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001438  00000000  00000000  000981ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002293a  00000000  00000000  00099637  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001d272  00000000  00000000  000bbf71  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a32d  00000000  00000000  000d91e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002d70  00000000  00000000  00163510  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	68 36 00 20 f5 26 00 00 f1 26 00 00 f1 26 00 00     h6. .&...&...&..
	...
      2c:	f1 26 00 00 00 00 00 00 00 00 00 00 f1 26 00 00     .&...........&..
      3c:	f1 26 00 00 f1 26 00 00 f1 26 00 00 f1 26 00 00     .&...&...&...&..
      4c:	f1 26 00 00 35 0a 00 00 f1 26 00 00 f1 26 00 00     .&..5....&...&..
      5c:	f1 26 00 00 f1 26 00 00 21 10 00 00 31 10 00 00     .&...&..!...1...
      6c:	41 10 00 00 51 10 00 00 61 10 00 00 71 10 00 00     A...Q...a...q...
      7c:	a9 04 00 00 b9 04 00 00 c9 04 00 00 d1 23 00 00     .............#..
      8c:	e1 23 00 00 f1 23 00 00 00 00 00 00 00 00 00 00     .#...#..........
      9c:	f1 26 00 00 f1 26 00 00 00 00 00 00 f1 26 00 00     .&...&.......&..
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001dc 	.word	0x200001dc
      d4:	00000000 	.word	0x00000000
      d8:	00008ec0 	.word	0x00008ec0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001e0 	.word	0x200001e0
     108:	00008ec0 	.word	0x00008ec0
     10c:	00008ec0 	.word	0x00008ec0
     110:	00000000 	.word	0x00000000

00000114 <artist_init_maze>:
*/

#include "Maze.h"

void artist_init_maze (void) {
	artist_front.maze_status = STOP;
     114:	2103      	movs	r1, #3
     116:	23d9      	movs	r3, #217	; 0xd9
     118:	4a01      	ldr	r2, [pc, #4]	; (120 <artist_init_maze+0xc>)
     11a:	54d1      	strb	r1, [r2, r3]
}
     11c:	4770      	bx	lr
     11e:	46c0      	nop			; (mov r8, r8)
     120:	200007b4 	.word	0x200007b4

00000124 <artist_do_maze>:
void artist_do_maze (void) {
     124:	b510      	push	{r4, lr}
	#ifdef ULTRASONIC_DEBUG_
	artist_print_ultrasonic_value();
     126:	4b27      	ldr	r3, [pc, #156]	; (1c4 <artist_do_maze+0xa0>)
     128:	4798      	blx	r3
	#endif
	if (artist_front.center_distance < 7) {
     12a:	4927      	ldr	r1, [pc, #156]	; (1c8 <artist_do_maze+0xa4>)
     12c:	23cc      	movs	r3, #204	; 0xcc
     12e:	4a27      	ldr	r2, [pc, #156]	; (1cc <artist_do_maze+0xa8>)
     130:	58d0      	ldr	r0, [r2, r3]
     132:	4b27      	ldr	r3, [pc, #156]	; (1d0 <artist_do_maze+0xac>)
     134:	4798      	blx	r3
     136:	2800      	cmp	r0, #0
     138:	d038      	beq.n	1ac <artist_do_maze+0x88>
			if (artist_front.left_distance < 12 && artist_front.right_distance < 12) {
     13a:	23d0      	movs	r3, #208	; 0xd0
     13c:	4a23      	ldr	r2, [pc, #140]	; (1cc <artist_do_maze+0xa8>)
     13e:	58d4      	ldr	r4, [r2, r3]
     140:	4924      	ldr	r1, [pc, #144]	; (1d4 <artist_do_maze+0xb0>)
     142:	1c20      	adds	r0, r4, #0
     144:	4b22      	ldr	r3, [pc, #136]	; (1d0 <artist_do_maze+0xac>)
     146:	4798      	blx	r3
     148:	2800      	cmp	r0, #0
     14a:	d011      	beq.n	170 <artist_do_maze+0x4c>
     14c:	4921      	ldr	r1, [pc, #132]	; (1d4 <artist_do_maze+0xb0>)
     14e:	23d4      	movs	r3, #212	; 0xd4
     150:	4a1e      	ldr	r2, [pc, #120]	; (1cc <artist_do_maze+0xa8>)
     152:	58d0      	ldr	r0, [r2, r3]
     154:	4b1e      	ldr	r3, [pc, #120]	; (1d0 <artist_do_maze+0xac>)
     156:	4798      	blx	r3
     158:	2800      	cmp	r0, #0
     15a:	d009      	beq.n	170 <artist_do_maze+0x4c>
				artist_front.maze_status = BACK;
     15c:	481b      	ldr	r0, [pc, #108]	; (1cc <artist_do_maze+0xa8>)
     15e:	2204      	movs	r2, #4
     160:	23d9      	movs	r3, #217	; 0xd9
     162:	54c2      	strb	r2, [r0, r3]
		break;
		case RIGHT :
		usart_write_buffer_job(&(artist_front.usart_instance), "md\0\0\n", MAX_RX_BUFFER_LENGTH);
		break;
		case BACK :
		usart_write_buffer_job(&(artist_front.usart_instance), "ms\0\0\n", MAX_RX_BUFFER_LENGTH);
     164:	3078      	adds	r0, #120	; 0x78
     166:	3201      	adds	r2, #1
     168:	491b      	ldr	r1, [pc, #108]	; (1d8 <artist_do_maze+0xb4>)
     16a:	4b1c      	ldr	r3, [pc, #112]	; (1dc <artist_do_maze+0xb8>)
     16c:	4798      	blx	r3
		break;
     16e:	e027      	b.n	1c0 <artist_do_maze+0x9c>
			else if  (artist_front.left_distance < artist_front.right_distance) {
     170:	23d4      	movs	r3, #212	; 0xd4
     172:	4a16      	ldr	r2, [pc, #88]	; (1cc <artist_do_maze+0xa8>)
     174:	58d1      	ldr	r1, [r2, r3]
     176:	1c20      	adds	r0, r4, #0
     178:	4b15      	ldr	r3, [pc, #84]	; (1d0 <artist_do_maze+0xac>)
     17a:	4798      	blx	r3
     17c:	2800      	cmp	r0, #0
     17e:	d00a      	beq.n	196 <artist_do_maze+0x72>
				artist_front.maze_status = RIGHT;
     180:	4812      	ldr	r0, [pc, #72]	; (1cc <artist_do_maze+0xa8>)
     182:	2202      	movs	r2, #2
     184:	23d9      	movs	r3, #217	; 0xd9
     186:	54c2      	strb	r2, [r0, r3]
		usart_write_buffer_job(&(artist_front.usart_instance), "md\0\0\n", MAX_RX_BUFFER_LENGTH);
     188:	3078      	adds	r0, #120	; 0x78
     18a:	3203      	adds	r2, #3
     18c:	4912      	ldr	r1, [pc, #72]	; (1d8 <artist_do_maze+0xb4>)
     18e:	3108      	adds	r1, #8
     190:	4b12      	ldr	r3, [pc, #72]	; (1dc <artist_do_maze+0xb8>)
     192:	4798      	blx	r3
		break;
     194:	e014      	b.n	1c0 <artist_do_maze+0x9c>
				artist_front.maze_status = LEFT;
     196:	480d      	ldr	r0, [pc, #52]	; (1cc <artist_do_maze+0xa8>)
     198:	2201      	movs	r2, #1
     19a:	23d9      	movs	r3, #217	; 0xd9
     19c:	54c2      	strb	r2, [r0, r3]
		usart_write_buffer_job(&(artist_front.usart_instance), "ma\0\0\n", MAX_RX_BUFFER_LENGTH);
     19e:	3078      	adds	r0, #120	; 0x78
     1a0:	3204      	adds	r2, #4
     1a2:	490d      	ldr	r1, [pc, #52]	; (1d8 <artist_do_maze+0xb4>)
     1a4:	3110      	adds	r1, #16
     1a6:	4b0d      	ldr	r3, [pc, #52]	; (1dc <artist_do_maze+0xb8>)
     1a8:	4798      	blx	r3
		break;
     1aa:	e009      	b.n	1c0 <artist_do_maze+0x9c>
		artist_front.maze_status = STRAIGHT;
     1ac:	4807      	ldr	r0, [pc, #28]	; (1cc <artist_do_maze+0xa8>)
     1ae:	2200      	movs	r2, #0
     1b0:	23d9      	movs	r3, #217	; 0xd9
     1b2:	54c2      	strb	r2, [r0, r3]
		usart_write_buffer_job(&(artist_front.usart_instance), "mw\0\0\n", MAX_RX_BUFFER_LENGTH);
     1b4:	3078      	adds	r0, #120	; 0x78
     1b6:	3205      	adds	r2, #5
     1b8:	4907      	ldr	r1, [pc, #28]	; (1d8 <artist_do_maze+0xb4>)
     1ba:	3118      	adds	r1, #24
     1bc:	4b07      	ldr	r3, [pc, #28]	; (1dc <artist_do_maze+0xb8>)
     1be:	4798      	blx	r3
	usart_write_buffer_job(&(artist_front.usart_instance), "m \0\0\0", MAX_RX_BUFFER_LENGTH);
	}
	
	*/

}
     1c0:	bd10      	pop	{r4, pc}
     1c2:	46c0      	nop			; (mov r8, r8)
     1c4:	00000249 	.word	0x00000249
     1c8:	40e00000 	.word	0x40e00000
     1cc:	200007b4 	.word	0x200007b4
     1d0:	000061cd 	.word	0x000061cd
     1d4:	41400000 	.word	0x41400000
     1d8:	00008998 	.word	0x00008998
     1dc:	000018b9 	.word	0x000018b9

000001e0 <artist_ultrasonic_configure>:
 */
#include "TheArtist.h"
#include "UltraSonic.h"

void artist_ultrasonic_configure (struct artist_ultrasonic_module * module, uint8_t echo, uint8_t trig) {
	module->echo_pin	= echo; 
     1e0:	7001      	strb	r1, [r0, #0]
	module->trigger_pin = trig;  
     1e2:	7042      	strb	r2, [r0, #1]
	module->filter_large_change_counts = 0; 
     1e4:	2300      	movs	r3, #0
     1e6:	7083      	strb	r3, [r0, #2]
	module->fliter_old_val = 0; 
     1e8:	2300      	movs	r3, #0
     1ea:	6043      	str	r3, [r0, #4]
}
     1ec:	4770      	bx	lr
	...

000001f0 <artist_ultrasonic_gpio_init>:

void artist_ultrasonic_gpio_init() {
     1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f2:	b085      	sub	sp, #20
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f4:	a903      	add	r1, sp, #12
     1f6:	2201      	movs	r2, #1
     1f8:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     1fa:	2300      	movs	r3, #0
     1fc:	708b      	strb	r3, [r1, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     1fe:	ad02      	add	r5, sp, #8
     200:	702b      	strb	r3, [r5, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     202:	706a      	strb	r2, [r5, #1]
	config->powersave  = false;
     204:	70ab      	strb	r3, [r5, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     206:	4668      	mov	r0, sp
     208:	7003      	strb	r3, [r0, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     20a:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
     20c:	7083      	strb	r3, [r0, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     20e:	ac01      	add	r4, sp, #4
     210:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     212:	7062      	strb	r2, [r4, #1]
	config->powersave  = false;
     214:	70a3      	strb	r3, [r4, #2]
	port_get_config_defaults(&pin_config_trig);
	port_get_config_defaults(&pin_config_echo_center);
	port_get_config_defaults(&pin_config_echo_right);
	port_get_config_defaults(&pin_config_echo_left);

	pin_config_trig.direction			=	PORT_PIN_DIR_OUTPUT;
     216:	700a      	strb	r2, [r1, #0]
	
	pin_config_echo_right.direction		=	PORT_PIN_DIR_INPUT;
	pin_config_echo_right.input_pull	=	PORT_PIN_PULL_UP;
	
	
	port_pin_set_config(artist_front.us_instance_center.trigger_pin, &pin_config_trig);
     218:	4f09      	ldr	r7, [pc, #36]	; (240 <artist_ultrasonic_gpio_init+0x50>)
     21a:	33b5      	adds	r3, #181	; 0xb5
     21c:	5cf8      	ldrb	r0, [r7, r3]
     21e:	4e09      	ldr	r6, [pc, #36]	; (244 <artist_ultrasonic_gpio_init+0x54>)
     220:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_center.echo_pin, &pin_config_echo_center);
     222:	23b4      	movs	r3, #180	; 0xb4
     224:	5cf8      	ldrb	r0, [r7, r3]
     226:	0029      	movs	r1, r5
     228:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_left.echo_pin, &pin_config_echo_left);
     22a:	23bc      	movs	r3, #188	; 0xbc
     22c:	5cf8      	ldrb	r0, [r7, r3]
     22e:	0021      	movs	r1, r4
     230:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_right.echo_pin, &pin_config_echo_right); 
     232:	23c4      	movs	r3, #196	; 0xc4
     234:	5cf8      	ldrb	r0, [r7, r3]
     236:	4669      	mov	r1, sp
     238:	47b0      	blx	r6
}
     23a:	b005      	add	sp, #20
     23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     23e:	46c0      	nop			; (mov r8, r8)
     240:	200007b4 	.word	0x200007b4
     244:	00000b99 	.word	0x00000b99

00000248 <artist_print_ultrasonic_value>:
	else if (FILTER_VAL < 0)	FILTER_VAL = 0;

	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
}

void artist_print_ultrasonic_value() {
     248:	b5f0      	push	{r4, r5, r6, r7, lr}
     24a:	b085      	sub	sp, #20
	printf("%5.2f, %5.2f, %5.2f\n", 
				artist_front.left_distance, 
     24c:	4d0b      	ldr	r5, [pc, #44]	; (27c <artist_print_ultrasonic_value+0x34>)
	printf("%5.2f, %5.2f, %5.2f\n", 
     24e:	4c0c      	ldr	r4, [pc, #48]	; (280 <artist_print_ultrasonic_value+0x38>)
     250:	23d0      	movs	r3, #208	; 0xd0
     252:	58e8      	ldr	r0, [r5, r3]
     254:	47a0      	blx	r4
     256:	0006      	movs	r6, r0
     258:	000f      	movs	r7, r1
				artist_front.center_distance, 
				artist_front.right_distance);  
     25a:	23d4      	movs	r3, #212	; 0xd4
	printf("%5.2f, %5.2f, %5.2f\n", 
     25c:	58e8      	ldr	r0, [r5, r3]
     25e:	47a0      	blx	r4
     260:	9002      	str	r0, [sp, #8]
     262:	9103      	str	r1, [sp, #12]
				artist_front.center_distance, 
     264:	23cc      	movs	r3, #204	; 0xcc
	printf("%5.2f, %5.2f, %5.2f\n", 
     266:	58e8      	ldr	r0, [r5, r3]
     268:	47a0      	blx	r4
     26a:	9000      	str	r0, [sp, #0]
     26c:	9101      	str	r1, [sp, #4]
     26e:	0032      	movs	r2, r6
     270:	003b      	movs	r3, r7
     272:	4804      	ldr	r0, [pc, #16]	; (284 <artist_print_ultrasonic_value+0x3c>)
     274:	4904      	ldr	r1, [pc, #16]	; (288 <artist_print_ultrasonic_value+0x40>)
     276:	4788      	blx	r1
}
     278:	b005      	add	sp, #20
     27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     27c:	200007b4 	.word	0x200007b4
     280:	000087a5 	.word	0x000087a5
     284:	000089b8 	.word	0x000089b8
     288:	00003d75 	.word	0x00003d75

0000028c <artist_ultrasonic_get_value>:
float artist_ultrasonic_get_value(struct artist_ultrasonic_module * const module) {
     28c:	b5f0      	push	{r4, r5, r6, r7, lr}
     28e:	b083      	sub	sp, #12
     290:	0004      	movs	r4, r0
	// TODO : use timer callback function!
	uint16_t start, end;
	uint16_t count = 0;
	
	port_pin_set_output_level(module->trigger_pin, false);
     292:	7842      	ldrb	r2, [r0, #1]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     294:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     296:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     298:	2900      	cmp	r1, #0
     29a:	d104      	bne.n	2a6 <artist_ultrasonic_get_value+0x1a>
		return &(ports[port_index]->Group[group_index]);
     29c:	0953      	lsrs	r3, r2, #5
     29e:	01db      	lsls	r3, r3, #7
     2a0:	495c      	ldr	r1, [pc, #368]	; (414 <artist_ultrasonic_get_value+0x188>)
     2a2:	468c      	mov	ip, r1
     2a4:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2a6:	211f      	movs	r1, #31
     2a8:	4011      	ands	r1, r2
     2aa:	2201      	movs	r2, #1
     2ac:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     2ae:	615a      	str	r2, [r3, #20]
	delay_us(40);
     2b0:	2028      	movs	r0, #40	; 0x28
     2b2:	4b59      	ldr	r3, [pc, #356]	; (418 <artist_ultrasonic_get_value+0x18c>)
     2b4:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, true);
     2b6:	7862      	ldrb	r2, [r4, #1]
	if (port_index < PORT_INST_NUM) {
     2b8:	09d1      	lsrs	r1, r2, #7
		return NULL;
     2ba:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     2bc:	2900      	cmp	r1, #0
     2be:	d104      	bne.n	2ca <artist_ultrasonic_get_value+0x3e>
		return &(ports[port_index]->Group[group_index]);
     2c0:	0953      	lsrs	r3, r2, #5
     2c2:	01db      	lsls	r3, r3, #7
     2c4:	4953      	ldr	r1, [pc, #332]	; (414 <artist_ultrasonic_get_value+0x188>)
     2c6:	468c      	mov	ip, r1
     2c8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2ca:	211f      	movs	r1, #31
     2cc:	4011      	ands	r1, r2
     2ce:	2201      	movs	r2, #1
     2d0:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     2d2:	619a      	str	r2, [r3, #24]
	delay_us(10);
     2d4:	200a      	movs	r0, #10
     2d6:	4b50      	ldr	r3, [pc, #320]	; (418 <artist_ultrasonic_get_value+0x18c>)
     2d8:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, false);
     2da:	7862      	ldrb	r2, [r4, #1]
	if (port_index < PORT_INST_NUM) {
     2dc:	09d1      	lsrs	r1, r2, #7
		return NULL;
     2de:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     2e0:	2900      	cmp	r1, #0
     2e2:	d104      	bne.n	2ee <artist_ultrasonic_get_value+0x62>
		return &(ports[port_index]->Group[group_index]);
     2e4:	0953      	lsrs	r3, r2, #5
     2e6:	01db      	lsls	r3, r3, #7
     2e8:	494a      	ldr	r1, [pc, #296]	; (414 <artist_ultrasonic_get_value+0x188>)
     2ea:	468c      	mov	ip, r1
     2ec:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2ee:	211f      	movs	r1, #31
     2f0:	4011      	ands	r1, r2
     2f2:	2201      	movs	r2, #1
     2f4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     2f6:	615a      	str	r2, [r3, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2f8:	4b48      	ldr	r3, [pc, #288]	; (41c <artist_ultrasonic_get_value+0x190>)
     2fa:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     2fc:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     2fe:	b25b      	sxtb	r3, r3
     300:	2b00      	cmp	r3, #0
     302:	dbfb      	blt.n	2fc <artist_ultrasonic_get_value+0x70>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
     304:	2300      	movs	r3, #0
     306:	7113      	strb	r3, [r2, #4]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     308:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     30a:	b25b      	sxtb	r3, r3
     30c:	2b00      	cmp	r3, #0
     30e:	dbfb      	blt.n	308 <artist_ultrasonic_get_value+0x7c>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
     310:	2340      	movs	r3, #64	; 0x40
     312:	7153      	strb	r3, [r2, #5]
	tc_start_counter(&(artist_front.tc_instance_ultrasonic)); 
	while (!(port_pin_get_input_level(module->echo_pin))) {
     314:	7823      	ldrb	r3, [r4, #0]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     316:	221f      	movs	r2, #31
     318:	401a      	ands	r2, r3
     31a:	2001      	movs	r0, #1
     31c:	4090      	lsls	r0, r2
     31e:	09da      	lsrs	r2, r3, #7
     320:	2100      	movs	r1, #0
     322:	2a00      	cmp	r2, #0
     324:	d104      	bne.n	330 <artist_ultrasonic_get_value+0xa4>
     326:	0959      	lsrs	r1, r3, #5
     328:	01c9      	lsls	r1, r1, #7
     32a:	4b3a      	ldr	r3, [pc, #232]	; (414 <artist_ultrasonic_get_value+0x188>)
     32c:	469c      	mov	ip, r3
     32e:	4461      	add	r1, ip
     330:	4b3b      	ldr	r3, [pc, #236]	; (420 <artist_ultrasonic_get_value+0x194>)
	return (port_base->IN.reg & pin_mask);
     332:	6a0a      	ldr	r2, [r1, #32]
     334:	4202      	tst	r2, r0
     336:	d105      	bne.n	344 <artist_ultrasonic_get_value+0xb8>
     338:	3b01      	subs	r3, #1
     33a:	b29b      	uxth	r3, r3
		count ++;
		if (count > 0xFF00) return module->fliter_old_val; 
     33c:	2b00      	cmp	r3, #0
     33e:	d1f8      	bne.n	332 <artist_ultrasonic_get_value+0xa6>
     340:	6860      	ldr	r0, [r4, #4]
     342:	e062      	b.n	40a <artist_ultrasonic_get_value+0x17e>
	}
	count =0; 
	start = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
     344:	4835      	ldr	r0, [pc, #212]	; (41c <artist_ultrasonic_get_value+0x190>)
     346:	4b37      	ldr	r3, [pc, #220]	; (424 <artist_ultrasonic_get_value+0x198>)
     348:	4798      	blx	r3
     34a:	0005      	movs	r5, r0
	while ((port_pin_get_input_level(module->echo_pin)))  {
     34c:	7823      	ldrb	r3, [r4, #0]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     34e:	221f      	movs	r2, #31
     350:	401a      	ands	r2, r3
     352:	2001      	movs	r0, #1
     354:	4090      	lsls	r0, r2
     356:	09da      	lsrs	r2, r3, #7
     358:	2100      	movs	r1, #0
     35a:	2a00      	cmp	r2, #0
     35c:	d104      	bne.n	368 <artist_ultrasonic_get_value+0xdc>
     35e:	0959      	lsrs	r1, r3, #5
     360:	01c9      	lsls	r1, r1, #7
     362:	4b2c      	ldr	r3, [pc, #176]	; (414 <artist_ultrasonic_get_value+0x188>)
     364:	469c      	mov	ip, r3
     366:	4461      	add	r1, ip
     368:	4b2d      	ldr	r3, [pc, #180]	; (420 <artist_ultrasonic_get_value+0x194>)
	return (port_base->IN.reg & pin_mask);
     36a:	6a0a      	ldr	r2, [r1, #32]
     36c:	4202      	tst	r2, r0
     36e:	d005      	beq.n	37c <artist_ultrasonic_get_value+0xf0>
     370:	3b01      	subs	r3, #1
     372:	b29b      	uxth	r3, r3
		count ++;
		if (count > 0xFF00) return module->fliter_old_val;  
     374:	2b00      	cmp	r3, #0
     376:	d1f8      	bne.n	36a <artist_ultrasonic_get_value+0xde>
     378:	6860      	ldr	r0, [r4, #4]
     37a:	e046      	b.n	40a <artist_ultrasonic_get_value+0x17e>
	}
	end = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
     37c:	4e27      	ldr	r6, [pc, #156]	; (41c <artist_ultrasonic_get_value+0x190>)
     37e:	0030      	movs	r0, r6
     380:	4b28      	ldr	r3, [pc, #160]	; (424 <artist_ultrasonic_get_value+0x198>)
     382:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     384:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     386:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     388:	b25b      	sxtb	r3, r3
     38a:	2b00      	cmp	r3, #0
     38c:	dbfb      	blt.n	386 <artist_ultrasonic_get_value+0xfa>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
     38e:	2380      	movs	r3, #128	; 0x80
     390:	7153      	strb	r3, [r2, #5]
	tc_stop_counter(&(artist_front.tc_instance_ultrasonic));

	float new = ((float)(end - start)) * 0.017;
     392:	0400      	lsls	r0, r0, #16
     394:	0c00      	lsrs	r0, r0, #16
     396:	042d      	lsls	r5, r5, #16
     398:	0c2d      	lsrs	r5, r5, #16
     39a:	1b40      	subs	r0, r0, r5
     39c:	4f22      	ldr	r7, [pc, #136]	; (428 <artist_ultrasonic_get_value+0x19c>)
     39e:	47b8      	blx	r7
     3a0:	4b22      	ldr	r3, [pc, #136]	; (42c <artist_ultrasonic_get_value+0x1a0>)
     3a2:	4798      	blx	r3
     3a4:	4a22      	ldr	r2, [pc, #136]	; (430 <artist_ultrasonic_get_value+0x1a4>)
     3a6:	4b23      	ldr	r3, [pc, #140]	; (434 <artist_ultrasonic_get_value+0x1a8>)
     3a8:	4d23      	ldr	r5, [pc, #140]	; (438 <artist_ultrasonic_get_value+0x1ac>)
     3aa:	47a8      	blx	r5
     3ac:	4b23      	ldr	r3, [pc, #140]	; (43c <artist_ultrasonic_get_value+0x1b0>)
     3ae:	4798      	blx	r3
     3b0:	9001      	str	r0, [sp, #4]
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     3b2:	6865      	ldr	r5, [r4, #4]
	if (new > old * module->filter_large_change_counts ||
     3b4:	78a6      	ldrb	r6, [r4, #2]
     3b6:	0030      	movs	r0, r6
     3b8:	47b8      	blx	r7
     3ba:	1c07      	adds	r7, r0, #0
     3bc:	1c01      	adds	r1, r0, #0
     3be:	1c28      	adds	r0, r5, #0
     3c0:	4b1f      	ldr	r3, [pc, #124]	; (440 <artist_ultrasonic_get_value+0x1b4>)
     3c2:	4798      	blx	r3
     3c4:	1c01      	adds	r1, r0, #0
     3c6:	9801      	ldr	r0, [sp, #4]
     3c8:	4b1e      	ldr	r3, [pc, #120]	; (444 <artist_ultrasonic_get_value+0x1b8>)
     3ca:	4798      	blx	r3
     3cc:	2800      	cmp	r0, #0
     3ce:	d109      	bne.n	3e4 <artist_ultrasonic_get_value+0x158>
	new < old * 1/module->filter_large_change_counts ) {
     3d0:	1c39      	adds	r1, r7, #0
     3d2:	1c28      	adds	r0, r5, #0
     3d4:	4b1c      	ldr	r3, [pc, #112]	; (448 <artist_ultrasonic_get_value+0x1bc>)
     3d6:	4798      	blx	r3
     3d8:	1c01      	adds	r1, r0, #0
	if (new > old * module->filter_large_change_counts ||
     3da:	9801      	ldr	r0, [sp, #4]
     3dc:	4b1b      	ldr	r3, [pc, #108]	; (44c <artist_ultrasonic_get_value+0x1c0>)
     3de:	4798      	blx	r3
     3e0:	2800      	cmp	r0, #0
     3e2:	d005      	beq.n	3f0 <artist_ultrasonic_get_value+0x164>
		module->filter_large_change_counts ++;
     3e4:	1c73      	adds	r3, r6, #1
     3e6:	b2db      	uxtb	r3, r3
		if (module->filter_large_change_counts > 3)		
     3e8:	2b03      	cmp	r3, #3
     3ea:	d810      	bhi.n	40e <artist_ultrasonic_get_value+0x182>
		module->filter_large_change_counts ++;
     3ec:	70a3      	strb	r3, [r4, #2]
			new = old;
     3ee:	9501      	str	r5, [sp, #4]
	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
     3f0:	4f13      	ldr	r7, [pc, #76]	; (440 <artist_ultrasonic_get_value+0x1b4>)
     3f2:	4917      	ldr	r1, [pc, #92]	; (450 <artist_ultrasonic_get_value+0x1c4>)
     3f4:	9801      	ldr	r0, [sp, #4]
     3f6:	47b8      	blx	r7
     3f8:	1c06      	adds	r6, r0, #0
     3fa:	4916      	ldr	r1, [pc, #88]	; (454 <artist_ultrasonic_get_value+0x1c8>)
     3fc:	1c28      	adds	r0, r5, #0
     3fe:	47b8      	blx	r7
     400:	1c01      	adds	r1, r0, #0
     402:	1c30      	adds	r0, r6, #0
     404:	4b14      	ldr	r3, [pc, #80]	; (458 <artist_ultrasonic_get_value+0x1cc>)
     406:	4798      	blx	r3
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     408:	6060      	str	r0, [r4, #4]
	return module->fliter_old_val;
}
     40a:	b003      	add	sp, #12
     40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			module->filter_large_change_counts = 0;
     40e:	2300      	movs	r3, #0
     410:	70a3      	strb	r3, [r4, #2]
     412:	e7ed      	b.n	3f0 <artist_ultrasonic_get_value+0x164>
     414:	41004400 	.word	0x41004400
     418:	00000899 	.word	0x00000899
     41c:	200007b4 	.word	0x200007b4
     420:	0000ff01 	.word	0x0000ff01
     424:	00002675 	.word	0x00002675
     428:	00006bb5 	.word	0x00006bb5
     42c:	000087a5 	.word	0x000087a5
     430:	b020c49c 	.word	0xb020c49c
     434:	3f916872 	.word	0x3f916872
     438:	00007add 	.word	0x00007add
     43c:	00008849 	.word	0x00008849
     440:	00006975 	.word	0x00006975
     444:	000061f5 	.word	0x000061f5
     448:	00006595 	.word	0x00006595
     44c:	000061cd 	.word	0x000061cd
     450:	3ecccccc 	.word	0x3ecccccc
     454:	3f19999a 	.word	0x3f19999a
     458:	00006271 	.word	0x00006271

0000045c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     45c:	b5f0      	push	{r4, r5, r6, r7, lr}
     45e:	46c6      	mov	lr, r8
     460:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     462:	0080      	lsls	r0, r0, #2
     464:	4b0e      	ldr	r3, [pc, #56]	; (4a0 <_tcc_interrupt_handler+0x44>)
     466:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     468:	683b      	ldr	r3, [r7, #0]
     46a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     46e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     470:	4013      	ands	r3, r2
     472:	401e      	ands	r6, r3
     474:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     476:	4b0b      	ldr	r3, [pc, #44]	; (4a4 <_tcc_interrupt_handler+0x48>)
     478:	4698      	mov	r8, r3
     47a:	e002      	b.n	482 <_tcc_interrupt_handler+0x26>
     47c:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     47e:	2c30      	cmp	r4, #48	; 0x30
     480:	d00a      	beq.n	498 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     482:	4643      	mov	r3, r8
     484:	58e5      	ldr	r5, [r4, r3]
     486:	4235      	tst	r5, r6
     488:	d0f8      	beq.n	47c <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     48a:	193b      	adds	r3, r7, r4
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	0038      	movs	r0, r7
     490:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     492:	683b      	ldr	r3, [r7, #0]
     494:	62dd      	str	r5, [r3, #44]	; 0x2c
     496:	e7f1      	b.n	47c <_tcc_interrupt_handler+0x20>
		}
	}
}
     498:	bc04      	pop	{r2}
     49a:	4690      	mov	r8, r2
     49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     49e:	46c0      	nop			; (mov r8, r8)
     4a0:	200014e0 	.word	0x200014e0
     4a4:	000089d0 	.word	0x000089d0

000004a8 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     4a8:	b510      	push	{r4, lr}
     4aa:	2000      	movs	r0, #0
     4ac:	4b01      	ldr	r3, [pc, #4]	; (4b4 <TCC0_Handler+0xc>)
     4ae:	4798      	blx	r3
     4b0:	bd10      	pop	{r4, pc}
     4b2:	46c0      	nop			; (mov r8, r8)
     4b4:	0000045d 	.word	0x0000045d

000004b8 <TCC1_Handler>:
     4b8:	b510      	push	{r4, lr}
     4ba:	2001      	movs	r0, #1
     4bc:	4b01      	ldr	r3, [pc, #4]	; (4c4 <TCC1_Handler+0xc>)
     4be:	4798      	blx	r3
     4c0:	bd10      	pop	{r4, pc}
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	0000045d 	.word	0x0000045d

000004c8 <TCC2_Handler>:
     4c8:	b510      	push	{r4, lr}
     4ca:	2002      	movs	r0, #2
     4cc:	4b01      	ldr	r3, [pc, #4]	; (4d4 <TCC2_Handler+0xc>)
     4ce:	4798      	blx	r3
     4d0:	bd10      	pop	{r4, pc}
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	0000045d 	.word	0x0000045d

000004d8 <usart_write_callback>:
	usart_read_buffer_job( usart_instance,
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
	

}
void usart_write_callback(struct usart_module *const usart_module){}
     4d8:	4770      	bx	lr
	...

000004dc <usart_read_callback>:
{
     4dc:	b510      	push	{r4, lr}
     4de:	0004      	movs	r4, r0
	switch(rx_buffer[0]) {
     4e0:	4b0b      	ldr	r3, [pc, #44]	; (510 <usart_read_callback+0x34>)
     4e2:	781b      	ldrb	r3, [r3, #0]
     4e4:	b2db      	uxtb	r3, r3
     4e6:	2b20      	cmp	r3, #32
     4e8:	d00b      	beq.n	502 <usart_read_callback+0x26>
     4ea:	2b77      	cmp	r3, #119	; 0x77
     4ec:	d103      	bne.n	4f6 <usart_read_callback+0x1a>
		usart_write_buffer_job(usart_instance, "mw\0\0\0", MAX_RX_BUFFER_LENGTH);
     4ee:	2205      	movs	r2, #5
     4f0:	4908      	ldr	r1, [pc, #32]	; (514 <usart_read_callback+0x38>)
     4f2:	4b09      	ldr	r3, [pc, #36]	; (518 <usart_read_callback+0x3c>)
     4f4:	4798      	blx	r3
	usart_read_buffer_job( usart_instance,
     4f6:	2205      	movs	r2, #5
     4f8:	4905      	ldr	r1, [pc, #20]	; (510 <usart_read_callback+0x34>)
     4fa:	0020      	movs	r0, r4
     4fc:	4b07      	ldr	r3, [pc, #28]	; (51c <usart_read_callback+0x40>)
     4fe:	4798      	blx	r3
}
     500:	bd10      	pop	{r4, pc}
		usart_write_buffer_job(usart_instance, "m \0\0\0", MAX_RX_BUFFER_LENGTH);
     502:	2205      	movs	r2, #5
     504:	4903      	ldr	r1, [pc, #12]	; (514 <usart_read_callback+0x38>)
     506:	3108      	adds	r1, #8
     508:	4b03      	ldr	r3, [pc, #12]	; (518 <usart_read_callback+0x3c>)
     50a:	4798      	blx	r3
		break;
     50c:	e7f3      	b.n	4f6 <usart_read_callback+0x1a>
     50e:	46c0      	nop			; (mov r8, r8)
     510:	200014a4 	.word	0x200014a4
     514:	00008a00 	.word	0x00008a00
     518:	000018b9 	.word	0x000018b9
     51c:	000018d9 	.word	0x000018d9

00000520 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     520:	b570      	push	{r4, r5, r6, lr}
     522:	b082      	sub	sp, #8
     524:	0005      	movs	r5, r0
     526:	000e      	movs	r6, r1
	uint16_t temp = 0;
     528:	2200      	movs	r2, #0
     52a:	466b      	mov	r3, sp
     52c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     52e:	4c06      	ldr	r4, [pc, #24]	; (548 <usart_serial_getchar+0x28>)
     530:	466b      	mov	r3, sp
     532:	1d99      	adds	r1, r3, #6
     534:	0028      	movs	r0, r5
     536:	47a0      	blx	r4
     538:	2800      	cmp	r0, #0
     53a:	d1f9      	bne.n	530 <usart_serial_getchar+0x10>

	*c = temp;
     53c:	466b      	mov	r3, sp
     53e:	3306      	adds	r3, #6
     540:	881b      	ldrh	r3, [r3, #0]
     542:	7033      	strb	r3, [r6, #0]
}
     544:	b002      	add	sp, #8
     546:	bd70      	pop	{r4, r5, r6, pc}
     548:	000017a5 	.word	0x000017a5

0000054c <usart_serial_putchar>:
{
     54c:	b570      	push	{r4, r5, r6, lr}
     54e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     550:	b28c      	uxth	r4, r1
     552:	4e03      	ldr	r6, [pc, #12]	; (560 <usart_serial_putchar+0x14>)
     554:	0021      	movs	r1, r4
     556:	0028      	movs	r0, r5
     558:	47b0      	blx	r6
     55a:	2800      	cmp	r0, #0
     55c:	d1fa      	bne.n	554 <usart_serial_putchar+0x8>
}
     55e:	bd70      	pop	{r4, r5, r6, pc}
     560:	00001779 	.word	0x00001779

00000564 <artist_ultrasonic_tc_configure>:
void artist_ultrasonic_tc_configure() {
     564:	b510      	push	{r4, lr}
     566:	b08e      	sub	sp, #56	; 0x38
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     568:	aa01      	add	r2, sp, #4
     56a:	2300      	movs	r3, #0
     56c:	2100      	movs	r1, #0
     56e:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     570:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     572:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     574:	2000      	movs	r0, #0
     576:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     578:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     57a:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     57c:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     57e:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     580:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     582:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     584:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     586:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     588:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     58a:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     58c:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     58e:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     590:	8593      	strh	r3, [r2, #44]	; 0x2c
	config.clock_source = GCLK_GENERATOR_3;
     592:	3303      	adds	r3, #3
     594:	7013      	strb	r3, [r2, #0]
	config.clock_prescaler = TC_CLOCK_PRESCALER_DIV8;
     596:	23c0      	movs	r3, #192	; 0xc0
     598:	009b      	lsls	r3, r3, #2
     59a:	8093      	strh	r3, [r2, #4]
	config.enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = true;
     59c:	2301      	movs	r3, #1
     59e:	72d3      	strb	r3, [r2, #11]
	tc_init(&(artist_front.tc_instance_ultrasonic), TC4, &config);
     5a0:	4c07      	ldr	r4, [pc, #28]	; (5c0 <artist_ultrasonic_tc_configure+0x5c>)
     5a2:	4908      	ldr	r1, [pc, #32]	; (5c4 <artist_ultrasonic_tc_configure+0x60>)
     5a4:	0020      	movs	r0, r4
     5a6:	4b08      	ldr	r3, [pc, #32]	; (5c8 <artist_ultrasonic_tc_configure+0x64>)
     5a8:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     5aa:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     5ac:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     5ae:	b25b      	sxtb	r3, r3
     5b0:	2b00      	cmp	r3, #0
     5b2:	dbfb      	blt.n	5ac <artist_ultrasonic_tc_configure+0x48>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     5b4:	8813      	ldrh	r3, [r2, #0]
     5b6:	2102      	movs	r1, #2
     5b8:	430b      	orrs	r3, r1
     5ba:	8013      	strh	r3, [r2, #0]
}
     5bc:	b00e      	add	sp, #56	; 0x38
     5be:	bd10      	pop	{r4, pc}
     5c0:	200007b4 	.word	0x200007b4
     5c4:	42003000 	.word	0x42003000
     5c8:	00002439 	.word	0x00002439

000005cc <configure_usart_callbacks>:


void configure_usart_callbacks(struct usart_module * usart_instance)
{
     5cc:	b570      	push	{r4, r5, r6, lr}
     5ce:	0004      	movs	r4, r0
	//! [setup_register_callbacks]
	usart_register_callback(usart_instance,
     5d0:	2200      	movs	r2, #0
     5d2:	4906      	ldr	r1, [pc, #24]	; (5ec <configure_usart_callbacks+0x20>)
     5d4:	4d06      	ldr	r5, [pc, #24]	; (5f0 <configure_usart_callbacks+0x24>)
     5d6:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	
	usart_register_callback(usart_instance,
     5d8:	2201      	movs	r2, #1
     5da:	4906      	ldr	r1, [pc, #24]	; (5f4 <configure_usart_callbacks+0x28>)
     5dc:	0020      	movs	r0, r4
     5de:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     5e0:	2231      	movs	r2, #49	; 0x31
     5e2:	5ca3      	ldrb	r3, [r4, r2]
     5e4:	2103      	movs	r1, #3
     5e6:	430b      	orrs	r3, r1
     5e8:	54a3      	strb	r3, [r4, r2]

	//! [setup_enable_callbacks]
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
	//! [setup_enable_callbacks]
}
     5ea:	bd70      	pop	{r4, r5, r6, pc}
     5ec:	000004d9 	.word	0x000004d9
     5f0:	000018a1 	.word	0x000018a1
     5f4:	000004dd 	.word	0x000004dd

000005f8 <artist_usart_configure>:

void artist_usart_configure(struct usart_module * usart_instance) {
     5f8:	b570      	push	{r4, r5, r6, lr}
     5fa:	b090      	sub	sp, #64	; 0x40
     5fc:	0004      	movs	r4, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     5fe:	2380      	movs	r3, #128	; 0x80
     600:	05db      	lsls	r3, r3, #23
     602:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     604:	2300      	movs	r3, #0
     606:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     608:	22ff      	movs	r2, #255	; 0xff
     60a:	4669      	mov	r1, sp
     60c:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     60e:	2200      	movs	r2, #0
     610:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     612:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
     614:	2196      	movs	r1, #150	; 0x96
     616:	0189      	lsls	r1, r1, #6
     618:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
     61a:	2101      	movs	r1, #1
     61c:	2024      	movs	r0, #36	; 0x24
     61e:	466d      	mov	r5, sp
     620:	5429      	strb	r1, [r5, r0]
	config->transmitter_enable = true;
     622:	3001      	adds	r0, #1
     624:	5429      	strb	r1, [r5, r0]
	config->clock_polarity_inverted = false;
     626:	3125      	adds	r1, #37	; 0x25
     628:	546b      	strb	r3, [r5, r1]
	config->use_external_clock = false;
     62a:	3101      	adds	r1, #1
     62c:	546b      	strb	r3, [r5, r1]
	config->ext_clock_freq   = 0;
     62e:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     630:	3105      	adds	r1, #5
     632:	546b      	strb	r3, [r5, r1]
	config->generator_source = GCLK_GENERATOR_0;
     634:	3101      	adds	r1, #1
     636:	546b      	strb	r3, [r5, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     638:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     63a:	822b      	strh	r3, [r5, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     63c:	76eb      	strb	r3, [r5, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     63e:	762a      	strb	r2, [r5, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     640:	772a      	strb	r2, [r5, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     642:	766a      	strb	r2, [r5, #25]
	config->receive_pulse_length                    = 19;
     644:	2313      	movs	r3, #19
     646:	76ab      	strb	r3, [r5, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     648:	776a      	strb	r2, [r5, #29]
	struct usart_config config;
	usart_get_config_defaults(&config);
	config.baudrate = CONF_ARTIST_BAUDRATE;
	config.mux_setting	= EDBG_CDC_SERCOM_MUX_SETTING;
     64a:	2380      	movs	r3, #128	; 0x80
     64c:	035b      	lsls	r3, r3, #13
     64e:	9303      	str	r3, [sp, #12]
	config.pinmux_pad0	= EDBG_CDC_SERCOM_PINMUX_PAD0;
     650:	4b1e      	ldr	r3, [pc, #120]	; (6cc <artist_usart_configure+0xd4>)
     652:	930c      	str	r3, [sp, #48]	; 0x30
	config.pinmux_pad1	= EDBG_CDC_SERCOM_PINMUX_PAD1;
     654:	4b1e      	ldr	r3, [pc, #120]	; (6d0 <artist_usart_configure+0xd8>)
     656:	930d      	str	r3, [sp, #52]	; 0x34
	config.pinmux_pad2	= EDBG_CDC_SERCOM_PINMUX_PAD2;
     658:	2301      	movs	r3, #1
     65a:	425b      	negs	r3, r3
     65c:	930e      	str	r3, [sp, #56]	; 0x38
	config.pinmux_pad3	= EDBG_CDC_SERCOM_PINMUX_PAD3;
     65e:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(usart_instance, EDBG_CDC_MODULE, &config) != STATUS_OK);
     660:	4e1c      	ldr	r6, [pc, #112]	; (6d4 <artist_usart_configure+0xdc>)
     662:	4d1d      	ldr	r5, [pc, #116]	; (6d8 <artist_usart_configure+0xe0>)
     664:	466a      	mov	r2, sp
     666:	0031      	movs	r1, r6
     668:	0020      	movs	r0, r4
     66a:	47a8      	blx	r5
     66c:	2800      	cmp	r0, #0
     66e:	d1f9      	bne.n	664 <artist_usart_configure+0x6c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     670:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     672:	0028      	movs	r0, r5
     674:	4b19      	ldr	r3, [pc, #100]	; (6dc <artist_usart_configure+0xe4>)
     676:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     678:	231f      	movs	r3, #31
     67a:	4018      	ands	r0, r3
     67c:	3b1e      	subs	r3, #30
     67e:	4083      	lsls	r3, r0
     680:	4a17      	ldr	r2, [pc, #92]	; (6e0 <artist_usart_configure+0xe8>)
     682:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     684:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     686:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     688:	2b00      	cmp	r3, #0
     68a:	d1fc      	bne.n	686 <artist_usart_configure+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     68c:	682b      	ldr	r3, [r5, #0]
     68e:	2202      	movs	r2, #2
     690:	4313      	orrs	r3, r2
     692:	602b      	str	r3, [r5, #0]
	
	
	usart_enable(usart_instance);
	configure_usart_callbacks(usart_instance);
     694:	0020      	movs	r0, r4
     696:	4b13      	ldr	r3, [pc, #76]	; (6e4 <artist_usart_configure+0xec>)
     698:	4798      	blx	r3
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     69a:	4b13      	ldr	r3, [pc, #76]	; (6e8 <artist_usart_configure+0xf0>)
     69c:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     69e:	4a13      	ldr	r2, [pc, #76]	; (6ec <artist_usart_configure+0xf4>)
     6a0:	4b13      	ldr	r3, [pc, #76]	; (6f0 <artist_usart_configure+0xf8>)
     6a2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     6a4:	4a13      	ldr	r2, [pc, #76]	; (6f4 <artist_usart_configure+0xfc>)
     6a6:	4b14      	ldr	r3, [pc, #80]	; (6f8 <artist_usart_configure+0x100>)
     6a8:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     6aa:	466a      	mov	r2, sp
     6ac:	4909      	ldr	r1, [pc, #36]	; (6d4 <artist_usart_configure+0xdc>)
     6ae:	0020      	movs	r0, r4
     6b0:	4b09      	ldr	r3, [pc, #36]	; (6d8 <artist_usart_configure+0xe0>)
     6b2:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     6b4:	4d11      	ldr	r5, [pc, #68]	; (6fc <artist_usart_configure+0x104>)
     6b6:	682b      	ldr	r3, [r5, #0]
     6b8:	6898      	ldr	r0, [r3, #8]
     6ba:	2100      	movs	r1, #0
     6bc:	4c10      	ldr	r4, [pc, #64]	; (700 <artist_usart_configure+0x108>)
     6be:	47a0      	blx	r4
	setbuf(stdin, NULL);
     6c0:	682b      	ldr	r3, [r5, #0]
     6c2:	6858      	ldr	r0, [r3, #4]
     6c4:	2100      	movs	r1, #0
     6c6:	47a0      	blx	r4
	
	stdio_serial_init(usart_instance, EDBG_CDC_MODULE, &config);
}
     6c8:	b010      	add	sp, #64	; 0x40
     6ca:	bd70      	pop	{r4, r5, r6, pc}
     6cc:	00040003 	.word	0x00040003
     6d0:	00050003 	.word	0x00050003
     6d4:	42000800 	.word	0x42000800
     6d8:	00001439 	.word	0x00001439
     6dc:	00000ff1 	.word	0x00000ff1
     6e0:	e000e100 	.word	0xe000e100
     6e4:	000005cd 	.word	0x000005cd
     6e8:	2000155c 	.word	0x2000155c
     6ec:	0000054d 	.word	0x0000054d
     6f0:	20001558 	.word	0x20001558
     6f4:	00000521 	.word	0x00000521
     6f8:	20001554 	.word	0x20001554
     6fc:	2000000c 	.word	0x2000000c
     700:	00003e7d 	.word	0x00003e7d

00000704 <artist_ultrasonic_update>:
	tcc_init(&(artist->tcc_instance), TCC0, &config);
	tcc_enable(&(artist->tcc_instance));
	*/
}

void artist_ultrasonic_update() {
     704:	b570      	push	{r4, r5, r6, lr}
	artist_front.center_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_center));
     706:	4e09      	ldr	r6, [pc, #36]	; (72c <artist_ultrasonic_update+0x28>)
     708:	0030      	movs	r0, r6
     70a:	4d09      	ldr	r5, [pc, #36]	; (730 <artist_ultrasonic_update+0x2c>)
     70c:	47a8      	blx	r5
     70e:	0034      	movs	r4, r6
     710:	3cb4      	subs	r4, #180	; 0xb4
     712:	61b0      	str	r0, [r6, #24]
	artist_front.right_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_right));
     714:	0020      	movs	r0, r4
     716:	30c4      	adds	r0, #196	; 0xc4
     718:	47a8      	blx	r5
     71a:	23d4      	movs	r3, #212	; 0xd4
     71c:	50e0      	str	r0, [r4, r3]
	artist_front.left_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_left));
     71e:	0020      	movs	r0, r4
     720:	30bc      	adds	r0, #188	; 0xbc
     722:	47a8      	blx	r5
     724:	23d0      	movs	r3, #208	; 0xd0
     726:	50e0      	str	r0, [r4, r3]
}
     728:	bd70      	pop	{r4, r5, r6, pc}
     72a:	46c0      	nop			; (mov r8, r8)
     72c:	20000868 	.word	0x20000868
     730:	0000028d 	.word	0x0000028d

00000734 <artist_scheduler_tc_configure>:

void artist_scheduler_tc_configure() {
     734:	b510      	push	{r4, lr}
     736:	b08e      	sub	sp, #56	; 0x38
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     738:	aa01      	add	r2, sp, #4
     73a:	2300      	movs	r3, #0
     73c:	2100      	movs	r1, #0
     73e:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     740:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     742:	2000      	movs	r0, #0
     744:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     746:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     748:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     74a:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     74c:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     74e:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     750:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     752:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     754:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     756:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     758:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     75a:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
     75c:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     75e:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     760:	8593      	strh	r3, [r2, #44]	; 0x2c
	//! [setup_config_defaults]
	tc_get_config_defaults(&config_tc);
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
     762:	3304      	adds	r3, #4
     764:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source = GCLK_GENERATOR_3;
     766:	3b01      	subs	r3, #1
     768:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024; //
     76a:	23e0      	movs	r3, #224	; 0xe0
     76c:	00db      	lsls	r3, r3, #3
     76e:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period = 50;
     770:	2132      	movs	r1, #50	; 0x32
     772:	2329      	movs	r3, #41	; 0x29
     774:	54d1      	strb	r1, [r2, r3]
	//config_tc.counter_8_bit.compare_capture_channel[0] = 5;
	//config_tc.counter_8_bit.compare_capture_channel[1] = 54;
	//! [setup_change_config]

	//! [20 Hz setup_set_config]
	tc_init(&(artist_front.tc_instance_timer), TC5, &config_tc);
     776:	4c08      	ldr	r4, [pc, #32]	; (798 <artist_scheduler_tc_configure+0x64>)
     778:	4908      	ldr	r1, [pc, #32]	; (79c <artist_scheduler_tc_configure+0x68>)
     77a:	0020      	movs	r0, r4
     77c:	4b08      	ldr	r3, [pc, #32]	; (7a0 <artist_scheduler_tc_configure+0x6c>)
     77e:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     780:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     782:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     784:	b25b      	sxtb	r3, r3
     786:	2b00      	cmp	r3, #0
     788:	dbfb      	blt.n	782 <artist_scheduler_tc_configure+0x4e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     78a:	8813      	ldrh	r3, [r2, #0]
     78c:	2102      	movs	r1, #2
     78e:	430b      	orrs	r3, r1
     790:	8013      	strh	r3, [r2, #0]
	//! [setup_set_config]

	//! [setup_enable]
	tc_enable(&(artist_front.tc_instance_timer));
	//! [setup_enable]
}
     792:	b00e      	add	sp, #56	; 0x38
     794:	bd10      	pop	{r4, pc}
     796:	46c0      	nop			; (mov r8, r8)
     798:	200007d0 	.word	0x200007d0
     79c:	42003400 	.word	0x42003400
     7a0:	00002439 	.word	0x00002439

000007a4 <do_state_maze>:


enum artist_state do_state_maze() {
     7a4:	b510      	push	{r4, lr}
	// [ultra sonic]
	static uint16_t ultrasonic_counter		= 0;
	ultrasonic_counter ++;
     7a6:	4a0d      	ldr	r2, [pc, #52]	; (7dc <do_state_maze+0x38>)
     7a8:	8813      	ldrh	r3, [r2, #0]
     7aa:	3301      	adds	r3, #1
     7ac:	b29b      	uxth	r3, r3
     7ae:	8013      	strh	r3, [r2, #0]
	if (ultrasonic_counter > 5) {
     7b0:	2b05      	cmp	r3, #5
     7b2:	d807      	bhi.n	7c4 <do_state_maze+0x20>
	}
	
	
	
	static uint16_t maze_counter = 0;
	maze_counter ++;
     7b4:	4a0a      	ldr	r2, [pc, #40]	; (7e0 <do_state_maze+0x3c>)
     7b6:	8813      	ldrh	r3, [r2, #0]
     7b8:	3301      	adds	r3, #1
     7ba:	b29b      	uxth	r3, r3
     7bc:	8013      	strh	r3, [r2, #0]
	if (maze_counter > 10) {
     7be:	2b0a      	cmp	r3, #10
     7c0:	d806      	bhi.n	7d0 <do_state_maze+0x2c>
	if (ultrasonic_counter > 20) {artist_print_ultrasonic_value();}
	
	#endif
	
	// ! [ultra sonic]
}
     7c2:	bd10      	pop	{r4, pc}
		artist_ultrasonic_update();
     7c4:	4b07      	ldr	r3, [pc, #28]	; (7e4 <do_state_maze+0x40>)
     7c6:	4798      	blx	r3
		ultrasonic_counter = 0;
     7c8:	2200      	movs	r2, #0
     7ca:	4b04      	ldr	r3, [pc, #16]	; (7dc <do_state_maze+0x38>)
     7cc:	801a      	strh	r2, [r3, #0]
     7ce:	e7f1      	b.n	7b4 <do_state_maze+0x10>
		artist_do_maze();
     7d0:	4b05      	ldr	r3, [pc, #20]	; (7e8 <do_state_maze+0x44>)
     7d2:	4798      	blx	r3
		maze_counter = 0;
     7d4:	2200      	movs	r2, #0
     7d6:	4b02      	ldr	r3, [pc, #8]	; (7e0 <do_state_maze+0x3c>)
     7d8:	801a      	strh	r2, [r3, #0]
     7da:	e7f2      	b.n	7c2 <do_state_maze+0x1e>
     7dc:	200001fa 	.word	0x200001fa
     7e0:	200001f8 	.word	0x200001f8
     7e4:	00000705 	.word	0x00000705
     7e8:	00000125 	.word	0x00000125

000007ec <callbacks>:
enum artist_state do_state_tracing_line() {}
enum artist_state do_state_wait() {}

void callbacks (void) {
     7ec:	b510      	push	{r4, lr}
	
	switch (artist_front.state) {
     7ee:	23d8      	movs	r3, #216	; 0xd8
     7f0:	4a03      	ldr	r2, [pc, #12]	; (800 <callbacks+0x14>)
     7f2:	5cd3      	ldrb	r3, [r2, r3]
     7f4:	2b01      	cmp	r3, #1
     7f6:	d000      	beq.n	7fa <callbacks+0xe>
		break;
		case TRACING_LINE:
		do_state_tracing_line();
		break;
	}
}
     7f8:	bd10      	pop	{r4, pc}
		do_state_maze();
     7fa:	4b02      	ldr	r3, [pc, #8]	; (804 <callbacks+0x18>)
     7fc:	4798      	blx	r3
}
     7fe:	e7fb      	b.n	7f8 <callbacks+0xc>
     800:	200007b4 	.word	0x200007b4
     804:	000007a5 	.word	0x000007a5

00000808 <artist_configure_tc_callbacks>:
void artist_configure_tc_callbacks(void)
{
     808:	b510      	push	{r4, lr}
	tc_register_callback(&(artist_front.tc_instance_timer), callbacks ,
     80a:	4c0d      	ldr	r4, [pc, #52]	; (840 <artist_configure_tc_callbacks+0x38>)
     80c:	2200      	movs	r2, #0
     80e:	490d      	ldr	r1, [pc, #52]	; (844 <artist_configure_tc_callbacks+0x3c>)
     810:	0020      	movs	r0, r4
     812:	4b0d      	ldr	r3, [pc, #52]	; (848 <artist_configure_tc_callbacks+0x40>)
     814:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     816:	6820      	ldr	r0, [r4, #0]
     818:	3c1c      	subs	r4, #28
     81a:	4b0c      	ldr	r3, [pc, #48]	; (84c <artist_configure_tc_callbacks+0x44>)
     81c:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     81e:	4b0c      	ldr	r3, [pc, #48]	; (850 <artist_configure_tc_callbacks+0x48>)
     820:	5c1a      	ldrb	r2, [r3, r0]
     822:	231f      	movs	r3, #31
     824:	4013      	ands	r3, r2
     826:	2201      	movs	r2, #1
     828:	0011      	movs	r1, r2
     82a:	4099      	lsls	r1, r3
     82c:	4b09      	ldr	r3, [pc, #36]	; (854 <artist_configure_tc_callbacks+0x4c>)
     82e:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     830:	2135      	movs	r1, #53	; 0x35
     832:	5c63      	ldrb	r3, [r4, r1]
     834:	2001      	movs	r0, #1
     836:	4303      	orrs	r3, r0
     838:	5463      	strb	r3, [r4, r1]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     83a:	69e3      	ldr	r3, [r4, #28]
     83c:	735a      	strb	r2, [r3, #13]
	TC_CALLBACK_OVERFLOW);
	
	tc_enable_callback(&(artist_front.tc_instance_timer), TC_CALLBACK_OVERFLOW);
     83e:	bd10      	pop	{r4, pc}
     840:	200007d0 	.word	0x200007d0
     844:	000007ed 	.word	0x000007ed
     848:	00002339 	.word	0x00002339
     84c:	00002401 	.word	0x00002401
     850:	00008a10 	.word	0x00008a10
     854:	e000e100 	.word	0xe000e100

00000858 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     858:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     85a:	2000      	movs	r0, #0
     85c:	4b08      	ldr	r3, [pc, #32]	; (880 <delay_init+0x28>)
     85e:	4798      	blx	r3
     860:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     862:	4c08      	ldr	r4, [pc, #32]	; (884 <delay_init+0x2c>)
     864:	21fa      	movs	r1, #250	; 0xfa
     866:	0089      	lsls	r1, r1, #2
     868:	47a0      	blx	r4
     86a:	4b07      	ldr	r3, [pc, #28]	; (888 <delay_init+0x30>)
     86c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     86e:	4907      	ldr	r1, [pc, #28]	; (88c <delay_init+0x34>)
     870:	0028      	movs	r0, r5
     872:	47a0      	blx	r4
     874:	4b06      	ldr	r3, [pc, #24]	; (890 <delay_init+0x38>)
     876:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     878:	2205      	movs	r2, #5
     87a:	4b06      	ldr	r3, [pc, #24]	; (894 <delay_init+0x3c>)
     87c:	601a      	str	r2, [r3, #0]
}
     87e:	bd70      	pop	{r4, r5, r6, pc}
     880:	000020c9 	.word	0x000020c9
     884:	00005e41 	.word	0x00005e41
     888:	20000000 	.word	0x20000000
     88c:	000f4240 	.word	0x000f4240
     890:	20000004 	.word	0x20000004
     894:	e000e010 	.word	0xe000e010

00000898 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     898:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     89a:	4b08      	ldr	r3, [pc, #32]	; (8bc <delay_cycles_us+0x24>)
     89c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     89e:	4a08      	ldr	r2, [pc, #32]	; (8c0 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     8a0:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     8a2:	2180      	movs	r1, #128	; 0x80
     8a4:	0249      	lsls	r1, r1, #9
	while (n--) {
     8a6:	3801      	subs	r0, #1
     8a8:	d307      	bcc.n	8ba <delay_cycles_us+0x22>
	if (n > 0) {
     8aa:	2c00      	cmp	r4, #0
     8ac:	d0fb      	beq.n	8a6 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     8ae:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     8b0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     8b2:	6813      	ldr	r3, [r2, #0]
     8b4:	420b      	tst	r3, r1
     8b6:	d0fc      	beq.n	8b2 <delay_cycles_us+0x1a>
     8b8:	e7f5      	b.n	8a6 <delay_cycles_us+0xe>
	}
}
     8ba:	bd30      	pop	{r4, r5, pc}
     8bc:	20000004 	.word	0x20000004
     8c0:	e000e010 	.word	0xe000e010

000008c4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     8c4:	4b0c      	ldr	r3, [pc, #48]	; (8f8 <cpu_irq_enter_critical+0x34>)
     8c6:	681b      	ldr	r3, [r3, #0]
     8c8:	2b00      	cmp	r3, #0
     8ca:	d106      	bne.n	8da <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     8cc:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     8d0:	2b00      	cmp	r3, #0
     8d2:	d007      	beq.n	8e4 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     8d4:	2200      	movs	r2, #0
     8d6:	4b09      	ldr	r3, [pc, #36]	; (8fc <cpu_irq_enter_critical+0x38>)
     8d8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     8da:	4a07      	ldr	r2, [pc, #28]	; (8f8 <cpu_irq_enter_critical+0x34>)
     8dc:	6813      	ldr	r3, [r2, #0]
     8de:	3301      	adds	r3, #1
     8e0:	6013      	str	r3, [r2, #0]
}
     8e2:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     8e4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     8e6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     8ea:	2200      	movs	r2, #0
     8ec:	4b04      	ldr	r3, [pc, #16]	; (900 <cpu_irq_enter_critical+0x3c>)
     8ee:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     8f0:	3201      	adds	r2, #1
     8f2:	4b02      	ldr	r3, [pc, #8]	; (8fc <cpu_irq_enter_critical+0x38>)
     8f4:	701a      	strb	r2, [r3, #0]
     8f6:	e7f0      	b.n	8da <cpu_irq_enter_critical+0x16>
     8f8:	200001fc 	.word	0x200001fc
     8fc:	20000200 	.word	0x20000200
     900:	20000008 	.word	0x20000008

00000904 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     904:	4b08      	ldr	r3, [pc, #32]	; (928 <cpu_irq_leave_critical+0x24>)
     906:	681a      	ldr	r2, [r3, #0]
     908:	3a01      	subs	r2, #1
     90a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     90c:	681b      	ldr	r3, [r3, #0]
     90e:	2b00      	cmp	r3, #0
     910:	d109      	bne.n	926 <cpu_irq_leave_critical+0x22>
     912:	4b06      	ldr	r3, [pc, #24]	; (92c <cpu_irq_leave_critical+0x28>)
     914:	781b      	ldrb	r3, [r3, #0]
     916:	2b00      	cmp	r3, #0
     918:	d005      	beq.n	926 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     91a:	2201      	movs	r2, #1
     91c:	4b04      	ldr	r3, [pc, #16]	; (930 <cpu_irq_leave_critical+0x2c>)
     91e:	701a      	strb	r2, [r3, #0]
     920:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     924:	b662      	cpsie	i
	}
}
     926:	4770      	bx	lr
     928:	200001fc 	.word	0x200001fc
     92c:	20000200 	.word	0x20000200
     930:	20000008 	.word	0x20000008

00000934 <system_board_init>:




void system_board_init(void)
{
     934:	b5f0      	push	{r4, r5, r6, r7, lr}
     936:	46c6      	mov	lr, r8
     938:	b500      	push	{lr}
     93a:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
     93c:	ac01      	add	r4, sp, #4
     93e:	2601      	movs	r6, #1
     940:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     942:	2700      	movs	r7, #0
     944:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     946:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     948:	0021      	movs	r1, r4
     94a:	2013      	movs	r0, #19
     94c:	4d27      	ldr	r5, [pc, #156]	; (9ec <system_board_init+0xb8>)
     94e:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     950:	4b27      	ldr	r3, [pc, #156]	; (9f0 <system_board_init+0xbc>)
     952:	4698      	mov	r8, r3
     954:	2380      	movs	r3, #128	; 0x80
     956:	031b      	lsls	r3, r3, #12
     958:	4642      	mov	r2, r8
     95a:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     95c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     95e:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     960:	0021      	movs	r1, r4
     962:	201c      	movs	r0, #28
     964:	47a8      	blx	r5
	config->input_pull = PORT_PIN_PULL_UP;
     966:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     968:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     96a:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     96c:	0021      	movs	r1, r4
     96e:	2052      	movs	r0, #82	; 0x52
     970:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     972:	0021      	movs	r1, r4
     974:	203e      	movs	r0, #62	; 0x3e
     976:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     978:	0021      	movs	r1, r4
     97a:	203f      	movs	r0, #63	; 0x3f
     97c:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     97e:	0021      	movs	r1, r4
     980:	202f      	movs	r0, #47	; 0x2f
     982:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     984:	0021      	movs	r1, r4
     986:	2014      	movs	r0, #20
     988:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     98a:	2280      	movs	r2, #128	; 0x80
     98c:	02d2      	lsls	r2, r2, #11
     98e:	4b19      	ldr	r3, [pc, #100]	; (9f4 <system_board_init+0xc0>)
     990:	619a      	str	r2, [r3, #24]
     992:	4b19      	ldr	r3, [pc, #100]	; (9f8 <system_board_init+0xc4>)
     994:	2280      	movs	r2, #128	; 0x80
     996:	05d2      	lsls	r2, r2, #23
     998:	619a      	str	r2, [r3, #24]
     99a:	2280      	movs	r2, #128	; 0x80
     99c:	0612      	lsls	r2, r2, #24
     99e:	619a      	str	r2, [r3, #24]
     9a0:	2280      	movs	r2, #128	; 0x80
     9a2:	0212      	lsls	r2, r2, #8
     9a4:	619a      	str	r2, [r3, #24]
     9a6:	2380      	movs	r3, #128	; 0x80
     9a8:	035b      	lsls	r3, r3, #13
     9aa:	4642      	mov	r2, r8
     9ac:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     9ae:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     9b0:	0021      	movs	r1, r4
     9b2:	2053      	movs	r0, #83	; 0x53
     9b4:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     9b6:	4a11      	ldr	r2, [pc, #68]	; (9fc <system_board_init+0xc8>)
     9b8:	6a11      	ldr	r1, [r2, #32]
     9ba:	2380      	movs	r3, #128	; 0x80
     9bc:	039b      	lsls	r3, r3, #14
     9be:	430b      	orrs	r3, r1
     9c0:	6213      	str	r3, [r2, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     9c2:	2204      	movs	r2, #4
     9c4:	4b0e      	ldr	r3, [pc, #56]	; (a00 <system_board_init+0xcc>)
     9c6:	801a      	strh	r2, [r3, #0]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     9c8:	466b      	mov	r3, sp
     9ca:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     9cc:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     9ce:	2305      	movs	r3, #5
     9d0:	466a      	mov	r2, sp
     9d2:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     9d4:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     9d6:	4669      	mov	r1, sp
     9d8:	2009      	movs	r0, #9
     9da:	4c0a      	ldr	r4, [pc, #40]	; (a04 <system_board_init+0xd0>)
     9dc:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     9de:	4669      	mov	r1, sp
     9e0:	200c      	movs	r0, #12
     9e2:	47a0      	blx	r4
#endif

}
     9e4:	b002      	add	sp, #8
     9e6:	bc04      	pop	{r2}
     9e8:	4690      	mov	r8, r2
     9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9ec:	00000b99 	.word	0x00000b99
     9f0:	41004400 	.word	0x41004400
     9f4:	41004500 	.word	0x41004500
     9f8:	41004480 	.word	0x41004480
     9fc:	40000400 	.word	0x40000400
     a00:	42005400 	.word	0x42005400
     a04:	000022d9 	.word	0x000022d9

00000a08 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     a08:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     a0a:	2a00      	cmp	r2, #0
     a0c:	d001      	beq.n	a12 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     a0e:	0018      	movs	r0, r3
     a10:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     a12:	008b      	lsls	r3, r1, #2
     a14:	4a06      	ldr	r2, [pc, #24]	; (a30 <extint_register_callback+0x28>)
     a16:	589b      	ldr	r3, [r3, r2]
     a18:	2b00      	cmp	r3, #0
     a1a:	d003      	beq.n	a24 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     a1c:	4283      	cmp	r3, r0
     a1e:	d005      	beq.n	a2c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     a20:	231d      	movs	r3, #29
     a22:	e7f4      	b.n	a0e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     a24:	0089      	lsls	r1, r1, #2
     a26:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     a28:	2300      	movs	r3, #0
     a2a:	e7f0      	b.n	a0e <extint_register_callback+0x6>
		return STATUS_OK;
     a2c:	2300      	movs	r3, #0
     a2e:	e7ee      	b.n	a0e <extint_register_callback+0x6>
     a30:	200014f0 	.word	0x200014f0

00000a34 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     a34:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     a36:	2200      	movs	r2, #0
     a38:	4b10      	ldr	r3, [pc, #64]	; (a7c <EIC_Handler+0x48>)
     a3a:	701a      	strb	r2, [r3, #0]
     a3c:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     a3e:	4910      	ldr	r1, [pc, #64]	; (a80 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     a40:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     a42:	4e10      	ldr	r6, [pc, #64]	; (a84 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     a44:	4c0d      	ldr	r4, [pc, #52]	; (a7c <EIC_Handler+0x48>)
     a46:	e00a      	b.n	a5e <EIC_Handler+0x2a>
		return eics[eic_index];
     a48:	490d      	ldr	r1, [pc, #52]	; (a80 <EIC_Handler+0x4c>)
     a4a:	e008      	b.n	a5e <EIC_Handler+0x2a>
     a4c:	7823      	ldrb	r3, [r4, #0]
     a4e:	3301      	adds	r3, #1
     a50:	b2db      	uxtb	r3, r3
     a52:	7023      	strb	r3, [r4, #0]
     a54:	2b0f      	cmp	r3, #15
     a56:	d810      	bhi.n	a7a <EIC_Handler+0x46>
		return NULL;
     a58:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     a5a:	2b1f      	cmp	r3, #31
     a5c:	d9f4      	bls.n	a48 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     a5e:	0028      	movs	r0, r5
     a60:	4018      	ands	r0, r3
     a62:	2201      	movs	r2, #1
     a64:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     a66:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     a68:	4210      	tst	r0, r2
     a6a:	d0ef      	beq.n	a4c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     a6c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     a6e:	009b      	lsls	r3, r3, #2
     a70:	599b      	ldr	r3, [r3, r6]
     a72:	2b00      	cmp	r3, #0
     a74:	d0ea      	beq.n	a4c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     a76:	4798      	blx	r3
     a78:	e7e8      	b.n	a4c <EIC_Handler+0x18>
			}
		}
	}
}
     a7a:	bd70      	pop	{r4, r5, r6, pc}
     a7c:	200014ec 	.word	0x200014ec
     a80:	40001800 	.word	0x40001800
     a84:	200014f0 	.word	0x200014f0

00000a88 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     a88:	4a04      	ldr	r2, [pc, #16]	; (a9c <_extint_enable+0x14>)
     a8a:	7813      	ldrb	r3, [r2, #0]
     a8c:	2102      	movs	r1, #2
     a8e:	430b      	orrs	r3, r1
     a90:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     a92:	7853      	ldrb	r3, [r2, #1]
     a94:	b25b      	sxtb	r3, r3
     a96:	2b00      	cmp	r3, #0
     a98:	dbfb      	blt.n	a92 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     a9a:	4770      	bx	lr
     a9c:	40001800 	.word	0x40001800

00000aa0 <_system_extint_init>:
{
     aa0:	b500      	push	{lr}
     aa2:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     aa4:	4a12      	ldr	r2, [pc, #72]	; (af0 <_system_extint_init+0x50>)
     aa6:	6993      	ldr	r3, [r2, #24]
     aa8:	2140      	movs	r1, #64	; 0x40
     aaa:	430b      	orrs	r3, r1
     aac:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     aae:	a901      	add	r1, sp, #4
     ab0:	2300      	movs	r3, #0
     ab2:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     ab4:	2005      	movs	r0, #5
     ab6:	4b0f      	ldr	r3, [pc, #60]	; (af4 <_system_extint_init+0x54>)
     ab8:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     aba:	2005      	movs	r0, #5
     abc:	4b0e      	ldr	r3, [pc, #56]	; (af8 <_system_extint_init+0x58>)
     abe:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     ac0:	4a0e      	ldr	r2, [pc, #56]	; (afc <_system_extint_init+0x5c>)
     ac2:	7813      	ldrb	r3, [r2, #0]
     ac4:	2101      	movs	r1, #1
     ac6:	430b      	orrs	r3, r1
     ac8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     aca:	7853      	ldrb	r3, [r2, #1]
     acc:	b25b      	sxtb	r3, r3
     ace:	2b00      	cmp	r3, #0
     ad0:	dbfb      	blt.n	aca <_system_extint_init+0x2a>
     ad2:	4b0b      	ldr	r3, [pc, #44]	; (b00 <_system_extint_init+0x60>)
     ad4:	0019      	movs	r1, r3
     ad6:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     ad8:	2200      	movs	r2, #0
     ada:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     adc:	4299      	cmp	r1, r3
     ade:	d1fc      	bne.n	ada <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     ae0:	2210      	movs	r2, #16
     ae2:	4b08      	ldr	r3, [pc, #32]	; (b04 <_system_extint_init+0x64>)
     ae4:	601a      	str	r2, [r3, #0]
	_extint_enable();
     ae6:	4b08      	ldr	r3, [pc, #32]	; (b08 <_system_extint_init+0x68>)
     ae8:	4798      	blx	r3
}
     aea:	b003      	add	sp, #12
     aec:	bd00      	pop	{pc}
     aee:	46c0      	nop			; (mov r8, r8)
     af0:	40000400 	.word	0x40000400
     af4:	000021e1 	.word	0x000021e1
     af8:	00002155 	.word	0x00002155
     afc:	40001800 	.word	0x40001800
     b00:	200014f0 	.word	0x200014f0
     b04:	e000e100 	.word	0xe000e100
     b08:	00000a89 	.word	0x00000a89

00000b0c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     b0c:	2300      	movs	r3, #0
     b0e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     b10:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     b12:	2201      	movs	r2, #1
     b14:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     b16:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     b18:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     b1a:	3302      	adds	r3, #2
     b1c:	72c3      	strb	r3, [r0, #11]
}
     b1e:	4770      	bx	lr

00000b20 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     b20:	b5f0      	push	{r4, r5, r6, r7, lr}
     b22:	b083      	sub	sp, #12
     b24:	0005      	movs	r5, r0
     b26:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b28:	a901      	add	r1, sp, #4
     b2a:	2300      	movs	r3, #0
     b2c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     b2e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     b30:	7923      	ldrb	r3, [r4, #4]
     b32:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     b34:	7a23      	ldrb	r3, [r4, #8]
     b36:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     b38:	7820      	ldrb	r0, [r4, #0]
     b3a:	4b15      	ldr	r3, [pc, #84]	; (b90 <extint_chan_set_config+0x70>)
     b3c:	4798      	blx	r3
		return NULL;
     b3e:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     b40:	2d1f      	cmp	r5, #31
     b42:	d800      	bhi.n	b46 <extint_chan_set_config+0x26>
		return eics[eic_index];
     b44:	4813      	ldr	r0, [pc, #76]	; (b94 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     b46:	2207      	movs	r2, #7
     b48:	402a      	ands	r2, r5
     b4a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     b4c:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     b4e:	7aa3      	ldrb	r3, [r4, #10]
     b50:	2b00      	cmp	r3, #0
     b52:	d001      	beq.n	b58 <extint_chan_set_config+0x38>
     b54:	2308      	movs	r3, #8
     b56:	431f      	orrs	r7, r3
     b58:	08eb      	lsrs	r3, r5, #3
     b5a:	009b      	lsls	r3, r3, #2
     b5c:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     b5e:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     b60:	260f      	movs	r6, #15
     b62:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     b64:	43b1      	bics	r1, r6
			(new_config << config_pos);
     b66:	4097      	lsls	r7, r2
     b68:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     b6a:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     b6c:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     b6e:	7a63      	ldrb	r3, [r4, #9]
     b70:	2b00      	cmp	r3, #0
     b72:	d106      	bne.n	b82 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     b74:	6943      	ldr	r3, [r0, #20]
     b76:	2201      	movs	r2, #1
     b78:	40aa      	lsls	r2, r5
     b7a:	4393      	bics	r3, r2
     b7c:	6143      	str	r3, [r0, #20]
	}
}
     b7e:	b003      	add	sp, #12
     b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     b82:	6942      	ldr	r2, [r0, #20]
     b84:	2301      	movs	r3, #1
     b86:	40ab      	lsls	r3, r5
     b88:	4313      	orrs	r3, r2
     b8a:	6143      	str	r3, [r0, #20]
     b8c:	e7f7      	b.n	b7e <extint_chan_set_config+0x5e>
     b8e:	46c0      	nop			; (mov r8, r8)
     b90:	000022d9 	.word	0x000022d9
     b94:	40001800 	.word	0x40001800

00000b98 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     b98:	b500      	push	{lr}
     b9a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     b9c:	ab01      	add	r3, sp, #4
     b9e:	2280      	movs	r2, #128	; 0x80
     ba0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     ba2:	780a      	ldrb	r2, [r1, #0]
     ba4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     ba6:	784a      	ldrb	r2, [r1, #1]
     ba8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     baa:	788a      	ldrb	r2, [r1, #2]
     bac:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     bae:	0019      	movs	r1, r3
     bb0:	4b01      	ldr	r3, [pc, #4]	; (bb8 <port_pin_set_config+0x20>)
     bb2:	4798      	blx	r3
}
     bb4:	b003      	add	sp, #12
     bb6:	bd00      	pop	{pc}
     bb8:	000022d9 	.word	0x000022d9

00000bbc <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     bbc:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     bbe:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     bc0:	2340      	movs	r3, #64	; 0x40
     bc2:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     bc4:	4281      	cmp	r1, r0
     bc6:	d202      	bcs.n	bce <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     bc8:	0018      	movs	r0, r3
     bca:	bd10      	pop	{r4, pc}
		baud_calculated++;
     bcc:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     bce:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     bd0:	1c63      	adds	r3, r4, #1
     bd2:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     bd4:	4288      	cmp	r0, r1
     bd6:	d9f9      	bls.n	bcc <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     bd8:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     bda:	2cff      	cmp	r4, #255	; 0xff
     bdc:	d8f4      	bhi.n	bc8 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     bde:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     be0:	2300      	movs	r3, #0
     be2:	e7f1      	b.n	bc8 <_sercom_get_sync_baud_val+0xc>

00000be4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     be4:	b5f0      	push	{r4, r5, r6, r7, lr}
     be6:	46de      	mov	lr, fp
     be8:	4657      	mov	r7, sl
     bea:	464e      	mov	r6, r9
     bec:	4645      	mov	r5, r8
     bee:	b5e0      	push	{r5, r6, r7, lr}
     bf0:	b089      	sub	sp, #36	; 0x24
     bf2:	000c      	movs	r4, r1
     bf4:	9205      	str	r2, [sp, #20]
     bf6:	aa12      	add	r2, sp, #72	; 0x48
     bf8:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     bfa:	0005      	movs	r5, r0
     bfc:	434d      	muls	r5, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     bfe:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     c00:	42a5      	cmp	r5, r4
     c02:	d907      	bls.n	c14 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     c04:	0010      	movs	r0, r2
     c06:	b009      	add	sp, #36	; 0x24
     c08:	bc3c      	pop	{r2, r3, r4, r5}
     c0a:	4690      	mov	r8, r2
     c0c:	4699      	mov	r9, r3
     c0e:	46a2      	mov	sl, r4
     c10:	46ab      	mov	fp, r5
     c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     c14:	2b00      	cmp	r3, #0
     c16:	d155      	bne.n	cc4 <_sercom_get_async_baud_val+0xe0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     c18:	0002      	movs	r2, r0
     c1a:	0008      	movs	r0, r1
     c1c:	2100      	movs	r1, #0
     c1e:	4d63      	ldr	r5, [pc, #396]	; (dac <_sercom_get_async_baud_val+0x1c8>)
     c20:	47a8      	blx	r5
     c22:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     c24:	0026      	movs	r6, r4
     c26:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
     c28:	2300      	movs	r3, #0
     c2a:	2400      	movs	r4, #0
     c2c:	9300      	str	r3, [sp, #0]
     c2e:	9401      	str	r4, [sp, #4]
     c30:	2200      	movs	r2, #0
     c32:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     c34:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     c36:	2120      	movs	r1, #32
     c38:	468c      	mov	ip, r1
     c3a:	391f      	subs	r1, #31
     c3c:	9602      	str	r6, [sp, #8]
     c3e:	9703      	str	r7, [sp, #12]
     c40:	e014      	b.n	c6c <_sercom_get_async_baud_val+0x88>
     c42:	4664      	mov	r4, ip
     c44:	1a24      	subs	r4, r4, r0
     c46:	000d      	movs	r5, r1
     c48:	40e5      	lsrs	r5, r4
     c4a:	46a8      	mov	r8, r5
     c4c:	e015      	b.n	c7a <_sercom_get_async_baud_val+0x96>
			r = r - d;
     c4e:	9c02      	ldr	r4, [sp, #8]
     c50:	9d03      	ldr	r5, [sp, #12]
     c52:	1b12      	subs	r2, r2, r4
     c54:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     c56:	464d      	mov	r5, r9
     c58:	9e00      	ldr	r6, [sp, #0]
     c5a:	9f01      	ldr	r7, [sp, #4]
     c5c:	4335      	orrs	r5, r6
     c5e:	003c      	movs	r4, r7
     c60:	4646      	mov	r6, r8
     c62:	4334      	orrs	r4, r6
     c64:	9500      	str	r5, [sp, #0]
     c66:	9401      	str	r4, [sp, #4]
	for (i = 63; i >= 0; i--) {
     c68:	3801      	subs	r0, #1
     c6a:	d31d      	bcc.n	ca8 <_sercom_get_async_baud_val+0xc4>
		bit_shift = (uint64_t)1 << i;
     c6c:	2420      	movs	r4, #32
     c6e:	4264      	negs	r4, r4
     c70:	1904      	adds	r4, r0, r4
     c72:	d4e6      	bmi.n	c42 <_sercom_get_async_baud_val+0x5e>
     c74:	000d      	movs	r5, r1
     c76:	40a5      	lsls	r5, r4
     c78:	46a8      	mov	r8, r5
     c7a:	000c      	movs	r4, r1
     c7c:	4084      	lsls	r4, r0
     c7e:	46a1      	mov	r9, r4
		r = r << 1;
     c80:	1892      	adds	r2, r2, r2
     c82:	415b      	adcs	r3, r3
     c84:	0014      	movs	r4, r2
     c86:	001d      	movs	r5, r3
		if (n & bit_shift) {
     c88:	4646      	mov	r6, r8
     c8a:	465f      	mov	r7, fp
     c8c:	423e      	tst	r6, r7
     c8e:	d003      	beq.n	c98 <_sercom_get_async_baud_val+0xb4>
			r |= 0x01;
     c90:	000e      	movs	r6, r1
     c92:	4326      	orrs	r6, r4
     c94:	0032      	movs	r2, r6
     c96:	002b      	movs	r3, r5
		if (r >= d) {
     c98:	9c02      	ldr	r4, [sp, #8]
     c9a:	9d03      	ldr	r5, [sp, #12]
     c9c:	429d      	cmp	r5, r3
     c9e:	d8e3      	bhi.n	c68 <_sercom_get_async_baud_val+0x84>
     ca0:	d1d5      	bne.n	c4e <_sercom_get_async_baud_val+0x6a>
     ca2:	4294      	cmp	r4, r2
     ca4:	d8e0      	bhi.n	c68 <_sercom_get_async_baud_val+0x84>
     ca6:	e7d2      	b.n	c4e <_sercom_get_async_baud_val+0x6a>
		scale = ((uint64_t)1 << SHIFT) - ratio;
     ca8:	2200      	movs	r2, #0
     caa:	2301      	movs	r3, #1
     cac:	9800      	ldr	r0, [sp, #0]
     cae:	9901      	ldr	r1, [sp, #4]
     cb0:	1a12      	subs	r2, r2, r0
     cb2:	418b      	sbcs	r3, r1
     cb4:	0019      	movs	r1, r3
		baud_calculated = (65536 * scale) >> SHIFT;
     cb6:	0c13      	lsrs	r3, r2, #16
     cb8:	040a      	lsls	r2, r1, #16
     cba:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     cbc:	9b05      	ldr	r3, [sp, #20]
     cbe:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     cc0:	2200      	movs	r2, #0
     cc2:	e79f      	b.n	c04 <_sercom_get_async_baud_val+0x20>
	uint64_t baud_calculated = 0;
     cc4:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     cc6:	2b01      	cmp	r3, #1
     cc8:	d1f8      	bne.n	cbc <_sercom_get_async_baud_val+0xd8>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     cca:	0f63      	lsrs	r3, r4, #29
     ccc:	9304      	str	r3, [sp, #16]
     cce:	00e3      	lsls	r3, r4, #3
     cd0:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     cd2:	000a      	movs	r2, r1
     cd4:	2300      	movs	r3, #0
     cd6:	2100      	movs	r1, #0
     cd8:	4c34      	ldr	r4, [pc, #208]	; (dac <_sercom_get_async_baud_val+0x1c8>)
     cda:	47a0      	blx	r4
     cdc:	0004      	movs	r4, r0
     cde:	000d      	movs	r5, r1
     ce0:	2300      	movs	r3, #0
     ce2:	469c      	mov	ip, r3
     ce4:	9306      	str	r3, [sp, #24]
		bit_shift = (uint64_t)1 << i;
     ce6:	3320      	adds	r3, #32
     ce8:	469b      	mov	fp, r3
     cea:	2601      	movs	r6, #1
			if(baud_int < BAUD_INT_MAX) {
     cec:	4663      	mov	r3, ip
     cee:	9307      	str	r3, [sp, #28]
     cf0:	e048      	b.n	d84 <_sercom_get_async_baud_val+0x1a0>
		bit_shift = (uint64_t)1 << i;
     cf2:	4659      	mov	r1, fp
     cf4:	1bc9      	subs	r1, r1, r7
     cf6:	0030      	movs	r0, r6
     cf8:	40c8      	lsrs	r0, r1
     cfa:	4682      	mov	sl, r0
     cfc:	e010      	b.n	d20 <_sercom_get_async_baud_val+0x13c>
			r = r - d;
     cfe:	9800      	ldr	r0, [sp, #0]
     d00:	9901      	ldr	r1, [sp, #4]
     d02:	1a12      	subs	r2, r2, r0
     d04:	418b      	sbcs	r3, r1
			q |= bit_shift;
     d06:	9902      	ldr	r1, [sp, #8]
     d08:	4648      	mov	r0, r9
     d0a:	4301      	orrs	r1, r0
     d0c:	9102      	str	r1, [sp, #8]
	for (i = 63; i >= 0; i--) {
     d0e:	3f01      	subs	r7, #1
     d10:	d325      	bcc.n	d5e <_sercom_get_async_baud_val+0x17a>
		bit_shift = (uint64_t)1 << i;
     d12:	2120      	movs	r1, #32
     d14:	4249      	negs	r1, r1
     d16:	1879      	adds	r1, r7, r1
     d18:	d4eb      	bmi.n	cf2 <_sercom_get_async_baud_val+0x10e>
     d1a:	0030      	movs	r0, r6
     d1c:	4088      	lsls	r0, r1
     d1e:	4682      	mov	sl, r0
     d20:	0031      	movs	r1, r6
     d22:	40b9      	lsls	r1, r7
     d24:	4689      	mov	r9, r1
		r = r << 1;
     d26:	1892      	adds	r2, r2, r2
     d28:	415b      	adcs	r3, r3
     d2a:	0010      	movs	r0, r2
     d2c:	0019      	movs	r1, r3
		if (n & bit_shift) {
     d2e:	4644      	mov	r4, r8
     d30:	464d      	mov	r5, r9
     d32:	402c      	ands	r4, r5
     d34:	46a4      	mov	ip, r4
     d36:	4654      	mov	r4, sl
     d38:	9d04      	ldr	r5, [sp, #16]
     d3a:	402c      	ands	r4, r5
     d3c:	46a2      	mov	sl, r4
     d3e:	4664      	mov	r4, ip
     d40:	4655      	mov	r5, sl
     d42:	432c      	orrs	r4, r5
     d44:	d003      	beq.n	d4e <_sercom_get_async_baud_val+0x16a>
			r |= 0x01;
     d46:	0034      	movs	r4, r6
     d48:	4304      	orrs	r4, r0
     d4a:	0022      	movs	r2, r4
     d4c:	000b      	movs	r3, r1
		if (r >= d) {
     d4e:	9800      	ldr	r0, [sp, #0]
     d50:	9901      	ldr	r1, [sp, #4]
     d52:	4299      	cmp	r1, r3
     d54:	d8db      	bhi.n	d0e <_sercom_get_async_baud_val+0x12a>
     d56:	d1d2      	bne.n	cfe <_sercom_get_async_baud_val+0x11a>
     d58:	4290      	cmp	r0, r2
     d5a:	d8d8      	bhi.n	d0e <_sercom_get_async_baud_val+0x12a>
     d5c:	e7cf      	b.n	cfe <_sercom_get_async_baud_val+0x11a>
     d5e:	9c00      	ldr	r4, [sp, #0]
     d60:	9d01      	ldr	r5, [sp, #4]
			baud_int -= baud_fp;
     d62:	9902      	ldr	r1, [sp, #8]
     d64:	9a07      	ldr	r2, [sp, #28]
     d66:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     d68:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     d6a:	4911      	ldr	r1, [pc, #68]	; (db0 <_sercom_get_async_baud_val+0x1cc>)
     d6c:	428b      	cmp	r3, r1
     d6e:	d914      	bls.n	d9a <_sercom_get_async_baud_val+0x1b6>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     d70:	9b06      	ldr	r3, [sp, #24]
     d72:	3301      	adds	r3, #1
     d74:	b2db      	uxtb	r3, r3
     d76:	0019      	movs	r1, r3
     d78:	9306      	str	r3, [sp, #24]
     d7a:	0013      	movs	r3, r2
     d7c:	3301      	adds	r3, #1
     d7e:	9307      	str	r3, [sp, #28]
     d80:	2908      	cmp	r1, #8
     d82:	d008      	beq.n	d96 <_sercom_get_async_baud_val+0x1b2>
	uint64_t q = 0, r = 0, bit_shift;
     d84:	2300      	movs	r3, #0
     d86:	9302      	str	r3, [sp, #8]
     d88:	2200      	movs	r2, #0
     d8a:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     d8c:	213f      	movs	r1, #63	; 0x3f
     d8e:	9400      	str	r4, [sp, #0]
     d90:	9501      	str	r5, [sp, #4]
     d92:	000f      	movs	r7, r1
     d94:	e7bd      	b.n	d12 <_sercom_get_async_baud_val+0x12e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d96:	2240      	movs	r2, #64	; 0x40
     d98:	e734      	b.n	c04 <_sercom_get_async_baud_val+0x20>
     d9a:	2240      	movs	r2, #64	; 0x40
		if(baud_fp == BAUD_FP_MAX) {
     d9c:	9906      	ldr	r1, [sp, #24]
     d9e:	2908      	cmp	r1, #8
     da0:	d100      	bne.n	da4 <_sercom_get_async_baud_val+0x1c0>
     da2:	e72f      	b.n	c04 <_sercom_get_async_baud_val+0x20>
		baud_calculated = baud_int | (baud_fp << 13);
     da4:	034a      	lsls	r2, r1, #13
     da6:	431a      	orrs	r2, r3
     da8:	e788      	b.n	cbc <_sercom_get_async_baud_val+0xd8>
     daa:	46c0      	nop			; (mov r8, r8)
     dac:	0000621d 	.word	0x0000621d
     db0:	00001fff 	.word	0x00001fff

00000db4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     db4:	b510      	push	{r4, lr}
     db6:	b082      	sub	sp, #8
     db8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     dba:	4b0e      	ldr	r3, [pc, #56]	; (df4 <sercom_set_gclk_generator+0x40>)
     dbc:	781b      	ldrb	r3, [r3, #0]
     dbe:	2b00      	cmp	r3, #0
     dc0:	d007      	beq.n	dd2 <sercom_set_gclk_generator+0x1e>
     dc2:	2900      	cmp	r1, #0
     dc4:	d105      	bne.n	dd2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     dc6:	4b0b      	ldr	r3, [pc, #44]	; (df4 <sercom_set_gclk_generator+0x40>)
     dc8:	785b      	ldrb	r3, [r3, #1]
     dca:	4283      	cmp	r3, r0
     dcc:	d010      	beq.n	df0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     dce:	201d      	movs	r0, #29
     dd0:	e00c      	b.n	dec <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     dd2:	a901      	add	r1, sp, #4
     dd4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     dd6:	2013      	movs	r0, #19
     dd8:	4b07      	ldr	r3, [pc, #28]	; (df8 <sercom_set_gclk_generator+0x44>)
     dda:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     ddc:	2013      	movs	r0, #19
     dde:	4b07      	ldr	r3, [pc, #28]	; (dfc <sercom_set_gclk_generator+0x48>)
     de0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     de2:	4b04      	ldr	r3, [pc, #16]	; (df4 <sercom_set_gclk_generator+0x40>)
     de4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     de6:	2201      	movs	r2, #1
     de8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     dea:	2000      	movs	r0, #0
}
     dec:	b002      	add	sp, #8
     dee:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     df0:	2000      	movs	r0, #0
     df2:	e7fb      	b.n	dec <sercom_set_gclk_generator+0x38>
     df4:	20000204 	.word	0x20000204
     df8:	000021e1 	.word	0x000021e1
     dfc:	00002155 	.word	0x00002155

00000e00 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     e00:	4b40      	ldr	r3, [pc, #256]	; (f04 <_sercom_get_default_pad+0x104>)
     e02:	4298      	cmp	r0, r3
     e04:	d031      	beq.n	e6a <_sercom_get_default_pad+0x6a>
     e06:	d90a      	bls.n	e1e <_sercom_get_default_pad+0x1e>
     e08:	4b3f      	ldr	r3, [pc, #252]	; (f08 <_sercom_get_default_pad+0x108>)
     e0a:	4298      	cmp	r0, r3
     e0c:	d04d      	beq.n	eaa <_sercom_get_default_pad+0xaa>
     e0e:	4b3f      	ldr	r3, [pc, #252]	; (f0c <_sercom_get_default_pad+0x10c>)
     e10:	4298      	cmp	r0, r3
     e12:	d05a      	beq.n	eca <_sercom_get_default_pad+0xca>
     e14:	4b3e      	ldr	r3, [pc, #248]	; (f10 <_sercom_get_default_pad+0x110>)
     e16:	4298      	cmp	r0, r3
     e18:	d037      	beq.n	e8a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     e1a:	2000      	movs	r0, #0
}
     e1c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     e1e:	4b3d      	ldr	r3, [pc, #244]	; (f14 <_sercom_get_default_pad+0x114>)
     e20:	4298      	cmp	r0, r3
     e22:	d00c      	beq.n	e3e <_sercom_get_default_pad+0x3e>
     e24:	4b3c      	ldr	r3, [pc, #240]	; (f18 <_sercom_get_default_pad+0x118>)
     e26:	4298      	cmp	r0, r3
     e28:	d1f7      	bne.n	e1a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e2a:	2901      	cmp	r1, #1
     e2c:	d017      	beq.n	e5e <_sercom_get_default_pad+0x5e>
     e2e:	2900      	cmp	r1, #0
     e30:	d05d      	beq.n	eee <_sercom_get_default_pad+0xee>
     e32:	2902      	cmp	r1, #2
     e34:	d015      	beq.n	e62 <_sercom_get_default_pad+0x62>
     e36:	2903      	cmp	r1, #3
     e38:	d015      	beq.n	e66 <_sercom_get_default_pad+0x66>
	return 0;
     e3a:	2000      	movs	r0, #0
     e3c:	e7ee      	b.n	e1c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e3e:	2901      	cmp	r1, #1
     e40:	d007      	beq.n	e52 <_sercom_get_default_pad+0x52>
     e42:	2900      	cmp	r1, #0
     e44:	d051      	beq.n	eea <_sercom_get_default_pad+0xea>
     e46:	2902      	cmp	r1, #2
     e48:	d005      	beq.n	e56 <_sercom_get_default_pad+0x56>
     e4a:	2903      	cmp	r1, #3
     e4c:	d005      	beq.n	e5a <_sercom_get_default_pad+0x5a>
	return 0;
     e4e:	2000      	movs	r0, #0
     e50:	e7e4      	b.n	e1c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e52:	4832      	ldr	r0, [pc, #200]	; (f1c <_sercom_get_default_pad+0x11c>)
     e54:	e7e2      	b.n	e1c <_sercom_get_default_pad+0x1c>
     e56:	4832      	ldr	r0, [pc, #200]	; (f20 <_sercom_get_default_pad+0x120>)
     e58:	e7e0      	b.n	e1c <_sercom_get_default_pad+0x1c>
     e5a:	4832      	ldr	r0, [pc, #200]	; (f24 <_sercom_get_default_pad+0x124>)
     e5c:	e7de      	b.n	e1c <_sercom_get_default_pad+0x1c>
     e5e:	4832      	ldr	r0, [pc, #200]	; (f28 <_sercom_get_default_pad+0x128>)
     e60:	e7dc      	b.n	e1c <_sercom_get_default_pad+0x1c>
     e62:	4832      	ldr	r0, [pc, #200]	; (f2c <_sercom_get_default_pad+0x12c>)
     e64:	e7da      	b.n	e1c <_sercom_get_default_pad+0x1c>
     e66:	4832      	ldr	r0, [pc, #200]	; (f30 <_sercom_get_default_pad+0x130>)
     e68:	e7d8      	b.n	e1c <_sercom_get_default_pad+0x1c>
     e6a:	2901      	cmp	r1, #1
     e6c:	d007      	beq.n	e7e <_sercom_get_default_pad+0x7e>
     e6e:	2900      	cmp	r1, #0
     e70:	d03f      	beq.n	ef2 <_sercom_get_default_pad+0xf2>
     e72:	2902      	cmp	r1, #2
     e74:	d005      	beq.n	e82 <_sercom_get_default_pad+0x82>
     e76:	2903      	cmp	r1, #3
     e78:	d005      	beq.n	e86 <_sercom_get_default_pad+0x86>
	return 0;
     e7a:	2000      	movs	r0, #0
     e7c:	e7ce      	b.n	e1c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e7e:	482d      	ldr	r0, [pc, #180]	; (f34 <_sercom_get_default_pad+0x134>)
     e80:	e7cc      	b.n	e1c <_sercom_get_default_pad+0x1c>
     e82:	482d      	ldr	r0, [pc, #180]	; (f38 <_sercom_get_default_pad+0x138>)
     e84:	e7ca      	b.n	e1c <_sercom_get_default_pad+0x1c>
     e86:	482d      	ldr	r0, [pc, #180]	; (f3c <_sercom_get_default_pad+0x13c>)
     e88:	e7c8      	b.n	e1c <_sercom_get_default_pad+0x1c>
     e8a:	2901      	cmp	r1, #1
     e8c:	d007      	beq.n	e9e <_sercom_get_default_pad+0x9e>
     e8e:	2900      	cmp	r1, #0
     e90:	d031      	beq.n	ef6 <_sercom_get_default_pad+0xf6>
     e92:	2902      	cmp	r1, #2
     e94:	d005      	beq.n	ea2 <_sercom_get_default_pad+0xa2>
     e96:	2903      	cmp	r1, #3
     e98:	d005      	beq.n	ea6 <_sercom_get_default_pad+0xa6>
	return 0;
     e9a:	2000      	movs	r0, #0
     e9c:	e7be      	b.n	e1c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e9e:	4828      	ldr	r0, [pc, #160]	; (f40 <_sercom_get_default_pad+0x140>)
     ea0:	e7bc      	b.n	e1c <_sercom_get_default_pad+0x1c>
     ea2:	4828      	ldr	r0, [pc, #160]	; (f44 <_sercom_get_default_pad+0x144>)
     ea4:	e7ba      	b.n	e1c <_sercom_get_default_pad+0x1c>
     ea6:	4828      	ldr	r0, [pc, #160]	; (f48 <_sercom_get_default_pad+0x148>)
     ea8:	e7b8      	b.n	e1c <_sercom_get_default_pad+0x1c>
     eaa:	2901      	cmp	r1, #1
     eac:	d007      	beq.n	ebe <_sercom_get_default_pad+0xbe>
     eae:	2900      	cmp	r1, #0
     eb0:	d023      	beq.n	efa <_sercom_get_default_pad+0xfa>
     eb2:	2902      	cmp	r1, #2
     eb4:	d005      	beq.n	ec2 <_sercom_get_default_pad+0xc2>
     eb6:	2903      	cmp	r1, #3
     eb8:	d005      	beq.n	ec6 <_sercom_get_default_pad+0xc6>
	return 0;
     eba:	2000      	movs	r0, #0
     ebc:	e7ae      	b.n	e1c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ebe:	4823      	ldr	r0, [pc, #140]	; (f4c <_sercom_get_default_pad+0x14c>)
     ec0:	e7ac      	b.n	e1c <_sercom_get_default_pad+0x1c>
     ec2:	4823      	ldr	r0, [pc, #140]	; (f50 <_sercom_get_default_pad+0x150>)
     ec4:	e7aa      	b.n	e1c <_sercom_get_default_pad+0x1c>
     ec6:	4823      	ldr	r0, [pc, #140]	; (f54 <_sercom_get_default_pad+0x154>)
     ec8:	e7a8      	b.n	e1c <_sercom_get_default_pad+0x1c>
     eca:	2901      	cmp	r1, #1
     ecc:	d007      	beq.n	ede <_sercom_get_default_pad+0xde>
     ece:	2900      	cmp	r1, #0
     ed0:	d015      	beq.n	efe <_sercom_get_default_pad+0xfe>
     ed2:	2902      	cmp	r1, #2
     ed4:	d005      	beq.n	ee2 <_sercom_get_default_pad+0xe2>
     ed6:	2903      	cmp	r1, #3
     ed8:	d005      	beq.n	ee6 <_sercom_get_default_pad+0xe6>
	return 0;
     eda:	2000      	movs	r0, #0
     edc:	e79e      	b.n	e1c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ede:	481e      	ldr	r0, [pc, #120]	; (f58 <_sercom_get_default_pad+0x158>)
     ee0:	e79c      	b.n	e1c <_sercom_get_default_pad+0x1c>
     ee2:	481e      	ldr	r0, [pc, #120]	; (f5c <_sercom_get_default_pad+0x15c>)
     ee4:	e79a      	b.n	e1c <_sercom_get_default_pad+0x1c>
     ee6:	481e      	ldr	r0, [pc, #120]	; (f60 <_sercom_get_default_pad+0x160>)
     ee8:	e798      	b.n	e1c <_sercom_get_default_pad+0x1c>
     eea:	481e      	ldr	r0, [pc, #120]	; (f64 <_sercom_get_default_pad+0x164>)
     eec:	e796      	b.n	e1c <_sercom_get_default_pad+0x1c>
     eee:	2003      	movs	r0, #3
     ef0:	e794      	b.n	e1c <_sercom_get_default_pad+0x1c>
     ef2:	481d      	ldr	r0, [pc, #116]	; (f68 <_sercom_get_default_pad+0x168>)
     ef4:	e792      	b.n	e1c <_sercom_get_default_pad+0x1c>
     ef6:	481d      	ldr	r0, [pc, #116]	; (f6c <_sercom_get_default_pad+0x16c>)
     ef8:	e790      	b.n	e1c <_sercom_get_default_pad+0x1c>
     efa:	481d      	ldr	r0, [pc, #116]	; (f70 <_sercom_get_default_pad+0x170>)
     efc:	e78e      	b.n	e1c <_sercom_get_default_pad+0x1c>
     efe:	481d      	ldr	r0, [pc, #116]	; (f74 <_sercom_get_default_pad+0x174>)
     f00:	e78c      	b.n	e1c <_sercom_get_default_pad+0x1c>
     f02:	46c0      	nop			; (mov r8, r8)
     f04:	42001000 	.word	0x42001000
     f08:	42001800 	.word	0x42001800
     f0c:	42001c00 	.word	0x42001c00
     f10:	42001400 	.word	0x42001400
     f14:	42000800 	.word	0x42000800
     f18:	42000c00 	.word	0x42000c00
     f1c:	00050003 	.word	0x00050003
     f20:	00060003 	.word	0x00060003
     f24:	00070003 	.word	0x00070003
     f28:	00010003 	.word	0x00010003
     f2c:	001e0003 	.word	0x001e0003
     f30:	001f0003 	.word	0x001f0003
     f34:	000d0002 	.word	0x000d0002
     f38:	000e0002 	.word	0x000e0002
     f3c:	000f0002 	.word	0x000f0002
     f40:	00110003 	.word	0x00110003
     f44:	00120003 	.word	0x00120003
     f48:	00130003 	.word	0x00130003
     f4c:	003f0005 	.word	0x003f0005
     f50:	003e0005 	.word	0x003e0005
     f54:	00520005 	.word	0x00520005
     f58:	00170003 	.word	0x00170003
     f5c:	00180003 	.word	0x00180003
     f60:	00190003 	.word	0x00190003
     f64:	00040003 	.word	0x00040003
     f68:	000c0002 	.word	0x000c0002
     f6c:	00100003 	.word	0x00100003
     f70:	00530005 	.word	0x00530005
     f74:	00160003 	.word	0x00160003

00000f78 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     f78:	b530      	push	{r4, r5, lr}
     f7a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     f7c:	4b0b      	ldr	r3, [pc, #44]	; (fac <_sercom_get_sercom_inst_index+0x34>)
     f7e:	466a      	mov	r2, sp
     f80:	cb32      	ldmia	r3!, {r1, r4, r5}
     f82:	c232      	stmia	r2!, {r1, r4, r5}
     f84:	cb32      	ldmia	r3!, {r1, r4, r5}
     f86:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     f88:	9b00      	ldr	r3, [sp, #0]
     f8a:	4283      	cmp	r3, r0
     f8c:	d00b      	beq.n	fa6 <_sercom_get_sercom_inst_index+0x2e>
     f8e:	2301      	movs	r3, #1
     f90:	009a      	lsls	r2, r3, #2
     f92:	4669      	mov	r1, sp
     f94:	5852      	ldr	r2, [r2, r1]
     f96:	4282      	cmp	r2, r0
     f98:	d006      	beq.n	fa8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f9a:	3301      	adds	r3, #1
     f9c:	2b06      	cmp	r3, #6
     f9e:	d1f7      	bne.n	f90 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     fa0:	2000      	movs	r0, #0
}
     fa2:	b007      	add	sp, #28
     fa4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     fa6:	2300      	movs	r3, #0
			return i;
     fa8:	b2d8      	uxtb	r0, r3
     faa:	e7fa      	b.n	fa2 <_sercom_get_sercom_inst_index+0x2a>
     fac:	00008a14 	.word	0x00008a14

00000fb0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     fb0:	4770      	bx	lr
	...

00000fb4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     fb6:	4b0a      	ldr	r3, [pc, #40]	; (fe0 <_sercom_set_handler+0x2c>)
     fb8:	781b      	ldrb	r3, [r3, #0]
     fba:	2b00      	cmp	r3, #0
     fbc:	d10c      	bne.n	fd8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     fbe:	4f09      	ldr	r7, [pc, #36]	; (fe4 <_sercom_set_handler+0x30>)
     fc0:	4e09      	ldr	r6, [pc, #36]	; (fe8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     fc2:	4d0a      	ldr	r5, [pc, #40]	; (fec <_sercom_set_handler+0x38>)
     fc4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     fc6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     fc8:	195a      	adds	r2, r3, r5
     fca:	6014      	str	r4, [r2, #0]
     fcc:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     fce:	2b18      	cmp	r3, #24
     fd0:	d1f9      	bne.n	fc6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     fd2:	2201      	movs	r2, #1
     fd4:	4b02      	ldr	r3, [pc, #8]	; (fe0 <_sercom_set_handler+0x2c>)
     fd6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     fd8:	0080      	lsls	r0, r0, #2
     fda:	4b02      	ldr	r3, [pc, #8]	; (fe4 <_sercom_set_handler+0x30>)
     fdc:	50c1      	str	r1, [r0, r3]
}
     fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fe0:	20000206 	.word	0x20000206
     fe4:	20000208 	.word	0x20000208
     fe8:	00000fb1 	.word	0x00000fb1
     fec:	20001530 	.word	0x20001530

00000ff0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     ff0:	b500      	push	{lr}
     ff2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     ff4:	2309      	movs	r3, #9
     ff6:	466a      	mov	r2, sp
     ff8:	7013      	strb	r3, [r2, #0]
     ffa:	3301      	adds	r3, #1
     ffc:	7053      	strb	r3, [r2, #1]
     ffe:	3301      	adds	r3, #1
    1000:	7093      	strb	r3, [r2, #2]
    1002:	3301      	adds	r3, #1
    1004:	70d3      	strb	r3, [r2, #3]
    1006:	3301      	adds	r3, #1
    1008:	7113      	strb	r3, [r2, #4]
    100a:	3301      	adds	r3, #1
    100c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    100e:	4b03      	ldr	r3, [pc, #12]	; (101c <_sercom_get_interrupt_vector+0x2c>)
    1010:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1012:	466b      	mov	r3, sp
    1014:	5618      	ldrsb	r0, [r3, r0]
}
    1016:	b003      	add	sp, #12
    1018:	bd00      	pop	{pc}
    101a:	46c0      	nop			; (mov r8, r8)
    101c:	00000f79 	.word	0x00000f79

00001020 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1020:	b510      	push	{r4, lr}
    1022:	4b02      	ldr	r3, [pc, #8]	; (102c <SERCOM0_Handler+0xc>)
    1024:	681b      	ldr	r3, [r3, #0]
    1026:	2000      	movs	r0, #0
    1028:	4798      	blx	r3
    102a:	bd10      	pop	{r4, pc}
    102c:	20000208 	.word	0x20000208

00001030 <SERCOM1_Handler>:
    1030:	b510      	push	{r4, lr}
    1032:	4b02      	ldr	r3, [pc, #8]	; (103c <SERCOM1_Handler+0xc>)
    1034:	685b      	ldr	r3, [r3, #4]
    1036:	2001      	movs	r0, #1
    1038:	4798      	blx	r3
    103a:	bd10      	pop	{r4, pc}
    103c:	20000208 	.word	0x20000208

00001040 <SERCOM2_Handler>:
    1040:	b510      	push	{r4, lr}
    1042:	4b02      	ldr	r3, [pc, #8]	; (104c <SERCOM2_Handler+0xc>)
    1044:	689b      	ldr	r3, [r3, #8]
    1046:	2002      	movs	r0, #2
    1048:	4798      	blx	r3
    104a:	bd10      	pop	{r4, pc}
    104c:	20000208 	.word	0x20000208

00001050 <SERCOM3_Handler>:
    1050:	b510      	push	{r4, lr}
    1052:	4b02      	ldr	r3, [pc, #8]	; (105c <SERCOM3_Handler+0xc>)
    1054:	68db      	ldr	r3, [r3, #12]
    1056:	2003      	movs	r0, #3
    1058:	4798      	blx	r3
    105a:	bd10      	pop	{r4, pc}
    105c:	20000208 	.word	0x20000208

00001060 <SERCOM4_Handler>:
    1060:	b510      	push	{r4, lr}
    1062:	4b02      	ldr	r3, [pc, #8]	; (106c <SERCOM4_Handler+0xc>)
    1064:	691b      	ldr	r3, [r3, #16]
    1066:	2004      	movs	r0, #4
    1068:	4798      	blx	r3
    106a:	bd10      	pop	{r4, pc}
    106c:	20000208 	.word	0x20000208

00001070 <SERCOM5_Handler>:
    1070:	b510      	push	{r4, lr}
    1072:	4b02      	ldr	r3, [pc, #8]	; (107c <SERCOM5_Handler+0xc>)
    1074:	695b      	ldr	r3, [r3, #20]
    1076:	2005      	movs	r0, #5
    1078:	4798      	blx	r3
    107a:	bd10      	pop	{r4, pc}
    107c:	20000208 	.word	0x20000208

00001080 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1080:	b5f0      	push	{r4, r5, r6, r7, lr}
    1082:	46d6      	mov	lr, sl
    1084:	464f      	mov	r7, r9
    1086:	b580      	push	{r7, lr}
    1088:	b08b      	sub	sp, #44	; 0x2c
    108a:	4681      	mov	r9, r0
    108c:	000f      	movs	r7, r1
    108e:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1090:	0003      	movs	r3, r0
    1092:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1094:	680b      	ldr	r3, [r1, #0]
    1096:	079b      	lsls	r3, r3, #30
    1098:	d409      	bmi.n	10ae <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    109a:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    109c:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    109e:	07db      	lsls	r3, r3, #31
    10a0:	d400      	bmi.n	10a4 <spi_init+0x24>
    10a2:	e098      	b.n	11d6 <spi_init+0x156>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    10a4:	b00b      	add	sp, #44	; 0x2c
    10a6:	bc0c      	pop	{r2, r3}
    10a8:	4691      	mov	r9, r2
    10aa:	469a      	mov	sl, r3
    10ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    10ae:	6a93      	ldr	r3, [r2, #40]	; 0x28
    10b0:	9305      	str	r3, [sp, #20]
    10b2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    10b4:	9306      	str	r3, [sp, #24]
    10b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    10b8:	9307      	str	r3, [sp, #28]
    10ba:	6b53      	ldr	r3, [r2, #52]	; 0x34
    10bc:	9308      	str	r3, [sp, #32]
    10be:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    10c0:	ab05      	add	r3, sp, #20
    10c2:	9301      	str	r3, [sp, #4]
    10c4:	e00a      	b.n	10dc <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    10c6:	0038      	movs	r0, r7
    10c8:	4b93      	ldr	r3, [pc, #588]	; (1318 <spi_init+0x298>)
    10ca:	4798      	blx	r3
    10cc:	e00c      	b.n	10e8 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    10ce:	230f      	movs	r3, #15
    10d0:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    10d2:	4281      	cmp	r1, r0
    10d4:	d12d      	bne.n	1132 <spi_init+0xb2>
    10d6:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    10d8:	2e04      	cmp	r6, #4
    10da:	d02f      	beq.n	113c <spi_init+0xbc>
    10dc:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    10de:	00b3      	lsls	r3, r6, #2
    10e0:	9a01      	ldr	r2, [sp, #4]
    10e2:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    10e4:	2800      	cmp	r0, #0
    10e6:	d0ee      	beq.n	10c6 <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    10e8:	1c43      	adds	r3, r0, #1
    10ea:	d0f4      	beq.n	10d6 <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    10ec:	0401      	lsls	r1, r0, #16
    10ee:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    10f0:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    10f2:	b2c3      	uxtb	r3, r0
    10f4:	469c      	mov	ip, r3
		return NULL;
    10f6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    10f8:	0602      	lsls	r2, r0, #24
    10fa:	d405      	bmi.n	1108 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    10fc:	4663      	mov	r3, ip
    10fe:	095b      	lsrs	r3, r3, #5
    1100:	01db      	lsls	r3, r3, #7
    1102:	4a86      	ldr	r2, [pc, #536]	; (131c <spi_init+0x29c>)
    1104:	4692      	mov	sl, r2
    1106:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    1108:	221f      	movs	r2, #31
    110a:	4660      	mov	r0, ip
    110c:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    110e:	1898      	adds	r0, r3, r2
    1110:	3040      	adds	r0, #64	; 0x40
    1112:	7800      	ldrb	r0, [r0, #0]
    1114:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    1116:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1118:	4655      	mov	r5, sl
    111a:	07ed      	lsls	r5, r5, #31
    111c:	d5d9      	bpl.n	10d2 <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    111e:	0852      	lsrs	r2, r2, #1
    1120:	189b      	adds	r3, r3, r2
    1122:	3330      	adds	r3, #48	; 0x30
    1124:	7818      	ldrb	r0, [r3, #0]
    1126:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    1128:	4663      	mov	r3, ip
    112a:	07db      	lsls	r3, r3, #31
    112c:	d5cf      	bpl.n	10ce <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    112e:	0900      	lsrs	r0, r0, #4
    1130:	e7cf      	b.n	10d2 <spi_init+0x52>
			module->hw = NULL;
    1132:	2300      	movs	r3, #0
    1134:	464a      	mov	r2, r9
    1136:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    1138:	201c      	movs	r0, #28
    113a:	e7b3      	b.n	10a4 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    113c:	2013      	movs	r0, #19
    113e:	4b78      	ldr	r3, [pc, #480]	; (1320 <spi_init+0x2a0>)
    1140:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1142:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    1144:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    1146:	2a01      	cmp	r2, #1
    1148:	d027      	beq.n	119a <spi_init+0x11a>
	ctrla |= config->mux_setting;
    114a:	6863      	ldr	r3, [r4, #4]
    114c:	68a2      	ldr	r2, [r4, #8]
    114e:	4313      	orrs	r3, r2
    1150:	68e2      	ldr	r2, [r4, #12]
    1152:	4313      	orrs	r3, r2
    1154:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    1156:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    1158:	7c61      	ldrb	r1, [r4, #17]
    115a:	2900      	cmp	r1, #0
    115c:	d001      	beq.n	1162 <spi_init+0xe2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    115e:	2180      	movs	r1, #128	; 0x80
    1160:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    1162:	7ca1      	ldrb	r1, [r4, #18]
    1164:	2900      	cmp	r1, #0
    1166:	d002      	beq.n	116e <spi_init+0xee>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1168:	2180      	movs	r1, #128	; 0x80
    116a:	0289      	lsls	r1, r1, #10
    116c:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    116e:	7ce1      	ldrb	r1, [r4, #19]
    1170:	2900      	cmp	r1, #0
    1172:	d002      	beq.n	117a <spi_init+0xfa>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1174:	2180      	movs	r1, #128	; 0x80
    1176:	0089      	lsls	r1, r1, #2
    1178:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    117a:	7d21      	ldrb	r1, [r4, #20]
    117c:	2900      	cmp	r1, #0
    117e:	d002      	beq.n	1186 <spi_init+0x106>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1180:	2180      	movs	r1, #128	; 0x80
    1182:	0189      	lsls	r1, r1, #6
    1184:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    1186:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    1188:	2002      	movs	r0, #2
    118a:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    118c:	428b      	cmp	r3, r1
    118e:	d018      	beq.n	11c2 <spi_init+0x142>
	module->hw = NULL;
    1190:	2300      	movs	r3, #0
    1192:	464a      	mov	r2, r9
    1194:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    1196:	201c      	movs	r0, #28
    1198:	e784      	b.n	10a4 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    119a:	aa04      	add	r2, sp, #16
    119c:	0001      	movs	r1, r0
    119e:	69a0      	ldr	r0, [r4, #24]
    11a0:	4b60      	ldr	r3, [pc, #384]	; (1324 <spi_init+0x2a4>)
    11a2:	4798      	blx	r3
    11a4:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    11a6:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    11a8:	2b00      	cmp	r3, #0
    11aa:	d000      	beq.n	11ae <spi_init+0x12e>
    11ac:	e77a      	b.n	10a4 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    11ae:	7b3b      	ldrb	r3, [r7, #12]
    11b0:	b2db      	uxtb	r3, r3
    11b2:	aa04      	add	r2, sp, #16
    11b4:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    11b6:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    11b8:	429a      	cmp	r2, r3
    11ba:	d000      	beq.n	11be <spi_init+0x13e>
    11bc:	e772      	b.n	10a4 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    11be:	350c      	adds	r5, #12
    11c0:	e7c3      	b.n	114a <spi_init+0xca>
			spi_module->CTRLB.reg == ctrlb) {
    11c2:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    11c4:	4293      	cmp	r3, r2
    11c6:	d1e3      	bne.n	1190 <spi_init+0x110>
		module->mode           = config->mode;
    11c8:	7823      	ldrb	r3, [r4, #0]
    11ca:	464a      	mov	r2, r9
    11cc:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
    11ce:	7c23      	ldrb	r3, [r4, #16]
    11d0:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    11d2:	2000      	movs	r0, #0
    11d4:	e766      	b.n	10a4 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    11d6:	0008      	movs	r0, r1
    11d8:	4b53      	ldr	r3, [pc, #332]	; (1328 <spi_init+0x2a8>)
    11da:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    11dc:	4a53      	ldr	r2, [pc, #332]	; (132c <spi_init+0x2ac>)
    11de:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    11e0:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    11e2:	2301      	movs	r3, #1
    11e4:	40ab      	lsls	r3, r5
    11e6:	430b      	orrs	r3, r1
    11e8:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    11ea:	a909      	add	r1, sp, #36	; 0x24
    11ec:	2624      	movs	r6, #36	; 0x24
    11ee:	5da3      	ldrb	r3, [r4, r6]
    11f0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    11f2:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    11f4:	b2c5      	uxtb	r5, r0
    11f6:	0028      	movs	r0, r5
    11f8:	4b4d      	ldr	r3, [pc, #308]	; (1330 <spi_init+0x2b0>)
    11fa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    11fc:	0028      	movs	r0, r5
    11fe:	4b4d      	ldr	r3, [pc, #308]	; (1334 <spi_init+0x2b4>)
    1200:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1202:	5da0      	ldrb	r0, [r4, r6]
    1204:	2100      	movs	r1, #0
    1206:	4b4c      	ldr	r3, [pc, #304]	; (1338 <spi_init+0x2b8>)
    1208:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    120a:	7823      	ldrb	r3, [r4, #0]
    120c:	2b01      	cmp	r3, #1
    120e:	d019      	beq.n	1244 <spi_init+0x1c4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1210:	464b      	mov	r3, r9
    1212:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1214:	ab04      	add	r3, sp, #16
    1216:	2280      	movs	r2, #128	; 0x80
    1218:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    121a:	2200      	movs	r2, #0
    121c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    121e:	2101      	movs	r1, #1
    1220:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    1222:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    1224:	7823      	ldrb	r3, [r4, #0]
    1226:	2b00      	cmp	r3, #0
    1228:	d101      	bne.n	122e <spi_init+0x1ae>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    122a:	ab04      	add	r3, sp, #16
    122c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    122e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1230:	9305      	str	r3, [sp, #20]
    1232:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1234:	9306      	str	r3, [sp, #24]
    1236:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1238:	9307      	str	r3, [sp, #28]
    123a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    123c:	9308      	str	r3, [sp, #32]
    123e:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1240:	ad05      	add	r5, sp, #20
    1242:	e011      	b.n	1268 <spi_init+0x1e8>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1244:	683b      	ldr	r3, [r7, #0]
    1246:	220c      	movs	r2, #12
    1248:	4313      	orrs	r3, r2
    124a:	603b      	str	r3, [r7, #0]
    124c:	e7e0      	b.n	1210 <spi_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    124e:	0030      	movs	r0, r6
    1250:	4b31      	ldr	r3, [pc, #196]	; (1318 <spi_init+0x298>)
    1252:	4798      	blx	r3
    1254:	e00d      	b.n	1272 <spi_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1256:	a904      	add	r1, sp, #16
    1258:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    125a:	0c00      	lsrs	r0, r0, #16
    125c:	b2c0      	uxtb	r0, r0
    125e:	4b37      	ldr	r3, [pc, #220]	; (133c <spi_init+0x2bc>)
    1260:	4798      	blx	r3
    1262:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1264:	2f04      	cmp	r7, #4
    1266:	d007      	beq.n	1278 <spi_init+0x1f8>
    1268:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    126a:	00bb      	lsls	r3, r7, #2
    126c:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    126e:	2800      	cmp	r0, #0
    1270:	d0ed      	beq.n	124e <spi_init+0x1ce>
		if (current_pinmux != PINMUX_UNUSED) {
    1272:	1c43      	adds	r3, r0, #1
    1274:	d1ef      	bne.n	1256 <spi_init+0x1d6>
    1276:	e7f4      	b.n	1262 <spi_init+0x1e2>
	module->mode             = config->mode;
    1278:	7823      	ldrb	r3, [r4, #0]
    127a:	464a      	mov	r2, r9
    127c:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    127e:	7c23      	ldrb	r3, [r4, #16]
    1280:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    1282:	7ca3      	ldrb	r3, [r4, #18]
    1284:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    1286:	7d23      	ldrb	r3, [r4, #20]
    1288:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    128a:	2200      	movs	r2, #0
    128c:	ab02      	add	r3, sp, #8
    128e:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1290:	7823      	ldrb	r3, [r4, #0]
    1292:	2b01      	cmp	r3, #1
    1294:	d028      	beq.n	12e8 <spi_init+0x268>
	ctrla |= config->transfer_mode;
    1296:	6863      	ldr	r3, [r4, #4]
    1298:	68a2      	ldr	r2, [r4, #8]
    129a:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    129c:	68e2      	ldr	r2, [r4, #12]
    129e:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    12a0:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    12a2:	7c62      	ldrb	r2, [r4, #17]
    12a4:	2a00      	cmp	r2, #0
    12a6:	d103      	bne.n	12b0 <spi_init+0x230>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    12a8:	4a25      	ldr	r2, [pc, #148]	; (1340 <spi_init+0x2c0>)
    12aa:	7892      	ldrb	r2, [r2, #2]
    12ac:	0792      	lsls	r2, r2, #30
    12ae:	d501      	bpl.n	12b4 <spi_init+0x234>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    12b0:	2280      	movs	r2, #128	; 0x80
    12b2:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    12b4:	7ca2      	ldrb	r2, [r4, #18]
    12b6:	2a00      	cmp	r2, #0
    12b8:	d002      	beq.n	12c0 <spi_init+0x240>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    12ba:	2280      	movs	r2, #128	; 0x80
    12bc:	0292      	lsls	r2, r2, #10
    12be:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    12c0:	7ce2      	ldrb	r2, [r4, #19]
    12c2:	2a00      	cmp	r2, #0
    12c4:	d002      	beq.n	12cc <spi_init+0x24c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    12c6:	2280      	movs	r2, #128	; 0x80
    12c8:	0092      	lsls	r2, r2, #2
    12ca:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    12cc:	7d22      	ldrb	r2, [r4, #20]
    12ce:	2a00      	cmp	r2, #0
    12d0:	d002      	beq.n	12d8 <spi_init+0x258>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    12d2:	2280      	movs	r2, #128	; 0x80
    12d4:	0192      	lsls	r2, r2, #6
    12d6:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    12d8:	6832      	ldr	r2, [r6, #0]
    12da:	4313      	orrs	r3, r2
    12dc:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    12de:	6873      	ldr	r3, [r6, #4]
    12e0:	430b      	orrs	r3, r1
    12e2:	6073      	str	r3, [r6, #4]
	return STATUS_OK;
    12e4:	2000      	movs	r0, #0
    12e6:	e6dd      	b.n	10a4 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    12e8:	464b      	mov	r3, r9
    12ea:	6818      	ldr	r0, [r3, #0]
    12ec:	4b0e      	ldr	r3, [pc, #56]	; (1328 <spi_init+0x2a8>)
    12ee:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    12f0:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    12f2:	b2c0      	uxtb	r0, r0
    12f4:	4b0a      	ldr	r3, [pc, #40]	; (1320 <spi_init+0x2a0>)
    12f6:	4798      	blx	r3
    12f8:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    12fa:	ab02      	add	r3, sp, #8
    12fc:	1d9a      	adds	r2, r3, #6
    12fe:	69a0      	ldr	r0, [r4, #24]
    1300:	4b08      	ldr	r3, [pc, #32]	; (1324 <spi_init+0x2a4>)
    1302:	4798      	blx	r3
    1304:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    1306:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    1308:	2b00      	cmp	r3, #0
    130a:	d000      	beq.n	130e <spi_init+0x28e>
    130c:	e6ca      	b.n	10a4 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    130e:	ab02      	add	r3, sp, #8
    1310:	3306      	adds	r3, #6
    1312:	781b      	ldrb	r3, [r3, #0]
    1314:	7333      	strb	r3, [r6, #12]
    1316:	e7be      	b.n	1296 <spi_init+0x216>
    1318:	00000e01 	.word	0x00000e01
    131c:	41004400 	.word	0x41004400
    1320:	000021fd 	.word	0x000021fd
    1324:	00000bbd 	.word	0x00000bbd
    1328:	00000f79 	.word	0x00000f79
    132c:	40000400 	.word	0x40000400
    1330:	000021e1 	.word	0x000021e1
    1334:	00002155 	.word	0x00002155
    1338:	00000db5 	.word	0x00000db5
    133c:	000022d9 	.word	0x000022d9
    1340:	41002000 	.word	0x41002000

00001344 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1344:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1346:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    1348:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    134a:	2c01      	cmp	r4, #1
    134c:	d001      	beq.n	1352 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    134e:	0018      	movs	r0, r3
    1350:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    1352:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    1354:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    1356:	2c00      	cmp	r4, #0
    1358:	d1f9      	bne.n	134e <spi_select_slave+0xa>
		if (select) {
    135a:	2a00      	cmp	r2, #0
    135c:	d058      	beq.n	1410 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    135e:	784b      	ldrb	r3, [r1, #1]
    1360:	2b00      	cmp	r3, #0
    1362:	d044      	beq.n	13ee <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1364:	6803      	ldr	r3, [r0, #0]
    1366:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    1368:	07db      	lsls	r3, r3, #31
    136a:	d410      	bmi.n	138e <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    136c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    136e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1370:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1372:	2900      	cmp	r1, #0
    1374:	d104      	bne.n	1380 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    1376:	0953      	lsrs	r3, r2, #5
    1378:	01db      	lsls	r3, r3, #7
    137a:	492e      	ldr	r1, [pc, #184]	; (1434 <spi_select_slave+0xf0>)
    137c:	468c      	mov	ip, r1
    137e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1380:	211f      	movs	r1, #31
    1382:	4011      	ands	r1, r2
    1384:	2201      	movs	r2, #1
    1386:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1388:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    138a:	2305      	movs	r3, #5
    138c:	e7df      	b.n	134e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    138e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1390:	09d4      	lsrs	r4, r2, #7
		return NULL;
    1392:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1394:	2c00      	cmp	r4, #0
    1396:	d104      	bne.n	13a2 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    1398:	0953      	lsrs	r3, r2, #5
    139a:	01db      	lsls	r3, r3, #7
    139c:	4c25      	ldr	r4, [pc, #148]	; (1434 <spi_select_slave+0xf0>)
    139e:	46a4      	mov	ip, r4
    13a0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    13a2:	241f      	movs	r4, #31
    13a4:	4014      	ands	r4, r2
    13a6:	2201      	movs	r2, #1
    13a8:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    13aa:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    13ac:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    13ae:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    13b0:	07d2      	lsls	r2, r2, #31
    13b2:	d501      	bpl.n	13b8 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    13b4:	788a      	ldrb	r2, [r1, #2]
    13b6:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    13b8:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    13ba:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    13bc:	2a00      	cmp	r2, #0
    13be:	d1c6      	bne.n	134e <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    13c0:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    13c2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    13c4:	7e13      	ldrb	r3, [r2, #24]
    13c6:	420b      	tst	r3, r1
    13c8:	d0fc      	beq.n	13c4 <spi_select_slave+0x80>
    13ca:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    13cc:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    13ce:	0749      	lsls	r1, r1, #29
    13d0:	d5bd      	bpl.n	134e <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    13d2:	8b53      	ldrh	r3, [r2, #26]
    13d4:	075b      	lsls	r3, r3, #29
    13d6:	d501      	bpl.n	13dc <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    13d8:	2304      	movs	r3, #4
    13da:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    13dc:	7983      	ldrb	r3, [r0, #6]
    13de:	2b01      	cmp	r3, #1
    13e0:	d002      	beq.n	13e8 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    13e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    13e4:	2300      	movs	r3, #0
    13e6:	e7b2      	b.n	134e <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    13e8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    13ea:	2300      	movs	r3, #0
    13ec:	e7af      	b.n	134e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    13ee:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    13f0:	09d1      	lsrs	r1, r2, #7
		return NULL;
    13f2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    13f4:	2900      	cmp	r1, #0
    13f6:	d104      	bne.n	1402 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    13f8:	0953      	lsrs	r3, r2, #5
    13fa:	01db      	lsls	r3, r3, #7
    13fc:	490d      	ldr	r1, [pc, #52]	; (1434 <spi_select_slave+0xf0>)
    13fe:	468c      	mov	ip, r1
    1400:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1402:	211f      	movs	r1, #31
    1404:	4011      	ands	r1, r2
    1406:	2201      	movs	r2, #1
    1408:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    140a:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    140c:	2300      	movs	r3, #0
    140e:	e79e      	b.n	134e <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    1410:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1412:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1414:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1416:	2900      	cmp	r1, #0
    1418:	d104      	bne.n	1424 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    141a:	0953      	lsrs	r3, r2, #5
    141c:	01db      	lsls	r3, r3, #7
    141e:	4905      	ldr	r1, [pc, #20]	; (1434 <spi_select_slave+0xf0>)
    1420:	468c      	mov	ip, r1
    1422:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1424:	211f      	movs	r1, #31
    1426:	4011      	ands	r1, r2
    1428:	2201      	movs	r2, #1
    142a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    142c:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    142e:	2300      	movs	r3, #0
    1430:	e78d      	b.n	134e <spi_select_slave+0xa>
    1432:	46c0      	nop			; (mov r8, r8)
    1434:	41004400 	.word	0x41004400

00001438 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1438:	b5f0      	push	{r4, r5, r6, r7, lr}
    143a:	46de      	mov	lr, fp
    143c:	4657      	mov	r7, sl
    143e:	464e      	mov	r6, r9
    1440:	4645      	mov	r5, r8
    1442:	b5e0      	push	{r5, r6, r7, lr}
    1444:	b091      	sub	sp, #68	; 0x44
    1446:	0005      	movs	r5, r0
    1448:	000c      	movs	r4, r1
    144a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    144c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    144e:	0008      	movs	r0, r1
    1450:	4bbb      	ldr	r3, [pc, #748]	; (1740 <usart_init+0x308>)
    1452:	4798      	blx	r3
    1454:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1456:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1458:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    145a:	07db      	lsls	r3, r3, #31
    145c:	d506      	bpl.n	146c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    145e:	b011      	add	sp, #68	; 0x44
    1460:	bc3c      	pop	{r2, r3, r4, r5}
    1462:	4690      	mov	r8, r2
    1464:	4699      	mov	r9, r3
    1466:	46a2      	mov	sl, r4
    1468:	46ab      	mov	fp, r5
    146a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    146c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    146e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1470:	079b      	lsls	r3, r3, #30
    1472:	d4f4      	bmi.n	145e <usart_init+0x26>
    1474:	49b3      	ldr	r1, [pc, #716]	; (1744 <usart_init+0x30c>)
    1476:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1478:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    147a:	2301      	movs	r3, #1
    147c:	40bb      	lsls	r3, r7
    147e:	4303      	orrs	r3, r0
    1480:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1482:	a90f      	add	r1, sp, #60	; 0x3c
    1484:	272d      	movs	r7, #45	; 0x2d
    1486:	5df3      	ldrb	r3, [r6, r7]
    1488:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    148a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    148c:	b2d3      	uxtb	r3, r2
    148e:	9302      	str	r3, [sp, #8]
    1490:	0018      	movs	r0, r3
    1492:	4bad      	ldr	r3, [pc, #692]	; (1748 <usart_init+0x310>)
    1494:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1496:	9802      	ldr	r0, [sp, #8]
    1498:	4bac      	ldr	r3, [pc, #688]	; (174c <usart_init+0x314>)
    149a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    149c:	5df0      	ldrb	r0, [r6, r7]
    149e:	2100      	movs	r1, #0
    14a0:	4bab      	ldr	r3, [pc, #684]	; (1750 <usart_init+0x318>)
    14a2:	4798      	blx	r3
	module->character_size = config->character_size;
    14a4:	7af3      	ldrb	r3, [r6, #11]
    14a6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    14a8:	2324      	movs	r3, #36	; 0x24
    14aa:	5cf3      	ldrb	r3, [r6, r3]
    14ac:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    14ae:	2325      	movs	r3, #37	; 0x25
    14b0:	5cf3      	ldrb	r3, [r6, r3]
    14b2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    14b4:	7ef3      	ldrb	r3, [r6, #27]
    14b6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    14b8:	7f33      	ldrb	r3, [r6, #28]
    14ba:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    14bc:	682b      	ldr	r3, [r5, #0]
    14be:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    14c0:	0018      	movs	r0, r3
    14c2:	4b9f      	ldr	r3, [pc, #636]	; (1740 <usart_init+0x308>)
    14c4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    14c6:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    14c8:	2200      	movs	r2, #0
    14ca:	230e      	movs	r3, #14
    14cc:	a906      	add	r1, sp, #24
    14ce:	468c      	mov	ip, r1
    14d0:	4463      	add	r3, ip
    14d2:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    14d4:	8a32      	ldrh	r2, [r6, #16]
    14d6:	9202      	str	r2, [sp, #8]
    14d8:	2380      	movs	r3, #128	; 0x80
    14da:	01db      	lsls	r3, r3, #7
    14dc:	429a      	cmp	r2, r3
    14de:	d100      	bne.n	14e2 <usart_init+0xaa>
    14e0:	e09c      	b.n	161c <usart_init+0x1e4>
    14e2:	d90f      	bls.n	1504 <usart_init+0xcc>
    14e4:	23c0      	movs	r3, #192	; 0xc0
    14e6:	01db      	lsls	r3, r3, #7
    14e8:	9a02      	ldr	r2, [sp, #8]
    14ea:	429a      	cmp	r2, r3
    14ec:	d100      	bne.n	14f0 <usart_init+0xb8>
    14ee:	e090      	b.n	1612 <usart_init+0x1da>
    14f0:	2380      	movs	r3, #128	; 0x80
    14f2:	021b      	lsls	r3, r3, #8
    14f4:	429a      	cmp	r2, r3
    14f6:	d000      	beq.n	14fa <usart_init+0xc2>
    14f8:	e11d      	b.n	1736 <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    14fa:	2303      	movs	r3, #3
    14fc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    14fe:	2300      	movs	r3, #0
    1500:	9307      	str	r3, [sp, #28]
    1502:	e008      	b.n	1516 <usart_init+0xde>
	switch (config->sample_rate) {
    1504:	2380      	movs	r3, #128	; 0x80
    1506:	019b      	lsls	r3, r3, #6
    1508:	429a      	cmp	r2, r3
    150a:	d000      	beq.n	150e <usart_init+0xd6>
    150c:	e113      	b.n	1736 <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    150e:	2310      	movs	r3, #16
    1510:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1512:	3b0f      	subs	r3, #15
    1514:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1516:	6833      	ldr	r3, [r6, #0]
    1518:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    151a:	68f3      	ldr	r3, [r6, #12]
    151c:	469b      	mov	fp, r3
		config->sample_adjustment |
    151e:	6973      	ldr	r3, [r6, #20]
    1520:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1522:	7e33      	ldrb	r3, [r6, #24]
    1524:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1526:	2326      	movs	r3, #38	; 0x26
    1528:	5cf3      	ldrb	r3, [r6, r3]
    152a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    152c:	6873      	ldr	r3, [r6, #4]
    152e:	4699      	mov	r9, r3
	switch (transfer_mode)
    1530:	2b00      	cmp	r3, #0
    1532:	d100      	bne.n	1536 <usart_init+0xfe>
    1534:	e09e      	b.n	1674 <usart_init+0x23c>
    1536:	2380      	movs	r3, #128	; 0x80
    1538:	055b      	lsls	r3, r3, #21
    153a:	4599      	cmp	r9, r3
    153c:	d100      	bne.n	1540 <usart_init+0x108>
    153e:	e082      	b.n	1646 <usart_init+0x20e>
	if(config->encoding_format_enable) {
    1540:	7e73      	ldrb	r3, [r6, #25]
    1542:	2b00      	cmp	r3, #0
    1544:	d002      	beq.n	154c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1546:	7eb3      	ldrb	r3, [r6, #26]
    1548:	4642      	mov	r2, r8
    154a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    154c:	682a      	ldr	r2, [r5, #0]
    154e:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1550:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1552:	2b00      	cmp	r3, #0
    1554:	d1fc      	bne.n	1550 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    1556:	330e      	adds	r3, #14
    1558:	aa06      	add	r2, sp, #24
    155a:	4694      	mov	ip, r2
    155c:	4463      	add	r3, ip
    155e:	881b      	ldrh	r3, [r3, #0]
    1560:	4642      	mov	r2, r8
    1562:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1564:	9b05      	ldr	r3, [sp, #20]
    1566:	465a      	mov	r2, fp
    1568:	4313      	orrs	r3, r2
    156a:	9a03      	ldr	r2, [sp, #12]
    156c:	4313      	orrs	r3, r2
    156e:	464a      	mov	r2, r9
    1570:	4313      	orrs	r3, r2
    1572:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1574:	9b04      	ldr	r3, [sp, #16]
    1576:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1578:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    157a:	4653      	mov	r3, sl
    157c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    157e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1580:	2327      	movs	r3, #39	; 0x27
    1582:	5cf3      	ldrb	r3, [r6, r3]
    1584:	2b00      	cmp	r3, #0
    1586:	d101      	bne.n	158c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1588:	3304      	adds	r3, #4
    158a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    158c:	7e73      	ldrb	r3, [r6, #25]
    158e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1590:	7f32      	ldrb	r2, [r6, #28]
    1592:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1594:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1596:	7f72      	ldrb	r2, [r6, #29]
    1598:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    159a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    159c:	2224      	movs	r2, #36	; 0x24
    159e:	5cb2      	ldrb	r2, [r6, r2]
    15a0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    15a2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    15a4:	2225      	movs	r2, #37	; 0x25
    15a6:	5cb2      	ldrb	r2, [r6, r2]
    15a8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    15aa:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    15ac:	7af1      	ldrb	r1, [r6, #11]
    15ae:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    15b0:	8933      	ldrh	r3, [r6, #8]
    15b2:	2bff      	cmp	r3, #255	; 0xff
    15b4:	d100      	bne.n	15b8 <usart_init+0x180>
    15b6:	e081      	b.n	16bc <usart_init+0x284>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    15b8:	2280      	movs	r2, #128	; 0x80
    15ba:	0452      	lsls	r2, r2, #17
    15bc:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    15be:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    15c0:	232c      	movs	r3, #44	; 0x2c
    15c2:	5cf3      	ldrb	r3, [r6, r3]
    15c4:	2b00      	cmp	r3, #0
    15c6:	d103      	bne.n	15d0 <usart_init+0x198>
    15c8:	4b62      	ldr	r3, [pc, #392]	; (1754 <usart_init+0x31c>)
    15ca:	789b      	ldrb	r3, [r3, #2]
    15cc:	079b      	lsls	r3, r3, #30
    15ce:	d501      	bpl.n	15d4 <usart_init+0x19c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    15d0:	2380      	movs	r3, #128	; 0x80
    15d2:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    15d4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    15d6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    15d8:	2b00      	cmp	r3, #0
    15da:	d1fc      	bne.n	15d6 <usart_init+0x19e>
	usart_hw->CTRLB.reg = ctrlb;
    15dc:	4643      	mov	r3, r8
    15de:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    15e0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    15e2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    15e4:	2b00      	cmp	r3, #0
    15e6:	d1fc      	bne.n	15e2 <usart_init+0x1aa>
	usart_hw->CTRLA.reg = ctrla;
    15e8:	4643      	mov	r3, r8
    15ea:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    15ec:	ab0e      	add	r3, sp, #56	; 0x38
    15ee:	2280      	movs	r2, #128	; 0x80
    15f0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    15f2:	2200      	movs	r2, #0
    15f4:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    15f6:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    15f8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    15fa:	6b33      	ldr	r3, [r6, #48]	; 0x30
    15fc:	930a      	str	r3, [sp, #40]	; 0x28
    15fe:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1600:	930b      	str	r3, [sp, #44]	; 0x2c
    1602:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1604:	930c      	str	r3, [sp, #48]	; 0x30
    1606:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1608:	9302      	str	r3, [sp, #8]
    160a:	930d      	str	r3, [sp, #52]	; 0x34
    160c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    160e:	ae0a      	add	r6, sp, #40	; 0x28
    1610:	e063      	b.n	16da <usart_init+0x2a2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1612:	2308      	movs	r3, #8
    1614:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1616:	3b07      	subs	r3, #7
    1618:	9307      	str	r3, [sp, #28]
    161a:	e77c      	b.n	1516 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    161c:	6833      	ldr	r3, [r6, #0]
    161e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1620:	68f3      	ldr	r3, [r6, #12]
    1622:	469b      	mov	fp, r3
		config->sample_adjustment |
    1624:	6973      	ldr	r3, [r6, #20]
    1626:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1628:	7e33      	ldrb	r3, [r6, #24]
    162a:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    162c:	2326      	movs	r3, #38	; 0x26
    162e:	5cf3      	ldrb	r3, [r6, r3]
    1630:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1632:	6873      	ldr	r3, [r6, #4]
    1634:	4699      	mov	r9, r3
	switch (transfer_mode)
    1636:	2b00      	cmp	r3, #0
    1638:	d018      	beq.n	166c <usart_init+0x234>
    163a:	2380      	movs	r3, #128	; 0x80
    163c:	055b      	lsls	r3, r3, #21
    163e:	4599      	cmp	r9, r3
    1640:	d001      	beq.n	1646 <usart_init+0x20e>
	enum status_code status_code = STATUS_OK;
    1642:	2000      	movs	r0, #0
    1644:	e025      	b.n	1692 <usart_init+0x25a>
			if (!config->use_external_clock) {
    1646:	2327      	movs	r3, #39	; 0x27
    1648:	5cf3      	ldrb	r3, [r6, r3]
    164a:	2b00      	cmp	r3, #0
    164c:	d000      	beq.n	1650 <usart_init+0x218>
    164e:	e777      	b.n	1540 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1650:	6a33      	ldr	r3, [r6, #32]
    1652:	001f      	movs	r7, r3
    1654:	b2c0      	uxtb	r0, r0
    1656:	4b40      	ldr	r3, [pc, #256]	; (1758 <usart_init+0x320>)
    1658:	4798      	blx	r3
    165a:	0001      	movs	r1, r0
    165c:	220e      	movs	r2, #14
    165e:	ab06      	add	r3, sp, #24
    1660:	469c      	mov	ip, r3
    1662:	4462      	add	r2, ip
    1664:	0038      	movs	r0, r7
    1666:	4b3d      	ldr	r3, [pc, #244]	; (175c <usart_init+0x324>)
    1668:	4798      	blx	r3
    166a:	e012      	b.n	1692 <usart_init+0x25a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    166c:	2308      	movs	r3, #8
    166e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1670:	2300      	movs	r3, #0
    1672:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1674:	2327      	movs	r3, #39	; 0x27
    1676:	5cf3      	ldrb	r3, [r6, r3]
    1678:	2b00      	cmp	r3, #0
    167a:	d00e      	beq.n	169a <usart_init+0x262>
				status_code =
    167c:	9b06      	ldr	r3, [sp, #24]
    167e:	9300      	str	r3, [sp, #0]
    1680:	9b07      	ldr	r3, [sp, #28]
    1682:	220e      	movs	r2, #14
    1684:	a906      	add	r1, sp, #24
    1686:	468c      	mov	ip, r1
    1688:	4462      	add	r2, ip
    168a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    168c:	6a30      	ldr	r0, [r6, #32]
    168e:	4f34      	ldr	r7, [pc, #208]	; (1760 <usart_init+0x328>)
    1690:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1692:	2800      	cmp	r0, #0
    1694:	d000      	beq.n	1698 <usart_init+0x260>
    1696:	e6e2      	b.n	145e <usart_init+0x26>
    1698:	e752      	b.n	1540 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    169a:	6a33      	ldr	r3, [r6, #32]
    169c:	001f      	movs	r7, r3
    169e:	b2c0      	uxtb	r0, r0
    16a0:	4b2d      	ldr	r3, [pc, #180]	; (1758 <usart_init+0x320>)
    16a2:	4798      	blx	r3
    16a4:	0001      	movs	r1, r0
				status_code =
    16a6:	9b06      	ldr	r3, [sp, #24]
    16a8:	9300      	str	r3, [sp, #0]
    16aa:	9b07      	ldr	r3, [sp, #28]
    16ac:	220e      	movs	r2, #14
    16ae:	a806      	add	r0, sp, #24
    16b0:	4684      	mov	ip, r0
    16b2:	4462      	add	r2, ip
    16b4:	0038      	movs	r0, r7
    16b6:	4f2a      	ldr	r7, [pc, #168]	; (1760 <usart_init+0x328>)
    16b8:	47b8      	blx	r7
    16ba:	e7ea      	b.n	1692 <usart_init+0x25a>
		if(config->lin_slave_enable) {
    16bc:	7ef3      	ldrb	r3, [r6, #27]
    16be:	2b00      	cmp	r3, #0
    16c0:	d100      	bne.n	16c4 <usart_init+0x28c>
    16c2:	e77d      	b.n	15c0 <usart_init+0x188>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    16c4:	2380      	movs	r3, #128	; 0x80
    16c6:	04db      	lsls	r3, r3, #19
    16c8:	431f      	orrs	r7, r3
    16ca:	e779      	b.n	15c0 <usart_init+0x188>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    16cc:	0020      	movs	r0, r4
    16ce:	4b25      	ldr	r3, [pc, #148]	; (1764 <usart_init+0x32c>)
    16d0:	4798      	blx	r3
    16d2:	e007      	b.n	16e4 <usart_init+0x2ac>
    16d4:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    16d6:	2f04      	cmp	r7, #4
    16d8:	d00d      	beq.n	16f6 <usart_init+0x2be>
    16da:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    16dc:	00bb      	lsls	r3, r7, #2
    16de:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    16e0:	2800      	cmp	r0, #0
    16e2:	d0f3      	beq.n	16cc <usart_init+0x294>
		if (current_pinmux != PINMUX_UNUSED) {
    16e4:	1c43      	adds	r3, r0, #1
    16e6:	d0f5      	beq.n	16d4 <usart_init+0x29c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    16e8:	a90e      	add	r1, sp, #56	; 0x38
    16ea:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    16ec:	0c00      	lsrs	r0, r0, #16
    16ee:	b2c0      	uxtb	r0, r0
    16f0:	4b1d      	ldr	r3, [pc, #116]	; (1768 <usart_init+0x330>)
    16f2:	4798      	blx	r3
    16f4:	e7ee      	b.n	16d4 <usart_init+0x29c>
		module->callback[i]            = NULL;
    16f6:	2300      	movs	r3, #0
    16f8:	60eb      	str	r3, [r5, #12]
    16fa:	612b      	str	r3, [r5, #16]
    16fc:	616b      	str	r3, [r5, #20]
    16fe:	61ab      	str	r3, [r5, #24]
    1700:	61eb      	str	r3, [r5, #28]
    1702:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1704:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1706:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1708:	2200      	movs	r2, #0
    170a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    170c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    170e:	3330      	adds	r3, #48	; 0x30
    1710:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1712:	3301      	adds	r3, #1
    1714:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1716:	3301      	adds	r3, #1
    1718:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    171a:	3301      	adds	r3, #1
    171c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    171e:	6828      	ldr	r0, [r5, #0]
    1720:	4b07      	ldr	r3, [pc, #28]	; (1740 <usart_init+0x308>)
    1722:	4798      	blx	r3
    1724:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1726:	4911      	ldr	r1, [pc, #68]	; (176c <usart_init+0x334>)
    1728:	4b11      	ldr	r3, [pc, #68]	; (1770 <usart_init+0x338>)
    172a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    172c:	00a4      	lsls	r4, r4, #2
    172e:	4b11      	ldr	r3, [pc, #68]	; (1774 <usart_init+0x33c>)
    1730:	50e5      	str	r5, [r4, r3]
	return status_code;
    1732:	2000      	movs	r0, #0
    1734:	e693      	b.n	145e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1736:	2310      	movs	r3, #16
    1738:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    173a:	2300      	movs	r3, #0
    173c:	9307      	str	r3, [sp, #28]
    173e:	e6ea      	b.n	1516 <usart_init+0xde>
    1740:	00000f79 	.word	0x00000f79
    1744:	40000400 	.word	0x40000400
    1748:	000021e1 	.word	0x000021e1
    174c:	00002155 	.word	0x00002155
    1750:	00000db5 	.word	0x00000db5
    1754:	41002000 	.word	0x41002000
    1758:	000021fd 	.word	0x000021fd
    175c:	00000bbd 	.word	0x00000bbd
    1760:	00000be5 	.word	0x00000be5
    1764:	00000e01 	.word	0x00000e01
    1768:	000022d9 	.word	0x000022d9
    176c:	000018f9 	.word	0x000018f9
    1770:	00000fb5 	.word	0x00000fb5
    1774:	20001530 	.word	0x20001530

00001778 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1778:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    177a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    177c:	2a00      	cmp	r2, #0
    177e:	d101      	bne.n	1784 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1780:	0018      	movs	r0, r3
    1782:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1784:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1786:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1788:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    178a:	2a00      	cmp	r2, #0
    178c:	d1f8      	bne.n	1780 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    178e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1790:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1792:	2a00      	cmp	r2, #0
    1794:	d1fc      	bne.n	1790 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    1796:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1798:	2102      	movs	r1, #2
    179a:	7e1a      	ldrb	r2, [r3, #24]
    179c:	420a      	tst	r2, r1
    179e:	d0fc      	beq.n	179a <usart_write_wait+0x22>
	return STATUS_OK;
    17a0:	2300      	movs	r3, #0
    17a2:	e7ed      	b.n	1780 <usart_write_wait+0x8>

000017a4 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    17a4:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    17a6:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    17a8:	2a00      	cmp	r2, #0
    17aa:	d101      	bne.n	17b0 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    17ac:	0018      	movs	r0, r3
    17ae:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    17b0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    17b2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    17b4:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    17b6:	2a00      	cmp	r2, #0
    17b8:	d1f8      	bne.n	17ac <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    17ba:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    17bc:	7e10      	ldrb	r0, [r2, #24]
    17be:	0740      	lsls	r0, r0, #29
    17c0:	d5f4      	bpl.n	17ac <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    17c2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    17c4:	2b00      	cmp	r3, #0
    17c6:	d1fc      	bne.n	17c2 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    17c8:	8b53      	ldrh	r3, [r2, #26]
    17ca:	b2db      	uxtb	r3, r3
	if (error_code) {
    17cc:	0698      	lsls	r0, r3, #26
    17ce:	d01d      	beq.n	180c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    17d0:	0798      	lsls	r0, r3, #30
    17d2:	d503      	bpl.n	17dc <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    17d4:	2302      	movs	r3, #2
    17d6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    17d8:	3318      	adds	r3, #24
    17da:	e7e7      	b.n	17ac <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    17dc:	0758      	lsls	r0, r3, #29
    17de:	d503      	bpl.n	17e8 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    17e0:	2304      	movs	r3, #4
    17e2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    17e4:	331a      	adds	r3, #26
    17e6:	e7e1      	b.n	17ac <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    17e8:	07d8      	lsls	r0, r3, #31
    17ea:	d503      	bpl.n	17f4 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    17ec:	2301      	movs	r3, #1
    17ee:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    17f0:	3312      	adds	r3, #18
    17f2:	e7db      	b.n	17ac <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    17f4:	06d8      	lsls	r0, r3, #27
    17f6:	d503      	bpl.n	1800 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    17f8:	2310      	movs	r3, #16
    17fa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    17fc:	3332      	adds	r3, #50	; 0x32
    17fe:	e7d5      	b.n	17ac <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1800:	069b      	lsls	r3, r3, #26
    1802:	d503      	bpl.n	180c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1804:	2320      	movs	r3, #32
    1806:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1808:	3321      	adds	r3, #33	; 0x21
    180a:	e7cf      	b.n	17ac <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    180c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    180e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1810:	2300      	movs	r3, #0
    1812:	e7cb      	b.n	17ac <usart_read_wait+0x8>

00001814 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1816:	0006      	movs	r6, r0
    1818:	000c      	movs	r4, r1
    181a:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    181c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    181e:	4b0a      	ldr	r3, [pc, #40]	; (1848 <_usart_write_buffer+0x34>)
    1820:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    1822:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    1824:	b29b      	uxth	r3, r3
    1826:	2b00      	cmp	r3, #0
    1828:	d003      	beq.n	1832 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    182a:	4b08      	ldr	r3, [pc, #32]	; (184c <_usart_write_buffer+0x38>)
    182c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    182e:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    1830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    1832:	85f5      	strh	r5, [r6, #46]	; 0x2e
    1834:	4b05      	ldr	r3, [pc, #20]	; (184c <_usart_write_buffer+0x38>)
    1836:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    1838:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    183a:	2205      	movs	r2, #5
    183c:	2333      	movs	r3, #51	; 0x33
    183e:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    1840:	3b32      	subs	r3, #50	; 0x32
    1842:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    1844:	2000      	movs	r0, #0
    1846:	e7f3      	b.n	1830 <_usart_write_buffer+0x1c>
    1848:	000008c5 	.word	0x000008c5
    184c:	00000905 	.word	0x00000905

00001850 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1852:	0004      	movs	r4, r0
    1854:	000d      	movs	r5, r1
    1856:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1858:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    185a:	4b0f      	ldr	r3, [pc, #60]	; (1898 <_usart_read_buffer+0x48>)
    185c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    185e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1860:	b29b      	uxth	r3, r3
    1862:	2b00      	cmp	r3, #0
    1864:	d003      	beq.n	186e <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    1866:	4b0d      	ldr	r3, [pc, #52]	; (189c <_usart_read_buffer+0x4c>)
    1868:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    186a:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    186c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    186e:	85a6      	strh	r6, [r4, #44]	; 0x2c
    1870:	4b0a      	ldr	r3, [pc, #40]	; (189c <_usart_read_buffer+0x4c>)
    1872:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    1874:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    1876:	2205      	movs	r2, #5
    1878:	2332      	movs	r3, #50	; 0x32
    187a:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    187c:	3b2e      	subs	r3, #46	; 0x2e
    187e:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    1880:	7a23      	ldrb	r3, [r4, #8]
    1882:	2b00      	cmp	r3, #0
    1884:	d001      	beq.n	188a <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    1886:	2320      	movs	r3, #32
    1888:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    188a:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    188c:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    188e:	2b00      	cmp	r3, #0
    1890:	d0ec      	beq.n	186c <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    1892:	2308      	movs	r3, #8
    1894:	75bb      	strb	r3, [r7, #22]
    1896:	e7e9      	b.n	186c <_usart_read_buffer+0x1c>
    1898:	000008c5 	.word	0x000008c5
    189c:	00000905 	.word	0x00000905

000018a0 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    18a0:	1c93      	adds	r3, r2, #2
    18a2:	009b      	lsls	r3, r3, #2
    18a4:	18c3      	adds	r3, r0, r3
    18a6:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    18a8:	2130      	movs	r1, #48	; 0x30
    18aa:	2301      	movs	r3, #1
    18ac:	4093      	lsls	r3, r2
    18ae:	001a      	movs	r2, r3
    18b0:	5c43      	ldrb	r3, [r0, r1]
    18b2:	4313      	orrs	r3, r2
    18b4:	5443      	strb	r3, [r0, r1]
}
    18b6:	4770      	bx	lr

000018b8 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    18b8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    18ba:	2317      	movs	r3, #23
	if (length == 0) {
    18bc:	2a00      	cmp	r2, #0
    18be:	d101      	bne.n	18c4 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    18c0:	0018      	movs	r0, r3
    18c2:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    18c4:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    18c6:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    18c8:	2c00      	cmp	r4, #0
    18ca:	d0f9      	beq.n	18c0 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    18cc:	4b01      	ldr	r3, [pc, #4]	; (18d4 <usart_write_buffer_job+0x1c>)
    18ce:	4798      	blx	r3
    18d0:	0003      	movs	r3, r0
    18d2:	e7f5      	b.n	18c0 <usart_write_buffer_job+0x8>
    18d4:	00001815 	.word	0x00001815

000018d8 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    18d8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    18da:	2317      	movs	r3, #23
	if (length == 0) {
    18dc:	2a00      	cmp	r2, #0
    18de:	d101      	bne.n	18e4 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    18e0:	0018      	movs	r0, r3
    18e2:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    18e4:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    18e6:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    18e8:	2c00      	cmp	r4, #0
    18ea:	d0f9      	beq.n	18e0 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    18ec:	4b01      	ldr	r3, [pc, #4]	; (18f4 <usart_read_buffer_job+0x1c>)
    18ee:	4798      	blx	r3
    18f0:	0003      	movs	r3, r0
    18f2:	e7f5      	b.n	18e0 <usart_read_buffer_job+0x8>
    18f4:	00001851 	.word	0x00001851

000018f8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    18f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    18fa:	0080      	lsls	r0, r0, #2
    18fc:	4b62      	ldr	r3, [pc, #392]	; (1a88 <_usart_interrupt_handler+0x190>)
    18fe:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1900:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1902:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1904:	2b00      	cmp	r3, #0
    1906:	d1fc      	bne.n	1902 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1908:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    190a:	7da6      	ldrb	r6, [r4, #22]
    190c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    190e:	2330      	movs	r3, #48	; 0x30
    1910:	5ceb      	ldrb	r3, [r5, r3]
    1912:	2231      	movs	r2, #49	; 0x31
    1914:	5caf      	ldrb	r7, [r5, r2]
    1916:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1918:	07f3      	lsls	r3, r6, #31
    191a:	d522      	bpl.n	1962 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    191c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    191e:	b29b      	uxth	r3, r3
    1920:	2b00      	cmp	r3, #0
    1922:	d01c      	beq.n	195e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1924:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1926:	7813      	ldrb	r3, [r2, #0]
    1928:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    192a:	1c51      	adds	r1, r2, #1
    192c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    192e:	7969      	ldrb	r1, [r5, #5]
    1930:	2901      	cmp	r1, #1
    1932:	d00e      	beq.n	1952 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1934:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1936:	05db      	lsls	r3, r3, #23
    1938:	0ddb      	lsrs	r3, r3, #23
    193a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    193c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    193e:	3b01      	subs	r3, #1
    1940:	b29b      	uxth	r3, r3
    1942:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1944:	2b00      	cmp	r3, #0
    1946:	d10c      	bne.n	1962 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1948:	3301      	adds	r3, #1
    194a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    194c:	3301      	adds	r3, #1
    194e:	75a3      	strb	r3, [r4, #22]
    1950:	e007      	b.n	1962 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1952:	7851      	ldrb	r1, [r2, #1]
    1954:	0209      	lsls	r1, r1, #8
    1956:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1958:	3202      	adds	r2, #2
    195a:	62aa      	str	r2, [r5, #40]	; 0x28
    195c:	e7eb      	b.n	1936 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    195e:	2301      	movs	r3, #1
    1960:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1962:	07b3      	lsls	r3, r6, #30
    1964:	d506      	bpl.n	1974 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1966:	2302      	movs	r3, #2
    1968:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    196a:	2200      	movs	r2, #0
    196c:	3331      	adds	r3, #49	; 0x31
    196e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1970:	07fb      	lsls	r3, r7, #31
    1972:	d41a      	bmi.n	19aa <_usart_interrupt_handler+0xb2>

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1974:	0773      	lsls	r3, r6, #29
    1976:	d565      	bpl.n	1a44 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1978:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    197a:	b29b      	uxth	r3, r3
    197c:	2b00      	cmp	r3, #0
    197e:	d05f      	beq.n	1a40 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1980:	8b63      	ldrh	r3, [r4, #26]
    1982:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1984:	071a      	lsls	r2, r3, #28
    1986:	d414      	bmi.n	19b2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1988:	223f      	movs	r2, #63	; 0x3f
    198a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    198c:	2b00      	cmp	r3, #0
    198e:	d034      	beq.n	19fa <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1990:	079a      	lsls	r2, r3, #30
    1992:	d511      	bpl.n	19b8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1994:	221a      	movs	r2, #26
    1996:	2332      	movs	r3, #50	; 0x32
    1998:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    199a:	3b30      	subs	r3, #48	; 0x30
    199c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    199e:	077b      	lsls	r3, r7, #29
    19a0:	d550      	bpl.n	1a44 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    19a2:	0028      	movs	r0, r5
    19a4:	696b      	ldr	r3, [r5, #20]
    19a6:	4798      	blx	r3
    19a8:	e04c      	b.n	1a44 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    19aa:	0028      	movs	r0, r5
    19ac:	68eb      	ldr	r3, [r5, #12]
    19ae:	4798      	blx	r3
    19b0:	e7e0      	b.n	1974 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    19b2:	2237      	movs	r2, #55	; 0x37
    19b4:	4013      	ands	r3, r2
    19b6:	e7e9      	b.n	198c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    19b8:	075a      	lsls	r2, r3, #29
    19ba:	d505      	bpl.n	19c8 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    19bc:	221e      	movs	r2, #30
    19be:	2332      	movs	r3, #50	; 0x32
    19c0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    19c2:	3b2e      	subs	r3, #46	; 0x2e
    19c4:	8363      	strh	r3, [r4, #26]
    19c6:	e7ea      	b.n	199e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    19c8:	07da      	lsls	r2, r3, #31
    19ca:	d505      	bpl.n	19d8 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    19cc:	2213      	movs	r2, #19
    19ce:	2332      	movs	r3, #50	; 0x32
    19d0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    19d2:	3b31      	subs	r3, #49	; 0x31
    19d4:	8363      	strh	r3, [r4, #26]
    19d6:	e7e2      	b.n	199e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    19d8:	06da      	lsls	r2, r3, #27
    19da:	d505      	bpl.n	19e8 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    19dc:	2242      	movs	r2, #66	; 0x42
    19de:	2332      	movs	r3, #50	; 0x32
    19e0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    19e2:	3b22      	subs	r3, #34	; 0x22
    19e4:	8363      	strh	r3, [r4, #26]
    19e6:	e7da      	b.n	199e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    19e8:	2220      	movs	r2, #32
    19ea:	421a      	tst	r2, r3
    19ec:	d0d7      	beq.n	199e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    19ee:	3221      	adds	r2, #33	; 0x21
    19f0:	2332      	movs	r3, #50	; 0x32
    19f2:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    19f4:	3b12      	subs	r3, #18
    19f6:	8363      	strh	r3, [r4, #26]
    19f8:	e7d1      	b.n	199e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    19fa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    19fc:	05db      	lsls	r3, r3, #23
    19fe:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1a00:	b2da      	uxtb	r2, r3
    1a02:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1a04:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1a06:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1a08:	1c51      	adds	r1, r2, #1
    1a0a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1a0c:	7969      	ldrb	r1, [r5, #5]
    1a0e:	2901      	cmp	r1, #1
    1a10:	d010      	beq.n	1a34 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1a12:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1a14:	3b01      	subs	r3, #1
    1a16:	b29b      	uxth	r3, r3
    1a18:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1a1a:	2b00      	cmp	r3, #0
    1a1c:	d112      	bne.n	1a44 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1a1e:	3304      	adds	r3, #4
    1a20:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1a22:	2200      	movs	r2, #0
    1a24:	332e      	adds	r3, #46	; 0x2e
    1a26:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1a28:	07bb      	lsls	r3, r7, #30
    1a2a:	d50b      	bpl.n	1a44 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1a2c:	0028      	movs	r0, r5
    1a2e:	692b      	ldr	r3, [r5, #16]
    1a30:	4798      	blx	r3
    1a32:	e007      	b.n	1a44 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1a34:	0a1b      	lsrs	r3, r3, #8
    1a36:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1a38:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1a3a:	3301      	adds	r3, #1
    1a3c:	626b      	str	r3, [r5, #36]	; 0x24
    1a3e:	e7e8      	b.n	1a12 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1a40:	2304      	movs	r3, #4
    1a42:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1a44:	06f3      	lsls	r3, r6, #27
    1a46:	d504      	bpl.n	1a52 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1a48:	2310      	movs	r3, #16
    1a4a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1a4c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1a4e:	06fb      	lsls	r3, r7, #27
    1a50:	d40e      	bmi.n	1a70 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1a52:	06b3      	lsls	r3, r6, #26
    1a54:	d504      	bpl.n	1a60 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1a56:	2320      	movs	r3, #32
    1a58:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1a5a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1a5c:	073b      	lsls	r3, r7, #28
    1a5e:	d40b      	bmi.n	1a78 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1a60:	0733      	lsls	r3, r6, #28
    1a62:	d504      	bpl.n	1a6e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1a64:	2308      	movs	r3, #8
    1a66:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1a68:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1a6a:	06bb      	lsls	r3, r7, #26
    1a6c:	d408      	bmi.n	1a80 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1a70:	0028      	movs	r0, r5
    1a72:	69eb      	ldr	r3, [r5, #28]
    1a74:	4798      	blx	r3
    1a76:	e7ec      	b.n	1a52 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1a78:	0028      	movs	r0, r5
    1a7a:	69ab      	ldr	r3, [r5, #24]
    1a7c:	4798      	blx	r3
    1a7e:	e7ef      	b.n	1a60 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1a80:	6a2b      	ldr	r3, [r5, #32]
    1a82:	0028      	movs	r0, r5
    1a84:	4798      	blx	r3
}
    1a86:	e7f2      	b.n	1a6e <_usart_interrupt_handler+0x176>
    1a88:	20001530 	.word	0x20001530

00001a8c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1a8c:	b510      	push	{r4, lr}
	switch (clock_source) {
    1a8e:	2808      	cmp	r0, #8
    1a90:	d803      	bhi.n	1a9a <system_clock_source_get_hz+0xe>
    1a92:	0080      	lsls	r0, r0, #2
    1a94:	4b1b      	ldr	r3, [pc, #108]	; (1b04 <system_clock_source_get_hz+0x78>)
    1a96:	581b      	ldr	r3, [r3, r0]
    1a98:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1a9a:	2000      	movs	r0, #0
    1a9c:	e030      	b.n	1b00 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    1a9e:	4b1a      	ldr	r3, [pc, #104]	; (1b08 <system_clock_source_get_hz+0x7c>)
    1aa0:	6918      	ldr	r0, [r3, #16]
    1aa2:	e02d      	b.n	1b00 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1aa4:	4b19      	ldr	r3, [pc, #100]	; (1b0c <system_clock_source_get_hz+0x80>)
    1aa6:	6a1b      	ldr	r3, [r3, #32]
    1aa8:	059b      	lsls	r3, r3, #22
    1aaa:	0f9b      	lsrs	r3, r3, #30
    1aac:	4818      	ldr	r0, [pc, #96]	; (1b10 <system_clock_source_get_hz+0x84>)
    1aae:	40d8      	lsrs	r0, r3
    1ab0:	e026      	b.n	1b00 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    1ab2:	4b15      	ldr	r3, [pc, #84]	; (1b08 <system_clock_source_get_hz+0x7c>)
    1ab4:	6958      	ldr	r0, [r3, #20]
    1ab6:	e023      	b.n	1b00 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1ab8:	4b13      	ldr	r3, [pc, #76]	; (1b08 <system_clock_source_get_hz+0x7c>)
    1aba:	681b      	ldr	r3, [r3, #0]
			return 0;
    1abc:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1abe:	079b      	lsls	r3, r3, #30
    1ac0:	d51e      	bpl.n	1b00 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1ac2:	4912      	ldr	r1, [pc, #72]	; (1b0c <system_clock_source_get_hz+0x80>)
    1ac4:	2210      	movs	r2, #16
    1ac6:	68cb      	ldr	r3, [r1, #12]
    1ac8:	421a      	tst	r2, r3
    1aca:	d0fc      	beq.n	1ac6 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1acc:	4b0e      	ldr	r3, [pc, #56]	; (1b08 <system_clock_source_get_hz+0x7c>)
    1ace:	681b      	ldr	r3, [r3, #0]
    1ad0:	075b      	lsls	r3, r3, #29
    1ad2:	d401      	bmi.n	1ad8 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1ad4:	480f      	ldr	r0, [pc, #60]	; (1b14 <system_clock_source_get_hz+0x88>)
    1ad6:	e013      	b.n	1b00 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1ad8:	2000      	movs	r0, #0
    1ada:	4b0f      	ldr	r3, [pc, #60]	; (1b18 <system_clock_source_get_hz+0x8c>)
    1adc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1ade:	4b0a      	ldr	r3, [pc, #40]	; (1b08 <system_clock_source_get_hz+0x7c>)
    1ae0:	689b      	ldr	r3, [r3, #8]
    1ae2:	041b      	lsls	r3, r3, #16
    1ae4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1ae6:	4358      	muls	r0, r3
    1ae8:	e00a      	b.n	1b00 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1aea:	2350      	movs	r3, #80	; 0x50
    1aec:	4a07      	ldr	r2, [pc, #28]	; (1b0c <system_clock_source_get_hz+0x80>)
    1aee:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1af0:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1af2:	075b      	lsls	r3, r3, #29
    1af4:	d504      	bpl.n	1b00 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1af6:	4b04      	ldr	r3, [pc, #16]	; (1b08 <system_clock_source_get_hz+0x7c>)
    1af8:	68d8      	ldr	r0, [r3, #12]
    1afa:	e001      	b.n	1b00 <system_clock_source_get_hz+0x74>
		return 32768UL;
    1afc:	2080      	movs	r0, #128	; 0x80
    1afe:	0200      	lsls	r0, r0, #8
	}
}
    1b00:	bd10      	pop	{r4, pc}
    1b02:	46c0      	nop			; (mov r8, r8)
    1b04:	00008a2c 	.word	0x00008a2c
    1b08:	20000220 	.word	0x20000220
    1b0c:	40000800 	.word	0x40000800
    1b10:	007a1200 	.word	0x007a1200
    1b14:	02dc6c00 	.word	0x02dc6c00
    1b18:	000021fd 	.word	0x000021fd

00001b1c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1b1c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1b1e:	490c      	ldr	r1, [pc, #48]	; (1b50 <system_clock_source_osc8m_set_config+0x34>)
    1b20:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1b22:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1b24:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1b26:	7840      	ldrb	r0, [r0, #1]
    1b28:	2201      	movs	r2, #1
    1b2a:	4010      	ands	r0, r2
    1b2c:	0180      	lsls	r0, r0, #6
    1b2e:	2640      	movs	r6, #64	; 0x40
    1b30:	43b3      	bics	r3, r6
    1b32:	4303      	orrs	r3, r0
    1b34:	402a      	ands	r2, r5
    1b36:	01d2      	lsls	r2, r2, #7
    1b38:	2080      	movs	r0, #128	; 0x80
    1b3a:	4383      	bics	r3, r0
    1b3c:	4313      	orrs	r3, r2
    1b3e:	2203      	movs	r2, #3
    1b40:	4022      	ands	r2, r4
    1b42:	0212      	lsls	r2, r2, #8
    1b44:	4803      	ldr	r0, [pc, #12]	; (1b54 <system_clock_source_osc8m_set_config+0x38>)
    1b46:	4003      	ands	r3, r0
    1b48:	4313      	orrs	r3, r2
    1b4a:	620b      	str	r3, [r1, #32]
}
    1b4c:	bd70      	pop	{r4, r5, r6, pc}
    1b4e:	46c0      	nop			; (mov r8, r8)
    1b50:	40000800 	.word	0x40000800
    1b54:	fffffcff 	.word	0xfffffcff

00001b58 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b5a:	46ce      	mov	lr, r9
    1b5c:	4647      	mov	r7, r8
    1b5e:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1b60:	4b19      	ldr	r3, [pc, #100]	; (1bc8 <system_clock_source_osc32k_set_config+0x70>)
    1b62:	4699      	mov	r9, r3
    1b64:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    1b66:	7841      	ldrb	r1, [r0, #1]
    1b68:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1b6a:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1b6c:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1b6e:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    1b70:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    1b72:	7880      	ldrb	r0, [r0, #2]
    1b74:	2101      	movs	r1, #1
    1b76:	4008      	ands	r0, r1
    1b78:	0080      	lsls	r0, r0, #2
    1b7a:	2204      	movs	r2, #4
    1b7c:	4393      	bics	r3, r2
    1b7e:	4303      	orrs	r3, r0
    1b80:	4660      	mov	r0, ip
    1b82:	4008      	ands	r0, r1
    1b84:	00c0      	lsls	r0, r0, #3
    1b86:	3204      	adds	r2, #4
    1b88:	4393      	bics	r3, r2
    1b8a:	4303      	orrs	r3, r0
    1b8c:	0038      	movs	r0, r7
    1b8e:	4008      	ands	r0, r1
    1b90:	0180      	lsls	r0, r0, #6
    1b92:	2740      	movs	r7, #64	; 0x40
    1b94:	43bb      	bics	r3, r7
    1b96:	4303      	orrs	r3, r0
    1b98:	0030      	movs	r0, r6
    1b9a:	4008      	ands	r0, r1
    1b9c:	01c0      	lsls	r0, r0, #7
    1b9e:	2680      	movs	r6, #128	; 0x80
    1ba0:	43b3      	bics	r3, r6
    1ba2:	4303      	orrs	r3, r0
    1ba4:	2007      	movs	r0, #7
    1ba6:	4005      	ands	r5, r0
    1ba8:	022d      	lsls	r5, r5, #8
    1baa:	4808      	ldr	r0, [pc, #32]	; (1bcc <system_clock_source_osc32k_set_config+0x74>)
    1bac:	4003      	ands	r3, r0
    1bae:	432b      	orrs	r3, r5
    1bb0:	4021      	ands	r1, r4
    1bb2:	0309      	lsls	r1, r1, #12
    1bb4:	4806      	ldr	r0, [pc, #24]	; (1bd0 <system_clock_source_osc32k_set_config+0x78>)
    1bb6:	4003      	ands	r3, r0
    1bb8:	430b      	orrs	r3, r1
    1bba:	464a      	mov	r2, r9
    1bbc:	6193      	str	r3, [r2, #24]
}
    1bbe:	bc0c      	pop	{r2, r3}
    1bc0:	4690      	mov	r8, r2
    1bc2:	4699      	mov	r9, r3
    1bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bc6:	46c0      	nop			; (mov r8, r8)
    1bc8:	40000800 	.word	0x40000800
    1bcc:	fffff8ff 	.word	0xfffff8ff
    1bd0:	ffffefff 	.word	0xffffefff

00001bd4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bd6:	46de      	mov	lr, fp
    1bd8:	4657      	mov	r7, sl
    1bda:	464e      	mov	r6, r9
    1bdc:	4645      	mov	r5, r8
    1bde:	b5e0      	push	{r5, r6, r7, lr}
    1be0:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1be2:	4b26      	ldr	r3, [pc, #152]	; (1c7c <system_clock_source_xosc32k_set_config+0xa8>)
    1be4:	469b      	mov	fp, r3
    1be6:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1be8:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1bea:	7800      	ldrb	r0, [r0, #0]
    1bec:	4242      	negs	r2, r0
    1bee:	4142      	adcs	r2, r0
    1bf0:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1bf2:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1bf4:	78ca      	ldrb	r2, [r1, #3]
    1bf6:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1bf8:	790a      	ldrb	r2, [r1, #4]
    1bfa:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1bfc:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1bfe:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1c00:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1c02:	688a      	ldr	r2, [r1, #8]
    1c04:	491e      	ldr	r1, [pc, #120]	; (1c80 <system_clock_source_xosc32k_set_config+0xac>)
    1c06:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1c08:	2101      	movs	r1, #1
    1c0a:	464a      	mov	r2, r9
    1c0c:	0092      	lsls	r2, r2, #2
    1c0e:	4691      	mov	r9, r2
    1c10:	2204      	movs	r2, #4
    1c12:	4393      	bics	r3, r2
    1c14:	464a      	mov	r2, r9
    1c16:	4313      	orrs	r3, r2
    1c18:	4642      	mov	r2, r8
    1c1a:	400a      	ands	r2, r1
    1c1c:	00d2      	lsls	r2, r2, #3
    1c1e:	4690      	mov	r8, r2
    1c20:	2208      	movs	r2, #8
    1c22:	4393      	bics	r3, r2
    1c24:	4642      	mov	r2, r8
    1c26:	4313      	orrs	r3, r2
    1c28:	4662      	mov	r2, ip
    1c2a:	400a      	ands	r2, r1
    1c2c:	0112      	lsls	r2, r2, #4
    1c2e:	4694      	mov	ip, r2
    1c30:	2210      	movs	r2, #16
    1c32:	4393      	bics	r3, r2
    1c34:	4662      	mov	r2, ip
    1c36:	4313      	orrs	r3, r2
    1c38:	4008      	ands	r0, r1
    1c3a:	0140      	lsls	r0, r0, #5
    1c3c:	2220      	movs	r2, #32
    1c3e:	4393      	bics	r3, r2
    1c40:	4303      	orrs	r3, r0
    1c42:	400f      	ands	r7, r1
    1c44:	01bf      	lsls	r7, r7, #6
    1c46:	2040      	movs	r0, #64	; 0x40
    1c48:	4383      	bics	r3, r0
    1c4a:	433b      	orrs	r3, r7
    1c4c:	400e      	ands	r6, r1
    1c4e:	01f6      	lsls	r6, r6, #7
    1c50:	3040      	adds	r0, #64	; 0x40
    1c52:	4383      	bics	r3, r0
    1c54:	4333      	orrs	r3, r6
    1c56:	3879      	subs	r0, #121	; 0x79
    1c58:	4005      	ands	r5, r0
    1c5a:	022d      	lsls	r5, r5, #8
    1c5c:	4809      	ldr	r0, [pc, #36]	; (1c84 <system_clock_source_xosc32k_set_config+0xb0>)
    1c5e:	4003      	ands	r3, r0
    1c60:	432b      	orrs	r3, r5
    1c62:	4021      	ands	r1, r4
    1c64:	0309      	lsls	r1, r1, #12
    1c66:	4808      	ldr	r0, [pc, #32]	; (1c88 <system_clock_source_xosc32k_set_config+0xb4>)
    1c68:	4003      	ands	r3, r0
    1c6a:	430b      	orrs	r3, r1
    1c6c:	465a      	mov	r2, fp
    1c6e:	8293      	strh	r3, [r2, #20]
}
    1c70:	bc3c      	pop	{r2, r3, r4, r5}
    1c72:	4690      	mov	r8, r2
    1c74:	4699      	mov	r9, r3
    1c76:	46a2      	mov	sl, r4
    1c78:	46ab      	mov	fp, r5
    1c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c7c:	40000800 	.word	0x40000800
    1c80:	20000220 	.word	0x20000220
    1c84:	fffff8ff 	.word	0xfffff8ff
    1c88:	ffffefff 	.word	0xffffefff

00001c8c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1c8c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1c8e:	7a03      	ldrb	r3, [r0, #8]
    1c90:	069b      	lsls	r3, r3, #26
    1c92:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1c94:	8942      	ldrh	r2, [r0, #10]
    1c96:	0592      	lsls	r2, r2, #22
    1c98:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1c9a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1c9c:	4918      	ldr	r1, [pc, #96]	; (1d00 <system_clock_source_dfll_set_config+0x74>)
    1c9e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1ca0:	7983      	ldrb	r3, [r0, #6]
    1ca2:	79c2      	ldrb	r2, [r0, #7]
    1ca4:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1ca6:	8842      	ldrh	r2, [r0, #2]
    1ca8:	8884      	ldrh	r4, [r0, #4]
    1caa:	4322      	orrs	r2, r4
    1cac:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1cae:	7842      	ldrb	r2, [r0, #1]
    1cb0:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1cb2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1cb4:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1cb6:	7803      	ldrb	r3, [r0, #0]
    1cb8:	2b04      	cmp	r3, #4
    1cba:	d011      	beq.n	1ce0 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1cbc:	2b20      	cmp	r3, #32
    1cbe:	d10e      	bne.n	1cde <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1cc0:	7b03      	ldrb	r3, [r0, #12]
    1cc2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1cc4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1cc6:	4313      	orrs	r3, r2
    1cc8:	89c2      	ldrh	r2, [r0, #14]
    1cca:	0412      	lsls	r2, r2, #16
    1ccc:	490d      	ldr	r1, [pc, #52]	; (1d04 <system_clock_source_dfll_set_config+0x78>)
    1cce:	400a      	ands	r2, r1
    1cd0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1cd2:	4a0b      	ldr	r2, [pc, #44]	; (1d00 <system_clock_source_dfll_set_config+0x74>)
    1cd4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1cd6:	6811      	ldr	r1, [r2, #0]
    1cd8:	4b0b      	ldr	r3, [pc, #44]	; (1d08 <system_clock_source_dfll_set_config+0x7c>)
    1cda:	430b      	orrs	r3, r1
    1cdc:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1cde:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1ce0:	7b03      	ldrb	r3, [r0, #12]
    1ce2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1ce4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1ce6:	4313      	orrs	r3, r2
    1ce8:	89c2      	ldrh	r2, [r0, #14]
    1cea:	0412      	lsls	r2, r2, #16
    1cec:	4905      	ldr	r1, [pc, #20]	; (1d04 <system_clock_source_dfll_set_config+0x78>)
    1cee:	400a      	ands	r2, r1
    1cf0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1cf2:	4a03      	ldr	r2, [pc, #12]	; (1d00 <system_clock_source_dfll_set_config+0x74>)
    1cf4:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1cf6:	6813      	ldr	r3, [r2, #0]
    1cf8:	2104      	movs	r1, #4
    1cfa:	430b      	orrs	r3, r1
    1cfc:	6013      	str	r3, [r2, #0]
    1cfe:	e7ee      	b.n	1cde <system_clock_source_dfll_set_config+0x52>
    1d00:	20000220 	.word	0x20000220
    1d04:	03ff0000 	.word	0x03ff0000
    1d08:	00000424 	.word	0x00000424

00001d0c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1d0c:	2808      	cmp	r0, #8
    1d0e:	d803      	bhi.n	1d18 <system_clock_source_enable+0xc>
    1d10:	0080      	lsls	r0, r0, #2
    1d12:	4b25      	ldr	r3, [pc, #148]	; (1da8 <system_clock_source_enable+0x9c>)
    1d14:	581b      	ldr	r3, [r3, r0]
    1d16:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1d18:	2017      	movs	r0, #23
    1d1a:	e044      	b.n	1da6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1d1c:	4a23      	ldr	r2, [pc, #140]	; (1dac <system_clock_source_enable+0xa0>)
    1d1e:	6a13      	ldr	r3, [r2, #32]
    1d20:	2102      	movs	r1, #2
    1d22:	430b      	orrs	r3, r1
    1d24:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1d26:	2000      	movs	r0, #0
    1d28:	e03d      	b.n	1da6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1d2a:	4a20      	ldr	r2, [pc, #128]	; (1dac <system_clock_source_enable+0xa0>)
    1d2c:	6993      	ldr	r3, [r2, #24]
    1d2e:	2102      	movs	r1, #2
    1d30:	430b      	orrs	r3, r1
    1d32:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1d34:	2000      	movs	r0, #0
		break;
    1d36:	e036      	b.n	1da6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1d38:	4a1c      	ldr	r2, [pc, #112]	; (1dac <system_clock_source_enable+0xa0>)
    1d3a:	8a13      	ldrh	r3, [r2, #16]
    1d3c:	2102      	movs	r1, #2
    1d3e:	430b      	orrs	r3, r1
    1d40:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1d42:	2000      	movs	r0, #0
		break;
    1d44:	e02f      	b.n	1da6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1d46:	4a19      	ldr	r2, [pc, #100]	; (1dac <system_clock_source_enable+0xa0>)
    1d48:	8a93      	ldrh	r3, [r2, #20]
    1d4a:	2102      	movs	r1, #2
    1d4c:	430b      	orrs	r3, r1
    1d4e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1d50:	2000      	movs	r0, #0
		break;
    1d52:	e028      	b.n	1da6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1d54:	4916      	ldr	r1, [pc, #88]	; (1db0 <system_clock_source_enable+0xa4>)
    1d56:	680b      	ldr	r3, [r1, #0]
    1d58:	2202      	movs	r2, #2
    1d5a:	4313      	orrs	r3, r2
    1d5c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1d5e:	4b13      	ldr	r3, [pc, #76]	; (1dac <system_clock_source_enable+0xa0>)
    1d60:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d62:	0019      	movs	r1, r3
    1d64:	320e      	adds	r2, #14
    1d66:	68cb      	ldr	r3, [r1, #12]
    1d68:	421a      	tst	r2, r3
    1d6a:	d0fc      	beq.n	1d66 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1d6c:	4a10      	ldr	r2, [pc, #64]	; (1db0 <system_clock_source_enable+0xa4>)
    1d6e:	6891      	ldr	r1, [r2, #8]
    1d70:	4b0e      	ldr	r3, [pc, #56]	; (1dac <system_clock_source_enable+0xa0>)
    1d72:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1d74:	6852      	ldr	r2, [r2, #4]
    1d76:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1d78:	2200      	movs	r2, #0
    1d7a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d7c:	0019      	movs	r1, r3
    1d7e:	3210      	adds	r2, #16
    1d80:	68cb      	ldr	r3, [r1, #12]
    1d82:	421a      	tst	r2, r3
    1d84:	d0fc      	beq.n	1d80 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1d86:	4b0a      	ldr	r3, [pc, #40]	; (1db0 <system_clock_source_enable+0xa4>)
    1d88:	681b      	ldr	r3, [r3, #0]
    1d8a:	b29b      	uxth	r3, r3
    1d8c:	4a07      	ldr	r2, [pc, #28]	; (1dac <system_clock_source_enable+0xa0>)
    1d8e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1d90:	2000      	movs	r0, #0
    1d92:	e008      	b.n	1da6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1d94:	4905      	ldr	r1, [pc, #20]	; (1dac <system_clock_source_enable+0xa0>)
    1d96:	2244      	movs	r2, #68	; 0x44
    1d98:	5c8b      	ldrb	r3, [r1, r2]
    1d9a:	2002      	movs	r0, #2
    1d9c:	4303      	orrs	r3, r0
    1d9e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1da0:	2000      	movs	r0, #0
		break;
    1da2:	e000      	b.n	1da6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1da4:	2000      	movs	r0, #0
}
    1da6:	4770      	bx	lr
    1da8:	00008a50 	.word	0x00008a50
    1dac:	40000800 	.word	0x40000800
    1db0:	20000220 	.word	0x20000220

00001db4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1db4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1db6:	46d6      	mov	lr, sl
    1db8:	464f      	mov	r7, r9
    1dba:	4646      	mov	r6, r8
    1dbc:	b5c0      	push	{r6, r7, lr}
    1dbe:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1dc0:	22c2      	movs	r2, #194	; 0xc2
    1dc2:	00d2      	lsls	r2, r2, #3
    1dc4:	4b69      	ldr	r3, [pc, #420]	; (1f6c <system_clock_init+0x1b8>)
    1dc6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1dc8:	4a69      	ldr	r2, [pc, #420]	; (1f70 <system_clock_init+0x1bc>)
    1dca:	6853      	ldr	r3, [r2, #4]
    1dcc:	211e      	movs	r1, #30
    1dce:	438b      	bics	r3, r1
    1dd0:	391a      	subs	r1, #26
    1dd2:	430b      	orrs	r3, r1
    1dd4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_5;
    1dd6:	2205      	movs	r2, #5
    1dd8:	ab01      	add	r3, sp, #4
    1dda:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1ddc:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1dde:	4d65      	ldr	r5, [pc, #404]	; (1f74 <system_clock_init+0x1c0>)
    1de0:	b2e0      	uxtb	r0, r4
    1de2:	a901      	add	r1, sp, #4
    1de4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1de6:	3401      	adds	r4, #1
    1de8:	2c25      	cmp	r4, #37	; 0x25
    1dea:	d1f9      	bne.n	1de0 <system_clock_init+0x2c>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1dec:	a80c      	add	r0, sp, #48	; 0x30
    1dee:	2300      	movs	r3, #0
    1df0:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    1df2:	2280      	movs	r2, #128	; 0x80
    1df4:	0212      	lsls	r2, r2, #8
    1df6:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1df8:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1dfa:	2201      	movs	r2, #1
    1dfc:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1dfe:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1e00:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1e02:	2106      	movs	r1, #6
    1e04:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    1e06:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1e08:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1e0a:	4b5b      	ldr	r3, [pc, #364]	; (1f78 <system_clock_init+0x1c4>)
    1e0c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1e0e:	2005      	movs	r0, #5
    1e10:	4b5a      	ldr	r3, [pc, #360]	; (1f7c <system_clock_init+0x1c8>)
    1e12:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1e14:	4955      	ldr	r1, [pc, #340]	; (1f6c <system_clock_init+0x1b8>)
    1e16:	2202      	movs	r2, #2
    1e18:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1e1a:	421a      	tst	r2, r3
    1e1c:	d0fc      	beq.n	1e18 <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1e1e:	4953      	ldr	r1, [pc, #332]	; (1f6c <system_clock_init+0x1b8>)
    1e20:	8a8b      	ldrh	r3, [r1, #20]
    1e22:	2280      	movs	r2, #128	; 0x80
    1e24:	4313      	orrs	r3, r2
    1e26:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    1e28:	4c55      	ldr	r4, [pc, #340]	; (1f80 <system_clock_init+0x1cc>)
	SYSCTRL->OSC32K.bit.CALIB =
    1e2a:	6823      	ldr	r3, [r4, #0]
    1e2c:	04db      	lsls	r3, r3, #19
    1e2e:	698a      	ldr	r2, [r1, #24]
    1e30:	0e5b      	lsrs	r3, r3, #25
    1e32:	041b      	lsls	r3, r3, #16
    1e34:	4853      	ldr	r0, [pc, #332]	; (1f84 <system_clock_init+0x1d0>)
    1e36:	4002      	ands	r2, r0
    1e38:	4313      	orrs	r3, r2
    1e3a:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    1e3c:	a80a      	add	r0, sp, #40	; 0x28
    1e3e:	2301      	movs	r3, #1
    1e40:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    1e42:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    1e44:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1e46:	2207      	movs	r2, #7
    1e48:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    1e4a:	2500      	movs	r5, #0
    1e4c:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1e4e:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1e50:	4b4d      	ldr	r3, [pc, #308]	; (1f88 <system_clock_init+0x1d4>)
    1e52:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1e54:	2004      	movs	r0, #4
    1e56:	4b49      	ldr	r3, [pc, #292]	; (1f7c <system_clock_init+0x1c8>)
    1e58:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1e5a:	ab05      	add	r3, sp, #20
    1e5c:	2200      	movs	r2, #0
    1e5e:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1e60:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1e62:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1e64:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1e66:	213f      	movs	r1, #63	; 0x3f
    1e68:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1e6a:	393b      	subs	r1, #59	; 0x3b
    1e6c:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1e6e:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1e70:	6823      	ldr	r3, [r4, #0]
    1e72:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1e74:	2b3f      	cmp	r3, #63	; 0x3f
    1e76:	d100      	bne.n	1e7a <system_clock_init+0xc6>
    1e78:	e075      	b.n	1f66 <system_clock_init+0x1b2>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1e7a:	a805      	add	r0, sp, #20
    1e7c:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1e7e:	23b7      	movs	r3, #183	; 0xb7
    1e80:	00db      	lsls	r3, r3, #3
    1e82:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1e84:	2307      	movs	r3, #7
    1e86:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1e88:	3338      	adds	r3, #56	; 0x38
    1e8a:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1e8c:	4b3f      	ldr	r3, [pc, #252]	; (1f8c <system_clock_init+0x1d8>)
    1e8e:	4798      	blx	r3
	config->run_in_standby  = false;
    1e90:	a804      	add	r0, sp, #16
    1e92:	2500      	movs	r5, #0
    1e94:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1e96:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1e98:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1e9a:	4b3d      	ldr	r3, [pc, #244]	; (1f90 <system_clock_init+0x1dc>)
    1e9c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1e9e:	2006      	movs	r0, #6
    1ea0:	4b36      	ldr	r3, [pc, #216]	; (1f7c <system_clock_init+0x1c8>)
    1ea2:	4699      	mov	r9, r3
    1ea4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1ea6:	4b3b      	ldr	r3, [pc, #236]	; (1f94 <system_clock_init+0x1e0>)
    1ea8:	4798      	blx	r3
	config->division_factor    = 1;
    1eaa:	ac01      	add	r4, sp, #4
    1eac:	2601      	movs	r6, #1
    1eae:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1eb0:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    1eb2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1eb4:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1eb6:	2305      	movs	r3, #5
    1eb8:	7023      	strb	r3, [r4, #0]
    1eba:	0021      	movs	r1, r4
    1ebc:	2001      	movs	r0, #1
    1ebe:	4b36      	ldr	r3, [pc, #216]	; (1f98 <system_clock_init+0x1e4>)
    1ec0:	4698      	mov	r8, r3
    1ec2:	4798      	blx	r3
    1ec4:	2001      	movs	r0, #1
    1ec6:	4f35      	ldr	r7, [pc, #212]	; (1f9c <system_clock_init+0x1e8>)
    1ec8:	47b8      	blx	r7
	config->high_when_disabled = false;
    1eca:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    1ecc:	7265      	strb	r5, [r4, #9]
    1ece:	2304      	movs	r3, #4
    1ed0:	7023      	strb	r3, [r4, #0]
    1ed2:	331c      	adds	r3, #28
    1ed4:	469a      	mov	sl, r3
    1ed6:	6063      	str	r3, [r4, #4]
    1ed8:	7226      	strb	r6, [r4, #8]
    1eda:	0021      	movs	r1, r4
    1edc:	2002      	movs	r0, #2
    1ede:	47c0      	blx	r8
    1ee0:	2002      	movs	r0, #2
    1ee2:	47b8      	blx	r7
	config->division_factor    = 1;
    1ee4:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1ee6:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1ee8:	2306      	movs	r3, #6
    1eea:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    1eec:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1eee:	7265      	strb	r5, [r4, #9]
    1ef0:	0021      	movs	r1, r4
    1ef2:	2003      	movs	r0, #3
    1ef4:	47c0      	blx	r8
    1ef6:	2003      	movs	r0, #3
    1ef8:	47b8      	blx	r7
	config->high_when_disabled = false;
    1efa:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    1efc:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1efe:	7265      	strb	r5, [r4, #9]
    1f00:	2303      	movs	r3, #3
    1f02:	7023      	strb	r3, [r4, #0]
    1f04:	4653      	mov	r3, sl
    1f06:	6063      	str	r3, [r4, #4]
    1f08:	0021      	movs	r1, r4
    1f0a:	2004      	movs	r0, #4
    1f0c:	47c0      	blx	r8
    1f0e:	2004      	movs	r0, #4
    1f10:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1f12:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1f14:	0021      	movs	r1, r4
    1f16:	2000      	movs	r0, #0
    1f18:	4b16      	ldr	r3, [pc, #88]	; (1f74 <system_clock_init+0x1c0>)
    1f1a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1f1c:	2000      	movs	r0, #0
    1f1e:	4b20      	ldr	r3, [pc, #128]	; (1fa0 <system_clock_init+0x1ec>)
    1f20:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1f22:	2007      	movs	r0, #7
    1f24:	47c8      	blx	r9
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1f26:	4911      	ldr	r1, [pc, #68]	; (1f6c <system_clock_init+0x1b8>)
    1f28:	22d0      	movs	r2, #208	; 0xd0
    1f2a:	68cb      	ldr	r3, [r1, #12]
    1f2c:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1f2e:	2bd0      	cmp	r3, #208	; 0xd0
    1f30:	d1fb      	bne.n	1f2a <system_clock_init+0x176>
	PM->CPUSEL.reg = (uint32_t)divider;
    1f32:	4a1c      	ldr	r2, [pc, #112]	; (1fa4 <system_clock_init+0x1f0>)
    1f34:	2300      	movs	r3, #0
    1f36:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1f38:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1f3a:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1f3c:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1f3e:	a901      	add	r1, sp, #4
    1f40:	2201      	movs	r2, #1
    1f42:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1f44:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1f46:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1f48:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1f4a:	3307      	adds	r3, #7
    1f4c:	700b      	strb	r3, [r1, #0]
    1f4e:	2000      	movs	r0, #0
    1f50:	4b11      	ldr	r3, [pc, #68]	; (1f98 <system_clock_init+0x1e4>)
    1f52:	4798      	blx	r3
    1f54:	2000      	movs	r0, #0
    1f56:	4b11      	ldr	r3, [pc, #68]	; (1f9c <system_clock_init+0x1e8>)
    1f58:	4798      	blx	r3
#endif
}
    1f5a:	b010      	add	sp, #64	; 0x40
    1f5c:	bc1c      	pop	{r2, r3, r4}
    1f5e:	4690      	mov	r8, r2
    1f60:	4699      	mov	r9, r3
    1f62:	46a2      	mov	sl, r4
    1f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1f66:	3b20      	subs	r3, #32
    1f68:	e787      	b.n	1e7a <system_clock_init+0xc6>
    1f6a:	46c0      	nop			; (mov r8, r8)
    1f6c:	40000800 	.word	0x40000800
    1f70:	41004000 	.word	0x41004000
    1f74:	000021e1 	.word	0x000021e1
    1f78:	00001bd5 	.word	0x00001bd5
    1f7c:	00001d0d 	.word	0x00001d0d
    1f80:	00806024 	.word	0x00806024
    1f84:	ff80ffff 	.word	0xff80ffff
    1f88:	00001b59 	.word	0x00001b59
    1f8c:	00001c8d 	.word	0x00001c8d
    1f90:	00001b1d 	.word	0x00001b1d
    1f94:	00001fa9 	.word	0x00001fa9
    1f98:	00001fcd 	.word	0x00001fcd
    1f9c:	00002085 	.word	0x00002085
    1fa0:	00002155 	.word	0x00002155
    1fa4:	40000400 	.word	0x40000400

00001fa8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1fa8:	4a06      	ldr	r2, [pc, #24]	; (1fc4 <system_gclk_init+0x1c>)
    1faa:	6993      	ldr	r3, [r2, #24]
    1fac:	2108      	movs	r1, #8
    1fae:	430b      	orrs	r3, r1
    1fb0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1fb2:	2201      	movs	r2, #1
    1fb4:	4b04      	ldr	r3, [pc, #16]	; (1fc8 <system_gclk_init+0x20>)
    1fb6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1fb8:	0019      	movs	r1, r3
    1fba:	780b      	ldrb	r3, [r1, #0]
    1fbc:	4213      	tst	r3, r2
    1fbe:	d1fc      	bne.n	1fba <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1fc0:	4770      	bx	lr
    1fc2:	46c0      	nop			; (mov r8, r8)
    1fc4:	40000400 	.word	0x40000400
    1fc8:	40000c00 	.word	0x40000c00

00001fcc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1fcc:	b570      	push	{r4, r5, r6, lr}
    1fce:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1fd0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1fd2:	780d      	ldrb	r5, [r1, #0]
    1fd4:	022d      	lsls	r5, r5, #8
    1fd6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1fd8:	784b      	ldrb	r3, [r1, #1]
    1fda:	2b00      	cmp	r3, #0
    1fdc:	d002      	beq.n	1fe4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1fde:	2380      	movs	r3, #128	; 0x80
    1fe0:	02db      	lsls	r3, r3, #11
    1fe2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1fe4:	7a4b      	ldrb	r3, [r1, #9]
    1fe6:	2b00      	cmp	r3, #0
    1fe8:	d002      	beq.n	1ff0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1fea:	2380      	movs	r3, #128	; 0x80
    1fec:	031b      	lsls	r3, r3, #12
    1fee:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1ff0:	6848      	ldr	r0, [r1, #4]
    1ff2:	2801      	cmp	r0, #1
    1ff4:	d910      	bls.n	2018 <STACK_SIZE+0x18>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1ff6:	1e43      	subs	r3, r0, #1
    1ff8:	4218      	tst	r0, r3
    1ffa:	d134      	bne.n	2066 <STACK_SIZE+0x66>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1ffc:	2802      	cmp	r0, #2
    1ffe:	d930      	bls.n	2062 <STACK_SIZE+0x62>
    2000:	2302      	movs	r3, #2
    2002:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2004:	3201      	adds	r2, #1
						mask <<= 1) {
    2006:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2008:	4298      	cmp	r0, r3
    200a:	d8fb      	bhi.n	2004 <STACK_SIZE+0x4>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    200c:	0212      	lsls	r2, r2, #8
    200e:	4332      	orrs	r2, r6
    2010:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2012:	2380      	movs	r3, #128	; 0x80
    2014:	035b      	lsls	r3, r3, #13
    2016:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2018:	7a0b      	ldrb	r3, [r1, #8]
    201a:	2b00      	cmp	r3, #0
    201c:	d002      	beq.n	2024 <STACK_SIZE+0x24>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    201e:	2380      	movs	r3, #128	; 0x80
    2020:	039b      	lsls	r3, r3, #14
    2022:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2024:	4a13      	ldr	r2, [pc, #76]	; (2074 <STACK_SIZE+0x74>)
    2026:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2028:	b25b      	sxtb	r3, r3
    202a:	2b00      	cmp	r3, #0
    202c:	dbfb      	blt.n	2026 <STACK_SIZE+0x26>
	cpu_irq_enter_critical();
    202e:	4b12      	ldr	r3, [pc, #72]	; (2078 <STACK_SIZE+0x78>)
    2030:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2032:	4b12      	ldr	r3, [pc, #72]	; (207c <STACK_SIZE+0x7c>)
    2034:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2036:	4a0f      	ldr	r2, [pc, #60]	; (2074 <STACK_SIZE+0x74>)
    2038:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    203a:	b25b      	sxtb	r3, r3
    203c:	2b00      	cmp	r3, #0
    203e:	dbfb      	blt.n	2038 <STACK_SIZE+0x38>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2040:	4b0c      	ldr	r3, [pc, #48]	; (2074 <STACK_SIZE+0x74>)
    2042:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2044:	001a      	movs	r2, r3
    2046:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2048:	b25b      	sxtb	r3, r3
    204a:	2b00      	cmp	r3, #0
    204c:	dbfb      	blt.n	2046 <STACK_SIZE+0x46>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    204e:	4a09      	ldr	r2, [pc, #36]	; (2074 <STACK_SIZE+0x74>)
    2050:	6853      	ldr	r3, [r2, #4]
    2052:	2180      	movs	r1, #128	; 0x80
    2054:	0249      	lsls	r1, r1, #9
    2056:	400b      	ands	r3, r1
    2058:	431d      	orrs	r5, r3
    205a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    205c:	4b08      	ldr	r3, [pc, #32]	; (2080 <STACK_SIZE+0x80>)
    205e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2060:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2062:	2200      	movs	r2, #0
    2064:	e7d2      	b.n	200c <STACK_SIZE+0xc>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2066:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2068:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    206a:	2380      	movs	r3, #128	; 0x80
    206c:	029b      	lsls	r3, r3, #10
    206e:	431d      	orrs	r5, r3
    2070:	e7d2      	b.n	2018 <STACK_SIZE+0x18>
    2072:	46c0      	nop			; (mov r8, r8)
    2074:	40000c00 	.word	0x40000c00
    2078:	000008c5 	.word	0x000008c5
    207c:	40000c08 	.word	0x40000c08
    2080:	00000905 	.word	0x00000905

00002084 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2084:	b510      	push	{r4, lr}
    2086:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2088:	4a0b      	ldr	r2, [pc, #44]	; (20b8 <system_gclk_gen_enable+0x34>)
    208a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    208c:	b25b      	sxtb	r3, r3
    208e:	2b00      	cmp	r3, #0
    2090:	dbfb      	blt.n	208a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2092:	4b0a      	ldr	r3, [pc, #40]	; (20bc <system_gclk_gen_enable+0x38>)
    2094:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2096:	4b0a      	ldr	r3, [pc, #40]	; (20c0 <system_gclk_gen_enable+0x3c>)
    2098:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    209a:	4a07      	ldr	r2, [pc, #28]	; (20b8 <system_gclk_gen_enable+0x34>)
    209c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    209e:	b25b      	sxtb	r3, r3
    20a0:	2b00      	cmp	r3, #0
    20a2:	dbfb      	blt.n	209c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    20a4:	4a04      	ldr	r2, [pc, #16]	; (20b8 <system_gclk_gen_enable+0x34>)
    20a6:	6851      	ldr	r1, [r2, #4]
    20a8:	2380      	movs	r3, #128	; 0x80
    20aa:	025b      	lsls	r3, r3, #9
    20ac:	430b      	orrs	r3, r1
    20ae:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    20b0:	4b04      	ldr	r3, [pc, #16]	; (20c4 <system_gclk_gen_enable+0x40>)
    20b2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    20b4:	bd10      	pop	{r4, pc}
    20b6:	46c0      	nop			; (mov r8, r8)
    20b8:	40000c00 	.word	0x40000c00
    20bc:	000008c5 	.word	0x000008c5
    20c0:	40000c04 	.word	0x40000c04
    20c4:	00000905 	.word	0x00000905

000020c8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    20c8:	b570      	push	{r4, r5, r6, lr}
    20ca:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20cc:	4a1a      	ldr	r2, [pc, #104]	; (2138 <system_gclk_gen_get_hz+0x70>)
    20ce:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    20d0:	b25b      	sxtb	r3, r3
    20d2:	2b00      	cmp	r3, #0
    20d4:	dbfb      	blt.n	20ce <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    20d6:	4b19      	ldr	r3, [pc, #100]	; (213c <system_gclk_gen_get_hz+0x74>)
    20d8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    20da:	4b19      	ldr	r3, [pc, #100]	; (2140 <system_gclk_gen_get_hz+0x78>)
    20dc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20de:	4a16      	ldr	r2, [pc, #88]	; (2138 <system_gclk_gen_get_hz+0x70>)
    20e0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    20e2:	b25b      	sxtb	r3, r3
    20e4:	2b00      	cmp	r3, #0
    20e6:	dbfb      	blt.n	20e0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    20e8:	4e13      	ldr	r6, [pc, #76]	; (2138 <system_gclk_gen_get_hz+0x70>)
    20ea:	6870      	ldr	r0, [r6, #4]
    20ec:	04c0      	lsls	r0, r0, #19
    20ee:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    20f0:	4b14      	ldr	r3, [pc, #80]	; (2144 <system_gclk_gen_get_hz+0x7c>)
    20f2:	4798      	blx	r3
    20f4:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    20f6:	4b12      	ldr	r3, [pc, #72]	; (2140 <system_gclk_gen_get_hz+0x78>)
    20f8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    20fa:	6876      	ldr	r6, [r6, #4]
    20fc:	02f6      	lsls	r6, r6, #11
    20fe:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2100:	4b11      	ldr	r3, [pc, #68]	; (2148 <system_gclk_gen_get_hz+0x80>)
    2102:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2104:	4a0c      	ldr	r2, [pc, #48]	; (2138 <system_gclk_gen_get_hz+0x70>)
    2106:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2108:	b25b      	sxtb	r3, r3
    210a:	2b00      	cmp	r3, #0
    210c:	dbfb      	blt.n	2106 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    210e:	4b0a      	ldr	r3, [pc, #40]	; (2138 <system_gclk_gen_get_hz+0x70>)
    2110:	689c      	ldr	r4, [r3, #8]
    2112:	0224      	lsls	r4, r4, #8
    2114:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2116:	4b0d      	ldr	r3, [pc, #52]	; (214c <system_gclk_gen_get_hz+0x84>)
    2118:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    211a:	2e00      	cmp	r6, #0
    211c:	d107      	bne.n	212e <system_gclk_gen_get_hz+0x66>
    211e:	2c01      	cmp	r4, #1
    2120:	d907      	bls.n	2132 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2122:	0021      	movs	r1, r4
    2124:	0028      	movs	r0, r5
    2126:	4b0a      	ldr	r3, [pc, #40]	; (2150 <system_gclk_gen_get_hz+0x88>)
    2128:	4798      	blx	r3
    212a:	0005      	movs	r5, r0
    212c:	e001      	b.n	2132 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    212e:	3401      	adds	r4, #1
    2130:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2132:	0028      	movs	r0, r5
    2134:	bd70      	pop	{r4, r5, r6, pc}
    2136:	46c0      	nop			; (mov r8, r8)
    2138:	40000c00 	.word	0x40000c00
    213c:	000008c5 	.word	0x000008c5
    2140:	40000c04 	.word	0x40000c04
    2144:	00001a8d 	.word	0x00001a8d
    2148:	40000c08 	.word	0x40000c08
    214c:	00000905 	.word	0x00000905
    2150:	00005e41 	.word	0x00005e41

00002154 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2154:	b510      	push	{r4, lr}
    2156:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2158:	4b06      	ldr	r3, [pc, #24]	; (2174 <system_gclk_chan_enable+0x20>)
    215a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    215c:	4b06      	ldr	r3, [pc, #24]	; (2178 <system_gclk_chan_enable+0x24>)
    215e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2160:	4a06      	ldr	r2, [pc, #24]	; (217c <system_gclk_chan_enable+0x28>)
    2162:	8853      	ldrh	r3, [r2, #2]
    2164:	2180      	movs	r1, #128	; 0x80
    2166:	01c9      	lsls	r1, r1, #7
    2168:	430b      	orrs	r3, r1
    216a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    216c:	4b04      	ldr	r3, [pc, #16]	; (2180 <system_gclk_chan_enable+0x2c>)
    216e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2170:	bd10      	pop	{r4, pc}
    2172:	46c0      	nop			; (mov r8, r8)
    2174:	000008c5 	.word	0x000008c5
    2178:	40000c02 	.word	0x40000c02
    217c:	40000c00 	.word	0x40000c00
    2180:	00000905 	.word	0x00000905

00002184 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2184:	b510      	push	{r4, lr}
    2186:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2188:	4b0f      	ldr	r3, [pc, #60]	; (21c8 <system_gclk_chan_disable+0x44>)
    218a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    218c:	4b0f      	ldr	r3, [pc, #60]	; (21cc <system_gclk_chan_disable+0x48>)
    218e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2190:	4a0f      	ldr	r2, [pc, #60]	; (21d0 <system_gclk_chan_disable+0x4c>)
    2192:	8853      	ldrh	r3, [r2, #2]
    2194:	051b      	lsls	r3, r3, #20
    2196:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2198:	8853      	ldrh	r3, [r2, #2]
    219a:	490e      	ldr	r1, [pc, #56]	; (21d4 <system_gclk_chan_disable+0x50>)
    219c:	400b      	ands	r3, r1
    219e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    21a0:	8853      	ldrh	r3, [r2, #2]
    21a2:	490d      	ldr	r1, [pc, #52]	; (21d8 <system_gclk_chan_disable+0x54>)
    21a4:	400b      	ands	r3, r1
    21a6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    21a8:	0011      	movs	r1, r2
    21aa:	2280      	movs	r2, #128	; 0x80
    21ac:	01d2      	lsls	r2, r2, #7
    21ae:	884b      	ldrh	r3, [r1, #2]
    21b0:	4213      	tst	r3, r2
    21b2:	d1fc      	bne.n	21ae <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    21b4:	4906      	ldr	r1, [pc, #24]	; (21d0 <system_gclk_chan_disable+0x4c>)
    21b6:	884a      	ldrh	r2, [r1, #2]
    21b8:	0203      	lsls	r3, r0, #8
    21ba:	4806      	ldr	r0, [pc, #24]	; (21d4 <system_gclk_chan_disable+0x50>)
    21bc:	4002      	ands	r2, r0
    21be:	4313      	orrs	r3, r2
    21c0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    21c2:	4b06      	ldr	r3, [pc, #24]	; (21dc <system_gclk_chan_disable+0x58>)
    21c4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    21c6:	bd10      	pop	{r4, pc}
    21c8:	000008c5 	.word	0x000008c5
    21cc:	40000c02 	.word	0x40000c02
    21d0:	40000c00 	.word	0x40000c00
    21d4:	fffff0ff 	.word	0xfffff0ff
    21d8:	ffffbfff 	.word	0xffffbfff
    21dc:	00000905 	.word	0x00000905

000021e0 <system_gclk_chan_set_config>:
{
    21e0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    21e2:	780c      	ldrb	r4, [r1, #0]
    21e4:	0224      	lsls	r4, r4, #8
    21e6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    21e8:	4b02      	ldr	r3, [pc, #8]	; (21f4 <system_gclk_chan_set_config+0x14>)
    21ea:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    21ec:	b2a4      	uxth	r4, r4
    21ee:	4b02      	ldr	r3, [pc, #8]	; (21f8 <system_gclk_chan_set_config+0x18>)
    21f0:	805c      	strh	r4, [r3, #2]
}
    21f2:	bd10      	pop	{r4, pc}
    21f4:	00002185 	.word	0x00002185
    21f8:	40000c00 	.word	0x40000c00

000021fc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    21fc:	b510      	push	{r4, lr}
    21fe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2200:	4b06      	ldr	r3, [pc, #24]	; (221c <system_gclk_chan_get_hz+0x20>)
    2202:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2204:	4b06      	ldr	r3, [pc, #24]	; (2220 <system_gclk_chan_get_hz+0x24>)
    2206:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2208:	4b06      	ldr	r3, [pc, #24]	; (2224 <system_gclk_chan_get_hz+0x28>)
    220a:	885c      	ldrh	r4, [r3, #2]
    220c:	0524      	lsls	r4, r4, #20
    220e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2210:	4b05      	ldr	r3, [pc, #20]	; (2228 <system_gclk_chan_get_hz+0x2c>)
    2212:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2214:	0020      	movs	r0, r4
    2216:	4b05      	ldr	r3, [pc, #20]	; (222c <system_gclk_chan_get_hz+0x30>)
    2218:	4798      	blx	r3
}
    221a:	bd10      	pop	{r4, pc}
    221c:	000008c5 	.word	0x000008c5
    2220:	40000c02 	.word	0x40000c02
    2224:	40000c00 	.word	0x40000c00
    2228:	00000905 	.word	0x00000905
    222c:	000020c9 	.word	0x000020c9

00002230 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2230:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2232:	78d3      	ldrb	r3, [r2, #3]
    2234:	2b00      	cmp	r3, #0
    2236:	d135      	bne.n	22a4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2238:	7813      	ldrb	r3, [r2, #0]
    223a:	2b80      	cmp	r3, #128	; 0x80
    223c:	d029      	beq.n	2292 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    223e:	061b      	lsls	r3, r3, #24
    2240:	2480      	movs	r4, #128	; 0x80
    2242:	0264      	lsls	r4, r4, #9
    2244:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2246:	7854      	ldrb	r4, [r2, #1]
    2248:	2502      	movs	r5, #2
    224a:	43ac      	bics	r4, r5
    224c:	d106      	bne.n	225c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    224e:	7894      	ldrb	r4, [r2, #2]
    2250:	2c00      	cmp	r4, #0
    2252:	d120      	bne.n	2296 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2254:	2480      	movs	r4, #128	; 0x80
    2256:	02a4      	lsls	r4, r4, #10
    2258:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    225a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    225c:	7854      	ldrb	r4, [r2, #1]
    225e:	3c01      	subs	r4, #1
    2260:	2c01      	cmp	r4, #1
    2262:	d91c      	bls.n	229e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2264:	040d      	lsls	r5, r1, #16
    2266:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2268:	24a0      	movs	r4, #160	; 0xa0
    226a:	05e4      	lsls	r4, r4, #23
    226c:	432c      	orrs	r4, r5
    226e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2270:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2272:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2274:	24d0      	movs	r4, #208	; 0xd0
    2276:	0624      	lsls	r4, r4, #24
    2278:	432c      	orrs	r4, r5
    227a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    227c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    227e:	78d4      	ldrb	r4, [r2, #3]
    2280:	2c00      	cmp	r4, #0
    2282:	d122      	bne.n	22ca <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2284:	035b      	lsls	r3, r3, #13
    2286:	d51c      	bpl.n	22c2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2288:	7893      	ldrb	r3, [r2, #2]
    228a:	2b01      	cmp	r3, #1
    228c:	d01e      	beq.n	22cc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    228e:	6141      	str	r1, [r0, #20]
    2290:	e017      	b.n	22c2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2292:	2300      	movs	r3, #0
    2294:	e7d7      	b.n	2246 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2296:	24c0      	movs	r4, #192	; 0xc0
    2298:	02e4      	lsls	r4, r4, #11
    229a:	4323      	orrs	r3, r4
    229c:	e7dd      	b.n	225a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    229e:	4c0d      	ldr	r4, [pc, #52]	; (22d4 <_system_pinmux_config+0xa4>)
    22a0:	4023      	ands	r3, r4
    22a2:	e7df      	b.n	2264 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    22a4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    22a6:	040c      	lsls	r4, r1, #16
    22a8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    22aa:	23a0      	movs	r3, #160	; 0xa0
    22ac:	05db      	lsls	r3, r3, #23
    22ae:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    22b0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    22b2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    22b4:	23d0      	movs	r3, #208	; 0xd0
    22b6:	061b      	lsls	r3, r3, #24
    22b8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    22ba:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    22bc:	78d3      	ldrb	r3, [r2, #3]
    22be:	2b00      	cmp	r3, #0
    22c0:	d103      	bne.n	22ca <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    22c2:	7853      	ldrb	r3, [r2, #1]
    22c4:	3b01      	subs	r3, #1
    22c6:	2b01      	cmp	r3, #1
    22c8:	d902      	bls.n	22d0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    22ca:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    22cc:	6181      	str	r1, [r0, #24]
    22ce:	e7f8      	b.n	22c2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    22d0:	6081      	str	r1, [r0, #8]
}
    22d2:	e7fa      	b.n	22ca <_system_pinmux_config+0x9a>
    22d4:	fffbffff 	.word	0xfffbffff

000022d8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    22d8:	b510      	push	{r4, lr}
    22da:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    22dc:	09c1      	lsrs	r1, r0, #7
		return NULL;
    22de:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    22e0:	2900      	cmp	r1, #0
    22e2:	d104      	bne.n	22ee <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    22e4:	0943      	lsrs	r3, r0, #5
    22e6:	01db      	lsls	r3, r3, #7
    22e8:	4905      	ldr	r1, [pc, #20]	; (2300 <system_pinmux_pin_set_config+0x28>)
    22ea:	468c      	mov	ip, r1
    22ec:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    22ee:	241f      	movs	r4, #31
    22f0:	4020      	ands	r0, r4
    22f2:	2101      	movs	r1, #1
    22f4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    22f6:	0018      	movs	r0, r3
    22f8:	4b02      	ldr	r3, [pc, #8]	; (2304 <system_pinmux_pin_set_config+0x2c>)
    22fa:	4798      	blx	r3
}
    22fc:	bd10      	pop	{r4, pc}
    22fe:	46c0      	nop			; (mov r8, r8)
    2300:	41004400 	.word	0x41004400
    2304:	00002231 	.word	0x00002231

00002308 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2308:	4770      	bx	lr
	...

0000230c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    230c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    230e:	4b05      	ldr	r3, [pc, #20]	; (2324 <system_init+0x18>)
    2310:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2312:	4b05      	ldr	r3, [pc, #20]	; (2328 <system_init+0x1c>)
    2314:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2316:	4b05      	ldr	r3, [pc, #20]	; (232c <system_init+0x20>)
    2318:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    231a:	4b05      	ldr	r3, [pc, #20]	; (2330 <system_init+0x24>)
    231c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    231e:	4b05      	ldr	r3, [pc, #20]	; (2334 <system_init+0x28>)
    2320:	4798      	blx	r3
}
    2322:	bd10      	pop	{r4, pc}
    2324:	00001db5 	.word	0x00001db5
    2328:	00000935 	.word	0x00000935
    232c:	00002309 	.word	0x00002309
    2330:	00000aa1 	.word	0x00000aa1
    2334:	00002309 	.word	0x00002309

00002338 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2338:	1c93      	adds	r3, r2, #2
    233a:	009b      	lsls	r3, r3, #2
    233c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    233e:	2a02      	cmp	r2, #2
    2340:	d009      	beq.n	2356 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    2342:	2a03      	cmp	r2, #3
    2344:	d00c      	beq.n	2360 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    2346:	2301      	movs	r3, #1
    2348:	4093      	lsls	r3, r2
    234a:	001a      	movs	r2, r3
    234c:	7e03      	ldrb	r3, [r0, #24]
    234e:	4313      	orrs	r3, r2
    2350:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    2352:	2000      	movs	r0, #0
    2354:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    2356:	7e03      	ldrb	r3, [r0, #24]
    2358:	2210      	movs	r2, #16
    235a:	4313      	orrs	r3, r2
    235c:	7603      	strb	r3, [r0, #24]
    235e:	e7f8      	b.n	2352 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    2360:	7e03      	ldrb	r3, [r0, #24]
    2362:	2220      	movs	r2, #32
    2364:	4313      	orrs	r3, r2
    2366:	7603      	strb	r3, [r0, #24]
    2368:	e7f3      	b.n	2352 <tc_register_callback+0x1a>
	...

0000236c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    236c:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    236e:	0080      	lsls	r0, r0, #2
    2370:	4b16      	ldr	r3, [pc, #88]	; (23cc <_tc_interrupt_handler+0x60>)
    2372:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2374:	6823      	ldr	r3, [r4, #0]
    2376:	7b9d      	ldrb	r5, [r3, #14]
    2378:	7e22      	ldrb	r2, [r4, #24]
    237a:	7e63      	ldrb	r3, [r4, #25]
    237c:	4013      	ands	r3, r2
    237e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    2380:	07eb      	lsls	r3, r5, #31
    2382:	d406      	bmi.n	2392 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    2384:	07ab      	lsls	r3, r5, #30
    2386:	d40b      	bmi.n	23a0 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2388:	06eb      	lsls	r3, r5, #27
    238a:	d410      	bmi.n	23ae <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    238c:	06ab      	lsls	r3, r5, #26
    238e:	d415      	bmi.n	23bc <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    2390:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    2392:	0020      	movs	r0, r4
    2394:	68a3      	ldr	r3, [r4, #8]
    2396:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2398:	2301      	movs	r3, #1
    239a:	6822      	ldr	r2, [r4, #0]
    239c:	7393      	strb	r3, [r2, #14]
    239e:	e7f1      	b.n	2384 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    23a0:	0020      	movs	r0, r4
    23a2:	68e3      	ldr	r3, [r4, #12]
    23a4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    23a6:	2302      	movs	r3, #2
    23a8:	6822      	ldr	r2, [r4, #0]
    23aa:	7393      	strb	r3, [r2, #14]
    23ac:	e7ec      	b.n	2388 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    23ae:	0020      	movs	r0, r4
    23b0:	6923      	ldr	r3, [r4, #16]
    23b2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    23b4:	2310      	movs	r3, #16
    23b6:	6822      	ldr	r2, [r4, #0]
    23b8:	7393      	strb	r3, [r2, #14]
    23ba:	e7e7      	b.n	238c <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    23bc:	0020      	movs	r0, r4
    23be:	6963      	ldr	r3, [r4, #20]
    23c0:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    23c2:	6823      	ldr	r3, [r4, #0]
    23c4:	2220      	movs	r2, #32
    23c6:	739a      	strb	r2, [r3, #14]
}
    23c8:	e7e2      	b.n	2390 <_tc_interrupt_handler+0x24>
    23ca:	46c0      	nop			; (mov r8, r8)
    23cc:	20001548 	.word	0x20001548

000023d0 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    23d0:	b510      	push	{r4, lr}
    23d2:	2000      	movs	r0, #0
    23d4:	4b01      	ldr	r3, [pc, #4]	; (23dc <TC3_Handler+0xc>)
    23d6:	4798      	blx	r3
    23d8:	bd10      	pop	{r4, pc}
    23da:	46c0      	nop			; (mov r8, r8)
    23dc:	0000236d 	.word	0x0000236d

000023e0 <TC4_Handler>:
    23e0:	b510      	push	{r4, lr}
    23e2:	2001      	movs	r0, #1
    23e4:	4b01      	ldr	r3, [pc, #4]	; (23ec <TC4_Handler+0xc>)
    23e6:	4798      	blx	r3
    23e8:	bd10      	pop	{r4, pc}
    23ea:	46c0      	nop			; (mov r8, r8)
    23ec:	0000236d 	.word	0x0000236d

000023f0 <TC5_Handler>:
    23f0:	b510      	push	{r4, lr}
    23f2:	2002      	movs	r0, #2
    23f4:	4b01      	ldr	r3, [pc, #4]	; (23fc <TC5_Handler+0xc>)
    23f6:	4798      	blx	r3
    23f8:	bd10      	pop	{r4, pc}
    23fa:	46c0      	nop			; (mov r8, r8)
    23fc:	0000236d 	.word	0x0000236d

00002400 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    2400:	b530      	push	{r4, r5, lr}
    2402:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2404:	aa01      	add	r2, sp, #4
    2406:	4b0b      	ldr	r3, [pc, #44]	; (2434 <_tc_get_inst_index+0x34>)
    2408:	cb32      	ldmia	r3!, {r1, r4, r5}
    240a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    240c:	9b01      	ldr	r3, [sp, #4]
    240e:	4298      	cmp	r0, r3
    2410:	d00d      	beq.n	242e <_tc_get_inst_index+0x2e>
    2412:	9b02      	ldr	r3, [sp, #8]
    2414:	4298      	cmp	r0, r3
    2416:	d008      	beq.n	242a <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    2418:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    241a:	9a03      	ldr	r2, [sp, #12]
    241c:	4282      	cmp	r2, r0
    241e:	d002      	beq.n	2426 <_tc_get_inst_index+0x26>
}
    2420:	0018      	movs	r0, r3
    2422:	b005      	add	sp, #20
    2424:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2426:	3302      	adds	r3, #2
    2428:	e002      	b.n	2430 <_tc_get_inst_index+0x30>
    242a:	2301      	movs	r3, #1
    242c:	e000      	b.n	2430 <_tc_get_inst_index+0x30>
    242e:	2300      	movs	r3, #0
			return i;
    2430:	b2db      	uxtb	r3, r3
    2432:	e7f5      	b.n	2420 <_tc_get_inst_index+0x20>
    2434:	00008a74 	.word	0x00008a74

00002438 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    2438:	b5f0      	push	{r4, r5, r6, r7, lr}
    243a:	b087      	sub	sp, #28
    243c:	0004      	movs	r4, r0
    243e:	000d      	movs	r5, r1
    2440:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    2442:	0008      	movs	r0, r1
    2444:	4b85      	ldr	r3, [pc, #532]	; (265c <tc_init+0x224>)
    2446:	4798      	blx	r3
    2448:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    244a:	ab05      	add	r3, sp, #20
    244c:	221b      	movs	r2, #27
    244e:	701a      	strb	r2, [r3, #0]
    2450:	3201      	adds	r2, #1
    2452:	705a      	strb	r2, [r3, #1]
    2454:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    2456:	ab03      	add	r3, sp, #12
    2458:	2280      	movs	r2, #128	; 0x80
    245a:	0112      	lsls	r2, r2, #4
    245c:	801a      	strh	r2, [r3, #0]
    245e:	2280      	movs	r2, #128	; 0x80
    2460:	0152      	lsls	r2, r2, #5
    2462:	805a      	strh	r2, [r3, #2]
    2464:	2280      	movs	r2, #128	; 0x80
    2466:	0192      	lsls	r2, r2, #6
    2468:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    246a:	2300      	movs	r3, #0
    246c:	60a3      	str	r3, [r4, #8]
    246e:	60e3      	str	r3, [r4, #12]
    2470:	6123      	str	r3, [r4, #16]
    2472:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    2474:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    2476:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    2478:	0082      	lsls	r2, r0, #2
    247a:	4b79      	ldr	r3, [pc, #484]	; (2660 <tc_init+0x228>)
    247c:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    247e:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2480:	78b3      	ldrb	r3, [r6, #2]
    2482:	2b08      	cmp	r3, #8
    2484:	d006      	beq.n	2494 <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    2486:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2488:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    248a:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    248c:	07db      	lsls	r3, r3, #31
    248e:	d505      	bpl.n	249c <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    2490:	b007      	add	sp, #28
    2492:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    2494:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2496:	07fa      	lsls	r2, r7, #31
    2498:	d5fa      	bpl.n	2490 <tc_init+0x58>
    249a:	e7f4      	b.n	2486 <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    249c:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    249e:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    24a0:	06db      	lsls	r3, r3, #27
    24a2:	d4f5      	bmi.n	2490 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    24a4:	882b      	ldrh	r3, [r5, #0]
    24a6:	079b      	lsls	r3, r3, #30
    24a8:	d4f2      	bmi.n	2490 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    24aa:	7c33      	ldrb	r3, [r6, #16]
    24ac:	2b00      	cmp	r3, #0
    24ae:	d179      	bne.n	25a4 <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    24b0:	7f33      	ldrb	r3, [r6, #28]
    24b2:	2b00      	cmp	r3, #0
    24b4:	d000      	beq.n	24b8 <tc_init+0x80>
    24b6:	e081      	b.n	25bc <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    24b8:	496a      	ldr	r1, [pc, #424]	; (2664 <tc_init+0x22c>)
    24ba:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    24bc:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    24be:	ab03      	add	r3, sp, #12
    24c0:	5ad3      	ldrh	r3, [r2, r3]
    24c2:	4303      	orrs	r3, r0
    24c4:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    24c6:	78b3      	ldrb	r3, [r6, #2]
    24c8:	2b08      	cmp	r3, #8
    24ca:	d100      	bne.n	24ce <tc_init+0x96>
    24cc:	e086      	b.n	25dc <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    24ce:	a901      	add	r1, sp, #4
    24d0:	7833      	ldrb	r3, [r6, #0]
    24d2:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    24d4:	ab05      	add	r3, sp, #20
    24d6:	5ddf      	ldrb	r7, [r3, r7]
    24d8:	0038      	movs	r0, r7
    24da:	4b63      	ldr	r3, [pc, #396]	; (2668 <tc_init+0x230>)
    24dc:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    24de:	0038      	movs	r0, r7
    24e0:	4b62      	ldr	r3, [pc, #392]	; (266c <tc_init+0x234>)
    24e2:	4798      	blx	r3
	ctrla_tmp =
    24e4:	8931      	ldrh	r1, [r6, #8]
    24e6:	88b3      	ldrh	r3, [r6, #4]
    24e8:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    24ea:	78b1      	ldrb	r1, [r6, #2]
    24ec:	79b2      	ldrb	r2, [r6, #6]
    24ee:	4311      	orrs	r1, r2
	ctrla_tmp =
    24f0:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    24f2:	7873      	ldrb	r3, [r6, #1]
    24f4:	2b00      	cmp	r3, #0
    24f6:	d002      	beq.n	24fe <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    24f8:	2380      	movs	r3, #128	; 0x80
    24fa:	011b      	lsls	r3, r3, #4
    24fc:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    24fe:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2500:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2502:	b25b      	sxtb	r3, r3
    2504:	2b00      	cmp	r3, #0
    2506:	dbfb      	blt.n	2500 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    2508:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    250a:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    250c:	1e4b      	subs	r3, r1, #1
    250e:	4199      	sbcs	r1, r3
    2510:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    2512:	7bb3      	ldrb	r3, [r6, #14]
    2514:	2b00      	cmp	r3, #0
    2516:	d001      	beq.n	251c <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    2518:	2301      	movs	r3, #1
    251a:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    251c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    251e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2520:	b25b      	sxtb	r3, r3
    2522:	2b00      	cmp	r3, #0
    2524:	dbfb      	blt.n	251e <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    2526:	23ff      	movs	r3, #255	; 0xff
    2528:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    252a:	2900      	cmp	r1, #0
    252c:	d005      	beq.n	253a <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    252e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2530:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    2532:	b25b      	sxtb	r3, r3
    2534:	2b00      	cmp	r3, #0
    2536:	dbfb      	blt.n	2530 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    2538:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    253a:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    253c:	7af3      	ldrb	r3, [r6, #11]
    253e:	2b00      	cmp	r3, #0
    2540:	d001      	beq.n	2546 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2542:	2310      	movs	r3, #16
    2544:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    2546:	7b33      	ldrb	r3, [r6, #12]
    2548:	2b00      	cmp	r3, #0
    254a:	d001      	beq.n	2550 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    254c:	2320      	movs	r3, #32
    254e:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2550:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2552:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2554:	b25b      	sxtb	r3, r3
    2556:	2b00      	cmp	r3, #0
    2558:	dbfb      	blt.n	2552 <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    255a:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    255c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    255e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2560:	b25b      	sxtb	r3, r3
    2562:	2b00      	cmp	r3, #0
    2564:	dbfb      	blt.n	255e <tc_init+0x126>
	switch (module_inst->counter_size) {
    2566:	7923      	ldrb	r3, [r4, #4]
    2568:	2b04      	cmp	r3, #4
    256a:	d03f      	beq.n	25ec <tc_init+0x1b4>
    256c:	2b08      	cmp	r3, #8
    256e:	d05e      	beq.n	262e <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    2570:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    2572:	2b00      	cmp	r3, #0
    2574:	d000      	beq.n	2578 <tc_init+0x140>
    2576:	e78b      	b.n	2490 <tc_init+0x58>
    2578:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    257a:	b25b      	sxtb	r3, r3
    257c:	2b00      	cmp	r3, #0
    257e:	dbfb      	blt.n	2578 <tc_init+0x140>
				= config->counter_16_bit.value;
    2580:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    2582:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2584:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2586:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2588:	b25b      	sxtb	r3, r3
    258a:	2b00      	cmp	r3, #0
    258c:	dbfb      	blt.n	2586 <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    258e:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    2590:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2592:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2594:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2596:	b25b      	sxtb	r3, r3
    2598:	2b00      	cmp	r3, #0
    259a:	dbfb      	blt.n	2594 <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    259c:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    259e:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    25a0:	2000      	movs	r0, #0
    25a2:	e775      	b.n	2490 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    25a4:	a902      	add	r1, sp, #8
    25a6:	2301      	movs	r3, #1
    25a8:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    25aa:	2200      	movs	r2, #0
    25ac:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    25ae:	7e32      	ldrb	r2, [r6, #24]
    25b0:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    25b2:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    25b4:	7d30      	ldrb	r0, [r6, #20]
    25b6:	4b2e      	ldr	r3, [pc, #184]	; (2670 <tc_init+0x238>)
    25b8:	4798      	blx	r3
    25ba:	e779      	b.n	24b0 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    25bc:	a902      	add	r1, sp, #8
    25be:	2301      	movs	r3, #1
    25c0:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    25c2:	2200      	movs	r2, #0
    25c4:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    25c6:	3224      	adds	r2, #36	; 0x24
    25c8:	18b2      	adds	r2, r6, r2
    25ca:	7812      	ldrb	r2, [r2, #0]
    25cc:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    25ce:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    25d0:	331f      	adds	r3, #31
    25d2:	18f3      	adds	r3, r6, r3
    25d4:	7818      	ldrb	r0, [r3, #0]
    25d6:	4b26      	ldr	r3, [pc, #152]	; (2670 <tc_init+0x238>)
    25d8:	4798      	blx	r3
    25da:	e76d      	b.n	24b8 <tc_init+0x80>
    25dc:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    25de:	1c7a      	adds	r2, r7, #1
    25e0:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    25e2:	ab03      	add	r3, sp, #12
    25e4:	5ad3      	ldrh	r3, [r2, r3]
    25e6:	4303      	orrs	r3, r0
    25e8:	620b      	str	r3, [r1, #32]
    25ea:	e770      	b.n	24ce <tc_init+0x96>
    25ec:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    25ee:	b25b      	sxtb	r3, r3
    25f0:	2b00      	cmp	r3, #0
    25f2:	dbfb      	blt.n	25ec <tc_init+0x1b4>
					config->counter_8_bit.value;
    25f4:	2328      	movs	r3, #40	; 0x28
    25f6:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    25f8:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25fa:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25fc:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    25fe:	b25b      	sxtb	r3, r3
    2600:	2b00      	cmp	r3, #0
    2602:	dbfb      	blt.n	25fc <tc_init+0x1c4>
					config->counter_8_bit.period;
    2604:	2329      	movs	r3, #41	; 0x29
    2606:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    2608:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    260a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    260c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    260e:	b25b      	sxtb	r3, r3
    2610:	2b00      	cmp	r3, #0
    2612:	dbfb      	blt.n	260c <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    2614:	232a      	movs	r3, #42	; 0x2a
    2616:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    2618:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    261a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    261c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    261e:	b25b      	sxtb	r3, r3
    2620:	2b00      	cmp	r3, #0
    2622:	dbfb      	blt.n	261c <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    2624:	232b      	movs	r3, #43	; 0x2b
    2626:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    2628:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    262a:	2000      	movs	r0, #0
    262c:	e730      	b.n	2490 <tc_init+0x58>
    262e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2630:	b25b      	sxtb	r3, r3
    2632:	2b00      	cmp	r3, #0
    2634:	dbfb      	blt.n	262e <tc_init+0x1f6>
				= config->counter_32_bit.value;
    2636:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2638:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    263a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    263c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    263e:	b25b      	sxtb	r3, r3
    2640:	2b00      	cmp	r3, #0
    2642:	dbfb      	blt.n	263c <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    2644:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2646:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2648:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    264a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    264c:	b25b      	sxtb	r3, r3
    264e:	2b00      	cmp	r3, #0
    2650:	dbfb      	blt.n	264a <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    2652:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    2654:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    2656:	2000      	movs	r0, #0
    2658:	e71a      	b.n	2490 <tc_init+0x58>
    265a:	46c0      	nop			; (mov r8, r8)
    265c:	00002401 	.word	0x00002401
    2660:	20001548 	.word	0x20001548
    2664:	40000400 	.word	0x40000400
    2668:	000021e1 	.word	0x000021e1
    266c:	00002155 	.word	0x00002155
    2670:	000022d9 	.word	0x000022d9

00002674 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    2674:	6802      	ldr	r2, [r0, #0]
    2676:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    2678:	b25b      	sxtb	r3, r3
    267a:	2b00      	cmp	r3, #0
    267c:	dbfb      	blt.n	2676 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    267e:	7903      	ldrb	r3, [r0, #4]
    2680:	2b04      	cmp	r3, #4
    2682:	d005      	beq.n	2690 <tc_get_count_value+0x1c>
    2684:	2b08      	cmp	r3, #8
    2686:	d009      	beq.n	269c <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    2688:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    268a:	2b00      	cmp	r3, #0
    268c:	d003      	beq.n	2696 <tc_get_count_value+0x22>
}
    268e:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    2690:	7c10      	ldrb	r0, [r2, #16]
    2692:	b2c0      	uxtb	r0, r0
    2694:	e7fb      	b.n	268e <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    2696:	8a10      	ldrh	r0, [r2, #16]
    2698:	b280      	uxth	r0, r0
    269a:	e7f8      	b.n	268e <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    269c:	6910      	ldr	r0, [r2, #16]
    269e:	e7f6      	b.n	268e <tc_get_count_value+0x1a>

000026a0 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    26a0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    26a2:	6804      	ldr	r4, [r0, #0]
    26a4:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    26a6:	b25b      	sxtb	r3, r3
    26a8:	2b00      	cmp	r3, #0
    26aa:	dbfb      	blt.n	26a4 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    26ac:	7903      	ldrb	r3, [r0, #4]
    26ae:	2b04      	cmp	r3, #4
    26b0:	d005      	beq.n	26be <tc_set_compare_value+0x1e>
    26b2:	2b08      	cmp	r3, #8
    26b4:	d014      	beq.n	26e0 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    26b6:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    26b8:	2b00      	cmp	r3, #0
    26ba:	d008      	beq.n	26ce <tc_set_compare_value+0x2e>
}
    26bc:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    26be:	2017      	movs	r0, #23
			if (channel_index <
    26c0:	2901      	cmp	r1, #1
    26c2:	d8fb      	bhi.n	26bc <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    26c4:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    26c6:	1861      	adds	r1, r4, r1
    26c8:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    26ca:	2000      	movs	r0, #0
    26cc:	e7f6      	b.n	26bc <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    26ce:	2017      	movs	r0, #23
			if (channel_index <
    26d0:	2901      	cmp	r1, #1
    26d2:	d8f3      	bhi.n	26bc <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    26d4:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    26d6:	310c      	adds	r1, #12
    26d8:	0049      	lsls	r1, r1, #1
    26da:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    26dc:	2000      	movs	r0, #0
    26de:	e7ed      	b.n	26bc <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    26e0:	2017      	movs	r0, #23
			if (channel_index <
    26e2:	2901      	cmp	r1, #1
    26e4:	d8ea      	bhi.n	26bc <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    26e6:	3106      	adds	r1, #6
    26e8:	0089      	lsls	r1, r1, #2
    26ea:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    26ec:	2000      	movs	r0, #0
    26ee:	e7e5      	b.n	26bc <tc_set_compare_value+0x1c>

000026f0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    26f0:	e7fe      	b.n	26f0 <Dummy_Handler>
	...

000026f4 <Reset_Handler>:
{
    26f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    26f6:	4a2a      	ldr	r2, [pc, #168]	; (27a0 <Reset_Handler+0xac>)
    26f8:	4b2a      	ldr	r3, [pc, #168]	; (27a4 <Reset_Handler+0xb0>)
    26fa:	429a      	cmp	r2, r3
    26fc:	d011      	beq.n	2722 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    26fe:	001a      	movs	r2, r3
    2700:	4b29      	ldr	r3, [pc, #164]	; (27a8 <Reset_Handler+0xb4>)
    2702:	429a      	cmp	r2, r3
    2704:	d20d      	bcs.n	2722 <Reset_Handler+0x2e>
    2706:	4a29      	ldr	r2, [pc, #164]	; (27ac <Reset_Handler+0xb8>)
    2708:	3303      	adds	r3, #3
    270a:	1a9b      	subs	r3, r3, r2
    270c:	089b      	lsrs	r3, r3, #2
    270e:	3301      	adds	r3, #1
    2710:	009b      	lsls	r3, r3, #2
    2712:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2714:	4823      	ldr	r0, [pc, #140]	; (27a4 <Reset_Handler+0xb0>)
    2716:	4922      	ldr	r1, [pc, #136]	; (27a0 <Reset_Handler+0xac>)
    2718:	588c      	ldr	r4, [r1, r2]
    271a:	5084      	str	r4, [r0, r2]
    271c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    271e:	429a      	cmp	r2, r3
    2720:	d1fa      	bne.n	2718 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2722:	4a23      	ldr	r2, [pc, #140]	; (27b0 <Reset_Handler+0xbc>)
    2724:	4b23      	ldr	r3, [pc, #140]	; (27b4 <Reset_Handler+0xc0>)
    2726:	429a      	cmp	r2, r3
    2728:	d20a      	bcs.n	2740 <Reset_Handler+0x4c>
    272a:	43d3      	mvns	r3, r2
    272c:	4921      	ldr	r1, [pc, #132]	; (27b4 <Reset_Handler+0xc0>)
    272e:	185b      	adds	r3, r3, r1
    2730:	2103      	movs	r1, #3
    2732:	438b      	bics	r3, r1
    2734:	3304      	adds	r3, #4
    2736:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2738:	2100      	movs	r1, #0
    273a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    273c:	4293      	cmp	r3, r2
    273e:	d1fc      	bne.n	273a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2740:	4a1d      	ldr	r2, [pc, #116]	; (27b8 <Reset_Handler+0xc4>)
    2742:	21ff      	movs	r1, #255	; 0xff
    2744:	4b1d      	ldr	r3, [pc, #116]	; (27bc <Reset_Handler+0xc8>)
    2746:	438b      	bics	r3, r1
    2748:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    274a:	39fd      	subs	r1, #253	; 0xfd
    274c:	2390      	movs	r3, #144	; 0x90
    274e:	005b      	lsls	r3, r3, #1
    2750:	4a1b      	ldr	r2, [pc, #108]	; (27c0 <Reset_Handler+0xcc>)
    2752:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2754:	4a1b      	ldr	r2, [pc, #108]	; (27c4 <Reset_Handler+0xd0>)
    2756:	78d3      	ldrb	r3, [r2, #3]
    2758:	2503      	movs	r5, #3
    275a:	43ab      	bics	r3, r5
    275c:	2402      	movs	r4, #2
    275e:	4323      	orrs	r3, r4
    2760:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2762:	78d3      	ldrb	r3, [r2, #3]
    2764:	270c      	movs	r7, #12
    2766:	43bb      	bics	r3, r7
    2768:	2608      	movs	r6, #8
    276a:	4333      	orrs	r3, r6
    276c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    276e:	4b16      	ldr	r3, [pc, #88]	; (27c8 <Reset_Handler+0xd4>)
    2770:	7b98      	ldrb	r0, [r3, #14]
    2772:	2230      	movs	r2, #48	; 0x30
    2774:	4390      	bics	r0, r2
    2776:	2220      	movs	r2, #32
    2778:	4310      	orrs	r0, r2
    277a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    277c:	7b99      	ldrb	r1, [r3, #14]
    277e:	43b9      	bics	r1, r7
    2780:	4331      	orrs	r1, r6
    2782:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2784:	7b9a      	ldrb	r2, [r3, #14]
    2786:	43aa      	bics	r2, r5
    2788:	4322      	orrs	r2, r4
    278a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    278c:	4a0f      	ldr	r2, [pc, #60]	; (27cc <Reset_Handler+0xd8>)
    278e:	6853      	ldr	r3, [r2, #4]
    2790:	2180      	movs	r1, #128	; 0x80
    2792:	430b      	orrs	r3, r1
    2794:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2796:	4b0e      	ldr	r3, [pc, #56]	; (27d0 <Reset_Handler+0xdc>)
    2798:	4798      	blx	r3
        main();
    279a:	4b0e      	ldr	r3, [pc, #56]	; (27d4 <Reset_Handler+0xe0>)
    279c:	4798      	blx	r3
    279e:	e7fe      	b.n	279e <Reset_Handler+0xaa>
    27a0:	00008ec0 	.word	0x00008ec0
    27a4:	20000000 	.word	0x20000000
    27a8:	200001dc 	.word	0x200001dc
    27ac:	20000004 	.word	0x20000004
    27b0:	200001dc 	.word	0x200001dc
    27b4:	20001668 	.word	0x20001668
    27b8:	e000ed00 	.word	0xe000ed00
    27bc:	00000000 	.word	0x00000000
    27c0:	41007000 	.word	0x41007000
    27c4:	41005000 	.word	0x41005000
    27c8:	41004800 	.word	0x41004800
    27cc:	41004000 	.word	0x41004000
    27d0:	00003429 	.word	0x00003429
    27d4:	00003321 	.word	0x00003321

000027d8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    27d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    27da:	46c6      	mov	lr, r8
    27dc:	b500      	push	{lr}
    27de:	000c      	movs	r4, r1
    27e0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    27e2:	2800      	cmp	r0, #0
    27e4:	d10f      	bne.n	2806 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    27e6:	2a00      	cmp	r2, #0
    27e8:	dd11      	ble.n	280e <_read+0x36>
    27ea:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    27ec:	4e09      	ldr	r6, [pc, #36]	; (2814 <_read+0x3c>)
    27ee:	4d0a      	ldr	r5, [pc, #40]	; (2818 <_read+0x40>)
    27f0:	6830      	ldr	r0, [r6, #0]
    27f2:	0021      	movs	r1, r4
    27f4:	682b      	ldr	r3, [r5, #0]
    27f6:	4798      	blx	r3
		ptr++;
    27f8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    27fa:	42bc      	cmp	r4, r7
    27fc:	d1f8      	bne.n	27f0 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    27fe:	4640      	mov	r0, r8
    2800:	bc04      	pop	{r2}
    2802:	4690      	mov	r8, r2
    2804:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    2806:	2301      	movs	r3, #1
    2808:	425b      	negs	r3, r3
    280a:	4698      	mov	r8, r3
    280c:	e7f7      	b.n	27fe <_read+0x26>
	for (; len > 0; --len) {
    280e:	4680      	mov	r8, r0
    2810:	e7f5      	b.n	27fe <_read+0x26>
    2812:	46c0      	nop			; (mov r8, r8)
    2814:	2000155c 	.word	0x2000155c
    2818:	20001554 	.word	0x20001554

0000281c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    281c:	b5f0      	push	{r4, r5, r6, r7, lr}
    281e:	46c6      	mov	lr, r8
    2820:	b500      	push	{lr}
    2822:	000e      	movs	r6, r1
    2824:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2826:	3801      	subs	r0, #1
    2828:	2802      	cmp	r0, #2
    282a:	d810      	bhi.n	284e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    282c:	2a00      	cmp	r2, #0
    282e:	d011      	beq.n	2854 <_write+0x38>
    2830:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2832:	4b0c      	ldr	r3, [pc, #48]	; (2864 <_write+0x48>)
    2834:	4698      	mov	r8, r3
    2836:	4f0c      	ldr	r7, [pc, #48]	; (2868 <_write+0x4c>)
    2838:	4643      	mov	r3, r8
    283a:	6818      	ldr	r0, [r3, #0]
    283c:	5d31      	ldrb	r1, [r6, r4]
    283e:	683b      	ldr	r3, [r7, #0]
    2840:	4798      	blx	r3
    2842:	2800      	cmp	r0, #0
    2844:	db08      	blt.n	2858 <_write+0x3c>
			return -1;
		}
		++nChars;
    2846:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2848:	42a5      	cmp	r5, r4
    284a:	d1f5      	bne.n	2838 <_write+0x1c>
    284c:	e006      	b.n	285c <_write+0x40>
		return -1;
    284e:	2401      	movs	r4, #1
    2850:	4264      	negs	r4, r4
    2852:	e003      	b.n	285c <_write+0x40>
	for (; len != 0; --len) {
    2854:	0014      	movs	r4, r2
    2856:	e001      	b.n	285c <_write+0x40>
			return -1;
    2858:	2401      	movs	r4, #1
    285a:	4264      	negs	r4, r4
	}
	return nChars;
}
    285c:	0020      	movs	r0, r4
    285e:	bc04      	pop	{r2}
    2860:	4690      	mov	r8, r2
    2862:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2864:	2000155c 	.word	0x2000155c
    2868:	20001558 	.word	0x20001558

0000286c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    286c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    286e:	4a06      	ldr	r2, [pc, #24]	; (2888 <_sbrk+0x1c>)
    2870:	6812      	ldr	r2, [r2, #0]
    2872:	2a00      	cmp	r2, #0
    2874:	d004      	beq.n	2880 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2876:	4a04      	ldr	r2, [pc, #16]	; (2888 <_sbrk+0x1c>)
    2878:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    287a:	18c3      	adds	r3, r0, r3
    287c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    287e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2880:	4902      	ldr	r1, [pc, #8]	; (288c <_sbrk+0x20>)
    2882:	4a01      	ldr	r2, [pc, #4]	; (2888 <_sbrk+0x1c>)
    2884:	6011      	str	r1, [r2, #0]
    2886:	e7f6      	b.n	2876 <_sbrk+0xa>
    2888:	20000238 	.word	0x20000238
    288c:	20003668 	.word	0x20003668

00002890 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2890:	2001      	movs	r0, #1
    2892:	4240      	negs	r0, r0
    2894:	4770      	bx	lr

00002896 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2896:	2380      	movs	r3, #128	; 0x80
    2898:	019b      	lsls	r3, r3, #6
    289a:	604b      	str	r3, [r1, #4]

	return 0;
}
    289c:	2000      	movs	r0, #0
    289e:	4770      	bx	lr

000028a0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    28a0:	2001      	movs	r0, #1
    28a2:	4770      	bx	lr

000028a4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    28a4:	2000      	movs	r0, #0
    28a6:	4770      	bx	lr

000028a8 <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    28a8:	b510      	push	{r4, lr}
	nwkIb.nwkSeqNum = 0;
    28aa:	4a0d      	ldr	r2, [pc, #52]	; (28e0 <NWK_Init+0x38>)
    28ac:	2300      	movs	r3, #0
    28ae:	7113      	strb	r3, [r2, #4]
	nwkIb.macSeqNum = 0;
    28b0:	7153      	strb	r3, [r2, #5]
	nwkIb.addr = 0;
    28b2:	8013      	strh	r3, [r2, #0]
	nwkIb.lock = 0;
    28b4:	2158      	movs	r1, #88	; 0x58
    28b6:	5253      	strh	r3, [r2, r1]
    28b8:	0013      	movs	r3, r2
    28ba:	3240      	adds	r2, #64	; 0x40

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    28bc:	2100      	movs	r1, #0
    28be:	6099      	str	r1, [r3, #8]
    28c0:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    28c2:	4293      	cmp	r3, r2
    28c4:	d1fb      	bne.n	28be <NWK_Init+0x16>
	}

	nwkTxInit();
    28c6:	4b07      	ldr	r3, [pc, #28]	; (28e4 <NWK_Init+0x3c>)
    28c8:	4798      	blx	r3
	nwkRxInit();
    28ca:	4b07      	ldr	r3, [pc, #28]	; (28e8 <NWK_Init+0x40>)
    28cc:	4798      	blx	r3
	nwkFrameInit();
    28ce:	4b07      	ldr	r3, [pc, #28]	; (28ec <NWK_Init+0x44>)
    28d0:	4798      	blx	r3
	nwkDataReqInit();
    28d2:	4b07      	ldr	r3, [pc, #28]	; (28f0 <NWK_Init+0x48>)
    28d4:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    28d6:	4b07      	ldr	r3, [pc, #28]	; (28f4 <NWK_Init+0x4c>)
    28d8:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    28da:	4b07      	ldr	r3, [pc, #28]	; (28f8 <NWK_Init+0x50>)
    28dc:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
    28de:	bd10      	pop	{r4, pc}
    28e0:	20001560 	.word	0x20001560
    28e4:	00002b95 	.word	0x00002b95
    28e8:	00002a8d 	.word	0x00002a8d
    28ec:	00002919 	.word	0x00002919
    28f0:	0000290d 	.word	0x0000290d
    28f4:	00002969 	.word	0x00002969
    28f8:	00002acd 	.word	0x00002acd

000028fc <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    28fc:	3002      	adds	r0, #2
    28fe:	0080      	lsls	r0, r0, #2
    2900:	4b01      	ldr	r3, [pc, #4]	; (2908 <NWK_OpenEndpoint+0xc>)
    2902:	50c1      	str	r1, [r0, r3]
}
    2904:	4770      	bx	lr
    2906:	46c0      	nop			; (mov r8, r8)
    2908:	20001560 	.word	0x20001560

0000290c <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    290c:	2200      	movs	r2, #0
    290e:	4b01      	ldr	r3, [pc, #4]	; (2914 <nwkDataReqInit+0x8>)
    2910:	601a      	str	r2, [r3, #0]
}
    2912:	4770      	bx	lr
    2914:	2000023c 	.word	0x2000023c

00002918 <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    2918:	4b03      	ldr	r3, [pc, #12]	; (2928 <nwkFrameInit+0x10>)
    291a:	2200      	movs	r2, #0
    291c:	701a      	strb	r2, [r3, #0]
    291e:	218d      	movs	r1, #141	; 0x8d
    2920:	545a      	strb	r2, [r3, r1]
    2922:	318d      	adds	r1, #141	; 0x8d
    2924:	545a      	strb	r2, [r3, r1]
	}
}
    2926:	4770      	bx	lr
    2928:	20000240 	.word	0x20000240

0000292c <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    292c:	2800      	cmp	r0, #0
    292e:	d012      	beq.n	2956 <nwkFrameNext+0x2a>
		frame = nwkFrameFrames;
	} else {
		frame++;
    2930:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2932:	4b0c      	ldr	r3, [pc, #48]	; (2964 <nwkFrameNext+0x38>)
    2934:	33a8      	adds	r3, #168	; 0xa8
    2936:	33ff      	adds	r3, #255	; 0xff
    2938:	4298      	cmp	r0, r3
    293a:	d210      	bcs.n	295e <nwkFrameNext+0x32>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    293c:	7803      	ldrb	r3, [r0, #0]
    293e:	2b00      	cmp	r3, #0
    2940:	d10c      	bne.n	295c <nwkFrameNext+0x30>
	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2942:	4a08      	ldr	r2, [pc, #32]	; (2964 <nwkFrameNext+0x38>)
    2944:	32a8      	adds	r2, #168	; 0xa8
    2946:	32ff      	adds	r2, #255	; 0xff
    2948:	308d      	adds	r0, #141	; 0x8d
    294a:	4290      	cmp	r0, r2
    294c:	d205      	bcs.n	295a <nwkFrameNext+0x2e>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    294e:	7803      	ldrb	r3, [r0, #0]
    2950:	2b00      	cmp	r3, #0
    2952:	d0f9      	beq.n	2948 <nwkFrameNext+0x1c>
    2954:	e002      	b.n	295c <nwkFrameNext+0x30>
		frame = nwkFrameFrames;
    2956:	4803      	ldr	r0, [pc, #12]	; (2964 <nwkFrameNext+0x38>)
    2958:	e7f0      	b.n	293c <nwkFrameNext+0x10>
			return frame;
		}
	}

	return NULL;
    295a:	2000      	movs	r0, #0
}
    295c:	4770      	bx	lr
	return NULL;
    295e:	2000      	movs	r0, #0
    2960:	e7fc      	b.n	295c <nwkFrameNext+0x30>
    2962:	46c0      	nop			; (mov r8, r8)
    2964:	20000240 	.word	0x20000240

00002968 <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    2968:	b5f0      	push	{r4, r5, r6, r7, lr}
    296a:	4b09      	ldr	r3, [pc, #36]	; (2990 <nwkRouteInit+0x28>)
    296c:	3302      	adds	r3, #2
    296e:	2200      	movs	r2, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2970:	2701      	movs	r7, #1
    2972:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    2974:	4c06      	ldr	r4, [pc, #24]	; (2990 <nwkRouteInit+0x28>)
    2976:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    2978:	2500      	movs	r5, #0
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    297a:	801f      	strh	r7, [r3, #0]
		nwkRouteTable[i].fixed = 0;
    297c:	00d0      	lsls	r0, r2, #3
    297e:	5d01      	ldrb	r1, [r0, r4]
    2980:	43b1      	bics	r1, r6
    2982:	5501      	strb	r1, [r0, r4]
		nwkRouteTable[i].rank = 0;
    2984:	711d      	strb	r5, [r3, #4]
    2986:	3201      	adds	r2, #1
    2988:	3308      	adds	r3, #8
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    298a:	2a64      	cmp	r2, #100	; 0x64
    298c:	d1f5      	bne.n	297a <nwkRouteInit+0x12>
	}
}
    298e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2990:	200003e8 	.word	0x200003e8

00002994 <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    2994:	b530      	push	{r4, r5, lr}
    2996:	4a0c      	ldr	r2, [pc, #48]	; (29c8 <NWK_RouteFindEntry+0x34>)
    2998:	3202      	adds	r2, #2
    299a:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    299c:	4d0a      	ldr	r5, [pc, #40]	; (29c8 <NWK_RouteFindEntry+0x34>)
    299e:	e003      	b.n	29a8 <NWK_RouteFindEntry+0x14>
    29a0:	3301      	adds	r3, #1
    29a2:	3208      	adds	r2, #8
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    29a4:	2b64      	cmp	r3, #100	; 0x64
    29a6:	d00c      	beq.n	29c2 <NWK_RouteFindEntry+0x2e>
		if (nwkRouteTable[i].dstAddr == dst &&
    29a8:	8814      	ldrh	r4, [r2, #0]
    29aa:	4284      	cmp	r4, r0
    29ac:	d1f8      	bne.n	29a0 <NWK_RouteFindEntry+0xc>
				nwkRouteTable[i].multicast == multicast) {
    29ae:	00dc      	lsls	r4, r3, #3
    29b0:	5d64      	ldrb	r4, [r4, r5]
    29b2:	07a4      	lsls	r4, r4, #30
    29b4:	0fe4      	lsrs	r4, r4, #31
		if (nwkRouteTable[i].dstAddr == dst &&
    29b6:	428c      	cmp	r4, r1
    29b8:	d1f2      	bne.n	29a0 <NWK_RouteFindEntry+0xc>
			return &nwkRouteTable[i];
    29ba:	00db      	lsls	r3, r3, #3
    29bc:	4802      	ldr	r0, [pc, #8]	; (29c8 <NWK_RouteFindEntry+0x34>)
    29be:	18c0      	adds	r0, r0, r3
		}
	}

	return NULL;
}
    29c0:	bd30      	pop	{r4, r5, pc}
	return NULL;
    29c2:	2000      	movs	r0, #0
    29c4:	e7fc      	b.n	29c0 <NWK_RouteFindEntry+0x2c>
    29c6:	46c0      	nop			; (mov r8, r8)
    29c8:	200003e8 	.word	0x200003e8

000029cc <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    29cc:	7803      	ldrb	r3, [r0, #0]
    29ce:	07db      	lsls	r3, r3, #31
    29d0:	d404      	bmi.n	29dc <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    29d2:	2301      	movs	r3, #1
    29d4:	425b      	negs	r3, r3
    29d6:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    29d8:	2300      	movs	r3, #0
    29da:	7183      	strb	r3, [r0, #6]
}
    29dc:	4770      	bx	lr
	...

000029e0 <nwkRouteRemove>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    29e0:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    29e2:	4b03      	ldr	r3, [pc, #12]	; (29f0 <nwkRouteRemove+0x10>)
    29e4:	4798      	blx	r3
	if (entry) {
    29e6:	2800      	cmp	r0, #0
    29e8:	d001      	beq.n	29ee <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    29ea:	4b02      	ldr	r3, [pc, #8]	; (29f4 <nwkRouteRemove+0x14>)
    29ec:	4798      	blx	r3
	}
}
    29ee:	bd10      	pop	{r4, pc}
    29f0:	00002995 	.word	0x00002995
    29f4:	000029cd 	.word	0x000029cd

000029f8 <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    29f8:	b510      	push	{r4, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    29fa:	7b02      	ldrb	r2, [r0, #12]
		return false;
    29fc:	2300      	movs	r3, #0
	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    29fe:	2a06      	cmp	r2, #6
    2a00:	d001      	beq.n	2a06 <nwkRouteErrorReceived+0xe>
	}

	nwkRouteRemove(command->dstAddr, command->multicast);

	return true;
}
    2a02:	0018      	movs	r0, r3
    2a04:	bd10      	pop	{r4, pc}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    2a06:	6883      	ldr	r3, [r0, #8]
	nwkRouteRemove(command->dstAddr, command->multicast);
    2a08:	7959      	ldrb	r1, [r3, #5]
    2a0a:	78da      	ldrb	r2, [r3, #3]
    2a0c:	7918      	ldrb	r0, [r3, #4]
    2a0e:	0200      	lsls	r0, r0, #8
    2a10:	4310      	orrs	r0, r2
    2a12:	4b02      	ldr	r3, [pc, #8]	; (2a1c <nwkRouteErrorReceived+0x24>)
    2a14:	4798      	blx	r3
	return true;
    2a16:	2301      	movs	r3, #1
    2a18:	e7f3      	b.n	2a02 <nwkRouteErrorReceived+0xa>
    2a1a:	46c0      	nop			; (mov r8, r8)
    2a1c:	000029e1 	.word	0x000029e1

00002a20 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    2a20:	b510      	push	{r4, lr}
	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
		return false;
	}
#endif

	if (ind->size < 1) {
    2a22:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2a24:	2300      	movs	r3, #0
	if (ind->size < 1) {
    2a26:	2a00      	cmp	r2, #0
    2a28:	d00a      	beq.n	2a40 <nwkRxSeriveDataInd+0x20>
	}

	switch (ind->data[0]) {
    2a2a:	6883      	ldr	r3, [r0, #8]
    2a2c:	781b      	ldrb	r3, [r3, #0]
    2a2e:	2b00      	cmp	r3, #0
    2a30:	d003      	beq.n	2a3a <nwkRxSeriveDataInd+0x1a>
    2a32:	2b01      	cmp	r3, #1
    2a34:	d006      	beq.n	2a44 <nwkRxSeriveDataInd+0x24>
	case NWK_COMMAND_ROUTE_REPLY:
		return nwkRouteDiscoveryReplyReceived(ind);
#endif

	default:
		return false;
    2a36:	2300      	movs	r3, #0
    2a38:	e002      	b.n	2a40 <nwkRxSeriveDataInd+0x20>
		return nwkTxAckReceived(ind);
    2a3a:	4b04      	ldr	r3, [pc, #16]	; (2a4c <nwkRxSeriveDataInd+0x2c>)
    2a3c:	4798      	blx	r3
    2a3e:	0003      	movs	r3, r0
	}
}
    2a40:	0018      	movs	r0, r3
    2a42:	bd10      	pop	{r4, pc}
		return nwkRouteErrorReceived(ind);
    2a44:	4b02      	ldr	r3, [pc, #8]	; (2a50 <nwkRxSeriveDataInd+0x30>)
    2a46:	4798      	blx	r3
    2a48:	0003      	movs	r3, r0
    2a4a:	e7f9      	b.n	2a40 <nwkRxSeriveDataInd+0x20>
    2a4c:	00002bc9 	.word	0x00002bc9
    2a50:	000029f9 	.word	0x000029f9

00002a54 <nwkRxDuplicateRejectionTimerHandler>:
{
    2a54:	b570      	push	{r4, r5, r6, lr}
    2a56:	490b      	ldr	r1, [pc, #44]	; (2a84 <nwkRxDuplicateRejectionTimerHandler+0x30>)
    2a58:	1d0b      	adds	r3, r1, #4
    2a5a:	3140      	adds	r1, #64	; 0x40
	bool restart = false;
    2a5c:	2400      	movs	r4, #0
			restart = true;
    2a5e:	2501      	movs	r5, #1
    2a60:	e002      	b.n	2a68 <nwkRxDuplicateRejectionTimerHandler+0x14>
    2a62:	3306      	adds	r3, #6
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2a64:	428b      	cmp	r3, r1
    2a66:	d006      	beq.n	2a76 <nwkRxDuplicateRejectionTimerHandler+0x22>
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    2a68:	781a      	ldrb	r2, [r3, #0]
    2a6a:	2a00      	cmp	r2, #0
    2a6c:	d0f9      	beq.n	2a62 <nwkRxDuplicateRejectionTimerHandler+0xe>
			nwkRxDuplicateRejectionTable[i].ttl--;
    2a6e:	3a01      	subs	r2, #1
    2a70:	701a      	strb	r2, [r3, #0]
			restart = true;
    2a72:	002c      	movs	r4, r5
    2a74:	e7f5      	b.n	2a62 <nwkRxDuplicateRejectionTimerHandler+0xe>
	if (restart) {
    2a76:	2c00      	cmp	r4, #0
    2a78:	d100      	bne.n	2a7c <nwkRxDuplicateRejectionTimerHandler+0x28>
}
    2a7a:	bd70      	pop	{r4, r5, r6, pc}
		SYS_TimerStart(timer);
    2a7c:	4b02      	ldr	r3, [pc, #8]	; (2a88 <nwkRxDuplicateRejectionTimerHandler+0x34>)
    2a7e:	4798      	blx	r3
}
    2a80:	e7fb      	b.n	2a7a <nwkRxDuplicateRejectionTimerHandler+0x26>
    2a82:	46c0      	nop			; (mov r8, r8)
    2a84:	20000708 	.word	0x20000708
    2a88:	00002d61 	.word	0x00002d61

00002a8c <nwkRxInit>:
{
    2a8c:	b510      	push	{r4, lr}
    2a8e:	4a0a      	ldr	r2, [pc, #40]	; (2ab8 <nwkRxInit+0x2c>)
    2a90:	1d13      	adds	r3, r2, #4
    2a92:	3240      	adds	r2, #64	; 0x40
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    2a94:	2100      	movs	r1, #0
    2a96:	7019      	strb	r1, [r3, #0]
    2a98:	3306      	adds	r3, #6
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2a9a:	4293      	cmp	r3, r2
    2a9c:	d1fb      	bne.n	2a96 <nwkRxInit+0xa>
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    2a9e:	4b07      	ldr	r3, [pc, #28]	; (2abc <nwkRxInit+0x30>)
    2aa0:	2264      	movs	r2, #100	; 0x64
    2aa2:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2aa4:	2200      	movs	r2, #0
    2aa6:	731a      	strb	r2, [r3, #12]
		= nwkRxDuplicateRejectionTimerHandler;
    2aa8:	4a05      	ldr	r2, [pc, #20]	; (2ac0 <nwkRxInit+0x34>)
    2aaa:	611a      	str	r2, [r3, #16]
	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    2aac:	4905      	ldr	r1, [pc, #20]	; (2ac4 <nwkRxInit+0x38>)
    2aae:	2000      	movs	r0, #0
    2ab0:	4b05      	ldr	r3, [pc, #20]	; (2ac8 <nwkRxInit+0x3c>)
    2ab2:	4798      	blx	r3
}
    2ab4:	bd10      	pop	{r4, pc}
    2ab6:	46c0      	nop			; (mov r8, r8)
    2ab8:	20000708 	.word	0x20000708
    2abc:	20000744 	.word	0x20000744
    2ac0:	00002a55 	.word	0x00002a55
    2ac4:	00002a21 	.word	0x00002a21
    2ac8:	000028fd 	.word	0x000028fd

00002acc <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    2acc:	2300      	movs	r3, #0
    2ace:	4a02      	ldr	r2, [pc, #8]	; (2ad8 <nwkSecurityInit+0xc>)
    2ad0:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    2ad2:	4a02      	ldr	r2, [pc, #8]	; (2adc <nwkSecurityInit+0x10>)
    2ad4:	6013      	str	r3, [r2, #0]
}
    2ad6:	4770      	bx	lr
    2ad8:	2000075c 	.word	0x2000075c
    2adc:	20000758 	.word	0x20000758

00002ae0 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    2ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ae2:	b083      	sub	sp, #12
    2ae4:	9001      	str	r0, [sp, #4]
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2ae6:	2400      	movs	r4, #0
	NwkFrame_t *frame = NULL;
    2ae8:	2000      	movs	r0, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    2aea:	4d11      	ldr	r5, [pc, #68]	; (2b30 <nwkTxDelayTimerHandler+0x50>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2aec:	2686      	movs	r6, #134	; 0x86
    2aee:	2787      	movs	r7, #135	; 0x87
	while (NULL != (frame = nwkFrameNext(frame))) {
    2af0:	47a8      	blx	r5
    2af2:	2800      	cmp	r0, #0
    2af4:	d013      	beq.n	2b1e <nwkTxDelayTimerHandler+0x3e>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    2af6:	7803      	ldrb	r3, [r0, #0]
    2af8:	2b11      	cmp	r3, #17
    2afa:	d1f9      	bne.n	2af0 <nwkTxDelayTimerHandler+0x10>
			if (0 == --frame->tx.timeout) {
    2afc:	5d82      	ldrb	r2, [r0, r6]
    2afe:	5dc3      	ldrb	r3, [r0, r7]
    2b00:	021b      	lsls	r3, r3, #8
    2b02:	4313      	orrs	r3, r2
    2b04:	3b01      	subs	r3, #1
    2b06:	b29b      	uxth	r3, r3
    2b08:	5583      	strb	r3, [r0, r6]
    2b0a:	0a19      	lsrs	r1, r3, #8
    2b0c:	0002      	movs	r2, r0
    2b0e:	3286      	adds	r2, #134	; 0x86
    2b10:	7051      	strb	r1, [r2, #1]
			restart = true;
    2b12:	2401      	movs	r4, #1
			if (0 == --frame->tx.timeout) {
    2b14:	2b00      	cmp	r3, #0
    2b16:	d1eb      	bne.n	2af0 <nwkTxDelayTimerHandler+0x10>
				frame->state = NWK_TX_STATE_SEND;
    2b18:	3313      	adds	r3, #19
    2b1a:	7003      	strb	r3, [r0, #0]
    2b1c:	e7e8      	b.n	2af0 <nwkTxDelayTimerHandler+0x10>
			}
		}
	}

	if (restart) {
    2b1e:	2c00      	cmp	r4, #0
    2b20:	d101      	bne.n	2b26 <nwkTxDelayTimerHandler+0x46>
		SYS_TimerStart(timer);
	}
}
    2b22:	b003      	add	sp, #12
    2b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SYS_TimerStart(timer);
    2b26:	9801      	ldr	r0, [sp, #4]
    2b28:	4b02      	ldr	r3, [pc, #8]	; (2b34 <nwkTxDelayTimerHandler+0x54>)
    2b2a:	4798      	blx	r3
}
    2b2c:	e7f9      	b.n	2b22 <nwkTxDelayTimerHandler+0x42>
    2b2e:	46c0      	nop			; (mov r8, r8)
    2b30:	0000292d 	.word	0x0000292d
    2b34:	00002d61 	.word	0x00002d61

00002b38 <nwkTxAckWaitTimerHandler>:
{
    2b38:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b3a:	b083      	sub	sp, #12
    2b3c:	9001      	str	r0, [sp, #4]
	bool restart = false;
    2b3e:	2400      	movs	r4, #0
	NwkFrame_t *frame = NULL;
    2b40:	2000      	movs	r0, #0
	while (NULL != (frame = nwkFrameNext(frame))) {
    2b42:	4d12      	ldr	r5, [pc, #72]	; (2b8c <nwkTxAckWaitTimerHandler+0x54>)
			if (0 == --frame->tx.timeout) {
    2b44:	2686      	movs	r6, #134	; 0x86
    2b46:	2787      	movs	r7, #135	; 0x87
	while (NULL != (frame = nwkFrameNext(frame))) {
    2b48:	47a8      	blx	r5
    2b4a:	2800      	cmp	r0, #0
    2b4c:	d016      	beq.n	2b7c <nwkTxAckWaitTimerHandler+0x44>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    2b4e:	7803      	ldrb	r3, [r0, #0]
    2b50:	2b16      	cmp	r3, #22
    2b52:	d1f9      	bne.n	2b48 <nwkTxAckWaitTimerHandler+0x10>
			if (0 == --frame->tx.timeout) {
    2b54:	5d82      	ldrb	r2, [r0, r6]
    2b56:	5dc3      	ldrb	r3, [r0, r7]
    2b58:	021b      	lsls	r3, r3, #8
    2b5a:	4313      	orrs	r3, r2
    2b5c:	3b01      	subs	r3, #1
    2b5e:	b29b      	uxth	r3, r3
    2b60:	5583      	strb	r3, [r0, r6]
    2b62:	0a19      	lsrs	r1, r3, #8
    2b64:	0002      	movs	r2, r0
    2b66:	3286      	adds	r2, #134	; 0x86
    2b68:	7051      	strb	r1, [r2, #1]
			restart = true;
    2b6a:	2401      	movs	r4, #1
			if (0 == --frame->tx.timeout) {
    2b6c:	2b00      	cmp	r3, #0
    2b6e:	d1eb      	bne.n	2b48 <nwkTxAckWaitTimerHandler+0x10>
	frame->state = NWK_TX_STATE_CONFIRM;
    2b70:	3317      	adds	r3, #23
    2b72:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    2b74:	2210      	movs	r2, #16
    2b76:	336e      	adds	r3, #110	; 0x6e
    2b78:	54c2      	strb	r2, [r0, r3]
    2b7a:	e7e5      	b.n	2b48 <nwkTxAckWaitTimerHandler+0x10>
	if (restart) {
    2b7c:	2c00      	cmp	r4, #0
    2b7e:	d101      	bne.n	2b84 <nwkTxAckWaitTimerHandler+0x4c>
}
    2b80:	b003      	add	sp, #12
    2b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SYS_TimerStart(timer);
    2b84:	9801      	ldr	r0, [sp, #4]
    2b86:	4b02      	ldr	r3, [pc, #8]	; (2b90 <nwkTxAckWaitTimerHandler+0x58>)
    2b88:	4798      	blx	r3
}
    2b8a:	e7f9      	b.n	2b80 <nwkTxAckWaitTimerHandler+0x48>
    2b8c:	0000292d 	.word	0x0000292d
    2b90:	00002d61 	.word	0x00002d61

00002b94 <nwkTxInit>:
	nwkTxPhyActiveFrame = NULL;
    2b94:	2200      	movs	r2, #0
    2b96:	4b07      	ldr	r3, [pc, #28]	; (2bb4 <nwkTxInit+0x20>)
    2b98:	601a      	str	r2, [r3, #0]
	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    2b9a:	4b07      	ldr	r3, [pc, #28]	; (2bb8 <nwkTxInit+0x24>)
    2b9c:	2132      	movs	r1, #50	; 0x32
    2b9e:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2ba0:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    2ba2:	4906      	ldr	r1, [pc, #24]	; (2bbc <nwkTxInit+0x28>)
    2ba4:	6119      	str	r1, [r3, #16]
	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    2ba6:	4b06      	ldr	r3, [pc, #24]	; (2bc0 <nwkTxInit+0x2c>)
    2ba8:	210a      	movs	r1, #10
    2baa:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2bac:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    2bae:	4a05      	ldr	r2, [pc, #20]	; (2bc4 <nwkTxInit+0x30>)
    2bb0:	611a      	str	r2, [r3, #16]
}
    2bb2:	4770      	bx	lr
    2bb4:	20000788 	.word	0x20000788
    2bb8:	20000760 	.word	0x20000760
    2bbc:	00002b39 	.word	0x00002b39
    2bc0:	20000774 	.word	0x20000774
    2bc4:	00002ae1 	.word	0x00002ae1

00002bc8 <nwkTxAckReceived>:
{
    2bc8:	b570      	push	{r4, r5, r6, lr}
	if (sizeof(NwkCommandAck_t) != ind->size) {
    2bca:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2bcc:	2300      	movs	r3, #0
	if (sizeof(NwkCommandAck_t) != ind->size) {
    2bce:	2a03      	cmp	r2, #3
    2bd0:	d001      	beq.n	2bd6 <nwkTxAckReceived+0xe>
}
    2bd2:	0018      	movs	r0, r3
    2bd4:	bd70      	pop	{r4, r5, r6, pc}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    2bd6:	6885      	ldr	r5, [r0, #8]
    2bd8:	2000      	movs	r0, #0
	while (NULL != (frame = nwkFrameNext(frame))) {
    2bda:	4c0a      	ldr	r4, [pc, #40]	; (2c04 <nwkTxAckReceived+0x3c>)
    2bdc:	47a0      	blx	r4
    2bde:	2800      	cmp	r0, #0
    2be0:	d00d      	beq.n	2bfe <nwkTxAckReceived+0x36>
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    2be2:	7803      	ldrb	r3, [r0, #0]
    2be4:	2b16      	cmp	r3, #22
    2be6:	d1f9      	bne.n	2bdc <nwkTxAckReceived+0x14>
    2be8:	7b02      	ldrb	r2, [r0, #12]
    2bea:	786b      	ldrb	r3, [r5, #1]
    2bec:	429a      	cmp	r2, r3
    2bee:	d1f5      	bne.n	2bdc <nwkTxAckReceived+0x14>
			frame->state = NWK_TX_STATE_CONFIRM;
    2bf0:	2317      	movs	r3, #23
    2bf2:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    2bf4:	78aa      	ldrb	r2, [r5, #2]
    2bf6:	3371      	adds	r3, #113	; 0x71
    2bf8:	54c2      	strb	r2, [r0, r3]
			return true;
    2bfa:	3b87      	subs	r3, #135	; 0x87
    2bfc:	e7e9      	b.n	2bd2 <nwkTxAckReceived+0xa>
	return false;
    2bfe:	2300      	movs	r3, #0
    2c00:	e7e7      	b.n	2bd2 <nwkTxAckReceived+0xa>
    2c02:	46c0      	nop			; (mov r8, r8)
    2c04:	0000292d 	.word	0x0000292d

00002c08 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    2c08:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    2c0a:	4b0e      	ldr	r3, [pc, #56]	; (2c44 <PHY_Init+0x3c>)
    2c0c:	4798      	blx	r3
	PhyReset();
    2c0e:	4b0e      	ldr	r3, [pc, #56]	; (2c48 <PHY_Init+0x40>)
    2c10:	4798      	blx	r3
	phyRxState = false;
    2c12:	2200      	movs	r2, #0
    2c14:	4b0d      	ldr	r3, [pc, #52]	; (2c4c <PHY_Init+0x44>)
    2c16:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    2c18:	3201      	adds	r2, #1
    2c1a:	4b0d      	ldr	r3, [pc, #52]	; (2c50 <PHY_Init+0x48>)
    2c1c:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2c1e:	4e0d      	ldr	r6, [pc, #52]	; (2c54 <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2c20:	4d0d      	ldr	r5, [pc, #52]	; (2c58 <PHY_Init+0x50>)
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2c22:	241f      	movs	r4, #31
	trx_reg_write(reg, value);
    2c24:	2108      	movs	r1, #8
    2c26:	2002      	movs	r0, #2
    2c28:	47b0      	blx	r6
	value = trx_reg_read(reg);
    2c2a:	2001      	movs	r0, #1
    2c2c:	47a8      	blx	r5
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2c2e:	4020      	ands	r0, r4
    2c30:	2808      	cmp	r0, #8
    2c32:	d1f7      	bne.n	2c24 <PHY_Init+0x1c>
	trx_reg_write(reg, value);
    2c34:	212e      	movs	r1, #46	; 0x2e
    2c36:	3804      	subs	r0, #4
    2c38:	4c06      	ldr	r4, [pc, #24]	; (2c54 <PHY_Init+0x4c>)
    2c3a:	47a0      	blx	r4
    2c3c:	21a0      	movs	r1, #160	; 0xa0
    2c3e:	200c      	movs	r0, #12
    2c40:	47a0      	blx	r4
}
    2c42:	bd70      	pop	{r4, r5, r6, pc}
    2c44:	00002f29 	.word	0x00002f29
    2c48:	00003045 	.word	0x00003045
    2c4c:	2000078c 	.word	0x2000078c
    2c50:	2000078d 	.word	0x2000078d
    2c54:	00003171 	.word	0x00003171
    2c58:	00003075 	.word	0x00003075

00002c5c <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    2c5c:	b510      	push	{r4, lr}
	SYS_TimerInit();
    2c5e:	4b04      	ldr	r3, [pc, #16]	; (2c70 <SYS_Init+0x14>)
    2c60:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    2c62:	4b04      	ldr	r3, [pc, #16]	; (2c74 <SYS_Init+0x18>)
    2c64:	4798      	blx	r3
#endif
	PHY_Init();
    2c66:	4b04      	ldr	r3, [pc, #16]	; (2c78 <SYS_Init+0x1c>)
    2c68:	4798      	blx	r3
	NWK_Init();
    2c6a:	4b04      	ldr	r3, [pc, #16]	; (2c7c <SYS_Init+0x20>)
    2c6c:	4798      	blx	r3
}
    2c6e:	bd10      	pop	{r4, pc}
    2c70:	00002cf9 	.word	0x00002cf9
    2c74:	00002f09 	.word	0x00002f09
    2c78:	00002c09 	.word	0x00002c09
    2c7c:	000028a9 	.word	0x000028a9

00002c80 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    2c80:	b530      	push	{r4, r5, lr}
	if (timers) {
    2c82:	4b14      	ldr	r3, [pc, #80]	; (2cd4 <placeTimer+0x54>)
    2c84:	681d      	ldr	r5, [r3, #0]
    2c86:	2d00      	cmp	r5, #0
    2c88:	d01c      	beq.n	2cc4 <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    2c8a:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    2c8c:	6869      	ldr	r1, [r5, #4]
    2c8e:	428a      	cmp	r2, r1
    2c90:	d309      	bcc.n	2ca6 <placeTimer+0x26>
    2c92:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    2c94:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2c96:	6823      	ldr	r3, [r4, #0]
    2c98:	2b00      	cmp	r3, #0
    2c9a:	d008      	beq.n	2cae <placeTimer+0x2e>
			if (timeout < t->timeout) {
    2c9c:	6859      	ldr	r1, [r3, #4]
    2c9e:	4291      	cmp	r1, r2
    2ca0:	d803      	bhi.n	2caa <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2ca2:	001c      	movs	r4, r3
    2ca4:	e7f6      	b.n	2c94 <placeTimer+0x14>
    2ca6:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    2ca8:	2400      	movs	r4, #0
				t->timeout -= timeout;
    2caa:	1a89      	subs	r1, r1, r2
    2cac:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    2cae:	6042      	str	r2, [r0, #4]

		if (prev) {
    2cb0:	2c00      	cmp	r4, #0
    2cb2:	d003      	beq.n	2cbc <placeTimer+0x3c>
			timer->next = prev->next;
    2cb4:	6823      	ldr	r3, [r4, #0]
    2cb6:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    2cb8:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    2cba:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    2cbc:	6005      	str	r5, [r0, #0]
			timers = timer;
    2cbe:	4b05      	ldr	r3, [pc, #20]	; (2cd4 <placeTimer+0x54>)
    2cc0:	6018      	str	r0, [r3, #0]
    2cc2:	e7fa      	b.n	2cba <placeTimer+0x3a>
		timer->next = NULL;
    2cc4:	2300      	movs	r3, #0
    2cc6:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    2cc8:	6883      	ldr	r3, [r0, #8]
    2cca:	6043      	str	r3, [r0, #4]
		timers = timer;
    2ccc:	4b01      	ldr	r3, [pc, #4]	; (2cd4 <placeTimer+0x54>)
    2cce:	6018      	str	r0, [r3, #0]
}
    2cd0:	e7f3      	b.n	2cba <placeTimer+0x3a>
    2cd2:	46c0      	nop			; (mov r8, r8)
    2cd4:	20000790 	.word	0x20000790

00002cd8 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    2cd8:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    2cda:	4a04      	ldr	r2, [pc, #16]	; (2cec <SYS_HwExpiry_Cb+0x14>)
    2cdc:	7813      	ldrb	r3, [r2, #0]
    2cde:	3301      	adds	r3, #1
    2ce0:	b2db      	uxtb	r3, r3
    2ce2:	7013      	strb	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2ce4:	4802      	ldr	r0, [pc, #8]	; (2cf0 <SYS_HwExpiry_Cb+0x18>)
    2ce6:	4b03      	ldr	r3, [pc, #12]	; (2cf4 <SYS_HwExpiry_Cb+0x1c>)
    2ce8:	4798      	blx	r3
}
    2cea:	bd10      	pop	{r4, pc}
    2cec:	200015bc 	.word	0x200015bc
    2cf0:	00002710 	.word	0x00002710
    2cf4:	0000332d 	.word	0x0000332d

00002cf8 <SYS_TimerInit>:
{
    2cf8:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    2cfa:	2400      	movs	r4, #0
    2cfc:	4b06      	ldr	r3, [pc, #24]	; (2d18 <SYS_TimerInit+0x20>)
    2cfe:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    2d00:	4806      	ldr	r0, [pc, #24]	; (2d1c <SYS_TimerInit+0x24>)
    2d02:	4b07      	ldr	r3, [pc, #28]	; (2d20 <SYS_TimerInit+0x28>)
    2d04:	4798      	blx	r3
	common_tc_init();
    2d06:	4b07      	ldr	r3, [pc, #28]	; (2d24 <SYS_TimerInit+0x2c>)
    2d08:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2d0a:	4807      	ldr	r0, [pc, #28]	; (2d28 <SYS_TimerInit+0x30>)
    2d0c:	4b07      	ldr	r3, [pc, #28]	; (2d2c <SYS_TimerInit+0x34>)
    2d0e:	4798      	blx	r3
	timers = NULL;
    2d10:	4b07      	ldr	r3, [pc, #28]	; (2d30 <SYS_TimerInit+0x38>)
    2d12:	601c      	str	r4, [r3, #0]
}
    2d14:	bd10      	pop	{r4, pc}
    2d16:	46c0      	nop			; (mov r8, r8)
    2d18:	200015bc 	.word	0x200015bc
    2d1c:	00002cd9 	.word	0x00002cd9
    2d20:	0000341d 	.word	0x0000341d
    2d24:	00003399 	.word	0x00003399
    2d28:	00002710 	.word	0x00002710
    2d2c:	0000332d 	.word	0x0000332d
    2d30:	20000790 	.word	0x20000790

00002d34 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2d34:	4b09      	ldr	r3, [pc, #36]	; (2d5c <SYS_TimerStarted+0x28>)
    2d36:	681b      	ldr	r3, [r3, #0]
    2d38:	2b00      	cmp	r3, #0
    2d3a:	d00a      	beq.n	2d52 <SYS_TimerStarted+0x1e>
		if (t == timer) {
    2d3c:	4283      	cmp	r3, r0
    2d3e:	d00a      	beq.n	2d56 <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2d40:	681b      	ldr	r3, [r3, #0]
    2d42:	2b00      	cmp	r3, #0
    2d44:	d003      	beq.n	2d4e <SYS_TimerStarted+0x1a>
		if (t == timer) {
    2d46:	4298      	cmp	r0, r3
    2d48:	d1fa      	bne.n	2d40 <SYS_TimerStarted+0xc>
			return true;
    2d4a:	2001      	movs	r0, #1
    2d4c:	e000      	b.n	2d50 <SYS_TimerStarted+0x1c>
	return false;
    2d4e:	2000      	movs	r0, #0
}
    2d50:	4770      	bx	lr
	return false;
    2d52:	2000      	movs	r0, #0
    2d54:	e7fc      	b.n	2d50 <SYS_TimerStarted+0x1c>
			return true;
    2d56:	2001      	movs	r0, #1
    2d58:	e7fa      	b.n	2d50 <SYS_TimerStarted+0x1c>
    2d5a:	46c0      	nop			; (mov r8, r8)
    2d5c:	20000790 	.word	0x20000790

00002d60 <SYS_TimerStart>:
{
    2d60:	b510      	push	{r4, lr}
    2d62:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    2d64:	4b04      	ldr	r3, [pc, #16]	; (2d78 <SYS_TimerStart+0x18>)
    2d66:	4798      	blx	r3
    2d68:	2800      	cmp	r0, #0
    2d6a:	d000      	beq.n	2d6e <SYS_TimerStart+0xe>
}
    2d6c:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    2d6e:	0020      	movs	r0, r4
    2d70:	4b02      	ldr	r3, [pc, #8]	; (2d7c <SYS_TimerStart+0x1c>)
    2d72:	4798      	blx	r3
}
    2d74:	e7fa      	b.n	2d6c <SYS_TimerStart+0xc>
    2d76:	46c0      	nop			; (mov r8, r8)
    2d78:	00002d35 	.word	0x00002d35
    2d7c:	00002c81 	.word	0x00002c81

00002d80 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    2d80:	b510      	push	{r4, lr}
	tmr_cca_callback();
    2d82:	4b01      	ldr	r3, [pc, #4]	; (2d88 <tc_cca_callback+0x8>)
    2d84:	4798      	blx	r3
}
    2d86:	bd10      	pop	{r4, pc}
    2d88:	00003401 	.word	0x00003401

00002d8c <tc_ovf_callback>:
{
    2d8c:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    2d8e:	4b01      	ldr	r3, [pc, #4]	; (2d94 <tc_ovf_callback+0x8>)
    2d90:	4798      	blx	r3
}
    2d92:	bd10      	pop	{r4, pc}
    2d94:	000033b9 	.word	0x000033b9

00002d98 <tmr_read_count>:
{
    2d98:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    2d9a:	4802      	ldr	r0, [pc, #8]	; (2da4 <tmr_read_count+0xc>)
    2d9c:	4b02      	ldr	r3, [pc, #8]	; (2da8 <tmr_read_count+0x10>)
    2d9e:	4798      	blx	r3
    2da0:	b280      	uxth	r0, r0
}
    2da2:	bd10      	pop	{r4, pc}
    2da4:	200015f4 	.word	0x200015f4
    2da8:	00002675 	.word	0x00002675

00002dac <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    2dac:	4b03      	ldr	r3, [pc, #12]	; (2dbc <tmr_disable_cc_interrupt+0x10>)
    2dae:	2110      	movs	r1, #16
    2db0:	681a      	ldr	r2, [r3, #0]
    2db2:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    2db4:	7e5a      	ldrb	r2, [r3, #25]
    2db6:	438a      	bics	r2, r1
    2db8:	765a      	strb	r2, [r3, #25]
}
    2dba:	4770      	bx	lr
    2dbc:	200015f4 	.word	0x200015f4

00002dc0 <tmr_enable_cc_interrupt>:
{
    2dc0:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2dc2:	4c0a      	ldr	r4, [pc, #40]	; (2dec <tmr_enable_cc_interrupt+0x2c>)
    2dc4:	6820      	ldr	r0, [r4, #0]
    2dc6:	4b0a      	ldr	r3, [pc, #40]	; (2df0 <tmr_enable_cc_interrupt+0x30>)
    2dc8:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2dca:	4b0a      	ldr	r3, [pc, #40]	; (2df4 <tmr_enable_cc_interrupt+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2dcc:	5c1b      	ldrb	r3, [r3, r0]
    2dce:	221f      	movs	r2, #31
    2dd0:	401a      	ands	r2, r3
    2dd2:	2301      	movs	r3, #1
    2dd4:	4093      	lsls	r3, r2
    2dd6:	4a08      	ldr	r2, [pc, #32]	; (2df8 <tmr_enable_cc_interrupt+0x38>)
    2dd8:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2dda:	7e63      	ldrb	r3, [r4, #25]
    2ddc:	2210      	movs	r2, #16
    2dde:	4313      	orrs	r3, r2
    2de0:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2de2:	6823      	ldr	r3, [r4, #0]
    2de4:	2210      	movs	r2, #16
    2de6:	735a      	strb	r2, [r3, #13]
}
    2de8:	bd10      	pop	{r4, pc}
    2dea:	46c0      	nop			; (mov r8, r8)
    2dec:	200015f4 	.word	0x200015f4
    2df0:	00002401 	.word	0x00002401
    2df4:	00008a80 	.word	0x00008a80
    2df8:	e000e100 	.word	0xe000e100

00002dfc <tmr_write_cmpreg>:
{
    2dfc:	b510      	push	{r4, lr}
    2dfe:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    2e00:	2100      	movs	r1, #0
    2e02:	4802      	ldr	r0, [pc, #8]	; (2e0c <tmr_write_cmpreg+0x10>)
    2e04:	4b02      	ldr	r3, [pc, #8]	; (2e10 <tmr_write_cmpreg+0x14>)
    2e06:	4798      	blx	r3
}
    2e08:	bd10      	pop	{r4, pc}
    2e0a:	46c0      	nop			; (mov r8, r8)
    2e0c:	200015f4 	.word	0x200015f4
    2e10:	000026a1 	.word	0x000026a1

00002e14 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    2e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e16:	46ce      	mov	lr, r9
    2e18:	4647      	mov	r7, r8
    2e1a:	b580      	push	{r7, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    2e1c:	4a2d      	ldr	r2, [pc, #180]	; (2ed4 <tmr_init+0xc0>)
    2e1e:	2300      	movs	r3, #0
    2e20:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    2e22:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    2e24:	2100      	movs	r1, #0
    2e26:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    2e28:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2e2a:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2e2c:	7051      	strb	r1, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2e2e:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2e30:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2e32:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2e34:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    2e36:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2e38:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2e3a:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2e3c:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2e3e:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2e40:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2e42:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    2e44:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2e46:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    2e48:	3b01      	subs	r3, #1
    2e4a:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    2e4c:	4c22      	ldr	r4, [pc, #136]	; (2ed8 <tmr_init+0xc4>)
    2e4e:	4923      	ldr	r1, [pc, #140]	; (2edc <tmr_init+0xc8>)
    2e50:	0020      	movs	r0, r4
    2e52:	4b23      	ldr	r3, [pc, #140]	; (2ee0 <tmr_init+0xcc>)
    2e54:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    2e56:	2200      	movs	r2, #0
    2e58:	4922      	ldr	r1, [pc, #136]	; (2ee4 <tmr_init+0xd0>)
    2e5a:	0020      	movs	r0, r4
    2e5c:	4d22      	ldr	r5, [pc, #136]	; (2ee8 <tmr_init+0xd4>)
    2e5e:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    2e60:	2202      	movs	r2, #2
    2e62:	4922      	ldr	r1, [pc, #136]	; (2eec <tmr_init+0xd8>)
    2e64:	0020      	movs	r0, r4
    2e66:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2e68:	6820      	ldr	r0, [r4, #0]
    2e6a:	4b21      	ldr	r3, [pc, #132]	; (2ef0 <tmr_init+0xdc>)
    2e6c:	4699      	mov	r9, r3
    2e6e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2e70:	4b20      	ldr	r3, [pc, #128]	; (2ef4 <tmr_init+0xe0>)
    2e72:	4698      	mov	r8, r3
    2e74:	5c1b      	ldrb	r3, [r3, r0]
    2e76:	261f      	movs	r6, #31
    2e78:	4033      	ands	r3, r6
    2e7a:	2501      	movs	r5, #1
    2e7c:	002a      	movs	r2, r5
    2e7e:	409a      	lsls	r2, r3
    2e80:	4f1d      	ldr	r7, [pc, #116]	; (2ef8 <tmr_init+0xe4>)
    2e82:	603a      	str	r2, [r7, #0]
		module->enable_callback_mask |= (1 << callback_type);
    2e84:	7e63      	ldrb	r3, [r4, #25]
    2e86:	2201      	movs	r2, #1
    2e88:	4313      	orrs	r3, r2
    2e8a:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    2e8c:	6823      	ldr	r3, [r4, #0]
    2e8e:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2e90:	0018      	movs	r0, r3
    2e92:	47c8      	blx	r9
    2e94:	4643      	mov	r3, r8
    2e96:	5c1b      	ldrb	r3, [r3, r0]
    2e98:	401e      	ands	r6, r3
    2e9a:	40b5      	lsls	r5, r6
    2e9c:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2e9e:	7e63      	ldrb	r3, [r4, #25]
    2ea0:	2210      	movs	r2, #16
    2ea2:	4313      	orrs	r3, r2
    2ea4:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2ea6:	6822      	ldr	r2, [r4, #0]
    2ea8:	2310      	movs	r3, #16
    2eaa:	7353      	strb	r3, [r2, #13]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2eac:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2eae:	b25b      	sxtb	r3, r3
    2eb0:	2b00      	cmp	r3, #0
    2eb2:	dbfb      	blt.n	2eac <tmr_init+0x98>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2eb4:	8813      	ldrh	r3, [r2, #0]
    2eb6:	2102      	movs	r1, #2
    2eb8:	430b      	orrs	r3, r1
    2eba:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    2ebc:	2000      	movs	r0, #0
    2ebe:	4b0f      	ldr	r3, [pc, #60]	; (2efc <tmr_init+0xe8>)
    2ec0:	4798      	blx	r3
    2ec2:	490f      	ldr	r1, [pc, #60]	; (2f00 <tmr_init+0xec>)
    2ec4:	4b0f      	ldr	r3, [pc, #60]	; (2f04 <tmr_init+0xf0>)
    2ec6:	4798      	blx	r3
	#endif
	return timer_multiplier;
    2ec8:	b2c0      	uxtb	r0, r0
}
    2eca:	bc0c      	pop	{r2, r3}
    2ecc:	4690      	mov	r8, r2
    2ece:	4699      	mov	r9, r3
    2ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ed2:	46c0      	nop			; (mov r8, r8)
    2ed4:	200015c0 	.word	0x200015c0
    2ed8:	200015f4 	.word	0x200015f4
    2edc:	42002c00 	.word	0x42002c00
    2ee0:	00002439 	.word	0x00002439
    2ee4:	00002d8d 	.word	0x00002d8d
    2ee8:	00002339 	.word	0x00002339
    2eec:	00002d81 	.word	0x00002d81
    2ef0:	00002401 	.word	0x00002401
    2ef4:	00008a80 	.word	0x00008a80
    2ef8:	e000e100 	.word	0xe000e100
    2efc:	000020c9 	.word	0x000020c9
    2f00:	000f4240 	.word	0x000f4240
    2f04:	00005e41 	.word	0x00005e41

00002f08 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    2f08:	4770      	bx	lr
	...

00002f0c <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    2f0c:	b510      	push	{r4, lr}
	eic_module->INTFLAG.reg = eic_mask;
    2f0e:	2201      	movs	r2, #1
    2f10:	4b03      	ldr	r3, [pc, #12]	; (2f20 <AT86RFX_ISR+0x14>)
    2f12:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    2f14:	4b03      	ldr	r3, [pc, #12]	; (2f24 <AT86RFX_ISR+0x18>)
    2f16:	681b      	ldr	r3, [r3, #0]
    2f18:	2b00      	cmp	r3, #0
    2f1a:	d000      	beq.n	2f1e <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    2f1c:	4798      	blx	r3
	}
}
    2f1e:	bd10      	pop	{r4, pc}
    2f20:	40001800 	.word	0x40001800
    2f24:	20000794 	.word	0x20000794

00002f28 <trx_spi_init>:

void trx_spi_init(void)
{
    2f28:	b530      	push	{r4, r5, lr}
    2f2a:	b085      	sub	sp, #20
	config->address_enabled = false;
    2f2c:	4a34      	ldr	r2, [pc, #208]	; (3000 <trx_spi_init+0xd8>)
    2f2e:	2300      	movs	r3, #0
    2f30:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    2f32:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    2f34:	213f      	movs	r1, #63	; 0x3f
    2f36:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    2f38:	4c32      	ldr	r4, [pc, #200]	; (3004 <trx_spi_init+0xdc>)
    2f3a:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    2f3c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    2f3e:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    2f40:	2201      	movs	r2, #1
    2f42:	4669      	mov	r1, sp
    2f44:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    2f46:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2f48:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2f4a:	203f      	movs	r0, #63	; 0x3f
    2f4c:	4b2e      	ldr	r3, [pc, #184]	; (3008 <trx_spi_init+0xe0>)
    2f4e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2f50:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    2f52:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2f54:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2f56:	2900      	cmp	r1, #0
    2f58:	d104      	bne.n	2f64 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    2f5a:	0953      	lsrs	r3, r2, #5
    2f5c:	01db      	lsls	r3, r3, #7
    2f5e:	492b      	ldr	r1, [pc, #172]	; (300c <trx_spi_init+0xe4>)
    2f60:	468c      	mov	ip, r1
    2f62:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2f64:	211f      	movs	r1, #31
    2f66:	4011      	ands	r1, r2
    2f68:	2201      	movs	r2, #1
    2f6a:	0010      	movs	r0, r2
    2f6c:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    2f6e:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    2f70:	4c27      	ldr	r4, [pc, #156]	; (3010 <trx_spi_init+0xe8>)
    2f72:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2f74:	2300      	movs	r3, #0
    2f76:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2f78:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2f7a:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    2f7c:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    2f7e:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    2f80:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    2f82:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    2f84:	3223      	adds	r2, #35	; 0x23
    2f86:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2f88:	0020      	movs	r0, r4
    2f8a:	3018      	adds	r0, #24
    2f8c:	3a18      	subs	r2, #24
    2f8e:	2100      	movs	r1, #0
    2f90:	4b20      	ldr	r3, [pc, #128]	; (3014 <trx_spi_init+0xec>)
    2f92:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    2f94:	2380      	movs	r3, #128	; 0x80
    2f96:	025b      	lsls	r3, r3, #9
    2f98:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    2f9a:	4b1f      	ldr	r3, [pc, #124]	; (3018 <trx_spi_init+0xf0>)
    2f9c:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    2f9e:	4b1f      	ldr	r3, [pc, #124]	; (301c <trx_spi_init+0xf4>)
    2fa0:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    2fa2:	2301      	movs	r3, #1
    2fa4:	425b      	negs	r3, r3
    2fa6:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    2fa8:	4b1d      	ldr	r3, [pc, #116]	; (3020 <trx_spi_init+0xf8>)
    2faa:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    2fac:	4b1d      	ldr	r3, [pc, #116]	; (3024 <trx_spi_init+0xfc>)
    2fae:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    2fb0:	4d1d      	ldr	r5, [pc, #116]	; (3028 <trx_spi_init+0x100>)
    2fb2:	0022      	movs	r2, r4
    2fb4:	491d      	ldr	r1, [pc, #116]	; (302c <trx_spi_init+0x104>)
    2fb6:	0028      	movs	r0, r5
    2fb8:	4b1d      	ldr	r3, [pc, #116]	; (3030 <trx_spi_init+0x108>)
    2fba:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    2fbc:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2fbe:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2fc0:	2b00      	cmp	r3, #0
    2fc2:	d1fc      	bne.n	2fbe <trx_spi_init+0x96>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2fc4:	6813      	ldr	r3, [r2, #0]
    2fc6:	2502      	movs	r5, #2
    2fc8:	432b      	orrs	r3, r5
    2fca:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    2fcc:	ac01      	add	r4, sp, #4
    2fce:	0020      	movs	r0, r4
    2fd0:	4b18      	ldr	r3, [pc, #96]	; (3034 <trx_spi_init+0x10c>)
    2fd2:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    2fd4:	2320      	movs	r3, #32
    2fd6:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    2fd8:	2380      	movs	r3, #128	; 0x80
    2fda:	039b      	lsls	r3, r3, #14
    2fdc:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    2fde:	7225      	strb	r5, [r4, #8]
	#if (SAML21)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    2fe0:	2301      	movs	r3, #1
    2fe2:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    2fe4:	2200      	movs	r2, #0
    2fe6:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    2fe8:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    2fea:	0021      	movs	r1, r4
    2fec:	2000      	movs	r0, #0
    2fee:	4b12      	ldr	r3, [pc, #72]	; (3038 <trx_spi_init+0x110>)
    2ff0:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    2ff2:	2200      	movs	r2, #0
    2ff4:	2100      	movs	r1, #0
    2ff6:	4811      	ldr	r0, [pc, #68]	; (303c <trx_spi_init+0x114>)
    2ff8:	4b11      	ldr	r3, [pc, #68]	; (3040 <trx_spi_init+0x118>)
    2ffa:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    2ffc:	b005      	add	sp, #20
    2ffe:	bd30      	pop	{r4, r5, pc}
    3000:	20001614 	.word	0x20001614
    3004:	20001618 	.word	0x20001618
    3008:	00000b99 	.word	0x00000b99
    300c:	41004400 	.word	0x41004400
    3010:	2000161c 	.word	0x2000161c
    3014:	00003483 	.word	0x00003483
    3018:	004c4b40 	.word	0x004c4b40
    301c:	00530005 	.word	0x00530005
    3020:	003e0005 	.word	0x003e0005
    3024:	00520005 	.word	0x00520005
    3028:	20001654 	.word	0x20001654
    302c:	42001800 	.word	0x42001800
    3030:	00001081 	.word	0x00001081
    3034:	00000b0d 	.word	0x00000b0d
    3038:	00000b21 	.word	0x00000b21
    303c:	00002f0d 	.word	0x00002f0d
    3040:	00000a09 	.word	0x00000a09

00003044 <PhyReset>:

void PhyReset(void)
{
    3044:	b570      	push	{r4, r5, r6, lr}
    3046:	4c08      	ldr	r4, [pc, #32]	; (3068 <PhyReset+0x24>)
    3048:	2580      	movs	r5, #128	; 0x80
    304a:	022d      	lsls	r5, r5, #8
    304c:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    304e:	2280      	movs	r2, #128	; 0x80
    3050:	0352      	lsls	r2, r2, #13
    3052:	4b06      	ldr	r3, [pc, #24]	; (306c <PhyReset+0x28>)
    3054:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    3056:	20a5      	movs	r0, #165	; 0xa5
    3058:	0040      	lsls	r0, r0, #1
    305a:	4e05      	ldr	r6, [pc, #20]	; (3070 <PhyReset+0x2c>)
    305c:	47b0      	blx	r6
    305e:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    3060:	200a      	movs	r0, #10
    3062:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    3064:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    3066:	bd70      	pop	{r4, r5, r6, pc}
    3068:	41004480 	.word	0x41004480
    306c:	41004400 	.word	0x41004400
    3070:	00000899 	.word	0x00000899

00003074 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    3074:	b570      	push	{r4, r5, r6, lr}
    3076:	b082      	sub	sp, #8
    3078:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    307a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    307e:	425a      	negs	r2, r3
    3080:	4153      	adcs	r3, r2
    3082:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3084:	b672      	cpsid	i
    3086:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    308a:	2200      	movs	r2, #0
    308c:	4b33      	ldr	r3, [pc, #204]	; (315c <trx_reg_read+0xe8>)
    308e:	701a      	strb	r2, [r3, #0]
	return flags;
    3090:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3092:	4e33      	ldr	r6, [pc, #204]	; (3160 <trx_reg_read+0xec>)
    3094:	3201      	adds	r2, #1
    3096:	4933      	ldr	r1, [pc, #204]	; (3164 <trx_reg_read+0xf0>)
    3098:	0030      	movs	r0, r6
    309a:	4b33      	ldr	r3, [pc, #204]	; (3168 <trx_reg_read+0xf4>)
    309c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    309e:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    30a0:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    30a2:	7e1a      	ldrb	r2, [r3, #24]
    30a4:	420a      	tst	r2, r1
    30a6:	d0fc      	beq.n	30a2 <trx_reg_read+0x2e>
    30a8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    30aa:	07d2      	lsls	r2, r2, #31
    30ac:	d502      	bpl.n	30b4 <trx_reg_read+0x40>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    30ae:	2280      	movs	r2, #128	; 0x80
    30b0:	4315      	orrs	r5, r2
    30b2:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    30b4:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    30b6:	7e1a      	ldrb	r2, [r3, #24]
    30b8:	420a      	tst	r2, r1
    30ba:	d0fc      	beq.n	30b6 <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    30bc:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    30be:	7e1a      	ldrb	r2, [r3, #24]
    30c0:	420a      	tst	r2, r1
    30c2:	d0fc      	beq.n	30be <trx_reg_read+0x4a>
    30c4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    30c6:	0752      	lsls	r2, r2, #29
    30c8:	d50c      	bpl.n	30e4 <trx_reg_read+0x70>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    30ca:	8b5a      	ldrh	r2, [r3, #26]
    30cc:	0752      	lsls	r2, r2, #29
    30ce:	d501      	bpl.n	30d4 <trx_reg_read+0x60>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    30d0:	2204      	movs	r2, #4
    30d2:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    30d4:	4a22      	ldr	r2, [pc, #136]	; (3160 <trx_reg_read+0xec>)
    30d6:	7992      	ldrb	r2, [r2, #6]
    30d8:	2a01      	cmp	r2, #1
    30da:	d034      	beq.n	3146 <trx_reg_read+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    30dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    30de:	b2d2      	uxtb	r2, r2
    30e0:	4922      	ldr	r1, [pc, #136]	; (316c <trx_reg_read+0xf8>)
    30e2:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    30e4:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    30e6:	7e1a      	ldrb	r2, [r3, #24]
    30e8:	420a      	tst	r2, r1
    30ea:	d0fc      	beq.n	30e6 <trx_reg_read+0x72>
    30ec:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    30ee:	07d2      	lsls	r2, r2, #31
    30f0:	d501      	bpl.n	30f6 <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    30f2:	2200      	movs	r2, #0
    30f4:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    30f6:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    30f8:	7e1a      	ldrb	r2, [r3, #24]
    30fa:	420a      	tst	r2, r1
    30fc:	d0fc      	beq.n	30f8 <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    30fe:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3100:	7e1a      	ldrb	r2, [r3, #24]
    3102:	420a      	tst	r2, r1
    3104:	d0fc      	beq.n	3100 <trx_reg_read+0x8c>
    3106:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    3108:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    310a:	0752      	lsls	r2, r2, #29
    310c:	d50a      	bpl.n	3124 <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    310e:	8b5a      	ldrh	r2, [r3, #26]
    3110:	0752      	lsls	r2, r2, #29
    3112:	d501      	bpl.n	3118 <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3114:	2204      	movs	r2, #4
    3116:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3118:	4a11      	ldr	r2, [pc, #68]	; (3160 <trx_reg_read+0xec>)
    311a:	7992      	ldrb	r2, [r2, #6]
    311c:	2a01      	cmp	r2, #1
    311e:	d018      	beq.n	3152 <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3120:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3122:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3124:	2200      	movs	r2, #0
    3126:	490f      	ldr	r1, [pc, #60]	; (3164 <trx_reg_read+0xf0>)
    3128:	480d      	ldr	r0, [pc, #52]	; (3160 <trx_reg_read+0xec>)
    312a:	4b0f      	ldr	r3, [pc, #60]	; (3168 <trx_reg_read+0xf4>)
    312c:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    312e:	23ff      	movs	r3, #255	; 0xff
    3130:	4223      	tst	r3, r4
    3132:	d005      	beq.n	3140 <trx_reg_read+0xcc>
		cpu_irq_enable();
    3134:	2201      	movs	r2, #1
    3136:	4b09      	ldr	r3, [pc, #36]	; (315c <trx_reg_read+0xe8>)
    3138:	701a      	strb	r2, [r3, #0]
    313a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    313e:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    3140:	b2e8      	uxtb	r0, r5
}
    3142:	b002      	add	sp, #8
    3144:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3146:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3148:	05d2      	lsls	r2, r2, #23
    314a:	0dd2      	lsrs	r2, r2, #23
    314c:	4907      	ldr	r1, [pc, #28]	; (316c <trx_reg_read+0xf8>)
    314e:	800a      	strh	r2, [r1, #0]
    3150:	e7c8      	b.n	30e4 <trx_reg_read+0x70>
    3152:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3154:	05ed      	lsls	r5, r5, #23
    3156:	0ded      	lsrs	r5, r5, #23
    3158:	e7e4      	b.n	3124 <trx_reg_read+0xb0>
    315a:	46c0      	nop			; (mov r8, r8)
    315c:	20000008 	.word	0x20000008
    3160:	20001654 	.word	0x20001654
    3164:	20001618 	.word	0x20001618
    3168:	00001345 	.word	0x00001345
    316c:	20001610 	.word	0x20001610

00003170 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    3170:	b5f0      	push	{r4, r5, r6, r7, lr}
    3172:	b083      	sub	sp, #12
    3174:	0006      	movs	r6, r0
    3176:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3178:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    317c:	425a      	negs	r2, r3
    317e:	4153      	adcs	r3, r2
    3180:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3182:	b672      	cpsid	i
    3184:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3188:	2200      	movs	r2, #0
    318a:	4b34      	ldr	r3, [pc, #208]	; (325c <trx_reg_write+0xec>)
    318c:	701a      	strb	r2, [r3, #0]
	return flags;
    318e:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3190:	4f33      	ldr	r7, [pc, #204]	; (3260 <trx_reg_write+0xf0>)
    3192:	3201      	adds	r2, #1
    3194:	4933      	ldr	r1, [pc, #204]	; (3264 <trx_reg_write+0xf4>)
    3196:	0038      	movs	r0, r7
    3198:	4b33      	ldr	r3, [pc, #204]	; (3268 <trx_reg_write+0xf8>)
    319a:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    319c:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    319e:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    31a0:	7e1a      	ldrb	r2, [r3, #24]
    31a2:	420a      	tst	r2, r1
    31a4:	d0fc      	beq.n	31a0 <trx_reg_write+0x30>
    31a6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    31a8:	07d2      	lsls	r2, r2, #31
    31aa:	d502      	bpl.n	31b2 <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    31ac:	22c0      	movs	r2, #192	; 0xc0
    31ae:	4316      	orrs	r6, r2
    31b0:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    31b2:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    31b4:	7e1a      	ldrb	r2, [r3, #24]
    31b6:	420a      	tst	r2, r1
    31b8:	d0fc      	beq.n	31b4 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    31ba:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    31bc:	7e1a      	ldrb	r2, [r3, #24]
    31be:	420a      	tst	r2, r1
    31c0:	d0fc      	beq.n	31bc <trx_reg_write+0x4c>
    31c2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    31c4:	0752      	lsls	r2, r2, #29
    31c6:	d50c      	bpl.n	31e2 <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    31c8:	8b5a      	ldrh	r2, [r3, #26]
    31ca:	0752      	lsls	r2, r2, #29
    31cc:	d501      	bpl.n	31d2 <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    31ce:	2204      	movs	r2, #4
    31d0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    31d2:	4a23      	ldr	r2, [pc, #140]	; (3260 <trx_reg_write+0xf0>)
    31d4:	7992      	ldrb	r2, [r2, #6]
    31d6:	2a01      	cmp	r2, #1
    31d8:	d033      	beq.n	3242 <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    31da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    31dc:	b2d2      	uxtb	r2, r2
    31de:	4923      	ldr	r1, [pc, #140]	; (326c <trx_reg_write+0xfc>)
    31e0:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    31e2:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    31e4:	7e1a      	ldrb	r2, [r3, #24]
    31e6:	420a      	tst	r2, r1
    31e8:	d0fc      	beq.n	31e4 <trx_reg_write+0x74>
    31ea:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    31ec:	07d2      	lsls	r2, r2, #31
    31ee:	d500      	bpl.n	31f2 <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    31f0:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    31f2:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    31f4:	7e1a      	ldrb	r2, [r3, #24]
    31f6:	420a      	tst	r2, r1
    31f8:	d0fc      	beq.n	31f4 <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    31fa:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    31fc:	7e1a      	ldrb	r2, [r3, #24]
    31fe:	420a      	tst	r2, r1
    3200:	d0fc      	beq.n	31fc <trx_reg_write+0x8c>
    3202:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3204:	0752      	lsls	r2, r2, #29
    3206:	d50c      	bpl.n	3222 <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3208:	8b5a      	ldrh	r2, [r3, #26]
    320a:	0752      	lsls	r2, r2, #29
    320c:	d501      	bpl.n	3212 <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    320e:	2204      	movs	r2, #4
    3210:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3212:	4a13      	ldr	r2, [pc, #76]	; (3260 <trx_reg_write+0xf0>)
    3214:	7992      	ldrb	r2, [r2, #6]
    3216:	2a01      	cmp	r2, #1
    3218:	d019      	beq.n	324e <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    321c:	b2db      	uxtb	r3, r3
    321e:	4a13      	ldr	r2, [pc, #76]	; (326c <trx_reg_write+0xfc>)
    3220:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3222:	2200      	movs	r2, #0
    3224:	490f      	ldr	r1, [pc, #60]	; (3264 <trx_reg_write+0xf4>)
    3226:	480e      	ldr	r0, [pc, #56]	; (3260 <trx_reg_write+0xf0>)
    3228:	4b0f      	ldr	r3, [pc, #60]	; (3268 <trx_reg_write+0xf8>)
    322a:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    322c:	23ff      	movs	r3, #255	; 0xff
    322e:	422b      	tst	r3, r5
    3230:	d005      	beq.n	323e <trx_reg_write+0xce>
		cpu_irq_enable();
    3232:	2201      	movs	r2, #1
    3234:	4b09      	ldr	r3, [pc, #36]	; (325c <trx_reg_write+0xec>)
    3236:	701a      	strb	r2, [r3, #0]
    3238:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    323c:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    323e:	b003      	add	sp, #12
    3240:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3242:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3244:	05d2      	lsls	r2, r2, #23
    3246:	0dd2      	lsrs	r2, r2, #23
    3248:	4908      	ldr	r1, [pc, #32]	; (326c <trx_reg_write+0xfc>)
    324a:	800a      	strh	r2, [r1, #0]
    324c:	e7c9      	b.n	31e2 <trx_reg_write+0x72>
    324e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3250:	05db      	lsls	r3, r3, #23
    3252:	0ddb      	lsrs	r3, r3, #23
    3254:	4a05      	ldr	r2, [pc, #20]	; (326c <trx_reg_write+0xfc>)
    3256:	8013      	strh	r3, [r2, #0]
    3258:	e7e3      	b.n	3222 <trx_reg_write+0xb2>
    325a:	46c0      	nop			; (mov r8, r8)
    325c:	20000008 	.word	0x20000008
    3260:	20001654 	.word	0x20001654
    3264:	20001618 	.word	0x20001618
    3268:	00001345 	.word	0x00001345
    326c:	20001610 	.word	0x20001610

00003270 <setup>:

#include "TheArtist.h"
/************************************************************************/
/*                                                                      */
/************************************************************************/
void setup(void) {
    3270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// [SYSTEM INITIALIZE]
	// [NOTICE!]!! sequence of this calls is important!
	irq_initialize_vectors();
	system_init();
    3272:	4b1b      	ldr	r3, [pc, #108]	; (32e0 <setup+0x70>)
    3274:	4798      	blx	r3
	delay_init();
    3276:	4b1b      	ldr	r3, [pc, #108]	; (32e4 <setup+0x74>)
    3278:	4798      	blx	r3
	SYS_Init();	
    327a:	4b1b      	ldr	r3, [pc, #108]	; (32e8 <setup+0x78>)
    327c:	4798      	blx	r3
	
	artist_ultrasonic_tc_configure();
    327e:	4b1b      	ldr	r3, [pc, #108]	; (32ec <setup+0x7c>)
    3280:	4798      	blx	r3
	artist_scheduler_tc_configure();
    3282:	4b1b      	ldr	r3, [pc, #108]	; (32f0 <setup+0x80>)
    3284:	4798      	blx	r3
	artist_configure_tc_callbacks();  
    3286:	4b1b      	ldr	r3, [pc, #108]	; (32f4 <setup+0x84>)
    3288:	4798      	blx	r3
	artist_init_maze(); 
    328a:	4b1b      	ldr	r3, [pc, #108]	; (32f8 <setup+0x88>)
    328c:	4798      	blx	r3

	cpu_irq_enable();
    328e:	4e1b      	ldr	r6, [pc, #108]	; (32fc <setup+0x8c>)
    3290:	2701      	movs	r7, #1
    3292:	7037      	strb	r7, [r6, #0]
    3294:	f3bf 8f5f 	dmb	sy
    3298:	b662      	cpsie	i
	
	// [ultrasonic]
	artist_ultrasonic_configure(&(artist_front.us_instance_right),
    329a:	4c19      	ldr	r4, [pc, #100]	; (3300 <setup+0x90>)
    329c:	220f      	movs	r2, #15
    329e:	211c      	movs	r1, #28
    32a0:	0020      	movs	r0, r4
    32a2:	4d18      	ldr	r5, [pc, #96]	; (3304 <setup+0x94>)
    32a4:	47a8      	blx	r5
	CONF_ARTIST_RIGHT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_center),
    32a6:	0020      	movs	r0, r4
    32a8:	3810      	subs	r0, #16
    32aa:	220f      	movs	r2, #15
    32ac:	210d      	movs	r1, #13
    32ae:	47a8      	blx	r5
	CONF_ARTIST_CENTER_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_left),
    32b0:	0020      	movs	r0, r4
    32b2:	3808      	subs	r0, #8
    32b4:	220f      	movs	r2, #15
    32b6:	2117      	movs	r1, #23
    32b8:	47a8      	blx	r5
	CONF_ARTIST_LEFT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_gpio_init();
    32ba:	4b13      	ldr	r3, [pc, #76]	; (3308 <setup+0x98>)
    32bc:	4798      	blx	r3
	
	//! [ultrasonic]
	
	
	artist_usart_configure(&(artist_front.usart_instance));
    32be:	3c4c      	subs	r4, #76	; 0x4c
    32c0:	0020      	movs	r0, r4
    32c2:	4b12      	ldr	r3, [pc, #72]	; (330c <setup+0x9c>)
    32c4:	4798      	blx	r3
	cpu_irq_enable();
    32c6:	7037      	strb	r7, [r6, #0]
    32c8:	f3bf 8f5f 	dmb	sy
    32cc:	b662      	cpsie	i
	
	system_interrupt_enable_global();

	
	usart_read_buffer_job( &(artist_front.usart_instance),
    32ce:	2205      	movs	r2, #5
    32d0:	490f      	ldr	r1, [pc, #60]	; (3310 <setup+0xa0>)
    32d2:	0020      	movs	r0, r4
    32d4:	4b0f      	ldr	r3, [pc, #60]	; (3314 <setup+0xa4>)
    32d6:	4798      	blx	r3
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
	
	//radioInit();  
	
	printf("front node setup complete\n"); 
    32d8:	480f      	ldr	r0, [pc, #60]	; (3318 <setup+0xa8>)
    32da:	4b10      	ldr	r3, [pc, #64]	; (331c <setup+0xac>)
    32dc:	4798      	blx	r3
	
}
    32de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32e0:	0000230d 	.word	0x0000230d
    32e4:	00000859 	.word	0x00000859
    32e8:	00002c5d 	.word	0x00002c5d
    32ec:	00000565 	.word	0x00000565
    32f0:	00000735 	.word	0x00000735
    32f4:	00000809 	.word	0x00000809
    32f8:	00000115 	.word	0x00000115
    32fc:	20000008 	.word	0x20000008
    3300:	20000878 	.word	0x20000878
    3304:	000001e1 	.word	0x000001e1
    3308:	000001f1 	.word	0x000001f1
    330c:	000005f9 	.word	0x000005f9
    3310:	200014a4 	.word	0x200014a4
    3314:	000018d9 	.word	0x000018d9
    3318:	00008a84 	.word	0x00008a84
    331c:	00003e69 	.word	0x00003e69

00003320 <main>:
	//SYS_TaskHandler();  
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
int main (void) {
    3320:	b510      	push	{r4, lr}
	setup();
    3322:	4b01      	ldr	r3, [pc, #4]	; (3328 <main+0x8>)
    3324:	4798      	blx	r3
    3326:	e7fe      	b.n	3326 <main+0x6>
    3328:	00003271 	.word	0x00003271

0000332c <common_tc_delay>:
    332c:	b510      	push	{r4, lr}
    332e:	1c04      	adds	r4, r0, #0
    3330:	4b13      	ldr	r3, [pc, #76]	; (3380 <common_tc_delay+0x54>)
    3332:	4798      	blx	r3
    3334:	4b13      	ldr	r3, [pc, #76]	; (3384 <common_tc_delay+0x58>)
    3336:	781a      	ldrb	r2, [r3, #0]
    3338:	4362      	muls	r2, r4
    333a:	1881      	adds	r1, r0, r2
    333c:	4b12      	ldr	r3, [pc, #72]	; (3388 <common_tc_delay+0x5c>)
    333e:	6059      	str	r1, [r3, #4]
    3340:	6859      	ldr	r1, [r3, #4]
    3342:	0c09      	lsrs	r1, r1, #16
    3344:	6059      	str	r1, [r3, #4]
    3346:	685b      	ldr	r3, [r3, #4]
    3348:	2b00      	cmp	r3, #0
    334a:	d007      	beq.n	335c <common_tc_delay+0x30>
    334c:	4b0e      	ldr	r3, [pc, #56]	; (3388 <common_tc_delay+0x5c>)
    334e:	6859      	ldr	r1, [r3, #4]
    3350:	3201      	adds	r2, #1
    3352:	1880      	adds	r0, r0, r2
    3354:	8118      	strh	r0, [r3, #8]
    3356:	4b0d      	ldr	r3, [pc, #52]	; (338c <common_tc_delay+0x60>)
    3358:	4798      	blx	r3
    335a:	e004      	b.n	3366 <common_tc_delay+0x3a>
    335c:	1882      	adds	r2, r0, r2
    335e:	4b0a      	ldr	r3, [pc, #40]	; (3388 <common_tc_delay+0x5c>)
    3360:	811a      	strh	r2, [r3, #8]
    3362:	4b0b      	ldr	r3, [pc, #44]	; (3390 <common_tc_delay+0x64>)
    3364:	4798      	blx	r3
    3366:	4b08      	ldr	r3, [pc, #32]	; (3388 <common_tc_delay+0x5c>)
    3368:	891b      	ldrh	r3, [r3, #8]
    336a:	2b63      	cmp	r3, #99	; 0x63
    336c:	d802      	bhi.n	3374 <common_tc_delay+0x48>
    336e:	3364      	adds	r3, #100	; 0x64
    3370:	4a05      	ldr	r2, [pc, #20]	; (3388 <common_tc_delay+0x5c>)
    3372:	8113      	strh	r3, [r2, #8]
    3374:	4b04      	ldr	r3, [pc, #16]	; (3388 <common_tc_delay+0x5c>)
    3376:	8918      	ldrh	r0, [r3, #8]
    3378:	4b06      	ldr	r3, [pc, #24]	; (3394 <common_tc_delay+0x68>)
    337a:	4798      	blx	r3
    337c:	bd10      	pop	{r4, pc}
    337e:	46c0      	nop			; (mov r8, r8)
    3380:	00002d99 	.word	0x00002d99
    3384:	20001660 	.word	0x20001660
    3388:	20000798 	.word	0x20000798
    338c:	00002dad 	.word	0x00002dad
    3390:	00002dc1 	.word	0x00002dc1
    3394:	00002dfd 	.word	0x00002dfd

00003398 <common_tc_init>:
    3398:	b508      	push	{r3, lr}
    339a:	2200      	movs	r2, #0
    339c:	4b03      	ldr	r3, [pc, #12]	; (33ac <common_tc_init+0x14>)
    339e:	701a      	strb	r2, [r3, #0]
    33a0:	4b03      	ldr	r3, [pc, #12]	; (33b0 <common_tc_init+0x18>)
    33a2:	4798      	blx	r3
    33a4:	4b03      	ldr	r3, [pc, #12]	; (33b4 <common_tc_init+0x1c>)
    33a6:	7018      	strb	r0, [r3, #0]
    33a8:	bd08      	pop	{r3, pc}
    33aa:	46c0      	nop			; (mov r8, r8)
    33ac:	20000798 	.word	0x20000798
    33b0:	00002e15 	.word	0x00002e15
    33b4:	20001660 	.word	0x20001660

000033b8 <tmr_ovf_callback>:
    33b8:	b508      	push	{r3, lr}
    33ba:	4b0e      	ldr	r3, [pc, #56]	; (33f4 <tmr_ovf_callback+0x3c>)
    33bc:	685b      	ldr	r3, [r3, #4]
    33be:	2b00      	cmp	r3, #0
    33c0:	d007      	beq.n	33d2 <tmr_ovf_callback+0x1a>
    33c2:	4a0c      	ldr	r2, [pc, #48]	; (33f4 <tmr_ovf_callback+0x3c>)
    33c4:	6853      	ldr	r3, [r2, #4]
    33c6:	3b01      	subs	r3, #1
    33c8:	6053      	str	r3, [r2, #4]
    33ca:	2b00      	cmp	r3, #0
    33cc:	d101      	bne.n	33d2 <tmr_ovf_callback+0x1a>
    33ce:	4b0a      	ldr	r3, [pc, #40]	; (33f8 <tmr_ovf_callback+0x40>)
    33d0:	4798      	blx	r3
    33d2:	4a08      	ldr	r2, [pc, #32]	; (33f4 <tmr_ovf_callback+0x3c>)
    33d4:	7813      	ldrb	r3, [r2, #0]
    33d6:	3301      	adds	r3, #1
    33d8:	b2db      	uxtb	r3, r3
    33da:	7013      	strb	r3, [r2, #0]
    33dc:	4a07      	ldr	r2, [pc, #28]	; (33fc <tmr_ovf_callback+0x44>)
    33de:	7812      	ldrb	r2, [r2, #0]
    33e0:	429a      	cmp	r2, r3
    33e2:	d806      	bhi.n	33f2 <tmr_ovf_callback+0x3a>
    33e4:	4b03      	ldr	r3, [pc, #12]	; (33f4 <tmr_ovf_callback+0x3c>)
    33e6:	2200      	movs	r2, #0
    33e8:	701a      	strb	r2, [r3, #0]
    33ea:	68db      	ldr	r3, [r3, #12]
    33ec:	2b00      	cmp	r3, #0
    33ee:	d000      	beq.n	33f2 <tmr_ovf_callback+0x3a>
    33f0:	4798      	blx	r3
    33f2:	bd08      	pop	{r3, pc}
    33f4:	20000798 	.word	0x20000798
    33f8:	00002dc1 	.word	0x00002dc1
    33fc:	20001660 	.word	0x20001660

00003400 <tmr_cca_callback>:
    3400:	b508      	push	{r3, lr}
    3402:	4b04      	ldr	r3, [pc, #16]	; (3414 <tmr_cca_callback+0x14>)
    3404:	4798      	blx	r3
    3406:	4b04      	ldr	r3, [pc, #16]	; (3418 <tmr_cca_callback+0x18>)
    3408:	691b      	ldr	r3, [r3, #16]
    340a:	2b00      	cmp	r3, #0
    340c:	d000      	beq.n	3410 <tmr_cca_callback+0x10>
    340e:	4798      	blx	r3
    3410:	bd08      	pop	{r3, pc}
    3412:	46c0      	nop			; (mov r8, r8)
    3414:	00002dad 	.word	0x00002dad
    3418:	20000798 	.word	0x20000798

0000341c <set_common_tc_expiry_callback>:
    341c:	4b01      	ldr	r3, [pc, #4]	; (3424 <set_common_tc_expiry_callback+0x8>)
    341e:	6118      	str	r0, [r3, #16]
    3420:	4770      	bx	lr
    3422:	46c0      	nop			; (mov r8, r8)
    3424:	20000798 	.word	0x20000798

00003428 <__libc_init_array>:
    3428:	b570      	push	{r4, r5, r6, lr}
    342a:	2600      	movs	r6, #0
    342c:	4d0c      	ldr	r5, [pc, #48]	; (3460 <__libc_init_array+0x38>)
    342e:	4c0d      	ldr	r4, [pc, #52]	; (3464 <__libc_init_array+0x3c>)
    3430:	1b64      	subs	r4, r4, r5
    3432:	10a4      	asrs	r4, r4, #2
    3434:	42a6      	cmp	r6, r4
    3436:	d109      	bne.n	344c <__libc_init_array+0x24>
    3438:	2600      	movs	r6, #0
    343a:	f005 fd31 	bl	8ea0 <_init>
    343e:	4d0a      	ldr	r5, [pc, #40]	; (3468 <__libc_init_array+0x40>)
    3440:	4c0a      	ldr	r4, [pc, #40]	; (346c <__libc_init_array+0x44>)
    3442:	1b64      	subs	r4, r4, r5
    3444:	10a4      	asrs	r4, r4, #2
    3446:	42a6      	cmp	r6, r4
    3448:	d105      	bne.n	3456 <__libc_init_array+0x2e>
    344a:	bd70      	pop	{r4, r5, r6, pc}
    344c:	00b3      	lsls	r3, r6, #2
    344e:	58eb      	ldr	r3, [r5, r3]
    3450:	4798      	blx	r3
    3452:	3601      	adds	r6, #1
    3454:	e7ee      	b.n	3434 <__libc_init_array+0xc>
    3456:	00b3      	lsls	r3, r6, #2
    3458:	58eb      	ldr	r3, [r5, r3]
    345a:	4798      	blx	r3
    345c:	3601      	adds	r6, #1
    345e:	e7f2      	b.n	3446 <__libc_init_array+0x1e>
    3460:	00008eac 	.word	0x00008eac
    3464:	00008eac 	.word	0x00008eac
    3468:	00008eac 	.word	0x00008eac
    346c:	00008eb0 	.word	0x00008eb0

00003470 <memcpy>:
    3470:	2300      	movs	r3, #0
    3472:	b510      	push	{r4, lr}
    3474:	429a      	cmp	r2, r3
    3476:	d100      	bne.n	347a <memcpy+0xa>
    3478:	bd10      	pop	{r4, pc}
    347a:	5ccc      	ldrb	r4, [r1, r3]
    347c:	54c4      	strb	r4, [r0, r3]
    347e:	3301      	adds	r3, #1
    3480:	e7f8      	b.n	3474 <memcpy+0x4>

00003482 <memset>:
    3482:	0003      	movs	r3, r0
    3484:	1882      	adds	r2, r0, r2
    3486:	4293      	cmp	r3, r2
    3488:	d100      	bne.n	348c <memset+0xa>
    348a:	4770      	bx	lr
    348c:	7019      	strb	r1, [r3, #0]
    348e:	3301      	adds	r3, #1
    3490:	e7f9      	b.n	3486 <memset+0x4>

00003492 <__cvt>:
    3492:	b5f0      	push	{r4, r5, r6, r7, lr}
    3494:	b08b      	sub	sp, #44	; 0x2c
    3496:	0014      	movs	r4, r2
    3498:	1e1d      	subs	r5, r3, #0
    349a:	9912      	ldr	r1, [sp, #72]	; 0x48
    349c:	da53      	bge.n	3546 <__cvt+0xb4>
    349e:	2480      	movs	r4, #128	; 0x80
    34a0:	0624      	lsls	r4, r4, #24
    34a2:	191b      	adds	r3, r3, r4
    34a4:	001d      	movs	r5, r3
    34a6:	0014      	movs	r4, r2
    34a8:	232d      	movs	r3, #45	; 0x2d
    34aa:	700b      	strb	r3, [r1, #0]
    34ac:	2320      	movs	r3, #32
    34ae:	9e14      	ldr	r6, [sp, #80]	; 0x50
    34b0:	2203      	movs	r2, #3
    34b2:	439e      	bics	r6, r3
    34b4:	2e46      	cmp	r6, #70	; 0x46
    34b6:	d007      	beq.n	34c8 <__cvt+0x36>
    34b8:	0033      	movs	r3, r6
    34ba:	3b45      	subs	r3, #69	; 0x45
    34bc:	4259      	negs	r1, r3
    34be:	414b      	adcs	r3, r1
    34c0:	9910      	ldr	r1, [sp, #64]	; 0x40
    34c2:	3a01      	subs	r2, #1
    34c4:	18cb      	adds	r3, r1, r3
    34c6:	9310      	str	r3, [sp, #64]	; 0x40
    34c8:	ab09      	add	r3, sp, #36	; 0x24
    34ca:	9304      	str	r3, [sp, #16]
    34cc:	ab08      	add	r3, sp, #32
    34ce:	9303      	str	r3, [sp, #12]
    34d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    34d2:	9200      	str	r2, [sp, #0]
    34d4:	9302      	str	r3, [sp, #8]
    34d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    34d8:	0022      	movs	r2, r4
    34da:	9301      	str	r3, [sp, #4]
    34dc:	002b      	movs	r3, r5
    34de:	f000 fedb 	bl	4298 <_dtoa_r>
    34e2:	0007      	movs	r7, r0
    34e4:	2e47      	cmp	r6, #71	; 0x47
    34e6:	d102      	bne.n	34ee <__cvt+0x5c>
    34e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    34ea:	07db      	lsls	r3, r3, #31
    34ec:	d524      	bpl.n	3538 <__cvt+0xa6>
    34ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
    34f0:	18fb      	adds	r3, r7, r3
    34f2:	9307      	str	r3, [sp, #28]
    34f4:	2e46      	cmp	r6, #70	; 0x46
    34f6:	d114      	bne.n	3522 <__cvt+0x90>
    34f8:	783b      	ldrb	r3, [r7, #0]
    34fa:	2b30      	cmp	r3, #48	; 0x30
    34fc:	d10c      	bne.n	3518 <__cvt+0x86>
    34fe:	2200      	movs	r2, #0
    3500:	2300      	movs	r3, #0
    3502:	0020      	movs	r0, r4
    3504:	0029      	movs	r1, r5
    3506:	f002 fe21 	bl	614c <__aeabi_dcmpeq>
    350a:	2800      	cmp	r0, #0
    350c:	d104      	bne.n	3518 <__cvt+0x86>
    350e:	2301      	movs	r3, #1
    3510:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3512:	1a9b      	subs	r3, r3, r2
    3514:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3516:	6013      	str	r3, [r2, #0]
    3518:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    351a:	9a07      	ldr	r2, [sp, #28]
    351c:	681b      	ldr	r3, [r3, #0]
    351e:	18d3      	adds	r3, r2, r3
    3520:	9307      	str	r3, [sp, #28]
    3522:	2200      	movs	r2, #0
    3524:	2300      	movs	r3, #0
    3526:	0020      	movs	r0, r4
    3528:	0029      	movs	r1, r5
    352a:	f002 fe0f 	bl	614c <__aeabi_dcmpeq>
    352e:	2230      	movs	r2, #48	; 0x30
    3530:	2800      	cmp	r0, #0
    3532:	d00d      	beq.n	3550 <__cvt+0xbe>
    3534:	9b07      	ldr	r3, [sp, #28]
    3536:	9309      	str	r3, [sp, #36]	; 0x24
    3538:	0038      	movs	r0, r7
    353a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    353c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    353e:	1bdb      	subs	r3, r3, r7
    3540:	6013      	str	r3, [r2, #0]
    3542:	b00b      	add	sp, #44	; 0x2c
    3544:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3546:	2300      	movs	r3, #0
    3548:	e7af      	b.n	34aa <__cvt+0x18>
    354a:	1c59      	adds	r1, r3, #1
    354c:	9109      	str	r1, [sp, #36]	; 0x24
    354e:	701a      	strb	r2, [r3, #0]
    3550:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3552:	9907      	ldr	r1, [sp, #28]
    3554:	4299      	cmp	r1, r3
    3556:	d8f8      	bhi.n	354a <__cvt+0xb8>
    3558:	e7ee      	b.n	3538 <__cvt+0xa6>

0000355a <__exponent>:
    355a:	b5f0      	push	{r4, r5, r6, r7, lr}
    355c:	232b      	movs	r3, #43	; 0x2b
    355e:	b085      	sub	sp, #20
    3560:	0007      	movs	r7, r0
    3562:	000c      	movs	r4, r1
    3564:	7002      	strb	r2, [r0, #0]
    3566:	1c86      	adds	r6, r0, #2
    3568:	2900      	cmp	r1, #0
    356a:	da01      	bge.n	3570 <__exponent+0x16>
    356c:	232d      	movs	r3, #45	; 0x2d
    356e:	424c      	negs	r4, r1
    3570:	707b      	strb	r3, [r7, #1]
    3572:	2c09      	cmp	r4, #9
    3574:	dd23      	ble.n	35be <__exponent+0x64>
    3576:	ab02      	add	r3, sp, #8
    3578:	1ddd      	adds	r5, r3, #7
    357a:	1e6b      	subs	r3, r5, #1
    357c:	0020      	movs	r0, r4
    357e:	210a      	movs	r1, #10
    3580:	9301      	str	r3, [sp, #4]
    3582:	f002 fdcd 	bl	6120 <__aeabi_idivmod>
    3586:	1e6b      	subs	r3, r5, #1
    3588:	3130      	adds	r1, #48	; 0x30
    358a:	7019      	strb	r1, [r3, #0]
    358c:	0020      	movs	r0, r4
    358e:	210a      	movs	r1, #10
    3590:	f002 fce0 	bl	5f54 <__divsi3>
    3594:	0004      	movs	r4, r0
    3596:	2809      	cmp	r0, #9
    3598:	dc0a      	bgt.n	35b0 <__exponent+0x56>
    359a:	3d02      	subs	r5, #2
    359c:	3430      	adds	r4, #48	; 0x30
    359e:	702c      	strb	r4, [r5, #0]
    35a0:	ab02      	add	r3, sp, #8
    35a2:	3307      	adds	r3, #7
    35a4:	0030      	movs	r0, r6
    35a6:	42ab      	cmp	r3, r5
    35a8:	d804      	bhi.n	35b4 <__exponent+0x5a>
    35aa:	1bc0      	subs	r0, r0, r7
    35ac:	b005      	add	sp, #20
    35ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35b0:	9d01      	ldr	r5, [sp, #4]
    35b2:	e7e2      	b.n	357a <__exponent+0x20>
    35b4:	782b      	ldrb	r3, [r5, #0]
    35b6:	3501      	adds	r5, #1
    35b8:	7033      	strb	r3, [r6, #0]
    35ba:	3601      	adds	r6, #1
    35bc:	e7f0      	b.n	35a0 <__exponent+0x46>
    35be:	2330      	movs	r3, #48	; 0x30
    35c0:	18e4      	adds	r4, r4, r3
    35c2:	7033      	strb	r3, [r6, #0]
    35c4:	1cb0      	adds	r0, r6, #2
    35c6:	7074      	strb	r4, [r6, #1]
    35c8:	e7ef      	b.n	35aa <__exponent+0x50>
	...

000035cc <_printf_float>:
    35cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    35ce:	b095      	sub	sp, #84	; 0x54
    35d0:	000c      	movs	r4, r1
    35d2:	920a      	str	r2, [sp, #40]	; 0x28
    35d4:	930b      	str	r3, [sp, #44]	; 0x2c
    35d6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    35d8:	9009      	str	r0, [sp, #36]	; 0x24
    35da:	f001 fdd3 	bl	5184 <_localeconv_r>
    35de:	6803      	ldr	r3, [r0, #0]
    35e0:	0018      	movs	r0, r3
    35e2:	930d      	str	r3, [sp, #52]	; 0x34
    35e4:	f000 fd00 	bl	3fe8 <strlen>
    35e8:	2300      	movs	r3, #0
    35ea:	9312      	str	r3, [sp, #72]	; 0x48
    35ec:	6823      	ldr	r3, [r4, #0]
    35ee:	900e      	str	r0, [sp, #56]	; 0x38
    35f0:	930c      	str	r3, [sp, #48]	; 0x30
    35f2:	990c      	ldr	r1, [sp, #48]	; 0x30
    35f4:	7e27      	ldrb	r7, [r4, #24]
    35f6:	682b      	ldr	r3, [r5, #0]
    35f8:	2207      	movs	r2, #7
    35fa:	05c9      	lsls	r1, r1, #23
    35fc:	d547      	bpl.n	368e <_printf_float+0xc2>
    35fe:	189b      	adds	r3, r3, r2
    3600:	4393      	bics	r3, r2
    3602:	001a      	movs	r2, r3
    3604:	3208      	adds	r2, #8
    3606:	602a      	str	r2, [r5, #0]
    3608:	681a      	ldr	r2, [r3, #0]
    360a:	685b      	ldr	r3, [r3, #4]
    360c:	64a2      	str	r2, [r4, #72]	; 0x48
    360e:	64e3      	str	r3, [r4, #76]	; 0x4c
    3610:	2201      	movs	r2, #1
    3612:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    3614:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    3616:	006b      	lsls	r3, r5, #1
    3618:	085b      	lsrs	r3, r3, #1
    361a:	930f      	str	r3, [sp, #60]	; 0x3c
    361c:	4252      	negs	r2, r2
    361e:	4ba7      	ldr	r3, [pc, #668]	; (38bc <_printf_float+0x2f0>)
    3620:	0030      	movs	r0, r6
    3622:	990f      	ldr	r1, [sp, #60]	; 0x3c
    3624:	f004 fff0 	bl	8608 <__aeabi_dcmpun>
    3628:	2800      	cmp	r0, #0
    362a:	d000      	beq.n	362e <_printf_float+0x62>
    362c:	e206      	b.n	3a3c <_printf_float+0x470>
    362e:	2201      	movs	r2, #1
    3630:	4ba2      	ldr	r3, [pc, #648]	; (38bc <_printf_float+0x2f0>)
    3632:	4252      	negs	r2, r2
    3634:	0030      	movs	r0, r6
    3636:	990f      	ldr	r1, [sp, #60]	; 0x3c
    3638:	f002 fd98 	bl	616c <__aeabi_dcmple>
    363c:	2800      	cmp	r0, #0
    363e:	d000      	beq.n	3642 <_printf_float+0x76>
    3640:	e1fc      	b.n	3a3c <_printf_float+0x470>
    3642:	2200      	movs	r2, #0
    3644:	2300      	movs	r3, #0
    3646:	0030      	movs	r0, r6
    3648:	0029      	movs	r1, r5
    364a:	f002 fd85 	bl	6158 <__aeabi_dcmplt>
    364e:	2800      	cmp	r0, #0
    3650:	d003      	beq.n	365a <_printf_float+0x8e>
    3652:	0023      	movs	r3, r4
    3654:	222d      	movs	r2, #45	; 0x2d
    3656:	3343      	adds	r3, #67	; 0x43
    3658:	701a      	strb	r2, [r3, #0]
    365a:	4d99      	ldr	r5, [pc, #612]	; (38c0 <_printf_float+0x2f4>)
    365c:	2f47      	cmp	r7, #71	; 0x47
    365e:	d800      	bhi.n	3662 <_printf_float+0x96>
    3660:	4d98      	ldr	r5, [pc, #608]	; (38c4 <_printf_float+0x2f8>)
    3662:	2303      	movs	r3, #3
    3664:	2600      	movs	r6, #0
    3666:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3668:	6123      	str	r3, [r4, #16]
    366a:	3301      	adds	r3, #1
    366c:	439a      	bics	r2, r3
    366e:	6022      	str	r2, [r4, #0]
    3670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3672:	aa13      	add	r2, sp, #76	; 0x4c
    3674:	9300      	str	r3, [sp, #0]
    3676:	0021      	movs	r1, r4
    3678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    367a:	9809      	ldr	r0, [sp, #36]	; 0x24
    367c:	f000 f9f2 	bl	3a64 <_printf_common>
    3680:	1c43      	adds	r3, r0, #1
    3682:	d000      	beq.n	3686 <_printf_float+0xba>
    3684:	e09c      	b.n	37c0 <_printf_float+0x1f4>
    3686:	2001      	movs	r0, #1
    3688:	4240      	negs	r0, r0
    368a:	b015      	add	sp, #84	; 0x54
    368c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    368e:	3307      	adds	r3, #7
    3690:	e7b6      	b.n	3600 <_printf_float+0x34>
    3692:	2380      	movs	r3, #128	; 0x80
    3694:	6862      	ldr	r2, [r4, #4]
    3696:	00db      	lsls	r3, r3, #3
    3698:	1c51      	adds	r1, r2, #1
    369a:	d145      	bne.n	3728 <_printf_float+0x15c>
    369c:	3207      	adds	r2, #7
    369e:	6062      	str	r2, [r4, #4]
    36a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    36a2:	2100      	movs	r1, #0
    36a4:	4313      	orrs	r3, r2
    36a6:	aa12      	add	r2, sp, #72	; 0x48
    36a8:	9205      	str	r2, [sp, #20]
    36aa:	aa11      	add	r2, sp, #68	; 0x44
    36ac:	9203      	str	r2, [sp, #12]
    36ae:	2223      	movs	r2, #35	; 0x23
    36b0:	6023      	str	r3, [r4, #0]
    36b2:	9106      	str	r1, [sp, #24]
    36b4:	9301      	str	r3, [sp, #4]
    36b6:	a908      	add	r1, sp, #32
    36b8:	6863      	ldr	r3, [r4, #4]
    36ba:	1852      	adds	r2, r2, r1
    36bc:	9202      	str	r2, [sp, #8]
    36be:	9300      	str	r3, [sp, #0]
    36c0:	0032      	movs	r2, r6
    36c2:	002b      	movs	r3, r5
    36c4:	9704      	str	r7, [sp, #16]
    36c6:	9809      	ldr	r0, [sp, #36]	; 0x24
    36c8:	f7ff fee3 	bl	3492 <__cvt>
    36cc:	2320      	movs	r3, #32
    36ce:	003a      	movs	r2, r7
    36d0:	0005      	movs	r5, r0
    36d2:	439a      	bics	r2, r3
    36d4:	2a47      	cmp	r2, #71	; 0x47
    36d6:	d107      	bne.n	36e8 <_printf_float+0x11c>
    36d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    36da:	1cda      	adds	r2, r3, #3
    36dc:	db02      	blt.n	36e4 <_printf_float+0x118>
    36de:	6862      	ldr	r2, [r4, #4]
    36e0:	4293      	cmp	r3, r2
    36e2:	dd5b      	ble.n	379c <_printf_float+0x1d0>
    36e4:	3f02      	subs	r7, #2
    36e6:	b2ff      	uxtb	r7, r7
    36e8:	9911      	ldr	r1, [sp, #68]	; 0x44
    36ea:	2f65      	cmp	r7, #101	; 0x65
    36ec:	d83b      	bhi.n	3766 <_printf_float+0x19a>
    36ee:	0020      	movs	r0, r4
    36f0:	3901      	subs	r1, #1
    36f2:	003a      	movs	r2, r7
    36f4:	3050      	adds	r0, #80	; 0x50
    36f6:	9111      	str	r1, [sp, #68]	; 0x44
    36f8:	f7ff ff2f 	bl	355a <__exponent>
    36fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    36fe:	0006      	movs	r6, r0
    3700:	1883      	adds	r3, r0, r2
    3702:	6123      	str	r3, [r4, #16]
    3704:	2a01      	cmp	r2, #1
    3706:	dc02      	bgt.n	370e <_printf_float+0x142>
    3708:	6822      	ldr	r2, [r4, #0]
    370a:	07d2      	lsls	r2, r2, #31
    370c:	d501      	bpl.n	3712 <_printf_float+0x146>
    370e:	3301      	adds	r3, #1
    3710:	6123      	str	r3, [r4, #16]
    3712:	2323      	movs	r3, #35	; 0x23
    3714:	aa08      	add	r2, sp, #32
    3716:	189b      	adds	r3, r3, r2
    3718:	781b      	ldrb	r3, [r3, #0]
    371a:	2b00      	cmp	r3, #0
    371c:	d0a8      	beq.n	3670 <_printf_float+0xa4>
    371e:	0023      	movs	r3, r4
    3720:	222d      	movs	r2, #45	; 0x2d
    3722:	3343      	adds	r3, #67	; 0x43
    3724:	701a      	strb	r2, [r3, #0]
    3726:	e7a3      	b.n	3670 <_printf_float+0xa4>
    3728:	2f67      	cmp	r7, #103	; 0x67
    372a:	d001      	beq.n	3730 <_printf_float+0x164>
    372c:	2f47      	cmp	r7, #71	; 0x47
    372e:	d1b7      	bne.n	36a0 <_printf_float+0xd4>
    3730:	2a00      	cmp	r2, #0
    3732:	d016      	beq.n	3762 <_printf_float+0x196>
    3734:	990c      	ldr	r1, [sp, #48]	; 0x30
    3736:	a808      	add	r0, sp, #32
    3738:	430b      	orrs	r3, r1
    373a:	2100      	movs	r1, #0
    373c:	9106      	str	r1, [sp, #24]
    373e:	a912      	add	r1, sp, #72	; 0x48
    3740:	9105      	str	r1, [sp, #20]
    3742:	a911      	add	r1, sp, #68	; 0x44
    3744:	9103      	str	r1, [sp, #12]
    3746:	2123      	movs	r1, #35	; 0x23
    3748:	1809      	adds	r1, r1, r0
    374a:	6023      	str	r3, [r4, #0]
    374c:	9301      	str	r3, [sp, #4]
    374e:	9200      	str	r2, [sp, #0]
    3750:	002b      	movs	r3, r5
    3752:	9704      	str	r7, [sp, #16]
    3754:	9102      	str	r1, [sp, #8]
    3756:	0032      	movs	r2, r6
    3758:	9809      	ldr	r0, [sp, #36]	; 0x24
    375a:	f7ff fe9a 	bl	3492 <__cvt>
    375e:	0005      	movs	r5, r0
    3760:	e7ba      	b.n	36d8 <_printf_float+0x10c>
    3762:	2201      	movs	r2, #1
    3764:	e79b      	b.n	369e <_printf_float+0xd2>
    3766:	2f66      	cmp	r7, #102	; 0x66
    3768:	d119      	bne.n	379e <_printf_float+0x1d2>
    376a:	6863      	ldr	r3, [r4, #4]
    376c:	2900      	cmp	r1, #0
    376e:	dd0c      	ble.n	378a <_printf_float+0x1be>
    3770:	6121      	str	r1, [r4, #16]
    3772:	2b00      	cmp	r3, #0
    3774:	d102      	bne.n	377c <_printf_float+0x1b0>
    3776:	6822      	ldr	r2, [r4, #0]
    3778:	07d2      	lsls	r2, r2, #31
    377a:	d502      	bpl.n	3782 <_printf_float+0x1b6>
    377c:	3301      	adds	r3, #1
    377e:	185b      	adds	r3, r3, r1
    3780:	6123      	str	r3, [r4, #16]
    3782:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3784:	2600      	movs	r6, #0
    3786:	65a3      	str	r3, [r4, #88]	; 0x58
    3788:	e7c3      	b.n	3712 <_printf_float+0x146>
    378a:	2b00      	cmp	r3, #0
    378c:	d103      	bne.n	3796 <_printf_float+0x1ca>
    378e:	2201      	movs	r2, #1
    3790:	6821      	ldr	r1, [r4, #0]
    3792:	4211      	tst	r1, r2
    3794:	d000      	beq.n	3798 <_printf_float+0x1cc>
    3796:	1c9a      	adds	r2, r3, #2
    3798:	6122      	str	r2, [r4, #16]
    379a:	e7f2      	b.n	3782 <_printf_float+0x1b6>
    379c:	2767      	movs	r7, #103	; 0x67
    379e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    37a0:	9812      	ldr	r0, [sp, #72]	; 0x48
    37a2:	4283      	cmp	r3, r0
    37a4:	db05      	blt.n	37b2 <_printf_float+0x1e6>
    37a6:	6822      	ldr	r2, [r4, #0]
    37a8:	6123      	str	r3, [r4, #16]
    37aa:	07d2      	lsls	r2, r2, #31
    37ac:	d5e9      	bpl.n	3782 <_printf_float+0x1b6>
    37ae:	3301      	adds	r3, #1
    37b0:	e7e6      	b.n	3780 <_printf_float+0x1b4>
    37b2:	2201      	movs	r2, #1
    37b4:	2b00      	cmp	r3, #0
    37b6:	dc01      	bgt.n	37bc <_printf_float+0x1f0>
    37b8:	1892      	adds	r2, r2, r2
    37ba:	1ad2      	subs	r2, r2, r3
    37bc:	1812      	adds	r2, r2, r0
    37be:	e7eb      	b.n	3798 <_printf_float+0x1cc>
    37c0:	6822      	ldr	r2, [r4, #0]
    37c2:	0553      	lsls	r3, r2, #21
    37c4:	d408      	bmi.n	37d8 <_printf_float+0x20c>
    37c6:	6923      	ldr	r3, [r4, #16]
    37c8:	002a      	movs	r2, r5
    37ca:	990a      	ldr	r1, [sp, #40]	; 0x28
    37cc:	9809      	ldr	r0, [sp, #36]	; 0x24
    37ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    37d0:	47a8      	blx	r5
    37d2:	1c43      	adds	r3, r0, #1
    37d4:	d129      	bne.n	382a <_printf_float+0x25e>
    37d6:	e756      	b.n	3686 <_printf_float+0xba>
    37d8:	2f65      	cmp	r7, #101	; 0x65
    37da:	d800      	bhi.n	37de <_printf_float+0x212>
    37dc:	e0dc      	b.n	3998 <_printf_float+0x3cc>
    37de:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    37e0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    37e2:	2200      	movs	r2, #0
    37e4:	2300      	movs	r3, #0
    37e6:	f002 fcb1 	bl	614c <__aeabi_dcmpeq>
    37ea:	2800      	cmp	r0, #0
    37ec:	d035      	beq.n	385a <_printf_float+0x28e>
    37ee:	2301      	movs	r3, #1
    37f0:	4a35      	ldr	r2, [pc, #212]	; (38c8 <_printf_float+0x2fc>)
    37f2:	990a      	ldr	r1, [sp, #40]	; 0x28
    37f4:	9809      	ldr	r0, [sp, #36]	; 0x24
    37f6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    37f8:	47a8      	blx	r5
    37fa:	1c43      	adds	r3, r0, #1
    37fc:	d100      	bne.n	3800 <_printf_float+0x234>
    37fe:	e742      	b.n	3686 <_printf_float+0xba>
    3800:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3802:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3804:	4293      	cmp	r3, r2
    3806:	db02      	blt.n	380e <_printf_float+0x242>
    3808:	6823      	ldr	r3, [r4, #0]
    380a:	07db      	lsls	r3, r3, #31
    380c:	d50d      	bpl.n	382a <_printf_float+0x25e>
    380e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3810:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3812:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3814:	990a      	ldr	r1, [sp, #40]	; 0x28
    3816:	9809      	ldr	r0, [sp, #36]	; 0x24
    3818:	47a8      	blx	r5
    381a:	2500      	movs	r5, #0
    381c:	1c43      	adds	r3, r0, #1
    381e:	d100      	bne.n	3822 <_printf_float+0x256>
    3820:	e731      	b.n	3686 <_printf_float+0xba>
    3822:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3824:	3b01      	subs	r3, #1
    3826:	429d      	cmp	r5, r3
    3828:	db0b      	blt.n	3842 <_printf_float+0x276>
    382a:	6823      	ldr	r3, [r4, #0]
    382c:	2500      	movs	r5, #0
    382e:	079b      	lsls	r3, r3, #30
    3830:	d500      	bpl.n	3834 <_printf_float+0x268>
    3832:	e0fd      	b.n	3a30 <_printf_float+0x464>
    3834:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3836:	68e0      	ldr	r0, [r4, #12]
    3838:	4298      	cmp	r0, r3
    383a:	db00      	blt.n	383e <_printf_float+0x272>
    383c:	e725      	b.n	368a <_printf_float+0xbe>
    383e:	0018      	movs	r0, r3
    3840:	e723      	b.n	368a <_printf_float+0xbe>
    3842:	0022      	movs	r2, r4
    3844:	2301      	movs	r3, #1
    3846:	321a      	adds	r2, #26
    3848:	990a      	ldr	r1, [sp, #40]	; 0x28
    384a:	9809      	ldr	r0, [sp, #36]	; 0x24
    384c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    384e:	47b0      	blx	r6
    3850:	1c43      	adds	r3, r0, #1
    3852:	d100      	bne.n	3856 <_printf_float+0x28a>
    3854:	e717      	b.n	3686 <_printf_float+0xba>
    3856:	3501      	adds	r5, #1
    3858:	e7e3      	b.n	3822 <_printf_float+0x256>
    385a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    385c:	2b00      	cmp	r3, #0
    385e:	dc35      	bgt.n	38cc <_printf_float+0x300>
    3860:	2301      	movs	r3, #1
    3862:	4a19      	ldr	r2, [pc, #100]	; (38c8 <_printf_float+0x2fc>)
    3864:	990a      	ldr	r1, [sp, #40]	; 0x28
    3866:	9809      	ldr	r0, [sp, #36]	; 0x24
    3868:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    386a:	47b0      	blx	r6
    386c:	1c43      	adds	r3, r0, #1
    386e:	d100      	bne.n	3872 <_printf_float+0x2a6>
    3870:	e709      	b.n	3686 <_printf_float+0xba>
    3872:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3874:	2b00      	cmp	r3, #0
    3876:	d105      	bne.n	3884 <_printf_float+0x2b8>
    3878:	9b12      	ldr	r3, [sp, #72]	; 0x48
    387a:	2b00      	cmp	r3, #0
    387c:	d102      	bne.n	3884 <_printf_float+0x2b8>
    387e:	6823      	ldr	r3, [r4, #0]
    3880:	07db      	lsls	r3, r3, #31
    3882:	d5d2      	bpl.n	382a <_printf_float+0x25e>
    3884:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3888:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    388a:	990a      	ldr	r1, [sp, #40]	; 0x28
    388c:	9809      	ldr	r0, [sp, #36]	; 0x24
    388e:	47b0      	blx	r6
    3890:	2600      	movs	r6, #0
    3892:	1c43      	adds	r3, r0, #1
    3894:	d100      	bne.n	3898 <_printf_float+0x2cc>
    3896:	e6f6      	b.n	3686 <_printf_float+0xba>
    3898:	9b11      	ldr	r3, [sp, #68]	; 0x44
    389a:	425b      	negs	r3, r3
    389c:	429e      	cmp	r6, r3
    389e:	db01      	blt.n	38a4 <_printf_float+0x2d8>
    38a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    38a2:	e791      	b.n	37c8 <_printf_float+0x1fc>
    38a4:	0022      	movs	r2, r4
    38a6:	2301      	movs	r3, #1
    38a8:	321a      	adds	r2, #26
    38aa:	990a      	ldr	r1, [sp, #40]	; 0x28
    38ac:	9809      	ldr	r0, [sp, #36]	; 0x24
    38ae:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    38b0:	47b8      	blx	r7
    38b2:	1c43      	adds	r3, r0, #1
    38b4:	d100      	bne.n	38b8 <_printf_float+0x2ec>
    38b6:	e6e6      	b.n	3686 <_printf_float+0xba>
    38b8:	3601      	adds	r6, #1
    38ba:	e7ed      	b.n	3898 <_printf_float+0x2cc>
    38bc:	7fefffff 	.word	0x7fefffff
    38c0:	00008aa8 	.word	0x00008aa8
    38c4:	00008aa4 	.word	0x00008aa4
    38c8:	00008ab4 	.word	0x00008ab4
    38cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
    38ce:	9e12      	ldr	r6, [sp, #72]	; 0x48
    38d0:	429e      	cmp	r6, r3
    38d2:	dd00      	ble.n	38d6 <_printf_float+0x30a>
    38d4:	001e      	movs	r6, r3
    38d6:	2e00      	cmp	r6, #0
    38d8:	dc35      	bgt.n	3946 <_printf_float+0x37a>
    38da:	2300      	movs	r3, #0
    38dc:	930c      	str	r3, [sp, #48]	; 0x30
    38de:	43f3      	mvns	r3, r6
    38e0:	17db      	asrs	r3, r3, #31
    38e2:	930f      	str	r3, [sp, #60]	; 0x3c
    38e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    38e6:	6da7      	ldr	r7, [r4, #88]	; 0x58
    38e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    38ea:	4033      	ands	r3, r6
    38ec:	1afb      	subs	r3, r7, r3
    38ee:	429a      	cmp	r2, r3
    38f0:	db32      	blt.n	3958 <_printf_float+0x38c>
    38f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    38f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    38f6:	4293      	cmp	r3, r2
    38f8:	db3c      	blt.n	3974 <_printf_float+0x3a8>
    38fa:	6823      	ldr	r3, [r4, #0]
    38fc:	07db      	lsls	r3, r3, #31
    38fe:	d439      	bmi.n	3974 <_printf_float+0x3a8>
    3900:	9e12      	ldr	r6, [sp, #72]	; 0x48
    3902:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3904:	1bf3      	subs	r3, r6, r7
    3906:	1ab6      	subs	r6, r6, r2
    3908:	429e      	cmp	r6, r3
    390a:	dd00      	ble.n	390e <_printf_float+0x342>
    390c:	001e      	movs	r6, r3
    390e:	2e00      	cmp	r6, #0
    3910:	dc39      	bgt.n	3986 <_printf_float+0x3ba>
    3912:	43f7      	mvns	r7, r6
    3914:	2500      	movs	r5, #0
    3916:	17fb      	asrs	r3, r7, #31
    3918:	930c      	str	r3, [sp, #48]	; 0x30
    391a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    391c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    391e:	990c      	ldr	r1, [sp, #48]	; 0x30
    3920:	1a9b      	subs	r3, r3, r2
    3922:	0032      	movs	r2, r6
    3924:	400a      	ands	r2, r1
    3926:	1a9b      	subs	r3, r3, r2
    3928:	429d      	cmp	r5, r3
    392a:	db00      	blt.n	392e <_printf_float+0x362>
    392c:	e77d      	b.n	382a <_printf_float+0x25e>
    392e:	0022      	movs	r2, r4
    3930:	2301      	movs	r3, #1
    3932:	321a      	adds	r2, #26
    3934:	990a      	ldr	r1, [sp, #40]	; 0x28
    3936:	9809      	ldr	r0, [sp, #36]	; 0x24
    3938:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    393a:	47b8      	blx	r7
    393c:	1c43      	adds	r3, r0, #1
    393e:	d100      	bne.n	3942 <_printf_float+0x376>
    3940:	e6a1      	b.n	3686 <_printf_float+0xba>
    3942:	3501      	adds	r5, #1
    3944:	e7e9      	b.n	391a <_printf_float+0x34e>
    3946:	0033      	movs	r3, r6
    3948:	002a      	movs	r2, r5
    394a:	990a      	ldr	r1, [sp, #40]	; 0x28
    394c:	9809      	ldr	r0, [sp, #36]	; 0x24
    394e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3950:	47b8      	blx	r7
    3952:	1c43      	adds	r3, r0, #1
    3954:	d1c1      	bne.n	38da <_printf_float+0x30e>
    3956:	e696      	b.n	3686 <_printf_float+0xba>
    3958:	0022      	movs	r2, r4
    395a:	2301      	movs	r3, #1
    395c:	321a      	adds	r2, #26
    395e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3960:	9809      	ldr	r0, [sp, #36]	; 0x24
    3962:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3964:	47b8      	blx	r7
    3966:	1c43      	adds	r3, r0, #1
    3968:	d100      	bne.n	396c <_printf_float+0x3a0>
    396a:	e68c      	b.n	3686 <_printf_float+0xba>
    396c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    396e:	3301      	adds	r3, #1
    3970:	930c      	str	r3, [sp, #48]	; 0x30
    3972:	e7b7      	b.n	38e4 <_printf_float+0x318>
    3974:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3976:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3978:	990a      	ldr	r1, [sp, #40]	; 0x28
    397a:	9809      	ldr	r0, [sp, #36]	; 0x24
    397c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    397e:	47b0      	blx	r6
    3980:	1c43      	adds	r3, r0, #1
    3982:	d1bd      	bne.n	3900 <_printf_float+0x334>
    3984:	e67f      	b.n	3686 <_printf_float+0xba>
    3986:	19ea      	adds	r2, r5, r7
    3988:	0033      	movs	r3, r6
    398a:	990a      	ldr	r1, [sp, #40]	; 0x28
    398c:	9809      	ldr	r0, [sp, #36]	; 0x24
    398e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3990:	47a8      	blx	r5
    3992:	1c43      	adds	r3, r0, #1
    3994:	d1bd      	bne.n	3912 <_printf_float+0x346>
    3996:	e676      	b.n	3686 <_printf_float+0xba>
    3998:	9b12      	ldr	r3, [sp, #72]	; 0x48
    399a:	2b01      	cmp	r3, #1
    399c:	dc02      	bgt.n	39a4 <_printf_float+0x3d8>
    399e:	2301      	movs	r3, #1
    39a0:	421a      	tst	r2, r3
    39a2:	d038      	beq.n	3a16 <_printf_float+0x44a>
    39a4:	2301      	movs	r3, #1
    39a6:	002a      	movs	r2, r5
    39a8:	990a      	ldr	r1, [sp, #40]	; 0x28
    39aa:	9809      	ldr	r0, [sp, #36]	; 0x24
    39ac:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    39ae:	47b8      	blx	r7
    39b0:	1c43      	adds	r3, r0, #1
    39b2:	d100      	bne.n	39b6 <_printf_float+0x3ea>
    39b4:	e667      	b.n	3686 <_printf_float+0xba>
    39b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    39b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    39ba:	990a      	ldr	r1, [sp, #40]	; 0x28
    39bc:	9809      	ldr	r0, [sp, #36]	; 0x24
    39be:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    39c0:	47b8      	blx	r7
    39c2:	1c43      	adds	r3, r0, #1
    39c4:	d100      	bne.n	39c8 <_printf_float+0x3fc>
    39c6:	e65e      	b.n	3686 <_printf_float+0xba>
    39c8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    39ca:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    39cc:	2200      	movs	r2, #0
    39ce:	2300      	movs	r3, #0
    39d0:	f002 fbbc 	bl	614c <__aeabi_dcmpeq>
    39d4:	2800      	cmp	r0, #0
    39d6:	d008      	beq.n	39ea <_printf_float+0x41e>
    39d8:	2500      	movs	r5, #0
    39da:	9b12      	ldr	r3, [sp, #72]	; 0x48
    39dc:	3b01      	subs	r3, #1
    39de:	429d      	cmp	r5, r3
    39e0:	db0d      	blt.n	39fe <_printf_float+0x432>
    39e2:	0022      	movs	r2, r4
    39e4:	0033      	movs	r3, r6
    39e6:	3250      	adds	r2, #80	; 0x50
    39e8:	e6ef      	b.n	37ca <_printf_float+0x1fe>
    39ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
    39ec:	1c6a      	adds	r2, r5, #1
    39ee:	3b01      	subs	r3, #1
    39f0:	990a      	ldr	r1, [sp, #40]	; 0x28
    39f2:	9809      	ldr	r0, [sp, #36]	; 0x24
    39f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    39f6:	47a8      	blx	r5
    39f8:	1c43      	adds	r3, r0, #1
    39fa:	d1f2      	bne.n	39e2 <_printf_float+0x416>
    39fc:	e643      	b.n	3686 <_printf_float+0xba>
    39fe:	0022      	movs	r2, r4
    3a00:	2301      	movs	r3, #1
    3a02:	321a      	adds	r2, #26
    3a04:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a06:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a08:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3a0a:	47b8      	blx	r7
    3a0c:	1c43      	adds	r3, r0, #1
    3a0e:	d100      	bne.n	3a12 <_printf_float+0x446>
    3a10:	e639      	b.n	3686 <_printf_float+0xba>
    3a12:	3501      	adds	r5, #1
    3a14:	e7e1      	b.n	39da <_printf_float+0x40e>
    3a16:	002a      	movs	r2, r5
    3a18:	e7ea      	b.n	39f0 <_printf_float+0x424>
    3a1a:	0022      	movs	r2, r4
    3a1c:	2301      	movs	r3, #1
    3a1e:	3219      	adds	r2, #25
    3a20:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a22:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a24:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3a26:	47b0      	blx	r6
    3a28:	1c43      	adds	r3, r0, #1
    3a2a:	d100      	bne.n	3a2e <_printf_float+0x462>
    3a2c:	e62b      	b.n	3686 <_printf_float+0xba>
    3a2e:	3501      	adds	r5, #1
    3a30:	68e3      	ldr	r3, [r4, #12]
    3a32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3a34:	1a9b      	subs	r3, r3, r2
    3a36:	429d      	cmp	r5, r3
    3a38:	dbef      	blt.n	3a1a <_printf_float+0x44e>
    3a3a:	e6fb      	b.n	3834 <_printf_float+0x268>
    3a3c:	0032      	movs	r2, r6
    3a3e:	002b      	movs	r3, r5
    3a40:	0030      	movs	r0, r6
    3a42:	0029      	movs	r1, r5
    3a44:	f004 fde0 	bl	8608 <__aeabi_dcmpun>
    3a48:	2800      	cmp	r0, #0
    3a4a:	d100      	bne.n	3a4e <_printf_float+0x482>
    3a4c:	e621      	b.n	3692 <_printf_float+0xc6>
    3a4e:	4d03      	ldr	r5, [pc, #12]	; (3a5c <_printf_float+0x490>)
    3a50:	2f47      	cmp	r7, #71	; 0x47
    3a52:	d900      	bls.n	3a56 <_printf_float+0x48a>
    3a54:	e605      	b.n	3662 <_printf_float+0x96>
    3a56:	4d02      	ldr	r5, [pc, #8]	; (3a60 <_printf_float+0x494>)
    3a58:	e603      	b.n	3662 <_printf_float+0x96>
    3a5a:	46c0      	nop			; (mov r8, r8)
    3a5c:	00008ab0 	.word	0x00008ab0
    3a60:	00008aac 	.word	0x00008aac

00003a64 <_printf_common>:
    3a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3a66:	0015      	movs	r5, r2
    3a68:	9301      	str	r3, [sp, #4]
    3a6a:	688a      	ldr	r2, [r1, #8]
    3a6c:	690b      	ldr	r3, [r1, #16]
    3a6e:	9000      	str	r0, [sp, #0]
    3a70:	000c      	movs	r4, r1
    3a72:	4293      	cmp	r3, r2
    3a74:	da00      	bge.n	3a78 <_printf_common+0x14>
    3a76:	0013      	movs	r3, r2
    3a78:	0022      	movs	r2, r4
    3a7a:	602b      	str	r3, [r5, #0]
    3a7c:	3243      	adds	r2, #67	; 0x43
    3a7e:	7812      	ldrb	r2, [r2, #0]
    3a80:	2a00      	cmp	r2, #0
    3a82:	d001      	beq.n	3a88 <_printf_common+0x24>
    3a84:	3301      	adds	r3, #1
    3a86:	602b      	str	r3, [r5, #0]
    3a88:	6823      	ldr	r3, [r4, #0]
    3a8a:	069b      	lsls	r3, r3, #26
    3a8c:	d502      	bpl.n	3a94 <_printf_common+0x30>
    3a8e:	682b      	ldr	r3, [r5, #0]
    3a90:	3302      	adds	r3, #2
    3a92:	602b      	str	r3, [r5, #0]
    3a94:	2706      	movs	r7, #6
    3a96:	6823      	ldr	r3, [r4, #0]
    3a98:	401f      	ands	r7, r3
    3a9a:	d027      	beq.n	3aec <_printf_common+0x88>
    3a9c:	0023      	movs	r3, r4
    3a9e:	3343      	adds	r3, #67	; 0x43
    3aa0:	781b      	ldrb	r3, [r3, #0]
    3aa2:	1e5a      	subs	r2, r3, #1
    3aa4:	4193      	sbcs	r3, r2
    3aa6:	6822      	ldr	r2, [r4, #0]
    3aa8:	0692      	lsls	r2, r2, #26
    3aaa:	d430      	bmi.n	3b0e <_printf_common+0xaa>
    3aac:	0022      	movs	r2, r4
    3aae:	9901      	ldr	r1, [sp, #4]
    3ab0:	3243      	adds	r2, #67	; 0x43
    3ab2:	9800      	ldr	r0, [sp, #0]
    3ab4:	9e08      	ldr	r6, [sp, #32]
    3ab6:	47b0      	blx	r6
    3ab8:	1c43      	adds	r3, r0, #1
    3aba:	d025      	beq.n	3b08 <_printf_common+0xa4>
    3abc:	2306      	movs	r3, #6
    3abe:	6820      	ldr	r0, [r4, #0]
    3ac0:	682a      	ldr	r2, [r5, #0]
    3ac2:	68e1      	ldr	r1, [r4, #12]
    3ac4:	4003      	ands	r3, r0
    3ac6:	2500      	movs	r5, #0
    3ac8:	2b04      	cmp	r3, #4
    3aca:	d103      	bne.n	3ad4 <_printf_common+0x70>
    3acc:	1a8d      	subs	r5, r1, r2
    3ace:	43eb      	mvns	r3, r5
    3ad0:	17db      	asrs	r3, r3, #31
    3ad2:	401d      	ands	r5, r3
    3ad4:	68a3      	ldr	r3, [r4, #8]
    3ad6:	6922      	ldr	r2, [r4, #16]
    3ad8:	4293      	cmp	r3, r2
    3ada:	dd01      	ble.n	3ae0 <_printf_common+0x7c>
    3adc:	1a9b      	subs	r3, r3, r2
    3ade:	18ed      	adds	r5, r5, r3
    3ae0:	2700      	movs	r7, #0
    3ae2:	42bd      	cmp	r5, r7
    3ae4:	d120      	bne.n	3b28 <_printf_common+0xc4>
    3ae6:	2000      	movs	r0, #0
    3ae8:	e010      	b.n	3b0c <_printf_common+0xa8>
    3aea:	3701      	adds	r7, #1
    3aec:	68e3      	ldr	r3, [r4, #12]
    3aee:	682a      	ldr	r2, [r5, #0]
    3af0:	1a9b      	subs	r3, r3, r2
    3af2:	429f      	cmp	r7, r3
    3af4:	dad2      	bge.n	3a9c <_printf_common+0x38>
    3af6:	0022      	movs	r2, r4
    3af8:	2301      	movs	r3, #1
    3afa:	3219      	adds	r2, #25
    3afc:	9901      	ldr	r1, [sp, #4]
    3afe:	9800      	ldr	r0, [sp, #0]
    3b00:	9e08      	ldr	r6, [sp, #32]
    3b02:	47b0      	blx	r6
    3b04:	1c43      	adds	r3, r0, #1
    3b06:	d1f0      	bne.n	3aea <_printf_common+0x86>
    3b08:	2001      	movs	r0, #1
    3b0a:	4240      	negs	r0, r0
    3b0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3b0e:	2030      	movs	r0, #48	; 0x30
    3b10:	18e1      	adds	r1, r4, r3
    3b12:	3143      	adds	r1, #67	; 0x43
    3b14:	7008      	strb	r0, [r1, #0]
    3b16:	0021      	movs	r1, r4
    3b18:	1c5a      	adds	r2, r3, #1
    3b1a:	3145      	adds	r1, #69	; 0x45
    3b1c:	7809      	ldrb	r1, [r1, #0]
    3b1e:	18a2      	adds	r2, r4, r2
    3b20:	3243      	adds	r2, #67	; 0x43
    3b22:	3302      	adds	r3, #2
    3b24:	7011      	strb	r1, [r2, #0]
    3b26:	e7c1      	b.n	3aac <_printf_common+0x48>
    3b28:	0022      	movs	r2, r4
    3b2a:	2301      	movs	r3, #1
    3b2c:	321a      	adds	r2, #26
    3b2e:	9901      	ldr	r1, [sp, #4]
    3b30:	9800      	ldr	r0, [sp, #0]
    3b32:	9e08      	ldr	r6, [sp, #32]
    3b34:	47b0      	blx	r6
    3b36:	1c43      	adds	r3, r0, #1
    3b38:	d0e6      	beq.n	3b08 <_printf_common+0xa4>
    3b3a:	3701      	adds	r7, #1
    3b3c:	e7d1      	b.n	3ae2 <_printf_common+0x7e>
	...

00003b40 <_printf_i>:
    3b40:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b42:	b08b      	sub	sp, #44	; 0x2c
    3b44:	9206      	str	r2, [sp, #24]
    3b46:	000a      	movs	r2, r1
    3b48:	3243      	adds	r2, #67	; 0x43
    3b4a:	9307      	str	r3, [sp, #28]
    3b4c:	9005      	str	r0, [sp, #20]
    3b4e:	9204      	str	r2, [sp, #16]
    3b50:	7e0a      	ldrb	r2, [r1, #24]
    3b52:	000c      	movs	r4, r1
    3b54:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3b56:	2a6e      	cmp	r2, #110	; 0x6e
    3b58:	d100      	bne.n	3b5c <_printf_i+0x1c>
    3b5a:	e08f      	b.n	3c7c <_printf_i+0x13c>
    3b5c:	d817      	bhi.n	3b8e <_printf_i+0x4e>
    3b5e:	2a63      	cmp	r2, #99	; 0x63
    3b60:	d02c      	beq.n	3bbc <_printf_i+0x7c>
    3b62:	d808      	bhi.n	3b76 <_printf_i+0x36>
    3b64:	2a00      	cmp	r2, #0
    3b66:	d100      	bne.n	3b6a <_printf_i+0x2a>
    3b68:	e099      	b.n	3c9e <_printf_i+0x15e>
    3b6a:	2a58      	cmp	r2, #88	; 0x58
    3b6c:	d054      	beq.n	3c18 <_printf_i+0xd8>
    3b6e:	0026      	movs	r6, r4
    3b70:	3642      	adds	r6, #66	; 0x42
    3b72:	7032      	strb	r2, [r6, #0]
    3b74:	e029      	b.n	3bca <_printf_i+0x8a>
    3b76:	2a64      	cmp	r2, #100	; 0x64
    3b78:	d001      	beq.n	3b7e <_printf_i+0x3e>
    3b7a:	2a69      	cmp	r2, #105	; 0x69
    3b7c:	d1f7      	bne.n	3b6e <_printf_i+0x2e>
    3b7e:	6821      	ldr	r1, [r4, #0]
    3b80:	681a      	ldr	r2, [r3, #0]
    3b82:	0608      	lsls	r0, r1, #24
    3b84:	d523      	bpl.n	3bce <_printf_i+0x8e>
    3b86:	1d11      	adds	r1, r2, #4
    3b88:	6019      	str	r1, [r3, #0]
    3b8a:	6815      	ldr	r5, [r2, #0]
    3b8c:	e025      	b.n	3bda <_printf_i+0x9a>
    3b8e:	2a73      	cmp	r2, #115	; 0x73
    3b90:	d100      	bne.n	3b94 <_printf_i+0x54>
    3b92:	e088      	b.n	3ca6 <_printf_i+0x166>
    3b94:	d808      	bhi.n	3ba8 <_printf_i+0x68>
    3b96:	2a6f      	cmp	r2, #111	; 0x6f
    3b98:	d029      	beq.n	3bee <_printf_i+0xae>
    3b9a:	2a70      	cmp	r2, #112	; 0x70
    3b9c:	d1e7      	bne.n	3b6e <_printf_i+0x2e>
    3b9e:	2220      	movs	r2, #32
    3ba0:	6809      	ldr	r1, [r1, #0]
    3ba2:	430a      	orrs	r2, r1
    3ba4:	6022      	str	r2, [r4, #0]
    3ba6:	e003      	b.n	3bb0 <_printf_i+0x70>
    3ba8:	2a75      	cmp	r2, #117	; 0x75
    3baa:	d020      	beq.n	3bee <_printf_i+0xae>
    3bac:	2a78      	cmp	r2, #120	; 0x78
    3bae:	d1de      	bne.n	3b6e <_printf_i+0x2e>
    3bb0:	0022      	movs	r2, r4
    3bb2:	2178      	movs	r1, #120	; 0x78
    3bb4:	3245      	adds	r2, #69	; 0x45
    3bb6:	7011      	strb	r1, [r2, #0]
    3bb8:	4a6c      	ldr	r2, [pc, #432]	; (3d6c <_printf_i+0x22c>)
    3bba:	e030      	b.n	3c1e <_printf_i+0xde>
    3bbc:	000e      	movs	r6, r1
    3bbe:	681a      	ldr	r2, [r3, #0]
    3bc0:	3642      	adds	r6, #66	; 0x42
    3bc2:	1d11      	adds	r1, r2, #4
    3bc4:	6019      	str	r1, [r3, #0]
    3bc6:	6813      	ldr	r3, [r2, #0]
    3bc8:	7033      	strb	r3, [r6, #0]
    3bca:	2301      	movs	r3, #1
    3bcc:	e079      	b.n	3cc2 <_printf_i+0x182>
    3bce:	0649      	lsls	r1, r1, #25
    3bd0:	d5d9      	bpl.n	3b86 <_printf_i+0x46>
    3bd2:	1d11      	adds	r1, r2, #4
    3bd4:	6019      	str	r1, [r3, #0]
    3bd6:	2300      	movs	r3, #0
    3bd8:	5ed5      	ldrsh	r5, [r2, r3]
    3bda:	2d00      	cmp	r5, #0
    3bdc:	da03      	bge.n	3be6 <_printf_i+0xa6>
    3bde:	232d      	movs	r3, #45	; 0x2d
    3be0:	9a04      	ldr	r2, [sp, #16]
    3be2:	426d      	negs	r5, r5
    3be4:	7013      	strb	r3, [r2, #0]
    3be6:	4b62      	ldr	r3, [pc, #392]	; (3d70 <_printf_i+0x230>)
    3be8:	270a      	movs	r7, #10
    3bea:	9303      	str	r3, [sp, #12]
    3bec:	e02f      	b.n	3c4e <_printf_i+0x10e>
    3bee:	6820      	ldr	r0, [r4, #0]
    3bf0:	6819      	ldr	r1, [r3, #0]
    3bf2:	0605      	lsls	r5, r0, #24
    3bf4:	d503      	bpl.n	3bfe <_printf_i+0xbe>
    3bf6:	1d08      	adds	r0, r1, #4
    3bf8:	6018      	str	r0, [r3, #0]
    3bfa:	680d      	ldr	r5, [r1, #0]
    3bfc:	e005      	b.n	3c0a <_printf_i+0xca>
    3bfe:	0640      	lsls	r0, r0, #25
    3c00:	d5f9      	bpl.n	3bf6 <_printf_i+0xb6>
    3c02:	680d      	ldr	r5, [r1, #0]
    3c04:	1d08      	adds	r0, r1, #4
    3c06:	6018      	str	r0, [r3, #0]
    3c08:	b2ad      	uxth	r5, r5
    3c0a:	4b59      	ldr	r3, [pc, #356]	; (3d70 <_printf_i+0x230>)
    3c0c:	2708      	movs	r7, #8
    3c0e:	9303      	str	r3, [sp, #12]
    3c10:	2a6f      	cmp	r2, #111	; 0x6f
    3c12:	d018      	beq.n	3c46 <_printf_i+0x106>
    3c14:	270a      	movs	r7, #10
    3c16:	e016      	b.n	3c46 <_printf_i+0x106>
    3c18:	3145      	adds	r1, #69	; 0x45
    3c1a:	700a      	strb	r2, [r1, #0]
    3c1c:	4a54      	ldr	r2, [pc, #336]	; (3d70 <_printf_i+0x230>)
    3c1e:	9203      	str	r2, [sp, #12]
    3c20:	681a      	ldr	r2, [r3, #0]
    3c22:	6821      	ldr	r1, [r4, #0]
    3c24:	1d10      	adds	r0, r2, #4
    3c26:	6018      	str	r0, [r3, #0]
    3c28:	6815      	ldr	r5, [r2, #0]
    3c2a:	0608      	lsls	r0, r1, #24
    3c2c:	d522      	bpl.n	3c74 <_printf_i+0x134>
    3c2e:	07cb      	lsls	r3, r1, #31
    3c30:	d502      	bpl.n	3c38 <_printf_i+0xf8>
    3c32:	2320      	movs	r3, #32
    3c34:	4319      	orrs	r1, r3
    3c36:	6021      	str	r1, [r4, #0]
    3c38:	2710      	movs	r7, #16
    3c3a:	2d00      	cmp	r5, #0
    3c3c:	d103      	bne.n	3c46 <_printf_i+0x106>
    3c3e:	2320      	movs	r3, #32
    3c40:	6822      	ldr	r2, [r4, #0]
    3c42:	439a      	bics	r2, r3
    3c44:	6022      	str	r2, [r4, #0]
    3c46:	0023      	movs	r3, r4
    3c48:	2200      	movs	r2, #0
    3c4a:	3343      	adds	r3, #67	; 0x43
    3c4c:	701a      	strb	r2, [r3, #0]
    3c4e:	6863      	ldr	r3, [r4, #4]
    3c50:	60a3      	str	r3, [r4, #8]
    3c52:	2b00      	cmp	r3, #0
    3c54:	db5c      	blt.n	3d10 <_printf_i+0x1d0>
    3c56:	2204      	movs	r2, #4
    3c58:	6821      	ldr	r1, [r4, #0]
    3c5a:	4391      	bics	r1, r2
    3c5c:	6021      	str	r1, [r4, #0]
    3c5e:	2d00      	cmp	r5, #0
    3c60:	d158      	bne.n	3d14 <_printf_i+0x1d4>
    3c62:	9e04      	ldr	r6, [sp, #16]
    3c64:	2b00      	cmp	r3, #0
    3c66:	d064      	beq.n	3d32 <_printf_i+0x1f2>
    3c68:	0026      	movs	r6, r4
    3c6a:	9b03      	ldr	r3, [sp, #12]
    3c6c:	3642      	adds	r6, #66	; 0x42
    3c6e:	781b      	ldrb	r3, [r3, #0]
    3c70:	7033      	strb	r3, [r6, #0]
    3c72:	e05e      	b.n	3d32 <_printf_i+0x1f2>
    3c74:	0648      	lsls	r0, r1, #25
    3c76:	d5da      	bpl.n	3c2e <_printf_i+0xee>
    3c78:	b2ad      	uxth	r5, r5
    3c7a:	e7d8      	b.n	3c2e <_printf_i+0xee>
    3c7c:	6809      	ldr	r1, [r1, #0]
    3c7e:	681a      	ldr	r2, [r3, #0]
    3c80:	0608      	lsls	r0, r1, #24
    3c82:	d505      	bpl.n	3c90 <_printf_i+0x150>
    3c84:	1d11      	adds	r1, r2, #4
    3c86:	6019      	str	r1, [r3, #0]
    3c88:	6813      	ldr	r3, [r2, #0]
    3c8a:	6962      	ldr	r2, [r4, #20]
    3c8c:	601a      	str	r2, [r3, #0]
    3c8e:	e006      	b.n	3c9e <_printf_i+0x15e>
    3c90:	0649      	lsls	r1, r1, #25
    3c92:	d5f7      	bpl.n	3c84 <_printf_i+0x144>
    3c94:	1d11      	adds	r1, r2, #4
    3c96:	6019      	str	r1, [r3, #0]
    3c98:	6813      	ldr	r3, [r2, #0]
    3c9a:	8aa2      	ldrh	r2, [r4, #20]
    3c9c:	801a      	strh	r2, [r3, #0]
    3c9e:	2300      	movs	r3, #0
    3ca0:	9e04      	ldr	r6, [sp, #16]
    3ca2:	6123      	str	r3, [r4, #16]
    3ca4:	e054      	b.n	3d50 <_printf_i+0x210>
    3ca6:	681a      	ldr	r2, [r3, #0]
    3ca8:	1d11      	adds	r1, r2, #4
    3caa:	6019      	str	r1, [r3, #0]
    3cac:	6816      	ldr	r6, [r2, #0]
    3cae:	2100      	movs	r1, #0
    3cb0:	6862      	ldr	r2, [r4, #4]
    3cb2:	0030      	movs	r0, r6
    3cb4:	f001 fae2 	bl	527c <memchr>
    3cb8:	2800      	cmp	r0, #0
    3cba:	d001      	beq.n	3cc0 <_printf_i+0x180>
    3cbc:	1b80      	subs	r0, r0, r6
    3cbe:	6060      	str	r0, [r4, #4]
    3cc0:	6863      	ldr	r3, [r4, #4]
    3cc2:	6123      	str	r3, [r4, #16]
    3cc4:	2300      	movs	r3, #0
    3cc6:	9a04      	ldr	r2, [sp, #16]
    3cc8:	7013      	strb	r3, [r2, #0]
    3cca:	e041      	b.n	3d50 <_printf_i+0x210>
    3ccc:	6923      	ldr	r3, [r4, #16]
    3cce:	0032      	movs	r2, r6
    3cd0:	9906      	ldr	r1, [sp, #24]
    3cd2:	9805      	ldr	r0, [sp, #20]
    3cd4:	9d07      	ldr	r5, [sp, #28]
    3cd6:	47a8      	blx	r5
    3cd8:	1c43      	adds	r3, r0, #1
    3cda:	d043      	beq.n	3d64 <_printf_i+0x224>
    3cdc:	6823      	ldr	r3, [r4, #0]
    3cde:	2500      	movs	r5, #0
    3ce0:	079b      	lsls	r3, r3, #30
    3ce2:	d40f      	bmi.n	3d04 <_printf_i+0x1c4>
    3ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3ce6:	68e0      	ldr	r0, [r4, #12]
    3ce8:	4298      	cmp	r0, r3
    3cea:	da3d      	bge.n	3d68 <_printf_i+0x228>
    3cec:	0018      	movs	r0, r3
    3cee:	e03b      	b.n	3d68 <_printf_i+0x228>
    3cf0:	0022      	movs	r2, r4
    3cf2:	2301      	movs	r3, #1
    3cf4:	3219      	adds	r2, #25
    3cf6:	9906      	ldr	r1, [sp, #24]
    3cf8:	9805      	ldr	r0, [sp, #20]
    3cfa:	9e07      	ldr	r6, [sp, #28]
    3cfc:	47b0      	blx	r6
    3cfe:	1c43      	adds	r3, r0, #1
    3d00:	d030      	beq.n	3d64 <_printf_i+0x224>
    3d02:	3501      	adds	r5, #1
    3d04:	68e3      	ldr	r3, [r4, #12]
    3d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3d08:	1a9b      	subs	r3, r3, r2
    3d0a:	429d      	cmp	r5, r3
    3d0c:	dbf0      	blt.n	3cf0 <_printf_i+0x1b0>
    3d0e:	e7e9      	b.n	3ce4 <_printf_i+0x1a4>
    3d10:	2d00      	cmp	r5, #0
    3d12:	d0a9      	beq.n	3c68 <_printf_i+0x128>
    3d14:	9e04      	ldr	r6, [sp, #16]
    3d16:	0028      	movs	r0, r5
    3d18:	0039      	movs	r1, r7
    3d1a:	f002 f917 	bl	5f4c <__aeabi_uidivmod>
    3d1e:	9b03      	ldr	r3, [sp, #12]
    3d20:	3e01      	subs	r6, #1
    3d22:	5c5b      	ldrb	r3, [r3, r1]
    3d24:	0028      	movs	r0, r5
    3d26:	7033      	strb	r3, [r6, #0]
    3d28:	0039      	movs	r1, r7
    3d2a:	f002 f889 	bl	5e40 <__udivsi3>
    3d2e:	1e05      	subs	r5, r0, #0
    3d30:	d1f1      	bne.n	3d16 <_printf_i+0x1d6>
    3d32:	2f08      	cmp	r7, #8
    3d34:	d109      	bne.n	3d4a <_printf_i+0x20a>
    3d36:	6823      	ldr	r3, [r4, #0]
    3d38:	07db      	lsls	r3, r3, #31
    3d3a:	d506      	bpl.n	3d4a <_printf_i+0x20a>
    3d3c:	6863      	ldr	r3, [r4, #4]
    3d3e:	6922      	ldr	r2, [r4, #16]
    3d40:	4293      	cmp	r3, r2
    3d42:	dc02      	bgt.n	3d4a <_printf_i+0x20a>
    3d44:	2330      	movs	r3, #48	; 0x30
    3d46:	3e01      	subs	r6, #1
    3d48:	7033      	strb	r3, [r6, #0]
    3d4a:	9b04      	ldr	r3, [sp, #16]
    3d4c:	1b9b      	subs	r3, r3, r6
    3d4e:	6123      	str	r3, [r4, #16]
    3d50:	9b07      	ldr	r3, [sp, #28]
    3d52:	aa09      	add	r2, sp, #36	; 0x24
    3d54:	9300      	str	r3, [sp, #0]
    3d56:	0021      	movs	r1, r4
    3d58:	9b06      	ldr	r3, [sp, #24]
    3d5a:	9805      	ldr	r0, [sp, #20]
    3d5c:	f7ff fe82 	bl	3a64 <_printf_common>
    3d60:	1c43      	adds	r3, r0, #1
    3d62:	d1b3      	bne.n	3ccc <_printf_i+0x18c>
    3d64:	2001      	movs	r0, #1
    3d66:	4240      	negs	r0, r0
    3d68:	b00b      	add	sp, #44	; 0x2c
    3d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d6c:	00008ac7 	.word	0x00008ac7
    3d70:	00008ab6 	.word	0x00008ab6

00003d74 <iprintf>:
    3d74:	b40f      	push	{r0, r1, r2, r3}
    3d76:	4b0b      	ldr	r3, [pc, #44]	; (3da4 <iprintf+0x30>)
    3d78:	b513      	push	{r0, r1, r4, lr}
    3d7a:	681c      	ldr	r4, [r3, #0]
    3d7c:	2c00      	cmp	r4, #0
    3d7e:	d005      	beq.n	3d8c <iprintf+0x18>
    3d80:	69a3      	ldr	r3, [r4, #24]
    3d82:	2b00      	cmp	r3, #0
    3d84:	d102      	bne.n	3d8c <iprintf+0x18>
    3d86:	0020      	movs	r0, r4
    3d88:	f001 f966 	bl	5058 <__sinit>
    3d8c:	ab05      	add	r3, sp, #20
    3d8e:	9a04      	ldr	r2, [sp, #16]
    3d90:	68a1      	ldr	r1, [r4, #8]
    3d92:	0020      	movs	r0, r4
    3d94:	9301      	str	r3, [sp, #4]
    3d96:	f001 fe3d 	bl	5a14 <_vfiprintf_r>
    3d9a:	bc16      	pop	{r1, r2, r4}
    3d9c:	bc08      	pop	{r3}
    3d9e:	b004      	add	sp, #16
    3da0:	4718      	bx	r3
    3da2:	46c0      	nop			; (mov r8, r8)
    3da4:	2000000c 	.word	0x2000000c

00003da8 <_puts_r>:
    3da8:	b570      	push	{r4, r5, r6, lr}
    3daa:	0005      	movs	r5, r0
    3dac:	000e      	movs	r6, r1
    3dae:	2800      	cmp	r0, #0
    3db0:	d004      	beq.n	3dbc <_puts_r+0x14>
    3db2:	6983      	ldr	r3, [r0, #24]
    3db4:	2b00      	cmp	r3, #0
    3db6:	d101      	bne.n	3dbc <_puts_r+0x14>
    3db8:	f001 f94e 	bl	5058 <__sinit>
    3dbc:	69ab      	ldr	r3, [r5, #24]
    3dbe:	68ac      	ldr	r4, [r5, #8]
    3dc0:	2b00      	cmp	r3, #0
    3dc2:	d102      	bne.n	3dca <_puts_r+0x22>
    3dc4:	0028      	movs	r0, r5
    3dc6:	f001 f947 	bl	5058 <__sinit>
    3dca:	4b24      	ldr	r3, [pc, #144]	; (3e5c <_puts_r+0xb4>)
    3dcc:	429c      	cmp	r4, r3
    3dce:	d10f      	bne.n	3df0 <_puts_r+0x48>
    3dd0:	686c      	ldr	r4, [r5, #4]
    3dd2:	89a3      	ldrh	r3, [r4, #12]
    3dd4:	071b      	lsls	r3, r3, #28
    3dd6:	d502      	bpl.n	3dde <_puts_r+0x36>
    3dd8:	6923      	ldr	r3, [r4, #16]
    3dda:	2b00      	cmp	r3, #0
    3ddc:	d120      	bne.n	3e20 <_puts_r+0x78>
    3dde:	0021      	movs	r1, r4
    3de0:	0028      	movs	r0, r5
    3de2:	f000 f95f 	bl	40a4 <__swsetup_r>
    3de6:	2800      	cmp	r0, #0
    3de8:	d01a      	beq.n	3e20 <_puts_r+0x78>
    3dea:	2001      	movs	r0, #1
    3dec:	4240      	negs	r0, r0
    3dee:	bd70      	pop	{r4, r5, r6, pc}
    3df0:	4b1b      	ldr	r3, [pc, #108]	; (3e60 <_puts_r+0xb8>)
    3df2:	429c      	cmp	r4, r3
    3df4:	d101      	bne.n	3dfa <_puts_r+0x52>
    3df6:	68ac      	ldr	r4, [r5, #8]
    3df8:	e7eb      	b.n	3dd2 <_puts_r+0x2a>
    3dfa:	4b1a      	ldr	r3, [pc, #104]	; (3e64 <_puts_r+0xbc>)
    3dfc:	429c      	cmp	r4, r3
    3dfe:	d1e8      	bne.n	3dd2 <_puts_r+0x2a>
    3e00:	68ec      	ldr	r4, [r5, #12]
    3e02:	e7e6      	b.n	3dd2 <_puts_r+0x2a>
    3e04:	3b01      	subs	r3, #1
    3e06:	3601      	adds	r6, #1
    3e08:	60a3      	str	r3, [r4, #8]
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	da04      	bge.n	3e18 <_puts_r+0x70>
    3e0e:	69a2      	ldr	r2, [r4, #24]
    3e10:	4293      	cmp	r3, r2
    3e12:	db16      	blt.n	3e42 <_puts_r+0x9a>
    3e14:	290a      	cmp	r1, #10
    3e16:	d014      	beq.n	3e42 <_puts_r+0x9a>
    3e18:	6823      	ldr	r3, [r4, #0]
    3e1a:	1c5a      	adds	r2, r3, #1
    3e1c:	6022      	str	r2, [r4, #0]
    3e1e:	7019      	strb	r1, [r3, #0]
    3e20:	7831      	ldrb	r1, [r6, #0]
    3e22:	68a3      	ldr	r3, [r4, #8]
    3e24:	2900      	cmp	r1, #0
    3e26:	d1ed      	bne.n	3e04 <_puts_r+0x5c>
    3e28:	3b01      	subs	r3, #1
    3e2a:	60a3      	str	r3, [r4, #8]
    3e2c:	2b00      	cmp	r3, #0
    3e2e:	da0f      	bge.n	3e50 <_puts_r+0xa8>
    3e30:	0022      	movs	r2, r4
    3e32:	310a      	adds	r1, #10
    3e34:	0028      	movs	r0, r5
    3e36:	f000 f8df 	bl	3ff8 <__swbuf_r>
    3e3a:	1c43      	adds	r3, r0, #1
    3e3c:	d0d5      	beq.n	3dea <_puts_r+0x42>
    3e3e:	200a      	movs	r0, #10
    3e40:	e7d5      	b.n	3dee <_puts_r+0x46>
    3e42:	0022      	movs	r2, r4
    3e44:	0028      	movs	r0, r5
    3e46:	f000 f8d7 	bl	3ff8 <__swbuf_r>
    3e4a:	1c43      	adds	r3, r0, #1
    3e4c:	d1e8      	bne.n	3e20 <_puts_r+0x78>
    3e4e:	e7cc      	b.n	3dea <_puts_r+0x42>
    3e50:	200a      	movs	r0, #10
    3e52:	6823      	ldr	r3, [r4, #0]
    3e54:	1c5a      	adds	r2, r3, #1
    3e56:	6022      	str	r2, [r4, #0]
    3e58:	7018      	strb	r0, [r3, #0]
    3e5a:	e7c8      	b.n	3dee <_puts_r+0x46>
    3e5c:	00008b08 	.word	0x00008b08
    3e60:	00008b28 	.word	0x00008b28
    3e64:	00008ae8 	.word	0x00008ae8

00003e68 <puts>:
    3e68:	b510      	push	{r4, lr}
    3e6a:	4b03      	ldr	r3, [pc, #12]	; (3e78 <puts+0x10>)
    3e6c:	0001      	movs	r1, r0
    3e6e:	6818      	ldr	r0, [r3, #0]
    3e70:	f7ff ff9a 	bl	3da8 <_puts_r>
    3e74:	bd10      	pop	{r4, pc}
    3e76:	46c0      	nop			; (mov r8, r8)
    3e78:	2000000c 	.word	0x2000000c

00003e7c <setbuf>:
    3e7c:	424a      	negs	r2, r1
    3e7e:	414a      	adcs	r2, r1
    3e80:	2380      	movs	r3, #128	; 0x80
    3e82:	b510      	push	{r4, lr}
    3e84:	0052      	lsls	r2, r2, #1
    3e86:	00db      	lsls	r3, r3, #3
    3e88:	f000 f802 	bl	3e90 <setvbuf>
    3e8c:	bd10      	pop	{r4, pc}
	...

00003e90 <setvbuf>:
    3e90:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e92:	001d      	movs	r5, r3
    3e94:	4b4f      	ldr	r3, [pc, #316]	; (3fd4 <setvbuf+0x144>)
    3e96:	b085      	sub	sp, #20
    3e98:	681e      	ldr	r6, [r3, #0]
    3e9a:	0004      	movs	r4, r0
    3e9c:	000f      	movs	r7, r1
    3e9e:	9200      	str	r2, [sp, #0]
    3ea0:	2e00      	cmp	r6, #0
    3ea2:	d005      	beq.n	3eb0 <setvbuf+0x20>
    3ea4:	69b3      	ldr	r3, [r6, #24]
    3ea6:	2b00      	cmp	r3, #0
    3ea8:	d102      	bne.n	3eb0 <setvbuf+0x20>
    3eaa:	0030      	movs	r0, r6
    3eac:	f001 f8d4 	bl	5058 <__sinit>
    3eb0:	4b49      	ldr	r3, [pc, #292]	; (3fd8 <setvbuf+0x148>)
    3eb2:	429c      	cmp	r4, r3
    3eb4:	d150      	bne.n	3f58 <setvbuf+0xc8>
    3eb6:	6874      	ldr	r4, [r6, #4]
    3eb8:	9b00      	ldr	r3, [sp, #0]
    3eba:	2b02      	cmp	r3, #2
    3ebc:	d005      	beq.n	3eca <setvbuf+0x3a>
    3ebe:	2b01      	cmp	r3, #1
    3ec0:	d900      	bls.n	3ec4 <setvbuf+0x34>
    3ec2:	e084      	b.n	3fce <setvbuf+0x13e>
    3ec4:	2d00      	cmp	r5, #0
    3ec6:	da00      	bge.n	3eca <setvbuf+0x3a>
    3ec8:	e081      	b.n	3fce <setvbuf+0x13e>
    3eca:	0021      	movs	r1, r4
    3ecc:	0030      	movs	r0, r6
    3ece:	f001 f855 	bl	4f7c <_fflush_r>
    3ed2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3ed4:	2900      	cmp	r1, #0
    3ed6:	d008      	beq.n	3eea <setvbuf+0x5a>
    3ed8:	0023      	movs	r3, r4
    3eda:	3344      	adds	r3, #68	; 0x44
    3edc:	4299      	cmp	r1, r3
    3ede:	d002      	beq.n	3ee6 <setvbuf+0x56>
    3ee0:	0030      	movs	r0, r6
    3ee2:	f001 fcc7 	bl	5874 <_free_r>
    3ee6:	2300      	movs	r3, #0
    3ee8:	6363      	str	r3, [r4, #52]	; 0x34
    3eea:	2300      	movs	r3, #0
    3eec:	61a3      	str	r3, [r4, #24]
    3eee:	6063      	str	r3, [r4, #4]
    3ef0:	89a3      	ldrh	r3, [r4, #12]
    3ef2:	061b      	lsls	r3, r3, #24
    3ef4:	d503      	bpl.n	3efe <setvbuf+0x6e>
    3ef6:	6921      	ldr	r1, [r4, #16]
    3ef8:	0030      	movs	r0, r6
    3efa:	f001 fcbb 	bl	5874 <_free_r>
    3efe:	89a3      	ldrh	r3, [r4, #12]
    3f00:	4a36      	ldr	r2, [pc, #216]	; (3fdc <setvbuf+0x14c>)
    3f02:	4013      	ands	r3, r2
    3f04:	81a3      	strh	r3, [r4, #12]
    3f06:	9b00      	ldr	r3, [sp, #0]
    3f08:	2b02      	cmp	r3, #2
    3f0a:	d05a      	beq.n	3fc2 <setvbuf+0x132>
    3f0c:	ab03      	add	r3, sp, #12
    3f0e:	aa02      	add	r2, sp, #8
    3f10:	0021      	movs	r1, r4
    3f12:	0030      	movs	r0, r6
    3f14:	f001 f942 	bl	519c <__swhatbuf_r>
    3f18:	89a3      	ldrh	r3, [r4, #12]
    3f1a:	4318      	orrs	r0, r3
    3f1c:	81a0      	strh	r0, [r4, #12]
    3f1e:	2d00      	cmp	r5, #0
    3f20:	d124      	bne.n	3f6c <setvbuf+0xdc>
    3f22:	9d02      	ldr	r5, [sp, #8]
    3f24:	0028      	movs	r0, r5
    3f26:	f001 f99f 	bl	5268 <malloc>
    3f2a:	9501      	str	r5, [sp, #4]
    3f2c:	1e07      	subs	r7, r0, #0
    3f2e:	d142      	bne.n	3fb6 <setvbuf+0x126>
    3f30:	9b02      	ldr	r3, [sp, #8]
    3f32:	9301      	str	r3, [sp, #4]
    3f34:	42ab      	cmp	r3, r5
    3f36:	d139      	bne.n	3fac <setvbuf+0x11c>
    3f38:	2001      	movs	r0, #1
    3f3a:	4240      	negs	r0, r0
    3f3c:	2302      	movs	r3, #2
    3f3e:	89a2      	ldrh	r2, [r4, #12]
    3f40:	4313      	orrs	r3, r2
    3f42:	81a3      	strh	r3, [r4, #12]
    3f44:	2300      	movs	r3, #0
    3f46:	60a3      	str	r3, [r4, #8]
    3f48:	0023      	movs	r3, r4
    3f4a:	3347      	adds	r3, #71	; 0x47
    3f4c:	6023      	str	r3, [r4, #0]
    3f4e:	6123      	str	r3, [r4, #16]
    3f50:	2301      	movs	r3, #1
    3f52:	6163      	str	r3, [r4, #20]
    3f54:	b005      	add	sp, #20
    3f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f58:	4b21      	ldr	r3, [pc, #132]	; (3fe0 <setvbuf+0x150>)
    3f5a:	429c      	cmp	r4, r3
    3f5c:	d101      	bne.n	3f62 <setvbuf+0xd2>
    3f5e:	68b4      	ldr	r4, [r6, #8]
    3f60:	e7aa      	b.n	3eb8 <setvbuf+0x28>
    3f62:	4b20      	ldr	r3, [pc, #128]	; (3fe4 <setvbuf+0x154>)
    3f64:	429c      	cmp	r4, r3
    3f66:	d1a7      	bne.n	3eb8 <setvbuf+0x28>
    3f68:	68f4      	ldr	r4, [r6, #12]
    3f6a:	e7a5      	b.n	3eb8 <setvbuf+0x28>
    3f6c:	2f00      	cmp	r7, #0
    3f6e:	d0d9      	beq.n	3f24 <setvbuf+0x94>
    3f70:	69b3      	ldr	r3, [r6, #24]
    3f72:	2b00      	cmp	r3, #0
    3f74:	d102      	bne.n	3f7c <setvbuf+0xec>
    3f76:	0030      	movs	r0, r6
    3f78:	f001 f86e 	bl	5058 <__sinit>
    3f7c:	9b00      	ldr	r3, [sp, #0]
    3f7e:	2b01      	cmp	r3, #1
    3f80:	d103      	bne.n	3f8a <setvbuf+0xfa>
    3f82:	89a3      	ldrh	r3, [r4, #12]
    3f84:	9a00      	ldr	r2, [sp, #0]
    3f86:	431a      	orrs	r2, r3
    3f88:	81a2      	strh	r2, [r4, #12]
    3f8a:	2008      	movs	r0, #8
    3f8c:	89a3      	ldrh	r3, [r4, #12]
    3f8e:	6027      	str	r7, [r4, #0]
    3f90:	6127      	str	r7, [r4, #16]
    3f92:	6165      	str	r5, [r4, #20]
    3f94:	4018      	ands	r0, r3
    3f96:	d018      	beq.n	3fca <setvbuf+0x13a>
    3f98:	2001      	movs	r0, #1
    3f9a:	4018      	ands	r0, r3
    3f9c:	2300      	movs	r3, #0
    3f9e:	4298      	cmp	r0, r3
    3fa0:	d011      	beq.n	3fc6 <setvbuf+0x136>
    3fa2:	426d      	negs	r5, r5
    3fa4:	60a3      	str	r3, [r4, #8]
    3fa6:	61a5      	str	r5, [r4, #24]
    3fa8:	0018      	movs	r0, r3
    3faa:	e7d3      	b.n	3f54 <setvbuf+0xc4>
    3fac:	9801      	ldr	r0, [sp, #4]
    3fae:	f001 f95b 	bl	5268 <malloc>
    3fb2:	1e07      	subs	r7, r0, #0
    3fb4:	d0c0      	beq.n	3f38 <setvbuf+0xa8>
    3fb6:	2380      	movs	r3, #128	; 0x80
    3fb8:	89a2      	ldrh	r2, [r4, #12]
    3fba:	9d01      	ldr	r5, [sp, #4]
    3fbc:	4313      	orrs	r3, r2
    3fbe:	81a3      	strh	r3, [r4, #12]
    3fc0:	e7d6      	b.n	3f70 <setvbuf+0xe0>
    3fc2:	2000      	movs	r0, #0
    3fc4:	e7ba      	b.n	3f3c <setvbuf+0xac>
    3fc6:	60a5      	str	r5, [r4, #8]
    3fc8:	e7c4      	b.n	3f54 <setvbuf+0xc4>
    3fca:	60a0      	str	r0, [r4, #8]
    3fcc:	e7c2      	b.n	3f54 <setvbuf+0xc4>
    3fce:	2001      	movs	r0, #1
    3fd0:	4240      	negs	r0, r0
    3fd2:	e7bf      	b.n	3f54 <setvbuf+0xc4>
    3fd4:	2000000c 	.word	0x2000000c
    3fd8:	00008b08 	.word	0x00008b08
    3fdc:	fffff35c 	.word	0xfffff35c
    3fe0:	00008b28 	.word	0x00008b28
    3fe4:	00008ae8 	.word	0x00008ae8

00003fe8 <strlen>:
    3fe8:	2300      	movs	r3, #0
    3fea:	5cc2      	ldrb	r2, [r0, r3]
    3fec:	3301      	adds	r3, #1
    3fee:	2a00      	cmp	r2, #0
    3ff0:	d1fb      	bne.n	3fea <strlen+0x2>
    3ff2:	1e58      	subs	r0, r3, #1
    3ff4:	4770      	bx	lr
	...

00003ff8 <__swbuf_r>:
    3ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ffa:	0005      	movs	r5, r0
    3ffc:	000e      	movs	r6, r1
    3ffe:	0014      	movs	r4, r2
    4000:	2800      	cmp	r0, #0
    4002:	d004      	beq.n	400e <__swbuf_r+0x16>
    4004:	6983      	ldr	r3, [r0, #24]
    4006:	2b00      	cmp	r3, #0
    4008:	d101      	bne.n	400e <__swbuf_r+0x16>
    400a:	f001 f825 	bl	5058 <__sinit>
    400e:	4b22      	ldr	r3, [pc, #136]	; (4098 <__swbuf_r+0xa0>)
    4010:	429c      	cmp	r4, r3
    4012:	d12d      	bne.n	4070 <__swbuf_r+0x78>
    4014:	686c      	ldr	r4, [r5, #4]
    4016:	69a3      	ldr	r3, [r4, #24]
    4018:	60a3      	str	r3, [r4, #8]
    401a:	89a3      	ldrh	r3, [r4, #12]
    401c:	071b      	lsls	r3, r3, #28
    401e:	d531      	bpl.n	4084 <__swbuf_r+0x8c>
    4020:	6923      	ldr	r3, [r4, #16]
    4022:	2b00      	cmp	r3, #0
    4024:	d02e      	beq.n	4084 <__swbuf_r+0x8c>
    4026:	6823      	ldr	r3, [r4, #0]
    4028:	6922      	ldr	r2, [r4, #16]
    402a:	b2f7      	uxtb	r7, r6
    402c:	1a98      	subs	r0, r3, r2
    402e:	6963      	ldr	r3, [r4, #20]
    4030:	b2f6      	uxtb	r6, r6
    4032:	4298      	cmp	r0, r3
    4034:	db05      	blt.n	4042 <__swbuf_r+0x4a>
    4036:	0021      	movs	r1, r4
    4038:	0028      	movs	r0, r5
    403a:	f000 ff9f 	bl	4f7c <_fflush_r>
    403e:	2800      	cmp	r0, #0
    4040:	d126      	bne.n	4090 <__swbuf_r+0x98>
    4042:	68a3      	ldr	r3, [r4, #8]
    4044:	3001      	adds	r0, #1
    4046:	3b01      	subs	r3, #1
    4048:	60a3      	str	r3, [r4, #8]
    404a:	6823      	ldr	r3, [r4, #0]
    404c:	1c5a      	adds	r2, r3, #1
    404e:	6022      	str	r2, [r4, #0]
    4050:	701f      	strb	r7, [r3, #0]
    4052:	6963      	ldr	r3, [r4, #20]
    4054:	4298      	cmp	r0, r3
    4056:	d004      	beq.n	4062 <__swbuf_r+0x6a>
    4058:	89a3      	ldrh	r3, [r4, #12]
    405a:	07db      	lsls	r3, r3, #31
    405c:	d51a      	bpl.n	4094 <__swbuf_r+0x9c>
    405e:	2e0a      	cmp	r6, #10
    4060:	d118      	bne.n	4094 <__swbuf_r+0x9c>
    4062:	0021      	movs	r1, r4
    4064:	0028      	movs	r0, r5
    4066:	f000 ff89 	bl	4f7c <_fflush_r>
    406a:	2800      	cmp	r0, #0
    406c:	d012      	beq.n	4094 <__swbuf_r+0x9c>
    406e:	e00f      	b.n	4090 <__swbuf_r+0x98>
    4070:	4b0a      	ldr	r3, [pc, #40]	; (409c <__swbuf_r+0xa4>)
    4072:	429c      	cmp	r4, r3
    4074:	d101      	bne.n	407a <__swbuf_r+0x82>
    4076:	68ac      	ldr	r4, [r5, #8]
    4078:	e7cd      	b.n	4016 <__swbuf_r+0x1e>
    407a:	4b09      	ldr	r3, [pc, #36]	; (40a0 <__swbuf_r+0xa8>)
    407c:	429c      	cmp	r4, r3
    407e:	d1ca      	bne.n	4016 <__swbuf_r+0x1e>
    4080:	68ec      	ldr	r4, [r5, #12]
    4082:	e7c8      	b.n	4016 <__swbuf_r+0x1e>
    4084:	0021      	movs	r1, r4
    4086:	0028      	movs	r0, r5
    4088:	f000 f80c 	bl	40a4 <__swsetup_r>
    408c:	2800      	cmp	r0, #0
    408e:	d0ca      	beq.n	4026 <__swbuf_r+0x2e>
    4090:	2601      	movs	r6, #1
    4092:	4276      	negs	r6, r6
    4094:	0030      	movs	r0, r6
    4096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4098:	00008b08 	.word	0x00008b08
    409c:	00008b28 	.word	0x00008b28
    40a0:	00008ae8 	.word	0x00008ae8

000040a4 <__swsetup_r>:
    40a4:	4b36      	ldr	r3, [pc, #216]	; (4180 <__swsetup_r+0xdc>)
    40a6:	b570      	push	{r4, r5, r6, lr}
    40a8:	681d      	ldr	r5, [r3, #0]
    40aa:	0006      	movs	r6, r0
    40ac:	000c      	movs	r4, r1
    40ae:	2d00      	cmp	r5, #0
    40b0:	d005      	beq.n	40be <__swsetup_r+0x1a>
    40b2:	69ab      	ldr	r3, [r5, #24]
    40b4:	2b00      	cmp	r3, #0
    40b6:	d102      	bne.n	40be <__swsetup_r+0x1a>
    40b8:	0028      	movs	r0, r5
    40ba:	f000 ffcd 	bl	5058 <__sinit>
    40be:	4b31      	ldr	r3, [pc, #196]	; (4184 <__swsetup_r+0xe0>)
    40c0:	429c      	cmp	r4, r3
    40c2:	d10f      	bne.n	40e4 <__swsetup_r+0x40>
    40c4:	686c      	ldr	r4, [r5, #4]
    40c6:	230c      	movs	r3, #12
    40c8:	5ee2      	ldrsh	r2, [r4, r3]
    40ca:	b293      	uxth	r3, r2
    40cc:	0719      	lsls	r1, r3, #28
    40ce:	d42d      	bmi.n	412c <__swsetup_r+0x88>
    40d0:	06d9      	lsls	r1, r3, #27
    40d2:	d411      	bmi.n	40f8 <__swsetup_r+0x54>
    40d4:	2309      	movs	r3, #9
    40d6:	2001      	movs	r0, #1
    40d8:	6033      	str	r3, [r6, #0]
    40da:	3337      	adds	r3, #55	; 0x37
    40dc:	4313      	orrs	r3, r2
    40de:	81a3      	strh	r3, [r4, #12]
    40e0:	4240      	negs	r0, r0
    40e2:	bd70      	pop	{r4, r5, r6, pc}
    40e4:	4b28      	ldr	r3, [pc, #160]	; (4188 <__swsetup_r+0xe4>)
    40e6:	429c      	cmp	r4, r3
    40e8:	d101      	bne.n	40ee <__swsetup_r+0x4a>
    40ea:	68ac      	ldr	r4, [r5, #8]
    40ec:	e7eb      	b.n	40c6 <__swsetup_r+0x22>
    40ee:	4b27      	ldr	r3, [pc, #156]	; (418c <__swsetup_r+0xe8>)
    40f0:	429c      	cmp	r4, r3
    40f2:	d1e8      	bne.n	40c6 <__swsetup_r+0x22>
    40f4:	68ec      	ldr	r4, [r5, #12]
    40f6:	e7e6      	b.n	40c6 <__swsetup_r+0x22>
    40f8:	075b      	lsls	r3, r3, #29
    40fa:	d513      	bpl.n	4124 <__swsetup_r+0x80>
    40fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    40fe:	2900      	cmp	r1, #0
    4100:	d008      	beq.n	4114 <__swsetup_r+0x70>
    4102:	0023      	movs	r3, r4
    4104:	3344      	adds	r3, #68	; 0x44
    4106:	4299      	cmp	r1, r3
    4108:	d002      	beq.n	4110 <__swsetup_r+0x6c>
    410a:	0030      	movs	r0, r6
    410c:	f001 fbb2 	bl	5874 <_free_r>
    4110:	2300      	movs	r3, #0
    4112:	6363      	str	r3, [r4, #52]	; 0x34
    4114:	2224      	movs	r2, #36	; 0x24
    4116:	89a3      	ldrh	r3, [r4, #12]
    4118:	4393      	bics	r3, r2
    411a:	81a3      	strh	r3, [r4, #12]
    411c:	2300      	movs	r3, #0
    411e:	6063      	str	r3, [r4, #4]
    4120:	6923      	ldr	r3, [r4, #16]
    4122:	6023      	str	r3, [r4, #0]
    4124:	2308      	movs	r3, #8
    4126:	89a2      	ldrh	r2, [r4, #12]
    4128:	4313      	orrs	r3, r2
    412a:	81a3      	strh	r3, [r4, #12]
    412c:	6923      	ldr	r3, [r4, #16]
    412e:	2b00      	cmp	r3, #0
    4130:	d10b      	bne.n	414a <__swsetup_r+0xa6>
    4132:	21a0      	movs	r1, #160	; 0xa0
    4134:	2280      	movs	r2, #128	; 0x80
    4136:	89a3      	ldrh	r3, [r4, #12]
    4138:	0089      	lsls	r1, r1, #2
    413a:	0092      	lsls	r2, r2, #2
    413c:	400b      	ands	r3, r1
    413e:	4293      	cmp	r3, r2
    4140:	d003      	beq.n	414a <__swsetup_r+0xa6>
    4142:	0021      	movs	r1, r4
    4144:	0030      	movs	r0, r6
    4146:	f001 f851 	bl	51ec <__smakebuf_r>
    414a:	2301      	movs	r3, #1
    414c:	89a2      	ldrh	r2, [r4, #12]
    414e:	4013      	ands	r3, r2
    4150:	d011      	beq.n	4176 <__swsetup_r+0xd2>
    4152:	2300      	movs	r3, #0
    4154:	60a3      	str	r3, [r4, #8]
    4156:	6963      	ldr	r3, [r4, #20]
    4158:	425b      	negs	r3, r3
    415a:	61a3      	str	r3, [r4, #24]
    415c:	2000      	movs	r0, #0
    415e:	6923      	ldr	r3, [r4, #16]
    4160:	4283      	cmp	r3, r0
    4162:	d1be      	bne.n	40e2 <__swsetup_r+0x3e>
    4164:	230c      	movs	r3, #12
    4166:	5ee2      	ldrsh	r2, [r4, r3]
    4168:	0613      	lsls	r3, r2, #24
    416a:	d5ba      	bpl.n	40e2 <__swsetup_r+0x3e>
    416c:	2340      	movs	r3, #64	; 0x40
    416e:	4313      	orrs	r3, r2
    4170:	81a3      	strh	r3, [r4, #12]
    4172:	3801      	subs	r0, #1
    4174:	e7b5      	b.n	40e2 <__swsetup_r+0x3e>
    4176:	0792      	lsls	r2, r2, #30
    4178:	d400      	bmi.n	417c <__swsetup_r+0xd8>
    417a:	6963      	ldr	r3, [r4, #20]
    417c:	60a3      	str	r3, [r4, #8]
    417e:	e7ed      	b.n	415c <__swsetup_r+0xb8>
    4180:	2000000c 	.word	0x2000000c
    4184:	00008b08 	.word	0x00008b08
    4188:	00008b28 	.word	0x00008b28
    418c:	00008ae8 	.word	0x00008ae8

00004190 <quorem>:
    4190:	b5f0      	push	{r4, r5, r6, r7, lr}
    4192:	6903      	ldr	r3, [r0, #16]
    4194:	690c      	ldr	r4, [r1, #16]
    4196:	b089      	sub	sp, #36	; 0x24
    4198:	0007      	movs	r7, r0
    419a:	9105      	str	r1, [sp, #20]
    419c:	2600      	movs	r6, #0
    419e:	429c      	cmp	r4, r3
    41a0:	dc6d      	bgt.n	427e <quorem+0xee>
    41a2:	000b      	movs	r3, r1
    41a4:	3c01      	subs	r4, #1
    41a6:	3314      	adds	r3, #20
    41a8:	00a5      	lsls	r5, r4, #2
    41aa:	9303      	str	r3, [sp, #12]
    41ac:	195b      	adds	r3, r3, r5
    41ae:	9304      	str	r3, [sp, #16]
    41b0:	0003      	movs	r3, r0
    41b2:	3314      	adds	r3, #20
    41b4:	9302      	str	r3, [sp, #8]
    41b6:	195d      	adds	r5, r3, r5
    41b8:	9b04      	ldr	r3, [sp, #16]
    41ba:	6828      	ldr	r0, [r5, #0]
    41bc:	681b      	ldr	r3, [r3, #0]
    41be:	1c59      	adds	r1, r3, #1
    41c0:	9301      	str	r3, [sp, #4]
    41c2:	f001 fe3d 	bl	5e40 <__udivsi3>
    41c6:	9001      	str	r0, [sp, #4]
    41c8:	42b0      	cmp	r0, r6
    41ca:	d02d      	beq.n	4228 <quorem+0x98>
    41cc:	9b03      	ldr	r3, [sp, #12]
    41ce:	9802      	ldr	r0, [sp, #8]
    41d0:	469c      	mov	ip, r3
    41d2:	9606      	str	r6, [sp, #24]
    41d4:	4662      	mov	r2, ip
    41d6:	ca08      	ldmia	r2!, {r3}
    41d8:	4694      	mov	ip, r2
    41da:	9a01      	ldr	r2, [sp, #4]
    41dc:	b299      	uxth	r1, r3
    41de:	4351      	muls	r1, r2
    41e0:	0c1b      	lsrs	r3, r3, #16
    41e2:	4353      	muls	r3, r2
    41e4:	1989      	adds	r1, r1, r6
    41e6:	0c0a      	lsrs	r2, r1, #16
    41e8:	189b      	adds	r3, r3, r2
    41ea:	9307      	str	r3, [sp, #28]
    41ec:	8802      	ldrh	r2, [r0, #0]
    41ee:	0c1e      	lsrs	r6, r3, #16
    41f0:	9b06      	ldr	r3, [sp, #24]
    41f2:	b289      	uxth	r1, r1
    41f4:	18d2      	adds	r2, r2, r3
    41f6:	6803      	ldr	r3, [r0, #0]
    41f8:	1a52      	subs	r2, r2, r1
    41fa:	0c19      	lsrs	r1, r3, #16
    41fc:	466b      	mov	r3, sp
    41fe:	8b9b      	ldrh	r3, [r3, #28]
    4200:	1acb      	subs	r3, r1, r3
    4202:	1411      	asrs	r1, r2, #16
    4204:	185b      	adds	r3, r3, r1
    4206:	1419      	asrs	r1, r3, #16
    4208:	b292      	uxth	r2, r2
    420a:	041b      	lsls	r3, r3, #16
    420c:	431a      	orrs	r2, r3
    420e:	9b04      	ldr	r3, [sp, #16]
    4210:	9106      	str	r1, [sp, #24]
    4212:	c004      	stmia	r0!, {r2}
    4214:	4563      	cmp	r3, ip
    4216:	d2dd      	bcs.n	41d4 <quorem+0x44>
    4218:	682b      	ldr	r3, [r5, #0]
    421a:	2b00      	cmp	r3, #0
    421c:	d104      	bne.n	4228 <quorem+0x98>
    421e:	9b02      	ldr	r3, [sp, #8]
    4220:	3d04      	subs	r5, #4
    4222:	42ab      	cmp	r3, r5
    4224:	d32e      	bcc.n	4284 <quorem+0xf4>
    4226:	613c      	str	r4, [r7, #16]
    4228:	9905      	ldr	r1, [sp, #20]
    422a:	0038      	movs	r0, r7
    422c:	f001 fa43 	bl	56b6 <__mcmp>
    4230:	2800      	cmp	r0, #0
    4232:	db23      	blt.n	427c <quorem+0xec>
    4234:	2500      	movs	r5, #0
    4236:	9b01      	ldr	r3, [sp, #4]
    4238:	9802      	ldr	r0, [sp, #8]
    423a:	3301      	adds	r3, #1
    423c:	9903      	ldr	r1, [sp, #12]
    423e:	9301      	str	r3, [sp, #4]
    4240:	c908      	ldmia	r1!, {r3}
    4242:	8802      	ldrh	r2, [r0, #0]
    4244:	1955      	adds	r5, r2, r5
    4246:	b29a      	uxth	r2, r3
    4248:	1aaa      	subs	r2, r5, r2
    424a:	6805      	ldr	r5, [r0, #0]
    424c:	0c1b      	lsrs	r3, r3, #16
    424e:	0c2d      	lsrs	r5, r5, #16
    4250:	1aeb      	subs	r3, r5, r3
    4252:	1415      	asrs	r5, r2, #16
    4254:	195b      	adds	r3, r3, r5
    4256:	141d      	asrs	r5, r3, #16
    4258:	b292      	uxth	r2, r2
    425a:	041b      	lsls	r3, r3, #16
    425c:	4313      	orrs	r3, r2
    425e:	c008      	stmia	r0!, {r3}
    4260:	9b04      	ldr	r3, [sp, #16]
    4262:	428b      	cmp	r3, r1
    4264:	d2ec      	bcs.n	4240 <quorem+0xb0>
    4266:	9a02      	ldr	r2, [sp, #8]
    4268:	00a3      	lsls	r3, r4, #2
    426a:	18d3      	adds	r3, r2, r3
    426c:	681a      	ldr	r2, [r3, #0]
    426e:	2a00      	cmp	r2, #0
    4270:	d104      	bne.n	427c <quorem+0xec>
    4272:	9a02      	ldr	r2, [sp, #8]
    4274:	3b04      	subs	r3, #4
    4276:	429a      	cmp	r2, r3
    4278:	d309      	bcc.n	428e <quorem+0xfe>
    427a:	613c      	str	r4, [r7, #16]
    427c:	9e01      	ldr	r6, [sp, #4]
    427e:	0030      	movs	r0, r6
    4280:	b009      	add	sp, #36	; 0x24
    4282:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4284:	682b      	ldr	r3, [r5, #0]
    4286:	2b00      	cmp	r3, #0
    4288:	d1cd      	bne.n	4226 <quorem+0x96>
    428a:	3c01      	subs	r4, #1
    428c:	e7c7      	b.n	421e <quorem+0x8e>
    428e:	681a      	ldr	r2, [r3, #0]
    4290:	2a00      	cmp	r2, #0
    4292:	d1f2      	bne.n	427a <quorem+0xea>
    4294:	3c01      	subs	r4, #1
    4296:	e7ec      	b.n	4272 <quorem+0xe2>

00004298 <_dtoa_r>:
    4298:	b5f0      	push	{r4, r5, r6, r7, lr}
    429a:	0016      	movs	r6, r2
    429c:	001f      	movs	r7, r3
    429e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    42a0:	b09d      	sub	sp, #116	; 0x74
    42a2:	9004      	str	r0, [sp, #16]
    42a4:	9d25      	ldr	r5, [sp, #148]	; 0x94
    42a6:	9606      	str	r6, [sp, #24]
    42a8:	9707      	str	r7, [sp, #28]
    42aa:	2c00      	cmp	r4, #0
    42ac:	d108      	bne.n	42c0 <_dtoa_r+0x28>
    42ae:	2010      	movs	r0, #16
    42b0:	f000 ffda 	bl	5268 <malloc>
    42b4:	9b04      	ldr	r3, [sp, #16]
    42b6:	6258      	str	r0, [r3, #36]	; 0x24
    42b8:	6044      	str	r4, [r0, #4]
    42ba:	6084      	str	r4, [r0, #8]
    42bc:	6004      	str	r4, [r0, #0]
    42be:	60c4      	str	r4, [r0, #12]
    42c0:	9b04      	ldr	r3, [sp, #16]
    42c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    42c4:	6819      	ldr	r1, [r3, #0]
    42c6:	2900      	cmp	r1, #0
    42c8:	d00b      	beq.n	42e2 <_dtoa_r+0x4a>
    42ca:	685a      	ldr	r2, [r3, #4]
    42cc:	2301      	movs	r3, #1
    42ce:	4093      	lsls	r3, r2
    42d0:	604a      	str	r2, [r1, #4]
    42d2:	608b      	str	r3, [r1, #8]
    42d4:	9804      	ldr	r0, [sp, #16]
    42d6:	f001 f814 	bl	5302 <_Bfree>
    42da:	2200      	movs	r2, #0
    42dc:	9b04      	ldr	r3, [sp, #16]
    42de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    42e0:	601a      	str	r2, [r3, #0]
    42e2:	9b07      	ldr	r3, [sp, #28]
    42e4:	2b00      	cmp	r3, #0
    42e6:	da1f      	bge.n	4328 <_dtoa_r+0x90>
    42e8:	2301      	movs	r3, #1
    42ea:	602b      	str	r3, [r5, #0]
    42ec:	007b      	lsls	r3, r7, #1
    42ee:	085b      	lsrs	r3, r3, #1
    42f0:	9307      	str	r3, [sp, #28]
    42f2:	9c07      	ldr	r4, [sp, #28]
    42f4:	4bb7      	ldr	r3, [pc, #732]	; (45d4 <_dtoa_r+0x33c>)
    42f6:	0022      	movs	r2, r4
    42f8:	9319      	str	r3, [sp, #100]	; 0x64
    42fa:	401a      	ands	r2, r3
    42fc:	429a      	cmp	r2, r3
    42fe:	d116      	bne.n	432e <_dtoa_r+0x96>
    4300:	4bb5      	ldr	r3, [pc, #724]	; (45d8 <_dtoa_r+0x340>)
    4302:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4304:	6013      	str	r3, [r2, #0]
    4306:	9b06      	ldr	r3, [sp, #24]
    4308:	2b00      	cmp	r3, #0
    430a:	d103      	bne.n	4314 <_dtoa_r+0x7c>
    430c:	0324      	lsls	r4, r4, #12
    430e:	d101      	bne.n	4314 <_dtoa_r+0x7c>
    4310:	f000 fd91 	bl	4e36 <_dtoa_r+0xb9e>
    4314:	4bb1      	ldr	r3, [pc, #708]	; (45dc <_dtoa_r+0x344>)
    4316:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4318:	930a      	str	r3, [sp, #40]	; 0x28
    431a:	4bb1      	ldr	r3, [pc, #708]	; (45e0 <_dtoa_r+0x348>)
    431c:	2a00      	cmp	r2, #0
    431e:	d001      	beq.n	4324 <_dtoa_r+0x8c>
    4320:	f000 fd8f 	bl	4e42 <_dtoa_r+0xbaa>
    4324:	f000 fd8f 	bl	4e46 <_dtoa_r+0xbae>
    4328:	2300      	movs	r3, #0
    432a:	602b      	str	r3, [r5, #0]
    432c:	e7e1      	b.n	42f2 <_dtoa_r+0x5a>
    432e:	9e06      	ldr	r6, [sp, #24]
    4330:	9f07      	ldr	r7, [sp, #28]
    4332:	2200      	movs	r2, #0
    4334:	2300      	movs	r3, #0
    4336:	0030      	movs	r0, r6
    4338:	0039      	movs	r1, r7
    433a:	f001 ff07 	bl	614c <__aeabi_dcmpeq>
    433e:	1e05      	subs	r5, r0, #0
    4340:	d00e      	beq.n	4360 <_dtoa_r+0xc8>
    4342:	2301      	movs	r3, #1
    4344:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4346:	6013      	str	r3, [r2, #0]
    4348:	4ba6      	ldr	r3, [pc, #664]	; (45e4 <_dtoa_r+0x34c>)
    434a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    434c:	930a      	str	r3, [sp, #40]	; 0x28
    434e:	2a00      	cmp	r2, #0
    4350:	d101      	bne.n	4356 <_dtoa_r+0xbe>
    4352:	f000 fd78 	bl	4e46 <_dtoa_r+0xbae>
    4356:	4aa4      	ldr	r2, [pc, #656]	; (45e8 <_dtoa_r+0x350>)
    4358:	9926      	ldr	r1, [sp, #152]	; 0x98
    435a:	600a      	str	r2, [r1, #0]
    435c:	f000 fd73 	bl	4e46 <_dtoa_r+0xbae>
    4360:	ab1a      	add	r3, sp, #104	; 0x68
    4362:	9301      	str	r3, [sp, #4]
    4364:	ab1b      	add	r3, sp, #108	; 0x6c
    4366:	9300      	str	r3, [sp, #0]
    4368:	0032      	movs	r2, r6
    436a:	003b      	movs	r3, r7
    436c:	9804      	ldr	r0, [sp, #16]
    436e:	f001 fa1f 	bl	57b0 <__d2b>
    4372:	0063      	lsls	r3, r4, #1
    4374:	9005      	str	r0, [sp, #20]
    4376:	0d5b      	lsrs	r3, r3, #21
    4378:	d100      	bne.n	437c <_dtoa_r+0xe4>
    437a:	e07f      	b.n	447c <_dtoa_r+0x1e4>
    437c:	033a      	lsls	r2, r7, #12
    437e:	4c9b      	ldr	r4, [pc, #620]	; (45ec <_dtoa_r+0x354>)
    4380:	0b12      	lsrs	r2, r2, #12
    4382:	4314      	orrs	r4, r2
    4384:	0021      	movs	r1, r4
    4386:	4a9a      	ldr	r2, [pc, #616]	; (45f0 <_dtoa_r+0x358>)
    4388:	0030      	movs	r0, r6
    438a:	9518      	str	r5, [sp, #96]	; 0x60
    438c:	189e      	adds	r6, r3, r2
    438e:	2200      	movs	r2, #0
    4390:	4b98      	ldr	r3, [pc, #608]	; (45f4 <_dtoa_r+0x35c>)
    4392:	f003 fe23 	bl	7fdc <__aeabi_dsub>
    4396:	4a98      	ldr	r2, [pc, #608]	; (45f8 <_dtoa_r+0x360>)
    4398:	4b98      	ldr	r3, [pc, #608]	; (45fc <_dtoa_r+0x364>)
    439a:	f003 fb9f 	bl	7adc <__aeabi_dmul>
    439e:	4a98      	ldr	r2, [pc, #608]	; (4600 <_dtoa_r+0x368>)
    43a0:	4b98      	ldr	r3, [pc, #608]	; (4604 <_dtoa_r+0x36c>)
    43a2:	f002 fc57 	bl	6c54 <__aeabi_dadd>
    43a6:	0004      	movs	r4, r0
    43a8:	0030      	movs	r0, r6
    43aa:	000d      	movs	r5, r1
    43ac:	f004 f980 	bl	86b0 <__aeabi_i2d>
    43b0:	4a95      	ldr	r2, [pc, #596]	; (4608 <_dtoa_r+0x370>)
    43b2:	4b96      	ldr	r3, [pc, #600]	; (460c <_dtoa_r+0x374>)
    43b4:	f003 fb92 	bl	7adc <__aeabi_dmul>
    43b8:	0002      	movs	r2, r0
    43ba:	000b      	movs	r3, r1
    43bc:	0020      	movs	r0, r4
    43be:	0029      	movs	r1, r5
    43c0:	f002 fc48 	bl	6c54 <__aeabi_dadd>
    43c4:	0004      	movs	r4, r0
    43c6:	000d      	movs	r5, r1
    43c8:	f004 f93e 	bl	8648 <__aeabi_d2iz>
    43cc:	2200      	movs	r2, #0
    43ce:	9003      	str	r0, [sp, #12]
    43d0:	2300      	movs	r3, #0
    43d2:	0020      	movs	r0, r4
    43d4:	0029      	movs	r1, r5
    43d6:	f001 febf 	bl	6158 <__aeabi_dcmplt>
    43da:	2800      	cmp	r0, #0
    43dc:	d00e      	beq.n	43fc <_dtoa_r+0x164>
    43de:	9803      	ldr	r0, [sp, #12]
    43e0:	f004 f966 	bl	86b0 <__aeabi_i2d>
    43e4:	000b      	movs	r3, r1
    43e6:	0002      	movs	r2, r0
    43e8:	0029      	movs	r1, r5
    43ea:	0020      	movs	r0, r4
    43ec:	f001 feae 	bl	614c <__aeabi_dcmpeq>
    43f0:	0003      	movs	r3, r0
    43f2:	4258      	negs	r0, r3
    43f4:	4158      	adcs	r0, r3
    43f6:	9b03      	ldr	r3, [sp, #12]
    43f8:	1a1b      	subs	r3, r3, r0
    43fa:	9303      	str	r3, [sp, #12]
    43fc:	2301      	movs	r3, #1
    43fe:	9316      	str	r3, [sp, #88]	; 0x58
    4400:	9b03      	ldr	r3, [sp, #12]
    4402:	2b16      	cmp	r3, #22
    4404:	d80f      	bhi.n	4426 <_dtoa_r+0x18e>
    4406:	4982      	ldr	r1, [pc, #520]	; (4610 <_dtoa_r+0x378>)
    4408:	00db      	lsls	r3, r3, #3
    440a:	18c9      	adds	r1, r1, r3
    440c:	6808      	ldr	r0, [r1, #0]
    440e:	6849      	ldr	r1, [r1, #4]
    4410:	9a06      	ldr	r2, [sp, #24]
    4412:	9b07      	ldr	r3, [sp, #28]
    4414:	f001 feb4 	bl	6180 <__aeabi_dcmpgt>
    4418:	2800      	cmp	r0, #0
    441a:	d04b      	beq.n	44b4 <_dtoa_r+0x21c>
    441c:	9b03      	ldr	r3, [sp, #12]
    441e:	3b01      	subs	r3, #1
    4420:	9303      	str	r3, [sp, #12]
    4422:	2300      	movs	r3, #0
    4424:	9316      	str	r3, [sp, #88]	; 0x58
    4426:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4428:	1b9e      	subs	r6, r3, r6
    442a:	2300      	movs	r3, #0
    442c:	930b      	str	r3, [sp, #44]	; 0x2c
    442e:	0033      	movs	r3, r6
    4430:	3b01      	subs	r3, #1
    4432:	930c      	str	r3, [sp, #48]	; 0x30
    4434:	d504      	bpl.n	4440 <_dtoa_r+0x1a8>
    4436:	2301      	movs	r3, #1
    4438:	1b9b      	subs	r3, r3, r6
    443a:	930b      	str	r3, [sp, #44]	; 0x2c
    443c:	2300      	movs	r3, #0
    443e:	930c      	str	r3, [sp, #48]	; 0x30
    4440:	9b03      	ldr	r3, [sp, #12]
    4442:	2b00      	cmp	r3, #0
    4444:	db38      	blt.n	44b8 <_dtoa_r+0x220>
    4446:	9a03      	ldr	r2, [sp, #12]
    4448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    444a:	4694      	mov	ip, r2
    444c:	4463      	add	r3, ip
    444e:	930c      	str	r3, [sp, #48]	; 0x30
    4450:	2300      	movs	r3, #0
    4452:	920f      	str	r2, [sp, #60]	; 0x3c
    4454:	9308      	str	r3, [sp, #32]
    4456:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4458:	2501      	movs	r5, #1
    445a:	2b09      	cmp	r3, #9
    445c:	d900      	bls.n	4460 <_dtoa_r+0x1c8>
    445e:	e091      	b.n	4584 <_dtoa_r+0x2ec>
    4460:	2b05      	cmp	r3, #5
    4462:	dd02      	ble.n	446a <_dtoa_r+0x1d2>
    4464:	2500      	movs	r5, #0
    4466:	3b04      	subs	r3, #4
    4468:	9322      	str	r3, [sp, #136]	; 0x88
    446a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    446c:	1e98      	subs	r0, r3, #2
    446e:	2803      	cmp	r0, #3
    4470:	d900      	bls.n	4474 <_dtoa_r+0x1dc>
    4472:	e091      	b.n	4598 <_dtoa_r+0x300>
    4474:	f001 fcda 	bl	5e2c <__gnu_thumb1_case_uqi>
    4478:	76298482 	.word	0x76298482
    447c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    447e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    4480:	189e      	adds	r6, r3, r2
    4482:	4b64      	ldr	r3, [pc, #400]	; (4614 <_dtoa_r+0x37c>)
    4484:	18f2      	adds	r2, r6, r3
    4486:	2a20      	cmp	r2, #32
    4488:	dd0f      	ble.n	44aa <_dtoa_r+0x212>
    448a:	4b63      	ldr	r3, [pc, #396]	; (4618 <_dtoa_r+0x380>)
    448c:	9806      	ldr	r0, [sp, #24]
    448e:	18f3      	adds	r3, r6, r3
    4490:	40d8      	lsrs	r0, r3
    4492:	2340      	movs	r3, #64	; 0x40
    4494:	1a9b      	subs	r3, r3, r2
    4496:	409c      	lsls	r4, r3
    4498:	4320      	orrs	r0, r4
    449a:	f004 f94b 	bl	8734 <__aeabi_ui2d>
    449e:	2301      	movs	r3, #1
    44a0:	4c5e      	ldr	r4, [pc, #376]	; (461c <_dtoa_r+0x384>)
    44a2:	3e01      	subs	r6, #1
    44a4:	1909      	adds	r1, r1, r4
    44a6:	9318      	str	r3, [sp, #96]	; 0x60
    44a8:	e771      	b.n	438e <_dtoa_r+0xf6>
    44aa:	2320      	movs	r3, #32
    44ac:	9806      	ldr	r0, [sp, #24]
    44ae:	1a9b      	subs	r3, r3, r2
    44b0:	4098      	lsls	r0, r3
    44b2:	e7f2      	b.n	449a <_dtoa_r+0x202>
    44b4:	9016      	str	r0, [sp, #88]	; 0x58
    44b6:	e7b6      	b.n	4426 <_dtoa_r+0x18e>
    44b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    44ba:	9a03      	ldr	r2, [sp, #12]
    44bc:	1a9b      	subs	r3, r3, r2
    44be:	930b      	str	r3, [sp, #44]	; 0x2c
    44c0:	4253      	negs	r3, r2
    44c2:	9308      	str	r3, [sp, #32]
    44c4:	2300      	movs	r3, #0
    44c6:	930f      	str	r3, [sp, #60]	; 0x3c
    44c8:	e7c5      	b.n	4456 <_dtoa_r+0x1be>
    44ca:	2301      	movs	r3, #1
    44cc:	930e      	str	r3, [sp, #56]	; 0x38
    44ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    44d0:	2b00      	cmp	r3, #0
    44d2:	dd65      	ble.n	45a0 <_dtoa_r+0x308>
    44d4:	001f      	movs	r7, r3
    44d6:	930d      	str	r3, [sp, #52]	; 0x34
    44d8:	9a04      	ldr	r2, [sp, #16]
    44da:	6a54      	ldr	r4, [r2, #36]	; 0x24
    44dc:	2200      	movs	r2, #0
    44de:	6062      	str	r2, [r4, #4]
    44e0:	3204      	adds	r2, #4
    44e2:	0011      	movs	r1, r2
    44e4:	3114      	adds	r1, #20
    44e6:	4299      	cmp	r1, r3
    44e8:	d95f      	bls.n	45aa <_dtoa_r+0x312>
    44ea:	6861      	ldr	r1, [r4, #4]
    44ec:	9804      	ldr	r0, [sp, #16]
    44ee:	f000 fed0 	bl	5292 <_Balloc>
    44f2:	9b04      	ldr	r3, [sp, #16]
    44f4:	6020      	str	r0, [r4, #0]
    44f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    44f8:	681b      	ldr	r3, [r3, #0]
    44fa:	930a      	str	r3, [sp, #40]	; 0x28
    44fc:	2f0e      	cmp	r7, #14
    44fe:	d900      	bls.n	4502 <_dtoa_r+0x26a>
    4500:	e105      	b.n	470e <_dtoa_r+0x476>
    4502:	2d00      	cmp	r5, #0
    4504:	d100      	bne.n	4508 <_dtoa_r+0x270>
    4506:	e102      	b.n	470e <_dtoa_r+0x476>
    4508:	9b06      	ldr	r3, [sp, #24]
    450a:	9c07      	ldr	r4, [sp, #28]
    450c:	9314      	str	r3, [sp, #80]	; 0x50
    450e:	9415      	str	r4, [sp, #84]	; 0x54
    4510:	9b03      	ldr	r3, [sp, #12]
    4512:	2b00      	cmp	r3, #0
    4514:	dc00      	bgt.n	4518 <_dtoa_r+0x280>
    4516:	e085      	b.n	4624 <_dtoa_r+0x38c>
    4518:	001a      	movs	r2, r3
    451a:	210f      	movs	r1, #15
    451c:	4b3c      	ldr	r3, [pc, #240]	; (4610 <_dtoa_r+0x378>)
    451e:	400a      	ands	r2, r1
    4520:	00d2      	lsls	r2, r2, #3
    4522:	189b      	adds	r3, r3, r2
    4524:	685c      	ldr	r4, [r3, #4]
    4526:	681b      	ldr	r3, [r3, #0]
    4528:	9310      	str	r3, [sp, #64]	; 0x40
    452a:	9411      	str	r4, [sp, #68]	; 0x44
    452c:	9b03      	ldr	r3, [sp, #12]
    452e:	2402      	movs	r4, #2
    4530:	111d      	asrs	r5, r3, #4
    4532:	06eb      	lsls	r3, r5, #27
    4534:	d50a      	bpl.n	454c <_dtoa_r+0x2b4>
    4536:	4b3a      	ldr	r3, [pc, #232]	; (4620 <_dtoa_r+0x388>)
    4538:	400d      	ands	r5, r1
    453a:	6a1a      	ldr	r2, [r3, #32]
    453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    453e:	9814      	ldr	r0, [sp, #80]	; 0x50
    4540:	9915      	ldr	r1, [sp, #84]	; 0x54
    4542:	f002 fe97 	bl	7274 <__aeabi_ddiv>
    4546:	9006      	str	r0, [sp, #24]
    4548:	9107      	str	r1, [sp, #28]
    454a:	3401      	adds	r4, #1
    454c:	4e34      	ldr	r6, [pc, #208]	; (4620 <_dtoa_r+0x388>)
    454e:	2d00      	cmp	r5, #0
    4550:	d130      	bne.n	45b4 <_dtoa_r+0x31c>
    4552:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4554:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4556:	9806      	ldr	r0, [sp, #24]
    4558:	9907      	ldr	r1, [sp, #28]
    455a:	f002 fe8b 	bl	7274 <__aeabi_ddiv>
    455e:	9006      	str	r0, [sp, #24]
    4560:	9107      	str	r1, [sp, #28]
    4562:	e07a      	b.n	465a <_dtoa_r+0x3c2>
    4564:	2301      	movs	r3, #1
    4566:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    4568:	930e      	str	r3, [sp, #56]	; 0x38
    456a:	4694      	mov	ip, r2
    456c:	9b03      	ldr	r3, [sp, #12]
    456e:	4463      	add	r3, ip
    4570:	1c5f      	adds	r7, r3, #1
    4572:	930d      	str	r3, [sp, #52]	; 0x34
    4574:	1e3b      	subs	r3, r7, #0
    4576:	dcaf      	bgt.n	44d8 <_dtoa_r+0x240>
    4578:	2301      	movs	r3, #1
    457a:	e7ad      	b.n	44d8 <_dtoa_r+0x240>
    457c:	2300      	movs	r3, #0
    457e:	e7a5      	b.n	44cc <_dtoa_r+0x234>
    4580:	2300      	movs	r3, #0
    4582:	e7f0      	b.n	4566 <_dtoa_r+0x2ce>
    4584:	2300      	movs	r3, #0
    4586:	950e      	str	r5, [sp, #56]	; 0x38
    4588:	9322      	str	r3, [sp, #136]	; 0x88
    458a:	3b01      	subs	r3, #1
    458c:	2200      	movs	r2, #0
    458e:	930d      	str	r3, [sp, #52]	; 0x34
    4590:	001f      	movs	r7, r3
    4592:	3313      	adds	r3, #19
    4594:	9223      	str	r2, [sp, #140]	; 0x8c
    4596:	e79f      	b.n	44d8 <_dtoa_r+0x240>
    4598:	2301      	movs	r3, #1
    459a:	930e      	str	r3, [sp, #56]	; 0x38
    459c:	3b02      	subs	r3, #2
    459e:	e7f5      	b.n	458c <_dtoa_r+0x2f4>
    45a0:	2301      	movs	r3, #1
    45a2:	930d      	str	r3, [sp, #52]	; 0x34
    45a4:	001f      	movs	r7, r3
    45a6:	001a      	movs	r2, r3
    45a8:	e7f4      	b.n	4594 <_dtoa_r+0x2fc>
    45aa:	6861      	ldr	r1, [r4, #4]
    45ac:	0052      	lsls	r2, r2, #1
    45ae:	3101      	adds	r1, #1
    45b0:	6061      	str	r1, [r4, #4]
    45b2:	e796      	b.n	44e2 <_dtoa_r+0x24a>
    45b4:	2301      	movs	r3, #1
    45b6:	421d      	tst	r5, r3
    45b8:	d008      	beq.n	45cc <_dtoa_r+0x334>
    45ba:	9810      	ldr	r0, [sp, #64]	; 0x40
    45bc:	9911      	ldr	r1, [sp, #68]	; 0x44
    45be:	18e4      	adds	r4, r4, r3
    45c0:	6832      	ldr	r2, [r6, #0]
    45c2:	6873      	ldr	r3, [r6, #4]
    45c4:	f003 fa8a 	bl	7adc <__aeabi_dmul>
    45c8:	9010      	str	r0, [sp, #64]	; 0x40
    45ca:	9111      	str	r1, [sp, #68]	; 0x44
    45cc:	106d      	asrs	r5, r5, #1
    45ce:	3608      	adds	r6, #8
    45d0:	e7bd      	b.n	454e <_dtoa_r+0x2b6>
    45d2:	46c0      	nop			; (mov r8, r8)
    45d4:	7ff00000 	.word	0x7ff00000
    45d8:	0000270f 	.word	0x0000270f
    45dc:	00008ae1 	.word	0x00008ae1
    45e0:	00008ae4 	.word	0x00008ae4
    45e4:	00008ab4 	.word	0x00008ab4
    45e8:	00008ab5 	.word	0x00008ab5
    45ec:	3ff00000 	.word	0x3ff00000
    45f0:	fffffc01 	.word	0xfffffc01
    45f4:	3ff80000 	.word	0x3ff80000
    45f8:	636f4361 	.word	0x636f4361
    45fc:	3fd287a7 	.word	0x3fd287a7
    4600:	8b60c8b3 	.word	0x8b60c8b3
    4604:	3fc68a28 	.word	0x3fc68a28
    4608:	509f79fb 	.word	0x509f79fb
    460c:	3fd34413 	.word	0x3fd34413
    4610:	00008b70 	.word	0x00008b70
    4614:	00000432 	.word	0x00000432
    4618:	00000412 	.word	0x00000412
    461c:	fe100000 	.word	0xfe100000
    4620:	00008b48 	.word	0x00008b48
    4624:	9b03      	ldr	r3, [sp, #12]
    4626:	2402      	movs	r4, #2
    4628:	2b00      	cmp	r3, #0
    462a:	d016      	beq.n	465a <_dtoa_r+0x3c2>
    462c:	9814      	ldr	r0, [sp, #80]	; 0x50
    462e:	9915      	ldr	r1, [sp, #84]	; 0x54
    4630:	425d      	negs	r5, r3
    4632:	230f      	movs	r3, #15
    4634:	4aca      	ldr	r2, [pc, #808]	; (4960 <_dtoa_r+0x6c8>)
    4636:	402b      	ands	r3, r5
    4638:	00db      	lsls	r3, r3, #3
    463a:	18d3      	adds	r3, r2, r3
    463c:	681a      	ldr	r2, [r3, #0]
    463e:	685b      	ldr	r3, [r3, #4]
    4640:	f003 fa4c 	bl	7adc <__aeabi_dmul>
    4644:	2300      	movs	r3, #0
    4646:	9006      	str	r0, [sp, #24]
    4648:	9107      	str	r1, [sp, #28]
    464a:	4ec6      	ldr	r6, [pc, #792]	; (4964 <_dtoa_r+0x6cc>)
    464c:	112d      	asrs	r5, r5, #4
    464e:	2d00      	cmp	r5, #0
    4650:	d000      	beq.n	4654 <_dtoa_r+0x3bc>
    4652:	e08c      	b.n	476e <_dtoa_r+0x4d6>
    4654:	2b00      	cmp	r3, #0
    4656:	d000      	beq.n	465a <_dtoa_r+0x3c2>
    4658:	e781      	b.n	455e <_dtoa_r+0x2c6>
    465a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    465c:	2b00      	cmp	r3, #0
    465e:	d100      	bne.n	4662 <_dtoa_r+0x3ca>
    4660:	e091      	b.n	4786 <_dtoa_r+0x4ee>
    4662:	9a06      	ldr	r2, [sp, #24]
    4664:	9b07      	ldr	r3, [sp, #28]
    4666:	9210      	str	r2, [sp, #64]	; 0x40
    4668:	9311      	str	r3, [sp, #68]	; 0x44
    466a:	9810      	ldr	r0, [sp, #64]	; 0x40
    466c:	9911      	ldr	r1, [sp, #68]	; 0x44
    466e:	2200      	movs	r2, #0
    4670:	4bbd      	ldr	r3, [pc, #756]	; (4968 <_dtoa_r+0x6d0>)
    4672:	f001 fd71 	bl	6158 <__aeabi_dcmplt>
    4676:	2800      	cmp	r0, #0
    4678:	d100      	bne.n	467c <_dtoa_r+0x3e4>
    467a:	e084      	b.n	4786 <_dtoa_r+0x4ee>
    467c:	2f00      	cmp	r7, #0
    467e:	d100      	bne.n	4682 <_dtoa_r+0x3ea>
    4680:	e081      	b.n	4786 <_dtoa_r+0x4ee>
    4682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4684:	2b00      	cmp	r3, #0
    4686:	dd3e      	ble.n	4706 <_dtoa_r+0x46e>
    4688:	9810      	ldr	r0, [sp, #64]	; 0x40
    468a:	9911      	ldr	r1, [sp, #68]	; 0x44
    468c:	9b03      	ldr	r3, [sp, #12]
    468e:	2200      	movs	r2, #0
    4690:	1e5e      	subs	r6, r3, #1
    4692:	4bb6      	ldr	r3, [pc, #728]	; (496c <_dtoa_r+0x6d4>)
    4694:	f003 fa22 	bl	7adc <__aeabi_dmul>
    4698:	9006      	str	r0, [sp, #24]
    469a:	9107      	str	r1, [sp, #28]
    469c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    469e:	3401      	adds	r4, #1
    46a0:	0020      	movs	r0, r4
    46a2:	f004 f805 	bl	86b0 <__aeabi_i2d>
    46a6:	9a06      	ldr	r2, [sp, #24]
    46a8:	9b07      	ldr	r3, [sp, #28]
    46aa:	f003 fa17 	bl	7adc <__aeabi_dmul>
    46ae:	2200      	movs	r2, #0
    46b0:	4baf      	ldr	r3, [pc, #700]	; (4970 <_dtoa_r+0x6d8>)
    46b2:	f002 facf 	bl	6c54 <__aeabi_dadd>
    46b6:	9012      	str	r0, [sp, #72]	; 0x48
    46b8:	9113      	str	r1, [sp, #76]	; 0x4c
    46ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
    46bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    46be:	4aad      	ldr	r2, [pc, #692]	; (4974 <_dtoa_r+0x6dc>)
    46c0:	9310      	str	r3, [sp, #64]	; 0x40
    46c2:	9411      	str	r4, [sp, #68]	; 0x44
    46c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    46c6:	189c      	adds	r4, r3, r2
    46c8:	9411      	str	r4, [sp, #68]	; 0x44
    46ca:	2d00      	cmp	r5, #0
    46cc:	d15e      	bne.n	478c <_dtoa_r+0x4f4>
    46ce:	9806      	ldr	r0, [sp, #24]
    46d0:	9907      	ldr	r1, [sp, #28]
    46d2:	2200      	movs	r2, #0
    46d4:	4ba8      	ldr	r3, [pc, #672]	; (4978 <_dtoa_r+0x6e0>)
    46d6:	f003 fc81 	bl	7fdc <__aeabi_dsub>
    46da:	9a10      	ldr	r2, [sp, #64]	; 0x40
    46dc:	0023      	movs	r3, r4
    46de:	9006      	str	r0, [sp, #24]
    46e0:	9107      	str	r1, [sp, #28]
    46e2:	f001 fd4d 	bl	6180 <__aeabi_dcmpgt>
    46e6:	2800      	cmp	r0, #0
    46e8:	d000      	beq.n	46ec <_dtoa_r+0x454>
    46ea:	e301      	b.n	4cf0 <_dtoa_r+0xa58>
    46ec:	48a3      	ldr	r0, [pc, #652]	; (497c <_dtoa_r+0x6e4>)
    46ee:	9913      	ldr	r1, [sp, #76]	; 0x4c
    46f0:	4684      	mov	ip, r0
    46f2:	4461      	add	r1, ip
    46f4:	000b      	movs	r3, r1
    46f6:	9806      	ldr	r0, [sp, #24]
    46f8:	9907      	ldr	r1, [sp, #28]
    46fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    46fc:	f001 fd2c 	bl	6158 <__aeabi_dcmplt>
    4700:	2800      	cmp	r0, #0
    4702:	d000      	beq.n	4706 <_dtoa_r+0x46e>
    4704:	e2e8      	b.n	4cd8 <_dtoa_r+0xa40>
    4706:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4708:	9c15      	ldr	r4, [sp, #84]	; 0x54
    470a:	9306      	str	r3, [sp, #24]
    470c:	9407      	str	r4, [sp, #28]
    470e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    4710:	2b00      	cmp	r3, #0
    4712:	da00      	bge.n	4716 <_dtoa_r+0x47e>
    4714:	e157      	b.n	49c6 <_dtoa_r+0x72e>
    4716:	9a03      	ldr	r2, [sp, #12]
    4718:	2a0e      	cmp	r2, #14
    471a:	dd00      	ble.n	471e <_dtoa_r+0x486>
    471c:	e153      	b.n	49c6 <_dtoa_r+0x72e>
    471e:	4b90      	ldr	r3, [pc, #576]	; (4960 <_dtoa_r+0x6c8>)
    4720:	00d2      	lsls	r2, r2, #3
    4722:	189b      	adds	r3, r3, r2
    4724:	685c      	ldr	r4, [r3, #4]
    4726:	681b      	ldr	r3, [r3, #0]
    4728:	9308      	str	r3, [sp, #32]
    472a:	9409      	str	r4, [sp, #36]	; 0x24
    472c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    472e:	2b00      	cmp	r3, #0
    4730:	db00      	blt.n	4734 <_dtoa_r+0x49c>
    4732:	e0ce      	b.n	48d2 <_dtoa_r+0x63a>
    4734:	2f00      	cmp	r7, #0
    4736:	dd00      	ble.n	473a <_dtoa_r+0x4a2>
    4738:	e0cb      	b.n	48d2 <_dtoa_r+0x63a>
    473a:	d000      	beq.n	473e <_dtoa_r+0x4a6>
    473c:	e2cf      	b.n	4cde <_dtoa_r+0xa46>
    473e:	9808      	ldr	r0, [sp, #32]
    4740:	9909      	ldr	r1, [sp, #36]	; 0x24
    4742:	2200      	movs	r2, #0
    4744:	4b8c      	ldr	r3, [pc, #560]	; (4978 <_dtoa_r+0x6e0>)
    4746:	f003 f9c9 	bl	7adc <__aeabi_dmul>
    474a:	9a06      	ldr	r2, [sp, #24]
    474c:	9b07      	ldr	r3, [sp, #28]
    474e:	f001 fd21 	bl	6194 <__aeabi_dcmpge>
    4752:	003e      	movs	r6, r7
    4754:	9708      	str	r7, [sp, #32]
    4756:	2800      	cmp	r0, #0
    4758:	d000      	beq.n	475c <_dtoa_r+0x4c4>
    475a:	e2a4      	b.n	4ca6 <_dtoa_r+0xa0e>
    475c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    475e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4760:	1c5d      	adds	r5, r3, #1
    4762:	2331      	movs	r3, #49	; 0x31
    4764:	7013      	strb	r3, [r2, #0]
    4766:	9b03      	ldr	r3, [sp, #12]
    4768:	3301      	adds	r3, #1
    476a:	9303      	str	r3, [sp, #12]
    476c:	e29f      	b.n	4cae <_dtoa_r+0xa16>
    476e:	2201      	movs	r2, #1
    4770:	4215      	tst	r5, r2
    4772:	d005      	beq.n	4780 <_dtoa_r+0x4e8>
    4774:	18a4      	adds	r4, r4, r2
    4776:	6832      	ldr	r2, [r6, #0]
    4778:	6873      	ldr	r3, [r6, #4]
    477a:	f003 f9af 	bl	7adc <__aeabi_dmul>
    477e:	2301      	movs	r3, #1
    4780:	106d      	asrs	r5, r5, #1
    4782:	3608      	adds	r6, #8
    4784:	e763      	b.n	464e <_dtoa_r+0x3b6>
    4786:	9e03      	ldr	r6, [sp, #12]
    4788:	003d      	movs	r5, r7
    478a:	e789      	b.n	46a0 <_dtoa_r+0x408>
    478c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    478e:	1e69      	subs	r1, r5, #1
    4790:	1952      	adds	r2, r2, r5
    4792:	9217      	str	r2, [sp, #92]	; 0x5c
    4794:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4796:	4b72      	ldr	r3, [pc, #456]	; (4960 <_dtoa_r+0x6c8>)
    4798:	00c9      	lsls	r1, r1, #3
    479a:	2a00      	cmp	r2, #0
    479c:	d04a      	beq.n	4834 <_dtoa_r+0x59c>
    479e:	185b      	adds	r3, r3, r1
    47a0:	681a      	ldr	r2, [r3, #0]
    47a2:	685b      	ldr	r3, [r3, #4]
    47a4:	2000      	movs	r0, #0
    47a6:	4976      	ldr	r1, [pc, #472]	; (4980 <_dtoa_r+0x6e8>)
    47a8:	f002 fd64 	bl	7274 <__aeabi_ddiv>
    47ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
    47ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    47b0:	f003 fc14 	bl	7fdc <__aeabi_dsub>
    47b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    47b6:	9010      	str	r0, [sp, #64]	; 0x40
    47b8:	9111      	str	r1, [sp, #68]	; 0x44
    47ba:	9312      	str	r3, [sp, #72]	; 0x48
    47bc:	9806      	ldr	r0, [sp, #24]
    47be:	9907      	ldr	r1, [sp, #28]
    47c0:	f003 ff42 	bl	8648 <__aeabi_d2iz>
    47c4:	0004      	movs	r4, r0
    47c6:	f003 ff73 	bl	86b0 <__aeabi_i2d>
    47ca:	0002      	movs	r2, r0
    47cc:	000b      	movs	r3, r1
    47ce:	9806      	ldr	r0, [sp, #24]
    47d0:	9907      	ldr	r1, [sp, #28]
    47d2:	f003 fc03 	bl	7fdc <__aeabi_dsub>
    47d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    47d8:	3430      	adds	r4, #48	; 0x30
    47da:	1c5d      	adds	r5, r3, #1
    47dc:	701c      	strb	r4, [r3, #0]
    47de:	9a10      	ldr	r2, [sp, #64]	; 0x40
    47e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    47e2:	9006      	str	r0, [sp, #24]
    47e4:	9107      	str	r1, [sp, #28]
    47e6:	f001 fcb7 	bl	6158 <__aeabi_dcmplt>
    47ea:	2800      	cmp	r0, #0
    47ec:	d165      	bne.n	48ba <_dtoa_r+0x622>
    47ee:	9a06      	ldr	r2, [sp, #24]
    47f0:	9b07      	ldr	r3, [sp, #28]
    47f2:	2000      	movs	r0, #0
    47f4:	495c      	ldr	r1, [pc, #368]	; (4968 <_dtoa_r+0x6d0>)
    47f6:	f003 fbf1 	bl	7fdc <__aeabi_dsub>
    47fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    47fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    47fe:	f001 fcab 	bl	6158 <__aeabi_dcmplt>
    4802:	2800      	cmp	r0, #0
    4804:	d000      	beq.n	4808 <_dtoa_r+0x570>
    4806:	e0be      	b.n	4986 <_dtoa_r+0x6ee>
    4808:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    480a:	429d      	cmp	r5, r3
    480c:	d100      	bne.n	4810 <_dtoa_r+0x578>
    480e:	e77a      	b.n	4706 <_dtoa_r+0x46e>
    4810:	9810      	ldr	r0, [sp, #64]	; 0x40
    4812:	9911      	ldr	r1, [sp, #68]	; 0x44
    4814:	2200      	movs	r2, #0
    4816:	4b55      	ldr	r3, [pc, #340]	; (496c <_dtoa_r+0x6d4>)
    4818:	f003 f960 	bl	7adc <__aeabi_dmul>
    481c:	2200      	movs	r2, #0
    481e:	9010      	str	r0, [sp, #64]	; 0x40
    4820:	9111      	str	r1, [sp, #68]	; 0x44
    4822:	9806      	ldr	r0, [sp, #24]
    4824:	9907      	ldr	r1, [sp, #28]
    4826:	4b51      	ldr	r3, [pc, #324]	; (496c <_dtoa_r+0x6d4>)
    4828:	f003 f958 	bl	7adc <__aeabi_dmul>
    482c:	9512      	str	r5, [sp, #72]	; 0x48
    482e:	9006      	str	r0, [sp, #24]
    4830:	9107      	str	r1, [sp, #28]
    4832:	e7c3      	b.n	47bc <_dtoa_r+0x524>
    4834:	1859      	adds	r1, r3, r1
    4836:	6808      	ldr	r0, [r1, #0]
    4838:	6849      	ldr	r1, [r1, #4]
    483a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    483c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    483e:	f003 f94d 	bl	7adc <__aeabi_dmul>
    4842:	9010      	str	r0, [sp, #64]	; 0x40
    4844:	9111      	str	r1, [sp, #68]	; 0x44
    4846:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4848:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    484a:	9806      	ldr	r0, [sp, #24]
    484c:	9907      	ldr	r1, [sp, #28]
    484e:	f003 fefb 	bl	8648 <__aeabi_d2iz>
    4852:	9012      	str	r0, [sp, #72]	; 0x48
    4854:	f003 ff2c 	bl	86b0 <__aeabi_i2d>
    4858:	0002      	movs	r2, r0
    485a:	000b      	movs	r3, r1
    485c:	9806      	ldr	r0, [sp, #24]
    485e:	9907      	ldr	r1, [sp, #28]
    4860:	f003 fbbc 	bl	7fdc <__aeabi_dsub>
    4864:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4866:	9006      	str	r0, [sp, #24]
    4868:	9107      	str	r1, [sp, #28]
    486a:	3330      	adds	r3, #48	; 0x30
    486c:	7023      	strb	r3, [r4, #0]
    486e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    4870:	3401      	adds	r4, #1
    4872:	2200      	movs	r2, #0
    4874:	42a3      	cmp	r3, r4
    4876:	d124      	bne.n	48c2 <_dtoa_r+0x62a>
    4878:	4b41      	ldr	r3, [pc, #260]	; (4980 <_dtoa_r+0x6e8>)
    487a:	9810      	ldr	r0, [sp, #64]	; 0x40
    487c:	9911      	ldr	r1, [sp, #68]	; 0x44
    487e:	f002 f9e9 	bl	6c54 <__aeabi_dadd>
    4882:	0002      	movs	r2, r0
    4884:	000b      	movs	r3, r1
    4886:	9806      	ldr	r0, [sp, #24]
    4888:	9907      	ldr	r1, [sp, #28]
    488a:	f001 fc79 	bl	6180 <__aeabi_dcmpgt>
    488e:	2800      	cmp	r0, #0
    4890:	d000      	beq.n	4894 <_dtoa_r+0x5fc>
    4892:	e078      	b.n	4986 <_dtoa_r+0x6ee>
    4894:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4896:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4898:	2000      	movs	r0, #0
    489a:	4939      	ldr	r1, [pc, #228]	; (4980 <_dtoa_r+0x6e8>)
    489c:	f003 fb9e 	bl	7fdc <__aeabi_dsub>
    48a0:	0002      	movs	r2, r0
    48a2:	000b      	movs	r3, r1
    48a4:	9806      	ldr	r0, [sp, #24]
    48a6:	9907      	ldr	r1, [sp, #28]
    48a8:	f001 fc56 	bl	6158 <__aeabi_dcmplt>
    48ac:	2800      	cmp	r0, #0
    48ae:	d100      	bne.n	48b2 <_dtoa_r+0x61a>
    48b0:	e729      	b.n	4706 <_dtoa_r+0x46e>
    48b2:	1e6b      	subs	r3, r5, #1
    48b4:	781a      	ldrb	r2, [r3, #0]
    48b6:	2a30      	cmp	r2, #48	; 0x30
    48b8:	d001      	beq.n	48be <_dtoa_r+0x626>
    48ba:	9603      	str	r6, [sp, #12]
    48bc:	e03f      	b.n	493e <_dtoa_r+0x6a6>
    48be:	001d      	movs	r5, r3
    48c0:	e7f7      	b.n	48b2 <_dtoa_r+0x61a>
    48c2:	9806      	ldr	r0, [sp, #24]
    48c4:	9907      	ldr	r1, [sp, #28]
    48c6:	4b29      	ldr	r3, [pc, #164]	; (496c <_dtoa_r+0x6d4>)
    48c8:	f003 f908 	bl	7adc <__aeabi_dmul>
    48cc:	9006      	str	r0, [sp, #24]
    48ce:	9107      	str	r1, [sp, #28]
    48d0:	e7bb      	b.n	484a <_dtoa_r+0x5b2>
    48d2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    48d4:	9a08      	ldr	r2, [sp, #32]
    48d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    48d8:	9806      	ldr	r0, [sp, #24]
    48da:	9907      	ldr	r1, [sp, #28]
    48dc:	f002 fcca 	bl	7274 <__aeabi_ddiv>
    48e0:	f003 feb2 	bl	8648 <__aeabi_d2iz>
    48e4:	0004      	movs	r4, r0
    48e6:	f003 fee3 	bl	86b0 <__aeabi_i2d>
    48ea:	9a08      	ldr	r2, [sp, #32]
    48ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    48ee:	f003 f8f5 	bl	7adc <__aeabi_dmul>
    48f2:	000b      	movs	r3, r1
    48f4:	0002      	movs	r2, r0
    48f6:	9806      	ldr	r0, [sp, #24]
    48f8:	9907      	ldr	r1, [sp, #28]
    48fa:	f003 fb6f 	bl	7fdc <__aeabi_dsub>
    48fe:	0023      	movs	r3, r4
    4900:	3330      	adds	r3, #48	; 0x30
    4902:	7033      	strb	r3, [r6, #0]
    4904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4906:	1c75      	adds	r5, r6, #1
    4908:	1aeb      	subs	r3, r5, r3
    490a:	429f      	cmp	r7, r3
    490c:	d14c      	bne.n	49a8 <_dtoa_r+0x710>
    490e:	0002      	movs	r2, r0
    4910:	000b      	movs	r3, r1
    4912:	f002 f99f 	bl	6c54 <__aeabi_dadd>
    4916:	0006      	movs	r6, r0
    4918:	000f      	movs	r7, r1
    491a:	0002      	movs	r2, r0
    491c:	000b      	movs	r3, r1
    491e:	9808      	ldr	r0, [sp, #32]
    4920:	9909      	ldr	r1, [sp, #36]	; 0x24
    4922:	f001 fc19 	bl	6158 <__aeabi_dcmplt>
    4926:	2800      	cmp	r0, #0
    4928:	d12c      	bne.n	4984 <_dtoa_r+0x6ec>
    492a:	9808      	ldr	r0, [sp, #32]
    492c:	9909      	ldr	r1, [sp, #36]	; 0x24
    492e:	0032      	movs	r2, r6
    4930:	003b      	movs	r3, r7
    4932:	f001 fc0b 	bl	614c <__aeabi_dcmpeq>
    4936:	2800      	cmp	r0, #0
    4938:	d001      	beq.n	493e <_dtoa_r+0x6a6>
    493a:	07e3      	lsls	r3, r4, #31
    493c:	d422      	bmi.n	4984 <_dtoa_r+0x6ec>
    493e:	9905      	ldr	r1, [sp, #20]
    4940:	9804      	ldr	r0, [sp, #16]
    4942:	f000 fcde 	bl	5302 <_Bfree>
    4946:	2300      	movs	r3, #0
    4948:	702b      	strb	r3, [r5, #0]
    494a:	9b03      	ldr	r3, [sp, #12]
    494c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    494e:	3301      	adds	r3, #1
    4950:	6013      	str	r3, [r2, #0]
    4952:	9b26      	ldr	r3, [sp, #152]	; 0x98
    4954:	2b00      	cmp	r3, #0
    4956:	d100      	bne.n	495a <_dtoa_r+0x6c2>
    4958:	e275      	b.n	4e46 <_dtoa_r+0xbae>
    495a:	601d      	str	r5, [r3, #0]
    495c:	e273      	b.n	4e46 <_dtoa_r+0xbae>
    495e:	46c0      	nop			; (mov r8, r8)
    4960:	00008b70 	.word	0x00008b70
    4964:	00008b48 	.word	0x00008b48
    4968:	3ff00000 	.word	0x3ff00000
    496c:	40240000 	.word	0x40240000
    4970:	401c0000 	.word	0x401c0000
    4974:	fcc00000 	.word	0xfcc00000
    4978:	40140000 	.word	0x40140000
    497c:	7cc00000 	.word	0x7cc00000
    4980:	3fe00000 	.word	0x3fe00000
    4984:	9e03      	ldr	r6, [sp, #12]
    4986:	1e6b      	subs	r3, r5, #1
    4988:	781a      	ldrb	r2, [r3, #0]
    498a:	2a39      	cmp	r2, #57	; 0x39
    498c:	d106      	bne.n	499c <_dtoa_r+0x704>
    498e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4990:	429a      	cmp	r2, r3
    4992:	d107      	bne.n	49a4 <_dtoa_r+0x70c>
    4994:	2330      	movs	r3, #48	; 0x30
    4996:	7013      	strb	r3, [r2, #0]
    4998:	0013      	movs	r3, r2
    499a:	3601      	adds	r6, #1
    499c:	781a      	ldrb	r2, [r3, #0]
    499e:	3201      	adds	r2, #1
    49a0:	701a      	strb	r2, [r3, #0]
    49a2:	e78a      	b.n	48ba <_dtoa_r+0x622>
    49a4:	001d      	movs	r5, r3
    49a6:	e7ee      	b.n	4986 <_dtoa_r+0x6ee>
    49a8:	2200      	movs	r2, #0
    49aa:	4bcf      	ldr	r3, [pc, #828]	; (4ce8 <_dtoa_r+0xa50>)
    49ac:	f003 f896 	bl	7adc <__aeabi_dmul>
    49b0:	2200      	movs	r2, #0
    49b2:	2300      	movs	r3, #0
    49b4:	9006      	str	r0, [sp, #24]
    49b6:	9107      	str	r1, [sp, #28]
    49b8:	002e      	movs	r6, r5
    49ba:	f001 fbc7 	bl	614c <__aeabi_dcmpeq>
    49be:	2800      	cmp	r0, #0
    49c0:	d100      	bne.n	49c4 <_dtoa_r+0x72c>
    49c2:	e787      	b.n	48d4 <_dtoa_r+0x63c>
    49c4:	e7bb      	b.n	493e <_dtoa_r+0x6a6>
    49c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    49c8:	2a00      	cmp	r2, #0
    49ca:	d100      	bne.n	49ce <_dtoa_r+0x736>
    49cc:	e087      	b.n	4ade <_dtoa_r+0x846>
    49ce:	9a22      	ldr	r2, [sp, #136]	; 0x88
    49d0:	2a01      	cmp	r2, #1
    49d2:	dc6e      	bgt.n	4ab2 <_dtoa_r+0x81a>
    49d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    49d6:	2a00      	cmp	r2, #0
    49d8:	d067      	beq.n	4aaa <_dtoa_r+0x812>
    49da:	4ac4      	ldr	r2, [pc, #784]	; (4cec <_dtoa_r+0xa54>)
    49dc:	189b      	adds	r3, r3, r2
    49de:	9d08      	ldr	r5, [sp, #32]
    49e0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    49e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    49e4:	2101      	movs	r1, #1
    49e6:	18d2      	adds	r2, r2, r3
    49e8:	920b      	str	r2, [sp, #44]	; 0x2c
    49ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    49ec:	9804      	ldr	r0, [sp, #16]
    49ee:	18d3      	adds	r3, r2, r3
    49f0:	930c      	str	r3, [sp, #48]	; 0x30
    49f2:	f000 fd24 	bl	543e <__i2b>
    49f6:	0006      	movs	r6, r0
    49f8:	2c00      	cmp	r4, #0
    49fa:	dd0e      	ble.n	4a1a <_dtoa_r+0x782>
    49fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    49fe:	2b00      	cmp	r3, #0
    4a00:	dd0b      	ble.n	4a1a <_dtoa_r+0x782>
    4a02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4a04:	0023      	movs	r3, r4
    4a06:	4294      	cmp	r4, r2
    4a08:	dd00      	ble.n	4a0c <_dtoa_r+0x774>
    4a0a:	0013      	movs	r3, r2
    4a0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4a0e:	1ae4      	subs	r4, r4, r3
    4a10:	1ad2      	subs	r2, r2, r3
    4a12:	920b      	str	r2, [sp, #44]	; 0x2c
    4a14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4a16:	1ad3      	subs	r3, r2, r3
    4a18:	930c      	str	r3, [sp, #48]	; 0x30
    4a1a:	9b08      	ldr	r3, [sp, #32]
    4a1c:	2b00      	cmp	r3, #0
    4a1e:	d01e      	beq.n	4a5e <_dtoa_r+0x7c6>
    4a20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4a22:	2b00      	cmp	r3, #0
    4a24:	d05f      	beq.n	4ae6 <_dtoa_r+0x84e>
    4a26:	2d00      	cmp	r5, #0
    4a28:	dd11      	ble.n	4a4e <_dtoa_r+0x7b6>
    4a2a:	0031      	movs	r1, r6
    4a2c:	002a      	movs	r2, r5
    4a2e:	9804      	ldr	r0, [sp, #16]
    4a30:	f000 fd9e 	bl	5570 <__pow5mult>
    4a34:	9a05      	ldr	r2, [sp, #20]
    4a36:	0001      	movs	r1, r0
    4a38:	0006      	movs	r6, r0
    4a3a:	9804      	ldr	r0, [sp, #16]
    4a3c:	f000 fd08 	bl	5450 <__multiply>
    4a40:	9905      	ldr	r1, [sp, #20]
    4a42:	9010      	str	r0, [sp, #64]	; 0x40
    4a44:	9804      	ldr	r0, [sp, #16]
    4a46:	f000 fc5c 	bl	5302 <_Bfree>
    4a4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4a4c:	9305      	str	r3, [sp, #20]
    4a4e:	9b08      	ldr	r3, [sp, #32]
    4a50:	1b5a      	subs	r2, r3, r5
    4a52:	d004      	beq.n	4a5e <_dtoa_r+0x7c6>
    4a54:	9905      	ldr	r1, [sp, #20]
    4a56:	9804      	ldr	r0, [sp, #16]
    4a58:	f000 fd8a 	bl	5570 <__pow5mult>
    4a5c:	9005      	str	r0, [sp, #20]
    4a5e:	2101      	movs	r1, #1
    4a60:	9804      	ldr	r0, [sp, #16]
    4a62:	f000 fcec 	bl	543e <__i2b>
    4a66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4a68:	9008      	str	r0, [sp, #32]
    4a6a:	2b00      	cmp	r3, #0
    4a6c:	dd3d      	ble.n	4aea <_dtoa_r+0x852>
    4a6e:	001a      	movs	r2, r3
    4a70:	0001      	movs	r1, r0
    4a72:	9804      	ldr	r0, [sp, #16]
    4a74:	f000 fd7c 	bl	5570 <__pow5mult>
    4a78:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4a7a:	9008      	str	r0, [sp, #32]
    4a7c:	2500      	movs	r5, #0
    4a7e:	2b01      	cmp	r3, #1
    4a80:	dc3b      	bgt.n	4afa <_dtoa_r+0x862>
    4a82:	2500      	movs	r5, #0
    4a84:	9b06      	ldr	r3, [sp, #24]
    4a86:	42ab      	cmp	r3, r5
    4a88:	d133      	bne.n	4af2 <_dtoa_r+0x85a>
    4a8a:	9b07      	ldr	r3, [sp, #28]
    4a8c:	031b      	lsls	r3, r3, #12
    4a8e:	42ab      	cmp	r3, r5
    4a90:	d12f      	bne.n	4af2 <_dtoa_r+0x85a>
    4a92:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4a94:	9a07      	ldr	r2, [sp, #28]
    4a96:	4213      	tst	r3, r2
    4a98:	d02b      	beq.n	4af2 <_dtoa_r+0x85a>
    4a9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4a9c:	3501      	adds	r5, #1
    4a9e:	3301      	adds	r3, #1
    4aa0:	930b      	str	r3, [sp, #44]	; 0x2c
    4aa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4aa4:	3301      	adds	r3, #1
    4aa6:	930c      	str	r3, [sp, #48]	; 0x30
    4aa8:	e023      	b.n	4af2 <_dtoa_r+0x85a>
    4aaa:	2336      	movs	r3, #54	; 0x36
    4aac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    4aae:	1a9b      	subs	r3, r3, r2
    4ab0:	e795      	b.n	49de <_dtoa_r+0x746>
    4ab2:	9b08      	ldr	r3, [sp, #32]
    4ab4:	1e7d      	subs	r5, r7, #1
    4ab6:	42ab      	cmp	r3, r5
    4ab8:	db06      	blt.n	4ac8 <_dtoa_r+0x830>
    4aba:	1b5d      	subs	r5, r3, r5
    4abc:	2f00      	cmp	r7, #0
    4abe:	da0b      	bge.n	4ad8 <_dtoa_r+0x840>
    4ac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4ac2:	1bdc      	subs	r4, r3, r7
    4ac4:	2300      	movs	r3, #0
    4ac6:	e78c      	b.n	49e2 <_dtoa_r+0x74a>
    4ac8:	9b08      	ldr	r3, [sp, #32]
    4aca:	9508      	str	r5, [sp, #32]
    4acc:	1aea      	subs	r2, r5, r3
    4ace:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4ad0:	2500      	movs	r5, #0
    4ad2:	189b      	adds	r3, r3, r2
    4ad4:	930f      	str	r3, [sp, #60]	; 0x3c
    4ad6:	e7f1      	b.n	4abc <_dtoa_r+0x824>
    4ad8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4ada:	003b      	movs	r3, r7
    4adc:	e781      	b.n	49e2 <_dtoa_r+0x74a>
    4ade:	9d08      	ldr	r5, [sp, #32]
    4ae0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4ae2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4ae4:	e788      	b.n	49f8 <_dtoa_r+0x760>
    4ae6:	9a08      	ldr	r2, [sp, #32]
    4ae8:	e7b4      	b.n	4a54 <_dtoa_r+0x7bc>
    4aea:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4aec:	2500      	movs	r5, #0
    4aee:	2b01      	cmp	r3, #1
    4af0:	ddc7      	ble.n	4a82 <_dtoa_r+0x7ea>
    4af2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4af4:	2001      	movs	r0, #1
    4af6:	2b00      	cmp	r3, #0
    4af8:	d00b      	beq.n	4b12 <_dtoa_r+0x87a>
    4afa:	9b08      	ldr	r3, [sp, #32]
    4afc:	9a08      	ldr	r2, [sp, #32]
    4afe:	691b      	ldr	r3, [r3, #16]
    4b00:	930f      	str	r3, [sp, #60]	; 0x3c
    4b02:	3303      	adds	r3, #3
    4b04:	009b      	lsls	r3, r3, #2
    4b06:	18d3      	adds	r3, r2, r3
    4b08:	6858      	ldr	r0, [r3, #4]
    4b0a:	f000 fc4f 	bl	53ac <__hi0bits>
    4b0e:	2320      	movs	r3, #32
    4b10:	1a18      	subs	r0, r3, r0
    4b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4b14:	18c0      	adds	r0, r0, r3
    4b16:	231f      	movs	r3, #31
    4b18:	4018      	ands	r0, r3
    4b1a:	d100      	bne.n	4b1e <_dtoa_r+0x886>
    4b1c:	e0ab      	b.n	4c76 <_dtoa_r+0x9de>
    4b1e:	3301      	adds	r3, #1
    4b20:	1a1b      	subs	r3, r3, r0
    4b22:	2b04      	cmp	r3, #4
    4b24:	dc00      	bgt.n	4b28 <_dtoa_r+0x890>
    4b26:	e09b      	b.n	4c60 <_dtoa_r+0x9c8>
    4b28:	231c      	movs	r3, #28
    4b2a:	1a18      	subs	r0, r3, r0
    4b2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4b2e:	1824      	adds	r4, r4, r0
    4b30:	181b      	adds	r3, r3, r0
    4b32:	930b      	str	r3, [sp, #44]	; 0x2c
    4b34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4b36:	181b      	adds	r3, r3, r0
    4b38:	930c      	str	r3, [sp, #48]	; 0x30
    4b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4b3c:	2b00      	cmp	r3, #0
    4b3e:	dd05      	ble.n	4b4c <_dtoa_r+0x8b4>
    4b40:	001a      	movs	r2, r3
    4b42:	9905      	ldr	r1, [sp, #20]
    4b44:	9804      	ldr	r0, [sp, #16]
    4b46:	f000 fd65 	bl	5614 <__lshift>
    4b4a:	9005      	str	r0, [sp, #20]
    4b4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4b4e:	2b00      	cmp	r3, #0
    4b50:	dd05      	ble.n	4b5e <_dtoa_r+0x8c6>
    4b52:	001a      	movs	r2, r3
    4b54:	9908      	ldr	r1, [sp, #32]
    4b56:	9804      	ldr	r0, [sp, #16]
    4b58:	f000 fd5c 	bl	5614 <__lshift>
    4b5c:	9008      	str	r0, [sp, #32]
    4b5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4b60:	2b00      	cmp	r3, #0
    4b62:	d100      	bne.n	4b66 <_dtoa_r+0x8ce>
    4b64:	e089      	b.n	4c7a <_dtoa_r+0x9e2>
    4b66:	9908      	ldr	r1, [sp, #32]
    4b68:	9805      	ldr	r0, [sp, #20]
    4b6a:	f000 fda4 	bl	56b6 <__mcmp>
    4b6e:	2800      	cmp	r0, #0
    4b70:	db00      	blt.n	4b74 <_dtoa_r+0x8dc>
    4b72:	e082      	b.n	4c7a <_dtoa_r+0x9e2>
    4b74:	9b03      	ldr	r3, [sp, #12]
    4b76:	220a      	movs	r2, #10
    4b78:	3b01      	subs	r3, #1
    4b7a:	9303      	str	r3, [sp, #12]
    4b7c:	9905      	ldr	r1, [sp, #20]
    4b7e:	2300      	movs	r3, #0
    4b80:	9804      	ldr	r0, [sp, #16]
    4b82:	f000 fbd7 	bl	5334 <__multadd>
    4b86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4b88:	9005      	str	r0, [sp, #20]
    4b8a:	2b00      	cmp	r3, #0
    4b8c:	d100      	bne.n	4b90 <_dtoa_r+0x8f8>
    4b8e:	e15d      	b.n	4e4c <_dtoa_r+0xbb4>
    4b90:	2300      	movs	r3, #0
    4b92:	0031      	movs	r1, r6
    4b94:	220a      	movs	r2, #10
    4b96:	9804      	ldr	r0, [sp, #16]
    4b98:	f000 fbcc 	bl	5334 <__multadd>
    4b9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4b9e:	0006      	movs	r6, r0
    4ba0:	2b00      	cmp	r3, #0
    4ba2:	dc02      	bgt.n	4baa <_dtoa_r+0x912>
    4ba4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4ba6:	2b02      	cmp	r3, #2
    4ba8:	dc6d      	bgt.n	4c86 <_dtoa_r+0x9ee>
    4baa:	2c00      	cmp	r4, #0
    4bac:	dd05      	ble.n	4bba <_dtoa_r+0x922>
    4bae:	0031      	movs	r1, r6
    4bb0:	0022      	movs	r2, r4
    4bb2:	9804      	ldr	r0, [sp, #16]
    4bb4:	f000 fd2e 	bl	5614 <__lshift>
    4bb8:	0006      	movs	r6, r0
    4bba:	0030      	movs	r0, r6
    4bbc:	2d00      	cmp	r5, #0
    4bbe:	d011      	beq.n	4be4 <_dtoa_r+0x94c>
    4bc0:	6871      	ldr	r1, [r6, #4]
    4bc2:	9804      	ldr	r0, [sp, #16]
    4bc4:	f000 fb65 	bl	5292 <_Balloc>
    4bc8:	0031      	movs	r1, r6
    4bca:	0004      	movs	r4, r0
    4bcc:	6933      	ldr	r3, [r6, #16]
    4bce:	310c      	adds	r1, #12
    4bd0:	1c9a      	adds	r2, r3, #2
    4bd2:	0092      	lsls	r2, r2, #2
    4bd4:	300c      	adds	r0, #12
    4bd6:	f7fe fc4b 	bl	3470 <memcpy>
    4bda:	2201      	movs	r2, #1
    4bdc:	0021      	movs	r1, r4
    4bde:	9804      	ldr	r0, [sp, #16]
    4be0:	f000 fd18 	bl	5614 <__lshift>
    4be4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4be8:	3f01      	subs	r7, #1
    4bea:	930b      	str	r3, [sp, #44]	; 0x2c
    4bec:	19db      	adds	r3, r3, r7
    4bee:	0037      	movs	r7, r6
    4bf0:	0006      	movs	r6, r0
    4bf2:	930f      	str	r3, [sp, #60]	; 0x3c
    4bf4:	9908      	ldr	r1, [sp, #32]
    4bf6:	9805      	ldr	r0, [sp, #20]
    4bf8:	f7ff faca 	bl	4190 <quorem>
    4bfc:	0039      	movs	r1, r7
    4bfe:	900d      	str	r0, [sp, #52]	; 0x34
    4c00:	0004      	movs	r4, r0
    4c02:	9805      	ldr	r0, [sp, #20]
    4c04:	f000 fd57 	bl	56b6 <__mcmp>
    4c08:	0032      	movs	r2, r6
    4c0a:	900e      	str	r0, [sp, #56]	; 0x38
    4c0c:	9908      	ldr	r1, [sp, #32]
    4c0e:	9804      	ldr	r0, [sp, #16]
    4c10:	f000 fd6a 	bl	56e8 <__mdiff>
    4c14:	2301      	movs	r3, #1
    4c16:	930c      	str	r3, [sp, #48]	; 0x30
    4c18:	68c3      	ldr	r3, [r0, #12]
    4c1a:	3430      	adds	r4, #48	; 0x30
    4c1c:	0005      	movs	r5, r0
    4c1e:	2b00      	cmp	r3, #0
    4c20:	d104      	bne.n	4c2c <_dtoa_r+0x994>
    4c22:	0001      	movs	r1, r0
    4c24:	9805      	ldr	r0, [sp, #20]
    4c26:	f000 fd46 	bl	56b6 <__mcmp>
    4c2a:	900c      	str	r0, [sp, #48]	; 0x30
    4c2c:	0029      	movs	r1, r5
    4c2e:	9804      	ldr	r0, [sp, #16]
    4c30:	f000 fb67 	bl	5302 <_Bfree>
    4c34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4c36:	9a22      	ldr	r2, [sp, #136]	; 0x88
    4c38:	4313      	orrs	r3, r2
    4c3a:	d000      	beq.n	4c3e <_dtoa_r+0x9a6>
    4c3c:	e089      	b.n	4d52 <_dtoa_r+0xaba>
    4c3e:	9a06      	ldr	r2, [sp, #24]
    4c40:	3301      	adds	r3, #1
    4c42:	4213      	tst	r3, r2
    4c44:	d000      	beq.n	4c48 <_dtoa_r+0x9b0>
    4c46:	e084      	b.n	4d52 <_dtoa_r+0xaba>
    4c48:	2c39      	cmp	r4, #57	; 0x39
    4c4a:	d100      	bne.n	4c4e <_dtoa_r+0x9b6>
    4c4c:	e0a3      	b.n	4d96 <_dtoa_r+0xafe>
    4c4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4c50:	2b00      	cmp	r3, #0
    4c52:	dd01      	ble.n	4c58 <_dtoa_r+0x9c0>
    4c54:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    4c56:	3431      	adds	r4, #49	; 0x31
    4c58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4c5a:	1c5d      	adds	r5, r3, #1
    4c5c:	701c      	strb	r4, [r3, #0]
    4c5e:	e027      	b.n	4cb0 <_dtoa_r+0xa18>
    4c60:	2b04      	cmp	r3, #4
    4c62:	d100      	bne.n	4c66 <_dtoa_r+0x9ce>
    4c64:	e769      	b.n	4b3a <_dtoa_r+0x8a2>
    4c66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4c68:	331c      	adds	r3, #28
    4c6a:	18d2      	adds	r2, r2, r3
    4c6c:	920b      	str	r2, [sp, #44]	; 0x2c
    4c6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4c70:	18e4      	adds	r4, r4, r3
    4c72:	18d3      	adds	r3, r2, r3
    4c74:	e760      	b.n	4b38 <_dtoa_r+0x8a0>
    4c76:	0003      	movs	r3, r0
    4c78:	e7f5      	b.n	4c66 <_dtoa_r+0x9ce>
    4c7a:	2f00      	cmp	r7, #0
    4c7c:	dc3c      	bgt.n	4cf8 <_dtoa_r+0xa60>
    4c7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4c80:	2b02      	cmp	r3, #2
    4c82:	dd39      	ble.n	4cf8 <_dtoa_r+0xa60>
    4c84:	970d      	str	r7, [sp, #52]	; 0x34
    4c86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4c88:	2b00      	cmp	r3, #0
    4c8a:	d10c      	bne.n	4ca6 <_dtoa_r+0xa0e>
    4c8c:	9908      	ldr	r1, [sp, #32]
    4c8e:	2205      	movs	r2, #5
    4c90:	9804      	ldr	r0, [sp, #16]
    4c92:	f000 fb4f 	bl	5334 <__multadd>
    4c96:	9008      	str	r0, [sp, #32]
    4c98:	0001      	movs	r1, r0
    4c9a:	9805      	ldr	r0, [sp, #20]
    4c9c:	f000 fd0b 	bl	56b6 <__mcmp>
    4ca0:	2800      	cmp	r0, #0
    4ca2:	dd00      	ble.n	4ca6 <_dtoa_r+0xa0e>
    4ca4:	e55a      	b.n	475c <_dtoa_r+0x4c4>
    4ca6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    4ca8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    4caa:	43db      	mvns	r3, r3
    4cac:	9303      	str	r3, [sp, #12]
    4cae:	2700      	movs	r7, #0
    4cb0:	9908      	ldr	r1, [sp, #32]
    4cb2:	9804      	ldr	r0, [sp, #16]
    4cb4:	f000 fb25 	bl	5302 <_Bfree>
    4cb8:	2e00      	cmp	r6, #0
    4cba:	d100      	bne.n	4cbe <_dtoa_r+0xa26>
    4cbc:	e63f      	b.n	493e <_dtoa_r+0x6a6>
    4cbe:	2f00      	cmp	r7, #0
    4cc0:	d005      	beq.n	4cce <_dtoa_r+0xa36>
    4cc2:	42b7      	cmp	r7, r6
    4cc4:	d003      	beq.n	4cce <_dtoa_r+0xa36>
    4cc6:	0039      	movs	r1, r7
    4cc8:	9804      	ldr	r0, [sp, #16]
    4cca:	f000 fb1a 	bl	5302 <_Bfree>
    4cce:	0031      	movs	r1, r6
    4cd0:	9804      	ldr	r0, [sp, #16]
    4cd2:	f000 fb16 	bl	5302 <_Bfree>
    4cd6:	e632      	b.n	493e <_dtoa_r+0x6a6>
    4cd8:	9508      	str	r5, [sp, #32]
    4cda:	002e      	movs	r6, r5
    4cdc:	e7e3      	b.n	4ca6 <_dtoa_r+0xa0e>
    4cde:	2300      	movs	r3, #0
    4ce0:	9308      	str	r3, [sp, #32]
    4ce2:	001e      	movs	r6, r3
    4ce4:	e7df      	b.n	4ca6 <_dtoa_r+0xa0e>
    4ce6:	46c0      	nop			; (mov r8, r8)
    4ce8:	40240000 	.word	0x40240000
    4cec:	00000433 	.word	0x00000433
    4cf0:	9603      	str	r6, [sp, #12]
    4cf2:	9508      	str	r5, [sp, #32]
    4cf4:	002e      	movs	r6, r5
    4cf6:	e531      	b.n	475c <_dtoa_r+0x4c4>
    4cf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4cfa:	970d      	str	r7, [sp, #52]	; 0x34
    4cfc:	2b00      	cmp	r3, #0
    4cfe:	d000      	beq.n	4d02 <_dtoa_r+0xa6a>
    4d00:	e753      	b.n	4baa <_dtoa_r+0x912>
    4d02:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    4d04:	9908      	ldr	r1, [sp, #32]
    4d06:	9805      	ldr	r0, [sp, #20]
    4d08:	f7ff fa42 	bl	4190 <quorem>
    4d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4d0e:	3030      	adds	r0, #48	; 0x30
    4d10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4d12:	7028      	strb	r0, [r5, #0]
    4d14:	3501      	adds	r5, #1
    4d16:	0004      	movs	r4, r0
    4d18:	1aeb      	subs	r3, r5, r3
    4d1a:	429a      	cmp	r2, r3
    4d1c:	dc78      	bgt.n	4e10 <_dtoa_r+0xb78>
    4d1e:	1e15      	subs	r5, r2, #0
    4d20:	dc00      	bgt.n	4d24 <_dtoa_r+0xa8c>
    4d22:	2501      	movs	r5, #1
    4d24:	2700      	movs	r7, #0
    4d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4d28:	195d      	adds	r5, r3, r5
    4d2a:	9905      	ldr	r1, [sp, #20]
    4d2c:	2201      	movs	r2, #1
    4d2e:	9804      	ldr	r0, [sp, #16]
    4d30:	f000 fc70 	bl	5614 <__lshift>
    4d34:	9908      	ldr	r1, [sp, #32]
    4d36:	9005      	str	r0, [sp, #20]
    4d38:	f000 fcbd 	bl	56b6 <__mcmp>
    4d3c:	2800      	cmp	r0, #0
    4d3e:	dc2f      	bgt.n	4da0 <_dtoa_r+0xb08>
    4d40:	d101      	bne.n	4d46 <_dtoa_r+0xaae>
    4d42:	07e3      	lsls	r3, r4, #31
    4d44:	d42c      	bmi.n	4da0 <_dtoa_r+0xb08>
    4d46:	1e6b      	subs	r3, r5, #1
    4d48:	781a      	ldrb	r2, [r3, #0]
    4d4a:	2a30      	cmp	r2, #48	; 0x30
    4d4c:	d1b0      	bne.n	4cb0 <_dtoa_r+0xa18>
    4d4e:	001d      	movs	r5, r3
    4d50:	e7f9      	b.n	4d46 <_dtoa_r+0xaae>
    4d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4d54:	2b00      	cmp	r3, #0
    4d56:	db07      	blt.n	4d68 <_dtoa_r+0xad0>
    4d58:	001d      	movs	r5, r3
    4d5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4d5c:	431d      	orrs	r5, r3
    4d5e:	d126      	bne.n	4dae <_dtoa_r+0xb16>
    4d60:	2301      	movs	r3, #1
    4d62:	9a06      	ldr	r2, [sp, #24]
    4d64:	4213      	tst	r3, r2
    4d66:	d122      	bne.n	4dae <_dtoa_r+0xb16>
    4d68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4d6a:	2b00      	cmp	r3, #0
    4d6c:	dc00      	bgt.n	4d70 <_dtoa_r+0xad8>
    4d6e:	e773      	b.n	4c58 <_dtoa_r+0x9c0>
    4d70:	9905      	ldr	r1, [sp, #20]
    4d72:	2201      	movs	r2, #1
    4d74:	9804      	ldr	r0, [sp, #16]
    4d76:	f000 fc4d 	bl	5614 <__lshift>
    4d7a:	9908      	ldr	r1, [sp, #32]
    4d7c:	9005      	str	r0, [sp, #20]
    4d7e:	f000 fc9a 	bl	56b6 <__mcmp>
    4d82:	2800      	cmp	r0, #0
    4d84:	dc04      	bgt.n	4d90 <_dtoa_r+0xaf8>
    4d86:	d000      	beq.n	4d8a <_dtoa_r+0xaf2>
    4d88:	e766      	b.n	4c58 <_dtoa_r+0x9c0>
    4d8a:	07e3      	lsls	r3, r4, #31
    4d8c:	d400      	bmi.n	4d90 <_dtoa_r+0xaf8>
    4d8e:	e763      	b.n	4c58 <_dtoa_r+0x9c0>
    4d90:	2c39      	cmp	r4, #57	; 0x39
    4d92:	d000      	beq.n	4d96 <_dtoa_r+0xafe>
    4d94:	e75e      	b.n	4c54 <_dtoa_r+0x9bc>
    4d96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4d98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4d9a:	1c5d      	adds	r5, r3, #1
    4d9c:	2339      	movs	r3, #57	; 0x39
    4d9e:	7013      	strb	r3, [r2, #0]
    4da0:	1e6b      	subs	r3, r5, #1
    4da2:	781a      	ldrb	r2, [r3, #0]
    4da4:	2a39      	cmp	r2, #57	; 0x39
    4da6:	d03b      	beq.n	4e20 <_dtoa_r+0xb88>
    4da8:	3201      	adds	r2, #1
    4daa:	701a      	strb	r2, [r3, #0]
    4dac:	e780      	b.n	4cb0 <_dtoa_r+0xa18>
    4dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4db0:	3301      	adds	r3, #1
    4db2:	930d      	str	r3, [sp, #52]	; 0x34
    4db4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4db6:	2b00      	cmp	r3, #0
    4db8:	dd05      	ble.n	4dc6 <_dtoa_r+0xb2e>
    4dba:	2c39      	cmp	r4, #57	; 0x39
    4dbc:	d0eb      	beq.n	4d96 <_dtoa_r+0xafe>
    4dbe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4dc0:	3401      	adds	r4, #1
    4dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4dc4:	e74a      	b.n	4c5c <_dtoa_r+0x9c4>
    4dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4dc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4dca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4dcc:	701c      	strb	r4, [r3, #0]
    4dce:	4293      	cmp	r3, r2
    4dd0:	d0ab      	beq.n	4d2a <_dtoa_r+0xa92>
    4dd2:	2300      	movs	r3, #0
    4dd4:	220a      	movs	r2, #10
    4dd6:	9905      	ldr	r1, [sp, #20]
    4dd8:	9804      	ldr	r0, [sp, #16]
    4dda:	f000 faab 	bl	5334 <__multadd>
    4dde:	2300      	movs	r3, #0
    4de0:	9005      	str	r0, [sp, #20]
    4de2:	220a      	movs	r2, #10
    4de4:	0039      	movs	r1, r7
    4de6:	9804      	ldr	r0, [sp, #16]
    4de8:	42b7      	cmp	r7, r6
    4dea:	d106      	bne.n	4dfa <_dtoa_r+0xb62>
    4dec:	f000 faa2 	bl	5334 <__multadd>
    4df0:	0007      	movs	r7, r0
    4df2:	0006      	movs	r6, r0
    4df4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4df6:	930b      	str	r3, [sp, #44]	; 0x2c
    4df8:	e6fc      	b.n	4bf4 <_dtoa_r+0x95c>
    4dfa:	f000 fa9b 	bl	5334 <__multadd>
    4dfe:	0031      	movs	r1, r6
    4e00:	0007      	movs	r7, r0
    4e02:	2300      	movs	r3, #0
    4e04:	220a      	movs	r2, #10
    4e06:	9804      	ldr	r0, [sp, #16]
    4e08:	f000 fa94 	bl	5334 <__multadd>
    4e0c:	0006      	movs	r6, r0
    4e0e:	e7f1      	b.n	4df4 <_dtoa_r+0xb5c>
    4e10:	2300      	movs	r3, #0
    4e12:	220a      	movs	r2, #10
    4e14:	9905      	ldr	r1, [sp, #20]
    4e16:	9804      	ldr	r0, [sp, #16]
    4e18:	f000 fa8c 	bl	5334 <__multadd>
    4e1c:	9005      	str	r0, [sp, #20]
    4e1e:	e771      	b.n	4d04 <_dtoa_r+0xa6c>
    4e20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4e22:	429a      	cmp	r2, r3
    4e24:	d105      	bne.n	4e32 <_dtoa_r+0xb9a>
    4e26:	9b03      	ldr	r3, [sp, #12]
    4e28:	3301      	adds	r3, #1
    4e2a:	9303      	str	r3, [sp, #12]
    4e2c:	2331      	movs	r3, #49	; 0x31
    4e2e:	7013      	strb	r3, [r2, #0]
    4e30:	e73e      	b.n	4cb0 <_dtoa_r+0xa18>
    4e32:	001d      	movs	r5, r3
    4e34:	e7b4      	b.n	4da0 <_dtoa_r+0xb08>
    4e36:	4b0a      	ldr	r3, [pc, #40]	; (4e60 <_dtoa_r+0xbc8>)
    4e38:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4e3a:	930a      	str	r3, [sp, #40]	; 0x28
    4e3c:	4b09      	ldr	r3, [pc, #36]	; (4e64 <_dtoa_r+0xbcc>)
    4e3e:	2a00      	cmp	r2, #0
    4e40:	d001      	beq.n	4e46 <_dtoa_r+0xbae>
    4e42:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4e44:	6013      	str	r3, [r2, #0]
    4e46:	980a      	ldr	r0, [sp, #40]	; 0x28
    4e48:	b01d      	add	sp, #116	; 0x74
    4e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4e4e:	2b00      	cmp	r3, #0
    4e50:	dd00      	ble.n	4e54 <_dtoa_r+0xbbc>
    4e52:	e756      	b.n	4d02 <_dtoa_r+0xa6a>
    4e54:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4e56:	2b02      	cmp	r3, #2
    4e58:	dc00      	bgt.n	4e5c <_dtoa_r+0xbc4>
    4e5a:	e752      	b.n	4d02 <_dtoa_r+0xa6a>
    4e5c:	e713      	b.n	4c86 <_dtoa_r+0x9ee>
    4e5e:	46c0      	nop			; (mov r8, r8)
    4e60:	00008ad8 	.word	0x00008ad8
    4e64:	00008ae0 	.word	0x00008ae0

00004e68 <__sflush_r>:
    4e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4e6a:	898a      	ldrh	r2, [r1, #12]
    4e6c:	0005      	movs	r5, r0
    4e6e:	000c      	movs	r4, r1
    4e70:	0713      	lsls	r3, r2, #28
    4e72:	d460      	bmi.n	4f36 <__sflush_r+0xce>
    4e74:	684b      	ldr	r3, [r1, #4]
    4e76:	2b00      	cmp	r3, #0
    4e78:	dc04      	bgt.n	4e84 <__sflush_r+0x1c>
    4e7a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4e7c:	2b00      	cmp	r3, #0
    4e7e:	dc01      	bgt.n	4e84 <__sflush_r+0x1c>
    4e80:	2000      	movs	r0, #0
    4e82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4e84:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4e86:	2f00      	cmp	r7, #0
    4e88:	d0fa      	beq.n	4e80 <__sflush_r+0x18>
    4e8a:	2300      	movs	r3, #0
    4e8c:	682e      	ldr	r6, [r5, #0]
    4e8e:	602b      	str	r3, [r5, #0]
    4e90:	2380      	movs	r3, #128	; 0x80
    4e92:	015b      	lsls	r3, r3, #5
    4e94:	401a      	ands	r2, r3
    4e96:	d034      	beq.n	4f02 <__sflush_r+0x9a>
    4e98:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4e9a:	89a3      	ldrh	r3, [r4, #12]
    4e9c:	075b      	lsls	r3, r3, #29
    4e9e:	d506      	bpl.n	4eae <__sflush_r+0x46>
    4ea0:	6863      	ldr	r3, [r4, #4]
    4ea2:	1ac0      	subs	r0, r0, r3
    4ea4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4ea6:	2b00      	cmp	r3, #0
    4ea8:	d001      	beq.n	4eae <__sflush_r+0x46>
    4eaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4eac:	1ac0      	subs	r0, r0, r3
    4eae:	0002      	movs	r2, r0
    4eb0:	6a21      	ldr	r1, [r4, #32]
    4eb2:	2300      	movs	r3, #0
    4eb4:	0028      	movs	r0, r5
    4eb6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4eb8:	47b8      	blx	r7
    4eba:	89a1      	ldrh	r1, [r4, #12]
    4ebc:	1c43      	adds	r3, r0, #1
    4ebe:	d106      	bne.n	4ece <__sflush_r+0x66>
    4ec0:	682b      	ldr	r3, [r5, #0]
    4ec2:	2b1d      	cmp	r3, #29
    4ec4:	d831      	bhi.n	4f2a <__sflush_r+0xc2>
    4ec6:	4a2c      	ldr	r2, [pc, #176]	; (4f78 <__sflush_r+0x110>)
    4ec8:	40da      	lsrs	r2, r3
    4eca:	07d3      	lsls	r3, r2, #31
    4ecc:	d52d      	bpl.n	4f2a <__sflush_r+0xc2>
    4ece:	2300      	movs	r3, #0
    4ed0:	6063      	str	r3, [r4, #4]
    4ed2:	6923      	ldr	r3, [r4, #16]
    4ed4:	6023      	str	r3, [r4, #0]
    4ed6:	04cb      	lsls	r3, r1, #19
    4ed8:	d505      	bpl.n	4ee6 <__sflush_r+0x7e>
    4eda:	1c43      	adds	r3, r0, #1
    4edc:	d102      	bne.n	4ee4 <__sflush_r+0x7c>
    4ede:	682b      	ldr	r3, [r5, #0]
    4ee0:	2b00      	cmp	r3, #0
    4ee2:	d100      	bne.n	4ee6 <__sflush_r+0x7e>
    4ee4:	6560      	str	r0, [r4, #84]	; 0x54
    4ee6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4ee8:	602e      	str	r6, [r5, #0]
    4eea:	2900      	cmp	r1, #0
    4eec:	d0c8      	beq.n	4e80 <__sflush_r+0x18>
    4eee:	0023      	movs	r3, r4
    4ef0:	3344      	adds	r3, #68	; 0x44
    4ef2:	4299      	cmp	r1, r3
    4ef4:	d002      	beq.n	4efc <__sflush_r+0x94>
    4ef6:	0028      	movs	r0, r5
    4ef8:	f000 fcbc 	bl	5874 <_free_r>
    4efc:	2000      	movs	r0, #0
    4efe:	6360      	str	r0, [r4, #52]	; 0x34
    4f00:	e7bf      	b.n	4e82 <__sflush_r+0x1a>
    4f02:	2301      	movs	r3, #1
    4f04:	6a21      	ldr	r1, [r4, #32]
    4f06:	0028      	movs	r0, r5
    4f08:	47b8      	blx	r7
    4f0a:	1c43      	adds	r3, r0, #1
    4f0c:	d1c5      	bne.n	4e9a <__sflush_r+0x32>
    4f0e:	682b      	ldr	r3, [r5, #0]
    4f10:	2b00      	cmp	r3, #0
    4f12:	d0c2      	beq.n	4e9a <__sflush_r+0x32>
    4f14:	2b1d      	cmp	r3, #29
    4f16:	d001      	beq.n	4f1c <__sflush_r+0xb4>
    4f18:	2b16      	cmp	r3, #22
    4f1a:	d101      	bne.n	4f20 <__sflush_r+0xb8>
    4f1c:	602e      	str	r6, [r5, #0]
    4f1e:	e7af      	b.n	4e80 <__sflush_r+0x18>
    4f20:	2340      	movs	r3, #64	; 0x40
    4f22:	89a2      	ldrh	r2, [r4, #12]
    4f24:	4313      	orrs	r3, r2
    4f26:	81a3      	strh	r3, [r4, #12]
    4f28:	e7ab      	b.n	4e82 <__sflush_r+0x1a>
    4f2a:	2340      	movs	r3, #64	; 0x40
    4f2c:	430b      	orrs	r3, r1
    4f2e:	2001      	movs	r0, #1
    4f30:	81a3      	strh	r3, [r4, #12]
    4f32:	4240      	negs	r0, r0
    4f34:	e7a5      	b.n	4e82 <__sflush_r+0x1a>
    4f36:	690f      	ldr	r7, [r1, #16]
    4f38:	2f00      	cmp	r7, #0
    4f3a:	d0a1      	beq.n	4e80 <__sflush_r+0x18>
    4f3c:	680b      	ldr	r3, [r1, #0]
    4f3e:	600f      	str	r7, [r1, #0]
    4f40:	1bdb      	subs	r3, r3, r7
    4f42:	9301      	str	r3, [sp, #4]
    4f44:	2300      	movs	r3, #0
    4f46:	0792      	lsls	r2, r2, #30
    4f48:	d100      	bne.n	4f4c <__sflush_r+0xe4>
    4f4a:	694b      	ldr	r3, [r1, #20]
    4f4c:	60a3      	str	r3, [r4, #8]
    4f4e:	9b01      	ldr	r3, [sp, #4]
    4f50:	2b00      	cmp	r3, #0
    4f52:	dc00      	bgt.n	4f56 <__sflush_r+0xee>
    4f54:	e794      	b.n	4e80 <__sflush_r+0x18>
    4f56:	9b01      	ldr	r3, [sp, #4]
    4f58:	003a      	movs	r2, r7
    4f5a:	6a21      	ldr	r1, [r4, #32]
    4f5c:	0028      	movs	r0, r5
    4f5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4f60:	47b0      	blx	r6
    4f62:	2800      	cmp	r0, #0
    4f64:	dc03      	bgt.n	4f6e <__sflush_r+0x106>
    4f66:	2340      	movs	r3, #64	; 0x40
    4f68:	89a2      	ldrh	r2, [r4, #12]
    4f6a:	4313      	orrs	r3, r2
    4f6c:	e7df      	b.n	4f2e <__sflush_r+0xc6>
    4f6e:	9b01      	ldr	r3, [sp, #4]
    4f70:	183f      	adds	r7, r7, r0
    4f72:	1a1b      	subs	r3, r3, r0
    4f74:	9301      	str	r3, [sp, #4]
    4f76:	e7ea      	b.n	4f4e <__sflush_r+0xe6>
    4f78:	20400001 	.word	0x20400001

00004f7c <_fflush_r>:
    4f7c:	690b      	ldr	r3, [r1, #16]
    4f7e:	b570      	push	{r4, r5, r6, lr}
    4f80:	0005      	movs	r5, r0
    4f82:	000c      	movs	r4, r1
    4f84:	2b00      	cmp	r3, #0
    4f86:	d101      	bne.n	4f8c <_fflush_r+0x10>
    4f88:	2000      	movs	r0, #0
    4f8a:	bd70      	pop	{r4, r5, r6, pc}
    4f8c:	2800      	cmp	r0, #0
    4f8e:	d004      	beq.n	4f9a <_fflush_r+0x1e>
    4f90:	6983      	ldr	r3, [r0, #24]
    4f92:	2b00      	cmp	r3, #0
    4f94:	d101      	bne.n	4f9a <_fflush_r+0x1e>
    4f96:	f000 f85f 	bl	5058 <__sinit>
    4f9a:	4b0b      	ldr	r3, [pc, #44]	; (4fc8 <_fflush_r+0x4c>)
    4f9c:	429c      	cmp	r4, r3
    4f9e:	d109      	bne.n	4fb4 <_fflush_r+0x38>
    4fa0:	686c      	ldr	r4, [r5, #4]
    4fa2:	220c      	movs	r2, #12
    4fa4:	5ea3      	ldrsh	r3, [r4, r2]
    4fa6:	2b00      	cmp	r3, #0
    4fa8:	d0ee      	beq.n	4f88 <_fflush_r+0xc>
    4faa:	0021      	movs	r1, r4
    4fac:	0028      	movs	r0, r5
    4fae:	f7ff ff5b 	bl	4e68 <__sflush_r>
    4fb2:	e7ea      	b.n	4f8a <_fflush_r+0xe>
    4fb4:	4b05      	ldr	r3, [pc, #20]	; (4fcc <_fflush_r+0x50>)
    4fb6:	429c      	cmp	r4, r3
    4fb8:	d101      	bne.n	4fbe <_fflush_r+0x42>
    4fba:	68ac      	ldr	r4, [r5, #8]
    4fbc:	e7f1      	b.n	4fa2 <_fflush_r+0x26>
    4fbe:	4b04      	ldr	r3, [pc, #16]	; (4fd0 <_fflush_r+0x54>)
    4fc0:	429c      	cmp	r4, r3
    4fc2:	d1ee      	bne.n	4fa2 <_fflush_r+0x26>
    4fc4:	68ec      	ldr	r4, [r5, #12]
    4fc6:	e7ec      	b.n	4fa2 <_fflush_r+0x26>
    4fc8:	00008b08 	.word	0x00008b08
    4fcc:	00008b28 	.word	0x00008b28
    4fd0:	00008ae8 	.word	0x00008ae8

00004fd4 <_cleanup_r>:
    4fd4:	b510      	push	{r4, lr}
    4fd6:	4902      	ldr	r1, [pc, #8]	; (4fe0 <_cleanup_r+0xc>)
    4fd8:	f000 f8b2 	bl	5140 <_fwalk_reent>
    4fdc:	bd10      	pop	{r4, pc}
    4fde:	46c0      	nop			; (mov r8, r8)
    4fe0:	00004f7d 	.word	0x00004f7d

00004fe4 <std.isra.0>:
    4fe4:	2300      	movs	r3, #0
    4fe6:	b510      	push	{r4, lr}
    4fe8:	0004      	movs	r4, r0
    4fea:	6003      	str	r3, [r0, #0]
    4fec:	6043      	str	r3, [r0, #4]
    4fee:	6083      	str	r3, [r0, #8]
    4ff0:	8181      	strh	r1, [r0, #12]
    4ff2:	6643      	str	r3, [r0, #100]	; 0x64
    4ff4:	81c2      	strh	r2, [r0, #14]
    4ff6:	6103      	str	r3, [r0, #16]
    4ff8:	6143      	str	r3, [r0, #20]
    4ffa:	6183      	str	r3, [r0, #24]
    4ffc:	0019      	movs	r1, r3
    4ffe:	2208      	movs	r2, #8
    5000:	305c      	adds	r0, #92	; 0x5c
    5002:	f7fe fa3e 	bl	3482 <memset>
    5006:	4b05      	ldr	r3, [pc, #20]	; (501c <std.isra.0+0x38>)
    5008:	6224      	str	r4, [r4, #32]
    500a:	6263      	str	r3, [r4, #36]	; 0x24
    500c:	4b04      	ldr	r3, [pc, #16]	; (5020 <std.isra.0+0x3c>)
    500e:	62a3      	str	r3, [r4, #40]	; 0x28
    5010:	4b04      	ldr	r3, [pc, #16]	; (5024 <std.isra.0+0x40>)
    5012:	62e3      	str	r3, [r4, #44]	; 0x2c
    5014:	4b04      	ldr	r3, [pc, #16]	; (5028 <std.isra.0+0x44>)
    5016:	6323      	str	r3, [r4, #48]	; 0x30
    5018:	bd10      	pop	{r4, pc}
    501a:	46c0      	nop			; (mov r8, r8)
    501c:	00005c71 	.word	0x00005c71
    5020:	00005c99 	.word	0x00005c99
    5024:	00005cd1 	.word	0x00005cd1
    5028:	00005cfd 	.word	0x00005cfd

0000502c <__sfmoreglue>:
    502c:	b570      	push	{r4, r5, r6, lr}
    502e:	2568      	movs	r5, #104	; 0x68
    5030:	1e4a      	subs	r2, r1, #1
    5032:	4355      	muls	r5, r2
    5034:	000e      	movs	r6, r1
    5036:	0029      	movs	r1, r5
    5038:	3174      	adds	r1, #116	; 0x74
    503a:	f000 fc65 	bl	5908 <_malloc_r>
    503e:	1e04      	subs	r4, r0, #0
    5040:	d008      	beq.n	5054 <__sfmoreglue+0x28>
    5042:	2100      	movs	r1, #0
    5044:	002a      	movs	r2, r5
    5046:	6001      	str	r1, [r0, #0]
    5048:	6046      	str	r6, [r0, #4]
    504a:	300c      	adds	r0, #12
    504c:	60a0      	str	r0, [r4, #8]
    504e:	3268      	adds	r2, #104	; 0x68
    5050:	f7fe fa17 	bl	3482 <memset>
    5054:	0020      	movs	r0, r4
    5056:	bd70      	pop	{r4, r5, r6, pc}

00005058 <__sinit>:
    5058:	6983      	ldr	r3, [r0, #24]
    505a:	b513      	push	{r0, r1, r4, lr}
    505c:	0004      	movs	r4, r0
    505e:	2b00      	cmp	r3, #0
    5060:	d128      	bne.n	50b4 <__sinit+0x5c>
    5062:	6483      	str	r3, [r0, #72]	; 0x48
    5064:	64c3      	str	r3, [r0, #76]	; 0x4c
    5066:	6503      	str	r3, [r0, #80]	; 0x50
    5068:	4b13      	ldr	r3, [pc, #76]	; (50b8 <__sinit+0x60>)
    506a:	4a14      	ldr	r2, [pc, #80]	; (50bc <__sinit+0x64>)
    506c:	681b      	ldr	r3, [r3, #0]
    506e:	6282      	str	r2, [r0, #40]	; 0x28
    5070:	9301      	str	r3, [sp, #4]
    5072:	4298      	cmp	r0, r3
    5074:	d101      	bne.n	507a <__sinit+0x22>
    5076:	2301      	movs	r3, #1
    5078:	6183      	str	r3, [r0, #24]
    507a:	0020      	movs	r0, r4
    507c:	f000 f820 	bl	50c0 <__sfp>
    5080:	6060      	str	r0, [r4, #4]
    5082:	0020      	movs	r0, r4
    5084:	f000 f81c 	bl	50c0 <__sfp>
    5088:	60a0      	str	r0, [r4, #8]
    508a:	0020      	movs	r0, r4
    508c:	f000 f818 	bl	50c0 <__sfp>
    5090:	2200      	movs	r2, #0
    5092:	60e0      	str	r0, [r4, #12]
    5094:	2104      	movs	r1, #4
    5096:	6860      	ldr	r0, [r4, #4]
    5098:	f7ff ffa4 	bl	4fe4 <std.isra.0>
    509c:	2201      	movs	r2, #1
    509e:	2109      	movs	r1, #9
    50a0:	68a0      	ldr	r0, [r4, #8]
    50a2:	f7ff ff9f 	bl	4fe4 <std.isra.0>
    50a6:	2202      	movs	r2, #2
    50a8:	2112      	movs	r1, #18
    50aa:	68e0      	ldr	r0, [r4, #12]
    50ac:	f7ff ff9a 	bl	4fe4 <std.isra.0>
    50b0:	2301      	movs	r3, #1
    50b2:	61a3      	str	r3, [r4, #24]
    50b4:	bd13      	pop	{r0, r1, r4, pc}
    50b6:	46c0      	nop			; (mov r8, r8)
    50b8:	00008aa0 	.word	0x00008aa0
    50bc:	00004fd5 	.word	0x00004fd5

000050c0 <__sfp>:
    50c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50c2:	4b1e      	ldr	r3, [pc, #120]	; (513c <__sfp+0x7c>)
    50c4:	0007      	movs	r7, r0
    50c6:	681e      	ldr	r6, [r3, #0]
    50c8:	69b3      	ldr	r3, [r6, #24]
    50ca:	2b00      	cmp	r3, #0
    50cc:	d102      	bne.n	50d4 <__sfp+0x14>
    50ce:	0030      	movs	r0, r6
    50d0:	f7ff ffc2 	bl	5058 <__sinit>
    50d4:	3648      	adds	r6, #72	; 0x48
    50d6:	68b4      	ldr	r4, [r6, #8]
    50d8:	6873      	ldr	r3, [r6, #4]
    50da:	3b01      	subs	r3, #1
    50dc:	d504      	bpl.n	50e8 <__sfp+0x28>
    50de:	6833      	ldr	r3, [r6, #0]
    50e0:	2b00      	cmp	r3, #0
    50e2:	d007      	beq.n	50f4 <__sfp+0x34>
    50e4:	6836      	ldr	r6, [r6, #0]
    50e6:	e7f6      	b.n	50d6 <__sfp+0x16>
    50e8:	220c      	movs	r2, #12
    50ea:	5ea5      	ldrsh	r5, [r4, r2]
    50ec:	2d00      	cmp	r5, #0
    50ee:	d00d      	beq.n	510c <__sfp+0x4c>
    50f0:	3468      	adds	r4, #104	; 0x68
    50f2:	e7f2      	b.n	50da <__sfp+0x1a>
    50f4:	2104      	movs	r1, #4
    50f6:	0038      	movs	r0, r7
    50f8:	f7ff ff98 	bl	502c <__sfmoreglue>
    50fc:	6030      	str	r0, [r6, #0]
    50fe:	2800      	cmp	r0, #0
    5100:	d1f0      	bne.n	50e4 <__sfp+0x24>
    5102:	230c      	movs	r3, #12
    5104:	0004      	movs	r4, r0
    5106:	603b      	str	r3, [r7, #0]
    5108:	0020      	movs	r0, r4
    510a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    510c:	2301      	movs	r3, #1
    510e:	0020      	movs	r0, r4
    5110:	425b      	negs	r3, r3
    5112:	81e3      	strh	r3, [r4, #14]
    5114:	3302      	adds	r3, #2
    5116:	81a3      	strh	r3, [r4, #12]
    5118:	6665      	str	r5, [r4, #100]	; 0x64
    511a:	6025      	str	r5, [r4, #0]
    511c:	60a5      	str	r5, [r4, #8]
    511e:	6065      	str	r5, [r4, #4]
    5120:	6125      	str	r5, [r4, #16]
    5122:	6165      	str	r5, [r4, #20]
    5124:	61a5      	str	r5, [r4, #24]
    5126:	2208      	movs	r2, #8
    5128:	0029      	movs	r1, r5
    512a:	305c      	adds	r0, #92	; 0x5c
    512c:	f7fe f9a9 	bl	3482 <memset>
    5130:	6365      	str	r5, [r4, #52]	; 0x34
    5132:	63a5      	str	r5, [r4, #56]	; 0x38
    5134:	64a5      	str	r5, [r4, #72]	; 0x48
    5136:	64e5      	str	r5, [r4, #76]	; 0x4c
    5138:	e7e6      	b.n	5108 <__sfp+0x48>
    513a:	46c0      	nop			; (mov r8, r8)
    513c:	00008aa0 	.word	0x00008aa0

00005140 <_fwalk_reent>:
    5140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5142:	0004      	movs	r4, r0
    5144:	0007      	movs	r7, r0
    5146:	2600      	movs	r6, #0
    5148:	9101      	str	r1, [sp, #4]
    514a:	3448      	adds	r4, #72	; 0x48
    514c:	2c00      	cmp	r4, #0
    514e:	d101      	bne.n	5154 <_fwalk_reent+0x14>
    5150:	0030      	movs	r0, r6
    5152:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5154:	6863      	ldr	r3, [r4, #4]
    5156:	68a5      	ldr	r5, [r4, #8]
    5158:	9300      	str	r3, [sp, #0]
    515a:	9b00      	ldr	r3, [sp, #0]
    515c:	3b01      	subs	r3, #1
    515e:	9300      	str	r3, [sp, #0]
    5160:	d501      	bpl.n	5166 <_fwalk_reent+0x26>
    5162:	6824      	ldr	r4, [r4, #0]
    5164:	e7f2      	b.n	514c <_fwalk_reent+0xc>
    5166:	89ab      	ldrh	r3, [r5, #12]
    5168:	2b01      	cmp	r3, #1
    516a:	d908      	bls.n	517e <_fwalk_reent+0x3e>
    516c:	220e      	movs	r2, #14
    516e:	5eab      	ldrsh	r3, [r5, r2]
    5170:	3301      	adds	r3, #1
    5172:	d004      	beq.n	517e <_fwalk_reent+0x3e>
    5174:	0029      	movs	r1, r5
    5176:	0038      	movs	r0, r7
    5178:	9b01      	ldr	r3, [sp, #4]
    517a:	4798      	blx	r3
    517c:	4306      	orrs	r6, r0
    517e:	3568      	adds	r5, #104	; 0x68
    5180:	e7eb      	b.n	515a <_fwalk_reent+0x1a>
	...

00005184 <_localeconv_r>:
    5184:	4b03      	ldr	r3, [pc, #12]	; (5194 <_localeconv_r+0x10>)
    5186:	681b      	ldr	r3, [r3, #0]
    5188:	6a18      	ldr	r0, [r3, #32]
    518a:	2800      	cmp	r0, #0
    518c:	d100      	bne.n	5190 <_localeconv_r+0xc>
    518e:	4802      	ldr	r0, [pc, #8]	; (5198 <_localeconv_r+0x14>)
    5190:	30f0      	adds	r0, #240	; 0xf0
    5192:	4770      	bx	lr
    5194:	2000000c 	.word	0x2000000c
    5198:	20000070 	.word	0x20000070

0000519c <__swhatbuf_r>:
    519c:	b570      	push	{r4, r5, r6, lr}
    519e:	000e      	movs	r6, r1
    51a0:	001d      	movs	r5, r3
    51a2:	230e      	movs	r3, #14
    51a4:	5ec9      	ldrsh	r1, [r1, r3]
    51a6:	b090      	sub	sp, #64	; 0x40
    51a8:	0014      	movs	r4, r2
    51aa:	2900      	cmp	r1, #0
    51ac:	da07      	bge.n	51be <__swhatbuf_r+0x22>
    51ae:	2300      	movs	r3, #0
    51b0:	602b      	str	r3, [r5, #0]
    51b2:	89b3      	ldrh	r3, [r6, #12]
    51b4:	061b      	lsls	r3, r3, #24
    51b6:	d411      	bmi.n	51dc <__swhatbuf_r+0x40>
    51b8:	2380      	movs	r3, #128	; 0x80
    51ba:	00db      	lsls	r3, r3, #3
    51bc:	e00f      	b.n	51de <__swhatbuf_r+0x42>
    51be:	aa01      	add	r2, sp, #4
    51c0:	f000 fdc8 	bl	5d54 <_fstat_r>
    51c4:	2800      	cmp	r0, #0
    51c6:	dbf2      	blt.n	51ae <__swhatbuf_r+0x12>
    51c8:	22f0      	movs	r2, #240	; 0xf0
    51ca:	9b02      	ldr	r3, [sp, #8]
    51cc:	0212      	lsls	r2, r2, #8
    51ce:	4013      	ands	r3, r2
    51d0:	4a05      	ldr	r2, [pc, #20]	; (51e8 <__swhatbuf_r+0x4c>)
    51d2:	189b      	adds	r3, r3, r2
    51d4:	425a      	negs	r2, r3
    51d6:	4153      	adcs	r3, r2
    51d8:	602b      	str	r3, [r5, #0]
    51da:	e7ed      	b.n	51b8 <__swhatbuf_r+0x1c>
    51dc:	2340      	movs	r3, #64	; 0x40
    51de:	2000      	movs	r0, #0
    51e0:	6023      	str	r3, [r4, #0]
    51e2:	b010      	add	sp, #64	; 0x40
    51e4:	bd70      	pop	{r4, r5, r6, pc}
    51e6:	46c0      	nop			; (mov r8, r8)
    51e8:	ffffe000 	.word	0xffffe000

000051ec <__smakebuf_r>:
    51ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    51ee:	2602      	movs	r6, #2
    51f0:	898b      	ldrh	r3, [r1, #12]
    51f2:	0005      	movs	r5, r0
    51f4:	000c      	movs	r4, r1
    51f6:	4233      	tst	r3, r6
    51f8:	d006      	beq.n	5208 <__smakebuf_r+0x1c>
    51fa:	0023      	movs	r3, r4
    51fc:	3347      	adds	r3, #71	; 0x47
    51fe:	6023      	str	r3, [r4, #0]
    5200:	6123      	str	r3, [r4, #16]
    5202:	2301      	movs	r3, #1
    5204:	6163      	str	r3, [r4, #20]
    5206:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    5208:	ab01      	add	r3, sp, #4
    520a:	466a      	mov	r2, sp
    520c:	f7ff ffc6 	bl	519c <__swhatbuf_r>
    5210:	9900      	ldr	r1, [sp, #0]
    5212:	0007      	movs	r7, r0
    5214:	0028      	movs	r0, r5
    5216:	f000 fb77 	bl	5908 <_malloc_r>
    521a:	2800      	cmp	r0, #0
    521c:	d106      	bne.n	522c <__smakebuf_r+0x40>
    521e:	220c      	movs	r2, #12
    5220:	5ea3      	ldrsh	r3, [r4, r2]
    5222:	059a      	lsls	r2, r3, #22
    5224:	d4ef      	bmi.n	5206 <__smakebuf_r+0x1a>
    5226:	431e      	orrs	r6, r3
    5228:	81a6      	strh	r6, [r4, #12]
    522a:	e7e6      	b.n	51fa <__smakebuf_r+0xe>
    522c:	4b0d      	ldr	r3, [pc, #52]	; (5264 <__smakebuf_r+0x78>)
    522e:	62ab      	str	r3, [r5, #40]	; 0x28
    5230:	2380      	movs	r3, #128	; 0x80
    5232:	89a2      	ldrh	r2, [r4, #12]
    5234:	6020      	str	r0, [r4, #0]
    5236:	4313      	orrs	r3, r2
    5238:	81a3      	strh	r3, [r4, #12]
    523a:	9b00      	ldr	r3, [sp, #0]
    523c:	6120      	str	r0, [r4, #16]
    523e:	6163      	str	r3, [r4, #20]
    5240:	9b01      	ldr	r3, [sp, #4]
    5242:	2b00      	cmp	r3, #0
    5244:	d00a      	beq.n	525c <__smakebuf_r+0x70>
    5246:	230e      	movs	r3, #14
    5248:	5ee1      	ldrsh	r1, [r4, r3]
    524a:	0028      	movs	r0, r5
    524c:	f000 fd94 	bl	5d78 <_isatty_r>
    5250:	2800      	cmp	r0, #0
    5252:	d003      	beq.n	525c <__smakebuf_r+0x70>
    5254:	2301      	movs	r3, #1
    5256:	89a2      	ldrh	r2, [r4, #12]
    5258:	4313      	orrs	r3, r2
    525a:	81a3      	strh	r3, [r4, #12]
    525c:	89a0      	ldrh	r0, [r4, #12]
    525e:	4338      	orrs	r0, r7
    5260:	81a0      	strh	r0, [r4, #12]
    5262:	e7d0      	b.n	5206 <__smakebuf_r+0x1a>
    5264:	00004fd5 	.word	0x00004fd5

00005268 <malloc>:
    5268:	b510      	push	{r4, lr}
    526a:	4b03      	ldr	r3, [pc, #12]	; (5278 <malloc+0x10>)
    526c:	0001      	movs	r1, r0
    526e:	6818      	ldr	r0, [r3, #0]
    5270:	f000 fb4a 	bl	5908 <_malloc_r>
    5274:	bd10      	pop	{r4, pc}
    5276:	46c0      	nop			; (mov r8, r8)
    5278:	2000000c 	.word	0x2000000c

0000527c <memchr>:
    527c:	b2c9      	uxtb	r1, r1
    527e:	1882      	adds	r2, r0, r2
    5280:	4290      	cmp	r0, r2
    5282:	d101      	bne.n	5288 <memchr+0xc>
    5284:	2000      	movs	r0, #0
    5286:	4770      	bx	lr
    5288:	7803      	ldrb	r3, [r0, #0]
    528a:	428b      	cmp	r3, r1
    528c:	d0fb      	beq.n	5286 <memchr+0xa>
    528e:	3001      	adds	r0, #1
    5290:	e7f6      	b.n	5280 <memchr+0x4>

00005292 <_Balloc>:
    5292:	b570      	push	{r4, r5, r6, lr}
    5294:	6a46      	ldr	r6, [r0, #36]	; 0x24
    5296:	0004      	movs	r4, r0
    5298:	000d      	movs	r5, r1
    529a:	2e00      	cmp	r6, #0
    529c:	d107      	bne.n	52ae <_Balloc+0x1c>
    529e:	2010      	movs	r0, #16
    52a0:	f7ff ffe2 	bl	5268 <malloc>
    52a4:	6260      	str	r0, [r4, #36]	; 0x24
    52a6:	6046      	str	r6, [r0, #4]
    52a8:	6086      	str	r6, [r0, #8]
    52aa:	6006      	str	r6, [r0, #0]
    52ac:	60c6      	str	r6, [r0, #12]
    52ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
    52b0:	68f3      	ldr	r3, [r6, #12]
    52b2:	2b00      	cmp	r3, #0
    52b4:	d013      	beq.n	52de <_Balloc+0x4c>
    52b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    52b8:	00aa      	lsls	r2, r5, #2
    52ba:	68db      	ldr	r3, [r3, #12]
    52bc:	189b      	adds	r3, r3, r2
    52be:	6818      	ldr	r0, [r3, #0]
    52c0:	2800      	cmp	r0, #0
    52c2:	d118      	bne.n	52f6 <_Balloc+0x64>
    52c4:	2101      	movs	r1, #1
    52c6:	000e      	movs	r6, r1
    52c8:	40ae      	lsls	r6, r5
    52ca:	1d72      	adds	r2, r6, #5
    52cc:	0092      	lsls	r2, r2, #2
    52ce:	0020      	movs	r0, r4
    52d0:	f000 fac2 	bl	5858 <_calloc_r>
    52d4:	2800      	cmp	r0, #0
    52d6:	d00c      	beq.n	52f2 <_Balloc+0x60>
    52d8:	6045      	str	r5, [r0, #4]
    52da:	6086      	str	r6, [r0, #8]
    52dc:	e00d      	b.n	52fa <_Balloc+0x68>
    52de:	2221      	movs	r2, #33	; 0x21
    52e0:	2104      	movs	r1, #4
    52e2:	0020      	movs	r0, r4
    52e4:	f000 fab8 	bl	5858 <_calloc_r>
    52e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    52ea:	60f0      	str	r0, [r6, #12]
    52ec:	68db      	ldr	r3, [r3, #12]
    52ee:	2b00      	cmp	r3, #0
    52f0:	d1e1      	bne.n	52b6 <_Balloc+0x24>
    52f2:	2000      	movs	r0, #0
    52f4:	bd70      	pop	{r4, r5, r6, pc}
    52f6:	6802      	ldr	r2, [r0, #0]
    52f8:	601a      	str	r2, [r3, #0]
    52fa:	2300      	movs	r3, #0
    52fc:	6103      	str	r3, [r0, #16]
    52fe:	60c3      	str	r3, [r0, #12]
    5300:	e7f8      	b.n	52f4 <_Balloc+0x62>

00005302 <_Bfree>:
    5302:	b570      	push	{r4, r5, r6, lr}
    5304:	6a44      	ldr	r4, [r0, #36]	; 0x24
    5306:	0006      	movs	r6, r0
    5308:	000d      	movs	r5, r1
    530a:	2c00      	cmp	r4, #0
    530c:	d107      	bne.n	531e <_Bfree+0x1c>
    530e:	2010      	movs	r0, #16
    5310:	f7ff ffaa 	bl	5268 <malloc>
    5314:	6270      	str	r0, [r6, #36]	; 0x24
    5316:	6044      	str	r4, [r0, #4]
    5318:	6084      	str	r4, [r0, #8]
    531a:	6004      	str	r4, [r0, #0]
    531c:	60c4      	str	r4, [r0, #12]
    531e:	2d00      	cmp	r5, #0
    5320:	d007      	beq.n	5332 <_Bfree+0x30>
    5322:	6a73      	ldr	r3, [r6, #36]	; 0x24
    5324:	686a      	ldr	r2, [r5, #4]
    5326:	68db      	ldr	r3, [r3, #12]
    5328:	0092      	lsls	r2, r2, #2
    532a:	189b      	adds	r3, r3, r2
    532c:	681a      	ldr	r2, [r3, #0]
    532e:	602a      	str	r2, [r5, #0]
    5330:	601d      	str	r5, [r3, #0]
    5332:	bd70      	pop	{r4, r5, r6, pc}

00005334 <__multadd>:
    5334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5336:	001e      	movs	r6, r3
    5338:	2314      	movs	r3, #20
    533a:	469c      	mov	ip, r3
    533c:	0007      	movs	r7, r0
    533e:	000c      	movs	r4, r1
    5340:	2000      	movs	r0, #0
    5342:	690d      	ldr	r5, [r1, #16]
    5344:	448c      	add	ip, r1
    5346:	4663      	mov	r3, ip
    5348:	8819      	ldrh	r1, [r3, #0]
    534a:	681b      	ldr	r3, [r3, #0]
    534c:	4351      	muls	r1, r2
    534e:	0c1b      	lsrs	r3, r3, #16
    5350:	4353      	muls	r3, r2
    5352:	1989      	adds	r1, r1, r6
    5354:	0c0e      	lsrs	r6, r1, #16
    5356:	199b      	adds	r3, r3, r6
    5358:	b289      	uxth	r1, r1
    535a:	0c1e      	lsrs	r6, r3, #16
    535c:	041b      	lsls	r3, r3, #16
    535e:	185b      	adds	r3, r3, r1
    5360:	4661      	mov	r1, ip
    5362:	3001      	adds	r0, #1
    5364:	c108      	stmia	r1!, {r3}
    5366:	468c      	mov	ip, r1
    5368:	4285      	cmp	r5, r0
    536a:	dcec      	bgt.n	5346 <__multadd+0x12>
    536c:	2e00      	cmp	r6, #0
    536e:	d01b      	beq.n	53a8 <__multadd+0x74>
    5370:	68a3      	ldr	r3, [r4, #8]
    5372:	429d      	cmp	r5, r3
    5374:	db12      	blt.n	539c <__multadd+0x68>
    5376:	6863      	ldr	r3, [r4, #4]
    5378:	0038      	movs	r0, r7
    537a:	1c59      	adds	r1, r3, #1
    537c:	f7ff ff89 	bl	5292 <_Balloc>
    5380:	0021      	movs	r1, r4
    5382:	6923      	ldr	r3, [r4, #16]
    5384:	9001      	str	r0, [sp, #4]
    5386:	1c9a      	adds	r2, r3, #2
    5388:	0092      	lsls	r2, r2, #2
    538a:	310c      	adds	r1, #12
    538c:	300c      	adds	r0, #12
    538e:	f7fe f86f 	bl	3470 <memcpy>
    5392:	0021      	movs	r1, r4
    5394:	0038      	movs	r0, r7
    5396:	f7ff ffb4 	bl	5302 <_Bfree>
    539a:	9c01      	ldr	r4, [sp, #4]
    539c:	1d2b      	adds	r3, r5, #4
    539e:	009b      	lsls	r3, r3, #2
    53a0:	18e3      	adds	r3, r4, r3
    53a2:	3501      	adds	r5, #1
    53a4:	605e      	str	r6, [r3, #4]
    53a6:	6125      	str	r5, [r4, #16]
    53a8:	0020      	movs	r0, r4
    53aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000053ac <__hi0bits>:
    53ac:	0003      	movs	r3, r0
    53ae:	0c02      	lsrs	r2, r0, #16
    53b0:	2000      	movs	r0, #0
    53b2:	4282      	cmp	r2, r0
    53b4:	d101      	bne.n	53ba <__hi0bits+0xe>
    53b6:	041b      	lsls	r3, r3, #16
    53b8:	3010      	adds	r0, #16
    53ba:	0e1a      	lsrs	r2, r3, #24
    53bc:	d101      	bne.n	53c2 <__hi0bits+0x16>
    53be:	3008      	adds	r0, #8
    53c0:	021b      	lsls	r3, r3, #8
    53c2:	0f1a      	lsrs	r2, r3, #28
    53c4:	d101      	bne.n	53ca <__hi0bits+0x1e>
    53c6:	3004      	adds	r0, #4
    53c8:	011b      	lsls	r3, r3, #4
    53ca:	0f9a      	lsrs	r2, r3, #30
    53cc:	d101      	bne.n	53d2 <__hi0bits+0x26>
    53ce:	3002      	adds	r0, #2
    53d0:	009b      	lsls	r3, r3, #2
    53d2:	2b00      	cmp	r3, #0
    53d4:	db03      	blt.n	53de <__hi0bits+0x32>
    53d6:	3001      	adds	r0, #1
    53d8:	005b      	lsls	r3, r3, #1
    53da:	d400      	bmi.n	53de <__hi0bits+0x32>
    53dc:	2020      	movs	r0, #32
    53de:	4770      	bx	lr

000053e0 <__lo0bits>:
    53e0:	2207      	movs	r2, #7
    53e2:	6803      	ldr	r3, [r0, #0]
    53e4:	b510      	push	{r4, lr}
    53e6:	0001      	movs	r1, r0
    53e8:	401a      	ands	r2, r3
    53ea:	d00d      	beq.n	5408 <__lo0bits+0x28>
    53ec:	2401      	movs	r4, #1
    53ee:	2000      	movs	r0, #0
    53f0:	4223      	tst	r3, r4
    53f2:	d105      	bne.n	5400 <__lo0bits+0x20>
    53f4:	3002      	adds	r0, #2
    53f6:	4203      	tst	r3, r0
    53f8:	d003      	beq.n	5402 <__lo0bits+0x22>
    53fa:	40e3      	lsrs	r3, r4
    53fc:	0020      	movs	r0, r4
    53fe:	600b      	str	r3, [r1, #0]
    5400:	bd10      	pop	{r4, pc}
    5402:	089b      	lsrs	r3, r3, #2
    5404:	600b      	str	r3, [r1, #0]
    5406:	e7fb      	b.n	5400 <__lo0bits+0x20>
    5408:	b29c      	uxth	r4, r3
    540a:	0010      	movs	r0, r2
    540c:	2c00      	cmp	r4, #0
    540e:	d101      	bne.n	5414 <__lo0bits+0x34>
    5410:	2010      	movs	r0, #16
    5412:	0c1b      	lsrs	r3, r3, #16
    5414:	b2da      	uxtb	r2, r3
    5416:	2a00      	cmp	r2, #0
    5418:	d101      	bne.n	541e <__lo0bits+0x3e>
    541a:	3008      	adds	r0, #8
    541c:	0a1b      	lsrs	r3, r3, #8
    541e:	071a      	lsls	r2, r3, #28
    5420:	d101      	bne.n	5426 <__lo0bits+0x46>
    5422:	3004      	adds	r0, #4
    5424:	091b      	lsrs	r3, r3, #4
    5426:	079a      	lsls	r2, r3, #30
    5428:	d101      	bne.n	542e <__lo0bits+0x4e>
    542a:	3002      	adds	r0, #2
    542c:	089b      	lsrs	r3, r3, #2
    542e:	07da      	lsls	r2, r3, #31
    5430:	d4e8      	bmi.n	5404 <__lo0bits+0x24>
    5432:	085b      	lsrs	r3, r3, #1
    5434:	d001      	beq.n	543a <__lo0bits+0x5a>
    5436:	3001      	adds	r0, #1
    5438:	e7e4      	b.n	5404 <__lo0bits+0x24>
    543a:	2020      	movs	r0, #32
    543c:	e7e0      	b.n	5400 <__lo0bits+0x20>

0000543e <__i2b>:
    543e:	b510      	push	{r4, lr}
    5440:	000c      	movs	r4, r1
    5442:	2101      	movs	r1, #1
    5444:	f7ff ff25 	bl	5292 <_Balloc>
    5448:	2301      	movs	r3, #1
    544a:	6144      	str	r4, [r0, #20]
    544c:	6103      	str	r3, [r0, #16]
    544e:	bd10      	pop	{r4, pc}

00005450 <__multiply>:
    5450:	b5f0      	push	{r4, r5, r6, r7, lr}
    5452:	690b      	ldr	r3, [r1, #16]
    5454:	0015      	movs	r5, r2
    5456:	6912      	ldr	r2, [r2, #16]
    5458:	b089      	sub	sp, #36	; 0x24
    545a:	000c      	movs	r4, r1
    545c:	4293      	cmp	r3, r2
    545e:	da01      	bge.n	5464 <__multiply+0x14>
    5460:	002c      	movs	r4, r5
    5462:	000d      	movs	r5, r1
    5464:	6927      	ldr	r7, [r4, #16]
    5466:	692e      	ldr	r6, [r5, #16]
    5468:	68a2      	ldr	r2, [r4, #8]
    546a:	19bb      	adds	r3, r7, r6
    546c:	6861      	ldr	r1, [r4, #4]
    546e:	9301      	str	r3, [sp, #4]
    5470:	4293      	cmp	r3, r2
    5472:	dd00      	ble.n	5476 <__multiply+0x26>
    5474:	3101      	adds	r1, #1
    5476:	f7ff ff0c 	bl	5292 <_Balloc>
    547a:	0003      	movs	r3, r0
    547c:	3314      	adds	r3, #20
    547e:	9300      	str	r3, [sp, #0]
    5480:	9a00      	ldr	r2, [sp, #0]
    5482:	19bb      	adds	r3, r7, r6
    5484:	4694      	mov	ip, r2
    5486:	009b      	lsls	r3, r3, #2
    5488:	449c      	add	ip, r3
    548a:	0013      	movs	r3, r2
    548c:	2200      	movs	r2, #0
    548e:	9004      	str	r0, [sp, #16]
    5490:	4563      	cmp	r3, ip
    5492:	d31c      	bcc.n	54ce <__multiply+0x7e>
    5494:	002a      	movs	r2, r5
    5496:	3414      	adds	r4, #20
    5498:	00bf      	lsls	r7, r7, #2
    549a:	19e3      	adds	r3, r4, r7
    549c:	3214      	adds	r2, #20
    549e:	00b6      	lsls	r6, r6, #2
    54a0:	9305      	str	r3, [sp, #20]
    54a2:	1993      	adds	r3, r2, r6
    54a4:	9402      	str	r4, [sp, #8]
    54a6:	9306      	str	r3, [sp, #24]
    54a8:	9b06      	ldr	r3, [sp, #24]
    54aa:	429a      	cmp	r2, r3
    54ac:	d311      	bcc.n	54d2 <__multiply+0x82>
    54ae:	9b01      	ldr	r3, [sp, #4]
    54b0:	2b00      	cmp	r3, #0
    54b2:	dd06      	ble.n	54c2 <__multiply+0x72>
    54b4:	2304      	movs	r3, #4
    54b6:	425b      	negs	r3, r3
    54b8:	449c      	add	ip, r3
    54ba:	4663      	mov	r3, ip
    54bc:	681b      	ldr	r3, [r3, #0]
    54be:	2b00      	cmp	r3, #0
    54c0:	d051      	beq.n	5566 <__multiply+0x116>
    54c2:	9b04      	ldr	r3, [sp, #16]
    54c4:	9a01      	ldr	r2, [sp, #4]
    54c6:	0018      	movs	r0, r3
    54c8:	611a      	str	r2, [r3, #16]
    54ca:	b009      	add	sp, #36	; 0x24
    54cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54ce:	c304      	stmia	r3!, {r2}
    54d0:	e7de      	b.n	5490 <__multiply+0x40>
    54d2:	8814      	ldrh	r4, [r2, #0]
    54d4:	2c00      	cmp	r4, #0
    54d6:	d01e      	beq.n	5516 <__multiply+0xc6>
    54d8:	2600      	movs	r6, #0
    54da:	9d00      	ldr	r5, [sp, #0]
    54dc:	9f02      	ldr	r7, [sp, #8]
    54de:	cf01      	ldmia	r7!, {r0}
    54e0:	9507      	str	r5, [sp, #28]
    54e2:	cd08      	ldmia	r5!, {r3}
    54e4:	9303      	str	r3, [sp, #12]
    54e6:	b283      	uxth	r3, r0
    54e8:	4363      	muls	r3, r4
    54ea:	0019      	movs	r1, r3
    54ec:	466b      	mov	r3, sp
    54ee:	0c00      	lsrs	r0, r0, #16
    54f0:	899b      	ldrh	r3, [r3, #12]
    54f2:	4360      	muls	r0, r4
    54f4:	18cb      	adds	r3, r1, r3
    54f6:	9903      	ldr	r1, [sp, #12]
    54f8:	199b      	adds	r3, r3, r6
    54fa:	0c09      	lsrs	r1, r1, #16
    54fc:	1841      	adds	r1, r0, r1
    54fe:	0c18      	lsrs	r0, r3, #16
    5500:	1809      	adds	r1, r1, r0
    5502:	0c0e      	lsrs	r6, r1, #16
    5504:	b29b      	uxth	r3, r3
    5506:	0409      	lsls	r1, r1, #16
    5508:	430b      	orrs	r3, r1
    550a:	9907      	ldr	r1, [sp, #28]
    550c:	600b      	str	r3, [r1, #0]
    550e:	9b05      	ldr	r3, [sp, #20]
    5510:	42bb      	cmp	r3, r7
    5512:	d8e4      	bhi.n	54de <__multiply+0x8e>
    5514:	602e      	str	r6, [r5, #0]
    5516:	6813      	ldr	r3, [r2, #0]
    5518:	0c1b      	lsrs	r3, r3, #16
    551a:	9303      	str	r3, [sp, #12]
    551c:	d01e      	beq.n	555c <__multiply+0x10c>
    551e:	2600      	movs	r6, #0
    5520:	9b00      	ldr	r3, [sp, #0]
    5522:	9c02      	ldr	r4, [sp, #8]
    5524:	681b      	ldr	r3, [r3, #0]
    5526:	9800      	ldr	r0, [sp, #0]
    5528:	0007      	movs	r7, r0
    552a:	8821      	ldrh	r1, [r4, #0]
    552c:	9d03      	ldr	r5, [sp, #12]
    552e:	b29b      	uxth	r3, r3
    5530:	4369      	muls	r1, r5
    5532:	c820      	ldmia	r0!, {r5}
    5534:	0c2d      	lsrs	r5, r5, #16
    5536:	1949      	adds	r1, r1, r5
    5538:	198e      	adds	r6, r1, r6
    553a:	0431      	lsls	r1, r6, #16
    553c:	430b      	orrs	r3, r1
    553e:	603b      	str	r3, [r7, #0]
    5540:	cc08      	ldmia	r4!, {r3}
    5542:	9903      	ldr	r1, [sp, #12]
    5544:	0c1b      	lsrs	r3, r3, #16
    5546:	434b      	muls	r3, r1
    5548:	6879      	ldr	r1, [r7, #4]
    554a:	0c36      	lsrs	r6, r6, #16
    554c:	b289      	uxth	r1, r1
    554e:	185b      	adds	r3, r3, r1
    5550:	9905      	ldr	r1, [sp, #20]
    5552:	199b      	adds	r3, r3, r6
    5554:	0c1e      	lsrs	r6, r3, #16
    5556:	42a1      	cmp	r1, r4
    5558:	d8e6      	bhi.n	5528 <__multiply+0xd8>
    555a:	6003      	str	r3, [r0, #0]
    555c:	9b00      	ldr	r3, [sp, #0]
    555e:	3204      	adds	r2, #4
    5560:	3304      	adds	r3, #4
    5562:	9300      	str	r3, [sp, #0]
    5564:	e7a0      	b.n	54a8 <__multiply+0x58>
    5566:	9b01      	ldr	r3, [sp, #4]
    5568:	3b01      	subs	r3, #1
    556a:	9301      	str	r3, [sp, #4]
    556c:	e79f      	b.n	54ae <__multiply+0x5e>
	...

00005570 <__pow5mult>:
    5570:	2303      	movs	r3, #3
    5572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5574:	4013      	ands	r3, r2
    5576:	0005      	movs	r5, r0
    5578:	000e      	movs	r6, r1
    557a:	0014      	movs	r4, r2
    557c:	2b00      	cmp	r3, #0
    557e:	d008      	beq.n	5592 <__pow5mult+0x22>
    5580:	4922      	ldr	r1, [pc, #136]	; (560c <__pow5mult+0x9c>)
    5582:	3b01      	subs	r3, #1
    5584:	009a      	lsls	r2, r3, #2
    5586:	5852      	ldr	r2, [r2, r1]
    5588:	2300      	movs	r3, #0
    558a:	0031      	movs	r1, r6
    558c:	f7ff fed2 	bl	5334 <__multadd>
    5590:	0006      	movs	r6, r0
    5592:	10a3      	asrs	r3, r4, #2
    5594:	9301      	str	r3, [sp, #4]
    5596:	d036      	beq.n	5606 <__pow5mult+0x96>
    5598:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    559a:	2c00      	cmp	r4, #0
    559c:	d107      	bne.n	55ae <__pow5mult+0x3e>
    559e:	2010      	movs	r0, #16
    55a0:	f7ff fe62 	bl	5268 <malloc>
    55a4:	6268      	str	r0, [r5, #36]	; 0x24
    55a6:	6044      	str	r4, [r0, #4]
    55a8:	6084      	str	r4, [r0, #8]
    55aa:	6004      	str	r4, [r0, #0]
    55ac:	60c4      	str	r4, [r0, #12]
    55ae:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    55b0:	68bc      	ldr	r4, [r7, #8]
    55b2:	2c00      	cmp	r4, #0
    55b4:	d107      	bne.n	55c6 <__pow5mult+0x56>
    55b6:	4916      	ldr	r1, [pc, #88]	; (5610 <__pow5mult+0xa0>)
    55b8:	0028      	movs	r0, r5
    55ba:	f7ff ff40 	bl	543e <__i2b>
    55be:	2300      	movs	r3, #0
    55c0:	0004      	movs	r4, r0
    55c2:	60b8      	str	r0, [r7, #8]
    55c4:	6003      	str	r3, [r0, #0]
    55c6:	2201      	movs	r2, #1
    55c8:	9b01      	ldr	r3, [sp, #4]
    55ca:	4213      	tst	r3, r2
    55cc:	d00a      	beq.n	55e4 <__pow5mult+0x74>
    55ce:	0031      	movs	r1, r6
    55d0:	0022      	movs	r2, r4
    55d2:	0028      	movs	r0, r5
    55d4:	f7ff ff3c 	bl	5450 <__multiply>
    55d8:	0007      	movs	r7, r0
    55da:	0031      	movs	r1, r6
    55dc:	0028      	movs	r0, r5
    55de:	f7ff fe90 	bl	5302 <_Bfree>
    55e2:	003e      	movs	r6, r7
    55e4:	9b01      	ldr	r3, [sp, #4]
    55e6:	105b      	asrs	r3, r3, #1
    55e8:	9301      	str	r3, [sp, #4]
    55ea:	d00c      	beq.n	5606 <__pow5mult+0x96>
    55ec:	6820      	ldr	r0, [r4, #0]
    55ee:	2800      	cmp	r0, #0
    55f0:	d107      	bne.n	5602 <__pow5mult+0x92>
    55f2:	0022      	movs	r2, r4
    55f4:	0021      	movs	r1, r4
    55f6:	0028      	movs	r0, r5
    55f8:	f7ff ff2a 	bl	5450 <__multiply>
    55fc:	2300      	movs	r3, #0
    55fe:	6020      	str	r0, [r4, #0]
    5600:	6003      	str	r3, [r0, #0]
    5602:	0004      	movs	r4, r0
    5604:	e7df      	b.n	55c6 <__pow5mult+0x56>
    5606:	0030      	movs	r0, r6
    5608:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    560a:	46c0      	nop			; (mov r8, r8)
    560c:	00008c38 	.word	0x00008c38
    5610:	00000271 	.word	0x00000271

00005614 <__lshift>:
    5614:	b5f0      	push	{r4, r5, r6, r7, lr}
    5616:	000d      	movs	r5, r1
    5618:	0017      	movs	r7, r2
    561a:	692b      	ldr	r3, [r5, #16]
    561c:	1154      	asrs	r4, r2, #5
    561e:	b085      	sub	sp, #20
    5620:	18e3      	adds	r3, r4, r3
    5622:	9302      	str	r3, [sp, #8]
    5624:	3301      	adds	r3, #1
    5626:	9301      	str	r3, [sp, #4]
    5628:	6849      	ldr	r1, [r1, #4]
    562a:	68ab      	ldr	r3, [r5, #8]
    562c:	9003      	str	r0, [sp, #12]
    562e:	9a01      	ldr	r2, [sp, #4]
    5630:	4293      	cmp	r3, r2
    5632:	db34      	blt.n	569e <__lshift+0x8a>
    5634:	9803      	ldr	r0, [sp, #12]
    5636:	f7ff fe2c 	bl	5292 <_Balloc>
    563a:	2300      	movs	r3, #0
    563c:	0002      	movs	r2, r0
    563e:	0006      	movs	r6, r0
    5640:	0019      	movs	r1, r3
    5642:	3214      	adds	r2, #20
    5644:	42a3      	cmp	r3, r4
    5646:	db2d      	blt.n	56a4 <__lshift+0x90>
    5648:	43e3      	mvns	r3, r4
    564a:	17db      	asrs	r3, r3, #31
    564c:	401c      	ands	r4, r3
    564e:	002b      	movs	r3, r5
    5650:	211f      	movs	r1, #31
    5652:	00a4      	lsls	r4, r4, #2
    5654:	1914      	adds	r4, r2, r4
    5656:	692a      	ldr	r2, [r5, #16]
    5658:	3314      	adds	r3, #20
    565a:	0092      	lsls	r2, r2, #2
    565c:	189a      	adds	r2, r3, r2
    565e:	400f      	ands	r7, r1
    5660:	d024      	beq.n	56ac <__lshift+0x98>
    5662:	3101      	adds	r1, #1
    5664:	1bc9      	subs	r1, r1, r7
    5666:	468c      	mov	ip, r1
    5668:	2100      	movs	r1, #0
    566a:	6818      	ldr	r0, [r3, #0]
    566c:	40b8      	lsls	r0, r7
    566e:	4301      	orrs	r1, r0
    5670:	4660      	mov	r0, ip
    5672:	6021      	str	r1, [r4, #0]
    5674:	cb02      	ldmia	r3!, {r1}
    5676:	3404      	adds	r4, #4
    5678:	40c1      	lsrs	r1, r0
    567a:	429a      	cmp	r2, r3
    567c:	d8f5      	bhi.n	566a <__lshift+0x56>
    567e:	6021      	str	r1, [r4, #0]
    5680:	2900      	cmp	r1, #0
    5682:	d002      	beq.n	568a <__lshift+0x76>
    5684:	9b02      	ldr	r3, [sp, #8]
    5686:	3302      	adds	r3, #2
    5688:	9301      	str	r3, [sp, #4]
    568a:	9b01      	ldr	r3, [sp, #4]
    568c:	9803      	ldr	r0, [sp, #12]
    568e:	3b01      	subs	r3, #1
    5690:	6133      	str	r3, [r6, #16]
    5692:	0029      	movs	r1, r5
    5694:	f7ff fe35 	bl	5302 <_Bfree>
    5698:	0030      	movs	r0, r6
    569a:	b005      	add	sp, #20
    569c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    569e:	3101      	adds	r1, #1
    56a0:	005b      	lsls	r3, r3, #1
    56a2:	e7c4      	b.n	562e <__lshift+0x1a>
    56a4:	0098      	lsls	r0, r3, #2
    56a6:	5011      	str	r1, [r2, r0]
    56a8:	3301      	adds	r3, #1
    56aa:	e7cb      	b.n	5644 <__lshift+0x30>
    56ac:	cb02      	ldmia	r3!, {r1}
    56ae:	c402      	stmia	r4!, {r1}
    56b0:	429a      	cmp	r2, r3
    56b2:	d8fb      	bhi.n	56ac <__lshift+0x98>
    56b4:	e7e9      	b.n	568a <__lshift+0x76>

000056b6 <__mcmp>:
    56b6:	690a      	ldr	r2, [r1, #16]
    56b8:	6903      	ldr	r3, [r0, #16]
    56ba:	b530      	push	{r4, r5, lr}
    56bc:	1a9b      	subs	r3, r3, r2
    56be:	d10e      	bne.n	56de <__mcmp+0x28>
    56c0:	0092      	lsls	r2, r2, #2
    56c2:	3014      	adds	r0, #20
    56c4:	3114      	adds	r1, #20
    56c6:	1884      	adds	r4, r0, r2
    56c8:	1889      	adds	r1, r1, r2
    56ca:	3c04      	subs	r4, #4
    56cc:	3904      	subs	r1, #4
    56ce:	6822      	ldr	r2, [r4, #0]
    56d0:	680d      	ldr	r5, [r1, #0]
    56d2:	42aa      	cmp	r2, r5
    56d4:	d005      	beq.n	56e2 <__mcmp+0x2c>
    56d6:	42aa      	cmp	r2, r5
    56d8:	4192      	sbcs	r2, r2
    56da:	2301      	movs	r3, #1
    56dc:	4313      	orrs	r3, r2
    56de:	0018      	movs	r0, r3
    56e0:	bd30      	pop	{r4, r5, pc}
    56e2:	42a0      	cmp	r0, r4
    56e4:	d3f1      	bcc.n	56ca <__mcmp+0x14>
    56e6:	e7fa      	b.n	56de <__mcmp+0x28>

000056e8 <__mdiff>:
    56e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    56ea:	000d      	movs	r5, r1
    56ec:	b085      	sub	sp, #20
    56ee:	0007      	movs	r7, r0
    56f0:	0011      	movs	r1, r2
    56f2:	0028      	movs	r0, r5
    56f4:	0014      	movs	r4, r2
    56f6:	f7ff ffde 	bl	56b6 <__mcmp>
    56fa:	1e06      	subs	r6, r0, #0
    56fc:	d108      	bne.n	5710 <__mdiff+0x28>
    56fe:	0001      	movs	r1, r0
    5700:	0038      	movs	r0, r7
    5702:	f7ff fdc6 	bl	5292 <_Balloc>
    5706:	2301      	movs	r3, #1
    5708:	6146      	str	r6, [r0, #20]
    570a:	6103      	str	r3, [r0, #16]
    570c:	b005      	add	sp, #20
    570e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5710:	2301      	movs	r3, #1
    5712:	9301      	str	r3, [sp, #4]
    5714:	2800      	cmp	r0, #0
    5716:	db04      	blt.n	5722 <__mdiff+0x3a>
    5718:	0023      	movs	r3, r4
    571a:	002c      	movs	r4, r5
    571c:	001d      	movs	r5, r3
    571e:	2300      	movs	r3, #0
    5720:	9301      	str	r3, [sp, #4]
    5722:	6861      	ldr	r1, [r4, #4]
    5724:	0038      	movs	r0, r7
    5726:	f7ff fdb4 	bl	5292 <_Balloc>
    572a:	002f      	movs	r7, r5
    572c:	2200      	movs	r2, #0
    572e:	9b01      	ldr	r3, [sp, #4]
    5730:	6926      	ldr	r6, [r4, #16]
    5732:	60c3      	str	r3, [r0, #12]
    5734:	3414      	adds	r4, #20
    5736:	00b3      	lsls	r3, r6, #2
    5738:	18e3      	adds	r3, r4, r3
    573a:	9302      	str	r3, [sp, #8]
    573c:	692b      	ldr	r3, [r5, #16]
    573e:	3714      	adds	r7, #20
    5740:	009b      	lsls	r3, r3, #2
    5742:	18fb      	adds	r3, r7, r3
    5744:	9303      	str	r3, [sp, #12]
    5746:	0003      	movs	r3, r0
    5748:	4694      	mov	ip, r2
    574a:	3314      	adds	r3, #20
    574c:	cc20      	ldmia	r4!, {r5}
    574e:	cf04      	ldmia	r7!, {r2}
    5750:	9201      	str	r2, [sp, #4]
    5752:	b2aa      	uxth	r2, r5
    5754:	4494      	add	ip, r2
    5756:	466a      	mov	r2, sp
    5758:	4661      	mov	r1, ip
    575a:	8892      	ldrh	r2, [r2, #4]
    575c:	0c2d      	lsrs	r5, r5, #16
    575e:	1a8a      	subs	r2, r1, r2
    5760:	9901      	ldr	r1, [sp, #4]
    5762:	0c09      	lsrs	r1, r1, #16
    5764:	1a69      	subs	r1, r5, r1
    5766:	1415      	asrs	r5, r2, #16
    5768:	1949      	adds	r1, r1, r5
    576a:	140d      	asrs	r5, r1, #16
    576c:	b292      	uxth	r2, r2
    576e:	0409      	lsls	r1, r1, #16
    5770:	430a      	orrs	r2, r1
    5772:	601a      	str	r2, [r3, #0]
    5774:	9a03      	ldr	r2, [sp, #12]
    5776:	46ac      	mov	ip, r5
    5778:	3304      	adds	r3, #4
    577a:	42ba      	cmp	r2, r7
    577c:	d8e6      	bhi.n	574c <__mdiff+0x64>
    577e:	9902      	ldr	r1, [sp, #8]
    5780:	001a      	movs	r2, r3
    5782:	428c      	cmp	r4, r1
    5784:	d305      	bcc.n	5792 <__mdiff+0xaa>
    5786:	3a04      	subs	r2, #4
    5788:	6813      	ldr	r3, [r2, #0]
    578a:	2b00      	cmp	r3, #0
    578c:	d00e      	beq.n	57ac <__mdiff+0xc4>
    578e:	6106      	str	r6, [r0, #16]
    5790:	e7bc      	b.n	570c <__mdiff+0x24>
    5792:	cc04      	ldmia	r4!, {r2}
    5794:	b291      	uxth	r1, r2
    5796:	4461      	add	r1, ip
    5798:	140d      	asrs	r5, r1, #16
    579a:	0c12      	lsrs	r2, r2, #16
    579c:	1952      	adds	r2, r2, r5
    579e:	1415      	asrs	r5, r2, #16
    57a0:	b289      	uxth	r1, r1
    57a2:	0412      	lsls	r2, r2, #16
    57a4:	430a      	orrs	r2, r1
    57a6:	46ac      	mov	ip, r5
    57a8:	c304      	stmia	r3!, {r2}
    57aa:	e7e8      	b.n	577e <__mdiff+0x96>
    57ac:	3e01      	subs	r6, #1
    57ae:	e7ea      	b.n	5786 <__mdiff+0x9e>

000057b0 <__d2b>:
    57b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    57b2:	001d      	movs	r5, r3
    57b4:	2101      	movs	r1, #1
    57b6:	9f08      	ldr	r7, [sp, #32]
    57b8:	0014      	movs	r4, r2
    57ba:	f7ff fd6a 	bl	5292 <_Balloc>
    57be:	032b      	lsls	r3, r5, #12
    57c0:	006d      	lsls	r5, r5, #1
    57c2:	0006      	movs	r6, r0
    57c4:	0b1b      	lsrs	r3, r3, #12
    57c6:	0d6d      	lsrs	r5, r5, #21
    57c8:	d124      	bne.n	5814 <__d2b+0x64>
    57ca:	9301      	str	r3, [sp, #4]
    57cc:	2c00      	cmp	r4, #0
    57ce:	d027      	beq.n	5820 <__d2b+0x70>
    57d0:	4668      	mov	r0, sp
    57d2:	9400      	str	r4, [sp, #0]
    57d4:	f7ff fe04 	bl	53e0 <__lo0bits>
    57d8:	9c00      	ldr	r4, [sp, #0]
    57da:	2800      	cmp	r0, #0
    57dc:	d01e      	beq.n	581c <__d2b+0x6c>
    57de:	9b01      	ldr	r3, [sp, #4]
    57e0:	2120      	movs	r1, #32
    57e2:	001a      	movs	r2, r3
    57e4:	1a09      	subs	r1, r1, r0
    57e6:	408a      	lsls	r2, r1
    57e8:	40c3      	lsrs	r3, r0
    57ea:	4322      	orrs	r2, r4
    57ec:	6172      	str	r2, [r6, #20]
    57ee:	9301      	str	r3, [sp, #4]
    57f0:	9c01      	ldr	r4, [sp, #4]
    57f2:	61b4      	str	r4, [r6, #24]
    57f4:	1e63      	subs	r3, r4, #1
    57f6:	419c      	sbcs	r4, r3
    57f8:	3401      	adds	r4, #1
    57fa:	6134      	str	r4, [r6, #16]
    57fc:	2d00      	cmp	r5, #0
    57fe:	d018      	beq.n	5832 <__d2b+0x82>
    5800:	4b12      	ldr	r3, [pc, #72]	; (584c <__d2b+0x9c>)
    5802:	18ed      	adds	r5, r5, r3
    5804:	2335      	movs	r3, #53	; 0x35
    5806:	182d      	adds	r5, r5, r0
    5808:	603d      	str	r5, [r7, #0]
    580a:	1a18      	subs	r0, r3, r0
    580c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    580e:	6018      	str	r0, [r3, #0]
    5810:	0030      	movs	r0, r6
    5812:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5814:	2280      	movs	r2, #128	; 0x80
    5816:	0352      	lsls	r2, r2, #13
    5818:	4313      	orrs	r3, r2
    581a:	e7d6      	b.n	57ca <__d2b+0x1a>
    581c:	6174      	str	r4, [r6, #20]
    581e:	e7e7      	b.n	57f0 <__d2b+0x40>
    5820:	a801      	add	r0, sp, #4
    5822:	f7ff fddd 	bl	53e0 <__lo0bits>
    5826:	2401      	movs	r4, #1
    5828:	9b01      	ldr	r3, [sp, #4]
    582a:	6134      	str	r4, [r6, #16]
    582c:	6173      	str	r3, [r6, #20]
    582e:	3020      	adds	r0, #32
    5830:	e7e4      	b.n	57fc <__d2b+0x4c>
    5832:	4b07      	ldr	r3, [pc, #28]	; (5850 <__d2b+0xa0>)
    5834:	18c0      	adds	r0, r0, r3
    5836:	4b07      	ldr	r3, [pc, #28]	; (5854 <__d2b+0xa4>)
    5838:	6038      	str	r0, [r7, #0]
    583a:	18e3      	adds	r3, r4, r3
    583c:	009b      	lsls	r3, r3, #2
    583e:	18f3      	adds	r3, r6, r3
    5840:	6958      	ldr	r0, [r3, #20]
    5842:	f7ff fdb3 	bl	53ac <__hi0bits>
    5846:	0164      	lsls	r4, r4, #5
    5848:	1a20      	subs	r0, r4, r0
    584a:	e7df      	b.n	580c <__d2b+0x5c>
    584c:	fffffbcd 	.word	0xfffffbcd
    5850:	fffffbce 	.word	0xfffffbce
    5854:	3fffffff 	.word	0x3fffffff

00005858 <_calloc_r>:
    5858:	434a      	muls	r2, r1
    585a:	b570      	push	{r4, r5, r6, lr}
    585c:	0011      	movs	r1, r2
    585e:	0014      	movs	r4, r2
    5860:	f000 f852 	bl	5908 <_malloc_r>
    5864:	1e05      	subs	r5, r0, #0
    5866:	d003      	beq.n	5870 <_calloc_r+0x18>
    5868:	0022      	movs	r2, r4
    586a:	2100      	movs	r1, #0
    586c:	f7fd fe09 	bl	3482 <memset>
    5870:	0028      	movs	r0, r5
    5872:	bd70      	pop	{r4, r5, r6, pc}

00005874 <_free_r>:
    5874:	b570      	push	{r4, r5, r6, lr}
    5876:	0005      	movs	r5, r0
    5878:	2900      	cmp	r1, #0
    587a:	d010      	beq.n	589e <_free_r+0x2a>
    587c:	1f0c      	subs	r4, r1, #4
    587e:	6823      	ldr	r3, [r4, #0]
    5880:	2b00      	cmp	r3, #0
    5882:	da00      	bge.n	5886 <_free_r+0x12>
    5884:	18e4      	adds	r4, r4, r3
    5886:	0028      	movs	r0, r5
    5888:	f000 faae 	bl	5de8 <__malloc_lock>
    588c:	4a1d      	ldr	r2, [pc, #116]	; (5904 <_free_r+0x90>)
    588e:	6813      	ldr	r3, [r2, #0]
    5890:	2b00      	cmp	r3, #0
    5892:	d105      	bne.n	58a0 <_free_r+0x2c>
    5894:	6063      	str	r3, [r4, #4]
    5896:	6014      	str	r4, [r2, #0]
    5898:	0028      	movs	r0, r5
    589a:	f000 faa6 	bl	5dea <__malloc_unlock>
    589e:	bd70      	pop	{r4, r5, r6, pc}
    58a0:	42a3      	cmp	r3, r4
    58a2:	d909      	bls.n	58b8 <_free_r+0x44>
    58a4:	6821      	ldr	r1, [r4, #0]
    58a6:	1860      	adds	r0, r4, r1
    58a8:	4283      	cmp	r3, r0
    58aa:	d1f3      	bne.n	5894 <_free_r+0x20>
    58ac:	6818      	ldr	r0, [r3, #0]
    58ae:	685b      	ldr	r3, [r3, #4]
    58b0:	1841      	adds	r1, r0, r1
    58b2:	6021      	str	r1, [r4, #0]
    58b4:	e7ee      	b.n	5894 <_free_r+0x20>
    58b6:	0013      	movs	r3, r2
    58b8:	685a      	ldr	r2, [r3, #4]
    58ba:	2a00      	cmp	r2, #0
    58bc:	d001      	beq.n	58c2 <_free_r+0x4e>
    58be:	42a2      	cmp	r2, r4
    58c0:	d9f9      	bls.n	58b6 <_free_r+0x42>
    58c2:	6819      	ldr	r1, [r3, #0]
    58c4:	1858      	adds	r0, r3, r1
    58c6:	42a0      	cmp	r0, r4
    58c8:	d10b      	bne.n	58e2 <_free_r+0x6e>
    58ca:	6820      	ldr	r0, [r4, #0]
    58cc:	1809      	adds	r1, r1, r0
    58ce:	1858      	adds	r0, r3, r1
    58d0:	6019      	str	r1, [r3, #0]
    58d2:	4282      	cmp	r2, r0
    58d4:	d1e0      	bne.n	5898 <_free_r+0x24>
    58d6:	6810      	ldr	r0, [r2, #0]
    58d8:	6852      	ldr	r2, [r2, #4]
    58da:	1841      	adds	r1, r0, r1
    58dc:	6019      	str	r1, [r3, #0]
    58de:	605a      	str	r2, [r3, #4]
    58e0:	e7da      	b.n	5898 <_free_r+0x24>
    58e2:	42a0      	cmp	r0, r4
    58e4:	d902      	bls.n	58ec <_free_r+0x78>
    58e6:	230c      	movs	r3, #12
    58e8:	602b      	str	r3, [r5, #0]
    58ea:	e7d5      	b.n	5898 <_free_r+0x24>
    58ec:	6821      	ldr	r1, [r4, #0]
    58ee:	1860      	adds	r0, r4, r1
    58f0:	4282      	cmp	r2, r0
    58f2:	d103      	bne.n	58fc <_free_r+0x88>
    58f4:	6810      	ldr	r0, [r2, #0]
    58f6:	6852      	ldr	r2, [r2, #4]
    58f8:	1841      	adds	r1, r0, r1
    58fa:	6021      	str	r1, [r4, #0]
    58fc:	6062      	str	r2, [r4, #4]
    58fe:	605c      	str	r4, [r3, #4]
    5900:	e7ca      	b.n	5898 <_free_r+0x24>
    5902:	46c0      	nop			; (mov r8, r8)
    5904:	200007ac 	.word	0x200007ac

00005908 <_malloc_r>:
    5908:	2303      	movs	r3, #3
    590a:	b570      	push	{r4, r5, r6, lr}
    590c:	1ccd      	adds	r5, r1, #3
    590e:	439d      	bics	r5, r3
    5910:	3508      	adds	r5, #8
    5912:	0006      	movs	r6, r0
    5914:	2d0c      	cmp	r5, #12
    5916:	d21e      	bcs.n	5956 <_malloc_r+0x4e>
    5918:	250c      	movs	r5, #12
    591a:	42a9      	cmp	r1, r5
    591c:	d81d      	bhi.n	595a <_malloc_r+0x52>
    591e:	0030      	movs	r0, r6
    5920:	f000 fa62 	bl	5de8 <__malloc_lock>
    5924:	4a25      	ldr	r2, [pc, #148]	; (59bc <_malloc_r+0xb4>)
    5926:	6814      	ldr	r4, [r2, #0]
    5928:	0021      	movs	r1, r4
    592a:	2900      	cmp	r1, #0
    592c:	d119      	bne.n	5962 <_malloc_r+0x5a>
    592e:	4c24      	ldr	r4, [pc, #144]	; (59c0 <_malloc_r+0xb8>)
    5930:	6823      	ldr	r3, [r4, #0]
    5932:	2b00      	cmp	r3, #0
    5934:	d103      	bne.n	593e <_malloc_r+0x36>
    5936:	0030      	movs	r0, r6
    5938:	f000 f988 	bl	5c4c <_sbrk_r>
    593c:	6020      	str	r0, [r4, #0]
    593e:	0029      	movs	r1, r5
    5940:	0030      	movs	r0, r6
    5942:	f000 f983 	bl	5c4c <_sbrk_r>
    5946:	1c43      	adds	r3, r0, #1
    5948:	d12c      	bne.n	59a4 <_malloc_r+0x9c>
    594a:	230c      	movs	r3, #12
    594c:	0030      	movs	r0, r6
    594e:	6033      	str	r3, [r6, #0]
    5950:	f000 fa4b 	bl	5dea <__malloc_unlock>
    5954:	e003      	b.n	595e <_malloc_r+0x56>
    5956:	2d00      	cmp	r5, #0
    5958:	dadf      	bge.n	591a <_malloc_r+0x12>
    595a:	230c      	movs	r3, #12
    595c:	6033      	str	r3, [r6, #0]
    595e:	2000      	movs	r0, #0
    5960:	bd70      	pop	{r4, r5, r6, pc}
    5962:	680b      	ldr	r3, [r1, #0]
    5964:	1b5b      	subs	r3, r3, r5
    5966:	d41a      	bmi.n	599e <_malloc_r+0x96>
    5968:	2b0b      	cmp	r3, #11
    596a:	d903      	bls.n	5974 <_malloc_r+0x6c>
    596c:	600b      	str	r3, [r1, #0]
    596e:	18cc      	adds	r4, r1, r3
    5970:	6025      	str	r5, [r4, #0]
    5972:	e003      	b.n	597c <_malloc_r+0x74>
    5974:	428c      	cmp	r4, r1
    5976:	d10e      	bne.n	5996 <_malloc_r+0x8e>
    5978:	6863      	ldr	r3, [r4, #4]
    597a:	6013      	str	r3, [r2, #0]
    597c:	0030      	movs	r0, r6
    597e:	f000 fa34 	bl	5dea <__malloc_unlock>
    5982:	0020      	movs	r0, r4
    5984:	2207      	movs	r2, #7
    5986:	300b      	adds	r0, #11
    5988:	1d23      	adds	r3, r4, #4
    598a:	4390      	bics	r0, r2
    598c:	1ac3      	subs	r3, r0, r3
    598e:	d0e7      	beq.n	5960 <_malloc_r+0x58>
    5990:	425a      	negs	r2, r3
    5992:	50e2      	str	r2, [r4, r3]
    5994:	e7e4      	b.n	5960 <_malloc_r+0x58>
    5996:	684b      	ldr	r3, [r1, #4]
    5998:	6063      	str	r3, [r4, #4]
    599a:	000c      	movs	r4, r1
    599c:	e7ee      	b.n	597c <_malloc_r+0x74>
    599e:	000c      	movs	r4, r1
    59a0:	6849      	ldr	r1, [r1, #4]
    59a2:	e7c2      	b.n	592a <_malloc_r+0x22>
    59a4:	2303      	movs	r3, #3
    59a6:	1cc4      	adds	r4, r0, #3
    59a8:	439c      	bics	r4, r3
    59aa:	42a0      	cmp	r0, r4
    59ac:	d0e0      	beq.n	5970 <_malloc_r+0x68>
    59ae:	1a21      	subs	r1, r4, r0
    59b0:	0030      	movs	r0, r6
    59b2:	f000 f94b 	bl	5c4c <_sbrk_r>
    59b6:	1c43      	adds	r3, r0, #1
    59b8:	d1da      	bne.n	5970 <_malloc_r+0x68>
    59ba:	e7c6      	b.n	594a <_malloc_r+0x42>
    59bc:	200007ac 	.word	0x200007ac
    59c0:	200007b0 	.word	0x200007b0

000059c4 <__sfputc_r>:
    59c4:	6893      	ldr	r3, [r2, #8]
    59c6:	b510      	push	{r4, lr}
    59c8:	3b01      	subs	r3, #1
    59ca:	6093      	str	r3, [r2, #8]
    59cc:	2b00      	cmp	r3, #0
    59ce:	da05      	bge.n	59dc <__sfputc_r+0x18>
    59d0:	6994      	ldr	r4, [r2, #24]
    59d2:	42a3      	cmp	r3, r4
    59d4:	db08      	blt.n	59e8 <__sfputc_r+0x24>
    59d6:	b2cb      	uxtb	r3, r1
    59d8:	2b0a      	cmp	r3, #10
    59da:	d005      	beq.n	59e8 <__sfputc_r+0x24>
    59dc:	6813      	ldr	r3, [r2, #0]
    59de:	1c58      	adds	r0, r3, #1
    59e0:	6010      	str	r0, [r2, #0]
    59e2:	7019      	strb	r1, [r3, #0]
    59e4:	b2c8      	uxtb	r0, r1
    59e6:	bd10      	pop	{r4, pc}
    59e8:	f7fe fb06 	bl	3ff8 <__swbuf_r>
    59ec:	e7fb      	b.n	59e6 <__sfputc_r+0x22>

000059ee <__sfputs_r>:
    59ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59f0:	0006      	movs	r6, r0
    59f2:	000f      	movs	r7, r1
    59f4:	0014      	movs	r4, r2
    59f6:	18d5      	adds	r5, r2, r3
    59f8:	42ac      	cmp	r4, r5
    59fa:	d101      	bne.n	5a00 <__sfputs_r+0x12>
    59fc:	2000      	movs	r0, #0
    59fe:	e007      	b.n	5a10 <__sfputs_r+0x22>
    5a00:	7821      	ldrb	r1, [r4, #0]
    5a02:	003a      	movs	r2, r7
    5a04:	0030      	movs	r0, r6
    5a06:	f7ff ffdd 	bl	59c4 <__sfputc_r>
    5a0a:	3401      	adds	r4, #1
    5a0c:	1c43      	adds	r3, r0, #1
    5a0e:	d1f3      	bne.n	59f8 <__sfputs_r+0xa>
    5a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005a14 <_vfiprintf_r>:
    5a14:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a16:	b09f      	sub	sp, #124	; 0x7c
    5a18:	0006      	movs	r6, r0
    5a1a:	000f      	movs	r7, r1
    5a1c:	0014      	movs	r4, r2
    5a1e:	9305      	str	r3, [sp, #20]
    5a20:	2800      	cmp	r0, #0
    5a22:	d004      	beq.n	5a2e <_vfiprintf_r+0x1a>
    5a24:	6983      	ldr	r3, [r0, #24]
    5a26:	2b00      	cmp	r3, #0
    5a28:	d101      	bne.n	5a2e <_vfiprintf_r+0x1a>
    5a2a:	f7ff fb15 	bl	5058 <__sinit>
    5a2e:	4b7f      	ldr	r3, [pc, #508]	; (5c2c <_vfiprintf_r+0x218>)
    5a30:	429f      	cmp	r7, r3
    5a32:	d15c      	bne.n	5aee <_vfiprintf_r+0xda>
    5a34:	6877      	ldr	r7, [r6, #4]
    5a36:	89bb      	ldrh	r3, [r7, #12]
    5a38:	071b      	lsls	r3, r3, #28
    5a3a:	d562      	bpl.n	5b02 <_vfiprintf_r+0xee>
    5a3c:	693b      	ldr	r3, [r7, #16]
    5a3e:	2b00      	cmp	r3, #0
    5a40:	d05f      	beq.n	5b02 <_vfiprintf_r+0xee>
    5a42:	2300      	movs	r3, #0
    5a44:	ad06      	add	r5, sp, #24
    5a46:	616b      	str	r3, [r5, #20]
    5a48:	3320      	adds	r3, #32
    5a4a:	766b      	strb	r3, [r5, #25]
    5a4c:	3310      	adds	r3, #16
    5a4e:	76ab      	strb	r3, [r5, #26]
    5a50:	9402      	str	r4, [sp, #8]
    5a52:	9c02      	ldr	r4, [sp, #8]
    5a54:	7823      	ldrb	r3, [r4, #0]
    5a56:	2b00      	cmp	r3, #0
    5a58:	d15d      	bne.n	5b16 <_vfiprintf_r+0x102>
    5a5a:	9b02      	ldr	r3, [sp, #8]
    5a5c:	1ae3      	subs	r3, r4, r3
    5a5e:	9304      	str	r3, [sp, #16]
    5a60:	d00d      	beq.n	5a7e <_vfiprintf_r+0x6a>
    5a62:	9b04      	ldr	r3, [sp, #16]
    5a64:	9a02      	ldr	r2, [sp, #8]
    5a66:	0039      	movs	r1, r7
    5a68:	0030      	movs	r0, r6
    5a6a:	f7ff ffc0 	bl	59ee <__sfputs_r>
    5a6e:	1c43      	adds	r3, r0, #1
    5a70:	d100      	bne.n	5a74 <_vfiprintf_r+0x60>
    5a72:	e0cc      	b.n	5c0e <_vfiprintf_r+0x1fa>
    5a74:	696a      	ldr	r2, [r5, #20]
    5a76:	9b04      	ldr	r3, [sp, #16]
    5a78:	4694      	mov	ip, r2
    5a7a:	4463      	add	r3, ip
    5a7c:	616b      	str	r3, [r5, #20]
    5a7e:	7823      	ldrb	r3, [r4, #0]
    5a80:	2b00      	cmp	r3, #0
    5a82:	d100      	bne.n	5a86 <_vfiprintf_r+0x72>
    5a84:	e0c3      	b.n	5c0e <_vfiprintf_r+0x1fa>
    5a86:	2201      	movs	r2, #1
    5a88:	2300      	movs	r3, #0
    5a8a:	4252      	negs	r2, r2
    5a8c:	606a      	str	r2, [r5, #4]
    5a8e:	a902      	add	r1, sp, #8
    5a90:	3254      	adds	r2, #84	; 0x54
    5a92:	1852      	adds	r2, r2, r1
    5a94:	3401      	adds	r4, #1
    5a96:	602b      	str	r3, [r5, #0]
    5a98:	60eb      	str	r3, [r5, #12]
    5a9a:	60ab      	str	r3, [r5, #8]
    5a9c:	7013      	strb	r3, [r2, #0]
    5a9e:	65ab      	str	r3, [r5, #88]	; 0x58
    5aa0:	7821      	ldrb	r1, [r4, #0]
    5aa2:	2205      	movs	r2, #5
    5aa4:	4862      	ldr	r0, [pc, #392]	; (5c30 <_vfiprintf_r+0x21c>)
    5aa6:	f7ff fbe9 	bl	527c <memchr>
    5aaa:	1c63      	adds	r3, r4, #1
    5aac:	469c      	mov	ip, r3
    5aae:	2800      	cmp	r0, #0
    5ab0:	d135      	bne.n	5b1e <_vfiprintf_r+0x10a>
    5ab2:	6829      	ldr	r1, [r5, #0]
    5ab4:	06cb      	lsls	r3, r1, #27
    5ab6:	d504      	bpl.n	5ac2 <_vfiprintf_r+0xae>
    5ab8:	2353      	movs	r3, #83	; 0x53
    5aba:	aa02      	add	r2, sp, #8
    5abc:	3020      	adds	r0, #32
    5abe:	189b      	adds	r3, r3, r2
    5ac0:	7018      	strb	r0, [r3, #0]
    5ac2:	070b      	lsls	r3, r1, #28
    5ac4:	d504      	bpl.n	5ad0 <_vfiprintf_r+0xbc>
    5ac6:	2353      	movs	r3, #83	; 0x53
    5ac8:	202b      	movs	r0, #43	; 0x2b
    5aca:	aa02      	add	r2, sp, #8
    5acc:	189b      	adds	r3, r3, r2
    5ace:	7018      	strb	r0, [r3, #0]
    5ad0:	7823      	ldrb	r3, [r4, #0]
    5ad2:	2b2a      	cmp	r3, #42	; 0x2a
    5ad4:	d02c      	beq.n	5b30 <_vfiprintf_r+0x11c>
    5ad6:	2000      	movs	r0, #0
    5ad8:	210a      	movs	r1, #10
    5ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5adc:	7822      	ldrb	r2, [r4, #0]
    5ade:	3a30      	subs	r2, #48	; 0x30
    5ae0:	2a09      	cmp	r2, #9
    5ae2:	d800      	bhi.n	5ae6 <_vfiprintf_r+0xd2>
    5ae4:	e06b      	b.n	5bbe <_vfiprintf_r+0x1aa>
    5ae6:	2800      	cmp	r0, #0
    5ae8:	d02a      	beq.n	5b40 <_vfiprintf_r+0x12c>
    5aea:	9309      	str	r3, [sp, #36]	; 0x24
    5aec:	e028      	b.n	5b40 <_vfiprintf_r+0x12c>
    5aee:	4b51      	ldr	r3, [pc, #324]	; (5c34 <_vfiprintf_r+0x220>)
    5af0:	429f      	cmp	r7, r3
    5af2:	d101      	bne.n	5af8 <_vfiprintf_r+0xe4>
    5af4:	68b7      	ldr	r7, [r6, #8]
    5af6:	e79e      	b.n	5a36 <_vfiprintf_r+0x22>
    5af8:	4b4f      	ldr	r3, [pc, #316]	; (5c38 <_vfiprintf_r+0x224>)
    5afa:	429f      	cmp	r7, r3
    5afc:	d19b      	bne.n	5a36 <_vfiprintf_r+0x22>
    5afe:	68f7      	ldr	r7, [r6, #12]
    5b00:	e799      	b.n	5a36 <_vfiprintf_r+0x22>
    5b02:	0039      	movs	r1, r7
    5b04:	0030      	movs	r0, r6
    5b06:	f7fe facd 	bl	40a4 <__swsetup_r>
    5b0a:	2800      	cmp	r0, #0
    5b0c:	d099      	beq.n	5a42 <_vfiprintf_r+0x2e>
    5b0e:	2001      	movs	r0, #1
    5b10:	4240      	negs	r0, r0
    5b12:	b01f      	add	sp, #124	; 0x7c
    5b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b16:	2b25      	cmp	r3, #37	; 0x25
    5b18:	d09f      	beq.n	5a5a <_vfiprintf_r+0x46>
    5b1a:	3401      	adds	r4, #1
    5b1c:	e79a      	b.n	5a54 <_vfiprintf_r+0x40>
    5b1e:	4b44      	ldr	r3, [pc, #272]	; (5c30 <_vfiprintf_r+0x21c>)
    5b20:	6829      	ldr	r1, [r5, #0]
    5b22:	1ac0      	subs	r0, r0, r3
    5b24:	2301      	movs	r3, #1
    5b26:	4083      	lsls	r3, r0
    5b28:	430b      	orrs	r3, r1
    5b2a:	602b      	str	r3, [r5, #0]
    5b2c:	4664      	mov	r4, ip
    5b2e:	e7b7      	b.n	5aa0 <_vfiprintf_r+0x8c>
    5b30:	9b05      	ldr	r3, [sp, #20]
    5b32:	1d18      	adds	r0, r3, #4
    5b34:	681b      	ldr	r3, [r3, #0]
    5b36:	9005      	str	r0, [sp, #20]
    5b38:	2b00      	cmp	r3, #0
    5b3a:	db3a      	blt.n	5bb2 <_vfiprintf_r+0x19e>
    5b3c:	9309      	str	r3, [sp, #36]	; 0x24
    5b3e:	4664      	mov	r4, ip
    5b40:	7823      	ldrb	r3, [r4, #0]
    5b42:	2b2e      	cmp	r3, #46	; 0x2e
    5b44:	d10b      	bne.n	5b5e <_vfiprintf_r+0x14a>
    5b46:	7863      	ldrb	r3, [r4, #1]
    5b48:	1c62      	adds	r2, r4, #1
    5b4a:	2b2a      	cmp	r3, #42	; 0x2a
    5b4c:	d13f      	bne.n	5bce <_vfiprintf_r+0x1ba>
    5b4e:	9b05      	ldr	r3, [sp, #20]
    5b50:	3402      	adds	r4, #2
    5b52:	1d1a      	adds	r2, r3, #4
    5b54:	681b      	ldr	r3, [r3, #0]
    5b56:	9205      	str	r2, [sp, #20]
    5b58:	2b00      	cmp	r3, #0
    5b5a:	db35      	blt.n	5bc8 <_vfiprintf_r+0x1b4>
    5b5c:	9307      	str	r3, [sp, #28]
    5b5e:	7821      	ldrb	r1, [r4, #0]
    5b60:	2203      	movs	r2, #3
    5b62:	4836      	ldr	r0, [pc, #216]	; (5c3c <_vfiprintf_r+0x228>)
    5b64:	f7ff fb8a 	bl	527c <memchr>
    5b68:	2800      	cmp	r0, #0
    5b6a:	d007      	beq.n	5b7c <_vfiprintf_r+0x168>
    5b6c:	4b33      	ldr	r3, [pc, #204]	; (5c3c <_vfiprintf_r+0x228>)
    5b6e:	682a      	ldr	r2, [r5, #0]
    5b70:	1ac0      	subs	r0, r0, r3
    5b72:	2340      	movs	r3, #64	; 0x40
    5b74:	4083      	lsls	r3, r0
    5b76:	4313      	orrs	r3, r2
    5b78:	602b      	str	r3, [r5, #0]
    5b7a:	3401      	adds	r4, #1
    5b7c:	7821      	ldrb	r1, [r4, #0]
    5b7e:	1c63      	adds	r3, r4, #1
    5b80:	2206      	movs	r2, #6
    5b82:	482f      	ldr	r0, [pc, #188]	; (5c40 <_vfiprintf_r+0x22c>)
    5b84:	9302      	str	r3, [sp, #8]
    5b86:	7629      	strb	r1, [r5, #24]
    5b88:	f7ff fb78 	bl	527c <memchr>
    5b8c:	2800      	cmp	r0, #0
    5b8e:	d044      	beq.n	5c1a <_vfiprintf_r+0x206>
    5b90:	4b2c      	ldr	r3, [pc, #176]	; (5c44 <_vfiprintf_r+0x230>)
    5b92:	2b00      	cmp	r3, #0
    5b94:	d12f      	bne.n	5bf6 <_vfiprintf_r+0x1e2>
    5b96:	6829      	ldr	r1, [r5, #0]
    5b98:	9b05      	ldr	r3, [sp, #20]
    5b9a:	2207      	movs	r2, #7
    5b9c:	05c9      	lsls	r1, r1, #23
    5b9e:	d528      	bpl.n	5bf2 <_vfiprintf_r+0x1de>
    5ba0:	189b      	adds	r3, r3, r2
    5ba2:	4393      	bics	r3, r2
    5ba4:	3308      	adds	r3, #8
    5ba6:	9305      	str	r3, [sp, #20]
    5ba8:	696b      	ldr	r3, [r5, #20]
    5baa:	9a03      	ldr	r2, [sp, #12]
    5bac:	189b      	adds	r3, r3, r2
    5bae:	616b      	str	r3, [r5, #20]
    5bb0:	e74f      	b.n	5a52 <_vfiprintf_r+0x3e>
    5bb2:	425b      	negs	r3, r3
    5bb4:	60eb      	str	r3, [r5, #12]
    5bb6:	2302      	movs	r3, #2
    5bb8:	430b      	orrs	r3, r1
    5bba:	602b      	str	r3, [r5, #0]
    5bbc:	e7bf      	b.n	5b3e <_vfiprintf_r+0x12a>
    5bbe:	434b      	muls	r3, r1
    5bc0:	3401      	adds	r4, #1
    5bc2:	189b      	adds	r3, r3, r2
    5bc4:	2001      	movs	r0, #1
    5bc6:	e789      	b.n	5adc <_vfiprintf_r+0xc8>
    5bc8:	2301      	movs	r3, #1
    5bca:	425b      	negs	r3, r3
    5bcc:	e7c6      	b.n	5b5c <_vfiprintf_r+0x148>
    5bce:	2300      	movs	r3, #0
    5bd0:	0014      	movs	r4, r2
    5bd2:	200a      	movs	r0, #10
    5bd4:	001a      	movs	r2, r3
    5bd6:	606b      	str	r3, [r5, #4]
    5bd8:	7821      	ldrb	r1, [r4, #0]
    5bda:	3930      	subs	r1, #48	; 0x30
    5bdc:	2909      	cmp	r1, #9
    5bde:	d903      	bls.n	5be8 <_vfiprintf_r+0x1d4>
    5be0:	2b00      	cmp	r3, #0
    5be2:	d0bc      	beq.n	5b5e <_vfiprintf_r+0x14a>
    5be4:	9207      	str	r2, [sp, #28]
    5be6:	e7ba      	b.n	5b5e <_vfiprintf_r+0x14a>
    5be8:	4342      	muls	r2, r0
    5bea:	3401      	adds	r4, #1
    5bec:	1852      	adds	r2, r2, r1
    5bee:	2301      	movs	r3, #1
    5bf0:	e7f2      	b.n	5bd8 <_vfiprintf_r+0x1c4>
    5bf2:	3307      	adds	r3, #7
    5bf4:	e7d5      	b.n	5ba2 <_vfiprintf_r+0x18e>
    5bf6:	ab05      	add	r3, sp, #20
    5bf8:	9300      	str	r3, [sp, #0]
    5bfa:	003a      	movs	r2, r7
    5bfc:	4b12      	ldr	r3, [pc, #72]	; (5c48 <_vfiprintf_r+0x234>)
    5bfe:	0029      	movs	r1, r5
    5c00:	0030      	movs	r0, r6
    5c02:	f7fd fce3 	bl	35cc <_printf_float>
    5c06:	9003      	str	r0, [sp, #12]
    5c08:	9b03      	ldr	r3, [sp, #12]
    5c0a:	3301      	adds	r3, #1
    5c0c:	d1cc      	bne.n	5ba8 <_vfiprintf_r+0x194>
    5c0e:	89bb      	ldrh	r3, [r7, #12]
    5c10:	065b      	lsls	r3, r3, #25
    5c12:	d500      	bpl.n	5c16 <_vfiprintf_r+0x202>
    5c14:	e77b      	b.n	5b0e <_vfiprintf_r+0xfa>
    5c16:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5c18:	e77b      	b.n	5b12 <_vfiprintf_r+0xfe>
    5c1a:	ab05      	add	r3, sp, #20
    5c1c:	9300      	str	r3, [sp, #0]
    5c1e:	003a      	movs	r2, r7
    5c20:	4b09      	ldr	r3, [pc, #36]	; (5c48 <_vfiprintf_r+0x234>)
    5c22:	0029      	movs	r1, r5
    5c24:	0030      	movs	r0, r6
    5c26:	f7fd ff8b 	bl	3b40 <_printf_i>
    5c2a:	e7ec      	b.n	5c06 <_vfiprintf_r+0x1f2>
    5c2c:	00008b08 	.word	0x00008b08
    5c30:	00008c44 	.word	0x00008c44
    5c34:	00008b28 	.word	0x00008b28
    5c38:	00008ae8 	.word	0x00008ae8
    5c3c:	00008c4a 	.word	0x00008c4a
    5c40:	00008c4e 	.word	0x00008c4e
    5c44:	000035cd 	.word	0x000035cd
    5c48:	000059ef 	.word	0x000059ef

00005c4c <_sbrk_r>:
    5c4c:	2300      	movs	r3, #0
    5c4e:	b570      	push	{r4, r5, r6, lr}
    5c50:	4c06      	ldr	r4, [pc, #24]	; (5c6c <_sbrk_r+0x20>)
    5c52:	0005      	movs	r5, r0
    5c54:	0008      	movs	r0, r1
    5c56:	6023      	str	r3, [r4, #0]
    5c58:	f7fc fe08 	bl	286c <_sbrk>
    5c5c:	1c43      	adds	r3, r0, #1
    5c5e:	d103      	bne.n	5c68 <_sbrk_r+0x1c>
    5c60:	6823      	ldr	r3, [r4, #0]
    5c62:	2b00      	cmp	r3, #0
    5c64:	d000      	beq.n	5c68 <_sbrk_r+0x1c>
    5c66:	602b      	str	r3, [r5, #0]
    5c68:	bd70      	pop	{r4, r5, r6, pc}
    5c6a:	46c0      	nop			; (mov r8, r8)
    5c6c:	20001664 	.word	0x20001664

00005c70 <__sread>:
    5c70:	b570      	push	{r4, r5, r6, lr}
    5c72:	000c      	movs	r4, r1
    5c74:	250e      	movs	r5, #14
    5c76:	5f49      	ldrsh	r1, [r1, r5]
    5c78:	f000 f8b8 	bl	5dec <_read_r>
    5c7c:	2800      	cmp	r0, #0
    5c7e:	db03      	blt.n	5c88 <__sread+0x18>
    5c80:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5c82:	181b      	adds	r3, r3, r0
    5c84:	6563      	str	r3, [r4, #84]	; 0x54
    5c86:	bd70      	pop	{r4, r5, r6, pc}
    5c88:	89a3      	ldrh	r3, [r4, #12]
    5c8a:	4a02      	ldr	r2, [pc, #8]	; (5c94 <__sread+0x24>)
    5c8c:	4013      	ands	r3, r2
    5c8e:	81a3      	strh	r3, [r4, #12]
    5c90:	e7f9      	b.n	5c86 <__sread+0x16>
    5c92:	46c0      	nop			; (mov r8, r8)
    5c94:	ffffefff 	.word	0xffffefff

00005c98 <__swrite>:
    5c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c9a:	001f      	movs	r7, r3
    5c9c:	898b      	ldrh	r3, [r1, #12]
    5c9e:	0005      	movs	r5, r0
    5ca0:	000c      	movs	r4, r1
    5ca2:	0016      	movs	r6, r2
    5ca4:	05db      	lsls	r3, r3, #23
    5ca6:	d505      	bpl.n	5cb4 <__swrite+0x1c>
    5ca8:	230e      	movs	r3, #14
    5caa:	5ec9      	ldrsh	r1, [r1, r3]
    5cac:	2200      	movs	r2, #0
    5cae:	2302      	movs	r3, #2
    5cb0:	f000 f874 	bl	5d9c <_lseek_r>
    5cb4:	89a3      	ldrh	r3, [r4, #12]
    5cb6:	4a05      	ldr	r2, [pc, #20]	; (5ccc <__swrite+0x34>)
    5cb8:	0028      	movs	r0, r5
    5cba:	4013      	ands	r3, r2
    5cbc:	81a3      	strh	r3, [r4, #12]
    5cbe:	0032      	movs	r2, r6
    5cc0:	230e      	movs	r3, #14
    5cc2:	5ee1      	ldrsh	r1, [r4, r3]
    5cc4:	003b      	movs	r3, r7
    5cc6:	f000 f81f 	bl	5d08 <_write_r>
    5cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ccc:	ffffefff 	.word	0xffffefff

00005cd0 <__sseek>:
    5cd0:	b570      	push	{r4, r5, r6, lr}
    5cd2:	000c      	movs	r4, r1
    5cd4:	250e      	movs	r5, #14
    5cd6:	5f49      	ldrsh	r1, [r1, r5]
    5cd8:	f000 f860 	bl	5d9c <_lseek_r>
    5cdc:	89a3      	ldrh	r3, [r4, #12]
    5cde:	1c42      	adds	r2, r0, #1
    5ce0:	d103      	bne.n	5cea <__sseek+0x1a>
    5ce2:	4a05      	ldr	r2, [pc, #20]	; (5cf8 <__sseek+0x28>)
    5ce4:	4013      	ands	r3, r2
    5ce6:	81a3      	strh	r3, [r4, #12]
    5ce8:	bd70      	pop	{r4, r5, r6, pc}
    5cea:	2280      	movs	r2, #128	; 0x80
    5cec:	0152      	lsls	r2, r2, #5
    5cee:	4313      	orrs	r3, r2
    5cf0:	81a3      	strh	r3, [r4, #12]
    5cf2:	6560      	str	r0, [r4, #84]	; 0x54
    5cf4:	e7f8      	b.n	5ce8 <__sseek+0x18>
    5cf6:	46c0      	nop			; (mov r8, r8)
    5cf8:	ffffefff 	.word	0xffffefff

00005cfc <__sclose>:
    5cfc:	b510      	push	{r4, lr}
    5cfe:	230e      	movs	r3, #14
    5d00:	5ec9      	ldrsh	r1, [r1, r3]
    5d02:	f000 f815 	bl	5d30 <_close_r>
    5d06:	bd10      	pop	{r4, pc}

00005d08 <_write_r>:
    5d08:	b570      	push	{r4, r5, r6, lr}
    5d0a:	0005      	movs	r5, r0
    5d0c:	0008      	movs	r0, r1
    5d0e:	0011      	movs	r1, r2
    5d10:	2200      	movs	r2, #0
    5d12:	4c06      	ldr	r4, [pc, #24]	; (5d2c <_write_r+0x24>)
    5d14:	6022      	str	r2, [r4, #0]
    5d16:	001a      	movs	r2, r3
    5d18:	f7fc fd80 	bl	281c <_write>
    5d1c:	1c43      	adds	r3, r0, #1
    5d1e:	d103      	bne.n	5d28 <_write_r+0x20>
    5d20:	6823      	ldr	r3, [r4, #0]
    5d22:	2b00      	cmp	r3, #0
    5d24:	d000      	beq.n	5d28 <_write_r+0x20>
    5d26:	602b      	str	r3, [r5, #0]
    5d28:	bd70      	pop	{r4, r5, r6, pc}
    5d2a:	46c0      	nop			; (mov r8, r8)
    5d2c:	20001664 	.word	0x20001664

00005d30 <_close_r>:
    5d30:	2300      	movs	r3, #0
    5d32:	b570      	push	{r4, r5, r6, lr}
    5d34:	4c06      	ldr	r4, [pc, #24]	; (5d50 <_close_r+0x20>)
    5d36:	0005      	movs	r5, r0
    5d38:	0008      	movs	r0, r1
    5d3a:	6023      	str	r3, [r4, #0]
    5d3c:	f7fc fda8 	bl	2890 <_close>
    5d40:	1c43      	adds	r3, r0, #1
    5d42:	d103      	bne.n	5d4c <_close_r+0x1c>
    5d44:	6823      	ldr	r3, [r4, #0]
    5d46:	2b00      	cmp	r3, #0
    5d48:	d000      	beq.n	5d4c <_close_r+0x1c>
    5d4a:	602b      	str	r3, [r5, #0]
    5d4c:	bd70      	pop	{r4, r5, r6, pc}
    5d4e:	46c0      	nop			; (mov r8, r8)
    5d50:	20001664 	.word	0x20001664

00005d54 <_fstat_r>:
    5d54:	2300      	movs	r3, #0
    5d56:	b570      	push	{r4, r5, r6, lr}
    5d58:	4c06      	ldr	r4, [pc, #24]	; (5d74 <_fstat_r+0x20>)
    5d5a:	0005      	movs	r5, r0
    5d5c:	0008      	movs	r0, r1
    5d5e:	0011      	movs	r1, r2
    5d60:	6023      	str	r3, [r4, #0]
    5d62:	f7fc fd98 	bl	2896 <_fstat>
    5d66:	1c43      	adds	r3, r0, #1
    5d68:	d103      	bne.n	5d72 <_fstat_r+0x1e>
    5d6a:	6823      	ldr	r3, [r4, #0]
    5d6c:	2b00      	cmp	r3, #0
    5d6e:	d000      	beq.n	5d72 <_fstat_r+0x1e>
    5d70:	602b      	str	r3, [r5, #0]
    5d72:	bd70      	pop	{r4, r5, r6, pc}
    5d74:	20001664 	.word	0x20001664

00005d78 <_isatty_r>:
    5d78:	2300      	movs	r3, #0
    5d7a:	b570      	push	{r4, r5, r6, lr}
    5d7c:	4c06      	ldr	r4, [pc, #24]	; (5d98 <_isatty_r+0x20>)
    5d7e:	0005      	movs	r5, r0
    5d80:	0008      	movs	r0, r1
    5d82:	6023      	str	r3, [r4, #0]
    5d84:	f7fc fd8c 	bl	28a0 <_isatty>
    5d88:	1c43      	adds	r3, r0, #1
    5d8a:	d103      	bne.n	5d94 <_isatty_r+0x1c>
    5d8c:	6823      	ldr	r3, [r4, #0]
    5d8e:	2b00      	cmp	r3, #0
    5d90:	d000      	beq.n	5d94 <_isatty_r+0x1c>
    5d92:	602b      	str	r3, [r5, #0]
    5d94:	bd70      	pop	{r4, r5, r6, pc}
    5d96:	46c0      	nop			; (mov r8, r8)
    5d98:	20001664 	.word	0x20001664

00005d9c <_lseek_r>:
    5d9c:	b570      	push	{r4, r5, r6, lr}
    5d9e:	0005      	movs	r5, r0
    5da0:	0008      	movs	r0, r1
    5da2:	0011      	movs	r1, r2
    5da4:	2200      	movs	r2, #0
    5da6:	4c06      	ldr	r4, [pc, #24]	; (5dc0 <_lseek_r+0x24>)
    5da8:	6022      	str	r2, [r4, #0]
    5daa:	001a      	movs	r2, r3
    5dac:	f7fc fd7a 	bl	28a4 <_lseek>
    5db0:	1c43      	adds	r3, r0, #1
    5db2:	d103      	bne.n	5dbc <_lseek_r+0x20>
    5db4:	6823      	ldr	r3, [r4, #0]
    5db6:	2b00      	cmp	r3, #0
    5db8:	d000      	beq.n	5dbc <_lseek_r+0x20>
    5dba:	602b      	str	r3, [r5, #0]
    5dbc:	bd70      	pop	{r4, r5, r6, pc}
    5dbe:	46c0      	nop			; (mov r8, r8)
    5dc0:	20001664 	.word	0x20001664

00005dc4 <__ascii_mbtowc>:
    5dc4:	b082      	sub	sp, #8
    5dc6:	2900      	cmp	r1, #0
    5dc8:	d100      	bne.n	5dcc <__ascii_mbtowc+0x8>
    5dca:	a901      	add	r1, sp, #4
    5dcc:	1e10      	subs	r0, r2, #0
    5dce:	d006      	beq.n	5dde <__ascii_mbtowc+0x1a>
    5dd0:	2b00      	cmp	r3, #0
    5dd2:	d006      	beq.n	5de2 <__ascii_mbtowc+0x1e>
    5dd4:	7813      	ldrb	r3, [r2, #0]
    5dd6:	600b      	str	r3, [r1, #0]
    5dd8:	7810      	ldrb	r0, [r2, #0]
    5dda:	1e43      	subs	r3, r0, #1
    5ddc:	4198      	sbcs	r0, r3
    5dde:	b002      	add	sp, #8
    5de0:	4770      	bx	lr
    5de2:	2002      	movs	r0, #2
    5de4:	4240      	negs	r0, r0
    5de6:	e7fa      	b.n	5dde <__ascii_mbtowc+0x1a>

00005de8 <__malloc_lock>:
    5de8:	4770      	bx	lr

00005dea <__malloc_unlock>:
    5dea:	4770      	bx	lr

00005dec <_read_r>:
    5dec:	b570      	push	{r4, r5, r6, lr}
    5dee:	0005      	movs	r5, r0
    5df0:	0008      	movs	r0, r1
    5df2:	0011      	movs	r1, r2
    5df4:	2200      	movs	r2, #0
    5df6:	4c06      	ldr	r4, [pc, #24]	; (5e10 <_read_r+0x24>)
    5df8:	6022      	str	r2, [r4, #0]
    5dfa:	001a      	movs	r2, r3
    5dfc:	f7fc fcec 	bl	27d8 <_read>
    5e00:	1c43      	adds	r3, r0, #1
    5e02:	d103      	bne.n	5e0c <_read_r+0x20>
    5e04:	6823      	ldr	r3, [r4, #0]
    5e06:	2b00      	cmp	r3, #0
    5e08:	d000      	beq.n	5e0c <_read_r+0x20>
    5e0a:	602b      	str	r3, [r5, #0]
    5e0c:	bd70      	pop	{r4, r5, r6, pc}
    5e0e:	46c0      	nop			; (mov r8, r8)
    5e10:	20001664 	.word	0x20001664

00005e14 <__ascii_wctomb>:
    5e14:	1e0b      	subs	r3, r1, #0
    5e16:	d004      	beq.n	5e22 <__ascii_wctomb+0xe>
    5e18:	2aff      	cmp	r2, #255	; 0xff
    5e1a:	d904      	bls.n	5e26 <__ascii_wctomb+0x12>
    5e1c:	238a      	movs	r3, #138	; 0x8a
    5e1e:	6003      	str	r3, [r0, #0]
    5e20:	3b8b      	subs	r3, #139	; 0x8b
    5e22:	0018      	movs	r0, r3
    5e24:	4770      	bx	lr
    5e26:	700a      	strb	r2, [r1, #0]
    5e28:	2301      	movs	r3, #1
    5e2a:	e7fa      	b.n	5e22 <__ascii_wctomb+0xe>

00005e2c <__gnu_thumb1_case_uqi>:
    5e2c:	b402      	push	{r1}
    5e2e:	4671      	mov	r1, lr
    5e30:	0849      	lsrs	r1, r1, #1
    5e32:	0049      	lsls	r1, r1, #1
    5e34:	5c09      	ldrb	r1, [r1, r0]
    5e36:	0049      	lsls	r1, r1, #1
    5e38:	448e      	add	lr, r1
    5e3a:	bc02      	pop	{r1}
    5e3c:	4770      	bx	lr
    5e3e:	46c0      	nop			; (mov r8, r8)

00005e40 <__udivsi3>:
    5e40:	2200      	movs	r2, #0
    5e42:	0843      	lsrs	r3, r0, #1
    5e44:	428b      	cmp	r3, r1
    5e46:	d374      	bcc.n	5f32 <__udivsi3+0xf2>
    5e48:	0903      	lsrs	r3, r0, #4
    5e4a:	428b      	cmp	r3, r1
    5e4c:	d35f      	bcc.n	5f0e <__udivsi3+0xce>
    5e4e:	0a03      	lsrs	r3, r0, #8
    5e50:	428b      	cmp	r3, r1
    5e52:	d344      	bcc.n	5ede <__udivsi3+0x9e>
    5e54:	0b03      	lsrs	r3, r0, #12
    5e56:	428b      	cmp	r3, r1
    5e58:	d328      	bcc.n	5eac <__udivsi3+0x6c>
    5e5a:	0c03      	lsrs	r3, r0, #16
    5e5c:	428b      	cmp	r3, r1
    5e5e:	d30d      	bcc.n	5e7c <__udivsi3+0x3c>
    5e60:	22ff      	movs	r2, #255	; 0xff
    5e62:	0209      	lsls	r1, r1, #8
    5e64:	ba12      	rev	r2, r2
    5e66:	0c03      	lsrs	r3, r0, #16
    5e68:	428b      	cmp	r3, r1
    5e6a:	d302      	bcc.n	5e72 <__udivsi3+0x32>
    5e6c:	1212      	asrs	r2, r2, #8
    5e6e:	0209      	lsls	r1, r1, #8
    5e70:	d065      	beq.n	5f3e <__udivsi3+0xfe>
    5e72:	0b03      	lsrs	r3, r0, #12
    5e74:	428b      	cmp	r3, r1
    5e76:	d319      	bcc.n	5eac <__udivsi3+0x6c>
    5e78:	e000      	b.n	5e7c <__udivsi3+0x3c>
    5e7a:	0a09      	lsrs	r1, r1, #8
    5e7c:	0bc3      	lsrs	r3, r0, #15
    5e7e:	428b      	cmp	r3, r1
    5e80:	d301      	bcc.n	5e86 <__udivsi3+0x46>
    5e82:	03cb      	lsls	r3, r1, #15
    5e84:	1ac0      	subs	r0, r0, r3
    5e86:	4152      	adcs	r2, r2
    5e88:	0b83      	lsrs	r3, r0, #14
    5e8a:	428b      	cmp	r3, r1
    5e8c:	d301      	bcc.n	5e92 <__udivsi3+0x52>
    5e8e:	038b      	lsls	r3, r1, #14
    5e90:	1ac0      	subs	r0, r0, r3
    5e92:	4152      	adcs	r2, r2
    5e94:	0b43      	lsrs	r3, r0, #13
    5e96:	428b      	cmp	r3, r1
    5e98:	d301      	bcc.n	5e9e <__udivsi3+0x5e>
    5e9a:	034b      	lsls	r3, r1, #13
    5e9c:	1ac0      	subs	r0, r0, r3
    5e9e:	4152      	adcs	r2, r2
    5ea0:	0b03      	lsrs	r3, r0, #12
    5ea2:	428b      	cmp	r3, r1
    5ea4:	d301      	bcc.n	5eaa <__udivsi3+0x6a>
    5ea6:	030b      	lsls	r3, r1, #12
    5ea8:	1ac0      	subs	r0, r0, r3
    5eaa:	4152      	adcs	r2, r2
    5eac:	0ac3      	lsrs	r3, r0, #11
    5eae:	428b      	cmp	r3, r1
    5eb0:	d301      	bcc.n	5eb6 <__udivsi3+0x76>
    5eb2:	02cb      	lsls	r3, r1, #11
    5eb4:	1ac0      	subs	r0, r0, r3
    5eb6:	4152      	adcs	r2, r2
    5eb8:	0a83      	lsrs	r3, r0, #10
    5eba:	428b      	cmp	r3, r1
    5ebc:	d301      	bcc.n	5ec2 <__udivsi3+0x82>
    5ebe:	028b      	lsls	r3, r1, #10
    5ec0:	1ac0      	subs	r0, r0, r3
    5ec2:	4152      	adcs	r2, r2
    5ec4:	0a43      	lsrs	r3, r0, #9
    5ec6:	428b      	cmp	r3, r1
    5ec8:	d301      	bcc.n	5ece <__udivsi3+0x8e>
    5eca:	024b      	lsls	r3, r1, #9
    5ecc:	1ac0      	subs	r0, r0, r3
    5ece:	4152      	adcs	r2, r2
    5ed0:	0a03      	lsrs	r3, r0, #8
    5ed2:	428b      	cmp	r3, r1
    5ed4:	d301      	bcc.n	5eda <__udivsi3+0x9a>
    5ed6:	020b      	lsls	r3, r1, #8
    5ed8:	1ac0      	subs	r0, r0, r3
    5eda:	4152      	adcs	r2, r2
    5edc:	d2cd      	bcs.n	5e7a <__udivsi3+0x3a>
    5ede:	09c3      	lsrs	r3, r0, #7
    5ee0:	428b      	cmp	r3, r1
    5ee2:	d301      	bcc.n	5ee8 <__udivsi3+0xa8>
    5ee4:	01cb      	lsls	r3, r1, #7
    5ee6:	1ac0      	subs	r0, r0, r3
    5ee8:	4152      	adcs	r2, r2
    5eea:	0983      	lsrs	r3, r0, #6
    5eec:	428b      	cmp	r3, r1
    5eee:	d301      	bcc.n	5ef4 <__udivsi3+0xb4>
    5ef0:	018b      	lsls	r3, r1, #6
    5ef2:	1ac0      	subs	r0, r0, r3
    5ef4:	4152      	adcs	r2, r2
    5ef6:	0943      	lsrs	r3, r0, #5
    5ef8:	428b      	cmp	r3, r1
    5efa:	d301      	bcc.n	5f00 <__udivsi3+0xc0>
    5efc:	014b      	lsls	r3, r1, #5
    5efe:	1ac0      	subs	r0, r0, r3
    5f00:	4152      	adcs	r2, r2
    5f02:	0903      	lsrs	r3, r0, #4
    5f04:	428b      	cmp	r3, r1
    5f06:	d301      	bcc.n	5f0c <__udivsi3+0xcc>
    5f08:	010b      	lsls	r3, r1, #4
    5f0a:	1ac0      	subs	r0, r0, r3
    5f0c:	4152      	adcs	r2, r2
    5f0e:	08c3      	lsrs	r3, r0, #3
    5f10:	428b      	cmp	r3, r1
    5f12:	d301      	bcc.n	5f18 <__udivsi3+0xd8>
    5f14:	00cb      	lsls	r3, r1, #3
    5f16:	1ac0      	subs	r0, r0, r3
    5f18:	4152      	adcs	r2, r2
    5f1a:	0883      	lsrs	r3, r0, #2
    5f1c:	428b      	cmp	r3, r1
    5f1e:	d301      	bcc.n	5f24 <__udivsi3+0xe4>
    5f20:	008b      	lsls	r3, r1, #2
    5f22:	1ac0      	subs	r0, r0, r3
    5f24:	4152      	adcs	r2, r2
    5f26:	0843      	lsrs	r3, r0, #1
    5f28:	428b      	cmp	r3, r1
    5f2a:	d301      	bcc.n	5f30 <__udivsi3+0xf0>
    5f2c:	004b      	lsls	r3, r1, #1
    5f2e:	1ac0      	subs	r0, r0, r3
    5f30:	4152      	adcs	r2, r2
    5f32:	1a41      	subs	r1, r0, r1
    5f34:	d200      	bcs.n	5f38 <__udivsi3+0xf8>
    5f36:	4601      	mov	r1, r0
    5f38:	4152      	adcs	r2, r2
    5f3a:	4610      	mov	r0, r2
    5f3c:	4770      	bx	lr
    5f3e:	e7ff      	b.n	5f40 <__udivsi3+0x100>
    5f40:	b501      	push	{r0, lr}
    5f42:	2000      	movs	r0, #0
    5f44:	f000 f8f0 	bl	6128 <__aeabi_idiv0>
    5f48:	bd02      	pop	{r1, pc}
    5f4a:	46c0      	nop			; (mov r8, r8)

00005f4c <__aeabi_uidivmod>:
    5f4c:	2900      	cmp	r1, #0
    5f4e:	d0f7      	beq.n	5f40 <__udivsi3+0x100>
    5f50:	e776      	b.n	5e40 <__udivsi3>
    5f52:	4770      	bx	lr

00005f54 <__divsi3>:
    5f54:	4603      	mov	r3, r0
    5f56:	430b      	orrs	r3, r1
    5f58:	d47f      	bmi.n	605a <__divsi3+0x106>
    5f5a:	2200      	movs	r2, #0
    5f5c:	0843      	lsrs	r3, r0, #1
    5f5e:	428b      	cmp	r3, r1
    5f60:	d374      	bcc.n	604c <__divsi3+0xf8>
    5f62:	0903      	lsrs	r3, r0, #4
    5f64:	428b      	cmp	r3, r1
    5f66:	d35f      	bcc.n	6028 <__divsi3+0xd4>
    5f68:	0a03      	lsrs	r3, r0, #8
    5f6a:	428b      	cmp	r3, r1
    5f6c:	d344      	bcc.n	5ff8 <__divsi3+0xa4>
    5f6e:	0b03      	lsrs	r3, r0, #12
    5f70:	428b      	cmp	r3, r1
    5f72:	d328      	bcc.n	5fc6 <__divsi3+0x72>
    5f74:	0c03      	lsrs	r3, r0, #16
    5f76:	428b      	cmp	r3, r1
    5f78:	d30d      	bcc.n	5f96 <__divsi3+0x42>
    5f7a:	22ff      	movs	r2, #255	; 0xff
    5f7c:	0209      	lsls	r1, r1, #8
    5f7e:	ba12      	rev	r2, r2
    5f80:	0c03      	lsrs	r3, r0, #16
    5f82:	428b      	cmp	r3, r1
    5f84:	d302      	bcc.n	5f8c <__divsi3+0x38>
    5f86:	1212      	asrs	r2, r2, #8
    5f88:	0209      	lsls	r1, r1, #8
    5f8a:	d065      	beq.n	6058 <__divsi3+0x104>
    5f8c:	0b03      	lsrs	r3, r0, #12
    5f8e:	428b      	cmp	r3, r1
    5f90:	d319      	bcc.n	5fc6 <__divsi3+0x72>
    5f92:	e000      	b.n	5f96 <__divsi3+0x42>
    5f94:	0a09      	lsrs	r1, r1, #8
    5f96:	0bc3      	lsrs	r3, r0, #15
    5f98:	428b      	cmp	r3, r1
    5f9a:	d301      	bcc.n	5fa0 <__divsi3+0x4c>
    5f9c:	03cb      	lsls	r3, r1, #15
    5f9e:	1ac0      	subs	r0, r0, r3
    5fa0:	4152      	adcs	r2, r2
    5fa2:	0b83      	lsrs	r3, r0, #14
    5fa4:	428b      	cmp	r3, r1
    5fa6:	d301      	bcc.n	5fac <__divsi3+0x58>
    5fa8:	038b      	lsls	r3, r1, #14
    5faa:	1ac0      	subs	r0, r0, r3
    5fac:	4152      	adcs	r2, r2
    5fae:	0b43      	lsrs	r3, r0, #13
    5fb0:	428b      	cmp	r3, r1
    5fb2:	d301      	bcc.n	5fb8 <__divsi3+0x64>
    5fb4:	034b      	lsls	r3, r1, #13
    5fb6:	1ac0      	subs	r0, r0, r3
    5fb8:	4152      	adcs	r2, r2
    5fba:	0b03      	lsrs	r3, r0, #12
    5fbc:	428b      	cmp	r3, r1
    5fbe:	d301      	bcc.n	5fc4 <__divsi3+0x70>
    5fc0:	030b      	lsls	r3, r1, #12
    5fc2:	1ac0      	subs	r0, r0, r3
    5fc4:	4152      	adcs	r2, r2
    5fc6:	0ac3      	lsrs	r3, r0, #11
    5fc8:	428b      	cmp	r3, r1
    5fca:	d301      	bcc.n	5fd0 <__divsi3+0x7c>
    5fcc:	02cb      	lsls	r3, r1, #11
    5fce:	1ac0      	subs	r0, r0, r3
    5fd0:	4152      	adcs	r2, r2
    5fd2:	0a83      	lsrs	r3, r0, #10
    5fd4:	428b      	cmp	r3, r1
    5fd6:	d301      	bcc.n	5fdc <__divsi3+0x88>
    5fd8:	028b      	lsls	r3, r1, #10
    5fda:	1ac0      	subs	r0, r0, r3
    5fdc:	4152      	adcs	r2, r2
    5fde:	0a43      	lsrs	r3, r0, #9
    5fe0:	428b      	cmp	r3, r1
    5fe2:	d301      	bcc.n	5fe8 <__divsi3+0x94>
    5fe4:	024b      	lsls	r3, r1, #9
    5fe6:	1ac0      	subs	r0, r0, r3
    5fe8:	4152      	adcs	r2, r2
    5fea:	0a03      	lsrs	r3, r0, #8
    5fec:	428b      	cmp	r3, r1
    5fee:	d301      	bcc.n	5ff4 <__divsi3+0xa0>
    5ff0:	020b      	lsls	r3, r1, #8
    5ff2:	1ac0      	subs	r0, r0, r3
    5ff4:	4152      	adcs	r2, r2
    5ff6:	d2cd      	bcs.n	5f94 <__divsi3+0x40>
    5ff8:	09c3      	lsrs	r3, r0, #7
    5ffa:	428b      	cmp	r3, r1
    5ffc:	d301      	bcc.n	6002 <__divsi3+0xae>
    5ffe:	01cb      	lsls	r3, r1, #7
    6000:	1ac0      	subs	r0, r0, r3
    6002:	4152      	adcs	r2, r2
    6004:	0983      	lsrs	r3, r0, #6
    6006:	428b      	cmp	r3, r1
    6008:	d301      	bcc.n	600e <__divsi3+0xba>
    600a:	018b      	lsls	r3, r1, #6
    600c:	1ac0      	subs	r0, r0, r3
    600e:	4152      	adcs	r2, r2
    6010:	0943      	lsrs	r3, r0, #5
    6012:	428b      	cmp	r3, r1
    6014:	d301      	bcc.n	601a <__divsi3+0xc6>
    6016:	014b      	lsls	r3, r1, #5
    6018:	1ac0      	subs	r0, r0, r3
    601a:	4152      	adcs	r2, r2
    601c:	0903      	lsrs	r3, r0, #4
    601e:	428b      	cmp	r3, r1
    6020:	d301      	bcc.n	6026 <__divsi3+0xd2>
    6022:	010b      	lsls	r3, r1, #4
    6024:	1ac0      	subs	r0, r0, r3
    6026:	4152      	adcs	r2, r2
    6028:	08c3      	lsrs	r3, r0, #3
    602a:	428b      	cmp	r3, r1
    602c:	d301      	bcc.n	6032 <__divsi3+0xde>
    602e:	00cb      	lsls	r3, r1, #3
    6030:	1ac0      	subs	r0, r0, r3
    6032:	4152      	adcs	r2, r2
    6034:	0883      	lsrs	r3, r0, #2
    6036:	428b      	cmp	r3, r1
    6038:	d301      	bcc.n	603e <__divsi3+0xea>
    603a:	008b      	lsls	r3, r1, #2
    603c:	1ac0      	subs	r0, r0, r3
    603e:	4152      	adcs	r2, r2
    6040:	0843      	lsrs	r3, r0, #1
    6042:	428b      	cmp	r3, r1
    6044:	d301      	bcc.n	604a <__divsi3+0xf6>
    6046:	004b      	lsls	r3, r1, #1
    6048:	1ac0      	subs	r0, r0, r3
    604a:	4152      	adcs	r2, r2
    604c:	1a41      	subs	r1, r0, r1
    604e:	d200      	bcs.n	6052 <__divsi3+0xfe>
    6050:	4601      	mov	r1, r0
    6052:	4152      	adcs	r2, r2
    6054:	4610      	mov	r0, r2
    6056:	4770      	bx	lr
    6058:	e05d      	b.n	6116 <__divsi3+0x1c2>
    605a:	0fca      	lsrs	r2, r1, #31
    605c:	d000      	beq.n	6060 <__divsi3+0x10c>
    605e:	4249      	negs	r1, r1
    6060:	1003      	asrs	r3, r0, #32
    6062:	d300      	bcc.n	6066 <__divsi3+0x112>
    6064:	4240      	negs	r0, r0
    6066:	4053      	eors	r3, r2
    6068:	2200      	movs	r2, #0
    606a:	469c      	mov	ip, r3
    606c:	0903      	lsrs	r3, r0, #4
    606e:	428b      	cmp	r3, r1
    6070:	d32d      	bcc.n	60ce <__divsi3+0x17a>
    6072:	0a03      	lsrs	r3, r0, #8
    6074:	428b      	cmp	r3, r1
    6076:	d312      	bcc.n	609e <__divsi3+0x14a>
    6078:	22fc      	movs	r2, #252	; 0xfc
    607a:	0189      	lsls	r1, r1, #6
    607c:	ba12      	rev	r2, r2
    607e:	0a03      	lsrs	r3, r0, #8
    6080:	428b      	cmp	r3, r1
    6082:	d30c      	bcc.n	609e <__divsi3+0x14a>
    6084:	0189      	lsls	r1, r1, #6
    6086:	1192      	asrs	r2, r2, #6
    6088:	428b      	cmp	r3, r1
    608a:	d308      	bcc.n	609e <__divsi3+0x14a>
    608c:	0189      	lsls	r1, r1, #6
    608e:	1192      	asrs	r2, r2, #6
    6090:	428b      	cmp	r3, r1
    6092:	d304      	bcc.n	609e <__divsi3+0x14a>
    6094:	0189      	lsls	r1, r1, #6
    6096:	d03a      	beq.n	610e <__divsi3+0x1ba>
    6098:	1192      	asrs	r2, r2, #6
    609a:	e000      	b.n	609e <__divsi3+0x14a>
    609c:	0989      	lsrs	r1, r1, #6
    609e:	09c3      	lsrs	r3, r0, #7
    60a0:	428b      	cmp	r3, r1
    60a2:	d301      	bcc.n	60a8 <__divsi3+0x154>
    60a4:	01cb      	lsls	r3, r1, #7
    60a6:	1ac0      	subs	r0, r0, r3
    60a8:	4152      	adcs	r2, r2
    60aa:	0983      	lsrs	r3, r0, #6
    60ac:	428b      	cmp	r3, r1
    60ae:	d301      	bcc.n	60b4 <__divsi3+0x160>
    60b0:	018b      	lsls	r3, r1, #6
    60b2:	1ac0      	subs	r0, r0, r3
    60b4:	4152      	adcs	r2, r2
    60b6:	0943      	lsrs	r3, r0, #5
    60b8:	428b      	cmp	r3, r1
    60ba:	d301      	bcc.n	60c0 <__divsi3+0x16c>
    60bc:	014b      	lsls	r3, r1, #5
    60be:	1ac0      	subs	r0, r0, r3
    60c0:	4152      	adcs	r2, r2
    60c2:	0903      	lsrs	r3, r0, #4
    60c4:	428b      	cmp	r3, r1
    60c6:	d301      	bcc.n	60cc <__divsi3+0x178>
    60c8:	010b      	lsls	r3, r1, #4
    60ca:	1ac0      	subs	r0, r0, r3
    60cc:	4152      	adcs	r2, r2
    60ce:	08c3      	lsrs	r3, r0, #3
    60d0:	428b      	cmp	r3, r1
    60d2:	d301      	bcc.n	60d8 <__divsi3+0x184>
    60d4:	00cb      	lsls	r3, r1, #3
    60d6:	1ac0      	subs	r0, r0, r3
    60d8:	4152      	adcs	r2, r2
    60da:	0883      	lsrs	r3, r0, #2
    60dc:	428b      	cmp	r3, r1
    60de:	d301      	bcc.n	60e4 <__divsi3+0x190>
    60e0:	008b      	lsls	r3, r1, #2
    60e2:	1ac0      	subs	r0, r0, r3
    60e4:	4152      	adcs	r2, r2
    60e6:	d2d9      	bcs.n	609c <__divsi3+0x148>
    60e8:	0843      	lsrs	r3, r0, #1
    60ea:	428b      	cmp	r3, r1
    60ec:	d301      	bcc.n	60f2 <__divsi3+0x19e>
    60ee:	004b      	lsls	r3, r1, #1
    60f0:	1ac0      	subs	r0, r0, r3
    60f2:	4152      	adcs	r2, r2
    60f4:	1a41      	subs	r1, r0, r1
    60f6:	d200      	bcs.n	60fa <__divsi3+0x1a6>
    60f8:	4601      	mov	r1, r0
    60fa:	4663      	mov	r3, ip
    60fc:	4152      	adcs	r2, r2
    60fe:	105b      	asrs	r3, r3, #1
    6100:	4610      	mov	r0, r2
    6102:	d301      	bcc.n	6108 <__divsi3+0x1b4>
    6104:	4240      	negs	r0, r0
    6106:	2b00      	cmp	r3, #0
    6108:	d500      	bpl.n	610c <__divsi3+0x1b8>
    610a:	4249      	negs	r1, r1
    610c:	4770      	bx	lr
    610e:	4663      	mov	r3, ip
    6110:	105b      	asrs	r3, r3, #1
    6112:	d300      	bcc.n	6116 <__divsi3+0x1c2>
    6114:	4240      	negs	r0, r0
    6116:	b501      	push	{r0, lr}
    6118:	2000      	movs	r0, #0
    611a:	f000 f805 	bl	6128 <__aeabi_idiv0>
    611e:	bd02      	pop	{r1, pc}

00006120 <__aeabi_idivmod>:
    6120:	2900      	cmp	r1, #0
    6122:	d0f8      	beq.n	6116 <__divsi3+0x1c2>
    6124:	e716      	b.n	5f54 <__divsi3>
    6126:	4770      	bx	lr

00006128 <__aeabi_idiv0>:
    6128:	4770      	bx	lr
    612a:	46c0      	nop			; (mov r8, r8)

0000612c <__aeabi_cdrcmple>:
    612c:	4684      	mov	ip, r0
    612e:	1c10      	adds	r0, r2, #0
    6130:	4662      	mov	r2, ip
    6132:	468c      	mov	ip, r1
    6134:	1c19      	adds	r1, r3, #0
    6136:	4663      	mov	r3, ip
    6138:	e000      	b.n	613c <__aeabi_cdcmpeq>
    613a:	46c0      	nop			; (mov r8, r8)

0000613c <__aeabi_cdcmpeq>:
    613c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    613e:	f001 fc6b 	bl	7a18 <__ledf2>
    6142:	2800      	cmp	r0, #0
    6144:	d401      	bmi.n	614a <__aeabi_cdcmpeq+0xe>
    6146:	2100      	movs	r1, #0
    6148:	42c8      	cmn	r0, r1
    614a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000614c <__aeabi_dcmpeq>:
    614c:	b510      	push	{r4, lr}
    614e:	f001 fbc5 	bl	78dc <__eqdf2>
    6152:	4240      	negs	r0, r0
    6154:	3001      	adds	r0, #1
    6156:	bd10      	pop	{r4, pc}

00006158 <__aeabi_dcmplt>:
    6158:	b510      	push	{r4, lr}
    615a:	f001 fc5d 	bl	7a18 <__ledf2>
    615e:	2800      	cmp	r0, #0
    6160:	db01      	blt.n	6166 <__aeabi_dcmplt+0xe>
    6162:	2000      	movs	r0, #0
    6164:	bd10      	pop	{r4, pc}
    6166:	2001      	movs	r0, #1
    6168:	bd10      	pop	{r4, pc}
    616a:	46c0      	nop			; (mov r8, r8)

0000616c <__aeabi_dcmple>:
    616c:	b510      	push	{r4, lr}
    616e:	f001 fc53 	bl	7a18 <__ledf2>
    6172:	2800      	cmp	r0, #0
    6174:	dd01      	ble.n	617a <__aeabi_dcmple+0xe>
    6176:	2000      	movs	r0, #0
    6178:	bd10      	pop	{r4, pc}
    617a:	2001      	movs	r0, #1
    617c:	bd10      	pop	{r4, pc}
    617e:	46c0      	nop			; (mov r8, r8)

00006180 <__aeabi_dcmpgt>:
    6180:	b510      	push	{r4, lr}
    6182:	f001 fbe5 	bl	7950 <__gedf2>
    6186:	2800      	cmp	r0, #0
    6188:	dc01      	bgt.n	618e <__aeabi_dcmpgt+0xe>
    618a:	2000      	movs	r0, #0
    618c:	bd10      	pop	{r4, pc}
    618e:	2001      	movs	r0, #1
    6190:	bd10      	pop	{r4, pc}
    6192:	46c0      	nop			; (mov r8, r8)

00006194 <__aeabi_dcmpge>:
    6194:	b510      	push	{r4, lr}
    6196:	f001 fbdb 	bl	7950 <__gedf2>
    619a:	2800      	cmp	r0, #0
    619c:	da01      	bge.n	61a2 <__aeabi_dcmpge+0xe>
    619e:	2000      	movs	r0, #0
    61a0:	bd10      	pop	{r4, pc}
    61a2:	2001      	movs	r0, #1
    61a4:	bd10      	pop	{r4, pc}
    61a6:	46c0      	nop			; (mov r8, r8)

000061a8 <__aeabi_cfrcmple>:
    61a8:	4684      	mov	ip, r0
    61aa:	1c08      	adds	r0, r1, #0
    61ac:	4661      	mov	r1, ip
    61ae:	e7ff      	b.n	61b0 <__aeabi_cfcmpeq>

000061b0 <__aeabi_cfcmpeq>:
    61b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    61b2:	f000 fb9d 	bl	68f0 <__lesf2>
    61b6:	2800      	cmp	r0, #0
    61b8:	d401      	bmi.n	61be <__aeabi_cfcmpeq+0xe>
    61ba:	2100      	movs	r1, #0
    61bc:	42c8      	cmn	r0, r1
    61be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000061c0 <__aeabi_fcmpeq>:
    61c0:	b510      	push	{r4, lr}
    61c2:	f000 fb2f 	bl	6824 <__eqsf2>
    61c6:	4240      	negs	r0, r0
    61c8:	3001      	adds	r0, #1
    61ca:	bd10      	pop	{r4, pc}

000061cc <__aeabi_fcmplt>:
    61cc:	b510      	push	{r4, lr}
    61ce:	f000 fb8f 	bl	68f0 <__lesf2>
    61d2:	2800      	cmp	r0, #0
    61d4:	db01      	blt.n	61da <__aeabi_fcmplt+0xe>
    61d6:	2000      	movs	r0, #0
    61d8:	bd10      	pop	{r4, pc}
    61da:	2001      	movs	r0, #1
    61dc:	bd10      	pop	{r4, pc}
    61de:	46c0      	nop			; (mov r8, r8)

000061e0 <__aeabi_fcmple>:
    61e0:	b510      	push	{r4, lr}
    61e2:	f000 fb85 	bl	68f0 <__lesf2>
    61e6:	2800      	cmp	r0, #0
    61e8:	dd01      	ble.n	61ee <__aeabi_fcmple+0xe>
    61ea:	2000      	movs	r0, #0
    61ec:	bd10      	pop	{r4, pc}
    61ee:	2001      	movs	r0, #1
    61f0:	bd10      	pop	{r4, pc}
    61f2:	46c0      	nop			; (mov r8, r8)

000061f4 <__aeabi_fcmpgt>:
    61f4:	b510      	push	{r4, lr}
    61f6:	f000 fb3b 	bl	6870 <__gesf2>
    61fa:	2800      	cmp	r0, #0
    61fc:	dc01      	bgt.n	6202 <__aeabi_fcmpgt+0xe>
    61fe:	2000      	movs	r0, #0
    6200:	bd10      	pop	{r4, pc}
    6202:	2001      	movs	r0, #1
    6204:	bd10      	pop	{r4, pc}
    6206:	46c0      	nop			; (mov r8, r8)

00006208 <__aeabi_fcmpge>:
    6208:	b510      	push	{r4, lr}
    620a:	f000 fb31 	bl	6870 <__gesf2>
    620e:	2800      	cmp	r0, #0
    6210:	da01      	bge.n	6216 <__aeabi_fcmpge+0xe>
    6212:	2000      	movs	r0, #0
    6214:	bd10      	pop	{r4, pc}
    6216:	2001      	movs	r0, #1
    6218:	bd10      	pop	{r4, pc}
    621a:	46c0      	nop			; (mov r8, r8)

0000621c <__aeabi_lmul>:
    621c:	b5f0      	push	{r4, r5, r6, r7, lr}
    621e:	46ce      	mov	lr, r9
    6220:	4647      	mov	r7, r8
    6222:	0415      	lsls	r5, r2, #16
    6224:	0c2d      	lsrs	r5, r5, #16
    6226:	002e      	movs	r6, r5
    6228:	b580      	push	{r7, lr}
    622a:	0407      	lsls	r7, r0, #16
    622c:	0c14      	lsrs	r4, r2, #16
    622e:	0c3f      	lsrs	r7, r7, #16
    6230:	4699      	mov	r9, r3
    6232:	0c03      	lsrs	r3, r0, #16
    6234:	437e      	muls	r6, r7
    6236:	435d      	muls	r5, r3
    6238:	4367      	muls	r7, r4
    623a:	4363      	muls	r3, r4
    623c:	197f      	adds	r7, r7, r5
    623e:	0c34      	lsrs	r4, r6, #16
    6240:	19e4      	adds	r4, r4, r7
    6242:	469c      	mov	ip, r3
    6244:	42a5      	cmp	r5, r4
    6246:	d903      	bls.n	6250 <__aeabi_lmul+0x34>
    6248:	2380      	movs	r3, #128	; 0x80
    624a:	025b      	lsls	r3, r3, #9
    624c:	4698      	mov	r8, r3
    624e:	44c4      	add	ip, r8
    6250:	464b      	mov	r3, r9
    6252:	4351      	muls	r1, r2
    6254:	4343      	muls	r3, r0
    6256:	0436      	lsls	r6, r6, #16
    6258:	0c36      	lsrs	r6, r6, #16
    625a:	0c25      	lsrs	r5, r4, #16
    625c:	0424      	lsls	r4, r4, #16
    625e:	4465      	add	r5, ip
    6260:	19a4      	adds	r4, r4, r6
    6262:	1859      	adds	r1, r3, r1
    6264:	1949      	adds	r1, r1, r5
    6266:	0020      	movs	r0, r4
    6268:	bc0c      	pop	{r2, r3}
    626a:	4690      	mov	r8, r2
    626c:	4699      	mov	r9, r3
    626e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006270 <__aeabi_fadd>:
    6270:	b5f0      	push	{r4, r5, r6, r7, lr}
    6272:	46c6      	mov	lr, r8
    6274:	024e      	lsls	r6, r1, #9
    6276:	0247      	lsls	r7, r0, #9
    6278:	0a76      	lsrs	r6, r6, #9
    627a:	0a7b      	lsrs	r3, r7, #9
    627c:	0044      	lsls	r4, r0, #1
    627e:	0fc5      	lsrs	r5, r0, #31
    6280:	00f7      	lsls	r7, r6, #3
    6282:	0048      	lsls	r0, r1, #1
    6284:	4698      	mov	r8, r3
    6286:	b500      	push	{lr}
    6288:	0e24      	lsrs	r4, r4, #24
    628a:	002a      	movs	r2, r5
    628c:	00db      	lsls	r3, r3, #3
    628e:	0e00      	lsrs	r0, r0, #24
    6290:	0fc9      	lsrs	r1, r1, #31
    6292:	46bc      	mov	ip, r7
    6294:	428d      	cmp	r5, r1
    6296:	d067      	beq.n	6368 <__aeabi_fadd+0xf8>
    6298:	1a22      	subs	r2, r4, r0
    629a:	2a00      	cmp	r2, #0
    629c:	dc00      	bgt.n	62a0 <__aeabi_fadd+0x30>
    629e:	e0a5      	b.n	63ec <__aeabi_fadd+0x17c>
    62a0:	2800      	cmp	r0, #0
    62a2:	d13a      	bne.n	631a <__aeabi_fadd+0xaa>
    62a4:	2f00      	cmp	r7, #0
    62a6:	d100      	bne.n	62aa <__aeabi_fadd+0x3a>
    62a8:	e093      	b.n	63d2 <__aeabi_fadd+0x162>
    62aa:	1e51      	subs	r1, r2, #1
    62ac:	2900      	cmp	r1, #0
    62ae:	d000      	beq.n	62b2 <__aeabi_fadd+0x42>
    62b0:	e0bc      	b.n	642c <__aeabi_fadd+0x1bc>
    62b2:	2401      	movs	r4, #1
    62b4:	1bdb      	subs	r3, r3, r7
    62b6:	015a      	lsls	r2, r3, #5
    62b8:	d546      	bpl.n	6348 <__aeabi_fadd+0xd8>
    62ba:	019b      	lsls	r3, r3, #6
    62bc:	099e      	lsrs	r6, r3, #6
    62be:	0030      	movs	r0, r6
    62c0:	f002 fb4c 	bl	895c <__clzsi2>
    62c4:	3805      	subs	r0, #5
    62c6:	4086      	lsls	r6, r0
    62c8:	4284      	cmp	r4, r0
    62ca:	dd00      	ble.n	62ce <__aeabi_fadd+0x5e>
    62cc:	e09d      	b.n	640a <__aeabi_fadd+0x19a>
    62ce:	1b04      	subs	r4, r0, r4
    62d0:	0032      	movs	r2, r6
    62d2:	2020      	movs	r0, #32
    62d4:	3401      	adds	r4, #1
    62d6:	40e2      	lsrs	r2, r4
    62d8:	1b04      	subs	r4, r0, r4
    62da:	40a6      	lsls	r6, r4
    62dc:	0033      	movs	r3, r6
    62de:	1e5e      	subs	r6, r3, #1
    62e0:	41b3      	sbcs	r3, r6
    62e2:	2400      	movs	r4, #0
    62e4:	4313      	orrs	r3, r2
    62e6:	075a      	lsls	r2, r3, #29
    62e8:	d004      	beq.n	62f4 <__aeabi_fadd+0x84>
    62ea:	220f      	movs	r2, #15
    62ec:	401a      	ands	r2, r3
    62ee:	2a04      	cmp	r2, #4
    62f0:	d000      	beq.n	62f4 <__aeabi_fadd+0x84>
    62f2:	3304      	adds	r3, #4
    62f4:	015a      	lsls	r2, r3, #5
    62f6:	d529      	bpl.n	634c <__aeabi_fadd+0xdc>
    62f8:	3401      	adds	r4, #1
    62fa:	2cff      	cmp	r4, #255	; 0xff
    62fc:	d100      	bne.n	6300 <__aeabi_fadd+0x90>
    62fe:	e081      	b.n	6404 <__aeabi_fadd+0x194>
    6300:	002a      	movs	r2, r5
    6302:	019b      	lsls	r3, r3, #6
    6304:	0a5b      	lsrs	r3, r3, #9
    6306:	b2e4      	uxtb	r4, r4
    6308:	025b      	lsls	r3, r3, #9
    630a:	05e4      	lsls	r4, r4, #23
    630c:	0a58      	lsrs	r0, r3, #9
    630e:	07d2      	lsls	r2, r2, #31
    6310:	4320      	orrs	r0, r4
    6312:	4310      	orrs	r0, r2
    6314:	bc04      	pop	{r2}
    6316:	4690      	mov	r8, r2
    6318:	bdf0      	pop	{r4, r5, r6, r7, pc}
    631a:	2cff      	cmp	r4, #255	; 0xff
    631c:	d0e3      	beq.n	62e6 <__aeabi_fadd+0x76>
    631e:	2180      	movs	r1, #128	; 0x80
    6320:	0038      	movs	r0, r7
    6322:	04c9      	lsls	r1, r1, #19
    6324:	4308      	orrs	r0, r1
    6326:	4684      	mov	ip, r0
    6328:	2a1b      	cmp	r2, #27
    632a:	dd00      	ble.n	632e <__aeabi_fadd+0xbe>
    632c:	e082      	b.n	6434 <__aeabi_fadd+0x1c4>
    632e:	2020      	movs	r0, #32
    6330:	4661      	mov	r1, ip
    6332:	40d1      	lsrs	r1, r2
    6334:	1a82      	subs	r2, r0, r2
    6336:	4660      	mov	r0, ip
    6338:	4090      	lsls	r0, r2
    633a:	0002      	movs	r2, r0
    633c:	1e50      	subs	r0, r2, #1
    633e:	4182      	sbcs	r2, r0
    6340:	430a      	orrs	r2, r1
    6342:	1a9b      	subs	r3, r3, r2
    6344:	015a      	lsls	r2, r3, #5
    6346:	d4b8      	bmi.n	62ba <__aeabi_fadd+0x4a>
    6348:	075a      	lsls	r2, r3, #29
    634a:	d1ce      	bne.n	62ea <__aeabi_fadd+0x7a>
    634c:	08de      	lsrs	r6, r3, #3
    634e:	002a      	movs	r2, r5
    6350:	2cff      	cmp	r4, #255	; 0xff
    6352:	d13a      	bne.n	63ca <__aeabi_fadd+0x15a>
    6354:	2e00      	cmp	r6, #0
    6356:	d100      	bne.n	635a <__aeabi_fadd+0xea>
    6358:	e0ae      	b.n	64b8 <__aeabi_fadd+0x248>
    635a:	2380      	movs	r3, #128	; 0x80
    635c:	03db      	lsls	r3, r3, #15
    635e:	4333      	orrs	r3, r6
    6360:	025b      	lsls	r3, r3, #9
    6362:	0a5b      	lsrs	r3, r3, #9
    6364:	24ff      	movs	r4, #255	; 0xff
    6366:	e7cf      	b.n	6308 <__aeabi_fadd+0x98>
    6368:	1a21      	subs	r1, r4, r0
    636a:	2900      	cmp	r1, #0
    636c:	dd52      	ble.n	6414 <__aeabi_fadd+0x1a4>
    636e:	2800      	cmp	r0, #0
    6370:	d031      	beq.n	63d6 <__aeabi_fadd+0x166>
    6372:	2cff      	cmp	r4, #255	; 0xff
    6374:	d0b7      	beq.n	62e6 <__aeabi_fadd+0x76>
    6376:	2080      	movs	r0, #128	; 0x80
    6378:	003e      	movs	r6, r7
    637a:	04c0      	lsls	r0, r0, #19
    637c:	4306      	orrs	r6, r0
    637e:	46b4      	mov	ip, r6
    6380:	291b      	cmp	r1, #27
    6382:	dd00      	ble.n	6386 <__aeabi_fadd+0x116>
    6384:	e0aa      	b.n	64dc <__aeabi_fadd+0x26c>
    6386:	2620      	movs	r6, #32
    6388:	4660      	mov	r0, ip
    638a:	40c8      	lsrs	r0, r1
    638c:	1a71      	subs	r1, r6, r1
    638e:	4666      	mov	r6, ip
    6390:	408e      	lsls	r6, r1
    6392:	0031      	movs	r1, r6
    6394:	1e4e      	subs	r6, r1, #1
    6396:	41b1      	sbcs	r1, r6
    6398:	4301      	orrs	r1, r0
    639a:	185b      	adds	r3, r3, r1
    639c:	0159      	lsls	r1, r3, #5
    639e:	d5d3      	bpl.n	6348 <__aeabi_fadd+0xd8>
    63a0:	3401      	adds	r4, #1
    63a2:	2cff      	cmp	r4, #255	; 0xff
    63a4:	d100      	bne.n	63a8 <__aeabi_fadd+0x138>
    63a6:	e087      	b.n	64b8 <__aeabi_fadd+0x248>
    63a8:	2201      	movs	r2, #1
    63aa:	4978      	ldr	r1, [pc, #480]	; (658c <__aeabi_fadd+0x31c>)
    63ac:	401a      	ands	r2, r3
    63ae:	085b      	lsrs	r3, r3, #1
    63b0:	400b      	ands	r3, r1
    63b2:	4313      	orrs	r3, r2
    63b4:	e797      	b.n	62e6 <__aeabi_fadd+0x76>
    63b6:	2c00      	cmp	r4, #0
    63b8:	d000      	beq.n	63bc <__aeabi_fadd+0x14c>
    63ba:	e0a7      	b.n	650c <__aeabi_fadd+0x29c>
    63bc:	2b00      	cmp	r3, #0
    63be:	d000      	beq.n	63c2 <__aeabi_fadd+0x152>
    63c0:	e0b6      	b.n	6530 <__aeabi_fadd+0x2c0>
    63c2:	1e3b      	subs	r3, r7, #0
    63c4:	d162      	bne.n	648c <__aeabi_fadd+0x21c>
    63c6:	2600      	movs	r6, #0
    63c8:	2200      	movs	r2, #0
    63ca:	0273      	lsls	r3, r6, #9
    63cc:	0a5b      	lsrs	r3, r3, #9
    63ce:	b2e4      	uxtb	r4, r4
    63d0:	e79a      	b.n	6308 <__aeabi_fadd+0x98>
    63d2:	0014      	movs	r4, r2
    63d4:	e787      	b.n	62e6 <__aeabi_fadd+0x76>
    63d6:	2f00      	cmp	r7, #0
    63d8:	d04d      	beq.n	6476 <__aeabi_fadd+0x206>
    63da:	1e48      	subs	r0, r1, #1
    63dc:	2800      	cmp	r0, #0
    63de:	d157      	bne.n	6490 <__aeabi_fadd+0x220>
    63e0:	4463      	add	r3, ip
    63e2:	2401      	movs	r4, #1
    63e4:	015a      	lsls	r2, r3, #5
    63e6:	d5af      	bpl.n	6348 <__aeabi_fadd+0xd8>
    63e8:	2402      	movs	r4, #2
    63ea:	e7dd      	b.n	63a8 <__aeabi_fadd+0x138>
    63ec:	2a00      	cmp	r2, #0
    63ee:	d124      	bne.n	643a <__aeabi_fadd+0x1ca>
    63f0:	1c62      	adds	r2, r4, #1
    63f2:	b2d2      	uxtb	r2, r2
    63f4:	2a01      	cmp	r2, #1
    63f6:	ddde      	ble.n	63b6 <__aeabi_fadd+0x146>
    63f8:	1bde      	subs	r6, r3, r7
    63fa:	0172      	lsls	r2, r6, #5
    63fc:	d535      	bpl.n	646a <__aeabi_fadd+0x1fa>
    63fe:	1afe      	subs	r6, r7, r3
    6400:	000d      	movs	r5, r1
    6402:	e75c      	b.n	62be <__aeabi_fadd+0x4e>
    6404:	002a      	movs	r2, r5
    6406:	2300      	movs	r3, #0
    6408:	e77e      	b.n	6308 <__aeabi_fadd+0x98>
    640a:	0033      	movs	r3, r6
    640c:	4a60      	ldr	r2, [pc, #384]	; (6590 <__aeabi_fadd+0x320>)
    640e:	1a24      	subs	r4, r4, r0
    6410:	4013      	ands	r3, r2
    6412:	e768      	b.n	62e6 <__aeabi_fadd+0x76>
    6414:	2900      	cmp	r1, #0
    6416:	d163      	bne.n	64e0 <__aeabi_fadd+0x270>
    6418:	1c61      	adds	r1, r4, #1
    641a:	b2c8      	uxtb	r0, r1
    641c:	2801      	cmp	r0, #1
    641e:	dd4e      	ble.n	64be <__aeabi_fadd+0x24e>
    6420:	29ff      	cmp	r1, #255	; 0xff
    6422:	d049      	beq.n	64b8 <__aeabi_fadd+0x248>
    6424:	4463      	add	r3, ip
    6426:	085b      	lsrs	r3, r3, #1
    6428:	000c      	movs	r4, r1
    642a:	e75c      	b.n	62e6 <__aeabi_fadd+0x76>
    642c:	2aff      	cmp	r2, #255	; 0xff
    642e:	d041      	beq.n	64b4 <__aeabi_fadd+0x244>
    6430:	000a      	movs	r2, r1
    6432:	e779      	b.n	6328 <__aeabi_fadd+0xb8>
    6434:	2201      	movs	r2, #1
    6436:	1a9b      	subs	r3, r3, r2
    6438:	e784      	b.n	6344 <__aeabi_fadd+0xd4>
    643a:	2c00      	cmp	r4, #0
    643c:	d01d      	beq.n	647a <__aeabi_fadd+0x20a>
    643e:	28ff      	cmp	r0, #255	; 0xff
    6440:	d022      	beq.n	6488 <__aeabi_fadd+0x218>
    6442:	2480      	movs	r4, #128	; 0x80
    6444:	04e4      	lsls	r4, r4, #19
    6446:	4252      	negs	r2, r2
    6448:	4323      	orrs	r3, r4
    644a:	2a1b      	cmp	r2, #27
    644c:	dd00      	ble.n	6450 <__aeabi_fadd+0x1e0>
    644e:	e08a      	b.n	6566 <__aeabi_fadd+0x2f6>
    6450:	001c      	movs	r4, r3
    6452:	2520      	movs	r5, #32
    6454:	40d4      	lsrs	r4, r2
    6456:	1aaa      	subs	r2, r5, r2
    6458:	4093      	lsls	r3, r2
    645a:	1e5a      	subs	r2, r3, #1
    645c:	4193      	sbcs	r3, r2
    645e:	4323      	orrs	r3, r4
    6460:	4662      	mov	r2, ip
    6462:	0004      	movs	r4, r0
    6464:	1ad3      	subs	r3, r2, r3
    6466:	000d      	movs	r5, r1
    6468:	e725      	b.n	62b6 <__aeabi_fadd+0x46>
    646a:	2e00      	cmp	r6, #0
    646c:	d000      	beq.n	6470 <__aeabi_fadd+0x200>
    646e:	e726      	b.n	62be <__aeabi_fadd+0x4e>
    6470:	2200      	movs	r2, #0
    6472:	2400      	movs	r4, #0
    6474:	e7a9      	b.n	63ca <__aeabi_fadd+0x15a>
    6476:	000c      	movs	r4, r1
    6478:	e735      	b.n	62e6 <__aeabi_fadd+0x76>
    647a:	2b00      	cmp	r3, #0
    647c:	d04d      	beq.n	651a <__aeabi_fadd+0x2aa>
    647e:	43d2      	mvns	r2, r2
    6480:	2a00      	cmp	r2, #0
    6482:	d0ed      	beq.n	6460 <__aeabi_fadd+0x1f0>
    6484:	28ff      	cmp	r0, #255	; 0xff
    6486:	d1e0      	bne.n	644a <__aeabi_fadd+0x1da>
    6488:	4663      	mov	r3, ip
    648a:	24ff      	movs	r4, #255	; 0xff
    648c:	000d      	movs	r5, r1
    648e:	e72a      	b.n	62e6 <__aeabi_fadd+0x76>
    6490:	29ff      	cmp	r1, #255	; 0xff
    6492:	d00f      	beq.n	64b4 <__aeabi_fadd+0x244>
    6494:	0001      	movs	r1, r0
    6496:	e773      	b.n	6380 <__aeabi_fadd+0x110>
    6498:	2b00      	cmp	r3, #0
    649a:	d061      	beq.n	6560 <__aeabi_fadd+0x2f0>
    649c:	24ff      	movs	r4, #255	; 0xff
    649e:	2f00      	cmp	r7, #0
    64a0:	d100      	bne.n	64a4 <__aeabi_fadd+0x234>
    64a2:	e720      	b.n	62e6 <__aeabi_fadd+0x76>
    64a4:	2280      	movs	r2, #128	; 0x80
    64a6:	4641      	mov	r1, r8
    64a8:	03d2      	lsls	r2, r2, #15
    64aa:	4211      	tst	r1, r2
    64ac:	d002      	beq.n	64b4 <__aeabi_fadd+0x244>
    64ae:	4216      	tst	r6, r2
    64b0:	d100      	bne.n	64b4 <__aeabi_fadd+0x244>
    64b2:	003b      	movs	r3, r7
    64b4:	24ff      	movs	r4, #255	; 0xff
    64b6:	e716      	b.n	62e6 <__aeabi_fadd+0x76>
    64b8:	24ff      	movs	r4, #255	; 0xff
    64ba:	2300      	movs	r3, #0
    64bc:	e724      	b.n	6308 <__aeabi_fadd+0x98>
    64be:	2c00      	cmp	r4, #0
    64c0:	d1ea      	bne.n	6498 <__aeabi_fadd+0x228>
    64c2:	2b00      	cmp	r3, #0
    64c4:	d058      	beq.n	6578 <__aeabi_fadd+0x308>
    64c6:	2f00      	cmp	r7, #0
    64c8:	d100      	bne.n	64cc <__aeabi_fadd+0x25c>
    64ca:	e70c      	b.n	62e6 <__aeabi_fadd+0x76>
    64cc:	4463      	add	r3, ip
    64ce:	015a      	lsls	r2, r3, #5
    64d0:	d400      	bmi.n	64d4 <__aeabi_fadd+0x264>
    64d2:	e739      	b.n	6348 <__aeabi_fadd+0xd8>
    64d4:	4a2e      	ldr	r2, [pc, #184]	; (6590 <__aeabi_fadd+0x320>)
    64d6:	000c      	movs	r4, r1
    64d8:	4013      	ands	r3, r2
    64da:	e704      	b.n	62e6 <__aeabi_fadd+0x76>
    64dc:	2101      	movs	r1, #1
    64de:	e75c      	b.n	639a <__aeabi_fadd+0x12a>
    64e0:	2c00      	cmp	r4, #0
    64e2:	d11e      	bne.n	6522 <__aeabi_fadd+0x2b2>
    64e4:	2b00      	cmp	r3, #0
    64e6:	d040      	beq.n	656a <__aeabi_fadd+0x2fa>
    64e8:	43c9      	mvns	r1, r1
    64ea:	2900      	cmp	r1, #0
    64ec:	d00b      	beq.n	6506 <__aeabi_fadd+0x296>
    64ee:	28ff      	cmp	r0, #255	; 0xff
    64f0:	d036      	beq.n	6560 <__aeabi_fadd+0x2f0>
    64f2:	291b      	cmp	r1, #27
    64f4:	dc47      	bgt.n	6586 <__aeabi_fadd+0x316>
    64f6:	001c      	movs	r4, r3
    64f8:	2620      	movs	r6, #32
    64fa:	40cc      	lsrs	r4, r1
    64fc:	1a71      	subs	r1, r6, r1
    64fe:	408b      	lsls	r3, r1
    6500:	1e59      	subs	r1, r3, #1
    6502:	418b      	sbcs	r3, r1
    6504:	4323      	orrs	r3, r4
    6506:	4463      	add	r3, ip
    6508:	0004      	movs	r4, r0
    650a:	e747      	b.n	639c <__aeabi_fadd+0x12c>
    650c:	2b00      	cmp	r3, #0
    650e:	d118      	bne.n	6542 <__aeabi_fadd+0x2d2>
    6510:	1e3b      	subs	r3, r7, #0
    6512:	d02d      	beq.n	6570 <__aeabi_fadd+0x300>
    6514:	000d      	movs	r5, r1
    6516:	24ff      	movs	r4, #255	; 0xff
    6518:	e6e5      	b.n	62e6 <__aeabi_fadd+0x76>
    651a:	003b      	movs	r3, r7
    651c:	0004      	movs	r4, r0
    651e:	000d      	movs	r5, r1
    6520:	e6e1      	b.n	62e6 <__aeabi_fadd+0x76>
    6522:	28ff      	cmp	r0, #255	; 0xff
    6524:	d01c      	beq.n	6560 <__aeabi_fadd+0x2f0>
    6526:	2480      	movs	r4, #128	; 0x80
    6528:	04e4      	lsls	r4, r4, #19
    652a:	4249      	negs	r1, r1
    652c:	4323      	orrs	r3, r4
    652e:	e7e0      	b.n	64f2 <__aeabi_fadd+0x282>
    6530:	2f00      	cmp	r7, #0
    6532:	d100      	bne.n	6536 <__aeabi_fadd+0x2c6>
    6534:	e6d7      	b.n	62e6 <__aeabi_fadd+0x76>
    6536:	1bde      	subs	r6, r3, r7
    6538:	0172      	lsls	r2, r6, #5
    653a:	d51f      	bpl.n	657c <__aeabi_fadd+0x30c>
    653c:	1afb      	subs	r3, r7, r3
    653e:	000d      	movs	r5, r1
    6540:	e6d1      	b.n	62e6 <__aeabi_fadd+0x76>
    6542:	24ff      	movs	r4, #255	; 0xff
    6544:	2f00      	cmp	r7, #0
    6546:	d100      	bne.n	654a <__aeabi_fadd+0x2da>
    6548:	e6cd      	b.n	62e6 <__aeabi_fadd+0x76>
    654a:	2280      	movs	r2, #128	; 0x80
    654c:	4640      	mov	r0, r8
    654e:	03d2      	lsls	r2, r2, #15
    6550:	4210      	tst	r0, r2
    6552:	d0af      	beq.n	64b4 <__aeabi_fadd+0x244>
    6554:	4216      	tst	r6, r2
    6556:	d1ad      	bne.n	64b4 <__aeabi_fadd+0x244>
    6558:	003b      	movs	r3, r7
    655a:	000d      	movs	r5, r1
    655c:	24ff      	movs	r4, #255	; 0xff
    655e:	e6c2      	b.n	62e6 <__aeabi_fadd+0x76>
    6560:	4663      	mov	r3, ip
    6562:	24ff      	movs	r4, #255	; 0xff
    6564:	e6bf      	b.n	62e6 <__aeabi_fadd+0x76>
    6566:	2301      	movs	r3, #1
    6568:	e77a      	b.n	6460 <__aeabi_fadd+0x1f0>
    656a:	003b      	movs	r3, r7
    656c:	0004      	movs	r4, r0
    656e:	e6ba      	b.n	62e6 <__aeabi_fadd+0x76>
    6570:	2680      	movs	r6, #128	; 0x80
    6572:	2200      	movs	r2, #0
    6574:	03f6      	lsls	r6, r6, #15
    6576:	e6f0      	b.n	635a <__aeabi_fadd+0xea>
    6578:	003b      	movs	r3, r7
    657a:	e6b4      	b.n	62e6 <__aeabi_fadd+0x76>
    657c:	1e33      	subs	r3, r6, #0
    657e:	d000      	beq.n	6582 <__aeabi_fadd+0x312>
    6580:	e6e2      	b.n	6348 <__aeabi_fadd+0xd8>
    6582:	2200      	movs	r2, #0
    6584:	e721      	b.n	63ca <__aeabi_fadd+0x15a>
    6586:	2301      	movs	r3, #1
    6588:	e7bd      	b.n	6506 <__aeabi_fadd+0x296>
    658a:	46c0      	nop			; (mov r8, r8)
    658c:	7dffffff 	.word	0x7dffffff
    6590:	fbffffff 	.word	0xfbffffff

00006594 <__aeabi_fdiv>:
    6594:	b5f0      	push	{r4, r5, r6, r7, lr}
    6596:	4657      	mov	r7, sl
    6598:	464e      	mov	r6, r9
    659a:	46de      	mov	lr, fp
    659c:	4645      	mov	r5, r8
    659e:	b5e0      	push	{r5, r6, r7, lr}
    65a0:	0244      	lsls	r4, r0, #9
    65a2:	0043      	lsls	r3, r0, #1
    65a4:	0fc6      	lsrs	r6, r0, #31
    65a6:	b083      	sub	sp, #12
    65a8:	1c0f      	adds	r7, r1, #0
    65aa:	0a64      	lsrs	r4, r4, #9
    65ac:	0e1b      	lsrs	r3, r3, #24
    65ae:	46b2      	mov	sl, r6
    65b0:	d053      	beq.n	665a <__aeabi_fdiv+0xc6>
    65b2:	2bff      	cmp	r3, #255	; 0xff
    65b4:	d027      	beq.n	6606 <__aeabi_fdiv+0x72>
    65b6:	2280      	movs	r2, #128	; 0x80
    65b8:	00e4      	lsls	r4, r4, #3
    65ba:	04d2      	lsls	r2, r2, #19
    65bc:	4314      	orrs	r4, r2
    65be:	227f      	movs	r2, #127	; 0x7f
    65c0:	4252      	negs	r2, r2
    65c2:	4690      	mov	r8, r2
    65c4:	4498      	add	r8, r3
    65c6:	2300      	movs	r3, #0
    65c8:	4699      	mov	r9, r3
    65ca:	469b      	mov	fp, r3
    65cc:	027d      	lsls	r5, r7, #9
    65ce:	0078      	lsls	r0, r7, #1
    65d0:	0ffb      	lsrs	r3, r7, #31
    65d2:	0a6d      	lsrs	r5, r5, #9
    65d4:	0e00      	lsrs	r0, r0, #24
    65d6:	9300      	str	r3, [sp, #0]
    65d8:	d024      	beq.n	6624 <__aeabi_fdiv+0x90>
    65da:	28ff      	cmp	r0, #255	; 0xff
    65dc:	d046      	beq.n	666c <__aeabi_fdiv+0xd8>
    65de:	2380      	movs	r3, #128	; 0x80
    65e0:	2100      	movs	r1, #0
    65e2:	00ed      	lsls	r5, r5, #3
    65e4:	04db      	lsls	r3, r3, #19
    65e6:	431d      	orrs	r5, r3
    65e8:	387f      	subs	r0, #127	; 0x7f
    65ea:	4647      	mov	r7, r8
    65ec:	1a38      	subs	r0, r7, r0
    65ee:	464f      	mov	r7, r9
    65f0:	430f      	orrs	r7, r1
    65f2:	00bf      	lsls	r7, r7, #2
    65f4:	46b9      	mov	r9, r7
    65f6:	0033      	movs	r3, r6
    65f8:	9a00      	ldr	r2, [sp, #0]
    65fa:	4f87      	ldr	r7, [pc, #540]	; (6818 <__aeabi_fdiv+0x284>)
    65fc:	4053      	eors	r3, r2
    65fe:	464a      	mov	r2, r9
    6600:	58ba      	ldr	r2, [r7, r2]
    6602:	9301      	str	r3, [sp, #4]
    6604:	4697      	mov	pc, r2
    6606:	2c00      	cmp	r4, #0
    6608:	d14e      	bne.n	66a8 <__aeabi_fdiv+0x114>
    660a:	2308      	movs	r3, #8
    660c:	4699      	mov	r9, r3
    660e:	33f7      	adds	r3, #247	; 0xf7
    6610:	4698      	mov	r8, r3
    6612:	3bfd      	subs	r3, #253	; 0xfd
    6614:	469b      	mov	fp, r3
    6616:	027d      	lsls	r5, r7, #9
    6618:	0078      	lsls	r0, r7, #1
    661a:	0ffb      	lsrs	r3, r7, #31
    661c:	0a6d      	lsrs	r5, r5, #9
    661e:	0e00      	lsrs	r0, r0, #24
    6620:	9300      	str	r3, [sp, #0]
    6622:	d1da      	bne.n	65da <__aeabi_fdiv+0x46>
    6624:	2d00      	cmp	r5, #0
    6626:	d126      	bne.n	6676 <__aeabi_fdiv+0xe2>
    6628:	2000      	movs	r0, #0
    662a:	2101      	movs	r1, #1
    662c:	0033      	movs	r3, r6
    662e:	9a00      	ldr	r2, [sp, #0]
    6630:	4f7a      	ldr	r7, [pc, #488]	; (681c <__aeabi_fdiv+0x288>)
    6632:	4053      	eors	r3, r2
    6634:	4642      	mov	r2, r8
    6636:	1a10      	subs	r0, r2, r0
    6638:	464a      	mov	r2, r9
    663a:	430a      	orrs	r2, r1
    663c:	0092      	lsls	r2, r2, #2
    663e:	58ba      	ldr	r2, [r7, r2]
    6640:	001d      	movs	r5, r3
    6642:	4697      	mov	pc, r2
    6644:	9b00      	ldr	r3, [sp, #0]
    6646:	002c      	movs	r4, r5
    6648:	469a      	mov	sl, r3
    664a:	468b      	mov	fp, r1
    664c:	465b      	mov	r3, fp
    664e:	2b02      	cmp	r3, #2
    6650:	d131      	bne.n	66b6 <__aeabi_fdiv+0x122>
    6652:	4653      	mov	r3, sl
    6654:	21ff      	movs	r1, #255	; 0xff
    6656:	2400      	movs	r4, #0
    6658:	e038      	b.n	66cc <__aeabi_fdiv+0x138>
    665a:	2c00      	cmp	r4, #0
    665c:	d117      	bne.n	668e <__aeabi_fdiv+0xfa>
    665e:	2304      	movs	r3, #4
    6660:	4699      	mov	r9, r3
    6662:	2300      	movs	r3, #0
    6664:	4698      	mov	r8, r3
    6666:	3301      	adds	r3, #1
    6668:	469b      	mov	fp, r3
    666a:	e7af      	b.n	65cc <__aeabi_fdiv+0x38>
    666c:	20ff      	movs	r0, #255	; 0xff
    666e:	2d00      	cmp	r5, #0
    6670:	d10b      	bne.n	668a <__aeabi_fdiv+0xf6>
    6672:	2102      	movs	r1, #2
    6674:	e7da      	b.n	662c <__aeabi_fdiv+0x98>
    6676:	0028      	movs	r0, r5
    6678:	f002 f970 	bl	895c <__clzsi2>
    667c:	1f43      	subs	r3, r0, #5
    667e:	409d      	lsls	r5, r3
    6680:	2376      	movs	r3, #118	; 0x76
    6682:	425b      	negs	r3, r3
    6684:	1a18      	subs	r0, r3, r0
    6686:	2100      	movs	r1, #0
    6688:	e7af      	b.n	65ea <__aeabi_fdiv+0x56>
    668a:	2103      	movs	r1, #3
    668c:	e7ad      	b.n	65ea <__aeabi_fdiv+0x56>
    668e:	0020      	movs	r0, r4
    6690:	f002 f964 	bl	895c <__clzsi2>
    6694:	1f43      	subs	r3, r0, #5
    6696:	409c      	lsls	r4, r3
    6698:	2376      	movs	r3, #118	; 0x76
    669a:	425b      	negs	r3, r3
    669c:	1a1b      	subs	r3, r3, r0
    669e:	4698      	mov	r8, r3
    66a0:	2300      	movs	r3, #0
    66a2:	4699      	mov	r9, r3
    66a4:	469b      	mov	fp, r3
    66a6:	e791      	b.n	65cc <__aeabi_fdiv+0x38>
    66a8:	230c      	movs	r3, #12
    66aa:	4699      	mov	r9, r3
    66ac:	33f3      	adds	r3, #243	; 0xf3
    66ae:	4698      	mov	r8, r3
    66b0:	3bfc      	subs	r3, #252	; 0xfc
    66b2:	469b      	mov	fp, r3
    66b4:	e78a      	b.n	65cc <__aeabi_fdiv+0x38>
    66b6:	2b03      	cmp	r3, #3
    66b8:	d100      	bne.n	66bc <__aeabi_fdiv+0x128>
    66ba:	e0a5      	b.n	6808 <__aeabi_fdiv+0x274>
    66bc:	4655      	mov	r5, sl
    66be:	2b01      	cmp	r3, #1
    66c0:	d000      	beq.n	66c4 <__aeabi_fdiv+0x130>
    66c2:	e081      	b.n	67c8 <__aeabi_fdiv+0x234>
    66c4:	2301      	movs	r3, #1
    66c6:	2100      	movs	r1, #0
    66c8:	2400      	movs	r4, #0
    66ca:	402b      	ands	r3, r5
    66cc:	0264      	lsls	r4, r4, #9
    66ce:	05c9      	lsls	r1, r1, #23
    66d0:	0a60      	lsrs	r0, r4, #9
    66d2:	07db      	lsls	r3, r3, #31
    66d4:	4308      	orrs	r0, r1
    66d6:	4318      	orrs	r0, r3
    66d8:	b003      	add	sp, #12
    66da:	bc3c      	pop	{r2, r3, r4, r5}
    66dc:	4690      	mov	r8, r2
    66de:	4699      	mov	r9, r3
    66e0:	46a2      	mov	sl, r4
    66e2:	46ab      	mov	fp, r5
    66e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    66e6:	2480      	movs	r4, #128	; 0x80
    66e8:	2300      	movs	r3, #0
    66ea:	03e4      	lsls	r4, r4, #15
    66ec:	21ff      	movs	r1, #255	; 0xff
    66ee:	e7ed      	b.n	66cc <__aeabi_fdiv+0x138>
    66f0:	21ff      	movs	r1, #255	; 0xff
    66f2:	2400      	movs	r4, #0
    66f4:	e7ea      	b.n	66cc <__aeabi_fdiv+0x138>
    66f6:	2301      	movs	r3, #1
    66f8:	1a59      	subs	r1, r3, r1
    66fa:	291b      	cmp	r1, #27
    66fc:	dd66      	ble.n	67cc <__aeabi_fdiv+0x238>
    66fe:	9a01      	ldr	r2, [sp, #4]
    6700:	4013      	ands	r3, r2
    6702:	2100      	movs	r1, #0
    6704:	2400      	movs	r4, #0
    6706:	e7e1      	b.n	66cc <__aeabi_fdiv+0x138>
    6708:	2380      	movs	r3, #128	; 0x80
    670a:	03db      	lsls	r3, r3, #15
    670c:	421c      	tst	r4, r3
    670e:	d038      	beq.n	6782 <__aeabi_fdiv+0x1ee>
    6710:	421d      	tst	r5, r3
    6712:	d051      	beq.n	67b8 <__aeabi_fdiv+0x224>
    6714:	431c      	orrs	r4, r3
    6716:	0264      	lsls	r4, r4, #9
    6718:	0a64      	lsrs	r4, r4, #9
    671a:	0033      	movs	r3, r6
    671c:	21ff      	movs	r1, #255	; 0xff
    671e:	e7d5      	b.n	66cc <__aeabi_fdiv+0x138>
    6720:	0163      	lsls	r3, r4, #5
    6722:	016c      	lsls	r4, r5, #5
    6724:	42a3      	cmp	r3, r4
    6726:	d23b      	bcs.n	67a0 <__aeabi_fdiv+0x20c>
    6728:	261b      	movs	r6, #27
    672a:	2100      	movs	r1, #0
    672c:	3801      	subs	r0, #1
    672e:	2501      	movs	r5, #1
    6730:	001f      	movs	r7, r3
    6732:	0049      	lsls	r1, r1, #1
    6734:	005b      	lsls	r3, r3, #1
    6736:	2f00      	cmp	r7, #0
    6738:	db01      	blt.n	673e <__aeabi_fdiv+0x1aa>
    673a:	429c      	cmp	r4, r3
    673c:	d801      	bhi.n	6742 <__aeabi_fdiv+0x1ae>
    673e:	1b1b      	subs	r3, r3, r4
    6740:	4329      	orrs	r1, r5
    6742:	3e01      	subs	r6, #1
    6744:	2e00      	cmp	r6, #0
    6746:	d1f3      	bne.n	6730 <__aeabi_fdiv+0x19c>
    6748:	001c      	movs	r4, r3
    674a:	1e63      	subs	r3, r4, #1
    674c:	419c      	sbcs	r4, r3
    674e:	430c      	orrs	r4, r1
    6750:	0001      	movs	r1, r0
    6752:	317f      	adds	r1, #127	; 0x7f
    6754:	2900      	cmp	r1, #0
    6756:	ddce      	ble.n	66f6 <__aeabi_fdiv+0x162>
    6758:	0763      	lsls	r3, r4, #29
    675a:	d004      	beq.n	6766 <__aeabi_fdiv+0x1d2>
    675c:	230f      	movs	r3, #15
    675e:	4023      	ands	r3, r4
    6760:	2b04      	cmp	r3, #4
    6762:	d000      	beq.n	6766 <__aeabi_fdiv+0x1d2>
    6764:	3404      	adds	r4, #4
    6766:	0123      	lsls	r3, r4, #4
    6768:	d503      	bpl.n	6772 <__aeabi_fdiv+0x1de>
    676a:	0001      	movs	r1, r0
    676c:	4b2c      	ldr	r3, [pc, #176]	; (6820 <__aeabi_fdiv+0x28c>)
    676e:	3180      	adds	r1, #128	; 0x80
    6770:	401c      	ands	r4, r3
    6772:	29fe      	cmp	r1, #254	; 0xfe
    6774:	dd0d      	ble.n	6792 <__aeabi_fdiv+0x1fe>
    6776:	2301      	movs	r3, #1
    6778:	9a01      	ldr	r2, [sp, #4]
    677a:	21ff      	movs	r1, #255	; 0xff
    677c:	4013      	ands	r3, r2
    677e:	2400      	movs	r4, #0
    6780:	e7a4      	b.n	66cc <__aeabi_fdiv+0x138>
    6782:	2380      	movs	r3, #128	; 0x80
    6784:	03db      	lsls	r3, r3, #15
    6786:	431c      	orrs	r4, r3
    6788:	0264      	lsls	r4, r4, #9
    678a:	0a64      	lsrs	r4, r4, #9
    678c:	0033      	movs	r3, r6
    678e:	21ff      	movs	r1, #255	; 0xff
    6790:	e79c      	b.n	66cc <__aeabi_fdiv+0x138>
    6792:	2301      	movs	r3, #1
    6794:	9a01      	ldr	r2, [sp, #4]
    6796:	01a4      	lsls	r4, r4, #6
    6798:	0a64      	lsrs	r4, r4, #9
    679a:	b2c9      	uxtb	r1, r1
    679c:	4013      	ands	r3, r2
    679e:	e795      	b.n	66cc <__aeabi_fdiv+0x138>
    67a0:	1b1b      	subs	r3, r3, r4
    67a2:	261a      	movs	r6, #26
    67a4:	2101      	movs	r1, #1
    67a6:	e7c2      	b.n	672e <__aeabi_fdiv+0x19a>
    67a8:	9b00      	ldr	r3, [sp, #0]
    67aa:	468b      	mov	fp, r1
    67ac:	469a      	mov	sl, r3
    67ae:	2400      	movs	r4, #0
    67b0:	e74c      	b.n	664c <__aeabi_fdiv+0xb8>
    67b2:	0263      	lsls	r3, r4, #9
    67b4:	d5e5      	bpl.n	6782 <__aeabi_fdiv+0x1ee>
    67b6:	2500      	movs	r5, #0
    67b8:	2480      	movs	r4, #128	; 0x80
    67ba:	03e4      	lsls	r4, r4, #15
    67bc:	432c      	orrs	r4, r5
    67be:	0264      	lsls	r4, r4, #9
    67c0:	0a64      	lsrs	r4, r4, #9
    67c2:	9b00      	ldr	r3, [sp, #0]
    67c4:	21ff      	movs	r1, #255	; 0xff
    67c6:	e781      	b.n	66cc <__aeabi_fdiv+0x138>
    67c8:	9501      	str	r5, [sp, #4]
    67ca:	e7c1      	b.n	6750 <__aeabi_fdiv+0x1bc>
    67cc:	0023      	movs	r3, r4
    67ce:	2020      	movs	r0, #32
    67d0:	40cb      	lsrs	r3, r1
    67d2:	1a41      	subs	r1, r0, r1
    67d4:	408c      	lsls	r4, r1
    67d6:	1e61      	subs	r1, r4, #1
    67d8:	418c      	sbcs	r4, r1
    67da:	431c      	orrs	r4, r3
    67dc:	0763      	lsls	r3, r4, #29
    67de:	d004      	beq.n	67ea <__aeabi_fdiv+0x256>
    67e0:	230f      	movs	r3, #15
    67e2:	4023      	ands	r3, r4
    67e4:	2b04      	cmp	r3, #4
    67e6:	d000      	beq.n	67ea <__aeabi_fdiv+0x256>
    67e8:	3404      	adds	r4, #4
    67ea:	0163      	lsls	r3, r4, #5
    67ec:	d505      	bpl.n	67fa <__aeabi_fdiv+0x266>
    67ee:	2301      	movs	r3, #1
    67f0:	9a01      	ldr	r2, [sp, #4]
    67f2:	2101      	movs	r1, #1
    67f4:	4013      	ands	r3, r2
    67f6:	2400      	movs	r4, #0
    67f8:	e768      	b.n	66cc <__aeabi_fdiv+0x138>
    67fa:	2301      	movs	r3, #1
    67fc:	9a01      	ldr	r2, [sp, #4]
    67fe:	01a4      	lsls	r4, r4, #6
    6800:	0a64      	lsrs	r4, r4, #9
    6802:	4013      	ands	r3, r2
    6804:	2100      	movs	r1, #0
    6806:	e761      	b.n	66cc <__aeabi_fdiv+0x138>
    6808:	2380      	movs	r3, #128	; 0x80
    680a:	03db      	lsls	r3, r3, #15
    680c:	431c      	orrs	r4, r3
    680e:	0264      	lsls	r4, r4, #9
    6810:	0a64      	lsrs	r4, r4, #9
    6812:	4653      	mov	r3, sl
    6814:	21ff      	movs	r1, #255	; 0xff
    6816:	e759      	b.n	66cc <__aeabi_fdiv+0x138>
    6818:	00008d60 	.word	0x00008d60
    681c:	00008da0 	.word	0x00008da0
    6820:	f7ffffff 	.word	0xf7ffffff

00006824 <__eqsf2>:
    6824:	b570      	push	{r4, r5, r6, lr}
    6826:	0042      	lsls	r2, r0, #1
    6828:	0245      	lsls	r5, r0, #9
    682a:	024e      	lsls	r6, r1, #9
    682c:	004c      	lsls	r4, r1, #1
    682e:	0fc3      	lsrs	r3, r0, #31
    6830:	0a6d      	lsrs	r5, r5, #9
    6832:	0e12      	lsrs	r2, r2, #24
    6834:	0a76      	lsrs	r6, r6, #9
    6836:	0e24      	lsrs	r4, r4, #24
    6838:	0fc9      	lsrs	r1, r1, #31
    683a:	2001      	movs	r0, #1
    683c:	2aff      	cmp	r2, #255	; 0xff
    683e:	d006      	beq.n	684e <__eqsf2+0x2a>
    6840:	2cff      	cmp	r4, #255	; 0xff
    6842:	d003      	beq.n	684c <__eqsf2+0x28>
    6844:	42a2      	cmp	r2, r4
    6846:	d101      	bne.n	684c <__eqsf2+0x28>
    6848:	42b5      	cmp	r5, r6
    684a:	d006      	beq.n	685a <__eqsf2+0x36>
    684c:	bd70      	pop	{r4, r5, r6, pc}
    684e:	2d00      	cmp	r5, #0
    6850:	d1fc      	bne.n	684c <__eqsf2+0x28>
    6852:	2cff      	cmp	r4, #255	; 0xff
    6854:	d1fa      	bne.n	684c <__eqsf2+0x28>
    6856:	2e00      	cmp	r6, #0
    6858:	d1f8      	bne.n	684c <__eqsf2+0x28>
    685a:	428b      	cmp	r3, r1
    685c:	d006      	beq.n	686c <__eqsf2+0x48>
    685e:	2001      	movs	r0, #1
    6860:	2a00      	cmp	r2, #0
    6862:	d1f3      	bne.n	684c <__eqsf2+0x28>
    6864:	0028      	movs	r0, r5
    6866:	1e45      	subs	r5, r0, #1
    6868:	41a8      	sbcs	r0, r5
    686a:	e7ef      	b.n	684c <__eqsf2+0x28>
    686c:	2000      	movs	r0, #0
    686e:	e7ed      	b.n	684c <__eqsf2+0x28>

00006870 <__gesf2>:
    6870:	b5f0      	push	{r4, r5, r6, r7, lr}
    6872:	0042      	lsls	r2, r0, #1
    6874:	0245      	lsls	r5, r0, #9
    6876:	024c      	lsls	r4, r1, #9
    6878:	0fc3      	lsrs	r3, r0, #31
    687a:	0048      	lsls	r0, r1, #1
    687c:	0a6d      	lsrs	r5, r5, #9
    687e:	0e12      	lsrs	r2, r2, #24
    6880:	0a64      	lsrs	r4, r4, #9
    6882:	0e00      	lsrs	r0, r0, #24
    6884:	0fc9      	lsrs	r1, r1, #31
    6886:	2aff      	cmp	r2, #255	; 0xff
    6888:	d01e      	beq.n	68c8 <__gesf2+0x58>
    688a:	28ff      	cmp	r0, #255	; 0xff
    688c:	d021      	beq.n	68d2 <__gesf2+0x62>
    688e:	2a00      	cmp	r2, #0
    6890:	d10a      	bne.n	68a8 <__gesf2+0x38>
    6892:	426e      	negs	r6, r5
    6894:	416e      	adcs	r6, r5
    6896:	b2f6      	uxtb	r6, r6
    6898:	2800      	cmp	r0, #0
    689a:	d10f      	bne.n	68bc <__gesf2+0x4c>
    689c:	2c00      	cmp	r4, #0
    689e:	d10d      	bne.n	68bc <__gesf2+0x4c>
    68a0:	2000      	movs	r0, #0
    68a2:	2d00      	cmp	r5, #0
    68a4:	d009      	beq.n	68ba <__gesf2+0x4a>
    68a6:	e005      	b.n	68b4 <__gesf2+0x44>
    68a8:	2800      	cmp	r0, #0
    68aa:	d101      	bne.n	68b0 <__gesf2+0x40>
    68ac:	2c00      	cmp	r4, #0
    68ae:	d001      	beq.n	68b4 <__gesf2+0x44>
    68b0:	428b      	cmp	r3, r1
    68b2:	d011      	beq.n	68d8 <__gesf2+0x68>
    68b4:	2101      	movs	r1, #1
    68b6:	4258      	negs	r0, r3
    68b8:	4308      	orrs	r0, r1
    68ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68bc:	2e00      	cmp	r6, #0
    68be:	d0f7      	beq.n	68b0 <__gesf2+0x40>
    68c0:	2001      	movs	r0, #1
    68c2:	3901      	subs	r1, #1
    68c4:	4308      	orrs	r0, r1
    68c6:	e7f8      	b.n	68ba <__gesf2+0x4a>
    68c8:	2d00      	cmp	r5, #0
    68ca:	d0de      	beq.n	688a <__gesf2+0x1a>
    68cc:	2002      	movs	r0, #2
    68ce:	4240      	negs	r0, r0
    68d0:	e7f3      	b.n	68ba <__gesf2+0x4a>
    68d2:	2c00      	cmp	r4, #0
    68d4:	d0db      	beq.n	688e <__gesf2+0x1e>
    68d6:	e7f9      	b.n	68cc <__gesf2+0x5c>
    68d8:	4282      	cmp	r2, r0
    68da:	dceb      	bgt.n	68b4 <__gesf2+0x44>
    68dc:	db04      	blt.n	68e8 <__gesf2+0x78>
    68de:	42a5      	cmp	r5, r4
    68e0:	d8e8      	bhi.n	68b4 <__gesf2+0x44>
    68e2:	2000      	movs	r0, #0
    68e4:	42a5      	cmp	r5, r4
    68e6:	d2e8      	bcs.n	68ba <__gesf2+0x4a>
    68e8:	2101      	movs	r1, #1
    68ea:	1e58      	subs	r0, r3, #1
    68ec:	4308      	orrs	r0, r1
    68ee:	e7e4      	b.n	68ba <__gesf2+0x4a>

000068f0 <__lesf2>:
    68f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    68f2:	0042      	lsls	r2, r0, #1
    68f4:	024d      	lsls	r5, r1, #9
    68f6:	004c      	lsls	r4, r1, #1
    68f8:	0246      	lsls	r6, r0, #9
    68fa:	0a76      	lsrs	r6, r6, #9
    68fc:	0e12      	lsrs	r2, r2, #24
    68fe:	0fc3      	lsrs	r3, r0, #31
    6900:	0a6d      	lsrs	r5, r5, #9
    6902:	0e24      	lsrs	r4, r4, #24
    6904:	0fc9      	lsrs	r1, r1, #31
    6906:	2aff      	cmp	r2, #255	; 0xff
    6908:	d016      	beq.n	6938 <__lesf2+0x48>
    690a:	2cff      	cmp	r4, #255	; 0xff
    690c:	d018      	beq.n	6940 <__lesf2+0x50>
    690e:	2a00      	cmp	r2, #0
    6910:	d10a      	bne.n	6928 <__lesf2+0x38>
    6912:	4270      	negs	r0, r6
    6914:	4170      	adcs	r0, r6
    6916:	b2c0      	uxtb	r0, r0
    6918:	2c00      	cmp	r4, #0
    691a:	d015      	beq.n	6948 <__lesf2+0x58>
    691c:	2800      	cmp	r0, #0
    691e:	d005      	beq.n	692c <__lesf2+0x3c>
    6920:	2001      	movs	r0, #1
    6922:	3901      	subs	r1, #1
    6924:	4308      	orrs	r0, r1
    6926:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6928:	2c00      	cmp	r4, #0
    692a:	d013      	beq.n	6954 <__lesf2+0x64>
    692c:	4299      	cmp	r1, r3
    692e:	d014      	beq.n	695a <__lesf2+0x6a>
    6930:	2001      	movs	r0, #1
    6932:	425b      	negs	r3, r3
    6934:	4318      	orrs	r0, r3
    6936:	e7f6      	b.n	6926 <__lesf2+0x36>
    6938:	2002      	movs	r0, #2
    693a:	2e00      	cmp	r6, #0
    693c:	d1f3      	bne.n	6926 <__lesf2+0x36>
    693e:	e7e4      	b.n	690a <__lesf2+0x1a>
    6940:	2002      	movs	r0, #2
    6942:	2d00      	cmp	r5, #0
    6944:	d1ef      	bne.n	6926 <__lesf2+0x36>
    6946:	e7e2      	b.n	690e <__lesf2+0x1e>
    6948:	2d00      	cmp	r5, #0
    694a:	d1e7      	bne.n	691c <__lesf2+0x2c>
    694c:	2000      	movs	r0, #0
    694e:	2e00      	cmp	r6, #0
    6950:	d0e9      	beq.n	6926 <__lesf2+0x36>
    6952:	e7ed      	b.n	6930 <__lesf2+0x40>
    6954:	2d00      	cmp	r5, #0
    6956:	d1e9      	bne.n	692c <__lesf2+0x3c>
    6958:	e7ea      	b.n	6930 <__lesf2+0x40>
    695a:	42a2      	cmp	r2, r4
    695c:	dc06      	bgt.n	696c <__lesf2+0x7c>
    695e:	dbdf      	blt.n	6920 <__lesf2+0x30>
    6960:	42ae      	cmp	r6, r5
    6962:	d803      	bhi.n	696c <__lesf2+0x7c>
    6964:	2000      	movs	r0, #0
    6966:	42ae      	cmp	r6, r5
    6968:	d3da      	bcc.n	6920 <__lesf2+0x30>
    696a:	e7dc      	b.n	6926 <__lesf2+0x36>
    696c:	2001      	movs	r0, #1
    696e:	4249      	negs	r1, r1
    6970:	4308      	orrs	r0, r1
    6972:	e7d8      	b.n	6926 <__lesf2+0x36>

00006974 <__aeabi_fmul>:
    6974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6976:	4657      	mov	r7, sl
    6978:	464e      	mov	r6, r9
    697a:	4645      	mov	r5, r8
    697c:	46de      	mov	lr, fp
    697e:	b5e0      	push	{r5, r6, r7, lr}
    6980:	0247      	lsls	r7, r0, #9
    6982:	0046      	lsls	r6, r0, #1
    6984:	4688      	mov	r8, r1
    6986:	0a7f      	lsrs	r7, r7, #9
    6988:	0e36      	lsrs	r6, r6, #24
    698a:	0fc4      	lsrs	r4, r0, #31
    698c:	2e00      	cmp	r6, #0
    698e:	d047      	beq.n	6a20 <__aeabi_fmul+0xac>
    6990:	2eff      	cmp	r6, #255	; 0xff
    6992:	d024      	beq.n	69de <__aeabi_fmul+0x6a>
    6994:	00fb      	lsls	r3, r7, #3
    6996:	2780      	movs	r7, #128	; 0x80
    6998:	04ff      	lsls	r7, r7, #19
    699a:	431f      	orrs	r7, r3
    699c:	2300      	movs	r3, #0
    699e:	4699      	mov	r9, r3
    69a0:	469a      	mov	sl, r3
    69a2:	3e7f      	subs	r6, #127	; 0x7f
    69a4:	4643      	mov	r3, r8
    69a6:	025d      	lsls	r5, r3, #9
    69a8:	0058      	lsls	r0, r3, #1
    69aa:	0fdb      	lsrs	r3, r3, #31
    69ac:	0a6d      	lsrs	r5, r5, #9
    69ae:	0e00      	lsrs	r0, r0, #24
    69b0:	4698      	mov	r8, r3
    69b2:	d043      	beq.n	6a3c <__aeabi_fmul+0xc8>
    69b4:	28ff      	cmp	r0, #255	; 0xff
    69b6:	d03b      	beq.n	6a30 <__aeabi_fmul+0xbc>
    69b8:	00eb      	lsls	r3, r5, #3
    69ba:	2580      	movs	r5, #128	; 0x80
    69bc:	2200      	movs	r2, #0
    69be:	04ed      	lsls	r5, r5, #19
    69c0:	431d      	orrs	r5, r3
    69c2:	387f      	subs	r0, #127	; 0x7f
    69c4:	1836      	adds	r6, r6, r0
    69c6:	1c73      	adds	r3, r6, #1
    69c8:	4641      	mov	r1, r8
    69ca:	469b      	mov	fp, r3
    69cc:	464b      	mov	r3, r9
    69ce:	4061      	eors	r1, r4
    69d0:	4313      	orrs	r3, r2
    69d2:	2b0f      	cmp	r3, #15
    69d4:	d864      	bhi.n	6aa0 <__aeabi_fmul+0x12c>
    69d6:	4875      	ldr	r0, [pc, #468]	; (6bac <__aeabi_fmul+0x238>)
    69d8:	009b      	lsls	r3, r3, #2
    69da:	58c3      	ldr	r3, [r0, r3]
    69dc:	469f      	mov	pc, r3
    69de:	2f00      	cmp	r7, #0
    69e0:	d142      	bne.n	6a68 <__aeabi_fmul+0xf4>
    69e2:	2308      	movs	r3, #8
    69e4:	4699      	mov	r9, r3
    69e6:	3b06      	subs	r3, #6
    69e8:	26ff      	movs	r6, #255	; 0xff
    69ea:	469a      	mov	sl, r3
    69ec:	e7da      	b.n	69a4 <__aeabi_fmul+0x30>
    69ee:	4641      	mov	r1, r8
    69f0:	2a02      	cmp	r2, #2
    69f2:	d028      	beq.n	6a46 <__aeabi_fmul+0xd2>
    69f4:	2a03      	cmp	r2, #3
    69f6:	d100      	bne.n	69fa <__aeabi_fmul+0x86>
    69f8:	e0ce      	b.n	6b98 <__aeabi_fmul+0x224>
    69fa:	2a01      	cmp	r2, #1
    69fc:	d000      	beq.n	6a00 <__aeabi_fmul+0x8c>
    69fe:	e0ac      	b.n	6b5a <__aeabi_fmul+0x1e6>
    6a00:	4011      	ands	r1, r2
    6a02:	2000      	movs	r0, #0
    6a04:	2200      	movs	r2, #0
    6a06:	b2cc      	uxtb	r4, r1
    6a08:	0240      	lsls	r0, r0, #9
    6a0a:	05d2      	lsls	r2, r2, #23
    6a0c:	0a40      	lsrs	r0, r0, #9
    6a0e:	07e4      	lsls	r4, r4, #31
    6a10:	4310      	orrs	r0, r2
    6a12:	4320      	orrs	r0, r4
    6a14:	bc3c      	pop	{r2, r3, r4, r5}
    6a16:	4690      	mov	r8, r2
    6a18:	4699      	mov	r9, r3
    6a1a:	46a2      	mov	sl, r4
    6a1c:	46ab      	mov	fp, r5
    6a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a20:	2f00      	cmp	r7, #0
    6a22:	d115      	bne.n	6a50 <__aeabi_fmul+0xdc>
    6a24:	2304      	movs	r3, #4
    6a26:	4699      	mov	r9, r3
    6a28:	3b03      	subs	r3, #3
    6a2a:	2600      	movs	r6, #0
    6a2c:	469a      	mov	sl, r3
    6a2e:	e7b9      	b.n	69a4 <__aeabi_fmul+0x30>
    6a30:	20ff      	movs	r0, #255	; 0xff
    6a32:	2202      	movs	r2, #2
    6a34:	2d00      	cmp	r5, #0
    6a36:	d0c5      	beq.n	69c4 <__aeabi_fmul+0x50>
    6a38:	2203      	movs	r2, #3
    6a3a:	e7c3      	b.n	69c4 <__aeabi_fmul+0x50>
    6a3c:	2d00      	cmp	r5, #0
    6a3e:	d119      	bne.n	6a74 <__aeabi_fmul+0x100>
    6a40:	2000      	movs	r0, #0
    6a42:	2201      	movs	r2, #1
    6a44:	e7be      	b.n	69c4 <__aeabi_fmul+0x50>
    6a46:	2401      	movs	r4, #1
    6a48:	22ff      	movs	r2, #255	; 0xff
    6a4a:	400c      	ands	r4, r1
    6a4c:	2000      	movs	r0, #0
    6a4e:	e7db      	b.n	6a08 <__aeabi_fmul+0x94>
    6a50:	0038      	movs	r0, r7
    6a52:	f001 ff83 	bl	895c <__clzsi2>
    6a56:	2676      	movs	r6, #118	; 0x76
    6a58:	1f43      	subs	r3, r0, #5
    6a5a:	409f      	lsls	r7, r3
    6a5c:	2300      	movs	r3, #0
    6a5e:	4276      	negs	r6, r6
    6a60:	1a36      	subs	r6, r6, r0
    6a62:	4699      	mov	r9, r3
    6a64:	469a      	mov	sl, r3
    6a66:	e79d      	b.n	69a4 <__aeabi_fmul+0x30>
    6a68:	230c      	movs	r3, #12
    6a6a:	4699      	mov	r9, r3
    6a6c:	3b09      	subs	r3, #9
    6a6e:	26ff      	movs	r6, #255	; 0xff
    6a70:	469a      	mov	sl, r3
    6a72:	e797      	b.n	69a4 <__aeabi_fmul+0x30>
    6a74:	0028      	movs	r0, r5
    6a76:	f001 ff71 	bl	895c <__clzsi2>
    6a7a:	1f43      	subs	r3, r0, #5
    6a7c:	409d      	lsls	r5, r3
    6a7e:	2376      	movs	r3, #118	; 0x76
    6a80:	425b      	negs	r3, r3
    6a82:	1a18      	subs	r0, r3, r0
    6a84:	2200      	movs	r2, #0
    6a86:	e79d      	b.n	69c4 <__aeabi_fmul+0x50>
    6a88:	2080      	movs	r0, #128	; 0x80
    6a8a:	2400      	movs	r4, #0
    6a8c:	03c0      	lsls	r0, r0, #15
    6a8e:	22ff      	movs	r2, #255	; 0xff
    6a90:	e7ba      	b.n	6a08 <__aeabi_fmul+0x94>
    6a92:	003d      	movs	r5, r7
    6a94:	4652      	mov	r2, sl
    6a96:	e7ab      	b.n	69f0 <__aeabi_fmul+0x7c>
    6a98:	003d      	movs	r5, r7
    6a9a:	0021      	movs	r1, r4
    6a9c:	4652      	mov	r2, sl
    6a9e:	e7a7      	b.n	69f0 <__aeabi_fmul+0x7c>
    6aa0:	0c3b      	lsrs	r3, r7, #16
    6aa2:	469c      	mov	ip, r3
    6aa4:	042a      	lsls	r2, r5, #16
    6aa6:	0c12      	lsrs	r2, r2, #16
    6aa8:	0c2b      	lsrs	r3, r5, #16
    6aaa:	0014      	movs	r4, r2
    6aac:	4660      	mov	r0, ip
    6aae:	4665      	mov	r5, ip
    6ab0:	043f      	lsls	r7, r7, #16
    6ab2:	0c3f      	lsrs	r7, r7, #16
    6ab4:	437c      	muls	r4, r7
    6ab6:	4342      	muls	r2, r0
    6ab8:	435d      	muls	r5, r3
    6aba:	437b      	muls	r3, r7
    6abc:	0c27      	lsrs	r7, r4, #16
    6abe:	189b      	adds	r3, r3, r2
    6ac0:	18ff      	adds	r7, r7, r3
    6ac2:	42ba      	cmp	r2, r7
    6ac4:	d903      	bls.n	6ace <__aeabi_fmul+0x15a>
    6ac6:	2380      	movs	r3, #128	; 0x80
    6ac8:	025b      	lsls	r3, r3, #9
    6aca:	469c      	mov	ip, r3
    6acc:	4465      	add	r5, ip
    6ace:	0424      	lsls	r4, r4, #16
    6ad0:	043a      	lsls	r2, r7, #16
    6ad2:	0c24      	lsrs	r4, r4, #16
    6ad4:	1912      	adds	r2, r2, r4
    6ad6:	0193      	lsls	r3, r2, #6
    6ad8:	1e5c      	subs	r4, r3, #1
    6ada:	41a3      	sbcs	r3, r4
    6adc:	0c3f      	lsrs	r7, r7, #16
    6ade:	0e92      	lsrs	r2, r2, #26
    6ae0:	197d      	adds	r5, r7, r5
    6ae2:	431a      	orrs	r2, r3
    6ae4:	01ad      	lsls	r5, r5, #6
    6ae6:	4315      	orrs	r5, r2
    6ae8:	012b      	lsls	r3, r5, #4
    6aea:	d504      	bpl.n	6af6 <__aeabi_fmul+0x182>
    6aec:	2301      	movs	r3, #1
    6aee:	465e      	mov	r6, fp
    6af0:	086a      	lsrs	r2, r5, #1
    6af2:	401d      	ands	r5, r3
    6af4:	4315      	orrs	r5, r2
    6af6:	0032      	movs	r2, r6
    6af8:	327f      	adds	r2, #127	; 0x7f
    6afa:	2a00      	cmp	r2, #0
    6afc:	dd25      	ble.n	6b4a <__aeabi_fmul+0x1d6>
    6afe:	076b      	lsls	r3, r5, #29
    6b00:	d004      	beq.n	6b0c <__aeabi_fmul+0x198>
    6b02:	230f      	movs	r3, #15
    6b04:	402b      	ands	r3, r5
    6b06:	2b04      	cmp	r3, #4
    6b08:	d000      	beq.n	6b0c <__aeabi_fmul+0x198>
    6b0a:	3504      	adds	r5, #4
    6b0c:	012b      	lsls	r3, r5, #4
    6b0e:	d503      	bpl.n	6b18 <__aeabi_fmul+0x1a4>
    6b10:	0032      	movs	r2, r6
    6b12:	4b27      	ldr	r3, [pc, #156]	; (6bb0 <__aeabi_fmul+0x23c>)
    6b14:	3280      	adds	r2, #128	; 0x80
    6b16:	401d      	ands	r5, r3
    6b18:	2afe      	cmp	r2, #254	; 0xfe
    6b1a:	dc94      	bgt.n	6a46 <__aeabi_fmul+0xd2>
    6b1c:	2401      	movs	r4, #1
    6b1e:	01a8      	lsls	r0, r5, #6
    6b20:	0a40      	lsrs	r0, r0, #9
    6b22:	b2d2      	uxtb	r2, r2
    6b24:	400c      	ands	r4, r1
    6b26:	e76f      	b.n	6a08 <__aeabi_fmul+0x94>
    6b28:	2080      	movs	r0, #128	; 0x80
    6b2a:	03c0      	lsls	r0, r0, #15
    6b2c:	4207      	tst	r7, r0
    6b2e:	d007      	beq.n	6b40 <__aeabi_fmul+0x1cc>
    6b30:	4205      	tst	r5, r0
    6b32:	d105      	bne.n	6b40 <__aeabi_fmul+0x1cc>
    6b34:	4328      	orrs	r0, r5
    6b36:	0240      	lsls	r0, r0, #9
    6b38:	0a40      	lsrs	r0, r0, #9
    6b3a:	4644      	mov	r4, r8
    6b3c:	22ff      	movs	r2, #255	; 0xff
    6b3e:	e763      	b.n	6a08 <__aeabi_fmul+0x94>
    6b40:	4338      	orrs	r0, r7
    6b42:	0240      	lsls	r0, r0, #9
    6b44:	0a40      	lsrs	r0, r0, #9
    6b46:	22ff      	movs	r2, #255	; 0xff
    6b48:	e75e      	b.n	6a08 <__aeabi_fmul+0x94>
    6b4a:	2401      	movs	r4, #1
    6b4c:	1aa3      	subs	r3, r4, r2
    6b4e:	2b1b      	cmp	r3, #27
    6b50:	dd05      	ble.n	6b5e <__aeabi_fmul+0x1ea>
    6b52:	400c      	ands	r4, r1
    6b54:	2200      	movs	r2, #0
    6b56:	2000      	movs	r0, #0
    6b58:	e756      	b.n	6a08 <__aeabi_fmul+0x94>
    6b5a:	465e      	mov	r6, fp
    6b5c:	e7cb      	b.n	6af6 <__aeabi_fmul+0x182>
    6b5e:	002a      	movs	r2, r5
    6b60:	2020      	movs	r0, #32
    6b62:	40da      	lsrs	r2, r3
    6b64:	1ac3      	subs	r3, r0, r3
    6b66:	409d      	lsls	r5, r3
    6b68:	002b      	movs	r3, r5
    6b6a:	1e5d      	subs	r5, r3, #1
    6b6c:	41ab      	sbcs	r3, r5
    6b6e:	4313      	orrs	r3, r2
    6b70:	075a      	lsls	r2, r3, #29
    6b72:	d004      	beq.n	6b7e <__aeabi_fmul+0x20a>
    6b74:	220f      	movs	r2, #15
    6b76:	401a      	ands	r2, r3
    6b78:	2a04      	cmp	r2, #4
    6b7a:	d000      	beq.n	6b7e <__aeabi_fmul+0x20a>
    6b7c:	3304      	adds	r3, #4
    6b7e:	015a      	lsls	r2, r3, #5
    6b80:	d504      	bpl.n	6b8c <__aeabi_fmul+0x218>
    6b82:	2401      	movs	r4, #1
    6b84:	2201      	movs	r2, #1
    6b86:	400c      	ands	r4, r1
    6b88:	2000      	movs	r0, #0
    6b8a:	e73d      	b.n	6a08 <__aeabi_fmul+0x94>
    6b8c:	2401      	movs	r4, #1
    6b8e:	019b      	lsls	r3, r3, #6
    6b90:	0a58      	lsrs	r0, r3, #9
    6b92:	400c      	ands	r4, r1
    6b94:	2200      	movs	r2, #0
    6b96:	e737      	b.n	6a08 <__aeabi_fmul+0x94>
    6b98:	2080      	movs	r0, #128	; 0x80
    6b9a:	2401      	movs	r4, #1
    6b9c:	03c0      	lsls	r0, r0, #15
    6b9e:	4328      	orrs	r0, r5
    6ba0:	0240      	lsls	r0, r0, #9
    6ba2:	0a40      	lsrs	r0, r0, #9
    6ba4:	400c      	ands	r4, r1
    6ba6:	22ff      	movs	r2, #255	; 0xff
    6ba8:	e72e      	b.n	6a08 <__aeabi_fmul+0x94>
    6baa:	46c0      	nop			; (mov r8, r8)
    6bac:	00008de0 	.word	0x00008de0
    6bb0:	f7ffffff 	.word	0xf7ffffff

00006bb4 <__aeabi_i2f>:
    6bb4:	b570      	push	{r4, r5, r6, lr}
    6bb6:	2800      	cmp	r0, #0
    6bb8:	d030      	beq.n	6c1c <__aeabi_i2f+0x68>
    6bba:	17c3      	asrs	r3, r0, #31
    6bbc:	18c4      	adds	r4, r0, r3
    6bbe:	405c      	eors	r4, r3
    6bc0:	0fc5      	lsrs	r5, r0, #31
    6bc2:	0020      	movs	r0, r4
    6bc4:	f001 feca 	bl	895c <__clzsi2>
    6bc8:	239e      	movs	r3, #158	; 0x9e
    6bca:	1a1b      	subs	r3, r3, r0
    6bcc:	2b96      	cmp	r3, #150	; 0x96
    6bce:	dc0d      	bgt.n	6bec <__aeabi_i2f+0x38>
    6bd0:	2296      	movs	r2, #150	; 0x96
    6bd2:	1ad2      	subs	r2, r2, r3
    6bd4:	4094      	lsls	r4, r2
    6bd6:	002a      	movs	r2, r5
    6bd8:	0264      	lsls	r4, r4, #9
    6bda:	0a64      	lsrs	r4, r4, #9
    6bdc:	b2db      	uxtb	r3, r3
    6bde:	0264      	lsls	r4, r4, #9
    6be0:	05db      	lsls	r3, r3, #23
    6be2:	0a60      	lsrs	r0, r4, #9
    6be4:	07d2      	lsls	r2, r2, #31
    6be6:	4318      	orrs	r0, r3
    6be8:	4310      	orrs	r0, r2
    6bea:	bd70      	pop	{r4, r5, r6, pc}
    6bec:	2b99      	cmp	r3, #153	; 0x99
    6bee:	dc19      	bgt.n	6c24 <__aeabi_i2f+0x70>
    6bf0:	2299      	movs	r2, #153	; 0x99
    6bf2:	1ad2      	subs	r2, r2, r3
    6bf4:	2a00      	cmp	r2, #0
    6bf6:	dd29      	ble.n	6c4c <__aeabi_i2f+0x98>
    6bf8:	4094      	lsls	r4, r2
    6bfa:	0022      	movs	r2, r4
    6bfc:	4c14      	ldr	r4, [pc, #80]	; (6c50 <__aeabi_i2f+0x9c>)
    6bfe:	4014      	ands	r4, r2
    6c00:	0751      	lsls	r1, r2, #29
    6c02:	d004      	beq.n	6c0e <__aeabi_i2f+0x5a>
    6c04:	210f      	movs	r1, #15
    6c06:	400a      	ands	r2, r1
    6c08:	2a04      	cmp	r2, #4
    6c0a:	d000      	beq.n	6c0e <__aeabi_i2f+0x5a>
    6c0c:	3404      	adds	r4, #4
    6c0e:	0162      	lsls	r2, r4, #5
    6c10:	d413      	bmi.n	6c3a <__aeabi_i2f+0x86>
    6c12:	01a4      	lsls	r4, r4, #6
    6c14:	0a64      	lsrs	r4, r4, #9
    6c16:	b2db      	uxtb	r3, r3
    6c18:	002a      	movs	r2, r5
    6c1a:	e7e0      	b.n	6bde <__aeabi_i2f+0x2a>
    6c1c:	2200      	movs	r2, #0
    6c1e:	2300      	movs	r3, #0
    6c20:	2400      	movs	r4, #0
    6c22:	e7dc      	b.n	6bde <__aeabi_i2f+0x2a>
    6c24:	2205      	movs	r2, #5
    6c26:	0021      	movs	r1, r4
    6c28:	1a12      	subs	r2, r2, r0
    6c2a:	40d1      	lsrs	r1, r2
    6c2c:	22b9      	movs	r2, #185	; 0xb9
    6c2e:	1ad2      	subs	r2, r2, r3
    6c30:	4094      	lsls	r4, r2
    6c32:	1e62      	subs	r2, r4, #1
    6c34:	4194      	sbcs	r4, r2
    6c36:	430c      	orrs	r4, r1
    6c38:	e7da      	b.n	6bf0 <__aeabi_i2f+0x3c>
    6c3a:	4b05      	ldr	r3, [pc, #20]	; (6c50 <__aeabi_i2f+0x9c>)
    6c3c:	002a      	movs	r2, r5
    6c3e:	401c      	ands	r4, r3
    6c40:	239f      	movs	r3, #159	; 0x9f
    6c42:	01a4      	lsls	r4, r4, #6
    6c44:	1a1b      	subs	r3, r3, r0
    6c46:	0a64      	lsrs	r4, r4, #9
    6c48:	b2db      	uxtb	r3, r3
    6c4a:	e7c8      	b.n	6bde <__aeabi_i2f+0x2a>
    6c4c:	0022      	movs	r2, r4
    6c4e:	e7d5      	b.n	6bfc <__aeabi_i2f+0x48>
    6c50:	fbffffff 	.word	0xfbffffff

00006c54 <__aeabi_dadd>:
    6c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c56:	4645      	mov	r5, r8
    6c58:	46de      	mov	lr, fp
    6c5a:	4657      	mov	r7, sl
    6c5c:	464e      	mov	r6, r9
    6c5e:	030c      	lsls	r4, r1, #12
    6c60:	b5e0      	push	{r5, r6, r7, lr}
    6c62:	004e      	lsls	r6, r1, #1
    6c64:	0fc9      	lsrs	r1, r1, #31
    6c66:	4688      	mov	r8, r1
    6c68:	000d      	movs	r5, r1
    6c6a:	0a61      	lsrs	r1, r4, #9
    6c6c:	0f44      	lsrs	r4, r0, #29
    6c6e:	430c      	orrs	r4, r1
    6c70:	00c7      	lsls	r7, r0, #3
    6c72:	0319      	lsls	r1, r3, #12
    6c74:	0058      	lsls	r0, r3, #1
    6c76:	0fdb      	lsrs	r3, r3, #31
    6c78:	469b      	mov	fp, r3
    6c7a:	0a4b      	lsrs	r3, r1, #9
    6c7c:	0f51      	lsrs	r1, r2, #29
    6c7e:	430b      	orrs	r3, r1
    6c80:	0d76      	lsrs	r6, r6, #21
    6c82:	0d40      	lsrs	r0, r0, #21
    6c84:	0019      	movs	r1, r3
    6c86:	00d2      	lsls	r2, r2, #3
    6c88:	45d8      	cmp	r8, fp
    6c8a:	d100      	bne.n	6c8e <__aeabi_dadd+0x3a>
    6c8c:	e0ae      	b.n	6dec <__aeabi_dadd+0x198>
    6c8e:	1a35      	subs	r5, r6, r0
    6c90:	2d00      	cmp	r5, #0
    6c92:	dc00      	bgt.n	6c96 <__aeabi_dadd+0x42>
    6c94:	e0f6      	b.n	6e84 <__aeabi_dadd+0x230>
    6c96:	2800      	cmp	r0, #0
    6c98:	d10f      	bne.n	6cba <__aeabi_dadd+0x66>
    6c9a:	4313      	orrs	r3, r2
    6c9c:	d100      	bne.n	6ca0 <__aeabi_dadd+0x4c>
    6c9e:	e0db      	b.n	6e58 <__aeabi_dadd+0x204>
    6ca0:	1e6b      	subs	r3, r5, #1
    6ca2:	2b00      	cmp	r3, #0
    6ca4:	d000      	beq.n	6ca8 <__aeabi_dadd+0x54>
    6ca6:	e137      	b.n	6f18 <__aeabi_dadd+0x2c4>
    6ca8:	1aba      	subs	r2, r7, r2
    6caa:	4297      	cmp	r7, r2
    6cac:	41bf      	sbcs	r7, r7
    6cae:	1a64      	subs	r4, r4, r1
    6cb0:	427f      	negs	r7, r7
    6cb2:	1be4      	subs	r4, r4, r7
    6cb4:	2601      	movs	r6, #1
    6cb6:	0017      	movs	r7, r2
    6cb8:	e024      	b.n	6d04 <__aeabi_dadd+0xb0>
    6cba:	4bc6      	ldr	r3, [pc, #792]	; (6fd4 <__aeabi_dadd+0x380>)
    6cbc:	429e      	cmp	r6, r3
    6cbe:	d04d      	beq.n	6d5c <__aeabi_dadd+0x108>
    6cc0:	2380      	movs	r3, #128	; 0x80
    6cc2:	041b      	lsls	r3, r3, #16
    6cc4:	4319      	orrs	r1, r3
    6cc6:	2d38      	cmp	r5, #56	; 0x38
    6cc8:	dd00      	ble.n	6ccc <__aeabi_dadd+0x78>
    6cca:	e107      	b.n	6edc <__aeabi_dadd+0x288>
    6ccc:	2d1f      	cmp	r5, #31
    6cce:	dd00      	ble.n	6cd2 <__aeabi_dadd+0x7e>
    6cd0:	e138      	b.n	6f44 <__aeabi_dadd+0x2f0>
    6cd2:	2020      	movs	r0, #32
    6cd4:	1b43      	subs	r3, r0, r5
    6cd6:	469a      	mov	sl, r3
    6cd8:	000b      	movs	r3, r1
    6cda:	4650      	mov	r0, sl
    6cdc:	4083      	lsls	r3, r0
    6cde:	4699      	mov	r9, r3
    6ce0:	0013      	movs	r3, r2
    6ce2:	4648      	mov	r0, r9
    6ce4:	40eb      	lsrs	r3, r5
    6ce6:	4318      	orrs	r0, r3
    6ce8:	0003      	movs	r3, r0
    6cea:	4650      	mov	r0, sl
    6cec:	4082      	lsls	r2, r0
    6cee:	1e50      	subs	r0, r2, #1
    6cf0:	4182      	sbcs	r2, r0
    6cf2:	40e9      	lsrs	r1, r5
    6cf4:	431a      	orrs	r2, r3
    6cf6:	1aba      	subs	r2, r7, r2
    6cf8:	1a61      	subs	r1, r4, r1
    6cfa:	4297      	cmp	r7, r2
    6cfc:	41a4      	sbcs	r4, r4
    6cfe:	0017      	movs	r7, r2
    6d00:	4264      	negs	r4, r4
    6d02:	1b0c      	subs	r4, r1, r4
    6d04:	0223      	lsls	r3, r4, #8
    6d06:	d562      	bpl.n	6dce <__aeabi_dadd+0x17a>
    6d08:	0264      	lsls	r4, r4, #9
    6d0a:	0a65      	lsrs	r5, r4, #9
    6d0c:	2d00      	cmp	r5, #0
    6d0e:	d100      	bne.n	6d12 <__aeabi_dadd+0xbe>
    6d10:	e0df      	b.n	6ed2 <__aeabi_dadd+0x27e>
    6d12:	0028      	movs	r0, r5
    6d14:	f001 fe22 	bl	895c <__clzsi2>
    6d18:	0003      	movs	r3, r0
    6d1a:	3b08      	subs	r3, #8
    6d1c:	2b1f      	cmp	r3, #31
    6d1e:	dd00      	ble.n	6d22 <__aeabi_dadd+0xce>
    6d20:	e0d2      	b.n	6ec8 <__aeabi_dadd+0x274>
    6d22:	2220      	movs	r2, #32
    6d24:	003c      	movs	r4, r7
    6d26:	1ad2      	subs	r2, r2, r3
    6d28:	409d      	lsls	r5, r3
    6d2a:	40d4      	lsrs	r4, r2
    6d2c:	409f      	lsls	r7, r3
    6d2e:	4325      	orrs	r5, r4
    6d30:	429e      	cmp	r6, r3
    6d32:	dd00      	ble.n	6d36 <__aeabi_dadd+0xe2>
    6d34:	e0c4      	b.n	6ec0 <__aeabi_dadd+0x26c>
    6d36:	1b9e      	subs	r6, r3, r6
    6d38:	1c73      	adds	r3, r6, #1
    6d3a:	2b1f      	cmp	r3, #31
    6d3c:	dd00      	ble.n	6d40 <__aeabi_dadd+0xec>
    6d3e:	e0f1      	b.n	6f24 <__aeabi_dadd+0x2d0>
    6d40:	2220      	movs	r2, #32
    6d42:	0038      	movs	r0, r7
    6d44:	0029      	movs	r1, r5
    6d46:	1ad2      	subs	r2, r2, r3
    6d48:	40d8      	lsrs	r0, r3
    6d4a:	4091      	lsls	r1, r2
    6d4c:	4097      	lsls	r7, r2
    6d4e:	002c      	movs	r4, r5
    6d50:	4301      	orrs	r1, r0
    6d52:	1e78      	subs	r0, r7, #1
    6d54:	4187      	sbcs	r7, r0
    6d56:	40dc      	lsrs	r4, r3
    6d58:	2600      	movs	r6, #0
    6d5a:	430f      	orrs	r7, r1
    6d5c:	077b      	lsls	r3, r7, #29
    6d5e:	d009      	beq.n	6d74 <__aeabi_dadd+0x120>
    6d60:	230f      	movs	r3, #15
    6d62:	403b      	ands	r3, r7
    6d64:	2b04      	cmp	r3, #4
    6d66:	d005      	beq.n	6d74 <__aeabi_dadd+0x120>
    6d68:	1d3b      	adds	r3, r7, #4
    6d6a:	42bb      	cmp	r3, r7
    6d6c:	41bf      	sbcs	r7, r7
    6d6e:	427f      	negs	r7, r7
    6d70:	19e4      	adds	r4, r4, r7
    6d72:	001f      	movs	r7, r3
    6d74:	0223      	lsls	r3, r4, #8
    6d76:	d52c      	bpl.n	6dd2 <__aeabi_dadd+0x17e>
    6d78:	4b96      	ldr	r3, [pc, #600]	; (6fd4 <__aeabi_dadd+0x380>)
    6d7a:	3601      	adds	r6, #1
    6d7c:	429e      	cmp	r6, r3
    6d7e:	d100      	bne.n	6d82 <__aeabi_dadd+0x12e>
    6d80:	e09a      	b.n	6eb8 <__aeabi_dadd+0x264>
    6d82:	4645      	mov	r5, r8
    6d84:	4b94      	ldr	r3, [pc, #592]	; (6fd8 <__aeabi_dadd+0x384>)
    6d86:	08ff      	lsrs	r7, r7, #3
    6d88:	401c      	ands	r4, r3
    6d8a:	0760      	lsls	r0, r4, #29
    6d8c:	0576      	lsls	r6, r6, #21
    6d8e:	0264      	lsls	r4, r4, #9
    6d90:	4307      	orrs	r7, r0
    6d92:	0b24      	lsrs	r4, r4, #12
    6d94:	0d76      	lsrs	r6, r6, #21
    6d96:	2100      	movs	r1, #0
    6d98:	0324      	lsls	r4, r4, #12
    6d9a:	0b23      	lsrs	r3, r4, #12
    6d9c:	0d0c      	lsrs	r4, r1, #20
    6d9e:	4a8f      	ldr	r2, [pc, #572]	; (6fdc <__aeabi_dadd+0x388>)
    6da0:	0524      	lsls	r4, r4, #20
    6da2:	431c      	orrs	r4, r3
    6da4:	4014      	ands	r4, r2
    6da6:	0533      	lsls	r3, r6, #20
    6da8:	4323      	orrs	r3, r4
    6daa:	005b      	lsls	r3, r3, #1
    6dac:	07ed      	lsls	r5, r5, #31
    6dae:	085b      	lsrs	r3, r3, #1
    6db0:	432b      	orrs	r3, r5
    6db2:	0038      	movs	r0, r7
    6db4:	0019      	movs	r1, r3
    6db6:	bc3c      	pop	{r2, r3, r4, r5}
    6db8:	4690      	mov	r8, r2
    6dba:	4699      	mov	r9, r3
    6dbc:	46a2      	mov	sl, r4
    6dbe:	46ab      	mov	fp, r5
    6dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6dc2:	4664      	mov	r4, ip
    6dc4:	4304      	orrs	r4, r0
    6dc6:	d100      	bne.n	6dca <__aeabi_dadd+0x176>
    6dc8:	e211      	b.n	71ee <__aeabi_dadd+0x59a>
    6dca:	0004      	movs	r4, r0
    6dcc:	4667      	mov	r7, ip
    6dce:	077b      	lsls	r3, r7, #29
    6dd0:	d1c6      	bne.n	6d60 <__aeabi_dadd+0x10c>
    6dd2:	4645      	mov	r5, r8
    6dd4:	0760      	lsls	r0, r4, #29
    6dd6:	08ff      	lsrs	r7, r7, #3
    6dd8:	4307      	orrs	r7, r0
    6dda:	08e4      	lsrs	r4, r4, #3
    6ddc:	4b7d      	ldr	r3, [pc, #500]	; (6fd4 <__aeabi_dadd+0x380>)
    6dde:	429e      	cmp	r6, r3
    6de0:	d030      	beq.n	6e44 <__aeabi_dadd+0x1f0>
    6de2:	0324      	lsls	r4, r4, #12
    6de4:	0576      	lsls	r6, r6, #21
    6de6:	0b24      	lsrs	r4, r4, #12
    6de8:	0d76      	lsrs	r6, r6, #21
    6dea:	e7d4      	b.n	6d96 <__aeabi_dadd+0x142>
    6dec:	1a33      	subs	r3, r6, r0
    6dee:	469a      	mov	sl, r3
    6df0:	2b00      	cmp	r3, #0
    6df2:	dd78      	ble.n	6ee6 <__aeabi_dadd+0x292>
    6df4:	2800      	cmp	r0, #0
    6df6:	d031      	beq.n	6e5c <__aeabi_dadd+0x208>
    6df8:	4876      	ldr	r0, [pc, #472]	; (6fd4 <__aeabi_dadd+0x380>)
    6dfa:	4286      	cmp	r6, r0
    6dfc:	d0ae      	beq.n	6d5c <__aeabi_dadd+0x108>
    6dfe:	2080      	movs	r0, #128	; 0x80
    6e00:	0400      	lsls	r0, r0, #16
    6e02:	4301      	orrs	r1, r0
    6e04:	4653      	mov	r3, sl
    6e06:	2b38      	cmp	r3, #56	; 0x38
    6e08:	dc00      	bgt.n	6e0c <__aeabi_dadd+0x1b8>
    6e0a:	e0e9      	b.n	6fe0 <__aeabi_dadd+0x38c>
    6e0c:	430a      	orrs	r2, r1
    6e0e:	1e51      	subs	r1, r2, #1
    6e10:	418a      	sbcs	r2, r1
    6e12:	2100      	movs	r1, #0
    6e14:	19d2      	adds	r2, r2, r7
    6e16:	42ba      	cmp	r2, r7
    6e18:	41bf      	sbcs	r7, r7
    6e1a:	1909      	adds	r1, r1, r4
    6e1c:	427c      	negs	r4, r7
    6e1e:	0017      	movs	r7, r2
    6e20:	190c      	adds	r4, r1, r4
    6e22:	0223      	lsls	r3, r4, #8
    6e24:	d5d3      	bpl.n	6dce <__aeabi_dadd+0x17a>
    6e26:	4b6b      	ldr	r3, [pc, #428]	; (6fd4 <__aeabi_dadd+0x380>)
    6e28:	3601      	adds	r6, #1
    6e2a:	429e      	cmp	r6, r3
    6e2c:	d100      	bne.n	6e30 <__aeabi_dadd+0x1dc>
    6e2e:	e13a      	b.n	70a6 <__aeabi_dadd+0x452>
    6e30:	2001      	movs	r0, #1
    6e32:	4b69      	ldr	r3, [pc, #420]	; (6fd8 <__aeabi_dadd+0x384>)
    6e34:	401c      	ands	r4, r3
    6e36:	087b      	lsrs	r3, r7, #1
    6e38:	4007      	ands	r7, r0
    6e3a:	431f      	orrs	r7, r3
    6e3c:	07e0      	lsls	r0, r4, #31
    6e3e:	4307      	orrs	r7, r0
    6e40:	0864      	lsrs	r4, r4, #1
    6e42:	e78b      	b.n	6d5c <__aeabi_dadd+0x108>
    6e44:	0023      	movs	r3, r4
    6e46:	433b      	orrs	r3, r7
    6e48:	d100      	bne.n	6e4c <__aeabi_dadd+0x1f8>
    6e4a:	e1cb      	b.n	71e4 <__aeabi_dadd+0x590>
    6e4c:	2280      	movs	r2, #128	; 0x80
    6e4e:	0312      	lsls	r2, r2, #12
    6e50:	4314      	orrs	r4, r2
    6e52:	0324      	lsls	r4, r4, #12
    6e54:	0b24      	lsrs	r4, r4, #12
    6e56:	e79e      	b.n	6d96 <__aeabi_dadd+0x142>
    6e58:	002e      	movs	r6, r5
    6e5a:	e77f      	b.n	6d5c <__aeabi_dadd+0x108>
    6e5c:	0008      	movs	r0, r1
    6e5e:	4310      	orrs	r0, r2
    6e60:	d100      	bne.n	6e64 <__aeabi_dadd+0x210>
    6e62:	e0b4      	b.n	6fce <__aeabi_dadd+0x37a>
    6e64:	1e58      	subs	r0, r3, #1
    6e66:	2800      	cmp	r0, #0
    6e68:	d000      	beq.n	6e6c <__aeabi_dadd+0x218>
    6e6a:	e0de      	b.n	702a <__aeabi_dadd+0x3d6>
    6e6c:	18ba      	adds	r2, r7, r2
    6e6e:	42ba      	cmp	r2, r7
    6e70:	419b      	sbcs	r3, r3
    6e72:	1864      	adds	r4, r4, r1
    6e74:	425b      	negs	r3, r3
    6e76:	18e4      	adds	r4, r4, r3
    6e78:	0017      	movs	r7, r2
    6e7a:	2601      	movs	r6, #1
    6e7c:	0223      	lsls	r3, r4, #8
    6e7e:	d5a6      	bpl.n	6dce <__aeabi_dadd+0x17a>
    6e80:	2602      	movs	r6, #2
    6e82:	e7d5      	b.n	6e30 <__aeabi_dadd+0x1dc>
    6e84:	2d00      	cmp	r5, #0
    6e86:	d16e      	bne.n	6f66 <__aeabi_dadd+0x312>
    6e88:	1c70      	adds	r0, r6, #1
    6e8a:	0540      	lsls	r0, r0, #21
    6e8c:	0d40      	lsrs	r0, r0, #21
    6e8e:	2801      	cmp	r0, #1
    6e90:	dc00      	bgt.n	6e94 <__aeabi_dadd+0x240>
    6e92:	e0f9      	b.n	7088 <__aeabi_dadd+0x434>
    6e94:	1ab8      	subs	r0, r7, r2
    6e96:	4684      	mov	ip, r0
    6e98:	4287      	cmp	r7, r0
    6e9a:	4180      	sbcs	r0, r0
    6e9c:	1ae5      	subs	r5, r4, r3
    6e9e:	4240      	negs	r0, r0
    6ea0:	1a2d      	subs	r5, r5, r0
    6ea2:	0228      	lsls	r0, r5, #8
    6ea4:	d400      	bmi.n	6ea8 <__aeabi_dadd+0x254>
    6ea6:	e089      	b.n	6fbc <__aeabi_dadd+0x368>
    6ea8:	1bd7      	subs	r7, r2, r7
    6eaa:	42ba      	cmp	r2, r7
    6eac:	4192      	sbcs	r2, r2
    6eae:	1b1c      	subs	r4, r3, r4
    6eb0:	4252      	negs	r2, r2
    6eb2:	1aa5      	subs	r5, r4, r2
    6eb4:	46d8      	mov	r8, fp
    6eb6:	e729      	b.n	6d0c <__aeabi_dadd+0xb8>
    6eb8:	4645      	mov	r5, r8
    6eba:	2400      	movs	r4, #0
    6ebc:	2700      	movs	r7, #0
    6ebe:	e76a      	b.n	6d96 <__aeabi_dadd+0x142>
    6ec0:	4c45      	ldr	r4, [pc, #276]	; (6fd8 <__aeabi_dadd+0x384>)
    6ec2:	1af6      	subs	r6, r6, r3
    6ec4:	402c      	ands	r4, r5
    6ec6:	e749      	b.n	6d5c <__aeabi_dadd+0x108>
    6ec8:	003d      	movs	r5, r7
    6eca:	3828      	subs	r0, #40	; 0x28
    6ecc:	4085      	lsls	r5, r0
    6ece:	2700      	movs	r7, #0
    6ed0:	e72e      	b.n	6d30 <__aeabi_dadd+0xdc>
    6ed2:	0038      	movs	r0, r7
    6ed4:	f001 fd42 	bl	895c <__clzsi2>
    6ed8:	3020      	adds	r0, #32
    6eda:	e71d      	b.n	6d18 <__aeabi_dadd+0xc4>
    6edc:	430a      	orrs	r2, r1
    6ede:	1e51      	subs	r1, r2, #1
    6ee0:	418a      	sbcs	r2, r1
    6ee2:	2100      	movs	r1, #0
    6ee4:	e707      	b.n	6cf6 <__aeabi_dadd+0xa2>
    6ee6:	2b00      	cmp	r3, #0
    6ee8:	d000      	beq.n	6eec <__aeabi_dadd+0x298>
    6eea:	e0f3      	b.n	70d4 <__aeabi_dadd+0x480>
    6eec:	1c70      	adds	r0, r6, #1
    6eee:	0543      	lsls	r3, r0, #21
    6ef0:	0d5b      	lsrs	r3, r3, #21
    6ef2:	2b01      	cmp	r3, #1
    6ef4:	dc00      	bgt.n	6ef8 <__aeabi_dadd+0x2a4>
    6ef6:	e0ad      	b.n	7054 <__aeabi_dadd+0x400>
    6ef8:	4b36      	ldr	r3, [pc, #216]	; (6fd4 <__aeabi_dadd+0x380>)
    6efa:	4298      	cmp	r0, r3
    6efc:	d100      	bne.n	6f00 <__aeabi_dadd+0x2ac>
    6efe:	e0d1      	b.n	70a4 <__aeabi_dadd+0x450>
    6f00:	18ba      	adds	r2, r7, r2
    6f02:	42ba      	cmp	r2, r7
    6f04:	41bf      	sbcs	r7, r7
    6f06:	1864      	adds	r4, r4, r1
    6f08:	427f      	negs	r7, r7
    6f0a:	19e4      	adds	r4, r4, r7
    6f0c:	07e7      	lsls	r7, r4, #31
    6f0e:	0852      	lsrs	r2, r2, #1
    6f10:	4317      	orrs	r7, r2
    6f12:	0864      	lsrs	r4, r4, #1
    6f14:	0006      	movs	r6, r0
    6f16:	e721      	b.n	6d5c <__aeabi_dadd+0x108>
    6f18:	482e      	ldr	r0, [pc, #184]	; (6fd4 <__aeabi_dadd+0x380>)
    6f1a:	4285      	cmp	r5, r0
    6f1c:	d100      	bne.n	6f20 <__aeabi_dadd+0x2cc>
    6f1e:	e093      	b.n	7048 <__aeabi_dadd+0x3f4>
    6f20:	001d      	movs	r5, r3
    6f22:	e6d0      	b.n	6cc6 <__aeabi_dadd+0x72>
    6f24:	0029      	movs	r1, r5
    6f26:	3e1f      	subs	r6, #31
    6f28:	40f1      	lsrs	r1, r6
    6f2a:	2b20      	cmp	r3, #32
    6f2c:	d100      	bne.n	6f30 <__aeabi_dadd+0x2dc>
    6f2e:	e08d      	b.n	704c <__aeabi_dadd+0x3f8>
    6f30:	2240      	movs	r2, #64	; 0x40
    6f32:	1ad3      	subs	r3, r2, r3
    6f34:	409d      	lsls	r5, r3
    6f36:	432f      	orrs	r7, r5
    6f38:	1e7d      	subs	r5, r7, #1
    6f3a:	41af      	sbcs	r7, r5
    6f3c:	2400      	movs	r4, #0
    6f3e:	430f      	orrs	r7, r1
    6f40:	2600      	movs	r6, #0
    6f42:	e744      	b.n	6dce <__aeabi_dadd+0x17a>
    6f44:	002b      	movs	r3, r5
    6f46:	0008      	movs	r0, r1
    6f48:	3b20      	subs	r3, #32
    6f4a:	40d8      	lsrs	r0, r3
    6f4c:	0003      	movs	r3, r0
    6f4e:	2d20      	cmp	r5, #32
    6f50:	d100      	bne.n	6f54 <__aeabi_dadd+0x300>
    6f52:	e07d      	b.n	7050 <__aeabi_dadd+0x3fc>
    6f54:	2040      	movs	r0, #64	; 0x40
    6f56:	1b45      	subs	r5, r0, r5
    6f58:	40a9      	lsls	r1, r5
    6f5a:	430a      	orrs	r2, r1
    6f5c:	1e51      	subs	r1, r2, #1
    6f5e:	418a      	sbcs	r2, r1
    6f60:	2100      	movs	r1, #0
    6f62:	431a      	orrs	r2, r3
    6f64:	e6c7      	b.n	6cf6 <__aeabi_dadd+0xa2>
    6f66:	2e00      	cmp	r6, #0
    6f68:	d050      	beq.n	700c <__aeabi_dadd+0x3b8>
    6f6a:	4e1a      	ldr	r6, [pc, #104]	; (6fd4 <__aeabi_dadd+0x380>)
    6f6c:	42b0      	cmp	r0, r6
    6f6e:	d057      	beq.n	7020 <__aeabi_dadd+0x3cc>
    6f70:	2680      	movs	r6, #128	; 0x80
    6f72:	426b      	negs	r3, r5
    6f74:	4699      	mov	r9, r3
    6f76:	0436      	lsls	r6, r6, #16
    6f78:	4334      	orrs	r4, r6
    6f7a:	464b      	mov	r3, r9
    6f7c:	2b38      	cmp	r3, #56	; 0x38
    6f7e:	dd00      	ble.n	6f82 <__aeabi_dadd+0x32e>
    6f80:	e0d6      	b.n	7130 <__aeabi_dadd+0x4dc>
    6f82:	2b1f      	cmp	r3, #31
    6f84:	dd00      	ble.n	6f88 <__aeabi_dadd+0x334>
    6f86:	e135      	b.n	71f4 <__aeabi_dadd+0x5a0>
    6f88:	2620      	movs	r6, #32
    6f8a:	1af5      	subs	r5, r6, r3
    6f8c:	0026      	movs	r6, r4
    6f8e:	40ae      	lsls	r6, r5
    6f90:	46b2      	mov	sl, r6
    6f92:	003e      	movs	r6, r7
    6f94:	40de      	lsrs	r6, r3
    6f96:	46ac      	mov	ip, r5
    6f98:	0035      	movs	r5, r6
    6f9a:	4656      	mov	r6, sl
    6f9c:	432e      	orrs	r6, r5
    6f9e:	4665      	mov	r5, ip
    6fa0:	40af      	lsls	r7, r5
    6fa2:	1e7d      	subs	r5, r7, #1
    6fa4:	41af      	sbcs	r7, r5
    6fa6:	40dc      	lsrs	r4, r3
    6fa8:	4337      	orrs	r7, r6
    6faa:	1bd7      	subs	r7, r2, r7
    6fac:	42ba      	cmp	r2, r7
    6fae:	4192      	sbcs	r2, r2
    6fb0:	1b0c      	subs	r4, r1, r4
    6fb2:	4252      	negs	r2, r2
    6fb4:	1aa4      	subs	r4, r4, r2
    6fb6:	0006      	movs	r6, r0
    6fb8:	46d8      	mov	r8, fp
    6fba:	e6a3      	b.n	6d04 <__aeabi_dadd+0xb0>
    6fbc:	4664      	mov	r4, ip
    6fbe:	4667      	mov	r7, ip
    6fc0:	432c      	orrs	r4, r5
    6fc2:	d000      	beq.n	6fc6 <__aeabi_dadd+0x372>
    6fc4:	e6a2      	b.n	6d0c <__aeabi_dadd+0xb8>
    6fc6:	2500      	movs	r5, #0
    6fc8:	2600      	movs	r6, #0
    6fca:	2700      	movs	r7, #0
    6fcc:	e706      	b.n	6ddc <__aeabi_dadd+0x188>
    6fce:	001e      	movs	r6, r3
    6fd0:	e6c4      	b.n	6d5c <__aeabi_dadd+0x108>
    6fd2:	46c0      	nop			; (mov r8, r8)
    6fd4:	000007ff 	.word	0x000007ff
    6fd8:	ff7fffff 	.word	0xff7fffff
    6fdc:	800fffff 	.word	0x800fffff
    6fe0:	2b1f      	cmp	r3, #31
    6fe2:	dc63      	bgt.n	70ac <__aeabi_dadd+0x458>
    6fe4:	2020      	movs	r0, #32
    6fe6:	1ac3      	subs	r3, r0, r3
    6fe8:	0008      	movs	r0, r1
    6fea:	4098      	lsls	r0, r3
    6fec:	469c      	mov	ip, r3
    6fee:	4683      	mov	fp, r0
    6ff0:	4653      	mov	r3, sl
    6ff2:	0010      	movs	r0, r2
    6ff4:	40d8      	lsrs	r0, r3
    6ff6:	0003      	movs	r3, r0
    6ff8:	4658      	mov	r0, fp
    6ffa:	4318      	orrs	r0, r3
    6ffc:	4663      	mov	r3, ip
    6ffe:	409a      	lsls	r2, r3
    7000:	1e53      	subs	r3, r2, #1
    7002:	419a      	sbcs	r2, r3
    7004:	4653      	mov	r3, sl
    7006:	4302      	orrs	r2, r0
    7008:	40d9      	lsrs	r1, r3
    700a:	e703      	b.n	6e14 <__aeabi_dadd+0x1c0>
    700c:	0026      	movs	r6, r4
    700e:	433e      	orrs	r6, r7
    7010:	d006      	beq.n	7020 <__aeabi_dadd+0x3cc>
    7012:	43eb      	mvns	r3, r5
    7014:	4699      	mov	r9, r3
    7016:	2b00      	cmp	r3, #0
    7018:	d0c7      	beq.n	6faa <__aeabi_dadd+0x356>
    701a:	4e94      	ldr	r6, [pc, #592]	; (726c <__aeabi_dadd+0x618>)
    701c:	42b0      	cmp	r0, r6
    701e:	d1ac      	bne.n	6f7a <__aeabi_dadd+0x326>
    7020:	000c      	movs	r4, r1
    7022:	0017      	movs	r7, r2
    7024:	0006      	movs	r6, r0
    7026:	46d8      	mov	r8, fp
    7028:	e698      	b.n	6d5c <__aeabi_dadd+0x108>
    702a:	4b90      	ldr	r3, [pc, #576]	; (726c <__aeabi_dadd+0x618>)
    702c:	459a      	cmp	sl, r3
    702e:	d00b      	beq.n	7048 <__aeabi_dadd+0x3f4>
    7030:	4682      	mov	sl, r0
    7032:	e6e7      	b.n	6e04 <__aeabi_dadd+0x1b0>
    7034:	2800      	cmp	r0, #0
    7036:	d000      	beq.n	703a <__aeabi_dadd+0x3e6>
    7038:	e09e      	b.n	7178 <__aeabi_dadd+0x524>
    703a:	0018      	movs	r0, r3
    703c:	4310      	orrs	r0, r2
    703e:	d100      	bne.n	7042 <__aeabi_dadd+0x3ee>
    7040:	e0e9      	b.n	7216 <__aeabi_dadd+0x5c2>
    7042:	001c      	movs	r4, r3
    7044:	0017      	movs	r7, r2
    7046:	46d8      	mov	r8, fp
    7048:	4e88      	ldr	r6, [pc, #544]	; (726c <__aeabi_dadd+0x618>)
    704a:	e687      	b.n	6d5c <__aeabi_dadd+0x108>
    704c:	2500      	movs	r5, #0
    704e:	e772      	b.n	6f36 <__aeabi_dadd+0x2e2>
    7050:	2100      	movs	r1, #0
    7052:	e782      	b.n	6f5a <__aeabi_dadd+0x306>
    7054:	0023      	movs	r3, r4
    7056:	433b      	orrs	r3, r7
    7058:	2e00      	cmp	r6, #0
    705a:	d000      	beq.n	705e <__aeabi_dadd+0x40a>
    705c:	e0ab      	b.n	71b6 <__aeabi_dadd+0x562>
    705e:	2b00      	cmp	r3, #0
    7060:	d100      	bne.n	7064 <__aeabi_dadd+0x410>
    7062:	e0e7      	b.n	7234 <__aeabi_dadd+0x5e0>
    7064:	000b      	movs	r3, r1
    7066:	4313      	orrs	r3, r2
    7068:	d100      	bne.n	706c <__aeabi_dadd+0x418>
    706a:	e677      	b.n	6d5c <__aeabi_dadd+0x108>
    706c:	18ba      	adds	r2, r7, r2
    706e:	42ba      	cmp	r2, r7
    7070:	41bf      	sbcs	r7, r7
    7072:	1864      	adds	r4, r4, r1
    7074:	427f      	negs	r7, r7
    7076:	19e4      	adds	r4, r4, r7
    7078:	0223      	lsls	r3, r4, #8
    707a:	d400      	bmi.n	707e <__aeabi_dadd+0x42a>
    707c:	e0f2      	b.n	7264 <__aeabi_dadd+0x610>
    707e:	4b7c      	ldr	r3, [pc, #496]	; (7270 <__aeabi_dadd+0x61c>)
    7080:	0017      	movs	r7, r2
    7082:	401c      	ands	r4, r3
    7084:	0006      	movs	r6, r0
    7086:	e669      	b.n	6d5c <__aeabi_dadd+0x108>
    7088:	0020      	movs	r0, r4
    708a:	4338      	orrs	r0, r7
    708c:	2e00      	cmp	r6, #0
    708e:	d1d1      	bne.n	7034 <__aeabi_dadd+0x3e0>
    7090:	2800      	cmp	r0, #0
    7092:	d15b      	bne.n	714c <__aeabi_dadd+0x4f8>
    7094:	001c      	movs	r4, r3
    7096:	4314      	orrs	r4, r2
    7098:	d100      	bne.n	709c <__aeabi_dadd+0x448>
    709a:	e0a8      	b.n	71ee <__aeabi_dadd+0x59a>
    709c:	001c      	movs	r4, r3
    709e:	0017      	movs	r7, r2
    70a0:	46d8      	mov	r8, fp
    70a2:	e65b      	b.n	6d5c <__aeabi_dadd+0x108>
    70a4:	0006      	movs	r6, r0
    70a6:	2400      	movs	r4, #0
    70a8:	2700      	movs	r7, #0
    70aa:	e697      	b.n	6ddc <__aeabi_dadd+0x188>
    70ac:	4650      	mov	r0, sl
    70ae:	000b      	movs	r3, r1
    70b0:	3820      	subs	r0, #32
    70b2:	40c3      	lsrs	r3, r0
    70b4:	4699      	mov	r9, r3
    70b6:	4653      	mov	r3, sl
    70b8:	2b20      	cmp	r3, #32
    70ba:	d100      	bne.n	70be <__aeabi_dadd+0x46a>
    70bc:	e095      	b.n	71ea <__aeabi_dadd+0x596>
    70be:	2340      	movs	r3, #64	; 0x40
    70c0:	4650      	mov	r0, sl
    70c2:	1a1b      	subs	r3, r3, r0
    70c4:	4099      	lsls	r1, r3
    70c6:	430a      	orrs	r2, r1
    70c8:	1e51      	subs	r1, r2, #1
    70ca:	418a      	sbcs	r2, r1
    70cc:	464b      	mov	r3, r9
    70ce:	2100      	movs	r1, #0
    70d0:	431a      	orrs	r2, r3
    70d2:	e69f      	b.n	6e14 <__aeabi_dadd+0x1c0>
    70d4:	2e00      	cmp	r6, #0
    70d6:	d130      	bne.n	713a <__aeabi_dadd+0x4e6>
    70d8:	0026      	movs	r6, r4
    70da:	433e      	orrs	r6, r7
    70dc:	d067      	beq.n	71ae <__aeabi_dadd+0x55a>
    70de:	43db      	mvns	r3, r3
    70e0:	469a      	mov	sl, r3
    70e2:	2b00      	cmp	r3, #0
    70e4:	d01c      	beq.n	7120 <__aeabi_dadd+0x4cc>
    70e6:	4e61      	ldr	r6, [pc, #388]	; (726c <__aeabi_dadd+0x618>)
    70e8:	42b0      	cmp	r0, r6
    70ea:	d060      	beq.n	71ae <__aeabi_dadd+0x55a>
    70ec:	4653      	mov	r3, sl
    70ee:	2b38      	cmp	r3, #56	; 0x38
    70f0:	dd00      	ble.n	70f4 <__aeabi_dadd+0x4a0>
    70f2:	e096      	b.n	7222 <__aeabi_dadd+0x5ce>
    70f4:	2b1f      	cmp	r3, #31
    70f6:	dd00      	ble.n	70fa <__aeabi_dadd+0x4a6>
    70f8:	e09f      	b.n	723a <__aeabi_dadd+0x5e6>
    70fa:	2620      	movs	r6, #32
    70fc:	1af3      	subs	r3, r6, r3
    70fe:	0026      	movs	r6, r4
    7100:	409e      	lsls	r6, r3
    7102:	469c      	mov	ip, r3
    7104:	46b3      	mov	fp, r6
    7106:	4653      	mov	r3, sl
    7108:	003e      	movs	r6, r7
    710a:	40de      	lsrs	r6, r3
    710c:	0033      	movs	r3, r6
    710e:	465e      	mov	r6, fp
    7110:	431e      	orrs	r6, r3
    7112:	4663      	mov	r3, ip
    7114:	409f      	lsls	r7, r3
    7116:	1e7b      	subs	r3, r7, #1
    7118:	419f      	sbcs	r7, r3
    711a:	4653      	mov	r3, sl
    711c:	40dc      	lsrs	r4, r3
    711e:	4337      	orrs	r7, r6
    7120:	18bf      	adds	r7, r7, r2
    7122:	4297      	cmp	r7, r2
    7124:	4192      	sbcs	r2, r2
    7126:	1864      	adds	r4, r4, r1
    7128:	4252      	negs	r2, r2
    712a:	18a4      	adds	r4, r4, r2
    712c:	0006      	movs	r6, r0
    712e:	e678      	b.n	6e22 <__aeabi_dadd+0x1ce>
    7130:	4327      	orrs	r7, r4
    7132:	1e7c      	subs	r4, r7, #1
    7134:	41a7      	sbcs	r7, r4
    7136:	2400      	movs	r4, #0
    7138:	e737      	b.n	6faa <__aeabi_dadd+0x356>
    713a:	4e4c      	ldr	r6, [pc, #304]	; (726c <__aeabi_dadd+0x618>)
    713c:	42b0      	cmp	r0, r6
    713e:	d036      	beq.n	71ae <__aeabi_dadd+0x55a>
    7140:	2680      	movs	r6, #128	; 0x80
    7142:	425b      	negs	r3, r3
    7144:	0436      	lsls	r6, r6, #16
    7146:	469a      	mov	sl, r3
    7148:	4334      	orrs	r4, r6
    714a:	e7cf      	b.n	70ec <__aeabi_dadd+0x498>
    714c:	0018      	movs	r0, r3
    714e:	4310      	orrs	r0, r2
    7150:	d100      	bne.n	7154 <__aeabi_dadd+0x500>
    7152:	e603      	b.n	6d5c <__aeabi_dadd+0x108>
    7154:	1ab8      	subs	r0, r7, r2
    7156:	4684      	mov	ip, r0
    7158:	4567      	cmp	r7, ip
    715a:	41ad      	sbcs	r5, r5
    715c:	1ae0      	subs	r0, r4, r3
    715e:	426d      	negs	r5, r5
    7160:	1b40      	subs	r0, r0, r5
    7162:	0205      	lsls	r5, r0, #8
    7164:	d400      	bmi.n	7168 <__aeabi_dadd+0x514>
    7166:	e62c      	b.n	6dc2 <__aeabi_dadd+0x16e>
    7168:	1bd7      	subs	r7, r2, r7
    716a:	42ba      	cmp	r2, r7
    716c:	4192      	sbcs	r2, r2
    716e:	1b1c      	subs	r4, r3, r4
    7170:	4252      	negs	r2, r2
    7172:	1aa4      	subs	r4, r4, r2
    7174:	46d8      	mov	r8, fp
    7176:	e5f1      	b.n	6d5c <__aeabi_dadd+0x108>
    7178:	0018      	movs	r0, r3
    717a:	4310      	orrs	r0, r2
    717c:	d100      	bne.n	7180 <__aeabi_dadd+0x52c>
    717e:	e763      	b.n	7048 <__aeabi_dadd+0x3f4>
    7180:	08f8      	lsrs	r0, r7, #3
    7182:	0767      	lsls	r7, r4, #29
    7184:	4307      	orrs	r7, r0
    7186:	2080      	movs	r0, #128	; 0x80
    7188:	08e4      	lsrs	r4, r4, #3
    718a:	0300      	lsls	r0, r0, #12
    718c:	4204      	tst	r4, r0
    718e:	d008      	beq.n	71a2 <__aeabi_dadd+0x54e>
    7190:	08dd      	lsrs	r5, r3, #3
    7192:	4205      	tst	r5, r0
    7194:	d105      	bne.n	71a2 <__aeabi_dadd+0x54e>
    7196:	08d2      	lsrs	r2, r2, #3
    7198:	0759      	lsls	r1, r3, #29
    719a:	4311      	orrs	r1, r2
    719c:	000f      	movs	r7, r1
    719e:	002c      	movs	r4, r5
    71a0:	46d8      	mov	r8, fp
    71a2:	0f7b      	lsrs	r3, r7, #29
    71a4:	00e4      	lsls	r4, r4, #3
    71a6:	431c      	orrs	r4, r3
    71a8:	00ff      	lsls	r7, r7, #3
    71aa:	4e30      	ldr	r6, [pc, #192]	; (726c <__aeabi_dadd+0x618>)
    71ac:	e5d6      	b.n	6d5c <__aeabi_dadd+0x108>
    71ae:	000c      	movs	r4, r1
    71b0:	0017      	movs	r7, r2
    71b2:	0006      	movs	r6, r0
    71b4:	e5d2      	b.n	6d5c <__aeabi_dadd+0x108>
    71b6:	2b00      	cmp	r3, #0
    71b8:	d038      	beq.n	722c <__aeabi_dadd+0x5d8>
    71ba:	000b      	movs	r3, r1
    71bc:	4313      	orrs	r3, r2
    71be:	d100      	bne.n	71c2 <__aeabi_dadd+0x56e>
    71c0:	e742      	b.n	7048 <__aeabi_dadd+0x3f4>
    71c2:	08f8      	lsrs	r0, r7, #3
    71c4:	0767      	lsls	r7, r4, #29
    71c6:	4307      	orrs	r7, r0
    71c8:	2080      	movs	r0, #128	; 0x80
    71ca:	08e4      	lsrs	r4, r4, #3
    71cc:	0300      	lsls	r0, r0, #12
    71ce:	4204      	tst	r4, r0
    71d0:	d0e7      	beq.n	71a2 <__aeabi_dadd+0x54e>
    71d2:	08cb      	lsrs	r3, r1, #3
    71d4:	4203      	tst	r3, r0
    71d6:	d1e4      	bne.n	71a2 <__aeabi_dadd+0x54e>
    71d8:	08d2      	lsrs	r2, r2, #3
    71da:	0749      	lsls	r1, r1, #29
    71dc:	4311      	orrs	r1, r2
    71de:	000f      	movs	r7, r1
    71e0:	001c      	movs	r4, r3
    71e2:	e7de      	b.n	71a2 <__aeabi_dadd+0x54e>
    71e4:	2700      	movs	r7, #0
    71e6:	2400      	movs	r4, #0
    71e8:	e5d5      	b.n	6d96 <__aeabi_dadd+0x142>
    71ea:	2100      	movs	r1, #0
    71ec:	e76b      	b.n	70c6 <__aeabi_dadd+0x472>
    71ee:	2500      	movs	r5, #0
    71f0:	2700      	movs	r7, #0
    71f2:	e5f3      	b.n	6ddc <__aeabi_dadd+0x188>
    71f4:	464e      	mov	r6, r9
    71f6:	0025      	movs	r5, r4
    71f8:	3e20      	subs	r6, #32
    71fa:	40f5      	lsrs	r5, r6
    71fc:	464b      	mov	r3, r9
    71fe:	002e      	movs	r6, r5
    7200:	2b20      	cmp	r3, #32
    7202:	d02d      	beq.n	7260 <__aeabi_dadd+0x60c>
    7204:	2540      	movs	r5, #64	; 0x40
    7206:	1aed      	subs	r5, r5, r3
    7208:	40ac      	lsls	r4, r5
    720a:	4327      	orrs	r7, r4
    720c:	1e7c      	subs	r4, r7, #1
    720e:	41a7      	sbcs	r7, r4
    7210:	2400      	movs	r4, #0
    7212:	4337      	orrs	r7, r6
    7214:	e6c9      	b.n	6faa <__aeabi_dadd+0x356>
    7216:	2480      	movs	r4, #128	; 0x80
    7218:	2500      	movs	r5, #0
    721a:	0324      	lsls	r4, r4, #12
    721c:	4e13      	ldr	r6, [pc, #76]	; (726c <__aeabi_dadd+0x618>)
    721e:	2700      	movs	r7, #0
    7220:	e5dc      	b.n	6ddc <__aeabi_dadd+0x188>
    7222:	4327      	orrs	r7, r4
    7224:	1e7c      	subs	r4, r7, #1
    7226:	41a7      	sbcs	r7, r4
    7228:	2400      	movs	r4, #0
    722a:	e779      	b.n	7120 <__aeabi_dadd+0x4cc>
    722c:	000c      	movs	r4, r1
    722e:	0017      	movs	r7, r2
    7230:	4e0e      	ldr	r6, [pc, #56]	; (726c <__aeabi_dadd+0x618>)
    7232:	e593      	b.n	6d5c <__aeabi_dadd+0x108>
    7234:	000c      	movs	r4, r1
    7236:	0017      	movs	r7, r2
    7238:	e590      	b.n	6d5c <__aeabi_dadd+0x108>
    723a:	4656      	mov	r6, sl
    723c:	0023      	movs	r3, r4
    723e:	3e20      	subs	r6, #32
    7240:	40f3      	lsrs	r3, r6
    7242:	4699      	mov	r9, r3
    7244:	4653      	mov	r3, sl
    7246:	2b20      	cmp	r3, #32
    7248:	d00e      	beq.n	7268 <__aeabi_dadd+0x614>
    724a:	2340      	movs	r3, #64	; 0x40
    724c:	4656      	mov	r6, sl
    724e:	1b9b      	subs	r3, r3, r6
    7250:	409c      	lsls	r4, r3
    7252:	4327      	orrs	r7, r4
    7254:	1e7c      	subs	r4, r7, #1
    7256:	41a7      	sbcs	r7, r4
    7258:	464b      	mov	r3, r9
    725a:	2400      	movs	r4, #0
    725c:	431f      	orrs	r7, r3
    725e:	e75f      	b.n	7120 <__aeabi_dadd+0x4cc>
    7260:	2400      	movs	r4, #0
    7262:	e7d2      	b.n	720a <__aeabi_dadd+0x5b6>
    7264:	0017      	movs	r7, r2
    7266:	e5b2      	b.n	6dce <__aeabi_dadd+0x17a>
    7268:	2400      	movs	r4, #0
    726a:	e7f2      	b.n	7252 <__aeabi_dadd+0x5fe>
    726c:	000007ff 	.word	0x000007ff
    7270:	ff7fffff 	.word	0xff7fffff

00007274 <__aeabi_ddiv>:
    7274:	b5f0      	push	{r4, r5, r6, r7, lr}
    7276:	4657      	mov	r7, sl
    7278:	4645      	mov	r5, r8
    727a:	46de      	mov	lr, fp
    727c:	464e      	mov	r6, r9
    727e:	b5e0      	push	{r5, r6, r7, lr}
    7280:	004c      	lsls	r4, r1, #1
    7282:	030e      	lsls	r6, r1, #12
    7284:	b087      	sub	sp, #28
    7286:	4683      	mov	fp, r0
    7288:	4692      	mov	sl, r2
    728a:	001d      	movs	r5, r3
    728c:	4680      	mov	r8, r0
    728e:	0b36      	lsrs	r6, r6, #12
    7290:	0d64      	lsrs	r4, r4, #21
    7292:	0fcf      	lsrs	r7, r1, #31
    7294:	2c00      	cmp	r4, #0
    7296:	d04f      	beq.n	7338 <__aeabi_ddiv+0xc4>
    7298:	4b6f      	ldr	r3, [pc, #444]	; (7458 <__aeabi_ddiv+0x1e4>)
    729a:	429c      	cmp	r4, r3
    729c:	d035      	beq.n	730a <__aeabi_ddiv+0x96>
    729e:	2380      	movs	r3, #128	; 0x80
    72a0:	0f42      	lsrs	r2, r0, #29
    72a2:	041b      	lsls	r3, r3, #16
    72a4:	00f6      	lsls	r6, r6, #3
    72a6:	4313      	orrs	r3, r2
    72a8:	4333      	orrs	r3, r6
    72aa:	4699      	mov	r9, r3
    72ac:	00c3      	lsls	r3, r0, #3
    72ae:	4698      	mov	r8, r3
    72b0:	4b6a      	ldr	r3, [pc, #424]	; (745c <__aeabi_ddiv+0x1e8>)
    72b2:	2600      	movs	r6, #0
    72b4:	469c      	mov	ip, r3
    72b6:	2300      	movs	r3, #0
    72b8:	4464      	add	r4, ip
    72ba:	9303      	str	r3, [sp, #12]
    72bc:	032b      	lsls	r3, r5, #12
    72be:	0b1b      	lsrs	r3, r3, #12
    72c0:	469b      	mov	fp, r3
    72c2:	006b      	lsls	r3, r5, #1
    72c4:	0fed      	lsrs	r5, r5, #31
    72c6:	4650      	mov	r0, sl
    72c8:	0d5b      	lsrs	r3, r3, #21
    72ca:	9501      	str	r5, [sp, #4]
    72cc:	d05e      	beq.n	738c <__aeabi_ddiv+0x118>
    72ce:	4a62      	ldr	r2, [pc, #392]	; (7458 <__aeabi_ddiv+0x1e4>)
    72d0:	4293      	cmp	r3, r2
    72d2:	d053      	beq.n	737c <__aeabi_ddiv+0x108>
    72d4:	465a      	mov	r2, fp
    72d6:	00d1      	lsls	r1, r2, #3
    72d8:	2280      	movs	r2, #128	; 0x80
    72da:	0f40      	lsrs	r0, r0, #29
    72dc:	0412      	lsls	r2, r2, #16
    72de:	4302      	orrs	r2, r0
    72e0:	430a      	orrs	r2, r1
    72e2:	4693      	mov	fp, r2
    72e4:	4652      	mov	r2, sl
    72e6:	00d1      	lsls	r1, r2, #3
    72e8:	4a5c      	ldr	r2, [pc, #368]	; (745c <__aeabi_ddiv+0x1e8>)
    72ea:	4694      	mov	ip, r2
    72ec:	2200      	movs	r2, #0
    72ee:	4463      	add	r3, ip
    72f0:	0038      	movs	r0, r7
    72f2:	4068      	eors	r0, r5
    72f4:	4684      	mov	ip, r0
    72f6:	9002      	str	r0, [sp, #8]
    72f8:	1ae4      	subs	r4, r4, r3
    72fa:	4316      	orrs	r6, r2
    72fc:	2e0f      	cmp	r6, #15
    72fe:	d900      	bls.n	7302 <__aeabi_ddiv+0x8e>
    7300:	e0b4      	b.n	746c <__aeabi_ddiv+0x1f8>
    7302:	4b57      	ldr	r3, [pc, #348]	; (7460 <__aeabi_ddiv+0x1ec>)
    7304:	00b6      	lsls	r6, r6, #2
    7306:	599b      	ldr	r3, [r3, r6]
    7308:	469f      	mov	pc, r3
    730a:	0003      	movs	r3, r0
    730c:	4333      	orrs	r3, r6
    730e:	4699      	mov	r9, r3
    7310:	d16c      	bne.n	73ec <__aeabi_ddiv+0x178>
    7312:	2300      	movs	r3, #0
    7314:	4698      	mov	r8, r3
    7316:	3302      	adds	r3, #2
    7318:	2608      	movs	r6, #8
    731a:	9303      	str	r3, [sp, #12]
    731c:	e7ce      	b.n	72bc <__aeabi_ddiv+0x48>
    731e:	46cb      	mov	fp, r9
    7320:	4641      	mov	r1, r8
    7322:	9a03      	ldr	r2, [sp, #12]
    7324:	9701      	str	r7, [sp, #4]
    7326:	2a02      	cmp	r2, #2
    7328:	d165      	bne.n	73f6 <__aeabi_ddiv+0x182>
    732a:	9b01      	ldr	r3, [sp, #4]
    732c:	4c4a      	ldr	r4, [pc, #296]	; (7458 <__aeabi_ddiv+0x1e4>)
    732e:	469c      	mov	ip, r3
    7330:	2300      	movs	r3, #0
    7332:	2200      	movs	r2, #0
    7334:	4698      	mov	r8, r3
    7336:	e06b      	b.n	7410 <__aeabi_ddiv+0x19c>
    7338:	0003      	movs	r3, r0
    733a:	4333      	orrs	r3, r6
    733c:	4699      	mov	r9, r3
    733e:	d04e      	beq.n	73de <__aeabi_ddiv+0x16a>
    7340:	2e00      	cmp	r6, #0
    7342:	d100      	bne.n	7346 <__aeabi_ddiv+0xd2>
    7344:	e1bc      	b.n	76c0 <__aeabi_ddiv+0x44c>
    7346:	0030      	movs	r0, r6
    7348:	f001 fb08 	bl	895c <__clzsi2>
    734c:	0003      	movs	r3, r0
    734e:	3b0b      	subs	r3, #11
    7350:	2b1c      	cmp	r3, #28
    7352:	dd00      	ble.n	7356 <__aeabi_ddiv+0xe2>
    7354:	e1ac      	b.n	76b0 <__aeabi_ddiv+0x43c>
    7356:	221d      	movs	r2, #29
    7358:	1ad3      	subs	r3, r2, r3
    735a:	465a      	mov	r2, fp
    735c:	0001      	movs	r1, r0
    735e:	40da      	lsrs	r2, r3
    7360:	3908      	subs	r1, #8
    7362:	408e      	lsls	r6, r1
    7364:	0013      	movs	r3, r2
    7366:	4333      	orrs	r3, r6
    7368:	4699      	mov	r9, r3
    736a:	465b      	mov	r3, fp
    736c:	408b      	lsls	r3, r1
    736e:	4698      	mov	r8, r3
    7370:	2300      	movs	r3, #0
    7372:	4c3c      	ldr	r4, [pc, #240]	; (7464 <__aeabi_ddiv+0x1f0>)
    7374:	2600      	movs	r6, #0
    7376:	1a24      	subs	r4, r4, r0
    7378:	9303      	str	r3, [sp, #12]
    737a:	e79f      	b.n	72bc <__aeabi_ddiv+0x48>
    737c:	4651      	mov	r1, sl
    737e:	465a      	mov	r2, fp
    7380:	4311      	orrs	r1, r2
    7382:	d129      	bne.n	73d8 <__aeabi_ddiv+0x164>
    7384:	2200      	movs	r2, #0
    7386:	4693      	mov	fp, r2
    7388:	3202      	adds	r2, #2
    738a:	e7b1      	b.n	72f0 <__aeabi_ddiv+0x7c>
    738c:	4659      	mov	r1, fp
    738e:	4301      	orrs	r1, r0
    7390:	d01e      	beq.n	73d0 <__aeabi_ddiv+0x15c>
    7392:	465b      	mov	r3, fp
    7394:	2b00      	cmp	r3, #0
    7396:	d100      	bne.n	739a <__aeabi_ddiv+0x126>
    7398:	e19e      	b.n	76d8 <__aeabi_ddiv+0x464>
    739a:	4658      	mov	r0, fp
    739c:	f001 fade 	bl	895c <__clzsi2>
    73a0:	0003      	movs	r3, r0
    73a2:	3b0b      	subs	r3, #11
    73a4:	2b1c      	cmp	r3, #28
    73a6:	dd00      	ble.n	73aa <__aeabi_ddiv+0x136>
    73a8:	e18f      	b.n	76ca <__aeabi_ddiv+0x456>
    73aa:	0002      	movs	r2, r0
    73ac:	4659      	mov	r1, fp
    73ae:	3a08      	subs	r2, #8
    73b0:	4091      	lsls	r1, r2
    73b2:	468b      	mov	fp, r1
    73b4:	211d      	movs	r1, #29
    73b6:	1acb      	subs	r3, r1, r3
    73b8:	4651      	mov	r1, sl
    73ba:	40d9      	lsrs	r1, r3
    73bc:	000b      	movs	r3, r1
    73be:	4659      	mov	r1, fp
    73c0:	430b      	orrs	r3, r1
    73c2:	4651      	mov	r1, sl
    73c4:	469b      	mov	fp, r3
    73c6:	4091      	lsls	r1, r2
    73c8:	4b26      	ldr	r3, [pc, #152]	; (7464 <__aeabi_ddiv+0x1f0>)
    73ca:	2200      	movs	r2, #0
    73cc:	1a1b      	subs	r3, r3, r0
    73ce:	e78f      	b.n	72f0 <__aeabi_ddiv+0x7c>
    73d0:	2300      	movs	r3, #0
    73d2:	2201      	movs	r2, #1
    73d4:	469b      	mov	fp, r3
    73d6:	e78b      	b.n	72f0 <__aeabi_ddiv+0x7c>
    73d8:	4651      	mov	r1, sl
    73da:	2203      	movs	r2, #3
    73dc:	e788      	b.n	72f0 <__aeabi_ddiv+0x7c>
    73de:	2300      	movs	r3, #0
    73e0:	4698      	mov	r8, r3
    73e2:	3301      	adds	r3, #1
    73e4:	2604      	movs	r6, #4
    73e6:	2400      	movs	r4, #0
    73e8:	9303      	str	r3, [sp, #12]
    73ea:	e767      	b.n	72bc <__aeabi_ddiv+0x48>
    73ec:	2303      	movs	r3, #3
    73ee:	46b1      	mov	r9, r6
    73f0:	9303      	str	r3, [sp, #12]
    73f2:	260c      	movs	r6, #12
    73f4:	e762      	b.n	72bc <__aeabi_ddiv+0x48>
    73f6:	2a03      	cmp	r2, #3
    73f8:	d100      	bne.n	73fc <__aeabi_ddiv+0x188>
    73fa:	e25c      	b.n	78b6 <__aeabi_ddiv+0x642>
    73fc:	9b01      	ldr	r3, [sp, #4]
    73fe:	2a01      	cmp	r2, #1
    7400:	d000      	beq.n	7404 <__aeabi_ddiv+0x190>
    7402:	e1e4      	b.n	77ce <__aeabi_ddiv+0x55a>
    7404:	4013      	ands	r3, r2
    7406:	469c      	mov	ip, r3
    7408:	2300      	movs	r3, #0
    740a:	2400      	movs	r4, #0
    740c:	2200      	movs	r2, #0
    740e:	4698      	mov	r8, r3
    7410:	2100      	movs	r1, #0
    7412:	0312      	lsls	r2, r2, #12
    7414:	0b13      	lsrs	r3, r2, #12
    7416:	0d0a      	lsrs	r2, r1, #20
    7418:	0512      	lsls	r2, r2, #20
    741a:	431a      	orrs	r2, r3
    741c:	0523      	lsls	r3, r4, #20
    741e:	4c12      	ldr	r4, [pc, #72]	; (7468 <__aeabi_ddiv+0x1f4>)
    7420:	4640      	mov	r0, r8
    7422:	4022      	ands	r2, r4
    7424:	4313      	orrs	r3, r2
    7426:	4662      	mov	r2, ip
    7428:	005b      	lsls	r3, r3, #1
    742a:	07d2      	lsls	r2, r2, #31
    742c:	085b      	lsrs	r3, r3, #1
    742e:	4313      	orrs	r3, r2
    7430:	0019      	movs	r1, r3
    7432:	b007      	add	sp, #28
    7434:	bc3c      	pop	{r2, r3, r4, r5}
    7436:	4690      	mov	r8, r2
    7438:	4699      	mov	r9, r3
    743a:	46a2      	mov	sl, r4
    743c:	46ab      	mov	fp, r5
    743e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7440:	2300      	movs	r3, #0
    7442:	2280      	movs	r2, #128	; 0x80
    7444:	469c      	mov	ip, r3
    7446:	0312      	lsls	r2, r2, #12
    7448:	4698      	mov	r8, r3
    744a:	4c03      	ldr	r4, [pc, #12]	; (7458 <__aeabi_ddiv+0x1e4>)
    744c:	e7e0      	b.n	7410 <__aeabi_ddiv+0x19c>
    744e:	2300      	movs	r3, #0
    7450:	4c01      	ldr	r4, [pc, #4]	; (7458 <__aeabi_ddiv+0x1e4>)
    7452:	2200      	movs	r2, #0
    7454:	4698      	mov	r8, r3
    7456:	e7db      	b.n	7410 <__aeabi_ddiv+0x19c>
    7458:	000007ff 	.word	0x000007ff
    745c:	fffffc01 	.word	0xfffffc01
    7460:	00008e20 	.word	0x00008e20
    7464:	fffffc0d 	.word	0xfffffc0d
    7468:	800fffff 	.word	0x800fffff
    746c:	45d9      	cmp	r9, fp
    746e:	d900      	bls.n	7472 <__aeabi_ddiv+0x1fe>
    7470:	e139      	b.n	76e6 <__aeabi_ddiv+0x472>
    7472:	d100      	bne.n	7476 <__aeabi_ddiv+0x202>
    7474:	e134      	b.n	76e0 <__aeabi_ddiv+0x46c>
    7476:	2300      	movs	r3, #0
    7478:	4646      	mov	r6, r8
    747a:	464d      	mov	r5, r9
    747c:	469a      	mov	sl, r3
    747e:	3c01      	subs	r4, #1
    7480:	465b      	mov	r3, fp
    7482:	0e0a      	lsrs	r2, r1, #24
    7484:	021b      	lsls	r3, r3, #8
    7486:	431a      	orrs	r2, r3
    7488:	020b      	lsls	r3, r1, #8
    748a:	0c17      	lsrs	r7, r2, #16
    748c:	9303      	str	r3, [sp, #12]
    748e:	0413      	lsls	r3, r2, #16
    7490:	0c1b      	lsrs	r3, r3, #16
    7492:	0039      	movs	r1, r7
    7494:	0028      	movs	r0, r5
    7496:	4690      	mov	r8, r2
    7498:	9301      	str	r3, [sp, #4]
    749a:	f7fe fcd1 	bl	5e40 <__udivsi3>
    749e:	0002      	movs	r2, r0
    74a0:	9b01      	ldr	r3, [sp, #4]
    74a2:	4683      	mov	fp, r0
    74a4:	435a      	muls	r2, r3
    74a6:	0028      	movs	r0, r5
    74a8:	0039      	movs	r1, r7
    74aa:	4691      	mov	r9, r2
    74ac:	f7fe fd4e 	bl	5f4c <__aeabi_uidivmod>
    74b0:	0c35      	lsrs	r5, r6, #16
    74b2:	0409      	lsls	r1, r1, #16
    74b4:	430d      	orrs	r5, r1
    74b6:	45a9      	cmp	r9, r5
    74b8:	d90d      	bls.n	74d6 <__aeabi_ddiv+0x262>
    74ba:	465b      	mov	r3, fp
    74bc:	4445      	add	r5, r8
    74be:	3b01      	subs	r3, #1
    74c0:	45a8      	cmp	r8, r5
    74c2:	d900      	bls.n	74c6 <__aeabi_ddiv+0x252>
    74c4:	e13a      	b.n	773c <__aeabi_ddiv+0x4c8>
    74c6:	45a9      	cmp	r9, r5
    74c8:	d800      	bhi.n	74cc <__aeabi_ddiv+0x258>
    74ca:	e137      	b.n	773c <__aeabi_ddiv+0x4c8>
    74cc:	2302      	movs	r3, #2
    74ce:	425b      	negs	r3, r3
    74d0:	469c      	mov	ip, r3
    74d2:	4445      	add	r5, r8
    74d4:	44e3      	add	fp, ip
    74d6:	464b      	mov	r3, r9
    74d8:	1aeb      	subs	r3, r5, r3
    74da:	0039      	movs	r1, r7
    74dc:	0018      	movs	r0, r3
    74de:	9304      	str	r3, [sp, #16]
    74e0:	f7fe fcae 	bl	5e40 <__udivsi3>
    74e4:	9b01      	ldr	r3, [sp, #4]
    74e6:	0005      	movs	r5, r0
    74e8:	4343      	muls	r3, r0
    74ea:	0039      	movs	r1, r7
    74ec:	9804      	ldr	r0, [sp, #16]
    74ee:	4699      	mov	r9, r3
    74f0:	f7fe fd2c 	bl	5f4c <__aeabi_uidivmod>
    74f4:	0433      	lsls	r3, r6, #16
    74f6:	0409      	lsls	r1, r1, #16
    74f8:	0c1b      	lsrs	r3, r3, #16
    74fa:	430b      	orrs	r3, r1
    74fc:	4599      	cmp	r9, r3
    74fe:	d909      	bls.n	7514 <__aeabi_ddiv+0x2a0>
    7500:	4443      	add	r3, r8
    7502:	1e6a      	subs	r2, r5, #1
    7504:	4598      	cmp	r8, r3
    7506:	d900      	bls.n	750a <__aeabi_ddiv+0x296>
    7508:	e11a      	b.n	7740 <__aeabi_ddiv+0x4cc>
    750a:	4599      	cmp	r9, r3
    750c:	d800      	bhi.n	7510 <__aeabi_ddiv+0x29c>
    750e:	e117      	b.n	7740 <__aeabi_ddiv+0x4cc>
    7510:	3d02      	subs	r5, #2
    7512:	4443      	add	r3, r8
    7514:	464a      	mov	r2, r9
    7516:	1a9b      	subs	r3, r3, r2
    7518:	465a      	mov	r2, fp
    751a:	0412      	lsls	r2, r2, #16
    751c:	432a      	orrs	r2, r5
    751e:	9903      	ldr	r1, [sp, #12]
    7520:	4693      	mov	fp, r2
    7522:	0c10      	lsrs	r0, r2, #16
    7524:	0c0a      	lsrs	r2, r1, #16
    7526:	4691      	mov	r9, r2
    7528:	0409      	lsls	r1, r1, #16
    752a:	465a      	mov	r2, fp
    752c:	0c09      	lsrs	r1, r1, #16
    752e:	464e      	mov	r6, r9
    7530:	000d      	movs	r5, r1
    7532:	0412      	lsls	r2, r2, #16
    7534:	0c12      	lsrs	r2, r2, #16
    7536:	4345      	muls	r5, r0
    7538:	9105      	str	r1, [sp, #20]
    753a:	4351      	muls	r1, r2
    753c:	4372      	muls	r2, r6
    753e:	4370      	muls	r0, r6
    7540:	1952      	adds	r2, r2, r5
    7542:	0c0e      	lsrs	r6, r1, #16
    7544:	18b2      	adds	r2, r6, r2
    7546:	4295      	cmp	r5, r2
    7548:	d903      	bls.n	7552 <__aeabi_ddiv+0x2de>
    754a:	2580      	movs	r5, #128	; 0x80
    754c:	026d      	lsls	r5, r5, #9
    754e:	46ac      	mov	ip, r5
    7550:	4460      	add	r0, ip
    7552:	0c15      	lsrs	r5, r2, #16
    7554:	0409      	lsls	r1, r1, #16
    7556:	0412      	lsls	r2, r2, #16
    7558:	0c09      	lsrs	r1, r1, #16
    755a:	1828      	adds	r0, r5, r0
    755c:	1852      	adds	r2, r2, r1
    755e:	4283      	cmp	r3, r0
    7560:	d200      	bcs.n	7564 <__aeabi_ddiv+0x2f0>
    7562:	e0ce      	b.n	7702 <__aeabi_ddiv+0x48e>
    7564:	d100      	bne.n	7568 <__aeabi_ddiv+0x2f4>
    7566:	e0c8      	b.n	76fa <__aeabi_ddiv+0x486>
    7568:	1a1d      	subs	r5, r3, r0
    756a:	4653      	mov	r3, sl
    756c:	1a9e      	subs	r6, r3, r2
    756e:	45b2      	cmp	sl, r6
    7570:	4192      	sbcs	r2, r2
    7572:	4252      	negs	r2, r2
    7574:	1aab      	subs	r3, r5, r2
    7576:	469a      	mov	sl, r3
    7578:	4598      	cmp	r8, r3
    757a:	d100      	bne.n	757e <__aeabi_ddiv+0x30a>
    757c:	e117      	b.n	77ae <__aeabi_ddiv+0x53a>
    757e:	0039      	movs	r1, r7
    7580:	0018      	movs	r0, r3
    7582:	f7fe fc5d 	bl	5e40 <__udivsi3>
    7586:	9b01      	ldr	r3, [sp, #4]
    7588:	0005      	movs	r5, r0
    758a:	4343      	muls	r3, r0
    758c:	0039      	movs	r1, r7
    758e:	4650      	mov	r0, sl
    7590:	9304      	str	r3, [sp, #16]
    7592:	f7fe fcdb 	bl	5f4c <__aeabi_uidivmod>
    7596:	9804      	ldr	r0, [sp, #16]
    7598:	040b      	lsls	r3, r1, #16
    759a:	0c31      	lsrs	r1, r6, #16
    759c:	4319      	orrs	r1, r3
    759e:	4288      	cmp	r0, r1
    75a0:	d909      	bls.n	75b6 <__aeabi_ddiv+0x342>
    75a2:	4441      	add	r1, r8
    75a4:	1e6b      	subs	r3, r5, #1
    75a6:	4588      	cmp	r8, r1
    75a8:	d900      	bls.n	75ac <__aeabi_ddiv+0x338>
    75aa:	e107      	b.n	77bc <__aeabi_ddiv+0x548>
    75ac:	4288      	cmp	r0, r1
    75ae:	d800      	bhi.n	75b2 <__aeabi_ddiv+0x33e>
    75b0:	e104      	b.n	77bc <__aeabi_ddiv+0x548>
    75b2:	3d02      	subs	r5, #2
    75b4:	4441      	add	r1, r8
    75b6:	9b04      	ldr	r3, [sp, #16]
    75b8:	1acb      	subs	r3, r1, r3
    75ba:	0018      	movs	r0, r3
    75bc:	0039      	movs	r1, r7
    75be:	9304      	str	r3, [sp, #16]
    75c0:	f7fe fc3e 	bl	5e40 <__udivsi3>
    75c4:	9b01      	ldr	r3, [sp, #4]
    75c6:	4682      	mov	sl, r0
    75c8:	4343      	muls	r3, r0
    75ca:	0039      	movs	r1, r7
    75cc:	9804      	ldr	r0, [sp, #16]
    75ce:	9301      	str	r3, [sp, #4]
    75d0:	f7fe fcbc 	bl	5f4c <__aeabi_uidivmod>
    75d4:	9801      	ldr	r0, [sp, #4]
    75d6:	040b      	lsls	r3, r1, #16
    75d8:	0431      	lsls	r1, r6, #16
    75da:	0c09      	lsrs	r1, r1, #16
    75dc:	4319      	orrs	r1, r3
    75de:	4288      	cmp	r0, r1
    75e0:	d90d      	bls.n	75fe <__aeabi_ddiv+0x38a>
    75e2:	4653      	mov	r3, sl
    75e4:	4441      	add	r1, r8
    75e6:	3b01      	subs	r3, #1
    75e8:	4588      	cmp	r8, r1
    75ea:	d900      	bls.n	75ee <__aeabi_ddiv+0x37a>
    75ec:	e0e8      	b.n	77c0 <__aeabi_ddiv+0x54c>
    75ee:	4288      	cmp	r0, r1
    75f0:	d800      	bhi.n	75f4 <__aeabi_ddiv+0x380>
    75f2:	e0e5      	b.n	77c0 <__aeabi_ddiv+0x54c>
    75f4:	2302      	movs	r3, #2
    75f6:	425b      	negs	r3, r3
    75f8:	469c      	mov	ip, r3
    75fa:	4441      	add	r1, r8
    75fc:	44e2      	add	sl, ip
    75fe:	9b01      	ldr	r3, [sp, #4]
    7600:	042d      	lsls	r5, r5, #16
    7602:	1ace      	subs	r6, r1, r3
    7604:	4651      	mov	r1, sl
    7606:	4329      	orrs	r1, r5
    7608:	9d05      	ldr	r5, [sp, #20]
    760a:	464f      	mov	r7, r9
    760c:	002a      	movs	r2, r5
    760e:	040b      	lsls	r3, r1, #16
    7610:	0c08      	lsrs	r0, r1, #16
    7612:	0c1b      	lsrs	r3, r3, #16
    7614:	435a      	muls	r2, r3
    7616:	4345      	muls	r5, r0
    7618:	437b      	muls	r3, r7
    761a:	4378      	muls	r0, r7
    761c:	195b      	adds	r3, r3, r5
    761e:	0c17      	lsrs	r7, r2, #16
    7620:	18fb      	adds	r3, r7, r3
    7622:	429d      	cmp	r5, r3
    7624:	d903      	bls.n	762e <__aeabi_ddiv+0x3ba>
    7626:	2580      	movs	r5, #128	; 0x80
    7628:	026d      	lsls	r5, r5, #9
    762a:	46ac      	mov	ip, r5
    762c:	4460      	add	r0, ip
    762e:	0c1d      	lsrs	r5, r3, #16
    7630:	0412      	lsls	r2, r2, #16
    7632:	041b      	lsls	r3, r3, #16
    7634:	0c12      	lsrs	r2, r2, #16
    7636:	1828      	adds	r0, r5, r0
    7638:	189b      	adds	r3, r3, r2
    763a:	4286      	cmp	r6, r0
    763c:	d200      	bcs.n	7640 <__aeabi_ddiv+0x3cc>
    763e:	e093      	b.n	7768 <__aeabi_ddiv+0x4f4>
    7640:	d100      	bne.n	7644 <__aeabi_ddiv+0x3d0>
    7642:	e08e      	b.n	7762 <__aeabi_ddiv+0x4ee>
    7644:	2301      	movs	r3, #1
    7646:	4319      	orrs	r1, r3
    7648:	4ba0      	ldr	r3, [pc, #640]	; (78cc <__aeabi_ddiv+0x658>)
    764a:	18e3      	adds	r3, r4, r3
    764c:	2b00      	cmp	r3, #0
    764e:	dc00      	bgt.n	7652 <__aeabi_ddiv+0x3de>
    7650:	e099      	b.n	7786 <__aeabi_ddiv+0x512>
    7652:	074a      	lsls	r2, r1, #29
    7654:	d000      	beq.n	7658 <__aeabi_ddiv+0x3e4>
    7656:	e09e      	b.n	7796 <__aeabi_ddiv+0x522>
    7658:	465a      	mov	r2, fp
    765a:	01d2      	lsls	r2, r2, #7
    765c:	d506      	bpl.n	766c <__aeabi_ddiv+0x3f8>
    765e:	465a      	mov	r2, fp
    7660:	4b9b      	ldr	r3, [pc, #620]	; (78d0 <__aeabi_ddiv+0x65c>)
    7662:	401a      	ands	r2, r3
    7664:	2380      	movs	r3, #128	; 0x80
    7666:	4693      	mov	fp, r2
    7668:	00db      	lsls	r3, r3, #3
    766a:	18e3      	adds	r3, r4, r3
    766c:	4a99      	ldr	r2, [pc, #612]	; (78d4 <__aeabi_ddiv+0x660>)
    766e:	4293      	cmp	r3, r2
    7670:	dd68      	ble.n	7744 <__aeabi_ddiv+0x4d0>
    7672:	2301      	movs	r3, #1
    7674:	9a02      	ldr	r2, [sp, #8]
    7676:	4c98      	ldr	r4, [pc, #608]	; (78d8 <__aeabi_ddiv+0x664>)
    7678:	401a      	ands	r2, r3
    767a:	2300      	movs	r3, #0
    767c:	4694      	mov	ip, r2
    767e:	4698      	mov	r8, r3
    7680:	2200      	movs	r2, #0
    7682:	e6c5      	b.n	7410 <__aeabi_ddiv+0x19c>
    7684:	2280      	movs	r2, #128	; 0x80
    7686:	464b      	mov	r3, r9
    7688:	0312      	lsls	r2, r2, #12
    768a:	4213      	tst	r3, r2
    768c:	d00a      	beq.n	76a4 <__aeabi_ddiv+0x430>
    768e:	465b      	mov	r3, fp
    7690:	4213      	tst	r3, r2
    7692:	d106      	bne.n	76a2 <__aeabi_ddiv+0x42e>
    7694:	431a      	orrs	r2, r3
    7696:	0312      	lsls	r2, r2, #12
    7698:	0b12      	lsrs	r2, r2, #12
    769a:	46ac      	mov	ip, r5
    769c:	4688      	mov	r8, r1
    769e:	4c8e      	ldr	r4, [pc, #568]	; (78d8 <__aeabi_ddiv+0x664>)
    76a0:	e6b6      	b.n	7410 <__aeabi_ddiv+0x19c>
    76a2:	464b      	mov	r3, r9
    76a4:	431a      	orrs	r2, r3
    76a6:	0312      	lsls	r2, r2, #12
    76a8:	0b12      	lsrs	r2, r2, #12
    76aa:	46bc      	mov	ip, r7
    76ac:	4c8a      	ldr	r4, [pc, #552]	; (78d8 <__aeabi_ddiv+0x664>)
    76ae:	e6af      	b.n	7410 <__aeabi_ddiv+0x19c>
    76b0:	0003      	movs	r3, r0
    76b2:	465a      	mov	r2, fp
    76b4:	3b28      	subs	r3, #40	; 0x28
    76b6:	409a      	lsls	r2, r3
    76b8:	2300      	movs	r3, #0
    76ba:	4691      	mov	r9, r2
    76bc:	4698      	mov	r8, r3
    76be:	e657      	b.n	7370 <__aeabi_ddiv+0xfc>
    76c0:	4658      	mov	r0, fp
    76c2:	f001 f94b 	bl	895c <__clzsi2>
    76c6:	3020      	adds	r0, #32
    76c8:	e640      	b.n	734c <__aeabi_ddiv+0xd8>
    76ca:	0003      	movs	r3, r0
    76cc:	4652      	mov	r2, sl
    76ce:	3b28      	subs	r3, #40	; 0x28
    76d0:	409a      	lsls	r2, r3
    76d2:	2100      	movs	r1, #0
    76d4:	4693      	mov	fp, r2
    76d6:	e677      	b.n	73c8 <__aeabi_ddiv+0x154>
    76d8:	f001 f940 	bl	895c <__clzsi2>
    76dc:	3020      	adds	r0, #32
    76de:	e65f      	b.n	73a0 <__aeabi_ddiv+0x12c>
    76e0:	4588      	cmp	r8, r1
    76e2:	d200      	bcs.n	76e6 <__aeabi_ddiv+0x472>
    76e4:	e6c7      	b.n	7476 <__aeabi_ddiv+0x202>
    76e6:	464b      	mov	r3, r9
    76e8:	07de      	lsls	r6, r3, #31
    76ea:	085d      	lsrs	r5, r3, #1
    76ec:	4643      	mov	r3, r8
    76ee:	085b      	lsrs	r3, r3, #1
    76f0:	431e      	orrs	r6, r3
    76f2:	4643      	mov	r3, r8
    76f4:	07db      	lsls	r3, r3, #31
    76f6:	469a      	mov	sl, r3
    76f8:	e6c2      	b.n	7480 <__aeabi_ddiv+0x20c>
    76fa:	2500      	movs	r5, #0
    76fc:	4592      	cmp	sl, r2
    76fe:	d300      	bcc.n	7702 <__aeabi_ddiv+0x48e>
    7700:	e733      	b.n	756a <__aeabi_ddiv+0x2f6>
    7702:	9e03      	ldr	r6, [sp, #12]
    7704:	4659      	mov	r1, fp
    7706:	46b4      	mov	ip, r6
    7708:	44e2      	add	sl, ip
    770a:	45b2      	cmp	sl, r6
    770c:	41ad      	sbcs	r5, r5
    770e:	426d      	negs	r5, r5
    7710:	4445      	add	r5, r8
    7712:	18eb      	adds	r3, r5, r3
    7714:	3901      	subs	r1, #1
    7716:	4598      	cmp	r8, r3
    7718:	d207      	bcs.n	772a <__aeabi_ddiv+0x4b6>
    771a:	4298      	cmp	r0, r3
    771c:	d900      	bls.n	7720 <__aeabi_ddiv+0x4ac>
    771e:	e07f      	b.n	7820 <__aeabi_ddiv+0x5ac>
    7720:	d100      	bne.n	7724 <__aeabi_ddiv+0x4b0>
    7722:	e0bc      	b.n	789e <__aeabi_ddiv+0x62a>
    7724:	1a1d      	subs	r5, r3, r0
    7726:	468b      	mov	fp, r1
    7728:	e71f      	b.n	756a <__aeabi_ddiv+0x2f6>
    772a:	4598      	cmp	r8, r3
    772c:	d1fa      	bne.n	7724 <__aeabi_ddiv+0x4b0>
    772e:	9d03      	ldr	r5, [sp, #12]
    7730:	4555      	cmp	r5, sl
    7732:	d9f2      	bls.n	771a <__aeabi_ddiv+0x4a6>
    7734:	4643      	mov	r3, r8
    7736:	468b      	mov	fp, r1
    7738:	1a1d      	subs	r5, r3, r0
    773a:	e716      	b.n	756a <__aeabi_ddiv+0x2f6>
    773c:	469b      	mov	fp, r3
    773e:	e6ca      	b.n	74d6 <__aeabi_ddiv+0x262>
    7740:	0015      	movs	r5, r2
    7742:	e6e7      	b.n	7514 <__aeabi_ddiv+0x2a0>
    7744:	465a      	mov	r2, fp
    7746:	08c9      	lsrs	r1, r1, #3
    7748:	0752      	lsls	r2, r2, #29
    774a:	430a      	orrs	r2, r1
    774c:	055b      	lsls	r3, r3, #21
    774e:	4690      	mov	r8, r2
    7750:	0d5c      	lsrs	r4, r3, #21
    7752:	465a      	mov	r2, fp
    7754:	2301      	movs	r3, #1
    7756:	9902      	ldr	r1, [sp, #8]
    7758:	0252      	lsls	r2, r2, #9
    775a:	4019      	ands	r1, r3
    775c:	0b12      	lsrs	r2, r2, #12
    775e:	468c      	mov	ip, r1
    7760:	e656      	b.n	7410 <__aeabi_ddiv+0x19c>
    7762:	2b00      	cmp	r3, #0
    7764:	d100      	bne.n	7768 <__aeabi_ddiv+0x4f4>
    7766:	e76f      	b.n	7648 <__aeabi_ddiv+0x3d4>
    7768:	4446      	add	r6, r8
    776a:	1e4a      	subs	r2, r1, #1
    776c:	45b0      	cmp	r8, r6
    776e:	d929      	bls.n	77c4 <__aeabi_ddiv+0x550>
    7770:	0011      	movs	r1, r2
    7772:	4286      	cmp	r6, r0
    7774:	d000      	beq.n	7778 <__aeabi_ddiv+0x504>
    7776:	e765      	b.n	7644 <__aeabi_ddiv+0x3d0>
    7778:	9a03      	ldr	r2, [sp, #12]
    777a:	4293      	cmp	r3, r2
    777c:	d000      	beq.n	7780 <__aeabi_ddiv+0x50c>
    777e:	e761      	b.n	7644 <__aeabi_ddiv+0x3d0>
    7780:	e762      	b.n	7648 <__aeabi_ddiv+0x3d4>
    7782:	2101      	movs	r1, #1
    7784:	4249      	negs	r1, r1
    7786:	2001      	movs	r0, #1
    7788:	1ac2      	subs	r2, r0, r3
    778a:	2a38      	cmp	r2, #56	; 0x38
    778c:	dd21      	ble.n	77d2 <__aeabi_ddiv+0x55e>
    778e:	9b02      	ldr	r3, [sp, #8]
    7790:	4003      	ands	r3, r0
    7792:	469c      	mov	ip, r3
    7794:	e638      	b.n	7408 <__aeabi_ddiv+0x194>
    7796:	220f      	movs	r2, #15
    7798:	400a      	ands	r2, r1
    779a:	2a04      	cmp	r2, #4
    779c:	d100      	bne.n	77a0 <__aeabi_ddiv+0x52c>
    779e:	e75b      	b.n	7658 <__aeabi_ddiv+0x3e4>
    77a0:	000a      	movs	r2, r1
    77a2:	1d11      	adds	r1, r2, #4
    77a4:	4291      	cmp	r1, r2
    77a6:	4192      	sbcs	r2, r2
    77a8:	4252      	negs	r2, r2
    77aa:	4493      	add	fp, r2
    77ac:	e754      	b.n	7658 <__aeabi_ddiv+0x3e4>
    77ae:	4b47      	ldr	r3, [pc, #284]	; (78cc <__aeabi_ddiv+0x658>)
    77b0:	18e3      	adds	r3, r4, r3
    77b2:	2b00      	cmp	r3, #0
    77b4:	dde5      	ble.n	7782 <__aeabi_ddiv+0x50e>
    77b6:	2201      	movs	r2, #1
    77b8:	4252      	negs	r2, r2
    77ba:	e7f2      	b.n	77a2 <__aeabi_ddiv+0x52e>
    77bc:	001d      	movs	r5, r3
    77be:	e6fa      	b.n	75b6 <__aeabi_ddiv+0x342>
    77c0:	469a      	mov	sl, r3
    77c2:	e71c      	b.n	75fe <__aeabi_ddiv+0x38a>
    77c4:	42b0      	cmp	r0, r6
    77c6:	d839      	bhi.n	783c <__aeabi_ddiv+0x5c8>
    77c8:	d06e      	beq.n	78a8 <__aeabi_ddiv+0x634>
    77ca:	0011      	movs	r1, r2
    77cc:	e73a      	b.n	7644 <__aeabi_ddiv+0x3d0>
    77ce:	9302      	str	r3, [sp, #8]
    77d0:	e73a      	b.n	7648 <__aeabi_ddiv+0x3d4>
    77d2:	2a1f      	cmp	r2, #31
    77d4:	dc3c      	bgt.n	7850 <__aeabi_ddiv+0x5dc>
    77d6:	2320      	movs	r3, #32
    77d8:	1a9b      	subs	r3, r3, r2
    77da:	000c      	movs	r4, r1
    77dc:	4658      	mov	r0, fp
    77de:	4099      	lsls	r1, r3
    77e0:	4098      	lsls	r0, r3
    77e2:	1e4b      	subs	r3, r1, #1
    77e4:	4199      	sbcs	r1, r3
    77e6:	465b      	mov	r3, fp
    77e8:	40d4      	lsrs	r4, r2
    77ea:	40d3      	lsrs	r3, r2
    77ec:	4320      	orrs	r0, r4
    77ee:	4308      	orrs	r0, r1
    77f0:	001a      	movs	r2, r3
    77f2:	0743      	lsls	r3, r0, #29
    77f4:	d009      	beq.n	780a <__aeabi_ddiv+0x596>
    77f6:	230f      	movs	r3, #15
    77f8:	4003      	ands	r3, r0
    77fa:	2b04      	cmp	r3, #4
    77fc:	d005      	beq.n	780a <__aeabi_ddiv+0x596>
    77fe:	0001      	movs	r1, r0
    7800:	1d08      	adds	r0, r1, #4
    7802:	4288      	cmp	r0, r1
    7804:	419b      	sbcs	r3, r3
    7806:	425b      	negs	r3, r3
    7808:	18d2      	adds	r2, r2, r3
    780a:	0213      	lsls	r3, r2, #8
    780c:	d53a      	bpl.n	7884 <__aeabi_ddiv+0x610>
    780e:	2301      	movs	r3, #1
    7810:	9a02      	ldr	r2, [sp, #8]
    7812:	2401      	movs	r4, #1
    7814:	401a      	ands	r2, r3
    7816:	2300      	movs	r3, #0
    7818:	4694      	mov	ip, r2
    781a:	4698      	mov	r8, r3
    781c:	2200      	movs	r2, #0
    781e:	e5f7      	b.n	7410 <__aeabi_ddiv+0x19c>
    7820:	2102      	movs	r1, #2
    7822:	4249      	negs	r1, r1
    7824:	468c      	mov	ip, r1
    7826:	9d03      	ldr	r5, [sp, #12]
    7828:	44e3      	add	fp, ip
    782a:	46ac      	mov	ip, r5
    782c:	44e2      	add	sl, ip
    782e:	45aa      	cmp	sl, r5
    7830:	41ad      	sbcs	r5, r5
    7832:	426d      	negs	r5, r5
    7834:	4445      	add	r5, r8
    7836:	18ed      	adds	r5, r5, r3
    7838:	1a2d      	subs	r5, r5, r0
    783a:	e696      	b.n	756a <__aeabi_ddiv+0x2f6>
    783c:	1e8a      	subs	r2, r1, #2
    783e:	9903      	ldr	r1, [sp, #12]
    7840:	004d      	lsls	r5, r1, #1
    7842:	428d      	cmp	r5, r1
    7844:	4189      	sbcs	r1, r1
    7846:	4249      	negs	r1, r1
    7848:	4441      	add	r1, r8
    784a:	1876      	adds	r6, r6, r1
    784c:	9503      	str	r5, [sp, #12]
    784e:	e78f      	b.n	7770 <__aeabi_ddiv+0x4fc>
    7850:	201f      	movs	r0, #31
    7852:	4240      	negs	r0, r0
    7854:	1ac3      	subs	r3, r0, r3
    7856:	4658      	mov	r0, fp
    7858:	40d8      	lsrs	r0, r3
    785a:	0003      	movs	r3, r0
    785c:	2a20      	cmp	r2, #32
    785e:	d028      	beq.n	78b2 <__aeabi_ddiv+0x63e>
    7860:	2040      	movs	r0, #64	; 0x40
    7862:	465d      	mov	r5, fp
    7864:	1a82      	subs	r2, r0, r2
    7866:	4095      	lsls	r5, r2
    7868:	4329      	orrs	r1, r5
    786a:	1e4a      	subs	r2, r1, #1
    786c:	4191      	sbcs	r1, r2
    786e:	4319      	orrs	r1, r3
    7870:	2307      	movs	r3, #7
    7872:	2200      	movs	r2, #0
    7874:	400b      	ands	r3, r1
    7876:	d009      	beq.n	788c <__aeabi_ddiv+0x618>
    7878:	230f      	movs	r3, #15
    787a:	2200      	movs	r2, #0
    787c:	400b      	ands	r3, r1
    787e:	0008      	movs	r0, r1
    7880:	2b04      	cmp	r3, #4
    7882:	d1bd      	bne.n	7800 <__aeabi_ddiv+0x58c>
    7884:	0001      	movs	r1, r0
    7886:	0753      	lsls	r3, r2, #29
    7888:	0252      	lsls	r2, r2, #9
    788a:	0b12      	lsrs	r2, r2, #12
    788c:	08c9      	lsrs	r1, r1, #3
    788e:	4319      	orrs	r1, r3
    7890:	2301      	movs	r3, #1
    7892:	4688      	mov	r8, r1
    7894:	9902      	ldr	r1, [sp, #8]
    7896:	2400      	movs	r4, #0
    7898:	4019      	ands	r1, r3
    789a:	468c      	mov	ip, r1
    789c:	e5b8      	b.n	7410 <__aeabi_ddiv+0x19c>
    789e:	4552      	cmp	r2, sl
    78a0:	d8be      	bhi.n	7820 <__aeabi_ddiv+0x5ac>
    78a2:	468b      	mov	fp, r1
    78a4:	2500      	movs	r5, #0
    78a6:	e660      	b.n	756a <__aeabi_ddiv+0x2f6>
    78a8:	9d03      	ldr	r5, [sp, #12]
    78aa:	429d      	cmp	r5, r3
    78ac:	d3c6      	bcc.n	783c <__aeabi_ddiv+0x5c8>
    78ae:	0011      	movs	r1, r2
    78b0:	e762      	b.n	7778 <__aeabi_ddiv+0x504>
    78b2:	2500      	movs	r5, #0
    78b4:	e7d8      	b.n	7868 <__aeabi_ddiv+0x5f4>
    78b6:	2280      	movs	r2, #128	; 0x80
    78b8:	465b      	mov	r3, fp
    78ba:	0312      	lsls	r2, r2, #12
    78bc:	431a      	orrs	r2, r3
    78be:	9b01      	ldr	r3, [sp, #4]
    78c0:	0312      	lsls	r2, r2, #12
    78c2:	0b12      	lsrs	r2, r2, #12
    78c4:	469c      	mov	ip, r3
    78c6:	4688      	mov	r8, r1
    78c8:	4c03      	ldr	r4, [pc, #12]	; (78d8 <__aeabi_ddiv+0x664>)
    78ca:	e5a1      	b.n	7410 <__aeabi_ddiv+0x19c>
    78cc:	000003ff 	.word	0x000003ff
    78d0:	feffffff 	.word	0xfeffffff
    78d4:	000007fe 	.word	0x000007fe
    78d8:	000007ff 	.word	0x000007ff

000078dc <__eqdf2>:
    78dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    78de:	464f      	mov	r7, r9
    78e0:	4646      	mov	r6, r8
    78e2:	46d6      	mov	lr, sl
    78e4:	005c      	lsls	r4, r3, #1
    78e6:	b5c0      	push	{r6, r7, lr}
    78e8:	031f      	lsls	r7, r3, #12
    78ea:	0fdb      	lsrs	r3, r3, #31
    78ec:	469a      	mov	sl, r3
    78ee:	4b17      	ldr	r3, [pc, #92]	; (794c <__eqdf2+0x70>)
    78f0:	030e      	lsls	r6, r1, #12
    78f2:	004d      	lsls	r5, r1, #1
    78f4:	4684      	mov	ip, r0
    78f6:	4680      	mov	r8, r0
    78f8:	0b36      	lsrs	r6, r6, #12
    78fa:	0d6d      	lsrs	r5, r5, #21
    78fc:	0fc9      	lsrs	r1, r1, #31
    78fe:	4691      	mov	r9, r2
    7900:	0b3f      	lsrs	r7, r7, #12
    7902:	0d64      	lsrs	r4, r4, #21
    7904:	2001      	movs	r0, #1
    7906:	429d      	cmp	r5, r3
    7908:	d008      	beq.n	791c <__eqdf2+0x40>
    790a:	429c      	cmp	r4, r3
    790c:	d001      	beq.n	7912 <__eqdf2+0x36>
    790e:	42a5      	cmp	r5, r4
    7910:	d00b      	beq.n	792a <__eqdf2+0x4e>
    7912:	bc1c      	pop	{r2, r3, r4}
    7914:	4690      	mov	r8, r2
    7916:	4699      	mov	r9, r3
    7918:	46a2      	mov	sl, r4
    791a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    791c:	4663      	mov	r3, ip
    791e:	4333      	orrs	r3, r6
    7920:	d1f7      	bne.n	7912 <__eqdf2+0x36>
    7922:	42ac      	cmp	r4, r5
    7924:	d1f5      	bne.n	7912 <__eqdf2+0x36>
    7926:	433a      	orrs	r2, r7
    7928:	d1f3      	bne.n	7912 <__eqdf2+0x36>
    792a:	2001      	movs	r0, #1
    792c:	42be      	cmp	r6, r7
    792e:	d1f0      	bne.n	7912 <__eqdf2+0x36>
    7930:	45c8      	cmp	r8, r9
    7932:	d1ee      	bne.n	7912 <__eqdf2+0x36>
    7934:	4551      	cmp	r1, sl
    7936:	d007      	beq.n	7948 <__eqdf2+0x6c>
    7938:	2d00      	cmp	r5, #0
    793a:	d1ea      	bne.n	7912 <__eqdf2+0x36>
    793c:	4663      	mov	r3, ip
    793e:	431e      	orrs	r6, r3
    7940:	0030      	movs	r0, r6
    7942:	1e46      	subs	r6, r0, #1
    7944:	41b0      	sbcs	r0, r6
    7946:	e7e4      	b.n	7912 <__eqdf2+0x36>
    7948:	2000      	movs	r0, #0
    794a:	e7e2      	b.n	7912 <__eqdf2+0x36>
    794c:	000007ff 	.word	0x000007ff

00007950 <__gedf2>:
    7950:	b5f0      	push	{r4, r5, r6, r7, lr}
    7952:	4645      	mov	r5, r8
    7954:	46de      	mov	lr, fp
    7956:	4657      	mov	r7, sl
    7958:	464e      	mov	r6, r9
    795a:	b5e0      	push	{r5, r6, r7, lr}
    795c:	031f      	lsls	r7, r3, #12
    795e:	0b3d      	lsrs	r5, r7, #12
    7960:	4f2c      	ldr	r7, [pc, #176]	; (7a14 <__gedf2+0xc4>)
    7962:	030e      	lsls	r6, r1, #12
    7964:	004c      	lsls	r4, r1, #1
    7966:	46ab      	mov	fp, r5
    7968:	005d      	lsls	r5, r3, #1
    796a:	4684      	mov	ip, r0
    796c:	0b36      	lsrs	r6, r6, #12
    796e:	0d64      	lsrs	r4, r4, #21
    7970:	0fc9      	lsrs	r1, r1, #31
    7972:	4690      	mov	r8, r2
    7974:	0d6d      	lsrs	r5, r5, #21
    7976:	0fdb      	lsrs	r3, r3, #31
    7978:	42bc      	cmp	r4, r7
    797a:	d02a      	beq.n	79d2 <__gedf2+0x82>
    797c:	4f25      	ldr	r7, [pc, #148]	; (7a14 <__gedf2+0xc4>)
    797e:	42bd      	cmp	r5, r7
    7980:	d02d      	beq.n	79de <__gedf2+0x8e>
    7982:	2c00      	cmp	r4, #0
    7984:	d10f      	bne.n	79a6 <__gedf2+0x56>
    7986:	4330      	orrs	r0, r6
    7988:	0007      	movs	r7, r0
    798a:	4681      	mov	r9, r0
    798c:	4278      	negs	r0, r7
    798e:	4178      	adcs	r0, r7
    7990:	b2c0      	uxtb	r0, r0
    7992:	2d00      	cmp	r5, #0
    7994:	d117      	bne.n	79c6 <__gedf2+0x76>
    7996:	465f      	mov	r7, fp
    7998:	433a      	orrs	r2, r7
    799a:	d114      	bne.n	79c6 <__gedf2+0x76>
    799c:	464b      	mov	r3, r9
    799e:	2000      	movs	r0, #0
    79a0:	2b00      	cmp	r3, #0
    79a2:	d00a      	beq.n	79ba <__gedf2+0x6a>
    79a4:	e006      	b.n	79b4 <__gedf2+0x64>
    79a6:	2d00      	cmp	r5, #0
    79a8:	d102      	bne.n	79b0 <__gedf2+0x60>
    79aa:	4658      	mov	r0, fp
    79ac:	4302      	orrs	r2, r0
    79ae:	d001      	beq.n	79b4 <__gedf2+0x64>
    79b0:	4299      	cmp	r1, r3
    79b2:	d018      	beq.n	79e6 <__gedf2+0x96>
    79b4:	4248      	negs	r0, r1
    79b6:	2101      	movs	r1, #1
    79b8:	4308      	orrs	r0, r1
    79ba:	bc3c      	pop	{r2, r3, r4, r5}
    79bc:	4690      	mov	r8, r2
    79be:	4699      	mov	r9, r3
    79c0:	46a2      	mov	sl, r4
    79c2:	46ab      	mov	fp, r5
    79c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    79c6:	2800      	cmp	r0, #0
    79c8:	d0f2      	beq.n	79b0 <__gedf2+0x60>
    79ca:	2001      	movs	r0, #1
    79cc:	3b01      	subs	r3, #1
    79ce:	4318      	orrs	r0, r3
    79d0:	e7f3      	b.n	79ba <__gedf2+0x6a>
    79d2:	0037      	movs	r7, r6
    79d4:	4307      	orrs	r7, r0
    79d6:	d0d1      	beq.n	797c <__gedf2+0x2c>
    79d8:	2002      	movs	r0, #2
    79da:	4240      	negs	r0, r0
    79dc:	e7ed      	b.n	79ba <__gedf2+0x6a>
    79de:	465f      	mov	r7, fp
    79e0:	4317      	orrs	r7, r2
    79e2:	d0ce      	beq.n	7982 <__gedf2+0x32>
    79e4:	e7f8      	b.n	79d8 <__gedf2+0x88>
    79e6:	42ac      	cmp	r4, r5
    79e8:	dce4      	bgt.n	79b4 <__gedf2+0x64>
    79ea:	da03      	bge.n	79f4 <__gedf2+0xa4>
    79ec:	1e48      	subs	r0, r1, #1
    79ee:	2101      	movs	r1, #1
    79f0:	4308      	orrs	r0, r1
    79f2:	e7e2      	b.n	79ba <__gedf2+0x6a>
    79f4:	455e      	cmp	r6, fp
    79f6:	d8dd      	bhi.n	79b4 <__gedf2+0x64>
    79f8:	d006      	beq.n	7a08 <__gedf2+0xb8>
    79fa:	2000      	movs	r0, #0
    79fc:	455e      	cmp	r6, fp
    79fe:	d2dc      	bcs.n	79ba <__gedf2+0x6a>
    7a00:	2301      	movs	r3, #1
    7a02:	1e48      	subs	r0, r1, #1
    7a04:	4318      	orrs	r0, r3
    7a06:	e7d8      	b.n	79ba <__gedf2+0x6a>
    7a08:	45c4      	cmp	ip, r8
    7a0a:	d8d3      	bhi.n	79b4 <__gedf2+0x64>
    7a0c:	2000      	movs	r0, #0
    7a0e:	45c4      	cmp	ip, r8
    7a10:	d3f6      	bcc.n	7a00 <__gedf2+0xb0>
    7a12:	e7d2      	b.n	79ba <__gedf2+0x6a>
    7a14:	000007ff 	.word	0x000007ff

00007a18 <__ledf2>:
    7a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a1a:	464e      	mov	r6, r9
    7a1c:	4645      	mov	r5, r8
    7a1e:	46de      	mov	lr, fp
    7a20:	4657      	mov	r7, sl
    7a22:	005c      	lsls	r4, r3, #1
    7a24:	b5e0      	push	{r5, r6, r7, lr}
    7a26:	031f      	lsls	r7, r3, #12
    7a28:	0fdb      	lsrs	r3, r3, #31
    7a2a:	4699      	mov	r9, r3
    7a2c:	4b2a      	ldr	r3, [pc, #168]	; (7ad8 <__ledf2+0xc0>)
    7a2e:	030e      	lsls	r6, r1, #12
    7a30:	004d      	lsls	r5, r1, #1
    7a32:	0fc9      	lsrs	r1, r1, #31
    7a34:	4684      	mov	ip, r0
    7a36:	0b36      	lsrs	r6, r6, #12
    7a38:	0d6d      	lsrs	r5, r5, #21
    7a3a:	468b      	mov	fp, r1
    7a3c:	4690      	mov	r8, r2
    7a3e:	0b3f      	lsrs	r7, r7, #12
    7a40:	0d64      	lsrs	r4, r4, #21
    7a42:	429d      	cmp	r5, r3
    7a44:	d020      	beq.n	7a88 <__ledf2+0x70>
    7a46:	4b24      	ldr	r3, [pc, #144]	; (7ad8 <__ledf2+0xc0>)
    7a48:	429c      	cmp	r4, r3
    7a4a:	d022      	beq.n	7a92 <__ledf2+0x7a>
    7a4c:	2d00      	cmp	r5, #0
    7a4e:	d112      	bne.n	7a76 <__ledf2+0x5e>
    7a50:	4330      	orrs	r0, r6
    7a52:	4243      	negs	r3, r0
    7a54:	4143      	adcs	r3, r0
    7a56:	b2db      	uxtb	r3, r3
    7a58:	2c00      	cmp	r4, #0
    7a5a:	d01f      	beq.n	7a9c <__ledf2+0x84>
    7a5c:	2b00      	cmp	r3, #0
    7a5e:	d00c      	beq.n	7a7a <__ledf2+0x62>
    7a60:	464b      	mov	r3, r9
    7a62:	2001      	movs	r0, #1
    7a64:	3b01      	subs	r3, #1
    7a66:	4303      	orrs	r3, r0
    7a68:	0018      	movs	r0, r3
    7a6a:	bc3c      	pop	{r2, r3, r4, r5}
    7a6c:	4690      	mov	r8, r2
    7a6e:	4699      	mov	r9, r3
    7a70:	46a2      	mov	sl, r4
    7a72:	46ab      	mov	fp, r5
    7a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a76:	2c00      	cmp	r4, #0
    7a78:	d016      	beq.n	7aa8 <__ledf2+0x90>
    7a7a:	45cb      	cmp	fp, r9
    7a7c:	d017      	beq.n	7aae <__ledf2+0x96>
    7a7e:	465b      	mov	r3, fp
    7a80:	4259      	negs	r1, r3
    7a82:	2301      	movs	r3, #1
    7a84:	430b      	orrs	r3, r1
    7a86:	e7ef      	b.n	7a68 <__ledf2+0x50>
    7a88:	0031      	movs	r1, r6
    7a8a:	2302      	movs	r3, #2
    7a8c:	4301      	orrs	r1, r0
    7a8e:	d1eb      	bne.n	7a68 <__ledf2+0x50>
    7a90:	e7d9      	b.n	7a46 <__ledf2+0x2e>
    7a92:	0039      	movs	r1, r7
    7a94:	2302      	movs	r3, #2
    7a96:	4311      	orrs	r1, r2
    7a98:	d1e6      	bne.n	7a68 <__ledf2+0x50>
    7a9a:	e7d7      	b.n	7a4c <__ledf2+0x34>
    7a9c:	433a      	orrs	r2, r7
    7a9e:	d1dd      	bne.n	7a5c <__ledf2+0x44>
    7aa0:	2300      	movs	r3, #0
    7aa2:	2800      	cmp	r0, #0
    7aa4:	d0e0      	beq.n	7a68 <__ledf2+0x50>
    7aa6:	e7ea      	b.n	7a7e <__ledf2+0x66>
    7aa8:	433a      	orrs	r2, r7
    7aaa:	d1e6      	bne.n	7a7a <__ledf2+0x62>
    7aac:	e7e7      	b.n	7a7e <__ledf2+0x66>
    7aae:	42a5      	cmp	r5, r4
    7ab0:	dce5      	bgt.n	7a7e <__ledf2+0x66>
    7ab2:	db05      	blt.n	7ac0 <__ledf2+0xa8>
    7ab4:	42be      	cmp	r6, r7
    7ab6:	d8e2      	bhi.n	7a7e <__ledf2+0x66>
    7ab8:	d007      	beq.n	7aca <__ledf2+0xb2>
    7aba:	2300      	movs	r3, #0
    7abc:	42be      	cmp	r6, r7
    7abe:	d2d3      	bcs.n	7a68 <__ledf2+0x50>
    7ac0:	4659      	mov	r1, fp
    7ac2:	2301      	movs	r3, #1
    7ac4:	3901      	subs	r1, #1
    7ac6:	430b      	orrs	r3, r1
    7ac8:	e7ce      	b.n	7a68 <__ledf2+0x50>
    7aca:	45c4      	cmp	ip, r8
    7acc:	d8d7      	bhi.n	7a7e <__ledf2+0x66>
    7ace:	2300      	movs	r3, #0
    7ad0:	45c4      	cmp	ip, r8
    7ad2:	d3f5      	bcc.n	7ac0 <__ledf2+0xa8>
    7ad4:	e7c8      	b.n	7a68 <__ledf2+0x50>
    7ad6:	46c0      	nop			; (mov r8, r8)
    7ad8:	000007ff 	.word	0x000007ff

00007adc <__aeabi_dmul>:
    7adc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ade:	4657      	mov	r7, sl
    7ae0:	4645      	mov	r5, r8
    7ae2:	46de      	mov	lr, fp
    7ae4:	464e      	mov	r6, r9
    7ae6:	b5e0      	push	{r5, r6, r7, lr}
    7ae8:	030c      	lsls	r4, r1, #12
    7aea:	4698      	mov	r8, r3
    7aec:	004e      	lsls	r6, r1, #1
    7aee:	0b23      	lsrs	r3, r4, #12
    7af0:	b087      	sub	sp, #28
    7af2:	0007      	movs	r7, r0
    7af4:	4692      	mov	sl, r2
    7af6:	469b      	mov	fp, r3
    7af8:	0d76      	lsrs	r6, r6, #21
    7afa:	0fcd      	lsrs	r5, r1, #31
    7afc:	2e00      	cmp	r6, #0
    7afe:	d06b      	beq.n	7bd8 <__aeabi_dmul+0xfc>
    7b00:	4b6d      	ldr	r3, [pc, #436]	; (7cb8 <__aeabi_dmul+0x1dc>)
    7b02:	429e      	cmp	r6, r3
    7b04:	d035      	beq.n	7b72 <__aeabi_dmul+0x96>
    7b06:	2480      	movs	r4, #128	; 0x80
    7b08:	465b      	mov	r3, fp
    7b0a:	0f42      	lsrs	r2, r0, #29
    7b0c:	0424      	lsls	r4, r4, #16
    7b0e:	00db      	lsls	r3, r3, #3
    7b10:	4314      	orrs	r4, r2
    7b12:	431c      	orrs	r4, r3
    7b14:	00c3      	lsls	r3, r0, #3
    7b16:	4699      	mov	r9, r3
    7b18:	4b68      	ldr	r3, [pc, #416]	; (7cbc <__aeabi_dmul+0x1e0>)
    7b1a:	46a3      	mov	fp, r4
    7b1c:	469c      	mov	ip, r3
    7b1e:	2300      	movs	r3, #0
    7b20:	2700      	movs	r7, #0
    7b22:	4466      	add	r6, ip
    7b24:	9302      	str	r3, [sp, #8]
    7b26:	4643      	mov	r3, r8
    7b28:	031c      	lsls	r4, r3, #12
    7b2a:	005a      	lsls	r2, r3, #1
    7b2c:	0fdb      	lsrs	r3, r3, #31
    7b2e:	4650      	mov	r0, sl
    7b30:	0b24      	lsrs	r4, r4, #12
    7b32:	0d52      	lsrs	r2, r2, #21
    7b34:	4698      	mov	r8, r3
    7b36:	d100      	bne.n	7b3a <__aeabi_dmul+0x5e>
    7b38:	e076      	b.n	7c28 <__aeabi_dmul+0x14c>
    7b3a:	4b5f      	ldr	r3, [pc, #380]	; (7cb8 <__aeabi_dmul+0x1dc>)
    7b3c:	429a      	cmp	r2, r3
    7b3e:	d06d      	beq.n	7c1c <__aeabi_dmul+0x140>
    7b40:	2380      	movs	r3, #128	; 0x80
    7b42:	0f41      	lsrs	r1, r0, #29
    7b44:	041b      	lsls	r3, r3, #16
    7b46:	430b      	orrs	r3, r1
    7b48:	495c      	ldr	r1, [pc, #368]	; (7cbc <__aeabi_dmul+0x1e0>)
    7b4a:	00e4      	lsls	r4, r4, #3
    7b4c:	468c      	mov	ip, r1
    7b4e:	431c      	orrs	r4, r3
    7b50:	00c3      	lsls	r3, r0, #3
    7b52:	2000      	movs	r0, #0
    7b54:	4462      	add	r2, ip
    7b56:	4641      	mov	r1, r8
    7b58:	18b6      	adds	r6, r6, r2
    7b5a:	4069      	eors	r1, r5
    7b5c:	1c72      	adds	r2, r6, #1
    7b5e:	9101      	str	r1, [sp, #4]
    7b60:	4694      	mov	ip, r2
    7b62:	4307      	orrs	r7, r0
    7b64:	2f0f      	cmp	r7, #15
    7b66:	d900      	bls.n	7b6a <__aeabi_dmul+0x8e>
    7b68:	e0b0      	b.n	7ccc <__aeabi_dmul+0x1f0>
    7b6a:	4a55      	ldr	r2, [pc, #340]	; (7cc0 <__aeabi_dmul+0x1e4>)
    7b6c:	00bf      	lsls	r7, r7, #2
    7b6e:	59d2      	ldr	r2, [r2, r7]
    7b70:	4697      	mov	pc, r2
    7b72:	465b      	mov	r3, fp
    7b74:	4303      	orrs	r3, r0
    7b76:	4699      	mov	r9, r3
    7b78:	d000      	beq.n	7b7c <__aeabi_dmul+0xa0>
    7b7a:	e087      	b.n	7c8c <__aeabi_dmul+0x1b0>
    7b7c:	2300      	movs	r3, #0
    7b7e:	469b      	mov	fp, r3
    7b80:	3302      	adds	r3, #2
    7b82:	2708      	movs	r7, #8
    7b84:	9302      	str	r3, [sp, #8]
    7b86:	e7ce      	b.n	7b26 <__aeabi_dmul+0x4a>
    7b88:	4642      	mov	r2, r8
    7b8a:	9201      	str	r2, [sp, #4]
    7b8c:	2802      	cmp	r0, #2
    7b8e:	d067      	beq.n	7c60 <__aeabi_dmul+0x184>
    7b90:	2803      	cmp	r0, #3
    7b92:	d100      	bne.n	7b96 <__aeabi_dmul+0xba>
    7b94:	e20e      	b.n	7fb4 <__aeabi_dmul+0x4d8>
    7b96:	2801      	cmp	r0, #1
    7b98:	d000      	beq.n	7b9c <__aeabi_dmul+0xc0>
    7b9a:	e162      	b.n	7e62 <__aeabi_dmul+0x386>
    7b9c:	2300      	movs	r3, #0
    7b9e:	2400      	movs	r4, #0
    7ba0:	2200      	movs	r2, #0
    7ba2:	4699      	mov	r9, r3
    7ba4:	9901      	ldr	r1, [sp, #4]
    7ba6:	4001      	ands	r1, r0
    7ba8:	b2cd      	uxtb	r5, r1
    7baa:	2100      	movs	r1, #0
    7bac:	0312      	lsls	r2, r2, #12
    7bae:	0d0b      	lsrs	r3, r1, #20
    7bb0:	0b12      	lsrs	r2, r2, #12
    7bb2:	051b      	lsls	r3, r3, #20
    7bb4:	4313      	orrs	r3, r2
    7bb6:	4a43      	ldr	r2, [pc, #268]	; (7cc4 <__aeabi_dmul+0x1e8>)
    7bb8:	0524      	lsls	r4, r4, #20
    7bba:	4013      	ands	r3, r2
    7bbc:	431c      	orrs	r4, r3
    7bbe:	0064      	lsls	r4, r4, #1
    7bc0:	07ed      	lsls	r5, r5, #31
    7bc2:	0864      	lsrs	r4, r4, #1
    7bc4:	432c      	orrs	r4, r5
    7bc6:	4648      	mov	r0, r9
    7bc8:	0021      	movs	r1, r4
    7bca:	b007      	add	sp, #28
    7bcc:	bc3c      	pop	{r2, r3, r4, r5}
    7bce:	4690      	mov	r8, r2
    7bd0:	4699      	mov	r9, r3
    7bd2:	46a2      	mov	sl, r4
    7bd4:	46ab      	mov	fp, r5
    7bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7bd8:	4303      	orrs	r3, r0
    7bda:	4699      	mov	r9, r3
    7bdc:	d04f      	beq.n	7c7e <__aeabi_dmul+0x1a2>
    7bde:	465b      	mov	r3, fp
    7be0:	2b00      	cmp	r3, #0
    7be2:	d100      	bne.n	7be6 <__aeabi_dmul+0x10a>
    7be4:	e189      	b.n	7efa <__aeabi_dmul+0x41e>
    7be6:	4658      	mov	r0, fp
    7be8:	f000 feb8 	bl	895c <__clzsi2>
    7bec:	0003      	movs	r3, r0
    7bee:	3b0b      	subs	r3, #11
    7bf0:	2b1c      	cmp	r3, #28
    7bf2:	dd00      	ble.n	7bf6 <__aeabi_dmul+0x11a>
    7bf4:	e17a      	b.n	7eec <__aeabi_dmul+0x410>
    7bf6:	221d      	movs	r2, #29
    7bf8:	1ad3      	subs	r3, r2, r3
    7bfa:	003a      	movs	r2, r7
    7bfc:	0001      	movs	r1, r0
    7bfe:	465c      	mov	r4, fp
    7c00:	40da      	lsrs	r2, r3
    7c02:	3908      	subs	r1, #8
    7c04:	408c      	lsls	r4, r1
    7c06:	0013      	movs	r3, r2
    7c08:	408f      	lsls	r7, r1
    7c0a:	4323      	orrs	r3, r4
    7c0c:	469b      	mov	fp, r3
    7c0e:	46b9      	mov	r9, r7
    7c10:	2300      	movs	r3, #0
    7c12:	4e2d      	ldr	r6, [pc, #180]	; (7cc8 <__aeabi_dmul+0x1ec>)
    7c14:	2700      	movs	r7, #0
    7c16:	1a36      	subs	r6, r6, r0
    7c18:	9302      	str	r3, [sp, #8]
    7c1a:	e784      	b.n	7b26 <__aeabi_dmul+0x4a>
    7c1c:	4653      	mov	r3, sl
    7c1e:	4323      	orrs	r3, r4
    7c20:	d12a      	bne.n	7c78 <__aeabi_dmul+0x19c>
    7c22:	2400      	movs	r4, #0
    7c24:	2002      	movs	r0, #2
    7c26:	e796      	b.n	7b56 <__aeabi_dmul+0x7a>
    7c28:	4653      	mov	r3, sl
    7c2a:	4323      	orrs	r3, r4
    7c2c:	d020      	beq.n	7c70 <__aeabi_dmul+0x194>
    7c2e:	2c00      	cmp	r4, #0
    7c30:	d100      	bne.n	7c34 <__aeabi_dmul+0x158>
    7c32:	e157      	b.n	7ee4 <__aeabi_dmul+0x408>
    7c34:	0020      	movs	r0, r4
    7c36:	f000 fe91 	bl	895c <__clzsi2>
    7c3a:	0003      	movs	r3, r0
    7c3c:	3b0b      	subs	r3, #11
    7c3e:	2b1c      	cmp	r3, #28
    7c40:	dd00      	ble.n	7c44 <__aeabi_dmul+0x168>
    7c42:	e149      	b.n	7ed8 <__aeabi_dmul+0x3fc>
    7c44:	211d      	movs	r1, #29
    7c46:	1acb      	subs	r3, r1, r3
    7c48:	4651      	mov	r1, sl
    7c4a:	0002      	movs	r2, r0
    7c4c:	40d9      	lsrs	r1, r3
    7c4e:	4653      	mov	r3, sl
    7c50:	3a08      	subs	r2, #8
    7c52:	4094      	lsls	r4, r2
    7c54:	4093      	lsls	r3, r2
    7c56:	430c      	orrs	r4, r1
    7c58:	4a1b      	ldr	r2, [pc, #108]	; (7cc8 <__aeabi_dmul+0x1ec>)
    7c5a:	1a12      	subs	r2, r2, r0
    7c5c:	2000      	movs	r0, #0
    7c5e:	e77a      	b.n	7b56 <__aeabi_dmul+0x7a>
    7c60:	2501      	movs	r5, #1
    7c62:	9b01      	ldr	r3, [sp, #4]
    7c64:	4c14      	ldr	r4, [pc, #80]	; (7cb8 <__aeabi_dmul+0x1dc>)
    7c66:	401d      	ands	r5, r3
    7c68:	2300      	movs	r3, #0
    7c6a:	2200      	movs	r2, #0
    7c6c:	4699      	mov	r9, r3
    7c6e:	e79c      	b.n	7baa <__aeabi_dmul+0xce>
    7c70:	2400      	movs	r4, #0
    7c72:	2200      	movs	r2, #0
    7c74:	2001      	movs	r0, #1
    7c76:	e76e      	b.n	7b56 <__aeabi_dmul+0x7a>
    7c78:	4653      	mov	r3, sl
    7c7a:	2003      	movs	r0, #3
    7c7c:	e76b      	b.n	7b56 <__aeabi_dmul+0x7a>
    7c7e:	2300      	movs	r3, #0
    7c80:	469b      	mov	fp, r3
    7c82:	3301      	adds	r3, #1
    7c84:	2704      	movs	r7, #4
    7c86:	2600      	movs	r6, #0
    7c88:	9302      	str	r3, [sp, #8]
    7c8a:	e74c      	b.n	7b26 <__aeabi_dmul+0x4a>
    7c8c:	2303      	movs	r3, #3
    7c8e:	4681      	mov	r9, r0
    7c90:	270c      	movs	r7, #12
    7c92:	9302      	str	r3, [sp, #8]
    7c94:	e747      	b.n	7b26 <__aeabi_dmul+0x4a>
    7c96:	2280      	movs	r2, #128	; 0x80
    7c98:	2300      	movs	r3, #0
    7c9a:	2500      	movs	r5, #0
    7c9c:	0312      	lsls	r2, r2, #12
    7c9e:	4699      	mov	r9, r3
    7ca0:	4c05      	ldr	r4, [pc, #20]	; (7cb8 <__aeabi_dmul+0x1dc>)
    7ca2:	e782      	b.n	7baa <__aeabi_dmul+0xce>
    7ca4:	465c      	mov	r4, fp
    7ca6:	464b      	mov	r3, r9
    7ca8:	9802      	ldr	r0, [sp, #8]
    7caa:	e76f      	b.n	7b8c <__aeabi_dmul+0xb0>
    7cac:	465c      	mov	r4, fp
    7cae:	464b      	mov	r3, r9
    7cb0:	9501      	str	r5, [sp, #4]
    7cb2:	9802      	ldr	r0, [sp, #8]
    7cb4:	e76a      	b.n	7b8c <__aeabi_dmul+0xb0>
    7cb6:	46c0      	nop			; (mov r8, r8)
    7cb8:	000007ff 	.word	0x000007ff
    7cbc:	fffffc01 	.word	0xfffffc01
    7cc0:	00008e60 	.word	0x00008e60
    7cc4:	800fffff 	.word	0x800fffff
    7cc8:	fffffc0d 	.word	0xfffffc0d
    7ccc:	464a      	mov	r2, r9
    7cce:	4649      	mov	r1, r9
    7cd0:	0c17      	lsrs	r7, r2, #16
    7cd2:	0c1a      	lsrs	r2, r3, #16
    7cd4:	041b      	lsls	r3, r3, #16
    7cd6:	0c1b      	lsrs	r3, r3, #16
    7cd8:	0408      	lsls	r0, r1, #16
    7cda:	0019      	movs	r1, r3
    7cdc:	0c00      	lsrs	r0, r0, #16
    7cde:	4341      	muls	r1, r0
    7ce0:	0015      	movs	r5, r2
    7ce2:	4688      	mov	r8, r1
    7ce4:	0019      	movs	r1, r3
    7ce6:	437d      	muls	r5, r7
    7ce8:	4379      	muls	r1, r7
    7cea:	9503      	str	r5, [sp, #12]
    7cec:	4689      	mov	r9, r1
    7cee:	0029      	movs	r1, r5
    7cf0:	0015      	movs	r5, r2
    7cf2:	4345      	muls	r5, r0
    7cf4:	444d      	add	r5, r9
    7cf6:	9502      	str	r5, [sp, #8]
    7cf8:	4645      	mov	r5, r8
    7cfa:	0c2d      	lsrs	r5, r5, #16
    7cfc:	46aa      	mov	sl, r5
    7cfe:	9d02      	ldr	r5, [sp, #8]
    7d00:	4455      	add	r5, sl
    7d02:	45a9      	cmp	r9, r5
    7d04:	d906      	bls.n	7d14 <__aeabi_dmul+0x238>
    7d06:	468a      	mov	sl, r1
    7d08:	2180      	movs	r1, #128	; 0x80
    7d0a:	0249      	lsls	r1, r1, #9
    7d0c:	4689      	mov	r9, r1
    7d0e:	44ca      	add	sl, r9
    7d10:	4651      	mov	r1, sl
    7d12:	9103      	str	r1, [sp, #12]
    7d14:	0c29      	lsrs	r1, r5, #16
    7d16:	9104      	str	r1, [sp, #16]
    7d18:	4641      	mov	r1, r8
    7d1a:	0409      	lsls	r1, r1, #16
    7d1c:	042d      	lsls	r5, r5, #16
    7d1e:	0c09      	lsrs	r1, r1, #16
    7d20:	4688      	mov	r8, r1
    7d22:	0029      	movs	r1, r5
    7d24:	0c25      	lsrs	r5, r4, #16
    7d26:	0424      	lsls	r4, r4, #16
    7d28:	4441      	add	r1, r8
    7d2a:	0c24      	lsrs	r4, r4, #16
    7d2c:	9105      	str	r1, [sp, #20]
    7d2e:	0021      	movs	r1, r4
    7d30:	4341      	muls	r1, r0
    7d32:	4688      	mov	r8, r1
    7d34:	0021      	movs	r1, r4
    7d36:	4379      	muls	r1, r7
    7d38:	468a      	mov	sl, r1
    7d3a:	4368      	muls	r0, r5
    7d3c:	4641      	mov	r1, r8
    7d3e:	4450      	add	r0, sl
    7d40:	4681      	mov	r9, r0
    7d42:	0c08      	lsrs	r0, r1, #16
    7d44:	4448      	add	r0, r9
    7d46:	436f      	muls	r7, r5
    7d48:	4582      	cmp	sl, r0
    7d4a:	d903      	bls.n	7d54 <__aeabi_dmul+0x278>
    7d4c:	2180      	movs	r1, #128	; 0x80
    7d4e:	0249      	lsls	r1, r1, #9
    7d50:	4689      	mov	r9, r1
    7d52:	444f      	add	r7, r9
    7d54:	0c01      	lsrs	r1, r0, #16
    7d56:	4689      	mov	r9, r1
    7d58:	0039      	movs	r1, r7
    7d5a:	4449      	add	r1, r9
    7d5c:	9102      	str	r1, [sp, #8]
    7d5e:	4641      	mov	r1, r8
    7d60:	040f      	lsls	r7, r1, #16
    7d62:	9904      	ldr	r1, [sp, #16]
    7d64:	0c3f      	lsrs	r7, r7, #16
    7d66:	4688      	mov	r8, r1
    7d68:	0400      	lsls	r0, r0, #16
    7d6a:	19c0      	adds	r0, r0, r7
    7d6c:	4480      	add	r8, r0
    7d6e:	4641      	mov	r1, r8
    7d70:	9104      	str	r1, [sp, #16]
    7d72:	4659      	mov	r1, fp
    7d74:	0c0f      	lsrs	r7, r1, #16
    7d76:	0409      	lsls	r1, r1, #16
    7d78:	0c09      	lsrs	r1, r1, #16
    7d7a:	4688      	mov	r8, r1
    7d7c:	4359      	muls	r1, r3
    7d7e:	468a      	mov	sl, r1
    7d80:	0039      	movs	r1, r7
    7d82:	4351      	muls	r1, r2
    7d84:	4689      	mov	r9, r1
    7d86:	4641      	mov	r1, r8
    7d88:	434a      	muls	r2, r1
    7d8a:	4651      	mov	r1, sl
    7d8c:	0c09      	lsrs	r1, r1, #16
    7d8e:	468b      	mov	fp, r1
    7d90:	437b      	muls	r3, r7
    7d92:	18d2      	adds	r2, r2, r3
    7d94:	445a      	add	r2, fp
    7d96:	4293      	cmp	r3, r2
    7d98:	d903      	bls.n	7da2 <__aeabi_dmul+0x2c6>
    7d9a:	2380      	movs	r3, #128	; 0x80
    7d9c:	025b      	lsls	r3, r3, #9
    7d9e:	469b      	mov	fp, r3
    7da0:	44d9      	add	r9, fp
    7da2:	4651      	mov	r1, sl
    7da4:	0409      	lsls	r1, r1, #16
    7da6:	0c09      	lsrs	r1, r1, #16
    7da8:	468a      	mov	sl, r1
    7daa:	4641      	mov	r1, r8
    7dac:	4361      	muls	r1, r4
    7dae:	437c      	muls	r4, r7
    7db0:	0c13      	lsrs	r3, r2, #16
    7db2:	0412      	lsls	r2, r2, #16
    7db4:	444b      	add	r3, r9
    7db6:	4452      	add	r2, sl
    7db8:	46a1      	mov	r9, r4
    7dba:	468a      	mov	sl, r1
    7dbc:	003c      	movs	r4, r7
    7dbe:	4641      	mov	r1, r8
    7dc0:	436c      	muls	r4, r5
    7dc2:	434d      	muls	r5, r1
    7dc4:	4651      	mov	r1, sl
    7dc6:	444d      	add	r5, r9
    7dc8:	0c0f      	lsrs	r7, r1, #16
    7dca:	197d      	adds	r5, r7, r5
    7dcc:	45a9      	cmp	r9, r5
    7dce:	d903      	bls.n	7dd8 <__aeabi_dmul+0x2fc>
    7dd0:	2180      	movs	r1, #128	; 0x80
    7dd2:	0249      	lsls	r1, r1, #9
    7dd4:	4688      	mov	r8, r1
    7dd6:	4444      	add	r4, r8
    7dd8:	9f04      	ldr	r7, [sp, #16]
    7dda:	9903      	ldr	r1, [sp, #12]
    7ddc:	46b8      	mov	r8, r7
    7dde:	4441      	add	r1, r8
    7de0:	468b      	mov	fp, r1
    7de2:	4583      	cmp	fp, r0
    7de4:	4180      	sbcs	r0, r0
    7de6:	4241      	negs	r1, r0
    7de8:	4688      	mov	r8, r1
    7dea:	4651      	mov	r1, sl
    7dec:	0408      	lsls	r0, r1, #16
    7dee:	042f      	lsls	r7, r5, #16
    7df0:	0c00      	lsrs	r0, r0, #16
    7df2:	183f      	adds	r7, r7, r0
    7df4:	4658      	mov	r0, fp
    7df6:	9902      	ldr	r1, [sp, #8]
    7df8:	1810      	adds	r0, r2, r0
    7dfa:	4689      	mov	r9, r1
    7dfc:	4290      	cmp	r0, r2
    7dfe:	4192      	sbcs	r2, r2
    7e00:	444f      	add	r7, r9
    7e02:	46ba      	mov	sl, r7
    7e04:	4252      	negs	r2, r2
    7e06:	4699      	mov	r9, r3
    7e08:	4693      	mov	fp, r2
    7e0a:	44c2      	add	sl, r8
    7e0c:	44d1      	add	r9, sl
    7e0e:	44cb      	add	fp, r9
    7e10:	428f      	cmp	r7, r1
    7e12:	41bf      	sbcs	r7, r7
    7e14:	45c2      	cmp	sl, r8
    7e16:	4189      	sbcs	r1, r1
    7e18:	4599      	cmp	r9, r3
    7e1a:	419b      	sbcs	r3, r3
    7e1c:	4593      	cmp	fp, r2
    7e1e:	4192      	sbcs	r2, r2
    7e20:	427f      	negs	r7, r7
    7e22:	4249      	negs	r1, r1
    7e24:	0c2d      	lsrs	r5, r5, #16
    7e26:	4252      	negs	r2, r2
    7e28:	430f      	orrs	r7, r1
    7e2a:	425b      	negs	r3, r3
    7e2c:	4313      	orrs	r3, r2
    7e2e:	197f      	adds	r7, r7, r5
    7e30:	18ff      	adds	r7, r7, r3
    7e32:	465b      	mov	r3, fp
    7e34:	193c      	adds	r4, r7, r4
    7e36:	0ddb      	lsrs	r3, r3, #23
    7e38:	9a05      	ldr	r2, [sp, #20]
    7e3a:	0264      	lsls	r4, r4, #9
    7e3c:	431c      	orrs	r4, r3
    7e3e:	0243      	lsls	r3, r0, #9
    7e40:	4313      	orrs	r3, r2
    7e42:	1e5d      	subs	r5, r3, #1
    7e44:	41ab      	sbcs	r3, r5
    7e46:	465a      	mov	r2, fp
    7e48:	0dc0      	lsrs	r0, r0, #23
    7e4a:	4303      	orrs	r3, r0
    7e4c:	0252      	lsls	r2, r2, #9
    7e4e:	4313      	orrs	r3, r2
    7e50:	01e2      	lsls	r2, r4, #7
    7e52:	d556      	bpl.n	7f02 <__aeabi_dmul+0x426>
    7e54:	2001      	movs	r0, #1
    7e56:	085a      	lsrs	r2, r3, #1
    7e58:	4003      	ands	r3, r0
    7e5a:	4313      	orrs	r3, r2
    7e5c:	07e2      	lsls	r2, r4, #31
    7e5e:	4313      	orrs	r3, r2
    7e60:	0864      	lsrs	r4, r4, #1
    7e62:	485a      	ldr	r0, [pc, #360]	; (7fcc <__aeabi_dmul+0x4f0>)
    7e64:	4460      	add	r0, ip
    7e66:	2800      	cmp	r0, #0
    7e68:	dd4d      	ble.n	7f06 <__aeabi_dmul+0x42a>
    7e6a:	075a      	lsls	r2, r3, #29
    7e6c:	d009      	beq.n	7e82 <__aeabi_dmul+0x3a6>
    7e6e:	220f      	movs	r2, #15
    7e70:	401a      	ands	r2, r3
    7e72:	2a04      	cmp	r2, #4
    7e74:	d005      	beq.n	7e82 <__aeabi_dmul+0x3a6>
    7e76:	1d1a      	adds	r2, r3, #4
    7e78:	429a      	cmp	r2, r3
    7e7a:	419b      	sbcs	r3, r3
    7e7c:	425b      	negs	r3, r3
    7e7e:	18e4      	adds	r4, r4, r3
    7e80:	0013      	movs	r3, r2
    7e82:	01e2      	lsls	r2, r4, #7
    7e84:	d504      	bpl.n	7e90 <__aeabi_dmul+0x3b4>
    7e86:	2080      	movs	r0, #128	; 0x80
    7e88:	4a51      	ldr	r2, [pc, #324]	; (7fd0 <__aeabi_dmul+0x4f4>)
    7e8a:	00c0      	lsls	r0, r0, #3
    7e8c:	4014      	ands	r4, r2
    7e8e:	4460      	add	r0, ip
    7e90:	4a50      	ldr	r2, [pc, #320]	; (7fd4 <__aeabi_dmul+0x4f8>)
    7e92:	4290      	cmp	r0, r2
    7e94:	dd00      	ble.n	7e98 <__aeabi_dmul+0x3bc>
    7e96:	e6e3      	b.n	7c60 <__aeabi_dmul+0x184>
    7e98:	2501      	movs	r5, #1
    7e9a:	08db      	lsrs	r3, r3, #3
    7e9c:	0762      	lsls	r2, r4, #29
    7e9e:	431a      	orrs	r2, r3
    7ea0:	0264      	lsls	r4, r4, #9
    7ea2:	9b01      	ldr	r3, [sp, #4]
    7ea4:	4691      	mov	r9, r2
    7ea6:	0b22      	lsrs	r2, r4, #12
    7ea8:	0544      	lsls	r4, r0, #21
    7eaa:	0d64      	lsrs	r4, r4, #21
    7eac:	401d      	ands	r5, r3
    7eae:	e67c      	b.n	7baa <__aeabi_dmul+0xce>
    7eb0:	2280      	movs	r2, #128	; 0x80
    7eb2:	4659      	mov	r1, fp
    7eb4:	0312      	lsls	r2, r2, #12
    7eb6:	4211      	tst	r1, r2
    7eb8:	d008      	beq.n	7ecc <__aeabi_dmul+0x3f0>
    7eba:	4214      	tst	r4, r2
    7ebc:	d106      	bne.n	7ecc <__aeabi_dmul+0x3f0>
    7ebe:	4322      	orrs	r2, r4
    7ec0:	0312      	lsls	r2, r2, #12
    7ec2:	0b12      	lsrs	r2, r2, #12
    7ec4:	4645      	mov	r5, r8
    7ec6:	4699      	mov	r9, r3
    7ec8:	4c43      	ldr	r4, [pc, #268]	; (7fd8 <__aeabi_dmul+0x4fc>)
    7eca:	e66e      	b.n	7baa <__aeabi_dmul+0xce>
    7ecc:	465b      	mov	r3, fp
    7ece:	431a      	orrs	r2, r3
    7ed0:	0312      	lsls	r2, r2, #12
    7ed2:	0b12      	lsrs	r2, r2, #12
    7ed4:	4c40      	ldr	r4, [pc, #256]	; (7fd8 <__aeabi_dmul+0x4fc>)
    7ed6:	e668      	b.n	7baa <__aeabi_dmul+0xce>
    7ed8:	0003      	movs	r3, r0
    7eda:	4654      	mov	r4, sl
    7edc:	3b28      	subs	r3, #40	; 0x28
    7ede:	409c      	lsls	r4, r3
    7ee0:	2300      	movs	r3, #0
    7ee2:	e6b9      	b.n	7c58 <__aeabi_dmul+0x17c>
    7ee4:	f000 fd3a 	bl	895c <__clzsi2>
    7ee8:	3020      	adds	r0, #32
    7eea:	e6a6      	b.n	7c3a <__aeabi_dmul+0x15e>
    7eec:	0003      	movs	r3, r0
    7eee:	3b28      	subs	r3, #40	; 0x28
    7ef0:	409f      	lsls	r7, r3
    7ef2:	2300      	movs	r3, #0
    7ef4:	46bb      	mov	fp, r7
    7ef6:	4699      	mov	r9, r3
    7ef8:	e68a      	b.n	7c10 <__aeabi_dmul+0x134>
    7efa:	f000 fd2f 	bl	895c <__clzsi2>
    7efe:	3020      	adds	r0, #32
    7f00:	e674      	b.n	7bec <__aeabi_dmul+0x110>
    7f02:	46b4      	mov	ip, r6
    7f04:	e7ad      	b.n	7e62 <__aeabi_dmul+0x386>
    7f06:	2501      	movs	r5, #1
    7f08:	1a2a      	subs	r2, r5, r0
    7f0a:	2a38      	cmp	r2, #56	; 0x38
    7f0c:	dd06      	ble.n	7f1c <__aeabi_dmul+0x440>
    7f0e:	9b01      	ldr	r3, [sp, #4]
    7f10:	2400      	movs	r4, #0
    7f12:	401d      	ands	r5, r3
    7f14:	2300      	movs	r3, #0
    7f16:	2200      	movs	r2, #0
    7f18:	4699      	mov	r9, r3
    7f1a:	e646      	b.n	7baa <__aeabi_dmul+0xce>
    7f1c:	2a1f      	cmp	r2, #31
    7f1e:	dc21      	bgt.n	7f64 <__aeabi_dmul+0x488>
    7f20:	2520      	movs	r5, #32
    7f22:	0020      	movs	r0, r4
    7f24:	1aad      	subs	r5, r5, r2
    7f26:	001e      	movs	r6, r3
    7f28:	40ab      	lsls	r3, r5
    7f2a:	40a8      	lsls	r0, r5
    7f2c:	40d6      	lsrs	r6, r2
    7f2e:	1e5d      	subs	r5, r3, #1
    7f30:	41ab      	sbcs	r3, r5
    7f32:	4330      	orrs	r0, r6
    7f34:	4318      	orrs	r0, r3
    7f36:	40d4      	lsrs	r4, r2
    7f38:	0743      	lsls	r3, r0, #29
    7f3a:	d009      	beq.n	7f50 <__aeabi_dmul+0x474>
    7f3c:	230f      	movs	r3, #15
    7f3e:	4003      	ands	r3, r0
    7f40:	2b04      	cmp	r3, #4
    7f42:	d005      	beq.n	7f50 <__aeabi_dmul+0x474>
    7f44:	0003      	movs	r3, r0
    7f46:	1d18      	adds	r0, r3, #4
    7f48:	4298      	cmp	r0, r3
    7f4a:	419b      	sbcs	r3, r3
    7f4c:	425b      	negs	r3, r3
    7f4e:	18e4      	adds	r4, r4, r3
    7f50:	0223      	lsls	r3, r4, #8
    7f52:	d521      	bpl.n	7f98 <__aeabi_dmul+0x4bc>
    7f54:	2501      	movs	r5, #1
    7f56:	9b01      	ldr	r3, [sp, #4]
    7f58:	2401      	movs	r4, #1
    7f5a:	401d      	ands	r5, r3
    7f5c:	2300      	movs	r3, #0
    7f5e:	2200      	movs	r2, #0
    7f60:	4699      	mov	r9, r3
    7f62:	e622      	b.n	7baa <__aeabi_dmul+0xce>
    7f64:	251f      	movs	r5, #31
    7f66:	0021      	movs	r1, r4
    7f68:	426d      	negs	r5, r5
    7f6a:	1a28      	subs	r0, r5, r0
    7f6c:	40c1      	lsrs	r1, r0
    7f6e:	0008      	movs	r0, r1
    7f70:	2a20      	cmp	r2, #32
    7f72:	d01d      	beq.n	7fb0 <__aeabi_dmul+0x4d4>
    7f74:	355f      	adds	r5, #95	; 0x5f
    7f76:	1aaa      	subs	r2, r5, r2
    7f78:	4094      	lsls	r4, r2
    7f7a:	4323      	orrs	r3, r4
    7f7c:	1e5c      	subs	r4, r3, #1
    7f7e:	41a3      	sbcs	r3, r4
    7f80:	2507      	movs	r5, #7
    7f82:	4303      	orrs	r3, r0
    7f84:	401d      	ands	r5, r3
    7f86:	2200      	movs	r2, #0
    7f88:	2d00      	cmp	r5, #0
    7f8a:	d009      	beq.n	7fa0 <__aeabi_dmul+0x4c4>
    7f8c:	220f      	movs	r2, #15
    7f8e:	2400      	movs	r4, #0
    7f90:	401a      	ands	r2, r3
    7f92:	0018      	movs	r0, r3
    7f94:	2a04      	cmp	r2, #4
    7f96:	d1d6      	bne.n	7f46 <__aeabi_dmul+0x46a>
    7f98:	0003      	movs	r3, r0
    7f9a:	0765      	lsls	r5, r4, #29
    7f9c:	0264      	lsls	r4, r4, #9
    7f9e:	0b22      	lsrs	r2, r4, #12
    7fa0:	08db      	lsrs	r3, r3, #3
    7fa2:	432b      	orrs	r3, r5
    7fa4:	2501      	movs	r5, #1
    7fa6:	4699      	mov	r9, r3
    7fa8:	9b01      	ldr	r3, [sp, #4]
    7faa:	2400      	movs	r4, #0
    7fac:	401d      	ands	r5, r3
    7fae:	e5fc      	b.n	7baa <__aeabi_dmul+0xce>
    7fb0:	2400      	movs	r4, #0
    7fb2:	e7e2      	b.n	7f7a <__aeabi_dmul+0x49e>
    7fb4:	2280      	movs	r2, #128	; 0x80
    7fb6:	2501      	movs	r5, #1
    7fb8:	0312      	lsls	r2, r2, #12
    7fba:	4322      	orrs	r2, r4
    7fbc:	9901      	ldr	r1, [sp, #4]
    7fbe:	0312      	lsls	r2, r2, #12
    7fc0:	0b12      	lsrs	r2, r2, #12
    7fc2:	400d      	ands	r5, r1
    7fc4:	4699      	mov	r9, r3
    7fc6:	4c04      	ldr	r4, [pc, #16]	; (7fd8 <__aeabi_dmul+0x4fc>)
    7fc8:	e5ef      	b.n	7baa <__aeabi_dmul+0xce>
    7fca:	46c0      	nop			; (mov r8, r8)
    7fcc:	000003ff 	.word	0x000003ff
    7fd0:	feffffff 	.word	0xfeffffff
    7fd4:	000007fe 	.word	0x000007fe
    7fd8:	000007ff 	.word	0x000007ff

00007fdc <__aeabi_dsub>:
    7fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fde:	4646      	mov	r6, r8
    7fe0:	46d6      	mov	lr, sl
    7fe2:	464f      	mov	r7, r9
    7fe4:	030c      	lsls	r4, r1, #12
    7fe6:	b5c0      	push	{r6, r7, lr}
    7fe8:	0fcd      	lsrs	r5, r1, #31
    7fea:	004e      	lsls	r6, r1, #1
    7fec:	0a61      	lsrs	r1, r4, #9
    7fee:	0f44      	lsrs	r4, r0, #29
    7ff0:	430c      	orrs	r4, r1
    7ff2:	00c1      	lsls	r1, r0, #3
    7ff4:	0058      	lsls	r0, r3, #1
    7ff6:	0d40      	lsrs	r0, r0, #21
    7ff8:	4684      	mov	ip, r0
    7ffa:	468a      	mov	sl, r1
    7ffc:	000f      	movs	r7, r1
    7ffe:	0319      	lsls	r1, r3, #12
    8000:	0f50      	lsrs	r0, r2, #29
    8002:	0a49      	lsrs	r1, r1, #9
    8004:	4301      	orrs	r1, r0
    8006:	48c6      	ldr	r0, [pc, #792]	; (8320 <__aeabi_dsub+0x344>)
    8008:	0d76      	lsrs	r6, r6, #21
    800a:	46a8      	mov	r8, r5
    800c:	0fdb      	lsrs	r3, r3, #31
    800e:	00d2      	lsls	r2, r2, #3
    8010:	4584      	cmp	ip, r0
    8012:	d100      	bne.n	8016 <__aeabi_dsub+0x3a>
    8014:	e0d8      	b.n	81c8 <__aeabi_dsub+0x1ec>
    8016:	2001      	movs	r0, #1
    8018:	4043      	eors	r3, r0
    801a:	42ab      	cmp	r3, r5
    801c:	d100      	bne.n	8020 <__aeabi_dsub+0x44>
    801e:	e0a6      	b.n	816e <__aeabi_dsub+0x192>
    8020:	4660      	mov	r0, ip
    8022:	1a35      	subs	r5, r6, r0
    8024:	2d00      	cmp	r5, #0
    8026:	dc00      	bgt.n	802a <__aeabi_dsub+0x4e>
    8028:	e105      	b.n	8236 <__aeabi_dsub+0x25a>
    802a:	2800      	cmp	r0, #0
    802c:	d110      	bne.n	8050 <__aeabi_dsub+0x74>
    802e:	000b      	movs	r3, r1
    8030:	4313      	orrs	r3, r2
    8032:	d100      	bne.n	8036 <__aeabi_dsub+0x5a>
    8034:	e0d7      	b.n	81e6 <__aeabi_dsub+0x20a>
    8036:	1e6b      	subs	r3, r5, #1
    8038:	2b00      	cmp	r3, #0
    803a:	d000      	beq.n	803e <__aeabi_dsub+0x62>
    803c:	e14b      	b.n	82d6 <__aeabi_dsub+0x2fa>
    803e:	4653      	mov	r3, sl
    8040:	1a9f      	subs	r7, r3, r2
    8042:	45ba      	cmp	sl, r7
    8044:	4180      	sbcs	r0, r0
    8046:	1a64      	subs	r4, r4, r1
    8048:	4240      	negs	r0, r0
    804a:	1a24      	subs	r4, r4, r0
    804c:	2601      	movs	r6, #1
    804e:	e01e      	b.n	808e <__aeabi_dsub+0xb2>
    8050:	4bb3      	ldr	r3, [pc, #716]	; (8320 <__aeabi_dsub+0x344>)
    8052:	429e      	cmp	r6, r3
    8054:	d048      	beq.n	80e8 <__aeabi_dsub+0x10c>
    8056:	2380      	movs	r3, #128	; 0x80
    8058:	041b      	lsls	r3, r3, #16
    805a:	4319      	orrs	r1, r3
    805c:	2d38      	cmp	r5, #56	; 0x38
    805e:	dd00      	ble.n	8062 <__aeabi_dsub+0x86>
    8060:	e119      	b.n	8296 <__aeabi_dsub+0x2ba>
    8062:	2d1f      	cmp	r5, #31
    8064:	dd00      	ble.n	8068 <__aeabi_dsub+0x8c>
    8066:	e14c      	b.n	8302 <__aeabi_dsub+0x326>
    8068:	2320      	movs	r3, #32
    806a:	000f      	movs	r7, r1
    806c:	1b5b      	subs	r3, r3, r5
    806e:	0010      	movs	r0, r2
    8070:	409a      	lsls	r2, r3
    8072:	409f      	lsls	r7, r3
    8074:	40e8      	lsrs	r0, r5
    8076:	1e53      	subs	r3, r2, #1
    8078:	419a      	sbcs	r2, r3
    807a:	40e9      	lsrs	r1, r5
    807c:	4307      	orrs	r7, r0
    807e:	4317      	orrs	r7, r2
    8080:	4653      	mov	r3, sl
    8082:	1bdf      	subs	r7, r3, r7
    8084:	1a61      	subs	r1, r4, r1
    8086:	45ba      	cmp	sl, r7
    8088:	41a4      	sbcs	r4, r4
    808a:	4264      	negs	r4, r4
    808c:	1b0c      	subs	r4, r1, r4
    808e:	0223      	lsls	r3, r4, #8
    8090:	d400      	bmi.n	8094 <__aeabi_dsub+0xb8>
    8092:	e0c5      	b.n	8220 <__aeabi_dsub+0x244>
    8094:	0264      	lsls	r4, r4, #9
    8096:	0a65      	lsrs	r5, r4, #9
    8098:	2d00      	cmp	r5, #0
    809a:	d100      	bne.n	809e <__aeabi_dsub+0xc2>
    809c:	e0f6      	b.n	828c <__aeabi_dsub+0x2b0>
    809e:	0028      	movs	r0, r5
    80a0:	f000 fc5c 	bl	895c <__clzsi2>
    80a4:	0003      	movs	r3, r0
    80a6:	3b08      	subs	r3, #8
    80a8:	2b1f      	cmp	r3, #31
    80aa:	dd00      	ble.n	80ae <__aeabi_dsub+0xd2>
    80ac:	e0e9      	b.n	8282 <__aeabi_dsub+0x2a6>
    80ae:	2220      	movs	r2, #32
    80b0:	003c      	movs	r4, r7
    80b2:	1ad2      	subs	r2, r2, r3
    80b4:	409d      	lsls	r5, r3
    80b6:	40d4      	lsrs	r4, r2
    80b8:	409f      	lsls	r7, r3
    80ba:	4325      	orrs	r5, r4
    80bc:	429e      	cmp	r6, r3
    80be:	dd00      	ble.n	80c2 <__aeabi_dsub+0xe6>
    80c0:	e0db      	b.n	827a <__aeabi_dsub+0x29e>
    80c2:	1b9e      	subs	r6, r3, r6
    80c4:	1c73      	adds	r3, r6, #1
    80c6:	2b1f      	cmp	r3, #31
    80c8:	dd00      	ble.n	80cc <__aeabi_dsub+0xf0>
    80ca:	e10a      	b.n	82e2 <__aeabi_dsub+0x306>
    80cc:	2220      	movs	r2, #32
    80ce:	0038      	movs	r0, r7
    80d0:	1ad2      	subs	r2, r2, r3
    80d2:	0029      	movs	r1, r5
    80d4:	4097      	lsls	r7, r2
    80d6:	002c      	movs	r4, r5
    80d8:	4091      	lsls	r1, r2
    80da:	40d8      	lsrs	r0, r3
    80dc:	1e7a      	subs	r2, r7, #1
    80de:	4197      	sbcs	r7, r2
    80e0:	40dc      	lsrs	r4, r3
    80e2:	2600      	movs	r6, #0
    80e4:	4301      	orrs	r1, r0
    80e6:	430f      	orrs	r7, r1
    80e8:	077b      	lsls	r3, r7, #29
    80ea:	d009      	beq.n	8100 <__aeabi_dsub+0x124>
    80ec:	230f      	movs	r3, #15
    80ee:	403b      	ands	r3, r7
    80f0:	2b04      	cmp	r3, #4
    80f2:	d005      	beq.n	8100 <__aeabi_dsub+0x124>
    80f4:	1d3b      	adds	r3, r7, #4
    80f6:	42bb      	cmp	r3, r7
    80f8:	41bf      	sbcs	r7, r7
    80fa:	427f      	negs	r7, r7
    80fc:	19e4      	adds	r4, r4, r7
    80fe:	001f      	movs	r7, r3
    8100:	0223      	lsls	r3, r4, #8
    8102:	d525      	bpl.n	8150 <__aeabi_dsub+0x174>
    8104:	4b86      	ldr	r3, [pc, #536]	; (8320 <__aeabi_dsub+0x344>)
    8106:	3601      	adds	r6, #1
    8108:	429e      	cmp	r6, r3
    810a:	d100      	bne.n	810e <__aeabi_dsub+0x132>
    810c:	e0af      	b.n	826e <__aeabi_dsub+0x292>
    810e:	4b85      	ldr	r3, [pc, #532]	; (8324 <__aeabi_dsub+0x348>)
    8110:	2501      	movs	r5, #1
    8112:	401c      	ands	r4, r3
    8114:	4643      	mov	r3, r8
    8116:	0762      	lsls	r2, r4, #29
    8118:	08ff      	lsrs	r7, r7, #3
    811a:	0264      	lsls	r4, r4, #9
    811c:	0576      	lsls	r6, r6, #21
    811e:	4317      	orrs	r7, r2
    8120:	0b24      	lsrs	r4, r4, #12
    8122:	0d76      	lsrs	r6, r6, #21
    8124:	401d      	ands	r5, r3
    8126:	2100      	movs	r1, #0
    8128:	0324      	lsls	r4, r4, #12
    812a:	0b23      	lsrs	r3, r4, #12
    812c:	0d0c      	lsrs	r4, r1, #20
    812e:	4a7e      	ldr	r2, [pc, #504]	; (8328 <__aeabi_dsub+0x34c>)
    8130:	0524      	lsls	r4, r4, #20
    8132:	431c      	orrs	r4, r3
    8134:	4014      	ands	r4, r2
    8136:	0533      	lsls	r3, r6, #20
    8138:	4323      	orrs	r3, r4
    813a:	005b      	lsls	r3, r3, #1
    813c:	07ed      	lsls	r5, r5, #31
    813e:	085b      	lsrs	r3, r3, #1
    8140:	432b      	orrs	r3, r5
    8142:	0038      	movs	r0, r7
    8144:	0019      	movs	r1, r3
    8146:	bc1c      	pop	{r2, r3, r4}
    8148:	4690      	mov	r8, r2
    814a:	4699      	mov	r9, r3
    814c:	46a2      	mov	sl, r4
    814e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8150:	2501      	movs	r5, #1
    8152:	4643      	mov	r3, r8
    8154:	0762      	lsls	r2, r4, #29
    8156:	08ff      	lsrs	r7, r7, #3
    8158:	4317      	orrs	r7, r2
    815a:	08e4      	lsrs	r4, r4, #3
    815c:	401d      	ands	r5, r3
    815e:	4b70      	ldr	r3, [pc, #448]	; (8320 <__aeabi_dsub+0x344>)
    8160:	429e      	cmp	r6, r3
    8162:	d036      	beq.n	81d2 <__aeabi_dsub+0x1f6>
    8164:	0324      	lsls	r4, r4, #12
    8166:	0576      	lsls	r6, r6, #21
    8168:	0b24      	lsrs	r4, r4, #12
    816a:	0d76      	lsrs	r6, r6, #21
    816c:	e7db      	b.n	8126 <__aeabi_dsub+0x14a>
    816e:	4663      	mov	r3, ip
    8170:	1af3      	subs	r3, r6, r3
    8172:	2b00      	cmp	r3, #0
    8174:	dc00      	bgt.n	8178 <__aeabi_dsub+0x19c>
    8176:	e094      	b.n	82a2 <__aeabi_dsub+0x2c6>
    8178:	4660      	mov	r0, ip
    817a:	2800      	cmp	r0, #0
    817c:	d035      	beq.n	81ea <__aeabi_dsub+0x20e>
    817e:	4868      	ldr	r0, [pc, #416]	; (8320 <__aeabi_dsub+0x344>)
    8180:	4286      	cmp	r6, r0
    8182:	d0b1      	beq.n	80e8 <__aeabi_dsub+0x10c>
    8184:	2780      	movs	r7, #128	; 0x80
    8186:	043f      	lsls	r7, r7, #16
    8188:	4339      	orrs	r1, r7
    818a:	2b38      	cmp	r3, #56	; 0x38
    818c:	dc00      	bgt.n	8190 <__aeabi_dsub+0x1b4>
    818e:	e0fd      	b.n	838c <__aeabi_dsub+0x3b0>
    8190:	430a      	orrs	r2, r1
    8192:	0017      	movs	r7, r2
    8194:	2100      	movs	r1, #0
    8196:	1e7a      	subs	r2, r7, #1
    8198:	4197      	sbcs	r7, r2
    819a:	4457      	add	r7, sl
    819c:	4557      	cmp	r7, sl
    819e:	4180      	sbcs	r0, r0
    81a0:	1909      	adds	r1, r1, r4
    81a2:	4244      	negs	r4, r0
    81a4:	190c      	adds	r4, r1, r4
    81a6:	0223      	lsls	r3, r4, #8
    81a8:	d53a      	bpl.n	8220 <__aeabi_dsub+0x244>
    81aa:	4b5d      	ldr	r3, [pc, #372]	; (8320 <__aeabi_dsub+0x344>)
    81ac:	3601      	adds	r6, #1
    81ae:	429e      	cmp	r6, r3
    81b0:	d100      	bne.n	81b4 <__aeabi_dsub+0x1d8>
    81b2:	e14b      	b.n	844c <__aeabi_dsub+0x470>
    81b4:	2201      	movs	r2, #1
    81b6:	4b5b      	ldr	r3, [pc, #364]	; (8324 <__aeabi_dsub+0x348>)
    81b8:	401c      	ands	r4, r3
    81ba:	087b      	lsrs	r3, r7, #1
    81bc:	4017      	ands	r7, r2
    81be:	431f      	orrs	r7, r3
    81c0:	07e2      	lsls	r2, r4, #31
    81c2:	4317      	orrs	r7, r2
    81c4:	0864      	lsrs	r4, r4, #1
    81c6:	e78f      	b.n	80e8 <__aeabi_dsub+0x10c>
    81c8:	0008      	movs	r0, r1
    81ca:	4310      	orrs	r0, r2
    81cc:	d000      	beq.n	81d0 <__aeabi_dsub+0x1f4>
    81ce:	e724      	b.n	801a <__aeabi_dsub+0x3e>
    81d0:	e721      	b.n	8016 <__aeabi_dsub+0x3a>
    81d2:	0023      	movs	r3, r4
    81d4:	433b      	orrs	r3, r7
    81d6:	d100      	bne.n	81da <__aeabi_dsub+0x1fe>
    81d8:	e1b9      	b.n	854e <__aeabi_dsub+0x572>
    81da:	2280      	movs	r2, #128	; 0x80
    81dc:	0312      	lsls	r2, r2, #12
    81de:	4314      	orrs	r4, r2
    81e0:	0324      	lsls	r4, r4, #12
    81e2:	0b24      	lsrs	r4, r4, #12
    81e4:	e79f      	b.n	8126 <__aeabi_dsub+0x14a>
    81e6:	002e      	movs	r6, r5
    81e8:	e77e      	b.n	80e8 <__aeabi_dsub+0x10c>
    81ea:	0008      	movs	r0, r1
    81ec:	4310      	orrs	r0, r2
    81ee:	d100      	bne.n	81f2 <__aeabi_dsub+0x216>
    81f0:	e0ca      	b.n	8388 <__aeabi_dsub+0x3ac>
    81f2:	1e58      	subs	r0, r3, #1
    81f4:	4684      	mov	ip, r0
    81f6:	2800      	cmp	r0, #0
    81f8:	d000      	beq.n	81fc <__aeabi_dsub+0x220>
    81fa:	e0e7      	b.n	83cc <__aeabi_dsub+0x3f0>
    81fc:	4452      	add	r2, sl
    81fe:	4552      	cmp	r2, sl
    8200:	4180      	sbcs	r0, r0
    8202:	1864      	adds	r4, r4, r1
    8204:	4240      	negs	r0, r0
    8206:	1824      	adds	r4, r4, r0
    8208:	0017      	movs	r7, r2
    820a:	2601      	movs	r6, #1
    820c:	0223      	lsls	r3, r4, #8
    820e:	d507      	bpl.n	8220 <__aeabi_dsub+0x244>
    8210:	2602      	movs	r6, #2
    8212:	e7cf      	b.n	81b4 <__aeabi_dsub+0x1d8>
    8214:	4664      	mov	r4, ip
    8216:	432c      	orrs	r4, r5
    8218:	d100      	bne.n	821c <__aeabi_dsub+0x240>
    821a:	e1b3      	b.n	8584 <__aeabi_dsub+0x5a8>
    821c:	002c      	movs	r4, r5
    821e:	4667      	mov	r7, ip
    8220:	077b      	lsls	r3, r7, #29
    8222:	d000      	beq.n	8226 <__aeabi_dsub+0x24a>
    8224:	e762      	b.n	80ec <__aeabi_dsub+0x110>
    8226:	0763      	lsls	r3, r4, #29
    8228:	08ff      	lsrs	r7, r7, #3
    822a:	431f      	orrs	r7, r3
    822c:	2501      	movs	r5, #1
    822e:	4643      	mov	r3, r8
    8230:	08e4      	lsrs	r4, r4, #3
    8232:	401d      	ands	r5, r3
    8234:	e793      	b.n	815e <__aeabi_dsub+0x182>
    8236:	2d00      	cmp	r5, #0
    8238:	d178      	bne.n	832c <__aeabi_dsub+0x350>
    823a:	1c75      	adds	r5, r6, #1
    823c:	056d      	lsls	r5, r5, #21
    823e:	0d6d      	lsrs	r5, r5, #21
    8240:	2d01      	cmp	r5, #1
    8242:	dc00      	bgt.n	8246 <__aeabi_dsub+0x26a>
    8244:	e0f2      	b.n	842c <__aeabi_dsub+0x450>
    8246:	4650      	mov	r0, sl
    8248:	1a80      	subs	r0, r0, r2
    824a:	4582      	cmp	sl, r0
    824c:	41bf      	sbcs	r7, r7
    824e:	1a65      	subs	r5, r4, r1
    8250:	427f      	negs	r7, r7
    8252:	1bed      	subs	r5, r5, r7
    8254:	4684      	mov	ip, r0
    8256:	0228      	lsls	r0, r5, #8
    8258:	d400      	bmi.n	825c <__aeabi_dsub+0x280>
    825a:	e08c      	b.n	8376 <__aeabi_dsub+0x39a>
    825c:	4650      	mov	r0, sl
    825e:	1a17      	subs	r7, r2, r0
    8260:	42ba      	cmp	r2, r7
    8262:	4192      	sbcs	r2, r2
    8264:	1b0c      	subs	r4, r1, r4
    8266:	4255      	negs	r5, r2
    8268:	1b65      	subs	r5, r4, r5
    826a:	4698      	mov	r8, r3
    826c:	e714      	b.n	8098 <__aeabi_dsub+0xbc>
    826e:	2501      	movs	r5, #1
    8270:	4643      	mov	r3, r8
    8272:	2400      	movs	r4, #0
    8274:	401d      	ands	r5, r3
    8276:	2700      	movs	r7, #0
    8278:	e755      	b.n	8126 <__aeabi_dsub+0x14a>
    827a:	4c2a      	ldr	r4, [pc, #168]	; (8324 <__aeabi_dsub+0x348>)
    827c:	1af6      	subs	r6, r6, r3
    827e:	402c      	ands	r4, r5
    8280:	e732      	b.n	80e8 <__aeabi_dsub+0x10c>
    8282:	003d      	movs	r5, r7
    8284:	3828      	subs	r0, #40	; 0x28
    8286:	4085      	lsls	r5, r0
    8288:	2700      	movs	r7, #0
    828a:	e717      	b.n	80bc <__aeabi_dsub+0xe0>
    828c:	0038      	movs	r0, r7
    828e:	f000 fb65 	bl	895c <__clzsi2>
    8292:	3020      	adds	r0, #32
    8294:	e706      	b.n	80a4 <__aeabi_dsub+0xc8>
    8296:	430a      	orrs	r2, r1
    8298:	0017      	movs	r7, r2
    829a:	2100      	movs	r1, #0
    829c:	1e7a      	subs	r2, r7, #1
    829e:	4197      	sbcs	r7, r2
    82a0:	e6ee      	b.n	8080 <__aeabi_dsub+0xa4>
    82a2:	2b00      	cmp	r3, #0
    82a4:	d000      	beq.n	82a8 <__aeabi_dsub+0x2cc>
    82a6:	e0e5      	b.n	8474 <__aeabi_dsub+0x498>
    82a8:	1c73      	adds	r3, r6, #1
    82aa:	469c      	mov	ip, r3
    82ac:	055b      	lsls	r3, r3, #21
    82ae:	0d5b      	lsrs	r3, r3, #21
    82b0:	2b01      	cmp	r3, #1
    82b2:	dc00      	bgt.n	82b6 <__aeabi_dsub+0x2da>
    82b4:	e09f      	b.n	83f6 <__aeabi_dsub+0x41a>
    82b6:	4b1a      	ldr	r3, [pc, #104]	; (8320 <__aeabi_dsub+0x344>)
    82b8:	459c      	cmp	ip, r3
    82ba:	d100      	bne.n	82be <__aeabi_dsub+0x2e2>
    82bc:	e0c5      	b.n	844a <__aeabi_dsub+0x46e>
    82be:	4452      	add	r2, sl
    82c0:	4552      	cmp	r2, sl
    82c2:	4180      	sbcs	r0, r0
    82c4:	1864      	adds	r4, r4, r1
    82c6:	4240      	negs	r0, r0
    82c8:	1824      	adds	r4, r4, r0
    82ca:	07e7      	lsls	r7, r4, #31
    82cc:	0852      	lsrs	r2, r2, #1
    82ce:	4317      	orrs	r7, r2
    82d0:	0864      	lsrs	r4, r4, #1
    82d2:	4666      	mov	r6, ip
    82d4:	e708      	b.n	80e8 <__aeabi_dsub+0x10c>
    82d6:	4812      	ldr	r0, [pc, #72]	; (8320 <__aeabi_dsub+0x344>)
    82d8:	4285      	cmp	r5, r0
    82da:	d100      	bne.n	82de <__aeabi_dsub+0x302>
    82dc:	e085      	b.n	83ea <__aeabi_dsub+0x40e>
    82de:	001d      	movs	r5, r3
    82e0:	e6bc      	b.n	805c <__aeabi_dsub+0x80>
    82e2:	0029      	movs	r1, r5
    82e4:	3e1f      	subs	r6, #31
    82e6:	40f1      	lsrs	r1, r6
    82e8:	2b20      	cmp	r3, #32
    82ea:	d100      	bne.n	82ee <__aeabi_dsub+0x312>
    82ec:	e07f      	b.n	83ee <__aeabi_dsub+0x412>
    82ee:	2240      	movs	r2, #64	; 0x40
    82f0:	1ad3      	subs	r3, r2, r3
    82f2:	409d      	lsls	r5, r3
    82f4:	432f      	orrs	r7, r5
    82f6:	1e7d      	subs	r5, r7, #1
    82f8:	41af      	sbcs	r7, r5
    82fa:	2400      	movs	r4, #0
    82fc:	430f      	orrs	r7, r1
    82fe:	2600      	movs	r6, #0
    8300:	e78e      	b.n	8220 <__aeabi_dsub+0x244>
    8302:	002b      	movs	r3, r5
    8304:	000f      	movs	r7, r1
    8306:	3b20      	subs	r3, #32
    8308:	40df      	lsrs	r7, r3
    830a:	2d20      	cmp	r5, #32
    830c:	d071      	beq.n	83f2 <__aeabi_dsub+0x416>
    830e:	2340      	movs	r3, #64	; 0x40
    8310:	1b5d      	subs	r5, r3, r5
    8312:	40a9      	lsls	r1, r5
    8314:	430a      	orrs	r2, r1
    8316:	1e51      	subs	r1, r2, #1
    8318:	418a      	sbcs	r2, r1
    831a:	2100      	movs	r1, #0
    831c:	4317      	orrs	r7, r2
    831e:	e6af      	b.n	8080 <__aeabi_dsub+0xa4>
    8320:	000007ff 	.word	0x000007ff
    8324:	ff7fffff 	.word	0xff7fffff
    8328:	800fffff 	.word	0x800fffff
    832c:	2e00      	cmp	r6, #0
    832e:	d03e      	beq.n	83ae <__aeabi_dsub+0x3d2>
    8330:	4eb3      	ldr	r6, [pc, #716]	; (8600 <__aeabi_dsub+0x624>)
    8332:	45b4      	cmp	ip, r6
    8334:	d045      	beq.n	83c2 <__aeabi_dsub+0x3e6>
    8336:	2680      	movs	r6, #128	; 0x80
    8338:	0436      	lsls	r6, r6, #16
    833a:	426d      	negs	r5, r5
    833c:	4334      	orrs	r4, r6
    833e:	2d38      	cmp	r5, #56	; 0x38
    8340:	dd00      	ble.n	8344 <__aeabi_dsub+0x368>
    8342:	e0a8      	b.n	8496 <__aeabi_dsub+0x4ba>
    8344:	2d1f      	cmp	r5, #31
    8346:	dd00      	ble.n	834a <__aeabi_dsub+0x36e>
    8348:	e11f      	b.n	858a <__aeabi_dsub+0x5ae>
    834a:	2620      	movs	r6, #32
    834c:	0027      	movs	r7, r4
    834e:	4650      	mov	r0, sl
    8350:	1b76      	subs	r6, r6, r5
    8352:	40b7      	lsls	r7, r6
    8354:	40e8      	lsrs	r0, r5
    8356:	4307      	orrs	r7, r0
    8358:	4650      	mov	r0, sl
    835a:	40b0      	lsls	r0, r6
    835c:	1e46      	subs	r6, r0, #1
    835e:	41b0      	sbcs	r0, r6
    8360:	40ec      	lsrs	r4, r5
    8362:	4338      	orrs	r0, r7
    8364:	1a17      	subs	r7, r2, r0
    8366:	42ba      	cmp	r2, r7
    8368:	4192      	sbcs	r2, r2
    836a:	1b0c      	subs	r4, r1, r4
    836c:	4252      	negs	r2, r2
    836e:	1aa4      	subs	r4, r4, r2
    8370:	4666      	mov	r6, ip
    8372:	4698      	mov	r8, r3
    8374:	e68b      	b.n	808e <__aeabi_dsub+0xb2>
    8376:	4664      	mov	r4, ip
    8378:	4667      	mov	r7, ip
    837a:	432c      	orrs	r4, r5
    837c:	d000      	beq.n	8380 <__aeabi_dsub+0x3a4>
    837e:	e68b      	b.n	8098 <__aeabi_dsub+0xbc>
    8380:	2500      	movs	r5, #0
    8382:	2600      	movs	r6, #0
    8384:	2700      	movs	r7, #0
    8386:	e6ea      	b.n	815e <__aeabi_dsub+0x182>
    8388:	001e      	movs	r6, r3
    838a:	e6ad      	b.n	80e8 <__aeabi_dsub+0x10c>
    838c:	2b1f      	cmp	r3, #31
    838e:	dc60      	bgt.n	8452 <__aeabi_dsub+0x476>
    8390:	2720      	movs	r7, #32
    8392:	1af8      	subs	r0, r7, r3
    8394:	000f      	movs	r7, r1
    8396:	4684      	mov	ip, r0
    8398:	4087      	lsls	r7, r0
    839a:	0010      	movs	r0, r2
    839c:	40d8      	lsrs	r0, r3
    839e:	4307      	orrs	r7, r0
    83a0:	4660      	mov	r0, ip
    83a2:	4082      	lsls	r2, r0
    83a4:	1e50      	subs	r0, r2, #1
    83a6:	4182      	sbcs	r2, r0
    83a8:	40d9      	lsrs	r1, r3
    83aa:	4317      	orrs	r7, r2
    83ac:	e6f5      	b.n	819a <__aeabi_dsub+0x1be>
    83ae:	0026      	movs	r6, r4
    83b0:	4650      	mov	r0, sl
    83b2:	4306      	orrs	r6, r0
    83b4:	d005      	beq.n	83c2 <__aeabi_dsub+0x3e6>
    83b6:	43ed      	mvns	r5, r5
    83b8:	2d00      	cmp	r5, #0
    83ba:	d0d3      	beq.n	8364 <__aeabi_dsub+0x388>
    83bc:	4e90      	ldr	r6, [pc, #576]	; (8600 <__aeabi_dsub+0x624>)
    83be:	45b4      	cmp	ip, r6
    83c0:	d1bd      	bne.n	833e <__aeabi_dsub+0x362>
    83c2:	000c      	movs	r4, r1
    83c4:	0017      	movs	r7, r2
    83c6:	4666      	mov	r6, ip
    83c8:	4698      	mov	r8, r3
    83ca:	e68d      	b.n	80e8 <__aeabi_dsub+0x10c>
    83cc:	488c      	ldr	r0, [pc, #560]	; (8600 <__aeabi_dsub+0x624>)
    83ce:	4283      	cmp	r3, r0
    83d0:	d00b      	beq.n	83ea <__aeabi_dsub+0x40e>
    83d2:	4663      	mov	r3, ip
    83d4:	e6d9      	b.n	818a <__aeabi_dsub+0x1ae>
    83d6:	2d00      	cmp	r5, #0
    83d8:	d000      	beq.n	83dc <__aeabi_dsub+0x400>
    83da:	e096      	b.n	850a <__aeabi_dsub+0x52e>
    83dc:	0008      	movs	r0, r1
    83de:	4310      	orrs	r0, r2
    83e0:	d100      	bne.n	83e4 <__aeabi_dsub+0x408>
    83e2:	e0e2      	b.n	85aa <__aeabi_dsub+0x5ce>
    83e4:	000c      	movs	r4, r1
    83e6:	0017      	movs	r7, r2
    83e8:	4698      	mov	r8, r3
    83ea:	4e85      	ldr	r6, [pc, #532]	; (8600 <__aeabi_dsub+0x624>)
    83ec:	e67c      	b.n	80e8 <__aeabi_dsub+0x10c>
    83ee:	2500      	movs	r5, #0
    83f0:	e780      	b.n	82f4 <__aeabi_dsub+0x318>
    83f2:	2100      	movs	r1, #0
    83f4:	e78e      	b.n	8314 <__aeabi_dsub+0x338>
    83f6:	0023      	movs	r3, r4
    83f8:	4650      	mov	r0, sl
    83fa:	4303      	orrs	r3, r0
    83fc:	2e00      	cmp	r6, #0
    83fe:	d000      	beq.n	8402 <__aeabi_dsub+0x426>
    8400:	e0a8      	b.n	8554 <__aeabi_dsub+0x578>
    8402:	2b00      	cmp	r3, #0
    8404:	d100      	bne.n	8408 <__aeabi_dsub+0x42c>
    8406:	e0de      	b.n	85c6 <__aeabi_dsub+0x5ea>
    8408:	000b      	movs	r3, r1
    840a:	4313      	orrs	r3, r2
    840c:	d100      	bne.n	8410 <__aeabi_dsub+0x434>
    840e:	e66b      	b.n	80e8 <__aeabi_dsub+0x10c>
    8410:	4452      	add	r2, sl
    8412:	4552      	cmp	r2, sl
    8414:	4180      	sbcs	r0, r0
    8416:	1864      	adds	r4, r4, r1
    8418:	4240      	negs	r0, r0
    841a:	1824      	adds	r4, r4, r0
    841c:	0017      	movs	r7, r2
    841e:	0223      	lsls	r3, r4, #8
    8420:	d400      	bmi.n	8424 <__aeabi_dsub+0x448>
    8422:	e6fd      	b.n	8220 <__aeabi_dsub+0x244>
    8424:	4b77      	ldr	r3, [pc, #476]	; (8604 <__aeabi_dsub+0x628>)
    8426:	4666      	mov	r6, ip
    8428:	401c      	ands	r4, r3
    842a:	e65d      	b.n	80e8 <__aeabi_dsub+0x10c>
    842c:	0025      	movs	r5, r4
    842e:	4650      	mov	r0, sl
    8430:	4305      	orrs	r5, r0
    8432:	2e00      	cmp	r6, #0
    8434:	d1cf      	bne.n	83d6 <__aeabi_dsub+0x3fa>
    8436:	2d00      	cmp	r5, #0
    8438:	d14f      	bne.n	84da <__aeabi_dsub+0x4fe>
    843a:	000c      	movs	r4, r1
    843c:	4314      	orrs	r4, r2
    843e:	d100      	bne.n	8442 <__aeabi_dsub+0x466>
    8440:	e0a0      	b.n	8584 <__aeabi_dsub+0x5a8>
    8442:	000c      	movs	r4, r1
    8444:	0017      	movs	r7, r2
    8446:	4698      	mov	r8, r3
    8448:	e64e      	b.n	80e8 <__aeabi_dsub+0x10c>
    844a:	4666      	mov	r6, ip
    844c:	2400      	movs	r4, #0
    844e:	2700      	movs	r7, #0
    8450:	e685      	b.n	815e <__aeabi_dsub+0x182>
    8452:	001f      	movs	r7, r3
    8454:	0008      	movs	r0, r1
    8456:	3f20      	subs	r7, #32
    8458:	40f8      	lsrs	r0, r7
    845a:	0007      	movs	r7, r0
    845c:	2b20      	cmp	r3, #32
    845e:	d100      	bne.n	8462 <__aeabi_dsub+0x486>
    8460:	e08e      	b.n	8580 <__aeabi_dsub+0x5a4>
    8462:	2040      	movs	r0, #64	; 0x40
    8464:	1ac3      	subs	r3, r0, r3
    8466:	4099      	lsls	r1, r3
    8468:	430a      	orrs	r2, r1
    846a:	1e51      	subs	r1, r2, #1
    846c:	418a      	sbcs	r2, r1
    846e:	2100      	movs	r1, #0
    8470:	4317      	orrs	r7, r2
    8472:	e692      	b.n	819a <__aeabi_dsub+0x1be>
    8474:	2e00      	cmp	r6, #0
    8476:	d114      	bne.n	84a2 <__aeabi_dsub+0x4c6>
    8478:	0026      	movs	r6, r4
    847a:	4650      	mov	r0, sl
    847c:	4306      	orrs	r6, r0
    847e:	d062      	beq.n	8546 <__aeabi_dsub+0x56a>
    8480:	43db      	mvns	r3, r3
    8482:	2b00      	cmp	r3, #0
    8484:	d15c      	bne.n	8540 <__aeabi_dsub+0x564>
    8486:	1887      	adds	r7, r0, r2
    8488:	4297      	cmp	r7, r2
    848a:	4192      	sbcs	r2, r2
    848c:	1864      	adds	r4, r4, r1
    848e:	4252      	negs	r2, r2
    8490:	18a4      	adds	r4, r4, r2
    8492:	4666      	mov	r6, ip
    8494:	e687      	b.n	81a6 <__aeabi_dsub+0x1ca>
    8496:	4650      	mov	r0, sl
    8498:	4320      	orrs	r0, r4
    849a:	1e44      	subs	r4, r0, #1
    849c:	41a0      	sbcs	r0, r4
    849e:	2400      	movs	r4, #0
    84a0:	e760      	b.n	8364 <__aeabi_dsub+0x388>
    84a2:	4e57      	ldr	r6, [pc, #348]	; (8600 <__aeabi_dsub+0x624>)
    84a4:	45b4      	cmp	ip, r6
    84a6:	d04e      	beq.n	8546 <__aeabi_dsub+0x56a>
    84a8:	2680      	movs	r6, #128	; 0x80
    84aa:	0436      	lsls	r6, r6, #16
    84ac:	425b      	negs	r3, r3
    84ae:	4334      	orrs	r4, r6
    84b0:	2b38      	cmp	r3, #56	; 0x38
    84b2:	dd00      	ble.n	84b6 <__aeabi_dsub+0x4da>
    84b4:	e07f      	b.n	85b6 <__aeabi_dsub+0x5da>
    84b6:	2b1f      	cmp	r3, #31
    84b8:	dd00      	ble.n	84bc <__aeabi_dsub+0x4e0>
    84ba:	e08b      	b.n	85d4 <__aeabi_dsub+0x5f8>
    84bc:	2620      	movs	r6, #32
    84be:	0027      	movs	r7, r4
    84c0:	4650      	mov	r0, sl
    84c2:	1af6      	subs	r6, r6, r3
    84c4:	40b7      	lsls	r7, r6
    84c6:	40d8      	lsrs	r0, r3
    84c8:	4307      	orrs	r7, r0
    84ca:	4650      	mov	r0, sl
    84cc:	40b0      	lsls	r0, r6
    84ce:	1e46      	subs	r6, r0, #1
    84d0:	41b0      	sbcs	r0, r6
    84d2:	4307      	orrs	r7, r0
    84d4:	40dc      	lsrs	r4, r3
    84d6:	18bf      	adds	r7, r7, r2
    84d8:	e7d6      	b.n	8488 <__aeabi_dsub+0x4ac>
    84da:	000d      	movs	r5, r1
    84dc:	4315      	orrs	r5, r2
    84de:	d100      	bne.n	84e2 <__aeabi_dsub+0x506>
    84e0:	e602      	b.n	80e8 <__aeabi_dsub+0x10c>
    84e2:	4650      	mov	r0, sl
    84e4:	1a80      	subs	r0, r0, r2
    84e6:	4582      	cmp	sl, r0
    84e8:	41bf      	sbcs	r7, r7
    84ea:	1a65      	subs	r5, r4, r1
    84ec:	427f      	negs	r7, r7
    84ee:	1bed      	subs	r5, r5, r7
    84f0:	4684      	mov	ip, r0
    84f2:	0228      	lsls	r0, r5, #8
    84f4:	d400      	bmi.n	84f8 <__aeabi_dsub+0x51c>
    84f6:	e68d      	b.n	8214 <__aeabi_dsub+0x238>
    84f8:	4650      	mov	r0, sl
    84fa:	1a17      	subs	r7, r2, r0
    84fc:	42ba      	cmp	r2, r7
    84fe:	4192      	sbcs	r2, r2
    8500:	1b0c      	subs	r4, r1, r4
    8502:	4252      	negs	r2, r2
    8504:	1aa4      	subs	r4, r4, r2
    8506:	4698      	mov	r8, r3
    8508:	e5ee      	b.n	80e8 <__aeabi_dsub+0x10c>
    850a:	000d      	movs	r5, r1
    850c:	4315      	orrs	r5, r2
    850e:	d100      	bne.n	8512 <__aeabi_dsub+0x536>
    8510:	e76b      	b.n	83ea <__aeabi_dsub+0x40e>
    8512:	4650      	mov	r0, sl
    8514:	0767      	lsls	r7, r4, #29
    8516:	08c0      	lsrs	r0, r0, #3
    8518:	4307      	orrs	r7, r0
    851a:	2080      	movs	r0, #128	; 0x80
    851c:	08e4      	lsrs	r4, r4, #3
    851e:	0300      	lsls	r0, r0, #12
    8520:	4204      	tst	r4, r0
    8522:	d007      	beq.n	8534 <__aeabi_dsub+0x558>
    8524:	08cd      	lsrs	r5, r1, #3
    8526:	4205      	tst	r5, r0
    8528:	d104      	bne.n	8534 <__aeabi_dsub+0x558>
    852a:	002c      	movs	r4, r5
    852c:	4698      	mov	r8, r3
    852e:	08d7      	lsrs	r7, r2, #3
    8530:	0749      	lsls	r1, r1, #29
    8532:	430f      	orrs	r7, r1
    8534:	0f7b      	lsrs	r3, r7, #29
    8536:	00e4      	lsls	r4, r4, #3
    8538:	431c      	orrs	r4, r3
    853a:	00ff      	lsls	r7, r7, #3
    853c:	4e30      	ldr	r6, [pc, #192]	; (8600 <__aeabi_dsub+0x624>)
    853e:	e5d3      	b.n	80e8 <__aeabi_dsub+0x10c>
    8540:	4e2f      	ldr	r6, [pc, #188]	; (8600 <__aeabi_dsub+0x624>)
    8542:	45b4      	cmp	ip, r6
    8544:	d1b4      	bne.n	84b0 <__aeabi_dsub+0x4d4>
    8546:	000c      	movs	r4, r1
    8548:	0017      	movs	r7, r2
    854a:	4666      	mov	r6, ip
    854c:	e5cc      	b.n	80e8 <__aeabi_dsub+0x10c>
    854e:	2700      	movs	r7, #0
    8550:	2400      	movs	r4, #0
    8552:	e5e8      	b.n	8126 <__aeabi_dsub+0x14a>
    8554:	2b00      	cmp	r3, #0
    8556:	d039      	beq.n	85cc <__aeabi_dsub+0x5f0>
    8558:	000b      	movs	r3, r1
    855a:	4313      	orrs	r3, r2
    855c:	d100      	bne.n	8560 <__aeabi_dsub+0x584>
    855e:	e744      	b.n	83ea <__aeabi_dsub+0x40e>
    8560:	08c0      	lsrs	r0, r0, #3
    8562:	0767      	lsls	r7, r4, #29
    8564:	4307      	orrs	r7, r0
    8566:	2080      	movs	r0, #128	; 0x80
    8568:	08e4      	lsrs	r4, r4, #3
    856a:	0300      	lsls	r0, r0, #12
    856c:	4204      	tst	r4, r0
    856e:	d0e1      	beq.n	8534 <__aeabi_dsub+0x558>
    8570:	08cb      	lsrs	r3, r1, #3
    8572:	4203      	tst	r3, r0
    8574:	d1de      	bne.n	8534 <__aeabi_dsub+0x558>
    8576:	08d7      	lsrs	r7, r2, #3
    8578:	0749      	lsls	r1, r1, #29
    857a:	430f      	orrs	r7, r1
    857c:	001c      	movs	r4, r3
    857e:	e7d9      	b.n	8534 <__aeabi_dsub+0x558>
    8580:	2100      	movs	r1, #0
    8582:	e771      	b.n	8468 <__aeabi_dsub+0x48c>
    8584:	2500      	movs	r5, #0
    8586:	2700      	movs	r7, #0
    8588:	e5e9      	b.n	815e <__aeabi_dsub+0x182>
    858a:	002e      	movs	r6, r5
    858c:	0027      	movs	r7, r4
    858e:	3e20      	subs	r6, #32
    8590:	40f7      	lsrs	r7, r6
    8592:	2d20      	cmp	r5, #32
    8594:	d02f      	beq.n	85f6 <__aeabi_dsub+0x61a>
    8596:	2640      	movs	r6, #64	; 0x40
    8598:	1b75      	subs	r5, r6, r5
    859a:	40ac      	lsls	r4, r5
    859c:	4650      	mov	r0, sl
    859e:	4320      	orrs	r0, r4
    85a0:	1e44      	subs	r4, r0, #1
    85a2:	41a0      	sbcs	r0, r4
    85a4:	2400      	movs	r4, #0
    85a6:	4338      	orrs	r0, r7
    85a8:	e6dc      	b.n	8364 <__aeabi_dsub+0x388>
    85aa:	2480      	movs	r4, #128	; 0x80
    85ac:	2500      	movs	r5, #0
    85ae:	0324      	lsls	r4, r4, #12
    85b0:	4e13      	ldr	r6, [pc, #76]	; (8600 <__aeabi_dsub+0x624>)
    85b2:	2700      	movs	r7, #0
    85b4:	e5d3      	b.n	815e <__aeabi_dsub+0x182>
    85b6:	4650      	mov	r0, sl
    85b8:	4320      	orrs	r0, r4
    85ba:	0007      	movs	r7, r0
    85bc:	1e78      	subs	r0, r7, #1
    85be:	4187      	sbcs	r7, r0
    85c0:	2400      	movs	r4, #0
    85c2:	18bf      	adds	r7, r7, r2
    85c4:	e760      	b.n	8488 <__aeabi_dsub+0x4ac>
    85c6:	000c      	movs	r4, r1
    85c8:	0017      	movs	r7, r2
    85ca:	e58d      	b.n	80e8 <__aeabi_dsub+0x10c>
    85cc:	000c      	movs	r4, r1
    85ce:	0017      	movs	r7, r2
    85d0:	4e0b      	ldr	r6, [pc, #44]	; (8600 <__aeabi_dsub+0x624>)
    85d2:	e589      	b.n	80e8 <__aeabi_dsub+0x10c>
    85d4:	001e      	movs	r6, r3
    85d6:	0027      	movs	r7, r4
    85d8:	3e20      	subs	r6, #32
    85da:	40f7      	lsrs	r7, r6
    85dc:	2b20      	cmp	r3, #32
    85de:	d00c      	beq.n	85fa <__aeabi_dsub+0x61e>
    85e0:	2640      	movs	r6, #64	; 0x40
    85e2:	1af3      	subs	r3, r6, r3
    85e4:	409c      	lsls	r4, r3
    85e6:	4650      	mov	r0, sl
    85e8:	4320      	orrs	r0, r4
    85ea:	1e44      	subs	r4, r0, #1
    85ec:	41a0      	sbcs	r0, r4
    85ee:	4307      	orrs	r7, r0
    85f0:	2400      	movs	r4, #0
    85f2:	18bf      	adds	r7, r7, r2
    85f4:	e748      	b.n	8488 <__aeabi_dsub+0x4ac>
    85f6:	2400      	movs	r4, #0
    85f8:	e7d0      	b.n	859c <__aeabi_dsub+0x5c0>
    85fa:	2400      	movs	r4, #0
    85fc:	e7f3      	b.n	85e6 <__aeabi_dsub+0x60a>
    85fe:	46c0      	nop			; (mov r8, r8)
    8600:	000007ff 	.word	0x000007ff
    8604:	ff7fffff 	.word	0xff7fffff

00008608 <__aeabi_dcmpun>:
    8608:	b570      	push	{r4, r5, r6, lr}
    860a:	4e0e      	ldr	r6, [pc, #56]	; (8644 <__aeabi_dcmpun+0x3c>)
    860c:	030d      	lsls	r5, r1, #12
    860e:	031c      	lsls	r4, r3, #12
    8610:	0049      	lsls	r1, r1, #1
    8612:	005b      	lsls	r3, r3, #1
    8614:	0b2d      	lsrs	r5, r5, #12
    8616:	0d49      	lsrs	r1, r1, #21
    8618:	0b24      	lsrs	r4, r4, #12
    861a:	0d5b      	lsrs	r3, r3, #21
    861c:	42b1      	cmp	r1, r6
    861e:	d004      	beq.n	862a <__aeabi_dcmpun+0x22>
    8620:	4908      	ldr	r1, [pc, #32]	; (8644 <__aeabi_dcmpun+0x3c>)
    8622:	2000      	movs	r0, #0
    8624:	428b      	cmp	r3, r1
    8626:	d008      	beq.n	863a <__aeabi_dcmpun+0x32>
    8628:	bd70      	pop	{r4, r5, r6, pc}
    862a:	4305      	orrs	r5, r0
    862c:	2001      	movs	r0, #1
    862e:	2d00      	cmp	r5, #0
    8630:	d1fa      	bne.n	8628 <__aeabi_dcmpun+0x20>
    8632:	4904      	ldr	r1, [pc, #16]	; (8644 <__aeabi_dcmpun+0x3c>)
    8634:	2000      	movs	r0, #0
    8636:	428b      	cmp	r3, r1
    8638:	d1f6      	bne.n	8628 <__aeabi_dcmpun+0x20>
    863a:	4314      	orrs	r4, r2
    863c:	0020      	movs	r0, r4
    863e:	1e44      	subs	r4, r0, #1
    8640:	41a0      	sbcs	r0, r4
    8642:	e7f1      	b.n	8628 <__aeabi_dcmpun+0x20>
    8644:	000007ff 	.word	0x000007ff

00008648 <__aeabi_d2iz>:
    8648:	b530      	push	{r4, r5, lr}
    864a:	4d13      	ldr	r5, [pc, #76]	; (8698 <__aeabi_d2iz+0x50>)
    864c:	030a      	lsls	r2, r1, #12
    864e:	004b      	lsls	r3, r1, #1
    8650:	0b12      	lsrs	r2, r2, #12
    8652:	0d5b      	lsrs	r3, r3, #21
    8654:	0fc9      	lsrs	r1, r1, #31
    8656:	2400      	movs	r4, #0
    8658:	42ab      	cmp	r3, r5
    865a:	dd10      	ble.n	867e <__aeabi_d2iz+0x36>
    865c:	4c0f      	ldr	r4, [pc, #60]	; (869c <__aeabi_d2iz+0x54>)
    865e:	42a3      	cmp	r3, r4
    8660:	dc0f      	bgt.n	8682 <__aeabi_d2iz+0x3a>
    8662:	2480      	movs	r4, #128	; 0x80
    8664:	4d0e      	ldr	r5, [pc, #56]	; (86a0 <__aeabi_d2iz+0x58>)
    8666:	0364      	lsls	r4, r4, #13
    8668:	4322      	orrs	r2, r4
    866a:	1aed      	subs	r5, r5, r3
    866c:	2d1f      	cmp	r5, #31
    866e:	dd0b      	ble.n	8688 <__aeabi_d2iz+0x40>
    8670:	480c      	ldr	r0, [pc, #48]	; (86a4 <__aeabi_d2iz+0x5c>)
    8672:	1ac3      	subs	r3, r0, r3
    8674:	40da      	lsrs	r2, r3
    8676:	4254      	negs	r4, r2
    8678:	2900      	cmp	r1, #0
    867a:	d100      	bne.n	867e <__aeabi_d2iz+0x36>
    867c:	0014      	movs	r4, r2
    867e:	0020      	movs	r0, r4
    8680:	bd30      	pop	{r4, r5, pc}
    8682:	4b09      	ldr	r3, [pc, #36]	; (86a8 <__aeabi_d2iz+0x60>)
    8684:	18cc      	adds	r4, r1, r3
    8686:	e7fa      	b.n	867e <__aeabi_d2iz+0x36>
    8688:	4c08      	ldr	r4, [pc, #32]	; (86ac <__aeabi_d2iz+0x64>)
    868a:	40e8      	lsrs	r0, r5
    868c:	46a4      	mov	ip, r4
    868e:	4463      	add	r3, ip
    8690:	409a      	lsls	r2, r3
    8692:	4302      	orrs	r2, r0
    8694:	e7ef      	b.n	8676 <__aeabi_d2iz+0x2e>
    8696:	46c0      	nop			; (mov r8, r8)
    8698:	000003fe 	.word	0x000003fe
    869c:	0000041d 	.word	0x0000041d
    86a0:	00000433 	.word	0x00000433
    86a4:	00000413 	.word	0x00000413
    86a8:	7fffffff 	.word	0x7fffffff
    86ac:	fffffbed 	.word	0xfffffbed

000086b0 <__aeabi_i2d>:
    86b0:	b570      	push	{r4, r5, r6, lr}
    86b2:	2800      	cmp	r0, #0
    86b4:	d030      	beq.n	8718 <__aeabi_i2d+0x68>
    86b6:	17c3      	asrs	r3, r0, #31
    86b8:	18c4      	adds	r4, r0, r3
    86ba:	405c      	eors	r4, r3
    86bc:	0fc5      	lsrs	r5, r0, #31
    86be:	0020      	movs	r0, r4
    86c0:	f000 f94c 	bl	895c <__clzsi2>
    86c4:	4b17      	ldr	r3, [pc, #92]	; (8724 <__aeabi_i2d+0x74>)
    86c6:	4a18      	ldr	r2, [pc, #96]	; (8728 <__aeabi_i2d+0x78>)
    86c8:	1a1b      	subs	r3, r3, r0
    86ca:	1ad2      	subs	r2, r2, r3
    86cc:	2a1f      	cmp	r2, #31
    86ce:	dd18      	ble.n	8702 <__aeabi_i2d+0x52>
    86d0:	4a16      	ldr	r2, [pc, #88]	; (872c <__aeabi_i2d+0x7c>)
    86d2:	1ad2      	subs	r2, r2, r3
    86d4:	4094      	lsls	r4, r2
    86d6:	2200      	movs	r2, #0
    86d8:	0324      	lsls	r4, r4, #12
    86da:	055b      	lsls	r3, r3, #21
    86dc:	0b24      	lsrs	r4, r4, #12
    86de:	0d5b      	lsrs	r3, r3, #21
    86e0:	2100      	movs	r1, #0
    86e2:	0010      	movs	r0, r2
    86e4:	0324      	lsls	r4, r4, #12
    86e6:	0d0a      	lsrs	r2, r1, #20
    86e8:	0b24      	lsrs	r4, r4, #12
    86ea:	0512      	lsls	r2, r2, #20
    86ec:	4322      	orrs	r2, r4
    86ee:	4c10      	ldr	r4, [pc, #64]	; (8730 <__aeabi_i2d+0x80>)
    86f0:	051b      	lsls	r3, r3, #20
    86f2:	4022      	ands	r2, r4
    86f4:	4313      	orrs	r3, r2
    86f6:	005b      	lsls	r3, r3, #1
    86f8:	07ed      	lsls	r5, r5, #31
    86fa:	085b      	lsrs	r3, r3, #1
    86fc:	432b      	orrs	r3, r5
    86fe:	0019      	movs	r1, r3
    8700:	bd70      	pop	{r4, r5, r6, pc}
    8702:	0021      	movs	r1, r4
    8704:	4091      	lsls	r1, r2
    8706:	000a      	movs	r2, r1
    8708:	210b      	movs	r1, #11
    870a:	1a08      	subs	r0, r1, r0
    870c:	40c4      	lsrs	r4, r0
    870e:	055b      	lsls	r3, r3, #21
    8710:	0324      	lsls	r4, r4, #12
    8712:	0b24      	lsrs	r4, r4, #12
    8714:	0d5b      	lsrs	r3, r3, #21
    8716:	e7e3      	b.n	86e0 <__aeabi_i2d+0x30>
    8718:	2500      	movs	r5, #0
    871a:	2300      	movs	r3, #0
    871c:	2400      	movs	r4, #0
    871e:	2200      	movs	r2, #0
    8720:	e7de      	b.n	86e0 <__aeabi_i2d+0x30>
    8722:	46c0      	nop			; (mov r8, r8)
    8724:	0000041e 	.word	0x0000041e
    8728:	00000433 	.word	0x00000433
    872c:	00000413 	.word	0x00000413
    8730:	800fffff 	.word	0x800fffff

00008734 <__aeabi_ui2d>:
    8734:	b510      	push	{r4, lr}
    8736:	1e04      	subs	r4, r0, #0
    8738:	d028      	beq.n	878c <__aeabi_ui2d+0x58>
    873a:	f000 f90f 	bl	895c <__clzsi2>
    873e:	4b15      	ldr	r3, [pc, #84]	; (8794 <__aeabi_ui2d+0x60>)
    8740:	4a15      	ldr	r2, [pc, #84]	; (8798 <__aeabi_ui2d+0x64>)
    8742:	1a1b      	subs	r3, r3, r0
    8744:	1ad2      	subs	r2, r2, r3
    8746:	2a1f      	cmp	r2, #31
    8748:	dd15      	ble.n	8776 <__aeabi_ui2d+0x42>
    874a:	4a14      	ldr	r2, [pc, #80]	; (879c <__aeabi_ui2d+0x68>)
    874c:	1ad2      	subs	r2, r2, r3
    874e:	4094      	lsls	r4, r2
    8750:	2200      	movs	r2, #0
    8752:	0324      	lsls	r4, r4, #12
    8754:	055b      	lsls	r3, r3, #21
    8756:	0b24      	lsrs	r4, r4, #12
    8758:	0d5b      	lsrs	r3, r3, #21
    875a:	2100      	movs	r1, #0
    875c:	0010      	movs	r0, r2
    875e:	0324      	lsls	r4, r4, #12
    8760:	0d0a      	lsrs	r2, r1, #20
    8762:	0b24      	lsrs	r4, r4, #12
    8764:	0512      	lsls	r2, r2, #20
    8766:	4322      	orrs	r2, r4
    8768:	4c0d      	ldr	r4, [pc, #52]	; (87a0 <__aeabi_ui2d+0x6c>)
    876a:	051b      	lsls	r3, r3, #20
    876c:	4022      	ands	r2, r4
    876e:	4313      	orrs	r3, r2
    8770:	005b      	lsls	r3, r3, #1
    8772:	0859      	lsrs	r1, r3, #1
    8774:	bd10      	pop	{r4, pc}
    8776:	0021      	movs	r1, r4
    8778:	4091      	lsls	r1, r2
    877a:	000a      	movs	r2, r1
    877c:	210b      	movs	r1, #11
    877e:	1a08      	subs	r0, r1, r0
    8780:	40c4      	lsrs	r4, r0
    8782:	055b      	lsls	r3, r3, #21
    8784:	0324      	lsls	r4, r4, #12
    8786:	0b24      	lsrs	r4, r4, #12
    8788:	0d5b      	lsrs	r3, r3, #21
    878a:	e7e6      	b.n	875a <__aeabi_ui2d+0x26>
    878c:	2300      	movs	r3, #0
    878e:	2400      	movs	r4, #0
    8790:	2200      	movs	r2, #0
    8792:	e7e2      	b.n	875a <__aeabi_ui2d+0x26>
    8794:	0000041e 	.word	0x0000041e
    8798:	00000433 	.word	0x00000433
    879c:	00000413 	.word	0x00000413
    87a0:	800fffff 	.word	0x800fffff

000087a4 <__aeabi_f2d>:
    87a4:	0041      	lsls	r1, r0, #1
    87a6:	0e09      	lsrs	r1, r1, #24
    87a8:	1c4b      	adds	r3, r1, #1
    87aa:	b570      	push	{r4, r5, r6, lr}
    87ac:	b2db      	uxtb	r3, r3
    87ae:	0246      	lsls	r6, r0, #9
    87b0:	0a75      	lsrs	r5, r6, #9
    87b2:	0fc4      	lsrs	r4, r0, #31
    87b4:	2b01      	cmp	r3, #1
    87b6:	dd14      	ble.n	87e2 <__aeabi_f2d+0x3e>
    87b8:	23e0      	movs	r3, #224	; 0xe0
    87ba:	009b      	lsls	r3, r3, #2
    87bc:	076d      	lsls	r5, r5, #29
    87be:	0b36      	lsrs	r6, r6, #12
    87c0:	18cb      	adds	r3, r1, r3
    87c2:	2100      	movs	r1, #0
    87c4:	0d0a      	lsrs	r2, r1, #20
    87c6:	0028      	movs	r0, r5
    87c8:	0512      	lsls	r2, r2, #20
    87ca:	4d1c      	ldr	r5, [pc, #112]	; (883c <__aeabi_f2d+0x98>)
    87cc:	4332      	orrs	r2, r6
    87ce:	055b      	lsls	r3, r3, #21
    87d0:	402a      	ands	r2, r5
    87d2:	085b      	lsrs	r3, r3, #1
    87d4:	4313      	orrs	r3, r2
    87d6:	005b      	lsls	r3, r3, #1
    87d8:	07e4      	lsls	r4, r4, #31
    87da:	085b      	lsrs	r3, r3, #1
    87dc:	4323      	orrs	r3, r4
    87de:	0019      	movs	r1, r3
    87e0:	bd70      	pop	{r4, r5, r6, pc}
    87e2:	2900      	cmp	r1, #0
    87e4:	d114      	bne.n	8810 <__aeabi_f2d+0x6c>
    87e6:	2d00      	cmp	r5, #0
    87e8:	d01e      	beq.n	8828 <__aeabi_f2d+0x84>
    87ea:	0028      	movs	r0, r5
    87ec:	f000 f8b6 	bl	895c <__clzsi2>
    87f0:	280a      	cmp	r0, #10
    87f2:	dc1c      	bgt.n	882e <__aeabi_f2d+0x8a>
    87f4:	230b      	movs	r3, #11
    87f6:	002a      	movs	r2, r5
    87f8:	1a1b      	subs	r3, r3, r0
    87fa:	40da      	lsrs	r2, r3
    87fc:	0003      	movs	r3, r0
    87fe:	3315      	adds	r3, #21
    8800:	409d      	lsls	r5, r3
    8802:	4b0f      	ldr	r3, [pc, #60]	; (8840 <__aeabi_f2d+0x9c>)
    8804:	0312      	lsls	r2, r2, #12
    8806:	1a1b      	subs	r3, r3, r0
    8808:	055b      	lsls	r3, r3, #21
    880a:	0b16      	lsrs	r6, r2, #12
    880c:	0d5b      	lsrs	r3, r3, #21
    880e:	e7d8      	b.n	87c2 <__aeabi_f2d+0x1e>
    8810:	2d00      	cmp	r5, #0
    8812:	d006      	beq.n	8822 <__aeabi_f2d+0x7e>
    8814:	0b32      	lsrs	r2, r6, #12
    8816:	2680      	movs	r6, #128	; 0x80
    8818:	0336      	lsls	r6, r6, #12
    881a:	076d      	lsls	r5, r5, #29
    881c:	4316      	orrs	r6, r2
    881e:	4b09      	ldr	r3, [pc, #36]	; (8844 <__aeabi_f2d+0xa0>)
    8820:	e7cf      	b.n	87c2 <__aeabi_f2d+0x1e>
    8822:	4b08      	ldr	r3, [pc, #32]	; (8844 <__aeabi_f2d+0xa0>)
    8824:	2600      	movs	r6, #0
    8826:	e7cc      	b.n	87c2 <__aeabi_f2d+0x1e>
    8828:	2300      	movs	r3, #0
    882a:	2600      	movs	r6, #0
    882c:	e7c9      	b.n	87c2 <__aeabi_f2d+0x1e>
    882e:	0003      	movs	r3, r0
    8830:	002a      	movs	r2, r5
    8832:	3b0b      	subs	r3, #11
    8834:	409a      	lsls	r2, r3
    8836:	2500      	movs	r5, #0
    8838:	e7e3      	b.n	8802 <__aeabi_f2d+0x5e>
    883a:	46c0      	nop			; (mov r8, r8)
    883c:	800fffff 	.word	0x800fffff
    8840:	00000389 	.word	0x00000389
    8844:	000007ff 	.word	0x000007ff

00008848 <__aeabi_d2f>:
    8848:	b5f0      	push	{r4, r5, r6, r7, lr}
    884a:	004c      	lsls	r4, r1, #1
    884c:	0d64      	lsrs	r4, r4, #21
    884e:	030b      	lsls	r3, r1, #12
    8850:	1c62      	adds	r2, r4, #1
    8852:	0f45      	lsrs	r5, r0, #29
    8854:	0a5b      	lsrs	r3, r3, #9
    8856:	0552      	lsls	r2, r2, #21
    8858:	432b      	orrs	r3, r5
    885a:	0fc9      	lsrs	r1, r1, #31
    885c:	00c5      	lsls	r5, r0, #3
    885e:	0d52      	lsrs	r2, r2, #21
    8860:	2a01      	cmp	r2, #1
    8862:	dd28      	ble.n	88b6 <__aeabi_d2f+0x6e>
    8864:	4a3a      	ldr	r2, [pc, #232]	; (8950 <__aeabi_d2f+0x108>)
    8866:	18a6      	adds	r6, r4, r2
    8868:	2efe      	cmp	r6, #254	; 0xfe
    886a:	dc1b      	bgt.n	88a4 <__aeabi_d2f+0x5c>
    886c:	2e00      	cmp	r6, #0
    886e:	dd3e      	ble.n	88ee <__aeabi_d2f+0xa6>
    8870:	0180      	lsls	r0, r0, #6
    8872:	0002      	movs	r2, r0
    8874:	1e50      	subs	r0, r2, #1
    8876:	4182      	sbcs	r2, r0
    8878:	0f6d      	lsrs	r5, r5, #29
    887a:	432a      	orrs	r2, r5
    887c:	00db      	lsls	r3, r3, #3
    887e:	4313      	orrs	r3, r2
    8880:	075a      	lsls	r2, r3, #29
    8882:	d004      	beq.n	888e <__aeabi_d2f+0x46>
    8884:	220f      	movs	r2, #15
    8886:	401a      	ands	r2, r3
    8888:	2a04      	cmp	r2, #4
    888a:	d000      	beq.n	888e <__aeabi_d2f+0x46>
    888c:	3304      	adds	r3, #4
    888e:	2280      	movs	r2, #128	; 0x80
    8890:	04d2      	lsls	r2, r2, #19
    8892:	401a      	ands	r2, r3
    8894:	d05a      	beq.n	894c <__aeabi_d2f+0x104>
    8896:	3601      	adds	r6, #1
    8898:	2eff      	cmp	r6, #255	; 0xff
    889a:	d003      	beq.n	88a4 <__aeabi_d2f+0x5c>
    889c:	019b      	lsls	r3, r3, #6
    889e:	0a5b      	lsrs	r3, r3, #9
    88a0:	b2f4      	uxtb	r4, r6
    88a2:	e001      	b.n	88a8 <__aeabi_d2f+0x60>
    88a4:	24ff      	movs	r4, #255	; 0xff
    88a6:	2300      	movs	r3, #0
    88a8:	0258      	lsls	r0, r3, #9
    88aa:	05e4      	lsls	r4, r4, #23
    88ac:	0a40      	lsrs	r0, r0, #9
    88ae:	07c9      	lsls	r1, r1, #31
    88b0:	4320      	orrs	r0, r4
    88b2:	4308      	orrs	r0, r1
    88b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    88b6:	2c00      	cmp	r4, #0
    88b8:	d007      	beq.n	88ca <__aeabi_d2f+0x82>
    88ba:	431d      	orrs	r5, r3
    88bc:	d0f2      	beq.n	88a4 <__aeabi_d2f+0x5c>
    88be:	2080      	movs	r0, #128	; 0x80
    88c0:	00db      	lsls	r3, r3, #3
    88c2:	0480      	lsls	r0, r0, #18
    88c4:	4303      	orrs	r3, r0
    88c6:	26ff      	movs	r6, #255	; 0xff
    88c8:	e7da      	b.n	8880 <__aeabi_d2f+0x38>
    88ca:	432b      	orrs	r3, r5
    88cc:	d003      	beq.n	88d6 <__aeabi_d2f+0x8e>
    88ce:	2305      	movs	r3, #5
    88d0:	08db      	lsrs	r3, r3, #3
    88d2:	2cff      	cmp	r4, #255	; 0xff
    88d4:	d003      	beq.n	88de <__aeabi_d2f+0x96>
    88d6:	025b      	lsls	r3, r3, #9
    88d8:	0a5b      	lsrs	r3, r3, #9
    88da:	b2e4      	uxtb	r4, r4
    88dc:	e7e4      	b.n	88a8 <__aeabi_d2f+0x60>
    88de:	2b00      	cmp	r3, #0
    88e0:	d032      	beq.n	8948 <__aeabi_d2f+0x100>
    88e2:	2080      	movs	r0, #128	; 0x80
    88e4:	03c0      	lsls	r0, r0, #15
    88e6:	4303      	orrs	r3, r0
    88e8:	025b      	lsls	r3, r3, #9
    88ea:	0a5b      	lsrs	r3, r3, #9
    88ec:	e7dc      	b.n	88a8 <__aeabi_d2f+0x60>
    88ee:	0032      	movs	r2, r6
    88f0:	3217      	adds	r2, #23
    88f2:	db14      	blt.n	891e <__aeabi_d2f+0xd6>
    88f4:	2280      	movs	r2, #128	; 0x80
    88f6:	271e      	movs	r7, #30
    88f8:	0412      	lsls	r2, r2, #16
    88fa:	4313      	orrs	r3, r2
    88fc:	1bbf      	subs	r7, r7, r6
    88fe:	2f1f      	cmp	r7, #31
    8900:	dc0f      	bgt.n	8922 <__aeabi_d2f+0xda>
    8902:	4a14      	ldr	r2, [pc, #80]	; (8954 <__aeabi_d2f+0x10c>)
    8904:	4694      	mov	ip, r2
    8906:	4464      	add	r4, ip
    8908:	002a      	movs	r2, r5
    890a:	40a5      	lsls	r5, r4
    890c:	002e      	movs	r6, r5
    890e:	40a3      	lsls	r3, r4
    8910:	1e75      	subs	r5, r6, #1
    8912:	41ae      	sbcs	r6, r5
    8914:	40fa      	lsrs	r2, r7
    8916:	4333      	orrs	r3, r6
    8918:	4313      	orrs	r3, r2
    891a:	2600      	movs	r6, #0
    891c:	e7b0      	b.n	8880 <__aeabi_d2f+0x38>
    891e:	2400      	movs	r4, #0
    8920:	e7d5      	b.n	88ce <__aeabi_d2f+0x86>
    8922:	2202      	movs	r2, #2
    8924:	4252      	negs	r2, r2
    8926:	1b96      	subs	r6, r2, r6
    8928:	001a      	movs	r2, r3
    892a:	40f2      	lsrs	r2, r6
    892c:	2f20      	cmp	r7, #32
    892e:	d009      	beq.n	8944 <__aeabi_d2f+0xfc>
    8930:	4809      	ldr	r0, [pc, #36]	; (8958 <__aeabi_d2f+0x110>)
    8932:	4684      	mov	ip, r0
    8934:	4464      	add	r4, ip
    8936:	40a3      	lsls	r3, r4
    8938:	432b      	orrs	r3, r5
    893a:	1e5d      	subs	r5, r3, #1
    893c:	41ab      	sbcs	r3, r5
    893e:	2600      	movs	r6, #0
    8940:	4313      	orrs	r3, r2
    8942:	e79d      	b.n	8880 <__aeabi_d2f+0x38>
    8944:	2300      	movs	r3, #0
    8946:	e7f7      	b.n	8938 <__aeabi_d2f+0xf0>
    8948:	2300      	movs	r3, #0
    894a:	e7ad      	b.n	88a8 <__aeabi_d2f+0x60>
    894c:	0034      	movs	r4, r6
    894e:	e7bf      	b.n	88d0 <__aeabi_d2f+0x88>
    8950:	fffffc80 	.word	0xfffffc80
    8954:	fffffc82 	.word	0xfffffc82
    8958:	fffffca2 	.word	0xfffffca2

0000895c <__clzsi2>:
    895c:	211c      	movs	r1, #28
    895e:	2301      	movs	r3, #1
    8960:	041b      	lsls	r3, r3, #16
    8962:	4298      	cmp	r0, r3
    8964:	d301      	bcc.n	896a <__clzsi2+0xe>
    8966:	0c00      	lsrs	r0, r0, #16
    8968:	3910      	subs	r1, #16
    896a:	0a1b      	lsrs	r3, r3, #8
    896c:	4298      	cmp	r0, r3
    896e:	d301      	bcc.n	8974 <__clzsi2+0x18>
    8970:	0a00      	lsrs	r0, r0, #8
    8972:	3908      	subs	r1, #8
    8974:	091b      	lsrs	r3, r3, #4
    8976:	4298      	cmp	r0, r3
    8978:	d301      	bcc.n	897e <__clzsi2+0x22>
    897a:	0900      	lsrs	r0, r0, #4
    897c:	3904      	subs	r1, #4
    897e:	a202      	add	r2, pc, #8	; (adr r2, 8988 <__clzsi2+0x2c>)
    8980:	5c10      	ldrb	r0, [r2, r0]
    8982:	1840      	adds	r0, r0, r1
    8984:	4770      	bx	lr
    8986:	46c0      	nop			; (mov r8, r8)
    8988:	02020304 	.word	0x02020304
    898c:	01010101 	.word	0x01010101
	...
    8998:	0000736d 	.word	0x0000736d
    899c:	0000000a 	.word	0x0000000a
    89a0:	0000646d 	.word	0x0000646d
    89a4:	0000000a 	.word	0x0000000a
    89a8:	0000616d 	.word	0x0000616d
    89ac:	0000000a 	.word	0x0000000a
    89b0:	0000776d 	.word	0x0000776d
    89b4:	0000000a 	.word	0x0000000a
    89b8:	322e3525 	.word	0x322e3525
    89bc:	25202c66 	.word	0x25202c66
    89c0:	66322e35 	.word	0x66322e35
    89c4:	3525202c 	.word	0x3525202c
    89c8:	0a66322e 	.word	0x0a66322e
    89cc:	00000000 	.word	0x00000000

000089d0 <_tcc_intflag>:
    89d0:	00000001 00000002 00000004 00000008     ................
    89e0:	00001000 00002000 00004000 00008000     ..... ...@......
    89f0:	00010000 00020000 00040000 00080000     ................
    8a00:	0000776d 00000000 0000206d 00000000     mw......m ......

00008a10 <tc_interrupt_vectors.12756>:
    8a10:	00141312 42000800 42000c00 42001000     .......B...B...B
    8a20:	42001400 42001800 42001c00 00001a9e     ...B...B...B....
    8a30:	00001a9a 00001a9a 00001afc 00001afc     ................
    8a40:	00001ab2 00001aa4 00001ab8 00001aea     ................
    8a50:	00001d38 00001d18 00001d18 00001da4     8...............
    8a60:	00001d2a 00001d46 00001d1c 00001d54     *...F.......T...
    8a70:	00001d94 42002c00 42003000 42003400     .....,.B.0.B.4.B

00008a80 <tc_interrupt_vectors.11884>:
    8a80:	00141312 6e6f7266 6f6e2074 73206564     ....front node s
    8a90:	70757465 6d6f6320 74656c70 00000065     etup complete...

00008aa0 <_global_impure_ptr>:
    8aa0:	20000010 00464e49 00666e69 004e414e     ... INF.inf.NAN.
    8ab0:	006e616e 31300030 35343332 39383736     nan.0.0123456789
    8ac0:	44434241 30004645 34333231 38373635     ABCDEF.012345678
    8ad0:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
    8ae0:	4e614e00 00000000                       .NaN....

00008ae8 <__sf_fake_stderr>:
	...

00008b08 <__sf_fake_stdin>:
	...

00008b28 <__sf_fake_stdout>:
	...

00008b48 <__mprec_bigtens>:
    8b48:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    8b58:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    8b68:	7f73bf3c 75154fdd                       <.s..O.u

00008b70 <__mprec_tens>:
    8b70:	00000000 3ff00000 00000000 40240000     .......?......$@
    8b80:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    8b90:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    8ba0:	00000000 412e8480 00000000 416312d0     .......A......cA
    8bb0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    8bc0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    8bd0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    8be0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    8bf0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    8c00:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    8c10:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    8c20:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    8c30:	79d99db4 44ea7843                       ...yCx.D

00008c38 <p05.6052>:
    8c38:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    8c48:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
    8c58:	5849534f 00002e00                                OSIX...

00008c5f <_ctype_>:
    8c5f:	20202000 20202020 28282020 20282828     .         ((((( 
    8c6f:	20202020 20202020 20202020 20202020                     
    8c7f:	10108820 10101010 10101010 10101010      ...............
    8c8f:	04040410 04040404 10040404 10101010     ................
    8c9f:	41411010 41414141 01010101 01010101     ..AAAAAA........
    8caf:	01010101 01010101 01010101 10101010     ................
    8cbf:	42421010 42424242 02020202 02020202     ..BBBBBB........
    8ccf:	02020202 02020202 02020202 10101010     ................
    8cdf:	00000020 00000000 00000000 00000000      ...............
	...
    8d5f:	00672000 0066f000 00670200 00664400     . g...f...g..Df.
    8d6f:	00670200 0066e600 00670200 00664400     ..g...f...g..Df.
    8d7f:	0066f000 0066f000 0066e600 00664400     ..f...f...f..Df.
    8d8f:	00664c00 00664c00 00664c00 00670800     .Lf..Lf..Lf...g.
    8d9f:	0066f000 0066f000 0066c400 0067a800     ..f...f...f...g.
    8daf:	0066c400 0066e600 0066c400 0067a800     ..f...f...f...g.
    8dbf:	0066f000 0066f000 0066e600 0067a800     ..f...f...f...g.
    8dcf:	00664c00 00664c00 00664c00 0067b200     .Lf..Lf..Lf...g.
    8ddf:	006aa000 0069f000 0069f000 0069ee00     ..j...i...i...i.
    8def:	006a9200 006a9200 006a8800 0069ee00     ..j...j...j...i.
    8dff:	006a9200 006a8800 006a9200 0069ee00     ..j...j...j...i.
    8e0f:	006a9800 006a9800 006a9800 006b2800     ..j...j...j..(k.
    8e1f:	00746c00 00744e00 00740800 00732600     .lt..Nt...t..&s.
    8e2f:	00740800 00744000 00740800 00732600     ..t..@t...t..&s.
    8e3f:	00744e00 00744e00 00744000 00732600     .Nt..Nt..@t..&s.
    8e4f:	00731e00 00731e00 00731e00 00768400     ..s...s...s...v.
    8e5f:	007ccc00 007b8c00 007b8c00 007b8800     ..|...{...{...{.
    8e6f:	007ca400 007ca400 007c9600 007b8800     ..|...|...|...{.
    8e7f:	007ca400 007c9600 007ca400 007b8800     ..|...|...|...{.
    8e8f:	007cac00 007cac00 007cac00 007eb000     ..|...|...|...~.
	...

00008ea0 <_init>:
    8ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8ea2:	46c0      	nop			; (mov r8, r8)
    8ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8ea6:	bc08      	pop	{r3}
    8ea8:	469e      	mov	lr, r3
    8eaa:	4770      	bx	lr

00008eac <__init_array_start>:
    8eac:	000000dd 	.word	0x000000dd

00008eb0 <_fini>:
    8eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8eb2:	46c0      	nop			; (mov r8, r8)
    8eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8eb6:	bc08      	pop	{r3}
    8eb8:	469e      	mov	lr, r3
    8eba:	4770      	bx	lr

00008ebc <__fini_array_start>:
    8ebc:	000000b5 	.word	0x000000b5
